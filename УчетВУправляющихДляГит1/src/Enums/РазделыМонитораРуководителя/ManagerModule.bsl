#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает массив разделов монитора руководителя по умолчанию
// Возвращаемое значение:
// Массив - Список разделов монитора руководителя доступных по умолчанию
Функция РазделыМонитораРуководителяПоУмолчанию() Экспорт
	
	РазделыПоУмолчанию = Новый Массив;
	НеиспользуемыеРазделы = НеиспользуемыеРазделы();
	
	РазделыПоУмолчанию.Добавить(ОстаткиДенежныхСредств);
	РазделыПоУмолчанию.Добавить(ПоступлениеДенежныхСредств);
	РазделыПоУмолчанию.Добавить(РасходДенежныхСредств);
	
	Если НеиспользуемыеРазделы.Найти(ПродажиПоКонтрагентам) = Неопределено Тогда
		РазделыПоУмолчанию.Добавить(ПродажиПоКонтрагентам);
	КонецЕсли;
	Если НеиспользуемыеРазделы.Найти(ЗадолженностьПокупателей) = Неопределено Тогда
		РазделыПоУмолчанию.Добавить(ЗадолженностьПокупателей);
	КонецЕсли;
	Если НеиспользуемыеРазделы.Найти(ЗадолженностьПоставщикам) = Неопределено Тогда
		РазделыПоУмолчанию.Добавить(ЗадолженностьПоставщикам);
	КонецЕсли;
	
	Возврат РазделыПоУмолчанию;
	
КонецФункции

// Возвращает массив разделов монитора руководителя, данные которых
// предоставляются веб-сервисом.
//
// Возвращаемое значение:
// Массив - Список разделов монитора руководителя, данные которых предоставляются веб-сервисом.
Функция ПубликуемыеРазделыМонитораРуководителя() Экспорт
	
	ПубликуемыеРазделы = Новый Массив;
	ПубликуемыеРазделы.Добавить(ОстаткиДенежныхСредств);
	ПубликуемыеРазделы.Добавить(ПоступлениеДенежныхСредств);
	ПубликуемыеРазделы.Добавить(РасходДенежныхСредств);
	ПубликуемыеРазделы.Добавить(ПродажиПоКонтрагентам);
	ПубликуемыеРазделы.Добавить(ЗадолженностьПокупателей);
	ПубликуемыеРазделы.Добавить(ЗадолженностьПоставщикам);
	
	Возврат ПубликуемыеРазделы;
	
КонецФункции

// Возвращает массив оборотных разделов монитора руководителя
// Возвращаемое значение:
// Массив - Список оборотных разделов монитора руководителя
Функция ОборотныеРазделы() Экспорт
	
	ОборотныеРазделы = Новый Массив;
	ОборотныеРазделы.Добавить(ПоступлениеДенежныхСредств);
	ОборотныеРазделы.Добавить(РасходДенежныхСредств);
	ОборотныеРазделы.Добавить(ПродажиПоКонтрагентам);
	ОборотныеРазделы.Добавить(ПродажиПоНоменклатурнымГруппам);
	
	Возврат ОборотныеРазделы;
	
КонецФункции

// Определяет перечень разделов, к данным которых у пользователя есть доступ.
// 
// Возвращаемое значение:
//  ФиксированныйМассив - содержит элементы перечисления
//
Функция РазрешенныеПользователюРазделы() Экспорт
	
	РазрешенныеРазделы = Новый Массив;
	
	ПолноправныйПользователь = Пользователи.ЭтоПолноправныйПользователь( , , Ложь);
	
	Для Каждого МетаданныеЗначения Из Метаданные.Перечисления.РазделыМонитораРуководителя.ЗначенияПеречисления Цикл
		
		Раздел = Перечисления.РазделыМонитораРуководителя[МетаданныеЗначения.Имя];
		
		Если ПолноправныйПользователь 
			ИЛИ ДанныеРазделаДоступны(Раздел)
			ИЛИ ДанныеРазделаДоступныЧерезВнешнийПрограммныйИнтерфейс(Раздел) Тогда
			РазрешенныеРазделы.Добавить(Раздел);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый ФиксированныйМассив(РазрешенныеРазделы);
	
КонецФункции

// Проверяет достаточность прав пользователя для просмотра данных раздела монитора руководителя.
// Эти права определяются правами пользователя на просмотр исходных данных,
// на основании которых рассчитаны показатели монитора руководителя.
//
// Может быть вызвана в привилегированном режиме.
//
// Параметры:
//  Раздел	 - ПеречислениеСсылка.РазделыМонитораРуководителя - раздел монитора,
//             доступ к данным раздела которого проверяется
// 
// Возвращаемое значение:
//  Булево - Истина, если данные раздела доступны пользователю.
//
Функция ДанныеРазделаДоступны(Раздел) Экспорт
	
	// Может быть вызвана в привилегированном режиме.
	// В этом случае в ПравоДоступа() следует указывать параметр Пользователь.
	// Но может быть вызвана и вне привилегированного режима.
	// В этом случае параметр Пользователь указывать не следует.
	// Чтобы не делать две ветки, устанавливаем привилегированный режим.
	УстановитьПривилегированныйРежим(Истина);
	
	Если Раздел = НеоплаченныеСчетаПокупателям Тогда
		
		Возврат ПравоДоступа(
			"Просмотр",
			Метаданные.Документы.СчетНаОплатуПокупателю,
			ПользователиИнформационнойБазы.ТекущийПользователь());
		
	Иначе
		
		Возврат УправлениеДоступомБПВызовСервера.ПравоДоступаКДаннымБухгалтерии();
		
	КонецЕсли;
	
КонецФункции

Функция СтруктураРасшифровкиРаздела(Раздел) Экспорт
	
	СтруктураРасшифровки = Новый Структура;
	
	Если Раздел = ОстаткиДенежныхСредств Тогда
		
		СтруктураРасшифровки.Вставить("СсылкаНаОтчет", "e1cib/app/Отчет.ОстаткиДенежныхСредств");
		СтруктураРасшифровки.Вставить("ФормаОтчета",   "Отчет.ОстаткиДенежныхСредств.Форма.ФормаОтчета");
		
		Отбор = Новый Массив;
		Отбор.Добавить(Новый Структура("Поле, Значение, ВидСравнения","ВидДенежныхСредств", "Деньги у подотчетных лиц", ВидСравненияКомпоновкиДанных.НеРавно));
		СтруктураРасшифровки.Вставить("Отбор", Отбор);
	
		СтруктураРасшифровки.Вставить("КлючеваяОперация", "МониторРасшифровкаРазделаОстаткиДенежныхСредств");
		
	ИначеЕсли Раздел = ПоступлениеДенежныхСредств Тогда
		
		СтруктураРасшифровки.Вставить("СсылкаНаОтчет",     "e1cib/app/Отчет.ПоступленияДенежныхСредств");
		СтруктураРасшифровки.Вставить("ФормаОтчета",       "Отчет.ПоступленияДенежныхСредств.Форма.ФормаОтчета");
		СтруктураРасшифровки.Вставить("ГруппировкаОтчета", СтандартныеГруппировкиДенежныхСредств());
		
	ИначеЕсли Раздел = РасходДенежныхСредств Тогда
		
		СтруктураРасшифровки.Вставить("СсылкаНаОтчет",     "e1cib/app/Отчет.РасходыДенежныхСредств");
		СтруктураРасшифровки.Вставить("ФормаОтчета",       "Отчет.РасходыДенежныхСредств.Форма.ФормаОтчета");
		СтруктураРасшифровки.Вставить("ГруппировкаОтчета", СтандартныеГруппировкиДенежныхСредств());
		
	ИначеЕсли Раздел = ПродажиПоКонтрагентам Тогда
		
		СтруктураРасшифровки.Вставить("СсылкаНаОтчет", "e1cib/app/Отчет.Продажи");
		СтруктураРасшифровки.Вставить("ФормаОтчета",   "Отчет.Продажи.Форма.ФормаОтчета");
		СтруктураРасшифровки.Вставить("КлючВарианта",  "ПродажиПоКонтрагентам");
		
	ИначеЕсли Раздел = ПродажиПоНоменклатурнымГруппам Тогда
		
		СтруктураРасшифровки.Вставить("СсылкаНаОтчет", "");
		СтруктураРасшифровки.Вставить("ФормаОтчета",   "Отчет.Продажи.Форма.ФормаОтчета");
		СтруктураРасшифровки.Вставить("КлючВарианта",  "ПродажиПоНоменклатурнымГруппам");
		
	ИначеЕсли Раздел = НеоплаченныеСчетаПокупателям Тогда
		
		СтруктураРасшифровки.Вставить("СсылкаНаОтчет",    "e1cib/app/Отчет.АнализНеоплаченныхСчетовПокупателям");
		СтруктураРасшифровки.Вставить("ФормаОтчета",      "Отчет.АнализНеоплаченныхСчетовПокупателям.Форма.ФормаОтчета");
		СтруктураРасшифровки.Вставить("КлючВарианта",     "НеоплаченныеСчетаПокупателям");
		СтруктураРасшифровки.Вставить("КлючеваяОперация", "МониторРасшифровкаРазделаНеоплаченныеСчетаПокупателей");
		
	ИначеЕсли Раздел = ЗадолженностьПокупателей Тогда
		
		СтруктураРасшифровки.Вставить("СсылкаНаОтчет",    "e1cib/app/Отчет.ЗадолженностьПокупателей");
		СтруктураРасшифровки.Вставить("ФормаОтчета",      "Отчет.ЗадолженностьПокупателей.Форма.ФормаОтчета");
		СтруктураРасшифровки.Вставить("КлючВарианта",     "ЗадолженностьПокупателей");
		СтруктураРасшифровки.Вставить("КлючеваяОперация", "МониторРасшифровкаРазделаЗадолженностьПокупателей");
		
	ИначеЕсли Раздел = ПросроченнаяЗадолженностьПокупателей Тогда
		
		СтруктураРасшифровки.Вставить("СсылкаНаОтчет",    "e1cib/app/Отчет.ЗадолженностьПокупателейПоСрокамДолга");
		СтруктураРасшифровки.Вставить("ФормаОтчета",      "Отчет.ЗадолженностьПокупателейПоСрокамДолга.Форма.ФормаОтчета");
		СтруктураРасшифровки.Вставить("КлючВарианта",     "ЗадолженностьПокупателейПоСрокамДолга");
		СтруктураРасшифровки.Вставить("КлючеваяОперация", "МониторРасшифровкаРазделаПросроченнаяЗадолженностьПокупателей");
		
	ИначеЕсли Раздел = НеоплаченныеСчетаПоставщиков Тогда
		
		СтруктураРасшифровки.Вставить("СсылкаНаОтчет",    "e1cib/app/Отчет.АнализНеоплаченныхСчетовПоставщиков");
		СтруктураРасшифровки.Вставить("ФормаОтчета",      "Отчет.АнализНеоплаченныхСчетовПоставщиков.Форма.ФормаОтчета");
		СтруктураРасшифровки.Вставить("КлючВарианта",     "НеоплаченныеСчетаПоставщиков");
		СтруктураРасшифровки.Вставить("КлючеваяОперация", "МониторРасшифровкаРазделаНеоплаченныеСчетаПоставщиков");
		
	ИначеЕсли Раздел = ЗадолженностьПоставщикам Тогда
		
		СтруктураРасшифровки.Вставить("СсылкаНаОтчет",    "e1cib/app/Отчет.ЗадолженностьПоставщикам");
		СтруктураРасшифровки.Вставить("ФормаОтчета",      "Отчет.ЗадолженностьПоставщикам.Форма.ФормаОтчета");
		СтруктураРасшифровки.Вставить("КлючВарианта",     "ЗадолженностьПоставщикам");
		СтруктураРасшифровки.Вставить("КлючеваяОперация", "МониторРасшифровкаРазделаЗадолженностьПоставщикам");
		
	ИначеЕсли Раздел = ПросроченнаяЗадолженностьПоставщикам Тогда
		
		СтруктураРасшифровки.Вставить("СсылкаНаОтчет",    "e1cib/app/Отчет.ЗадолженностьПоставщикамПоСрокамДолга");
		СтруктураРасшифровки.Вставить("ФормаОтчета",      "Отчет.ЗадолженностьПоставщикамПоСрокамДолга.Форма.ФормаОтчета");
		СтруктураРасшифровки.Вставить("КлючВарианта",     "ЗадолженностьПоставщикамПоСрокамДолга");
		СтруктураРасшифровки.Вставить("КлючеваяОперация", "МониторРасшифровкаРазделаПросроченнаяЗадолженностьПоставщикам");
		
	КонецЕсли;
	
	Возврат СтруктураРасшифровки;
	
КонецФункции

Функция НеиспользуемыеРазделы() Экспорт
	
	НеиспользуемыеРазделы = Новый Массив;
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДокументыРеализации") Тогда
		НеиспользуемыеРазделы.Добавить(ПродажиПоКонтрагентам);
		НеиспользуемыеРазделы.Добавить(ПродажиПоНоменклатурнымГруппам);
		НеиспользуемыеРазделы.Добавить(НеоплаченныеСчетаПокупателям);
		НеиспользуемыеРазделы.Добавить(ЗадолженностьПокупателей);
		НеиспользуемыеРазделы.Добавить(ПросроченнаяЗадолженностьПокупателей);
	КонецЕсли;
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьДокументыПоступления") Тогда
		НеиспользуемыеРазделы.Добавить(НеоплаченныеСчетаПоставщиков);
		НеиспользуемыеРазделы.Добавить(ЗадолженностьПоставщикам);
		НеиспользуемыеРазделы.Добавить(ПросроченнаяЗадолженностьПоставщикам);
	КонецЕсли;
	
	Возврат НеиспользуемыеРазделы;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеРазделаДоступныЧерезВнешнийПрограммныйИнтерфейс(Раздел)
	
	// Если у пользователя есть право доступа к сервису,
	// то у него есть право на все публикуемые разделы.
	
	Если ЕстьДоступКВнешнемуПрограммномуИнтерфейсуМонитораРуководителя() Тогда
		Возврат ПубликуемыеРазделыМонитораРуководителя().Найти(Раздел) <> Неопределено;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ЕстьДоступКВнешнемуПрограммномуИнтерфейсуМонитораРуководителя()
	
	Возврат ПравоДоступа(
		"Использование",
		Метаданные.HTTPСервисы.ExternalAPI.ШаблоныURL.ПоказателиМонитораРуководителя.Методы.Получить,
		ПользователиИнформационнойБазы.ТекущийПользователь());
	
КонецФункции

Функция СтандартныеГруппировкиДенежныхСредств()
	
	ГруппировкаОтчета = Новый Массив;
	ГруппировкаОтчета.Добавить(Новый Структура("Поле, Представление, Использование, ТипГруппировки", "ВидДенежныхСредств", "Вид денежных средств", Истина, 0));
	ГруппировкаОтчета.Добавить(Новый Структура("Поле, Представление, Использование, ТипГруппировки", "Размещение", "Размещение", Истина, 0));
	Возврат ГруппировкаОтчета;
	
КонецФункции

#КонецОбласти

#КонецЕсли