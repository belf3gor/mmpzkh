#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

Процедура ПрименитьПередУдалениемНеиспользуемыхПоказателей(Показатели) Экспорт
	
	Формулы = НайтиФормулы(Показатели);
	
	ОтключитьИспользованиеПоказателейДополнительногоАлгоритма(Показатели, Формулы, ДобавитьОтборПоказателя);
	
КонецПроцедуры

Процедура ПрименитьДоРасчетаПоказателей(Показатели, ПараметрыОтчета, ТаблицаРасшифровки) Экспорт
	
	Формулы = НайтиФормулы(Показатели);
	
	ЗаполнениеФормСтатистикиПереопределяемый.ВыручкаПредпринимателя(Показатели, Формулы);
	ДобавитьВычестьОтборПоказателя(Показатели, Формулы, ТаблицаРасшифровки);
	
	Для Каждого Формула Из Формулы Цикл
		
		ФормироватьТолькоЗаГод(Показатели, Формула);
		ДобавитьИтоговыйПоказательРозницаВсего(Показатели, Формула);
		ЗаполнениеФормСтатистикиПереопределяемый.ЧисленностьПерсонала(Показатели, Формула, ПараметрыОтчета);
		Группировка(Показатели, Формула);
		
	КонецЦикла;
	
	УдалитьИспользованныеЭлементыФормул(Формулы, Показатели);
	
КонецПроцедуры

Процедура ПрименитьПослеРасчетаПоказателей(Показатели, ТаблицаРасшифровки) Экспорт
	
	Формулы = НайтиФормулы(Показатели);
	
	Для Каждого Формула Из Формулы Цикл
		
		Вычесть(Формула, ТаблицаРасшифровки);
		
	КонецЦикла;
	
	УдалитьИспользованныеЭлементыФормул(Формулы, Показатели);
	
КонецПроцедуры

Функция КлючевыеПоля(Алгоритм) Экспорт
	
	// Алгоритм выполняется для группы показателей, 
	// содержащих одинаковые значения ключевых полей
	// См. также ЗаполнениеФормСтатистики.НовыйОписаниеПоказателей().
	
	Если Алгоритм = Вычесть Тогда
		Возврат "ИмяПоля, Аналитика, Организация"; 
	ИначеЕсли Алгоритм = ДобавитьИтоговыйПоказательРозницаВсего Тогда
		Возврат "ИмяПоля, ОбъектНаблюдения, Организация";
	ИначеЕсли Алгоритм = ФормироватьТолькоЗаГод Тогда
		Возврат "КонецПериода, ДополнительныйАлгоритм";
	ИначеЕсли Алгоритм = ДобавитьОтборПоказателя
		ИЛИ Алгоритм = ВычестьОтборПоказателя Тогда
		Возврат "ИмяПоля, ОбъектНаблюдения, ИсточникДанных, ОбщаяНастройка, Настройка, Используется";
	ИначеЕсли Алгоритм = Группировка Тогда
		Возврат "ДополнительныйАлгоритм";
	ИначеЕсли Алгоритм = ЧисленностьПерсонала Тогда
		Возврат "НачалоПериода, КонецПериода";
	ИначеЕсли Алгоритм = ВыручкаПредпринимателя Тогда
		Возврат "НачалоПериода, КонецПериода, Организация";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Алгоритмы

Процедура Вычесть(Формула, ТаблицаРасшифровки)
	
	Если Формула.ДополнительныйАлгоритм <> Вычесть Тогда
		Возврат;
	КонецЕсли;
			
	ЭлементыФормулы = Формула.Элементы;
	Результат = 0;
	ИндексРезультата = Неопределено; // Индекс строки, в которую будет помещен результат
	КоличествоЭлементов = ЭлементыФормулы.Количество();
	Для Индекс = 0 По КоличествоЭлементов - 1 Цикл
		
		ЭлементФормулы = ЭлементыФормулы[Индекс];
		ЭлементФормулы.Удалить = Истина; // Один оставим, какой именно - определим ниже. Постараемся, чтобы это был показатель без доп.алгоритма, обычно он лучше характеризует суть показателя
		
		Показатель     = ЭлементФормулы.Показатель;
		
		Если Показатель.Значение = Неопределено Тогда
			// Скорее всего, нет данных для заполнения показателя.
			// Так как показатель является слагаемым формулы, то с высокой вероятностью можно предположить, что в значении ожидается число, поэтому и приводим значение к числу (нулю).
			// Это важно, чтобы далее показатель попал в расшифровку ячейки.
			Показатель.Значение = 0;
		ИначеЕсли ТипЗнч(Показатель.Значение) <> Тип("Число") Тогда
			Продолжить;
		КонецЕсли;
		
		ЗнакОперации = "+";
		
		Если Показатель.ДополнительныйАлгоритм = Вычесть Тогда
			Результат = Результат - Показатель.Значение;
			ЗнакОперации = "-";
		Иначе
			Результат = Результат + Показатель.Значение;
		КонецЕсли;
		
		// Добавим информацию о вычитаемом показателе в расшифровку.
		ДополнительныеПараметрыРасшифровки = Новый Структура(ЗаполнениеФормСтатистики.СтруктураДополнительныхПараметровРасшифровки());
		ЗаполнитьЗначенияСвойств(ДополнительныеПараметрыРасшифровки, Показатель);
		
		ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
			ТаблицаРасшифровки,
			Показатель.ИмяПоля, 				//ИмяПоказателя 
			Показатель.НаименованиеПоказателя,	//НаименованиеПоказателя 
			ЗнакОперации, 						//ЗнакОперации 
			Показатель.Характеристика,			//НаименованиеСлагаемого 
			Показатель.Значение,				//Сумма 
			"",									//ИмяРаздела 
			ДополнительныеПараметрыРасшифровки	//ДополнительныеПараметры
			);
		
		Если ИндексРезультата = Неопределено 
			И Не ЗначениеЗаполнено(Показатель.ДополнительныйАлгоритм) Тогда
			ИндексРезультата = Индекс;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИндексРезультата = Неопределено Тогда
		ИндексРезультата = 0;
	КонецЕсли;
	
	ЭлементыФормулы[ИндексРезультата].Удалить = Ложь;
	ЭлементыФормулы[ИндексРезультата].Показатель.Значение = Результат;
	ЭлементыФормулы[ИндексРезультата].Показатель.РасшифровкаЗаполнена = Истина;
		
КонецПроцедуры

Процедура ДобавитьИтоговыйПоказательРозницаВсего(Показатели, Формула)
	
	Если Формула.ДополнительныйАлгоритм <> ДобавитьИтоговыйПоказательРозницаВсего Тогда
		Возврат;
	КонецЕсли;
	
	// Убедимся, что показатель не добавлен пользователем
	Для Каждого ЭлементФормулы Из Формула.Элементы Цикл
		Если ЭлементФормулы.Показатель.Аналитика = Справочники.КлассификаторПродукцииПоВидамДеятельности.РозницаВсего Тогда
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	// Добавим показатель
	НовыйПоказатель = Показатели.Добавить();
	ЗаполнитьЗначенияСвойств(НовыйПоказатель, Формула.Элементы[0].Показатель, , "ДополнительныйАлгоритм");
	НовыйПоказатель.Аналитика = Справочники.КлассификаторПродукцииПоВидамДеятельности.РозницаВсего;
	НовыйПоказатель.Настройка = ""; // Без отбора
	
КонецПроцедуры

Процедура ФормироватьТолькоЗаГод(Показатели, Формула)
	
	Если Формула.ДополнительныйАлгоритм <> ФормироватьТолькоЗаГод Тогда
		Возврат;
	КонецЕсли;
	
	Если КонецДня(Формула.КонецПериода) = КонецГода(Формула.КонецПериода) Тогда
		Возврат;
	КонецЕсли;
	
	// Удалим показатель
	Для Каждого ЭлементФормулы Из Формула.Элементы Цикл
		ЭлементФормулы.Удалить = Истина;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьВычестьОтборПоказателя(Показатели, Формулы, ТаблицаРасшифровки)
	
	Для Каждого Формула Из Формулы Цикл
		
		Если Формула.ДополнительныйАлгоритм <> ДобавитьОтборПоказателя
			И Формула.ДополнительныйАлгоритм <> ВычестьОтборПоказателя Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ПоказательФормулы Из Формула.Элементы Цикл
			ПоказательФормулы.Удалить = Истина;
		КонецЦикла;
		
		ОтборДляДобавленияНастройки = ЗаполнениеФормСтатистики.ПолучитьОтборКомпоновкиДанных(Формула.Настройка);
		
		Если ОтборДляДобавленияНастройки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПоказателиПоля = Показатели.НайтиСтроки(Новый Структура("ИмяПоля", Формула.ИмяПоля));
		
		Для Каждого Показатель Из ПоказателиПоля Цикл
			
			Если Показатель.ДополнительныйАлгоритм = ДобавитьОтборПоказателя
				ИЛИ Показатель.ДополнительныйАлгоритм = ВычестьОтборПоказателя Тогда
				Продолжить;
			КонецЕсли;
			
			Отбор = ЗаполнениеФормСтатистики.ПолучитьОтборКомпоновкиДанных(Показатель.НастройкаИзДополнительныхАлгоритмов);
			Если Отбор = Неопределено Тогда
				Отбор = Новый ОтборКомпоновкиДанных;
			КонецЕсли;
			Если Формула.ДополнительныйАлгоритм = ДобавитьОтборПоказателя Тогда
				КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(Отбор, ОтборДляДобавленияНастройки, Ложь);
			ИначеЕсли Формула.ДополнительныйАлгоритм = ВычестьОтборПоказателя Тогда
				ГруппаОтбора = Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ГруппаОтбора.Использование = Истина;
				ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе;
				КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(ГруппаОтбора, ОтборДляДобавленияНастройки, Ложь);
			КонецЕсли;
			
			Показатель.НастройкаИзДополнительныхАлгоритмов = ОбщегоНазначения.ЗначениеВСтрокуXML(Отбор);
						
		КонецЦикла;
		
		// Добавим информацию о дополнительном отборе в расшифровку.
		// Наименование показателя-источника отбора устанавливаем по наименованию объекта наблюдения.
		// Значение отбора записываем в дополнительные параметры.
		НаименованиеПоказателяОтбора = Формула.ОбъектНаблюдения.Наименование;
		ДополнительныеПараметры = Новый Структура("Отбор");
		Если Формула.ДополнительныйАлгоритм = ДобавитьОтборПоказателя Тогда
			ДополнительныеПараметры.Отбор = Формула.Настройка;
		ИначеЕсли Формула.ДополнительныйАлгоритм = ВычестьОтборПоказателя Тогда
			Отбор = Новый ОтборКомпоновкиДанных;
			ГруппаОтбора = Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаОтбора.Использование = Истина;
			ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаНе;
			КомпоновкаДанныхКлиентСервер.СкопироватьЭлементы(ГруппаОтбора, ОтборДляДобавленияНастройки, Ложь);
			ДополнительныеПараметры.Отбор = ОбщегоНазначения.ЗначениеВСтрокуXML(Отбор);
		КонецЕсли;
		
		ЗаполнениеРасшифровкаРегламентированнойОтчетности.ДобавитьСтрокуРасшифровки(
			ТаблицаРасшифровки,
			Формула.ИмяПоля, 					//ИмяПоказателя 
			НаименованиеПоказателяОтбора,		//НаименованиеПоказателя 
			?(Формула.ДополнительныйАлгоритм = ДобавитьОтборПоказателя, "ДобавитьОтбор", "ВычестьОтбор"), //ЗнакОперации 
			"",									//НаименованиеСлагаемого 
			0,									//Сумма 
			"",									//ИмяРаздела 
			ДополнительныеПараметры				//ДополнительныеПараметры
			);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтключитьИспользованиеПоказателейДополнительногоАлгоритма(Показатели, Формулы, ДополнительныйАлгоритм)
	
	Для Каждого Формула Из Формулы Цикл
		
		Если Формула.ДополнительныйАлгоритм <> ДополнительныйАлгоритм Тогда
			Продолжить;
		КонецЕсли;
		
		Если Формула.Используется Тогда
			Продолжить;
		КонецЕсли;
		
		ПоказателиПоля = Показатели.НайтиСтроки(Новый Структура("ИмяПоля", Формула.ИмяПоля));
		Для Каждого Показатель Из ПоказателиПоля Цикл
			Если Показатель.ДополнительныйАлгоритм = ДополнительныйАлгоритм Тогда
				Продолжить;
			КонецЕсли;
			
			// Отключаем все показатели, на которые действовал отключенный дополнительный алгоритм.
			Показатель.Используется = Ложь;
			
		КонецЦикла;
		
	КонецЦикла
	
КонецПроцедуры

Процедура Группировка(Показатели, Формула)
	
	Если Формула.ДополнительныйАлгоритм <> Группировка Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементФормулы Из Формула.Элементы Цикл
		ЭлементФормулы.Показатель.Детализировать = Истина;
		ЭлементФормулы.Показатель.Группировка    = Истина;
	КонецЦикла;
	
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// Прочее

Функция НовыйЭлементыФормулы()
	
	ЭлементыФормулы = Новый ТаблицаЗначений;
	ЭлементыФормулы.Колонки.Добавить("Показатель"); // Ссылка на строку таблицы значений Показатели
	ЭлементыФормулы.Колонки.Добавить("Удалить", Новый ОписаниеТипов("Булево")); // См. УдалитьИспользованныеПоказатели()
	
	Возврат ЭлементыФормулы;
	
КонецФункции

Функция НайтиФормулы(Показатели)
	
	// В каждой формуле участвует набор полей, указывающих на одну и ту же ячейку - элементов формул.
	ИндексыОтбораЭлементовФормул = Новый Соответствие; // Ключ - Алгоритм, Значение - Индекс;  Индексы удалим в конце процедуры.
	
	// Сначала определим состав формул (выражений),
	// а потом их элементы.
	Формулы = Показатели.СкопироватьКолонки();
	Для Каждого Показатель Из Показатели Цикл
		
		Алгоритм = Показатель.ДополнительныйАлгоритм;
		
		Если Не ЗначениеЗаполнено(Алгоритм) Тогда
			Продолжить;
		КонецЕсли;
		
		КлючевыеПоля = КлючевыеПоля(Алгоритм);
		Если Не ЗначениеЗаполнено(КлючевыеПоля) Тогда
			ЗаполнитьЗначенияСвойств(Формулы.Добавить(), Показатель);
		Иначе
			
			ЗаполнитьЗначенияСвойств(Формулы.Добавить(), Показатель, КлючевыеПоля + ", ДополнительныйАлгоритм");
			
			ИндексОтбораЭлементовФормул = ИндексыОтбораЭлементовФормул[Алгоритм];
			Если ИндексОтбораЭлементовФормул = Неопределено Тогда
				Индекс = Показатели.Индексы.Добавить(КлючевыеПоля);
				ИндексыОтбораЭлементовФормул.Вставить(Алгоритм, Индекс);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	КолонкиГруппировок = Новый Массив; // Все колонки, за исключением тех, по которым в принципе группировать нельзя.
	Для Каждого Колонка Из Показатели.Колонки Цикл
		
		ЕстьЗапрещенныеТипы = Ложь;
		Для Каждого Тип Из Колонка.ТипЗначения.Типы() Цикл
			Если Тип = Тип("Число")
				Или Тип = Тип("Строка")
				Или Тип = Тип("Дата")
				Или Тип = Тип("Булево")
				Или ОбщегоНазначения.ЭтоСсылка(Тип) Тогда
				Продолжить;
			КонецЕсли;
			ЕстьЗапрещенныеТипы = Истина;
		КонецЦикла;
		
		Если ЕстьЗапрещенныеТипы Тогда
			Продолжить;
		КонецЕсли;
		
		КолонкиГруппировок.Добавить(Колонка.Имя);
		
	КонецЦикла;
	КолонкиГруппировок = СтрСоединить(КолонкиГруппировок,",");
	
	Формулы.Свернуть(КолонкиГруппировок); // Для каждой формулы заполнен свой набор полей.
	
	// ... определяем состав элементов формул.
	Формулы.Колонки.Добавить("Элементы", Новый ОписаниеТипов("ТаблицаЗначений")); // См. НовыйЭлементыФормулы.
	
	Для Каждого Формула Из Формулы Цикл
		
		Алгоритм = Формула.ДополнительныйАлгоритм;
		КлючевыеПоля = КлючевыеПоля(Алгоритм);
		
		ОтборЭлементовФормул = Новый Структура(КлючевыеПоля);
		
		ЗаполнитьЗначенияСвойств(ОтборЭлементовФормул, Формула);
		Формула.Элементы = НовыйЭлементыФормулы();
		Для Каждого Показатель Из Показатели.НайтиСтроки(ОтборЭлементовФормул) Цикл
			НоваяСтрока = Формула.Элементы.Добавить();
			НоваяСтрока.Показатель = Показатель;
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого Индекс Из ИндексыОтбораЭлементовФормул Цикл
		Показатели.Индексы.Удалить(Индекс.Значение);
	КонецЦикла;
	
	Возврат Формулы;
	
КонецФункции

Процедура УдалитьИспользованныеЭлементыФормул(Формулы, Показатели)
	
	// Для расчета значения в поле может использоваться несколько показателей.
	// После того, как они поучаствовали в расчете, часть из них может оказаться лишними.
	// Например, если показатели суммируются, то для каждого поля останется одна строка с суммой.
	// Один показатель может входить в разные формулы, перед удалением нужно проверять
	// не был ли показатель уже удален в предыдущих формулах.
	Для Каждого Формула Из Формулы Цикл
		Для Каждого ЭлементФормулы Из Формула.Элементы Цикл
			Если ЭлементФормулы.Удалить Тогда
				Показатель = ЭлементФормулы.Показатель;
				
				// Перед удалением проверим существует ли показатель
				ИндексПоказателя = Показатели.Индекс(Показатель);
				// Если не удается получить индекс показателя, то и удалять нечего
				Если ИндексПоказателя <> -1 Тогда
					
					Показатели.Удалить(ИндексПоказателя);
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецЕсли