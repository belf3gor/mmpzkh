#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Функция УсловияПоВозрастаниюСложности() Экспорт
	
	ПорядокУсловий = Новый Массив; 
	ПорядокУсловий.Добавить(ФизическиеЛица);
	ПорядокУсловий.Добавить(ЮридическиеЛица);
	ПорядокУсловий.Добавить(ОбщаяСистемаНалогообложения);
	ПорядокУсловий.Добавить(УпрощеннаяСистемаНалогообложения);
	ПорядокУсловий.Добавить(ПлательщикиНДС);
	ПорядокУсловий.Добавить(ПлательщикиЕНВД);
	
	// Все остальные считаем сложными
	
	Возврат ПорядокУсловий;
	
КонецФункции

Функция ПроверитьУсловия(Знач УсловияДляПроверки, Период, Периодичность, Организация, ВыполненныеУсловия = Неопределено) Экспорт
	
	ВыполненныеУсловия = Новый Массив;
	
	Если УсловияДляПроверки.Количество() = 0 Тогда
		Возврат Неопределено; // Все условия выполнены
	КонецЕсли;
	
	Для Каждого Условие Из УсловияДляПроверки Цикл
		
		Если УсловиеВыполняется(Условие, Период, Периодичность, Организация) Тогда
			ВыполненныеУсловия.Добавить(Условие);
		Иначе
			Возврат Условие;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено; // Все условия выполнены
	
КонецФункции

Функция УсловиеВыполняется(Условие, Период, Периодичность, Организация) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// ЮридическиеЛица, ФизическиеЛица
	Если Условие = ФизическиеЛица Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо") = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	ИначеЕсли Условие = ЮридическиеЛица Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо") <> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	КонецЕсли;
	
	// ЕстьСотрудники
	Если Условие = ЕстьСотрудники Тогда
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо") <> Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			Возврат Истина;
		Иначе
			Возврат УчетЗарплаты.ИПИспользуетТрудНаемныхРаботников(Организация);
		КонецЕсли;
	КонецЕсли;
	
	Если Условие = ВыплачиваетсяЗарплата Тогда
		Возврат УчетЗарплаты.ВыплачиваетсяЗарплата(Организация, Период);
	КонецЕсли;
	
	// СистемаНалогообложения
	Если Условие = ОбщаяСистемаНалогообложения Тогда
		Возврат УчетнаяПолитика.СистемаНалогообложения(Организация, Период) = Перечисления.СистемыНалогообложения.Общая
			Или УчетнаяПолитика.СистемаНалогообложения(Организация, ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период)) = Перечисления.СистемыНалогообложения.Общая;
	ИначеЕсли Условие = УпрощеннаяСистемаНалогообложения Тогда
		Возврат УчетнаяПолитика.СистемаНалогообложения(Организация, Период) = Перечисления.СистемыНалогообложения.Упрощенная
			Или УчетнаяПолитика.СистемаНалогообложения(Организация, ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период)) = Перечисления.СистемыНалогообложения.Упрощенная;
	ИначеЕсли Условие = НалогНаПрофессиональныйДоход Тогда
		Возврат УчетнаяПолитика.СистемаНалогообложения(Организация, Период) = Перечисления.СистемыНалогообложения.НалогНаПрофессиональныйДоход
			Или УчетнаяПолитика.СистемаНалогообложения(Организация, ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период)) = Перечисления.СистемыНалогообложения.НалогНаПрофессиональныйДоход;
	КонецЕсли;
	
	// Отдельные виды налогов
	Если Условие = ПлательщикиЕНВД Тогда
		Возврат УчетнаяПолитика.ПлательщикЕНВД(Организация, Период) 
		Или УчетнаяПолитика.ПлательщикЕНВД(Организация, ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период));
	ИначеЕсли Условие = ПлательщикиНДС Тогда
		Возврат УчетнаяПолитика.ПлательщикНДС(Организация, Период)
		Или УчетнаяПолитика.ПлательщикНДС(Организация, ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период));
	КонецЕсли;
	
	// Порядок уплаты авансов по налогу на прибыль
	Если Условие = НалогНаПрибыльАвансыЕжеквартально Тогда
		Возврат УчетнаяПолитика.ПорядокУплатыАвансов(Организация, Период) = Перечисления.ПорядокУплатыАвансовПоНалогуНаПрибыль.Ежеквартально;
	ИначеЕсли Условие = НалогНаПрибыльАвансыЕжемесячно Тогда
		Возврат УчетнаяПолитика.ПорядокУплатыАвансов(Организация, Период) = Перечисления.ПорядокУплатыАвансовПоНалогуНаПрибыль.Ежемесячно;
	ИначеЕсли Условие = НалогНаПрибыльАвансыПоФактическойПрибыли Тогда
		Возврат УчетнаяПолитика.ПорядокУплатыАвансов(Организация, Период) = Перечисления.ПорядокУплатыАвансовПоНалогуНаПрибыль.ПоФактическойПрибыли;
	КонецЕсли;
	
	// Вариант бухгалтерской отчетности
	Если Условие = БухгалтерскаяОтчетностьМалыеПредприятия Тогда
		Возврат УчетнаяПолитика.ВариантБухгалтерскойОтчетности(Организация, Период) = Перечисления.ВариантыБухгалтерскойОтчетности.ДляМалыхПредприятий;
	ИначеЕсли Условие = БухгалтерскаяОтчетностьНекоммерческиеОрганизации Тогда
		Возврат УчетнаяПолитика.ВариантБухгалтерскойОтчетности(Организация, Период) = Перечисления.ВариантыБухгалтерскойОтчетности.ДляНекоммерческихОрганизаций;
	ИначеЕсли Условие = БухгалтерскаяОтчетностьОбщаяФорма Тогда
		Возврат УчетнаяПолитика.ВариантБухгалтерскойОтчетности(Организация, Период) = Перечисления.ВариантыБухгалтерскойОтчетности.ОбщиеПравила;
	КонецЕсли;
	
	// Виды имущества
	Если Условие = ЕстьИмущество Тогда
		Возврат ЕстьИмущество(Период, Периодичность, Организация);
	ИначеЕсли Условие = ЕстьТранспортныеСредства Тогда
		Возврат ЕстьТранспортныеСредства(Период, Периодичность, Организация);
	ИначеЕсли Условие = ЕстьЗемельныеУчастки Тогда
		Возврат ЕстьЗемельныеУчастки(Период, Периодичность, Организация);
	КонецЕсли;
	
	// Акцизы
	Если Условие = АкцизыОбщаяФорма Тогда
		ВидыТоваровСпециальныеФормы = Новый Массив;
		// см. АкцизыФормаАлкоголь
		ВидыТоваровСпециальныеФормы.Добавить(Перечисления.ВидыПодакцизныхТоваров.Спирт);
		ВидыТоваровСпециальныеФормы.Добавить(Перечисления.ВидыПодакцизныхТоваров.СпиртосодержащаяПродукция);
		ВидыТоваровСпециальныеФормы.Добавить(Перечисления.ВидыПодакцизныхТоваров.АлкогольнаяПродукция);
		// см. АкцизыФормаТабак
		ВидыТоваровСпециальныеФормы.Добавить(Перечисления.ВидыПодакцизныхТоваров.Табак);
		Возврат ЕстьАкцизыИныеТовары(Организация, ВидыТоваровСпециальныеФормы);
	ИначеЕсли Условие = АкцизыФормаАлкоголь Тогда
		ВидыТоваровАлкоголь = Новый Массив;
		ВидыТоваровАлкоголь.Добавить(Перечисления.ВидыПодакцизныхТоваров.Спирт);
		ВидыТоваровАлкоголь.Добавить(Перечисления.ВидыПодакцизныхТоваров.СпиртосодержащаяПродукция);
		ВидыТоваровАлкоголь.Добавить(Перечисления.ВидыПодакцизныхТоваров.АлкогольнаяПродукция);
		Возврат ЕстьАкцизыПоВидуТоваров(Организация, ВидыТоваровАлкоголь);
	ИначеЕсли Условие = АкцизыФормаТабак Тогда
		Возврат ЕстьАкцизыПоВидуТоваров(Организация, Перечисления.ВидыПодакцизныхТоваров.Табак);
	ИначеЕсли Условие = АкцизыОбщийСрок Тогда
		Возврат ЕстьАкцизыОбщийСрок(Организация);
	ИначеЕсли Условие = АкцизыЛьготныйСрок Тогда
		Возврат ЕстьАкцизыЛьготныйСрок(Организация);
	ИначеЕсли Условие = АвансыПоАкцизам Тогда
		Возврат ЕстьАвансыПоАкцизам(Организация);
	КонецЕсли;
	
	// Фиксированные страховые взносы
	Если Условие = ПлательщикиФиксированныхСтраховыхВзносов Тогда
		Возврат УчетнаяПолитика.ПлательщикФиксированныхВзносовЗаПериод(Организация, НачалоГода(Период), КонецГода(Период));
	КонецЕсли;
	
	Если Условие = ФиксированныеСтраховыеВзносы_Квартал Тогда
		ПериодичностьУплатыФиксированныхСтраховыхВзносов = 
			УчетСтраховыхВзносовИП.ПериодичностьУплатыФиксированныхСтраховыхВзносов(Организация, Период);
		Возврат (ПериодичностьУплатыФиксированныхСтраховыхВзносов = Перечисления.Периодичность.Квартал);
	ИначеЕсли Условие = ФиксированныеСтраховыеВзносы_Год Тогда
		ПериодичностьУплатыФиксированныхСтраховыхВзносов = 
			УчетСтраховыхВзносовИП.ПериодичностьУплатыФиксированныхСтраховыхВзносов(Организация, Период);
		Возврат (ПериодичностьУплатыФиксированныхСтраховыхВзносов = Перечисления.Периодичность.Год);
	КонецЕсли;
	
	// Представление отчетов в электронном виде
	Если Условие = ОтчетностьПФРвЭлектронномВиде Тогда
		Возврат ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(
			Организация, 
			Перечисления.ТипыКонтролирующихОрганов.ПФР);
	ИначеЕсли Условие = ОтчетностьПФРнаБумажномНосителе Тогда
		Возврат Не ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(
			Организация, 
			Перечисления.ТипыКонтролирующихОрганов.ПФР);
	ИначеЕсли Условие = ОтчетностьФССвЭлектронномВиде Тогда
		Возврат ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(
			Организация, 
			Перечисления.ТипыКонтролирующихОрганов.ФСС);
	ИначеЕсли Условие = ОтчетностьФССнаБумажномНосителе Тогда
		Возврат Не ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(
			Организация, 
			Перечисления.ТипыКонтролирующихОрганов.ФСС);
	КонецЕсли;
	
	// Косвенные налоги при импорте товаров из таможенного союза
	Если Условие = ИмпортТоваровТаможенныйСоюз Тогда
		Возврат ЕстьИмпортТоваровИзТаможенногоСоюза(Период, Периодичность, Организация);
	КонецЕсли; 
	
	Если Условие = ПлательщикиТорговогоСбора Тогда
		Возврат УчетнаяПолитика.ПлательщикТорговогоСбора(Организация, Период)
			ИЛИ ЕстьОбъектыТорговогоСбора(Период, Периодичность, Организация);
	КонецЕсли;
	
	Если Условие = СверкаДанныхНДС Тогда
		
		НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, Период);
		КонецПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период);
		
		Возврат Обработки.СверкаДанныхУчетаНДС.ВозможнаСверкаНДСЗаПериод(НачалоПериода, КонецПериода, Организация);
		
	КонецЕсли;
	
	// Условия по отчетности/уплате по НДС для неплательщиков
	Если Условие = ЖурналСчетовФактур Тогда
		
		Если УчетнаяПолитика.СистемаНалогообложения(Организация, Период) = Перечисления.СистемыНалогообложения.Упрощенная Тогда
			НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, Период);
			КонецПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период);
			
			Возврат Обработки.СверкаДанныхУчетаНДС.ВозможнаСверкаНДСЗаПериод(НачалоПериода, КонецПериода, Организация);
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Условие = ВыставлениеСчетовФактурНеплательщикамиНДС Тогда
		
		Если УчетнаяПолитика.СистемаНалогообложения(Организация, Период) = Перечисления.СистемыНалогообложения.Упрощенная Тогда
			Возврат ЕстьЗаписиКнигиПродаж(Период, Периодичность, Организация);
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	// Наличие отчетности при исполнении обязанности налогового агента по НДФЛ.
	Если Условие = ОтчетностьНалоговогоАгентаПоНДФЛ Тогда
		
		// В качестве анализируемого периода используем текущий и предыдущий налоговый период, 
		// чтобы если в сейчас начало января и за текущий год еще ничего не начислялось и не оплачивалось,
		// то были учтены данные прошлого года.
		НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, Период);
		НачалоПредыдущегоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, НачалоПериода - 1);
		КонецПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период);
		
		Возврат ЕстьОстаткиИОборотыПоСчету(НачалоПредыдущегоПериода, КонецПериода, Организация, ПланыСчетов.Хозрасчетный.НДФЛ);
		
	КонецЕсли;
	
	Если Условие = ЕстьНалогКУплатеПоДекларации3НДФЛ Тогда
		Возврат ЕстьНалогКУплатеПоДекларации3НДФЛ(Организация, Период);
	КонецЕсли;
	
	// Регистрация новой организации.
	Если Условие = РегистрацияНовойОрганизации Тогда
		Возврат ОрганизацияСозданаВТекущемМесяце(Организация, Период);
	КонецЕсли;
	
	// Остальные условия не умеем определять
	Возврат Ложь;
	
КонецФункции

Функция НепериодическиеУсловия() Экспорт
	
	Условия = Новый Соответствие;
	
	Условия.Вставить(АкцизыОбщаяФорма,   Истина);
	Условия.Вставить(АкцизыФормаТабак,   Истина);
	Условия.Вставить(АкцизыОбщийСрок,    Истина);
	Условия.Вставить(АкцизыЛьготныйСрок, Истина);
	Условия.Вставить(АвансыПоАкцизам,    Истина);
	Условия.Вставить(ЮридическиеЛица,    Истина);
	Условия.Вставить(ФизическиеЛица,     Истина);
	
	Возврат Условия;
	
КонецФункции

Функция ЕстьИмущество(Период, Периодичность, Организация)
	
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, Период);
	КонецПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	Запрос.УстановитьПараметр("Организация",   Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтавкиНалога.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.СрезПоследних(&НачалоПериода, Организация = &Организация) КАК СтавкиНалога
	|ГДЕ
	|	СтавкиНалога.НалоговаяБаза = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.КадастроваяСтоимость)
	|	И СтавкиНалога.ДатаРегистрацииПраваСобственности <= &КонецПериода
	|	И (СтавкиНалога.ДатаПрекращенияПраваСобственности >= &НачалоПериода
	|			ИЛИ СтавкиНалога.ДатаПрекращенияПраваСобственности = ДАТАВРЕМЯ(1, 1, 1))
	|	И СтавкиНалога.ПорядокНалогообложения <> ЗНАЧЕНИЕ(Перечисление.ПорядокНалогообложенияИмущества.НеПодлежитНалогообложению)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтавкиНалога.Организация
	|ИЗ
	|	РегистрСведений.СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам КАК СтавкиНалога
	|ГДЕ
	|	СтавкиНалога.Организация = &Организация
	|	И СтавкиНалога.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И СтавкиНалога.ДатаРегистрацииПраваСобственности <= &КонецПериода
	|	И (СтавкиНалога.ДатаПрекращенияПраваСобственности >= &НачалоПериода
	|			ИЛИ СтавкиНалога.ДатаПрекращенияПраваСобственности = ДАТАВРЕМЯ(1, 1, 1))
	|	И СтавкиНалога.НалоговаяБаза = ЗНАЧЕНИЕ(Перечисление.НалоговаяБазаПоНалогуНаИмущество.КадастроваяСтоимость)
	|	И СтавкиНалога.ПорядокНалогообложения <> ЗНАЧЕНИЕ(Перечисление.ПорядокНалогообложенияИмущества.НеПодлежитНалогообложению)";
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		Возврат Истина;
	ИначеЕсли Не УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, НачалоПериода) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	Запрос.УстановитьПараметр("Организация",   Организация);
	
	АмортизационныеГруппы = Новый Массив;
	АмортизационныеГруппы.Добавить(Перечисления.АмортизационныеГруппы.ПерваяГруппа);
	АмортизационныеГруппы.Добавить(Перечисления.АмортизационныеГруппы.ВтораяГруппа);
	Запрос.УстановитьПараметр("АмортизационныеГруппы", АмортизационныеГруппы);
	
	ГруппыОС = Новый Массив;
	ГруппыОС.Добавить(Перечисления.ГруппыОС.ЗемельныеУчастки);
	ГруппыОС.Добавить(Перечисления.ГруппыОС.ОбъектыПриродопользования);
	Запрос.УстановитьПараметр("ГруппыОС", ГруппыОС);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеСредства.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ СписокОС
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|ГДЕ
	|	НЕ ОсновныеСредства.АмортизационнаяГруппа В (&АмортизационныеГруппы)
	|	И НЕ ОсновныеСредства.ГруппаОС В (&ГруппыОС)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СостоянияОСОрганизаций.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(
	|			&НачалоПериода,
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						СписокОС.Ссылка
	|					ИЗ
	|						СписокОС)) КАК СостоянияОСОрганизаций
	|ГДЕ
	|	СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СостоянияОСОрганизаций.Организация
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
	|ГДЕ
	|	СостоянияОСОрганизаций.Организация = &Организация
	|	И СостоянияОСОрганизаций.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И СостоянияОСОрганизаций.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)
	|	И СостоянияОСОрганизаций.ОсновноеСредство В
	|			(ВЫБРАТЬ
	|				СписокОС.Ссылка
	|			ИЗ
	|				СписокОС)";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЕстьИмуществоЕСГС() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.ОсновноеСредство КАК ОсновноеСредство
	|ИЗ
	|	РегистрСведений.СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам КАК СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам
	|ГДЕ
	|	СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.КодВидаИмущества = ""01""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.ОсновноеСредство
	|ИЗ
	|	РегистрСведений.СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам КАК СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам
	|ГДЕ
	|	СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.КБК = ""18210602020021000110""";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЕстьТранспортныеСредства(Период = Неопределено, Периодичность = Неопределено, Организация = Неопределено) Экспорт
	
	Если Организация = Неопределено Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РегистрацияТранспортныхСредств.ОсновноеСредство
		|ИЗ
		|	РегистрСведений.РегистрацияТранспортныхСредств КАК РегистрацияТранспортныхСредств
		|ГДЕ
		|	РегистрацияТранспортныхСредств.ВключатьВНалоговуюБазу";
		
		Возврат Не Запрос.Выполнить().Пустой();
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачалоПериода", ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, Период));
		Запрос.УстановитьПараметр("КонецПериода",  ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период));
		Запрос.УстановитьПараметр("Организация",   Организация);
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РегистрацияТранспортныхСредств.Организация
		|ИЗ
		|	РегистрСведений.РегистрацияТранспортныхСредств.СрезПоследних(&НачалоПериода, Организация = &Организация) КАК РегистрацияТранспортныхСредств
		|ГДЕ
		|	РегистрацияТранспортныхСредств.ВключатьВНалоговуюБазу
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	РегистрацияТранспортныхСредств.Организация
		|ИЗ
		|	РегистрСведений.РегистрацияТранспортныхСредств КАК РегистрацияТранспортныхСредств
		|ГДЕ
		|	РегистрацияТранспортныхСредств.Организация = &Организация
		|	И РегистрацияТранспортныхСредств.Период МЕЖДУ &НачалоПериода И &КонецПериода
		|	И РегистрацияТранспортныхСредств.ВключатьВНалоговуюБазу";
		
		Возврат Не Запрос.Выполнить().Пустой();
		
	КонецЕсли;
	
КонецФункции

Функция ЕстьЗемельныеУчастки(Период, Периодичность, Организация)
	
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, Период);
	КонецПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", Дата(Год(НачалоПериода), Месяц(НачалоПериода), 15));
	Запрос.УстановитьПараметр("КонецПериода", Дата(Год(КонецПериода), Месяц(КонецПериода), 15));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрацияЗемельныхУчастков.Организация
	|ИЗ
	|	РегистрСведений.РегистрацияЗемельныхУчастков.СрезПоследних(&НачалоПериода, Организация = &Организация) КАК РегистрацияЗемельныхУчастков
	|ГДЕ
	|	РегистрацияЗемельныхУчастков.ВключатьВНалоговуюБазу
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрацияЗемельныхУчастков.Организация
	|ИЗ
	|	РегистрСведений.РегистрацияЗемельныхУчастков КАК РегистрацияЗемельныхУчастков
	|ГДЕ
	|	РегистрацияЗемельныхУчастков.Организация = &Организация
	|	И РегистрацияЗемельныхУчастков.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И РегистрацияЗемельныхУчастков.ВключатьВНалоговуюБазу";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция КатегорииПодчиненияЗемельныхУчастковПоВидамНалогов() Экспорт
	
	КатегорииПодчинения = Новый Массив;
	КатегорииПодчинения.Добавить("103"); // ЗемельныйНалог_ГородФедеральногоЗначения
	КатегорииПодчинения.Добавить("204"); // ЗемельныйНалог_ГородскойОкруг
	КатегорииПодчинения.Добавить("211"); // ЗемельныйНалог_ГородскойОкругСВнутригородскимДелением
	КатегорииПодчинения.Добавить("212"); // ЗемельныйНалог_ВнутригородскойОкруг
	КатегорииПодчинения.Добавить("305"); // ЗемельныйНалог_МежселеннаяТерритория
	КатегорииПодчинения.Добавить("310"); // ЗемельныйНалог_СельскоеПоселение
	КатегорииПодчинения.Добавить("313"); // ЗемельныйНалог_ГородскоеПоселение
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КатегорииПодчинения", КатегорииПодчинения);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПОДСТРОКА(РегистрацияЗемельныхУчастков.КБК, 11, 3) КАК КатегорияПодчинения
	|ИЗ
	|	РегистрСведений.РегистрацияЗемельныхУчастков КАК РегистрацияЗемельныхУчастков
	|ГДЕ
	|	ПОДСТРОКА(РегистрацияЗемельныхУчастков.КБК, 11, 3) В (&КатегорииПодчинения)
	|	И ПОДСТРОКА(РегистрацияЗемельныхУчастков.КБК, 18, 3) = ""110""
	|	И РегистрацияЗемельныхУчастков.ВключатьВНалоговуюБазу";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("КатегорияПодчинения");
	
КонецФункции

Функция КатегорииПодчиненияПатентовПоВидамНалогов() Экспорт
	
	КатегорииПодчинения = Новый Массив;
	КатегорииПодчинения.Добавить("010"); // ПСН_ГородскойОкруг
	КатегорииПодчинения.Добавить("020"); // ПСН_МуниципальныйРайон
	КатегорииПодчинения.Добавить("030"); // ПСН_ГородФедеральногоЗначения
	КатегорииПодчинения.Добавить("040"); // ПСН_ГородскойОкругСВнутригородскимДелением
	КатегорииПодчинения.Добавить("050"); // ПСН_ВнутригородскойРайон
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КатегорииПодчинения", КатегорииПодчинения);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПОДСТРОКА(СправочникПатенты.КБК, 9, 3) КАК КатегорияПодчинения
	|ИЗ
	|	Справочник.Патенты КАК СправочникПатенты
	|ГДЕ
	|	ПОДСТРОКА(СправочникПатенты.КБК, 9, 3) В (&КатегорииПодчинения)
	|	И ПОДСТРОКА(СправочникПатенты.КБК, 18, 3) = ""110""
	|	И НЕ СправочникПатенты.ПометкаУдаления";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("КатегорияПодчинения");
	
КонецФункции

Функция ЕстьАкцизыИныеТовары(Организация, ИсключаемыеТовары)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",       Организация);
	Запрос.УстановитьПараметр("ИсключаемыеТовары", ИсключаемыеТовары);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Результат
	|ИЗ
	|	РегистрСведений.ПорядокУплатыАкцизов КАК ПорядокУплатыАкцизов
	|ГДЕ
	|	ПорядокУплатыАкцизов.Организация = &Организация
	|	И НЕ ПорядокУплатыАкцизов.ВидТовара В (&ИсключаемыеТовары)";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЕстьАкцизыПоВидуТоваров(Организация, ВидыТоваров)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидыТоваров",  ВидыТоваров);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Результат
	|ИЗ
	|	РегистрСведений.ПорядокУплатыАкцизов КАК ПорядокУплатыАкцизов
	|ГДЕ
	|	ПорядокУплатыАкцизов.Организация = &Организация
	|	И ПорядокУплатыАкцизов.ВидТовара В (&ВидыТоваров)";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЕстьАкцизыОбщийСрок(Организация)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Результат
	|ИЗ
	|	РегистрСведений.ПорядокУплатыАкцизов КАК ПорядокУплатыАкцизов
	|ГДЕ
	|	ПорядокУплатыАкцизов.Организация = &Организация
	|	И НЕ ПорядокУплатыАкцизов.ЛьготныйСрокУплаты";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЕстьАкцизыЛьготныйСрок(Организация)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Результат
	|ИЗ
	|	РегистрСведений.ПорядокУплатыАкцизов КАК ПорядокУплатыАкцизов
	|ГДЕ
	|	ПорядокУплатыАкцизов.Организация = &Организация
	|	И ПорядокУплатыАкцизов.ЛьготныйСрокУплаты";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЕстьАвансыПоАкцизам(Организация)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Результат
	|ИЗ
	|	РегистрСведений.ПорядокУплатыАкцизов КАК ПорядокУплатыАкцизов
	|ГДЕ
	|	ПорядокУплатыАкцизов.Организация = &Организация
	|	И ПорядокУплатыАкцизов.АвансыПриЗакупкеСырья";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЕстьИмпортТоваровИзТаможенногоСоюза(Период = Неопределено, Периодичность = Неопределено, Организация = Неопределено) Экспорт
	
	Если НЕ ПолучитьФункциональнуюОпцию("ВедетсяУчетИмпортныхТоваров") Тогда
		Возврат Ложь;
	КонецЕсли; 

	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИмпортТоваровТаможенныйСоюз.Организация
	|ИЗ
	|	РегистрСведений.ИмпортТоваровТаможенныйСоюз КАК ИмпортТоваровТаможенныйСоюз";
	
	МассивУсловий = Новый Массив;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		МассивУсловий.Добавить("ИмпортТоваровТаможенныйСоюз.Организация = &Организация");
		Запрос.УстановитьПараметр("Организация", Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Период) И ЗначениеЗаполнено(Периодичность) Тогда
		МассивУсловий.Добавить("ИмпортТоваровТаможенныйСоюз.ДатаПериода = &Период");
		Запрос.УстановитьПараметр("Период", ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, Период));
	КонецЕсли;
	
	Если МассивУсловий.Количество() > 0 Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|ГДЕ
			| "+ СтрСоединить(МассивУсловий, " И ");
	КонецЕсли;
		
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Не Запрос.Выполнить().Пустой();

КонецФункции 

Функция ЕстьЗаписиКнигиПродаж(Период = Неопределено, Периодичность = Неопределено, Организация = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НДСЗаписиКнигиПродаж.Организация КАК Организация
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж";
	
	МассивУсловий = Новый Массив;
	МассивУсловий.Добавить("НДСЗаписиКнигиПродаж.НДС <> 0");
	
	Если ЗначениеЗаполнено(Организация) Тогда
		МассивУсловий.Добавить("НДСЗаписиКнигиПродаж.Организация = &Организация");
		Запрос.УстановитьПараметр("Организация", Организация);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Период) И ЗначениеЗаполнено(Периодичность) Тогда
		МассивУсловий.Добавить("НДСЗаписиКнигиПродаж.Период МЕЖДУ &НачалоПериода И  &КонецПериода");
		Запрос.УстановитьПараметр("НачалоПериода", ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, Период));
		Запрос.УстановитьПараметр("КонецПериода", ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период));
	КонецЕсли;
	
	Если МассивУсловий.Количество() > 0 Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|ГДЕ
			| "+ СтрСоединить(МассивУсловий, " И ");
	КонецЕсли;
		
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Не Запрос.Выполнить().Пустой();

КонецФункции 

Функция ЕстьОбъектыТорговогоСбора(Период = Неопределено, Периодичность = Неопределено, Организация = Неопределено) Экспорт

	Если Период = Неопределено ИЛИ Организация = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ УчетнаяПолитика.ПлательщикТорговогоСбора(Организация, Период) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидОперацииСнятиеСУчета", Перечисления.ВидыОперацийТорговыеТочки.СнятиеСУчета);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПараметрыТорговыхТочекСрезПоследних.ТорговаяТочка
	|ИЗ
	|	РегистрСведений.ПараметрыТорговыхТочек.СрезПоследних(&КонецПериода, &Организация) КАК ПараметрыТорговыхТочекСрезПоследних
	|ГДЕ
	|	(&Условия)";
	
	МассивУсловий = Новый Массив;
	МассивУсловий.Добавить("ПараметрыТорговыхТочекСрезПоследних.ВидОперации <> &ВидОперацииСнятиеСУчета");
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Организация", "Организация = &Организация");
		Запрос.УстановитьПараметр("Организация", Организация);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Организация", "");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Период) И ЗначениеЗаполнено(Периодичность) Тогда
		МассивУсловий.Добавить("ПараметрыТорговыхТочекСрезПоследних.Период >= &НачалоПериода");
		Запрос.УстановитьПараметр("НачалоПериода",      ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, Период));
		Запрос.УстановитьПараметр("КонецПериода",      ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период));
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&КонецПериода", "");
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Условия", СтрСоединить(МассивУсловий, " ИЛИ "));
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Не Запрос.Выполнить().Пустой();

КонецФункции

Функция УсловияИсключенияПоТипуОрганизации(Организация, Период = Неопределено) Экспорт
	
	УсловияИсключения = Новый Массив;
	
	ЭтоФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо") = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	Если ЭтоФизическоеЛицо Тогда
		
		УсловияИсключения.Добавить(ЮридическиеЛица);
		
		Если НЕ УчетЗарплаты.ИПИспользуетТрудНаемныхРаботников(Организация) Тогда
			УсловияИсключения.Добавить(ЕстьСотрудники);
			УсловияИсключения.Добавить(СтраховыеВзносыСотрудников);
		КонецЕсли;
		
		УсловияИсключения.Добавить(РозничнаяПродажаАлкоголя);
		УсловияИсключения.Добавить(ОптоваяТорговляАлкоголем);
		УсловияИсключения.Добавить(ПроизводствоАлгоколя);
		УсловияИсключения.Добавить(ПеревозкаАлкоголя);
		
		УсловияИсключения.Добавить(Перечисления.ВидыПодакцизныхТоваров.АлкогольнаяПродукция);
		УсловияИсключения.Добавить(Перечисления.ВидыПодакцизныхТоваров.Спирт);
		УсловияИсключения.Добавить(Перечисления.ВидыПодакцизныхТоваров.СпиртосодержащаяПродукция);
		
	Иначе
		УсловияИсключения.Добавить(ФизическиеЛица);
	КонецЕсли;
	
	Если Период <> Неопределено Тогда
		Если УчетнаяПолитика.ПрименяетсяУСН(Организация, Период) Тогда
			УсловияИсключения.Добавить(ОбщаяСистемаНалогообложения);
		КонецЕсли;
		Если УчетнаяПолитика.ПлательщикНалогаНаПрибыль(Организация, Период)
			ИЛИ УчетнаяПолитика.ПлательщикНДФЛ(Организация, Период) Тогда
			УсловияИсключения.Добавить(УпрощеннаяСистемаНалогообложения);
		КонецЕсли;
		Если НЕ УчетнаяПолитика.ПлательщикЕНВД(Организация, Период) Тогда
			УсловияИсключения.Добавить(ПлательщикиЕНВД);
		КонецЕсли;
	КонецЕсли;
	
	Возврат УсловияИсключения;
	
КонецФункции

Функция ЕстьОстаткиИОборотыПоСчету(НачалоПериода, КонецПериода, Организация, Счет)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	Запрос.УстановитьПараметр("Счета",         БухгалтерскийУчетПовтИсп.СчетаВИерархии(Счет));
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаОборотДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаОборотКт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт,
	|	ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода, , , Счет В (&Счета), , Организация = &Организация) КАК ХозрасчетныйОстаткиИОбороты
	|ГДЕ
	|	ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокДт <> 0
	|	ИЛИ ХозрасчетныйОстаткиИОбороты.СуммаНачальныйОстатокКт <> 0
	|	ИЛИ ХозрасчетныйОстаткиИОбороты.СуммаОборотДт <> 0
	|	ИЛИ ХозрасчетныйОстаткиИОбороты.СуммаОборотКт <> 0
	|	ИЛИ ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокДт <> 0
	|	ИЛИ ХозрасчетныйОстаткиИОбороты.СуммаКонечныйОстатокКт <> 0";
	
	Возврат НЕ Запрос.Выполнить().Пустой();

КонецФункции

Функция ОрганизацияСозданаВТекущемМесяце(Организация, Период)

	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ЮридическоеФизическоеЛицо, ДатаРегистрации");
	
	// Проверяем только юридические лица.
	Если РеквизитыОрганизации.ЮридическоеФизическоеЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		Возврат Ложь;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(РеквизитыОрганизации.ДатаРегистрации) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Для организаций, зарегистрированных в декабре, считаем, что они подают отчетность в сроки предоставления годовых форм.
	// Поэтому для них отдельной задачи создавать не требуется.
	Если Месяц(РеквизитыОрганизации.ДатаРегистрации) = 12 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НачалоМесяца(Период) = НачалоМесяца(РеквизитыОрганизации.ДатаРегистрации) Тогда
		Возврат Истина;
	КонецЕсли;

	Возврат Ложь;

КонецФункции

Функция ЕстьНалогКУплатеПоДекларации3НДФЛ(Организация, Период)
	
	// Юридические лица не сдают 3-НДФЛ.
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
		Возврат Ложь;
	ИначеЕсли УчетнаяПолитика.ПлательщикНДФЛ(Организация, Период) Тогда
		// Для ИП на ОСНО всегда отображается задача уплаты НДФЛ.
		Возврат Истина;
	Иначе
		// Для остальных ИП показываем только если пользователь явно включил напоминание о сдаче декларации.
		Правило = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.НайтиПоИдентификатору("НДФЛ_Предприниматель", "2013_ИП_Декларация");
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Правило", Правило);
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Результат
		|ИЗ
		|	РегистрСведений.НалогиОтчеты КАК НалогиОтчеты
		|ГДЕ
		|	НалогиОтчеты.Организация = &Организация
		|	И НалогиОтчеты.НалогОтчет = &Правило";
		
		Возврат Не Запрос.Выполнить().Пустой();
	КонецЕсли;
	
КонецФункции

#КонецЕсли
