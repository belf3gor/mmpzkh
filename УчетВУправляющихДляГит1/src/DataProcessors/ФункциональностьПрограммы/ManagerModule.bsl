#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеФункциональности

Функция ОписаниеФункциональности() Экспорт
	
	// При добавлении новой функциональности следует внести изменения в макет Перечисления.ВидыБизнеса.Макеты.Функциональность.
	// В макете указывается связь вида бизнеса и используемой функциональности.
	
	ОписаниеФункциональности = НовыйОписаниеФункциональности();
	
	ЗаполнитьОписаниеФункциональности(ОписаниеФункциональности);
	
	ОчиститьНедоступнуюРодительскуюФункциональность(ОписаниеФункциональности);
	
	ЗаполнитьДочернююФункциональность(ОписаниеФункциональности);
	
	Возврат ОписаниеФункциональности;
	
КонецФункции

Функция НовыйОписаниеФункциональности()
	
	ОписаниеФункциональности = Новый ТаблицаЗначений;
	
	// Имя функциональности - должно совпадать с именем константы,
	// которая связана с функциональной опцией.
	ОписаниеФункциональности.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	
	// Имя раздела, к которому относится функциональность.
	// Должен совпадать с именем одной из закладок на форме ФункциональностьПрограммы
	ОписаниеФункциональности.Колонки.Добавить("Раздел", Новый ОписаниеТипов("Строка"));
	
	// Признак, что функциональность изменяется в длительной операции.
	ОписаниеФункциональности.Колонки.Добавить("ТребуетсяДлительнаяОперация", Новый ОписаниеТипов("Булево"));
	
	// Признак, что функциональность доступна в простом интерфейсе.
	// Если не доступна - то в простом интерфейсе такую функциональность можно будет включить только
	// после перехода на полный интерфейс.
	ОписаниеФункциональности.Колонки.Добавить("ДоступнаВПростомИнтерфейсе", Новый ОписаниеТипов("Булево"));
	
	// Признак, что функциональность нужно автоматически включить при переходе на полный интерфейс.
	// Нужно установить Истина в данном параметре, если он описывает функциональность, которая обязательно
	// должна быть включена в полном интерфейсе и ее выключение в нем заблокировано.
	ОписаниеФункциональности.Колонки.Добавить("ДолжнаБытьОбязательноВключенаВПолномИнтерфейсе", Новый ОписаниеТипов("Булево"));
	
	// Родительская функциональность - список функциональности, которую необходимо включить,
	// чтобы можно было включить данную функциональность.
	// Для добавления родительской функциональности нужно использовать функцию ДобавитьРодителя()
	ОписаниеФункциональности.Колонки.Добавить("РодительскаяФункциональность", Новый ОписаниеТипов("Массив"));
	
	// Дочерняя функциональность заполняется автоматически.
	ОписаниеФункциональности.Колонки.Добавить("ДочерняяФункциональность", Новый ОписаниеТипов("Массив"));
	
	// Признак, что функциональность в данной версии приложения доступна.
	// Если Ложь - то функциональность не будет отображаться на форме.
	ОписаниеФункциональности.Колонки.Добавить("Доступна", Новый ОписаниеТипов("Булево"));
	
	// Признак, что при включении "Синхронизации данных" нужно включить функциональность.
	// Также влияет на отключение - если синхронизация данных включена, то отключить функциональность нельзя.
	ОписаниеФункциональности.Колонки.Добавить("ТребуетсяДляОбменов", Новый ОписаниеТипов("Булево"));
	
	// Тарифная опция, которые должны быть доступна к захвату, чтобы функциональность можно было включить.
	ОписаниеФункциональности.Колонки.Добавить("ИмяТарифнойОпции", Новый ОписаниеТипов("Строка"));
	
	ОписаниеФункциональности.Индексы.Добавить("Имя");
	
	Возврат ОписаниеФункциональности;
	
КонецФункции

Процедура ЗаполнитьОписаниеФункциональности(ОписаниеФункциональности)
	
	ЗаполнитьОписаниеРазделаДокументы(ОписаниеФункциональности);
	
	ЗаполнитьОписаниеРазделаБанкКасса(ОписаниеФункциональности);
	
	ЗаполнитьОписаниеРазделаЗапасы(ОписаниеФункциональности);
	
	ЗаполнитьОписаниеРазделаРасчеты(ОписаниеФункциональности);
	
	ЗаполнитьОписаниеРазделаТорговля(ОписаниеФункциональности);
	
	ЗаполнитьОписаниеРазделаПроизводство(ОписаниеФункциональности);
	
	ЗаполнитьОписаниеРазделаОСНМА(ОписаниеФункциональности);
	
	ЗаполнитьОписаниеРазделаЗарплатаКадры(ОписаниеФункциональности);
	
	ЗаполнитьОписаниеРазделаОрганизация(ОписаниеФункциональности);
	
	ЗаполнитьОписаниеРазделаДополнительно(ОписаниеФункциональности);
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеРазделаДокументы(ОписаниеФункциональности)
	
	Раздел = "Документы";
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ИспользоватьДокументыРеализации");
	Функциональность.ДоступнаВПростомИнтерфейсе = Истина;
	Функциональность.ДолжнаБытьОбязательноВключенаВПолномИнтерфейсе = Истина;
	Функциональность.ТребуетсяДляОбменов = Истина;
	
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ИспользоватьДокументыПоступления");
	Функциональность.ДоступнаВПростомИнтерфейсе = Истина;
	Функциональность.ДолжнаБытьОбязательноВключенаВПолномИнтерфейсе = Истина;
	Функциональность.ТребуетсяДляОбменов = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеРазделаБанкКасса(ОписаниеФункциональности)
	
	Раздел = "БанкКасса";
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ИспользоватьСтатьиДвиженияДенежныхСредств");
	Функциональность.ДоступнаВПростомИнтерфейсе = Истина;
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ВедетсяУчетДенежныхДокументов");
	ДобавитьРодителя(Функциональность, "ИспользоватьДокументыПоступления");
	ДобавитьРодителя(Функциональность, "ИспользоватьДокументыРеализации");
	
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ИспользоватьОплатуПоПлатежнымКартам");
	Функциональность.ТребуетсяДляОбменов = Истина;
	Функциональность.ДоступнаВПростомИнтерфейсе = Истина;
	
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ИспользоватьПлатежныеТребования");
	ДобавитьРодителя(Функциональность, "ИспользоватьДокументыПоступления");
	ДобавитьРодителя(Функциональность, "ИспользоватьДокументыРеализации");
	
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ИспользоватьФискальныйРегистратор");
	Функциональность.ДоступнаВПростомИнтерфейсе = Истина;
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ИспользоватьИнкассацию");
	Функциональность.ДоступнаВПростомИнтерфейсе = Истина;
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеРазделаЗапасы(ОписаниеФункциональности)
	
	Раздел = "Запасы";
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ВедетсяУчетСпецодеждыСпецоснастки");
	Функциональность.ТребуетсяДляОбменов = Истина;
	ДобавитьРодителя(Функциональность, "ИспользоватьДокументыПоступления");
	ДобавитьРодителя(Функциональность, "ИспользоватьДокументыРеализации");
	
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ВедетсяУчетВозвратнойТары");
	Функциональность.ДоступнаВПростомИнтерфейсе = Истина;
	Функциональность.ТребуетсяДляОбменов = Истина;
	ДобавитьРодителя(Функциональность, "ИспользоватьДокументыПоступления");
	ДобавитьРодителя(Функциональность, "ИспользоватьДокументыРеализации");
	
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ВедетсяУчетИмпортныхТоваров");
	Функциональность.ТребуетсяДляОбменов = Истина;
	ДобавитьРодителя(Функциональность, "ИспользоватьДокументыПоступления");
	ДобавитьРодителя(Функциональность, "ИспользоватьДокументыРеализации");
	
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ИспользоватьКомплектациюНоменклатуры");
	Функциональность.ТребуетсяДляОбменов = Истина;
	ДобавитьРодителя(Функциональность, "ИспользоватьДокументыПоступления");
	ДобавитьРодителя(Функциональность, "ИспользоватьДокументыРеализации");
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеРазделаОСНМА(ОписаниеФункциональности)
	
	Раздел = "ОСНМА";
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ВедетсяУчетОсновныхСредств");
	Функциональность.ДоступнаВПростомИнтерфейсе = Истина;
	ДобавитьРодителя(Функциональность, "ИспользоватьДокументыПоступления");
	ДобавитьРодителя(Функциональность, "ИспользоватьДокументыРеализации");
	
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ВедетсяУчетСдачиИмуществаВАренду");
	Функциональность.ДоступнаВПростомИнтерфейсе = Истина;
	ДобавитьРодителя(Функциональность, "ВедетсяУчетОсновныхСредств");
	
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ВедетсяУчетЛизинговогоИмущества");
	Функциональность.ДоступнаВПростомИнтерфейсе = Истина;
	ДобавитьРодителя(Функциональность, "ВедетсяУчетОсновныхСредств");
	
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ВедетсяУчетНМА");
	ДобавитьРодителя(Функциональность, "ИспользоватьДокументыПоступления");
	ДобавитьРодителя(Функциональность, "ИспользоватьДокументыРеализации");
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеРазделаТорговля(ОписаниеФункциональности)
	
	Раздел = "Торговля";
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ВедетсяРозничнаяТорговля");
	Функциональность.ТребуетсяДляОбменов = Истина;
	Функциональность.ДоступнаВПростомИнтерфейсе = Истина;
	
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ВедетсяУчетРозничнойПродажиАлкогольнойПродукцииПива");
	Функциональность.ТребуетсяДляОбменов = Истина;
	ДобавитьРодителя(Функциональность, "ВедетсяРозничнаяТорговля");
	
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ИспользуютсяПодарочныеСертификаты");
	ДобавитьРодителя(Функциональность, "ВедетсяРозничнаяТорговля");
	
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ОсуществляетсяРеализацияТоваровУслугКомитентов");
	Функциональность.ТребуетсяДляОбменов = Истина;
	ДобавитьРодителя(Функциональность, "ВестиУчетПоДоговорам");
	
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ОсуществляетсяРеализацияТоваровУслугЧерезКомиссионеров");
	Функциональность.ТребуетсяДляОбменов = Истина;
	ДобавитьРодителя(Функциональность, "ВестиУчетПоДоговорам");
	
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ОсуществляетсяЗакупкаТоваровУслугДляКомитентов");
	Функциональность.ТребуетсяДляОбменов = Истина;
	ДобавитьРодителя(Функциональность, "ВестиУчетПоДоговорам");
	
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ОсуществляетсяЗакупкаТоваровУслугЧерезКомиссионеров");
	Функциональность.ТребуетсяДляОбменов = Истина;
	ДобавитьРодителя(Функциональность, "ВестиУчетПоДоговорам");
	
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ВедетсяОтгрузкаБезПереходаПраваСобственности");
	Функциональность.ДоступнаВПростомИнтерфейсе = Истина;
	Функциональность.ТребуетсяДляОбменов = Истина;
	Функциональность.ДоступнаВПростомИнтерфейсе = Ложь;
	ДобавитьРодителя(Функциональность, "ИспользоватьДокументыПоступления");
	ДобавитьРодителя(Функциональность, "ИспользоватьДокументыРеализации");
	
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ИспользоватьПакетноеВыставлениеАктов");
	ДобавитьРодителя(Функциональность, "ИспользоватьДокументыПоступления");
	ДобавитьРодителя(Функциональность, "ИспользоватьДокументыРеализации");
	
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ИспользоватьКорректировочныеДокументы");
	ДобавитьРодителя(Функциональность, "ИспользоватьДокументыПоступления");
	ДобавитьРодителя(Функциональность, "ИспользоватьДокументыРеализации");
	
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ИспользоватьПередачуПрав");
	Функциональность.ДоступнаВПростомИнтерфейсе = Истина;
	ДобавитьРодителя(Функциональность, "ИспользоватьДокументыРеализации");
	
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ИспользоватьДоставкуАвтотранспортом");
	Функциональность.ДоступнаВПростомИнтерфейсе = Истина;
	ДобавитьРодителя(Функциональность, "ИспользоватьДокументыРеализации");
	
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ВедетсяУчетТаможенныхДекларацийЭкспорт");
	ДобавитьРодителя(Функциональность, "ИспользоватьДокументыПоступления");
	ДобавитьРодителя(Функциональность, "ИспользоватьДокументыРеализации");
	
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ВестиУчетМаркировкиПродукцииВГИСМ");
	ДобавитьРодителя(Функциональность, "ИспользоватьДокументыПоступления");
	ДобавитьРодителя(Функциональность, "ИспользоватьДокументыРеализации");
	
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ЗагрузкаДанныхИзТиС");
	Функциональность.ДоступнаВПростомИнтерфейсе = Истина;
	ДобавитьРодителя(Функциональность, "ИспользоватьДокументыПоступления");
	ДобавитьРодителя(Функциональность, "ИспользоватьДокументыРеализации");
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеРазделаРасчеты(ОписаниеФункциональности)
	
	Раздел = "Расчеты";
	
	ЭтоВерсияКОРП = ВариантыПриложений.ЭтоВерсияКОРП();
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ВестиУчетПоДоговорам");
	Функциональность.ДоступнаВПростомИнтерфейсе = Истина;
	Функциональность.ТребуетсяДляОбменов = Истина;
	ДобавитьРодителя(Функциональность, "ИспользоватьДокументыПоступления");
	ДобавитьРодителя(Функциональность, "ИспользоватьДокументыРеализации");
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ИсполняютсяОбязанностиНалоговогоАгентаПоНДС");
	Функциональность.ТребуетсяДляОбменов = Истина;
	ДобавитьРодителя(Функциональность, "ВестиУчетПоДоговорам");
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ВедетсяУчетУслугИностранныхИнтернетКомпаний");
	Функциональность.ТребуетсяДляОбменов = Истина;
	ДобавитьРодителя(Функциональность, "ВестиУчетПоДоговорам");
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ОбратноеНачислениеНДС");
	Функциональность.ТребуетсяДляОбменов = Истина;
	Функциональность.Доступна = ЭтоВерсияКОРП;
	ДобавитьРодителя(Функциональность, "ВестиУчетПоДоговорам");
	Функциональность.ИмяТарифнойОпции = ТарификацияБП.ИдентификаторУслугиОбратноеНачислениеНДС();
	

	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "УчетОбеспеченийОбязательствИПлатежей");
	Функциональность.ТребуетсяДляОбменов        = Ложь;
	Функциональность.ДоступнаВПростомИнтерфейсе = Истина;
	ДобавитьРодителя(Функциональность, "ВестиУчетПоДоговорам");
	
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ИспользоватьФакторинг");
	ДобавитьРодителя(Функциональность, "ИспользоватьДокументыПоступления");
	ДобавитьРодителя(Функциональность, "ИспользоватьДокументыРеализации");
	
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "УправлениеЗачетомАвансовПогашениемЗадолженности");
	Функциональность.ДоступнаВПростомИнтерфейсе = Истина;
	Функциональность.ТребуетсяДляОбменов = Истина;
	ДобавитьРодителя(Функциональность, "ИспользоватьДокументыПоступления");
	ДобавитьРодителя(Функциональность, "ИспользоватьДокументыРеализации");
	
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ИспользуетсяГособоронзаказ");
	Функциональность.ДоступнаВПростомИнтерфейсе = Истина;
	Функциональность.Доступна = ДоступнаФункциональностьГособоронзаказ();
	ДобавитьРодителя(Функциональность, "ИспользоватьДокументыПоступления");
	ДобавитьРодителя(Функциональность, "ИспользоватьДокументыРеализации");
	Функциональность.ИмяТарифнойОпции = ТарификацияБП.ИдентификаторУслугиГособоронзаказ();
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ИспользоватьУведомленияОКонтролируемыхСделках");
	Функциональность.Доступна = ЭтоВерсияКОРП;
	ДобавитьРодителя(Функциональность, "ИспользоватьДокументыПоступления");
	ДобавитьРодителя(Функциональность, "ИспользоватьДокументыРеализации");
	Функциональность.ИмяТарифнойОпции = ТарификацияБП.ИдентификаторУслугиУведомленияОКонтролируемыхСделках();
	
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ИспользоватьПланированиеПлатежейПоставщикам");
	Функциональность.ДоступнаВПростомИнтерфейсе = Истина;
	ДобавитьРодителя(Функциональность, "ИспользоватьДокументыПоступления");
	
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ИспользоватьПланированиеПлатежейОтПокупателей");
	Функциональность.ДоступнаВПростомИнтерфейсе = Истина;
	ДобавитьРодителя(Функциональность, "ИспользоватьДокументыРеализации");
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеРазделаПроизводство(ОписаниеФункциональности)
	
	Раздел = "Производство";
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ВедетсяПроизводственнаяДеятельность");
	ДобавитьРодителя(Функциональность, "ИспользоватьДокументыПоступления");
	ДобавитьРодителя(Функциональность, "ИспользоватьДокументыРеализации");
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеРазделаОрганизация(ОписаниеФункциональности)
	
	Раздел = "Организация";
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ВестиУчетПоОрганизациям");
	Функциональность.Доступна = ДоступнаФункциональностьУчетПоНесколькимОрганизациям();
	Функциональность.ИмяТарифнойОпции = ТарификацияБП.ИдентификаторУслугиВестиУчетПоОрганизациям();
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ВестиУчетПоПодразделениям");
	Функциональность.ТребуетсяДлительнаяОперация = Истина;
	Функциональность.Доступна = ВариантыПриложений.ЭтоВерсияКОРП();
	ДобавитьРодителя(Функциональность, "ИспользоватьДокументыПоступления");
	ДобавитьРодителя(Функциональность, "ИспользоватьДокументыРеализации");
	Функциональность.ИмяТарифнойОпции = ТарификацияБП.ИдентификаторУслугиОбособленныеПодразделения();
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеРазделаДополнительно(ОписаниеФункциональности)
	
	Раздел = "Дополнительно";
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "РасширенныйФункционал");
	Функциональность.Доступна = ВариантыПриложений.ЭтоВерсияКОРП();
	Функциональность.ИмяТарифнойОпции = ТарификацияБП.ИдентификаторУслугиРасширенныйФункционал();
	
КонецПроцедуры

Процедура ЗаполнитьОписаниеРазделаЗарплатаКадры(ОписаниеФункциональности, ИмяРаздела = Неопределено)
	
	Раздел = "ЗарплатаКадры";
	
	Если ЗначениеЗаполнено(ИмяРаздела) И ИмяРаздела <> Раздел Тогда
		Возврат;
	КонецЕсли;
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ВедетсяУчетЗарплатыКадров");
	Функциональность.ДоступнаВПростомИнтерфейсе = Истина;
	
	Функциональность = ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, "ИспользоватьКадровыйУчет");
	Функциональность.Доступна = НЕ ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме");
	Функциональность.ДоступнаВПростомИнтерфейсе  = Истина;
	Функциональность.ТребуетсяДлительнаяОперация = ТребуетсяДлительнаяОперацияИспользоватьКадровыйУчет();
	ДобавитьРодителя(Функциональность, "ВедетсяУчетЗарплатыКадров");
		
КонецПроцедуры

Функция ДобавитьОписаниеФункциональности(ОписаниеФункциональности, Раздел, ИмяФункциональности)
	
	Функциональность = ОписаниеФункциональности.Добавить();
	Функциональность.Имя = ИмяФункциональности;
	Функциональность.Раздел = Раздел;
	Функциональность.ТребуетсяДлительнаяОперация                    = Ложь;
	Функциональность.ДоступнаВПростомИнтерфейсе                     = Ложь;
	Функциональность.ДолжнаБытьОбязательноВключенаВПолномИнтерфейсе = Ложь;
	Функциональность.Доступна = Истина;
	
	Возврат Функциональность;
	
КонецФункции

Процедура ОчиститьНедоступнуюРодительскуюФункциональность(ОписаниеФункциональности)
	
	НедоступнаяФункциональность = Новый Соответствие;
	Для Каждого Функциональность Из ОписаниеФункциональности Цикл
		Если Не Функциональность.Доступна Тогда
			НедоступнаяФункциональность.Вставить(Функциональность.Имя, Истина);
		КонецЕсли;
	КонецЦикла;
	
	ОчиститьРодительскуюФункциональность(ОписаниеФункциональности, Неопределено, НедоступнаяФункциональность);
	
КонецПроцедуры

Процедура ЗаполнитьДочернююФункциональность(ОписаниеФункциональности)
	
	Для Каждого Функциональность Из ОписаниеФункциональности Цикл
		Если Не Функциональность.Доступна Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого РодительскаяФукциональность Из Функциональность.РодительскаяФункциональность Цикл
			СтрокиРодительскойФункциональности = ОписаниеФункциональности.НайтиСтроки(Новый Структура("Имя", РодительскаяФукциональность));
			Для Каждого СтрокаРодительскойФункциональности Из СтрокиРодительскойФункциональности Цикл
				СтрокаРодительскойФункциональности.ДочерняяФункциональность.Добавить(Функциональность.Имя);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьРодителя(Функциональность, ИмяРодителя)
	
	Если ЗначениеЗаполнено(ИмяРодителя) Тогда
		Функциональность.РодительскаяФункциональность.Добавить(ИмяРодителя);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьРодительскуюФункциональность(ОписаниеФункциональности, Отбор, ОчищаемаяФункциональность)
	
	Если ЗначениеЗаполнено(Отбор) Тогда
		СтрокиФункциональности = ОписаниеФункциональности.НайтиСтроки(Отбор);
	Иначе
		СтрокиФункциональности = ОписаниеФункциональности;
	КонецЕсли;
	
	Для Каждого Функциональность Из СтрокиФункциональности Цикл
		
		НомерРодительскойФункциональности = Функциональность.РодительскаяФункциональность.Количество() - 1;
		Пока НомерРодительскойФункциональности >= 0 Цикл
			ИмяРодительскойФункциональности = Функциональность.РодительскаяФункциональность[НомерРодительскойФункциональности];
			Если ОчищаемаяФункциональность.Получить(ИмяРодительскойФункциональности) <> Неопределено Тогда
				Функциональность.РодительскаяФункциональность.Удалить(НомерРодительскойФункциональности);
			КонецЕсли;
			НомерРодительскойФункциональности = НомерРодительскойФункциональности - 1;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкиНаОтключениеФлага

Процедура ИзменитьДляПроверкиТекстЗапроса(ТекстЗапроса, ТолькоПроверка = Истина)
	
	Если Не ТолькоПроверка Тогда
		Возврат;
	КонецЕсли;
	
	// Если запрос выполняется для проверки, то выбирается 1 запись
	КоличествоПолучаемыхЗаписей = 1;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
	Для Каждого ПакетЗапроса Из СхемаЗапроса.ПакетЗапросов Цикл
		Для Каждого Оператор Из ПакетЗапроса.Операторы Цикл
			Оператор.КоличествоПолучаемыхЗаписей = КоличествоПолучаемыхЗаписей;
		КонецЦикла;
	КонецЦикла;	
	ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
	
КонецПроцедуры

Функция ТекстЗапросаИспользуетсяСправочник(ИмяСправочника)
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИскомыйСправочник.Ссылка
	|ИЗ
	|	Справочник.%1 КАК ИскомыйСправочник";
	
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, ИмяСправочника);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаИспользуетсяДокумент(ИмяДокумента, ОтборПоВидуОперации = Ложь, ТолькоПроверка = Истина)
	
	Если ТолькоПроверка Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИскомыйДокумент.Ссылка
		|ИЗ
		|	Документ.%1 КАК ИскомыйДокумент
		|ГДЕ
		|	ИскомыйДокумент.ПометкаУдаления = Ложь";
		Если ОтборПоВидуОперации Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	
			|	И ИскомыйДокумент.ВидОперации В (&ВидыОпераций)";
		КонецЕсли;
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ИскомыйДокумент.Ссылка КАК Ссылка,
		|	ИскомыйДокумент.Дата КАК Дата,
		|	ИскомыйДокумент.Ссылка КАК Представление
		|ИЗ
		|	Документ.%1 КАК ИскомыйДокумент
		|ГДЕ
		|	ИскомыйДокумент.ПометкаУдаления = ЛОЖЬ";
		Если ОтборПоВидуОперации Тогда
			ТекстЗапроса = ТекстЗапроса + "
			|	
			|	И ИскомыйДокумент.ВидОперации В (&ВидыОпераций)";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Ссылка";
	КонецЕсли;
	
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, ИмяДокумента);
	Возврат ТекстЗапроса;
	
КонецФункции

Функция РезультатЗапросаИсполняютсяОбязанностиНалоговогоАгентаПоНДС(ТолькоПроверка = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.УчетАгентскогоНДС
	|	И ДоговорыКонтрагентов.ВидАгентскогоДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыАгентскихДоговоров.РеализацияТоваров)";
	
	ИзменитьДляПроверкиТекстЗапроса(Запрос.Текст, ТолькоПроверка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивДоговоров = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивДоговоров;
	
КонецФункции

Функция ТекстЗапросаВедетсяДеятельностьПоДоговорамКомиссии()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Договор,
	|	ДоговорыКонтрагентов.Владелец КАК Контрагент,
	|	ДоговорыКонтрагентов.Владелец КАК СсылкаКонтрагент
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.ВидДоговора В(&ВидыДоговоров)";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаУправлениеЗачетомАвансовРеализацияОтгруженныхТоваров(ТолькоПроверка)
	
	// В реализации отгруженных товаров для расчетов в условных единицах 
	// по документам отгрузки "Реализация товаров и услуг" зачет авансов не выполняется.

	Если ТолькоПроверка Тогда
	
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РеализацияОтгруженныхТоваров.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РеализацияОтгруженныхТоваров КАК РеализацияОтгруженныхТоваров
		|ГДЕ
		|	РеализацияОтгруженныхТоваров.СпособЗачетаАвансов <> ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Автоматически)
		|	И РеализацияОтгруженныхТоваров.ПометкаУдаления = ЛОЖЬ
		|	И НЕ(ТИПЗНАЧЕНИЯ(РеализацияОтгруженныхТоваров.ДокументОтгрузки) = ТИП(Документ.РеализацияТоваровУслуг)
		|				И РеализацияОтгруженныхТоваров.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах)";

	Иначе
	
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	РеализацияОтгруженныхТоваров.Ссылка КАК Ссылка,
		|	РеализацияОтгруженныхТоваров.Дата КАК Дата,
		|	ПРЕДСТАВЛЕНИЕ(РеализацияОтгруженныхТоваров.Ссылка) КАК Представление
		|ИЗ
		|	Документ.РеализацияОтгруженныхТоваров КАК РеализацияОтгруженныхТоваров
		|ГДЕ
		|	РеализацияОтгруженныхТоваров.СпособЗачетаАвансов <> ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Автоматически)
		|	И РеализацияОтгруженныхТоваров.ПометкаУдаления = ЛОЖЬ
		|	И НЕ(ТИПЗНАЧЕНИЯ(РеализацияОтгруженныхТоваров.ДокументОтгрузки) = ТИП(Документ.РеализацияТоваровУслуг)
		|				И РеализацияОтгруженныхТоваров.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Ссылка";
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ИспользуетсяСинхронизацияДанных() Экспорт
	
	Возврат Константы.ИспользоватьСинхронизациюДанных.Получить() И НЕ ОбщегоНазначения.РазделениеВключено();
	
КонецФункции 

Функция ОтказСнятьИспользоватьДенежныеДокументы()
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ВыдачаДенежныхДокументов");

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПоступлениеДенежныхДокументов");
	
	Запрос = Новый Запрос;

	УстановитьПривилегированныйРежим(Истина);

	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ОтказСнять = Ложь;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ОтказСнять = Истина;
				
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьИспользоватьОплатуПоПлатежнымКартам()
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ОплатаПлатежнойКартой", , Истина);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаЕстьОплатаКартойВДокументе("ОтчетОРозничныхПродажах", Истина);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаЕстьОплатаКартойВДокументе("РозничнаяПродажа", Истина);
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ОтказСнять = Ложь;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ОтказСнять = Истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьИспользоватьПлатежныеТребования()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаИспользуетсяДокумент("ПлатежноеТребование");
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьВедетсяУчетВозвратнойТары()
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("АвансовыйОтчет", Истина);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("ВозвратТоваровОтПокупателя", Истина);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("ВозвратТоваровПоставщику", Истина);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("ПередачаТоваров", Истина);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("ПеремещениеТоваров", Истина);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("ПоступлениеИзПереработки", Истина);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("ПоступлениеТоваровУслуг", Истина);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("РеализацияТоваровУслуг", Истина);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("СписаниеТоваров", Истина);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("СчетНаОплатуПокупателю", Истина);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("СчетНаОплатуПоставщика", Истина);
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ОтказСнять = Ложь;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ОтказСнять = Истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтказСнять;

КонецФункции

Функция ОтказСнятьВедетсяУчетИмпортныхТоваров()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаИспользуетсяСправочник("НомераГТД");
	
	УстановитьПривилегированныйРежим(Истина);

	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьИспользоватьКомплектациюНоменклатуры()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаИспользуетсяДокумент("КомплектацияНоменклатуры");
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьВедетсяУчетОсновныхСредств()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаИспользуетсяСправочник("ОсновныеСредства");
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьВедетсяУчетНМА()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаИспользуетсяСправочник("НематериальныеАктивы");
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьВедетсяОтгрузкаБезПереходаПраваСобственности()
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидыОпераций");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("РеализацияТоваровУслуг", Истина);
	НоваяСтрока.ВидыОпераций = Новый Массив;
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("РеализацияОтгруженныхТоваров");
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		Запрос.УстановитьПараметр("ВидыОпераций", СтрокаТЗ.ВидыОпераций);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ОтказСнять = Ложь;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ОтказСнять = Истина;
				
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьИспользоватьПакетноеВыставлениеАктов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаИспользуетсяДокумент("ОказаниеУслуг");
	
	УстановитьПривилегированныйРежим(Истина);

	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьВедетсяПроизводственнаяДеятельность()
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидыОпераций");

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("АктОбОказанииПроизводственныхУслуг");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ОтчетПроизводстваЗаСмену");

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ИнвентаризацияНЗП");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПоступлениеИзПереработки");

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПередачаТоваров", Истина);
	НоваяСтрока.ВидыОпераций = Новый Массив;
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыОперацийПередачаТоваров.ВПереработку);
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПоступлениеТоваровУслуг", Истина);
	НоваяСтрока.ВидыОпераций = Новый Массив;
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку);

	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		Запрос.УстановитьПараметр("ВидыОпераций", СтрокаТЗ.ВидыОпераций);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ОтказСнять = Ложь;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ОтказСнять = Истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьВедетсяУчетСпецодеждыСпецоснастки()
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидыОпераций");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ВыработкаМатериалов");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("СписаниеМатериаловИзЭксплуатации");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ВозвратМатериаловИзЭксплуатации");

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПередачаМатериаловВЭксплуатацию");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("РегламентнаяОперация", Истина);
	НоваяСтрока.ВидыОпераций = Новый Массив;
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыРегламентныхОпераций.ПогашениеСтоимостиСпецодеждыИспецоснасткиВэксплуатации);
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		Запрос.УстановитьПараметр("ВидыОпераций", СтрокаТЗ.ВидыОпераций);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ОтказСнять = Ложь;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ОтказСнять = Истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьОсуществляетсяЗакупкаТоваровУслугДляКомитентов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаВедетсяДеятельностьПоДоговорамКомиссии();
	ИзменитьДляПроверкиТекстЗапроса(Запрос.Текст);
	
	МассивВидовДоговоровКомиссииНаЗакупку = Новый Массив;
	МассивВидовДоговоровКомиссииНаЗакупку.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
	Запрос.УстановитьПараметр("ВидыДоговоров", МассивВидовДоговоровКомиссииНаЗакупку);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьИсполняютсяОбязанностиНалоговогоАгентаПоНДС()
	
	ОтказСнять = РезультатЗапросаИсполняютсяОбязанностиНалоговогоАгентаПоНДС().Количество() > 0;
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьОсуществляетсяЗакупкаТоваровУслугЧерезКомиссионеров()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаВедетсяДеятельностьПоДоговорамКомиссии();
	ИзменитьДляПроверкиТекстЗапроса(Запрос.Текст);
	
	МассивВидовДоговоровКомиссииНаЗакупку = Новый Массив;
	МассивВидовДоговоровКомиссииНаЗакупку.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
	Запрос.УстановитьПараметр("ВидыДоговоров", МассивВидовДоговоровКомиссииНаЗакупку);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьОсуществляетсяРеализацияТоваровУслугКомитентов()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаВедетсяДеятельностьПоДоговорамКомиссии();
	ИзменитьДляПроверкиТекстЗапроса(Запрос.Текст);
	
	МассивВидовДоговоровКомиссииНаПродажу = Новый Массив;
	МассивВидовДоговоровКомиссииНаПродажу.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	Запрос.УстановитьПараметр("ВидыДоговоров", МассивВидовДоговоровКомиссииНаПродажу);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьОсуществляетсяРеализацияТоваровУслугЧерезКомиссионеров()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаВедетсяДеятельностьПоДоговорамКомиссии();
	ИзменитьДляПроверкиТекстЗапроса(Запрос.Текст);
	
	МассивВидовДоговоровКомиссииНаПродажу = Новый Массив;
	МассивВидовДоговоровКомиссииНаПродажу.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	Запрос.УстановитьПараметр("ВидыДоговоров", МассивВидовДоговоровКомиссииНаПродажу);
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьВедетсяРозничнаяТорговля()
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидыОпераций");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ОтчетОРозничныхПродажах");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("РозничнаяПродажа");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользоватьДокументыРозничнойТорговли("ПриходныйКассовыйОрдер", Истина);
	НоваяСтрока.ВидыОпераций = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		Перечисления.ВидыОперацийПКО.РозничнаяВыручка);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользоватьДокументыРозничнойТорговли("ПоступлениеНаРасчетныйСчет", Истина);
	НоваяСтрока.ВидыОпераций = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаЕстьОплатаКартойРозницаСЗакрывающимиДокументами("ОплатаПлатежнойКартой", Истина);
	НоваяСтрока.ВидыОпераций = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		Перечисления.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка);
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		Запрос.УстановитьПараметр("ВидыОпераций", СтрокаТЗ.ВидыОпераций);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ОтказСнять = Ложь;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ОтказСнять = Истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ТекстЗапросаИспользоватьДокументыРозничнойТорговли(ИмяДокумента, ТолькоПроверка = Истина)
	
	Если ТолькоПроверка Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Док.Ссылка КАК Ссылка
		|ИЗ
		|	Документ." + ИмяДокумента + " КАК Док
		|ГДЕ
		|	НЕ Док.ПометкаУдаления
		|	И Док.ВидОперации В (&ВидыОпераций)
		|	И НЕ Док.БезЗакрывающихДокументов";
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Док.Ссылка КАК Ссылка,
		|	Док.Дата КАК Дата,
		|	Док.Ссылка КАК Представление
		|ИЗ
		|	Документ." + ИмяДокумента + " КАК Док
		|ГДЕ
		|	НЕ Док.ПометкаУдаления
		|	И Док.ВидОперации В (&ВидыОпераций)
		|	И НЕ Док.БезЗакрывающихДокументов
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Ссылка";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ОтказСнятьИспользоватьУведомленияОКонтролируемыхСделках()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаИспользуетсяДокумент("УведомлениеОКонтролируемыхСделках");
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьВедетсяУчетРозничнойПродажиАлкогольнойПродукцииПива()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СведенияОбАлкогольнойПродукции.Номенклатура
	|ИЗ
	|	РегистрСведений.СведенияОбАлкогольнойПродукции КАК СведенияОбАлкогольнойПродукции";
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьИспользуютсяПодарочныеСертификаты()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыОплатОрганизаций.Ссылка
	|ИЗ
	|	Справочник.ВидыОплатОрганизаций КАК ВидыОплатОрганизаций
	|ГДЕ
	|	ВидыОплатОрганизаций.ТипОплаты В (ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСобственный), ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПодарочныйСертификатСторонний))"
	;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьИспользоватьКорректировочныеДокументы()

	Запрос = Новый Запрос;
	
	ДокументыДляПроверки = Новый Массив;
	ДокументыДляПроверки.Добавить("КорректировкаПоступления");
	ДокументыДляПроверки.Добавить("КорректировкаРеализации");
	
	ОтказСнять = Ложь;
	
	Для каждого ДокументДляПроверки Из ДокументыДляПроверки Цикл
	
		Запрос.Текст = ТекстЗапросаИспользуетсяДокумент(ДокументДляПроверки);
		
		ОтказСнять = НЕ Запрос.Выполнить().Пустой();
		
		Если ОтказСнять Тогда
			Прервать;
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат ОтказСнять;

КонецФункции 

Функция ОтказСнятьИспользоватьФискальныйРегистратор()
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПодключаемоеОборудование.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПодключаемоеОборудование КАК ПодключаемоеОборудование
	|ГДЕ
	|	(ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ФискальныйРегистратор)
	|			ИЛИ ПодключаемоеОборудование.ТипОборудования = ЗНАЧЕНИЕ(Перечисление.ТипыПодключаемогоОборудования.ККТ))";
	
	ОтказСнять = НЕ Запрос.Выполнить().Пустой();
	
	Возврат ОтказСнять;
КонецФункции

Функция ОтказСнятьИспользоватьИнкассацию()
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидыОпераций");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "РасходныйКассовыйОрдер";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("РасходныйКассовыйОрдер", Истина, Ложь);
	НоваяСтрока.ВидыОпераций = Новый Массив;
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыОперацийРКО.Инкассация);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПоступлениеНаРасчетныйСчет";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПоступлениеНаРасчетныйСчет", Истина, Ложь);
	НоваяСтрока.ВидыОпераций = Новый Массив;
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация);
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		Запрос.УстановитьПараметр("ВидыОпераций", СтрокаТЗ.ВидыОпераций);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ОтказСнять = Ложь;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ОтказСнять = Истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьИспользоватьДоставкуАвтотранспортом()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РеализацияТоваровУслуг.Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	(РеализацияТоваровУслуг.Перевозчик <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ИЛИ РеализацияТоваровУслуг.МаркаАвтомобиля <> """"
	|			ИЛИ РеализацияТоваровУслуг.РегистрационныйЗнакАвтомобиля <> """"
	|			ИЛИ РеализацияТоваровУслуг.Водитель <> """"
	|			ИЛИ РеализацияТоваровУслуг.КраткоеНаименованиеГруза <> """"
	|			ИЛИ РеализацияТоваровУслуг.СопроводительныеДокументы <> """")";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;

КонецФункции 

Функция ОтказСнятьВедетсяУчетТаможенныхДекларацийЭкспорт()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаИспользуетсяДокумент("ТаможеннаяДекларацияЭкспорт");
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;

КонецФункции

Функция ОтказСнятьВестиУчетМаркировкиПродукцииВГИСМ()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаИспользуетсяСправочник("КонтрольныеЗнакиГИСМ");
	
	УстановитьПривилегированныйРежим(Истина);

	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

#Область ВестиУчетПоПодразделениям

Функция ОтказСнятьВестиУчетПоПодразделениям()
	
	РезультатыЗапросовИспользуютсяОбособленныеПодразделения = РезультатыЗапросовИспользуютсяОбособленныеПодразделения();
	ОтказСнять = Не (РезультатыЗапросовИспользуютсяОбособленныеПодразделения[0].Пустой() // филиалы (обособленные организации)
		И РезультатыЗапросовИспользуютсяОбособленныеПодразделения[1].Пустой()); // обособленные подразделения
	
	Если ОтказСнять Тогда
		Возврат ОтказСнять;
	КонецЕсли;
	
	РезультатыЗапросовИспользуютсяПодразделенияВПроводках = РезультатыЗапросовИспользуютсяПодразделенияВПроводках();
	ОтказСнять = Не РезультатыЗапросовИспользуютсяПодразделенияВПроводках.Пустой();
	Возврат ОтказСнять;
	
КонецФункции

Функция РезультатыЗапросовИспользуютсяОбособленныеПодразделения(ТолькоПроверка = Истина)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.Представление КАК Представление
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ОбособленноеПодразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка КАК Ссылка,
	|	ПодразделенияОрганизаций.Представление КАК Представление
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.ОбособленноеПодразделение";
	
	ИзменитьДляПроверкиТекстЗапроса(Запрос.Текст, ТолькоПроверка);
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

Функция РезультатыЗапросовИспользуютсяПодразделенияВПроводках(ТолькоПроверка = Истина)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Хозрасчетный.Регистратор КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(Хозрасчетный.Регистратор) КАК Представление
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	(Хозрасчетный.СчетДт В (&СчетаДляПроверки)
	|				И НЕ Хозрасчетный.ПодразделениеДт В (ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка), НЕОПРЕДЕЛЕНО)
	|			ИЛИ Хозрасчетный.СчетКт В (&СчетаДляПроверки)
	|				И НЕ Хозрасчетный.ПодразделениеКт В (ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка), НЕОПРЕДЕЛЕНО))";
	
	ИзменитьДляПроверкиТекстЗапроса(Запрос.Текст, ТолькоПроверка);
	
	// Проверяем счета, где признак УчетПоПодразделеиям в КОРП отличается от ПРОФ.
	СчетаСОтключаемымУчетомПоПодразделениям = ПланыСчетов.Хозрасчетный.СчетаСРазличиямиПризнакаУчетПоПодразделениям();
	
	// Исключаем счета, где подразделение заполняется программно при включении обособленных подразделений.
	СчетаДляПроверки = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		СчетаСОтключаемымУчетомПоПодразделениям,
		ПланыСчетов.Хозрасчетный.СчетаОСДляЗаполненияПодразделенияПоДаннымМестонахождения());
		
	Запрос.УстановитьПараметр("СчетаДляПроверки", СчетаДляПроверки);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Процедура ДействияПослеИзмененияВестиУчетПоПодразделениям(НовоеЗначение)
	
	// Сама константа записывается вне траназкции, т.к. в процедурах, которые изменяют связанные данные
	// в транзакции, используется получение значения функциональной опции.
	// Если изменять константу, связанную с функциональной опцией в транзакции,
	// то в этом случае значение функциональной опции остается старым до фиксации транзакции.
	
	НачатьТранзакцию();
	
	УстановитьПризнакОбособленныхПодразделенийВОрганизациях(НовоеЗначение);
	
	ПланыСчетов.Хозрасчетный.НастроитьПланСчетовДляОбособленныхПодразделений(НовоеЗначение);
	
	ЗафиксироватьТранзакцию();
	
	// Обработка движений плана счетов выполняется вне транзакции,
	// т.к. она может содержать большой объем изменений - транзакция может переполниться.
	// При этом эти изменения не влияют на целостность и могут быть выполнены позже.
	Если НовоеЗначение Тогда
		УчетОбособленныхПодразделений.ПриВключенииВестиУчетПоПодразделениям();
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПризнакОбособленныхПодразделенийВОрганизациях(НовоеЗначение)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("ЕстьОбособленныеПодразделения", НовоеЗначение);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ЕстьОбособленныеПодразделения <> &ЕстьОбособленныеПодразделения";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ОрганизацияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ОрганизацияОбъект.ЕстьОбособленныеПодразделения = НовоеЗначение;
		ОрганизацияОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОперацииФакторинга

Функция ТекстЗапросаВедетсяДеятельностьПоОперациямФакторинга(ТолькоПроверка = Истина)
	
	Если ТолькоПроверка Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СФакторинговойКомпанией)";
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДоговорыКонтрагентов.Ссылка КАК Договор,
		|	ДоговорыКонтрагентов.Владелец КАК Контрагент,
		|	ДоговорыКонтрагентов.Владелец КАК СсылкаКонтрагент
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СФакторинговойКомпанией)";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ОтказСнятьОсуществляетсяДеятельностьПоОперациямФакторинга()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаВедетсяДеятельностьПоОперациямФакторинга();
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

Процедура ПриИзмененииФункциональнойОпцииИспользоватьФакторинг(ВыполняетсяОбработчикОбновления = Ложь) Экспорт
	
	Справочники.ПрочиеДоходыИРасходы.СоздатьУстановитьПредопределенныеЭлементыФакторинга(ВыполняетсяОбработчикОбновления);
	
	Справочники.СтатьиДвиженияДенежныхСредств.СоздатьУстановитьПредопределенныеЭлементыФакторинг(ВыполняетсяОбработчикОбновления);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеЗачетомАвансовПогашениемЗадолженности

Функция ОтказСнятьУправлениеЗачетомАвансовПогашениемЗадолженности()
	
	ТаблицаЗапросов = ТаблицаЗапросовУправлениеЗачетомАвансовПогашениемЗадолженности(Истина);
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		Запрос.УстановитьПараметр("ВидыОперацийОплатаИВозврат", СтрокаТЗ.ВидыОперацийОплатаИВозврат);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ОтказСнять = Ложь;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ОтказСнять = Истина;
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ТаблицаЗапросовУправлениеЗачетомАвансовПогашениемЗадолженности(ТолькоПроверка)

	// Начинаем поиск с документов, в которых наиболее вероятно 
	// используется зачет авансов (погашение задолженности) по документам.
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидыОперацийОплатаИВозврат");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПоступлениеНаРасчетныйСчет";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеПогашениемЗадолженностиКассаБанк("ПоступлениеНаРасчетныйСчет", ТолькоПроверка);
	НоваяСтрока.ВидыОперацийОплатаИВозврат = Новый Массив;
	НоваяСтрока.ВидыОперацийОплатаИВозврат.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя);
	НоваяСтрока.ВидыОперацийОплатаИВозврат.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "СписаниеСРасчетногоСчета";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеПогашениемЗадолженностиКассаБанк("СписаниеСРасчетногоСчета", ТолькоПроверка);
	НоваяСтрока.ВидыОперацийОплатаИВозврат = Новый Массив;
	НоваяСтрока.ВидыОперацийОплатаИВозврат.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику);
	НоваяСтрока.ВидыОперацийОплатаИВозврат.Добавить(Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПриходныйКассовыйОрдер";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеПогашениемЗадолженностиКассаБанк("ПриходныйКассовыйОрдер", ТолькоПроверка);
	НоваяСтрока.ВидыОперацийОплатаИВозврат = Новый Массив;
	НоваяСтрока.ВидыОперацийОплатаИВозврат.Добавить(Перечисления.ВидыОперацийПКО.ОплатаПокупателя);
	НоваяСтрока.ВидыОперацийОплатаИВозврат.Добавить(Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "РасходныйКассовыйОрдер";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеПогашениемЗадолженностиКассаБанк("РасходныйКассовыйОрдер", ТолькоПроверка);
	НоваяСтрока.ВидыОперацийОплатаИВозврат = Новый Массив;
	НоваяСтрока.ВидыОперацийОплатаИВозврат.Добавить(Перечисления.ВидыОперацийРКО.ОплатаПоставщику);
	НоваяСтрока.ВидыОперацийОплатаИВозврат.Добавить(Перечисления.ВидыОперацийРКО.ВозвратПокупателю);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ОплатаПлатежнойКартой";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеПогашениемЗадолженностиКассаБанк("ОплатаПлатежнойКартой", ТолькоПроверка);
	НоваяСтрока.ВидыОперацийОплатаИВозврат = Новый Массив;
	НоваяСтрока.ВидыОперацийОплатаИВозврат.Добавить(Перечисления.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "РеализацияТоваровУслуг";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеЗачетомАвансовРеализацияТоваровУслуг(ТолькоПроверка);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "РеализацияОтгруженныхТоваров";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеЗачетомАвансовРеализацияОтгруженныхТоваров(ТолькоПроверка);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПоступлениеТоваровУслуг";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеЗачетомАвансовПоступлениеТоваровУслуг(ТолькоПроверка);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПоступлениеДопРасходов";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеЗачетомАвансовПоступлениеРеализация("ПоступлениеДопРасходов", ТолькоПроверка);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "АвансовыйОтчет";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеПогашениемЗадолженностиАвансовыйОтчет(ТолькоПроверка);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "АктОбОказанииПроизводственныхУслуг";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеЗачетомАвансовПоступлениеРеализация("АктОбОказанииПроизводственныхУслуг", ТолькоПроверка);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ОтчетКомиссионераОПродажах";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеЗачетомАвансовПоступлениеРеализация("ОтчетКомиссионераОПродажах", ТолькоПроверка);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПередачаОС";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеЗачетомАвансовПоступлениеРеализация("ПередачаОС", ТолькоПроверка);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПередачаНМА";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеЗачетомАвансовПоступлениеРеализация("ПередачаНМА", ТолькоПроверка);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПоступлениеНМА";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеЗачетомАвансовПоступлениеРеализация("ПоступлениеНМА", ТолькоПроверка);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПоступлениеИзПереработки";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеЗачетомАвансовПоступлениеРеализация("ПоступлениеИзПереработки", ТолькоПроверка);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "РеализацияУслугПоПереработке";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеЗачетомАвансовПоступлениеРеализация("РеализацияУслугПоПереработке", ТолькоПроверка);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "КорректировкаДолга";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеКорректировкаДолга(ТолькоПроверка);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ГТДИмпорт";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаУправлениеЗачетомАвансовПоступлениеРеализация("ГТДИмпорт", ТолькоПроверка);
	
	Возврат ТаблицаЗапросов;

КонецФункции

Функция ДокументыПрепятствующиеОтключениюУправлениеЗачетомАвансовПогашениемЗадолженности()

	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();

	ТаблицаЗапросов = ТаблицаЗапросовУправлениеЗачетомАвансовПогашениемЗадолженности(Ложь);

	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		Запрос.УстановитьПараметр("ВидыОперацийОплатаИВозврат", СтрокаТЗ.ВидыОперацийОплатаИВозврат);
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.ИмяДокумента = СтрокаТЗ.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы.Найти(СтрокаТЗ.ИмяДокумента);
		СтрокаТаблицыДокументов.СинонимДокумента = МетаданныеДокумента.Синоним;
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	
	// Отсортируем по алфавиту
	ТаблицаРезультатовЗапросов.Сортировать("СинонимДокумента");
	
	Возврат ТаблицаРезультатовЗапросов;
	
КонецФункции

Функция ТекстЗапросаУправлениеЗачетомАвансовРеализацияТоваровУслуг(ТолькоПроверка)
	
	// В реализации товаров и услуг для вида операции "Отгрузка без перехода права собственности"
	// и при передачи товаров комиссионеру на реализацию зачет авансов не выполняется.

	Если ТолькоПроверка Тогда
	
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДокументРТУ.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК ДокументРТУ
		|ГДЕ
		|	ДокументРТУ.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности)
		|	И ДокументРТУ.ДоговорКонтрагента.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером)
		|	И ДокументРТУ.СпособЗачетаАвансов <> ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Автоматически)
		|	И ДокументРТУ.ПометкаУдаления = ЛОЖЬ";

	Иначе
	
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДокументРТУ.Ссылка КАК Ссылка,
		|	ДокументРТУ.Дата КАК Дата,
		|	ПРЕДСТАВЛЕНИЕ(ДокументРТУ.Ссылка) КАК Представление
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК ДокументРТУ
		|ГДЕ
		|	ДокументРТУ.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности)
		|	И ДокументРТУ.ДоговорКонтрагента.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомиссионером)
		|	И ДокументРТУ.СпособЗачетаАвансов <> ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Автоматически)
		|	И ДокументРТУ.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Ссылка";
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаУправлениеЗачетомАвансовПоступлениеТоваровУслуг(ТолькоПроверка)
	
	// В поступлении товаров и услуг для вида операции "В переработку"
	// и при получения товаров от комитента на реализацию зачет авансов не выполняется.
	
	Если ТолькоПроверка Тогда
	
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДокументПТУ.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ДокументПТУ
		|ГДЕ
		|	ДокументПТУ.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку)
		|	И ДокументПТУ.ДоговорКонтрагента.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом)
		|	И ДокументПТУ.СпособЗачетаАвансов <> ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Автоматически)
		|	И ДокументПТУ.ПометкаУдаления = ЛОЖЬ";
	
	Иначе

		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДокументПТУ.Ссылка КАК Ссылка,
		|	ДокументПТУ.Дата КАК Дата,
		|	ПРЕДСТАВЛЕНИЕ(ДокументПТУ.Ссылка) КАК Представление
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ДокументПТУ
		|ГДЕ
		|	ДокументПТУ.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку)
		|	И ДокументПТУ.ДоговорКонтрагента.ВидДоговора <> ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентом)
		|	И ДокументПТУ.СпособЗачетаАвансов <> ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Автоматически)
		|	И ДокументПТУ.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Ссылка";
	
	КонецЕсли;
		
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаУправлениеЗачетомАвансовПоступлениеРеализация(ИмяДокумента, ТолькоПроверка)
	
	Если ТолькоПроверка Тогда

		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДокументПоступленияРеализации.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.АктОбОказанииПроизводственныхУслуг КАК ДокументПоступленияРеализации
		|ГДЕ
		|	ДокументПоступленияРеализации.СпособЗачетаАвансов <> ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Автоматически)
		|	И ДокументПоступленияРеализации.ПометкаУдаления = ЛОЖЬ";
		
	Иначе

		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ДокументПоступленияРеализации.Ссылка КАК Ссылка,
		|	ДокументПоступленияРеализации.Дата КАК Дата,
		|	ПРЕДСТАВЛЕНИЕ(ДокументПоступленияРеализации.Ссылка) КАК Представление
		|ИЗ
		|	Документ.АктОбОказанииПроизводственныхУслуг КАК ДокументПоступленияРеализации
		|ГДЕ
		|	ДокументПоступленияРеализации.СпособЗачетаАвансов <> ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.Автоматически)
		|	И ДокументПоступленияРеализации.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Ссылка";
	
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "АктОбОказанииПроизводственныхУслуг", ИмяДокумента);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаУправлениеПогашениемЗадолженностиКассаБанк(ИмяДокумента, ТолькоПроверка)
	
	Если ТолькоПроверка Тогда

		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДокументКассаБанк.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ДокументКассаБанк
		|ГДЕ
		|	ДокументКассаБанк.СпособПогашенияЗадолженности <> ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияЗадолженности.Автоматически)
		|	И ДокументКассаБанк.Ссылка.ВидОперации В (&ВидыОперацийОплатаИВозврат)
		|	И ДокументКассаБанк.Ссылка.ПометкаУдаления = ЛОЖЬ";
		
	Иначе

		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументКассаБанк.Ссылка КАК Ссылка,
		|	ДокументКассаБанк.Ссылка.Дата КАК Дата,
		|	ПРЕДСТАВЛЕНИЕ(ДокументКассаБанк.Ссылка) КАК Представление
		|ИЗ
		|	Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ДокументКассаБанк
		|ГДЕ
		|	ДокументКассаБанк.СпособПогашенияЗадолженности <> ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияЗадолженности.Автоматически)
		|	И ДокументКассаБанк.Ссылка.ВидОперации В (&ВидыОперацийОплатаИВозврат)
		|	И ДокументКассаБанк.Ссылка.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Ссылка";
	
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПоступлениеНаРасчетныйСчет", ИмяДокумента);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаУправлениеПогашениемЗадолженностиАвансовыйОтчет(ТолькоПроверка)
	
	Если ТолькоПроверка Тогда
	
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	АвансовыйОтчет.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК АвансовыйОтчет
		|ГДЕ
		|	АвансовыйОтчет.СпособПогашенияЗадолженности <> ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияЗадолженности.Автоматически)
		|	И АвансовыйОтчет.Ссылка.ПометкаУдаления = ЛОЖЬ";
		
	Иначе

		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	АвансовыйОтчет.Ссылка КАК Ссылка,
		|	АвансовыйОтчет.Ссылка.Дата КАК Дата,
		|	ПРЕДСТАВЛЕНИЕ(АвансовыйОтчет.Ссылка) КАК Представление
		|ИЗ
		|	Документ.АвансовыйОтчет.ОплатаПоставщикам КАК АвансовыйОтчет
		|ГДЕ
		|	АвансовыйОтчет.СпособПогашенияЗадолженности <> ЗНАЧЕНИЕ(Перечисление.СпособыПогашенияЗадолженности.Автоматически)
		|	И АвансовыйОтчет.Ссылка.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Ссылка";
	
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаУправлениеКорректировкаДолга(ТолькоПроверка)
	
	Если ТолькоПроверка Тогда
	
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КорректировкаДолга.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.КорректировкаДолга КАК КорректировкаДолга
		|ГДЕ
		|	КорректировкаДолга.ПометкаУдаления = ЛОЖЬ";
		
	Иначе

		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	КорректировкаДолга.Ссылка КАК Ссылка,
		|	КорректировкаДолга.Дата КАК Дата,
		|	ПРЕДСТАВЛЕНИЕ(КорректировкаДолга.Ссылка) КАК Представление
		|ИЗ
		|	Документ.КорректировкаДолга КАК КорректировкаДолга
		|ГДЕ
		|	КорректировкаДолга.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Ссылка";
	
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ИспользованиеВозвратнойТары

Функция ТекстЗапросаВедетсяУчетВозвратнойТары(ИмяДокумента, ТолькоПроверка)
	
	Если ТолькоПроверка Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ Первые 1
		|	ДокументСВозвратнойТарой.Ссылка
		|ИЗ
		|	Документ.%1.ВозвратнаяТара КАК ДокументСВозвратнойТарой
		|ГДЕ 
		|	ДокументСВозвратнойТарой.Ссылка.ПометкаУдаления = Ложь";
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументСВозвратнойТарой.Ссылка КАК Ссылка,
		|	ДокументСВозвратнойТарой.Ссылка.Дата КАК Дата,
		|	ПРЕДСТАВЛЕНИЕ(ДокументСВозвратнойТарой.Ссылка) КАК Представление
		|ИЗ
		|	Документ.%1.ВозвратнаяТара КАК ДокументСВозвратнойТарой
		|ГДЕ
		|	ДокументСВозвратнойТарой.Ссылка.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Ссылка";
		
	КонецЕсли;
	
	ТекстЗапроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗапроса, ИмяДокумента);
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТаблицаЗапросовВедетсяУчетВозвратнойТары()

	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "АвансовыйОтчет";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("АвансовыйОтчет", Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ВозвратТоваровОтПокупателя";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("ВозвратТоваровОтПокупателя", Ложь);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ВозвратТоваровПоставщику";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("ВозвратТоваровПоставщику", Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПередачаТоваров";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("ПередачаТоваров", Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПеремещениеТоваров";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("ПеремещениеТоваров", Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПоступлениеИзПереработки";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("ПоступлениеИзПереработки", Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПоступлениеТоваровУслуг";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("ПоступлениеТоваровУслуг", Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "РеализацияТоваровУслуг";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("РеализацияТоваровУслуг", Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "СписаниеТоваров";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("СписаниеТоваров", Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "СчетНаОплатуПокупателю";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("СчетНаОплатуПокупателю", Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "СчетНаОплатуПоставщика";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаВедетсяУчетВозвратнойТары("СчетНаОплатуПоставщика", Ложь);
	
	Возврат ТаблицаЗапросов;
	
КонецФункции 

Функция ДокументыПрепятствующиеОтключениюВозвратойТары()

	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();

	ТаблицаЗапросов = ТаблицаЗапросовВедетсяУчетВозвратнойТары();

	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.ИмяДокумента = СтрокаТЗ.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы.Найти(СтрокаТЗ.ИмяДокумента);
		СтрокаТаблицыДокументов.СинонимДокумента = МетаданныеДокумента.Синоним;
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	
	// Отсортируем по алфавиту
	ТаблицаРезультатовЗапросов.Сортировать("СинонимДокумента");
	
	Возврат ТаблицаРезультатовЗапросов;
	
КонецФункции

#КонецОбласти

#Область ОтгрузкаБезПереходаПраваСобственности

Функция ТаблицаЗапросовВедетсяОтгрузкаБезПереходаПраваСобственности()

	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидыОпераций");

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "РеализацияТоваровУслуг";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("РеализацияТоваровУслуг", Истина, Ложь);
	НоваяСтрока.ВидыОпераций = Новый Массив;
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "РеализацияОтгруженныхТоваров";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("РеализацияОтгруженныхТоваров",, Ложь);
	
	Возврат ТаблицаЗапросов;
	
КонецФункции 

Функция ДокументыПрепятствующиеОтключениюОтгрузкаБезПереходаПраваСобственности()

	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();

	ТаблицаЗапросов = ТаблицаЗапросовВедетсяОтгрузкаБезПереходаПраваСобственности();

	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		Запрос.УстановитьПараметр("ВидыОпераций", СтрокаТЗ.ВидыОпераций);
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.ИмяДокумента = СтрокаТЗ.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы.Найти(СтрокаТЗ.ИмяДокумента);
		СтрокаТаблицыДокументов.СинонимДокумента = МетаданныеДокумента.Синоним;
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	
	// Отсортируем по алфавиту
	ТаблицаРезультатовЗапросов.Сортировать("СинонимДокумента");
	
	Возврат ТаблицаРезультатовЗапросов;
	
КонецФункции 

#КонецОбласти

#Область ВедетсяУчетДенежныхДокументов

Функция ТаблицаЗапросовВедетсяУчетДенежныхДокументов()

	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПоступлениеДенежныхДокументов";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПоступлениеДенежныхДокументов", Ложь, Ложь);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ВыдачаДенежныхДокументов";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ВыдачаДенежныхДокументов", Ложь, Ложь);
	
	Возврат ТаблицаЗапросов;
	
КонецФункции 

Функция ДокументыПрепятствующиеОтключениюВедетсяУчетДенежныхДокументов()
	
	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();
	
	ТаблицаЗапросов = ТаблицаЗапросовВедетсяУчетДенежныхДокументов();
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.ИмяДокумента = СтрокаТЗ.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы.Найти(СтрокаТЗ.ИмяДокумента);
		СтрокаТаблицыДокументов.СинонимДокумента = МетаданныеДокумента.Синоним;
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	
	// Отсортируем по алфавиту
	ТаблицаРезультатовЗапросов.Сортировать("СинонимДокумента");
	
	Возврат ТаблицаРезультатовЗапросов;
	
КонецФункции 

#КонецОбласти

#Область ВедетсяРозничнаяТорговля

Функция ТаблицаЗапросовВедетсяРозничнаяТорговля()

	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидыОпераций");

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ОтчетОРозничныхПродажах";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ОтчетОРозничныхПродажах",,Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "РозничнаяПродажа";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("РозничнаяПродажа",,Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПриходныйКассовыйОрдер";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользоватьДокументыРозничнойТорговли("ПриходныйКассовыйОрдер", Ложь);
	НоваяСтрока.ВидыОпераций = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		Перечисления.ВидыОперацийПКО.РозничнаяВыручка);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПоступлениеНаРасчетныйСчет";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользоватьДокументыРозничнойТорговли("ПоступлениеНаРасчетныйСчет", Ложь);
	НоваяСтрока.ВидыОпераций = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПоступленияОтПродажПоПлатежнымКартамИБанковскимКредитам);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ОплатаПлатежнойКартой";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаЕстьОплатаКартойРозницаСЗакрывающимиДокументами("ОплатаПлатежнойКартой", Ложь);
	НоваяСтрока.ВидыОпераций = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		Перечисления.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка);
	
	Возврат ТаблицаЗапросов;
	
КонецФункции

Функция ДокументыПрепятствующиеОтключениюВедетсяРозничнаяТорговля()

	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();

	ТаблицаЗапросов = ТаблицаЗапросовВедетсяРозничнаяТорговля();

	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		Запрос.УстановитьПараметр("ВидыОпераций", СтрокаТЗ.ВидыОпераций);
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.ИмяДокумента = СтрокаТЗ.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы.Найти(СтрокаТЗ.ИмяДокумента);
		СтрокаТаблицыДокументов.СинонимДокумента = МетаданныеДокумента.Синоним;
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	
	// Отсортируем по алфавиту
	ТаблицаРезультатовЗапросов.Сортировать("СинонимДокумента");
	
	Возврат ТаблицаРезультатовЗапросов;
	
КонецФункции 

Функция ТекстЗапросаЕстьОплатаКартойРозницаСЗакрывающимиДокументами(ИмяДокумента, ТолькоПроверка = Истина)
	
	ТекстЗапроса =
	"ВЫБРАТЬ %1
	|	ОплатаПлатежнойКартойРозница.Ссылка КАК Ссылка,
	|	ОплатаПлатежнойКартойРозница.Дата КАК Дата,
	|	ОплатаПлатежнойКартойРозница.Представление КАК Представление
	|ИЗ
	|	Документ.%2 КАК ОплатаПлатежнойКартойРозница
	|ГДЕ
	|	НЕ ОплатаПлатежнойКартойРозница.ПометкаУдаления
	|	И НЕ ОплатаПлатежнойКартойРозница.БезЗакрывающихДокументов
	|	И ОплатаПлатежнойКартойРозница.ВидОперации В(&ВидыОпераций)";
	
	УсловиеВыбора = ?(ТолькоПроверка, "ПЕРВЫЕ 1", "РАЗЛИЧНЫЕ");
	
	Возврат СтрШаблон(ТекстЗапроса, УсловиеВыбора, ИмяДокумента);
	
КонецФункции

#КонецОбласти

#Область ВедетсяПроизводственнаяДеятельность

Функция ТаблицаЗапросовВедетсяПроизводственнаяДеятельность()

	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидыОпераций");

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "АктОбОказанииПроизводственныхУслуг";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("АктОбОказанииПроизводственныхУслуг",,Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ОтчетПроизводстваЗаСмену";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ОтчетПроизводстваЗаСмену",,Ложь);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ИнвентаризацияНЗП";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ИнвентаризацияНЗП",,Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПоступлениеИзПереработки";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПоступлениеИзПереработки",,Ложь);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПередачаТоваров";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПередачаТоваров", Истина, Ложь);
	НоваяСтрока.ВидыОпераций = Новый Массив;
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыОперацийПередачаТоваров.ВПереработку);
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПоступлениеТоваровУслуг";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПоступлениеТоваровУслуг", Истина, Ложь);
	НоваяСтрока.ВидыОпераций = Новый Массив;
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку);
	
	Возврат ТаблицаЗапросов;
	
КонецФункции

Функция ДокументыПрепятствующиеОтключениюВедетсяПроизводственнаяДеятельность()

	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();

	ТаблицаЗапросов = ТаблицаЗапросовВедетсяПроизводственнаяДеятельность();

	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		Запрос.УстановитьПараметр("ВидыОпераций", СтрокаТЗ.ВидыОпераций);
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.ИмяДокумента = СтрокаТЗ.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы.Найти(СтрокаТЗ.ИмяДокумента);
		СтрокаТаблицыДокументов.СинонимДокумента = МетаданныеДокумента.Синоним;
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	
	// Отсортируем по алфавиту
	ТаблицаРезультатовЗапросов.Сортировать("СинонимДокумента");
	
	Возврат ТаблицаРезультатовЗапросов;
	
КонецФункции 

#КонецОбласти

#Область ВедетсяУчетСпецодеждыСпецоснастки

Функция ТаблицаЗапросовВедетсяУчетСпецодеждыСпецоснастки()

	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидыОпераций");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ВыработкаМатериалов";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ВыработкаМатериалов",, Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "СписаниеМатериаловИзЭксплуатации";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("СписаниеМатериаловИзЭксплуатации",,Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ВозвратМатериаловИзЭксплуатации";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ВозвратМатериаловИзЭксплуатации", ,Ложь);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПередачаМатериаловВЭксплуатацию";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПередачаМатериаловВЭксплуатацию",,Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "РегламентнаяОперация";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("РегламентнаяОперация", Истина, Ложь);
	НоваяСтрока.ВидыОпераций = Новый Массив;
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыРегламентныхОпераций.ПогашениеСтоимостиСпецодеждыИспецоснасткиВэксплуатации);

	
	Возврат ТаблицаЗапросов;
	
КонецФункции 

Функция ДокументыПрепятствующиеОтключениюВедетсяУчетСпецодеждыСпецоснастки()

	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();

	ТаблицаЗапросов = ТаблицаЗапросовВедетсяУчетСпецодеждыСпецоснастки();

	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		Запрос.УстановитьПараметр("ВидыОпераций", СтрокаТЗ.ВидыОпераций);
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.ИмяДокумента = СтрокаТЗ.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы.Найти(СтрокаТЗ.ИмяДокумента);
		СтрокаТаблицыДокументов.СинонимДокумента = МетаданныеДокумента.Синоним;
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	
	// Отсортируем по алфавиту
	ТаблицаРезультатовЗапросов.Сортировать("СинонимДокумента");
	
	Возврат ТаблицаРезультатовЗапросов;
	
КонецФункции 

#КонецОбласти

#Область ИспользуетсяОплатаПоПлатежнымКартам

Функция ТекстЗапросаЕстьОплатаКартойВДокументе(ИмяДокумента, ТолькоПроверка = Истина)
	
	Если ТолькоПроверка Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОплатаВОтчетеОРозничныхПродажах.Ссылка
		|ИЗ
		|	Документ.%1.Оплата КАК ОплатаВОтчетеОРозничныхПродажах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыОплатОрганизаций КАК ВидыОплатОрганизаций
		|		ПО ОплатаВОтчетеОРозничныхПродажах.ВидОплаты = ВидыОплатОрганизаций.Ссылка
		|ГДЕ
		|	ОплатаВОтчетеОРозничныхПродажах.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И ВидыОплатОрганизаций.ТипОплаты В (ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПлатежнаяКарта), ЗНАЧЕНИЕ(Перечисление.ТипыОплат.БанковскийКредит))";
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОплатаВОтчетеОРозничныхПродажах.Ссылка КАК Ссылка,
		|	ОплатаВОтчетеОРозничныхПродажах.Ссылка.Дата КАК Дата,
		|	ПРЕДСТАВЛЕНИЕ(ОплатаВОтчетеОРозничныхПродажах.Ссылка) КАК Представление
		|ИЗ
		|	Документ.%1.Оплата КАК ОплатаВОтчетеОРозничныхПродажах
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыОплатОрганизаций КАК ВидыОплатОрганизаций
		|		ПО ОплатаВОтчетеОРозничныхПродажах.ВидОплаты = ВидыОплатОрганизаций.Ссылка
		|ГДЕ
		|	ОплатаВОтчетеОРозничныхПродажах.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И ВидыОплатОрганизаций.ТипОплаты В (ЗНАЧЕНИЕ(Перечисление.ТипыОплат.ПлатежнаяКарта), ЗНАЧЕНИЕ(Перечисление.ТипыОплат.БанковскийКредит))
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Ссылка";
		
	КонецЕсли;
	
	Возврат СтрШаблон(ТекстЗапроса, ИмяДокумента);
	
КонецФункции

Функция ТаблицаЗапросовИспользуетсяОплатаПоПлатежнымКартам()

	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ОплатаПлатежнойКартой";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ОплатаПлатежнойКартой",, Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ОтчетОРозничныхПродажах";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаЕстьОплатаКартойВДокументе("ОтчетОРозничныхПродажах", Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "РозничнаяПродажа";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаЕстьОплатаКартойВДокументе("РозничнаяПродажа", Ложь);
	
	Возврат ТаблицаЗапросов;
	
КонецФункции 

Функция ДокументыПрепятствующиеОтключениюИспользуетсяОплатаПоПлатежнымКартам()

	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();

	ТаблицаЗапросов = ТаблицаЗапросовИспользуетсяОплатаПоПлатежнымКартам();

	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.ИмяДокумента = СтрокаТЗ.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы.Найти(СтрокаТЗ.ИмяДокумента);
		СтрокаТаблицыДокументов.СинонимДокумента = МетаданныеДокумента.Синоним;
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	
	// Отсортируем по алфавиту
	ТаблицаРезультатовЗапросов.Сортировать("СинонимДокумента");
	
	Возврат ТаблицаРезультатовЗапросов;
	
КонецФункции

Функция ТаблицаЗапросовИспользуютсяКорректировочныеДокументы()

	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "КорректировкаПоступления";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("КорректировкаПоступления",, Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "КорректировкаРеализации";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("КорректировкаРеализации",, Ложь);
	
	Возврат ТаблицаЗапросов;

КонецФункции

Функция ДокументыПрепятствующиеОтключениюИспользуютсяКорректировочныеДокументы()

	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();

	ТаблицаЗапросов = ТаблицаЗапросовИспользуютсяКорректировочныеДокументы();

	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.ИмяДокумента = СтрокаТЗ.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы.Найти(СтрокаТЗ.ИмяДокумента);
		СтрокаТаблицыДокументов.СинонимДокумента = МетаданныеДокумента.Синоним;
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	
	// Отсортируем по алфавиту
	ТаблицаРезультатовЗапросов.Сортировать("СинонимДокумента");
	
	Возврат ТаблицаРезультатовЗапросов;

КонецФункции

#КонецОбласти

#Область ВестиУчетПоДоговорам

Функция РезультатыЗапросовВестиУчетПоДоговорам(ТолькоПроверка = Истина)
	
	ЗапросВестиУчетПоДоговорам = Новый Запрос;
	ЗапросВестиУчетПоДоговорам.Текст = ТекстЗапросаВестиУчетПоДоговорам();
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ЗапросВестиУчетПоДоговорам.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
	
	ЗапросИспользуютсяДоговораКомиссии = Новый Запрос;
	ЗапросИспользуютсяДоговораКомиссии.Текст = ТекстЗапросаВедетсяДеятельностьПоДоговорамКомиссии();
	ИзменитьДляПроверкиТекстЗапроса(ЗапросИспользуютсяДоговораКомиссии.Текст, ТолькоПроверка);
	МассивВидовДоговоровКомиссии = Новый Массив;
	МассивВидовДоговоровКомиссии.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	МассивВидовДоговоровКомиссии.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионеромНаЗакупку);
	МассивВидовДоговоровКомиссии.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	МассивВидовДоговоровКомиссии.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку);
	ЗапросИспользуютсяДоговораКомиссии.УстановитьПараметр("ВидыДоговоров", МассивВидовДоговоровКомиссии);
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗапросыВестиУчетПоДоговорам = Новый Структура;
	ЗапросыВестиУчетПоДоговорам.Вставить("УчетПоДоговорам",  ЗапросВестиУчетПоДоговорам.Выполнить());
	ЗапросыВестиУчетПоДоговорам.Вставить("ДоговораКомиссии", ЗапросИспользуютсяДоговораКомиссии.Выполнить());
	
	Возврат ЗапросыВестиУчетПоДоговорам;

КонецФункции

Функция ОтказСнятьВестиУчетПоДоговорам()
	
	РезультатыЗапросовВестиУчетПоДоговорам = РезультатыЗапросовВестиУчетПоДоговорам();
	ОтказСнять = (НЕ РезультатыЗапросовВестиУчетПоДоговорам.УчетПоДоговорам.Пустой() ИЛИ НЕ РезультатыЗапросовВестиУчетПоДоговорам.ДоговораКомиссии.Пустой());
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ТекстЗапросаВестиУчетПоДоговорам()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОсновныеДоговорыКонтрагента.Договор,
	|	ОсновныеДоговорыКонтрагента.Контрагент,
	|	ОсновныеДоговорыКонтрагента.Организация
	|ПОМЕСТИТЬ ОсновныеДоговора
	|ИЗ
	|	РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
	|	ХозрасчетныйОстатки.Субконто1 КАК СсылкаКонтрагент,
	|	ХозрасчетныйОстатки.Субконто2 КАК Договор,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.СуммаОстаток < 0
	|			ТОГДА -ХозрасчетныйОстатки.СуммаОстаток
	|		ИНАЧЕ ХозрасчетныйОстатки.СуммаОстаток
	|	КОНЕЦ КАК Остаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			,
	|			,
	|			&ВидыСубконто,
	|			НЕ Субконто2 В
	|					(ВЫБРАТЬ
	|						ОсновныеДоговора.Договор
	|					ИЗ
	|						ОсновныеДоговора)) КАК ХозрасчетныйОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Контрагент";
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ИспользуетсяГособоронзаказ

Функция ОтказСнятьИспользуетсяГособоронзаказ()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаИспользуетсяСправочник("ГосКонтракты");
	
	УстановитьПривилегированныйРежим(Истина);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ОтказСнять = НЕ РезультатЗапроса.Пустой();
	
	Возврат ОтказСнять;
	
КонецФункции

#КонецОбласти

#Область ВедетсяУчетСдачиИмуществаВАренду

Функция ОтказСнятьВедетсяУчетСдачиИмуществаВАренду()
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПередачаОСВАренду");

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ВозвратОСОтАрендатора");
	
	Запрос = Новый Запрос;

	УстановитьПривилегированныйРежим(Истина);

	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ОтказСнять = Ложь;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ОтказСнять = Истина;
				
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ДокументыПрепятствующиеОтключениюСдачиИмуществаВАренду()
	
	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();
	
	ТаблицаЗапросов = ТаблицаЗапросовВедетсяУчетСдачиИмуществаВАренду();
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.ИмяДокумента = СтрокаТЗ.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы.Найти(СтрокаТЗ.ИмяДокумента);
		СтрокаТаблицыДокументов.СинонимДокумента = МетаданныеДокумента.Синоним;
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	
	// Отсортируем по алфавиту
	ТаблицаРезультатовЗапросов.Сортировать("СинонимДокумента");
	
	Возврат ТаблицаРезультатовЗапросов;
	
КонецФункции 

Функция ТаблицаЗапросовВедетсяУчетСдачиИмуществаВАренду()

	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПередачаОСВАренду";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПередачаОСВАренду", Ложь, Ложь);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ВозвратОСОтАрендатора";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ВозвратОСОтАрендатора", Ложь, Ложь);
	
	Возврат ТаблицаЗапросов;
	
КонецФункции 

#КонецОбласти

#Область ВедетсяУчетЛизинговогоИмущества

Функция ОтказСнятьВедетсяУчетЛизинговогоИмущества()
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПоступлениеВЛизинг");

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ВыкупПредметовЛизинга");
	
	Запрос = Новый Запрос;

	УстановитьПривилегированныйРежим(Истина);

	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ОтказСнять = Ложь;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ОтказСнять = Истина;
				
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ДокументыПрепятствующиеОтключениюУчетаЛизинговогоИмущества()
	
	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();
	
	ТаблицаЗапросов = ТаблицаЗапросовВедетсяУчетЛизинговогоИмущества();
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.ИмяДокумента = СтрокаТЗ.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы.Найти(СтрокаТЗ.ИмяДокумента);
		СтрокаТаблицыДокументов.СинонимДокумента = МетаданныеДокумента.Синоним;
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	
	// Отсортируем по алфавиту
	ТаблицаРезультатовЗапросов.Сортировать("СинонимДокумента");
	
	Возврат ТаблицаРезультатовЗапросов;
	
КонецФункции 

Функция ТаблицаЗапросовВедетсяУчетЛизинговогоИмущества()

	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПоступлениеВЛизинг";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПоступлениеВЛизинг", Ложь, Ложь);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ВыкупПредметовЛизинга";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ВыкупПредметовЛизинга", Ложь, Ложь);
	
	Возврат ТаблицаЗапросов;
	
КонецФункции 

#КонецОбласти

#Область ИспользоватьСтатьиДвиженияДенежныхСредств

Функция ТекстЗапросаИспользоватьСтатьиДвиженияДенежныхСредств(ТолькоПроверка = Истина)
	
	Если ТолькоПроверка Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Субконто.Регистратор КАК Ссылка
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Субконто КАК Субконто
		|ГДЕ
		|	Субконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств)
		|	И Субконто.Значение <> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)";
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Субконто.Период КАК Дата,
		|	Субконто.Регистратор КАК Ссылка
		|ПОМЕСТИТЬ ДокументыДДС
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Субконто КАК Субконто
		|ГДЕ
		|	Субконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиДвиженияДенежныхСредств)
		|	И Субконто.Значение <> ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДокументыДДС.Дата КАК Дата,
		|	ДокументыДДС.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ДокументыДДС.Ссылка) КАК Представление
		|ИЗ
		|	ДокументыДДС КАК ДокументыДДС
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Ссылка";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ОтказСнятьИспользоватьСтатьиДвиженияДенежныхСредств()
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользоватьСтатьиДвиженияДенежныхСредств();

	Запрос = Новый Запрос;

	УстановитьПривилегированныйРежим(Истина);

	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ОтказСнять = Ложь;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ОтказСнять = Истина;
				
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ТаблицаЗапросовИспользоватьСтатьиДвиженияДенежныхСредств()

	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользоватьСтатьиДвиженияДенежныхСредств(Ложь);

	Возврат ТаблицаЗапросов;
	
КонецФункции 

Функция ДокументыПрепятствующиеОтключениюИспользоватьСтатьиДвиженияДенежныхСредств()
	
	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();
	
	ТаблицаЗапросов = ТаблицаЗапросовИспользоватьСтатьиДвиженияДенежныхСредств();
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	
	Возврат ТаблицаРезультатовЗапросов;
	
КонецФункции 

Процедура ДействияПослеИзмененияИспользоватьСтатьиДвиженияДенежныхСредств(НовоеЗначение)
	
	НачатьТранзакцию();
	
	// Изменим состав субконто на счетах учета денежных средств.
	ПараметрыУчета = ОбщегоНазначенияБП.ОпределитьПараметрыУчета();
	ПараметрыУчета.ВестиУчетПоСтатьямДДС = НовоеЗначение;
	ОбщегоНазначенияБП.ПрименитьПараметрыУчета(ПараметрыУчета, Истина, Ложь);
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

#КонецОбласти

#Область ИспользоватьДокументыРеализации

Функция ТекстЗапросаИспользоватьДокументыПоступленияРеализации(ИмяДокумента, ТолькоПроверка = Истина)
	
	Если ТолькоПроверка Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Док.Ссылка КАК Ссылка
		|ИЗ
		|	Документ." + ИмяДокумента + " КАК Док
		|ГДЕ
		|	НЕ Док.ПометкаУдаления
		|	И Док.ВидОперации = &ВидОперации
		|	И НЕ Док.БезЗакрывающихДокументов";
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Док.Ссылка КАК Ссылка,
		|	Док.Дата КАК Дата,
		|	Док.Ссылка КАК Представление
		|ИЗ
		|	Документ." + ИмяДокумента + " КАК Док
		|ГДЕ
		|	НЕ Док.ПометкаУдаления
		|	И Док.ВидОперации = &ВидОперации
		|	И НЕ Док.БезЗакрывающихДокументов
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Ссылка";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ТекстЗапросаИспользоватьДокументыПоступленияРеализацииНалогообложение(ТолькоПроверка = Истина)
	
	Если ТолькоПроверка Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Настройки.СистемаНалогообложения КАК СистемаНалогообложения
		|ИЗ
		|	РегистрСведений.НастройкиСистемыНалогообложения КАК Настройки
		|ГДЕ
		|	НЕ Настройки.ПрименяетсяУСНДоходы
		|	И НЕ Настройки.ПрименяетсяОсобыйПорядокНалогообложения
		|	И НЕ Настройки.ПрименяетсяНалогНаПрофессиональныйДоход";
	Иначе
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Настройки.Период КАК Период,
		|	Настройки.СистемаНалогообложения КАК СистемаНалогообложения,
		|	Настройки.ПрименяетсяУСН КАК ПрименяетсяУСН,
		|	Настройки.ПлательщикНалогаНаПрибыль КАК ПлательщикНалогаНаПрибыль,
		|	Настройки.ПлательщикНДФЛ КАК ПлательщикНДФЛ,
		|	Настройки.ПлательщикЕНВД КАК ПлательщикЕНВД,
		|	Настройки.ПрименяетсяУСНПатент КАК ПрименяетсяУСНПатент,
		|	Настройки.ПрименяетсяОсобыйПорядокНалогообложения КАК ПрименяетсяОсобыйПорядокНалогообложения,
		|	Настройки.ПрименяетсяУСНДоходы КАК ПрименяетсяУСНДоходы,
		|	Настройки.ПрименяетсяУСНДоходыМинусРасходы КАК ПрименяетсяУСНДоходыМинусРасходы,
		|	Настройки.ПлательщикНДС КАК ПлательщикНДС,
		|	Настройки.ПлательщикТорговогоСбора КАК ПлательщикТорговогоСбора
		|ИЗ
		|	РегистрСведений.НастройкиСистемыНалогообложения КАК Настройки
		|ГДЕ
		|	НЕ Настройки.ПрименяетсяУСНДоходы
		|	И НЕ Настройки.ПрименяетсяОсобыйПорядокНалогообложения
		|	И НЕ Настройки.ПрименяетсяНалогНаПрофессиональныйДоход
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция НалогообложениеПрепятствующееОтключениюИспользоватьДокументыПоступленияРеализации()
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаИспользоватьДокументыПоступленияРеализацииНалогообложение(Ложь);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат РезультатЗапроса;
	
КонецФункции 

Функция ОтказСнятьИспользоватьДокументыРеализации()
	
	Если Не ПростойИнтерфейсФункциональности() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидОперации");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользоватьДокументыПоступленияРеализации("ПоступлениеНаРасчетныйСчет", Истина);
	НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя;
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользоватьДокументыПоступленияРеализации("ПриходныйКассовыйОрдер", Истина);
	НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользоватьДокументыПоступленияРеализации("СписаниеСРасчетногоСчета", Истина);
	НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю;
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользоватьДокументыПоступленияРеализации("РасходныйКассовыйОрдер", Истина);
	НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю;
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользоватьДокументыПоступленияРеализации("ОплатаПлатежнойКартой", Истина);
	НоваяСтрока.ВидОперации  = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя;
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользоватьДокументыПоступленияРеализации("ОплатаПлатежнойКартой", Истина);
	НоваяСтрока.ВидОперации  = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ВозвратПокупателю;
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("РеализацияТоваровУслуг");

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("НачислениеПеней");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ВозвратТоваровОтПокупателя");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("СчетНаОплатуПокупателю");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользоватьДокументыПоступленияРеализацииНалогообложение(Истина);
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		Если ЗначениеЗаполнено(СтрокаТЗ.ВидОперации) Тогда
			Запрос.УстановитьПараметр("ВидОперации", СтрокаТЗ.ВидОперации);
		КонецЕсли;
		РезультатЗапроса = Запрос.Выполнить();
		
		ОтказСнять = Ложь;
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ОтказСнять = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ДокументыПрепятствующиеОтключениюИспользоватьДокументыРеализации()
	
	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();
	
	ТаблицаЗапросов = ТаблицаЗапросовИспользоватьДокументыРеализации();
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		Если ЗначениеЗаполнено(СтрокаТЗ.ВидОперации) Тогда
			Запрос.УстановитьПараметр("ВидОперации", СтрокаТЗ.ВидОперации);
		КонецЕсли;
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.ИмяДокумента = СтрокаТЗ.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы.Найти(СтрокаТЗ.ИмяДокумента);
		СтрокаТаблицыДокументов.СинонимДокумента = МетаданныеДокумента.Синоним;
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	
	// Отсортируем по алфавиту
	ТаблицаРезультатовЗапросов.Сортировать("СинонимДокумента");
	
	Возврат ТаблицаРезультатовЗапросов;
	
КонецФункции 

Функция ТаблицаЗапросовИспользоватьДокументыРеализации()

	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидОперации");

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПоступлениеНаРасчетныйСчет";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользоватьДокументыПоступленияРеализации("ПоступлениеНаРасчетныйСчет", Ложь);
	НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя;
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПриходныйКассовыйОрдер";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользоватьДокументыПоступленияРеализации("ПриходныйКассовыйОрдер", Ложь);
	НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "СписаниеСРасчетногоСчета";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользоватьДокументыПоступленияРеализации("СписаниеСРасчетногоСчета", Ложь);
	НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю;
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "РасходныйКассовыйОрдер";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользоватьДокументыПоступленияРеализации("РасходныйКассовыйОрдер", Ложь);
	НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю;
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ОплатаПлатежнойКартой";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользоватьДокументыПоступленияРеализации("ОплатаПлатежнойКартой", Ложь);
	НоваяСтрока.ВидОперации  = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя;
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ОплатаПлатежнойКартой";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользоватьДокументыПоступленияРеализации("ОплатаПлатежнойКартой", Ложь);
	НоваяСтрока.ВидОперации  = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ВозвратПокупателю;
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "РеализацияТоваровУслуг";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("РеализацияТоваровУслуг", Ложь, Ложь);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "НачислениеПеней";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("НачислениеПеней", Ложь, Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ВозвратТоваровОтПокупателя";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ВозвратТоваровОтПокупателя", Ложь, Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "СчетНаОплатуПокупателю";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("СчетНаОплатуПокупателю", Ложь, Ложь);
	
	Возврат ТаблицаЗапросов;
	
КонецФункции 

#КонецОбласти

#Область ИспользоватьДокументыПоступления

Функция ОтказСнятьИспользоватьДокументыПоступления()
	
	Если Не ПростойИнтерфейсФункциональности() Тогда
		Возврат Истина;
	КонецЕсли;
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидОперации");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользоватьДокументыПоступленияРеализации("СписаниеСРасчетногоСчета", Истина);
	НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользоватьДокументыПоступленияРеализации("РасходныйКассовыйОрдер", Истина);
	НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику;
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользоватьДокументыПоступленияРеализации("ПоступлениеНаРасчетныйСчет", Истина);
	НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика;
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользоватьДокументыПоступленияРеализации("ПриходныйКассовыйОрдер", Истина);
	НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика;
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПоступлениеТоваровУслуг");

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ИнвентаризацияТоваровНаСкладе");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ВозвратТоваровПоставщику");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ОприходованиеТоваров");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПеремещениеТоваров");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПоступлениеДопРасходов");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("СписаниеТоваров");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("СчетНаОплатуПоставщика");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ТребованиеНакладная");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользоватьДокументыПоступленияРеализацииНалогообложение(Истина);
	
	Запрос = Новый Запрос;

	УстановитьПривилегированныйРежим(Истина);
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		Если ЗначениеЗаполнено(СтрокаТЗ.ВидОперации) Тогда
			Запрос.УстановитьПараметр("ВидОперации", СтрокаТЗ.ВидОперации);
		КонецЕсли;
		
		РезультатЗапроса = Запрос.Выполнить();
		ОтказСнять = Ложь;
		Если НЕ РезультатЗапроса.Пустой() Тогда
			ОтказСнять = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ДокументыПрепятствующиеОтключениюИспользоватьДокументыПоступления()
	
	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();
	
	ТаблицаЗапросов = ТаблицаЗапросовИспользоватьДокументыПоступления();
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		Если ЗначениеЗаполнено(СтрокаТЗ.ВидОперации) Тогда
			Запрос.УстановитьПараметр("ВидОперации", СтрокаТЗ.ВидОперации);
		КонецЕсли;
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.ИмяДокумента = СтрокаТЗ.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы.Найти(СтрокаТЗ.ИмяДокумента);
		СтрокаТаблицыДокументов.СинонимДокумента = МетаданныеДокумента.Синоним;
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
	
	// Отсортируем по алфавиту
	ТаблицаРезультатовЗапросов.Сортировать("СинонимДокумента");
	
	Возврат ТаблицаРезультатовЗапросов;
	
КонецФункции 

Функция ТаблицаЗапросовИспользоватьДокументыПоступления()

	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидОперации");

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "СписаниеСРасчетногоСчета";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользоватьДокументыПоступленияРеализации("СписаниеСРасчетногоСчета", Ложь);
	НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ОплатаПоставщику;
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "РасходныйКассовыйОрдер";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользоватьДокументыПоступленияРеализации("РасходныйКассовыйОрдер", Ложь);
	НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику;
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПоступлениеНаРасчетныйСчет";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользоватьДокументыПоступленияРеализации("ПоступлениеНаРасчетныйСчет", Ложь);
	НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ВозвратОтПоставщика;
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПриходныйКассовыйОрдер";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользоватьДокументыПоступленияРеализации("ПриходныйКассовыйОрдер", Ложь);
	НоваяСтрока.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратОтПоставщика;
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПоступлениеТоваровУслуг";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПоступлениеТоваровУслуг", Ложь, Ложь);

	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "РеализацияОтгруженныхТоваров";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ИнвентаризацияТоваровНаСкладе", Ложь, Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ВозвратТоваровПоставщику";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ВозвратТоваровПоставщику", Ложь, Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ОприходованиеТоваров";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ОприходованиеТоваров", Ложь, Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПеремещениеТоваров";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПеремещениеТоваров", Ложь, Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПоступлениеДопРасходов";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПоступлениеДопРасходов", Ложь, Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "СписаниеТоваров";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("СписаниеТоваров", Ложь, Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "СчетНаОплатуПоставщика";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("СчетНаОплатуПоставщика", Ложь, Ложь);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ТребованиеНакладная";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ТребованиеНакладная", Ложь, Ложь);
	
	Возврат ТаблицаЗапросов;
	
КонецФункции 

#КонецОбласти

#Область ИспользуетсяИнкассация

Функция ТаблицаЗапросовИспользоватьИнкассацию()
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидыОпераций");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "РасходныйКассовыйОрдер";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("РасходныйКассовыйОрдер", Истина, Ложь);
	НоваяСтрока.ВидыОпераций = Новый Массив;
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыОперацийРКО.Инкассация);
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ПоступлениеНаРасчетныйСчет";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ПоступлениеНаРасчетныйСчет", Истина, Ложь);
	НоваяСтрока.ВидыОпераций = Новый Массив;
	НоваяСтрока.ВидыОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация);
	
	Возврат ТаблицаЗапросов;
	
КонецФункции

Функция ДокументыПрепятствующиеОтключениюИспользоватьИнкассацию()
	
	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();
	
	ТаблицаЗапросов = ТаблицаЗапросовИспользоватьИнкассацию();
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		Запрос.УстановитьПараметр("ВидыОпераций", СтрокаТЗ.ВидыОпераций);
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.ИмяДокумента = СтрокаТЗ.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы.Найти(СтрокаТЗ.ИмяДокумента);
		СтрокаТаблицыДокументов.СинонимДокумента = МетаданныеДокумента.Синоним;
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	
	// Отсортируем по алфавиту
	ТаблицаРезультатовЗапросов.Сортировать("СинонимДокумента");
	
	Возврат ТаблицаРезультатовЗапросов;
	
КонецФункции

#КонецОбласти

#Область ИспользуетсяДоставкаАвтотранспортом

Функция ДокументыПрепятствующиеОтключениюИспользуетсяДоставкаАвтотранспортом()

	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка КАК Ссылка,
	|	РеализацияТоваровУслуг.Дата КАК Дата,
	|	РеализацияТоваровУслуг.Ссылка КАК Представление
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	(РеализацияТоваровУслуг.Перевозчик <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ИЛИ РеализацияТоваровУслуг.МаркаАвтомобиля <> """"
	|			ИЛИ РеализацияТоваровУслуг.РегистрационныйЗнакАвтомобиля <> """"
	|			ИЛИ РеализацияТоваровУслуг.Водитель <> """"
	|			ИЛИ РеализацияТоваровУслуг.КраткоеНаименованиеГруза <> """"
	|			ИЛИ РеализацияТоваровУслуг.СопроводительныеДокументы <> """")
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка";
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
	СтрокаТаблицыДокументов.ИмяДокумента = Метаданные.Документы.РеализацияТоваровУслуг.Имя;
	СтрокаТаблицыДокументов.СинонимДокумента = Метаданные.Документы.РеализацияТоваровУслуг.Синоним;
	СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
	
	// Отсортируем по алфавиту
	ТаблицаРезультатовЗапросов.Сортировать("СинонимДокумента");
	
	Возврат ТаблицаРезультатовЗапросов;

КонецФункции

#КонецОбласти

#Область ВедетсяУчетТаможенныхДекларацийЭкспорт

Функция ТаблицаЗапросовВедетсяУчетДекларацийЭкспорт()
	
	ТаблицаЗапросов = Новый ТаблицаЗначений;
	ТаблицаЗапросов.Колонки.Добавить("ИмяДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ТекстЗапроса", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаЗапросов.Колонки.Добавить("ВидыОпераций");
	
	НоваяСтрока = ТаблицаЗапросов.Добавить();
	НоваяСтрока.ИмяДокумента = "ТаможеннаяДекларацияЭкспорт";
	НоваяСтрока.ТекстЗапроса = ТекстЗапросаИспользуетсяДокумент("ТаможеннаяДекларацияЭкспорт", Ложь, Ложь);
	
	Возврат ТаблицаЗапросов;
	
КонецФункции

Функция ДокументыПрепятствующиеОтключениюУчетаДекларацийЭкспорт()
	
	ТаблицаРезультатовЗапросов = ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции();
	
	ТаблицаЗапросов = ТаблицаЗапросовВедетсяУчетДекларацийЭкспорт();
	
	Запрос = Новый Запрос;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтрокаТЗ Из ТаблицаЗапросов Цикл
		
		Запрос.Текст = СтрокаТЗ.ТекстЗапроса;
		
		СтрокаТаблицыДокументов = ТаблицаРезультатовЗапросов.Добавить();
		СтрокаТаблицыДокументов.ИмяДокумента = СтрокаТЗ.ИмяДокумента;
		МетаданныеДокумента = Метаданные.Документы.Найти(СтрокаТЗ.ИмяДокумента);
		СтрокаТаблицыДокументов.СинонимДокумента = МетаданныеДокумента.Синоним;
		СтрокаТаблицыДокументов.РезультатЗапроса = Запрос.Выполнить();
		
	КонецЦикла;
	
	Возврат ТаблицаРезультатовЗапросов;
	
КонецФункции

#КонецОбласти

#Область ОбратноеНачислениеНДС

Функция РезультатЗапросаОбратноеНачислениеНДС(ТолькоПроверка = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	(ДоговорыКонтрагентов.УчетАгентскогоНДСПокупателем
	|			ИЛИ ДоговорыКонтрагентов.УчетАгентскогоНДС
	|				И ДоговорыКонтрагентов.ВидАгентскогоДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыАгентскихДоговоров.РеализацияТоваров))";
	
	ИзменитьДляПроверкиТекстЗапроса(Запрос.Текст, ТолькоПроверка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивДоговоров = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивДоговоров;
	
КонецФункции

Функция ОтказСнятьОбратноеНачислениеНДС()
	
	ОтказСнять = РезультатЗапросаОбратноеНачислениеНДС().Количество() > 0;
	
	Возврат ОтказСнять;
	
КонецФункции

#КонецОбласти

#Область ОбеспеченияОбязательствИПлатежей

Функция РезультатЗапросаОбеспеченияОбязательствИПлатежей(ТолькоПроверка = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.ВидОбеспеченияОбязательствИПлатежей <> ЗНАЧЕНИЕ(Перечисление.ВидыОбеспеченийОбязательствИПлатежей.ПустаяСсылка)";
	
	ИзменитьДляПроверкиТекстЗапроса(Запрос.Текст, ТолькоПроверка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивДоговоров = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат МассивДоговоров;
	
КонецФункции

Функция ОтказСнятьУчетОбеспеченийОбязательствИПлатежей()
	
	ОтказСнять = РезультатЗапросаОбеспеченияОбязательствИПлатежей().Количество() > 0;
	
	Возврат ОтказСнять;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СписокДокументовПрепятствующихОтключению

Процедура СформироватьСписокОбъектовПрепятствующихОтключениюУчетПоДоговорам(Параметры, АдресХранилища) Экспорт

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Результат", Новый ТабличныйДокумент);
			
	РезультатыЗапросовВестиУчетПоДоговорам = РезультатыЗапросовВестиУчетПоДоговорам(Ложь);
	
	УчетПоДоговорам = РезультатыЗапросовВестиУчетПоДоговорам.УчетПоДоговорам.Выбрать();
	
	Если УчетПоДоговорам.Количество() > 0 Тогда
		
		ПарамерыШапки = Новый Структура;
		
		ПарамерыШапки.Вставить("Заголовок",
			НСтр("ru = 'Остатки по договорам'"));
		ПарамерыШапки.Вставить("Пояснение",
			НСтр("ru = 'Для отключения учета по договорам перенесите задолженность на один договор 
			|и установите его ""Основным"" (по кнопке ""Использовать как основной"")'"));
		
		ЗаполнитьТабличныйДокументПоДаннымВыборки(
			СтруктураРезультата.Результат,
			"СтрокаОбъекты",
			УчетПоДоговорам,
			,
			"ШапкаОбъекты",
			ПарамерыШапки);
		
	КонецЕсли;
	
	ДоговораКомиссии = РезультатыЗапросовВестиУчетПоДоговорам.ДоговораКомиссии.Выбрать();
	
	Если ДоговораКомиссии.Количество() > 0 Тогда
		
		ПарамерыШапки = Новый Структура;
		
		ПарамерыШапки.Вставить("Заголовок", НСтр("ru = 'Договора комиссии'"));
		
		ЗаполнитьТабличныйДокументПоДаннымВыборки(
			СтруктураРезультата.Результат,
			"СтрокаКомиссия",
			ДоговораКомиссии,
			,
			"ШапкаКомиссия",
			ПарамерыШапки);
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресХранилища);
	
КонецПроцедуры

Процедура СформироватьСписокДокументовПрепятствующихОтключениюОпции(Параметры, АдресХранилища) Экспорт

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Результат", Новый ТабличныйДокумент);

	// Шапка своя для каждой опции.
	// Поэтому заполняем шапку табличного документа вне основной процедуры.
	// Далее см. ЗаполнитьТабличныйДокументПоДаннымВыборки()
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.СписокДокументов");
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		
	Если Параметры.Свойство("УправлениеЗачетомАвансовПогашениемЗадолженности") Тогда
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюУправлениеЗачетомАвансовПогашениемЗадолженности();
		ОбластьШапка.Параметры.Заголовок = НСтр("ru = 'Управление зачетом авансов и погашением задолженности'");
	ИначеЕсли Параметры.Свойство("ВедетсяУчетВозвратнойТары") Тогда
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюВозвратойТары();
		ОбластьШапка.Параметры.Заголовок = НСтр("ru = 'Возвратная тара'");
	ИначеЕсли Параметры.Свойство("ОтгрузкаБезПереходаПраваСобственности") Тогда
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюОтгрузкаБезПереходаПраваСобственности();
		ОбластьШапка.Параметры.Заголовок = НСтр("ru = 'Отгрузка без перехода права собственности'");
	ИначеЕсли Параметры.Свойство("ВедетсяРозничнаяТорговля") Тогда
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюВедетсяРозничнаяТорговля();
		ОбластьШапка.Параметры.Заголовок = НСтр("ru = 'Розничная торговля'");
	ИначеЕсли Параметры.Свойство("ВедетсяУчетСпецодеждыСпецоснастки") Тогда
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюВедетсяУчетСпецодеждыСпецоснастки();
		ОбластьШапка.Параметры.Заголовок = НСтр("ru = 'Спецодежда и спецоснастка'");
	ИначеЕсли Параметры.Свойство("ВедетсяУчетДенежныхДокументов") Тогда
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюВедетсяУчетДенежныхДокументов();
		ОбластьШапка.Параметры.Заголовок = НСтр("ru = 'Денежные документы'");
	ИначеЕсли Параметры.Свойство("ВедетсяПроизводственнаяДеятельность") Тогда
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюВедетсяПроизводственнаяДеятельность();
		ОбластьШапка.Параметры.Заголовок = НСтр("ru = 'Производство'");
	ИначеЕсли Параметры.Свойство("ИспользоватьОплатуПоПлатежнымКартам") Тогда
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюИспользуетсяОплатаПоПлатежнымКартам();
		ОбластьШапка.Параметры.Заголовок = НСтр("ru = 'Платежные карты'");
	ИначеЕсли Параметры.Свойство("ИспользоватьКорректировочныеДокументы") Тогда
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюИспользуютсяКорректировочныеДокументы();
		ОбластьШапка.Параметры.Заголовок = НСтр("ru = 'Исправительные и корректировочные документы'");
	ИначеЕсли Параметры.Свойство("ИспользоватьДоставкуАвтотранспортом") Тогда
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюИспользуетсяДоставкаАвтотранспортом();
		ОбластьШапка.Параметры.Заголовок = НСтр("ru = 'Доставка товаров автотранспортом'");
	ИначеЕсли Параметры.Свойство("ИспользоватьИнкассацию") Тогда
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюИспользоватьИнкассацию();
		ОбластьШапка.Параметры.Заголовок = НСтр("ru = 'Документы по инкассации'");
	ИначеЕсли Параметры.Свойство("ВедетсяУчетТаможенныхДекларацийЭкспорт") Тогда 
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюУчетаДекларацийЭкспорт();
		ОбластьШапка.Параметры.Заголовок = НСтр("ru = 'Таможенные декларации (экспорт)'");
	ИначеЕсли Параметры.Свойство("ВедетсяУчетСдачиИмуществаВАренду") Тогда 
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюСдачиИмуществаВАренду();
		ОбластьШапка.Параметры.Заголовок = НСтр("ru = 'Учет аренды'");
	ИначеЕсли Параметры.Свойство("ВедетсяУчетЛизинговогоИмущества") Тогда 
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюУчетаЛизинговогоИмущества();
		ОбластьШапка.Параметры.Заголовок = НСтр("ru = 'Учет лизингового имущества'");
	ИначеЕсли Параметры.Свойство("ИспользоватьСтатьиДвиженияДенежныхСредств") Тогда
		ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюИспользоватьСтатьиДвиженияДенежныхСредств();
		ОбластьШапка.Параметры.Заголовок = НСтр("ru = 'Статьи движения денег'");
	КонецЕсли;

	СтруктураРезультата.Результат.Вывести(ОбластьШапка);
	
	НомерПП = 0;
	
	Для Каждого СтрокаТаблицыДокументов Из ТаблицаРезультатовЗапросов Цикл
		
		Выборка = СтрокаТаблицыДокументов.РезультатЗапроса.Выбрать();
		
		Если Выборка.Количество() > 0 Тогда
			ЗаполнитьТабличныйДокументПоДаннымВыборки(
				СтруктураРезультата.Результат,
				"Строка",
				Выборка,
				НомерПП);
		КонецЕсли;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресХранилища);
	
КонецПроцедуры

Процедура СформироватьСписокНастроекПрепятствующихОтключениюОпции(Параметры, АдресХранилища) Экспорт

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Результат", Новый ТабличныйДокумент);

	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.СписокДокументов");
	
	Если Параметры.Свойство("ИспользоватьДокументыРеализации")
		ИЛИ Параметры.Свойство("ИспользоватьДокументыПоступления") Тогда
		
		Если Не ПростойИнтерфейсФункциональности() Тогда
			
			// Отдельно выведем настройки интерфейса, мешающие отключению опции.
			ОбластьШапкаИПояснение = Макет.ПолучитьОбласть("ШапкаТолькоЗаголовокИПояснение");
			ОбластьШапкаИПояснение.Параметры.Заголовок = НСтр("ru = 'Полный интерфейс'");
			ОбластьШапкаИПояснение.Параметры.Пояснение = НСтр("ru = 'Для отключения опции перейдите на простой интерфейс
				|в форме ""Интерфейс"" раздела ""Администрирование""'");
			
			СтруктураРезультата.Результат.Вывести(ОбластьШапкаИПояснение);
			
		КонецЕсли;
		
		РезультатЗапроса = НалогообложениеПрепятствующееОтключениюИспользоватьДокументыПоступленияРеализации();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			
			// Отдельно выведем настройки системы налогообложения, мешающие отключению ФО
			ОбластьШапкаНалогообложение = Макет.ПолучитьОбласть("ШапкаНалогообложение");
			ОбластьШапкаНалогообложение.Параметры.Заголовок = НСтр("ru = 'Система налогообложения'");
			
			СтруктураРезультата.Результат.Вывести(ОбластьШапкаНалогообложение);
			
			ОбластьСтрокаНалогообложение = Макет.ПолучитьОбласть("СтрокаНалогообложение");
			СтруктураДанных = НастройкиУчета.ОписаниеСтруктурыУчетнойПолитики();
			
			Пока Выборка.Следующий() Цикл
				
				ЗаполнитьЗначенияСвойств(СтруктураДанных, Выборка);
				ПредставлениеЗаписи = ОрганизацииФормыКлиентСервер.ПредставлениеСистемыНалогообложения(СтруктураДанных);
				ОбластьСтрокаНалогообложение.Параметры.Период = Формат(Выборка.Период, "ДЛФ=D");
				ОбластьСтрокаНалогообложение.Параметры.Представление = ПредставлениеЗаписи;
				
				СтруктураРезультата.Результат.Вывести(ОбластьСтрокаНалогообложение);
				
			КонецЦикла;
		
		КонецЕсли; 
		
		// Далее выводим список документов, мешающих отключению ФО 
		ПараметрыШапки = Новый Структура("Заголовок");
		
		Если Параметры.Свойство("ИспользоватьДокументыРеализации") Тогда
			ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюИспользоватьДокументыРеализации();
			ПараметрыШапки.Заголовок = НСтр("ru = 'Счета и документы расчетов с покупателями'");
		ИначеЕсли Параметры.Свойство("ИспользоватьДокументыПоступления") Тогда
			ТаблицаРезультатовЗапросов = ДокументыПрепятствующиеОтключениюИспользоватьДокументыПоступления();
			ПараметрыШапки.Заголовок = НСтр("ru = 'Счета и документы расчетов с поставщиками'");		
		КонецЕсли;
				
		НомерПП = 0;
		
		Для Каждого СтрокаТаблицыДокументов Из ТаблицаРезультатовЗапросов Цикл
			
			Выборка = СтрокаТаблицыДокументов.РезультатЗапроса.Выбрать();
			
			Если Выборка.Количество() > 0 Тогда
				ЗаполнитьТабличныйДокументПоДаннымВыборки(
					СтруктураРезультата.Результат,
					"Строка",
					Выборка,
					НомерПП,
					"Шапка",
					ПараметрыШапки);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресХранилища);
	
КонецПроцедуры

Процедура СформироватьСписокОбъектовПрепятствующихОтключениюУчетПоПодразделениям(Параметры, АдресХранилища) Экспорт

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Результат", Новый ТабличныйДокумент);
		
	РезультатыЗапросовИспользуютсяОбособленныеПодразделения = РезультатыЗапросовИспользуютсяОбособленныеПодразделения(Ложь);
	
	// Филиалы
	Выборка = РезультатыЗапросовИспользуютсяОбособленныеПодразделения[0].Выбрать();
	Если Выборка.Количество() > 0 Тогда
		
		ПараметрыШапки = Новый Структура;
		
		ПараметрыШапки.Вставить("Заголовок",
			НСтр("ru = 'Организации с видом ""Обособленное подразделение""'"));
		ПараметрыШапки.Вставить("Пояснение",
			НСтр("ru = 'Для отключения учета по подразделениям необходимо удалить организации 
				|с видом ""Обособленное подразделение'"));
			
		ЗаполнитьТабличныйДокументПоДаннымВыборки(
			СтруктураРезультата.Результат,
			"Строка",
			Выборка,
			,
			"ШапкаОбособленноеПодразделение",
			ПараметрыШапки);
			
	КонецЕсли;
	
	// Обособленные подразделения
	Выборка = РезультатыЗапросовИспользуютсяОбособленныеПодразделения[1].Выбрать();
	Если Выборка.Количество() > 0 Тогда
		
		ПараметрыШапки = Новый Структура;
		
		ПараметрыШапки.Вставить("Заголовок",
			НСтр("ru = 'Обособленные подразделения'"));
		ПараметрыШапки.Вставить("Пояснение",
			НСтр("ru = 'Для отключения учета по подразделениям снимите флажок ""Обособленное подразделение""'"));
			
		ЗаполнитьТабличныйДокументПоДаннымВыборки(
			СтруктураРезультата.Результат,
			"Строка",
			Выборка,
			,
			"ШапкаОбособленноеПодразделение",
			ПараметрыШапки);
			
	КонецЕсли;
	
	// Документы с заполненными подразделениями
	РезультатыЗапросовИспользуютсяПодразделенияВПроводках = РезультатыЗапросовИспользуютсяПодразделенияВПроводках(Ложь);
	Выборка = РезультатыЗапросовИспользуютсяПодразделенияВПроводках.Выбрать();
	Если Выборка.Количество() > 0 Тогда
		
		ПараметрыШапки = Новый Структура;
		
		ПараметрыШапки.Вставить("Заголовок",
			НСтр("ru = 'Документы с движениями по подразделениям'"));
		ПараметрыШапки.Вставить("Пояснение",
			НСтр("ru = 'Для отключения учета по подразделениям очистите ""Подразделение"" в движениях документов'"));
			
		ЗаполнитьТабличныйДокументПоДаннымВыборки(
			СтруктураРезультата.Результат,
			"Строка",
			Выборка,
			,
			"ШапкаСПояснением",
			ПараметрыШапки);
			
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресХранилища);
	
КонецПроцедуры

// Процедура заполняет табличный документ, состоящий из шапки и строк таблицы
//
// Параметры:
//  ТабличныйДокумент	 - ТабличныйДокумент - заполняемый табличный документ. 
//  ИмяОбластиСтроки	 - Строка - наименование области макета СписокДокументов для вывода строки таблицы.
//  Выборка				 - ВыборкаИзРезультатаЗапроса - выборка, по данным которой заполняются строки таблицы.
//  НомерСтроки			 - Число - начальное значение счетчика строк, который выводится в строках таблицы.
//  ИмяОбластиШапки		 - Строка - наименование области макета СписокДокументов для вывода шапки отчета.
//						   Если параметр не передан, то шапка отчета не выводится.
//  ПараметрыШапки		 - Структура - структура, из которой заполняются параметры области шапки.
//
Процедура ЗаполнитьТабличныйДокументПоДаннымВыборки(ТабличныйДокумент, ИмяОбластиСтроки, Выборка, НомерСтроки = 0, ИмяОбластиШапки = "", ПараметрыШапки = Неопределено) Экспорт 
		
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.СписокДокументов");
	
	// Выводим шапку
	Если ИмяОбластиШапки <> "" Тогда
		
		ОбластьШапка = Макет.ПолучитьОбласть(ИмяОбластиШапки);
		
		Если ТипЗнч(ПараметрыШапки) = Тип("Структура") Тогда
			ОбластьШапка.Параметры.Заполнить(ПараметрыШапки);
		КонецЕсли;	
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		
	КонецЕсли;	
		
	ОбластьСтрока = Макет.ПолучитьОбласть(ИмяОбластиСтроки);
	
	Пока Выборка.Следующий() Цикл
	
		НомерСтроки = НомерСтроки + 1;
	
		ОбластьСтрока.Параметры.Заполнить(Выборка);
		ОбластьСтрока.Параметры.НомерПП = НомерСтроки;
		
		ТабличныйДокумент.Вывести(ОбластьСтрока);
	
	КонецЦикла;	
	
КонецПроцедуры

Функция ПустаяТаблицаДокументовПрепятствующиеОтключениюОпции()

	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("ИмяДокумента",     ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаДокументов.Колонки.Добавить("СинонимДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ТаблицаДокументов.Колонки.Добавить("РезультатЗапроса");
	
	Возврат ТаблицаДокументов;

КонецФункции

Процедура СформироватьСписокОбъектовПрепятствующихОтключениюРасширенногоФункционала(Параметры, АдресХранилища) Экспорт

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Результат", Новый ТабличныйДокумент);
	
	Результаты = РезультатЗапросаРасширенныйФункционал(Ложь);
	
	// Учет расходов по элементам затрат.
	Выборка = Результаты.ЭлементыЗатрат.Выбрать();
	Заголовок = НСтр("ru = 'Учет расходов по элементам затрат'");
	Пояснение = НСтр("ru = 'Для отключения расширенного функционала в учетной политике организации снимите флажки 
		|""Учет расходов ведется по элементам затрат"" и ""Учет расходов ведется по статьям затрат""'");
	ЗаполнитьПечатнуюФормуПоУчетнойПолитике(Выборка, Заголовок, Пояснение, СтруктураРезультата);
	
	// Закрытие счета 29 "Обслуживающие производства и хозяйства"
	Выборка = Результаты.ОбслуживающиеПроизводства.Выбрать();
	Заголовок = НСтр("ru = 'Закрытие счета 29 ""Обслуживающие производства и хозяйства""'");
	Пояснение = НСтр("ru = 'Для отключения расширенного функционала в учетной политике организации снимите флажок 
		|""Закрытие счета 29 ""Обслуживающие производства и хозяйства""'");
	ЗаполнитьПечатнуюФормуПоУчетнойПолитике(Выборка, Заголовок, Пояснение, СтруктураРезультата);
	
	// Договоры (счета-фактуры экспедиторов).
	Выборка = Результаты.СчетаФактурыЭкспедиторов.Выбрать();
	Если Выборка.Количество() > 0 Тогда
		
		ПараметрыШапки = Новый Структура;
		
		ПараметрыШапки.Вставить("Заголовок",
			НСтр("ru = 'Счета-фактуры экспедиторов'"));
		ПараметрыШапки.Вставить("Пояснение",
			НСтр("ru = 'Для отключения расширенного функционала снимите в договорах флажок
				|""Счета-фактуры перевыставляются от имени организации""'"));
			
		ЗаполнитьТабличныйДокументПоДаннымВыборки(
			СтруктураРезультата.Результат,
			"Строка",
			Выборка,
			,
			"ШапкаДоговор",
			ПараметрыШапки);
			
	КонецЕсли;
	
	// Отчетность некредитных финансовых организаций
	Выборка = Результаты.НекредитныеФинансовыеОрганизации.Выбрать();
	Если Выборка.Количество() > 0 Тогда
		
		ПараметрыШапки = Новый Структура;
		
		ПараметрыШапки.Вставить("Заголовок",
			НСтр("ru = 'Отчетность некредитных финансовых организаций'"));
		ПараметрыШапки.Вставить("Пояснение",
			НСтр("ru = 'Для отключения расширенного функционала снимите в организациях флажок
				|""Организация является некредитной финансовой организацией""'"));
			
		ЗаполнитьТабличныйДокументПоДаннымВыборки(
			СтруктураРезультата.Результат,
			"Строка",
			Выборка,
			,
			"ШапкаОрганизация",
			ПараметрыШапки);
			
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресХранилища);
	
КонецПроцедуры

Процедура ЗаполнитьПечатнуюФормуПоУчетнойПолитике(Выборка, Заголовок, Пояснение, СтруктураРезультата)
	
	Если Выборка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	ПараметрыШапки = Новый Структура;
	
	ПараметрыШапки.Вставить("Заголовок", Заголовок);
	ПараметрыШапки.Вставить("Пояснение", Пояснение);
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.СписокДокументов");
	
	ОбластьШапка = Макет.ПолучитьОбласть("ШапкаУчетнаяПолитика");
	ОбластьШапка.Параметры.Заполнить(ПараметрыШапки);
	СтруктураРезультата.Результат.Вывести(ОбластьШапка);
	
	ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаУчетнаяПолитика");
	ПараметрыСтроки = Новый Структура;
	НомерПП = 0;
	Пока Выборка.Следующий() Цикл
		НомерПП = НомерПП + 1;
		ПараметрыСтроки.Вставить("НомерПП", НомерПП);
		ПараметрыСтроки.Вставить("Представление", Формат(Выборка.Период, "ДФ='MMMM yyyy'") + ", " + Выборка.Организация);
		ПараметрыСтроки.Вставить("КлючЗаписи",
		РегистрыСведений.УчетнаяПолитика.СоздатьКлючЗаписи(Новый Структура("Период, Организация", Выборка.Период, Выборка.Организация)));
		ОбластьСтрока.Параметры.Заполнить(ПараметрыСтроки);
		СтруктураРезультата.Результат.Вывести(ОбластьСтрока);
	КонецЦикла;
		
КонецПроцедуры

Процедура СформироватьСписокОбъектовПрепятствующихОтключениюВестиУчетПоОрганизациям(Параметры, АдресХранилища) Экспорт

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Результат", Новый ТабличныйДокумент);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.Представление КАК Представление
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.Предопределенный";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() > 0 Тогда
		
		ПараметрыШапки = Новый Структура;
		
		ПараметрыШапки.Вставить("Заголовок",
			НСтр("ru = 'Организации'"));
		ПараметрыШапки.Вставить("Пояснение",
			НСтр("ru = 'Для отключения учета по нескольким организациям необходимо, 
				|чтобы в информационной базе была только одна организация'"));
			
		ЗаполнитьТабличныйДокументПоДаннымВыборки(
			СтруктураРезультата.Результат,
			"Строка",
			Выборка,
			,
			"ШапкаОрганизация",
			ПараметрыШапки);
			
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресХранилища);
	
КонецПроцедуры

Процедура СформироватьСписокОбъектовПрепятствующихОтключениюВедетсяУчетЗарплатыКадров(Параметры, АдресХранилища) Экспорт

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Результат", Новый ТабличныйДокумент);
	
	Выборка = РезультатЗапросаЮридическиеЛица(Ложь).Выбрать();
	Если Выборка.Количество() > 0 Тогда
		
		ПарамерыШапки = Новый Структура;
		
		ПарамерыШапки.Вставить("Заголовок", НСтр("ru = 'Юридические лица'"));
		ПарамерыШапки.Вставить("Пояснение",
			НСтр("ru = 'Для отключения учета зарплаты и кадров удалите данные об организациях - юридических лицах'"));
			
		ЗаполнитьТабличныйДокументПоДаннымВыборки(
			СтруктураРезультата.Результат,
			"Строка",
			Выборка,
			,
			"ШапкаОрганизация",
			ПарамерыШапки);
		
	КонецЕсли;
	
	Выборка = РезультатЗапросаСотрудники(Ложь).Выбрать();	
	Если Выборка.Количество() > 0 Тогда
		
		ПарамерыШапки = Новый Структура;
		
		ПарамерыШапки.Вставить("Заголовок",
			НСтр("ru = 'Сотрудники'"));
		ПарамерыШапки.Вставить("Пояснение",
			НСтр("ru = 'Для отключения учета зарплаты и кадров удалите данные о сотрудниках'"));
		
		ЗаполнитьТабличныйДокументПоДаннымВыборки(
			СтруктураРезультата.Результат,
			"Строка",
			Выборка,
			,
			"ШапкаСотрудник",
			ПарамерыШапки);
		
	КонецЕсли;
	
	Выборка = РезультатЗапросаДокументыЗарплаты().Выбрать();	
	Если Выборка.Количество() > 0 Тогда
		
		ПарамерыШапки = Новый Структура;
		
		ПарамерыШапки.Вставить("Заголовок",
			НСтр("ru = 'Документы учета зарплаты'"));
		ПарамерыШапки.Вставить("Пояснение",
			НСтр("ru = 'Для отключения учета зарплаты удалите расчетные документы'"));
		
		ЗаполнитьТабличныйДокументПоДаннымВыборки(
			СтруктураРезультата.Результат,
			"Строка",
			Выборка,
			,
			"ШапкаСПояснением",
			ПарамерыШапки);
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресХранилища);
	
КонецПроцедуры

Процедура СформироватьСписокОбъектовПрепятствующихОтключениюИспользоватьКадровыйУчет(Параметры, АдресХранилища) Экспорт

	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("Результат", Новый ТабличныйДокумент);
	
	Выборка = РезультатЗапросаКадровыеДокументы(Ложь).Выбрать();	
	Если Выборка.Количество() > 0 Тогда
		
		ПарамерыШапки = Новый Структура;
		
		ПарамерыШапки.Вставить("Заголовок",
			НСтр("ru = 'Кадровые документы'"));
		ПарамерыШапки.Вставить("Пояснение",
			НСтр("ru = 'Для отключения кадрового учета удалите кадровые документы.
			|После отключения потребуется заполнить кадровые данные сотрудников.'"));
		
		ЗаполнитьТабличныйДокументПоДаннымВыборки(
			СтруктураРезультата.Результат,
			"Строка",
			Выборка,
			,
			"ШапкаСПояснением",
			ПарамерыШапки);
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(СтруктураРезультата, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикОбновленияИнформационнойБазыБП

Процедура УстановитьПолнуюФункциональность() Экспорт
	
	СписокФункциональности = СписокВсейФункциональности();
	
	ИзменитьСписокФункциональности(СписокФункциональности, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьКонстантуАлкогольнаяПродукция() Экспорт
	
	ВедетсяРозничнаяТорговля = Константы.ВедетсяРозничнаяТорговля.Получить();
	
	МенеджерКонстанты = Константы.ВедетсяУчетРозничнойПродажиАлкогольнойПродукцииПива.СоздатьМенеджерЗначения();
	МенеджерКонстанты.Значение = ВедетсяРозничнаяТорговля;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерКонстанты);
	
КонецПроцедуры

Процедура УстановитьКонстантуИспользоватьПланированиеПлатежейОтПокупателей() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерКонстанты = Константы.ИспользоватьПланированиеПлатежейОтПокупателей.СоздатьМенеджерЗначения();
	
	Если ОбщегоНазначенияБП.ЭтоВерсияСОсновнойФункциональностью() Тогда
		
		МенеджерКонстанты.Значение = Ложь;
		
	Иначе
		
		МенеджерКонстанты.Значение = Истина;
		
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерКонстанты);
	
КонецПроцедуры

Процедура ЗаполнитьКонстантуИнкассация() Экспорт
	
	ИнкассацияИспользуется = НЕ ОтказСнятьИспользоватьИнкассацию();
	ЭтоБазоваяВерсияКонфигурации = СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
	
	ИспользоватьИнкассацию = Константы.ИспользоватьИнкассацию.СоздатьМенеджерЗначения();
	ИспользоватьИнкассацию.Значение = ИнкассацияИспользуется ИЛИ НЕ ЭтоБазоваяВерсияКонфигурации;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ИспользоватьИнкассацию);
	
КонецПроцедуры

Процедура УстановитьКонстантуФакторинг() Экспорт
	
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФакторингИспользуется = ОтказСнятьОсуществляетсяДеятельностьПоОперациямФакторинга();
	ЭтоВерсияСОновнойФункциональностью = ОбщегоНазначенияБП.ЭтоВерсияСОсновнойФункциональностью();
	
	ИспользоватьФакторинг = Константы.ИспользоватьФакторинг.СоздатьМенеджерЗначения();
	ИспользоватьФакторинг.Значение = ФакторингИспользуется ИЛИ НЕ ЭтоВерсияСОновнойФункциональностью;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ИспользоватьФакторинг);
	
	Если ИспользоватьФакторинг.Значение Тогда
		ПриИзмененииФункциональнойОпцииИспользоватьФакторинг(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьКонстантуРасширенныйФункционал() Экспорт
	
	Если Не ОбщегоНазначения.РазделениеВключено() И ВариантыПриложений.ЭтоВерсияКОРП() Тогда
		Константы.РасширенныйФункционал.Установить(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьКонстантуВедетсяУчетУслугИностранныхИнтернетКомпаний() Экспорт
	
	ЭтоВерсияСОновнойФункциональностью = ОбщегоНазначенияБП.ЭтоВерсияСОсновнойФункциональностью();
	Если НЕ ЭтоВерсияСОновнойФункциональностью Тогда
		МенеджерКонстанты = Константы.ВедетсяУчетУслугИностранныхИнтернетКомпаний.СоздатьМенеджерЗначения();
		МенеджерКонстанты.Значение = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерКонстанты);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.УчетАгентскогоНДС
	|	И ДоговорыКонтрагентов.ВидАгентскогоДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыАгентскихДоговоров.НерезидентЭлектронныеУслуги)";
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда 
		МенеджерКонстанты = Константы.ВедетсяУчетУслугИностранныхИнтернетКомпаний.СоздатьМенеджерЗначения();
		МенеджерКонстанты.Значение = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерКонстанты);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ВернутьМассивИменКонстант

// Формирует массив имен констант используемых для управления функциональностью
//
Функция СписокВсейФункциональности(ОписаниеФункциональности = Неопределено) Экспорт
	
	МассивИменКонстант = Новый Массив;
	
	Если ОписаниеФункциональности = Неопределено Тогда
		ОписаниеФункциональности = ОписаниеФункциональности();
	КонецЕсли;
	
	Отбор = Новый Структура("Доступна", Истина);
	Для Каждого Функциональность Из ОписаниеФункциональности.НайтиСтроки(Отбор) Цикл
		МассивИменКонстант.Добавить(Функциональность.Имя);
	КонецЦикла;
	
	Возврат МассивИменКонстант;
	
КонецФункции

// Возвращает имена констант из переданного массива, у которых значение Истина
Функция ВключеннаяФункциональность(СписокФункциональности)
	
	ВключеннаяФункциональность = Новый Массив;
	
	Если Не ЗначениеЗаполнено(СписокФункциональности) Тогда
		Возврат ВключеннаяФункциональность;
	КонецЕсли;
	
	ИменаФункциональности = СтрСоединить(СписокФункциональности, ",");
	
	НаборКонстант = Константы.СоздатьНабор(ИменаФункциональности);
	НаборКонстант.Прочитать();
	
	Для Каждого ИмяФункциональности Из СписокФункциональности Цикл
		Если НаборКонстант[ИмяФункциональности] = Истина Тогда
			ВключеннаяФункциональность.Добавить(ИмяФункциональности);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВключеннаяФункциональность;
	
КонецФункции

Функция ФункциональностьНедоступнаяВПростомИнтерфейсе(ОписаниеФункциональности)
	
	ФункциональностьНедоступнаяВПростомИнтерфейсе = Новый Массив;
	
	Отбор = Новый Структура("ДоступнаВПростомИнтерфейсе,Доступна", Ложь, Истина);
	Для Каждого Функциональность Из ОписаниеФункциональности.НайтиСтроки(Отбор) Цикл
		ФункциональностьНедоступнаяВПростомИнтерфейсе.Добавить(Функциональность.Имя);
	КонецЦикла;
	
	Возврат ФункциональностьНедоступнаяВПростомИнтерфейсе;
	
КонецФункции

#КонецОбласти

#Область ПодпискаНаСобытиеИзменениеКонстантыСинхронизацияДанных

// При установке флага Синхронизация Данных, включаем зависимые функциональные возможности
Процедура УстановитьКонстантыЗависимыеОтОбменов() Экспорт
	
	Если Константы.ИспользоватьСинхронизациюДанных.Получить() Тогда
		
		ОписаниеФункциональности = ОписаниеФункциональности();
		
		ФункциональностьДляОбмена = Новый Массив;
		
		Отбор = Новый Структура("ТребуетсяДляОбменов,Доступна", Истина, Истина);
		Для Каждого СтрокаФункциональности Из ОписаниеФункциональности.НайтиСтроки(Отбор) Цикл
			ФункциональностьДляОбмена.Добавить(СтрокаФункциональности.Имя);
		КонецЦикла;
		
		ИзменитьСписокФункциональности(ФункциональностьДляОбмена, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыЗапускаПроверокКонстантНаВозможностьОтключения

Процедура ПроверитьВозможностьИзмененияФункциональностиВФоне(СтруктураПараметров, АдресХранилища) Экспорт
	
	Функциональность = СтруктураПараметров.Функциональность;
	ВключеннаяФункциональность = ВключеннаяФункциональность(Функциональность);
	
	ОписаниеФункциональности = ОписаниеФункциональности();
	
	Результат = Новый Структура();
	Результат.Вставить("Используется", ИспользуемаяФункциональность(ВключеннаяФункциональность, ОписаниеФункциональности));
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
КонецПроцедуры

Функция ОтказСнятьИспользованиеКонстанты(ИмяКонстанты, ОписаниеФункциональности)
	
	Если ФункциональностьВлияетНаСинхронизациюДанных(ИмяКонстанты, ОписаниеФункциональности)
		И ИспользуетсяСинхронизацияДанных() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ОтказСнятьИспользованиеКонстантыПоДаннымБазы(ИмяКонстанты);
	
КонецФункции

Функция ОтказСнятьИспользованиеКонстантыПоДаннымБазы(ИмяКонстанты)
	
	ОтказСнять = Истина;
	
	Если ИмяКонстанты = "ВедетсяУчетНМА" Тогда
		ОтказСнять = ОтказСнятьВедетсяУчетНМА();
	ИначеЕсли ИмяКонстанты = "ВедетсяУчетОсновныхСредств" Тогда
		ОтказСнять = ОтказСнятьВедетсяУчетОсновныхСредств();
	ИначеЕсли ИмяКонстанты = "ВедетсяУчетСдачиИмуществаВАренду" Тогда
		ОтказСнять = ОтказСнятьВедетсяУчетСдачиИмуществаВАренду();
	ИначеЕсли ИмяКонстанты = "ВедетсяУчетЛизинговогоИмущества" Тогда
		ОтказСнять = ОтказСнятьВедетсяУчетЛизинговогоИмущества();
	ИначеЕсли ИмяКонстанты = "ВедетсяУчетСпецодеждыСпецоснастки" Тогда
		ОтказСнять = ОтказСнятьВедетсяУчетСпецодеждыСпецоснастки()
	ИначеЕсли ИмяКонстанты = "ВедетсяОтгрузкаБезПереходаПраваСобственности" Тогда
		ОтказСнять = ОтказСнятьВедетсяОтгрузкаБезПереходаПраваСобственности()
	ИначеЕсли ИмяКонстанты = "ИспользоватьКомплектациюНоменклатуры" Тогда
		ОтказСнять = ОтказСнятьИспользоватьКомплектациюНоменклатуры()
	ИначеЕсли ИмяКонстанты = "ИспользоватьОплатуПоПлатежнымКартам" Тогда
		ОтказСнять = ОтказСнятьИспользоватьОплатуПоПлатежнымКартам()
	ИначеЕсли ИмяКонстанты = "ВедетсяУчетДенежныхДокументов" Тогда
		ОтказСнять = ОтказСнятьИспользоватьДенежныеДокументы()
	ИначеЕсли ИмяКонстанты = "ВедетсяПроизводственнаяДеятельность" Тогда
		ОтказСнять = ОтказСнятьВедетсяПроизводственнаяДеятельность()
	ИначеЕсли ИмяКонстанты = "ОсуществляетсяРеализацияТоваровУслугКомитентов" Тогда
		ОтказСнять = ОтказСнятьОсуществляетсяРеализацияТоваровУслугКомитентов()
	ИначеЕсли ИмяКонстанты = "ОсуществляетсяРеализацияТоваровУслугЧерезКомиссионеров" Тогда
		ОтказСнять = ОтказСнятьОсуществляетсяРеализацияТоваровУслугЧерезКомиссионеров()	
	ИначеЕсли ИмяКонстанты = "ОсуществляетсяЗакупкаТоваровУслугДляКомитентов" Тогда
		ОтказСнять = ОтказСнятьОсуществляетсяЗакупкаТоваровУслугДляКомитентов()
	ИначеЕсли ИмяКонстанты = "ОсуществляетсяЗакупкаТоваровУслугЧерезКомиссионеров" Тогда
		ОтказСнять = ОтказСнятьОсуществляетсяЗакупкаТоваровУслугЧерезКомиссионеров()
	ИначеЕсли ИмяКонстанты = "ВедетсяРозничнаяТорговля" Тогда
		ОтказСнять = ОтказСнятьВедетсяРозничнаяТорговля()
	ИначеЕсли ИмяКонстанты = "ВедетсяУчетВозвратнойТары" Тогда
		ОтказСнять = ОтказСнятьВедетсяУчетВозвратнойТары()
	ИначеЕсли ИмяКонстанты = "ВедетсяУчетИмпортныхТоваров" Тогда
		ОтказСнять = ОтказСнятьВедетсяУчетИмпортныхТоваров()
	ИначеЕсли ИмяКонстанты = "ИспользоватьПакетноеВыставлениеАктов" Тогда
		ОтказСнять = ОтказСнятьИспользоватьПакетноеВыставлениеАктов()
	ИначеЕсли ИмяКонстанты = "ИспользоватьПлатежныеТребования" Тогда
		ОтказСнять = ОтказСнятьИспользоватьПлатежныеТребования()
	ИначеЕсли ИмяКонстанты = "УправлениеЗачетомАвансовПогашениемЗадолженности" Тогда
		ОтказСнять = ОтказСнятьУправлениеЗачетомАвансовПогашениемЗадолженности()
	ИначеЕсли ИмяКонстанты = "ИспользоватьУведомленияОКонтролируемыхСделках" Тогда
		ОтказСнять = ОтказСнятьИспользоватьУведомленияОКонтролируемыхСделках()
	ИначеЕсли ИмяКонстанты = "ИспользуетсяГособоронзаказ" Тогда
		ОтказСнять = ОтказСнятьИспользуетсяГособоронзаказ();
	ИначеЕсли ИмяКонстанты = "ВедетсяУчетРозничнойПродажиАлкогольнойПродукцииПива" Тогда
		ОтказСнять = ОтказСнятьВедетсяУчетРозничнойПродажиАлкогольнойПродукцииПива()
	ИначеЕсли ИмяКонстанты = "ИспользоватьКорректировочныеДокументы" Тогда
		ОтказСнять = ОтказСнятьИспользоватьКорректировочныеДокументы();
	ИначеЕсли ИмяКонстанты = "ИспользоватьФискальныйРегистратор" Тогда
		ОтказСнять = ОтказСнятьИспользоватьФискальныйРегистратор();
	ИначеЕсли ИмяКонстанты = "ИспользоватьПередачуПрав" Тогда
		ОтказСнять = Ложь;
	ИначеЕсли ИмяКонстанты = "ИспользуютсяПодарочныеСертификаты" Тогда
		ОтказСнять = ОтказСнятьИспользуютсяПодарочныеСертификаты();
	ИначеЕсли ИмяКонстанты = "ИспользоватьИнкассацию" Тогда
		ОтказСнять = ОтказСнятьИспользоватьИнкассацию();
	ИначеЕсли ИмяКонстанты = "ИспользоватьДоставкуАвтотранспортом" Тогда
		ОтказСнять = ОтказСнятьИспользоватьДоставкуАвтотранспортом();
	ИначеЕсли ИмяКонстанты = "ИспользоватьПланированиеПлатежейПоставщикам" Тогда
		ОтказСнять = Ложь;
	ИначеЕсли ИмяКонстанты = "ИспользоватьПланированиеПлатежейОтПокупателей" Тогда
		ОтказСнять = Ложь;
	ИначеЕсли ИмяКонстанты = "ВестиУчетПоДоговорам" Тогда
		ОтказСнять = ОтказСнятьВестиУчетПоДоговорам();
	ИначеЕсли ИмяКонстанты = "ИсполняютсяОбязанностиНалоговогоАгентаПоНДС" Тогда
		ОтказСнять = ОтказСнятьИсполняютсяОбязанностиНалоговогоАгентаПоНДС();
	ИначеЕсли ИмяКонстанты = "ОбратноеНачислениеНДС" Тогда
		ОтказСнять = ОтказСнятьОбратноеНачислениеНДС();
	ИначеЕсли ИмяКонстанты = "ВедетсяУчетУслугИностранныхИнтернетКомпаний" Тогда
		ОтказСнять = ОтказСнятьЭлектронныеУслугиИностранцев();
	ИначеЕсли ИмяКонстанты = "УчетОбеспеченийОбязательствИПлатежей" Тогда
		ОтказСнять = ОтказСнятьУчетОбеспеченийОбязательствИПлатежей();
	ИначеЕсли ИмяКонстанты = "ВедетсяУчетТаможенныхДекларацийЭкспорт" Тогда
		ОтказСнять = ОтказСнятьВедетсяУчетТаможенныхДекларацийЭкспорт();
	ИначеЕсли ИмяКонстанты = "ВестиУчетМаркировкиПродукцииВГИСМ" Тогда
		ОтказСнять = ОтказСнятьВестиУчетМаркировкиПродукцииВГИСМ();
	ИначеЕсли ИмяКонстанты = "ЗагрузкаДанныхИзТиС" Тогда
		ОтказСнять = Ложь;
	ИначеЕсли ИмяКонстанты = "ИспользоватьФакторинг" Тогда
		ОтказСнять = ОтказСнятьОсуществляетсяДеятельностьПоОперациямФакторинга();
	ИначеЕсли ИмяКонстанты = "ИспользоватьСтатьиДвиженияДенежныхСредств" Тогда
		ОтказСнять = ОтказСнятьИспользоватьСтатьиДвиженияДенежныхСредств();
	ИначеЕсли ИмяКонстанты = "ИспользоватьДокументыРеализации" Тогда
		ОтказСнять = ОтказСнятьИспользоватьДокументыРеализации();
	ИначеЕсли ИмяКонстанты = "ИспользоватьДокументыПоступления" Тогда
		ОтказСнять = ОтказСнятьИспользоватьДокументыПоступления();
	ИначеЕсли ИмяКонстанты = "ВестиУчетПоПодразделениям" Тогда
		ОтказСнять = ОтказСнятьВестиУчетПоПодразделениям();
	ИначеЕсли ИмяКонстанты = "РасширенныйФункционал" Тогда
		ОтказСнять = ОтказСнятьРасширенныйФункционал();
	ИначеЕсли ИмяКонстанты = "ВестиУчетПоОрганизациям" Тогда
		ОтказСнять = ОтказСнятьВестиУчетПоОрганизациям();
	ИначеЕсли ИмяКонстанты = "ВедетсяУчетЗарплатыКадров" Тогда
		ОтказСнять = ОтказСнятьВедетсяУчетЗарплатыКадров();
	ИначеЕсли ИмяКонстанты = "ИспользоватьКадровыйУчет" Тогда
		ОтказСнять = ОтказСнятьИспользоватьКадровыйУчет();
	КонецЕсли;
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ФункциональностьВлияетНаСинхронизациюДанных(ИмяКонстанты, ОписаниеФункциональности)
	
	Отбор = Новый Структура();
	Отбор.Вставить("Доступна", Истина);
	Отбор.Вставить("ТребуетсяДляОбменов", Истина);
	Отбор.Вставить("Имя", ИмяКонстанты);
	
	СтрокиФункциональности = ОписаниеФункциональности.НайтиСтроки(Отбор);
	
	Возврат СтрокиФункциональности.Количество() > 0;
	
КонецФункции

Функция ИспользуемаяФункциональность(СписокФункциональности, ОписаниеФункциональности)
	
	ИспользуемаяФункциональность = Новый Массив;
	
	Для Каждого ИмяФункциональности Из ВключеннаяФункциональность(СписокФункциональности) Цикл
		
		Если ОтказСнятьИспользованиеКонстанты(ИмяФункциональности, ОписаниеФункциональности) Тогда
			ИспользуемаяФункциональность.Добавить(ИмяФункциональности);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ИспользуемаяФункциональность;
	
КонецФункции

#КонецОбласти

#Область ТарификацияФункциональности

Функция ЕстьИспользуемаяФункциональностьБезТарифа() Экспорт
	
	ОписаниеФункциональности = ОписаниеФункциональности();
	
	ВключеннаяНедоступнаяФункциональность = ВключеннаяНедоступнаяФункциональность(ОписаниеФункциональности);
	
	Возврат ВключеннаяНедоступнаяФункциональность.Количество() > 0;
	
КонецФункции

Функция ЗахватитьЛицензииДляИспользуемойФункциональности() Экспорт
	
	ОписаниеФункциональности = ОписаниеФункциональности();
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВключеннаяНедоступнаяФункциональность = ВключеннаяНедоступнаяФункциональность(ОписаниеФункциональности);
	
	// Нужно попытаться захватить лицензии, возможно, в менеджере сервиса уже есть свободные.
	ВыполнитьПопыткуЗахватитьЛицензии(ВключеннаяНедоступнаяФункциональность);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ВключеннаяНедоступнаяФункциональность.Количество() = 0;
	
КонецФункции

Функция ОграниченияФункциональностиПоТарифу(ОписаниеФункциональности) Экспорт
	
	Ограничения = Новый Структура;
	Ограничения.Вставить("ФункциональностьБезСвободныхЛицензий", НовыйОписаниеФункциональностиБезСвободныхЛицензий());
	Ограничения.Вставить("ТарифыНедоступнойФункциональности", НовыйОписаниеТарифов());
	
	Если Не ТарификацияБП.ФункциональностьОграничиваетсяТарифом() Тогда
		Возврат Ограничения;
	КонецЕсли;
	
	ТарифныеОпцииФункциональности = ТарифныеОпцииФункциональности(ОписаниеФункциональности);
	
	ДоступныеЛицензииФункциональности = ДоступныеЛицензииТарифныхОпцийФункциональности(ТарифныеОпцииФункциональности);
	
	ВсеТарифы = ВсеТарифы();
	
	ЗаполнитьОграниченияФункциональностиПоТарифу(ОписаниеФункциональности, Ограничения, ДоступныеЛицензииФункциональности, ВсеТарифы);
	
	Возврат Ограничения;
	
КонецФункции

Процедура ДополнитьКэшЛицензийНаВозможностьИспользованияФункциональности(СписокФункциональности, ОписаниеФункциональности, КэшЛицензий)
	
	Если Не ТарификацияБП.ФункциональностьОграничиваетсяТарифом() Тогда
		Возврат;
	КонецЕсли;
	
	ФункциональностьДляПроверки = Новый Массив;
	Для Каждого ИмяФункциональности Из СписокФункциональности Цикл
		Если КэшЛицензий.Получить(ИмяФункциональности) = Неопределено Тогда
			ФункциональностьДляПроверки.Добавить(ИмяФункциональности);
		КонецЕсли;
	КонецЦикла;
	
	Если ФункциональностьДляПроверки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТарифныеОпцииФункциональности = ТарифныеОпцииФункциональности(ОписаниеФункциональности, ФункциональностьДляПроверки);
	
	ДоступныеЛицензииФункциональности = ДоступныеЛицензииТарифныхОпцийФункциональности(ТарифныеОпцииФункциональности);
	
	Для Каждого ИмяФункциональности Из ФункциональностьДляПроверки Цикл
		
		ИмяТарифнойОпции = ТарифныеОпцииФункциональности.Получить(ИмяФункциональности);
		Если Не ЗначениеЗаполнено(ИмяТарифнойОпции) Тогда
			// Функциональность не тарифицируется, поэтому включать ее можно безусловно, она входит в любой тариф.
			ДоступныеЛицензии = НовыйДоступныеЛицензииТарифныхОпцийФункциональности();
			ДоступныеЛицензии.ВходитВТариф = Истина;
			ДоступныеЛицензии.ЕстьСвободныеЛицензии = Истина;
			КэшЛицензий.Вставить(ИмяФункциональности, ДоступныеЛицензии);
			Продолжить;
		КонецЕсли;
		
		КэшЛицензий.Вставить(ИмяФункциональности, 
			ДоступныеЛицензииФункциональности.Получить(ИмяТарифнойОпции));
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТарифныеОпцииФункциональности(ОписаниеФункциональности, СписокФункциональности = Неопределено)
	
	ТарифныеОпцииФункциональности = Новый Соответствие;
	
	Отбор = Новый Структура("Доступна", Истина);
	Для Каждого Функциональность Из ОписаниеФункциональности.НайтиСтроки(Отбор) Цикл
		
		Если СписокФункциональности <> Неопределено
			И СписокФункциональности.Найти(Функциональность.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Функциональность.ИмяТарифнойОпции) Тогда
			ТарифныеОпцииФункциональности.Вставить(Функциональность.Имя, Функциональность.ИмяТарифнойОпции);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТарифныеОпцииФункциональности;
	
КонецФункции

Функция ДоступныеЛицензииТарифныхОпцийФункциональности(ТарифныеОпцииФункциональности)
	
	ДоступныеЛицензииТарифныхОпцийФункциональности = Новый Соответствие();
	
	// Проверим, что каждая тарифная опция доступна для пользователя.
	// Результат поместим в структуру:
	//   - ВходитВТариф - Истина, если опция входит в тариф.
	//   - ЕстьСвободныеЛицензии - Если истина, есть свободная лицензия для захвата (либо лицензия уже захвачена).
	//   - ДоступноЛицензий - Заполняется только в том случае, если ЕстьСвободныеЛицензии = Истина.
	//                        Содержит общее количество доступных лицензий без учета используемых.
	
	Для Каждого ТарифнаяОпцияФункциональности Из ТарифныеОпцииФункциональности Цикл
		
		ПроверяемаяТарифнаяОпция = ТарифнаяОпцияФункциональности.Значение;
		
		Если ТарификацияБП.ЗарегистрированаЛицензияУслугиФункциональности(ПроверяемаяТарифнаяОпция) Тогда
			ДоступныеЛицензии = НовыйДоступныеЛицензииТарифныхОпцийФункциональности();
			ДоступныеЛицензии.ВходитВТариф = Истина;
			ДоступныеЛицензии.ЕстьСвободныеЛицензии = Истина;
			ДоступныеЛицензииТарифныхОпцийФункциональности.Вставить(ПроверяемаяТарифнаяОпция,
				ДоступныеЛицензии);
			Продолжить;
		КонецЕсли;
		
		// Проверим запросом к менеджеру сервиса, что есть свободные лицензии по тарифной опции.
		
		КоличествоЛицензий = ТарификацияБП.КоличествоЛицензийУслугиФункциональности(
			ПроверяемаяТарифнаяОпция);
		
		Если КоличествоЛицензий <> Неопределено
			И КоличествоЛицензий.ДоступноЛицензий <> 0 Тогда
			
			ДоступныеЛицензии = НовыйДоступныеЛицензииТарифныхОпцийФункциональности();
			ДоступныеЛицензии.ВходитВТариф = Истина;
			ДоступныеЛицензии.ЕстьСвободныеЛицензии = КоличествоЛицензий.ДоступноЛицензий = -1
				ИЛИ КоличествоЛицензий.СвободноЛицензий > 0;
			
			Если Не ДоступныеЛицензии.ЕстьСвободныеЛицензии Тогда
				ДоступныеЛицензии.ДоступноЛицензий = КоличествоЛицензий.ДоступноЛицензий;
			КонецЕсли;
			
			ДоступныеЛицензииТарифныхОпцийФункциональности.Вставить(ПроверяемаяТарифнаяОпция,
				ДоступныеЛицензии);
			
		Иначе
			
			// В тарифе нет такой опции.
			ДоступныеЛицензииТарифныхОпцийФункциональности.Вставить(ПроверяемаяТарифнаяОпция,
				НовыйДоступныеЛицензииТарифныхОпцийФункциональности());
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДоступныеЛицензииТарифныхОпцийФункциональности;
	
КонецФункции

Функция НовыйДоступныеЛицензииТарифныхОпцийФункциональности()
	
	ДоступныеЛицензии = Новый Структура;
	ДоступныеЛицензии.Вставить("ВходитВТариф", Ложь);
	ДоступныеЛицензии.Вставить("ЕстьСвободныеЛицензии", Ложь);
	ДоступныеЛицензии.Вставить("ДоступноЛицензий", 0);
	Возврат ДоступныеЛицензии;
	
КонецФункции

Процедура ЗаполнитьОграниченияФункциональностиПоТарифу(ОписаниеФункциональности, Ограничения, ДоступныеЛицензииФункциональности, ВсеТарифы)
	
	Для Каждого Функциональность Из ОписаниеФункциональности Цикл
		
		Если Не ЗначениеЗаполнено(Функциональность.ИмяТарифнойОпции) Тогда
			Продолжить;
		КонецЕсли;
		
		ЛицензииТарифнойОпции = ДоступныеЛицензииФункциональности.Получить(Функциональность.ИмяТарифнойОпции);
		Если ЛицензииТарифнойОпции <> Неопределено
			И ЛицензииТарифнойОпции.ВходитВТариф Тогда
			// Функциональность входит в тариф, но ее использование невозможно, т.к. использовано
			// максимальное количество доступных лицензий.
			Если Не ЛицензииТарифнойОпции.ЕстьСвободныеЛицензии Тогда
				ФункциональностьБезСвободныхЛицензий = Ограничения.ФункциональностьБезСвободныхЛицензий.Добавить();
				ФункциональностьБезСвободныхЛицензий.Имя = Функциональность.Имя;
				ФункциональностьБезСвободныхЛицензий.ДоступноЛицензий = ЛицензииТарифнойОпции.ДоступноЛицензий;
			КонецЕсли;
		Иначе
			// Функциональность не входит в тариф.
			ДобавитьФункциональностьВТарифы(Функциональность, Ограничения.ТарифыНедоступнойФункциональности, ВсеТарифы);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьФункциональностьВТарифы(Функциональность, Тарифы, ВсеТарифы)
	
	ФункциональностьНайденаВТарифах = Ложь;
	
	Для Каждого Тариф Из ВсеТарифы Цикл
		
		Если Тариф.ТарифныеОпции.Найти(Функциональность.ИмяТарифнойОпции) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ФункциональностьНайденаВТарифах = Истина;
		
		ДобавитьТариф(Функциональность, Тариф, Тарифы);
		
	КонецЦикла;
	
	Если Не ФункциональностьНайденаВТарифах Тогда
		ДобавитьТариф(Функциональность, Неопределено, Тарифы);
	КонецЕсли;
	
КонецПроцедуры

Функция ВсеТарифы()
	
	ВсеТарифы = Новый ТаблицаЗначений;
	ВсеТарифы.Колонки.Добавить("ИмяТарифа", Новый ОписаниеТипов("Строка"));
	ВсеТарифы.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число"));
	ВсеТарифы.Колонки.Добавить("ТарифныеОпции", Новый ОписаниеТипов("Массив"));
	ВсеТарифы.Колонки.Добавить("СсылкаНаТариф", Новый ОписаниеТипов("Строка"));
	
	Тариф = ВсеТарифы.Добавить();
	Тариф.ИмяТарифа = НСтр("ru = 'ТЕХНО или ПРОФ'");
	Тариф.Приоритет = 1;
	Тариф.ТарифныеОпции.Добавить(ТарификацияБП.ИдентификаторУслугиВестиУчетПоОрганизациям());
	
	Тариф = ВсеТарифы.Добавить();
	Тариф.ИмяТарифа = НСтр("ru = 'СПЕЦ'");
	Тариф.Приоритет = 2;
	Тариф.ТарифныеОпции.Добавить(ТарификацияБП.ИдентификаторУслугиОбратноеНачислениеНДС());
	
	Тариф = ВсеТарифы.Добавить();
	Тариф.ИмяТарифа = НСтр("ru = 'КОРП'");
	Тариф.Приоритет = 3;
	Тариф.ТарифныеОпции.Добавить(ТарификацияБП.ИдентификаторУслугиОбособленныеПодразделения());
	Тариф.ТарифныеОпции.Добавить(ТарификацияБП.ИдентификаторУслугиОбратноеНачислениеНДС());
	Тариф.ТарифныеОпции.Добавить(ТарификацияБП.ИдентификаторУслугиРасширенныйФункционал());
	Тариф.ТарифныеОпции.Добавить(ТарификацияБП.ИдентификаторУслугиГособоронзаказ());
	Тариф.ТарифныеОпции.Добавить(ТарификацияБП.ИдентификаторУслугиУведомленияОКонтролируемыхСделках());
	
	Возврат ВсеТарифы;
	
КонецФункции

Функция ВключеннаяНедоступнаяФункциональность(ОписаниеФункциональности)
	
	СписокВсейФункциональности = СписокВсейФункциональности(ОписаниеФункциональности);
	
	ВключеннаяНедоступнаяФункциональность = Новый Соответствие;
	
	Для Каждого ИмяФункциональности Из ВключеннаяФункциональность(СписокВсейФункциональности) Цикл
		
		Функциональность = СвойстваФункциональности(ИмяФункциональности, ОписаниеФункциональности);
		Если ЗначениеЗаполнено(Функциональность.ИмяТарифнойОпции) Тогда
			ЛицензияЗарегистрирована = ТарификацияБП.ЗарегистрированаЛицензияУслугиФункциональности(Функциональность.ИмяТарифнойОпции);
			
			Если Не ЛицензияЗарегистрирована Тогда
				ВключеннаяНедоступнаяФункциональность.Вставить(Функциональность.Имя, Функциональность.ИмяТарифнойОпции);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВключеннаяНедоступнаяФункциональность;
	
КонецФункции

Процедура ВыполнитьПопыткуЗахватитьЛицензии(ВключеннаяНедоступнаяФункциональность)
	
	ЗахваченныеЛицензииФункциональности = Новый Массив;
	
	Для Каждого ВключеннаяФункциональность Из ВключеннаяНедоступнаяФункциональность Цикл
		ОперацияСЛицензией = ВыполнитьЗахватОтменуЛицензииТарифнойОпции(ВключеннаяФункциональность.Значение, Истина);
		Если ОперацияСЛицензией.Результат
			И ОперацияСЛицензией.ОперацияПодтверждена Тогда
			ЗахваченныеЛицензииФункциональности.Добавить(ВключеннаяФункциональность.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИмяФункциональности Из ЗахваченныеЛицензииФункциональности Цикл
		ВключеннаяНедоступнаяФункциональность.Удалить(ИмяФункциональности);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьТариф(Функциональность, Тариф, Тарифы)
	
	Если Тариф = Неопределено Тогда
		// Не удалось найти ни одного тарифа, в который входит хотя бы одна тарифная опция функциональности.
		// Функциональность нужно запретить по пустому тарифу.
		Отбор = Новый Структура("ИмяТарифа", "");
	Иначе
		Отбор = Новый Структура("ИмяТарифа", Тариф.ИмяТарифа);
	КонецЕсли;
	
	СтрокиТарифа = Тарифы.НайтиСтроки(Отбор);
	Если СтрокиТарифа.Количество() = 0 Тогда
		СтрокаТарифа = Тарифы.Добавить();
		Если Тариф <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТарифа, Тариф);
		КонецЕсли;
	Иначе
		СтрокаТарифа = СтрокиТарифа[0];
	КонецЕсли;
	
	СтрокаТарифа.ФункциональностьТарифа.Добавить(Функциональность.Имя);
	
КонецПроцедуры

Функция НовыйОписаниеТарифов()
	
	ОписаниеТарифов = Новый ТаблицаЗначений;
	ОписаниеТарифов.Колонки.Добавить("ИмяТарифа", Новый ОписаниеТипов("Строка"));
	ОписаниеТарифов.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число"));
	ОписаниеТарифов.Колонки.Добавить("ФункциональностьТарифа", Новый ОписаниеТипов("Массив"));
	ОписаниеТарифов.Колонки.Добавить("СсылкаНаТариф", Новый ОписаниеТипов("Строка"));
	
	Возврат ОписаниеТарифов;
	
КонецФункции

Функция НовыйОписаниеФункциональностиБезСвободныхЛицензий()
	
	ФункциональностьБезСвободныхЛицензий = Новый ТаблицаЗначений;
	ФункциональностьБезСвободныхЛицензий.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	ФункциональностьБезСвободныхЛицензий.Колонки.Добавить("ДоступноЛицензий", Новый ОписаниеТипов("Число"));
	
	Возврат ФункциональностьБезСвободныхЛицензий;
	
КонецФункции

#КонецОбласти

#Область ПрограммныйИнтерфейс

Функция Изменить(ИмяФункциональности, НовоеЗначение, ИзменитьТолькоПростойИнтерфейс = Ложь) Экспорт
	
	ОписаниеФункциональности = ОписаниеФункциональности();
	СписокФункциональности = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИмяФункциональности);
	Возврат ВыполнитьИзменениеСпискаФункциональности(СписокФункциональности, НовоеЗначение,
		ОписаниеФункциональности, ИзменитьТолькоПростойИнтерфейс);
	
КонецФункции

Процедура ИзменитьВФоне(ПараметрыЗадания, АдресХранилища) Экспорт
	
	РезультатИзменения = Изменить(ПараметрыЗадания.ИмяФункциональности,
		ПараметрыЗадания.НовоеЗначение, ПараметрыЗадания.ИзменитьТолькоПростойИнтерфейс);
	
	ПоместитьВоВременноеХранилище(РезультатИзменения, АдресХранилища);
	
КонецПроцедуры

Функция ВариантФункциональности() Экспорт
	
	ОписаниеФункциональности = Обработки.ФункциональностьПрограммы.ОписаниеФункциональности();
	
	СписокФункциональности = Новый Массив;
	Отбор = Новый Структура("Доступна", Истина);
	Для Каждого Функциональность Из ОписаниеФункциональности.НайтиСтроки(Отбор) Цикл
		СписокФункциональности.Добавить(Функциональность.Имя);
	КонецЦикла;
	
	СтрокаИменКонстант = СтрСоединить(СписокФункциональности, ",");
	
	НаборКонстантОбъект = Константы.СоздатьНабор(СтрокаИменКонстант);
	НаборКонстантОбъект.Прочитать();
	
	ВсеЗначенияФункциональности = Новый Структура;
	Для Каждого ИмяФункциональности Из СписокФункциональности Цикл
		ЗначениеКонстанты = НаборКонстантОбъект[ИмяФункциональности];
		ВсеЗначенияФункциональности.Вставить(ИмяФункциональности, ЗначениеКонстанты);
	КонецЦикла;
	
	Возврат ВариантФункциональностиПоЗначениям(ВсеЗначенияФункциональности);
	
КонецФункции

Функция ВариантФункциональностиПоЗначениям(ВсеЗначенияФункциональности) Экспорт
	
	ПредыдущееЗначениеКонстанты = Неопределено;
	Для Каждого ФункциональностьИЗначение Из ВсеЗначенияФункциональности Цикл
		ЗначениеКонстанты = ФункциональностьИЗначение.Значение;
		// Если снят или установлен хоть один флаг, то это выборочная функциональность
		Если ПредыдущееЗначениеКонстанты <> Неопределено И ПредыдущееЗначениеКонстанты <> ЗначениеКонстанты Тогда
			Возврат ФункциональностьПрограммыКлиентСервер.ВыборочнаяФункциональность();
		Иначе
			ПредыдущееЗначениеКонстанты = ЗначениеКонстанты;
		КонецЕсли;
	КонецЦикла;
	
	// Если все флаги установлены, то это полная функциональность, иначе - основная
	Если ПредыдущееЗначениеКонстанты = Истина Тогда
		Возврат ФункциональностьПрограммыКлиентСервер.ПолнаяФункциональность();
	Иначе
		Возврат ФункциональностьПрограммыКлиентСервер.ОсновнаяФункциональность();
	КонецЕсли;
	
КонецФункции

Функция ТребуетсяПолныйИнтерфейс() Экспорт
	
	ОписаниеФункциональности = ОписаниеФункциональности();
	
	ФункциональностьНедоступнаяВПростомИнтерфейсе = ФункциональностьНедоступнаяВПростомИнтерфейсе(ОписаниеФункциональности);
	Если НЕ ЗначениеЗаполнено(ФункциональностьНедоступнаяВПростомИнтерфейсе) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИменаКонстант = СтрСоединить(ФункциональностьНедоступнаяВПростомИнтерфейсе, ",");
	НаборКонстант = Константы.СоздатьНабор(ИменаКонстант);
	НаборКонстант.Прочитать();
	
	Для каждого ИмяФункциональности Из ФункциональностьНедоступнаяВПростомИнтерфейсе Цикл
		Если НаборКонстант[ИмяФункциональности] = Истина Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ДополнитьРодительскойФункциональностью(СписокФункциональности) Экспорт
	
	ОписаниеФункциональности = ОписаниеФункциональности();
	
	РодительскаяФункциональность = РодительскаяФункциональностьДляСписка(СписокФункциональности, ОписаниеФункциональности);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СписокФункциональности, РодительскаяФункциональность, Истина);
	
КонецПроцедуры

Функция ИзменитьСписокФункциональности(СписокФункциональности, НовоеЗначение, ИзменитьТолькоПростойИнтерфейс = Ложь) Экспорт
	
	ОписаниеФункциональности = ОписаниеФункциональности();
	
	ВключеннаяФункциональность = ВключеннаяФункциональность(СписокФункциональности);
	
	Если НовоеЗначение Тогда
		// Уже включенную функциональность повторно включать не требуется.
		ФункциональностьДляИзменения = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
			СписокФункциональности, ВключеннаяФункциональность);
		ИспользуемаяФункциональность = Новый Массив;
	Иначе
		// Выключать нужно только ту функциональность, которая включена и не используется.
		ИспользуемаяФункциональность = ИспользуемаяФункциональность(ВключеннаяФункциональность, ОписаниеФункциональности);
		ФункциональностьДляИзменения = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
			ВключеннаяФункциональность, ИспользуемаяФункциональность);
	КонецЕсли;
	
	РезультатИзменения = ВыполнитьИзменениеСпискаФункциональности(
		ФункциональностьДляИзменения, НовоеЗначение, ОписаниеФункциональности, ИзменитьТолькоПростойИнтерфейс);
	
	// При попытке отключения функциональности может оказаться, что часть
	// функциональности не может быть отключена. Например, из-за используемой дочерней функциональности.
	// Дополним этот список НевозможноВыключитьФункциональность опциями, которые сами используются - ИспользуемаяФункциональность.
	Если ЗначениеЗаполнено(ИспользуемаяФункциональность) Тогда
		РезультатИзменения.Отказ = Истина;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			РезультатИзменения.НевозможноВыключитьФункциональность, ИспользуемаяФункциональность, Истина);
	КонецЕсли;
	
	Возврат РезультатИзменения;
	
КонецФункции

Процедура ИзменитьСписокФункциональностиВФоне(СтруктураПараметров, АдресХранилища) Экспорт
	
	Функциональность = СтруктураПараметров.Функциональность;
	НовоеЗначение = СтруктураПараметров.НовоеЗначение;
	ИзменитьТолькоПростойИнтерфейс = СтруктураПараметров.ИзменитьТолькоПростойИнтерфейс;
	
	РезультатИзменения = ИзменитьСписокФункциональности(Функциональность, НовоеЗначение, ИзменитьТолькоПростойИнтерфейс);
	
	ПоместитьВоВременноеХранилище(РезультатИзменения, АдресХранилища);
	
КонецПроцедуры

Функция ПростойИнтерфейсФункциональности() Экспорт
	
	Возврат Константы.ИнтерфейсТаксиПростой.Получить();
	
КонецФункции

Функция ДоступнаФункциональностьГособоронзаказ() Экспорт
	
	Возврат ВариантыПриложений.ЭтоВерсияКОРП();
	
КонецФункции

#КонецОбласти

#Область ИзменениеФункциональности

Процедура ЗаписатьЗначениеФункциональности(Функциональность, НовоеЗначение)
	
	Если Константы[Функциональность.Имя].Получить() = НовоеЗначение Тогда
		Возврат;
	КонецЕсли;
	
	ИзменитьЗначениеФункциональности(Функциональность, НовоеЗначение);
	
КонецПроцедуры

Процедура ИзменитьЗначениеФункциональности(Функциональность, НовоеЗначение)
	
	ОперацияСЛицензией = Неопределено;
	
	Попытка
		
		Если ТарификацияБП.ФункциональностьОграничиваетсяТарифом()
			И ЗначениеЗаполнено(Функциональность.ИмяТарифнойОпции) Тогда
			
			ОперацияСЛицензией = ВыполнитьЗахватОтменуЛицензииТарифнойОпции(Функциональность.ИмяТарифнойОпции, НовоеЗначение);
			
			Если НовоеЗначение
				И ОперацияСЛицензией <> Неопределено
				И Не ОперацияСЛицензией.Результат Тогда
				ТекстИсключения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Нет свободных лицензий ""%1"" для включения функциональности ""%2""'"), 
					Функциональность.ИмяТарифнойОпции, Функциональность.Имя);
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
			
		КонецЕсли;
		
		Константы[Функциональность.Имя].Установить(НовоеЗначение);
		
		ПослеИзмененияЗначенияФункциональности(Функциональность, НовоеЗначение);
		
	Исключение
		
		ЗаписьЖурналаРегистрации(ФункциональностьПрограммыКлиентСервер.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Константы[Функциональность.Имя], , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		// Возникло исключение - нужно вернуть значение константы в старое значение, если же константа все же
		// изменилась и исключение было вызвано операцией после изменения.
		Константы[Функциональность.Имя].Установить(Не НовоеЗначение);
		
		ОтменитьОперациюСЛицензией(Функциональность.ИмяТарифнойОпции, Не НовоеЗначение, ОперацияСЛицензией);
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ПослеИзмененияЗначенияФункциональности(Функциональность, НовоеЗначение)
	
	Если Функциональность.Имя = "ИспользоватьСтатьиДвиженияДенежныхСредств" Тогда
		ДействияПослеИзмененияИспользоватьСтатьиДвиженияДенежныхСредств(НовоеЗначение);
	ИначеЕсли Функциональность.Имя = "ВестиУчетПоПодразделениям" Тогда
		ДействияПослеИзмененияВестиУчетПоПодразделениям(НовоеЗначение);
	ИначеЕсли Функциональность.Имя = "ИспользоватьКадровыйУчет" Тогда
		ДействияПослеИзмененияИспользоватьКадровыйУчет(НовоеЗначение);
	КонецЕсли;
	
КонецПроцедуры

Функция НовыйРезультатИзмененияСпискаФункциональности(НовоеЗначение)
	
	Результат = Новый Структура;
	Результат.Вставить("Отказ", Ложь);
	Результат.Вставить("НовоеЗначение", НовоеЗначение);
	Результат.Вставить("ФункциональностьНеДоступнаПоТарифу", Новый Массив);
	Результат.Вставить("ФункциональностьБезСвободныхЛицензий", Новый Массив);
	Результат.Вставить("ТребуетсяВключитьФункциональность", Новый Массив);
	Результат.Вставить("НевозможноВыключитьФункциональность", Новый Массив);
	Результат.Вставить("ТребуетсяВыключитьФункциональность", Новый Массив);
	Результат.Вставить("НовыеЗначенияФункциональности", Новый Структура);
	Результат.Вставить("НовыеЗначенияФункциональностиДляОтложенногоИзменения", Новый Структура);
	Возврат Результат;
	
КонецФункции

Функция ВыполнитьЗахватОтменуЛицензииТарифнойОпции(ИмяТарифнойОпции, НовоеЗначение)
	
	Если Не ТарификацияБП.ФункциональностьОграничиваетсяТарифом() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОперацияСЛицензией = НовыйОперацияСЛицензией();
	
	ЛицензияЗахвачена = ТарификацияБП.ЗарегистрированаЛицензияУслугиФункциональности(ИмяТарифнойОпции);
	
	Если ЛицензияЗахвачена = НовоеЗначение Тогда
		// Состояние лицензии и так уже соответствует новому значению константы.
		// Ранее произошла рассинхронизация значения константы и захвата лицензии.
		ОперацияСЛицензией.Результат = Истина;
		ОперацияСЛицензией.ОперацияПодтверждена = Истина;
	Иначе
		Попытка
			Если НовоеЗначение Тогда
				РезультатЗахвата = ТарификацияБП.ЗанятьЛицензиюУслугиФункциональности(
					ИмяТарифнойОпции, ОперацияСЛицензией.ИдентификаторОперации);
				ОперацияСЛицензией.Результат = РезультатЗахвата.Результат;
			Иначе
				ОперацияСЛицензией.Результат = ТарификацияБП.ОсвободитьЛицензиюУслугиФункциональности(
					ИмяТарифнойОпции, ОперацияСЛицензией.ИдентификаторОперации);
			КонецЕсли;
		Исключение
			ОперацияСЛицензией.Результат = Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Если ОперацияСЛицензией.Результат И Не ОперацияСЛицензией.ОперацияПодтверждена Тогда
		ОперацияСЛицензией.ОперацияПодтверждена = Тарификация.ПодтвердитьОперацию(ОперацияСЛицензией.ИдентификаторОперации);
	КонецЕсли;
	
	Возврат ОперацияСЛицензией;
	
КонецФункции

Процедура ОтменитьОперациюСЛицензией(ИмяТарифнойОпции, ЗначениеДоИзменения, ОперацияСЛицензией)
	
	Если ОперацияСЛицензией = Неопределено
		ИЛИ Не ОперацияСЛицензией.Результат Тогда
		Возврат;
	КонецЕсли;
	
	// Лицензия захвачена, нужно ее отменить.
	// Процедура отмены зависит от того, сумели ли мы ее подтвердить, или нет.
	// Если подтвердить не смогли, то достаточно просто отменить операцию.
	// Если же смогли - то нужно полноценно освободжать лицензию.
	
	Если ОперацияСЛицензией.ОперацияПодтверждена Тогда
		ВыполнитьЗахватОтменуЛицензииТарифнойОпции(ИмяТарифнойОпции, ЗначениеДоИзменения);
	Иначе
		Тарификация.ОтменитьОперацию(ОперацияСЛицензией.ИдентификаторОперации);
	КонецЕсли;
	
КонецПроцедуры

Функция НовыйОперацияСЛицензией()
	
	ОперацияСЛицензией = Новый Структура();
	ОперацияСЛицензией.Вставить("ИдентификаторОперации", Новый УникальныйИдентификатор);
	ОперацияСЛицензией.Вставить("ОперацияПодтверждена", Ложь);
	ОперацияСЛицензией.Вставить("Результат", Ложь);
	Возврат ОперацияСЛицензией;
	
КонецФункции

Функция ВыполнитьИзменениеСпискаФункциональности(СписокФункциональности, НовоеЗначение, ОписаниеФункциональности, ИзменитьТолькоПростойИнтерфейс = Ложь)
	
	Результат = НовыйРезультатИзмененияСпискаФункциональности(НовоеЗначение);
	
	Если Не ЗначениеЗаполнено(СписокФункциональности) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЭтоПолныйИнтерфейс = Не ПростойИнтерфейсФункциональности();
	
	КэшЛицензий = Новый Соответствие;
	Если НовоеЗначение Тогда
		ДополнитьКэшЛицензийНаВозможностьИспользованияФункциональности(СписокФункциональности, ОписаниеФункциональности,
			КэшЛицензий);
	КонецЕсли;
	
	Для Каждого ИмяФункциональности Из СписокФункциональности Цикл
		ДобавитьНовоеЗначениеФункциональности(Результат, ИмяФункциональности, НовоеЗначение, КэшЛицензий, ОписаниеФункциональности);
	КонецЦикла;
	
	Если НовоеЗначение Тогда
		ПроверитьЧтоВключенаРодительскаяФункциональность(
			СписокФункциональности, ОписаниеФункциональности, КэшЛицензий, Результат);
	Иначе
		ПроверитьЧтоОтключенаДочерняяФункциональность(СписокФункциональности, ОписаниеФункциональности, КэшЛицензий, Результат);
	КонецЕсли;
	
	Если ИзменитьТолькоПростойИнтерфейс Тогда
		ЗаполнитьФункциональностьПолногоИнтерфейсаДляОтложенногоИзменения(Результат, ОписаниеФункциональности);
	КонецЕсли;
	
	Для Каждого ФункциональностьИЗначение Из Результат.НовыеЗначенияФункциональности Цикл
		Функциональность = СвойстваФункциональности(ФункциональностьИЗначение.Ключ, ОписаниеФункциональности);
		ЗаписатьЗначениеФункциональности(Функциональность, ФункциональностьИЗначение.Значение);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Процедура ПроверитьЧтоВключенаРодительскаяФункциональность(СписокФункциональности, ОписаниеФункциональности, КэшЛицензий, Результат)
	
	// При включении функциональности проверяем, не нужно ли также включить 
	// родительские константы. Если нужно - предлагаем включить.
	
	РодительскаяФункциональность = РодительскаяФункциональностьДляСписка(СписокФункциональности, ОписаниеФункциональности);
	
	// В том случае, если в простом интерфейсе изменяется только функциональность полного интерфейса,
	// при этом вся родительская функциональность должна быть обязательно включена при переходе на полный интерфейс,
	// то в этом случае не нужно проверять родительскую функциональность на включение - она будет включена в обработке
	// перехода на полный интерфейс.
	
	ПроверятьРодительскуюФункциональностьНаВключение = Истина;
	Если ПростойИнтерфейсФункциональности()
		И ВсяФункциональностьТолькоДляПолногоИнтерфейса(СписокФункциональности, ОписаниеФункциональности) Тогда
		ПроверятьРодительскуюФункциональностьНаВключение = Не ВсяФункциональностьДолжнаБытьОбязательноВключенаВПолномИнтерфейсе(
			РодительскаяФункциональность, ОписаниеФункциональности);
	КонецЕсли;
	
	Если ПроверятьРодительскуюФункциональностьНаВключение Тогда
		
		Для Каждого ИмяФункциональности Из РодительскаяФункциональность Цикл
			Включено = Константы[ИмяФункциональности].Получить();
			Если Не Включено И СписокФункциональности.Найти(ИмяФункциональности) = Неопределено Тогда
				Результат.Отказ = Истина;
				Результат.ТребуетсяВключитьФункциональность.Добавить(ИмяФункциональности);
			КонецЕсли;
		КонецЦикла;
		
		// Не будем включать сейчас ту функциональность, у которой не включена родительская.
		УдалитьБлокируемуюРодительскойДочернююФункциональность(
			Результат.НовыеЗначенияФункциональности, Результат.ТребуетсяВключитьФункциональность, ОписаниеФункциональности);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьЧтоОтключенаДочерняяФункциональность(СписокФункциональности, ОписаниеФункциональности, КэшЛицензий, Результат)
	
	// При выключении функциональности проверяем, можно ли выключить и дочернюю функциональность.
	// Если зависимые константы выключить нельзя, сообщаем об этом и родительскую функциональность не выключаем.
	ДочерняяФункциональность = ДочерняяФункциональностьДляСписка(СписокФункциональности, ОписаниеФункциональности);
	
	// Если дочерняя функциональность есть в списке на отключение, то проверять ее как зависимую не требуется,
	// т.к. в СписокФункциональности должна быть уже только функциональность, которую гарантированно можно снять.
	ПроверяемаяДочерняяФункциональность = ОбщегоНазначенияКлиентСервер.РазностьМассивов(
		ДочерняяФункциональность, СписокФункциональности);
	
	РезультатПроверки = ПроверитьФункциональностьНаВозможностьОтключения(ПроверяемаяДочерняяФункциональность, ОписаниеФункциональности);
	
	Если РезультатПроверки.НевозможноОтключить.Количество() > 0 Тогда
		
		Результат.Отказ = Истина;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			Результат.НевозможноВыключитьФункциональность, РезультатПроверки.НевозможноОтключить, Истина);
		
		// Не будем отключать ту функциональность, у которой нет возможности отключить дочернюю.
		УдалитьБлокируемуюДочернейРодительскуюФункциональность(
			Результат.НовыеЗначенияФункциональности, РезультатПроверки.НевозможноОтключить, ОписаниеФункциональности);
		
	Иначе
		
		// Всю дочернюю функциональность можно отключить.
		// Поэтому добавим ее в список на отключение.
		
		НовоеЗначение = Ложь;
		
		Для Каждого ИмяФункциональности Из РезультатПроверки.ВозможноОтключить Цикл
			ДобавитьНовоеЗначениеФункциональности(Результат, ИмяФункциональности, НовоеЗначение, КэшЛицензий, ОписаниеФункциональности);
		КонецЦикла;
		
		Если ПростойИнтерфейсФункциональности() Тогда
			// Добавим также и отключенную дочернюю функциональность, чтобы отключить
			// в простом интерфейсе дочернюю функциональность, если она в форме включена
			// для отложенного изменения.
			Для Каждого ИмяФункциональности Из РезультатПроверки.Отключена Цикл
				ДобавитьНовоеЗначениеФункциональности(Результат, ИмяФункциональности, НовоеЗначение, КэшЛицензий, ОписаниеФункциональности);
			КонецЦикла;
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			Результат.ТребуетсяВыключитьФункциональность, РезультатПроверки.ВозможноОтключить, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДочерняяФункциональностьДляСписка(СписокФункциональности, ОписаниеФункциональности)
	
	ДочерняяФункциональность = Новый Массив;
	
	Для Каждого ИмяФункциональности Из СписокФункциональности Цикл
		
		Функциональность = СвойстваФункциональности(ИмяФункциональности, ОписаниеФункциональности);
		Если Функциональность = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДополнитьФункциональностьСУчетомИерархии(
			ДочерняяФункциональность, Функциональность, "ДочерняяФункциональность", ОписаниеФункциональности);
		
	КонецЦикла;
	
	Возврат ДочерняяФункциональность;
	
КонецФункции

Функция РодительскаяФункциональностьДляСписка(СписокФункциональности, ОписаниеФункциональности)
	
	РодительскаяФункциональность = Новый Массив;
	
	Для Каждого ИмяФункциональности Из СписокФункциональности Цикл
		
		Функциональность = СвойстваФункциональности(ИмяФункциональности, ОписаниеФункциональности);
		Если Функциональность = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДополнитьФункциональностьСУчетомИерархии(
			РодительскаяФункциональность, Функциональность, "РодительскаяФункциональность", ОписаниеФункциональности);
		
	КонецЦикла;
	
	Возврат ОбщегоНазначенияКлиентСервер.СвернутьМассив(РодительскаяФункциональность);
	
КонецФункции

Процедура ДополнитьФункциональностьСУчетомИерархии(СписокФункциональности, Функциональность, ИмяСпискаДополнения, ОписаниеФункциональности)
	
	СписокФункциональностиДляДополнения = Новый Массив;
	
	Для Каждого ИмяФункциональности Из Функциональность[ИмяСпискаДополнения] Цикл
		
		ФункциональностьДляДополнения = СвойстваФункциональности(ИмяФункциональности, ОписаниеФункциональности);
		Если ФункциональностьДляДополнения = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДополнитьФункциональностьСУчетомИерархии(
			СписокФункциональностиДляДополнения, ФункциональностьДляДополнения, ИмяСпискаДополнения, ОписаниеФункциональности);
		
		СписокФункциональностиДляДополнения.Добавить(ИмяФункциональности);
		
	КонецЦикла;
	
	Если ЗначениеЗаполнено(СписокФункциональностиДляДополнения) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
			СписокФункциональности, СписокФункциональностиДляДополнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьБлокируемуюДочернейРодительскуюФункциональность(НовыеЗначенияФункциональности, ДочерняяФункциональность, ОписаниеФункциональности)
	
	РодительскаяФункциональностьКоторуюБлокируетДочерняя = РодительскаяФункциональностьДляСписка(
		ДочерняяФункциональность, ОписаниеФункциональности);
	
	Для Каждого ИмяФункциональности Из РодительскаяФункциональностьКоторуюБлокируетДочерняя Цикл
		Если НовыеЗначенияФункциональности.Свойство(ИмяФункциональности) Тогда
			НовыеЗначенияФункциональности.Удалить(ИмяФункциональности);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УдалитьБлокируемуюРодительскойДочернююФункциональность(НовыеЗначенияФункциональности, РодительскаяФункциональность, ОписаниеФункциональности)
	
	ДочерняяФункциональностьКоторуюБлокируетРодительская = ДочерняяФункциональностьДляСписка(
		РодительскаяФункциональность, ОписаниеФункциональности);
	
	Для Каждого ИмяФункциональности Из ДочерняяФункциональностьКоторуюБлокируетРодительская Цикл
		Если НовыеЗначенияФункциональности.Свойство(ИмяФункциональности) Тогда
			НовыеЗначенияФункциональности.Удалить(ИмяФункциональности);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ВсяФункциональностьТолькоДляПолногоИнтерфейса(СписокФункциональности, ОписаниеФункциональности)
	
	ВсяФункциональностьТолькоДляПолногоИнтерфейса = Истина;
	
	Для Каждого ИмяФункциональности Из СписокФункциональности Цикл
		
		Функциональность = СвойстваФункциональности(ИмяФункциональности, ОписаниеФункциональности);
		Если Функциональность = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Функциональность.ДоступнаВПростомИнтерфейсе Тогда
			ВсяФункциональностьТолькоДляПолногоИнтерфейса = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВсяФункциональностьТолькоДляПолногоИнтерфейса;
	
КонецФункции

Функция ВсяФункциональностьДолжнаБытьОбязательноВключенаВПолномИнтерфейсе(СписокФункциональности, ОписаниеФункциональности)
	
	ВсяФункциональностьДолжнаБытьОбязательноВключенаВПолномИнтерфейсе = Истина;
	
	Для Каждого ИмяФункциональности Из СписокФункциональности Цикл
		Функциональность = СвойстваФункциональности(ИмяФункциональности, ОписаниеФункциональности);
		Если Функциональность = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не Функциональность.ДолжнаБытьОбязательноВключенаВПолномИнтерфейсе Тогда
			ВсяФункциональностьДолжнаБытьОбязательноВключенаВПолномИнтерфейсе = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВсяФункциональностьДолжнаБытьОбязательноВключенаВПолномИнтерфейсе;
	
КонецФункции

Функция ПроверитьФункциональностьНаВозможностьОтключения(СписокФункциональности, ОписаниеФункциональности)
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("Отключена", Новый Массив);
	РезультатПроверки.Вставить("НевозможноОтключить", Новый Массив);
	РезультатПроверки.Вставить("ВозможноОтключить", Новый Массив);
	
	Если Не ЗначениеЗаполнено(СписокФункциональности) Тогда
		Возврат РезультатПроверки;
	КонецЕсли;
	
	НаборКонстант = Константы.СоздатьНабор(СтрСоединить(СписокФункциональности, ","));
	НаборКонстант.Прочитать();
	
	Для каждого ИмяФункциональности Из СписокФункциональности Цикл
		
		Если Не НаборКонстант[ИмяФункциональности] Тогда
			// Дочерняя функциональность и так выключена, дополнительно проверять ее не требуется.
			РезультатПроверки.Отключена.Добавить(ИмяФункциональности);
			Продолжить;
		КонецЕсли;
		
		Если ОтказСнятьИспользованиеКонстанты(ИмяФункциональности, ОписаниеФункциональности) Тогда
			РезультатПроверки.НевозможноОтключить.Добавить(ИмяФункциональности);
		Иначе
			РезультатПроверки.ВозможноОтключить.Добавить(ИмяФункциональности);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатПроверки;
	
КонецФункции

Процедура ЗаполнитьФункциональностьПолногоИнтерфейсаДляОтложенногоИзменения(Результат, ОписаниеФункциональности)
	
	// Для функциональности, которая не доступна в простом интерфейсе, не нужно устанавливать
	// соответствующую константу непосредственно. Нужно сохранить эти значения
	// и изменить только в форме для того, чтобы функциональность установилась при перезапуске.
	
	Для Каждого ФункциональностьИЗначение Из Результат.НовыеЗначенияФункциональности Цикл
		
		Функциональность = СвойстваФункциональности(ФункциональностьИЗначение.Ключ, ОписаниеФункциональности);
		Если Функциональность = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Функциональность.ДоступнаВПростомИнтерфейсе Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.НовыеЗначенияФункциональностиДляОтложенногоИзменения.Вставить(
			ФункциональностьИЗначение.Ключ, ФункциональностьИЗначение.Значение);
		
	КонецЦикла;
	
	// Очистим НовыеЗначенияФункциональности, чтобы не изменились константы, которые с ними связаны.
	Для Каждого ФункциональностьИЗначение Из Результат.НовыеЗначенияФункциональностиДляОтложенногоИзменения Цикл
		Результат.НовыеЗначенияФункциональности.Удалить(ФункциональностьИЗначение.Ключ);
	КонецЦикла;
	
КонецПроцедуры

Функция СвойстваФункциональности(ИмяФункциональности, ОписаниеФункциональности)
	
	Функциональность = ОписаниеФункциональности.Найти(ИмяФункциональности, "Имя");
	Если Функциональность <> Неопределено
		И Функциональность.Доступна Тогда
		Возврат Функциональность;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Процедура ДобавитьНовоеЗначениеФункциональности(Результат, ИмяФункциональности, НовоеЗначение, КэшЛицензий, ОписаниеФункциональности)
	
	Если НовоеЗначение Тогда
		
		ЛицензияФункциональности = КэшЛицензий.Получить(ИмяФункциональности);
		Если ЛицензияФункциональности <> Неопределено
			И Не ЛицензияФункциональности.ВходитВТариф Тогда
			Результат.ФункциональностьНеДоступнаПоТарифу.Добавить(ИмяФункциональности);
			Возврат;
		КонецЕсли;
		
		Если ЛицензияФункциональности <> Неопределено
			И Не ЛицензияФункциональности.ЕстьСвободныеЛицензии Тогда
			Результат.ФункциональностьБезСвободныхЛицензий.Добавить(ИмяФункциональности);
			Возврат;
		КонецЕсли;
		
	Иначе
		
		Функциональность = СвойстваФункциональности(ИмяФункциональности, ОписаниеФункциональности);
		Если Функциональность.ДолжнаБытьОбязательноВключенаВПолномИнтерфейсе
			И Не ПростойИнтерфейсФункциональности() Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.НовыеЗначенияФункциональности.Вставить(ИмяФункциональности, НовоеЗначение);
	
КонецПроцедуры

#КонецОбласти

#Область РасширенныйФункционал

Функция РезультатЗапросаРасширенныйФункционал(ТолькоПроверка = Истина)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетнаяПолитика.Период КАК Период,
	|	УчетнаяПолитика.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика
	|ГДЕ
	|	(УчетнаяПолитика.УчитыватьРасходыПоЭлементамЗатрат
	|			ИЛИ УчетнаяПолитика.УчитыватьРасходыПоСтатьямЗатрат)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УчетнаяПолитика.Период,
	|	УчетнаяПолитика.Организация
	|ИЗ
	|	РегистрСведений.УчетнаяПолитика КАК УчетнаяПолитика
	|ГДЕ
	|	УчетнаяПолитика.РасходыОбслуживающихПроизводствВключатьВПрочиеРасходы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка,
	|	ДоговорыКонтрагентов.Представление КАК Представление
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.СчетаФактурыОтИмениОрганизации
	|	И ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СКомитентомНаЗакупку)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.Представление КАК Представление
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.НекредитнаяФинансоваяОрганизация";
	
	ИзменитьДляПроверкиТекстЗапроса(Запрос.Текст, ТолькоПроверка);

	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Результаты = Новый Структура;
	Результаты.Вставить("ЭлементыЗатрат", РезультатЗапроса[0]);
	Результаты.Вставить("ОбслуживающиеПроизводства", РезультатЗапроса[1]);
	Результаты.Вставить("СчетаФактурыЭкспедиторов", РезультатЗапроса[2]);
	Результаты.Вставить("НекредитныеФинансовыеОрганизации", РезультатЗапроса[3]);
	
	Возврат Результаты;
	
КонецФункции

Функция ОтказСнятьРасширенныйФункционал()
	
	СтруктураРезультатов = РезультатЗапросаРасширенныйФункционал();
	
	Для Каждого Результат Из СтруктураРезультатов Цикл
		Если НЕ Результат.Значение.Пустой() Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область ВестиУчетПоОрганизациям

Функция ОтказСнятьВестиУчетПоОрганизациям()
	
	ОтказСнять = Не УсловиеВыполненоВестиУчетПоОднойОрганизации(Ложь);
	
	Возврат ОтказСнять;
	
КонецФункции

Функция УсловиеВыполненоВестиУчетПоОднойОрганизации(ЭтоНовый) Экспорт
	
	ДопустимоеКоличествоСуществующихОрганизаций = ?(ЭтоНовый, 0, 1);
	
	Возврат Справочники.Организации.КоличествоОрганизаций() <= ДопустимоеКоличествоСуществующихОрганизаций;
	
КонецФункции

Функция ДоступнаФункциональностьУчетПоНесколькимОрганизациям() Экспорт
	
	Возврат Не ВариантыПриложений.ЭтоБазоваяВерсия();
	
КонецФункции

#КонецОбласти

#Область Сотрудники

Функция РезультатЗапросаЮридическиеЛица(ТолькоПроверка = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(Организации.Ссылка) КАК Представление,
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)";
	
	ИзменитьДляПроверкиТекстЗапроса(Запрос.Текст, ТолькоПроверка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция РезультатЗапросаСотрудники(ТолькоПроверка = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(Сотрудники.Ссылка) КАК Представление,
	|	Сотрудники.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники";
	
	ИзменитьДляПроверкиТекстЗапроса(Запрос.Текст, ТолькоПроверка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция РезультатЗапросаДокументыЗарплаты()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(БольничныйЛист.Ссылка) КАК Представление,
	|	БольничныйЛист.Ссылка КАК Ссылка,
	|	БольничныйЛист.Дата КАК Дата
	|ИЗ
	|	Документ.БольничныйЛист КАК БольничныйЛист
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(Отпуск.Ссылка),
	|	Отпуск.Ссылка,
	|	Отпуск.Дата
	|ИЗ
	|	Документ.Отпуск КАК Отпуск
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(НачислениеЗарплаты.Ссылка),
	|	НачислениеЗарплаты.Ссылка,
	|	НачислениеЗарплаты.Дата
	|ИЗ
	|	Документ.НачислениеЗарплаты КАК НачислениеЗарплаты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ОтражениеЗарплатыВБухучете.Ссылка),
	|	ОтражениеЗарплатыВБухучете.Ссылка,
	|	ОтражениеЗарплатыВБухучете.Дата
	|ИЗ
	|	Документ.ОтражениеЗарплатыВБухучете КАК ОтражениеЗарплатыВБухучете
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ВедомостьНаВыплатуЗарплатыВКассу.Ссылка),
	|	ВедомостьНаВыплатуЗарплатыВКассу.Ссылка,
	|	ВедомостьНаВыплатуЗарплатыВКассу.Дата
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВКассу КАК ВедомостьНаВыплатуЗарплатыВКассу
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ВедомостьНаВыплатуЗарплатыВБанк.Ссылка),
	|	ВедомостьНаВыплатуЗарплатыВБанк.Ссылка,
	|	ВедомостьНаВыплатуЗарплатыВБанк.Дата
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк КАК ВедомостьНаВыплатуЗарплатыВБанк
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ВедомостьНаВыплатуЗарплаты.Ссылка),
	|	ВедомостьНаВыплатуЗарплаты.Ссылка,
	|	ВедомостьНаВыплатуЗарплаты.Дата
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплаты КАК ВедомостьНаВыплатуЗарплаты
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка";
	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция РезультатЗапросаКадровыеДокументы(ТолькоПроверка = Истина)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(ПриемНаРаботу.Ссылка) КАК Представление,
	|	ПриемНаРаботу.Ссылка КАК Ссылка,
	|	ПриемНаРаботу.Дата КАК Дата
	|ИЗ
	|	Документ.ПриемНаРаботу КАК ПриемНаРаботу
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(КадровыйПеревод.Ссылка),
	|	КадровыйПеревод.Ссылка,
	|	КадровыйПеревод.Дата
	|ИЗ
	|	Документ.КадровыйПеревод КАК КадровыйПеревод
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(Увольнение.Ссылка),
	|	Увольнение.Ссылка,
	|	Увольнение.Дата
	|ИЗ
	|	Документ.Увольнение КАК Увольнение
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Ссылка";
	
	ИзменитьДляПроверкиТекстЗапроса(Запрос.Текст, ТолькоПроверка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ОтказСнятьВедетсяУчетЗарплатыКадров()
	
	ОтказСнять = НЕ РезультатЗапросаСотрудники().Пустой();
	
	Если НЕ ОтказСнять Тогда
		ОтказСнять = НЕ РезультатЗапросаЮридическиеЛица().Пустой();
	КонецЕсли;
	
	Возврат ОтказСнять;
	
КонецФункции

Функция ОтказСнятьИспользоватьКадровыйУчет()
	
	Если ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровВоВнешнейПрограмме") Тогда
		Возврат Ложь;
	Иначе
		Возврат НЕ РезультатЗапросаКадровыеДокументы().Пустой();
	КонецЕсли;
	
КонецФункции

Функция ТребуетсяДлительнаяОперацияИспользоватьКадровыйУчет()
	
	Если ОтказСнятьИспользоватьКадровыйУчет() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат УчетЗарплаты.НеобходимоСформироватьКадровыеПриказы();
	
КонецФункции

#Область ИспользоватьКадровыйУчет

Процедура ДействияПослеИзмененияИспользоватьКадровыйУчет(НовоеЗначение)
	
	НачатьТранзакцию();
	Если НовоеЗначение Тогда
		УчетЗарплаты.СформироватьКадровыеПриказы();
	КонецЕсли;	
	Константы.ПоддержкаСовместительства.Установить(НовоеЗначение);
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ВедетсяУчетУслугИностранныхИнтернетКомпаний

Функция РезультатЗапросаЭлектронныеУслугиИностранцев(ТолькоПроверка = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.ЭлектронныеУслуги";
	
	ИзменитьДляПроверкиТекстЗапроса(Запрос.Текст, ТолькоПроверка);
	
	УстановитьПривилегированныйРежим(Истина);
	
	МассивДоговоров = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивДоговоров;
	
КонецФункции

Функция ОтказСнятьЭлектронныеУслугиИностранцев()
	
	ОтказСнять = РезультатЗапросаЭлектронныеУслугиИностранцев().Количество() > 0;
	
	Возврат ОтказСнять;
	
КонецФункции

#КонецОбласти

#КонецЕсли