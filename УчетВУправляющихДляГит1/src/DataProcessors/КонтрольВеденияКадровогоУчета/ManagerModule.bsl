#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

Процедура ПроверитьКорректностьВидовЗанятостиСотрудников(Проверка, ПараметрыПроверки) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтрольВеденияУчета") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = РезультатПроверкиКорректностиВидовЗанятостиСотрудников();
	Если Не Результат.Пустой() Тогда
		
		МодульКонтрольВеденияУчета = ОбщегоНазначения.ОбщийМодуль("КонтрольВеденияУчета");
		
		ТаблицаПроблем = Результат.Выгрузить();
		
		Регистраторы = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаПроблем, "Регистратор", Истина);
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(Регистраторы, Null);
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(Регистраторы, Неопределено);
		
		Ответсвенные = ОбщегоНазначенияБЗК.ЗначениеРеквизитаОбъектов(Регистраторы, "Ответственный");
		
		Для Каждого СтрокаПроблемы Из ТаблицаПроблем Цикл
		
			Проблема = МодульКонтрольВеденияУчета.ОписаниеПроблемы(СтрокаПроблемы.Регистратор, ПараметрыПроверки);
			Проблема.Ответственный = Ответсвенные.получить(СтрокаПроблемы.Регистратор);
			
			Если СтрокаПроблемы.КонфликтыОсновныхВидовЗанятости Тогда
				УточнениеПроблемы = НСтр("ru='Зарегистрировано более одного основного вида занятости'");
			ИначеЕсли СтрокаПроблемы.НетОсновногоВидаЗанятости Тогда
				УточнениеПроблемы = НСтр("ru='Совместительство (или подработка), в отсутсвии рабочего места с основным видом занятости'");
			ИначеЕсли СтрокаПроблемы.НеЗаполненВидЗанятости Тогда
				УточнениеПроблемы = НСтр("ru='Не заполнен вид занятости в движениях по регистрам'");
			КонецЕсли;
			
			Проблема.УточнениеПроблемы = УточнениеПроблемы;
			
			КонтрольВеденияУчетаБЗК.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
		
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПроверкаПоследовательностиКадровыхСобытийСотрудников(Проверка, ПараметрыПроверки) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтрольВеденияУчета") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = РезультатПроверкиПоследовательностиКадровыхСобытийСотрудников();
	Если Не Результат.Пустой() Тогда
		
		МодульКонтрольВеденияУчета = ОбщегоНазначения.ОбщийМодуль("КонтрольВеденияУчета");
		
		ТаблицаПроблем = Результат.Выгрузить();
		
		Регистраторы = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаПроблем, "Регистратор", Истина);
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(Регистраторы, Null);
		ОбщегоНазначенияКлиентСервер.УдалитьВсеВхожденияЗначенияИзМассива(Регистраторы, Неопределено);
		
		Ответсвенные = ОбщегоНазначенияБЗК.ЗначениеРеквизитаОбъектов(Регистраторы, "Ответственный");
		
		Для Каждого СтрокаПроблемы Из ТаблицаПроблем Цикл
		
			Проблема = МодульКонтрольВеденияУчета.ОписаниеПроблемы(СтрокаПроблемы.Регистратор, ПараметрыПроверки);
			Проблема.Ответственный = Ответсвенные.получить(СтрокаПроблемы.Регистратор);
			
			Если СтрокаПроблемы.СобытияНачалаУчетаПовторяются Тогда
				УточнениеПроблемы = НСтр("ru='Дважды зарегистрованы события ""Прием на работу"" (""Начало учета"")'");
			ИначеЕсли СтрокаПроблемы.СобытияДоПриемаНаРаботу Тогда
				УточнениеПроблемы = НСтр("ru='Зарегистрированы кадровые события до события ""Прием на работу"" или ""Начало учета""'");
			ИначеЕсли СтрокаПроблемы.СобытияПослеУвольнения Тогда
				УточнениеПроблемы = НСтр("ru='Зарегистрированы кадровые события после события ""Увольнение""'");
			ИначеЕсли СтрокаПроблемы.СобытиеУвольненияБезПриема Тогда
				УточнениеПроблемы = НСтр("ru='Зарегистрировано кадровое событие ""Увольнение"", но нет события ""Прием на работу"" или ""Начало учета""'");
			ИначеЕсли СтрокаПроблемы.СобытиеУвольнениеВДеньНачалаУчета Тогда
				УточнениеПроблемы = НСтр("ru='Зарегистрировано кадровое событие ""Увольнение"" в день начала учета документом ""Прием на работу"" (""Начало учета"")'");
			КонецЕсли;
			
			Проблема.УточнениеПроблемы = УточнениеПроблемы;
			
			КонтрольВеденияУчетаБЗК.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
		
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПроверкаЗаполненностиДатыРождения(Проверка, ПараметрыПроверки) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтрольВеденияУчета") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = РезультатПроверкиДостаточностиВводаПервичнойИнформации();
	Если Не Результат.Пустой() Тогда
		
		МодульКонтрольВеденияУчета = ОбщегоНазначения.ОбщийМодуль("КонтрольВеденияУчета");
		
		Выборка = Результат.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
			
			УточнениеПроблемы = "";
			Если Не ЗначениеЗаполнено(Выборка.ДатаРождения) Тогда
				УточнениеПроблемы = НСтр("ru='Не задана дата рождения'");
			ИначеЕсли Выборка.ДатаРождения < ЗарплатаКадрыКлиентСервер.ДатаОтсчетаПериодическихСведений()
				Или Выборка.ДатаРождения > ДобавитьМесяц(ТекущаяДатаСеанса(), - 120) Тогда
				
				УточнениеПроблемы = СтрШаблон(НСтр("ru='Подозрительная дата рождения - %1.'"), Формат(Выборка.ДатаРождения, "ДЛФ=DD"));
				
			КонецЕсли;
			
			Если Не ПустаяСтрока(УточнениеПроблемы) Тогда
				
				Проблема = МодульКонтрольВеденияУчета.ОписаниеПроблемы(Выборка.Сотрудник, ПараметрыПроверки);
				Проблема.УточнениеПроблемы = УточнениеПроблемы;
				КонтрольВеденияУчетаБЗК.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПроверкаЗаполненностиИНН(Проверка, ПараметрыПроверки) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтрольВеденияУчета") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = РезультатПроверкиДостаточностиВводаПервичнойИнформации();
	Если Не Результат.Пустой() Тогда
		
		МодульКонтрольВеденияУчета = ОбщегоНазначения.ОбщийМодуль("КонтрольВеденияУчета");
		
		Выборка = Результат.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
			
			УточнениеПроблемы = "";
			РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(Выборка.ИНН, Ложь, УточнениеПроблемы);
			
			Если Не ПустаяСтрока(УточнениеПроблемы) Тогда
				
				Если Не ЗначениеЗаполнено(Выборка.ИНН) Тогда
					УточнениеПроблемы = НСтр("ru='Не задан ИНН.'") + Символы.ПС + УточнениеПроблемы;
				КонецЕсли;
				
				Проблема = МодульКонтрольВеденияУчета.ОписаниеПроблемы(Выборка.Сотрудник, ПараметрыПроверки);
				Проблема.УточнениеПроблемы = УточнениеПроблемы;
				КонтрольВеденияУчетаБЗК.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПроверкаЗаполненностиСНИЛС(Проверка, ПараметрыПроверки) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтрольВеденияУчета") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = РезультатПроверкиДостаточностиВводаПервичнойИнформации();
	Если Не Результат.Пустой() Тогда
		
		МодульКонтрольВеденияУчета = ОбщегоНазначения.ОбщийМодуль("КонтрольВеденияУчета");
		
		Выборка = Результат.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
			
			УточнениеПроблемы = "";
			Если Не ЗначениеЗаполнено(Выборка.СтраховойНомерПФР) Тогда
				УточнениеПроблемы = НСтр("ru='Не задан СНИЛС.'");
			Иначе
				РегламентированныеДанныеКлиентСервер.СтраховойНомерПФРСоответствуетТребованиям(Выборка.СтраховойНомерПФР, УточнениеПроблемы);
			КонецЕсли;
			
			Если Не ПустаяСтрока(УточнениеПроблемы) Тогда
				
				Проблема = МодульКонтрольВеденияУчета.ОписаниеПроблемы(Выборка.Сотрудник, ПараметрыПроверки);
				Проблема.УточнениеПроблемы = УточнениеПроблемы;
				КонтрольВеденияУчетаБЗК.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПроверкаЗаполненностиГражданства(Проверка, ПараметрыПроверки) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтрольВеденияУчета") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = РезультатПроверкиЗаполненностиГражданства();
	Если Не Результат.Пустой() Тогда
		
		МодульКонтрольВеденияУчета = ОбщегоНазначения.ОбщийМодуль("КонтрольВеденияУчета");
		
		Выборка = Результат.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
			
			УточнениеПроблемы = СтрШаблон(НСтр("ru='На дату начала учета (%1) нет сведений о стране гражданства.'"), Выборка.Период);
			
			Проблема = МодульКонтрольВеденияУчета.ОписаниеПроблемы(Выборка.Сотрудник, ПараметрыПроверки);
			Проблема.УточнениеПроблемы = УточнениеПроблемы;
			КонтрольВеденияУчетаБЗК.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПроверкаНаличияСтатусаФизическихЛицКакНалогоплательщиковНДФЛ(Проверка, ПараметрыПроверки) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтрольВеденияУчета") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = РезультатПроверкиНаличияСтатусаФизическихЛицКакНалогоплательщиковНДФЛ();
	Если Не Результат.Пустой() Тогда
		
		МодульКонтрольВеденияУчета = ОбщегоНазначения.ОбщийМодуль("КонтрольВеденияУчета");
		
		Выборка = Результат.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
			
			УточнениеПроблемы = СтрШаблон(НСтр("ru='На дату начала учета (%1) не задан статус налогоплательщика.'"), Выборка.Период);
			
			Проблема = МодульКонтрольВеденияУчета.ОписаниеПроблемы(Выборка.Сотрудник, ПараметрыПроверки);
			Проблема.УточнениеПроблемы = УточнениеПроблемы;
			КонтрольВеденияУчетаБЗК.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Процедура ПроверкаНаличияСтатусаЗастрахованныхФизическихЛиц(Проверка, ПараметрыПроверки) Экспорт
	
	Если Не ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.КонтрольВеденияУчета") Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = РезультатПроверкиНаличияСтатусаЗастрахованныхФизическихЛиц();
	Если Не Результат.Пустой() Тогда
		
		МодульКонтрольВеденияУчета = ОбщегоНазначения.ОбщийМодуль("КонтрольВеденияУчета");
		
		Выборка = Результат.Выбрать();
		Пока Выборка.СледующийПоЗначениюПоля("ФизическоеЛицо") Цикл
			
			УточнениеПроблемы = СтрШаблон(НСтр("ru='На дату начала учета (%1) не задан страховой статус.'"), Выборка.Период);
			
			Проблема = МодульКонтрольВеденияУчета.ОписаниеПроблемы(Выборка.Сотрудник, ПараметрыПроверки);
			Проблема.УточнениеПроблемы = УточнениеПроблемы;
			КонтрольВеденияУчетаБЗК.ЗаписатьПроблему(Проблема, ПараметрыПроверки);
			
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция РезультатПроверкиКорректностиВидовЗанятостиСотрудников()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МаксимальнаяДата", ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата());
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
		|	&МаксимальнаяДата КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТОтборРегистра";
	
	Запрос.Выполнить();
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"КадроваяИсторияСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТОтборРегистра"));
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"ВидыЗанятостиСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТОтборРегистра"));
	
	ОсновныеВидыЗанятости = Новый Массив;
	ОсновныеВидыЗанятости.Добавить(Перечисления.ВидыЗанятости.ОсновноеМестоРаботы);
	ОсновныеВидыЗанятости.Добавить(Перечисления.ВидыЗанятости.Совместительство);
	
	Запрос.УстановитьПараметр("ОсновныеВидыЗанятости", ОсновныеВидыЗанятости);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЕСТЬNULL(КадроваяИсторияСотрудников.Период, ВидыЗанятостиСотрудников.Период) КАК Период,
		|	ЕСТЬNULL(КадроваяИсторияСотрудников.ФизическоеЛицо, ВидыЗанятостиСотрудников.ФизическоеЛицо) КАК ФизическоеЛицо,
		|	ЕСТЬNULL(КадроваяИсторияСотрудников.ГоловнаяОрганизация, ВидыЗанятостиСотрудников.ГоловнаяОрганизация) КАК ГоловнаяОрганизация,
		|	ЕСТЬNULL(КадроваяИсторияСотрудников.Сотрудник, ВидыЗанятостиСотрудников.Сотрудник) КАК Сотрудник
		|ПОМЕСТИТЬ ВТВсеПериоды
		|ИЗ
		|	ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|		ПОЛНОЕ СОЕДИНЕНИЕ ВТВидыЗанятостиСотрудников КАК ВидыЗанятостиСотрудников
		|		ПО КадроваяИсторияСотрудников.Сотрудник = ВидыЗанятостиСотрудников.Сотрудник
		|			И КадроваяИсторияСотрудников.Период = ВидыЗанятостиСотрудников.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеПериоды.Период КАК Период,
		|	ВсеПериоды.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВсеПериоды.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ВЫРАЗИТЬ(ВсеПериоды.Сотрудник КАК Справочник.Сотрудники).ГоловнойСотрудник КАК ГоловнойСотрудник,
		|	ВсеПериоды.Сотрудник КАК Сотрудник,
		|	МАКСИМУМ(ВидыЗанятостиСотрудников.Период) КАК ПериодВидаЗанятости
		|ПОМЕСТИТЬ ВТВсеПериодыСПериодомВидовЗанятости
		|ИЗ
		|	ВТВсеПериоды КАК ВсеПериоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВидыЗанятостиСотрудников КАК ВидыЗанятостиСотрудников
		|		ПО ВсеПериоды.Сотрудник = ВидыЗанятостиСотрудников.Сотрудник
		|			И ВсеПериоды.Период >= ВидыЗанятостиСотрудников.Период
		|
		|СГРУППИРОВАТЬ ПО
		|	ВсеПериоды.Период,
		|	ВсеПериоды.Сотрудник,
		|	ВсеПериоды.ГоловнаяОрганизация,
		|	ВсеПериоды.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеПериоды.Период КАК Период,
		|	ВсеПериоды.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВсеПериоды.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ВсеПериоды.ГоловнойСотрудник КАК ГоловнойСотрудник,
		|	ВсеПериоды.Сотрудник КАК Сотрудник,
		|	ЕСТЬNULL(ВидыЗанятостиСотрудников.ВидЗанятости, ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)) КАК ВидЗанятости,
		|	ЕСТЬNULL(ВидыЗанятостиСотрудников.Регистратор, КадроваяИсторияСотрудников.Регистратор) КАК Регистратор
		|ПОМЕСТИТЬ ВТВсеПериодыСВидомЗанятости
		|ИЗ
		|	ВТВсеПериодыСПериодомВидовЗанятости КАК ВсеПериоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВидыЗанятостиСотрудников КАК ВидыЗанятостиСотрудников
		|		ПО ВсеПериоды.Сотрудник = ВидыЗанятостиСотрудников.Сотрудник
		|			И ВсеПериоды.ПериодВидаЗанятости = ВидыЗанятостиСотрудников.Период
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|		ПО ВсеПериоды.Сотрудник = КадроваяИсторияСотрудников.Сотрудник
		|			И ВсеПериоды.Период = КадроваяИсторияСотрудников.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВидыЗанятостиСотрудников.Период КАК Период,
		|	ВидыЗанятостиСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВидыЗанятостиСотрудников.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ВидыЗанятостиСотрудников.ГоловнойСотрудник КАК ГоловнойСотрудник,
		|	ВидыЗанятостиСотрудников.Сотрудник КАК Сотрудник,
		|	ВидыЗанятостиСотрудников.ВидЗанятости КАК ВидЗанятости,
		|	ЕСТЬNULL(МИНИМУМ(ВидыЗанятостиСотрудниковПериодыИзменений.Период), &МаксимальнаяДата) КАК СледующийПериод
		|ПОМЕСТИТЬ ВТПериодыИзмененияВидовЗанятости
		|ИЗ
		|	ВТВсеПериодыСВидомЗанятости КАК ВидыЗанятостиСотрудников
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВсеПериодыСВидомЗанятости КАК ВидыЗанятостиСотрудниковПериодыИзменений
		|		ПО ВидыЗанятостиСотрудников.Сотрудник = ВидыЗанятостиСотрудниковПериодыИзменений.Сотрудник
		|			И ВидыЗанятостиСотрудников.Период < ВидыЗанятостиСотрудниковПериодыИзменений.Период
		|			И ВидыЗанятостиСотрудников.ВидЗанятости <> ВидыЗанятостиСотрудниковПериодыИзменений.ВидЗанятости
		|
		|СГРУППИРОВАТЬ ПО
		|	ВидыЗанятостиСотрудников.Период,
		|	ВидыЗанятостиСотрудников.Сотрудник,
		|	ВидыЗанятостиСотрудников.ГоловнаяОрганизация,
		|	ВидыЗанятостиСотрудников.ФизическоеЛицо,
		|	ВидыЗанятостиСотрудников.ВидЗанятости,
		|	ВидыЗанятостиСотрудников.ГоловнойСотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	МИНИМУМ(ПериодыИзмененияВидовЗанятости.Период) КАК Период,
		|	ПериодыИзмененияВидовЗанятости.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ПериодыИзмененияВидовЗанятости.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ПериодыИзмененияВидовЗанятости.ГоловнойСотрудник КАК ГоловнойСотрудник,
		|	ПериодыИзмененияВидовЗанятости.Сотрудник КАК Сотрудник,
		|	ПериодыИзмененияВидовЗанятости.ВидЗанятости КАК ВидЗанятости,
		|	ВЫБОР
		|		КОГДА ПериодыИзмененияВидовЗанятости.СледующийПериод = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА ПериодыИзмененияВидовЗанятости.СледующийПериод
		|		КОГДА ПериодыИзмененияВидовЗанятости.СледующийПериод = &МаксимальнаяДата
		|			ТОГДА ПериодыИзмененияВидовЗанятости.СледующийПериод
		|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ПериодыИзмененияВидовЗанятости.СледующийПериод, ДЕНЬ, -1)
		|	КОНЕЦ КАК СледующийПериод
		|ПОМЕСТИТЬ ВТПериодыДействияВидовЗанятости
		|ИЗ
		|	ВТПериодыИзмененияВидовЗанятости КАК ПериодыИзмененияВидовЗанятости
		|
		|СГРУППИРОВАТЬ ПО
		|	ПериодыИзмененияВидовЗанятости.Сотрудник,
		|	ПериодыИзмененияВидовЗанятости.ГоловнаяОрганизация,
		|	ПериодыИзмененияВидовЗанятости.ФизическоеЛицо,
		|	ПериодыИзмененияВидовЗанятости.ВидЗанятости,
		|	ПериодыИзмененияВидовЗанятости.СледующийПериод,
		|	ПериодыИзмененияВидовЗанятости.ГоловнойСотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВсеПериодыСВидомЗанятости.Период КАК Период,
		|	ВсеПериодыСВидомЗанятости.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ВсеПериодыСВидомЗанятости.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
		|	ВсеПериодыСВидомЗанятости.ГоловнойСотрудник КАК ГоловнойСотрудник,
		|	ВсеПериодыСВидомЗанятости.Сотрудник КАК Сотрудник,
		|	ВсеПериодыСВидомЗанятости.ВидЗанятости КАК ВидЗанятости,
		|	ВсеПериодыСВидомЗанятости.Регистратор КАК Регистратор,
		|	NULL КАК СледующийПериод,
		|	NULL КАК ПериодКонфликта,
		|	NULL КАК СотрудникКонфликта,
		|	NULL КАК ВидЗанятостиКонфликта,
		|	ИСТИНА КАК НеЗаполненВидЗанятости,
		|	ЛОЖЬ КАК КонфликтыОсновныхВидовЗанятости,
		|	ЛОЖЬ КАК НетОсновногоВидаЗанятости
		|ИЗ
		|	ВТВсеПериодыСВидомЗанятости КАК ВсеПериодыСВидомЗанятости
		|ГДЕ
		|	ВсеПериодыСВидомЗанятости.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПериодыДействияВидовЗанятости.Период,
		|	ПериодыДействияВидовЗанятости.ФизическоеЛицо,
		|	ПериодыДействияВидовЗанятости.ГоловнаяОрганизация,
		|	ПериодыДействияВидовЗанятости.ГоловнойСотрудник,
		|	ПериодыДействияВидовЗанятости.Сотрудник,
		|	ПериодыДействияВидовЗанятости.ВидЗанятости,
		|	ВидыЗанятостиСотрудников.Регистратор,
		|	ПериодыДействияВидовЗанятости.СледующийПериод,
		|	ПериодыДействияВидовЗанятостиКонфликтующие.Период,
		|	ПериодыДействияВидовЗанятостиКонфликтующие.Сотрудник,
		|	ПериодыДействияВидовЗанятостиКонфликтующие.ВидЗанятости,
		|	ЛОЖЬ,
		|	ИСТИНА,
		|	ЛОЖЬ
		|ИЗ
		|	ВТПериодыДействияВидовЗанятости КАК ПериодыДействияВидовЗанятости
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыДействияВидовЗанятости КАК ПериодыДействияВидовЗанятостиКонфликтующие
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТВсеПериодыСВидомЗанятости КАК ВидыЗанятостиСотрудников
		|			ПО ПериодыДействияВидовЗанятостиКонфликтующие.Период = ВидыЗанятостиСотрудников.Период
		|				И ПериодыДействияВидовЗанятостиКонфликтующие.Сотрудник = ВидыЗанятостиСотрудников.Сотрудник
		|				И ПериодыДействияВидовЗанятостиКонфликтующие.ВидЗанятости = ВидыЗанятостиСотрудников.ВидЗанятости
		|		ПО ПериодыДействияВидовЗанятости.ГоловнаяОрганизация = ПериодыДействияВидовЗанятостиКонфликтующие.ГоловнаяОрганизация
		|			И ПериодыДействияВидовЗанятости.ФизическоеЛицо = ПериодыДействияВидовЗанятостиКонфликтующие.ФизическоеЛицо
		|			И ПериодыДействияВидовЗанятости.Сотрудник <> ПериодыДействияВидовЗанятостиКонфликтующие.Сотрудник
		|			И (ПериодыДействияВидовЗанятости.Период МЕЖДУ ПериодыДействияВидовЗанятостиКонфликтующие.Период И ПериодыДействияВидовЗанятостиКонфликтующие.СледующийПериод)
		|ГДЕ
		|	ПериодыДействияВидовЗанятости.ВидЗанятости В(&ОсновныеВидыЗанятости)
		|	И ПериодыДействияВидовЗанятостиКонфликтующие.ВидЗанятости В(&ОсновныеВидыЗанятости)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПериодыДействияВидовЗанятости.Период,
		|	ПериодыДействияВидовЗанятости.ФизическоеЛицо,
		|	ПериодыДействияВидовЗанятости.ГоловнаяОрганизация,
		|	ПериодыДействияВидовЗанятости.ГоловнойСотрудник,
		|	ПериодыДействияВидовЗанятости.Сотрудник,
		|	ПериодыДействияВидовЗанятости.ВидЗанятости,
		|	ВидыЗанятостиСотрудников.Регистратор,
		|	ПериодыДействияВидовЗанятости.СледующийПериод,
		|	ПериодыДействияВидовЗанятостиКонфликтующие.Период,
		|	ПериодыДействияВидовЗанятостиКонфликтующие.Сотрудник,
		|	ПериодыДействияВидовЗанятостиКонфликтующие.ВидЗанятости,
		|	ЛОЖЬ,
		|	ЛОЖЬ,
		|	ИСТИНА
		|ИЗ
		|	ВТПериодыДействияВидовЗанятости КАК ПериодыДействияВидовЗанятости
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВсеПериодыСВидомЗанятости КАК ВидыЗанятостиСотрудников
		|		ПО ПериодыДействияВидовЗанятости.Период = ВидыЗанятостиСотрудников.Период
		|			И ПериодыДействияВидовЗанятости.Сотрудник = ВидыЗанятостиСотрудников.Сотрудник
		|			И ПериодыДействияВидовЗанятости.ВидЗанятости = ВидыЗанятостиСотрудников.ВидЗанятости
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыДействияВидовЗанятости КАК ПериодыДействияВидовЗанятостиКонфликтующие
		|		ПО ПериодыДействияВидовЗанятости.ГоловнаяОрганизация = ПериодыДействияВидовЗанятостиКонфликтующие.ГоловнаяОрганизация
		|			И ПериодыДействияВидовЗанятости.ФизическоеЛицо = ПериодыДействияВидовЗанятостиКонфликтующие.ФизическоеЛицо
		|			И ПериодыДействияВидовЗанятости.Сотрудник <> ПериодыДействияВидовЗанятостиКонфликтующие.Сотрудник
		|			И (ПериодыДействияВидовЗанятости.Период МЕЖДУ ПериодыДействияВидовЗанятостиКонфликтующие.Период И ПериодыДействияВидовЗанятостиКонфликтующие.СледующийПериод)
		|			И (ПериодыДействияВидовЗанятостиКонфликтующие.ВидЗанятости В (&ОсновныеВидыЗанятости))
		|ГДЕ
		|	НЕ ПериодыДействияВидовЗанятости.ВидЗанятости В (&ОсновныеВидыЗанятости)
		|	И ПериодыДействияВидовЗанятости.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятости.ПустаяСсылка)
		|	И ПериодыДействияВидовЗанятостиКонфликтующие.ВидЗанятости ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	ГоловнаяОрганизация,
		|	Период,
		|	ГоловнойСотрудник,
		|	Сотрудник";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция РезультатПроверкиПоследовательностиКадровыхСобытийСотрудников()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МаксимальнаяДата", ЗарплатаКадрыПериодическиеРегистры.МаксимальнаяДата());
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаНачала,
		|	&МаксимальнаяДата КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТОтборРегистра";
	
	Запрос.Выполнить();
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	ПараметрыПостроения.ФормироватьСПериодичностьДень = Ложь;
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПараметрыПостроения.Отборы, "ВидСобытия", "<>" , Перечисления.ВидыКадровыхСобытий.НеподтвержденныеДанные);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"КадроваяИсторияСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра("ВТОтборРегистра"),
		ПараметрыПостроения);
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ОшибкиУчета.Период КАК Период,
		|	ОшибкиУчета.Регистратор КАК Регистратор,
		|	ОшибкиУчета.Сотрудник КАК Сотрудник,
		|	ОшибкиУчета.ФизическоеЛицо КАК ФизическоеЛицо,
		|	МАКСИМУМ(ОшибкиУчета.СобытияДоПриемаНаРаботу) КАК СобытияДоПриемаНаРаботу,
		|	МАКСИМУМ(ОшибкиУчета.СобытияПослеУвольнения) КАК СобытияПослеУвольнения,
		|	МАКСИМУМ(ОшибкиУчета.СобытиеУвольненияБезПриема) КАК СобытиеУвольненияБезПриема,
		|	МАКСИМУМ(ОшибкиУчета.СобытияНачалаУчетаПовторяются) КАК СобытияНачалаУчетаПовторяются,
		|	МАКСИМУМ(ОшибкиУчета.СобытиеУвольнениеВДеньНачалаУчета) КАК СобытиеУвольнениеВДеньНачалаУчета
		|ИЗ
		|	(ВЫБРАТЬ
		|		КадроваяИсторияСотрудников.Период КАК Период,
		|		КадроваяИсторияСотрудников.Регистратор КАК Регистратор,
		|		КадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
		|		КадроваяИсторияСотрудников.ФизическоеЛицо КАК ФизическоеЛицо,
		|		ИСТИНА КАК СобытияДоПриемаНаРаботу,
		|		ЛОЖЬ КАК СобытияПослеУвольнения,
		|		ЛОЖЬ КАК СобытиеУвольненияБезПриема,
		|		ЛОЖЬ КАК СобытияНачалаУчетаПовторяются,
		|		ЛОЖЬ КАК СобытиеУвольнениеВДеньНачалаУчета
		|	ИЗ
		|		ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудниковКонфликтующие
		|			ПО КадроваяИсторияСотрудников.Сотрудник = КадроваяИсторияСотрудниковКонфликтующие.Сотрудник
		|				И (НАЧАЛОПЕРИОДА(КадроваяИсторияСотрудников.Период, ДЕНЬ) >= НАЧАЛОПЕРИОДА(КадроваяИсторияСотрудниковКонфликтующие.Период, ДЕНЬ))
		|				И (КадроваяИсторияСотрудниковКонфликтующие.ВидСобытия В (ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием), ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.НачальныеДанные)))
		|	ГДЕ
		|		КадроваяИсторияСотрудниковКонфликтующие.Период ЕСТЬ NULL
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		КадроваяИсторияСотрудников.Период,
		|		КадроваяИсторияСотрудников.Регистратор,
		|		КадроваяИсторияСотрудников.Сотрудник,
		|		КадроваяИсторияСотрудников.ФизическоеЛицо,
		|		ЛОЖЬ,
		|		ИСТИНА,
		|		ЛОЖЬ,
		|		ЛОЖЬ,
		|		ЛОЖЬ
		|	ИЗ
		|		ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудниковКонфликтующие
		|			ПО КадроваяИсторияСотрудников.Сотрудник = КадроваяИсторияСотрудниковКонфликтующие.Сотрудник
		|				И (КадроваяИсторияСотрудников.Период < НАЧАЛОПЕРИОДА(КадроваяИсторияСотрудниковКонфликтующие.Период, ДЕНЬ))
		|	ГДЕ
		|		КадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|		И НЕ КадроваяИсторияСотрудниковКонфликтующие.Период ЕСТЬ NULL
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		КадроваяИсторияСотрудников.Период,
		|		КадроваяИсторияСотрудников.Регистратор,
		|		КадроваяИсторияСотрудников.Сотрудник,
		|		КадроваяИсторияСотрудников.ФизическоеЛицо,
		|		ЛОЖЬ,
		|		ЛОЖЬ,
		|		ИСТИНА,
		|		ЛОЖЬ,
		|		ЛОЖЬ
		|	ИЗ
		|		ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудниковКонфликтующие
		|			ПО КадроваяИсторияСотрудников.Сотрудник = КадроваяИсторияСотрудниковКонфликтующие.Сотрудник
		|				И (КадроваяИсторияСотрудниковКонфликтующие.ВидСобытия В (ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием), ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.НачальныеДанные)))
		|	ГДЕ
		|		КадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)
		|		И КадроваяИсторияСотрудниковКонфликтующие.Период ЕСТЬ NULL
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		КадроваяИсторияСотрудников.Период,
		|		КадроваяИсторияСотрудников.Регистратор,
		|		КадроваяИсторияСотрудников.Сотрудник,
		|		КадроваяИсторияСотрудников.ФизическоеЛицо,
		|		ЛОЖЬ,
		|		ЛОЖЬ,
		|		ЛОЖЬ,
		|		ИСТИНА,
		|		ЛОЖЬ
		|	ИЗ
		|		ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудниковКонфликтующие
		|			ПО КадроваяИсторияСотрудников.Сотрудник = КадроваяИсторияСотрудниковКонфликтующие.Сотрудник
		|				И КадроваяИсторияСотрудников.Регистратор <> КадроваяИсторияСотрудниковКонфликтующие.Регистратор
		|				И (КадроваяИсторияСотрудниковКонфликтующие.ВидСобытия В (ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием), ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.НачальныеДанные)))
		|	ГДЕ
		|		КадроваяИсторияСотрудников.ВидСобытия В (ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием), ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.НачальныеДанные))
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		КадроваяИсторияСотрудников.Период,
		|		КадроваяИсторияСотрудников.Регистратор,
		|		КадроваяИсторияСотрудников.Сотрудник,
		|		КадроваяИсторияСотрудников.ФизическоеЛицо,
		|		ЛОЖЬ,
		|		ЛОЖЬ,
		|		ЛОЖЬ,
		|		ЛОЖЬ,
		|		ИСТИНА
		|	ИЗ
		|		ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудников
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадроваяИсторияСотрудников КАК КадроваяИсторияСотрудниковКонфликтующие
		|			ПО КадроваяИсторияСотрудников.Сотрудник = КадроваяИсторияСотрудниковКонфликтующие.Сотрудник
		|				И (НАЧАЛОПЕРИОДА(КадроваяИсторияСотрудников.Период, ДЕНЬ) = НАЧАЛОПЕРИОДА(КадроваяИсторияСотрудниковКонфликтующие.Период, ДЕНЬ))
		|				И (КадроваяИсторияСотрудниковКонфликтующие.ВидСобытия В (ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Прием), ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.НачальныеДанные)))
		|	ГДЕ
		|		КадроваяИсторияСотрудников.ВидСобытия = ЗНАЧЕНИЕ(Перечисление.ВидыКадровыхСобытий.Увольнение)) КАК ОшибкиУчета
		|
		|СГРУППИРОВАТЬ ПО
		|	ОшибкиУчета.Период,
		|	ОшибкиУчета.Регистратор,
		|	ОшибкиУчета.Сотрудник,
		|	ОшибкиУчета.ФизическоеЛицо";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция РезультатПроверкиДостаточностиВводаПервичнойИнформации()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТРаботающиеСотрудникиФизическихЛиц(Запрос.МенеджерВременныхТаблиц, НачалоМесяца(НачалоМесяца(ТекущаяДатаСеанса()) - 1));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РаботающиеСотрудникиФизическихЛиц.Сотрудник КАК Сотрудник,
		|	РаботающиеСотрудникиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ФизическиеЛица.ДатаРождения КАК ДатаРождения,
		|	ФизическиеЛица.ИНН КАК ИНН,
		|	ФизическиеЛица.СтраховойНомерПФР КАК СтраховойНомерПФР
		|ИЗ
		|	ВТРаботающиеСотрудникиФизическихЛиц КАК РаботающиеСотрудникиФизическихЛиц
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
		|		ПО РаботающиеСотрудникиФизическихЛиц.ФизическоеЛицо = ФизическиеЛица.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	Сотрудник";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция РезультатПроверкиЗаполненностиГражданства()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТРаботающиеСотрудникиФизическихЛиц(Запрос.МенеджерВременныхТаблиц);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"ГражданствоФизическихЛиц",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТРаботающиеСотрудникиФизическихЛиц", "ФизическоеЛицо"));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РаботающиеСотрудникиФизическихЛиц.Период КАК Период,
		|	РаботающиеСотрудникиФизическихЛиц.Сотрудник КАК Сотрудник,
		|	РаботающиеСотрудникиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	ВТРаботающиеСотрудникиФизическихЛиц КАК РаботающиеСотрудникиФизическихЛиц
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТГражданствоФизическихЛицСрезПоследних КАК ГражданствоФизическихЛиц
		|		ПО РаботающиеСотрудникиФизическихЛиц.ФизическоеЛицо = ГражданствоФизическихЛиц.ФизическоеЛицо
		|ГДЕ
		|	ГражданствоФизическихЛиц.Страна = ЗНАЧЕНИЕ(Справочник.СтраныМира.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	Период";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция РезультатПроверкиНаличияСтатусаФизическихЛицКакНалогоплательщиковНДФЛ()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТРаботающиеСотрудникиФизическихЛиц(Запрос.МенеджерВременныхТаблиц);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"СтатусФизическихЛицКакНалогоплательщиковНДФЛ",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТРаботающиеСотрудникиФизическихЛиц", "ФизическоеЛицо"));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РаботающиеСотрудникиФизическихЛиц.Период КАК Период,
		|	РаботающиеСотрудникиФизическихЛиц.Сотрудник КАК Сотрудник,
		|	РаботающиеСотрудникиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	ВТРаботающиеСотрудникиФизическихЛиц КАК РаботающиеСотрудникиФизическихЛиц
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтатусФизическихЛицКакНалогоплательщиковНДФЛСрезПоследних КАК СтатусФизическихЛицКакНалогоплательщиковНДФЛ
		|		ПО РаботающиеСотрудникиФизическихЛиц.ФизическоеЛицо = СтатусФизическихЛицКакНалогоплательщиковНДФЛ.ФизическоеЛицо
		|ГДЕ
		|	СтатусФизическихЛицКакНалогоплательщиковНДФЛ.Статус = ЗНАЧЕНИЕ(Справочник.СтатусыНалогоплательщиковПоНДФЛ.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	Период";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Функция РезультатПроверкиНаличияСтатусаЗастрахованныхФизическихЛиц()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТРаботающиеСотрудникиФизическихЛиц(Запрос.МенеджерВременныхТаблиц);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистраСрезПоследних(
		"СтатусыЗастрахованныхФизическихЛиц",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(
			"ВТРаботающиеСотрудникиФизическихЛиц", "ФизическоеЛицо"));
	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	РаботающиеСотрудникиФизическихЛиц.Период КАК Период,
		|	РаботающиеСотрудникиФизическихЛиц.Сотрудник КАК Сотрудник,
		|	РаботающиеСотрудникиФизическихЛиц.ФизическоеЛицо КАК ФизическоеЛицо
		|ИЗ
		|	ВТРаботающиеСотрудникиФизическихЛиц КАК РаботающиеСотрудникиФизическихЛиц
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтатусыЗастрахованныхФизическихЛицСрезПоследних КАК СтатусыЗастрахованныхФизическихЛиц
		|		ПО РаботающиеСотрудникиФизическихЛиц.ФизическоеЛицо = СтатусыЗастрахованныхФизическихЛиц.ФизическоеЛицо
		|ГДЕ
		|	СтатусыЗастрахованныхФизическихЛиц.ВидЗастрахованногоЛица = ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизическоеЛицо,
		|	Период";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса;
	
КонецФункции

Процедура СоздатьВТРаботающиеСотрудникиФизическихЛиц(МенеджерВременныхТаблиц, ДатаНачала = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	ТаблицаФильтра = Новый ТаблицаЗначений;
	ТаблицаФильтра.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	ТаблицаФильтра.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	
	СтрокаТаблицыФильтра = ТаблицаФильтра.Добавить();
	Если ЗначениеЗаполнено(ДатаНачала) Тогда
		СтрокаТаблицыФильтра.ДатаНачала = ДатаНачала;
	КонецЕсли;
	
	СобытияНачалаУчета = Новый Массив;
	СобытияНачалаУчета.Добавить(Перечисления.ВидыКадровыхСобытий.Прием);
	СобытияНачалаУчета.Добавить(Перечисления.ВидыКадровыхСобытий.НачальныеДанные);
	
	ПараметрыПостроения = ЗарплатаКадрыОбщиеНаборыДанных.ПараметрыПостроенияДляСоздатьВТИмяРегистра();
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПараметрыПостроения.Отборы, "ВидСобытия", "В" , СобытияНачалаУчета);
	
	ЗарплатаКадрыОбщиеНаборыДанных.ДобавитьВКоллекциюОтбор(
		ПараметрыПостроения.Отборы, "ЭтоГоловнойСотрудник", "=" , Истина);
	
	ЗарплатаКадрыОбщиеНаборыДанных.СоздатьВТИмяРегистра(
		"КадроваяИсторияСотрудников",
		Запрос.МенеджерВременныхТаблиц,
		Ложь,
		ЗарплатаКадрыОбщиеНаборыДанных.ОписаниеФильтраДляСоздатьВТИмяРегистра(ТаблицаФильтра),
		ПараметрыПостроения,
		"ВТРаботающиеСотрудникиФизическихЛиц");
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли