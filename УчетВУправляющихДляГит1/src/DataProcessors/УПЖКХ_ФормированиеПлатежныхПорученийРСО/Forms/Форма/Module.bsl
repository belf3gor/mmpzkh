#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьЗначенияСвойств(Объект, Параметры);
	
	Объект.НачалоПериода = НачалоМесяца(ОбщегоНазначения.ТекущаяДатаПользователя());
	Объект.КонецПериода  = КонецМесяца(Объект.НачалоПериода);
	
	ОтборНачалоПериодаОтбора = Объект.НачалоПериода;
	ОтборКонецПериодаОтбора  = Объект.КонецПериода;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(Объект.СчетОрганизации, 
													   Объект.Организация, 
													   ВалютаРегламентированногоУчета);
	КонецЕсли;
	
	ВосстановитьНастройки();
	
	Если ЗначениеЗаполнено(Объект.НачалоПериода) И ЗначениеЗаполнено(Объект.КонецПериода) 
	   И ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ДанныеОбОплатахЗаполнитьНаСервере();
		
	КонецЕсли;
	
	ДатаФормированияПлатежныхПоручений = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	
	УстановитьУсловноеОформление();
	
	УправлениеФормой(ЭтотОбъект);
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаИтогиОстатки);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	УстановитьОтборПоСпискуПлатежныхПоручений();
	
КонецПроцедуры

&НаКлиенте
// Обработчик - обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	Если Объект.НачалоПериода > Объект.КонецПериода Тогда
		Объект.КонецПериода = Объект.НачалоПериода;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	Если Объект.КонецПериода < Объект.НачалоПериода Тогда
		Объект.НачалоПериода = Объект.КонецПериода;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", Объект.НачалоПериода, Объект.КонецПериода);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериод, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Объект, РезультатВыбора, "НачалоПериода,КонецПериода");
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаОтбораПриИзменении(Элемент)
	
	Если ОтборНачалоПериодаОтбора > ОтборКонецПериодаОтбора Тогда
		ОтборКонецПериодаОтбора = ОтборНачалоПериодаОтбора;
	КонецЕсли;
	
	УстановитьОтборПоСпискуПлатежныхПоручений();
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаОтбораПриИзменении(Элемент)
	
	Если ОтборКонецПериодаОтбора < ОтборНачалоПериодаОтбора Тогда
		ОтборНачалоПериодаОтбора = ОтборКонецПериодаОтбора;
	КонецЕсли;
	
	УстановитьОтборПоСпискуПлатежныхПоручений();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодОтбора(Команда)
	
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", ОтборНачалоПериодаОтбора, ОтборКонецПериодаОтбора);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодОтбораЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода", ПараметрыВыбора, Элементы.ВыбратьПериодОтбора, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодОтбораЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОтборНачалоПериодаОтбора = РезультатВыбора.НачалоПериода;
	ОтборКонецПериодаОтбора  = РезультатВыбора.КонецПериода;
	
	УстановитьОтборПоСпискуПлатежныхПоручений();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;
	
	УстановитьОтборПоСпискуПлатежныхПоручений();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетОрганизацииПриИзменении(Элемент)
	
	УстановитьОтборПоСпискуПлатежныхПоручений();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроцентВознагражденияПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицы

&НаКлиенте
Процедура ДанныеОбОплатахОплатитьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеОбОплатах.ТекущиеДанные;
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеОбОплатахСуммаПриИзменении(Элемент)
	
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "КомандаНастройка".
Процедура КомандаНастройка(Команда)
	
	АдресНастроекВХранилище = ПоместитьНастройкиВХранилище();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаНастройкаЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.УПЖКХ_ФормированиеПлатежныхПорученийРСО.Форма.ФормаНастройки", Новый Структура("АдресНастроекВХранилище", АдресНастроекВХранилище), , , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата опроса команды "КомандаНастройка".
Процедура КомандаНастройкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		ПолучитьНастройкиИзХранилища(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "СоздатьПлатежныеДокументы".
Процедура СоздатьПлатежныеДокументы(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если СуммаВыбраноКОплате = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Нет сумм, отмеченных для оплаты'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ДанныеОбОплатах");
		Возврат;
	КонецЕсли;
	
	СозданныеДокументы = СоздатьДокументыНаСервере();
	
	Если СозданныеДокументы <> Неопределено Тогда
		ОткрытьСозданныеДокументы(СозданныеДокументы);
	КонецЕсли;
	
	Элементы.СписокПлатежныхПоручений.Обновить();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ДанныеОбОплатахЗаполнить".
Процедура ДанныеОбОплатахЗаполнить(Команда)
	
	Если ПроверитьЗаполнение() Тогда
		ДанныеОбОплатахЗаполнитьНаСервере();
	КонецЕсли;
	
	УстановитьОтборПоСпискуПлатежныхПоручений();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ДанныеОбОплатахОтметитьВсе".
Процедура ДанныеОбОплатахОтметитьВсе(Команда)
	
	УстановитьОплатуСтрокТаблицы(ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ДанныеОбОплатахСнятьВсе".
Процедура ДанныеОбОплатахСнятьВсе(Команда)
	
	УстановитьОплатуСтрокТаблицы(ЭтотОбъект, Ложь);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "СсылкаУправлениеДоговорамиСПоставщикамиУслуг".
Процедура СсылкаУправлениеДоговорамиСПоставщикамиУслуг(Команда)
	
	ОткрытьФорму("Документ.УПЖКХ_УправлениеДоговорамиСПоставщикамиУслуг.ФормаСписка", Новый Структура("ОтборОрганизация", Объект.Организация));
	
КонецПроцедуры

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти

#Область РаботаСНастройками

&НаСервере
// Процедура восстановления настроек.
Процедура ВосстановитьНастройки()
	
	СтруктураПараметров = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("ФормированиеПлатежныхПорученийРСО", "Настройки");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		СтруктураПараметров.Свойство("Организация",           Объект.Организация);
		СтруктураПараметров.Свойство("СчетОрганизации",       Объект.СчетОрганизации);
		СтруктураПараметров.Свойство("ПроцентВознаграждения", Объект.ПроцентВознаграждения);
		
		врГруппировочныеУслуги = Новый ТаблицаЗначений;
		врСоответствиеУслуг    = Новый ТаблицаЗначений;
		
		СтруктураПараметров.Свойство("Настройка_ГруппировочныеУслуги", врГруппировочныеУслуги);
		Если НЕ врГруппировочныеУслуги = Неопределено Тогда
			Объект.Настройка_ГруппировочныеУслуги.Загрузить(врГруппировочныеУслуги);
		КонецЕсли;
		
		СтруктураПараметров.Свойство("Настройка_СоответствиеУслуг", врСоответствиеУслуг);
		Если НЕ врСоответствиеУслуг = Неопределено Тогда
			Объект.Настройка_СоответствиеУслуг.Загрузить(врСоответствиеУслуг);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура сохранения настроек.
Процедура СохранитьНастройки()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация",                    Объект.Организация);
	СтруктураПараметров.Вставить("СчетОрганизации",                Объект.СчетОрганизации);
	СтруктураПараметров.Вставить("ПроцентВознаграждения",          Объект.ПроцентВознаграждения);
	СтруктураПараметров.Вставить("Настройка_ГруппировочныеУслуги", Объект.Настройка_ГруппировочныеУслуги.Выгрузить());
	СтруктураПараметров.Вставить("Настройка_СоответствиеУслуг",    Объект.Настройка_СоответствиеУслуг.Выгрузить());
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("ФормированиеПлатежныхПорученийРСО", "Настройки", СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСВременнымХранилищем

&НаСервере
// Помещает настройки во временное хранилище.
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("Настройка_ГруппировочныеУслуги", Объект.Настройка_ГруппировочныеУслуги.Выгрузить());
	СтруктураНастроек.Вставить("Настройка_СоответствиеУслуг",    Объект.Настройка_СоответствиеУслуг.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
// Получает настройки из временного хранилища.
Функция ПолучитьНастройкиИзХранилища(АдресНастроекВХранилище)
	
	СтруктураНастроек = ПолучитьИзВременногоХранилища(АдресНастроекВХранилище);
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		
		Если СтруктураНастроек.Свойство("Настройка_ГруппировочныеУслуги") Тогда
			Объект.Настройка_ГруппировочныеУслуги.Загрузить(СтруктураНастроек.Настройка_ГруппировочныеУслуги);
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("Настройка_СоответствиеУслуг") Тогда
			Объект.Настройка_СоответствиеУслуг.Загрузить(СтруктураНастроек.Настройка_СоответствиеУслуг);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
// Процедура установки заголовка сворачиваемой группы.
Функция ПолучитьЗаголовокГруппыСписокПлатежныхПоручений(Форма)
	
	Объект = Форма.Объект;
	
	ЗаголовокГруппы = НСтр("ru='Список платежных поручений'") + " по " + Объект.Организация;
	
	Возврат ЗаголовокГруппы;
	
КонецФункции // ПолучитьЗаголовокГруппыСписокПлатежныхПоручений()

&НаКлиентеНаСервереБезКонтекста
// Устанавливает видимость элементов формы.
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ГруппаСписокПлатежныхПоручений.Заголовок = ПолучитьЗаголовокГруппыСписокПлатежныхПоручений(Форма);
	Элементы.ГруппаСписокПлатежныхПоручений.ЗаголовокСвернутогоОтображения = Элементы.ГруппаСписокПлатежныхПоручений.Заголовок;
	
КонецПроцедуры

&НаСервере
// Процедура устанавливает условное оформление формы.
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	РаботаСБанкамиБП.УстановитьЦветовоеВыделениеСостоянийПлатежек(УсловноеОформление);
	
КонецПроцедуры

&НаСервере
// Процедура вызывается при изменении организации.
Процедура ОрганизацияПриИзмененииНаСервере()
	
	УчетДенежныхСредствБП.УстановитьБанковскийСчет(Объект.СчетОрганизации, 
													Объект.Организация, 
													ВалютаРегламентированногоУчета);
	
	ДанныеОбОплатахЗаполнитьНаСервере();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
// Процедура вызывается при заполнении табличной части оплат.
Процедура ДанныеОбОплатахЗаполнитьНаСервере()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ПолучитьДанныеОбОплатахЗаУслугиЖКХ();
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	УстановитьОплатуСтрокТаблицы(ЭтотОбъект, Истина);
	
	ОтборКонтрагенты.ЗагрузитьЗначения(Объект.ДанныеОбОплатах.Выгрузить(,"Поставщик").ВыгрузитьКолонку("Поставщик"));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
// Процедура устанавливает отметки "Оплатить".
Процедура УстановитьОплатуСтрокТаблицы(Форма, ЗначениеОтметки)
	
	Для каждого СтрокаТаблицы Из Форма.Объект.ДанныеОбОплатах Цикл
		СтрокаТаблицы.Оплатить = ЗначениеОтметки;
	КонецЦикла;
	
	ОбновитьИтоги(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
// Процедура вызывается при заполнении табличной части оплат.
Процедура ОбновитьИтоги(Форма)
	
	Объект = Форма.Объект;
	
	Форма.СуммаВыбраноКОплате = 0;
	Форма.СуммаЗаСодержание   = 0;
	
	Для каждого СтрокаТаблицы Из Объект.ДанныеОбОплатах Цикл
		
		Если СтрокаТаблицы.Оплатить Тогда
			
			Форма.СуммаВыбраноКОплате = Форма.СуммаВыбраноКОплате + СтрокаТаблицы.Сумма;
			
			Если СтрокаТаблицы.ЯвляетсяУслугойСодержания Тогда
				Форма.СуммаЗаСодержание = Форма.СуммаЗаСодержание + СтрокаТаблицы.Сумма;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.СуммаВознаграждения = Форма.СуммаВыбраноКОплате * Объект.ПроцентВознаграждения / 100;
	Форма.СуммаКОплате        = ?(Форма.СуммаЗаСодержание = 0, Форма.СуммаВыбраноКОплате, Форма.СуммаВыбраноКОплате - Форма.СуммаВознаграждения);
	
КонецПроцедуры

&НаСервере
// Процедура вызывается при создании платежных документов.
Функция СоздатьДокументыНаСервере()
	
	Отбор = Новый Структура("Оплатить", Истина);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СуммаВознаграждения", ЭтаФорма.СуммаВознаграждения);
	СтруктураПараметров.Вставить("СуммаЗаСодержание",   ЭтаФорма.СуммаЗаСодержание);
	СтруктураПараметров.Вставить("ДанныеОбОплатах",     ПоместитьВоВременноеХранилище(Объект.ДанныеОбОплатах.Выгрузить(Отбор), УникальныйИдентификатор));
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	// Создаем платежные документы.
	Возврат ОбработкаОбъект.СоздатьПлатежныеДокументы(СтруктураПараметров);
	
КонецФункции

&НаКлиенте
// Процедура открывает форму списка документа "Платежное поручение" и выделяет в списке созданнеы платежные документы.
Процедура ОткрытьСозданныеДокументы(СозданныеДокументы)
	
	Если СозданныеДокументы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПервыйДокумент = СозданныеДокументы[0];
	ТипСозданныхДокументов = ТипЗнч(ПервыйДокумент);
	
	ОповеститьОбИзменении(ТипСозданныхДокументов);
	
	Если СозданныеДокументы.Количество() = 1 Тогда
		
		ПоказатьЗначение(, ПервыйДокумент);
		
	Иначе
		
		Отбор = Новый Структура;
		Отбор.Вставить("Организация", Объект.Организация);
		
		Если ТипСозданныхДокументов = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
			Отбор.Вставить("СчетОрганизации", Объект.СчетОрганизации);
			ИмяФормыСписка = "Документ.ПлатежноеПоручение.ФормаСписка";
		Иначе
			Возврат;
		КонецЕсли;
		
		СписокДокументов = Новый СписокЗначений;
		СписокДокументов.ЗагрузитьЗначения(СозданныеДокументы);
		СписокВыделения = Новый Структура("Ссылка", СписокДокументов);
		ПараметрыФормы = Новый Структура("Отбор, ТекущаяСтрока, СписокВыделения", Отбор, ПервыйДокумент, СписокВыделения);
		ОткрытьФорму(ИмяФормыСписка, ПараметрыФормы, ЭтотОбъект, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура устанавливает отборы в динамическом списке платежных поручений.
Процедура УстановитьОтборПоСпискуПлатежныхПоручений()
	
	УстановитьОтбор("Организация");
	УстановитьОтбор("СчетОрганизации");
	УстановитьОтбор("Контрагент", ОтборКонтрагенты, ВидСравненияКомпоновкиДанных.ВСписке);
	УстановитьОтбор("ДатаОтбора", ОтборНачалоПериодаОтбора, ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
	
	Элемент = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Элемент.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ДатаОтбора");
	Элемент.ВидСравнения     = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	Элемент.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	Элемент.ПравоеЗначение   = ОтборКонецПериодаОтбора;
	Элемент.Использование    = Истина;
	
КонецПроцедуры

&НаКлиенте
// Процедура устанавливает отбор в динамическом списке платежных поручений.
Процедура УстановитьОтбор(ИмяПоля, ПравоеЗначение = Неопределено, ВидСравнения = Неопределено)
	
	Если ПравоеЗначение = Неопределено Тогда
		ПравоеЗначение = Объект[ИмяПоля];
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УдалитьЭлементыГруппыОтбора(
		ЭтаФорма.Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор, 
		ИмяПоля);
		
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(
		ЭтаФорма.Список.КомпоновщикНастроек.ФиксированныеНастройки.Отбор,
		ИмяПоля,
		ПравоеЗначение,
		?(ВидСравнения = Неопределено, ВидСравненияКомпоновкиДанных.Равно, ВидСравнения),
		,
		Истина);
	
КонецПроцедуры

#КонецОбласти
