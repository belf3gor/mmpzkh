
Функция ПроверитьАналитикуСчетовУчетаКапитала(Интерактивно = Ложь) Экспорт
	
	// Проверяем по доступу
	Если НЕ ПравоДоступа("Просмотр", Метаданные.Обработки.ПроверкаАналитикиСчетовУчетаКапитала) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверяем только в главном узле
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверяем только если есть прво просмотра "Операции"
	Если НЕ ПравоДоступа("Просмотр", Метаданные.Документы.ОперацияБух) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ Интерактивно Тогда
		НеПроверятьПриНачалеРаботы = ХранилищеОбщихНастроек.Загрузить("ПроверкаАналитикиСчетовУчетаКапитала", "НеПроверятьПриНачалеРаботы");
		Если НеПроверятьПриНачалеРаботы = Истина Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Проверяем только если есть вообще ценные бумаги
	Если НЕ ЕстьЦенныеБумаги() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверяем только если есть хоть одна проводка с пустой аналитикой
	Если НЕ ЕстьНекорректныеПроводки() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

Функция ЕстьЦенныеБумаги()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЦенныеБумаги.Ссылка КАК ЦеннаяБумага
	|ИЗ
	|	Справочник.ЦенныеБумаги КАК ЦенныеБумаги";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ЕстьНекорректныеПроводки()
	
	МассивОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
	
	// Проверяем только если есть хоть одна проводка с пустой аналитикой
	СписокСчетов = Новый СписокЗначений;
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.УставныйКапитал_ОбыкновенныеАкции);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.УставныйКапитал_ПривилегированныеАкции);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.СобственныеАкции_ПривилегированныеАкции);
	СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.СобственныеАкции_ОбыкновенныеАкции);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСчетов",СписокСчетов);
	Запрос.УстановитьПараметр("МассивОрганизаций",МассивОрганизаций);
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Хозрасчетный.Регистратор КАК Документ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
	|		ПО Хозрасчетный.Период = ХозрасчетныйСубконто.Период
	|			И Хозрасчетный.Регистратор = ХозрасчетныйСубконто.Регистратор
	|			И Хозрасчетный.НомерСтроки = ХозрасчетныйСубконто.НомерСтроки
	|			И (ХозрасчетныйСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ЦенныеБумаги))
	|			И (ХозрасчетныйСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Дебет))
	|ГДЕ
	|	Хозрасчетный.СчетДт В(&СписокСчетов)
	|	И Хозрасчетный.Организация В(&МассивОрганизаций)
	|	И (ХозрасчетныйСубконто.Значение ЕСТЬ NULL
	|			ИЛИ ХозрасчетныйСубконто.Значение = НЕОПРЕДЕЛЕНО
	|			ИЛИ ХозрасчетныйСубконто.Значение = ЗНАЧЕНИЕ(Справочник.ЦенныеБумаги.ПустаяСсылка))
	|	И Хозрасчетный.Активность
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	Хозрасчетный.Регистратор
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Субконто КАК ХозрасчетныйСубконто
	|		ПО Хозрасчетный.Период = ХозрасчетныйСубконто.Период
	|			И Хозрасчетный.Регистратор = ХозрасчетныйСубконто.Регистратор
	|			И Хозрасчетный.НомерСтроки = ХозрасчетныйСубконто.НомерСтроки
	|			И (ХозрасчетныйСубконто.Вид = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ЦенныеБумаги))
	|			И (ХозрасчетныйСубконто.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияБухгалтерии.Кредит))
	|ГДЕ
	|	Хозрасчетный.СчетКт В(&СписокСчетов)
	|	И Хозрасчетный.Организация В(&МассивОрганизаций)
	|	И (ХозрасчетныйСубконто.Значение ЕСТЬ NULL
	|			ИЛИ ХозрасчетныйСубконто.Значение = НЕОПРЕДЕЛЕНО
	|			ИЛИ ХозрасчетныйСубконто.Значение = ЗНАЧЕНИЕ(Справочник.ЦенныеБумаги.ПустаяСсылка))
	|	И Хозрасчетный.Активность";
	
	УстановитьПривилегированныйРежим(Истина);
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции
