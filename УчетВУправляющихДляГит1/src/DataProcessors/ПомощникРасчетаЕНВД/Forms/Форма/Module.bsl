&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ПараметрыОбработчикаОжиданияАктуализации;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЕстьПравоИзмененияПоказателей = ПравоДоступа("Изменение", Метаданные.Справочники.ВидыДеятельностиЕНВД);
	ЕстьПравоРасчетаНалога        = ПравоДоступа("Изменение", Метаданные.Документы.РегламентнаяОперация);
	ЕстьПравоСозданияДекларации   = ПравоДоступа("Изменение", Метаданные.Документы.РегламентированныйОтчет);
	ЕстьПравоУплатыНалога         = ПравоДоступа("Изменение", Метаданные.Документы.ПлатежноеПоручение)
		И ПравоДоступа("Изменение", Метаданные.Документы.РасходныйКассовыйОрдер);
	
	Параметры.Свойство("Организация",  Объект.Организация);
	Параметры.Свойство("Правило",      Правило);
	Параметры.Свойство("Период",       Объект.Период);
	
	Если Параметры.ВызовИзСпискаЗадач Тогда
		ПредставлениеПериода = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
			НачалоКвартала(Объект.Период), КонецКвартала(Объект.Период), Истина);
		Заголовок = СтрШаблон(НСтр("ru = 'Отчетность по ЕНВД за %1'"), ПредставлениеПериода);
	Иначе
		ВыполнениеИзКомандногоМеню = Истина;
		Заголовок = НСтр("ru = 'Отчетность по ЕНВД'");
		Если Не ЗначениеЗаполнено(Объект.Период) Тогда
			Объект.Период = ДобавитьМесяц(ОбщегоНазначения.ТекущаяДатаПользователя(), -3)
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		КонецЕсли;
	КонецЕсли;
	
	Объект.Период = НачалоКвартала(Объект.Период);
	Объект.Организация = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Объект.Организация);
	ОрганизацияПредставление = Объект.Организация;
	
	ЗаполнитьСписокВыбораНалоговыхИнспекций(ЭтотОбъект);
	
	ЗаполнитьВидыДеятельностиРассчитатьНалог();
	
	ТребуетсяПроверятьАктуальность = ПустаяСтрока(СообщениеОбОшибке);
	ДанныеУчетаАктуальны = Не ТребуетсяПроверятьАктуальность;
	ВозможнаБыстраяАктуализация = Истина;
	
	Используется1СОтчетность = РегламентированнаяОтчетностьБП.Используется1СОтчетность();
	ИспользоватьНесколькоОрганизацийБухгалтерскийУчет = Справочники.Организации.ИспользуетсяНесколькоОрганизаций();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПередНачаломДлительнойОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		Отказ = Истина;
		
		Если ЗавершениеРаботы Тогда
			Возврат;
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Данные были изменены. Сохранить изменения?'"), РежимДиалогаВопрос.ДаНетОтмена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьДанныеФормы();
		Закрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") И ВыбранноеЗначение.Свойство("ВидДеятельности") Тогда
		
		Если ВыбранноеЗначение.Свойство("УстановитьПометкуУдаления") И ВыбранноеЗначение.Свойство("ДатаПрекращения") Тогда
			УдалитьПрекратитьДеятельность(
				ВыбранноеЗначение.ВидДеятельности,
				ВыбранноеЗначение.УстановитьПометкуУдаления,
				ВыбранноеЗначение.ДатаПрекращения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзмененВидДеятельностиОрганизации" Тогда
		
		Если Параметр = Объект.Организация Тогда
			ЗаполнитьСписокВыбораНалоговыхИнспекций(ЭтотОбъект);
			ЗаполнитьВидыДеятельностиРассчитатьНалог();
			ПередНачаломДлительнойОперации();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_Организации" Тогда
		
		Если Источник = Объект.Организация Тогда
			ЗаполнитьВидыДеятельностиРассчитатьНалог();
			ПередНачаломДлительнойОперации();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_РасходыНаКассовуюТехнику" Тогда
		
		ЗаполнитьВидыДеятельностиРассчитатьНалог();
		ПередНачаломДлительнойОперации();
		
	ИначеЕсли ИмяСобытия = "Запись_ПлатежныйДокумент_УплатаНалогов" Тогда
		
		// Записан документ ПлатежноеПоручение или РасходныйКассовыйОрдер с видом операции "Уплата налога"
		
		Налог = Неопределено;
		
		Если ТипЗнч(Параметр) = Тип("Структура")
			И Параметр.Свойство("Организация") И Параметр.Организация = Объект.Организация
			И Параметр.Свойство("Налог", Налог) И ЗначениеЗаполнено(Налог) Тогда
			
			ПриЗаписиПлатежногоДокументаНаУплатуНалога(Налог);
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ИзменениеВыписки" Тогда
		
		ОпределитьПорядокДействий();
		ТребуетсяПроверятьАктуальность = Ложь;
		УправлениеФормой(ЭтотОбъект);
		
	ИначеЕсли ИмяСобытия = "Позиционирование в списке отчетов"
		Или ИмяСобытия = "Изменение пометки удаления объекта"
		Или ИмяСобытия = "Запись_РегламентированныйОтчет" Тогда
		
		// Записан регламентированный отчет
		
		Если ТипЗнч(Параметр) = Тип("Структура")
			И Параметр.Свойство("Организация") И Параметр.Организация = Объект.Организация
			И Параметр.Свойство("Ссылка") И ЭтоРегламентированныйОтчетЕНВД(Параметр.Ссылка) Тогда
			
			ОпределитьПорядокДействий();
			ТребуетсяПроверятьАктуальность = Ложь;
			УправлениеФормой(ЭтотОбъект);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СообщениеОбОшибкеОбработкаНавигационнойСсылки(Элемент, ТекстСсылки, СтандартнаяОбработка)
	
	Если ТекстСсылки = "УчетнаяПолитикаОрганизации" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОписаниеОповещенияОЗакрытии
			= Новый ОписаниеОповещения("СообщениеОбОшибкеОбработкаНавигационнойСсылкиЗавершение", ЭтотОбъект);
		
		КлючЗаписиУчетнойПолитики = КлючЗаписиУчетнойПолитики(Объект.Организация, Объект.Период);
		
		Если КлючЗаписиУчетнойПолитики <> Неопределено Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Ключ", КлючЗаписиУчетнойПолитики);
			
			ОткрытьФорму("РегистрСведений.НастройкиСистемыНалогообложения.ФормаЗаписи",
				ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Иначе
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец", Объект.Организация));
			
			ОткрытьФорму("РегистрСведений.НастройкиСистемыНалогообложения.ФормаСписка",
				ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеОбОшибкеОбработкаНавигационнойСсылкиЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	СмещениеИндекса = 0;
	ЗаполнитьВидыДеятельностиРассчитатьНалог();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ПериодПослеВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("НачалоПериода", НачалоКвартала(Объект.Период));
	ПараметрыВыбора.Вставить("КонецПериода",  КонецКвартала(Объект.Период));
	ПараметрыВыбора.Вставить("ВидПериода",    ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПериодЗавершениеВыбора", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаКвартал", ПараметрыВыбора, Элементы.Период, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодЗавершениеВыбора(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		Объект.Период = НачалоКвартала(РезультатВыбора.НачалоПериода);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		НачалоПериода = ВыбранноеЗначение.НачалоПериода;
		КонецПериода = ВыбранноеЗначение.КонецПериода;
	Иначе
		НачалоПериода = ВыбранноеЗначение;
		КонецПериода = ВыбранноеЗначение;
	КонецЕсли;
	
	ВыборПериодаКлиент.ПериодОбработкаВыбора(
		Элемент,
		НачалоПериода,
		СтандартнаяОбработка,
		ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал"),
		Период,
		Объект.Период,
		КонецПериода);
		
	ПериодПослеВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	НачалоПериода = НачалоКвартала(Объект.Период);
	КонецПериода  = КонецКвартала(Объект.Период);
	
	ВыборПериодаКлиент.ПериодАвтоПодбор(
		Элемент,
		Текст,
		ДанныеВыбора,
		Ожидание,
		СтандартнаяОбработка,
		ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал"),
		Период,
		НачалоПериода,
		КонецПериода);
	
	Объект.Период = НачалоПериода;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПредставление = Объект.Организация;
	
	ЗаполнитьСписокВыбораНалоговыхИнспекций(ЭтотОбъект);
	
	ПериодПослеВыбора();
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрацияВНалоговомОрганеПриИзменении(Элемент)
	
	СмещениеИндекса = 0;
	ЗаполнитьВидыДеятельностиРассчитатьНалог();
	ТребуетсяПроверятьАктуальность = Ложь;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФизическийПоказатель1ПриИзменении(Элемент)
	
	ФизическийПоказательПриИзменении(Элемент.Имя, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ФизическийПоказатель2ПриИзменении(Элемент)
	
	ФизическийПоказательПриИзменении(Элемент.Имя, 2);
	
КонецПроцедуры

&НаКлиенте
Процедура ФизическийПоказатель3ПриИзменении(Элемент)
	
	ФизическийПоказательПриИзменении(Элемент.Имя, 3);
	
КонецПроцедуры

&НаКлиенте
Процедура ФизическийПоказательПриИзменении(ИмяЭлемента, НомерМесяца)
	
	ИндексВидаДеятельности = ИндексЭлемента(ИмяЭлемента, "ФизическийПоказатель");
	Если ИндексВидаДеятельности <> Неопределено Тогда
		ВидДеятельности = Объект.ВидыДеятельности[ИндексВидаДеятельности + СмещениеИндекса];
		ВидДеятельности["ФизическийПоказатель" + НомерМесяца] = ЭтотОбъект[РеквизитФизическийПоказатель(ИндексВидаДеятельности, НомерМесяца)];
		ВидДеятельности.Модифицированность = Истина;
		РассчитатьНалог(ИндексВидаДеятельности);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КорректирующийКоэффициент0ПриИзменении(Элемент)
	
	КорректирующийКоэффициентПриИзменении(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура КорректирующийКоэффициент1ПриИзменении(Элемент)
	
	КорректирующийКоэффициентПриИзменении(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура КорректирующийКоэффициент2ПриИзменении(Элемент)
	
	КорректирующийКоэффициентПриИзменении(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура КорректирующийКоэффициентПриИзменении(ИмяЭлемента)
	
	ИндексВидаДеятельности = ИндексЭлемента(ИмяЭлемента, "КорректирующийКоэффициент");
	Если ИндексВидаДеятельности <> Неопределено Тогда
		ВидДеятельности = Объект.ВидыДеятельности[ИндексВидаДеятельности + СмещениеИндекса];
		ВидДеятельности.КорректирующийКоэффициент = ЭтотОбъект[РеквизитКорректирующийКоэффициент(ИндексВидаДеятельности)];
		ВидДеятельности.Модифицированность = Истина;
		РассчитатьНалог(ИндексВидаДеятельности);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяСтавка0ПриИзменении(Элемент)
	
	НалоговаяСтавкаПриИзменении(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяСтавка1ПриИзменении(Элемент)
	
	НалоговаяСтавкаПриИзменении(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяСтавка2ПриИзменении(Элемент)
	
	НалоговаяСтавкаПриИзменении(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяСтавкаПриИзменении(ИмяЭлемента)
	
	ИндексВидаДеятельности = ИндексЭлемента(ИмяЭлемента, "НалоговаяСтавка");
	Если ИндексВидаДеятельности <> Неопределено Тогда
		ВидДеятельности = Объект.ВидыДеятельности[ИндексВидаДеятельности + СмещениеИндекса];
		ВидДеятельности.НалоговаяСтавка = ЭтотОбъект[РеквизитНалоговаяСтавка(ИндексВидаДеятельности)];
		ВидДеятельности.Модифицированность = Истина;
		РассчитатьНалог(ИндексВидаДеятельности);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаНалога0Нажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СуммаНалогаНажатие(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаНалога1Нажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СуммаНалогаНажатие(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаНалога2Нажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СуммаНалогаНажатие(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаНалогаНажатие(ИмяЭлемента)
	
	Если Модифицированность Тогда
		ЗаписатьДанныеФормы();
	КонецЕсли;
	
	НастройкиОтчета = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	Отбор = НастройкиОтчета.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
	
	ИмяРеквизитаВидДеятельности = СтрЗаменить(ИмяЭлемента, "СуммаНалога", "ВидДеятельности");
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, ИмяРеквизитаВидДеятельности) Тогда
		
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(Отбор, "ВидДеятельности", ЭтотОбъект[ИмяРеквизитаВидДеятельности]);
		
	КонецЕсли;
	
	НастройкиОтчета.ДополнительныеСвойства.Вставить("Организация", Объект.Организация);
	НастройкиОтчета.ДополнительныеСвойства.Вставить("НачалоПериода", НачалоКвартала(Объект.Период));
	НастройкиОтчета.ДополнительныеСвойства.Вставить("КонецПериода", КонецКвартала(Объект.Период));
	НастройкиОтчета.ДополнительныеСвойства.Вставить("ПоказательБУ", Истина);
	НастройкиОтчета.ДополнительныеСвойства.Вставить("ВыводитьРасходы", Ложь);
	
	ПараметрыОтчета = Новый Структура();
	
	ПараметрыОтчета.Вставить("ВидРасшифровки", 2);
	ПараметрыОтчета.Вставить("ПользовательскиеНастройки", НастройкиОтчета);
	ПараметрыОтчета.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФорму("Отчет.СправкаРасчетЕдиногоНалогаНаВмененныйДоход.Форма.ФормаОтчета", ПараметрыОтчета, , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьРасходыНаОнлайнКассыОбработкаНавигационнойСсылки(Элемент, ТекстСсылки, СтандартнаяОбработка)
	
	Если ТекстСсылки = "ДобавитьРасходыНаККТ" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Дата", КонецКвартала(Объект.Период));
		ЗначенияЗаполнения.Вставить("УменьшаемыйНалог",
			ПредопределенноеЗначение("Перечисление.ВидыНалоговУменьшаемыхНаРасходыККТ.ЕНВД"));
		ЗначенияЗаполнения.Вставить("Организация", Объект.Организация);
		ЗначенияЗаполнения.Вставить("РегистрацияВНалоговомОргане", Объект.РегистрацияВНалоговомОргане);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ПараметрыФормы.Вставить("ВызовИзПомощника",   Истина);
		
		ОткрытьФорму("Документ.РасходыНаОнлайнКассыУменьшающиеНалоги.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
		
	ИначеЕсли ТекстСсылки = "ОткрытьРасходыНаККТ" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Отбор = Новый Структура;
		Отбор.Вставить("УменьшаемыйНалог", ПредопределенноеЗначение("Перечисление.ВидыНалоговУменьшаемыхНаРасходыККТ.ЕНВД"));
		Отбор.Вставить("Организация", Объект.Организация);
		Отбор.Вставить("РегистрацияВНалоговомОргане", Объект.РегистрацияВНалоговомОргане);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Отбор);
		ПараметрыФормы.Вставить("УменьшаемыйНалог",
			ПредопределенноеЗначение("Перечисление.ВидыНалоговУменьшаемыхНаРасходыККТ.ЕНВД"));
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("НалоговыйПериод", Объект.Период);
		ПараметрыФормы.Вставить("РегистрацияВНалоговомОргане", Объект.РегистрацияВНалоговомОргане);
		
		ОткрытьФорму("Документ.РасходыНаОнлайнКассыУменьшающиеНалоги.Форма.ФормаСписокРасходов", ПараметрыФормы, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйВычетВзносыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьСправкуРасчетУменьшающихРасходов();
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйВычетВсегоНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьСправкуРасчетУменьшающихРасходов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДобавитьВидДеятельности(Команда)
	
	Если Модифицированность Тогда
		ЗаписатьДанныеФормы();
	КонецЕсли;
	
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Владелец", Объект.Организация);
	ЗначенияЗаполнения.Вставить("ДатаНачала", НачалоКвартала(Объект.Период));
	ЗначенияЗаполнения.Вставить("РегистрацияВНалоговомОргане", Объект.РегистрацияВНалоговомОргане);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Справочник.ВидыДеятельностиЕНВД.ФормаОбъекта",
		СтруктураПараметров, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидДеятельности0(Команда)
	
	ИзменитьВидДеятельности(0);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидДеятельности1(Команда)
	
	ИзменитьВидДеятельности(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидДеятельности2(Команда)
	
	ИзменитьВидДеятельности(2);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидДеятельности(ИндексВидаДеятельности)
	
	Если Модифицированность Тогда
		ЗаписатьДанныеФормы();
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Ключ", Объект.ВидыДеятельности[ИндексВидаДеятельности + СмещениеИндекса].ВидДеятельности);
	
	ОткрытьФорму("Справочник.ВидыДеятельностиЕНВД.ФормаОбъекта",
		СтруктураПараметров, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВидДеятельности0(Команда)
	
	УдалитьВидДеятельности(0);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВидДеятельности1(Команда)
	
	УдалитьВидДеятельности(1);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВидДеятельности2(Команда)
	
	УдалитьВидДеятельности(2);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВидДеятельности(ИндексВидаДеятельности)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Период", Объект.Период);
	ДополнительныеПараметры.Вставить("ВидДеятельности", Объект.ВидыДеятельности[ИндексВидаДеятельности + СмещениеИндекса].ВидДеятельности);
	
	ОткрытьФорму("Обработка.ПомощникРасчетаЕНВД.Форма.ПрекращениеДеятельности", ДополнительныеПараметры, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	Если Модифицированность Тогда
		ЗаписатьДанныеФормы();
	КонецЕсли;
	
	СмещениеИндекса = СмещениеИндекса + МаксКоличествоВидовДеятельностиНаОднойСтранице();
	ЗаполнитьВидыДеятельностиПриСмещенииИндекса();
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Если Модифицированность Тогда
		ЗаписатьДанныеФормы();
	КонецЕсли;
	
	СмещениеИндекса = СмещениеИндекса - МаксКоличествоВидовДеятельностиНаОднойСтранице();
	СмещениеИндекса = Макс(СмещениеИндекса, 0);
	
	ЗаполнитьВидыДеятельностиПриСмещенииИндекса();
	
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьДанныеУчета(Команда)
	
	АктуализироватьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДекларацию(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		ЗаписатьДанныеФормы();
	КонецЕсли;
	
	ТекстОшибки = "";
	ОписанияДействий = ОписанияДействий(Объект.Организация, Объект.РегистрацияВНалоговомОргане, СпособОплаты, Объект.Период, ТекстОшибки);
	Если ОписанияДействий.Декларация <> Неопределено Тогда
		ВыполнениеЗадачБухгалтераКлиент.ВыполнитьДействие(ОписанияДействий.Декларация);
	ИначеЕсли Не ПустаяСтрока(ТекстОшибки) Тогда
		ПоказатьПредупреждение(, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекларацияПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Модифицированность Тогда
		ЗаписатьДанныеФормы();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Декларация) Тогда
		ПоказатьЗначение(, Декларация);
	Иначе
		ТекстОшибки = "";
		ОписанияДействий = ОписанияДействий(Объект.Организация, Объект.РегистрацияВНалоговомОргане, СпособОплаты, Объект.Период, ТекстОшибки);
		Если ОписанияДействий.Декларация <> Неопределено Тогда
			ВыполнениеЗадачБухгалтераКлиент.ВыполнитьДействие(ОписанияДействий.Декларация);
		ИначеЕсли Не ПустаяСтрока(ТекстОшибки) Тогда
			ПоказатьПредупреждение(, ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УплатитьНалог(Команда)
	
	СоздатьДокументУплатыНалога();
	
КонецПроцедуры

&НаКлиенте
Процедура УплатитьНалогБанк(Команда)
	
	СпособОплаты = ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.БанковскийПеревод");
	СоздатьДокументУплатыНалога();
	
КонецПроцедуры

&НаКлиенте
Процедура УплатитьНалогКасса(Команда)
	
	СпособОплаты = ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.НаличнымиПоКвитанции");
	СоздатьДокументУплатыНалога();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСверку(Команда)
	
	ОповещениеВыполнениеСверки = Новый ОписаниеОповещения("ОбработатьВыполнениеСверки", ЭтотОбъект);
	ОткрытьФорму(ОписаниеДействияСверка.ИмяФормы, ОписаниеДействияСверка.ПараметрыФормы, ЭтаФорма,,,,ОповещениеВыполнениеСверки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееНаИТС(Команда)
	
	АдресНаИТС = ЗадачиБухгалтераКлиентСервер.СсылкаНаИТС(Срок);
	ПерейтиПоНавигационнойСсылке(АдресНаИТС);
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументУплатыПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Модифицированность Тогда
		ЗаписатьДанныеФормы();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументУплаты) Тогда
		ПоказатьЗначение(, ДокументУплаты);
	Иначе
		ТекстОшибки = "";
		ОписанияДействий = ОписанияДействий(Объект.Организация, Объект.РегистрацияВНалоговомОргане, СпособОплаты, Объект.Период, ТекстОшибки);
		Если ОписанияДействий.ПлатежПоДаннымДекларации <> Неопределено Тогда
			ВыполнениеЗадачБухгалтераКлиент.ВыполнитьДействие(ОписанияДействий.ПлатежПоДаннымДекларации);
		ИначеЕсли Не ПустаяСтрока(ТекстОшибки) Тогда
			ПоказатьПредупреждение(, ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПередНачаломДлительнойОперации()
	
	СтатусФоновогоЗадания = НСтр("ru = 'Выполняется проверка данных...'");
	
	ТребуетсяПроверятьАктуальность = ПустаяСтрока(СообщениеОбОшибке);
	ДанныеУчетаАктуальны = Не ТребуетсяПроверятьАктуальность;
	ВозможнаБыстраяАктуализация = Истина;
	
	УправлениеФормой(ЭтотОбъект);
	
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьАктуальность", 0.1, Истина);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// Шапка
	
	Элементы.СообщениеОбОшибке.Видимость = Не ПустаяСтрока(Форма.СообщениеОбОшибке);
	
	Форма.Период = ВыборПериодаКлиентСервер.ПолучитьПредставлениеПериодаОтчета(
		ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал"),
		НачалоКвартала(Объект.Период),
		КонецКвартала(Объект.Период));
	
	Элементы.Период.Видимость      = Форма.ВыполнениеИзКомандногоМеню Или Не ЗначениеЗаполнено(Объект.Период);
	Элементы.Организация.Видимость = Форма.ВыполнениеИзКомандногоМеню Или Не ЗначениеЗаполнено(Объект.Организация);
	
	Элементы.ОрганизацияПредставление.Видимость = Не Форма.ВыполнениеИзКомандногоМеню
		Или Не Форма.ИспользоватьНесколькоОрганизацийБухгалтерскийУчет;
	
	Элементы.РегистрацияВНалоговомОргане.Видимость = (Форма.КоличествоРегистрацийВНалоговомОргане > 1)
		Или (Не ЗначениеЗаполнено(Объект.РегистрацияВНалоговомОргане) И Форма.КоличествоРегистрацийВНалоговомОргане > 0);
		
	Элементы.РегистрацияВНалоговомОргане.Доступность = ЗначениеЗаполнено(Объект.Организация);
	
	// Виды деятельности
	
	ЕстьПравоИзменения = Форма.ЕстьПравоИзмененияПоказателей;
	
	МаксКоличествоВидовДеятельностиНаОднойСтранице = МаксКоличествоВидовДеятельностиНаОднойСтранице();
	Для ИндексВидаДеятельности = 0 По МаксКоличествоВидовДеятельностиНаОднойСтранице - 1 Цикл
		
		Элементы[РеквизитКорректирующийКоэффициент(ИндексВидаДеятельности)].ТолькоПросмотр = Не ЕстьПравоИзменения;
		Элементы[РеквизитНалоговаяСтавка(ИндексВидаДеятельности)].ТолькоПросмотр = Не ЕстьПравоИзменения;
		
		Элементы[СтрШаблон("УдалитьВидДеятельности%1", ИндексВидаДеятельности)].Видимость = ЕстьПравоИзменения;
		
	КонецЦикла;
	
	ЭтоПерваяСтраница = (Форма.СмещениеИндекса = 0);
	
	КоличествоВидовДеятельности = Объект.ВидыДеятельности.Количество();
	ЭтоПоследняяСтраница = (КоличествоВидовДеятельности = 0)
		Или (КоличествоВидовДеятельности <= Форма.СмещениеИндекса + МаксКоличествоВидовДеятельностиНаОднойСтранице());
	
	Элементы.ДобавитьВидДеятельности.Видимость = ЕстьПравоИзменения И ЭтоПоследняяСтраница И Форма.ПлательщикЕНВД;
	
	Элементы.Далее.Видимость = Не ЭтоПоследняяСтраница;
	Элементы.Назад.Видимость = Не ЭтоПерваяСтраница;
	
	// Расходы на онлайн-кассы
	
	Элементы.ГруппаРасходыНаОнлайнКассы.Видимость = Форма.ПрименяетсяВычетПоОнлайнКассам И ЭтоПоследняяСтраница;
	Форма.НадписьРасходыНаОнлайнКассы = ТекстНадписиРасходыНаОнлайнКассы(
		Форма.РасходыНаОнлайнКассыВсего,
		Форма.РасходыНаОнлайнКассыУчтеноРанее,
		Форма.РасходыНаОнлайнКассыНачальныйОстаток);
	
	// Команда и статус расчета налога
	
	ВыполняетсяФоновоеЗадание = Форма.ТребуетсяПроверятьАктуальность
		Или ЗначениеЗаполнено(Форма.ИдентификаторЗаданияАктуализации)
		Или ЗначениеЗаполнено(Форма.ИдентификаторЗаданияПроверкиАктуализации);
	
	Элементы.АктуализироватьДанныеУчета.Видимость = ЭтоПоследняяСтраница
		И (Форма.ТребуетсяПроверятьАктуальность
			И Элементы.АктуализироватьДанныеУчета.Видимость // на время анализа не скрываем кнопку
			Или Не Форма.ДанныеУчетаАктуальны               // нужно рассчитывать
				И НЕ Форма.ВозможнаБыстраяАктуализация      // это сложный расчет
				И ПустаяСтрока(Форма.СообщениеОбОшибке));   // допустимо рассчитывать
	Элементы.АктуализироватьДанныеУчета.Доступность = Форма.ЕстьПравоРасчетаНалога И НЕ ВыполняетсяФоновоеЗадание;
	Элементы.ГруппаСтатусФоновогоЗадания.Видимость = ЭтоПоследняяСтраница И ВыполняетсяФоновоеЗадание;
	
	// Расчет налога
	
	ПоказыватьДействия = ЭтоПоследняяСтраница И Форма.ДанныеУчетаАктуальны;
	
	Если ПоказыватьДействия Тогда
		ОтобразитьРасчетНалогаНаФорме(Форма);
	КонецЕсли;
	
	Элементы.ГруппаРасчетНалога.Видимость = ПоказыватьДействия;
	
	// Декларация и уплата налога
	
	Элементы.ДекларацияПредставление.Видимость  = ПоказыватьДействия И Форма.ЕстьДекларация;
	Элементы.СформироватьДекларацию.Видимость   = ПоказыватьДействия И Не Форма.ЕстьДекларация;
	Элементы.СформироватьДекларацию.Доступность = Форма.ЕстьПравоСозданияДекларации;
	
	НадоВыбратьСпособОплаты = НЕ ЗначениеЗаполнено(Форма.СпособОплаты);
	
	Элементы.ДокументУплатыПредставление.Видимость = ПоказыватьДействия И Форма.ЕстьДокументУплаты;
	Элементы.УплатитьНалогПодменю.Видимость = ПоказыватьДействия И Не Форма.ЕстьДокументУплаты И НадоВыбратьСпособОплаты;
	Элементы.УплатитьНалог.Видимость        = ПоказыватьДействия И Не Форма.ЕстьДокументУплаты И НЕ НадоВыбратьСпособОплаты;
	
	Элементы.УплатитьНалог.Доступность      = Форма.ЕстьПравоУплатыНалога;
	Элементы.УплатитьНалогБанк.Доступность  = Форма.ЕстьПравоУплатыНалога;
	Элементы.УплатитьНалогКасса.Доступность = Форма.ЕстьПравоУплатыНалога;
	
	// Сверка
	Если Форма.Используется1СОтчетность Тогда
		Элементы.ГруппаСверка.Видимость = Истина;
		Если Форма.СверкаВыполнена Тогда
			Элементы.ВыполнитьСверкуСсылка.Заголовок = Форма.ЗапросНаСверкуНаименование;
			Элементы.ВыполнитьСверкуСсылка.Видимость = Истина;
			Элементы.ВыполнитьСверку.Видимость       = Ложь;
		Иначе
			Элементы.ВыполнитьСверкуСсылка.Видимость = Ложь;
			Элементы.ВыполнитьСверку.Видимость       = Истина;
		КонецЕсли;
		
		ДоступнаСверка = ЗначениеЗаполнено(Объект.Организация)
			И ЗначениеЗаполнено(Объект.Период)
			И ЗначениеЗаполнено(Объект.РегистрацияВНАлоговомОргане);
		Элементы.ВыполнитьСверку.Доступность = ДоступнаСверка;
	Иначе
		Элементы.ГруппаСверка.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ПодробнееНаИТС.Видимость = ЗначениеЗаполнено(Объект.Период);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиПлатежногоДокументаНаУплатуНалога(Налог)
	
	ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Налог, "ВидНалога");
	Если ВидНалога = Перечисления.ВидыНалогов.ЕНВД Тогда
		ОпределитьПорядокДействий();
		ТребуетсяПроверятьАктуальность = Ложь;
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОписанияДействий(Знач Организация, Знач РегистрацияВНалоговомОргане, Знач СпособОплаты, Знач Период, ТекстОшибки = "")
	
	ОписанияДействий = УчетЕНВД.ОписанияДействийПомощника(
		Организация, РегистрацияВНалоговомОргане, СпособОплаты, Период, ТекстОшибки);
	
	Возврат ОписанияДействий;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьВидыДеятельностиПриСмещенииИндекса()
	
	Если Модифицированность Тогда
		ЗаписатьДанныеФормы();
	КонецЕсли;
	
	ОтобразитьВидыДеятельностиНаФорме();
	
	РассчитатьНалогПоВсемВидамДеятельности();
	ТребуетсяПроверятьАктуальность = Ложь;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидыДеятельностиРассчитатьНалог()
	
	Если Модифицированность Тогда
		ЗаписатьДанныеФормы();
	КонецЕсли;
	
	ПрочитатьВидыДеятельности();
	
	ОтобразитьВидыДеятельностиНаФорме();
	
	СпособОплаты = ВыполнениеЗадачБухгалтера.СпособУплатыНалогаВзноса(Объект.Организация);
	
	// Расчет налога зависит от того, есть ли у предпринимателя наемные работники
	ЭтоЮрЛицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Объект.Организация);
	ИспользуетсяТрудНаемныхРаботников = ЭтоЮрЛицо Или УчетЗарплаты.ИПИспользуетТрудНаемныхРаботниковЗаПериод(Объект.Организация,
		НачалоКвартала(Объект.Период), КонецКвартала(Объект.Период));
	ПлательщикЕНВД = УчетнаяПолитика.ПлательщикЕНВДЗаПериод(Объект.Организация,
		НачалоКвартала(Объект.Период), КонецКвартала(Объект.Период));
	УменьшатьНалогНаВзносыИПРаботодателя = Не ЭтоЮрЛицо
		И УчетЕНВД.НалогУменьшаетсяНаФиксированныеВзносыИПРаботодателей(Объект.Период);
	ПрименяетсяВычетПоОнлайнКассам = УчетЕНВД.ПрименяетсяВычетПоОнлайнКассам(Объект.Организация, Объект.Период);
	
	Если ЗначениеЗаполнено(Объект.Организация) И Не ПлательщикЕНВД Тогда
		СообщениеОбОшибке = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Организация не является плательщиком ЕНВД.'"),
			" ",
			НСтр("ru = 'Измените настройки'"),
			" ",
			Новый ФорматированнаяСтрока(НСтр("ru = 'системы налогообложения'"), , , , "УчетнаяПолитикаОрганизации"), ".");
		Элементы.СообщениеОбОшибке.Видимость = Истина;
	Иначе
		СообщениеОбОшибке = "";
		Элементы.СообщениеОбОшибке.Видимость = Ложь;
	КонецЕсли;
	
	РассчитатьНалогПоВсемВидамДеятельности();
	
	ПрочитатьРасходы();
	
	ОпределитьПорядокДействий();
	
	ЗаполнитьПравилоИСрокЗадачи();
	
	ПолучитьСведенияОСверке();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьРасходыРассчитатьНалог()
	
	Если Модифицированность Тогда
		ЗаписатьДанныеФормы();
	КонецЕсли;
	
	РассчитатьНалогПоВсемВидамДеятельности();
	
	ПрочитатьРасходы();
	
	ОпределитьПорядокДействий();
	ТребуетсяПроверятьАктуальность = Ложь;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьВидыДеятельности()
	
	ПоказателиВидовДеятельности = УчетЕНВД.ПоказателиВидовДеятельности(Объект.Период,
		Объект.Организация, Объект.РегистрацияВНалоговомОргане);
	
	Если ПоказателиВидовДеятельности <> Неопределено Тогда
		
		// Заполним колонку Порядок индексами видов деятельности табличной части Объект.ВидыДеятельности
		ПоказателиВидовДеятельности.Колонки.Добавить("Порядок", ОбщегоНазначения.ОписаниеТипаЧисло(3));
		ПоказателиВидовДеятельности.ЗаполнитьЗначения(999, "Порядок");
		ПоказателиВидовДеятельности.Индексы.Добавить("ВидДеятельности");
		
		ВГраница = Объект.ВидыДеятельности.Количество() - 1;
		Для ИндексВидаДеятельности = 0 По ВГраница Цикл
			НайденнаяСтрока = ПоказателиВидовДеятельности.Найти(Объект.ВидыДеятельности[ИндексВидаДеятельности].ВидДеятельности, "ВидДеятельности");
			Если НайденнаяСтрока <> Неопределено Тогда
				НайденнаяСтрока.Порядок = ИндексВидаДеятельности;
			КонецЕсли;
		КонецЦикла;
		
		// Сортировка сохраняет порядок видов деятельности
		ПоказателиВидовДеятельности.Сортировать("Порядок, Код, Наименование");
		
		Объект.ВидыДеятельности.Загрузить(ПоказателиВидовДеятельности);
		
	Иначе
		
		Объект.ВидыДеятельности.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьВидыДеятельностиНаФорме()
	
	КоличествоВидовДеятельности = Объект.ВидыДеятельности.Количество();
	МаксКоличествоВидовДеятельностиНаОднойСтранице = МаксКоличествоВидовДеятельностиНаОднойСтранице();
	
	Пока СмещениеИндекса > 0 И СмещениеИндекса >= КоличествоВидовДеятельности Цикл
		СмещениеИндекса = СмещениеИндекса - МаксКоличествоВидовДеятельностиНаОднойСтранице;
	КонецЦикла;
	СмещениеИндекса = Макс(СмещениеИндекса, 0);
	
	Для ИндексВидаДеятельности = 0 По МаксКоличествоВидовДеятельностиНаОднойСтранице - 1 Цикл
		
		Если ИндексВидаДеятельности + СмещениеИндекса < КоличествоВидовДеятельности Тогда
			Элементы[ГруппаШапкаВидаДеятельности(ИндексВидаДеятельности)].Видимость = Истина;
			Элементы[ГруппаВидаДеятельности(ИндексВидаДеятельности)].Видимость = Истина;
			ПрочитатьВидДеятельности(ИндексВидаДеятельности);
		Иначе
			Элементы[ГруппаШапкаВидаДеятельности(ИндексВидаДеятельности)].Видимость = Ложь;
			Элементы[ГруппаВидаДеятельности(ИндексВидаДеятельности)].Видимость = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьВидДеятельности(ИндексВидаДеятельности)
	
	ТекущиеДанные = Объект.ВидыДеятельности[ИндексВидаДеятельности + СмещениеИндекса];
	
	// Вид деятельности
	ЭтотОбъект[РеквизитВидДеятельности(ИндексВидаДеятельности)] = ТекущиеДанные.ВидДеятельности;
	
	ОписаниеВидаДеятельности = "";
	Если Не ПустаяСтрока(ТекущиеДанные.АдресСтрокой) Тогда
		ОписаниеВидаДеятельности = СтрШаблон(НСтр("ru = 'Адрес:%1%2'"), Символы.НПП, ТекущиеДанные.АдресСтрокой);
	КонецЕсли;
	Если Не ПустаяСтрока(ТекущиеДанные.КодПоОКТМО) Тогда
		ОписаниеВидаДеятельности = ОписаниеВидаДеятельности
			+ ?(Не ПустаяСтрока(ОписаниеВидаДеятельности), Символы.ПС, "")
			+ СтрШаблон(НСтр("ru = 'ОКТМО:%1%2'"), Символы.НПП, ТекущиеДанные.КодПоОКТМО);
	КонецЕсли;
	Элементы[ГруппаШапкаВидаДеятельности(ИндексВидаДеятельности)].РасширеннаяПодсказка.Заголовок = ОписаниеВидаДеятельности;
	
	// Физический показатель
	Элементы[РеквизитФизическийПоказатель(ИндексВидаДеятельности, 1)].Заголовок = ТекущиеДанные.ИмяФизическогоПоказателя;
	
	НачалоКвартала = НачалоКвартала(Объект.Период);
	Для НомерМесяца = 1 По 3 Цикл
		
		Месяц = ДобавитьМесяц(НачалоКвартала, НомерМесяца - 1);
		Элементы[РеквизитФизическийПоказатель(ИндексВидаДеятельности, НомерМесяца)].Подсказка = НРег(Формат(Месяц, "ДФ=MMMM"));
		
		ФизическийПоказатель = ТекущиеДанные["ФизическийПоказатель" + НомерМесяца];
		
		Если (Не ЗначениеЗаполнено(ТекущиеДанные.ДатаНачала) Или ТекущиеДанные.ДатаНачала <= НачалоДня(КонецМесяца(Месяц)))
			И (Не ЗначениеЗаполнено(ТекущиеДанные.ДатаПрекращения) Или НачалоМесяца(Месяц) < ТекущиеДанные.ДатаПрекращения) Тогда
			ДоступностьЭлемента = ЕстьПравоИзмененияПоказателей;
		Иначе
			ДоступностьЭлемента = Ложь;
		КонецЕсли;
		
		ЭтотОбъект[РеквизитФизическийПоказатель(ИндексВидаДеятельности, НомерМесяца)] = ФизическийПоказатель;
		Элементы[РеквизитФизическийПоказатель(ИндексВидаДеятельности, НомерМесяца)].ТолькоПросмотр = Не ДоступностьЭлемента;
		
	КонецЦикла;
	
	// Корректирующий коэффициент и налоговая ставка
	ЭтотОбъект[РеквизитКорректирующийКоэффициент(ИндексВидаДеятельности)] = ТекущиеДанные.КорректирующийКоэффициент;
	ЭтотОбъект[РеквизитНалоговаяСтавка(ИндексВидаДеятельности)]           = ТекущиеДанные.НалоговаяСтавка;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьНалогПоВсемВидамДеятельности()
	
	КоличествоВидовДеятельности = Объект.ВидыДеятельности.Количество();
	МаксКоличествоВидовДеятельности = МаксКоличествоВидовДеятельностиНаОднойСтранице();
	
	Для ИндексВидаДеятельности = 0 По КоличествоВидовДеятельности - 1 Цикл
		
		ПараметрыРасчетаСуммыНалога = УчетЕНВДКлиентСервер.НовыеПараметрыРасчетаСуммыНалога();
		ЗаполнитьЗначенияСвойств(ПараметрыРасчетаСуммыНалога, Объект.ВидыДеятельности[ИндексВидаДеятельности]);
		ПараметрыРасчетаСуммыНалога.Период = Объект.Период;
		
		СуммаНалога = УчетЕНВДКлиентСервер.СуммаНалога(ПараметрыРасчетаСуммыНалога);
		
		Объект.ВидыДеятельности[ИндексВидаДеятельности].СуммаНалога = СуммаНалога;
		
		ИндексРеквизитаФормы = ИндексВидаДеятельности - СмещениеИндекса;
		Если 0 <= ИндексРеквизитаФормы И ИндексРеквизитаФормы < МаксКоличествоВидовДеятельности Тогда
			ЭтотОбъект[РеквизитСуммаНалога(ИндексРеквизитаФормы)] = СуммаНалога;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьНалог(ИндексВидаДеятельности)
	
	ПараметрыРасчетаСуммыНалога = УчетЕНВДКлиентСервер.НовыеПараметрыРасчетаСуммыНалога();
	ЗаполнитьЗначенияСвойств(ПараметрыРасчетаСуммыНалога, Объект.ВидыДеятельности[ИндексВидаДеятельности + СмещениеИндекса]);
	ПараметрыРасчетаСуммыНалога.Период = Объект.Период;
	
	СуммаНалога = УчетЕНВДКлиентСервер.СуммаНалога(ПараметрыРасчетаСуммыНалога);
	
	Объект.ВидыДеятельности[ИндексВидаДеятельности + СмещениеИндекса].СуммаНалога = СуммаНалога;
	ЭтотОбъект[РеквизитСуммаНалога(ИндексВидаДеятельности)] = СуммаНалога;
	ТребуетсяПроверятьАктуальность = Ложь;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьРасходы()
	
	РасходыЕНВД = РегистрыНакопления.РасходыУменьшающиеНалогПоОтдельнымРежимам.РасходыЕНВДЗаКвартал(
		Объект.Организация, Объект.Период, Объект.РегистрацияВНалоговомОргане);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РасходыЕНВД);
	
	РасходыНаОнлайнКассы = РегистрыНакопления.РасходыНаОнлайнКассыУменьшающиеЕНВД.СуммыРасходовЗаПериод(
		Объект.Организация,
		Объект.Период,
		Объект.РегистрацияВНалоговомОргане);
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РасходыНаОнлайнКассы);
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьПорядокДействий()
	
	ОписанияДействий = ОписанияДействий(Объект.Организация, Объект.РегистрацияВНалоговомОргане, СпособОплаты, Объект.Период);
	
	ОписаниеДействияДекларация = ОписанияДействий.Декларация;
	ЕстьДекларация = ЗначениеЗаполнено(ОписаниеДействияДекларация)
		И ОписаниеДействияДекларация.Свойство("ИмяФормы")
		И ОписаниеДействияДекларация.Свойство("ПараметрыФормы")
		И ОписаниеДействияДекларация.ПараметрыФормы.Свойство("Ключ", Декларация);
	
	Если ЗначениеЗаполнено(Декларация) Тогда
		СвойстваДекларации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Декларация, "НаименованиеОтчета, ПредставлениеПериода");
		ДекларацияПредставление = СтрШаблон(НСтр("ru = '%1 за %2'"),
			СвойстваДекларации.НаименованиеОтчета,
			СвойстваДекларации.ПредставлениеПериода);
	Иначе
		ДекларацияПредставление = НСтр("ru = 'Декларация по ЕНВД'");
	КонецЕсли;
	
	ОписаниеДействияПлатежПоДаннымДекларации = ОписанияДействий.ПлатежПоДаннымДекларации;
	ЕстьДокументУплаты = ЗначениеЗаполнено(ОписаниеДействияПлатежПоДаннымДекларации)
		И ОписаниеДействияПлатежПоДаннымДекларации.Свойство("ИмяФормы")
		И ОписаниеДействияПлатежПоДаннымДекларации.Свойство("ПараметрыФормы")
		И ОписаниеДействияПлатежПоДаннымДекларации.ПараметрыФормы.Свойство("Ключ", ДокументУплаты);
		
	Если ЗначениеЗаполнено(ДокументУплаты) Тогда
		СвойстваДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументУплаты, "Номер, Дата");
		ДокументУплатыПредставление = СтрШаблон(НСтр("ru = '%1 %2 от %3'"),
			ДокументУплаты.Метаданные().Синоним,
			ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(СвойстваДокумента.Номер, Истина, Ложь),
			Формат(СвойстваДокумента.Дата, "ДЛФ=D"));
	Иначе
		ДокументУплатыПредставление = НСтр("ru = 'Платежное поручение'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МаксКоличествоВидовДеятельностиНаОднойСтранице()
	
	Возврат 3;
	
КонецФункции

&НаСервереБезКонтекста
Функция ГруппаВидаДеятельности(ИндексВидаДеятельности)
	
	Возврат СтрШаблон("ГруппаВидДеятельности%1", ИндексВидаДеятельности);
	
КонецФункции

&НаСервереБезКонтекста
Функция ГруппаШапкаВидаДеятельности(ИндексВидаДеятельности)
	
	Возврат СтрШаблон("ГруппаШапкаВидаДеятельности%1", ИндексВидаДеятельности);
	
КонецФункции

&НаСервереБезКонтекста
Функция РеквизитВидДеятельности(ИндексВидаДеятельности)
	
	Возврат СтрШаблон("ВидДеятельности%1", ИндексВидаДеятельности);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РеквизитФизическийПоказатель(ИндексВидаДеятельности, НомерМесяца)
	
	Возврат СтрШаблон("ФизическийПоказатель%1%2", ИндексВидаДеятельности, НомерМесяца);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РеквизитКорректирующийКоэффициент(ИндексВидаДеятельности)
	
	Возврат СтрШаблон("КорректирующийКоэффициент%1", ИндексВидаДеятельности);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РеквизитНалоговаяСтавка(ИндексВидаДеятельности)
	
	Возврат СтрШаблон("НалоговаяСтавка%1", ИндексВидаДеятельности);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РеквизитСуммаНалога(ИндексВидаДеятельности)
	
	Возврат СтрШаблон("СуммаНалога%1", ИндексВидаДеятельности);
	
КонецФункции

&НаКлиенте
Функция ИндексЭлемента(Имя, Префикс)
	
	ИндексСтрокой = Сред(Имя, СтрДлина(Префикс) + 1, 1);
	
	Если ПустаяСтрока(ИндексСтрокой) Или Не СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(ИндексСтрокой) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Число(ИндексСтрокой);
	
КонецФункции

&НаСервере
Процедура УдалитьПрекратитьДеятельность(ВидДеятельности, УстановитьПометкуУдаления, ДатаПрекращения)
	
	Если Не ЗначениеЗаполнено(ВидДеятельности) Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		ЗаписатьДанныеФормы();
	КонецЕсли;
	
	Если УстановитьПометкуУдаления Тогда
		
		ВидДеятельностиОбъект = ВидДеятельности.ПолучитьОбъект();
		ВидДеятельностиОбъект.УстановитьПометкуУдаления(Истина);
		
		ЗаполнитьВидыДеятельностиРассчитатьНалог();
		
	ИначеЕсли ЗначениеЗаполнено(ДатаПрекращения) Тогда
		
		ВидДеятельностиОбъект = ВидДеятельности.ПолучитьОбъект();
		ВидДеятельностиОбъект.ДатаПрекращения = ДатаПрекращения;
		ВидДеятельностиОбъект.Записать();
		
		Если НачалоКвартала(Объект.Период) <= ДатаПрекращения И ДатаПрекращения <= КонецКвартала(Объект.Период) Тогда
			ЗаполнитьВидыДеятельностиРассчитатьНалог();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеФормы()
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	НачалоКвартала = НачалоКвартала(Объект.Период);
	
	ЕстьИзменения = Ложь;
	Для Каждого ВидДеятельности Из Объект.ВидыДеятельности Цикл
		
		Если Не ВидДеятельности.Модифицированность Тогда
			Продолжить;
		КонецЕсли;
		
		// Физические показатели
		
		ФизическиеПоказателиЕНВДКлючЗаписи = РегистрыСведений.ФизическиеПоказателиЕНВД.СоздатьКлючЗаписи(
			Новый Структура("Организация, ВидДеятельности", Объект.Организация, ВидДеятельности.ВидДеятельности));
		ЗаблокироватьДанныеДляРедактирования(ФизическиеПоказателиЕНВДКлючЗаписи);
		
		Для ИндексМесяца = 0 По 2 Цикл
			
			ТекущийМесяц = ДобавитьМесяц(НачалоКвартала, ИндексМесяца);
			
			НачалоМесяца = НачалоМесяца(ТекущийМесяц);
			КонецМесяца  = НачалоДня(КонецМесяца(ТекущийМесяц));
			
			Если ЗначениеЗаполнено(ВидДеятельности.ДатаНачала) И КонецМесяца < ВидДеятельности.ДатаНачала Тогда
				РегистрыСведений.ФизическиеПоказателиЕНВД.УдалитьФизическийПоказатель(ФизическиеПоказателиЕНВДКлючЗаписи, ТекущийМесяц);
				Продолжить;
			КонецЕсли;
			Если ЗначениеЗаполнено(ВидДеятельности.ДатаПрекращения) И ВидДеятельности.ДатаПрекращения <= НачалоМесяца Тогда
				РегистрыСведений.ФизическиеПоказателиЕНВД.УдалитьФизическийПоказатель(ФизическиеПоказателиЕНВДКлючЗаписи, ТекущийМесяц);
				Продолжить;
			КонецЕсли;
			
			РегистрыСведений.ФизическиеПоказателиЕНВД.ЗаписатьФизическийПоказатель(
				ВидДеятельности["ФизическийПоказатель" + (ИндексМесяца + 1)], ФизическиеПоказателиЕНВДКлючЗаписи, ТекущийМесяц, Истина);
			
		КонецЦикла;
		
		// Корректирующий коэффициент, Налоговая ставка
		РегиональныеОсобенностиЕНВДКлючЗаписи = РегистрыСведений.РегиональныеОсобенностиЕНВД.СоздатьКлючЗаписи(
			Новый Структура("Организация, ВидДеятельности", Объект.Организация, ВидДеятельности.ВидДеятельности));
		ЗаблокироватьДанныеДляРедактирования(РегиональныеОсобенностиЕНВДКлючЗаписи);
		РегистрыСведений.РегиональныеОсобенностиЕНВД.ЗаписатьРегиональныеОсобенности(
			ВидДеятельности.КорректирующийКоэффициент, ВидДеятельности.НалоговаяСтавка, РегиональныеОсобенностиЕНВДКлючЗаписи, НачалоКвартала, Истина);
		
		ВидДеятельности.Модифицированность = Ложь;
		
		ЕстьИзменения = Истина;
		
	КонецЦикла;
	
	Если ЕстьИзменения Тогда
		ОтменитьНачислениеЕНВД(Объект.Организация, Объект.Период);
	КонецЕсли;
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьРасчетНалогаНаФорме(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// Расчет налога к уплате и показателей вычета.
	
	СуммаНалога = Объект.ВидыДеятельности.Итог("СуммаНалога");
	
	Если Форма.ИспользуетсяТрудНаемныхРаботников Тогда
		// Предельный вычет не может быть более 50% от налога, поэтому округляется в меньшую сторону.
		МаксимальныйВычет = Окр(СуммаНалога/2, 0, РежимОкругления.Окр15как10);
		
		Форма.РасходыНаВзносыВсего = Форма.СтраховыеВзносы + Форма.Больничные + Форма.ДобровольноеСтрахование
			+ ?(Форма.УменьшатьНалогНаВзносыИПРаботодателя, Форма.ФиксированныеВзносыИП, 0);
		
		// При расчете вычета требуется отдельно округлить фиксированные взносы ИП и отдельно остальные расходы,
		// поскольку в декларации ЕНВД это разные строки раздела 3 с округлением по арифметическим правилам.
		ВычетПоФиксированнымВзносам
			= ?(Форма.УменьшатьНалогНаВзносыИПРаботодателя, Окр(Форма.ФиксированныеВзносыИП, 0, РежимОкругления.Окр15как20), 0);
		ВычетПоРасходамРаботодателя
			= Окр(Форма.СтраховыеВзносы + Форма.Больничные + Форма.ДобровольноеСтрахование, 0, РежимОкругления.Окр15как20);
		
		Форма.НалоговыйВычетВзносы = Мин(ВычетПоФиксированнымВзносам + ВычетПоРасходамРаботодателя, МаксимальныйВычет);
	Иначе
		МаксимальныйВычет = СуммаНалога;
		
		Форма.РасходыНаВзносыВсего = Форма.ФиксированныеВзносыИП;
		
		// В декларации ЕНВД вычет по фиксированным взносам округляется до целого по арифметическим правилам.
		Форма.НалоговыйВычетВзносы = Мин(Окр(Форма.РасходыНаВзносыВсего, 0, РежимОкругления.Окр15как20), МаксимальныйВычет);
	КонецЕсли;
	
	Форма.НалоговыйВычетВсего = Форма.НалоговыйВычетВзносы + Форма.НалоговыйВычетОнлайнКассы; // Вычет по ККТ рассчитан регламентной операцией.
	Форма.НалогКУплате        = СуммаНалога - Форма.НалоговыйВычетВсего;
	
	
	// Видимость элементов расшифровки налогового вычета.
	
	ПоказыватьЭтапыВычета = Форма.ПрименяетсяВычетПоОнлайнКассам;
	
	Элементы.ГруппаНалоговыйВычетВзносы.Видимость      = ПоказыватьЭтапыВычета;
	Элементы.ГруппаНалоговыйВычетОнлайнКассы.Видимость = ПоказыватьЭтапыВычета;
	
	Элементы.НалоговыйВычетВсего.Гиперссылка        = НЕ ПоказыватьЭтапыВычета;
	Элементы.НалоговыйВычетВсегоПояснение.Видимость = НЕ ПоказыватьЭтапыВычета;
	
	
	// Тексты заголовков и пояснений.
	
	ФорматНалоговыхПоказателей = "ЧДЦ=; ЧН=0";
	ФорматСуммРасходов         = "ЧДЦ=2; ЧН=0";
	
	// Вычет по взносам, больничным, страхованию.
	ЗаголовокВычетаВзносы = ?(Форма.ИспользуетсяТрудНаемныхРаботников,
		НСтр("ru = 'Взносы, больничные, страхование'"),
		НСтр("ru = 'Взносы в фиксированном размере'"));
	
	ЧастиПояснения = Новый Массив;
	Если Форма.ИспользуетсяТрудНаемныхРаботников Тогда
		ЧастиПояснения.Добавить(НСтр("ru = 'Уменьшают налог за квартал не более чем на 50% от суммы'"));
		ЧастиПояснения.Добавить("." + Символы.ПС);
		
		ШаблонТекста = НСтр("ru = 'Всего расходов - %1; ограничение - %2 * %3 = %4.'");
		ТекстРасчетОграничения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста,
			Формат(Форма.РасходыНаВзносыВсего, ФорматСуммРасходов),
			Формат(СуммаНалога, ФорматНалоговыхПоказателей),
			НСтр("ru = '50%'"),
			Формат(МаксимальныйВычет, ФорматНалоговыхПоказателей));
		ЧастиПояснения.Добавить(ТекстРасчетОграничения);
	Иначе
		ШаблонТекста = НСтр("ru = 'Всего взносов - %1; учитывается сумма, не превышающая налог за квартал'");
		ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста,
			Формат(Форма.РасходыНаВзносыВсего, ФорматСуммРасходов));
		ЧастиПояснения.Добавить(ТекстПояснения);
	КонецЕсли;
	
	ПояснениеВычетаВзносы = Новый ФорматированнаяСтрока(ЧастиПояснения);
	
	Если ПоказыватьЭтапыВычета Тогда
		Элементы.НалоговыйВычетВсего.Заголовок = НСтр("ru = 'Расходы, уменьшающие налог'");
		
		Элементы.НалоговыйВычетВзносы.Заголовок          = ЗаголовокВычетаВзносы;
		Элементы.НалоговыйВычетВзносыПояснение.Заголовок = ПояснениеВычетаВзносы;
	Иначе
		ШаблонТекстаЗаголовка = НСтр("ru = 'Расходы, уменьшающие налог
											|(%1)'");
		Элементы.НалоговыйВычетВсего.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонТекстаЗаголовка, НРег(ЗаголовокВычетаВзносы));
		Элементы.НалоговыйВычетВсегоПояснение.Заголовок = ПояснениеВычетаВзносы;
	КонецЕсли;
	
	// Вычет по онлайн-кассам.
	ЧастиПояснения = Новый Массив;
	ЧастиПояснения.Добавить(НСтр("ru = 'Уменьшают оставшийся налог'"));
	
	Если Форма.ИспользуетсяТрудНаемныхРаботников Тогда
		ЧастиПояснения.Добавить(" ");
		ЧастиПояснения.Добавить(НСтр("ru = 'без ограничений'"));
	КонецЕсли;
	
	Если Форма.РасходыНаОнлайнКассыКонечныйОстаток > 0 Тогда
		ЧастиПояснения.Добавить("." + Символы.ПС);
		
		ШаблонТекста = НСтр("ru = 'Превышающая налог сумма расходов в размере %1 переносится на следующий квартал.'");
		ТекстОстатокВычета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста,
			Формат(Форма.РасходыНаОнлайнКассыКонечныйОстаток, ФорматНалоговыхПоказателей));
		ЧастиПояснения.Добавить(ТекстОстатокВычета);
	КонецЕсли;
	
	Элементы.НалоговыйВычетОнлайнКассыПояснение.Заголовок = Новый ФорматированнаяСтрока(ЧастиПояснения);
	
	// Расчет суммы налога к уплате.
	Форма.ФормулаРасчетаНалога = СтрШаблон("(%1 – %2)",
		Формат(СуммаНалога, ФорматНалоговыхПоказателей),
		Формат(Форма.НалоговыйВычетВсего, ФорматНалоговыхПоказателей));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекстНадписиРасходыНаОнлайнКассы(РасходыВсего, РасходыУчтеноРанее, РасходыНачальныйОстаток)
	
	ФорматСумм = "ЧДЦ=; ЧН=0";
	
	ЭлементыНадписи = Новый Массив;
	
	Если РасходыВсего = 0 Тогда
		ЭлементыНадписи.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Добавить сведения о расходах'"), , , , "ДобавитьРасходыНаККТ"));
	Иначе
		ЭлементыНадписи.Добавить(НСтр("ru = 'Всего расходов'"));
		ЭлементыНадписи.Добавить(" - ");
		
		ЭлементыНадписи.Добавить(Новый ФорматированнаяСтрока(Формат(РасходыВсего, ФорматСумм), , , , "ОткрытьРасходыНаККТ"));
		
		Если РасходыУчтеноРанее > 0 Тогда
			ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '; учтено ранее - %1'"),
				Формат(РасходыУчтеноРанее, ФорматСумм));
			ЭлементыНадписи.Добавить(ТекстПояснения);
			
			ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '; осталось - %1'"),
				Формат(РасходыНачальныйОстаток, ФорматСумм));
			ЭлементыНадписи.Добавить(ТекстПояснения);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(ЭлементыНадписи);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьСправкуРасчетУменьшающихРасходов()
	
	НастройкиОтчета = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	НастройкиОтчета.ДополнительныеСвойства.Вставить("Организация", Объект.Организация);
	НастройкиОтчета.ДополнительныеСвойства.Вставить("НачалоПериода", НачалоКвартала(Объект.Период));
	НастройкиОтчета.ДополнительныеСвойства.Вставить("КонецПериода", КонецКвартала(Объект.Период));
	НастройкиОтчета.ДополнительныеСвойства.Вставить("ПоказательБУ", Истина);
	НастройкиОтчета.ДополнительныеСвойства.Вставить("Налог", "ЕНВД");
	
	Отбор = НастройкиОтчета.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	Отбор.ИдентификаторПользовательскойНастройки = "Отбор";
	Если ЗначениеЗаполнено(Объект.РегистрацияВНалоговомОргане) Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(Отбор, "РегистрацияВНалоговомОргане", Объект.РегистрацияВНалоговомОргане);
	КонецЕсли;
	
	ПараметрыОтчета = Новый Структура();
	
	ПараметрыОтчета.Вставить("ВидРасшифровки", 2);
	ПараметрыОтчета.Вставить("ПользовательскиеНастройки", НастройкиОтчета);
	ПараметрыОтчета.Вставить("СформироватьПриОткрытии", Истина);
	
	ОткрытьФорму("Отчет.СправкаРасчетРасходовУменьшающихОтдельныеНалоги.Форма.ФормаОтчета", ПараметрыОтчета, , Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтменитьНачислениеЕНВД(Организация, Период)
	
	УчетЕНВД.ОтменитьНачислениеЕНВД(Организация, Период);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДокументУплатыНалога()
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		ЗаписатьДанныеФормы();
	КонецЕсли;
	
	ТекстОшибки = "";
	ОписанияДействий = ОписанияДействий(Объект.Организация, Объект.РегистрацияВНалоговомОргане, СпособОплаты, Объект.Период, ТекстОшибки);
	ОписаниеДействияПлатежПоДаннымДекларации = ОписанияДействий.ПлатежПоДаннымДекларации;
	
	Если ОписаниеДействияПлатежПоДаннымДекларации <> Неопределено Тогда
		
		Если ОписаниеДействияПлатежПоДаннымДекларации.Свойство("ИмяФормы") Тогда
			Если ОписаниеДействияПлатежПоДаннымДекларации.ПараметрыФормы.Свойство("ЗначенияЗаполнения") Тогда
				ОписаниеДействияПлатежПоДаннымДекларации.ПараметрыФормы.ЗначенияЗаполнения.Вставить("СуммаДокумента", НалогКУплате);
			КонецЕсли;
		ИначеЕсли ОписаниеДействияПлатежПоДаннымДекларации.Свойство("Вопрос") Тогда
			ОписаниеДействияПлатежПоДаннымДекларации.ДействиеНет.ПараметрыФормы.ЗначенияЗаполнения.Вставить("СуммаДокумента", НалогКУплате);
		КонецЕсли;
		
		ВыполнениеЗадачБухгалтераКлиент.ВыполнитьДействие(ОписаниеДействияПлатежПоДаннымДекларации);
		
	ИначеЕсли Не ПустаяСтрока(ТекстОшибки) Тогда
		ПоказатьПредупреждение(, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодПослеВыбора()
	
	СмещениеИндекса = 0;
	ЗаполнитьВидыДеятельностиРассчитатьНалог();
	
	Если ПлательщикЕНВД Тогда
		ПередНачаломДлительнойОперации();
	Иначе
		ДанныеУчетаАктуальны = Истина;
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораНалоговыхИнспекций(Форма)
	
	Объект = Форма.Объект;
	
	СписокВыбора = Форма.Элементы.РегистрацияВНалоговомОргане.СписокВыбора;
	
	СписокВыбора.Очистить();
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		СписокВыбораНалоговыхИнспекций = СписокВыбораНалоговыхИнспекций(Объект.Организация, Объект.Период);
		Для Каждого НалоговаяИнспекция Из СписокВыбораНалоговыхИнспекций Цикл
			СписокВыбора.Добавить(НалоговаяИнспекция.Значение, НалоговаяИнспекция.Представление);
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(Объект.РегистрацияВНалоговомОргане)
			Или СписокВыбора.НайтиПоЗначению(Объект.РегистрацияВНалоговомОргане) = Неопределено Тогда
			
			Если СписокВыбора.Количество() > 0 Тогда
				Объект.РегистрацияВНалоговомОргане = СписокВыбора[0].Значение;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.КоличествоРегистрацийВНалоговомОргане = СписокВыбора.Количество();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокВыбораНалоговыхИнспекций(Организация, Период)
	
	Возврат Справочники.ВидыДеятельностиЕНВД.СписокВыбораНалоговыхИнспекций(Организация, Период);
	
КонецФункции

&НаСервереБезКонтекста
Функция КлючЗаписиУчетнойПолитики(Знач Организация, Знач Период)
	
	Возврат НастройкиУчета.КлючЗаписиДействующейУчетнойПолитики("НастройкиСистемыНалогообложения", Организация, Период);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоРегламентированныйОтчетЕНВД(Знач Ссылка)
	
	Если Не ЗначениеЗаполнено(Ссылка) Или ТипЗнч(Ссылка) <> Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИсточникОтчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ИсточникОтчета");
	
	Возврат (ИсточникОтчета = УчетЕНВД.ИдентификаторДекларации());
	
КонецФункции

&НаКлиенте
Процедура ОбработатьВыполнениеСверки(РезультатЗакрытия = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПолучитьСведенияОСверке();
	ТребуетсяПроверятьАктуальность = Ложь;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыДляСверки()
	
	ПараметрыДляСверки = ВыполнениеЗадачБухгалтера.НовыйПараметрыЗадачиДляСверки();
	ПараметрыДляСверки.Организация = Объект.Организация;
	ПараметрыДляСверки.РегистрацияВНалоговомОргане = Объект.РегистрацияВНалоговомОргане;
	ПараметрыДляСверки.Правило = Правило;
	ПараметрыДляСверки.ИдентификаторЗадачи = Правило.Владелец.Код;
	ПараметрыДляСверки.ПериодСобытия =  Объект.Период;
	ПараметрыДляСверки.Срок          = Срок;
	
	Возврат ПараметрыДляСверки;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПравилоИСрокЗадачи()
	
	Если Не ЗначениеЗаполнено(Объект.Организация)
		ИЛИ Не ЗначениеЗаполнено(Объект.Период) Тогда 
		Срок = '00010101';
		СверкаВыполнена = Ложь;
		Возврат
	КонецЕсли;
	
	// Определяем по статусу задачи срок и правило, необходимые для перехода на статью ИТС и для сверки:
	//  если декларация не сформирована, то устанавливаем срок и правило предоставления декларации,
	//  если декларация сформирована, то срок и правило уплаты.
	
	ВидНалога = Перечисления.ВидыНалогов.ЕНВД;
	
	Порядок = РегистрыСведений.ЗадачиБухгалтера.ПорядокПредоставленияОтчетаУплатыНалогаЗаПериод(
		Объект.Организация, ВидНалога, КонецКвартала(Объект.Период));
		
	Если Порядок.Отчет <> Неопределено Тогда 
		Если ЗначениеЗаполнено(Декларация) Тогда
			Срок    = Порядок.Уплата.Срок;
			Правило = Порядок.Уплата.Правило;
		Иначе
			Срок    = Порядок.Отчет.Срок;
			Правило = Порядок.Отчет.Правило;
		КонецЕсли;
	Иначе
		Срок    = '00010101';
		Правило = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПустаяСсылка();
		СверкаВыполнена = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСведенияОСверке()
	
	Если Не ЗначениеЗаполнено(Объект.Организация)
		ИЛИ Не ЗначениеЗаполнено(Правило) 
		ИЛИ Не ЗначениеЗаполнено(Срок) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыДляСверки       = ПараметрыДляСверки();
	СтруктураСведенийОСверке = ВыполнениеЗадачБухгалтера.СведенияОСверке(ПараметрыДляСверки);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураСведенийОСверке,
		"СверкаВыполнена, ОписаниеДействияСверка, ЗапросНаСверкуНаименование");
	
КонецПроцедуры

#Область ПроверкаАктуальностиДанных

&НаКлиенте
Процедура Подключаемый_ПроверитьАктуальность()
	
	Если Не ПустаяСтрока(СообщениеОбОшибке) Тогда
		Возврат;
	КонецЕсли;
	
	ФоновоеЗаданиеАктуализации = ЗакрытиеМесяцаВызовСервера.НайтиФоновоеЗаданиеАктуализацииПоОрганизации(
		Объект.Организация,
		УникальныйИдентификатор);
	
	Если ФоновоеЗаданиеАктуализации = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(ФоновоеЗаданиеАктуализации.УникальныйИдентификатор) Тогда
		
		ПроверитьАктуальностьДанных();
		
	Иначе
		
		// Выполняется актуализация данных
		ДанныеУчетаАктуальны = Ложь;
		ВозможнаБыстраяАктуализация = Истина;
		
		Если ИдентификаторЗаданияАктуализации <> ФоновоеЗаданиеАктуализации.УникальныйИдентификатор Тогда
			// Задание запущено в другой форме
			ЗаданиеЗапущеноВДругойФорме = Истина;
			ИдентификаторЗаданияАктуализации = ФоновоеЗаданиеАктуализации.УникальныйИдентификатор;
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации",
				ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);
		Иначе
			ЗаданиеЗапущеноВДругойФорме = Ложь;
		КонецЕсли;
		
		ОбновитьСтатусФоновогоЗадания();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьАктуальностьДанных()
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	
	ИдентификаторЗаданияАктуализации = Неопределено;
	
	УИДЗамера = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь, "АктуализацияДанныхТребуетсяАктуализацияЗаПериод");
	
	ПараметрыПроверки = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыПроверкиАктуальности();
	ПараметрыПроверки.Организация                  = Объект.Организация;
	ПараметрыПроверки.Период                       = КонецКвартала(Объект.Период);
	ПараметрыПроверки.УникальныйИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыПроверки.УИДЗамера                    = УИДЗамера;
	ПараметрыПроверки.АктуализироватьВесьПериод    = Истина;	
	
	РезультатВыполнения = ЗакрытиеМесяцаВызовСервера.ПроверитьАктуальность(ПараметрыПроверки);
	
	ИдентификаторЗаданияПроверкиАктуализации = РезультатВыполнения.ИдентификаторЗадания;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьРезультатПроверкиАктуальности", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатВыполнения, ОповещениеОЗавершении, ПараметрыОжидания);
	
	ОбновитьСтатусФоновогоЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатПроверкиАктуальности(Результат, ДополнительныеПараметры) Экспорт
	
	ИдентификаторЗаданияПроверкиАктуализации = Неопределено;
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;

	РезультатПроверки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если РезультатПроверки.УИДЗамера <> Неопределено Тогда
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(РезультатПроверки.УИДЗамера);
	КонецЕсли;
	
	Если Не РезультатПроверки.ТребуетсяАктуализация Тогда
		Оповестить("АктуализацияЗавершенаУспешно", Новый Структура("Организация", Объект.Организация));
	ИначеЕсли РезультатПроверки.АктуализацияВозможна И РезультатПроверки.АктуализацияДоступна Тогда
		Оповестить("ТребуетсяАктуализация", Новый Структура("Организация", Объект.Организация));
	КонецЕсли;
	
	ДанныеУчетаАктуальны = Не РезультатПроверки.ТребуетсяАктуализация;
	
	Если ВозможнаБыстраяАктуализация
	   И Не ЗаданиеЗапущеноВДругойФорме
	   И НЕ ДанныеУчетаАктуальны
	   И ЗначениеЗаполнено(Объект.Организация)
	   И ЗначениеЗаполнено(Объект.Период)
	   И ПустаяСтрока(СообщениеОбОшибке) Тогда
	   
		АктуализироватьДанные();
		
	Иначе
		
		ТребуетсяПроверятьАктуальность = Ложь;
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область АктуализацияДанных

&НаКлиенте
Процедура АктуализироватьДанные()
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеПроверкиАктуальности");
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	
	ИдентификаторЗаданияПроверкиАктуализации = Неопределено;
	ИдентификаторЗаданияАктуализации = Неопределено;
	
	ПараметрыАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыАктуализации();
	ПараметрыАктуализации.Организация                  = Объект.Организация;
	ПараметрыАктуализации.Период                       = КонецКвартала(Объект.Период);
	ПараметрыАктуализации.ИдентификаторЗадания         = ИдентификаторЗаданияАктуализации;
	ПараметрыАктуализации.УникальныйИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыАктуализации.АктуализацияДляРасчетаНалога = ВозможнаБыстраяАктуализация;
	ПараметрыАктуализации.АктуализироватьВесьПериод    = Истина;
	
	РезультатВыполнения = ЗакрытиеМесяцаВызовСервера.АктуализироватьДанные(ПараметрыАктуализации);
	
	АдресХранилищаАктуализации = РезультатВыполнения.АдресХранилища;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ИдентификаторЗаданияАктуализации = Неопределено;
		ОбработатьРезультатАктуализации();
	Иначе
		ИдентификаторЗаданияАктуализации = РезультатВыполнения.ИдентификаторЗадания;
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации",
			ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);
	КонецЕсли;
	
	ОбновитьСтатусФоновогоЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеАктуализации()
	
	Если ЗакрытиеМесяцаВызовСервера.ЗаданиеВыполнено(ИдентификаторЗаданияАктуализации) Тогда
		ИдентификаторЗаданияАктуализации = Неопределено;
		ОбработатьРезультатАктуализации();
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации",
			ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);
	КонецЕсли;
	
	ОбновитьСтатусФоновогоЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатАктуализации()
	
	Если ЗаданиеЗапущеноВДругойФорме Тогда
		ПроверитьАктуальностьДанных();
		Возврат;
	КонецЕсли;
	
	РезультатАктуализации = ПолучитьИзВременногоХранилища(АдресХранилищаАктуализации);
	
	Если ТипЗнч(РезультатАктуализации) <> Тип("Структура")
	 Или Не РезультатАктуализации.Свойство("Выполнено") Тогда
		ПроведенАнализВариантаАктуализации = Ложь;
		РезультатАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыйРезультатАктуализации();
	Иначе
		ПроведенАнализВариантаАктуализации = ВозможнаБыстраяАктуализация
			И Не РезультатАктуализации.АктуализацияДляРасчетаНалога;
		ВозможнаБыстраяАктуализация = РезультатАктуализации.АктуализацияДляРасчетаНалога;
	КонецЕсли;
		
	ДанныеУчетаАктуальны = РезультатАктуализации.Выполнено;
	
	Если ДанныеУчетаАктуальны Тогда
		
		Оповестить("АктуализацияЗавершенаУспешно", Новый Структура("Организация", Объект.Организация));
		ПрочитатьРасходыРассчитатьНалог();
		
	Иначе
		
		Если Не ПроведенАнализВариантаАктуализации Тогда
			// При запуске актуализации мы уже знали, полная она или частичная.
			ЗакрытиеМесяцаКлиент.ПоказатьОшибкиАктуализации(ЭтотОбъект,
				РезультатАктуализации,
				НСтр("ru='Расчет налога не выполнен. Обнаружены ошибки.'"));
		КонецЕсли;
		Оповестить("АктуализацияОтменена", Новый Структура("Организация", Объект.Организация));
		ТребуетсяПроверятьАктуальность = Ложь;
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОбновитьСтатусФоновогоЗадания()
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияАктуализации) Тогда
		
		Прогресс = ЗакрытиеМесяцаВызовСервера.ПрочитатьПрогресс(ИдентификаторЗаданияАктуализации);
		Если ТипЗнч(Прогресс) = Тип("Структура") И Прогресс.Свойство("Процент") Тогда
			ПроцентВыполнения = Формат(Мин(Прогресс.Процент, 99), "ЧЦ=2; ЧДЦ=; ЧВН=; ЧГ=0") + "%";
		ИначеЕсли Прав(СтатусФоновогоЗадания, 1) = "%" Тогда
			ПроцентВыполнения = Прав(СтатусФоновогоЗадания, 3);
		Иначе
			ПроцентВыполнения = "";
		КонецЕсли;
		
		СтатусФоновогоЗадания = НСтр("ru = 'Выполняется расчет налога...'") + ПроцентВыполнения;
		
	ИначеЕсли ТребуетсяПроверятьАктуальность Или ЗначениеЗаполнено(ИдентификаторЗаданияПроверкиАктуализации) Тогда
		
		СтатусФоновогоЗадания = НСтр("ru = 'Выполняется проверка данных...'");
		
	Иначе
		
		СтатусФоновогоЗадания = "";
		
	КонецЕсли;
	
	ТребуетсяПроверятьАктуальность = Ложь;
	УправлениеФормой(ЭтотОбъект);
	
КонецФункции

#КонецОбласти

#КонецОбласти