
#Область ОписаниеПеременных

&НаКлиенте
Перем ЗакрытьФормуБезусловно; // Хранит признак безусловного закрытия формы.

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЕ

#Область ПроцедурыИФункцииОбщегоНазначения

&НаКлиентеНаСервереБезКонтекста
// Устанавливает видимость элементов формы.
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Элементы.ГруппаПаспортныеДанные.Доступность       = Форма.ИзменятьПаспортныеДанные;
	Элементы.ГруппаПериодПаспортныхДанных.Доступность = Форма.ИзменятьПаспортныеДанные;
	
	Элементы.Фамилия.ТолькоПросмотр		= Форма.ВыборФизлица;
	Элементы.Имя.ТолькоПросмотр			= Форма.ВыборФизлица;
	Элементы.Отчество.ТолькоПросмотр	= Форма.ВыборФизлица;

	Элементы.ДатаРождения.ТолькоПросмотр		= Форма.ВыборФизлица;
	Элементы.Пол.ТолькоПросмотр 				= Форма.ВыборФизлица;
	Элементы.СтраховойНомерПФР.ТолькоПросмотр 	= Форма.ВыборФизлица;
	Элементы.ИНН.ТолькоПросмотр 				= Форма.ВыборФизлица;
	
	// Управление доступностью параметрами вода документа изменения л/с.
	Элементы.ДатаРегистрацииЛС.Доступность = Форма.ВнестиИзмененияСведенийОЛС;
	
	// Если хотим ввести изменение л/с, а л/с не открыт на указанную дату,
	// то отображаем сообщение о невозможности изменения сведений по л/с.
	Элементы.СообщениеОНевозможностиИзмененияСведенийЛС.Видимость = Форма.ВнестиИзмененияСведенийОЛС
																  И Не Форма.ЛицевойСчетОткрытНаДатуИзмененияСведений
																  И ЗначениеЗаполнено(Форма.ДатаИзмененияСведенийОЛицевомСчете);
	
	// Отображаем сообщение о формировании документа изменения л/с,
	// если флажок установлен, а лицевой счет открыт на указанную дату.
	Элементы.ГруппаПараметрыИзмененияЛС.Доступность= Форма.ВнестиИзмененияСведенийОЛС
													 И Форма.ЛицевойСчетОткрытНаДатуИзмененияСведений
													 И ЗначениеЗаполнено(Форма.ДатаИзмененияСведенийОЛицевомСчете);
	
	// Если жилец зарегистрирован, то он автоматически проживает.
	// Т.е. признак проживания доступен только в случае, если явно не указана регистрация жильца.
	Элементы.ФлажокПроживает.Доступность = Не Форма.Зарегистрирован;
	
	// Установка доступности периода проживания или регистрации.
	Элементы.ДатаПроживанияРегистрации.Доступность       = Форма.Проживает Или Форма.Зарегистрирован;
	Элементы.ДатаОтменыПроживанияРегистрации.Доступность = Форма.Проживает Или Форма.Зарегистрирован;
	
	// Установка доступности поля "Собственник".
	// Жильца можем отразить как собственника, только если он зарегистрирован или не проживает,
	// так как отражение только проживания и собственности без регистрации нельзя выполнить одной операцией изменения л/с.
	Элементы.ФлажокСобственник.Доступность = Форма.Зарегистрирован Или Не Форма.Проживает;
	
	// Поля ввода данных о собственности доступны, если указано, что жилец - собственник.
	Элементы.ДоляСобственностиЛС.Доступность              = Форма.Собственник;
	Элементы.УстановитьДолюСобственности.Доступность      = Форма.Собственник;
	Элементы.ДолиСобственностиДругихЖильцовЛС.Доступность = Форма.Собственник;
	
	// Степень родства доступна в случае, если ответственным собственником является проживающий.
	Элементы.СтепеньРодства.Видимость = ТипЗнч(Форма.ОтветственныйСобственникЛС) = Тип("СправочникСсылка.УПЖКХ_Жильцы");
	
	// Если количество жильцов на л/с ведется числами, то показываем поля ввода количества жильцов.
	Элементы.ГруппаЧислоПроживающихЗарегистрированных.Видимость = Форма.Настройка_УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами;
	
	// Данные о собственности вводим только при упрощенном учете, при полном учете
	// данные о собственности вводятся отдельным документом.
	Элементы.ГруппаВводаДанныхСобственности.Видимость   = Форма.Настройка_УПЖКХ_УпрощенныйВариантУчетаСобственников;
	
	// Признак ВЕЖ доступен только в случае, если жилец является собственником или ответственным собственником.
	Элементы.ФлажокВладелецЕдинственногоЖилья.Видимость   = Форма.Настройка_УПЖКХ_ИспользоватьФункционалВЕЖ И Форма.Настройка_УПЖКХ_УпрощенныйВариантУчетаСобственников;
	Элементы.ФлажокВладелецЕдинственногоЖилья.Доступность = Форма.Собственник;
	
	// Ссылку на сформированный документ изменения л/с отображаем, только если он сформирован.
	Элементы.ДокументИзмененияЛС.Видимость = Не Форма.ДокументИзмененияЛС.Пустая();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
// Процедура обновляет статус лицевого счета.
Функция ОбработатьИзменениеПараметраСтатусаЛицевогоСчета(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	// Получаем статус л/с на новую дату и сверяем его с предыдущим значением.
	СтатусЛицевогоСчета = ЛицевойСчетОткрытНаСервере(Объект.ЛицевойСчет, КонецДня(Форма.ДатаИзмененияСведенийОЛицевомСчете));
	СтатусЛицевогоСчетаИзменен = Не (СтатусЛицевогоСчета = Форма.ЛицевойСчетОткрытНаДатуИзмененияСведений);
	
	// Получение ответственного собственника л/с для степени родства жильца.
	Форма.ОтветственныйСобственникЛС = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(Объект.ЛицевойСчет, КонецДня(Форма.ДатаИзмененияСведенийОЛицевомСчете));
	
	// Обновляем статус лицевого счета, если он изменен.
	Если СтатусЛицевогоСчетаИзменен Тогда
		Форма.ЛицевойСчетОткрытНаДатуИзмененияСведений = СтатусЛицевогоСчета;
	КонецЕсли;
	
	Возврат СтатусЛицевогоСчетаИзменен;
	
КонецФункции

&НаСервереБезКонтекста
// Получает статус указанного лицевого счет.
Функция ЛицевойСчетОткрытНаСервере(ЛицевойСчет, Период)
	
	Возврат Справочники.КВП_ЛицевыеСчета.ЛицевойСчетОткрыт(ЛицевойСчет, Период);
	
КонецФункции

&НаСервере
// Заполняет данные о жильце.
Процедура ЗаполнитьДанныеОЖильце(ДанныеОЖильце)
	
	Если ДанныеОЖильце = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ДанныеОЖильце) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		ФИО     = ДанныеОЖильце.Наименование;
		
	Иначе
		ФизЛицо = ДанныеОЖильце.ФизЛицо;
		
		// получение фамилии, имени, отчества
		РазделеннаяФИО = РазделитьФИО(СокрЛП(ДанныеОЖильце.ФИО));
		Фамилия  = РазделеннаяФИО.Фамилия;
		Имя      = РазделеннаяФИО.Имя;
		Отчество = РазделеннаяФИО.Отчество;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФизЛицо) Тогда
		ВыборФизлица = Истина;
	КонецЕсли;

	ДатаРождения        = ДанныеОЖильце.ДатаРождения;
	Пол                 = ДанныеОЖильце.Пол;
	ИНН                 = ДанныеОЖильце.ИНН;
	СтраховойНомерПФР   = ДанныеОЖильце.СтраховойНомерПФР;
	
КонецПроцедуры //ЗаполнитьДанныеОЖильце

&НаСервере
// Заполняет паспортные данные.
Процедура ЗаполнитьПаспортныеДанные(Данные)
	
	Если Данные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВидДокумента             = Данные.ВидДокумента;
	СерияДокумента           = Данные.СерияДокумента;
	НомерДокумента           = Данные.НомерДокумента;
	ДатаВыдачиДокумента      = Данные.ДатаВыдачиДокумента;
	КемВыданДокумент         = Данные.КемВыданДокумент;
	КодПодразделения         = Данные.КодПодразделения;
	Период                   = ?(НЕ ЗначениеЗаполнено(Данные.Период), '19000101', Данные.Период);
	ИзменятьПаспортныеДанные = Данные.ИзменятьПаспортныеДанные;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры //ЗаполнитьПаспортныеДанные

&НаКлиенте
// Функция формирует Наименование физлица из ФИО.
Функция ПолучитьНаименованиеФизлица()
	
	Возврат СОКРЛП(?(ПустаяСтрока(Фамилия),"",СОКРЛП(Фамилия))
				+ ?(ПустаяСтрока(Имя),""," " + СОКРЛП(Имя))
				+ ?(ПустаяСтрока(Отчество),""," " + СОКРЛП(Отчество)));
	
КонецФункции // ПолучитьНаименованиеФизлица()

&НаСервереБезКонтекста
// Получает список Физлиц - дублей
//
// Возвращаемое значение:
//   СписокЗначений   - список физлиц - дублей.
//
Функция ПолучитьСписокФизлиц(НаименованиеФизлица, ДатаРождения, ИНН, СтраховойНомерПФР)
	
	НаименованиеФизлица = СтрЗаменить(НаименованиеФизлица, "~", "~~");
	НаименованиеФизлица = СтрЗаменить(НаименованиеФизлица, "%", "~%");
	НаименованиеФизлица = СтрЗаменить(НаименованиеФизлица, "_", "~_");
	НаименованиеФизлица = СтрЗаменить(НаименованиеФизлица, "[", "~[");
	НаименованиеФизлица = СтрЗаменить(НаименованиеФизлица, "-", "~-");
	НаименованиеФизлица = НаименованиеФизлица+"%";
	
	НетДатыРождения = Не ЗначениеЗаполнено(ДатаРождения);
	НетИНН = Не (ЗначениеЗаполнено(ИНН) Или УПЖКХ_ТиповыеМетодыКлиентСервер.ИННСоответствуетТребованиям(ИНН, Ложь, ""));
	НетСтраховогоНомераПФР = Не (ЗначениеЗаполнено(СтрЗаменить(Лев(СтраховойНомерПФР,11),"-",""))
								 Или УПЖКХ_ТиповыеМетодыКлиентСервер.СтраховойНомерПФРСоответствуетТребованиям(СтраховойНомерПФР, ""));
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФизическиеЛица.Ссылка
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	(НЕ ФизическиеЛица.ЭтоГруппа)
	|	И (&парамНетДатыРождения
	|			ИЛИ &парамДатаРождения = ФизическиеЛица.ДатаРождения)
	|	И (&парамНетИНН
	|			ИЛИ &парамИНН = ФизическиеЛица.ИНН)
	|	И (&парамНетСтраховогоНомераПФР
	|			ИЛИ &парамСтраховойНомерПФР = ФизическиеЛица.СтраховойНомерПФР)
	|	И ФизическиеЛица.Наименование ПОДОБНО &парамНаименование СПЕЦСИМВОЛ ""~""";
	
	Запрос.УстановитьПараметр("парамНаименование",           НаименованиеФизлица);
	Запрос.УстановитьПараметр("парамНетДатыРождения",        НетДатыРождения);
	Запрос.УстановитьПараметр("парамДатаРождения",           ДатаРождения);
	Запрос.УстановитьПараметр("парамНетИНН",                 НетИНН);
	Запрос.УстановитьПараметр("парамИНН",                    ИНН);
	Запрос.УстановитьПараметр("парамНетСтраховогоНомераПФР", НетСтраховогоНомераПФР);
	Запрос.УстановитьПараметр("парамСтраховойНомерПФР",      СтраховойНомерПФР);
	
	МассивФизлиц = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	СписокФизлиц = Новый СписокЗначений;
	СписокФизлиц.ЗагрузитьЗначения(МассивФизлиц);
	Возврат СписокФизлиц;

КонецФункции // ПолучитьСписокФизлиц()

&НаКлиенте
// Проверяет дубли физлиц.
Процедура ПроверитьФизлицо()
	
	Если Не ЗначениеЗаполнено(Имя) Тогда
		Возврат;
	КонецЕсли;
	
	Если ФизлицоОбработано Тогда
		// не ищем дубли физлиц, физлицо уже обработано
		Возврат;
	КонецЕсли;
	
	НаименованиеФизлица = ПолучитьНаименованиеФизлица();
	
	Если ПустаяСтрока(НаименованиеФизлица) Тогда
		//ФизлицоОбъект.Наименование) Тогда
		Возврат;
	КонецЕсли;
	
	СписокФизлиц = ПолучитьСписокФизлиц(НаименованиеФизлица, ДатаРождения, ИНН, СтраховойНомерПФР);
	Если СписокФизлиц.Количество() = 0 Тогда
		// дубли физлиц не обнаружены
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Обработка.КВП_ПомощникСозданияПроживающего.Форма.ФормаВыбораФизлица",
				 Новый Структура("ФизЛица", СписокФизлиц),
				 ЭтотОбъект,,,,,
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервере
// Заполняет данные формы по данным физлица.
Процедура ОбработатьВыборФизлица()
	
	НаборЗаписейФИО = РегистрыСведений.ФИОФизическихЛиц.СоздатьНаборЗаписей();
	УПЖКХ_УчетЖильцов.ПолучитьСвязанныеДанныеФизлица(Физлицо, НаборЗаписейФИО);
	Если НаборЗаписейФИО.Количество() > 0 Тогда
		ФИОСрез = НаборЗаписейФИО[0];
		Фамилия  = ФИОСрез.Фамилия;
		Имя      = ФИОСрез.Имя;
		Отчество = ФИОСрез.Отчество;
	КонецЕсли;
	
	ЗаполнитьДанныеОЖильце(Физлицо);
	
	ОбъектФизЛицоКИ.КонтактнаяИнформация.Очистить();
	
	Для Каждого СтрокаКИ Из ФизЛицо.КонтактнаяИнформация Цикл
		ЗаполнитьЗначенияСвойств(ОбъектФизЛицоКИ.КонтактнаяИнформация.Добавить(), СтрокаКИ);
	КонецЦикла;
	
	УПЖКХ_ТиповыеМетодыСервер.КонтактнаяИнформацияУдалитьЭлементыКонтактнойИнформацииНаФорме(ЭтотОбъект, ОбъектФизЛицоКИ);
	
	УПЖКХ_ТиповыеМетодыСервер.КонтактнаяИнформацияПриСозданииНаСервере(ЭтотОбъект, ОбъектФизЛицоКИ);
	
	ЗаполнитьПаспортныеДанные(УПЖКХ_УчетЖильцов.ЗаполнитьПаспортныеДанныеФизЛица(Объект.Дата, ФизЛицо));
	
КонецПроцедуры

&НаСервереБезКонтекста
// Функция проверяет корректность даты
Функция ДатаКорректнаНаСервере(ДатаРождения)
	
	Возврат ДатаКорректна(ДатаРождения);
	
КонецФункции

&НаКлиенте
// Подготавливает структуру с паспортными данными.
Функция ПаспортныеДанные()
	
	ПаспортныеДанные = Новый Структура;
	ПаспортныеДанные.Вставить("ВидДокумента",             ВидДокумента);
	ПаспортныеДанные.Вставить("СерияДокумента",           СерияДокумента);
	ПаспортныеДанные.Вставить("НомерДокумента",           НомерДокумента);
	ПаспортныеДанные.Вставить("ДатаВыдачиДокумента",      ДатаВыдачиДокумента);
	ПаспортныеДанные.Вставить("КемВыданДокумент",         КемВыданДокумент);
	ПаспортныеДанные.Вставить("КодПодразделения",         КодПодразделения);
	ПаспортныеДанные.Вставить("Период",                   Период);
	ПаспортныеДанные.Вставить("ИзменятьПаспортныеДанные", ИзменятьПаспортныеДанные);
	
	Возврат ПаспортныеДанные;
	
КонецФункции //ПаспортныеДанные

&НаСервере
// Заполняет количество проживающих и зарегистрированных.
//
// Параметры
//  нет.
//
Процедура ЗаполнитьКоличествоПроживающихИЗарегистрированныхНаСервере()
	
	Запрос = Новый Запрос();
	Запрос.Текст  =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.КоличествоПроживающих КАК КоличествоПроживающих,
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.КоличествоЗарегистрированных КАК КоличествоЗарегистрированных
	|ИЗ
	|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(&Период, ЛицевойСчет = &ЛицевойСчет) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних";
	
	Запрос.УстановитьПараметр("Период",      КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("ЛицевойСчет", Объект.ЛицевойСчет);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		КоличествоПроживающих        = Выборка.КоличествоПроживающих;
		КоличествоЗарегистрированных = Выборка.КоличествоЗарегистрированных;
	Иначе
		КоличествоПроживающих        = 0;
		КоличествоЗарегистрированных = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура обновляет данные по лицевому счету.
//
Процедура ОбновитьДанныеПоЛицевомуСчету()
	
	// Если статус л/с изменился, то нужно обновить оформление элементов формы.
	Если ОбработатьИзменениеПараметраСтатусаЛицевогоСчета(ЭтаФорма) Тогда
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
	// Заполнение количества проживающих и зарегистрированных.
	Если Настройка_УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами Тогда
		ЗаполнитьКоличествоПроживающихИЗарегистрированныхНаСервере();
	КонецЕсли;
	
	// Заполнение количества проживающих и зарегистрированных.
	Если Настройка_УПЖКХ_УпрощенныйВариантУчетаСобственников Тогда
		ЗаполнитьДолиСобственностиДругихЖильцовЛС();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура обновляет и заполняет данные о собственности других жильцов.
Процедура ЗаполнитьДолиСобственностиДругихЖильцовЛС()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Жильцы.Ссылка КАК Проживающий,
	|	УПЖКХ_Жильцы.ФизЛицо КАК ПроживающийФизЛицо
	|ПОМЕСТИТЬ ЖильцыЛС
	|ИЗ
	|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
	|ГДЕ
	|	УПЖКХ_Жильцы.Владелец = &ЛицевойСчет
	|	И НЕ УПЖКХ_Жильцы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник КАК СобственникФизЛицо,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Действует КАК Собственник,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ДоляСобственникаЧислитель КАК ДоляСобственникаЧислитель,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ДоляСобственникаЗнаменатель КАК ДоляСобственникаЗнаменатель
	|ПОМЕСТИТЬ СобственникиПомещения
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(
	|			&Период,
	|			Помещение = &Помещение
	|				И Собственник В
	|					(ВЫБРАТЬ
	|						ЖильцыЛС.Проживающий.ФизЛицо
	|					ИЗ
	|						ЖильцыЛС КАК ЖильцыЛС)) КАК УПЖКХ_СобственникиПомещенийСрезПоследних
	|ГДЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЖильцыЛС.Проживающий КАК Проживающий,
	|	СобственникиПомещения.Собственник КАК Собственник,
	|	СобственникиПомещения.ДоляСобственникаЧислитель КАК ДоляСобственностиЧислитель,
	|	СобственникиПомещения.ДоляСобственникаЗнаменатель КАК ДоляСобственностиЗнаменатель
	|ИЗ
	|	ЖильцыЛС КАК ЖильцыЛС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СобственникиПомещения КАК СобственникиПомещения
	|		ПО ЖильцыЛС.ПроживающийФизЛицо = СобственникиПомещения.СобственникФизЛицо";
	
	Запрос.УстановитьПараметр("Период",      КонецДня(ДатаИзмененияСведенийОЛицевомСчете));
	Запрос.УстановитьПараметр("ЛицевойСчет", Объект.ЛицевойСчет);
	Запрос.УстановитьПараметр("Помещение",   Объект.ЛицевойСчет.Адрес);
	
	// Загружаем таблицу собственников.
	ДолиСобственностиДругихЖильцовЛС.Загрузить(Запрос.Выполнить().Выгрузить());
	
	Для Каждого ТекСтрока Из ДолиСобственностиДругихЖильцовЛС Цикл
		
		ТекСтрока.ДоляСобственностиЛС = УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеДроби(ТекСтрока.ДоляСобственностиЧислитель, ТекСтрока.ДоляСобственностиЗнаменатель);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Процедура проверяет корректность установленных долей лицевых счетов на помещение.
// Доли лицевых счетов установлены корректно, если их сумма не превышает 1.
//
Процедура ПроверитьЗаполнениеДолейСобственностиНаПомещениеНаСервере(Отказ)
	
	// Исходная таблица собственников.
	ТаблицаЖильцов = ДолиСобственностиДругихЖильцовЛС.Выгрузить();
	
	// Исходную таблицу дополняем пустым собственником с данными текущего жильца.
	СтрокаНовогоЖильца = ТаблицаЖильцов.Добавить();
	СтрокаНовогоЖильца.Проживающий                  = Справочники.УПЖКХ_Жильцы.ПустаяСсылка();
	СтрокаНовогоЖильца.Собственник                  = Истина;
	СтрокаНовогоЖильца.ДоляСобственностиЧислитель   = ДоляСобственностиЧислитель;
	СтрокаНовогоЖильца.ДоляСобственностиЗнаменатель = ДоляСобственностиЗнаменатель;
	
	// Выполняем проверку долей собственности.
	УПЖКХ_УчетСобственностиСервер.ПроверитьЗаполнениеДолейСобственностиНаПомещение(ТаблицаЖильцов, Отказ);
	
КонецПроцедуры // ПроверитьНаЗаполненностьДолейИИхСумму()

&НаСервере
// Процедура выполняет создание элементов справочников ФизЛица и Жильцы.
Функция ВыполнитьСозданиеПроживающего(Отказ)
	
	// Признак успешности создания проживающего и формирования документа "Изменение лицевого счета".
	Отказ = Ложь;
	
	// Параметры, используемые при создании проживающего.
	ТекРодитель = Справочники.ФизическиеЛица.ПустаяСсылка();
	
	// Используем транзакцию для отката данных к начальному виду при ошибке.
	НачатьТранзакцию();
	
	// Поиск группы в справочнике Физлиц.
	ГрПроживающих = "Проживающие";
	НайденнаяГр = Справочники.ФизическиеЛица.НайтиПоНаименованию(ГрПроживающих,Истина);
	Если (НайденнаяГр.Пустая()) ИЛИ (НЕ НайденнаяГр.ЭтоГруппа) Тогда
		
		Гр = Справочники.ФизическиеЛица.СоздатьГруппу();
		Гр.Наименование = ГрПроживающих;
		
		Если КВП_ЗаписатьОбъект(Гр) Тогда
			ТекРодитель = Гр.Ссылка;
		Иначе
			Отказ = Истина;
		КонецЕсли;
		
	Иначе
		ТекРодитель = НайденнаяГр;
	КонецЕсли;
	
	// ФизЛицо.
	Если Не Отказ Тогда
		
		// получение фамилии, имени, отчества
		РазделеннаяФИО = Новый Структура;
		РазделеннаяФИО.Вставить("Фамилия",  Фамилия);
		РазделеннаяФИО.Вставить("Имя",      Имя);
		РазделеннаяФИО.Вставить("Отчество", Отчество);
		
		// Поиск Физлица
		тмФизЛицо = ПоискФизЛица(РазделеннаяФИО, ДатаРождения, Пол, СтраховойНомерПФР);
		
		Если тмФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
			
			// создаем новое физлицо
			СправФЛ = Справочники.ФизическиеЛица.СоздатьЭлемент();
			СправФЛ.Родитель     = ТекРодитель;
			СправФЛ.ФИО          = СокрЛП(Фамилия + " " + Имя + " " + Отчество);
			СправФЛ.Наименование = СправФЛ.ФИО;
			СправФЛ.ДатаРождения = ДатаРождения;
			СправФЛ.Пол          = Пол;
			СправФЛ.ИНН          = ИНН;
			СправФЛ.СтраховойНомерПФР = СтраховойНомерПФР;
			
			//Вставить КИ нового ФЛ
			КонтактнаяИнформацияПередЗаписьюНаСервере(ЭтотОбъект, СправФЛ);
			
			Если КВП_ЗаписатьОбъект(СправФЛ) Тогда
				тмФизЛицо = СправФЛ.Ссылка;
			Иначе
				Отказ = Истина;
			КонецЕсли;
			
			// запись ФИО физлица
			МенеджерЗаписи = РегистрыСведений.ФИОФизическихЛиц.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ФизическоеЛицо = тмФизЛицо;
			МенеджерЗаписи.Период   = '19000101';
			МенеджерЗаписи.Фамилия  = РазделеннаяФИО.Фамилия;
			МенеджерЗаписи.Имя      = РазделеннаяФИО.Имя;
			МенеджерЗаписи.Отчество = РазделеннаяФИО.Отчество;
			МенеджерЗаписи.Записать(Истина);
			
		Иначе
			
			//Отредактировать КИ физлица
			тмФизЛицоОбъект = тмФизЛицо.ПолучитьОбъект();
			КонтактнаяИнформацияПередЗаписьюНаСервере(ЭтотОбъект, тмФизЛицоОбъект);
			
			Если НЕ КВП_ЗаписатьОбъект(тмФизЛицоОбъект) Тогда;
				Отказ = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Запись паспортных данных жильца.
	Если Не Отказ И ИзменятьПаспортныеДанные Тогда
		
		// паспортные данные
		МенеджерЗаписи = РегистрыСведений.ДокументыФизическихЛиц.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Физлицо          = тмФизЛицо;
		МенеджерЗаписи.Период           = Период;
		МенеджерЗаписи.ВидДокумента     = ВидДокумента;
		МенеджерЗаписи.Серия            = СерияДокумента;
		МенеджерЗаписи.Номер            = НомерДокумента;
		МенеджерЗаписи.ДатаВыдачи       = ДатаВыдачиДокумента;
		МенеджерЗаписи.КемВыдан         = КемВыданДокумент;
		МенеджерЗаписи.КодПодразделения = КодПодразделения;
		МенеджерЗаписи.ЯвляетсяДокументомУдостоверяющимЛичность = Истина;
		
		Если Не КВП_ЗаписатьОбъект(МенеджерЗаписи) Тогда;
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Проживающий.
	Если Не Отказ Тогда
		
		// создаем нового проживающего
		СправОбъект = Справочники.УПЖКХ_Жильцы.СоздатьЭлемент();
		СправОбъект.Наименование = СокрЛП(Фамилия + " " + Имя + " " + Отчество);
		СправОбъект.ФизЛицо      = тмФизЛицо;
		СправОбъект.Владелец     = Объект.ЛицевойСчет;
		
		Если Не КВП_ЗаписатьОбъект(СправОбъект) Тогда
			Отказ = Истина;
		КонецЕсли;
		
		СсылкаПроживающий = СправОбъект.Ссылка;
		
	КонецЕсли;
	
	// Создаем документ "Изменение л/с".
	Если Не Отказ И ВнестиИзмененияСведенийОЛС И ЛицевойСчетОткрытНаДатуИзмененияСведений Тогда
		
		СозданиеДокументаИзмененияЛС(Отказ, СсылкаПроживающий);
		
	КонецЕсли;
	
	Если Отказ Тогда
		
		ОтменитьТранзакцию();
		
		НСтрока = НСтр("ru = 'Создание проживающего не выполнено.'");
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(НСтрока, Отказ);
		
	Иначе
		
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
КонецФункции

&НаСервере
// Процедура создания документа "Изменение л/с".
Процедура СозданиеДокументаИзмененияЛС(Отказ, СсылкаПроживающий)
	
	ДокументИзменения = Документы.КВП_ИзменениеЛицевогоСчета.СоздатьДокумент();
	
	// Заполнение стандартных реквизитов документа.
	УПЖКХ_ТиповыеМетодыСервер.Заполнить(ДокументИзменения);
	
	// Заполнение основных реквизитов документа.
	ДокументИзменения.Дата = НачалоДня(ДатаИзмененияСведенийОЛицевомСчете);
	ДокументИзменения.УстановитьВремя(РежимАвтоВремя.ТекущееИлиПоследним, Истина);
	
	ДокументИзменения.ВидОперации = Перечисления.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ИзменениеДанныхОЖильцах;
	ДокументИзменения.ЛицевойСчет = Объект.ЛицевойСчет;
	
	Если Настройка_УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами Тогда
		
		ДокументИзменения.КоличествоПроживающих        = КоличествоПроживающих;
		ДокументИзменения.КоличествоЗарегистрированных = КоличествоЗарегистрированных;
		
	КонецЕсли;
	
	Если Зарегистрирован Или Собственник Тогда
		// Если жилец зарегистрирован или указан как собственник, то формируем операцию временной регистрации.
		ДокументИзменения.ВидИзменения = Перечисления.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Регистрация;
	Иначе
		// В противном случае формируем операцию временного присутствия.
		ДокументИзменения.ВидИзменения = Перечисления.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Присутствие;
	КонецЕсли;
	
	// Производим стандартное заполнение табличной части документа
	// данным лицевого счета, актуальными на дату изменения.
	ДокументИзменения.ЗаполнитьТабличнуюЧасть();
	
	// Если пользователь изменил доли собственности других жильцов л/с,
	// то обновим их в новом документе изменения лицевого счета.
	Для Каждого ТекСтрокаСобственника Из ДолиСобственностиДругихЖильцовЛС Цикл
		
		НайденнаяСтрока = ДокументИзменения.Главная.Найти(ТекСтрокаСобственника.Проживающий, "Проживающий");
		Если Не НайденнаяСтрока = Неопределено Тогда
			
			Если Не НайденнаяСтрока.ДоляСобственностиЧислитель = ТекСтрокаСобственника.ДоляСобственностиЧислитель
			 Или Не НайденнаяСтрока.ДоляСобственностиЗнаменатель = ТекСтрокаСобственника.ДоляСобственностиЗнаменатель Тогда
				
				НайденнаяСтрока.ДоляСобственностиЧислитель   = ТекСтрокаСобственника.ДоляСобственностиЧислитель;
				НайденнаяСтрока.ДоляСобственностиЗнаменатель = ТекСтрокаСобственника.ДоляСобственностиЗнаменатель
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавляем новую строку в табличную часть документа.
	НоваяСтрока = ДокументИзменения.Главная.Добавить();
	
	НоваяСтрока.Проживающий    = СсылкаПроживающий;
	НоваяСтрока.СтепеньРодства = СтепеньРодства;
	
	Если Зарегистрирован Тогда
		
		// Если зарегистрирован, то устанавливаем только признак регистрации.
		НоваяСтрока.Зарегистрирован     = Истина;
		НоваяСтрока.ДатаРегистрации     = ДатаПроживанияРегистрации;
		НоваяСтрока.ДатаОтменыИзменения = ДатаОтменыПроживанияРегистрации;
		
	ИначеЕсли Проживает Тогда
		
		// Если не зарегистрирован, но проживает, устанавливаем признак проживания.
		НоваяСтрока.Проживает = Истина;
		НоваяСтрока.ДатаРегистрации     = ДатаПроживанияРегистрации;
		НоваяСтрока.ДатаОтменыИзменения = ДатаОтменыПроживанияРегистрации;
		
	КонецЕсли;
	
	Если Собственник Тогда
		НоваяСтрока.Собственник                  = Истина;
		НоваяСтрока.ДоляСобственностиЗнаменатель = ДоляСобственностиЗнаменатель;
		НоваяСтрока.ДоляСобственностиЧислитель   = ДоляСобственностиЧислитель;
	КонецЕсли;
	
	Если ВладелецЕдинственногоЖилья Тогда
		НоваяСтрока.ВладелецЕдинственногоЖилья = Истина;
	КонецЕсли;
	
	Если Не ДокументИзменения.ПроверитьЗаполнение() Тогда
		
		// Отказываемся от проведения и выводим сообщение об ошибке.
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(НСтр("ru = 'При проверке заполнения документа изменения л/с возникли ошибки!'"), Отказ);
		
	Иначе
		
		// Записываем документ в режиме проведения.
		Если КВП_ЗаписатьОбъект(ДокументИзменения, РежимЗаписиДокумента.Проведение) Тогда
			ДокументИзмененияЛС = ДокументИзменения.Ссылка;
		Иначе
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

&НаСервере
// Дополняет структуру выходных параметров контактной информацией.
// Данная структура возвращается при закрытии формы помощника ввода жильца,
// содержит данные о проживающем.
//
// Параметры:
//  СтруктураПараметров	 - Структура	 - Структура с данными о проживающем.
//
Процедура ДополнитьСтруктуруПараметровКонтактнойИнформацией(СтруктураПараметров)
	
	КонтактнаяИнформацияПередЗаписьюНаСервере(ЭтотОбъект, ОбъектФизЛицоКИ);
	
	ТаблицаЗначенийКИ = ОбъектФизЛицоКИ.КонтактнаяИнформация.Выгрузить(,"Тип, Вид, Представление, ЗначенияПолей,
	                                                                    |Страна, Регион, Город, АдресЭП, ДоменноеИмяСервера,
	                                                                    |НомерТелефона, НомерТелефонаБезКодов, ВидДляСписка, Значение");
	МассивКИ = УПЖКХ_ТиповыеМетодыСервер.ТаблицаЗначенийВМассив(ТаблицаЗначенийКИ);
	
	СтруктураПараметров.Вставить("КонтактнаяИнформация", МассивКИ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Устанавливаем текущую таблицу переходов.
	СценарийСозданияПроживающего();
	
	Режим = Неопределено;
	
	ДанныеОЖильце = Новый Структура;
	Если Параметры.Свойство("ДанныеОЖильце") И ТипЗнч(Параметры.ДанныеОЖильце) = Тип("Структура") Тогда
		Параметры.Свойство("ДанныеОЖильце", ДанныеОЖильце);
		
		Если ДанныеОЖильце.Свойство("КонтактнаяИнформация") Тогда
			
			Для Каждого ЭлементМассиваКИ Из ДанныеОЖильце.КонтактнаяИнформация Цикл
				ЗаполнитьЗначенияСвойств(ОбъектФизЛицоКИ.КонтактнаяИнформация.Добавить(), ЭлементМассиваКИ);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ДанныеОЖильце.Свойство("Режим", Режим);
	
	Если Режим = "Создание" Тогда
		
		Если ДанныеОЖильце.Свойство("ЛицевойСчет") Тогда
			Объект.ЛицевойСчет = ДанныеОЖильце.ЛицевойСчет;
		КонецЕсли;
		
	Иначе
		
		Элементы.ЛицевойСчет.Видимость = Ложь;
		Элементы.НадписьДалее3.Заголовок = "Нажмите кнопку ""Далее"" для добавления проживающего.";
		
	КонецЕсли;
	
	// Дата получения паспортных данных не зависит от режима работы помощника.
	Объект.Дата = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	
	ЗаполнитьДанныеОЖильце(ДанныеОЖильце);
	
	Если ДанныеОЖильце.Свойство("ПаспортныеДанные") Тогда
		ЗаполнитьПаспортныеДанные(ДанныеОЖильце.ПаспортныеДанные);
		
	ИначеЕсли Не ФизЛицо.Пустая() Тогда
		ЗаполнитьПаспортныеДанные(УПЖКХ_УчетЖильцов.ЗаполнитьПаспортныеДанныеФизЛица(Объект.Дата, ФизЛицо));
		
	КонецЕсли;
	
	// Если явно указано, что в помощнике не нужно вводить изменение л/с или помощник
	// открывается в режиме создания жильца, то страницу для ввода изменения л/с пропускаем.
	// Например, ввод изменения л/с не нужен, если жилец добавляется из документа
	// открытия или изменения лицевого счета.
	Параметры.Свойство("НеВводитьИзменениеЛСПриСозданииЖильца", НеВводитьИзменениеЛСПриСозданииЖильца);
	Если Не Режим = "Создание" Тогда
		НеВводитьИзменениеЛСПриСозданииЖильца = Истина;
	КонецЕсли;
	
	// По умолчанию определяем дату изменения сведений о лицевом счете для получения статуса л/с.
	ДатаИзмененияСведенийОЛицевомСчете = ТекущаяДата();
	
	// Представление доли собственности по умолчанию.
	ДоляСобственностиЛС = 0;
	
	// Получаем настройки параметров учета количества жильцов и собственников.
	Настройка_УПЖКХ_УпрощенныйВариантУчетаСобственников  = Константы.УПЖКХ_УпрощенныйВариантУчетаСобственников.Получить();
	Настройка_УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами = Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Получить();
	Настройка_УПЖКХ_ИспользоватьФункционалВЕЖ            = Константы.УПЖКХ_ИспользоватьФункционалВЕЖ.Получить();
	
	// Обновление параметров лицевого счета для ввода изменения л/с.
	ОбновитьДанныеПоЛицевомуСчету();
	
	УправлениеФормой(ЭтотОбъект);
	
	Модифицированность = Ложь;
	
	ЦветСтиляПоясняющийОшибкуТекст = ЦветаСтиля.ПоясняющийОшибкуТекст;
	ЦветСтиляЦветТекстаПоля = ЦветаСтиля.ЦветТекстаПоля;
	
	УПЖКХ_ТиповыеМетодыСервер.КонтактнаяИнформацияПриСозданииНаСервере(ЭтотОбъект, ОбъектФизЛицоКИ);
	
	// Установить доступность формы с учетом ключа СЛК.
	СЗК_МодульЗащитыКлиентСервер.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаОповещения" формы.
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗакрытаФормаВыбораФизлиц" Тогда
		
		Если ЗначениеЗаполнено(Параметр) Тогда
			ФизЛицо = Параметр;
		КонецЕсли;
		
		ФизлицоОбработано = Истина;
		ОбработатьВыборФизлица();
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.ОбработатьОтображениеПоляСтраховойНомерПФР(СтраховойНомерПФР,
																					Элементы.СтраховойНомерПФР, ЭтотОбъект);
		УПЖКХ_ТиповыеМетодыКлиентСервер.ОбработатьОтображениеПоляИНН(ИНН, Элементы.ИНН, ЭтотОбъект);
		
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Отказ = Ложь;
	
	Если Модифицированность И НЕ ЗакрытьФорму Тогда
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаПередЗакрытием", ЭтаФорма),
					   "При закрытии формы все введенные данные будут потеряны. Закрыть форму?",
					   РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры // ПередЗакрытием()

&НаКлиенте
// Обработка результата вопроса, вызванного в процедуре-обработчике "ПередЗакрытием()".
Процедура ОбработатьРезультатВопросаПередЗакрытием(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗакрытьФорму = Истина;
		ЭтаФорма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаПередЗакрытием()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ ЭТАПА 1

#Область СобытияЭтапа1

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ЛицевойСчет".
Процедура ЛицевойСчетПриИзменении(Элемент)
	
	ОбновитьДанныеПоЛицевомуСчету();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Фамилия".
Процедура ФамилияПриИзменении(Элемент)
	
	ПроверитьФизлицо();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Имя".
Процедура ИмяПриИзменении(Элемент)
	
	ПроверитьФизлицо();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Отчество".
Процедура ОтчествоПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Отчество) И Не ЗначениеЗаполнено(Пол) Тогда
		Пол = УПЖКХ_ТиповыеМетодыКлиент.ОпределитьПолПоОтчеству(Отчество);
	КонецЕсли;
	
	ПроверитьФизлицо();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "СтраховойНомерПФР".
Процедура СтраховойНомерПФРПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ОбработатьОтображениеПоляСтраховойНомерПФР(СтраховойНомерПФР ,Элемент, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Нажатие" поля "СНИЛСНадпись".
Процедура СНИЛСНадписьНажатие(Элемент, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПояснениеНажатие(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ИНН".
Процедура ИННПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ОбработатьОтображениеПоляИНН(ИНН, Элемент, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Нажатие" поля "ИНННадпись".
Процедура ИНННадписьНажатие(Элемент, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПояснениеНажатие(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода "Дата рождения".
//
Процедура ДатаРожденияПриИзменении(Элемент)
	
	ПроверитьФизлицо();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "ДокументКемВыдан".
Процедура КемВыданДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ФормаВыбора = ПолучитьФорму("Справочник.КВП_ОВД.ФормаВыбора");
	ФормаВыбора.ВладелецФормы = ЭтаФорма;
	ФормаВыбора.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОбработатьВыборОВД", ЭтаФорма);
	ФормаВыбора.Открыть();
	
КонецПроцедуры // КемВыданДокументНачалоВыбора()

&НаКлиенте
// Асинхронный обработчик результата выбора элемента справочника "ОВД".
//
Процедура ОбработатьВыборОВД(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		
		СтруктураРеквизитовОВД = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьСтруктуруРеквизитовОВД(ВыбранноеЗначение);
		
		КемВыданДокумент = СтруктураРеквизитовОВД.Наименование;
		КодПодразделения = СтруктураРеквизитовОВД.КодПодразделения;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВыборОВД()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ ЭТАПА 2

#Область СобытияЭтапа2

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ИзменятьПаспортныеДанные".
Процедура ИзменятьПаспортныеДанныеПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СОБЫТИЯ ЭТАПА 3

#Область СобытияЭтапа2

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ФлажокИзмененияСведенийОЛС".
Процедура ФлажокИзмененияСведенийОЛСПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ДатаРегистрацииЛС".
Процедура ДатаРегистрацииЛСПриИзменении(Элемент)
	
	ОбновитьДанныеПоЛицевомуСчету();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ФлажокПроживает".
Процедура ФлажокПроживаетПриИзменении(Элемент)
	
	// Если только проживает, то не можем отразить жильца как собственника.
	Если Проживает И Не Зарегистрирован И Собственник Тогда
		
		Собственник = Ложь;
		
		// А если он не собственник, то не может быть ВЕЖ.
		Если ВладелецЕдинственногоЖилья Тогда
			ВладелецЕдинственногоЖилья = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ФлажокЗарегистрирован".
Процедура ФлажокЗарегистрированПриИзменении(Элемент)
	
	// Если указано, что жилец зарегистрирован, то он автоматически помечается как проживающий.
	Если Зарегистрирован И Не Проживает Тогда
		Проживает = Истина;
	КонецЕсли;
	
	// Если жилец не зарегистрирован то он не может быть собственником.
	Если Не Зарегистрирован И Собственник Тогда
		
		// А если он не собственник, то не может быть ВЕЖ.
		Если ВладелецЕдинственногоЖилья Тогда
			ВладелецЕдинственногоЖилья = Ложь;
		КонецЕсли;
		
		// Если только проживает, то не можем отразить жильца как собственника.
		Если Проживает Тогда
			Собственник = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" полей ввода периода проживания или регистрации.
//
Процедура ПриИзмененииПериодаПроживанияРегистрации(Элемент)
	
	// Дата окончания проживания или регистрации не должна превышать дату начала периода.
	Если ЗначениеЗаполнено(ДатаПроживанияРегистрации)
	   И ЗначениеЗаполнено(ДатаОтменыПроживанияРегистрации)
	   И ДатаПроживанияРегистрации > ДатаОтменыПроживанияРегистрации Тогда
		
		// Дату окончания приводим к дате начала периода.
		ДатаОтменыПроживанияРегистрации = ДатаПроживанияРегистрации;
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Период проживания или регистрации был введен некорректно и исправлен автоматически!");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ФлажокСобственник".
Процедура ФлажокСобственникПриИзменении(Элемент)
	
	// Сбрасываем признак ВЕЖ, если жилец не является собственником.
	Если Не Собственник И ВладелецЕдинственногоЖилья Тогда
		ВладелецЕдинственногоЖилья = Ложь;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Выбор" поля "ДолиСобственностиДругихЖильцовЛС".
//
Процедура ДолиСобственностиДругихЖильцовЛСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекКолонка = Элемент.ТекущийЭлемент;
	
	Если ТекКолонка.Имя = "ДолиСобственностиДругихЖильцовЛСДоляСобственностиЛС" Тогда
		
		ТекСтрока = Элемент.ТекущиеДанные;
		Если ТекСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Заголовок",       "Доля собственности");
		СтруктураПараметров.Вставить("Объект",          ТекСтрока.Проживающий);
		СтруктураПараметров.Вставить("ДоляЧислитель",   ТекСтрока.ДоляСобственностиЧислитель);
		СтруктураПараметров.Вставить("ДоляЗнаменатель", ТекСтрока.ДоляСобственностиЗнаменатель);
		
		ОткрытьФорму("ОбщаяФорма.УПЖКХ_УстановкаДоли", СтруктураПараметров,,,,, Новый ОписаниеОповещения("ОбработчикЗавершенияИзмененияДолиСобственностиДругогоЖильца", ЭтотОбъект, Новый Структура("ТекСтрока", ТекСтрока)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура завершения обработки события "Выбор" ТЧ других собственников.
//
Процедура ОбработчикЗавершенияИзмененияДолиСобственностиДругогоЖильца(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	ТекСтрока = ДополнительныеПараметры.ТекСтрока;
	
	Если НЕ ВыбранноеЗначение = Неопределено Тогда
		
		Если НЕ ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			Возврат;
		КонецЕсли;
		
		ТекСтрока.ДоляСобственностиЧислитель   = ВыбранноеЗначение.ДоляЧислитель;
		ТекСтрока.ДоляСобственностиЗнаменатель = ВыбранноеЗначение.ДоляЗнаменатель;
		ТекСтрока.ДоляСобственностиЛС          = УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеДроби(ТекСтрока.ДоляСобственностиЧислитель, ТекСтрока.ДоляСобственностиЗнаменатель);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработчикЗавершенияИзмененияДолиСобственностиДругогоЖильца()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "КомандаДалее".
Процедура КомандаДалее(Команда)
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаНазад".
Процедура КомандаНазад(Команда)
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаГотово".
Процедура КомандаГотово(Команда)
	
	ЗакрытьФормуБезусловно = Истина;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаОтмена".
Процедура КомандаОтмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "УстановитьДолюСобственности".
Процедура УстановитьДолюСобственности(Команда)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Заголовок",       "Доля собственности");
	СтруктураПараметров.Вставить("Объект",          ПолучитьНаименованиеФизлица());
	СтруктураПараметров.Вставить("ДоляЧислитель",   ДоляСобственностиЧислитель);
	СтруктураПараметров.Вставить("ДоляЗнаменатель", ДоляСобственностиЗнаменатель);
	
	ОткрытьФорму("ОбщаяФорма.УПЖКХ_УстановкаДоли", СтруктураПараметров,,,,, Новый ОписаниеОповещения("ДоляСобственностиВыборЗавершение",ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
// Процедура завершения обработки команды "УстановитьДолюСобственности".
Процедура ДоляСобственностиВыборЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если НЕ ВыбранноеЗначение = Неопределено
	   И ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		// Обработаем выбранные значения числителя и знаменателя доли собственности.
		ДоляСобственностиЧислитель   = ВыбранноеЗначение.ДоляЧислитель;
		ДоляСобственностиЗнаменатель = ВыбранноеЗначение.ДоляЗнаменатель;
		
		ДоляСобственностиЛС = УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеДроби(ВыбранноеЗначение.ДоляЧислитель, ВыбранноеЗначение.ДоляЗнаменатель);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик начала выбора недоступного поля.
//
Процедура НачалоВыбораНедоступногоПоля(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Поставляемая часть

&НаКлиенте
// Процедура изменяет порядковый номер перехода.
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	
	ОчиститьСообщения();
	
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
	
КонецПроцедуры

&НаКлиенте
// Процедура устанавливает порядковый номер перехода.
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)
	
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	
	Если ЭтоПереходДалее И ПорядковыйНомерПерехода = 1 И НеВводитьИзменениеЛСПриСозданииЖильца Тогда
		
		// Если проживающий создается для помощника открытия л/с, то страницу с изменением
		// сведений по л/с пропускаем, так как эти сведения вводятся в самом помощнике открытия л/с.
		ПорядковыйНомерПерехода = Значение + 1;
		
	Иначе
		
		// В остальных случаях ситуация стандартная, выполняем переход на следующую или предыдущую страницу.
		ПорядковыйНомерПерехода = Значение;
		
	КонецЕсли;
	
	Если ПорядковыйНомерПерехода < 0 Тогда
		
		ПорядковыйНомерПерехода = 0;
		
	КонецЕсли;
	
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
	
КонецПроцедуры

&НаКлиенте
// Возникает при изменении порядкового номера перехода.
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Выполняем обработчики событий перехода
	ВыполнитьОбработчикиСобытийПерехода(ЭтоПереходДалее);
	
	// Устанавливаем отображение страниц
	СтрокиПереходаТекущие = 
		ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	Элементы.ПанельНавигации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыНавигации];
	
	// Устанавливаем текущую кнопку по умолчанию
	КнопкаДалее = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаДалее");
	
	Если КнопкаДалее <> Неопределено Тогда
		
		КнопкаДалее.КнопкаПоУмолчанию = Истина;
		
	Иначе
		
		КнопкаГотово = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаГотово");
		
		Если КнопкаГотово <> Неопределено Тогда
			
			КнопкаГотово.КнопкаПоУмолчанию = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоПереходДалее И СтрокаПереходаТекущая.ДлительнаяОперация Тогда
		
		ПодключитьОбработчикОжидания("ВыполнитьОбработчикДлительнойОперации", 1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняет обработчики перехода.
Процедура ВыполнитьОбработчикиСобытийПерехода(Знач ЭтоПереходДалее)
	
	// Обработчики событий переходов
	Если ЭтоПереходДалее Тогда
		
		СтрокиПерехода = 
			ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода - 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеДалее
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее)
			И Не СтрокаПерехода.ДлительнаяОперация Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);
			
			Отказ = Ложь;
			
			Результат = Вычислить(ИмяПроцедуры);
			
			Если Отказ Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокиПерехода = 
			ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода + 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеНазад
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад)
			И Не СтрокаПерехода.ДлительнаяОперация Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеНазад);
			
			Отказ = Ложь;
			
			Результат = Вычислить(ИмяПроцедуры);
			
			Если Отказ Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиПереходаТекущие = 
		ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Если СтрокаПереходаТекущая.ДлительнаяОперация И Не ЭтоПереходДалее Тогда
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
		Возврат;
	КонецЕсли;
	
	// обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);
		
		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;
		
		Результат = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			
			Возврат;
			
		ИначеЕсли ПропуститьСтраницу Тогда
			
			Если ЭтоПереходДалее Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				
				Возврат;
				
			Иначе
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняет обработчики длительной операции.
Процедура ВыполнитьОбработчикДлительнойОперации()
	
	СтрокиПереходаТекущие = 
		ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// обработчик ОбработкаДлительнойОперации
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПерейтиДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации);
		
		Отказ = Ложь;
		ПерейтиДалее = Истина;
		
		Результат = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			
			Возврат;
			
		ИначеЕсли ПерейтиДалее Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура добавляет новую строку в таблицу переходов.
Процедура ТаблицаПереходовНоваяСтрока(ПорядковыйНомерПерехода,
									ИмяОсновнойСтраницы,
									ИмяСтраницыНавигации,
									ИмяСтраницыДекорации = "",
									ИмяОбработчикаПриОткрытии = "",
									ИмяОбработчикаПриПереходеДалее = "",
									ИмяОбработчикаПриПереходеНазад = "",
									ДлительнаяОперация = Ложь,
									ИмяОбработчикаДлительнойОперации = "")
	
	НоваяСтрока = ТаблицаПереходов.Добавить();
	
	НоваяСтрока.ПорядковыйНомерПерехода = ПорядковыйНомерПерехода;
	НоваяСтрока.ИмяОсновнойСтраницы     = ИмяОсновнойСтраницы;
	НоваяСтрока.ИмяСтраницыДекорации    = ИмяСтраницыДекорации;
	НоваяСтрока.ИмяСтраницыНавигации    = ИмяСтраницыНавигации;
	
	НоваяСтрока.ИмяОбработчикаПриПереходеДалее = ИмяОбработчикаПриПереходеДалее;
	НоваяСтрока.ИмяОбработчикаПриПереходеНазад = ИмяОбработчикаПриПереходеНазад;
	НоваяСтрока.ИмяОбработчикаПриОткрытии      = ИмяОбработчикаПриОткрытии;
	
	НоваяСтрока.ДлительнаяОперация = ДлительнаяОперация;
	НоваяСтрока.ИмяОбработчикаДлительнойОперации = ИмяОбработчикаДлительнойОперации;
	
КонецПроцедуры

&НаКлиенте
// Функция возвращает кнопку формы по имени команды.
Функция ПолучитьКнопкуФормыПоИмениКоманды(ЭлементФормы, ИмяКоманды)
	
	Для Каждого Элемент Из ЭлементФормы.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			
			ЭлементФормыПоИмениКоманды = ПолучитьКнопкуФормыПоИмениКоманды(Элемент, ИмяКоманды);
			
			Если ЭлементФормыПоИмениКоманды <> Неопределено Тогда
				
				Возврат ЭлементФормыПоИмениКоманды;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("КнопкаФормы")
			И Найти(Элемент.ИмяКоманды, ИмяКоманды) > 0 Тогда
			
			Возврат Элемент;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Переопределяемая часть - Обработчики событий переходов

&НаКлиенте
// Обработчик при переходе далее на страницу ввода данных для привязки жильца к л/с.
Функция Подключаемый_Начало_ПриПереходеДалее(Отказ)
	
	УправлениеФормой(ЭтотОбъект);
	
	Если Режим = "Создание" И Объект.ЛицевойСчет.Пустая() Тогда
		НСтрока = НСтр("ru = 'Не задан лицевой счет.'");
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(НСтрока,,, "Объект.ЛицевойСчет", Отказ);
	КонецЕсли;
	
	Если ПустаяСтрока(Фамилия) И ПустаяСтрока(Имя) И ПустаяСтрока(Отчество) Тогда
		
		НСтрока = НСтр("ru = 'Не задано Ф.И.О. проживающего.'");
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(НСтрока,,, "Фамилия", Отказ);
		
	КонецЕсли;
	
	Если НЕ ДатаКорректнаНаСервере(ДатаРождения) Тогда
		
		НСтрока = НСтр("ru = 'Номер года в литерале типа ""Дата"" не должна превышать 3999!'");
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(НСтрока,,, "ДатаРождения", Отказ);
		
	КонецЕсли;
	
	КонтактнаяИнформацияОбработкаПроверкиЗаполненияНаСервере(Отказ);
	
КонецФункции

&НаКлиенте
// Обработчик при переходе далее на страницу ввода поспртных данных.
Функция Подключаемый_ВводПаспортныхДанных_ПриПреходДалее(Отказ)
	
	Если ИзменятьПаспортныеДанные Тогда
		
		Если ВидДокумента.Пустая() Тогда
			НСтрока = НСтр("ru = 'Не указан вид документа.'");
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(НСтрока,,, "ВидДокумента", Отказ);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Период) Тогда
			НСтрока = НСтр("ru = 'Не указана дата начала действия записи о паспортных данных.'");
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(НСтрока,,, "Период", Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
// Обработчик при переходе далее на последнею страницу Мастера.
Функция Подключаемый_ВыполнитьСозданиеПроживающего(Отказ)
	
	Если ВнестиИзмененияСведенийОЛС Тогда
		
		// Проверяем статус л/с, если закрыт, то отказываемся от дальнешего создания проживающего и формирования документа "Изменение лицевого счета".
		Если Не ЛицевойСчетОткрытНаДатуИзмененияСведений Тогда
			НСтрока = НСтр("ru = 'Изменение сведений по лицевому счету не может быть выполнено, так как лицевой счет не открыт на указанную дату!'");
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(НСтрока,,, "ДатаИзмененияСведенийОЛицевомСчете", Отказ);
		КонецЕсли;
		
		Если Не Проживает И Не Зарегистрирован И Не Собственник Тогда
			НСтрока = НСтр("ru = 'Не установлены сведения о проживании, регистрации или собственности жильца.'");
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(НСтрока,,, "Проживает", Отказ);
		КонецЕсли;
		
		Если (Проживает Или Зарегистрирован)
			И ДатаПроживанияРегистрации = '00010101' Тогда
			НСтрока = НСтр("ru = 'Не указана дата начала проживания или регистрации жильца.'");
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(НСтрока,,, "ДатаПроживанияРегистрации", Отказ);
		КонецЕсли;
		
		// Проверка корректности заполнения долей собственности.
		Если Собственник Тогда
			ПроверитьЗаполнениеДолейСобственностиНаПомещениеНаСервере(Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Отказ Тогда
		
		Модифицированность = Ложь;
		
		Если Режим = "Создание" Тогда
			
			// Создание проживающего на сервере.
			ВыполнитьСозданиеПроживающего(Отказ);
			
			Если Не Отказ Тогда
				
				// Для обновления результатов формирования проживающего вызовем управление формой.
				УправлениеФормой(ЭтаФорма);
				
				// Оповестим списки жильцов о создании нового жильца.
				Оповестить("Оповещение_ОбновитьСписокЖильцов");
				
			КонецЕсли;
			
		Иначе
			// завершить
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ФизЛицо",             ФизЛицо);
			СтруктураПараметров.Вставить("ФИО",                 ПолучитьНаименованиеФизлица());
			СтруктураПараметров.Вставить("Пол",                 Пол);
			СтруктураПараметров.Вставить("ДатаРождения",        ДатаРождения);
			СтруктураПараметров.Вставить("ИНН",                 ИНН);
			СтруктураПараметров.Вставить("СтраховойНомерПФР",   СтраховойНомерПФР);
			СтруктураПараметров.Вставить("ПаспортныеДанные",    ПаспортныеДанные());
			
			ДополнитьСтруктуруПараметровКонтактнойИнформацией(СтруктураПараметров);
			
			Закрыть(СтруктураПараметров);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Переопределяемая часть - Инициализация переходов помощника

&НаСервере
// Процедура заполнения сценария помощника.
Процедура СценарийСозданияПроживающего()
	
	ТаблицаПереходов.Очистить();
	
	ТаблицаПереходовНоваяСтрока(0, "Начало",                         "СтраницаНавигацииНачало",,,      "Начало_ПриПереходеДалее");
	ТаблицаПереходовНоваяСтрока(1, "ВводПаспортныхДанных",           "СтраницаНавигацииПродолжение",,, "ВводПаспортныхДанных_ПриПреходДалее");
	ТаблицаПереходовНоваяСтрока(2, "ВводДанныхДляПривязкиЖильцаКЛС", "СтраницаНавигацииПродолжение",,, "ВыполнитьСозданиеПроживающего");
	ТаблицаПереходовНоваяСтрока(3, "Окончание",                      "СтраницаНавигацииОкончание");
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДСИСТЕМЫ "КОНТАКТНАЯ ИНФОРМАЦИЯ"

#Область ПроцедурыПодсистемыКонтактнаяИнформация

// СтандартныеПодсистемы.КонтактнаяИнформация

&НаКлиенте
// Обработчик события "ПриИзменении" контактной информации.
//
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	УПЖКХ_ТиповыеМетодыКлиент.КонтактнаяИнформацияПриИзменении(ЭтотОбъект, Элемент);
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" контактной информации.
//
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УПЖКХ_ТиповыеМетодыКлиент.КонтактнаяИнформацияНачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриНажатии" контактной информации.
//
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	УПЖКХ_ТиповыеМетодыКлиент.КонтактнаяИнформацияНачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" контактной информации.
//
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	УПЖКХ_ТиповыеМетодыКлиент.КонтактнаяИнформацияОчистка(ЭтотОбъект, Элемент.Имя);
КонецПроцедуры

&НаКлиенте
// Обработчик "ВыполнитьКоманду" контактной информации.
//
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	УПЖКХ_ТиповыеМетодыКлиент.КонтактнаяИнформацияВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
КонецПроцедуры

&НаКлиенте
// Обработчик "Автоподбор" контактной информации.
//
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	УПЖКХ_ТиповыеМетодыКлиент.КонтактнаяИнформацияАвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаВыбора" контактной информации.
//
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	УПЖКХ_ТиповыеМетодыКлиент.КонтактнаяИнформацияОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
КонецПроцедуры

&НаСервере
// Обновляет контактную информацию на форме.
//
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат)
	УПЖКХ_ТиповыеМетодыСервер.КонтактнаяИнформацияОбновитьКонтактнуюИнформацию(ЭтотОбъект, ОбъектФизЛицоКИ, Результат);
КонецПроцедуры

&НаСервереБезКонтекста
// Вызывает процедуры обработки события "ПередЗаписьюНаСервере".
//
Процедура КонтактнаяИнформацияПередЗаписьюНаСервере(Форма, ВладелецКИ, Отказ = Ложь);
	УПЖКХ_ТиповыеМетодыСервер.КонтактнаяИнформацияПередЗаписьюНаСервере(Форма, ВладелецКИ, Отказ);
КонецПроцедуры

&НаСервере
// Проверяет контактную информацию на наличие ошибок.
//
Процедура КонтактнаяИнформацияОбработкаПроверкиЗаполненияНаСервере(Отказ)
	
	ОбъектФЛ = РеквизитФормыВЗначение("ОбъектФизЛицоКИ");
	УПЖКХ_ТиповыеМетодыСервер.КонтактнаяИнформацияОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, ОбъектФЛ, Отказ);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.КонтактнаяИнформация
#КонецОбласти



