
&НаКлиенте
Перем ТекущаяСтрокаРазделовОтчета;

&НаКлиенте
Перем ТекущиеДанныеОтчета;

&НаКлиенте
Перем СтраницаПечатнойФормыМодифицирована;

&НаКлиенте
Перем АдресаЛистовВоВременномХранилище;

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	СписокПечатаемыхЛистов  = Параметры.СписокПечатаемыхЛистов;
	ВидПечати               = Параметры.ВидПечати;
		
	Если СписокПечатаемыхЛистов.Количество() = 0 Тогда
			
		Сообщение = Новый СообщениеПользователю;

		Сообщение.Текст = НСтр("ru='Не выбраны листы для вывода на печать.'");

		Сообщение.Сообщить();

		Отказ = Истина;
		
	КонецЕсли;
		
	Инициализация();
	Если Параметры.Свойство("ЕстьВыходЗаГраницы") И Параметры.ЕстьВыходЗаГраницы = Истина Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Некоторые поля адреса не уместились, рекомендуется воспользоваться печатной формой PDF417'"));
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура Инициализация()
	
	ТабличныйДокумент.АвтоМасштаб        = Истина;
	ТабличныйДокумент.ЧерноБелаяПечать   = Истина;
	ТабличныйДокумент.Область().ЦветФона = Новый Цвет();
	ТабличныйДокумент.Область().Защита   = Константы.ЗапрещатьРедактированиеФормРеглОтчетности.Получить();
	ТабличныйДокумент.ЧерноБелыйПросмотр = Истина;
		
	ЗаголовокФормы = Параметры.ЗаголовокФормы;
					
	СохрКоличествоКопий = ХранилищеНастроекДанныхФорм.Загрузить(
		"Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ПечатьРегламентированныхОтчетов",
		"ПредпросмотрРегламентированнойОтчетностиКоличествоКопий");
	СохрРазобратьПоКопиям = ХранилищеНастроекДанныхФорм.Загрузить(
		"Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ПечатьРегламентированныхОтчетов",
		"ПредпросмотрРегламентированнойОтчетностиРазобратьПоКопиям");
	
	КоличествоКопий   = СохрКоличествоКопий;
	РазобратьПоКопиям = СохрРазобратьПоКопиям;
	
	Если РазобратьПоКопиям = Неопределено Тогда
		РазобратьПоКопиям = Истина;
	КонецЕсли;
		
	ДеревоЛистов = РеквизитФормыВЗначение("СписокЛистов");
	
	ДеревоЛистов.Строки.Очистить();
	
	Если СписокПечатаемыхЛистов.Количество() > 0
		И ВРег(СокрЛП(СписокПечатаемыхЛистов[0].Представление)) = ВРег(СокрЛП("СсылкаНаРегламентированныйОтчет")) Тогда
		
		УникальныеИдентификаторы = СписокПечатаемыхЛистов.ВыгрузитьЗначения();
		УникальныеИдентификаторы.Удалить(0);
		
		СсылкаНаРегламентированныйОтчет = СписокПечатаемыхЛистов.Получить(0);
		
		СписокПечатаемыхЛистов.Очистить();
		СписокПечатаемыхЛистов.Добавить(СсылкаНаРегламентированныйОтчет.Значение,
										СсылкаНаРегламентированныйОтчет.Представление);
				
		Запрос = Новый Запрос;
		
		ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	ПечатныеБланкиРегламентированныхОтчетов.УникальныйИдентификатор КАК УникальныйИдентификатор,
		               |	ПечатныеБланкиРегламентированныхОтчетов.НомерСтраницы КАК НомерСтраницы,
		               |	ПечатныеБланкиРегламентированныхОтчетов.ИмяСтраницы КАК ИмяСтраницы
		               |ИЗ
		               |	РегистрСведений.ПечатныеБланкиРегламентированныхОтчетов КАК ПечатныеБланкиРегламентированныхОтчетов
		               |ГДЕ
		               |	ПечатныеБланкиРегламентированныхОтчетов.РегламентированныйОтчет = &РегламентированныйОтчет
		               |	И ПечатныеБланкиРегламентированныхОтчетов.УникальныйИдентификатор В(&УникальныеИдентификаторы)
		               |УПОРЯДОЧИТЬ ПО
		               |	НомерСтраницы";
		
		Запрос.Текст = ТекстЗапроса;
										
		Запрос.УстановитьПараметр("РегламентированныйОтчет", СписокПечатаемыхЛистов[0].Значение);
		Запрос.УстановитьПараметр("УникальныеИдентификаторы", УникальныеИдентификаторы);
				
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				
				НовСтр = ДеревоЛистов.Строки.Добавить();
				
				НовСтр.Наименование = Выборка.ИмяСтраницы;
				НовСтр.Идентификатор = Выборка.УникальныйИдентификатор;
				НовСтр.АдресВоВременномХранилище = Выборка.УникальныйИдентификатор;
				НовСтр.КоличествоСтраниц = 1;
				НовСтр.Пометка = 1;
				
			КонецЦикла;
			
		КонецЕсли;   
		
	Иначе
		
		Для Каждого Элемент Из СписокПечатаемыхЛистов Цикл
			Элемент.Значение[0] = ПоместитьВоВременноеХранилище(ПолучитьИзВременногоХранилища(
				Элемент.Значение[0]), ЭтаФорма.УникальныйИдентификатор);
		КонецЦикла;
		
		Элемент = СписокПечатаемыхЛистов[0];
		
		ТаблДок = ПолучитьИзВременногоХранилища(Элемент.Значение[0]);
		
		ТабличныйДокумент.Вывести(ТаблДок);
		
		Для Каждого Сч Из СписокПечатаемыхЛистов Цикл
			
			НовСтр = ДеревоЛистов.Строки.Добавить();
			НовСтр.Пометка                   = 1;
			НовСтр.Наименование              = Сч.Представление;
			НовСтр.Идентификатор             = Сч.Значение[1];
			НовСтр.АдресВоВременномХранилище = Сч.Значение[0];
			
			ТекТабДок = ПолучитьИзВременногоХранилища(НовСтр.АдресВоВременномХранилище);
			КоличествоСтраниц = 0;
			НомПоследнейСтрокиСРазделителем = ТекТабДок.ВысотаТаблицы;
			
			Для НомСтроки = 1 По ТекТабДок.ВысотаТаблицы Цикл
				Если ТекТабДок.Область(НомСтроки, , НомСтроки, ).КонецСтраницы Тогда
					КоличествоСтраниц = КоличествоСтраниц + 1;
					НомПоследнейСтрокиСРазделителем = НомСтроки;
				КонецЕсли;
			КонецЦикла;
			
			Если НомПоследнейСтрокиСРазделителем < ТекТабДок.ВысотаТаблицы Тогда
				КоличествоСтраниц = КоличествоСтраниц + 1;
			КонецЕсли;
			
			НовСтр.КоличествоСтраниц = ?(КоличествоСтраниц > 0, КоличествоСтраниц, 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ДеревоЛистов, "СписокЛистов");
	
	Если ДеревоЛистов.Строки.Количество() <= 1 Тогда
		
		Элементы.СписокЛистов.Видимость = Ложь;
		Элементы.СписокЛистовУстановитьФлажки.Видимость = Ложь;
		Элементы.СписокЛистовСнятьФлажки.Видимость      = Ложь;
		
		ТабличныйДокумент.АвтоМасштаб        = Истина;
		ТабличныйДокумент.ЧерноБелаяПечать   = Истина;
		ТабличныйДокумент.Область().ЦветФона = Новый Цвет();
		ТабличныйДокумент.Область().Защита   = Константы.ЗапрещатьРедактированиеФормРеглОтчетности.Получить();
		ТабличныйДокумент.ЧерноБелыйПросмотр = Истина;
		
		Если СписокПечатаемыхЛистов.Количество() > 0
		   И ВРег(СокрЛП(СписокПечатаемыхЛистов[0].Представление)) = ВРег(СокрЛП("СсылкаНаРегламентированныйОтчет")) Тогда
			
			ВывестиВыбранныйЛистВТабличныйДокумент(ДеревоЛистов.Строки[0].Идентификатор);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПечататьСразу() Экспорт
	
	ПакетТаблДок = Новый ПакетОтображаемыхДокументов;
		
	Для Каждого Эл Из СписокПечатаемыхЛистов Цикл
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Идентификатор", Эл.Значение[1]);
		СтруктураПараметров.Вставить("АдресВоВременномХранилище", Эл.Значение[0]);
		
		ДобавитьТабличныеДокументыВПакетОтображаемыхДокументов(ПакетТаблДок, СтруктураПараметров);
		
	КонецЦикла;
	
	ПакетТаблДок.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);
			
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Заголовок = ЗаголовокФормы;
	ОтработатьИзмененияПараметровПечати();
КонецПроцедуры

&НаКлиенте
Процедура СформироватьТекстПодсказки()
	
	КоличествоТаблДок = КоличествоВыбранныхТабличныхДокументов();
	
	КоличествоЛистовВсего = 0;
	
	Для Каждого Стр1 Из СписокЛистов.ПолучитьЭлементы() Цикл
		КоличествоЛистовВсего = КоличествоЛистовВсего + Стр1.КоличествоСтраниц;
	КонецЦикла;
	
	КоличествоЛистовТребуется = КоличествоТаблДок * КоличествоКопий;

	ТекстЛистовВсего = СтрЗаменить(ЧислоПрописью(КоличествоЛистовВсего, "НП=Истина, НД=Ложь", "листа, листов, листов, м, , , , ,0"),
	                               ЧислоПрописью(КоличествоЛистовВсего, "НП=Ложь, НД=Ложь", " , , , , , , , ,0"),
	                               "");

	ТекстЛистовТребуется = СтрЗаменить(ЧислоПрописью(КоличествоЛистовТребуется, "НП=Истина, НД=Ложь", "лист, листа, листов, м, , , , ,0"),
	                                   ЧислоПрописью(КоличествоЛистовТребуется, "НП=Ложь, НД=Ложь", " , , , , , , , ,0"),
	                                   "");

	ТекстСтатистики = НСтр("ru='Всего: '") + КоличествоЛистовТребуется + " " + ТекстЛистовТребуется + НСтр("ru=' бумаги'");
	
КонецПроцедуры

&НаКлиенте
Функция КоличествоВыбранныхТабличныхДокументов()
	
	Кол = 0;
	
	Для Каждого Стр1 Из СписокЛистов.ПолучитьЭлементы() Цикл
		
		Кол = Кол + ?(Стр1.Пометка, Стр1.КоличествоСтраниц, 0);
		
	КонецЦикла;
		
	Возврат Кол;
	
КонецФункции

&НаКлиенте
Процедура ОтработатьИзмененияПараметровПечати()
	
	Если КоличествоКопий = 0 ИЛИ КоличествоКопий = Неопределено Тогда
		КоличествоКопий = 1;
	КонецЕсли;
	
	Если КоличествоКопий <> 1 Тогда
		Элементы.РазобратьПоКопиям.Доступность = Истина;
	Иначе
		Элементы.РазобратьПоКопиям.Доступность = Ложь;
	КонецЕсли;
	
	СформироватьТекстПодсказки();
	
	СохранитьЗначениеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЛистовПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущаяСтрока = ТекущаяСтрокаРазделовОтчета Тогда
		Возврат;
	КонецЕсли;
	
	СохранениеМодификацийВПечатнойФорме();
	
	ТекущаяСтрокаРазделовОтчета = Элемент.ТекущаяСтрока;
	ТекущиеДанныеОтчета = Элемент.ТекущиеДанные;
	
	Если СписокПечатаемыхЛистов.Количество() > 0
	   И ВРег(СокрЛП(СписокПечатаемыхЛистов[0].Представление)) = ВРег(СокрЛП("СсылкаНаРегламентированныйОтчет")) Тогда
	   
    	ВывестиВыбранныйЛистВТабличныйДокумент(Элемент.ТекущиеДанные.Идентификатор);
	   
	Иначе   
	
		ВывестиВыбранныйЛистВТабличныйДокумент(Элемент.ТекущиеДанные.АдресВоВременномХранилище);
		
	КонецЕсли;	
		
КонецПроцедуры

&НаКлиенте
Процедура КоличествоКопийПриИзменении(Элемент)
	
	ОтработатьИзмененияПараметровПечати();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИлиСнятьФлажки(Пометка)
	
	Для Каждого Эл Из СписокЛистов.ПолучитьЭлементы() Цикл
		
		Эл.Пометка = Пометка;
		
	КонецЦикла;
	
	СформироватьТекстПодсказки();	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	УстановитьИлиСнятьФлажки(1);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	УстановитьИлиСнятьФлажки(0);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьЗначениеНаСервере()
		
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ПечатьРегламентированныхОтчетов", "ПредпросмотрРегламентированнойОтчетностиКоличествоКопий",     КоличествоКопий);
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.ОбщиеОбъектыРеглОтчетности.Форма.ПечатьРегламентированныхОтчетов", "ПредпросмотрРегламентированнойОтчетностиРазобратьПоКопиям",   РазобратьПоКопиям);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЛистовПометкаПриИзменении(Элемент)
	
	Если Элементы.СписокЛистов.ТекущиеДанные.Пометка = 2 Тогда
		Элементы.СписокЛистов.ТекущиеДанные.Пометка = 0;
	КонецЕсли;
		
	Для Каждого Стр Из Элементы.СписокЛистов.ТекущиеДанные.ПолучитьЭлементы() Цикл
		Стр.Пометка = Элементы.СписокЛистов.ТекущиеДанные.Пометка;
	КонецЦикла;
	
	СформироватьТекстПодсказки();
	
КонецПроцедуры

&НаКлиенте
Процедура Печатать(Команда)
	
	СохранениеМодификацийВПечатнойФорме();
	
	ПакетТаблДок = Новый ПакетОтображаемыхДокументов;
	
	Если РазобратьПоКопиям Тогда
		
		Для Сч = 1 По КоличествоКопий Цикл
			
			Для Каждого Стр1 Из СписокЛистов.ПолучитьЭлементы() Цикл
				
				Если НЕ Стр1.Пометка Тогда
					Продолжить;
				КонецЕсли;
				
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Идентификатор", Стр1.Идентификатор);
				СтруктураПараметров.Вставить("АдресВоВременномХранилище", Стр1.АдресВоВременномХранилище);
				
				ДобавитьТабличныеДокументыВПакетОтображаемыхДокументов(ПакетТаблДок, СтруктураПараметров);
				
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
						
		Для Каждого Стр1 Из СписокЛистов.ПолучитьЭлементы() Цикл
				
			Если НЕ Стр1.Пометка Тогда
				Продолжить;
			КонецЕсли;
			
			Для Сч = 1 По КоличествоКопий Цикл
				
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Идентификатор", Стр1.Идентификатор);
				СтруктураПараметров.Вставить("АдресВоВременномХранилище", Стр1.АдресВоВременномХранилище);
				
				ДобавитьТабличныеДокументыВПакетОтображаемыхДокументов(ПакетТаблДок, СтруктураПараметров);
				
			КонецЦикла;
				
		КонецЦикла;
		
	КонецЕсли;
	
	Если ПакетТаблДок.Состав.Количество() > 0 Тогда
		
		ПакетТаблДок.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);
						
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВФорматеPDFДокумента(Команда)
	
	#Если ВебКлиент Тогда
		
		ВыгрузитьНаДискВВебКлиенте(ТипФайлаТабличногоДокумента.PDF);
		
	#Иначе
		
		ВыгрузитьНаДиск(ТипФайлаТабличногоДокумента.PDF);
		
	#КонецЕсли	
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВФорматеMicrosoftExcel(Команда)
	
	#Если ВебКлиент Тогда
		
		ВыгрузитьНаДискВВебКлиенте(ТипФайлаТабличногоДокумента.XLS);
		
	#Иначе
		
		ВыгрузитьНаДиск(ТипФайлаТабличногоДокумента.XLS);
		
	#КонецЕсли	
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВВидеТабличныхДокументов(Команда)
	
	#Если ВебКлиент Тогда
		
		ВыгрузитьНаДискВВебКлиенте(ТипФайлаТабличногоДокумента.MXL);
		
	#Иначе
		
		ВыгрузитьНаДиск(ТипФайлаТабличногоДокумента.MXL);
		
	#КонецЕсли	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьНаДиск(ВФормате)
	
	СохранениеМодификацийВПечатнойФорме();
	
	СоответствиеФорматаРасширению = Новый Соответствие;
	СоответствиеФорматаРасширению.Вставить(ТипФайлаТабличногоДокумента.MXL, "mxl");
	СоответствиеФорматаРасширению.Вставить(ТипФайлаТабличногоДокумента.XLS, "xls");
	СоответствиеФорматаРасширению.Вставить(ТипФайлаТабличногоДокумента.PDF, "pdf");
	
	Если КоличествоВыбранныхТабличныхДокументов() = 0 Тогда
		
		ПоказатьПредупреждение(, НСтр("ru='Выберите листы в дереве печатаемых листов.'"));
		
		Возврат;
		
	КонецЕсли;
	
	ПутьДляВыгрузки = РегламентированнаяОтчетностьКлиент.ПолучитьПутьВыгрузки();
	
	Если ПутьДляВыгрузки = Неопределено
	 ИЛИ ПустаяСтрока(ПутьДляВыгрузки)
	 ИЛИ ПутьДляВыгрузки = Ложь Тогда
	 
		Возврат;
		
	КонецЕсли;
	
	ПризнакОшибки = Ложь;
	
	Если ВФормате = ТипФайлаТабличногоДокумента.PDF Тогда
				
		ПакетТаблДок = Новый ПакетОтображаемыхДокументов;
		
		Для Каждого Лист Из СписокЛистов.ПолучитьЭлементы() Цикл
			
			Если Лист.Пометка Тогда
												
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Идентификатор", Лист.Идентификатор);
				СтруктураПараметров.Вставить("АдресВоВременномХранилище", Лист.АдресВоВременномХранилище);
				
				ДобавитьТабличныеДокументыВПакетОтображаемыхДокументов(ПакетТаблДок, СтруктураПараметров);
				
				Если СписокПечатаемыхЛистов.Количество() > 0
					И ВРег(СокрЛП(СписокПечатаемыхЛистов[0].Представление))
					= ВРег(СокрЛП("СсылкаНаРегламентированныйОтчет"))
					И ПакетТаблДок.Состав.Количество() > 0 Тогда
					
					ИмяФайла = ПутьДляВыгрузки + СформироватьИмяФайла(Лист.Наименование
						+ "." + СоответствиеФорматаРасширению[ВФормате]);
					
					Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Сохранение %1'"), ИмяФайла), , , БиблиотекаКартинок.Записать);
					
					Попытка
						
						ПакетТаблДок.ЗаписатьФайлДляПечати(ИмяФайла);
						
					Исключение
						
						ПризнакОшибки = Истина;
						
					КонецПопытки;
					
					ПакетТаблДок.Состав.Очистить();
					
				КонецЕсли;
												
			КонецЕсли;
			
		КонецЦикла;
				
		Если ПакетТаблДок.Состав.Количество() > 0 Тогда
									
			ИмяФайла = ПутьДляВыгрузки + СформироватьИмяФайла(ЗаголовокФормы
				+ "." + СоответствиеФорматаРасширению[ВФормате]);
			
			Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='Сохранение %1'"), ИмяФайла), , , БиблиотекаКартинок.Записать);
			
			Попытка
				
				ПакетТаблДок.ЗаписатьФайлДляПечати(ИмяФайла);
				
			Исключение
				
				ПризнакОшибки = Истина;
				
			КонецПопытки;
			
			ПакетТаблДок.Состав.Очистить();
			
		КонецЕсли;
						
	Иначе
	
		Для Каждого Стр1 Из СписокЛистов.ПолучитьЭлементы() Цикл
			
			Если Стр1.Пометка Тогда
				
				Попытка
					
					Если СписокПечатаемыхЛистов.Количество() > 0
						И ВРег(СокрЛП(СписокПечатаемыхЛистов[0].Представление))
						= ВРег(СокрЛП("СсылкаНаРегламентированныйОтчет")) Тогда
						
						ТаблДок =
						ТабличныйДокументПечатногоБланкаРегламентированногоОтчета(
						ПечатныйБланкРегламентированногоОтчета(Стр1.Идентификатор));
						
					Иначе
						
						ТаблДок = ПолучитьИзВременногоХранилища(Стр1.АдресВоВременномХранилище);
						
					КонецЕсли;
					
					ТаблДок.Область().ЦветФона = Новый Цвет();
					
					ИмяФайла = ПутьДляВыгрузки + СформироватьИмяФайла(Стр1.Наименование + "." + СоответствиеФорматаРасширению[ВФормате]);
					
					Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Сохранение %1'"), ИмяФайла), , , БиблиотекаКартинок.Записать);
					
					ТаблДок.Записать(ИмяФайла, ВФормате);
					
				Исключение
					
					ПризнакОшибки = Истина;
					
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
			
	Состояние();
				
	Если ПризнакОшибки Тогда
		
		ПоказатьПредупреждение(, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru='Не удалось сохранить печатный бланк в указанный каталог.%1Возможно, нет прав для записи в выбранный каталог, нет доступа к файлу, т. к. файл открыт в другой программе, недостаточно места на диске.'"), Символы.ПС), , НСтр("ru='Ошибка записи на диск.'"));
			
	КонецЕсли;
		
КонецПроцедуры

&НаСервере
Процедура ДобавитьТабличныеДокументыВПакетОтображаемыхДокументов(ПакетТаблДок, СтруктураПараметров)
			
	Если СписокПечатаемыхЛистов.Количество() > 0
	   И ВРег(СокрЛП(СписокПечатаемыхЛистов[0].Представление))
	   = ВРег(СокрЛП("СсылкаНаРегламентированныйОтчет")) Тогда
				
	   ПакетТаблДок.Состав.Добавить(
	   		ПоместитьВоВременноеХранилище(ТабличныйДокументПечатногоБланкаРегламентированногоОтчета(
	   			ПечатныйБланкРегламентированногоОтчета(СтруктураПараметров.Идентификатор)),
													   ЭтаФорма.УникальныйИдентификатор));
	   
   Иначе
	   
	   ПакетТаблДок.Состав.Добавить(СтруктураПараметров.АдресВоВременномХранилище);
	   
   КонецЕсли;
		
КонецПроцедуры

&НаСервере
Функция ТабличныйДокументПечатногоБланкаРегламентированногоОтчета(ПечатныйБланкРегламентированногоОтчета)
	
	Возврат ПечатныйБланкРегламентированногоОтчета.ПечатныйБланк.Получить();
	
КонецФункции

&НаСервере
Функция ПечатныйБланкРегламентированногоОтчета(Идентификатор)
		
	Запрос = Новый Запрос;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПечатныеБланкиРегламентированныхОтчетов.РегламентированныйОтчет КАК РегламентированныйОтчет,
	               |	ПечатныеБланкиРегламентированныхОтчетов.УникальныйИдентификатор КАК УникальныйИдентификатор,
	               |	ПечатныеБланкиРегламентированныхОтчетов.ПечатныйБланк КАК ПечатныйБланк
	               |ИЗ
	               |	РегистрСведений.ПечатныеБланкиРегламентированныхОтчетов КАК ПечатныеБланкиРегламентированныхОтчетов
	               |ГДЕ
	               |	ПечатныеБланкиРегламентированныхОтчетов.РегламентированныйОтчет = &РегламентированныйОтчет
	               |	И ПечатныеБланкиРегламентированныхОтчетов.УникальныйИдентификатор = &УникальныйИдентификатор";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("РегламентированныйОтчет", СписокПечатаемыхЛистов[0].Значение);
	Запрос.УстановитьПараметр("УникальныйИдентификатор", Идентификатор);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
						
		Выборка = РезультатЗапроса.Выбрать();
				
		Если Выборка.Следующий() Тогда
			
			СтруктураВыборки = Новый Структура;
			
			СтруктураВыборки.Вставить("РегламентированныйОтчет", Выборка.РегламентированныйОтчет);
			СтруктураВыборки.Вставить("УникальныйИдентификатор", Выборка.УникальныйИдентификатор);
			СтруктураВыборки.Вставить("ПечатныйБланк", Выборка.ПечатныйБланк);
			
			Возврат СтруктураВыборки;
				
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ВыгрузитьНаДискВВебКлиенте(ВФормате)
	
	СохранениеМодификацийВПечатнойФорме();
	
	СоответствиеФорматаРасширению = Новый Соответствие;
	СоответствиеФорматаРасширению.Вставить(ТипФайлаТабличногоДокумента.MXL, "mxl");
	СоответствиеФорматаРасширению.Вставить(ТипФайлаТабличногоДокумента.XLS, "xls");
	СоответствиеФорматаРасширению.Вставить(ТипФайлаТабличногоДокумента.PDF, "pdf");
	
	Если КоличествоВыбранныхТабличныхДокументов() = 0 Тогда
		
		ПоказатьПредупреждение(, НСтр("ru='Выберите листы в дереве печатаемых листов.'"));
		
		Возврат;
		
	КонецЕсли;
		
	АдресаЛистовВоВременномХранилище = Новый Массив();
	
	ПоместитьЛистыВоВременноеХранилищеНаСервере(ВФормате, АдресаЛистовВоВременномХранилище, СоответствиеФорматаРасширению);
		
	ПодключитьОбработчикОжидания("Подключаемый_ПолучитьФайл", 1);
					
КонецПроцедуры

&НаСервере
Функция ПоместитьЛистыВоВременноеХранилищеНаСервере(ВФормате,
													АдресаЛистовВоВременномХранилище,
													СоответствиеФорматаРасширению) Экспорт
			
	Если ВФормате = ТипФайлаТабличногоДокумента.PDF Тогда
		
		ПакетТаблДок = Новый ПакетОтображаемыхДокументов;
		
		Для Каждого Лист Из СписокЛистов.ПолучитьЭлементы() Цикл
			
			Если Лист.Пометка Тогда
				
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Идентификатор", Лист.Идентификатор);
				СтруктураПараметров.Вставить("АдресВоВременномХранилище", Лист.АдресВоВременномХранилище);
				
				ДобавитьТабличныеДокументыВПакетОтображаемыхДокументов(ПакетТаблДок, СтруктураПараметров);
				
			КонецЕсли;
			
		КонецЦикла;	
		
		Если ПакетТаблДок.Состав.Количество() > 0 Тогда
			
			ИмяФайла = ПолучитьИмяВременногоФайла(СоответствиеФорматаРасширению[ВФормате]);
			
			ПакетТаблДок.ЗаписатьФайлДляПечати(ИмяФайла);
			
			ФайлЛиста = Новый ДвоичныеДанные(ИмяФайла);
			
			АдресаЛистовВоВременномХранилище.Добавить(Новый Структура("АдресВоВременномХранилище, Наименование",
				ПоместитьВоВременноеХранилище(ФайлЛиста, ЭтаФорма.УникальныйИдентификатор), 
				СформироватьИмяФайла(ЗаголовокФормы + "." + СоответствиеФорматаРасширению[ВФормате])));
			
			УдалитьФайлы(ИмяФайла);
			
		КонецЕсли;
		
	Иначе
		
		Для Каждого Лист Из СписокЛистов.ПолучитьЭлементы() Цикл
			
			Если Лист.Пометка Тогда
				
				ИмяФайла = ПолучитьИмяВременногоФайла(СоответствиеФорматаРасширению[ВФормате]);
				
				Если СписокПечатаемыхЛистов.Количество() > 0
					И ВРег(СокрЛП(СписокПечатаемыхЛистов[0].Представление))
					= ВРег(СокрЛП("СсылкаНаРегламентированныйОтчет")) Тогда
					
					ТаблДок =
						ТабличныйДокументПечатногоБланкаРегламентированногоОтчета(
							ПечатныйБланкРегламентированногоОтчета(Лист.Идентификатор));
					
				Иначе
					
					ТаблДок = ПолучитьИзВременногоХранилища(Лист.АдресВоВременномХранилище);
					
				КонецЕсли;
				
				ТаблДок.Область().ЦветФона = Новый Цвет();
				
				ТаблДок.Записать(ИмяФайла, ВФормате);
				
				ФайлЛиста = Новый ДвоичныеДанные(ИмяФайла);
				
				АдресаЛистовВоВременномХранилище.Добавить(Новый Структура("АдресВоВременномХранилище, Наименование", 
					ПоместитьВоВременноеХранилище(ФайлЛиста, ЭтаФорма.УникальныйИдентификатор), 
					СформироватьИмяФайла(Лист.Наименование + "." + СоответствиеФорматаРасширению[ВФормате])));
				
				УдалитьФайлы(ИмяФайла);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьИмяФайла(ИсходноеИмяФайла)
	
	ИмяФайла = СтрЗаменить(ИсходноеИмяФайла, "/", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, "\", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, ":", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, "*", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, "?", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, """","_");
	ИмяФайла = СтрЗаменить(ИмяФайла, "<", "_");
	ИмяФайла = СтрЗаменить(ИмяФайла, ">", "_");
	
	ИмяФайла = СтрЗаменить(ИмяФайла, Символы.ПС, " ");
	
	Возврат СтрЗаменить(ИмяФайла, "|", "_");
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПолучитьФайл()
	
	Если АдресаЛистовВоВременномХранилище.Количество() = 0 Тогда
		
		ОтключитьОбработчикОжидания("Подключаемый_ПолучитьФайл");
		
		Возврат;
		
	КонецЕсли;
	
	ПолучитьФайл(АдресаЛистовВоВременномХранилище[0].АдресВоВременномХранилище, АдресаЛистовВоВременномХранилище[0].Наименование);
	
	АдресаЛистовВоВременномХранилище.Удалить(0);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЛистовПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЛистовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиВыбранныйЛистВТабличныйДокумент(АдресВоВременномХранилище)
	
	Если СписокПечатаемыхЛистов.Количество() > 0
	   И ВРег(СокрЛП(СписокПечатаемыхЛистов[0].Представление)) = ВРег(СокрЛП("СсылкаНаРегламентированныйОтчет")) Тогда
		
		ТаблДок =
			ТабличныйДокументПечатногоБланкаРегламентированногоОтчета(
				ПечатныйБланкРегламентированногоОтчета(АдресВоВременномХранилище));
						
	Иначе
		
		ТаблДок = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
		
	КонецЕсли;	
		
	ТабличныйДокумент.Очистить();
	ТабличныйДокумент.Вывести(ТаблДок);
	
	ЗаполнитьЗначенияСвойств(ТабличныйДокумент, ТаблДок);
	
	ТабличныйДокумент.АвтоМасштаб        = Истина;
	ТабличныйДокумент.ЧерноБелаяПечать   = Истина;
	ТабличныйДокумент.Область().ЦветФона = Новый Цвет();
	ТабличныйДокумент.Область().Защита   = Константы.ЗапрещатьРедактированиеФормРеглОтчетности.Получить();
	ТабличныйДокумент.ЧерноБелыйПросмотр = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличныйДокументПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	СтраницаПечатнойФормыМодифицирована = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранениеМодификацийВПечатнойФорме()
	
	СтраницаПечатнойФормыМодифицирована = ?(СтраницаПечатнойФормыМодифицирована <> Неопределено,
											СтраницаПечатнойФормыМодифицирована, Ложь);
	
	Если СтраницаПечатнойФормыМодифицирована Тогда
		
		Если СписокПечатаемыхЛистов.Количество() > 0
			И ВРег(СокрЛП(СписокПечатаемыхЛистов[0].Представление)) = ВРег(СокрЛП("СсылкаНаРегламентированныйОтчет")) Тогда
								
			СохранитьМодифицированныйПечатныйБланк(ТекущиеДанныеОтчета.Идентификатор);
			
		Иначе
			
			ПоместитьВоВременноеХранилище(ТабличныйДокумент, ТекущиеДанныеОтчета.АдресВоВременномХранилище);
			
		КонецЕсли;
				
		СтраницаПечатнойФормыМодифицирована = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьМодифицированныйПечатныйБланк(Идентификатор)
		
	ПечатныйБланкРегламентированногоОтчета = ПечатныйБланкРегламентированногоОтчета(Идентификатор);
		
	ЗаписьРегистраСведений = РегистрыСведений.ПечатныеБланкиРегламентированныхОтчетов.СоздатьМенеджерЗаписи();
	
	ЗаписьРегистраСведений.РегламентированныйОтчет = ПечатныйБланкРегламентированногоОтчета.РегламентированныйОтчет;
	ЗаписьРегистраСведений.УникальныйИдентификатор = ПечатныйБланкРегламентированногоОтчета.УникальныйИдентификатор;
	
	ЗаписьРегистраСведений.ПечатныйБланк = Новый ХранилищеЗначения(ТабличныйДокумент);
	
	ЗаписьРегистраСведений.Записать();									
			
КонецПроцедуры

&НаКлиенте
Процедура РазобратьПоКопиямПриИзменении(Элемент)
	
	СохранитьЗначениеНаСервере();
	
КонецПроцедуры

#КонецОбласти