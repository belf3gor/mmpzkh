&НаКлиенте
Перем ЗакрытьФормуБезусловно; // Хранит признак безусловного закрытия формы.

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Область ПроцедурыИФункцииОбщегоНазначения

&НаКлиентеНаСервереБезКонтекста
// Устанавливает видимость элементов формы.
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ТекущаяСтраница = Элементы.ПанельОсновная.ТекущаяСтраница;
	
	Если ТекущаяСтраница = Элементы.СтраницаРегистрацияСобственности Тогда
		
		Если Объект.СобственникиНовый.Количество() = 0 Тогда
			НоваяСтрока = Объект.СобственникиНовый.Добавить();
		КонецЕсли;
		
		Форма.ВидЧастнойСобственностиДляНадписи = "";
	
		Если Объект.ВидСобственностиНовый = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыСобственности.Частная") Тогда
			Форма.ВидЧастнойСобственностиДляНадписи = ОпределитьПодвидЧастнойСобственности(Объект);
		КонецЕсли;
		
		Элементы.СобственникиНовый.ТекущаяСтрока = Объект.СобственникиНовый[0].ПолучитьИдентификатор();
		
		// Если вид собственности «Частная», то появляется флажок «Несколько собственников».
		Элементы.НесколькоСобственников.Видимость = (Объект.ВидСобственностиНовый = 
														ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыСобственности.Частная"));
		
		// При установке данного флажка поля собственника, документов и основание исчезают,
		// и появляется таблица с такими же колонками, а также флажок «Определить доли собственности».
		Если Объект.НесколькоСобственников Тогда
			Элементы.ПанельСобственникиНовый.ТекущаяСтраница = Элементы.СписокСобственников;
		Иначе
			Элементы.ПанельСобственникиНовый.ТекущаяСтраница = Элементы.ОдинСобственник;
		КонецЕсли;
		
		// При установке флажка "Определить доли собственности" в таблице появляется колонка «Доля».
		Элементы.СобственникиНовыйДоляСобственности.Видимость = Объект.ОпределитьДолиСобственности;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаЖильцы Тогда
		
		Если НЕ Форма.УказатьЖильцовГотовымиЧислами Тогда
			Элементы.ГруппаКоличествоЖильцов.Видимость = Ложь;
		КонецЕсли;
		
		Если Форма.ПодробныйВариантУчетаСобственников Тогда
			Элементы.ПроживающиеДоляСобственности.Видимость               = Ложь;
			Элементы.ПроживающиеСобственник.Видимость                     = Ложь;
			Элементы.КонтрагентОтветственныйСобственник.Видимость         = Ложь;
			Элементы.ФлагСобственникКонтрагент.Видимость                  = Ложь;
			Элементы.КнопкаУстановитьОтветственногоЖильца.Доступность     = Ложь;
			Элементы.ПроживающиеСведенияОСобственности.Видимость          = Ложь;
		Иначе
			Элементы.ПроживающиеДоляСобственности.Видимость               = Истина;
			Элементы.ПроживающиеСведенияОСобственности.Видимость          = Истина;
			Элементы.ПроживающиеСобственник.Видимость                     = Истина;
			Элементы.КонтрагентОтветственныйСобственник.Видимость         = Ложь;
			Элементы.ФлагСобственникКонтрагент.Видимость                  = Истина;
			Если Объект.Проживающие.Количество() = 0 Тогда
				Элементы.КнопкаУстановитьОтветственногоЖильца.Доступность = Ложь;
			Иначе
				Элементы.КнопкаУстановитьОтветственногоЖильца.Доступность = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ПомещениеЯвляетсяЖилым(Объект.Помещение) Тогда
			Элементы.ПроживающиеЗарегистрированный.Видимость = Ложь;
			Элементы.ПроживающиеПроживающий.Видимость        = Ложь;
			Элементы.ПроживающиеДатаРегистрации.Видимость    = Ложь;
			Элементы.ПроживающиеДатаЗаселения.Видимость      = Ложь;
		Иначе
			Элементы.ПроживающиеЗарегистрированный.Видимость = Истина;
			Элементы.ПроживающиеПроживающий.Видимость        = Истина;
			Элементы.ПроживающиеДатаРегистрации.Видимость    = Истина;
			Элементы.ПроживающиеДатаЗаселения.Видимость      = Истина;
		КонецЕсли;
		
		УстановитьВидимостьДополнительныхПолейКонтрагента(Форма);
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаОкончание Тогда
		
		Элементы.мДокументУстановкиСобственников.Видимость = (Объект.СобственникиНовый.Количество() > 0);
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаВыборСобственников Тогда
		
		// СОБСТВЕННИКИ
		
		Элементы.СобственникиПомещения.Видимость = Ложь;
		Элементы.КоманднаяПанельПеремещенияСобственников.Видимость = Ложь;
		
		Элементы.ПолеОтветственныйВладелец.ТолькоПросмотр = Истина;
		Элементы.ПолеОтветственныйВладелец.КнопкаВыбора = Ложь;
		
		// Для государственного, ведомственного и муниципального вида собственности даем возможность
		// указать ответственного собственника л/с, отличного от собственника помещения.
		// Один собственник.
		Если НЕ Форма.ДанныеОСобственности = Неопределено 
		   И Форма.ДанныеОСобственности.Количество() = 1 Тогда
			
			Элементы.ПанельСобственники.ТекущаяСтраница = Элементы.СтраницаОдинСобственник;
			Элементы.СобственникиЛС.ТекущаяСтрока = Объект.Собственники[0].ПолучитьИдентификатор();
			
			Если Не Форма.ВидСобственности = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыСобственности.Частная") Тогда
				Элементы.ПолеОтветственныйВладелец.ТолькоПросмотр = Ложь;
				Элементы.ПолеОтветственныйВладелец.КнопкаВыбора = Истина;
			КонецЕсли;
			
		// Собственников несколько и собственность совместная.
		ИначеЕсли Форма.ВидЧастнойСобственности = ПредопределенноеЗначение(
													"Перечисление.УПЖКХ_ВидыЧастнойСобственности.Совместная") Тогда
			Элементы.ПанельСобственники.ТекущаяСтраница = Элементы.СтраницаНесколькоСобственников;
			
		// Собственность долевая.
		ИначеЕсли Форма.ВидЧастнойСобственности = ПредопределенноеЗначение(
													"Перечисление.УПЖКХ_ВидыЧастнойСобственности.Долевая") Тогда
			
			Элементы.ПанельСобственники.ТекущаяСтраница = Элементы.СтраницаНесколькоСобственников;
			
			Элементы.СобственникиПомещения.Видимость = Истина;
			Элементы.КоманднаяПанельПеремещенияСобственников.Видимость = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаЛицевойСчет Тогда
		
		// ЛИЦЕВОЙ СЧЕТ
		
		Элементы.ГруппаКомнат.Видимость = Форма.КоммунальнаяКвартира;
		
		Если Форма.КоммунальнаяКвартира Тогда
			Элементы.КнопкаРассчитатьДолюЛС.Заголовок = "Рассчитать";
		Иначе
			Элементы.КнопкаРассчитатьДолюЛС.Заголовок = "Установить";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
// Процедура устанавливает видимость дополнительных полей контрагента в зависимости от
// значения флага собственник контрагент.
Процедура УстановитьВидимостьДополнительныхПолейКонтрагента(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ОбычныйШрифт = Новый Шрифт(, , Ложь);
	ЖирныйШрифт  = Новый Шрифт(, , Истина);
	
	Если НЕ Форма.ПодробныйВариантУчетаСобственников Тогда
		
		Если Форма.ФлагСобственникКонтрагент Тогда
			
			ПредыдущееЗначениеВладельца = Форма.мОтветственныйВладелец;
			Элементы.КонтрагентОтветственныйСобственник.Видимость     = Истина;
			Элементы.КнопкаУстановитьОтветственногоЖильца.Доступность = Ложь;
			Форма.мОтветственныйВладелец = Объект.КонтрагентОтветственныйСобственник;
			
			Элементы.КонтрагентОтветственныйСобственник.ШрифтЗаголовка = ЖирныйШрифт;
			Элементы.КонтрагентОтветственныйСобственник.Шрифт          = ЖирныйШрифт;
			Элементы.КнопкаУстановитьОтветственногоЖильца.Пометка      = Ложь;
			Элементы.ПроживающиеСтепеньРодства.Видимость               = Ложь;
			
		Иначе
			
			Элементы.КонтрагентОтветственныйСобственник.Видимость = Ложь;
			Если Не ПустаяСтрока(ПредыдущееЗначениеВладельца)
				ИЛИ (Не Элементы.Проживающие.ТекущиеДанные = Неопределено И Элементы.Проживающие.ТекущиеДанные.Собственник) Тогда
				Элементы.КнопкаУстановитьОтветственногоЖильца.Доступность = Истина;
			КонецЕсли;
			Если ЗначениеЗаполнено(ПредыдущееЗначениеВладельца)
			   И (НЕ ТипЗнч(ПредыдущееЗначениеВладельца) = Тип("СправочникСсылка.Контрагенты")
			   И НЕ ТипЗнч(ПредыдущееЗначениеВладельца) = Тип("СправочникОбъект.Контрагенты"))Тогда
				мОтветственныйВладелец = ПредыдущееЗначениеВладельца;
			КонецЕсли;
			Элементы.КонтрагентОтветственныйСобственник.ШрифтЗаголовка = ОбычныйШрифт;
			Элементы.КонтрагентОтветственныйСобственник.Шрифт          = ОбычныйШрифт;
			Элементы.ПроживающиеСтепеньРодства.Видимость          = Истина;
			ПроверитьПометкуКнопкиУстановкиОтветственного(Форма);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
// Процедура изменяет доступность кнопки установки ответственного собственника.
//
Процедура ПроверитьПометкуКнопкиУстановкиОтветственного(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если НЕ Объект.ПодробныйВариантУчетаСобственников Тогда
		
		Если Элементы.Проживающие.ТекущиеДанные = Неопределено Тогда
			
			Элементы.КнопкаУстановитьОтветственногоЖильца.Доступность = Ложь;
			Элементы.КнопкаУстановитьОтветственногоЖильца.Пометка     = Ложь;
			
		Иначе
			
			Элементы.КнопкаУстановитьОтветственногоЖильца.Доступность = Истина;
			Элементы.КнопкаУстановитьОтветственногоЖильца.Пометка     = (Элементы.Проживающие.ТекущиеДанные.ФИО = Форма.мОтветственныйВладелец);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
// Определяет подвид частной собственности.
//
Функция ОпределитьПодвидЧастнойСобственности(Объект, ПоДанным = Ложь)
	
	Если НЕ ПоДанным Тогда
		
		Если Объект.ВидСобственностиНовый = ПредопределенноеЗначение(
												"Перечисление.УПЖКХ_ВидыСобственности.Частная") Тогда
			Если НЕ Объект.НесколькоСобственников Тогда
				// один собственник
				Объект.ПодвидЧастнойСобственности = ПредопределенноеЗначение(
														"Перечисление.УПЖКХ_ВидыЧастнойСобственности.Индивидуальная");
			ИначеЕсли НЕ Объект.ОпределитьДолиСобственности Тогда
				// несколько собственников без учета долей
				Объект.ПодвидЧастнойСобственности = ПредопределенноеЗначение(
														"Перечисление.УПЖКХ_ВидыЧастнойСобственности.Совместная");
			Иначе
				// несколько собственников и указаны доли
				Объект.ПодвидЧастнойСобственности = ПредопределенноеЗначение(
														"Перечисление.УПЖКХ_ВидыЧастнойСобственности.Долевая");
			КонецЕсли;
		Иначе
			Объект.ПодвидЧастнойСобственности = ПредопределенноеЗначение(
													"Перечисление.УПЖКХ_ВидыЧастнойСобственности.ПустаяСсылка");
		КонецЕсли;
		
	Иначе
		
		ВсегоСобственников = Объект.Проживающие.Итог("Собственник");
		ВсегоДолей = Объект.Проживающие.Итог("ДоляСобственникаЗнаменатель");
		Если ВсегоСобственников = 0 ИЛИ ВсегоСобственников = 1 Тогда
			Объект.ПодвидЧастнойСобственности = ПредопределенноеЗначение(
													"Перечисление.УПЖКХ_ВидыЧастнойСобственности.Индивидуальная");
		ИначеЕсли ВсегоСобственников > 1 И НЕ ВсегоДолей = 0 Тогда
			Объект.ПодвидЧастнойСобственности = ПредопределенноеЗначение(
													"Перечисление.УПЖКХ_ВидыЧастнойСобственности.Долевая");
		ИначеЕсли ВсегоСобственников > 1 Тогда
			Объект.ПодвидЧастнойСобственности = ПредопределенноеЗначение(
													"Перечисление.УПЖКХ_ВидыЧастнойСобственности.Совместная");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Строка(Объект.ПодвидЧастнойСобственности);

КонецФункции

&НаСервереБезКонтекста
// Проверяет уникальность идентификатора.
Функция ПроверитьУникальностьИдентификатораНаСервере(ИдентификаторЛС)
	
	Возврат Справочники.КВП_ЛицевыеСчета.ПроверитьУникальностьИдентификатора(ИдентификаторЛС);
	
КонецФункции  //ПроверитьУникальностьИдентификатораНаСервере()

&НаКлиенте
// Проверяет, корректно ли заполнены данные.
//
// Возвращаемое значение:
//  Булево – корректно ли заполнены данные.
//
Функция ДанныеЗаполненыКорректно(Отказ)

	ТекущаяСтраница = Элементы.ПанельОсновная.ТекущаяСтраница;
	
	Если ТекущаяСтраница = Элементы.СтраницаДанныеОПомещении Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
			НСтрока = НСтр("ru = 'Не заполнена дата открытия л/с!'");
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(НСтрока, Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			НСтрока = НСтр("ru = 'Не указана организация!'");
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(НСтрока, Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Помещение) Тогда
			НСтрока = НСтр("ru = 'Не выбрано помещение!'");
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(НСтрока, Отказ);
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаРегистрацияСобственности Тогда
		
		Если Объект.ВидСобственностиНовый.Пустая() Тогда
			НСтрока = НСтр("ru = 'Не заполнен вид собственности!'");
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(НСтрока, Отказ);
		КонецЕсли;
		
		Если Не Объект.НесколькоСобственников Тогда
			
			ДанныеСтроки = Элементы.СобственникиНовый.ТекущиеДанные;
			
			Если Не ДанныеСтроки = Неопределено Тогда
				
				Если Не ЗначениеЗаполнено(ДанныеСтроки.Собственник) Тогда
					НСтрока = НСтр("ru = 'Не указан собственник!'");
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(НСтрока, Отказ);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ОснованиеПолученияВСобственность) Тогда
					НСтрока = НСтр("ru = 'Не заполнено основание получения в собственность!'");
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(НСтрока, Отказ);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ВидДокумента) Тогда
					НСтрока = НСтр("ru = 'Не заполнен вид документа!'");
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(НСтрока, Отказ);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтроки.НомерДокумента) Тогда
					НСтрока = НСтр("ru = 'Не заполнен номер документа!'");
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(НСтрока, Отказ);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ДатаДокумента) Тогда
					НСтрока = НСтр("ru = 'Не заполнена дата документа!'");
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(НСтрока, Отказ);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	
		Если Объект.НесколькоСобственников Тогда
			
			Для Каждого ТекСтрока Из Объект.СобственникиНовый Цикл
				
				Если НЕ ЗначениеЗаполнено(ТекСтрока.Собственник) Тогда
					ТекстОшибки = НСтр("ru = 'Не указан собственник!'");
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
						"В строке номер """ + ТекСтрока.НомерСтроки + """: " + ТекстОшибки, Отказ);
				КонецЕсли;
					
				Если НЕ ЗначениеЗаполнено(ТекСтрока.ОснованиеПолученияВСобственность) Тогда
					ТекстОшибки = НСтр("ru = 'Не заполнено основание получения в собственность!'");
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
						"В строке номер """ + ТекСтрока.НомерСтроки + """: " + ТекстОшибки, Отказ);
				КонецЕсли;
					
				Если НЕ ЗначениеЗаполнено(ТекСтрока.ВидДокумента) Тогда
					ТекстОшибки = НСтр("ru = 'Не заполнен вид документа!'");
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
						"В строке номер """ + ТекСтрока.НомерСтроки + """: " + ТекстОшибки, Отказ);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ТекСтрока.НомерДокумента) Тогда
					ТекстОшибки = НСтр("ru = 'Не заполнен номер документа!'");
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
						"В строке номер """ + ТекСтрока.НомерСтроки + """: " + ТекстОшибки, Отказ);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ТекСтрока.ДатаДокумента) Тогда
					ТекстОшибки = НСтр("ru = 'Не заполнена дата документа!'");
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
						"В строке номер """ + ТекСтрока.НомерСтроки + """: " + ТекстОшибки, Отказ);
				КонецЕсли;
				
				Если Объект.ОпределитьДолиСобственности Тогда
					мДоля = ?(ТекСтрока.ДоляСобственникаЗнаменатель = 0, 0,
								ТекСтрока.ДоляСобственникаЧислитель / ТекСтрока.ДоляСобственникаЗнаменатель);
					Если МДоля = 0 Тогда
						ТекстОшибки = НСтр("ru = 'Доля собственности не может быть равна 0'");;
						УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
							"В строке номер """ + ТекСтрока.НомерСтроки + """: " + ТекстОшибки, Отказ);
					КонецЕсли;
				КонецЕсли;
			
			КонецЦикла;
			
			Если Объект.ОпределитьДолиСобственности Тогда
				// Проверка на сумму долей = 1.
				// Приводим к общему знаменателю.
				ОбщийЗнаменатель = 1;
				Для Каждого Стр Из Объект.СобственникиНовый Цикл
					ОбщийЗнаменатель = ОбщийЗнаменатель * Стр.ДоляСобственникаЗнаменатель;
				КонецЦикла;
				
				СуммаЧислитель = 0;
				Для Каждого Стр Из Объект.СобственникиНовый Цикл
					СуммаЧислитель = СуммаЧислитель + ?(Стр.ДоляСобственникаЗнаменатель = 0, 0,
														Стр.ДоляСобственникаЧислитель*ОбщийЗнаменатель/Стр.ДоляСобственникаЗнаменатель);
				КонецЦикла;
				
				Если НЕ СуммаЧислитель = ОбщийЗнаменатель Тогда
					ТекстОшибки = НСтр("ru = 'Сумма долей собственников не равна 1!'");;
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки, Отказ);
				КонецЕсли;
				
			КонецЕсли;
			
			Если Объект.СобственникиНовый.Количество() < 2 Тогда
				
				// Не даём продолжить работу по открытию л/с, когда в совместной собственности указано
				// менее двух собственников.
				
				ТекстОшибки = НСтр("ru = 'Указано, что собственников должно быть несколько, но в таблице выбран только один собственник.'");;
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки, Отказ);
				
			КонецЕсли;
		
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаВыборСобственников Тогда
		
		Если Объект.Собственники.Количество() = 0 Тогда
			ТекстОшибки = НСтр("ru = 'Укажите собственников лицевого счета!'");;
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки, Отказ);
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаЖильцы Тогда
		
		Если НЕ ПодробныйВариантУчетаСобственников Тогда
			
			Если (НЕ ФлагСобственникКонтрагент И ТипЗнч(мОтветственныйВладелец) = Тип("СправочникСсылка.Контрагенты"))
			 ИЛИ НЕ ЗначениеЗаполнено(мОтветственныйВладелец) Тогда
				
				ТекстОшибки = НСтр("ru = '" + "Не указан " + НРег(УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПредставлениеОтветственногоСобственника()) + " лицевого счета!" + "'");
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки, Отказ);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Для Каждого СтрокаТЧ Из Объект.Проживающие Цикл
			
			Если СтрокаТЧ.ВладелецЕдинственногоЖилья Тогда
				СтруктураПараметров = УПЖКХ_ОбщегоНазначенияСервер.ПроверитьСобственникаЖилья(СтрокаТЧ.ФизЛицо, Объект.Дата);
				ТекСообщение   = СтруктураПараметров.СтрокаОписания;
				Если ЗначениеЗаполнено(ТекСообщение) Тогда
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекСообщение, Отказ);
				КонецЕсли;
			ИначеЕсли СтрокаТЧ.Собственник Тогда
				СтруктураПараметров = УПЖКХ_ОбщегоНазначенияСервер.ПроверитьСобственникаЖилья(СтрокаТЧ.ФизЛицо, Объект.Дата, Ложь);
				ТекСообщение   = СтруктураПараметров.СтрокаОписания;
				Если ЗначениеЗаполнено(ТекСообщение) Тогда
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекСообщение, Отказ);
				КонецЕсли;
			КонецЕсли;
		
		КонецЦикла;
		
		Если Объект.Проживающие.НайтиСтроки(Новый Структура("Собственник", Истина)).Количество() > 1
		  И Объект.Проживающие.Итог("ДоляСобственникаЗнаменатель") <> 0 Тогда
			
			Для Каждого ТекСтрока Из Объект.Проживающие Цикл
				Если ТекСтрока.Собственник Тогда
					мДоля = ?(ТекСтрока.ДоляСобственникаЗнаменатель = 0, 0,
								ТекСтрока.ДоляСобственникаЧислитель / ТекСтрока.ДоляСобственникаЗнаменатель);
					Если МДоля = 0 Тогда
						ТекстОшибки = "Доля собственности не может быть равна 0.";
						УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В строке номер """ + ТекСтрока.НомерСтроки
						 + """: " + ТекстОшибки + "!", Отказ);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			// Проверка на сумму долей = 1.
			// Приводим к общему знаменателю.
			ОбщийЗнаменатель = 1;
			Для Каждого Стр Из Объект.Проживающие Цикл
				Если Стр.Собственник Тогда
					ОбщийЗнаменатель = ОбщийЗнаменатель * Стр.ДоляСобственникаЗнаменатель;
				КонецЕсли;
			КонецЦикла;
			
			СуммаЧислитель = 0;
			Для Каждого Стр Из Объект.Проживающие Цикл
				Если Стр.Собственник Тогда
					СуммаЧислитель = СуммаЧислитель + ?(Стр.ДоляСобственникаЗнаменатель = 0, 0,
														Стр.ДоляСобственникаЧислитель*ОбщийЗнаменатель/Стр.ДоляСобственникаЗнаменатель);
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ СуммаЧислитель = ОбщийЗнаменатель Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Сумма долей собственников не равна 1!", Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаЛицевойСчет Тогда
		
		Если ПустаяСтрока(Объект.ИмяЛицевогоСчета) Тогда
			ТекстОшибки = НСтр("ru = 'Не указано имя лицевого счета!'");;
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки, Отказ);
		КонецЕсли;
		
		Если Объект.КонтрагентДляВзаиморасчетов.Пустая() И НЕ СоздатьКонтрагентаАвтоматически Тогда
			ТекстОшибки = НСтр("ru = 'Не выбран контрагент!'");;
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки, Отказ);
		КонецЕсли;
		
		Если Объект.ДоговорДляВзаиморасчетов.Пустая() И НЕ СоздатьКонтрагентаАвтоматически Тогда
			ТекстОшибки = НСтр("ru = 'Не выбран договор!'");;
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки, Отказ);
		КонецЕсли;
		
		Если ПустаяСтрока(ДоляСобственностиЛС) Тогда
			ТекстОшибки = НСтр("ru = 'Установите долю собственности лицевого счета!'");;
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки, Отказ);
		КонецЕсли;
		
		Если Объект.ДоляЛСЗнаменатель = 0 Тогда
			ТекстОшибки = НСтр("ru = 'Знаменатель доли собственности л/с не может быть равен 0!'");;
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки, Отказ);
		КонецЕсли;
		
		Если Объект.ДоляЛСЧислитель = 0 И НЕ Объект.ДоляЛСЗнаменатель = 0 Тогда
			ТекстОшибки = НСтр("ru = 'Числитель доли собственности л/с не может быть равен 0!'");;
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки, Отказ);
		КонецЕсли;
		
		Если НЕ ПроверитьКорректностьУстановленныхДолейЛицевыхСчетовНаПомещении() 
			и не ЭтотОбъект.УстановитьДоли_1_1 Тогда   //++Позолотина
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Суммарная доля лицевых счетов, открытых на данное помещение, превышает 1. Необходимо скорректировать долю собственности текущего или прочих лицевых счетов, открытых на данное помещение.", Отказ);
			Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы.СтраницаЛицевойСчет;
			Элементы.НадписьПредупреждение.Видимость = Истина;
		КонецЕсли;
		
		// Проверка наличия выбранных комнат при переходе к следующему шагу работы мастера.
		Если КоммунальнаяКвартира И Объект.Комнаты.Количество() = 0 Тогда
			ТекстОшибки = НСтр("ru = 'Не выбраны комнаты, привязанные к лицевому счету!'");;
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки, Отказ);
		КонецЕсли;
		
		РезультатТекст = ПолучитьТекстКомнатЛСНаСервере();
		Если НЕ РезультатТекст = "" Тогда
			ТекстОшибки = НСтр("ru = '" + РезультатТекст + "'");
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки, Отказ);
		КонецЕсли;
		
		Если НЕ ПроверитьУникальностьИдентификатораНаСервере(Объект.ИдентификаторЛС) Тогда
			ТекстОшибки = НСтр("ru = 'Идентификатор лицевого счета не уникален!'");
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки, Отказ);
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаУслуги Тогда
		
		Если Объект.ТаблицаУслуг.Количество() > 0 Тогда
			
			Для Каждого ТекСтрока Из Объект.ТаблицаУслуг Цикл
				
				Если НЕ ЗначениеЗаполнено(ТекСтрока.Услуга) Тогда
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
						"В строке №" + ТекСтрока.НомерСтроки + " не заполнена услуга!", Отказ);
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ТекСтрока.Организация) Тогда
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
						"В строке №" + ТекСтрока.НомерСтроки + " не заполнена организация!", Отказ);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // ДанныеЗаполненыКорректно()

&НаСервере
// Заполняет данные о собственниках.
Процедура ЗаполнитьДанные()
	
	// Настраиваем видимость и заполняем данные.
	ВидСобственности        = ДанныеОСобственности[0].ВидСобственности;
	ВидЧастнойСобственности = ДанныеОСобственности[0].ПодвидЧастнойСобственности;
	
	ОткрыватьОдинЛС = Истина;
	
	// Если собственник один, то его подставляем как владельца.
	Если ДанныеОСобственности.Количество() = 1 Тогда
		
		ОтветственныйВладелец             = Объект.Собственники.Добавить();
		ОтветственныйВладелец.Собственник = ДанныеОСобственности[0].Собственник;
		
		Элементы.СобственникиЛС.ТекущаяСтрока = Объект.Собственники[0].ПолучитьИдентификатор();

	// Если собственников несколько и собственность совместная.
	ИначеЕсли ВидЧастнойСобственности = Перечисления.УПЖКХ_ВидыЧастнойСобственности.Совместная Тогда
		
		Для Каждого ТекСтр Из ДанныеОСобственности Цикл
			СтрТаб = Объект.Собственники.Добавить();
			СтрТаб.Собственник                 = ТекСтр.Собственник;
		КонецЦикла;
		
		Элементы.СобственникиЛС.ТекущаяСтрока = Объект.Собственники[0].ПолучитьИдентификатор();
		
	// Если собственность долевая, то выбираем открывать один или несколько лицевых счетов.
	ИначеЕсли ВидЧастнойСобственности = Перечисления.УПЖКХ_ВидыЧастнойСобственности.Долевая Тогда
		
		Для Каждого ТекСтр Из ДанныеОСобственности Цикл
			СтрТаб = СобственникиПомещения.Добавить();
			СтрТаб.Собственник                 = ТекСтр.Собственник;
			СтрТаб.ДоляСобственникаЧислитель   = ТекСтр.ДоляСобственникаЧислитель;
			СтрТаб.ДоляСобственникаЗнаменатель = ТекСтр.ДоляСобственникаЗнаменатель;
		КонецЦикла;
		
		Элементы.СобственникиПомещения.ТекущаяСтрока = СобственникиПомещения[0].ПолучитьИдентификатор();
		
	КонецЕсли;
	
	// Проверяем если ли открытые на это помещение лицевые счета.
	СпПомещений = Новый СписокЗначений;
	СпПомещений.Добавить(Объект.Помещение);
	СписокОткрытыхЛицевыхСчетов = КВП_ПолучитьСписокЛицевыхСчетовПоПомещениям(СпПомещений, Объект.Дата);
	ЕстьОткрытыеЛС = (СписокОткрытыхЛицевыхСчетов.Количество() > 0);
	
	// Если уже есть л/с, открытые на это помещение, значит будет открыто на помещение несколько л/с.
	Если ЕстьОткрытыеЛС Тогда
		ОткрыватьОдинЛС = Ложь;
	КонецЕсли;
	
	ИзменилисьДанныеОСобственниках = Истина;
	
КонецПроцедуры

&НаСервере
// Процедура обновляет данные о собственности.
Процедура ОбновитьДанныеОСобственности()
	
	// Получаем данные о собственности.
	Если Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаРегистрацияСобственности Тогда
		Для Каждого Строка Из Объект.СобственникиНовый Цикл
			Строка.ВидСобственности = Объект.ВидСобственностиНовый;
			Строка.ПодвидЧастнойСобственности = Объект.ПодвидЧастнойСобственности;
		КонецЦикла;
		мДанныеОСобственности = Объект.СобственникиНовый.Выгрузить();
	Иначе
		мДанныеОСобственности = ПолучитьДанныеОСобственностиПомещения(Объект.Помещение, КонецДня(Объект.Дата));
	КонецЕсли;
	
	Если мДанныеОСобственности.Количество() > 0 Тогда
		ДанныеОСобственности.Загрузить(мДанныеОСобственности);
		
		// Очищаем данные.
		СобственникиПомещения.Очистить();
		Объект.Собственники.Очистить();
		Объект.Комнаты.Очистить();
		Объект.КонтрагентОтветственныйСобственник       = Справочники.Контрагенты.ПустаяСсылка();
		Объект.ДоговорДляВзаиморасчетов                 = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		
		// Заполним данные о собственниках.
		ЗаполнитьДанные();
		
		УправлениеФормой(ЭтотОбъект);
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Выделяет из исходной строки только цифры.
Функция ВыбратьТолькоЦифры(Знач ИсхСтрока)

	СписокЦифр = Новый СписокЗначений();
	СписокЦифр.Добавить("0");
	СписокЦифр.Добавить("1");
	СписокЦифр.Добавить("2");
	СписокЦифр.Добавить("3");
	СписокЦифр.Добавить("4");
	СписокЦифр.Добавить("5");
	СписокЦифр.Добавить("6");
	СписокЦифр.Добавить("7");
	СписокЦифр.Добавить("8");
	СписокЦифр.Добавить("9");

	ИсхСтрока     = СокрЛП(ИсхСтрока);
	ВсегоСимволов = СтрДлина(ИсхСтрока);
	НоваяСтрока   = "";
	Для Сч = 1 По ВсегоСимволов Цикл
		Если СписокЦифр.НайтиПоЗначению(Сред(ИсхСтрока, Сч, 1)) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = НоваяСтрока + Сред(ИсхСтрока, Сч, 1);
	КонецЦикла;

	Если ПустаяСтрока(НоваяСтрока) Тогда
		НоваяСтрока = "0";
	КонецЕсли;

	Возврат НоваяСтрока;

КонецФункции // ВыбратьТолькоЦифры()

&НаСервере
// Устанавливает максимальный номер лицевого счета.
Процедура УстановкаНомераЛицевогоСчета()
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ЛицевыеСчета.Наименование
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	(НЕ КВП_ЛицевыеСчета.ЭтоГруппа)";

	МаксНомер      = 0;
	УстановитьПривилегированныйРежим(Истина);
	Выборка        = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	ВсегоВариантов = Выборка.Количество();
	ТекВариант     = 1;
	Пока Выборка.Следующий() Цикл
		Номер = ВыбратьТолькоЦифры(Выборка.Наименование);
		Если МаксНомер < Число(Номер) Тогда
			МаксНомер = Число(Номер);
		КонецЕсли;
		ТекВариант = ТекВариант + 1;
	КонецЦикла;

	МаксНомер = МаксНомер + 1;
	Объект.ИмяЛицевогоСчета = "л/с №" + Формат(МаксНомер, "ЧДЦ=0; ЧГ=0");
	Объект.ИдентификаторЛС = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьИдентификаторЛС( , Объект.ИмяЛицевогоСчета,, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
// Составляет массив родителей элемента.
Функция СоставитьСписокРодителейЭлемента(Знач СправочникСсылка, МассивРодителей)

	Если Не СправочникСсылка.Родитель.Пустая() Тогда
		МассивРодителей.Добавить(СправочникСсылка.Родитель);
		СоставитьСписокРодителейЭлемента(СправочникСсылка.Родитель, МассивРодителей);
	КонецЕсли;

КонецФункции // СоставитьСписокРодителейЭлемента()

&НаСервере
// Автоматически определяет группу для лицевого счета.
Процедура НайтиГруппуЛС(ЗапрашиватьПодтверждение = Истина)
	
	// Если передана группа для создаваемого элемента л/с, то используем её.
	Если Не Объект.ГруппаЛС.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Здание.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокГруппЗдания = Новый Массив();
	СоставитьСписокРодителейЭлемента(Объект.Здание, СписокГруппЗдания);
	
	СправЛС = Справочники.КВП_ЛицевыеСчета;
	ТекРодительЛС = СправЛС.ПустаяСсылка();
	МаксИндекс = СписокГруппЗдания.ВГраница();
	Для ТекИндекс = 0 По МаксИндекс Цикл
		ТекГруппа = СписокГруппЗдания.Получить(МаксИндекс - ТекИндекс);
		ТекРодительЛС = СправЛС.НайтиПоНаименованию(ТекГруппа.Наименование, Истина, ТекРодительЛС);
		Если ТекРодительЛС.Пустая() Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	НомерДома = Объект.Здание.НомерДома;
	
	СписокНаименований = Новый СписокЗначений();
	СписокНаименований.Добавить("дом №"  + НомерДома);
	СписокНаименований.Добавить("дом № " + НомерДома);
	СписокНаименований.Добавить("дом"    + НомерДома);
	СписокНаименований.Добавить("дом "   + НомерДома);
	СписокНаименований.Добавить("д. №"   + НомерДома);
	СписокНаименований.Добавить("д. № "  + НомерДома);
	СписокНаименований.Добавить("д."     + НомерДома);
	СписокНаименований.Добавить("д. "    + НомерДома);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчета.Ссылка,
	|	КВП_ЛицевыеСчета.Наименование
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	КВП_ЛицевыеСчета.ЭтоГруппа
	|	И КВП_ЛицевыеСчета.Родитель = &ТекРодительЛС";
	
	Запрос.УстановитьПараметр("ТекРодительЛС", ТекРодительЛС);
	
	ВыборкаГрупп = Запрос.Выполнить().Выбрать();
	
	ГруппаНайдена = Ложь;
	Пока ВыборкаГрупп.Следующий() И Не ГруппаНайдена Цикл
		
		ИсхСтрока = НРег(ВыборкаГрупп.Наименование);
		
		Для Каждого ТекНаим Из СписокНаименований Цикл
			Если Прав(ИсхСтрока, СтрДлина(ТекНаим.Значение)) = ТекНаим.Значение Тогда
				ТекРодительЛС = ВыборкаГрупп.Ссылка;
				ГруппаНайдена = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Объект.ГруппаЛС = ТекРодительЛС;
	
КонецПроцедуры // НайтиГруппуЛС()

&НаСервере
// Рассчитывает долю собственности в зависимости от долей собственников л/с.
Процедура РассчитатьДолюСобственности()
	
	Если ПодробныйВариантУчетаСобственников Тогда
		
		// Если долевая собственность, то доля = сумма долей собственников л/с.
		Если ДанныеОСобственности.Количество() > 1
		   И ДанныеОСобственности.Итог("ДоляСобственникаЧислитель") > 0 Тогда
			
			Объект.ДоляЛСЧислитель   = 0;
			Объект.ДоляЛСЗнаменатель = 1;
			Для Каждого Стр Из Объект.Собственники Цикл
				СложитьДроби(Объект.ДоляЛСЧислитель, Объект.ДоляЛСЗнаменатель,
				Стр.ДоляСобственникаЧислитель, Стр.ДоляСобственникаЗнаменатель,
				Объект.ДоляЛСЧислитель, Объект.ДоляЛСЗнаменатель); // результат
			КонецЦикла;
			//++Позолотина
			Если ЭтотОбъект.УстановитьДоли_1_1 тогда
				Объект.ДоляЛСЧислитель   = 1;
				Объект.ДоляЛСЗнаменатель = 1;	
			КонецЕсли;
			//--
		Иначе
			Объект.ДоляЛСЧислитель     = 1;
			Объект.ДоляЛСЗнаменатель   = 1;
		КонецЕсли;
		
		УпроститьДробь(Объект.ДоляЛСЧислитель, Объект.ДоляЛСЗнаменатель);
		ДоляСобственностиЛС = УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеДроби(Объект.ДоляЛСЧислитель,
																							Объект.ДоляЛСЗнаменатель);
		
	Иначе
		
		// Проверяем если ли открытые на это помещение лицевые счета.
		СпПомещений = Новый СписокЗначений;
		СпПомещений.Добавить(Объект.Помещение);
		СписокОткрытыхЛицевыхСчетов = КВП_ПолучитьСписокЛицевыхСчетовПоПомещениям(СпПомещений, Объект.Дата);
		
		Если Объект.Проживающие.Количество() > 1
		   И Объект.Проживающие.Итог("ДоляСобственникаЧислитель") > 0 Тогда
			
			Объект.ДоляЛСЧислитель   = 0;
			Объект.ДоляЛСЗнаменатель = 1;
			Для Каждого Стр Из Объект.Проживающие Цикл
				Если Стр.Собственник Тогда
					СложитьДроби(Объект.ДоляЛСЧислитель, Объект.ДоляЛСЗнаменатель,
								 Стр.ДоляСобственникаЧислитель, Стр.ДоляСобственникаЗнаменатель,
								 Объект.ДоляЛСЧислитель, Объект.ДоляЛСЗнаменатель); // результат
				КонецЕсли;
			КонецЦикла;
			//++Позолотина
			Если ЭтотОбъект.УстановитьДоли_1_1 тогда
				Объект.ДоляЛСЧислитель   = 1;
				Объект.ДоляЛСЗнаменатель = 1;	
			КонецЕсли;
		    //--
		Иначе
			
			Если СписокОткрытыхЛицевыхСчетов.Количество() = 0 Тогда
				Объект.ДоляЛСЧислитель     = 1;
				Объект.ДоляЛСЗнаменатель   = 1;
			КонецЕсли;
		
		КонецЕсли;
		
		Если НЕ (СписокОткрытыхЛицевыхСчетов.Количество() > 0 И Объект.Проживающие.Итог("ДоляСобственникаЧислитель")=0) Тогда
			УпроститьДробь(Объект.ДоляЛСЧислитель, Объект.ДоляЛСЗнаменатель);
			ДоляСобственностиЛС = УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеДроби(Объект.ДоляЛСЧислитель,
																								Объект.ДоляЛСЗнаменатель);
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.НадписьПредупреждение.Видимость = НЕ ПроверитьКорректностьУстановленныхДолейЛицевыхСчетовНаПомещении();
	
КонецПроцедуры

&НаКлиенте
// Рассчитывает долю собственности в зависимости от площади,
// привязанных к л/с комнат.
Процедура РассчитатьДолюКоммунальнойКвартиры()
	
	// Расчет производится по формуле: 
	// Доля л/с = Общая площадь помещения * Сумма жилой площади комнат, привязанных к лиц.сч. / Жилая площадь помещения.
	
	ОбщаяПлощадьПомещения = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПлощадьКвартиры(Объект.Помещение,
								ПредопределенноеЗначение("Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь"), , Объект.Дата, Ложь);
	ЖилаяПлощадьПомещения = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПлощадьКвартиры(Объект.Помещение,
								ПредопределенноеЗначение("Справочник.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь"), , Объект.Дата, Ложь);
	
	Если ЖилаяПлощадьПомещения = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не задана жилая площадь помещения!");
		Возврат;
	ИначеЕсли ОбщаяПлощадьПомещения = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не задана общая площадь помещения!");
		Возврат;
	КонецЕсли;
	
	СуммаЖилойПлощадиКомнатЛС = 0;
	Для каждого ТекКомната Из Объект.Комнаты Цикл
		СуммаЖилойПлощадиКомнатЛС = СуммаЖилойПлощадиКомнатЛС
								  + УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПлощадьКвартиры(ТекКомната.Комната,
										ПредопределенноеЗначение("Справочник.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь"), , Объект.Дата, Ложь);
	КонецЦикла;
	
	Объект.ДоляЛСЧислитель   = ОбщаяПлощадьПомещения * СуммаЖилойПлощадиКомнатЛС / ЖилаяПлощадьПомещения;
	Объект.ДоляЛСЗнаменатель = ОбщаяПлощадьПомещения;
	
	ДоляСобственностиЛС = УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеДроби(Объект.ДоляЛСЧислитель,
																						Объект.ДоляЛСЗнаменатель);

КонецПроцедуры

// Создает элемент справочника "Договоры контрагентов" и устанавливает договор основным,
// если у данной организации с данным конрагентом нет основных договоров.
&НаСервереБезКонтекста
Функция СоздатьНовыйДоговор(Контрагент, Организация, ИмяЛицевогоСчета)
	
	НаименованиеДоговора = "Договор на обслуживание " + ИмяЛицевогоСчета;
	НовыйЭлемент = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
	НовыйЭлемент.Владелец              = Контрагент;
	НовыйЭлемент.Наименование          = НаименованиеДоговора;
	НовыйЭлемент.ВалютаВзаиморасчетов  = Константы.ВалютаРегламентированногоУчета.Получить();
	НовыйЭлемент.Организация           = Организация;
	НовыйЭлемент.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
	
	Если НЕ КВП_ЗаписатьОбъект(НовыйЭлемент) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Запись объекта " + НовыйЭлемент + Символы.ПС + ОписаниеОшибки());
	КонецЕсли;
	
	ДоговорКонтрагента = НовыйЭлемент.Ссылка;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ОсновныеДоговорыКонтрагента.Договор.Ссылка КАК ОсновнойДоговор
	|ИЗ
	|	РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагента
	|ГДЕ
	|	ОсновныеДоговорыКонтрагента.Организация = &Организация
	|	И ОсновныеДоговорыКонтрагента.Контрагент = &Контрагент
	|	И ОсновныеДоговорыКонтрагента.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Если Запрос.Выполнить().Пустой() Тогда
		// Установим созданный договор как Основной.
		УПЖКХ_ТиповыеМетодыСервер.УстановитьОсновнойДоговорКонтрагента(ДоговорКонтрагента);
	КонецЕсли;
	
	Возврат ДоговорКонтрагента
	
КонецФункции

&НаКлиенте
// Изменяет видимость элементов формы.
Процедура УстановитьВидимостьДанныхОКонтрагенте()
	
	Элементы.СтраницаКонтрагент.Видимость = НЕ СоздатьКонтрагентаАвтоматически;
	Элементы.СтраницаЮрФизЛицо.Видимость  = СоздатьКонтрагентаАвтоматически;
	
КонецПроцедуры

&НаКлиенте
// Процедура устанавливает видимость элементов панели контрагента и устанавливает значения реквизитов.
Процедура УстановитьВидимостьИЗаполненностьПанелиКонтрагента()
	
	Элементы.СтраницаСоздатьКонтрагента.Видимость = Истина;
	
	Если ТипЗнч(мОтветственныйВладелец) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Объект.КонтрагентДляВзаиморасчетов = НайтиСоответствиеКонтрагентаФизЛицуНаСервере(Объект.Дата, мОтветственныйВладелец);
		Если Объект.КонтрагентДляВзаиморасчетов = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка") Тогда
			
			Элементы.ПанельКонтрагентДляВзаиморасчетов.ТекущаяСтраница = Элементы.СтраницаСоздатьКонтрагента;
			Элементы.СтраницаСоздатьКонтрагента.Видимость = Истина;
			Элементы.СтраницаТекущийКонтрагент.Видимость = Ложь;
			
			СоздатьКонтрагентаАвтоматически = Истина;
			ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо");
			УстановитьВидимостьДанныхОКонтрагенте();
		Иначе
			
			Элементы.ПанельКонтрагентДляВзаиморасчетов.ТекущаяСтраница = Элементы.СтраницаТекущийКонтрагент;
			Элементы.СтраницаСоздатьКонтрагента.Видимость = Ложь;
			Элементы.СтраницаТекущийКонтрагент.Видимость = Истина;
			
			Объект.ДоговорДляВзаиморасчетов = УстановитьДоговорСКонтрагентом(Объект.КонтрагентДляВзаиморасчетов, Объект.Организация, Объект.ИмяЛицевогоСчета);
		КонецЕсли;
	ИначеЕсли ТипЗнч(мОтветственныйВладелец) = Тип("СправочникСсылка.Контрагенты") Тогда
		Если Объект.КонтрагентДляВзаиморасчетов = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка") Тогда
			Объект.КонтрагентДляВзаиморасчетов = мОтветственныйВладелец;
			Объект.ДоговорДляВзаиморасчетов = УстановитьДоговорСКонтрагентом(Объект.КонтрагентДляВзаиморасчетов, Объект.Организация, Объект.ИмяЛицевогоСчета);
		КонецЕсли;
		
		Элементы.ПанельКонтрагентДляВзаиморасчетов.ТекущаяСтраница = Элементы.СтраницаТекущийКонтрагент;
		Элементы.СтраницаСоздатьКонтрагента.Видимость = Ложь;
		Элементы.СтраницаТекущийКонтрагент.Видимость = Истина;
	Иначе
		ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо");
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьИЗаполненностьПанелиКонтрагента()

&НаСервере
// Возвращает строку паспортных данных по ключу.
Функция ПолучитьСтрокуПаспортныхДанных(Ключ)
	
	Если ПустаяСтрока(Ключ) Тогда
		Возврат СоответствиеПаспортныхДанных.Добавить();
	КонецЕсли;
	
	СтрокиПаспортныхДанных = СоответствиеПаспортныхДанных.НайтиСтроки(Новый Структура("Ключ", Ключ));
	Если СтрокиПаспортныхДанных.Количество() = 0 Тогда
		СтрокаПаспортныхДанных = СоответствиеПаспортныхДанных.Добавить();
	Иначе
		СтрокаПаспортныхДанных = СтрокиПаспортныхДанных[0];
	КонецЕсли;
	
	Возврат СтрокаПаспортныхДанных;
	
КонецФункции

&НаСервере
// Процедура обновляет информацию о жильцах помещения.
Процедура ОбновитьИнформациюОЖильцах()
	
	Если ПодробныйВариантУчетаСобственников Тогда
		
		Объект.Проживающие.Очистить();
		
		Для Каждого ТекСтрока Из Объект.Собственники Цикл
			ТекСобственник = ТекСтрока.Собственник;
			
			Если ТекСобственник = Неопределено ИЛИ ТипЗнч(ТекСобственник) = Тип("СправочникСсылка.Контрагенты") Тогда
				Продолжить;
			КонецЕсли;
			
			НовСтр                     = Объект.Проживающие.Добавить();
			НовСтр.ФИО                 = ТекСобственник.Наименование;
			НовСтр.ФизЛицо             = ТекСобственник;
			НовСтр.Собственник         = Истина;
			ЗаполнитьЗначенияСвойств(НовСтр, ТекСобственник);
			
			Ключ = СформироватьКлючДляПоиска(НовСтр);
			СтрокаПаспортныхДанных = ПолучитьСтрокуПаспортныхДанных(Ключ);
			
			ЗаполнитьЗначенияСвойств(СтрокаПаспортныхДанных,
										УПЖКХ_УчетЖильцов.ЗаполнитьПаспортныеДанныеФизЛица(Объект.Дата, ТекСобственник));
			
		КонецЦикла;
		
		ИзменилисьДанныеОСобственниках = Ложь;
	
	Иначе
		
		Для Каждого ТекСтрока Из Объект.Проживающие Цикл
			
			Ключ = СформироватьКлючДляПоиска(ТекСтрока);
			
			Если Не ПустаяСтрока(Ключ) Тогда
				СтрокаПаспортныхДанных = ПолучитьСтрокуПаспортныхДанных(Ключ);
				
				СтрокаПаспортныхДанных.Ключ = Ключ;
				ЗаполнитьЗначенияСвойств(СтрокаПаспортныхДанных,
											УПЖКХ_УчетЖильцов.ЗаполнитьПаспортныеДанныеФизЛица(Объект.Дата, ТекСтрока.Собственник));
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура выполняет копирование списка услуг из заданного лицевого счета.
Процедура ВыполнитьКопированиеПараметровИзЛС(ВыбранноеЗначение)
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
		Объект.ТаблицаУслуг.Очистить();
		
		// Назначение услуги.
		Запрос = Новый Запрос;
		
		ДополнитьЗапросНазначеннымиУслугами(Запрос, КонецДня(Объект.Дата), ,ВыбранноеЗначение);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НазначенныеНачисления.Услуга,
		|	НазначенныеНачисления.Организация
		|ИЗ
		|	врТаблицаДействующихУслуг КАК НазначенныеНачисления
		|ГДЕ
		|	НазначенныеНачисления.Действует";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = Объект.ТаблицаУслуг.Добавить();
			НоваяСтрока.Услуга      = Выборка.Услуга;
			НоваяСтрока.Организация = Выборка.Организация;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура формирует ключ для поиска в соответствии.
//
// Параметры
//  Ресурс  - Строка - ресурс данных.
//
// Возвращаемое значение:
//   Строка   - ключ для соответствия.
//
Функция СформироватьКлючДляПоиска(Ресурс)

	Возврат Строка(Ресурс.ФИО);

КонецФункции // СформироватьКлючДляПоиска()

&НаСервере
// Функция возвращает структуру паспортных данных по ключу.
Функция ПолучитьПаспортныеДанныеПоКлючуНаСервере(Ключ)
	
	ПаспортныеДанные = УПЖКХ_УчетЖильцов.ПолучитьПустыеПаспортныеДанные();
	
	СтрокаПаспортныхДанных = ПолучитьСтрокуПаспортныхДанных(Ключ);
	Если Не СтрокаПаспортныхДанных = Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ПаспортныеДанные, СтрокаПаспортныхДанных);
	КонецЕсли;
	
	Возврат ПаспортныеДанные;
	
КонецФункции

&НаСервере
// Функция возвращает структуру паспортных данных по ключу.
Процедура ПоместитьПаспортныеДанныеПоКлючуНаСервере(Ключ, ПаспортныеДанные)
	
	СтрокаПаспортныхДанных = ПолучитьСтрокуПаспортныхДанных(Ключ);
	Если Не СтрокаПаспортныхДанных = Неопределено Тогда
		СтрокаПаспортныхДанных.Ключ = Ключ;
		ЗаполнитьЗначенияСвойств(СтрокаПаспортныхДанных, ПаспортныеДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура вызывает мастер ввода проживающего.
Процедура ВызватьМастерВводаПроживающего(ДанныеОПроживающем, ИмяСобытия = "")
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ФизЛицо",             "");
	СтруктураПараметров.Вставить("ФИО",                 "");
	СтруктураПараметров.Вставить("Пол",                 "");
	СтруктураПараметров.Вставить("ДатаРождения",        "");
	СтруктураПараметров.Вставить("ИНН",                 "");
	СтруктураПараметров.Вставить("СтраховойНомерПФР",   "");
	
	Ключ = ДанныеОПроживающем.ФИО;
	ПаспортныеДанные = ПолучитьПаспортныеДанныеПоКлючуНаСервере(Ключ);
	
	СтруктураПараметров.Вставить("ПаспортныеДанные",    ПаспортныеДанные);
	СтруктураПараметров.Вставить("Режим",               "");
	ЗаполнитьЗначенияСвойств(СтруктураПараметров, ДанныеОПроживающем);
	
	КИПроживающего = ДанныеОПроживающем.КИ;
	ДополнитьСтруктуруПараметровКонтактнойИнформацией(СтруктураПараметров, КИПроживающего);
	
	ДопПараметры = Новый Структура("ДанныеОПроживающем, ИмяСобытия", ДанныеОПроживающем, ИмяСобытия);
	ОткрытьФорму("Обработка.КВП_ПомощникСозданияПроживающего.Форма",
				 Новый Структура("ДанныеОЖильце", СтруктураПараметров),
				 ЭтаФорма,,,,
				 Новый ОписаниеОповещения("ОбработатьРезультатСозданияПроживающего", ЭтаФорма, ДопПараметры),
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ВызватьМастерВводаПроживающего()

&НаСервереБезКонтекста
// Дополняет структуру параметров контактной информацией для передачи в помощник ввода проживающего 
//
Процедура ДополнитьСтруктуруПараметровКонтактнойИнформацией(СтруктураПараметров, КонтактнаяИнформация)
	
	ТаблицаЗначенийКИ = КонтактнаяИнформация.Выгрузить();
	МассивКИ = УПЖКХ_ТиповыеМетодыСервер.ТаблицаЗначенийВМассив(ТаблицаЗначенийКИ);
	СтруктураПараметров.Вставить("КонтактнаяИнформация", МассивКИ);
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата закрытия формы помощника создания проживающего,
// вызванного в процедуре "ВызватьМастерВводаПроживающего()".
//
Процедура ОбработатьРезультатСозданияПроживающего(ИзмененныеДанные, ДополнительныеПараметры) Экспорт
	
	Если НЕ ИзмененныеДанные = Неопределено Тогда
		ДанныеОПроживающем = ДополнительныеПараметры.ДанныеОПроживающем;
		
		Если ДанныеОПроживающем = Неопределено Тогда
			ДанныеОПроживающем = ИзмененныеДанные;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ДанныеОПроживающем, ИзмененныеДанные);
		
		ДанныеОПроживающем.КИ.Очистить();
		
		Для Каждого ЭлементМассиваКИ Из ИзмененныеДанные.КонтактнаяИнформация Цикл
			ЗаполнитьЗначенияСвойств(ДанныеОПроживающем.КИ.Добавить(), ЭлементМассиваКИ);
		КонецЦикла;
		
		Ключ = ДанныеОПроживающем.ФИО;
		ПоместитьПаспортныеДанныеПоКлючуНаСервере(Ключ, ИзмененныеДанные.ПаспортныеДанные);
		
		Если ДополнительныеПараметры.ИмяСобытия = "ПередНачаломДобавления" Тогда
			Если Объект.Проживающие.Количество() = 1 И НЕ ПодробныйВариантУчетаСобственников И НЕ ФлагСобственникКонтрагент Тогда
				мОтветственныйВладелец = ДанныеОПроживающем.ФИО;
				ПроверитьПометкуКнопкиУстановкиОтветственного(ЭтотОбъект);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ДанныеОПроживающем.ФИО) Тогда
				
				Объект.Проживающие.Удалить(ДанныеОПроживающем);
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатСозданияПроживающего()

&НаКлиенте
// Функция проверяет нулевые значения размеров площадей.
//
Функция ИмеютсяНулевыеЗначенияПлощадей()
	
	ИмеютсяНулевыеПлощади = Ложь;
	Если КомнатыПомещения.НайтиСтроки(Новый Структура("Площадь", 0)).Количество() > 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Для всех комнат помещения необходимо указать размер жилой площади.");
		ИмеютсяНулевыеПлощади = Истина;
	КонецЕсли;
	
	Возврат ИмеютсяНулевыеПлощади;
	
КонецФункции // ИмеютсяНулевыеЗначенияПлощадей()

&НаСервере
// Функция проверяет корректность установленных долей лицевых счетов на помещении.
// Доли лицевых счетов установлены корректно, если их сумма не превышает 1.
//
Функция ПроверитьКорректностьУстановленныхДолейЛицевыхСчетовНаПомещении()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет
	|ПОМЕСТИТЬ втДействующиеЛС
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&Период, Объект = &Помещение) КАК КВП_ЛицевыеСчетаСрезПоследних
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.Объект,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель, 0) = 0
	|				ТОГДА ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель, 0) / КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК РазмерДоли
	|ИЗ
	|	РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(
	|			&Период,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втДействующиеЛС.ЛицевойСчет
	|				ИЗ
	|					втДействующиеЛС КАК втДействующиеЛС)) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.Объект";
	Запрос.УстановитьПараметр("Период",    Объект.Дата);
	Запрос.УстановитьПараметр("Помещение", Объект.Помещение);
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	ОбщийРазмерДолиВсехЛСНаПомещении = 0;
	
	// Получим общий размер долей лицевых счетов уже открытых на данное помещение.
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ОбщийРазмерДолиВсехЛСНаПомещении = ВыборкаДетальныеЗаписи.РазмерДоли;
	КонецЕсли;
	
	// Получим общий размер долей лицевых счетов с учетом текущего (открываемого) лицевого счета.
	НовыйРазмерДолейВсехЛСНаПомещении = ОбщийРазмерДолиВсехЛСНаПомещении + ?(Объект.ДоляЛСЗнаменатель = 0, 0, Объект.ДоляЛСЧислитель / Объект.ДоляЛСЗнаменатель);
	НовыйРазмерДолейВсехЛСНаПомещении = Окр(НовыйРазмерДолейВсехЛСНаПомещении, 2);
	
	// Сумма долей лицевых счетов на помещении не должна превышать 1.
	Возврат НЕ (НовыйРазмерДолейВсехЛСНаПомещении > 1); 
	//возврат истина;
	
КонецФункции // ПроверитьКорректностьУстановленныхДолейЛицевыхСчетовНаПомещении()

&НаКлиенте
// Процедура обновляет данные таблиц формы при изменении полей "Помещение" и "Дата".
//
Процедура ОбработатьИзменениеРеквизитовФормы() Экспорт
	
	ОбновитьДанныеОСобственности();
	ОбновитьДанныеОКомнатах(ЭтаФорма.Команды.Найти("ОбновитьДанныеОКомнатах"));
	
	Если ПодробныйВариантУчетаСобственников Тогда
		СценарийСозданияЛицевогоСчета();
		УстановитьПорядковыйНомерПерехода(0);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьИзменениеРеквизитовФормы()

&НаКлиентеНаСервереБезКонтекста
// Функция определяет, принадлежит ли помещение к жилому фонду.
//
Функция ПомещениеЯвляетсяЖилым(Помещение)
	
	Если Помещение.Пустая() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПомещениеЯвляетсяЖилым = Ложь;
	
	ВидПомещения = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Помещение, "ВидПомещения");
	ПомещениеЯвляетсяЖилым = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ВидПомещения, "ЭтоЖилойФонд");
	
	Возврат ПомещениеЯвляетсяЖилым;
	
КонецФункции // ПомещениеЯвляетсяЖилым()

&НаКлиенте
// Процедура обновляет список комнат в таблицах "Комнаты лицевого счета", "Комнаты помещения".
Процедура ОбновитьСписокКомнатПомещения()
	
	Объект.Комнаты.Очистить();
	КомнатыПомещения.Очистить();
	ПолучитьСписокКомнат(Объект.Дата, Объект.Помещение);
	ИмеютсяНулевыеЗначенияПлощадей();
	
КонецПроцедуры

&НаСервереБезКонтекста
// Формирует строковое представление сведений о собственности при упрощенном варианте учета собственников.
Функция ПолучитьПредставлениеСведенийОСобственности(ЯвляетсяСобственником, ВидДокументаСобственности, НомерДокументаСобственности, ДатаДокументаСобственности)
	
	Если ЯвляетсяСобственником Тогда
		Если ВидДокументаСобственности = ПредопределенноеЗначение("Справочник.УПЖКХ_ДокументыНаПравоСобственности.ПустаяСсылка")
		 И ПустаяСтрока(НомерДокументаСобственности)
		 И ДатаДокументаСобственности = Дата(1, 1, 1) Тогда
			Возврат "Указать сведения";
		Иначе
			Возврат ПолучитьПредставлениеДокументаСобственности(НомерДокументаСобственности, ДатаДокументаСобственности, ВидДокументаСобственности);
		КонецЕсли;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаСервере
// Создает элемент справочника "Договоры контрагентов".
//
// Параметры
//  ВыполнитьПоискБезСоздания - Булево - выполняется только поиск договора без его создания.
//
// Возвращаемое значение:
//   СправочникСсылка.ДоговорыКонтрагентов - договор контрагента.
//
Функция СоздатьДоговорКонтрагента(ВыполнитьПоискБезСоздания = Ложь)
	
	Если НЕ ТипЗнч(Объект.КонтрагентДляВзаиморасчетов) = Тип("СправочникСсылка.Контрагенты") Или Объект.КонтрагентДляВзаиморасчетов.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указан контрагент - владелец договора!");
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
	НаименованиеДоговора = "Договор на обслуживание " + Объект.ИмяЛицевогоСчета;
	
	НайденныйЭлемент = 
		Справочники.ДоговорыКонтрагентов.НайтиПоНаименованию(НаименованиеДоговора, Истина, , Объект.КонтрагентДляВзаиморасчетов);
	Если НайденныйЭлемент.Пустая() Тогда
		НовыйЭлемент = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		НовыйЭлемент.Владелец              = Объект.КонтрагентДляВзаиморасчетов;
		НовыйЭлемент.Наименование          = НаименованиеДоговора;
		НовыйЭлемент.ВалютаВзаиморасчетов  = Константы.ВалютаРегламентированногоУчета.Получить();
		НовыйЭлемент.Организация           = Объект.Организация;
		НовыйЭлемент.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
		
		Если НЕ КВП_ЗаписатьОбъект(НовыйЭлемент) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Запись объекта " + НовыйЭлемент + Символы.ПС + ОписаниеОшибки());
		КонецЕсли;
		ДоговорКонтрагента = НовыйЭлемент.Ссылка;
	Иначе
		ДоговорКонтрагента = НайденныйЭлемент.Ссылка;
	КонецЕсли;
	
	ОсновнойДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	УПЖКХ_ТиповыеМетодыСервер.УстановитьДоговорКонтрагента(ОсновнойДоговорКонтрагента, Объект.КонтрагентДляВзаиморасчетов, Объект.Организация);
	Если ОсновнойДоговорКонтрагента.Пустая() Тогда
		// Установим созданный договор как Основной.
		УПЖКХ_ТиповыеМетодыСервер.УстановитьОсновнойДоговорКонтрагента(ДоговорКонтрагента);
	КонецЕсли;
	
	Возврат ДоговорКонтрагента;
	
КонецФункции // СоздатьДоговор

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОТКРЫТИЯ ЛИЦЕВОГО СЧЕТА

#Область ПроцедурыОткрытияЛицевогоСчета

&НаСервере
// Процедура открывает лицевой счет на сервере.
Процедура ВыполнитьОткрытиеЛицевогоСчетаНаСервере()
	
	ОткрытиеВыполнено = ВыполнитьОткрытиеЛицевогоСчета();
	
	Если ОткрытиеВыполнено Тогда
		Если Объект.СобственникиНовый.Количество() > 0 Тогда
			мДокументУстановкиСобственников = СоздатьДокументУстановкиСобственников();
		КонецЕсли;
	
		Если Объект.ТаблицаУслуг.Количество() > 0 Тогда
			СформироватьДокументыНачисленияУслуг();
		КонецЕсли;
	Иначе
		Элементы.мЛицевойСчет.Видимость                                   = Ложь;
		Элементы.мДокументОткрытияЛС.Видимость                            = Ложь;
		Элементы.мДокументУправленияСведениямиДляВзаиморасчетов.Видимость = Ложь;
		Элементы.ЗаголовокОкончание.Заголовок                             = "При открытии лицевого счета возникли ошибки. Лицевой счет не создан.";
		Элементы.ЗаголовокОкончание.ЦветТекста                            = ЦветаСтиля.УПЖКХ_ТекстСообщенияОПроблемах;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Создает лицевой счет и документ открытия л/с.
Функция ВыполнитьОткрытиеЛицевогоСчета()
	
	НачатьТранзакцию();
	
	// ЛИЦЕВОЙ СЧЕТ
	
	СправОбъект = Справочники.КВП_ЛицевыеСчета.СоздатьЭлемент();
	СправОбъект.Родитель      = Объект.ГруппаЛС;
	СправОбъект.Наименование  = СокрЛП(Объект.ИмяЛицевогоСчета);
	СправОбъект.Идентификатор = Объект.ИдентификаторЛС;
	СправОбъект.Адрес         = Объект.Помещение;
	
	// Контрагент.
	Объект.КонтрагентДляВзаиморасчетов = ?(СоздатьКонтрагентаАвтоматически, СоздатьКонтрагента(), Объект.КонтрагентДляВзаиморасчетов);
	// Договор контрагента.
	Объект.ДоговорДляВзаиморасчетов = ?(СоздатьКонтрагентаАвтоматически, СоздатьНовыйДоговор(Объект.КонтрагентДляВзаиморасчетов, Объект.Организация, Объект.ИмяЛицевогоСчета), Объект.ДоговорДляВзаиморасчетов);
	
	Если Не КВП_ЗаписатьОбъект(СправОбъект) Тогда
		ОтменитьТранзакцию();
		мЛицевойСчет                                   = Справочники.КВП_ЛицевыеСчета.ПустаяСсылка();
		мДокументОткрытияЛС                            = Документы.КВП_ОткрытиеЛицевогоСчета.ПустаяСсылка();
		мДокументУстановкиСобственников                = Документы.УПЖКХ_УстановкаСобственниковПомещений.ПустаяСсылка();
		мДокументУправленияСведениямиДляВзаиморасчетов = Документы.УПЖКХ_УправлениеСведениямиДляВзаиморасчетовПоЛицевымСчетам.ПустаяСсылка();
		Возврат Ложь;
	КонецЕсли;
	
	мЛицевойСчет = СправОбъект.Ссылка;
	
	// КОМНАТЫ
	
	// Запись комнат, привязанных к л/с.
	Для Каждого ТекКомната Из Объект.Комнаты Цикл
		
		Если НЕ ЗначениеЗаполнено(ТекКомната.Комната) Тогда
			Продолжить;
		КонецЕсли;
		
		СписокКомнат = РегистрыСведений.УПЖКХ_ПривязанныеКЛицевомуСчетуКомнаты.СоздатьНаборЗаписей();
		СписокКомнат.Отбор.Период.Установить(Объект.Дата);
		СписокКомнат.Отбор.ЛицевойСчет.Установить(мЛицевойСчет);
		СписокКомнат.Отбор.Комната.Установить(ТекКомната.Комната);
		
		НовЗапись = СписокКомнат.Добавить();
		НовЗапись.Период          = Объект.Дата;
		НовЗапись.ЛицевойСчет     = мЛицевойСчет;
		НовЗапись.Комната         = ТекКомната.Комната;
		НовЗапись.Привязка        = Истина;
		
		СписокКомнат.Записать(Истина);
		
	КонецЦикла;
	
	// ДОКУМЕНТ ОТКРЫТИЯ
	
	// Создание документа открытия л/с.
	ДокументОбъект = Документы.КВП_ОткрытиеЛицевогоСчета.СоздатьДокумент();
	ДокументОбъект.Дата                     = Объект.Дата;
	ДокументОбъект.ЛицевойСчет              = мЛицевойСчет;
	ДокументОбъект.Комментарий              = "Открытие л/с; дом " + Объект.Здание.НомерДома + ", "
											+ Объект.Помещение + "; " + мОтветственныйВладелец;
	ДокументОбъект.Ответственный            = УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь();
	
	Если ТипЗнч(мОтветственныйВладелец) = Тип("СправочникСсылка.Контрагенты") Тогда
		ДокументОбъект.Контрагент           = мОтветственныйВладелец;
	КонецЕсли;
	
	мОтветственныйПроживающий = мОтветственныйВладелец;
	
	Для Каждого Жилец ИЗ Объект.Проживающие Цикл
		
		мПроживающий = СоздатьПроживающего(мЛицевойСчет, Жилец);
		Если ПодробныйВариантУчетаСобственников Тогда
			Если Жилец.ФизЛицо = мОтветственныйВладелец Тогда
				мОтветственныйПроживающий = мПроживающий;
			КонецЕсли;
		Иначе
			Если Жилец.ФИО = мОтветственныйВладелец Тогда
				мОтветственныйПроживающий = мПроживающий;
			КонецЕсли;
		КонецЕсли;
		
		// Добавим жильцов в табличную часть документа.
		НоваяСтрока = ДокументОбъект.Главная.Добавить();
		НоваяСтрока.Проживающий                      = мПроживающий;
		НоваяСтрока.Проживает                        = Жилец.Проживающий;
		НоваяСтрока.Зарегистрирован                  = Жилец.Зарегистрированный;
		НоваяСтрока.СтепеньРодства                   = Жилец.СтепеньРодства;
		НоваяСтрока.Собственник                      = Жилец.Собственник;
		НоваяСтрока.ОснованиеПолученияВСобственность = Жилец.ОснованиеПолученияВСобственность;
		НоваяСтрока.ВидДокументаСобственности        = Жилец.ВидДокументаСобственности;
		НоваяСтрока.НомерДокументаСобственности      = Жилец.НомерДокументаСобственности;
		НоваяСтрока.ДатаДокументаСобственности       = Жилец.ДатаДокументаСобственности;
		НоваяСтрока.ДоляСобственностиЧислитель       = Жилец.ДоляСобственникаЧислитель;
		НоваяСтрока.ДоляСобственностиЗнаменатель     = Жилец.ДоляСобственникаЗнаменатель;
		НоваяСтрока.ВладелецЕдинственногоЖилья       = Жилец.ВладелецЕдинственногоЖилья;
		
		// Добавление дат заселения и регистрации жильцов в документ.
		НоваяСтрока.ДатаРегистрации              = Жилец.ДатаРегистрации;
		НоваяСтрока.ДатаЗаселения                = Жилец.ДатаЗаселения;
	КонецЦикла;
	
	Если УказатьЖильцовГотовымиЧислами Тогда
		ДокументОбъект.КоличествоПроживающих        = КоличествоПроживающих;
		ДокументОбъект.КоличествоЗарегистрированных = КоличествоЗарегистрированных;
	Иначе
		ДокументОбъект.КоличествоПроживающих        = 
			Объект.Проживающие.НайтиСтроки(Новый Структура("Проживающий", Истина)).Количество();
		ДокументОбъект.КоличествоЗарегистрированных = 
			Объект.Проживающие.НайтиСтроки(Новый Структура("Зарегистрированный", Истина)).Количество();
	КонецЕсли;
	
	ДокументОбъект.ВладелецКонтрагент = ?(ТипЗнч(мОтветственныйВладелец) = Тип("СправочникСсылка.Контрагенты")
										  ИЛИ ТипЗнч(мОтветственныйВладелец) = Тип("СправочникОбъект.Контрагенты"), Истина, Ложь);
	
	ДокументОбъект.ОтветственныйСобственник = мОтветственныйПроживающий;
	
	ДокументОбъект.ДоляЧислитель   = Объект.ДоляЛСЧислитель;
	ДокументОбъект.ДоляЗнаменатель = Объект.ДоляЛСЗнаменатель;
	
	Если Не КВП_ЗаписатьОбъект(ДокументОбъект, РежимЗаписиДокумента.Проведение) Тогда
		ОтменитьТранзакцию();
		мЛицевойСчет                                   = Справочники.КВП_ЛицевыеСчета.ПустаяСсылка();
		мДокументОткрытияЛС                            = Документы.КВП_ОткрытиеЛицевогоСчета.ПустаяСсылка();
		мДокументУстановкиСобственников                = Документы.УПЖКХ_УстановкаСобственниковПомещений.ПустаяСсылка();
		мДокументУправленияСведениямиДляВзаиморасчетов = Документы.УПЖКХ_УправлениеСведениямиДляВзаиморасчетовПоЛицевымСчетам.ПустаяСсылка();
		Возврат Ложь;
	КонецЕсли;
	
	мДокументОткрытияЛС = ДокументОбъект.Ссылка;
	
	// ДОКУМЕНТ УПРАВЛЕНИЯ СВЕДЕНИЯМИ ДЛЯ ВЗАИМОРАСЧЕТОВ
	
	ДокументУправленияВзаиморасчетами               = Документы.УПЖКХ_УправлениеСведениямиДляВзаиморасчетовПоЛицевымСчетам.СоздатьДокумент();
	ДокументУправленияВзаиморасчетами.Дата          = Объект.Дата;
	ДокументУправленияВзаиморасчетами.Организация   = Объект.Организация;
	ДокументУправленияВзаиморасчетами.Объект        = Объект.Помещение;
	ДокументУправленияВзаиморасчетами.Комментарий   = "#Документ создан автоматически при открытии лицевого счета """ + мЛицевойСчет + """";
	ДокументУправленияВзаиморасчетами.Ответственный = УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь();
	
	// Табличная часть сведений о взаиморасчетах.
	НоваяСтрока                    = ДокументУправленияВзаиморасчетами.СведенияДляВзаиморасчетов.Добавить();
	Новаястрока.ЛицевойСчет        = мЛицевойСчет;
	НоваяСтрока.Контрагент         = Объект.КонтрагентДляВзаиморасчетов;
	Новаястрока.ДоговорКонтрагента = Объект.ДоговорДляВзаиморасчетов;
	
	Если Не КВП_ЗаписатьОбъект(ДокументУправленияВзаиморасчетами, РежимЗаписиДокумента.Проведение) Тогда
		ОтменитьТранзакцию();
		мЛицевойСчет                                   = Справочники.КВП_ЛицевыеСчета.ПустаяСсылка();
		мДокументОткрытияЛС                            = Документы.КВП_ОткрытиеЛицевогоСчета.ПустаяСсылка();
		мДокументУстановкиСобственников                = Документы.УПЖКХ_УстановкаСобственниковПомещений.ПустаяСсылка();
		мДокументУправленияСведениямиДляВзаиморасчетов = Документы.УПЖКХ_УправлениеСведениямиДляВзаиморасчетовПоЛицевымСчетам.ПустаяСсылка();
		Возврат Ложь;
	КонецЕсли;
	
	мДокументУправленияСведениямиДляВзаиморасчетов = ДокументУправленияВзаиморасчетами.Ссылка;
	
	// СООТВЕТСТВИЕ ФИЗЛИЦ И КОНТРАГЕНТОВ
	
	Если ТипЗнч(мОтветственныйВладелец) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		// Запись соответствия физлица и контрагента.
		СписокСоответствия = РегистрыСведений.УПЖКХ_СоответствиеФизЛицИКонтрагентов.СоздатьНаборЗаписей();
		СписокСоответствия.Отбор.Период.Установить(Объект.Дата);
		СписокСоответствия.Отбор.ФизЛицо.Установить(мОтветственныйВладелец);
		
		НовЗапись = СписокСоответствия.Добавить();
		НовЗапись.Период     = Объект.Дата;
		НовЗапись.ФизЛицо    = мОтветственныйВладелец;
		НовЗапись.Контрагент = Объект.КонтрагентДляВзаиморасчетов;
		
		СписокСоответствия.Записать(Истина);
		
	КонецЕсли;
	
	ЗафиксироватьТранзакцию();
	
	Возврат Истина;
	
КонецФункции

&НаСервере
// Создает проживающего для л/с по указанным данным.
Функция СоздатьПроживающего(ЛицевойСчет, ДанныеЖильца)
	
	// Поиск группы в справочнике Физлиц
	ГрПроживающих = "Проживающие";
	НайденнаяГр = Справочники.ФизическиеЛица.НайтиПоНаименованию(ГрПроживающих,Истина);
	Если (НайденнаяГр.Пустая()) ИЛИ (НЕ НайденнаяГр.ЭтоГруппа) Тогда
		Гр = Справочники.ФизическиеЛица.СоздатьГруппу();
		Гр.Наименование = ГрПроживающих;
		Попытка
			Гр.Записать();
			ТекРодитель = Гр.Ссылка;
		Исключение
			ТекРодитель = Справочники.ФизическиеЛица.ПустаяСсылка();
		КонецПопытки;
	Иначе
		ТекРодитель = НайденнаяГр;
	КонецЕсли;
	
	КИУжеЗаписана = Ложь;
	
	// ФизЛицо.
	
	Если ЗначениеЗаполнено(ДанныеЖильца.ФизЛицо) Тогда
		мФизЛицо = ДанныеЖильца.ФизЛицо;
		
	Иначе
		// получение фамилии, имени, отчества
		РазделеннаяФИО = РазделитьФИО(СокрЛП(ДанныеЖильца.ФИО));
		// Поиск Физлица
		мФизЛицо = ПоискФизЛица(РазделеннаяФИО, ДанныеЖильца.ДатаРождения, ДанныеЖильца.Пол, ДанныеЖильца.СтраховойНомерПФР);
		
		Если мФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
			
			// создаем новое физлицо
			СправФЛ = Справочники.ФизическиеЛица.СоздатьЭлемент();
			СправФЛ.Родитель          = ТекРодитель;
			СправФЛ.ФИО               = СокрЛП(РазделеннаяФИО.Фамилия + " " + РазделеннаяФИО.Имя + " " + РазделеннаяФИО.Отчество);
			СправФЛ.Наименование      = СокрЛП(ДанныеЖильца.ФИО);
			СправФЛ.ДатаРождения      = ДанныеЖильца.ДатаРождения;
			СправФЛ.Пол               = ДанныеЖильца.Пол;
			СправФЛ.ИНН               = ДанныеЖильца.ИНН;
			СправФЛ.СтраховойНомерПФР = ДанныеЖильца.СтраховойНомерПФР;
			
			ТаблицаКИ = ДанныеЖильца.КИ.Выгрузить();
			УПЖКХ_ТиповыеМетодыСервер.КонтактнаяИнформацияУстановитьКонтактнуюИнформациюОбъекта(СправФЛ, ТаблицаКИ , Истина);
			КИУжеЗаписана = Истина;
			
			КВП_ЗаписатьОбъект(СправФЛ);
			
			мФизЛицо = СправФЛ.Ссылка;
			
			// запись ФИО физлица
			МенеджерЗаписи = РегистрыСведений.ФИОФизическихЛиц.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.ФизическоеЛицо = мФизЛицо;
			МенеджерЗаписи.Период = '19000101';
			МенеджерЗаписи.Фамилия  = РазделеннаяФИО.Фамилия;
			МенеджерЗаписи.Имя      = РазделеннаяФИО.Имя;
			МенеджерЗаписи.Отчество = РазделеннаяФИО.Отчество;
			МенеджерЗаписи.Записать(Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ КИУжеЗаписана Тогда
		ТаблицаКИ = ДанныеЖильца.КИ.Выгрузить();
		УПЖКХ_ТиповыеМетодыСервер.КонтактнаяИнформацияУстановитьКонтактнуюИнформациюОбъекта(мФизЛицо, ТаблицаКИ , Истина);
	КонецЕсли;
	
	// Паспортные данные ФизЛица.
	
	Ключ = СформироватьКлючДляПоиска(ДанныеЖильца);
	ПаспортныеДанные = ПолучитьСтрокуПаспортныхДанных(Ключ);
	Если ПаспортныеДанные.ИзменятьПаспортныеДанные Тогда
		МенеджерЗаписи = РегистрыСведений.ДокументыФизическихЛиц.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ФизЛицо                  = мФизЛицо;
		МенеджерЗаписи.Период                   = ПаспортныеДанные.Период;
		МенеджерЗаписи.ВидДокумента             = ПаспортныеДанные.ВидДокумента;
		МенеджерЗаписи.Серия                    = ПаспортныеДанные.СерияДокумента;
		МенеджерЗаписи.Номер                    = ПаспортныеДанные.НомерДокумента;
		МенеджерЗаписи.ДатаВыдачи               = ПаспортныеДанные.ДатаВыдачиДокумента;
		МенеджерЗаписи.КемВыдан                 = ПаспортныеДанные.КемВыданДокумент;
		МенеджерЗаписи.КодПодразделения         = ПаспортныеДанные.КодПодразделения;
		МенеджерЗаписи.ЯвляетсяДокументомУдостоверяющимЛичность = Истина;
		МенеджерЗаписи.Записать(Истина);
	КонецЕсли;
	
	// Проживающий.
	
	// создаем нового проживающего
	СправОбъект = Справочники.УПЖКХ_Жильцы.СоздатьЭлемент();
	СправОбъект.Наименование = СокрЛП(ДанныеЖильца.ФИО);
	СправОбъект.ФизЛицо      = мФизЛицо;
	СправОбъект.Владелец     = ЛицевойСчет;
	КВП_ЗаписатьОбъект(СправОбъект);
	
	Возврат СправОбъект.Ссылка;
	
КонецФункции

&НаСервере
// Создает элемент справочника "Контрагенты".
Функция СоздатьКонтрагента()

	// определим группу
	СписокГрупп = Новый СписокЗначений;
	СписокГрупп.Добавить("Проживающие");
	Если НЕ Объект.ГруппаЛС.Пустая() Тогда
		ЗаписьГрупп(Объект.ГруппаЛС, СписокГрупп);
	КонецЕсли;
		
	ТекРодитель = Справочники.Контрагенты.ПустаяСсылка();
	
	Для каждого ТекГруппа Из СписокГрупп Цикл
		НайденнаяГр = Справочники.Контрагенты.НайтиПоНаименованию(ТекГруппа,Истина,ТекРодитель);
		Если (НайденнаяГр.Пустая()) ИЛИ (НЕ НайденнаяГр.ЭтоГруппа) Тогда
			Гр = Справочники.Контрагенты.СоздатьГруппу();
			Гр.Наименование = ТекГруппа;
			Гр.Родитель = ТекРодитель;
			Попытка
				Гр.Записать();
				ТекРодитель = Гр.Ссылка;
			Исключение
				Продолжить;
			КонецПопытки;
		Иначе
			ТекРодитель = НайденнаяГр.Ссылка;
		КонецЕсли;
	КонецЦикла;

	// создадим элемент
	Если ПодробныйВариантУчетаСобственников Тогда
		НайденныйЭлемент = 
			Справочники.Контрагенты.НайтиПоНаименованию(мОтветственныйВладелец.Наименование, Истина, ТекРодитель);
	Иначе
		НайденныйЭлемент = Справочники.Контрагенты.НайтиПоНаименованию(мОтветственныйВладелец, Истина, ТекРодитель);
	КонецЕсли;
	
	Если НайденныйЭлемент.Пустая() Тогда
		НовыйЭлемент = Справочники.Контрагенты.СоздатьЭлемент();
		НовыйЭлемент.Родитель = ТекРодитель;
		
		Если ПодробныйВариантУчетаСобственников Тогда
			НовыйЭлемент.Наименование = мОтветственныйВладелец.Наименование;
			НовыйЭлемент.НаименованиеПолное = мОтветственныйВладелец.Наименование;
		Иначе
			НовыйЭлемент.Наименование = мОтветственныйВладелец;
			НовыйЭлемент.НаименованиеПолное = мОтветственныйВладелец;
		КонецЕсли;
		
		НовыйЭлемент.ЮридическоеФизическоеЛицо = ЮрФизЛицо;
	
		КВП_ЗаписатьОбъект(НовыйЭлемент);
		
		Возврат НовыйЭлемент.Ссылка;
	Иначе
		Возврат НайденныйЭлемент.Ссылка;
	КонецЕсли;
	
КонецФункции

&НаСервере
// Сохраняет список групп.
Процедура ЗаписьГрупп(ЭлементСправочника, СписокГрупп)
	
	Если ЗначениеЗаполнено(ЭлементСправочника.Родитель) Тогда
		ЗаписьГрупп(ЭлементСправочника.Родитель, СписокГрупп)
	КонецЕсли;
	СписокГрупп.Добавить(ЭлементСправочника.Наименование);
	
КонецПроцедуры

&НаСервере
// Процедура формирует документы начисления услуг по указанным услугам, а так же нормы потребления.
Процедура СформироватьДокументыНачисленияУслуг()
	
	Если Объект.ТаблицаУслуг.Количество() > 0 Тогда
		
		мТаблицаУслуг = Объект.ТаблицаУслуг.Выгрузить();
		мТаблицаУслуг.Свернуть("Организация");
		Смещение = 0;
		Для Каждого ТекОрганизация Из мТаблицаУслуг Цикл
			ТаблицаУслугДляЗагрузки = Объект.ТаблицаУслуг.НайтиСтроки(
										Новый Структура("Организация", ТекОрганизация.Организация));
			СоздатьДокументНазначенияУслуг(ТаблицаУслугДляЗагрузки, ТекОрганизация.Организация, Смещение);
			Смещение = Смещение + 24;
		КонецЦикла;
		
	КонецЕсли;
	
	// Нормы потребления.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления
	|ИЗ
	|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(&Дата, ЛицевойСчет = &ЛицевойСчет) 
	|		КАК КВП_НормыПотребленияУслугЛССрезПоследних";
	
	Запрос.УстановитьПараметр("Дата",        Объект.Дата);
	Запрос.УстановитьПараметр("ЛицевойСчет", Объект.ШаблонЛС);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		НаборЗаписей = РегистрыСведений.КВП_НормыПотребленияУслугЛС.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЛицевойСчет.Установить(мЛицевойСчет);
		
		ВыборкаНорм = РезультатЗапроса.Выбрать();
		Пока ВыборкаНорм.Следующий() Цикл
			Запись = НаборЗаписей.Добавить();
			Запись.Период           = Объект.Дата;
			Запись.ЛицевойСчет      = мЛицевойСчет;
			Запись.Услуга           = ВыборкаНорм.Услуга;
			Запись.НормаПотребления = ВыборкаНорм.НормаПотребления;
		КонецЦикла;
		
		КВП_ЗаписатьОбъект(НаборЗаписей);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Функция создает документ назначения услуг.
//
Процедура СоздатьДокументНазначенияУслуг(Таблица, мОрганизация, Смещение)
	
	ДокументОбъект = Документы.КВП_УправлениеУслугами.СоздатьДокумент();
	ДокументОбъект.Дата        = Объект.Дата;
	ДокументОбъект.ДатаНач     = Объект.Дата;
	ДокументОбъект.Организация = мОрганизация;
	ДокументОбъект.ВидОперации = Перечисления.КВП_ВидыОперацийУправленияУслугами.НазначениеНаЛицевыеСчета;
	
	Для Каждого СтрУслуга Из Таблица Цикл
		НоваяСтрока = ДокументОбъект.Услуги.Добавить();
		НоваяСтрока.Услуга = СтрУслуга.Услуга;
	КонецЦикла;
	
	СтрОбъект = ДокументОбъект.Объекты.Добавить();
	СтрОбъект.ДатаНачала       = Объект.Дата + 1;
	СтрОбъект.Объект           = мЛицевойСчет;
	
	Если Не КВП_ЗаписатьОбъект(ДокументОбъект, РежимЗаписиДокумента.Проведение) Тогда
		Возврат;
	КонецЕсли;
	
	мДокументНазначенияУслуг = ДокументОбъект.Ссылка;
	
	// добавление новой надписи
	ИмяЭлемента = СтрЗаменить(мДокументНазначенияУслуг," ", "");
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента,":", "");
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента,".", "");
	ИмяЭлемента = СтрЗаменить(ИмяЭлемента,"-", "");
	ИмяЭлемента = УПЖКХ_ОбщегоНазначенияСервер.НормализоватьСтроку(ИмяЭлемента);
	
	НоваяНадпись = Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), Элементы.ГруппаНазначенныхУслуг); 
	НоваяНадпись.Заголовок = НСтр("ru='" + мДокументНазначенияУслуг + "'");
	НоваяНадпись.Вид = ВидДекорацииФормы.Надпись;
	НоваяНадпись.Гиперссылка = Истина;
	НоваяНадпись.РастягиватьПоГоризонтали = Истина;
	НоваяНадпись.УстановитьДействие("Нажатие", "НадписьОткрытьДокументНажатие");
	
	НоваяСтрокаСсылки = ТаблицаСсылокНазначенияУслуг.Добавить();
	НоваяСтрокаСсылки.Ссылка      = мДокументНазначенияУслуг;
	НоваяСтрокаСсылки.ИмяЭлемента = ИмяЭлемента;
	
КонецПроцедуры

&НаСервере
// Функция создает документ установки собственников на помещение.
//
// Параметры:
//  Нет.
//
// Возвращаемое значение:
//  ДокументСсылка - ссылка на созданный документ.
//
Функция СоздатьДокументУстановкиСобственников()
	
	Документ = Документы.УПЖКХ_УстановкаСобственниковПомещений.СоздатьДокумент();
	Документ.ВидОперации                 = Перечисления.УПЖКХ_ВидыОперацийСобственности.РегистрированиеПравСобственности;
	// Вычитаем одну секунду для того, чтобы при полном варианте учета собственников отображались актуальные сведения о собственности жильцов,
	// т.к. при создании документов "Установка собственников помещений" и "Открытие лицевого счета" отображается одинаковая дата и время.
	Документ.Дата                        = Объект.Дата - 1;
	Документ.Здание                      = Объект.Здание;
	Документ.Помещение                   = Объект.Помещение;
	Документ.НесколькоСобственников      = Объект.НесколькоСобственников;
	Документ.ОпределитьДолиСобственности = Объект.ОпределитьДолиСобственности;
	Документ.ВидСобственности            = Объект.ВидСобственностиНовый;
	
	Документ.Собственники.Загрузить(Объект.СобственникиНовый.Выгрузить());
	КВП_ЗаписатьОбъект(Документ, РежимЗаписиДокумента.Проведение);
	
	Возврат Документ.Ссылка;
	
КонецФункции // СоздатьДокументУстановкиСобственников()

&НаКлиенте
// Записывает сведения о собственности в реквизиты документа.
Процедура ЗаписатьСведенияОСобственности(СтруктураСведений)
	
	Если Не СтруктураСведений.Свойство("ФИО") Тогда
		Возврат;
	КонецЕсли;
	
	СтрокиСобственника = Объект.Проживающие.НайтиСтроки(Новый Структура("ФИО", СтруктураСведений.ФИО));
		
	Если Не СтрокиСобственника.Количество() = 0 Тогда
		СтрокаСобственника = СтрокиСобственника.Получить(0);
		СтрокаСобственника.ОснованиеПолученияВСобственность = СтруктураСведений.ОснованиеПолученияВСобственность;
		СтрокаСобственника.ВидДокументаСобственности        = СтруктураСведений.ВидДокумента;
		СтрокаСобственника.НомерДокументаСобственности      = СтруктураСведений.НомерДокумента;
		СтрокаСобственника.ДатаДокументаСобственности       = СтруктураСведений.ДатаДокумента;
		СтрокаСобственника.СведенияОСобственности           = ПолучитьПредставлениеСведенийОСобственности(СтрокаСобственника.Собственник,
																										  СтрокаСобственника.ВидДокументаСобственности,
																										  СтрокаСобственника.НомерДокументаСобственности,
																										  СтрокаСобственника.ДатаДокументаСобственности);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Открывает форму ввода сведений о собственности на помещение.
Процедура ИзменитьСведенияОСобственности()
	
	ТекущаяСтрока = Элементы.Проживающие.ТекущиеДанные;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ФИО",                              ТекущаяСтрока.ФИО);
	ПараметрыОткрытия.Вставить("ОснованиеПолученияВСобственность", ТекущаяСтрока.ОснованиеПолученияВСобственность);
	ПараметрыОткрытия.Вставить("ВидДокумента",                     ТекущаяСтрока.ВидДокументаСобственности);
	ПараметрыОткрытия.Вставить("НомерДокумента",                   ТекущаяСтрока.НомерДокументаСобственности);
	ПараметрыОткрытия.Вставить("ДатаДокумента",                    ТекущаяСтрока.ДатаДокументаСобственности);
	
	ОткрытьФорму("ОбщаяФорма.УПЖКХ_ФормаСведенийОСобственности", ПараметрыОткрытия, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры



#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С МЕТОДАМИ МОДУЛЯ ОБЪЕКТА

#Область ПроцедурыРаботыСМетодамиМодуляОбъекта

&НаСервере
// Процедура получает список комнат на сервере.
Процедура ПолучитьСписокКомнат(Дата, Помещение);
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект", Тип("ОбработкаОбъект.УПЖКХ_ПомощникОткрытияЛицевогоСчета"));
	Если НЕ Помещение.Пустая() Тогда
		КомнатыПомещения.Загрузить(ОбработкаОбъект.ПолучитьСписокКомнат(Дата, Помещение));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Формирует ищет соответствие собственника и контрагента.
//
// Параметры:
//  Период - Дата поиска.
//  Собственник - Ссылка на справочник ФизЛица.
//
// Возвращаемое значение:
//  Контрагент - Ссылка на справочник Контрагенты.
// 
Функция НайтиСоответствиеКонтрагентаФизЛицуНаСервере(Период, Собственник)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект", Тип("ОбработкаОбъект.УПЖКХ_ПомощникОткрытияЛицевогоСчета"));
	Возврат ОбработкаОбъект.НайтиСоответствиеКонтрагентаФизЛицу(Период, Собственник);
	
КонецФункции

&НаСервере
// Функция получает паспортные данные по физлицу.
//
// Параметры:
//  Период - Дата поиска.
//  ТекФизЛицо - Ссылка на справочник ФизЛица.
//
// Возвращаемое значение:
//  Структура - Записи с паспортными данными.
// 
Функция ПолучитьТекстКомнатЛСНаСервере()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект", Тип("ОбработкаОбъект.УПЖКХ_ПомощникОткрытияЛицевогоСчета"));
	Возврат ОбработкаОбъект.ПолучитьТекстКомнатЛС(Объект.Дата, Объект.Комнаты.Выгрузить().ВыгрузитьКолонку("Комната"));
	
КонецФункции //ПолучитьТекстКомнатЛСНаСервере

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("Здание",    Объект.Здание);
	Параметры.Свойство("ШаблонЛС",  Объект.ШаблонЛС);
	Параметры.Свойство("Помещение", Объект.Помещение);
	
	ПодробныйВариантУчетаСобственников = НЕ ИспользуетсяУпрощенныйВариантУчетаСобственников();
	
	Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьОсновнуюОрганизацию();
	Объект.Дата = НачалоМесяца(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
	ЭтаФорма.УстановитьДоли_1_1 = Истина;  //++ Позолотина
	УказатьЖильцовГотовымиЧислами = Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Получить();
		
	// Устанавливаем текущую таблицу переходов
	СценарийСозданияЛицевогоСчета();
	
	УправлениеФормой(ЭтотОбъект);
	
	// Если в параметрах формы имеется помещение, обновляем данные вспомогательных таблиц.
	Если ЗначениеЗаполнено(Объект.Помещение) Тогда
		ОбновитьДанныеОСобственности();
		
		Объект.Комнаты.Очистить();
		ПолучитьСписокКомнат(Объект.Дата, Объект.Помещение);
	КонецЕсли;
	
	Модифицированность = Ложь;
	
	ЦветСтиляПоясняющийОшибкуТекст = ЦветаСтиля.ПоясняющийОшибкуТекст;
	ЦветСтиляЦветТекстаПоля = ЦветаСтиля.ЦветТекстаПоля;
	
	// Установить доступность формы с учетом ключа СЛК.
	СЗК_МодульЗащитыКлиентСервер.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	УстановитьПорядковыйНомерПерехода(0);
	
	Если Объект.ДоляЛСЗнаменатель = 0 Тогда
		Объект.ДоляЛСЗнаменатель = 1;
	КонецЕсли;
	
	ИмеютсяНулевыеЗначенияПлощадей();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Отказ = Ложь;
	
	Если Модифицированность И НЕ ЗакрытьФорму Тогда
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаПередЗакрытием", ЭтаФорма),
					   "При закрытии формы все введенные данные будут потеряны. Закрыть форму?",
					   РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры // ПередЗакрытием()

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре-обработчике "ПередЗакрытием()".
Процедура ОбработатьРезультатВопросаПередЗакрытием(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗакрытьФорму = Истина;
		ЭтаФорма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаПередЗакрытием()

&НаКлиенте
// Обработчик события "ОбработкаОповещения" формы.
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Событие возникает при закрытии формы списка справочника "Помещения".
	Если ИмяСобытия = "РедактированиеПомещенийЗавершено" Тогда
		
		ОбновитьСписокКомнатПомещения();
		
	ИначеЕсли ИмяСобытия = "ПередачаСведенийОСобственностиПриУпрощенномУчете" Тогда
		
		Если ТипЗнч(Параметр) = Тип("Строка") Тогда
			СтруктураСведений = ПолучитьИзВременногоХранилища(Параметр);
			Если ТипЗнч(Параметр) = Тип("Строка") Тогда
				ЗаписатьСведенияОСобственности(СтруктураСведений);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

//////////////////////////////////////
// Закладка "Данные о помещении"

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Помещение".
Процедура ПомещениеПриИзменении(Элемент)
	
	ОбработатьИзменениеРеквизитовФормы();
	
КонецПроцедуры // ПомещениеПриИзменении()

&НаКлиенте
// Обработчик события "Открытие" поля "Помещение".
Процедура ПомещениеОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.УПЖКХ_Помещения.ФормаОбъекта", Новый Структура("Ключ", Объект.Помещение), ЭтаФорма,,,,,РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры // ПомещениеОткрытие()

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода "Дата".
//
Процедура ДатаПриИзменении(Элемент)
	
	ОбработатьИзменениеРеквизитовФормы();
	
КонецПроцедуры

//////////////////////////////////////
// Закладка "Регистрация собственности"

&НаКлиенте
// Обработчик события "При изменении" поля ввода вида собственности.
Процедура ВидСобственностиНовыйПриИзменении(Элемент)
	
	Если (Объект.ВидСобственностиНовый = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыСобственности.Государственная")
		  ИЛИ Объект.ВидСобственностиНовый = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыСобственности.Муниципальная") 
		  ИЛИ Объект.ВидСобственностиНовый = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыСобственности.Ведомственная"))
		И Объект.НесколькоСобственников Тогда
		
		Если Объект.СобственникиНовый.Количество() > 1 Тогда
			
			ТекстВопроса = "Все строки собственники из списка, кроме первого, будут удалены.
						   |Продолжить?";
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаВидСобственностиНовыйПриИзменении", ЭтаФорма),
						   ТекстВопроса,
						   РежимДиалогаВопрос.ДаНет);
			Возврат;
			
		КонецЕсли;
		
		Объект.НесколькоСобственников      = Ложь;
		Объект.ОпределитьДолиСобственности = Ложь;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры // ВидСобственностиНовыйПриИзменении()

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "ВидСобственностиНовыйПриИзменении()".
Процедура ОбработатьРезультатВопросаВидСобственностиНовыйПриИзменении(РезультатВопроса, ДополнительныеПарметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Пока Объект.СобственникиНовый.Количество() > 1 Цикл
			СтрокаУдаления = Объект.СобственникиНовый[1];
			Объект.СобственникиНовый.Удалить(СтрокаУдаления);
		КонецЦикла;
		Элементы.СобственникиНовый.ТекущаяСтрока = Объект.СобственникиНовый[0].ПолучитьИдентификатор();
	Иначе
		Объект.НесколькоСобственников = Истина;
		Возврат;
	КонецЕсли;
	
	Объект.НесколькоСобственников      = Ложь;
	Объект.ОпределитьДолиСобственности = Ложь;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры // ОбработатьРезультатВопросаВидСобственностиНовыйПриИзменении()

&НаКлиенте
// Обработчик события "При изменении" поля "НесколькоСобственников".
Процедура НесколькоСобственниковПриИзменении(Элемент)
	
	Если Объект.НесколькоСобственников = Ложь И Объект.СобственникиНовый.Количество() > 1 Тогда
		
		ТекстВопроса = "Все строки собственников из списка, кроме первого, будут удалены.
					   |Продолжить?";
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаВидСобственностиНовыйПриИзменении", ЭтаФорма),
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "При изменении" поля "ОпределитьДолиСобственности".
Процедура ОпределитьДолиСобственностиПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ОснованиеПолученияВСобственность".
Процедура ОснованиеПолученияВСобственностьНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.СобственникиНовый.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено Тогда
		Форма = ПолучитьФорму("Справочник.УПЖКХ_ОснованияПолученияВСобственностьПомещений.ФормаВыбора",
								Новый Структура("ВидСобственности, ТекущаяСтрока", Объект.ВидСобственностиНовый,
												ТекущиеДанные.ОснованиеПолученияВСобственность),
								Элемент);
		Форма.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередНачаломИзменения" поля "СобственникиНовый".
Процедура СобственникиНовыйПередНачаломИзменения(Элемент, Отказ)
	
	ТекКолонка = Элементы.СобственникиНовый.ТекущийЭлемент;
	
	Если Не ТекКолонка = Неопределено И ТекКолонка.Имя = "СобственникиНовыйДоляСобственности" Тогда
		
		Отказ = Истина;
		
		ТекСтрока = Элементы.СобственникиНовый.ТекущиеДанные;
		
		// Вызов формы для редактирования доли собственности.
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Заголовок",       "Доля собственности");
		СтруктураПараметров.Вставить("Объект",          ТекСтрока.Собственник);
		СтруктураПараметров.Вставить("ДоляЧислитель",   ТекСтрока.ДоляСобственникаЧислитель);
		СтруктураПараметров.Вставить("ДоляЗнаменатель", ТекСтрока.ДоляСобственникаЗнаменатель);
		
		ОткрытьФорму("ОбщаяФорма.УПЖКХ_УстановкаДоли", СтруктураПараметров,,,,, Новый ОписаниеОповещения("ОбработатьЗавершениеВводаДолиСобственности", ЭтотОбъект, Новый Структура("ТекСтрока", ТекСтрока)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура заполняет реквизиты числителя и знаменателя доли собственности табличных частей.
//
Процедура ОбработатьЗавершениеВводаДолиСобственности(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	ТекСтрока = ДополнительныеПараметры.ТекСтрока;
	
	Если НЕ ВыбранноеЗначение = Неопределено Тогда
		Если НЕ ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			Возврат;
		КонецЕсли;
		ТекСтрока.ДоляСобственникаЧислитель   = ВыбранноеЗначение.ДоляЧислитель;
		ТекСтрока.ДоляСобственникаЗнаменатель = ВыбранноеЗначение.ДоляЗнаменатель;
		ТекСтрока.ДоляСобственности = 
			УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеДроби(
				ТекСтрока.ДоляСобственникаЧислитель, ТекСтрока.ДоляСобственникаЗнаменатель);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьЗавершениеВводаДолиСобственности()

&НаКлиенте
// Обработчик события "ПередУдалением" поля "СобственникиНовый".
Процедура СобственниОбработатьЗавершениеВводаДолиСобственностикиНовыйПередУдалением(Элемент, Отказ)
	
	Если Объект.СобственникиНовый.Количество() = 1 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////
// Закладка "Выбор собственников"

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" списка собственников.
Процедура СобственникиЛСПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если ВидСобственности = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыСобственности.Частная") Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередУдалением" списка собственников.
Процедура СобственникиЛСПередУдалением(Элемент, Отказ)
	
	Если ВидСобственности = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыСобственности.Частная") Или Объект.Собственники.Количество() = 1 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ОтветственныйВладелец".
//
Процедура ПолеОтветственныйВладелецПриИзменении(Элемент)
	
	ИзменилисьДанныеОСобственниках = Истина;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ПереместитьВверх".
//
Процедура КомандаСобственникиЛСПереместитьВверх(Команда)
	
	ПереместитьСобственника(-1);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ПереместитьВниз".
//
Процедура КомандаСобственникиЛСПереместитьВниз(Команда)
	
	ПереместитьСобственника(1);
	
КонецПроцедуры

&НаКлиенте
// Перемещает строку с собственником л/с в определенном направлении.
//
Процедура ПереместитьСобственника(Направление)
	
	ТекСтрока = Объект.Собственники.НайтиПоИдентификатору(Элементы.СобственникиЛС.ТекущаяСтрока);
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИндексТекущейСтроки = ТекСтрока.НомерСтроки - 1;
	
	Если ИндексТекущейСтроки + Направление < 0
		Или ИндексТекущейСтроки + Направление >= Объект.Собственники.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Собственники.Сдвинуть(ИндексТекущейСтроки, Направление);
	Элементы.СобственникиЛС.Обновить();
	
КонецПроцедуры // ПереместитьСобственника()

&НаКлиенте
// Обработчик события "Выбор" поля "Главная".
Процедура ПроживающиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекКолонка = Элемент.ТекущийЭлемент;
	
	Если ТекКолонка.Имя = "ПроживающиеСведенияОСобственности" Тогда
		ИзменитьСведенияОСобственности();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Собственник".
Процедура ПроживающиеСобственникПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.Проживающие.ТекущиеДанные;
	
	ТекущаяСтрока.СведенияОСобственности = ПолучитьПредставлениеСведенийОСобственности(ТекущаяСтрока.Собственник,
																					   ТекущаяСтрока.ВидДокументаСобственности,
																					   ТекущаяСтрока.НомерДокументаСобственности,
																					   ТекущаяСтрока.ДатаДокументаСобственности);
	
КонецПроцедуры

//////////////////////////////////////
// Закладка "Лицевой счет"

&НаКлиенте
// Обработчик события "ПриИзменении" поля "СоздатьКонтрагентаАвтоматически".
Процедура СоздатьКонтрагентаАвтоматическиПриИзменении(Элемент)
	
	УстановитьВидимостьДанныхОКонтрагенте();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередНачаломИзменения" поля "ДоговорДляВзаиморасчетов".
Процедура ДоговорДляВзаиморасчетовПриИзменении(Элемент)
	
	Если Объект.КонтрагентДляВзаиморасчетов.Пустая() Тогда
		Объект.КонтрагентДляВзаиморасчетов = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.ДоговорДляВзаиморасчетов, "Владелец");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "При изменении" флага "Коммунальная квартира".
Процедура КоммунальнаяКвартираПриИзменении(Элемент)
	
	Если КоммунальнаяКвартира = Ложь И ДоляРассчитанаПоКомнатам Тогда
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаКоммунальнаяКвартираПриИзменении", ЭтаФорма),
					   "Перерассчитать долю собственности л/с?",
					   РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры // КоммунальнаяКвартираПриИзменении()

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "КоммунальнаяКвартираПриИзменении()".
Процедура ОбработатьРезультатВопросаКоммунальнаяКвартираПриИзменении(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		КоммунальнаяКвартира = Истина;
		Возврат;
	КонецЕсли;
	
	РассчитатьДолюСобственности();
	ДоляРассчитанаПоКомнатам = Ложь;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры // ОбработатьРезультатВопросаКоммунальнаяКвартираПриИзменении()

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" поля "КомнатыЛС".
Процедура КомнатыЛСПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередУдалением" поля "КомнатыЛС".
Процедура КомнатыЛСПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" поля "КомнатыПомещения".
Процедура КомнатыПомещенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередУдалением" поля "КомнатыПомещения".
Процедура КомнатыПомещенияПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

//////////////////////////////////////
// Закладка "Жильцы"

&НаКлиенте
// Обработчик события "ПриАктивизацииСтроки" поля "Проживающие".
Процедура ПроживающиеПриАктивизацииСтроки(Элемент)
	
	Если НЕ ПодробныйВариантУчетаСобственников И НЕ ФлагСобственникКонтрагент Тогда
		
		ПроверитьПометкуКнопкиУстановкиОтветственного(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" поля "Проживающие".
Процедура ПроживающиеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	// Если помещение нежилое, то отказываем в добавлении жильца, если:
	// 1. Ответственным указывается контрагент.
	// 2. Ответственным указывается жилец, но при этом он уже есть в ТЧ жильцов.
	Если Не ПомещениеЯвляетсяЖилым(Объект.Помещение) Тогда
		
		Если ФлагСобственникКонтрагент Тогда
			Возврат;
		ИначеЕсли Объект.Проживающие.Количество() > 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для нежилых помещений можно указать только ответственного собственника!");
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	НоваяСтрока = Объект.Проживающие.Добавить();
	Если Копирование Тогда
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элемент.ТекущиеДанные);
	КонецЕсли;
	Элемент.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	
	ВызватьМастерВводаПроживающего(НоваяСтрока, "ПередНачаломДобавления");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередНачаломИзменения" поля "Проживающие".
Процедура ПроживающиеПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущийЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя = "ПроживающиеФИО" Тогда
		Отказ = Истина;
		
		ДанныеОПроживающем = Элемент.ТекущиеДанные;
		ВызватьМастерВводаПроживающего(ДанныеОПроживающем);
		
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ПроживающиеСобственник" Тогда
		
		Если ПодробныйВариантУчетаСобственников Тогда
			Отказ = Истина;
		Иначе
			Если Элемент.ТекущиеДанные.ВладелецЕдинственногоЖилья Тогда
				Элемент.ТекущиеДанные.ВладелецЕдинственногоЖилья = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ПроживающиеСтепеньРодства" Тогда
		
		Если НЕ ЗначениеЗаполнено(мОтветственныйВладелец) Тогда
			ПоказатьПредупреждение(Неопределено, "Для установки степени родства необходимо предварительно установить ответственного собственника!");
			Отказ = Истина;
		ИначеЕсли Элемент.ТекущиеДанные.ФИО = Строка(мОтветственныйВладелец) Тогда
			Отказ = Истина;
		КонецЕсли;
		
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ПроживающиеДоляСобственности" Тогда
		
		Отказ = Истина;
		
		ТекСтрока = Элементы.Проживающие.ТекущиеДанные;
		
		// Вызов формы для редактирования доли собственности.
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Заголовок",       "Доля собственности");
		СтруктураПараметров.Вставить("Объект",          ТекСтрока.ФИО);
		СтруктураПараметров.Вставить("ДоляЧислитель",   ТекСтрока.ДоляСобственникаЧислитель);
		СтруктураПараметров.Вставить("ДоляЗнаменатель", ТекСтрока.ДоляСобственникаЗнаменатель);
		
		ОткрытьФорму("ОбщаяФорма.УПЖКХ_УстановкаДоли", СтруктураПараметров,,,,, Новый ОписаниеОповещения("ОбработатьЗавершениеВводаДолиСобственности", ЭтотОбъект, Новый Структура("ТекСтрока", ТекСтрока)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ПроживающиеВладелецЕдинственногоЖилья" Тогда
		
		Если НЕ Элемент.ТекущиеДанные.Собственник Тогда
			Если ПодробныйВариантУчетаСобственников Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Жилец не является собственником!", Отказ);
			Иначе
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Сначала установите флажок ""Собственник""!", Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередУдалением" поля "Проживающие".
Процедура ПроживающиеПередУдалением(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные.Собственник Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ФлагСобственникКонтрагент".
Процедура ФлагСобственникКонтрагентПриИзменении(Элемент)
	
	Если НЕ ПомещениеЯвляетсяЖилым(Объект.Помещение) И ФлагСобственникКонтрагент И Объект.Проживающие.Количество() > 0 Тогда
		
		ТекстВопроса = "Для нежилого помещения не может быть задан список жильцов, если ответственным собственником лицевого счета указан контрагент.
						|Таблица жильцов будет очищена. Продолжить?";
		ОповещениеОбОтветеПользователя = Новый ОписаниеОповещения("ОбработатьОтветПользователяОбОчисткеТаблицыЖильцов", ЭтотОбъект);
		
		ПоказатьВопрос(ОповещениеОбОтветеПользователя, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		УстановитьВидимостьДополнительныхПолейКонтрагента(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура обрабатывает ответ пользователя на вопрос об очистке таблицы жильцов.
//
Процедура ОбработатьОтветПользователяОбОчисткеТаблицыЖильцов(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Проживающие.Очистить();
		УстановитьВидимостьДополнительныхПолейКонтрагента(ЭтотОбъект);
	Иначе
		ФлагСобственникКонтрагент = Не ФлагСобственникКонтрагент;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьОтветПользователяОбОчисткеТаблицыЖильцов()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Зарегистрированный",
// при наличии флага в поле устанавливает в соответствующем поле "Дата регистрации"
// текущую дату открытия лицевого счета.
Процедура ПроживающиеЗарегистрированныйПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Проживающие.ТекущиеДанные;
	Если СтрокаТабличнойЧасти.Зарегистрированный Тогда
		СтрокаТабличнойЧасти.ДатаРегистрации = Объект.Дата;
	Иначе
		СтрокаТабличнойЧасти.ДатаРегистрации = Дата(1,1,1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Проживающий",
// при наличии флага в поле устанавливает в соответствующем поле "Дата заселения"
// текущую дату открытия лицевого счета.
Процедура ПроживающиеПроживающийПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Проживающие.ТекущиеДанные;
	Если СтрокаТабличнойЧасти.Проживающий Тогда
		СтрокаТабличнойЧасти.ДатаЗаселения = Объект.Дата;
	Иначе
		СтрокаТабличнойЧасти.ДатаЗаселения = Дата(1,1,1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Дата регистрации",
// при установке пустого значения в поле "Дата регистрации" заполняет данное поле
// текущей датой открытия лицевого счета.
Процедура ПроживающиеДатаРегистрацииПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Проживающие.ТекущиеДанные;
	Если СтрокаТабличнойЧасти.ДатаРегистрации = Дата(1,1,1) Тогда
		СтрокаТабличнойЧасти.ДатаРегистрации = Объект.Дата;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Дата заселения",
// при установке пустого значения в поле "Дата заселения" заполняет данное поле
// текущей датой открытия лицевого счета.
Процедура ПроживающиеДатаЗаселенияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Проживающие.ТекущиеДанные;
	Если СтрокаТабличнойЧасти.ДатаЗаселения = Дата(1,1,1) Тогда
		СтрокаТабличнойЧасти.ДатаЗаселения = Объект.Дата;
	КонецЕсли;
	
КонецПроцедуры


//////////////////////////////////////
// Закладка "Услуги"

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля "ШаблонЛС".
Процедура ШаблонЛСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПредыдущееЗначение = Объект.ШаблонЛС;
	Если Объект.ТаблицаУслуг.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		
		ТекстВопроса = "Таблица услуг будет очищена! Продолжить?";
		ДопПараметры = Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение);
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаШаблонЛСОбработкаВыбора", ЭтаФорма, ДопПараметры),
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ВыполнитьКопированиеПараметровИзЛС(ВыбранноеЗначение);
	
КонецПроцедуры // ШаблонЛСОбработкаВыбора()

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "ШаблонЛСОбработкаВыбора()".
Процедура ОбработатьРезультатВопросаШаблонЛСОбработкаВыбора(РезультатВопроса, ДополнительныеПарметры) Экспорт
	
	ВыбранноеЗначение = ДополнительныеПарметры.ВыбранноеЗначение;
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		Объект.ШаблонЛС = ВыбранноеЗначение;
		ВыполнитьКопированиеПараметровИзЛС(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаШаблонЛСОбработкаВыбора()

&НаКлиенте
// Обработчик события "ПриОкончанииРедактирования" табличного поля "ТаблицаУслуг".
//
Процедура ТаблицаУслугПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		
		// Если услуга в строке не выбрана - удаляем эту строку.
		Если Элемент.ТекущиеДанные.Услуга.Пустая() Тогда
			Объект.ТаблицаУслуг.Удалить(Элемент.ТекущиеДанные.НомерСтроки - 1);
		Иначе
			// Если организация не выбрана - устанавливаем значение по умолчанию.
			Если Элемент.ТекущиеДанные.Организация.Пустая() Тогда
				Элемент.ТекущиеДанные.Организация = Объект.Организация;
			КонецЕсли;
			
			// Призводим проверку, не является ли текущая строка дублирующей.
			Отбор = Новый Структура("Услуга, Организация", Элемент.ТекущиеДанные.Услуга, Элемент.ТекущиеДанные.Организация);
			
			ДублирующиеСтроки = Объект.ТаблицаУслуг.НайтиСтроки(Отбор);
			// Т.к. проверка происходит при окончании редактирования, то текущая строка у нас уже записана,
			// поэтому в результате отбора получаем минимум одно значение.
			Если ДублирующиеСтроки.Количество() > 1 Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Добавление дублирующих строк не допустимо!");
				Объект.ТаблицаУслуг.Удалить(Элемент.ТекущиеДанные.НомерСтроки - 1);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ТаблицаУслугПриОкончанииРедактирования()

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "Услуга" табличного поля "ТаблицаУслуг".
Процедура ТаблицаУслугУслугаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Список уже выбранных услуг.
	СписокВыбранныхУслуг = Новый СписокЗначений;
	Для Каждого СтрокаВыбраннойУслуги Из Объект.ТаблицаУслуг Цикл
		СписокВыбранныхУслуг.Добавить(СтрокаВыбраннойУслуги.Услуга);
	КонецЦикла;
	
	Форма = ПолучитьФорму("Справочник.КВП_Услуги.ФормаВыбора", Новый Структура("ТекущаяСтрока", Элементы.ТаблицаУслуг.ТекущиеДанные.Услуга), Элемент);                                        
	
	// Устанавливаем отбор на справочник "Услуги".
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Форма.Список.КомпоновщикНастроек.Настройки.Отбор, "Ссылка", СписокВыбранныхУслуг,
															ВидСравненияКомпоновкиДанных.НеВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
	Форма.Открыть();
	
КонецПроцедуры // ТаблицаУслугУслугаНачалоВыбора()

//////////////////////////////////////
// Закладка "Окончание"

&НаКлиенте
// Обработчик нажатия ссылки на документ назначения услуг.
Процедура НадписьОткрытьДокументНажатие(Элемент)
	
	СтрокиСсылок = ТаблицаСсылокНазначенияУслуг.НайтиСтроки(Новый Структура("ИмяЭлемента", Элемент.Имя));
	Если СтрокиСсылок.Количество() > 0 Тогда
		
		ФормаДокумента = ПолучитьФорму("Документ.КВП_УправлениеУслугами.ФормаОбъекта",
										Новый Структура("Ключ", СтрокиСсылок[0].Ссылка), ЭтотОбъект);
		ФормаДокумента.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

// Поставляемая часть

&НаКлиенте
// Обработчик команды "КомандаДалее".
Процедура КомандаДалее(Команда)
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаНазад".
Процедура КомандаНазад(Команда)
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаГотово".
Процедура КомандаГотово(Команда)
	
	ЗакрытьФормуБезусловно = Истина;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаОтмена".
Процедура КомандаОтмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ОбновитьДанныеОКомнатах".
Процедура ОбновитьДанныеОКомнатах(Команда)
	
	// Обновляем список комнат помещения.
	ОбновитьСписокКомнатПомещения();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ОбновитьДанныеОКомнатах".
Процедура РедактироватьКомнаты(Команда)
	
	ОткрытьФорму("Справочник.УПЖКХ_Помещения.Форма.ФормаСписка",
				Новый Структура("ПараметрВладелец, ПараметрРодитель", Объект.Здание, Объект.Помещение),
				ЭтаФорма, "СписокКомнат",,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Переопределяемая часть

//////////////////////////////////////
// Закладка "Регистрация собственности"

&НаКлиенте
// Обрабочик команды "КнопкаПереместитьВлево".
Процедура КомандаПереместитьВлевоСобственник(Команда)
	
	ТекСтрока = Элементы.СобственникиПомещения.ТекущаяСтрока;
	ТекущиеДанные = Элементы.СобственникиПомещения.ТекущиеДанные;
	Если Не ТекСтрока = Неопределено Тогда
		НовСтр = Объект.Собственники.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, ТекущиеДанные);
		СобственникиПомещения.Удалить(СобственникиПомещения.Индекс(СобственникиПомещения.НайтиПоИдентификатору(ТекСтрока)));
		Элементы.СобственникиЛС.ТекущаяСтрока = НовСтр.ПолучитьИдентификатор();
	КонецЕсли;
	
	ИзменилисьДанныеОСобственниках = Истина;
	
КонецПроцедуры

&НаКлиенте
// Обрабочик команды "КнопкаПереместитьВлевоВсе".
Процедура КомандаПереместитьВлевоВсеСобственник(Команда)
	
	Для Каждого СтрИсхТаблицы Из СобственникиПомещения Цикл 
		НовСтр = Объект.Собственники.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, СтрИсхТаблицы);
		Элементы.СобственникиЛС.ТекущаяСтрока = НовСтр.ПолучитьИдентификатор();
	КонецЦикла;
	
	СобственникиПомещения.Очистить();
	
	ИзменилисьДанныеОСобственниках = Истина;
	
КонецПроцедуры

&НаКлиенте
// Обрабочик команды "КнопкаПереместитьВправо".
Процедура КомандаПереместитьВправоСобственник(Команда)
	
	ТекСтрока = Элементы.СобственникиЛС.ТекущаяСтрока;
	ТекущиеДанные = Элементы.СобственникиЛС.ТекущиеДанные;
	Если Не ТекСтрока = Неопределено Тогда
		НовСтр = СобственникиПомещения.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, ТекущиеДанные);
		Объект.Собственники.Удалить(Объект.Собственники.Индекс(Объект.Собственники.НайтиПоИдентификатору(ТекСтрока)));
		Элементы.СобственникиПомещения.ТекущаяСтрока = НовСтр.ПолучитьИдентификатор();
	КонецЕсли;
	
	ИзменилисьДанныеОСобственниках = Истина;
	
КонецПроцедуры

&НаКлиенте
// Обрабочик команды "КнопкаПереместитьВправоВсе".
Процедура КомандаПереместитьВправоВсеСобственник(Команда)
	
	Для Каждого СтрИсхТаблицы Из Объект.Собственники Цикл 
		НовСтр = СобственникиПомещения.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, СтрИсхТаблицы);
		Элементы.СобственникиПомещения.ТекущаяСтрока = НовСтр.ПолучитьИдентификатор();
	КонецЦикла;
	
	Объект.Собственники.Очистить();
	
	ИзменилисьДанныеОСобственниках = Истина;
	
КонецПроцедуры

//////////////////////////////////////
// Закладка "Лицевой счет"

&НаКлиенте
// Обработчик команды "ЗаполнитьИдентификатор".
Процедура ЗаполнитьИдентификатор(Команда)
	
	Объект.ИдентификаторЛС = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьИдентификаторЛС(, Объект.ИмяЛицевогоСчета,, Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаСоздатьДоговорКонтрагента".
Процедура КомандаСоздатьДоговорКонтрагента(Команда)
	
	Если НЕ ТипЗнч(Объект.КонтрагентДляВзаиморасчетов) = Тип("СправочникСсылка.Контрагенты") Или Объект.КонтрагентДляВзаиморасчетов.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указан контрагент - владелец договора!");
		Возврат;
	КонецЕсли;
	
	НаименованиеДоговора = "Договор на обслуживание " + Объект.ИмяЛицевогоСчета;
	ДоговорКонтрагента = НайтиДоговорСКонтрагентом(Объект.КонтрагентДляВзаиморасчетов, Объект.Организация, НаименованиеДоговора);
		
	Если ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка") Тогда
		
		Объект.ДоговорДляВзаиморасчетов = СоздатьНовыйДоговор(Объект.КонтрагентДляВзаиморасчетов, Объект.Организация, Объект.ИмяЛицевогоСчета);
		
	Иначе
		
		Если Объект.ДоговорДляВзаиморасчетов = ДоговорКонтрагента Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("С контрагентом - " + Объект.КонтрагентДляВзаиморасчетов +" договор с наименованием """ + НаименованиеДоговора + """ уже создан");
			
		Иначе
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаЗаполненияПоляДоговор", ЭтаФорма, ДоговорКонтрагента),
							НаименованиеДоговора + " уже существует. Выбрать его?", РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатВопросаЗаполненияПоляДоговор(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ДоговорДляВзаиморасчетов = ДополнительныеПараметры;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаРассчитатьДолюЛС".
Процедура КомандаРассчитатьДолюЛС(Команда)
	
	Если КоммунальнаяКвартира Тогда
		
		Если Объект.Комнаты.Количество() = 0 Тогда
			ПоказатьПредупреждение(Неопределено, "Не выбраны комнаты, привязанные к лицевому счету!");
			Возврат;
		КонецЕсли;
		
		РассчитатьДолюКоммунальнойКвартиры();
		ДоляРассчитанаПоКомнатам = Истина;
		
	Иначе
		
		// Вызов формы для редактирования доли собственности.
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Заголовок", мОтветственныйВладелец);
		Если ЗначениеЗаполнено(ДоляСобственностиЛС) Тогда
			ДоляЧислитель = ?(ПустаяСтрока(Лев(ДоляСобственностиЛС, Найти(ДоляСобственностиЛС, "/") - 1)), 1,
			                  Лев(ДоляСобственностиЛС, Найти(ДоляСобственностиЛС, "/") - 1));
		КонецЕсли;
		
		СтруктураПараметров.Вставить("Заголовок",       "Доля собственности");
		СтруктураПараметров.Вставить("ДоляЧислитель",   ДоляЧислитель);
		СтруктураПараметров.Вставить("ДоляЗнаменатель", Сред(ДоляСобственностиЛС,
										Найти(ДоляСобственностиЛС, "/") + 1));
		
		ОткрытьФорму("ОбщаяФорма.УПЖКХ_УстановкаДоли", СтруктураПараметров,,,,, Новый ОписаниеОповещения("ОбработатьЗавершениеРасчетДолиЛС", ЭтотОбъект, Новый Структура("ДанныеОбъект", Объект)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура обновляет доли собсвтенности л/с.
//
Процедура ОбработатьЗавершениеРасчетДолиЛС(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	ДанныеОбъект = ДополнительныеПараметры.ДанныеОбъект;
	
	Если НЕ ВыбранноеЗначение = Неопределено Тогда
		Если НЕ ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			Возврат;
		КонецЕсли;
		ДоляСобственностиЛС = УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеДроби(
								ВыбранноеЗначение.ДоляЧислитель, ВыбранноеЗначение.ДоляЗнаменатель);
		ДанныеОбъект.ДоляЛСЧислитель     = ВыбранноеЗначение.ДоляЧислитель;
		ДанныеОбъект.ДоляЛСЗнаменатель   = ВыбранноеЗначение.ДоляЗнаменатель;
		//++Позолотина
		Если ЭтотОбъект.УстановитьДоли_1_1 тогда
			ДоляСобственностиЛС = 1;
			ДанныеОбъект.ДоляЛСЧислитель     = 1;
			ДанныеОбъект.ДоляЛСЗнаменатель   = 1;	
		КонецЕсли;
		//--
	КонецЕсли;
	
	Элементы.НадписьПредупреждение.Видимость = НЕ ПроверитьКорректностьУстановленныхДолейЛицевыхСчетовНаПомещении();
	
КонецПроцедуры // ОбработатьЗавершениеРасчетДолиЛС()

&НаКлиенте
// Обработчик команды "КомандаСписокДолейЛС".
Процедура КомандаСписокДолейЛС(Команда)
	
	СтруктураОтбора = новый Структура("Объект", Объект.Помещение);
	ОткрытьФорму("РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.Форма.ФормаСписка", Новый Структура("Отбор", СтруктураОтбора), ЭтаФорма,,,, Новый ОписаниеОповещения("ОбработатьЗавершениеОткрытияСпискаДолейЛС", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
// Процедура проверяет корректность установленных долей л/с и управляет видимостью сообщения для пользователя.
//
Процедура ОбработатьЗавершениеОткрытияСпискаДолейЛС(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Элементы.НадписьПредупреждение.Видимость = НЕ ПроверитьКорректностьУстановленныхДолейЛицевыхСчетовНаПомещении();
	
КонецПроцедуры // ОбработатьЗавершениеРасчетДолиЛС()

&НаКлиенте
// Обработчик команды "КомандаПереместитьВлевоВсеПомещение".
Процедура КомандаПереместитьВлевоВсеПомещение(Команда)
	
	Для Каждого СтрИсхТаблицы Из КомнатыПомещения Цикл 
		НовСтр = Объект.Комнаты.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, СтрИсхТаблицы);
		Элементы.КомнатыЛС.ТекущаяСтрока = НовСтр.ПолучитьИдентификатор();
	КонецЦикла;
	
	КомнатыПомещения.Очистить();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаПереместитьВлевоПомещение".
Процедура КомандаПереместитьВлевоПомещение(Команда)
	
	ТекСтрока = Элементы.КомнатыПомещения.ТекущаяСтрока;
	ТекущиеДанные = Элементы.КомнатыПомещения.ТекущиеДанные;
	Если Не ТекСтрока = Неопределено Тогда
		НовСтр = Объект.Комнаты.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, ТекущиеДанные);
		КомнатыПомещения.Удалить(КомнатыПомещения.Индекс(КомнатыПомещения.НайтиПоИдентификатору(ТекСтрока)));
		Элементы.КомнатыЛС.ТекущаяСтрока = НовСтр.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаПереместитьВправоВсеПомещение".
Процедура КомандаПереместитьВправоВсеПомещение(Команда)
	
	Для Каждого СтрИсхТаблицы Из Объект.Комнаты Цикл 
		НовСтр = КомнатыПомещения.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, СтрИсхТаблицы);
		Элементы.КомнатыПомещения.ТекущаяСтрока = НовСтр.ПолучитьИдентификатор();
	КонецЦикла;
	
	Объект.Комнаты.Очистить();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаПереместитьВправоПомещение".
Процедура КомандаПереместитьВправоПомещение(Команда)
	
	ТекСтрока = Элементы.КомнатыЛС.ТекущаяСтрока;
	ТекущиеДанные = Элементы.КомнатыЛС.ТекущиеДанные;
	Если Не ТекСтрока = Неопределено Тогда
		НовСтр = КомнатыПомещения.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, ТекущиеДанные);
		Объект.Комнаты.Удалить(Объект.Комнаты.Индекс(Объект.Комнаты.НайтиПоИдентификатору(ТекСтрока)));
		Элементы.КомнатыПомещения.ТекущаяСтрока = НовСтр.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////
// Закладка "Жильцы"

&НаКлиенте
// Обработчик команды "УстановитьОтветственногоЖильца".
Процедура УстановитьОтветственногоЖильца(Команда)
	
	Если Элементы.Проживающие.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Элементы.Проживающие.ТекущиеДанные.ФИО) Тогда
		Возврат;
	КонецЕсли;

	Если мОтветственныйВладелец <> Элементы.Проживающие.ТекущиеДанные.ФИО Тогда
		мОтветственныйВладелец = Элементы.Проживающие.ТекущиеДанные.ФИО;
		Для Каждого СтрокаЖильца Из Объект.Проживающие Цикл
			СтрокаЖильца.СтепеньРодства = ПредопределенноеЗначение("Справочник.КВП_ТипыРодственныхСвязей.ПустаяСсылка");
		КонецЦикла;
	КонецЕсли;
	
	ПроверитьПометкуКнопкиУстановкиОтветственного(ЭтотОбъект);
	Элементы.Проживающие.Обновить();
	
КонецПроцедуры

//////////////////////////////////////
// Закладка "Услуги"

&НаКлиенте
// Обработчик команды "ОбновитьУслуги".
Процедура ОбновитьУслуги(Команда)
	
	Если ЗначениеЗаполнено(Объект.ШаблонЛС) Тогда
		ВыполнитьКопированиеПараметровИзЛС(Объект.ШаблонЛС);
	Иначе
		ПоказатьПредупреждение(Неопределено, "Не выбран шаблон лицевого счета!");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Поставляемая часть

&НаКлиенте
// Процедура изменяет порядковый номер перехода.
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	
	ОчиститьСообщения();
	
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
	
КонецПроцедуры

&НаКлиенте
// Процедура устанавливает порядковый номер перехода.
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)
	
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	
	ПорядковыйНомерПерехода = Значение;
	
	Если ПорядковыйНомерПерехода < 0 Тогда
		
		ПорядковыйНомерПерехода = 0;
		
	КонецЕсли;
	
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
	
КонецПроцедуры

&НаКлиенте
// Возникает при изменении порядкового номера перехода.
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Выполняем обработчики событий перехода
	ВыполнитьОбработчикиСобытийПерехода(ЭтоПереходДалее);
	
	// Устанавливаем отображение страниц
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(
							Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	Элементы.ПанельНавигации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыНавигации];
	Элементы.ПанельДекораций.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыДекорации];
	
	// Устанавливаем текущую кнопку по умолчанию
	КнопкаДалее = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаДалее");
	
	Если КнопкаДалее <> Неопределено Тогда
		
		КнопкаДалее.КнопкаПоУмолчанию = Истина;
		
	Иначе
		
		КнопкаГотово = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаГотово");
		
		Если КнопкаГотово <> Неопределено Тогда
			
			КнопкаГотово.КнопкаПоУмолчанию = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоПереходДалее И СтрокаПереходаТекущая.ДлительнаяОперация Тогда
		
		ПодключитьОбработчикОжидания("ВыполнитьОбработчикДлительнойОперации", 1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняет обработчики перехода.
Процедура ВыполнитьОбработчикиСобытийПерехода(Знач ЭтоПереходДалее)
	
	// Обработчики событий переходов
	Если ЭтоПереходДалее Тогда
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода-1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеДалее
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее)
			И Не СтрокаПерехода.ДлительнаяОперация Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);
			
			Отказ = Ложь;
			
			Результат = Вычислить(ИмяПроцедуры);
			
			Если Отказ Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода+1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеНазад
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад)
			И Не СтрокаПерехода.ДлительнаяОперация Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеНазад);
			
			Отказ = Ложь;
			
			Результат = Вычислить(ИмяПроцедуры);
			
			Если Отказ Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(
							Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Если СтрокаПереходаТекущая.ДлительнаяОперация И Не ЭтоПереходДалее Тогда
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
		Возврат;
	КонецЕсли;
	
	// обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);
		
		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;
		
		Результат = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			
			Возврат;
			
		ИначеЕсли ПропуститьСтраницу Тогда
			
			Если ЭтоПереходДалее Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				
				Возврат;
				
			Иначе
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняет обработчики длительной операции.
Процедура ВыполнитьОбработчикДлительнойОперации()
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(
							Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// Обработчик ОбработкаДлительнойОперации.
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПерейтиДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации);
		
		Отказ = Ложь;
		ПерейтиДалее = Истина;
		
		Результат = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			
			Возврат;
			
		ИначеЕсли ПерейтиДалее Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура добавляет новую строку в таблицу переходов.
Процедура ТаблицаПереходовНоваяСтрока(ПорядковыйНомерПерехода,
									ИмяОсновнойСтраницы,
									ИмяСтраницыНавигации,
									ИмяСтраницыДекорации = "",
									ИмяОбработчикаПриОткрытии = "",
									ИмяОбработчикаПриПереходеДалее = "",
									ИмяОбработчикаПриПереходеНазад = "",
									ДлительнаяОперация = Ложь,
									ИмяОбработчикаДлительнойОперации = "")
	
	НоваяСтрока = ТаблицаПереходов.Добавить();
	
	НоваяСтрока.ПорядковыйНомерПерехода = ПорядковыйНомерПерехода;
	НоваяСтрока.ИмяОсновнойСтраницы     = ИмяОсновнойСтраницы;
	НоваяСтрока.ИмяСтраницыДекорации    = ИмяСтраницыДекорации;
	НоваяСтрока.ИмяСтраницыНавигации    = ИмяСтраницыНавигации;
	
	НоваяСтрока.ИмяОбработчикаПриПереходеДалее = ИмяОбработчикаПриПереходеДалее;
	НоваяСтрока.ИмяОбработчикаПриПереходеНазад = ИмяОбработчикаПриПереходеНазад;
	НоваяСтрока.ИмяОбработчикаПриОткрытии      = ИмяОбработчикаПриОткрытии;
	
	НоваяСтрока.ДлительнаяОперация = ДлительнаяОперация;
	НоваяСтрока.ИмяОбработчикаДлительнойОперации = ИмяОбработчикаДлительнойОперации;
	
КонецПроцедуры

&НаКлиенте
// Функция возвращает кнопку формы по имени команды.
Функция ПолучитьКнопкуФормыПоИмениКоманды(ЭлементФормы, ИмяКоманды)
	
	Для Каждого Элемент Из ЭлементФормы.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			
			ЭлементФормыПоИмениКоманды = ПолучитьКнопкуФормыПоИмениКоманды(Элемент, ИмяКоманды);
			
			Если ЭлементФормыПоИмениКоманды <> Неопределено Тогда
				
				Возврат ЭлементФормыПоИмениКоманды;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("КнопкаФормы")
			И Найти(Элемент.ИмяКоманды, ИмяКоманды) > 0 Тогда
			
			Возврат Элемент;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

// Проверяет наличие договоров с конрагентом, если есть, то возращает пустую ссылку,
// если нет, то создает новый договор, возвращает ссылку на этот договор.
&НаСервереБезКонтекста
Функция УстановитьДоговорСКонтрагентом(Контрагент, Организация, ИмяЛицевогоСчета)
	
	Если УПЖКХ_ТиповыеМетодыСервер.УстановитьДоговорКонтрагента(Справочники.ДоговорыКонтрагентов.ПустаяСсылка(), 
																	Контрагент,
																	Организация,
																	Перечисления.ВидыДоговоровКонтрагентов.СПокупателем) Тогда
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Иначе
		Возврат СоздатьНовыйДоговор(Контрагент, Организация, ИмяЛицевогоСчета);
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
// Проверяет есть ли договор контрагента с наименованием ("Договор на обслуживание № Лицевого счета"), если есть,
// то возвращает ссылку на этот договор, если нет, то возвращает пустую ссылку.
Функция НайтиДоговорСКонтрагентом(Контрагент, Организация, НаименованиеДоговора)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
					|	ДоговорыКонтрагентов.Ссылка КАК Договор
					|ИЗ
					|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
					|ГДЕ
					|	ДоговорыКонтрагентов.Наименование = &Наименование
					|	И ДоговорыКонтрагентов.Организация = &Организация
					|	И ДоговорыКонтрагентов.Владелец = &Контрагент
					|	И ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПокупателем)";
	
	Запрос.УстановитьПараметр("Наименование", НаименованиеДоговора);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.Договор;
		
	Иначе
		
		Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		
	КонецЕсли;
	
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Переопределяемая часть - Обработчики событий переходов

&НаКлиенте
// Обработчик при переходе далее со страницы "ДанныеОПомещении".
Функция Подключаемый_СтраницаДанныеОПомещении_ПриПереходеДалее(Отказ)
	
	// ПРОВЕРКА НА КОРРЕКТНОЕ ЗАПОЛНЕНИЕ ПОЛЕЙ
	ДанныеЗаполненыКорректно(Отказ);
	
КонецФункции

&НаКлиенте
// Обработчик при переходе далее со страницы "ДанныеОПомещении".
Функция Подключаемый_СтраницаРегистрацияСобственности_ПриПереходеДалее(Отказ)
	
	// ПРОВЕРКА НА КОРРЕКТНОЕ ЗАПОЛНЕНИЕ ПОЛЕЙ
	ДанныеЗаполненыКорректно(Отказ);
	
	Если Не Отказ Тогда
		ОбновитьДанныеОСобственности();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
// Обработчик при переходе далее со страницы "ДанныеОПомещении".
Функция Подключаемый_СтраницаВыборСобственников_ПриПереходеДалее(Отказ)
	
	// ПРОВЕРКА НА КОРРЕКТНОЕ ЗАПОЛНЕНИЕ ПОЛЕЙ
	ДанныеЗаполненыКорректно(Отказ);
	
	Если Не Отказ Тогда
		
		// Устанавливаем номер лицевого счета.
		Если ПустаяСтрока(Объект.ИмяЛицевогоСчета) Тогда
			УстановкаНомераЛицевогоСчета();
		КонецЕсли;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаПодключаемый_СтраницаВыборСобственников_ПриПереходеДалее", ЭтаФорма),
					   "Определить группу для лицевого счета?",
					   РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецФункции // Подключаемый_СтраницаВыборСобственников_ПриПереходеДалее()

&НаКлиенте
// Обработчик результата вопроса, вызванного в функции "Подключаемый_СтраницаВыборСобственников_ПриПереходеДалее()".
Процедура ОбработатьРезультатВопросаПодключаемый_СтраницаВыборСобственников_ПриПереходеДалее(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		НайтиГруппуЛС(Ложь);
	КонецЕсли;
	
	Подключаемый_СтраницаВыборСобственников_ПриПереходеДалееПродолжение();
	
КонецПроцедуры // ОбработатьРезультатВопросаПодключаемый_СтраницаВыборСобственников_ПриПереходеДалее()

&НаКлиенте
// Продолжение процедуры "Подключаемый_СтраницаВыборСобственников_ПриПереходеДалее()".
Процедура Подключаемый_СтраницаВыборСобственников_ПриПереходеДалееПродолжение()
	
	// Считаем долю.
	РассчитатьДолюСобственности();
	
	// Устанавливаем ответственного владельца.
	Если НЕ мОтветственныйВладелец = Объект.Собственники[0].Собственник Тогда
		мОтветственныйВладелец = Объект.Собственники[0].Собственник;
		
		УстановитьВидимостьИЗаполненностьПанелиКонтрагента();
	КонецЕсли;
	
	// Обновляем информацию о проживающих.
	Если ИзменилисьДанныеОСобственниках Тогда
		ОбновитьИнформациюОЖильцах();
	КонецЕсли;
	
КонецПроцедуры // Подключаемый_СтраницаВыборСобственников_ПриПереходеДалееПродолжение()

&НаКлиенте
// Обработчик при переходе далее со страницы "ДанныеОПомещении".
Функция Подключаемый_СтраницаЛицевойСчет_ПриПереходеДалее(Отказ)
	
	// ПРОВЕРКА НА КОРРЕКТНОЕ ЗАПОЛНЕНИЕ ПОЛЕЙ
	ДанныеЗаполненыКорректно(Отказ);
	
	Если Не Объект.ШаблонЛС.Пустая() Тогда
		ВыполнитьКопированиеПараметровИзЛС(Объект.ШаблонЛС);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
// Обработчик при переходе далее со страницы "ДанныеОПомещении".
Функция Подключаемый_СтраницаЖильцы_ПриПереходеДалее(Отказ)
	
	Если НЕ ПодробныйВариантУчетаСобственников Тогда
		
		Если ФлагСобственникКонтрагент Тогда
			мОтветственныйВладелец = Объект.КонтрагентОтветственныйСобственник;
		КонецЕсли;
		
		// ПРОВЕРКА НА КОРРЕКТНОЕ ЗАПОЛНЕНИЕ ПОЛЕЙ
		ДанныеЗаполненыКорректно(Отказ);
		
		Если Отказ Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		// Устанавливаем номер лицевого счета.
		
		Если НЕ ЗначениеЗаполнено(Объект.ИмяЛицевогоСчета) Тогда
			УстановкаНомераЛицевогоСчета();
		КонецЕсли;
		НайтиГруппуЛС(Ложь);
		
		УстановитьВидимостьИЗаполненностьПанелиКонтрагента();
		
		// Считаем долю.
		РассчитатьДолюСобственности();
		
		Если ФлагСобственникКонтрагент Тогда
			Элементы.ПанельКонтрагентДляВзаиморасчетов.ТекущаяСтраница = Элементы.СтраницаТекущийКонтрагент;
		Иначе
			Элементы.ПанельКонтрагентДляВзаиморасчетов.ТекущаяСтраница = Элементы.СтраницаСоздатьКонтрагента;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
// Обработчик при переходе далее со страницы "ДанныеОПомещении".
Функция Подключаемый_СтраницаЖильцы_ПриОкончании(Отказ)
	
	// ПРОВЕРКА НА КОРРЕКТНОЕ ЗАПОЛНЕНИЕ ПОЛЕЙ
	ДанныеЗаполненыКорректно(Отказ);
	
	ВыполнитьОткрытиеЛицевогоСчетаНаСервере();
	
	Оповестить("Оповещение_ОбновитьСписокЛицевыхСчетов");
	
	Модифицированность = Ложь;
	
КонецФункции

&НаКлиенте
// Обработчик при переходе далее со страницы "ДанныеОПомещении".
Функция Подключаемый_СтраницаУслуги_ПриПереходеДалее(Отказ)
	
	// ПРОВЕРКА НА КОРРЕКТНОЕ ЗАПОЛНЕНИЕ ПОЛЕЙ
	ДанныеЗаполненыКорректно(Отказ);
	
КонецФункции

&НаКлиенте
// Обработчик при переходе далее со страницы "ДанныеОПомещении".
Функция Подключаемый_СтраницаУслуги_ПриОкончании(Отказ)
	
	// ПРОВЕРКА НА КОРРЕКТНОЕ ЗАПОЛНЕНИЕ ПОЛЕЙ
	ДанныеЗаполненыКорректно(Отказ);
	
	ВыполнитьОткрытиеЛицевогоСчетаНаСервере();
	
	Оповестить("Оповещение_ОбновитьСписокЛицевыхСчетов");
	
	Модифицированность = Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Переопределяемая часть - Инициализация переходов помощника

&НаСервере
// Процедура заполнения сценария помощника.
Процедура СценарийСозданияЛицевогоСчета()
	
	ТаблицаПереходов.Очистить();
	
	Если ПодробныйВариантУчетаСобственников Тогда
		
		// Подробный алгоритм
		
		мДанныеОСобственности = ПолучитьДанныеОСобственностиПомещения(Объект.Помещение, КонецДня(Объект.Дата));
		
		// Для нежилых помещений при использовании подробного варианта учета собственности отсутствует настройка списка жильцов.
		ЭтоЖилоеПомещение = ПомещениеЯвляетсяЖилым(Объект.Помещение);
		
		Если мДанныеОСобственности.Количество() = 0 Тогда
			
			ТаблицаПереходовНоваяСтрока(0, "СтраницаДанныеОПомещении",
										"СтраницаНавигацииНачало"     , "РегистрацияСобственности", , "СтраницаДанныеОПомещении_ПриПереходеДалее");
			ТаблицаПереходовНоваяСтрока(1, "СтраницаРегистрацияСобственности",
										"СтраницаНавигацииПродолжение", "ВводСобственников", ,		"СтраницаРегистрацияСобственности_ПриПереходеДалее");
			ТаблицаПереходовНоваяСтрока(2, "СтраницаВыборСобственников",
										"СтраницаНавигацииПродолжение", "ПараметрыЛицевогоСчета", ,   "СтраницаВыборСобственников_ПриПереходеДалее");
			ТаблицаПереходовНоваяСтрока(3, "СтраницаЛицевойСчет",
										"СтраницаНавигацииПродолжение", "НазначениеУслуг", ,          "СтраницаЛицевойСчет_ПриПереходеДалее");
			Если ЭтоЖилоеПомещение Тогда
				
				ТаблицаПереходовНоваяСтрока(4, "СтраницаУслуги",
											"СтраницаНавигацииПродолжение", "СписокЖильцов", ,            "СтраницаУслуги_ПриПереходеДалее");
				ТаблицаПереходовНоваяСтрока(5, "СтраницаЖильцы",
											"СтраницаНавигацииПродолжение", "СозданиеЛицевогоСчета", ,    "СтраницаЖильцы_ПриОкончании");
				ТаблицаПереходовНоваяСтрока(6, "СтраницаОкончание",
											"СтраницаНавигацииОкончание",   "ДекорацияОкончания");
			Иначе
				ТаблицаПереходовНоваяСтрока(4, "СтраницаУслуги",
											"СтраницаНавигацииПродолжение", "СозданиеЛицевогоСчета", ,    "СтраницаУслуги_ПриОкончании");
				ТаблицаПереходовНоваяСтрока(5, "СтраницаОкончание",
											"СтраницаНавигацииОкончание",   "ДекорацияОкончания");
			КонецЕсли;
			
		Иначе
			
			ТаблицаПереходовНоваяСтрока(0, "СтраницаДанныеОПомещении",
										"СтраницаНавигацииНачало"     , "ВводСобственников", ,      "СтраницаДанныеОПомещении_ПриПереходеДалее");
			ТаблицаПереходовНоваяСтрока(1, "СтраницаВыборСобственников",
										"СтраницаНавигацииПродолжение", "ПараметрыЛицевогоСчета", , "СтраницаВыборСобственников_ПриПереходеДалее");
			ТаблицаПереходовНоваяСтрока(2, "СтраницаЛицевойСчет",
										"СтраницаНавигацииПродолжение", "НазначениеУслуг", ,        "СтраницаЛицевойСчет_ПриПереходеДалее");
			Если ЭтоЖилоеПомещение Тогда
				
				ТаблицаПереходовНоваяСтрока(3, "СтраницаУслуги",
											"СтраницаНавигацииПродолжение", "СписокЖильцов", ,          "СтраницаУслуги_ПриПереходеДалее");
				ТаблицаПереходовНоваяСтрока(4, "СтраницаЖильцы",
											"СтраницаНавигацииПродолжение", "СозданиеЛицевогоСчета", ,  "СтраницаЖильцы_ПриОкончании");
				ТаблицаПереходовНоваяСтрока(5, "СтраницаОкончание",
											"СтраницаНавигацииОкончание",   "ДекорацияОкончания");
			Иначе
				ТаблицаПереходовНоваяСтрока(3, "СтраницаУслуги",
											"СтраницаНавигацииПродолжение", "СозданиеЛицевогоСчета", ,  "СтраницаУслуги_ПриОкончании");
				ТаблицаПереходовНоваяСтрока(4, "СтраницаОкончание",
											"СтраницаНавигацииОкончание",   "ДекорацияОкончания");
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		
		// Не подробный алгоритм
		ТаблицаПереходовНоваяСтрока(0, "СтраницаДанныеОПомещении",
									"СтраницаНавигацииНачало"     , "СписокЖильцов", ,          "СтраницаДанныеОПомещении_ПриПереходеДалее");
		ТаблицаПереходовНоваяСтрока(1, "СтраницаЖильцы",
									"СтраницаНавигацииПродолжение", "ПараметрыЛицевогоСчета", , "СтраницаЖильцы_ПриПереходеДалее");
		ТаблицаПереходовНоваяСтрока(2, "СтраницаЛицевойСчет",
									"СтраницаНавигацииПродолжение", "НазначениеУслуг", ,        "СтраницаЛицевойСчет_ПриПереходеДалее");
		ТаблицаПереходовНоваяСтрока(3, "СтраницаУслуги",
									"СтраницаНавигацииПродолжение", "СозданиеЛицевогоСчета", ,  "СтраницаУслуги_ПриОкончании");
		ТаблицаПереходовНоваяСтрока(4, "СтраницаОкончание",
									"СтраницаНавигацииОкончание",   "ДекорацияОкончания");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РасчитатьДолиНаСервере(НужноПересчитывать)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет
		|ПОМЕСТИТЬ втДействующиеЛС
		|ИЗ
		|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&Период, Объект = &Помещение) КАК КВП_ЛицевыеСчетаСрезПоследних
		|ГДЕ
		|	КВП_ЛицевыеСчетаСрезПоследних.Действует
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.Объект КАК Объект,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель, 0) = 0
		|				ТОГДА ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель, 0) / КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК РазмерДоли,
		|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет КАК ЛицевойСчет
		|ИЗ
		|	РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(
		|			&Период,
		|			ЛицевойСчет В
		|				(ВЫБРАТЬ
		|					втДействующиеЛС.ЛицевойСчет
		|				ИЗ
		|					втДействующиеЛС КАК втДействующиеЛС)) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.Объект,
		|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет";
	
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	Запрос.УстановитьПараметр("Помещение", объект.Помещение);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	КолЛс = ВыборкаДетальныеЗаписи.Количество() + 1;
	//++Позолотина переопределение долей 
	Если не НужноПересчитывать тогда
		 КолЛс = 1
	КонецЕсли;
	ДоляНаЛс = "1/" + КолЛс / 1;
	
	ДоляСобственностиЛС	= ДоляНаЛс;
	Если НужноПересчитывать тогда
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			менеджерЗаписи = РегистрыСведений.КВП_РазмерыДолейЛицевыхСчетов.СоздатьМенеджерЗаписи();
			менеджерЗаписи.Объект  = объект.Помещение;
			менеджерЗаписи.ЛицевойСчет = ВыборкаДетальныеЗаписи.ЛицевойСчет;
			менеджерЗаписи.период = Объект.Дата;
			//менеджерЗаписи.ДокументРегистратор = объект.ссылка;
			менеджерЗаписи.ДоляЧислитель = 1;
			менеджерЗаписи.ДоляЗнаменатель = КолЛс;
			менеджерЗаписи.записать();
		КонецЦикла;
	КонецЕсли;	
	//--	
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьДоли(Команда)
	//++Позолотина
	НужноПересчитывать = Ложь;
	 Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОПересчетеДолей", ЭтотОбъект, НужноПересчитывать);
	 ПоказатьВопрос(Оповещение, "Установить долю равную 1/1? Если нет, то доли будут пересчитаны !!", Режимдиалогавопрос.ДаНет);	НужноПересчитывать = Ложь;
	//РасчитатьДолиНаСервере();
	//--
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	а=0;
КонецПроцедуры
//++Позолотина
 &НаКлиенте
 Процедура ПослеЗакрытияВопросаОПересчетеДолей (Результат, НужноПересчитывать) Экспорт 
    Если Результат = КодВозвратаДиалога.Да Тогда
		ЭтотОбъект.УстановитьДоли_1_1 = Истина;
		РасчитатьДолиНаСервере(Ложь);
	иначе
		ЭтотОбъект.УстановитьДоли_1_1 = Ложь;
		РасчитатьДолиНаСервере(Истина);
    КонецЕсли;
КонецПроцедуры
//--
#КонецОбласти
