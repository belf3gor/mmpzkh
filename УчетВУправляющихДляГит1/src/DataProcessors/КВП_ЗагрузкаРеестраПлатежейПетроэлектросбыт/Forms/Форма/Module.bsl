

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Область ПрочиеПроцедурыИФункции

&НаКлиенте
// Заполняет настройки загрузки файла.
Процедура ЗаполнитьНастройкиЗагрузкиФайла();
	
	НастройкиЗагрузки = ПолучитьНастройкиЗагрузкиФайла();
	
	Если НастройкиЗагрузки.ЗаписьВыбрана Тогда
		Объект.ФорматФайлаЗагрузки = НастройкиЗагрузки.ФорматФайлаЗагрузки;
		Объект.ИмяФайлаЗагрузки    = НастройкиЗагрузки.ИмяФайлаЗагрузки;
		Объект.Контрагент          = НастройкиЗагрузки.Контрагент;
		Объект.КорректировкаДолга  = НастройкиЗагрузки.КорректировкаДолга;
	ИначеЕсли ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ТекстВопроса = "Для организации "
		+ Объект.Организация
		+ " не настроены параметры загрузки файла."
		+ Символы.ПС
		+"Настроить?";
		
		ПоказатьВопрос( Новый ОписаниеОповещения("ОбработатьРезультатВопросаЗаполнитьНастройкиЗагрузкиФайла", ЭтаФорма),
		ТекстВопроса,
		РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры //ЗаполнитьНастройкиЗагрузкиФайла()

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "ЗаполнитьНастройкиЗагрузкиФайла()".
Процедура ОбработатьРезультатВопросаЗаполнитьНастройкиЗагрузкиФайла(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьДанныеВХранилище();
		ОткрытьФорму("Обработка.КВП_ЗагрузкаРеестраПлатежейПетроэлектросбыт.Форма.ФормаНастройкиЗаполнения",,
		ЭтаФорма,,,,
		Новый ОписаниеОповещения("ОбработатьРезультатЗакрытияФормыНастройкиЗаполнения", ЭтаФорма),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		Объект.ФорматФайлаЗагрузки = "";
		Объект.ИмяФайлаЗагрузки    = "";
		Объект.Контрагент          = "";
		Объект.КорректировкаДолга  = "";
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаЗаполнитьНастройкиЗагрузкиФайла()

&НаКлиенте
// Обработчик результата закрытия формы настройки заполнения, вызванного в процедуре 
// "ОбработатьРезультатВопросаЗаполнитьНастройкиЗагрузкиФайла()".
Процедура ОбработатьРезультатЗакрытияФормыНастройкиЗаполнения(Результат, ДопПараметры) Экспорт
	
	Попытка
		
		ВТ = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("КВП_ЗагрузкаРеестраПлатежейПетроэлектросбыт"
		+ "_Реквизиты");
		Объект.Организация = ВТ.Организация;
		
		НастройкиЗагрузки = ПолучитьНастройкиЗагрузкиФайла();
		
		Если НастройкиЗагрузки.ЗаписьВыбрана Тогда
			Объект.ФорматФайлаЗагрузки = НастройкиЗагрузки.ФорматФайлаЗагрузки;
			Объект.ИмяФайлаЗагрузки    = НастройкиЗагрузки.ИмяФайлаЗагрузки;
			Объект.Контрагент          = НастройкиЗагрузки.Контрагент;
			Объект.КорректировкаДолга  = НастройкиЗагрузки.КорректировкаДолга;
		КонецЕсли;
		
	Исключение
	КонецПопытки;
	
КонецПроцедуры // ОбработатьРезультатЗакрытияФормыНастройкиЗаполнения()

&НаСервере
// Получает настройки загрузки файла из регистра сведений "КВП_НастройкиЗагрузкиИзАС".
//
// Параметры:
//  Нет
// 
Функция ПолучитьНастройкиЗагрузкиФайла()
	
	НастройкиЗагрузки = РегистрыСведений.КВП_НастройкиЗагрузкиИзАС.СоздатьМенеджерЗаписи();
	НастройкиЗагрузки.Организация = Объект.Организация;
	НастройкиЗагрузки.ВидОперации = Перечисления.КВП_ВидыНастроекЗагрузкиИзАС.ЗагрузкаИзСистемПриемаПлатежей;
	НастройкиЗагрузки.Прочитать();
	
	Настройки = Новый Структура;
	
	Настройки.Вставить("ЗаписьВыбрана", НастройкиЗагрузки.Выбран());
	Настройки.Вставить("ФорматФайлаЗагрузки", НастройкиЗагрузки.ФорматФайлаЗагрузки);
	Настройки.Вставить("ИмяФайлаЗагрузки", НастройкиЗагрузки.ИмяФайлаЗагрузки);
	Настройки.Вставить("Контрагент", НастройкиЗагрузки.Контрагент);
	Настройки.Вставить("КорректировкаДолга", НастройкиЗагрузки.КорректировкаДолга);
	
	Возврат Настройки;
	
КонецФункции  //ПолучитьНастройкиЗагрузкиФайла()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаКлиенте
// Процедура - обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	Если Объект.Организация.Пустая() Тогда
		Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьОсновнуюОрганизацию();
	КонецЕсли;
	
	ИмяОбработки = ПолучитьИмяОбработки();	
	
	ИнициализацияРеквизитов();
	
	Попытка 
		КоличествоСтрок = ВосстановитьНастройкиЗаполнения();
		
		Если КоличествоСтрок = 0 или КоличествоСтрок <>2 Тогда
			
			Объект.НастройкаЗаполнения.Очистить();
			Объект.НастройкаЗаполнения.Добавить().Документ = "Регистрация оплаты";
			Объект.НастройкаЗаполнения.Добавить().Документ = "Поступление на расчетный счет";
			
		КонецЕсли;
	Исключение
		СтрокаТабл = Объект.НастройкаЗаполнения.Добавить();
		СтрокаТабл.Документ = "Регистрация оплаты";
		СтрокаТабл.Пометка = Истина;
		СтрокаТабл = Объект.НастройкаЗаполнения.Добавить();
		СтрокаТабл.Документ = "Поступление на расчетный счет";
		СтрокаТабл.Пометка = Истина;
	КонецПопытки;
	
	ЗаполнитьНастройкиЗагрузкиФайла();
	
КонецПроцедуры  // ПриОткрытии()

&НаСервере
// Возвращает имя обработки.
//
Функция ПолучитьИмяОбработки()
	
	Возврат ДанныеФормыВЗначение(Объект,
	Тип("ОбработкаОбъект.КВП_ЗагрузкаРеестраПлатежейПетроэлектросбыт")).Метаданные().Имя;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДанныеВХранилище()
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Организация", Объект.Организация);
	СтруктураРеквизитов.Вставить("ФорматФайлаЗагрузки", Объект.ФорматФайлаЗагрузки);
	СтруктураРеквизитов.Вставить("ИмяФайлаЗагрузки", Объект.ИмяФайлаЗагрузки);
	СтруктураРеквизитов.Вставить("Контрагент", Объект.Контрагент);
	СтруктураРеквизитов.Вставить("КорректировкаДолга", Объект.КорректировкаДолга);
	СтруктураРеквизитов.Вставить("НастройкаЗаполнения", Объект.НастройкаЗаполнения.Выгрузить());
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("КВП_ЗагрузкаРеестраПлатежейПетроэлектросбыт"
	+ "_Реквизиты", ,
	СтруктураРеквизитов);
	
КонецПроцедуры

&НаСервере
// Определяет значение параметров.
//
// Параметры:
//  Нет
// 
Процедура ИнициализацияРеквизитов()
	
	ЗапросЛС = Новый Запрос;
	ЗапросЛС.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчета.Код КАК КодЛС,
	|	КВП_ЛицевыеСчета.Наименование КАК НаименованиеЛС,
	|	КВП_ЛицевыеСчета.Идентификатор КАК ИдентификаторЛС,
	|	КВП_ЛицевыеСчета.Ссылка КАК ЛицевойСчет
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	КВП_ЛицевыеСчета.ЭтоГруппа = ЛОЖЬ";
	
	ТабЛС = ДанныеФормыВЗначение(ТаблицаЛС, Тип("ТаблицаЗначений"));
	
	ТабЛС = ЗапросЛС.Выполнить().Выгрузить();
	
	ЗначениеВДанныеФормы(ТабЛС, ТаблицаЛС); 
	
	ЗапросУслуг = Новый Запрос;
	ЗапросУслуг.Текст = 
	"ВЫБРАТЬ
	|	КВП_Услуги.Код КАК КодУслуги,
	|	КВП_Услуги.Ссылка КАК Услуга
	|ИЗ
	|	Справочник.КВП_Услуги КАК КВП_Услуги
	|ГДЕ
	|	КВП_Услуги.ЭтоГруппа = ЛОЖЬ";
	
	Таб = ДанныеФормыВЗначение(ТаблицаУслуг, Тип("ТаблицаЗначений"));
	
	Таб = ЗапросУслуг.Выполнить().Выгрузить();
	
	ЗначениеВДанныеФормы(Таб, ТаблицаУслуг); 
	
	ПолеИдентификацииЛС = "";
	Если Объект.ФорматФайлаЗагрузки.УдалитьПолеИдентификацииЛС = "Code" Тогда
		ПолеИдентификацииЛС = "КодЛС";
	ИначеЕсли Объект.ФорматФайлаЗагрузки.УдалитьПолеИдентификацииЛС = "Name" Тогда
		ПолеИдентификацииЛС = "НаименованиеЛС";
	ИначеЕсли Объект.ФорматФайлаЗагрузки.УдалитьПолеИдентификацииЛС = "ID" Тогда
		ПолеИдентификацииЛС = "ИдентификаторЛС";
	КонецЕсли;
	
КонецПроцедуры  // ИнициализацияРеквизитов()

&НаСервере
// Восстанавливает настройки заполнения.
//
Функция ВосстановитьНастройкиЗаполнения()
	
	Объект.НастройкаЗаполнения.Очистить();
	
	ЗначенияРеквизитов =
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("КВП_ЗагрузкаРеестраПлатежейПетроэлектросбыт"
	+ "_Реквизиты");
	Объект.НастройкаЗаполнения.Загрузить(ЗначенияРеквизитов.НастройкаЗаполнения);
	
	Возврат Объект.НастройкаЗаполнения.Количество();
	
КонецФункции

#КонецОбласти

/////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ

#Область ОбработчикиСобытийЭлементовУправления

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода Организация.
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЗаполнитьНастройкиЗагрузкиФайла();
	
КонецПроцедуры  //ОрганизацияПриИзменении()

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНДНОЙ ПАНЕЛИ ФОРМЫ

#Область ОбработчикиСобытийКоманднойПанели

&НаКлиенте
// Установить все флажки в табличной части.
Процедура УстановитьФлажки(Кнопка)
	
	Для Каждого ТекСтрока Из Объект.ТаблицаРеестра Цикл
		ТекСтрока.Использовать = Истина;
	КонецЦикла;
	
КонецПроцедуры  //УстановитьФлажки()

&НаКлиенте
// Снять все флажки в табличной части.
Процедура СнятьФлажки(Кнопка)
	
	Для Каждого ТекСтрока Из Объект.ТаблицаРеестра Цикл
		ТекСтрока.Использовать = Ложь;
	КонецЦикла;
	
КонецПроцедуры  //СнятьФлажки()

&НаКлиенте
// Формирует документы "Регистрация оплаты", заполняя данными из табличной части.
Процедура СформироватьДокументыНажатие(Кнопка)
	
	СформироватьДокументы();
	
КонецПроцедуры  //СформироватьДокументы()

&НаКлиенте
Процедура Настройка(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ПоказатьПредупреждение(Неопределено, "Не указана организация.");
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Обработка.КВП_ЗагрузкаРеестраПлатежейПетроэлектросбыт.Форма.ФормаНастройкиЗаполнения",,
	ЭтаФорма,,,,
	Новый ОписаниеОповещения("ОбработатьРезультатЗакрытияФормыНастройки", ЭтаФорма),
	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры //Настройка()

&НаКлиенте
// Обработчик акрытия формы настройки.
Процедура ОбработатьРезультатЗакрытияФормыНастройки(Результат, ДопПараметры) Экспорт
	
	ОбновитьРеквизиты();
	
КонецПроцедуры // ОбработатьРезультатЗакрытияФормыНастройки()

&НаСервере
// Получает сохраненные настройки загрузки реестра.
//
Процедура ОбновитьРеквизиты()
	
	ЗначенияРеквизитов =
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("КВП_ЗагрузкаРеестраПлатежейПетроэлектросбыт"
	+ "_Реквизиты");
	Если НЕ ЗначенияРеквизитов = Неопределено
		И ТипЗнч(ЗначенияРеквизитов) = Тип("Структура") Тогда
		Объект.Организация         = ЗначенияРеквизитов.Организация;
		Объект.ФорматФайлаЗагрузки = ЗначенияРеквизитов.ФорматФайлаЗагрузки;
		Объект.ИмяФайлаЗагрузки    = ЗначенияРеквизитов.ИмяФайлаЗагрузки;	
		Объект.Контрагент          = ЗначенияРеквизитов.Контрагент;
		Объект.КорректировкаДолга  = ЗначенияРеквизитов.КорректировкаДолга;
		Объект.НастройкаЗаполнения.Загрузить(ЗначенияРеквизитов.НастройкаЗаполнения);
	КонецЕсли;
	
КонецПроцедуры // ОбновитьРеквизиты()

&НаКлиенте
// Загружает в табличную часть данные из файла.
//
Процедура ЗагрузитьРеестрНажатие(Команда)
	
	Если Объект.КорректировкаДолга И (НЕ ЗначениеЗаполнено(Объект.Контрагент)) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не выбрана обслуживающая организация.";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ФайлНаДиске = Новый Файл(Объект.ИмяФайлаЗагрузки);
	ФайлНаДиске.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ЗагрузитьРеестрНажатиеЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРеестрНажатиеЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	Если Не Существует Тогда
		ПоказатьПредупреждение(Неопределено, "Файл не найден!");
		Возврат;
	КонецЕсли;
	
	Если Объект.ТаблицаРеестра.Количество() > 0 Тогда
		ПоказатьВопрос( Новый ОписаниеОповещения("ОбработатьРезультатВопросаОчиститьТЧЗагрузитьРеестрНажатие", ЭтаФорма),
		"Табличная часть будет очищена. Продолжить?",
		РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ЗагрузитьРеестрНажатиеПродолжение();
	
КонецПроцедуры // ЗагрузитьРеестрНажатие()

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "ЗагрузитьРеестрНажатие()".
Процедура ОбработатьРезультатВопросаОчиститьТЧЗагрузитьРеестрНажатие(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ТаблицаРеестра.Очистить();
	
	ЗагрузитьРеестрНажатиеПродолжение();
	
КонецПроцедуры // ОбработатьРезультатВопросаОчиститьТЧЗагрузитьРеестрНажатие()

&НаКлиенте
// Процедура-продолжение процедуры "ЗагрузитьРеестрНажатие()".
Процедура ЗагрузитьРеестрНажатиеПродолжение()
	
	ИнициализацияРеквизитов();
	
	ПутьКФайлу = "";
	НачатьПомещениеФайла(Новый ОписаниеОповещения("ОбработатьРезультатПомещенияФайла", ЭтаФорма),
	ПутьКФайлу, Объект.ИмяФайлаЗагрузки, Ложь);
	
КонецПроцедуры //ЗагрузитьРеестрНажатиеПродолжение()

&НаКлиенте
// Обработчик результата помещения файла.
Процедура ОбработатьРезультатПомещенияФайла(Результат, ПутьКФайлу, ИмяФайла, ДопПараметры) Экспорт
	
	Если НЕ ПутьКФайлу = Неопределено Тогда
		ЗагрузитьРеестр(ПутьКФайлу);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатПомещенияФайла()

&НаСервере
// Загружает в табличную часть данные из файла.
//
Процедура ЗагрузитьРеестр(ПутьКФайлу)
	
	// Запись временных данных во временный файл.
	врДанныеФайла = ПолучитьИзВременногоХранилища(ПутьКФайлу);
	ВременныйФайл = ПолучитьИмяВременногоФайла("XLS");
	
	врДанныеФайла.Записать(ВременныйФайл);
	
	ТаблицаДанныхФайла = Объект.ТаблицаРеестра.Выгрузить();
	
	Док        = ПолучитьCOMОбъект(ВременныйФайл);
	Ном        = 0;
	КонецФайла = Ложь;
	СчСтроки   = 5; //ФорматФайлаЗагрузки.НомерСтроки;
	
	Пока НЕ КонецФайла Цикл
		ОшибочнаяСтрока = Ложь;
		
		ЗначениеПоляДата = СокрЛП(Строка(Док.Sheets(1).Cells(СчСтроки, 2).Value));
		Если НЕ ПустаяСтрока(ЗначениеПоляДата) Тогда
			ЗначениеПоляДатаПред = ЗначениеПоляДата;
		Иначе
			ЗначениеПоляДата = ЗначениеПоляДатаПред;
		КонецЕсли;
		
		ЗначениеПоляПериодОплаты = СокрЛП(Строка(Док.Sheets(1).Cells(СчСтроки, 4).Value));
		
		ЗначениеПоляСумма = ?(ПустаяСтрока(СокрЛП(Строка(Док.Sheets(1).Cells(СчСтроки, 11).Value))),
		0,Число(СокрЛП(Строка(Док.Sheets(1).Cells(СчСтроки, 11).Value))));
		
		АдресУлица    = СокрЛП(Строка(Док.Sheets(1).Cells(СчСтроки, 5).Value));
		Если Прав(АдресУлица, 1) = "." Тогда
			АдресУлица = Лев(АдресУлица, СтрДлина(АдресУлица) - 1);
		КонецЕсли;
		АдресДом      = СокрЛП(Строка(Док.Sheets(1).Cells(СчСтроки, 8).Value));
		АдресКорпус   = СокрЛП(Строка(Док.Sheets(1).Cells(СчСтроки, 9).Value));
		АдресКвартира = СокрЛП(Строка(Док.Sheets(1).Cells(СчСтроки, 10).Value));
		
		Если ПустаяСтрока(АдресКвартира) Тогда
			ОшибочнаяСтрока = Истина;
		КонецЕсли;
		
		Если ЗначениеПоляСумма = 0 Тогда
			КонецФайла = Истина;
		КонецЕсли;
		
		СчСтроки = СчСтроки + 1;
		
		Если ОшибочнаяСтрока ИЛИ КонецФайла Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("АдресУлица",  АдресУлица);
		Запрос.УстановитьПараметр("АдресДом",    АдресДом);
		Запрос.УстановитьПараметр("АдресКорпус", АдресКорпус);
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		МассивВидовКонтактнойИнформации = Новый Массив;
		МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
		
		МассивЗданий = Новый Массив;
		
		ЗапросЗданий = Новый Запрос;
		ЗапросЗданий.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_Здания.Ссылка
		|ИЗ
		|	Справочник.КВП_Здания КАК КВП_Здания";
		ВыборкаЗданий = ЗапросЗданий.Выполнить().Выбрать();
		Пока ВыборкаЗданий.Следующий() Цикл
			МассивЗданий.Добавить(ВыборкаЗданий.Ссылка);
		КонецЦикла;
		
		УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивЗданий);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	втКонтактнаяИнформация.Объект КАК Здание,
		|	втКонтактнаяИнформация.Улица КАК Улица,
		|	втКонтактнаяИнформация.Дом,
		|	втКонтактнаяИнформация.Корпус
		|ИЗ
		|	втКонтактнаяИнформация КАК втКонтактнаяИнформация
		|ГДЕ
		|	втКонтактнаяИнформация.Дом = &АдресДом
		|	И втКонтактнаяИнформация.Корпус = &АдресКорпус
		|
		|СГРУППИРОВАТЬ ПО
		|	втКонтактнаяИнформация.Объект,
		//|	втКонтактнаяИнформация.Вид.Ссылка,
		|	втКонтактнаяИнформация.Улица,
		|	втКонтактнаяИнформация.Дом,
		|	втКонтактнаяИнформация.Корпус";
		
		ТекЗдание = "";
		Здания = Запрос.Выполнить().Выбрать();
		Пока Здания.Следующий() Цикл
			Если Найти(АдресУлица, ВРег(Здания.Улица)) >= 0 Тогда
				ТекЗдание = Здания.Здание;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не ЗначениеЗаполнено(ТекЗдание) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "По данным строки № "
			+ СчСтроки
			+ " файла загрузки не найдено в базе здание с адресом "
			+ АдресУлица + ", дом " + АдресДом + ", корпус " + АдресКорпус;
			Сообщение.Сообщить();
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Здание",        ТекЗдание);
		Запрос.УстановитьПараметр("АдресКвартира", Число(АдресКвартира));
		Запрос.УстановитьПараметр("ТипПомещения",  Перечисления.КВП_ТипыПомещений.Квартира);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ЛицевыеСчета.Ссылка КАК ЛицевойСчет,
		|	КВП_ЛицевыеСчета.Адрес КАК Квартира,
		|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель КАК ДоляЧислитель,
		|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель КАК ДоляЗнаменатель
		|ИЗ
		|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
		|		ПО КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет = КВП_ЛицевыеСчета.Ссылка
		|ГДЕ
		|	КВП_ЛицевыеСчета.Адрес.Владелец = &Здание
		|	И КВП_ЛицевыеСчета.Адрес.ВидПомещения.ТипПомещения = &ТипПомещения
		|	И КВП_ЛицевыеСчета.Адрес.Код = &АдресКвартира";
		
		ОстатокСуммы = ЗначениеПоляСумма;
		
		ЛицевыеСчета = Запрос.Выполнить().Выбрать();
		Пока ЛицевыеСчета.Следующий() Цикл
			СтрокаРеестра = Объект.ТаблицаРеестра.Добавить();
			СтрокаРеестра.Использовать = Истина;
			СтрокаРеестра.КолонкаДата  = ПолучитьЗначениеПоляРеестра(СчСтроки, "Дата", ЗначениеПоляДата);
			ПериодОплаты = ПолучитьЗначениеПоляРеестра(СчСтроки, "Период", ЗначениеПоляПериодОплаты);
			Если НЕ ПериодОплаты = Null Тогда
				СтрокаРеестра.ПериодОплаты = КонецМесяца(ПериодОплаты);
			КонецЕсли;
			СтрокаРеестра.ЛицевойСчет  = ЛицевыеСчета.ЛицевойСчет;
			СтрокаРеестра.Квартира     = ЛицевыеСчета.Квартира;
			
			Если НЕ ПустаяСтрока(ЛицевыеСчета.ДоляЗнаменатель) Тогда
				ДоляЛицевогоСчетаСумма = Окр(ЗначениеПоляСумма*ЛицевыеСчета.ДоляЧислитель/ЛицевыеСчета.ДоляЗнаменатель, 2);
				Если ОстатокСуммы > ДоляЛицевогоСчетаСумма Тогда
					СтрокаРеестра.Сумма = ДоляЛицевогоСчетаСумма;
					ОстатокСуммы = ОстатокСуммы - ДоляЛицевогоСчетаСумма;
				Иначе 
					СтрокаРеестра.Сумма = ОстатокСуммы;
				КонецЕсли;
			Иначе
				СтрокаРеестра.Сумма = 0;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "" + ЛицевыеСчета.ЛицевойСчет + ": не указан размер доли лицевого счета, сумма заполнена не будет!";
				Сообщение.Сообщить();
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Заполним таблицу значений списком квартир и количеством их упоминаний.
	тмТаблицаКвартир = Объект.ТаблицаРеестра.Выгрузить(, "Квартира");
	тмТаблицаКвартир.Колонки.Добавить("Количество");
	тмТаблицаКвартир.ЗаполнитьЗначения(1, "Количество");
	тмТаблицаКвартир.Свернуть("Квартира", "Количество");
	СписокУникальных = тмТаблицаКвартир.НайтиСтроки(Новый Структура("Количество", 1));
	Для Каждого СтрокаУникальной Из СписокУникальных Цикл
		тмТаблицаКвартир.Удалить(СтрокаУникальной);
	КонецЦикла;
	
	// Выгрузим повторяющиеся квартиры в список значений.
	мСписокПовторяющихсяКвартир = Новый СписокЗначений();
	мСписокПовторяющихсяКвартир.Очистить();
	мСписокПовторяющихсяКвартир.ЗагрузитьЗначения(тмТаблицаКвартир.ВыгрузитьКолонку("Квартира"));
	
КонецПроцедуры

&НаСервере
// Определяет значение поля соответствующего типа.
//
// Параметры:
//  НомерСтроки  - номер строки файла загрузки
//  ТипКолонки   - значение колонки реестра
//  ЗначениеПоля - значение поля файла загрузки.
//
// Возвращаемое значение:
//  Значение поля реестра.
//
Функция ПолучитьЗначениеПоляРеестра(НомерСтроки, ТипКолонки, ЗначениеПоля)
	
	Если ТипКолонки = "Дата" Тогда
		
		Если ТипЗнч(ЗначениеПоля) = Тип("Дата") Тогда
			
			Если ЗначениеПоля = Дата(1,1,1) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Строка " + НомерСтроки + " файла: не определено значение даты.";
				Сообщение.Сообщить();
				Возврат Null;
			КонецЕсли;
			
			Возврат ЗначениеПоля;
			
		ИначеЕсли ТипЗнч(ЗначениеПоля) = Тип("Строка") Тогда
			
			ЗначениеПоля = СокрЛП(ЗначениеПоля);
			Если ПустаяСтрока(ЗначениеПоля) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Строка " + НомерСтроки + " файла: не определено значение даты.";
				Сообщение.Сообщить();
				Возврат Null;
			КонецЕсли;
			
			Попытка
				Возврат Дата(ЗначениеПоля);
			Исключение
			КонецПопытки;
			
			СтрокаЗначениеПоля = ЗначениеПоля;
			СпПараметровДаты = Новый СписокЗначений;
			
			РазделительДаты = "."; //ФорматФайлаЗагрузки.РазделительДаты;
			// прочитаем параметры даты из файла загрузки.
			Для Индекс = 1 По 3 Цикл
				Позиция      = Найти(СтрокаЗначениеПоля, РазделительДаты);
				Если Позиция = 0 Тогда
					ПозицияПробела = Найти(СтрокаЗначениеПоля, " ");
					Если ПозицияПробела = 0 Тогда
						Позиция = СтрДлина(СтрокаЗначениеПоля) + 1;
					Иначе
						Позиция = ПозицияПробела;
					КонецЕсли;
				КонецЕсли;
				ПараметрДаты = Сред(СтрокаЗначениеПоля, 1, Позиция - 1);
				Если ПараметрДаты = "" Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Строка " + НомерСтроки + " файла: не определено значение даты.";
					Сообщение.Сообщить();
					Возврат Null;
				Иначе
					СпПараметровДаты.Добавить(ПараметрДаты);
				КонецЕсли;
				СтрокаЗначениеПоля = Прав(СтрокаЗначениеПоля, СтрДлина(СтрокаЗначениеПоля) - Позиция);
			КонецЦикла;
			
			ПараметрДень  = СпПараметровДаты[0].Значение;
			ПараметрМесяц = СпПараметровДаты[1].Значение;
			ПараметрГод	  = СпПараметровДаты[2].Значение;
			
			Если СтрДлина(ПараметрГод) = 2 Тогда
				ПараметрГод = "20" + ПараметрГод;
			КонецЕсли;
			
			Попытка
				Возврат Дата(Число(ПараметрГод), Число(ПараметрМесяц), Число(ПараметрДень));
			Исключение
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Строка " + НомерСтроки + " файла: не определено значение даты.";
				Сообщение.Сообщить();
				Возврат Null;
			КонецПопытки;
			
		КонецЕсли;
		
	ИначеЕсли ТипКолонки = "Период" Тогда
		
		Если ТипЗнч(ЗначениеПоля) = Тип("Строка") Тогда
			
			ЗначениеПоля = СокрЛП(ЗначениеПоля);
			Если ПустаяСтрока(ЗначениеПоля) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Строка " + НомерСтроки + " файла: не определено значение даты.";
				Сообщение.Сообщить();
				Возврат Null;
			КонецЕсли;
			
			СтрокаЗначениеПоля = ЗначениеПоля;
			СпПараметровДаты = Новый СписокЗначений;
			
			РазделительДаты = "."; //ФорматФайлаЗагрузки.РазделительДаты;
			// прочитаем параметры даты из файла загрузки.
			Для Индекс = 1 По 2 Цикл
				Позиция      = Найти(СтрокаЗначениеПоля, РазделительДаты);
				Если Позиция = 0 Тогда
					ПозицияПробела = Найти(СтрокаЗначениеПоля, " ");
					Если ПозицияПробела = 0 Тогда
						Позиция = СтрДлина(СтрокаЗначениеПоля) + 1;
					Иначе
						Позиция = ПозицияПробела;
					КонецЕсли;
				КонецЕсли;
				ПараметрДаты = Сред(СтрокаЗначениеПоля, 1, Позиция - 1);
				Если ПараметрДаты = "" Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Строка " + НомерСтроки + " файла: не определено значение даты.";
					Сообщение.Сообщить();
					Возврат Null;
				Иначе
					СпПараметровДаты.Добавить(ПараметрДаты);
				КонецЕсли;
				СтрокаЗначениеПоля = Прав(СтрокаЗначениеПоля, СтрДлина(СтрокаЗначениеПоля) - Позиция);
			КонецЦикла;
			
			ПараметрМесяц = СпПараметровДаты[0].Значение;
			ПараметрГод	  = СпПараметровДаты[1].Значение;
			
			Если СтрДлина(ПараметрГод) = 2 Тогда
				ПараметрГод = "20" + ПараметрГод;
			КонецЕсли;
			
			Попытка
				Возврат Дата(Число(ПараметрГод), Число(ПараметрМесяц), Число("1"));
			Исключение
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Строка " + НомерСтроки + " файла: не определено значение даты.";
				Сообщение.Сообщить();
				Возврат Null;
			КонецПопытки;
			
		КонецЕсли;
		
	ИначеЕсли ТипКолонки = "Лицевой счет" Тогда
		
		Если ТипЗнч(ЗначениеПоля) = Тип("Строка") Тогда
			
			ЗначениеПоля = СтрЗаменить(ЗначениеПоля, Символы.НПП, "");
			ЗначениеПоля = СокрЛП(ЗначениеПоля);
			Если ПустаяСтрока(ЗначениеПоля) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Строка " + НомерСтроки + " файла: не определен лицевой счет.";
				Сообщение.Сообщить();
				Возврат Null;
			КонецЕсли;
			
			// поиск в списке лицевых счетов.
			// ЖКХ 3.0
			//НайденнаяСтрока = ТаблицаЛС.Найти(ЗначениеПоля,ПолеИдентификацииЛС);
			НайденныеСтроки = ТаблицаЛС.НайтиСтроки(Новый Структура(ПолеИдентификацииЛС, ЗначениеПоля));
			Если НайденныеСтроки.Количество() > 0 Тогда
				НайденнаяСтрока = НайденныеСтроки[0];
			Иначе
				НайденнаяСтрока = Неопределено;
			КонецЕсли;
			// ЖКХ 3.0
			
			Если НайденнаяСтрока = Неопределено Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Строка " + НомерСтроки + " файла: не определен лицевой счет - " + ЗначениеПоля;
				Сообщение.Сообщить();
				Возврат Null;
			Иначе
				Возврат НайденнаяСтрока.ЛицевойСчет;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипКолонки = "Услуга" Тогда
		
		Если ТипЗнч(ЗначениеПоля) = Тип("Строка") Тогда
			
			ЗначениеПоля = СтрЗаменить(ЗначениеПоля, Символы.НПП, "");
			ЗначениеПоля = СокрЛП(ЗначениеПоля);
			Если ПустаяСтрока(ЗначениеПоля) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Строка " + НомерСтроки + " файла: не определена услуга.";
				Сообщение.Сообщить();
				Возврат Null;
			КонецЕсли;
			
			// поиск в списке услуг.
			// ЖКХ 3.0
			//НайденнаяСтрока = ТаблицаУслуг.Найти(ЗначениеПоля,"КодУслуги");
			НайденныеСтроки = ТаблицаУслуг.НайтиСтроки(Новый Структура("КодУслуги", ЗначениеПоля));
			Если НайденныеСтроки.Количество() > 0 Тогда
				НайденнаяСтрока = НайденныеСтроки[0];
			Иначе
				НайденнаяСтрока = Неопределено;
			КонецЕсли;
			// ЖКХ 3.0
			
			Если НайденнаяСтрока = Неопределено Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Строка " + НомерСтроки + " файла: не определена услуга - " + ЗначениеПоля;
				Сообщение.Сообщить();
				Возврат Null;
			Иначе
				Возврат НайденнаяСтрока.Услуга;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипКолонки = "Сумма" Тогда
		
		Если ТипЗнч(ЗначениеПоля) = Тип("Число") Тогда
			
			Возврат ЗначениеПоля;
			
		ИначеЕсли ТипЗнч(ЗначениеПоля) = Тип("Строка") Тогда
			
			ЗначениеПоля = СокрЛП(ЗначениеПоля);
			Если ПустаяСтрока(ЗначениеПоля) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Строка " + НомерСтроки + " файла: не определено значение суммы.";
				Сообщение.Сообщить();
				Возврат Null;
			КонецЕсли;
			
			Попытка
				Возврат Число(ЗначениеПоля);
			Исключение
			КонецПопытки;
			
			Если Объект.ФорматФайлаЗагрузки.УдалитьРазделительДробнойЧасти <> "." Тогда
				ПозицияРазделителяДЧ = СтрЗаменить(ЗначениеПоля, Объект.ФорматФайлаЗагрузки.УдалитьРазделительДробнойЧасти, ".");
			КонецЕсли;
			
			Попытка
				Возврат Число(ЗначениеПоля);
			Исключение
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Строка " + НомерСтроки + " файла: не определено значение суммы - " + ЗначениеПоля;
				Сообщение.Сообщить();
				Возврат Null;
			КонецПопытки;
			
		КонецЕсли;
		
	Иначе
		
		Если ТипЗнч(ЗначениеПоля) = Тип("Строка") Тогда
			ЗначениеПоля = СокрЛП(ЗначениеПоля);
			Если ПустаяСтрока(ЗначениеПоля) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Строка " + НомерСтроки + " файла: не определено значение поля.";
				Сообщение.Сообщить();
				Возврат Null;
			КонецЕсли;
		КонецЕсли;
		
		Возврат ЗначениеПоля;
		
	КонецЕсли;
	
КонецФункции  // ПолучитьЗначениеПоляРеестра()

&НаСервере
// Формирует документы "Регистрация оплаты", заполняя данными из табличной части.
//
Процедура СформироватьДокументы()
	ТаблицаОплаты = Объект.ТаблицаРеестра.Выгрузить();
	
	// Исключим строки со снятым флажком.
	СтрокиДляУдаления = ТаблицаОплаты.НайтиСтроки(Новый Структура("Использовать", Ложь));
	Для Каждого СтрокаУдаления Из СтрокиДляУдаления Цикл
		ТаблицаОплаты.Удалить(СтрокаУдаления);
	КонецЦикла;
	
	Если ТаблицаОплаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДокДляФормирования = Новый Структура;
	ОтборДок = Новый Структура;
	ОтборДок.Вставить("Пометка", Истина);
	ДокДляФормирования = Объект.НастройкаЗаполнения.НайтиСтроки(ОтборДок);
	
	Если ДокДляФормирования.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПлПоручениеСформировано = Ложь;
	
	ФормироватьПоступлениеНаРС = Истина;
	
	Для Каждого ВыбрДок Из ДокДляФормирования Цикл
		
		Если ВыбрДок.Документ = "Регистрация оплаты" Тогда
			
			// удалим строки, имеющие сформированный документ "Регистрация оплаты".
			ТаблицаОплатыРО = ТаблицаОплаты.Скопировать();
			КолСтрок = ТаблицаОплатыРО.Количество();
			Для Индекс = 1 По КолСтрок Цикл
				ТекСтрока = ТаблицаОплатыРО[КолСтрок - Индекс];
				Если ЗначениеЗаполнено(ТекСтрока.ДокРегистрацияОплаты) Тогда
					ТаблицаОплатыРО.Удалить(ТекСтрока);
				КонецЕсли;
			КонецЦикла;
			
			ТЗЛицевыеСчета = Новый ТаблицаЗначений();
			ТЗЛицевыеСчета.Колонки.Добавить("Объект");
			ТЗЛицевыеСчета.Колонки.Добавить("Сумма");
			
			ТЗТаблицаОплат = Новый ТаблицаЗначений;
			ТЗТаблицаОплат.Колонки.Добавить("Объект",                 Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
			ТЗТаблицаОплат.Колонки.Добавить("Сумма",
			УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
			ТЗТаблицаОплат.Колонки.Добавить("НастройкиОплатыОбъекта", Новый ОписаниеТипов("ТаблицаЗначений"));
			
			ТаблицаОплатыРО.Колонки.Добавить("Здание");
			Для Каждого СтрокаОплаты Из ТаблицаОплатыРО Цикл
				СтрокаОплаты.Здание = СтрокаОплаты.ЛицевойСчет.Адрес.Владелец;
			КонецЦикла;
			
			// сгруппируем строки по дате платежа.
			СпДатПлатежа = ТаблицаОплатыРО.Скопировать();
			СпДатПлатежа.Свернуть("КолонкаДата");
			
			Для Каждого СтрСпДатПлатежа Из СпДатПлатежа Цикл
				
				// сгруппируем строки по зданию.
				СпЗданий = ТаблицаОплатыРО.Скопировать();
				СпЗданий.Свернуть("Здание");
				
				Для Каждого СтрСпЗданий Из СпЗданий Цикл
					
					ОтборПоЗданию = Новый Структура;
					ОтборПоЗданию.Вставить("КолонкаДата", СтрСпДатПлатежа.КолонкаДата);
					ОтборПоЗданию.Вставить("Здание",      СтрСпЗданий.Здание);
					
					ОтборПоОбъекту = Новый Структура("КолонкаДата, Здание");
					ЗаполнитьЗначенияСвойств(ОтборПоОбъекту, ОтборПоЗданию);
					
					// получим строки оплат по текущему зданию и дате платежа.
					СтрокиОтбора = ТаблицаОплатыРО.НайтиСтроки(ОтборПоЗданию);
					
					Если СтрокиОтбора.Количество() > 0 Тогда
						
						ТЗЛицевыеСчета.Очистить();
						ТЗТаблицаОплат.Очистить();
						
						ТЗНастройкиОплаты = Новый ТаблицаЗначений;
						ТЗНастройкиОплаты.Колонки.Добавить("Услуга",          Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
						ТЗНастройкиОплаты.Колонки.Добавить("МесяцНачисления", Новый ОписаниеТипов("Дата"));
						ТЗНастройкиОплаты.Колонки.Добавить("Сумма",
						УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
						
						// получим таблицу лицевых счетов для заполнения ТЧ "Лицевые счета" документа.
						Для Каждого ТекСтрока ИЗ СтрокиОтбора Цикл
							СтрокаПлатежа = ТЗЛицевыеСчета.Добавить();
							СтрокаПлатежа.Объект = ТекСтрока.ЛицевойСчет;
							СтрокаПлатежа.Сумма  = ТекСтрока.Сумма;
						КонецЦикла;
						ТЗЛицевыеСчета.Свернуть("Объект", "Сумма");
						
						// заполним настройки распределения оплаты.
						Для Каждого СтрокаОбъекта ИЗ ТЗЛицевыеСчета Цикл
							
							ОтборПоОбъекту.Вставить("ЛицевойСчет", СтрокаОбъекта.Объект);
							СтрокиОтбораПоОбъекту = ТаблицаОплатыРО.НайтиСтроки(ОтборПоОбъекту);
							
							Для Каждого СтрокаНастройки ИЗ СтрокиОтбораПоОбъекту Цикл
								
								Если ЗначениеЗаполнено(СтрокаНастройки.ПериодОплаты) Тогда
									НоваяСтрНастройки = ТЗНастройкиОплаты.Добавить();
									НоваяСтрНастройки.МесяцНачисления = НачалоМесяца(СтрокаНастройки.ПериодОплаты);
									НоваяСтрНастройки.Сумма           = СтрокаНастройки.Сумма;
								КонецЕсли;
								
							КонецЦикла;
							
							НоваяСтрОплаты = ТЗТаблицаОплат.Добавить();
							НоваяСтрОплаты.Объект = СтрокаОбъекта.Объект;
							НоваяСтрОплаты.Сумма  = СтрокаОбъекта.Сумма;
							
							// настройки оплаты услуг
							ТЗНастройкиОплаты.Свернуть("Услуга, МесяцНачисления", "Сумма");
							Если НЕ ТЗНастройкиОплаты.Количество() = 0 Тогда
								НоваяСтрОплаты.НастройкиОплатыОбъекта = ТЗНастройкиОплаты;
							КонецЕсли;
							
						КонецЦикла;
						
						СтруктураПараметров = Новый Структура();
						
						СтруктураПараметров.Вставить("КорректировкаДолга", Объект.КорректировкаДолга);
						
						Если Объект.КорректировкаДолга Тогда
							СтруктураПараметров.Вставить("ВидОперации",
							Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеИзАвтоматизированныхСистемПриемаОплаты);
							СтруктураПараметров.Вставить("ОператорПлатежей",   Объект.Контрагент);
							СтруктураПараметров.Вставить("ФормироватьДокументы", Истина);
						Иначе
							СтруктураПараметров.Вставить("ВидОперации",
							Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеНаБанковскийСчет);
						КонецЕсли;
						
						Если ТипЗнч(ВыбрДок.Статья) = Тип("СправочникСсылка.КВП_ИсточникиОплат") Тогда
							СтруктураПараметров.Вставить("ИсточникОплаты", ВыбрДок.Статья);
						КонецЕсли;
						
						СтруктураПараметров.Вставить("Дата",                 СтрСпДатПлатежа.КолонкаДата);
						СтруктураПараметров.Вставить("Организация",          Объект.Организация);
						СтруктураПараметров.Вставить("Дом",                  СтрСпЗданий.Здание);
						СтруктураПараметров.Вставить("ТаблицаОплат",         ТЗТаблицаОплат);
						
						ОбъектРегистрацияОплаты = Документы.КВП_РегистрацияОплаты.СоздатьДокумент();
						
						// заполним данные документа
						ОбъектРегистрацияОплаты.Заполнить(СтруктураПараметров);
						
						Попытка
							Если ОбъектРегистрацияОплаты.ЛицевыеСчета.Количество() > 0 Тогда
								ОбъектРегистрацияОплаты.Записать(РежимЗаписиДокумента.Проведение);
								Для Каждого ТекСтрока Из СтрокиОтбора Цикл
									СтрокаТЧ = Объект.ТаблицаРеестра.Получить(ТекСтрока.НомерСтроки - 1);
									СтрокаТЧ.ДокРегистрацияОплаты = ОбъектРегистрацияОплаты.Ссылка;
								КонецЦикла;
							Иначе
								ФормироватьПоступлениеНаРС = Ложь;
							КонецЕсли;
						Исключение
							ТекстСообщения = "Документ ""Регистрация оплаты""" + ОписаниеОшибки();
							УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстСообщения, , , , Ложь);
							ФормироватьПоступлениеНаРС = Ложь;
						КонецПопытки;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		ИначеЕсли ВыбрДок.Документ = "Поступление на расчетный счет" И ФормироватьПоступлениеНаРС Тогда
			
			ТекПользователь = УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь();
			
			Для Каждого ТекСтрока Из ТаблицаОплаты Цикл
				
				Если ЗначениеЗаполнено(ТекСтрока.ДокПоступлениеНаРС) Тогда
					Продолжить;
				КонецЕсли;
				
				
				// шапка документа
				ОбъектПоступлениеНаРС = Документы.ПоступлениеНаРасчетныйСчет.СоздатьДокумент();
				ДанныеДляВзаиморасчетов = ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету(ТекСтрока.ЛицевойСчет,
				Объект.Организация,
				ТекСтрока.КолонкаДата);
				
				СтруктураПараметров = Новый Структура();
				СтруктураПараметров.Вставить("Дата",               ТекСтрока.КолонкаДата);
				СтруктураПараметров.Вставить("Контрагент",         ДанныеДляВзаиморасчетов.Контрагент);
				СтруктураПараметров.Вставить("ДоговорКонтрагента", ДанныеДляВзаиморасчетов.Договор);
				СтруктураПараметров.Вставить("СуммаПлатежа",       ТекСтрока.Сумма);
				СтруктураПараметров.Вставить("ДокументОплат",      "ПоступлениеНаРС");
				
				ВидДоговора = ДанныеДляВзаиморасчетов.Договор.ВидДоговора;
				СчетаУчета = УПЖКХ_ТиповыеМетодыСервер.ПолучитьСчетаРасчетовСКонтрагентом(
				Объект.Организация, 
				ДанныеДляВзаиморасчетов.Контрагент, 
				ДанныеДляВзаиморасчетов.Договор);
				
				Если ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
					ОбъектПоступлениеНаРС.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя;
					
				ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
					ОбъектПоступлениеНаРС.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление;
					//ОбъектДвиженияПоРС.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление;
					ОбъектПоступлениеНаРС.СчетУчетаРасчетовСКонтрагентом = СчетаУчета["СчетРасчетовПокупателя"];
					ОбъектПоступлениеНаРС.СубконтоКт1 = ДанныеДляВзаиморасчетов.Контрагент;
					ОбъектПоступлениеНаРС.СубконтоКт2 = ДанныеДляВзаиморасчетов.Договор;
					//СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, 
					//																						ДанныеДляВзаиморасчетов.Контрагент, 
					//																						ДанныеДляВзаиморасчетов.Договор);
					//
					//ОбъектПоступлениеНаРС.СчетУчетаРасчетовСКонтрагентом = СчетаУчета["СчетАвансовПокупателя"];
				КонецЕсли;
				
				ОбъектПоступлениеНаРС.Организация = Объект.Организация;
				ОбъектПоступлениеНаРС.Дата        = ТекСтрока.КолонкаДата;
				
				ОбъектПоступлениеНаРС.Контрагент  = ДанныеДляВзаиморасчетов.Контрагент;
				Если НЕ ДанныеДляВзаиморасчетов.Договор = Неопределено Тогда
					мВалютаРегламентированногоУчета   = ДанныеДляВзаиморасчетов.Договор.ВалютаВзаиморасчетов;
				КонецЕсли;
				СтавкаНДС = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеОсновнойСтавкиНДСПоУмолчанию(ТекСтрока.КолонкаДата);
				ОбъектПоступлениеНаРС.СчетОрганизации = Объект.Организация.ОсновнойБанковскийСчет;
				
				ЭтоРублевыйДокумент = (ОбъектПоступлениеНаРС.ВалютаДокумента = мВалютаРегламентированногоУчета
				ИЛИ НЕ ЗначениеЗаполнено(ОбъектПоступлениеНаРС.ВалютаДокумента));
				
				Если ЭтоРублевыйДокумент Тогда
					ОбъектПоступлениеНаРС.СчетБанк = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
				Иначе
					ОбъектПоступлениеНаРС.СчетБанк = ПланыСчетов.Хозрасчетный.ВалютныеСчета;
				КонецЕсли;
				
				
				// расшифровка платежа
				ОбъектПоступлениеНаРС.РасшифровкаПлатежа.Очистить();
				ОбъектПоступлениеНаРС.РасшифровкаПлатежа.Добавить();
				Для каждого СтрокаПлатеж Из ОбъектПоступлениеНаРС.РасшифровкаПлатежа Цикл
					СтрокаПлатеж.ДоговорКонтрагента = ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету(ТекСтрока.ЛицевойСчет,
					Объект.Организация,
					ТекСтрока["КолонкаДата"],
					"Договор");
					
					СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = СчетаУчета["СчетРасчетовПокупателя"];
					СтрокаПлатеж.СчетУчетаРасчетовПоАвансам = СчетаУчета["СчетАвансов"];
					
					Если ТипЗнч(ВыбрДок.Статья) = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств") Тогда
						СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = ВыбрДок.Статья;
					КонецЕсли;
					
					СтрокаПлатеж.СуммаПлатежа        = ТекСтрока.Сумма;
					СтрокаПлатеж.СуммаВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа;
					
					ЗначениеСтавкиНДС = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтавкаНДС);
					СтрокаПлатеж.СтавкаНДС = СтавкаНДС;
					СтрокаПлатеж.СуммаНДС = СтрокаПлатеж.СуммаПлатежа*ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС);
					
					СтруктураКурсаВзаиморасчетов         = РаботаСКурсамиВалют.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, 
					КонецДня(ОбъектПоступлениеНаРС.Дата));
					СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
					СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
					
					СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
				КонецЦикла;
				
				ОбъектПоступлениеНаРС.ВалютаДокумента = мВалютаРегламентированногоУчета;
				ОбъектПоступлениеНаРС.СуммаДокумента = ОбъектПоступлениеНаРС.РасшифровкаПлатежа.Итог("СуммаПлатежа");
				
				Попытка
					ОбъектПоступлениеНаРС.Записать(РежимЗаписиДокумента.Проведение);
					СтрокаТЧ = Объект.ТаблицаРеестра.Получить(ТекСтрока.НомерСтроки - 1);
					СтрокаТЧ.ДокПоступлениеНаРС = ОбъектПоступлениеНаРС.Ссылка;
				Исключение
					ТекстСообщения = "Строка №" 
					+ ТекСтрока.НомерСтроки 
					+ " файла, документ ""Поступление на расчетный счет""" 
					+ ОписаниеОшибки();
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстСообщения, , , , Ложь);
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Получает сведения для взаиморасчетов для указанного лицевого счета.
//
// Параметры:
//  Объект          – лицевой счет или парковочное место, для которых
//                    необходимо найти договор или контрагента
//  Дата            - дата поиска контрагента или договора контрагента
//  ИскомыйРесурс  - Строка - задается, если необходимо получить конкретный параметр: контрагента или договор контрагента.
//
// Возвращаемое значение:
//  Структура - если не указан параметр "ИскомыйРесурс" или Ссылка на справочник "Контрагенты" или "Договоры контрагентов".
//
Функция ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету(ЛицевойСчет, Организация, Дата = Неопределено, ИскомыйРесурс = Неопределено)
	
	Структура = Новый Структура;
	Структура.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	Структура.Вставить("Договор",    Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	
	Если Не СЗК_МодульЗащиты.ЛицензионныйКлючКорректен() Тогда
		Возврат Структура;
	КонецЕсли;
	
	Если Дата = Неопределено Тогда
		Дата = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	КонецЕсли;
	
	ТипЗначОбъекта = ТипЗнч(ЛицевойСчет);
	Если Не ТипЗначОбъекта = Тип("СправочникСсылка.КВП_ЛицевыеСчета")
		И НЕ ТипЗначОбъекта = Тип("СправочникОбъект.КВП_ЛицевыеСчета") Тогда
		Возврат Структура;
	Конецесли;
	
	ЗапросОсновнойДоговор = Новый Запрос();
	ЗапросОсновнойДоговор.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних.Договор,
	|	КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних.Контрагент
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(
	|			&Дата,
	|			ЛицевойСчет = &ЛицевойСчет
	|				И Организация = &Организация) КАК КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних";
	
	ЗапросОсновнойДоговор.УстановитьПараметр("Дата",        Дата);
	ЗапросОсновнойДоговор.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
	ЗапросОсновнойДоговор.УстановитьПараметр("Организация", Организация);
	
	Выборка = ЗапросОсновнойДоговор.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Структура.Вставить("Контрагент", Выборка.Контрагент);
		Структура.Вставить("Договор",    Выборка.Договор);
	КонецЕсли;
	
	Если ИскомыйРесурс = "Контрагент" ИЛИ ИскомыйРесурс = "Договор" Тогда
		Возврат Структура[ИскомыйРесурс];
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции // ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету()

&НаКлиенте
// Обработчик команды "УстановитьДату".
Процедура УстановитьДату(Команда)
	
	тмДатаПлатежа = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ОбработатьВводДаты", ЭтаФорма),
	тмДатаПлатежа,
	"Укажите дату платежа");
	
КонецПроцедуры // УстановитьДату()

&НаКлиенте
// Обработка результата ввода даты, вызванного в процедуре "УстановитьДату()".
Процедура ОбработатьВводДаты(Значение, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Значение) Тогда
		Для Каждого СтрокаТабличнойЧасти Из Объект.ТаблицаРеестра Цикл
			СтрокаТабличнойЧасти["КолонкаДата"] = Значение;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВводДаты()

#КонецОбласти
