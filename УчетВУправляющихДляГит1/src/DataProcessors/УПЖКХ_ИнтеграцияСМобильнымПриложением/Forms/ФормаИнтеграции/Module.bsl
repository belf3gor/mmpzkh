
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЭтоLinuxКлиент       = ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент();
	ЕстьПараметрыДоступа = ЗначениеЗаполнено(УПЖКХ_ВзаимодействиеССервисамиРарус.ПараметрыДоступаБазыКСервисамРарус());
	РежимРаботы          = УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеСБазой.РежимРаботыМеханизмаИнтеграцииСМобильнымПриложением();
	
	ТекущаяСтраницаСтартовая                      = НЕ ЕстьПараметрыДоступа
	                                                ИЛИ РежимРаботы = Перечисления.УПЖКХ_РежимРаботыИнтеграцииСМобильнымПриложением.ПустаяСсылка()
	                                                ИЛИ РежимРаботы = Перечисления.УПЖКХ_РежимРаботыИнтеграцииСМобильнымПриложением.Регистрация;
	ТекущаяСтраницаПодтверждениеРегистрации       = РежимРаботы = Перечисления.УПЖКХ_РежимРаботыИнтеграцииСМобильнымПриложением.ПодтверждениеРегистрации;
	ТекущаяСтраницаНастройкаАвтоматическогоОбмена = РежимРаботы = Перечисления.УПЖКХ_РежимРаботыИнтеграцииСМобильнымПриложением.НастройкаАвтоматическогоОбмена;
	ТекущаяСтраницаИнформированиеЖильцов          = РежимРаботы = Перечисления.УПЖКХ_РежимРаботыИнтеграцииСМобильнымПриложением.ИнформированиеЖильцов;
	ТекущаяСтраницаЗвершениеМастераИнтеграции     = РежимРаботы = Перечисления.УПЖКХ_РежимРаботыИнтеграцииСМобильнымПриложением.ЗавершениеМастераИнтеграции;
	ТекущаяСтраницаОбмены                         = РежимРаботы = Перечисления.УПЖКХ_РежимРаботыИнтеграцииСМобильнымПриложением.РабочийРежим;
	
	Если ТекущаяСтраницаСтартовая Тогда
		
		ПерейтиНаСтраницуСтартовую();
		
	ИначеЕсли ТекущаяСтраницаПодтверждениеРегистрации Тогда
		
		ПерейтиНаСтраницуПодтвержденияРегистрации();
		
		// Проверка передачи кодового слова на сервис. Если не передано, то отправляем запрос на повторную отправку.
		Если НЕ УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеССервером.ПроверитьОтправкуКодовогоСловаНаEmail() Тогда
			УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеССервером.ОтправитьКодовоеСловоНаEmailПовторно();
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраницаНастройкаАвтоматическогоОбмена Тогда
		
		ПерейтиНаСтраницуНастройкиРасписанияАвтоматическогоОбмена();
		
	ИначеЕсли ТекущаяСтраницаИнформированиеЖильцов Тогда
		
		ПерейтиНаСтраницуИнформированияЖильцов();
		
	ИначеЕсли ТекущаяСтраницаЗвершениеМастераИнтеграции Тогда
		
		ПерейтиНаСтраницуЗавершенияМастераИнтеграции();
		
	ИначеЕсли ТекущаяСтраницаОбмены Тогда
		
		ПерейтиНаСтраницуОбменов();
		
	КонецЕсли;
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма, Элементы.КоманднаяПанель2);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

&НаКлиенте
// Обработчик "ПриОткрытии" формы.
//
Процедура ПриОткрытии(Отказ)
	
	// Запускаем сбор статистики с сервиса.
	ВыполнитьСборСтатистики();
	
КонецПроцедуры

&НаКлиенте
// Обработчик "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ТабличныйДокумент" 
		И Параметр.ИмяОбъектаМетаданныхМакета = РедактируемаяПечатнаяФорма
		И Источник.ВладелецФормы = ЭтотОбъект Тогда
		Макет = Параметр.ТабличныйДокумент;
		АдресМакетаВоВременномХранилище = ПоместитьВоВременноеХранилище(Макет);
		ЗаписатьМакет(Параметр.ИмяОбъектаМетаданныхМакета, АдресМакетаВоВременномХранилище);
	ИначеЕсли ИмяСобытия = "ОбновитьИнтерфейс" Тогда
		УстановитьВидимостьГиперссылкиНаНастройкуМногопоточности();
	ИначеЕсли ИмяСобытия = "ИзменениеНастроекУчетнойПолитики" Тогда
		ЗаполнитьГиперссылкиОбОграниченииДатВводаПоказаний();
	ИначеЕсли ИмяСобытия = "ИзменениеНастроекУпрощеннойАДС" Тогда
		ЗаполнитьГиперссылкиНастроекУпрощеннойАДС();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

/////////////////////////////////////////////
// Страница ввода параметров доступа.

&НаКлиенте
// Обработчик "ПриИзменении" флага "Согласие на регистрацию".
//
Процедура СогласиеНаРегистрациюПриИзменении(Элемент)
	
	Элементы.КомандаДалее.Доступность = СогласиеНаРегистрацию;
	
КонецПроцедуры

&НаКлиенте
// Обработчик "ПриИзменении" тумблера "ПолеНовыйИлиИмеющийсяАккаунт".
//
Процедура ПолеНовыйИлиИмеющийсяАккаунтПриИзменении(Элемент)
	
	Если НовыйИлиИмеющийсяАккаунт = 0 Тогда
		Элементы.СтраницыРегистрацияНовогоАккаунта.ТекущаяСтраница = Элементы.ГруппаНовыйАккаунт;
		Элементы.КомандаДалее.Доступность                          = СогласиеНаРегистрацию;
	ИначеЕсли НовыйИлиИмеющийсяАккаунт = 1 Тогда
		Элементы.СтраницыРегистрацияНовогоАккаунта.ТекущаяСтраница = Элементы.ГруппаИмеющийсяАккаунт;
		Элементы.КомандаДалее.Доступность                          = Истина;
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////
// Страница настройки расписания автоматического обмена.

&НаКлиенте
// Обработчик "ПриИзменении" тумблера "ВидНастройкиРасписанияВыгрузок".
//
Процедура ВидНастройкиРасписанияВыгрузокПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементовРасписания();
	
КонецПроцедуры

&НаКлиенте
// Обработчик "ПриИзменении" тумблера "ВидНастройкиРасписанияЗагрузок".
//
Процедура ВидНастройкиРасписанияЗагрузокПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементовРасписания();
	
КонецПроцедуры

&НаКлиенте
// Обработчик нажатия кнопки "РасписаниеРегламентногоЗаданияВыгрузок".
//
Процедура РасписаниеРегламентногоЗаданияВыгрузокНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(ПолучитьРасписаниеВыгрузок());
	Диалог.Показать(Новый ОписаниеОповещения("РасписаниеРегламентногоЗаданияВыгрузокНажатиеЗавершение", ЭтаФорма, Новый Структура("Диалог", Диалог)));
	
КонецПроцедуры

&НаКлиенте
// Обработчик нажатия кнопки "РасписаниеРегламентногоЗаданияЗагрузок".
//
Процедура РасписаниеРегламентногоЗаданияЗагрузокНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(ПолучитьРасписаниеЗагрузок());
	Диалог.Показать(Новый ОписаниеОповещения("РасписаниеРегламентногоЗаданияЗагрузокНажатиеЗавершение", ЭтаФорма, Новый Структура("Диалог", Диалог)));
	
КонецПроцедуры

&НаКлиенте
// Обрабатывает оповещения об изменении расписания выгрузок.
//
Процедура РасписаниеРегламентногоЗаданияВыгрузокНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	
	Если ТипЗнч(Результат) = Тип("РасписаниеРегламентногоЗадания") Тогда
		УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.УстановитьРасписание(ИдентификаторРегламентногоЗаданияВыгрузок, Диалог.Расписание);
		РасписаниеРегламентногоЗаданияВыгрузок = ПолучитьРасписаниеРегламентногоЗадания(ИдентификаторРегламентногоЗаданияВыгрузок, ВыполнятьВыгрузкиПоРасписанию);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обрабатывает оповещения об изменении расписания загрузок.
//
Процедура РасписаниеРегламентногоЗаданияЗагрузокНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	
	Если ТипЗнч(Результат) = Тип("РасписаниеРегламентногоЗадания") Тогда
		УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.УстановитьРасписание(ИдентификаторРегламентногоЗаданияЗагрузок, Диалог.Расписание);
		РасписаниеРегламентногоЗаданияЗагрузок = ПолучитьРасписаниеРегламентногоЗадания(ИдентификаторРегламентногоЗаданияЗагрузок, ВыполнятьЗагрузкиПоРасписанию);
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////
// Страница звершения мастера.

&НаКлиенте
// Обрабатывает нажатие на картинку "Перейти на сайт разработчика".
//
Процедура КартинкаПерейтиНаСайтРазработчикаЖКХЛичныйКабинетНажатие(Элемент)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПерейтиНаСайтРазработчикаНажатиеЗапускПриложения", ЭтотОбъект);
	
	НачатьЗапускПриложения(ОписаниеОповещения, "https://vgkh.ru/mobile_apps/jkh-lichnyy-kabinet/");
	
КонецПроцедуры

&НаКлиенте
// Пустой обработчик.
//
Процедура ПерейтиНаСайтРазработчикаНажатиеЗапускПриложения(КодВозврата, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

/////////////////////////////////////////////
// Страница обменов.

&НаКлиенте
// Открывает гиперссылки в поле с сообщением о статусе подписки.
//
Процедура ПолеИнформацияОПодпискеВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если Лев(Область.Текст, 4) = "http" Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПолеИнформацияОПодпискеВыборЗапускПриложения", ЭтотОбъект,,
													  "ПолеИнформацияОПодпискеВыборОбработкаИсключения", ЭтотОбъект);
		
		НачатьЗапускПриложения(ОписаниеОповещения, Область.Текст);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения запуска приложения
Процедура ПолеИнформацияОПодпискеВыборЗапускПриложения(КодВозврата, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

&НаКлиенте
// Обработчик исключения.
Процедура ПолеИнформацияОПодпискеВыборОбработкаИсключения(ИнформацияОбОшибке, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

&НаКлиенте
// Открывает форму настроек расписания обмена.
//
Процедура СсылкаПерейтиКНастройкеРасписанияОбменаНажатие(Элемент)
	
	ОткрытьФорму("Обработка.УПЖКХ_ИнтеграцияСМобильнымПриложением.Форма.ФормаНастройкиРасписанияОбмена", , ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
// Открывает форму разового обмена.
//
Процедура СсылкаПерейтиКФормеРазовогоОбменаНажатие(Элемент)
	
	ОткрытьФорму("Обработка.УПЖКХ_ИнтеграцияСМобильнымПриложением.Форма.ФормаРазовогоОбмена", , ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
// Открывает форму истории обменов.
//
Процедура СсылкаПерейтиКИсторииОбменовНажатие(Элемент)
	
	ОткрытьФорму("Обработка.УПЖКХ_ИнтеграцияСМобильнымПриложением.Форма.ФормаИсторияОбменов", , ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
// Открывает форму печати памяток доступа.
//
Процедура СсылкаПечатьПамятокДоступаНажатие(Элемент)
	
	ОткрытьФорму("Обработка.УПЖКХ_ИнтеграцияСМобильнымПриложением.Форма.ФормаПечатиПамятокДоступа", , ЭтаФорма, Истина,,,, РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
// Открывает форму настройки СМС рассылки.
//
Процедура СсылкаНастройкиСМСРассылкиНажатие(Элемент)
	
	ОткрытьФорму("Документ.смсСообщение.Форма.ФормаСписка", , ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
// (Отложено) Открывает форму настройки push-уведомлений.
//
Процедура СсылкаНастройкиПушУведомленийНажатие(Элемент)
	
	ОткрытьФорму("Обработка.УПЖКХ_ИнтеграцияСМобильнымПриложением.Форма.ФормаРассылкиПушУведомлений", , ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
// Открывает страницу описания приложения.
//
Процедура СсылкаНаСтраницуЛичногоКабинетаНажатие(Элемент)
	
	АдресСтраницыПриложения = УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеССервером.ПолучитьАдресГлавнойСтраницыСервисаЖКХЛичныйКабинет();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СсылкаНаСтраницуЛичногоКабинетаНажатиеЗапускПриложения", ЭтотОбъект);
	
	НачатьЗапускПриложения(ОписаниеОповещения, АдресСтраницыПриложения);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения запуска приложения.
Процедура СсылкаНаСтраницуЛичногоКабинетаНажатиеЗапускПриложения(КодВозврата, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

&НаКлиенте
// Открывает страницу сервиса с описанием способов оповещения жильцов о параметрах доступа в отдельном окне.
//
Процедура СсылкаНаСтраницуСпособовОповещенияЖильцовОПараметрахДоступаНажатие(Элемент)
	
	АдресСтраницыОписанияСпособовОповещенияЖильцовОПараметрахДоступа = УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеССервером.ПолучитьАдресСтраницыОписанияСпособовОповещенияЖильцовОПараметрахДоступа();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СсылкаНаСтраницуСпособовОповещенияНажатиеЗапускПриложения", ЭтотОбъект);
	
	НачатьЗапускПриложения(ОписаниеОповещения, АдресСтраницыОписанияСпособовОповещенияЖильцовОПараметрахДоступа);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения запуска приложения.
Процедура СсылкаНаСтраницуСпособовОповещенияНажатиеЗапускПриложения(КодВозврата, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

&НаКлиенте
// Открывает страницу связи с нами.
//
Процедура СсылкаСвязатьсяСНамиНажатие(Элемент)
	
	АдресСтраницыОписанияСпособовОповещенияЖильцовОПараметрахДоступа = УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеССервером.ПолучитьАдресСтраницыСвязиСНами();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СсылкаСвязатьсяСНамиНажатиеЗапускПриложения", ЭтотОбъект);
	
	НачатьЗапускПриложения(ОписаниеОповещения, АдресСтраницыОписанияСпособовОповещенияЖильцовОПараметрахДоступа);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения запуска приложения.
Процедура СсылкаСвязатьсяСНамиНажатиеЗапускПриложения(КодВозврата, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

&НаКлиенте
// Открывает страницу сервиса с описанием лицензий в отдельном окне.
//
Процедура СсылкаНаСтраницуСпособовОплатыНажатие(Элемент)
	
	АдресСтраницыОписанияСпособовОплаты = УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеССервером.ПолучитьАдресСтраницыОписанияСпособовАктивацииАккаунта();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СсылкаНаСтраницуСпособовОплатыНажатиеЗапускПриложения", ЭтотОбъект);
	
	НачатьЗапускПриложения(ОписаниеОповещения, АдресСтраницыОписанияСпособовОплаты);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения запуска приложения.
Процедура СсылкаНаСтраницуСпособовОплатыНажатиеЗапускПриложения(КодВозврата, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура - открывает настройки многопоточности.
//
Процедура ГиперссылкаНаСтраницуНастройкуМногопоточностиНажатие(Элемент)
	
	КВП_РаботаСДиалогамиКлиент.ПерейтиНаСтраницуНастроекПроизводительности();
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

/////////////////////////////////////////////
// Общие

&НаКлиенте
// Процедура обработчик команды "Назад".
//
Процедура КомандаНазад(Команда)
	
	УстановитьВидимость("Назад");
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик команды "Далее".
//
Процедура КомандаДалее(Команда)
	
	СведенияОбОшибке = "";
	
	Если ПереходВпередВозможен(СведенияОбОшибке) Тогда
		УстановитьВидимость("Вперед");
	КонецЕсли;
	
	ОбработатьСообщенияОбОшибках(СведенияОбОшибке);
	
КонецПроцедуры

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

/////////////////////////////////////////////
// Страница регистрации.

&НаКлиенте
// Открывает страницу условий пользования сервисом моб. приложения.
//
Процедура КомандаУсловияПользованияСервисом(Команда)
	
	ПараметрыДляПередачи = Новый Структура("ЗаголовокФормы, АдресСтраницы", "Условия пользования сервисом", УПЖКХ_ВзаимодействиеССервисамиРарус.ПолучитьАдресСтраницыСУсловиямиПользованияСервисами());
	
	ОткрытьФорму("Обработка.УПЖКХ_ИнтеграцияСМобильнымПриложением.Форма.ФормаОткрытияHtmlСтраниц", ПараметрыДляПередачи, ЭтаФорма);
	
КонецПроцедуры

/////////////////////////////////////////////
// Страница подтверждения регистрации.

&НаКлиенте
// Отправляет кодовое слово на тот же email повторно.
//
Процедура КомандаОтправитьКодовоеСловоПовторно(Команда)
	
	СведенияОбОшибке = "";
	
	УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеССервером.ОтправитьКодовоеСловоНаEmailПовторно(СведенияОбОшибке);
	
	ОбработатьСообщенияОбОшибках(СведенияОбОшибке);
	
КонецПроцедуры

&НаКлиенте
// Открывает меню изменения email'a пользователя.
//
Процедура КомандаУказатьДругойEmail(Команда)
	
	Элементы.ГруппаПодтверждениеРегистрации.Видимость       = Ложь;
	Элементы.ГруппаПовторнаяОтправкаКодовогоСлова.Видимость = Ложь;
	Элементы.ГруппаИзменениеЭлектроннойПочты.Видимость      = Истина;
	Элементы.КомандаДалее.Доступность                       = Ложь;
	Элементы.НадписьКорректностьИзменяемойПочты.Видимость   = Ложь;
	Элементы.НадписьКорректностьКодовогоСлова.Видимость     = Ложь;
	
	ПараметрыДоступа = УПЖКХ_ВзаимодействиеССервисамиРарус.ПараметрыДоступаБазыКСервисамРарус();
	Если ТипЗнч(ПараметрыДоступа) = Тип("Структура") И ПараметрыДоступа.Свойство("Email") Тогда
		
		АдресЭлектроннойПочтыДляИзменения = ПараметрыДоступа.Email;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Отправляет новый email на сервис. Кодовое слово будет отправлено автоматически.
//
Процедура КомандаОтправитьНовыйEmail(Команда)
	
	Если НЕ ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(АдресЭлектроннойПочтыДляИзменения) Тогда
		
		Элементы.НадписьКорректностьИзменяемойПочты.Видимость = Истина;
		
	Иначе
		
		СведенияОбОшибке = "";
		
		Элементы.НадписьКорректностьИзменяемойПочты.Видимость = Ложь;
		
		УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеССервером.ИзменитьEmailИОтправитьКодовоеСловоПовторно(АдресЭлектроннойПочтыДляИзменения, СведенияОбОшибке);
		
		ОбработатьСообщенияОбОшибках(СведенияОбОшибке);
		
		Элементы.ГруппаПодтверждениеРегистрации.Видимость       = Истина;
		Элементы.ГруппаПовторнаяОтправкаКодовогоСлова.Видимость = Истина;
		Элементы.ГруппаИзменениеЭлектроннойПочты.Видимость      = Ложь;
		Элементы.КомандаДалее.Доступность                       = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик нажатия кнопки "Отмена", предназначенной для выхода из меню изменения email'а без его отправки.
//
Процедура КомандаОтменаИзмененияEmail(Команда)
	
	Элементы.ГруппаПодтверждениеРегистрации.Видимость       = Истина;
	Элементы.ГруппаПовторнаяОтправкаКодовогоСлова.Видимость = Истина;
	Элементы.ГруппаИзменениеЭлектроннойПочты.Видимость      = Ложь;
	Элементы.КомандаДалее.Доступность                       = Истина;
	
КонецПроцедуры

/////////////////////////////////////////////
// Страница завершения.

&НаКлиенте
// Открывает форму печати листовок.
//
Процедура КомандаПечатьЛистовок(Команда)
	
	Праметры = Новый Структура("ИмяОбъекта", "Обработка.УПЖКХ_ИнтеграцияСМобильнымПриложением");
	ОткрытьФорму("ОбщаяФорма.УПЖКХ_ПечатьЛистовокЖКХ", Праметры, ЭтаФорма, Ложь);
	
КонецПроцедуры

&НаКлиенте
// Открывает настройки формирования платежных документов.
//
Процедура КомандаПерейтиКНастройкамКвитанции(Команда)
	
	ОткрытьФорму("РегистрСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента.Форма.ФормаСписка",, ЭтаФорма,, ВариантОткрытияОкна.ОтдельноеОкно);
	
КонецПроцедуры

&НаКлиенте
// Открывает страницу сервиса с описанием способов оповещения жильцов о параметрах доступа в отдельном окне.
//
Процедура КомандаСсылкаНаСтраницуСпособовОповещенияЖильцовОПараметрахДоступа(Команда)
	
	АдресСтраницыОписанияСпособовОповещенияЖильцовОПараметрахДоступа = УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеССервером.ПолучитьАдресСтраницыОписанияСпособовОповещенияЖильцовОПараметрахДоступа();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаСсылкаНаСтраницуСпособовОповещенияЖильцовОПараметрахДоступаЗапускПриложения", ЭтотОбъект);
	
	НачатьЗапускПриложения(ОписаниеОповещения, АдресСтраницыОписанияСпособовОповещенияЖильцовОПараметрахДоступа);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения запуска приложения.
Процедура КомандаСсылкаНаСтраницуСпособовОповещенияЖильцовОПараметрахДоступаЗапускПриложения(КодВозврата, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

/////////////////////////////////////////////
// Страница управления обменами.

&НаКлиенте
// Копирует ссылку для скачивания приложения в Google Play.
//
Процедура КомандаСкопироватьВБуферGooglePlay(Команда)
	
	СкопироватьТекстВБуферОбмена(УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеССервером.ПолучитьАдресМобильногоПриложенияЖКХЛичныйКабинетGooglePlay());
	
КонецПроцедуры

&НаКлиенте
// Копирует ссылку для скачивания приложения в App Store.
//
Процедура КомандаСкопироватьВБуферAppStore(Команда)
	
	СкопироватьТекстВБуферОбмена(УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеССервером.ПолучитьАдресМобильногоПриложенияЖКХЛичныйКабинетAppStore());
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ СТРАНИЦАМИ

#Область ПроцедурыИФункцииУправленияСтраницами

/////////////////////////////////////////////
// Общие

&НаСервере
// Проверяет возможность перехода на следующую страницу.
//
Функция ПереходВпередВозможен(СведенияОбОшибке)
	
	ТекущаяСтраница = Элементы.СтраницыИнтеграцииСМобильнымПриложением.ТекущаяСтраница;
	
	СведенияОбОшибке = "";
	
	Если ТекущаяСтраница = Элементы.СтраницаРегистрация И Не ПользовательУжеИмеетАккаунт Тогда
		
		Возврат ВыполнитьРегистрациюАккаунта(СведенияОбОшибке);
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаПодтверждениеРегистрации Тогда
		
		Возврат ВыполнитьОтправкуКодовогоСловаДляОкончанияРегистрацииНаСервере(СведенияОбОшибке);
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаНастройкиРасписанияАвтоматическогоОбмена Тогда
		
		ТекущаяСтраницаНастроек = Элементы.ГруппаСтраницыНастроек.ТекущаяСтраница;
		
		Если ТекущаяСтраницаНастроек = Элементы.ГруппаОбщиеНастройки И НастройкаФормированияДанных.Пустая() Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбрана настройка формирования данных.");
			Возврат Ложь;
		КонецЕсли;
		
		ЗавершитьРедактированиеНастроекАвтоматическогоОбмена();
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
// Устанавливает видимость элементов формы в зависимсоти от текущей страницы настроек.
//
Процедура УстановитьВидимость(НаправлениеДвижения)
	
	ТекущаяСтраница = Элементы.СтраницыИнтеграцииСМобильнымПриложением.ТекущаяСтраница;
	
	Если НаправлениеДвижения = "Вперед" Тогда
		
		Если ТекущаяСтраница = Элементы.СтраницаСтартовая Тогда
			ПерейтиНаСтраницуРегистрации();
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаРегистрация Тогда
			Если НовыйИлиИмеющийсяАккаунт = 1 Или ПользовательУжеИмеетАккаунт Тогда
				ПерейтиНаСтраницуНастройкиРасписанияАвтоматическогоОбмена();
			ИначеЕсли НовыйИлиИмеющийсяАккаунт = 0 Тогда
				ПерейтиНаСтраницуПодтвержденияРегистрации();
			КонецЕсли;
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаПодтверждениеРегистрации Тогда
			ПерейтиНаСтраницуНастройкиРасписанияАвтоматическогоОбмена();
			ПерейтиНаСтраницуОбщиеНастроекОбмена();
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаНастройкиРасписанияАвтоматическогоОбмена Тогда
			ВыполнитьПереходМеждуНастройкамиНаСтраницеНастроек(НаправлениеДвижения);
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаИнформированияЖильцов Тогда
			ПерейтиНаСтраницуЗавершенияМастераИнтеграции();
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаЗавершенияМастераИнтеграции Тогда
			ПерейтиНаСтраницуОбменов();
		КонецЕсли;
		
	ИначеЕсли НаправлениеДвижения = "Назад" Тогда
		
		Если ТекущаяСтраница = Элементы.СтраницаРегистрация Тогда
			ПерейтиНаСтраницуСтартовую();
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаИнформированияЖильцов Тогда
			ПерейтиНаСтраницуНастройкиРасписанияАвтоматическогоОбмена();
			ПерейтиНаСтраницуНастроекАвтоматическогоОбмена();
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаНастройкиРасписанияАвтоматическогоОбмена Тогда
			
			ВыполнитьПереходМеждуНастройкамиНаСтраницеНастроек(НаправлениеДвижения);
			
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаЗавершенияМастераИнтеграции Тогда
			ПерейтиНаСтраницуИнформированияЖильцов();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Выполняет переход между настройками на странице настроек.
//
Процедура ВыполнитьПереходМеждуНастройкамиНаСтраницеНастроек(НаправлениеДвижения)
	
	ТекущаяСтраницаНастроек = Элементы.ГруппаСтраницыНастроек.ТекущаяСтраница;
	
	Если НаправлениеДвижения = "Вперед" Тогда
		
		Если ТекущаяСтраницаНастроек = Элементы.ГруппаОбщиеНастройки Тогда
			ПерейтиНаСтраницуНастроекЗагрузкиПоказаний();
		ИначеЕсли ТекущаяСтраницаНастроек = Элементы.ГруппаНастройкиЗагрузкиПоказаний Тогда
			ПерейтиНаСтраницуНастроекАвтоматическогоОбмена();
		Иначе
			ПерейтиНаСтраницуИнформированияЖильцов();
		КонецЕсли;
		
	ИначеЕсли НаправлениеДвижения = "Назад" Тогда
		
		Если ТекущаяСтраницаНастроек = Элементы.ГруппаНастройкиЗагрузкиПоказаний Тогда
			ПерейтиНаСтраницуОбщиеНастроекОбмена();
		ИначеЕсли ТекущаяСтраницаНастроек = Элементы.ГруппаНастройкиАвтоматическогоОбмена Тогда
			ПерейтиНаСтраницуНастроекЗагрузкиПоказаний();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Выполняет переход на общие настройки обмена.
//
Процедура ПерейтиНаСтраницуОбщиеНастроекОбмена()
	
	Элементы.ГруппаСтраницыНастроек.ТекущаяСтраница = Элементы.ГруппаОбщиеНастройки;
	Элементы.КомандаНазад.Видимость   = Ложь;
	Элементы.КомандаНазад.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Выполняет переход на настройки загрузки показаний.
//
Процедура ПерейтиНаСтраницуНастроекЗагрузкиПоказаний()
	
	Элементы.ГруппаСтраницыНастроек.ТекущаяСтраница = Элементы.ГруппаНастройкиЗагрузкиПоказаний;
	Элементы.КомандаНазад.Видимость   = Истина;
	Элементы.КомандаНазад.Доступность = Истина;
	
	ЗаполнитьГиперссылкиОбОграниченииДатВводаПоказаний();
	
	ЗаполнитьГиперссылкиНастроекУпрощеннойАДС();
	
КонецПроцедуры

&НаКлиенте
// Выполняет переход на настройки расписаний автоматического обмена.
//
Процедура ПерейтиНаСтраницуНастроекАвтоматическогоОбмена()
	
	Элементы.ГруппаСтраницыНастроек.ТекущаяСтраница = Элементы.ГруппаНастройкиАвтоматическогоОбмена;
	Элементы.КомандаНазад.Видимость   = Истина;
	Элементы.КомандаНазад.Доступность = Истина;
	
КонецПроцедуры

&НаСервере
// Выводит на страницу гиперссылки на настройки Учетной политики (ЖКХ) для настройки дат ограничения ввода показаний.
//
Процедура ЗаполнитьГиперссылкиОбОграниченииДатВводаПоказаний()
	
	УПЖКХ_ПодключаемыеЭлементыФормСервер.ДобавитьГиперссылкиНаФормыЗаписиУчетнойПолитикиДляВсехОрганизаций(ЭтаФорма, Элементы.ГруппаНастройкаОграниченийВводаПоказанийСчетчиков);
	
КонецПроцедуры

&НаСервере
// Выводит на форму настроек упрощенной АДС
//
Процедура ЗаполнитьГиперссылкиНастроекУпрощеннойАДС()
	
	УПЖКХ_ПодключаемыеЭлементыФормСервер.ДобавитьГиперссылкиНаНастройкиУпрощеннойАДСДляВсехОрганизаций(ЭтаФорма, Элементы.ГруппаНастройкаУпрощеннойАДС);
	
КонецПроцедуры

&НаКлиенте
// Подключает обработчик события "ОбработкаНавигационнойСсылки" к гиперссылке настроек упрощенной АДС
//
Процедура Подключаемый_НастройкиУпрощеннойАДСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаДляОбработки, СтандартнаяОбработка)
	
	УПЖКХ_ПодключаемыеЭлементыФормКлиент.НастройкиУпрощеннойАДСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаДляОбработки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
// Устанавливает видимость гиперссылки для перехода на страницу настройки многопоточности.
//
Процедура УстановитьВидимостьГиперссылкиНаНастройкуМногопоточности()
	
	// Если база серверная и многопоточность не используется, показываем гиперссылку.
	Если УПЖКХ_МногопоточнаяОбработкаДанных.ПоказыватьСсылкиНаСтраницуНастроекМногопоточности() Тогда
		
		Если УПЖКХ_МногопоточнаяОбработкаДанных.ПроверитьВключенаЛиМногопоточнаяОбработкаДанных() Тогда
			Элементы.ГиперссылкаНаСтраницуНастройкуМногопоточности.Заголовок = "При обмене исползуется многопоточная обработка данных. Нажмите, чтобы перейти к настройке многопоточности";
		Иначе
			Элементы.ГиперссылкаНаСтраницуНастройкуМногопоточности.Заголовок = "Механизм обмена может работать быстрее при использовании многопоточной обработки данных. Нажмите, чтобы перейти к настройке многопоточности";
		КонецЕсли;
		
		Элементы.ГиперссылкаНаСтраницуНастройкуМногопоточности.Видимость = Истина;
		
	Иначе
		Элементы.ГиперссылкаНаСтраницуНастройкуМногопоточности.Видимость = Ложь
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////
// Стартовая страница.

&НаСервере
// Выполняет переход на стартовую страницу мастера интеграции.
//
Процедура ПерейтиНаСтраницуСтартовую()
	
	ЭтаФорма.Заголовок = "Настройка обмена данными с мобильным приложением ""ЖКХ: Личный кабинет""";
	
	Элементы.НадписьЗаголовокСтартовая.Видимость                      = Истина;
	Элементы.НадписьЗаголовокРегистрация.Видимость                    = Ложь;
	Элементы.НадписьЗаголовокПодтверждениеРегистрации.Видимость       = Ложь;
	Элементы.НадписьЗаголовокНастройкиАвтоматическогоОбмена.Видимость = Ложь;
	Элементы.НадписьЗаголовокИнформированиеЖильцов.Видимость          = Ложь;
	Элементы.НадписьЗаголовокЗавершениеМастераИнтеграции.Видимость    = Ложь;
	Элементы.НадписьЗаголовокНастройкаОбменов.Видимость               = Ложь;
	
	Элементы.КомандаНазад.Видимость   = Ложь;
	Элементы.КомандаДалее.Видимость   = Истина;
	Элементы.КомандаГотово.Видимость  = Ложь;
	Элементы.КомандаОтмена.Видимость  = Истина;
	Элементы.КомандаДалее.Доступность = Истина;
	
	Элементы.КомандаДалее.Заголовок = "Далее >>";
	
	Элементы.СтраницыИнтеграцииСМобильнымПриложением.ТекущаяСтраница = Элементы.СтраницаСтартовая;
	Элементы.ПанельДекораций.ТекущаяСтраница                         = Элементы.ПередРегистрацией;
	
	ВыделитьЗаголовокТекущейСтраницы();
	
КонецПроцедуры

/////////////////////////////////////////////
// Страница регистрации.

&НаСервере
// Выполняет переход на страницу регистрации мастера интеграции.
//
Процедура ПерейтиНаСтраницуРегистрации()
	
	ЭтаФорма.Заголовок = "Настройка обмена данными с мобильным приложением ""ЖКХ: Личный кабинет""";
	
	Элементы.НадписьЗаголовокСтартовая.Видимость                      = Ложь;
	Элементы.НадписьЗаголовокРегистрация.Видимость                    = Истина;
	Элементы.НадписьЗаголовокПодтверждениеРегистрации.Видимость       = Ложь;
	Элементы.НадписьЗаголовокНастройкиАвтоматическогоОбмена.Видимость = Ложь;
	Элементы.НадписьЗаголовокИнформированиеЖильцов.Видимость          = Ложь;
	Элементы.НадписьЗаголовокЗавершениеМастераИнтеграции.Видимость    = Ложь;
	Элементы.НадписьЗаголовокНастройкаОбменов.Видимость               = Ложь;
	
	Элементы.КомандаДалее.Доступность = СогласиеНаРегистрацию;
	
	ИмеющиесяПараметры = УПЖКХ_ВзаимодействиеССервисамиРарус.ПараметрыДоступаБазыКСервисамРарус();
	
	Если (ИмеющиесяПараметры.Свойство("Логин") И Не ПустаяСтрока(ИмеющиесяПараметры.Логин)) И (ИмеющиесяПараметры.Свойство("Email") И Не ПустаяСтрока(ИмеющиесяПараметры.Email)) Тогда
		Элементы.ГруппаРегистрации.Видимость                = Ложь;
		Элементы.ГруппаПредупреждениеОРегистрации.Видимость = Истина;
		
		Элементы.СохраненныйЛогин.Заголовок                 = "Логин: " + ИмеющиесяПараметры.Логин;
		Элементы.СохраненныйАдресЭлектроннойПочты.Заголовок = "Адрес электронной почты: " + ИмеющиесяПараметры.Email;
		
		ПользовательУжеИмеетАккаунт = Истина;
		
	Иначе
		Элементы.ГруппаРегистрации.Видимость                = Истина;
		Элементы.ГруппаПредупреждениеОРегистрации.Видимость = Ложь;
		
		Элементы.КомандаДалее.Заголовок = "Начать интеграцию >>";
		
		Элементы.СтраницыРегистрацияНовогоАккаунта.ТекущаяСтраница = Элементы.ГруппаНовыйАккаунт;
		
		ПользовательУжеИмеетАккаунт = Ложь;
	КонецЕсли;
	
	Элементы.СтраницыИнтеграцииСМобильнымПриложением.ТекущаяСтраница = Элементы.СтраницаРегистрация;
	Элементы.ПанельДекораций.ТекущаяСтраница                         = Элементы.Регистрация;
	
	Элементы.КомандаНазад.Видимость   = Истина;
	Элементы.КомандаДалее.Видимость   = Истина;
	Элементы.КомандаГотово.Видимость  = Ложь;
	Элементы.КомандаОтмена.Видимость  = Истина;
	
	Элементы.КомандаНазад.Заголовок = "<< Назад";
	
	НовыйИлиИмеющийсяАккаунт = 0;
	
	УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеСБазой.УстановитьРежимРаботыМеханизмаИнтеграцииСМобильнымПриложением(Перечисления.УПЖКХ_РежимРаботыИнтеграцииСМобильнымПриложением.Регистрация);
	
	ВыделитьЗаголовокТекущейСтраницы();
	
КонецПроцедуры

&НаСервере
// Выполняет проверку корректности введенных параметров доступа.
//
Функция ПроверитьПравильностьПараметровДоступа()
	
	ПараметрыДоступаКорректны = Истина;
	
	Если Логин = "" Тогда
		Элементы.НадписьКорректностьЛогина.Видимость = Истина;
		ПараметрыДоступаКорректны = Ложь;
	Иначе
		Элементы.НадписьКорректностьЛогина.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(АдресЭлектроннойПочты) Тогда
		Элементы.НадписьКорректностьЭлектроннойПочты.Видимость = Ложь;
	Иначе
		Элементы.НадписьКорректностьЭлектроннойПочты.Видимость = Истина;
		ПараметрыДоступаКорректны = Ложь;
	КонецЕсли;
	
	Если Пароль = "" Тогда
		Элементы.НадписьКорректностьПароля.Видимость = Истина;
		ПараметрыДоступаКорректны = Ложь;
	Иначе
		Элементы.НадписьКорректностьПароля.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ Пароль = "" И (ПодтверждениеПароля = "" ИЛИ НЕ Пароль = ПодтверждениеПароля) Тогда
		Элементы.НадписьКорректностьПодтвержденногоПароля.Видимость = Истина;
		ПараметрыДоступаКорректны = Ложь;
	Иначе
		Элементы.НадписьКорректностьПодтвержденногоПароля.Видимость = Ложь;
	КонецЕсли;
	
	Возврат ПараметрыДоступаКорректны;
	
КонецФункции

&НаСервере
// Выполняет проверку корректности введенных параметров доступа для верификации.
//
Функция ПроверитьПравильностьПараметровДоступаВерификация()
	
	ПараметрыДоступаКорректны = Истина;
	
	Если ЛогинСуществующийАккаунт = "" Тогда
		Элементы.НадписьКорректностьЛогинаСуществующийАккаунт.Видимость = Истина;
		ПараметрыДоступаКорректны = Ложь;
	Иначе
		Элементы.НадписьКорректностьЛогинаСуществующийАккаунт.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(АдресЭлектроннойПочтыСуществующийАккаунт) Тогда
		Элементы.НадписьКорректностьЭлектроннойПочтыСуществующийАккаунт.Видимость = Ложь;
	Иначе
		Элементы.НадписьКорректностьЭлектроннойПочтыСуществующийАккаунт.Видимость = Истина;
		ПараметрыДоступаКорректны = Ложь;
	КонецЕсли;
	
	Если ПарольСуществующийАккаунт = "" Тогда
		Элементы.НадписьКорректностьПароляСуществующийАккаунт.Видимость = Истина;
		ПараметрыДоступаКорректны = Ложь;
	Иначе
		Элементы.НадписьКорректностьПароляСуществующийАккаунт.Видимость = Ложь;
	КонецЕсли;
	
	Возврат ПараметрыДоступаКорректны;
	
КонецФункции

/////////////////////////////////////////////
// Страница подтверждения регистрации.

&НаСервере
// Выполняет переход на страницу подтверждения регистрации мастера интеграции.
//
Процедура ПерейтиНаСтраницуПодтвержденияРегистрации()
	
	ЭтаФорма.Заголовок = "Настройка обмена данными с мобильным приложением ""ЖКХ: Личный кабинет""";
	
	Элементы.НадписьЗаголовокСтартовая.Видимость                      = Ложь;
	Элементы.НадписьЗаголовокРегистрация.Видимость                    = Ложь;
	Элементы.НадписьЗаголовокПодтверждениеРегистрации.Видимость       = Истина;
	Элементы.НадписьЗаголовокНастройкиАвтоматическогоОбмена.Видимость = Ложь;
	Элементы.НадписьЗаголовокИнформированиеЖильцов.Видимость          = Ложь;
	Элементы.НадписьЗаголовокЗавершениеМастераИнтеграции.Видимость    = Ложь;
	Элементы.НадписьЗаголовокНастройкаОбменов.Видимость               = Ложь;
	
	Элементы.КомандаНазад.Видимость   = Ложь;
	Элементы.КомандаДалее.Видимость   = Истина;
	Элементы.КомандаГотово.Видимость  = Ложь;
	Элементы.КомандаОтмена.Видимость  = Истина;
	Элементы.КомандаДалее.Доступность = Истина;
	
	Элементы.КомандаДалее.Заголовок  = "Далее >>";
	
	Элементы.СтраницыИнтеграцииСМобильнымПриложением.ТекущаяСтраница = Элементы.СтраницаПодтверждениеРегистрации;
	Элементы.ПанельДекораций.ТекущаяСтраница                         = Элементы.ПодтверждениеРегистрации;
	
	УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеСБазой.УстановитьРежимРаботыМеханизмаИнтеграцииСМобильнымПриложением(Перечисления.УПЖКХ_РежимРаботыИнтеграцииСМобильнымПриложением.ПодтверждениеРегистрации);
	
	ВыделитьЗаголовокТекущейСтраницы();
	
КонецПроцедуры

&НаСервере
// Выполняет проверку заполнения кодового слова.
//
Функция ПроверитьЗаполнениеКодовогоСлова()
	
	Если КодовоеСловоДляРегистрации = "" Тогда
		Элементы.НадписьКорректностьКодовогоСлова.Видимость = Истина;
		
		Возврат Ложь;
	КонецЕсли;
	
	Элементы.НадписьКорректностьКодовогоСлова.Видимость = Ложь;
	
	Возврат Истина;
	
КонецФункции

/////////////////////////////////////////////
// Страница настройка расписания автоматического обмена.

&НаСервере
// Выполняет переход на страницу настройки расписаний обменов мастера интеграции.
//
Процедура ПерейтиНаСтраницуНастройкиРасписанияАвтоматическогоОбмена()
	
	ЭтаФорма.Заголовок = "Настройка обмена данными с мобильным приложением ""ЖКХ: Личный кабинет""";
	
	Элементы.НадписьЗаголовокСтартовая.Видимость                      = Ложь;
	Элементы.НадписьЗаголовокРегистрация.Видимость                    = Ложь;
	Элементы.НадписьЗаголовокПодтверждениеРегистрации.Видимость       = Ложь;
	Элементы.НадписьЗаголовокНастройкиАвтоматическогоОбмена.Видимость = Истина;
	Элементы.НадписьЗаголовокИнформированиеЖильцов.Видимость          = Ложь;
	Элементы.НадписьЗаголовокЗавершениеМастераИнтеграции.Видимость    = Ложь;
	Элементы.НадписьЗаголовокНастройкаОбменов.Видимость               = Ложь;
	
	Элементы.КомандаНазад.Видимость   = Ложь;
	Элементы.КомандаДалее.Видимость   = Истина;
	Элементы.КомандаГотово.Видимость  = Ложь;
	Элементы.КомандаОтмена.Видимость  = Истина;
	Элементы.КомандаДалее.Доступность = Истина;
	
	Элементы.КомандаДалее.Заголовок = "Далее >>";
	
	Элементы.СтраницыИнтеграцииСМобильнымПриложением.ТекущаяСтраница = Элементы.СтраницаНастройкиРасписанияАвтоматическогоОбмена;
	Элементы.ПанельДекораций.ТекущаяСтраница                         = Элементы.НастройкаАвтоматическогоОбмена;
	
	ИнициализацияСтраницыНастройкиРасписанияАвтоматическогоОбмена();
	ЗавершитьРедактированиеНастроекАвтоматическогоОбмена();
	
	УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеСБазой.УстановитьРежимРаботыМеханизмаИнтеграцииСМобильнымПриложением(Перечисления.УПЖКХ_РежимРаботыИнтеграцииСМобильнымПриложением.НастройкаАвтоматическогоОбмена);
	
	ВыделитьЗаголовокТекущейСтраницы();
	
КонецПроцедуры

&НаСервере
// Иницализация и заполнение страницы настройки расписаний обменов.
//
Процедура ИнициализацияСтраницыНастройкиРасписанияАвтоматическогоОбмена()
	
	УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.ОпределитьРасписанияРегламентныхЗаданийПоУмолчанию(РасписаниеРегламентногоЗаданияВыгрузокПоУмолчанию, РасписаниеРегламентногоЗаданияЗагрузокПоУмолчанию);
	
	СтруктураОбмена = УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеСБазой.ПолучитьНастройкуАвтоматическогоОбменаСМобильнымПриложением();
	
	Если СтруктураОбмена.Свойство("ИдентификаторРегламентногоЗаданияВыгрузок") И СтруктураОбмена.Свойство("ИдентификаторРегламентногоЗаданияЗагрузок") Тогда
		ИдентификаторРегламентногоЗаданияВыгрузок = СтруктураОбмена.ИдентификаторРегламентногоЗаданияВыгрузок;
		ИдентификаторРегламентногоЗаданияЗагрузок = СтруктураОбмена.ИдентификаторРегламентногоЗаданияЗагрузок;
	КонецЕсли;
	
	Если СтруктураОбмена.Свойство("НастройкаФормированияДанных") Тогда
		НастройкаФормированияДанных = СтруктураОбмена.НастройкаФормированияДанных;
	КонецЕсли;
	
	Если СтруктураОбмена.Свойство("КоличествоЛСВФайлеОбмена") Тогда
		КоличествоЛСВФайлеОбмена = СтруктураОбмена.КоличествоЛСВФайлеОбмена;
	Иначе
		КоличествоЛСВФайлеОбмена = 3000;
	КонецЕсли;
	
	Если СтруктураОбмена.Свойство("ЗагружатьПоказанияПУПоЗданиям") Тогда
		ЗагружатьПоказанияПУПоЗданиям = СтруктураОбмена.ЗагружатьПоказанияПУПоЗданиям;
	КонецЕсли;
	
	Если СтруктураОбмена.Свойство("ЗагружатьПоказанияПУПоУслугам") Тогда
		ЗагружатьПоказанияПУПоУслугам = СтруктураОбмена.ЗагружатьПоказанияПУПоУслугам;
	КонецЕсли;
	
	Если СтруктураОбмена.Свойство("ЧислоОкончанияПроведенияНачислений") Тогда
		ЧислоОкончанияПроведенияНачислений = СтруктураОбмена.ЧислоОкончанияПроведенияНачислений;
	КонецЕсли;
	
	Если СтруктураОбмена.Свойство("МесяцОкончанияПроведенияНачислений") Тогда
		МесяцОкончанияПроведенияНачислений = СтруктураОбмена.МесяцОкончанияПроведенияНачислений;
	КонецЕсли;
	
	Если СтруктураОбмена.Свойство("ДатаПоследнейЗагруженнойОплаты") Тогда
		ДатаПоследнейЗагруженнойОплаты = СтруктураОбмена.ДатаПоследнейЗагруженнойОплаты;
	КонецЕсли;
	
	РасписаниеРегламентногоЗаданияВыгрузок = ПолучитьРасписаниеРегламентногоЗадания(ИдентификаторРегламентногоЗаданияВыгрузок, ВыполнятьВыгрузкиПоРасписанию);
	РасписаниеРегламентногоЗаданияЗагрузок = ПолучитьРасписаниеРегламентногоЗадания(ИдентификаторРегламентногоЗаданияЗагрузок, ВыполнятьЗагрузкиПоРасписанию);
	
	УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.ОпределитьВидНастройкиРасписания(ИдентификаторРегламентногоЗаданияВыгрузок, РасписаниеРегламентногоЗаданияВыгрузокПоУмолчанию, ВидНастройкиРасписанияВыгрузок);
	УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.ОпределитьВидНастройкиРасписания(ИдентификаторРегламентногоЗаданияЗагрузок, РасписаниеРегламентногоЗаданияЗагрузокПоУмолчанию, ВидНастройкиРасписанияЗагрузок);
	
	УправлениеСтраницейНастройкиРасписанияАвтоматическогоОбмена(ЭтаФорма);
	
	УстановитьВидимостьЭлементовРасписания();
	
КонецПроцедуры

&НаСервере
// Завершение настройки обменов и их сохранение.
//
Процедура ЗавершитьРедактированиеНастроекАвтоматическогоОбмена()
	
	СтруктураНастроекОбмена = УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеСБазой.ПолучитьНастройкуАвтоматическогоОбменаСМобильнымПриложением();
	ЗаполнитьЗначенияСвойств(СтруктураНастроекОбмена, ЭтаФорма);
	
	УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеСБазой.УстановитьНастройкуАвтоматическогоОбменаДаннымиСМобильнымПриложением(СтруктураНастроекОбмена);
	
КонецПроцедуры

&НаСервере
// Установка видимости элементов страницы настройки расписаний обменов.
//
Процедура УстановитьВидимостьЭлементовРасписания()
	
	// Управляем доступностью редактирования расписаний. Всем, кроме администратора, должно быть недоступно.
	Попытка
		РегламентныеЗаданияСлужебный.ВызватьИсключениеЕслиНетПраваАдминистрирования();
		УстановитьПривилегированныйРежим(Истина);
		
		ВыполнятьВыгрузкиПоРасписанию = НЕ ВидНастройкиРасписанияВыгрузок = 0;
		ВыполнятьЗагрузкиПоРасписанию = НЕ ВидНастройкиРасписанияЗагрузок = 0;
		
		УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.ПодготовитьРегламентноеЗаданиеЖКХЛичныйКабинет(ИдентификаторРегламентногоЗаданияВыгрузок, ИдентификаторРегламентногоЗаданияЗагрузок, ВыполнятьВыгрузкиПоРасписанию, ВыполнятьЗагрузкиПоРасписанию);
		
		// Выгрузки.
		Если ВидНастройкиРасписанияВыгрузок = 0 Тогда
			Элементы.РасписаниеРегламентногоЗаданияВыгрузок.Видимость = Ложь;
		Иначе
			Элементы.РасписаниеРегламентногоЗаданияВыгрузок.Видимость = истина;
			Если ВидНастройкиРасписанияВыгрузок = 1 Тогда
				РасписаниеРегламентногоЗаданияВыгрузок = УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.УстановитьРасписаниеРегламентногоЗаданияПоУмолчанию(ИдентификаторРегламентногоЗаданияВыгрузок, ВыполнятьВыгрузкиПоРасписанию, РасписаниеРегламентногоЗаданияВыгрузокПоУмолчанию);
				Элементы.РасписаниеРегламентногоЗаданияВыгрузок.Доступность = Ложь;
			Иначе
				Элементы.РасписаниеРегламентногоЗаданияВыгрузок.Доступность = Истина;
			КонецЕсли;
		КонецЕсли;
		
		// Загрузки.
		Если ВидНастройкиРасписанияЗагрузок = 0 Тогда
			Элементы.РасписаниеРегламентногоЗаданияЗагрузок.Видимость = Ложь;
		Иначе
			Элементы.РасписаниеРегламентногоЗаданияЗагрузок.Видимость = истина;
			Если ВидНастройкиРасписанияЗагрузок = 1 Тогда
				РасписаниеРегламентногоЗаданияЗагрузок = УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.УстановитьРасписаниеРегламентногоЗаданияПоУмолчанию(ИдентификаторРегламентногоЗаданияЗагрузок, ВыполнятьЗагрузкиПоРасписанию, РасписаниеРегламентногоЗаданияЗагрузокПоУмолчанию);
				Элементы.РасписаниеРегламентногоЗаданияЗагрузок.Доступность = Ложь;
			Иначе
				Элементы.РасписаниеРегламентногоЗаданияЗагрузок.Доступность = Истина;
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		
		Элементы.ВидНастройкиРасписанияВыгрузок.Доступность         = Ложь;
		Элементы.ВидНастройкиРасписанияЗагрузок.Доступность         = Ложь;
		Элементы.РасписаниеРегламентногоЗаданияВыгрузок.Доступность = Ложь;
		Элементы.РасписаниеРегламентногоЗаданияЗагрузок.Доступность = Ложь;
		
		Элементы.РасписаниеРегламентногоЗаданияВыгрузок.Видимость = Истина;
		Элементы.РасписаниеРегламентногоЗаданияЗагрузок.Видимость = Истина;
		
		РасписаниеРегламентногоЗаданияВыгрузок = "<Настройка регламентных заданий недоступна для текущего пользователя>";
		РасписаниеРегламентногоЗаданияЗагрузок = "<Настройка регламентных заданий недоступна для текущего пользователя>";
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
// Управляет состоянием элементов страницы настройки обмена данными.
//
Процедура УправлениеСтраницейНастройкиРасписанияАвтоматическогоОбмена(Форма)
	
	Элементы = Форма.Элементы;
	
	ВидНастройкиРасписанияВыгрузок = Форма.ВидНастройкиРасписанияВыгрузок;
	Элементы.РасписаниеРегламентногоЗаданияВыгрузок.Доступность = ?(ВидНастройкиРасписанияВыгрузок = 1, Ложь, Истина);
	Элементы.РасписаниеРегламентногоЗаданияВыгрузок.Видимость   = НЕ ВидНастройкиРасписанияВыгрузок = 0;
	
	ВидНастройкиРасписанияЗагрузок = Форма.ВидНастройкиРасписанияЗагрузок;
	Элементы.РасписаниеРегламентногоЗаданияЗагрузок.Доступность = ?(ВидНастройкиРасписанияЗагрузок = 1, Ложь, Истина);
	Элементы.РасписаниеРегламентногоЗаданияЗагрузок.Видимость   = НЕ ВидНастройкиРасписанияЗагрузок = 0;
	
КонецПроцедуры

/////////////////////////////////////////////
// Страница информирования жильцов о приложении.

&НаСервере
// Выполняет переход на страницу пошаговой инструкции по информированию жильцов о приложении.
//
Процедура ПерейтиНаСтраницуИнформированияЖильцов()
	
	ЭтаФорма.Заголовок = "Настройка обмена данными с мобильным приложением ""ЖКХ: Личный кабинет""";
	
	Элементы.НадписьЗаголовокСтартовая.Видимость                      = Ложь;
	Элементы.НадписьЗаголовокРегистрация.Видимость                    = Ложь;
	Элементы.НадписьЗаголовокПодтверждениеРегистрации.Видимость       = Ложь;
	Элементы.НадписьЗаголовокНастройкиАвтоматическогоОбмена.Видимость = Ложь;
	Элементы.НадписьЗаголовокИнформированиеЖильцов.Видимость          = Истина;
	Элементы.НадписьЗаголовокЗавершениеМастераИнтеграции.Видимость    = Ложь;
	Элементы.НадписьЗаголовокНастройкаОбменов.Видимость               = Ложь;
	
	Элементы.КомандаНазад.Видимость   = Истина;
	Элементы.КомандаДалее.Видимость   = Истина;
	Элементы.КомандаГотово.Видимость  = Ложь;
	Элементы.КомандаОтмена.Видимость  = Истина;
	Элементы.КомандаДалее.Доступность = Истина;
	
	Элементы.КомандаДалее.Заголовок = "Далее >>";
	Элементы.КомандаНазад.Заголовок = "<< Назад";
	
	Элементы.КнопкаСкопироватьВБуферGooglePlayОписаниеШагов.Видимость = НЕ ЭтоLinuxКлиент;
	Элементы.КнопкаСкопироватьВБуферAppStoreОписаниеШагов.Видимость   = НЕ ЭтоLinuxКлиент;
	
	Элементы.СтраницыИнтеграцииСМобильнымПриложением.ТекущаяСтраница = Элементы.СтраницаИнформированияЖильцов;
	Элементы.ПанельДекораций.ТекущаяСтраница                         = Элементы.ИнформированиеЖильцов;
	
	УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеСБазой.УстановитьРежимРаботыМеханизмаИнтеграцииСМобильнымПриложением(Перечисления.УПЖКХ_РежимРаботыИнтеграцииСМобильнымПриложением.ИнформированиеЖильцов);
	
	ВыделитьЗаголовокТекущейСтраницы();
	
КонецПроцедуры

/////////////////////////////////////////////
// Страница завершения мастера интеграции.

&НаСервере
// Выполняет переход на страницу завершения мастера интеграции.
//
Процедура ПерейтиНаСтраницуЗавершенияМастераИнтеграции()
	
	КонтактнаяИнформацияДокумент = УПЖКХ_ВзаимодействиеССервисамиРарус.ПолучитьФорматированныйДокументСНашимиКонтактнымиДанными();
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Элементы.НадписьТекстСтраницыЗавершенияСсылкаНаЦены.Заголовок, "#");
	
	Если МассивПодстрок.Количество() >= 5 Тогда
		
		Элементы.НадписьТекстСтраницыЗавершенияСсылкаНаЦены.Заголовок = Новый ФорматированнаяСтрока(Новый ФорматированнаяСтрока(МассивПодстрок[0],,),
																									Новый ФорматированнаяСтрока(Строка(УПЖКХ_ОбщегоНазначенияСервер.ПолучитьКоличествоЛСВБазе()) + " " + МассивПодстрок[1], Новый Шрифт( , , Истина), Новый Цвет(0, 128, 0)),
																									Новый ФорматированнаяСтрока(МассивПодстрок[2], ,),
																									Новый ФорматированнаяСтрока(МассивПодстрок[3], , , , "http://www.vdgb-soft.ru/mobile_apps/jkh-lichnyy-kabinet/#Price"),
																									Новый ФорматированнаяСтрока(МассивПодстрок[4], ,));
		
	КонецЕсли;
	
	ЭтаФорма.Заголовок = "Настройка обмена данными с мобильным приложением ""ЖКХ: Личный кабинет""";
	
	Элементы.НадписьЗаголовокСтартовая.Видимость                      = Ложь;
	Элементы.НадписьЗаголовокРегистрация.Видимость                    = Ложь;
	Элементы.НадписьЗаголовокПодтверждениеРегистрации.Видимость       = Ложь;
	Элементы.НадписьЗаголовокНастройкиАвтоматическогоОбмена.Видимость = Ложь;
	Элементы.НадписьЗаголовокИнформированиеЖильцов.Видимость          = Ложь;
	Элементы.НадписьЗаголовокЗавершениеМастераИнтеграции.Видимость    = Истина;
	Элементы.НадписьЗаголовокНастройкаОбменов.Видимость               = Ложь;
	
	Элементы.КомандаНазад.Видимость   = Истина;
	Элементы.КомандаДалее.Видимость   = Истина;
	Элементы.КомандаГотово.Видимость  = Ложь;
	Элементы.КомандаОтмена.Видимость  = Истина;
	Элементы.КомандаДалее.Доступность = Истина;
	
	Элементы.КомандаДалее.Заголовок = "Завершить настройку";
	Элементы.КомандаНазад.Заголовок = "<< Назад";
	
	Элементы.СтраницыИнтеграцииСМобильнымПриложением.ТекущаяСтраница = Элементы.СтраницаЗавершенияМастераИнтеграции;
	Элементы.ПанельДекораций.ТекущаяСтраница                         = Элементы.ЗавершениеМастераИнтеграции;
	
	УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеСБазой.УстановитьРежимРаботыМеханизмаИнтеграцииСМобильнымПриложением(Перечисления.УПЖКХ_РежимРаботыИнтеграцииСМобильнымПриложением.ЗавершениеМастераИнтеграции);
	
	ВыделитьЗаголовокТекущейСтраницы();
	
КонецПроцедуры

/////////////////////////////////////////////
// Страница обменов.

&НаСервере
// Выполняет переход на страницу управления интеграцией.
//
Процедура ПерейтиНаСтраницуОбменов()
	
	Элементы.ГруппаПолосаПрогресса.Видимость = Ложь;
	Элементы.ПолеКИ.Видимость = Ложь;
	
	ЭтаФорма.Заголовок = "Изменение настроек обмена данными с мобильным приложением ""ЖКХ: Личный кабинет""";
	
	Элементы.НадписьЗаголовокСтартовая.Видимость                      = Ложь;
	Элементы.НадписьЗаголовокРегистрация.Видимость                    = Ложь;
	Элементы.НадписьЗаголовокПодтверждениеРегистрации.Видимость       = Ложь;
	Элементы.НадписьЗаголовокНастройкиАвтоматическогоОбмена.Видимость = Ложь;
	Элементы.НадписьЗаголовокИнформированиеЖильцов.Видимость          = Ложь;
	Элементы.НадписьЗаголовокЗавершениеМастераИнтеграции.Видимость    = Ложь;
	Элементы.НадписьЗаголовокНастройкаОбменов.Видимость               = Истина;
	
	Элементы.КомандаНазад.Видимость  = Ложь;
	Элементы.КомандаДалее.Видимость  = Ложь;
	Элементы.КомандаГотово.Видимость = Истина;
	Элементы.КомандаОтмена.Видимость = Ложь;
	
	Элементы.СтраницыИнтеграцииСМобильнымПриложением.ТекущаяСтраница = Элементы.СтраницаОбменов;
	Элементы.ПанельДекораций.Видимость = Ложь;
	
	Элементы.КнопкаСкопироватьВБуферGooglePlay.Видимость = НЕ ЭтоLinuxКлиент;
	Элементы.КнопкаСкопироватьВБуферAppStore.Видимость   = НЕ ЭтоLinuxКлиент;
	
	// СМС рассылка.
	ФункционалСМСРассылкиДоступен = смсНастройкаПереопределяемый.ФункционалСМСРассылкиДоступен();
	
	УстановитьВидимостьГиперссылкиНаНастройкуМногопоточности();
	
	Элементы.СсылкаНастройкиСМСРассылки.Доступность = ФункционалСМСРассылкиДоступен;
	Элементы.ДопИнформацияСМСРассылка.Видимость     = НЕ ФункционалСМСРассылкиДоступен;
	
	УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеСБазой.УстановитьРежимРаботыМеханизмаИнтеграцииСМобильнымПриложением(Перечисления.УПЖКХ_РежимРаботыИнтеграцииСМобильнымПриложением.РабочийРежим);
	
	УстановитьВидимостьФормыОбменаДанными();
	
	ПроверитьФактНаличияВыбраннойНастройкиСбораДанныхИУстановитьДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаСервере
// Устанавливает видимость элементов формы управления интеграцией.
//
Процедура УстановитьВидимостьФормыОбменаДанными()
	
	ОпределитьНаличиеИдентификаторовЛС();
	
	ТекущаяСтраница = Элементы.СтраницыИнтеграцииСМобильнымПриложением.ТекущаяСтраница;
	
	Если ТекущаяСтраница = Элементы.СтраницаОбменов Тогда
		Элементы.НадписьОтсутствиеИдентификаторовЛС.Видимость = НетЛСсИдентификаторами;
		Элементы.СсылкаПечатьПамятокДоступа.Доступность       = НЕ НетЛСсИдентификаторами;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Проверяет наличие идентификатор л/с в базе. Если ни одного идентификатора не найдено,
// то выводим соответствующее сообщение и не разрешаем печать памяток и индивидуальных листовок.
//
Процедура ОпределитьНаличиеИдентификаторовЛС()
	
	НаборЗаписей = РегистрыСведений.УПЖКХ_ИдентификаторыЛицевыхСчетовВМобильномПриложении.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	НетЛСсИдентификаторами = НаборЗаписей.Количество() = 0;
	
КонецПроцедуры

&НаСервере
// Проверяет заполненность настройки сбора данных (настройки формирования квитанций) и
// управляет доступностью элементов формы исходя из результатов проверки.
//
Процедура ПроверитьФактНаличияВыбраннойНастройкиСбораДанныхИУстановитьДоступностьЭлементовФормы() Экспорт
	
	СтруктураОбмена = УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеСБазой.ПолучитьНастройкуАвтоматическогоОбменаСМобильнымПриложением();
	
	Если СтруктураОбмена.Свойство("НастройкаФормированияДанных") Тогда
		НастройкаФормированияДанных = СтруктураОбмена.НастройкаФормированияДанных;
	КонецЕсли;
	
	Если НастройкаФормированияДанных.Пустая() Тогда
		
		Элементы.НадписьНеВсеНастройкиЗаполнены.Видимость      = Истина;
		Элементы.СсылкаПерейтиКФормеРазовогоОбмена.Доступность = Ложь;
		
	Иначе
		
		Элементы.НадписьНеВсеНастройкиЗаполнены.Видимость      = Ложь;
		Элементы.СсылкаПерейтиКФормеРазовогоОбмена.Доступность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////
// Управление полосой прогресса.

&НаСервере
// Выполняет выделение заголовка текущей страницы и смещение полосы индикатора.
//
Процедура ВыделитьЗаголовокТекущейСтраницы()
	
	ТекущаяСтраница = Элементы.СтраницыИнтеграцииСМобильнымПриложением.ТекущаяСтраница;
	
	// Обнуляем форматирование всех надписей.
	Элементы.НадписьНачало.Шрифт      = Новый Шрифт(,12,Ложь);
	Элементы.НадписьРегистрация.Шрифт = Новый Шрифт(,12,Ложь);
	Элементы.НадписьНастройка.Шрифт   = Новый Шрифт(,12,Ложь);
	Элементы.НадписьОповещения.Шрифт  = Новый Шрифт(,12,Ложь);
	Элементы.НадписьЗавершение.Шрифт  = Новый Шрифт(,12,Ложь);
	
	Элементы.НадписьНачало.ЦветТекста      = ЦветаСтиля.ЦветТекстаФормы;
	Элементы.НадписьРегистрация.ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
	Элементы.НадписьНастройка.ЦветТекста   = ЦветаСтиля.ЦветТекстаФормы;
	Элементы.НадписьОповещения.ЦветТекста  = ЦветаСтиля.ЦветТекстаФормы;
	Элементы.НадписьЗавершение.ЦветТекста  = ЦветаСтиля.ЦветТекстаФормы;
	
	// Изменяем форматирование нужной страницы.
	Если ТекущаяСтраница = Элементы.СтраницаСтартовая Тогда
		
		ЗначениеПолосыПрогресса = 16;
		
		Элементы.НадписьНачало.Шрифт = Новый Шрифт(,12,Истина);
		Элементы.НадписьНачало.ЦветТекста = Новый Цвет(0, 150, 70);
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаРегистрация Тогда
		
		ЗначениеПолосыПрогресса = 26;
		
		Элементы.НадписьРегистрация.Шрифт = Новый Шрифт(,12,Истина);
		Элементы.НадписьРегистрация.ЦветТекста = Новый Цвет(0, 150, 70);
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаПодтверждениеРегистрации Тогда
		
		ЗначениеПолосыПрогресса = 36;
		
		Элементы.НадписьРегистрация.Шрифт = Новый Шрифт(,12,Истина);
		Элементы.НадписьРегистрация.ЦветТекста = Новый Цвет(0, 150, 70);
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаНастройкиРасписанияАвтоматическогоОбмена Тогда
		
		ЗначениеПолосыПрогресса = 57;
		
		Элементы.НадписьНастройка.Шрифт = Новый Шрифт(,12,Истина);
		Элементы.НадписьНастройка.ЦветТекста = Новый Цвет(0, 150, 70);
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаИнформированияЖильцов Тогда
		
		ЗначениеПолосыПрогресса = 79;
		
		Элементы.НадписьОповещения.Шрифт = Новый Шрифт(,12,Истина);
		Элементы.НадписьОповещения.ЦветТекста = Новый Цвет(0, 150, 70);
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаЗавершенияМастераИнтеграции Тогда
		
		ЗначениеПолосыПрогресса = 100;
		
		Элементы.НадписьЗавершение.Шрифт = Новый Шрифт(,12,Истина);
		Элементы.НадписьЗавершение.ЦветТекста = Новый Цвет(0, 150, 70);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ОБМЕНА ДАННЫМИ С СЕРВИСОМ

#Область ФункцииОбменаДаннымиССервисом

&НаСервере
// Выполняет попытку регистрации или верификации аккаунта.
//
Функция ВыполнитьРегистрациюАккаунта(СведенияОбОшибке)
	
	Если НовыйИлиИмеющийсяАккаунт = 0 Тогда
		Возврат ВыполнитьОтправкуПараметровДоступаДляРегистрацииНаСервере(СведенияОбОшибке);
	ИначеЕсли НовыйИлиИмеющийсяАккаунт = 1 Тогда
		Возврат ВыполнитьВерификациюИмеющихсяПараметровДоступа(СведенияОбОшибке);
	КонецЕсли;
	
КонецФункции

&НаСервере
// Выполняет отправку параметров доступа для регистрации на сервисе.
//
Функция ВыполнитьОтправкуПараметровДоступаДляРегистрацииНаСервере(СведенияОбОшибке)
	
	СведенияОбОшибке = "";
	
	Если ПроверитьПравильностьПараметровДоступа() Тогда
		
		СтруктураРегистрации = УПЖКХ_ВзаимодействиеССервисамиРарус.ПодготовитьСтруктуруРегистрации(Логин, Пароль, АдресЭлектроннойПочты, Телефон);
		
		ПередачаПараметровДоступаВыполненаУспешно = УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеССервером.ОтправитьПараметрыДоступаНаСервер(СтруктураРегистрации, СведенияОбОшибке);
		
		Возврат ПередачаПараметровДоступаВыполненаУспешно;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
// Выполняет верификацию указанных параметров доступа.
//
Функция ВыполнитьВерификациюИмеющихсяПараметровДоступа(СведенияОбОшибке)
	
	СведенияОбОшибке = "";
	
	Если ПроверитьПравильностьПараметровДоступаВерификация() Тогда
		
		СтруктураВерификации        = УПЖКХ_ВзаимодействиеССервисамиРарус.ПодготовитьСтруктуруРегистрации(ЛогинСуществующийАккаунт, ПарольСуществующийАккаунт, АдресЭлектроннойПочтыСуществующийАккаунт);
		ВерификацияВыполненаУспешно = УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеССервером.ПровестиВерификациюАккаунта(СтруктураВерификации, СведенияОбОшибке);
		
		Возврат ВерификацияВыполненаУспешно;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
// Выполняет отправку кодового слова на сервис.
//
Функция ВыполнитьОтправкуКодовогоСловаДляОкончанияРегистрацииНаСервере(СведенияОбОшибке)
	
	СведенияОбОшибке = "";
	ВыполненоУспешно = Ложь;
	
	Если ПроверитьЗаполнениеКодовогоСлова() Тогда
		ВыполненоУспешно = УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеССервером.ОтправитьКодовоеСловоНаСервер(КодовоеСловоДляРегистрации, СведенияОбОшибке);
	КонецЕсли;
	
	Возврат ВыполненоУспешно;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С РЕГЛАМЕНТНЫМ ЗАДАНИЕМ

#Область ПроцедурыИФункцииРаботыСРегламентнымЗаданием

&НаСервереБезКонтекста
// Функция формирует текст расписания регламентного задания.
//
Функция ПолучитьРасписаниеРегламентногоЗадания(ИдентификаторРегламентногоЗадания, ВыполнятьОбменПоРасписанию)
	
	Возврат УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.ПолучитьРасписаниеРегламентногоЗадания(ИдентификаторРегламентногоЗадания, ВыполнятьОбменПоРасписанию);
	
КонецФункции // ПолучитьРасписаниеРегламентногоЗадания()

&НаСервере
// Функция возвращает расписание регламентного задания.
//
Функция ПолучитьРасписаниеВыгрузок()
	
	Возврат УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.ПолучитьРасписаниеВыгрузокЖКХЛичныйКабинет(ИдентификаторРегламентногоЗаданияВыгрузок, ИдентификаторРегламентногоЗаданияЗагрузок);
	
КонецФункции // ПолучитьРасписание()

&НаСервере
// Функция возвращает расписание регламентного задания.
//
Функция ПолучитьРасписаниеЗагрузок()
	
	Возврат УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.ПолучитьРасписаниеЗагрузокЖКХЛичныйКабинет(ИдентификаторРегламентногоЗаданияВыгрузок, ИдентификаторРегламентногоЗаданияЗагрузок);
	
КонецФункции // ПолучитьРасписание()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СБОРА СТАТИСТИКИ В ФОНОВОМ РЕЖИМЕ

#Область ПроцедурыИФункцииСбораСтатистикиВФоновомРежиме

&НаКлиенте
// Получает статистику с сервиса.
//
Процедура ВыполнитьСборСтатистики() Экспорт
	
	// Запускаем сбор статистики с сервиса.
	АдресВременногоХранилища = ПоместитьВоВременноеХранилище(Неопределено, ЭтаФорма.УникальныйИдентификатор);
	
	ПараметрыЗадания = Новый Массив;
	ПараметрыЗадания.Добавить(АдресВременногоХранилища);
	
	ИдентификаторФоновогоЗаданияЗагрузкиСтатистикиССервера = Новый УникальныйИдентификатор;
	
	ЭтаФорма.ПодключитьОбработчикОжидания("ПроверитьГотовностьСтатистикиССервера", 2);
	
	ВыполнитьФоновоеЗаданиеСбораСтатистикиНаСервере(ПараметрыЗадания, ИдентификаторФоновогоЗаданияЗагрузкиСтатистикиССервера);
	
КонецПроцедуры

&НаСервере
// Запускает фоновое задание, выполняющее сбор статистики с сервиса.
//
Процедура ВыполнитьФоновоеЗаданиеСбораСтатистикиНаСервере(ПараметрыЗадания, ИдентификаторЗадания)
	
	ФоновыеЗадания.Выполнить("УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеССервером.ПолучитьСправочныеСведенияССервера", ПараметрыЗадания, ИдентификаторЗадания);
	
КонецПроцедуры

&НаКлиенте
// Проверка и расшифровка ответа, пришедшего с сервиса на запрос статистики.
//
Процедура ПроверитьГотовностьСтатистикиССервера()
	
	СтруктураСтатистики = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	Если ТипЗнч(СтруктураСтатистики) = Тип("Структура") И СтруктураСтатистики.Свойство("IsSubscribed") Тогда
		
		ЭтаФорма.ОтключитьОбработчикОжидания("ПроверитьГотовностьСтатистикиССервера");
		СтатистикаССервера = СформироватьСтруктуруСтатистикиССервера(СтруктураСтатистики);
		ПоказатьСтатистику();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Формирует структуру статистики для вывода в форме.
//
Функция СформироватьСтруктуруСтатистикиССервера(СтруктураСтатистики)
	
	ЕстьПодписка = СтруктураСтатистики.IsSubscribed = "Y";
	
	Если ЕстьПодписка
		И СтруктураСтатистики.Свойство("IsSubscriptionActive")
		И СтруктураСтатистики.Свойство("NumberOfAccsBySubscription")
		И СтруктураСтатистики.Свойство("SubscriptionEndDate")
		И СтруктураСтатистики.Свойство("NumberOfAccsTotal")
		И СтруктураСтатистики.Свойство("msg") Тогда
		
		СтатистикаССервера = Новый Структура;
		СтатистикаССервера.Вставить("ЕстьЛицензия",                       ЕстьПодписка);
		СтатистикаССервера.Вставить("ЛицензияАктивна",                    СтруктураСтатистики.IsSubscriptionActive = "Y");
		СтатистикаССервера.Вставить("МаксимальноеКоличествоЛСПоЛицензии", ?(СтатистикаССервера.ЛицензияАктивна, XMLЗначение(Тип("Число"), СтруктураСтатистики.NumberOfAccsBySubscription), 0));
		СтатистикаССервера.Вставить("ДатаОкончанияЛицензии",              XMLЗначение(Тип("Дата"), СтруктураСтатистики.SubscriptionEndDate));
		СтатистикаССервера.Вставить("КоличествоЛСНаСайтеВсего",           XMLЗначение(Тип("Число"), СтруктураСтатистики.NumberOfAccsTotal));
		СтатистикаССервера.Вставить("КоличествоЛСБезЛицензии",            ?(СтатистикаССервера.МаксимальноеКоличествоЛСПоЛицензии < СтатистикаССервера.КоличествоЛСНаСайтеВсего, СтатистикаССервера.КоличествоЛСНаСайтеВсего - СтатистикаССервера.МаксимальноеКоличествоЛСПоЛицензии, 0));
		СтатистикаССервера.Вставить("ДополнительныеСообщения",            СтруктураСтатистики.msg);
		СтатистикаССервера.Вставить("УдалосьПолучитьСведенияССервера",    СтруктураСтатистики.УдалосьПолучитьСведенияССервера);
		
	Иначе
		
		СтатистикаССервера = Новый Структура;
		СтатистикаССервера.Вставить("ЕстьЛицензия",                       Ложь);
		СтатистикаССервера.Вставить("ЛицензияАктивна",                    Ложь);
		СтатистикаССервера.Вставить("МаксимальноеКоличествоЛСПоЛицензии", 0);
		СтатистикаССервера.Вставить("ДатаОкончанияЛицензии",              Дата("00010101"));
		СтатистикаССервера.Вставить("КоличествоЛСНаСайтеВсего",           УПЖКХ_ОбщегоНазначенияСервер.ПолучитьКоличествоЛСВБазе());
		СтатистикаССервера.Вставить("КоличествоЛСБезЛицензии",            ?(СтатистикаССервера.МаксимальноеКоличествоЛСПоЛицензии < СтатистикаССервера.КоличествоЛСНаСайтеВсего, СтатистикаССервера.КоличествоЛСНаСайтеВсего - СтатистикаССервера.МаксимальноеКоличествоЛСПоЛицензии, 0));
		СтатистикаССервера.Вставить("ДополнительныеСообщения",            Новый Массив);
		СтатистикаССервера.Вставить("УдалосьПолучитьСведенияССервера",    Истина);
		
	КонецЕсли;
	
	// Доп. параметры для вывода в сообщении.
	СтатистикаССервера.Вставить("ДатаОкончанияЛицензииСтрока", Формат(СтатистикаССервера.ДатаОкончанияЛицензии, "ДФ=дд.ММ.гггг"));
	
	Возврат СтатистикаССервера;
	
КонецФункции

&НаСервере
// Отображает собранную с сервиса статистику.
//
Процедура ПоказатьСтатистику()
	
	СформироватьНадписиОКоличествеЛС();
	
	СформироватьГистограмму();
	ВывестиСообщениеОПодписке();
	
	// Выводим логин аккаунта пользователя.
	ПараметрыДоступа = УПЖКХ_ВзаимодействиеССервисамиРарус.ПараметрыДоступаБазыКСервисамРарус();
	ЛогинАккаунта    = ПараметрыДоступа.Логин;
	
	Элементы.ГруппаПанельСтатистики.Видимость = Истина;
	
КонецПроцедуры

/////////////////////////////////////////////
// Надписи о количестве л/с.

&НаСервере
// Формирует надписи о количестве лицевых счетов, фактическом и доступном по лицензии.
//
Процедура СформироватьНадписиОКоличествеЛС()
	
	ЕстьЛСБезЛицензии = НЕ СтатистикаССервера.КоличествоЛСБезЛицензии = 0;
	
	Элементы.НадписьФактическоеКоличествоЛС.Заголовок = Новый ФорматированнаяСтрока(Новый ФорматированнаяСтрока("- всего в базе "),
																					Новый ФорматированнаяСтрока(Строка(СтатистикаССервера.КоличествоЛСНаСайтеВсего), Новый Шрифт(,,Истина), ?(ЕстьЛСБезЛицензии, Новый Цвет(255, 0, 0), Новый Цвет(51, 51, 51))),
																					Новый ФорматированнаяСтрока(" лицевых счетов."));
	
	Если СтатистикаССервера.ЕстьЛицензия И СтатистикаССервера.ЛицензияАктивна Тогда
		
		Элементы.НадписьДоступноеКоличествоЛС.Заголовок = Новый ФорматированнаяСтрока(Новый ФорматированнаяСтрока("- лицензия на обмен включает в себя "),
																					  Новый ФорматированнаяСтрока(Строка(СтатистикаССервера.МаксимальноеКоличествоЛСПоЛицензии), Новый Шрифт(,,Истина), ?(ЕстьЛСБезЛицензии, Новый Цвет(255, 0, 0), Новый Цвет(51, 51, 51))),
																					  Новый ФорматированнаяСтрока(" лицевых счетов."));
		
	ИначеЕсли СтатистикаССервера.УдалосьПолучитьСведенияССервера Тогда
		
		Элементы.НадписьДоступноеКоличествоЛС.Заголовок = Новый ФорматированнаяСтрока("- не обнаружена действующая лицензия.", Новый Шрифт(,,Истина), Новый Цвет(255, 0, 0));
		
	Иначе
		
		Элементы.НадписьДоступноеКоличествоЛС.Заголовок = Новый ФорматированнаяСтрока("- не удалось получить сведения о лицензии. Проверьте соединение с сетью Интернет.", Новый Шрифт(,,Истина), Новый Цвет(255, 0, 0));
		
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////
// Гистограмма о составе л/с.

&НаСервере
// Формирует гистограмму со сведениями по л/с.
//
Процедура СформироватьГистограмму()
	
	СтруктураПараметровГистограммы = ПодготовитьСтруктуруПараметровГистограммы();
	
	ВывестиГистограмму(СтруктураПараметровГистограммы);
	
КонецПроцедуры

&НаСервере
// Подготавливает параметры для формирования гистограммы на основании сведений статистики.
//
Функция ПодготовитьСтруктуруПараметровГистограммы()
	
	// Формируем количество л/с, отражаемое каждой полосой.
	КоличествоЖелтаяПолоса       = СтатистикаССервера.КоличествоЛСНаСайтеВсего; // Полоса фактического количества л/с.
	КоличествоЗеленаяПолоса      = 0; // Полоса л/с, входящих в количество доступных по лицензии.
	КоличествоКраснаяПолоса      = 0; // Полоса л/с, превышающих текущую лицензию.
	КоличествоШтрихованнаяПолоса = 0; // Полоса запаса л/с по текущей лицензии.
	
	// Если есть действующая лицензия.
	Если СтатистикаССервера.ЕстьЛицензия Тогда
		
		// Лицензии хватает.
		Если СтатистикаССервера.КоличествоЛСБезЛицензии = 0 Тогда
			
			МаксимумЛС = СтатистикаССервера.МаксимальноеКоличествоЛСПоЛицензии;
			КоличествоЖелтаяПолоса       = СтатистикаССервера.КоличествоЛСНаСайтеВсего;
			КоличествоЗеленаяПолоса      = СтатистикаССервера.КоличествоЛСНаСайтеВсего;
			КоличествоШтрихованнаяПолоса = МаксимумЛС - КоличествоЖелтаяПолоса;
			
		Иначе // Лицензии не хватает на количество л/с.
			
			МаксимумЛС = СтатистикаССервера.КоличествоЛСНаСайтеВсего;
			КоличествоЖелтаяПолоса  = СтатистикаССервера.КоличествоЛСНаСайтеВсего;
			КоличествоЗеленаяПолоса = СтатистикаССервера.МаксимальноеКоличествоЛСПоЛицензии;
			КоличествоКраснаяПолоса = МаксимумЛС - КоличествоЗеленаяПолоса;
			
		КонецЕсли;
		
	Иначе // Если нет действующей лицензии.
		
		МаксимумЛС = СтатистикаССервера.КоличествоЛСНаСайтеВсего;
		КоличествоЖелтаяПолоса  = МаксимумЛС;
		КоличествоКраснаяПолоса = МаксимумЛС;
		
	КонецЕсли;
	
	// Подготавливаем количество ячеек, выделяемых для каждой полосы.
	// Всего доступных ячеек 64.
	
	ЛСВЯчейке = МаксимумЛС / 64;
	
	Если ЛСВЯчейке = 0 Тогда
		ЯчеекЖелтойПолосы         = 0;
		ЯчеекПолнойПолосыЛицензии = 0;
		ЯчеекЗеленойПолосы        = 0;
	Иначе
		ЯчеекЖелтойПолосы         = Цел(Окр(КоличествоЖелтаяПолоса / ЛСВЯчейке, 2, РежимОкругления.Окр15как20));
		ЯчеекПолнойПолосыЛицензии = Цел(Окр((КоличествоЗеленаяПолоса + КоличествоКраснаяПолоса + КоличествоШтрихованнаяПолоса) / ЛСВЯчейке, 2, РежимОкругления.Окр15как20));
		ЯчеекЗеленойПолосы        = Цел(Окр(КоличествоЗеленаяПолоса / ЛСВЯчейке, 2, РежимОкругления.Окр15как20));
	КонецЕсли;
	
	ЯчеекКраснойИлиШтрихованнойПолосы = ЯчеекПолнойПолосыЛицензии - ЯчеекЗеленойПолосы;
	ЯчеекКраснойПолосы                = ?(КоличествоКраснаяПолоса = 0, 0, ЯчеекКраснойИлиШтрихованнойПолосы);
	ЯчеекШтрихованнойПолосы           = ?(КоличествоШтрихованнаяПолоса = 0, 0, ЯчеекКраснойИлиШтрихованнойПолосы);
	
	СтруктураГистограммы = Новый Структура("МаксимумЛС, ЯчеекЖелтойПолосы, ЯчеекЗеленойПолосы, ЯчеекКраснойПолосы, ЯчеекШтрихованнойПолосы",
											МаксимумЛС, ЯчеекЖелтойПолосы, ЯчеекЗеленойПолосы, ЯчеекКраснойПолосы, ЯчеекШтрихованнойПолосы);
	
	Возврат СтруктураГистограммы;
	
КонецФункции

&НаСервере
// Выводит гистограмму на основании сформированных параметров.
//
Процедура ВывестиГистограмму(СтруктураПараметровГистограммы)
	
	ТабличныйДокументДиаграммы.Очистить();
	ДокументДляВывода = Новый ТабличныйДокумент;
	тмДокумент = Новый ТабличныйДокумент;
	
	МаксимумЛС              = СтруктураПараметровГистограммы.МаксимумЛС;
	ЯчеекЖелтойПолосы       = СтруктураПараметровГистограммы.ЯчеекЖелтойПолосы;
	ЯчеекЗеленойПолосы      = СтруктураПараметровГистограммы.ЯчеекЗеленойПолосы;
	ЯчеекКраснойПолосы      = СтруктураПараметровГистограммы.ЯчеекКраснойПолосы;
	ЯчеекШтрихованнойПолосы = СтруктураПараметровГистограммы.ЯчеекШтрихованнойПолосы;
	
	Макет = Обработки.УПЖКХ_ИнтеграцияСМобильнымПриложением.ПолучитьМакет("ГистограммаДляОтраженияСтатистики");
	
	// Области.
	ОбластьВерхняяЧастьГистограммы          = Макет.ПолучитьОбласть("ВерхняяЧастьГистограммы");
	ОбластьЗаголовокФактическоеКоличествоЛС = Макет.ПолучитьОбласть("ЗаголовокФактическоеКоличествоЛС");
	ОбластьЗаголовокЛицензия                = Макет.ПолучитьОбласть("ЗаголовокЛицензия");
	ОбластьРазделительМеждуКолонками        = Макет.ПолучитьОбласть("РазделительМеждуКолонками");
	ОбластьНижняяЧастьГистограммы           = Макет.ПолучитьОбласть("НижняяЧастьГистограммы");
	ОбластьЖелтаяПолоса                     = Макет.ПолучитьОбласть("ЖелтаяПолоса");
	ОбластьЗеленаяПолоса                    = Макет.ПолучитьОбласть("ЗеленаяПолоса");
	ОбластьКраснаяПолоса                    = Макет.ПолучитьОбласть("КраснаяПолоса");
	ОбластьШтрихованнаяПолосаНеКонец        = Макет.ПолучитьОбласть("ШтрихованнаяПолосаНеКонец");
	ОбластьШтрихованнаяПолосаКонец          = Макет.ПолучитьОбласть("ШтрихованнаяПолосаКонец");
	
	// Верхняя часть.
	ДокументДляВывода.Вывести(ОбластьВерхняяЧастьГистограммы);
	
	// Полоса фактического количества л/с.
	тмДокумент.Вывести(ОбластьЗаголовокФактическоеКоличествоЛС);
	
	Если НЕ ЯчеекЖелтойПолосы = 0 Тогда
		Для Сч = 1 по ЯчеекЖелтойПолосы Цикл
			тмДокумент.Присоединить(ОбластьЖелтаяПолоса);
		КонецЦикла;
	КонецЕсли;
	
	ДокументДляВывода.Вывести(тмДокумент);
	тмДокумент.Очистить();
	
	// Разделитель.
	ДокументДляВывода.Вывести(ОбластьРазделительМеждуКолонками);
	
	// Полоса лицензий.
	тмДокумент.Вывести(ОбластьЗаголовокЛицензия);
	
	Если НЕ ЯчеекЗеленойПолосы = 0 Тогда
		Для Сч = 1 по ЯчеекЗеленойПолосы Цикл
			тмДокумент.Присоединить(ОбластьЗеленаяПолоса);
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ЯчеекКраснойПолосы = 0 Тогда
		Для Сч = 1 по ЯчеекКраснойПолосы Цикл
			тмДокумент.Присоединить(ОбластьКраснаяПолоса);
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ ЯчеекШтрихованнойПолосы = 0 Тогда
		Если НЕ ЯчеекШтрихованнойПолосы = 1 Тогда
			Для Сч = 1 по ЯчеекШтрихованнойПолосы - 1 Цикл
				тмДокумент.Присоединить(ОбластьШтрихованнаяПолосаНеКонец);
			КонецЦикла;
		КонецЕсли;
		
		тмДокумент.Присоединить(ОбластьШтрихованнаяПолосаКонец);
		
	КонецЕсли;
	
	ДокументДляВывода.Вывести(тмДокумент);
	тмДокумент.Очистить();
	
	// Нижняя часть.
	ОбластьНижняяЧастьГистограммы.Параметры.ВсегоЛС = МаксимумЛС;
	ОбластьНижняяЧастьГистограммы.Параметры.ПоловинаЛС = Цел(МаксимумЛС / 2);
	
	ДокументДляВывода.Вывести(ОбластьНижняяЧастьГистограммы);
	
	// Выводим.
	ТабличныйДокументДиаграммы.Вывести(ДокументДляВывода);
	
КонецПроцедуры

/////////////////////////////////////////////
// Сообщение о состоянии лицензии.

&НаСервере
// Выводит сообщение о текущем состоянии подписки.
//
Процедура ВывестиСообщениеОПодписке()
	
	ПолеИнформацииОПодписке = Новый ФорматированныйДокумент;
	
	Если СтатистикаССервера.УдалосьПолучитьСведенияССервера Тогда
		
		Если СтатистикаССервера.ЕстьЛицензия Тогда
			
			Если СтатистикаССервера.ЛицензияАктивна Тогда
				
				СекундДоИстеченияЛицензии = СтатистикаССервера.ДатаОкончанияЛицензии - ТекущаяДата();
				
				Если СекундДоИстеченияЛицензии <= 0 Тогда // Лицензия истекла.
					
					ВывестиСообщениеОбИстекшемСрокеДействияЛицензии();
					
				ИначеЕсли СекундДоИстеченияЛицензии <= 604800 Тогда // Меньше недели.
					
					ВывестиСообщениеОбИстеченииСрокаДействияЛицензии();
					
				ИначеЕсли СтатистикаССервера.МаксимальноеКоличествоЛСПоЛицензии >= СтатистикаССервера.КоличествоЛСНаСайтеВсего Тогда
					
					Если СтатистикаССервера.КоличествоЛСНаСайтеВсего > СтатистикаССервера.МаксимальноеКоличествоЛСПоЛицензии * 0.9 Тогда
						
						ВывестиСообщениеПриПочтиЗаполненнойЛицензии();
						
					Иначе
						
						ВывестиСообщениеПриЛицензииСДвойнымЗапасомЛС();
						
					КонецЕсли;
					
				Иначе
					
					ВывестиСообщениеПриНехваткеЛСВЛицензии();
					
				КонецЕсли;
				
				
			Иначе
				
				ВывестиСообщениеОбИстекшемСрокеДействияЛицензии();
				
			КонецЕсли;
			
		Иначе
			
			ВывестиСообщениеПриОтсутствииЛицензии();
			
		КонецЕсли;
		
	Иначе
		
		ВывестиСообщениеОНеудачномПолученииЛицензии();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Получает область из макета "ПФ_MXL_ВариантыСтатусовЛицензии".
//
Функция ПолучитьОбласть(НаименованиеОбласти)
	
	Макет   = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Обработка.УПЖКХ_ИнтеграцияСМобильнымПриложением.ПФ_MXL_ВариантыСтатусовЛицензии");
	Область = Макет.ПолучитьОбласть(НаименованиеОбласти);
	
	Возврат Область;
	
КонецФункции

&НаСервере
// Выводит сведения о подписке в табличный документ.
//
Процедура ВывестиСообщениеОПодпискеВТабличныйДокумент(НаименованиеОбласти)
	
	Попытка
		
		ПолеИнформацииОПодписке.Очистить();
		
		Область = ПолучитьОбласть(НаименованиеОбласти);
		
		ЗаполнитьЗначенияСвойств(Область.Параметры, СтатистикаССервера);
		
		ПолеИнформацииОПодписке.Вывести(Область);
		
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
// Выводит сообщение при лицензии с большим запасом л/с.
//
Процедура ВывестиСообщениеПриЛицензииСДвойнымЗапасомЛС()
	
	ВывестиСообщениеОПодпискеВТабличныйДокумент("ОбластьПриЛицензииСДвойнымЗапасомЛС");
	
КонецПроцедуры

&НаСервере
// Выводит сообщение при лицензии с малым запасом л/с.
//
Процедура ВывестиСообщениеПриПочтиЗаполненнойЛицензии()
	
	ВывестиСообщениеОПодпискеВТабличныйДокумент("ОбластьПриПочтиЗаполненнойЛицензии");
	
КонецПроцедуры

&НаСервере
// Выводит сообщение при превышении допустимого по лицензии количества л/с.
//
Процедура ВывестиСообщениеПриНехваткеЛСВЛицензии()
	
	ВывестиСообщениеОПодпискеВТабличныйДокумент("ОбластьПриНехваткеЛСВЛицензии");
	
КонецПроцедуры

&НаСервере
// Выводит сообщение об истечении срока действия лицензии.
//
Процедура ВывестиСообщениеОбИстеченииСрокаДействияЛицензии()
	
	ВывестиСообщениеОПодпискеВТабличныйДокумент("ОбластьПриИстеченииСрокаДействияЛицензии");
	
КонецПроцедуры

&НаСервере
// Выводит сообщение при отсутствии лицензии.
//
Процедура ВывестиСообщениеПриОтсутствииЛицензии()
	
	ВывестиСообщениеОПодпискеВТабличныйДокумент("ОбластьПриОтсутствииЛицензии");
	
КонецПроцедуры

&НаСервере
// Выводит сообщение об истекшем сроке действия лицензии.
//
Процедура ВывестиСообщениеОбИстекшемСрокеДействияЛицензии()
	
	ВывестиСообщениеОПодпискеВТабличныйДокумент("ОбластьПриИстекшемСрокеДействияЛицензии");
	
КонецПроцедуры

&НаСервере
// Выводит сообщение при неудачной попытке получения статистики.
//
Процедура ВывестиСообщениеОНеудачномПолученииЛицензии()
	
	ВывестиСообщениеОПодпискеВТабличныйДокумент("ОбластьПриНеудачномПолученииЛицензии");
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ПрочиеПроцедурыИФункции

&НаСервереБезКонтекста
// Записывает измененный макет.
//
Процедура ЗаписатьМакет(ИмяОбъектаМетаданныхМакета, АдресМакетаВоВременномХранилище)
	
	УправлениеПечатью.ЗаписатьМакет(ИмяОбъектаМетаданныхМакета, АдресМакетаВоВременномХранилище);
	
КонецПроцедуры

&НаКлиенте
// Помещает переданный текст в буфер обмена.
//
// Параметры:
//  ТекстДляКопирования - Строка - Строка, которую необходимо поместить в буфер обмена.
//
Процедура СкопироватьТекстВБуферОбмена(ТекстДляКопирования)
	
	ОбъектДляБуфераОбмена = Новый COMОбъект("htmlfile");
	ОбъектДляБуфераОбмена.ParentWindow.ClipboardData.Setdata("Text", ТекстДляКопирования);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ ОШИБОК

#Область ПроцедурыОбработкиОшибок

&НаКлиенте
// Обрабатывает сообщения об ошибках.
//
Процедура ОбработатьСообщенияОбОшибках(ОписаниеОшибок)
	
	Если ТипЗнч(ОписаниеОшибок) = Тип("Строка") Тогда
		
		Если НЕ ОписаниеОшибок = "" Тогда
			ВывестиСообщениеОбОшибке(ОписаниеОшибок);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОписаниеОшибок) = Тип("Массив") Тогда
		
		Для каждого ТекСтрока из ОписаниеОшибок Цикл
			Если ТипЗнч(ТекСтрока) = Тип("Строка") Тогда
				ВывестиСообщениеОбОшибке(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Выводит диалоговое окно предупреждения с описанием ошибки.
//
Процедура ВывестиСообщениеОбОшибке(ТекстСообщения)
	
	ПоказатьПредупреждение(, ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти
