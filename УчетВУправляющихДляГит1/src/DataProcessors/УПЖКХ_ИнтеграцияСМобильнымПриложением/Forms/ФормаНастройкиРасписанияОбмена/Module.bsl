
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.ОпределитьРасписанияРегламентныхЗаданийПоУмолчаниюЖКХЛичныйКабинет(РасписаниеРегламентногоЗаданияВыгрузокПоУмолчанию, РасписаниеРегламентногоЗаданияЗагрузокПоказанияПоУмолчанию, РасписаниеРегламентногоЗаданияЗагрузокОплатыПоУмолчанию);
	
	СтруктураОбмена = УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеСБазой.ПолучитьНастройкуАвтоматическогоОбменаСМобильнымПриложением();
	
	Если СтруктураОбмена.Свойство("ИдентификаторРегламентногоЗаданияВыгрузок") И СтруктураОбмена.Свойство("ИдентификаторРегламентногоЗаданияЗагрузокПоказания") И СтруктураОбмена.Свойство("ИдентификаторРегламентногоЗаданияЗагрузокОплаты") Тогда
		ИдентификаторРегламентногоЗаданияВыгрузок          = СтруктураОбмена.ИдентификаторРегламентногоЗаданияВыгрузок;
		ИдентификаторРегламентногоЗаданияЗагрузокПоказания = СтруктураОбмена.ИдентификаторРегламентногоЗаданияЗагрузокПоказания;
		ИдентификаторРегламентногоЗаданияЗагрузокОплаты    = СтруктураОбмена.ИдентификаторРегламентногоЗаданияЗагрузокОплаты;
	КонецЕсли;
	
	Если СтруктураОбмена.Свойство("НастройкаФормированияДанных") Тогда
		НастройкаФормированияДанных = СтруктураОбмена.НастройкаФормированияДанных;
	КонецЕсли;
	
	Если СтруктураОбмена.Свойство("КоличествоЛСВФайлеОбмена") Тогда
		КоличествоЛСВФайлеОбмена = СтруктураОбмена.КоличествоЛСВФайлеОбмена;
	Иначе
		КоличествоЛСВФайлеОбмена = 3000;
	КонецЕсли;
	
	Если СтруктураОбмена.Свойство("ЗагружатьПоказанияПУПоЗданиям") Тогда
		ЗагружатьПоказанияПУПоЗданиям = СтруктураОбмена.ЗагружатьПоказанияПУПоЗданиям;
	КонецЕсли;
	
	Если СтруктураОбмена.Свойство("ЗагружатьПоказанияПУПоУслугам") Тогда
		ЗагружатьПоказанияПУПоУслугам = СтруктураОбмена.ЗагружатьПоказанияПУПоУслугам;
	КонецЕсли;
	
	Если СтруктураОбмена.Свойство("ЧислоОкончанияПроведенияНачислений") Тогда
		ЧислоОкончанияПроведенияНачислений = СтруктураОбмена.ЧислоОкончанияПроведенияНачислений;
	КонецЕсли;
	
	Если СтруктураОбмена.Свойство("МесяцОкончанияПроведенияНачислений") Тогда
		МесяцОкончанияПроведенияНачислений = СтруктураОбмена.МесяцОкончанияПроведенияНачислений;
	КонецЕсли;
	
	Если СтруктураОбмена.Свойство("ДатаПоследнейЗагруженнойОплаты") Тогда
		ДатаПоследнейЗагруженнойОплаты = СтруктураОбмена.ДатаПоследнейЗагруженнойОплаты;
	КонецЕсли;
	
	РасписаниеРегламентногоЗаданияВыгрузок          = ПолучитьРасписаниеРегламентногоЗадания(ИдентификаторРегламентногоЗаданияВыгрузок, ВыполнятьВыгрузкиПоРасписанию);
	РасписаниеРегламентногоЗаданияЗагрузокПоказания = ПолучитьРасписаниеРегламентногоЗадания(ИдентификаторРегламентногоЗаданияЗагрузокПоказания, ВыполнятьЗагрузкиПоРасписаниюПоказания);
	РасписаниеРегламентногоЗаданияЗагрузокОплаты    = ПолучитьРасписаниеРегламентногоЗадания(ИдентификаторРегламентногоЗаданияЗагрузокОплаты, ВыполнятьЗагрузкиПоРасписаниюОплаты);
	
	УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.ОпределитьВидНастройкиРасписания(ИдентификаторРегламентногоЗаданияВыгрузок, РасписаниеРегламентногоЗаданияВыгрузокПоУмолчанию, ВидНастройкиРасписанияВыгрузок);
	УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.ОпределитьВидНастройкиРасписания(ИдентификаторРегламентногоЗаданияЗагрузокПоказания, РасписаниеРегламентногоЗаданияЗагрузокПоказанияПоУмолчанию, ВидНастройкиРасписанияЗагрузокПоказания);
	УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.ОпределитьВидНастройкиРасписания(ИдентификаторРегламентногоЗаданияЗагрузокОплаты, РасписаниеРегламентногоЗаданияЗагрузокОплатыПоУмолчанию, ВидНастройкиРасписанияЗагрузокОплаты);
	
	УправлениеФормой(ЭтаФорма);
	
	ЗаполнитьГиперссылкиОбОграниченииДатВводаПоказаний();
	
	ЗаполнитьГиперссылкиНастроекУпрощеннойАДС();
	
КонецПроцедуры

&НаКлиенте
// Обработчик "ПриОткрытии" формы.
//
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьЭлементовРасписания();
	
КонецПроцедуры

&НаКлиенте
// Обработчик "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеНастроекУчетнойПолитики" Тогда
		ЗаполнитьГиперссылкиОбОграниченииДатВводаПоказаний();
	ИначеЕсли ИмяСобытия = "ИзменениеНастроекУпрощеннойАДС" Тогда
		ЗаполнитьГиперссылкиНастроекУпрощеннойАДС();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ПрочиеПроцедурыИФункции

&НаСервере
// Устанавливает видимость элементов расписания.
//
Процедура УстановитьВидимостьЭлементовРасписания()
	
	// Управляем доступностью редактирования расписаний. Всем, кроме администратора, должно быть недоступно.
	Попытка
		
		РегламентныеЗаданияСлужебный.ВызватьИсключениеЕслиНетПраваАдминистрирования();
		УстановитьПривилегированныйРежим(Истина);
		
		ВыполнятьВыгрузкиПоРасписанию          = НЕ ВидНастройкиРасписанияВыгрузок = 0;
		ВыполнятьЗагрузкиПоРасписаниюПоказания = НЕ ВидНастройкиРасписанияЗагрузокПоказания = 0;
		ВыполнятьЗагрузкиПоРасписаниюОплаты    = НЕ ВидНастройкиРасписанияЗагрузокОплаты = 0;
		
		УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.ПодготовитьРегламентноеЗаданиеЖКХЛичныйКабинет(ИдентификаторРегламентногоЗаданияВыгрузок, ИдентификаторРегламентногоЗаданияЗагрузокПоказания, ИдентификаторРегламентногоЗаданияЗагрузокОплаты,
																										   ВыполнятьВыгрузкиПоРасписанию, ВыполнятьЗагрузкиПоРасписаниюПоказания, ВыполнятьЗагрузкиПоРасписаниюОплаты);
		
		// Выгрузки.
		Если ВидНастройкиРасписанияВыгрузок = 0 Тогда
			Элементы.РасписаниеРегламентногоЗаданияВыгрузок.Видимость = Ложь;
		Иначе
			Элементы.РасписаниеРегламентногоЗаданияВыгрузок.Видимость = истина;
			Если ВидНастройкиРасписанияВыгрузок = 1 Тогда
				РасписаниеРегламентногоЗаданияВыгрузок = УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.УстановитьРасписаниеРегламентногоЗаданияПоУмолчанию(ИдентификаторРегламентногоЗаданияВыгрузок, ВыполнятьВыгрузкиПоРасписанию, РасписаниеРегламентногоЗаданияВыгрузокПоУмолчанию);
				Элементы.РасписаниеРегламентногоЗаданияВыгрузок.Доступность = Ложь;
			Иначе
				Элементы.РасписаниеРегламентногоЗаданияВыгрузок.Доступность = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Элементы.РасписаниеРегламентногоЗаданияВыгрузок.Видимость = ?(ВидНастройкиРасписанияВыгрузок = 0, Ложь, Истина);
		
		Если ВидНастройкиРасписанияВыгрузок = 1 Тогда
			РасписаниеРегламентногоЗаданияВыгрузок = УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.УстановитьРасписаниеРегламентногоЗаданияПоУмолчанию(ИдентификаторРегламентногоЗаданияВыгрузок, ВыполнятьВыгрузкиПоРасписанию, РасписаниеРегламентногоЗаданияВыгрузокПоУмолчанию);
		КонецЕсли;
		
		// Загрузки показаний.
		Если ВидНастройкиРасписанияЗагрузокПоказания = 0 Тогда
			Элементы.РасписаниеРегламентногоЗаданияЗагрузокПоказания.Видимость = Ложь;
		Иначе
			Элементы.РасписаниеРегламентногоЗаданияЗагрузокПоказания.Видимость = Истина;
			Если ВидНастройкиРасписанияЗагрузокПоказания = 1 Тогда
				РасписаниеРегламентногоЗаданияЗагрузокПоказания = УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.УстановитьРасписаниеРегламентногоЗаданияПоУмолчанию(ИдентификаторРегламентногоЗаданияЗагрузокПоказания, ВыполнятьЗагрузкиПоРасписаниюПоказания, РасписаниеРегламентногоЗаданияЗагрузокПоказанияПоУмолчанию);
				Элементы.РасписаниеРегламентногоЗаданияЗагрузокПоказания.Доступность = Ложь;
			Иначе
				Элементы.РасписаниеРегламентногоЗаданияЗагрузокПоказания.Доступность = Истина;
			КонецЕсли;
		КонецЕсли;
		
		// Загрузки оплат.
		Если ВидНастройкиРасписанияЗагрузокОплаты = 0 Тогда
			Элементы.РасписаниеРегламентногоЗаданияЗагрузокОплаты.Видимость = Ложь;
		Иначе
			Элементы.РасписаниеРегламентногоЗаданияЗагрузокОплаты.Видимость = истина;
			Если ВидНастройкиРасписанияЗагрузокОплаты = 1 Тогда
				РасписаниеРегламентногоЗаданияЗагрузокОплаты = УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.УстановитьРасписаниеРегламентногоЗаданияПоУмолчанию(ИдентификаторРегламентногоЗаданияЗагрузокОплаты, ВыполнятьЗагрузкиПоРасписаниюОплаты, РасписаниеРегламентногоЗаданияЗагрузокОплатыПоУмолчанию);
				Элементы.РасписаниеРегламентногоЗаданияЗагрузокОплаты.Доступность = Ложь;
			Иначе
				Элементы.РасписаниеРегламентногоЗаданияЗагрузокОплаты.Доступность = Истина;
			КонецЕсли;
		КонецЕсли;
		
	// Управляем доступностью редактирования расписаний. Всем, кроме администратора, должно быть недоступно.
	Исключение
		Элементы.ВидНастройкиРасписанияВыгрузок.Доступность                  = Ложь;
		Элементы.ВидНастройкиРасписанияЗагрузокПоказания.Доступность         = Ложь;
		Элементы.ВидНастройкиРасписанияЗагрузокОплаты.Доступность            = Ложь;
		Элементы.РасписаниеРегламентногоЗаданияВыгрузок.Доступность          = Ложь;
		Элементы.РасписаниеРегламентногоЗаданияЗагрузокПоказания.Доступность = Ложь;
		Элементы.РасписаниеРегламентногоЗаданияЗагрузокОплаты.Доступность    = Ложь;
		
		Элементы.РасписаниеРегламентногоЗаданияВыгрузок.Видимость          = Истина;
		Элементы.РасписаниеРегламентногоЗаданияЗагрузокПоказания.Видимость = Истина;
		Элементы.РасписаниеРегламентногоЗаданияЗагрузокОплаты.Видимость    = Истина;
		
		РасписаниеРегламентногоЗаданияВыгрузок          = "<Настройка регламентных заданий недоступна для текущего пользователя>";
		РасписаниеРегламентногоЗаданияЗагрузокПоказания = "<Настройка регламентных заданий недоступна для текущего пользователя>";
		РасписаниеРегламентногоЗаданияЗагрузокОплаты    = "<Настройка регламентных заданий недоступна для текущего пользователя>";
	КонецПопытки;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
// Упарвление видимостью элементов формы.
//
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	ВидНастройкиРасписанияВыгрузок = Форма.ВидНастройкиРасписанияВыгрузок;
	Элементы.РасписаниеРегламентногоЗаданияВыгрузок.Доступность = ?(ВидНастройкиРасписанияВыгрузок = 1, Ложь, Истина);
	Элементы.РасписаниеРегламентногоЗаданияВыгрузок.Видимость   = НЕ ВидНастройкиРасписанияВыгрузок = 0;
	
	ВидНастройкиРасписанияЗагрузокПоказания = Форма.ВидНастройкиРасписанияЗагрузокПоказания;
	Элементы.РасписаниеРегламентногоЗаданияЗагрузокПоказания.Доступность = ?(ВидНастройкиРасписанияЗагрузокПоказания = 1, Ложь, Истина);
	Элементы.РасписаниеРегламентногоЗаданияЗагрузокПоказания.Видимость   = НЕ ВидНастройкиРасписанияЗагрузокПоказания = 0;
	
	ВидНастройкиРасписанияЗагрузокОплаты = Форма.ВидНастройкиРасписанияЗагрузокОплаты;
	Элементы.РасписаниеРегламентногоЗаданияЗагрузокОплаты.Доступность = ?(ВидНастройкиРасписанияЗагрузокОплаты = 1, Ложь, Истина);
	Элементы.РасписаниеРегламентногоЗаданияЗагрузокОплаты.Видимость   = НЕ ВидНастройкиРасписанияЗагрузокОплаты = 0;
	
КонецПроцедуры

&НаСервере
// Выводит на страницу гиперссылки на настройки Учетной политики (ЖКХ) для настройки дат ограничения ввода показаний.
//
Процедура ЗаполнитьГиперссылкиОбОграниченииДатВводаПоказаний()
	
	УПЖКХ_ПодключаемыеЭлементыФормСервер.ДобавитьГиперссылкиНаФормыЗаписиУчетнойПолитикиДляВсехОрганизаций(ЭтаФорма, Элементы.ГруппаНастройкаОграниченийВводаПоказанийСчетчиков);
	
КонецПроцедуры

&НаСервере
// Выводит на форму настроек упрощенной АДС
//
Процедура ЗаполнитьГиперссылкиНастроекУпрощеннойАДС()
	
	УПЖКХ_ПодключаемыеЭлементыФормСервер.ДобавитьГиперссылкиНаНастройкиУпрощеннойАДСДляВсехОрганизаций(ЭтаФорма, Элементы.ГруппаНастройкаУпрощеннойАДС);
	
КонецПроцедуры

&НаКлиенте
// Подключает обработчик события "ОбработкаНавигационнойСсылки" к гиперссылке настроек упрощенной АДС
//
Процедура Подключаемый_НастройкиУпрощеннойАДСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаДляОбработки, СтандартнаяОбработка)
	
	УПЖКХ_ПодключаемыеЭлементыФормКлиент.НастройкиУпрощеннойАДСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаДляОбработки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД

#Область ОбработчикиКоманд

&НаКлиенте
// Обработчик "ПриИзменении" тумблера "ВидНастройкиРасписания".
//
Процедура ВидНастройкиРасписанияПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементовРасписания();
	
КонецПроцедуры

&НаКлиенте
// Обработчик "ПриИзменении" тумблера "ВидНастройкиРасписанияЗагрузокПоказания".
//
Процедура ВидНастройкиРасписанияЗагрузокПоказанияПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементовРасписания();
	
КонецПроцедуры

&НаКлиенте
// Обработчик "ПриИзменении" тумблера "ВидНастройкиРасписанияЗагрузокОплаты".
//
Процедура ВидНастройкиРасписанияЗагрузокОплатыПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементовРасписания();
	
КонецПроцедуры

&НаКлиенте
// Обработчик нажатия кнопки "РасписаниеРегламентногоЗаданияВыгрузок".
//
Процедура РасписаниеРегламентногоЗаданияВыгрузокНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(ПолучитьРасписаниеВыгрузок());
	Диалог.Показать(Новый ОписаниеОповещения("РасписаниеРегламентногоЗаданияВыгрузокНажатиеЗавершение", ЭтаФорма, Новый Структура("Диалог", Диалог)));
	
КонецПроцедуры

&НаКлиенте
// Обработчик нажатия кнопки "РасписаниеРегламентногоЗаданияЗагрузокПоказания".
//
Процедура РасписаниеРегламентногоЗаданияЗагрузокПоказанияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(ПолучитьРасписаниеЗагрузокПоказания());
	Диалог.Показать(Новый ОписаниеОповещения("РасписаниеРегламентногоЗаданияЗагрузокПоказанияНажатиеЗавершение", ЭтаФорма, Новый Структура("Диалог", Диалог)));
	
КонецПроцедуры

&НаКлиенте
// Обработчик нажатия кнопки "РасписаниеРегламентногоЗаданияЗагрузокОплаты".
//
Процедура РасписаниеРегламентногоЗаданияЗагрузокОплатыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(ПолучитьРасписаниеЗагрузокОплаты());
	Диалог.Показать(Новый ОписаниеОповещения("РасписаниеРегламентногоЗаданияЗагрузокОплатыНажатиеЗавершение", ЭтаФорма, Новый Структура("Диалог", Диалог)));
	
КонецПроцедуры

&НаКлиенте
// Обрабатывает оповещения об изменении расписания выгрузок.
//
Процедура РасписаниеРегламентногоЗаданияВыгрузокНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	
	Если ТипЗнч(Результат) = Тип("РасписаниеРегламентногоЗадания") Тогда
		УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.УстановитьРасписание(ИдентификаторРегламентногоЗаданияВыгрузок, Диалог.Расписание);
		РасписаниеРегламентногоЗаданияВыгрузок = ПолучитьРасписаниеРегламентногоЗадания(ИдентификаторРегламентногоЗаданияВыгрузок, ВыполнятьВыгрузкиПоРасписанию);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обрабатывает оповещения об изменении расписания загрузок показаний.
//
Процедура РасписаниеРегламентногоЗаданияЗагрузокПоказанияНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	
	Если ТипЗнч(Результат) = Тип("РасписаниеРегламентногоЗадания") Тогда
		УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.УстановитьРасписание(ИдентификаторРегламентногоЗаданияЗагрузокПоказания, Диалог.Расписание);
		РасписаниеРегламентногоЗаданияЗагрузокПоказания = ПолучитьРасписаниеРегламентногоЗадания(ИдентификаторРегламентногоЗаданияЗагрузокПоказания, ВыполнятьЗагрузкиПоРасписаниюПоказания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обрабатывает оповещения об изменении расписания загрузок оплат.
//
Процедура РасписаниеРегламентногоЗаданияЗагрузокОплатыНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	
	Если ТипЗнч(Результат) = Тип("РасписаниеРегламентногоЗадания") Тогда
		УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.УстановитьРасписание(ИдентификаторРегламентногоЗаданияЗагрузокОплаты, Диалог.Расписание);
		РасписаниеРегламентногоЗаданияЗагрузокОплаты = ПолучитьРасписаниеРегламентногоЗадания(ИдентификаторРегламентногоЗаданияЗагрузокОплаты, ВыполнятьЗагрузкиПоРасписаниюОплаты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик нажатия кнопки "СохранитьИЗакрыть".
//
Процедура СохранитьИЗакрыть(Команда)
	
	Если НастройкаФормированияДанных.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбрана настройка формирования данных.");
		
	Иначе
		
		СтруктураНастроекОбмена = УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеСБазой.ПолучитьНастройкуАвтоматическогоОбменаСМобильнымПриложением();
		ЗаполнитьЗначенияСвойств(СтруктураНастроекОбмена, ЭтаФорма);
		
		УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеСБазой.УстановитьНастройкуАвтоматическогоОбменаДаннымиСМобильнымПриложением(СтруктураНастроекОбмена);
		
		ВладелецФормы.ПроверитьФактНаличияВыбраннойНастройкиСбораДанныхИУстановитьДоступностьЭлементовФормы();
		
		Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С РЕГЛАМЕНТНЫМ ЗАДАНИЕМ

#Область ПроцедурыИФункцииРаботыСРегламентнымЗаданием

&НаСервере
// Функция возвращает расписание регламентного задания.
//
Функция ПолучитьРасписаниеВыгрузок()
	
	Возврат УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.ПолучитьРасписаниеВыгрузокЖКХЛичныйКабинет(ИдентификаторРегламентногоЗаданияВыгрузок, ИдентификаторРегламентногоЗаданияЗагрузокПоказания);
	
КонецФункции // ПолучитьРасписание()

&НаСервере
// Функция возвращает расписание регламентного задания.
//
Функция ПолучитьРасписаниеЗагрузокПоказания()
	
	Возврат УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.ПолучитьРасписаниеЗагрузокПоказанийЖКХЛичныйКабинет(ИдентификаторРегламентногоЗаданияВыгрузок, ИдентификаторРегламентногоЗаданияЗагрузокПоказания, ИдентификаторРегламентногоЗаданияЗагрузокОплаты);
	
КонецФункции // ПолучитьРасписание()

&НаСервере
// Функция возвращает расписание регламентного задания.
//
Функция ПолучитьРасписаниеЗагрузокОплаты()
	
	Возврат УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.ПолучитьРасписаниеЗагрузокОплатЖКХЛичныйКабинет(ИдентификаторРегламентногоЗаданияВыгрузок, ИдентификаторРегламентногоЗаданияЗагрузокПоказания, ИдентификаторРегламентногоЗаданияЗагрузокОплаты);
	
КонецФункции // ПолучитьРасписание()

&НаСервереБезКонтекста
// Функция формирует текст расписания регламентного задания.
//
Функция ПолучитьРасписаниеРегламентногоЗадания(ИдентификаторРегламентногоЗадания, ВыполнятьОбменПоРасписанию)
	
	Возврат УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.ПолучитьРасписаниеРегламентногоЗадания(ИдентификаторРегламентногоЗадания, ВыполнятьОбменПоРасписанию);
	
КонецФункции // ПолучитьРасписаниеРегламентногоЗадания()

#КонецОбласти
