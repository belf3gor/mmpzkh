#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	НаименованиеКонфигурации = Метаданные.КраткаяИнформация;
	ТипСообщения             = Параметры.ТипСообщения;
	ТекущийШаг               = 1;
	ВсегоШагов               = КоличествоШаговПомощника();
	АдресХранилища           = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	Организация              = Справочники.Организации.ОрганизацияПоУмолчанию();
	ЕстьПравоНаОбновление    = Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь);
	Элементы.ЕстьПравоНаОбновление.Видимость = ЕстьПравоНаОбновление;
	Элементы.НетПравНаОбновление.Видимость   = НЕ ЕстьПравоНаОбновление;
	
	// Данные интернет поддержки
	УстановитьПривилегированныйРежим(Истина);
	ДанныеИнтернетПоддержки = ИнтернетПоддержкаПользователей.ДанныеАутентификацииПользователяИнтернетПоддержки();
	УстановитьПривилегированныйРежим(Ложь);
	ПодключенаИнтернетПоддержка = (ДанныеИнтернетПоддержки <> Неопределено);
	Элементы.ДекорацияПодключитьИнтернетПоддержку.Видимость = НЕ ПодключенаИнтернетПоддержка;
	Если ПодключенаИнтернетПоддержка Тогда
		ЛогинПользователя = ДанныеИнтернетПоддержки.Логин;
		РегистрационныйНомер = ИнтернетПоддержкаПользователей.РегистрационныйНомерПрограммногоПродукта();
	КонецЕсли;
	
	// Подготовим помощник
	ПодготовитьСтруктуруПроверяемыхРеквизитов();
	ПодготовитьСписокСтраницПомощника();
	ПодготовитьТекстыПомощника();
	ЗаполнитьРазделУчета();
	УстановитьУчетнуюЗапись();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьИнформациюОНеобходимостиОбновления();
	
	// Если обновление не требуется, то исключим страницу с проверкой обновления
	// и уменьшим количество шагов.
	Если ОбновлениеНеТребуется Тогда
		СписокСтраницПомошника.Удалить(0);
		ВсегоШагов = ВсегоШагов - 1;
	КонецЕсли;
	
	// Если регистрационные данные заполнены, то исключим страницу
	// и уменьшим количество шагов.
	Если РегистрационныеДанныеЗаполнены() Тогда
		СтраницаРегистрационнаяИнформация = СписокСтраницПомошника.НайтиПоЗначению("СтраницаРегистрационнаяИнформация");
		СписокСтраницПомошника.Удалить(СтраницаРегистрационнаяИнформация);
		ВсегоШагов = ВсегоШагов - 1;
	Иначе
		Элементы.ИзменитьРегистрационныеДанные.Видимость = Ложь;
	КонецЕсли;
	
	ПерваяСтраница = СписокСтраницПомошника[0].Значение;
	Элементы.СтраницыОбращенияВПоддержку.ТекущаяСтраница = Элементы[ПерваяСтраница];
	
	УстановитьКнопкиКоманднойПанели();
	УстановитьЗаголовокФормы();
	ВидПриложения = ВидПриложения();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	НепроверяемыеРеквизиты = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(ПроверяемыеРеквизиты);
	
	ИмяТекущейСтраницы = СписокСтраницПомошника.Получить(ТекущийШаг - 1).Значение;
	Если СтруктураПроверяемыхРеквизитов.Свойство(ИмяТекущейСтраницы) Тогда
		МассивПроверяемыхРеквизитовСтраницы = СтруктураПроверяемыхРеквизитов[ИмяТекущейСтраницы];
		НепроверяемыеРеквизиты = 
			ОбщегоНазначенияКлиентСервер.РазностьМассивов(НепроверяемыеРеквизиты, МассивПроверяемыхРеквизитовСтраницы);
	КонецЕсли;
	
	// Отдельные проверки
	Если ВРег(ИмяТекущейСтраницы) = ВРег("СтраницаОшибкаИнформация")
		И НЕ ЗначениеЗаполнено(МогуПредоставитьБазу) Тогда
		ТекстОшибки = НСтр("ru='Укажите, можете ли Вы предоставить базу, на которой воспроизводится ошибка'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "МогуПредоставитьБазу", , Отказ);
	ИначеЕсли ВРег(ИмяТекущейСтраницы) = ВРег("СтраницаВопросПоиск") 
		И (НЕ ЗначениеЗаполнено(ОценкаИнформационныхРесурсов) 
		ИЛИ ОценкаИнформационныхРесурсов = "Другое" И НЕ ЗначениеЗаполнено(ПочемуИнформационныеРесурсыНеБылиПолезны)) Тогда 
		ТекстОшибки = НСтр("ru='Укажите, почему ссылки на приведенные ресурсы не были полезны'");
		Если НЕ ЗначениеЗаполнено(ОценкаИнформационныхРесурсов) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "ОценкаИнформационныхРесурсов", , Отказ);
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "ПочемуИнформационныеРесурсыНеБылиПолезны", , Отказ);
		КонецЕсли;
	ИначеЕсли ВРег(ИмяТекущейСтраницы) = ВРег("СтраницаРегистрационнаяИнформация") И ЗначениеЗаполнено(АдресОтвета) Тогда
		Если НЕ ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(АдресОтвета) Тогда
			ТекстОшибки = НСтр("ru='Указан некорректный адрес электронной почты.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "АдресОтвета", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОценкаИнформационныхРесурсовДругоеПриИзменении(Элемент)
	
	Элементы.ПочемуИнформационныеРесурсыНеБылиПолезны.Доступность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОценкаИнформационныхРесурсовОтветаНеНашлосьПриИзменении(Элемент)
	
	Элементы.ПочемуИнформационныеРесурсыНеБылиПолезны.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияНаКоторуюПрограммаЗарегистрированаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Организации") И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ОрганизацияНаКоторуюПрограммаЗарегистрирована = НаименованиеОрганизации(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПриложенныеФайлыКОшибкеНажатие(Элемент, СтандартнаяОбработка)
	
	ОткрытьПриложенныеФайлы(СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПриложенныеФайлыВопросНажатие(Элемент, СтандартнаяОбработка)
	
	ОткрытьПриложенныеФайлы(СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПриложенныеФайлыПожеланиеНажатие(Элемент, СтандартнаяОбработка)
	
	ОткрытьПриложенныеФайлы(СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РазделУчетаОшибкаПриИзменении(Элемент)
	
	Если ВыбратьРазделУчетаИзСписка(РазделУчета) Тогда
		ОткрытьФормуВыбораРазделаУчета(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделУчетаВопросПриИзменении(Элемент)
	
	Если ВыбратьРазделУчетаИзСписка(РазделУчета) Тогда
		ОткрытьФормуВыбораРазделаУчета(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделУчетаПожеланиеПриИзменении(Элемент)
	
	Если ВыбратьРазделУчетаИзСписка(РазделУчета) Тогда
		ОткрытьФормуВыбораРазделаУчета(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПродолжитьБезОбновленияПриИзменении(Элемент)
	
	Если ПродолжитьБезОбновления Тогда
		ОбновитьКонфигурацию = "Позднее";
	Иначе
		ОбновитьКонфигурацию = "";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТаблицыФормыВложения

&НаКлиенте
Процедура ВложенияПередУдалением(Элемент, Отказ)
	
	// Удаляет вложение из списка, а так же вызывает функцию
	// обновления таблицы представления вложений.
	
	НаименованиеВложения = Элемент.ТекущиеДанные[Элемент.ТекущийЭлемент.Имя];
	
	Для Каждого Вложение Из Объект.Вложения Цикл
		Если Вложение.Представление = НаименованиеВложения Тогда
			Объект.Вложения.Удалить(Вложение);
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьПредставлениеВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	ДобавитьФайлВоВложения();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьВложение();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") Тогда
		ДополнительныеПараметры = Новый Структура("Имя", ПараметрыПеретаскивания.Значение.Имя);
		ОписаниеОповещения = Новый ОписаниеОповещения("ВложенияПеретаскиваниеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		НачатьПомещениеФайла(ОписаниеОповещения, , ПараметрыПеретаскивания.Значение.ПолноеИмя, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПеретаскиваниеЗавершение(Результат, АдресВременногоХранилища, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Файлы = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(
		Новый ОписаниеПередаваемогоФайла(ДополнительныеПараметры.Имя, АдресВременногоХранилища));
	
	ДобавитьФайлыВСписок(Файлы);
	ОбновитьПредставлениеВложений();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Далее(Команда)
	
	Если ЭтоСтраницаОтправки() Тогда
		ОтправитьПочтовоеСообщение();
	Иначе
		ПерейтиКСледующейСтранице();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	ТекущийШаг                                           = ТекущийШаг - 1;
	ИмяПредыдущейСтраницы                                = СписокСтраницПомошника.Получить(ТекущийШаг - 1).Значение;
	Элементы.СтраницыОбращенияВПоддержку.ТекущаяСтраница = Элементы[ИмяПредыдущейСтраницы];
	
	УстановитьКнопкиКоманднойПанели();
	УстановитьЗаголовокФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОрганизацию(Команда)
	
	ОткрытьФорму("Справочник.Организации.ФормаВыбора", , Элементы.ОрганизацияНаКоторуюПрограммаЗарегистрирована);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	ОткрытьВложение();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложитьФайлы(Команда)
	
	ДобавитьФайлВоВложения();
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиНаИТС(Команда)
	
	ПоискОтветаНаВопрос();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРегистрационныеДанные(Команда)
	
	РегистрационныеДанные = Новый Структура;
	РегистрационныеДанные.Вставить("РегистрационныйНомер", РегистрационныйНомер);
	РегистрационныеДанные.Вставить("ИмяПользователя",      ИмяПользователя);
	РегистрационныеДанные.Вставить("Должность",            Должность);
	РегистрационныеДанные.Вставить("АдресОтвета",          АдресОтвета);
	РегистрационныеДанные.Вставить("ОрганизацияНаКоторуюПрограммаЗарегистрирована", 
		ОрганизацияНаКоторуюПрограммаЗарегистрирована);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИзменитьРегистрационныеДанныеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.ОбращениеВТехническуюПоддержку.Форма.РегистрационныеДанные",
		РегистрационныеДанные, ЭтотОбъект,,,,ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область УправлениеФормой

&НаКлиенте
Процедура УстановитьЗаголовокФормы()
	
	ТипСообщения = Параметры.ТипСообщения;
	Если ЭтоОшибка(ТипСообщения) Тогда
		Заголовок = СтрШаблон(НСтр("ru='Сообщить об ошибке: шаг %1 из %2'"), ТекущийШаг, ВсегоШагов);
	ИначеЕсли ЭтоВопрос(ТипСообщения) Тогда
		Заголовок = СтрШаблон(НСтр("ru='Задать вопрос: шаг %1 из %2'"), ТекущийШаг, ВсегоШагов);
	ИначеЕсли ЭтоПожелание(ТипСообщения) Тогда
		Заголовок = СтрШаблон(НСтр("ru='Написать пожелание: шаг %1 из %2'"), ТекущийШаг, ВсегоШагов);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПодготовитьСтруктуруПроверяемыхРеквизитов()

	// На каждой странице свой набор реквизитов, которые необходимо проверять.
	// Опишем страницы и реквизиты, которые следует проверить.
	// Страницы, на которых нет проверяемых реквизитов не указываем.
	
	СтруктураПроверяемыхРеквизитов = Новый Структура;
	Если ЭтоОшибка(ТипСообщения) Тогда
		СтруктураПроверяемыхРеквизитов.Вставить("СтраницаОшибкаИнформация", Новый Массив);
		СтруктураПроверяемыхРеквизитов.СтраницаОшибкаИнформация.Добавить("РазделУчета");
		СтруктураПроверяемыхРеквизитов.СтраницаОшибкаИнформация.Добавить("Организация");
		СтруктураПроверяемыхРеквизитов.СтраницаОшибкаИнформация.Добавить("ПорядокВоспроизведения");
		СтруктураПроверяемыхРеквизитов.СтраницаОшибкаИнформация.Добавить("ОжидаемоеПоведение");
	ИначеЕсли ЭтоВопрос(ТипСообщения) Тогда
		СтруктураПроверяемыхРеквизитов.Вставить("СтраницаВопросИнформация", Новый Массив);
		СтруктураПроверяемыхРеквизитов.СтраницаВопросИнформация.Добавить("РазделУчета");
		СтруктураПроверяемыхРеквизитов.СтраницаВопросИнформация.Добавить("Организация");
		СтруктураПроверяемыхРеквизитов.СтраницаВопросИнформация.Добавить("РешаемаяЗадача");
		СтруктураПроверяемыхРеквизитов.СтраницаВопросИнформация.Добавить("ЧтоВызываетВопрос");
	ИначеЕсли ЭтоПожелание(ТипСообщения) Тогда
		СтруктураПроверяемыхРеквизитов.Вставить("СтраницаПожеланиеИнформация", Новый Массив);
		СтруктураПроверяемыхРеквизитов.СтраницаПожеланиеИнформация.Добавить("РазделУчета");
		СтруктураПроверяемыхРеквизитов.СтраницаПожеланиеИнформация.Добавить("РешаемаяЗадача");
		СтруктураПроверяемыхРеквизитов.СтраницаПожеланиеИнформация.Добавить("ЧтоВызываетСложности");
		СтруктураПроверяемыхРеквизитов.СтраницаПожеланиеИнформация.Добавить("ОжидаемоеПоведение");
	КонецЕсли;
	
	СтруктураПроверяемыхРеквизитов.Вставить("СтраницаРегистрационнаяИнформация", Новый Массив);
	СтруктураПроверяемыхРеквизитов.СтраницаРегистрационнаяИнформация.Добавить("РегистрационныйНомер");
	СтруктураПроверяемыхРеквизитов.СтраницаРегистрационнаяИнформация.Добавить("ОрганизацияНаКоторуюПрограммаЗарегистрирована");
	СтруктураПроверяемыхРеквизитов.СтраницаРегистрационнаяИнформация.Добавить("ИмяПользователя");
	СтруктураПроверяемыхРеквизитов.СтраницаРегистрационнаяИнформация.Добавить("Должность");
	СтруктураПроверяемыхРеквизитов.СтраницаРегистрационнаяИнформация.Добавить("АдресОтвета");
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьСписокСтраницПомощника()

	// В списке значений указываются страницы в порядке, в котором их следует показывать.
	// Навигацию по помощнику используется этот список значений.
	
	СписокСтраницПомошника.Добавить("СтраницаПроверкаВерсииКонфигурации");
	Если ЭтоОшибка(ТипСообщения) Тогда
		СписокСтраницПомошника.Добавить("СтраницаОшибкаПоиск");
		СписокСтраницПомошника.Добавить("СтраницаОшибкаИнформация");
	ИначеЕсли ЭтоВопрос(ТипСообщения) Тогда
		СписокСтраницПомошника.Добавить("СтраницаВопросПоиск");
		СписокСтраницПомошника.Добавить("СтраницаВопросИнформация");
	ИначеЕсли ЭтоПожелание(ТипСообщения) Тогда
		СписокСтраницПомошника.Добавить("СтраницаПожеланиеИнформация");
	КонецЕсли;
	СписокСтраницПомошника.Добавить("СтраницаРегистрационнаяИнформация");
	СписокСтраницПомошника.Добавить("СтраницаОтправкаСообщения");

КонецПроцедуры

&НаКлиенте
Функция РегистрационныеДанныеЗаполнены()
	
	РегистрационныеДанные = Новый Массив;
	РегистрационныеДанные.Добавить("РегистрационныйНомер");
	РегистрационныеДанные.Добавить("ОрганизацияНаКоторуюПрограммаЗарегистрирована");
	РегистрационныеДанные.Добавить("ИмяПользователя");
	РегистрационныеДанные.Добавить("Должность");
	РегистрационныеДанные.Добавить("АдресОтвета");
	
	РегистрационныеДанныеЗаполнены = Истина;
	Для Каждого ПолеРегистрационныхДанных Из РегистрационныеДанные Цикл
		Если НЕ ЗначениеЗаполнено(ЭтотОбъект[ПолеРегистрационныхДанных]) Тогда
			РегистрационныеДанныеЗаполнены = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РегистрационныеДанныеЗаполнены;
	
КонецФункции

&НаКлиенте
Функция МожноПерейтиДалее()
	
	Результат = Истина;
	Если НЕ ПодключенаИнтернетПоддержка Тогда
		ТекстВопроса = НСтр("ru='Для отправки сообщений
			|необходимо подключиться к интернет-поддержке пользователей.
			|Подключиться сейчас?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержку", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Результат = Ложь;
	ИначеЕсли НЕ ОбновлениеНеТребуется И НЕ ЕстьПравоНаОбновление И НЕ ПродолжитьБезОбновления Тогда
		ТекстПредупреждения = НСтр("ru='Для обновления конфигурации обратитесь к администратору'");
		ПоказатьПредупреждение(,ТекстПредупреждения);
		Результат = Ложь;
	ИначеЕсли ОбновитьКонфигурацию = "Сейчас" Тогда
		ПолучениеОбновленийПрограммыКлиент.ОбновитьПрограмму();
		Результат = Ложь;
	ИначеЕсли НЕ ПроверитьЗаполнение() Тогда
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПерейтиКСледующейСтранице()

	Если Не МожноПерейтиДалее() Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийШаг           = ТекущийШаг + 1;
	ИмяСледующейСтраницы = СписокСтраницПомошника.Получить(ТекущийШаг - 1).Значение;
	Элементы.СтраницыОбращенияВПоддержку.ТекущаяСтраница = Элементы[ИмяСледующейСтраницы];
	
	УстановитьКнопкиКоманднойПанели();
	УстановитьЗаголовокФормы();
	
	Если ЭтоСтраницаОтправки() Тогда
		// Для страницы отправки сформируем текст сообщения
		// и подготовим автовложения.
		СформироватьТекстСообщения();
		ДобавитьАвтоВложения();
		ОбновитьПредставлениеВложений();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоСтраницаОтправки()

	Возврат (Элементы.СтраницыОбращенияВПоддержку.ТекущаяСтраница = Элементы.СтраницаОтправкаСообщения);

КонецФункции

&НаКлиенте
Процедура УстановитьКнопкиКоманднойПанели()
	
	ПерваяСтраница = СписокСтраницПомошника[0].Значение;
	Если Элементы.СтраницыОбращенияВПоддержку.ТекущаяСтраница = Элементы[ПерваяСтраница] Тогда
		Элементы.Далее.Заголовок = НСтр("ru='Далее >>'");
		Элементы.Назад.Доступность = Ложь; // На первой странице кнопка "Назад" не доступна
	ИначеЕсли ЭтоСтраницаОтправки() Тогда
		Элементы.Далее.Заголовок = НСтр("ru='Отправить сообщение'");
		Элементы.Назад.Доступность = Истина;
	Иначе
		Элементы.Далее.Заголовок = НСтр("ru='Далее >>'");
		Элементы.Назад.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьТекстыПомощника()

	Если ЭтоВопрос(ТипСообщения) Тогда
		РекомендацияКОбновлению = 
			НСтр("ru='Рекомендуем убедиться, что вопрос, которой Вы хотите задать, не решен в актуальной версии конфигурации.'");
		Элементы.ОбновитьКонфигурациюСейчас.Подсказка = 
			НСтр("ru='В актуальной версии Ваш вопрос может быть уже решен.'");
	ИначеЕсли ЭтоПожелание(ТипСообщения) Тогда
		РекомендацияКОбновлению = 
			НСтр("ru='Рекомендуем убедиться, что пожелание, которое Вы хотите написать, востребовано на актуальной версии конфигурации.'");
		Элементы.ОбновитьКонфигурациюСейчас.Подсказка = 
			НСтр("ru='В актуальной версии пожелание может быть уже реализовано.'");
	ИначеЕсли ЭтоОшибка(ТипСообщения) Тогда
		РекомендацияКОбновлению = 
			НСтр("ru='Рекомендуем убедиться, что ошибка, о которой Вы хотите сообщить, воспроизводится на актуальной версии конфигурации.'");
		Элементы.ОбновитьКонфигурациюСейчас.Подсказка = 
			НСтр("ru='В актуальной версии ошибка может быть уже исправлена.'");
	КонецЕсли;
	
	УстановитьТекстПриложенныеФайлы();
	
КонецПроцедуры

&НаСервере
Функция КоличествоШаговПомощника()
	
	// Количество шагов может быть уменьшено ПриОткрытии(),
	// если не требуется обновление конфигурации
	// и если заполнены регистрационные данные.
	Если ЭтоОшибка(ТипСообщения) Тогда
		ВсегоШагов = 5;
	ИначеЕсли ЭтоВопрос(ТипСообщения) Тогда
		ВсегоШагов = 5;
	Иначе
		ВсегоШагов = 4;
	КонецЕсли;
	
	Возврат ВсегоШагов;
	
КонецФункции

&НаКлиенте
Процедура УстановитьИнформациюОНеобходимостиОбновления()
	
	ТекущаяВерсияКонфигурации = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента().ВерсияКонфигурации;
	
	#Если ВебКлиент Тогда
	
	// В веб-клиенте нет возможности проверить наличие обновления
	ОбновлениеСейчас = Ложь;
	ОбновлениеНеТребуется = Истина;
	
	#Иначе
	
	ОбновлениеСейчас = Ложь;
	ОбновлениеНеТребуется = Ложь;
	
	ИнформацияОДоступномОбновлении = ПолучениеОбновленийПрограммыКлиент.ИнформацияОДоступномОбновлении();
	
	Если ИнформацияОДоступномОбновлении = Неопределено 
		ИЛИ ЗначениеЗаполнено(ИнформацияОДоступномОбновлении.ИнформацияОбОшибке) Тогда
		АктуальнаяВерсияКонфигурации = НСтр("ru = 'Нет данных'");
		ОбновлениеСейчас             = ЕстьПравоНаОбновление;
	ИначеЕсли ИнформацияОДоступномОбновлении.ДоступноОбновление 
		И ИнформацияОДоступномОбновлении.Конфигурация <> Неопределено Тогда
		АктуальнаяВерсияКонфигурации = ИнформацияОДоступномОбновлении.Конфигурация.Версия;
		ОбновлениеСейчас             = ЕстьПравоНаОбновление;
	Иначе
		ОбновлениеНеТребуется = Истина;
	КонецЕсли;
	
	#КонецЕсли
	
	Если ОбновлениеНеТребуется Тогда
		ОбновитьКонфигурацию = "НеТребуется";
	ИначеЕсли ОбновлениеСейчас Тогда
		ОбновитьКонфигурацию = "Сейчас";
	Иначе
		ОбновитьКонфигурацию = "";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСВложениями

&НаКлиенте
Процедура ДобавитьФайлВоВложения()
	
	Оповещение = Новый ОписаниеОповещения("ДобавитьФайлВоВложенияПриПомещенииФайлов", ЭтотОбъект);
	
	ПараметрыЗагрузки = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузки.ИдентификаторФормы = УникальныйИдентификатор;
	
	ФайловаяСистемаКлиент.ЗагрузитьФайлы(Оповещение, ПараметрыЗагрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьФайлВоВложенияПриПомещенииФайлов(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПомещенныеФайлы = Неопределено Или ПомещенныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьФайлыВСписок(ПомещенныеФайлы);
	ОбновитьПредставлениеВложений();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьФайлыВСписок(ПомещенныеФайлы)
	
	Для Каждого ОписаниеФайла Из ПомещенныеФайлы Цикл
		СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ОписаниеФайла.Имя);
		Вложение = Объект.Вложения.Добавить();
		Вложение.Представление             = СтруктураИмениФайла.Имя;
		Вложение.АдресВоВременномХранилище = ОписаниеФайла.Хранение;
	КонецЦикла;
	
	УстановитьТекстПриложенныеФайлы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеВложений()
	
	ПредставлениеВложений.Очистить();
	
	Индекс = 0;
	
	Для Каждого Вложение Из Объект.Вложения Цикл
		Если Индекс = 0 Тогда
			СтрокаПредставления = ПредставлениеВложений.Добавить();
		КонецЕсли;
		
		СтрокаПредставления["Вложение" + Строка(Индекс + 1)] = Вложение.Представление;
		
		Индекс = Индекс + 1;
		Если Индекс = 2 Тогда 
			Индекс = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриложитьФайлЗавершение(ВыбранныеФайлы, ДопПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыбранныйФайл Из ВыбранныеФайлы Цикл
		НоваяСтрока = Объект.Вложения.Добавить();
		СтруктураИмениФайла = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(ВыбранныйФайл);
		НоваяСтрока.Представление = СтруктураИмениФайла.ИмяБезРасширения;
	КонецЦикла;
	
	УстановитьТекстПриложенныеФайлы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложение()
	
	ВыбранноеВложение = ВыбранноеВложение();
	Если ВыбранноеВложение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		ПолучитьФайл(ВыбранноеВложение.АдресВоВременномХранилище, ВыбранноеВложение.Представление, Истина);
	#Иначе
		ДополнительныеПараметры = Новый Структура("ВыбранноеВложение", ВыбранноеВложение);
		ОписаниеОповещения = 
			Новый ОписаниеОповещения("ОткрытьВложениеСозданиеКаталогаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		НачатьСозданиеКаталога(ОписаниеОповещения, ПолучитьИмяВременногоФайла());
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложениеСозданиеКаталогаЗавершение(ИмяВременнойПапки, ДополнительныеПараметры) Экспорт
	
	Если ИмяВременнойПапки = "" Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранноеВложение = ДополнительныеПараметры.ВыбранноеВложение;
	ИмяВременногоФайла = 
		ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяВременнойПапки) + ВыбранноеВложение.Представление;
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ВыбранноеВложение.АдресВоВременномХранилище);
	ДвоичныеДанные.Записать(ИмяВременногоФайла);
	
	ДополнительныеПараметры.Вставить("ИмяВременнойПапки", ИмяВременнойПапки);
	ДополнительныеПараметры.Вставить("ИмяВременногоФайла", ИмяВременногоФайла);
	ОписаниеОповещения = 
		Новый ОписаниеОповещения("ОткрытьВложениеУстановкаТолькоЧтениеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Файл = Новый Файл(ИмяВременногоФайла);
	Файл.НачатьУстановкуТолькоЧтения(ОписаниеОповещения, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложениеУстановкаТолькоЧтениеЗавершение(ДополнительныеПараметры) Экспорт
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьВложениеЗапускПриложенияЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	НачатьЗапускПриложения(ОписаниеОповещения, ДополнительныеПараметры.ИмяВременногоФайла,,Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложениеЗапускПриложенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Файл = Новый Файл(ДополнительныеПараметры.ИмяВременногоФайла);
	Файл.НачатьУстановкуТолькоЧтения(, Ложь);
	
КонецПроцедуры

&НаКлиенте
Функция ВыбранноеВложение()
	
	Результат = Неопределено;
	ТекущиеДанные = Элементы.Вложения.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		НаименованиеВложения = ТекущиеДанные[Элементы.Вложения.ТекущийЭлемент.Имя];
		Для Каждого Вложение Из Объект.Вложения Цикл
			Если Вложение.Представление = НаименованиеВложения Тогда
				Результат = Вложение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция АдресХранилищаВложений(Знач Вложения, АдресХранилища)

	Возврат ПоместитьВоВременноеХранилище(Вложения.Выгрузить(), АдресХранилища);

КонецФункции

&НаКлиенте
Процедура ОткрытьПриложенныеФайлы(СтандартнаяОбработка);

	СтандартнаяОбработка = Ложь;
	
	ПараметрыПриложенныхФайлов = Новый Структура;
	ПараметрыПриложенныхФайлов.Вставить("АдресХранилища", АдресХранилищаВложений(Объект.Вложения, АдресХранилища));
	ПараметрыПриложенныхФайлов.Вставить("УникальныйИдентификаторВладельца", УникальныйИдентификатор);
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьПриложенныеФайлыЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ОбращениеВТехническуюПоддержку.Форма.ПриложенныеФайлы", 
		ПараметрыПриложенныхФайлов, ЭтотОбъект,,,,ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПриложенныеФайлыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		АдресХранилища = Результат.АдресХранилища;
		ЗагрузитьВложения();
		ОбновитьПредставлениеВложений();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьВложения()
	
	ТаблицаВложений = ПолучитьИзВременногоХранилища(АдресХранилища);
	Объект.Вложения.Загрузить(ТаблицаВложений);
	УстановитьТекстПриложенныеФайлы();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьАвтоВложения()
	
	СтрокиТехническойИнформации   = Объект.Вложения.НайтиСтроки(Новый Структура("Идентификатор", "ТехническаяИнформация"));
	ДобавитьТехническуюИнформацию = (СтрокиТехническойИнформации.Количество() = 0);
	СтрокиНастройкиПрограммы      = Объект.Вложения.НайтиСтроки(Новый Структура("Идентификатор", "НастройкиПрограммы"));
	ДобавитьНастройкиПрограммы    = (СтрокиНастройкиПрограммы.Количество() = 0);
	
	Если НЕ (ДобавитьНастройкиПрограммы ИЛИ ДобавитьТехническуюИнформацию) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыАвтоВложений = Новый Структура;
	ПараметрыАвтоВложений.Вставить("ВидПриложения",           ВидПриложения);
	ПараметрыАвтоВложений.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыАвтоВложений.Вставить("РегистрационныйНомер",    РегистрационныйНомер);
	ПараметрыАвтоВложений.Вставить("Организация",             Организация);
	ПараметрыАвтоВложений.Вставить("ЛогинПользователя",       ЛогинПользователя);
	
	Если ДобавитьТехническуюИнформацию Тогда
		НовоеВложение = Объект.Вложения.Добавить();
		НовоеВложение.Представление = НСтр("ru='Техническая информация.txt'");
		НовоеВложение.Идентификатор = "ТехническаяИнформация";
		НовоеВложение.АдресВоВременномХранилище = Обработки.ОбращениеВТехническуюПоддержку.ТехническаяИнформация(ПараметрыАвтоВложений);
	КонецЕсли;
	Если ДобавитьНастройкиПрограммы Тогда
		НовоеВложение = Объект.Вложения.Добавить();
		НовоеВложение.Представление = НСтр("ru='Настройки программы.txt'");
		НовоеВложение.Идентификатор = "НастройкиПрограммы";
		НовоеВложение.АдресВоВременномХранилище = Обработки.ОбращениеВТехническуюПоддержку.НастройкиПрограммы(ПараметрыАвтоВложений);
	КонецЕсли;
	
	УстановитьТекстПриложенныеФайлы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьТекстПриложенныеФайлы()
	
	Если Объект.Вложения.Количество() > 0 Тогда
		ТекстПриложенныеФайлы = СтрШаблон("Приложенные файлы (%1)", Объект.Вложения.Количество());
		ЭтоГиперссылка        = Истина;
		ЦветТекста            = ЦветаСтиля.ЦветГиперссылки;
	Иначе
		ТекстПриложенныеФайлы = НСтр("ru='Нет приложенных файлов'");
		ЭтоГиперссылка        = Ложь;
		ЦветТекста            = ЦветаСтиля.ПоясняющийТекст;
	КонецЕсли;
	
	Элементы.ТекстПриложенныеФайлыКОшибке.Гиперссылка   = ЭтоГиперссылка;
	Элементы.ТекстПриложенныеФайлыКОшибке.ЦветТекста    = ЦветТекста;
	Элементы.ТекстПриложенныеФайлыВопрос.Гиперссылка    = ЭтоГиперссылка;
	Элементы.ТекстПриложенныеФайлыВопрос.ЦветТекста     = ЦветТекста;
	Элементы.ТекстПриложенныеФайлыПожелание.Гиперссылка = ЭтоГиперссылка;
	Элементы.ТекстПриложенныеФайлыПожелание.ЦветТекста  = ЦветТекста;
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСПочтой

&НаКлиенте
Процедура СформироватьТекстСообщения()

	// Тема сообщения
	Если ЭтоОшибка(Параметры.ТипСообщения) Тогда
		ТемаСообщения = СтрШаблон(НСтр("ru='Ошибка конфигурации %1, версия %2'"), 
			НаименованиеКонфигурации, ТекущаяВерсияКонфигурации);
	ИначеЕсли ЭтоВопрос(Параметры.ТипСообщения) Тогда
		ТемаСообщения = СтрШаблон(НСтр("ru='Вопрос по конфигурации %1, версия %2'"), 
			НаименованиеКонфигурации, ТекущаяВерсияКонфигурации);
	ИначеЕсли ЭтоПожелание(Параметры.ТипСообщения) Тогда
		ТемаСообщения = СтрШаблон(НСтр("ru='Пожелание по конфигурации %1, версия %2'"), 
			НаименованиеКонфигурации, ТекущаяВерсияКонфигурации);
	КонецЕсли;
	
	// Текст сообщения
	ТекстСообщения.Очистить();
	
	ТекстСообщения.ДобавитьСтроку(СтрШаблон(НСтр("ru='Конфигурация: %1, версия %2'"), 
		НаименованиеКонфигурации, ТекущаяВерсияКонфигурации));
	ТекстСообщения.ДобавитьСтроку(СтрШаблон(НСтр("ru='Рег. номер: %1, программа зарегистрирована на %2'"), 
		РегистрационныйНомер, ОрганизацияНаКоторуюПрограммаЗарегистрирована));
	ТекстСообщения.ДобавитьСтроку("");
	
	ТекстСообщения.ДобавитьСтроку(СтрШаблон(НСтр("ru='Раздел учета: %1'"), РазделУчета));
	ТекстСообщения.ДобавитьСтроку("");
	
	Если ЭтоОшибка(Параметры.ТипСообщения) Тогда
		
		ТекстСообщения.ДобавитьСтроку(НСтр("ru='Порядок воспроизведения ошибки, описание неправильного поведения:'"));
		ТекстСообщения.ДобавитьСтроку(ПорядокВоспроизведения);
		ТекстСообщения.ДобавитьСтроку("");
		ТекстСообщения.ДобавитьСтроку(НСтр("ru='Ожидаемое (правильное) поведение программы:'"));
		ТекстСообщения.ДобавитьСтроку(ОжидаемоеПоведение);
		ТекстСообщения.ДобавитьСтроку("");
		Если МогуПредоставитьБазу Тогда
			ТекстСообщения.ДобавитьСтроку(НСтр("ru='Могу предоставить базу, на которой воспроизводится ошибка.'"));
		Иначе
			ТекстСообщения.ДобавитьСтроку(НСтр("ru='Базу для воспроизведения ошибки предоставить не могу.'"));
		КонецЕсли;
		ТекстСообщения.ДобавитьСтроку("");
		
	ИначеЕсли ЭтоВопрос(Параметры.ТипСообщения) Тогда
		
		ТекстСообщения.ДобавитьСтроку(НСтр("ru='Какая задача решается:'"));
		ТекстСообщения.ДобавитьСтроку(РешаемаяЗадача);
		ТекстСообщения.ДобавитьСтроку("");
		ТекстСообщения.ДобавитьСтроку(НСтр("ru='Что непонятно, вызывает вопрос:'"));
		ТекстСообщения.ДобавитьСтроку(ЧтоВызываетВопрос);
		ТекстСообщения.ДобавитьСтроку("");
		Если ОценкаИнформационныхРесурсов = "ОтветаНеНашлось" Тогда
			ТекстСообщения.ДобавитьСтроку(НСтр("ru='По ссылкам на информационные ресурсы фирмы ""1С"" ответа на вопрос не нашлось.'"));
		Иначе
			ТекстСообщения.ДобавитьСтроку(НСтр("ru='Ссылки на информационные ресурсы фирмы ""1С"" не были полезны:'"));
			ТекстСообщения.ДобавитьСтроку(ПочемуИнформационныеРесурсыНеБылиПолезны);
		КонецЕсли;
		ТекстСообщения.ДобавитьСтроку("");
	
	ИначеЕсли ЭтоПожелание(Параметры.ТипСообщения) Тогда
		
		ТекстСообщения.ДобавитьСтроку(НСтр("ru='Какая задача решается:'"));
		ТекстСообщения.ДобавитьСтроку(РешаемаяЗадача);
		ТекстСообщения.ДобавитьСтроку("");
		ТекстСообщения.ДобавитьСтроку(НСтр("ru='Что сейчас вызывает сложности, делается неудобно:'"));
		ТекстСообщения.ДобавитьСтроку(ЧтоВызываетСложности);
		ТекстСообщения.ДобавитьСтроку("");
		ТекстСообщения.ДобавитьСтроку(НСтр("ru='Какое поведение программы было бы удобным:'"));
		ТекстСообщения.ДобавитьСтроку(ОжидаемоеПоведение);
		ТекстСообщения.ДобавитьСтроку("");
		
	КонецЕсли;
	
	ТекстВложения = НСтр("ru='Приложены файлы с технической информацией о программе и используемых настройках'");
	Если ЕстьПользовательскиеВложения() Тогда
		ТекстВложения = ТекстВложения + ", " + Символы.ПС;
		Если ЭтоОшибка(Параметры.ТипСообщения) Тогда
			ТекстВложения = ТекстВложения + НСтр("ru='а также файлы, которые могут помочь при расследования ошибки'");
		ИначеЕсли ЭтоВопрос(Параметры.ТипСообщения) Тогда
			ТекстВложения = ТекстВложения + НСтр("ru='а также файлы, которые могут помочь лучше понять вопрос'");
		ИначеЕсли ЭтоПожелание(Параметры.ТипСообщения) Тогда
			ТекстВложения = ТекстВложения + НСтр("ru='а также файлы, которые могут помочь лучше понять пожелание'");
		КонецЕсли;
	КонецЕсли;
	ТекстВложения = ТекстВложения + ".";
	ТекстСообщения.ДобавитьСтроку(ТекстВложения);
	ТекстСообщения.ДобавитьСтроку("");
	ТекстСообщения.ДобавитьСтроку(СтрШаблон("%1, %2", ИмяПользователя, Должность));
	ТекстСообщения.ДобавитьСтроку(СтрШаблон(НСтр("ru='Ответ прошу прислать на адрес: %1'"), АдресОтвета));
	
КонецПроцедуры

&НаКлиенте
Функция ЕстьПользовательскиеВложения()
	
	ПользовательскиеВложения = Объект.Вложения.НайтиСтроки(Новый Структура("Идентификатор", ""));
	Возврат ПользовательскиеВложения.Количество() > 0;
	
КонецФункции

&НаСервере
Процедура ОтправитьПочтовоеСообщениеНаСервере()
	
	ПараметрыПисьма = СформироватьПараметрыПисьма();
	Если ПараметрыПисьма = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗапись, ПараметрыПисьма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПочтовоеСообщение()
	
	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите учетную запись электронной почты.'"),,"УчетнаяЗапись");
		Возврат;
	КонецЕсли;
	Если ПустаяСтрока(ТемаСообщения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите тему сообщения.'"),,"ТемаСообщения");
		Возврат;
	КонецЕсли;
	Если ПустаяСтрока(ТекстСообщения.ПолучитьТекст()) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите текст сообщения.'"),,"ТекстСообщения");
		Возврат;
	КонецЕсли;
	
	ОтправитьПочтовоеСообщениеНаСервере();
	
	ТекстПояснения = НСтр("ru='Ваше обращение отправлено в техническую поддержку 1C.'");
	Если ЭтоВопрос(ТипСообщения) Тогда
		ТекстПояснения = НСтр("ru='Ваш вопрос отправлен в техническую поддержку 1C.'");
	ИначеЕсли ЭтоОшибка(ТипСообщения) Тогда
		ТекстПояснения = НСтр("ru='Описание ошибки отправлено в техническую поддержку 1C.'");
	ИначеЕсли ЭтоПожелание(ТипСообщения) Тогда
		ТекстПояснения = НСтр("ru='Ваше пожелание отправлено в техническую поддержку 1C.'");
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(НСтр("ru = 'Сообщение успешно отправлено'")
		,
		,
		СтрШаблон(НСтр("ru = 'Спасибо за обращение!
		|%1'"), ТекстПояснения)
		);
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Функция СкрытыеКопии()

	ПараметрыОтправкиСкрытыхКопий = ОбщегоНазначенияБПВызовСервера.ПолучитьЗначениеПоУмолчанию("ПараметрыОтправкиСкрытыхКопий");
	Если ПараметрыОтправкиСкрытыхКопий = Неопределено Тогда
		Возврат "";
	КонецЕсли;
	
	Если ПараметрыОтправкиСкрытыхКопий.ОтправлятьСкрытыеКопии Тогда
		Возврат ПараметрыОтправкиСкрытыхКопий.АдресПолучателяСкрытойКопии;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СформироватьПараметрыПисьма()
	
	ПараметрыПисьма = Новый Структура;
	
	ПараметрыПисьма.Вставить("Кому",        Обработки.ОбращениеВТехническуюПоддержку.АдресТехподдержки());
	ПараметрыПисьма.Вставить("СкрытыеКопии", СкрытыеКопии());
	ПараметрыПисьма.Вставить("АдресОтвета", АдресОтвета);
	ПараметрыПисьма.Вставить("Тема",        ТемаСообщения);
	ПараметрыПисьма.Вставить("Тело",        ТекстСообщения.ПолучитьТекст());
	ПараметрыПисьма.Вставить("Вложения",    Вложения());
	
	Возврат ПараметрыПисьма;
	
КонецФункции

&НаСервере
Функция Вложения()
	
	Результат = Новый Массив;
	Для Каждого Вложение Из Объект.Вложения Цикл
		ОписаниеВложения = Новый Структура;
		ОписаниеВложения.Вставить("Представление",             Вложение.Представление);
		ОписаниеВложения.Вставить("АдресВоВременномХранилище", Вложение.АдресВоВременномХранилище);
		ОписаниеВложения.Вставить("Идентификатор",             Вложение.Идентификатор);
		Результат.Добавить(ОписаниеВложения);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура НастройкиЭлектроннойПочтыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		УстановитьУчетнуюЗапись();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУчетнуюЗапись()
	
	УчетнаяЗапись = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("УчетнаяЗаписьЭлектроннойПочты");
	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ДоступныеУчетныеЗаписи = РаботаСПочтовымиСообщениями.ДоступныеУчетныеЗаписи(Истина);
		Если ДоступныеУчетныеЗаписи.Количество() > 0 Тогда
			УчетнаяЗапись = ДоступныеУчетныеЗаписи[0].Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Если НЕ ЗначениеЗаполнено(АдресОтвета) И УчетнаяЗапись.ИспользоватьДляПолучения Тогда
			АдресОтвета = УчетнаяЗапись.АдресЭлектроннойПочты;
		КонецЕсли;
		
		ИмяПользователя = УчетнаяЗапись.ИмяПользователя;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область РегистрационныеДанные

&НаКлиенте
Процедура ИзменитьРегистрационныеДанныеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
		
		Если ЭтоСтраницаОтправки() Тогда
			СформироватьТекстСообщения();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НаименованиеОрганизации(Организация)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "НаименованиеСокращенное");
	
КонецФункции

#КонецОбласти

#Область ИнтернетПоддержкаПользователей

&НаКлиенте
Процедура ДекорацияПодключитьИнтернетПоддержкуОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если ВРег(НавигационнаяСсылкаФорматированнойСтроки) = ВРег("ПодключитьсяКИнтернетПоддержке") Тогда
		СтандартнаяОбработка = Ложь;
		ПодключитьИнтернетПоддержку(КодВозвратаДиалога.Да, Новый Структура);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержку(Ответ, ДополнительныеПараметры) Экспорт

	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьИнтернетПоддержкуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ИнтернетПоддержкаПользователейКлиент.ПодключитьИнтернетПоддержкуПользователей(ОписаниеОповещения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодключитьИнтернетПоддержкуЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если Результат <> Неопределено Тогда
		ПодключенаИнтернетПоддержка = Истина;
		ЛогинПользователя = Результат.Логин;
		Элементы.ДекорацияПодключитьИнтернетПоддержку.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ВидПриложения()
	
	#Если ВебКлиент Тогда
	Возврат НСтр("ru = 'Веб-клиент'");
	#ИначеЕсли ТолстыйКлиентОбычноеПриложение Тогда
	Возврат НСтр("ru = 'Толстый клиент, обычное приложение'");
	#ИначеЕсли ТолстыйКлиентУправляемоеПриложение Тогда
	Возврат НСтр("ru = 'Толстый клиент, управляемое приложение'");
	#ИначеЕсли ТонкийКлиент Тогда
	Возврат НСтр("ru = 'Тонкий клиент'");
	#Иначе
	Возврат "";
	#КонецЕсли
	
КонецФункции

&НаКлиенте
Процедура ПоискОтветаНаВопрос()
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбработкаОжиданияПоискаОтветаНаВопрос", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработкаОжиданияПоискаОтветаНаВопрос()
	
	Если ПустаяСтрока(СтрокаПоискаНаИТС) Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаПоискаИнформации = "http://its.1c.ru/db/alldb#search:";
	
	ПерейтиПоНавигационнойСсылке(СсылкаПоискаИнформации + СтрокаПоискаНаИТС);
	
КонецПроцедуры

#КонецОбласти

#Область РазделыУчета

&НаСервере
Процедура ЗаполнитьРазделУчета()

	МакетРазделыУчета      = Обработки.ОбращениеВТехническуюПоддержку.ПолучитьМакет("РазделыУчета");
	ОбластьЧастыеОбращения = МакетРазделыУчета.ПолучитьОбласть("ЧастыеОбращения");
	Верх                   = ОбластьЧастыеОбращения.Область().Верх;
	Низ                    = ОбластьЧастыеОбращения.Область().Низ;
	
	МассивРазделовУчета = Новый Массив;
	Для НомерСтроки = Верх По Низ Цикл
		МассивРазделовУчета.Добавить(ОбластьЧастыеОбращения.Область(НомерСтроки, 1, НомерСтроки, 1).Текст);
	КонецЦикла;
	
	// Добавим служебный пункт, при выборе которого открывается форма "Разделы учета"
	МассивРазделовУчета.Добавить(НСтр("ru='Другое (выбрать из списка)'"));
	
	Для Каждого ИмяРаздела Из МассивРазделовУчета Цикл
		Элементы.РазделУчетаВопрос.СписокВыбора.Добавить(ИмяРаздела);
		Элементы.РазделУчетаОшибка.СписокВыбора.Добавить(ИмяРаздела);
		Элементы.РазделУчетаПожелание.СписокВыбора.Добавить(ИмяРаздела);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ВыбратьРазделУчетаИзСписка(РазделУчета)
	
	Возврат ВРег(РазделУчета) = ВРег(НСтр("ru='Другое (выбрать из списка)'"));
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуВыбораРазделаУчета(Элемент)
	
	РазделУчета = "";
	ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьФормуВыбораРазделаУчетаЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.ОбращениеВТехническуюПоддержку.Форма.РазделыУчета",,Элемент,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораРазделаУчетаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Строка") Тогда
		РазделУчета = Результат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Термины

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоВопрос(ТипСообщения)

	Возврат ВРег(ТипСообщения) = ВРег("Вопрос");

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоПожелание(ТипСообщения)

	Возврат ВРег(ТипСообщения) = ВРег("Пожелание");

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоОшибка(ТипСообщения)

	Возврат ВРег(ТипСообщения) = ВРег("Ошибка");

КонецФункции

#КонецОбласти

#КонецОбласти