
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ДокументОрганизация        = Неопределено;
	ДокументКонтрагент         = Неопределено;
	ДокументДоговорКонтрагента = Неопределено;
	НастройкиТолькоПросмотр    = Неопределено;
	ДокументыОснования         = Неопределено;
	
	Параметры.Свойство("Отправитель"              , Организация);
	Параметры.Свойство("Получатель"               , Контрагент);
	Параметры.Свойство("ДоговорКонтрагента"       , ДоговорКонтрагента);
	Параметры.Свойство("ПредварительнаяНастройка" , ПредварительнаяНастройка);
	Параметры.Свойство("ТолькоПросмотр"           , НастройкиТолькоПросмотр);
	Параметры.Свойство("НастройкаДокумента"       , НастройкаДокумента);
	Параметры.Свойство("ИдентификаторОтправителя" , ИдентификаторОтправителя);
	Параметры.Свойство("ИдентификаторПолучателя"  , ИдентификаторПолучателя);
	Параметры.Свойство("ВидЭД"                    , ВидЭД);
	Параметры.Свойство("Формат"                   , НастройкаФорматЭД);
	Параметры.Свойство("МаршрутПодписания"        , НастройкаПодписьПоМаршруту);
	Параметры.Свойство("ТребуетсяПодтверждение"   , НастройкаОжидатьОтветнуюПодпись);
	Параметры.Свойство("ТребуетсяИзвещение"       , НастройкаОжидатьИзвещение);
	Параметры.Свойство("ВыгружатьДопСведения"     , НастройкиВыгружатьДопСведения);
	Параметры.Свойство("ЗаполнениеКодаТовара"     , ЗаполнениеКодаТовара);
	Параметры.Свойство("ДокументыОснования"       , ДокументыОснования);
	Параметры.Свойство("ПрикладнойВидЭД"          , ПрикладнойВидЭД);
	Параметры.Свойство("ДополнительныеДанные"     , ДополнительныеДанные);
	Параметры.Свойство("ВыборУчетныхЗаписей"      , ВыборУчетныхЗаписей);
	Параметры.Свойство("Действие"                 , Действие);
	Параметры.Свойство("ИспользоватьУПД"          , НастройкиИспользоватьУПД);
	Параметры.Свойство("ИспользоватьУКД"          , НастройкиИспользоватьУКД);
	Параметры.Свойство("НастройкаРегламентаЭДО"   , НастройкаРегламентаЭДО);
	Параметры.Свойство("ПодтверждениеОбязательно" , ПодтверждениеОбязательно);
	Параметры.Свойство("СкрыватьНастройкиТранспорта"       , СкрыватьНастройкиТранспорта);
	Параметры.Свойство("ВерсияФорматаУстановленаВручную"   , НастройкиВерсияФорматаУстановленаВручную);
	Параметры.Свойство("НеСоздаватьНастройкиАвтоматически" , НеСоздаватьНастройкиАвтоматически);
	
	ЕстьПравоНастройкиОбмена = ОбменСКонтрагентамиСлужебныйВызовСервера.ЕстьПравоНастройкиОбмена();
	
	Если ПредварительнаяНастройка
			И Не ЕстьПравоНастройкиОбмена Тогда
				ШаблонСообщения = НСтр("ru = 'Не создано настроек отправки электронных документов между:
	                                   |Организация - %1.
	                                   |Контрагент - %2.
	                                   |Обратитесь к администратору, так как у Вас недостаточно прав для выполнения операции.'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, Организация, Контрагент);
				ОбщегоНазначения.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументыОснования) Тогда
		НастройкиДокументыОснование.ЗагрузитьЗначения(ДокументыОснования);
	КонецЕсли;
	
	УстановитьДоступность();
	ИнициализироватьПараметрыВыбора();
	ЗаполнитьПрограммыЭлектроннойПодписиИШифрования();
	
	КлючСохраненияПоложенияОкна = Новый УникальныйИдентификатор;
	
	ИнициализацияФормы(ЭтотОбъект);
	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
	ИнициализироватьНастройкиФормированияДокумента();
	
	Элементы.ПроверкаВыполнена.Видимость      = Ложь;
	Элементы.РедактированиеНастроек.Видимость = Ложь; 
	Элементы.ВыберитеУчетныеЗаписиДляОбмена.Видимость = Ложь;
	Элементы.СкрытаяГруппа.Видимость          = Ложь;
	Элементы.ОжиданиеПроверки.Видимость       = Истина;
	
	// Начальная проверка
	Если Не ПредварительнаяНастройка Тогда
		ЗаполнитьФорматыЭД();
		Элементы.ПроверкаВыполнена.ОтображатьЗаголовок = Истина;
		Элементы.ПроверкаВыполнена.Поведение = ПоведениеОбычнойГруппы.Всплывающая;
		ИнициализироватьНастройкиЗаполненияДополнительныхПолей();
		УстановитьВидимостьЕстьНастройкиЗаполненияДополнительныхПолей();
		
		Элементы.НастройкиВерсияФорматаУстановленаВручную.Видимость = Не НастройкаДокумента;
		
	КонецЕсли;
	
	Элементы.ГруппаДругиеНастройки.Видимость = НастройкаРегламентаЭДО;
	
	УстановитьТекстОписанияНастройки(ЭтотОбъект);
	СформироватьПредставлениеРегламентаЭДО(ЭтотОбъект);
	СформироватьПредставлениеСтрокиСохраненияНастроек(ЭтотОбъект);
	
	Элементы.ГруппаТолькоПросмотр.ТолькоПросмотр = НастройкиТолькоПросмотр = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОпределитьУстановленныеПрограммы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	КлючСохраненияПоложенияОкна = "";
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_СертификатыКлючейЭлектроннойПодписиИШифрования" Тогда
		ВыполнитьПолнуюПроверкуНастройкиОбмена();
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновленСписокУчетныхЗаписей1СЭДО" Тогда
		ВыполнитьПолнуюПроверкуНастройкиОбмена();
	КонецЕсли; 
	
	Если ИмяСобытия = "ОбновитьСостояниеПриглашений" Тогда
		ВыполнитьПолнуюПроверкуНастройкиОбмена();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МассивУдаляемыхРеквизитов = Новый Массив;
	
	Если ПредварительнаяНастройка Тогда
		
		МассивУдаляемыхРеквизитов.Добавить("ИдентификаторПолучателя");
		МассивУдаляемыхРеквизитов.Добавить("НастройкаПодписьПоМаршруту");
		
	КонецЕсли;
	
	Если ВыборУчетныхЗаписей Тогда
		МассивУдаляемыхРеквизитов.Добавить("НастройкаПодписьПоМаршруту");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивУдаляемыхРеквизитов);
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура УчетнаяЗаписьПолучателяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.УчетнаяЗаписьПолучателя.СписокВыбора.Добавить(Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяЗаписьПолучателяПриИзменении(Элемент)
	
	ОбновлениеДанныхПриИзмененииУчетныхЗаписей(ЭтотОбъект);
	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Декорация4ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ЗначениеЗаполнено(ПолучательСсылкаТехПоддержки) Тогда
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(ПолучательСсылкаТехПоддержки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяЗаписьОтправителяПриИзменении(Элемент)
	ОбновлениеДанныхПриИзмененииУчетныхЗаписей(ЭтотОбъект);
	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНадписьРоумингДоступен2ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	СсылкаНаИнструкцию = ОбменСКонтрагентамиСлужебныйКлиент.СсылкаНаИнструкциюПоНастройкеЭДО();
	ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(СсылкаНаИнструкцию);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПодробнееНажатие(Элемент)
	Строки = ФорматыЭД.НайтиСтроки(Новый Структура("ИдентификаторФормата", НастройкаФорматЭД));
	
	Если Строки.Количество() > 0 Тогда
		
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(Строки[0].СсылкаНаПриказОВведенииФормата);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторПолучателяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Элементы.ИдентификаторПолучателя.СписокВыбора.Добавить(Текст);
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторПолучателяПриИзменении(Элемент)
	
	НастройкиИзменены = Истина;
	ОбновлениеДанныхПриИзмененииУчетныхЗаписей(ЭтотОбъект);
	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаФорматЭДПриИзменении(Элемент)
	
	НастройкиИзменены = Истина;
	НастройкиВерсияФорматаУстановленаВручную = Истина;
	
	УстановитьЗначенияПолейРегламентаЭДО();
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторОтправителяПриИзменении(Элемент)
	НастройкиИзменены = Истина;
	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПодписьПоМаршрутуПриИзменении(Элемент)
	НастройкиИзменены = Истина;
	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОжидатьИзвещениеПриИзменении(Элемент)
	НастройкиИзменены = Истина;
	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОжидатьОтветнуюПодписьПриИзменении(Элемент)
	
	НастройкиИзменены = Истина;
	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
	
	Если Не НастройкаОжидатьОтветнуюПодпись Тогда
		
		ТекстВопроса = НСтр("ru = 'Отказ от ответной подписи разрешается, если:
                             |- документ выписан на оказание услуг, по которым ГК РФ не требует актирования;
                             |- в соглашении об обмене электронными документами предусмотрено отсутствие ответной подписи для данного вида документа.
                             |
                             |Если документ Не соответствует перечисленным критериям, отказ от ожидания ответной подписи может привести к тому, что документ будет признан недействительным.
                             |
                             |Вы действительно хотите отказаться от ожидания ответной подписи?'");
		
		Описание = Новый ОписаниеОповещения("ВопросОжидатьОтветнуюПодписьЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Описание, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиВыгружатьДопСведенияПриИзменении(Элемент)
	
	НастройкиИзменены = Истина;
	
	Если Не НастройкиВыгружатьДопСведения Тогда
		
		ТекстВопроса = НСтр("ru = 'Отключение выгрузки дополнительных сведений может привести к проблемам при загрузке документа у получателя. Рекомендуется проконсультироваться у специалистов технической поддержки.
                             |Вы действительно хотите отключить выгрузку дополнительных сведений?'");
		
		Описание = Новый ОписаниеОповещения("ВопросВыгружатьДопСведенияЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Описание, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНадписьРоумингДоступен1ОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидЭД", Неопределено);
	ПараметрыОткрытия.Вставить("ВерсияФормата" , Неопределено);
	ПараметрыОткрытия.Вставить("ИдентификаторКонтрагента" , ИдентификаторПолучателя);
	
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.ПроблемыПриФормированииДокументов", ПараметрыОткрытия, ЭтотОбъект
		,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеКодаТовараОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ЕстьНастройкиЗаполненияДополнительныхПолейНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	ПараметрыФормы.Вставить("Контрагент"        , Контрагент);
	ПараметрыФормы.Вставить("Организация"       , Организация);
	ПараметрыФормы.Вставить("ВидЭлектронногоДокумента", ВидЭД);
	ПараметрыФормы.Вставить("Формат", НастройкаФорматЭД);
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьЗавершениеНастройкиЗаполненияДополнительныхПолей", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ОбменСКонтрагентами.Форма.НастройкаЗаполненияДополнительныхПолей",
		ПараметрыФормы, ЭтотОбъект,,,,Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеКодаТовараПриИзменении(Элемент)
	НастройкиИзменены = Истина;
	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяЗаписьОтправителяОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия    = Новый Структура;
	ЗначенияКлюча        = Новый Структура("ИдентификаторЭДО", ИдентификаторОтправителя);
	
	ПараметрыОткрытия.Вставить("Ключ", ПолучитьКлючРегистра("УчетныеЗаписиЭДО", ЗначенияКлюча));
	
	Описание = Новый ОписаниеОповещения("ОбновлениеФормы", ЭтотОбъект);
	
	ОткрытьФорму("РегистрСведений.УчетныеЗаписиЭДО.ФормаЗаписи", ПараметрыОткрытия, ЭтотОбъект,,,,Описание);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаФорматЭДОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = НастройкаФорматЭД Тогда
		Возврат;
	КонецЕсли;
	
	Если Не НастройкаДокумента
			И Не НастройкиВерсияФорматаУстановленаВручную Тогда
			
		СтандартнаяОбработка = Ложь;
		
		Описание = Новый ОписаниеОповещения("ПослеВопросаКорректировкиФормата", ЭтотОбъект, ВыбранноеЗначение);
	
		ПоказатьВопрос(Описание, НСтр("ru = 'В случае ручной корректировки будет отключен автоматический подбор формата, наиболее оптимального для обмена с выбранным контрагентом.
                           |Продолжить?'"), РежимДиалогаВопрос.ДаНет);
		Возврат;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиВерсияФорматаУстановленаВручнуюПриИзменении(Элемент)
	НастройкиИзменены = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьРасширение(Команда)
	
	Описание = Новый ОписаниеОповещения("ПослеУстановкиРасширения", ЭтотОбъект);
	ЭлектроннаяПодписьКлиент.УстановитьРасширение(Истина, Описание);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьCryptoPRO(Команда)
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПовторнаяПроверкаПрограммКриптографии", ЭтотОбъект);
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86
		ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		Контекст = Новый Структура;
		Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
		Контекст.Вставить("ВладелецФормы", ВладелецФормы);
		Оповещение = Новый ОписаниеОповещения("УстановитьCryptoProCSPПослеВводаРегистрационныхДанных", ЭтотОбъект, Контекст);
		
		ОткрытьФорму(
			"Обработка.ОбменСКонтрагентами.Форма.УстановкаCryptoProCSPРегистрационныеДанные",,
			ВладелецФормы,,,, Оповещение);
	Иначе
		ОписаниеОшибки = НСтр("ru = 'Автоматическая установка CryptoPro CSP возможно только на операционных системах семейства Windows.'");
		ПоказатьПредупреждение(, ОписаниеОшибки,, НСтр("ru = 'Установка CryptoPro CSP'"));
		РезультатВыполнения = Новый Структура;
		РезультатВыполнения.Вставить("Выполнено", Ложь);
		РезультатВыполнения.Вставить("ОписаниеОшибки", ОписаниеОшибки);
		
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатВыполнения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьVipNet(Команда)
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПовторнаяПроверкаПрограммКриптографии", ЭтотОбъект);
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86
		ИЛИ СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		Контекст = Новый Структура;
		Контекст.Вставить("ОповещениеОЗавершении", ОповещениеОЗавершении);
		Контекст.Вставить("ВладелецФормы", ВладелецФормы);
		Оповещение = Новый ОписаниеОповещения("УстановитьViPNetCSPПослеВводаРегистрационныхДанных", ЭтотОбъект, Контекст);
		
		ОткрытьФорму(
			"Обработка.ОбменСКонтрагентами.Форма.УстановкаViPNetCSPРегистрационныеДанные",,
			ВладелецФормы,,,, Оповещение);
	Иначе
		ОписаниеОшибки = НСтр("ru = 'Установка ViPNet CSP возможно только на операционных системах семейства Windows.'");
		ПоказатьПредупреждение(, ОписаниеОшибки,, НСтр("ru = 'УУстановка ViPNet CSP'"));
		РезультатВыполнения = Новый Структура;
		РезультатВыполнения.Вставить("Выполнено", Ложь);
		РезультатВыполнения.Вставить("ОписаниеОшибки", ОписаниеОшибки);
		
		ВыполнитьОбработкуОповещения(ОповещениеОЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказатьСертификат(Команда)
	
	НастройкиОбмена = Новый Структура;
	НастройкиОбмена.Вставить("Организация", Организация);
	НастройкиОбмена.Вставить("СоздатьЗаявление", Истина);
	ЭлектроннаяПодписьСлужебныйКлиент.ДобавитьСертификат(НастройкиОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСертификат(Команда)
	
	НастройкиОбмена = Новый Структура;
	НастройкиОбмена.Вставить("Организация", Организация);
	НастройкиОбмена.Вставить("СкрытьЗаявление", Истина);
	ЭлектроннаяПодписьСлужебныйКлиент.ДобавитьСертификат(НастройкиОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура Зарегистрироваться(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Организация", Организация);
	
	ОткрытьФорму("РегистрСведений.УчетныеЗаписиЭДО.Форма.ПомощникПодключенияЭДО", ПараметрыОткрытия,
			УникальныйИдентификатор,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗарегистрироватьСертификат(Команда)
	
	УчетныеЗаписи = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторОтправителя);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗарегистрироватьСертификатЗавершение", ЭтотОбъект);
	
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("Операция",        "Прочее");
	ПараметрыРегистрации.Вставить("ПрофилиНастроек", УчетныеЗаписи);
	ПараметрыРегистрации.Вставить("АдресТаблицыДанных");
	
	ОбменСКонтрагентамиСлужебныйКлиент.ОткрытьФормуПомощникаРегистрацииСертификатов(ПараметрыРегистрации, ЭтотОбъект,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПриглашение(Команда)
	
	Если ПустаяСтрока(ИдентификаторОтправителя) Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ИдентификаторОрганизации" , ИдентификаторОтправителя);
	ПараметрыОткрытия.Вставить("ИдентификаторКонтрагента" , ИдентификаторПолучателя);
	ПараметрыОткрытия.Вставить("Получатель"               , ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Контрагент));
	ПараметрыОткрытия.Вставить("Организация"              , Организация);
	
	Наименование = Элементы.УчетнаяЗаписьОтправителя.СписокВыбора.НайтиПоЗначению(ИдентификаторОтправителя).Представление;
	ПараметрыОткрытия.Вставить("НаименованиеУчетнойЗаписиОрганизации" , Наименование);
	
	ЭлементСписка = Элементы.УчетнаяЗаписьПолучателя.СписокВыбора.НайтиПоЗначению(ИдентификаторПолучателя);
	Если ЭлементСписка <> Неопределено Тогда 
		ПараметрыОткрытия.Вставить("НаименованиеУчетнойЗаписиАбонента"    , ЭлементСписка.Представление);
	КонецЕсли;
	
	Описание = Новый ОписаниеОповещения("ОтправитьПриглашениеЗавершение", ЭтотОбъект);
	ОткрытьФорму("РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами.Форма.ФормаОтправкиПриглашений", ПараметрыОткрытия,
			УникальныйИдентификатор,,,,Описание,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
КонецПроцедуры

&НаКлиенте
Процедура Готово(Команда)
	
	ОчиститьСообщения();
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ФормаПодключить.Доступность = Ложь;
	Элементы.ФормаПодключить.Картинка = БиблиотекаКартинок.СинхронизацияДанныхДлительнаяОперация;
	
	Если ПроверкаОтправкаПриглашений <> "Отправлено"
		И ЗначениеЗаполнено(ИдентификаторПолучателя) Тогда
		
		ОбработчикОповещения = Новый ОписаниеОповещения("ВыполнитьДействияПоНастройкеЭДООповещение", ЭтотОбъект);
		Массив = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ИдентификаторОтправителя);
		ОбменСКонтрагентамиСлужебныйКлиент.ПолучитьНастройкиЭДОИПараметрыСертификатов(ОбработчикОповещения, Массив);
		Возврат;
		
	ИначеЕсли ПредварительнаяНастройка И ПроверкаОтправкаПриглашений = "Отправлено"
		И ЗначениеЗаполнено(ИдентификаторПолучателя) Тогда
		Отказ = Ложь;
		СоздатьНастройкиОтправкиЭДО(Организация, Контрагент, Неопределено, ИдентификаторОтправителя, ИдентификаторПолучателя, Отказ);
		
		Если Отказ Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось сохранить настройки обмена документами.
                                   |Подробнее см. в журнале регистрации'");
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗавершитьРаботуМастера(Истина, Неопределено);
КонецПроцедуры

&НаСервере
Функция ПолучитьДопПараметрыПоОбновленнымНастройкам(Настройки, ДополнительныеДанные)
	
	Если СохранитьНастройки И Не ВыборУчетныхЗаписей Тогда
		
		ЗаписатьОбновленныеНастройки(Настройки);
		
	КонецЕсли;
	
	МассивДокументов = Настройки.ДокументыОснования;
	
	НастройкиОбмена = Новый Соответствие;
	
	Для Каждого Документ Из МассивДокументов Цикл
		НастройкаОбмена = ОбменСКонтрагентамиСлужебный.ОпределитьНастройкиОбменаЭДПоИсточнику(Документ);
		
		Если НастройкаОбмена.ВидЭД = Настройки.ВидЭд Тогда
			ЗаполнитьЗначенияСвойств(НастройкаОбмена, Настройки,, "ВидЭД");
		КонецЕсли;
		
		НастройкиОбмена.Вставить(Документ, НастройкаОбмена);
	КонецЦикла;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("НастройкиОбмена"      , НастройкиОбмена);
	ДопПараметры.Вставить("ДополнительныеДанные" , ДополнительныеДанные);
	ДопПараметры.Вставить("ИспользоватьПомощникУстраненияОшибок", Истина);
	
	Возврат ДопПараметры;
	
КонецФункции

&НаКлиенте
Процедура ВвестиИдентификаторВручную(Команда)
	ПроверкаИдентификаторАбонента = Не ПроверкаИдентификаторАбонента;
	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Процедура СоздатьНастройкиОтправкиЭДО(Организация, Контрагент, Договор, ИдентификаторОтправителя, ИдентификаторПолучателя, Отказ);

	ОбменСКонтрагентамиСлужебный.СоздатьНастройкиОтправкиЭДО(Организация, Контрагент, Договор,
		ИдентификаторОтправителя, ИдентификаторПолучателя, Отказ);
		
	ОбменСКонтрагентамиСлужебный.СоздатьНастройкиОтраженияВУчетеЭДО(Организация, Контрагент,
		ИдентификаторОтправителя, ИдентификаторПолучателя);

КонецПроцедуры

#Область ВизуальноеОформление

&НаСервереБезКонтекста
Процедура ИнициализацияФормы(Форма)
	
	Форма.ПроверкаКриптопровайдерУстановлен = "Требуется";
	Форма.ПроверкаСертификатУстановлен      = "Требуется";
	Форма.ПроверкаРегистрацияУОператора     = "Требуется";
	Форма.ПроверкаПриглашенияКонтрагента    = "Требуется";
	Форма.ПроверкаОтправкаПриглашений        = "Требуется";
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекстОписанияНастройки(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ДекорацияОписаниеНастройки.Видимость = Ложь;
	МассивСтрок = Новый Массив;
	
	Если Форма.ПредварительнаяНастройка Тогда
		
		Шаблон = НСтр("ru = 'Обмен между %1 и %2 еще не настроен. Выполните этапы настройки, чтобы отправить документ.'");
		
		МассивСтрок.Добавить(СтрШаблон(Шаблон, Форма.Организация, Форма.Контрагент));
		
		Элементы.ДекорацияОписаниеНастройки.Видимость = Истина;
	КонецЕсли;
	
	Элементы.ДекорацияОписаниеНастройки.Заголовок = Новый ФорматированнаяСтрока(МассивСтрок);
	
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьЭтапыМастераНастройкиПодключения(Форма)
	
	Элементы = Форма.Элементы;
	
	ВсеГотовоКУстановкеСвязи = Форма.ПроверкаКриптопровайдерУстановлен = "Выполнено"
		И Форма.ПроверкаСертификатУстановлен = "Выполнено"
		И Форма.ПроверкаРегистрацияУОператора = "Выполнено";
	
	// Проверка доступности криптопровайдеров
	Элементы.УстановкаКриптопровайдераТребуется.Видимость = Форма.ПроверкаКриптопровайдерУстановлен = "Требуется";
	Элементы.УстановкаКриптопровайдераВыполнено.Видимость = Форма.ПроверкаКриптопровайдерУстановлен = "Выполнено";
	Элементы.УстановкаКриптопровайдераОшибка.Видимость    = Форма.ПроверкаКриптопровайдерУстановлен = "Ошибка";
	
	// Проверка доступности сертификатов
	Элементы.ГруппаПолучениеСертификатов.Доступность      = Форма.ПроверкаКриптопровайдерУстановлен = "Выполнено";
	Элементы.ПолучениеСертификатовЭлектроннойПодписи.Шрифт = ?(Форма.ПроверкаКриптопровайдерУстановлен = "Выполнено", 
		Новый Шрифт(Элементы.ПолучениеСертификатовЭлектроннойПодписи.Шрифт,,,Истина), Новый Шрифт);
	Элементы.ПолучениеСертификатовТребуется.Видимость     = Форма.ПроверкаСертификатУстановлен      = "Требуется";
	Элементы.ПолучениеСертификатовВыполнено.Видимость     = Форма.ПроверкаСертификатУстановлен      = "Выполнено";
	Элементы.ПолучениеСертификатовОжидание.Видимость      = Форма.ПроверкаСертификатУстановлен      = "Ожидание";
	
	// Проверка регистрации у оператора ЭДО
	Элементы.ГруппаРегистрацияУОператора.Доступность      = Форма.ПроверкаСертификатУстановлен      = "Выполнено"
		Или Не Форма.ПредварительнаяНастройка;
	Элементы.ПолучениеСертификатовЭлектроннойПодписиВыполнено.Шрифт = ?(Форма.ПроверкаСертификатУстановлен  = "Выполнено", 
		Новый Шрифт(Элементы.ПолучениеСертификатовЭлектроннойПодписиВыполнено.Шрифт,,,Истина), Новый Шрифт);
	Элементы.РегистрацияУОператораТребуется.Видимость     = Форма.ПроверкаРегистрацияУОператора     = "Требуется";
	Элементы.РегистрацияУОператораВыполнено.Видимость     = Форма.ПроверкаРегистрацияУОператора     = "Выполнено"
		ИЛИ Форма.ПроверкаРегистрацияУОператора = "ТребуетсяРегистрацияСертификатов";
		
	Элементы.ГруппаВУчетнойЗаписиНетАктуальныхСертификатов.Видимость =
		Форма.ПроверкаРегистрацияУОператора = "ТребуетсяРегистрацияСертификатов";
	Если Форма.ПроверкаРегистрацияУОператора = "ТребуетсяРегистрацияСертификатов" Тогда
		Элементы.РегистрацияУОператораИндикаторВыполнено.Картинка = БиблиотекаКартинок.ЖелтыйШарБЭД;
	Иначе
 		Элементы.РегистрацияУОператораИндикаторВыполнено.Картинка = БиблиотекаКартинок.ЗеленыйШарБЭД;
	КонецЕсли;
	
	// Проверка идентификатора абонента ЭДО
	Элементы.ГруппаПриглашенияКонтрагента.Доступность     = Форма.ПроверкаРегистрацияУОператора     = "Выполнено";
	Элементы.ПриглашениеКонтрагентаКОбменуОписание.Шрифт = ?(Форма.ПроверкаРегистрацияУОператора    = "Выполнено", 
		Новый Шрифт(Элементы.ПриглашениеКонтрагентаКОбменуОписание.Шрифт,,,Истина), Новый Шрифт);
	Элементы.ПриглашениеКонтрагентаТребуется.Видимость    = Форма.ПроверкаПриглашенияКонтрагента    = "Требуется";
	Элементы.ПриглашениеКонтрагентаВыполнено.Видимость    = Форма.ПроверкаПриглашенияКонтрагента    = "Выполнено";
	Элементы.ПриглашениеКонтрагентаОжидается.Видимость    = Форма.ПроверкаПриглашенияКонтрагента    = "Ожидание";
	
	Элементы.ОтправитьПриглашение.Видимость               = Форма.ПроверкаОтправкаПриглашений        = "Требуется"
		И Не Форма.ПроверкаИдентификаторАбонента;
	Элементы.УправлениеОтправкойПриглашений.Видимость     = Форма.ПроверкаПриглашенияКонтрагента   <> "Выполнено"
		И Форма.ПредварительнаяНастройка И Форма.ПроверкаРегистрацияУОператора     = "Выполнено";
		
	Элементы.УчетнаяЗаписьАбонента.Видимость              = Форма.ПроверкаИдентификаторАбонента
		И Форма.ПредварительнаяНастройка И Форма.ПроверкаРегистрацияУОператора = "Выполнено";
		
	Элементы.ГруппаОписаниеРоуминга.Видимость             = Не ПустаяСтрока(Форма.ПроверкаВозможностьРоуминга)
		И (Форма.ПроверкаВозможностьРоуминга <> "Выполнено" Или Форма.ПредварительнаяНастройка);
		
	Элементы.ГруппаТребуетсяНастройка.Видимость           = Форма.ПроверкаВозможностьРоуминга    = "Требуется";
	Элементы.ГруппаРоумингДоступен.Видимость              = Форма.ПроверкаВозможностьРоуминга    = "Выполнено" И ВсеГотовоКУстановкеСвязи;
	Элементы.ГруппаОбратитьВнимание.Видимость             = Форма.ПроверкаВозможностьРоуминга    = "Внимание";
	Элементы.ГруппаОшибкаРоуминга.Видимость               = Форма.ПроверкаВозможностьРоуминга    = "Ошибка";
	Элементы.ВвестиДанныеИдентификатораВручную.Пометка    = Форма.ПроверкаИдентификаторАбонента;
	
	// Управление видимостью полей ввода И заголовков при разных видах открытия мастера
	Элементы.УчетнаяЗаписьОтправителя.Видимость           = Форма.ПредварительнаяНастройка;
	
	Элементы.ГруппаСохранитьНастройки.Видимость           = Форма.ЕстьПравоНастройкиОбмена
		И Форма.НастройкаДокумента И Форма.НастройкиИзменены
		И (Форма.ПроверкаВозможностьРоуминга = "Выполнено" Или Форма.ПроверкаВозможностьРоуминга    = "Внимание");
	
	Элементы.ПроверкаВыполнена.Заголовок = НСтр("ru = 'Все готово к обмену документами'");
	Элементы.ПроверкаВыполнена.ЦветТекстаЗаголовка = Элементы.ЦветРазделаПанелиФункций.ЦветТекста;
	
	
	Если (Форма.ПроверкаВозможностьРоуминга <> "Выполнено" Или Форма.ПроверкаСертификатУстановлен <> "Выполнено"
		ИЛИ Форма.ПроверкаРегистрацияУОператора = "ТребуетсяРегистрацияСертификатов")
			И Не Форма.ПредварительнаяНастройка Тогда
			
			Если Форма.ПроверкаВозможностьРоуминга = "Внимание" Тогда
				Элементы.ПроверкаВыполнена.Заголовок = НСтр("ru = 'При обмене документами возможны проблемы'");
				Элементы.ПроверкаВыполнена.ЦветТекстаЗаголовка = Элементы.ФонУправляющегоПоля.ЦветТекста;
			Иначе
				Элементы.ПроверкаВыполнена.Заголовок = НСтр("ru = 'Обнаружены ошибки настройки отправки документов'");
				Элементы.ПроверкаВыполнена.ЦветТекстаЗаголовка = Элементы.ДосьеПлохаяОценкаЦвет.ЦветТекста;
			КонецЕсли;
			
	КонецЕсли;
	
	// Управление кнопкой "Готово"
	Элементы.ФормаПодключить.Доступность = (Форма.ПроверкаВозможностьРоуминга = "Выполнено"
			Или Форма.ПроверкаВозможностьРоуминга    = "Внимание") 
		И (Форма.НастройкиИзменены Или Форма.ПредварительнаяНастройка)
		И ВсеГотовоКУстановкеСвязи;
	
	// Видимость основной формы
	Элементы.ОжиданиеПроверки.Видимость  = Ложь;
	Элементы.ПроверкаВыполнена.Видимость = Форма.ПредварительнаяНастройка Или Форма.ПроверкаВозможностьРоуминга <> "Выполнено"
		Или Форма.ПроверкаСертификатУстановлен <> "Выполнено" ИЛИ Форма.ПроверкаРегистрацияУОператора = "ТребуетсяРегистрацияСертификатов";
	Если Не Форма.ПредварительнаяНастройка Тогда
		Элементы.РедактированиеНастроек.Видимость = Истина;
		Элементы.ВыберитеУчетныеЗаписиДляОбмена.Видимость = Не Форма.СкрыватьНастройкиТранспорта;
		Элементы.ВыберитеУчетныеЗаписиДляОбмена.ТолькоПросмотр = Не Форма.ЕстьПравоНастройкиОбмена;
		Элементы.НастройкаФорматЭД.ТолькоПросмотр = Не Форма.ЕстьПравоНастройкиОбмена;
	КонецЕсли;
	
	Если Форма.СкрыватьНастройкиТранспорта Тогда
		Элементы.ГруппаРегламентЭДО.Показать();
	КонецЕсли;
	
	Если Форма.ВыборУчетныхЗаписей Тогда
		Элементы.РедактированиеНастроек.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаФорматЭД.Видимость = Элементы.НастройкаФорматЭД.СписокВыбора.Количество() > 0;
	Элементы.СохранитьНастройки.ОтображениеПодсказки = 
		?(Форма.НастройкаДокумента И Форма.НастройкиВерсияФорматаУстановленаВручную,
			ОтображениеПодсказки.ОтображатьСнизу, ОтображениеПодсказки.Нет);
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПараметрыВыбора()
	
	// Параметры выбора маршрута.
	ВозможныеСхемыПодписания = Новый Массив;
	ВозможныеСхемыПодписания.Добавить(Перечисления.СхемыПодписанияЭД.ОднойДоступнойПодписью);
	ВозможныеСхемыПодписания.Добавить(Перечисления.СхемыПодписанияЭД.ПоПравилам);
	
	Если ВидЭД = Перечисления.ВидыЭД.ПроизвольныйЭД Тогда
		ВозможныеСхемыПодписания.Добавить(Перечисления.СхемыПодписанияЭД.УказыватьПриСоздании);
	КонецЕсли;
	
	ПараметрВыбора = Новый ПараметрВыбора("Отбор.СхемаПодписания", ВозможныеСхемыПодписания);
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(ПараметрВыбора);
	Элементы.ПодписьПоМаршруту.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьПредставлениеРегламентаЭДО(Форма)
	
	МассивСтрок = Новый Массив;
	Текст       = "";
	
	Строки = Форма.ФорматыЭД.НайтиСтроки(Новый Структура("ИдентификаторФормата", Форма.НастройкаФорматЭД));
	Если Строки.Количество() > 0 Тогда
		Форма.ЭтоСоставнойФормат = Строки[0].ВозможноИспользованиеУПД;
		МассивСтрок.Добавить(НСтр("ru = 'Регламент:'")+ " " + Строки[0].ПредставлениеФормата);
		МассивСтрок.Добавить(?(Форма.НастройкаОжидатьОтветнуюПодпись, НСтр("ru = 'с ответной подписью'"), НСтр("ru = 'без ответной подписи'")));
		Текст = СтрСоединить(МассивСтрок,", ");
	КонецЕсли;
	
	Форма.Элементы.ГруппаРегламентЭДО.ЗаголовокСвернутогоОтображения = Текст;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьПредставлениеСтрокиСохраненияНастроек(Форма)
	
	
	Шаблон  = НСтр("ru = 'Использовать эти настройки для последующих документов по контрагенту ""%1"" %2'");
	Договор = "";
	
	Если ЗначениеЗаполнено(Форма.ДоговорКонтрагента) Тогда 
		Договор = СтрШаблон(НСтр("ru = 'И договору ""%1""'"), Форма.ДоговорКонтрагента);
	КонецЕсли;
	
	Текст = СтрШаблон(Шаблон, Форма.Контрагент, Договор);
	Форма.Элементы.СохранитьНастройки.Заголовок = Текст;
	
КонецФункции

#КонецОбласти

#Область РаботаСКриптопровайдером

&НаСервере
Процедура ЗаполнитьПрограммыЭлектроннойПодписиИШифрования()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрограммыЭлектроннойПодписиИШифрования.ИмяПрограммы КАК ИмяПрограммы,
		|	ПрограммыЭлектроннойПодписиИШифрования.ТипПрограммы КАК ТипПрограммы,
		|	ПрограммыЭлектроннойПодписиИШифрования.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПрограммыЭлектроннойПодписиИШифрования КАК ПрограммыЭлектроннойПодписиИШифрования
		|ГДЕ
		|	ПрограммыЭлектроннойПодписиИШифрования.ИмяПрограммы <> """"";
	
	Для Каждого Программа Из Запрос.Выполнить().Выгрузить() Цикл
		
		ОписаниеПрограммы = Новый Структура;
		ОписаниеПрограммы.Вставить("ИмяПрограммы" , Программа.ИмяПрограммы);
		ОписаниеПрограммы.Вставить("ТипПрограммы" , Программа.ТипПрограммы);
		ОписаниеПрограммы.Вставить("Ссылка"       , Программа.Ссылка);

		
		Программы.Добавить(ОписаниеПрограммы);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьУстановленныеПрограммы()
	
	Описание = Новый ОписаниеОповещения("ПроверкаУстановкиРасширения", ЭтотОбъект);
	НачатьПодключениеРасширенияРаботыСКриптографией(Описание);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаУстановкиРасширения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат Тогда
		
		ПроверкаКриптопровайдерУстановлен = "Ошибка";
		
	Иначе
		
		Описание = Новый ОписаниеОповещения("ПроверкаПрограммКриптографииЗакончена", ЭтотОбъект);
		ЭлектроннаяПодписьКлиент.НайтиУстановленныеПрограммы(Описание, Программы.ВыгрузитьЗначения(), Истина);
		Возврат;
		
	КонецЕсли;
	
	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторнаяПроверкаПрограммКриптографии(Результат, ДополнительныеПараметры) Экспорт
	
	ПроверкаКриптопровайдерУстановлен = "Требуется";
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	Если Результат.Выполнено Тогда
		Элементы.УстановитьVipNet.Доступность = Ложь;
		Элементы.УстановитьCryptoPRO.Доступность = Ложь;
	КонецЕсли;
	ОпределитьУстановленныеПрограммы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПрограммКриптографииЗакончена(Результат, ДополнительныеПараметры) Экспорт
	
	ПроверкаКриптопровайдерУстановлен = "Требуется";
	ЕстьОшибки = Истина;
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуемыеПрограммы = Новый Соответствие;
	
	Для Каждого Программа Из Программы Цикл
		
		ИспользуемыеПрограммы.Вставить(Программа.Значение.ИмяПрограммы, Программа.Значение);
		
	КонецЦикла;
	
	Для Каждого Программа Из Результат Цикл
		
		Если Не Программа.Установлена Тогда
			Продолжить;
		КонецЕсли;
		
		
		ПараметрыПрограммы = ИспользуемыеПрограммы.Получить(Программа.ИмяПрограммы);
		Если ПараметрыПрограммы = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПроверкаКриптопровайдерУстановлен = "Выполнено";
		ЕстьОшибки = Ложь;
		Прервать;
		
	КонецЦикла;
	
	Если ЕстьОшибки И ПредварительнаяНастройка Тогда
		ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
	Иначе
		ПодключитьОбработчикОжидания("ВыполнитьПолнуюПроверкуНастройкиОбмена", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУстановкиРасширения(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ОпределитьУстановленныеПрограммы();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область УстановитьCryptoPRO

&НаКлиенте
Процедура УстановитьCryptoProCSPПослеВводаРегистрационныхДанных(Результат, ВходящийКонтекст) Экспорт
	
	ОповещениеПослеСозданияКаталога = Новый ОписаниеОповещения(
			"УстановитьКриптопровайдерПослеСозданияВременногоКаталога", ЭтотОбъект, ВходящийКонтекст);
	
	ВходящийКонтекст.Вставить("ПослеСозданияВременногоКаталога", ОповещениеПослеСозданияКаталога);
	
	Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("Структура") Тогда
		ВходящийКонтекст.Вставить("РегистрационныеДанные", Результат);
		Оповещение = Новый ОписаниеОповещения(
			"УстановитьКриптопровайдерПослеПолученияДистрибутива", ЭтотОбъект, ВходящийКонтекст);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		Элементы.УстановитьCryptoPRO.Картинка = БиблиотекаКартинок.СинхронизацияДанныхДлительнаяОперация;
	
		ДлительнаяОперация = ПолучитьДистрибутивCryptoProCSP(ВходящийКонтекст.РегистрационныеДанные, УникальныйИдентификатор);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	Иначе
		РезультатВыполнения = Новый Структура("Выполнено", Ложь);
		РезультатВыполнения.Вставить("ОписаниеОшибки", НСтр("ru = 'Пользователь прервал операцию'"));
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКриптопровайдерПослеПолученияДистрибутива(ДлительнаяОперация, ВходящийКонтекст) Экспорт
	
	Элементы.УстановитьVipNet.Картинка = Новый Картинка;
	Элементы.УстановитьCryptoPRO.Картинка = Новый Картинка;
	
	Если ДлительнаяОперация = Неопределено Тогда
		РезультатВыполнения = Новый Структура("Выполнено", Ложь);
		
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(НСтр("ru = 'Вызов API сервиса выдачи дистрибутивов'"));
		МассивСтрок.Добавить(ВходящийКонтекст.ИмяПрограммы);
		МассивСтрок.Добавить(НСтр("ru = 'Не был завершен штатно.'"));
		
		РезультатВыполнения.Вставить("ОписаниеОшибки", СтрСоединить(МассивСтрок, " "));
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, РезультатВыполнения);
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ВходящийКонтекст, ДанныеДистрибутива(ДлительнаяОперация, УникальныйИдентификатор));
		ФайловаяСистемаКлиент.СоздатьВременныйКаталог(ВходящийКонтекст.ПослеСозданияВременногоКаталога);
	Иначе
		РезультатВыполнения = Новый Структура("Выполнено", Ложь);
		РезультатВыполнения.Вставить("ОписаниеОшибки", ДлительнаяОперация.КраткоеПредставлениеОшибки);
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, РезультатВыполнения);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеДистрибутива(ДлительнаяОперация, ИдентификаторФормы) 
	
	Результат = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
	
	Данные = Новый Структура;
	Данные.Вставить("НомерДистрибутива", "");
	Данные.Вставить("Версия", Результат.Версия);
	Данные.Вставить("КонтрольнаяСумма", Результат.КонтрольнаяСумма);
	
	Если Результат.Свойство("СерийныйНомер") Тогда
		Данные.Вставить("СерийныйНомер", Результат.СерийныйНомер);
	КонецЕсли;
	
	ОписаниеФайлов = Новый Массив;
	Для каждого Файл Из Результат.Дистрибутив Цикл
		ОписаниеФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(Файл.Имя,
			ПоместитьВоВременноеХранилище(Файл.ДвоичныеДанные, ИдентификаторФормы)));
	КонецЦикла;
	
	Данные.Вставить("Дистрибутив", ОписаниеФайлов);
	
	Возврат Данные;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДистрибутивCryptoProCSP(Параметры, ИдентификаторФормы)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение дистрибутива CryptoPro CSP'");
	ПараметрыВыполнения.ДополнительныйРезультат = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("ОбменСКонтрагентамиСлужебный.ПолучитьДистрибутивCryptoProCSP", Параметры, ПараметрыВыполнения);
	
КонецФункции

#КонецОбласти

#Область УстановитьVipNet

&НаКлиенте
Процедура УстановитьViPNetCSPПослеВводаРегистрационныхДанных(РегистрационныеДанные, ВходящийКонтекст) Экспорт
	
	Если РегистрационныеДанные = КодВозвратаДиалога.Отмена
		 Или РегистрационныеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86 Тогда
		РегистрационныеДанные.Вставить("Разрядность", 32);
	ИначеЕсли СистемнаяИнформация.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
		РегистрационныеДанные.Вставить("Разрядность", 64);
	Иначе
		Возврат;
	КонецЕсли;
	
	ОповещениеПослеСозданияКаталога = Новый ОписаниеОповещения(
			"УстановитьКриптопровайдерПослеСозданияВременногоКаталога", ЭтотОбъект, ВходящийКонтекст);
	
	ВходящийКонтекст.Вставить("ПослеСозданияВременногоКаталога", ОповещениеПослеСозданияКаталога);
		
	Если ЗначениеЗаполнено(РегистрационныеДанные) И ТипЗнч(РегистрационныеДанные) = Тип("Структура") Тогда
		ВходящийКонтекст.Вставить("РегистрационныеДанные", РегистрационныеДанные);
		Оповещение = Новый ОписаниеОповещения(
			"УстановитьКриптопровайдерПослеПолученияДистрибутива", ЭтотОбъект, ВходящийКонтекст);
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		Элементы.УстановитьVipNet.Картинка = БиблиотекаКартинок.СинхронизацияДанныхДлительнаяОперация;
		
		ДлительнаяОперация = ПолучитьДистрибутивViPNetCSP(ВходящийКонтекст.РегистрационныеДанные, УникальныйИдентификатор);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	Иначе
		РезультатВыполнения = Новый Структура("Выполнено", Ложь);
		РезультатВыполнения.Вставить("ОписаниеОшибки", НСтр("ru = 'Пользователь прервал операцию'"));
		ВыполнитьОбработкуОповещения(ВходящийКонтекст.ОповещениеОЗавершении, РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКриптопровайдерПослеСозданияВременногоКаталога(ИмяКаталогаВременныхФайлов, ВходящийКонтекст) Экспорт
	
	ИмяКаталогаВременныхФайлов = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяКаталогаВременныхФайлов);
	ВходящийКонтекст.Вставить("ВременныйКаталог", ИмяКаталогаВременныхФайлов);
	
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияФайловДистрибутива", ЭтотОбъект, ВходящийКонтекст);
	ПараметрыСохранения = ФайловаяСистемаКлиент.ПараметрыСохраненияФайла();
	ПараметрыСохранения.Интерактивно = Ложь;
	ПараметрыСохранения.Диалог.Каталог = ИмяКаталогаВременныхФайлов;
	ФайловаяСистемаКлиент.СохранитьФайлы(Оповещение, ВходящийКонтекст.Дистрибутив, ПараметрыСохранения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияФайловДистрибутива(ПолученныеФайлы, ВходящийКонтекст) Экспорт
	
	Если ПолученныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапуститьПриложениеНаКлиенте(
		ВходящийКонтекст.ВременныйКаталог + "Setup.bat", ВходящийКонтекст.ВременныйКаталог, Истина, Ложь, ВходящийКонтекст);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДистрибутивViPNetCSP(Параметры, ИдентификаторФормы)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение дистрибутива VipNet CSP'");
	ПараметрыВыполнения.ДополнительныйРезультат = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("ОбменСКонтрагентамиСлужебный.ПолучитьДистрибутивViPNetCSP", Параметры, ПараметрыВыполнения);
	
КонецФункции

#КонецОбласти

#Область ЗапуститьПриложениеНаКлиенте

&НаКлиенте
Процедура ЗапуститьПриложениеНаКлиенте(СтрокаКоманды, ТекущийКаталог, ДождатьсяЗавершения, ВыводитьСообщения, ВходящийКонтекст)
	
	Оповещение = Новый ОписаниеОповещения(
			"ЗапуститьПриложениеНаКлиентеПослеЗапускаПриложения", ЭтотОбъект, ВходящийКонтекст,
			"ЗапуститьПриложениеНаКлиентеПриОшибкеЗапускаПриложения", ЭтотОбъект);
	
	ПараметрыЗапускаПрограммы = ФайловаяСистемаКлиент.ПараметрыЗапускаПрограммы();
	ПараметрыЗапускаПрограммы.ТекущийКаталог = ТекущийКаталог;
	ПараметрыЗапускаПрограммы.Оповещение = Оповещение;
	ПараметрыЗапускаПрограммы.ДождатьсяЗавершения = ДождатьсяЗавершения;
	
	ФайловаяСистемаКлиент.ЗапуститьПрограмму(СтрокаКоманды, ПараметрыЗапускаПрограммы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПриложениеНаКлиентеПослеЗапускаПриложения(КодВозврата, ВходящийКонтекст) Экспорт
	
	Если ТипЗнч(ВходящийКонтекст.ОповещениеОЗавершении) = Тип("ОписаниеОповещения") Тогда
		РезультатВыполнения = Новый Структура;
		РезультатВыполнения.Вставить("Выполнено", Истина);
		РезультатВыполнения.Вставить("ОписаниеОшибки", "");
		
		ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			РезультатВыполнения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПриложениеНаКлиентеПриОшибкеЗапускаПриложения(ИнформацияОбОшибке, СтандартнаяОбработка, ВходящийКонтекст) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОшибки = НСтр("ru = 'Не удалось открыть файл %1.
                           |Возможно файл уже открыт.'");
	ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ОписаниеОшибки, ВходящийКонтекст.СтрокаКоманды);
	ОбщегоНазначенияКлиент.СообщитьПользователю(ОписаниеОшибки);
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("Выполнено", Ложь);
	РезультатВыполнения.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	
	ВыполнитьОбработкуОповещения(
			ВходящийКонтекст.ОповещениеОЗавершении,
			РезультатВыполнения);

КонецПроцедуры

#КонецОбласти

#Область РаботаССертификатамиИУчетнымиЗаписями

&НаКлиенте
Процедура ВыполнитьПолнуюПроверкуНастройкиОбмена()
	
	Элементы.ПолучениеСертификатовИндикаторВыполнения.Картинка         = БиблиотекаКартинок.СинхронизацияДанныхДлительнаяОперация;
	Элементы.РегистрацияУОператораИндикаторВыполнения.Картинка         = БиблиотекаКартинок.СинхронизацияДанныхДлительнаяОперация; 
	Элементы.ПриглашениеКонтрагентаКОбменуИндикаторВыполнения.Картинка = БиблиотекаКартинок.СинхронизацияДанныхДлительнаяОперация;
	
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияОтпечатковСертификатовКлиента", ЭтотОбъект);
	ЭлектроннаяПодписьКлиент.ПолучитьОтпечаткиСертификатов(Оповещение, Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияОтпечатковСертификатовКлиента(ОтпечаткиСертификатов, ВариантПроверки) Экспорт
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ПолучитьДанныеДляНастройкиСвязиСКонтрагентомЗавершение", ЭтотОбъект, ВариантПроверки);
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ОтпечаткиНаКлиенте"       , ОтпечаткиСертификатов);
	ПараметрыПроцедуры.Вставить("Организация"              , Организация);
	ПараметрыПроцедуры.Вставить("Контрагент"               , Контрагент);
	ПараметрыПроцедуры.Вставить("ВариантПроверки"          , ВариантПроверки);
	ПараметрыПроцедуры.Вставить("ИдентификаторОтправителя" , ИдентификаторОтправителя);
	ПараметрыПроцедуры.Вставить("ИдентификаторПолучателя"  , ИдентификаторПолучателя);
	
	ДлительнаяОперация = ПолучитьДанныеДляНастройкиСвязиСКонтрагентом(ПараметрыПроцедуры, УникальныйИдентификатор);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Оповещение, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеДляНастройкиСвязиСКонтрагентом(Параметры, УникальныйИдентификатор)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Получить данные для настройки связи ЭДО'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("ОбменСКонтрагентамиСлужебный.ПолучитьДанныеДляНастройкиСвязиСКонтрагентом", Параметры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ПолучитьДанныеДляНастройкиСвязиСКонтрагентомЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено
			И Результат.Статус = "Выполнено" Тогда
			
			ОбработатьРезультатыНастройкиСвязиСКонтрагентом(Результат.АдресРезультата);
			
	ИначеЕсли Результат <> Неопределено
				И Результат.Статус = "Ошибка" Тогда
				
				ТекстОшибки = НСтр("ru = 'Во время получения данных для настройки связи с абонентом ЭДО произошла ошибка.
                                   |Подробнее см. в журнале регистрации.'");
				
				ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
				Элементы.ФормаПодключить.Доступность = Ложь;
	Элементы.ФормаПодключить.Картинка = БиблиотекаКартинок.СинхронизацияДанныхДлительнаяОперация;
	
				
	КонецЕсли;
	
	Элементы.ПолучениеСертификатовИндикаторВыполнения.Картинка         = БиблиотекаКартинок.СерыйШарБЭД;
	Элементы.РегистрацияУОператораИндикаторВыполнения.Картинка         = БиблиотекаКартинок.СерыйШарБЭД; 
	Элементы.ПриглашениеКонтрагентаКОбменуИндикаторВыполнения.Картинка = БиблиотекаКартинок.СерыйШарБЭД;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатыНастройкиСвязиСКонтрагентом(АдресРезультата)
	
	СтруктураОтвет = ПолучитьИзВременногоХранилища(АдресРезультата);
		
	Если ТипЗнч(СтруктураОтвет) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ОтпечаткиСертификатов = Неопределено;
	СтруктураОтвет.Свойство("ОтпечаткиСертификатов", ОтпечаткиСертификатов);
	Если ТипЗнч(ОтпечаткиСертификатов) = Тип("Массив") Тогда
		Отпечатки = Новый ФиксированныйМассив(ОтпечаткиСертификатов);
	КонецЕсли;
	
	ПроверкаСертификатов = Неопределено;
	Если СтруктураОтвет.Свойство("ПроверкаСертификатов", ПроверкаСертификатов)
		И ПроверкаСертификатов <> Неопределено Тогда
		
		Если ПроверкаСертификатов.Результат Тогда
			ПроверкаСертификатУстановлен = "Выполнено";
		ИначеЕсли ПроверкаСертификатов.ОжидаетсяВыпускСертификата Тогда
			ПроверкаСертификатУстановлен = "Ожидание" ;
		Иначе
			ПроверкаСертификатУстановлен = "Требуется";
		КонецЕсли;
		
	КонецЕсли;
	
	УчетныеЗаписи = Неопределено;
	Если СтруктураОтвет.Свойство("УчетныеЗаписи", УчетныеЗаписи)
		И УчетныеЗаписи <> Неопределено Тогда
		
		Если УчетныеЗаписи.ИдентификаторыОтправителя.Количество() = 0 Тогда
			ПроверкаРегистрацияУОператора = "Требуется";
		Иначе
			Элементы.УчетнаяЗаписьОтправителя.СписокВыбора.Очистить();
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УчетныеЗаписи.ИдентификаторыОтправителя,
				Элементы.УчетнаяЗаписьОтправителя.СписокВыбора);
				
			Элементы.ИдентификаторОтправителя.СписокВыбора.Очистить();
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УчетныеЗаписи.ИдентификаторыОтправителя,
				Элементы.ИдентификаторОтправителя.СписокВыбора);
				
			ПроверкаРегистрацияУОператора = "Выполнено";
		КонецЕсли;
		
		Если УчетныеЗаписи.ИдентификаторыПолучателя.Количество() = 0 Тогда
			ПроверкаПриглашенияКонтрагента = "Требуется";
		Иначе
			
			Элементы.УчетнаяЗаписьПолучателя.СписокВыбора.Очистить();
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УчетныеЗаписи.ИдентификаторыПолучателя,
				Элементы.УчетнаяЗаписьПолучателя.СписокВыбора);
			
			Элементы.ИдентификаторПолучателя.СписокВыбора.Очистить();
			ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(УчетныеЗаписи.ИдентификаторыПолучателя,
				Элементы.ИдентификаторПолучателя.СписокВыбора);
			
			ПроверкаПриглашенияКонтрагента = "Выполнено";
			ПроверкаИдентификаторАбонента = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Приглашения = Неопределено;
	Если СтруктураОтвет.Свойство("Приглашения", Приглашения)
		И Приглашения <> Неопределено Тогда
		
		Если Приглашения.Количество() > 0 Тогда
			ОтправленныеПриглашения.ЗагрузитьЗначения(Приглашения);
			Если ПустаяСтрока(ИдентификаторОтправителя) Тогда
				ИдентификаторОтправителя = Приглашения[0];
			КонецЕсли;
			
			Если ПроверкаПриглашенияКонтрагента = "Требуется" Тогда 
				ПроверкаПриглашенияКонтрагента = "Ожидание";
			КонецЕсли;
			
			ПроверкаОтправкаПриглашений = "Отправлено";
		КонецЕсли;
		
	КонецЕсли;
	
	РейтингУчетныхЗаписей = Неопределено;
	Если СтруктураОтвет.Свойство("РейтингУчетныхЗаписей", РейтингУчетныхЗаписей)
		И РейтингУчетныхЗаписей <> Неопределено И (ПустаяСтрока(ИдентификаторОтправителя) Или ПустаяСтрока(ИдентификаторПолучателя)) Тогда
		
		Если ПустаяСтрока(ИдентификаторОтправителя) Тогда
			ИдентификаторОтправителя = РейтингУчетныхЗаписей.ИдентификаторОтправителя;
		КонецЕсли;
		
		Если ПустаяСтрока(ИдентификаторПолучателя) Тогда
			ИдентификаторПолучателя  = РейтингУчетныхЗаписей.ИдентификаторПолучателя;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновлениеДанныхПриИзмененииУчетныхЗаписей(ЭтотОбъект);
	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция ПолучитьДанныеОСвязиИдентификаторов(Знач ИдентификаторОтправителя, Знач ИдентификаторПолучателя,
											Внимание, ОператорЭДО, ПодробноеОписание, СсылкаТехПоддержки, ПроверкаОтправкаПриглашений)
	
	ОператорЭДО = "";
	ПодробноеОписание = "";
	Если Не ЗначениеЗаполнено(ИдентификаторОтправителя)
			Или Не ЗначениеЗаполнено(ИдентификаторПолучателя) Тогда
			Возврат Неопределено;
	КонецЕсли;
	
	ДополнительныеДанные = Новый Структура;
	Результат = ОбменСКонтрагентамиСлужебный.ЕстьВозможностьРоумингаОператоровЭДО(ИдентификаторОтправителя, ИдентификаторПолучателя, ДополнительныеДанные);
	
	ИдентификаторОператора = "";
	ДополнительныеДанные.Свойство("ИдентификаторОператораПолучателя"    , ИдентификаторОператора);
	ДополнительныеДанные.Свойство("СсылкаНаСтраницуТехническойПоддержки", СсылкаТехПоддержки);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОператорыЭДО.Представление КАК Представление
		|ИЗ
		|	РегистрСведений.ОператорыЭДО КАК ОператорыЭДО
		|ГДЕ
		|	ОператорыЭДО.ИдентификаторОператора = &ИдентификаторОператора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	АбонентыЭДО.ПодробноеОписание КАК ПодробноеОписание,
		|	(АбонентыЭДО.СрокДействияСертификатов < &ТекущаяДата
		|			И АбонентыЭДО.СрокДействияСертификатов <> &ПустаяДата)
		|		ИЛИ (АбонентыЭДО.ДатаПоследнейАктивности < ДОБАВИТЬКДАТЕ(&ТекущаяДата, МЕСЯЦ, -2)
		|			И АбонентыЭДО.ДатаПоследнейАктивности <> &ПустаяДата) КАК Внимание
		|ИЗ
		|	РегистрСведений.АбонентыЭДО КАК АбонентыЭДО
		|ГДЕ
		|	АбонентыЭДО.ИдентификаторЭДО = &ИдентификаторПолучателя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПриглашенияКОбменуЭлектроннымиДокументами.Статус КАК Статус
		|ИЗ
		|	РегистрСведений.ПриглашенияКОбменуЭлектроннымиДокументами КАК ПриглашенияКОбменуЭлектроннымиДокументами
		|ГДЕ
		|	ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторОрганизации = &ИдентификаторОтправителя
		|	И ПриглашенияКОбменуЭлектроннымиДокументами.ИдентификаторКонтрагента = &ИдентификаторПолучателя";
	
	Запрос.УстановитьПараметр("ИдентификаторОператора" , ИдентификаторОператора);
	Запрос.УстановитьПараметр("ИдентификаторПолучателя", ИдентификаторПолучателя);
	Запрос.УстановитьПараметр("ИдентификаторОтправителя", ИдентификаторОтправителя);
	Запрос.УстановитьПараметр("ТекущаяДата"            , ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("ПустаяДата"             , Дата(1, 1, 1));
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса[0].Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОператорЭДО       = ВыборкаДетальныеЗаписи.Представление;
	КонецЦикла;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса[1].Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ПодробноеОписание = ВыборкаДетальныеЗаписи.ПодробноеОписание;
		Внимание          = ВыборкаДетальныеЗаписи.Внимание;
	КонецЦикла;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса[2].Выбрать();
	ПроверкаОтправкаПриглашений = "Требуется";
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Статус <> Перечисления.СтатусыПриглашений.Отклонено Тогда
			ПроверкаОтправкаПриглашений = "Отправлено";
		КонецЕсли;
		Если ВыборкаДетальныеЗаписи.Статус = Перечисления.СтатусыПриглашений.Принято Тогда
			Результат = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновлениеДанныхПриИзмененииУчетныхЗаписей(Форма)
	
	Внимание = Ложь;
	Результат = ПолучитьДанныеОСвязиИдентификаторов(Форма.ИдентификаторОтправителя, Форма.ИдентификаторПолучателя, Внимание,
		Форма.ПолучательОператорЭДО, Форма.ПолучательПодробноеОписание, Форма.ПолучательСсылкаТехПоддержки, Форма.ПроверкаОтправкаПриглашений);
	
	Если Результат = Истина И Не Внимание Тогда
		Форма.ПроверкаВозможностьРоуминга = "Выполнено";
	ИначеЕсли Результат = Истина И Внимание Тогда
		Форма.ПроверкаВозможностьРоуминга = "Внимание";
	ИначеЕсли Результат = Ложь Тогда
		Форма.ПроверкаВозможностьРоуминга = "Требуется";
	ИначеЕсли Результат = Неопределено
		И (ПустаяСтрока(Форма.ИдентификаторОтправителя) Или ПустаяСтрока(Форма.ИдентификаторПолучателя)) Тогда
		Форма.ПроверкаВозможностьРоуминга = "";
	Иначе
		Форма.ПроверкаВозможностьРоуминга = "Ошибка";
	КонецЕсли;
	
	ОбновитьСтатусРегистрацииСертификатовУчетныхЗаписей(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьСтатусРегистрацииСертификатовУчетныхЗаписей(Знач Форма)
	
	Если ЗначениеЗаполнено(Форма.ИдентификаторОтправителя) Тогда
		ЕстьДоступныеСертификатыУчетнойЗаписи = ЕстьДоступныеСертификатыУчетнойЗаписи(Форма.ИдентификаторОтправителя, Форма.Отпечатки);
		
		Если ЕстьДоступныеСертификатыУчетнойЗаписи Тогда
			Форма.ПроверкаРегистрацияУОператора = "Выполнено";
		Иначе
			Форма.ПроверкаРегистрацияУОператора = "ТребуетсяРегистрацияСертификатов";
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьДоступныеСертификатыУчетнойЗаписи(ИдентификаторУчетнойЗаписи, Отпечатки)

	ТаблицаДоступныхСертификатов = ОбменСКонтрагентамиСлужебный.ТаблицаДоступныхДляПодписиСертификатов(Отпечатки,
		ИдентификаторУчетнойЗаписи,, Истина);
	Возврат ТаблицаДоступныхСертификатов.Количество() > 0;

КонецФункции

&НаКлиенте
Процедура ЗарегистрироватьСертификатЗавершение(Результат, ДополнительныеПараметры) Экспорт

	ОбновитьСтатусРегистрацииСертификатовУчетныхЗаписей(ЭтотОбъект);
	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПриглашениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина
			И ЗначениеЗаполнено(ИдентификаторПолучателя) Тогда
			
			Шаблон = НСтр("ru = 'Настройка обмена с контрагентом %1 успешно завершена.'");
			ПоказатьОповещениеПользователя(НСтр("ru = 'Настройка обмена с контрагентом'"), , СтрШаблон(Шаблон, Контрагент));
			
	КонецЕсли;
	
	ВыполнитьПолнуюПроверкуНастройкиОбмена();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействияПоНастройкеЭДООповещение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		
		Описание = Новый ОписаниеОповещения("ЗавершитьРаботуМастера", ЭтотОбъект);
		
		ДлительнаяОперация = НачатьВыполнениеДействийПоНастройкеЭДО(Результат.СоответствиеПрофилейИПараметровСертификатов);
		
		Если ДлительнаяОперация = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Описание, ПараметрыОжидания);
		
	Иначе
		
		Элементы.ФормаПодключить.Доступность = Истина;
		Элементы.ФормаПодключить.Картинка = Новый Картинка;
	
		ШаблонОшибки = НСтр("ru = 'При отправке приглашения возникли ошибки.
			|%1.'");
		
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОшибки, Контрагент);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция НачатьВыполнениеДействийПоНастройкеЭДО(СоответствиеПрофилейНастроекЭДОМаркерам)
	
	ШаблонПриглашения = ОбменСКонтрагентамиСлужебный.СтандартныйШаблонПриглашения();
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	
	ПараметрыПроцедуры = Новый Структура;
	
	Приглашения = Новый ТаблицаЗначений;
	Приглашения.Колонки.Добавить("Контрагент");
	Приглашения.Колонки.Добавить("УчетнаяЗапись");
	Приглашения.Колонки.Добавить("ЭлектроннаяПочта");
	Приглашения.Колонки.Добавить("УчетнаяЗаписьОрганизации");
	Приглашения.Колонки.Добавить("Организация");
	
	НоваяСтрока = Приглашения.Добавить();
	НоваяСтрока.Контрагент = Контрагент;
	НоваяСтрока.Организация = Организация;
	НоваяСтрока.УчетнаяЗапись = ИдентификаторПолучателя;
	НоваяСтрока.УчетнаяЗаписьОрганизации = ИдентификаторОтправителя;
	
	ПараметрыПроцедуры.Вставить("Приглашения"      , Приглашения);
	ПараметрыПроцедуры.Вставить("СписокМаркеров"   , СоответствиеПрофилейНастроекЭДОМаркерам);
	ПараметрыПроцедуры.Вставить("Организация"      , Организация);
	ПараметрыПроцедуры.Вставить("ШаблонПриглашения", ШаблонПриглашения);
	ПараметрыПроцедуры.Вставить("НеСоздаватьНастройкиАвтоматически", НеСоздаватьНастройкиАвтоматически);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"РегистрыСведений.ПриглашенияКОбменуЭлектроннымиДокументами.ОтправитьСписокПриглашений",
		ПараметрыПроцедуры, ПараметрыВыполнения);
		
КонецФункции

#Область РаботаСФорматамиЭД

&НаСервере
Процедура ЗаполнитьФорматыЭД()
	
	ДоступныеФорматыЭД = ОбменСКонтрагентамиСлужебный.ФорматыЭлектронныхДокументов();
	
	Отбор = Новый Структура("ВидЭлектронногоДокумента, Действует", ВидЭД, Истина);
	СписокПоддерживаемыхФорматыЭД = ДоступныеФорматыЭД.Скопировать(Отбор);
	
	Для Каждого ВыборкаДетальныеЗаписи Из СписокПоддерживаемыхФорматыЭД Цикл
		Элементы.НастройкаФорматЭД.СписокВыбора.Добавить(ВыборкаДетальныеЗаписи.ИдентификаторФормата, ВыборкаДетальныеЗаписи.ПредставлениеФормата);
		
		ЗаполнитьЗначенияСвойств(ФорматыЭД.Добавить(), ВыборкаДетальныеЗаписи);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторПолучателяРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Элементы.ПроверкаВыполнена.Показать();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступность()
	
	ДанныеУчетнойЗаписи = РегистрыСведений.УчетныеЗаписиЭДО.ДанныеУчетнойЗаписиЭДОПоИдентификатору(ИдентификаторОтправителя);
	
	Если ДанныеУчетнойЗаписи = Неопределено Тогда
		НастройкиРегламента = Неопределено;
	Иначе
		ТекущийВидЭД = ?(ЗначениеЗаполнено(ПрикладнойВидЭД), ПрикладнойВидЭД, ВидЭД);
		НастройкиРегламента = ОбменСКонтрагентамиСлужебный.НастройкиРегламентаЭДО(
			ТекущийВидЭД, НастройкаФорматЭД, ДанныеУчетнойЗаписи.СпособОбменаЭД);
	КонецЕсли;
		
	Если НастройкиРегламента <> Неопределено Тогда
		// Первичная инициализация - ориентируемся на переданный регламент
		Элементы.НастройкаОжидатьИзвещение.Доступность = НастройкиРегламента.РедактироватьИзвещение;
		Элементы.НастройкаОжидатьОтветнуюПодпись.Доступность = ?(НастройкаДокумента,
			Не ПодтверждениеОбязательно И НастройкиРегламента.РедактироватьОтветнуюПодпись,
			НастройкиРегламента.РедактироватьОтветнуюПодпись);
	Иначе
		// Изменение реквизитов в процессе работы формы
		Элементы.НастройкаОжидатьОтветнуюПодпись.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросОжидатьОтветнуюПодписьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		НастройкаОжидатьОтветнуюПодпись = Истина;
	КонецЕсли;
	
	СформироватьПредставлениеРегламентаЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросВыгружатьДопСведенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		НастройкиВыгружатьДопСведения = Истина;
	КонецЕсли;
	
	СформироватьПредставлениеРегламентаЭДО(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияПолейРегламентаЭДО()
	
	УстановитьДоступность();
	СформироватьПредставлениеРегламентаЭДО(ЭтотОбъект);
	ИнициализироватьНастройкиЗаполненияДополнительныхПолей();
	УстановитьВидимостьЕстьНастройкиЗаполненияДополнительныхПолей();
	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ИнициализироватьНастройкиФормированияДокумента()
	
	ВариантыЗаполненияПолей = ОбменСКонтрагентамиВнутренний.ВариантыЗаполненияПолейЭлектронныхДокументов(
		ВидЭД, НастройкаФорматЭД);
	
	ЗначениеСвойства = Неопределено;
	Если ВариантыЗаполненияПолей.Свойство("ТоварКод", ЗначениеСвойства) Тогда
		Для Каждого Вариант Из ЗначениеСвойства Цикл
			ЗаполнитьЗначенияСвойств(Элементы.ЗаполнениеКодаТовара.СписокВыбора.Добавить(), Вариант);
		КонецЦикла;
	Иначе
		Элементы.ЗаполнениеКодаТовара.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьЗавершениеНастройкиЗаполненияДополнительныхПолей(Результат, Контекст) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьНастройкиЗаполненияДополнительныхПолей = Результат;
	
	НастройкиИзменены = Истина;
	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьНастройкиЗаполненияДополнительныхПолей()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиЗаполненияДополнительныхПолей.ВидЭлектронногоДокумента КАК ВидЭлектронногоДокумента
		|ИЗ
		|	РегистрСведений.НастройкиЗаполненияДополнительныхПолей КАК НастройкиЗаполненияДополнительныхПолей
		|ГДЕ
		|	НастройкиЗаполненияДополнительныхПолей.ВидЭлектронногоДокумента = &ВидЭлектронногоДокумента
		|	И НастройкиЗаполненияДополнительныхПолей.Формат = &Формат
		|	И НастройкиЗаполненияДополнительныхПолей.Получатель = &Получатель
		|	И НастройкиЗаполненияДополнительныхПолей.Договор = &Договор
		|	И НастройкиЗаполненияДополнительныхПолей.Отправитель = &Отправитель";
	
	Запрос.УстановитьПараметр("ВидЭлектронногоДокумента", ВидЭД);
	Запрос.УстановитьПараметр("Отправитель"             , Организация);
	Запрос.УстановитьПараметр("Получатель"              , Контрагент);
	Запрос.УстановитьПараметр("Договор"                 , ДоговорКонтрагента);
	Запрос.УстановитьПараметр("Формат"                  , НастройкаФорматЭД);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ЕстьНастройкиЗаполненияДополнительныхПолей = НЕ РезультатЗапроса.Пустой();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЕстьНастройкиЗаполненияДополнительныхПолей()

	Элементы.ЕстьНастройкиЗаполненияДополнительныхПолей.Видимость = 
			ОбменСКонтрагентамиВнутренний.РазделыДополнительныхПолейФорматаЭлектронногоДокумента(
				ВидЭД, НастройкаФорматЭД).Количество();


КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРаботуМастера(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		// Пропускаем дальше. Приглашения отправлять Не надо.
	ИначеЕсли Результат = Неопределено
		Или Результат.Статус <> "Выполнено"
		Или ЗначениеЗаполнено(ПолучитьИзВременногоХранилища(Результат.АдресРезультата)) <> Истина Тогда
		
		ТекстОшибки = НСтр("ru = 'Во время отправки приглашения произошла ошибка.
                            |Подробнее см. в журнале регистрации.'");
		
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		Элементы.ФормаПодключить.Доступность = Истина;
		Элементы.ФормаПодключить.Картинка    = Новый Картинка;
		Возврат;
	Иначе
		Оповестить("ОбновитьТекущиеДелаЭДО");
	КонецЕсли;
	
	Ответ = Новый Структура;
	ДопПараметры = Новый Структура;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Отправитель"              , Организация);
	ПараметрыПроцедуры.Вставить("Получатель"               , Контрагент);
	ПараметрыПроцедуры.Вставить("Договор"                  , ДоговорКонтрагента);
	ПараметрыПроцедуры.Вставить("ВидЭД"                    , ВидЭД);
	ПараметрыПроцедуры.Вставить("ПрикладнойВидЭД"          , ПрикладнойВидЭД);
	ПараметрыПроцедуры.Вставить("ВерсияФормата"            , НастройкаФорматЭД);
	ПараметрыПроцедуры.Вставить("МаршрутПодписания"        , НастройкаПодписьПоМаршруту);
	ПараметрыПроцедуры.Вставить("ТребуетсяПодтверждение"   , НастройкаОжидатьОтветнуюПодпись);
	ПараметрыПроцедуры.Вставить("ТребуетсяИзвещение"       , НастройкаОжидатьИзвещение);
	ПараметрыПроцедуры.Вставить("ИдентификаторКонтрагента" , ИдентификаторПолучателя);
	ПараметрыПроцедуры.Вставить("ИдентификаторОрганизации" , ИдентификаторОтправителя);
	ПараметрыПроцедуры.Вставить("СохранитьНастройки"       , СохранитьНастройки);
	ПараметрыПроцедуры.Вставить("ИспользоватьУПД"          , НастройкиИспользоватьУПД);
	ПараметрыПроцедуры.Вставить("ИспользоватьУКД"          , НастройкиИспользоватьУКД);
	ПараметрыПроцедуры.Вставить("ВыгружатьДополнительныеСведения", НастройкиВыгружатьДопСведения);
	ПараметрыПроцедуры.Вставить("ЗаполнениеКодаТовара"     , ЗаполнениеКодаТовара);
	ПараметрыПроцедуры.Вставить("ДокументыОснования"       , НастройкиДокументыОснование.ВыгрузитьЗначения());
	ПараметрыПроцедуры.Вставить("ВерсияФорматаУстановленаВручную" , НастройкиВерсияФорматаУстановленаВручную);
	ПараметрыПроцедуры.Вставить("ЭтоУПД" , ЭтоСоставнойФормат);

	Если НастройкаДокумента Тогда
		
		ПараметрыПроцедуры.Вставить("ВыгружатьДополнительныеСведения" , НастройкиВыгружатьДопСведения);
		
		ДопПараметры = ПолучитьДопПараметрыПоОбновленнымНастройкам(ПараметрыПроцедуры, ДополнительныеДанные);
		Ответ.Вставить("ДополнительныеДанные", ДопПараметры);
		Ответ.Вставить("НастройкиДокумента"  , ПараметрыПроцедуры);
	ИначеЕсли ВыборУчетныхЗаписей Тогда
		
		Ответ.Вставить("ИдентификаторКонтрагента" , ИдентификаторПолучателя);
		Ответ.Вставить("ИдентификаторОрганизации" , ИдентификаторОтправителя);
		
	ИначеЕсли НастройкаРегламентаЭДО Тогда
		
		Ответ.Вставить("НастройкиРегламента" , ПараметрыПроцедуры);
		
	КонецЕсли;
	
	Ответ.Вставить("Документы", ПараметрыПроцедуры.ДокументыОснования);
	Ответ.Вставить("Действие" , Действие);
	
	Закрыть(Ответ);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьОбновленныеНастройки(ПараметрыПроцедуры)
	
	РегистрыСведений.НастройкиОтправкиЭлектронныхДокументовПоВидам.ЗаписатьОбновленныеНастройки(ПараметрыПроцедуры);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКлючРегистра(Знач НаименованиеРегистра, Знач ЗначенияКлюча)
	
	Возврат РегистрыСведений[НаименованиеРегистра].СоздатьКлючЗаписи(ЗначенияКлюча);

КонецФункции

&НаКлиенте
Процедура ОбновлениеФормы(Результат, ДополнительныеПараметры) Экспорт

	ОбновитьЭтапыМастераНастройкиПодключения(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаКорректировкиФормата(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		НастройкаФорматЭД = ДополнительныеПараметры;
		НастройкиВерсияФорматаУстановленаВручную = Истина;
		НастройкаФорматЭДПриИзменении(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти