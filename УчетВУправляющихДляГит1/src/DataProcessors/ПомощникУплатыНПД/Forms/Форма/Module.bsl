#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Организация = Параметры.Организация;
	Объект.Период = Параметры.ПериодСобытия;
	
	Правило = Параметры.Правило;
	Срок    = Параметры.Срок;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	КонецЕсли;

	ЦветПодсветки = ОбщегоНазначенияВызовСервера.ЦветСтиля("ВыборСтандартногоПериодаФонКнопки");

	Если Не ЗначениеЗаполнено(Объект.Период) Тогда
		ТекущаяДатаПользователя = ОбщегоНазначения.ТекущаяДатаПользователя();
		Объект.Период = КонецМесяца(ТекущаяДатаПользователя);
	КонецЕсли;

	ИнициализироватьДанныеПолучены(ЭтотОбъект);
	
	ОбновитьПредставлениеПериода(ЭтотОбъект);
	
	ЗаполнитьНачальныеПоказатели();
	
	Заголовок = НСтр("ru = 'Налог на профессиональный доход'");
	
	ДанныеПодключения = Новый Структура;
	ДанныеПодключения.Вставить("НовыеЭлементыФормы", Новый Массив);

	ОрганизацияПредставление = Объект.Организация;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ПроверитьРеквизитыОрганизации();
	КонецЕсли;
	
	ИспользоватьНесколькоОрганизацийБухгалтерскийУчет = Справочники.Организации.ИспользуетсяНесколькоОрганизаций();
	ВыполнениеИзКомандногоМеню = НЕ Параметры.КонтекстныйВызов;
	Элементы.Организация.Видимость              = ВыполнениеИзКомандногоМеню И ИспользоватьНесколькоОрганизацийБухгалтерскийУчет;
	Элементы.ОрганизацияПредставление.Видимость = НЕ ВыполнениеИзКомандногоМеню ИЛИ НЕ ИспользоватьНесколькоОрганизацийБухгалтерскийУчет;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ПроверитьЗаполнение() Тогда
		ОтправитьЗапросВСервисФНС();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ПлатежныйДокумент_УплатаНалогов" Тогда
		
		Если ТипЗнч(Параметр) = Тип("Структура")
			И Параметр.Организация = Объект.Организация
			И ЗначениеЗаполнено(Параметр.Налог)
			И ЭтоНПД(Параметр.Налог) Тогда
			
			НайтиПлатежиСвязанныеСЗадачей();
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "УдалитьДокументУплаты" Тогда
		
		УдалитьДокументУплаты(Параметр);
		
	ИначеЕсли ИмяСобытия = "Запись_Организации"
		И Источник = Объект.Организация Тогда
		
		ПоказатьБаннерРазныеАдресаМестаЖительства(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияСообщениеРазныеАдресаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "МойНалогНастройки" Тогда
		СтандартнаяОбработка = Ложь;
		АдресСтраницы = ИнтеграцияСПлатформойСамозанятыеКлиентСервер.АдресСтраницыНастройкиСервиса();
		ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку(АдресСтраницы);
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "РеквизитыОрганизации" Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", Объект.Организация);
		
		ОткрытьФорму("Справочник.Организации.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеОбОшибкеОбработкаНавигационнойСсылки(
	Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	ОписаниеОповещенияОЗакрытии = 
		Новый ОписаниеОповещения("СообщениеОбОшибкеОбработкаНавигационнойСсылкиЗавершение", ЭтотОбъект);

	Если НавигационнаяСсылкаФорматированнойСтроки = "РеквизитыОрганизацииДляОтчетности" Тогда

		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ",                 Объект.Организация);
		ПараметрыФормы.Вставить("Назначение",           "ДляОтчетности");
		ПараметрыФормы.Вставить("ПроверяемыеРеквизиты", ПроверяемыеРеквизитыДляОтчетности());
	
		ОткрытьФорму("Справочник.Организации.ФормаОбъекта", ПараметрыФормы,
			ЭтотОбъект, УникальныйИдентификатор,,,ОписаниеОповещенияОЗакрытии, 
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СообщениеОбОшибкеОбработкаНавигационнойСсылкиЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ИнициализироватьДанныеПолучены(ЭтотОбъект);
	ПроверитьРеквизитыОрганизации();
	УправлениеФормой(ЭтотОбъект);
	ОтправитьЗапросВСервисФНС();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыручкаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗаполняемыеНастройки = Новый Структура("Показатели, Группировка, Отбор, ВыводимыеДанные", Ложь, Ложь, Ложь, Ложь);
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("РежимРасшифровки",                  Истина);
	ДополнительныеСвойства.Вставить("Организация",                       Объект.Организация);
	ДополнительныеСвойства.Вставить("ВключатьОбособленныеПодразделения", Ложь); // не поддерживается
	ДополнительныеСвойства.Вставить("НачалоПериода",                     НачалоМесяца(Объект.Период));
	ДополнительныеСвойства.Вставить("КонецПериода",                      КонецМесяца(Объект.Период));
	ДополнительныеСвойства.Вставить("Период",                            Объект.Период);
	ДополнительныеСвойства.Вставить("ВыводитьЗаголовок",                 Истина);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("ЗаполняемыеНастройки", ЗаполняемыеНастройки);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	
	ОткрытьФорму("Отчет.ДоходыНПД.Форма.ФормаОтчета", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияДокументОплатыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОтборПоФильтру = Новый Структура("НаименованиеЭлементаРазмещения", Элемент.Имя);
	НайденныеСтроки = Платежи.НайтиСтроки(ОтборПоФильтру);
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	Конецесли;
	
	СтандартнаяОбработка = Ложь;
	
	НайденнаяСтрокаПоЭлементуРазмещения = НайденныеСтроки[0];
	
	ПлатежныйДокумент = НайденнаяСтрокаПоЭлементуРазмещения.Ссылка;
	ПредставлениеДокумента = НайденнаяСтрокаПоЭлементуРазмещения.ПредставлениеДокумента;
		
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОткрытьДокумент" Тогда
		Если ТипЗнч(ПлатежныйДокумент) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("Ключ", ПлатежныйДокумент);
			ПараметрыФормы.Вставить("Налоги", Истина);
			ОткрытьФорму("Документ.ПлатежноеПоручение.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
		Иначе
			ПоказатьЗначение(, ПлатежныйДокумент);
		КонецЕсли;
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "УдалитьДокумент" Тогда
	
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Удалить документ %1?'"), ПредставлениеДокумента);
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("ДокументУплатыДляУдаления", ПлатежныйДокумент);
		ДополнительныеПараметры.Вставить("НаименованиеЭлементаРазмещения", ОтборПоФильтру.НаименованиеЭлементаРазмещения);
		ОписаниеОповещения = Новый ОписаниеОповещения(
			"УдалитьПлатежныйДокументИзКоллекцииПлатежейЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
	Конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ВыполнениеЗадачБухгалтера = Ложь;
	
	ЗаполнитьНачальныеПоказатели();
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьРеквизитыОрганизации();
	УправлениеФормой(ЭтотОбъект);
	ОтправитьЗапросВСервисФНС();
	
КонецПроцедуры

&НаКлиенте
Процедура ЛичныйКабинетОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	Если НавигационнаяСсылкаФорматированнойСтроки = "ЛичныйКабинетСервисаМойНалог" Тогда
		СтандартнаяОбработка = Ложь;
		АдресСтраницы = ИнтеграцияСПлатформойСамозанятыеКлиентСервер.АдресСервиса();
		ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку(АдресСтраницы);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СкрытьНажатие(Элемент)
	
	СохранитьВНастройкахАдресМестаЖительстваИзСервиса(Объект.Организация, АдресСпискаКвитанцийНаУплатуНалога);
	ПоказыватьОшибкуРазныеАдреса = Ложь;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#Область ВыборПериода

&НаКлиенте
Процедура ПредставлениеПериодаПриИзменении(Элемент)
	
	ОбновитьПредставлениеПериода(ЭтотОбъект);
	
	ПриИзмененииПериода()
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	НачалоПериода = НачалоМесяца(Объект.Период);
	КонецПериода  = КонецМесяца(Объект.Период);
	
	ПараметрыВыбора = Новый Структура;
	
	ПараметрыВыбора.Вставить("НачалоПериода", НачалоПериода);
	ПараметрыВыбора.Вставить("КонецПериода",  КонецПериода);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаМесяц",
		ПараметрыВыбора, Элементы.ПредставлениеПериода, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Период = РезультатВыбора.КонецПериода;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УменьшитьПериод(Команда)
	
	ИзменитьПериод(Объект.Период, -1);
	
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьПериод(Команда)
	
	ИзменитьПериод(Объект.Период, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьПопыткуПодключения(Команда)
	
	СообщениеОшибкиПодключения = "";
	СервисМойНалогПодключен = ПроверитьСостояниеПодключенияКСервисуМойНалог(Объект.Организация);
	
	УправлениеФормой(ЭтотОбъект);
	ОтправитьЗапросВСервисФНС();

КонецПроцедуры

&НаКлиенте
Процедура ОплатитьЧерезБанк(Команда)
	
	ОплатитьНаКлиенте(ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.БанковскийПеревод"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьЧерезКассу(Команда)
	
	ОплатитьНаКлиенте(ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.НаличнымиПоКвитанции"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВыполнениеКоманд

&НаКлиенте
Процедура ОплатитьНаКлиенте(СпособОплаты)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаблицаЗадолженностей.Количество() = 1 Тогда
		
		ОткрытьФормуНовогоПлатежногоДокумента(СпособОплаты);
		
	Иначе
		
		НачатьСозданиеПлатежныхДокументов(СпособОплаты);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНовогоПлатежногоДокумента(СпособОплаты)
	
	ДлительнаяОперация = ДанныеЗаполненияПлатежногоДокументаВФоне(СпособОплаты);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("СпособОплаты", СпособОплаты);
		
		Обработчик = Новый ОписаниеОповещения(
			"ПослеПолученияДанныхЗаполненияПлатежногоДокумента",
			ЭтотОбъект,
			ДополнительныеПараметры);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
	Иначе
		ПоказатьОшибкуСозданияПлатежныхДокументов(ДлительнаяОперация);
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияДанныхЗаполненияПлатежногоДокумента(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат; // Отменено
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ДанныеЗаполнения = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ДанныеЗаполнения);
		ПараметрыФормы.Вставить("Правило", Правило);
		ПараметрыФормы.Вставить("ПериодСобытия", Объект.Период);
		ПараметрыФормы.Вставить("Налоги", Истина);
		
		Если ДополнительныеПараметры.СпособОплаты = ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.БанковскийПеревод") Тогда
			ТипДокумента = "ПлатежноеПоручение";
		Иначе
			ТипДокумента = "РасходныйКассовыйОрдер";
		КонецЕсли;
		
		ОткрытьФорму(СтрШаблон("Документ.%1.ФормаОбъекта", ТипДокумента), ПараметрыФормы, ЭтотОбъект);
	Иначе
		ПоказатьОшибкуСозданияПлатежныхДокументов(ДлительнаяОперация);
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеЗаполненияПлатежногоДокументаВФоне(СпособОплаты)
	
	СписокКвитанций = СписокКвитанцийНаУплатуНалогаИзВременногоХранилища(АдресСпискаКвитанцийНаУплатуНалога);
	Если Не ЗначениеЗаполнено(СписокКвитанций) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыСоздания = ПараметрыСозданияПлатежныхДокументов(СпособОплаты);
	Если ПараметрыСоздания = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Отбор = Новый Структура("ИдентификаторПлатежа", СписокКвитанций[0].ИдентификаторПлатежа);
	СтрокаЗадолженность = ТаблицаЗадолженностей.НайтиСтроки(Отбор);
	Если СтрокаЗадолженность.Количество() > 0 Тогда
		ВидОбязательства = СтрокаЗадолженность[0].ВидНалоговогоОбязательства;
	Иначе
		ВидОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог;
	КонецЕсли;
	
	ПараметрыОбработчика = Новый Структура;
	ПараметрыОбработчика.Вставить("ПараметрыСоздания", ПараметрыСоздания);
	ПараметрыОбработчика.Вставить("ДанныеКвитанции", ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СписокКвитанций[0]));
	ПараметрыОбработчика.Вставить("НалоговыйПериод", Объект.Период);
	ПараметрыОбработчика.Вставить("ВидОбязательства", ВидОбязательства);
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Заполнение декларации 3-НДФЛ из помощника'");
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ПомощникУплатыНПД.ДанныеЗаполненияПлатежногоДокументаВФоне",
		ПараметрыОбработчика,
		НастройкиЗапуска);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура НачатьСозданиеПлатежныхДокументов(СпособОплаты)
	
	ДлительнаяОперация = СоздатьПлатежныеДокументыНаСервереВФоне(СпособОплаты);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		
		Обработчик = Новый ОписаниеОповещения("ПослеСозданияПлатежныхДокументов", ЭтотОбъект);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
	Иначе
		ПоказатьОшибкуСозданияПлатежныхДокументов(ДлительнаяОперация);
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Создает Платежные поручения или Выплаты наличными в зависимости от выбранного способа оплаты
// 
// Параметры:
//   СпособОплаты - ПеречислениеСсылка.СпособыОплаты
// 
// Возвращаемое значение:
//   Массив - созданные документы
//
&НаСервере
Функция СоздатьПлатежныеДокументыНаСервереВФоне(СпособОплаты)
	
	ПараметрыОбработчика = ПараметрыСозданияПлатежныхДокументов(СпособОплаты);
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Заполнение декларации 3-НДФЛ из помощника'");
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	
	ДлительнаяОперация = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ПомощникУплатыНПД.СоздатьПлатежныеДокументыВФоне",
		ПараметрыОбработчика,
		НастройкиЗапуска);
	
	Возврат ДлительнаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ПослеСозданияПлатежныхДокументов(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат; // Отменено
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		СозданныеДокументы = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		
		Если СозданныеДокументы <> Неопределено Тогда;
			ОповеститьОСозданныхДокументах(СозданныеДокументы);
		КонецЕсли;
		
		НайтиПлатежиСвязанныеСЗадачей();
	Иначе
		ПоказатьОшибкуСозданияПлатежныхДокументов(ДлительнаяОперация);
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыСозданияПлатежныхДокументов(СпособОплаты)
	
	Если СпособОплаты = Перечисления.СпособыУплатыНалогов.БанковскийПеревод Тогда
		
		СчетОрганизации = БанковскийСчетОрганизации(Объект.Организация);
		Если Не ЗначениеЗаполнено(СчетОрганизации) Тогда
			ТекстСообщения = НСтр("ru = 'Укажите банковский счет в реквизитах организации'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Организация);
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Правило",         Правило);
	СтруктураПараметров.Вставить("ПериодСобытия",   Объект.Период);
	СтруктураПараметров.Вставить("Дата",            ОбщегоНазначения.ТекущаяДатаПользователя());
	СтруктураПараметров.Вставить("Организация",     Объект.Организация);
	СтруктураПараметров.Вставить("Задолженности",   ТаблицаЗадолженностей.Выгрузить());
	СтруктураПараметров.Вставить("Платежи",         Платежи.Выгрузить());
	СтруктураПараметров.Вставить("СпособОплаты",    СпособОплаты);
	СтруктураПараметров.Вставить("СчетОрганизации", СчетОрганизации);
	СтруктураПараметров.Вставить("НалоговыйПериодВТаблицеПлатежей", Истина);
	СтруктураПараметров.Вставить("СписокКвитанций", 
		СписокКвитанцийНаУплатуНалогаИзВременногоХранилища(АдресСпискаКвитанцийНаУплатуНалога));
	СтруктураПараметров.Вставить("Налог", 
		Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.НалогНаПрофессиональныйДоход));
	СтруктураПараметров.Вставить("СчетУчета",       ПланыСчетов.Хозрасчетный.ПрочиеНалогиИСборы);
	
	Если СпособОплаты = Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции Тогда
		ВидОперации = Перечисления.ВидыОперацийРКО.УплатаНалога;
	Иначе
		ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога;
	КонецЕсли;
	СтруктураПараметров.Вставить("ВидОперации", ВидОперации);
	
	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьОшибкуСозданияПлатежныхДокументов(ДлительнаяОперация)
	
	МассивИзДвухСтрок = Новый Массив;
	МассивИзДвухСтрок.Добавить(НСтр("ru = 'Ошибка при оплате налога:'"));
	МассивИзДвухСтрок.Добавить(ДлительнаяОперация.КраткоеПредставлениеОшибки);
	
	ВызватьИсключение СтрСоединить(МассивИзДвухСтрок, Символы.ПС);
	
КонецПроцедуры

&НаСервере
Процедура НайтиПлатежиСвязанныеСЗадачей()
	
	ЗаполнитьДокументыОплатыВТаблице();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеПлатежногоДокумента(ТекСтрокаЗадолженность)

	Если Не ЗначениеЗаполнено(ТекСтрокаЗадолженность.Ссылка) Тогда
		Возврат "";
	КонецЕсли;
	
	ПредставлениеПлатежа = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ТекСтрокаЗадолженность.Состояние)
		И ЗначениеЗаполнено(ТекСтрокаЗадолженность.Ссылка) Тогда
		
		Проведен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекСтрокаЗадолженность.Ссылка, "Проведен");
		
		ТекСтрокаЗадолженность.Состояние = 
			?(Проведен, Перечисления.СостоянияБанковскихДокументов.Оплачено,
				Перечисления.СостоянияБанковскихДокументов.Подготовлено);
	КонецЕсли;
	
	ШаблонСтатусаДокумента = НСтр("ru = ' (%1)'");
	СтатусДокумента = СтрШаблон(ШаблонСтатусаДокумента, ТекСтрокаЗадолженность.Состояние);
	
	ПредставлениеПлатежа.Добавить(Новый ФорматированнаяСтрока(СтрШаблон("%1%2",
		ТекСтрокаЗадолженность.ПредставлениеДокумента, СтатусДокумента), , , , "ОткрытьДокумент"));
	
	ТипПлатежногоДокумента = ТипЗНЧ(ТекСтрокаЗадолженность.Ссылка);

	Если Не ПравоДоступа("Изменение", ТекСтрокаЗадолженность.Ссылка.Метаданные()) Тогда
		Возврат Новый ФорматированнаяСтрока(ПредставлениеПлатежа);
	Конецесли;
	
	Если (ТекСтрокаЗадолженность.Состояние <> Перечисления.СостоянияБанковскихДокументов.Оплачено
		И ТекСтрокаЗадолженность.Состояние <> Перечисления.СостоянияБанковскихДокументов.Отправлено)
		ИЛИ (ТипПлатежногоДокумента = Тип("ДокументСсылка.РасходныйКассовыйОрдер")) Тогда
		
		ПредставлениеПлатежа.Добавить("  ");
		ПредставлениеПлатежа.Добавить(Новый ФорматированнаяСтрока(
			БиблиотекаКартинок.УдалитьДокументОплатыИзПомощника, , , , "УдалитьДокумент"));
		
	КонецЕсли;
	
	// Обход ошибки платформы отображения картинки в конце форматированной строки.
	ПредставлениеПлатежа.Добавить(" ");
	
	Возврат Новый ФорматированнаяСтрока(ПредставлениеПлатежа);

КонецФункции

&НаСервере
Процедура ЗаполнитьДокументыОплатыВТаблице()
	
	Платежи.Очистить();
	
	ТаблицаЗадолженностей.Сортировать("Период Возр");
	
	Если ТаблицаЗадолженностей.Количество() > 0 Тогда
		НачалоПериода = НачалоМесяца(ТаблицаЗадолженностей[0].Период);
		КонецПериода  = КонецМесяца(ТаблицаЗадолженностей[ТаблицаЗадолженностей.Количество() - 1].Период);
	Иначе
		НачалоПериода = НачалоМесяца(Объект.Период);
		КонецПериода  = КонецМесяца(Объект.Период);
	КонецЕсли;
	
	ВсеПлатежи = Обработки.ПомощникУплатыНПД.ДокументыУплаты(Объект.Организация, НачалоПериода, КонецПериода);
	
	Платежи.Загрузить(ВсеПлатежи);
	
	Для Каждого ТекСтрокаСписокДобавленныхЭлементовОплат Из СписокДобавленныхЭлементовОплат Цикл
		
		ИмяЭлемента = ТекСтрокаСписокДобавленныхЭлементовОплат.Значение;
		Элементы.Удалить(Элементы[ИмяЭлемента]);
		
	КонецЦикла;
	
	Элементы.ДекорацияДокументОплаты.Заголовок = "";
	
	СписокДобавленныхЭлементовОплат.Очистить();

	ФильтрПоиска = Новый Структура("ВидНалоговогоОбязательства, ПоказательПериода");

	ИндексЗадолженности = 0;
	КоличествоЗадолженностей = ТаблицаЗадолженностей.Количество();
	
	Для каждого ТекСтрокаЗадолженность Из ТаблицаЗадолженностей Цикл

		ФильтрПоиска.ПоказательПериода = 
			ПлатежиВБюджетКлиентСервер.НалоговыйПериод(ТекСтрокаЗадолженность.Период,
				ПлатежиВБюджетКлиентСервер.ПериодичностьМесяц());
			
		ФильтрПоиска.ВидНалоговогоОбязательства = ТекСтрокаЗадолженность.ВидНалоговогоОбязательства;
		
		НайденныеСтроки = Платежи.НайтиСтроки(ФильтрПоиска);
		ИндексЗадолженности = ИндексЗадолженности + 1;
		
		КоличествоНайденныхПлатежей = НайденныеСтроки.Количество();
		Если КоличествоНайденныхПлатежей > 0 Тогда 
			
			ИндексПлатежа = 0;
			Для каждого ТекСтрокаПлатежа Из НайденныеСтроки Цикл
				СтрокаТекущийПлатеж = НайденныеСтроки[0];
			
				Если ИндексПлатежа > 0 Тогда
				
					Если КоличествоЗадолженностей = 1 Тогда
						ГруппаПлатежСОтступом = Элементы.Найти("ГруппаПлатежСОтступом")
					Иначе
						ГруппаПлатежСОтступом = Элементы.Найти("ГруппаПлатежСОтступом" + ИндексЗадолженности)
					КонецЕсли;
					
					ШаблонНазванияДекорацияДокументОплаты = НСтр("ru = 'ДекорацияДокументОплаты%1'");
					НазваниеДекорацияДокументОплаты = 
					СтрШаблон(ШаблонНазванияДекорацияДокументОплаты, "" + ИндексЗадолженности + "" + ИндексПлатежа);
					НовыйЭлемент = 
						Элементы.Добавить(НазваниеДекорацияДокументОплаты, Тип("ДекорацияФормы"), ГруппаПлатежСОтступом);
					НовыйЭлемент.Вид        = ВидДекорацииФормы.Надпись;
					НовыйЭлемент.Заголовок  = "";
					НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
					НовыйЭлемент.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Верх;
					НовыйЭлемент.УстановитьДействие("ОбработкаНавигационнойСсылки",
						"ДекорацияДокументОплатыОбработкаНавигационнойСсылки");
					
					ТекущийЭлементОплатыНаименование = НазваниеДекорацияДокументОплаты;
					СписокДобавленныхЭлементовОплат.Добавить(ТекущийЭлементОплатыНаименование);
				Иначе
					
					Если КоличествоЗадолженностей = 1 Тогда
						ТекущийЭлементОплатыНаименование = "ДекорацияДокументОплаты";
					Иначе
						ШаблонНаименования = НСтр("ru='ДекорацияДокументОплаты%1'");
						НаименованиеЭлемента = СтрШаблон(ШаблонНаименования, ИндексЗадолженности);
			
						ТекущийЭлементОплатыНаименование = НаименованиеЭлемента;
					КонецЕсли;
					
				КонецЕсли;
				
				ПредставлениеПлатежногоДокумента = ПолучитьПредставлениеПлатежногоДокумента(ТекСтрокаПлатежа);

				Если КоличествоЗадолженностей = 1 Тогда
					Элементы[ТекущийЭлементОплатыНаименование].Заголовок = ПредставлениеПлатежногоДокумента;
					ТекСтрокаПлатежа.НаименованиеЭлементаРазмещения = ТекущийЭлементОплатыНаименование;
				Иначе
					Элементы[ТекущийЭлементОплатыНаименование].Заголовок = ПредставлениеПлатежногоДокумента;
					ТекСтрокаПлатежа.НаименованиеЭлементаРазмещения = ТекущийЭлементОплатыНаименование;
				КонецЕсли;

				ИндексПлатежа = ИндексПлатежа + 1;
			
			КонецЦикла;
			
		КонецЕсли;
	
	КонецЦикла;
	
	СуммаНалога = ТаблицаЗадолженностей.Итог("Сумма");
	
	Обработки.ПомощникУплатыНПД.УстановитьСтатусЗадачи(Объект.Организация, Правило, Объект.Период, Платежи, СуммаНалога);
	
	ВсеНалогиОплачены = ?(СуммаНалога > 0, ВсеНалогиОплачены(ТаблицаЗадолженностей, Платежи), Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВсеНалогиОплачены(ТаблицаЗадолженностей, ВсеПлатежи)
	
	Если ТаблицаЗадолженностей.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ВсеПлатежи.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТаблицаНалоговПоПериодам = ТаблицаЗадолженностей.Выгрузить();
	ТаблицаНалоговПоПериодам.Свернуть("Период, ВидНалоговогоОбязательства", "Сумма");
	
	ФильтрПоиска = Новый Структура("ПоказательПериода, ВидНалоговогоОбязательства");

	Для каждого ТекСтрокаНалогов Из ТаблицаНалоговПоПериодам Цикл
		ВсегоНалога = ТекСтрокаНалогов.Сумма;
	
		ФильтрПоиска.ПоказательПериода = 
			ПлатежиВБюджетКлиентСервер.НалоговыйПериод(ТекСтрокаНалогов.Период,
				ПлатежиВБюджетКлиентСервер.ПериодичностьМесяц());
			
		ФильтрПоиска.ВидНалоговогоОбязательства = ТекСтрокаНалогов.ВидНалоговогоОбязательства;
		
		НайденныеСтроки = ВсеПлатежи.НайтиСтроки(ФильтрПоиска);
	
		ВсегоНалогаОплачено = 0;
		
		Для каждого ТекСтрокаПлатежей Из НайденныеСтроки Цикл
			
			ВсегоНалогаОплачено = ВсегоНалогаОплачено + ТекСтрокаПлатежей.Сумма;
		
		КонецЦикла;
		
		Если ВсегоНалога > ВсегоНалогаОплачено Тогда
			Возврат Ложь;
		КонецЕсли;
	
	КонецЦикла;

	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Функция БанковскийСчетОрганизации(Знач Организация)
	
	СчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
	
	УчетДенежныхСредствБП.УстановитьБанковскийСчет(
		СчетОрганизации,
		Организация,
		ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	Возврат СчетОрганизации;
	
КонецФункции

&НаКлиенте
Процедура ОповеститьОСозданныхДокументах(СозданныеДокументы)
	
	Если СозданныеДокументы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПервыйДокумент = СозданныеДокументы[0];
	ТипСозданныхДокументов = ТипЗнч(ПервыйДокумент);
	
	ОповеститьОбИзменении(ТипСозданныхДокументов);
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ЗадачиБухгалтера"));
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ЗаполнитьНачальныеПоказатели()
	
	ПорядокУплаты = ВыполнениеЗадачБухгалтера.ПорядокУплатыНалога(
		Объект.Организация, КонецМесяца(Объект.Период), Перечисления.ВидыНалогов.НалогНаПрофессиональныйДоход);
	
	Если ЗначениеЗаполнено(ПорядокУплаты.Правило) Тогда
		Правило = ПорядокУплаты.Правило;
		Срок    = ПорядокУплаты.Срок;
	Иначе
		Срок    = СрокУплатыНалогаПоУмолчанию(Объект.Период);
		Правило = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.НайтиПоИдентификатору(
			"НалогНаПрофессиональныйДоход", "2019_Уплата");
	КонецЕсли;
	
	ОтменитьФоновыеЗаданияНаСервере();
	
	ИнициализироватьДанныеПолучены(ЭтотОбъект);
	СообщениеОбОшибке = "";
	СообщениеОшибкиПодключения = "";
	ПоказыватьОшибкуРазныеАдреса = Ложь;
	СервисМойНалогПодключен = ПроверитьСостояниеПодключенияКСервисуМойНалог(Объект.Организация);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставлениеПериода(Форма)
	
	НачалоПериода = НачалоМесяца(Форма.Объект.Период);
	КонецПериода  = КонецМесяца(Форма.Объект.Период);
	
	Форма.ПредставлениеПериода = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(НачалоПериода, КонецПериода, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СрокУплатыНалогаПоУмолчанию(Период)
	
	СледующийМесяц = ДобавитьМесяц(НачалоМесяца(Период), 1);
	
	Возврат Дата(Год(СледующийМесяц), Месяц(СледующийМесяц), 25);
	
КонецФункции

&НаСервере
Функция ОтменитьФоновыеЗаданияНаСервере()
	
	Для Каждого ИдентификаторЗадания Из ИдентификаторыЗаданий Цикл
		Обработки.ПомощникУплатыНПД.ОтменитьФоновоеЗадание(ИдентификаторЗадания.Значение);
	КонецЦикла;
	
	ИдентификаторыЗаданий.Очистить();
	
КонецФункции

&НаСервере
Процедура ПроверитьРеквизитыОрганизации()
	СообщениеОбОшибке = "";

	РеквизитыЗаполнены = ОрганизацииФормыДляОтчетности.РеквизитыЗаполнены(
				Объект.Организация,
				ПроверяемыеРеквизитыДляОтчетности(),
				Неопределено);
	
	Если Не РеквизитыЗаполнены Тогда
		
		ТекстДействия = НСтр("ru= 'получить данные из налоговой инспекции'");
		СообщениеОбОшибке =
			ПроверкаРеквизитовОрганизации.СтрокаСообщенияНеЗаполненыРеквизитыДляОтчетности(Объект.Организация, ТекстДействия);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверяемыеРеквизитыДляОтчетности() Экспорт
	
	Реквизиты = Новый Массив;
	Реквизиты.Добавить("ИНН");
	Реквизиты.Добавить("ФамилияИП");
	Реквизиты.Добавить("ИмяИП");
	
	Возврат Реквизиты;
	
КонецФункции

&НаКлиенте
Процедура ОтправитьЗапросВСервисФНС()
	
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьСтатусФоновогоЗадания();
	ВыполнитьЗапросыОНачислениях()
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗапросыОНачислениях()
	
	ЗапросыОНачислениях = Новый Структура();
	ЗапросыОНачислениях.Вставить("ИнформацияОНачислениях", "ИнформацияОНачислениях");
	ЗапросыОНачислениях.Вставить("СостояниеЛицевогоСчета", "СостояниеЛицевогоСчета");
	ЗапросыОНачислениях.Вставить("СписокКвитанцийНаУплатуНалога", "СписокКвитанцийНаУплатуНалога");
	
	Возврат ЗапросыОНачислениях;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьСостояниеПодключенияКСервисуМойНалог(Знач Организация)

	СостояниеПодключения = РегистрыСведений.СостоянияИнтеграцииСПлатформойСамозанятые.ПолучитьСостояниеПодключения(Организация);
	
	Если СостояниеПодключения = Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.Подключено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

&НаКлиенте
Процедура ВыполнитьЗапросыОНачислениях()
	
	Если Не СервисМойНалогПодключен Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ТекущийЗапрос Из ЗапросыОНачислениях() Цикл
		
		ДлительнаяОперация = ВыполнитьПолучениеДанныхНаСервере(
			ПараметрыМетодаВзаимодействия(ТекущийЗапрос.Значение),
			УникальныйИдентификатор);
		
		Если ДлительнаяОперация = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДлительнаяОперация.Статус = "Выполняется" Тогда
			ИдентификаторыЗаданий.Добавить(ДлительнаяОперация.ИдентификаторЗадания);
		КонецЕсли;
		
		Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
			НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
			НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Запрос", ТекущийЗапрос.Значение);
			
			Обработчик = Новый ОписаниеОповещения("ПослеВыполненияМетодаВзаимодействия", ЭтотОбъект, ДополнительныеПараметры);
			ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
		Иначе
			ПоказатьОшибкуВыполненияМетодаВзаимодействия(ДлительнаяОперация);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибкуВыполненияМетодаВзаимодействия(ДлительнаяОперация)
	
	СообщениеОшибкиПодключения = ДлительнаяОперация.КраткоеПредставлениеОшибки;
	
	ЗаписатьОшибкуВЖурналРегистрации(СообщениеОшибкиПодключения);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыМетодаВзаимодействия(МетодВзаимодействия)
	
	ПараметрыМетода = 
		ИнтеграцияСПлатформойСамозанятыеКлиентСервер.НовыеПараметрыМетодаВзаимодействия(МетодВзаимодействия);
	
	ЗаполнитьЗначенияСвойств(ПараметрыМетода, ЭтотОбъект.Объект);
	
	Если МетодВзаимодействия = ЗапросыОНачислениях().СписокКвитанцийНаУплатуНалога Тогда
		ПараметрыМетода.НачалоПериода = НачалоМесяца(ДобавитьМесяц(Объект.Период, 1));
		ПараметрыМетода.КонецПериода = КонецМесяца(ДобавитьМесяц(Объект.Период, 1));
	КонецЕсли;
	
	Возврат ПараметрыМетода;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВыполнитьПолучениеДанныхНаСервере(Знач ПараметрыМетода, Знач ИдентификаторФормы)
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	НастройкиЗапуска.ОжидатьЗавершение = 0;
		
	Результат = ДлительныеОперации.ВыполнитьВФоне(
		"ИнтеграцияСПлатформойСамозанятые.ВыполнитьМетодВзаимодействияВФоне",
		ПараметрыМетода,
		НастройкиЗапуска);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПослеВыполненияМетодаВзаимодействия(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		
		ИдентификаторДанныеЗапроса = СтрШаблон("Запрос%1", ДополнительныеПараметры.Запрос);
		ЭтотОбъект[ИдентификаторДанныеЗапроса] = ПолучитьРезультатИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		Если ЗначениеЗаполнено(ЭтотОбъект[ИдентификаторДанныеЗапроса]) Тогда
			ВремяОжидания = ЭтотОбъект[ИдентификаторДанныеЗапроса].ВремяОжидания;
		Иначе 
			ВремяОжидания = 0;
		КонецЕсли;
		
		ПодключитьОбработчикОжидания(
			СтрШаблон("Подключаемый_ПолучитьРезультатВыполненияВФоне%1", ДополнительныеПараметры.Запрос),
			ВремяОжидания,
			Истина);
		
	Иначе
		ПоказатьОшибкуВыполненияМетодаВзаимодействия(ДлительнаяОперация);
		ОбновитьСтатусФоновогоЗадания();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРезультатИзВременногоХранилища(Знач АдресРезультата)
	
	Если ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		Возврат ПолучитьИзВременногоХранилища(АдресРезультата);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПолучитьРезультатВыполненияВФонеИнформацияОНачислениях()
	
	ДлительнаяОперация = ПолучитьРезультатВыполненияВФонеНаСервере(
		ЗапросИнформацияОНачислениях,
		УникальныйИдентификатор);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросыОНачислениях = ЗапросыОНачислениях();
	
	Если ДлительнаяОперация.Статус = "Выполняется" Тогда
		ИдентификаторыЗаданий.Добавить(ДлительнаяОперация.ИдентификаторЗадания);
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ТекстСообщения = СтатусФоновогоЗадания;
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Запрос", ЗапросыОНачислениях.ИнформацияОНачислениях);
		
		Обработчик = Новый ОписаниеОповещения("ПослеПолученияРезультатаВыполненияМетода", ЭтотОбъект, ДополнительныеПараметры);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
	Иначе
		ПоказатьОшибкуВыполненияМетодаВзаимодействия(ДлительнаяОперация);
	КонецЕсли;
	
	ОбновитьСтатусФоновогоЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолучитьРезультатВыполненияВФонеСостояниеЛицевогоСчета()
	
	ДлительнаяОперация = ПолучитьРезультатВыполненияВФонеНаСервере(
		ЗапросСостояниеЛицевогоСчета,
		УникальныйИдентификатор);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросыОНачислениях = ЗапросыОНачислениях();
	
	Если ДлительнаяОперация.Статус = "Выполняется" Тогда
		ИдентификаторыЗаданий.Добавить(ДлительнаяОперация.ИдентификаторЗадания);
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ТекстСообщения = СтатусФоновогоЗадания;
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Запрос", ЗапросыОНачислениях.СостояниеЛицевогоСчета);
		
		Обработчик = Новый ОписаниеОповещения("ПослеПолученияРезультатаВыполненияМетода", ЭтотОбъект, ДополнительныеПараметры);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
	Иначе
		ПоказатьОшибкуВыполненияМетодаВзаимодействия(ДлительнаяОперация);
	КонецЕсли;
	
	ОбновитьСтатусФоновогоЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолучитьРезультатВыполненияВФонеСписокКвитанцийНаУплатуНалога()
	
	ДлительнаяОперация = ПолучитьРезультатВыполненияВФонеНаСервере(
		ЗапросСписокКвитанцийНаУплатуНалога,
		УникальныйИдентификатор);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросыОНачислениях = ЗапросыОНачислениях();
	
	Если ДлительнаяОперация.Статус = "Выполняется" Тогда
		ИдентификаторыЗаданий.Добавить(ДлительнаяОперация.ИдентификаторЗадания);
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ТекстСообщения = СтатусФоновогоЗадания;
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("Запрос", ЗапросыОНачислениях.СписокКвитанцийНаУплатуНалога);
		
		Обработчик = Новый ОписаниеОповещения("ПослеПолученияРезультатаВыполненияМетода", ЭтотОбъект, ДополнительныеПараметры);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
	Иначе
		ПоказатьОшибкуВыполненияМетодаВзаимодействия(ДлительнаяОперация);
	КонецЕсли;
	
	ОбновитьСтатусФоновогоЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияРезультатаВыполненияМетода(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		ПоказатьОшибкуВыполненияМетодаВзаимодействия(ДлительнаяОперация);
	КонецЕсли;
	
	Ответ = ПолучитьРезультатИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
	
	Если Ответ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтатусыЗапросов = ИнтеграцияСПлатформойСамозанятыеКлиентСервер.СтатусыЗапросов();
	Если Ответ.Статус = СтатусыЗапросов.Выполнено Тогда
	
		ДанныеПолучены[ДополнительныеПараметры.Запрос] = Истина;
		ЗагрузитьПолученныеРезультаты(Ответ.Результат, ДополнительныеПараметры.Запрос);
		
		УправлениеФормой(ЭтотОбъект);
		
	ИначеЕсли Ответ.Статус = СтатусыЗапросов.Выполняется Тогда
		ПодключитьОбработчикОжидания(
			СтрШаблон("Подключаемый_ПолучитьРезультатВыполненияВФоне%1", ДополнительныеПараметры.Запрос),
			Ответ.ВремяОжидания,
			Истина);
	ИначеЕсли Ответ.Статус = СтатусыЗапросов.Ошибка Тогда
		СообщениеОшибкиПодключения = Ответ.Сообщение;
		ЗаписатьОшибкуВЖурналРегистрации(СообщениеОшибкиПодключения);
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
	ОбновитьСтатусФоновогоЗадания();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьОшибкуВЖурналРегистрации(ТекстОшибки)
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Помощник уплаты НПД'", ОбщегоНазначения.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка, , ,
		ТекстОшибки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРезультатВыполненияВФонеНаСервере(Знач Запрос, Знач ИдентификаторФормы)
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	НастройкиЗапуска.ДополнительныйРезультат = Запрос.ДополнительныйРезультат;
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
		"ИнтеграцияСПлатформойСамозанятые.ПолучитьРезультатВыполненияВФоне",
		Запрос,
		НастройкиЗапуска);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗагрузитьПолученныеРезультаты(Результат, МетодВзаимодействия)
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ЗапросыОНачислениях = ЗапросыОНачислениях();
	
	ТребуетсяВызовСервера = Ложь;
	Если МетодВзаимодействия = ЗапросыОНачислениях.ИнформацияОНачислениях Тогда
		
		Выручка = Результат.ОбщаяСуммаДоходов - Результат.ОбщаяСуммаВозвратов;
		
	ИначеЕсли МетодВзаимодействия = ЗапросыОНачислениях.СостояниеЛицевогоСчета Тогда
		
		СуммаЗадолженности = Результат.СуммаЗадолженности;
		
	ИначеЕсли МетодВзаимодействия = ЗапросыОНачислениях.СписокКвитанцийНаУплатуНалога Тогда
		
		АдресСпискаКвитанцийНаУплатуНалога = Результат.АдресВременногоХранилища;
		
		ТребуетсяВызовСервера = Истина;
		
	КонецЕсли;
	
	Если ТребуетсяВызовСервера Тогда
		ЗагрузитьПолученныеРезультатыНаСервере(Результат, МетодВзаимодействия);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПолученныеРезультатыНаСервере(Результат, МетодВзаимодействия)
	
	ЗапросыОНачислениях = ЗапросыОНачислениях();
	
	Если МетодВзаимодействия = ЗапросыОНачислениях.СписокКвитанцийНаУплатуНалога Тогда
		
		ЗаполнитьТаблицуЗадолженностиНаСервере();
		
		ЗаполнитьДокументыОплатыВТаблице();
		
		ПоказатьБаннерРазныеАдресаМестаЖительства(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуЗадолженностиНаСервере()
	
	Если Не ЭтоАдресВременногоХранилища(АдресСпискаКвитанцийНаУплатуНалога) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЗадолженностей.Очистить();
	
	ШаблонПериода = НСтр("ru = 'Налог за %1'");
	
	СписокКвитанций = СписокКвитанцийНаУплатуНалогаИзВременногоХранилища(АдресСпискаКвитанцийНаУплатуНалога);
	Для Каждого Квитанция Из СписокКвитанций Цикл
		
		Если Не Квитанция.Сумма > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Квитанция.ДатаОплаты) Тогда
			НалоговыйПериод = НачалоМесяца(Квитанция.ДатаОплаты) - 1;
		Иначе
			НалоговыйПериод = Объект.Период;
		КонецЕсли;
		
		НоваяСтрокаЗадолженности = ТаблицаЗадолженностей.Добавить();
		НоваяСтрокаЗадолженности.Период = НалоговыйПериод;
		НоваяСтрокаЗадолженности.Сумма = Квитанция.Сумма;
		НоваяСтрокаЗадолженности.ИдентификаторПлатежа = Квитанция.ИдентификаторПлатежа;
		НоваяСтрокаЗадолженности.ВидЗадолженности = СтрШаблон(ШаблонПериода, 
			НРег(ПредставлениеПериода(НачалоМесяца(НоваяСтрокаЗадолженности.Период), КонецМесяца(НоваяСтрокаЗадолженности.Период), "ФП=Истина")));
		НоваяСтрокаЗадолженности.ВидНалоговогоОбязательства =
			ПредопределенноеЗначение("Перечисление.ВидыПлатежейВГосБюджет.Налог");
		
	КонецЦикла;
	
	ЗаполнитьГруппуЗадолженностьНаФорме();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПоказатьБаннерРазныеАдресаМестаЖительства(Форма)
	
	Форма.ПоказыватьОшибкуРазныеАдреса = ВидимостьБаннераРазныеАдресаМестаЖительства(
		Форма.Объект.Организация, Форма.АдресСпискаКвитанцийНаУплатуНалога);
	
	УправлениеФормой(Форма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидимостьБаннераРазныеАдресаМестаЖительства(Знач Организация, Знач АдресСпискаКвитанцийНаУплатуНалога)
	
	ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
	
	АдресВБазе = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияНаДату(Организация, ВидКонтактнойИнформации);
	
	// В базе не заполнен адрес, дальнейшая проверка бессмысленна.
	Если ПустаяСтрока(АдресВБазе.Представление) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СписокКвитанций = СписокКвитанцийНаУплатуНалогаИзВременногоХранилища(АдресСпискаКвитанцийНаУплатуНалога);
	Если Не ЗначениеЗаполнено(СписокКвитанций) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	АдресИзСервиса = СписокКвитанций[0].АдресМестаЖительства;
	
	ИНН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ИНН");
	СохраненныйАдресИзСервиса = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"СамозанятыеАдресМестаЖительстваИзСервиса", ИНН, "");
	Если ЗначениеЗаполнено(СохраненныйАдресИзСервиса)
		И СохраненныйАдресИзСервиса = АдресИзСервиса Тогда
		// Пользователь намеренно скрыл баннер с предупреждением и адрес в сервисе не менялся.
		Возврат Ложь;
	КонецЕсли;
	
	АдресИзСервисаJSON = 
		УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(АдресИзСервиса, ВидКонтактнойИнформации);
	
	ДопПараметрыСведений = Новый Структура("НаименованиеВключаетСокращение", Ложь);
	АдресВБазеСведения = РаботаСАдресами.СведенияОбАдресе(АдресВБазе.Значение, ДопПараметрыСведений);
	АдресИзСервисаСведения = РаботаСАдресами.СведенияОбАдресе(АдресИзСервисаJSON, ДопПараметрыСведений);
	
	Если Не АдресИзСервисаСведения.ТипАдреса = УправлениеКонтактнойИнформациейКлиентСервер.АдресВСвободнойФорме() Тогда
		// Поля "Страна" и "КодСтраны" не заполняются при распознавании адреса.
		АдресИзСервисаСведения.Страна = АдресВБазеСведения.Страна;
		АдресИзСервисаСведения.КодСтраны = АдресВБазеСведения.КодСтраны;
		
		// Приведем адреса к общему формату.
		АдресВБазеСведения.ТипАдреса = РаботаСАдресамиКлиентСервер.МуниципальныйАдрес();
		АдресИзСервисаСведения.ТипАдреса = РаботаСАдресамиКлиентСервер.МуниципальныйАдрес();
		АдресДляСравнения1 = РаботаСАдресами.ПоляАдресаВJSON(АдресВБазеСведения);
		АдресДляСравнения2 = РаботаСАдресами.ПоляАдресаВJSON(АдресИзСервисаСведения);
	Иначе
		АдресДляСравнения1 = АдресВБазе.Значение;
		АдресДляСравнения2 = АдресИзСервисаJSON;
	КонецЕсли;
	
	ПоказыватьОшибкуРазныеАдреса = Не УправлениеКонтактнойИнформациейБП.СравнитьАдреса(АдресДляСравнения1, АдресДляСравнения2);
	
	Возврат ПоказыватьОшибкуРазныеАдреса;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПоказателиЗадолженностиНаФорме(Форма)
	
	Объект = Форма.Объект;
	
	Элементы = Форма.Элементы;
	Задолженность = Форма.ТаблицаЗадолженностей;;
	
	Форма.ВсегоКУплате = Задолженность.Итог("Сумма");
	Элементы.ТекстНалогЗаПредыдущиеПериоды.Заголовок = ТекстЗадолженностьПоНалогуЗаПредыдущиеПериоды(Форма.СуммаЗадолженности);
	
	Задолженность.Сортировать("Период, ВидЗадолженности");
	
	Если Задолженность.Количество() > 1 Тогда
	
		ИндексЗадолженности = 0;
		Для каждого ТекСтрокаЗадолженность Из Задолженность Цикл
			ИндексЗадолженности = ИндексЗадолженности + 1;
			
			Элементы[СтрШаблон("ГруппаДолг%1", ИндексЗадолженности)].Видимость = Истина;
			
			НаименованиеЭлемента = СтрШаблон("ДекорацияДолг%1", ИндексЗадолженности);
			Элементы[НаименованиеЭлемента].Заголовок = ТекСтрокаЗадолженность.ВидЗадолженности;
			
			НаименованиеЭлемента = СтрШаблон("ДекорацияСумма%1", ИндексЗадолженности);
			Элементы[НаименованиеЭлемента].Заголовок = Формат(ТекСтрокаЗадолженность.Сумма, "ЧДЦ=2; ЧН=0,00");
			
		КонецЦикла;
		
	Иначе
		
		Элементы.Задолженность.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекстЗадолженностьПоНалогуЗаПредыдущиеПериоды(Задолженность)
	
	ТекстСообщения = СтрШаблон(
		НСтр("ru = 'Не оплачена задолженность <b>%1</b> по налогу за предыдущие периоды'"),
		ОбщегоНазначенияБПВызовСервера.ФорматСумм(Задолженность));
	
	Возврат СтроковыеФункцииКлиентСервер.ФорматированнаяСтрока(ТекстСообщения);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьКнопкиОплаты(Форма, ДоступностьКнопок)

	Элементы = Форма.Элементы;
	
	Элементы.ОплатитьЧерезБанк.Доступность = Не ДоступностьКнопок;
	Элементы.ОплатитьЧерезКассу.Доступность = Не ДоступностьКнопок;
	УстановитьВидКнопкиПоУмолчанию(Форма, Элементы.ОплатитьЧерезБанк,  Не ДоступностьКнопок);
	УстановитьВидКнопкиПоУмолчанию(Форма, Элементы.ОплатитьЧерезКассу, Не ДоступностьКнопок);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГруппуЗадолженностьНаФорме()

	// Перед добавлением новых элементов формы и реквизитов
	// будут удалены ранее добавленные элементы и реквизиты.
	Для каждого ИмяЭлемента Из ДанныеПодключения.НовыеЭлементыФормы Цикл
		Элементы.Удалить(Элементы[ИмяЭлемента]);
	КонецЦикла;
	
	ДанныеПодключения.НовыеЭлементыФормы = Новый Массив;
	
	КоличествоСтрокЗадолженности = ТаблицаЗадолженностей.Количество();
	
	Если КоличествоСтрокЗадолженности <= 1 Тогда
		Возврат ;
	КонецЕсли;
	
	Для ИндексЗадолженности = 1 По КоличествоСтрокЗадолженности Цикл
		ДобавитьНовуюГруппуЭлементовДолга(ИндексЗадолженности);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ДобавитьНовуюГруппуЭлементовДолга(ИндексЗадолженности)

	// Создание новых элементов форм.
	ГруппаФормыЗадолженность  = Элементы.Задолженность;

	ШаблонНазванияГруппыДолг = НСтр("ru = 'ГруппаДолг%1'");
	НазваниеГруппаДолг = СтрШаблон(ШаблонНазванияГруппыДолг, ИндексЗадолженности);
	ГруппаГруппаДолг = Элементы.Добавить(НазваниеГруппаДолг, Тип("ГруппаФормы"), ГруппаФормыЗадолженность);
	ГруппаГруппаДолг.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаГруппаДолг.Отображение         = ОтображениеОбычнойГруппы.Нет;
	ГруппаГруппаДолг.ОтображатьЗаголовок = Ложь;
	ГруппаГруппаДолг.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	ГруппаГруппаДолг.Объединенная = Ложь;
	ДанныеПодключения.НовыеЭлементыФормы.Добавить(ГруппаГруппаДолг.Имя);
	
	// Создание ГруппаОсновногоДолга
	ШаблонНазванияГруппаОсновногоДолга = НСтр("ru = 'ГруппаОсновногоДолга%1'");
	НазваниеГруппаОсновногоДолга = СтрШаблон(ШаблонНазванияГруппаОсновногоДолга, ИндексЗадолженности);
	ГруппаОсновногоДолга = Элементы.Добавить(НазваниеГруппаОсновногоДолга, Тип("ГруппаФормы"), ГруппаГруппаДолг);
	ГруппаОсновногоДолга.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаОсновногоДолга.Отображение         = ОтображениеОбычнойГруппы.Нет;
	ГруппаОсновногоДолга.ОтображатьЗаголовок = Ложь;
	ГруппаОсновногоДолга.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	ГруппаОсновногоДолга.Ширина = 25;
	ГруппаОсновногоДолга.РастягиватьПоГоризонтали = Ложь;
	ГруппаОсновногоДолга.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Низ;
	ГруппаОсновногоДолга.Объединенная = Истина;

	ШаблонНазванияДекорацияДолг = НСтр("ru = 'ДекорацияДолг%1'");
	НазваниеДекорацияДолг = СтрШаблон(ШаблонНазванияДекорацияДолг, ИндексЗадолженности);
	НовыйЭлемент = Элементы.Добавить(НазваниеДекорацияДолг, Тип("ДекорацияФормы"), ГруппаОсновногоДолга);
	НовыйЭлемент.Вид        = ВидДекорацииФормы.Надпись;
	НовыйЭлемент.Заголовок  = "";
	НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
	НовыйЭлемент.РастягиватьПоГоризонтали = Истина;
	НовыйЭлемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;

	ШаблонНазванияДекорацияСумма = НСтр("ru = 'ДекорацияСумма%1'");
	НазваниеДекорацияСумма = СтрШаблон(ШаблонНазванияДекорацияСумма, ИндексЗадолженности);
	НовыйЭлемент = Элементы.Добавить(НазваниеДекорацияСумма, Тип("ДекорацияФормы"), ГруппаОсновногоДолга);
	НовыйЭлемент.Вид        = ВидДекорацииФормы.Надпись;
	НовыйЭлемент.Заголовок  = "0,00";
	НовыйЭлемент.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
	
	// Создание ГруппаПлатежСОтступом
	ШаблонНазванияГруппаПлатежСОтступом = НСтр("ru = 'ГруппаПлатежСОтступом%1'");
	НазваниеГруппаПлатежСОтступом = СтрШаблон(ШаблонНазванияГруппаПлатежСОтступом, ИндексЗадолженности);
	ГруппаПлатежСОтступом = Элементы.Добавить(НазваниеГруппаПлатежСОтступом, Тип("ГруппаФормы"), ГруппаГруппаДолг);
	ГруппаПлатежСОтступом.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаПлатежСОтступом.Отображение         = ОтображениеОбычнойГруппы.Нет;
	ГруппаПлатежСОтступом.ОтображатьЗаголовок = Ложь;
	ГруппаПлатежСОтступом.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаПлатежСОтступом.Объединенная        = Ложь;
	ГруппаПлатежСОтступом.РастягиватьПоГоризонтали = Истина;
	
	ШаблонНазванияДекорацияДокументОплаты = НСтр("ru = 'ДекорацияДокументОплаты%1'");
	НазваниеДекорацияДокументОплаты = СтрШаблон(ШаблонНазванияДекорацияДокументОплаты, ИндексЗадолженности);
	НовыйЭлемент = Элементы.Добавить(НазваниеДекорацияДокументОплаты, Тип("ДекорацияФормы"), ГруппаПлатежСОтступом);
	НовыйЭлемент.Вид        = ВидДекорацииФормы.Надпись;
	НовыйЭлемент.Заголовок  = "";
	НовыйЭлемент.АвтоМаксимальнаяШирина = Ложь;
	НовыйЭлемент.ВертикальноеПоложениеВГруппе = ВертикальноеПоложениеЭлемента.Низ;
	НовыйЭлемент.УстановитьДействие("ОбработкаНавигационнойСсылки", "ДекорацияДокументОплатыОбработкаНавигационнойСсылки");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидКнопкиПоУмолчанию(Форма, Элемент, КнопкаПоУмолчанию)
	
	ЖирныйШрифт = КнопкаПоУмолчанию;
	Шрифт = Новый Шрифт(Элемент.Шрифт, , , ЖирныйШрифт);
	
	Элемент.Шрифт    = Шрифт;
	Элемент.ЦветФона = ?(КнопкаПоУмолчанию, Форма.ЦветПодсветки, Новый Цвет);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	ДанныеПолучены = Форма.ДанныеПолучены;
	
	Если Не Форма.СервисМойНалогПодключен
		ИЛИ ЗначениеЗаполнено(Форма.СообщениеОшибкиПодключения) Тогда
	
		Элементы.СтраницаСобытийРабочая.Видимость = Ложь;
		Элементы.СтраницаСобытийПустая.Видимость = Ложь;
		Элементы.СтраницаРасчетНедоступен.Видимость = Ложь;
		Элементы.СтраницаОшибкаПодключенияДанных.Видимость = Истина;
		Элементы.ДекорацияНетПодключения.Видимость = Не Форма.СервисМойНалогПодключен;
		Элементы.ДекорацияОшибкаПодключения.Видимость = Форма.СервисМойНалогПодключен;

	ИначеЕсли ЗначениеЗаполнено(Форма.СообщениеОбОшибке) Тогда
		
		Элементы.СтраницаСобытийРабочая.Видимость = Ложь;
		Элементы.СтраницаСобытийПустая.Видимость = Ложь;
		Элементы.СтраницаРасчетНедоступен.Видимость = Истина;
		Элементы.СтраницаОшибкаПодключенияДанных.Видимость = Ложь;
	
	ИначеЕсли ВсеДанныеПолучены(ДанныеПолучены) Тогда
		
		Элементы.СтраницаСобытийРабочая.Видимость = Истина;
		Элементы.СтраницаСобытийПустая.Видимость = Ложь;
		Элементы.СтраницаРасчетНедоступен.Видимость = Ложь;
		Элементы.СтраницаОшибкаПодключенияДанных.Видимость = Ложь;
		
		ОбновитьПоказателиЗадолженностиНаФорме(Форма);

	Иначе

		Элементы.СтраницаСобытийРабочая.Видимость = Ложь;
		Элементы.СтраницаСобытийПустая.Видимость = Истина;
		Элементы.СтраницаРасчетНедоступен.Видимость = Ложь;
		Элементы.СтраницаОшибкаПодключенияДанных.Видимость = Ложь;
		
	КонецЕсли;

	Элементы.СрокиОплаты.Видимость = ЗначениеЗаполнено(Форма.Срок);
	ШаблонСрока = НСтр("ru = 'Срок оплаты налога до %1'");
	Элементы.СрокиОплаты.Заголовок = СтрШаблон(ШаблонСрока, Формат(Форма.Срок, "ДЛФ=DD"));

	Элементы.ГруппаНалогЗаПредыдущиеПериоды.Видимость = ВсеДанныеПолучены(ДанныеПолучены)
		И ПоказыватьБаннерПоЗадолженности(Форма.СуммаЗадолженности, Форма.Срок);
	
	Элементы.ГруппаСообщениеОбОшибкеРазныеАдреса.Видимость = ВсеДанныеПолучены(Форма.ДанныеПолучены)
		И Форма.ПоказыватьОшибкуРазныеАдреса;
	
	ОбновитьКнопкиОплаты(Форма, Форма.ВсеНалогиОплачены);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПоказыватьБаннерПоЗадолженности(Задолженность, СрокУплаты)
	Возврат Задолженность > 0 И СрокУплаты >= НачалоМесяца(ТекущаяДатаСеанса());
КонецФункции

&НаКлиенте
Функция ОбновитьСтатусФоновогоЗадания()
	
	СтатусФоновогоЗадания = НСтр("ru = 'Получение данных из налоговой инспекции...'");
	
КонецФункции

&НаКлиенте
Процедура УдалитьПлатежныйДокументИзКоллекцииПлатежейЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Элементы[ДополнительныеПараметры.НаименованиеЭлементаРазмещения].Заголовок = "";
		УдалитьДокументУплаты(ДополнительныеПараметры.ДокументУплатыДляУдаления);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДокументУплаты(ДокументУплатыДляУдаления)
	
	ДокументУплатыОбъект = ДокументУплатыДляУдаления.ПолучитьОбъект();
	ДокументУплатыОбъект.УстановитьПометкуУдаления(Истина);
	
	НайтиПлатежиСвязанныеСЗадачей();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоНПД(Знач Налог)
	
	ВидНалога = ОбщегоНаЗначения.ЗначениеРеквизитаОбъекта(Налог, "ВидНалога");
	
	Возврат ВидНалога = Перечисления.ВидыНалогов.НалогНаПрофессиональныйДоход;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИнициализироватьДанныеПолучены(Форма)
	
	Запросы = ЗапросыОНачислениях();
	
	Форма.ДанныеПолучены = Новый Структура;
	Форма.ДанныеПолучены.Вставить(Запросы.ИнформацияОНачислениях, Ложь);
	Форма.ДанныеПолучены.Вставить(Запросы.СписокКвитанцийНаУплатуНалога, Ложь);
	Форма.ДанныеПолучены.Вставить(Запросы.СостояниеЛицевогоСчета, Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВсеДанныеПолучены(ДанныеПолучены)
	
	Если ТипЗнч(ДанныеПолучены) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для каждого КлючЗначение Из ДанныеПолучены Цикл
		Если Не КлючЗначение.Значение = Истина Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьВНастройкахАдресМестаЖительстваИзСервиса(Знач Организация, Знач АдресСпискаКвитанцийНаУплатуНалога)
	
	СписокКвитанций = СписокКвитанцийНаУплатуНалогаИзВременногоХранилища(АдресСпискаКвитанцийНаУплатуНалога);
	Если Не ЗначениеЗаполнено(СписокКвитанций) Тогда
		Возврат;
	КонецЕсли;
	
	ИНН = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ИНН");
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"СамозанятыеАдресМестаЖительстваИзСервиса", ИНН, СписокКвитанций[0].АдресМестаЖительства);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокКвитанцийНаУплатуНалогаИзВременногоХранилища(АдресХранилища)
	
	Перем ТаблицаКвитанций;
	
	Если Не ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СписокКвитанций = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(СписокКвитанций) <> Тип("Структура") Или Не СписокКвитанций.Свойство("СписокКвитанций", ТаблицаКвитанций) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(ТаблицаКвитанций) <> Тип("ТаблицаЗначений") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ТаблицаКвитанций;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьПериод(ТекущийПериод, КоличествоМесяцев = 0)
	
	Объект.Период = КонецМесяца(ДобавитьМесяц(ТекущийПериод, КоличествоМесяцев));
	
	ОбновитьПредставлениеПериода(ЭтотОбъект);
	
	ПодключитьОбработчикОжидания("Подключаемый_ПриИзмененииПериода", 0.5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииПериода()
	
	ВыполнениеЗадачБухгалтера = Ложь;
	
	ЗаполнитьНачальныеПоказатели();
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьРеквизитыОрганизации();
	УправлениеФормой(ЭтотОбъект);
	ОтправитьЗапросВСервисФНС();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииПериода()
	
	ПриИзмененииПериода();
	
КонецПроцедуры

#КонецОбласти
