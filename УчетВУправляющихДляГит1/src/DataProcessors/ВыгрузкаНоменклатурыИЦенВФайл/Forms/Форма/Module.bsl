&НаКлиенте
Перем ПараметрыОбработчикаОжидания, ФормаДлительнойОперации;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИспользоватьТипыЦен = ПолучитьФункциональнуюОпцию("ИспользоватьТипыЦенНоменклатуры");
	
	Схема = Обработки.ВыгрузкаНоменклатурыИЦенВФайл.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	Если НЕ ИспользоватьТипыЦен Тогда
		ПоляНаборДанных = Схема.НаборыДанных.НоменклатураСЦенами.Поля;
		ПолеТипЦен = ПоляНаборДанных.Найти("ТипЦен");
		ПолеТипЦен.ОграничениеИспользования.Условие = Истина;
		ПолеТипЦен.ОграничениеИспользованияРеквизитов.Условие = Истина;
	КонецЕсли;
	
	СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(Схема, УникальныйИдентификатор);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	УстановитьНастройкиФормы(Схема);
	
	УстановитьПредставлениеОтбора(ЭтотОбъект);
	УстановитьПредставлениеСпискаКолонок(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ОтменяемыеЗадания = ЗаданияОтменяемыеПриЗакрытииФормы();
	
	ИдентификаторыОтменяемыхЗаданий = Новый Массив;
	Для каждого РеквизитФормы Из ОтменяемыеЗадания Цикл
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ЭтотОбъект, РеквизитФормы)
		   И ЗначениеЗаполнено(ЭтотОбъект[РеквизитФормы]) Тогда
			ИдентификаторыОтменяемыхЗаданий.Добавить(ЭтотОбъект[РеквизитФормы]);
		КонецЕсли;
	КонецЦикла; 
	
	Если ИдентификаторыОтменяемыхЗаданий.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОтменитьВыполнениеЗаданий(ИдентификаторыОтменяемыхЗаданий);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НастроитьКолонкиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СхемаКомпоновкиДанных"    , СхемаКомпоновкиДанных);
	ПараметрыФормы.Вставить("ИсключенныеПоля"          , ПолучитьЗапрещенныеПоля());
	ПараметрыФормы.Вставить("АдресХранилищаДопНастроек", АдресСпискаПолейВоВременномХранилище());
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("НастроитьКолонкиНажатиеЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ВыгрузкаНоменклатурыИЦенВФайл.Форма.ФормаКолонки", ПараметрыФормы,,,,,ОповещениеОЗакрытии);

КонецПроцедуры

&НаКлиенте
Процедура НастроитьКолонкиНажатиеЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ЭтоАдресВременногоХранилища(РезультатЗакрытия) Тогда
		ПолучитьДополнительныеПоляИзХранилища(РезультатЗакрытия);
		УстановитьПредставлениеСпискаКолонок(ЭтотОбъект);
		НастройкиМодифицированы = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтборыНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СхемаКомпоновкиДанных", СхемаКомпоновкиДанных);
	ПараметрыФормы.Вставить("Настройки"            , КомпоновщикНастроек.Настройки);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Форма", ЭтотОбъект);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("НастроитьОтборыНажатиеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Обработка.ВыгрузкаНоменклатурыИЦенВФайл.Форма.ФормаОтбор", ПараметрыФормы,,,,,ОповещениеОЗакрытии);

КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтборыНажатиеЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Настройки = Неопределено;
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") И РезультатЗакрытия.Свойство("Настройки", Настройки) Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
		УстановитьПредставлениеОтбора(ЭтотОбъект);
		НастройкиМодифицированы = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыгрузитьФайл(Команда)
	
	ЗапуститьФормированиеФайла();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредставлениеСпискаКолонок(Форма)
	
	Представление = НСтр("ru = 'Наименование'");
	Для Каждого Поле Из Форма.ДополнительныеПоля Цикл
		Представление = Представление +", " + Поле.Представление;
	КонецЦикла;
	
	Форма.ТекстКолонки = Представление;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПредставлениеОтбора(Форма)
	
	Настройки = Форма.КомпоновщикНастроек.Настройки;
	Представление =Строка(Настройки.Отбор);
	
	Форма.ТекстОтборы = ?(Представление = "", НСтр("ru = 'Без отбора'"), Представление);

КонецПроцедуры

&НаСервере
Процедура УстановитьСписокКолонокПоУмолчанию()
	
	ОтборСтрок = Новый Структура("Поле", "Номенклатура.Артикул");
	МассивСтрок = ДополнительныеПоля.НайтиСтроки(ОтборСтрок);
	Если МассивСтрок.Количество() = 0 Тогда
		НоваяСтрока = ДополнительныеПоля.Добавить();
		НоваяСтрока.Поле = "Номенклатура.Артикул";
		НоваяСтрока.Представление = "Артикул";
	КонецЕсли;
	
	ОтборСтрок = Новый Структура("Поле", "Номенклатура.ЕдиницаИзмерения");
	МассивСтрок = ДополнительныеПоля.НайтиСтроки(ОтборСтрок);
	Если МассивСтрок.Количество() = 0 Тогда
		НоваяСтрока = ДополнительныеПоля.Добавить();
		НоваяСтрока.Поле = "Номенклатура.ЕдиницаИзмерения";
		НоваяСтрока.Представление = "Единица измерения";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиФормы()
	
	КоллекцияПолей = Новый СписокЗначений;
	
	Для Каждого ОписаниеПоля из ДополнительныеПоля Цикл
		КоллекцияПолей.Добавить(ОписаниеПоля.Поле, ОписаниеПоля.Представление);
	КонецЦикла;
	
	КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ДополнительныеПоля",  КоллекцияПолей);
	КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ИспользоватьТипыЦен", ИспользоватьТипыЦен);
	ХранилищеОбщихНастроек.Сохранить("ВыгрузкаНоменклутарыИЦенВФайл", "Настройки",       КомпоновщикНастроек.Настройки, "Настройки");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьНастройкиФормы(Схема)
	
	Настройки = ХранилищеОбщихНастроек.Загрузить("ВыгрузкаНоменклутарыИЦенВФайл", "Настройки");
	КоллекцияПолей = Неопределено;
	
	Если Настройки <> Неопределено Тогда
		Если Настройки.ДополнительныеСвойства.Свойство("ДополнительныеПоля", КоллекцияПолей) Тогда
		
			Для Каждого ОписаниеПоля из КоллекцияПолей Цикл
				НовоеПоле = ДополнительныеПоля.Добавить();
				НовоеПоле.Поле = ОписаниеПоля.Значение;
				НовоеПоле.Представление = ОписаниеПоля.Представление;
			КонецЦикла;
		
		КонецЕсли;
		
		ИспользоватьТипыЦенИзНастроек = "";
		Если Настройки.ДополнительныеСвойства.Свойство("ИспользоватьТипыЦен", ИспользоватьТипыЦенИзНастроек)
			И ИспользоватьТипыЦен <> ИспользоватьТипыЦенИзНастроек
			И ИспользоватьТипыЦен Тогда
			
			ЭлементыОтбора = Настройки.Отбор.Элементы;
			ПолеТипЦен = Новый ПолеКомпоновкиДанных("ТипЦен");
			ПолеТипЦенНайдено = Ложь;
			Для Каждого Элемент Из ЭлементыОтбора Цикл
				Если ТипЗнч(Элемент) = Тип("ЭлементОтбораКомпоновкиДанных") И Элемент.ЛевоеЗначение = ПолеТипЦен Тогда
					ПолеТипЦенНайдено = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Не ПолеТипЦенНайдено Тогда
				НовоеПоле = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				НовоеПоле.ЛевоеЗначение = ПолеТипЦен;
				НовоеПоле.Использование = Ложь;
			КонецЕслИ;
			
		КонецЕслИ;
		
	Иначе
		Если ИспользоватьТипыЦен Тогда
			ВариантНастроек = Схема.ВариантыНастроек.НоменклатураИЦены;
		Иначе
			ВариантНастроек = Схема.ВариантыНастроек.НоменклатураБезЦен;
		КонецЕсли;
		Настройки = ВариантНастроек.Настройки;
		УстановитьСписокКолонокПоУмолчанию();
	КонецЕсли;
	
	КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
	КомпоновщикНастроек.Восстановить();
	
КонецПроцедуры

&НаСервере
Функция АдресСпискаПолейВоВременномХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(ДополнительныеПоля.Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ПолучитьДополнительныеПоляИзХранилища(АдресХранилищаДопНастроек)
	
	ДопПоля = ПолучитьИзВременногоХранилища(АдресХранилищаДопНастроек);
	ДополнительныеПоля.Загрузить(ДопПоля);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗапрещенныеПоля()
	
	СписокПолей = Новый Массив;
	
	СписокПолей.Добавить("UserFields");
	СписокПолей.Добавить("DataParameters");
	СписокПолей.Добавить("SystemFields");
	СписокПолей.Добавить("Период");
	СписокПолей.Добавить("УИД");
	СписокПолей.Добавить("ТипЦен");
	СписокПолей.Добавить("Цена");
	
	Возврат Новый ФиксированныйМассив(СписокПолей);
	
КонецФункции

#Область ПодготовитьДанные

&НаКлиенте
Процедура ЗапуститьФормированиеФайла()
	
	ОчиститьСообщения();
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	РезультатВыполнения = ПодготовитьДанныеДляВыгрузкиНаСервере();
	Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
	Иначе
		ИдентификаторЗадания = Неопределено;
		ЗаписатьДанныеВФайлИОткрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

// Формирует список имен реквизитов формы отчета, содержащих идентификаторы фоновых заданий,
// которые нужно отменить при закрытии обработки.
//
&НаКлиенте
Функция ЗаданияОтменяемыеПриЗакрытииФормы()
	
	ОтменяемыеЗадания = Новый Массив;
	ОтменяемыеЗадания.Добавить("ИдентификаторЗадания");
	ОтменяемыеЗадания.Добавить("ИдентификаторЗаданияАктуализации");
	
	Возврат ОтменяемыеЗадания;
	
КонецФункции

&НаСервере
Процедура ОтменитьВыполнениеЗаданий(ИдентификаторыОтменяемыхЗаданий) Экспорт
	
	Для каждого ИдентификаторЗадания Из ИдентификаторыОтменяемыхЗаданий Цикл
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			ИдентификаторЗадания = Неопределено;
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			ЗаписатьДанныеВФайлИОткрыть();
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьДанныеДляВыгрузкиНаСервере()
	
	Если НастройкиМодифицированы Тогда
		СохранитьНастройкиФормы();
	КонецЕсли;
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	ПараметрыПолученияДанных = ПодготовитьПараметрыНаСервере();
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор, 
		"Обработки.ВыгрузкаНоменклатурыИЦенВФайл.ПодготовитьДанныеДляВыгрузки", 
		ПараметрыПолученияДанных, 
		"Выполнение обработки: " + Заголовок);
		
	АдресХранилища       = РезультатВыполнения.АдресХранилища;
	ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Функция ПодготовитьПараметрыНаСервере()
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("ДополнительныеПоля"               , ДополнительныеПоля.Выгрузить());
	ПараметрыОтчета.Вставить("СхемаКомпоновкиДанных"            , ПолучитьИзВременногоХранилища(СхемаКомпоновкиДанных));
	ПараметрыОтчета.Вставить("НастройкиКомпоновкиДанных"        , КомпоновщикНастроек.ПолучитьНастройки());
	
	Возврат ПараметрыОтчета;
	
КонецФункции

#КонецОбласти

#Область ЗаписатьИОткрытьФайл

&НаСервере
Функция ПодготовитьФайл(ИмяПапки, ИмяФайла)
	
	ПолноеИмяФайла = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяПапки) + ИмяФайла;
	
	// записываем документ во временную папку
	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	РезультатВыполнения.Результат.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.XLS97);
	
	Возврат ПолноеИмяФайла;
	
КонецФункции

&НаКлиенте
Процедура ЗаписатьДанныеВФайлИОткрыть()
	
	ОписаниеФайла = ПоместитьФайлВоВременноеХранилищеНаСервере();
	
	ТекстСообщения = НСтр("ru = 'Для сохранения файлов рекомендуется установить расширение для веб-клиента 1С:Предприятие.'");
	Обработчик = Новый ОписаниеОповещения("ВыгрузитьВФайлЗавершение", ЭтотОбъект, ОписаниеФайла);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик, ТекстСообщения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВФайлЗавершение(Подключено, ОписаниеФайла) Экспорт
	
	Если Не Подключено Тогда
		ПолучитьФайл(ОписаниеФайла.АдресВоВременномХранилище, ОписаниеФайла.Представление, Истина);
		Закрыть();
		Возврат;
	КонецЕсли;
	
	ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогСохраненияФайла.ПолноеИмяФайла = ОписаниеФайла.Представление;
	ДиалогСохраненияФайла.Фильтр = НСтр("ru = 'Лист Excel|*.xls'");
	ДиалогСохраненияФайла.МножественныйВыбор = Ложь;
	ДиалогСохраненияФайла.Заголовок = НСтр("ru = 'Укажите файл'");
	
	Обработчик = Новый ОписаниеОповещения("ВыгрузитьФайлВыборФайла", ЭтотОбъект, ОписаниеФайла);
	ДиалогСохраненияФайла.Показать(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлВыборФайла(ВыбранныеФайлы, ОписаниеФайла) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		
		ПолноеИмяФайла = ВыбранныеФайлы[0];
		
		ПолучаемыеФайлы = Новый Массив;
		ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ПолноеИмяФайла, ОписаниеФайла.АдресВоВременномХранилище));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьФайлВыборФайлаЗавершение", ЭтотОбъект, ОписаниеФайла);
		
		НачатьПолучениеФайлов(ОписаниеОповещения, ПолучаемыеФайлы, ПолноеИмяФайла, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлВыборФайлаЗавершение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт

	Если ПолученныеФайлы = Неопределено Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'При сохранении возникла ошибка'"));
	Иначе
		// Открыть Файл
		ИмяОткрываемогоФайла = ПолученныеФайлы[0].Имя;
		СистемнаяИнфо = Новый СистемнаяИнформация;
		Если СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 Или СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
			ИмяОткрываемогоФайла = СтрЗаменить(ИмяОткрываемогоФайла, "/", "\");
		КонецЕсли;
		
		ОповещениеОЗапуске = Новый ОписаниеОповещения("ЗавершитьЗаписатьДанныеВФайлИОткрыть", ЭтотОбъект);
		НачатьЗапускПриложения(ОповещениеОЗапуске, ИмяОткрываемогоФайла);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УдалитьВременныйФайлНаСервер(ИмяФайла)

	Если НЕ ЗначениеЗаполнено(ИмяФайла) Тогда
		Возврат;
	КонецЕсли;

	// Удалим временный файл.
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
		СведенияОбОшибке = ИнформацияОбОшибке();
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось удалить временный файл по причине: %1'"),
			ПодробноеПредставлениеОшибки(СведенияОбОшибке));
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Шаблоны договоров. Сохранение текста договора.'", 
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка, , , 
			ТекстСообщения);
	КонецПопытки;

КонецПроцедуры

&НаСервере
Функция ПоместитьФайлВоВременноеХранилищеНаСервере()
	
	Папка = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(Папка);
	
	ИмяФайла = НСтр("ru = 'Номенклатура и цены.xls'") ;
	
	ПолноеИмяФайла = ПодготовитьФайл(Папка, ИмяФайла);
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла);
	ПутьВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	ОписаниеФайла = Новый Структура;
	ОписаниеФайла.Вставить("Представление", ИмяФайла);
	ОписаниеФайла.Вставить("АдресВоВременномХранилище", ПутьВоВременномХранилище);

	УдалитьВременныйФайлНаСервер(Папка);
	
	Возврат ОписаниеФайла;

КонецФункции

&НаКлиенте
Процедура ЗавершитьЗаписатьДанныеВФайлИОткрыть(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти