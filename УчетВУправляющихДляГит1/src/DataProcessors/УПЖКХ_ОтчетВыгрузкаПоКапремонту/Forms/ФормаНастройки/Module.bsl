
/////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ВспомогательныеПроцедурыИФункции

&НаСервере
// Устанавливает заголовок элемента "СтрокаУслугиКапРемонта".
Процедура УстановитьЗначениеСтрокиУслугиКапРемонта()
	
	Если мСтруктураНастроекКапРемонта.СписокУслуг.Количество() > 0 Тогда
		
		Элементы.НадписьУслугиКапРемонта.Видимость     = Истина;
		Элементы.НадписьСписокУслугКапРемонт.Видимость = Истина;
		
		Элементы.НадписьСписокУслугКапРемонт.Высота = мСтруктураНастроекКапРемонта.СписокУслуг.Количество();
		
		СписокУслуг = "";
		Для каждого ТекУслуга Из мСтруктураНастроекКапРемонта.СписокУслуг Цикл
			СписокУслуг = СписокУслуг + ?(ПустаяСтрока(СписокУслуг), "", Символы.ПС) + Символы.Таб + ТекУслуга;
		КонецЦикла;
		
		Элементы.НадписьСписокУслугКапРемонт.Заголовок = СписокУслуг;
		
	Иначе
		Элементы.НадписьУслугиКапРемонта.Видимость     = Ложь;
		Элементы.НадписьСписокУслугКапРемонт.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры // УстановитьЗначениеСтрокиУслугиКапРемонта()

&НаСервере
// Возвражает массив зданий для отбора.
Функция ПолучитьМассивЗданий()
	
	Возврат Объект.Здания.Выгрузить().ВыгрузитьКолонку("Здание");
	
КонецФункции // ПолучитьМассивЗданий()

&НаСервере
// Промежуточная функция на сервере, предназначенная для обращения к функции модуля менеждера 
// справочника "Настройки учета по услугам капитального ремонта".
//
Функция ПолучитьЭлементСправочникаПоОрганизацииНаСервере(Организация)
	
	Возврат Справочники.УПЖКХ_НастройкиУчетаКапремонта.ПолучитьЭлементСправочникаПоОрганизации(Организация);
	
КонецФункции // ПолучитьЭлементСправочникаПоОрганизацииНаСервере()

&НаСервере
Функция ПолучитьЗначениеРеквизитаОбъектаНаСервере(СсылкаНаЭлемент, НаименованиеРеквизита)
	
	Возврат СсылкаНаЭлемент[НаименованиеРеквизита];
	
КонецФункции // ПолучитьЗначениеРеквизитаОбъектаНаСервере()

&НаСервере
Функция СформироватьСтруктуруОформленияПолейФормы(СтруктураНастроекКапРемонта)
	
	Возврат Справочники.УПЖКХ_НастройкиУчетаКапремонта.СформироватьСтруктуруОформленияПолейФормы(СтруктураНастроекКапРемонта);
	
КонецФункции // СформироватьСтруктуруОформленияПолейФормы()

&НаСервере
// Промежуточная функция на сервере, предназначенная для обращения к функции модуля менеждера 
// справочника "Настройки учета по услугам капитального ремонта".
Процедура РедактироватьПометкуНаУдалениеПоСсылкеНаСервере(СсылкаНаЭлемент)
	
	Справочники.УПЖКХ_НастройкиУчетаКапремонта.РедактироватьПометкуНаУдалениеПоСсылке(СсылкаНаЭлемент);
	
КонецПроцедуры // РедактироватьПометкуНаУдалениеПоСсылкеНаСервере()

&НаСервере
// Процедура предназначена для заполнения сведения о ведение раздельного учета по капремонту в организации.
//
Процедура ЗаполнитьРеквизитыОтчетаПоКапремонту()
	
	мСтруктураНастроекКапРемонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Организация, Истина);
	
КонецПроцедуры // ЗаполнитьРеквизитыОтчетаПоКапремонту()

&НаКлиенте
// Предназначена для оформления элементов формы, расположенных на странице "Кап.ремонт".
//
Процедура ОбновитьСтатусВеденияУчетаПоКапремонту()
	
	СтруктураОформления = СформироватьСтруктуруОформленияПолейФормы(мСтруктураНастроекКапРемонта);
	
	Элементы.НадписьВедениеКапремонта.Заголовок  = СтруктураОформления.СтатусВеденияУчета;
	Элементы.КнопкаЭлементСправочника.Заголовок  = СтруктураОформления.НадписьКнопки;
	Элементы.НадписьВедениеКапремонта.ЦветТекста = СтруктураОформления.ЦветаСтатуса;
	
	УстановитьЗначениеСтрокиУслугиКапРемонта();
	
КонецПроцедуры // ОбновитьСтатусВеденияУчетаПоКапремонту()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// В случае если в настройках программы не включена возможность использования дополнительных реквизитов и сведений,
	// отобразим информационное сообщение о необходимости включения данной возможности.
	Элементы.ИнформационнаяНадписьОВключенииДопРеквизитов.Видимость = Не Константы.ИспользоватьДополнительныеРеквизитыИСведения.Получить();
	
	Если Параметры.Свойство("ХарактеристикаКодаЗдания") Тогда
		ХарактеристикаКодаЗдания = Параметры.ХарактеристикаКодаЗдания;
	КонецЕсли;
	
	Если Параметры.Свойство("Здания") Тогда
		Объект.Здания.Очистить();
		Для Каждого ТекЗдание Из Параметры.Здания Цикл
			НоваяСтрока        = Объект.Здания.Добавить();
			НоваяСтрока.Здание = ТекЗдание;
		КонецЦикла;
	КонецЕсли;
	
	Если Параметры.Свойство("ИдентификаторЛС") Тогда
		ИдентификаторЛС = Параметры.ИдентификаторЛС;
	КонецЕсли;
	
	Если Параметры.Свойство("СоставНомераПомещения") Тогда
		СоставНомераПомещения = Параметры.СоставНомераПомещения;
	КонецЕсли;
	
	Если Параметры.Свойство("Организация") Тогда
		Организация = Параметры.Организация;
	КонецЕсли;
	
	ЗаполнитьРеквизитыОтчетаПоКапремонту();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	ЭтаФорма.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ОбновитьСтатусВеденияУчетаПоКапремонту();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаОповещения" формы.
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписаныНастройкиУчетаКапремонта"
		И Параметр = Организация Тогда
		ЗаполнитьРеквизитыОтчетаПоКапремонту();
		ОбновитьСтатусВеденияУчетаПоКапремонту();
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "Нажатие" кнопки "КнопкаЭлементСправочника".
Процедура КнопкаЭлементСправочникаНажатие(Команда)
	
	СсылкаНаЭлемент = ПолучитьЭлементСправочникаПоОрганизацииНаСервере(Организация);
	Если Не мСтруктураНастроекКапРемонта.НастройкиОпределены
		И СсылкаНаЭлемент = Неопределено Тогда
		ОткрытьФорму("Справочник.УПЖКХ_НастройкиУчетаКапремонта.ФормаОбъекта", Новый Структура("Владелец", Организация), ЭтаФорма);
	Иначе
		Если ПолучитьЗначениеРеквизитаОбъектаНаСервере(СсылкаНаЭлемент, "ПометкаУдаления") Тогда
			
			Оповещение = Новый ОписаниеОповещения("КнопкаЭлементСправочникаНажатиеЗавершение", ЭтотОбъект, СсылкаНаЭлемент);
			
			ТекстВопроса = "Для текущей организации действие настройки учета по капитальному ремонту отменено."
						 + Символы.ПС + "Перед открытием формы элемента настройки необходимо включить. Продолжить?";
			
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Иначе
			ОткрытьФорму("Справочник.УПЖКХ_НастройкиУчетаКапремонта.Форма.ФормаЭлемента", Новый Структура("Ключ", СсылкаНаЭлемент), ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // КнопкаЭлементСправочникаНажатие()

&НаКлиенте
// Процедура - обработчик результата опроса команды "НадписьЭлементСправочника".
//
Процедура КнопкаЭлементСправочникаНажатиеЗавершение(Ответ, ДополнительныйПараметр) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		РедактироватьПометкуНаУдалениеПоСсылкеНаСервере(ДополнительныйПараметр);
		ОткрытьФорму("Справочник.УПЖКХ_НастройкиУчетаКапремонта.Форма.ФормаЭлемента", Новый Структура("Ключ", ДополнительныйПараметр), ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры // КнопкаЭлементСправочникаНажатиеЗавершение()

&НаКлиенте
// Обработчик события "Нажатие" кнопки "Сохранить".
Процедура Сохранить(Команда)
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ХарактеристикаКодаЗдания", ХарактеристикаКодаЗдания);
	СтруктураПараметров.Вставить("Здания",                   ПолучитьМассивЗданий());
	СтруктураПараметров.Вставить("ИдентификаторЛС",          ИдентификаторЛС);
	СтруктураПараметров.Вставить("СоставНомераПомещения",    СоставНомераПомещения);
	
	Закрыть(СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти