
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнициализацияРеквизитов();
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	Объект.Период      = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	МесяцСтрока        = УПЖКХ_РаботаСДиалогамиКлиентСервер.ДатаКакМесяцПредставление(Объект.Период);
	ЭтаФорма.Заголовок = "Отчет по капитальному ремонту: " + Объект.ВариантОтчета;
	
	ИзменитьНастройкиФормы();
	УстановитьНовыйВариантОтчета();
	
	ОбновитьСписокУслугКапРемонтНаСервере();
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьЗначенияРеквизитовНаСервере();
	
КонецПроцедуры // ПриЗакрытии()

&НаКлиенте
// Обработчик события "ОбработкаОповещения" формы.
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписаныНастройкиУчетаКапремонта"
	   И Параметр = Объект.Организация Тогда
		ОбновитьСписокУслугКапРемонтНаСервере();
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбновитьСписокУслугКапРемонтНаСервере();
	
КонецПроцедуры

&НаКлиенте
// Обработчик выполнения команды "Заполнить".
// Вызывается нажатием по кнопке "Сформировать".
Процедура ЗаполнитьТаблицуОтчета(Команда)
	
	Если Объект.ТаблицаОтчета.Количество() > 0 Тогда
		ДопПараметры = Новый Структура("ИмяВызываемойПроцедуры, Событие",
									   "ЗаполнитьТаблицуОтчета", "ОчисткаТаблицыОтчета");
		ПоказатьВопросОбОчисткеТабицыОтчета(ДопПараметры);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТаблицуОтчетаНаКлиенте();
	
КонецПроцедуры // ЗаполнитьТаблицуОтчета()

&НаКлиенте
// Обработчик выполнения команды "ОткрытьФормуНастройки".
Процедура ОткрытьФормуНастройки(Команда)
	
	СтруктураДанных = Новый Структура;
	СтруктураДанных.Вставить("ХарактеристикаКодаЗдания", Объект.ХарактеристикаКодаЗдания);
	СтруктураДанных.Вставить("Здания",                   ПолучитьМассивЗданий());
	СтруктураДанных.Вставить("ИдентификаторЛС",          ИдентификаторЛС);
	СтруктураДанных.Вставить("СоставНомераПомещения",    СоставНомераПомещения);
	СтруктураДанных.Вставить("Организация",              Объект.Организация);
	
	ОткрытьФорму("Обработка.УПЖКХ_ОтчетВыгрузкаПоКапремонту.Форма.ФормаНастройки",
				 СтруктураДанных,
				 ЭтаФорма,,,,
				 Новый ОписаниеОповещения("ОбработатьРезультатОткрытьФормуНастройки", ЭтотОбъект));
	
КонецПроцедуры // ОткрытьФормуНастройки()

// Процедура-обработчик результата закрытия формы настроек, вызваннй в процедуре-обработчике команды "ОткрытьФормуНастройки".
Процедура ОбработатьРезультатОткрытьФормуНастройки(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если Результат.Свойство("ХарактеристикаКодаЗдания")
			И ТипЗнч(Результат.ХарактеристикаКодаЗдания) = Тип("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения") Тогда
			Объект.ХарактеристикаКодаЗдания = Результат.ХарактеристикаКодаЗдания;
		КонецЕсли;
		
		Если Результат.Свойство("Здания")
			И ТипЗнч(Результат.Здания) = Тип("Массив") Тогда
			ОбновитьТаблицуЗданий(Результат.Здания);
		КонецЕсли;
		
		Если Результат.Свойство("ИдентификаторЛС")
			И ТипЗнч(Результат.ИдентификаторЛС) = Тип("Строка")
			И ЗначениеЗаполнено(Результат.ИдентификаторЛС) Тогда
			ИдентификаторЛС = Результат.ИдентификаторЛС;
		КонецЕсли;
		
		Если Результат.Свойство("СоставНомераПомещения")
			И ТипЗнч(Результат.СоставНомераПомещения) = Тип("Строка")
			И ЗначениеЗаполнено(Результат.СоставНомераПомещения) Тогда
			СоставНомераПомещения = Результат.СоставНомераПомещения;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьСписокУслугКапРемонтНаСервере();
	
КонецПроцедуры


&НаКлиенте
// Обработчик выполнения команды "Выгрузить".
// Вызывается нажатием по кнопке "Выгрузить".
Процедура Выгрузить(Команда)
	
	Если ПустаяСтрока(Объект.ПутьКФайлу) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Путь к файлу не указан.");
		Возврат;
	КонецЕсли;
	
	АдресФайлаВХранилище = ВыгрузитьСведенияВФайл();
	Если Не АдресФайлаВХранилище = Ложь
	   И Не АдресФайлаВХранилище = -1 Тогда
		ДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайлаВХранилище);
		ДанныеФайла.Записать(Объект.ПутьКФайлу + ".csv");
	КонецЕсли;
	
КонецПроцедуры // Выгрузить()

&НаКлиенте
// Обработчик выполнения команды "Закрыть".
Процедура ЗакрытьФорму(Команда)
	
	ФормаНастройки = ПолучитьФорму("Обработка.УПЖКХ_ОтчетВыгрузкаПоКапремонту.Форма.ФормаНастройки");
	Если ФормаНастройки.Открыта() Тогда
		ФормаНастройки.Закрыть();
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры // Закрыть()

&НаКлиенте
// Обработчик события "НачалоВыбора" поля ПутьКФайлу.
//
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Фильтр                  = "Файл данных (*.csv)|*.csv";
	ДиалогВыбораФайла.Расширение              = "csv";
	ДиалогВыбораФайла.Заголовок               = "Выберите файл";
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.ИндексФильтра           = 0;
	ДиалогВыбораФайла.ПолноеИмяФайла          = "" + Объект.ВариантОтчета + " от " + Строка(Формат(Объект.Период, "ДФ=dd.MM.yyyy"));
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ПутьКФайлуНачалоВыбораВыбрать", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения выбора файла.
Процедура ПутьКФайлуНачалоВыбораВыбрать(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		ПолноеИмяФайла    = ВыбранныеФайлы[0];
		Объект.ПутьКФайлу = Лев(ПолноеИмяФайла, СтрДлина(ПолноеИмяФайла) - 4);
	КонецЕсли;

КонецПроцедуры // ПутьКФайлуНачалоВыбора()

&НаКлиенте
// Обработчик события "Открытие" поля ПутьКФайлу.
//
Процедура ПутьКФайлуОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПолныйПутьКФайлу = Объект.ПутьКФайлу + ".csv";
	
	Файл = Новый Файл(ПолныйПутьКФайлу);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПутьКФайлуОткрытиеФайлСуществует",
												  ЭтотОбъект, Новый Структура("Файл", Файл));
	
	Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения проверки существования файла.
Процедура ПутьКФайлуОткрытиеФайлСуществует(Существует, ДополнительныеПараметры) Экспорт
	
	Файл = ДополнительныеПараметры.Файл;
	
	ДопПараметры = Новый Структура("ПолныйПутьКФайлу, Существует, ИмяФайла", Файл.ПолноеИмя, Существует, Файл.Имя);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПутьКФайлуОткрытиеЭтоФайл", ЭтотОбъект, ДопПараметры);
	
	Файл.НачатьПроверкуЭтоФайл(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения проверки на файл.
Процедура ПутьКФайлуОткрытиеЭтоФайл(ЭтоФайл, ДополнительныеПараметры) Экспорт
	
	ПолныйПутьКФайлу = ДополнительныеПараметры.ПолныйПутьКФайлу;
	Существует       = ДополнительныеПараметры.Существует;
	ИмяФайла         = ДополнительныеПараметры.ИмяФайла;
	
	Если Существует И ЭтоФайл Тогда
		ПолноеИмяФайла       = ИмяФайла;
		КаталогФайла         = СтрЗаменить(ПолныйПутьКФайлу, ПолноеИмяФайла, "");
		НачатьЗапускПриложения(Новый ОписаниеОповещения("ПутьКФайлуОткрытиеЗапускПриложения", ЭтотОбъект), КаталогФайла);
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Файл по указанному пути не обнаружен.");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения запуска приложения
Процедура ПутьКФайлуОткрытиеЗапускПриложения(КодВозврата, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры // ПутьКФайлуОткрытие()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВариантОтчета".
Процедура ВариантОтчетаПриИзменении(Элемент)
	
	Если Объект.ТаблицаОтчета.Количество() > 0 Тогда
		ДопПараметры = Новый Структура("ИмяВызываемойПроцедуры, Событие",
									   "ВариантОтчетаПриИзменении", "ОчисткаТаблицыОтчета");
		ПоказатьВопросОбОчисткеТабицыОтчета(ДопПараметры);
		Возврат;
	КонецЕсли;
	
	ИзменитьНастройкиФормы();
	УстановитьНовыйВариантОтчета();
	
КонецПроцедуры // ВариантОтчетаПриИзменении()

&НаКлиенте
// Процедура вызывает обновление текста подвала таблицы "ТаблицаОтчета".
Процедура ТаблицаОтчетаПриИзменении(Элемент)
	
	ОбновитьТекстПодвалаТаблицыОтчета();
	
КонецПроцедуры // ТаблицаОтчетаПриИзменении()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ МЕСЯЦ СТРОКОЙ

#Область ПроцедурыОбработчикиМесяцСтрокой

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" реквизита "Период".
Процедура ПериодПриИзменении(Элемент)
	
	КВП_РаботаСДиалогами.ПериодРегистрацииПриИзменении(ЭтаФорма, "Объект.Период", "МесяцСтрока", Элемент);
	
КонецПроцедуры // ПериодПриИзменении()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбораИзСписка" реквизита "Период".
Процедура ПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	КВП_РаботаСДиалогами.ПериодРегистрацииНачалоВыбора(ЭтаФорма, "Объект.Период", "МесяцСтрока", Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события "Регулирование" реквизита "Период".
Процедура ПериодРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	КВП_РаботаСДиалогами.ПериодРегистрацииРегулирование(ЭтаФорма, "Объект.Период", "МесяцСтрока", Элемент, Направление, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодРегулирование()

&НаКлиенте
// Процедура - обработчик события "АвтоПодбор" реквизита "Период".
Процедура ПериодАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	КВП_РаботаСДиалогами.ПериодРегистрацииАвтоПодборТекста(ЭтаФорма, "Объект.Период", "МесяцСтрока", Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодАвтоПодбор()

&НаКлиенте
// Процедура - обработчик события "ОкончаниеВводаТекста" реквизита "Период".
Процедура ПериодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	КВП_РаботаСДиалогами.ПериодРегистрацииОкончаниеВводаТекста(ЭтаФорма, "Объект.Период", "МесяцСтрока", Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодОкончаниеВводаТекста()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ИНИЦИАЛИЗАЦИЯ ДАННЫХ

#Область ИнициализацияДанных

&НаСервере
// Производит начальное заполнение параметров отчета.
//
Процедура ИнициализацияРеквизитов()
	
	СтруктураПараметров = ХранилищеОбщихНастроек.Загрузить("Обработка.УПЖКХ_ОтчетВыгрузкаПоКапремонту", "ОтчетВыгрузкаПоКапремонту");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		// Восстановление значений реквизитов.
		СтруктураПараметров.Свойство("Организация",              Объект.Организация);
		СтруктураПараметров.Свойство("ВариантОтчета",            Объект.ВариантОтчета);
		СтруктураПараметров.Свойство("ХарактеристикаКодаЗдания", Объект.ХарактеристикаКодаЗдания);
		СтруктураПараметров.Свойство("ПутьКФайлу",               Объект.ПутьКФайлу);
		СтруктураПараметров.Свойство("ИдентификаторЛС",          ИдентификаторЛС);
		СтруктураПараметров.Свойство("Ответственный",            Объект.Ответственный);
		СтруктураПараметров.Свойство("СоставНомераПомещения",    СоставНомераПомещения);
		
		Если СтруктураПараметров.Свойство("УслугиКапРемонта")
			И ТипЗнч(СтруктураПараметров.УслугиКапРемонта) = Тип("Массив")
			И Не СтруктураПараметров.УслугиКапРемонта.Количество() = 0 Тогда
			УслугиКапРемонта = СтруктураПараметров.УслугиКапРемонта;
			Объект.УслугиКапРемонта.Очистить();
			Для Каждого ТекущаяУслуга Из УслугиКапРемонта Цикл
				НоваяСтрока = Объект.УслугиКапРемонта.Добавить();
				НоваяСтрока.Услуга = ТекущаяУслуга;
			КонецЦикла;
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("Здания")
			И ТипЗнч(СтруктураПараметров.Здания) = Тип("Массив")
			И Не СтруктураПараметров.Здания.Количество() = 0 Тогда
			ТаблицаЗдания = СтруктураПараметров.Здания;
			Объект.Здания.Очистить();
			Для Каждого ТекущееЗдание Из ТаблицаЗдания Цикл
				НоваяСтрока = Объект.Здания.Добавить();
				НоваяСтрока.Здание = ТекущееЗдание;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВариантОтчета) Тогда
		// По умолчанию первое значение из списка.
		Объект.ВариантОтчета = Элементы.ВариантОтчета.СписокВыбора.Получить(0).Значение;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЛС) Тогда
		ИдентификаторЛС = "Наименование";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СоставНомераПомещения) Тогда
		СоставНомераПомещения = "С префиксом";
	КонецЕсли;
	
КонецПроцедуры // ИнициализацияРеквизитов()

#КонецОбласти

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАПОЛНЕНИЯ ТАБЛИЦЫ ОТЧЕТА

#Область ПроцедурыЗаполненияТаблицыОтчета

&НаКлиенте
// Получает данные и заполняет ими таблицу отчета.
Процедура ЗаполнитьТаблицуОтчетаНаКлиенте()
	
	ЗаполнитьТаблицуОтчетаНаСервере();
	
	ОбновитьТекстПодвалаТаблицыОтчета();
	
КонецПроцедуры // ЗаполнитьТаблицуОтчетаНаКлиенте()

&НаСервере
// Получает данные и заполняет ими таблицу отчета.
Процедура ЗаполнитьТаблицуОтчетаНаСервере()
	
	Если ОбязательныеДанныеНеЗаполнены() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Если Объект.ВариантОтчета = "Отчет по начислению взносов" Тогда
		Запрос.Текст = ПолучитьТекстЗапросаОтчетПоНачислению();
	ИначеЕсли Объект.ВариантОтчета = "Отчет по оплате взносов" Тогда
		Запрос.Текст = ПолучитьТекстЗапросаОтчетПоОплате();
	ИначеЕсли Объект.ВариантОтчета = "Отчет по начислению и оплате взносов (Вариант1)" Тогда
		Запрос.Текст = ПолучитьТекстЗапросаОтчетПоНачислениюИОплате(1);
	ИначеЕсли Объект.ВариантОтчета = "Отчет по начислению и оплате взносов (Вариант2)" Тогда
		Запрос.Текст = ПолучитьТекстЗапросаОтчетПоНачислениюИОплате(2);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Организация",      Объект.Организация);
	Запрос.УстановитьПараметр("НачПериода",       НачалоМесяца(Объект.Период));
	Запрос.УстановитьПараметр("КонПериода",       КонецМесяца(Объект.Период) + 1);
	Запрос.УстановитьПараметр("Характеристика",   Объект.ХарактеристикаКодаЗдания);
	Запрос.УстановитьПараметр("УслугиКапРемонта", Объект.УслугиКапРемонта.Выгрузить().ВыгрузитьКолонку("Услуга"));
	
	// Доработать отбор по зданиям.
	Если Объект.Здания.Количество() > 0 Тогда
		Запрос.УстановитьПараметр("ИспользуетсяОтборПоЗданиям", Истина);
	Иначе
		Запрос.УстановитьПараметр("ИспользуетсяОтборПоЗданиям", Ложь);
	КонецЕсли;
	Запрос.УстановитьПараметр("Здания", Объект.Здания.Выгрузить().ВыгрузитьКолонку("Здание"));
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		
		Если Объект.ВариантОтчета = "Отчет по начислению и оплате взносов (Вариант1)"
		 ИЛИ Объект.ВариантОтчета = "Отчет по начислению и оплате взносов (Вариант2)" Тогда
			
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.ПериодНачисленияВзноса = Дата(1,1,1)
				   И Не ЗначениеЗаполнено(Выборка.СуммаНачисленияБезОплатыИБезПени)
				   И Не ЗначениеЗаполнено(Выборка.СуммаОплатыБезПени)
				   И Не ЗначениеЗаполнено(Выборка.СуммаНачисленияПени)
				   И Не ЗначениеЗаполнено(Выборка.СуммаОплатыПени)
				   И Не ЗначениеЗаполнено(Выборка.СуммаЗадолженностиПоНачислениям)
				   И Не ЗначениеЗаполнено(Выборка.СуммаЗадолженностиПоПени)Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока                      = Объект.ТаблицаОтчета.Добавить();
				НоваяСтрока.КодДома              = Выборка.КодЗдания;
				НоваяСтрока.НомерПомещения       = ?(СоставНомераПомещения = "С префиксом", Выборка.ПомещениеСтрокой, Строка(Выборка.КодПомещения) + Выборка.СуффиксПомещения);
				НоваяСтрока.ОбщаяПлощадь         = Выборка.ОбщаяПлощадь;
				НоваяСтрока.ИдентификаторЛС      = ?(ИдентификаторЛС = "Идентификатор", Выборка.Идентификатор, Выборка.ЛицевойСчет);
				НоваяСтрока.ФИОСобственника      = Выборка.ФИОСобственника;
				
				Если Не Выборка.ПериодНачисленияВзноса = Дата(1, 1, 1) Тогда
					НоваяСтрока.ПериодНачисленияОплаты = Формат(Выборка.ПериодНачисленияВзноса,"ДФ=ММММ") + " "
													   + Формат(Выборка.ПериодНачисленияВзноса,"ДФ=yyyy")
				КонецЕсли;
				
				НоваяСтрока.СуммаВзноса                = Выборка.СуммаНачисленияБезОплатыИБезПени;
				НоваяСтрока.СуммаОплаченногоВзноса     = Выборка.СуммаОплатыБезПени;
				НоваяСтрока.СуммаПени                  = Выборка.СуммаНачисленияПени;
				НоваяСтрока.СуммаОплаченногоПени       = Выборка.СуммаОплатыПени;
				НоваяСтрока.СуммаЗадолженностиПоВзносу = Выборка.СуммаЗадолженностиПоНачислениям;
				НоваяСтрока.СуммаЗадолженностиПоПени   = Выборка.СуммаЗадолженностиПоПени;
				
				НоваяСтрока.АдресДома                  = Справочники.КВП_Здания.ПолучитьПредставлениеЗдания(Выборка.Здание);
				
				Если Объект.ВариантОтчета = "Отчет по начислению и оплате взносов (Вариант2)" Тогда
					НоваяСтрока.ТипПомещения                   = Выборка.ТипПомещения;
					НоваяСтрока.ВидСобственности               = Выборка.ВидСобственности;
					НоваяСтрока.КатегорияСобственника          = Выборка.КатегорияСобственника;
					НоваяСтрока.КоличествоКомнат               = Выборка.КоличествоКомнат;
					НоваяСтрока.ФИОНанимателяАрендатора        = "";
					НоваяСтрока.КоличествоЗарегистрированных   = Выборка.КоличествоЗарегистрированных;
					НоваяСтрока.ЛьготированнаяПлощадьПомещения = 0;
					НоваяСтрока.ПредъявленоCобственнику        = 0;
					НоваяСтрока.Льгота                         = 0;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Пока Выборка.Следующий() Цикл
				
				Если Выборка.ДатаНачисленияОплаты = Дата(1,1,1)
				   И Не ЗначениеЗаполнено(Выборка.СуммаНачисления)
				   И Не ЗначениеЗаполнено(Выборка.СуммаНачисленияПени) Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока                      = Объект.ТаблицаОтчета.Добавить();
				НоваяСтрока.ДатаНачисленияОплаты = Выборка.ДатаНачисленияОплаты;
				
				Если Объект.ВариантОтчета = "Отчет по начислению взносов" Тогда
					НоваяСтрока.СуммаВзноса = Выборка.СуммаНачисленияОплатыБезПени;
					НоваяСтрока.СуммаПени   = Выборка.СуммаНачисленияОплатыПени;
				ИначеЕсли Объект.ВариантОтчета = "Отчет по оплате взносов" Тогда
					НоваяСтрока.СуммаОплаченногоВзноса = Выборка.СуммаНачисленияОплатыБезПени;
					НоваяСтрока.СуммаОплаченногоПени   = Выборка.СуммаНачисленияОплатыПени;
				КонецЕсли;
				
				НоваяСтрока.КодДома              = Выборка.КодЗдания;
				НоваяСтрока.НомерПомещения       = ?(СоставНомераПомещения = "С префиксом", Выборка.ПомещениеСтрокой, Строка(Выборка.КодПомещения) + Выборка.СуффиксПомещения);
				НоваяСтрока.ОбщаяПлощадь         = Выборка.ОбщаяПлощадь;
				НоваяСтрока.ИдентификаторЛС      = ?(ИдентификаторЛС = "Идентификатор", Выборка.Идентификатор, Выборка.ЛицевойСчет);
				НоваяСтрока.ФИОСобственника      = Выборка.ОтветственныйВладелец;
				
				Если Не Выборка.ПериодНачисленияОплаты = Дата(1, 1, 1) Тогда
					НомерМесяца                        = Месяц(Выборка.ПериодНачисленияОплаты);
					НоваяСтрока.ПериодНачисленияОплаты = "" + Формат(Год(Выборка.ПериодНачисленияОплаты), "ЧГ=0")
													   + ?(СтрДлина(НомерМесяца) = 1, "0" + НомерМесяца, НомерМесяца);
				КонецЕсли;
				НоваяСтрока.АдресДома            = Справочники.КВП_Здания.ПолучитьПредставлениеЗдания(Выборка.Здание);
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Данных за отчетный период не обнаружено.");
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТаблицуОтчетаНаСервере()

&НаСервере
// Возвращает текст основного запроса по получению данных.
Функция ПолучитьТекстЗапросаОтчетПоНачислению()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Идентификатор КАК Идентификатор,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Владелец КАК Здание,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект КАК Помещение,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Код КАК КодПомещения,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Суффикс КАК Суффикс
	|ПОМЕСТИТЬ втДействующиеЛС
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&НачПериода,
	|			&ИспользуетсяОтборПоЗданиям = ЛОЖЬ
	|				ИЛИ &ИспользуетсяОтборПоЗданиям = ИСТИНА
	|					И Объект.Владелец В (&Здания)) КАК КВП_ЛицевыеСчетаСрезПоследних
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Идентификатор,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Владелец,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Код,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Суффикс
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&КонПериода,
	|			Период >= &НачПериода
	|				И (&ИспользуетсяОтборПоЗданиям = ЛОЖЬ
	|					ИЛИ &ИспользуетсяОтборПоЗданиям = ИСТИНА
	|						И Объект.Владелец В (&Здания))) КАК КВП_ЛицевыеСчетаСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|				ТОГДА 0
	|			ИНАЧЕ УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|		КОНЕЦ) КАК СуммаНачисленияОплатыБезПени,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНачисленияОплатыПени,
	|	МАКСИМУМ(УПЖКХ_НачисленияОбороты.МесяцНачисления) КАК ПериодНачисленияОплаты,
	|	МАКСИМУМ(УПЖКХ_НачисленияОбороты.Период) КАК ДатаНачисленияОплаты
	|ПОМЕСТИТЬ втСуммы
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&НачПериода,
	|			&КонПериода,
	|			Регистратор,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втДействующиеЛС.ЛицевойСчет
	|					ИЗ
	|						втДействующиеЛС КАК втДействующиеЛС)
	|				И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|				И Услуга В (&УслугиКапРемонта)) КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДействующиеЛС.Здание,
	|	втДействующиеЛС.ЛицевойСчет,
	|	втДействующиеЛС.Идентификатор,
	|	втДействующиеЛС.Помещение,
	|	втДействующиеЛС.КодПомещения,
	|	втДействующиеЛС.Суффикс,
	|	втСуммы.СуммаНачисленияОплатыБезПени,
	|	втСуммы.СуммаНачисленияОплатыПени,
	|	втСуммы.ДатаНачисленияОплаты,
	|	втСуммы.ПериодНачисленияОплаты
	|ПОМЕСТИТЬ втОсновная
	|ИЗ
	|	втСуммы КАК втСуммы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДействующиеЛС КАК втДействующиеЛС
	|		ПО (втДействующиеЛС.ЛицевойСчет = втСуммы.ЛицевойСчет)
	|
	|СГРУППИРОВАТЬ ПО
	|	втСуммы.СуммаНачисленияОплатыБезПени,
	|	втСуммы.ДатаНачисленияОплаты,
	|	втСуммы.ПериодНачисленияОплаты,
	|	втСуммы.СуммаНачисленияОплатыПени,
	|	втДействующиеЛС.ЛицевойСчет,
	|	втДействующиеЛС.Идентификатор,
	|	втДействующиеЛС.Помещение,
	|	втДействующиеЛС.Здание,
	|	втДействующиеЛС.КодПомещения,
	|	втДействующиеЛС.Суффикс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДополнительныеСведения.Объект,
	|	ДополнительныеСведения.Значение
	|ПОМЕСТИТЬ втКодыЗданий
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Свойство = &Характеристика
	|	И ДополнительныеСведения.Объект В
	|			(ВЫБРАТЬ
	|				втОсновная.Здание
	|			ИЗ
	|				втОсновная КАК втОсновная)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втКодыЗданий.Значение, """") КАК КодЗдания,
	|	втОсновная.Здание,
	|	втОсновная.ЛицевойСчет,
	|	втОсновная.Идентификатор,
	|	втОсновная.Помещение,
	|	втОсновная.КодПомещения,
	|	втОсновная.Суффикс,
	|	втОсновная.ДатаНачисленияОплаты,
	|	втОсновная.ПериодНачисленияОплаты,
	|	втОсновная.СуммаНачисленияОплатыБезПени,
	|	втОсновная.СуммаНачисленияОплатыПени
	|ПОМЕСТИТЬ втОсновнаяСКодамиЗданий
	|ИЗ
	|	втОсновная КАК втОсновная
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКодыЗданий КАК втКодыЗданий
	|		ПО втОсновная.Здание = втКодыЗданий.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет,
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель, 0) = 0
	|			ТОГДА КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель / КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДоляЛС
	|ПОМЕСТИТЬ втДолиЛС
	|ИЗ
	|	РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(
	|			&КонПериода,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втОсновнаяСКодамиЗданий.ЛицевойСчет
	|				ИЗ
	|					втОсновнаяСКодамиЗданий КАК втОсновнаяСКодамиЗданий)) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втОсновнаяСКодамиЗданий.КодЗдания,
	|	втОсновнаяСКодамиЗданий.Здание,
	|	втОсновнаяСКодамиЗданий.ЛицевойСчет,
	|	втОсновнаяСКодамиЗданий.Идентификатор,
	|	втОсновнаяСКодамиЗданий.Помещение,
	|	втОсновнаяСКодамиЗданий.КодПомещения,
	|	втОсновнаяСКодамиЗданий.Суффикс,
	|	втОсновнаяСКодамиЗданий.ДатаНачисленияОплаты,
	|	втОсновнаяСКодамиЗданий.ПериодНачисленияОплаты,
	|	втОсновнаяСКодамиЗданий.СуммаНачисленияОплатыБезПени,
	|	втОсновнаяСКодамиЗданий.СуммаНачисленияОплатыПени,
	|	ЕСТЬNULL(КВП_ПлощадьПомещенияСрезПоследних.Площадь, 0) * ЕСТЬNULL(втДолиЛС.ДоляЛС, 0) КАК ОбщаяПлощадь
	|ПОМЕСТИТЬ втИтоговая
	|ИЗ
	|	втОсновнаяСКодамиЗданий КАК втОсновнаяСКодамиЗданий
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|				&КонПериода,
	|				Объект В
	|						(ВЫБРАТЬ
	|							втОсновнаяСКодамиЗданий.Помещение
	|						ИЗ
	|							втОсновнаяСКодамиЗданий КАК втОсновнаяСКодамиЗданий)
	|					И ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)) КАК КВП_ПлощадьПомещенияСрезПоследних
	|		ПО втОсновнаяСКодамиЗданий.Помещение = КВП_ПлощадьПомещенияСрезПоследних.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДолиЛС КАК втДолиЛС
	|		ПО втОсновнаяСКодамиЗданий.ЛицевойСчет = втДолиЛС.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втИтоговая.КодЗдания КАК КодЗдания,
	|	втИтоговая.Здание КАК Здание,
	|	втИтоговая.Помещение КАК Помещение,
	|	втИтоговая.КодПомещения КАК КодПомещения,
	|	втИтоговая.Суффикс КАК СуффиксПомещения,
	|	ПРЕДСТАВЛЕНИЕ(втИтоговая.ЛицевойСчет) КАК ЛицевойСчет,
	|	втИтоговая.Идентификатор,
	|	втИтоговая.ДатаНачисленияОплаты,
	|	втИтоговая.ПериодНачисленияОплаты,
	|	втИтоговая.СуммаНачисленияОплатыБезПени,
	|	втИтоговая.СуммаНачисленияОплатыПени,
	|	втИтоговая.ОбщаяПлощадь,
	|	ПРЕДСТАВЛЕНИЕ(втИтоговая.Помещение) КАК ПомещениеСтрокой,
	|	ПРЕДСТАВЛЕНИЕ(УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец) КАК ОтветственныйВладелец
	|ИЗ
	|	втИтоговая КАК втИтоговая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(
	|				&КонПериода,
	|				ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втИтоговая.ЛицевойСчет
	|					ИЗ
	|						втИтоговая КАК втИтоговая)) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
	|		ПО втИтоговая.ЛицевойСчет = УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодЗдания,
	|	КодПомещения";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаОтчетПоНачислению()

&НаСервере
// Возвращает текст основного запроса по получению данных.
Функция ПолучитьТекстЗапросаОтчетПоОплате()
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Идентификатор КАК Идентификатор,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Владелец КАК Здание,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект КАК Помещение,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Код КАК КодПомещения,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Суффикс КАК Суффикс
	|ПОМЕСТИТЬ втДействующиеЛС
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&НачПериода,
	|			&ИспользуетсяОтборПоЗданиям = ЛОЖЬ
	|				ИЛИ &ИспользуетсяОтборПоЗданиям = ИСТИНА
	|					И Объект.Владелец В (&Здания)) КАК КВП_ЛицевыеСчетаСрезПоследних
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Идентификатор,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Владелец,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Код,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Суффикс
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&КонПериода,
	|			Период >= &НачПериода
	|				И (&ИспользуетсяОтборПоЗданиям = ЛОЖЬ
	|					ИЛИ &ИспользуетсяОтборПоЗданиям = ИСТИНА
	|						И Объект.Владелец В (&Здания))) КАК КВП_ЛицевыеСчетаСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	МАКСИМУМ(УПЖКХ_НачисленияОбороты.Период) КАК ДатаНачисленияОплаты,
	|	МАКСИМУМ(УПЖКХ_НачисленияОбороты.МесяцНачисления) КАК ПериодНачисленияОплаты,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|				ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНачисленияОплатыБезПени,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|				ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНачисленияОплатыПени
	|ПОМЕСТИТЬ втСуммы
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&НачПериода,
	|			&КонПериода,
	|			Регистратор,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втДействующиеЛС.ЛицевойСчет КАК ЛицевойСчет
	|					ИЗ
	|						втДействующиеЛС КАК втДействующиеЛС)
	|				И ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|				И Услуга В (&УслугиКапРемонта)) КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДействующиеЛС.Здание,
	|	втДействующиеЛС.ЛицевойСчет,
	|	втДействующиеЛС.Идентификатор,
	|	втДействующиеЛС.Помещение,
	|	втДействующиеЛС.КодПомещения,
	|	втДействующиеЛС.Суффикс,
	|	втСуммы.СуммаНачисленияОплатыБезПени,
	|	втСуммы.СуммаНачисленияОплатыПени,
	|	втСуммы.ДатаНачисленияОплаты,
	|	втСуммы.ПериодНачисленияОплаты
	|ПОМЕСТИТЬ втОсновная
	|ИЗ
	|	втСуммы КАК втСуммы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДействующиеЛС КАК втДействующиеЛС
	|		ПО (втДействующиеЛС.ЛицевойСчет = втСуммы.ЛицевойСчет)
	|
	|СГРУППИРОВАТЬ ПО
	|	втСуммы.СуммаНачисленияОплатыБезПени,
	|	втСуммы.ДатаНачисленияОплаты,
	|	втСуммы.ПериодНачисленияОплаты,
	|	втСуммы.СуммаНачисленияОплатыПени,
	|	втДействующиеЛС.ЛицевойСчет,
	|	втДействующиеЛС.Идентификатор,
	|	втДействующиеЛС.Помещение,
	|	втДействующиеЛС.Здание,
	|	втДействующиеЛС.КодПомещения,
	|	втДействующиеЛС.Суффикс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДополнительныеСведения.Объект,
	|	ДополнительныеСведения.Значение
	|ПОМЕСТИТЬ втКодыЗданий
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Свойство = &Характеристика
	|	И ДополнительныеСведения.Объект В
	|			(ВЫБРАТЬ
	|				втОсновная.Здание
	|			ИЗ
	|				втОсновная КАК втОсновная)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втКодыЗданий.Значение, """") КАК КодЗдания,
	|	втОсновная.Здание,
	|	втОсновная.ЛицевойСчет,
	|	втОсновная.Идентификатор,
	|	втОсновная.Помещение,
	|	втОсновная.КодПомещения,
	|	втОсновная.Суффикс,
	|	втОсновная.ДатаНачисленияОплаты,
	|	втОсновная.ПериодНачисленияОплаты,
	|	втОсновная.СуммаНачисленияОплатыБезПени,
	|	втОсновная.СуммаНачисленияОплатыПени
	|ПОМЕСТИТЬ втОсновнаяСКодамиЗданий
	|ИЗ
	|	втОсновная КАК втОсновная
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКодыЗданий КАК втКодыЗданий
	|		ПО втОсновная.Здание = втКодыЗданий.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет,
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель, 0) = 0
	|			ТОГДА КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель / КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДоляЛС
	|ПОМЕСТИТЬ втДолиЛС
	|ИЗ
	|	РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(
	|			&КонПериода,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втОсновнаяСКодамиЗданий.ЛицевойСчет
	|				ИЗ
	|					втОсновнаяСКодамиЗданий КАК втОсновнаяСКодамиЗданий)) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втОсновнаяСКодамиЗданий.КодЗдания,
	|	втОсновнаяСКодамиЗданий.Здание,
	|	втОсновнаяСКодамиЗданий.ЛицевойСчет,
	|	втОсновнаяСКодамиЗданий.Идентификатор,
	|	втОсновнаяСКодамиЗданий.Помещение,
	|	втОсновнаяСКодамиЗданий.КодПомещения,
	|	втОсновнаяСКодамиЗданий.Суффикс,
	|	втОсновнаяСКодамиЗданий.ДатаНачисленияОплаты,
	|	втОсновнаяСКодамиЗданий.ПериодНачисленияОплаты,
	|	втОсновнаяСКодамиЗданий.СуммаНачисленияОплатыБезПени,
	|	втОсновнаяСКодамиЗданий.СуммаНачисленияОплатыПени,
	|	ЕСТЬNULL(КВП_ПлощадьПомещенияСрезПоследних.Площадь, 0) * ЕСТЬNULL(втДолиЛС.ДоляЛС, 0) КАК ОбщаяПлощадь
	|ПОМЕСТИТЬ втИтоговая
	|ИЗ
	|	втОсновнаяСКодамиЗданий КАК втОсновнаяСКодамиЗданий
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|				&КонПериода,
	|				Объект В
	|						(ВЫБРАТЬ
	|							втОсновнаяСКодамиЗданий.Помещение
	|						ИЗ
	|							втОсновнаяСКодамиЗданий КАК втОсновнаяСКодамиЗданий)
	|					И ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)) КАК КВП_ПлощадьПомещенияСрезПоследних
	|		ПО втОсновнаяСКодамиЗданий.Помещение = КВП_ПлощадьПомещенияСрезПоследних.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДолиЛС КАК втДолиЛС
	|		ПО втОсновнаяСКодамиЗданий.ЛицевойСчет = втДолиЛС.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втИтоговая.КодЗдания КАК КодЗдания,
	|	втИтоговая.Здание КАК Здание,
	|	втИтоговая.Помещение КАК Помещение,
	|	втИтоговая.КодПомещения КАК КодПомещения,
	|	втИтоговая.Суффикс КАК СуффиксПомещения,
	|	ПРЕДСТАВЛЕНИЕ(втИтоговая.ЛицевойСчет) КАК ЛицевойСчет,
	|	втИтоговая.Идентификатор,
	|	втИтоговая.ДатаНачисленияОплаты,
	|	втИтоговая.ПериодНачисленияОплаты,
	|	втИтоговая.СуммаНачисленияОплатыБезПени,
	|	втИтоговая.СуммаНачисленияОплатыПени,
	|	втИтоговая.ОбщаяПлощадь,
	|	ПРЕДСТАВЛЕНИЕ(втИтоговая.Помещение) КАК ПомещениеСтрокой,
	|	ПРЕДСТАВЛЕНИЕ(УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец) КАК ОтветственныйВладелец
	|ИЗ
	|	втИтоговая КАК втИтоговая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(
	|				&КонПериода,
	|				ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втИтоговая.ЛицевойСчет
	|					ИЗ
	|						втИтоговая КАК втИтоговая)) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
	|		ПО втИтоговая.ЛицевойСчет = УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодЗдания,
	|	КодПомещения";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаОтчетПоОплате()

&НаСервере
// Возвращает текст основного запроса по получению данных.
Функция ПолучитьТекстЗапросаОтчетПоНачислениюИОплате(ВариантОтчета)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Идентификатор КАК Идентификатор,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Владелец КАК Здание,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект КАК Помещение,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Код КАК КодПомещения,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Суффикс КАК Суффикс
	|ПОМЕСТИТЬ втДействующиеЛС
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&НачПериода,
	|			&ИспользуетсяОтборПоЗданиям = ЛОЖЬ
	|				ИЛИ &ИспользуетсяОтборПоЗданиям = ИСТИНА
	|					И Объект.Владелец В (&Здания)) КАК КВП_ЛицевыеСчетаСрезПоследних
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Идентификатор,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Владелец,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Код,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Суффикс
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&КонПериода,
	|			Период >= &НачПериода
	|				И (&ИспользуетсяОтборПоЗданиям = ЛОЖЬ
	|					ИЛИ &ИспользуетсяОтборПоЗданиям = ИСТИНА
	|						И Объект.Владелец В (&Здания))) КАК КВП_ЛицевыеСчетаСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
	|	МАКСИМУМ(УПЖКХ_НачисленияОбороты.МесяцНачисления) КАК ПериодНачисленияВзноса,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|					И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНачисленияБезОплатыИБезПени,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|					И УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|				ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаОплатыБезПени,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|					И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНачисленияПени,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|					И УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|				ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаОплатыПени
	|ПОМЕСТИТЬ втСуммыНачислений
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&НачПериода,
	|			&КонПериода,
	|			Регистратор,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втДействующиеЛС.ЛицевойСчет КАК ЛицевойСчет
	|					ИЗ
	|						втДействующиеЛС КАК втДействующиеЛС)
	|				И Услуга В (&УслугиКапРемонта)) КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)
	|				ТОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаЗадолженностиПоНачислениям,
	|	СУММА(ВЫБОР
	|			КОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)
	|				ТОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаЗадолженностиПоПени,
	|	МАКСИМУМ(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.МесяцНачисления) КАК МесяцНачисления
	|ПОМЕСТИТЬ втЗадолженности
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&КонПериода,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втДействующиеЛС.ЛицевойСчет КАК ЛицевойСчет
	|					ИЗ
	|						втДействующиеЛС КАК втДействующиеЛС)
	|				И Услуга В (&УслугиКапРемонта)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втСуммыНачислений.ЛицевойСчет, втЗадолженности.ЛицевойСчет) КАК ЛицевойСчет,
	|	ЕСТЬNULL(втСуммыНачислений.ПериодНачисленияВзноса, &КонПериода) КАК ПериодНачисленияВзноса,
	|	СУММА(втСуммыНачислений.СуммаНачисленияБезОплатыИБезПени) КАК СуммаНачисленияБезОплатыИБезПени,
	|	СУММА(втСуммыНачислений.СуммаОплатыБезПени) КАК СуммаОплатыБезПени,
	|	СУММА(втСуммыНачислений.СуммаНачисленияПени) КАК СуммаНачисленияПени,
	|	СУММА(втСуммыНачислений.СуммаОплатыПени) КАК СуммаОплатыПени,
	|	СУММА(втЗадолженности.СуммаЗадолженностиПоНачислениям) КАК СуммаЗадолженностиПоНачислениям,
	|	СУММА(втЗадолженности.СуммаЗадолженностиПоПени) КАК СуммаЗадолженностиПоПени
	|ПОМЕСТИТЬ втСуммы
	|ИЗ
	|	втСуммыНачислений КАК втСуммыНачислений
	|		ПОЛНОЕ СОЕДИНЕНИЕ втЗадолженности КАК втЗадолженности
	|		ПО втСуммыНачислений.ЛицевойСчет = втЗадолженности.ЛицевойСчет
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(втСуммыНачислений.ЛицевойСчет, втЗадолженности.ЛицевойСчет),
	|	ЕСТЬNULL(втСуммыНачислений.ПериодНачисленияВзноса, &КонПериода)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДействующиеЛС.Здание,
	|	втДействующиеЛС.ЛицевойСчет,
	|	втДействующиеЛС.Идентификатор,
	|	втДействующиеЛС.Помещение,
	|	втДействующиеЛС.КодПомещения,
	|	втДействующиеЛС.Суффикс,
	|	втСуммы.ПериодНачисленияВзноса,
	|	втСуммы.СуммаНачисленияБезОплатыИБезПени,
	|	втСуммы.СуммаОплатыБезПени,
	|	втСуммы.СуммаНачисленияПени,
	|	втСуммы.СуммаОплатыПени,
	|	втСуммы.СуммаЗадолженностиПоНачислениям,
	|	втСуммы.СуммаЗадолженностиПоПени
	|ПОМЕСТИТЬ втОсновная
	|ИЗ
	|	втСуммы КАК втСуммы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДействующиеЛС КАК втДействующиеЛС
	|		ПО (втДействующиеЛС.ЛицевойСчет = втСуммы.ЛицевойСчет)
	|
	|СГРУППИРОВАТЬ ПО
	|	втСуммы.ПериодНачисленияВзноса,
	|	втСуммы.СуммаНачисленияБезОплатыИБезПени,
	|	втСуммы.СуммаОплатыБезПени,
	|	втСуммы.СуммаНачисленияПени,
	|	втСуммы.СуммаОплатыПени,
	|	втСуммы.СуммаЗадолженностиПоНачислениям,
	|	втСуммы.СуммаЗадолженностиПоПени,
	|	втДействующиеЛС.ЛицевойСчет,
	|	втДействующиеЛС.Идентификатор,
	|	втДействующиеЛС.Помещение,
	|	втДействующиеЛС.Здание,
	|	втДействующиеЛС.КодПомещения,
	|	втДействующиеЛС.Суффикс
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет,
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель, 0) = 0
	|			ТОГДА КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель / КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДоляЛС
	|ПОМЕСТИТЬ втДолиЛС
	|ИЗ
	|	РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(
	|			&КонПериода,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втОсновная.ЛицевойСчет
	|				ИЗ
	|					втОсновная КАК втОсновная)) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втОсновная.Здание,
	|	втОсновная.ЛицевойСчет,
	|	втОсновная.Идентификатор,
	|	втОсновная.Помещение,
	|	втОсновная.КодПомещения,
	|	втОсновная.Суффикс,
	|	втОсновная.ПериодНачисленияВзноса,
	|	втОсновная.СуммаНачисленияБезОплатыИБезПени,
	|	втОсновная.СуммаОплатыБезПени,
	|	втОсновная.СуммаНачисленияПени,
	|	втОсновная.СуммаОплатыПени,
	|	втОсновная.СуммаЗадолженностиПоНачислениям,
	|	втОсновная.СуммаЗадолженностиПоПени,
	|	ЕСТЬNULL(КВП_ПлощадьПомещенияСрезПоследних.Площадь, 0) * ЕСТЬNULL(втДолиЛС.ДоляЛС, 0) КАК ОбщаяПлощадь
	|ПОМЕСТИТЬ втИтоговая
	|ИЗ
	|	втОсновная КАК втОсновная
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|				&КонПериода,
	|				Объект В
	|						(ВЫБРАТЬ
	|							втОсновная.Помещение
	|						ИЗ
	|							втОсновная КАК втОсновная)
	|					И ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)) КАК КВП_ПлощадьПомещенияСрезПоследних
	|		ПО втОсновная.Помещение = КВП_ПлощадьПомещенияСрезПоследних.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДолиЛС КАК втДолиЛС
	|		ПО втОсновная.ЛицевойСчет = втДолиЛС.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втИтоговая.Здание КАК Здание,
	|	втИтоговая.КодПомещения КАК КодПомещения,
	|	втИтоговая.Суффикс КАК Суффикс,
	|	втИтоговая.Помещение КАК ПомещениеСсылка,
	|	втИтоговая.Идентификатор,
	|	втИтоговая.ПериодНачисленияВзноса,
	|	втИтоговая.СуммаНачисленияБезОплатыИБезПени,
	|	втИтоговая.СуммаОплатыБезПени,
	|	втИтоговая.СуммаНачисленияПени,
	|	втИтоговая.СуммаОплатыПени,
	|	втИтоговая.СуммаЗадолженностиПоНачислениям,
	|	втИтоговая.СуммаЗадолженностиПоПени,
	|	втИтоговая.ОбщаяПлощадь,
	|	ПРЕДСТАВЛЕНИЕ(втИтоговая.Помещение) КАК ПомещениеСтрокой,
	|	ПРЕДСТАВЛЕНИЕ(втИтоговая.ЛицевойСчет) КАК ЛицевойСчет,
	|	втИтоговая.ЛицевойСчет КАК ЛицевойСчетСсылка,
	|	ПРЕДСТАВЛЕНИЕ(УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец) КАК ФИОСобственника,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец КАК ОтветственныйВладелецСсылка
	|ПОМЕСТИТЬ втИтоговаяБезКодовЗданий
	|ИЗ
	|	втИтоговая КАК втИтоговая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(
	|				&КонПериода,
	|				ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втИтоговая.ЛицевойСчет
	|					ИЗ
	|						втИтоговая КАК втИтоговая)) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
	|		ПО втИтоговая.ЛицевойСчет = УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДополнительныеСведения.Объект,
	|	ДополнительныеСведения.Значение КАК КодЗдания
	|ПОМЕСТИТЬ втКодыЗданий
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Свойство = &Характеристика
	|	И ДополнительныеСведения.Объект В
	|			(ВЫБРАТЬ
	|				втОсновная.Здание
	|			ИЗ
	|				втОсновная КАК втОсновная)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговаяБезКодовЗданий.Здание КАК Здание,
	|	втИтоговаяБезКодовЗданий.КодПомещения КАК КодПомещения,
	|	втИтоговаяБезКодовЗданий.Суффикс КАК СуффиксПомещения,
	|	втИтоговаяБезКодовЗданий.ПомещениеСсылка,
	|	втИтоговаяБезКодовЗданий.ПомещениеСсылка.КоличествоКомнат КАК КоличествоКомнат,
	|	втИтоговаяБезКодовЗданий.Идентификатор,
	|	втИтоговаяБезКодовЗданий.ПериодНачисленияВзноса,
	|	втИтоговаяБезКодовЗданий.СуммаНачисленияБезОплатыИБезПени,
	|	втИтоговаяБезКодовЗданий.СуммаОплатыБезПени,
	|	втИтоговаяБезКодовЗданий.СуммаНачисленияПени,
	|	втИтоговаяБезКодовЗданий.СуммаОплатыПени,
	|	втИтоговаяБезКодовЗданий.СуммаЗадолженностиПоНачислениям,
	|	втИтоговаяБезКодовЗданий.СуммаЗадолженностиПоПени,
	|	втИтоговаяБезКодовЗданий.ОбщаяПлощадь,
	|	втИтоговаяБезКодовЗданий.ПомещениеСтрокой,
	|	втИтоговаяБезКодовЗданий.ФИОСобственника,
	|	ЕСТЬNULL(втКодыЗданий.КодЗдания, """") КАК КодЗдания,
	|	втИтоговаяБезКодовЗданий.ЛицевойСчет,
	|	втИтоговаяБезКодовЗданий.ЛицевойСчетСсылка,
	|	втИтоговаяБезКодовЗданий.ОтветственныйВладелецСсылка
	// Здесь добавляем имя пакета запроса для варианта отчета 2.
	// Если вариант отчета 1, то ниже по коду строка удаляется.
	|&ИмяПоследнегоПакетаЗапроса
	|ИЗ
	|	втИтоговаяБезКодовЗданий КАК втИтоговаяБезКодовЗданий
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКодыЗданий КАК втКодыЗданий
	|		ПО втИтоговаяБезКодовЗданий.Здание = втКодыЗданий.Объект";
	
	ТекстСортировки = "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Здание,
	|	КодПомещения";
	
	Если ВариантОтчета = 1 Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоследнегоПакетаЗапроса", "");
		
	Иначе
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоследнегоПакетаЗапроса", "ПОМЕСТИТЬ втЗапросПервогоОтчета");
		
		ТекстЗапроса = ТекстЗапроса + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УПЖКХ_Помещения.Ссылка КАК ПомещениеСсылка,
		|	ВЫБОР
		|		КОГДА УПЖКХ_Помещения.ВидПомещения.ЭтоЖилойФонд
		|			ТОГДА ""жилое""
		|		ИНАЧЕ ""нежилое""
		|	КОНЕЦ КАК ТипПомещения
		|ПОМЕСТИТЬ втВидыПомещений
		|ИЗ
		|	Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
		|ГДЕ
		|	УПЖКХ_Помещения.Ссылка В
		|			(ВЫБРАТЬ
		|				втЗапросПервогоОтчета.ПомещениеСсылка
		|			ИЗ
		|				втЗапросПервогоОтчета КАК втЗапросПервогоОтчета)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение,
		|	ВЫБОР
		|		КОГДА УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Муниципальная)
		|			ТОГДА 1
		|		КОГДА УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Частная)
		|			ТОГДА 2
		|		КОГДА УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Государственная)
		|			ТОГДА 3
		|		ИНАЧЕ 4
		|	КОНЕЦ КАК ВидСобственности
		|ПОМЕСТИТЬ втВидыСобственности
		|ИЗ
		|	РегистрСведений.УПЖКХ_СобственностьНаПомещения.СрезПоследних(
		|			&КонПериода,
		|			Помещение В
		|				(ВЫБРАТЬ
		|					втЗапросПервогоОтчета.ПомещениеСсылка
		|				ИЗ
		|					втЗапросПервогоОтчета КАК втЗапросПервогоОтчета)) КАК УПЖКХ_СобственностьНаПомещенияСрезПоследних
		|ГДЕ
		|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Действует
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЗапросПервогоОтчета.ЛицевойСчетСсылка,
		|	ВЫБОР
		|		КОГДА втЗапросПервогоОтчета.ОтветственныйВладелецСсылка ССЫЛКА Справочник.УПЖКХ_Жильцы
		|			ТОГДА ""Ф.З.""
		|		КОГДА втЗапросПервогоОтчета.ОтветственныйВладелецСсылка ССЫЛКА Справочник.Контрагенты
		|			ТОГДА ВЫБОР
		|					КОГДА втЗапросПервогоОтчета.ОтветственныйВладелецСсылка.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо)
		|						ТОГДА ""Ю.Л.""
		|					КОГДА втЗапросПервогоОтчета.ОтветственныйВладелецСсылка.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
		|						ТОГДА ""Ф.З.""
		|					ИНАЧЕ """"
		|				КОНЕЦ
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК КатегорияСобственника
		|ПОМЕСТИТЬ втКатегорииСобственников
		|ИЗ
		|	втЗапросПервогоОтчета КАК втЗапросПервогоОтчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.ЛицевойСчет,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.Комната) КАК КоличествоПривязанныхКомнат
		|ПОМЕСТИТЬ втПривязанныеКомнатыКЛС
		|ИЗ
		|	РегистрСведений.УПЖКХ_ПривязанныеКЛицевомуСчетуКомнаты.СрезПоследних(
		|			&КонПериода,
		|			ЛицевойСчет В
		|				(ВЫБРАТЬ
		|					втЗапросПервогоОтчета.ЛицевойСчетСсылка
		|				ИЗ
		|					втЗапросПервогоОтчета КАК втЗапросПервогоОтчета)) КАК УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних
		|ГДЕ
		|	УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.Привязка
		|
		|СГРУППИРОВАТЬ ПО
		|	УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЗапросПервогоОтчета.ЛицевойСчетСсылка,
		|	ВЫБОР
		|		КОГДА НЕ втПривязанныеКомнатыКЛС.КоличествоПривязанныхКомнат ЕСТЬ NULL 
		|			ТОГДА ВЫБОР
		|					КОГДА втПривязанныеКомнатыКЛС.КоличествоПривязанныхКомнат <> втЗапросПервогоОтчета.КоличествоКомнат
		|						ТОГДА втПривязанныеКомнатыКЛС.КоличествоПривязанныхКомнат
		|					ИНАЧЕ втПривязанныеКомнатыКЛС.КоличествоПривязанныхКомнат
		|				КОНЕЦ
		|		ИНАЧЕ втЗапросПервогоОтчета.КоличествоКомнат
		|	КОНЕЦ КАК КоличествоКомнат
		|ПОМЕСТИТЬ втКоличествоКомнат
		|ИЗ
		|	втЗапросПервогоОтчета КАК втЗапросПервогоОтчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПривязанныеКомнатыКЛС КАК втПривязанныеКомнатыКЛС
		|		ПО втЗапросПервогоОтчета.ЛицевойСчетСсылка = втПривязанныеКомнатыКЛС.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.ЛицевойСчет,
		|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.КоличествоЗарегистрированных
		|ПОМЕСТИТЬ втУчетКоличестваЖильцов
		|ИЗ
		|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(
		|			&КонПериода,
		|			ЛицевойСчет В
		|				(ВЫБРАТЬ
		|					втЗапросПервогоОтчета.ЛицевойСчетСсылка
		|				ИЗ
		|					втЗапросПервогоОтчета КАК втЗапросПервогоОтчета)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец) КАК КоличествоЗарегистрированных
		|ПОМЕСТИТЬ втКоличествоЗарегистрированныхИзСведений
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(&КонПериода, ) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
		|ГДЕ
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
		|
		|СГРУППИРОВАТЬ ПО
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(втКоличествоЗарегистрированныхИзСведений.ЛицевойСчет, втУчетКоличестваЖильцов.ЛицевойСчет) КАК ЛицевойСчет,
		|	ВЫБОР
		|		КОГДА Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами
		|			ТОГДА втУчетКоличестваЖильцов.КоличествоЗарегистрированных
		|		ИНАЧЕ втКоличествоЗарегистрированныхИзСведений.КоличествоЗарегистрированных
		|	КОНЕЦ КАК КоличествоЗарегистрированных
		|ПОМЕСТИТЬ втКоличествоЗарегистрированных
		|ИЗ
		|	втУчетКоличестваЖильцов КАК втУчетКоличестваЖильцов
		|		ПОЛНОЕ СОЕДИНЕНИЕ втКоличествоЗарегистрированныхИзСведений КАК втКоличествоЗарегистрированныхИзСведений
		|		ПО втУчетКоличестваЖильцов.ЛицевойСчет = втКоличествоЗарегистрированныхИзСведений.ЛицевойСчет,
		|	Константы КАК Константы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЗапросПервогоОтчета.Здание,
		|	втЗапросПервогоОтчета.КодПомещения,
		|	втЗапросПервогоОтчета.СуффиксПомещения,
		|	втЗапросПервогоОтчета.ЛицевойСчет,
		|	втЗапросПервогоОтчета.Идентификатор,
		|	втЗапросПервогоОтчета.ПериодНачисленияВзноса,
		|	втЗапросПервогоОтчета.СуммаНачисленияБезОплатыИБезПени,
		|	втЗапросПервогоОтчета.СуммаОплатыБезПени,
		|	втЗапросПервогоОтчета.СуммаНачисленияПени,
		|	втЗапросПервогоОтчета.СуммаОплатыПени,
		|	втЗапросПервогоОтчета.СуммаЗадолженностиПоНачислениям,
		|	втЗапросПервогоОтчета.СуммаЗадолженностиПоПени,
		|	втЗапросПервогоОтчета.ОбщаяПлощадь,
		|	втЗапросПервогоОтчета.ПомещениеСтрокой,
		|	втЗапросПервогоОтчета.ФИОСобственника,
		|	втЗапросПервогоОтчета.КодЗдания,
		|	ЕСТЬNULL(втВидыПомещений.ТипПомещения, """") КАК ТипПомещения,
		|	ЕСТЬNULL(втВидыСобственности.ВидСобственности, """") КАК ВидСобственности,
		|	ЕСТЬNULL(втКатегорииСобственников.КатегорияСобственника, """") КАК КатегорияСобственника,
		|	ЕСТЬNULL(втКоличествоКомнат.КоличествоКомнат, """") КАК КоличествоКомнат,
		|	ЕСТЬNULL(втКоличествоЗарегистрированных.КоличествоЗарегистрированных, """") КАК КоличествоЗарегистрированных
		|ИЗ
		|	втЗапросПервогоОтчета КАК втЗапросПервогоОтчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ втВидыПомещений КАК втВидыПомещений
		|		ПО втЗапросПервогоОтчета.ПомещениеСсылка = втВидыПомещений.ПомещениеСсылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ втВидыСобственности КАК втВидыСобственности
		|		ПО втЗапросПервогоОтчета.ПомещениеСсылка = втВидыСобственности.Помещение
		|		ЛЕВОЕ СОЕДИНЕНИЕ втКатегорииСобственников КАК втКатегорииСобственников
		|		ПО втЗапросПервогоОтчета.ЛицевойСчетСсылка = втКатегорииСобственников.ЛицевойСчетСсылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ втКоличествоКомнат КАК втКоличествоКомнат
		|		ПО втЗапросПервогоОтчета.ЛицевойСчетСсылка = втКоличествоКомнат.ЛицевойСчетСсылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ втКоличествоЗарегистрированных КАК втКоличествоЗарегистрированных
		|		ПО втЗапросПервогоОтчета.ЛицевойСчетСсылка = втКоличествоЗарегистрированных.ЛицевойСчет";
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ТекстСортировки;
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаОтчетПоНачислениюИОплате()

#КонецОбласти

/////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ВспомогательныеПроцедурыИФункции

&НаСервере
// Возвражает массив зданий для отбора.
Функция ПолучитьМассивЗданий()
	
	Возврат Объект.Здания.Выгрузить().ВыгрузитьКолонку("Здание");
	
КонецФункции // ПолучитьМассивЗданий()

&НаКлиенте
// Процедура вызывает вопрос пользователю перед заполнением таблицы отчета.
Процедура ПоказатьВопросОбОчисткеТабицыОтчета(ДопПараметры)
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура("ИмяВызываемойПроцедуры, Событие, ИмяВыполняемойПроцедуры");
	КонецЕсли;
	
	ПоказатьВопрос(Новый ОписаниеОповещения("ОбработкаОтветаНаВопрос", ЭтаФорма, ДопПараметры),
				   "Таблица отчета будет очищена. Продолжить?",
				   РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры // ПоказатьВопросОбОчисткеТабицыОтчета()

&НаКлиенте
// Обработчик события "ПоказатьВопрос".
Процедура ОбработкаОтветаНаВопрос(Ответ, ДопПараметры) Экспорт
	
	Если ДопПараметры.Событие = "ОчисткаТаблицыОтчета" Тогда
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			УстановитьПредыдущийВариантОтчета();
			Возврат;
		Иначе
			Объект.ТаблицаОтчета.Очистить();
			
			Если ДопПараметры.ИмяВызываемойПроцедуры = "ВариантОтчетаПриИзменении" Тогда
				ИзменитьНастройкиФормы();
				УстановитьНовыйВариантОтчета();
				ОбновитьТекстПодвалаТаблицыОтчета();
			КонецЕсли;
			Если ДопПараметры.ИмяВызываемойПроцедуры = "ЗаполнитьТаблицуОтчета" Тогда
				ЗаполнитьТаблицуОтчетаНаКлиенте();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОтветаНаВопрос()

&НаКлиенте
// Процедура устанавливает пометку на выбранном элементе списка выбора поля "ВариантОтчета".
Процедура УстановитьНовыйВариантОтчета()
	
	Для Каждого ТекВариант ИЗ Элементы.ВариантОтчета.СписокВыбора Цикл
		Если ТекВариант.Пометка Тогда
			ТекВариант.Пометка = Ложь;
		КонецЕсли;
		Если ТекВариант.Значение = Объект.ВариантОтчета Тогда
			ТекВариант.Пометка = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УстановитьНовыйВариантОтчета()

&НаКлиенте
// Процедура восстанавливает значение поля "ВариантОтчета" по метке элемента в списке выбора поля "ВариантОтчета".
Процедура УстановитьПредыдущийВариантОтчета()
	
	Для Каждого ТекВариант ИЗ Элементы.ВариантОтчета.СписокВыбора Цикл
		Если ТекВариант.Пометка Тогда
			Объект.ВариантОтчета = ТекВариант.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УстановитьПредыдущийВариантОтчета()

&НаСервере
// Проверяет заполнени обязательных параметров.
Функция ОбязательныеДанныеНеЗаполнены()
	
	Отказ = Ложь;
	
	Если Не ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;
		
	Если Объект.УслугиКапРемонта.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Услуги, соответствующие кап. ремонту, не выбраны.", Отказ);
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции // ОбязательныеДанныеНеЗаполнены()

&НаСервере
// Сохраняет значения в хранилище для последующего восстановления при открытии формы.
Процедура СохранитьЗначенияРеквизитовНаСервере()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация",              Объект.Организация);
	СтруктураПараметров.Вставить("ВариантОтчета",            Объект.ВариантОтчета);
	СтруктураПараметров.Вставить("ХарактеристикаКодаЗдания", Объект.ХарактеристикаКодаЗдания);
	СтруктураПараметров.Вставить("ПутьКФайлу",               Объект.ПутьКФайлу);
	СтруктураПараметров.Вставить("Ответственный",            Объект.Ответственный);
	
	// Исключим повторы услуг.
	УслугиКапРемонта = Объект.УслугиКапРемонта.Выгрузить();
	УслугиКапРемонта.Свернуть("Услуга");
	
	// Исключим повторы зданий.
	ТаблицаЗданий = Объект.Здания.Выгрузить();
	ТаблицаЗданий.Свернуть("Здание");
	
	// Выгрузим услуги и здания в массивы.
	СтруктураПараметров.Вставить("УслугиКапРемонта",      УслугиКапРемонта.ВыгрузитьКолонку("Услуга"));
	СтруктураПараметров.Вставить("Здания",                ТаблицаЗданий.ВыгрузитьКолонку("Здание"));
	СтруктураПараметров.Вставить("ИдентификаторЛС",       ИдентификаторЛС);
	СтруктураПараметров.Вставить("СоставНомераПомещения", СоставНомераПомещения);
	
	ХранилищеОбщихНастроек.Сохранить("Обработка.УПЖКХ_ОтчетВыгрузкаПоКапремонту", "ОтчетВыгрузкаПоКапремонту", СтруктураПараметров);
	
КонецПроцедуры // СохранитьЗначенияРеквизитовНаСервере()

&НаКлиенте
// Изменяет заголовки таблицы отчета в зависимости от варианта отчета.
//
Процедура ИзменитьНастройкиФормы()
	
	ЭтаФорма.Заголовок = "Отчет по капитальному ремонту: " + Объект.ВариантОтчета;
	
	// Общие заголовки для всех вариантов отчета.
	Элементы.НомерСтроки.Заголовок      = "№";
	Элементы.КодДома.Заголовок          = "Код дома в системе расчетов";
	Элементы.АдресДома.Заголовок        = "Адрес дома";
	Элементы.НомерПомещения.Заголовок   = "Код жилого (нежилого) помещения (номер квартиры)";
	Элементы.ОбщаяПлощадь.Заголовок     = "Площадь помещения";
	Элементы.ИдентификаторЛС.Заголовок  = "Идентификатор л/с";
	Элементы.ФИОСобственника.Заголовок  = "ФИО собственника";
	
	Если Объект.ВариантОтчета = "Отчет по начислению взносов" Тогда
		
		Элементы.ДатаНачисленияОплаты.Заголовок   = "Дата начисления взноса";
		Элементы.СуммаВзноса.Заголовок            = "Сумма начисленного взноса";
		Элементы.СуммаПени.Заголовок              = "Сумма начисленного процента (пени)";
		Элементы.ПериодНачисленияОплаты.Заголовок = "Период начисленного взноса";
		
		Элементы.ДатаНачисленияОплаты.Видимость       = Истина;
		Элементы.СуммаВзноса.Видимость                = Истина;
		Элементы.СуммаПени.Видимость                  = Истина;
		Элементы.СуммаОплаченногоВзноса.Видимость     = Ложь;
		Элементы.СуммаОплаченногоПени.Видимость       = Ложь;
		Элементы.СуммаЗадолженностиПоВзносу.Видимость = Ложь;
		Элементы.СуммаЗадолженностиПоПени.Видимость   = Ложь;
		
		Элементы.ТипПомещения.Видимость                   = Ложь;
		Элементы.ВидСобственности.Видимость               = Ложь;
		Элементы.КатегорияСобственника.Видимость          = Ложь;
		Элементы.КоличествоКомнат.Видимость               = Ложь;
		Элементы.ФИОНанимателяАрендатора.Видимость        = Ложь;
		Элементы.КоличествоЗарегистрированных.Видимость   = Ложь;
		Элементы.ЛьготированнаяПлощадьПомещения.Видимость = Ложь;
		Элементы.ГруппаВТомЧисле.Видимость                = Ложь;
		Элементы.Ответственный.Видимость                  = Ложь;
		
	ИначеЕсли Объект.ВариантОтчета = "Отчет по оплате взносов" Тогда
		
		Элементы.ДатаНачисленияОплаты.Заголовок   = "Дата оплаченного взноса";
		Элементы.СуммаОплаченногоВзноса.Заголовок = "Сумма оплаченного взноса";
		Элементы.СуммаОплаченногоПени.Заголовок   = "Сумма оплаченного процента (пени)";
		Элементы.ПериодНачисленияОплаты.Заголовок = "Период оплаты взноса";
		
		Элементы.ДатаНачисленияОплаты.Видимость       = Истина;
		Элементы.СуммаОплаченногоВзноса.Видимость     = Истина;
		Элементы.СуммаОплаченногоПени.Видимость       = Истина;
		Элементы.СуммаВзноса.Видимость                = Ложь;
		Элементы.СуммаПени.Видимость                  = Ложь;
		Элементы.СуммаЗадолженностиПоВзносу.Видимость = Ложь;
		Элементы.СуммаЗадолженностиПоПени.Видимость   = Ложь;
		
		Элементы.ТипПомещения.Видимость                   = Ложь;
		Элементы.ВидСобственности.Видимость               = Ложь;
		Элементы.КатегорияСобственника.Видимость          = Ложь;
		Элементы.КоличествоКомнат.Видимость               = Ложь;
		Элементы.ФИОНанимателяАрендатора.Видимость        = Ложь;
		Элементы.КоличествоЗарегистрированных.Видимость   = Ложь;
		Элементы.ЛьготированнаяПлощадьПомещения.Видимость = Ложь;
		Элементы.ГруппаВТомЧисле.Видимость                = Ложь;
		Элементы.Ответственный.Видимость                  = Ложь;
		
	ИначеЕсли Объект.ВариантОтчета = "Отчет по начислению и оплате взносов (Вариант1)" Тогда
		
		Элементы.ПериодНачисленияОплаты.Заголовок     = "Период начисленного взноса";
		Элементы.СуммаВзноса.Заголовок                = "Сумма начисленного взноса";
		Элементы.СуммаПени.Заголовок                  = "Сумма начисленного процента (пени)";
		Элементы.СуммаОплаченногоВзноса.Заголовок     = "Сумма оплаченного взноса";
		Элементы.СуммаОплаченногоПени.Заголовок       = "Сумма оплаченного процента (пени)";
		Элементы.СуммаЗадолженностиПоВзносу.Заголовок = "Сумма задолженности по взносу";
		Элементы.СуммаЗадолженностиПоПени.Заголовок   = "Сумма задолженности по начисленному проценту (пени)";
		
		Элементы.СуммаВзноса.Видимость                = Истина;
		Элементы.СуммаПени.Видимость                  = Истина;
		Элементы.СуммаОплаченногоВзноса.Видимость     = Истина;
		Элементы.СуммаОплаченногоПени.Видимость       = Истина;
		Элементы.СуммаЗадолженностиПоВзносу.Видимость = Истина;
		Элементы.СуммаЗадолженностиПоПени.Видимость   = Истина;
		Элементы.ДатаНачисленияОплаты.Видимость       = Ложь;
		
		Элементы.ТипПомещения.Видимость                   = Ложь;
		Элементы.ВидСобственности.Видимость               = Ложь;
		Элементы.КатегорияСобственника.Видимость          = Ложь;
		Элементы.КоличествоКомнат.Видимость               = Ложь;
		Элементы.ФИОНанимателяАрендатора.Видимость        = Ложь;
		Элементы.КоличествоЗарегистрированных.Видимость   = Ложь;
		Элементы.ЛьготированнаяПлощадьПомещения.Видимость = Ложь;
		Элементы.ГруппаВТомЧисле.Видимость                = Ложь;
		Элементы.Ответственный.Видимость                  = Ложь;
		
	ИначеЕсли Объект.ВариантОтчета = "Отчет по начислению и оплате взносов (Вариант2)" Тогда
		
		Элементы.ОбщаяПлощадь.Заголовок               = "Площадь жилого/нежилого помещения";
		Элементы.ИдентификаторЛС.Заголовок            = "Номер лицевого счета";
		Элементы.ПериодНачисленияОплаты.Заголовок     = "Период начисленного взноса";
		Элементы.СуммаВзноса.Заголовок                = "Сумма начисленного взноса";
		Элементы.СуммаПени.Заголовок                  = "Сумма начисленного процента (пени)";
		Элементы.СуммаОплаченногоВзноса.Заголовок     = "Сумма оплаченного взноса";
		Элементы.СуммаОплаченногоПени.Заголовок       = "Сумма оплаченного процента (пени)";
		Элементы.СуммаЗадолженностиПоВзносу.Заголовок = "Сумма задолженности по взносу";
		Элементы.СуммаЗадолженностиПоПени.Заголовок   = "Сумма задолженности по начисленному проценту (пени)";
		
		Элементы.ТипПомещения.Заголовок                   = "Тип помещения (жилое/нежилое)";
		Элементы.ВидСобственности.Заголовок               = "Вид собственности: муниципальная(1), частная(2), государственная(3), прочая(4)";
		Элементы.КатегорияСобственника.Заголовок          = "Категория собственника: физ.лицо(Ф.З.), Юр.лицо(Ю.Л.)";
		Элементы.КоличествоКомнат.Заголовок               = "Количество комнат в помещении";
		Элементы.ФИОНанимателяАрендатора.Заголовок        = "Наименование (ФИО нанимателя, арендатора)";
		Элементы.КоличествоЗарегистрированных.Заголовок   = "Количество зарегистрированных жителей";
		Элементы.ЛьготированнаяПлощадьПомещения.Заголовок = "Льготированная площадь помещения";
		Элементы.ПредъявленоCобственнику.Заголовок        = "предъявлено собственнику";
		Элементы.Льгота.Заголовок                         = "льгота";
		
		Элементы.СуммаВзноса.Видимость                = Истина;
		Элементы.СуммаПени.Видимость                  = Истина;
		Элементы.СуммаОплаченногоВзноса.Видимость     = Истина;
		Элементы.СуммаОплаченногоПени.Видимость       = Истина;
		Элементы.СуммаЗадолженностиПоВзносу.Видимость = Истина;
		Элементы.СуммаЗадолженностиПоПени.Видимость   = Истина;
		Элементы.ДатаНачисленияОплаты.Видимость       = Ложь;
		
		Элементы.ТипПомещения.Видимость                   = Истина;
		Элементы.ВидСобственности.Видимость               = Истина;
		Элементы.КатегорияСобственника.Видимость          = Истина;
		Элементы.КоличествоКомнат.Видимость               = Истина;
		Элементы.ФИОНанимателяАрендатора.Видимость        = Истина;
		Элементы.КоличествоЗарегистрированных.Видимость   = Истина;
		Элементы.ЛьготированнаяПлощадьПомещения.Видимость = Истина;
		Элементы.ГруппаВТомЧисле.Видимость                = Истина;
		
		Элементы.Ответственный.Видимость                  = Истина;
		
	КонецЕсли;
	
	
КонецПроцедуры // ИзменитьНастройкиФормы()

&НаКлиенте
// Процедура устанавливает значения в поля подвала таблицы отчета.
Процедура ОбновитьТекстПодвалаТаблицыОтчета()
	
	ФорматЗначения = "ЧДЦ=2; ЧН=0,00";
	
	Элементы.СуммаВзноса.ТекстПодвала                = Формат(Объект.ТаблицаОтчета.Итог("СуммаВзноса"),                ФорматЗначения);
	Элементы.СуммаПени.ТекстПодвала                  = Формат(Объект.ТаблицаОтчета.Итог("СуммаПени"),                  ФорматЗначения);
	Элементы.СуммаОплаченногоВзноса.ТекстПодвала     = Формат(Объект.ТаблицаОтчета.Итог("СуммаОплаченногоВзноса"),     ФорматЗначения);
	Элементы.СуммаОплаченногоПени.ТекстПодвала       = Формат(Объект.ТаблицаОтчета.Итог("СуммаОплаченногоПени"),       ФорматЗначения);
	Элементы.СуммаЗадолженностиПоВзносу.ТекстПодвала = Формат(Объект.ТаблицаОтчета.Итог("СуммаЗадолженностиПоВзносу"), ФорматЗначения);
	Элементы.СуммаЗадолженностиПоПени.ТекстПодвала   = Формат(Объект.ТаблицаОтчета.Итог("СуммаЗадолженностиПоПени"),   ФорматЗначения);
	
	Если Объект.ВариантОтчета = "Отчет по начислению и оплате взносов (Вариант2)" Тогда
		Элементы.ПредъявленоCобственнику.ТекстПодвала = "-"; //Формат(Объект.ТаблицаОтчета.Выгрузить().Итог("ПредъявленоCобственнику"), СтрокаФорматаТекстаПодвала);
		Элементы.Льгота.ТекстПодвала                  = "-"; //Формат(Объект.ТаблицаОтчета.Выгрузить().Итог("Льгота"), СтрокаФорматаТекстаПодвала);
	КонецЕсли;
	
КонецПроцедуры // ОбновитьТекстПодвалаТаблицыОтчета()

&НаСервере
// Обновляет таблицу зданий.
//
Процедура ОбновитьТаблицуЗданий(МассивЗданий)
	
	Объект.Здания.Очистить();
	
	Для Каждого ТекущееЗдание ИЗ МассивЗданий Цикл
		Если ТипЗнч(ТекущееЗдание) = Тип("СправочникСсылка.КВП_Здания")
		   И Не ТекущееЗдание.Пустая()
		   И Объект.Здания.НайтиСтроки(Новый Структура("Здание", ТекущееЗдание)).Количество() = 0 Тогда
			НоваяСтрока        = Объект.Здания.Добавить();
			НоваяСтрока.Здание = ТекущееЗдание;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОбновитьТаблицуЗданий()

&НаСервере
// Обновляет строку с представлением услуг капитального ремонта.
//
Процедура ОбновитьСписокУслугКапРемонтНаСервере()
	
	Если Объект.Организация.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Объект.УслугиКапРемонта.Очистить();
	
	СтруктураНастроекПоКапремонту = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Объект.Организация, Истина);
	Для Каждого ТекУслуга Из СтруктураНастроекПоКапремонту.СписокУслуг Цикл
		НоваяСтрока        = Объект.УслугиКапРемонта.Добавить();
		НоваяСтрока.Услуга = ТекУслуга.Значение;
	КонецЦикла;
	
КонецПроцедуры // ОбновитьСписокУслугКапРемонт()

#КонецОбласти

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

#Область ПроцедурыИФункцииПечати

&НаКлиенте
// Обработчик команды печати.
Процедура Печать(Команда)
	
	Если Объект.ТаблицаОтчета.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Таблица отчета не заполнена.");
		Возврат;
	КонецЕсли;
	
	ПараметрКоманды = Новый Массив;
	ПараметрКоманды.Добавить(ПредопределенноеЗначение("Справочник.КВП_ЛицевыеСчета.ПустаяСсылка"));
	
	КолонокиТаблицы = Новый Структура;
	Для Каждого ТекЭлемент Из Элементы.ТаблицаОтчета.ПодчиненныеЭлементы Цикл
		Если ТекЭлемент.Видимость Тогда
			КолонокиТаблицы.Вставить(ТекЭлемент.Имя, ТекЭлемент.Заголовок);
			Если ТекЭлемент.Имя = "ГруппаВТомЧисле" Тогда // для ВариантОтчета = "Отчет по начислению и оплате взносов (Вариант2)"
				Для Каждого ТекЭлементГруппаВТомЧисле Из ТекЭлемент.ПодчиненныеЭлементы Цикл
					КолонокиТаблицы.Вставить(ТекЭлементГруппаВТомЧисле.Имя, ТекЭлементГруппаВТомЧисле.Заголовок);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПечати = Новый Структура;
	ПараметрыПечати.Вставить("Период",          Объект.Период);
	ПараметрыПечати.Вставить("ТаблицаОтчета",   Объект.ТаблицаОтчета);
	ПараметрыПечати.Вставить("ВариантОтчета",   Объект.ВариантОтчета);
	
	Если Объект.ВариантОтчета = "Отчет по начислению и оплате взносов (Вариант2)" Тогда
		КолонокиТаблицы.Удалить("НомерСтроки");
		ПараметрыПечати.Вставить("Ответственный", Объект.Ответственный);
	КонецЕсли;
	
	ПараметрыПечати.Вставить("КолонокиТаблицы", КолонокиТаблицы);
	
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Обработка.УПЖКХ_ОтчетВыгрузкаПоКапремонту.МакетПечати", "МакетПечати",
													ПараметрКоманды, ЭтотОбъект, ПараметрыПечати);

КонецПроцедуры // Печать()

#КонецОбласти

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СОХРАНЕНИЯ ОТЧЕТА В ФАЙЛ

#Область ПроцедурыИФункцииСохраненияОтчетаВФайл

&НаСервере
// Формирует файл сведений формата CSV.
//
Функция ВыгрузитьСведенияВФайл()
	
	Если ПустаяСтрока(Объект.ПутьКФайлу) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Путь к файлу не выбран.");
		Возврат Ложь;
	КонецЕсли;
	
	Если Объект.ТаблицаОтчета.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Таблица отчета не заполнена.");
		Возврат Ложь;
	КонецЕсли;
		
	ИмяФайлаCSV     = ПолучитьИмяВременногоФайла("CSV");
	Текст           = Новый ТекстовыйДокумент;
	ТаблицаДанных   = Объект.ТаблицаОтчета.Выгрузить();
	КоличествоСтрок = 0;
	
	Для Каждого ТекСтрока Из ТаблицаДанных Цикл
		
		Если Обработки.УПЖКХ_ОтчетВыгрузкаПоКапремонту.ИмеютсяПустыеЗначения(ТекСтрока, Объект.ВариантОтчета) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В строке № " + ТекСтрока.НомерСтроки + " имеются незаполненные поля.");
		КонецЕсли;
		
		ТекстСтроки = "";
		
		Для Каждого ТекКолонка Из Элементы.ТаблицаОтчета.ПодчиненныеЭлементы Цикл
			Если ТекКолонка.Видимость Тогда
				ИмяКолонки = ТекКолонка.Имя;
				
				Если ИмяКолонки = "НомерСтроки" Тогда
					Продолжить;
				КонецЕсли;
				
				Если ИмяКолонки = "ГруппаВТомЧисле" Тогда
					ТекстСтроки = ТекстСтроки + Формат(ТекСтрока["ПредъявленоCобственнику"], "ЧДЦ=2; ЧН=0; ЧГ=0") + ";";
					ТекстСтроки = ТекстСтроки + Формат(ТекСтрока["Льгота"], "ЧДЦ=2; ЧН=0; ЧГ=0") + ";";
				ИначеЕсли ИмяКолонки = "ДатаНачисленияОплаты" Тогда
					ТекстСтроки = ТекстСтроки + Формат(ТекСтрока[ИмяКолонки], "ДФ=dd.MM.yyyy") + ";";
				ИначеЕсли Найти(ИмяКолонки, "Сумма") > 0 Тогда
					ТекстСтроки = ТекстСтроки + Формат(ТекСтрока[ИмяКолонки], "ЧДЦ=2; ЧН=0; ЧГ=0") + ";";
				Иначе
					ТекстСтроки = ТекстСтроки + СокрЛП(ТекСтрока[ИмяКолонки]) + ";";
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Текст.ДобавитьСтроку(ТекстСтроки);
		
		КоличествоСтрок = КоличествоСтрок + 1;
		
	КонецЦикла;
	
	Текст.Записать(ИмяФайлаCSV, КодировкаТекста.ANSI);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Выгрузка завершена. Выгружено строк " + КоличествоСтрок + ".");
	
	ДвоичныеДанные       = Новый ДвоичныеДанные(ИмяФайлаCSV);
	АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
	
	Возврат АдресФайлаВХранилище;
	
КонецФункции // ВыгрузитьСведенияВФайл()

#КонецОбласти