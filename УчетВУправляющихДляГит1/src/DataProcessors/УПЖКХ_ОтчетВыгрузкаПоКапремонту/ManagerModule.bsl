#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПОДГОТОВКИ ПЕЧАТНЫХ ФОРМ

#Область ПроцедурыПодготовкиПечатныхФорм

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы;
//   ОшибкиПечати          - Список значений  - Ошибки печати  (значение - ссылка на объект, представление - текст ошибки);
//   ОбъектыПечати         - Список значений  - Объекты печати (значение - ссылка на объект,
//                                              представление - имя области в которой был выведен объект);
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "МакетПечати") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
						КоллекцияПечатныхФорм,
						"МакетПечати", "Отчет-выгрузка по кап.ремонту",
						ПечатьМакетПечати(ПараметрыПечати), ,
						"Обработка.УПЖКХ_ОтчетВыгрузкаПоКапремонту.МакетПечати");
	КонецЕсли;

КонецПроцедуры

// Заполняет и возвращает табличный документ.
//
Функция ПечатьМакетПечати(ПараметрыПечати)
	
	Макет = Обработки.УПЖКХ_ОтчетВыгрузкаПоКапремонту.ПолучитьМакет("МакетПечати");
	
	// Табличный документ для вывода на форму печати.
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Временные табличные документы для формирования области данных,
	// которые будут выведены в "ТабличныйДокумент".
	ТабДокДляЗаполненияДанными = Новый ТабличныйДокумент;
	
	// Структура для вывода итоговых данных в табличный документ.
	СтруктураИтоговыхЗначений = Новый Структура;
	
	// Структура текущих колонок таблицы отчета.
	КолонокиТаблицы = ПараметрыПечати.КолонокиТаблицы;
	ТаблицаОтчета = ПараметрыПечати.ТаблицаОтчета.Выгрузить();
	
	// Выводим шапку отчета в "ТабличныйДокумент".
	ЗаголовокОтчета = Макет.ПолучитьОбласть("ЗаголовокОтчета");
	ЗаголовокОтчета.Параметры.ЗаголовокОтчета = СформироватьЗаголовокОтчета(ПараметрыПечати.ВариантОтчета, ПараметрыПечати.Период);
	ТабличныйДокумент.Вывести(ЗаголовокОтчета);
	
	// Выводим шапку таблицы отчета в "ТабличныйДокумент".
	ЗаполнитьШапкуТаблицы(КолонокиТаблицы, Макет, ТабДокДляЗаполненияДанными, ТабличныйДокумент, СтруктураИтоговыхЗначений, ТаблицаОтчета, ПараметрыПечати);
	
	// Выводим строки таблицы отчета с данными.
	втСтруктураЗаполнения = Новый Структура("ЛьготированнаяПлощадьПомещения, ПредъявленоCобственнику, Льгота",
											"-", "-", "-");
	Для Каждого ТекущаяСтрока Из ТаблицаОтчета Цикл
		Если ИмеютсяПустыеЗначения(ТекущаяСтрока, ПараметрыПечати.ВариантОтчета) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В строке № " + ТекущаяСтрока.НомерСтроки + " имеются незаполненные поля.");
		КонецЕсли;
		ТабДокДляЗаполненияДанными.Параметры.Заполнить(ТекущаяСтрока);
		ТабДокДляЗаполненияДанными.Параметры.Заполнить(втСтруктураЗаполнения);
		ТабличныйДокумент.Вывести(ТабДокДляЗаполненияДанными);
	КонецЦикла;
	
	// Выводим итоговые строки в "ТабличныйДокумент".
	ЗаполнитьИтоговыеСтроки(ТабДокДляЗаполненияДанными, СтруктураИтоговыхЗначений, ТабличныйДокумент);
	
	// Выводим область ответственного.
	Если ПараметрыПечати.ВариантОтчета = "Отчет по начислению и оплате взносов (Вариант2)" Тогда
		ОбластьОтветственного = Макет.ПолучитьОбласть("ОбластьОтветственного");
		Если ЗначениеЗаполнено(ПараметрыПечати.Ответственный) Тогда
			
			Ответственный = ПараметрыПечати.Ответственный;
			
			врСтруктураЗаполнения = Новый Структура("ДолжностьОтветственного, Ответственный");
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность
			|ИЗ
			|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(&Период, ФизическоеЛицо = &Ответственный) КАК ОтветственныеЛицаОрганизацийСрезПоследних";
			Запрос.УстановитьПараметр("Ответственный", Ответственный);
			Запрос.УстановитьПараметр("Период",        КонецМесяца(ПараметрыПечати.Период));
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				врСтруктураЗаполнения.ДолжностьОтветственного = Выборка.Должность
			КонецЦикла;
			
			ФамилияИнициалы = УПЖКХ_ТиповыеМетодыСервер.ФамилияИнициалыФизЛица(Ответственный.Наименование);
			Фамилия  = СокрЛП(Лев(ФамилияИнициалы, Найти(ФамилияИнициалы, " ")));
			Инициалы = СокрЛП(Сред(ФамилияИнициалы, Найти(ФамилияИнициалы, " "), СтрДлина(ФамилияИнициалы)));
			
			врСтруктураЗаполнения.Ответственный = Инициалы + " " + Фамилия + " /";
			
			ОбластьОтветственного.Параметры.Заполнить(врСтруктураЗаполнения);
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьОтветственного);
	КонецЕсли;
	
	ОбластьОбъединения = ТабличныйДокумент.Область(1, 1, 1, ТабличныйДокумент.ШиринаТаблицы);
	ОбластьОбъединения.Объединить();
	
	Возврат ТабличныйДокумент;
	
КонецФункции // СформироватьОтчетНаСервере()

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ВспомогательныеПроцедурыИФункции

// Функция формирует и возвращает заголовок отчета.
//
// Входящие параметры:
//  ВариантОтчета - Строка - вариант отчета.
//  Период - Дата - дата формирования отчета.
//
// Выходные данные:
//  ЗаголовокОтчета - Строка - заголовок отчета.
//
Функция СформироватьЗаголовокОтчета(ВариантОтчета, Период)
	
	ЗаголовокОтчета = "";
	Если ВариантОтчета = "Отчет по начислению и оплате взносов (Вариант1)"
	 ИЛИ ВариантОтчета = "Отчет по начислению и оплате взносов (Вариант2)" Тогда
		
		ЗаголовокОтчета = "Отчет" + Символы.ПС
						+ "по сбору и перечислению взносов на капитальный ремонт собственникам помещений "
						+ "в многоквартирных домах "
						+ "за " + Формат(Период, "ДФ=MMMM")
						+ " " + Формат(Год(Период), "ЧГ=0") + "г.";
		
	Иначе
		ЗаголовокОтчета = ВариантОтчета + Символы.ПС
					   + " за капитальный ремонт на "
					   + Формат(КонецМесяца(Период), "ДФ=dd.MM.yyyy");
	КонецЕсли;
	
	Возврат ЗаголовокОтчета;
	
КонецФункции // СформироватьЗаголовокОтчета()

// Заполняет итоговые значения вконце таблицы.
Процедура ЗаполнитьИтоговыеСтроки(врТабличныйДокумент, СтруктураИтоговыхЗначений, ТабличныйДокумент)
	
	врТабличныйДокумент.Параметры.Заполнить(СтруктураИтоговыхЗначений);
	
	врТабДок = Новый ТабличныйДокумент;
	врТабДок.Вывести(врТабличныйДокумент);
	
	НетЛинии = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
	Сплошная = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	Для Каждого ТекОбласть Из врТабДок.Области Цикл
		Если Найти(ТекОбласть.Имя, "Сумма") > 0 ИЛИ Найти(ТекОбласть.Имя, "ПредъявленоCобственнику") > 0 ИЛИ Найти(ТекОбласть.Имя, "Льгота") > 0 Тогда
			ТекОбласть.Обвести(Сплошная, Сплошная, Сплошная, Сплошная);
		Иначе
			ТекОбласть.Обвести(НетЛинии, НетЛинии, НетЛинии, НетЛинии);
		КонецЕсли;
	КонецЦикла;
	
	ТабличныйДокумент.Вывести(врТабДок);
	
КонецПроцедуры // ЗаполнитьИтоговыеСтроки()

// Заполняет шапку таблицы отчета.
Процедура ЗаполнитьШапкуТаблицы(КолонокиТаблицы, Макет, врТабличныйДокумент, ТабличныйДокумент, СтруктураИтоговыхЗначений, ТаблицаОтчета, ПараметрыПечати)
	
	ВывестиСНовойСтроки = Истина;
	Для Каждого ТекКолонка Из КолонокиТаблицы Цикл
		
		ИмяКолонки = ТекКолонка.Ключ;
		
		Если Не КолонокиТаблицы.Свойство(ИмяКолонки) Тогда
			ТаблицаОтчета.Колонки.Удалить(ИмяКолонки);
		Иначе
			
			Если ИмяКолонки = "ПредъявленоCобственнику"
			 ИЛИ ИмяКолонки = "Льгота" Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяПоляЗаголовка = ИмяКолонки + "Заголовок";
			
			Область = Макет.ПолучитьОбласть(ИмяПоляЗаголовка);
			
			Если ИмяКолонки = "ГруппаВТомЧисле" Тогда
				врСтруктураЗаполнения = Новый Структура("ГруппаВТомЧисле, ПредъявленоCобственнику, Льгота",
										КолонокиТаблицы.ГруппаВТомЧисле, КолонокиТаблицы.ПредъявленоCобственнику, КолонокиТаблицы.Льгота);
				Область.Параметры.Заполнить(врСтруктураЗаполнения);
				
				// Формируем строку для заполнения сведениями.
				врИмяКолонки  = "ПредъявленоCобственнику";
				ИмяПоляСтроки = "ПредъявленоCобственникуСтрока";
				врОбласть = Макет.ПолучитьОбласть(ИмяПоляСтроки);
				врТабличныйДокумент.Присоединить(врОбласть);
				врТабличныйДокумент.Области[ИмяПоляСтроки].Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
				врТабличныйДокумент.Области[ИмяПоляСтроки].Параметр   = врИмяКолонки;
				
				// Формируем строку для заполнения сведениями.
				врИмяКолонки  = "Льгота";
				ИмяПоляСтроки = врИмяКолонки + "Строка";
				врОбласть = Макет.ПолучитьОбласть(ИмяПоляСтроки);
				врТабличныйДокумент.Присоединить(врОбласть);
				врТабличныйДокумент.Области[ИмяПоляСтроки].Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
				врТабличныйДокумент.Области[ИмяПоляСтроки].Параметр   = врИмяКолонки;
				
			Иначе
				Область.Параметры[ИмяКолонки] = ТекКолонка.Значение;
				
				ИмяПоляСтроки = ИмяКолонки + "Строка";
				
				ОбластьСтрока = Макет.ПолучитьОбласть(ИмяПоляСтроки);
				ОбластьСтрока.Параметры[ИмяКолонки] = ТекКолонка.Значение;
				
				// Формируем строку для заполнения сведениями.
				врТабличныйДокумент.Присоединить(ОбластьСтрока);
				врТабличныйДокумент.Области[ИмяПоляСтроки].Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр;
				врТабличныйДокумент.Области[ИмяПоляСтроки].Параметр   = ИмяКолонки;
				
			КонецЕсли;
			
			Если ВывестиСНовойСтроки Тогда
				ВывестиСНовойСтроки = Ложь;
				ТабличныйДокумент.Вывести(Область);
			Иначе
				ТабличныйДокумент.Присоединить(Область);
			КонецЕсли;
			
			// Итоговые значения.
			Если Найти(ИмяКолонки, "Сумма") > 0 Тогда
				СтруктураИтоговыхЗначений.Вставить(ИмяКолонки, ТаблицаОтчета.Итог(ИмяКолонки));
			ИначеЕсли Найти(ИмяКолонки, "ГруппаВТомЧисле") > 0 Тогда
				Если НЕ СтруктураИтоговыхЗначений.Свойство("ПредъявленоCобственнику") Тогда
					СтруктураИтоговыхЗначений.Вставить("ПредъявленоCобственнику", "-");
				КонецЕсли;
				Если НЕ СтруктураИтоговыхЗначений.Свойство("Льгота") Тогда
					СтруктураИтоговыхЗначений.Вставить("Льгота", "-");
				КонецЕсли;
			Иначе
				СтруктураИтоговыхЗначений.Вставить(ИмяКолонки, "");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыПечати.ВариантОтчета = "Отчет по начислению и оплате взносов (Вариант2)" Тогда
		ОбластьПП = Макет.ПолучитьОбласть("НомерПП");
		ТабличныйДокумент.Вывести(ОбластьПП);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьШапкуТаблицы()

// Проверяет и выводит наименования пустях полей таблицы отчета.
//
Функция ИмеютсяПустыеЗначения(ТекущаяСтрока, ВариантОтчета) Экспорт
	
	ЕстьПустыеСтроки = Ложь;
	
	Если ВариантОтчета = "Отчет по начислению и оплате взносов (Вариант1)"
	 ИЛИ ВариантОтчета = "Отчет по начислению и оплате взносов (Вариант2)" Тогда
		
		Если Не ЗначениеЗаполнено(ТекущаяСтрока.ПериодНачисленияОплаты)
		   И Не ЗначениеЗаполнено(ТекущаяСтрока.СуммаВзноса)
		   И Не ЗначениеЗаполнено(ТекущаяСтрока.СуммаОплаченногоВзноса)
		   И Не ЗначениеЗаполнено(ТекущаяСтрока.СуммаПени)
		   И Не ЗначениеЗаполнено(ТекущаяСтрока.СуммаОплаченногоПени)
		   И Не ЗначениеЗаполнено(ТекущаяСтрока.СуммаЗадолженностиПоВзносу)
		   И Не ЗначениеЗаполнено(ТекущаяСтрока.СуммаЗадолженностиПоПени) Тогда
			
			ЕстьПустыеСтроки = Истина;
		КонецЕсли;
		
	ИначеЕсли ВариантОтчета = "Отчет по начислению взносов" Тогда
		
		Если ТекущаяСтрока.ДатаНачисленияОплаты = Дата(1,1,1)
		   И Не ЗначениеЗаполнено(ТекущаяСтрока.СуммаВзноса)
		   И Не ЗначениеЗаполнено(ТекущаяСтрока.СуммаПени)
		 ИЛИ Не ЗначениеЗаполнено(ТекущаяСтрока.КодДома) Тогда
			
			ЕстьПустыеСтроки = Истина;
		КонецЕсли;
		
	Иначе
			
		Если ТекущаяСтрока.ДатаНачисленияОплаты = Дата(1,1,1)
		   И Не ЗначениеЗаполнено(ТекущаяСтрока.СуммаОплаченногоВзноса)
		   И Не ЗначениеЗаполнено(ТекущаяСтрока.СуммаОплаченногоПени)
		 ИЛИ Не ЗначениеЗаполнено(ТекущаяСтрока.КодДома) Тогда
			
			ЕстьПустыеСтроки = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	// Условие для всех вариантов отчета.
	Если Не ЗначениеЗаполнено(ТекущаяСтрока.АдресДома)
	 ИЛИ Не ЗначениеЗаполнено(ТекущаяСтрока.НомерПомещения)
	 ИЛИ Не ЗначениеЗаполнено(ТекущаяСтрока.ОбщаяПлощадь)
	 ИЛИ Не ЗначениеЗаполнено(ТекущаяСтрока.ИдентификаторЛС)
	 ИЛИ Не ЗначениеЗаполнено(ТекущаяСтрока.ФИОСобственника) Тогда
		ЕстьПустыеСтроки = Истина;
	КонецЕсли;
	
	Возврат ЕстьПустыеСтроки;
	
КонецФункции // ИмеютсяПустыеЗначения()

#КонецОбласти

#КонецЕсли