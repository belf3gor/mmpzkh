#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжиданияАктуализации Экспорт;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОгобработка)

	Монитор = Обработки.МониторНалоговИОтчетности;

	// Разрешим выбор только тех организаций, данные которых доступны на чтение.
	ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
	УстановитьПараметрыВыбораОрганизации(ЭтотОбъект, ДоступныеОрганизации);
	
	Если ЗначениеЗаполнено(Параметры.Организация) Тогда
		Организация = Параметры.Организация;
	Иначе
		Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	Если ДоступныеОрганизации.Найти(Организация) = Неопределено Тогда
		Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	ОрганизацияПредставление = Организация;
	
	Элементы.ШапкаНалоги.Заголовок = Монитор.ЗаголовокОплатаНалогов();
	Элементы.ШапкаОтчетность.Заголовок = Монитор.ЗаголовокСдачаОтчетности();
	
	ЕстьПравоНаАктуализацию   = ПравоДоступа("Изменение", Метаданные.Документы.РегламентнаяОперация);
	ЕстьПравоВыполненияЗадачи = КалендарьБухгалтера.ПравоВыполненияЗадачи(Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПустаяСсылка());
	
	АктуализацияВозможна = Обработки.ЗакрытиеМесяца.АктуализацияВозможна();
	
	РазрешенУчетРегулярнойДеятельности = ТарификацияБПВызовСервераПовтИсп.РазрешенУчетРегулярнойДеятельности();
	
	УстановитьПараметрыЗависимыеОтОрганизации();
	
	УстановитьОформлениеМонитора();
	
	ПереключитьВРежимОжидания(Истина);
	
	Элементы.РекомендацияПоОбновлению.Видимость = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(ВРег("МониторНалоговИОтчетности"), 
		ВРег("РекомендацияПоОбновлению"), 
		Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ЗапуститьОбновление();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПерсонализированныеПредложенияСервисовКлиент.ПерейтиПоСсылкеБаннера(
		НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, Баннер, ЭтотОбъект);
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовИКомандФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПредставление = Организация;
	
	УстановитьПараметрыЗависимыеОтОрганизации();
	
	ЗапуститьОбновление();
	
	ПоказатьБаннерПерсонализированногоПредложения();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СсылкаНалогОтчетНажатие(Элемент)
	
	ОбработатьСсылкуНаНалогОтчет(Элемент, АдресСсылокНадписей);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НавигационнаяСсылкаНажатие(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработатьСсылкуНаНалогОтчет(Элемент, АдресНавигационныхСсылок);
	
КонецПроцедуры

&НаКлиенте
Процедура Актуализировать(Команда)
	
	АктуализироватьДанные();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМонитор(Команда)
	
	УстановитьПараметрыЗависимыеОтОрганизации();
	ЗапуститьОбновление();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияАктуальностьОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОбработатьСсылкуНаПереходВЗакрытиеМесяца(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьРекомендациюПоОбновлениюНажатие(Элемент)
	
	Элементы.РекомендацияПоОбновлению.Видимость = Ложь;
	СохранитьОтключениеРекомендацииПоОбновлению();
	
	ПоказатьБаннерПерсонализированногоПредложения();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаНалоговИОтчетов(Команда)
	
	ПараметрыОткрытия = ОбщегоНазначенияБПКлиентСервер.ПараметрыОткрытияФормыСОжиданием();
	ПараметрыОткрытия.Заголовок = НСтр("ru = 'Настройки налогов и отчетов'");
	ПараметрыОткрытия.ИмяФормы = "ОбщаяФорма.НалогиИОтчеты";
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Организация);
	
	ОбщегоНазначенияБПКлиент.ОткрытьФормуСОжиданием(ПараметрыОткрытия, ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьБаннерНажатие(Элемент)
	
	ОтключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер");
	
	ЗакрытьБаннер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредыдущийБаннерНажатие(Элемент)
	
	ОтключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер");
	
	ПерсонализированныеПредложенияСервисовКлиент.УстановитьРежимОжиданияНаБаннере(ЭтотОбъект);
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьПредыдущийБаннер", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СледующийБаннерНажатие(Элемент)
	
	ОтключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер");
	
	ПерсонализированныеПредложенияСервисовКлиент.УстановитьРежимОжиданияНаБаннере(ЭтотОбъект);
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Представление

&НаСервере
Процедура РазместитьВИнтерфейсе()
	
	Монитор = Обработки.МониторНалоговИОтчетности;
	
	ИндикаторыМонитора = ПолучитьИзВременногоХранилища(АдресРезультата);
	ИндикаторыМонитора = ИндикаторыМонитора.Получить(); // получение из хранилища значения.
	
	ВключенныеЗадачи    = ИндикаторыМонитора.ВключенныеЗадачи;
	НалоговыеИндикаторы = ИндикаторыМонитора.НалоговыеИндикаторы;
	ОтчетныеИндикаторы  = ИндикаторыМонитора.ОтчетныеИндикаторы;
	НалоговыеИндикаторы.Индексы.Добавить("Владелец");
	ОтчетныеИндикаторы.Индексы.Добавить("Владелец");
	
	// Очистка.
	ПараметрыСсылокНадписей = Новый Соответствие;
	ПараметрыНавигационныхСсылок = Новый Соответствие;
	ЛимитСсылок = Монитор.ЛимитСсылокИндикатора();
	Столбцы    = Новый Массив(3);
	Столбцы[0] = 1; // первый столбец монитора с максимум 1-ой декорацией.
	Столбцы[1] = ЛимитСсылок + 3; // второй столбец монитора с максимум декораций согласно лимиту плюс запас
	Столбцы[2] = ЛимитСсылок + 3; // третий столбец монитора с максимум декораций согласно лимиту плюс запас.
	
	Для СчРяд = 1 По ТекущееЧислоРядов Цикл
		Элементы[ИмяРяд() + Строка(СчРяд)].Видимость = Ложь;
		Для СчСтолбец = 0 По Столбцы.ВГраница() Цикл 
			Для СчСтрока = 0 По Столбцы[СчСтолбец] - 1 Цикл
				ЭлементФормы = Элементы.Найти(ИмяСтрока() + Строка(СчРяд) + Строка(СчСтолбец) + Строка(СчСтрока));
				Если ЭлементФормы <> Неопределено Тогда
					ЭлементФормы.Видимость = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// Формирование.
	РядыБлоков = Монитор.СформироватьРядыБлоков(ВключенныеЗадачи, НалоговыеИндикаторы, ОтчетныеИндикаторы);
	
	СчРяд = 1;
	Для Каждого Ряд Из РядыБлоков Цикл
	
		РазместитьНовыйРяд(СчРяд);
		
		Элементы[ИмяРяд() + Строка(СчРяд)].Видимость = Истина;
		ЭлементПоказателя = Элементы[ИмяСтрока() + Строка(СчРяд) + "00"];
		ЭлементПоказателя.Видимость = Истина;
		ЭлементПоказателя.Заголовок = Строка(СчРяд) + ". " + Ряд.СтрокаЗадачи.ИмяЗадачи;
		
		БлокОтчетов = Монитор.СоздатьЭкземплярБлока(Ряд, Ложь, ЭтотОбъект);
		ЗаполнитьЭлементБлока(БлокОтчетов, СчРяд, Ложь, ПараметрыСсылокНадписей, ПараметрыНавигационныхСсылок);
		
		БлокНалога = Монитор.СоздатьЭкземплярБлока(Ряд, Истина, ЭтотОбъект);
		ЗаполнитьЭлементБлока(БлокНалога, СчРяд, Истина, ПараметрыСсылокНадписей, ПараметрыНавигационныхСсылок);
		
		СчРяд = СчРяд + 1;
	
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ПараметрыСсылокНадписей, АдресСсылокНадписей);
	ПоместитьВоВременноеХранилище(ПараметрыНавигационныхСсылок, АдресНавигационныхСсылок);
	
	ВсеЗадачиВыполнены = ИндикаторыМонитора.ВсеЗадачиВыполнены;
	
	ПереключитьВРежимОжидания(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура РазместитьНовыйРяд(СчРяд)
	
	Монитор = Обработки.МониторНалоговИОтчетности;
	
	Если СчРяд <= ТекущееЧислоРядов Тогда
		// Уже создан ряд при предыдущем выполнении отчета или есть предопределенный.
		Возврат
	КонецЕсли;
	
	ИсклСвойстваГруппы = "ПутьКДаннымЗаголовка";

	Ряд = Строка(СчРяд);
	
	НовыйРяд = Элементы.Добавить(ИмяРяд() + Ряд, Тип("ГруппаФормы"), Элементы.ДанныеМонитора);
	ЗаполнитьЗначенияСвойств(НовыйРяд, Элементы.Ряд1,, ИсклСвойстваГруппы);
	
	Столбцы	= Новый Массив(3);
	Столбцы[0] = 1; // первый столбец монитора с минимум 1-ой декорацией.
	Столбцы[1] = 3; // второй столбец монитора с минимум 3-я декорациями.
	Столбцы[2] = 3; // третий столбец монитора с минимум 3-я декорациями.

	Для Сч = 0 По Столбцы.Количество() - 1 Цикл
		Столб = Строка(Сч);
		НовыйГруппаКонтейнер = Элементы.Добавить(ИмяГруппаКонтейнер() + Ряд + Столб, Тип("ГруппаФормы"), НовыйРяд);
		ЗаполнитьЗначенияСвойств(НовыйГруппаКонтейнер, Элементы[ИмяГруппаКонтейнер() + "1" + Столб],, ИсклСвойстваГруппы);
		
		НовыйКонтейнер = Элементы.Добавить(ИмяКонтейнер() + Ряд + Столб, Тип("ГруппаФормы"), НовыйГруппаКонтейнер);
		ЗаполнитьЗначенияСвойств(НовыйКонтейнер, Элементы[ИмяКонтейнер() + "1" + Столб],, ИсклСвойстваГруппы);
		
		Для СчСтрока = 0 По Столбцы[Сч] - 1 Цикл
			НомерСтроки = Строка(СчСтрока);
			НоваяСтрокаИмя = ИмяСтрока() + Ряд + Столб + НомерСтроки;
			НовыйСтрока = Элементы.Добавить(НоваяСтрокаИмя, Тип("ДекорацияФормы"), НовыйКонтейнер);
			ЗаполнитьЗначенияСвойств(НовыйСтрока, Элементы[ИмяСтрока() + "1" + Столб + НомерСтроки]);
			НовыйСтрока.Заголовок = "";
			НовыйСтрока.Видимость = Ложь;
		КонецЦикла;
	КонецЦикла;
	
	ТекущееЧислоРядов = СчРяд;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьЭлементБлока(БлокИндикатора, СчРяд, ЭтоНалог, ПараметрыСсылокНадписей = Неопределено, ПараметрыНавигационныхСсылок = Неопределено)
	
	Монитор = Обработки.МониторНалоговИОтчетности;
	Раздел = ?(ЭтоНалог, "2", "1");
	
	ГруппаКонтейнер = Элементы[ИмяГруппаКонтейнер() + Строка(СчРяд) + Раздел];
	ЗаполнитьЗначенияСвойств(ГруппаКонтейнер, БлокИндикатора);
	
	Для СчСтрока = 0 По БлокИндикатора.КолвоСтрок - 1 Цикл
		
		// Заполняем элементы формы.
		ИмяЭлемента = ИмяСтрока() + Строка(СчРяд) + Раздел + Строка(СчСтрока);
		ЭлементСтроки = Элементы.Найти(ИмяЭлемента);
		Если ЭлементСтроки = Неопределено Тогда
			ИмяРодителя =  ИмяКонтейнер() + Строка(СчРяд) + Раздел;
			Родитель = Элементы.Найти(ИмяРодителя);
			ЭлементСтроки = Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"), Родитель);
			ЗаполнитьЗначенияСвойств(ЭлементСтроки, Элементы.Строка112);
		КонецЕсли;
		
		ЭлементСтроки.Заголовок = БлокИндикатора[ИмяСтрока() + СчСтрока];
		ЭлементСтроки.Видимость = БлокИндикатора[ИмяСтрока() + "Видимость" + СчСтрока];
		
		// Заполняем параметры ссылок.
		ПараметрыСсылки = Неопределено;
		Если БлокИндикатора.Свойство("СтрокаПараметрыСсылки" + СчСтрока, ПараметрыСсылки) И ПараметрыСсылокНадписей <> Неопределено Тогда
			ПараметрыСсылокНадписей.Вставить(ИмяЭлемента, ПараметрыСсылки);
			ЭлементСтроки.УстановитьДействие("Нажатие", "Подключаемый_СсылкаНалогОтчетНажатие");
			ЭлементСтроки.Доступность = ЕстьПравоВыполненияЗадачи;
		КонецЕсли;
		
		// Заполняем навигационные ссылки.
		Если ПараметрыНавигационныхСсылок <> Неопределено И БлокИндикатора.Свойство("ПараметрыНавигационныхСсылок") Тогда
			ПараметрыНавигационныхСсылок.Вставить(ИмяЭлемента, БлокИндикатора.ПараметрыНавигационныхСсылок);
			ЭлементСтроки.УстановитьДействие("Нажатие", "Подключаемый_СсылкаНалогОтчетНажатие");
			ЭлементСтроки.УстановитьДействие("ОбработкаНавигационнойСсылки", "Подключаемый_НавигационнаяСсылкаНажатие");
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

#КонецОбласти

#Область ФоновоеФормирование

&НаКлиенте
Процедура ЗапуститьОбновление()
	
	Если Не ФоновыеЗаданияАктивны(ИдентификаторЗадания, ИдентификаторЗаданияАктуализации) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_НачатьФормированиеМонитора",
			БухгалтерскиеОтчетыКлиент.ИнтервалЗапускаФормированияОтчетаПриОткрытии(), Истина);
	КонецЕсли;
	
КонецПРоцедуры

&НаКлиенте
Процедура Подключаемый_НачатьФормированиеМонитора()
	НачатьФормированиеМонитора();
КонецПроцедуры

&НаКлиенте
Процедура НачатьФормированиеМонитора(ПроверитьАктуальность = Истина)
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.Актуализация.Видимость = Ложь;
	
	Результат = ВыполнитьВФоне();

	ПараметрыОжидания     = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершитьФормированиеМонитора", ЭтотОбъект, ПроверитьАктуальность);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, ОповещениеОЗавершении, ПараметрыОжидания);

КонецПроцедуры

&НаСервере
Процедура ПереключитьВРежимОжидания(ВключитьОжидание)
	
	Элементы.Ожидание.Видимость = ВключитьОжидание;
	Элементы.ДанныеМонитора.Видимость = Не ВключитьОжидание;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Элементы.ЖдатьТекст.Заголовок = НСтр("ru = 'Пожалуйста, подождите…'");
	Иначе
		Элементы.ЖдатьТекст.Заголовок = НСтр("ru = 'Укажите организацию для формирования монитора.'");
	КонецЕсли;
	
КонецПРоцедуры

&НаСервереБезКонтекста
Функция ФоновыеЗаданияАктивны(знач ИдентификаторЗадания, знач ИдентификаторЗаданияАктуализации)
	
	ФоновоеЗаданиеМонитора = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	ФоновоеЗаданиеАктуализации = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗаданияАктуализации);
	
	Если (ФоновоеЗаданиеМонитора <> Неопределено И ФоновоеЗаданиеМонитора.Состояние = СостояниеФоновогоЗадания.Активно) 
		Или (ФоновоеЗаданиеАктуализации <> Неопределено И ФоновоеЗаданиеАктуализации.Состояние = СостояниеФоновогоЗадания.Активно)  Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ВыполнитьВФоне()
	
	ПереключитьВРежимОжидания(Истина);

	НаименованиеЗадания = НСтр("ru = 'Обновление монитора'");
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Организация",                   Организация);
	ПараметрыЗадания.Вставить("ТекущийДень",                   Обработки.МониторНалоговИОтчетности.ТекущаяДатаМонитора());
	ПараметрыЗадания.Вставить("ОтсутствуютПатенты",            ОтсутствуютПатенты);
	ПараметрыЗадания.Вставить("ОтсутствуютВидыДеятельностиЕНВД", ОтсутствуютВидыДеятельностиЕНВД);
	ПараметрыЗадания.Вставить("УпрощеннаяНулеваяОтчетность",   УпрощеннаяНулеваяОтчетность);
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.ОжидатьЗавершение = 0;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("Обработки.МониторНалоговИОтчетности.СФормироватьПоказателиМонитораВФоне", 
		ПараметрыЗадания, ПараметрыВыполненияВФоне);
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьФормированиеМонитора(Результат, ПроверитьАктуальность) Экспорт
	
	Если Результат = Неопределено Тогда // Задание было отменено.
		Возврат;
	КонецЕсли;
	
	АдресРезультата = Результат.АдресРезультата;
	РазместитьВИнтерфейсе();
	АдресРезультата = Неопределено;
	
	Если ПроверитьАктуальность Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьАктуальность", 0.1, Истина);
	КонецЕсли;
	
	Если НЕ РазрешенУчетРегулярнойДеятельности И ВсеЗадачиВыполнены Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПоказатьПриглашениеПознакомитьсяСПриложением", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаАктуальности

&НаКлиенте
Процедура Подключаемый_ПроверитьАктуальность()
	
	ЗаданиеАктуализации = ЗакрытиеМесяцаВызовСервера.НайтиФоновоеЗаданиеАктуализацииПоОрганизации(
		Организация, ИдентификаторЗаданияАктуализации); 
	
	Если ЗаданиеАктуализации = Неопределено Или Не ЗначениеЗаполнено(ЗаданиеАктуализации.УникальныйИдентификатор) Тогда
		ПроверитьАктуальностьДанных();
	Иначе
		
		Если ИдентификаторЗаданияАктуализации <> ЗаданиеАктуализации.УникальныйИдентификатор Тогда
			// Задание запущено в другой форме
			ЗаданиеЗапущеноВДругойФорме = Истина;
			ИдентификаторЗаданияАктуализации = ЗаданиеАктуализации.УникальныйИдентификатор;
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеАктуализации",
				ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал,
				Истина);
			Элементы.ИдетАктуализация.Видимость = Истина;
		Иначе
			ЗаданиеЗапущеноВДругойФорме = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьАктуальностьДанных()
	
	Элементы.ИдетАктуализация.Видимость = Ложь;
	Элементы.ИдетПроверкаАктуальности.Видимость = Истина;
	Элементы.ТребуетсяАктуализация.Видимость    = Ложь;

	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	
	ИдентификаторЗаданияАктуализации = Неопределено;
	
	УИДЗамера = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь, "АктуализацияДанныхТребуетсяАктуализацияЗаПериод");
	
	ПараметрыПроверки = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыПроверкиАктуальности();
	ПараметрыПроверки.Организация                  = Организация;
	ПараметрыПроверки.Период                       = ТекущийДень;
	ПараметрыПроверки.УникальныйИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыПроверки.УИДЗамера                    = УИДЗамера;
	
	РезультатВыполнения = ЗакрытиеМесяцаВызовСервера.ПроверитьАктуальность(ПараметрыПроверки);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;

	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьРезультатПроверкиАктуальности", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатВыполнения, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеАктуализации()
	
	Если ЗакрытиеМесяцаВызовСервера.ЗаданиеВыполнено(ИдентификаторЗаданияАктуализации) Тогда
		ОбработатьРезультатАктуализации();
		ИдентификаторЗаданияАктуализации = Неопределено;
	Иначе
		ОбновитьПроцентПрогресса();
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации",
			ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатПроверкиАктуальности(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	РезультатПроверки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если РезультатПроверки.УИДЗамера <> Неопределено Тогда
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(РезультатПроверки.УИДЗамера);
	КонецЕсли;
	
	Если НЕ РезультатПроверки.ТребуетсяАктуализация Тогда
		ТребуетсяАктуализация = Ложь;
		// Монитор вызывает различные помощники, в которых используется собственная проверка актуальности, период  которой 
		// может не совпадать с монитором, поэтому нужно обрабатывать оповещения только из самого монитора. 
		// Для этого добавляем параметр ВызовИзМонитора.
		Оповестить("АктуализацияЗавершенаУспешно", Новый Структура("Организация, ВызовИзМонитора", Организация, Истина));
	Иначе
		ПараметрыОповещения = Новый Структура("Организация, ДатаАктуальности", 
			Организация, РезультатПроверки.ДатаАктуальности);
		Оповестить("ТребуетсяАктуализация", ПараметрыОповещения);
		ТребуетсяАктуализация = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатАктуализации()
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	
	Если ЗаданиеЗапущеноВДругойФорме Тогда
		ПроверитьАктуальностьДанных();
		Возврат;
	КонецЕсли;
	
	РезультатАктуализации = ПолучитьИзВременногоХранилища(АдресХранилищаАктуализации);
	
	Если РезультатАктуализации.Выполнено Тогда
		ПараметрыОповещения = Новый Структура("Организация", Организация);
		Оповестить("АктуализацияЗавершенаУспешно", ПараметрыОповещения);
		НачатьФормированиеМонитора(Ложь);
	Иначе
		ЗакрытиеМесяцаКлиент.ПоказатьОшибкиАктуализации(ЭтотОбъект, РезультатАктуализации);
		Оповестить("АктуализацияОтменена", Новый Структура("Организация", Организация));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АктуализироватьДанные()
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	
	ОтобразитьСостояниеАктуализации();
	
	ПараметрыАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыАктуализации();
	ПараметрыАктуализации.Организация                  = Организация;
	ПараметрыАктуализации.Период                       = ТекущийДень;
	ПараметрыАктуализации.ИдентификаторЗадания         = ИдентификаторЗаданияАктуализации;
	ПараметрыАктуализации.УникальныйИдентификаторФормы = УникальныйИдентификатор;

	РезультатВыполнения = ЗакрытиеМесяцаВызовСервера.АктуализироватьДанные(ПараметрыАктуализации);
	
	АдресХранилищаАктуализации = РезультатВыполнения.АдресХранилища;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ОбработатьРезультатАктуализации();
		ИдентификаторЗаданияАктуализации = Неопределено;
	Иначе
		ИдентификаторЗаданияАктуализации = РезультатВыполнения.ИдентификаторЗадания;
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
		ПодключитьОбработчикОжидания(
			"Подключаемый_ПроверитьВыполнениеАктуализации",
			ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал,
			Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСостояниеАктуализации(ВыполняемоеЗаданиеАктуализации = Неопределено) 
	
	ИдетАктуализация = ВыполняемоеЗаданиеАктуализации = Неопределено;
	
	Если НЕ ИдетАктуализация Тогда
		
		// Актуализация выполняется в другом отчете или другим пользователем.
		Если ПустаяСтрока(ВыполняемоеЗаданиеАктуализации.УникальныйИдентификатор) Тогда
			// Актуализация выполняется другим пользователем в файловом режиме.
			ТекстПриАктуализации = НСтр("ru = 'Актуализация данных, запущенная другим пользователем, еще не закончилась. Данные для расчета могут быть неактуальны.'");
		ИначеЕсли ВыполняемоеЗаданиеАктуализации.Пользователь <> ПользователиКлиентСервер.ТекущийПользователь() Тогда 
			// Актуализация выполняется другим пользователем в клиент-серверном режиме.
			ТекстПриАктуализации = СтрШаблон(НСтр("ru = 'Идет актуализация данных пользователем %1. Данные для расчета могут быть неактуальны.'"),
				ВыполняемоеЗаданиеАктуализации.Пользователь);
		Иначе
			// Актуализация выполняется текущим пользователем в другом отчете.
			ТекстПриАктуализации = НСтр("ru = 'Актуализация данных, запущенная в другом отчете, еще не закончилась. Данные для расчета могут быть неактуальны.'");
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ИдетАктуализация.Видимость = Истина;
	Элементы.ИдетПроверкаАктуальности.Видимость = Ложь;
	Элементы.ТребуетсяАктуализация.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если (ИмяСобытия = "АктуализацияЗавершенаУспешно"
		И Параметр.Свойство("Организация")
		И Организация = Параметр.Организация
		И Параметр.Свойство("ВызовИзМонитора")
		И Параметр.ВызовИзМонитора) Тогда
		
		ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
		Элементы.Актуализация.Видимость = Ложь;
		ДатаАктуальности = МаксДата;
		
	ИначеЕсли (ИмяСобытия = "ТребуетсяАктуализация" Или ИмяСобытия = "АктуализацияОтменена")
		И (Параметр.Свойство("Организация")
		И Организация = Параметр.Организация 
		И Параметр.Свойство("ДатаАктуальности")) Тогда
		
		ДатаАктуальности = Параметр.ДатаАктуальности;
		
		Элементы.Актуализация.Видимость     = Истина;
		Элементы.ИдетАктуализация.Видимость = Ложь;
		Элементы.ИдетПроверкаАктуальности.Видимость = Ложь;
		Элементы.ТребуетсяАктуализация.Видимость    = Истина;
		
		МассивПодстрок = Новый Массив();
		ТекстДанныеУчетаНеАктуальны = НСтр("ru='Данные учета неактуальны с '");
		МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(ТекстДанныеУчетаНеАктуальны));
		МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(Формат(ДатаАктуальности, "ДЛФ=D"), Новый Шрифт(,, Истина)));
		МассивПодстрок.Добавить(Новый ФорматированнаяСтрока("."));
		
		Если АктуализацияВозможна Тогда
			Элементы.Актуализировать.Видимость = ЕстьПравоНаАктуализацию;
		Иначе
			МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(" " + НСтр("ru='Рекомендуется выполнить '")));
			МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='закрытие месяца'"),,,, "e1cib/app/Обработка.ЗакрытиеМесяца"));
			МассивПодстрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = ' и сформировать монитор повторно.'")));
			Элементы.Актуализировать.Видимость = Ложь;
		КонецЕсли;
		
		Элементы.ДекорацияАктуальность.Заголовок = Новый ФорматированнаяСтрока(МассивПодстрок);
		
	ИначеЕсли ИмяСобытия = "АктуализацияОтменена" Тогда
		
		Элементы.Актуализация.Видимость     = Истина;
		Элементы.ИдетАктуализация.Видимость = Ложь;
		Элементы.ИдетПроверкаАктуальности.Видимость = Ложь;
		Элементы.ТребуетсяАктуализация.Видимость    = Истина;
		
	ИначеЕсли ИмяСобытия = "ИзменениеУчетнойПолитики" Тогда
		
		Если Параметр = Организация Тогда
			ЗапуститьОбновление();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_Организации" Тогда
		
		Если Источник = Организация Тогда
			ОрганизацияПредставление = Организация;
			УстановитьПараметрыЗависимыеОтОрганизации();
			ЗапуститьОбновление();
		КонецЕсли;
	
	ИначеЕсли ИмяСобытия = "ОтчетыПрошлыхПериодов_ПроверкаЗавершена" Тогда
		
		Если Источник = Организация Тогда
			ОрганизацияПредставление = Организация;
			УстановитьПараметрыЗависимыеОтОрганизации();
			ЗапуститьОбновление();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "НалогиПрошлыхПериодов_ИзмененыОстатки" Тогда
		
		Если Источник = Организация Тогда
			ОрганизацияПредставление = Организация;
			УстановитьПараметрыЗависимыеОтОрганизации();
			ЗапуститьОбновление();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ПомощникОплатыВзносовИП_ИзменениеСостояния" Тогда
		
		ЗапуститьОбновление();
		
	ИначеЕсли ИмяСобытия = "Позиционирование в списке отчетов"
		Или ИмяСобытия = "Изменение пометки удаления объекта"
		Или ИмяСобытия = "Запись_РегламентированныйОтчет" Тогда
		
		// Записан регламентированный отчет или изменен его статус.
		
		Если ТипЗнч(Параметр) = Тип("Структура")
			И ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Параметр, "Организация") = Организация Тогда
			
			ЗапуститьОбновление();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПроцентПрогресса()
	
	Прогресс = ЗакрытиеМесяцаВызовСервера.ПрочитатьПрогресс(ИдентификаторЗаданияАктуализации);
	
	Если ТипЗнч(Прогресс) = Тип("Структура") И Прогресс.Свойство("Процент") Тогда
		Процент = Мин(Прогресс.Процент, 99);
		ПрогрессорАктуализации = Строка(Процент) + "%.";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСсылкуНаПереходВЗакрытиеМесяца(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПараметрыАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыйПараметрыАктуализацииОтчета();
	ПараметрыАктуализации.Организация = Организация;
	ПараметрыАктуализации.ДатаАктуальности = ДатаАктуальности;
	ПараметрыАктуализации.ДатаОкончанияАктуализации = ТекущийДень;
	
	ЗакрытиеМесяцаКлиент.ТекстПриНеобходимостиАктуализацииОбработкаНавигационнойСсылки(
		НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, ЭтотОбъект, ПараметрыАктуализации);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеМесяцаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "СформироватьОтчет" Тогда
		
		БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализации(ЭтотОбъект);
		Активизировать();
		ЗапуститьОбновление();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьПараметрыЗависимыеОтОрганизации()
	
	ТекущийДень = Обработки.МониторНалоговИОтчетности.ТекущаяДатаМонитора();
	
	ЗависимыеОтОрганизации = Обработки.МониторНалоговИОтчетности.ПараметрыЗависимыеОтОрганизации(Организация, ТекущийДень);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗависимыеОтОрганизации);
	ВсеЗадачиВыполнены = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСсылкуНаНалогОтчет(Элемент, АдресХранилища)
	
	СтрокиСсылок = ПолучитьИзВременногоХранилища(АдресХранилища);
	ОписаниеДействия = СтрокиСсылок[Элемент.Имя];
	
	Если ОписаниеДействия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ОписаниеДействия) = Тип("Структура") Тогда
		ВыполнениеЗадачБухгалтераКлиент.ВыполнитьДействие(ОписаниеДействия);
	ИначеЕсли ТипЗнч(ОписаниеДействия) = Тип("Массив") Тогда
		ОткрытьФорму("Обработка.МониторНалоговИОтчетности.Форма.ФормаНесданныхОтчетов", 
			Новый Структура("ПараметрыСсылок", ОписаниеДействия), ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеМонитора()
	
	Монитор = Обработки.МониторНалоговИОтчетности;
	Если ПолучитьФункциональнуюОпцию("ИнтерфейсТаксиПростой") Тогда
		Заголовок = НСтр("ru='Налоги'");
	КонецЕсли;
	
	АдресСсылокНадписей = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	АдресНавигационныхСсылок = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	КорректныйПериод = ОбщегоНазначенияБПСобытия.КорректныйПериодВводаДокументов();
	
	МаксДата = ДобавитьМесяц(КорректныйПериод.КонецКорректногоПериода, 24);
	МинДата = ДобавитьМесяц(КорректныйПериод.НачалоКорректногоПериода, - 24);
	ШрифтТекста     = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,, 11);
	ШрифтСсылок     = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,, 11);
	ШрифтЗаголовков = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,, 14);
	
	ЦветСерыйБлок   = ЦветаСтиля.ЦветМонитораЗадачаНеПоддерживается;
	ЦветЗеленыйБлок = ЦветаСтиля.ЦветМонитораВсеВыполнено;
	ЦветЖелтыйБлок  = ЦветаСтиля.ЦветМонитораПораВыполнятьЗадачу;
	ЦветКрасныйБлок = ЦветаСтиля.ЦветМонитораЗадачаПросрочена;
	ЦветПустойБлок  = ЦветаСтиля.ЦветФонаБлоковИнформационнойПанели;
	
	РадостныйСмайлик = БиблиотекаКартинок.РадостныйСмайлик;
	
	ТекущееЧислоРядов = 6;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяРяд()
	Возврат "Ряд";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяСтрока()
	Возврат "Строка";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяГруппаКонтейнер()
	Возврат "ГруппаКонтейнер";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяКонтейнер()
	Возврат "Контейнер";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьПараметрыВыбораОрганизации(Форма, ДоступныеОрганизации)
	
	Элементы = Форма.Элементы;

	ПараметрВыбораОтборПоОрганизации     = Новый ПараметрВыбора("Отбор.Ссылка", ДоступныеОрганизации);
	ПараметрыВыбораОрганизации           = Новый Массив();
	ПараметрыВыбораОрганизации.Добавить(ПараметрВыбораОтборПоОрганизации);
	Элементы.Организация.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораОрганизации);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПоказатьПриглашениеПознакомитьсяСПриложением()
	
	ОписаниеСистемыНавигации = ?(ПолучитьФункциональнуюОпциюФормы("ИнтерфейсТаксиПростой"),
		НСтр("ru='Воспользуйтесь меню в верхней части экрана.'"),
		НСтр("ru='Воспользуйтесь меню в левой части экрана.'"));
	
	ТекстПредупреждения = Новый ФорматированнаяСтрока(
		Новый ФорматированнаяСтрока(НСтр("ru='Поздравляем!'"), 
			Новый Шрифт(, 12, Истина)),
		НСтр("ru='
		|На сегодняшний день вы сдали всю отчетность и уплатили все налоги.
		|
		|Познакомьтесь в демо-режиме с другими удобными функциями приложения, например:
		| • Выпишите счет на оплату вашему покупателю;
		| • Создайте платежное поручение для вашего поставщика;
		| • Оформите накладную на товары.
		|'"),
		ОписаниеСистемыНавигации,
		Символы.ПС);
	
	ПоказатьПредупреждение(, ТекстПредупреждения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьОтключениеРекомендацииПоОбновлению()
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(ВРег("МониторНалоговИОтчетности"), ВРег("РекомендацияПоОбновлению"), Ложь);
	
КонецПроцедуры

#Область Баннер

&НаКлиенте
Процедура Подключаемый_УстановитьБаннер()
	
	УстановитьБаннер();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьСледующийБаннер()
	
	// Поскольку обработчик может вызываться не только интерактивно пользователем,
	// но и автоматически по таймеру, меняем баннер при условии, что форма находится в фокусе.
	Если НЕ ВводДоступен() Тогда
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер",
			ПерсонализированныеПредложенияСервисовКлиент.ИнтервалПереключенияБаннеров(), Истина);
		Возврат;
	КонецЕсли;
	
	УстановитьБаннер();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьПредыдущийБаннер()
	
	УстановитьБаннер(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьБаннер(ПоказатьПредыдущий = Ложь)
	
	ДлительнаяОперация = ПолучитьБаннерНаСервере(ПоказатьПредыдущий);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		
		Обработчик = Новый ОписаниеОповещения("ПослеПолученияБаннераВФоне", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПолученияБаннераВФоне(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		УстановитьБаннерНаФорме(ДлительнаяОперация.АдресРезультата);
		ПодключитьОбработчикОжидания("Подключаемый_УстановитьСледующийБаннер",
			ПерсонализированныеПредложенияСервисовКлиент.ИнтервалПереключенияБаннеров(), Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьБаннерНаСервере(ПоказатьПредыдущий)
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение баннера в фоне'");
	НастройкиЗапуска.ЗапуститьВФоне = Истина;
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Организация", Организация);
	СтруктураПараметров.Вставить("Размещение", ПерсонализированныеПредложенияСервисов.ИмяРазмещенияМониторНалогов());
	СтруктураПараметров.Вставить("ПоказатьПредыдущий", ПоказатьПредыдущий);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"ПерсонализированныеПредложенияСервисов.ПолучитьБаннер",
		СтруктураПараметров,
		НастройкиЗапуска);
	
КонецФункции

&НаСервере
Процедура УстановитьБаннерНаФорме(АдресРезультата)
	
	ПерсонализированныеПредложенияСервисов.УстановитьБаннерНаФорме(ЭтотОбъект, АдресРезультата);
	
КонецПроцедуры

&НаСервере
Процедура ЗакрытьБаннер()
	
	ПерсонализированныеПредложенияСервисов.ЗакрытьБаннер(ЭтотОбъект, Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБаннерПерсонализированногоПредложения()
	
	Если Элементы.ИдетАктуализация.Видимость
		ИЛИ Элементы.ТребуетсяАктуализация.Видимость
		ИЛИ Элементы.РекомендацияПоОбновлению.Видимость Тогда 
		
		Возврат;
		
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьБаннер", 1, Истина);

КонецПроцедуры

#КонецОбласти

#КонецОбласти
