
#Область ОбработчикиСобытийформы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Организация             = Параметры.Организация;
	Правило                 = Параметры.Правило;
	ОплатитьНалогПослеТеста = Параметры.ОплатитьНалогПослеТеста;
	КодЗадачи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Правило, "Владелец.Код");
	
	ШаблонЗаголовок = НСтр("ru = 'Была ли у вас задолженность по УСН на начало %1 года?'");
	Период = ПомощникиПоУплатеНалоговИВзносов.ГраницаОтчетностиПрошлыхПериодов(Организация);
	ГодЗаголовкаОпроса = Год(КонецГода(Период) + 1);
	Заголовок = СтрШаблон(ШаблонЗаголовок, Формат(ГодЗаголовкаОпроса, "ЧГ=0"));
	
	ЗаполнитьЗадолженность();
	
	НалогЗадолженностьПоДекларации = Обработки.ПодготовкаОтчетностиПрошлыхПериодов.СуммаНалогаПрошлыхЛет(
		Организация,
		Обработки.ПодготовкаОтчетностиПрошлыхПериодов.ИмяЗадачиПомощникаПодготовкиОтчетности());
	СтрокаНалогПоДаннымДеклараций = СтрокаНалогПоДаннымДеклараций(НалогЗадолженностьПоДекларации);
	
	Если НалогЗадолженность = 0 Тогда
		НалогЗадолженность = НалогЗадолженностьПоДекларации;
	КонецЕсли;
	
	ПереключательДа = ЗначениеВключенПереключательДа();
	ПереключательНет = "";
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ПереключательДа = ЗначениеВключенПереключательДа()
		И НалогЗадолженность + ПеняЗадолженность + ШтрафЗадолженность = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Укажите задолженность по налогу'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Долг",, Отказ); 
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПереключательДаПриИзменении(Элемент)
	
	ПереключательНет = "";
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключательНетПриИзменении(Элемент)
	
	ПереключательДа = "";
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если НавигационнаяСсылкаФорматированнойСтроки = СсылкаПомощникПодготовкиОтчетностиПрошлыхПериодов() Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация",      Организация);
		ПараметрыФормы.Вставить("КонтекстныйВызов", Истина);
		ОткрытьФорму("Обработка.ПодготовкаОтчетностиПрошлыхПериодов.Форма.Форма", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КнопкаГотово(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьРезультатыОпросаНаСервере();
	Оповестить("НалогиПрошлыхПериодов_ИзмененыОстатки",, Организация);
	
	ИмяФормыВладельца = ?(ВладелецФормы = Неопределено, "", ВладелецФормы.ИмяФормы);
	Если ПереключательДа = ЗначениеВключенПереключательДа() И ОплатитьНалогПослеТеста Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация", Организация);
		ПараметрыФормы.Вставить("Правило",     Правило);
		
		ОткрытьФорму("Обработка.ПомощникУплатыНалоговВзносовПрошлыхЛет.Форма.ФормаОплатыЗаПрошлыеПериоды", ПараметрыФормы);
	КонецЕсли;
	
	Закрыть(КодВозвратаДиалога.ОК);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Форма.ПереключательДа = ЗначениеВключенПереключательДа() Тогда
		Элементы.ГруппаВводЗадолженности.Доступность = Истина;
	Иначе
		Элементы.ГруппаВводЗадолженности.Доступность = Ложь;
	КонецЕсли;
	
	Элементы.СтрокаНалогПоДаннымДеклараций.Видимость = Форма.НалогЗадолженностьПоДекларации <> 0;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеВключенПереключательДа()

	Возврат "ПереключательДа";

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаНалогПоДаннымДеклараций(НалогЗадолженностьПоДекларации)

	СтрокиПоДаннымДеклараций = Новый Массив;
	СтрокиПоДаннымДеклараций.Добавить(НСтр("ru = 'По данным'"));
	СтрокиПоДаннымДеклараций.Добавить(" ");
	СтрокиПоДаннымДеклараций.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'отчетности'"),,,, СсылкаПомощникПодготовкиОтчетностиПрошлыхПериодов()));
	СтрокиПоДаннымДеклараций.Добавить(" ");
	СтрокиПоДаннымДеклараций.Добавить(НСтр("ru = 'за прошлые годы налог равен'"));
	СтрокиПоДаннымДеклараций.Добавить(" ");
	СтрокиПоДаннымДеклараций.Добавить(Формат(НалогЗадолженностьПоДекларации, "ЧЦ=15; ЧДЦ=2; ЧН=0,00"));
	СтрокиПоДаннымДеклараций.Добавить(" ");
	СтрокиПоДаннымДеклараций.Добавить(НСтр("ru = 'руб.'"));
	
	Возврат Новый ФорматированнаяСтрока(СтрокиПоДаннымДеклараций);

КонецФункции

&НаСервере
Процедура ОбработатьРезультатыОпросаНаСервере()
	
	ЗаписатьОстатки();
	ЗаписатьОпросПройден();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьОпросПройден()
	
	Обработки.ПомощникУплатыНалоговВзносовПрошлыхЛет.ЗаписатьТестПоНалогуПройден(Организация, КодЗадачи);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗадолженность()

	НачальныеОстатки = Обработки.ПомощникУплатыНалоговВзносовПрошлыхЛет.НачальныеОстаткиПоНалогам(Организация, Период);
	
	Отбор = Новый Структура;
	ВидНалога = РасчетыСБюджетом.ВидНалогаПоКодуЗадачи(КодЗадачи, Организация);
	Налог     = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
	СчетУчета = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(Налог);
	Отбор.Вставить("Налог", Налог);
	Отбор.Вставить("СчетУчета", СчетУчета);
	
	НайденныеСтроки = НачальныеОстатки.НайтиСтроки(Отбор);
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		Если НайденнаяСтрока.ВидПлатежаВБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог Тогда
			НалогЗадолженность = НайденнаяСтрока.Задолженность;
		ИначеЕсли НайденнаяСтрока.ВидПлатежаВБюджет = Перечисления.ВидыПлатежейВГосБюджет.ПениСам Тогда
			ПеняЗадолженность = НайденнаяСтрока.Задолженность;
		ИначеЕсли НайденнаяСтрока.ВидПлатежаВБюджет = Перечисления.ВидыПлатежейВГосБюджет.Штраф Тогда
			ШтрафЗадолженность = НайденнаяСтрока.Задолженность;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьОстатки()

	ЕстьДолги = (ПереключательДа = ЗначениеВключенПереключательДа());
	ТаблицаОстатков = ТаблицаОстатков(Организация, КодЗадачи);
	Для Каждого СтрокаОстатков Из ТаблицаОстатков Цикл
		
		Если СтрокаОстатков.ВидПлатежаВБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог Тогда
			СтрокаОстатков.Задолженность = ?(ЕстьДолги, НалогЗадолженность, 0);
		ИначеЕсли СтрокаОстатков.ВидПлатежаВБюджет = Перечисления.ВидыПлатежейВГосБюджет.ПениСам Тогда
			СтрокаОстатков.Задолженность = ?(ЕстьДолги, ПеняЗадолженность, 0);
		ИначеЕсли СтрокаОстатков.ВидПлатежаВБюджет = Перечисления.ВидыПлатежейВГосБюджет.Штраф Тогда
			СтрокаОстатков.Задолженность = ?(ЕстьДолги, ШтрафЗадолженность, 0);
		КонецЕсли;
		
	КонецЦикла;
	
	ПараметрыДляОбработки = Новый Структура;
	ПараметрыДляОбработки.Вставить("Организация",       Организация);
	ПараметрыДляОбработки.Вставить("ДатаВводаОстатков", Период);
	ПараметрыДляОбработки.Вставить("ТаблицаОстатков",   ТаблицаОстатков);
	
	Обработки.ПомощникУплатыНалоговВзносовПрошлыхЛет.ОтразитьЗадолженностьПоНалогамВзносам(
		ПараметрыДляОбработки, Неопределено);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТаблицаОстатков(Организация, КодЗадачи)
	
	Результат = Обработки.ПомощникУплатыНалоговВзносовПрошлыхЛет.НоваяТаблицаОстатков();
	
	ВидНалога = РасчетыСБюджетом.ВидНалогаПоКодуЗадачи(КодЗадачи, Организация);
	Налог     = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
	СчетУчета = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(Налог);
	
	Для Каждого ВидПлатежа Из ВидыПлатежей() Цикл
		СтрокаТаблицы = Результат.Добавить();
		СтрокаТаблицы.ВидПлатежаВБюджет = ВидПлатежа;
		СтрокаТаблицы.ВидНалога         = ВидНалога;
		СтрокаТаблицы.СчетУчета         = СчетУчета;
		СтрокаТаблицы.Налог             = Налог;
		СтрокаТаблицы.Задолженность     = 0;
		СтрокаТаблицы.Переплата         = 0;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВидыПлатежей()

	Возврат Обработки.ПомощникУплатыНалоговВзносовПрошлыхЛет.ПоддерживаемыеВидыНалоговыхОбязательств();

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СсылкаПомощникПодготовкиОтчетностиПрошлыхПериодов()

	Возврат "ПомощникПодготовкиОтчетностиПрошлыхПериодов";

КонецФункции

#КонецОбласти