#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Создает и заполняет модель налоговых и отчетных индикаторов монитора.
// 
// Параметры:
//  Параметры - Структура - структура со свойствами:
//   * Организация                     - СправочникСсылка.Организация - организация, для которой формируются индикаторы.
//   * Текущий день                    - Дата - день на который формируются индикаторы.
//   * ОтсутствуютПатенты              - Булево - признак того, что для ИП, применяющего патент, нет введены патенты.
//                                                Для остальных лиц должен быть ЛОЖЬ.
//   * ОтсутствуютВидыДеятельностиЕНВД - Булево - признак того, что для организации, применяющей ЕНВД, не введены виды деятельности
//                                                Для остальных лиц должен быть ЛОЖЬ.
//   * УпрощеннаяНулеваяОтчетность     - Булево - упрощенный режим формирования индикаторов при нулевой деятельности.
//                                                Если ИСТИНА - деятельность по организации отсутствует,
//                                                налоговые и отчетные индикаторы сворачиваются в общий "Нулевая отчетность".
//                                                Если ЛОЖЬ - ведется регулярная деятельность, индикаторы формируются развернуто.
//  АдресРезультата - Строка - адрес временного хранилища, в которое будет помещен результат работы процедуры.
// 
// Возвращаемое значение:
//  ХранилищеЗначения - сформированная модель монитора, включающая данные для каждого из столбцов формы монитора.
//                      Хранилище содержит структуру со следующими ключами:
//   * ВключенныеЗадачи    - ТаблицаЗначений - см функцию НовыйВключенныеЗадачи().
//   * НалоговыеИндикаторы - ТаблицаЗначений - см функцию НовыйТаблицаНалоговыхИндикаторов().
//   * ОтчетныеИндикаторы  - ТаблицаЗначений - см. функцию НовыйТаблицаОтчетныхИндикаторов().
//
Функция СформироватьПоказателиМонитораВФоне(Параметры, АдресРезультата) Экспорт
	
	ИндикаторыМонитора = СформироватьПоказателиМонитора(Параметры);

	Хранилище = Новый ХранилищеЗначения(ИндикаторыМонитора);
	ПоместитьВоВременноеХранилище(Хранилище, АдресРезультата);

КонецФункции

// Возвращает идентификатор помощника для вызова через внешний программный интерфейс.
//
// Возвращаемое значение:
//   Строка - идентификатор помощника.
//
Функция ПубликуемыйИдентификатор() Экспорт

	Возврат "tax_and_reporting_monitor";

КонецФункции

// Формирует структуру входящих настроек в формате параметров, запрашиваемых при подготовке публикуемых данных.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - организация, по которой требуются публикуемые данные помощника.
//
// Возвращаемое значение:
//   Структура - структура настроек для параметризации внешней ссылки.
//
Функция ВходящиеНастройкиПубликуемыхДанных(Организация) Экспорт
	
	Настройки = Новый Структура;
	
	Псевдонимы = Новый Структура;
	Псевдонимы.Вставить("inn", "ИНН");
	Псевдонимы.Вставить("kpp", "КПП");
	
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, Псевдонимы);
	
	Настройки.Вставить("organization", РеквизитыОрганизации);
	
	Возврат Настройки;
	
КонецФункции

// Заполняет перечень доступных возвращаемых данных.
//
// Параметры:
//  ДоступныеВозвращаемыеДанные - Соответствие - данные, доступные для получения через API
//    * Ключ - Строка - Идентификатор данных
//    * Значение - Структура - см. АсинхронноеПолучениеДанных.НовыйОписаниеВозвращаемыхДанных().
//
Процедура УстановитьДоступныеВозвращаемыеДанные(ДоступныеВозвращаемыеДанные) Экспорт
	
	ОписаниеВозвращаемыхДанных = АсинхронноеПолучениеДанных.НовыйОписаниеВозвращаемыхДанных();
	ОписаниеВозвращаемыхДанных.Наименование = НСтр("ru='Монитор налогов и отчетности'");
	ОписаниеВозвращаемыхДанных.Описание = НСтр("ru='Монитор налогов и отчетности.'"); 
	ОписаниеВозвращаемыхДанных.МодульМенеджер = Обработки.МониторНалоговИОтчетности;
	ОписаниеВозвращаемыхДанных.ТипыРезультата.Добавить(АсинхронноеПолучениеДанныхСловарь.ТипJSON());
	
	ДоступныеВозвращаемыеДанные.Вставить(ПубликуемыйИдентификатор(), ОписаниеВозвращаемыхДанных);
	
КонецПроцедуры

// Возвращает данные по идентификатору данных и переданным параметрам.
//
// Параметры:
//  ИдентификаторДанных - Строка - идентификатор данных. Может быть переопределено при обработке.
//               Указывается в качестве имени файла, возвращаемом в результате.
//   Параметры - ДвоичныеДанные - переданные параметры получения данных.
//   КодВозврата - Строка - код возврата обработчика получения данных (по умолчанию - 10200).
//   Ошибка - Булево - признак завершения выполнения метода с ошибкой.
//   СообщениеОбОшибке - Строка - текст сообщения об ошибке.
// 
// Возвращаемое значение:
//   ДвоичныеДанные - возвращаемые данные.
//
Функция ВозвращаемыеДанные(ИдентификаторДанных, Параметры, КодВозврата, Ошибка, СообщениеОбОшибке) Экспорт
	
	Если ВРег(ИдентификаторДанных) <> ВРег(ПубликуемыйИдентификатор()) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Словарь = АсинхронноеПолучениеДанныхСловарь;
	
	Если Не ЗначениеЗаполнено(Параметры) Тогда
		
		СообщениеОбОшибке = НСтр("ru = 'Не переданы входящие настройки для отчета.'");
		КодВозврата = Словарь.КодВозвратаОшибкаДанных();
		Ошибка = Истина;
		Возврат Неопределено;
		
	КонецЕсли;
	
	НастройкиСтрока = ПолучитьСтрокуИзДвоичныхДанных(Параметры);
	НастройкиМонитора = РаботаВМоделиСервисаБТС.СтруктураИзСтрокиJSON(НастройкиСтрока);

	Если НастройкиМонитора.Свойство("organization") Тогда
		
		Если НастройкиМонитора.organization.Свойство("inn") Тогда
			
			КПП = Неопределено;
			НастройкиМонитора.organization.Свойство("kpp", КПП);
			Организация = Справочники.Организации.НайтиОрганизацию(
							НастройкиМонитора.organization.inn, КПП, Ложь);
			Если Организация.Пустая() Тогда
				СообщениеОбОшибке = НСтр("ru = 'Организация с ИНН %1 КПП %2 отсутствует в информационной базе.'");
				СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибке,
					НастройкиМонитора.organization.inn, НастройкиМонитора.organization.kpp);
			КонецЕсли;
			
		Иначе
			
			СообщениеОбОшибке = НСтр("ru = 'В настройках группа organization должна содержать поля inn и kpp.'");
			
		КонецЕсли;
		
	Иначе
		
		Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		Если Организация.Пустая() Тогда
			СообщениеОбОшибке = НСтр("ru = 'В информационной базе не задана организация по-умолчанию.'");
		КонецЕсли;
		
	КонецЕсли;
	Если Не ПустаяСтрока(СообщениеОбОшибке) Тогда
		
		КодВозврата = Словарь.КодВозвратаОшибкаДанных();
		Ошибка = Истина;
		Возврат Неопределено;
		
	КонецЕсли;
	
	ТекущийДень = ТекущаяДатаМонитора();
	
	// Для актуальности публикуемых показателей монитора достаточно, чтобы был актуален предыдущий квартал.
	// Расчет налога за текущий квартал не требуется - монитор, в отличие от помощников уплаты налогов, не обучен смотреть "в будущее".
	ГраницаАктуальности = НачалоКвартала(ТекущийДень) - 1;
	Если НЕ ИнтеграцияСБанками.ОбеспечитьАктуальностьПубликуемыхДанных(Организация, ГраницаАктуальности, СообщениеОбОшибке) Тогда
		
		КодВозврата = Словарь.КодВозвратаВнутренняяОшибка();
		Ошибка = Истина;
		Возврат Неопределено;
		
	КонецЕсли;
	
	// Получение информации монитора.
	ПараметрыМонитора = ПараметрыПубликацииМонитора(Организация, ТекущийДень);
	
	Монитор = Новый Структура;
	
	ПараметрыПубликации = РегистрыСведений.ПубликуемыеНавигационныеСсылки.ПараметрыПубликации();
	ПараметрыПубликации.ИмяФормы = "Обработка.МониторНалоговИОтчетности.Форма";
	ПараметрыПубликации.Организация = Организация;
	ОписаниеСсылкиПереход = ИнтеграцияСБанками.ОписаниеПубликуемойНавигационнойСсылки("goto1C",
		НСтр("ru = 'Монитор налогов и отчетности'"),
		РегистрыСведений.ПубликуемыеНавигационныеСсылки.ПолучитьСсылку(ПараметрыПубликации));
	Монитор.Вставить("link", ОписаниеСсылкиПереход);
	
	Монитор.Вставить("rows", Новый Массив);
	
	Строка = Новый Структура("item, title, report, tax", 0, "");
	
	// Заголовок отчетов.
	Ячейка = Новый Структура;
	Ячейка.Вставить("type", ТипЗаголовок());
	Ячейка.Вставить("title", ЗаголовокСдачаОтчетности());
	Строка.report = Ячейка;
	
	// Заголовок налогов.
	Ячейка = Новый Структура;
	Ячейка.Вставить("type", ТипЗаголовок());
	Ячейка.Вставить("title", ЗаголовокОплатаНалогов());
	Строка.tax = Ячейка;
	Монитор.rows.Добавить(Строка);
	
	ИндикаторыМонитора = СформироватьПоказателиМонитора(ПараметрыМонитора);
	
	ВключенныеЗадачи    = ИндикаторыМонитора.ВключенныеЗадачи;
	НалоговыеИндикаторы = ИндикаторыМонитора.НалоговыеИндикаторы;
	ОтчетныеИндикаторы  = ИндикаторыМонитора.ОтчетныеИндикаторы;
	
	РядыБлоков = СформироватьРядыБлоков(ВключенныеЗадачи, НалоговыеИндикаторы, ОтчетныеИндикаторы);
	
	СчРяд = 1;
	Для Каждого Ряд Из РядыБлоков Цикл
	
		Строка = Новый Структура("item, title, report, tax", СчРяд);
		Монитор.rows.Добавить(Строка);
		СчРяд = СчРяд + 1;

		Строка.title = Ряд.СтрокаЗадачи.ИмяЗадачи;
		
		Блок = СоздатьЭкземплярБлока(Ряд, Ложь, ПараметрыМонитора);
		Строка.report = СоздатьЯчейку(Блок, Организация, ТекущийДень, ОписаниеСсылкиПереход);
		
		Блок = СоздатьЭкземплярБлока(Ряд, Истина, ПараметрыМонитора);
		Строка.tax = СоздатьЯчейку(Блок, Организация, ТекущийДень, ОписаниеСсылкиПереход);
		
	КонецЦикла; 
	
	ИдентификаторДанных = СтрШаблон("%1.%2", ПубликуемыйИдентификатор(), "json");
	
	ДанныеОтчета = РаботаВМоделиСервисаБТС.СтрокаИзСтруктурыJSON(Монитор);
	
	Возврат ПолучитьДвоичныеДанныеИзСтроки(ДанныеОтчета);
	
КонецФункции

// Возвращает дату, начиная с которой монитор отображает задачи.
//
// Параметры:
//  Организация	 - СправочникСсылка.Организция - Организация, для которой нужно вернуть дату начала обзора отчетности.
//  ТекущийДень	 - Дата - Дата, для которой нужно вернуть дату начала обзора отчетности.
// 
// Возвращаемое значение:
//   - Дата
//
Функция НачалоОбзораОтчетности(Организация, ТекущийДень) Экспорт
	
	// Обзор отчетности выполняем с начала периода исковой давности по налогам.
	// Срок исковой давности по налогу истекает через 3 года после начала налогового периода,
	// следующего за периодом, в котором необходимо уплатить налог или сдать отчет.
	// Например, для отчетности за 2015 год начало отсчета периода исковой давности
	// начинается 1 января 2017 года: отчетность за 2015 сдается в 2016 году, и срок
	// исковой давности отсчитывается с начала следующего года.
	
	ДатаНачалаДеятельности = КалендарьБухгалтера.ДатаНачалаДеятельности(Организация);
	НачалоИнтервала = Макс(ДобавитьМесяц(НачалоГода(ТекущийДень) + 1, -48), ДатаНачалаДеятельности);
	
	Возврат НачалоИнтервала;
	
КонецФункции

// Возвращает признак, нужно ли запускать тест отчетности прошлых периодов по УСН.
//
// Параметры:
//  Организация	 - СправочникСсылка.Организация - Ссылка на организацию, для которой нужно проверить условия запуска теста.
// 
// Возвращаемое значение:
//   - Булево.
//
Функция ТребуетсяТестОтчетностиПрошлыхПериодовПоУСН(Организация) Экспорт
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрлицо(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не УчетнаяПолитика.ПрименяетсяУСН(Организация, ТекущаяДатаМонитора()) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Если у организации в базе указаны разные системы налогообложения,
	// то им опрос не нужен. Он показывается только в том случае, если организация на УСН только начала вести учет.
	Если ВсеПрименявшиесяСистемыНалогообложенияОрганизации(Организация).Количество() > 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РезультатыТеста = Обработки.МониторНалоговИОтчетности.РезультатПроверкиОтчетностиПрошлыхПериодов(Организация);
	Если РезультатыТеста.ПроверкаВыполнена Тогда
		// Тест уже пройден, второй раз его показывать не требуется.
		Возврат Ложь;
	КонецЕсли;
	
	ГраницаОтчетностиПрошлыхПериодов = ПомощникиПоУплатеНалоговИВзносов.ГраницаОтчетностиПрошлыхПериодов(Организация);
	Если Не ЗначениеЗаполнено(ГраницаОтчетностиПрошлыхПериодов) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Если с даты начала работы в программе прошло три года - то тест не нужен.
	Если ГраницаОтчетностиПрошлыхПериодов <= НачалоОбзораОтчетности(Организация, ТекущаяДатаМонитора()) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Правило = Обработки.ПодготовкаОтчетностиПрошлыхПериодов.ПравилоДляПомощникаПодготовкиОтчетности(Организация);
	Если Не ЗначениеЗаполнено(Правило) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПервыйФинансовыйПериод = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПервыйФинансовыйПериод(Правило, Организация);
	
	// Если учет в программе ведется с первого налогового периода - прошлые периоды отсутствуют, тест не нужен.
	Если ЗначениеЗаполнено(ПервыйФинансовыйПериод) И ГраницаОтчетностиПрошлыхПериодов < ПервыйФинансовыйПериод Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОтчетныйПериодДляЗапускаТеста = Обработки.ПодготовкаОтчетностиПрошлыхПериодов.ОтчетныйПериодДляЗапускаТеста(
		Правило, Организация);
		
	// Отчетный период для запуска теста не определен,
	// поэтому и тест запускать не нужно.
	Если Не ЗначениеЗаполнено(ОтчетныйПериодДляЗапускаТеста) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Отчетный период для запуска теста определяет, с какого периода не нужно спрашивать про отчетность.
	// Если ОтчетныйПериодДляЗапускаТеста = 01.01.2018, то нужно спрашивать про 2018 год.
	// Если он Совпадает с первым финансовым периодом, то отчет запускать нет смысла,
	// так как раньше ничего не было - мы хотим опрашивать пользователя о периоде, который был до первого. А такого быть не может.
	Если ПервыйФинансовыйПериод >= ОтчетныйПериодДляЗапускаТеста Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ВведеныНачальныеОстаткиПоУСН(Организация) Тогда
		// Пользователь уже ввел начальные остатки по УСН (счет 68.12).
		// Основная цель опроса - помочь ему это сделать.
		// Если он смог ввести остатки сам - не нужно ему дополнительно помогать.
		Возврат Ложь;
	КонецЕсли;
	
	Если СозданыДекларацииПоУСН(Организация) Тогда
		// Пользователь уже создал декларацию по УСН, значит он уже давно работает,
		// не нужно его спрашивать про старые периоды.
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Возвращает признак, нужно ли запускать тест по налогам и взносам прошлых периодов.
//
// Параметры:
//  Организация	 - СправочникСсылка.Организация - Ссылка на организацию, для которой нужно проверить условия запуска теста.
// 
// Возвращаемое значение:
//   - Булево.
//
Функция ТребуетсяТестПоНалогамИВзносамПрошлыхПериодов(Организация, КодЗадачи)
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрлицо(Организация) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не УчетнаяПолитика.ПрименяетсяУСН(Организация, ТекущаяДатаМонитора()) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПройденОпросПоНалогу = Обработки.ПомощникУплатыНалоговВзносовПрошлыхЛет.ПройденОпросПоНалогу(Организация, КодЗадачи);
	Если ПройденОпросПоНалогу Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Если у организации в базе указаны разные системы налогообложения,
	// то им опрос не нужен. Он показывается только в том случае, если организация на УСН только начала вести учет.
	Если ВсеПрименявшиесяСистемыНалогообложенияОрганизации(Организация).Количество() > 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ГраницаОтчетностиПрошлыхПериодов = ПомощникиПоУплатеНалоговИВзносов.ГраницаОтчетностиПрошлыхПериодов(Организация);
	Если Не ЗначениеЗаполнено(ГраницаОтчетностиПрошлыхПериодов) Тогда
		// Пользователь начал вести учет, в том же году, что и зарегистрировался, тест не нужен.
		Возврат Ложь;
	КонецЕсли;
	
	// Если с даты начала работы в программе прошло три года - то тест не нужен.
	Если ГраницаОтчетностиПрошлыхПериодов <= НачалоОбзораОтчетности(Организация, ТекущаяДатаМонитора()) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Основная цель опроса - помочь пользователю ввести начальные остатки по налогам и взносам.
	// Если он смог ввести остатки сам - не нужно ему дополнительно помогать.
	Если ЭтоЗадачаУСН(КодЗадачи) И ВведеныНачальныеОстаткиПоУСН(Организация) Тогда
		// Пользователь уже ввел начальные остатки по УСН (счет 68.12).
		Возврат Ложь;
	ИначеЕсли ЭтоЗадачаВзносовИП(КодЗадачи) И ВведеныНачальныеОстаткиПоВзносамИП(Организация) Тогда
		// Пользователь уже ввел начальные остатки по взносам ИП (счета 69.06.3, 69.06.5).
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Определяет параметры формирования монитора, зависимые от организации.
//
// Параметры:
//  Организация - СправочникСсылка.Организация - организация для определения значений параметров.
//  ТекущийДень - Дата - дата для определения значений параметров.
//
// Возвращаемое значение:
//   Структура - параметры монитора, зависимые от организации:
//      * ДатаНачалаДеятельности - Дата
//      * ОтсутствуютВидыДеятельностиЕНВД - Булево  
//      * ОтсутствуютПатенты - Булево 
//      * УпрощеннаяНулеваяОтчетность - Булево 
//      * ЭтоИПНулевка - Булево
//
Функция ПараметрыЗависимыеОтОрганизации(Организация, ТекущийДень) Экспорт
	
	ПараметрыМонитора = Новый Структура;
	
	ПараметрыМонитора.Вставить("ДатаНачалаДеятельности", КалендарьБухгалтера.ДатаНачалаДеятельности(Организация));
	
	ПараметрыМонитора.Вставить("ОтсутствуютВидыДеятельностиЕНВД",
		УчетнаяПолитика.ПлательщикЕНВД(Организация, ТекущийДень)
		И УчетЕНВД.ОтсутствуютДействующиеВидыДеятельности(Организация, ТекущийДень));
	
	ПараметрыМонитора.Вставить("ОтсутствуютПатенты",
		Не ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация)
		И УчетнаяПолитика.ПрименяетсяУСНПатент(Организация, ТекущийДень)
		И Справочники.Патенты.ПатентыОрганизации(Организация, ТекущийДень).Количество() = 0);
	
	ПараметрыМонитора.Вставить("УпрощеннаяНулеваяОтчетность",
		НулеваяОтчетность.ДоступноУпрощенноеФормирование(Организация, ТекущийДень));
	
	ПараметрыМонитора.Вставить("ЭтоИПНулевка", УчетСтраховыхВзносовИП.ЭтоИПНулевка(Организация));
	
	Возврат ПараметрыМонитора;
	
КонецФункции

// Задает параметры оформления для отображения монитора.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - по какой организации задаем параметры.
//  ТекущийДень  - Дата - на какой день задаем параметры.
//
// Возвращаемое значение:
//  Структура - получатель устанавливаемых параметров:
//      * МаксДата
//      * МинДата
//      * РадостныйСмайлик
//      * ЦветСерыйБлок
//      * ЦветЗеленыйБлок
//      * ЦветЖелтыйБлок
//      * ЦветКрасныйБлок
//      * ШрифтТекста
//      * ШрифтСсылок
//      * ШрифтЗаголовков
//
Функция ПараметрыПубликацииМонитора(Организация, ТекущийДень)
	
	ПараметрыМонитора = Новый Структура;
	ПараметрыМонитора.Вставить("УникальныйИдентификатор");
	ПараметрыМонитора.Вставить("Организация", Организация);
	ПараметрыМонитора.Вставить("ТекущийДень", ТекущийДень);
	
	// Параметры, зависимые от организации
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПараметрыМонитора,
		ПараметрыЗависимыеОтОрганизации(Организация, ТекущийДень),
		Истина);
	
	// Параметры оформления
	КорректныйПериод = ОбщегоНазначенияБПСобытия.КорректныйПериодВводаДокументов();
	Индикаторы = СостоянияИндикаторов();
	ПараметрыМонитора.Вставить("МаксДата",        ДобавитьМесяц(КорректныйПериод.КонецКорректногоПериода, 24));
	ПараметрыМонитора.Вставить("МинДата",         ДобавитьМесяц(КорректныйПериод.НачалоКорректногоПериода, - 24));
	ПараметрыМонитора.Вставить("ШрифтСсылок",     Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,, 11));
	ПараметрыМонитора.Вставить("ШрифтЗаголовков", Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста,, 14));
	ПараметрыМонитора.Вставить("ЦветСерыйБлок",   Индикаторы.Серый);
	ПараметрыМонитора.Вставить("ЦветЗеленыйБлок", Индикаторы.Зеленый);
	ПараметрыМонитора.Вставить("ЦветЖелтыйБлок",  Индикаторы.Желтый);
	ПараметрыМонитора.Вставить("ЦветКрасныйБлок", Индикаторы.Красный);
	ПараметрыМонитора.Вставить("ЦветПустойБлок",  Индикаторы.Пустой);
	ПараметрыМонитора.Вставить("РадостныйСмайлик",Смайлик());
	
	Возврат ПараметрыМонитора;
	
КонецФункции

Функция ЗаголовокОплатаНалогов() Экспорт
	
	Возврат НСтр("ru='Оплата налогов'");
	
КонецФункции

Функция ЗаголовокСдачаОтчетности() Экспорт
	
	Возврат НСтр("ru='Сдача отчетности'");
	
КонецФункции

Функция ЛимитСсылокИндикатора() Экспорт
	
	Возврат 5;
	
КонецФункции

Функция ТекущаяДатаМонитора() Экспорт
	
	Возврат НачалоДня(ТекущаяДатаСеанса());
	
КонецФункции

Функция НавигационнаяСсылкаДляОткрытияМонитораНалоговИОтчетов() Экспорт
	
	Возврат "e1cib/command/ОбщаяКоманда.МониторНалоговИОтчетности";
	
КонецФункции

Функция ФорматДата()
	Возврат "ДЛФ=ДД";
КонецФункции

Функция СоздатьЭкземплярБлока(Ряд, ЭтоНалог, ПараметрыМонитора) Экспорт
	
	СтрокаЗадачи = Ряд.СтрокаЗадачи;
	
	Если ЭтоНалог Тогда
		СтрокиИндикатора = Ряд.СтрокиНалога;
		ВыводитьПустойБлок = Ряд.ПустойБлокНалога;
	Иначе
		СтрокиИндикатора = Ряд.СтрокиОтчетов;
		ВыводитьПустойБлок = Ряд.ПустойБлокОтчетов;
	КонецЕсли;
	
	Индикаторы = Новый Массив;
	Для каждого Задача Из СтрокиИндикатора Цикл
		Индикаторы.Добавить(Задача.Индикатор);
	КонецЦикла;
	Индикатор = СамыйКритичныйИндикатор(Индикаторы);
	
	ЦветаИндикаторов = ЦветаИндикаторов();
	
	Блок = Неопределено;
	Если ВыводитьПустойБлок Тогда
		Блок = ПустойБлок(ПараметрыМонитора);
	ИначеЕсли Индикатор = ЦветаИндикаторов.Серый Тогда
		Блок = НенастроенныйБлок(СтрокиИндикатора, ЭтоНалог, СтрокаЗадачи.КодЗадачи, СтрокаЗадачи.ИмяЗадачи, ПараметрыМонитора);
	ИначеЕсли ЭтоНалог И Не ПоддерживаетсяУплатаНалогаПоЗадаче(СтрокаЗадачи.КодЗадачи) Тогда
		Блок = СерыйБлок(СтрокаЗадачи, ЭтоНалог, ПараметрыМонитора);
	ИначеЕсли Индикатор = ЦветаИндикаторов.Зеленый Тогда
		Блок = ЗеленыйБлок(СтрокиИндикатора, ЭтоНалог, СтрокаЗадачи.КодЗадачи, ПараметрыМонитора);
	ИначеЕсли Индикатор = ЦветаИндикаторов.Желтый Тогда
		Блок = ЖелтыйБлок(СтрокиИндикатора, ЭтоНалог, СтрокаЗадачи.КодЗадачи, СтрокаЗадачи.ИмяЗадачи, ПараметрыМонитора);
	ИначеЕсли Индикатор = ЦветаИндикаторов.Красный Тогда
		Блок = КрасныйБлок(СтрокиИндикатора, ЭтоНалог, СтрокаЗадачи.КодЗадачи, СтрокаЗадачи.ИмяЗадачи, ПараметрыМонитора);
	КонецЕсли;
	
	Возврат Блок;
	
КонецФункции

Функция СформироватьРядыБлоков(ВключенныеЗадачи, НалоговыеИндикаторы, ОтчетныеИндикаторы) Экспорт

	РядыБлоков = Новый ТаблицаЗначений;
	РядыБлоков.Колонки.Добавить("СтрокаЗадачи");
	РядыБлоков.Колонки.Добавить("СтрокиНалога");
	РядыБлоков.Колонки.Добавить("СтрокиОтчетов");
	РядыБлоков.Колонки.Добавить("ПустойБлокНалога", Новый ОписаниеТипов("Булево"));
	РядыБлоков.Колонки.Добавить("ПустойБлокОтчетов", Новый ОписаниеТипов("Булево"));
	
	ОтборНуженПомощникОтчетовПрошлыхПериодов = Новый Структура("НуженПомощникОтчетовПрошлыхПериодов", Истина);
	НуженПомощникОтчетовПрошлыхПериодов = ОтчетныеИндикаторы.НайтиСтроки(ОтборНуженПомощникОтчетовПрошлыхПериодов).Количество() > 0;
	
	ПропускаемыеЗадачи = Новый Массив;
	Для Каждого СтрокаЗадачи Из ВключенныеЗадачи Цикл
		
		Если ПропускаемыеЗадачи.Найти(СтрокаЗадачи.КодЗадачи) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		ПоискПоВладельцу = Новый Структура("Владелец");
		Если ЭтоЗадачаНДФЛПоУплате(СтрокаЗадачи.КодЗадачи) Тогда
			
			ПоискПоВладельцу.Владелец = СтрокаЗадачи.Владелец;
			СтрокиНалога = НалоговыеИндикаторы.НайтиСтроки(ПоискПоВладельцу);
			
			СтрокаПары = ВключенныеЗадачи.Найти(ЗадачиБухгалтераКлиентСервер.КодЗадачиНДФЛПоОтчету());
			ПоискПоВладельцу.Владелец = ?(СтрокаПары = Неопределено, СтрокаЗадачи.Владелец, СтрокаПары.Владелец);
			СтрокиОтчетов = ОтчетныеИндикаторы.НайтиСтроки(ПоискПоВладельцу);
			
		ИначеЕсли ЭтоЗадачаНДФЛПоОтчету(СтрокаЗадачи.КодЗадачи) Тогда
			
			СтрокаПары = ВключенныеЗадачи.Найти(ЗадачиБухгалтераКлиентСервер.КодЗадачиНДФЛПоУплате());
			ПоискПоВладельцу.Владелец = ?(СтрокаПары = Неопределено, СтрокаЗадачи.Владелец, СтрокаПары.Владелец);
			СтрокиНалога = НалоговыеИндикаторы.НайтиСтроки(ПоискПоВладельцу);
			
			ПоискПоВладельцу.Владелец = СтрокаЗадачи.Владелец;
			СтрокиОтчетов = ОтчетныеИндикаторы.НайтиСтроки(ПоискПоВладельцу);
			
		Иначе
			
			ПоискПоВладельцу.Владелец = СтрокаЗадачи.Владелец;
			СтрокиНалога = НалоговыеИндикаторы.НайтиСтроки(ПоискПоВладельцу);
			
			ПоискПоВладельцу.Владелец = СтрокаЗадачи.Владелец;
			СтрокиОтчетов = ОтчетныеИндикаторы.НайтиСтроки(ПоискПоВладельцу);
			
			СтрокаПары = Неопределено;
			
		КонецЕсли;
		
		Если СтрокаПары <> Неопределено Тогда
			ПропускаемыеЗадачи.Добавить(СтрокаПары.КодЗадачи);
		КонецЕсли;
		
		// Определим необходимость вывода нового ряда.
		НеобходимоРазместитьНовыйРяд = Ложь;
		Если ЭтоЗадачаВзносовИП(СтрокаЗадачи.КодЗадачи)
		 Или ЭтоЗадачаПатент(СтрокаЗадачи.КодЗадачи)
		 Или ЭтоЗадачаНулеваяОтчетность(СтрокаЗадачи.КодЗадачи)
		 Или ЭтоЗадачаТорговыйСбор(СтрокаЗадачи.КодЗадачи)
		 Или ЭтоЗадачаНалогНаПрофессиональныйДоход(СтрокаЗадачи.КодЗадачи)
		 Или СтрокиОтчетов.Количество() > 0 Тогда
			// Задачи по патенту, страховым взносам ИП за себя и торговому сбору выводим всегда, даже если по ним нулевые суммы
			// налога, такое может быть, например, в случае, когда данные еще не введены в программу.
			// Задача "Нулевая отчетность" формируется и выводится при соответствующем режиме работы приложения.
			НеобходимоРазместитьНовыйРяд = Истина;

		Иначе
			// Если отчетности по налогу предоставлять не требуется и задолженности к уплате нет, 
			// то не выводим блок.
			Для Каждого СтрокаНалога Из СтрокиНалога Цикл
				Если СтрокаНалога.КУплатеДолг <> 0 Или СтрокаНалога.КУплатеТекущий <> 0 Тогда
					НеобходимоРазместитьНовыйРяд = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если НеобходимоРазместитьНовыйРяд Тогда
			
			Ряд = РядыБлоков.Добавить();
			Ряд.СтрокаЗадачи = СтрокаЗадачи;
			
			Ряд.СтрокиНалога = НалоговыеИндикаторы.Скопировать(СтрокиНалога);
			Ряд.СтрокиНалога.Сортировать("Срок");
			Ряд.ПустойБлокНалога = НуженПомощникОтчетовПрошлыхПериодов;
			
			Ряд.СтрокиОтчетов = ОтчетныеИндикаторы.Скопировать(СтрокиОтчетов);
			Ряд.СтрокиОтчетов.Сортировать("Срок");
			Ряд.ПустойБлокОтчетов = НуженПомощникОтчетовПрошлыхПериодов
				И Ряд.СтрокиОтчетов.НайтиСтроки(ОтборНуженПомощникОтчетовПрошлыхПериодов).Количество() = 0
				И Не ЭтоЗадачаВзносовИП(СтрокаЗадачи.КодЗадачи);
			
		КонецЕсли;
		
		// Удаляем обработанные строки налогов и отчетов.
		УдалитьСтрокиТаблицы(НалоговыеИндикаторы, СтрокиНалога);
		УдалитьСтрокиТаблицы(ОтчетныеИндикаторы, СтрокиОтчетов);
		
	КонецЦикла;
	
	Возврат РядыБлоков;
	
КонецФункции

#Область ТестПрошлыхПериодов

Функция РезультатПроверкиОтчетностиПрошлыхПериодов(Организация) Экспорт
	
	Результат = НовыйРезультатПроверкиПрошлыхПериодов();
	
	Результат.ПроверкаВыполнена =
		РегистрыСведений.РезультатыПроверкиНалоговОтчетовПрошлыхПериодов.ПроверкаВыполнена(Организация);
	
	Если Результат.ПроверкаВыполнена Тогда
		Результат.ДобавленныеПериоды =
			РегистрыСведений.РезультатыПроверкиНалоговОтчетовПрошлыхПериодов.ДобавленныеПериоды(Организация);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция НовыйРезультатПроверкиПрошлыхПериодов()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ПроверкаВыполнена",  Ложь);
	Результат.Вставить("ДобавленныеПериоды", Неопределено);
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеРезультатовПроверкиПрошлыхПериодов(ПроверкаПрошлыхПериодовВыполнена, ПериодыДобавленныеПроверкой) Экспорт
	
	// Сначала самые простые варианты
	
	МассивСтрок = Новый Массив;
	Если НЕ ПроверкаПрошлыхПериодовВыполнена Тогда
		МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(НСтр("ru = 'Возможно, надо сдавать отчеты за предыдущие периоды. '")));
		МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(НСтр("ru = 'Проверить'"),,,,"ЗапуститьПроверкуПрошлыхПериодов"));
		Возврат Новый ФорматированнаяСтрока(МассивСтрок);
	КонецЕсли;
	
	Если ПериодыДобавленныеПроверкой.Количество() = 0 Тогда
		МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(НСтр("ru = 'Вы указали, что все отчеты за прошлые периоды сданы. '")));
		МассивСтрок.Добавить(
				Новый ФорматированнаяСтрока(НСтр("ru = 'Проверить еще раз'"),,,,"ЗапуститьПроверкуПрошлыхПериодов"));
		Возврат Новый ФорматированнаяСтрока(МассивСтрок);
	КонецЕсли;
	
	// Выявляем добавленные тестом периоды и отчеты за эти периоды
	
	ОтчетныеГоды = Новый Массив;
	
	Для Каждого ДобавленныйПериод Из ПериодыДобавленныеПроверкой Цикл
		
		Если НЕ ДобавленныйПериод.Требуется Тогда
			Продолжить;
		КонецЕсли;
		
		ОтчетныйГод = Год(ДобавленныйПериод.НачалоПериода);
		Если ОтчетныеГоды.Найти(ОтчетныйГод) = Неопределено Тогда
			ОтчетныеГоды.Добавить(ОтчетныйГод);
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаЗаголовок = "";
	СтрокаОписания   = "";
	Если ОтчетныеГоды.Количество() = 1 Тогда
		СтрокаЗаголовок = НСтр("ru = 'По вашим ответам добавлены отчеты за %1 год. '");
		СтрокаОписания = Формат(ОтчетныеГоды[0], "ЧГ=");
	ИначеЕсли ОтчетныеГоды.Количество() > 1 Тогда
		СтрокаЗаголовок = НСтр("ru = 'По вашим ответам добавлены отчеты за %1 годы. '");
		МинимальныйГод  = ОтчетныеГоды[0];
		МаксимальныйГод = ОтчетныеГоды[0];
		Для Каждого ОтчетныйГод Из ОтчетныеГоды Цикл
			МинимальныйГод = Мин(МинимальныйГод, ОтчетныйГод);
			МаксимальныйГод = Макс(МинимальныйГод, ОтчетныйГод);
		КонецЦикла;
		СтрокаОписания = СтрШаблон(НСтр("ru = '%1-%2'"), Формат(МинимальныйГод, "ЧГ="), Формат(МаксимальныйГод, "ЧГ="));
	КонецЕсли;
	
	Если СтрокаЗаголовок = "" Тогда
		Описание = "";
	Иначе
		Описание = СтрШаблон(СтрокаЗаголовок, СтрокаОписания);
	КонецЕсли;
	
	МассивСтрок.Добавить(
			Новый ФорматированнаяСтрока(Описание));
	МассивСтрок.Добавить(
			Новый ФорматированнаяСтрока(НСтр("ru = 'Проверить еще раз'"),,,,"ЗапуститьПроверкуПрошлыхПериодов"));
	Возврат Новый ФорматированнаяСтрока(МассивСтрок);
	
КонецФункции

Функция ВсеПрименявшиесяСистемыНалогообложенияОрганизации(Организация)
	
	Запрос = Новый Запрос;
	Запрос.Параметры.Вставить("Организация", Организация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиСистемыНалогообложения.СистемаНалогообложения КАК СистемаНалогообложения
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|ГДЕ
	|	НастройкиСистемыНалогообложения.Организация = &Организация";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СистемаНалогообложения");
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СтроковыеКонстанты

Функция ТипЗаголовок()
	
	Возврат "header";
	
КонецФункции

Функция Смайлик()
	
	Возврат "{{smile}}";
	
КонецФункции

Функция ЦветаИндикаторов()
	
	Индикаторы = Новый Структура;
	Индикаторы.Вставить("Зеленый", "Зеленый");
	Индикаторы.Вставить("Желтый",  "Желтый");
	Индикаторы.Вставить("Красный", "Красный");
	Индикаторы.Вставить("Серый",   "Ненастроенный");
	Индикаторы.Вставить("Пустой",  "");
	
	Возврат Индикаторы;
	
КонецФункции

Функция СостоянияИндикаторов()
	
	Индикаторы = Новый Структура;
	Индикаторы.Вставить("Зеленый", "success");
	Индикаторы.Вставить("Желтый",  "warning");
	Индикаторы.Вставить("Красный", "danger");
	Индикаторы.Вставить("Серый",   "undeclared");
	Индикаторы.Вставить("Пустой",  "null");
	
	Возврат Индикаторы;
	
КонецФункции

Функция СамыйКритичныйИндикатор(Индикаторы)
	
	Индикатор = ЦветаИндикаторов().Зеленый;
	
	Для каждого ТекИндикатор Из Индикаторы Цикл 
		
		Если ТекИндикатор = ЦветаИндикаторов().Серый
		 Или ТекИндикатор = ЦветаИндикаторов().Красный Тогда 
		 
			Индикатор = ТекИндикатор;
			Прервать;
			
		ИначеЕсли ТекИндикатор = ЦветаИндикаторов().Желтый Тогда
			
			Индикатор = ТекИндикатор;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Индикатор;
	
КонецФункции

Функция ПоддерживаетсяУплатаНалогаПоЗадаче(КодЗадачи)
	
	Если ЭтоЗадачаНулеваяОтчетность(КодЗадачи) Тогда
		Возврат Истина;
	КонецЕсли;
	
	КодыСПоддержкой = Новый Массив;
	КодыСПоддержкой.Добавить(ЗадачиБухгалтераКлиентСервер.КодЗадачиУСН());
	КодыСПоддержкой.Добавить(ЗадачиБухгалтераКлиентСервер.КодЗадачиЕНВД());
	КодыСПоддержкой.Добавить(ЗадачиБухгалтераКлиентСервер.КодЗадачиТорговыйСбор());
	КодыСПоддержкой.Добавить(ЗадачиБухгалтераКлиентСервер.КодЗадачиНДФЛ());
	КодыСПоддержкой.Добавить(ЗадачиБухгалтераКлиентСервер.КодЗадачиНДФЛПоУплате());
	КодыСПоддержкой.Добавить(ЗадачиБухгалтераКлиентСервер.КодЗадачиСтраховыеВзносы());
	КодыСПоддержкой.Добавить(ЗадачиБухгалтераКлиентСервер.КодЗадачиСтраховыеВзносыИП());
	
	Если ПолучитьФункциональнуюОпцию("ДоступнаИнтеграцияСПлатформойСамозанятые") Тогда
		КодыСПоддержкой.Добавить(ЗадачиБухгалтераКлиентСервер.КодЗадачиНалогНаПрофессиональныйДоход());
	КонецЕсли;
	
	Возврат КодыСПоддержкой.Найти(КодЗадачи) <> Неопределено;
	
КонецФункции

Функция КодЗадачиНулеваяОтчетность()
	
	Возврат "НулеваяОтчетность";
	
КонецФункции

Функция ЭтоЗадачаУСН(КодЗадачи)
	
	Возврат КодЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиУСН();
	
КонецФункции

Функция ЭтоЗадачаВзносовИП(КодЗадачи)
	
	Возврат КодЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиСтраховыеВзносыИП();
	
КонецФункции

Функция ЭтоЗадачаЕНВД(КодЗадачи)
	
	Возврат КодЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиЕНВД();
	
КонецФункции

Функция ЭтоЗадачаПатент(КодЗадачи)
	
	Возврат КодЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиПатент();
	
КонецФункции

Функция ЭтоЗадачаСтраховыхВзносов(КодЗадачи)
	
	Возврат КодЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиСтраховыеВзносы();
	
КонецФункции

Функция ЭтоЗадачаЕжеквартальныхФиксированныхВзносовИП(КодЗадачи, КодПравила)
	
	Возврат ЭтоЗадачаВзносовИП(КодЗадачи) И КодПравила = "2013_УплатаКвартал";
	
КонецФункции

Функция ЭтоЗадачаФиксированныхВзносовИП(КодЗадачи, КодПравила)
	
	Возврат ЭтоЗадачаВзносовИП(КодЗадачи)
		И (КодПравила = "2013_Уплата" Или КодПравила = "2013_УплатаКвартал");
		
КонецФункции

Функция ЭтоЗадачаВзносовСДоходовИП(КодЗадачи, КодПравила)
	
	Возврат ЭтоЗадачаВзносовИП(КодЗадачи) И КодПравила = "2013_Уплата_СДоходов";
	
КонецФункции

Функция ЭтоЗадачаТорговыйСбор(КодЗадачи)

	Возврат КодЗадачи = "ТорговыйСбор";

КонецФункции

Функция ЭтоЗадачаПроверкиСтатистики(КодЗадачи, КодПравила)
	
	Если ЭтоЗадачаСтатистики(КодЗадачи)
		И (КодПравила = "ПроверитьПереченьФормФизлица" Или КодПравила = "ПроверитьПереченьФормЮрлица") Тогда
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ЭтоЗадачаНДФЛПоУплате(КодЗадачи)
	
	Возврат КодЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиНДФЛПоУплате();
	
КонецФункции

Функция ЭтоЗадачаНДФЛПоОтчету(КодЗадачи)
	
	Возврат КодЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиНДФЛПоОтчету();
	
КонецФункции

Функция ЭтоЗадачаСтатистики(КодЗадачи)
	
	Возврат КодЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиСтатистика();
	
КонецФункции

Функция ЭтоЗадачаНулеваяОтчетность(КодЗадачи)
	
	Возврат КодЗадачи = КодЗадачиНулеваяОтчетность();
	
КонецФункции

Функция ИмяЗадачиНулеваяОтчетность()
	
	Возврат НСтр("ru = 'Нулевая отчетность'");
	
КонецФункции

Функция ЭтоЗадачаНалогНаПрофессиональныйДоход(КодЗадачи)
	
	Возврат КодЗадачи = ЗадачиБухгалтераКлиентСервер.КодЗадачиНалогНаПрофессиональныйДоход();
	
КонецФункции

#КонецОбласти 

#Область ФабрикаИндикаторов

Функция НенастроенныйБлок(СтрокиИндикатора, ЭтоНалог, КодЗадачи, ИмяЗадачи, ПараметрыМонитора)
	
	Блок = БазовыйБлок(ПараметрыМонитора);
	Блок.ЦветФона = ПараметрыМонитора.ЦветЖелтыйБлок;
	
	Если ЭтоНалог И ЭтоЗадачаЕНВД(КодЗадачи) Тогда
		
		Блок.Строка0 = НСтр("ru = 'Не введено ни одного вида деятельности'");
		ТекстСтрока1 = Новый ФорматированнаяСтрока (Нстр("ru = 'Введите действующие '"), ПараметрыМонитора.ШрифтСсылок);
		СсылкаСтрока1 = Новый ФорматированнаяСтрока(НСтр("ru = 'Виды деятельности'"), ПараметрыМонитора.ШрифтСсылок,
													,, "e1cib/list/Справочник.ВидыДеятельностиЕНВД");
		Строка1 = Новый ФорматированнаяСтрока(ТекстСтрока1, СсылкаСтрока1);
		ДобавитьСтроку1(Блок, Строка1);
		Блок.ЦветФона = ПараметрыМонитора.ЦветЖелтыйБлок;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Владелец", ПараметрыМонитора.Организация);
		ОписаниеДействия = Новый Структура;
		ОписаниеДействия.Вставить("ИмяФормы", "Справочник.ВидыДеятельностиЕНВД.ФормаСписка");
		ОписаниеДействия.Вставить("ПараметрыФормы", Новый Структура("Отбор", Отбор));
		Блок.Вставить("ПараметрыНавигационныхСсылок", ОписаниеДействия);
		
	ИначеЕсли ЭтоНалог И ЭтоЗадачаПатент(КодЗадачи) Тогда
		
		Блок.Строка0 = НСтр("ru = 'Не введено ни одного патента '");
		ТекстСтрока1 = Новый ФорматированнаяСтрока (Нстр("ru = 'Введите действующие '"), ПараметрыМонитора.ШрифтСсылок);
		СсылкаСтрока1 = Новый ФорматированнаяСтрока(НСтр("ru = 'Патенты'"), ПараметрыМонитора.ШрифтСсылок,,, "e1cib/list/Справочник.Патенты");
		Строка1 = Новый ФорматированнаяСтрока(ТекстСтрока1, СсылкаСтрока1);
		ДобавитьСтроку1(Блок, Строка1);
		
		ОписаниеДействия = Новый Структура;
		Отбор = Новый Структура;
		Отбор.Вставить("Владелец", ПараметрыМонитора.Организация);
		ОписаниеДействия.Вставить("ИмяФормы", "Справочник.Патенты.ФормаСписка");
		ОписаниеДействия.Вставить("ПараметрыФормы",  Новый Структура("Отбор", Отбор));
		Блок.Вставить("ПараметрыНавигационныхСсылок", ОписаниеДействия);
		
	ИначеЕсли СтрокиИндикатора.Количество() > 0 Тогда
		
		ДанныеИндикатора = СтрокиИндикатора[0];
		
		Блок.Строка0 = ИмяЗадачи;
		ДобавитьСтроку1(Блок, ДанныеИндикатора.Наименование);
		
		ПараметрыСсылки = СФормироватьПараметрыСсылки(ДанныеИндикатора, КодЗадачи, ЭтоНалог, ПараметрыМонитора);
		НадписьПросрочено = НСтр("ru = 'Выполнить задачу'");
		ДобавитьСтрокуСоСсылкой(Блок, НадписьПросрочено, ПараметрыСсылки);
		
	КонецЕсли;
	
	Возврат Блок;
	
КонецФункции

Функция ЗеленыйБлок(СтрокиИндикатора, ЭтоНалог, КодЗадачи, ПараметрыМонитора)
	
	Блок = БазовыйБлок(ПараметрыМонитора);
	Блок.ЦветФона = ПараметрыМонитора.ЦветЗеленыйБлок;
	
	Если ЭтоЗадачаНулеваяОтчетность(КодЗадачи) Тогда
		ЗаполнитьЗеленыйБлокНулеваяОтчетность(Блок, СтрокиИндикатора, ЭтоНалог, КодЗадачи, ПараметрыМонитора);
		Возврат Блок;
	КонецЕсли;
	
	Если СтрокиИндикатора.Количество() > 0 Тогда
		
		МинПериодСобытия = ПараметрыМонитора.МаксДата;
		МинПериодичность = Перечисления.Периодичность.Год;
		ЭтоТекущаяЗадача = Ложь;
		Правило          = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПустаяСсылка();
		Для Каждого Индикатор Из СтрокиИндикатора Цикл
			Если Индикатор.ПериодСобытия < МинПериодСобытия Тогда
				МинПериодСобытия = Индикатор.ПериодСобытия;
				МинПериодичность = Индикатор.Периодичность;
				ЭтоТекущаяЗадача = Индикатор.ЭтоТекущаяЗадача;
				Правило          = Индикатор.Правило;
			КонецЕсли;
		КонецЦикла;
		
		ДанныеПравила = Новый Структура("ФинансовыйПериод, РасширенныйПервыйНалоговыйПериод");
		ЗаполнитьЗначенияСвойств(ДанныеПравила, Индикатор);
		
		ПервыйПериодПравила = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПервыйФинансовыйПериод(ДанныеПравила,
			ПараметрыМонитора.Организация, ПараметрыМонитора.ДатаНачалаДеятельности);
		
		Если ЭтоТекущаяЗадача Тогда
			ПериодПервойЗадачи = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(МинПериодичность, ПервыйПериодПравила);
		Иначе
			ПериодПервойЗадачи = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(МинПериодичность, ПервыйПериодПравила);
		КонецЕсли;
		
		ЭтоПерваяЗадача = (ПериодПервойЗадачи >= МинПериодСобытия);
		Если Не ЭтоПерваяЗадача Тогда
			Блок.Строка0 = ЗаголовокНалогаОтчета(ЦветаИндикаторов().Зеленый, ЭтоНалог, СтрокиИндикатора, ПараметрыМонитора, КодЗадачи);
		Иначе
			Блок.Строка0 = ЗаголовокНалогаОтчета(Неопределено, ЭтоНалог, СтрокиИндикатора, ПараметрыМонитора, КодЗадачи);
		КонецЕсли;
		
		Строка1 = ОписаниеСледующегоНалогаОтчета(СтрокиИндикатора, ЭтоНалог, КодЗадачи, ЭтоПерваяЗадача, ПараметрыМонитора);
		ДобавитьСтроку1(Блок, Строка1);
	Иначе
		Блок.Строка0 = "";
		Блок.ЦветФона = ПараметрыМонитора.ЦветПустойБлок;
	КонецЕсли;
	
	Возврат Блок;
	
КонецФункции

Функция ЖелтыйБлок(СтрокиИндикатора, ЭтоНалог, КодЗадачи, ИмяЗадачи, ПараметрыМонитора)
	
	Блок = БазовыйБлок(ПараметрыМонитора);
	Блок.ЦветФона = ПараметрыМонитора.ЦветЖелтыйБлок;
	
	Если СтрокиИндикатора.Количество() = 0 Тогда
		Блок.Строка0 = ЗаголовокНалогаОтчета("Ошибка", ЭтоНалог, СтрокиИндикатора, ПараметрыМонитора, КодЗадачи);
		Возврат Блок;
	КонецЕсли;
	
	Если ЭтоЗадачаНулеваяОтчетность(КодЗадачи) Тогда
		ЗаполнитьЖелтыйБлокНулеваяОтчетность(Блок, СтрокиИндикатора, ЭтоНалог, ПараметрыМонитора, КодЗадачи);
		Возврат Блок;
	КонецЕсли;
	
	// Страховые взносы ИП для нулевки.
	Если ЭтоЗадачаВзносовИП(КодЗадачи) И (ПараметрыМонитора.ЭтоИПНулевка) Тогда
		
		ЗаполнитьЖелтыйБлокВзносыЗаСебяИПНулевка(Блок, СтрокиИндикатора, ПараметрыМонитора, КодЗадачи);
		Возврат Блок;
	КонецЕсли;
	
	Если ЭтоЗадачаНалогНаПрофессиональныйДоход(КодЗадачи) Тогда
		ЗаполнитьЖелтыйБлокНалогНаПрофессиональныйДоход(Блок, СтрокиИндикатора, ЭтоНалог, КодЗадачи, ИмяЗадачи, ПараметрыМонитора);
		Возврат Блок;
	КонецЕсли;
	
	Если ЭтоНалог Тогда
		
		Строка0 = ЗаголовокНалогаОтчета(ЦветаИндикаторов().Желтый, ЭтоНалог, СтрокиИндикатора, ПараметрыМонитора, КодЗадачи);
		
		ИтогКУплатеТекущий = 0;
		Для Каждого Индикатор Из СтрокиИндикатора Цикл
			ИтогКУплатеТекущий = ИтогКУплатеТекущий + Индикатор.КУплатеТекущий;
		КонецЦикла;
		
		Если НуженПомощникОплатыНалоговПрошлыхПериодовДляСтрокИндикатора(СтрокиИндикатора, ЭтоНалог) Тогда
			Блок.Строка0 = Строка0;
		Иначе
			Блок.Строка0 = ОтформатироватьСтрокуСуммы(Строка0, ИтогКУплатеТекущий);
		КонецЕсли;
		
	Иначе
		
		Блок.Строка0 = ЗаголовокНалогаОтчета(ЦветаИндикаторов().Желтый,
			ЭтоНалог, СтрокиИндикатора, ПараметрыМонитора, КодЗадачи);
		
	КонецЕсли;
	
	Если НуженПомощникОтчетовПрошлыхПериодовДляСтрокИндикатора(СтрокиИндикатора, ЭтоНалог) Тогда
		
		// Выводим только заголовок, строка пояснения не требуется.
		Блок.Вставить("Строка1", "");
		Блок.Вставить("СтрокаВидимость1", Ложь);
		Блок.КолвоСтрок = Блок.КолвоСтрок + 1;
		
		ДобавитьСсылкуНаПомощникОтчетовПрошлыхПериодов(Блок, ЭтоНалог, СтрокиИндикатора, ПараметрыМонитора);
	ИначеЕсли НуженПомощникОплатыНалоговПрошлыхПериодовДляСтрокИндикатора(СтрокиИндикатора, ЭтоНалог) Тогда
		
		// Выводим только заголовок, строка пояснения не требуется.
		Блок.Вставить("Строка1", "");
		Блок.Вставить("СтрокаВидимость1", Ложь);
		Блок.КолвоСтрок = Блок.КолвоСтрок + 1;
		
		ДобавитьСсылкуНаПомощникОплатыНалоговПрошлыхПериодов(Блок, ЭтоНалог, СтрокиИндикатора, ПараметрыМонитора, КодЗадачи);
	Иначе
		ДобавитьСтроку1(Блок, ОписаниеТекущегоНалогаОтчета(СтрокиИндикатора, ЭтоНалог, ПараметрыМонитора));
		
		ДобавитьСсылкиНаТекущиеНалогиОтчеты(Блок, ЭтоНалог, СтрокиИндикатора, КодЗадачи, ИмяЗадачи, ПараметрыМонитора);
		
	КонецЕсли;
	
	Возврат Блок;
	
КонецФункции

Функция КрасныйБлок(СтрокиИндикатора, ЭтоНалог, КодЗадачи, ИмяЗадачи, ПараметрыМонитора)
	
	Блок = БазовыйБлок(ПараметрыМонитора);
	Блок.ЦветФона = ПараметрыМонитора.ЦветКрасныйБлок;
	
	Если СтрокиИндикатора.Количество() = 0 Тогда
		Блок.Строка0 = ЗаголовокНалогаОтчета("Ошибка", ЭтоНалог, СтрокиИндикатора, ПараметрыМонитора, КодЗадачи);
		Возврат Блок;
	КонецЕсли;
	
	// Страховые взносы ИП для нулевки.
	Если ЭтоЗадачаВзносовИП(КодЗадачи)
		И ПараметрыМонитора.ЭтоИПНулевка Тогда
		
		ЗаполнитьКрасныйБлокВзносыЗаСебяИПНулевка(Блок, СтрокиИндикатора, ПараметрыМонитора);
		Возврат Блок;
	КонецЕсли;
	
	Если ЭтоЗадачаНулеваяОтчетность(КодЗадачи) Тогда
		ЗаполнитьКрасныйБлокНулеваяОтчетность(Блок, СтрокиИндикатора, ЭтоНалог, ПараметрыМонитора, КодЗадачи);
		Возврат Блок;
	КонецЕсли;
	
	Если ЭтоНалог Тогда
		ИтогКУплатеТекущий = 0;
		ИтогКУплатеДолг =  0;
		
		Для Каждого Индикатор Из СтрокиИндикатора Цикл
			ИтогКУплатеТекущий = ИтогКУплатеТекущий + Индикатор.КУплатеТекущий;
			ИтогКУплатеДолг = ИтогКУплатеДолг + Индикатор.КУплатеДолг;
		КонецЦикла;
		
		// Заголовок.
		ИндикаторДляЗаголовка = ?(ИтогКУплатеТекущий > 0, ЦветаИндикаторов().Желтый, ЦветаИндикаторов().Красный);
		ШаблонЗаголовка = ЗаголовокНалогаОтчета(ИндикаторДляЗаголовка, ЭтоНалог, СтрокиИндикатора, ПараметрыМонитора, КодЗадачи);
		
		СуммаКУплате = ИтогКУплатеТекущий + ИтогКУплатеДолг;
		Блок.Строка0 = ОтформатироватьСтрокуСуммы(ШаблонЗаголовка, СуммаКУплате);
		
		// Описание.
		Если ИтогКУплатеТекущий > 0 Тогда
			Строка1 = ОписаниеТекущегоНалогаОтчета(СтрокиИндикатора, ЭтоНалог, ПараметрыМонитора);
		Иначе
			Строка1 = ОписаниеПросроченногоНалогаОтчета(СтрокиИндикатора, ЭтоНалог, ПараметрыМонитора);
		КонецЕсли;
		ДобавитьСтроку1(Блок, Строка1);
		
		// Ссылки на просроченные платежи. Для некоторых задач формируются особым образом.
		
		Если ЭтоЗадачаВзносовИП(КодЗадачи) Тогда
			
			ЗаполнитьСсылкиНаУплатуЗадолженностиПоВзносамИП(Блок, СтрокиИндикатора, КодЗадачи, ПараметрыМонитора);
		
		ИначеЕсли ЭтоЗадачаУСН(КодЗадачи) Тогда
			
			ЗаполнитьСсылкиНаУплатуЗадолженностиПоНалогуУСН(Блок, СтрокиИндикатора, КодЗадачи, ИмяЗадачи, ПараметрыМонитора);
			
		Иначе
			
			// Ссылки текущих платежей.
			ДобавитьСсылкиНаТекущиеНалогиОтчеты(Блок, ЭтоНалог, СтрокиИндикатора, КодЗадачи, ИмяЗадачи, ПараметрыМонитора);
			
			Если ИтогКУплатеТекущий = 0 Тогда // Ссылка на текущий платеж отсутствует.
				
				// Для перехода к оплате задолженности требуется вывести отдельную ссылку на обслуживающий помощник.
				
				ДанныеИндикатора = СтрокиИндикатора[0];
				
				Если Не (ИтогКУплатеТекущий = 0 И ДанныеИндикатора.ЭтоТекущаяЗадача) Тогда
					ПериодСобытия = Мин(ПараметрыМонитора.ТекущийДень, ДанныеИндикатора.ПериодСобытия);
					КонецПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(ДанныеИндикатора.Периодичность, ПериодСобытия) - 1;
					НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(ДанныеИндикатора.Периодичность, КонецПериода);
				Иначе
					КонецПериода  = ДанныеИндикатора.ПериодСобытия;
					НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(ДанныеИндикатора.Периодичность, КонецПериода);
				КонецЕсли;
				
				ДанныеИндикатора.ПериодСобытия = КонецПериода;
				ДанныеИндикатора.НачалоПериодаСобытия = НачалоПериода;
				
				ДанныеИндикатора.НаименованиеЗадачи = ЗаменитьВНаименованииПериод(ДанныеИндикатора.НаименованиеЗадачи,
					ДанныеИндикатора.НачалоПериодаСобытия, ДанныеИндикатора.ПериодСобытия);
				
				ПараметрыСсылки = СФормироватьПараметрыСсылки(ДанныеИндикатора, КодЗадачи, ЭтоНалог, ПараметрыМонитора);
				
				НадписьПросрочено = НСтр("ru = 'Оплата задолженности'");
				ДобавитьСтрокуСоСсылкой(Блок, НадписьПросрочено, ПараметрыСсылки);
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ЕстьТекущаяЗадача = Ложь;
		МинСрокТекущаяЗадача = ПараметрыМонитора.МаксДата;
		Для Каждого Индикатор Из СтрокиИндикатора Цикл 
			Если Индикатор.ЭтоТекущаяЗадача И Не Индикатор.ТекущийОтчетСдан Тогда
				МинСрокТекущаяЗадача = Мин(Индикатор.Срок, МинСрокТекущаяЗадача);
				ЕстьТекущаяЗадача = Истина;
			КонецЕсли;
		КонецЦикла;
		
		// Заголовок и описание.
		Если ЕстьТекущаяЗадача Тогда
			Строка0 = ЗаголовокНалогаОтчета(ЦветаИндикаторов().Желтый, ЭтоНалог, СтрокиИндикатора, ПараметрыМонитора, КодЗадачи);
			Строка1 = ОписаниеТекущегоНалогаОтчета(СтрокиИндикатора, ЭтоНалог, ПараметрыМонитора);
		Иначе
			Строка0 = ЗаголовокНалогаОтчета(ЦветаИндикаторов().Красный, ЭтоНалог, СтрокиИндикатора, ПараметрыМонитора, КодЗадачи);
			Строка1 = ОписаниеПросроченногоНалогаОтчета(СтрокиИндикатора, ЭтоНалог, ПараметрыМонитора);
		КонецЕсли;
		Блок.Строка0 = Строка0;
		ДобавитьСтроку1(Блок, Строка1);
		
		// Ссылки текущих отчетов.
		ДобавитьСсылкиНаТекущиеНалогиОтчеты(Блок, ЭтоНалог, СтрокиИндикатора, КодЗадачи, ИмяЗадачи, ПараметрыМонитора);
		
		СсылкиНаПросроченныеОтчеты = СсылкиНаПросроченныеОтчеты(ЭтоНалог, СтрокиИндикатора, КодЗадачи, ИмяЗадачи, ПараметрыМонитора);
		Если ЗначениеЗаполнено(СсылкиНаПросроченныеОтчеты) Тогда
			ДобавитьСсылкиНаПросроченныеОтчеты(Блок, ЕстьТекущаяЗадача, СсылкиНаПросроченныеОтчеты);
		КонецЕсли;
		
		ДобавитьСсылкиНаОтчетыПрошлыхПериодов(Блок, ЭтоНалог, СтрокиИндикатора, КодЗадачи, ИмяЗадачи, ПараметрыМонитора);
		
	КонецЕсли;
	
	Возврат Блок;
	
КонецФункции

Функция СерыйБлок(СтрокаЗадачи, ЭтоНалог, ПараметрыМонитора)
	
	Блок = БазовыйБлок(ПараметрыМонитора);
	
	Строка0 = ?(ЭтоНалог, ЗаголовокОплатаНалогов(), ЗаголовокСдачаОтчетности());
	
	Строка0 = Новый ФорматированнаяСтрока(Строка0, ПараметрыМонитора.ШрифтСсылок);
	СтрокаСсылка = Новый ФорматированнаяСтрока(Строка0, ПараметрыМонитора.ШрифтЗаголовков,,, 
                                               "e1cib/command/ОбщаяКоманда.СписокЗадач");
	Блок.Строка0 = СтрокаСсылка;
	
	Если ЭтоЗадачаПатент(СтрокаЗадачи.КодЗадачи) Тогда
		Правила = Справочники.Патенты.ПатентыОрганизации(ПараметрыМонитора.Организация, ПараметрыМонитора.ТекущийДень);
	Иначе
		Правила = ?(ЭтоНалог, СтрокаЗадачи.ПравилоНалог, СтрокаЗадачи.ПравилоОтчет);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Организация,Правило", ПараметрыМонитора.Организация, Правила);
	ОписаниеДействия = Новый Структура;
	ОписаниеДействия.Вставить("ИмяФормы", "ОбщаяФорма.СписокЗадач");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Блок.Вставить("ПараметрыНавигационныхСсылок", ОписаниеДействия);
	
	Возврат Блок;
	
КонецФункции

Функция ПустойБлок(ПараметрыМонитора)
	
	Блок = БазовыйБлок(ПараметрыМонитора);
	Блок.ЦветФона = ПараметрыМонитора.ЦветЖелтыйБлок;
	
	Возврат Блок;
	
КонецФункции

Функция БазовыйБлок(ПараметрыМонитора)
	
	Свойства = Новый Структура;
	Свойства.Вставить("Доступность", Истина);
	Свойства.Вставить("ЦветФона", ПараметрыМонитора.ЦветСерыйБлок);
	Свойства.Вставить("Строка0", Новый ФорматированнаяСтрока(""));
	Свойства.Вставить("СтрокаВидимость0", Истина);
	Свойства.Вставить("КолвоСтрок", 1);
	
	Возврат Свойства;
	
КонецФункции

#КонецОбласти

#Область НулевыеИндикаторы

Процедура ЗаполнитьЗеленыйБлокНулеваяОтчетность(Блок, СтрокиИндикатора, ЭтоНалог, КодЗадачи, ПараметрыМонитора)
	
	Если ЭтоНалог Тогда
		Блок.Строка0 = НулевойНалогЗаголовок(ПараметрыМонитора);
		ДобавитьСтроку1(Блок, НулевойНалогОписание());
	Иначе
		Индикатор = СтрокиИндикатора[0]; // Всегда единственный
		Блок.Строка0 = НулевойОтчетЗаголовок(Индикатор, ПараметрыМонитора);
		
		ОсобенностиОтчета = Новый Структура("ФинансовыйПериод, РасширенныйПервыйНалоговыйПериод");
		ЗаполнитьЗначенияСвойств(ОсобенностиОтчета, Индикатор);
		
		СледующийОтчетСдаетсяВпервые = ПомощникиПоУплатеНалоговИВзносов.ЭтоПервыйОтчетныйПериод(ПараметрыМонитора.Организация,
			Индикатор.БудущаяЗадача.НачалоПериодаСобытия, ОсобенностиОтчета, ПараметрыМонитора.ДатаНачалаДеятельности);
		
		ДобавитьСтроку1(Блок, ОписаниеСледующегоНулевогоОтчета(Индикатор, СледующийОтчетСдаетсяВпервые));
		
		ДобавитьСтрокуСоСсылкой(Блок,
			НСтр("ru = 'Подробнее'"),
			ОписаниеДействияПодготовкаНулевойОтчетности(ПараметрыМонитора));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьЖелтыйБлокНулеваяОтчетность(Блок, СтрокиИНдикатора, ЭтоНалог, ПараметрыМонитора, КодЗадачи)
	
	Если ЭтоНалог Тогда
		// Желтый блок налога при нулевой отчетности невозможен.
		Блок.Строка0 = ЗаголовокНалогаОтчета("Ошибка", ЭтоНалог, СтрокиИндикатора, ПараметрыМонитора, КодЗадачи);
		Возврат;
	КонецЕсли;
	
	Индикатор = СтрокиИНдикатора[0]; // Всегда единственный
	Блок.Строка0 = НулевойОтчетЗаголовок(Индикатор, ПараметрыМонитора);
	
	Если Индикатор.ЭтоТекущаяЗадача Тогда
		
		ДобавитьСтроку1(Блок, ОписаниеТекущегоНалогаОтчета(СтрокиИНдикатора, Ложь, ПараметрыМонитора));
		
		Если Индикатор.ТекущийОтчетЕстьВБазе Тогда
			ДобавитьСтрокуСоСсылкой(Блок, НСтр("ru = 'Подробнее'"),
				ОписаниеДействияПодготовкаНулевойОтчетности(ПараметрыМонитора));
		Иначе
			ДобавитьСтрокуСоСсылкой(Блок, НСтр("ru = 'Подготовить нулевую отчетность'"),
				ОписаниеДействияПодготовкаНулевойОтчетности(ПараметрыМонитора));
		КонецЕсли;
		
	Иначе
		
		// Выводим только заголовок, строка пояснения не требуется.
		Блок.Вставить("Строка1", "");
		Блок.Вставить("СтрокаВидимость1", Ложь);
		Блок.КолвоСтрок = Блок.КолвоСтрок + 1;
		
		// Ссылка ведет к тесту на отчетность прошлых периодов.
		ОписаниеДействия = ОписаниеДействияПроверитьОтчетностьПрошлыхПериодов(
			ПараметрыМонитора.Организация,
			Индикатор.Правило,
			Индикатор.НачалоПериодаСобытия);
		ДобавитьСтрокуСоСсылкой(Блок, НСтр("ru = 'Проверить'"), ОписаниеДействия);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьКрасныйБлокНулеваяОтчетность(Блок, СтрокиИНдикатора, ЭтоНалог, ПараметрыМонитора, КодЗадачи)
	
	Если ЭтоНалог Тогда
		// Красный блок налога при нулевой отчетности невозможен.
		Блок.Строка0 = ЗаголовокНалогаОтчета("Ошибка", ЭтоНалог, СтрокиИндикатора, ПараметрыМонитора, КодЗадачи);
		Возврат;
	КонецЕсли;
	
	Индикатор = СтрокиИНдикатора[0]; // Всегда единственный
	
	Блок.Строка0 = НулевойОтчетЗаголовок(Индикатор, ПараметрыМонитора);
	
	ДобавитьСтроку1(Блок, ОписаниеПросроченногоНалогаОтчета(СтрокиИНдикатора, Ложь, ПараметрыМонитора));
	
	ТекстСсылки = НСтр("ru = 'Подготовить нулевую отчетность'");
	ОписаниеДействияСсылки = ОписаниеДействияПодготовкаНулевойОтчетности(ПараметрыМонитора);
	ДобавитьСтрокуСоСсылкой(Блок, ТекстСсылки, ОписаниеДействияСсылки);
	
КонецПроцедуры

Функция НулевойНалогЗаголовок(ПараметрыМонитора)
	
	ЭлементыЗаголовка = Новый Массив;
	
	ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока(Нстр("ru = 'Платить не требуется'"), ПараметрыМонитора.ШрифтЗаголовков));
	ЭлементыЗаголовка.Добавить(" ");
	ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока(ПараметрыМонитора.РадостныйСмайлик));
	
	Возврат Новый ФорматированнаяСтрока(ЭлементыЗаголовка);
	
КонецФункции

Функция НулевойНалогОписание()
	
	Возврат НСтр("ru = 'Налоги не уплачиваются, если деятельность отсутствует'");
	
КонецФункции

Функция НулевойОтчетЗаголовок(Индикатор, ПараметрыМонитора)
	
	ЭлементыЗаголовка = Новый Массив;
	
	Если Индикатор.Индикатор = ЦветаИндикаторов().Зеленый Тогда
		
		ТекстЗаголовка = ?(Индикатор.ТекущийОтчетСдан,
			НСтр("ru ='Отчетность сдана'"),
			НСтр("ru ='Сдавать отчеты не требуется'"));
		
		ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока(ТекстЗаголовка, ПараметрыМонитора.ШрифтЗаголовков));
		ЭлементыЗаголовка.Добавить(" ");
		ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока(ПараметрыМонитора.РадостныйСмайлик));
		
	ИначеЕсли Индикатор.Индикатор = ЦветаИндикаторов().Желтый Тогда
		
		Если Индикатор.ЭтоТекущаяЗадача Тогда
			ТекстЗаголовка = "";
			
			Если Индикатор.ТекущийОтчетЕстьВБазе Тогда
				// Отчеты уже подготовлены.
				ТекстЗаголовка = Нстр("ru = 'Отчетность подготовлена'");
			Иначе
				// Имеются отчеты, которые нужно сдать сейчас.
				ТекстЗаголовка = НСтр("ru ='Пора сдавать нулевую отчетность'");
			КонецЕсли;
			
			ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока(ТекстЗаголовка, ПараметрыМонитора.ШрифтЗаголовков));
		Иначе
			// Сейчас сдавать отчеты не требуется, но нужно проверить, есть ли не сданные в прошлом.
			ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Проверьте, нужно ли сдать отчеты'"), ПараметрыМонитора.ШрифтЗаголовков));
			ЭлементыЗаголовка.Добавить(Символы.ПС);
			ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'за прошлые периоды'"), ПараметрыМонитора.ШрифтЗаголовков));
		КонецЕсли;
		
	ИначеЕсли Индикатор.Индикатор = ЦветаИндикаторов().Красный Тогда
		
		ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока(Нстр("ru = 'Отчетность просрочена'"), ПараметрыМонитора.ШрифтЗаголовков));
		
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(ЭлементыЗаголовка);
	
КонецФункции

Функция ОписаниеСледующегоНулевогоОтчета(Индикатор, ЭтоПервыйОтчет)
	
	ШаблонОписания = НСтр("ru = '%1 отчет не позднее %2
										|(%3)'");
	
	ВидОтчетаПредставление = ?(ЭтоПервыйОтчет, НСтр("ru = 'Первый'"), НСтр("ru = 'Следующий'"));
	
	СвойстваЗадачи = Индикатор.БудущаяЗадача;
	
	СрокПредставление = Формат(СвойстваЗадачи.Срок, ФорматДата());
	
	ОтчетПредставление = СтрШаблон("%1, %2",
		СвойстваЗадачи.ИмяЗадачи,
		ДекапитализироватьСтроку(СвойстваЗадачи.Наименование));
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонОписания,
		ВидОтчетаПредставление,
		СрокПредставление,
		ОтчетПредставление);
	
КонецФункции

Функция ОписаниеДействияПодготовкаНулевойОтчетности(ПараметрыМонитора)
	
	ОписаниеДействия = Новый Структура;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", ПараметрыМонитора.Организация);
	
	ОписаниеДействия.Вставить("ИмяФормы", "Обработка.ПодготовкаНулевойОтчетности.Форма.Форма");
	ОписаниеДействия.Вставить("ИдентификаторФормы", ПараметрыМонитора.УникальныйИдентификатор);
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ОписаниеДействияПроверитьОтчетностьПрошлыхПериодов(Организация, Правило, ОтчетныйПериод)
	
	ОписаниеДействия = Новый Структура;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",    Организация);
	ПараметрыФормы.Вставить("Правило",        Правило);
	ПараметрыФормы.Вставить("ОтчетныйПериод", ОтчетныйПериод);
	
	ОписаниеДействия.Вставить("ИмяФормы", "Обработка.МониторНалоговИОтчетности.Форма.ФормаТестПрошлыхПериодов");
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеБлоков

Процедура УдалитьСтрокиТаблицы(ТаблицаИсточник, УдаляемыеСтроки)
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
		ТаблицаИсточник.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

Функция ДекапитализироватьСтроку(ИсхСтрока)
	
	// от французского décapitalizer
	
	// В общем случае применять этот прием нельзя, так как первая бука может быть заглавной не только,
	// потому что это начало предложения. Например, если это имя собственное.
	
	ПерваяБуква = НРег(Лев(ИсхСтрока, 1));
	Остальное = Сред(ИсхСтрока, 2);
	Возврат ПерваяБуква + Остальное;
	
КонецФункции

Функция ЗаголовокНалогаОтчета(ТипБлока, ЭтоНалог, СтрокиИндикатора, ПараметрыМонитора, КодЗадачи)
	
	Результат = Новый ФорматированнаяСтрока("");
	
	Если ТипБлока = ЦветаИндикаторов().Зеленый Тогда
		
		Строка0   = ?(ЭтоНалог, Нстр("ru = 'Налоги оплачены '"), Нстр("ru = 'Отчетность сдана '"));
		Строка0   = Новый ФорматированнаяСтрока(Строка0, ПараметрыМонитора.ШрифтЗаголовков);
		Смайлик   = Новый ФорматированнаяСтрока(ПараметрыМонитора.РадостныйСмайлик);
		Результат = Новый ФорматированнаяСтрока(Строка0, Смайлик);
		
	ИначеЕсли ТипБлока = ЦветаИндикаторов().Желтый Тогда
		Если ЭтоНалог Тогда
			Если НуженПомощникОплатыНалоговПрошлыхПериодовДляСтрокИндикатора(СтрокиИндикатора, ЭтоНалог) Тогда
				Шаблон = Нстр("ru = 'Проверьте, нет ли задолженности по %1 за прошлые годы'");
				Строка0 = СтрШаблон(Шаблон, ?(ЭтоЗадачаВзносовИП(КодЗадачи),
					НСтр("ru = 'взносам'"), НСтр("ru = 'налогу'")));
			Иначе
				Строка0 = Нстр("ru = 'Пора оплатить %1 руб.'");
			КонецЕсли;
		Иначе
			
			Если НуженПомощникОтчетовПрошлыхПериодовДляСтрокИндикатора(СтрокиИндикатора, ЭтоНалог) Тогда
				Строка0 = Нстр("ru = 'Проверьте, нужно ли сдать отчеты за прошлые периоды'");
			ИначеЕсли ОтчетностьПодготовлена(СтрокиИндикатора, ПараметрыМонитора) Тогда
				Строка0 = Нстр("ru = 'Отчетность подготовлена'");
			Иначе
				Строка0 = Нстр("ru = 'Пора сдавать отчетность'");
			КонецЕсли;
			
		КонецЕсли;
		Результат = Новый ФорматированнаяСтрока(Строка0, ПараметрыМонитора.ШрифтЗаголовков);
	ИначеЕсли ТипБлока = ЦветаИндикаторов().Красный Тогда
		
		Строка0   = ?(ЭтоНалог, Нстр("ru = 'Мы должны %1 руб.'"), Нстр("ru = 'Отчетность просрочена'"));
		Результат = Новый ФорматированнаяСтрока(Строка0, ПараметрыМонитора.ШрифтЗаголовков);
	ИначеЕсли ТипБлока = "Ошибка" Тогда
		ВызватьИсключение Нстр("ru = 'Непредвиденная ошибка. Попробуйте сформировать монитор еще раз'");
	Иначе
		Строка0 = ?(ЭтоНалог, НСтр("ru = 'Налоги еще не оплачивались'"), НСтр("ru = 'Отчетность еще не сдавалась'"));
		Результат = Новый ФорматированнаяСтрока(Строка0, ПараметрыМонитора.ШрифтЗаголовков);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОтчетностьПодготовлена(СтрокиИндикатора, ПараметрыМонитора)
	
	ВсеОтчетыЕстьВБазе = Истина;
	
	Для Каждого Индикатор Из СтрокиИндикатора Цикл
		Если Индикатор.ЭтоТекущаяЗадача И Не Индикатор.ТекущийОтчетЕстьВБазе Тогда
			ВсеОтчетыЕстьВБазе = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВсеОтчетыЕстьВБазе;
	
КонецФункции

Функция ОписаниеСледующегоНалогаОтчета(СтрокиИндикатора, ЭтоНалог, КодЗадачи, ЭтоПерваяЗадача, ПараметрыМонитора)
	
	Результат = "";
	Параметр2КакИмя = Ложь;
	Если ЭтоНалог Тогда
		ШаблонТекста = ?(ЭтоПерваяЗадача, НСтр("ru = 'Первый платеж не позднее %1'"), НСтр("ru = 'Следующий платеж не позднее %1'"));
	ИначеЕсли ЭтоЗадачаУСН(КодЗадачи) Или ЭтоЗадачаЕНВД(КодЗадачи) тогда
		ШаблонТекста = ?(ЭтоПерваяЗадача, НСтр("ru = 'Первая декларация не позднее %1'"), НСтр("ru = 'Следующая декларация не позднее %1'"));
	ИначеЕсли ЭтоЗадачаСтраховыхВзносов(КодЗадачи) Тогда
		ШаблонТекста = ?(ЭтоПерваяЗадача, НСтр("ru = 'Первые отчеты в фонды не позднее %1'"), НСтр("ru = 'Следующие отчеты в фонды не позднее %1'"));
	Иначе
		ШаблонТекста = ?(ЭтоПерваяЗадача, НСтр("ru = 'Первый отчет не позднее %1'"), НСтр("ru = 'Следующий отчет не позднее %1'"));
		Параметр2КакИмя = Истина;
	КонецЕсли;
	ШаблонТекста = ШаблонТекста + Символы.ПС + "(%2)";

	Если СтрокиИндикатора.Количество() = 1 Тогда
		
		СвойстваЗадачи = СтрокиИндикатора[0].БудущаяЗадача;
		Параметр1      = Формат(СвойстваЗадачи.Срок, ФорматДата());
		Если Параметр2КакИмя Тогда
			Параметр2 = СвойстваЗадачи.Наименование;
		Иначе
			Параметр2 = Нстр("ru = 'за '") + КалендарьБухгалтера.ПредставлениеПериодаСобытия(СвойстваЗадачи.НачалоПериодаСобытия, СвойстваЗадачи.ПериодСобытия);
		КонецЕсли;
		
		Результат = СтрШаблон(ШаблонТекста, Параметр1, ДекапитализироватьСтроку(Параметр2));
		
	Иначе
		
		//Сначала находим минимальные задачи по периоду события.
		МинПериодСобытия = ПараметрыМонитора.МаксДата;
		Для Каждого Индикатор Из СтрокиИндикатора Цикл
			Если НЕ ЗначениеЗаполнено(Индикатор.БудущаяЗадача.Срок) Тогда
				// Будущей задачи нет, пропускаем такие.
				Продолжить;
			КонецЕсли;
			Если Не (Индикатор.БудущаяЗадача.НачалоВыполнения > ПараметрыМонитора.ТекущийДень 
					 И Индикатор.БудущаяЗадача.Срок < ПараметрыМонитора.ТекущийДень) Тогда
				МинПериодСобытия = Мин(МинПериодСобытия, Индикатор.БудущаяЗадача.ПериодСобытия);
			КонецЕсли;
		КонецЦикла;
		
		ОтобранныеПоПериодуСобытия = Новый Массив;
		
		// Отбираем задачи с минимальным периодом события.
		Для Каждого Индикатор Из СтрокиИндикатора Цикл
			Если МинПериодСобытия = Индикатор.БудущаяЗадача.ПериодСобытия Тогда
				ОтобранныеПоПериодуСобытия.Добавить(Индикатор);
			КонецЕсли;
		КонецЦикла;
		
		Если ОтобранныеПоПериодуСобытия.Количество() = 1 Тогда
			
			Событие = ОтобранныеПоПериодуСобытия[0];
			Результат = СтрШаблон(ШаблонТекста, Формат(Событие.БудущаяЗадача.Срок, ФорматДата()), 
				ДекапитализироватьСтроку(Событие.БудущаяЗадача.Наименование));
			
		Иначе
			
			// Теперь находим минимальные задачи по сроку выполнения
			МинСрок = ПараметрыМонитора.МаксДата;
			Для Каждого Событие Из ОтобранныеПоПериодуСобытия Цикл
				МинСрок = Мин(МинСрок, Событие.БудущаяЗадача.Срок);
			КонецЦикла;
			
			// Подсчитываем количество задач с минимальным сроком выполнения.
			ОтобранныеПоСроку = Новый Массив;
			Для Каждого Событие Из ОтобранныеПоПериодуСобытия Цикл
				Если МинСрок = Событие.БудущаяЗадача.Срок Тогда
					ОтобранныеПоСроку.Добавить(Событие);
				КонецЕсли;
			КонецЦикла;
			
			Если ОтобранныеПоСроку.Количество() = 1 Тогда
				
				Событие = ОтобранныеПоСроку[0];
				Результат = СтрШаблон(ШаблонТекста, Формат(Событие.БудущаяЗадача.Срок, ФорматДата()),
					ДекапитализироватьСтроку(Событие.БудущаяЗадача.Наименование));
				
			Иначе
				
				Если ЭтоПерваяЗадача Тогда
					ШаблонТекста = ?(ЭтоНалог, НСтр("ru = 'Первые налоги не позднее %1: %2'"), 
						НСтр("ru = 'Первые отчеты не позднее %1: %2'"));
				Иначе
					ШаблонТекста = ?(ЭтоНалог, НСтр("ru = 'Следующие налоги не позднее %1: %2'"), 
						НСтр("ru = 'Следующие отчеты не позднее %1: %2'"));
				КонецЕсли;
				
				ГруппировкаДат = Новый Соответствие;
				Для Каждого Событие Из ОтобранныеПоСроку Цикл
						
					СтрокаОписания = ГруппировкаДат.Получить(Событие.Срок);
					Если СтрокаОписания = Неопределено Тогда
						СтрокаОписания = "";
					КонецЕсли;
					
					СтрокаОписания = СтрокаОписания + Символы.ПС + "- " + Событие.Наименование;
					ГруппировкаДат.Вставить(Событие.БудущаяЗадача.Срок, СтрокаОписания);
						
				КонецЦикла;
				
				Для Каждого КлючИЗначение Из ГруппировкаДат Цикл
					СтрокаОписания = СтрШаблон(ШаблонТекста, Формат(КлючИЗначение.Ключ, ФорматДата()), КлючИЗначение.Значение);
					Результат = Результат + ? (ПустаяСтрока(Результат), СтрокаОписания, Символы.ПС + СтрокаОписания);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеТекущегоНалогаОтчета(СтрокиИндикатора, ЭтоНалог, ПараметрыМонитора)
	
	ШаблонТекста = Нстр("ru = 'Не позднее %1'");

	Результат = "";
	
	Если СтрокиИндикатора.Количество() = 1 Тогда
		СвойстваЗадачи = СтрокиИндикатора[0];
		Результат = СтрШаблон(ШаблонТекста,  Формат(СвойстваЗадачи.Срок, ФорматДата()));
	ИначеЕсли СтрокиИндикатора.Количество() > 1 Тогда
		
		МинСрок = ПараметрыМонитора.МаксДата;
		КолВоРазныхСроковТекущихЗадач = 0;
		СчетчикТекущихОтчетов = 0;
		НаименованиеЗадачиСМинСроком = "";
		Для Каждого Индикатор Из СтрокиИндикатора Цикл
			Если ЭтоНалог И Индикатор.ЭтоТекущаяЗадача Тогда
				Если Индикатор.КУплатеТекущий > 0 Тогда
					МинСрок = Мин(МинСрок, Индикатор.Срок);
				КонецЕсли;
			ИначеЕсли Не ЭтоНалог И Индикатор.ЭтоТекущаяЗадача И Не Индикатор.ТекущийОтчетСдан Тогда
				СчетчикТекущихОтчетов = СчетчикТекущихОтчетов + 1;
				Если СчетчикТекущихОтчетов >= ЛимитСсылокИндикатора() Тогда
					Прервать;
				КонецЕсли;
				Если МинСрок <> Индикатор.Срок Тогда
					КолВоРазныхСроковТекущихЗадач = КолВоРазныхСроковТекущихЗадач + 1;
				КонецЕсли;
				Если МинСрок > Индикатор.Срок Тогда
					МинСрок = Мин(МинСрок, Индикатор.Срок);
					НаименованиеЗадачиСМинСроком = Индикатор.Наименование;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЭтоНалог И КолВоРазныхСроковТекущихЗадач > 1 Тогда
			ШаблонТекста = Нстр("ru = '%1 не позднее %2'");
			Результат = СтрШаблон(ШаблонТекста, НаименованиеЗадачиСМинСроком, Формат(МинСрок, ФорматДата()));
		Иначе
			Результат = СтрШаблон(ШаблонТекста, Формат(МинСрок, ФорматДата()));
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеПросроченногоНалогаОтчета(СтрокиИндикатора, ЭтоНалог, ПараметрыМонитора)
	
	Результат = "";
	
	Если ЭтоНалог Тогда
		
		Результат = НСтр("ru = 'Задолженность могла образоваться за один или несколько прошлых периодов'");
		
	Иначе
		
		ПоследнийСрок = ПараметрыМонитора.МинДата;
		
		Для Каждого Индикатор Из СтрокиИндикатора Цикл
			МаксимальныйСрокПросроченногоОтчета = МаксимальныйСрокПросроченногоОтчетаИндикатора(Индикатор);
			Если ЗначениеЗаполнено(МаксимальныйСрокПросроченногоОтчета)
				И МаксимальныйСрокПросроченногоОтчета > ПоследнийСрок Тогда
				ПоследнийСрок = МаксимальныйСрокПросроченногоОтчета;
			КонецЕсли;
		КонецЦикла;
		
		ШаблонТекста = Нстр("ru = 'С %1'");
		
		Сутки = 86400;
		Результат = СтрШаблон(ШаблонТекста, Формат(ПоследнийСрок + Сутки, ФорматДата())); 
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ОписаниеСсылкиТекущегоНалогаОтчета(СтрокаИндикатора, ЭтоНалог, ПараметрыМонитора)
	
	НаименованиеСсылки = "";
	Если ЭтоНалог ИЛИ ПустаяСтрока(СтрокаИндикатора.СтатусТекущегоОтчета) Тогда
		НаименованиеСсылки = СтрокаИндикатора.Наименование;
	Иначе
		НаименованиеСсылки = СтрШаблон("%1 (%2)", СтрокаИндикатора.Наименование, СтрокаИндикатора.СтатусТекущегоОтчета);
	КонецЕсли;
	
	Возврат НаименованиеСсылки;
	
КонецФункции

Функция ЗаменитьВНаименованииПериод(ИсхНаименование, НачалоПериода, КонецПериода)
	
	Результат = "";
	ВыражениеПоиска = Нстр("ru = ' за '");
	КонПоз = СтрНайти(ВРег(ИсхНаименование), ВРег(ВыражениеПоиска));
	Если КонПоз = 0 Тогда
		Результат = ИсхНаименование;
	Иначе
		Результат = Лев(ИсхНаименование, КонПоз - 1);
	КонецЕсли;
	
	Возврат Результат + ВыражениеПоиска + КалендарьБухгалтера.ПредставлениеПериодаСобытия(НачалоПериода, КонецПериода);
	
КонецФункции

Функция СформироватьПараметрыСсылки(ДанныеИндикатора, КодЗадачи, ЭтоНалог, ПараметрыМонитора)
	
	ПараметрыКоманды                      = ВыполнениеЗадачБухгалтераКлиентСервер.НовыеПараметрыКомандЗадачи();
	ПараметрыКоманды.Задача               = ДанныеИндикатора.Владелец;
	ПараметрыКоманды.ИдентификаторЗадачи  = КодЗадачи;
	ПараметрыКоманды.Организация          = ПараметрыМонитора.Организация;
	ПараметрыКоманды.Срок                 = ДанныеИндикатора.Срок;
	ПараметрыКоманды.Правило              = ДанныеИндикатора.Правило;
	ПараметрыКоманды.ИдентификаторПравила = ДанныеИндикатора.КодПравила;
	ПараметрыКоманды.ПериодСобытия        = ДанныеИндикатора.ПериодСобытия;
	ПараметрыКоманды.Периодичность        = ДанныеИндикатора.Периодичность;
	ПараметрыКоманды.Наименование         = ДанныеИндикатора.НаименованиеЗадачи; // В обслуживающий помощник передаем полное наименование из списка задач.
	ПараметрыКоманды.Действие             = ?(ЭтоНалог, Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога,
		Перечисления.ВидыДействийКалендаряБухгалтера.Отчет);
	
	ОписаниеДействия = ЗадачиБухгалтераКлиентСервер.ОписаниеДействия(ПараметрыКоманды);
	
	// Для того, чтобы помощники по УСН и ЕНВД открывались с возможностью переключить период.
	Если НЕ ЭтоЗадачаНалогНаПрофессиональныйДоход(КодЗадачи) И ОписаниеДействия.Свойство("ПараметрыФормы") Тогда
		Если ОписаниеДействия.ПараметрыФормы.Свойство("ВызовИзСпискаЗадач") Тогда
			ОписаниеДействия.ПараметрыФормы.ВызовИзСпискаЗадач = Ложь;
		КонецЕсли;
		Если ОписаниеДействия.ПараметрыФормы.Свойство("КонтекстныйВызов") Тогда
			ОписаниеДействия.ПараметрыФормы.КонтекстныйВызов = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОписаниеДействия;
	
КонецФункции

Процедура ДобавитьСтрокуСоСсылкой(Блок, Наименование, ПараметрыСсылки, СмещениеСч = Неопределено)
	
	Если СмещениеСч = Неопределено Тогда
		СмещениеСч = Строка(Блок.КолвоСтрок);
		Блок.КолвоСтрок = Блок.КолвоСтрок + 1;
	КонецЕсли;
	
	Блок.Вставить("Строка" + СмещениеСч, Наименование);
	Блок.Вставить("СтрокаПараметрыСсылки" + СмещениеСч, ПараметрыСсылки);
	Блок.Вставить("СтрокаВидимость" + СмещениеСч, Истина);
	
КонецПроцедуры

Процедура ДобавитьСтроку1(Блок, Текст)
	
	Блок.Вставить("Строка1", Текст);
	Блок.Вставить("СтрокаВидимость1", Истина);
	Блок.КолвоСтрок = Блок.КолвоСтрок + 1;
	
КонецПроцедуры

Процедура ДобавитьСсылкиНаТекущиеНалогиОтчеты(Блок, ЭтоНалог, СтрокиИндикатора, КодЗадачи, ИмяЗадачи, ПараметрыМонитора)
	
	Если ЭтоНалог Тогда
		
		Для Каждого Индикатор Из СтрокиИндикатора Цикл
			Если Индикатор.КУплатеТекущий > 0 Тогда
				Если ЭтоЗадачаЕжеквартальныхФиксированныхВзносовИП(КодЗадачи, Индикатор.КодПравила) Тогда
					Индикатор.ПериодСобытия = КонецКвартала(ПараметрыМонитора.ТекущийДень);
				КонецЕсли;
				Если Обработки.ПомощникУплатыНалоговВзносовПрошлыхЛет.ПройденОпросПоНалогу(ПараметрыМонитора.Организация, КодЗадачи)
					И ЭтоОплатаНалогаЗаПрошлыйПериод(ПараметрыМонитора.Организация, Индикатор.ПериодСобытия, Индикатор.Периодичность) Тогда
					
					НаименованиеСсылки = НСтр("ru = 'Оплата задолженности за прошлые годы'");
				Иначе
					НаименованиеСсылки = ОписаниеСсылкиТекущегоНалогаОтчета(Индикатор, ЭтоНалог, ПараметрыМонитора);
				КонецЕсли;
				ПараметрыСсылки = СФормироватьПараметрыСсылки(Индикатор, КодЗадачи, ЭтоНалог, ПараметрыМонитора);
				ДобавитьСтрокуСоСсылкой(Блок, НаименованиеСсылки, ПараметрыСсылки);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		ТекущиеОтчеты = Новый Массив;
		СчетчикТекущихОтчетов = 0;
		Для Каждого Индикатор Из СтрокиИндикатора Цикл
			
			Если Не Индикатор.ТекущийОтчетСдан И Индикатор.ЭтоТекущаяЗадача Тогда
				
				ПараметрыСсылки = СФормироватьПараметрыСсылки(Индикатор, КодЗадачи, ЭтоНалог, ПараметрыМонитора);
				
				ПредставлениеСсылки = ОписаниеСсылкиТекущегоНалогаОтчета(Индикатор, ЭтоНалог, ПараметрыМонитора);
				
				ПараметрыСсылки.Вставить("ПредставлениеСсылки", ПредставлениеСсылки);
				ПараметрыСсылки.Вставить("Срок", Индикатор.Срок);
				ПараметрыСсылки.Вставить("ИмяЗадачи", ИмяЗадачи);
				ПараметрыСсылки.Вставить("ЭтоТекущаяЗадача", Истина);
				
				Если СчетчикТекущихОтчетов < ЛимитСсылокИндикатора() Тогда
					ДобавитьСтрокуСоСсылкой(Блок, ПредставлениеСсылки, ПараметрыСсылки);
				Иначе
					ТекущиеОтчеты.Добавить(ПараметрыСсылки);
				КонецЕсли;
				
				СчетчикТекущихОтчетов = СчетчикТекущихОтчетов + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если ТекущиеОтчеты.Количество() > 0 Тогда
			НадписьТекущиеОтчеты = СтрШаблон(НСтр("ru = 'Еще (%1)'"), ТекущиеОтчеты.Количество());
			ДобавитьСтрокуСоСсылкой(Блок, НадписьТекущиеОтчеты, ТекущиеОтчеты);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСсылкиНаОтчетыПрошлыхПериодов(Блок, ЭтоНалог, СтрокиИндикатора, КодЗадачи, ИмяЗадачи, ПараметрыМонитора)
	
	Если Не ЭтоНалог Тогда
		
		ЕстьОтчетностьПрошлыхПериодов = Ложь;
		
		Для Каждого Индикатор Из СтрокиИндикатора Цикл
			Если Индикатор.ОтчетыПрошлыхПериодов.Количество() > 0 Тогда
				ЕстьОтчетностьПрошлыхПериодов = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьОтчетностьПрошлыхПериодов Тогда
			Событие = Новый Структура("Организация", ПараметрыМонитора.Организация);
			ОписаниеДействия = ВыполнениеЗадачБухгалтера.ОписаниеДействияПомощникПодготовкиОтчетностиПрошлыхПериодов(Событие);
			ДобавитьСтрокуСоСсылкой(Блок, НСтр("ru = 'Отчетность прошлых периодов'"), ОписаниеДействия);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСсылкиНаПросроченныеОтчеты(Блок, ЕстьТекущаяЗадача, СсылкиНаПросроченныеОтчеты)
	
	Если Не ЗначениеЗаполнено(СсылкиНаПросроченныеОтчеты) Тогда
		Возврат;
	КонецЕсли;
	
	СортироватьПоВозрастанию(СсылкиНаПросроченныеОтчеты, "Срок");
	
	НадписьПросрочено = СтрШаблон(НСтр("ru = 'Просроченные отчеты (%1)'"), СсылкиНаПросроченныеОтчеты.Количество());
	Если СсылкиНаПросроченныеОтчеты.Количество() <= 2 И Не ЕстьТекущаяЗадача Тогда
		Пока СсылкиНаПросроченныеОтчеты.Количество() > 0 Цикл
			ПоследнийПросроченный = ВытащитьИзСтека(СсылкиНаПросроченныеОтчеты);
			ДобавитьСтрокуСоСсылкой(Блок, ПоследнийПросроченный.ПредставлениеСсылки, ПоследнийПросроченный);
		КонецЦикла;
	ИначеЕсли СсылкиНаПросроченныеОтчеты.Количество() > 2 И Не ЕстьТекущаяЗадача Тогда
		ПоследнийПросроченный = СсылкиНаПросроченныеОтчеты[СсылкиНаПросроченныеОтчеты.ВГраница()];
		ДобавитьСтрокуСоСсылкой(Блок, ПоследнийПросроченный.ПредставлениеСсылки, ПоследнийПросроченный);
		ДобавитьСтрокуСоСсылкой(Блок, НадписьПросрочено, СсылкиНаПросроченныеОтчеты);
	Иначе
		ДобавитьСтрокуСоСсылкой(Блок, НадписьПросрочено, СсылкиНаПросроченныеОтчеты);
	КонецЕсли;
	
КонецПроцедуры

Функция СсылкиНаПросроченныеОтчеты(ЭтоНалог, СтрокиИндикатора, КодЗадачи, ИмяЗадачи, ПараметрыМонитора)
	
	СсылкиНаПросроченныеОтчеты = Новый Массив();
	
	Для Каждого Индикатор Из СтрокиИндикатора Цикл
		Для Сч = 0 По Индикатор.ПросроченныеОтчеты.Количество() - 1 Цикл
			
			СтрокаПросрОтчета = Индикатор.ПросроченныеОтчеты[Сч];
			
			КонецПериода  = КонецДня(СтрокаПросрОтчета.ПериодСобытия);
			НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Индикатор.Периодичность, КонецПериода);
			ПредставлениеСсылки = ЗаменитьВНаименованииПериод(Индикатор.Наименование, НачалоПериода, КонецПериода);
			
			Если Не ПустаяСтрока(СтрокаПросрОтчета.Статус) Тогда
				ПредставлениеСсылки  = ПредставлениеСсылки +" (" + СтрокаПросрОтчета.Статус + ")";
			КонецЕсли;
			
			ПредставлениеЗадачи = ЗаменитьВНаименованииПериод(Индикатор.НаименованиеЗадачи, НачалоПериода, КонецПериода);
			
			ДанныеИндикатора = Новый Структура;
			ДанныеИндикатора.Вставить("Владелец", Индикатор.Владелец);
			ДанныеИндикатора.Вставить("КодПравила", Индикатор.КодПравила);
			ДанныеИндикатора.Вставить("ПериодСобытия", КонецПериода);
			ДанныеИндикатора.Вставить("Наименование", ПредставлениеСсылки);
			ДанныеИндикатора.Вставить("НаименованиеЗадачи", ПредставлениеЗадачи);
			ДанныеИндикатора.Вставить("Срок", СтрокаПросрОтчета.Срок);
			ДанныеИндикатора.Вставить("Правило", Индикатор.Правило);
			ДанныеИндикатора.Вставить("Периодичность", Индикатор.Периодичность);
			
			ПараметрыСсылки = СформироватьПараметрыСсылки(ДанныеИндикатора, КодЗадачи, ЭтоНалог, ПараметрыМонитора);
			ПараметрыСсылки.Вставить("ПредставлениеСсылки", ПредставлениеСсылки);
			ПараметрыСсылки.Вставить("Срок", СтрокаПросрОтчета.Срок);
			ПараметрыСсылки.Вставить("ИмяЗадачи", ИмяЗадачи);
			ПараметрыСсылки.Вставить("ЭтоТекущаяЗадача", Ложь);
			СсылкиНаПросроченныеОтчеты.Добавить(ПараметрыСсылки);
			
		КонецЦикла;
	КонецЦикла;
	
	Возврат СсылкиНаПросроченныеОтчеты;
	
КонецФункции

Процедура ЗаполнитьСсылкиНаУплатуЗадолженностиПоВзносамИП(Блок, СтрокиИндикатора, КодЗадачи, ПараметрыМонитора)
	
	// Текущие платежи.
	
	// Платеж по взносам с доходов за прошлый год обслуживается тем же помощником, что и уплата просроченных фиксированных взносов.
	// Поэтому наличие платежа с доходов просто запоминаем, а ссылку не выводим - она будет выведена вместе с просроченным платежом.
	
	ЕстьТекущаяУплатаСДоходов = Ложь;
	
	Для Каждого Индикатор Из СтрокиИндикатора Цикл
		
		Если Индикатор.КУплатеТекущий > 0 Тогда
			
			Если Индикатор.Периодичность = Перечисления.Периодичность.Квартал Тогда // Ежеквартальная уплата текущих взносов.
				
				Индикатор.ПериодСобытия = КонецКвартала(ПараметрыМонитора.ТекущийДень);
				
			ИначеЕсли Индикатор.Периодичность = Перечисления.Периодичность.Год
				И ЭтоЗадачаВзносовСДоходовИП(КодЗадачи, Индикатор.КодПравила) Тогда // Уплата взносов с доходов за прошлый год.
				
				ЕстьТекущаяУплатаСДоходов = Истина;
				Продолжить;
				
			КонецЕсли;
			
			НаименованиеСсылки = ОписаниеСсылкиТекущегоНалогаОтчета(Индикатор, Истина, ПараметрыМонитора);
			ПараметрыСсылки = СФормироватьПараметрыСсылки(Индикатор, КодЗадачи, Истина, ПараметрыМонитора);
			ДобавитьСтрокуСоСсылкой(Блок, НаименованиеСсылки, ПараметрыСсылки);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Просроченный платеж.
	
	ИсточникПараметровСсылки = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокиИндикатора[0]);
	
	ИсточникПараметровСсылки.ПериодСобытия        = НачалоГода(ПараметрыМонитора.ТекущийДень) - 1;
	ИсточникПараметровСсылки.НачалоПериодаСобытия = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(
		Перечисления.Периодичность.Год, ИсточникПараметровСсылки.ПериодСобытия);
	
	ИсточникПараметровСсылки.Наименование = ЗаменитьВНаименованииПериод(ИсточникПараметровСсылки.Наименование,
		ИсточникПараметровСсылки.НачалоПериодаСобытия, ИсточникПараметровСсылки.ПериодСобытия);
	ИсточникПараметровСсылки.НаименованиеЗадачи = ЗаменитьВНаименованииПериод(ИсточникПараметровСсылки.НаименованиеЗадачи,
		ИсточникПараметровСсылки.НачалоПериодаСобытия, ИсточникПараметровСсылки.ПериодСобытия);
	
	ПараметрыСсылки = СФормироватьПараметрыСсылки(ИсточникПараметровСсылки, КодЗадачи, Истина, ПараметрыМонитора);
	
	ПредставлениеПериодаСобытия = КалендарьБухгалтера.ПредставлениеПериодаСобытия(
		ИсточникПараметровСсылки.НачалоПериодаСобытия, ИсточникПараметровСсылки.ПериодСобытия);
		
	Если Обработки.ПомощникУплатыНалоговВзносовПрошлыхЛет.ПройденОпросПоНалогу(ПараметрыМонитора.Организация, КодЗадачи)
			И ЭтоОплатаНалогаЗаПрошлыйПериод(ПараметрыМонитора.Организация,
				ИсточникПараметровСсылки.ПериодСобытия,
				ИсточникПараметровСсылки.Периодичность) Тогда
		
		ЗаголовокСсылки = НСтр("ru = 'Оплата задолженности за прошлые годы'");
	ИначеЕсли ЕстьТекущаяУплатаСДоходов Тогда
		ЗаголовокСсылки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Оплата задолженности и взносов с доходов за %1'"),
				ПредставлениеПериодаСобытия);
	Иначе
		ЗаголовокСсылки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Оплата задолженности за %1'"),
				ПредставлениеПериодаСобытия);
	КонецЕсли;
	
	ДобавитьСтрокуСоСсылкой(Блок, ЗаголовокСсылки, ПараметрыСсылки);
	
КонецПроцедуры

Процедура ЗаполнитьСсылкиНаУплатуЗадолженностиПоНалогуУСН(Блок, СтрокиИндикатора, КодЗадачи, ИмяЗадачи, ПараметрыМонитора)
	
	// Текущие платежи.
	
	ДобавитьСсылкиНаТекущиеНалогиОтчеты(Блок, Истина, СтрокиИндикатора, КодЗадачи, ИмяЗадачи, ПараметрыМонитора);
	
	// Просроченные платежи.
	
	ПериодСобытияАвансовогоПлатежа = ПараметрыМонитора.ТекущийДень;
	ПериодСобытияГодовогоПлатежа   = ПараметрыМонитора.ТекущийДень;
	
	Для Каждого Индикатор Из СтрокиИндикатора Цикл
		Если Индикатор.Периодичность = Перечисления.Периодичность.Квартал
			И КонецКвартала(Индикатор.ПериодСобытия) <> КонецГода(Индикатор.ПериодСобытия) Тогда
			ПериодСобытияАвансовогоПлатежа = Индикатор.ПериодСобытия;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ПериодСобытия = Мин(ПараметрыМонитора.ТекущийДень, ПериодСобытияАвансовогоПлатежа);
	
	НачалоПериодаСобытияСсылки = Неопределено;
	КонецПериодаСобытияСсылки  = Неопределено;
	
	ДатаСобытияСсылки          = Неопределено;
	ПериодичностьСобытияСсылки = Неопределено;
	
	Если НачалоГода(ПериодСобытия) < НачалоКвартала(ПериодСобытия) Тогда
		
		// Если текущее событие не в первом квартале, выведем ссылку на оплату налога за предыдущий квартал.
		ДатаСобытияСсылки          = НачалоКвартала(ПериодСобытия) - 1;
		ПериодичностьСобытияСсылки = Перечисления.Периодичность.Квартал;
	ИначеЕсли НЕ УплачиваетсяТекущийГодовойНалогУСН(СтрокиИндикатора) Тогда
		
		// В первом квартале требуется вывести ссылку на помощник за прошлый год, если еще не выведена.
		ДатаСобытияСсылки = НачалоГода(ПериодСобытия) - 1;
		ПериодичностьСобытияСсылки = Перечисления.Периодичность.Год;
	КонецЕсли;
	
	Если ДатаСобытияСсылки = Неопределено Тогда
		// Отдельная ссылка для оплаты долга не требуется.
		Возврат;
	КонецЕсли;
	
	ПериодСобытияСсылки
		= РегистрыСведений.ЗадачиБухгалтера.ПериодСобытияПоНалогамИСборам(ПериодичностьСобытияСсылки, ДатаСобытияСсылки);
	НачалоПериодаСобытияСсылки
		= ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(ПериодичностьСобытияСсылки, ДатаСобытияСсылки);
	
	ИсточникПараметровСсылки = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокиИндикатора[0]);
	
	ИсточникПараметровСсылки.ПериодСобытия        = ПериодСобытияСсылки;
	ИсточникПараметровСсылки.НачалоПериодаСобытия = НачалоПериодаСобытияСсылки;
	
	ИсточникПараметровСсылки.Наименование = ЗаменитьВНаименованииПериод(ИсточникПараметровСсылки.Наименование,
	ИсточникПараметровСсылки.НачалоПериодаСобытия, ИсточникПараметровСсылки.ПериодСобытия);
	ИсточникПараметровСсылки.НаименованиеЗадачи = ЗаменитьВНаименованииПериод(ИсточникПараметровСсылки.НаименованиеЗадачи,
	ИсточникПараметровСсылки.НачалоПериодаСобытия, ИсточникПараметровСсылки.ПериодСобытия);
	
	ПараметрыСсылки = СФормироватьПараметрыСсылки(ИсточникПараметровСсылки, КодЗадачи, Истина, ПараметрыМонитора);
	
	ЗаголовокСсылки = НСтр("ru = 'Оплата задолженности'");
	
	ДобавитьСтрокуСоСсылкой(Блок, ЗаголовокСсылки, ПараметрыСсылки);
	
КонецПроцедуры

Функция УплачиваетсяТекущийГодовойНалогУСН(НалоговыеИндикаторы)
	
	Для Каждого Индикатор Из НалоговыеИндикаторы Цикл
		Если КонецКвартала(Индикатор.ПериодСобытия) = КонецГода(Индикатор.ПериодСобытия)
			И Индикатор.ЭтоТекущаяЗадача
			И Индикатор.КУплатеТекущий > 0 Тогда
			
			Возврат Истина;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область НулевкаВзносыЗаСебяИП

Процедура ЗаполнитьЖелтыйБлокВзносыЗаСебяИПНулевка(Блок, СтрокиИндикатора, ПараметрыМонитора, КодЗадачи)
	
	СведенияОбОрганизации = Обработки.РасчетСтраховыхВзносовИП.СведенияОбОрганизации(
		ПараметрыМонитора.Организация, ОбщегоНазначения.ТекущаяДатаПользователя());
	
	Индикатор = СтрокиИндикатора[0];
	Если СведенияОбОрганизации.РегистрацияВЭтомГоду
		ИЛИ СведенияОбОрганизации.СостояниеПомощника
			= Перечисления.СостоянияПомощникаОплатыСтраховыхВзносовИП.ДолгиЗаПрошлыеГодыОплачены
		ИЛИ СведенияОбОрганизации.СостояниеПомощника
			= Перечисления.СостоянияПомощникаОплатыСтраховыхВзносовИП.ВсеВзносыОплачены // удалены документы оплаты
		ИЛИ СведенияОбОрганизации.СостояниеПомощника
			= Перечисления.СостоянияПомощникаОплатыСтраховыхВзносовИП.ДолговЗаПрошлыеГодыНет Тогда
		
		Строка0 = ЗаголовокНалогаОтчета(ЦветаИндикаторов().Желтый, Истина, СтрокиИндикатора, ПараметрыМонитора, КодЗадачи);
		
		Если НуженПомощникОплатыНалоговПрошлыхПериодовДляСтрокИндикатора(СтрокиИндикатора, Истина) Тогда
			Блок.Строка0 = Строка0;
		Иначе
			Блок.Строка0 = ОтформатироватьСтрокуСуммы(Строка0, Индикатор.КУплатеТекущий);
		КонецЕсли;
		
		ДобавитьСтроку1(Блок, ОписаниеТекущегоНалогаОтчета(СтрокиИндикатора, Истина, ПараметрыМонитора));
		ТекстСсылки = ОписаниеСсылкиТекущегоНалогаОтчета(Индикатор, Истина, ПараметрыМонитора);
	
	Иначе
		
		// Заголовок в 2 строки без описания.
		ЭлементыЗаголовка = Новый Массив;
		
		Если СведенияОбОрганизации.СостояниеПомощника
			= Перечисления.СостоянияПомощникаОплатыСтраховыхВзносовИП.ПодготовленоЗаявлениеВНалоговую 
			ИЛИ СведенияОбОрганизации.СостояниеПомощника
				= Перечисления.СостоянияПомощникаОплатыСтраховыхВзносовИП.ЗапрошенаСправкаОСостоянииРасчетов
			ИЛИ СведенияОбОрганизации.СостояниеПомощника
				= Перечисления.СостоянияПомощникаОплатыСтраховыхВзносовИП.ПолученаСправкаОСостоянииРасчетов Тогда
			
			ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Укажите задолженность'"), ПараметрыМонитора.ШрифтЗаголовков));
			ЭлементыЗаголовка.Добавить(Символы.ПС);
			ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'из справки о состоянии расчетов'"), ПараметрыМонитора.ШрифтЗаголовков));
			Блок.Строка0 = Новый ФорматированнаяСтрока(ЭлементыЗаголовка);
		
			// Выводим только заголовок, строка пояснения не требуется.
			Блок.Вставить("Строка1", "");
			Блок.Вставить("СтрокаВидимость1", Ложь);
			Блок.КолвоСтрок = Блок.КолвоСтрок + 1;
			
			ТекстСсылки = НСтр("ru = 'Указать'");
			
		Иначе
			
			ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Проверьте, нет ли задолженности'"), ПараметрыМонитора.ШрифтЗаголовков));
			ЭлементыЗаголовка.Добавить(Символы.ПС);
			ЭлементыЗаголовка.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'по взносам за прошлые годы'"), ПараметрыМонитора.ШрифтЗаголовков));
			Блок.Строка0 = Новый ФорматированнаяСтрока(ЭлементыЗаголовка);
		
			// Выводим только заголовок, строка пояснения не требуется.
			Блок.Вставить("Строка1", "");
			Блок.Вставить("СтрокаВидимость1", Ложь);
			Блок.КолвоСтрок = Блок.КолвоСтрок + 1;
			
			ТекстСсылки = НСтр("ru = 'Проверить'");
		
		КонецЕсли;
		
	КонецЕсли;
	
	ОписаниеДействияСсылки = ОписаниеДействияВзносыЗаСебяИПНулевка(СведенияОбОрганизации, Индикатор.Правило, ПараметрыМонитора);
	ДобавитьСтрокуСоСсылкой(Блок, ТекстСсылки, ОписаниеДействияСсылки);
	
КонецПроцедуры

Процедура ЗаполнитьКрасныйБлокВзносыЗаСебяИПНулевка(Блок, СтрокиИндикатора, ПараметрыМонитора)
	
	СведенияОбОрганизации = Обработки.РасчетСтраховыхВзносовИП.СведенияОбОрганизации(ПараметрыМонитора.Организация,
		ОбщегоНазначения.ТекущаяДатаПользователя());
	
	Индикатор = СтрокиИндикатора[0];
	Строка0 = Новый ФорматированнаяСтрока(НСтр("ru = 'Мы должны %1 руб.'"), ПараметрыМонитора.ШрифтЗаголовков);
	Блок.Строка0 = СтрШаблон(Строка0, Формат(Индикатор.КУплатеДолг + Индикатор.КУплатеТекущий, "ЧДЦ=2"));
	
	Строка1 = НСтр("ru = 'Просрочено %1 руб.'");
	ДобавитьСтроку1(Блок, СтрШаблон(Строка1, Формат(Индикатор.КУплатеДолг, "ЧДЦ=2")));
	
	ТекстСсылки = НСтр("ru = 'Оплата взносов'");
	ОписаниеДействияСсылки = ОписаниеДействияВзносыЗаСебяИПНулевка(СведенияОбОрганизации, Индикатор.Правило, ПараметрыМонитора);
	ДобавитьСтрокуСоСсылкой(Блок, ТекстСсылки, ОписаниеДействияСсылки);
	
КонецПроцедуры

Функция ОписаниеДействияВзносыЗаСебяИПНулевка(СведенияОбОрганизации, Правило, ПараметрыМонитора)
	
	ПараметрыФормы = Новый Структура;
	
	СведенияОбОрганизации.Вставить("Правило", Правило);
	АдресСведенийОбОрганизации = ПоместитьВоВременноеХранилище(
		СведенияОбОрганизации, ПараметрыМонитора.УникальныйИдентификатор);
	Если СведенияОбОрганизации.РегистрацияВЭтомГоду 
		ИЛИ ЗначениеЗаполнено(СведенияОбОрганизации.СостояниеПомощника) Тогда
		
		ИмяФормыПомощника = "Обработка.РасчетСтраховыхВзносовИП.Форма.ФормаВзносыИПНулевка";
	Иначе
		ИмяФормыПомощника = "Обработка.МониторНалоговИОтчетности.Форма.ФормаТестПоВзносамЗаПрошлыеПериоды";
	КонецЕсли;
	
	ОписаниеДействия = Новый Структура;
	
	ПараметрыФормы.Вставить("АдресСведенийОбОрганизации", АдресСведенийОбОрганизации);
	ПараметрыФормы.Вставить("Правило", Правило);
	
	ОписаниеДействия.Вставить("ИмяФормы", ИмяФормыПомощника);
	ОписаниеДействия.Вставить("ИдентификаторФормы", ПараметрыМонитора.УникальныйИдентификатор);
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

#КонецОбласти

Функция СоздатьЯчейку(Блок, Организация, ТекущийДень, ОписаниеСсылкиПоУмолчанию)
	
	Ячейка = Новый Структура;
	Если ЗначениеЗаполнено(Блок.ЦветФона) Тогда
		Ячейка.Вставить("type", Блок.ЦветФона);
	Иначе
		Ячейка.Вставить("type", СостоянияИндикаторов().Пустой);
	КонецЕсли;
	Если Ячейка.type = СостоянияИндикаторов().Пустой Тогда
		Возврат Ячейка;
	КонецЕсли;
	
	ВидимостьСтроки = Ложь;
	Если Блок.Свойство("СтрокаВидимость0", ВидимостьСтроки) И ВидимостьСтроки Тогда
		Ячейка.Вставить("title", Строка(Блок.Строка0));
	КонецЕсли;
	Если Блок.Свойство("СтрокаВидимость1", ВидимостьСтроки) И ВидимостьСтроки Тогда
		Ячейка.Вставить("description", Строка(Блок.Строка1));
	КонецЕсли;
	
	Ячейка.Вставить("links", Новый Массив);
	ПараметрыСсылок = Неопределено;
	ПараметрыФормы = Неопределено;
	Для НомерСтроки = 2 По Блок.КолвоСтрок - 1 Цикл
		
		Если Не (Блок.Свойство("СтрокаВидимость" + НомерСтроки, ВидимостьСтроки) И ВидимостьСтроки
			И Блок.Свойство("СтрокаПараметрыСсылки" + НомерСтроки, ПараметрыСсылок) И ЗначениеЗаполнено(ПараметрыСсылок)) Тогда
			Продолжить;
		КонецЕсли;
		   
		Если ТипЗнч(ПараметрыСсылок) = Тип("Структура") Тогда
			ПараметрыСсылок = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ПараметрыСсылок);
		КонецЕсли;
		Для Каждого ПараметрыСсылки Из ПараметрыСсылок Цикл
		
			Если ПараметрыСсылки.Свойство("ПубликуемыйИдентификатор") Тогда
				
				ОписаниеСсылки = ИнтеграцияСБанками.ОписаниеПубликуемойСсылкиНаСервис(
					ПараметрыСсылки.ПубликуемыйИдентификатор,
					Блок["Строка" + НомерСтроки],
					ИнтеграцияСБанками.АдресСервисаПубликацияОтчетов() + "/" + ПараметрыСсылки.ПубликуемыйИдентификатор,
					ПараметрыСсылки.ВходящиеНастройкиПубликуемыхДанных);
				
			ИначеЕсли ПараметрыСсылки.Свойство("ИмяФормы") И ПараметрыСсылки.Свойство("ПараметрыФормы") Тогда
				
				ПубликуемаяСсылкаНаФорму = РегистрыСведений.ПубликуемыеНавигационныеСсылки.СсылкаНаФорму(
					ПараметрыСсылки.ИмяФормы, ПараметрыСсылки.ПараметрыФормы);
				ОписаниеСсылки = ИнтеграцияСБанками.ОписаниеПубликуемойНавигационнойСсылки(
					"goto1C", Блок["Строка" + НомерСтроки], ПубликуемаяСсылкаНаФорму);
				
			Иначе
				// Ссылка на этот объект не поддерживается. Возвращаем ссылку на монитор.
				ОписаниеСсылки = ОписаниеСсылкиПоУмолчанию;
				
			КонецЕсли;
				
			Ячейка.links.Добавить(ОписаниеСсылки);
		
		КонецЦикла;

	КонецЦикла;
	
	Возврат Ячейка;
	
КонецФункции

Функция ВытащитьИзСтека(Массив)
	
	ПоследнийЭлемент = Массив[Массив.ВГраница()];
	Массив.Удалить(Массив.ВГраница());
	
	Возврат ПоследнийЭлемент;
	
КонецФункции

Процедура СортироватьПоВозрастанию(Массив, Столбец)
	// Сортируем  по алгоритму insertion sort, т.к. идеально подходит для маленьких массивов (не создает промежуточные массивы).
	Для ВнешнийСчетчик = 1 По Массив.ВГраница() Цикл
		СортируемаяСтрока = Массив[ВнешнийСчетчик];
		ВнутреннийСчетчик = ВнешнийСчетчик - 1;
		Пока ВнутреннийСчетчик >= 0 И Массив[ВнутреннийСчетчик][Столбец] > СортируемаяСтрока[Столбец] Цикл
			Массив[ВнутреннийСчетчик + 1] = Массив[ВнутреннийСчетчик];
			ВнутреннийСчетчик = ВнутреннийСчетчик - 1;
		КонецЦикла;
		Массив[ВнутреннийСчетчик + 1] = СортируемаяСтрока;
	КонецЦикла;
	
КонецПроцедуры

Функция ОтформатироватьСтрокуСуммы(ИсходнаяСтрока, Сумма)
	
	Если Сумма = Цел(Сумма) Тогда
		ФорматСуммы = "";
	Иначе
		ФорматСуммы = "ЧДЦ=2";
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ИсходнаяСтрока, Формат(Сумма, ФорматСуммы));
	
КонецФункции

Функция СформироватьПоказателиМонитора(Параметры)
	
	Если Параметры.УпрощеннаяНулеваяОтчетность Тогда
		Возврат СформироватьПоказателиМонитораДеятельностьОтсутствует(Параметры);
	Иначе
		Возврат СформироватьПоказателиМонитораРегулярнаяДеятельность(Параметры);
	КонецЕсли;
	
КонецФункции

Функция СформироватьПоказателиМонитораРегулярнаяДеятельность(Параметры)
	
	Результат = НовыйПоказателиМонитора();
	
	Организация                     = Параметры.Организация;
	ТекущийДень                     = Параметры.ТекущийДень;
	ОтсутствуютПатенты              = Параметры.ОтсутствуютПатенты;
	ОтсутствуютВидыДеятельностиЕНВД = Параметры.ОтсутствуютВидыДеятельностиЕНВД;
	
	СписокОрганизаций = ОбщегоНазначенияБП.СписокДоступныхОрганизаций(Организация);
	Если СписокОрганизаций.Количество() = 0 Тогда
		// Нет смысла проверять задачи - отсутствует доступ.
		Возврат Результат;
	КонецЕсли;
	
	// Доступ уже проверен, для быстродействия получаем данные без контроля доступа.
	УстановитьПривилегированныйРежим(Истина);
	
	// Сначала обновим список задач при необходимости.
	КалендарьБухгалтера.ОбновитьЗадачи(Организация);
	
	ЗадачиОрганизации = СформироватьТекущиеПредстоящиеЗадачи(Организация, ТекущийДень, Ложь);
	
	СчетаУчетаЗадач = ПоддерживаемыеСчетаУчетаЗадач();
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации); // 50.01
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);   // 51
	СчетаУчетаДС = БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(МассивСчетов);
	
	// Подготовка налоговых индикаторов.
	НалоговыеИндикаторы = Результат.НалоговыеИндикаторы;
	
	ПрименитьАлгоритмДляНенастроенныхНалогов(НалоговыеИндикаторы, ЗадачиОрганизации.ЗадачиПоНалогам, 
		ОтсутствуютПатенты, ОтсутствуютВидыДеятельностиЕНВД);
	
	ПрименитьОбщийАлгоритмПоНалогам(НалоговыеИндикаторы, ЗадачиОрганизации.ЗадачиПоНалогам, 
		Организация, ТекущийДень, СчетаУчетаЗадач, СчетаУчетаДС);
	
	ПрименитьАлгоритмДляНалогаУСН(НалоговыеИндикаторы, ЗадачиОрганизации.ЗадачиПоНалогам, Организация, ТекущийДень);
	
	ИндикаторВзносовИП = ПрименитьАлгоритмДляВзносовИП(НалоговыеИндикаторы, ЗадачиОрганизации.ЗадачиПоНалогам,
		Параметры, СчетаУчетаЗадач, СчетаУчетаДС);
	
	ПрименитьАлгоритмДляВзносовИПСДоходов(НалоговыеИндикаторы, ЗадачиОрганизации.ЗадачиПоНалогам
		, Организация, ТекущийДень, ИндикаторВзносовИП, СчетаУчетаДС);
		
	ПрименитьАлгоритмДляНПД(НалоговыеИндикаторы, ЗадачиОрганизации.ЗадачиПоНалогам
		, Организация, ТекущийДень, СчетаУчетаДС);
	
	НалоговыеИндикаторы.Сортировать("Владелец, Правило, Срок", Новый СравнениеЗначений());
	
	// Подготовка отчетных индикаторов.
	ОтчетныеИндикаторы = Результат.ОтчетныеИндикаторы;
	
	ПрименитьАлгоритмДляНенастроенныхОтчетов(ОтчетныеИндикаторы, ЗадачиОрганизации.ЗадачиПоОтчетам);
	
	ПрименитьАлгоритмПоОтчетам(ОтчетныеИндикаторы, ЗадачиОрганизации.ЗадачиПоОтчетам,
		Организация, ТекущийДень, Ложь);
	
	ОтчетныеИндикаторы.Сортировать("Владелец, Правило, Срок", Новый СравнениеЗначений());
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Результат.ВключенныеЗадачи   = ЗадачиОрганизации.ВключенныеЗадачи;
	Результат.ВсеЗадачиВыполнены = ВсеЗадачиВыполнены(НалоговыеИндикаторы, ОтчетныеИндикаторы);
	
	Возврат Результат
	
КонецФункции

Функция СформироватьПоказателиМонитораДеятельностьОтсутствует(Параметры)
	
	Результат = НовыйПоказателиМонитора();
	
	Организация                        = Параметры.Организация;
	ТекущийДень                        = Параметры.ТекущийДень;
	
	СписокОрганизаций = ОбщегоНазначенияБП.СписокДоступныхОрганизаций(Организация);
	Если СписокОрганизаций.Количество() = 0 Тогда
		// Нет смысла проверять задачи - отсутствует доступ.
		Возврат Результат;
	КонецЕсли;
	
	// Доступ уже проверен, для быстродействия получаем данные без контроля доступа.
	УстановитьПривилегированныйРежим(Истина);
	
	// Сначала обновим список задач при необходимости.
	КалендарьБухгалтера.ОбновитьЗадачи(Организация);
	
	ЗадачиОрганизации = СформироватьТекущиеПредстоящиеЗадачи(Организация, ТекущийДень, Истина);
	СчетаУчетаЗадач   = ПоддерживаемыеСчетаУчетаЗадач();
	
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации); // 50.01
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);   // 51
	СчетаУчетаДС = БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(МассивСчетов);
	
	// Подготовка налоговых индикаторов.
	//
	// Особенности формирования при нулевой деятельности:
	//    - индикатор по фиксированным взносам ИП выводим всегда - их уплата не зависит от деятельности;
	//    - индикаторы для остальных налогов не формируем, вместо них выводим единственный с сообщением о том, что платить налоги не нужно.
	
	НалоговыеИндикаторы = Результат.НалоговыеИндикаторы;
	
	ИндикаторВзносовИП = ПрименитьАлгоритмДляВзносовИП(НалоговыеИндикаторы, ЗадачиОрганизации.ЗадачиПоНалогам,
		Параметры, СчетаУчетаЗадач, СчетаУчетаДС);
	
	ПрименитьАлгоритмДляВзносовИПСДоходов(НалоговыеИндикаторы, ЗадачиОрганизации.ЗадачиПоНалогам,
		Организация, ТекущийДень, ИндикаторВзносовИП, СчетаУчетаДС);
	
	ДобавитьИндикаторНулевыеНалоги(НалоговыеИндикаторы, Организация, ТекущийДень);
	
	НалоговыеИндикаторы.Сортировать("Владелец, Правило, Срок", Новый СравнениеЗначений());
	
	// Подготовка отчетных индикаторов.
	//
	// Особенности формирования при нулевой деятельности:
	//    - индикатор по статистике не выводим;
	//    - индикаторы регулярных отчетов "сворачиваем" в один, отображающий самые критичные статус и срок.
	
	// Сначала строим отчетные индикаторы в развернутом виде.
	ОтчетныеИндикаторыРазвернутые = НоваяТаблицаОтчетныхИндикаторов();
	
	ПрименитьАлгоритмПоОтчетам(ОтчетныеИндикаторыРазвернутые, ЗадачиОрганизации.ЗадачиПоОтчетам,
		Организация, ТекущийДень, Истина);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	// Сформируем результирующий набор индикаторов.
	ОтчетныеИндикаторы = Результат.ОтчетныеИндикаторы;
	
	// Свернем отчетные индикаторы и поместим в результирующий набор.
	ДобавитьИндикаторНулеваяОтчетность(ОтчетныеИндикаторы, ОтчетныеИндикаторыРазвернутые, Организация, ТекущийДень);
	
	ОтчетныеИндикаторы.Сортировать("Владелец, Правило, Срок", Новый СравнениеЗначений());
	
	ДобавитьЗадачуНулеваяОтчетность(ЗадачиОрганизации.ВключенныеЗадачи);
	
	Результат.ВключенныеЗадачи   = ЗадачиОрганизации.ВключенныеЗадачи;
	Результат.ВсеЗадачиВыполнены = ВсеЗадачиВыполнены(НалоговыеИндикаторы, ОтчетныеИндикаторы);
	
	Возврат Результат;
	
КонецФункции

Функция ВсеЗадачиВыполнены(НалоговыеИндикаторы, ОтчетныеИндикаторы)
	
	НалогиУплачены = НалоговыеИндикаторы.НайтиСтроки(Новый Структура("Индикатор", ЦветаИндикаторов().Зеленый)).Количество()
		= НалоговыеИндикаторы.Количество();
		
	ОтчетыСданы = ОтчетныеИндикаторы.НайтиСтроки(Новый Структура("Индикатор", ЦветаИндикаторов().Зеленый)).Количество()
		= ОтчетныеИндикаторы.Количество();
		
	Возврат НалогиУплачены И ОтчетыСданы;
	
КонецФункции

Функция НовыйПоказателиМонитора()
	
	Результат = Новый Структура;
	
	Результат.Вставить("НалоговыеИндикаторы", НоваяТаблицаНалоговыхИндикаторов());
	Результат.Вставить("ОтчетныеИндикаторы",  НоваяТаблицаОтчетныхИндикаторов());
	Результат.Вставить("ВключенныеЗадачи",    НовыйВключенныеЗадачи());
	Результат.Вставить("ВсеЗадачиВыполнены",  Ложь);
	
	Возврат Результат;
	
КонецФункции

Функция НоваяТаблицаНалоговыхИндикаторов()
	
	ТаблицаИндикаторов = Новый ТаблицаЗначений;
	ТаблицаИндикаторов.Колонки.Добавить("Владелец",             Новый ОписаниеТипов("СправочникСсылка.ЗадачиБухгалтера")); // задача бухгалтера по  уплате налога.
	ТаблицаИндикаторов.Колонки.Добавить("Правило",              Новый ОписаниеТипов("СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов")); // правило по  уплате налога.
	ТаблицаИндикаторов.Колонки.Добавить("БудущаяЗадача",        Новый ОписаниеТипов("Структура")); // см. описание НовыйБудущаяЗадача().
	ТаблицаИндикаторов.Колонки.Добавить("Наименование",         ОбщегоНазначения.ОписаниеТипаСтрока(150)); // краткое описание текста задачи, которое отображается в мониторе.
	ТаблицаИндикаторов.Колонки.Добавить("НаименованиеЗадачи",   ОбщегоНазначения.ОписаниеТипаСтрока(150)); // полное наименование задачи - как в списке задач; передается в заголовки помощников.
	ТаблицаИндикаторов.Колонки.Добавить("КодПравила",           ОбщегоНазначения.ОписаниеТипаСтрока(50)); // код элемента справочника СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов.
	ТаблицаИндикаторов.Колонки.Добавить("Срок",                 ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)); // крайний срок уплаты налога.
	ТаблицаИндикаторов.Колонки.Добавить("ПериодСобытия",        ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)); // последний день очередного периода начисления налога.
	ТаблицаИндикаторов.Колонки.Добавить("НачалоПериодаСобытия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)); // первый день очередного периода начисления налога.
	ТаблицаИндикаторов.Колонки.Добавить("Индикатор",            ОбщегоНазначения.ОписаниеТипаСтрока(20)); // тип индикатора (Зеленый, красный или желтый).
	ТаблицаИндикаторов.Колонки.Добавить("КУплатеДолг",         ОбщегоНазначения.ОписаниеТипаЧисло(15, 2)); // сумма задолженности перед бюджетом.
	ТаблицаИндикаторов.Колонки.Добавить("КУплатеТекущий",       ОбщегоНазначения.ОписаниеТипаЧисло(15, 2)); // текущая сумма уплаты налога, если срок уплаты налога не наступил, тогда не должна заполняться.
	ТаблицаИндикаторов.Колонки.Добавить("Периодичность",        Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность")); // периодичность начисления налога.
	ТаблицаИндикаторов.Колонки.Добавить("ЭтоТекущаяЗадача",     Новый ОписаниеТипов("Булево")); // означает, что срок оплаты налога наступил, но ещё не завершился.
	ТаблицаИндикаторов.Колонки.Добавить("ФинансовыйПериод",     Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность")); // периодичность налогового периода.
	ТаблицаИндикаторов.Колонки.Добавить("НуженПомощникНалоговПрошлыхПериодов", Новый ОписаниеТипов("Булево"));
	
	ТаблицаИндикаторов.Колонки.Добавить("РасширенныйПервыйНалоговыйПериод",
		Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыРасширенногоПервогоНалоговогоПериода")); // вариант особенностей законодательства для первого налогового/отчетного периода.
	
	Возврат ТаблицаИндикаторов;
	
КонецФункции

Функция НоваяТаблицаОтчетныхИндикаторов()
	
	ТаблицаИндикаторов = Новый ТаблицаЗначений;
	ТаблицаИндикаторов.Колонки.Добавить("Владелец",             Новый ОписаниеТипов("СправочникСсылка.ЗадачиБухгалтера")); // задача по сдаче отчета
	ТаблицаИндикаторов.Колонки.Добавить("Правило",              Новый ОписаниеТипов("СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов")); // правило по сдаче отчета.
	ТаблицаИндикаторов.Колонки.Добавить("БудущаяЗадача",        Новый ОписаниеТипов("Структура")); // см. описание НовыйБудущаяЗадача().
	ТаблицаИндикаторов.Колонки.Добавить("Наименование",         ОбщегоНазначения.ОписаниеТипаСтрока(150)); //краткое описание текста задачи, которое отображается в мониторе.
	ТаблицаИндикаторов.Колонки.Добавить("НаименованиеЗадачи",   ОбщегоНазначения.ОписаниеТипаСтрока(150)); // полное наименование задачи - как в списке задач; передается в заголовки помощников.
	ТаблицаИндикаторов.Колонки.Добавить("КодПравила",           ОбщегоНазначения.ОписаниеТипаСтрока(50)); // код элемента справочника СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов.
	ТаблицаИндикаторов.Колонки.Добавить("Срок",                 ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)); // крайний срок сдачи отчета.
	ТаблицаИндикаторов.Колонки.Добавить("ПериодСобытия",        ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)); // последний день очередного отчетного периода.
	ТаблицаИндикаторов.Колонки.Добавить("НачалоПериодаСобытия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)); // первый день очередного отчетного периода.
	ТаблицаИндикаторов.Колонки.Добавить("Индикатор",            ОбщегоНазначения.ОписаниеТипаСтрока(20)); // тип индикатора (Зеленый, красный или желтый).
	ТаблицаИндикаторов.Колонки.Добавить("ЭтоТекущаяЗадача",     Новый ОписаниеТипов("Булево")); // означает, что срок оплаты налога наступил, но ещё не завершился.
	ТаблицаИндикаторов.Колонки.Добавить("ПросроченныеОтчеты",   Новый ОписаниеТипов("ТаблицаЗначений")); // список несданных вовремя отчетов. См функцию НовыйПросроченныеОтчеты().
	ТаблицаИндикаторов.Колонки.Добавить("ОтчетыПрошлыхПериодов",Новый ОписаниеТипов("ТаблицаЗначений")); // список отчетов прошлых лет, которые введены по результатам теста прошлых периодов. См функцию НовыйОтчетыПрошлыхПериодов().
	ТаблицаИндикаторов.Колонки.Добавить("СтатусТекущегоОтчета", ОбщегоНазначения.ОписаниеТипаСтрока(50)); // статус отчета, срок сдачи которого наступил, но ещё не завершился.
	ТаблицаИндикаторов.Колонки.Добавить("ТекущийОтчетСдан",     Новый ОписаниеТипов("Булево")); // признак, того, что задача по текущему отчету выполнена.
	ТаблицаИндикаторов.Колонки.Добавить("ТекущийОтчетЕстьВБазе",Новый ОписаниеТипов("Булево")); // признак того, что текущий отчет записан в базу.
	ТаблицаИндикаторов.Колонки.Добавить("Периодичность",        Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность")); // периодичность предоставления отчета по правилу.
	ТаблицаИндикаторов.Колонки.Добавить("ФинансовыйПериод",     Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность")); // периодичность налогового периода.
	ТаблицаИндикаторов.Колонки.Добавить("НуженПомощникОтчетовПрошлыхПериодов", Новый ОписаниеТипов("Булево")); // периодичность налогового периода.
	
	ТаблицаИндикаторов.Колонки.Добавить("РасширенныйПервыйНалоговыйПериод",
		Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыРасширенногоПервогоНалоговогоПериода")); // вариант особенностей законодательства для первого налогового/отчетного периода.
	
	Возврат ТаблицаИндикаторов;
	
КонецФункции

Функция НоваяБудущаяЗадача()
	
	БудущаяЗадача = Новый Структура;
	БудущаяЗадача.Вставить("ИмяЗадачи", ""); // наименование задачи - часть представления ближайшего отчета при нулевой отчетности.
	БудущаяЗадача.Вставить("Наименование", ""); // краткое описание текста задачи, которое отображается в мониторе.
	БудущаяЗадача.Вставить("ПериодСобытия", Дата("00010101")); // последний день очередного отчетного периода.
	БудущаяЗадача.Вставить("Срок", Дата("00010101"));  // крайний срок выполнения очередной задачи.
	БудущаяЗадача.Вставить("НачалоПериодаСобытия", Дата("00010101")); // первый день очередного отчетного периода.
	БудущаяЗадача.Вставить("НачалоВыполнения", Дата("00010101")); // первый день, начиная с которого можно приступать к выполнению задачи.
	
	Возврат БудущаяЗадача;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеЗадач

// Заполняет все задачи в разрезе правил по налогам и отчетам, которые организация по закону должна выполнить, начиная с сегодняшнего дня. 
// Результат функции передается далее конкретным алгоритмам, которые решают, исходя из конкретной учетной политики и конкретных данных базы, 
// должна ли это задача действительно выполнятся и какой у нее должен статус (красный, желтый, зеленый, серый).
//
Функция СформироватьТекущиеПредстоящиеЗадачи(Организация, ТекущийДень, ДеятельностьОтсутствует)
	
	НачалоИнтервала = Дата("00010101");
	КонецИнтервала  = ДобавитьМесяц(КонецГода(ТекущийДень), 12);
	
	Расписание = РегистрыСведений.ЗадачиБухгалтера.РасписаниеПоНалогамОтчетамЗаПериод(Организация, НачалоИнтервала, КонецИнтервала);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Расписание", Расписание);
	Запрос.УстановитьПараметр("ТекущийДень", НачалоДня(ТекущийДень));
	Запрос.УстановитьПараметр("ИсключаемыеПравила", ИсключаемыеПравила());
	Запрос.УстановитьПараметр("ИсключаемыеЗадачи", ИсключаемыеЗадачи(ДеятельностьОтсутствует));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПравилаРазовыхЗадач", ПравилаРазовыхЗадач());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СправочникПравила.Ссылка КАК Правило
	|ПОМЕСТИТЬ ВТИсключаемыеПравила
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК СправочникПравила
	|ГДЕ
	|	СправочникПравила.Ссылка В(&ИсключаемыеПравила)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	СправочникПравила.Ссылка
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК СправочникПравила
	|ГДЕ
	|	СправочникПравила.Владелец В(&ИсключаемыеЗадачи)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расписание.Срок КАК Срок,
	|	Расписание.Правило КАК Правило,
	|	Расписание.Наименование КАК Наименование,
	|	Расписание.ПериодСобытия КАК ПериодСобытия,
	|	Расписание.НачалоВыполнения КАК НачалоВыполнения
	|ПОМЕСТИТЬ РасписаниеЗаПериод
	|ИЗ
	|	&Расписание КАК Расписание
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило,
	|	Расписание.ПериодСобытия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасписаниеЗаПериод.Срок КАК Срок,
	|	РасписаниеЗаПериод.Правило КАК Правило,
	|	РасписаниеЗаПериод.Наименование КАК Наименование,
	|	РасписаниеЗаПериод.ПериодСобытия КАК ПериодСобытия,
	|	РасписаниеЗаПериод.НачалоВыполнения КАК НачалоВыполнения
	|ПОМЕСТИТЬ ВТРасписание
	|ИЗ
	|	РасписаниеЗаПериод КАК РасписаниеЗаПериод
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТИсключаемыеПравила КАК ВТИсключаемыеПравила
	|		ПО РасписаниеЗаПериод.Правило = ВТИсключаемыеПравила.Правило
	|ГДЕ
	|	ВТИсключаемыеПравила.Правило ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗадачиБухгалтера.Срок,
	|	ЗадачиБухгалтера.Правило,
	|	ЗадачиБухгалтера.Наименование,
	|	ЗадачиБухгалтера.ПериодСобытия,
	|	ЗадачиБухгалтера.НачалоВыполнения
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ЛЕВОЕ СОЕДИНЕНИЕ РасписаниеЗаПериод КАК РасписаниеЗаПериод
	|		ПО ЗадачиБухгалтера.Правило = РасписаниеЗаПериод.Правило
	|			И ЗадачиБухгалтера.ПериодСобытия = РасписаниеЗаПериод.ПериодСобытия
	|ГДЕ
	|	ЗадачиБухгалтера.Организация = &Организация
	|	И ЗадачиБухгалтера.Правило В(&ПравилаРазовыхЗадач)
	|	И РасписаниеЗаПериод.Правило ЕСТЬ NULL
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило,
	|	Срок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТРасписание.Срок КАК Срок,
	|	ВТРасписание.Правило КАК Правило,
	|	ВТРасписание.Наименование КАК Наименование,
	|	ВТРасписание.ПериодСобытия КАК ПериодСобытия,
	|	ВТРасписание.НачалоВыполнения КАК НачалоВыполнения
	|ПОМЕСТИТЬ ТекущиеЗадачи
	|ИЗ
	|	ВТРасписание КАК ВТРасписание
	|ГДЕ
	|	ВТРасписание.НачалоВыполнения <= &ТекущийДень
	|	И ВТРасписание.Срок >= &ТекущийДень
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Срок,
	|	Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ВТРасписание.Срок) КАК Срок,
	|	ВТРасписание.Правило КАК Правило
	|ПОМЕСТИТЬ БудущиеЗадачи
	|ИЗ
	|	ВТРасписание КАК ВТРасписание
	|ГДЕ
	|	ВТРасписание.НачалоВыполнения > &ТекущийДень
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТРасписание.Правило
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Срок,
	|	Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПолныйСписокТекущийБудущихПравил.Правило КАК Правило,
	|	МИНИМУМ(ПолныйСписокТекущийБудущихПравил.БудЗадачаСрок) КАК БудЗадачаСрок,
	|	МАКСИМУМ(ПолныйСписокТекущийБудущихПравил.ТекЗадачаСрок) КАК ТекЗадачаСрок
	|ПОМЕСТИТЬ ТекущиеБудущиеПравила
	|ИЗ
	|	(ВЫБРАТЬ
	|		БудущиеЗадачи.Правило КАК Правило,
	|		БудущиеЗадачи.Срок КАК БудЗадачаСрок,
	|		ДАТАВРЕМЯ(1, 1, 1) КАК ТекЗадачаСрок
	|	ИЗ
	|		БудущиеЗадачи КАК БудущиеЗадачи
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТекущиеЗадачи.Правило,
	|		ДАТАВРЕМЯ(2999, 12, 31),
	|		ТекущиеЗадачи.Срок
	|	ИЗ
	|		ТекущиеЗадачи КАК ТекущиеЗадачи) КАК ПолныйСписокТекущийБудущихПравил
	|
	|СГРУППИРОВАТЬ ПО
	|	ПолныйСписокТекущийБудущихПравил.Правило
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТекущиеБудущиеПравила.Правило КАК Правило,
	|	ТекущиеЗадачи.Срок КАК ТекЗадачаСрок,
	|	ТекущиеЗадачи.Наименование КАК ТекЗадачаНаименование,
	|	ТекущиеЗадачи.ПериодСобытия КАК ТекЗадачаПериодСобытия,
	|	ТекущиеЗадачи.НачалоВыполнения КАК ТекЗадачаНачалоВыполнения,
	|	БудущиеЗадачи.Срок КАК БудЗадачаСрок,
	|	БудущиеЗадачи.Наименование КАК БудЗадачаНаименование,
	|	БудущиеЗадачи.ПериодСобытия КАК БудЗадачаПериодСобытия,
	|	БудущиеЗадачи.НачалоВыполнения КАК БудЗадачаНачалоВыполнения,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Действие КАК Действие,
	|	ВЫБОР
	|		КОГДА ТекущиеЗадачи.Правило ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьТекущаяЗадача,
	|	ВЫБОР
	|		КОГДА БудущиеЗадачи.Правило ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьБудущаяЗадача,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец КАК Владелец,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Код КАК КодПравила,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Код КАК КодЗадачи,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Наименование КАК ИмяЗадачи,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Описание КАК Описание,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец.РеквизитДопУпорядочивания КАК Порядок,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Периодичность КАК Периодичность,
	|	ПравилаПредставленияОтчетовУплатыНалогов.ФинансовыйПериод КАК ФинансовыйПериод,
	|	ПравилаПредставленияОтчетовУплатыНалогов.РасширенныйПервыйНалоговыйПериод КАК РасширенныйПервыйНалоговыйПериод
	|ИЗ
	|	ТекущиеБудущиеПравила КАК ТекущиеБудущиеПравила
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТекущиеЗадачи КАК ТекущиеЗадачи
	|		ПО ТекущиеБудущиеПравила.Правило = ТекущиеЗадачи.Правило
	|			И ТекущиеБудущиеПравила.ТекЗадачаСрок = ТекущиеЗадачи.Срок
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРасписание КАК БудущиеЗадачи
	|		ПО ТекущиеБудущиеПравила.Правило = БудущиеЗадачи.Правило
	|			И ТекущиеБудущиеПравила.БудЗадачаСрок = БудущиеЗадачи.Срок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|		ПО ТекущиеБудущиеПравила.Правило = ПравилаПредставленияОтчетовУплатыНалогов.Ссылка
	|ГДЕ
	|	НЕ ПравилаПредставленияОтчетовУплатыНалогов.ПометкаУдаления = ИСТИНА";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЗадачиПоНалогам  = НовыйЗадачиОрганизации();
	ЗадачиПоОтчетам  = НовыйЗадачиОрганизации();
	ВключенныеЗадачи = НовыйВключенныеЗадачи();
	
	Пока Выборка.Следующий() Цикл
		
		Если Не (Выборка.ЕстьТекущаяЗадача Или Выборка.ЕстьБудущаяЗадача) Тогда
			Продолжить;
		КонецЕсли;
		
		ЭтоНалог = ЭтоНалоговыйПоказатель(Выборка.Действие);
		
		НоваяСтрока = ?(ЭтоНалог, ЗадачиПоНалогам.Добавить(), ЗадачиПоОтчетам.Добавить());
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если Выборка.ЕстьТекущаяЗадача Тогда
			
			НоваяСтрока.ЭтоТекущаяЗадача = Истина;
			НоваяСтрока.Срок             = Выборка.ТекЗадачаСрок;
			НоваяСтрока.НачалоВыполнения = Выборка.ТекЗадачаНачалоВыполнения;
			НоваяСтрока.ПериодСобытия    = КонецДня(Выборка.ТекЗадачаПериодСобытия);
			
			НоваяСтрока.НачалоПериодаСобытия = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(
				Выборка.Периодичность, Выборка.ТекЗадачаПериодСобытия);
				
			НоваяСтрока.Наименование = СокращенноеНаименованиеЗадачи(
				Выборка.КодЗадачи, 
				Выборка.КодПравила, 
				Выборка.ИмяЗадачи,
				Выборка.Описание, 
				НоваяСтрока.НачалоПериодаСобытия,
				НоваяСтрока.ПериодСобытия);
			
			НоваяСтрока.НаименованиеЗадачи = Выборка.ТекЗадачаНаименование;
			
		Иначе
			
			НоваяСтрока.ЭтоТекущаяЗадача = Ложь;
			НоваяСтрока.Срок             = Выборка.БудЗадачаСрок;
			НоваяСтрока.НачалоВыполнения = Выборка.БудЗадачаНачалоВыполнения;
			НоваяСтрока.ПериодСобытия    = КонецДня(Выборка.БудЗадачаПериодСобытия);
			
			НоваяСтрока.НачалоПериодаСобытия = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(
				Выборка.Периодичность, Выборка.БудЗадачаПериодСобытия);
				
			НоваяСтрока.Наименование = СокращенноеНаименованиеЗадачи(
				Выборка.КодЗадачи, 
				Выборка.КодПравила, 
				Выборка.ИмяЗадачи, 
				Выборка.Описание, 
				НоваяСтрока.НачалоПериодаСобытия, 
				НоваяСтрока.ПериодСобытия);
			
			НоваяСтрока.НаименованиеЗадачи = Выборка.БудЗадачаНаименование;
			
		КонецЕсли;
		
		БудущаяЗадача = НоваяБудущаяЗадача();
		Если Выборка.ЕстьБудущаяЗадача Тогда
			
			БудущаяЗадача.ИмяЗадачи        = Выборка.ИмяЗадачи;
			БудущаяЗадача.Срок             = Выборка.БудЗадачаСрок;
			БудущаяЗадача.НачалоВыполнения = Выборка.БудЗадачаНачалоВыполнения;
			БудущаяЗадача.ПериодСобытия    = КонецДня(Выборка.БудЗадачаПериодСобытия);
			
			БудущаяЗадача.НачалоПериодаСобытия = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(
				Выборка.Периодичность, Выборка.БудЗадачаПериодСобытия);
				
			БудущаяЗадача.Наименование = СокращенноеНаименованиеЗадачи(
				Выборка.КодЗадачи,
				Выборка.КодПравила,
				Выборка.ИмяЗадачи,
				Выборка.Описание,
				БудущаяЗадача.НачалоПериодаСобытия,
				БудущаяЗадача.ПериодСобытия);
				
		КонецЕсли;
		НоваяСтрока.БудущаяЗадача = БудущаяЗадача;
		
		ВключеннаяЗадача = ВключенныеЗадачи.Найти(Выборка.Владелец, "Владелец");
		Если ВключеннаяЗадача = Неопределено Тогда
			ВключеннаяЗадача = ВключенныеЗадачи.Добавить();
		КонецЕсли;
		
		Если ЭтоНалог Тогда
			ВключеннаяЗадача.ПравилоНалог.Добавить(Выборка.Правило);
		Иначе
			ВключеннаяЗадача.ПравилоОтчет.Добавить(Выборка.Правило);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ВключеннаяЗадача, Выборка);
		Если ЭтоЗадачаНДФЛПоУплате(ВключеннаяЗадача.КодЗадачи)
			Или ЭтоЗадачаНДФЛПоОтчету(ВключеннаяЗадача.КодЗадачи) Тогда
			ВключеннаяЗадача.ИмяЗадачи = НСтр("ru='НДФЛ'");
		Иначе
			ВключеннаяЗадача.ИмяЗадачи = ОбщегоНазначенияБПКлиентСервер.КапитализироватьСтроку(ВключеннаяЗадача.ИмяЗадачи);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) 
		И УчетнаяПолитика.ПрименяетсяУСНПатент(Организация, ТекущийДень) Тогда
		
		ИдЗадачиПатент = ЗадачиБухгалтераКлиентСервер.КодЗадачиПатент();
		
		СтрокаПатент = ВключенныеЗадачи.Добавить();
		СтрокаПатент.ИмяЗадачи           = ИдЗадачиПатент;
		СтрокаПатент.КодЗадачи           = ИдЗадачиПатент;
		СтрокаПатент.Порядок             = 11;
		
		СтрокаПатент = ЗадачиПоНалогам.Добавить();
		СтрокаПатент.КодЗадачи = ИдЗадачиПатент;
	КонецЕсли;
	
	ВключенныеЗадачи.Сортировать("Порядок");
	Возврат Новый Структура("ЗадачиПоНалогам, ЗадачиПоОтчетам, ВключенныеЗадачи", 
		ЗадачиПоНалогам, ЗадачиПоОтчетам, ВключенныеЗадачи);
	
КонецФункции

Функция НовыйЗадачиОрганизации()
	
	ТаблицаЗадач = Новый ТаблицаЗначений;
	ТаблицаЗадач.Колонки.Добавить("Правило",              Новый ОписаниеТипов("СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов")); // правило, относящееся к уплате налога по данной задаче.
	ТаблицаЗадач.Колонки.Добавить("БудущаяЗадача",        Новый ОписаниеТипов("Структура")); // см. описание функции НовыйБудущаяЗадача().
	ТаблицаЗадач.Колонки.Добавить("НачалоВыполнения",     ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)); // первый день, начиная с которого можно сдавать отчет / платить налог за очередной период.
	ТаблицаЗадач.Колонки.Добавить("ПериодСобытия",        ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)); // последний день очередного отчетного периода.
	ТаблицаЗадач.Колонки.Добавить("НачалоПериодаСобытия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)); // первый день очередного отчетного периода.
	ТаблицаЗадач.Колонки.Добавить("Наименование",         ОбщегоНазначения.ОписаниеТипаСтрока(150)); //краткое описание текста задачи, которое отображается в мониторе.
	ТаблицаЗадач.Колонки.Добавить("НаименованиеЗадачи",   ОбщегоНазначения.ОписаниеТипаСтрока(150)); // полное наименование задачи - как в списке задач; передается в заголовки помощников.
	ТаблицаЗадач.Колонки.Добавить("ЭтоТекущаяЗадача",     Новый ОписаниеТипов("Булево")); // означает, что срок оплаты налога наступил, но ещё не завершился.
	ТаблицаЗадач.Колонки.Добавить("Владелец",             Новый ОписаниеТипов("СправочникСсылка.ЗадачиБухгалтера")); // задача по сдаче отчета.
	ТаблицаЗадач.Колонки.Добавить("КодЗадачи",            ОбщегоНазначения.ОписаниеТипаСтрока(50));  // код задачи по налогу и отчету.
	ТаблицаЗадач.Колонки.Добавить("КодПравила",           ОбщегоНазначения.ОписаниеТипаСтрока(50)); // код элемента справочника СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов.
	ТаблицаЗадач.Колонки.Добавить("Срок",                 ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя)); // крайний срок сдачи отчета / уплаты налога.
	ТаблицаЗадач.Колонки.Добавить("Периодичность",        Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность")); // периодичность начисления налога / предоставления отчета по правилу.
	ТаблицаЗадач.Колонки.Добавить("ФинансовыйПериод",     Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность")); // периодичность налогового периода.
	
	ТаблицаЗадач.Колонки.Добавить("РасширенныйПервыйНалоговыйПериод",
		Новый ОписаниеТипов("ПеречислениеСсылка.ВариантыРасширенногоПервогоНалоговогоПериода")); // вариант особенностей законодательства для первого налогового/отчетного периода.
	
	Возврат ТаблицаЗадач;
	
КонецФункции

Функция НовыйВключенныеЗадачи()
	
	ВключенныеЗадачи = Новый ТаблицаЗначений;
	ВключенныеЗадачи.Колонки.Добавить("Владелец",       Новый ОписаниеТипов("СправочникСсылка.ЗадачиБухгалтера")); // задача по налогу или отчету.
	ВключенныеЗадачи.Колонки.Добавить("ИмяЗадачи",      ОбщегоНазначения.ОписаниеТипаСтрока(100)); // имя налога / отчета, отображаемое в мониторе.
	ВключенныеЗадачи.Колонки.Добавить("КодЗадачи",      ОбщегоНазначения.ОписаниеТипаСтрока(50)); // код задачи по налогу и отчету.
	ВключенныеЗадачи.Колонки.Добавить("Порядок",        ОбщегоНазначения.ОписаниеТипаЧисло(2)); // порядк для сортировки задачи в мониторе.
	ВключенныеЗадачи.Колонки.Добавить("ПравилоНалог",   Новый ОписаниеТипов("Массив")); // правило, относящееся к уплате налога по данной задаче.
	ВключенныеЗадачи.Колонки.Добавить("ПравилоОтчет",   Новый ОписаниеТипов("Массив")); // правило, относящееся к сдаче отчета по данной задаче.
	ВключенныеЗадачи.Индексы.Добавить("Владелец");
	
	Возврат ВключенныеЗадачи;
	
КонецФункции

Функция ДопускаетсяНесколькоЗадач(КодЗадачи)
	
	Если ЭтоЗадачаСтраховыхВзносов(КодЗадачи)
		Или ЭтоЗадачаНДФЛПоОтчету(КодЗадачи)
		Или ЭтоЗадачаВзносовИП(КодЗадачи) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция СокращенноеНаименованиеЗадачи(КодЗадачи, КодПравила, ИмяЗадачи, ОписаниеПравила, НачалоПериода, КонецПериода)
	
	Шаблон = НСтр("ru = '%1 за %2'");
	
	// Заменяем слова уплату на оплату.
	Параметр1 = ?(ПустаяСтрока(ОписаниеПравила), ИмяЗадачи, ОписаниеПравила);
	Если СтрНачинаетсяС(Параметр1, "уплата") Тогда
		Параметр1 = "О" + Прав(Параметр1, СтрДлина(Параметр1) - 1);
	КонецЕсли;
	
	Если КодПравила = "2013_ОтчетностьФСС" 
		Или КодПравила = "2014_ОтчетностьФССЭлектронная" 
		Или КодПравила = "2014_ОтчетностьФССБумажная" Тогда
		
		Параметр1 = Нстр("ru = 'Отчет в ФСС'");
		
	ИначеЕсли КодПравила = "2013_ОтчетностьПФР"
		Или КодПравила = " 2014_ОтчетностьПФРЭлектронная"
		Или КодПравила = "2014_ОтчетностьПФРБумажная" Тогда
		
		Параметр1 = Нстр("ru = 'Отчет в ПФР'");
		
	КонецЕсли;
	
	Если ЭтоЗадачаНДФЛПоУплате(КодЗадачи) Тогда
		Параметр1 = Нстр("ru = 'НДФЛ'");
	КонецЕсли;
	
	Параметр2 = КалендарьБухгалтера.ПредставлениеПериодаСобытия(НачалоПериода, КонецПериода);
	
	Результат = СтрШаблон(Шаблон, Параметр1, Параметр2);
	Результат = ОбщегоНазначенияБПКлиентСервер.КапитализироватьСтроку(Результат);
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоНалоговыйПоказатель(ВидДействия)
	
	Если ВидДействия = Перечисления.ВидыДействийКалендаряБухгалтера.УплатаНалога
		Или ВидДействия = Перечисления.ВидыДействийКалендаряБухгалтера.Зарплата Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПоддерживаемыеСчетаУчетаЗадач()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СоответствиеВидовНалоговЗадач", РасчетыСБюджетом.ТаблицаСоответствияЗадачБухгалтера());
	Запрос.УстановитьПараметр("ПоддерживаемыеНалоги", ПоддерживаемыеВидыНалогов());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыНалогов.ВидНалога КАК ВидНалога,
	|	ВидыНалогов.КодЗадачи
	|ПОМЕСТИТЬ ВидыНалогов
	|ИЗ
	|	&СоответствиеВидовНалоговЗадач КАК ВидыНалогов
	|ГДЕ
	|	ВидыНалогов.ВидНалога В(&ПоддерживаемыеНалоги)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидНалога
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыНалоговИПлатежейВБюджет.СчетУчета КАК СчетУчета,
	|	ВидыНалогов.КодЗадачи КАК КодЗадачи,
	|	ВидыНалоговИПлатежейВБюджет.ВидНалога
	|ИЗ
	|	ВидыНалогов КАК ВидыНалогов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВидыНалоговИПлатежейВБюджет КАК ВидыНалоговИПлатежейВБюджет
	|		ПО ВидыНалогов.ВидНалога = ВидыНалоговИПлатежейВБюджет.ВидНалога";
	
	ПоддерживаемыеЗадачи = Запрос.Выполнить().Выгрузить();
	ПоддерживаемыеЗадачи.Индексы.Добавить("КодЗадачи");
	Возврат ПоддерживаемыеЗадачи;
	
КонецФункции

Функция ПоддерживаемыеВидыНалогов()
	
	ПоддерживаемыеНалоги = Новый Массив();
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.УСН_Доходы);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.УСН_ДоходыМинусРасходы);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.УСН_МинимальныйНалог);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.ЕНВД);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.ТорговыйСбор);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.НДФЛ);
	
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.ФиксированныеВзносы_ФСС);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.ФиксированныеВзносы_ФФОМС);
	
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.СтраховыеВзносы_ПФР_СтраховаяЧасть);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.СтраховыеВзносы_ПФР_Добровольные);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС_НСиПЗ);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.СтраховыеВзносы_ФФОМС);
	
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.ДополнительныеВзносы_ПФР_ВредныеУсловия);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.ДополнительныеВзносы_ПФР_ЛетныеЭкипажи);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.ДополнительныеВзносы_ПФР_ТяжелыеУсловия);
	ПоддерживаемыеНалоги.Добавить(Перечисления.ВидыНалогов.ДополнительныеВзносы_ПФР_Шахтеры);
	
	Возврат ПоддерживаемыеНалоги;
	
КонецФункции

// Исключаемые правила в рамках поддерживаемых задач, которые вообще не должны показываться в мониторе.
// Например это те, которые не требуется законом выполнять регулярно.
Функция ИсключаемыеПравила()
	
	ИсключаемыеПравила = Новый ТаблицаЗначений;
	ИсключаемыеПравила.Колонки.Добавить("КодЗадачи", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ИсключаемыеПравила.Колонки.Добавить("КодПравила", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	
	Правило = ИсключаемыеПравила.Добавить();
	Правило.КодЗадачи  = "НДФЛ";
	Правило.КодПравила = "2013_2НДФЛ_Неудержанный";
	
	Правило = ИсключаемыеПравила.Добавить();
	Правило.КодЗадачи  = "НДФЛ";
	Правило.КодПравила = "2016_2НДФЛ_Неудержанный";
	
	Правило = ИсключаемыеПравила.Добавить();
	Правило.КодЗадачи  = "НДФЛ";
	Правило.КодПравила = "2016_2НДФЛ_Неудержанный";
	
	Правило = ИсключаемыеПравила.Добавить();
	Правило.КодЗадачи  = "СтраховыеВзносы";
	Правило.КодПравила = "2013_Уплата_Допвзносы_Накопительная_ПФР";
	
	Правило = ИсключаемыеПравила.Добавить();
	Правило.КодЗадачи  = "НДС";
	Правило.КодПравила = "СверкаНДС";
	
	Правило = ИсключаемыеПравила.Добавить();
	Правило.КодЗадачи  = "НДС";
	Правило.КодПравила = "СверкаНДС";
	
	Правило = ИсключаемыеПравила.Добавить();
	Правило.КодЗадачи  = "НДС";
	Правило.КодПравила = "СверкаНДС";
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ИсключаемыеПравила.КодЗадачи,
	|	ИсключаемыеПравила.КодПравила
	|ПОМЕСТИТЬ КритерииПоиска
	|ИЗ
	|	&ИсключаемыеПравила КАК ИсключаемыеПравила
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Ссылка 
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КритерииПоиска КАК КритерииПоиска
	|		ПО ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Код = КритерииПоиска.КодЗадачи
	|			И ПравилаПредставленияОтчетовУплатыНалогов.Код = КритерииПоиска.КодПравила");
	Запрос.УстановитьПараметр("ИсключаемыеПравила", ИсключаемыеПравила);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ИсключаемыеЗадачи(ДеятельностьОтсутствует = Ложь)
	
	ЗадачиИсключения = Новый Массив;
	
	Если ДеятельностьОтсутствует Тогда
		ЗадачиИсключения.Добавить(Справочники.ЗадачиБухгалтера.НайтиПоКоду(ЗадачиБухгалтераКлиентСервер.КодЗадачиСтатистика()));
	КонецЕсли;
	
	Возврат ЗадачиИсключения;
	
КонецФункции

Функция ПравилаРазовыхЗадач()

	// Правила предоставления отчетов и уплаты налогов, являющихся разовыми событиями.
	// Задачи по ним могут быть в прошлых периодах, но если они не выполнены, то про них надо сообщать.
	Результат = Новый Массив(1);
	
	// Отчет о среднесписочной численности при создании новой организации,
	// предоставляется один раз до 20 числа месяца, следующего за месяцем регистрации.
	Результат[0] = Справочники.ПравилаПредставленияОтчетовУплатыНалогов.НайтиПоИдентификатору(
		ЗадачиБухгалтераКлиентСервер.КодЗадачиСреднесписочнаяЧисленность(), "2016_РегистрацияОрганизации");
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область АлгоритмДляНенастроенныхНалоговИОтчетов

Процедура ПрименитьАлгоритмДляНенастроенныхНалогов(НалоговыеИндикаторы, ЗадачиПоНалогам, ОтсутствуютПатенты, ОтсутствуютВидыДеятельностиЕНВД)
	
	ОбработанныеЗадачи = Новый Массив;
	
	Для Каждого Задача Из ЗадачиПоНалогам Цикл
	
		Если (ЭтоЗадачаЕНВД(Задача.КодЗадачи) И ОтсутствуютВидыДеятельностиЕНВД)
			Или (ЭтоЗадачаПатент(Задача.КодЗадачи) И ОтсутствуютПатенты) Тогда
			
			НоваяСтрока = НалоговыеИндикаторы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Задача);
			
			НоваяСтрока.Индикатор = ЦветаИндикаторов().Серый;
			
			ОбработанныеЗадачи.Добавить(Задача);
			
		КонецЕсли;
		
	КонецЦикла;
	
	УдалитьСтрокиТаблицы(ЗадачиПоНалогам, ОбработанныеЗадачи); // Чтобы данные задачи не анализировались другими алгоритмами.
	
КонецПроцедуры

Процедура ПрименитьАлгоритмДляНенастроенныхОтчетов(ОтчетныеИндикаторы, ЗадачиПоОтчетам)
	
	ОбработанныеЗадачи = Новый Массив;
	
	Для Каждого Задача Из ЗадачиПоОтчетам Цикл
	
		Если ЭтоЗадачаПроверкиСтатистики(Задача.КодЗадачи, Задача.КодПравила) Тогда
			
			Отбор = Новый Структура();
			Отбор.Вставить("КодЗадачи", ЗадачиБухгалтераКлиентСервер.КодЗадачиСтатистика());
			
			ОтсутствуютЗадачиПоСтатистике = ЗадачиПоОтчетам.НайтиСтроки(Отбор).Количество() = 1;
				
			Если ОтсутствуютЗадачиПоСтатистике Тогда
				НоваяСтрока = ОтчетныеИндикаторы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Задача);
				НоваяСтрока.Индикатор = ЦветаИндикаторов().Серый;
			КонецЕсли;
			
			ОбработанныеЗадачи.Добавить(Задача);
			
		КонецЕсли;
		
	КонецЦикла;
	
	УдалитьСтрокиТаблицы(ЗадачиПоОтчетам, ОбработанныеЗадачи); // Чтобы данные задачи не анализировались другими алгоритмами.
	
КонецПроцедуры

#КонецОбласти

#Область ОбщийАлгоритмПоНалогам

// Алгоритм, анализирует остатки и обороты за отчетные периоды на 68 и 69 счетах регистра бухгалтерии. 
// По результатам анализа формируется индикатор в разрезе каждого счета учета налога.
// Может применятся ко всем налогам, отвечающим следующим предпосылкам:
// - Сначала всегда идет начисление налога с проводкой в кредит 68, потом списание (уплата) с проводкой в дебет 68. 
// - Переплаты налогов в одном периоде засчитываются автоматически в следующем периоде.
// - Периоды оплат в рамках одного налога не пересекаются.
// - Сначала погашается текущий платеж, затем задолженность.
//
Процедура ПрименитьОбщийАлгоритмПоНалогам(НалоговыеИндикаторы, ЗадачиПоНалогам, Организация, ТекущийДень, ТаблицаСоСчетамиУчета, СчетаУчетаДС)
	
	// 1. Формируем таблицу из задач, которые поддерживаются данным алгоритмом.
	ОбрабатываемыеЗадачи = НовыйЗадачиОрганизации();
	ОбрабатываемыеЗадачи.Колонки.Добавить("СчетаУчета", Новый ОписаниеТипов("Массив"));
	Для Каждого Задача Из ЗадачиПоНалогам Цикл
		
		Если Не ИспользуетсяОбщийАлгоритм(Задача.КодЗадачи) Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ОбрабатываемыеЗадачи.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Задача);
		НоваяСтрока.СчетаУчета = ПодобратьСчетаУчетаПоЗадаче(Задача.КодЗадачи, ТаблицаСоСчетамиУчета);
		
	КонецЦикла;
	
	Если ОбрабатываемыеЗадачи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбрабатываемыеЗадачи.Сортировать("Владелец,НачалоПериодаСобытия,ПериодСобытия", Новый СравнениеЗначений());
	
	// 2. Динамически создаем текст запроса к бухгалтерским остаткам и оборотам по отчетным периодам таблицы задач.
	ОтчетныеПериоды = ОбрабатываемыеЗадачи.СкопироватьКолонки();
	Для Каждого Задача ИЗ ОбрабатываемыеЗадачи Цикл;
		
		Если Не ДопускаетсяНесколькоЗадач(Задача.КодЗадачи) 
			И ОтчетныеПериоды.НайтиСтроки(Новый Структура("Владелец", Задача.Владелец)).Количество() > 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ОтчетныеПериоды.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Задача);
	
	КонецЦикла;
	
	СуммыНалогов = ПолучитьСуммыНалогов(ОтчетныеПериоды, Организация, ТекущийДень, СчетаУчетаДС);
	
	//3. Применяем алгоритм. Интерпретируем полученные суммы и добавляем в таблицу индикаторов.
	Для Каждого Задача Из ОбрабатываемыеЗадачи Цикл
		
		НоваяСтрока = НалоговыеИндикаторы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Задача);
		
		МассивИндикаторов = Новый Массив;
		КУплатеДолг = 0;
		КУплатеТекущий = 0;
		
		Для Каждого СчетУчета Из Задача.СчетаУчета Цикл
			ПараметрыИндикатора = ПолучитьПараметрыИндикатора(СчетУчета, Задача, СуммыНалогов, ТекущийДень, Организация);
			МассивИндикаторов.Добавить(ПараметрыИндикатора.Индикатор);
			КУплатеДолг = КУплатеДолг + ПараметрыИндикатора.КУплатеДолг;
			КУплатеТекущий = КУплатеТекущий + ПараметрыИндикатора.КУплатеТекущий;
		КонецЦикла;
		
		НоваяСтрока.Индикатор = СамыйКритичныйИндикатор(МассивИндикаторов);
		
		НоваяСтрока.КУплатеДолг = КУплатеДолг;
		НоваяСтрока.КУплатеТекущий = КУплатеТекущий;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПрименитьАлгоритмДляНалогаУСН(НалоговыеИндикаторы, ЗадачиПоНалогам, Организация, ТекущийДень)
	
	// 1. Формируем таблицу из задач, которые поддерживаются данным алгоритмом.
	
	ОтборЗадач = Новый Структура("КодЗадачи", ЗадачиБухгалтераКлиентСервер.КодЗадачиУСН());
	ОбрабатываемыеЗадачи = ЗадачиПоНалогам.Скопировать(ОтборЗадач);
	
	Если ОбрабатываемыеЗадачи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// 2. Получаем остатки расчетов по налогу за периоды задач.
	
	ОстатокРасчетовПоНалогу = УчетУСН.ОстатокРасчетовПоНалогуУСН(Организация, КонецДня(ТекущийДень));
	
	ЗаполнитьСуммыПоОплатеНалогаУСН(ОбрабатываемыеЗадачи, ОстатокРасчетовПоНалогу, Организация);
	
	//3. Применяем алгоритм. Интерпретируем полученные суммы и добавляем в таблицу индикаторов.
	Для Каждого Задача Из ОбрабатываемыеЗадачи Цикл
		
		НоваяСтрока = НалоговыеИндикаторы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Задача);
		
		Если (Задача.КУплатеТекущий = 0 И Задача.КУплатеДолг = 0)
			И ТребуетсяТестПоНалогамИВзносамПрошлыхПериодов(Организация, Задача.КодЗадачи) Тогда
			
			НоваяСтрока.Индикатор = ЦветаИндикаторов().Желтый;
			НоваяСтрока.НуженПомощникНалоговПрошлыхПериодов = Истина;
		Иначе
			НоваяСтрока.Индикатор = ПолучитьИндикатор(Задача.ЭтоТекущаяЗадача, Задача.КУплатеДолг, Задача.КУплатеТекущий);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьСуммыПоОплатеНалогаУСН(ОбрабатываемыеЗадачи, ОстатокРасчетовПоНалогу, Организация)
	
	Если ОбрабатываемыеЗадачи.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОбрабатываемыеЗадачи.Колонки.Добавить("КУплатеТекущий", ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	ОбрабатываемыеЗадачи.Колонки.Добавить("КУплатеДолг",    ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	
	Если ОстатокРасчетовПоНалогу >= 0 Тогда
		// Налог оплачен полностью, все суммы для индикаторов нулевые.
		Возврат;
	КонецЕсли;
	
	ЗадолженностьПоНалогу = - ОстатокРасчетовПоНалогу;
	
	// Расчеты по налогу для текущих задач получаем по данным помощника УСН.
	ОтборТекущихЗадач = Новый Структура("ЭтоТекущаяЗадача", Истина);
	СтрокиТекущихЗадач = ОбрабатываемыеЗадачи.НайтиСтроки(ОтборТекущихЗадач);
	
	Для Каждого ТекущаяЗадача Из СтрокиТекущихЗадач Цикл
		ТекущаяЗадача.КУплатеТекущий = СуммаНалогаУСНЗаПериодКУплате(Организация, ТекущаяЗадача.ПериодСобытия);
	КонецЦикла;
	
	// Превышение общего остатка расчетов над налогом для текущих задач является задолженностью за прошлые периоды.
	// Эту задолженность добавляем к самой ближайшей из задач по сроку выполнения.
	
	ИтогоТекущийНалог = ОбрабатываемыеЗадачи.Итог("КУплатеТекущий");
	ПросроченнаяЗадолженность = Макс(ЗадолженностьПоНалогу - ИтогоТекущийНалог, 0);
	
	ОбрабатываемыеЗадачи[0].КУплатеДолг = ПросроченнаяЗадолженность;
	
КонецПроцедуры

Функция СуммаНалогаУСНЗаПериодКУплате(Организация, ОтчетныйПериод)
	
	Период = КонецКвартала(ОтчетныйПериод);
	
	ДанныеРасчетаНалога = Обработки.ПомощникРасчетаНалогаУСН.АктуальныеПоказатели(Организация, Период);
	
	ДокументыУплаты = УчетУСН.ДокументыУплатыНалогаЗаПериод(Организация, НачалоКвартала(Период), КонецКвартала(Период));
	Оплачено = ДокументыУплаты.Итог("СуммаОплаты");
	
	СуммаКУплате = Макс(ДанныеРасчетаНалога.НалогКУплате - Оплачено, 0);
	
	Возврат СуммаКУплате;
	
КонецФункции

Функция ИспользуетсяОбщийАлгоритм(КодЗадачи)
	
	Если ЭтоЗадачаЕНВД(КодЗадачи)
		Или ЭтоЗадачаНДФЛПоУплате(КодЗадачи)
		Или ЭтоЗадачаТорговыйСбор(КодЗадачи)
		Или ЭтоЗадачаСтраховыхВзносов(КодЗадачи) Тогда
		
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ДинамическиеПараметрыЗапроса(ПоказателиГруппировки, Счетчик)
	
	Результат = Новый Структура;
	
	ПараметрыГруппировки = СтрРазделить(ПоказателиГруппировки, ",");
	
	Для каждого ИмяПараметра Из ПараметрыГруппировки Цикл
		Результат.Вставить(ИмяПараметра, ИмяПараметра + Счетчик);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ШаблонЗапросаОстатковОборотов()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	СвернутыеОстаткиОбороты.СчетУчета,
	|	СУММА(СвернутыеОстаткиОбороты.СуммаОстаток) КАК СуммаОстаток,
	|	СУММА(СвернутыеОстаткиОбороты.СуммаНачислено) КАК СуммаНачислено,
	|	СУММА(СвернутыеОстаткиОбороты.СуммаУплачено) КАК СуммаУплачено,
	|	СвернутыеОстаткиОбороты.ПериодСобытия,
	|	СвернутыеОстаткиОбороты.НачалоПериодаСобытия,
	|	СУММА(СвернутыеОстаткиОбороты.СуммаНачисленоТекущий) КАК СуммаНачисленоТекущий
	|ИЗ
	|	(ВЫБРАТЬ
	|		ХозрасчетныйОстатки.Счет КАК СчетУчета,
	|		ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстаток,
	|		0 КАК СуммаНачислено,
	|		0 КАК СуммаНачисленоТекущий,
	|		0 КАК СуммаУплачено,
	|		&ПериодСобытия КАК ПериодСобытия,
	|		&НачалоПериодаСобытия КАК НачалоПериодаСобытия
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Остатки(
	|				,
	|				Счет В (&СчетаУчета),
	|				&ВидыСубконто,
	|				Организация В (&Организация)
	|					И Субконто1 В (&ВидыНалоговыхПлатежей)) КАК ХозрасчетныйОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ХозрасчетныйОбороты.Счет,
	|		0,
	|		ХозрасчетныйОбороты.СуммаОборотКт,
	|		ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Период >= &НачалоПериодаСобытия
	|					И ХозрасчетныйОбороты.Период <= &ПериодСобытия
	|				ТОГДА ХозрасчетныйОбороты.СуммаОборотКт
	|			ИНАЧЕ 0
	|		КОНЕЦ,
	|		0,
	|		&ПериодСобытия,
	|		&НачалоПериодаСобытия
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачалоПериодаСобытия,
	|				,
	|				Месяц,
	|				Счет В (&СчетаУчета),
	|				&ВидыСубконто,
	|				Организация В (&Организация)
	|					И Субконто1 В (&ВидыНалоговыхПлатежей),
	|				,
	|				) КАК ХозрасчетныйОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ХозрасчетныйОбороты.Счет,
	|		0,
	|		0,
	|		0,
	|		ХозрасчетныйОбороты.СуммаОборотДт,
	|		&ПериодСобытия,
	|		&НачалоПериодаСобытия
	|	ИЗ
	|		РегистрБухгалтерии.Хозрасчетный.Обороты(
	|				&НачалоВыполнения,
	|				,
	|				,
	|				Счет В (&СчетаУчета),
	|				&ВидыСубконто,
	|				Организация В (&Организация)
	|					И Субконто1 В (&ВидыНалоговыхПлатежей),
	|				КорСчет В (&СчетаДС),
	|				) КАК ХозрасчетныйОбороты) КАК СвернутыеОстаткиОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	СвернутыеОстаткиОбороты.СчетУчета,
	|	СвернутыеОстаткиОбороты.НачалоПериодаСобытия,
	|	СвернутыеОстаткиОбороты.ПериодСобытия";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьИндикатор(ЭтоТекущаяЗадача, КУплатеДолг, КУплатеТекущий)
	
	Если Не ЭтоТекущаяЗадача Тогда 
		Индикатор = ?(КУплатеДолг = 0, ЦветаИндикаторов().Зеленый, ЦветаИндикаторов().Красный);
	ИначеЕсли КУплатеТекущий = 0 И КУплатеДолг = 0 Тогда
		Индикатор = ЦветаИндикаторов().Зеленый;
	ИначеЕсли КУплатеДолг = 0 И КУплатеТекущий > 0 Тогда
		Индикатор = ЦветаИндикаторов().Желтый;
	Иначе
		Индикатор = ЦветаИндикаторов().Красный;
	КонецЕсли;
	
	Возврат Индикатор;
	
КонецФункции

Функция ПодобратьСчетаУчетаПоЗадаче(КодЗадачи, ТаблицаСоСчетамиУчета)
	
	СтрокиСчетовПоЗадаче = ТаблицаСоСчетамиУчета.НайтиСтроки(Новый Структура("КодЗадачи", КодЗадачи));
	Результат = ОбщегоНазначения.ВыгрузитьКолонку(СтрокиСчетовПоЗадаче, "СчетУчета", Истина);
	
	Возврат Результат;
	
КонецФункции

Функция ТекстОбъединениеЗапросов()
	Возврат "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	
КонецФункции

Функция ПолучитьСуммыНалогов(ОбрабатываемыеЗадачи, Организация, ТекущийДень, СчетаУчетаДС, ВыполнитьЗапрос = Истина)
	
	ПоказателиГруппировки = "ПериодСобытия,НачалоПериодаСобытия,НачалоВыполнения";
	
	ЗадачиПоПериодам = ОбрабатываемыеЗадачи.Скопировать(, ПоказателиГруппировки);
	ЗадачиПоПериодам.Свернуть(ПоказателиГруппировки);
	ЗадачиПоПериодам.Колонки.Добавить("СчетаУчета", Новый ОписаниеТипов("Массив"));
	
	Отбор = Новый Структура(ПоказателиГруппировки);
	Для Каждого СтрокаТаблицы Из ЗадачиПоПериодам Цикл
		ЗаполнитьЗначенияСвойств(Отбор, СтрокаТаблицы);
		НайденныеЗадачи = ОбрабатываемыеЗадачи.НайтиСтроки(Отбор);
		Для Каждого Задача Из НайденныеЗадачи Цикл
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СтрокаТаблицы.СчетаУчета, Задача.СчетаУчета, Истина);
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидыНалоговыхПлатежей", Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей());
	Запрос.УстановитьПараметр("СчетаДС", СчетаУчетаДС);
	Запрос.УстановитьПараметр("ВидыСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	
	ОбщийТекст = Новый Массив;
	Счетчик = 0;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	Для каждого Задача Из ЗадачиПоПериодам Цикл
		
		ДинамическиеПараметры = ДинамическиеПараметрыЗапроса(ПоказателиГруппировки, Счетчик);
		
		ТекстЗапроса = ШаблонЗапросаОстатковОборотов();
		
		Если Задача.НачалоВыполнения > ТекущийДень Тогда
			// Для оптимизации удалим третий запрос в объединении на получение сумм оплат по задачам, т.к. срок оплаты ещё не наступил.
			СхемаЗапроса.УстановитьТекстЗапроса(ТекстЗапроса);
			СхемаЗапроса.ПакетЗапросов[0].Операторы[0].Источники[0].Источник.Запрос.Операторы.Удалить(2);
			ТекстЗапроса = СхемаЗапроса.ПолучитьТекстЗапроса();
		КонецЕсли;
		
		Для каждого ПараметрЗапроса Из ДинамическиеПараметры Цикл
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&" + ПараметрЗапроса.Ключ, "&" + ПараметрЗапроса.Значение);
			Запрос.УстановитьПараметр(ПараметрЗапроса.Значение, Задача[ПараметрЗапроса.Ключ]); 
		КонецЦикла;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СчетаУчета", "&СчетаУчета" + Счетчик);
		Запрос.УстановитьПараметр("СчетаУчета" + Счетчик, Задача.СчетаУчета);
		
		ОбщийТекст.Добавить(ТекстЗапроса);
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	Запрос.Текст = СтрСоединить(ОбщийТекст, ТекстОбъединениеЗапросов());
	Если ВыполнитьЗапрос Тогда
		Возврат Запрос.Выполнить().Выгрузить();
	Иначе
		Возврат Запрос;
	КонецЕсли;
	
КонецФункции

Функция ИзвлечьСуммыПоЗадаче(СчетУчета, СтрокаЗадачи, СуммыНалогов)
	
	// 1. Выбираем из таблицы СуммыНалогов остатки обороты по данному счету учета в отдельные переменные.
	
	СуммаОстаток = 0;
	СуммаНачислено = 0;
	СуммаУплачено = 0;
	СуммаНачисленоТекущий = 0;
	
	Для каждого СуммаНаСчете Из СуммыНалогов Цикл
		
		ЭтоСчетЗадачи = (СчетУчета = СуммаНаСчете.СчетУчета);
		
		Если ЭтоСчетЗадачи И СтрокаЗадачи.ПериодСобытия = СуммаНаСчете.ПериодСобытия
			И СтрокаЗадачи.НачалоПериодаСобытия = СуммаНаСчете.НачалоПериодаСобытия Тогда
			
			СуммаОстаток = СуммаОстаток + СуммаНаСчете.СуммаОстаток;
			СуммаНачислено = СуммаНачислено + СуммаНаСчете.СуммаНачислено;
			СуммаНачисленоТекущий = СуммаНачисленоТекущий + СуммаНаСчете.СуммаНачисленоТекущий;
			СуммаУплачено = СуммаУплачено + СуммаНаСчете.СуммаУплачено;
		КонецЕсли;
		
	КонецЦикла;
	
	// 2. Распределяем полученные остатки и обороты на уплату за текущий отчетный период и уплату долга за прошедшие периоды,
	// чтобы правильно сформировать цвет индикатора. Все платежи начиная с даты НачалоПериодаСобытия относим сначала на погашение
	// текущего налога, а затем - на погашение задолженности. Сначала погашаем текущее начисление, т.к. все помощники  по уплате
	// налога открываются с периодом текущего платежа.
	//
	// При этом, например, обрабатываются следующие нестандартные ситуации:
	//
	// А) Дано: Начислено текущий (СуммаНачисленоТекущий) - 15 000р., долг на начало периода (ОстатокНаНачалоПериода) - 10 000р., уплачено (СуммаУплачено) - 18 000р. 
	//    Результат: КУплатеТекущий - 0, КУплатеДолг - 7 0000 р.
	//
	// Б) Дано: Начислено текущий (СуммаНачисленоТекущий) - 15 000р., переплата на начало периода (ОстатокНаНачалоПериода) - 2 000р., уплачено (СуммаУплачено) - 12 000р. 
	//    Результат: КУплатеТекущий - 1 000, КУплатеДолг - 0 р.
	
	КУплатеДолг = 0;
	КУплатеТекущий = 0;
	
	Если СтрокаЗадачи.ЭтоТекущаяЗадача Тогда
		
		ОстатокНаНачалоПериода = СуммаОстаток + СуммаНачислено - СуммаУплачено;
		
		КУплатеТекущий = СуммаНачисленоТекущий - Мин(СуммаНачисленоТекущий, СуммаУплачено);
		КУплатеДолг    = ?(ОстатокНаНачалоПериода < 0, - ОстатокНаНачалоПериода, 0);
		
		ПереплатаТекущая = Макс(СуммаУплачено - СуммаНачисленоТекущий, 0);
		ПереплатаДолг    = ?(ОстатокНаНачалоПериода > 0, ОстатокНаНачалоПериода, 0);
		
		КУплатеТекущий = КУплатеТекущий - ПереплатаТекущая - ПереплатаДолг;
		Если КУплатеТекущий < 0 Тогда 
			// Переплата, погашаем долг.
			КУплатеДолг = КУплатеДолг + КУплатеТекущий;
		КонецЕсли;
		
		КУплатеДолг    = ?(КУплатеДолг > 0, КУплатеДолг, 0);
		КУплатеТекущий = ?(КУплатеТекущий > 0, КУплатеТекущий, 0);
		
	Иначе
		КУплатеДолг = СуммаОстаток + СуммаНачислено;
		КУплатеДолг = ? (КУплатеДолг < 0, - КУплатеДолг, 0);
	КонецЕсли;
	
	СуммыПоЗадаче = Новый Структура;
	СуммыПоЗадаче.Вставить("КУплатеДолг",    КУплатеДолг);
	СуммыПоЗадаче.Вставить("КУплатеТекущий", КУплатеТекущий);
	
	Возврат СуммыПоЗадаче;
	
КонецФункции

Функция ПолучитьПараметрыИндикатора(СчетУчета, СтрокаЗадачи, СуммыНалогов, ТекущийДень, Организация)
	
	// Суммы начислений и остатков могут быть как за текущие периоды , так и за последующие будущие периоды.
	// Кроме того суммы оплат могут быть за текущие и будущие периоды, однако их мы не можем достоверно отнести к текущим или будущим оплатам.
	// Поэтому в первую очередь погашаем будущие и текущие платежи, затем прошлые платежи.
	// Во всех случаях отрицательная сумма означает задолженность по налогу, положительная сумма означает переплату.
	СтруктураСумм = ИзвлечьСуммыПоЗадаче(СчетУчета, СтрокаЗадачи, СуммыНалогов);
		
	Индикатор = ПолучитьИндикатор(СтрокаЗадачи.ЭтоТекущаяЗадача, СтруктураСумм.КУплатеДолг, СтруктураСумм.КУплатеТекущий);
	
	ПараметрыИндикатора = Новый Структура;
	ПараметрыИндикатора.Вставить("Индикатор", Индикатор);
	ПараметрыИндикатора.Вставить("КУплатеДолг", СтруктураСумм.КУплатеДолг);
	ПараметрыИндикатора.Вставить("КУплатеТекущий", СтруктураСумм.КУплатеТекущий);
	
	Возврат ПараметрыИндикатора;
	
КонецФункции

#КонецОбласти

#Область АлгоритмыВзносовИП

// Алгоритм предназначен для анализа уплаты всех фиксированных взносов за текущий год, 
// Алгоритм берет остатки на конец предыдущего года, за исключением остатков по взносам с доходов, которые берутся другим алгоритмом
// Затем прибавляет к остаткам регламентную сумму начисления за текущий период и  и вычитает сумм уплат с начала года.
// Таким образом получается текущий остаток, который можно сравнивать с текущими начислениями для формирования корректного индикатора.
//
Функция ПрименитьАлгоритмДляВзносовИП(НалоговыеИндикаторы, ЗадачиПоНалогам, Параметры, ТаблицаСоСчетамиУчета, СчетаУчетаДС)
	
	Организация = Параметры.Организация;
	ТекущийДень = Параметры.ТекущийДень;
	
	ЗадачаПоВзносам = Неопределено;
	Для каждого Задача Из ЗадачиПоНалогам Цикл 
		Если ЭтоЗадачаФиксированныхВзносовИП(Задача.КодЗадачи, Задача.КодПравила) Тогда
			ЗадачаПоВзносам = Задача;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗадачаПоВзносам = Неопределено  Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СчетаВзносовИП = Новый Массив;
	Для каждого Задача Из ТаблицаСоСчетамиУчета Цикл 
		Если ЭтоЗадачаВзносовИП(Задача.КодЗадачи) Тогда
			СчетаВзносовИП.Добавить(Задача.СчетУчета);
		КонецЕсли;
	КонецЦикла;
	
	ВидыНалоговыхПлатежей = Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей();
	Если Параметры.УпрощеннаяНулеваяОтчетность Тогда
		ВидыНалоговыхПлатежей.Добавить(Перечисления.ВидыПлатежейВГосБюджет.ПениАкт);
		ВидыНалоговыхПлатежей.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Штраф);
	КонецЕсли;
	
	ИндексВзносовСДоходов = ВидыНалоговыхПлатежей.Найти(Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела);
	Если ИндексВзносовСДоходов <> Неопределено Тогда
		ВидыНалоговыхПлатежей.Удалить(ИндексВзносовСДоходов);
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстаток,
	|	0 КАК СуммаУплачено
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Период,
	|			Счет В (&СчетаВзносовИП),
	|			,
	|			Организация = &Организация
	|				И Субконто1 В (&ВидыНалоговыхПлатежей)) КАК ХозрасчетныйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0)
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоВыполнения,
	|			,
	|			,
	|			Счет В (&СчетаВзносовИП),
	|			&ВидыСубконто,
	|			Организация = &Организация
	|				И Субконто1 В (&ВидыНалоговыхПлатежей),
	|			КорСчет В (&СчетаУчетаДС),
	|			) КАК ХозрасчетныйОбороты");
	Запрос.УстановитьПараметр("Период", Новый Граница(НачалоГода(ТекущийДень) - 1, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НачалоВыполнения", НачалоГода(ТекущийДень));
	Запрос.УстановитьПараметр("СчетаВзносовИП", СчетаВзносовИП);
	Запрос.УстановитьПараметр("СчетаУчетаДС", СчетаУчетаДС);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидыНалоговыхПлатежей", ВидыНалоговыхПлатежей);
	Запрос.УстановитьПараметр("ВидыСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	
	СуммаОстаток = 0;
	СуммаУплачено = 0;
	Выборка = Запрос.Выполнить().Выбрать();
	// Отрицательная сумма означает задолженность по налогу, положительная сумма означает переплату.
	Пока Выборка.Следующий() Цикл
		СуммаОстаток = СуммаОстаток + Выборка.СуммаОстаток;
		СуммаУплачено = СуммаУплачено + Выборка.СуммаУплачено;
	КонецЦикла;
	
	ВзносыИП = УчетСтраховыхВзносовИП.ФиксированныеСтраховыеВзносыКУплате(
		Организация, ЗадачаПоВзносам.ПериодСобытия, ЗадачаПоВзносам.Периодичность);
		
	ОсталосьТекущихВзносовИП = ВзносыИП.СуммаВзносаПФР + ВзносыИП.СуммаВзносаФСС + ВзносыИП.СуммаВзносаФФОМС;
	
	ТекущиеВзносыИПУплачено = ВзносыИП.СуммаВзносаПФРУплачено + ВзносыИП.СуммаВзносаФССУплачено
		+ ВзносыИП.СуммаВзносаФФОМСУплачено;
		
	ОстатокЗаВычетомТекущейУплаты = СуммаОстаток + СуммаУплачено - ТекущиеВзносыИПУплачено;
	КУплатеДолг = ?(ОстатокЗаВычетомТекущейУплаты < 0, -ОстатокЗаВычетомТекущейУплаты, 0);
	
	ЭтоИПНулевка = УчетСтраховыхВзносовИП.ЭтоИПНулевка(Организация);
	
	// Если индикатор зеленый, то состояние помощника должно быть "Все оплачено".
	Если (КУплатеДолг = 0
		И ОсталосьТекущихВзносовИП = 0
		И ЭтоИПНулевка
		И РегистрыСведений.СостоянияПомощникаОплатыСтраховыхВзносовИП.ПолучитьСостояниеПомощника(Организация).Состояние
			<> Перечисления.СостоянияПомощникаОплатыСтраховыхВзносовИП.ВсеВзносыОплачены) Тогда
		
		Данные = Новый Структура;
		Данные.Вставить("Организация", Организация);
		Данные.Вставить("Состояние", Перечисления.СостоянияПомощникаОплатыСтраховыхВзносовИП.ВсеВзносыОплачены);
		РегистрыСведений.СостоянияПомощникаОплатыСтраховыхВзносовИП.СохранитьСостояниеПомощника(Данные);
		
	КонецЕсли;
	
	НоваяСтрока = НалоговыеИндикаторы.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗадачаПоВзносам);
	Если Не ЭтоИПНулевка И ТребуетсяТестПоНалогамИВзносамПрошлыхПериодов(Организация, ЗадачаПоВзносам.КодЗадачи) Тогда
		Новаястрока.Индикатор = ЦветаИндикаторов().Желтый;
		НоваяСтрока.НуженПомощникНалоговПрошлыхПериодов = Истина;
	Иначе
		НоваяСтрока.Индикатор = ПолучитьИндикатор(Истина, КУплатеДолг, ОсталосьТекущихВзносовИП);
	КонецЕсли;
	НоваяСтрока.КУплатеТекущий = ОсталосьТекущихВзносовИП;
	НоваяСтрока.КУплатеДолг = КУплатеДолг;
	
	ЭтоЕжеквартальныеВзносы = (ЗадачаПоВзносам.Периодичность = Перечисления.Периодичность.Квартал);
	Если ЭтоЕжеквартальныеВзносы Тогда
		НоваяСтрока.НачалоПериодаСобытия = НачалоГода(НоваяСтрока.НачалоПериодаСобытия);
		НоваяСтрока.ПериодСобытия = КонецГода(НоваяСтрока.ПериодСобытия);
		НоваяСтрока.Срок = КонецГода(НоваяСтрока.Срок);
	КонецЕсли;
	
	Возврат НоваяСтрока;
	
КонецФункции

// Алгоритм предназначен для анализа уплаты фиксированных взносов с доходов за завершившиеся отчетные годы. 
// Работает аналогично алгоритму для анализа фиксированных взносов ИП
//
Процедура ПрименитьАлгоритмДляВзносовИПСДоходов(НалоговыеИндикаторы, ЗадачиПоНалогам, Организация, ТекущийДень, ИндикаторВзносовИП, СчетаУчетаДС)
	
	ЗадачаПоВзносам = Неопределено;
	Для каждого Задача Из ЗадачиПоНалогам Цикл 
		Если ЭтоЗадачаВзносовСДоходовИП(Задача.КодЗадачи, Задача.КодПравила) Тогда
			ЗадачаПоВзносам = Задача;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗадачаПоВзносам = Неопределено  Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ШаблонЗапросаОстатковОборотов();
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидыНалоговыхПлатежей", Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела);
	Запрос.УстановитьПараметр("СчетаДС", СчетаУчетаДС);
	Запрос.УстановитьПараметр("ВидыСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	Запрос.УстановитьПараметр("СчетаУчета", ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП);
	Запрос.УстановитьПараметр("НачалоВыполнения", ЗадачаПоВзносам.НачалоВыполнения);
	Запрос.УстановитьПараметр("ПериодСобытия", ЗадачаПоВзносам.ПериодСобытия);
	Запрос.УстановитьПараметр("НачалоПериодаСобытия", ЗадачаПоВзносам.НачалоПериодаСобытия);
	
	СуммыНалогов = Запрос.Выполнить().Выгрузить();
	
	Если ЗначениеЗаполнено(ИндикаторВзносовИП)
		И ИндикаторВзносовИП.Периодичность = Перечисления.Периодичность.Квартал Тогда
		КонецПериодаАнализаДоходов = КонецКвартала(ТекущийДень);
	Иначе
		КонецПериодаАнализаДоходов = КонецГода(ТекущийДень);
	КонецЕсли;
	
	СтруктураДоходов = УчетСтраховыхВзносовИП.СтруктураДоходовПоВидамДеятельности(
		Организация, НачалоГода(ТекущийДень), КонецПериодаАнализаДоходов);
		
	ВзносыСДоходов = УчетСтраховыхВзносовИП.СтраховыеВзносыСДоходовКУплате(
		Организация,  НачалоГода(ТекущийДень), СтруктураДоходов, Ложь);
		
	// Если есть взносы за текущий год, то нужно вычесть суммы оплат взносов текущего года из конечных остатков и уплат для получения корректного индикатора, т.к.
	// эти суммы относятся к следующему году. Затем в функции ПолучитьИндикатор() мы обратно добавляем эти суммы.
	ТекущиеВзносы = ?(ВзносыСДоходов.СуммаВзносаПФРсДоходов > 0, ВзносыСДоходов.СуммаВзносаПФРсДоходов, 0);
	Если ТекущиеВзносы > 0 Тогда
		СтрокаТекНалога = СуммыНалогов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТекНалога, ЗадачаПоВзносам);
		СтрокаТекНалога.СчетУчета = ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП;
		СтрокаТекНалога.СуммаНачислено = 0;
		СтрокаТекНалога.СуммаНачисленоТекущий = 0;
		СтрокаТекНалога.СуммаУплачено = - ВзносыСДоходов.СуммаВзносаПФРсДоходовУплачено;
		СтрокаТекНалога.СуммаОстаток = - ВзносыСДоходов.СуммаВзносаПФРсДоходовУплачено;
	КонецЕсли;
	
	СуммыПоЗадаче = ИзвлечьСуммыПоЗадаче(ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП, ЗадачаПоВзносам, СуммыНалогов);
	Индикатор = ПолучитьИндикатор(Истина, СуммыПоЗадаче.КУплатеДолг, СуммыПоЗадаче.КУплатеТекущий + ТекущиеВзносы);
	
	КУплатеТекущий = СуммыПоЗадаче.КУплатеТекущий + ВзносыСДоходов.СуммаВзносаПФРсДоходов;
	КУплатеТекущий = Макс(КУплатеТекущий, 0);
	Если Не ЗначениеЗаполнено(ИндикаторВзносовИП) Или СуммыПоЗадаче.КУплатеТекущий > 0 Тогда
		НоваяСтрока = НалоговыеИндикаторы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗадачаПоВзносам);
		НоваяСтрока.Индикатор = Индикатор;
		НоваяСтрока.КУплатеТекущий = КУплатеТекущий;
		НоваяСтрока.КУплатеДолг = СуммыПоЗадаче.КУплатеДолг;
	ИначеЕсли ЗначениеЗаполнено(ИндикаторВзносовИП) Тогда
		// Объединяем задачи по фиксированным взносам и взносам с доходов в одну, т.к. в этом случае используется один помощник.
		ИндикаторВзносовИП.КУплатеТекущий = ИндикаторВзносовИП.КУплатеТекущий + КУплатеТекущий;
		ИндикаторВзносовИП.КУплатеДолг = ИндикаторВзносовИП.КУплатеДолг + СуммыПоЗадаче.КУплатеДолг;
		
		ИндикаторыВзносов = Новый Массив(2);
		ИндикаторыВзносов[0] = ИндикаторВзносовИП.Индикатор;
		ИндикаторыВзносов[1] = Индикатор;
		ИндикаторВзносовИП.Индикатор = СамыйКритичныйИндикатор(ИндикаторыВзносов);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область АлгоритмыНПД

// Алгоритм предназначен для получения данных о налоге на профессиональный доход.
//
Процедура ПрименитьАлгоритмДляНПД(НалоговыеИндикаторы, ЗадачиПоНалогам, Организация, ТекущийДень, СчетаУчетаДС)
	
	ЗадачаПоНПД = Неопределено;
	Для каждого Задача Из ЗадачиПоНалогам Цикл 
		Если ЭтоЗадачаНалогНаПрофессиональныйДоход(Задача.КодЗадачи) Тогда
			ЗадачаПоНПД = Задача;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗадачаПоНПД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ДоступнаИнтеграцияСПлатформойСамозанятые") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеНалога = ДанныеНалогаНаПрофессиональныйДоход(Организация, Задача.ПериодСобытия);
	
	КУплатеТекущий = ДанныеНалога.СуммаНалога;
	КУплатеТекущий = Макс(КУплатеТекущий, 0);
	КУплатеДолг    = ДанныеНалога.СуммаДолга;
	
	Если ДанныеНалога.Ошибка Тогда
		Индикатор = ЦветаИндикаторов().Желтый;
	Иначе
		Индикатор = ПолучитьИндикатор(Истина, КУплатеДолг, КУплатеТекущий);
	КонецЕсли;
	
	НоваяСтрока = НалоговыеИндикаторы.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗадачаПоНПД);
	НоваяСтрока.Индикатор      = Индикатор;
	НоваяСтрока.КУплатеТекущий = КУплатеТекущий;
	НоваяСтрока.КУплатеДолг    = КУплатеДолг;
	
КонецПроцедуры

Функция ДанныеНалогаНаПрофессиональныйДоход(Организация, Период)
	
	СтатусыЗапросов = ИнтеграцияСПлатформойСамозанятыеКлиентСервер.СтатусыЗапросов();
	
	ПараметрыВзаимодействия = 
		ИнтеграцияСПлатформойСамозанятыеКлиентСервер.НовыеПараметрыМетодаВзаимодействия("СостояниеЛицевогоСчета");
	ПараметрыВзаимодействия.Организация = Организация;
	ОтветСервиса = ИнтеграцияСПлатформойСамозанятые.ВыполнитьМетодВзаимодействия(ПараметрыВзаимодействия);
	
	Результат = Новый Структура();
	Результат.Вставить("СуммаНалога", 0);
	Результат.Вставить("СуммаДолга",  0);
	Результат.Вставить("Ошибка",      ОтветСервиса.Ошибка);
	
	Если НЕ ОтветСервиса.Ошибка Тогда
		
		Для Повтор = 1 По 15 Цикл
			
			Ответ = ИнтеграцияСПлатформойСамозанятые.ПолучитьРезультатВыполнения(ОтветСервиса);
			
			Если Ответ.Статус = СтатусыЗапросов.Выполнено Тогда
				
				Если Ответ.Результат = Неопределено
					ИЛИ ТипЗнч(Ответ.Результат) <> Тип("Структура") Тогда
					Результат.Вставить("Ошибка", Истина);
					Прервать;
				КонецЕсли;
				Если Ответ.Результат.Свойство("ОбщаяСуммаНеоплаченныхПлатежей") Тогда
					Результат.СуммаНалога = Ответ.Результат.ОбщаяСуммаНеоплаченныхПлатежей - Ответ.Результат.СуммаЗадолженности;
					Результат.СуммаДолга  = Ответ.Результат.СуммаЗадолженности;
				КонецЕсли;
				
				Прервать;
				
			ИначеЕсли Ответ.Статус = СтатусыЗапросов.Выполняется Тогда
				ОбщегоНазначенияБТС.Пауза(Повтор);
			Иначе
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаполнитьЖелтыйБлокНалогНаПрофессиональныйДоход(Блок, СтрокиИндикатора, ЭтоНалог, КодЗадачи, ИмяЗадачи, ПараметрыМонитора)
	
	Блок = БазовыйБлок(ПараметрыМонитора);
	Блок.ЦветФона = ПараметрыМонитора.ЦветЖелтыйБлок;
	
	ИтогКУплатеТекущий = 0;
	Для Каждого Индикатор Из СтрокиИндикатора Цикл
		ИтогКУплатеТекущий = ИтогКУплатеТекущий + Индикатор.КУплатеТекущий;
	КонецЦикла;
	
	Если ИтогКУплатеТекущий = 0 Тогда
		Строка0 = Нстр("ru = 'Нет данных о задолженности'");
		Блок.Строка0 = Новый ФорматированнаяСтрока(Строка0, ПараметрыМонитора.ШрифтЗаголовков);
		ДобавитьСтроку1(Блок, Нстр("ru = 'Связь с сервером ФНС отсутствует'"));
	Иначе
		Строка0 = Нстр("ru = 'Пора оплатить %1 руб.'");
		Строка0 = Новый ФорматированнаяСтрока(Строка0, ПараметрыМонитора.ШрифтЗаголовков);
		Блок.Строка0 = ОтформатироватьСтрокуСуммы(Строка0, ИтогКУплатеТекущий);
		ДобавитьСтроку1(Блок, ОписаниеТекущегоНалогаОтчета(СтрокиИндикатора, ЭтоНалог, ПараметрыМонитора));
		НаименованиеСсылки = ОписаниеСсылкиТекущегоНалогаОтчета(Индикатор, ЭтоНалог, ПараметрыМонитора);
		ПараметрыСсылки = СФормироватьПараметрыСсылки(Индикатор, КодЗадачи, ЭтоНалог, ПараметрыМонитора);
		ДобавитьСтрокуСоСсылкой(Блок, НаименованиеСсылки, ПараметрыСсылки);
	КонецЕсли;
	
	Возврат Блок;
	
КонецФункции

#КонецОбласти

#Область АлгоритмПоОтчетам

// Алгоритм проверяет наличие и статусы отчетности в документах, связанных с отчетностью.
// Проверяются отчеты по правилам, которые включены организацией (есть в расписании). Подробнее см. СформироватьТекущиеПредстоящиеЗадачи()
// Для каждого правила по отчету подбираются неархивные задачи списка задач
// за последние 3 года (срок исковой давности), включая текущий период.
// Задачи, перемещенные в архив, считаются выполненными, соответствующие им отчеты - сданными.
// Отчет по неархивной задаче считается сданным, если ему присвоен соответствующий статус - см. ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусСданоСтрокой().
// Статус может быть присвоен:
//   - автоматически, если подключена 1С-Отчетность и отчет принят контролирующим органом;
//   - пользователем вручную, если 1С-Отчетность не используется или отчет не отправлялся в контролирующий орган.
//
Процедура ПрименитьАлгоритмПоОтчетам(ОтчетныеИндикаторы, ЗадачиПоОтчетам, Организация, ТекущийДень, ЭтоНулевка)
	
	Если ЗадачиПоОтчетам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗадачиПоОтчетам.Индексы.Добавить("Правило");
	
	// Для правил, имеющихся в расписании ЗадачиПоОтчетам, ищем в списке задач незакрытые отчетные задачи за последние 3 года.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВключенныеПравила", ОбщегоНазначения.ВыгрузитьКолонку(ЗадачиПоОтчетам, "Правило", Истина));
	Запрос.УстановитьПараметр("ИсключаемыеПравила", ИсключаемыеПравила());
	Запрос.УстановитьПараметр("НачалоОбзора", НачалоОбзораОтчетности(Организация, ТекущийДень));
	Запрос.УстановитьПараметр("ТекущийДень", ТекущийДень);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Правила.Владелец.Код КАК КодЗадачи,
	|	Правила.Код КАК КодПравила,
	|	Правила.Ссылка КАК Правило,
	|	Правила.Владелец КАК Владелец
	|ПОМЕСТИТЬ ПоддерживаемыеПравила
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК Правила
	|ГДЕ
	|	Правила.Ссылка В(&ВключенныеПравила)
	|	И НЕ Правила.Ссылка В (&ИсключаемыеПравила)
	|	И Правила.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Отчет)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиБухгалтера.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка) КАК РегистрацияВНалоговомОргане,
	|	ЗадачиБухгалтера.Правило КАК Правило,
	|	ЗадачиБухгалтера.Срок КАК Срок,
	|	ЗадачиБухгалтера.Периодичность КАК Периодичность,
	|	ЗадачиБухгалтера.ПериодСобытия КАК ПериодСобытия,
	|	ПоддерживаемыеПравила.КодЗадачи КАК КодЗадачи,
	|	ПоддерживаемыеПравила.КодПравила КАК КодПравила,
	|	ПоддерживаемыеПравила.Владелец КАК Владелец
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоддерживаемыеПравила КАК ПоддерживаемыеПравила
	|		ПО ЗадачиБухгалтера.Правило = ПоддерживаемыеПравила.Правило
	|ГДЕ
	|	ЗадачиБухгалтера.Организация = &Организация
	|	И ЗадачиБухгалтера.ПериодСобытия >= &НачалоОбзора
	|	И ЗадачиБухгалтера.ПериодСобытия < &ТекущийДень
	|	И НЕ ЗадачиБухгалтера.ВАрхиве";
	
	ВсеЗадачи = Запрос.Выполнить().Выгрузить();
	
	// Проверяем наличие отчетов и статусы имеющихся в наличии.
	// Для задач с отсутствующими отчетами проверяем сроки.
	// По результатам проверок устанавливаем индикатор для каждого правила.
	
	ВыполнениеОтчетныхЗадач = ВыполнениеЗадачБухгалтера.ВыполнениеЗадачПоПодготовкеОтчетов(ВсеЗадачи);
	
	СтатусБРОСдано = ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусСданоСтрокой();
	
	ДатаНачалаПроверкиСтатусовНулевойОтчетности = '00010101';
	Если ЭтоНулевка Тогда
		ДатаНачалаПроверкиСтатусовНулевойОтчетности = ДатаПодключения1СОтчетности(Организация);
	КонецЕсли;
	
	ГраницаОтчетностиПрошлыхПериодов = ПомощникиПоУплатеНалоговИВзносов.ГраницаОтчетностиПрошлыхПериодов(Организация);
	ОтчетностьПрошлыхПериодовПоТесту = РегистрыСведений.РезультатыПроверкиНалоговОтчетовПрошлыхПериодов.ДобавленныеПериоды(Организация);
	
	ПравилаОтчетов = ОбщегоНазначения.ВыгрузитьКолонку(ВсеЗадачи, "Правило", Истина);
	Для Каждого Правило Из ПравилаОтчетов Цикл
		
		ОтборПравило = Новый Структура("Правило", Правило);
		
		СтрокиРасписания = ЗадачиПоОтчетам.НайтиСтроки(ОтборПравило);
		СтрокаРасписанияПоОтчету = СтрокиРасписания[0];
		
		ЭтоТекущаяЗадача = СтрокаРасписанияПоОтчету.ЭтоТекущаяЗадача;
		
		// Проходимся по задачам за каждый отчетный период -
		// выявляем состояние текущего отчета и наличие просроченных.
		
		ЗадачиПоПравилу = ВсеЗадачи.Скопировать(ОтборПравило);
		ЗадачиПоПравилу.Сортировать("ПериодСобытия Убыв");
		
		ТекущийОтчетСдан      = Ложь;
		ТекущийОтчетЕстьВБазе = Ложь;
		СтатусТекущегоОтчета  = "";
		
		ПросроченныеОтчеты = НовыйПросроченныеОтчеты();
		ОтчетыПрошлыхПериодов = НовыйОтчетыПрошлыхПериодов();
		
		Для Каждого ЗадачаПоПравилу Из ЗадачиПоПравилу Цикл
			
			ОтчетСоздан  = Ложь;
			СтатусОтчета = "";
			
			ОтборПравилоПериод = Новый Структура("Правило, ПериодСобытия", ЗадачаПоПравилу.Правило, ЗадачаПоПравилу.ПериодСобытия);
			СтрокиВыполнения = ВыполнениеОтчетныхЗадач.НайтиСтроки(ОтборПравилоПериод);
			
			Если СтрокиВыполнения.Количество() > 0 Тогда
				ВыполнениеЗадачиПоПравилу = СтрокиВыполнения[0];
				ОтчетСоздан = ВыполнениеЗадачиПоПравилу.Документы.Количество() > 0;
				
				Если ОтчетСоздан Тогда
					// Значение статуса определяем по самому последнему отчету.
					// В переданной таблице сохраненные отчеты отсортированы по убыванию даты создания - надо взять первый.
					АктуальныйОтчет = ВыполнениеЗадачиПоПравилу.Документы[0];
					
					// В режиме Нулевка пользователи начинают работать без 1С-Отчетности.
					// Отчеты создаются автоматически и пользователь их статусами не управляет.
					// Поэтому отчеты помещается в индикатор как сданные по факту своего наличия, без проверки статусов.
					// Если же пользователь Нулевки подключит 1С-Отчетность, статусы отчетов начнут учитываться.
					// Но для отчетов, созданных ранее даты подключения 1С-Отчетности, требуется сохранить старое поведение.
					Если ЭтоНулевка И АктуальныйОтчет.Дата < ДатаНачалаПроверкиСтатусовНулевойОтчетности Тогда
						СтатусОтчета = СтатусБРОСдано;
					Иначе
						СтатусОтчета = АктуальныйОтчет.Статус;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ОтчетСдан = (СтатусОтчета = СтатусБРОСдано);
			
			ЭтоТекущийОтчет = ЭтоТекущаяЗадача И ЗадачиПоПравилу.Индекс(ЗадачаПоПравилу) = 0;
			
			Если ЭтоТекущийОтчет Тогда
				ТекущийОтчетСдан      = ОтчетСдан;
				ТекущийОтчетЕстьВБазе = ОтчетСоздан;
				СтатусТекущегоОтчета  = СтатусОтчета;
			КонецЕсли;
			
			// Выявляем просроченные отчеты.
			Если ЗадачаПоПравилу.Срок < ТекущийДень И НЕ ОтчетСдан Тогда
				Если ЭтоОтчетностьПрошлыхПериодовПоТесту(ЗадачаПоПравилу, ОтчетностьПрошлыхПериодовПоТесту) Тогда
					ОтчетПрошлыхПериодов = ОтчетыПрошлыхПериодов.Добавить();
					ЗаполнитьЗначенияСвойств(ОтчетПрошлыхПериодов, ЗадачаПоПравилу);
					ОтчетПрошлыхПериодов.Статус = СтатусОтчета;
				Иначе
					ПросроченныйОтчет = ПросроченныеОтчеты.Добавить();
					ЗаполнитьЗначенияСвойств(ПросроченныйОтчет, ЗадачаПоПравилу);
					ПросроченныйОтчет.Статус = СтатусОтчета;
					ПросроченныйОтчет.ОтноситсяКПрошломуПериоду = ЗначениеЗаполнено(ГраницаОтчетностиПрошлыхПериодов)
						И ЗадачаПоПравилу.ПериодСобытия <= ГраницаОтчетностиПрошлыхПериодов;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		// Назначаем индикатор.
		
		НуженПомощникОтчетовПрошлыхПериодов = НужноПоказатьПомощникПрошлыхПериодов(
			Организация, СтрокаРасписанияПоОтчету.КодЗадачи);
		
		Индикатор = ЦветаИндикаторов().Зеленый;
		
		Если ПросроченныеОтчеты.Количество() = 0
			И ОтчетыПрошлыхПериодов.Количество() = 0 Тогда
			
			Если НуженПомощникОтчетовПрошлыхПериодов Тогда
				Индикатор = ЦветаИндикаторов().Желтый;
			Иначе
				// Просроченных отчетов нет, анализируем сроки текущего отчетного периода.
				Если СтрокаРасписанияПоОтчету.НачалоВыполнения > ТекущийДень Тогда
					// Отчет еще рано предоставлять, отображаем зеленый индикатор.
					Индикатор = ЦветаИндикаторов().Зеленый;
				ИначеЕсли ТекущийОтчетСдан Тогда
					Индикатор = ЦветаИндикаторов().Зеленый;
				ИначеЕсли Не ТекущийОтчетСдан Тогда
					Индикатор = ЦветаИндикаторов().Желтый;
				КонецЕсли;
			КонецЕсли;
		Иначе
			// Есть просроченные отчеты за предыдущие периоды.
			Индикатор = ЦветаИндикаторов().Красный;
		КонецЕсли;
		
		НоваяСтрока = ОтчетныеИндикаторы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасписанияПоОтчету);
		
		НоваяСтрока.ПросроченныеОтчеты    = ПросроченныеОтчеты;
		НоваяСтрока.ОтчетыПрошлыхПериодов = ОтчетыПрошлыхПериодов;
		НоваяСтрока.Индикатор             = Индикатор;
		НоваяСтрока.СтатусТекущегоОтчета  = СтатусТекущегоОтчета;
		НоваяСтрока.ТекущийОтчетСдан      = ТекущийОтчетСдан;
		НоваяСтрока.ТекущийОтчетЕстьВБазе = ТекущийОтчетЕстьВБазе;
		НоваяСтрока.НуженПомощникОтчетовПрошлыхПериодов = НуженПомощникОтчетовПрошлыхПериодов;
		
		// Удалим обработанную строку расписания.
		// Это позволит выявить часть расписания, для которой отсутствуют задачи бухгалтера.
		// Всем задачам этой части тоже требуется назначить индикатор.
		УдалитьСтрокиТаблицы(ЗадачиПоОтчетам, СтрокиРасписания);
		
	КонецЦикла;
	
	// Добавим индикаторы по задачам расписания, которых не оказалось в списке задач.
	// Такое может быть, когда срок первой задачи еще далеко "в будущем", или когда все задачи помещены в архив.
	Для каждого Задача Из ЗадачиПоОтчетам Цикл
		
		НоваяСтрока = ОтчетныеИндикаторы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Задача);
		
		НуженПомощникОтчетовПрошлыхПериодов = НужноПоказатьПомощникПрошлыхПериодов(
			Организация, Задача.КодЗадачи);
		
		Если НуженПомощникОтчетовПрошлыхПериодов Тогда
			НоваяСтрока.Индикатор = ЦветаИндикаторов().Желтый;
		Иначе
			НоваяСтрока.Индикатор = ЦветаИндикаторов().Зеленый;
		КонецЕсли;
		
		НоваяСтрока.ТекущийОтчетСдан = Ложь;
		НоваяСтрока.ТекущийОтчетЕстьВБазе = Ложь;
		НоваяСтрока.НуженПомощникОтчетовПрошлыхПериодов = НуженПомощникОтчетовПрошлыхПериодов;
		
	КонецЦикла;
	
КонецПроцедуры

Функция МинимальныйСрокПросроченногоОтчетаИндикатора(Индикатор)
	
	МинимальныйСрок = Неопределено;
	
	Для Каждого ПросроченныйОтчет Из Индикатор.ПросроченныеОтчеты Цикл
		
		Если Не ЗначениеЗаполнено(МинимальныйСрок) 
			Или ПросроченныйОтчет.Срок < МинимальныйСрок Тогда
			МинимальныйСрок = ПросроченныйОтчет.Срок;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ПросроченныйОтчет Из Индикатор.ОтчетыПрошлыхПериодов Цикл
		
		Если Не ЗначениеЗаполнено(МинимальныйСрок)
			Или ПросроченныйОтчет.Срок < МинимальныйСрок Тогда
			МинимальныйСрок = ПросроченныйОтчет.Срок;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МинимальныйСрок;
	
КонецФункции

Функция МаксимальныйСрокПросроченногоОтчетаИндикатора(Индикатор)
	
	МаксимальныйСрок = Неопределено;
	
	Для Каждого ПросроченныйОтчет Из Индикатор.ПросроченныеОтчеты Цикл
		
		Если Не ЗначениеЗаполнено(МаксимальныйСрок) 
			Или ПросроченныйОтчет.Срок > МаксимальныйСрок Тогда
			МаксимальныйСрок = ПросроченныйОтчет.Срок;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ПросроченныйОтчет Из Индикатор.ОтчетыПрошлыхПериодов Цикл
		
		Если Не ЗначениеЗаполнено(МаксимальныйСрок)
			Или ПросроченныйОтчет.Срок > МаксимальныйСрок Тогда
			МаксимальныйСрок = ПросроченныйОтчет.Срок;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МаксимальныйСрок;
	
КонецФункции

Функция ДатаПодключения1СОтчетности(Организация)
	
	ДатаПодключенияПоУмолчанию = '39991231'; // Возможно, когда-нибудь в далеком будущем пользователь оплатит и подключит 1С-Отчетность.
	
	УстановитьПривилегированныйРежим(Истина);
	ДатаПодключения1СОтчетности = ИнтерфейсыВзаимодействияБРОВызовСервера.ДатаПодключения1СОтчетности(Организация);
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ДатаПодключения1СОтчетности <> Неопределено Тогда
		Возврат ДатаПодключения1СОтчетности;
	КонецЕсли;
	
	Возврат ДатаПодключенияПоУмолчанию;
	
КонецФункции

Функция НовыйПросроченныеОтчеты()
	
	ПросроченныеОтчеты = Новый ТаблицаЗначений;
	ПросроченныеОтчеты.Колонки.Добавить("Срок", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ПросроченныеОтчеты.Колонки.Добавить("Статус", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ПросроченныеОтчеты.Колонки.Добавить("ПериодСобытия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ПросроченныеОтчеты.Колонки.Добавить("ОтноситсяКПрошломуПериоду", Новый ОписаниеТипов("Булево"));
	
	Возврат ПросроченныеОтчеты;
	
КонецФункции

Функция НовыйОтчетыПрошлыхПериодов()
	
	ОтчетыПрошлыхПериодов = Новый ТаблицаЗначений;
	ОтчетыПрошлыхПериодов.Колонки.Добавить("Срок", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ОтчетыПрошлыхПериодов.Колонки.Добавить("Статус", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	ОтчетыПрошлыхПериодов.Колонки.Добавить("ПериодСобытия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	
	Возврат ОтчетыПрошлыхПериодов;
	
КонецФункции

#КонецОбласти

#Область АлгоритмыНулеваяДеятельность

Процедура ДобавитьИндикаторНулевыеНалоги(НалоговыеИндикаторы, Организация, ТекущийДень)
	
	НоваяСтрока = НалоговыеИндикаторы.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбщиеРеквизитыИндикатораДеятельностьОтсутствует());
	
	НоваяСтрока.Индикатор      = ЦветаИндикаторов().Зеленый;
	НоваяСтрока.КУплатеДолг    = 0;
	НоваяСтрока.КУплатеТекущий = 0;
	
	// Остальные свойства индикатора не влияют на отображение блока, заполнять не требуется.
	
КонецПроцедуры

Процедура ДобавитьИндикаторНулеваяОтчетность(ОтчетныеИндикаторы, РазвернутыеИндикаторы, Организация, ТекущийДень)
	
	НоваяСтрока = ОтчетныеИндикаторы.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ОбщиеРеквизитыИндикатораДеятельностьОтсутствует());
	
	Индикатор = СамыйКритичныйИндикатор(РазвернутыеИндикаторы.ВыгрузитьКолонку("Индикатор"));
	
	НоваяСтрока.Индикатор = Индикатор;
	
	КритичныеИндикаторы = РазвернутыеИндикаторы.Скопировать(Новый Структура("Индикатор", Индикатор));
	
	// Определяем свойства сводной задачи по наиболее критичному из отчетов
	
	// для зеленого индикатора - ищем ближайшую задачу по началу периода события
	// для желтого индикатора - ничего не ищем, он показывает единообразную ссылку на Помощник, в котором своя логика критичности
	// для красного индикатора самая критичная - очевидно, задача с самым протухшим Сроком.
	
	Если Индикатор = ЦветаИндикаторов().Зеленый Тогда
		
		БлижайшаяЗадача       = Неопределено;
		НачалоБлижайшейЗадачи = Дата(3999, 1, 1);
		
		//Подбираем ближайшую предстоящую задачу.
		Для Каждого СтрокаИндикатора Из КритичныеИндикаторы Цикл
			Если СтрокаИндикатора.БудущаяЗадача.НачалоВыполнения < НачалоБлижайшейЗадачи Тогда
				НачалоБлижайшейЗадачи = СтрокаИндикатора.БудущаяЗадача.НачалоВыполнения;
				БлижайшаяЗадача = СтрокаИндикатора;
			КонецЕсли;
		КонецЦикла;
		
		Если БлижайшаяЗадача <> Неопределено Тогда
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, БлижайшаяЗадача, , "Владелец, Наименование");
			
			// Переопределим индикатор, если требуется запустить тест на просроченные отчеты
			ОсобенностиОтчета = Новый Структура("ФинансовыйПериод, РасширенныйПервыйНалоговыйПериод");
			ЗаполнитьЗначенияСвойств(ОсобенностиОтчета, БлижайшаяЗадача);
			
			Если НЕ ПомощникиПоУплатеНалоговИВзносов.ЭтоПервыйОтчетныйПериод(Организация, ТекущийДень, ОсобенностиОтчета)
				И НЕ РегистрыСведений.РезультатыПроверкиНалоговОтчетовПрошлыхПериодов.ПроверкаВыполнена(Организация) Тогда
				НоваяСтрока.Индикатор = ЦветаИндикаторов().Желтый;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Индикатор = ЦветаИндикаторов().Желтый Тогда
		
		//Подбираем ближайшую по крайнему сроку задачу.
		БлижайшаяЗадача = Неопределено;
		БлижайшийСрок   = Дата(3999, 1, 1);
		
		Для Каждого СтрокаИндикатора Из КритичныеИндикаторы Цикл
			Если СтрокаИндикатора.Срок < БлижайшийСрок Тогда
				БлижайшийСрок = СтрокаИндикатора.Срок;
				БлижайшаяЗадача = СтрокаИндикатора;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(БлижайшаяЗадача) Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, БлижайшаяЗадача, , "Владелец, Наименование, НуженПомощникОтчетовПрошлыхПериодов");
		КонецЕсли;
		
	ИначеЕсли Индикатор = ЦветаИндикаторов().Красный Тогда
		
		//Подбираем наиболее просроченную задачу.
		КритичнаяЗадача = Неопределено;
		КритичныйСрок   = ТекущийДень;
		
		Для Каждого СтрокаИндикатора Из КритичныеИндикаторы Цикл
			
			Для Каждого ПросроченныйОтчет Из СтрокаИндикатора.ПросроченныеОтчеты Цикл
				
				МинимальныйСрокПросроченногоОтчета = МинимальныйСрокПросроченногоОтчетаИндикатора(СтрокаИндикатора);
				Если ЗначениеЗаполнено(МинимальныйСрокПросроченногоОтчета)
					И МинимальныйСрокПросроченногоОтчета < КритичныйСрок Тогда
					КритичныйСрок = МинимальныйСрокПросроченногоОтчета;
					КритичнаяЗадача = СтрокаИндикатора;
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(КритичнаяЗадача) Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, КритичнаяЗадача, , "Владелец, Правило, Наименование");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ОбщиеРеквизитыИндикатораДеятельностьОтсутствует()
	
	Результат = Новый Структура;
	
	Результат.Вставить("Владелец", Справочники.ЗадачиБухгалтера.ПустаяСсылка());
	Результат.Вставить("Наименование", ИмяЗадачиНулеваяОтчетность());
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьЗадачуНулеваяОтчетность(ВключенныеЗадачи)
	
	НоваяСтрока = ВключенныеЗадачи.Вставить(0);
	
	НоваяСтрока.Владелец  = Справочники.ЗадачиБухгалтера.ПустаяСсылка();
	НоваяСтрока.ИмяЗадачи = ИмяЗадачиНулеваяОтчетность();
	НоваяСтрока.КодЗадачи = КодЗадачиНулеваяОтчетность();
	НоваяСтрока.Порядок   = 0;
	
КонецПроцедуры

#КонецОбласти

#Область АлгоритмыОтчетностиПрошлыхПериодов

Функция НужноПоказатьПомощникПрошлыхПериодов(Организация, КодЗадачи)
	
	КодЗадачиПомощникаПрошлыхПериодов = 
		Обработки.ПодготовкаОтчетностиПрошлыхПериодов.ИмяЗадачиПомощникаПодготовкиОтчетности();
	
	Если КодЗадачи = КодЗадачиПомощникаПрошлыхПериодов Тогда
		Возврат ТребуетсяТестОтчетностиПрошлыхПериодовПоУСН(Организация);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ВведеныНачальныеОстаткиПоУСН(Организация)
	
	ДатаВводаНачальныхОстатков = РегистрыСведений.ДатыВводаНачальныхОстатков.ДатаВводаНачальныхОстатков(Организация);
	Если Не ЗначениеЗаполнено(ДатаВводаНачальныхОстатков) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат УчетУСН.НачальныеОстаткиПоНалогуВведены(Организация);
	
КонецФункции

Функция ВведеныНачальныеОстаткиПоВзносамИП(Организация)
	
	ДатаВводаНачальныхОстатков = РегистрыСведений.ДатыВводаНачальныхОстатков.ДатаВводаНачальныхОстатков(Организация);
	Если Не ЗначениеЗаполнено(ДатаВводаНачальныхОстатков) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат УчетСтраховыхВзносовИП.НачальныеОстаткиПоВзносамВведены(Организация);
	
КонецФункции

Функция СозданыДекларацииПоУСН(Организация)
	
	Запрос = Новый Запрос();
	Запрос.Параметры.Вставить("Организация", Организация);
	Запрос.Параметры.Вставить("ИсточникОтчета", "РегламентированныйОтчетУСН");
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегламентированныйОтчет.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
	|ГДЕ
	|	РегламентированныйОтчет.Организация = &Организация
	|	И РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета
	|	И РегламентированныйОтчет.ПометкаУдаления = ЛОЖЬ";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

Функция НуженПомощникОтчетовПрошлыхПериодовДляСтрокИндикатора(СтрокиИндикатора, ЭтоНалог)
	
	Если ЭтоНалог Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого Индикатор Из СтрокиИндикатора Цикл
		Если Индикатор.НуженПомощникОтчетовПрошлыхПериодов Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ДобавитьСсылкуНаПомощникОтчетовПрошлыхПериодов(Блок, ЭтоНалог, СтрокиИндикатора, ПараметрыМонитора)
	
	Если Не ЭтоНалог Тогда
		
		Для Каждого Индикатор Из СтрокиИндикатора Цикл
			
			Если Индикатор.НуженПомощникОтчетовПрошлыхПериодов Тогда
				// Ссылка ведет к тесту на отчетность прошлых периодов.
				ОписаниеДействия = ОписаниеДействияПроверитьОтчетностьПрошлыхПериодов(
					ПараметрыМонитора.Организация,
					Индикатор.Правило, 
					Обработки.ПодготовкаОтчетностиПрошлыхПериодов.ОтчетныйПериодДляЗапускаТеста(
						Индикатор.Правило, ПараметрыМонитора.Организация));
				ДобавитьСтрокуСоСсылкой(Блок, НСтр("ru = 'Проверить'"), ОписаниеДействия);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ЭтоОтчетностьПрошлыхПериодовПоТесту(ЗадачаПоПравилу, ОтчетностьПрошлыхПериодовПоТесту)
	
	Если Не ЗначениеЗаполнено(ОтчетностьПрошлыхПериодовПоТесту) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Отбор = Новый Структура();
	Отбор.Вставить("ПериодСобытия", ЗадачаПоПравилу.ПериодСобытия);
	Отбор.Вставить("Правило", ЗадачаПоПравилу.Правило);
	Отбор.Вставить("Требуется", Истина);
	
	Возврат ОтчетностьПрошлыхПериодовПоТесту.НайтиСтроки(Отбор).Количество() > 0;
	
КонецФункции

#КонецОбласти

#Область АлгоритмыОплатыНалоговПрошлыхПериодов

Функция НуженПомощникОплатыНалоговПрошлыхПериодовДляСтрокИндикатора(СтрокиИндикатора, ЭтоНалог)
	
	Если Не ЭтоНалог Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого Индикатор Из СтрокиИндикатора Цикл
		Если Индикатор.НуженПомощникНалоговПрошлыхПериодов Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ДобавитьСсылкуНаПомощникОплатыНалоговПрошлыхПериодов(Блок, ЭтоНалог, СтрокиИндикатора, ПараметрыМонитора, КодЗадачи)
	
	Если ЭтоНалог Тогда
		
		Для Каждого Индикатор Из СтрокиИндикатора Цикл
			
			Если Индикатор.НуженПомощникНалоговПрошлыхПериодов Тогда
				// Ссылка ведет к тесту на отчетность прошлых периодов.
				ОписаниеДействия = ОписаниеДействияОплатитьНалогиПрошлыхПериодов(
					ПараметрыМонитора,
					Индикатор.Правило, КодЗадачи);
				ДобавитьСтрокуСоСсылкой(Блок, НСтр("ru = 'Проверить'"), ОписаниеДействия);
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ОписаниеДействияОплатитьНалогиПрошлыхПериодов(ПараметрыМонитора, Правило, КодЗадачи)
	
	ОписаниеДействия = Новый Структура;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", ПараметрыМонитора.Организация);
	ПараметрыФормы.Вставить("Правило",     Правило);
	Если ЭтоЗадачаВзносовИП(КодЗадачи) Тогда
		ИмяФормы = "Обработка.МониторНалоговИОтчетности.Форма.ФормаТестПоВзносамЗаПрошлыеПериоды";
		СведенияОбОрганизации = Обработки.РасчетСтраховыхВзносовИП.СведенияОбОрганизации(
			ПараметрыМонитора.Организация, ОбщегоНазначения.ТекущаяДатаПользователя());
		ПараметрыФормы.Вставить("АдресСведенийОбОрганизации",
			ПоместитьВоВременноеХранилище(СведенияОбОрганизации, ПараметрыМонитора.УникальныйИдентификатор));
	Иначе
		ИмяФормы = "Обработка.МониторНалоговИОтчетности.Форма.ФормаТестПоНалогуЗаПрошлыеПериоды";
		ПараметрыФормы.Вставить("ОплатитьНалогПослеТеста", Истина);
	КонецЕсли;
	ОписаниеДействия.Вставить("ИмяФормы", ИмяФормы);
	ОписаниеДействия.Вставить("ПараметрыФормы", ПараметрыФормы);
	
	Возврат ОписаниеДействия;
	
КонецФункции

Функция ЭтоОплатаНалогаЗаПрошлыйПериод(Организация, ПериодСобытия, Периодичность)

	ГраницаОтчетностиПрошлыхПериодов = ПомощникиПоУплатеНалоговИВзносов.ГраницаОтчетностиПрошлыхПериодов(Организация);
	
	Если ГраницаОтчетностиПрошлыхПериодов = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КонецПериодаСобытия = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, ПериодСобытия);
	
	// Событие завершилось до начала ведения учета
	Если КонецПериодаСобытия <= КонецДня(ГраницаОтчетностиПрошлыхПериодов) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

#КонецОбласти

#КонецЕсли