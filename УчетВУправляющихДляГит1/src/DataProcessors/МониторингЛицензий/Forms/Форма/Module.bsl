
&НаКлиенте
Процедура ОбновитьCписок(Команда)
    ТабДок = ВывестиЛицензии();
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьОбновленияПриИзменении(Элемент)
	ОтключитьОбработчикОжидания("ПриОжидании");
	Если Объект.ПериодичностьОбновления > 0 Тогда
		ПодключитьОбработчикОжидания("ПриОжидании", Объект.ПериодичностьОбновления);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОжидании()
	ТабДок = ВывестиЛицензии();
КонецПроцедуры

&НаСервере
// Процедура вывода информации о лицензиях
Функция ВывестиЛицензии()

	ТабДок = Новый ТабличныйДокумент;
	ТекОбъект = РеквизитФормыВЗначение("Объект");
	Сервер					 = "192.168.1.253";	
	АдминистраторКластера	 = "sa";	
	ПарольАдминистратора	 = "sa2015";	
	ИмяБазыНаСервере		 = ТекОбъект.ИмяБазыНаСервере;	
	
	Если ПустаяСтрока(Сервер) Тогда
		Возврат ТабДок;
	КонецЕсли;

	ТаблицаЛицензий = Новый ТаблицаЗначений;
	ТаблицаЛицензий.Колонки.Добавить("ServerName",ПолучитьОписаниеТиповСтроки(50));
	ТаблицаЛицензий.Колонки.Добавить("BaseName",ПолучитьОписаниеТиповСтроки(50));
	ТаблицаЛицензий.Колонки.Добавить("MainPort",ПолучитьОписаниеТиповЧисла(5));
	ТаблицаЛицензий.Колонки.Добавить("AppID",ПолучитьОписаниеТиповСтроки(50));
	ТаблицаЛицензий.Колонки.Добавить("userName",ПолучитьОписаниеТиповСтроки(50));
	ТаблицаЛицензий.Колонки.Добавить("Host",ПолучитьОписаниеТиповСтроки(50));
	ТаблицаЛицензий.Колонки.Добавить("ShortPresentation",ПолучитьОписаниеТиповСтроки(50));
	ТаблицаЛицензий.Колонки.Добавить("FullPresentation",ПолучитьОписаниеТиповСтроки(50));
	ТаблицаЛицензий.Колонки.Добавить("Net",Новый ОписаниеТипов("Булево"));
	ТаблицаЛицензий.Колонки.Добавить("LicenseType",ПолучитьОписаниеТиповЧисла(1));
	ТаблицаЛицензий.Колонки.Добавить("MaxUsersAll",ПолучитьОписаниеТиповЧисла(3));
	ТаблицаЛицензий.Колонки.Добавить("Quantity",ПолучитьОписаниеТиповЧисла(1));

	Попытка
		
		Соединитель = Новый COMОбъект("V83.COMConnector");
		Соединение = Соединитель.ConnectAgent(Сервер);
		Кластеры = Соединение.GetClusters(); 
		МаксимальныйИндексКластеров = Кластеры.GetUpperBound();
		//Для Каждого ТекущийИндексКластера Из Кластеры.GetLowerBound() По МаксимальныйИндексКластеров  Цикл
			//ТекущийКластер = Кластеры.GetValue(ТекущийИндексКластера);
		Для Каждого ТекущийКластер Из Кластеры Цикл
			Соединение.Authenticate(ТекущийКластер, АдминистраторКластера, ПарольАдминистратора);
			Базы = Соединение.GetInfoBases(ТекущийКластер);
			МаксимальныйИндексБаз = Базы.GetUpperBound();
			//Для ТекущийИндексБазы = Базы.GetLowerBound() По МаксимальныйИндексБаз Цикл
			//	ОписаниеБазы = Базы.GetValue(ТекущийИндексБазы);
			Для Каждого ОписаниеБазы Из Базы Цикл
				Sessions = Соединение.GetInfoBaseSessions(ТекущийКластер,ОписаниеБазы);
				Для каждого Session из Sessions Цикл
					Лицензия = Session.License;
					Если Лицензия <> Неопределено Тогда
						СтрокаСоединения = ТаблицаЛицензий.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаСоединения,Session);
						ЗаполнитьЗначенияСвойств(СтрокаСоединения,Лицензия);
						СтрокаСоединения.BaseName = ОписаниеБазы.Name;
						СтрокаСоединения.ServerName = Сервер;
						СтрокаСоединения.MainPort = ТекущийКластер.MainPort;
						СтрокаСоединения.Quantity = 1;
						СтрокаСоединения.MaxUsersAll = Лицензия.MaxUsersAll;
					КонецЕсли;	
				КонецЦикла;	
			КонецЦикла;
		КонецЦикла;
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаЛицензий", ТаблицаЛицензий);
	Запрос.УстановитьПараметр("ИмяБазыНаСервере", ИмяБазыНаСервере);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаВременная.ServerName,
	|	ТаблицаВременная.BaseName,
	|	ТаблицаВременная.MainPort,
	|	ТаблицаВременная.AppID,
	|	ТаблицаВременная.userName,
	|	ТаблицаВременная.Host,
	|	ТаблицаВременная.ShortPresentation,
	|	ТаблицаВременная.FullPresentation,
	|	ТаблицаВременная.Net,
	|	ТаблицаВременная.LicenseType,
	|	ТаблицаВременная.MaxUsersAll,
	|	ТаблицаВременная.Quantity
	|ПОМЕСТИТЬ ТаблицаРезультатовОсновная
	|ИЗ
	|	&ТаблицаЛицензий КАК ТаблицаВременная
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРезультатов.ServerName,
	|	ТаблицаРезультатов.BaseName КАК BaseName,
	|	ТаблицаРезультатов.MainPort,
	|	ТаблицаРезультатов.AppID,
	|	ТаблицаРезультатов.userName КАК userName,
	|	ТаблицаРезультатов.Host КАК Host,
	|	ТаблицаРезультатов.ShortPresentation КАК ShortPresentation,
	|	ТаблицаРезультатов.FullPresentation КАК FullPresentation,
	|	ТаблицаРезультатов.Net,
	|	ТаблицаРезультатов.LicenseType,
	|	ТаблицаРезультатов.MaxUsersAll КАК MaxUsersAll,
	|	СУММА(ТаблицаРезультатов.Quantity) КАК Quantity
	|ИЗ
	|	ТаблицаРезультатовОсновная КАК ТаблицаРезультатов
	|ГДЕ
	|	(ТаблицаРезультатов.BaseName = &ИмяБазыНаСервере
	|			ИЛИ &ИмяБазыНаСервере = """")
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаРезультатов.ServerName,
	|	ТаблицаРезультатов.BaseName,
	|	ТаблицаРезультатов.MainPort,
	|	ТаблицаРезультатов.AppID,
	|	ТаблицаРезультатов.userName,
	|	ТаблицаРезультатов.Host,
	|	ТаблицаРезультатов.ShortPresentation,
	|	ТаблицаРезультатов.FullPresentation,
	|	ТаблицаРезультатов.Net,
	|	ТаблицаРезультатов.LicenseType,
	|	ТаблицаРезультатов.MaxUsersAll
	|
	|УПОРЯДОЧИТЬ ПО
	|	ShortPresentation,
	|	userName
	|ИТОГИ
	|	МАКСИМУМ(MaxUsersAll),
	|	СУММА(Quantity)
	|ПО
	|	ОБЩИЕ,
	|	ShortPresentation
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	
	Результат = Запрос.Выполнить();
	
	ВыборкаИтоги = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Макет = ТекОбъект.ПолучитьМакет("Макет");
    ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("ОбластьДетальныхЗаписей");
	ОбластьДетальныхЗаписейГруппа = Макет.ПолучитьОбласть("ОбластьДетальныхЗаписейГруппа");
	ОбластьПодвал = Макет.ПолучитьОбласть("ОбластьПодвал");
	
	ОбластьЗаголовок.Параметры.ДатаСоставления = ТекущаяДата();
	ОбластьЗаголовок.Параметры.Сервер = Сервер;
	ТабДок.Вывести(ОбластьЗаголовок);
 	ТабДок.ФиксацияСверху = ТабДок.ВысотаТаблицы;

	ТабДок.НачатьАвтогруппировкуСтрок();
	ВыборкаИтоги.Следующий();
	ОбластьПодвал.Параметры.Quantity = ВыборкаИтоги.Quantity;
	ВыборкаКлючи = ВыборкаИтоги.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаКлючи.Следующий() Цикл
		ОбластьДетальныхЗаписейГруппа.Параметры.Заполнить(ВыборкаКлючи);
		ТабДок.Вывести(ОбластьДетальныхЗаписейГруппа,0);
		ВыборкаДетальныеЗаписи = ВыборкаКлючи.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ОбластьДетальныхЗаписей.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
			ТабДок.Вывести(ОбластьДетальныхЗаписей,1,,Ложь);
			ОбластьДетальныхЗаписейГруппа.Параметры.Заполнить(ВыборкаДетальныеЗаписи);
		КонецЦикла;
	КонецЦикла;
	
	ТабДок.Вывести(ОбластьПодвал,0);
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	ТабДок.ОтображатьГруппировки = Истина;
	ТабДок.ОтображатьЗаголовки = Ложь;
	ТабДок.ОтображатьСетку = Ложь;
	ТабДок.АвтоМасштаб = Истина;
	ТабДок.ТолькоПросмотр = Истина;                             
	Возврат ТабДок;

КонецФункции

&НаСервере
// Служебная функция, предназначенная для получения описания типов строки, заданной длины.
// 
// Параметры:
//  ДлинаСтроки - число, длина строки.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для строки указанной длины.
//
Функция ПолучитьОписаниеТиповСтроки(ДлинаСтроки)

	Возврат Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(ДлинаСтроки, ДопустимаяДлина.Переменная));

КонецФункции // ПолучитьОписаниеТиповСтроки()

&НаСервере
// Служебная функция, предназначенная для получения описания типов числа, заданной разрядности.
// 
// Параметры:
//  Разрядность 			- число, разряд числа.
//  РазрядностьДробнойЧасти - число, разряд дробной части.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для числа указанной разрядности.
//
Функция ПолучитьОписаниеТиповЧисла(Разрядность, РазрядностьДробнойЧасти = 0, ЗнакЧисла = Неопределено)

	Если ЗнакЧисла = Неопределено Тогда
		КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти);
	Иначе
		КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность, РазрядностьДробнойЧасти, ЗнакЧисла);
	КонецЕсли;

	Возврат Новый ОписаниеТипов("Число", КвалификаторЧисла);

КонецФункции // ПолучитьОписаниеТиповЧисла()

