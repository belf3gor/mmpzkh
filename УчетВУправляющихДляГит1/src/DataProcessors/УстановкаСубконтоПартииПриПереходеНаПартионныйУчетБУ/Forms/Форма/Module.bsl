
&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

//////////////////////////////////////////////////////////////////////////////////////////

&НаКлиенте
Процедура КомандаВыполнить(Команда)
	
	ОчиститьСообщения();
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;	
	КонецЕсли;
	
	РезультатВыполнения = КомандаВыполнитьНаСервере();
	
	Если НЕ РезультатВыполнения.ЗаданиеВыполнено Тогда
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
		
		ФормаДлительнойОперации.Заголовок = НСтр("ru = 'Установка субконто ""Партии"" при переходе на партионный учет'");
		ФормаДлительнойОперации.Элементы.ДекорацияПоясняющийТекстДлительнойОперации.Заголовок = НСтр("ru = 'Выполняется анализ остатков и установка субконто ""Партии"".
																								|Пожалуйста, подождите...'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КомандаВыполнитьНаСервере()

	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("ЗаданиеВыполнено", Ложь); 
	
	// вызываем процедуру анализа остатков и установки субконто "Партии" - синхронно или асинхронно, в зависимости от вида ИБ - файловая или клиент-сервер
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", Объект.Организация);
	СтруктураПараметров.Вставить("ДатаНачалаПартионногоУчета", Объект.ДатаНачалаПартионногоУчета);
	СтруктураПараметров.Вставить("СоздаватьСлужебнуюПартию", Истина);
	СтруктураПараметров.Вставить("СлужебныйДокументПартии",  Неопределено);
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Обработки.УстановкаСубконтоПартииПриПереходеНаПартионныйУчетБУ.ВыполнитьЗаполнениеСубконтоПартии(СтруктураПараметров, АдресХранилища);
		
		РезультатВыполнения.Вставить("ЗаданиеВыполнено", Истина);

	Иначе
		НаименованиеЗадания = НСтр("ru = 'Установка субконто ""Партии"" при начале ведения партионного учета в БУ'");
		РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Обработки.УстановкаСубконтоПартииПриПереходеНаПартионныйУчетБУ.ВыполнитьЗаполнениеСубконтоПартии",
			СтруктураПараметров,
			НаименованиеЗадания);
			
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанныеНаСервере();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции // КомандаВыполнитьНаСервере()

&НаСервере
Процедура ЗагрузитьПодготовленныеДанныеНаСервере()

	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
    ПоказатьСообщенияПользователю();
	
	ИдентификаторЗадания = Неопределено;

КонецПроцедуры // ЗагрузитьПодготовленныеДанныеНаСервере()

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()

	Попытка
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда			
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
				ЗагрузитьПодготовленныеДанныеНаСервере();
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания",
					ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
			КонецЕсли;
		Иначе
			// Задание отменено
			ИдентификаторЗадания = Неопределено;
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры 

&НаСервере
Процедура ПоказатьСообщенияПользователю()
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		Возврат;
	КонецЕсли;
	
	ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	Если ФоновоеЗадание <> Неопределено Тогда
		МассивСообщений = ФоновоеЗадание.ПолучитьСообщенияПользователю(Истина);
		Если МассивСообщений <> Неопределено Тогда
			Для Каждого Сообщение Из МассивСообщений Цикл
				Сообщение.ИдентификаторНазначения = УникальныйИдентификатор;
				Сообщение.Сообщить();
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
