#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Функция ВыполнитьЗаполнениеСубконтоПартии(СтруктураПараметров, АдресХранилища) Экспорт
	
	Отказ = Ложь;
	
	ЗаполнитьСубконтоПартииВОстатках(СтруктураПараметров, Отказ); 
	
	ВозвращаемыеПараметры = Новый Структура();

	ВозвращаемыеПараметры.Вставить("ДокументыОперации", СтруктураПараметров.ДокументыОперации);
	ВозвращаемыеПараметры.Вставить("УспешноВыполнено", НЕ Отказ);
	
	Если ЭтоАдресВременногоХранилища(АдресХранилища) Тогда		
		ПоместитьВоВременноеХранилище(ВозвращаемыеПараметры, АдресХранилища);
	КонецЕсли;

КонецФункции // ВыполнитьЗаполнениеСубконтоПартии()

Процедура ЗаполнитьСубконтоПартииВОстатках(СтруктураПараметров, Отказ) Экспорт

	СозданныеДокументы = Новый Массив;
	СтруктураПараметров.Вставить("ДокументыОперации", СозданныеДокументы);
	
	// определяем параметры
	ПараметрыУчета = ОбщегоНазначенияБП.ОпределитьПараметрыУчета();
	СтруктураПараметров.Вставить("ПараметрыУчета", ПараметрыУчета);
	
	ПроверитьПараметрыУчета(СтруктураПараметров, Отказ);
	ПроверитьПараметрыУчетнойПолитики(СтруктураПараметров, Отказ);
	
	Если НЕ Отказ Тогда
		СформироватьОперациюПоУстановкеСубконтоПартии(СтруктураПараметров, Отказ);
	КонецЕсли;

КонецПроцедуры

Процедура ПроверитьПараметрыУчетнойПолитики(СтруктураПараметров, Отказ)

	Организация = СтруктураПараметров.Организация;
	
	ДатаНачалаПартионногоУчета = НачалоМесяца(СтруктураПараметров.ДатаНачалаПартионногоУчета);
	ДатаОкончанияПрежнейУчПолитики = ДатаНачалаПартионногоУчета - 1;
		
	// проверим существование учетной политики на дату начала партионного учета и перед ней
	Если Не УчетнаяПолитика.Существует(Организация, ДатаНачалаПартионногоУчета, Истина) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не УчетнаяПолитика.Существует(Организация, ДатаОкончанияПрежнейУчПолитики, Истина) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// проверяем учетную политику по списанию запасов
	СтарыйСпособОценки = УчетнаяПолитика.СпособОценкиМПЗ(Организация, ДатаОкончанияПрежнейУчПолитики);
	НовыйСпособОценки  = УчетнаяПолитика.СпособОценкиМПЗ(Организация, ДатаНачалаПартионногоУчета);
	
	Если СтарыйСпособОценки <> Перечисления.СпособыОценки.ПоСредней Тогда
		ТекстСообщения = НСтр("ru = 'Партионный учет уже велся в организации ранее указанной даты.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;
	
	Если НовыйСпособОценки = Перечисления.СпособыОценки.ПоСредней Тогда
		ТекстСообщения = НСтр("ru = 'На указанную дату партионный учет в учетной политике не установлен.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли;

КонецПроцедуры
 
Процедура ПроверитьПараметрыУчета(СтруктураПараметров, Отказ)

	ПараметрыУчета = СтруктураПараметров.ПараметрыУчета;
	
	Если НЕ ПараметрыУчета.ВестиПартионныйУчет Тогда
		ТекстСообщения = НСтр("ru = 'Учет по партиям в текущей информационной базе отключен!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
	КонецЕсли; 

КонецПроцедуры
 
Процедура СформироватьОперациюПоУстановкеСубконтоПартии(СтруктураПараметров, Отказ)

	ДатаНачалаПартионногоУчета     = НачалоМесяца(СтруктураПараметров.ДатаНачалаПартионногоУчета);
	ДатаОкончанияПрежнейУчПолитики = ДатаНачалаПартионногоУчета - 1;
	ГраницаОстатков                = Новый Граница(ДатаОкончанияПрежнейУчПолитики, ВидГраницы.Включая);
	Организация                    = СтруктураПараметров.Организация;
	
	ВелсяСложныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Организация, ДатаОкончанияПрежнейУчПолитики);
	
	ВедетсяСкладскойУчет = СтруктураПараметров.ПараметрыУчета.СкладскойУчет > 0;
	ВедетсяСуммовойУчетПоСкладам = СтруктураПараметров.ПараметрыУчета.СкладскойУчет = 2;
	
	СлужебныйДокументПартии = Неопределено;
	Если НЕ СтруктураПараметров.СоздаватьСлужебнуюПартию И ЗначениеЗаполнено(СтруктураПараметров.СлужебныйДокументПартии) Тогда
		СлужебныйДокументПартии = СтруктураПараметров.СлужебныйДокументПартии;
	Иначе
		СлужебныйДокументПартии = СоздатьСлужебныйДокументПартии(СтруктураПараметров, Отказ);
		Если СтруктураПараметров.Свойство("ДокументыОперации") Тогда	
			СтруктураПараметров.ДокументыОперации.Добавить(СлужебныйДокументПартии);
		Иначе
			СозданныеДокументы = Новый Массив;
			СозданныеДокументы.Добавить(СлужебныйДокументПартии);
			СтруктураПараметров.Вставить("ДокументыОперации", СозданныеДокументы);
		КонецЕсли; 
	КонецЕсли; 
	
	// Запрос по остаткам
	Запрос = Новый Запрос;
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	Запрос.УстановитьПараметр("Организация",     Организация);
	Запрос.УстановитьПараметр("ГраницаОстатков", ГраницаОстатков);
	Запрос.УстановитьПараметр("СуммовойУчетПоСкладам", ВедетсяСуммовойУчетПоСкладам);
	
	ВидыСубконтоНСП = Новый Массив;
	ВидыСубконтоНСП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоНСП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	// Для счетов с аналитикой по складам остатки по субконто "Склады" разворачиваем только при суммовом учете по нему
	Если ВедетсяСуммовойУчетПоСкладам Тогда
		ВидыСубконтоНСП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	КонецЕсли; 
	Запрос.УстановитьПараметр("ВидыСубконтоНСП", ВидыСубконтоНСП);
	
	ВидыСубконтоНСП_Склад = Новый Массив;
	ВидыСубконтоНСП_Склад.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоНСП_Склад.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	ВидыСубконтоНСП_Склад.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	Запрос.УстановитьПараметр("ВидыСубконтоНСП_Склад", ВидыСубконтоНСП_Склад);
	
	ВидыСубконтоНП = Новый Массив;
	ВидыСубконтоНП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоНП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	Запрос.УстановитьПараметр("ВидыСубконтоНП", ВидыСубконтоНП);
	
	ВидыСубконтоНС = Новый Массив;
	ВидыСубконтоНС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоНС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	Запрос.УстановитьПараметр("ВидыСубконтоНС", ВидыСубконтоНС);
	
	ВидыСубконтоКНП = Новый Массив;
	ВидыСубконтоКНП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоКНП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоКНП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	Запрос.УстановитьПараметр("ВидыСубконтоКНП", ВидыСубконтоКНП);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВидыСубконтоНоменклатура.Ссылка КАК СчетНП
	|ПОМЕСТИТЬ ВсеСчетаНП
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконтоНоменклатура
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ВидыСубконтоПартии
	|		ПО ВидыСубконтоНоменклатура.Ссылка = ВидыСубконтоПартии.Ссылка
	|			И (ВидыСубконтоНоменклатура.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура))
	|			И (ВидыСубконтоПартии.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии))
	|ГДЕ
	|	ВидыСубконтоНоменклатура.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаУчетаМПЗ
	|ИЗ
	|	ВсеСчетаНП КАК ВсеСчетаНП
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ПО ВсеСчетаНП.СчетНП = Хозрасчетный.Ссылка
	|			И (НЕ Хозрасчетный.ЗапретитьИспользоватьВПроводках)
	|			И (НЕ Хозрасчетный.Забалансовый)
	|			И (Хозрасчетный.Количественный)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаКНП
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаУчетаМПЗ КАК СчетаУчетаМПЗ
	|		ПО ХозрасчетныйВидыСубконто.Ссылка = СчетаУчетаМПЗ.Счет
	|			И (ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйВидыСубконто.Ссылка КАК Счет
	|ПОМЕСТИТЬ СчетаНСП
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СчетаУчетаМПЗ КАК СчетаУчетаМПЗ
	|		ПО ХозрасчетныйВидыСубконто.Ссылка = СчетаУчетаМПЗ.Счет
	|			И (ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаУчетаМПЗ.Счет
	|ПОМЕСТИТЬ СчетаНП
	|ИЗ
	|	СчетаУчетаМПЗ КАК СчетаУчетаМПЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СчетаКНП.Счет КАК Счет
	|		ИЗ
	|			СчетаКНП КАК СчетаКНП
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			СчетаНСП.Счет
	|		ИЗ
	|			СчетаНСП КАК СчетаНСП) КАК ВложенныйЗапрос
	|		ПО СчетаУчетаМПЗ.Счет = ВложенныйЗапрос.Счет
	|ГДЕ
	|	ВложенныйЗапрос.Счет ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Субконто1, НЕОПРЕДЕЛЕНО) КАК Субконто1,
	|	""Номенклатура"" КАК ИмяСубконто1,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Субконто2, НЕОПРЕДЕЛЕНО) КАК Субконто2,
	|	""Партии"" КАК ИмяСубконто2,
	|	НЕОПРЕДЕЛЕНО КАК Субконто3,
	|	"""" КАК ИмяСубконто3,
	|	ХозрасчетныйОстатки.Подразделение КАК Подразделение,
	|	ХозрасчетныйОстатки.СуммаОстатокДт,
	|	ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт,
	|	ХозрасчетныйОстатки.СуммаНУОстатокДт,
	|	ХозрасчетныйОстатки.СуммаПРОстатокДт,
	|	ХозрасчетныйОстатки.СуммаВРОстатокДт,
	|	ХозрасчетныйОстатки.КоличествоОстатокДт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ГраницаОстатков,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаНП.Счет
	|				ИЗ
	|					СчетаНП КАК СчетаНП),
	|			&ВидыСубконтоНП,
	|			Организация = &Организация) КАК ХозрасчетныйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Субконто1, НЕОПРЕДЕЛЕНО),
	|	""Контрагенты"",
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Субконто2, НЕОПРЕДЕЛЕНО),
	|	""Номенклатура"",
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Субконто3, НЕОПРЕДЕЛЕНО),
	|	""Партии"",
	|	ХозрасчетныйОстатки.Подразделение,
	|	ХозрасчетныйОстатки.СуммаОстатокДт,
	|	ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт,
	|	ХозрасчетныйОстатки.СуммаНУОстатокДт,
	|	ХозрасчетныйОстатки.СуммаПРОстатокДт,
	|	ХозрасчетныйОстатки.СуммаВРОстатокДт,
	|	ХозрасчетныйОстатки.КоличествоОстатокДт
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ГраницаОстатков,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаКНП.Счет
	|				ИЗ
	|					СчетаКНП КАК СчетаКНП),
	|			&ВидыСубконтоКНП,
	|			Организация = &Организация) КАК ХозрасчетныйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Субконто1, НЕОПРЕДЕЛЕНО),
	|	""Номенклатура"",
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Субконто2, НЕОПРЕДЕЛЕНО),
	|	""Партии"",
	|	&ИмяПоляСклад,
	|	ВЫБОР
	|		КОГДА &СуммовойУчетПоСкладам
	|			ТОГДА ""Склады""
	|		ИНАЧЕ """"
	|	КОНЕЦ,
	|	ХозрасчетныйОстатки.Подразделение,
	|	ХозрасчетныйОстатки.СуммаОстатокДт,
	|	ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт,
	|	ХозрасчетныйОстатки.СуммаНУОстатокДт,
	|	ХозрасчетныйОстатки.СуммаПРОстатокДт,
	|	ХозрасчетныйОстатки.СуммаВРОстатокДт,
	|	ВЫБОР
	|		КОГДА &СуммовойУчетПоСкладам
	|			ТОГДА ХозрасчетныйОстатки.КоличествоОстатокДт
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ГраницаОстатков,
	|			Счет В
	|				(ВЫБРАТЬ
	|					СчетаНСП.Счет
	|				ИЗ
	|					СчетаНСП КАК СчетаНСП),
	|			&ВидыСубконтоНСП,
	|			Организация = &Организация) КАК ХозрасчетныйОстатки"
	;
	
	// При учете на складах только по количеству - дополним запрос остатками по количеству в разрезе номенклатуры, складов и партий
	// Их также необходимо переместить на новую партию
	Если ВедетсяСкладскойУчет И НЕ ВедетсяСуммовойУчетПоСкладам Тогда
		
		ТекстЗапроса = ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Счет,
		|	ЕСТЬNULL(ХозрасчетныйОстатки.Субконто1, НЕОПРЕДЕЛЕНО),
		|	""Номенклатура"",
		|	ЕСТЬNULL(ХозрасчетныйОстатки.Субконто2, НЕОПРЕДЕЛЕНО),
		|	""Партии"",
		|	ЕСТЬNULL(ХозрасчетныйОстатки.Субконто3, НЕОПРЕДЕЛЕНО),
		|	""Склады"",
		|	ХозрасчетныйОстатки.Подразделение,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	ХозрасчетныйОстатки.КоличествоОстатокДт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ГраницаОстатков,
		|			Счет В
		|				(ВЫБРАТЬ
		|					СчетаНСП.Счет
		|				ИЗ
		|					СчетаНСП КАК СчетаНСП),
		|			&ВидыСубконтоНСП_Склад,
		|			Организация = &Организация) КАК ХозрасчетныйОстатки
		|"
		;
	КонецЕсли; 
	
	ИмяПоляСклад = ?(ВедетсяСуммовойУчетПоСкладам, "ЕСТЬNULL(ХозрасчетныйОстатки.Субконто3, НЕОПРЕДЕЛЕНО)", "НЕОПРЕДЕЛЕНО");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ИмяПоляСклад", ИмяПоляСклад);
	
	Запрос.Текст = ТекстЗапроса;
	
	ОстаткиНоменклатуры = Запрос.Выполнить().Выгрузить();
	ОстаткиНоменклатуры.Сортировать("Счет, Субконто1, Субконто2, Субконто3");
	
	// Создаем операцию
	ОперацияБУ = Документы.ОперацияБух.СоздатьДокумент();
	ОперацияБУ.Дата = ДатаОкончанияПрежнейУчПолитики;
	ОперацияБУ.Организация = Организация;
	ОперацияБУ.Ответственный = Пользователи.ТекущийПользователь();
	
	// Операция переноса остатков не должна сдвигать последовательность на последний день периода перед переходом,
	// иначе "Закрытие месяца" за прошлый месяц станет неактуальным и сдвинет актуальность операций перехода назад
	ОперацияБУ.ДополнительныеСвойства.Вставить("ПроведенВХронологическойПоследовательности", Истина);
	
	ТекстСодержания = НСтр("ru = 'Установка субконто ""Партии"" при переходе на партионный учет'");
	ОперацияБУ.Содержание = ТекстСодержания;
	
	ТекстКомментария = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Нстр("ru = '#Создан автоматически обработкой ""Установка субконто ""Партии"" при переходе на партионный учет"", дата создания - %1'"), 
		ТекущаяДатаСеанса());
	ОперацияБУ.Комментарий = ТекстКомментария;
	
	ОперацияБУ.Записать(РежимЗаписиДокумента.Запись);
	
	// заполняем проводки операции
	Набор = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	Набор.Отбор.Регистратор.Установить(ОперацияБУ.Ссылка, Истина);
	
	Для каждого СтрокаОстатка Из ОстаткиНоменклатуры Цикл		
		
		Проводка = Набор.Добавить();
		
		Проводка.Активность = Истина;
		Проводка.Организация = Организация;
		Проводка.Период = ДатаОкончанияПрежнейУчПолитики;
		
		Проводка.ПодразделениеДт = СтрокаОстатка.Подразделение;
		Проводка.ПодразделениеКт = СтрокаОстатка.Подразделение;
		
		Проводка.СчетДт = СтрокаОстатка.Счет;
		Проводка.СчетКт = СтрокаОстатка.Счет;
		
		Проводка.КоличествоДт = СтрокаОстатка.КоличествоОстатокДт;
		Проводка.КоличествоКт = СтрокаОстатка.КоличествоОстатокДт;
		
		Проводка.Сумма = СтрокаОстатка.СуммаОстатокДт;
		
		Проводка.СуммаНУДт = СтрокаОстатка.СуммаНУОстатокДт;
		Проводка.СуммаНУКт = СтрокаОстатка.СуммаНУОстатокДт;
		
		Проводка.СуммаВРДт = СтрокаОстатка.СуммаВРОстатокДт;
		Проводка.СуммаВРКт = СтрокаОстатка.СуммаВРОстатокДт;
		
		Проводка.СуммаПРДт = СтрокаОстатка.СуммаПРОстатокДт;
		Проводка.СуммаПРКт = СтрокаОстатка.СуммаПРОстатокДт; 
		
		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Проводка.СчетДт);
		
		Для Сч = 1 По СвойстваСчета.КоличествоСубконто Цикл
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, СтрокаОстатка["ИмяСубконто"+Сч], СтрокаОстатка["Субконто"+Сч]);
			БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетКт, Проводка.СубконтоКт, СтрокаОстатка["ИмяСубконто"+Сч], СтрокаОстатка["Субконто"+Сч]);			
		КонецЦикла; 
		
		БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Партии", СлужебныйДокументПартии);
		
	КонецЦикла; 
	
	Набор.Записать(Истина);
	
	Если СтруктураПараметров.Свойство("ДокументыОперации") Тогда	
		СтруктураПараметров.ДокументыОперации.Добавить(ОперацияБУ.Ссылка);
	Иначе
		СозданныеДокументы = Новый Массив;
		СозданныеДокументы.Добавить(ОперацияБУ.Ссылка);
		СтруктураПараметров.Вставить("ДокументыОперации", СозданныеДокументы);
	КонецЕсли; 
	
КонецПроцедуры

Функция СоздатьСлужебныйДокументПартии(СтруктураПараметров, Отказ)

	ДокПартии = Документы.ДокументРасчетовСКонтрагентом.СоздатьДокумент();
	
	ДокПартии.Организация = СтруктураПараметров.Организация;
	ДокПартии.Дата        = НачалоМесяца(СтруктураПараметров.ДатаНачалаПартионногоУчета) - 1;
	
	ТекстКомментария = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Нстр("ru = '#Служебная партия, для ввода остатков. Создана автоматически обработкой ""Заполнение начальных остатков для УСН"", дата создания - %1'"), 
		ТекущаяДатаСеанса());
    ДокПартии.Комментарий = ТекстКомментария;
	
	ДокПартии.Записать(РежимЗаписиДокумента.Запись);
	
	Возврат ДокПартии.Ссылка;

КонецФункции // СоздатьСлужебныйДокументПартии()
 
#КонецЕсли