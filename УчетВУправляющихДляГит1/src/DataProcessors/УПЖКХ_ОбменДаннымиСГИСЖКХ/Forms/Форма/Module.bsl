
#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Организация".
Процедура ОрганизацияПриИзменении(Элемент)
	
	// Получение настроек учета кап. ремонта.
	мСтруктураНастроекКапРемонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Объект.Организация, Истина);
	Объект.ВыгружатьЛицевыеСчетаКР = Ложь;
	УстановитьПояснениеКТипуОрганизации(ЭтаФорма);
	УстановитьДоступныеВидыОбмена(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
	
	ТекстПредупреждения = "";
	
	Если Объект.ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.СведенияОЛицевыхСчетах")
	   И Объект.ЛицевыеСчета.Количество() > 0
	   И НЕ ПредОрганизацияВыгрузки = Объект.Организация Тогда
		ТекстПредупреждения = "В таблице выбора лицевых счетов содержатся лицевые счета, которые могут не иметь сведений для взаиморасчетов с указанной организацией.
			|Рекомендуется перезаполнить таблицу лицевых счетов.";
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстПредупреждения) Тогда
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры // ОрганизацияПриИзменении()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Вид выгрузки".
Процедура ВидВыгрузкиПриИзменении(Элемент)
	
	Если Объект.ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.ПриборыУчета") Тогда
		Если Объект.ВидОбменаПУ.Пустая() Тогда
			Объект.ВидОбменаПУ = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОбменаПриборамиУчетаСГИСЖКХ.ВыгрузкаСведенийПУ");
		КонецЕсли;
	ИначеЕсли Объект.ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.ПлатежныеДокументы") Тогда
		ПоместитьФайлШаблонаПДВоВременноеХранилище();
	ИначеЕсли Объект.ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.СведенияТСЖ") Тогда
		Если Объект.ВидОбменаТСЖ.Пустая() Тогда
			Объект.ВидОбменаТСЖ = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОбменаСведениямиОТСЖСГИСЖКХ.СведенияОЧленахТСЖ");
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // ВидВыгрузкиПриИзменении()

&НаКлиенте
// Обработчик события "Очистка" элемента "ВидВыгрузки".
//
Процедура ВидВыгрузкиОчистка(Элемент, СтандартнаяОбработка)
	
	// Нельзя очищать поле "Вид выгрузки".
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ВидВыгрузкиОчистка()

&НаКлиенте
// Обработчик события "Очистка" элемента "Организация".
//
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" элемента "ПериодВыгрузки".
//
Процедура ПериодВыгрузкиОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ПериодВыгрузки".
//
Процедура ПериодВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПредПериодВыгрузки = Объект.ПериодВыгрузки;
	
КонецПроцедуры // ПериодВыгрузкиНачалоВыбора()

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "Организация".
//
Процедура ОрганизацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПредОрганизацияВыгрузки = Объект.Организация;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПериодВыгрузки".
//
Процедура ПериодВыгрузкиПриИзменении(Элемент)
	
	Если Объект.ПериодВыгрузки = Дата(1, 1, 1) И ПредПериодВыгрузки = Дата(1, 1, 1) Тогда
		Объект.ПериодВыгрузки = ТекущаяДата();
		ПредПериодВыгрузки    = Объект.ПериодВыгрузки;
	ИначеЕсли Объект.ПериодВыгрузки = Дата(1, 1, 1) Тогда
		Объект.ПериодВыгрузки = ПредПериодВыгрузки;
	КонецЕсли;
	
	Если НЕ Объект.ПериодВыгрузки = ПредПериодВыгрузки
	   И ((Объект.ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.ПриборыУчета")
	   И Объект.ПриборыУчета.Количество() > 0)
	 ИЛИ (Объект.ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.СведенияОЛицевыхСчетах")
	   И Объект.ЛицевыеСчета.Количество() > 0)) Тогда
		
		ТекстПредупреждения = "";
		
		Если Объект.ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.ПриборыУчета") Тогда
			ТекстПредупреждения = "В таблице содержатся сведения о приборах учета. Данные сведения могут быть неактуальны в новом периоде.
			|Рекомендуется перезаполнить таблицу приборов учета.";
		ИначеЕсли Объект.ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.СведенияОЛицевыхСчетах") Тогда
			ТекстПредупреждения = "В таблице содержатся лицевые счета, которые могут не иметь сведений для взаиморасчетов в новом периоде с указанной организацией.
			|Рекомендуется перезаполнить таблицу лицевых счетов.";
		КонецЕсли;
		
		Если Не ПустаяСтрока(ТекстПредупреждения) Тогда
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецЕсли;
	Иначе
		Если Объект.ПериодВыгрузки > Объект.ПериодВыгрузкиОкончание Тогда
			МесяцСтрокой                 = Формат(Объект.ПериодВыгрузки, "ДФ='ММММ yyyy'");
			
			Объект.ПериодВыгрузкиОкончание = КонецДня(Объект.ПериодВыгрузки);
			МесяцСтрокойОкончаниеПериода   = Формат(Объект.ПериодВыгрузкиОкончание, "ДФ='ММММ yyyy'");
		Иначе
			МесяцСтрокой = Формат(Объект.ПериодВыгрузки, "ДФ='ММММ yyyy'");
		КонецЕсли;
	КонецЕсли;
	
	ПредПериодВыгрузки = Объект.ПериодВыгрузки;
	
КонецПроцедуры // ПериодВыгрузкиПриИзменении()

&НаКлиенте
// Обработчик события "Нажатие" гиперссылки "ПодсказкаВыборУслуг".
//
Процедура ДекорацияПодсказкаВыборУслугОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПерейтиПоНавигационнойСсылке(НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры // ДекорацияПодсказкаВыборУслугОбработкаНавигационнойСсылки()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВидОбменаРаботамиИУслугами".
//
Процедура ВидОбменаРаботамиИУслугамиПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	УдалитьРеквизитыФормыНаСервере();
	
КонецПроцедуры // ВидОбменаРаботамиИУслугамиПриИзменении()

&НаКлиенте
// Обработчик события "Очистка" элемента "ВидОбменаРаботамиИУслугами".
//
Процедура ВидОбменаРаботамиИУслугамиОчистка(Элемент, СтандартнаяОбработка)
	
	// Нельзя очищать поле "Вид обмена работами и услугами".
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ВидОбменаРаботамиИУслугамиОчистка()

&НаКлиенте
// Обработчик события "Открытие" поля "ПутьКФайлуШаблонаВыгрузкиРаботИУслуг".
Процедура ПутьКФайлуШаблонаВыгрузкиРаботИУслугОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачатьЗапускПриложения(Новый ОписаниеОповещения("ПутьКФайлуШаблонаВыгрузкиРаботИУслугОткрытиеЗапускПриложения", ЭтотОбъект),
						   "explorer " + Объект.ПутьКФайлуШаблонаВыгрузкиРаботИУслуг);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения запуска приложения
Процедура ПутьКФайлуШаблонаВыгрузкиРаботИУслугОткрытиеЗапускПриложения(КодВозврата, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры // ПутьКФайлуШаблонаВыгрузкиРаботИУслугОткрытие()

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ПутьКФайлуШаблонаВыгрузкиРаботИУслуг".
Процедура ПутьКФайлуШаблонаВыгрузкиРаботИУслугНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПутьКФайлуШаблонаВыгрузкиРаботИУслугНачалоВыбораВыбрать", ЭтотОбъект);
	
	ДиалогВыбораФайла = ПолучитьДиалогВыбораФайла();
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры // ПутьКФайлуШаблонаВыгрузкиРаботИУслугНачалоВыбора()

&НаКлиенте
// Обработчик завершения выбора каталога.
//
Процедура ПутьКФайлуШаблонаВыгрузкиРаботИУслугНачалоВыбораВыбрать(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		Объект.ПутьКФайлуШаблонаВыгрузкиРаботИУслуг = ВыбранныеФайлы[0];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Открытие" поля "Каталог выгрузки".
Процедура ПутьКФайлуШаблонаПДОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачатьЗапускПриложения(Новый ОписаниеОповещения("ПутьКФайлуШаблонаПДОткрытиеЗапускПриложения", ЭтотОбъект),
						   "explorer " + Объект.ПутьКФайлуШаблонаПД);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения запуска приложения.
Процедура ПутьКФайлуШаблонаПДОткрытиеЗапускПриложения(КодВозврата, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры // ПутьКФайлуШаблонаПДОткрытие()

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "Каталог выгрузки".
Процедура ПутьКФайлуШаблонаПДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПутьКФайлуШаблонаПДНачалоВыбораВыбрать", ЭтотОбъект);
	
	ДиалогВыбораФайла = ПолучитьДиалогВыбораФайла();
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры // ПутьКФайлуШаблонаПДНачалоВыбора()

&НаКлиенте
// Обработчик завершения выбора каталога.
//
Процедура ПутьКФайлуШаблонаПДНачалоВыбораВыбрать(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		
		Объект.ПутьКФайлуШаблонаПД = ВыбранныеФайлы[0];
		
		ПоместитьФайлШаблонаПДВоВременноеХранилище();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" элемента "КаталогЗагрузкиПД".
//
Процедура КаталогЗагрузкиПДНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Заголовок                   = "Выбор каталога файлов";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("КаталогЗагрузкиПДНачалоВыбораВыбрать", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения выбора каталога.
//
Процедура КаталогЗагрузкиПДНачалоВыбораВыбрать(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		Объект.КаталогЗагрузкиПД = ВыбранныеФайлы[0];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Открытие" элемента "КаталогЗагрузкиПД".
//
Процедура КаталогЗагрузкиПДОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачатьЗапускПриложения(Новый ОписаниеОповещения("КаталогЗагрузкиПДОткрытиеЗапускПриложения", ЭтотОбъект),
						   "explorer " + Объект.КаталогЗагрузкиПД);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения запуска приложения.
Процедура КаталогЗагрузкиПДОткрытиеЗапускПриложения(КодВозврата, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры // КаталогЗагрузкиПДОткрытие()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВидОбменаПУ".
//
Процедура ВидОбменаПУПриИзменении(Элемент)
	
	Объект.ПриборыУчета.Очистить();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры // ВидОбменаПУПриИзменении()

&НаКлиенте
// Обработчик события "Очистка" элемента "ВидОбменаПУ".
//
Процедура ВидОбменаПУОчистка(Элемент, СтандартнаяОбработка)
	
	// Нельзя очищать поле "Вид обмена ПУ".
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ВидОбменаПУОчистка()

&НаКлиенте
// Обработчик события "НачалоВыбора" реквизита ТЧ "ПриборыУчета".
//
Процедура ПриборыУчетаРеквизитНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПриборыУчетаРеквизитНачалоВыбора()

&НаКлиенте
// Обработчик события "Очистка" реквизита ТЧ "ПриборыУчета".
//
Процедура ПриборыУчетаРеквизитОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПриборыУчетаРеквизитОчистка()

&НаКлиенте
// Обработчик события "Создание" реквизита ТЧ "ПриборыУчета".
//
Процедура ПриборыУчетаРеквизитСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПриборыУчетаРеквизитСоздание()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Выгружать сведения о зданиях".
Процедура ВыгружатьСпособыФормированияФондаКРПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // ВыгружатьСпособыФормированияФондаКРПриИзменении()

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "КаталогЗагрузкиПУ".
//
Процедура КаталогЗагрузкиНомеровПУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Заголовок                   = "Выбор каталога файлов";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("КаталогЗагрузкиНомеровПУНачалоВыбораВыбрать", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения выбора каталога.
//
Процедура КаталогЗагрузкиНомеровПУНачалоВыбораВыбрать(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		Объект.КаталогЗагрузкиНомеровПУ = ВыбранныеФайлы[0];
	КонецЕсли;
	
КонецПроцедуры // КаталогЗагрузкиНомеровПУНачалоВыбора()

&НаКлиенте
// Обработчик события "Открытие" поля "КаталогЗагрузкиПУ".
//
Процедура КаталогЗагрузкиНомеровПУОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачатьЗапускПриложения(Новый ОписаниеОповещения("КаталогЗагрузкиНомеровПУОткрытиеЗапускПриложения", ЭтотОбъект),
						   "explorer " + Объект.КаталогЗагрузкиНомеровПУ);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения запуска приложения.
Процедура КаталогЗагрузкиНомеровПУОткрытиеЗапускПриложения(КодВозврата, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры // КаталогЗагрузкиНомеровПУОткрытие()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПереченьРаботИУслуг".
Процедура ПереченьРаботИУслугПриИзменении(Элемент)
	
	Объект.МесяцВыгрузкиФактовРаботИУслуг = Дата(1,1,1);
	ОбновитьСписокМесяцевФактовРаботИУслуг();
	
КонецПроцедуры // ПереченьРаботИУслугПриИзменении()

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля Здание таблицы Зданий.
Процедура ЗданияЗданиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Отказ = Ложь;
	
	Если УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "ЭтоГруппа") Тогда
		
		СписокДобавляемыхЗданий = ПолучитьЗданияИзГруппы(ВыбранноеЗначение, Элементы.Здания.ТекущиеДанные.НомерСтроки);
		
		Если УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "ЭтоГруппа") Тогда // Если ВыбранноеЗначение по прежнему является группой, то удалим данный элемент.
			Объект.Здания.Удалить(Элементы.Здания.ТекущиеДанные);
		КонецЕсли;
		
		Для Каждого ТекЗдание Из СписокДобавляемыхЗданий Цикл
			
			НоваяСтрокаЗдания = Объект.Здания.Добавить();
			НоваяСтрокаЗдания.Здание = ТекЗдание.Значение;
			
		КонецЦикла;
		
	Иначе
		
		Отказ = ПроверитьНаличиеЗданияВСписке(ВыбранноеЗначение, Элементы.Здания.ТекущиеДанные.НомерСтроки);
		
	КонецЕсли;
	
	Если Отказ Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Данное здание уже добавлено в список зданий! Выберите другое здание.");
		ВыбранноеЗначение = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры // ЗданияЗданиеОбработкаВыбора()

&НаКлиенте
// Обработчик события "ПриИзменении" флага "Выгружать лицевые счета КР".
Процедура ВыгружатьЛицевыеСчетаКРПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // ВыгружатьЛицевыеСчетаКРПриИзменении()

&НаКлиенте
// Процедура - открывает настройки многопоточности.
//
Процедура ГиперссылкаНаСтраницуНастройкуМногопоточностиНажатие(Элемент)
	
	КВП_РаботаСДиалогамиКлиент.ПерейтиНаСтраницуНастроекПроизводительности();
	
КонецПроцедуры // ГиперссылкаНаСтраницуНастройкуМногопоточностиНажатие()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Тип обмена ТСЖ".
Процедура ВидОбменаТСЖПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // ВидОбменаТСЖПриИзменении()

&НаКлиенте
// Обработчик события "Очистка" элемента "ВидОбменаТСЖ".
//
Процедура ВидОбменаТСЖОчистка(Элемент, СтандартнаяОбработка)
	
	// Нельзя очищать поле "Вид обмена".
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ВидОбменаТСЖОчистка()

&НаКлиенте
// Обработчик события "Нажатие" гиперссылки с пояснением к типу организации.
Процедура ПояснениеТипОрганизацииНажатие(Элемент)
	
	Оповещение = Новый ОписаниеОповещения("ПояснениеТипОрганизацииНажатиеЗавершение", ЭтаФорма);
	
	ПараметрыФормы = Новый Структура("Ключ", Объект.Организация);
	ФормаОбъекта = ОткрытьФорму("Справочник.Организации.ФормаОбъекта", ПараметрыФормы, ЭтаФорма, , , , Оповещение);
	ФормаОбъекта.ТекущийЭлемент = ФормаОбъекта.Элементы.УПЖКХ_ТипОрганизации;
	
КонецПроцедуры // ПояснениеТипОрганизацииНажатие()

&НаКлиенте
// Обработчик события "ПриСменеСтраницы" страниц "ГруппаЗданияВидыОбмена".
Процедура ГруппаЗданияВидыОбменаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УстановитьВидимостьИДоступностьКнопкиПроверкиСведений(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // ГруппаЗданияВидыОбменаПриСменеСтраницы()

&НаКлиенте
// Обработчик события "ПриСменеСтраницы" страниц "ГруппаЛСВидыОбмена".
Процедура ГруппаЛСВидыОбменаПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УстановитьВидимостьИДоступностьКнопкиПроверкиСведений(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // ГруппаЛСВидыОбменаПриСменеСтраницы()

&НаКлиенте
// Обработчик события "ПриСменеСтраницы" страниц "ГруппаВидыОбменаПлатежнымиДокументами".
Процедура ГруппаВидыОбменаПлатежнымиДокументамиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УстановитьВидимостьИДоступностьКнопкиПроверкиСведений(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // ГруппаВидыОбменаПлатежнымиДокументамиПриСменеСтраницы()

&НаКлиенте
// Обработчик события "ПриСменеСтраницы" страниц "ГруппаПУВидыОбменаСведениями".
Процедура ГруппаПУВидыОбменаСведениямиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УстановитьВидимостьИДоступностьКнопкиПроверкиСведений(ЭтаФорма);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // ГруппаПУВидыОбменаСведениямиПриСменеСтраницы()

#Область РаботаСПериодомМесяцСтрокой

&НаКлиенте
// Обработчик события "ПриИзменении" поля "МесяцСтрокой".
Процедура МесяцСтрокойПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ПериодВыгрузки", "МесяцСтрокой", Модифицированность);
	
	ОбработатьОкончаниеПериодаВыгрузкиПриИзмененииПараметров();
	
КонецПроцедуры // МесяцСтрокойПриИзменении()

&НаКлиенте
// Обработчик события "Регулирование" поля "МесяцСтрокой".
Процедура МесяцСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.ПериодВыгрузки", "МесяцСтрокой", Направление, Модифицированность);
	
	ОбработатьОкончаниеПериодаВыгрузкиПриИзмененииПараметров();
	
КонецПроцедуры // МесяцСтрокойРегулирование()

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "МесяцСтрокой".
Процедура МесяцСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("МесяцСтрокойНачалоВыбораЗавершение", ЭтотОбъект);
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ПериодВыгрузки", "МесяцСтрокой", ,ОписаниеОповещения);
	
КонецПроцедуры // МесяцСтрокойНачалоВыбора()

&НаКлиенте
// Процедура-продолжение обработчика "МесяцСтрокойНачалоВыбора()"
Процедура МесяцСтрокойНачалоВыбораЗавершение(СтруктураПараметров, ДополнительныеПараметры) Экспорт
	
	ОбработатьОкончаниеПериодаВыгрузкиПриИзмененииПараметров();
	
КонецПроцедуры // МесяцСтрокойНачалоВыбораЗавершение()

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "МесяцСтрокой".
Процедура МесяцСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры // МесяцСтрокойАвтоПодбор()

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "МесяцСтрокой".
Процедура МесяцСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры // МесяцСтрокойОкончаниеВводаТекста()

&НаКлиенте
// Процедура выполняет проверку при изменении значений начала и окончания периода,
// и при необходимости корректирует их.
Процедура ОбработатьОкончаниеПериодаВыгрузкиПриИзмененииПараметров()
	
	Если КонецМесяца(Объект.ПериодВыгрузки) > КонецМесяца(Объект.ПериодВыгрузкиОкончание) Тогда
		Объект.ПериодВыгрузкиОкончание = КонецМесяца(Объект.ПериодВыгрузки);
		УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодВыгрузкиОкончание", "МесяцСтрокойОкончаниеПериода");
	КонецЕсли;
	
КонецПроцедуры // ОбработатьОкончаниеПериодаВыгрузкиПриИзмененииПараметров()

#КонецОбласти

#Область РаботаСПериодомМесяцСтрокойОкончание

&НаКлиенте
// Обработчик события "ПриИзменении" поля "МесяцСтрокойОкончание".
Процедура МесяцСтрокойОкончаниеПериодаПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.ПериодВыгрузкиОкончание", "МесяцСтрокойОкончаниеПериода", Модифицированность);
	
	ОбработатьОкончаниеПериодаВыгрузкиПриИзмененииПараметров();
	
КонецПроцедуры // МесяцСтрокойОкончаниеПериодаПриИзменении()

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "МесяцСтрокойОкончание".
Процедура МесяцСтрокойОкончаниеПериодаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("МесяцСтрокойОкончаниеПериодаНачалоВыбораЗавершение", ЭтотОбъект);
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.ПериодВыгрузкиОкончание", "МесяцСтрокойОкончаниеПериода", , ОписаниеОповещения);
	
КонецПроцедуры // МесяцСтрокойОкончаниеПериодаНачалоВыбора()

&НаКлиенте
// Процедура-продолжение обработчика "МесяцСтрокойОкончаниеПериодаНачалоВыбора()"
Процедура МесяцСтрокойОкончаниеПериодаНачалоВыбораЗавершение(СтруктураПараметров, ДополнительныеПараметры) Экспорт
	
	ОбработатьОкончаниеПериодаВыгрузкиПриИзмененииПараметров();
	
КонецПроцедуры // МесяцСтрокойОкончаниеПериодаНачалоВыбораЗавершение()

&НаКлиенте
// Обработчик события "Регулирование" поля "МесяцСтрокойОкончание".
Процедура МесяцСтрокойОкончаниеПериодаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.ПериодВыгрузкиОкончание", "МесяцСтрокойОкончаниеПериода", Направление, Модифицированность);
	
	ОбработатьОкончаниеПериодаВыгрузкиПриИзмененииПараметров();
	
КонецПроцедуры // МесяцСтрокойОкончаниеПериодаРегулирование()

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "МесяцСтрокойОкончание".
Процедура МесяцСтрокойОкончаниеПериодаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры // МесяцСтрокойОкончаниеПериодаАвтоПодбор()

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "МесяцСтрокойОкончание".
Процедура МесяцСтрокойОкончаниеПериодаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры // МесяцСтрокойОкончаниеПериодаОкончаниеВводаТекста()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВидПериода".
Процедура ВидПериодаПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВидПериодаПриИзменении(Элемент, Объект.ВидПериода, Объект.НачалоПроизвольногоПериода, Объект.КонецПроизвольногоПериода, Период);
	УПЖКХ_ТиповыеМетодыКлиентСервер.ПереключитьТекущуюСтраницуВыбораПериода(Объект.ВидПериода, Элементы.ГруппаПоляВводаПериода);
	
КонецПроцедуры // ВидПериодаПриИзменении()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Период".
Процедура ПериодПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодПриИзменении(Элемент, Период, Объект.НачалоПроизвольногоПериода, Объект.КонецПроизвольногоПериода);
	
КонецПроцедуры // ПериодПриИзменении()

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "Период".
Процедура ПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПериодНачалоВыбораЗавершение", ЭтотОбъект);
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка, Объект.ВидПериода, Объект.НачалоПроизвольногоПериода, ОписаниеОповещения);
	
КонецПроцедуры // ПериодНачалоВыбора()

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля "Период".
Процедура ПериодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, Объект.ВидПериода, Период, Объект.НачалоПроизвольногоПериода, Объект.КонецПроизвольногоПериода);
	
КонецПроцедуры // ПериодОбработкаВыбора()

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "Период".
Процедура ПериодАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка, Объект.ВидПериода, Период, Объект.НачалоПроизвольногоПериода, Объект.КонецПроизвольногоПериода);
	
КонецПроцедуры // ПериодАвтоПодбор()

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "Период".
Процедура ПериодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, Объект.ВидПериода, Период, Объект.НачалоПроизвольногоПериода, Объект.КонецПроизвольногоПериода);
	
КонецПроцедуры // ПериодОкончаниеВводаТекста()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "НачалоПериодаДень".
Процедура НачалоПериодаДеньПриИзменении(Элемент)
	
	Объект.КонецПроизвольногоПериода = КонецДня(Объект.НачалоПроизвольногоПериода);
	
КонецПроцедуры // НачалоПериодаДеньПриИзменении()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВыборЛицевыхСчетов".
Процедура ВыборЛицевыхСчетовПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // ВыборЛицевыхСчетовПриИзменении()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ОтбиратьОплатыПоИсточнику".
Процедура ОтбиратьОплатыПоИсточникуПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // ОтбиратьОплатыПоИсточникуПриИзменении()

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВосстановитьНастройки();
	
	Если Объект.ВидВыгрузки = Перечисления.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.ПустаяСсылка() Тогда
		Объект.ВидВыгрузки = Перечисления.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.СведенияОЗданиях;
	КонецЕсли;
	
	Если Объект.ПериодВыгрузки = Дата(1, 1, 1) Тогда
		Объект.ПериодВыгрузки = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
		ПредПериодВыгрузки    = Объект.ПериодВыгрузки;
	КонецЕсли;
	
	Если Объект.ПериодВыгрузкиОкончание = Дата(1, 1, 1) Тогда
		Объект.ПериодВыгрузкиОкончание = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	КонецЕсли;
	
	Если Объект.Организация.Пустая() Тогда
		Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьОсновнуюОрганизацию();
	КонецЕсли;
	
	ЗаполнитьСведенияОбАктуальностиШаблонов();
	
	УстановитьПояснениеКТипуОрганизации(ЭтаФорма);
	
	ПолучитьТаблицуСоответствияВидовОбменаИТиповУО();
	УстановитьДоступныеВидыОбмена(ЭтаФорма);
	
	ЗаполнитьСоответствиеИменТаблицИВидовВыгрузки();
	
	СтруктураИменТаблицФормы = Новый Структура;
	
	// Установить доступность формы с учетом ключа СЛК.
	СЗК_МодульЗащитыКлиентСервер.УстановитьДоступностьФормыДляРедактирования(ЭтаФорма);
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.СохранитьНастройки()
Процедура ПриОткрытии(Отказ)
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодВыгрузки",          "МесяцСтрокой");
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.ПериодВыгрузкиОкончание", "МесяцСтрокойОкончаниеПериода");
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПодключитьРасширениеРаботыСФайламиПриОткрытии", 0.1, Истина);
	Иначе
		РасширениеРаботыСФайламиПодключено = Истина;
	КонецЕсли;
	
	#Если ВебКлиент Тогда
		Элементы.КаталогЗагрузкиIDПомещенийЗданий.Видимость            = Ложь;
		Элементы.ДекорацияПодсказкаЗагрузкаИДПомещенийЗданий.Видимость = Ложь;
		Элементы.КаталогЗагрузкиIDЛС.Видимость                         = Ложь;
		Элементы.ДекорацияПодсказкаЗагрузкаИДЛС.Видимость              = Ложь;
	#КонецЕсли
	
	// Проверка доступности функционала интеграции с ГИС ЖКХ.
	ПроверитьДоступностьФункционалаИнтеграцииСГИСЖКХ();
	
	Если Объект.ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.ПлатежныеДокументы") Тогда
		ПоместитьФайлШаблонаПДВоВременноеХранилище();
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ПроверитьРезультатСбораСведенийОбАктуальностиОбменов", 1, Истина);
	
	// Получение настроек учета кап. ремонта.
	мСтруктураНастроекКапРемонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Объект.Организация, Истина);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки();
	
КонецПроцедуры // ПередЗакрытием()

&НаКлиенте
// Обработка события "Оповещение" формы.
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПередачаТЗ" ИЛИ ИмяСобытия = "ПередачаВыбранныхЛС" Тогда
		ЭтаФорма.Активизировать();
		
		АдресВХранилище    = Параметр;
		МассивЛСПолученный = ПолучитьИзВременногоХранилища(АдресВХранилище);
		
		Для Каждого ЛицевойСчет Из МассивЛСПолученный Цикл
			Если Объект.ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.СведенияОЛицевыхСчетах") Тогда
				НоваяСтрока = Объект.ЛицевыеСчета.Добавить();
				НоваяСтрока.ЛицевойСчет = ЛицевойСчет;
			ИначеЕсли Объект.ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.ПлатежныеДокументы") Тогда
				НоваяСтрока = Объект.ЛицевыеСчетаПлатежныхДокументов.Добавить();
				НоваяСтрока.ЛицевойСчет = ЛицевойСчет;
			ИначеЕсли Объект.ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.СведенияОбОплатах") Тогда
				НоваяСтрока = Объект.ЛицевыеСчетаДляОтборов.Добавить();
				НоваяСтрока.ЛицевойСчет = ЛицевойСчет;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ИмяСобытия = "ДобавлениеПДДляОтзыва" Тогда
		ЭтаФорма.Активизировать();
		
		ЗаполнитьТаблицуОтзываемыхПДНаСервере(Параметр);
		
	ИначеЕсли ИмяСобытия = "ОбновитьИнтерфейс" Тогда
		
		УправлениеФормой(ЭтаФорма);
		
	ИначеЕсли ИмяСобытия = "Запись_Организации" Тогда
		
		УстановитьПояснениеКТипуОрганизации(ЭтаФорма);
		УстановитьДоступныеВидыОбмена(ЭтаФорма);
		УправлениеФормой(ЭтаФорма);
		
	ИначеЕсли ИмяСобытия = "ЗаписаныНастройкиУчетаКапремонта" Тогда
		// Получение настроек учета кап. ремонта.
		мСтруктураНастроекКапРемонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Объект.Организация, Истина);
		Объект.ВыгружатьЛицевыеСчетаКР = Ложь;
		УправлениеФормой(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

&НаСервере
// Заполненяет структуру сведений, какому виду выгрузки какие таблицы соовтетствуют. Пока не используется,
// возможно, понадобится при переработке механизма.
//
Процедура ЗаполнитьСоответствиеИменТаблицИВидовВыгрузки()
	
	СоответствиеИменТаблицИВидовВыгрузки = Новый Структура;
	
	// Сведения о многоквартирных домах и жилых домах.
	МассивТаблицМКД = Новый Массив;
	МассивТаблицМКД.Добавить("ХарактеристикиМКД");
	МассивТаблицМКД.Добавить("НежилыеПомещения");
	МассивТаблицМКД.Добавить("Подъезды");
	МассивТаблицМКД.Добавить("ЖилыеПомещения");
	МассивТаблицМКД.Добавить("Комнаты");
	
	ШаблонМКД = Обработки.УПЖКХ_ОбменДаннымиСГИСЖКХ.ПолучитьМакет("ШаблонФайлаВыгрузкиСведенийОМКД");
	//ШаблонМКД = "ШаблонФайлаВыгрузкиСведенийОМКД";
	
	МассивТаблицЖД = Новый Массив;
	МассивТаблицЖД.Добавить("ХарактеристикиЖД");
	МассивТаблицЖД.Добавить("Комнаты");
	
	ШаблонЖД = Обработки.УПЖКХ_ОбменДаннымиСГИСЖКХ.ПолучитьМакет("ШаблонФайлаВыгрузкиСведенийОЖД");
	// ШаблонЖД = "ШаблонФайлаВыгрузкиСведенийОЖД";
	
	// Сведения о договорах управления.
	МассивТаблицДУ = Новый Массив;
	МассивТаблицДУ.Добавить("ОбъектыУправления");
	МассивТаблицДУ.Добавить("Услуги");
	
	ШаблонДУ = Обработки.УПЖКХ_ОбменДаннымиСГИСЖКХ.ПолучитьМакет("ШаблонФайлаВыгрузкиДоговоровУправления");
	// ШаблонДУ = "ШаблонФайлаВыгрузкиДоговоровУправления";
	
	СтруктураСведенийОЗданиях = Новый Структура;
	СтруктураСведенийОЗданиях.Вставить("МассивТаблицМКД", МассивТаблицМКД);
	СтруктураСведенийОЗданиях.Вставить("ШаблонМКД",       ШаблонМКД);
	СтруктураСведенийОЗданиях.Вставить("МассивТаблицЖД",  МассивТаблицЖД);
	СтруктураСведенийОЗданиях.Вставить("ШаблонЖД",        ШаблонЖД);
	СтруктураСведенийОЗданиях.Вставить("МассивТаблицДУ",  МассивТаблицДУ);
	СтруктураСведенийОЗданиях.Вставить("ШаблонДУ",        ШаблонДУ);
	
	СоответствиеИменТаблицИВидовВыгрузки.Вставить("СведенияОЗданиях", СтруктураСведенийОЗданиях);
	
	// Сведения о лицевых счетах.
	МассивТаблицЛицевыхСчетов = Новый Массив;
	МассивТаблицЛицевыхСчетов.Добавить("ОсновныеСведенияЛС");
	МассивТаблицЛицевыхСчетов.Добавить("ПомещенияЛС");
	
	ШаблонЛС = Обработки.УПЖКХ_ОбменДаннымиСГИСЖКХ.ПолучитьМакет("ШаблонФайлаВыгрузкиЛицевыхСчетов");
	//ШаблонЛС = "ШаблонФайлаВыгрузкиЛицевыхСчетов";
	
	СтруктураСведенийОЛицевыхСчетах = Новый Структура;
	СтруктураСведенийОЛицевыхСчетах.Вставить("МассивТаблицЛС", МассивТаблицЛицевыхСчетов);
	СтруктураСведенийОЛицевыхСчетах.Вставить("ШаблонЛС",       ШаблонЛС);
	
	СоответствиеИменТаблицИВидовВыгрузки.Вставить("СведенияОЛС", СтруктураСведенийОЛицевыхСчетах);
	
	
	// Сведения о платежных документах.
	МассивТаблицПД = Новый Массив;
	МассивТаблицПД.Добавить("Разделы12");
	МассивТаблицПД.Добавить("Разделы36");
	МассивТаблицПД.Добавить("УслугиИсполнителя");
	
	СтруктураСведенийОПлатежныхДокументах = Новый Структура;
	СтруктураСведенийОПлатежныхДокументах.Вставить("МассивТаблицПД", МассивТаблицПД);
	
	СоответствиеИменТаблицИВидовВыгрузки.Вставить("СведенияОПД", СтруктураСведенийОПлатежныхДокументах);
	
КонецПроцедуры // ЗаполнитьСоответствиеИменТаблицИВидовВыгрузки()

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
// Обработчик команды "ВыгрузитьДанные".
Процедура ВыгрузитьДанные(Команда)
	
	ПодготовитьИОбработатьДанные();
	
КонецПроцедуры // ВыгрузитьДанные()

&НаКлиенте
// Обработчик команды "ПроверитьДанныеПередВыгрузкой".
Процедура ПроверитьДанныеПередВыгрузкой(Команда)
	
	ПодготовитьИОбработатьДанные(Истина);
	
КонецПроцедуры // ПроверитьДанныеПередВыгрузкой()

&НаКлиенте
// Обработчик команды "Настройка".
Процедура Настройка(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьПараметрыОбменаПослеЗакрытияФормыНастроек", ЭтаФорма);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОтображатьВсеДоступныеВидыОбмена",          Объект.ОтображатьВсеДоступныеВидыОбмена);
	ПараметрыФормы.Вставить("НеВыгружатьСведенияОКомнатахДляЖилыхДомов", Объект.НеВыгружатьСведенияОКомнатахДляЖилыхДомов);
	ПараметрыФормы.Вставить("КаталогВыгрузки",                           Объект.КаталогВыгрузки);
	ПараметрыФормы.Вставить("НастройкаСбораДанныхДляПД",                 Объект.НастройкаСбораДанныхДляПД);
	
	ОткрытьФорму("Обработка.УПЖКХ_ОбменДаннымиСГИСЖКХ.Форма.ФормаНастройки", ПараметрыФормы, ЭтаФорма,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // Настройка()

// ЧастоЗадаваемыеВопросы

&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры // Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку()

// Конец ЧастоЗадаваемыеВопросы

&НаКлиенте
// Обработчик команды "ОткрытьСтраницуСайтаСВажнойИнформациейОбОбменеСГИСЖКХ".
Процедура ОткрытьСтраницуСайтаСВажнойИнформациейОбОбменеСГИСЖКХ(Команда)
	
	НачатьЗапускПриложения(Новый ОписаниеОповещения("ОткрытьСтраницуСайтаСВажнойИнформациейОбОбменеСГИСЖКХЗапускаПриложения", ЭтотОбъект),
						   "https://vgkh.ru/faq/faq_tsj_3_0/aktualnost_shablonov/");
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения запуска приложения.
Процедура ОткрытьСтраницуСайтаСВажнойИнформациейОбОбменеСГИСЖКХЗапускаПриложения(КодВозврата, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры // ОткрытьСтраницуСайтаСВажнойИнформациейОбОбменеСГИСЖКХ()

&НаКлиенте
// Обработчик команды "ПодобратьЛицевыеСчета".
Процедура ПодобратьЛицевыеСчета(Команда)
	
	Если Объект.ЛицевыеСчетаДляОтборов.Количество() = 0 Тогда
		ОткрытьОбщуюФормуПодбораЛицевыхСчетов();
	Иначе
		ЗадатьВопросОбОчисткеТаблицыЛС("ОткрытьОбщуюФормуПодбораЛицевыхСчетов", "ЛицевыеСчетаДляОтборов");
	КонецЕсли;
	
КонецПроцедуры // ПодобратьЛицевыеСчета()

&НаКлиенте
// Обработчик команды "ПодобратьЛицевыеСчета".
Процедура ОчиститьТаблицуЛицевыхСчетовДляОтбора(Команда)
	
	ЗадатьВопросОбОчисткеТаблицыЛС("", "ЛицевыеСчетаДляОтборов");
	
КонецПроцедуры // ОчиститьТаблицуЛицевыхСчетовДляОтбора()

#Область ОбработчикиКомандПриборыУчета

&НаКлиенте
// Обработчик команды "ПриборыУчетаДобавитьПриборУчета".
//
Процедура ПриборыУчетаДобавитьПриборУчета(Команда)
	
	// Добавляем возможность выбора групп счетчиков для того, чтобы облегчить пользователям
	// ручной выбор счетчиков. При указании группы будут выбраны все счетчики, входящие в выбранную группу.
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.ГруппыИЭлементы);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьВыборОбъекта", ЭтотОбъект);
	ОткрытьФорму("Справочник.КВП_Счетчики.Форма.ФормаВыбора",ПараметрыОткрытия, ЭтотОбъект,,,,ОповещениеОЗакрытии,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ПриборыУчетаДобавитьПриборУчета()

&НаКлиенте
// Обработчик команды "ПриборыУчетаПодобратьОбъекты".
//
Процедура ПриборыУчетаПодобратьОбъекты(Команда)
	
	// ОДПУ могут быть установлены только на здания и подъезды.
	СписокВыбораОбъектов = Новый СписокЗначений;
	СписокВыбораОбъектов.Добавить("Здания, сооружения");
	СписокВыбораОбъектов.Добавить("Подъезды");
	Если Не Объект.ВидОбменаПУ = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОбменаПриборамиУчетаСГИСЖКХ.ВыгрузкаПоказанийОДПУ") Тогда
		СписокВыбораОбъектов.Добавить("Помещения");
		СписокВыбораОбъектов.Добавить("Лицевые счета");
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Список",     СписокВыбораОбъектов);
	ПараметрыОткрытия.Вставить("Заголовок", "Выберите тип объекта");
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьВыборТипаОбъектовПодбора", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ФормаВыбораИзСписка", ПараметрыОткрытия, ЭтотОбъект,,,,
													ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ПриборыУчетаПодобратьОбъекты()

&НаКлиенте
// Обработчик команды "ПриборыУчетаОчиститьТЧ".
//
Процедура ПриборыУчетаОчиститьТЧ(Команда)
	
	Объект.ПриборыУчета.Очистить();
	
КонецПроцедуры // ПриборыУчетаОчиститьТЧ()

&НаКлиенте
// Обработчик команды "ДобавитьВсеСчетчики".
//
Процедура ПриборыУчетаДобавитьВсеСчетчики(Команда)
	
	ПриборыУчетаДобавитьВсеСчетчикиНаСервере();
	
КонецПроцедуры // ПриборыУчетаДобавитьВсеСчетчики()

&НаКлиенте
// Обработчик команды "ПриборыУчетаДобавитьВсеНевыгруженныеВГИС".
Процедура ПриборыУчетаДобавитьВсеНеВыгруженныеВГИС(Команда)
	
	ПриборыУчетаДобавитьВсеНеВыгруженныеВГИСНаСервере();
	
КонецПроцедуры // ПриборыУчетаДобавитьВсеНевыгруженныеВГИС()

&НаКлиенте
// Обработчик команды "ОчиститьПриборыУчетаВыгруженныеВГИСЖКХ".
Процедура ОчиститьПриборыУчетаВыгруженныеВГИСЖКХ(Команда)
	
	ТекстВопроса = "Сведения о приборах учета, выгруженных в ГИС ЖКХ, будут удалены. Продолжить?";
	ОповещениеОтвет = Новый ОписаниеОповещения("ОбработатьОтветПользователяОбОчисткеПриборовУчета", ЭтотОбъект);
	ПоказатьВопрос(ОповещениеОтвет, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры // ОчиститьПриборыУчетаВыгруженныеВГИСЖКХ()

#КонецОбласти

#Область ОбработчикиКомандРасчетыСРСО

&НаКлиенте
// Обработчик команды "РасчетыУООчиститьТЧ".
//
Процедура РасчетыРСООчиститьТЧ(Команда)
	
	Объект.РасчетыРСО.Очистить();
	
КонецПроцедуры // РасчетыРСООчиститьТЧ()

&НаКлиенте
// Обработчик команды " ДоговораДПОИОчиститьТЧ".
//
Процедура ДоговораДПОИОчиститьТЧ(Команда)
	
	Объект.ДоговорыДПОИ.Очистить();
	
КонецПроцедуры // ДоговораДПОИОчиститьТЧ()

#КонецОбласти

#Область ОбработчикиКомандТаблицыЛицевыеСчета

&НаКлиенте
// Обработчик команды "ВыбратьВсеНевыгруженныеЛС".
Процедура ВыбратьВсеНевыгруженныеЛС(Команда)
	
	Если Объект.ЛицевыеСчета.Количество() = 0 Тогда
		ВыбратьВсеНевыгруженныеЛСНаСервереЛицевыеСчета();
	Иначе
		ЗадатьВопросОбОчисткеТаблицыЛС("ВыбратьВсеНевыгруженныеЛСНаСервереЛицевыеСчетаКлиент", "ЛицевыеСчета");
	КонецЕсли;
	
КонецПроцедуры // ВыбратьВсеНевыгруженныеЛС()

&НаКлиенте
// Обработчик команды "КомандаЗаполнитьЛССОтбором".
Процедура КомандаЗаполнитьЛССОтбором(Команда)
	
	Если Объект.ЛицевыеСчета.Количество() = 0 Тогда
		ОткрытьФормуПодбораОбъектов();
	Иначе
		ЗадатьВопросОбОчисткеТаблицыЛС("ОткрытьФормуПодбораОбъектов", "ЛицевыеСчета");
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьЛССОтбором()

&НаКлиенте
// Обработчик команды "КомандаЗаполнитьЛСПодбором".
Процедура КомандаЗаполнитьЛСПодбором(Команда)
	
	Если Объект.ЛицевыеСчета.Количество() = 0 Тогда
		ОткрытьФормуВыбораЛицевыхСчетовИзСправочника();
	Иначе
		ЗадатьВопросОбОчисткеТаблицыЛС("ОткрытьФормуВыбораЛицевыхСчетовИзСправочника", "ЛицевыеСчета");
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьЛСПодбором()

&НаКлиенте
// Обработчик команды "ОчиститьЛицевыеСчетаВыгруженныеВГИСЖКХ".
//
Процедура ОчиститьЛицевыеСчетаВыгруженныеВГИСЖКХ(Команда)
	
	ТекстВопроса = "Сведения о лицевых счетах, выгруженных в ГИС ЖКХ, будут удалены. Продолжить?";
	ОповещениеОтвет = Новый ОписаниеОповещения("ОбработатьОтветПользователяОбОчисткеЛицевыхСчетов", ЭтотОбъект);
	ПоказатьВопрос(ОповещениеОтвет, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры // ОчиститьЛицевыеСчетаВыгруженныеВГИСЖКХ()

#КонецОбласти

#Область ОбработчикиКомандТаблицыПлатежныеДокументы

&НаКлиенте
// Обработчик команды "ВыбратьВсеНевыгруженныеЛСПлатежныеДокументы".
//
Процедура ВыбратьВсеНевыгруженныеЛСПлатежныеДокументы(Команда)
	
	Если Объект.ЛицевыеСчетаПлатежныхДокументов.Количество() = 0 Тогда
		ВыбратьВсеНевыгруженныеЛСНаСервереПлатежныеДокументы();
	Иначе
		ЗадатьВопросОбОчисткеТаблицыЛС("ВыбратьВсеНевыгруженныеЛСНаСервереПлатежныеДокументыКлиент", "ЛицевыеСчетаПлатежныхДокументов");
	КонецЕсли;
	
КонецПроцедуры // ВыбратьВсеНевыгруженныеЛСПлатежныеДокументы()

&НаКлиенте
// Обработчик команды "КомандаЗаполнитьЛСПодборомПлатежныеДокументы".
//
Процедура КомандаЗаполнитьЛСПодборомПлатежныеДокументы(Команда)
	
	Если Объект.ЛицевыеСчетаПлатежныхДокументов.Количество() = 0 Тогда
		ОткрытьФормуВыбораЛицевыхСчетовИзСправочника();
	Иначе
		ЗадатьВопросОбОчисткеТаблицыЛС("ОткрытьФормуВыбораЛицевыхСчетовИзСправочника", "ЛицевыеСчетаПлатежныхДокументов");
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьЛСПодборомПлатежныеДокументы()

&НаКлиенте
// Обработчик команды "КомандаЗаполнитьЛССОтборомПлатежныеДокументы".
//
Процедура КомандаЗаполнитьЛССОтборомПлатежныеДокументы(Команда)
	
	Если Объект.ЛицевыеСчетаПлатежныхДокументов.Количество() = 0 Тогда
		ОткрытьФормуПодбораОбъектов();
	Иначе
		ЗадатьВопросОбОчисткеТаблицыЛС("ОткрытьФормуПодбораОбъектов", "ЛицевыеСчетаПлатежныхДокументов");
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьЛССОтборомПлатежныеДокументы()

#КонецОбласти

#Область ОбработчикиКомандВкладкиЗагрузкаИдентфикаторовПД

&НаКлиенте
// Обработчик команды "ВыполнитьПоискПДСИдентификаторами".
//
Процедура ВыполнитьПоискПДСИдентификаторами(Команда)
	
	Если ПустаяСтрока(Объект.КаталогЗагрузкиПД) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран каталог поиска файлов платежных документов.");
		Возврат;
	КонецЕсли;
	
	Если ТаблицаИдентификаторовПД.Количество() > 0 Тогда
		ТекстВопроса = "Таблица идентификаторов платежных документов будет очищена. Продолжить?";
		ОповещениеОтвет = Новый ОписаниеОповещения("ОбработатьОтветПользователяОбОчисткеТаблицыИДПД", ЭтотОбъект);
		ПоказатьВопрос(ОповещениеОтвет, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ВыполнитьПоискПДСИдентификаторамиПродолжение();
	
КонецПроцедуры // ВыполнитьПоискПДСИдентификаторами()

&НаКлиенте
// Обработчик команды "ЗаполнитьИдентификаторыНайденныхПД".
//
Процедура ЗаполнитьИдентификаторыНайденныхПД(Команда)
	
	ЗаполнитьИдентификаторыНайденныхПДНаСервере();
	
КонецПроцедуры // ЗаполнитьИдентификаторыНайденныхПД()

#КонецОбласти

#Область ОбработчикиКомандВкладкиВыгрузкиПД

&НаКлиенте
// Обработчик команды ВыбратьПлатежныеДокументыДляОтзыва.
//
Процедура ВыбратьПлатежныеДокументыДляОтзыва(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Период", НачалоМесяца(Объект.ПериодВыгрузки));
	
	ФормаВыбора = ОткрытьФорму("РегистрСведений.УПЖКХ_ПлатежныеДокументыВыгруженныеВГИС.Форма.ФормаВыбора", ПараметрыОткрытия, ЭтотОбъект);
	
КонецПроцедуры // ВыбратьПлатежныеДокументыДляОтзыва()

&НаКлиенте
// Обработчик команды "СформироватьФайлОтзываПлатежныхДокументов".
//
Процедура СформироватьФайлОтзываПлатежныхДокументов(Команда)
	
	Если ТаблицаОтзываемыхПД.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбрано ни одного платежного документа");
		Возврат;
	КонецЕсли;
	
	МакетОтзываПД = ПолучитьМакетОтзываПДНаСервере();
	
	// Открываем excel файл.
	Попытка
		Эксель = Новый COMОбъект("Excel.Application");
	Исключение
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не удалось открыть файл данных для чтения!
				  |Возможно файл поврежден или отсутствует приложение для чтения файла.");
		Возврат;
	КонецПопытки;
	
	ПутьКФайлу = Объект.КаталогВыгрузки + "\" + "Сведения об отзыве платежных документов от " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy HH.mm.ss'") + ".xlsx";
	ИмяФайла   = ПутьКФайлу;
	
	МакетОтзываПД.Записать(ИмяФайла);
	Книга = Эксель.WorkBooks.Open(ИмяФайла);
	
	ЛистЭксель = Книга.WorkSheets(1);
	
	КоличествоОтзываемыхПД = ТаблицаОтзываемыхПД.Количество();
	Для Счетчик = 1 По КоличествоОтзываемыхПД Цикл
		
		ТекущаяСтрока = ТаблицаОтзываемыхПД[Счетчик - 1];
		ЛистЭксель.cells(Счетчик + 1, 1).value = ТекущаяСтрока.ИдентификаторПД;
		
	КонецЦикла;
	
	// Закрываем excel файл.
	Попытка
		Эксель.ActiveWorkbook.Close(-1,);
		Эксель.Application.Quit(); 
		Эксель.Quit();
		Эксель = 0;
	Исключение
	КонецПопытки;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Сформирован файл " + ПутьКФайлу + "...");
	
КонецПроцедуры // СформироватьФайлОтзываПлатежныхДокументов()

#КонецОбласти

#Область ОбработчикиКомандЗагрузкиИдентификаторовЕЛС

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "КаталогЗагрузкиIDЛС".
//
Процедура КаталогЗагрузкиIDЛСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Заголовок                   = "Выбор каталога файлов";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("КаталогЗагрузкиIDЛСНачалоВыбораВыбрать", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения выбора каталога.
//
Процедура КаталогЗагрузкиIDЛСНачалоВыбораВыбрать(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		Объект.КаталогЗагрузкиIDЛС = ВыбранныеФайлы[0];
	КонецЕсли;
	
КонецПроцедуры // КаталогЗагрузкиIDЛСНачалоВыбора()

&НаКлиенте
// Обработчик события "Открытие" поля "КаталогЗагрузкиIDЛС".
//
Процедура КаталогЗагрузкиIDЛСОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачатьЗапускПриложения(Новый ОписаниеОповещения("КаталогЗагрузкиIDЛСОткрытиеЗапускПриложения", ЭтотОбъект),
						   "explorer " + Объект.КаталогЗагрузкиIDЛС);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения запуска приложения.
Процедура КаталогЗагрузкиIDЛСОткрытиеЗапускПриложения(КодВозврата, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры // КаталогЗагрузкиIDЛСОткрытие()

&НаКлиенте
// Обработчик команды "ЛицевыеСчетаПоискИдентификаторов".
//
Процедура ЛицевыеСчетаПоискИдентификаторов(Команда)
	
	#Если НЕ ВебКлиент Тогда
	Если ПустаяСтрока(Объект.КаталогЗагрузкиIDЛС) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран каталог поиска файлов экспорта ЕЛС.");
		Возврат;
	КонецЕсли;
	#КонецЕсли
	
	Если ТаблицаИдентификаторовЛС.Количество() > 0 Тогда
		ТекстВопроса = "Таблица идентификаторов лицевых счетов будет очищена. Продолжить?";
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ЭтоПоискЕЛС", Истина);
		ОповещениеОтвет = Новый ОписаниеОповещения("ОбработатьОтветПользователяОбОчисткеТаблицыИдентификаторовЕЛСиПомещений", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОповещениеОтвет, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ПоискИдентификаторовЕЛСиПомещенийПродолжение(Истина);
	
КонецПроцедуры // ЛицевыеСчетаПоискИдентификаторов()

&НаКлиенте
// Обработчик команды "ЛицевыеСчетаЗаписатьИдентификаторы".
//
Процедура ЛицевыеСчетаЗаписатьИдентификаторы(Команда)
	
	Если ТаблицаИдентификаторовЛС.Количество() > 0 Тогда
		ТекстВопроса = "Все идентификаторы лицевых счетов будут перезаписаны из данных таблицы. Продолжить?";
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ЭтоПоискЕЛС", Истина);
		ОповещениеОтвет = Новый ОписаниеОповещения("ОбработатьОтветПользователяОЗаписиИдентификаторовЕЛСиПомещений", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОповещениеОтвет, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ЗаписатьИдентификаторыЕЛСиПомещенийНаСервере(Истина);
	
КонецПроцедуры // ЛицевыеСчетаЗаписатьИдентификаторы()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ЗагружатьИдентификаторыЛицевыхСчетовКР".
Процедура ЗагружатьИдентификаторыЛицевыхСчетовКРПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // ЗагружатьИдентификаторыЛицевыхСчетовКРПриИзменении()

#КонецОбласти

#Область ОбработчикиКомандЗагрузкиИдентификаторовПомещенийИЗданий

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "КаталогЗагрузкиIDПомещенийЗданий".
//
Процедура КаталогЗагрузкиIDПомещенийЗданийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Заголовок                   = "Выбор каталога файлов";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("КаталогЗагрузкиIDПомещенийЗданийНачалоВыбораВыбрать", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения выбора каталога.
//
Процедура КаталогЗагрузкиIDПомещенийЗданийНачалоВыбораВыбрать(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		Объект.КаталогЗагрузкиIDПомещенийЗданий = ВыбранныеФайлы[0];
	КонецЕсли;
	
КонецПроцедуры // КаталогЗагрузкиIDПомещенийЗданийНачалоВыбора()

&НаКлиенте
// Обработчик события "Открытие" поля "КаталогЗагрузкиIDПомещенийЗданий".
//
Процедура КаталогЗагрузкиIDПомещенийЗданийОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачатьЗапускПриложения(Новый ОписаниеОповещения("КаталогЗагрузкиIDПомещенийЗданийОткрытиеЗапускПриложения", ЭтотОбъект),
						   "explorer " + Объект.КаталогЗагрузкиIDПомещенийЗданий);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения запуска приложения.
Процедура КаталогЗагрузкиIDПомещенийЗданийОткрытиеЗапускПриложения(КодВозврата, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры // КаталогЗагрузкиIDПомещенийЗданийОткрытие()

&НаКлиенте
// Обработчик команды "ПомещенияЗданияПоискИдентификаторов".
//
Процедура ПомещенияЗданияПоискИдентификаторов(Команда)
	
	#Если НЕ ВебКлиент Тогда
	Если ПустаяСтрока(Объект.КаталогЗагрузкиIDПомещенийЗданий) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран каталог поиска файлов экспорта зданий и помещений.");
		Возврат;
	КонецЕсли;
	#КонецЕсли
	
	Если ТаблицаИдентификаторовПомещенийЗданий.Количество() > 0 Тогда
		ТекстВопроса = "Таблица идентификаторов помещений и зданий будет очищена. Продолжить?";
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ЭтоПоискЕЛС", Ложь);
		ОповещениеОтвет = Новый ОписаниеОповещения("ОбработатьОтветПользователяОбОчисткеТаблицыИдентификаторовЕЛСиПомещений", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОповещениеОтвет, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ПоискИдентификаторовЕЛСиПомещенийПродолжение(Ложь);
	
КонецПроцедуры // ПомещенияЗданияПоискИдентификаторов()

&НаКлиенте
// Обработчик команды "ПомещенияЗданияЗаписатьИдентификаторы".
//
Процедура ПомещенияЗданияЗаписатьИдентификаторы(Команда)
	
	Если ТаблицаИдентификаторовПомещенийЗданий.Количество() > 0 Тогда
		ТекстВопроса = "Все идентификаторы зданий и помещений будут перезаписаны из данных таблицы. Продолжить?";
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ЭтоПоискЕЛС", Ложь);
		ОповещениеОтвет = Новый ОписаниеОповещения("ОбработатьОтветПользователяОЗаписиИдентификаторовЕЛСиПомещений", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОповещениеОтвет, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ЗаписатьИдентификаторыЕЛСиПомещенийНаСервере(Ложь);
	
КонецПроцедуры // ПомещенияЗданияЗаписатьИдентификаторы()

#КонецОбласти

#Область ОбработчикиКомандТаблицыОтчетыТСЖ

&НаКлиенте
// Обработчик команды "КомандаЗаполнитьОтчетыТСЖ".
// 
Процедура КомандаЗаполнитьОтчетыТСЖ(Команда)
	
	Если Объект.Организация.Пустая() Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбрана организация.", , "Организация", "Объект");
		Возврат;
	ИначеЕсли Объект.ОтчетыТСЖ.Количество() = 0 Тогда
		ЗаполнитьТаблицуОтчетовТСЖ();
	Иначе
		ЗадатьВопросОбОчисткеТаблицыЛС("ЗаполнитьТаблицуОтчетовТСЖКлиент", "ОтчетыТСЖ");
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьОтчетыТСЖ()

&НаКлиенте
// Вызывает серверную процедуру из обработчика обновления
Процедура ЗаполнитьТаблицуОтчетовТСЖКлиент() Экспорт

	ЗаполнитьТаблицуОтчетовТСЖ();

КонецПроцедуры


&НаСервере
// Процедура заполняет табличную часть "Отчеты ТСЖ" на основании данных документов "Смета ТСЖ".
// 
Процедура ЗаполнитьТаблицуОтчетовТСЖ()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_СметаТСЖ.Ссылка КАК ОтчетТСЖ
	|ИЗ
	|	Документ.КВП_СметаТСЖ КАК КВП_СметаТСЖ
	|ГДЕ
	|	НЕ КВП_СметаТСЖ.ПометкаУдаления
	|	И КВП_СметаТСЖ.НачалоПериода >= &ПериодВыгрузки
	|	И КВП_СметаТСЖ.КонецПериода <= &ПериодВыгрузкиОкончание
	|	И КВП_СметаТСЖ.Организация = &Организация";
	
	Запрос.УстановитьПараметр("Организация",             Объект.Организация);
	Запрос.УстановитьПараметр("ПериодВыгрузки",          НачалоМесяца(Объект.ПериодВыгрузки));
	Запрос.УстановитьПараметр("ПериодВыгрузкиОкончание", КонецМесяца(Объект.ПериодВыгрузкиОкончание));
	
	Объект.ОтчетыТСЖ.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры // ЗаполнитьТаблицуОтчетовТСЖ()

#КонецОбласти

#КонецОбласти

#Область МеханизмыСбораИВыгрузкиДанных

&НаСервере
// Готовит данные и формирует файлы в случае, если это возможно сделать на сервере.
Процедура ПодготовитьДанныеДляВыгрузкиИСформироватьФайлыНаСервере(ВсеДанныеЗаполнены, ФункционалДоступен, ЕстьОшибки, КоличествоФайлов, МакетМКД, МакетЖД, МакетДУ, МакетЛС, 
																  МакетПД, МакетСФКР, МакетЗаявокНаДобВА, МакетПУ, МакетРасчетыРСО, МакетДПОИ, МакетОтчетовТСЖ, МакетЧленовТСЖ,
																  МакетОплат, ЭтоПроверкаСведений, ЭтоВебКлиент = Ложь)
	
	ПодготовитьДанныеДляВыгрузки(ВсеДанныеЗаполнены, ФункционалДоступен, ЕстьОшибки, МакетМКД,МакетЖД, МакетДУ, МакетЛС, МакетПД, МакетСФКР, МакетЗаявокНаДобВА, МакетПУ, 
								 МакетРасчетыРСО, МакетДПОИ, МакетОтчетовТСЖ, МакетЧленовТСЖ, МакетОплат, ЭтоПроверкаСведений);
	
	Если Не ЕстьОшибки И ФункционалДоступен И Не ЭтоПроверкаСведений Тогда
		
		СформироватьФайлы(КоличествоФайлов, Объект.ВидВыгрузки, ВыгружатьСведенияОЗданиях, ВыгружатьДоговорыУправления, ВыгружатьСпособыФормированияФондаКР, ВыгружатьЗаявкиНаДобавлениеВременныхАдресов,
						  Объект.КаталогВыгрузки, МакетЗаявокНаДобВА, МакетСФКР, МакетМКД, МакетЖД, МакетДУ, МакетЛС, МакетПУ, МакетРасчетыРСО, МакетДПОИ, МакетОтчетовТСЖ, МакетЧленовТСЖ, МакетОплат,
						  ДополнительныеСоглашенияДУ, ДополнительныеУслугиДУ, КоммунальныеУслугиДУ, ТаблицаДУ, ТаблицаЖД, ТаблицаИнформацииОЖД, ТаблицаЖилыхПомещений, ТаблицаИнформацииОЖилыхПомещениях, ТаблицаКодовУслуг, ТаблицаБлоковЖД, ТаблицаКомнатЖД, 
						  ТаблицаКомнатМКД, ТаблицаЛицевыхСчетов, ТаблицаМКД, ТаблицаИнформацииОМКД, ТаблицаНежилыхПомещений,ТаблицаИнформацииОНежилыхПомещениях, ТаблицаПодъездов, КоличествоПартийМКД, КоличествоПартийЖД, СформированныеФайлы, ЭтотОбъект, ТипУО,
						  СтруктураИменТаблицФормы, ТаблицаЗаявокНаДобВА, ТаблицаСФКР, ТаблицаСостоянияРасчетовРСОПериоды, ТаблицаСостоянияРасчетовРСОДоговоры, ТаблицаОтчетовТСЖ, Истина, ЭтоВебКлиент);
						  
		ПриНеобходимостиСохранитьВыгруженныеДанные(ЭтотОбъект, Объект.ВидВыгрузки, Объект.ВидОбменаПУ, Объект.ПериодВыгрузки, ТаблицаЛицевыхСчетов);
		
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьДанныеДляВыгрузкиИСформироватьФайлыНаСервере()

&НаКлиенте
// Готовит данные для выгрузки и инициирует либо выгрузку, либо проверку данных.
Процедура ПодготовитьИОбработатьДанные(ЭтоПроверкаСведений = Ложь)
	
	Отказ = Ложь;
	
	НачатьЗамерВремениВыполнения();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодготовитьИОбработатьДанныеЗавершение", ЭтотОбъект,
												  Новый Структура("ЭтоПроверкаСведений", ЭтоПроверкаСведений));
	
	ПроверитьЗаполнениеРеквизитов(Отказ, ОписаниеОповещения);
	
КонецПроцедуры // ПодготовитьИОбработатьДанные()

&НаКлиенте
// Обработчик завершения подготовки и обработки данных.
Процедура ПодготовитьИОбработатьДанныеЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	Перем МакетМКД;
	Перем МакетЖД;
	Перем МакетДУ;
	Перем МакетЛС;
	Перем МакетПД;
	Перем МакетСФКР;
	Перем МакетЗаявокНаДобВА;
	Перем МакетПУ;
	Перем МакетРасчетыРСО;
	Перем МакетДПОИ;
	Перем МакетОтчетовТСЖ;
	Перем МакетЧленовТСЖ;
	Перем МакетОплат;
	Перем Эксель;
	
	ЭтоПроверкаСведений = ДополнительныеПараметры.ЭтоПроверкаСведений;
	
	Если Не РасширениеРаботыСФайламиПодключено Тогда
		// Веб-клиент. Если не удалось подключить расширение для работы с файлами, пытаемся формировать на сервере.
		ФормироватьФайлыНаКлиенте = Ложь;
	Иначе
		// Приоритет формирования файлов отдаем серверу. Если формировать на сервере нельзя, пытаемся формировать на клиенте.
		ФормироватьФайлыНаКлиенте = НеобходимоФормироватьФайлыНаКлиенте(Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СформированныеФайлы.Очистить();
	ТаблицаСНезаполненнымиДанными.Очистить();
	
	КоличествоФайлов   = 0;
	ВсеДанныеЗаполнены = Истина;
	ФункционалДоступен = Истина;
	ЕстьОшибки         = Ложь;
	
	Если ФормироватьФайлыНаКлиенте Тогда
		// Если формируем файлы на клиенте, обращаемся к серверу только для сбора данных и редактирования регистра с выгруженными л/с.
		// Все остальные операции выполняем на клиенте.
		
		ЭтоВебКлиент = Ложь;
		
		#Если ВебКлиент Тогда
			ЭтоВебКлиент = Истина;
		#КонецЕсли
		
		ПодготовитьДанныеДляВыгрузки(ВсеДанныеЗаполнены, ФункционалДоступен, ЕстьОшибки, МакетМКД, МакетЖД, МакетДУ, МакетЛС, МакетПД, МакетСФКР, МакетЗаявокНаДобВА,
									 МакетПУ, МакетРасчетыРСО, МакетДПОИ, МакетОтчетовТСЖ, МакетЧленовТСЖ, МакетОплат, ЭтоПроверкаСведений);
		
		Если Не ЕстьОшибки И ФункционалДоступен И Не ЭтоПроверкаСведений Тогда
			СформироватьФайлыНаКлиенте(КоличествоФайлов, МакетМКД, МакетЖД, МакетДУ, МакетЛС, МакетПД, МакетСФКР, МакетЗаявокНаДобВА, МакетПУ, МакетРасчетыРСО, 
									   МакетДПОИ, МакетОтчетовТСЖ, МакетЧленовТСЖ, МакетОплат, ЭтоВебКлиент);
			ПриНеобходимостиСохранитьВыгруженныеДанные(ЭтотОбъект, Объект.ВидВыгрузки, Объект.ВидОбменаПУ, Объект.ПериодВыгрузки, ТаблицаЛицевыхСчетов);
		КонецЕсли;
		
	Иначе
		// Если формируем файлы на сервере, передаем полноценное управление на сервер, который вернет нам файлы в виде двоичных данных через
		// таблицу формы "СформированныеФайлы".
		
		#Если ВебКлиент Тогда
		Попытка
			ПодготовитьДанныеДляВыгрузкиИСформироватьФайлыНаСервере(ВсеДанныеЗаполнены, ФункционалДоступен, ЕстьОшибки, КоличествоФайлов, МакетМКД, МакетЖД, МакетДУ, МакетЛС,
																МакетПД, МакетСФКР, МакетЗаявокНаДобВА, МакетПУ, МакетРасчетыРСО, МакетДПОИ, МакетОтчетовТСЖ, МакетЧленовТСЖ,
																МакетОплат, ЭтоПроверкаСведений, Истина);
			Обработчик = Новый ОписаниеОповещения("ИзвлечьФайлыВебКлиент", ЭтотОбъект);
			РаботаСФайламиСлужебныйКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(Обработчик);
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			ТекстСистемнойОшибкиМС = "Ошибка при вызове метода контекста (Ошибка при вызове метода контекста (Open)): Произошла исключительная ситуация (Microsoft Excel): Невозможно получить свойство Open класса Workbooks";
			ТекстСистемнойОшибкиМС2 = "Ошибка при вызове метода контекста (Open): Произошла исключительная ситуация (Microsoft Excel): Невозможно получить свойство Open класса Workbooks";
			Если ТекстОшибки = ТекстСистемнойОшибкиМС ИЛИ ТекстОшибки = ТекстСистемнойОшибкиМС2 Тогда
				СтрокаСсылки = Новый ФорматированнаяСтрока("инструкции.",,,,"https://vgkh.ru/faq/faq_tsj_3_0/obhod-oshibki-excel/");
				ТекстСообщения = Новый ФорматированнаяСтрока("Выгрузка сведений завершилась системной ошибкой. Для того чтобы обойти ее необходимо выполнить действия указанные в ", СтрокаСсылки);
				ПоказатьПредупреждение(,ТекстСообщения);
			Иначе ПоказатьПредупреждение (,УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьОписаниеОшибки(УПЖКХ_ОбщегоНазначенияКлиентСервер.ПодготовитьТекстОбОшибкеДляПользователя("<error>Не удалось сформировать данные, из-за возникшей ошибки, пожалуйста, передайте данные о ней разработчику программы", ОписаниеОшибки())));
			КонецЕсли;
			Возврат;
		КонецПопытки;
		#Иначе
		ПодготовитьДанныеДляВыгрузкиИСформироватьФайлыНаСервере(ВсеДанныеЗаполнены, ФункционалДоступен, ЕстьОшибки, КоличествоФайлов, МакетМКД, МакетЖД, МакетДУ, МакетЛС,
																МакетПД, МакетСФКР, МакетЗаявокНаДобВА, МакетПУ, МакетРасчетыРСО, МакетДПОИ, МакетОтчетовТСЖ, МакетЧленовТСЖ,
																МакетОплат, ЭтоПроверкаСведений);
		ИзвлечьФайлы();
		#КонецЕсли
	КонецЕсли;
	
	// Если функционал не доступен, тогда открываем форму поддержки пользователей базовых версий.
	Если Не ФункционалДоступен Тогда
		ПроверитьДоступностьФункционалаИнтеграцииСГИСЖКХ();
		
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоПроверкаСведений Тогда
		Если КоличествоФайлов = 0 Тогда
			// Если файлы не сформированы, то сообщаем об ошибке.
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Файлы не сформированы.");
		Иначе
			
			// Если сформированы, то показываем в виде предупреждения.
			Если ВсеДанныеЗаполнены Тогда
				ТекстПредупреждения = "Формирование файлов завершено.";
			Иначе
				ТекстПредупреждения = "Формирование файлов завершено." 
									  + Символы.ПС
									  + "Сведения по некоторым объектам не были выгружены, т.к. не заполнены обязательные к выгрузке данные.";
			КонецЕсли;
			
			ПоказатьПредупреждение(, ТекстПредупреждения);
			
		КонецЕсли;
	КонецЕсли;
	
	СформироватьОтчетОбОбъектахСНезаполненнымиДанными(ЭтоПроверкаСведений);
	
	УдалитьРеквизитыФормыНаСервере();
	
	ОстановитьЗамерВремениВыполнения();
	
КонецПроцедуры // ПодготовитьИОбработатьДанныеЗавершение()


&НаСервере
// Собирает и компонует данные для выгрузки в файлы.
// Таблицы с подготовленными данными записываем в таблицы формы, чтобы организовать их хранение на клиенте.
//
Процедура ПодготовитьДанныеДляВыгрузки(ВсеДанныеЗаполнены, ФункционалДоступен, ЕстьОшибки, МакетМКД, МакетЖД, МакетДУ, МакетЛС, МакетПД, МакетСФКР, МакетЗаявокНаДобВА, 
									   МакетПУ, МакетРасчетыРСО, МакетДПОИ, МакетОтчетовТСЖ, МакетЧленовТСЖ, МакетОплат, ЭтоПроверкаСведений)
	
	КоличествоПотоков           = 0;
	ИспользоватьМногопоточность = ОпределитьНеобходимостьИспользованияМногопоточности(КоличествоПотоков);
	
	// Если используется многопоточность, подготовим параметры для ее использования.
	Если ИспользоватьМногопоточность Тогда
		
		// Количество объектов для распределения.
		КоличествоОбъектовВсего          = ОпределитьОбщееКоличествоОбъектовДляРаспределенияПоПотокам();
		
		// Подготавливаем количество объектов, распределяемое на каждый поток.
		КоличествоОбъектовНаПоток = Цел(КоличествоОбъектовВсего / КоличествоПотоков);
		
		// Подготавливаем массив фоновых заданий, в которых будет
		// выполняться формирование файлов обмена.
		МассивФоновыхЗаданий = Новый Массив;
		
		// Массив для хранения адресов структур, возвращаемых из потоков.
		МассивАдресовСтруктурДанных = Новый Массив;
		
	КонецЕсли;
	
	Если Объект.ВидВыгрузки = Перечисления.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.СведенияОЗданиях Тогда
		// Готовим данные.
		МассивЗданий = Объект.Здания.Выгрузить().ВыгрузитьКолонку("Здание");
		
		Если ТипУО = Перечисления.УПЖКХ_ТипыОрганизаций.РСО Тогда
			МакетМКД = Обработки.УПЖКХ_ОбменДаннымиСГИСЖКХ.ПолучитьМакет("РСО_ШаблонФайлаВыгрузкиСведенийОМКД");
			МакетЖД  = Обработки.УПЖКХ_ОбменДаннымиСГИСЖКХ.ПолучитьМакет("РСО_ШаблонФайлаВыгрузкиСведенийОЖД");
			
			СтруктураДанных = УПЖКХ_ИнтеграцияСГИСЖКХВажныеМеханизмы.ПолучитьДанныеДляВыгрузкиСведенийОЗданиях(МассивЗданий, Объект.ПериодВыгрузки, Объект.НеВыгружатьСведенияОКомнатахДляЖилыхДомов);
			
			Если СтруктураДанных = Неопределено Тогда
				ФункционалДоступен = Ложь;
				Возврат;
			КонецЕсли;
			
			ТаблМКД              = СтруктураДанных.ТаблицаМКД;
			ТаблЖД               = СтруктураДанных.ТаблицаЖД;
			ТаблБлоков           = СтруктураДанных.ТаблицаБлоковЖД;
			ТаблЖилыхПомещений   = СтруктураДанных.ТаблицаЖилыхПомещений;
			ТаблНежилыхПомещений = СтруктураДанных.ТаблицаНежилыхПомещений;
			ТаблКомнатМКД        = СтруктураДанных.ТаблицаКомнатМКД;
			ТаблКомнатЖД         = СтруктураДанных.ТаблицаКомнатЖД;
			
			ОтсеятьЗданияСНезаполненнымиДаннымиДляРСО(ТаблМКД, ТаблЖД, ТаблЖилыхПомещений, ТаблНежилыхПомещений, ТаблКомнатМКД, ТаблКомнатЖД, ВсеДанныеЗаполнены, 
													  ТаблицаСНезаполненнымиДанными, ЭтоПроверкаСведений);
			
			// Разбиваем на партии, чтобы размеры файлов не превышали ограничения.
			ПересчитатьКоличествоПомещенийДляКаждогоЗдания(ТаблМКД, ТаблЖД, ТаблЖилыхПомещений, ТаблНежилыхПомещений, ТаблКомнатМКД, ТаблКомнатЖД, КоличествоПартийЖД, КоличествоПартийМКД);
			
			ТаблицаМКД.Загрузить(ТаблМКД);
			ТаблицаЖД.Загрузить(ТаблЖД);
			ТаблицаЖилыхПомещений.Загрузить(ТаблЖилыхПомещений);
			ТаблицаНежилыхПомещений.Загрузить(ТаблНежилыхПомещений);
			ТаблицаКомнатМКД.Загрузить(ТаблКомнатМКД);
			ТаблицаКомнатЖД.Загрузить(ТаблКомнатЖД);
			ТаблицаБлоковЖД.Загрузить(ТаблБлоков);
			
		Иначе
			Если ВыгружатьСведенияОЗданиях Тогда
				МакетМКД = Обработки.УПЖКХ_ОбменДаннымиСГИСЖКХ.ПолучитьМакет("ШаблонФайлаВыгрузкиСведенийОМКД");
				МакетЖД  = Обработки.УПЖКХ_ОбменДаннымиСГИСЖКХ.ПолучитьМакет("ШаблонФайлаВыгрузкиСведенийОЖД");
				
				СтруктураДанных = УПЖКХ_ИнтеграцияСГИСЖКХВажныеМеханизмы.ПолучитьДанныеДляВыгрузкиСведенийОЗданиях(МассивЗданий, Объект.ПериодВыгрузки, Объект.НеВыгружатьСведенияОКомнатахДляЖилыхДомов);
				
				Если СтруктураДанных = Неопределено Тогда
					ФункционалДоступен = Ложь;
					Возврат;
				КонецЕсли;
				
				ТаблМКД                  = СтруктураДанных.ТаблицаМКД;
				ТаблЖД                   = СтруктураДанных.ТаблицаЖД;
				ТаблИнфМКД               = СтруктураДанных.ТаблицаИнформацииПоЗданиямМКД;
				ТаблИнфЖД                = СтруктураДанных.ТаблицаИнформацииПоЗданиямЖД;
				ТаблБлоков               = СтруктураДанных.ТаблицаБлоковЖД;
				ТаблПодъездов            = СтруктураДанных.ТаблицаПодъездов;
				ТаблЖилыхПомещений       = СтруктураДанных.ТаблицаЖилыхПомещений;
				ТаблНежилыхПомещений     = СтруктураДанных.ТаблицаНежилыхПомещений;
				ТаблИнфЖилыхПомещениях   = СтруктураДанных.ТаблицаИнформацииОЖилыхПомещениях;
				ТаблИнфНежилыхПомещениях = СтруктураДанных.ТаблицаИнформацииОНежилыхПомещениях;
				ТаблКомнатМКД            = СтруктураДанных.ТаблицаКомнатМКД;
				ТаблКомнатЖД             = СтруктураДанных.ТаблицаКомнатЖД;
				
				// Отсекаем объекты с незаполненными данными.
				ОтсеятьОбъектыСНезаполненнымиДанными(ТаблМКД, ТаблЖД, ТаблПодъездов, ТаблЖилыхПомещений, ТаблНежилыхПомещений, ТаблКомнатМКД, ТаблКомнатЖД, ВсеДанныеЗаполнены,
													 ТаблицаСНезаполненнымиДанными, ЭтоПроверкаСведений);
				
				// Разбиваем на партии, чтобы размеры файлов не превышали ограничения.
				ПересчитатьКоличествоПомещенийДляКаждогоЗдания(ТаблМКД, ТаблЖД, ТаблЖилыхПомещений, ТаблНежилыхПомещений, ТаблКомнатМКД, ТаблКомнатЖД, КоличествоПартийЖД, КоличествоПартийМКД);
				
				ТаблицаМКД.Загрузить(ТаблМКД);
				ТаблицаЖД.Загрузить(ТаблЖД);
				ТаблицаИнформацииОМКД.Загрузить(ТаблИнфМКД);
				ТаблицаИнформацииОЖД.Загрузить(ТаблИнфЖД);
				ТаблицаЖилыхПомещений.Загрузить(ТаблЖилыхПомещений);
				ТаблицаНежилыхПомещений.Загрузить(ТаблНежилыхПомещений);
				ТаблицаИнформацииОЖилыхПомещениях.Загрузить(ТаблИнфЖилыхПомещениях);
				ТаблицаИнформацииОНежилыхПомещениях.Загрузить(ТаблИнфНежилыхПомещениях);
				ТаблицаКомнатМКД.Загрузить(ТаблКомнатМКД);
				ТаблицаКомнатЖД.Загрузить(ТаблКомнатЖД);
				ТаблицаБлоковЖД.Загрузить(ТаблБлоков);
				ТаблицаПодъездов.Загрузить(ТаблПодъездов);
			КонецЕсли;
			
			Если ВыгружатьДоговорыУправления Тогда
				МакетДУ = Обработки.УПЖКХ_ОбменДаннымиСГИСЖКХ.ПолучитьМакет("ШаблонФайлаВыгрузкиДоговоровУправления");
				
				СтруктураДанных = УПЖКХ_ИнтеграцияСГИСЖКХВажныеМеханизмы.ПолучитьДанныеДляВыгрузкиДоговоровУправления(МассивЗданий, Объект.ПериодВыгрузки, Объект.Организация);
				
				Если СтруктураДанных = Неопределено Тогда
					ФункционалДоступен = Ложь;
					Возврат;
				КонецЕсли;
				
				ТаблицаДанных                   = СтруктураДанных.ТаблицаДанных;
				ТаблицаДополнительныхСоглашений = СтруктураДанных.ТаблицаДополнительныхСоглашений;
				ТаблицаКоммунальныхУслуг        = СтруктураДанных.ТаблицаКоммунальныхУслуг;
				ТаблицаДополнительныхУслуг      = СтруктураДанных.ТаблицаДополнительныхУслуг;
				ТабКодовУслуг                   = СтруктураДанных.ТаблицаКодовУслуг;
				
				// Отсекаем объекты с незаполненными данными.
				ОтсеятьЗданияСНезаполненнымКодомФИАС(ТаблицаДанных, ВсеДанныеЗаполнены, ТаблицаСНезаполненнымиДанными, ЭтоПроверкаСведений);
				ОтсеятьЗданияСНезаполненнымКодомВыбраннойУслуги(ТаблицаДанных, ТабКодовУслуг, ВсеДанныеЗаполнены, ТаблицаСНезаполненнымиДанными, ЭтоПроверкаСведений);
				
				ТаблицаДУ.Загрузить(ТаблицаДанных);
				ДополнительныеСоглашенияДУ.Загрузить(ТаблицаДополнительныхСоглашений);
				ДополнительныеУслугиДУ.Загрузить(ТаблицаДополнительныхУслуг);
				КоммунальныеУслугиДУ.Загрузить(ТаблицаКоммунальныхУслуг);
				ТаблицаКодовУслуг.Загрузить(ТабКодовУслуг);
			КонецЕсли;
			
			Если ВыгружатьСпособыФормированияФондаКР Тогда
				
				МассивЗданий = Объект.Здания.Выгрузить().ВыгрузитьКолонку("Здание");
				МакетСФКР   = Обработки.УПЖКХ_ОбменДаннымиСГИСЖКХ.ПолучитьМакет("ШаблонФайлаСпособФормированияФондаКР"); 
				
				ДанныеСФКР = УПЖКХ_ИнтеграцияСГИСЖКХВажныеМеханизмы.ПолучитьСведенияСФКР(МассивЗданий, Объект.ПериодВыгрузки, Объект.Организация); 
				
				Если ДанныеСФКР = Неопределено Тогда
					ФункционалДоступен = Ложь;
					Возврат;
				КонецЕсли;
				
				// Отсекаем объекты с незаполненными данными.
				ОтсеятьОбъектыСНезаполненнымиДаннымиПоСФКР(ДанныеСФКР, ВсеДанныеЗаполнены, ТаблицаСНезаполненнымиДанными, ЭтоПроверкаСведений);
				
				ТаблицаСФКР.Загрузить(ДанныеСФКР); 
			
			КонецЕсли;
			
			Если ВыгружатьЗаявкиНаДобавлениеВременныхАдресов Тогда
				
				МассивЗданий       = Объект.Здания.Выгрузить().ВыгрузитьКолонку("Здание");
				МакетЗаявокНаДобВА = Обработки.УПЖКХ_ОбменДаннымиСГИСЖКХ.ПолучитьМакет("ШаблонФайлаИмпортаЗаявокНаДобавлениеВременныхАдресов"); 
				
				Данные = ТаблицаЗаявокНаДобВА.Выгрузить();
				УПЖКХ_ИнтеграцияСГИСЖКХВажныеМеханизмы.ПолучитьСведенияЗаявокНаДобВА(МассивЗданий,Данные);
				
				Если Данные = Неопределено Тогда
					ФункционалДоступен = Ложь;
					Возврат;
				КонецЕсли;
				
				// Отсекаем объекты с незаполненными данными.
				ОтсеятьОбъектыСНезаполненнымиДаннымиПоЗаявамНаДобВА(Данные, ВсеДанныеЗаполнены);
				
				ТаблицаЗаявокНаДобВА.Загрузить(Данные);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Объект.ВидВыгрузки = Перечисления.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.СведенияОЛицевыхСчетах Тогда
		МакетЛС = Обработки.УПЖКХ_ОбменДаннымиСГИСЖКХ.ПолучитьМакет("ШаблонФайлаВыгрузкиЛицевыхСчетов");
		
		МассивЛС  = Объект.ЛицевыеСчета.Выгрузить().ВыгрузитьКолонку("ЛицевойСчет");
		
		ТаблицаЛС = Неопределено;
		
		Если ИспользоватьМногопоточность Тогда
			
			ИмяМетода                         = "УПЖКХ_МногопоточнаяОбработкаДанных.ПолучитьДанныеОЛицевыхСчетахВФоновомЗаданииГИСЖКХ";
			НаименованиеЗадания               = "Фоновая подготовка данных по лицевым счетам для ГИС ЖКХ.";
			МассивНаборовДанныхФоновыхЗаданий = ПодготовитьМассивНаборовПараметровДляМногопоточнойОбработкиЛицевыеСчета(МассивЛС, МассивАдресовСтруктурДанных, КоличествоПотоков, КоличествоОбъектовВсего, КоличествоОбъектовНаПоток);
			
			УПЖКХ_МногопоточнаяОбработкаДанных.ОбработатьМассивНаборовДанныхМногопоточно(ИмяМетода, НаименованиеЗадания, МассивНаборовДанныхФоновыхЗаданий);
			
			ПерваяИтерация = Истина;
			ТекНомерПП     = 1;
			
			Для каждого ТекАдресРезультатаФоновогоЗадания из МассивАдресовСтруктурДанных Цикл
				
				ТекущаяТаблицаЛС = ПолучитьИзВременногоХранилища(ТекАдресРезультатаФоновогоЗадания);
				
				Если ТипЗнч(ТекущаяТаблицаЛС) = Тип("ТаблицаЗначений") Тогда
					
					Если ПерваяИтерация Тогда
						ТаблицаЛС = ТекущаяТаблицаЛС.СкопироватьКолонки();
						ПерваяИтерация = Ложь;
					КонецЕсли;
					
					Для каждого ТекСтрока из ТекущаяТаблицаЛС Цикл
						НоваяСтрока = ТаблицаЛС.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
						
						НоваяСтрока.НомерПП = ТекНомерПП;
						ТекНомерПП          = ТекНомерПП + 1;
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			ТаблицаЛС = УПЖКХ_ИнтеграцияСГИСЖКХВажныеМеханизмы.ПолучитьДанныеОЛицевыхСчетах(МассивЛС, Объект.ПериодВыгрузки);
			
		КонецЕсли;
		
		Если ТаблицаЛС = Неопределено Тогда
			ФункционалДоступен = Ложь;
			Возврат;
		КонецЕсли;
		
		ОтсеятьЛицевыеСчетаСНезаполненнымиДанными(ТаблицаЛС, ТаблицаСНезаполненнымиДанными, ЭтоПроверкаСведений);
		
		ТаблицаЛицевыхСчетов.Загрузить(ТаблицаЛС);
		
	ИначеЕсли Объект.ВидВыгрузки = Перечисления.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.ПлатежныеДокументы Тогда
		
		МассивЛС = Объект.ЛицевыеСчетаПлатежныхДокументов.Выгрузить().ВыгрузитьКолонку("ЛицевойСчет");
		
		ТаблицаУслугИзФайлаШаблона = ПолучитьТаблицуУслугИзФайлаШаблона();
		
		Если ТаблицаУслугИзФайлаШаблона.Количество() = 0 Тогда
			ЕстьОшибки = Истина;
			// При чтении услуг были ошибки, загрузку прекращаем.
			Возврат;
		КонецЕсли;
		
		СтруктураДанныхПД = Неопределено;
		
		Если ИспользоватьМногопоточность Тогда
			
			ИмяМетода                         = "УПЖКХ_МногопоточнаяОбработкаДанных.ПолучитьДанныеПлатежныхДокументовВФоновомЗаданииГИСЖКХ";
			НаименованиеЗадания               = "Фоновая подготовка данных по платежным документам для ГИС ЖКХ.";
			МассивНаборовДанныхФоновыхЗаданий = ПодготовитьМассивНаборовПараметровДляМногопоточнойОбработкиПлатежныеДокументы(МассивЛС, МассивАдресовСтруктурДанных, ТаблицаУслугИзФайлаШаблона, КоличествоПотоков, КоличествоОбъектовВсего, КоличествоОбъектовНаПоток);
			
			УПЖКХ_МногопоточнаяОбработкаДанных.ОбработатьМассивНаборовДанныхМногопоточно(ИмяМетода, НаименованиеЗадания, МассивНаборовДанныхФоновыхЗаданий);
			
			ПерваяИтерация = Истина;
			
			Для каждого ТекАдресРезультатаФоновогоЗадания из МассивАдресовСтруктурДанных Цикл
				
				ТекущаяСтруктураДанных = ПолучитьИзВременногоХранилища(ТекАдресРезультатаФоновогоЗадания);
				
				Если ТипЗнч(ТекущаяСтруктураДанных) = Тип("Структура") Тогда
					
					Если ПерваяИтерация Тогда
						СтруктураДанныхПД       = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ТекущаяСтруктураДанных);
						КоличествоЛСДляВыгрузки = СтруктураДанныхПД.ТаблицаЛицевыхСчетов.Количество();
						ПерваяИтерация          = Ложь;
					Иначе
						
						//КоличествоЛСДляВыгрузки = КоличествоЛСДляВыгрузки + ТекущаяСтруктураДанных.ТаблицаЛицевыхСчетов.Количество();
						
						Для каждого ТекЛС из ТекущаяСтруктураДанных.ТаблицаЛицевыхСчетов Цикл
							НоваяСтрока = СтруктураДанныхПД.ТаблицаЛицевыхСчетов.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекЛС);
						КонецЦикла;
						
						Для каждого ТекУслуга из ТекущаяСтруктураДанных.ТаблицаУслуг Цикл
							НоваяСтрока = СтруктураДанныхПД.ТаблицаУслуг.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекУслуга);
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			// В структуру поместим следующие данные:
			// 1. "ТаблицаЛицевыхСчетовПД" - разделы 1-3 ПД.
			// 2. "ТаблицаУслугПД"         - разделы 4-6 ПД.
			СтруктураДанныхПД = УПЖКХ_ИнтеграцияСГИСЖКХВажныеМеханизмы.ПолучитьДанныеПлатежныхДокументов(МассивЛС, ТаблицаУслугИзФайлаШаблона, Объект.ПериодВыгрузки, Объект.Организация, Объект.НастройкаСбораДанныхДляПД);
			
		КонецЕсли;
		
		Если СтруктураДанныхПД = Неопределено Тогда
			ФункционалДоступен = Ложь;
			Возврат;
		КонецЕсли;
		
		ТаблицаЛС = СтруктураДанныхПД.ТаблицаЛицевыхСчетов;
		ТаблицаУслуг = СтруктураДанныхПД.ТаблицаУслуг;
		
		// Расставить № партий
		МаксКоличествоПДВПартии   = 50000; //Количество ПД в одной партии
		КоличествоПолныхПартийПД  = Цел(ТаблицаЛС.Количество() / МаксКоличествоПДВПартии);
		ОстатокПДВПоследнейПартии = ТаблицаЛС.Количество() % МаксКоличествоПДВПартии;
		КоличествоПартий          = КоличествоПолныхПартийПД + ?(ОстатокПДВПоследнейПартии = 0, 0, 1);
	
		// Расставить номера партий
		Если КоличествоПартий > 1 Тогда
		
			Для ИндексСтрокиТаблицыЛС = МаксКоличествоПДВПартии По ТаблицаЛС.Количество() - 1 Цикл
			
				НомерПартии = Цел(ИндексСтрокиТаблицыЛС/МаксКоличествоПДВПартии)+1;
			
				ТаблицаЛС[ИндексСтрокиТаблицыЛС].Партия = НомерПартии;
			
				Отбор = Новый Структура;
				Отбор.Вставить("НомерПД", ТаблицаЛС[ИндексСтрокиТаблицыЛС].НомерПД);
				СтрокиУслуг = ТаблицаУслуг.НайтиСтроки(Отбор);
			
				Для Каждого ЭлементМассиваСтрокТаблицыУслуг Из СтрокиУслуг Цикл
				
					ЭлементМассиваСтрокТаблицыУслуг.Партия = НомерПартии;
				
				КонецЦикла;
			
			КонецЦикла;
		
		КонецЕсли;
		
		ЭтотОбъект.КоличествоПартийПД = КоличествоПартий;
		
		ИмяТаблицыДляВыгрузки = "ТаблицаЛицевыхСчетовПД";
		Если СоздатьТаблицуФормы(ТаблицаЛС.СкопироватьКолонки(), ИмяТаблицыДляВыгрузки) Тогда
			ЭтотОбъект[ИмяТаблицыДляВыгрузки].Загрузить(ТаблицаЛС);
			СтруктураИменТаблицФормы.Вставить(ИмяТаблицыДляВыгрузки);
		КонецЕсли;
		
		ИмяТаблицыДляВыгрузки = "ТаблицаУслугПД";
		Если СоздатьТаблицуФормы(ТаблицаУслуг.СкопироватьКолонки(), ИмяТаблицыДляВыгрузки) Тогда
			ЭтотОбъект[ИмяТаблицыДляВыгрузки].Загрузить(ТаблицаУслуг);
			СтруктураИменТаблицФормы.Вставить(ИмяТаблицыДляВыгрузки);
		КонецЕсли;
		
	ИначеЕсли Объект.ВидВыгрузки = Перечисления.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.ПриборыУчета Тогда
		
		Если Объект.ВидОбменаПУ = Перечисления.УПЖКХ_ВидыОбменаПриборамиУчетаСГИСЖКХ.ВыгрузкаПоказанийИПУ Тогда
			МакетПУ = Обработки.УПЖКХ_ОбменДаннымиСГИСЖКХ.ПолучитьМакет("ШаблонФайлаВыгрузкиПоказанийИПУ");
		ИначеЕсли Объект.ВидОбменаПУ = Перечисления.УПЖКХ_ВидыОбменаПриборамиУчетаСГИСЖКХ.ВыгрузкаПоказанийОДПУ Тогда
			МакетПУ = Обработки.УПЖКХ_ОбменДаннымиСГИСЖКХ.ПолучитьМакет("ШаблонФайлаВыгрузкиПоказанийОДПУ");
		ИначеЕсли Объект.ВидОбменаПУ = Перечисления.УПЖКХ_ВидыОбменаПриборамиУчетаСГИСЖКХ.ВыгрузкаСведенийПУ Тогда
			МакетПУ = Обработки.УПЖКХ_ОбменДаннымиСГИСЖКХ.ПолучитьМакет("ШаблонФайлаВыгрузкиСведенийОПУ");
			
			ТаблицаСчетчиков = УПЖКХ_ИнтеграцияСГИСЖКХВажныеМеханизмы.ПолучитьДанныеДляВыгрузкиСведенийОПУ(Объект.ПриборыУчета.Выгрузить(), Объект.ПериодВыгрузки);
			
			ОтсеятьПриборыУчетаСНезаполненнымиДанными(ТаблицаСчетчиков, ВсеДанныеЗаполнены, ТаблицаСНезаполненнымиДанными, ЭтоПроверкаСведений);
			
			СкомпоноватьСведенияПоСтраницамФайлаВыгрузки(ТаблицаСчетчиков);
		КонецЕсли;
		
		Если Не Объект.ВидОбменаПУ = Перечисления.УПЖКХ_ВидыОбменаПриборамиУчетаСГИСЖКХ.ВыгрузкаСведенийПУ Тогда
			ЕстьОшибки = Ложь;
			ТаблицаСчетчиков = ПриборыУчетаОтсечьСтрокиСНезаполненнымиДанными(Объект.ПриборыУчета.Выгрузить(), ЕстьОшибки, ТаблицаСНезаполненнымиДанными, ЭтоПроверкаСведений);
			Если ЕстьОшибки Тогда
				Возврат;
			КонецЕсли;
			
			ТаблицаСчетчиковДляВыгрузки = УПЖКХ_ИнтеграцияСГИСЖКХВажныеМеханизмы.ПодготовитьТаблицуПриборовУчетаДляВыгрузки(ТаблицаСчетчиков);
		Иначе
			ТаблицаСчетчиковДляВыгрузки = ТаблицаСчетчиков.Скопировать();
		КонецЕсли;
		
		ИмяТаблицыДляВыгрузки = "ТаблицаСчетчиков";
		Если СоздатьТаблицуФормы(ТаблицаСчетчиковДляВыгрузки.СкопироватьКолонки(), ИмяТаблицыДляВыгрузки) Тогда
			ЭтотОбъект[ИмяТаблицыДляВыгрузки].Загрузить(ТаблицаСчетчиковДляВыгрузки);
			СтруктураИменТаблицФормы.Вставить(ИмяТаблицыДляВыгрузки);
		КонецЕсли;
		
	ИначеЕсли Объект.ВидВыгрузки = Перечисления.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.СостояниеРасчетовСРСО Тогда
		
		МакетРасчетыРСО = Обработки.УПЖКХ_ОбменДаннымиСГИСЖКХ.ПолучитьМакет("ШаблонФайлаВыгрузкиСостоянияРасчетовРСО");
		
		МассивДоговорСРСО = Объект.РасчетыРСО.Выгрузить().ВыгрузитьКолонку("ДоговорСРСО");
		
		ДанныеРСОПериоды  = ТаблицаСостоянияРасчетовРСОПериоды.Выгрузить();
		ДанныеРСОДоговоры = ТаблицаСостоянияРасчетовРСОДоговоры.Выгрузить();
		
		УПЖКХ_ИнтеграцияСГИСЖКХВажныеМеханизмы.ПолучитьСведенияДоговоровСРСО(МассивДоговорСРСО, ДанныеРСОПериоды, ДанныеРСОДоговоры, Объект.ПериодВыгрузки, Объект.Организация);
		
		Если ДанныеРСОДоговоры = Неопределено Тогда
			ФункционалДоступен = Ложь;
			
			Возврат;
		КонецЕсли;
		
		ОтсеятьОбъектыСНезаполненнымиДаннымиПоУО(ДанныеРСОДоговоры, ДанныеРСОПериоды, ВсеДанныеЗаполнены, ТаблицаСНезаполненнымиДанными, ЭтоПроверкаСведений);
		
		ТаблицаСостоянияРасчетовРСОПериоды.Загрузить(ДанныеРСОПериоды);
		ТаблицаСостоянияРасчетовРСОДоговоры.Загрузить(ДанныеРСОДоговоры);
		
	ИначеЕсли Объект.ВидВыгрузки = Перечисления.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.ДоговорыДПОИ Тогда
		МакетДПОИ = Обработки.УПЖКХ_ОбменДаннымиСГИСЖКХ.ПолучитьМакет("ШаблонФайлаВыгрузкиДоговоровДПОИ");
		
		МассивДоговораДПОИ = Объект.ДоговорыДПОИ.Выгрузить().ВыгрузитьКолонку("ДоговорДПОИ");
		
		ТаблицаДПОИ = УПЖКХ_ИнтеграцияСГИСЖКХВажныеМеханизмы.ПолучитьСведенияДоговоровДПОИ(МассивДоговораДПОИ, Объект.ПериодВыгрузки, Объект.Организация);
		
		Если ТаблицаДПОИ = Неопределено Тогда
			ФункционалДоступен = Ложь;
			Возврат;
		КонецЕсли;
		
		ОтсеятьОбъектыСНезаполненнымиДаннымиДоговорамДПОИ(ТаблицаДПОИ, ВсеДанныеЗаполнены, ТаблицаСНезаполненнымиДанными, ЭтоПроверкаСведений);
		
		ИмяТаблицыДляВыгрузки = "ТаблицаДоговоровДПОИ";
		Если СоздатьТаблицуФормы(ТаблицаДПОИ.СкопироватьКолонки(), ИмяТаблицыДляВыгрузки) Тогда
			ЭтотОбъект[ИмяТаблицыДляВыгрузки].Загрузить(ТаблицаДПОИ);
			СтруктураИменТаблицФормы.Вставить(ИмяТаблицыДляВыгрузки);
		КонецЕсли;
		
	ИначеЕсли Объект.ВидВыгрузки = Перечисления.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.РаботыИУслугиОрганизации Тогда
		ТаблицаПеречня = Новый ТаблицаЗначений;
		
		Если Объект.ВидОбменаРаботамиИУслугами = Перечисления.УПЖКХ_ВидыОбменаРаботамиИУслугамиСГИСЖКХ.ПеречниРаботИУслуг Тогда
			ТаблицаПеречня = УПЖКХ_ИнтеграцияСГИСЖКХВажныеМеханизмы.ПолучитьТаблицуПеречняРаботИУслуг(Объект.ПереченьРаботИУслуг, Объект.Организация);
			
			// Проверку на заполненность данных не выполняем, т.к. она выполняется при записи справочника перечней.
			
		ИначеЕсли Объект.ВидОбменаРаботамиИУслугами = Перечисления.УПЖКХ_ВидыОбменаРаботамиИУслугамиСГИСЖКХ.ПланыРаботИУслуг Тогда
			ТаблицаПеречня = УПЖКХ_ИнтеграцияСГИСЖКХВажныеМеханизмы.ПолучитьТаблицуПланаРаботИУслуг(Объект.ПереченьРаботИУслуг, Объект.Организация);
			
			Если Не ТаблицаПеречня = Неопределено И ТаблицаПеречня.Количество() = 0 Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для выбранного перечня не обнаружен план.");
			КонецЕсли;
			
		ИначеЕсли Объект.ВидОбменаРаботамиИУслугами = Перечисления.УПЖКХ_ВидыОбменаРаботамиИУслугамиСГИСЖКХ.ФактыРаботИУслуг Тогда
			ТаблицаПеречня = УПЖКХ_ИнтеграцияСГИСЖКХВажныеМеханизмы.ПолучитьТаблицуФактаПеречняРаботИУслуг(Объект.ПереченьРаботИУслуг, Объект.МесяцВыгрузкиФактовРаботИУслуг, Объект.Организация);
			
			Если Не ТаблицаПеречня = Неопределено И ТаблицаПеречня.Количество() = 0 Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для выбранного перечня за указанный месяц не обнаружен отчет о факте выполнения.");
			КонецЕсли;
		КонецЕсли;
		
		Если ТаблицаПеречня = Неопределено Тогда
			ФункционалДоступен = Ложь;
			Возврат;
		КонецЕсли;
		
		ИмяТаблицыДляВыгрузки = "ТаблицаПеречня";
		Если СоздатьТаблицуФормы(ТаблицаПеречня.СкопироватьКолонки(), ИмяТаблицыДляВыгрузки) Тогда
			ЭтотОбъект[ИмяТаблицыДляВыгрузки].Загрузить(ТаблицаПеречня);
			СтруктураИменТаблицФормы.Вставить(ИмяТаблицыДляВыгрузки);
		КонецЕсли;
		
	ИначеЕсли Объект.ВидВыгрузки = Перечисления.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.СведенияТСЖ Тогда
		
		Если Объект.ВидОбменаТСЖ = Перечисления.УПЖКХ_ВидыОбменаСведениямиОТСЖСГИСЖКХ.СведенияОбОтчетахТСЖ Тогда
			МакетОтчетовТСЖ = Обработки.УПЖКХ_ОбменДаннымиСГИСЖКХ.ПолучитьМакет("ШаблонФайлаВыгрузкиОтчетовТСЖ");
			
			втТаблицаОтчетовТСЖ = Объект.ОтчетыТСЖ.Выгрузить().Скопировать(, "НомерСтроки, ОтчетТСЖ");
			
			ТаблицаОтчетов = УПЖКХ_ИнтеграцияСГИСЖКХВажныеМеханизмы.ПолучитьДанныеОбОтчетахТСЖ(втТаблицаОтчетовТСЖ, Объект.Организация);
			
			Если ТаблицаОтчетов = Неопределено Тогда
				ФункционалДоступен = Ложь;
				Возврат;
			КонецЕсли;
			
			ОтсеятьОтчетыТСЖПоОрганизации(ТаблицаОтчетов, Объект.Организация, ТаблицаСНезаполненнымиДанными, ЭтоПроверкаСведений);
			
			ТаблицаОтчетовТСЖ.Загрузить(ТаблицаОтчетов);
			
		ИначеЕсли Объект.ВидОбменаТСЖ = Перечисления.УПЖКХ_ВидыОбменаСведениямиОТСЖСГИСЖКХ.СведенияОЧленахТСЖ Тогда
			МакетЧленовТСЖ = Обработки.УПЖКХ_ОбменДаннымиСГИСЖКХ.ПолучитьМакет("ШаблонФайлаВыгрузкиЧленовТСЖ");
			
			СтуктураСведений = УПЖКХ_ИнтеграцияСГИСЖКХВажныеМеханизмы.ПолучитьДанныеОЧленахТСЖ(Объект.Организация, КонецМесяца(Объект.ПериодВыгрузки));
			
			Если СтуктураСведений = Неопределено Тогда
				ФункционалДоступен = Ложь;
				Возврат;
			КонецЕсли;
			
			ОтсеятьНеполностьюЗаполенныеДанныеПоЧленамТСЖИЗаполнитьПорядковыеНомера(СтуктураСведений, ТаблицаСНезаполненнымиДанными, ЭтоПроверкаСведений);
			
			ИмяТаблицыДляВыгрузки = "ТаблицаЧленовТСЖ";
			Если СоздатьТаблицуФормы(СтуктураСведений.ТаблицаЧленовТСЖ.СкопироватьКолонки(), ИмяТаблицыДляВыгрузки) Тогда
				ЭтотОбъект[ИмяТаблицыДляВыгрузки].Загрузить(СтуктураСведений.ТаблицаЧленовТСЖ);
				СтруктураИменТаблицФормы.Вставить(ИмяТаблицыДляВыгрузки);
			КонецЕсли;
			
			ИмяТаблицыДляВыгрузки = "ТаблицаСобственности";
			Если СоздатьТаблицуФормы(СтуктураСведений.ТаблицаСобственности.СкопироватьКолонки(), ИмяТаблицыДляВыгрузки) Тогда
				ЭтотОбъект[ИмяТаблицыДляВыгрузки].Загрузить(СтуктураСведений.ТаблицаСобственности);
				СтруктураИменТаблицФормы.Вставить(ИмяТаблицыДляВыгрузки);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Объект.ВидВыгрузки = Перечисления.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.СведенияОбОплатах Тогда
		МакетОплат = Обработки.УПЖКХ_ОбменДаннымиСГИСЖКХ.ПолучитьМакет("ШаблонФайлаВыгрузкиОплат");
		
		ТаблицаОплат = УПЖКХ_ИнтеграцияСГИСЖКХВажныеМеханизмы.ПолучитьДанныеОбОплатах(Объект.Организация, Объект.НачалоПроизвольногоПериода, Объект.КонецПроизвольногоПериода,
																					  ОтбиратьОплатыПоИсточнику, ИсточникОплатыДляОтбора, ВыборЛицевыхСчетов, 
																					  Объект.ЛицевыеСчетаДляОтборов.Выгрузить().ВыгрузитьКолонку("ЛицевойСчет"));
		
		Если ТаблицаОплат = Неопределено Тогда
			ФункционалДоступен = Ложь;
			Возврат;
		КонецЕсли;
		
		ОтсеятьНеПолностьюЗаполенныеДанныеПоОплатам(ТаблицаОплат, ТаблицаСНезаполненнымиДанными, ЭтоПроверкаСведений);
		
		ИмяТаблицыДляВыгрузки = "ТаблицаОплат";
		Если СоздатьТаблицуФормы(ТаблицаОплат.СкопироватьКолонки(), ИмяТаблицыДляВыгрузки) Тогда
			ЭтотОбъект[ИмяТаблицыДляВыгрузки].Загрузить(ТаблицаОплат);
			СтруктураИменТаблицФормы.Вставить(ИмяТаблицыДляВыгрузки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьДанныеДляВыгрузки()

&НаКлиентеНаСервереБезКонтекста
// Формирует файлы.
Процедура СформироватьФайлы(КоличествоФайлов, ВидВыгрузки, ВыгружатьСведенияОЗданиях, ВыгружатьДоговорыУправления, ВыгружатьСпособыформированияФондаКР, ВыгружатьЗаявкиНаДобавлениеВременныхАдресов,
							КаталогВыгрузки, МакетЗаявокНаДобВА, МакетСФКР, МакетМКД, МакетЖД, МакетДУ, МакетЛС, МакетПУ, МакетРасчетыРСО, МакетДПОИ, МакетОтчетовТСЖ, МакетЧленовТСЖ, МакетОплат,
							ДополнительныеСоглашенияДУ, ДополнительныеУслугиДУ, КоммунальныеУслугиДУ, ТаблицаДУ, ТаблицаЖД, ТаблицаИнформацииОЖД, ТаблицаЖилыхПомещений, ТаблицаИнформацииОЖилыхПомещениях,
							ТаблицаКодовУслуг, ТаблицаБлоковЖД, ТаблицаКомнатЖД, ТаблицаКомнатМКД, ТаблицаЛицевыхСчетов, ТаблицаМКД, ТаблицаИнформацииОМКД, ТаблицаНежилыхПомещений, ТаблицаИнформацииОНежилыхПомещениях,
							ТаблицаПодъездов, КоличествоПартийМКД, КоличествоПартийЖД, СформированныеФайлы, Форма, ТипУО, СтруктураИменТаблицФормы, ТаблицаЗаявокНаДобВА, ТаблицаСФКР, ТаблицаСостоянияРасчетовРСОПериоды,
							ТаблицаСостоянияРасчетовРСОДоговоры, ТаблицаОтчетовТСЖ, ФормируемНаСервере = Ложь, ЭтоВебКлиент = Ложь)
							
	// Открываем excel файл.
	Попытка
		Эксель = Новый COMОбъект("Excel.Application");
	Исключение
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не удалось открыть файл данных для чтения!
				  |Возможно файл поврежден или отсутствует приложение для чтения файла.");
		Возврат;
	КонецПопытки;
	
	Если ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.СведенияОЗданиях") Тогда
		Если ТипУО = ПредопределенноеЗначение("Перечисление.УПЖКХ_ТипыОрганизаций.РСО") Тогда
				Если Не ТаблицаМКД.Количество() = 0 Тогда
					ВыполнитьВыгрузкуМКД_РСО(Эксель, КоличествоФайлов, КаталогВыгрузки, МакетМКД, ТаблицаЖилыхПомещений, ТаблицаКомнатМКД, ТаблицаМКД, 
										 ТаблицаНежилыхПомещений, КоличествоПартийМКД, СформированныеФайлы, ФормируемНаСервере);
				КонецЕсли;
				
				Если Не ТаблицаЖД.Количество() = 0 Тогда
					ВыполнитьВыгрузкуЖД_РСО(Эксель, КоличествоФайлов, КаталогВыгрузки, МакетЖД, ТаблицаЖД, ТаблицаБлоковЖД, ТаблицаКомнатЖД, КоличествоПартийЖД, СформированныеФайлы, ФормируемНаСервере);
				КонецЕсли;
		Иначе
			Если ВыгружатьСведенияОЗданиях Тогда
				Если Не ТаблицаМКД.Количество() = 0 Тогда
					ВыполнитьВыгрузкуМКД(Эксель, КоличествоФайлов, КаталогВыгрузки, МакетМКД, ТаблицаЖилыхПомещений, ТаблицаИнформацииОЖилыхПомещениях, ТаблицаКомнатМКД, ТаблицаМКД, 
										 ТаблицаИнформацииОМКД, ТаблицаНежилыхПомещений, ТаблицаИнформацииОНежилыхПомещениях, ТаблицаПодъездов, КоличествоПартийМКД, СформированныеФайлы, ФормируемНаСервере, ЭтоВебКлиент);
				КонецЕсли;
				
				Если Не ТаблицаЖД.Количество() = 0 Тогда
					ВыполнитьВыгрузкуЖД(Эксель, КоличествоФайлов, КаталогВыгрузки, МакетЖД, ТаблицаЖД, ТаблицаИнформацииОЖД, ТаблицаБлоковЖД, ТаблицаКомнатЖД, КоличествоПартийЖД, СформированныеФайлы, 
										ФормируемНаСервере);
				КонецЕсли;
			КонецЕсли;
			
			Если ВыгружатьСпособыформированияФондаКР Тогда
				Если Не ТаблицаСФКР.Количество() = 0 Тогда
					ВыполнитьВыгрузкуСФКР(Эксель, КоличествоФайлов, КаталогВыгрузки, МакетСФКР, ТаблицаСФКР, СформированныеФайлы, ФормируемНаСервере);
				КонецЕсли;
			КонецЕсли;
			
			Если ВыгружатьЗаявкиНаДобавлениеВременныхАдресов Тогда
				Если Не ТаблицаЗаявокНаДобВА.Количество() = 0 Тогда
					ВыполнитьВыгрузкуЗаявокНаДВА(Эксель, КоличествоФайлов, КаталогВыгрузки, МакетЗаявокНаДобВА, ТаблицаЗаявокНаДобВА, СформированныеФайлы, ФормируемНаСервере);
				КонецЕсли;
			КонецЕсли;
			
			Если ВыгружатьДоговорыУправления Тогда
				Если Не ТаблицаДУ.Количество() = 0 Тогда
					ВыполнитьВыгрузкуДУ(Эксель, КоличествоФайлов, КаталогВыгрузки, МакетДУ, ДополнительныеСоглашенияДУ, ДополнительныеУслугиДУ, КоммунальныеУслугиДУ, ТаблицаДУ,
										ТаблицаКодовУслуг, СформированныеФайлы, ФормируемНаСервере);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.СведенияОЛицевыхСчетах") Тогда
		Если Не ТаблицаЛицевыхСчетов.Количество() = 0 Тогда
			ВыгружатьОтдельныеЛицевыеСчетаКР = Форма.Объект.ВыгружатьЛицевыеСчетаКР;
			
			ВыполнитьВыгрузкуЛицевыхСчетов(Эксель, КоличествоФайлов, КаталогВыгрузки, МакетЛС, ТаблицаЛицевыхСчетов, СформированныеФайлы, ФормируемНаСервере, ТипУО, ВыгружатьОтдельныеЛицевыеСчетаКР);
		КонецЕсли;
	ИначеЕсли ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.ПлатежныеДокументы") Тогда
		
		ВыполнитьВыгрузкуПлатежныхДокументов(Эксель, КоличествоФайлов, КаталогВыгрузки, Форма, СтруктураИменТаблицФормы, СформированныеФайлы, ФормируемНаСервере);
		
		
	ИначеЕсли ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.ПриборыУчета") Тогда
		
		ВыполнитьВыгрузкуПриборовУчета(Эксель, КоличествоФайлов, КаталогВыгрузки, МакетПУ, Форма, СтруктураИменТаблицФормы, СформированныеФайлы, ФормируемНаСервере);
		
	ИначеЕсли ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.СостояниеРасчетовСРСО") Тогда
		
		ВыполнитьВыгрузкуДоговоровСРСО(Эксель, КоличествоФайлов, КаталогВыгрузки, МакетРасчетыРСО, Форма, ТаблицаСостоянияРасчетовРСОПериоды, ТаблицаСостоянияРасчетовРСОДоговоры, 
									   СформированныеФайлы, ФормируемНаСервере);
									   
	ИначеЕсли ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.ДоговорыДПОИ") Тогда
		
		ВыполнитьВыгрузкуДоговоровДПОИ(Эксель, КоличествоФайлов, КаталогВыгрузки, МакетДПОИ, Форма, СтруктураИменТаблицФормы, СформированныеФайлы, ФормируемНаСервере);
		
	ИначеЕсли ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.РаботыИУслугиОрганизации") Тогда
		
		ВыполнитьВыгрузкуСведенийОРаботахИУслугах(Эксель, КоличествоФайлов, КаталогВыгрузки, Форма, СтруктураИменТаблицФормы, СформированныеФайлы, ФормируемНаСервере);
		
	ИначеЕсли ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.СведенияТСЖ") Тогда
		
		ВидОбменаТСЖ = Форма.Объект.ВидОбменаТСЖ;
		
		Если ВидОбменаТСЖ = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОбменаСведениямиОТСЖСГИСЖКХ.СведенияОбОтчетахТСЖ") Тогда
			Если НЕ ТаблицаОтчетовТСЖ.Количество() = 0 Тогда
				ВыполнитьВыгрузкуОтчетовТСЖ(Эксель, КоличествоФайлов, КаталогВыгрузки, МакетОтчетовТСЖ, ТаблицаОтчетовТСЖ, СформированныеФайлы, ФормируемНаСервере);
			КонецЕсли;
		ИначеЕсли ВидОбменаТСЖ = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОбменаСведениямиОТСЖСГИСЖКХ.СведенияОЧленахТСЖ") Тогда
			ВыполнитьВыгрузкуЧленовТСЖ(Эксель, КоличествоФайлов, КаталогВыгрузки, МакетЧленовТСЖ, Форма, СформированныеФайлы, ФормируемНаСервере);
		КонецЕсли;
		
	ИначеЕсли ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.СведенияОбОплатах") Тогда
		
		ВыполнитьВыгрузкуСведенияОбОплатах(Эксель, КоличествоФайлов, КаталогВыгрузки, МакетОплат, Форма, СтруктураИменТаблицФормы, СформированныеФайлы, ФормируемНаСервере);
		
	КонецЕсли;
	
	ОчиститьТаблицыФормы(ДополнительныеСоглашенияДУ, ДополнительныеУслугиДУ, КоммунальныеУслугиДУ, ТаблицаДУ, ТаблицаЖД, ТаблицаЖилыхПомещений, ТаблицаКодовУслуг,
						 ТаблицаКомнатЖД, ТаблицаКомнатМКД, ТаблицаЛицевыхСчетов, ТаблицаМКД, ТаблицаНежилыхПомещений, ТаблицаПодъездов, ТаблицаСФКР, ТаблицаЗаявокНаДобВА,
						 ТаблицаСостоянияРасчетовРСОПериоды, ТаблицаСостоянияРасчетовРСОДоговоры);
	
КонецПроцедуры // СформироватьФайлы()

&НаКлиентеНаСервереБезКонтекста
// Формирует файл со сведениями о МКД.
Процедура ВыполнитьВыгрузкуМКД(Эксель, КоличествоФайлов, КаталогВыгрузки, МакетМКД, ТаблицаЖилыхПомещений, ТаблицаИнформацииОЖилыхПомещениях, ТаблицаКомнатМКД, ТаблицаМКД, 
							   ТаблицаИнформацииОМКД, ТаблицаНежилыхПомещений, ТаблицаИнформацииОНежилыхПомещениях, ТаблицаПодъездов, КоличествоПартийМКД, СформированныеФайлы, ФормируемНаСервере, ЭтоВебКлиент = Ложь)
							
	Для ТекущаяПартия = 1 По КоличествоПартийМКД Цикл
		СтрокиПартии = ТаблицаМКД.НайтиСтроки(Новый Структура("Партия", ТекущаяПартия));
		
		Если ЭтоВебКлиент Тогда
			ПутьКФайлу = "Сведения о МКД от " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy HH.mm.ss'") + ".xlsx";
			ИмяФайла = "/Временный"+Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy HH.mm.ss'");
			
			#Если Сервер Тогда
			ИмяФайла = ПолучитьИмяВременногоФайла("xlsx");
			#КонецЕсли
		
		Иначе
			
			#Если Сервер Тогда
			ПутьКФайлу = КаталогВыгрузки + "\" + "Сведения о МКД от " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy HH.mm.ss'") + ".xlsx";
			ИмяФайла = ?(ФормируемНаСервере, ПолучитьИмяВременногоФайла("xlsx"), ПутьКФайлу);
			#КонецЕсли
		
		КонецЕсли;
		
		МакетМКД.Записать(ИмяФайла);
		
		Книга = Эксель.WorkBooks.Open(ИмяФайла);
		
		ЛистМКД                          = Книга.WorkSheets(1);
		ЛистИнформацииМКД                = Книга.WorkSheets(2);
		ЛистНежилыхПомещений             = Книга.WorkSheets(5);
		ЛистИнформацииОНежилыхПомещениях = Книга.WorkSheets(6);
		ЛистПодъездов                    = Книга.WorkSheets(7);
		ЛистЖилыхПомещений               = Книга.WorkSheets(10);
		ЛистИнформацииОЖилыхПомещениях   = Книга.WorkSheets(11);
		ЛистКомнат                       = Книга.WorkSheets(12);

		
		СчетчикСтрокЗданий              = 3;
		СчетчикСтрокИнфЗданий           = 3;
		СчетчикСтрокНежилыхПомещений    = 3;
		СчетчикСтрокИнфНежилыхПомещений = 3;
		СчетчикСтрокПодъездов           = 3;
		СчетчикСтрокЖилыхПомещений      = 3;
		СчетчикСтрокИнфЖилыхПомещений   = 3;
		СчетчикСтрокКомнат              = 3;
		
		Для Каждого ТекущееМКД Из СтрокиПартии Цикл
			
			ЛистМКД.cells(СчетчикСтрокЗданий, 1).value  = ТекущееМКД.Адрес;
			ЛистМКД.cells(СчетчикСтрокЗданий, 2).value  = ТекущееМКД.КодДомаПоФИАС;
			ЛистМКД.cells(СчетчикСтрокЗданий, 3).value  = ТекущееМКД.ОКТМО;
			ЛистМКД.cells(СчетчикСтрокЗданий, 4).value  = ТекущееМКД.Состояние;
			ЛистМКД.cells(СчетчикСтрокЗданий, 5).value  = ТекущееМКД.СтадияЖизненногоЦикла;
			ЛистМКД.cells(СчетчикСтрокЗданий, 6).value  = ТекущееМКД.ОбщаяПлощадьЗдания;
			ЛистМКД.cells(СчетчикСтрокЗданий, 7).value  = ТекущееМКД.ГодВводаВЭксплуатацию;
			ЛистМКД.cells(СчетчикСтрокЗданий, 8).value  = ТекущееМКД.КоличествоЭтажей;
			ЛистМКД.cells(СчетчикСтрокЗданий, 9).value  = ТекущееМКД.КоличествоПодземныхЭтажей;
			ЛистМКД.cells(СчетчикСтрокЗданий, 11).value = ТекущееМКД.ЧасоваяЗонаПоOslon;
			ЛистМКД.cells(СчетчикСтрокЗданий, 12).value = ПолучитьПредставлениеБулеваТипа(ТекущееМКД.ОбъектКультурногоНаследия);
			ЛистМКД.cells(СчетчикСтрокЗданий, 13).value = ПолучитьПредставлениеКадастровогоНомера(ТекущееМКД.КадастровыйНомер);
			
			СчетчикСтрокЗданий = СчетчикСтрокЗданий + 1;
			
			СтрокиТекИнформацииМКД = ТаблицаИнформацииОМКД.НайтиСтроки(Новый Структура("Здание", ТекущееМКД.Здание));
			Для Каждого СтрокаПараметраЗдания Из СтрокиТекИнформацииМКД Цикл
					ЛистИнформацииМКД.cells(СчетчикСтрокИнфЗданий, 1).value = СтрокаПараметраЗдания.АдресЗдания;
					ЛистИнформацииМКД.cells(СчетчикСтрокИнфЗданий, 2).value = СтрокаПараметраЗдания.Параметр;
					ЛистИнформацииМКД.cells(СчетчикСтрокИнфЗданий, 3).value = СтрокаПараметраЗдания.Значение;
					СчетчикСтрокИнфЗданий = СчетчикСтрокИнфЗданий + 1;
			КонецЦикла;
			
			СтрокиТекНежилыхПомещений = ТаблицаНежилыхПомещений.НайтиСтроки(Новый Структура("Здание", ТекущееМКД.Здание));
			Для Каждого НежилоеПомещение Из СтрокиТекНежилыхПомещений Цикл
				ЛистНежилыхПомещений.cells(СчетчикСтрокНежилыхПомещений, 1).value = НежилоеПомещение.АдресЗдания;
				ЛистНежилыхПомещений.cells(СчетчикСтрокНежилыхПомещений, 2).value = НежилоеПомещение.НомерПомещения;
				ЛистНежилыхПомещений.cells(СчетчикСтрокНежилыхПомещений, 3).value = ПолучитьПредставлениеБулеваТипа(НежилоеПомещение.СоставляетОбщееИмуществоВМКД);
				ЛистНежилыхПомещений.cells(СчетчикСтрокНежилыхПомещений, 4).value = НежилоеПомещение.ОбщаяПлощадь;
				ЛистНежилыхПомещений.cells(СчетчикСтрокНежилыхПомещений, 5).value = ПолучитьПредставлениеКадастровогоНомера(НежилоеПомещение.КадастровыйНомер);
				ЛистНежилыхПомещений.cells(СчетчикСтрокНежилыхПомещений, 6).value = "Да";
				
				СчетчикСтрокНежилыхПомещений = СчетчикСтрокНежилыхПомещений + 1;
			КонецЦикла;
			
			СтрокиТекИнформацииОНежилыхПомещениях = ТаблицаИнформацииОНежилыхПомещениях.НайтиСтроки(Новый Структура("Здание", ТекущееМКД.Здание));
			Для Каждого СтрокаПараметраПомещения Из СтрокиТекИнформацииОНежилыхПомещениях Цикл
					ЛистИнформацииОНежилыхПомещениях.cells(СчетчикСтрокИнфНежилыхПомещений, 1).value = СтрокаПараметраПомещения.АдресЗдания;
					ЛистИнформацииОНежилыхПомещениях.cells(СчетчикСтрокИнфНежилыхПомещений, 2).value = СтрокаПараметраПомещения.НомерПомещения;
					ЛистИнформацииОНежилыхПомещениях.cells(СчетчикСтрокИнфНежилыхПомещений, 3).value = СтрокаПараметраПомещения.Параметр;
					ЛистИнформацииОНежилыхПомещениях.cells(СчетчикСтрокИнфНежилыхПомещений, 4).value = СтрокаПараметраПомещения.Значение;
					
					СчетчикСтрокИнфНежилыхПомещений = СчетчикСтрокИнфНежилыхПомещений + 1;
			КонецЦикла;
			
			СтрокиПодъездов = ТаблицаПодъездов.НайтиСтроки(Новый Структура("Здание", ТекущееМКД.Здание));
			Для Каждого Подъезд Из СтрокиПодъездов Цикл
				ЛистПодъездов.cells(СчетчикСтрокПодъездов, 1).value = Подъезд.АдресЗдания;
				ЛистПодъездов.cells(СчетчикСтрокПодъездов, 2).value = Подъезд.НомерПодъезда;
				ЛистПодъездов.cells(СчетчикСтрокПодъездов, 3).value = Подъезд.Этажность;
				ЛистПодъездов.cells(СчетчикСтрокПодъездов, 4).value = Формат(Подъезд.ДатаПостройки, "ДФ=yyyy");
				ЛистПодъездов.cells(СчетчикСтрокПодъездов, 5).value = "Да";
				
				СчетчикСтрокПодъездов = СчетчикСтрокПодъездов + 1;
			КонецЦикла;
			
			СтрокиЖилыхПомещений = ТаблицаЖилыхПомещений.НайтиСтроки(Новый Структура("Здание", ТекущееМКД.Здание));
			Для Каждого ЖилоеПомещение Из СтрокиЖилыхПомещений Цикл
				ЛистЖилыхПомещений.cells(СчетчикСтрокЖилыхПомещений, 1).value = ЖилоеПомещение.АдресЗдания;
				ЛистЖилыхПомещений.cells(СчетчикСтрокЖилыхПомещений, 2).value = ЖилоеПомещение.НомерПомещения;
				ЛистЖилыхПомещений.cells(СчетчикСтрокЖилыхПомещений, 3).value = ЖилоеПомещение.НомерПодъезда;
				ЛистЖилыхПомещений.cells(СчетчикСтрокЖилыхПомещений, 4).value = ЖилоеПомещение.Характеристика;
				ЛистЖилыхПомещений.cells(СчетчикСтрокЖилыхПомещений, 5).value = ЖилоеПомещение.ОбщаяПлощадь;
				ЛистЖилыхПомещений.cells(СчетчикСтрокЖилыхПомещений, 6).value = ЖилоеПомещение.ЖилаяПлощадь;
				ЛистЖилыхПомещений.cells(СчетчикСтрокЖилыхПомещений, 7).value = ПолучитьПредставлениеКадастровогоНомера(ЖилоеПомещение.КадастровыйНомер);
				ЛистЖилыхПомещений.cells(СчетчикСтрокЖилыхПомещений, 8).value = "Да";
				
				СчетчикСтрокЖилыхПомещений = СчетчикСтрокЖилыхПомещений + 1;
			КонецЦикла;
			
			СтрокиТекИнформацииОЖилыхПомещениях = ТаблицаИнформацииОЖилыхПомещениях.НайтиСтроки(Новый Структура("Здание", ТекущееМКД.Здание));
			Для Каждого СтрокаПараметраПомещения Из СтрокиТекИнформацииОЖилыхПомещениях Цикл
					ЛистИнформацииОЖилыхПомещениях.cells(СчетчикСтрокИнфЖилыхПомещений, 1).value = СтрокаПараметраПомещения.АдресЗдания;
					ЛистИнформацииОЖилыхПомещениях.cells(СчетчикСтрокИнфЖилыхПомещений, 2).value = СтрокаПараметраПомещения.НомерПомещения;
					ЛистИнформацииОЖилыхПомещениях.cells(СчетчикСтрокИнфЖилыхПомещений, 3).value = СтрокаПараметраПомещения.Параметр;
					ЛистИнформацииОЖилыхПомещениях.cells(СчетчикСтрокИнфЖилыхПомещений, 4).value = СтрокаПараметраПомещения.Значение;
					
					СчетчикСтрокИнфЖилыхПомещений = СчетчикСтрокИнфЖилыхПомещений + 1;
			КонецЦикла;
			
			СтрокиКомнат = ТаблицаКомнатМКД.НайтиСтроки(Новый Структура("Здание", ТекущееМКД.Здание));
			Для Каждого Комната Из СтрокиКомнат Цикл
				ЛистКомнат.cells(СчетчикСтрокКомнат, 1).value = Комната.АдресЗдания;
				ЛистКомнат.cells(СчетчикСтрокКомнат, 2).value = Комната.НомерРодителя;
				ЛистКомнат.cells(СчетчикСтрокКомнат, 3).value = Комната.НомерПомещения;
				ЛистКомнат.cells(СчетчикСтрокКомнат, 4).value = Комната.ОбщаяПлощадь;
				ЛистКомнат.cells(СчетчикСтрокКомнат, 5).value = ПолучитьПредставлениеКадастровогоНомера(Комната.КадастровыйНомер);
				ЛистКомнат.cells(СчетчикСтрокКомнат, 6).value = "Да";
				
				СчетчикСтрокКомнат = СчетчикСтрокКомнат + 1;
			КонецЦикла;
		КонецЦикла;
		
		Книга.Save();
		Книга.Close();
		
		Если ФормируемНаСервере Тогда
			ДобавитьСтрокуВТаблицуСФайлами(СформированныеФайлы, ПутьКФайлу, ИмяФайла);
		КонецЕсли;
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Сформирован файл " + ПутьКФайлу + "...");
		
		КоличествоФайлов = КоличествоФайлов + 1;
	КонецЦикла;
	
КонецПроцедуры // ВыполнитьВыгрузкуМКД()

&НаКлиентеНаСервереБезКонтекста
// Формирует файл со сведениями о МКД.
Процедура ВыполнитьВыгрузкуМКД_РСО(Эксель, КоличествоФайлов, КаталогВыгрузки, МакетМКД, ТаблицаЖилыхПомещений, ТаблицаКомнатМКД, ТаблицаМКД, 
							   ТаблицаНежилыхПомещений, КоличествоПартийМКД, СформированныеФайлы, ФормируемНаСервере)
							   
	Для ТекущаяПартия = 1 По КоличествоПартийМКД Цикл
		СтрокиПартии = ТаблицаМКД.НайтиСтроки(Новый Структура("Партия", ТекущаяПартия));
		
		ПутьКФайлу = КаталогВыгрузки + "\" + "Сведения о МКД от " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy HH.mm.ss'") + ".xlsx";
		#Если НЕ ВебКлиент Тогда
		ИмяФайла = ?(ФормируемНаСервере, ПолучитьИмяВременногоФайла("xlsx"), ПутьКФайлу);
		#Иначе
		ИмяФайла = ПутьКФайлу;
		#КонецЕсли
		
		МакетМКД.Записать(ИмяФайла);
		
		Книга = Эксель.WorkBooks.Open(ИмяФайла);
		
		ЛистМКД              = Книга.WorkSheets(1);
		ЛистНежилыхПомещений = Книга.WorkSheets(2);
		ЛистЖилыхПомещений   = Книга.WorkSheets(4);
		ЛистКомнат           = Книга.WorkSheets(5);
		
		СчетчикСтрокЗданий           = 3;
		СчетчикСтрокНежилыхПомещений = 3;
		СчетчикСтрокЖилыхПомещений   = 3;
		СчетчикСтрокКомнат           = 3;
		
		Для Каждого ТекущееМКД Из СтрокиПартии Цикл
			
			ЛистМКД.cells(СчетчикСтрокЗданий, 1).value  = ТекущееМКД.Адрес;
			ЛистМКД.cells(СчетчикСтрокЗданий, 2).value  = ТекущееМКД.КодДомаПоФИАС;
			ЛистМКД.cells(СчетчикСтрокЗданий, 3).value  = ТекущееМКД.ОКТМО;
			ЛистМКД.cells(СчетчикСтрокЗданий, 4).value  = ТекущееМКД.ЧасоваяЗонаПоOslon;
			ЛистМКД.cells(СчетчикСтрокЗданий, 5).value = ПолучитьПредставлениеКадастровогоНомера(ТекущееМКД.КадастровыйНомер);
			
			СчетчикСтрокЗданий = СчетчикСтрокЗданий + 1;
			
			СтрокиТекНежилыхПомещений = ТаблицаНежилыхПомещений.НайтиСтроки(Новый Структура("Здание", ТекущееМКД.Здание));
			Для Каждого НежилоеПомещение Из СтрокиТекНежилыхПомещений Цикл
				ЛистНежилыхПомещений.cells(СчетчикСтрокНежилыхПомещений, 1).value = НежилоеПомещение.АдресЗдания;
				ЛистНежилыхПомещений.cells(СчетчикСтрокНежилыхПомещений, 2).value = НежилоеПомещение.НомерПомещения;
				ЛистНежилыхПомещений.cells(СчетчикСтрокНежилыхПомещений, 3).value = НежилоеПомещение.ОбщаяПлощадь;
				ЛистНежилыхПомещений.cells(СчетчикСтрокНежилыхПомещений, 4).value = ПолучитьПредставлениеКадастровогоНомера(НежилоеПомещение.КадастровыйНомер);
				
				СчетчикСтрокНежилыхПомещений = СчетчикСтрокНежилыхПомещений + 1;
			КонецЦикла;
			
			СтрокиЖилыхПомещений = ТаблицаЖилыхПомещений.НайтиСтроки(Новый Структура("Здание", ТекущееМКД.Здание));
			Для Каждого ЖилоеПомещение Из СтрокиЖилыхПомещений Цикл
				ЛистЖилыхПомещений.cells(СчетчикСтрокЖилыхПомещений, 1).value = ЖилоеПомещение.АдресЗдания;
				ЛистЖилыхПомещений.cells(СчетчикСтрокЖилыхПомещений, 2).value = ЖилоеПомещение.НомерПомещения;
				ЛистЖилыхПомещений.cells(СчетчикСтрокЖилыхПомещений, 3).value = ЖилоеПомещение.НомерПодъезда;
				ЛистЖилыхПомещений.cells(СчетчикСтрокЖилыхПомещений, 4).value = ЖилоеПомещение.Характеристика;
				ЛистЖилыхПомещений.cells(СчетчикСтрокЖилыхПомещений, 5).value = ПолучитьПредставлениеКадастровогоНомера(ЖилоеПомещение.КадастровыйНомер);
				
				СчетчикСтрокЖилыхПомещений = СчетчикСтрокЖилыхПомещений + 1;
			КонецЦикла;
			
			СтрокиКомнат = ТаблицаКомнатМКД.НайтиСтроки(Новый Структура("Здание", ТекущееМКД.Здание));
			Для Каждого Комната Из СтрокиКомнат Цикл
				ЛистКомнат.cells(СчетчикСтрокКомнат, 1).value = Комната.АдресЗдания;
				ЛистКомнат.cells(СчетчикСтрокКомнат, 2).value = Комната.НомерРодителя;
				ЛистКомнат.cells(СчетчикСтрокКомнат, 3).value = Комната.НомерПомещения;
				ЛистКомнат.cells(СчетчикСтрокКомнат, 4).value = ПолучитьПредставлениеКадастровогоНомера(Комната.КадастровыйНомер);
				
				СчетчикСтрокКомнат = СчетчикСтрокКомнат + 1;
			КонецЦикла;
		КонецЦикла;
		
		Книга.Save();
		Книга.Close();
		
		Если ФормируемНаСервере Тогда
			ДобавитьСтрокуВТаблицуСФайлами(СформированныеФайлы, ПутьКФайлу, ИмяФайла);
		КонецЕсли;
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Сформирован файл " + ПутьКФайлу + "...");
		
		КоличествоФайлов = КоличествоФайлов + 1;
	КонецЦикла;
	
КонецПроцедуры // ВыполнитьВыгрузкуМКД_РСО()

&НаКлиентеНаСервереБезКонтекста
// Формирует файл со сведениями о жилых домах.
Процедура ВыполнитьВыгрузкуЖД(Эксель, КоличествоФайлов, КаталогВыгрузки, МакетЖД, ТаблицаЖД, ТаблицаИнформацииОЖД, ТаблицаБлоковЖД, ТаблицаКомнатЖД, КоличествоПартийЖД, СформированныеФайлы,
							  ФормируемНаСервере)
	
	Для ТекущаяПартия = 1 По КоличествоПартийЖД Цикл
		СтрокиПартии = ТаблицаЖД.НайтиСтроки(Новый Структура("Партия", ТекущаяПартия));
		
		ПутьКФайлу = КаталогВыгрузки + "\" + "Сведения о ЖД от " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy HH.mm.ss'") + ".xlsx";
		#Если НЕ ВебКлиент Тогда
		ИмяФайла   = ?(ФормируемНаСервере, ПолучитьИмяВременногоФайла("xlsx"), ПутьКФайлу);
		#Иначе
		ИмяФайла = ПутьКФайлу;
		#КонецЕсли
		МакетЖД.Записать(ИмяФайла);
		
		Книга = Эксель.WorkBooks.Open(ИмяФайла);
		
		ЛистЖД           = Книга.WorkSheets(1);
		ЛистИнформацииЖД = Книга.WorkSheets(2);
		ЛистБлоков       = Книга.WorkSheets(3);
		ЛистКомнат       = Книга.WorkSheets(5);
		
		СчетчикСтрокЗданий    = 3;
		СчетчикСтрокИнфЗданий = 3;
		СчетчикСтрокБлоков    = 3;
		СчетчикСтрокКомнат    = 3;
		
		Для Каждого ТекущееЖД Из СтрокиПартии Цикл
			ЛистЖД.cells(СчетчикСтрокЗданий, 1).value  = ТекущееЖД.Адрес;
			ЛистЖД.cells(СчетчикСтрокЗданий, 2).value  = ТекущееЖД.КодДомаПоФИАС;
			ЛистЖД.cells(СчетчикСтрокЗданий, 3).value  = ПолучитьПредставлениеБулеваТипа(ТекущееЖД.ЖилойДомБлокированнойЗастройки);
			
			// 25.12.2017 ввели новое поле у ЖД - "Несколько жилых домов с одинаковым адресом".
			// На данный момент не ясно, как вообще возможна такая ситуация, поэтому пока
			// заполняем данное поле значением "Нет".
			ЛистЖД.cells(СчетчикСтрокЗданий, 4).value  = "Нет";
			
			ЛистЖД.cells(СчетчикСтрокЗданий, 5).value  = ТекущееЖД.ОКТМО;
			ЛистЖД.cells(СчетчикСтрокЗданий, 6).value  = ТекущееЖД.Состояние;
			ЛистЖД.cells(СчетчикСтрокЗданий, 7).value  = ТекущееЖД.СтадияЖизненногоЦикла;
			ЛистЖД.cells(СчетчикСтрокЗданий, 8).value  = ТекущееЖД.ОбщаяПлощадьЗдания;
			ЛистЖД.cells(СчетчикСтрокЗданий, 9).value  = ТекущееЖД.ГодВводаВЭксплуатацию;
			ЛистЖД.cells(СчетчикСтрокЗданий, 10).value  = ТекущееЖД.КоличествоЭтажей;
			ЛистЖД.cells(СчетчикСтрокЗданий, 11).value = ПолучитьПредставлениеБулеваТипа(ТекущееЖД.ОбъектКультурногоНаследия);
			ЛистЖД.cells(СчетчикСтрокЗданий, 12).value = ТекущееЖД.ЧасоваяЗонаПоOslon;
			ЛистЖД.cells(СчетчикСтрокЗданий, 13).value = ПолучитьПредставлениеКадастровогоНомера(ТекущееЖД.КадастровыйНомер);
			
			СчетчикСтрокЗданий = СчетчикСтрокЗданий + 1;
			
			СтрокиТекИнформацииЖД = ТаблицаИнформацииОЖД.НайтиСтроки(Новый Структура("Здание", ТекущееЖД.Здание));
			Для Каждого СтрокаПараметраЗдания Из СтрокиТекИнформацииЖД Цикл
				Если НЕ СтрокаПараметраЗдания.Параметр = "0" Тогда
					ЛистИнформацииЖД.cells(СчетчикСтрокИнфЗданий, 1).value = СтрокаПараметраЗдания.АдресЗдания;
					ЛистИнформацииЖД.cells(СчетчикСтрокИнфЗданий, 2).value = СтрокаПараметраЗдания.Параметр;
					ЛистИнформацииЖД.cells(СчетчикСтрокИнфЗданий, 3).value = Число(СтрокаПараметраЗдания.Значение);
					СчетчикСтрокИнфЗданий = СчетчикСтрокИнфЗданий + 1;
				КонецЕсли;
			КонецЦикла;
			
			СтрокиБлоков = ТаблицаБлоковЖД.НайтиСтроки(Новый Структура("Здание", ТекущееЖД.Здание));
			Для Каждого Блок Из СтрокиБлоков Цикл
				ЛистБлоков.cells(СчетчикСтрокБлоков, 1).value = Блок.АдресЗдания;
				ЛистБлоков.cells(СчетчикСтрокБлоков, 2).value = Блок.НомерБлока;
				ЛистБлоков.cells(СчетчикСтрокБлоков, 3).value = ?(Блок.ЯвляетсяЖилым, "Жилое", "Нежилое");
				ЛистБлоков.cells(СчетчикСтрокБлоков, 4).value = "Отдельная квартира";
				ЛистБлоков.cells(СчетчикСтрокБлоков, 5).value = Блок.ОбщаяПлощадь;
				ЛистБлоков.cells(СчетчикСтрокБлоков, 6).value = Блок.ЖилаяПлощадь;
				ЛистБлоков.cells(СчетчикСтрокБлоков, 7).value = ПолучитьПредставлениеКадастровогоНомера(Блок.КадастровыйНомер);
				ЛистБлоков.cells(СчетчикСтрокБлоков, 8).value = "Да";
				
				СчетчикСтрокБлоков = СчетчикСтрокБлоков + 1;
			КонецЦикла;
			
			СтрокиКомнат = ТаблицаКомнатЖД.НайтиСтроки(Новый Структура("Здание", ТекущееЖД.Здание));
			Для Каждого Комната Из СтрокиКомнат Цикл
				ЛистКомнат.cells(СчетчикСтрокКомнат, 1).value = Комната.АдресЗдания;
				
				Если ТекущееЖД.ЖилойДомБлокированнойЗастройки Тогда
					ЛистКомнат.cells(СчетчикСтрокКомнат, 2).value = Комната.НомерБлока;
					ЛистКомнат.cells(СчетчикСтрокКомнат, 3).value = "Жилое";
				КонецЕсли;
					
				ЛистКомнат.cells(СчетчикСтрокКомнат, 4).value = Комната.НомерПомещения;
				ЛистКомнат.cells(СчетчикСтрокКомнат, 5).value = Комната.ОбщаяПлощадь;
				ЛистКомнат.cells(СчетчикСтрокКомнат, 6).value = ПолучитьПредставлениеКадастровогоНомера(Комната.КадастровыйНомер);
				ЛистКомнат.cells(СчетчикСтрокКомнат, 7).value = "Да";
				
				СчетчикСтрокКомнат = СчетчикСтрокКомнат + 1;
			КонецЦикла;
			
		КонецЦикла;
		
		Книга.Save();
		Книга.Close();
		
		Если ФормируемНаСервере Тогда
			ДобавитьСтрокуВТаблицуСФайлами(СформированныеФайлы, ПутьКФайлу, ИмяФайла);
		КонецЕсли;
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Сформирован файл " + ПутьКФайлу + "...");
		
		КоличествоФайлов = КоличествоФайлов + 1;
	КонецЦикла;
	
КонецПроцедуры // ВыполнитьВыгрузкуЖД()

&НаКлиентеНаСервереБезКонтекста
// Формирует файл со сведениями о жилых домах.
Процедура ВыполнитьВыгрузкуЖД_РСО(Эксель, КоличествоФайлов, КаталогВыгрузки, МакетЖД, ТаблицаЖД, ТаблицаБлоковЖД, ТаблицаКомнатЖД, КоличествоПартийЖД, СформированныеФайлы, ФормируемНаСервере)
	
	Для ТекущаяПартия = 1 По КоличествоПартийЖД Цикл
		СтрокиПартии = ТаблицаЖД.НайтиСтроки(Новый Структура("Партия", ТекущаяПартия));
		
		ПутьКФайлу = КаталогВыгрузки + "\" + "Сведения о ЖД от " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy HH.mm.ss'") + ".xlsx";
		#Если НЕ ВебКлиент Тогда
		ИмяФайла   = ?(ФормируемНаСервере, ПолучитьИмяВременногоФайла("xlsx"), ПутьКФайлу);
		#Иначе
		ИмяФайла = ПутьКФайлу;
		#КонецЕсли
		МакетЖД.Записать(ИмяФайла);
		
		Книга = Эксель.WorkBooks.Open(ИмяФайла);
		
		ЛистЖД     = Книга.WorkSheets(1);
		ЛистБлоков = Книга.WorkSheets(2);
		ЛистКомнат = Книга.WorkSheets(3);
		
		СчетчикСтрокЗданий = 3;
		СчетчикСтрокБлоков = 3;
		СчетчикСтрокКомнат = 3;
		
		Для Каждого ТекущееЖД Из СтрокиПартии Цикл
			ЛистЖД.cells(СчетчикСтрокЗданий, 1).value  = ТекущееЖД.Адрес;
			ЛистЖД.cells(СчетчикСтрокЗданий, 2).value  = ТекущееЖД.КодДомаПоФИАС;
			ЛистЖД.cells(СчетчикСтрокЗданий, 3).value  = ПолучитьПредставлениеБулеваТипа(ТекущееЖД.ЖилойДомБлокированнойЗастройки);
			
			// 25.12.2017 ввели новое поле у ЖД - "Несколько жилых домов с одинаковым адресом".
			// На данный момент не ясно, как вообще возможна такая ситуация, поэтому пока
			// заполняем данное поле значением "Нет".
			ЛистЖД.cells(СчетчикСтрокЗданий, 4).value  = "Нет";
			
			ЛистЖД.cells(СчетчикСтрокЗданий, 5).value  = ТекущееЖД.ОКТМО;
			ЛистЖД.cells(СчетчикСтрокЗданий, 6).value = ТекущееЖД.ЧасоваяЗонаПоOslon;
			ЛистЖД.cells(СчетчикСтрокЗданий, 7).value = ПолучитьПредставлениеКадастровогоНомера(ТекущееЖД.КадастровыйНомер);
			
			СчетчикСтрокЗданий = СчетчикСтрокЗданий + 1;
			
			СтрокиБлоков = ТаблицаБлоковЖД.НайтиСтроки(Новый Структура("Здание", ТекущееЖД.Здание));
			Для Каждого Блок Из СтрокиБлоков Цикл
				ЛистБлоков.cells(СчетчикСтрокБлоков, 1).value = Блок.АдресЗдания;
				ЛистБлоков.cells(СчетчикСтрокБлоков, 2).value = Блок.НомерБлока;
				ЛистБлоков.cells(СчетчикСтрокБлоков, 3).value = ?(Блок.ЯвляетсяЖилым, "Жилое", "Нежилое");
				ЛистБлоков.cells(СчетчикСтрокБлоков, 4).value = "Отдельная квартира";
				ЛистБлоков.cells(СчетчикСтрокБлоков, 5).value = Блок.ОбщаяПлощадь;
				ЛистБлоков.cells(СчетчикСтрокБлоков, 6).value = ПолучитьПредставлениеКадастровогоНомера(Блок.КадастровыйНомер);
				
				СчетчикСтрокБлоков = СчетчикСтрокБлоков + 1;
			КонецЦикла;
			
			СтрокиКомнат = ТаблицаКомнатЖД.НайтиСтроки(Новый Структура("Здание", ТекущееЖД.Здание));
			Для Каждого Комната Из СтрокиКомнат Цикл
				ЛистКомнат.cells(СчетчикСтрокКомнат, 1).value = Комната.АдресЗдания;
				
				Если ТекущееЖД.ЖилойДомБлокированнойЗастройки Тогда
					ЛистКомнат.cells(СчетчикСтрокКомнат, 2).value = Комната.НомерБлока;
					ЛистКомнат.cells(СчетчикСтрокКомнат, 3).value = "Жилое";
				КонецЕсли;
				
				ЛистКомнат.cells(СчетчикСтрокКомнат, 4).value = Комната.НомерПомещения;
				ЛистКомнат.cells(СчетчикСтрокКомнат, 5).value = Комната.ОбщаяПлощадь;
				ЛистКомнат.cells(СчетчикСтрокКомнат, 6).value = ПолучитьПредставлениеКадастровогоНомера(Комната.КадастровыйНомер);
				
				СчетчикСтрокКомнат = СчетчикСтрокКомнат + 1;
			КонецЦикла;
			
		КонецЦикла;
		
		Книга.Save();
		Книга.Close();
		
		Если ФормируемНаСервере Тогда
			ДобавитьСтрокуВТаблицуСФайлами(СформированныеФайлы, ПутьКФайлу, ИмяФайла);
		КонецЕсли;
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Сформирован файл " + ПутьКФайлу + "...");
		
		КоличествоФайлов = КоличествоФайлов + 1;
	КонецЦикла;
	
КонецПроцедуры // ВыполнитьВыгрузкуЖД_РСО()

&НаКлиентеНаСервереБезКонтекста
// Формирует файл со сведениями о договорах управления.
Процедура ВыполнитьВыгрузкуДУ(Эксель, КоличествоФайлов, КаталогВыгрузки, МакетДУ, ДополнительныеСоглашенияДУ, ДополнительныеУслугиДУ, КоммунальныеУслугиДУ, ТаблицаДУ,
							  ТаблицаКодовУслуг, СформированныеФайлы, ФормируемНаСервере)
	
	ПутьКФайлу = КаталогВыгрузки + "\" + "Сведения о договорах управления от " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy HH.mm.ss'") + ".xlsx";
	#Если НЕ ВебКлиент Тогда
	ИмяФайла   = ?(ФормируемНаСервере, ПолучитьИмяВременногоФайла("xlsx"), ПутьКФайлу);
	#Иначе
	ИмяФайла = ПутьКФайлу;
	#КонецЕсли
	МакетДУ.Записать(ИмяФайла);
	
	Книга = Эксель.WorkBooks.Open(ИмяФайла);
	
	ЛистДУ    = Книга.WorkSheets(1);
	ЛистУслуг = Книга.WorkSheets(2);
	
	СчетчикДУ    = 3;
	СчетчикУслуг = 2;
	
	Для Каждого СтрокаДанных Из ТаблицаДУ Цикл
		ЛистДУ.cells(СчетчикДУ, 1).value = СтрокаДанных.АдресЗдания;
		ЛистДУ.cells(СчетчикДУ, 2).value = СтрокаДанных.НомерДоговора;
		ЛистДУ.cells(СчетчикДУ, 3).value = СтрокаДанных.ДатаЗаключенияДоговора;
		ЛистДУ.cells(СчетчикДУ, 4).value = СтрокаДанных.КодЗданияПоФИАС;
		ЛистДУ.cells(СчетчикДУ, 5).value = Формат(СтрокаДанных.ДатаНачалаДействия, "ДФ=dd.MM.yyyy");
		ЛистДУ.cells(СчетчикДУ, 6).value = Формат(СтрокаДанных.ДатаОкончанияДействия, "ДФ=dd.MM.yyyy");
		
		СтрокиДопСоглашений = ДополнительныеСоглашенияДУ.НайтиСтроки(Новый Структура("ДоговорУправления", СтрокаДанных.ДоговорУправления));
		
		Если СтрокиДопСоглашений.Количество() = 0 Тогда
			ЛистДУ.cells(СчетчикДУ, 7).value = "да";
		Иначе
			СтрокаДопСоглашения = СтрокиДопСоглашений.Получить(0);
			ЛистДУ.cells(СчетчикДУ, 8).value = СтрокаДопСоглашения.НомерСоглашения;
			ЛистДУ.cells(СчетчикДУ, 9).value = Формат(СтрокаДопСоглашения.ДатаСоглашения, "ДФ=dd.MM.yyyy");
		КонецЕсли;
		
		СчетчикДУ = СчетчикДУ + 1;
		
		ТаблицаКомУслуг = ПолучитьТаблицуУслугДУ(КоммунальныеУслугиДУ, СтрокаДанных.ДоговорУправления);
		ТаблицаДопУслуг = ПолучитьТаблицуУслугДУ(ДополнительныеУслугиДУ, СтрокаДанных.ДоговорУправления);
		
		Для Каждого СтрокаКУ Из ТаблицаКомУслуг Цикл
			ЛистУслуг.cells(СчетчикУслуг, 1).value = СтрокаДанных.АдресЗдания;
			ЛистУслуг.cells(СчетчикУслуг, 2).value = "КУ";
			ЛистУслуг.cells(СчетчикУслуг, 3).value = НайтиКодУслуги(СтрокаКУ.ВидУслуги, ТаблицаКодовУслуг);
			ЛистУслуг.cells(СчетчикУслуг, 4).value = Формат(СтрокаКУ.ДатаНачалаПредоставления, "ДФ=dd.MM.yyyy");
			ЛистУслуг.cells(СчетчикУслуг, 5).value = Формат(СтрокаКУ.ДатаОкончанияПредоставления, "ДФ=dd.MM.yyyy");
			
			СчетчикУслуг = СчетчикУслуг + 1;
		КонецЦикла;
		
		Для Каждого СтрокаДУ Из ТаблицаДопУслуг Цикл
			ЛистУслуг.cells(СчетчикУслуг, 1).value = СтрокаДанных.АдресЗдания;
			ЛистУслуг.cells(СчетчикУслуг, 2).value = "ДУ";
			ЛистУслуг.cells(СчетчикУслуг, 3).value = НайтиКодУслуги(СтрокаДУ.ВидУслуги, ТаблицаКодовУслуг);
			ЛистУслуг.cells(СчетчикУслуг, 4).value = Формат(СтрокаДУ.ДатаНачалаПредоставления, "ДФ=dd.MM.yyyy");
			ЛистУслуг.cells(СчетчикУслуг, 5).value = Формат(СтрокаДУ.ДатаОкончанияПредоставления, "ДФ=dd.MM.yyyy");
			
			СчетчикУслуг = СчетчикУслуг + 1;
		КонецЦикла;
	КонецЦикла;
	
	Книга.Save();
	Книга.Close();
	
	Если ФормируемНаСервере Тогда
		ДобавитьСтрокуВТаблицуСФайлами(СформированныеФайлы, ПутьКФайлу, ИмяФайла);
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Сформирован файл " + ПутьКФайлу + "...");
	
	КоличествоФайлов = КоличествоФайлов + 1;
	
КонецПроцедуры // ВыполнитьВыгрузкуДУ()

&НаКлиентеНаСервереБезКонтекста
// Формирует файл со сведениями о лицевых счетах.
//
// Параметры:
//  ТаблицаЛС - ТаблицаЗначений - таблица со сведениями о лицевых счетах
//  КаталогВыгрузки - Строка - каталог выгрузки
//  Эксель - COMОбъект - внешний объект, соответствующий MS Ecxel.
//
Процедура ВыполнитьВыгрузкуЛицевыхСчетов(Эксель, КоличествоФайлов, КаталогВыгрузки, МакетЛС, ТаблицаЛС, СформированныеФайлы, ФормируемНаСервере, ТипУО, ВыгружатьОтдельныеЛицевыеСчетаКР)
	
	ПутьКФайлу = КаталогВыгрузки + "\" + "Сведения о лицевых счетах от " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy HH.mm.ss'") + ".xlsx";
	#Если НЕ ВебКлиент Тогда
	ИмяФайла   = ?(ФормируемНаСервере, ПолучитьИмяВременногоФайла("xlsx"), ПутьКФайлу);
	#Иначе
	ИмяФайла = ПутьКФайлу;
	#КонецЕсли
	МакетЛС.Записать(ИмяФайла);
	
	Книга = Эксель.WorkBooks.Open(ИмяФайла);
	
	ЛистЛС        = Книга.WorkSheets(1);
	ЛистПомещения = Книга.WorkSheets(2);
	
	Счетчик = 3;
	
	ВидЛС = "ЛС УО";
	
	Если ВыгружатьОтдельныеЛицевыеСчетаКР Тогда
		ВидЛС = "ЛС КР";
	ИначеЕсли ТипУО = ПредопределенноеЗначение("Перечисление.УПЖКХ_ТипыОрганизаций.РСО") Тогда
		ВидЛС = "ЛС РСО";
	КонецЕсли;
	
	Для Каждого СтрокаЛС Из ТаблицаЛС Цикл
		ЛистЛС.cells(Счетчик, 1).value = СтрокаЛС.НомерПП;
		ЛистЛС.cells(Счетчик, 2).value = СтрокаЛС.СтрокаИдентификацииЛицевогоСчета;
		ЛистЛС.cells(Счетчик, 4).value = ВидЛС;
		Если ВыгружатьОтдельныеЛицевыеСчетаКР Тогда
			ЛистЛС.cells(Счетчик, 3).value = СтрокаЛС.ИдентификаторЖКУКР;
		Иначе
			ЛистЛС.cells(Счетчик, 3).value = СтрокаЛС.ИдентификаторЖКУ;
		КонецЕсли;
		// Для лицевых счетов КР данное поле нужно оставить пустым
		Если НЕ ВыгружатьОтдельныеЛицевыеСчетаКР Тогда
			ЛистЛС.cells(Счетчик, 5).value = ПолучитьПредставлениеБулеваТипа(СтрокаЛС.ЯвляетсяНанимателем);
		КонецЕсли;
		ЛистЛС.cells(Счетчик, 6).value = ПолучитьПредставлениеБулеваТипа(СтрокаЛС.ПомещениеРазделеноНаНесколькоЛицевыхСчетов);
		
		Если СтрокаЛС.ЯвляетсяЖильцом Или СтрокаЛС.ЯвляетсяКонтрагентомФизЛицом Тогда
			ЛистЛС.cells(Счетчик, 7).value  = СтрокаЛС.Фамилия;
			ЛистЛС.cells(Счетчик, 8).value  = СтрокаЛС.Имя;
			ЛистЛС.cells(Счетчик, 9).value  = СтрокаЛС.Отчество;
			ЛистЛС.cells(Счетчик, 10).value  = СтрокаЛС.СНИЛС;
			ЛистЛС.cells(Счетчик, 11).value = ПолучитьВидДокументаФизЛица(СтрокаЛС.ВидДокумента);
			ЛистЛС.cells(Счетчик, 12).value = СтрокаЛС.Номер;
			ЛистЛС.cells(Счетчик, 13).value = СтрокаЛС.Серия;
			
			Если ЗначениеЗаполнено(СтрокаЛС.ДатаВыдачи) Тогда
				ЛистЛС.cells(Счетчик, 14).value = СтрокаЛС.ДатаВыдачи;
			КонецЕсли;

		Иначе
			Если Не  СтрокаЛС.ЯвляетсяИностраннымЮрЛицом Тогда
				ЛистЛС.cells(Счетчик, 15).value = СтрокаЛС.ОГРН;
			Иначе
				ЛистЛС.cells(Счетчик, 16).value = СтрокаЛС.ОГРН;
			КонецЕсли;
			Если СтрокаЛС.ЯвляетсяОбособленнымПодразделением Тогда
				ЛистЛС.cells(Счетчик, 17).value = СтрокаЛС.КПП;
			КонецЕсли;
		КонецЕсли;
		ЛистЛС.cells(Счетчик, 18).value = СтрокаЛС.ОбщаяПлощадь;
		ЛистЛС.cells(Счетчик, 19).value = СтрокаЛС.ЖилаяПлощадь;
		ЛистЛС.cells(Счетчик, 21).value = СтрокаЛС.КоличествоПроживающих;
		
		ЛистПомещения.cells(Счетчик, 1).value = СтрокаЛС.НомерПП;
		ЛистПомещения.cells(Счетчик, 2).value = СтрокаЛС.АдресПомещения;
		
		// Группа полей "Адрес дома, помещения, комнаты" заполняется только в том случае,
		// если на заполнено значение идентификатора помещения в ГИС.
		Если ПустаяСтрока(СтрокаЛС.ИдентификаторПомещенияВГИСЖКХ) Тогда
			
			ЛистПомещения.cells(Счетчик, 3).value = СтрокаЛС.КодДомаПоФИАС;
			ЛистПомещения.cells(Счетчик, 4).value = ?(СтрокаЛС.ЯвляетсяЖилым, "Жилое помещение", "Нежилое помещение");
			
			// Если это МКД, то л/с открыт в квартире, если ЖД - то в комнате.
			Если СтрокаЛС.ЭтоМногоквартирныйДом Тогда
				ЛистПомещения.cells(Счетчик, 5).value = СтрокаЛС.НомерПомещения;
			Иначе
				ЛистПомещения.cells(Счетчик, 6).value = СтрокаЛС.НомерПомещения;
			КонецЕсли;
			
		КонецЕсли;
		
		ЛистПомещения.cells(Счетчик, 7).value = СтрокаЛС.ИдентификаторПомещенияВГИСЖКХ;
		ЛистПомещения.cells(Счетчик, 8).value = СтрокаЛС.ДоляВнесенияПлаты;
		
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	Книга.Save();
	Книга.Close();
	
	Если ФормируемНаСервере Тогда
		ДобавитьСтрокуВТаблицуСФайлами(СформированныеФайлы, ПутьКФайлу, ИмяФайла);
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Сформирован файл " + ПутьКФайлу + "...");
	
	КоличествоФайлов = КоличествоФайлов + 1;
	
КонецПроцедуры // ВыполнитьВыгрузкуЛицевыхСчетов()

&НаКлиентеНаСервереБезКонтекста
// Формирует файл со сведениями о лицевых счетах.
//
// Параметры:
//  ТаблицаЛС - ТаблицаЗначений - таблица со сведениями о лицевых счетах
//  КаталогВыгрузки - Строка - каталог выгрузки
//  Эксель - COMОбъект - внешний объект, соответствующий MS Ecxel.
//
Процедура ВыполнитьВыгрузкуПлатежныхДокументов(Эксель, КоличествоФайлов, КаталогВыгрузки, Форма, СтруктураИменТаблицФормы, СформированныеФайлы, ФормируемНаСервере)
	
	// Получим таблицы данных из формы.
	Если СтруктураИменТаблицФормы.Свойство("ТаблицаЛицевыхСчетовПД") Тогда
		ТаблицаЛС = Форма["ТаблицаЛицевыхСчетовПД"];
	КонецЕсли;
	
	Если СтруктураИменТаблицФормы.Свойство("ТаблицаУслугПД") Тогда
		ТаблицаУслуг = Форма["ТаблицаУслугПД"];
	КонецЕсли;
	
	// В случае когда платежный документ содержит данные только об услугах капитального ремонта,
	// то заполнять лист "Раздел 3-6" не нужно, и таблица "ТаблицаУслуг" в этом случае пустая.
	Если ТаблицаЛС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КоличествоПартий = Форма.КоличествоПартийПД;
	ДополнениеКИмени = "";
	Для Партия = 1 По КоличествоПартий Цикл
		
		Если Партия > 1 Тогда
			ДополнениеКИмени = "_Партия" + Строка(Партия);
		КонецЕсли;
		Отбор = Новый Структура;
		Отбор.Вставить("Партия", Партия);
		
		// Находим строки нужных партий.
		Если КоличествоПартий = 1 Тогда
			СтрокиЛС    = ТаблицаЛС;
			СтрокиУслуг = ТаблицаУслуг;
		Иначе
			Отбор = Новый Структура;
			Отбор.Вставить("Партия", Партия);
			СтрокиЛС    = ТаблицаЛС.НайтиСтроки(Отбор);
			СтрокиУслуг = ТаблицаУслуг.НайтиСтроки(Отбор);
		КонецЕсли;
		
		// Нужно считать файл шаблона в двоичные данные, затем перезаписать - фактически делаем копию шаблона в каталоге выгрузки.
		Если ФормируемНаСервере Тогда
			ДвоичныеДанныеШаблона = ПолучитьИзВременногоХранилища(Форма.ПутьКФайлуШаблонаПДВрХранилище);
		Иначе
			ДвоичныеДанныеШаблона = Новый ДвоичныеДанные(Форма.Объект.ПутьКФайлуШаблонаПД);
		КонецЕсли;
		
		ПутьКФайлу = КаталогВыгрузки + "\" + "Сведения о платежных документах от " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy HH.mm.ss'") + ДополнениеКИмени + ".xlsx";
		#Если НЕ ВебКлиент Тогда
		ИмяФайла = ?(ФормируемНаСервере, ПолучитьИмяВременногоФайла("xlsx"), ПутьКФайлу);
		#Иначе
		ИмяФайла = ПутьКФайлу;
		#КонецЕсли
		ДвоичныеДанныеШаблона.Записать(ИмяФайла);
		
		Книга = Эксель.WorkBooks.Open(ИмяФайла);
		
		ЛистЛС     = Книга.WorkSheets(1);
		ЛистУслуги = Книга.WorkSheets(2);
		ЛистПени   = Книга.WorkSheets(4);
		
		Счетчик = 4;
		СчетчикПени = 3;
		Для Каждого СтрокаЛС Из СтрокиЛС Цикл
			
			// Основные сведения.
			ЛистЛС.cells(Счетчик, 1).value = СтрокаЛС.ИдентификаторЖКУ;
			ЛистЛС.cells(Счетчик, 2).value = СтрокаЛС.ТипПД;
			ЛистЛС.cells(Счетчик, 3).value = СтрокаЛС.НомерПД;
			ЛистЛС.cells(Счетчик, 4).value = СтрокаЛС.РасчетныйПериод;
			ЛистЛС.cells(Счетчик, 5).value = СтрокаЛС.ОбщаяПлощадь;
			ЛистЛС.cells(Счетчик, 6).value = СтрокаЛС.ЖилаяПлощадь;
			ЛистЛС.cells(Счетчик, 7).value = СтрокаЛС.ОтапливаемаяПлощадь;
			ЛистЛС.cells(Счетчик, 8).value = СтрокаЛС.КоличествоПроживающих;
			ЛистЛС.cells(Счетчик, 9).value = СтрокаЛС.ВсегоНачислено;
			ЛистЛС.cells(Счетчик, 10).value = СтрокаЛС.Задолженность;
			ЛистЛС.cells(Счетчик, 11).value = СтрокаЛС.Аванс;
			ЛистЛС.cells(Счетчик, 12).value = СтрокаЛС.ВнесеноОплат;
			ЛистЛС.cells(Счетчик, 14).value = Формат(СтрокаЛС.ДатаПоследнейОплаты, "ДФ=dd.MM.yyyy");
			ЛистЛС.cells(Счетчик, 16).value = СтрокаЛС.ВсегоКОплате;
			ЛистЛС.cells(Счетчик, 17).value = СтрокаЛС.БИК;
			ЛистЛС.cells(Счетчик, 18).value = СтрокаЛС.РасчетныйСчет;
			// Кап. ремонт.
			// В текущей реализации в ГИСе ошибочно не загружаются строки, в которых в суммах по КР
			// в качестве разделителя указана запятая, поэтому заменим ее на точку.
			ЛистЛС.cells(Счетчик, 19).value = СтрЗаменить(СтрокаЛС.КРВзносНаКвМетр, ",", ".");
			ЛистЛС.cells(Счетчик, 20).value = СтрЗаменить(СтрокаЛС.КРНачислено, ",", ".");
			ЛистЛС.cells(Счетчик, 21).value = СтрЗаменить(СтрокаЛС.КРПерерасчет, ",", ".");
			ЛистЛС.cells(Счетчик, 22).value = СтрЗаменить(СтрокаЛС.КРЛьгота, ",", ".");
			ЛистЛС.cells(Счетчик, 23).value = СтрЗаменить(СтрокаЛС.КРПорядокРасчетов, ",", ".");
			ЛистЛС.cells(Счетчик, 24).value = СтрЗаменить(СтрокаЛС.КРИтогоКОплате, ",", ".");
			
			// Пени.
			ЛистЛС.cells(Счетчик, 30).value = ЗаменитьНаПустуюСтроку(СтрокаЛС.СуммаПени);
			
			// Сразу же заполним страницу "Неустойки и судебные издержки" суммами пени
			// (они идут без разреза услуг - общей суммой).
			Если НЕ СтрокаЛС.СуммаПени = 0 Тогда
				ЛистПени.cells(СчетчикПени, 1).value = СтрокаЛС.НомерПД;
				ЛистПени.cells(СчетчикПени, 2).value = "Пени";
				ЛистПени.cells(СчетчикПени, 3).value = "Начисление пени";
				ЛистПени.cells(СчетчикПени, 4).value = СтрокаЛС.СуммаПени;
				
				СчетчикПени = СчетчикПени + 1;
				
			КонецЕсли;
			
			ЛистЛС.cells(Счетчик, 35).value = СтрокаЛС.ИдентификаторПД;
			
			Счетчик = Счетчик + 1;
			
		КонецЦикла;
		
		Счетчик = 5;
		Для Каждого СтрокаУслуги Из СтрокиУслуг Цикл
			
			// Основные сведения.
			ЛистУслуги.cells(Счетчик, 1).value = СтрокаУслуги.НомерПД;
			ЛистУслуги.cells(Счетчик, 2).value = СтрокаУслуги.Услуга;
			
			// Начисление.
			ЛистУслуги.cells(Счетчик, 4).value = СтрокаУслуги.СпособОпределенияИнд;
			ЛистУслуги.cells(Счетчик, 5).value = ЗаменитьНаПустуюСтроку(СтрокаУслуги.ОбъемИнд);
			ЛистУслуги.cells(Счетчик, 6).value = СтрокаУслуги.СпособОпределенияОбщ;
			ЛистУслуги.cells(Счетчик, 7).value = ЗаменитьНаПустуюСтроку(СтрокаУслуги.ОбъемОбщ);
			ЛистУслуги.cells(Счетчик, 8).value = СтрокаУслуги.Тариф;
			ЛистУслуги.cells(Счетчик, 11).value = СтрокаУслуги.ВсегоНачисленоЗаРасчетныйПериод;
			
			// Повышающие коэффициенты.
			ЛистУслуги.cells(Счетчик, 12).value  = ЗаменитьНаПустуюСтроку(СтрокаУслуги.ПовышающийКоэффициент);
			ЛистУслуги.cells(Счетчик, 13).value = ЗаменитьНаПустуюСтроку(СтрокаУслуги.РазмерПревышенияПлаты);
			
			ЛистУслуги.cells(Счетчик, 14).value = ЗаменитьНаПустуюСтроку(СтрокаУслуги.Перерасчеты);
			ЛистУслуги.cells(Счетчик, 15).value = ЗаменитьНаПустуюСтроку(СтрокаУслуги.Льготы);
			ЛистУслуги.cells(Счетчик, 16).value = СтрокаУслуги.ПорядокРасчетов;
			
			// Справка.
			ЛистУслуги.cells(Счетчик, 17).value = ЗаменитьНаПустуюСтроку(СтрокаУслуги.СправкаНормативИнд);
			ЛистУслуги.cells(Счетчик, 18).value = ЗаменитьНаПустуюСтроку(СтрокаУслуги.СправкаНормативОбщ);
			ЛистУслуги.cells(Счетчик, 19).value = ЗаменитьНаПустуюСтроку(СтрокаУслуги.СправкаТекПоказанияИнд);
			ЛистУслуги.cells(Счетчик, 20).value = ЗаменитьНаПустуюСтроку(СтрокаУслуги.СправкаТекПоказанияОбщ);
			ЛистУслуги.cells(Счетчик, 21).value = ЗаменитьНаПустуюСтроку(СтрокаУслуги.СправкаОбъемИнд);
			ЛистУслуги.cells(Счетчик, 22).value = ЗаменитьНаПустуюСтроку(СтрокаУслуги.СправкаОбъемОбщ);
			
			// Перерасчеты.
			ЛистУслуги.cells(Счетчик, 23).value = СтрокаУслуги.ПерерасчетОснование;
			ЛистУслуги.cells(Счетчик, 24).value = ЗаменитьНаПустуюСтроку(СтрокаУслуги.ПерерасчетСумма);
			
			// Рассрочка.
			ЛистУслуги.cells(Счетчик, 25).value = ЗаменитьНаПустуюСтроку(СтрокаУслуги.РассрочкаТекПериод);
			ЛистУслуги.cells(Счетчик, 26).value = ЗаменитьНаПустуюСтроку(СтрокаУслуги.РассрочкаПредПериоды);
			ЛистУслуги.cells(Счетчик, 27).value = ЗаменитьНаПустуюСтроку(СтрокаУслуги.РассрочкаПроцентРуб);
			ЛистУслуги.cells(Счетчик, 28).value = ЗаменитьНаПустуюСтроку(СтрокаУслуги.РассрочкаПроцентДоля);
			ЛистУслуги.cells(Счетчик, 29).value = ЗаменитьНаПустуюСтроку(СтрокаУслуги.РассрочкаСуммаКОплате);
			
			// Итого к оплате.
			ЛистУслуги.cells(Счетчик, 30).value = СтрокаУслуги.ИтогоКОплатеВсего;
			ЛистУслуги.cells(Счетчик, 31).value = ЗаменитьНаПустуюСтроку(СтрокаУслуги.ИтогоКОплатеИнд);
			ЛистУслуги.cells(Счетчик, 32).value = ЗаменитьНаПустуюСтроку(СтрокаУслуги.ИтогоКОплатеОбщ);
			
			Счетчик = Счетчик + 1;
			
		КонецЦикла;
		
		Книга.Save();
		Книга.Close();
		
		Если ФормируемНаСервере Тогда
			ДобавитьСтрокуВТаблицуСФайлами(СформированныеФайлы, ПутьКФайлу, ИмяФайла);
		КонецЕсли;
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Сформирован файл " + ПутьКФайлу + "...");
		
		КоличествоФайлов = КоличествоФайлов + 1;
		
	КонецЦикла;// Для Партия = 1 По КоличествоПартий Цикл
	
	// Закрываем excel файл.
	Попытка
		Эксель.Application.Quit(); 
		Эксель.Quit();
		Эксель = 0;
	Исключение
	КонецПопытки;
	
КонецПроцедуры // ВыполнитьВыгрузкуПлатежныхДокументов()

&НаКлиентеНаСервереБезКонтекста
// Выполняет непосредственную выгрузку сведений о расчетах управляющей организации с РСО в файл Эксель.
//
Процедура ВыполнитьВыгрузкуДоговоровСРСО(Эксель, КоличествоФайлов, КаталогВыгрузки, МакетРасчетыРСО, Форма, ТаблицаСостоянияРасчетовРСОПериоды, ТаблицаСостоянияРасчетовРСОДоговоры, 
										 СформированныеФайлы, ФормируемНаСервере)
	
	ПутьКФайлу = КаталогВыгрузки + "\" + "Сведения о расчетах управляющей организации с РСО от " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy HH.mm.ss'") + ".xlsx";
			
	Если ТаблицаСостоянияРасчетовРСОДоговоры.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	#Если НЕ ВебКлиент Тогда
	ИмяФайла = ?(ФормируемНаСервере, ПолучитьИмяВременногоФайла("xlsx"), ПутьКФайлу);
	#Иначе
	ИмяФайла = ПутьКФайлу;
	#КонецЕсли
	МакетРасчетыРСО.Записать(ИмяФайла);
	
	Книга = Эксель.WorkBooks.Open(ИмяФайла);
	
	ЛистДоговоровРСО = Книга.WorkSheets(1);
	
	Счетчик = 3;
	Для Каждого Строка Из ТаблицаСостоянияРасчетовРСОДоговоры Цикл
		
		ЛистДоговоровРСО.cells(Счетчик, 1).value = Строка.Код;
		ЛистДоговоровРСО.cells(Счетчик, 3).value = Строка.ОГРН;
		ЛистДоговоровРСО.cells(Счетчик, 4).value = Строка.ИНН;
		ЛистДоговоровРСО.cells(Счетчик, 5).value = Строка.КПП;
		ЛистДоговоровРСО.cells(Счетчик, 6).value = Строка.НомерДоговора;
		Если Не Строка.ДатаДоговора = Дата(1, 1, 1) Тогда
			ЛистДоговоровРСО.cells(Счетчик, 7).value = Формат(Строка.ДатаДоговора, "ДФ=dd.MM.yyyy");
		КонецЕсли;
			
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	ЛистПериоды = Книга.WorkSheets(2);
	
	Счетчик = 2;
	Для Каждого Строка Из ТаблицаСостоянияРасчетовРСОПериоды Цикл
		
		ЛистПериоды.cells(Счетчик, 1).value = Строка.Код;
		ЛистПериоды.cells(Счетчик, 2).value = Формат(Строка.Период, "ДФ=MM/yyyy");
		ЛистПериоды.cells(Счетчик, 3).value = Формат(Строка.Оплачено,"ЧДЦ=2; ЧГ=");
		
		Счетчик = Счетчик + 1;
	КонецЦикла;

	// Закрываем excel файл.
	Попытка
		Эксель.ActiveWorkbook.Close(-1,);
		Эксель.Application.Quit(); 
		Эксель.Quit();
		Эксель = 0;
	Исключение
	КонецПопытки;
	
	Если ФормируемНаСервере Тогда
		ДобавитьСтрокуВТаблицуСФайлами(СформированныеФайлы, ПутьКФайлу, ИмяФайла);
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Сформирован файл " + ПутьКФайлу + "...");
	
	КоличествоФайлов = КоличествоФайлов + 1;
	
КонецПроцедуры // ВыполнитьВыгрузкуДоговоровСРСО()

&НаКлиентеНаСервереБезКонтекста
// Выполняет выгрузку сведений о договорах ДПОИ.
Процедура ВыполнитьВыгрузкуДоговоровДПОИ(Эксель, КоличествоФайлов, КаталогВыгрузки, МакетДПОИ, Форма, СтруктураИменТаблицФормы, СформированныеФайлы, ФормируемНаСервере)
	
	ПутьКФайлу = КаталогВыгрузки + "\" + "Сведения о договорах ДПОИ от " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy HH.mm.ss'") + ".xlsx";
	
	Если СтруктураИменТаблицФормы.Свойство("ТаблицаДоговоровДПОИ") Тогда
		ТаблицаДоговоров = Форма["ТаблицаДоговоровДПОИ"];
	КонецЕсли;
	
	Если ТаблицаДоговоров.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	#Если НЕ ВебКлиент Тогда
	ИмяФайла = ?(ФормируемНаСервере, ПолучитьИмяВременногоФайла("xlsx"), ПутьКФайлу);
	#Иначе
	ИмяФайла = ПутьКФайлу;
	#КонецЕсли
	МакетДПОИ.Записать(ИмяФайла);
	
	Книга = Эксель.WorkBooks.Open(ИмяФайла);
	
	ЛистДПОИ = Книга.WorkSheets(1);
	
	Счетчик = 4;
	Для Каждого Строка Из ТаблицаДоговоров Цикл
		
		ЛистДПОИ.cells(Счетчик, 1).value = Строка.НомерДоговора;
		ЛистДПОИ.cells(Счетчик, 2).value = Формат(Строка.ДатаДоговора, "ДФ=dd.MM.yyyy");
		ЛистДПОИ.cells(Счетчик, 3).value = Формат(Строка.ДатаНачалаДействия, "ДФ=dd.MM.yyyy");
		ЛистДПОИ.cells(Счетчик, 4).value = Формат(Строка.ПланируемаяДатаОкончанияДействия, "ДФ=dd.MM.yyyy");
		ЛистДПОИ.cells(Счетчик, 5).value = Строка.ПредметДоговора;
		ЛистДПОИ.cells(Счетчик, 6).value = Строка.Комментарий;
		ЛистДПОИ.cells(Счетчик, 7).value = Строка.РазмерПлатыПоДоговору;
		ЛистДПОИ.cells(Счетчик, 8).value = Строка.НаправлениеРасходованияСредств;
		ЛистДПОИ.cells(Счетчик, 9).value = Строка.КодДомаПоФИАС;
		ЛистДПОИ.cells(Счетчик, 10).value = ?(Строка.ТипАрендатора = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо"), "ЮЛ", "ФЛ");
		Если Строка.ТипАрендатора = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо") Тогда
			ЛистДПОИ.cells(Счетчик, 11).value = Строка.Фамилия;
			ЛистДПОИ.cells(Счетчик, 12).value = Строка.Имя;
			ЛистДПОИ.cells(Счетчик, 13).value = Строка.Отчество;
		Иначе
			ЛистДПОИ.cells(Счетчик, 18).value = Строка.ИНН;
			ЛистДПОИ.cells(Счетчик, 19).value = Строка.КПП;
			ЛистДПОИ.cells(Счетчик, 20).value = Строка.ОГРН;
		КонецЕсли;
		Если Строка.ДоговорЗаключенНаБезвозмезднойОснове Тогда
			ЛистДПОИ.cells(Счетчик, 30).value = "Да";
		ИначеЕсли Строка.УстановленыКонкретныеСрокиОплаты Тогда
			ЛистДПОИ.cells(Счетчик, 25).value = ?(Строка.ЧислоНачалаПериодаВнесенияПлаты = 31, "последний день месяца", Строка.ЧислоНачалаПериодаВнесенияПлаты);
			ЛистДПОИ.cells(Счетчик, 26).value = Строка.НачалоПериодаСледующийМесяц;
			ЛистДПОИ.cells(Счетчик, 27).value = ?(Строка.ЧислоОкончанияПериодаВнесенияПлаты = 31, "последний день месяца", Строка.ЧислоОкончанияПериодаВнесенияПлаты);
			ЛистДПОИ.cells(Счетчик, 28).value = Строка.КонецПериодаСледующийМесяц;
		Иначе
			ЛистДПОИ.cells(Счетчик, 29).value = Строка.ИныеУсловияДоговора;
		КонецЕсли;
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	// Закрываем excel файл.
	Попытка
		Эксель.ActiveWorkbook.Close(-1,);
		Эксель.Application.Quit();
		Эксель.Quit();
		Эксель = 0;
	Исключение
	КонецПопытки;
	
	Если ФормируемНаСервере Тогда
		ДобавитьСтрокуВТаблицуСФайлами(СформированныеФайлы, ПутьКФайлу, ИмяФайла);
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Сформирован файл " + ПутьКФайлу + "...");
	
	КоличествоФайлов = КоличествоФайлов + 1;
	
КонецПроцедуры // ВыполнитьВыгрузкуДоговоровДПОИ()

&НаКлиентеНаСервереБезКонтекста
// Выполняет выгрузку сведений о перечне работ и услуг.
Процедура ВыполнитьВыгрузкуСведенийОРаботахИУслугах(Эксель, КоличествоФайлов, КаталогВыгрузки, Форма, СтруктураИменТаблицФормы, СформированныеФайлы, ФормируемНаСервере);
	
	ВидВыгрузкиРаботУслуг = Форма.Объект.ВидОбменаРаботамиИУслугами;
	
	Если СтруктураИменТаблицФормы.Свойство("ТаблицаПеречня") Тогда
		ТаблицаПеречня = Форма["ТаблицаПеречня"];
	КонецЕсли;
	
	Если ТаблицаПеречня.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Нужно считать файл шаблона в двоичные данные, затем перезаписать - фактически делаем копию шаблона в каталоге выгрузки.
	ПутьКФайлуШаблона = Форма.Объект.ПутьКФайлуШаблонаВыгрузкиРаботИУслуг;
	Попытка
		ДвоичныеДанныеШаблона = Новый ДвоичныеДанные(ПутьКФайлуШаблона);
	Исключение
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не обнаружен файл с шаблоном выгрузки работ и услуг.");
		
		Возврат;
	КонецПопытки;
	
	Если ВидВыгрузкиРаботУслуг = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОбменаРаботамиИУслугамиСГИСЖКХ.ПеречниРаботИУслуг") Тогда
		ПутьКФайлу = КаталогВыгрузки + "\" + "Сведения о перечне работ и услуг от " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy HH.mm.ss'") + ".xlsx";
	ИначеЕсли ВидВыгрузкиРаботУслуг = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОбменаРаботамиИУслугамиСГИСЖКХ.ПланыРаботИУслуг") Тогда
		ПутьКФайлу = КаталогВыгрузки + "\" + "Сведения о плане работ и услуг от " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy HH.mm.ss'") + ".xlsx";
	Иначе
		ПутьКФайлу = КаталогВыгрузки + "\" + "Сведения о факте выполнения работ и услуг от " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy HH.mm.ss'") + ".xlsx";
	КонецЕсли;
	
	#Если НЕ ВебКлиент Тогда
	ИмяФайла = ?(ФормируемНаСервере, ПолучитьИмяВременногоФайла("xlsx"), ПутьКФайлу);
	#Иначе
	ИмяФайла = ПутьКФайлу;
	#КонецЕсли
	ДвоичныеДанныеШаблона.Записать(ИмяФайла);
	
	Книга = Эксель.WorkBooks.Open(ИмяФайла);
	
	Лист = Книга.WorkSheets(1);
	
	Счетчик = 2;
	
	Если ВидВыгрузкиРаботУслуг = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОбменаРаботамиИУслугамиСГИСЖКХ.ПеречниРаботИУслуг") Тогда
		Для Каждого Строка Из ТаблицаПеречня Цикл
			Лист.cells(Счетчик, 1).value = Строка.НаименованиеВидаРаботы;
			
			Если ЗначениеЗаполнено(Строка.Цена) Тогда
				Лист.cells(Счетчик, 2).value = Строка.Цена;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.Объем) Тогда
				Лист.cells(Счетчик, 3).value = Строка.Объем;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.Количество) Тогда
				Лист.cells(Счетчик, 4).value = Строка.Количество;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.Стоимость) Тогда
				Лист.cells(Счетчик, 5).value = Строка.Стоимость;
			КонецЕсли;
			
			Счетчик = Счетчик + 1;
		КонецЦикла;
		
	ИначеЕсли ВидВыгрузкиРаботУслуг = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОбменаРаботамиИУслугамиСГИСЖКХ.ПланыРаботИУслуг") Тогда
		Для Каждого Строка Из ТаблицаПеречня Цикл
			Лист.cells(Счетчик, 1).value = Строка.НаименованиеВидаРаботы;
			
			СчетчикКолонок = 2;
			Для Каждого ПлановоеКоличество Из Строка.СписокПланов Цикл
				Лист.cells(Счетчик, СчетчикКолонок).value = ПлановоеКоличество.Значение;
				
				СчетчикКолонок = СчетчикКолонок + 1;
			КонецЦикла;
			
			Счетчик = Счетчик + 1;
		КонецЦикла;
		
	ИначеЕсли ВидВыгрузкиРаботУслуг = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОбменаРаботамиИУслугамиСГИСЖКХ.ФактыРаботИУслуг") Тогда
		
		Пока Счетчик <= ТаблицаПеречня.Количество() + 1 Цикл
			ТекущаяРаботаУслуга = Лист.cells(Счетчик, 1).value;
			
			СтрокиТекРаботыУслуги = ТаблицаПеречня.НайтиСтроки(Новый Структура("РаботаУслуга", ТекущаяРаботаУслуга));
			
			Если Не СтрокиТекРаботыУслуги.Количество() = 0 Тогда
				СтрокаТекРаботыУслуги = СтрокиТекРаботыУслуги.Получить(0);
				
				Если ЗначениеЗаполнено(СтрокаТекРаботыУслуги.Цена) Тогда
					Лист.cells(Счетчик, 3).value = СтрокаТекРаботыУслуги.Цена;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаТекРаботыУслуги.Объем) Тогда
					Лист.cells(Счетчик, 5).value = СтрокаТекРаботыУслуги.Объем;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаТекРаботыУслуги.ФактическоеКоличество) Тогда
					Лист.cells(Счетчик, 7).value = СтрокаТекРаботыУслуги.ФактическоеКоличество;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаТекРаботыУслуги.Стоимость) Тогда
					Лист.cells(Счетчик, 9).value = СтрокаТекРаботыУслуги.Стоимость;
				КонецЕсли;
				
			КонецЕсли;
			
			Счетчик = Счетчик + 1;
		КонецЦикла;
	КонецЕсли;
	
	// Закрываем excel файл.
	Попытка
		Эксель.ActiveWorkbook.Close(-1,);
		Эксель.Application.Quit(); 
		Эксель.Quit();
		Эксель = 0;
	Исключение
	КонецПопытки;
	
	Если ФормируемНаСервере Тогда
		ДобавитьСтрокуВТаблицуСФайлами(СформированныеФайлы, ПутьКФайлу, ИмяФайла);
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Сформирован файл " + ПутьКФайлу + "...");
	
	КоличествоФайлов = КоличествоФайлов + 1;
	
КонецПроцедуры // ВыполнитьВыгрузкуСведенийОРаботахИУслугах()

&НаСервереБезКонтекста
// Проверяет объекты на заполненность обязательных к выгрузке данных и отсекает объекты, у которых данные не заполнены.
//
// Параметры:
//  ТаблицаМКД - ТаблицаЗначений - таблица со сведениями о МКД
//  ТаблицаЖД - ТаблицаЗначений - таблица со сведениями о жилых домах
//  ТаблицаПодъездов - ТаблицаЗначений - таблица со сведениями о подъездах МКД
//  ТаблицаЖилыхПомещений - ТаблицаЗначений - таблица со сведениями о жилых помещениях МКД
//  ТаблицаНежилыхПомещений - ТаблицаЗначений - таблица со сведениями о нежилых помещениях МКД
//  ТаблицаКомнатМКД - ТаблицаЗначений - таблица со сведениями о комнатах МКД
//  ТаблицаКомнатЖД - ТаблицаЗначений - таблица со сведениями о комнатах жилых домов (в качестве комнат выгружаются помещения)
//  ВсеДанныеЗаполнены - Булево - признак того, что полностью заполнены все необходимые к выгрузке данные.
//
Процедура ОтсеятьОбъектыСНезаполненнымиДанными(ТаблицаМКД, ТаблицаЖД, ТаблицаПодъездов, ТаблицаЖилыхПомещений, ТаблицаНежилыхПомещений, ТаблицаКомнатМКД, 
											   ТаблицаКомнатЖД, ВсеДанныеЗаполнены, ТаблицаСНезаполненнымиДанными, ЭтоПроверкаСведений)
	
	СтруктураОбязательныхПолейМКД              = ПолучитьСтруктуруОбязательныхПолей("МКД");
	СтруктураОбязательныхПолейЖД               = ПолучитьСтруктуруОбязательныхПолей("ЖД");
	СтруктураОбязательныхПолейПодъезды         = ПолучитьСтруктуруОбязательныхПолей("Подъезды");
	СтруктураОбязательныхПолейНежилыеПомещения = ПолучитьСтруктуруОбязательныхПолей("Нежилые помещения");
	СтруктураОбязательныхПолейЖилыеПомещения   = ПолучитьСтруктуруОбязательныхПолей("Жилые помещения");
	СтруктураОбязательныхПолейКомнатыМКД       = ПолучитьСтруктуруОбязательныхПолей("Комнаты МКД");
	СтруктураОбязательныхПолейКомнатыЖД        = ПолучитьСтруктуруОбязательныхПолей("Комнаты ЖД");
	
	ВидОбмена = "Сведения о зданиях";
	
	// Проверяем обязательные данные.
	ПроверитьЗаполнениеОбязательныхДанных(ТаблицаМКД, СтруктураОбязательныхПолейМКД, "здания", ВсеДанныеЗаполнены, ТаблицаСНезаполненнымиДанными, ВидОбмена, ЭтоПроверкаСведений);
	ПроверитьЗаполнениеОбязательныхДанных(ТаблицаЖД, СтруктураОбязательныхПолейЖД, "здания", ВсеДанныеЗаполнены, ТаблицаСНезаполненнымиДанными, ВидОбмена, ЭтоПроверкаСведений);
	ПроверитьЗаполнениеОбязательныхДанных(ТаблицаПодъездов, СтруктураОбязательныхПолейПодъезды, "подъезда", ВсеДанныеЗаполнены, ТаблицаСНезаполненнымиДанными, ВидОбмена, ЭтоПроверкаСведений);
	ПроверитьЗаполнениеОбязательныхДанных(ТаблицаЖилыхПомещений, СтруктураОбязательныхПолейЖилыеПомещения, "помещения", ВсеДанныеЗаполнены, ТаблицаСНезаполненнымиДанными, ВидОбмена, ЭтоПроверкаСведений);
	ПроверитьЗаполнениеОбязательныхДанных(ТаблицаНежилыхПомещений, СтруктураОбязательныхПолейНежилыеПомещения, "помещения", ВсеДанныеЗаполнены, ТаблицаСНезаполненнымиДанными, ВидОбмена, ЭтоПроверкаСведений);
	ПроверитьЗаполнениеОбязательныхДанных(ТаблицаКомнатМКД, СтруктураОбязательныхПолейКомнатыМКД, "комнаты", ВсеДанныеЗаполнены, ТаблицаСНезаполненнымиДанными, ВидОбмена, ЭтоПроверкаСведений);
	ПроверитьЗаполнениеОбязательныхДанных(ТаблицаКомнатЖД, СтруктураОбязательныхПолейКомнатыЖД, "помещения", ВсеДанныеЗаполнены, ТаблицаСНезаполненнымиДанными, ВидОбмена, ЭтоПроверкаСведений);
	
	// Если здание непригодно к выгрузке, то соответствующие подъезды и помещения тоже выгружать нельзя.
	СтрокиНеподходящихМКД = ТаблицаМКД.НайтиСтроки(Новый Структура("ДанныеНеЗаполнены", Истина));
	Для Каждого СтрокаНеподходящегоМКД Из СтрокиНеподходящихМКД Цикл
		НеподходящийМКД = СтрокаНеподходящегоМКД.Здание;
		
		СтрокиНеподходящихПодъездов = ТаблицаПодъездов.НайтиСтроки(Новый Структура("Здание", НеподходящийМКД));
		Для Каждого СтрокаНеподходящегоПодъезда Из СтрокиНеподходящихПодъездов Цикл
			СтрокаНеподходящегоПодъезда.ДанныеНеЗаполнены = Истина;
		КонецЦикла;
		
		СтрокиНеподходящихЖилыхПомещений = ТаблицаЖилыхПомещений.НайтиСтроки(Новый Структура("Здание", НеподходящийМКД));
		Для Каждого СтрокаНеподходящегоЖилогоПомещения Из СтрокиНеподходящихЖилыхПомещений Цикл
			СтрокаНеподходящегоЖилогоПомещения.ДанныеНеЗаполнены = Истина;
		КонецЦикла;
		
		СтрокиНеподходящихНежилыхПомещений = ТаблицаНежилыхПомещений.НайтиСтроки(Новый Структура("Здание", НеподходящийМКД));
		Для Каждого СтрокаНеподходящегоНежилогоПомещения Из СтрокиНеподходящихНежилыхПомещений Цикл
			СтрокаНеподходящегоНежилогоПомещения.ДанныеНеЗаполнены = Истина;
		КонецЦикла;
		
		СтрокиНеподходящихКомнатМКД = ТаблицаКомнатМКД.НайтиСтроки(Новый Структура("Здание", НеподходящийМКД));
		Для Каждого СтрокаНеподходящейКомнатыМКД Из СтрокиНеподходящихКомнатМКД Цикл
			СтрокаНеподходящейКомнатыМКД.ДанныеНеЗаполнены = Истина;
		КонецЦикла;
	КонецЦикла;
	
	// Если помещение непригодно к выгрузке, то соответствующие комнаты тоже выгружать нельзя.
	СтрокиНеподходящихЖилыхПомещений = ТаблицаЖилыхПомещений.НайтиСтроки(Новый Структура("ДанныеНеЗаполнены", Истина));
	Для Каждого СтрокаНеподходящегоЖилогоПомещения Из СтрокиНеподходящихЖилыхПомещений Цикл
		НеподходящееЖилоеПомещение = СтрокаНеподходящегоЖилогоПомещения.Помещение;
		
		СтрокиНеподходящихКомнатМКД = ТаблицаКомнатМКД.НайтиСтроки(Новый Структура("Родитель", НеподходящееЖилоеПомещение));
		Для Каждого СтрокаНеподходящейКомнатыМКД Из СтрокиНеподходящихКомнатМКД Цикл
			СтрокаНеподходящейКомнатыМКД.ДанныеНеЗаполнены = Истина;
		КонецЦикла;
	КонецЦикла;
	
	СтрокиНеподходящихНежилыхПомещений = ТаблицаНежилыхПомещений.НайтиСтроки(Новый Структура("ДанныеНеЗаполнены", Истина));
	Для Каждого СтрокаНеподходящегоНежилогоПомещения Из СтрокиНеподходящихНежилыхПомещений Цикл
		НеподходящееНежилоеПомещение = СтрокаНеподходящегоНежилогоПомещения.Помещение;
		
		СтрокиНеподходящихКомнатМКД = ТаблицаКомнатМКД.НайтиСтроки(Новый Структура("Родитель", НеподходящееНежилоеПомещение));
		Для Каждого СтрокаНеподходящейКомнатыМКД Из СтрокиНеподходящихКомнатМКД Цикл
			СтрокаНеподходящейКомнатыМКД.ДанныеНеЗаполнены = Истина;
		КонецЦикла;
	КонецЦикла;
	
	СтрокиНеподходящихЖД = ТаблицаЖД.НайтиСтроки(Новый Структура("ДанныеНеЗаполнены", Истина));
	Для Каждого СтрокаНеподходящегоЖД Из СтрокиНеподходящихЖД Цикл
		НеподходящийЖД = СтрокаНеподходящегоЖД.Здание;
		
		СтрокиНеподходящихКомнатЖД = ТаблицаКомнатЖД.НайтиСтроки(Новый Структура("Здание", НеподходящийЖД));
		Для Каждого СтрокаНеподходящейКомнатыЖД Из СтрокиНеподходящихКомнатЖД Цикл
			СтрокаНеподходящейКомнатыЖД.ДанныеНеЗаполнены = Истина;
		КонецЦикла;
	КонецЦикла;
	
	// Формируем таблицы только с теми данными, которые можно выгружать.
	СтрокиПодходящихМКД = ТаблицаМКД.НайтиСтроки(Новый Структура("ДанныеНеЗаполнены", Ложь));
	ТаблицаМКД          = ТаблицаМКД.Скопировать(СтрокиПодходящихМКД);
	
	СтрокиПодходящихЖД = ТаблицаЖД.НайтиСтроки(Новый Структура("ДанныеНеЗаполнены", Ложь));
	ТаблицаЖД          = ТаблицаЖД.Скопировать(СтрокиПодходящихЖД);
	
	СтрокиПодходящихПодъездов = ТаблицаПодъездов.НайтиСтроки(Новый Структура("ДанныеНеЗаполнены", Ложь));
	ТаблицаПодъездов          = ТаблицаПодъездов.Скопировать(СтрокиПодходящихПодъездов);
	
	СтрокиПодходящихЖилыхПомещений = ТаблицаЖилыхПомещений.НайтиСтроки(Новый Структура("ДанныеНеЗаполнены", Ложь));
	ТаблицаЖилыхПомещений          = ТаблицаЖилыхПомещений.Скопировать(СтрокиПодходящихЖилыхПомещений);
	
	СтрокиПодходящихНежилыхПомещений = ТаблицаНежилыхПомещений.НайтиСтроки(Новый Структура("ДанныеНеЗаполнены", Ложь));
	ТаблицаНежилыхПомещений          = ТаблицаНежилыхПомещений.Скопировать(СтрокиПодходящихНежилыхПомещений);
	
	СтрокиПодходящихКомнатМКД = ТаблицаКомнатМКД.НайтиСтроки(Новый Структура("ДанныеНеЗаполнены", Ложь));
	ТаблицаКомнатМКД          = ТаблицаКомнатМКД.Скопировать(СтрокиПодходящихКомнатМКД);
	
	СтрокиПодходящихКомнатЖД = ТаблицаКомнатЖД.НайтиСтроки(Новый Структура("ДанныеНеЗаполнены", Ложь));
	ТаблицаКомнатЖД          = ТаблицаКомнатЖД.Скопировать(СтрокиПодходящихКомнатЖД);
	
КонецПроцедуры // ОтсеятьОбъектыСНезаполненнымиДанными()

&НаСервереБезКонтекста
// Проверяет объекты на заполненность обязательных к выгрузке данных и отсекает объекты, у которых данные не заполнены.
Процедура ОтсеятьЗданияСНезаполненнымиДаннымиДляРСО(ТаблицаМКД, ТаблицаЖД, ТаблицаЖилыхПомещений, ТаблицаНежилыхПомещений, ТаблицаКомнатМКД, ТаблицаКомнатЖД, 
													ВсеДанныеЗаполнены, ТаблицаСНезаполненнымиДанными, ЭтоПроверкаСведений)
	
	СтруктураОбязательныхПолейМКД              = ПолучитьСтруктуруОбязательныхПолейДляВыгрузкиЗданийРСО("МКД");
	СтруктураОбязательныхПолейЖД               = ПолучитьСтруктуруОбязательныхПолейДляВыгрузкиЗданийРСО("ЖД");
	СтруктураОбязательныхПолейНежилыеПомещения = ПолучитьСтруктуруОбязательныхПолейДляВыгрузкиЗданийРСО("Нежилые помещения");
	СтруктураОбязательныхПолейЖилыеПомещения   = ПолучитьСтруктуруОбязательныхПолейДляВыгрузкиЗданийРСО("Жилые помещения");
	СтруктураОбязательныхПолейКомнатыМКД       = ПолучитьСтруктуруОбязательныхПолейДляВыгрузкиЗданийРСО("Комнаты МКД");
	СтруктураОбязательныхПолейКомнатыЖД        = ПолучитьСтруктуруОбязательныхПолейДляВыгрузкиЗданийРСО("Комнаты ЖД");
	
	ВидОбмена = "Сведения о зданиях";
	
	// Проверяем обязательные данные.
	ПроверитьЗаполнениеОбязательныхДанных(ТаблицаМКД, СтруктураОбязательныхПолейМКД, "здания", ВсеДанныеЗаполнены, ТаблицаСНезаполненнымиДанными, ВидОбмена, ЭтоПроверкаСведений);
	ПроверитьЗаполнениеОбязательныхДанных(ТаблицаЖД, СтруктураОбязательныхПолейЖД, "здания", ВсеДанныеЗаполнены, ТаблицаСНезаполненнымиДанными, ВидОбмена, ЭтоПроверкаСведений);
	ПроверитьЗаполнениеОбязательныхДанных(ТаблицаЖилыхПомещений, СтруктураОбязательныхПолейЖилыеПомещения, "помещения", ВсеДанныеЗаполнены, ТаблицаСНезаполненнымиДанными, ВидОбмена, ЭтоПроверкаСведений);
	ПроверитьЗаполнениеОбязательныхДанных(ТаблицаНежилыхПомещений, СтруктураОбязательныхПолейНежилыеПомещения, "помещения", ВсеДанныеЗаполнены, ТаблицаСНезаполненнымиДанными, ВидОбмена, ЭтоПроверкаСведений);
	ПроверитьЗаполнениеОбязательныхДанных(ТаблицаКомнатМКД, СтруктураОбязательныхПолейКомнатыМКД, "комнаты", ВсеДанныеЗаполнены, ТаблицаСНезаполненнымиДанными, ВидОбмена, ЭтоПроверкаСведений);
	ПроверитьЗаполнениеОбязательныхДанных(ТаблицаКомнатЖД, СтруктураОбязательныхПолейКомнатыЖД, "помещения", ВсеДанныеЗаполнены, ТаблицаСНезаполненнымиДанными, ВидОбмена, ЭтоПроверкаСведений);
	
	// Если здание непригодно к выгрузке, то соответствующие помещения тоже выгружать нельзя.
	СтрокиНеподходящихМКД = ТаблицаМКД.НайтиСтроки(Новый Структура("ДанныеНеЗаполнены", Истина));
	Для Каждого СтрокаНеподходящегоМКД Из СтрокиНеподходящихМКД Цикл
		НеподходящийМКД = СтрокаНеподходящегоМКД.Здание;
		
		СтрокиНеподходящихЖилыхПомещений = ТаблицаЖилыхПомещений.НайтиСтроки(Новый Структура("Здание", НеподходящийМКД));
		Для Каждого СтрокаНеподходящегоЖилогоПомещения Из СтрокиНеподходящихЖилыхПомещений Цикл
			СтрокаНеподходящегоЖилогоПомещения.ДанныеНеЗаполнены = Истина;
		КонецЦикла;
		
		СтрокиНеподходящихНежилыхПомещений = ТаблицаНежилыхПомещений.НайтиСтроки(Новый Структура("Здание", НеподходящийМКД));
		Для Каждого СтрокаНеподходящегоНежилогоПомещения Из СтрокиНеподходящихНежилыхПомещений Цикл
			СтрокаНеподходящегоНежилогоПомещения.ДанныеНеЗаполнены = Истина;
		КонецЦикла;
		
		СтрокиНеподходящихКомнатМКД = ТаблицаКомнатМКД.НайтиСтроки(Новый Структура("Здание", НеподходящийМКД));
		Для Каждого СтрокаНеподходящейКомнатыМКД Из СтрокиНеподходящихКомнатМКД Цикл
			СтрокаНеподходящейКомнатыМКД.ДанныеНеЗаполнены = Истина;
		КонецЦикла;
	КонецЦикла;
	
	// Если помещение непригодно к выгрузке, то соответствующие комнаты тоже выгружать нельзя.
	СтрокиНеподходящихЖилыхПомещений = ТаблицаЖилыхПомещений.НайтиСтроки(Новый Структура("ДанныеНеЗаполнены", Истина));
	Для Каждого СтрокаНеподходящегоЖилогоПомещения Из СтрокиНеподходящихЖилыхПомещений Цикл
		НеподходящееЖилоеПомещение = СтрокаНеподходящегоЖилогоПомещения.Помещение;
		
		СтрокиНеподходящихКомнатМКД = ТаблицаКомнатМКД.НайтиСтроки(Новый Структура("Родитель", НеподходящееЖилоеПомещение));
		Для Каждого СтрокаНеподходящейКомнатыМКД Из СтрокиНеподходящихКомнатМКД Цикл
			СтрокаНеподходящейКомнатыМКД.ДанныеНеЗаполнены = Истина;
		КонецЦикла;
	КонецЦикла;
	
	СтрокиНеподходящихНежилыхПомещений = ТаблицаНежилыхПомещений.НайтиСтроки(Новый Структура("ДанныеНеЗаполнены", Истина));
	Для Каждого СтрокаНеподходящегоНежилогоПомещения Из СтрокиНеподходящихНежилыхПомещений Цикл
		НеподходящееНежилоеПомещение = СтрокаНеподходящегоНежилогоПомещения.Помещение;
		
		СтрокиНеподходящихКомнатМКД = ТаблицаКомнатМКД.НайтиСтроки(Новый Структура("Родитель", НеподходящееНежилоеПомещение));
		Для Каждого СтрокаНеподходящейКомнатыМКД Из СтрокиНеподходящихКомнатМКД Цикл
			СтрокаНеподходящейКомнатыМКД.ДанныеНеЗаполнены = Истина;
		КонецЦикла;
	КонецЦикла;
	
	СтрокиНеподходящихЖД = ТаблицаЖД.НайтиСтроки(Новый Структура("ДанныеНеЗаполнены", Истина));
	Для Каждого СтрокаНеподходящегоЖД Из СтрокиНеподходящихЖД Цикл
		НеподходящийЖД = СтрокаНеподходящегоЖД.Здание;
		
		СтрокиНеподходящихКомнатЖД = ТаблицаКомнатЖД.НайтиСтроки(Новый Структура("Здание", НеподходящийЖД));
		Для Каждого СтрокаНеподходящейКомнатыЖД Из СтрокиНеподходящихКомнатЖД Цикл
			СтрокаНеподходящейКомнатыЖД.ДанныеНеЗаполнены = Истина;
		КонецЦикла;
	КонецЦикла;
	
	// Формируем таблицы только с теми данными, которые можно выгружать.
	СтрокиПодходящихМКД = ТаблицаМКД.НайтиСтроки(Новый Структура("ДанныеНеЗаполнены", Ложь));
	ТаблицаМКД          = ТаблицаМКД.Скопировать(СтрокиПодходящихМКД);
	
	СтрокиПодходящихЖД = ТаблицаЖД.НайтиСтроки(Новый Структура("ДанныеНеЗаполнены", Ложь));
	ТаблицаЖД          = ТаблицаЖД.Скопировать(СтрокиПодходящихЖД);
	
	СтрокиПодходящихЖилыхПомещений = ТаблицаЖилыхПомещений.НайтиСтроки(Новый Структура("ДанныеНеЗаполнены", Ложь));
	ТаблицаЖилыхПомещений          = ТаблицаЖилыхПомещений.Скопировать(СтрокиПодходящихЖилыхПомещений);
	
	СтрокиПодходящихНежилыхПомещений = ТаблицаНежилыхПомещений.НайтиСтроки(Новый Структура("ДанныеНеЗаполнены", Ложь));
	ТаблицаНежилыхПомещений          = ТаблицаНежилыхПомещений.Скопировать(СтрокиПодходящихНежилыхПомещений);
	
	СтрокиПодходящихКомнатМКД = ТаблицаКомнатМКД.НайтиСтроки(Новый Структура("ДанныеНеЗаполнены", Ложь));
	ТаблицаКомнатМКД          = ТаблицаКомнатМКД.Скопировать(СтрокиПодходящихКомнатМКД);
	
	СтрокиПодходящихКомнатЖД = ТаблицаКомнатЖД.НайтиСтроки(Новый Структура("ДанныеНеЗаполнены", Ложь));
	ТаблицаКомнатЖД          = ТаблицаКомнатЖД.Скопировать(СтрокиПодходящихКомнатЖД);
	
	СтрокиНеподходящихМКД = ТаблицаМКД.НайтиСтроки(Новый Структура("ДанныеНеЗаполнены", Истина));
	
КонецПроцедуры // ОтсеятьЗданияСНезаполненнымиДаннымиДляРСО()

&НаСервереБезКонтекста
// Проверяет лицевые счета на заполненность обязательных к выгрузке данных.
//
// Параметры:
//  ТаблицаЛС - ТаблицаЗначений - таблица со сведениями о лицевых счетах
//
Процедура ОтсеятьЛицевыеСчетаСНезаполненнымиДанными(ТаблицаЛС, ТаблицаСНезаполненнымиДанными, ЭтоПроверкаСведений, ВидОбмена = "Сведения о лицевых счетах")
	
	ТаблицаЛС.Колонки.Добавить("ДанныеНеЗаполнены", Новый ОписаниеТипов("Булево"));
	
	Для Каждого СтрокаЛС Из ТаблицаЛС Цикл
		
		Если СтрокаЛС.ПометкаУдаления Тогда
			СтрокаЛС.ДанныеНеЗаполнены = Истина;
			ВывестиСообщениеОПроблемахВОбмене("Лицевой счет " + СтрокаЛС.НаименованиеЛицевогоСчета + " помечен на удаление.", СтрокаЛС.ЛицевойСчет, , ЭтоПроверкаСведений);
			ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидОбмена, "Лицевой счет " + СтрокаЛС.НаименованиеЛицевогоСчета, СтрокаЛС.ЛицевойСчет,
														 "Лицевой счет помечен на удаление", "Ошибки");
		КонецЕсли;
		
		Если НЕ СтрокаЛС.Действует Тогда
			СтрокаЛС.ДанныеНеЗаполнены = Истина;
			ВывестиСообщениеОПроблемахВОбмене("Лицевой счет " + СтрокаЛС.НаименованиеЛицевогоСчета + " закрыт на дату выгрузки.", СтрокаЛС.ЛицевойСчет, , ЭтоПроверкаСведений);
			ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидОбмена, "Лицевой счет " + СтрокаЛС.НаименованиеЛицевогоСчета, СтрокаЛС.ЛицевойСчет,
														 "Лицевой счет закрыт на дату выгрузки", "Ошибки");
		КонецЕсли;
		
		Если СтрокаЛС.ОтветственныйВладелец = Справочники.Контрагенты.ПустаяСсылка() ИЛИ СтрокаЛС.ОтветственныйВладелец = Справочники.УПЖКХ_Жильцы.ПустаяСсылка() Тогда
			СтрокаЛС.ДанныеНеЗаполнены = Истина;
			ВывестиСообщениеОПроблемахВОбмене("У лицевого счета " + СтрокаЛС.НаименованиеЛицевогоСчета + " нет ответственного владельца.", СтрокаЛС.ЛицевойСчет, , ЭтоПроверкаСведений);
			ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидОбмена, "Лицевой счет " + СтрокаЛС.НаименованиеЛицевогоСчета, СтрокаЛС.ЛицевойСчет,
														 "У лицевого счета нет ответственного владельца", "Ошибки");
		КонецЕсли;
		
		Если Не СтрокаЛС.ЯвляетсяЖильцом И Не СтрокаЛС.ЯвляетсяКонтрагентомФизЛицом Тогда
			Если ПустаяСтрока(СтрокаЛС.ОГРН) Тогда
				СтрокаЛС.ДанныеНеЗаполнены = Истина;
				ВывестиСообщениеОПроблемахВОбмене("У контрагента " + СтрокаЛС.НаименованиеОтветственногоВладельца + " не указан ОГРН.", СтрокаЛС.ОтветственныйВладелец, , ЭтоПроверкаСведений);
				ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидОбмена, "Контрагент " + СтрокаЛС.НаименованиеОтветственногоВладельца, СтрокаЛС.ОтветственныйВладелец,
															 "ОГРН");
			КонецЕсли;
			
			Если СтрокаЛС.ЯвляетсяОбособленнымПодразделением Тогда
				Если ПустаяСтрока(СтрокаЛС.КПП) Тогда
					СтрокаЛС.ДанныеНеЗаполнены = Истина;
					ВывестиСообщениеОПроблемахВОбмене("У обособленного подразделения " + СтрокаЛС.НаименованиеОтветственногоВладельца + " не указан КПП.", СтрокаЛС.ОтветственныйВладелец, , ЭтоПроверкаСведений);
					ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидОбмена, "Обособленное подразделение " + СтрокаЛС.НаименованиеОтветственногоВладельца, СтрокаЛС.ОтветственныйВладелец,
																 "КПП");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаЛС.ОбщаяПлощадь = 0 Тогда
			СтрокаЛС.ДанныеНеЗаполнены = Истина;
			ВывестиСообщениеОПроблемахВОбмене("У лицевого счета " + СтрокаЛС.НаименованиеЛицевогоСчета + " не указан размер общей площади.", СтрокаЛС.ЛицевойСчет, , ЭтоПроверкаСведений);
			ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидОбмена, "Лицевой счет " + СтрокаЛС.НаименованиеЛицевогоСчета, СтрокаЛС.ЛицевойСчет,
														 "Размер общей площади помещения");
			
		КонецЕсли;
		
		Если ПустаяСтрока(СтрокаЛС.ИдентификаторПомещенияВГИСЖКХ) И (ПустаяСтрока(СтрокаЛС.КодДомаПоФИАС) ИЛИ СтрокаЛС.КодПомещения = 0) Тогда
			СтрокаЛС.ДанныеНеЗаполнены = Истина;
			ВывестиСообщениеОПроблемахВОбмене("Не заполнены идентификационные данные помещения, соответствующего лицевому счету " + СтрокаЛС.НаименованиеЛицевогоСчета
											  + ". Должен быть указан либо идентификатор помещения в ГИС ЖКХ, либо код дома по ФИАС и номер помещения.", СтрокаЛС.Помещение, , ЭтоПроверкаСведений);
			ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидОбмена, "Помещение лицевого счета " + СтрокаЛС.НаименованиеЛицевогоСчета, СтрокаЛС.Помещение,
														 "Идентификатор помещения в ГИС ЖКХ или код дома по ФИАС и номер помещения");
		КонецЕсли;
		
		Если СтрокаЛС.ДоляВнесенияПлаты = 0 Тогда
			СтрокаЛС.ДанныеНеЗаполнены = Истина;
			ВывестиСообщениеОПроблемахВОбмене("У лицевого счета " + СтрокаЛС.НаименованиеЛицевогоСчета + " не указана доля лицевого счета.", СтрокаЛС.ЛицевойСчет, , ЭтоПроверкаСведений);
			ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидОбмена, "Лицевой счет " + СтрокаЛС.НаименованиеЛицевогоСчета, СтрокаЛС.ЛицевойСчет,
														 "Доля лицевого счета");
		КонецЕсли;
	КонецЦикла;
	
	СтрокиЛС  = ТаблицаЛС.НайтиСтроки(Новый Структура("ДанныеНеЗаполнены", Ложь));
	ТаблицаЛС = ТаблицаЛС.Скопировать(СтрокиЛС);
	
КонецПроцедуры // ОтсеятьЛицевыеСчетаСНезаполненнымиДанными()

&НаСервереБезКонтекста
// Проверяет здания на заполненность кодов ФИАС.
//
// Параметры:
//  ТаблицаДанных - ТаблицаЗначений - таблица со сведениями о зданиях
//  ВсеДанныеЗаполнены - Булево - признак заполненности всех данных
// 
Процедура ОтсеятьЗданияСНезаполненнымКодомФИАС(ТаблицаДанных, ВсеДанныеЗаполнены, ТаблицаСНезаполненнымиДанными, ЭтоПроверкаСведений, ВидОбмена = "Сведения о договорах управления")
	
	ТаблицаДанных.Колонки.Добавить("ДанныеНеЗаполнены", Новый ОписаниеТипов("Булево"));
	
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		Если ПустаяСтрока(СтрокаДанных.КодЗданияПоФИАС) Тогда
			СтрокаДанных.ДанныеНеЗаполнены = Истина;
			ВсеДанныеЗаполнены             = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	СтрокиСНезаполненнымиДанными = ТаблицаДанных.НайтиСтроки(Новый Структура("ДанныеНеЗаполнены", Истина));
	ТаблицаНезаполненныхДанных   = ТаблицаДанных.Скопировать(СтрокиСНезаполненнымиДанными);
	ТаблицаНезаполненныхДанных.Свернуть("Здание, АдресЗдания");
	
	Для Каждого СтрокаЗдания Из ТаблицаНезаполненныхДанных Цикл
		ТекстОшибки = "Для здания " + СтрокаЗдания.АдресЗдания + " не заполнен код здания по ФИАС.";
		
		// Для вывода отчета о незаполненных данных.
		ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидОбмена, "Здание " + ТаблицаНезаполненныхДанных.АдресЗдания, ТаблицаНезаполненныхДанных.Здание, "Код здания по ФИАС");
		
		ВывестиСообщениеОПроблемахВОбмене(ТекстОшибки, СтрокаЗдания.Здание, "КодДомаПоФИАС", ЭтоПроверкаСведений);
	КонецЦикла;
	
	СтрокиСЗаполненнымиДанными = ТаблицаДанных.НайтиСтроки(Новый Структура("ДанныеНеЗаполнены", Ложь));
	ТаблицаДанных = ТаблицаДанных.Скопировать(СтрокиСЗаполненнымиДанными);
	
КонецПроцедуры // ОтсеятьЗданияСНезаполненнымКодомФИАС()

&НаСервереБезКонтекста
// Проверяет выбранные виды услуг на заполненность кода услуги в ГИС ЖКХ.
//
// Параметры:
//  ТаблицаДанных - ТаблицаЗначений - таблица со сведениями о зданиях
//  ТабКодовУслуг - ТаблицаЗначений - таблица с кодами услуг в ГИС ЖКХ
//  ВсеДанныеЗаполнены - Булево - признак заполненности всех данных
// 
Процедура ОтсеятьЗданияСНезаполненнымКодомВыбраннойУслуги(ТаблицаДанных, ТабКодовУслуг, ВсеДанныеЗаполнены, ТаблицаСНезаполненнымиДанными, ЭтоПроверкаСведений, ВидОбмена = "Сведения о договорах управления")
	
	Для Каждого СтрокаДанных Из ТаблицаДанных Цикл
		
		// Проверим выбранные доп.услуги на наличие кода услуги в ГИС ЖКХ
		Для Каждого СтрокаДопУслуги Из СтрокаДанных.ДополнительныеУслуги Цикл
			НайденнаяСтрока = ТабКодовУслуг.Найти(СтрокаДопУслуги.ВидУслуги, "ВидУслуги");
			Если НайденнаяСтрока = Неопределено ИЛИ НЕ ЗначениеЗаполнено(НайденнаяСтрока.КодУслуги) Тогда
				
				СтрокаДанных.ДанныеНеЗаполнены = Истина;
				ВсеДанныеЗаполнены             = Ложь;
				
				ВидУслугиСтрока = "" + СтрокаДопУслуги.ВидУслуги;
				
				ТекстОшибки = "Для вида услуги " + ВидУслугиСтрока + " не заполнен код услуги в ГИС ЖКХ.";
				
				ВывестиСообщениеОПроблемахВОбмене(ТекстОшибки, СтрокаДопУслуги.ВидУслуги, "КодУслугиВГИСЖКХ", ЭтоПроверкаСведений);
				
				ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидОбмена, "Вид услуги " + ВидУслугиСтрока, СтрокаДопУслуги.ВидУслуги, "Код услуги в ГИС ЖКХ");
			КонецЕсли;
		КонецЦикла;
		
		// Проверим выбранные коммунальные услуги на наличие кода услуги в ГИС ЖКХ
		Для Каждого СтрокаКоммУслуги Из СтрокаДанных.КоммунальныеУслуги Цикл
			Если СтрокаКоммУслуги.Предоставляет Тогда
				НайденнаяСтрока = ТабКодовУслуг.Найти(СтрокаКоммУслуги.ВидУслуги, "ВидУслуги");
				Если НайденнаяСтрока = Неопределено ИЛИ НЕ ЗначениеЗаполнено(НайденнаяСтрока.КодУслуги) Тогда
					
					СтрокаДанных.ДанныеНеЗаполнены = Истина;
					ВсеДанныеЗаполнены             = Ложь;
					
					ВидУслугиСтрока = "" + СтрокаКоммУслуги.ВидУслуги;
					
					ТекстОшибки = "Для вида услуги " + ВидУслугиСтрока + " не заполнен код услуги в ГИС ЖКХ.";
					
					ВывестиСообщениеОПроблемахВОбмене(ТекстОшибки, СтрокаКоммУслуги.ВидУслуги, "КодУслугиВГИСЖКХ", ЭтоПроверкаСведений);
					
					ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидОбмена, "Вид услуги " + ВидУслугиСтрока, СтрокаКоммУслуги.ВидУслуги, "Код услуги в ГИС ЖКХ");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	СтрокиСЗаполненнымиДанными = ТаблицаДанных.НайтиСтроки(Новый Структура("ДанныеНеЗаполнены", Ложь));
	ТаблицаДанных = ТаблицаДанных.Скопировать(СтрокиСЗаполненнымиДанными);
	
КонецПроцедуры // ОтсеятьЗданияСНезаполненнымКодомВыбраннойУслуги()

&НаСервереБезКонтекста
// Формирует структуру с обязательными к выгрузке данными.
//
// Параметры:
//  ТипДанных - Строка - тип объекта, для которого необходимо сформировать перечень обязательных данных.
//
// Возвращаемое значение:
//  Структура - структура с обязательными данными.
//
Функция ПолучитьСтруктуруОбязательныхПолей(ТипДанных)
	
	Структура = Новый Структура;
	// Ключ - название колонки в таблице с данными
	// Значение - название, которое будет выведено пользователю в случае, если значение не заполнено.
	
	Если ТипДанных = "МКД" Тогда
		Структура.Вставить("Адрес", "Адрес здания");
		Структура.Вставить("КодДомаПоФИАС", "Код дома по ФИАС");
		Структура.Вставить("ОКТМО", "ОКТМО");
		Структура.Вставить("ЧасоваяЗонаПоOslon", "Часовая зона по Oslon");
		Структура.Вставить("Состояние", "Состояние здания");
		Структура.Вставить("СтадияЖизненногоЦикла", "Стадия жизненного цикла");
		Структура.Вставить("ОбщаяПлощадьЗдания", "Общая площадь здания");
		Структура.Вставить("ГодВводаВЭксплуатацию", "Год ввода в эксплуатацию");
		Структура.Вставить("КоличествоЭтажей", "Количество этажей");
		
	ИначеЕсли ТипДанных = "ЖД" Тогда
		Структура.Вставить("Адрес", "Адрес здания");
		Структура.Вставить("КодДомаПоФИАС", "Код дома по ФИАС");
		Структура.Вставить("ОКТМО", "ОКТМО");
		Структура.Вставить("ЧасоваяЗонаПоOslon", "Часовая зона по Oslon");
		Структура.Вставить("Состояние", "Состояние здания");
		Структура.Вставить("ОбщаяПлощадьЗдания", "Общая площадь здания");
		Структура.Вставить("ГодВводаВЭксплуатацию", "Год ввода в эксплуатацию");
		Структура.Вставить("КоличествоЭтажей", "Количество этажей");
		
	ИначеЕсли ТипДанных = "Подъезды" Тогда
		Структура.Вставить("НомерПодъезда", "Номер подъезда");
		
	ИначеЕсли ТипДанных = "Нежилые помещения" Тогда
		Структура.Вставить("НомерПомещения", "Номер помещения");
		Структура.Вставить("ОбщаяПлощадь", "Общая площадь помещения");
		
	ИначеЕсли ТипДанных = "Жилые помещения" Тогда
		Структура.Вставить("НомерПомещения", "Номер помещения");
		Структура.Вставить("НомерПодъезда", "Номер подъезда");
		Структура.Вставить("Характеристика", "Характеристика помещения");
		Структура.Вставить("ОбщаяПлощадь", "Общая площадь помещения");
		
	ИначеЕсли ТипДанных = "Комнаты МКД" Тогда
		Структура.Вставить("НомерПомещения", "Номер комнаты");
		Структура.Вставить("НомерРодителя", "Номер помещения");
		Структура.Вставить("ОбщаяПлощадь", "Общая площадь комнаты");
		
	ИначеЕсли ТипДанных = "ЗаявкиНаДВА" Тогда
		
		Структура.Вставить("GUID", "GUID родительского объекта");
		Структура.Вставить("ОКТМО", "ОКТМО");
		Структура.Вставить("ПризнакСтроения", "Признак строения");
		
	Иначе
		Структура.Вставить("НомерПомещения", "Номер комнаты");
		Структура.Вставить("ОбщаяПлощадь", "Общая площадь комнаты");
	
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции // ПолучитьСтруктуруОбязательныхПолей()

&НаСервереБезКонтекста
// Формирует структуру с обязательными к выгрузке данными.
//
// Параметры:
//  ТипДанных - Строка - тип объекта, для которого необходимо сформировать перечень обязательных данных.
//
// Возвращаемое значение:
//  Структура - структура с обязательными данными.
//
Функция ПолучитьСтруктуруОбязательныхПолейДляВыгрузкиЗданийРСО(ТипДанных, ДляРСО = Ложь)
	
	Структура = Новый Структура;
	// Ключ - название колонки в таблице с данными
	// Значение - название, которое будет выведено пользователю в случае, если значение не заполнено.
	
	Если ТипДанных = "МКД" Тогда
		Структура.Вставить("Адрес", "Адрес здания");
		Структура.Вставить("КодДомаПоФИАС", "Код здания по ФИАС");
		Структура.Вставить("ОКТМО", "ОКТМО");
		Структура.Вставить("ЧасоваяЗонаПоOslon", "Часовая зона по Oslon");
		
	ИначеЕсли ТипДанных = "ЖД" Тогда
		Структура.Вставить("Адрес", "Адрес здания");
		Структура.Вставить("КодДомаПоФИАС", "Код здания по ФИАС");
		Структура.Вставить("ОКТМО", "ОКТМО");
		Структура.Вставить("ЧасоваяЗонаПоOslon", "Часовая зона по Oslon");
		
	ИначеЕсли ТипДанных = "Нежилые помещения" Тогда
		Структура.Вставить("НомерПомещения", "Номер помещения");
		
	ИначеЕсли ТипДанных = "Жилые помещения" Тогда
		Структура.Вставить("НомерПомещения", "Номер помещения");
		
	ИначеЕсли ТипДанных = "Комнаты МКД" Тогда
		Структура.Вставить("НомерПомещения", "Номер комнаты");
		Структура.Вставить("НомерРодителя", "Номер помещения");
		
	ИначеЕсли ТипДанных = "Комнаты ЖД" Тогда
		Структура.Вставить("НомерПомещения", "Номер комнаты");
		
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции // ПолучитьСтруктуруОбязательныхПолейДляВыгрузкиЗданийРСО()

&НаСервереБезКонтекста
// Проверяет, заполнены ли обязательные к выгрузке данных. Если данные не заполнены, помечает соответствующий объект 
// как непригодный к выгрузке и выводит предупреждение.
//
// Параметры:
//  Таблица - ТаблицаЗначений - таблица со сведениями для выгрузки
//  СтруктураОбязательныхПолей - Структура - структура с обязательными к выгрузке данными
//  ТипОбъекта - Строка - тип объекта, для которого необходимо выполнить проверку
//  ВсеДанныеЗаполнены - Булево - признак того, что полностью заполнены все необходимые к выгрузке данные.
//
Процедура ПроверитьЗаполнениеОбязательныхДанных(Таблица, СтруктураОбязательныхПолей, ТипОбъекта, ВсеДанныеЗаполнены, ТаблицаСНезаполненнымиДанными, ВидОбмена, ЭтоПроверкаСведений)
	
	Для Каждого Строка Из Таблица Цикл
		ДанныеЗаполнены         = Истина;
		ТекстОшибки             = "";
		МассивНезаполнныхДанных = Новый Массив;
		Для Каждого ОбязательноеПоле Из СтруктураОбязательныхПолей Цикл
			Если Не ЗначениеЗаполнено(Строка[ОбязательноеПоле.Ключ]) Тогда
				МассивНезаполнныхДанных.Добавить(ОбязательноеПоле.Значение);
				ДанныеЗаполнены = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ДанныеЗаполнены Тогда
			Если ТипОбъекта = "здания" Тогда
				ОбъектСтрока = "Здание " + Строка.Адрес;
				ТекстОшибки = "Для здания " + ОбъектСтрока + " заполнены не все обязательные данные. А именно:";
			ИначеЕсли ТипОбъекта = "подъезда" Тогда
				ОбъектСтрока = "Подъезд " + Строка.НомерПодъезда + " (здание " + Строка.АдресЗдания + ")";
				ТекстОшибки = "Для подъезда " + ОбъектСтрока + " заполнены не все обязательные данные. А именно:";
			ИначеЕсли ТипОбъекта = "помещения" Тогда
				ОбъектСтрока = "Помещение " + Строка.НомерПомещения + " (здание " + Строка.АдресЗдания + ")";
				ТекстОшибки = "Для помещения " + ОбъектСтрока + " заполнены не все обязательные данные. А именно:";
			ИначеЕсли ТипОбъекта = "комнаты" Тогда
				ОбъектСтрока = "Комната " + Строка.НомерПомещения + " из помещения " + Строка.НомерРодителя + " (здание " + Строка.АдресЗдания + ")";
				ТекстОшибки = "Для комнаты " + ОбъектСтрока + " заполнены не все обязательные данные. А именно:";
			КонецЕсли;
			
			Для Каждого Данные Из МассивНезаполнныхДанных Цикл
				ТекстОшибки = ТекстОшибки + Символы.ПС + Данные;
				
				// Для вывода отчета о незаполненных данных.
				Если Не ОбъектСтрока = Неопределено Тогда
					ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидОбмена, ОбъектСтрока, Строка.Ссылка, "" + Данные);
				КонецЕсли;
			КонецЦикла;
			
			Строка.ДанныеНеЗаполнены = Истина;
			ВсеДанныеЗаполнены       = Ложь;
			
			ВывестиСообщениеОПроблемахВОбмене(ТекстОшибки, Строка.Ссылка, , ЭтоПроверкаСведений);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеОбязательныхДанных()

&НаСервереБезКонтекста
// Сохраняет файл для его передачи с сервера на клиент.
Процедура ДобавитьСтрокуВТаблицуСФайлами(СформированныеФайлы, ПутьКФайлу, ИмяФайла)
	
	НоваяСтрока = СформированныеФайлы.Добавить();
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);
	
	НоваяСтрока.ПоложениеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
	НоваяСтрока.НазваниеФайла  = ПутьКФайлу;
	
КонецПроцедуры // ДобавитьСтрокуВТаблицуСФайлами()

&НаКлиентеНаСервереБезКонтекста
// Формирует представление кадастрового номера для выгрузки: либо сам номер, либо слово "нет".
Функция ПолучитьПредставлениеКадастровогоНомера(КадастровыйНомер)
	
	Если ПустаяСтрока(КадастровыйНомер) Тогда
		Возврат "нет";
	Иначе
		Возврат КадастровыйНомер;
	КонецЕсли;
	
КонецФункции // ПолучитьПредставлениеКадастровогоНомера()

&НаСервереБезКонтекста
// Разбивает сведения для выгрузки на партии в соответствии с ограничениями ГИС ЖКХ (в одном файле не более 5 000 помещений).
// 
// Параметры:
//  ТаблицаМКД - ТаблицаЗначений - таблица со сведениями о МКД
//  ТаблицаЖД - ТаблицаЗначений - таблица со сведениями о жилых домах
//  ТаблицаЖилыхПомещений - ТаблицаЗначений - таблица со сведениями о жилых помещениях МКД
//  ТаблицаНежилыхПомещений - ТаблицаЗначений - таблица со сведениями о нежилых помещениях МКД
//  ТаблицаКомнатМКД - ТаблицаЗначений - таблица со сведениями о комнатах МКД
//  ТаблицаКомнатЖД - ТаблицаЗначений - таблица со сведениями о комнатах жилых домов (в качестве комнат выгружаются помещения).
//  
Процедура ПересчитатьКоличествоПомещенийДляКаждогоЗдания(ТаблицаМКД, ТаблицаЖД, ТаблицаЖилыхПомещений, ТаблицаНежилыхПомещений, ТаблицаКомнатМКД, 
														 ТаблицаКомнатЖД, КоличествоПартийЖД, КоличествоПартийМКД)
	
	ТаблицаМКД.Колонки.Добавить("КоличествоПомещений", Новый ОписаниеТипов("Число"));
	ТаблицаМКД.Колонки.Добавить("Партия", Новый ОписаниеТипов("Число"));
	ТаблицаЖД.Колонки.Добавить("КоличествоПомещений", Новый ОписаниеТипов("Число"));
	ТаблицаЖД.Колонки.Добавить("Партия", Новый ОписаниеТипов("Число"));
	
	// В руководстве к ГИС ЖКХ указано, что ограничение на 1 файл - 10 МКД, что соответствует 5 000 квартир.
	// Устанавливаем ограчение в 4 500 квартир "на всякий случай".
	МаксимальноеКоличествоПомещений = 4500;
	
	// Партия - порядковый номер файла, в который будут выгружены данные по текущему зданию.
	Партия = 1;
	ОбщееКоличествоПомещений = 0;
	Для Каждого СтрокаМКД Из ТаблицаМКД Цикл
		ТекущийМКД = СтрокаМКД.Здание;
		
		СтрокиЖилыхПомещений     = ТаблицаЖилыхПомещений.НайтиСтроки(Новый Структура("Здание", ТекущийМКД));
		КоличествоЖилыхПомещений = СтрокиЖилыхПомещений.Количество();
		
		СтрокиНежилыхПомещений     = ТаблицаНежилыхПомещений.НайтиСтроки(Новый Структура("Здание", ТекущийМКД));
		КоличествоНежилыхПомещений = СтрокиНежилыхПомещений.Количество();
		
		СтрокиКомнатМКД     = ТаблицаКомнатМКД.НайтиСтроки(Новый Структура("Здание", ТекущийМКД));
		КоличествоКомнатМКД = СтрокиКомнатМКД.Количество();
		
		СтрокаМКД.КоличествоПомещений = КоличествоЖилыхПомещений + КоличествоНежилыхПомещений + КоличествоКомнатМКД;
		
		ОбщееКоличествоПомещений = ОбщееКоличествоПомещений + СтрокаМКД.КоличествоПомещений;
		Если ОбщееКоличествоПомещений > МаксимальноеКоличествоПомещений Тогда
			Партия = Партия + 1;
			ОбщееКоличествоПомещений = 0;
		КонецЕсли;
		
		СтрокаМКД.Партия = Партия;
	КонецЦикла;
	
	КоличествоПартийМКД = Партия;
	
	Партия = 1;
	ОбщееКоличествоПомещений = 0;
	Для Каждого СтрокаЖД Из ТаблицаЖД Цикл
		ТекущийЖД = СтрокаЖД.Здание;
		
		СтрокиКомнатЖД     = ТаблицаКомнатЖД.НайтиСтроки(Новый Структура("Здание", ТекущийЖД));
		КоличествоКомнатЖД = СтрокиКомнатЖД.Количество();
		
		СтрокаЖД.КоличествоПомещений = КоличествоКомнатЖД;
		
		ОбщееКоличествоПомещений = ОбщееКоличествоПомещений + СтрокаЖД.КоличествоПомещений;
		Если ОбщееКоличествоПомещений > МаксимальноеКоличествоПомещений Тогда
			Партия = Партия + 1;
			ОбщееКоличествоПомещений = 0;
		КонецЕсли;
		
		СтрокаЖД.Партия = Партия;
	КонецЦикла;
	
	КоличествоПартийЖД = Партия;
	
КонецПроцедуры // ПересчитатьКоличествоПомещенийДляКаждогоЗдания()

&НаКлиентеНаСервереБезКонтекста
// Формирует строковое представление типа Булево.
//
// Параметры:
//  БулевоЗначение - Булево - текущее значение.
//  НижнийРегистр - Булево - отвечает за регистр первой буквы в представлении
//
// Возвращаемое значение:
//  Строка - строковое представление.
//
Функция ПолучитьПредставлениеБулеваТипа(БулевоЗначение, НижнийРегистр = Ложь)
	
	Если БулевоЗначение Тогда
		Возврат ?(НижнийРегистр, "да", "Да");
	Иначе
		Возврат ?(НижнийРегистр, "нет", "Нет");
	КонецЕсли;
	
КонецФункции // ПолучитьПредставлениеБулеваТипа()

&НаКлиентеНаСервереБезКонтекста
// Формирует строки с коммунальными услугами, которые предоставляет УО по договору управления.
Функция ПолучитьТаблицуУслугДУ(УслугиДУ, ДоговорУправления)
	
	Строки = УслугиДУ.НайтиСтроки(Новый Структура("ДоговорУправления", ДоговорУправления));
	
	Возврат Строки;
	
КонецФункции // ПолучитьТаблицуУслугДУ()

&НаКлиентеНаСервереБезКонтекста
// Определяет код для ГИС ЖКХ текущего вида услуг.
//
// Параметры:
//  ВидУслуги - СправочникСсылка.КВП_ВидыУслуг - текущий вид услуги
//  ТаблицаКодовУслуг - ТаблицаЗначений - таблица с кодами видов услуг для ГИС ЖКХ.
//
// Возвращаемое значение:
//  Число - код вида услуг
//
Функция НайтиКодУслуги(ВидУслуги, ТаблицаКодовУслуг)
	
	СтрокиУслуги = ТаблицаКодовУслуг.НайтиСтроки(Новый Структура("ВидУслуги", ВидУслуги));
	
	Если СтрокиУслуги.Количество() = 0 Тогда
		Возврат "";
	Иначе
		Возврат СокрЛП(СтрокиУслуги.Получить(0).КодУслуги);
	КонецЕсли;
	
КонецФункции // НайтиКодУслуги()

&НаКлиентеНаСервереБезКонтекста
// Возвращает пустую строку в случае, если входящее число равно 0.
// Необходимо для корректного заполнения "необязательных" полей файла.
//
Функция ЗаменитьНаПустуюСтроку(Число)
	
	Если Число = 0 Тогда
		Возврат "";
	Иначе
		Возврат Число;
	КонецЕсли;
	
КонецФункции // ЗаменитьНаПустуюСтроку()

&НаСервереБезКонтекста
// Проверяет договоры с РСО на заполненность обязательных данных.
//
// Параметры:
//  ТаблицаДанных - ТаблицаЗначений - таблица со сведениями о зданиях
//  ВсеДанныеЗаполнены - Булево - признак заполненности всех данных
// 
Процедура ОтсеятьОбъектыСНезаполненнымиДаннымиПоУО(ДанныеРСОДоговоры, ДанныеРСОПериоды, ВсеДанныеЗаполнены, ТаблицаСНезаполненнымиДанными, ЭтоПроверкаСведений, ВидВыгрузки = "Сведения о состоянии расчетов с РСО")
	
	Для Каждого СтрокаДоговора Из ДанныеРСОДоговоры Цикл
		Если ПустаяСтрока(СтрокаДоговора.ОГРН) Тогда
			СтрокаДоговора.ДанныеНеЗаполнены = Истина;
			ВсеДанныеЗаполнены               = Ложь;
			
			ВывестиСообщениеОПроблемахВОбмене("Для поставщика " + СтрокаДоговора.НаименованиеПоставщика + " не указан ОГРН.", СтрокаДоговора.Поставщик, , ЭтоПроверкаСведений);
			ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Поставщик " + СтрокаДоговора.НаименованиеПоставщика, СтрокаДоговора.Поставщик, "ОГРН");
		КонецЕсли;
		
		Если ПустаяСтрока(СтрокаДоговора.ИНН) Тогда
			СтрокаДоговора.ДанныеНеЗаполнены = Истина;
			ВсеДанныеЗаполнены               = Ложь;
			
			ВывестиСообщениеОПроблемахВОбмене("Для поставщика " + СтрокаДоговора.НаименованиеПоставщика + " не указан ИНН.", СтрокаДоговора.Поставщик, , ЭтоПроверкаСведений);
			ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Поставщик " + СтрокаДоговора.НаименованиеПоставщика, СтрокаДоговора.Поставщик, "ИНН");
		КонецЕсли;
		
		Если ПустаяСтрока(СтрокаДоговора.КПП) Тогда
			СтрокаДоговора.ДанныеНеЗаполнены = Истина;
			ВсеДанныеЗаполнены               = Ложь;
			
			ВывестиСообщениеОПроблемахВОбмене("Для поставщика " + СтрокаДоговора.НаименованиеПоставщика + " не указан КПП.", СтрокаДоговора.Поставщик, , ЭтоПроверкаСведений);
			ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Поставщик " + СтрокаДоговора.НаименованиеПоставщика, СтрокаДоговора.Поставщик, "КПП");
		КонецЕсли;
	КонецЦикла;
	
	СтрокиСЗаполненнымиДанными   = ДанныеРСОДоговоры.НайтиСтроки(Новый Структура("ДанныеНеЗаполнены", Ложь));
	СтрокиСНезаполненнымиДанными = ДанныеРСОДоговоры.НайтиСтроки(Новый Структура("ДанныеНеЗаполнены", Истина));
	
	ДанныеРСОДоговоры = ДанныеРСОДоговоры.Скопировать(СтрокиСЗаполненнымиДанными);
	
	Для Каждого НезаполненнаяСтрока Из СтрокиСНезаполненнымиДанными Цикл
		СтрокиПериодов = ДанныеРСОПериоды.НайтиСтроки(Новый Структура("Код", НезаполненнаяСтрока.Код));
		
		Для Каждого СтрокаПериода Из СтрокиПериодов Цикл
			СтрокаПериода.ДанныеНеЗаполнены = Истина;
		КонецЦикла;
	КонецЦикла;
	
	СтрокиПериодовСЗаполненнымиДанными = ДанныеРСОПериоды.НайтиСтроки(Новый Структура("ДанныеНеЗаполнены", Ложь));
	ДанныеРСОПериоды = ДанныеРСОПериоды.Скопировать(СтрокиПериодовСЗаполненнымиДанными);
	
КонецПроцедуры // ОтсеятьОбъектыСНезаполненнымиДаннымиПоУО()

&НаСервереБезКонтекста
// Проверяет договоры ДПОИ на заполненность обязательных данных.
//
// Параметры:
//  ТаблицаДанных - ТаблицаЗначений - таблица со сведениями о договорах ДПОИ
//  ВсеДанныеЗаполнены - Булево - признак заполненности всех данных
// 
Процедура ОтсеятьОбъектыСНезаполненнымиДаннымиДоговорамДПОИ(ТаблицаДПОИ, ВсеДанныеЗаполнены, ТаблицаСНезаполненнымиДанными, ЭтоПроверкаСведений, ВидВыгрузки = "Сведения о договорах ДПОИ")
	
	Для Каждого СтрокаДПОИ Из ТаблицаДПОИ Цикл
		
		// Проверка заполнения основных реквизитов справочника.
		Если ПустаяСтрока(СтрокаДПОИ.НомерДоговора) Тогда
			СтрокаДПОИ.ДанныеНеЗаполнены = Истина;
			ВсеДанныеЗаполнены          = Ложь;
			
			ВывестиСообщениеОПроблемахВОбмене("Для договора " + СтрокаДПОИ.НаименованиеДоговора + " не указан его номер.", СтрокаДПОИ.ДоговорСсылка, , ЭтоПроверкаСведений);
			ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, СтрокаДПОИ.НаименованиеДоговора, СтрокаДПОИ.ДоговорСсылка, "Номер договора");
		КонецЕсли;
		
		Если СтрокаДПОИ.ДатаДоговора = Дата("00010101") Тогда
			СтрокаДПОИ.ДанныеНеЗаполнены = Истина;
			ВсеДанныеЗаполнены          = Ложь;
			
			ВывестиСообщениеОПроблемахВОбмене("Для договора " + СтрокаДПОИ.НаименованиеДоговора + " не указана дата его заключения.", СтрокаДПОИ.ДоговорСсылка, , ЭтоПроверкаСведений);
			ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, СтрокаДПОИ.НаименованиеДоговора, СтрокаДПОИ.ДоговорСсылка, "Дата заключения договора");
		КонецЕсли;
		
		// Проверка заполнения срока действия договора.
		Если СтрокаДПОИ.ДатаНачалаДействия = Дата("00010101") Тогда
			СтрокаДПОИ.ДанныеНеЗаполнены = Истина;
			ВсеДанныеЗаполнены          = Ложь;
			
			ВывестиСообщениеОПроблемахВОбмене("Для договора " + СтрокаДПОИ.НаименованиеДоговора + " не указана дата начала его действия.", СтрокаДПОИ.ДоговорСсылка, , ЭтоПроверкаСведений);
			ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, СтрокаДПОИ.НаименованиеДоговора, СтрокаДПОИ.ДоговорСсылка, "Дата начала действия договора");
		КонецЕсли;
		
		Если СтрокаДПОИ.ПланируемаяДатаОкончанияДействия = Дата("00010101") Тогда
			СтрокаДПОИ.ДанныеНеЗаполнены = Истина;
			ВсеДанныеЗаполнены          = Ложь;
			
			ВывестиСообщениеОПроблемахВОбмене("Для договора " + СтрокаДПОИ.НаименованиеДоговора + " не указана планируемая дата окончания его действия.", СтрокаДПОИ.ДоговорСсылка, , ЭтоПроверкаСведений);
			ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, СтрокаДПОИ.НаименованиеДоговора, СтрокаДПОИ.ДоговорСсылка, "Планируемая дата окончания действия договора");
		КонецЕсли;
		
		// Проверка заполнения дыннх о здании.
		Если ПустаяСтрока(СтрокаДПОИ.КодДомаПоФИАС) Тогда
			СтрокаДПОИ.ДанныеНеЗаполнены = Истина;
			ВсеДанныеЗаполнены          = Ложь;
			
			ВывестиСообщениеОПроблемахВОбмене("Для здания " + СтрокаДПОИ.НаименованиеЗдания + " не указан его код по ФИАС.", СтрокаДПОИ.ЗданиеСсылка, , ЭтоПроверкаСведений);
			ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Здание " + СтрокаДПОИ.НаименованиеЗдания, СтрокаДПОИ.ЗданиеСсылка, "Код здания по ФИАС");
		КонецЕсли;
		
		// Проверка данных арендатора.
		Если СтрокаДПОИ.ТипАрендатора = Перечисления.ЮридическоеФизическоеЛицо.ПустаяСсылка() Тогда
			СтрокаДПОИ.ДанныеНеЗаполнены = Истина;
			ВсеДанныеЗаполнены          = Ложь;
			
			ВывестиСообщениеОПроблемахВОбмене("Для арендатора " + СтрокаДПОИ.НаименованиеАрендатора + " не указан его тип (физ. лицо, юр. лицо).", СтрокаДПОИ.АрендаторСсылка, , ЭтоПроверкаСведений);
			ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Арендатор " + СтрокаДПОИ.НаименованиеАрендатора, СтрокаДПОИ.АрендаторСсылка, "Тип арендатора (физ. лицо, юр. лицо)");
		КонецЕсли;
		
		Если СтрокаДПОИ.ТипАрендатора = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо И ПустаяСтрока(СтрокаДПОИ.НаименованиеАрендатора) Тогда
			СтрокаДПОИ.ДанныеНеЗаполнены = Истина;
			ВсеДанныеЗаполнены          = Ложь;
			
			ВывестиСообщениеОПроблемахВОбмене("Для арендатора " + СтрокаДПОИ.НаименованиеАрендатора + " не указана фамилия.", СтрокаДПОИ.АрендаторСсылка, , ЭтоПроверкаСведений);
			ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Арендатор " + СтрокаДПОИ.НаименованиеАрендатора, СтрокаДПОИ.АрендаторСсылка, "Фамилия");
		КонецЕсли;
		
		Если СтрокаДПОИ.ТипАрендатора = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			Если ПустаяСтрока(СтрокаДПОИ.ИНН) Тогда
				СтрокаДПОИ.ДанныеНеЗаполнены = Истина;
				ВсеДанныеЗаполнены          = Ложь;
				
				ВывестиСообщениеОПроблемахВОбмене("Для арендатора " + СтрокаДПОИ.НаименованиеАрендатора + " не указан ИНН.", СтрокаДПОИ.АрендаторСсылка, , ЭтоПроверкаСведений);
				ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Арендатор " + СтрокаДПОИ.НаименованиеАрендатора, СтрокаДПОИ.АрендаторСсылка, "ИНН");
			КонецЕсли;
		
			Если ПустаяСтрока(СтрокаДПОИ.КПП) Тогда
				СтрокаДПОИ.ДанныеНеЗаполнены = Истина;
				ВсеДанныеЗаполнены          = Ложь;
				
				ВывестиСообщениеОПроблемахВОбмене("Для арендатора " + СтрокаДПОИ.НаименованиеАрендатора + " не указан КПП.", СтрокаДПОИ.АрендаторСсылка, , ЭтоПроверкаСведений);
				ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Арендатор " + СтрокаДПОИ.НаименованиеАрендатора, СтрокаДПОИ.АрендаторСсылка, "КПП");
			КонецЕсли;
		
			Если ПустаяСтрока(СтрокаДПОИ.ОГРН) Тогда
				СтрокаДПОИ.ДанныеНеЗаполнены = Истина;
				ВсеДанныеЗаполнены          = Ложь;
				
				ВывестиСообщениеОПроблемахВОбмене("Для арендатора " + СтрокаДПОИ.НаименованиеАрендатора + " не указан ОГРН.", СтрокаДПОИ.АрендаторСсылка, , ЭтоПроверкаСведений);
				ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Арендатор " + СтрокаДПОИ.НаименованиеАрендатора, СтрокаДПОИ.АрендаторСсылка, "ОГРН");
			КонецЕсли;
		КонецЕсли;
		
		// Проверка заполнения условий договора.
		Если Не СтрокаДПОИ.ДоговорЗаключенНаБезвозмезднойОснове И СтрокаДПОИ.УстановленыКонкретныеСрокиОплаты Тогда
			// Проверка на указание периода оплаты для договров с конкретным указанием сроков.
			Если СтрокаДПОИ.ЧислоНачалаПериодаВнесенияПлаты = 0 Или СтрокаДПОИ.ЧислоОкончанияПериодаВнесенияПлаты = 0 Тогда
				СтрокаДПОИ.ДанныеНеЗаполнены = Истина;
				ВсеДанныеЗаполнены          = Ложь;
				
				ВывестиСообщениеОПроблемахВОбмене("Для договора " + СтрокаДПОИ.НаименованиеДоговора + " не указан период внесения платы.", СтрокаДПОИ.ДоговорСсылка, , ЭтоПроверкаСведений);
				ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, СтрокаДПОИ.НаименованиеДоговора, СтрокаДПОИ.ДоговорСсылка, "Период внесения платы");
			КонецЕсли;
			
		ИначеЕсли Не СтрокаДПОИ.ДоговорЗаключенНаБезвозмезднойОснове И Не СтрокаДПОИ.УстановленыКонкретныеСрокиОплаты Тогда 
			// Проверка на указание иных условий для договоров без без определенных сроков оплаты.
			Если ПустаяСтрока(СтрокаДПОИ.ИныеУсловияДоговора) Тогда
				СтрокаДПОИ.ДанныеНеЗаполнены = Истина;
				ВсеДанныеЗаполнены          = Ложь;
				
				ВывестиСообщениеОПроблемахВОбмене("Для договора " + СтрокаДПОИ.НаименованиеДоговора + " не указаны иные условия договора.", СтрокаДПОИ.ДоговорСсылка, , ЭтоПроверкаСведений);
				ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, СтрокаДПОИ.НаименованиеДоговора, СтрокаДПОИ.ДоговорСсылка, "Иные условия договора");
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокиСЗаполненнымиДанными = ТаблицаДПОИ.НайтиСтроки(Новый Структура("ДанныеНеЗаполнены", Ложь));
	ТаблицаДПОИ                 = ТаблицаДПОИ.Скопировать(СтрокиСЗаполненнымиДанными);
	
КонецПроцедуры // ОтсеятьОбъектыСНезаполненнымиДаннымиДоговорамДПОИ()

// Вызывает процедуру для из обработчика ожидания.
&НаКлиенте
Процедура ВыбратьВсеНевыгруженныеЛСНаСервереЛицевыеСчетаКлиент() Экспорт
	ВыбратьВсеНевыгруженныеЛСНаСервереЛицевыеСчета();
КонецПроцедуры

&НаСервере
// Помещает в таблицу "Лицевые счета" все лицевые счета, которые еще не были
// выгружены в ГИС ЖКХ.
Процедура ВыбратьВсеНевыгруженныеЛСНаСервереЛицевыеСчета()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_ЛицевыеСчетаВыгруженныеВГИСЖКХ.Объект КАК ЛицевойСчет
	|ПОМЕСТИТЬ втВыгруженныеЛС
	|ИЗ
	|	РегистрСведений.УПЖКХ_ЛицевыеСчетаВыгруженныеВГИСЖКХ КАК УПЖКХ_ЛицевыеСчетаВыгруженныеВГИСЖКХ
	|ГДЕ
	|	УПЖКХ_ЛицевыеСчетаВыгруженныеВГИСЖКХ.ТипЛС = &ТипЛС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ЛицевыеСчета.Ссылка КАК ЛицевойСчет
	|ПОМЕСТИТЬ втНеВыгруженныеЛС
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	НЕ КВП_ЛицевыеСчета.Ссылка В
	|				(ВЫБРАТЬ
	|					втВыгруженныеЛС.ЛицевойСчет
	|				ИЗ
	|					втВыгруженныеЛС КАК втВыгруженныеЛС)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет КАК ЛицевойСчет
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(
	|			&ПериодВыгрузки,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втНеВыгруженныеЛС.ЛицевойСчет
	|					ИЗ
	|						втНеВыгруженныеЛС КАК втНеВыгруженныеЛС)) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних";
	
	Если Объект.ВыгружатьЛицевыеСчетаКР Тогда
		ТипЛС = Перечисления.УПЖКХ_ТипЛицевогоСчета.ЛСКР;
	Иначе
		ТипЛС = Перечисления.УПЖКХ_ТипЛицевогоСчета.ЛСУО;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТипЛС",          ТипЛС);
	Запрос.УстановитьПараметр("Организация",    Объект.Организация);
	Запрос.УстановитьПараметр("ПериодВыгрузки", КонецМесяца(Объект.ПериодВыгрузки));
	
	ТаблицаЛС = Запрос.Выполнить().Выгрузить();
	
	Объект.ЛицевыеСчета.Загрузить(ТаблицаЛС);
	
КонецПроцедуры // ВыбратьВсеНевыгруженныеЛСНаСервереЛицевыеСчета()

&НаСервереБезКонтекста
// Формирует строковое представления вида документа, удостоверяющего личность.
//
// Параметры:
//  ВидДокумента - СправочникСсылка.ВидыДокументовФизическихЛиц
//
// Возвращаемое значение:
//  Строка
//
Функция ПолучитьВидДокументаФизЛица(ВидДокумента)
	
	Если ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ Тогда
		Возврат "Паспорт гражданина Российской Федерации";
	ИначеЕсли ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПаспортСССР Тогда
		Возврат "Паспорт гражданина СССР";
	ИначеЕсли ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ЗагранпаспортРФ Тогда
		Возврат "Общегражданский заграничный паспорт";
	ИначеЕсли ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПаспортМинморфлота Тогда
		Возврат "Заграничный паспорт Министерства морского флота";
	ИначеЕсли ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ДипломатическийПаспорт Тогда
		Возврат "Дипломатический паспорт";
	ИначеЕсли ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПаспортМоряка Тогда
		Возврат "Паспорт моряка (удостоверение личности моряка)";
	ИначеЕсли ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ВоенныйБилет Тогда
		Возврат "Военный билет военнослужащего";
	ИначеЕсли ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ВоенныйБилетОфицераЗапаса Тогда
		Возврат "Удостоверение личности офицера Министерства обороны Российской Федерации, Министерства "
				+ "внутренних дел Российской Федерации и других воинских формирований с приложением справки о прописке (регистрации) Ф-33";
	ИначеЕсли ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.СвидетельствоОРождении Тогда
		Возврат "Свидетельство о рождении";
	ИначеЕсли Не ВидДокумента = Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка() Тогда
		Возврат "Иные документы, предусмотренные законодательством Российской Федерации или признаваемые в "
				+ "соответствии с международным договором Российской Федерации в качестве документов, удостоверяющих личность";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции // ПолучитьВидДокументаФизЛица()

&НаСервереБезКонтекста
// Записывает в регистр сведений "Лицевые счета, выгруженные в ГИС ЖКХ" лицевые счета, которые были выгружены
// в ГИС ЖКХ.
//
// Параметры:
//  ТаблицаЛС - ТаблицаЗначений - таблица с выгруженными лицевыми счетами
//  ДатаВыгрузки - Дата - дата выгрузки
//
Процедура ЗапомнитьВыгруженныеЛС(МассивЛС, ДатаВыгрузки, ВыгружатьЛицевыеСчетаКР)
	
	НаборЗаписей = РегистрыСведений.УПЖКХ_ЛицевыеСчетаВыгруженныеВГИСЖКХ.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	ТаблицаЗаписей = НаборЗаписей.Выгрузить();
	
	Если ВыгружатьЛицевыеСчетаКР Тогда
		ТипЛС = Перечисления.УПЖКХ_ТипЛицевогоСчета.ЛСКР;
	Иначе
		ТипЛС = Перечисления.УПЖКХ_ТипЛицевогоСчета.ЛСУО;
	КонецЕсли;
	
	Для Каждого ЛицевойСчет Из МассивЛС Цикл
		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Объект", ЛицевойСчет);
		СтруктураОтбора.Вставить("ТипЛС", ТипЛС);
		
		НайденныеСтроки = ТаблицаЗаписей.НайтиСтроки(СтруктураОтбора);
		Если НайденныеСтроки.Количество() = 0 Тогда
			НоваяЗапись = ТаблицаЗаписей.Добавить();
			НоваяЗапись.ДатаВыгрузки = ДатаВыгрузки;
			НоваяЗапись.Объект       = ЛицевойСчет;
			НоваяЗапись.ТипЛС        = ТипЛС;
		Иначе
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.ДатаВыгрузки = ДатаВыгрузки;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписей.Загрузить(ТаблицаЗаписей);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры // ЗапомнитьВыгруженныеЛС()

&НаКлиенте
// Обрабатывает ответ пользователя на вопрос об очистке лицевых счетов, выгруженных в ГИС ЖКХ.
Процедура ОбработатьОтветПользователяОбОчисткеЛицевыхСчетов(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		УПЖКХ_ИнтеграцияСГИСЖКХВажныеМеханизмы.УдалитьСведенияОЛицевыхСчетахВыгруженныхВГИСЖКХ();
		Элементы.ЛицевыеСчетаВыгруженныеВГИСЖКХ.Обновить();
	КонецЕсли;
	
КонецПроцедуры // ОбработатьОтветПользователяОбОчисткеЛицевыхСчетов()

&НаКлиенте
// Обрабатывает ответ пользователя на вопрос об очистке приборов учета, выгруженных в ГИС ЖКХ.
Процедура ОбработатьОтветПользователяОбОчисткеПриборовУчета(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		УПЖКХ_ИнтеграцияСГИСЖКХВажныеМеханизмы.УдалитьСведенияОПриборахУчетаВыгруженныхВГИСЖКХ();
		Элементы.ПриборыУчетаВыгруженныеВГИСЖКХ.Обновить();
	КонецЕсли;
	
КонецПроцедуры // ОбработатьОтветПользователяОбОчисткеПриборовУчета()

#Область ПроцедурыВыгрузкиПлатежныхДокументов

&НаКлиенте
// Помещает файл шаблона ПД во временное хранилище с целью последующего извлечения на сервере.
//
Процедура ПоместитьФайлШаблонаПДВоВременноеХранилище()
	
	Файл = Новый Файл(Объект.ПутьКФайлуШаблонаПД);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПоместитьФайлШаблонаПДВоВременноеХранилищеФайлСуществует", ЭтотОбъект);
	
	Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры // ПоместитьФайлШаблонаПДВоВременноеХранилище()

&НаКлиенте
// Обработчик завершения проверки существования файла.
Процедура ПоместитьФайлШаблонаПДВоВременноеХранилищеФайлСуществует(ФайлСуществует, ДополнительныеПараметры) Экспорт
	
	Если (Не ПустаяСтрока(Объект.ПутьКФайлуШаблонаПД)) И ФайлСуществует Тогда
		
		Попытка
			НачатьПомещениеФайла(Новый ОписаниеОповещения("ОбработатьПомещениеФайлаШаблонаПД", ЭтаФорма),
								 ,
								 Объект.ПутьКФайлуШаблонаПД,
								 Ложь,
								 Новый УникальныйИдентификатор);
		Исключение
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ОписаниеОшибки());
			ПутьКФайлуШаблонаПДВрХранилище = "";
		КонецПопытки;
	Иначе
		ПутьКФайлуШаблонаПДВрХранилище = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Записываем результат помещения файла в соответствующую переменную и при необходимости
// вызываем процедуру обработки файлов на сервере.
Процедура ОбработатьПомещениеФайлаШаблонаПД(РезультатПомещения, АдресФайлаВХранилище, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если РезультатПомещения = Истина Тогда
		ПутьКФайлуШаблонаПДВрХранилище = АдресФайлаВХранилище;
	Иначе
		ПутьКФайлуШаблонаПДВрХранилище = "";
	КонецЕсли;
	
КонецПроцедуры // ОбработатьПомещениеФайлаШаблонаПД()

&НаСервере
// Разбирает файл шаблона выгрузки платежных документов, получает список услуг с кодами и сопоставляет услуги из
// файла с услугами из базы.
//
Функция ПолучитьТаблицуУслугИзФайлаШаблона()
	
	ТаблицаУслуг = Новый ТаблицаЗначений;
	
	Если ПустаяСтрока(ПутьКФайлуШаблонаПДВрХранилище) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Произошла ошибка при чтении файла шаблона.");
		Возврат ТаблицаУслуг;
	КонецЕсли;
	
	ДанныеШаблона = ПолучитьИзВременногоХранилища(ПутьКФайлуШаблонаПДВрХранилище);
	ИмяФайлаШаблона = ПолучитьИмяВременногоФайла("xlsx");
	ДанныеШаблона.Записать(ИмяФайлаШаблона);
	
	// Для платежных документов сначала получим файл шаблона.
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.Прочитать(ИмяФайлаШаблона);
	
	ОбластьКолонкаИмяСправочника         = ТабДок.НайтиТекст("Наименование справочника");
	ОбластьКолонкаНомерСправочника       = ТабДок.НайтиТекст("Реестровый номер справочника");
	ОбластьКолонкаИмяУслуги              = ТабДок.НайтиТекст("Наименование позиции справочника");
	ОбластьКолонкаКадастровыйНомерУслуги = ТабДок.НайтиТекст("Реестровый номер позиции");
	
	// Если все области существуют, значит страницу "Услуги исполнителя" нашли верно.
	Если ОбластьКолонкаИмяСправочника = Неопределено ИЛИ ОбластьКолонкаНомерСправочника = Неопределено
			ИЛИ ОбластьКолонкаИмяУслуги = Неопределено ИЛИ ОбластьКолонкаКадастровыйНомерУслуги = Неопределено Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Произошла ошибка при чтении файла шаблона.");
		Возврат ТаблицаУслуг;
	КонецЕсли;
	
	// Строка, с которой начинаем считывание услуг.
	НачальнаяСтрока = ОбластьКолонкаИмяСправочника.Верх + 1;
	
	// Необходимые колонки.
	КолонкаИмяУслуги              = ОбластьКолонкаИмяУслуги.Лево;
	КолонкаНомерСправочника       = ОбластьКолонкаНомерСправочника.Лево;
	КолонкаКадастровыйНомерУслуги = ОбластьКолонкаКадастровыйНомерУслуги.Лево;
	
	// Получили номера колонок, начинаем считывать услуги. В таблице будет только одна колонка с кодом услуги.
	ТаблицаУслугИзФайла = Новый ТаблицаЗначений;
	ТаблицаУслугИзФайла.Колонки.Добавить("КодУслугиВГИС",      УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(10));
	ТаблицаУслугИзФайла.Колонки.Добавить("КодСправочникаВГИС", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(10));
	ТаблицаУслугИзФайла.Колонки.Добавить("ИмяУслугиВГИС",      УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(100));
	
	// Считываем строки до тех пор, пока не "упремся" в пустую ячейку(без текста).
	Пока Не ПустаяСтрока(ТабДок.Область("R" + Строка(НачальнаяСтрока) + "C" + КолонкаИмяУслуги).Текст) Цикл
		
		СтрокаУслуги = ТаблицаУслугИзФайла.Добавить();
		СтрокаУслуги.КодУслугиВГИС      = СокрЛП(ТабДок.Область("R" + Строка(НачальнаяСтрока) + "C" + КолонкаКадастровыйНомерУслуги).Текст);
		СтрокаУслуги.КодСправочникаВГИС = СокрЛП(ТабДок.Область("R" + Строка(НачальнаяСтрока) + "C" + КолонкаНомерСправочника).Текст);
		СтрокаУслуги.ИмяУслугиВГИС      = СокрЛП(ТабДок.Область("R" + Строка(НачальнаяСтрока) + "C" + КолонкаИмяУслуги).Текст);
		
		НачальнаяСтрока = НачальнаяСтрока + 1;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаНомеровУслугВГИС", ТаблицаУслугИзФайла);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНомеровУслугВГИС.КодУслугиВГИС КАК КодУслугиВГИС,
	|	ТаблицаНомеровУслугВГИС.ИмяУслугиВГИС КАК ИмяУслугиВГИС,
	|	ТаблицаНомеровУслугВГИС.КодСправочникаВГИС КАК КодСправочникаВГИС
	|ПОМЕСТИТЬ втНомераУслугВГИС
	|ИЗ
	|	&ТаблицаНомеровУслугВГИС КАК ТаблицаНомеровУслугВГИС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ВидыУслуг.Ссылка КАК Ссылка,
	|	КВП_ВидыУслуг.КодУслугиВГИСЖКХ КАК КодУслугиВГИСЖКХ,
	|	КВП_ВидыУслуг.КодДневногоТарифаУслугиВГИС КАК КодДневногоТарифаУслугиВГИС,
	|	КВП_ВидыУслуг.КодНочногоТарифаУслугиВГИС КАК КодНочногоТарифаУслугиВГИС,
	|	КВП_ВидыУслуг.КодПиковогоТарифаУслугиВГИС КАК КодПиковогоТарифаУслугиВГИС,
	|	КВП_ВидыУслуг.КодСправочникаВГИСЖКХ КАК КодСправочникаВГИСЖКХ,
	|	КВП_ВидыУслуг.КодУслугиСОИ КАК КодУслугиСОИ,
	|	ВЫБОР
	|		КОГДА КВП_ВидыУслуг.СпособВыводаВКвитанциях = """"
	|			ТОГДА ""Тариф сворачивать, количество суммировать""
	|		ИНАЧЕ КВП_ВидыУслуг.СпособВыводаВКвитанциях
	|	КОНЕЦ КАК СпособВыводаВКвитанциях
	|ПОМЕСТИТЬ втВидыУслугСКодами
	|ИЗ
	|	Справочник.КВП_ВидыУслуг КАК КВП_ВидыУслуг
	|ГДЕ
	|	НЕ КВП_ВидыУслуг.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВидыУслугСКодами.Ссылка КАК Ссылка,
	|	втВидыУслугСКодами.КодСправочникаВГИСЖКХ КАК КодСправочникаВГИСЖКХ,
	|	втВидыУслугСКодами.СпособВыводаВКвитанциях КАК СпособВыводаВКвитанциях,
	|	втВидыУслугСКодами.КодУслугиВГИСЖКХ КАК КодУслугиВГИСЖКХ,
	|	ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Общий) КАК ВидТарифа,
	|	ЛОЖЬ КАК ЭтоУслугаСОИ
	|ПОМЕСТИТЬ втВидыУслугСКодамиСОИ
	|ИЗ
	|	втВидыУслугСКодами КАК втВидыУслугСКодами
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втВидыУслугСКодами.Ссылка,
	|	""2"",
	|	втВидыУслугСКодами.СпособВыводаВКвитанциях,
	|	втВидыУслугСКодами.КодУслугиСОИ,
	|	ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Общий),
	|	ИСТИНА
	|ИЗ
	|	втВидыУслугСКодами КАК втВидыУслугСКодами
	|ГДЕ
	|	НЕ втВидыУслугСКодами.КодУслугиСОИ = """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втВидыУслугСКодами.Ссылка,
	|	втВидыУслугСКодами.КодСправочникаВГИСЖКХ,
	|	втВидыУслугСКодами.СпособВыводаВКвитанциях,
	|	втВидыУслугСКодами.КодДневногоТарифаУслугиВГИС,
	|	ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Дневной),
	|	ЛОЖЬ
	|ИЗ
	|	втВидыУслугСКодами КАК втВидыУслугСКодами
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втВидыУслугСКодами.Ссылка,
	|	втВидыУслугСКодами.КодСправочникаВГИСЖКХ,
	|	втВидыУслугСКодами.СпособВыводаВКвитанциях,
	|	втВидыУслугСКодами.КодНочногоТарифаУслугиВГИС,
	|	ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Ночной),
	|	ЛОЖЬ
	|ИЗ
	|	втВидыУслугСКодами КАК втВидыУслугСКодами
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втВидыУслугСКодами.Ссылка,
	|	втВидыУслугСКодами.КодСправочникаВГИСЖКХ,
	|	втВидыУслугСКодами.СпособВыводаВКвитанциях,
	|	втВидыУслугСКодами.КодПиковогоТарифаУслугиВГИС,
	|	ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Пиковый),
	|	ЛОЖЬ
	|ИЗ
	|	втВидыУслугСКодами КАК втВидыУслугСКодами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНомераУслугВГИС.КодУслугиВГИС КАК КодУслугиВГИС,
	|	втНомераУслугВГИС.КодСправочникаВГИС КАК КодСправочникаВГИС,
	|	втНомераУслугВГИС.ИмяУслугиВГИС КАК ИмяУслугиВГИС,
	|	втВидыУслугСКодамиСОИ.ВидТарифа КАК ВидТарифа,
	|	ЕСТЬNULL(втВидыУслугСКодамиСОИ.Ссылка, ЗНАЧЕНИЕ(Справочник.КВП_ВидыУслуг.ПустаяСсылка)) КАК ВидУслуги,
	|	втВидыУслугСКодамиСОИ.СпособВыводаВКвитанциях КАК СпособВыводаВКвитанциях,
	|	ВЫБОР
	|		КОГДА втНомераУслугВГИС.КодСправочникаВГИС = ""2""
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоУслугаСОИ
	|ПОМЕСТИТЬ втИтоговая
	|ИЗ
	|	втНомераУслугВГИС КАК втНомераУслугВГИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВидыУслугСКодамиСОИ КАК втВидыУслугСКодамиСОИ
	|		ПО втНомераУслугВГИС.КодУслугиВГИС = втВидыУслугСКодамиСОИ.КодУслугиВГИСЖКХ
	|			И втНомераУслугВГИС.КодСправочникаВГИС = втВидыУслугСКодамиСОИ.КодСправочникаВГИСЖКХ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговая.КодУслугиВГИС КАК КодУслугиВГИС,
	|	втИтоговая.КодСправочникаВГИС КАК КодСправочникаВГИС,
	|	втИтоговая.ИмяУслугиВГИС КАК ИмяУслугиВГИС,
	|	втИтоговая.ВидТарифа КАК ВидТарифа,
	|	ЕСТЬNULL(КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслугиНовый, втИтоговая.ВидУслуги) КАК ВидУслуги,
	|	втИтоговая.СпособВыводаВКвитанциях КАК СпособВыводаВКвитанциях,
	|	ВЫБОР
	|		КОГДА втИтоговая.КодСправочникаВГИС = ""51""
	|				ИЛИ втИтоговая.КодСправочникаВГИС = ""2""
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоКоммунальнаяУслуга,
	|	ВЫБОР
	|		КОГДА втИтоговая.КодСправочникаВГИС = ""50""
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоЖилищнаяУслуга,
	|	ВЫБОР
	|		КОГДА втИтоговая.КодСправочникаВГИС = ""1""
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоДополнительнаяУслуга,
	|	втИтоговая.ЭтоУслугаСОИ КАК ЭтоУслугаСОИ
	|ПОМЕСТИТЬ втИтоговаяСВидамиУслуг
	|ИЗ
	|	втИтоговая КАК втИтоговая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ВидыУслугДляЗаменыВКвитанции КАК КВП_ВидыУслугДляЗаменыВКвитанции
	|		ПО втИтоговая.ВидУслуги = КВП_ВидыУслугДляЗаменыВКвитанции.ВидУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговаяСВидамиУслуг.КодУслугиВГИС КАК КодУслугиВГИС,
	|	втИтоговаяСВидамиУслуг.КодСправочникаВГИС КАК КодСправочникаВГИС,
	|	втИтоговаяСВидамиУслуг.ИмяУслугиВГИС КАК ИмяУслугиВГИС,
	|	втИтоговаяСВидамиУслуг.ВидУслуги КАК ВидУслуги,
	|	втИтоговаяСВидамиУслуг.ВидТарифа КАК ВидТарифа,
	|	втИтоговаяСВидамиУслуг.СпособВыводаВКвитанциях КАК СпособВыводаВКвитанциях,
	|	втИтоговаяСВидамиУслуг.ЭтоКоммунальнаяУслуга КАК ЭтоКоммунальнаяУслуга,
	|	втИтоговаяСВидамиУслуг.ЭтоЖилищнаяУслуга КАК ЭтоЖилищнаяУслуга,
	|	втИтоговаяСВидамиУслуг.ЭтоДополнительнаяУслуга КАК ЭтоДополнительнаяУслуга,
	|	втИтоговаяСВидамиУслуг.ВидУслуги.ЕдиницаИзмерения КАК ЕдИзм,
	|	втИтоговаяСВидамиУслуг.ЭтоУслугаСОИ КАК ЭтоУслугаСОИ
	|ИЗ
	|	втИтоговаяСВидамиУслуг КАК втИтоговаяСВидамиУслуг";
	
	// Таблица услуг, в разрезе которых будем выгружать сведения о лицевых счетах.
	ТаблицаУслуг = Запрос.Выполнить().Выгрузить();
	
	МассивСообщенийОбОшибках = Новый Массив;
	Для Каждого ТекСтрока Из ТаблицаУслуг Цикл
		
		// Проверка, все ли виды услуг с такими кодами определены в справочнике "Виды услуг".
		Если ТекСтрока.ВидУслуги.Пустая() Тогда
			Если ТекСтрока.ЭтоУслугаСОИ Тогда
				МассивСообщенийОбОшибках.Добавить("В справочнике ""Виды услуг"" не определен вид услуги СОИ с реестровым номером позиции " + ТекСтрока.КодУслугиВГИС + 
														" (" + ТекСтрока.ИмяУслугиВГИС + ").");
			Иначе
				МассивСообщенийОбОшибках.Добавить("В справочнике ""Виды услуг"" не определен вид услуги с реестровым номером позиции " + ТекСтрока.КодУслугиВГИС + 
														" (" + ТекСтрока.ИмяУслугиВГИС + ").");
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не МассивСообщенийОбОшибках.Количество() = 0 Тогда
		
		Для Каждого ТекстСообщения Из МассивСообщенийОбОшибках Цикл
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ТекстСообщения);
		КонецЦикла;
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Выгрузка платежных документов может быть произведена некорректно.");
		
	КонецЕсли;
	
	Возврат ТаблицаУслуг;
	
КонецФункции // ПолучитьТаблицуУслугИзФайлаШаблона()

&НаКлиенте
// Вызывает серверную процедуру из обработчика ожидания
Процедура ВыбратьВсеНевыгруженныеЛСНаСервереПлатежныеДокументыКлиент () Экспорт
	ВыбратьВсеНевыгруженныеЛСНаСервереПлатежныеДокументы();
КонецПроцедуры

&НаСервере
// Помещает в таблицу "Лицевые счета платежных документов" все лицевые счета, платежные документы в периоде по которым
// еще не были выгружены в ГИС ЖКХ.
//
Процедура ВыбратьВсеНевыгруженныеЛСНаСервереПлатежныеДокументы()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_ПлатежныеДокументыВыгруженныеВГИС.ЛицевойСчет
	|ПОМЕСТИТЬ втВыгруженныеВМесяцеЛицевыеСчета
	|ИЗ
	|	РегистрСведений.УПЖКХ_ПлатежныеДокументыВыгруженныеВГИС КАК УПЖКХ_ПлатежныеДокументыВыгруженныеВГИС
	|ГДЕ
	|	УПЖКХ_ПлатежныеДокументыВыгруженныеВГИС.Период = &Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&Период,
	|			НЕ ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втВыгруженныеВМесяцеЛицевыеСчета.ЛицевойСчет
	|					ИЗ
	|						втВыгруженныеВМесяцеЛицевыеСчета КАК втВыгруженныеВМесяцеЛицевыеСчета)) КАК КВП_ЛицевыеСчетаСрезПоследних
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
	|
	|УПОРЯДОЧИТЬ ПО
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Наименование";
	
	Запрос.УстановитьПараметр("Период", НачалоМесяца(Объект.ПериодВыгрузки));
	
	Объект.ЛицевыеСчетаПлатежныхДокументов.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры // ВыбратьВсеНевыгруженныеЛСНаСервереПлатежныеДокументы()

#КонецОбласти

#Область ЗагрузкаИдентфикаторовПД

&НаКлиенте
// Продолжение обработки команды "ВыполнитьПоискПДСИдентификаторами".
//
Процедура ВыполнитьПоискПДСИдентификаторамиПродолжение()
	
	Если ПустаяСтрока(Объект.КаталогЗагрузкиПД) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран каталог поиска платежных документов");
	КонецЕсли;
	
	НачатьПоискФайлов(Новый ОписаниеОповещения("ВыполнитьПоискПДСИдентификаторамиПродолжениеПоискФайлов", ЭтотОбъект),
					  Объект.КаталогЗагрузкиПД, "*.xlsx");
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения поиска файлов.
Процедура ВыполнитьПоискПДСИдентификаторамиПродолжениеПоискФайлов(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если НайденныеФайлы.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("В указанном каталоге не найдено файлов Excel.");
	Иначе
		
		МассивИмен = Новый Массив;
		
		Для Каждого ТекФайл Из НайденныеФайлы Цикл
			ИмяФайла = ТекФайл.ПолноеИмя;
			// Временные файлы исключаем.
			Если СтрНайти(ИмяФайла, "~$") = 0 Тогда
				МассивИмен.Добавить(ИмяФайла);
			КонецЕсли;
		КонецЦикла;
		
		ПоместитьФайлыПДНаСервер(МассивИмен);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Помещает файлы с клиента во временное хранилище, после чего мы сможем их считать на сервере.
//
Процедура ПоместитьФайлыПДНаСервер(МассивИмен)
	
	СтруктураИменФайлов = Новый Структура;
	
	КоличествоФайлов = МассивИмен.Количество();
	Для Счетчик = 1 По КоличествоФайлов Цикл
		
		ТекФайл = МассивИмен.Получить(Счетчик - 1);
		ИндексСтрокой = Формат(Счетчик -1, "ЧГ=0");
		
		Если Счетчик + 1 > КоличествоФайлов Тогда
			ЭтоПоследнийФайл = Истина;
		Иначе
			ЭтоПоследнийФайл = Ложь;
		КонецЕсли;
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ЭтоПоследнийФайл", ЭтоПоследнийФайл);
		ДопПараметры.Вставить("ИмяФайла", "Файл" + ИндексСтрокой);
		Попытка
			НачатьПомещениеФайла(Новый ОписаниеОповещения("ОбработатьПомещениеФайлаПДИзКаталога", ЭтаФорма, ДопПараметры),
								 ,
								 ТекФайл,
								 Ложь,
								 Новый УникальныйИдентификатор);
		Исключение
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры // ПоместитьФайлыПДНаСервер()

&НаКлиенте
// Записываем результат помещения файла в соответствующую переменную и при необходимости
// вызываем процедуру обработки файлов на сервере.
Процедура ОбработатьПомещениеФайлаПДИзКаталога(РезультатПомещения, АдресФайлаВХранилище, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если РезультатПомещения = Истина Тогда
		
		ЭтоПоследнийФайл = ДополнительныеПараметры.ЭтоПоследнийФайл;
		ИмяФайла         = ДополнительныеПараметры.ИмяФайла;
		
		СтруктураИменФайлов.Вставить(ИмяФайла, АдресФайлаВХранилище);
		
		Если ЭтоПоследнийФайл Тогда
			ОбработатьФайлыНаСервере();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьПомещениеФайлаИзКаталога()

&НаКлиенте
// Процедура обрабатывает ответ пользователя на вопрос об очистке таблицы ИД.
//
Процедура ОбработатьОтветПользователяОбОчисткеТаблицыИДПД(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ТаблицаИдентификаторовПД.Очистить();
		ВыполнитьПоискПДСИдентификаторамиПродолжение();
	КонецЕсли;
	
КонецПроцедуры // ОбработатьОтветПользователяОбОчисткеТаблицыИДПД()

&НаСервере
// Процедура считывает идентификаторы ПД из файлов, найденных в папке.
//
Процедура ОбработатьФайлыНаСервере()
	
	Если Не ТипЗнч(СтруктураИменФайлов) = Тип("Структура") Или СтруктураИменФайлов.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Возникла ошибка при получении файла(ов) на сервере.");
		Возврат;
	КонецЕсли;
	
	ТаблицаИдентификаторов = Новый ТаблицаЗначений;
	ТаблицаИдентификаторов.Колонки.Добавить("ИдентификаторЖКУ", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(100));
	ТаблицаИдентификаторов.Колонки.Добавить("ИдентификаторПД",  УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(100));
	ТаблицаИдентификаторов.Колонки.Добавить("НомерПД",          УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(100));
	
	Для Каждого ТекИмя Из СтруктураИменФайлов Цикл
		
		ДанныеФайла = ПолучитьИзВременногоХранилища(ТекИмя.Значение);
		ИмяФайлаЭкспортаПД = ПолучитьИмяВременногоФайла("xlsx");
		ДанныеФайла.Записать(ИмяФайлаЭкспортаПД);
		
		ТабДок = Новый ТабличныйДокумент;
		
		Попытка
			ТабДок.Прочитать(ИмяФайлаЭкспортаПД);
		Исключение
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не удалось прочитать файл: """ + ТекИмя + "");
			Продолжить;
		КонецПопытки;
		
		// Ищем начало 1й страницы.
		ОбластьКолонкаИдентификаторПД = ТабДок.НайтиТекст("Идентификатор платежного документа");
		ОбластьКолонкаРазделСправка   = ТабДок.НайтиТекст("Раздел 4. Справочная информация");
		
		Если ОбластьКолонкаИдентификаторПД = Неопределено Или ОбластьКолонкаРазделСправка = Неопределено Тогда
			// Какой-то другой экселевский документ. Файл не подходит.
			Продолжить;
		КонецЕсли;
		
		// Ищем конец заголовка первой страницы.
		ПерваяСтрока = ОбластьКолонкаИдентификаторПД.Верх + 3;
		
		// Ищем начало 2й страницы.
		ПоследняяСтрока = ОбластьКолонкаРазделСправка.Верх - 1;
		
		// Получим лицевой счет и идентификатор ПД.
		НомерКолонкиИдентификаторПД  = ОбластьКолонкаИдентификаторПД.Лево;
		НомерКолонкиИдентификаторЖКУ = ТабДок.НайтиТекст("Идентификатор ЖКУ").Лево;
		НомерКолонкиНомерПД          = ТабДок.НайтиТекст("Номер платежного документа").Лево;
		
		// Разбираем строки.
		Для Счетчик = ПерваяСтрока По ПоследняяСтрока Цикл
			
			ИдентификаторПД = СокрЛП(ТабДок.Область("R" + Строка(Формат(Счетчик, "ЧГ=0")) + "C" + НомерКолонкиИдентификаторПД).Текст);
			Если ПустаяСтрока(ИдентификаторПД) Тогда
				// ПД не принят. Пропускаем строку.
				Продолжить;
			КонецЕсли;
			
			ИдентификаторЖКУ = СокрЛП(ТабДок.Область("R" + Строка(Формат(Счетчик, "ЧГ=0")) + "C" + НомерКолонкиИдентификаторЖКУ).Текст);
			НомерПД          = СокрЛП(ТабДок.Область("R" + Строка(Формат(Счетчик, "ЧГ=0")) + "C" + НомерКолонкиНомерПД).Текст);
			
			Если Не ПустаяСтрока(ИдентификаторЖКУ) Тогда
				// Добавляем строку.
				НоваяСтрока                  = ТаблицаИдентификаторов.Добавить();
				НоваяСтрока.ИдентификаторЖКУ = ИдентификаторЖКУ;
				НоваяСтрока.ИдентификаторПД  = ИдентификаторПД;
				НоваяСтрока.НомерПД          = НомерПД;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ТаблицаИдентификаторов.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("втТаблицаИдентификаторов", ТаблицаИдентификаторов);
		Запрос.УстановитьПараметр("Период",                   НачалоМесяца(Объект.ПериодВыгрузки));
		Запрос.Текст =
		"ВЫБРАТЬ
		|	втТаблицаИдентификаторов.ИдентификаторЖКУ,
		|	втТаблицаИдентификаторов.ИдентификаторПД,
		|	втТаблицаИдентификаторов.НомерПД
		|ПОМЕСТИТЬ втТаблицаИдентификаторов
		|ИЗ
		|	&втТаблицаИдентификаторов КАК втТаблицаИдентификаторов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_ЛицевыеСчета.Ссылка КАК ЛицевойСчет,
		|	КВП_ЛицевыеСчета.ИдентификаторЖКУ,
		|	КВП_ЛицевыеСчета.ИдентификаторЖКУКР,
		|	втТаблицаИдентификаторов.НомерПД,
		|	втТаблицаИдентификаторов.ИдентификаторПД
		|ПОМЕСТИТЬ втЛицевыеСчета
		|ИЗ
		|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТаблицаИдентификаторов КАК втТаблицаИдентификаторов
		|		ПО КВП_ЛицевыеСчета.ИдентификаторЖКУ = втТаблицаИдентификаторов.ИдентификаторЖКУ
		|		ИЛИ КВП_ЛицевыеСчета.ИдентификаторЖКУКР = втТаблицаИдентификаторов.ИдентификаторЖКУ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втЛицевыеСчета.ЛицевойСчет,
		|	втЛицевыеСчета.ИдентификаторПД КАК ИдентификаторПДИзФайла,
		|	ЕСТЬNULL(УПЖКХ_ПлатежныеДокументыВыгруженныеВГИССрезПоследних.НомерПД, """") КАК НомерПД,
		|	ЕСТЬNULL(УПЖКХ_ПлатежныеДокументыВыгруженныеВГИССрезПоследних.ТипКвитанции, ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипКвитанции.ПустаяСсылка)) КАК ТипКвитанции,
		|	ЕСТЬNULL(УПЖКХ_ПлатежныеДокументыВыгруженныеВГИССрезПоследних.ИдентификаторПД, """") КАК ИдентификаторПДВБазе,
		|	ЕСТЬNULL(УПЖКХ_ПлатежныеДокументыВыгруженныеВГИССрезПоследних.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК Период
		|ИЗ
		|	втЛицевыеСчета КАК втЛицевыеСчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ПлатежныеДокументыВыгруженныеВГИС.СрезПоследних(&Период, ) КАК УПЖКХ_ПлатежныеДокументыВыгруженныеВГИССрезПоследних
		|		ПО втЛицевыеСчета.ЛицевойСчет = УПЖКХ_ПлатежныеДокументыВыгруженныеВГИССрезПоследних.ЛицевойСчет
		|		И втЛицевыеСчета.НомерПД = УПЖКХ_ПлатежныеДокументыВыгруженныеВГИССрезПоследних.НомерПД";
		
		ТаблицаИдентификаторовПД.Загрузить(Запрос.Выполнить().Выгрузить());
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьФайлыНаСервере()

&НаСервере
// Заносит информацию о ПД в регистр.
//
Процедура ЗаполнитьИдентификаторыНайденныхПДНаСервере()
	
	Для Каждого ТекСтрока Из ТаблицаИдентификаторовПД Цикл
		
		НаборЗаписей = РегистрыСведений.УПЖКХ_ПлатежныеДокументыВыгруженныеВГИС.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЛицевойСчет.Установить(ТекСтрока.ЛицевойСчет);
		НаборЗаписей.Отбор.Период.Установить(ТекСтрока.Период);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			НоваяЗапись                 = НаборЗаписей.Добавить();
			НоваяЗапись.ЛицевойСчет     = ТекСтрока.ЛицевойСчет;
			НоваяЗапись.Период          = НачалоМесяца(ТекСтрока.Период);
			Новаязапись.ИдентификаторПД = ТекСтрока.ИдентификаторПДИзФайла;
			
		Иначе
			Для Каждого ТекЗапись Из НаборЗаписей Цикл
				Если ТекЗапись.НомерПД = ТекСтрока.НомерПд Тогда
					ТекЗапись.ИдентификаторПД = ТекСтрока.ИдентификаторПДИзФайла;
					ТекЗапись.Период          = НачалоМесяца(ТекСтрока.Период);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если КВП_ЗаписатьОбъект(НаборЗаписей, Истина) Тогда
			ТекСтрока.ИдентификаторПДВБазе = ТекСтрока.ИдентификаторПДИзФайла;
			ТекСтрока.Период               = НачалоМесяца(ТекСтрока.Период);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьИдентификаторыНайденныхПДНаСервере()

#КонецОбласти

#Область ОтзывИУдалениеПроектовПД

&НаСервере
// Получает из временного хранилища таблицу выбранных пользователем отзываемых ПД.
//
Процедура ЗаполнитьТаблицуОтзываемыхПДНаСервере(АдресВХранилище)
	
	ТаблицаОтзываемыхПД.Загрузить(ПолучитьИзВременногоХранилища(АдресВХранилище));
	
КонецПроцедуры // ЗаполнитьТаблицуОтзываемыхПДНаСервере()

&НаСервереБезКонтекста
// Получает на сервере макет шаблона отзыва ПД.
//
Функция ПолучитьМакетОтзываПДНаСервере()
	
	Возврат Обработки.УПЖКХ_ОбменДаннымиСГИСЖКХ.ПолучитьМакет("ШаблонФайлаОтзываПлатежныхДокументов");
	
КонецФункции // ПолучитьМакетОтзываПДНаСервере()

#КонецОбласти

#Область ВыгрузкаПриборовУчета

&НаСервере
// Процедура выполняет заполнение табличной части приборов учета. В переменную "ТекОбъект" может приходить:
// 1. Счетчик из справочника "Счетчики". В этом случае установленные счетчики
//    подбираются по условию на счетчики "Счетчик В (&Счетчики)".
// 2. Объект (здание, подъезд, помещение или л/с). В этом случае установленные счетчики
//    подбираются по условию объекта установки "Объект В (&Объекты)".
//
Процедура ДобавитьПриборыУчетаВТабличнуюЧасть(ТекОбъект)
	
	ТаблицаСчетчиков = УПЖКХ_ИнтеграцияСГИСЖКХВажныеМеханизмы.ПолучитьТаблицуСчетчиковПоЗаданнымКритериям(ТекОбъект, Объект.ПериодВыгрузки, Объект.ВидОбменаПУ);
	ЭтоПодборПоСчетчику = (ТипЗнч(ТекОбъект) = Тип("СправочникСсылка.КВП_Счетчики"));
	
	// Принимает значение Неопределено, если функционал недоступен в силу отсутствия подписки для Базовых версий.
	Если ТаблицаСчетчиков = Неопределено Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Функционал обмена данными с ГИС ЖКХ недоступен!", ТекОбъект);
	ИначеЕсли ТаблицаСчетчиков.Количество() = 0 Тогда
		Дополнение = "";
		Если Объект.ВидОбменаПУ = Перечисления.УПЖКХ_ВидыОбменаПриборамиУчетаСГИСЖКХ.ВыгрузкаПоказанийОДПУ Тогда
			Дополнение = "на здания или подъезды.";
		ИначеЕсли Объект.ВидОбменаПУ = Перечисления.УПЖКХ_ВидыОбменаПриборамиУчетаСГИСЖКХ.ВыгрузкаПоказанийИПУ Тогда
			Дополнение = "на лицевые счета, помещения или жилые дома.";
		Иначе
			Дополнение = "на объекты.";
		КонецЕсли;
			
		Если ЭтоПодборПоСчетчику Тогда
			
			Если ТекОбъект.ЭтоГруппа Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(СтрШаблон("Счетчики в выбранной группе ""%1"" не действуют либо не установлены %2", ТекОбъект, Дополнение), ТекОбъект);
			Иначе
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(СтрШаблон("Выбранный счетчик ""%1"" не действует либо не установлен %2", ТекОбъект, Дополнение), ТекОбъект);
			КонецЕсли;
			
		Иначе
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(СтрШаблон("По выбранному объекту ""%1"" отсутствуют установленные приборы учета.", ТекОбъект), ТекОбъект);
		КонецЕсли;
	Иначе
		
		Для Каждого ТекСтрока Из ТаблицаСчетчиков Цикл
			НоваяСтрока = Объект.ПриборыУчета.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьПриборыУчетаВТабличнуюЧасть()

&НаКлиенте
// Открывает форму выбора объектов указанного типа.
//
Процедура ОбработатьВыборТипаОбъектовПодбора(ВыбЗначение, ДопПараметры) Экспорт
	
	Если Не ВыбЗначение = Неопределено Тогда
		
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьВыборОбъекта", ЭтотОбъект);
		Если ВыбЗначение = "Лицевые счета" Тогда
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.ГруппыИЭлементы);
			ОткрытьФорму("Справочник.КВП_ЛицевыеСчета.Форма.ФормаВыбора", ПараметрыОткрытия,,,,,ОповещениеОЗакрытии);
		ИначеЕсли ВыбЗначение = "Помещения" Тогда
			ОткрытьФорму("Справочник.УПЖКХ_Помещения.Форма.ФормаВыбора",,,,,,ОповещениеОЗакрытии);
		ИначеЕсли ВыбЗначение = "Подъезды" Тогда
			ОткрытьФорму("Справочник.КВП_Подъезды.Форма.ФормаВыбора",,,,,,ОповещениеОЗакрытии);
		ИначеЕсли ВыбЗначение = "Здания, сооружения" Тогда
			ПараметрыОткрытия = Новый Структура;
			// ОДПУ могут быть установлены только на МКД.
			Если Объект.ВидОбменаПУ = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОбменаПриборамиУчетаСГИСЖКХ.ВыгрузкаПоказанийОДПУ") Тогда
				ПараметрыОткрытия.Вставить("Многоквартирное", Истина);
			КонецЕсли;
			ПараметрыОткрытия.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.ГруппыИЭлементы);
			ОткрытьФорму("Справочник.КВП_Здания.Форма.ФормаВыбора", ПараметрыОткрытия,,,,,ОповещениеОЗакрытии);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВыборТипаОбъектовПодбора()

&НаКлиенте
// Обрабатывает выбор значения объекта и вызывает процедуру заполнения ТЧ.
//
Процедура ОбработатьВыборОбъекта(ВыбранноеЗначение, ДопПараметры) Экспорт
	
	Если Не ВыбранноеЗначение = Неопределено Тогда
		
		ЭтоПодборПоСчетчику = (ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КВП_Счетчики"));
		
		Если УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "ЭтоГруппа") И Не ЭтоПодборПоСчетчику Тогда
			
			МассивОбъектов = ПолучитьМассивОбъектовВГруппе(ВыбранноеЗначение);
			
			Для каждого ОбъектВыгрузки Из МассивОбъектов Цикл
				ОбработатьВыборОбъекта(ОбъектВыгрузки, ДопПараметры);
			КонецЦикла;
			
		Иначе
			ДобавитьПриборыУчетаВТабличнуюЧасть(ВыбранноеЗначение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВыборОбъекта()

&НаСервере
// Функция возвращет массив Лицевых счетов, содержащихся в группе
Функция ПолучитьМассивОбъектовВГруппе(ВыбранноеЗначение)
	
	МассивОбъектов = Новый Массив;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
		
		МассивОбъектов =  ПолучитьМассивЛицевыхСчетовВГруппе(ВыбранноеЗначение);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КВП_Здания") Тогда
		
		МассивОбъектов =  ПолучитьМассивЗданийВГруппе(ВыбранноеЗначение);
		
	КонецЕсли;
	
	Возврат МассивОбъектов;
	
КонецФункции // ПолучитьМассивОбъектовВГруппе()

&НаСервере
// Функция возвращет массив Лицевых счетов, содержащихся в группе.
Функция ПолучитьМассивЛицевыхСчетовВГруппе(ГруппаЛицевыхСчетов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ЛицевыеСчета.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	КВП_ЛицевыеСчета.Родитель = &ГруппаЛицевыхСчетов
	|	И НЕ КВП_ЛицевыеСчета.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ГруппаЛицевыхСчетов", ГруппаЛицевыхСчетов);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции // ПолучитьМассивЛицевыхСчетовВГруппе()

&НаСервере
// Функция возвращет массив зданий, содержащихся в группе.
Функция ПолучитьМассивЗданийВГруппе(ГруппаЗданий)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_Здания.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КВП_Здания КАК КВП_Здания
	|ГДЕ
	|	КВП_Здания.Родитель = &ГруппаЗданий
	|	И НЕ КВП_Здания.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ГруппаЗданий", ГруппаЗданий);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции // ПолучитьМассивЗданийВГруппе()

&НаСервере
// Функция удаляет из таблицы формы счетчики, по которым не заполнены обязательные данные, выдает
// пользователю соответствующие предупреждения.
//
Функция ПриборыУчетаОтсечьСтрокиСНезаполненнымиДанными(ТаблицаСчетчиков, ЕстьОшибки, ТаблицаСНезаполненнымиДанными, ЭтоПроверкаСведений, ВидВыгрузки = "Сведения о показаниях счетчиков")
	
	МассивУдаляемыхСтрок = Новый Массив;
	Для Каждого ТекСтрока Из ТаблицаСчетчиков Цикл
		
		ПредставлениеСчетчика = "" + ТекСтрока.Счетчик;
		// Проверка на заполненность номера счетчика в ГИС ЖКХ.
		Если ПустаяСтрока(ТекСтрока.НомерВГИСЖКХ) Тогда
			ВывестиСообщениеОПроблемахВОбмене("Для счетчика " + ПредставлениеСчетчика + " не заполнен номер в ГИС ЖКХ.", ТекСтрока.Счетчик, , ЭтоПроверкаСведений);
			ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Счетчик " + ПредставлениеСчетчика, ТекСтрока.Счетчик, "Номер счетчика в ГИС ЖКХ");
			МассивУдаляемыхСтрок.Добавить(ТекСтрока);
		ИначеЕсли ТекСтрока.ДатаПоказания = Дата(1,1,1) И ТекСтрока.ДневноеПоказание = 0 Тогда
			ВывестиСообщениеОПроблемахВОбмене("Для счетчика " + ПредставлениеСчетчика + " нет сведений о показаниях", ТекСтрока.Счетчик, , ЭтоПроверкаСведений);
			ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Счетчик " + ПредставлениеСчетчика, ТекСтрока.Счетчик, "Показания счетчика");
			МассивУдаляемыхСтрок.Добавить(ТекСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого СтрокаДляУдаления Из МассивУдаляемыхСтрок Цикл
		ТекИндекс = ТаблицаСчетчиков.Индекс(СтрокаДляУдаления);
		ТаблицаСчетчиков.Удалить(ТекИндекс);
	КонецЦикла;
	
	Если ТаблицаСчетчиков.Количество() = 0 Тогда
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	// Проверка на заполненность реквизита "Коммунальный ресурс" услуги.
	ТаблицаПоУслугам = ТаблицаСчетчиков.Скопировать();
	ТаблицаПоУслугам.Свернуть("Услуга");
	Для Каждого ТекСтрока Из ТаблицаПоУслугам Цикл
		Если ТекСтрока.Услуга.КоммунальныйРесурс.Пустая() Тогда
			ПредставлениеУслуги = "" + ТекСтрока.Услуга;
			ВывестиСообщениеОПроблемахВОбмене("Для услуги " + ПредставлениеУслуги + " не заполнен коммунальный ресурс", ТекСтрока.Услуга, , ЭтоПроверкаСведений);
			ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Услуга " + ПредставлениеУслуги, ТекСтрока.Услуга, "Коммунальный ресурс");
			ЕстьОшибки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	// Свернем ТаблицуСчетчиков по всем полям - во избежание случая, когда добавили один и тот же счетчик несколько раз.
	ТаблицаСчетчиков.Свернуть("Счетчик, Услуга, Объект, НомерВГИСЖКХ, ДатаПоказания, ДневноеПоказание, НочноеПоказание, ПиковоеПоказание");
	
	Возврат ТаблицаСчетчиков;
	
КонецФункции // ПриборыУчетаОтсечьСтрокиСНезаполненнымиДанными()

&НаКлиентеНаСервереБезКонтекста
// Выполняет непосредственную выгрузку приборов учета в файл Эксель.
//
Процедура ВыполнитьВыгрузкуПриборовУчета(Эксель, КоличествоФайлов, КаталогВыгрузки, МакетПУ, Форма, СтруктураИменТаблицФормы, СформированныеФайлы, ФормируемНаСервере)
	
	ВидОбменаПУ = Форма.Объект.ВидОбменаПУ;
	Если ВидОбменаПУ = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОбменаПриборамиУчетаСГИСЖКХ.ВыгрузкаСведенийПУ") Тогда
		ПутьКФайлу = КаталогВыгрузки + "\" + "Сведения о приборах учета от " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy HH.mm.ss'") + ".xlsx";
	ИначеЕсли ВидОбменаПУ = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОбменаПриборамиУчетаСГИСЖКХ.ВыгрузкаПоказанийИПУ") Тогда
		ПутьКФайлу = КаталогВыгрузки + "\" + "Сведения о показаниях ИПУ от " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy HH.mm.ss'") + ".xlsx";
	ИначеЕсли ВидОбменаПУ = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОбменаПриборамиУчетаСГИСЖКХ.ВыгрузкаПоказанийОДПУ") Тогда
		ПутьКФайлу = КаталогВыгрузки + "\" + "Сведения о показаниях ОДПУ от " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy HH.mm.ss'") + ".xlsx";
	КонецЕсли;
	
	Если СтруктураИменТаблицФормы.Свойство("ТаблицаСчетчиков") Тогда
		ТаблицаСчетчиков = Форма["ТаблицаСчетчиков"];
	КонецЕсли;
	
	Если ТаблицаСчетчиков.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	#Если НЕ ВебКлиент Тогда
	ИмяФайла = ?(ФормируемНаСервере, ПолучитьИмяВременногоФайла("xlsx"), ПутьКФайлу);
	#Иначе
	ИмяФайла = ПутьКФайлу;
	#КонецЕсли
	МакетПУ.Записать(ИмяФайла);
	
	Книга = Эксель.WorkBooks.Open(ИмяФайла);
	
	Если ВидОбменаПУ = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОбменаПриборамиУчетаСГИСЖКХ.ВыгрузкаСведенийПУ") Тогда
		ЛистСведенийОПУ    = Книга.WorkSheets(1);
		ДопЛистСведенийОПУ = Книга.WorkSheets(4);
		
		Счетчик = 2;
		
		ОсновныеСтрокиСчетчиков = ТаблицаСчетчиков.НайтиСтроки(Новый Структура("ВыводитьНаТретьейСтранице", Ложь));
		
		Для Каждого СтрокаСчетчика Из ОсновныеСтрокиСчетчиков Цикл
			ЛистСведенийОПУ.cells(Счетчик, 1).value = СтрокаСчетчика.СсылочныйНомерПУ;
			ЛистСведенийОПУ.cells(Счетчик, 2).value = СтрокаСчетчика.ЗаводскойНомер;
			ЛистСведенийОПУ.cells(Счетчик, 3).value = СтрокаСчетчика.ВидПУ;
			ЛистСведенийОПУ.cells(Счетчик, 4).value = СтрокаСчетчика.Марка;
			ЛистСведенийОПУ.cells(Счетчик, 5).value = СтрокаСчетчика.Модель;
			ЛистСведенийОПУ.cells(Счетчик, 6).value = СтрокаСчетчика.НаименованиеЗдания;
			Если СтрокаСчетчика.ВидПУ = "Коллективный (общедомовой)" Или Не СтрокаСчетчика.Многоквартирное Тогда
				ЛистСведенийОПУ.cells(Счетчик, 7).value = СтрокаСчетчика.УникальныйНомерЗдания;
			КонецЕсли;
			ЛистСведенийОПУ.cells(Счетчик, 8).value = СтрокаСчетчика.УникальныйНомерПомещения;
			ЛистСведенийОПУ.cells(Счетчик, 10).value = СтрокаСчетчика.УникальныйНомерЛицевогоСчета;
			ЛистСведенийОПУ.cells(Счетчик, 11).value = ПолучитьПредставлениеБулеваТипа(СтрокаСчетчика.ИмеетсяВозможностьДистанционногоСнятияПоказаний, Истина);
			
			Если СтрокаСчетчика.ИмеетсяВозможностьДистанционногоСнятияПоказаний Тогда
				ЛистСведенийОПУ.cells(Счетчик, 12).value = СтрокаСчетчика.СистемаДистанционногоСнятияПоказаний;
			КонецЕсли;
			
			ЛистСведенийОПУ.cells(Счетчик, 13).value = ПолучитьПредставлениеБулеваТипа(СтрокаСчетчика.ОбъемРесурсаОпределяетсяНесколькимиПУ, Истина);
			ЛистСведенийОПУ.cells(Счетчик, 14).value = СтрокаСчетчика.МестоУстановкиТекущегоПУ;
			ЛистСведенийОПУ.cells(Счетчик, 15).value = СтрокаСчетчика.НомерВГИСЗависимогоСчетчика;
			
			ЛистСведенийОПУ.cells(Счетчик, 16).value = СтрокаСчетчика.КоммунальныйРесурс;
			ЛистСведенийОПУ.cells(Счетчик, 18).value = ПолучитьПредставлениеТарифностиСчетчиков(СтрокаСчетчика.Тарифность);
			ЛистСведенийОПУ.cells(Счетчик, 19).value = СтрокаСчетчика.ДневноеПоказание;
			
			Если СтрокаСчетчика.Тарифность = ПредопределенноеЗначение("Перечисление.КВП_ТарифностьСчетчиков.Двухтарифный") 
			 Или СтрокаСчетчика.Тарифность = ПредопределенноеЗначение("Перечисление.КВП_ТарифностьСчетчиков.Трехтарифный") Тогда
				ЛистСведенийОПУ.cells(Счетчик, 20).value = СтрокаСчетчика.НочноеПоказание;
			КонецЕсли;
			
			Если СтрокаСчетчика.Тарифность = ПредопределенноеЗначение("Перечисление.КВП_ТарифностьСчетчиков.Трехтарифный") Тогда
				ЛистСведенийОПУ.cells(Счетчик, 21).value = СтрокаСчетчика.ПиковоеПоказание;
			КонецЕсли;
			
			Если СтрокаСчетчика.ВидПУ = "Коллективный (общедомовой)" И СтрокаСчетчика.КоммунальныйРесурс = "Электрическая энергия" Тогда
				ЛистСведенийОПУ.cells(Счетчик, 22).value = СтрокаСчетчика.КоэффициентТрансформации;
			КонецЕсли;
			
			ЛистСведенийОПУ.cells(Счетчик, 23).value = Формат(СтрокаСчетчика.ДатаУстановки, "ДФ=dd.MM.yyyy");
			ЛистСведенийОПУ.cells(Счетчик, 24).value = Формат(СтрокаСчетчика.ДатаВводаВЭксплуатацию, "ДФ=dd.MM.yyyy");
			
			Если ЗначениеЗаполнено(СтрокаСчетчика.ДатаПоверки) Тогда
				ЛистСведенийОПУ.cells(Счетчик, 25).value = Формат(СтрокаСчетчика.ДатаПоверки, "ДФ=dd.MM.yyyy");
			КонецЕсли;
			ЛистСведенийОПУ.cells(Счетчик, 26).value = Формат(СтрокаСчетчика.ДатаОпломбированияЗаводом, "ДФ=dd.MM.yyyy");
			ЛистСведенийОПУ.cells(Счетчик, 27).value = СтрокаСчетчика.МежпроверочныйИнтервал;
			
			ЛистСведенийОПУ.cells(Счетчик, 28).value = ПолучитьПредставлениеБулеваТипа(СтрокаСчетчика.ИмеетсяДатчикТемпературы, Истина);
			
			Если СтрокаСчетчика.ИмеетсяДатчикТемпературы И СтрокаСчетчика.ВидПУ = "Коллективный (общедомовой)" Тогда
				ЛистСведенийОПУ.cells(Счетчик, 29).value = СтрокаСчетчика.МестоположениеДатчикаТемпературы;
			КонецЕсли;
			
			ЛистСведенийОПУ.cells(Счетчик, 30).value = ПолучитьПредставлениеБулеваТипа(СтрокаСчетчика.ИмеетсяДатчикДавления, Истина);
			
			Если СтрокаСчетчика.ИмеетсяДатчикДавления И СтрокаСчетчика.ВидПУ = "Коллективный (общедомовой)" Тогда
				ЛистСведенийОПУ.cells(Счетчик, 31).value = СтрокаСчетчика.МестоположениеДатчикаДавления;
			КонецЕсли;
			
			ЛистСведенийОПУ.cells(Счетчик, 33).value = СтрокаСчетчика.НомерВГИСЖКХ;
			
			Счетчик = Счетчик + 1;
		КонецЦикла;
		
		Счетчик = 2;
		
		ДополнительныеСтрокиСчетчиков = ТаблицаСчетчиков.НайтиСтроки(Новый Структура("ВыводитьНаТретьейСтранице", Истина));
		
		Для Каждого СтрокаСчетчика Из ДополнительныеСтрокиСчетчиков Цикл
			ДопЛистСведенийОПУ.cells(Счетчик, 1).value = СтрокаСчетчика.СсылочныйНомерПУ;
			ДопЛистСведенийОПУ.cells(Счетчик, 2).value = СтрокаСчетчика.НаименованиеЗдания;
			ДопЛистСведенийОПУ.cells(Счетчик, 3).value = СтрокаСчетчика.УникальныйНомерЛицевогоСчета;
			
			Счетчик = Счетчик + 1;
		КонецЦикла;

	Иначе
		
		ЛистПоказаний = Книга.WorkSheets(1);
		
		Счетчик = 2;
		Для Каждого СтрокаСчетчика Из ТаблицаСчетчиков Цикл
			ЛистПоказаний.cells(Счетчик, 1).value = СтрокаСчетчика.Адрес;
			ЛистПоказаний.cells(Счетчик, 2).value = Строка(СтрокаСчетчика.НомерВГИСЖКХ);
			ЛистПоказаний.cells(Счетчик, 3).value = СтрокаСчетчика.КоммунальныйРесурс;
			ЛистПоказаний.cells(Счетчик, 4).value = СтрокаСчетчика.ДневноеПоказание;
			Если СтрокаСчетчика.Тарифность > 1 Тогда
				ЛистПоказаний.cells(Счетчик, 5).value = СтрокаСчетчика.НочноеПоказание;
			КонецЕсли;
			Если СтрокаСчетчика.Тарифность > 2 Тогда
				ЛистПоказаний.cells(Счетчик, 6).value = СтрокаСчетчика.ПиковоеПоказание;
			КонецЕсли;
			ЛистПоказаний.cells(Счетчик, 7).value = Формат(СтрокаСчетчика.ДатаПоказания, "ДФ=dd.MM.yyyy");
			
			Счетчик = Счетчик + 1;
		КонецЦикла;
	КонецЕсли;
	
	// Закрываем excel файл.
	Попытка
		Эксель.ActiveWorkbook.Close(-1,);
		Эксель.Application.Quit(); 
		Эксель.Quit();
		Эксель = 0;
	Исключение
	КонецПопытки;
	
	Если ФормируемНаСервере Тогда
		ДобавитьСтрокуВТаблицуСФайлами(СформированныеФайлы, ПутьКФайлу, ИмяФайла);
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Сформирован файл " + ПутьКФайлу + "...");
	
	КоличествоФайлов = КоличествоФайлов + 1;
	
КонецПроцедуры // ВыполнитьВыгрузкуПриборовУчета()

&НаСервере
// Заполняет табличную часть "ПриборыУчета" всеми действующими счетчиками,
// по которым есть показания, в зависимости от вида обмена.
//
Процедура ПриборыУчетаДобавитьВсеСчетчикиНаСервере()
	
	ТаблицаСчетчиков = УПЖКХ_ИнтеграцияСГИСЖКХВажныеМеханизмы.ПриборыУчетаДобавитьВсеСчетчики(Объект.ПериодВыгрузки, Объект.ВидОбменаПУ);
	Объект.ПриборыУчета.Загрузить(ТаблицаСчетчиков);
	
КонецПроцедуры // ПриборыУчетаДобавитьВсеСчетчикиНаСервере()

#КонецОбласти

#Область ВыгрузкаСпособовФормированияФондаКапитальногоРемонта_и_ВременныхАдресовЗданий

&НаКлиентеНаСервереБезКонтекста
// Формирует файл со сведениями о счетах для капитального ремонта.
Процедура ВыполнитьВыгрузкуСФКР(Эксель, КоличествоФайлов, КаталогВыгрузки, МакетСФКР, ТаблицаСФКР, СформированныеФайлы, ФормируемНаСервере)
	
	ПутьКФайлу = КаталогВыгрузки + "\" + "Сведения о способе формирования фонда капитального ремонта от " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy HH.mm.ss'") + ".xlsx";
	#Если НЕ ВебКлиент Тогда
		ИмяФайла   = ?(ФормируемНаСервере, ПолучитьИмяВременногоФайла("xlsx"), ПутьКФайлу);
	#Иначе
		ИмяФайла = ПутьКФайлу;
	#КонецЕсли
	МакетСФКР.Записать(ИмяФайла);
	
	Книга = Эксель.WorkBooks.Open(ИмяФайла);
	
	Лист     = Книга.WorkSheets(1);
		
	СчетчикСтрокЗданий = 3;
	
	Для Каждого СтрокаТаблицыСФКР Из ТаблицаСФКР Цикл
		
		Лист.cells(СчетчикСтрокЗданий, 1).value  = СтрокаТаблицыСФКР.АдресДома;
		Лист.cells(СчетчикСтрокЗданий, 2).value  = СтрокаТаблицыСФКР.КодДомаПоФИАС;
		Лист.cells(СчетчикСтрокЗданий, 3).value  = СтрокаТаблицыСФКР.ТипСчета;
		Лист.cells(СчетчикСтрокЗданий, 4).value  = Строка(СтрокаТаблицыСФКР.Основание);
		Лист.cells(СчетчикСтрокЗданий, 5).value  = Формат(СтрокаТаблицыСФКР.ДатаВступленияРешенияВСилу, "ДФ=dd.MM.yyyy");
		Если СтрокаТаблицыСФКР.ТипСчета = "Специальный счет" Тогда
			Лист.cells(СчетчикСтрокЗданий, 6).value  = СтрокаТаблицыСФКР.НомерСчета;
			Лист.cells(СчетчикСтрокЗданий, 7).value  = СтрокаТаблицыСФКР.БИК;
			Лист.cells(СчетчикСтрокЗданий, 8).value  = СтрокаТаблицыСФКР.ОГРН;
			Лист.cells(СчетчикСтрокЗданий, 9).value  = СтрокаТаблицыСФКР.КПП;
			Лист.cells(СчетчикСтрокЗданий, 10).value = Строка(Формат(СтрокаТаблицыСФКР.ДатаОткрытияСчета,"ДФ=dd.MM.yy"));
		КонецЕсли;
		Если СтрокаТаблицыСФКР.Основание = ПредопределенноеЗначение("Перечисление.УПЖКХ_ОснованияРешенийОСпособеФормированияФондаКапитальногоРемонта.РешениеОбщегоСобранияСобственников") Тогда
			Лист.cells(СчетчикСтрокЗданий, 11).value  = СтрокаТаблицыСФКР.НомерПротоколаСобранияСобственников;
			Лист.cells(СчетчикСтрокЗданий, 12).value  = Строка(Формат(СтрокаТаблицыСФКР.ДатаПротоколаСобранияСобственников,"ДФ=dd.MM.yy"));
		КонецЕсли;
		
		СчетчикСтрокЗданий = СчетчикСтрокЗданий + 1;
		
	КонецЦикла;
	
	КоличествоФайлов = 1;
	
	Книга.Save();
	Книга.Close();
	
	Если ФормируемНаСервере Тогда
		ДобавитьСтрокуВТаблицуСФайлами(СформированныеФайлы, ПутьКФайлу, ИмяФайла);
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Сформирован файл " + ПутьКФайлу + "...");
	
КонецПроцедуры // ВыполнитьВыгрузкуСФКР()

&НаКлиентеНаСервереБезКонтекста
// Формирует файл со сведениями о счетах для капитального ремонта.
Процедура ВыполнитьВыгрузкуЗаявокНаДВА(Эксель, КоличествоФайлов, КаталогВыгрузки, МакетЗаявокНаДобВА, ТаблицаЗаявокНаДобВА, СформированныеФайлы, ФормируемНаСервере)
	
	ПутьКФайлу = КаталогВыгрузки + "\" + "Сведения о заявках на добавление временных адресов от " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy HH.mm.ss'") + ".xlsx";
	#Если НЕ ВебКлиент Тогда
		ИмяФайла   = ?(ФормируемНаСервере, ПолучитьИмяВременногоФайла("xlsx"), ПутьКФайлу);
	#Иначе
		ИмяФайла = ПутьКФайлу;
	#КонецЕсли
	МакетЗаявокНаДобВА.Записать(ИмяФайла);
	
	Книга = Эксель.WorkBooks.Open(ИмяФайла);
	
	Лист     = Книга.WorkSheets(1);
	
	СчетчикСтрокЗданий = 3;
	
	Для Каждого СтрокаТаблицыЗаявокНаДобВА Из ТаблицаЗаявокНаДобВА Цикл
		
		Лист.cells(СчетчикСтрокЗданий, 1).value = СтрокаТаблицыЗаявокНаДобВА.GUID;
		Лист.cells(СчетчикСтрокЗданий, 2).value = СтрокаТаблицыЗаявокНаДобВА.ОКТМО;
		Лист.cells(СчетчикСтрокЗданий, 3).value = СтрокаТаблицыЗаявокНаДобВА.Дом;
		Лист.cells(СчетчикСтрокЗданий, 4).value = СтрокаТаблицыЗаявокНаДобВА.Корпус;
		Лист.cells(СчетчикСтрокЗданий, 5).value = СтрокаТаблицыЗаявокНаДобВА.Строение;
		Лист.cells(СчетчикСтрокЗданий, 6).value = СтрокаТаблицыЗаявокНаДобВА.ПризнакСтроения;
		
		СчетчикСтрокЗданий = СчетчикСтрокЗданий + 1;
		
	КонецЦикла;
	
	КоличествоФайлов = 1;
	
	Книга.Save();
	Книга.Close();
	
	Если ФормируемНаСервере Тогда
		ДобавитьСтрокуВТаблицуСФайлами(СформированныеФайлы, ПутьКФайлу, ИмяФайла);
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Сформирован файл " + ПутьКФайлу + "...");
	
КонецПроцедуры // ВыполнитьВыгрузкуЗаявокНаДВА()

&НаСервереБезКонтекста
// Проверяет здания на заполненность полей для формирования фонда капитального ремонта.
//
// Параметры:
//  ТаблицаДанных - ТаблицаЗначений - таблица со сведениями о зданиях
//  ВсеДанныеЗаполнены - Булево - признак заполненности всех данных
// 
Процедура ОтсеятьОбъектыСНезаполненнымиДаннымиПоСФКР(ТаблицаСФКР, ВсеДанныеЗаполнены, ТаблицаСНезаполненнымиДанными, ЭтоПроверкаСведений, ВидВыгрузки = "Сведения о способах формирования фонда кап. ремонта")
	
	Для Каждого Строка Из ТаблицаСФКР Цикл
		Если ПустаяСтрока(Строка.КодДомаПоФИАС) Тогда
			ВывестиСообщениеОПроблемахВОбмене("Для здания " + Строка.АдресДома + " не указан код по ФИАС.", Строка.Здание, , ЭтоПроверкаСведений);
			ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Здание " + Строка.АдресДома, Строка.Здание, "Код здания по ФИАС");
			Строка.ДанныеНеЗаполнены = Истина;
			ВсеДанныеЗаполнены       = Ложь;
		КонецЕсли;
		
		Если ПустаяСтрока(Строка.ТипСчета) Тогда
			ВывестиСообщениеОПроблемахВОбмене("Для здания " + Строка.АдресДома + " не указан способ формирования фонда капитального ремонта.", Строка.Здание, , ЭтоПроверкаСведений);
			ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Здание " + Строка.АдресДома, Строка.Здание, "Способ формирования фонда капитального ремонта");
			Строка.ДанныеНеЗаполнены = Истина;
			ВсеДанныеЗаполнены       = Ложь;
		КонецЕсли;
		
		Если Строка.Основание = Перечисления.УПЖКХ_ОснованияРешенийОСпособеФормированияФондаКапитальногоРемонта.ПустаяСсылка() Тогда
			ВывестиСообщениеОПроблемахВОбмене("Для здания " + Строка.АдресДома + " не указано основание принятия решения о способе формирования фонда капитального ремонта.", Строка.Здание, , ЭтоПроверкаСведений);
			ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Здание " + Строка.АдресДома, Строка.Здание, "Основание принятия решения о способе формирования фонда капитального ремонта");
			Строка.ДанныеНеЗаполнены = Истина;
			ВсеДанныеЗаполнены       = Ложь;
		КонецЕсли;
		
		Если Строка.ДатаВступленияРешенияВСилу = Дата("00010101") Тогда
			ВывестиСообщениеОПроблемахВОбмене("Для здания " + Строка.АдресДома + " не указана дата принятия решения о способе формирования фонда капитального ремонта.", Строка.Здание, , ЭтоПроверкаСведений);
			ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Здание " + Строка.АдресДома, Строка.Здание, "Дата принятия решения о способе формирования фонда капитального ремонта");
			Строка.ДанныеНеЗаполнены = Истина;
			ВсеДанныеЗаполнены       = Ложь;
		КонецЕсли;
		
		Если Строка.ТипСчета = "Специальный счет" Тогда
			Если ПустаяСтрока(Строка.НомерСчета) Тогда
				ВывестиСообщениеОПроблемахВОбмене("Для здания " + Строка.АдресДома + " не указан номер счета капитального ремонта.", Строка.Здание, , ЭтоПроверкаСведений);
				ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Здание " + Строка.АдресДома, Строка.Здание, "Номер счета капитального ремонта");
				Строка.ДанныеНеЗаполнены = Истина;
				ВсеДанныеЗаполнены       = Ложь;
			КонецЕсли;
			
			Если ПустаяСтрока(Строка.БИК) Тогда
				ВывестиСообщениеОПроблемахВОбмене("Для здания " + Строка.АдресДома + " не указан БИК банка, в котором открыт счет капитального ремонта.", Строка.Здание, , ЭтоПроверкаСведений);
				ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Здание " + Строка.АдресДома, Строка.Здание, "БИК банка, в котором открыт счет капитального ремонта");
				Строка.ДанныеНеЗаполнены = Истина;
				ВсеДанныеЗаполнены       = Ложь;
			КонецЕсли;
			
			Если ПустаяСтрока(Строка.ОГРН) Тогда
				ВывестиСообщениеОПроблемахВОбмене("Для владельца расчетного счета кап.ремонта здания " + Строка.ВладелецСчетаКапРемонта + " не указан ОГРН.", Строка.ВладелецСчетаКапРемонта, , ЭтоПроверкаСведений);
				ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Владелец р/с кап.ремонта " + Строка.ВладелецСчетаКапРемонта, Строка.ВладелецСчетаКапРемонта, "ОГРН");
				Строка.ДанныеНеЗаполнены = Истина;
				ВсеДанныеЗаполнены       = Ложь;
			КонецЕсли;
			
			Если ПустаяСтрока(Строка.КПП) Тогда
				ВывестиСообщениеОПроблемахВОбмене("Для владельца расчетного счета кап.ремонта здания " + Строка.ВладелецСчетаКапРемонта + " не указан КПП.", Строка.ВладелецСчетаКапРемонта, , ЭтоПроверкаСведений);
				ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Владелец р/с кап.ремонта " + Строка.ВладелецСчетаКапРемонта, Строка.ВладелецСчетаКапРемонта, "КПП");
				Строка.ДанныеНеЗаполнены = Истина;
				ВсеДанныеЗаполнены       = Ложь;
			КонецЕсли;
			
			Если Строка.ДатаОткрытияСчета = Дата("00010101") Тогда
				ВывестиСообщениеОПроблемахВОбмене("Для здания " + Строка.АдресДома + " не указана дата открытия счета капитального ремонта.", Строка.Здание, , ЭтоПроверкаСведений);
				ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Здание " + Строка.АдресДома, Строка.Здание, "Дата открытия счета капитального ремонта");
				Строка.ДанныеНеЗаполнены = Истина;
				ВсеДанныеЗаполнены       = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если Строка.Основание = Перечисления.УПЖКХ_ОснованияРешенийОСпособеФормированияФондаКапитальногоРемонта.РешениеОбщегоСобранияСобственников Тогда
			Если ПустаяСтрока(Строка.НомерПротоколаСобранияСобственников) Тогда
				ВывестиСообщениеОПроблемахВОбмене("Для здания " + Строка.АдресДома + " не указан номер протокола собрания собственников.", Строка.Здание, , ЭтоПроверкаСведений);
				ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Здание " + Строка.АдресДома, Строка.Здание, "Номер протокола собрания собственников");
				Строка.ДанныеНеЗаполнены = Истина;
				ВсеДанныеЗаполнены       = Ложь;
			КонецЕсли;
			
			Если Строка.ДатаПротоколаСобранияСобственников = Дата("00010101") Тогда
				ВывестиСообщениеОПроблемахВОбмене("Для здания " + Строка.АдресДома + " не указана дата протокола собрания собственников.", Строка.Здание, , ЭтоПроверкаСведений);
				ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Здание " + Строка.АдресДома, Строка.Здание, "Дата протокола собрания собственников");
				Строка.ДанныеНеЗаполнены = Истина;
				ВсеДанныеЗаполнены       = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтрокиПодходящихКР = ТаблицаСФКР.НайтиСтроки(Новый Структура("ДанныеНеЗаполнены", Ложь));
	ТаблицаСФКР        = ТаблицаСФКР.Скопировать(СтрокиПодходящихКР);
	
КонецПроцедуры // ОтсеятьОбъектыСНезаполненнымиДаннымиПоСФКР()

&НаСервереБезКонтекста
// Проверяет здания на заполненность полей заявок на добавление временных адресов.
//
// Параметры:
//  ТаблицаДанных - ТаблицаЗначений - таблица со сведениями о зданиях
//  ВсеДанныеЗаполнены - Булево - признак заполненности всех данных
// 
Процедура ОтсеятьОбъектыСНезаполненнымиДаннымиПоЗаявамНаДобВА(ТаблицаЗаявокНаДобВА, ВсеДанныеЗаполнены)
	
	СтруктураОбязательныхПолей = ПолучитьСтруктуруОбязательныхПолей("ЗаявкиНаДВА");
		
	Для Каждого Строка Из ТаблицаЗаявокНаДобВА Цикл
		
		ДанныеЗаполнены         = Истина;
		ТекстОшибки             = "";
		
		МассивНезаполнныхДанных = Новый Массив;
		
		Для Каждого ОбязательноеПоле Из СтруктураОбязательныхПолей Цикл
			
			Если Не ЗначениеЗаполнено(Строка[ОбязательноеПоле.Ключ]) Тогда
				
				МассивНезаполнныхДанных.Добавить(ОбязательноеПоле.Значение);
				ДанныеЗаполнены = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(Строка.Дом) и  Не ЗначениеЗаполнено(Строка.Корпус) и Не ЗначениеЗаполнено(Строка.Строение) Тогда
			
			МассивНезаполнныхДанных.Добавить(" Обязательно должен быть заполнен один из реквизитов Дом,Корпус,Строение ");
			ДанныеЗаполнены = Ложь;
			
		КонецЕсли;
		
		Если Не ДанныеЗаполнены Тогда
			
			ТекстОшибки = "Для здания " + Строка.GUID + " заполнены не все обязательные данные. А именно:";
			
			Для Каждого Данные Из МассивНезаполнныхДанных Цикл
				
				ТекстОшибки = ТекстОшибки + Символы.ПС + Данные;
				
			КонецЦикла;
			
			Строка.ДанныеНеЗаполнены = Истина;
			ВсеДанныеЗаполнены       = Ложь;
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ТекстОшибки, Строка.Ссылка);
			
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокиПодходящихЗаявокНаДобВА   = ТаблицаЗаявокНаДобВА.НайтиСтроки(Новый Структура("ДанныеНеЗаполнены", Ложь));
	ТаблицаЗаявокНаДобВА = ТаблицаЗаявокНаДобВА.Скопировать(СтрокиПодходящихЗаявокНаДобВА);
	
КонецПроцедуры // ОтсеятьОбъектыСНезаполненнымиДаннымиПоЗаявамНаДобВА()

#КонецОбласти

#Область ПроцедурыИФункцииЗагрузкиИдентификаторовЕЛС

&НаКлиенте
// Процедура обрабатывает ответ пользователя на вопрос об очистке таблицы идентификаторов ЕЛС и помещений.
//
Процедура ОбработатьОтветПользователяОбОчисткеТаблицыИдентификаторовЕЛСиПомещений(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Если ДопПараметры.ЭтоПоискЕЛС Тогда
			ТаблицаИдентификаторов = ТаблицаИдентификаторовЛС;
		Иначе
			ТаблицаИдентификаторов = ТаблицаИдентификаторовПомещенийЗданий;
		КонецЕсли;
		ТаблицаИдентификаторов.Очистить();
		ПоискИдентификаторовЕЛСиПомещенийПродолжение(ДопПараметры.ЭтоПоискЕЛС);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьОтветПользователяОбОчисткеТаблицыИдентификаторовЕЛСиПомещений()

&НаКлиенте
// Обрабатывает ответ пользователя о записи идентификаторов ЕЛС и помещений.
//
Процедура ОбработатьОтветПользователяОЗаписиИдентификаторовЕЛСиПомещений(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаписатьИдентификаторыЕЛСиПомещенийНаСервере(ДопПараметры.ЭтоПоискЕЛС);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьОтветПользователяОЗаписиИдентификаторовЕЛСиПомещений()

&НаКлиенте
// Продолжение обработки команд "ЛицевыеСчетаПоискИдентификаторов" и "ПомещенияЗданияПоискИдентификаторов".
//
Процедура ПоискИдентификаторовЕЛСиПомещенийПродолжение(ЭтоПоискЕЛС = Ложь)
	
	#Если ВебКлиент Тогда
		ДобавитьФайлВебКлиент(ЭтоПоискЕЛС);
	#Иначе
		КаталогЗагрузкиID = ?(ЭтоПоискЕЛС, Объект.КаталогЗагрузкиIDЛС, Объект.КаталогЗагрузкиIDПомещенийЗданий);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПоискИдентификаторовЕЛСиПомещенийПродолжениеПоискаФайлов",
												  ЭтотОбъект, Новый Структура("ЭтоПоискЕЛС", ЭтоПоискЕЛС));
		НачатьПоискФайлов(ОписаниеОповещения, КаталогЗагрузкиID, "*.xlsx");
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения поиска файлов.
Процедура ПоискИдентификаторовЕЛСиПомещенийПродолжениеПоискаФайлов(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если НайденныеФайлы.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("В указанном каталоге не найдено файлов Excel.");
	Иначе
		
		МассивИмен = Новый Массив;
		
		Для Каждого ТекФайл Из НайденныеФайлы Цикл
			
			ИндексСтрокой = Формат(НайденныеФайлы.Найти(ТекФайл),"ЧГ=0");
			ИмяФайла = ТекФайл.ПолноеИмя;
			
			// Временные файлы исключаем.
			Если СтрНайти(ИмяФайла, "~$") = 0 Тогда
				МассивИмен.Добавить(ИмяФайла);
			КонецЕсли;
			
		КонецЦикла;
		
		ПоместитьФайлыНаСервер(МассивИмен, ДополнительныеПараметры.ЭтоПоискЕЛС);
		
	КонецЕсли;
	
КонецПроцедуры // ПоискИдентификаторовЕЛСиПомещенийПродолжение()

&НаКлиенте
// Помещает файлы с клиента во временное хранилище, после чего мы сможем их считать на сервере.
//
Процедура ПоместитьФайлыНаСервер(МассивИмен, ЭтоПоискЕЛС)
	
	СтруктураИменФайлов = Новый Структура;
	
	КоличествоФайлов = МассивИмен.Количество();
	Для Счетчик = 1 По КоличествоФайлов Цикл
		
		ТекФайл = МассивИмен.Получить(Счетчик - 1);
		ИндексСтрокой = Формат(Счетчик -1, "ЧГ=0");
		
		Если Счетчик + 1 > КоличествоФайлов Тогда
			ЭтоПоследнийФайл = Истина;
		Иначе
			ЭтоПоследнийФайл = Ложь;
		КонецЕсли;
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ЭтоПоследнийФайл", ЭтоПоследнийФайл);
		ДопПараметры.Вставить("ИмяФайла", "Файл" + ИндексСтрокой);
		ДопПараметры.Вставить("ЭтоПоискЕЛС", ЭтоПоискЕЛС);
		Попытка
			НачатьПомещениеФайла(Новый ОписаниеОповещения("ОбработатьПомещениеФайлаИзКаталога", ЭтаФорма, ДопПараметры),
								 ,
								 ТекФайл,
								 Ложь,
								 Новый УникальныйИдентификатор);
		Исключение
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры // ПоместитьФайлыНаСервер()

&НаКлиенте
// Записываем результат помещения файла в соответствующую переменную и при необходимости
// вызываем процедуру обработки файлов на сервере.
Процедура ОбработатьПомещениеФайлаИзКаталога(РезультатПомещения, АдресФайлаВХранилище, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если РезультатПомещения = Истина Тогда
		
		ЭтоПоследнийФайл = ДополнительныеПараметры.ЭтоПоследнийФайл;
		ИмяФайла         = ДополнительныеПараметры.ИмяФайла;
		ЭтоПоискЕЛС      = ДополнительныеПараметры.ЭтоПоискЕЛС;
		
		СтруктураИменФайлов.Вставить(ИмяФайла, АдресФайлаВХранилище);
		
		Если ЭтоПоследнийФайл Тогда
			ОбработатьФайлыЭкспортаЕЛСиПомещенийНаСервере(ЭтоПоискЕЛС);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьПомещениеФайлаИзКаталога()

&НаСервере
// Процедура считывает идентификаторы ЛС или помещений из файлов, найденных в папке.
//
Процедура ОбработатьФайлыЭкспортаЕЛСиПомещенийНаСервере(ЭтоПоискЕЛС)
	
	Если Не ТипЗнч(СтруктураИменФайлов) = Тип("Структура") Или СтруктураИменФайлов.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Возникла ошибка при получении файла(ов) на сервере.");
		Возврат;
	КонецЕсли;
	
	МассивИмен = Новый Массив;
	
	Для Каждого ТекФайл Из СтруктураИменФайлов Цикл
		
		Попытка
			ДанныеФайла = ПолучитьИзВременногоХранилища(ТекФайл.Значение);
			ИмяФайлаЭкспорта = ПолучитьИмяВременногоФайла("xlsx");
			ДанныеФайла.Записать(ИмяФайлаЭкспорта);
			
			МассивИмен.Добавить(ИмяФайлаЭкспорта);
		Исключение
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Возникла ошибка при получении файла(ов) на сервере.");
			Возврат;
		КонецПопытки;
		
	КонецЦикла;
	
	Если ЭтоПоискЕЛС Тогда
		ТаблицаФайла = РеквизитФормыВЗначение("ТаблицаИдентификаторовЛС",              Тип("ТаблицаЗначений"));
	Иначе
		ТаблицаФайла = РеквизитФормыВЗначение("ТаблицаИдентификаторовПомещенийЗданий", Тип("ТаблицаЗначений"));
	КонецЕсли;
	
	ТаблицаРезультат = УПЖКХ_ИнтеграцияСГИСЖКХВажныеМеханизмы.ВыполнитьИмпортИдентификаторовПомещенийИЕЛС(ТаблицаФайла, МассивИмен, ЭтоПоискЕЛС);
	
	Если ТаблицаРезультат = Неопределено Тогда
		ФункционалДоступен = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ЭтоПоискЕЛС Тогда
		ТаблицаИдентификаторовЛС.Загрузить(ТаблицаРезультат);
	Иначе
		ТаблицаИдентификаторовПомещенийЗданий.Загрузить(ТаблицаРезультат);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьФайлыЭкспортаЕЛСиПомещенийНаСервере()

&НаСервере
// Процедура записи идентификаторов лицевых счетов и помещений.
Процедура ЗаписатьИдентификаторыЕЛСиПомещенийНаСервере(ЭтоПоискЕЛС = Ложь)
	
	Если ЭтоПоискЕЛС Тогда
		
		ТаблицаРезультат = ТаблицаИдентификаторовЛС.Выгрузить();
		
		Для Каждого ТекСтрока Из ТаблицаРезультат Цикл
			
			// Записываем идентификаторы лицевого счета.
			Если Не ТекСтрока.ЛицевойСчет.Пустая() Тогда
				
				ЛицевойСчетОбъект = ТекСтрока.ЛицевойСчет.ПолучитьОбъект();
				Если Не ПустаяСтрока(ТекСтрока.ЕЛС) Тогда
					Если Объект.ВыгружатьЛицевыеСчетаКР Тогда
						ЛицевойСчетОбъект.ЕдиныйЛицевойСчетКР = ТекСтрока.ЕЛС;
					Иначе
						ЛицевойСчетОбъект.ЕдиныйЛицевойСчет = ТекСтрока.ЕЛС;
					КонецЕсли;
				КонецЕсли;
				Если Не ПустаяСтрока(ТекСтрока.ИдентификаторЖКУ) Тогда
					Если Объект.ВыгружатьЛицевыеСчетаКР Тогда
						ЛицевойСчетОбъект.ИдентификаторЖКУКР = ТекСтрока.ИдентификаторЖКУ;
					Иначе
						ЛицевойСчетОбъект.ИдентификаторЖКУ = ТекСтрока.ИдентификаторЖКУ;
					КонецЕсли;
				КонецЕсли;
				
				Если ЛицевойСчетОбъект.Модифицированность() Тогда
					ЛицевойСчетОбъект.ОбменДанными.Загрузка = Истина;
					КВП_ЗаписатьОбъект(ЛицевойСчетОбъект);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		// Сначала запишем идентификаторы улиц в здания.
		ТаблицаРезультат = ТаблицаИдентификаторовПомещенийЗданий.Выгрузить();
		
		ТаблицаЗданий = ТаблицаРезультат.Скопировать();
		ТаблицаЗданий.Свернуть("Здание, КодДомаПоФИАС, AOGUID");
		Для Каждого ТекСтрока Из ТаблицаЗданий Цикл
			
			Если Не ПустаяСтрока(ТекСтрока.AOGUID) Тогда
				
				ЗданиеОбъект = ТекСтрока.Здание.ПолучитьОбъект();
				ЗданиеОбъект.КодРодительскогоОбъектаПоФИАС = ТекСтрока.AOGUID;
				ЗданиеОбъект.ОбменДанными.Загрузка = Истина;
				
				КВП_ЗаписатьОбъект(ЗданиеОбъект);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого ТекСтрока Из ТаблицаРезультат Цикл
			
			// Записываем идентификатор помещения или жилого дома.
			Если ТекСтрока.Помещение.Пустая() Тогда
				// Если не заполнена ссылка на помещение - тогда уникальный номер запишем в здание (здание является жилым домом).
				ЗданиеОбъект = ТекСтрока.Здание.ПолучитьОбъект();
				ЗданиеОбъект.УникальныйНомерВГИСЖКХ = ТекСтрока.УникальныйНомер;
				ЗданиеОбъект.КадастровыйНомер       = ?(ТекСтрока.КадастровыйНомер = "нет", "", ТекСтрока.КадастровыйНомер);
				ЗданиеОбъект.ОбменДанными.Загрузка  = Истина;
				
				КВП_ЗаписатьОбъект(ЗданиеОбъект);
			Иначе
				// В остальных случаях записываем уникальный номер в помещение (неважно, помещение это или комната).
				ПомещениеОбъект = ТекСтрока.Помещение.ПолучитьОбъект();
				ПомещениеОбъект.ИдентификаторВГИСЖКХ = ТекСтрока.УникальныйНомер;
				ПомещениеОбъект.КадастровыйНомер     = ?(ТекСтрока.КадастровыйНомер = "нет", "", ТекСтрока.КадастровыйНомер);
				
				КВП_ЗаписатьОбъект(ПомещениеОбъект);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаписатьИдентификаторыЕЛСиПомещенийНаСервере()

&НаКлиентеНаСервереБезКонтекста
// Если выполнялась выгрузка л/с, запоминает выгруженные л/с в регистре сведений "Лицевые счета, выгруженные в ГИС ЖКХ".
Процедура ПриНеобходимостиСохранитьВыгруженныеДанные(Форма, ВидВыгрузки, ВидОбменаПУ, ПериодВыгрузки, ТаблицаЛицевыхСчетов)
	
	Если ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.СведенияОЛицевыхСчетах")
	 И Не ТаблицаЛицевыхСчетов.Количество() = 0 Тогда
	 
		ВыгруженныеСтроки = ТаблицаЛицевыхСчетов.НайтиСтроки(Новый Структура("ДанныеНеЗаполнены", Ложь));
		
		Если Не ВыгруженныеСтроки.Количество() = 0 Тогда
			МассивЛС = Новый Массив;
			Для Каждого ВыгруженнаяСтрока Из ВыгруженныеСтроки Цикл
				МассивЛС.Добавить(ВыгруженнаяСтрока.ЛицевойСчет);
			КонецЦикла;
			ЗапомнитьВыгруженныеЛС(МассивЛС, ПериодВыгрузки, Форма.Объект.ВыгружатьЛицевыеСчетаКР);
		КонецЕсли;
		
	ИначеЕсли ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.ПлатежныеДокументы") Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ТаблицаЛицевыхСчетовПД") Тогда
			
			ЗаписатьИнформациюОВыгрузкеПлатежныхДокументов(Форма.ТаблицаЛицевыхСчетовПД, ПериодВыгрузки);
			
		КонецЕсли;
		
	ИначеЕсли ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.ПриборыУчета")
	 И ВидОбменаПУ = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОбменаПриборамиУчетаСГИСЖКХ.ВыгрузкаСведенийПУ") Тогда
		
	 	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ТаблицаСчетчиков") Тогда
			ЗапомнитьВыгруженныеПУ(Форма.ТаблицаСчетчиков, ПериодВыгрузки);
		КонецЕсли;
	
	КонецЕсли;
	
	ТаблицаЛицевыхСчетов.Очистить();
	
КонецПроцедуры // ПриНеобходимостиСохранитьВыгруженныеДанные()

// Сохраняет файлы на стороне Веб-клиента
// Параметры:
//  Результат - Булево - Результат проверки на наличие установленног расширения работы с файлами.
// 
&НаКлиенте
Процедура ИзвлечьФайлыВебКлиент(Результат, ПараметрыВыполнения) Экспорт
	Если НЕ Результат Тогда
		Для Каждого Строка Из СформированныеФайлы Цикл
			ПолучитьФайл(Строка.ПоложениеФайла, Строка.НазваниеФайла, Истина);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	ИзвлечьФайлы();
	
КонецПроцедуры // ИзвлечьФайлыВебКлиент()


&НаКлиенте
// Сохраняет файлы на стороне Веб-клиента
// Параметры:
//  ЭтоПоискЕЛС - Булево - Флаг поиска ЕЛС.
// 
Процедура ДобавитьФайлВебКлиент(ЭтоПоискЕЛС) Экспорт
	
	// Загрузить из файловой системы без расширения работы с файлами (веб-клиент).
	Обработчик = Новый ОписаниеОповещения("ДобавитьФайлВебКлиентПослеЗагрузкиФайла", ЭтотОбъект, ЭтоПоискЕЛС);
	НачатьПомещениеФайла(Обработчик, , , , Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
// Сохраняет файлы на стороне Веб-клиента
// Параметры:
//  Помещен           - Булево - Результат помещения файла в хранилище.
//  Адрес             - Строка - Расположение нового файла.
//  ВыбранноеИмяФайла - Строка - Путь файла на диске, данные из которого будут помещены во временное хранилище
//  ЭтоПоискЕЛС       - Булево - Флаг поиска ЕЛС.
// 
Процедура ДобавитьФайлВебКлиентПослеЗагрузкиФайла(Помещен, Адрес, ВыбранноеИмяФайла, ЭтоПоискЕЛС) Экспорт
	
	Если Не Помещен Тогда
		Возврат;
	КонецЕсли;
	СтруктураИменФайлов = Новый Структура;
	СтруктураИменФайлов.Вставить("Файл", Адрес);
	ОбработатьФайлыЭкспортаЕЛСиПомещенийНаСервере(ЭтоПоискЕЛС);
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаЗагрузкаПУ

&НаСервереБезКонтекста
// Записывает в регистр сведений "Приборы учета, выгруженные в ГИС ЖКХ" приборы учета, которые были выгружены в ГИС ЖКХ.
Процедура ЗапомнитьВыгруженныеПУ(Знач ТаблицаСчетчиков, ПериодВыгрузки)
	
	НаборЗаписей = РегистрыСведений.УПЖКХ_ПриборыУчетаВыгруженныеВГИСЖКХ.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	ТаблицаЗаписей = НаборЗаписей.Выгрузить();
	
	Для Каждого СтрокаСчетчика Из ТаблицаСчетчиков Цикл
		
		Если Не СтрокаСчетчика.ДанныеНеЗаполнены Тогда
					
			ЗаписьСчетчика = ТаблицаЗаписей.Найти(СтрокаСчетчика.Счетчик, "Объект");
			
			Если ЗаписьСчетчика = Неопределено Тогда
				НоваяЗапись = ТаблицаЗаписей.Добавить();
				НоваяЗапись.ДатаВыгрузки = ПериодВыгрузки;
				НоваяЗапись.Объект       = СтрокаСчетчика.Счетчик;
			Иначе
				ЗаписьСчетчика.ДатаВыгрузки = ПериодВыгрузки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	НаборЗаписей.Загрузить(ТаблицаЗаписей);
	
	НаборЗаписей.Записать();
	
КонецПроцедуры // ЗапомнитьВыгруженныеПУ()

&НаКлиентеНаСервереБезКонтекста
// Формирует представление тарифности счетчиков.
//
Функция ПолучитьПредставлениеТарифностиСчетчиков(Тарифность)
	
	Если Тарифность = ПредопределенноеЗначение("Перечисление.КВП_ТарифностьСчетчиков.Однотарифный") Тогда
		Возврат "Однотарифный";
	ИначеЕсли Тарифность = ПредопределенноеЗначение("Перечисление.КВП_ТарифностьСчетчиков.Двухтарифный") Тогда
		Возврат "Двухтарифный";
	ИначеЕсли Тарифность = ПредопределенноеЗначение("Перечисление.КВП_ТарифностьСчетчиков.Трехтарифный") Тогда
		Возврат "Трехтарифный";
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции // ПолучитьПредставлениеТарифностиСчетчиков()

&НаСервереБезКонтекста
// В рамках выгрузки сведений о приборах учета исключает из выгрузки приборы учета,
// по которым не заполнены обязательные к выгрузке данные.
//
Процедура ОтсеятьПриборыУчетаСНезаполненнымиДанными(ТаблицаДанных, ВсеДанныеЗаполнены, ТаблицаСНезаполненнымиДанными, ЭтоПроверкаСведений, ВидВыгрузки = "Сведения о счетчиках")
	
	ТаблицаДанных.Колонки.Добавить("ДанныеНеЗаполнены", Новый ОписаниеТипов("Булево"));
	
	Для Каждого СтрокаПУ Из ТаблицаДанных Цикл
		Если ПустаяСтрока(СтрокаПУ.ЗаводскойНомер) Тогда
			СтрокаПУ.ДанныеНеЗаполнены = Истина;
			ВывестиСообщениеОПроблемахВОбмене("У прибора учета " + СтрокаПУ.НаименованиеСчетчика + " не указан заводской номер.", СтрокаПУ.Счетчик, , ЭтоПроверкаСведений);
			ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Счетчик " + СтрокаПУ.НаименованиеСчетчика, СтрокаПУ.Счетчик, "Заводской номер");
		КонецЕсли;
		
		Если ПустаяСтрока(СтрокаПУ.Марка) Тогда
			СтрокаПУ.ДанныеНеЗаполнены = Истина;
			ВывестиСообщениеОПроблемахВОбмене("У прибора учета " + СтрокаПУ.НаименованиеСчетчика + " не указана марка.", СтрокаПУ.Счетчик, , ЭтоПроверкаСведений);
			ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Счетчик " + СтрокаПУ.НаименованиеСчетчика, СтрокаПУ.Счетчик, "Марка");
		КонецЕсли;
		
		Если ПустаяСтрока(СтрокаПУ.Модель) Тогда
			СтрокаПУ.ДанныеНеЗаполнены = Истина;
			ВывестиСообщениеОПроблемахВОбмене("У прибора учета " + СтрокаПУ.НаименованиеСчетчика + " не указана модель.", СтрокаПУ.Счетчик, , ЭтоПроверкаСведений);
			ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Счетчик " + СтрокаПУ.НаименованиеСчетчика, СтрокаПУ.Счетчик, "Модель");
		КонецЕсли;
		
		Если СтрокаПУ.ИмеетсяВозможностьДистанционногоСнятияПоказаний И ПустаяСтрока(СтрокаПУ.СистемаДистанционногоСнятияПоказаний) Тогда
			СтрокаПУ.ДанныеНеЗаполнены = Истина;
			ВывестиСообщениеОПроблемахВОбмене("У прибора учета " + СтрокаПУ.НаименованиеСчетчика + " не указана система дистанционного снятия показаний.", СтрокаПУ.Счетчик, , ЭтоПроверкаСведений);
			ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Счетчик " + СтрокаПУ.НаименованиеСчетчика, СтрокаПУ.Счетчик, "Система дистанционного снятия показаний");
		КонецЕсли;
		
		Если ПустаяСтрока(СтрокаПУ.КоммунальныйРесурс) Тогда
			СтрокаПУ.ДанныеНеЗаполнены = Истина;
			ВывестиСообщениеОПроблемахВОбмене("У услуги, по которой установлен прибора учета " + СтрокаПУ.НаименованиеСчетчика + ", не указан коммунальный ресурс.", СтрокаПУ.Счетчик, , ЭтоПроверкаСведений);
			ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Счетчик " + СтрокаПУ.НаименованиеСчетчика, СтрокаПУ.Счетчик, "Коммунальный ресурс услуги");
		КонецЕсли;
		
		Если СтрокаПУ.Тарифность = Перечисления.КВП_ТарифностьСчетчиков.ПустаяСсылка() Тогда
			СтрокаПУ.ДанныеНеЗаполнены = Истина;
			ВывестиСообщениеОПроблемахВОбмене("У прибора учета " + СтрокаПУ.НаименованиеСчетчика + " не указана тарифность.", СтрокаПУ.Счетчик, , ЭтоПроверкаСведений);
			ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Счетчик " + СтрокаПУ.НаименованиеСчетчика, СтрокаПУ.Счетчик, "Тарифность");
		КонецЕсли;
		
		Если СтрокаПУ.ВидПУ = "Коллективный (общедомовой)" И СтрокаПУ.КоммунальныйРесурс = "ЭлектрическаяЭнергия" И СтрокаПУ.КоэффициентТрансформации = 0 Тогда
			СтрокаПУ.ДанныеНеЗаполнены = Истина;
			ВывестиСообщениеОПроблемахВОбмене("У прибора учета " + СтрокаПУ.НаименованиеСчетчика + " не указан коэффициент трансформации.", СтрокаПУ.Счетчик, , ЭтоПроверкаСведений);
			ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Счетчик " + СтрокаПУ.НаименованиеСчетчика, СтрокаПУ.Счетчик, "Коэффициент трансформации");
		КонецЕсли;
		
		Если СтрокаПУ.ДатаВводаВЭксплуатацию = Дата("00010101") Тогда
			СтрокаПУ.ДанныеНеЗаполнены = Истина;
			ВывестиСообщениеОПроблемахВОбмене("У прибора учета " + СтрокаПУ.НаименованиеСчетчика + " не указана дата ввода в эксплуатацию.", СтрокаПУ.Счетчик, , ЭтоПроверкаСведений);
			ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Счетчик " + СтрокаПУ.НаименованиеСчетчика, СтрокаПУ.Счетчик, "Дата ввода в эксплуатацию");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаПУ.ДатаВводаВЭксплуатацию) И СтрокаПУ.ДатаВводаВЭксплуатацию < Дата(1900,1,1) Тогда
			СтрокаПУ.ДанныеНеЗаполнены = Истина;
			ВывестиСообщениеОПроблемахВОбмене("У прибора учета " + СтрокаПУ.НаименованиеСчетчика + " неверно указана дата ввода в эксплуатацию.", СтрокаПУ.Счетчик, , ЭтоПроверкаСведений);
			ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Счетчик " + СтрокаПУ.НаименованиеСчетчика, СтрокаПУ.Счетчик, "Дата ввода в эксплуатацию", "Введены неверные данные");
		КонецЕсли;
		
		Если СтрокаПУ.ВидПУ = "Коллективный (общедомовой)" И СтрокаПУ.ДатаОпломбированияЗаводом = Дата("00010101") Тогда
			СтрокаПУ.ДанныеНеЗаполнены = Истина;
			ВывестиСообщениеОПроблемахВОбмене("У прибора учета " + СтрокаПУ.НаименованиеСчетчика + " не указана дата опломбирования заводом-изготовителем.", СтрокаПУ.Счетчик, , ЭтоПроверкаСведений);
			ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Счетчик " + СтрокаПУ.НаименованиеСчетчика, СтрокаПУ.Счетчик, "Дата опломбирования заводом-изготовителем");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаПУ.ДатаОпломбированияЗаводом) И СтрокаПУ.ДатаОпломбированияЗаводом < Дата(1900,1,1) Тогда
			СтрокаПУ.ДанныеНеЗаполнены = Истина;
			ВывестиСообщениеОПроблемахВОбмене("У прибора учета " + СтрокаПУ.НаименованиеСчетчика + " неверно указана дата опломбирования заводом-изготовителем.", СтрокаПУ.Счетчик, , ЭтоПроверкаСведений);
			ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Счетчик " + СтрокаПУ.НаименованиеСчетчика, СтрокаПУ.Счетчик, "Дата опломбирования заводом-изготовителем", "Введены неверные данные");
		КонецЕсли;
		
		Если СтрокаПУ.ВидПУ = "Коллективный (общедомовой)" И СтрокаПУ.ИмеетсяДатчикТемпературы И ПустаяСтрока(СтрокаПУ.МестоположениеДатчикаТемпературы) Тогда
			СтрокаПУ.ДанныеНеЗаполнены = Истина;
			ВывестиСообщениеОПроблемахВОбмене("У прибора учета " + СтрокаПУ.НаименованиеСчетчика + " не указана информация о местоположении датчика температуры.", СтрокаПУ.Счетчик, , ЭтоПроверкаСведений);
			ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Счетчик " + СтрокаПУ.НаименованиеСчетчика, СтрокаПУ.Счетчик, "Информация о местоположении датчика температуры");
		КонецЕсли;
		
		Если СтрокаПУ.ВидПУ = "Коллективный (общедомовой)" И СтрокаПУ.ИмеетсяДатчикДавления И ПустаяСтрока(СтрокаПУ.МестоположениеДатчикаДавления) Тогда
			СтрокаПУ.ДанныеНеЗаполнены = Истина;
			ВывестиСообщениеОПроблемахВОбмене("У прибора учета " + СтрокаПУ.НаименованиеСчетчика + " не указана информация о местоположении датчика давления.", СтрокаПУ.Счетчик, , ЭтоПроверкаСведений);
			ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Счетчик " + СтрокаПУ.НаименованиеСчетчика, СтрокаПУ.Счетчик, "Информация о местоположении датчика давления");
		КонецЕсли;
		
		Если (СтрокаПУ.ВидПУ = "Коллективный (общедомовой)" Или Не СтрокаПУ.Многоквартирное) И ПустаяСтрока(СтрокаПУ.УникальныйНомерЗдания) Тогда
			СтрокаПУ.ДанныеНеЗаполнены = Истина;
			ВывестиСообщениеОПроблемахВОбмене("У здания " + СтрокаПУ.НаименованиеЗдания + " не указан уникальный номер.", СтрокаПУ.Здание, , ЭтоПроверкаСведений);
			ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Здание " + СтрокаПУ.НаименованиеЗдания, СтрокаПУ.Здание, "Уникальный номер");
		КонецЕсли;
		
		Если (СтрокаПУ.ВидПУ = "Индивидуальный" ИЛИ СтрокаПУ.ВидПУ = "Общий (квартирный)") И ПустаяСтрока(СтрокаПУ.УникальныйНомерПомещения) Тогда
			СтрокаПУ.ДанныеНеЗаполнены = Истина;
			ВывестиСообщениеОПроблемахВОбмене("У помещения " + СтрокаПУ.НаименованиеПомещения + " не указан идентификатор в ГИС ЖКХ.", СтрокаПУ.Помещение, , ЭтоПроверкаСведений);
			ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Помещение " + СтрокаПУ.НаименованиеПомещения, СтрокаПУ.Помещение, "Идентификатор в ГИС ЖКХ");
		КонецЕсли;
		
		// В запросе поиска объектов (ПолучитьДанныеПоОбъектам()) данные выбираем таким образом, что каждому помещению обязательно соответствует хотя бы один лицевой счет.
		// При этом наименование лицевого счета - обязательный для заполнения реквизит. Поэтому проверку на заполненность номера лицевого счета не выполняем.
		
		Если СтрокаПУ.ДанныеНеЗаполнены Тогда
			ВсеДанныеЗаполнены = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокиСЗаполненнымиДанными = ТаблицаДанных.НайтиСтроки(Новый Структура("ДанныеНеЗаполнены", Ложь));
	ТаблицаДанных              = ТаблицаДанных.Скопировать(СтрокиСЗаполненнымиДанными);
	
КонецПроцедуры // ОтсеятьПриборыУчетаСНезаполненнымиДанными()

&НаСервереБезКонтекста
// Каждой строке таблицы со сведениями о счетчиках присваивает признак - на какой странице
// файла выгрузки должна быть выведена строка.
//
Процедура СкомпоноватьСведенияПоСтраницамФайлаВыгрузки(ТаблицаСчетчиков)
	
	ТаблицаСчетчиков.Колонки.Добавить("ВыводитьНаТретьейСтранице", Новый ОписаниеТипов("Булево"));
	
	ТекущийСчетчик = Неопределено;
	
	Для Каждого СтрокаСчетчика Из ТаблицаСчетчиков Цикл
		Если ТипЗнч(СтрокаСчетчика.Объект) = Тип("СправочникСсылка.КВП_ЛицевыеСчета") ИЛИ ТипЗнч(СтрокаСчетчика.Объект) = Тип("СправочникСсылка.УПЖКХ_Помещения") Тогда
			Если ТекущийСчетчик = СтрокаСчетчика.Счетчик Тогда
				СтрокаСчетчика.ВыводитьНаТретьейСтранице = Истина;
			КонецЕсли;
			
			ТекущийСчетчик = СтрокаСчетчика.Счетчик;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // СкомпоноватьСведенияПоСтраницамФайлаВыгрузки()

&НаСервере
// Заполняет табличную часть "ПриборыУчета" всеми счетчиками, которые не были ранее выгружены в ГИС ЖКХ.
//
Процедура ПриборыУчетаДобавитьВсеНеВыгруженныеВГИСНаСервере()
	
	ТаблицаСчетчиков = УПЖКХ_ИнтеграцияСГИСЖКХВажныеМеханизмы.ПриборыУчетаПолучитьВсеНеВыгруженныеВГИСЖКХ(Объект.ПериодВыгрузки);
	Объект.ПриборыУчета.Загрузить(ТаблицаСчетчиков);
	
КонецПроцедуры // ПриборыУчетаДобавитьВсеНеВыгруженныеВГИСНаСервере()

&НаКлиенте
// Обработчик команды "ПриборыУчетаПоискНомеров".
//
Процедура ПриборыУчетаПоискНомеров(Команда)
	
	Если ПустаяСтрока(Объект.КаталогЗагрузкиНомеровПУ) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран каталог поиска файлов экспорта приборов учета.");
		Возврат;
	КонецЕсли;
	
	Если ТаблицаНомеровПУВГИС.Количество() > 0 Тогда
		ТекстВопроса = "Таблица номеров приборов учета будет очищена. Продолжить?";
		ОповещениеОтвет = Новый ОписаниеОповещения("ОбработатьОтветПользователяОбОчисткеТаблицыНомеровПУ", ЭтотОбъект);
		ПоказатьВопрос(ОповещениеОтвет, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ПриборыУчетаПоискНомеровПродолжение();
	
КонецПроцедуры // ПриборыУчетаПоискНомеров()

&НаКлиенте
// Продолжение обработки команды "ПриборыУчетаПоискНомеров".
//
Процедура ПриборыУчетаПоискНомеровПродолжение()
	
	НачатьПоискФайлов(Новый ОписаниеОповещения("ПриборыУчетаПоискНомеровПродолжениеПоискаФайлов", ЭтотОбъект),
					  Объект.КаталогЗагрузкиНомеровПУ, "*.xlsx");
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения поиска файлов.
Процедура ПриборыУчетаПоискНомеровПродолжениеПоискаФайлов(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если НайденныеФайлы.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("В указанном каталоге не найдено файлов Excel.");
	Иначе
		
		МассивИмен = Новый Массив;
		
		Для Каждого ТекФайл Из НайденныеФайлы Цикл
			
			ИндексСтрокой = Формат(НайденныеФайлы.Найти(ТекФайл),"ЧГ=0");
			ИмяФайла = ТекФайл.ПолноеИмя;
			
			// Временные файлы исключаем.
			
			Если СтрНайти(ИмяФайла, "~$") = 0 Тогда
				МассивИмен.Добавить(ИмяФайла);
			КонецЕсли;
			
		КонецЦикла;
		
		ПоместитьФайлыНаСерверПУ(МассивИмен);
		
	КонецЕсли;
	
КонецПроцедуры // ПриборыУчетаПоискНомеровПродолжение()

&НаКлиенте
// Помещает файлы с клиента во временное хранилище, после чего мы сможем их считать на сервере.
//
Процедура ПоместитьФайлыНаСерверПУ(МассивИмен)
	
	СтруктураИменФайлов = Новый Структура;
	
	КоличествоФайлов = МассивИмен.Количество();
	Для Счетчик = 1 По КоличествоФайлов Цикл
		
		ТекФайл = МассивИмен.Получить(Счетчик - 1);
		ИндексСтрокой = Формат(Счетчик -1, "ЧГ=0");
		
		Если Счетчик + 1 > КоличествоФайлов Тогда
			ЭтоПоследнийФайл = Истина;
		Иначе
			ЭтоПоследнийФайл = Ложь;
		КонецЕсли;
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ЭтоПоследнийФайл", ЭтоПоследнийФайл);
		ДопПараметры.Вставить("ИмяФайла", "Файл" + ИндексСтрокой);
		Попытка
			НачатьПомещениеФайла(Новый ОписаниеОповещения("ОбработатьПомещениеФайлаИзКаталогаПУ", ЭтаФорма, ДопПараметры),
								 ,
								 ТекФайл,
								 Ложь,
								 Новый УникальныйИдентификатор);
		Исключение
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ОписаниеОшибки());
			Продолжить;
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры // ПоместитьФайлыНаСерверПУ()

&НаКлиенте
// Записываем результат помещения файла в соответствующую переменную и при необходимости
// вызываем процедуру обработки файлов на сервере.
Процедура ОбработатьПомещениеФайлаИзКаталогаПУ(РезультатПомещения, АдресФайлаВХранилище, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если РезультатПомещения = Истина Тогда
		
		ЭтоПоследнийФайл = ДополнительныеПараметры.ЭтоПоследнийФайл;
		ИмяФайла         = ДополнительныеПараметры.ИмяФайла;
		
		СтруктураИменФайлов.Вставить(ИмяФайла, АдресФайлаВХранилище);
		
		Если ЭтоПоследнийФайл Тогда
			ОбработатьФайлыЭкспортаПУНаСервере();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьПомещениеФайлаИзКаталогаПУ()

&НаКлиенте
// Процедура обрабатывает ответ пользователя на вопрос об очистке таблицы номеров ПУ.
//
Процедура ОбработатьОтветПользователяОбОчисткеТаблицыНомеровПУ(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ТаблицаНомеровПУВГИС.Очистить();
		ПриборыУчетаПоискНомеровПродолжение();
	КонецЕсли;
	
КонецПроцедуры // ОбработатьОтветПользователяОбОчисткеТаблицыНомеровПУ()

&НаСервере
// Процедура считывает идентификаторы ЛС из файлов, найденных в папке.
//
Процедура ОбработатьФайлыЭкспортаПУНаСервере()
	
	Если Не ТипЗнч(СтруктураИменФайлов) = Тип("Структура") Или СтруктураИменФайлов.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Возникла ошибка при получении файла(ов) на сервере.");
		Возврат;
	КонецЕсли;
	
	МассивИмен = Новый Массив;
	
	Для Каждого ТекФайл Из СтруктураИменФайлов Цикл
		
		Попытка
			ДанныеФайла = ПолучитьИзВременногоХранилища(ТекФайл.Значение);
			ИмяФайлаЭкспорта = ПолучитьИмяВременногоФайла("xlsx");
			ДанныеФайла.Записать(ИмяФайлаЭкспорта);
			
			МассивИмен.Добавить(ИмяФайлаЭкспорта);
		Исключение
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Возникла ошибка при получении файла(ов) на сервере.");
			Возврат;
		КонецПопытки;
		
	КонецЦикла;
	
	ТаблицаФайла = РеквизитФормыВЗначение("ТаблицаНомеровПУВГИС", Тип("ТаблицаЗначений"));
	
	ТаблицаРезультат = УПЖКХ_ИнтеграцияСГИСЖКХВажныеМеханизмы.ВыполнитьИмпортНомеровПриборовУчета(ТаблицаФайла, МассивИмен, Объект.ПериодВыгрузки);
	Если ТаблицаРезультат = Неопределено Тогда
		ФункционалДоступен = Ложь;
		Возврат;
	КонецЕсли;
	
	ТаблицаНомеровПУВГИС.Загрузить(ТаблицаРезультат);
	
КонецПроцедуры // ОбработатьФайлыЭкспортаПУНаСервере()

&НаКлиенте
// Обработчик команды "ПриборыУчетаЗаписатьНомера".
//
Процедура ПриборыУчетаЗаписатьНомера(Команда)
	
	Если ТаблицаНомеровПУВГИС.Количество() > 0 Тогда
		ТекстВопроса = "Все номера приборов учета в ГИС ЖКХ будут перезаписаны из данных таблицы. Продолжить?";
		ОповещениеОтвет = Новый ОписаниеОповещения("ОбработатьОтветПользователяОЗаписиНомеровПУ", ЭтотОбъект);
		ПоказатьВопрос(ОповещениеОтвет, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ПриборыУчетаЗаписатьНомераНаСервере();
	
КонецПроцедуры // ПриборыУчетаЗаписатьНомера()

&НаКлиенте
// Обрабатывает ответ пользователя о записи идентификаторов.
//
Процедура ОбработатьОтветПользователяОЗаписиНомеровПУ(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПриборыУчетаЗаписатьНомераНаСервере();
	КонецЕсли;
	
КонецПроцедуры // ОбработатьОтветПользователяОЗаписиНомеровПУ()

&НаСервере
// Записывает номера ПУ в соответствующий реквизит счетчиков.
Процедура ПриборыУчетаЗаписатьНомераНаСервере()
	
	Для Каждого ТекСтрока Из ТаблицаНомеровПУВГИС Цикл
		
		Если Не ТекСтрока.Счетчик.Пустая() И Не ПустаяСтрока(ТекСтрока.НомерВГИСЖКХ) Тогда
			
			СчетчикОбъект = ТекСтрока.Счетчик.ПолучитьОбъект();
			СчетчикОбъект.НомерВГИСЖКХ = ТекСтрока.НомерВГИСЖКХ;
			
			СчетчикОбъект.ОбменДанными.Загрузка = Истина;
			
			КВП_ЗаписатьОбъект(СчетчикОбъект);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПриборыУчетаЗаписатьНомераНаСервере()

#КонецОбласти

#Область ВыгрузкаОтчетовТСЖ

&НаСервереБезКонтекста
// Проверяет выбранные отчеты ТСЖ на соответствие организации, указанной в шапке.
//
// Параметры:
//  ТаблицаОтчетов - ТаблицаЗначений - таблица со сведениями о выгружаемых отчетах ТСЖ.
//
Процедура ОтсеятьОтчетыТСЖПоОрганизации(ТаблицаОтчетов, Организация, ТаблицаСНезаполненнымиДанными, ЭтоПроверкаСведений, ВидВыгрузки = "Сведения об отчетах ТСЖ")
	
	ТаблицаОтчетов.Колонки.Добавить("ОрганизацияНеСовпадает", Новый ОписаниеТипов("Булево"));
	
	Для Каждого СтрокаОтчета Из ТаблицаОтчетов Цикл
		
		Если СтрокаОтчета.Организация <> Организация Тогда
			СтрокаОтчета.ОрганизацияНеСовпадает = Истина;
			ПредставлениеОтчетаТСЖ = "" + СтрокаОтчета.ОтчетТСЖ;
			ВывестиСообщениеОПроблемахВОбмене("У отчета " + ПредставлениеОтчетаТСЖ + " организация отличается от выбранной организации. Сведения об отчете не выгружены.", , "Объект.ОтчетыТСЖ[" + Формат(СтрокаОтчета.НомерСтроки-1, "ЧН=0; ЧГ=0") + "].ОтчетТСЖ");
			ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Отчет ТСЖ " + ПредставлениеОтчетаТСЖ, СтрокаОтчета.ОтчетТСЖ, "Организация отчета ТСЖ отличается от выбранной организации", "Ошибки");
		КонецЕсли;
	КонецЦикла;
	
	СтрокиОтчетов  = ТаблицаОтчетов.НайтиСтроки(Новый Структура("ОрганизацияНеСовпадает", Ложь));
	ТаблицаОтчетов = ТаблицаОтчетов.Скопировать(СтрокиОтчетов);
	
КонецПроцедуры // ОтсеятьОтчетыТСЖПоОрганизации()

&НаСервереБезКонтекста
// Проверяет сведения о членах ТСЖ и отсекает неполностью заполненные данные.
Процедура ОтсеятьНеполностьюЗаполенныеДанныеПоЧленамТСЖИЗаполнитьПорядковыеНомера(СтуктураСведений, ТаблицаСНезаполненнымиДанными, ЭтоПроверкаСведений, ВидВыгрузки = "Сведения о членах ТСЖ")
	
	ТаблицаЧленовТСЖ     = СтуктураСведений.ТаблицаЧленовТСЖ;
	ТаблицаСобственности = СтуктураСведений.ТаблицаСобственности;
	
	ТаблицаЧленовТСЖ.Колонки.Добавить("ДанныеНеЗаполнены",     Новый ОписаниеТипов("Булево"));
	ТаблицаЧленовТСЖ.Колонки.Добавить("ПорядковыйНомер",       Новый ОписаниеТипов("Число"));
	ТаблицаСобственности.Колонки.Добавить("ДанныеНеЗаполнены", Новый ОписаниеТипов("Булево"));
	ТаблицаСобственности.Колонки.Добавить("ПорядковыйНомер",   Новый ОписаниеТипов("Число"));
	
	ТаблицаСобственности.Индексы.Добавить("ЧленТСЖ");
	
	ПорядковыйНомер = 1;
	Для Каждого СтрокаЧленаТСЖ Из ТаблицаЧленовТСЖ Цикл
		ДанныеНеЗаполнены = Ложь;
		
		Если СтрокаЧленаТСЖ.ЭтоЮрЛицо Тогда
			Если ПустаяСтрока(СтрокаЧленаТСЖ.ОГРН) Тогда
				ВывестиСообщениеОПроблемахВОбмене("У члена ТСЖ " + СтрокаЧленаТСЖ.НаименованиеЧленаТСЖ + " не указан ОГРН.", СтрокаЧленаТСЖ.ЧленТСЖ, , ЭтоПроверкаСведений);
				ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Член ТСЖ " + СтрокаЧленаТСЖ.НаименованиеЧленаТСЖ, СтрокаЧленаТСЖ.ЧленТСЖ, "ОГРН");
				ДанныеНеЗаполнены = Истина;
			КонецЕсли;
		Иначе
			Если ПустаяСтрока(СтрокаЧленаТСЖ.Имя) Тогда
				ВывестиСообщениеОПроблемахВОбмене("У члена ТСЖ " + СтрокаЧленаТСЖ.НаименованиеЧленаТСЖ + " не указано имя.", СтрокаЧленаТСЖ.ЧленТСЖ, , ЭтоПроверкаСведений);
				ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Член ТСЖ " + СтрокаЧленаТСЖ.НаименованиеЧленаТСЖ, СтрокаЧленаТСЖ.ЧленТСЖ, "Имя члена ТСЖ");
				ДанныеНеЗаполнены = Истина;
			КонецЕсли;
			
			Если ПустаяСтрока(СтрокаЧленаТСЖ.Фамилия) Тогда
				ВывестиСообщениеОПроблемахВОбмене("У члена ТСЖ " + СтрокаЧленаТСЖ.НаименованиеЧленаТСЖ + " не указана фамилия.", СтрокаЧленаТСЖ.ЧленТСЖ, , ЭтоПроверкаСведений);
				ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Член ТСЖ " + СтрокаЧленаТСЖ.НаименованиеЧленаТСЖ, СтрокаЧленаТСЖ.ЧленТСЖ, "Фамилия члена ТСЖ");
				ДанныеНеЗаполнены = Истина;
			КонецЕсли;
			
			Если ПустаяСтрока(СтрокаЧленаТСЖ.СНИЛС) И (СтрокаЧленаТСЖ.ВидДокументаФизЛица = Справочники.ВидыДокументовФизическихЛиц.ПустаяСсылка() Или ПустаяСтрока(СтрокаЧленаТСЖ.НомерДокументаФизЛица)
			 Или ПустаяСтрока(СтрокаЧленаТСЖ.СерияДокументаФизЛица) Или СтрокаЧленаТСЖ.ДатаДокументаФизЛица = Дата(1, 1, 1)) Тогда
				ВывестиСообщениеОПроблемахВОбмене("У члена ТСЖ " + СтрокаЧленаТСЖ.НаименованиеЧленаТСЖ + " не указан ни СНИЛС, ни сведения об удостоверяющем личность документе.", СтрокаЧленаТСЖ.ЧленТСЖ, , ЭтоПроверкаСведений);
				ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Член ТСЖ " + СтрокаЧленаТСЖ.НаименованиеЧленаТСЖ, СтрокаЧленаТСЖ.ЧленТСЖ, "СНИЛС или сведения об удостоверяющем личность документе");
				ДанныеНеЗаполнены = Истина;
			КонецЕсли;
		КонецЕсли;
		
		СтрокиСобственности = ТаблицаСобственности.НайтиСтроки(Новый Структура("ЧленТСЖ", СтрокаЧленаТСЖ.ЧленТСЖ));
		
		Если СтрокиСобственности.Количество() = 0 Тогда
			ВывестиСообщениеОПроблемахВОбмене("У члена ТСЖ " + СтрокаЧленаТСЖ.НаименованиеЧленаТСЖ + " не указаны сведения о собственности.", СтрокаЧленаТСЖ.ЧленТСЖ, , ЭтоПроверкаСведений);
			ДанныеНеЗаполнены = Истина;
		Иначе
			Для Каждого СтрокаСобственности Из СтрокиСобственности Цикл
				Если ПустаяСтрока(СтрокаСобственности.КодЗданияПоФИАС) Тогда
					ВывестиСообщениеОПроблемахВОбмене("В здании " + СтрокаСобственности.НаименованиеЗдания + ", в котором находится помещение члена ТСЖ "
													  + СтрокаЧленаТСЖ.НаименованиеЧленаТСЖ + " не указан код по ФИАС.", СтрокаСобственности.Здание, , ЭтоПроверкаСведений);
					ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Здание " + СтрокаСобственности.НаименованиеЗдания, СтрокаСобственности.Здание, "Код здания по ФИАС");
					ДанныеНеЗаполнены = Истина;
				КонецЕсли;
				
				Если СтрокаСобственности.ЭтоМКД Тогда
					Если СтрокаСобственности.ДоляСобственностиЧислитель = 0 Или СтрокаСобственности.ДоляСобственностиЗнаменатель = 0 Тогда
						ВывестиСообщениеОПроблемахВОбмене("У члена ТСЖ " + СтрокаЧленаТСЖ.НаименованиеЧленаТСЖ + " не указана доля собственности.", СтрокаЧленаТСЖ.ЧленТСЖ, , ЭтоПроверкаСведений);
						ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Член ТСЖ " + СтрокаЧленаТСЖ.НаименованиеЧленаТСЖ, СтрокаЧленаТСЖ.ЧленТСЖ, "Доля собственности");
						ДанныеНеЗаполнены = Истина;
					КонецЕсли;
					
					Если СтрокаСобственности.ПлощадьПомещенийВЗдании = 0 Тогда
						ВывестиСообщениеОПроблемахВОбмене("В здании " + СтрокаСобственности.НаименованиеЗдания + ", в котором находится помещение члена ТСЖ "
														  + СтрокаЧленаТСЖ.НаименованиеЧленаТСЖ + " не указана площадь жилых и нежилых помещений.", СтрокаСобственности.Здание, , ЭтоПроверкаСведений);
						ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Здание " + СтрокаСобственности.НаименованиеЗдания, СтрокаСобственности.Здание, "Площадь жилых и нежилых помещений");
						ДанныеНеЗаполнены = Истина;
					КонецЕсли;
					
					Если СтрокаСобственности.ПлощадьПомещения = 0 Тогда
						ВывестиСообщениеОПроблемахВОбмене("У помещения " + СтрокаСобственности.НомерПомещения + ", которое принадлежит члену ТСЖ " 
														  + СтрокаЧленаТСЖ.НаименованиеЧленаТСЖ + " не указана общая площадь.", СтрокаСобственности.Помещение, , ЭтоПроверкаСведений);
						ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Помещение " + СтрокаСобственности.НомерПомещения, СтрокаСобственности.Помещение, "Общая площадь помещения");
						ДанныеНеЗаполнены = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ДанныеНеЗаполнены Тогда
			Для Каждого СтрокаСобственности Из СтрокиСобственности Цикл
				СтрокаСобственности.ДанныеНеЗаполнены = Истина;
			КонецЦикла;
			
			СтрокаЧленаТСЖ.ДанныеНеЗаполнены = Истина;
		Иначе
			Для Каждого СтрокаСобственности Из СтрокиСобственности Цикл
				СтрокаСобственности.ПорядковыйНомер = ПорядковыйНомер;
			КонецЦикла;
			
			СтрокаЧленаТСЖ.ПорядковыйНомер = ПорядковыйНомер;
			
			ПорядковыйНомер = ПорядковыйНомер + 1;
		КонецЕсли;
	КонецЦикла;
	
	СтрокиЧленовТСЖ  = ТаблицаЧленовТСЖ.НайтиСтроки(Новый Структура("ДанныеНеЗаполнены", Ложь));
	СтуктураСведений.ТаблицаЧленовТСЖ = ТаблицаЧленовТСЖ.Скопировать(СтрокиЧленовТСЖ);
	
	СтрокиСобственности  = ТаблицаСобственности.НайтиСтроки(Новый Структура("ДанныеНеЗаполнены", Ложь));
	СтуктураСведений.ТаблицаСобственности = ТаблицаСобственности.Скопировать(СтрокиСобственности);
	
КонецПроцедуры // ОтсеятьНеполностьюЗаполенныеДанныеПоЧленамТСЖИЗаполнитьПорядковыеНомера()

&НаСервереБезКонтекста
// Проверяет сведения по оплатам и отсекает те, которые не могут быть выгружены в ГИС ЖКХ в силу незаполненности
// обязательных данных.
Процедура ОтсеятьНеПолностьюЗаполенныеДанныеПоОплатам(ТаблицаОплат, ТаблицаСНезаполненнымиДанными, ЭтоПроверкаСведений, ВидВыгрузки = "Сведения об оплатах")
	
	ТаблицаОплат.Колонки.Добавить("ДанныеНеЗаполнены", Новый ОписаниеТипов("Булево"));
	
	Для Каждого СтрокаОплаты Из ТаблицаОплат Цикл
		
		Если ПустаяСтрока(СтрокаОплаты.ИдентификаторПД) И ПустаяСтрока(СтрокаОплаты.ИдентификаторЖКУ) Тогда
			ВывестиСообщениеОПроблемахВОбмене("Для лицевого счета " + СтрокаОплаты.НаименованиеЛицевогоСчета + " не указан идентификатор ЖКУ" + ?(СтрокаОплаты.ЭтоОплатаПоКапРемонту, " КР", "")
											  + ", и нет сведений об идентификаторе платежного документа" + ?(СтрокаОплаты.ЭтоОплатаПоКапРемонту, " по кап. ремонту", "")
											  + " за " + Формат(СтрокаОплаты.МесяцНачисления, "ДФ='MMMM yyyy'") + ". Оплата за этот период не выгружена.", СтрокаОплаты.ЛицевойСчет);
			ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидВыгрузки, "Лицевой счет " + СтрокаОплаты.НаименованиеЛицевогоСчета, СтрокаОплаты.ЛицевойСчет, 
														 "Идентификатор ЖКУ или сведения об идентификаторе платежного документа" + ?(СтрокаОплаты.ЭтоОплатаПоКапРемонту, " по кап. ремонту", "")
														 + " за " + Формат(СтрокаОплаты.МесяцНачисления, "ДФ='MMMM yyyy'"));
			СтрокаОплаты.ДанныеНеЗаполнены = Истина;
		КонецЕсли;
	КонецЦикла;
	
	СтрокиСЗаполненнымиДанными = ТаблицаОплат.НайтиСтроки(Новый Структура("ДанныеНеЗаполнены", Ложь));
	ТаблицаОплат               = ТаблицаОплат.Скопировать(СтрокиСЗаполненнымиДанными);
	
КонецПроцедуры // ОтсеятьНеПолностьюЗаполенныеДанныеПоОплатам()

&НаКлиентеНаСервереБезКонтекста
// Формирует файл со сведениями об отчетах ТСЖ.
//
// Параметры:
//  ТаблицаОтчетовТСЖ - ТаблицаЗначений - таблица со сведениями об отчетах ТСЖ
//  КаталогВыгрузки - Строка - каталог выгрузки
//  Эксель - COMОбъект - внешний объект, соответствующий MS Ecxel.
//
Процедура ВыполнитьВыгрузкуОтчетовТСЖ(Эксель, КоличествоФайлов, КаталогВыгрузки, МакетОтчетовТСЖ, ТаблицаОтчетовТСЖ, СформированныеФайлы, ФормируемНаСервере);
	
	ПутьКФайлу = КаталогВыгрузки + "\" + "Сведения об отчетах товариществ, кооперативов от " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy HH.mm.ss'") + ".xlsx";
	#Если НЕ ВебКлиент Тогда
	ИмяФайла   = ?(ФормируемНаСервере, ПолучитьИмяВременногоФайла("xlsx"), ПутьКФайлу);
	#Иначе
	ИмяФайла = ПутьКФайлу;
	#КонецЕсли
	МакетОтчетовТСЖ.Записать(ИмяФайла);
	
	Книга = Эксель.WorkBooks.Open(ИмяФайла);
	
	ЛистОбщаяИнформация     = Книга.WorkSheets(1);
	ЛистДокументыОтчетности = Книга.WorkSheets(2);
	
	Счетчик = 4;
	
	Для Каждого СтрокаОтчетаТСЖ Из ТаблицаОтчетовТСЖ Цикл
		ЛистОбщаяИнформация.cells(Счетчик, 1).value  = СтрокаОтчетаТСЖ.НачалоПериода;
		ЛистОбщаяИнформация.cells(Счетчик, 2).value  = СтрокаОтчетаТСЖ.КонецПериода;
		ЛистОбщаяИнформация.cells(Счетчик, 3).value  = СтрокаОтчетаТСЖ.НомерОтчета;
		ЛистОбщаяИнформация.cells(Счетчик, 4).value  = СтрокаОтчетаТСЖ.ДатаОтчета;
		ЛистОбщаяИнформация.cells(Счетчик, 13).value = СтрокаОтчетаТСЖ.СуммаДоходов;
		ЛистОбщаяИнформация.cells(Счетчик, 14).value = СтрокаОтчетаТСЖ.СуммаДоходов;
		ЛистОбщаяИнформация.cells(Счетчик, 25).value = СтрокаОтчетаТСЖ.СуммаРасходов;
		ЛистОбщаяИнформация.cells(Счетчик, 26).value = СтрокаОтчетаТСЖ.СуммаРасходов;
		
		ЛистДокументыОтчетности.cells(Счетчик - 2, 1).value = "" + Формат(СтрокаОтчетаТСЖ.НачалоПериода, "ДФ=""дд.ММ.гг""") + " - " + Формат(СтрокаОтчетаТСЖ.КонецПериода, "ДФ=""дд.ММ.гг""");
		ЛистДокументыОтчетности.cells(Счетчик - 2, 2).value = "Смета доходов и расходов";
		ЛистДокументыОтчетности.cells(Счетчик - 2, 3).value = СтрокаОтчетаТСЖ.НомерОтчета;
		ЛистДокументыОтчетности.cells(Счетчик - 2, 4).value = СтрокаОтчетаТСЖ.ДатаОтчета;
		
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	Книга.Save();
	Книга.Close();
	
	Если ФормируемНаСервере Тогда
		ДобавитьСтрокуВТаблицуСФайлами(СформированныеФайлы, ПутьКФайлу, ИмяФайла);
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Сформирован файл " + ПутьКФайлу + "...");
	
	КоличествоФайлов = КоличествоФайлов + 1;
	
КонецПроцедуры // ВыполнитьВыгрузкуОтчетовТСЖ()

&НаКлиентеНаСервереБезКонтекста
// Формирует файл со сведениями о членах ТСЖ.
Процедура ВыполнитьВыгрузкуЧленовТСЖ(Эксель, КоличествоФайлов, КаталогВыгрузки, МакетЧленовТСЖ, Форма, СформированныеФайлы, ФормируемНаСервере)
	
	ПутьКФайлу = КаталогВыгрузки + "\" + "Сведения о членах ТСЖ, кооперативов от " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy HH.mm.ss'") + ".xlsx";
	#Если НЕ ВебКлиент Тогда
	ИмяФайла   = ?(ФормируемНаСервере, ПолучитьИмяВременногоФайла("xlsx"), ПутьКФайлу);
	#Иначе
	ИмяФайла = ПутьКФайлу;
	#КонецЕсли
	МакетЧленовТСЖ.Записать(ИмяФайла);
	
	Книга = Эксель.WorkBooks.Open(ИмяФайла);
	
	ЛистЧленыТСЖ      = Книга.WorkSheets(1);
	ЛистСобственность = Книга.WorkSheets(2);
	
	ТаблицаЧленовТСЖ     = Форма.ТаблицаЧленовТСЖ;
	ТаблицаСобственности = Форма.ТаблицаСобственности;
	
	СчетчикЧленовТСЖ     = 3;
	СчетчикСобственности = 4;
	
	Для Каждого СтрокаЧленаТСЖ Из ТаблицаЧленовТСЖ Цикл
		ЛистЧленыТСЖ.cells(СчетчикЧленовТСЖ, 1).value = СтрокаЧленаТСЖ.ПорядковыйНомер;
		ЛистЧленыТСЖ.cells(СчетчикЧленовТСЖ, 2).value = ?(СтрокаЧленаТСЖ.ЭтоЮрЛицо, "Юридическое лицо", "Физическое лицо");
		
		Если СтрокаЧленаТСЖ.ЭтоЮрЛицо Тогда
			ЛистЧленыТСЖ.cells(СчетчикЧленовТСЖ, 11).value = СтрокаЧленаТСЖ.ОГРН;
		Иначе
			ЛистЧленыТСЖ.cells(СчетчикЧленовТСЖ, 3).value  = СтрокаЧленаТСЖ.Имя;
			ЛистЧленыТСЖ.cells(СчетчикЧленовТСЖ, 4).value  = СтрокаЧленаТСЖ.Фамилия;
			ЛистЧленыТСЖ.cells(СчетчикЧленовТСЖ, 5).value  = СтрокаЧленаТСЖ.Отчество;
			ЛистЧленыТСЖ.cells(СчетчикЧленовТСЖ, 6).value  = СтрокаЧленаТСЖ.СНИЛС;
			ЛистЧленыТСЖ.cells(СчетчикЧленовТСЖ, 7).value  = ПолучитьВидДокументаФизЛица(СтрокаЧленаТСЖ.ВидДокументаФизЛица);
			ЛистЧленыТСЖ.cells(СчетчикЧленовТСЖ, 8).value  = СтрокаЧленаТСЖ.НомерДокументаФизЛица;
			ЛистЧленыТСЖ.cells(СчетчикЧленовТСЖ, 9).value  = СтрокаЧленаТСЖ.СерияДокументаФизЛица;
			Если Не СтрокаЧленаТСЖ.ДатаДокументаФизЛица = Дата(1, 1, 1) Тогда
				ЛистЧленыТСЖ.cells(СчетчикЧленовТСЖ, 10).value = Формат(СтрокаЧленаТСЖ.ДатаДокументаФизЛица, "ДФ=dd.MM.yyyy");
			КонецЕсли;
		КонецЕсли;
		
		Если Не СтрокаЧленаТСЖ.ДатаПринятия = Дата(1, 1, 1) Тогда
			ЛистЧленыТСЖ.cells(СчетчикЧленовТСЖ, 12).value = Формат(СтрокаЧленаТСЖ.ДатаПринятия, "ДФ=dd.MM.yyyy");
		КонецЕсли;
		
		Если СтрокаЧленаТСЖ.Роль = ПредопределенноеЗначение("Перечисление.УПЖКХ_РолиЧленовТСЖ.ВСоставеПравленияТСЖ") Тогда
			ЛистЧленыТСЖ.cells(СчетчикЧленовТСЖ, 13).value = "Избран в состав правления товарищества, кооператива";
			
			Если СтрокаЧленаТСЖ.ЯвляетсяПредседателем Тогда
				ЛистЧленыТСЖ.cells(СчетчикЧленовТСЖ, 16).value = Формат(СтрокаЧленаТСЖ.ДатаНачалаДействия, "ДФ=dd.MM.yyyy");
				ЛистЧленыТСЖ.cells(СчетчикЧленовТСЖ, 17).value = Формат(СтрокаЧленаТСЖ.ДатаОкончанияДействия, "ДФ=dd.MM.yyyy");
			КонецЕсли;
			
		ИначеЕсли СтрокаЧленаТСЖ.Роль = ПредопределенноеЗначение("Перечисление.УПЖКХ_РолиЧленовТСЖ.ВСоставеРевизионнойКомиссии") Тогда
			ЛистЧленыТСЖ.cells(СчетчикЧленовТСЖ, 13).value = ?(СтрокаЧленаТСЖ.ЯвляетсяЧленомТСЖ, "Избран в состав ревизионной комиссии и является членом товарищества, кооператива", 
															  "Избран в состав ревизионной комиссии и не является членом товарищества, кооператива");
			
			Если СтрокаЧленаТСЖ.ЯвляетсяПредседателем Тогда
				ЛистЧленыТСЖ.cells(СчетчикЧленовТСЖ, 18).value = Формат(СтрокаЧленаТСЖ.ДатаНачалаДействия, "ДФ=dd.MM.yyyy");
				ЛистЧленыТСЖ.cells(СчетчикЧленовТСЖ, 19).value = Формат(СтрокаЧленаТСЖ.ДатаОкончанияДействия, "ДФ=dd.MM.yyyy");
			КонецЕсли;
			
		Иначе
			ЛистЧленыТСЖ.cells(СчетчикЧленовТСЖ, 13).value = "Не включен в состав правления/ревизионной комиссии товарищества, кооператива";
		КонецЕсли;
		
		Если СтрокаЧленаТСЖ.Роль = ПредопределенноеЗначение("Перечисление.УПЖКХ_РолиЧленовТСЖ.ВСоставеПравленияТСЖ")
		 Или СтрокаЧленаТСЖ.Роль = ПредопределенноеЗначение("Перечисление.УПЖКХ_РолиЧленовТСЖ.ВСоставеРевизионнойКомиссии") Тогда
			ЛистЧленыТСЖ.cells(СчетчикЧленовТСЖ, 14).value = Формат(СтрокаЧленаТСЖ.ДатаНачалаДействия, "ДФ=dd.MM.yyyy");
			ЛистЧленыТСЖ.cells(СчетчикЧленовТСЖ, 15).value = Формат(СтрокаЧленаТСЖ.ДатаОкончанияДействия, "ДФ=dd.MM.yyyy");
		КонецЕсли;
		
		СчетчикЧленовТСЖ = СчетчикЧленовТСЖ + 1;
	КонецЦикла;
	
	Для Каждого СтрокаСобственности Из ТаблицаСобственности Цикл
		ЛистСобственность.cells(СчетчикСобственности, 1).value = СтрокаСобственности.ПорядковыйНомер;
		ЛистСобственность.cells(СчетчикСобственности, 2).value = СтрокаСобственности.КодЗданияПоФИАС;
		ЛистСобственность.cells(СчетчикСобственности, 3).value = СтрокаСобственности.НомерПомещения;
		ЛистСобственность.cells(СчетчикСобственности, 4).value = СтрокаСобственности.НомерДокумента;
		ЛистСобственность.cells(СчетчикСобственности, 5).value = Формат(СтрокаСобственности.ДатаДокумента, "ДФ=dd.MM.yyyy");
		Если СтрокаСобственности.ЭтоМКД Тогда
			ЛистСобственность.cells(СчетчикСобственности, 6).value = СтрокаСобственности.РазмерДолиВОбщемИмуществеЧислитель;
			ЛистСобственность.cells(СчетчикСобственности, 7).value = СтрокаСобственности.РазмерДолиВОбщемИмуществеЗнаменатель;
		КонецЕсли;
		
		СчетчикСобственности = СчетчикСобственности + 1;
	КонецЦикла;
	
	Книга.Save();
	Книга.Close();
	
	Если ФормируемНаСервере Тогда
		ДобавитьСтрокуВТаблицуСФайлами(СформированныеФайлы, ПутьКФайлу, ИмяФайла);
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Сформирован файл " + ПутьКФайлу + "...");
	
	КоличествоФайлов = КоличествоФайлов + 1;
	
КонецПроцедуры // ВыполнитьВыгрузкуЧленовТСЖ()

&НаКлиентеНаСервереБезКонтекста
// Формируем файл со сведениями об оплатах.
Процедура ВыполнитьВыгрузкуСведенияОбОплатах(Эксель, КоличествоФайлов, КаталогВыгрузки, МакетОплат, Форма, СтруктураИменТаблицФормы, СформированныеФайлы, ФормируемНаСервере)
	
	Если СтруктураИменТаблицФормы.Свойство("ТаблицаОплат") Тогда
		ТаблицаОплат = Форма["ТаблицаОплат"];
	КонецЕсли;
	
	Если ТаблицаОплат.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Нет сведений, пригодных для выгрузки.");
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = КаталогВыгрузки + "\" + "Сведения об оплатах от " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy HH.mm.ss'") + ".xlsx";
	#Если НЕ ВебКлиент Тогда
	ИмяФайла   = ?(ФормируемНаСервере, ПолучитьИмяВременногоФайла("xlsx"), ПутьКФайлу);
	#Иначе
	ИмяФайла = ПутьКФайлу;
	#КонецЕсли
	МакетОплат.Записать(ИмяФайла);
	
	Книга = Эксель.WorkBooks.Open(ИмяФайла);
	
	ЛистОплат = Книга.WorkSheets(1);
	
	СчетчикСтрокОплат = 2;
	
	Для Каждого ТекущаяОплата Из ТаблицаОплат Цикл
		
		ЛистОплат.cells(СчетчикСтрокОплат, 1).value = СчетчикСтрокОплат - 1;
		ЛистОплат.cells(СчетчикСтрокОплат, 2).value = ТекущаяОплата.СуммаОплаты;
		ЛистОплат.cells(СчетчикСтрокОплат, 3).value = Формат(ТекущаяОплата.ДатаОплаты, "ДФ=""dd.MM.yyyy""");
		ЛистОплат.cells(СчетчикСтрокОплат, 4).value = Формат(ТекущаяОплата.МесяцНачисления, "ДФ='MM.yyyy'");
		ЛистОплат.cells(СчетчикСтрокОплат, 5).value = ТекущаяОплата.ИдентификаторПД;
		ЛистОплат.cells(СчетчикСтрокОплат, 6).value = ТекущаяОплата.ИдентификаторЖКУ;
		
		СчетчикСтрокОплат = СчетчикСтрокОплат + 1;
		
	КонецЦикла;
	
	Книга.Save();
	Книга.Close();
	
	Если ФормируемНаСервере Тогда
		ДобавитьСтрокуВТаблицуСФайлами(СформированныеФайлы, ПутьКФайлу, ИмяФайла);
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Сформирован файл " + ПутьКФайлу + "...");
	
	КоличествоФайлов = КоличествоФайлов + 1;
	
КонецПроцедуры // ВыполнитьВыгрузкуСведенияОбОплатах()

#КонецОбласти

&НаКлиенте
// Записывает актуальные сведения о месяцах.
Процедура ОбновитьСписокМесяцевФактовРаботИУслуг()
	
	Элементы.МесяцВыгрузкиФактовРаботИУслуг.СписокВыбора.Очистить();
	
	СписокПериодовПеречняРаботУслуг = ПолучитьСписокПериодовПеречняРаботУслуг();
	
	Для Каждого ПериодПеречня Из СписокПериодовПеречняРаботУслуг Цикл
		Элементы.МесяцВыгрузкиФактовРаботИУслуг.СписокВыбора.Добавить(ПериодПеречня.Значение, ПериодПеречня.Представление);
	КонецЦикла;
	
КонецПроцедуры // ОбновитьСписокМесяцевФактовРаботИУслуг()

&НаСервере
// Функция получает список периодов из перечня работ/услуг.
// Возвращает список значений, содержащий месяцы.
// 
Функция ПолучитьСписокПериодовПеречняРаботУслуг()
	
	СписокПериодовПеречняРаботУслуг = Новый СписокЗначений;
	
	ТекущийМесяц   = Объект.ПереченьРаботИУслуг.НачалоПериода;
	ПоследнийМесяц = Объект.ПереченьРаботИУслуг.ОкончаниеПериода;
	
	Пока ТекущийМесяц <= ПоследнийМесяц Цикл
		СписокПериодовПеречняРаботУслуг.Добавить(ТекущийМесяц, Формат(ТекущийМесяц, "ДФ=""ММММ гггг"""));
		ТекущийМесяц = ДобавитьМесяц(ТекущийМесяц, 1);
	КонецЦикла;
	
	Возврат СписокПериодовПеречняРаботУслуг;
	
КонецФункции // ПолучитьСписокПериодовПеречняРаботУслуг()

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
// Выводит сообщение о проблемах в процессе обмена. Например, если не заполнены обязательные данные.
// Если выполняем только проверку сведений, то сообщения пользователю не выводим: вся информация будет в отчете.
Процедура ВывестиСообщениеОПроблемахВОбмене(ТекстСообщения, СсылкаНаОбъект = Неопределено, Поле = "", ЭтоПроверкаДанных = Ложь)
	
	// Временная заглушка. Пока сообщения не выводим - всю информацию отображаем в отчете о незаполненных данных.
	// Необходимо убрать заглушку, если потребуется вернуть вывод сообщений.
	Возврат;
	
	Если Не ЭтоПроверкаДанных Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ТекстСообщения, СсылкаНаОбъект, Поле);
	КонецЕсли;
	
КонецПроцедуры // ВывестиСообщениеОПроблемахВОбмене()

&НаСервереБезКонтекста
// Добавляет в таблицу ТаблицаСНезаполненнымиДанными сведения о незаполненных данных, которые будут выведены в отчет.
//
// Параметры:
//  ТаблицаСНезаполненнымиДанными - таблица формы, которая хранит сведения для отчета о незаполненных данных
//  ВидОбмена - строковое представление вида текущего обмена (напр., "Выгрузка зданий" или "Выгрузка лицевых счетов")
//  ПредставлениеОбъекта - строковое представление проблемного объекта (напр., "Лицевой счет 001")
//  СсылкаНаОбъект - ссылка на проблемный объект
//  ПредставлениеПроблемы - строковое представление проблемы с учетом типа ошибки
//                          (напр., если тип ошибки "Незаполненные данные", 
//                          то представление проблемы может быть "Код здания по ФИАС"; в этом случае в отчете будет выведено:
//                          "Незаполненные данные: Код здания по ФИАС")
//  ТипОшибки - строковое представление типа ошибки. Необходимо для логической группировки ошибок в отчете
//
Процедура ДобавитьСведенияОНезаполненныхДанныхВТаблицу(ТаблицаСНезаполненнымиДанными, ВидОбмена, ПредставлениеОбъекта, СсылкаНаОбъект, ПредставлениеПроблемы, ТипОшибки =  "Незаполненные данные")
	
	СтрокаСНезаполненнымиДанными = ТаблицаСНезаполненнымиДанными.Добавить();
	СтрокаСНезаполненнымиДанными.ВидОбмена      = ВидОбмена;
	СтрокаСНезаполненнымиДанными.ОбъектСтрока   = ПредставлениеОбъекта;
	СтрокаСНезаполненнымиДанными.ОбъектСсылка   = СсылкаНаОбъект;
	СтрокаСНезаполненнымиДанными.ТекстСообщения = ПредставлениеПроблемы;
	СтрокаСНезаполненнымиДанными.ТипОшибки      = ТипОшибки;
	
КонецПроцедуры // ДобавитьСведенияОНезаполненныхДанныхВТаблицу()

&НаКлиенте
// Открывает форму подбора лицевых счетов.
Процедура ОткрытьОбщуюФормуПодбораЛицевыхСчетов() Экспорт
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Организация", Объект.Организация);
	ОткрытьФорму("ОбщаяФорма.УПЖКХ_ПодборОбъектов", ПараметрыОткрытия, ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОткрытьОбщуюФормуПодбораЛицевыхСчетов()

&НаКлиенте
// Проверяет доступность функционала интеграции с ГИС ЖКХ.
//
Процедура ПроверитьДоступностьФункционалаИнтеграцииСГИСЖКХ()
	
	// Проверка доступности функционала.
	Если Не УПЖКХ_ИнтеграцияСГИСЖКХВажныеМеханизмы.ФункционалИнтеграцииСГИСЖКХДоступен(РезультатПроверкиПодпискиИТСОтраслевой) Тогда
		ПодключитьОбработчикОжидания("ПоказатьПредупреждениеДоступностиФункционалаИнтеграцииСГИСЖКХ", 0.6, Истина);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьДоступностьФункционалаИнтеграцииСГИСЖКХ()

&НаКлиенте
// Процедура выводит предупреждение о недоступности функционала интеграции с ГИС ЖКХ.
//
Процедура ПоказатьПредупреждениеДоступностиФункционалаИнтеграцииСГИСЖКХ()
	
	Если КВП_ПрочиеПроцедурыИФункции.ЭтоБазоваяВерсияКонфигурации() Тогда
		Если РезультатПроверкиПодпискиИТСОтраслевой = Неопределено Тогда
			// Если ответ от сервера не получен, то скорее всего
			// нет соединения с интернетом и его необходимо восстановить.
			ПоказатьПредупреждение(, "Функционал обмена данными с ГИС ЖКХ недоступен! Проверьте соединение с интернетом.");
		Иначе
			// Сначала показываем предупреждение, потом открываем форму настроек поддержки.
			ОписаниеОповещения = Новый ОписаниеОповещения("ОткрытьНастройкиПоддержкиПользователейБазовыхВерсий", ЭтотОбъект);
			ПоказатьПредупреждение(ОписаниеОповещения, "Функционал обмена данными с ГИС ЖКХ недоступен!");
		КонецЕсли;
	Иначе
		// Выгрузка для ПРОФ версий может быть недоступна только в одном случае - если проблемы с ключем.
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не обнаружен ключ защиты!");
	КонецЕсли;
	
КонецПроцедуры // ПоказатьПредупреждениеДоступностиФункционалаИнтеграцииСГИСЖКХ()

&НаКлиенте
// Процедура открывает настройки поддержки пользователей базовых версий.
//
Процедура ОткрытьНастройкиПоддержкиПользователейБазовыхВерсий(Результат) Экспорт
	
	ОткрытьФорму("Обработка.УПЖКХ_ПоддержкаПользователейБазовыхВерсий.Форма", Новый Структура("РезультатПроверки", РезультатПроверкиПодпискиИТСОтраслевой));
	
КонецПроцедуры // ОткрытьНастройкиПоддержкиПользователейБазовыхВерсий()

&НаКлиентеНаСервереБезКонтекста
// После формирования файлов очищает таблицы формы, чтобы минимизировать трафик между клиентом и сервером.
Процедура ОчиститьТаблицыФормы(ДополнительныеСоглашенияДУ, ДополнительныеУслугиДУ, КоммунальныеУслугиДУ, ТаблицаДУ, ТаблицаЖД, ТаблицаЖилыхПомещений, ТаблицаКодовУслуг,
							   ТаблицаКомнатЖД, ТаблицаКомнатМКД, ТаблицаЛицевыхСчетов, ТаблицаМКД, ТаблицаНежилыхПомещений, ТаблицаПодъездов, ТаблицаСФКР, ТаблицаЗаявокНаДобВА,
							   ТаблицаСостоянияРасчетовРСОПериоды, ТаблицаСостоянияРасчетовРСОДоговоры)
	
	ДополнительныеСоглашенияДУ.Очистить();
	ДополнительныеУслугиДУ.Очистить();
	КоммунальныеУслугиДУ.Очистить();
	ТаблицаДУ.Очистить();
	ТаблицаЖД.Очистить();
	ТаблицаЖилыхПомещений.Очистить();
	ТаблицаКодовУслуг.Очистить();
	ТаблицаКомнатЖД.Очистить();
	ТаблицаКомнатМКД.Очистить();
	ТаблицаМКД.Очистить();
	ТаблицаНежилыхПомещений.Очистить();
	ТаблицаПодъездов.Очистить();
	ТаблицаСФКР.Очистить();
	ТаблицаЗаявокНаДобВА.Очистить();
	ТаблицаСостоянияРасчетовРСОПериоды.Очистить();
	ТаблицаСостоянияРасчетовРСОДоговоры.Очистить();
	
	// ТаблицаЛицевыхСчетов.Очистить(); (Не очищаем, т.к. надо на сервере выполнить процедуру ЗапомнитьВыгруженныеЛС())
	
КонецПроцедуры // ОчиститьТаблицыФормы()

&НаКлиенте
// Формирует файлы на клиенте. Т.е. в случае, если формирование на сервере невозможно.
Процедура СформироватьФайлыНаКлиенте(КоличествоФайлов, МакетМКД, МакетЖД, МакетДУ, МакетЛС, МакетПД, МакетСФКР, МакетЗаявокНаДобВА, МакетПУ, 
									 МакетРасчетыРСО, МакетДПОИ, МакетОтчетовТСЖ, МакетЧленовТСЖ, МакетОплат, ЭтоВебКлиент = Ложь)
	
	СформироватьФайлы(КоличествоФайлов, Объект.ВидВыгрузки, ВыгружатьСведенияОЗданиях, ВыгружатьДоговорыУправления,ВыгружатьСпособыФормированияФондаКР, ВыгружатьЗаявкиНаДобавлениеВременныхАдресов, 
					  Объект.КаталогВыгрузки, МакетЗаявокНаДобВА, МакетСФКР, МакетМКД, МакетЖД, МакетДУ, МакетЛС, МакетПУ, МакетРасчетыРСО, МакетДПОИ, МакетОтчетовТСЖ, МакетЧленовТСЖ, МакетОплат, 
					  ДополнительныеСоглашенияДУ, ДополнительныеУслугиДУ, КоммунальныеУслугиДУ, ТаблицаДУ, ТаблицаЖД, ТаблицаИнформацииОЖД, ТаблицаЖилыхПомещений, ТаблицаИнформацииОЖилыхПомещениях, ТаблицаКодовУслуг, ТаблицаБлоковЖД, ТаблицаКомнатЖД, 
					  ТаблицаКомнатМКД, ТаблицаЛицевыхСчетов, ТаблицаМКД, ТаблицаИнформацииОМКД, ТаблицаНежилыхПомещений, ТаблицаИнформацииОНежилыхПомещениях, ТаблицаПодъездов, КоличествоПартийМКД, КоличествоПартийЖД, СформированныеФайлы, ЭтотОбъект, ТипУО, 
					  СтруктураИменТаблицФормы, ТаблицаЗаявокНаДобВА, ТаблицаСФКР, ТаблицаСостоянияРасчетовРСОПериоды, ТаблицаСостоянияРасчетовРСОДоговоры, ТаблицаОтчетовТСЖ, Ложь, ЭтоВебКлиент);
	
КонецПроцедуры // СформироватьФайлыНаКлиенте()

&НаКлиенте
// Проверяет необходимость формирования файлов на клиенте (в случае, если формирование на сервере невозможно в силу
// отсутствия MS Excel или наличия Linux).
Функция НеобходимоФормироватьФайлыНаКлиенте(Отказ)
	
	Если МожноФормироватьФайлыНаСервере() Тогда
		Возврат Ложь;
	ИначеЕсли МожноФормироватьФайлыНаКлиенте() Тогда
		Возврат Истина;
	Иначе
		Отказ = Истина;
		
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // НеобходимоФормироватьФайлыНаКлиенте()

&НаСервереБезКонтекста
// Проверяет возможность формирования файлов на сервере.
Функция МожноФормироватьФайлыНаСервере()
	
	Возврат ВыполнитьПроверкуФормированияФайлов();
	
КонецФункции // МожноФормироватьФайлыНаСервере()

&НаКлиенте
// Проверяет возможность формирования файлов на клиенте.
Функция МожноФормироватьФайлыНаКлиенте()
	
	Возврат ВыполнитьПроверкуФормированияФайлов();
	
КонецФункции // МожноФормироватьФайлыНаКлиенте()

&НаКлиентеНаСервереБезКонтекста
// Выполняет проверку возможности формирования файлов.
Функция ВыполнитьПроверкуФормированияФайлов()
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
		Возврат Ложь;
	Иначе
		Попытка
			Эксель = Новый COMОбъект("Excel.Application");
			Возврат Истина;
		Исключение
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
КонецФункции // ВыполнитьПроверкуФормированияФайлов()

&НаСервереБезКонтекста
// Записывает в регистр сведений "Платежные документы, выгруженные в ГИС ЖКХ" сведения о выгруженных платежных документах.
Процедура ЗаписатьИнформациюОВыгрузкеПлатежныхДокументов(Знач ТаблицаЛС, ПериодВыгрузки)
	
	Для Каждого СтрокаЛС Из ТаблицаЛС Цикл
		
		НаборЗаписей = РегистрыСведений.УПЖКХ_ПлатежныеДокументыВыгруженныеВГИС.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЛицевойСчет.Установить(СтрокаЛС.ЛицевойСчет);
		НаборЗаписей.Отбор.ТипКвитанции.Установить(СтрокаЛС.ТипКвитанции);
		НаборЗаписей.Отбор.Период.Установить(НачалоМесяца(ПериодВыгрузки));
		
		НаборЗаписей.Прочитать();
		
		НаборЗаписей.Очистить();
		
		НоваяЗапись              = НаборЗаписей.Добавить();
		НоваяЗапись.Период       = НачалоМесяца(ПериодВыгрузки);
		НоваяЗапись.ЛицевойСчет  = СтрокаЛС.ЛицевойСчет;
		НоваяЗапись.ТипКвитанции = СтрокаЛС.ТипКвитанции;
		НоваяЗапись.НомерПД      = СтрокаЛС.НомерПД;
		
		КВП_ЗаписатьОбъект(НаборЗаписей, Истина);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаписатьИнформациюОВыгрузкеПлатежныхДокументов()

&НаКлиенте
// Проверяет результаты подключения расширения работы с файлами при открытии формы.
Процедура ПодключитьРасширениеРаботыСФайламиПриОткрытииЗавершение(РасширениеПодключено, ДопПараметры) Экспорт
	
	РасширениеРаботыСФайламиПодключено = РасширениеПодключено;
	
КонецПроцедуры // ПодключитьРасширениеРаботыСФайламиПриОткрытииЗавершение()

&НаКлиенте
// Извлекает файлы из временного хранилища при их формировании на сервере.
Процедура ИзвлечьФайлы()
	
	МассивОписаний = Новый Массив;
	
	Для Каждого Строка Из СформированныеФайлы Цикл
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(Строка.ПоложениеФайла);
		ДвоичныеДанные.Записать(Строка.НазваниеФайла);
	КонецЦикла;
	
КонецПроцедуры // ИзвлечьФайлы()

&НаСервере
// Сохраняет текущие настройки пользователя.
Процедура СохранитьНастройки()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПериодВыгрузки",                            Объект.ПериодВыгрузки);
	СтруктураПараметров.Вставить("КаталогВыгрузки",                           Объект.КаталогВыгрузки);
	СтруктураПараметров.Вставить("ВидВыгрузки",                               Объект.ВидВыгрузки);
	СтруктураПараметров.Вставить("ВидОбменаПУ",                               Объект.ВидОбменаПУ);
	СтруктураПараметров.Вставить("ВидОбменаРаботамиИУслугами",                Объект.ВидОбменаРаботамиИУслугами);
	СтруктураПараметров.Вставить("ВыгружатьСведенияОЗданиях",                 ВыгружатьСведенияОЗданиях);
	СтруктураПараметров.Вставить("ВыгружатьДоговорыУправления",               ВыгружатьДоговорыУправления);
	СтруктураПараметров.Вставить("Организация",                               Объект.Организация);
	СтруктураПараметров.Вставить("ВидОбменаТСЖ",                              Объект.ВидОбменаТСЖ);
	СтруктураПараметров.Вставить("ОтображатьВсеДоступныеВидыОбмена",          Объект.ОтображатьВсеДоступныеВидыОбмена);
	СтруктураПараметров.Вставить("НеВыгружатьСведенияОКомнатахДляЖилыхДомов", Объект.НеВыгружатьСведенияОКомнатахДляЖилыхДомов);
	СтруктураПараметров.Вставить("НастройкаСбораДанныхДляПД",                 Объект.НастройкаСбораДанныхДляПД);
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("УПЖКХ_ОбменДаннымиСГИСЖКХ", "ПараметрыВыгрузки", СтруктураПараметров);
	
КонецПроцедуры // СохранитьНастройки()

&НаСервере
// Восстанавливает сохраненные ранее настройки пользователя.
Процедура ВосстановитьНастройки()
	
	СтруктураПараметров = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("УПЖКХ_ОбменДаннымиСГИСЖКХ", "ПараметрыВыгрузки");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		СтруктураПараметров.Свойство("ПериодВыгрузки",                            Объект.ПериодВыгрузки);
		СтруктураПараметров.Свойство("КаталогВыгрузки",                           Объект.КаталогВыгрузки);
		СтруктураПараметров.Свойство("ВыгружатьСведенияОЗданиях",                 ВыгружатьСведенияОЗданиях);
		СтруктураПараметров.Свойство("ВыгружатьДоговорыУправления",               ВыгружатьДоговорыУправления);
		СтруктураПараметров.Свойство("ВидВыгрузки",                               Объект.ВидВыгрузки);
		СтруктураПараметров.Свойство("ВидОбменаПУ",                               Объект.ВидОбменаПУ);
		СтруктураПараметров.Свойство("ВидОбменаРаботамиИУслугами",                Объект.ВидОбменаРаботамиИУслугами);
		СтруктураПараметров.Свойство("Организация",                               Объект.Организация);
		СтруктураПараметров.Свойство("ОтображатьВсеДоступныеВидыОбмена",          Объект.ОтображатьВсеДоступныеВидыОбмена);
		СтруктураПараметров.Свойство("НеВыгружатьСведенияОКомнатахДляЖилыхДомов", Объект.НеВыгружатьСведенияОКомнатахДляЖилыхДомов);
		СтруктураПараметров.Свойство("НастройкаСбораДанныхДляПД",                 Объект.НастройкаСбораДанныхДляПД);
		Если НЕ Объект.НастройкаСбораДанныхДляПД.Пустая() Тогда
			СпособПечатиКвитанцииКапРемонт = ПолучитьСпособПечатиКвитанцииКапРемонт();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьНастройки()

&НаКлиентеНаСервереБезКонтекста
// Устанавливает надпись - пояснение к типу организации.
Процедура УстановитьПояснениеКТипуОрганизации(Форма)
	
	ПояснениеТипОрганизации = Форма.Элементы.ПояснениеТипОрганизации;
	Организация             = Форма.Объект.Организация;
	
	Если Организация.Пустая() Тогда
		ПояснениеТипОрганизации.Заголовок = "";
		
		Возврат;
	КонецЕсли;
	
	Форма.ТипУО = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Организация, "УПЖКХ_ТипОрганизации");
	
	Если Форма.ТипУО = ПредопределенноеЗначение("Перечисление.УПЖКХ_ТипыОрганизаций.ПустаяСсылка") Тогда
		ПояснениеТипОрганизации.Заголовок   = "Укажите тип текущей организации.";
		ПояснениеТипОрганизации.Гиперссылка = Истина;
	Иначе
		ПояснениеТипОрганизации.Заголовок   = "(" + Форма.ТипУО + ")";
		ПояснениеТипОрганизации.Гиперссылка = Ложь;
	КонецЕсли;
	
КонецПроцедуры // УстановитьПояснениеКТипуОрганизации()

&НаСервере
// Заполняет таблицу со сведениями об актуальности шаблонов обмена с ГИС ЖКХ.
Процедура ЗаполнитьСведенияОбАктуальностиШаблонов()
	
	ТаблицаАктуальностиШаблонов.Очистить();
	
	ПолучитьТаблицуСведенийОбОбменах();
	
	ЗапуститьФоновоеЗаданиеДляСбораСведенийОбАктуальностиШаблонов();
	
КонецПроцедуры // ЗаполнитьСведенияОбАктуальностиШаблонов()

&НаСервере
// Инициирует фоновое задание, которое подгатавливает сведения об актуальности обменов.
Процедура ЗапуститьФоновоеЗаданиеДляСбораСведенийОбАктуальностиШаблонов()
	
	АдресСведенияОбАктуальностиОбменов = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	МассивПараметров = Новый Массив;
	МассивПараметров.Добавить(АдресСведенияОбАктуальностиОбменов);
	
	ФоновоеЗадание = ФоновыеЗадания.Выполнить("УПЖКХ_ИнтеграцияСГИСЖКХВажныеМеханизмы.ПолучитьСведенияОбАктуальностиОбменовГИСЖКХ", МассивПараметров);
	ИдентификаторФоновогоЗадания = ФоновоеЗадание.УникальныйИдентификатор;
	
КонецПроцедуры // ЗапуститьФоновоеЗаданиеДляСбораСведенийОбАктуальностиШаблонов()

&НаСервере
// Читает из макета "СведенияОбОбменах" таблицу со сведениями об обменах.
Процедура ПолучитьТаблицуСведенийОбОбменах()
	
	Макет = Обработки.УПЖКХ_ОбменДаннымиСГИСЖКХ.ПолучитьМакет("СведенияОбОбменах");
	
	ОбластьТаблицы = Макет.ПолучитьОбласть("СведенияОбОбменах");
	
	Для НомерСтроки = 1 По ОбластьТаблицы.ВысотаТаблицы Цикл
		
 		НоваяСтрока = СведенияОбОбменах.Добавить();
		НоваяСтрока.НазваниеОбмена             = ОбластьТаблицы.Область(НомерСтроки, 1, НомерСтроки, 1).Текст;
		НоваяСтрока.ВерсияОбмена               = ОбластьТаблицы.Область(НомерСтроки, 2, НомерСтроки, 2).Текст;
		НоваяСтрока.НазваниеОбменаНаВебСервисе = ОбластьТаблицы.Область(НомерСтроки, 3, НомерСтроки, 3).Текст;
		НоваяСтрока.ВидОбмена                  = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ." + ОбластьТаблицы.Область(НомерСтроки, 4, НомерСтроки, 4).Текст);
	КонецЦикла;
	
КонецПроцедуры // ПолучитьТаблицуСведенийОбОбменах()

&НаКлиенте
// Контролирует ход выполнения фонового задания, которое подготавливает сведения об актуальности обменов.
Процедура ПроверитьРезультатСбораСведенийОбАктуальностиОбменов()
	
	Если ФоновоеЗаданиеВыполнено(ИдентификаторФоновогоЗадания) Тогда
		ЗаписатьСведенияОбАктуальностиОбменов();
	Иначе
		ПодключитьОбработчикОжидания("ПроверитьРезультатСбораСведенийОбАктуальностиОбменов", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьРезультатСбораСведенийОбАктуальностиОбменов()

&НаСервере
// Записывает сведения об актуальности обменов в таблицу формы.
Процедура ЗаписатьСведенияОбАктуальностиОбменов();
	
	// Если фоновое задание выполнено с ошибками по каким-либо причинам.
	Если ПустаяСтрока(АдресСведенияОбАктуальностиОбменов) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураСведений = ПолучитьИзВременногоХранилища(АдресСведенияОбАктуальностиОбменов);
	
	Если Не ТипЗнч(СтруктураСведений) = Тип("Структура") Или СтруктураСведений.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяВерсияЯвляетсяАктуальной = Истина;
	Если СтруктураСведений.Свойство("АктуальнаяВерсияПП") Тогда
		АктуальнаяВерсияПП = СтруктураСведений.АктуальнаяВерсияПП;
		ПараметрыИБ        = УПЖКХ_ОбновлениеИнформационнойБазыВызовСервера.ПолучитьПараметрыИБ();
		ТекущаяВерсия      = ПараметрыИБ.КВП_НомерВерсииПодсистемыКВП;
		
		ТекущаяВерсияЯвляетсяАктуальной = (АктуальнаяВерсияПП = ТекущаяВерсия);
		
		СтруктураСведений.Удалить("АктуальнаяВерсияПП");
		
		Если СтруктураСведений.Свойство("ВерсияППЯвляетсяНеофициальной") Тогда
			АктуальнаяВерсияППЯвляетсяНеофициальной = СтруктураСведений.ВерсияППЯвляетсяНеофициальной;
			СтруктураСведений.Удалить("ВерсияППЯвляетсяНеофициальной");
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	Для Каждого СведенияОШаблоне Из СтруктураСведений Цикл
		// В текущей реализации веб-сервиса сведения о шаблоне передаются всегда в структуре, которая содержит 4 обязательных элемента:
		// ВерсияВПП - версия обмена в актуальной версии ПП
		// ВерсияВХранилище - версия в хранилище (на случай, если поместили доработки, но еще не выпустили)
		// ВерсияВГИС - текущая версия обмена на стороне ГИС
		// АктуальностьОбмена - актуальность обмена в ГИС
		// Ключ структуры - название шаблона
		Если ТипЗнч(СведенияОШаблоне.Значение) = Тип("Структура") И СведенияОШаблоне.Значение.Свойство("ВерсияВПП") И СведенияОШаблоне.Значение.Свойство("ВерсияВХранилище")
		 И СведенияОШаблоне.Значение.Свойство("ВерсияВГИС") И СведенияОШаблоне.Значение.Свойство("АктуальностьОбмена") Тогда
		 
		 	// Обмены, которые у нас вообще не реализованы, не анализируем.
			Если ПустаяСтрока(СведенияОШаблоне.Значение.ВерсияВХранилище) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокиСведений = СведенияОбОбменах.НайтиСтроки(Новый Структура("НазваниеОбменаНаВебСервисе", СведенияОШаблоне.Ключ));
			Если СтрокиСведений.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаСведений = СтрокиСведений.Получить(0);
			
			НоваяСтрока = ТаблицаАктуальностиШаблонов.Добавить();
			НоваяСтрока.Шаблон                          = СтрокаСведений.НазваниеОбмена;
			НоваяСтрока.ВерсияВАктуальномПП             = СведенияОШаблоне.Значение.ВерсияВПП;
			НоваяСтрока.ВерсияВХранилище                = СведенияОШаблоне.Значение.ВерсияВХранилище;
			НоваяСтрока.ВерсияВГИС                      = СведенияОШаблоне.Значение.ВерсияВГИС;
			НоваяСтрока.АктуальностьВАктуальнойВерсииПП = СведенияОШаблоне.Значение.АктуальностьОбмена;
			НоваяСтрока.ШаблонТолькоДляРСО              = ?(Найти(СведенияОШаблоне.Ключ, "_РСО") = 0, Ложь, Истина);
			НоваяСтрока.ВерсияВТекущемПП                = СтрокаСведений.ВерсияОбмена;
			НоваяСтрока.ВидОбмена                       = СтрокаСведений.ВидОбмена;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПредупреждающуюНадписьОбАктуальностиФорматов(Объект.ВидВыгрузки, ТаблицаАктуальностиШаблонов, Элементы.ПредупреждениеОНеактуальностиОбменов, Элементы.ПояснениеКПредупреждениюОНеактуальностиОбменов,
														   ТекущаяВерсияЯвляетсяАктуальной, АктуальнаяВерсияПП, АктуальнаяВерсияППЯвляетсяНеофициальной, ТипУО = ПредопределенноеЗначение("Перечисление.УПЖКХ_ТипыОрганизаций.РСО"));
	
КонецПроцедуры // ЗаписатьСведенияОбАктуальностиОбменов()

&НаСервереБезКонтекста
// Проверяет: выполнено ли фоновое задание.
Функция ФоновоеЗаданиеВыполнено(ИдентификаторЗадания)
	
	Попытка
		Возврат УПЖКХ_ТиповыеМетодыСервер.ЗаданиеВыполнено(ИдентификаторЗадания);
	Исключение
		Возврат Истина;
	КонецПопытки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Устанавливает виды обмена, доступные к выбору для текущей организации.
Процедура УстановитьДоступныеВидыОбмена(Форма)
	
	Объект = Форма.Объект;
	
	ТипТекущейОрганизации = Форма.ТипУО;
	ТипТекущейОрганизации = ?(ТипТекущейОрганизации = ПредопределенноеЗначение("Перечисление.УПЖКХ_ТипыОрганизаций.ПустаяСсылка") Или Объект.ОтображатьВсеДоступныеВидыОбмена,
							 ПредопределенноеЗначение("Перечисление.УПЖКХ_ТипыОрганизаций.Иное"), 
							 ТипТекущейОрганизации);
	
	СтрокиВидовОбмена = Форма.ТаблицаДоступныхВидовОбмена.НайтиСтроки(Новый Структура("ТипОрганизации", ТипТекущейОрганизации));
	
	СписокДоступныхВидов = Форма.Элементы.ВидВыгрузки.СписокВыбора;
	СписокДоступныхВидов.Очистить();
	
	ТекущийВидВыгрузкиСодержитсяВНовомСпискеДоступныхВидов = Ложь;
	
	Для Каждого СтрокаВидаОбмена Из СтрокиВидовОбмена Цикл
		
		Если Объект.ВидВыгрузки = СтрокаВидаОбмена.ВидОбмена Тогда
			ТекущийВидВыгрузкиСодержитсяВНовомСпискеДоступныхВидов = Истина;
		КонецЕсли;
		
		СписокДоступныхВидов.Добавить(СтрокаВидаОбмена.ВидОбмена);
	КонецЦикла;
	
	// Нужно добавить проверку на наличие текущего значения из поля "Вид обмена" в списке выбора.
	// Если установленного значения нет в списке, то в поле "Вид обмена" устанавливаем первое доступное значение из списка.
	
	Если НЕ ТекущийВидВыгрузкиСодержитсяВНовомСпискеДоступныхВидов Тогда
		Объект.ВидВыгрузки = СписокДоступныхВидов[0].Значение;
	КонецЕсли;
	
КонецПроцедуры // УстановитьДоступныеВидыОбмена()

&НаКлиентеНаСервереБезКонтекста
// Процедура управления видмостью элементов формы.
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// Если база серверная и многопоточность не используется, показываем гиперссылку.
	Если УПЖКХ_МногопоточнаяОбработкаДанных.ПоказыватьСсылкиНаСтраницуНастроекМногопоточности()
	  И (Объект.ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.СведенияОЛицевыхСчетах")
	 ИЛИ Объект.ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.ПлатежныеДокументы")) Тогда
		
		Если УПЖКХ_МногопоточнаяОбработкаДанных.ПроверитьВключенаЛиМногопоточнаяОбработкаДанных() Тогда
			Элементы.ГиперссылкаНаСтраницуНастройкуМногопоточности.Заголовок = "Для данного вида обмена используется многопоточная обработка данных. Нажмите, чтобы перейти к настройке многопоточности";
		Иначе
			Элементы.ГиперссылкаНаСтраницуНастройкуМногопоточности.Заголовок = "Данный вид обмена может работать быстрее при использовании многопоточной обработки данных. Нажмите, чтобы перейти к настройке многопоточности";
		КонецЕсли;
		
		Элементы.ГиперссылкаНаСтраницуНастройкуМногопоточности.Видимость = Истина;
		
	Иначе
		Элементы.ГиперссылкаНаСтраницуНастройкуМногопоточности.Видимость = Ложь
	КонецЕсли;
	
	Если Объект.ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.СведенияОЗданиях") Тогда
		
		Элементы.ГруппаВидыВыгрузок.ТекущаяСтраница = Элементы.ГруппаВыгрузкаЗданий;
		Элементы.ГруппаВидыПериодов.ТекущаяСтраница = Элементы.ГруппаПериодДата;
		
		Если Элементы.ГруппаЗданияВидыОбмена.ТекущаяСтраница = Элементы.ГруппаЗданияВыгрузка Тогда
			Элементы.ПериодВыгрузки.Заголовок = "Дата выгрузки";
		Иначе
			Элементы.ПериодВыгрузки.Заголовок = "Дата загрузки";
		КонецЕсли;
		
		Если Форма.ТипУО = ПредопределенноеЗначение("Перечисление.УПЖКХ_ТипыОрганизаций.РСО") Тогда
			Элементы.ВыгружатьСведенияОЗданиях.Видимость           = Ложь;
			Элементы.ВыгружатьДоговораУправления.Видимость         = Ложь;
			Элементы.ВыгружатьСпособыФормированияФондаКР.Видимость = Ложь;
		Иначе
			Элементы.ВыгружатьСведенияОЗданиях.Видимость           = Истина;
			Элементы.ВыгружатьДоговораУправления.Видимость         = Истина;
			Элементы.ВыгружатьСпособыФормированияФондаКР.Видимость = Истина;
		КонецЕсли;
		
	ИначеЕсли Объект.ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.СведенияОЛицевыхСчетах") Тогда
		
		Элементы.ГруппаВидыВыгрузок.ТекущаяСтраница = Элементы.ГруппаВыгрузкаЛицевыхСчетов;
		Элементы.ГруппаВидыПериодов.ТекущаяСтраница = Элементы.ГруппаПериодДата;
		
		Если Элементы.ГруппаЛСВидыОбмена.ТекущаяСтраница = Элементы.ГруппаЛСВыгрузка Тогда
			Элементы.ПериодВыгрузки.Заголовок = "Дата выгрузки";
		ИначеЕсли Элементы.ГруппаЛСВидыОбмена.ТекущаяСтраница = Элементы.ГруппаЛСЗагрузкаИдентификаторов Тогда
			Элементы.ПериодВыгрузки.Заголовок = "Дата загрузки";
		Иначе
			Элементы.ПериодВыгрузки.Заголовок = "Дата отчета";
		КонецЕсли;
		
	ИначеЕсли Объект.ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.ПлатежныеДокументы") Тогда
		
		Элементы.ГруппаВидыВыгрузок.ТекущаяСтраница = Элементы.ГруппаВыгрузкаПлатежныхДокументов;
		Элементы.ГруппаВидыПериодов.ТекущаяСтраница = Элементы.ГруппаПериодМесяц;
		
		Если Элементы.ГруппаВидыОбменаПлатежнымиДокументами.ТекущаяСтраница = Элементы.ГруппаВыгрузкаПД
		 ИЛИ Элементы.ГруппаВидыОбменаПлатежнымиДокументами.ТекущаяСтраница = Элементы.ГруппаОтзывПД Тогда
			Элементы.МесяцСтрокой.Заголовок = "Месяц выгрузки";
		Иначе
			Элементы.МесяцСтрокой.Заголовок = "Месяц загрузки";
		КонецЕсли;
		
	ИначеЕсли Объект.ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.ПриборыУчета") Тогда
		
		Элементы.ГруппаВидыВыгрузок.ТекущаяСтраница = Элементы.ГруппаВыгрузкаПриборовУчета;
		Элементы.ГруппаВидыПериодов.ТекущаяСтраница = Элементы.ГруппаПериодДата;
		
		Если Объект.ВидОбменаПУ = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОбменаПриборамиУчетаСГИСЖКХ.ВыгрузкаСведенийПУ") Тогда
			Если Элементы.ГруппаПУВидыОбменаСведениями.ТекущаяСтраница = Элементы.ГруппаПриборыУчетаВыгрузка Тогда
				Элементы.ПериодВыгрузки.Заголовок = "Дата выгрузки";
			ИначеЕсли Элементы.ГруппаПУВидыОбменаСведениями.ТекущаяСтраница = Элементы.ГруппаПриборыУчетаЗагрузка Тогда
				Элементы.ПериодВыгрузки.Заголовок = "Дата загрузки";
			Иначе
				Элементы.ПериодВыгрузки.Заголовок = "Дата отчета";
			КонецЕсли;
		Иначе
			Элементы.ПериодВыгрузки.Заголовок = "Дата выгрузки";
		КонецЕсли;
		
		Если Объект.ВидОбменаПУ = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОбменаПриборамиУчетаСГИСЖКХ.ВыгрузкаПоказанийИПУ")
		 ИЛИ Объект.ВидОбменаПУ = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОбменаПриборамиУчетаСГИСЖКХ.ВыгрузкаПоказанийОДПУ") Тогда
			Элементы.ГруппаВидыОбмена.ТекущаяСтраница = Элементы.ГруппаОбменПоказаниями;
		Иначе
			Элементы.ГруппаВидыОбмена.ТекущаяСтраница = Элементы.ГруппаОбменСведениями;
		КонецЕсли;
		
	ИначеЕсли Объект.ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.СостояниеРасчетовСРСО") Тогда
		
		Элементы.ГруппаВидыВыгрузок.ТекущаяСтраница = Элементы.ГруппаВыгрузкаРасчетовРСО;
		Элементы.ГруппаВидыПериодов.ТекущаяСтраница = Элементы.ГруппаПериодДата;
		
		Элементы.ПериодВыгрузки.Заголовок = "Дата выгрузки";
		
	ИначеЕсли Объект.ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.ДоговорыДПОИ") Тогда
		
		Элементы.ГруппаВидыВыгрузок.ТекущаяСтраница = Элементы.ГруппаВыгрузкаДоговоровДПОИ;
		Элементы.ГруппаВидыПериодов.ТекущаяСтраница = Элементы.ГруппаПериодДата;
		
		Элементы.ПериодВыгрузки.Заголовок = "Дата выгрузки";
		
	ИначеЕсли Объект.ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.РаботыИУслугиОрганизации") Тогда
		
		Элементы.ГруппаВидыВыгрузок.ТекущаяСтраница       = Элементы.ГруппаПеречниРаботИУслуг;
		Элементы.МесяцВыгрузкиФактовРаботИУслуг.Видимость = (Объект.ВидОбменаРаботамиИУслугами = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОбменаРаботамиИУслугамиСГИСЖКХ.ФактыРаботИУслуг"));
		
		Если Объект.ВидОбменаРаботамиИУслугами = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОбменаРаботамиИУслугамиСГИСЖКХ.ПеречниРаботИУслуг") Тогда
			Элементы.ДекорацияПояснениеВыгрузкаРаботИУслуг.Заголовок = "Будут выгружены сведения о перечне работ и услуг, зафиксированном в справочнике ""Перечни работ и услуг"".";
		ИначеЕсли Объект.ВидОбменаРаботамиИУслугами = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОбменаРаботамиИУслугамиСГИСЖКХ.ПланыРаботИУслуг") Тогда
			Элементы.ДекорацияПояснениеВыгрузкаРаботИУслуг.Заголовок = "Будут выгружены сведения о плане работ и услуг, зафиксированном документом ""Учет планов работ и услуг""." 
																		+ Символы.ПС + "Для загрузки планов в ГИС ЖКХ в личном кабинете ГИС ЖКХ должны быть созданы соответствующие перечни работ и услуг.";
		ИначеЕсли Объект.ВидОбменаРаботамиИУслугами = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОбменаРаботамиИУслугамиСГИСЖКХ.ФактыРаботИУслуг") Тогда
			Элементы.ДекорацияПояснениеВыгрузкаРаботИУслуг.Заголовок = "Будут выгружены сведения о факте выполнения работ и услуг, зафиксированном документом ""Учет фактов работ и услуг""." 
																		+ Символы.ПС + "Для загрузки фактов в ГИС ЖКХ в личном кабинете ГИС ЖКХ должны быть созданы соответствующие планы работ и услуг.";
		КонецЕсли;
		
	ИначеЕсли Объект.ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.СведенияТСЖ") Тогда
		
		Если Объект.ВидОбменаТСЖ = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОбменаСведениямиОТСЖСГИСЖКХ.СведенияОбОтчетахТСЖ") Тогда
			Элементы.ГруппаВидыВыгрузок.ТекущаяСтраница = Элементы.ГруппаВыгрузкаОтчетовТСЖ;
			Элементы.ГруппаВидыПериодов.ТекущаяСтраница = Элементы.ГруппаПериодМесяц;
			
			Элементы.МесяцСтрокой.Заголовок = "Период выгрузки с";
		Иначе
			Элементы.ГруппаВидыВыгрузок.ТекущаяСтраница = Элементы.ГруппаВыгрузкаЧленовТСЖ;
			Элементы.ГруппаВидыПериодов.ТекущаяСтраница = Элементы.ГруппаПериодДата;
			
			Элементы.ПериодВыгрузки.Заголовок = "Дата выгрузки";
		КонецЕсли;
		
	ИначеЕсли Объект.ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.СведенияОбОплатах") Тогда
		
		Элементы.ГруппаВидыВыгрузок.ТекущаяСтраница = Элементы.ГруппаВыгрузкаОплат;
		Элементы.ГруппаВидыПериодов.ТекущаяСтраница = Элементы.ГруппаПроизвольныеПериоды;
		
		Элементы.ВидПериода.Заголовок = "Период выгрузки";
		
		Форма.Период = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьПредставлениеПериодаОтчета(Объект.ВидПериода, Объект.НачалоПроизвольногоПериода, Объект.КонецПроизвольногоПериода);
		УПЖКХ_ТиповыеМетодыКлиентСервер.ПереключитьТекущуюСтраницуВыбораПериода(Объект.ВидПериода, Элементы.ГруппаПоляВводаПериода);
		
		Элементы.ОтборПоИсточникуОплаты.Доступность      = Форма.ОтбиратьОплатыПоИсточнику;
		Элементы.ТаблицаВыбранныхЛицевыхСчетов.Видимость = (Не Форма.ВыборЛицевыхСчетов = 0);
		
	КонецЕсли;
	
	Если Объект.ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.СведенияТСЖ") Тогда
		Если Объект.ВидОбменаТСЖ = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОбменаСведениямиОТСЖСГИСЖКХ.СведенияОбОтчетахТСЖ") Тогда
			Элементы.МесяцСтрокойОкончаниеПериода.Видимость = Истина;
		КонецЕсли;
	Иначе
		Элементы.МесяцСтрокойОкончаниеПериода.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаВидыПериодов.Видимость         = Не Объект.ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.РаботыИУслугиОрганизации");
	Элементы.ВидОбменаРаботамиИУслугами.Видимость = Объект.ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.РаботыИУслугиОрганизации");
	
	Элементы.ВидОбменаПУ.Видимость = (Объект.ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.ПриборыУчета"));
	Элементы.ВидОбменаТСЖ.Видимость = (Объект.ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.СведенияТСЖ"));
	
	Элементы.ДекорацияСчетчикиПредупреждение.Видимость = (Объект.ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.ПриборыУчета"))
														И (Не Объект.ВидОбменаПУ = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОбменаПриборамиУчетаСГИСЖКХ.ВыгрузкаСведенийПУ"));
	
	// Управление видимостью переключателя выгрузки отдельных лицевых счетов КР в зависимости от того,
	// ведется ли в организации раздельный учет капитального ремонта.
	Элементы.ГруппаВыгружатьЛицевыеСчетаКР.Видимость = Форма.мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет;
	Элементы.ГруппаЗагрузкаИдентификаторовКР.Видимость = Форма.мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет;
	
	Если Объект.ВыгружатьЛицевыеСчетаКР Тогда
		Элементы.ТаблицаИдентификаторовЛСЕЛС.Заголовок = "ЕЛС КР";
		Элементы.ТаблицаИдентификаторовЛСИдентификаторЖКУ.Заголовок = "Идентификатор ЖКУ КР";
	Иначе
		Элементы.ТаблицаИдентификаторовЛСЕЛС.Заголовок = "ЕЛС";
		Элементы.ТаблицаИдентификаторовЛСИдентификаторЖКУ.Заголовок = "Идентификатор ЖКУ";
	КонецЕсли;
	
	Элементы.ГруппаВыгружатьОтдельныеЛСКР.Видимость = Форма.мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет
													  И (Форма.СпособПечатиКвитанцииКапРемонт = "основную квитанцию и квитанцию на кап. ремонт"
														 ИЛИ Форма.СпособПечатиКвитанцииКапРемонт = "только квитанцию на кап. ремонт");
	
	Элементы.ДекорацияПодсказкаФормироватьТолькоКвитанциюНаКР.Видимость = Форма.СпособПечатиКвитанцииКапРемонт = "только квитанцию на кап. ремонт";
	Элементы.ДекорацияПодсказкаФормироватьОсновнуюИКвитанциюНаКР.Видимость = Форма.СпособПечатиКвитанцииКапРемонт = "основную квитанцию и квитанцию на кап. ремонт";
	
	УстановитьВидимостьИДоступностьКнопкиПроверкиСведений(Форма);
	
	УстановитьПредупреждающуюНадписьОбАктуальностиФорматов(Объект.ВидВыгрузки, Форма.ТаблицаАктуальностиШаблонов, Элементы.ПредупреждениеОНеактуальностиОбменов, Элементы.ПояснениеКПредупреждениюОНеактуальностиОбменов,
														   Форма.ТекущаяВерсияЯвляетсяАктуальной, Форма.АктуальнаяВерсияПП, Форма.АктуальнаяВерсияППЯвляетсяНеофициальной, Форма.ТипУО = ПредопределенноеЗначение("Перечисление.УПЖКХ_ТипыОрганизаций.РСО"));
	
КонецПроцедуры // УправлениеФормой()

&НаКлиентеНаСервереБезКонтекста
// Управляет видимостью и доступностью кнопки проверки сведений
Процедура УстановитьВидимостьИДоступностьКнопкиПроверкиСведений(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если Объект.ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.СведенияОЗданиях") Тогда
		Элементы.ФормаПроверитьДанныеПередВыгрузкой.Доступность = (Элементы.ГруппаЗданияВидыОбмена.ТекущаяСтраница = Элементы.ГруппаЗданияВидыОбмена.ПодчиненныеЭлементы.ГруппаЗданияВыгрузка);
	ИначеЕсли Объект.ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.СведенияОЛицевыхСчетах") Тогда
		Элементы.ФормаПроверитьДанныеПередВыгрузкой.Доступность = (Элементы.ГруппаЛСВидыОбмена.ТекущаяСтраница = Элементы.ГруппаЛСВидыОбмена.ПодчиненныеЭлементы.ГруппаЛСВыгрузка);
	ИначеЕсли Объект.ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.ПлатежныеДокументы") Тогда
		Элементы.ФормаПроверитьДанныеПередВыгрузкой.Доступность = Ложь;
	ИначеЕсли Объект.ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.ПриборыУчета") И Объект.ВидОбменаПУ = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОбменаПриборамиУчетаСГИСЖКХ.ВыгрузкаСведенийПУ") Тогда
		Элементы.ФормаПроверитьДанныеПередВыгрузкой.Доступность = (Элементы.ГруппаПУВидыОбменаСведениями.ТекущаяСтраница = Элементы.ГруппаПУВидыОбменаСведениями.ПодчиненныеЭлементы.ГруппаПриборыУчетаВыгрузка);
	Иначе
		Элементы.ФормаПроверитьДанныеПередВыгрузкой.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьИДоступностьКнопкиПроверкиСведений()

&НаКлиентеНаСервереБезКонтекста
// Проверяет актуальность форматов обмена и при необходимости выводит надпись о том, что форматы неактуальны.
Процедура УстановитьПредупреждающуюНадписьОбАктуальностиФорматов(ВидВыгрузки, ТаблицаАктуальностиШаблонов, ЭлементПредупреждение, ЭлементПояснение, ТекущаяВерсияЯвляетсяАктуальной, АктуальнаяВерсияПП, 
																 АктуальнаяВерсияППЯвляетсяНеофициальной, ЭтоРСО)
	
	// На данный момент имеются существенные различия между выгрузками зданий для РСО и для остальных типов УО.
	// Поэтому актуальность соответствующих шаблонов проверяем раздельно.
	Если ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.СведенияОЗданиях") Тогда
		СтруктураСведений = ТаблицаАктуальностиШаблонов.НайтиСтроки(Новый Структура("ВидОбмена, ШаблонТолькоДляРСО", ВидВыгрузки, ЭтоРСО));
	Иначе
		СтруктураСведений = ТаблицаАктуальностиШаблонов.НайтиСтроки(Новый Структура("ВидОбмена", ВидВыгрузки));
	КонецЕсли;
	
	// Что мы можем предложить пользователю, если обмен неактуален.
	// Если у пользователя актуальная версия ПП:
	// 1. Ждать выхода нового релиза и обновиться на него (если отличаются версии обмена в актуальной версии ПП и в хранилище)
	// 2. Перейти к нам на сайт, чтобы уточнить сроки актуализации (если обмен неактуален и не выполняется условие из п.1)
	//
	// Если у пользователя неактуальная версия ПП:
	// (важный момент: в ГИС ЖКХ некоторые версии совместимы, т.е. обмен может быть неактуальным, но, тем не менее, передавать информацию в ГИС можно)
	// 1. Ждать выхода нового релиза и обновиться на него (если отличаются версии обмена в актуальной версии ПП и в хранилище)
	// 2. Рекомендовать обновиться на актуальную версию (если в актуальной версии обмен актуален)
	// 3. Перейти к нам на сайте, чтобы уточнить сроки актуализации (если обмен неактуален даже в актуальной версии)
	
	ТекстСообщенияПользователю = "";
	ПереченьШаблоновКоторыеСтанутАктуальныВНовойВерсии = "";
	ПереченьШаблоновДляКоторыхНеобходимоПерейтиНаСайт  = "";
	ПереченьШаблоновКоторыеМогутБытьНеактуальны        = "";
	
	КоличествоШаблоновКоторыеСтанутАктуальныВНовойВерсии = 0;
	КоличествоШаблоновДляКоторыхНеобходимоПерейтиНаСайт  = 0;
	КоличествоШаблоновКоторыеМогутБытьНеактуальны        = 0;
	
	Для Каждого СтрокаСведений Из СтруктураСведений Цикл
		Если ТекущаяВерсияЯвляетсяАктуальной Тогда
			Если Не СтрокаСведений.АктуальностьВАктуальнойВерсииПП Тогда
				Если Не СтрокаСведений.ВерсияВАктуальномПП = СтрокаСведений.ВерсияВХранилище И СтрокаСведений.ВерсияВХранилище = СтрокаСведений.ВерсияВГИС Тогда
					ПереченьШаблоновКоторыеСтанутАктуальныВНовойВерсии = ПереченьШаблоновКоторыеСтанутАктуальныВНовойВерсии + ?(ПустаяСтрока(ПереченьШаблоновКоторыеСтанутАктуальныВНовойВерсии), "", ", ")
																		 + """" + СтрокаСведений.Шаблон + """";
					КоличествоШаблоновКоторыеСтанутАктуальныВНовойВерсии = КоличествоШаблоновКоторыеСтанутАктуальныВНовойВерсии + 1;
				Иначе
					ПереченьШаблоновДляКоторыхНеобходимоПерейтиНаСайт = ПереченьШаблоновДляКоторыхНеобходимоПерейтиНаСайт + ?(ПустаяСтрока(ПереченьШаблоновДляКоторыхНеобходимоПерейтиНаСайт), "", ", ")
																		+ """" + СтрокаСведений.Шаблон + """";
					КоличествоШаблоновДляКоторыхНеобходимоПерейтиНаСайт = КоличествоШаблоновДляКоторыхНеобходимоПерейтиНаСайт + 1;
				КонецЕсли;
			КонецЕсли;
		Иначе
			// Если в актуальной версии ПП обмен неактуален, но актуален в хранилище, рекомендуем дождаться новой версии.
			Если Не СтрокаСведений.ВерсияВАктуальномПП = СтрокаСведений.ВерсияВХранилище И СтрокаСведений.ВерсияВХранилище = СтрокаСведений.ВерсияВГИС Тогда
				ПереченьШаблоновКоторыеСтанутАктуальныВНовойВерсии = ПереченьШаблоновКоторыеСтанутАктуальныВНовойВерсии + ?(ПустаяСтрока(ПереченьШаблоновКоторыеСтанутАктуальныВНовойВерсии), "", ", ")
																	 + """" + СтрокаСведений.Шаблон + """";
				КоличествоШаблоновКоторыеСтанутАктуальныВНовойВерсии = КоличествоШаблоновКоторыеСтанутАктуальныВНовойВерсии + 1;
			
			// Если в актуальной версии ПП обмен неработоспособен, отправляем пользователя на наш сайт.
			ИначеЕсли Не СтрокаСведений.АктуальностьВАктуальнойВерсииПП Тогда
				ПереченьШаблоновДляКоторыхНеобходимоПерейтиНаСайт = ПереченьШаблоновДляКоторыхНеобходимоПерейтиНаСайт + ?(ПустаяСтрока(ПереченьШаблоновДляКоторыхНеобходимоПерейтиНаСайт), "", ", ")
																	+ """" + СтрокаСведений.Шаблон + """";
				КоличествоШаблоновДляКоторыхНеобходимоПерейтиНаСайт = КоличествоШаблоновДляКоторыхНеобходимоПерейтиНаСайт + 1;
			
			// Если версия обмена в текущей версии ПП отличается от версии обмена в актуальной версии ПП, и в актуальной версии ПП обмен работоспособен, можем предупредить пользователя о том,
			// что обмен потенциально неактуален (сказать точно мы не можем в силу наличия совместимых версий), и рекомендовать обновиться на актуальную версию ПП.
			ИначеЕсли Не СтрокаСведений.ВерсияВАктуальномПП = СтрокаСведений.ВерсияВТекущемПП И СтрокаСведений.АктуальностьВАктуальнойВерсииПП Тогда
				ПереченьШаблоновКоторыеМогутБытьНеактуальны = ПереченьШаблоновКоторыеМогутБытьНеактуальны + ?(ПустаяСтрока(ПереченьШаблоновКоторыеМогутБытьНеактуальны), "", ", ")
															  + """" + СтрокаСведений.Шаблон + """";
				КоличествоШаблоновКоторыеМогутБытьНеактуальны = КоличествоШаблоновКоторыеМогутБытьНеактуальны + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ПустаяСтрока(ПереченьШаблоновКоторыеСтанутАктуальныВНовойВерсии) Тогда
		Если КоличествоШаблоновКоторыеСтанутАктуальныВНовойВерсии > 1 Тогда
			ТекстСообщенияПользователю = "Обмены " + ПереченьШаблоновКоторыеСтанутАктуальныВНовойВерсии + " неактуальны, но станут актуальными в новой версии нашей программы. Дождитесь её выхода.";
		Иначе
			ТекстСообщенияПользователю = "Обмен " + ПереченьШаблоновКоторыеСтанутАктуальныВНовойВерсии + " неактуален, но станет актуальным в новой версии нашей программы. Дождитесь её выхода.";
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПереченьШаблоновДляКоторыхНеобходимоПерейтиНаСайт) Тогда
		Если КоличествоШаблоновДляКоторыхНеобходимоПерейтиНаСайт > 1 Тогда
			ТекстСообщенияПользователю = ТекстСообщенияПользователю + ?(ПустаяСтрока(ТекстСообщенияПользователю), "", Символы.ПС) + "Обмены " + ПереченьШаблоновДляКоторыхНеобходимоПерейтиНаСайт 
										 + " неактуальны. Воспользуйтесь кнопкой ""Важная информация об обмене с ГИС ЖКХ"" для получения дополнительной информации.";
		Иначе
			ТекстСообщенияПользователю = ТекстСообщенияПользователю + ?(ПустаяСтрока(ТекстСообщенияПользователю), "", Символы.ПС) + "Обмен " + ПереченьШаблоновДляКоторыхНеобходимоПерейтиНаСайт 
										 + " неактуален. Воспользуйтесь кнопкой ""Важная информация об обмене с ГИС ЖКХ"" для получения дополнительной информации.";
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ПереченьШаблоновКоторыеМогутБытьНеактуальны) Тогда
		Если КоличествоШаблоновКоторыеМогутБытьНеактуальны > 1 Тогда
			ТекстСообщенияПользователю = ТекстСообщенияПользователю + ?(ПустаяСтрока(ТекстСообщенияПользователю), "", Символы.ПС) + "Вы используете неактуальную версию нашей программы (актуальная " 
										 + ?(АктуальнаяВерсияППЯвляетсяНеофициальной, "Н", "") + АктуальнаяВерсияПП + "). Обмены " + ПереченьШаблоновКоторыеМогутБытьНеактуальны 
										 + " могут работать некорректно. Рекомендуем обновиться на" + ?(АктуальнаяВерсияППЯвляетсяНеофициальной, " неофициальную ", " ") + "версию " 
										 + ?(АктуальнаяВерсияППЯвляетсяНеофициальной, "Н", "") + АктуальнаяВерсияПП + ".";
		Иначе
			ТекстСообщенияПользователю = ТекстСообщенияПользователю + ?(ПустаяСтрока(ТекстСообщенияПользователю), "", Символы.ПС) + "Вы используете неактуальную версию нашей программы (актуальная " 
										 + ?(АктуальнаяВерсияППЯвляетсяНеофициальной, "Н", "") + АктуальнаяВерсияПП + "). Обмен " + ПереченьШаблоновКоторыеМогутБытьНеактуальны 
										 + " может работать некорректно. Рекомендуем обновиться на" + ?(АктуальнаяВерсияППЯвляетсяНеофициальной, " неофициальную ", " ") + "версию " 
										 + ?(АктуальнаяВерсияППЯвляетсяНеофициальной, "Н", "") + АктуальнаяВерсияПП + ".";
		КонецЕсли;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекстСообщенияПользователю) Тогда
		ЭлементПредупреждение.Видимость = Ложь;
		ЭлементПояснение.Видимость      = Ложь;
	Иначе
		ЭлементПредупреждение.Видимость = Истина;
		ЭлементПредупреждение.Заголовок = ТекстСообщенияПользователю;
		ЭлементПояснение.Видимость      = Истина;
	КонецЕсли;
	
КонецПроцедуры // УстановитьПредупреждающуюНадписьОбАктуальностиФорматов()

&НаКлиенте
// Проверяет заполнение полей формы.
//
// Параметры:
//  Отказ - Булево - признак отказа в выполнении обработки.
//
Процедура ПроверитьЗаполнениеРеквизитов(Отказ, Оповещение)
	
	СписокНезаполненныхПолейИзФормыНастроек = Новый СписокЗначений;
	
	Если Не Объект.ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.РаботыИУслугиОрганизации") И Объект.ПериодВыгрузки = Дата(1, 1, 1) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не указан период выгрузки.", , "ПериодВыгрузки", "Объект", Отказ);
		Возврат;
	КонецЕсли;
	
	Если Объект.Организация.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбрана организация.", , "Организация", "Объект", Отказ);
		Возврат;
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
	Если ПустаяСтрока(Объект.КаталогВыгрузки) Тогда
		СписокНезаполненныхПолейИзФормыНастроек.Добавить("КаталогВыгрузки");
		Отказ = Истина;
	КонецЕсли;
	#КонецЕсли
	
	Если Объект.ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.СведенияОЗданиях") Тогда
		
		Если Объект.Здания.Количество() = 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбраны здания.", , "Здания", "Объект", Отказ);
		КонецЕсли;
		
		НезаполненныеСтроки = Объект.Здания.НайтиСтроки(Новый Структура("Здание", ПредопределенноеЗначение("Справочник.КВП_Здания.ПустаяСсылка")));
		Если НезаполненныеСтроки.Количество() > 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбрано здание в строке.", , "Объект.Здания[" + Формат(НезаполненныеСтроки[0].НомерСтроки-1, "ЧН=0; ЧГ=0") + "].Здание", , Отказ);
		КонецЕсли;
		
		Если Не ТипУО = ПредопределенноеЗначение("Перечисление.УПЖКХ_ТипыОрганизаций.РСО") Тогда
			Если Не ВыгружатьСведенияОЗданиях И Не ВыгружатьДоговорыУправления И Не ВыгружатьСпособыФормированияФондаКР И Не ВыгружатьЗаявкиНаДобавлениеВременныхАдресов Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не указано, что требуется выгрузить.", , , , Отказ);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Объект.ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.СведенияОЛицевыхСчетах") Тогда
		
		Если Объект.ЛицевыеСчета.Количество() = 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбраны лицевые счета.", , "ЛицевыеСчета", "Объект", Отказ);
		КонецЕсли;
		
	ИначеЕсли Объект.ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.ПлатежныеДокументы") Тогда
		
		Если Объект.НастройкаСбораДанныхДляПД.Пустая() Тогда
			СписокНезаполненныхПолейИзФормыНастроек.Добавить("НастройкаСбораДанныхДляПД");
			Отказ = Истина;
		КонецЕсли;
		
		Если Объект.ЛицевыеСчетаПлатежныхДокументов.Количество() = 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбраны лицевые счета.", , "ЛицевыеСчетаПлатежныхДокументов", "Объект", Отказ);
		КонецЕсли;
		
		ДопПараметры = Новый Структура("Отказ, Оповещение, СписокНезаполненныхПолейИзФормыНастроек",
									    Отказ, Оповещение, СписокНезаполненныхПолейИзФормыНастроек);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьЗаполнениеРеквизитовКаталогСуществует", ЭтотОбъект, ДопПараметры);
		
		Файл = Новый Файл(Объект.ПутьКФайлуШаблонаПД);
		Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
		
		Возврат;
		
	ИначеЕсли Объект.ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.ПриборыУчета") Тогда
		
		Если Объект.ВидОбменаПУ.Пустая() Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран вид обмена приборами учета.", , "ВидОбменаПУ", "Объект", Отказ);
		КонецЕсли;
		
		Если Объект.ПриборыУчета.Количество() = 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбраны приборы учета.", , "ПриборыУчета", "Объект", Отказ);
		КонецЕСли;
		
	ИначеЕсли Объект.ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.СостояниеРасчетовСРСО") Тогда
		
		Если Объект.РасчетыРСО.Количество() = 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбраны договоры с РСО.", , "РасчетыРСО","Объект" , Отказ);
		КонецЕСли;
		
	ИначеЕсли Объект.ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.РаботыИУслугиОрганизации") Тогда
		Если Объект.ВидОбменаРаботамиИУслугами = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОбменаРаботамиИУслугамиСГИСЖКХ.ПустаяСсылка") Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран вид обмена работами и услугами.", , "ВидОбменаРаботамиИУслугами", "Объект", Отказ);
		КонецЕсли;
			
		Если ПустаяСтрока(Объект.ПутьКФайлуШаблонаВыгрузкиРаботИУслуг) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран шаблон выгрузки работ и услуг.", , "ПутьКФайлуШаблонаВыгрузкиРаботИУслуг", "Объект", Отказ);
		КонецЕсли;
		
		Если Объект.ПереченьРаботИУслуг = ПредопределенноеЗначение("Справочник.УПЖКХ_ПеречниРаботИУслуг.ПустаяСсылка") Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран перечень работ и услуг.", , "ПереченьРаботИУслуг", "Объект", Отказ);
		КонецЕсли;
		
		Если Объект.ВидОбменаРаботамиИУслугами = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОбменаРаботамиИУслугамиСГИСЖКХ.ФактыРаботИУслуг")
		 И Объект.МесяцВыгрузкиФактовРаботИУслуг = Дата(1, 1, 1) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не указан месяц выгрузки.", , "МесяцВыгрузкиФактовРаботИУслуг", "Объект", Отказ);
		КонецЕсли;
		
	ИначеЕсли Объект.ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.СведенияТСЖ") Тогда
		Если Объект.ВидОбменаТСЖ = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОбменаСведениямиОТСЖСГИСЖКХ.СведенияОбОтчетахТСЖ") Тогда
			Если Объект.ОтчетыТСЖ.Количество() = 0 Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбраны отчеты ТСЖ, кооператива.", , "ОтчетыТСЖ", "Объект", Отказ);
			КонецЕсли;
		ИначеЕсли Объект.ВидОбменаТСЖ = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОбменаСведениямиОТСЖСГИСЖКХ.ПустаяСсылка") Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран тип обмена сведениями о ТСЖ.",,,, Отказ);
		КонецЕсли;
		
	ИначеЕсли Объект.ВидВыгрузки = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.СведенияОбОплатах") Тогда
		Если Объект.ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПроизвольныйПериод") И Объект.НачалоПроизвольногоПериода > Объект.КонецПроизвольногоПериода Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Неверно указан период выгрузки.", , "КонецПроизвольногоПериода", "Объект", Отказ);
		КонецЕсли;
		
		Если ОтбиратьОплатыПоИсточнику И ИсточникОплатыДляОтбора = ПредопределенноеЗначение("Справочник.КВП_ИсточникиОплат.ПустаяСсылка") Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не указан источник оплаты для отбора.", , "ИсточникОплатыДляОтбора", , Отказ);
		КонецЕсли;
		
		Если Не ВыборЛицевыхСчетов = 0 И Объект.ЛицевыеСчетаДляОтборов.Количество() = 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не указаны лицевые счета для отбора.", , "ЛицевыеСчетаДляОтборов", "Объект", Отказ);
		КонецЕсли;
	КонецЕсли;
	
	ПроверитьЗаполнениеРеквизитовФрагмент(СписокНезаполненныхПолейИзФормыНастроек, Оповещение, Отказ);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения проверки существования файла.
Процедура ПроверитьЗаполнениеРеквизитовКаталогСуществует(КаталогСуществует, ДопольнительныеПараметры) Экспорт
	
	СписокНезаполненныхПолейИзФормыНастроек = ДопольнительныеПараметры.СписокНезаполненныхПолейИзФормыНастроек;
	
	Оповещение = ДопольнительныеПараметры.Оповещение;
	Отказ      = ДопольнительныеПараметры.Отказ;
	
	Если ПустаяСтрока(Объект.ПутьКФайлуШаблонаПД) Или Не КаталогСуществует Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Файл шаблона платежного документа не выбран или не существует.", , "ПутьКФайлуШаблонаПД", "Объект", Отказ);
	КонецЕсли;
	
	ПроверитьЗаполнениеРеквизитовФрагмент(СписокНезаполненныхПолейИзФормыНастроек, Оповещение, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаполнениеРеквизитовФрагмент(Знач СписокНезаполненныхПолейИзФормыНастроек, Оповещение, Отказ)
	
	Если СписокНезаполненныхПолейИзФормыНастроек.Количество() > 0 Тогда
		ОткрытьФормуНастроекИВывестиСообщенияСНезаполненнымиПолями(СписокНезаполненныхПолейИзФормыНастроек);
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение, Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроекИВывестиСообщенияСНезаполненнымиПолями(СписокНезаполненныхПолейИзФормыНастроек)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьПараметрыОбменаПослеЗакрытияФормыНастроек", ЭтаФорма);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КаталогВыгрузки",                           Объект.КаталогВыгрузки);
	ПараметрыФормы.Вставить("НастройкаСбораДанныхДляПД",                 Объект.НастройкаСбораДанныхДляПД);
	ПараметрыФормы.Вставить("ОтображатьВсеДоступныеВидыОбмена",          Объект.ОтображатьВсеДоступныеВидыОбмена);
	ПараметрыФормы.Вставить("НеВыгружатьСведенияОКомнатахДляЖилыхДомов", Объект.НеВыгружатьСведенияОКомнатахДляЖилыхДомов);
	ПараметрыФормы.Вставить("ЕстьОшибкиЗаполнения",                      Истина);
	ПараметрыФормы.Вставить("СписокНезаполненныхПолейИзФормыНастроек",   СписокНезаполненныхПолейИзФормыНастроек);
	
	ОткрытьФорму("Обработка.УПЖКХ_ОбменДаннымиСГИСЖКХ.Форма.ФормаНастройки", ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОткрытьФормуНастроекИВывестиСообщенияСНезаполненнымиПолями()

&НаКлиенте
// Задает пользователю вопрос о необходимости очистки таблицы "Лицевые счета".
Процедура ЗадатьВопросОбОчисткеТаблицыЛС(ОбработчикЗаполнения, ИмяТаблицы)
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ОбработчикЗаполнения", ОбработчикЗаполнения);
	ДопПараметры.Вставить("ИмяТаблицы",           ИмяТаблицы);
	Оповещение = Новый ОписаниеОповещения("ОбработкаВопросаНаОчисткуТаблицыЛС", ЭтаФорма, ДопПараметры);
	
	ПоказатьВопрос(Оповещение, "Табличная часть будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры // ЗадатьВопросОбОчисткеТаблицыЛС()

&НаКлиенте
// Обрабатывает ответ на вопрос об очистке таблицы "Лицевые счета".
Процедура ОбработкаВопросаНаОчисткуТаблицыЛС(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ИмяТаблицы = ДополнительныеПараметры.ИмяТаблицы;
		ОбработчикЗаполнения = ДополнительныеПараметры.ОбработчикЗаполнения;
		
		Объект[ИмяТаблицы].Очистить();
		
		Если ЗначениеЗаполнено(ОбработчикЗаполнения) Тогда
			ПодключитьОбработчикОжидания(ОбработчикЗаполнения,0.1 , Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВопросаНаОчисткуТаблицыЛС()

&НаКлиенте
// Открывает форму подбора объектов.
Процедура ОткрытьФормуПодбораОбъектов() Экспорт
	
	ОткрытьФорму("ОбщаяФорма.УПЖКХ_ПодборОбъектов");
	
КонецПроцедуры // ОткрытьФормуПодбораОбъектов()

&НаКлиенте
// Открывает форму подбора справочника "Лицевые счета".
Процедура ОткрытьФормуВыбораЛицевыхСчетовИзСправочника() Экспорт
	
	ФормаПодбора = ПолучитьФорму("Справочник.КВП_ЛицевыеСчета.Форма.ФормаПодбора");
	ФормаПодбора.Открыть();
	
КонецПроцедуры // ОткрытьФормуВыбораЛицевыхСчетовИзСправочника()

&НаКлиенте
// Начинает установку подключения расширения работы с файлами при открытии формы.
Процедура Подключаемый_ПодключитьРасширениеРаботыСФайламиПриОткрытии()
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПодключитьРасширениеРаботыСФайламиПриОткрытииЗавершение", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьВопросОбУстановкеРасширенияРаботыСФайлами(ОписаниеОповещения);
	
КонецПроцедуры // Подключаемый_ПодключитьРасширениеРаботыСФайламиПриОткрытии()

&НаСервере
// Создает реквизит формы - таблицу.
//
// Параметры:
//  ПустаяТаблицаЗначений - Пустая таблица значений с составом колонок, который будет у таблицы формы.
//  ИмяТаблицы - Строка - Имя создаваемой таблицы формы.
//
// Возвращаемое значение:
//  Булево - признак создания таблицы.
//
Функция СоздатьТаблицуФормы(ПустаяТаблицаЗначений, ИмяТаблицы)
	
	МассивТипаВыбора = Новый Массив;
	МассивТипаВыбора.Добавить(Тип("ТаблицаЗначений"));
	ОписаниеТипаВыбора = Новый ОписаниеТипов(МассивТипаВыбора);
	
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить(Новый РеквизитФормы(ИмяТаблицы, ОписаниеТипаВыбора, "", ИмяТаблицы));
	
	Для Каждого Колонка Из ПустаяТаблицаЗначений.Колонки Цикл
		МассивРеквизитов.Добавить(Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, ИмяТаблицы));
	КонецЦикла;
	
	Попытка
		ИзменитьРеквизиты(МассивРеквизитов);
		Возврат Истина;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции // СоздатьТаблицуФормы()

&НаКлиенте
// Формирует отчет со сведениями об объектах, в которых незаоплены обязательные к выгрузке данные.
Процедура СформироватьОтчетОбОбъектахСНезаполненнымиДанными(ЭтоПроверкаСведений)
	
	Если ТаблицаСНезаполненнымиДанными.Количество() = 0 И Не ЭтоПроверкаСведений Тогда
		Возврат;
	ИначеЕсли ТаблицаСНезаполненнымиДанными.Количество() = 0 И ЭтоПроверкаСведений Тогда
		ПоказатьПредупреждение(, "Все данные заполнены корректно.");
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("АдресТаблицы", ПоместитьВоВременноеХранилищеТаблицуСДанными());
	
	ФормаОтчета = ОткрытьФорму("Обработка.УПЖКХ_ОбменДаннымиСГИСЖКХ.Форма.ФормаОтчетаОНезаполненныхДанных", ДополнительныеПараметры, ЭтаФорма, Истина);
	
КонецПроцедуры // СформироватьОтчетОбОбъектахСНезаполненнымиДанными()

&НаСервере
// Помещает во временное хранилище таблицу с данными для того, чтобы передать ее в форму отчета.
Функция ПоместитьВоВременноеХранилищеТаблицуСДанными()
	
	ТаблицаДанных = ТаблицаСНезаполненнымиДанными.Выгрузить();
	
	// Сворачиваем таблицу, т.к. в ней могут быть однотипные ошибки. Например, при проверке кода ФИАС одного и того же здания
	// при выгрузке счетчиков, установленных на это здание.
	ТаблицаДанных.Свернуть("ВидОбмена, ОбъектСсылка, ОбъектСтрока, ТекстСообщения, ТипОшибки");
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаДанных, Новый УникальныйИдентификатор);
	
КонецФункции // ПоместитьВоВременноеХранилищеТаблицуСДанными()

&НаСервере
// Удаляет все реквизиты формы, созданные программно.
//
Процедура УдалитьРеквизитыФормыНаСервере()
	
	МассивУдаляемых = Новый Массив;
	Для Каждого ИмяТаблицы Из СтруктураИменТаблицФормы Цикл
		МассивУдаляемых.Добавить(ИмяТаблицы.Ключ);
	КонецЦикла;
	
	Если МассивУдаляемых.Количество() > 0 Тогда
		Попытка
			ИзменитьРеквизиты(, МассивУдаляемых);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры // УдалитьРеквизитыФормыНаСервере()

&НаСервере
// Функция получает здания из выбранной группы, которые необходимо добавить в табличную часть.
Функция ПолучитьЗданияИзГруппы(ЗданиеСсылка, НомерТекСтроки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_Здания.Ссылка
	|ИЗ
	|	Справочник.КВП_Здания КАК КВП_Здания
	|ГДЕ
	|	КВП_Здания.Ссылка В ИЕРАРХИИ(&ГруппаЗданий)
	|	И НЕ ЭтоГруппа
	|	И НЕ ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ГруппаЗданий", ЗданиеСсылка);
	
	ВыборкаЗданий = Запрос.Выполнить().Выбрать();
	
	СписокДобавляемыхЗданий = Новый СписокЗначений;
	
	ЗданияУжеДобавлены = Ложь;
	
	Пока ВыборкаЗданий.Следующий() Цикл
		
		НайденныеСтроки = Объект.Здания.НайтиСтроки(Новый Структура("Здание", ВыборкаЗданий.Ссылка));
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			СписокДобавляемыхЗданий.Добавить(ВыборкаЗданий.Ссылка);
		Иначе
			Если НЕ НайденныеСтроки[0].НомерСтроки = НомерТекСтроки Тогда
				ЗданияУжеДобавлены = Истина;
			Иначе
				ЗданиеСсылка = НайденныеСтроки[0].Объект;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗданияУжеДобавлены Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Некоторые здания данной группы уже добавлены в список зданий и не будут добавлены повторно.");
	КонецЕсли;
	
	Возврат СписокДобавляемыхЗданий;
	
КонецФункции // ПолучитьЗданияИзГруппы()

&НаКлиенте
// Функция проверяет наличие добавленного здания в списке уже добавленных зданий.
Функция ПроверитьНаличиеЗданияВСписке(ЗданиеСсылка, НомерТекСтроки)
	
	ЗданиеУжеДобавлено = Ложь;
	
	НайденныеСтроки = Объект.Здания.НайтиСтроки(Новый Структура("Здание", ЗданиеСсылка));
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Если (НайденныеСтроки.Количество() = 1 И НЕ НайденныеСтроки[0].НомерСтроки = НомерТекСтроки) ИЛИ НайденныеСтроки.Количество() > 1 Тогда
			ЗданиеУжеДобавлено = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗданиеУжеДобавлено;
	
КонецФункции // ПроверитьНаличиеЗданияВСписке()

&НаСервере
// Функция возвращает способ печати квитанции капитального ремонта из реквизита
// справочника "Настройки сбора данных для квитанций и обменов"
Функция ПолучитьСпособПечатиКвитанцииКапРемонт()
	
	Возврат Объект.НастройкаСбораДанныхДляПД.СпособПечатиКвитанцииКапРемонт;
	
КонецФункции // ПолучитьСпособПечатиКвитанцииКапРемонт()

&НаКлиенте
// Обрабатывает изменение типа организации.
Процедура ПояснениеТипОрганизацииНажатиеЗавершение(СтруктураПараметров, ДополнительныеПараметры) Экспорт
	
	УстановитьПояснениеКТипуОрганизации(ЭтаФорма);
	УстановитьДоступныеВидыОбмена(ЭтаФорма);
	
КонецПроцедуры // ПояснениеТипОрганизацииНажатиеЗавершение()

&НаСервере
// Формирует таблицу соответствия типов организаций и видов обмена.
Процедура ПолучитьТаблицуСоответствияВидовОбменаИТиповУО()
	
	Макет = Обработки.УПЖКХ_ОбменДаннымиСГИСЖКХ.ПолучитьМакет("ДоступныеВидыОбмена");
	
	ОбластьТаблицы = Макет.ПолучитьОбласть("ТаблицаСоответствия");
	
	ТекущийВидОбмена = Неопределено;
	Для НомерСтроки = 1 По ОбластьТаблицы.ВысотаТаблицы Цикл
		Если Не ПустаяСтрока(ОбластьТаблицы.Область(НомерСтроки, 1, НомерСтроки, 1).Текст) Тогда
			ТекущийВидОбмена = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыВыгрузкиВГИСЖКХ." + ОбластьТаблицы.Область(НомерСтроки, 1, НомерСтроки, 1).Текст);
		КонецЕсли;
		
 		НоваяСтрока = ТаблицаДоступныхВидовОбмена.Добавить();
		НоваяСтрока.ВидОбмена      = ТекущийВидОбмена;
		НоваяСтрока.ТипОрганизации = ПредопределенноеЗначение("Перечисление.УПЖКХ_ТипыОрганизаций." + ОбластьТаблицы.Область(НомерСтроки, 2, НомерСтроки, 2).Текст);
	КонецЦикла;
	
КонецПроцедуры // ПолучитьТаблицуСоответствияВидовОбменаИТиповУО()

&НаКлиенте
// Процедура-обработчик результата закрытия формы "Настройки".
Процедура ОбновитьПараметрыОбменаПослеЗакрытияФормыНастроек(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		
		РезультатЗакрытия.Свойство("ОтображатьВсеДоступныеВидыОбмена",          Объект.ОтображатьВсеДоступныеВидыОбмена);
		РезультатЗакрытия.Свойство("НеВыгружатьСведенияОКомнатахДляЖилыхДомов", Объект.НеВыгружатьСведенияОКомнатахДляЖилыхДомов);
		РезультатЗакрытия.Свойство("КаталогВыгрузки",                           Объект.КаталогВыгрузки);
		РезультатЗакрытия.Свойство("НастройкаСбораДанныхДляПД",                 Объект.НастройкаСбораДанныхДляПД);
		
		Если НЕ Объект.НастройкаСбораДанныхДляПД.Пустая() Тогда
			СпособПечатиКвитанцииКапРемонт = ПолучитьСпособПечатиКвитанцииКапРемонт();
		КонецЕсли;
		
		УстановитьДоступныеВидыОбмена(ЭтаФорма);
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьПараметрыОбменаПослеЗакрытияФормыНастроек()

&НаКлиенте
// Процедура окончания асинхроного выбора периода.
Процедура ПериодНачалоВыбораЗавершение(СтруктураПериода, ДополнительныеПараметры) Экспорт
	
	// Установим полученный период.
	Если СтруктураПериода <> Неопределено Тогда
		Объект.ВидПериода = СтруктураПериода.ВидПериода;
		Период = СтруктураПериода.Период;
		Объект.НачалоПроизвольногоПериода = СтруктураПериода.НачалоПериода;
		Объект.КонецПроизвольногоПериода = СтруктураПериода.КонецПериода;
	КонецЕсли;

КонецПроцедуры // ПериодНачалоВыбораЗавершение()

&НаКлиенте
// Возвращает диалог выбора файла.
//
Функция ПолучитьДиалогВыбораФайла()
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок                   = "Выбор файла шаблона";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	ДиалогВыбораФайла.Фильтр             = "(Файлы Excel (*.xlsx)|*.xlsx";
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	
	Возврат ДиалогВыбораФайла;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИОНАЛ ОТЛАДКИ

#Область ФункционалОтладки

&НаКлиенте
// Запускает замер времени выполнения.
//
Процедура НачатьЗамерВремениВыполнения()
	
	УПЖКХ_МногопоточнаяОбработкаДанных.НачатьЗамерВремениВыполнения(ЗамерыВремениВыполнения_Таймер);
	
КонецПроцедуры // НачатьЗамерВремениВыполнения()

&НаКлиенте
// Завершает замер времени выполнения.
//
Процедура ОстановитьЗамерВремениВыполнения()
	
	УПЖКХ_МногопоточнаяОбработкаДанных.ОстановитьЗамерВремениВыполнения(ЗамерыВремениВыполнения_Таймер);
	
КонецПроцедуры // ОстановитьЗамерВремениВыполнения()

#КонецОбласти

/////////////////////////////////////////////////////////////////////////
// МНОГОПОТОЧНАЯ ОБРАБОТКА ДАННЫХ

#Область МногопоточныйОбменДанными

&НаСервере
// Определяет необходимость использования многопоточности.
//
Функция ОпределитьНеобходимостьИспользованияМногопоточности(КоличествоПотоков)
	
	НастройкиМногопоточности = УПЖКХ_МногопоточнаяОбработкаДанных.ПолучитьНастройкиМногопоточности();
	
	ИспользоватьМногопоточность = НастройкиМногопоточности.ИспользоватьМногопоточность;
	КоличествоПотоков           = НастройкиМногопоточности.КоличествоПотоков;
	
	Если КоличествоПотоков < 2 ИЛИ (НЕ Объект.ВидВыгрузки = Перечисления.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.ПлатежныеДокументы
								  И НЕ Объект.ВидВыгрузки = Перечисления.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.СведенияОЛицевыхСчетах) Тогда
		ИспользоватьМногопоточность = Ложь;
	КонецЕсли;
	
	Возврат ИспользоватьМногопоточность;
	
КонецФункции // ОпределитьНеобходимостьИспользованияМногопоточности()

&НаСервере
// Определяет общее количество объектов для распределения по потокам.
//
Функция ОпределитьОбщееКоличествоОбъектовДляРаспределенияПоПотокам()
	
	КоличествоОбъектовДляРаспределения = 0;
	
	// В зависимости от вида операции определяем количество объектов для выгрузки.
	Если Объект.ВидВыгрузки = Перечисления.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.СведенияОЗданиях Тогда
		КоличествоОбъектовДляРаспределения = Объект.Здания.Количество();
	ИначеЕсли Объект.ВидВыгрузки = Перечисления.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.СведенияОЛицевыхСчетах Тогда
		КоличествоОбъектовДляРаспределения = Объект.ЛицевыеСчета.Количество();
	ИначеЕсли Объект.ВидВыгрузки = Перечисления.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.ПлатежныеДокументы Тогда
		КоличествоОбъектовДляРаспределения = Объект.ЛицевыеСчетаПлатежныхДокументов.Количество();
	ИначеЕсли Объект.ВидВыгрузки = Перечисления.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.ПриборыУчета Тогда
		КоличествоОбъектовДляРаспределения = Объект.ПриборыУчета.Количество();
	ИначеЕсли Объект.ВидВыгрузки = Перечисления.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.СостояниеРасчетовСРСО Тогда
		КоличествоОбъектовДляРаспределения = Объект.РасчетыРСО.Количество();
	ИначеЕсли Объект.ВидВыгрузки = Перечисления.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.ДоговорыДПОИ Тогда
		КоличествоОбъектовДляРаспределения = Объект.ДоговорыДПОИ.Количество();
	ИначеЕсли Объект.ВидВыгрузки = Перечисления.УПЖКХ_ВидыВыгрузкиВГИСЖКХ.СведенияТСЖ Тогда
		КоличествоОбъектовДляРаспределения = Объект.ОтчетыТСЖ.Количество();
	КонецЕсли;
	
	Возврат КоличествоОбъектовДляРаспределения;
	
КонецФункции // ОпределитьОбщееКоличествоОбъектовДляРаспределенияПоПотокам()

&НаСервере
// Отбирает данные из массива объектов по указанному интервалу.
//
Функция ОтобратьДанныеИзМассиваПоИнтервалу(МассивВходящий, ИндексПервогоЭлемента, ИндексПоследнегоЭлемента)
	
	МассивИсходящий = Новый Массив;
	
	КоличествоЭлементовВМассиве = МассивВходящий.Количество();
	
	Если ИндексПоследнегоЭлемента > КоличествоЭлементовВМассиве Тогда
		ИндексПоследнегоЭлемента = КоличествоЭлементовВМассиве;
	КонецЕсли;
	
	Для ТекущийИндекс = ИндексПервогоЭлемента по ИндексПоследнегоЭлемента Цикл
		МассивИсходящий.Добавить(МассивВходящий[ТекущийИндекс]);
	КонецЦикла;
	
	Возврат МассивИсходящий;
	
КонецФункции // ОтобратьДанныеИзМассиваПоИнтервалу()

&НаСервере
// Подготавливает массив наборов параметров для многопоточной обработки данных при виде обмена "Лицевые счета".
//
Функция ПодготовитьМассивНаборовПараметровДляМногопоточнойОбработкиЛицевыеСчета(МассивЛС, МассивАдресовСтруктурДанных, КоличествоПотоков, КоличествоОбъектовВсего, КоличествоОбъектовНаПоток)
	
	КоличествоОбъектовРаспределенное = 0;
	
	МассивНаборовДанныхФоновыхЗаданий = Новый Массив;
	
	Для Сч = 1 по КоличествоПотоков Цикл
		
		// В последний поток может быть передано на 1 объект больше,
		// если общее количество не делится нацело.
		КоличествоОбъектовДляПотокаТекущее = ?(Сч = КоличествоПотоков, КоличествоОбъектовВсего - КоличествоОбъектовРаспределенное, КоличествоОбъектовНаПоток);
		
		Если КоличествоОбъектовДляПотокаТекущее = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Формируем текущий массив зданий.
		ТекущийМассивЛС = ОтобратьДанныеИзМассиваПоИнтервалу(МассивЛС, КоличествоОбъектовРаспределенное, КоличествоОбъектовРаспределенное + КоличествоОбъектовДляПотокаТекущее - 1);
		
		КоличествоОбъектовРаспределенное = КоличествоОбъектовРаспределенное + КоличествоОбъектовДляПотокаТекущее;
		
		// Подготавливаем адрес во временном хранилище, куда будет сохранена структура с данными объекта.
		АдресТаблицыЛС = ПоместитьВоВременноеХранилище(Неопределено);
		
		МассивАдресовСтруктурДанных.Добавить(АдресТаблицыЛС);
		
		// Подготавливаем параметры текущего потока.
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(ТекущийМассивЛС);
		МассивПараметров.Добавить(Объект.ПериодВыгрузки);
		МассивПараметров.Добавить(АдресТаблицыЛС);
		
		МассивНаборовДанныхФоновыхЗаданий.Добавить(МассивПараметров);
		
	КонецЦикла;
	
	Возврат МассивНаборовДанныхФоновыхЗаданий;
	
КонецФункции // ПодготовитьМассивНаборовПараметровДляМногопоточнойОбработкиЛицевыеСчета()

&НаСервере
// Подготавливает массив наборов параметров для многопоточной обработки данных при виде обмена "Платежные документы".
//
Функция ПодготовитьМассивНаборовПараметровДляМногопоточнойОбработкиПлатежныеДокументы(МассивЛС, МассивАдресовСтруктурДанных, ТаблицаУслугИзФайлаШаблона, КоличествоПотоков, КоличествоОбъектовВсего, КоличествоОбъектовНаПоток)
	
	МассивНаборовДанныхФоновыхЗаданий = Новый Массив;
	
	КоличествоОбъектовРаспределенное = 0;
	
	Для Сч = 1 по КоличествоПотоков Цикл
		
		// В последний поток может быть передано на 1 объект больше,
		// если общее количество не делится нацело.
		КоличествоОбъектовДляПотокаТекущее = ?(Сч = КоличествоПотоков, КоличествоОбъектовВсего - КоличествоОбъектовРаспределенное, КоличествоОбъектовНаПоток);
		
		Если КоличествоОбъектовДляПотокаТекущее = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Формируем текущий массив зданий.
		ТекущийМассивЛС = ОтобратьДанныеИзМассиваПоИнтервалу(МассивЛС, КоличествоОбъектовРаспределенное, КоличествоОбъектовРаспределенное + КоличествоОбъектовДляПотокаТекущее - 1);
		
		КоличествоОбъектовРаспределенное = КоличествоОбъектовРаспределенное + КоличествоОбъектовДляПотокаТекущее;
		
		// Подготавливаем адрес во временном хранилище, куда будет сохранена структура с данными объекта.
		АдресСтруктурыДанных = ПоместитьВоВременноеХранилище(Неопределено);
		
		МассивАдресовСтруктурДанных.Добавить(АдресСтруктурыДанных);
		
		// Подготавливаем параметры текущего потока.
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(ТекущийМассивЛС);
		МассивПараметров.Добавить(ТаблицаУслугИзФайлаШаблона);
		МассивПараметров.Добавить(Объект.ПериодВыгрузки);
		МассивПараметров.Добавить(Объект.Организация);
		МассивПараметров.Добавить(Объект.НастройкаСбораДанныхДляПД);
		МассивПараметров.Добавить(АдресСтруктурыДанных);
		
		МассивНаборовДанныхФоновыхЗаданий.Добавить(МассивПараметров);
		
	КонецЦикла;
	
	Возврат МассивНаборовДанныхФоновыхЗаданий;
	
КонецФункции // ПодготовитьМассивНаборовПараметровДляМногопоточнойОбработкиПлатежныеДокументы()

#Область ОтборТЧ_СведенияОЗданиях

&НаКлиенте
Процедура СведенияОЗданиях_ЗаполнитьТЧЗданийСОтбором(Команда)
	
	СтруктураПараметров = КВП_РаботаСДиалогами.ОпределитьПустуюСтруктуруПараметровОтбора();
	
	СтруктураПараметров.Вставить("ТипОбъекта"    , "Здания");
	СтруктураПараметров.Вставить("ЗаголовокФормы", "Подбор зданий");
	
	ОписаниеЗавершенияВыбора = Новый ОписаниеОповещения("ЗаполнитьСписокОбъектовЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.КВП_ЗаполнениеПолучателямиУслуг.Форма", 
					СтруктураПараметров, 
					ЭтотОбъект, , , , 
					ОписаниеЗавершенияВыбора,
					РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // СведенияОЗданиях_ЗаполнитьТЧЗданийСОтбором()

&НаКлиенте
// Процедура-продолжение процедуры-обработчика команды "СведенияОЗданиях_ЗаполнитьТЧЗданийСОтбором()".
Процедура ЗаполнитьСписокОбъектовЗавершение(СписокЗданий, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(СписокЗданий) = Тип("СписокЗначений") И СписокЗданий.Количество() > 0 Тогда
		
		Если Объект.Здания.Количество() > 0 Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьЗавершение",
															ЭтотОбъект,
															Новый Структура("СписокЗаполненных", СписокЗданий));
			ПоказатьВопрос(ОписаниеОповещения, "Очистить табличную часть?", РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;
		
		ЗаполнитьФрагмент(СписокЗданий);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСписокОбъектовЗавершение()

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "СведенияОЗданиях_ЗаполнитьТЧЗданийСОтбором()".
Процедура ЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	СписокЗаполненных = ДополнительныеПараметры.СписокЗаполненных;
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.Здания.Очистить();
	КонецЕсли;
	
	ЗаполнитьФрагмент(СписокЗаполненных);
	
КонецПроцедуры // ЗаполнитьЗавершение()

&НаКлиенте
// Продолжение процедуры "СведенияОЗданиях_ЗаполнитьТЧЗданийСОтбором()".
Процедура ЗаполнитьФрагмент(Знач СписокЗданий)
	
	Для Каждого Строка ИЗ СписокЗданий Цикл
		СтрокаТабЧасти = Объект.Здания.Добавить();
		СтрокаТабЧасти.Здание = Строка.Значение;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьФрагмент()

&НаКлиенте
Процедура ТаблицаВыбранныхЛицевыхСчетовЗаполнитьАвтоматически(Команда)
	
	Если Объект.ЛицевыеСчетаПлатежныхДокументов.Количество() = 0 Тогда
		ОткрытьФормуПодбораОбъектов();
	Иначе
		ЗадатьВопросОбОчисткеТаблицыЛС("ОткрытьФормуПодбораОбъектов", "ЛицевыеСчетаДляОтборов");
	КонецЕсли;
	
КонецПроцедуры // ТаблицаВыбранныхЛицевыхСчетовЗаполнитьАвтоматически()

&НаКлиенте
Процедура КомандаТаблицаВыбранныхЛицевыхСчетовЗаполнитьВручную(Команда)
	
	Если Объект.ЛицевыеСчетаДляОтборов.Количество() = 0 Тогда
		ОткрытьФормуВыбораЛицевыхСчетовИзСправочника();
	Иначе
		ЗадатьВопросОбОчисткеТаблицыЛС("ОткрытьФормуВыбораЛицевыхСчетовИзСправочника", "ЛицевыеСчетаДляОтборов");
	КонецЕсли;
	
КонецПроцедуры // КомандаТаблицаВыбранныхЛицевыхСчетовЗаполнитьВручную()

#КонецОбласти

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИОНАЛ ОТЛАДКИ

#Область ФунцкионалОтладки

#КонецОбласти
