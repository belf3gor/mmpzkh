&НаКлиенте
Перем ПараметрыОбработчикаОжидания;
&НаКлиенте
Перем ФормаДлительнойОперации;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПервоначальноеЗаполнениеПеременныхФормы();
	
	ПервоначальноеЗаполнениеТаблицыОпераций();
	
	Объект.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
	ОбщегоНазначенияБПВызовСервера.ЗаполнитьСписокОрганизаций(Элементы.ПолеОрганизация, СоответствиеОрганизаций);
	ОбщегоНазначенияБПКлиентСервер.УстановитьЗначениеПолеОрганизация(ПолеОрганизация, Объект.Организация, Ложь);
	
	ЗаполнитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеУчетнойПолитики" Тогда
		Если Параметр = Объект.Организация
			Или Параметр = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Объект.Организация) Тогда
			ЗаполнитьФормуНаСервере();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ОбновитьРегламентныеОперации" Тогда
		ЗаполнитьФормуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПолеОрганизацияПриИзменении(Элемент)
	
	ОбщегоНазначенияБПКлиент.ПолеОрганизацияПриИзменении(
		Элемент,
		ПолеОрганизация,
		Объект.Организация,
		Ложь);
		
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеОрганизацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбщегоНазначенияБПКлиент.ПолеОрганизацияОбработкаВыбора(
		Элемент,
		ВыбранноеЗначение,
		СтандартнаяОбработка,
		СоответствиеОрганизаций,
		Объект.Организация,
		Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеОрганизацияОткрытие(Элемент, СтандартнаяОбработка)
	
	ОбщегоНазначенияБПКлиент.ПолеОрганизацияОткрытие(Элемент, СтандартнаяОбработка,
		ПолеОрганизация, СоответствиеОрганизаций);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияПереходаНажатие(Элемент)
	
	ИмяОперации = Элемент.Имя;
	
	СтрокиОперации = ТаблицаОпераций.НайтиСтроки(Новый Структура("ИмяОперации", ИмяОперации));
	Если СтрокиОперации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СтрокаОперации = СтрокиОперации[0];
	
	СписокКоманд = СписокКомандДляОперации(СтрокаОперации);
	
	Команда = Неопределено;
	Если СписокКоманд.Количество() > 0 Тогда
		Если СписокКоманд.Количество() = 1 Тогда
			Команда = СписокКоманд[0];
			ОбработкаНажатияКнопкиМеню(Команда.Значение, Элемент, СтрокаОперации);
		Иначе
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("Элемент", Элемент);
			ДополнительныеПараметры.Вставить("СтрокаОперации", СтрокаОперации);
			ОповещениеВыбора = Новый ОписаниеОповещения("ВыборИзМенюЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВыборИзМеню(ОповещениеВыбора, СписокКоманд, Элемент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Инициализация и заполнение формы

&НаСервере
Процедура ПервоначальноеЗаполнениеПеременныхФормы()
	
	СтруктураКартинок = Новый Структура;
	СтруктураКартинок.Вставить("КартинкаТекущаяОперация",     БиблиотекаКартинок.СтрелкаНаправоЖелтая);
	СтруктураКартинок.Вставить("КартинкаОперацияВыполнена",	 БиблиотекаКартинок.ОперацияВыполненаУспешно);
	СтруктураКартинок.Вставить("КартинкаОперацияНеВыполнена", Новый Картинка);
	СтруктураКартинок.Вставить("КартинкаОперацияСОшибками",	 БиблиотекаКартинок.ОперацияВыполненаСОшибками);
	СтруктураКартинок.Вставить("КартинкаОперацияУстарела",    БиблиотекаКартинок.ОперациюНеобходимоПовторить);
	СтруктураКартинок.Вставить("КартинкаОперацияНеВидна",     Новый Картинка);
	СтруктураКартинок.Вставить("КартинкаОперацияПропущена",   БиблиотекаКартинок.ОперацияПропущена);
	СтруктураКартинок.Вставить("КартинкаОтчет",				 БиблиотекаКартинок.Отчет);
	
	Картинки = Новый ФиксированнаяСтруктура(СтруктураКартинок);
	
	СтруктураЦветаТекста = Новый Структура;
	СтруктураЦветаТекста.Вставить("ЦветТекстаПоУмолчанию", Новый Цвет);
	СтруктураЦветаТекста.Вставить("ОперацияНеВыполнена", Новый Цвет);
	СтруктураЦветаТекста.Вставить("ОперацияВыполнена", WebЦвета.Зеленый);
	СтруктураЦветаТекста.Вставить("ОперацияУстарела", WebЦвета.СероСиний);	
	СтруктураЦветаТекста.Вставить("ОперацияПропущена", ЦветаСтиля.ЦветТекстаФормы);
	СтруктураЦветаТекста.Вставить("ОперацияВыполненаСОшибками", ЦветаСтиля.ПросроченныеДанныеЦвет);
	
	ЦветаТекстаОпераций = Новый ФиксированнаяСтруктура(СтруктураЦветаТекста);
	
	СтруктураТипыОпераций = Новый Структура;
	СтруктураТипыОпераций.Вставить("ОбработкаДанных", 1);
	СтруктураТипыОпераций.Вставить("СписокДокументов", 2);
	СтруктураТипыОпераций.Вставить("Отчет", 3);
	СтруктураТипыОпераций.Вставить("ЗаписьРС", 4);
	СтруктураТипыОпераций.Вставить("ПереходНаВнешнююФорму", 5);
	
	ТипыОпераций = Новый ФиксированнаяСтруктура(СтруктураТипыОпераций);
	
	СоответствиеСпособыОбработкиДокументов = Новый Соответствие;
	СоответствиеСпособыОбработкиДокументов.Вставить(0, "НеОбрабатывать");
	СоответствиеСпособыОбработкиДокументов.Вставить(1, "ПометитьНаУдаление");
	СоответствиеСпособыОбработкиДокументов.Вставить(2, "ОтменитьПроведение");
	
	СпособыОбработкиДокументов = Новый ФиксированноеСоответствие(СоответствиеСпособыОбработкиДокументов);
	
КонецПроцедуры

// Функция возвращает таблицу операций, "описательную часть" без анализа статусов выполнения
// При изменении состава операций на форме функция должна быть дополнена
&НаСервере
Процедура ПервоначальноеЗаполнениеТаблицыОпераций()
	
	Если ТаблицаОпераций.Количество() > 0 Тогда
		ТаблицаОпераций.Очистить();
	КонецЕсли;
	
	// ---------   СТРАНИЦА 1. "Подготовка"  ---------------------------------
	
	// Группа "Вычет НДС по авансам покупателей"
	СтрокаОперации                  = ТаблицаОпераций.Добавить();
	СтрокаОперации.ВидОперации      = "ОтчетПоНДСсАвансов";
	СтрокаОперации.ИмяОперации      = "ОтчетПоНДСсАвансов";
	СтрокаОперации.ТипОперации      = ТипыОпераций.Отчет;
	СтрокаОперации.ДействиеОперации = "Отчеты.АнализСостоянияНалоговогоУчетаПоНДС.СформироватьОтчетНаСервере";
	СтрокаОперации.Порядок          = ТаблицаОпераций.Количество();
	СтрокаОперации.Состояние        = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
	СтрокаОперации.Актуальность     = Истина;
	
	СтрокаОперации                  = ТаблицаОпераций.Добавить();
	СтрокаОперации.ИмяОперации      = "ВозвратНДСПокупателям";
	СтрокаОперации.ВидОперации      = Перечисления.ВидыОперацийПереходаНаУСН.ВозвратНДСПоАвансамПокупателей;
	СтрокаОперации.ТипОперации      = ТипыОпераций.СписокДокументов;
	СтрокаОперации.ДействиеОперации = "Документы.СписаниеСРасчетногоСчета.ОткрытьФормуСписка";
	СтрокаОперации.Порядок          = ТаблицаОпераций.Количество();
	СтрокаОперации.Состояние        = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
	СтрокаОперации.Актуальность     = Истина;
	
	СтрокаОперации                  = ТаблицаОпераций.Добавить();
	СтрокаОперации.ВидОперации      = Перечисления.ВидыОперацийПереходаНаУСН.ВычетНДСПоАвансамПокупателей;
	СтрокаОперации.ИмяОперации      = "ОтражениеВычетаНДС";
	СтрокаОперации.ТипОперации      = ТипыОпераций.СписокДокументов;
	СтрокаОперации.ДействиеОперации = "Документы.ОтражениеНДСКВычету.ОткрытьФормуСписка";
	СтрокаОперации.Порядок          = ТаблицаОпераций.Количество();
	СтрокаОперации.Состояние        = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
	СтрокаОперации.Актуальность     = Истина;
	
	// Группа "Восстановление НДС и регламентные операции"
	// Подгруппа "Перейти в закрытие месяца"
	СтрокаОперации                  = ТаблицаОпераций.Добавить();
	СтрокаОперации.ИмяОперации      = "ПерейтиВЗакрытиеМесяца";
	СтрокаОперации.ВидОперации      = "ЗакрытиеМесяца";
	СтрокаОперации.ТипОперации      = ТипыОпераций.ПереходНаВнешнююФорму;
	СтрокаОперации.ДействиеОперации = "ПерейтиВЗакрытиеМесяца";
	СтрокаОперации.Порядок          = ТаблицаОпераций.Количество();
	СтрокаОперации.Состояние        = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
	СтрокаОперации.Актуальность     = Истина;
	
	// Группа "Восстановление НДС"
	СтрокаОперации                  = ТаблицаОпераций.Добавить();
	СтрокаОперации.ИмяОперации      = "ВосстановлениеНДС";
	СтрокаОперации.ВидОперации      = Перечисления.ВидыОперацийПереходаНаУСН.ВосстановлениеНДСПриПереходеНаУСН;
	СтрокаОперации.ТипОперации      = ТипыОпераций.ОбработкаДанных;
	СтрокаОперации.ДействиеОперации = "Обработки.ПомощникПоПереходуНаУСН.ВыполнитьВосстановлениеНДС";
	СтрокаОперации.Порядок          = ТаблицаОпераций.Количество();
	СтрокаОперации.Состояние        = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
	СтрокаОперации.Актуальность     = Истина;
	
	СтрокаОперации.ОчищатьСсылкиНаДокументыПриОтмене = Ложь;
	СтрокаОперации.СпособОбработкиДокументовПриОтмене = 2; // ОтменитьПроведение
	
	
	// ---------   СТРАНИЦА 2. "Переход"  ---------------------------------
	
	// Группа "Проверка учетной политики"
	СтрокаОперации              = ТаблицаОпераций.Добавить();
	СтрокаОперации.ВидОперации  = "ПроверкаУчетнойПолитики";
	СтрокаОперации.ИмяОперации  = "ПроверкаУчетнойПолитики";
	СтрокаОперации.ТипОперации  = ТипыОпераций.ЗаписьРС;
	СтрокаОперации.Порядок      = ТаблицаОпераций.Количество();
	СтрокаОперации.Состояние    = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
	СтрокаОперации.Актуальность = Истина;
	
	// Группа "Включение в доходы остатка авансов полученных"
	СтрокаОперации                  = ТаблицаОпераций.Добавить();
	СтрокаОперации.ВидОперации      = Перечисления.ВидыОперацийПереходаНаУСН.ПризнаниеАвансовПокупателейДоходами;
	СтрокаОперации.ИмяОперации      = "ПризнаниеАвансовДоходами";
	СтрокаОперации.ТипОперации      = ТипыОпераций.ОбработкаДанных;
	СтрокаОперации.ДействиеОперации = "Обработки.ПомощникПоПереходуНаУСН.ВключитьАвансыВДоходыУСН";
	СтрокаОперации.Порядок          = ТаблицаОпераций.Количество();
	СтрокаОперации.Состояние        = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
	СтрокаОперации.Актуальность     = Истина;
	
	СтрокаОперации.ОчищатьСсылкиНаДокументыПриОтмене = Истина;
	СтрокаОперации.СпособОбработкиДокументовПриОтмене = 1; // ПометитьНаУдаление
	
	// Группа "Ввод начальных остатков для УСН"
	СтрокаОперации                  = ТаблицаОпераций.Добавить();
	СтрокаОперации.ВидОперации      = Перечисления.ВидыОперацийПереходаНаУСН.ВводНачальныхОстатковУСН;
	СтрокаОперации.ИмяОперации      = "ВводНачальныхОстатковУСН";
	СтрокаОперации.ТипОперации      = ТипыОпераций.ОбработкаДанных;
	СтрокаОперации.ДействиеОперации = "Обработки.ЗаполнениеНачальныхОстатковУСН.ЗаполнитьНачальныеОстаткиУСН";
	СтрокаОперации.Порядок          = ТаблицаОпераций.Количество();
	СтрокаОперации.Состояние        = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
	СтрокаОперации.Актуальность     = Истина;
	
	СтрокаОперации.ОчищатьСсылкиНаДокументыПриОтмене = Истина;
	СтрокаОперации.СпособОбработкиДокументовПриОтмене = 1; // ПометитьНаУдаление
	
	// Группа "Завершение перехода (очистка остатков налогового учета)"
	СтрокаОперации                  = ТаблицаОпераций.Добавить();
	СтрокаОперации.ВидОперации      = Перечисления.ВидыОперацийПереходаНаУСН.ОчисткаОстатковНеиспользуемыхРегистров;
	СтрокаОперации.ИмяОперации      = "ОчисткаОстатковНУ";
	СтрокаОперации.ТипОперации      = ТипыОпераций.ОбработкаДанных;
	СтрокаОперации.ДействиеОперации = "Обработки.ПомощникПоПереходуНаУСН.ОчиститьОстаткиРегистровНУ";
	СтрокаОперации.Порядок          = ТаблицаОпераций.Количество();
	СтрокаОперации.Состояние        = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
	СтрокаОперации.Актуальность     = Истина;
	
	СтрокаОперации.ОчищатьСсылкиНаДокументыПриОтмене = Истина;
	СтрокаОперации.СпособОбработкиДокументовПриОтмене = 1; // ПометитьНаУдаление
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФормуНаСервере()

	ОбновитьПараметрыПерехода();
	ЗаполнитьДанныеОпераций();
	УправлениеФормой();

КонецПроцедуры

// Заполняет таблицу операций, устанавливает статусы в зависимости от реквизитов формы
//
&НаСервере
Процедура ЗаполнитьДанныеОпераций()

	ТабСостоянийОпераций = Новый ТаблицаЗначений;
	
	Если ПереходНаУСНЗапущен Тогда
		
		// проверим состояние "Закрытия месяца"
		ДатаПроверяемогоПериода = Объект.ДатаПерехода - 1;
		ВидОперацииДляПроверки  = Перечисления.ВидыРегламентныхОпераций.РасчетДолейСписанияКосвенныхРасходов;
		
		ПерваяГруппаЗакрытияМесяцаВыполнена = ЗакрытиеМесяца.ВыполненыОперацииПредыдущихГрупп(
			ДатаПроверяемогоПериода, Объект.Организация, ВидОперацииДляПроверки, Неопределено);
		
		// Проверим остальные операции
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВыполнениеОперацийИзмененияНалоговогоРежима.ВидОперации,
		|	ВыполнениеОперацийИзмененияНалоговогоРежима.Состояние,
		|	ВыполнениеОперацийИзмененияНалоговогоРежима.Актуальность
		|ИЗ
		|	РегистрСведений.ВыполнениеОперацийИзмененияНалоговогоРежима КАК ВыполнениеОперацийИзмененияНалоговогоРежима
		|ГДЕ
		|	ВыполнениеОперацийИзмененияНалоговогоРежима.Организация = &Организация
		|	И ВыполнениеОперацийИзмененияНалоговогоРежима.НаправлениеПерехода = &НаправлениеПерехода
		|	И ВыполнениеОперацийИзмененияНалоговогоРежима.ДатаПерехода = &ДатаПерехода
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""ЗакрытиеМесяца"",
		|	ВЫБОР
		|		КОГДА &ПерваяГруппаЗакрытияМесяцаВыполнена
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийРегламентныхОпераций.НеВыполнено)
		|	КОНЕЦ,
		|	ИСТИНА"
		;
		
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("ДатаПерехода", Объект.ДатаПерехода);
		Запрос.УстановитьПараметр("НаправлениеПерехода", Перечисления.НаправленияИзмененийНалоговыхРежимов.ОСНнаУСН);
		Запрос.УстановитьПараметр("ПерваяГруппаЗакрытияМесяцаВыполнена", ПерваяГруппаЗакрытияМесяцаВыполнена);
		
		ТабСостоянийОпераций = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	// проставим состояния операций
	
	Для Каждого СтрокаТаблицы Из ТаблицаОпераций Цикл
		
		ОпределитьНеобходимостьОперацииПерехода(СтрокаТаблицы);
		
		// проставим состояние для операции
		Если СтрокаТаблицы.ТипОперации = ТипыОпераций.ЗаписьРС ИЛИ СтрокаТаблицы.ТипОперации = ТипыОпераций.Отчет Тогда // "особая" операция
			СтрокаТаблицы.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено;
		Иначе
			Если ПереходНаУСНЗапущен Тогда // анализируем состояния
				СтрокиСостояний = ТабСостоянийОпераций.НайтиСтроки(Новый Структура("ВидОперации", СтрокаТаблицы.ВидОперации));
				Если СтрокиСостояний.Количество() > 0 Тогда // есть данные о состоянии
					СтрокаСостояния = СтрокиСостояний[0];
					СтрокаТаблицы.Состояние = СтрокаСостояния.Состояние;
					СтрокаТаблицы.Актуальность = СтрокаСостояния.Актуальность;
				Иначе // данных о состоянии операции нет, считается не выполненной
					СтрокаТаблицы.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
					СтрокаТаблицы.Актуальность = Истина;
				КонецЕсли;
			Иначе // анализировать состояния незачем, все операции по умолчанию не выполнены
				СтрокаТаблицы.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
				СтрокаТаблицы.Актуальность = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Управление отображением формы

&НаСервере
Процедура УправлениеФормой()
	
	Элементы.ПолеПоясненияПоПереходу.Видимость = НЕ ПереходНаУСНЗапущен;
	
	ОбновитьСостояниеОперацийНаФорме();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеОперацийНаФорме()
	
	Элементы.ГруппаОперации.Доступность = ЗначениеЗаполнено(Объект.Организация);
	ПорядокОперацииКВыполнению          = 0;
	
	Если НЕ ПереходНаУСНЗапущен Тогда
		Элементы.ГруппаОперации.Доступность = Ложь;
	КонецЕсли;
	
	Для каждого СтрокаОперации Из ТаблицаОпераций Цикл
		
		ЭлементДействиеОперации = Элементы.Найти(СтрокаОперации.ИмяОперации);
		ЭлементСтатусОперации   = Элементы.Найти("Статус" + СтрокаОперации.ИмяОперации);
		ЭлементГруппаДействия   = ЭлементДействиеОперации.Родитель;
		
		Если СтрокаОперации.ТипОперации = ТипыОпераций.Отчет Тогда
			ЭлементСтатусОперации.Картинка = Картинки.КартинкаОтчет;
			ЭлементДействиеОперации.ЦветТекста = ЦветаТекстаОпераций.ЦветТекстаПоУмолчанию;
			Продолжить;
		ИначеЕсли СтрокаОперации.ТипОперации = ТипыОпераций.ЗаписьРС Тогда
			ЭлементДействиеОперации.ЦветТекста = ЦветаТекстаОпераций.ЦветТекстаПоУмолчанию;
			Продолжить;
		КонецЕсли;
		
		ЭлементГруппаДействия.Видимость = СтрокаОперации.Использование;
		
		Если СтрокаОперации.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено Тогда
			
			ЭлементДействиеОперации.ЦветТекста = ЦветаТекстаОпераций.ОперацияНеВыполнена;
			
			Если ПорядокОперацииКВыполнению = 0 И СтрокаОперации.Использование Тогда
				ЭлементСтатусОперации.Картинка = Картинки.КартинкаТекущаяОперация;
				ПорядокОперацииКВыполнению = СтрокаОперации.Порядок;
			Иначе
				ЭлементСтатусОперации.Картинка = Картинки.КартинкаОперацияНеВыполнена;
			КонецЕсли;
			
		ИначеЕсли СтрокаОперации.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено Тогда
			
			Если СтрокаОперации.Актуальность Тогда
				ЭлементСтатусОперации.Картинка = Картинки.КартинкаОперацияВыполнена;
				ЭлементДействиеОперации.ЦветТекста = ЦветаТекстаОпераций.ОперацияВыполнена;
			Иначе
				ЭлементСтатусОперации.Картинка = Картинки.КартинкаОперацияУстарела;
				ЭлементДействиеОперации.ЦветТекста = ЦветаТекстаОпераций.ОперацияУстарела;
			КонецЕсли;
			
		ИначеЕсли СтрокаОперации.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.ВыполненоСОшибками Тогда
			
			ЭлементСтатусОперации.Картинка = Картинки.КартинкаОперацияСОшибками;
			ЭлементДействиеОперации.ЦветТекста = ЦветаТекстаОпераций.ОперацияВыполненаСОшибками;
			
		ИначеЕсли СтрокаОперации.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Пропущено Тогда
			
			ЭлементСтатусОперации.Картинка = Картинки.КартинкаОперацияПропущена;
			ЭлементДействиеОперации.ЦветТекста = ЦветаТекстаОпераций.ОперацияПропущена;
			
		Иначе
			
			ЭлементГруппаДействия.Видимость = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрыПерехода()
	
	Объект.ДатаПерехода = Дата(1,1,1);
	
	ПереходНаУСНЗапущен			   = Ложь;
	ПереходНаУСНДоходыМинусРасходы = Истина;
	
	ТекстДатаПереходаНаУСН   = НСтр("ru = 'Не указана организация'");
	ТекстИнформацияОПереходе = "";
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ТекстДатаПереходаНаУСН = НСтр("ru = 'Для начала перехода требуется установить применение УСН и указать дату перехода на УСН в настройках системы налогообложения'");
		ТекРабочаяДата = ОбщегоНазначения.ТекущаяДатаПользователя();
		
		ТекСистемаНалогообложения = УчетнаяПолитика.СистемаНалогообложения(Объект.Организация, ТекРабочаяДата);
		ПрименяетсяУСН			  = ТекСистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("ТекПериод", ТекРабочаяДата);
		
		Если ПрименяетсяУСН Тогда
			// ищем переход ОСН-УСН " в прошлом"
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	МИНИМУМ(НастройкиСистемыНалогообложения.Период) КАК Период,
			|	НастройкиСистемыНалогообложения.Организация,
			|	НастройкиСистемыНалогообложения.ДатаПереходаНаУСН,
			|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходыМинусРасходы
			|ИЗ
			|	РегистрСведений.НастройкиСистемыНалогообложения.СрезПоследних(
			|			&ТекПериод,
			|			Организация = &Организация
			|				И СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Общая)) КАК НастройкиСистемыНалогообложенияСрезПоследних
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
			|		ПО НастройкиСистемыНалогообложенияСрезПоследних.Период < НастройкиСистемыНалогообложения.Период
			|ГДЕ
			|	НастройкиСистемыНалогообложения.Период < &ТекПериод
			|	И НастройкиСистемыНалогообложения.Организация = &Организация
			|	И НастройкиСистемыНалогообложения.СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Упрощенная)
			|
			|СГРУППИРОВАТЬ ПО
			|	НастройкиСистемыНалогообложения.Организация,
			|	НастройкиСистемыНалогообложения.ДатаПереходаНаУСН,
			|	НастройкиСистемыНалогообложения.ПрименяетсяУСНДоходыМинусРасходы
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период"
			;
		Иначе
			// ищем переход ОСН-УСН "в будущем"
			Запрос.Текст =
			"ВЫБРАТЬ
			|	НастройкиСистемыНалогообложенияСрезПервых.Период,
			|	НастройкиСистемыНалогообложенияСрезПервых.Организация,
			|	НастройкиСистемыНалогообложенияСрезПервых.ДатаПереходаНаУСН,
			|	НастройкиСистемыНалогообложенияСрезПервых.ПрименяетсяУСНДоходыМинусРасходы
			|ИЗ
			|	РегистрСведений.НастройкиСистемыНалогообложения.СрезПервых(
			|			&ТекПериод,
			|			Организация = &Организация
			|				И СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Упрощенная)) КАК НастройкиСистемыНалогообложенияСрезПервых"
			;
		КонецЕсли;
		
		Результат = Запрос.Выполнить();
		
		Если НЕ Результат.Пустой() Тогда
			// изменение учетной политики найдено
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			
			Если Выборка.Период = Выборка.ДатаПереходаНаУСН Тогда
				
				//дата перехода на УСН задана правильно
				
				ПереходНаУСНЗапущен = Истина;
				Объект.ДатаПерехода = Выборка.ДатаПереходаНаУСН;
				
				ПереходНаУСНДоходыМинусРасходы = Выборка.ПрименяетсяУСНДоходыМинусРасходы;
				
				ТекстДатаПереходаНаУСН	 = "";
				ТекстИнформацияОПереходе = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '(переход на УСН с %1)'"),
					Формат(Объект.ДатаПерехода, "ДЛФ=DD"));
				
			Иначе
				
				//есть изменение учетной политики, но дата перехода задана неверно
				ТекстДатаПереходаНаУСН = НСтр("ru = 'Дата перехода на УСН задана не с начала применения УСН. Автоматизированный переход на УСН выполнить невозможно.'");
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьЗависимостьОперацийПерехода();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ЗаполнитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗависимостьОперацийПерехода()

	ЗависимостьОпераций.Очистить();
	
	// "Восстановление НДС" - не выполняется без "Закрытия месяца"
	СтрокаЗависимости = ЗависимостьОпераций.Добавить();
	СтрокаЗависимости.ПроверяемаяОперация = "ВосстановлениеНДС";
	СтрокаЗависимости.ТребуемаяОперация   = "ПерейтиВЗакрытиеМесяца";
	
	// "Ввод начальных остатков УСН" - не выполняется без "Закрытия месяца"
	СтрокаЗависимости = ЗависимостьОпераций.Добавить();
	СтрокаЗависимости.ПроверяемаяОперация = "ВводНачальныхОстатковУСН";
	СтрокаЗависимости.ТребуемаяОперация   = "ПерейтиВЗакрытиеМесяца";
	
	Если ПереходНаУСНДоходыМинусРасходы Тогда
		// "Очистка остатков НУ и регистров" - не выполняется без "Ввода начальных остатков УСН", если объект - "Доходы минус расходы"
		СтрокаЗависимости = ЗависимостьОпераций.Добавить();
		СтрокаЗависимости.ПроверяемаяОперация = "ОчисткаОстатковНУ";
		СтрокаЗависимости.ТребуемаяОперация   = "ВводНачальныхОстатковУСН";
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОпределитьНеобходимостьОперацииПерехода(СтрокаОперации)

	// по умолчанию - всегда выполняем операции
	СтрокаОперации.Использование = Истина;
	
	Если СтрокаОперации.ВидОперации = Перечисления.ВидыОперацийПереходаНаУСН.ВводНачальныхОстатковУСН Тогда
		СтрокаОперации.Использование = ПереходНаУСНДоходыМинусРасходы;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДокументыПоОперации(СтруктураПараметров)

	ДокументыОперации = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыОперацийИзмененияНалоговогоРежима.ДокументОперации
	|ИЗ
	|	РегистрСведений.ДокументыОперацийИзмененияНалоговогоРежима КАК ДокументыОперацийИзмененияНалоговогоРежима
	|ГДЕ
	|	ДокументыОперацийИзмененияНалоговогоРежима.Организация = &Организация
	|	И ДокументыОперацийИзмененияНалоговогоРежима.НаправлениеПерехода = &НаправлениеПерехода
	|	И ДокументыОперацийИзмененияНалоговогоРежима.ДатаПерехода = &ДатаПерехода
	|	И ДокументыОперацийИзмененияНалоговогоРежима.ВидОперации = &ВидОперации"
	;

	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("НаправлениеПерехода", Перечисления.НаправленияИзмененийНалоговыхРежимов.ОСНнаУСН);
	Запрос.УстановитьПараметр("ДатаПерехода", НачалоДня(СтруктураПараметров.ДатаПерехода));
	Запрос.УстановитьПараметр("ВидОперации", СтруктураПараметров.ВидОперации);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		ДокументыОперации = Результат.Выгрузить().ВыгрузитьКолонку("ДокументОперации");
	КонецЕсли;
	
	Возврат ДокументыОперации;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции обработки гиперссылок операций формы

&НаКлиенте
Функция СписокКомандДляОперации(СтрокаОперации)

	СписокКоманд = Новый СписокЗначений;
	
	// Общие команды
	Если СтрокаОперации.ТипОперации = ТипыОпераций.ОбработкаДанных Тогда
		
		Если СтрокаОперации.Состояние = ПредопределенноеЗначение("Перечисление.ВидыСостоянийРегламентныхОпераций.НеВыполнено") Тогда
			СписокКоманд.Добавить("Выполнить", НСтр("ru = 'Выполнить операцию'"));
			СписокКоманд.Добавить("ОтметитьВыполненной", НСтр("ru = 'Отметить как выполненную'"));
		ИначеЕсли СтрокаОперации.Состояние = ПредопределенноеЗначение("Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено") Тогда
			СписокКоманд.Добавить("ОткрытьСписок", НСтр("ru = 'Открыть список сформированных документов'"));
			СписокКоманд.Добавить("ВыполнитьПовторно", НСтр("ru = 'Выполнить операцию повторно'"));
			СписокКоманд.Добавить("ОтменитьВыполнение", НСтр("ru = 'Отменить выполнение'"));
		Иначе
			СписокКоманд.Добавить("Выполнить", НСтр("ru = 'Выполнить операцию'"));
			СписокКоманд.Добавить("ОтметитьВыполненной", НСтр("ru = 'Отметить как выполненную'"));
			СписокКоманд.Добавить("ОтменитьВыполнение", НСтр("ru = 'Отменить выполнение'"));
		КонецЕсли;
		
	ИначеЕсли СтрокаОперации.ТипОперации = ТипыОпераций.СписокДокументов Тогда
		
		СписокКоманд.Добавить("ОткрытьСписок", НСтр("ru = 'Открыть список документов'"));
		
		Если СтрокаОперации.Состояние = ПредопределенноеЗначение("Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено") Тогда
			СписокКоманд.Добавить("ОтменитьВыполнение", НСтр("ru = 'Отметить как невыполненную'"));
		Иначе
			СписокКоманд.Добавить("ОтметитьВыполненной", НСтр("ru = 'Отметить как выполненную'"));
		КонецЕсли;
		
	ИначеЕсли СтрокаОперации.ТипОперации = ТипыОпераций.Отчет Тогда
		
		СписокКоманд.Добавить("ОткрытьОтчет", НСтр("ru = 'Сформировать отчет'"));
		
	ИначеЕсли СтрокаОперации.ТипОперации = ТипыОпераций.ЗаписьРС Тогда
		
		СписокКоманд.Добавить("ОткрытьЗаписьРС", Нстр("ru = 'Открыть запись'"));
		
	ИначеЕсли СтрокаОперации.ТипОперации = ТипыОпераций.ПереходНаВнешнююФорму Тогда
		
		СписокКоманд.Добавить("ОткрытьВнешнююФорму", НСтр("ru = 'Перейти к форме операции'"));
		
	КонецЕсли;

	// Дополнительные команды для отдельных операций
	Если СтрокаОперации.ИмяОперации = "ВосстановлениеНДС" Тогда
		Если СтрокаОперации.Состояние = ПредопределенноеЗначение("Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено") Тогда
			СписокКоманд.Удалить(СписокКоманд.НайтиПоЗначению("ОткрытьСписок"));
			СписокКоманд.Вставить(0, "ОткрытьДокумент", Нстр("ru = 'Открыть сформированный документ'"));
			СписокКоманд.Добавить("РаспечататьДокумент", Нстр("ru = 'Распечатать сформированный документ'"));
		КонецЕсли;
	ИначеЕсли СтрокаОперации.ИмяОперации = "ПризнаниеАвансовДоходами" Тогда
		Если СтрокаОперации.Состояние = ПредопределенноеЗначение("Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено") Тогда
			СписокКоманд.Удалить(СписокКоманд.НайтиПоЗначению("ОткрытьСписок"));
			СписокКоманд.Вставить(0, "ОткрытьДокумент", Нстр("ru = 'Открыть сформированный документ'"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокКоманд;
	
КонецФункции

&НаКлиенте
Функция МожноВыполнитьОперацию(СтрокаОперации, Знач ПредставлениеОперации)

	МожноВыполнять = Истина;
	
	СтрокиЗависимостей = ЗависимостьОпераций.НайтиСтроки(Новый Структура("ПроверяемаяОперация", СтрокаОперации.ИмяОперации));
	Если СтрокиЗависимостей.Количество() > 0 Тогда
		СтрокаЗависимости = СтрокиЗависимостей[0];
		СтрокиПроверяемыхОпераций = ТаблицаОпераций.НайтиСтроки(Новый Структура("ИмяОперации", СтрокаЗависимости.ТребуемаяОперация));
		Если СтрокиПроверяемыхОпераций.Количество() > 0 Тогда
			СтрокаПроверяемойОперации = СтрокиПроверяемыхОпераций[0];
			Если Не СтрокаПроверяемойОперации.Состояние = ПредопределенноеЗначение("Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено")
				ИЛИ Не СтрокаПроверяемойОперации.Актуальность Тогда
				
					МожноВыполнять = Ложь;
					
					ТекстШаблон = Нстр("ru = 'Перед выполнением операции %1
										|требуется выполнить операцию %2!'");
										
					ЭлементТребуемойОперации       = Элементы.Найти(СтрокаПроверяемойОперации.ИмяОперации);
					ПредставлениеОперации          = """" + ПредставлениеОперации + """";
					ПредставлениеТребуемойОперации = """" + ЭлементТребуемойОперации.Заголовок + """";
					ТекстПредупреждения            = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ТекстШаблон, ПредставлениеОперации, ПредставлениеТребуемойОперации);
					
					ПоказатьПредупреждение( , ТекстПредупреждения, 180);
					
					ТекущийЭлемент = ЭлементТребуемойОперации;
					
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат МожноВыполнять;

КонецФункции

&НаКлиенте
Процедура ОбработкаНажатияКнопкиМеню(Команда, Элемент, СтрокаОперации)
	
	Если Команда = "Выполнить" Тогда
		ВыполнитьОперациюОбработкаДанныхНаКлиенте(СтрокаОперации, Элемент.Заголовок);
	ИначеЕсли Команда = "ВыполнитьПовторно" Тогда
		ВыполнитьОперациюОбработкаДанныхНаКлиенте(СтрокаОперации, Элемент.Заголовок);
	ИначеЕсли Команда = "ОткрытьСписок" Тогда
		ОткрытьСпискиДокументовПоОперации(СтрокаОперации);
	ИначеЕсли Команда = "ОткрытьДокумент" Тогда
		ОткрытьДокументПоОперации(СтрокаОперации);
	ИначеЕсли Команда = "ОтметитьВыполненной" Тогда
		ОтметитьОперациюВыполненнойИПропустить(СтрокаОперации.ПолучитьИдентификатор());
	ИначеЕсли Команда = "ОтменитьВыполнение" Тогда
		ОтменитьОперацию(СтрокаОперации.ПолучитьИдентификатор());
	ИначеЕсли Команда = "ОткрытьОтчет" Тогда
		ОткрытьСформироватьОтчет(СтрокаОперации);
	ИначеЕсли Команда = "ОткрытьЗаписьРС" Тогда
		ОткрытьЗаписьРегистраСведений(СтрокаОперации);
	ИначеЕсли Команда = "ОткрытьВнешнююФорму" Тогда
		ОткрытьВнешнююФорму(СтрокаОперации);
	ИначеЕсли Команда = "РаспечататьДокумент" Тогда
		РаспечататьДокументПоОперации(СтрокаОперации);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции выполнения операций формы

&НаСервере
Процедура ЗафиксироватьВыполнениеОперацииПерехода(СтрокаОперации, ДокументыОперации = Неопределено,  ФиксироватьУстаревшие = Ложь, Отказ = Ложь)

	ПараметрыОперации = Новый Структура;
	
	ПараметрыОперации.Вставить("ВидОперации",         СтрокаОперации.ВидОперации);
	ПараметрыОперации.Вставить("Организация",         Объект.Организация);
	ПараметрыОперации.Вставить("ДатаПерехода",        Объект.ДатаПерехода);
	ПараметрыОперации.Вставить("НаправлениеПерехода", Перечисления.НаправленияИзмененийНалоговыхРежимов.ОСНнаУСН);
	ПараметрыОперации.Вставить("Состояние",           СтрокаОперации.Состояние);
	
	Если ТипЗнч(ДокументыОперации) = Тип("Массив") Тогда
		ПараметрыОперации.Вставить("ДокументыОперации", ДокументыОперации);
	КонецЕсли;
	
	УчетУСН.ОтразитьВыполнениеОперацииПереходаНаУСН(ПараметрыОперации, ФиксироватьУстаревшие, Отказ);

КонецПроцедуры

&НаСервере
Процедура ОтметитьОперациюВыполненнойИПропустить(ИдентификаторСтроки)

	СтрокаОперации = ТаблицаОпераций.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	СтрокаОперации.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено;
	ЗафиксироватьВыполнениеОперацииПерехода(СтрокаОперации, , Ложь);
	
	ЗаполнитьДанныеОпераций();
	ОбновитьСостояниеОперацийНаФорме();

КонецПроцедуры

&НаСервере
Процедура ОтменитьВыполнениеОперацииПерехода(СтрокаОперации, ФиксироватьУстаревшие = Ложь, Отказ = Ложь)

	ПараметрыОперации = Новый Структура;
	
	ПараметрыОперации.Вставить("ВидОперации",         СтрокаОперации.ВидОперации);
	ПараметрыОперации.Вставить("Организация",         Объект.Организация);
	ПараметрыОперации.Вставить("ДатаПерехода",        Объект.ДатаПерехода);
	ПараметрыОперации.Вставить("НаправлениеПерехода", Перечисления.НаправленияИзмененийНалоговыхРежимов.ОСНнаУСН);
	ПараметрыОперации.Вставить("Состояние",           СтрокаОперации.Состояние);
	
	ПараметрыОперации.Вставить("ОбрабатыватьДокументыОперации", Истина);
	ПараметрыОперации.Вставить("ОчиститьСсылкиНаДокументы", СтрокаОперации.ОчищатьСсылкиНаДокументыПриОтмене);
	ПараметрыОперации.Вставить("СпособОбработкиДокументовОперации",
		СпособыОбработкиДокументов.Получить(СтрокаОперации.СпособОбработкиДокументовПриОтмене));
	
	УчетУСН.ОтменитьВыполнениеОперацииПереходаНаУСН(ПараметрыОперации, ФиксироватьУстаревшие, Отказ);

КонецПроцедуры

&НаСервере
Процедура ОтменитьОперацию(ИдентификаторСтроки)

	СтрокаОперации = ТаблицаОпераций.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	СтрокаОперации.Состояние = Перечисления.ВидыСостоянийРегламентныхОпераций.НеВыполнено;
	ОтменитьВыполнениеОперацииПерехода(СтрокаОперации, Истина);
	
	ЗаполнитьДанныеОпераций();
	ОбновитьСостояниеОперацийНаФорме();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСпискиДокументовПоОперации(СтрокаОперации)

	Если СтрокаОперации.ИмяОперации = "ВводНачальныхОстатковУСН" Тогда
		
		ПараметрыОтбора = Новый Структура("Дата, Организация, ПометкаУдаления", Объект.ДатаПерехода - 1, Объект.Организация, Ложь);
		ПараметрыФормы = Новый Структура("Отбор, КлючНазначенияИспользования", ПараметрыОтбора, "ДокументыПереходаНаУСН");
		ОткрытьФорму("Документ.ВводНачальныхОстатков.ФормаСписка", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
		
	ИначеЕсли СтрокаОперации.ИмяОперации = "ВозвратНДСПокупателям" Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Дата",            Объект.ДатаПерехода - 1);
		ПараметрыОтбора.Вставить("Организация",     Объект.Организация);
		ПараметрыОтбора.Вставить("ПометкаУдаления", Ложь);
		ПараметрыОтбора.Вставить("ВидОперации",     ПредопределенноеЗначение("Перечисление.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю"));
		
		ПараметрыФормы = Новый Структура("Отбор, РежимОтбораПоДате, КлючНазначенияИспользования", ПараметрыОтбора, "ДоДаты", "ДокументыПереходаНаУСН");
		ОткрытьФорму("Документ.СписаниеСРасчетногоСчета.ФормаСписка", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);

	ИначеЕсли СтрокаОперации.ИмяОперации = "ОтражениеВычетаНДС" Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Дата",            Объект.ДатаПерехода - 1);
		ПараметрыОтбора.Вставить("Организация",     Объект.Организация);
		ПараметрыОтбора.Вставить("ПометкаУдаления", Ложь);
		
		ПараметрыФормы = Новый Структура("Отбор, РежимОтбораПоДате, КлючНазначенияИспользования", ПараметрыОтбора, "ДоДаты", "ДокументыПереходаНаУСН");
		ОткрытьФорму("Документ.ОтражениеНДСКВычету.ФормаСписка", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
		
	ИначеЕсли СтрокаОперации.ИмяОперации = "ВосстановлениеНДС" Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Дата",            Объект.ДатаПерехода - 1);
		ПараметрыОтбора.Вставить("Организация",     Объект.Организация);
		ПараметрыОтбора.Вставить("ПометкаУдаления", Ложь);
		ПараметрыОтбора.Вставить("ПометкаУдаления", Ложь);
		
		ПараметрыОтбора.Вставить("ОтразитьВКнигеПродаж", Истина);
		ПараметрыОтбора.Вставить("СписатьВосстановленныйНДСНаЗатраты", Истина);
		
		
		ПараметрыФормы = Новый Структура("Отбор, КлючНазначенияИспользования", ПараметрыОтбора, "ДокументыПереходаНаУСН");
		ОткрытьФорму("Документ.ВосстановлениеНДС.ФормаСписка", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
		
	ИначеЕсли СтрокаОперации.ИмяОперации = "ПризнаниеАвансовДоходами" Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Дата",            Объект.ДатаПерехода);
		ПараметрыОтбора.Вставить("Организация",     Объект.Организация);
		ПараметрыОтбора.Вставить("ПометкаУдаления", Ложь);
		
		ПараметрыФормы = Новый Структура("Отбор, РежимОтбораПоДате, КлючНазначенияИспользования", ПараметрыОтбора, "СДаты", "ДокументыПереходаНаУСН");
		ОткрытьФорму("Документ.ЗаписьКУДиР.ФормаСписка", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
		
	ИначеЕсли СтрокаОперации.ИмяОперации = "ОчисткаОстатковНУ" Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Дата",            Объект.ДатаПерехода);
		ПараметрыОтбора.Вставить("Организация",     Объект.Организация);
		ПараметрыОтбора.Вставить("ПометкаУдаления", Ложь);
		
		ПараметрыФормы = Новый Структура("Отбор, КлючНазначенияИспользования", ПараметрыОтбора, "ДокументыПереходаНаУСН");
		ОткрытьФорму("Документ.ОперацияБух.ФормаСписка", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокументПоОперации(СтрокаОперации)

	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("Организация", Объект.Организация);
	ПараметрыОперации.Вставить("ДатаПерехода", Объект.ДатаПерехода);
	ПараметрыОперации.Вставить("ВидОперации", СтрокаОперации.ВидОперации);
	
	МассивДокументовПоОперации = ПолучитьДокументыПоОперации(ПараметрыОперации);
	
	Если МассивДокументовПоОперации.Количество() > 0 Тогда
		
		ДокументОперации = МассивДокументовПоОперации[0];
		ВидДокумента = "";
		Если СтрокаОперации.ИмяОперации = "ВосстановлениеНДС" Тогда
			ВидДокумента = "ВосстановлениеНДС";
		ИначеЕсли СтрокаОперации.ИмяОперации = "ПризнаниеАвансовДоходами" Тогда
			ВидДокумента = "ЗаписьКУДиР";
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ВидДокумента) Тогда
			ОтборДокумента = Новый Структура("Ключ", ДокументОперации);
			ОткрытьФорму("Документ." + ВидДокумента + ".ФормаОбъекта", ОтборДокумента, ЭтаФорма, УникальныйИдентификатор);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСформироватьОтчет(СтрокаОперации)
	
	Если СтрокаОперации.ИмяОперации = "ОтчетПоНДСсАвансов" Тогда
		
		ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
		ПользовательскиеОтборы = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
		ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
		
		ДополнительныеСвойства.Вставить("РежимРасшифровки", Истина);
		ДополнительныеСвойства.Вставить("Организация", Объект.Организация);
		ДополнительныеСвойства.Вставить("Период", Объект.ДатаПерехода - 1);
		
		ПараметрыФормы = Новый Структура;
		
		ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
		
		ПараметрыФормы.Вставить("ЗаполнитьНастройкиПоУмолчанию", Истина);
		
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("Период", Объект.ДатаПерехода - 1);
		ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
		ПараметрыФормы.Вставить("ВидРасшифровки", 2);
		
		ОткрытьФорму("Отчет.ОстаткиНДСПоАвансамПокупателей.Форма.ФормаОтчета", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВнешнююФорму(СтрокаОперации)

	Если СтрокаОперации.ИмяОперации = "ПерейтиВЗакрытиеМесяца" Тогда
		ПараметрыФормы = Новый Структура("Организация, ПериодРегистрации, ПодготовкаКВосстановлениюНДСПриПереходеНаУСН",
			Объект.Организация, Объект.ДатаПерехода - 1, Истина);
		ОткрытьФорму("Обработка.ЗакрытиеМесяца.Форма", ПараметрыФормы, ЭтаФорма, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РаспечататьДокументПоОперации(СтрокаОперации)

	ПараметрыОперации = Новый Структура;
	ПараметрыОперации.Вставить("Организация",  Объект.Организация);
	ПараметрыОперации.Вставить("ДатаПерехода", Объект.ДатаПерехода);
	ПараметрыОперации.Вставить("ВидОперации",  СтрокаОперации.ВидОперации);
	
	МассивДокументовПоОперации = ПолучитьДокументыПоОперации(ПараметрыОперации);

	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.ВосстановлениеНДС",
		"ВосстановлениеНДС", МассивДокументовПоОперации, ЭтаФорма, Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаписьРегистраСведений(СтрокаОперации)

	Если СтрокаОперации.ИмяОперации = "ПроверкаУчетнойПолитики" Тогда
		
		ОтборУчетнойПолитики = Новый Структура;
		ОтборУчетнойПолитики.Вставить("Организация", Объект.Организация);
		
		Если ПереходНаУСНЗапущен Тогда
			
			ОтборУчетнойПолитики.Вставить("Период", НачалоМесяца(Объект.ДатаПерехода));
			
			ПараметрыКлюча = Новый Массив;
			ПараметрыКлюча.Добавить(ОтборУчетнойПолитики);
			
			КлючЗаписи = Новый(Тип("РегистрСведенийКлючЗаписи.НастройкиСистемыНалогообложения"), ПараметрыКлюча);
			
			Если Не КлючЗаписи.Пустой() Тогда
				ОткрытьФорму("РегистрСведений.НастройкиСистемыНалогообложения.ФормаЗаписи", Новый Структура("Ключ", КлючЗаписи), ЭтаФорма, УникальныйИдентификатор);
			КонецЕсли;
			
		Иначе
			ОткрытьФорму("РегистрСведений.НастройкиСистемыНалогообложения.ФормаСписка", Новый Структура("Отбор", ОтборУчетнойПолитики), ЭтаФорма, УникальныйИдентификатор)
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОперациюОбработкаДанныхНаКлиенте(СтрокаОперации, ПредставлениеОперации)

	ОчиститьСообщения();
	
	Если Не МожноВыполнитьОперацию(СтрокаОперации, ПредставлениеОперации) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ВыполнитьОперациюОбработкаДанныхНаСервере(СтрокаОперации.ПолучитьИдентификатор());

	Если НЕ Результат.ЗаданиеВыполнено Тогда
		Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
			ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
			
			ФормаДлительнойОперации.Заголовок = "Переход на УСН";
			ШаблонИнформации = НСтр("ru = 'Выполняется операция ""%1"".
									|Пожалуйста, подождите...'");
			ТекстИнформации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИнформации, ПредставлениеОперации);
			ФормаДлительнойОперации.Элементы.ДекорацияПоясняющийТекстДлительнойОперации.Заголовок = ТекстИнформации;
			
		КонецЕсли;
	Иначе
		ЗагрузитьПодготовленныеДанныеНаКлиенте(Результат.СтруктураДанныхКлиента);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьОперациюОбработкаДанныхНаСервере(ИдентификаторСтроки)

	СтрокаОперации = ТаблицаОпераций.НайтиПоИдентификатору(ИдентификаторСтроки);
	ИмяДействия = СтрокаОперации.ДействиеОперации;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация",  Объект.Организация);
	СтруктураПараметров.Вставить("ДатаПерехода", Объект.ДатаПерехода);
	СтруктураПараметров.Вставить("ВидОперации",  СтрокаОперации.ВидОперации);
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		
		Выполнить(ИмяДействия+"(СтруктураПараметров, АдресХранилища)");
		Результат = Новый Структура("ЗаданиеВыполнено", Истина);
		
	Иначе
		
		ШаблонФоновогоЗадания = НСтр("ru = 'Выполнение операции перехода на УСН: %1'");
		НаименованиеФоновогоЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонФоновогоЗадания, ИмяДействия);
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			ИмяДействия,
			СтруктураПараметров,
			НаименованиеФоновогоЗадания);
			
		АдресХранилища       = Результат.АдресХранилища;
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		
	КонецЕсли;
	
	Если Результат.ЗаданиеВыполнено Тогда
		Результат.Вставить("СтруктураДанныхКлиента", ЗагрузитьПодготовленныеДанные());
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ЗагрузитьПодготовленныеДанныеНаКлиенте(СтруктураДанных)
	
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("МассивСообщений") Тогда
		Для каждого Сообщение Из СтруктураДанных.МассивСообщений Цикл
			Сообщение.ИдентификаторНазначения = УникальныйИдентификатор;
			Сообщение.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьПодготовленныеДанные()
	
	СтруктураДанныхНаКлиенте = Новый Структура();
	
	СтруктураДанных = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(СтруктураДанных) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтруктураДанных.Свойство("УспешноВыполнено") Тогда
		
		СтрокаОперации = ТаблицаОпераций.НайтиСтроки(Новый Структура("ВидОперации", СтруктураДанных.ВыполняемаяОперация))[0];
		
		Если СтруктураДанных.УспешноВыполнено Тогда
			
			СтрокаОперации.Состояние = ПредопределенноеЗначение("Перечисление.ВидыСостоянийРегламентныхОпераций.Выполнено");
			
			ДокументыОперации = ?(СтруктураДанных.Свойство("ДокументыОперации"), СтруктураДанных.ДокументыОперации, Неопределено);
			ЗафиксироватьВыполнениеОперацииПерехода(СтрокаОперации, ДокументыОперации, Истина);		
			ЗаполнитьДанныеОпераций();
		
		КонецЕсли;
		
		ОбновитьСостояниеОперацийНаФорме();
		
		Если СтруктураДанных.Свойство("МассивСообщений")
			И СтруктураДанных.МассивСообщений.Количество() > 0 Тогда
			
			СтруктураДанныхНаКлиенте.Вставить("МассивСообщений", СтруктураДанных.МассивСообщений);
			
		ИначеЕсли НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
			
			ФоновоеЗадание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
			Если ФоновоеЗадание <> Неопределено Тогда
				МассивСообщений = ФоновоеЗадание.ПолучитьСообщенияПользователю(Истина);
				Если МассивСообщений <> Неопределено Тогда
					СтруктураДанныхНаКлиенте.Вставить("МассивСообщений", МассивСообщений);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураДанныхНаКлиенте;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
				ЗагрузитьПодготовленныеДанныеНаКлиенте(ЗагрузитьПодготовленныеДанные());
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания",
					ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
			КонецЕсли;
		Иначе
			// Задание отменено
			ИдентификаторЗадания = Неопределено;
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборИзМенюЗавершение(Команда, ДополнительныеПараметры) Экспорт
	
	Если Не Команда = Неопределено Тогда
		ОбработкаНажатияКнопкиМеню(Команда.Значение, ДополнительныеПараметры.Элемент, ДополнительныеПараметры.СтрокаОперации);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти





