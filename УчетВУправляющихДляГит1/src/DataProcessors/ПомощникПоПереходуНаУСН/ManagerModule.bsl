#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ВыполнитьВосстановлениеНДС(СтруктураПараметров, АдресХранилища) Экспорт

	Отказ = Ложь;
	
	ДатаДокументаВосстановлениеНДС = НачалоДня(СтруктураПараметров.ДатаПерехода) - 1;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыОперацийИзмененияНалоговогоРежима.ДокументОперации
	|ИЗ
	|	РегистрСведений.ДокументыОперацийИзмененияНалоговогоРежима КАК ДокументыОперацийИзмененияНалоговогоРежима
	|ГДЕ
	|	ДокументыОперацийИзмененияНалоговогоРежима.Организация = &Организация
	|	И ДокументыОперацийИзмененияНалоговогоРежима.НаправлениеПерехода = &НаправлениеПерехода
	|	И ДокументыОперацийИзмененияНалоговогоРежима.ДатаПерехода = &ДатаПерехода
	|	И ДокументыОперацийИзмененияНалоговогоРежима.ВидОперации = &ВидОперации"
	;
	
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("НаправлениеПерехода", Перечисления.НаправленияИзмененийНалоговыхРежимов.ОСНнаУСН);
	Запрос.УстановитьПараметр("ДатаПерехода", СтруктураПараметров.ДатаПерехода);
	Запрос.УстановитьПараметр("ВидОперации", СтруктураПараметров.ВидОперации);
	
	ДокОбъект = Неопределено;
	
	РезультатПоДокументам = Запрос.Выполнить();
	
	Если НЕ РезультатПоДокументам.Пустой() Тогда
		
		Выборка = РезультатПоДокументам.Выбрать();
		
		Ном = 0;
		МассивЛишнихДокументов = Новый Массив;
		
		Пока Выборка.Следующий() Цикл
			Ном = Ном + 1;
			Если Ном = 1 Тогда
				ДокОбъект = Выборка.ДокументОперации.ПолучитьОбъект();
				Если ДокОбъект.ПометкаУдаления Тогда
					ДокОбъект.УстановитьПометкуУдаления(Ложь);
				КонецЕсли;
			Иначе
				МассивЛишнихДокументов.Добавить(Выборка.ДокументОперации);
			КонецЕсли;
		КонецЦикла;
		
		// лишние документы помечаем на удаление
		Для каждого ЛишнийДокумент Из МассивЛишнихДокументов Цикл
			ЛишнийОбъект = ЛишнийДокумент.ПолучитьОбъект();
			ЛишнийДокумент.УстановитьПометкуУдаления(Истина);
		КонецЦикла;
		
	Иначе
		ДокОбъект = Документы.ВосстановлениеНДС.СоздатьДокумент();
		ДокОбъект.Дата = ДатаДокументаВосстановлениеНДС;
		ДокОбъект.Организация = СтруктураПараметров.Организация;
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	ДокОбъект.Дата = ДатаДокументаВосстановлениеНДС;
	ДокОбъект.Организация = СтруктураПараметров.Организация;
	ДокОбъект.Ответственный = Пользователи.ТекущийПользователь();
	ДокОбъект.ОтразитьВКнигеПродаж = Истина;
	ДокОбъект.СписатьВосстановленныйНДСНаЗатраты = Истина;
	Если НЕ ЗначениеЗаполнено(ДокОбъект.СчетСписанияНДС) Тогда
		ДокОбъект.СчетСписанияНДС = ПланыСчетов.Хозрасчетный.ПрочиеРасходы; // 91.02
		ДокОбъект.СубконтоСписанияНДС1 = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ПрочиеДоходыИРасходы.СписаниеНДСНаПрочиеРасходы");
	КонецЕсли;
	
	ПараметрыДокумента = Новый Структура("Организация, Дата", ДокОбъект.Организация, ДокОбъект.Дата);
	
	// получаем данные для заполнения документа
	ТаблицаДанныхВосстановлениеНДС = Документы.ВосстановлениеНДС.ДанныеДляВосстановленияНДСПоОстаткам(ПараметрыДокумента);
	
	Если ТипЗнч(ТаблицаДанныхВосстановлениеНДС) = Тип("ТаблицаЗначений") Тогда
		ДокОбъект.Состав.Загрузить(ТаблицаДанныхВосстановлениеНДС);
	КонецЕсли;
	
	ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	// отразим выполнение операции в регистрах сведений
	СозданныеДокументы = Новый Массив;
	СозданныеДокументы.Добавить(ДокОбъект.Ссылка);
	
	Результат = Новый Структура;
	Результат.Вставить("ВыполняемаяОперация", СтруктураПараметров.ВидОперации);
	Результат.Вставить("ДокументыОперации", СозданныеДокументы);
	Результат.Вставить("УспешноВыполнено", НЕ Отказ);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

Процедура ВключитьАвансыВДоходыУСН(СтруктураПараметров, АдресХранилища) Экспорт

	Отказ = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыОперацийИзмененияНалоговогоРежима.ДокументОперации
	|ИЗ
	|	РегистрСведений.ДокументыОперацийИзмененияНалоговогоРежима КАК ДокументыОперацийИзмененияНалоговогоРежима
	|ГДЕ
	|	ДокументыОперацийИзмененияНалоговогоРежима.Организация = &Организация
	|	И ДокументыОперацийИзмененияНалоговогоРежима.НаправлениеПерехода = &НаправлениеПерехода
	|	И ДокументыОперацийИзмененияНалоговогоРежима.ДатаПерехода = &ДатаПерехода
	|	И ДокументыОперацийИзмененияНалоговогоРежима.ВидОперации = &ВидОперации"
	;
	
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("НаправлениеПерехода", Перечисления.НаправленияИзмененийНалоговыхРежимов.ОСНнаУСН);
	Запрос.УстановитьПараметр("ДатаПерехода", СтруктураПараметров.ДатаПерехода);
	Запрос.УстановитьПараметр("ВидОперации", СтруктураПараметров.ВидОперации);
	
	ДокОбъект = Неопределено;
	
	РезультатПоДокументам = Запрос.Выполнить();
	
	Если НЕ РезультатПоДокументам.Пустой() Тогда
		
		Выборка = РезультатПоДокументам.Выбрать();
		
		Ном = 0;
		МассивЛишнихДокументов = Новый Массив;
		
		Пока Выборка.Следующий() Цикл
			Ном = Ном + 1;
			Если Ном = 1 Тогда
				ДокОбъект = Выборка.ДокументОперации.ПолучитьОбъект();
				Если ДокОбъект.ПометкаУдаления Тогда
					ДокОбъект.УстановитьПометкуУдаления(Ложь);
				КонецЕсли;
			Иначе
				МассивЛишнихДокументов.Добавить(Выборка.ДокументОперации);
			КонецЕсли;
		КонецЦикла;
		
		// лишние документы помечаем на удаление
		Для каждого ЛишнийДокумент Из МассивЛишнихДокументов Цикл
			ЛишнийОбъект = ЛишнийДокумент.ПолучитьОбъект();
			ЛишнийДокумент.УстановитьПометкуУдаления(Истина);
		КонецЦикла;
		
	Иначе
		ДокОбъект = Документы.ЗаписьКУДиР.СоздатьДокумент();
	КонецЕсли;
	
	// Данные для заполнения
	СуммаДоходовУСН = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК ОстатокАвансовПокупателей
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В (&СчетаАвансов), , Организация = &Организация) КАК ХозрасчетныйОстатки";
	
	Запрос.УстановитьПараметр("ДатаОстатков", НачалоДня(СтруктураПараметров.ДатаПерехода));
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	
	СчетаАвансов = Новый Массив;
	СчетаАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным);    // 62.02
	СчетаАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал); // 62.22
	СчетаАвансов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ);  // 62.32
	// получим субсчета (в случае, если добавлены пользователем)
	МассивСчетовАвансов = БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(СчетаАвансов);
	Запрос.УстановитьПараметр("СчетаАвансов", МассивСчетовАвансов);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		СуммаДоходовУСН = Выборка.ОстатокАвансовПокупателей;
	КонецЕсли;
	
	СозданныеДокументы = Новый Массив;
	
	// заполняем документ
	Если СуммаДоходовУСН > 0 Тогда
		ДокОбъект.Дата = СтруктураПараметров.ДатаПерехода;
		ДокОбъект.Организация = СтруктураПараметров.Организация;
		ДокОбъект.Ответственный = Пользователи.ТекущийПользователь();
		
		ДокОбъект.Строки.Очистить();
		СтрокаЗаписи = ДокОбъект.Строки.Добавить();
		СтрокаЗаписи.Графа5 = СуммаДоходовУСН;
		СтрокаЗаписи.Содержание = "Признаны доходы: остаток авансов, полученных от покупателей до перехода на упрощенную систему налогообложения";
		
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		// отразим выполнение операции в регистрах сведений
		СозданныеДокументы.Добавить(ДокОбъект.Ссылка);
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ВыполняемаяОперация", СтруктураПараметров.ВидОперации);
	Результат.Вставить("ДокументыОперации", СозданныеДокументы);
	Результат.Вставить("УспешноВыполнено", Истина);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

Процедура ОчиститьОстаткиРегистровНУ(СтруктураПараметров, АдресХранилища) Экспорт
	
	УдалитьСозданныеРанееОперации(СтруктураПараметров);
	
	СтруктураПараметров.Вставить("ДокументыОперации", Новый Массив);
	
	СформироватьДвиженияПоРегиструХозрасчетный(СтруктураПараметров);
	СформироватьДвиженияПоРегиструНДСПредъявленный(СтруктураПараметров);
	СформироватьДвиженияПоРегиструНДСсАвансов(СтруктураПараметров);
	СформироватьДвиженияПоРегиструНДСНачисленный(СтруктураПараметров);
	СформироватьДвиженияПоРегиструНДСАвансыПоДоговорамКомиссии(СтруктураПараметров);
	СформироватьДвиженияПоРегиструНДСКосвенныеРасходы(СтруктураПараметров);
	СформироватьДвиженияПоРегиструНДСПоПриобретеннымЦенностям(СтруктураПараметров);
	СформироватьДвиженияПоРегиструНДСПредъявленныйРеализация0(СтруктураПараметров);
	СформироватьДвиженияПоРегиструНДСРеализация0(СтруктураПараметров);
	СформироватьДвиженияПоРегиструИПИныеМатериальныеРасходы(СтруктураПараметров);
	СформироватьДвиженияПоРегиструИПМПЗ(СтруктураПараметров);
	СформироватьДвиженияПоРегиструИПМПЗОтгруженные(СтруктураПараметров);
	СформироватьДвиженияПоРегиструИПРБП(СтруктураПараметров);
	
	ЗафиксироватьВыполнениеОперацииПерехода(СтруктураПараметров, СтруктураПараметров.ДокументыОперации);
	
	Результат = Новый Структура;
	Результат.Вставить("ВыполняемаяОперация", СтруктураПараметров.ВидОперации);
	Результат.Вставить("УспешноВыполнено", Истина);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
Процедура СформироватьДвиженияПоРегиструХозрасчетный(СтруктураПараметров)

	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ХозрасчетныйОстатки.Счет,
		|	ХозрасчетныйОстатки.Счет.Забалансовый КАК Забалансовый,
		|	ХозрасчетныйОстатки.Субконто1,
		|	ХозрасчетныйОстатки.Субконто2,
		|	ХозрасчетныйОстатки.Субконто3,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстатки.Счет.Валютный
		|			ТОГДА ХозрасчетныйОстатки.Валюта
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК Валюта,
		|	ХозрасчетныйОстатки.Организация,
		|	ХозрасчетныйОстатки.Подразделение,
		|	ХозрасчетныйОстатки.СуммаНУОстатокДт,
		|	ХозрасчетныйОстатки.СуммаНУОстатокКт,
		|	ХозрасчетныйОстатки.СуммаПРОстатокДт,
		|	ХозрасчетныйОстатки.СуммаПРОстатокКт,
		|	ХозрасчетныйОстатки.СуммаВРОстатокДт,
		|	ХозрасчетныйОстатки.СуммаВРОстатокКт
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&Период, Счет.НалоговыйУчет, , Организация = &Организация) КАК ХозрасчетныйОстатки
		|ГДЕ
		|	(ХозрасчетныйОстатки.СуммаНУОстатокДт <> 0
		|			ИЛИ ХозрасчетныйОстатки.СуммаНУОстатокКт <> 0
		|			ИЛИ ХозрасчетныйОстатки.СуммаПРОстатокДт <> 0
		|			ИЛИ ХозрасчетныйОстатки.СуммаПРОстатокКт <> 0
		|			ИЛИ ХозрасчетныйОстатки.СуммаВРОстатокДт <> 0
		|			ИЛИ ХозрасчетныйОстатки.СуммаВРОстатокКт <> 0)";
	
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("Период",      Новый Граница(СтруктураПараметров.ДатаПерехода,ВидГраницы.Включая));
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		НачатьТранзакцию();
		
		ВспомогательныйСчет = ПланыСчетов.Хозрасчетный.Вспомогательный;
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Попытка
			ОперацияОбъект               = Документы.ОперацияБух.СоздатьДокумент();
			ОперацияОбъект.Дата          = СтруктураПараметров.ДатаПерехода;
			ОперацияОбъект.Организация   = СтруктураПараметров.Организация;
			ОперацияОбъект.Ответственный = Пользователи.ТекущийПользователь();
			ОперацияОбъект.Содержание    = НСтр("ru = 'Закрытие регистров и остатков НУ при переходе на УСН: регистр бухгалтерии ""Хозрасчетный"": (очистка остатков НУ).'");
			ОперацияОбъект.Комментарий   = НСтр("ru = '#Документ создан автоматически при переходе на УСН, операция - ""Очистка остатков НУ и регистров""'");
			ОперацияОбъект.Записать();
		Исключение
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
		Движение = ОперацияОбъект.Движения.Хозрасчетный;
		Движение.Записывать = Истина;
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Запись = Движение.Добавить();
			Запись.Период      = СтруктураПараметров.ДатаПерехода;
			Запись.Организация = ВыборкаДетальныеЗаписи.Организация;
			Если ВыборкаДетальныеЗаписи.СуммаНУОстатокДт <> 0
				Или ВыборкаДетальныеЗаписи.СуммаПРОстатокДт <> 0
				Или ВыборкаДетальныеЗаписи.СуммаВРОстатокДт <> 0 Тогда
				
				Запись.СчетДт = ВыборкаДетальныеЗаписи.Счет;
				Запись.СчетКт = ?(ВыборкаДетальныеЗаписи.Забалансовый, Неопределено, ВспомогательныйСчет);
				
				Запись.ВалютаДт        = ВыборкаДетальныеЗаписи.Валюта;
				Запись.ПодразделениеДт = ВыборкаДетальныеЗаписи.Подразделение;
				
				БухгалтерскийУчет.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, 1, ВыборкаДетальныеЗаписи.Субконто1);
				БухгалтерскийУчет.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, 2, ВыборкаДетальныеЗаписи.Субконто2);
				БухгалтерскийУчет.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, 3, ВыборкаДетальныеЗаписи.Субконто3);
				
				Запись.СуммаНУДт = - ВыборкаДетальныеЗаписи.СуммаНУОстатокДт;
				Запись.СуммаПРДт = - ВыборкаДетальныеЗаписи.СуммаПРОстатокДт;
				Запись.СуммаВРДт = - ВыборкаДетальныеЗаписи.СуммаВРОстатокДт;
				
			Иначе
				
				Запись.СчетДт = ?(ВыборкаДетальныеЗаписи.Забалансовый, Неопределено, ВспомогательныйСчет);
				Запись.СчетКт = ВыборкаДетальныеЗаписи.Счет;
				
				Запись.ВалютаКт        = ВыборкаДетальныеЗаписи.Валюта;
				Запись.ПодразделениеКт = ВыборкаДетальныеЗаписи.Подразделение;
				
				БухгалтерскийУчет.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, 1, ВыборкаДетальныеЗаписи.Субконто1);
				БухгалтерскийУчет.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, 2, ВыборкаДетальныеЗаписи.Субконто2);
				БухгалтерскийУчет.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, 3, ВыборкаДетальныеЗаписи.Субконто3);
				
				Запись.СуммаНУКт = - ВыборкаДетальныеЗаписи.СуммаНУОстатокКт;
				Запись.СуммаПРКт = - ВыборкаДетальныеЗаписи.СуммаПРОстатокКт;
				Запись.СуммаВРКт = - ВыборкаДетальныеЗаписи.СуммаВРОстатокКт;
				
			КонецЕсли;
		КонецЦикла;
		
		Попытка
			Движение.ДополнительныеСвойства.Вставить("СменаНалоговогоУчета", Истина);
			ОперацияОбъект.Движения.Записать();
			// запоминаем созданный документ
			Если СтруктураПараметров.Свойство("ДокументыОперации") Тогда
				СтруктураПараметров.ДокументыОперации.Добавить(ОперацияОбъект.Ссылка);
			КонецЕсли;
		Исключение
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
		ЗафиксироватьТранзакцию();
		
		СформироватьДвиженияПоРегиструХозрасчетный(СтруктураПараметров);
		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияПоРегиструНДСПредъявленный(СтруктураПараметров)

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	НДСПредъявленныйОстатки.Организация,
		|	НДСПредъявленныйОстатки.СчетФактура,
		|	НДСПредъявленныйОстатки.ВидЦенности,
		|	НДСПредъявленныйОстатки.СтавкаНДС,
		|	НДСПредъявленныйОстатки.СчетУчетаНДС,
		|	НДСПредъявленныйОстатки.Поставщик,
		|	НДСПредъявленныйОстатки.ДатаОплаты,
		|	НДСПредъявленныйОстатки.ДоговорКонтрагента,
		|	НДСПредъявленныйОстатки.ИсправленныйСчетФактура,
		|	-НДСПредъявленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
		|	-НДСПредъявленныйОстатки.НДСОстаток КАК НДС,
		|	&Период
		|ИЗ
		|	РегистрНакопления.НДСПредъявленный.Остатки(&Граница, Организация = &Организация) КАК НДСПредъявленныйОстатки
		|ГДЕ
		|	(НДСПредъявленныйОстатки.НДСОстаток <> 0
		|			ИЛИ НДСПредъявленныйОстатки.СуммаБезНДСОстаток <> 0)";
	
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("Граница", Новый Граница(СтруктураПараметров.ДатаПерехода,ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Период", СтруктураПараметров.ДатаПерехода);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		НачатьТранзакцию();
		СтруктураПараметров.Вставить("РезультатЗапроса", Результат);
		СтруктураПараметров.Вставить("ИмяРегистра", "НДСПредъявленный");
		СформироватьДокументОперацияБух(СтруктураПараметров);
		ЗафиксироватьТранзакцию();
		
		СформироватьДвиженияПоРегиструНДСПредъявленный(СтруктураПараметров);
	Иначе
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьДвиженияПоРегиструНДСсАвансов(СтруктураПараметров)

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	НДСсАвансовОстатки.Организация,
		|	НДСсАвансовОстатки.ВидЦенности,
		|	НДСсАвансовОстатки.СчетФактура,
		|	НДСсАвансовОстатки.Покупатель,
		|	НДСсАвансовОстатки.ДоговорКонтрагента,
		|	НДСсАвансовОстатки.СтавкаНДС,
		|	НДСсАвансовОстатки.ВалютаАванса,
		|	-НДСсАвансовОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
		|	-НДСсАвансовОстатки.НДСОстаток КАК НДС,
		|	-НДСсАвансовОстатки.ВалютнаяСуммаСНДСОстаток КАК ВалютнаяСуммаСНДС,
		|	&Период
		|ИЗ
		|	РегистрНакопления.НДСсАвансов.Остатки(&Граница, Организация = &Организация) КАК НДСсАвансовОстатки
		|ГДЕ
		|	(НДСсАвансовОстатки.СуммаБезНДСОстаток <> 0
		|			ИЛИ НДСсАвансовОстатки.НДСОстаток <> 0
		|			ИЛИ НДСсАвансовОстатки.ВалютнаяСуммаСНДСОстаток <> 0)";
	
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("Граница", Новый Граница(СтруктураПараметров.ДатаПерехода,ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Период", СтруктураПараметров.ДатаПерехода);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		НачатьТранзакцию();
		СтруктураПараметров.Вставить("РезультатЗапроса", Результат);
		СтруктураПараметров.Вставить("ИмяРегистра", "НДСсАвансов");
		СформироватьДокументОперацияБух(СтруктураПараметров);
		ЗафиксироватьТранзакцию();
		
		СформироватьДвиженияПоРегиструНДСсАвансов(СтруктураПараметров);
	Иначе
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьДвиженияПоРегиструНДСНачисленный(СтруктураПараметров)

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	НДСНачисленныйОстатки.Организация,
		|	НДСНачисленныйОстатки.СчетФактура,
		|	НДСНачисленныйОстатки.ВидЦенности,
		|	НДСНачисленныйОстатки.СтавкаНДС,
		|	НДСНачисленныйОстатки.Покупатель,
		|	НДСНачисленныйОстатки.ВидНачисления,
		|	НДСНачисленныйОстатки.ДоговорКонтрагента,
		|	НДСНачисленныйОстатки.ДатаОплаты,
		|	-НДСНачисленныйОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
		|	-НДСНачисленныйОстатки.НДСОстаток КАК НДС,
		|	&Период
		|ИЗ
		|	РегистрНакопления.НДСНачисленный.Остатки(&Граница, Организация = &Организация) КАК НДСНачисленныйОстатки
		|ГДЕ
		|	(НДСНачисленныйОстатки.СуммаБезНДСОстаток <> 0
		|			ИЛИ НДСНачисленныйОстатки.НДСОстаток <> 0)";
	
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("Граница", Новый Граница(СтруктураПараметров.ДатаПерехода,ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Период", СтруктураПараметров.ДатаПерехода);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		НачатьТранзакцию();
		СтруктураПараметров.Вставить("РезультатЗапроса", Результат);
		СтруктураПараметров.Вставить("ИмяРегистра", "НДСНачисленный");
		СформироватьДокументОперацияБух(СтруктураПараметров);
		ЗафиксироватьТранзакцию();
		
		СформироватьДвиженияПоРегиструНДСНачисленный(СтруктураПараметров);
	Иначе
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьДвиженияПоРегиструНДСАвансыПоДоговорамКомиссии(СтруктураПараметров)

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	НДСАвансыПоДоговорамКомиссииОстатки.Организация,
		|	НДСАвансыПоДоговорамКомиссииОстатки.Комиссионер,
		|	НДСАвансыПоДоговорамКомиссииОстатки.СчетФактура,
		|	НДСАвансыПоДоговорамКомиссииОстатки.СтавкаНДС,
		|	НДСАвансыПоДоговорамКомиссииОстатки.Покупатель,
		|	НДСАвансыПоДоговорамКомиссииОстатки.ДатаСобытия,
		|	-НДСАвансыПоДоговорамКомиссииОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
		|	-НДСАвансыПоДоговорамКомиссииОстатки.НДСОстаток КАК НДС,
		|	&Период
		|ИЗ
		|	РегистрНакопления.НДСАвансыПоДоговорамКомиссии.Остатки(&Граница, Организация = &Организация) КАК НДСАвансыПоДоговорамКомиссииОстатки
		|ГДЕ
		|	(НДСАвансыПоДоговорамКомиссииОстатки.СуммаБезНДСОстаток <> 0
		|			ИЛИ НДСАвансыПоДоговорамКомиссииОстатки.НДСОстаток <> 0)";
		
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("Граница", Новый Граница(СтруктураПараметров.ДатаПерехода,ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Период", СтруктураПараметров.ДатаПерехода);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		НачатьТранзакцию();
		СтруктураПараметров.Вставить("РезультатЗапроса", Результат);
		СтруктураПараметров.Вставить("ИмяРегистра", "НДСАвансыПоДоговорамКомиссии");
		СформироватьДокументОперацияБух(СтруктураПараметров);
		ЗафиксироватьТранзакцию();
		
		СформироватьДвиженияПоРегиструНДСАвансыПоДоговорамКомиссии(СтруктураПараметров);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияПоРегиструНДСКосвенныеРасходы(СтруктураПараметров)

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	НДСКосвенныеРасходыОстатки.Организация,
		|	НДСКосвенныеРасходыОстатки.СчетФактура,
		|	НДСКосвенныеРасходыОстатки.ВидЦенности,
		|	НДСКосвенныеРасходыОстатки.СтавкаНДС,
		|	НДСКосвенныеРасходыОстатки.СчетУчетаНДС,
		|	НДСКосвенныеРасходыОстатки.НДСВключенВСтоимость,
		|	-НДСКосвенныеРасходыОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
		|	-НДСКосвенныеРасходыОстатки.НДСОстаток КАК НДС,
		|	&Период
		|ИЗ
		|	РегистрНакопления.НДСКосвенныеРасходы.Остатки(&Граница, Организация = &Организация) КАК НДСКосвенныеРасходыОстатки
		|ГДЕ
		|	(НДСКосвенныеРасходыОстатки.СуммаБезНДСОстаток <> 0
		|			ИЛИ НДСКосвенныеРасходыОстатки.НДСОстаток <> 0)";
	
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("Граница", Новый Граница(СтруктураПараметров.ДатаПерехода,ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Период", СтруктураПараметров.ДатаПерехода);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		НачатьТранзакцию();
		СтруктураПараметров.Вставить("РезультатЗапроса", Результат);
		СтруктураПараметров.Вставить("ИмяРегистра", "НДСКосвенныеРасходы");
		СформироватьДокументОперацияБух(СтруктураПараметров);
		ЗафиксироватьТранзакцию();
		
		СформироватьДвиженияПоРегиструНДСКосвенныеРасходы(СтруктураПараметров);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияПоРегиструНДСПоПриобретеннымЦенностям(СтруктураПараметров)

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	НДСПоПриобретеннымЦенностямОстатки.Организация,
		|	НДСПоПриобретеннымЦенностямОстатки.СчетУчета,
		|	НДСПоПриобретеннымЦенностямОстатки.Номенклатура,
		|	НДСПоПриобретеннымЦенностямОстатки.Склад,
		|	НДСПоПриобретеннымЦенностямОстатки.Партия,
		|	НДСПоПриобретеннымЦенностямОстатки.СчетФактура,
		|	НДСПоПриобретеннымЦенностямОстатки.НДСВключенВСтоимость,
		|	НДСПоПриобретеннымЦенностямОстатки.ВидЦенности,
		|	НДСПоПриобретеннымЦенностямОстатки.СчетУчетаНДС,
		|	НДСПоПриобретеннымЦенностямОстатки.СтавкаНДС,
		|	-НДСПоПриобретеннымЦенностямОстатки.КоличествоОстаток КАК Количество,
		|	-НДСПоПриобретеннымЦенностямОстатки.СтоимостьОстаток КАК Стоимость,
		|	-НДСПоПриобретеннымЦенностямОстатки.НДСОстаток КАК НДС,
		|	&Период
		|ИЗ
		|	РегистрНакопления.НДСПоПриобретеннымЦенностям.Остатки(&Граница, Организация = &Организация) КАК НДСПоПриобретеннымЦенностямОстатки
		|ГДЕ
		|	(НДСПоПриобретеннымЦенностямОстатки.КоличествоОстаток <> 0
		|			ИЛИ НДСПоПриобретеннымЦенностямОстатки.СтоимостьОстаток <> 0
		|			ИЛИ НДСПоПриобретеннымЦенностямОстатки.НДСОстаток <> 0)";
	
	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("Граница", Новый Граница(СтруктураПараметров.ДатаПерехода,ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Период", СтруктураПараметров.ДатаПерехода);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		НачатьТранзакцию();
		СтруктураПараметров.Вставить("РезультатЗапроса", Результат);
		СтруктураПараметров.Вставить("ИмяРегистра", "НДСПоПриобретеннымЦенностям");
		СформироватьДокументОперацияБух(СтруктураПараметров);
		ЗафиксироватьТранзакцию();
		
		СформироватьДвиженияПоРегиструНДСПоПриобретеннымЦенностям(СтруктураПараметров);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДвиженияПоРегиструНДСПредъявленныйРеализация0(СтруктураПараметров)

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	НДСПредъявленныйРеализация0Остатки.Организация,
		|	НДСПредъявленныйРеализация0Остатки.СчетФактура,
		|	НДСПредъявленныйРеализация0Остатки.Состояние,
		|	НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки,
		|	НДСПредъявленныйРеализация0Остатки.ВидЦенности,
		|	НДСПредъявленныйРеализация0Остатки.СтавкаНДС,
		|	НДСПредъявленныйРеализация0Остатки.СчетУчетаНДС,
		|	-НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
		|	-НДСПредъявленныйРеализация0Остатки.НДСОстаток КАК НДС,
		|	&Период
		|ИЗ
		|	РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(&Граница, Организация = &Организация) КАК НДСПредъявленныйРеализация0Остатки
		|ГДЕ
		|	(НДСПредъявленныйРеализация0Остатки.СуммаБезНДСОстаток <> 0
		|			ИЛИ НДСПредъявленныйРеализация0Остатки.НДСОстаток <> 0)";

	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("Граница", Новый Граница(СтруктураПараметров.ДатаПерехода,ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Период", СтруктураПараметров.ДатаПерехода);
	
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		НачатьТранзакцию();
		СтруктураПараметров.Вставить("РезультатЗапроса", Результат);
		СтруктураПараметров.Вставить("ИмяРегистра", "НДСПредъявленныйРеализация0");
		СформироватьДокументОперацияБух(СтруктураПараметров);
		ЗафиксироватьТранзакцию();
		
		СформироватьДвиженияПоРегиструНДСПредъявленныйРеализация0(СтруктураПараметров);
	Иначе
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьДвиженияПоРегиструНДСРеализация0(СтруктураПараметров)

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	НДСРеализация0Остатки.Организация,
		|	НДСРеализация0Остатки.Состояние,
		|	НДСРеализация0Остатки.СчетФактура,
		|	НДСРеализация0Остатки.ВидЦенности,
		|	НДСРеализация0Остатки.СтавкаНДС,
		|	НДСРеализация0Остатки.Покупатель,
		|	-НДСРеализация0Остатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
		|	-НДСРеализация0Остатки.НДСОстаток КАК НДС,
		|	-НДСРеализация0Остатки.КурсоваяРазницаОстаток КАК КурсоваяРазница,
		|	&Период
		|ИЗ
		|	РегистрНакопления.НДСРеализация0.Остатки(&Граница, Организация = &Организация) КАК НДСРеализация0Остатки
		|ГДЕ
		|	(НДСРеализация0Остатки.СуммаБезНДСОстаток <> 0
		|			ИЛИ НДСРеализация0Остатки.НДСОстаток <> 0
		|			ИЛИ НДСРеализация0Остатки.КурсоваяРазницаОстаток <> 0)";

	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("Граница", Новый Граница(СтруктураПараметров.ДатаПерехода,ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Период", СтруктураПараметров.ДатаПерехода);

	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		НачатьТранзакцию();
		СтруктураПараметров.Вставить("РезультатЗапроса", Результат);
		СтруктураПараметров.Вставить("ИмяРегистра", "НДСРеализация0");
		СформироватьДокументОперацияБух(СтруктураПараметров);
		ЗафиксироватьТранзакцию();
		
		СформироватьДвиженияПоРегиструНДСРеализация0(СтруктураПараметров);
	Иначе
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьДвиженияПоРегиструИПИныеМатериальныеРасходы(СтруктураПараметров)

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ИПИныеМатериальныеРасходыОстатки.Организация,
		|	ИПИныеМатериальныеРасходыОстатки.НоменклатурнаяГруппа,
		|	ИПИныеМатериальныеРасходыОстатки.ХарактерДеятельности,
		|	ИПИныеМатериальныеРасходыОстатки.СтатьяЗатрат,
		|	ИПИныеМатериальныеРасходыОстатки.Партия,
		|	ИПИныеМатериальныеРасходыОстатки.ДокументОплаты,
		|	ИПИныеМатериальныеРасходыОстатки.МПЗ,
		|	ИПИныеМатериальныеРасходыОстатки.ПартияМПЗ,
		|	-ИПИныеМатериальныеРасходыОстатки.КоличествоОстаток КАК Количество,
		|	-ИПИныеМатериальныеРасходыОстатки.СуммаОстаток КАК Сумма,
		|	-ИПИныеМатериальныеРасходыОстатки.НДСОстаток КАК НДС,
		|	&Период
		|ИЗ
		|	РегистрНакопления.ИПИныеМатериальныеРасходы.Остатки(&Граница, Организация = &Организация) КАК ИПИныеМатериальныеРасходыОстатки
		|ГДЕ
		|	(ИПИныеМатериальныеРасходыОстатки.КоличествоОстаток <> 0
		|			ИЛИ ИПИныеМатериальныеРасходыОстатки.СуммаОстаток <> 0
		|			ИЛИ ИПИныеМатериальныеРасходыОстатки.НДСОстаток <> 0)";

	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("Граница", Новый Граница(СтруктураПараметров.ДатаПерехода,ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Период", СтруктураПараметров.ДатаПерехода);

	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		НачатьТранзакцию();
		СтруктураПараметров.Вставить("РезультатЗапроса", Результат);
		СтруктураПараметров.Вставить("ИмяРегистра", "ИПИныеМатериальныеРасходы");
		СформироватьДокументОперацияБух(СтруктураПараметров);
		ЗафиксироватьТранзакцию();
		
		СформироватьДвиженияПоРегиструИПИныеМатериальныеРасходы(СтруктураПараметров);
	Иначе
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьДвиженияПоРегиструИПМПЗ(СтруктураПараметров)

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ИПМПЗОстатки.Организация,
		|	ИПМПЗОстатки.НоменклатурнаяГруппа,
		|	ИПМПЗОстатки.ХарактерДеятельности,
		|	ИПМПЗОстатки.ВидМПЗ,
		|	ИПМПЗОстатки.Номенклатура,
		|	ИПМПЗОстатки.Партия,
		|	ИПМПЗОстатки.ДокументОплаты,
		|	-ИПМПЗОстатки.КоличествоОстаток КАК Количество,
		|	-ИПМПЗОстатки.СуммаОстаток КАК Сумма,
		|	-ИПМПЗОстатки.НДСОстаток КАК НДС,
		|	&Период
		|ИЗ
		|	РегистрНакопления.ИПМПЗ.Остатки(&Граница, Организация = &Организация) КАК ИПМПЗОстатки
		|ГДЕ
		|	(ИПМПЗОстатки.КоличествоОстаток <> 0
		|			ИЛИ ИПМПЗОстатки.СуммаОстаток <> 0
		|			ИЛИ ИПМПЗОстатки.НДСОстаток <> 0)";

	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("Граница", Новый Граница(СтруктураПараметров.ДатаПерехода,ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Период", СтруктураПараметров.ДатаПерехода);

	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		НачатьТранзакцию();
		СтруктураПараметров.Вставить("РезультатЗапроса", Результат);
		СтруктураПараметров.Вставить("ИмяРегистра", "ИПМПЗ");
		СформироватьДокументОперацияБух(СтруктураПараметров);
		ЗафиксироватьТранзакцию();
		
		СформироватьДвиженияПоРегиструИПМПЗ(СтруктураПараметров);
	Иначе
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьДвиженияПоРегиструИПМПЗОтгруженные(СтруктураПараметров)

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ИПМПЗОтгруженныеОстатки.Организация,
		|	ИПМПЗОтгруженныеОстатки.НоменклатурнаяГруппа,
		|	ИПМПЗОтгруженныеОстатки.ХарактерДеятельности,
		|	ИПМПЗОтгруженныеОстатки.ВидМПЗ,
		|	ИПМПЗОтгруженныеОстатки.Номенклатура,
		|	ИПМПЗОтгруженныеОстатки.Партия,
		|	ИПМПЗОтгруженныеОстатки.ДокументОплаты,
		|	ИПМПЗОтгруженныеОстатки.ДокументОтгрузки,
		|	-ИПМПЗОтгруженныеОстатки.КоличествоОстаток КАК Количество,
		|	-ИПМПЗОтгруженныеОстатки.СуммаОстаток КАК Сумма,
		|	-ИПМПЗОтгруженныеОстатки.НДСОстаток КАК НДС,
		|	-ИПМПЗОтгруженныеОстатки.ВыручкаОстаток КАК Выручка,
		|	-ИПМПЗОтгруженныеОстатки.НДСНачисленныйОстаток КАК НДСНачисленный,
		|	&Период
		|ИЗ
		|	РегистрНакопления.ИПМПЗОтгруженные.Остатки(&Граница, Организация = &Организация) КАК ИПМПЗОтгруженныеОстатки
		|ГДЕ
		|	(ИПМПЗОтгруженныеОстатки.КоличествоОстаток <> 0
		|			ИЛИ ИПМПЗОтгруженныеОстатки.СуммаОстаток <> 0
		|			ИЛИ ИПМПЗОтгруженныеОстатки.НДСОстаток <> 0
		|			ИЛИ ИПМПЗОтгруженныеОстатки.ВыручкаОстаток <> 0
		|			ИЛИ ИПМПЗОтгруженныеОстатки.НДСНачисленныйОстаток <> 0)";

	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("Граница", Новый Граница(СтруктураПараметров.ДатаПерехода,ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Период", СтруктураПараметров.ДатаПерехода);

	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		НачатьТранзакцию();
		СтруктураПараметров.Вставить("РезультатЗапроса", Результат);
		СтруктураПараметров.Вставить("ИмяРегистра", "ИПМПЗОтгруженные");
		СформироватьДокументОперацияБух(СтруктураПараметров);
		ЗафиксироватьТранзакцию();
		
		СформироватьДвиженияПоРегиструИПМПЗОтгруженные(СтруктураПараметров);
	Иначе
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьДвиженияПоРегиструИПРБП(СтруктураПараметров)

	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1000
		|	ИПРБПОстатки.Организация,
		|	ИПРБПОстатки.НоменклатурнаяГруппа,
		|	ИПРБПОстатки.ХарактерДеятельности,
		|	ИПРБПОстатки.ВидРасхода,
		|	ИПРБПОстатки.Партия,
		|	ИПРБПОстатки.ДокументОплаты,
		|	-ИПРБПОстатки.СуммаОстаток КАК Сумма,
		|	-ИПРБПОстатки.НДСОстаток КАК НДС,
		|	&Период
		|ИЗ
		|	РегистрНакопления.ИПРБП.Остатки(&Граница, Организация = &Организация) КАК ИПРБПОстатки
		|ГДЕ
		|	(ИПРБПОстатки.СуммаОстаток <> 0
		|			ИЛИ ИПРБПОстатки.НДСОстаток <> 0)";

	Запрос.УстановитьПараметр("Организация", СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("Граница", Новый Граница(СтруктураПараметров.ДатаПерехода,ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Период", СтруктураПараметров.ДатаПерехода);

	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		НачатьТранзакцию();
		СтруктураПараметров.Вставить("РезультатЗапроса", Результат);
		СтруктураПараметров.Вставить("ИмяРегистра", "ИПРБП");
		СформироватьДокументОперацияБух(СтруктураПараметров);
		ЗафиксироватьТранзакцию();
		
		СформироватьДвиженияПоРегиструИПРБП(СтруктураПараметров);
	Иначе
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьДокументОперацияБух(СтруктураПараметров)

	Попытка
		ОперацияОбъект               = Документы.ОперацияБух.СоздатьДокумент();
		ОперацияОбъект.Дата          = СтруктураПараметров.ДатаПерехода;
		ОперацияОбъект.Организация   = СтруктураПараметров.Организация;
		ОперацияОбъект.Ответственный = Пользователи.ТекущийПользователь();
		
		ИмяРегистра = "";
		МетаданныеРегистра = Неопределено;
		ОписаниеОбработанногоРегистра = "";
		Если СтруктураПараметров.Свойство("ИмяРегистра", ИмяРегистра) Тогда
			МетаданныеРегистра = Метаданные.РегистрыНакопления.Найти(ИмяРегистра);
			Если Метаданные.РегистрыНакопления.Содержит(МетаданныеРегистра) Тогда
				ОписаниеОбработанногоРегистра = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
														НСтр("ru = ': регистр накопления ""%1"" (очистка остатков)'"),
														МетаданныеРегистра.Синоним);
			КонецЕсли;
		Иначе
			ОписаниеОбработанногоРегистра = ".";
		КонецЕсли;
		
		ОперацияОбъект.Содержание	 = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												НСтр("ru = 'Закрытие регистров и остатков НУ при переходе на УСН%1'"),
												ОписаниеОбработанногоРегистра);
		ОперацияОбъект.Комментарий = НСтр("ru = '#Документ создан автоматически при переходе на УСН, операция - ""Очистка остатков НУ и регистров""'");
		ОперацияОбъект.Записать();
		// запоминаем созданный документ
		Если СтруктураПараметров.Свойство("ДокументыОперации") Тогда
			СтруктураПараметров.ДокументыОперации.Добавить(ОперацияОбъект.Ссылка);
		КонецЕсли;
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	НаборЗаписей = ОперацияОбъект.Движения[СтруктураПараметров.ИмяРегистра];
	НаборЗаписей.Записывать = Истина;
	
	ВыборкаДетальныеЗаписи = СтруктураПараметров.РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ВыборкаДетальныеЗаписи);
	КонецЦикла;
	
	Попытка
		ОперацияОбъект.Движения.Записать();
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;

КонецПроцедуры

Процедура ЗафиксироватьВыполнениеОперацииПерехода(СтруктураПараметров, ДокументыОперации = Неопределено,  ФиксироватьУстаревшие = Ложь, Отказ = Ложь)

	ПараметрыОперации = Новый Структура;
	МассивДокументов = Новый Массив;
	
	ПараметрыОперации.Вставить("ВидОперации",         СтруктураПараметров.ВидОперации);
	ПараметрыОперации.Вставить("Организация",         СтруктураПараметров.Организация);
	ПараметрыОперации.Вставить("ДатаПерехода",        СтруктураПараметров.ДатаПерехода);
	ПараметрыОперации.Вставить("НаправлениеПерехода", Перечисления.НаправленияИзмененийНалоговыхРежимов.ОСНнаУСН);
	ПараметрыОперации.Вставить("Состояние",           Перечисления.ВидыСостоянийРегламентныхОпераций.Выполнено);
	
	ПараметрыОперации.Вставить("ДокументыОперации", ДокументыОперации);
	
	УчетУСН.ОтразитьВыполнениеОперацииПереходаНаУСН(ПараметрыОперации, ФиксироватьУстаревшие, Отказ);

КонецПроцедуры

Процедура УдалитьСозданныеРанееОперации(Параметры)
	
	НачатьТранзакцию();
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаПерехода", НачалоДня(Параметры.ДатаПерехода));
	Запрос.УстановитьПараметр("Организация",  Параметры.Организация);
	Запрос.УстановитьПараметр("ВидОперации",  Параметры.ВидОперации);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыОперацийИзмененияНалоговогоРежима.ДокументОперации КАК ДокументОперации
	|ИЗ
	|	РегистрСведений.ДокументыОперацийИзмененияНалоговогоРежима КАК ДокументыОперацийИзмененияНалоговогоРежима
	|ГДЕ
	|	ДокументыОперацийИзмененияНалоговогоРежима.Организация = &Организация
	|	И ДокументыОперацийИзмененияНалоговогоРежима.НаправлениеПерехода = ЗНАЧЕНИЕ(Перечисление.НаправленияИзмененийНалоговыхРежимов.ОСНнаУСН)
	|	И ДокументыОперацийИзмененияНалоговогоРежима.ДатаПерехода = &ДатаПерехода
	|	И ДокументыОперацийИзмененияНалоговогоРежима.ВидОперации = &ВидОперации"
	;
	
	ТаблицаСозданныхДокументов = Запрос.Выполнить().Выгрузить();
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить("Документ.ОперацияБух");
	ЭлементБлокировки.ИсточникДанных = ТаблицаСозданныхДокументов;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ссылка", "ДокументОперации");
	
	Попытка
		Блокировка.Заблокировать();
		Для каждого СтрокаТаблицы Из ТаблицаСозданныхДокументов Цикл
			ДокументОбъект = СтрокаТаблицы.ДокументОперации.ПолучитьОбъект();
			ДокументОбъект.УстановитьПометкуУдаления(Истина);
		КонецЦикла;
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли