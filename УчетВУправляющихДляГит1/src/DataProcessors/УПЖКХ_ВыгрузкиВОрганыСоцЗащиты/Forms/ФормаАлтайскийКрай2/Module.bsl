
//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область Форма

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
	ВосстановитьНастройкиНаСервере();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии(Отказ)
	
	ОбновитьПериод();
	ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиенте();
	УправлениеФормой();
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьНастройкиНаСервере();
	
КонецПроцедуры // ПередЗакрытием()

////////////////////////
// Сохраняемые настройки

&НаСервере
// Процедура восстановления настроек.
//
Процедура ВосстановитьНастройкиНаСервере()
	
	СтруктураНастроек = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("ВыгрузкаАлтайскийКрай_Варинат2", "ПараметрыВыгрузки");
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		
		// Файл загрузки.
		врИмяФайлаЗагрузки = Неопределено;
		Если СтруктураНастроек.Свойство("ИмяФайлаЗагрузки", врИмяФайлаЗагрузки) Тогда
			Объект.ИмяФайлаЗагрузки = врИмяФайлаЗагрузки;
		КонецЕсли;
		
		// Каталог выгрузки.
		врИмяКаталогаВыгрузки = Неопределено;
		Если СтруктураНастроек.Свойство("ИмяКаталогаВыгрузки", врИмяКаталогаВыгрузки) Тогда
			Объект.ИмяКаталогаВыгрузки = врИмяКаталогаВыгрузки;
		КонецЕсли;
		
		// Таблица кодов услуг.
		врТаблицаКодовУслуг = Неопределено;
		Если СтруктураНастроек.Свойство("АлтайскийКрай_ТаблицаКодовУслуг", врТаблицаКодовУслуг) Тогда
			Если ТипЗнч(врТаблицаКодовУслуг) = Тип("ТаблицаЗначений") Тогда
				Объект.АлтайскийКрай_ТаблицаКодовУслуг.Загрузить(врТаблицаКодовУслуг);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьНастройкиНаСервере()

&НаСервере
// Процедура сохранения настроек.
//
Процедура СохранитьНастройкиНаСервере()
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("ИмяФайлаЗагрузки",                Объект.ИмяФайлаЗагрузки);
	СтруктураНастроек.Вставить("ИмяКаталогаВыгрузки",             Объект.ИмяКаталогаВыгрузки);
	СтруктураНастроек.Вставить("АлтайскийКрай_ТаблицаКодовУслуг", Объект.АлтайскийКрай_ТаблицаКодовУслуг.Выгрузить());
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("ВыгрузкаАлтайскийКрай_Варинат2", "ПараметрыВыгрузки", СтруктураНастроек);
	
КонецПроцедуры // СохранитьНастройкиНаСервере()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ПериодСтрокой

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Модифицированность);
	
КонецПроцедуры // ПериодСтрокойПриИзменении()

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры // ПериодСтрокойНачалоВыбора()

&НаКлиенте
// Обработчик события "Регулирование" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Направление, Модифицированность);
	
КонецПроцедуры // ПериодСтрокойРегулирование()

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодСтрокойАвтоПодбор()

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодСтрокойОкончаниеВводаТекста()

&НаКлиенте
// Изменяет период на форме выгрузки.
//
// Параметры:
//  Период - Дата - устанавливаемый период.
//
Процедура ОбновитьПериод(Период = Неопределено)
	
	Объект.Период = ?(Период = Неопределено, УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("РабочаяДата"), КонецМесяца(Период));
	
	Если Объект.Период = '00010101' Тогда
		Объект.Период = ТекущаяДата();
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры // ОбновитьПериод()

#КонецОбласти

#Область ФайлЗагрузки

////////////////////////
// Файл загрузки

&НаКлиенте
// Обработчик события "НачалоВыбора" поля ввода ИмяФайлаЗагрузки.
//
Процедура ИмяФайлаЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_РаботаСФайламиКлиент.ВыбратьФайл(ЭтаФорма, "Файл данных (*.dbf)|*.dbf",
											"dbf", , Объект.ИмяФайлаЗагрузки, );
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик заверешения работы процедуры "ДиалогВыбораФайла.Показать".
//
Процедура ВыбратьФайлЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		
		Файл = Новый Файл(ДиалогВыбораФайла.ПолноеИмяФайла);
		
		ИмяФайла = Файл.ИмяБезРасширения;
		Если СтрДлина(ИмяФайла) <= 8 Тогда
			Объект.ИмяФайлаЗагрузки = ДиалогВыбораФайла.ПолноеИмяФайла;
		Иначе
			ПоказатьПредупреждение(, "Длина файла загрузки не может быть больше 8 символов. Переименуйте выбираемый файл!");
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ИмяФайлаЗагрузкиНачалоВыбора()

&НаКлиенте
// Обработчик события "Открытие" поля ввода ИмяФайлаЗагрузки.
//
Процедура ИмяФайлаЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УПЖКХ_РаботаСФайламиКлиент.ОткрытиеФайлаКаталога(Объект.ИмяФайлаЗагрузки);
	
КонецПроцедуры

#КонецОбласти

#Область КаталогВыгрузки

////////////////////////
// Каталог выгрузки

&НаКлиенте
// Обработчик события "НачалоВыбора" поля ввода КаталогВыгрузки.
//
Процедура КаталогВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_РаботаСФайламиКлиент.ВыбратьКаталог(ЭтаФорма, "Выбор каталога выгрузки", Объект.ИмяКаталогаВыгрузки);
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик результата работы процедуры "ДиалогВыбораФайла.Показать".
//
Процедура ВыбратьКаталогЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		Объект.ИмяКаталогаВыгрузки = ДиалогВыбораФайла.Каталог;
	КонецЕсли;
	
КонецПроцедуры // КаталогВыгрузкиНачалоВыбора()

&НаКлиенте
// Обработчик события "Открытие" поля ввода КаталогВыгрузки.
//
Процедура КаталогВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УПЖКХ_РаботаСФайламиКлиент.ОткрытиеФайлаКаталога(Объект.ИмяКаталогаВыгрузки, Истина);
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область Настройка

////////////////////////
// Команда Настройка

&НаКлиенте
// Обработчик команды "КомандаНастройка".
//
Процедура КомандаНастройка(Команда)
	
	АдресНастроекВХранилище = ПоместитьНастройкиВХранилище();
	
	// Передаем вид разреза выгрузки и заполняемые настройки в параметры открытия формы настроек.
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("ВыгрузкаВРазрезеУслуг",   Объект.ВыгрузкаВРазрезеУслуг);
	ПараметрыОткрытияФормы.Вставить("АдресНастроекВХранилище", АдресНастроекВХранилище);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаНастройкаЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты.Форма.АлтайскийКрай2_ФормаНастройки", ПараметрыОткрытияФормы, ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры // КомандаНастройка()

&НаКлиенте
// Обработчик результата опроса команды "КомандаНастройка".
//
Процедура КомандаНастройкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ПолучитьНастройкиИзХранилища(Результат);
	КонецЕсли;
	
КонецПроцедуры // КомандаНастройкаЗавершение()

////////////////////////
// Работа с временным хранилищем

&НаСервере
// Помещает данные во временное хранилище для передачи их в форму настройки.
//
// Возвращаемое значение:
//  Строка - адрес настроек в хранилище.
//
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("АлтайскийКрай_ТаблицаКодовУслуг", Объект.АлтайскийКрай_ТаблицаКодовУслуг.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции // ПоместитьДанныеВХранилище()

&НаСервере
// Помещает таблицу услуг во временное хранилище.
//
Функция ПолучитьНастройкиИзХранилища(АдресУслугВХранилище)
	
	СтруктураНастроек = ПолучитьИзВременногоХранилища(АдресУслугВХранилище);
	
	// Таблица кодов услуг.
	врТаблицаКодовУслуг = Неопределено;
	Если СтруктураНастроек.Свойство("АлтайскийКрай_ТаблицаКодовУслуг", врТаблицаКодовУслуг) Тогда
		Если ТипЗнч(врТаблицаКодовУслуг) = Тип("ТаблицаЗначений") Тогда
			Объект.АлтайскийКрай_ТаблицаКодовУслуг.Загрузить(врТаблицаКодовУслуг);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // ПолучитьНастройкиИзХранилища()

#КонецОбласти

#Область КомандаЗагрузить

////////////////////
// Загрузить из файла

&НаКлиенте
// Обработчик команды "КомандаЗагрузить".
//
Процедура КомандаЗагрузить(Команда)
	
	//Загрузка
	Если Объект.Период = '00010101' Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не выбран период выгрузки!");
		Возврат;
	КонецЕсли;
	
	Если Объект.Организация.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не выбрана организация!");
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаЗагрузитьОбработкаЗагрузки", ЭтаФорма);
	
	Если РасширениеПодключено Тогда
		МассивИменФайлов = Новый Массив();
		МассивИменФайлов.Добавить(Объект.ИмяФайлаЗагрузки);
		
		МассивЗагружаемыхФайлов = ПодготовитьМассивПередаваемыхФайловДляЗагрузки(МассивИменФайлов);
		Если МассивЗагружаемыхФайлов = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		СоответствиеИмениИАдреса = Новый Соответствие();
		СоответствиеИмениИАдреса.Вставить("",);
		МассивЗагружаемыхФайлов = УПЖКХ_РаботаСФайламиСервер.ПолучитьМассивПередаваемыхФайлов(СоответствиеИмениИАдреса);
	КонецЕсли;
	
	УПЖКХ_РаботаСФайламиКлиент.ЗагрузитьФайл(РасширениеПодключено, ОписаниеОповещения, МассивЗагружаемыхФайлов);
	
КонецПроцедуры // КомандаЗагрузить()

&НаСервереБезКонтекста
// Возвращает сформированный массив описаний передаваемых файлов.
//  Параметры:
//   СоответствиеИмениИАдреса - Соответствие - массив соответствий имени файла и его адреса в хранилище
//
// Возвращаемое значение:
//  МассивПередаваемыхФайлов - Массив - массив описаний передаваемых файлов.
//
Функция ПолучитьМассивПередаваемыхФайлов(СоответствиеИмениИАдреса) Экспорт
	
	Возврат УПЖКХ_РаботаСФайламиСервер.ПолучитьМассивПередаваемыхФайлов(СоответствиеИмениИАдреса);
	
КонецФункции // ПолучитьМассивПередаваемыхФайлов()

&НаСервереБезКонтекста
// Возвращает массив загружаемых файлов по переданным именам.
//
// Параметры:
//  МассивИменФайлов - Массив - массив, содержащий полные имена передаваемых файлов.
//
// Возвращаемое значение:
//  МассивПередаваемыхФайлов - Массив - массив описаний передаваемых файлов.
Функция ПодготовитьМассивПередаваемыхФайловДляЗагрузки(МассивИменФайлов)
	
	Возврат УПЖКХ_РаботаСФайламиСервер.ПодготовитьМассивПередаваемыхФайловДляЗагрузки(МассивИменФайлов);
	
КонецФункции // ПодготовитьМассивПередаваемыхФайловДляЗагрузки()

&НаКлиенте
// Процедура - обработчик завершения работы процедуры "КомандаЗагрузить"
//
Процедура КомандаЗагрузитьОбработкаЗагрузки(МассивОписанийФайлов, ДополнительныеПараметры) Экспорт
	
	Если Объект.АлтайскийКрай_Льготники2.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаЗагрузитьВопрос", ЭтотОбъект, Новый Структура("МассивОписанийФайлов", МассивОписанийФайлов));
		
		ТекстВопроса = "Перед загрузкой табличная часть будет очищена. Продолжить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		КомандаЗагрузитьНаСервере(МассивОписанийФайлов);
	КонецЕсли;
	
КонецПроцедуры // КомандаЗагрузитьОбработкаЗагрузки()

&НаКлиенте
// Процедура - обработчик завершения работы процедуры "КомандаЗагрузитьОбработкаЗагрузки"
//
Процедура КомандаЗагрузитьВопрос(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		КомандаЗагрузитьНаСервере(ДополнительныеПараметры.МассивОписанийФайлов);
	КонецЕсли;
	
КонецПроцедуры // КомандаЗагрузитьВопрос()

&НаСервере
// Загрузка таблицы услуг в ОСЗН из dbf-файла.
//
Процедура КомандаЗагрузитьНаСервере(МассивОписанийФайлов)
	
	Каталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВременныхФайлов());
	
	Для Каждого ОписаниеФайла Из МассивОписанийФайлов Цикл
		ПолучитьИзВременногоХранилища(ОписаниеФайла.Хранение).Записать(Каталог + "ALTAI.DBF");
		ФайлДБФ = Новый XBase(Каталог + "ALTAI.DBF", , Истина);
		
		УдалитьИзВременногоХранилища(ОписаниеФайла.Хранение);
	КонецЦикла;
	
	ФайлДБФ.Кодировка = КодировкаXBase.OEM;
	
	//ФайлДБФ.ОткрытьФайл(ИмяФайла, , Истина);
	
	Если Не ФайлДБФ.Открыта() Тогда
		
		Текст = "ru = ""Не удалось открыть указанный файл!"";"
			  + " en = ""Can't open this file!""";
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(НСтр(Текст));
		Возврат;
		
	КонецЕсли;
	
	Пока Не ФайлДБФ.ВКонце() Цикл
		
		НоваяСтрока = Объект.АлтайскийКрай_Льготники2.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ФайлДБФ);
		
		ФайлДБФ.Следующая();
		
	КонецЦикла;
	
	ФайлДБФ.ЗакрытьФайл();
	
	Если Объект.АлтайскийКрай_Льготники2.Количество() > 0 Тогда
		
		ПроизвестиИдентификациюЛьготниковНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры // КомандаЗагрузитьНаСервере()

&НаСервере
// Загрузка таблицы услуг в ОСЗН из dbf-файла.
//
Процедура ПроизвестиИдентификациюЛьготниковНаСервере()
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТаблицаДанныхФайла", Объект.АлтайскийКрай_Льготники2.Выгрузить());
	Запрос.УстановитьПараметр("ДатаКонца",          КонецМесяца(Объект.Период));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДанныхФайла.LCHET,
	|	ТаблицаДанныхФайла.PERS_NUM,
	|	ТаблицаДанныхФайла.FAMILY,
	|	ТаблицаДанныхФайла.NAME,
	|	ТаблицаДанныхФайла.FATHER,
	|	ТаблицаДанныхФайла.DROGD,
	|	ТаблицаДанныхФайла.RAION,
	|	ТаблицаДанныхФайла.PUNKT,
	|	ТаблицаДанныхФайла.STREET,
	|	ТаблицаДанныхФайла.HOUSE,
	|	ТаблицаДанныхФайла.KORP,
	|	ТаблицаДанныхФайла.FLAT,
	|	ТаблицаДанныхФайла.KOD_LGT1,
	|	ТаблицаДанныхФайла.LGOT1,
	|	ТаблицаДанныхФайла.KOD_LGT2,
	|	ТаблицаДанныхФайла.LGOT2,
	|	ТаблицаДанныхФайла.USLUGA,
	|	ТаблицаДанныхФайла.LCPRED,
	|	ТаблицаДанныхФайла.PL_OB,
	|	ТаблицаДанныхФайла.KL_PR,
	|	ТаблицаДанныхФайла.KL_SEM,
	|	ТаблицаДанныхФайла.PSUMMA,
	|	ТаблицаДанныхФайла.LSUMMA,
	|	ТаблицаДанныхФайла.DBEG,
	|	ТаблицаДанныхФайла.DEND,
	|	ТаблицаДанныхФайла.DSTART,
	|	ТаблицаДанныхФайла.DSTOP,
	|	ТаблицаДанныхФайла.KL_KOM
	|ПОМЕСТИТЬ врТаблицаДанныхФайла
	|ИЗ
	|	&ТаблицаДанныхФайла КАК ТаблицаДанныхФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо,
	|	ФИОФизическихЛицСрезПоследних.Фамилия,
	|	ФИОФизическихЛицСрезПоследних.Имя,
	|	ФИОФизическихЛицСрезПоследних.Отчество,
	|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо.ДатаРождения КАК ДатаРождения
	|ПОМЕСТИТЬ втФИОФизическихЛиц
	|ИЗ
	|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ДатаКонца, ФизическоеЛицо ССЫЛКА Справочник.ФизическиеЛица) КАК ФИОФизическихЛицСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_Жильцы.ФизЛицо,
	|	УПЖКХ_Жильцы.Ссылка КАК Проживающий,
	|	УПЖКХ_Жильцы.Владелец КАК ЛицевойСчет
	|ПОМЕСТИТЬ втЖильцы
	|ИЗ
	|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
	|ГДЕ
	|	НЕ УПЖКХ_Жильцы.ПометкаУдаления
	|	И УПЖКХ_Жильцы.ФизЛицо В
	|			(ВЫБРАТЬ
	|				втФИОФизическихЛиц.ФизическоеЛицо
	|			ИЗ
	|				втФИОФизическихЛиц КАК втФИОФизическихЛиц)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцы.ЛицевойСчет,
	|	втЖильцы.Проживающий,
	|	втФИОФизическихЛиц.Фамилия,
	|	втФИОФизическихЛиц.Имя,
	|	втФИОФизическихЛиц.Отчество,
	|	втФИОФизическихЛиц.ДатаРождения
	|ПОМЕСТИТЬ втПроживающие
	|ИЗ
	|	втФИОФизическихЛиц КАК втФИОФизическихЛиц
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЖильцы КАК втЖильцы
	|		ПО втФИОФизическихЛиц.ФизическоеЛицо = втЖильцы.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втПроживающие.Проживающий, ЗНАЧЕНИЕ(Справочник.УПЖКХ_Жильцы.ПустаяСсылка)) КАК Проживающий,
	|	ЕСТЬNULL(втПроживающие.ЛицевойСчет, ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)) КАК ЛицевойСчет,
	|	врТаблицаДанныхФайла.LCHET,
	|	врТаблицаДанныхФайла.PERS_NUM,
	|	врТаблицаДанныхФайла.FAMILY,
	|	врТаблицаДанныхФайла.NAME,
	|	врТаблицаДанныхФайла.FATHER,
	|	врТаблицаДанныхФайла.DROGD,
	|	врТаблицаДанныхФайла.RAION,
	|	врТаблицаДанныхФайла.PUNKT,
	|	врТаблицаДанныхФайла.STREET,
	|	врТаблицаДанныхФайла.HOUSE,
	|	врТаблицаДанныхФайла.KORP,
	|	врТаблицаДанныхФайла.FLAT,
	|	врТаблицаДанныхФайла.KOD_LGT1,
	|	врТаблицаДанныхФайла.LGOT1,
	|	врТаблицаДанныхФайла.KOD_LGT2,
	|	врТаблицаДанныхФайла.LGOT2,
	|	врТаблицаДанныхФайла.USLUGA,
	|	врТаблицаДанныхФайла.LCPRED,
	|	врТаблицаДанныхФайла.PL_OB,
	|	врТаблицаДанныхФайла.KL_PR,
	|	врТаблицаДанныхФайла.KL_SEM,
	|	врТаблицаДанныхФайла.PSUMMA,
	|	врТаблицаДанныхФайла.LSUMMA,
	|	врТаблицаДанныхФайла.DBEG,
	|	врТаблицаДанныхФайла.DEND,
	|	врТаблицаДанныхФайла.DSTART,
	|	врТаблицаДанныхФайла.DSTOP,
	|	врТаблицаДанныхФайла.KL_KOM
	|ИЗ
	|	врТаблицаДанныхФайла КАК врТаблицаДанныхФайла
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПроживающие КАК втПроживающие
	|		ПО врТаблицаДанныхФайла.FAMILY = втПроживающие.Фамилия
	|			И врТаблицаДанныхФайла.NAME = втПроживающие.Имя
	|			И врТаблицаДанныхФайла.FATHER = втПроживающие.Отчество
	|			И врТаблицаДанныхФайла.DROGD = втПроживающие.ДатаРождения";
	Результат = Запрос.Выполнить().Выгрузить();
	
	Объект.АлтайскийКрай_Льготники2.Очистить();
	Объект.АлтайскийКрай_Льготники2.Загрузить(Результат);
	
КонецПроцедуры // ПроизвестиИдентификациюЛьготниковНаСервере()

#КонецОбласти

#Область КомандаЗаполнить

////////////////////////
// Команда "Заполнить"

&НаКлиенте
// Обработчик команды "КомандаЗаполнить".
//
Процедура КомандаЗаполнить(Команда)
	
	КомандаЗаполнитьНаСервере();
	
КонецПроцедуры // КомандаЗаполнить()

&НаСервере
// Обработчик команды "КомандаЗаполнить" на сервере.
//
Процедура КомандаЗаполнитьНаСервере()
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТаблицаДанныхФайла",  Объект.АлтайскийКрай_Льготники2.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаСоответствий", Объект.АлтайскийКрай_ТаблицаКодовУслуг.Выгрузить());
	Запрос.УстановитьПараметр("Организация",         Объект.Организация);
	Запрос.УстановитьПараметр("ДатаНачала",          НачалоМесяца(Объект.Период));
	Запрос.УстановитьПараметр("ДатаКонца",           КонецМесяца(Объект.Период));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДанныхФайла.LCHET,
	|	ТаблицаДанныхФайла.PERS_NUM,
	|	ТаблицаДанныхФайла.FAMILY,
	|	ТаблицаДанныхФайла.NAME,
	|	ТаблицаДанныхФайла.FATHER,
	|	ТаблицаДанныхФайла.DROGD,
	|	ТаблицаДанныхФайла.RAION,
	|	ТаблицаДанныхФайла.PUNKT,
	|	ТаблицаДанныхФайла.STREET,
	|	ТаблицаДанныхФайла.HOUSE,
	|	ТаблицаДанныхФайла.KORP,
	|	ТаблицаДанныхФайла.FLAT,
	|	ТаблицаДанныхФайла.KOD_LGT1,
	|	ТаблицаДанныхФайла.LGOT1,
	|	ТаблицаДанныхФайла.KOD_LGT2,
	|	ТаблицаДанныхФайла.LGOT2,
	|	ТаблицаДанныхФайла.USLUGA,
	|	ТаблицаДанныхФайла.LCPRED,
	|	ТаблицаДанныхФайла.PL_OB,
	|	ТаблицаДанныхФайла.KL_PR,
	|	ТаблицаДанныхФайла.KL_SEM,
	|	ТаблицаДанныхФайла.PSUMMA,
	|	ТаблицаДанныхФайла.LSUMMA,
	|	ТаблицаДанныхФайла.DBEG,
	|	ТаблицаДанныхФайла.DEND,
	|	ТаблицаДанныхФайла.DSTART,
	|	ТаблицаДанныхФайла.DSTOP,
	|	ТаблицаДанныхФайла.KL_KOM,
	|	ТаблицаДанныхФайла.Проживающий,
	|	ТаблицаДанныхФайла.ЛицевойСчет
	|ПОМЕСТИТЬ врТаблицаДанныхФайла
	|ИЗ
	|	&ТаблицаДанныхФайла КАК ТаблицаДанныхФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСоответствий.КодОСЗН КАК КодОСЗН,
	|	ТаблицаСоответствий.Услуга КАК Услуга
	|ПОМЕСТИТЬ врТаблицаСоответствий
	|ИЗ
	|	&ТаблицаСоответствий КАК ТаблицаСоответствий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врТаблицаДанныхФайла.LCHET,
	|	врТаблицаДанныхФайла.PERS_NUM,
	|	врТаблицаДанныхФайла.FAMILY,
	|	врТаблицаДанныхФайла.NAME,
	|	врТаблицаДанныхФайла.FATHER,
	|	врТаблицаДанныхФайла.DROGD,
	|	врТаблицаДанныхФайла.RAION,
	|	врТаблицаДанныхФайла.PUNKT,
	|	врТаблицаДанныхФайла.STREET,
	|	врТаблицаДанныхФайла.HOUSE,
	|	врТаблицаДанныхФайла.KORP,
	|	врТаблицаДанныхФайла.FLAT,
	|	врТаблицаДанныхФайла.KOD_LGT1,
	|	врТаблицаДанныхФайла.LGOT1,
	|	врТаблицаДанныхФайла.KOD_LGT2,
	|	врТаблицаДанныхФайла.LGOT2,
	|	врТаблицаДанныхФайла.USLUGA,
	|	врТаблицаДанныхФайла.LCPRED,
	|	врТаблицаДанныхФайла.PL_OB,
	|	врТаблицаДанныхФайла.KL_PR,
	|	врТаблицаДанныхФайла.KL_SEM,
	|	врТаблицаДанныхФайла.PSUMMA,
	|	врТаблицаДанныхФайла.LSUMMA,
	|	врТаблицаДанныхФайла.DBEG,
	|	врТаблицаДанныхФайла.DEND,
	|	врТаблицаДанныхФайла.DSTART,
	|	врТаблицаДанныхФайла.DSTOP,
	|	врТаблицаДанныхФайла.KL_KOM,
	|	врТаблицаДанныхФайла.Проживающий,
	|	врТаблицаДанныхФайла.ЛицевойСчет,
	|	ЕСТЬNULL(врТаблицаСоответствий.Услуга, ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)) КАК Услуга
	|ПОМЕСТИТЬ втТаблицаДанныхСУслугами
	|ИЗ
	|	врТаблицаДанныхФайла КАК врТаблицаДанныхФайла
	|		ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаСоответствий КАК врТаблицаСоответствий
	|		ПО врТаблицаДанныхФайла.USLUGA = врТаблицаСоответствий.КодОСЗН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект КАК Помещение,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.КоличествоКомнат КАК КоличествоКомнат
	|ПОМЕСТИТЬ втЛицевыеСчета
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втТаблицаДанныхСУслугами.ЛицевойСчет
	|				ИЗ
	|					втТаблицаДанныхСУслугами КАК втТаблицаДанныхСУслугами)) КАК КВП_ЛицевыеСчетаСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.КоличествоЗарегистрированных КАК КоличествоЗарегистрированных,
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.ЛицевойСчет
	|ПОМЕСТИТЬ втУчетКоличестваЖильцов
	|ИЗ
	|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втЛицевыеСчета.ЛицевойСчет
	|				ИЗ
	|					втЛицевыеСчета КАК втЛицевыеСчета)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец) КАК КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втСведенияОЗарегистрированных
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			&ДатаКонца,
	|			ДатаИзменения <= &ДатаКонца
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втЛицевыеСчета.ЛицевойСчет
	|					ИЗ
	|						втЛицевыеСчета КАК втЛицевыеСчета)) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами
	|			ТОГДА втУчетКоличестваЖильцов.ЛицевойСчет
	|		ИНАЧЕ втСведенияОЗарегистрированных.ЛицевойСчет
	|	КОНЕЦ КАК ЛицевойСчет,
	|	ВЫБОР
	|		КОГДА Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами
	|			ТОГДА ЕСТЬNULL(втУчетКоличестваЖильцов.КоличествоЗарегистрированных, 0)
	|		ИНАЧЕ ЕСТЬNULL(втСведенияОЗарегистрированных.КоличествоЗарегистрированных, 0)
	|	КОНЕЦ КАК КоличествоЗарегистрированных
	|ПОМЕСТИТЬ врКоличествоЗарегистрированных
	|ИЗ
	|	втСведенияОЗарегистрированных КАК втСведенияОЗарегистрированных
	|		ПОЛНОЕ СОЕДИНЕНИЕ втУчетКоличестваЖильцов КАК втУчетКоличестваЖильцов
	|		ПО втСведенияОЗарегистрированных.ЛицевойСчет = втУчетКоличестваЖильцов.ЛицевойСчет,
	|	Константы КАК Константы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Помещения.Родитель КАК Помещение,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_Помещения.Ссылка) КАК КоличествоДочернихКомнат
	|ПОМЕСТИТЬ втДочерниеКомнаты
	|ИЗ
	|	Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
	|ГДЕ
	|	УПЖКХ_Помещения.Родитель В
	|			(ВЫБРАТЬ
	|				втЛицевыеСчета.Помещение
	|			ИЗ
	|				втЛицевыеСчета КАК втЛицевыеСчета)
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_Помещения.Родитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.Комната) КАК КоличествоПривязанныхКомнат
	|ПОМЕСТИТЬ втПривязанныеКомнаты
	|ИЗ
	|	РегистрСведений.УПЖКХ_ПривязанныеКЛицевомуСчетуКомнаты.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втЛицевыеСчета.ЛицевойСчет
	|				ИЗ
	|					втЛицевыеСчета КАК втЛицевыеСчета)) КАК УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних
	|ГДЕ
	|	УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.Привязка
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛицевыеСчета.ЛицевойСчет,
	|	ЕСТЬNULL(втПривязанныеКомнаты.КоличествоПривязанныхКомнат, ЕСТЬNULL(втДочерниеКомнаты.КоличествоДочернихКомнат, втЛицевыеСчета.КоличествоКомнат)) КАК КоличествоКомнат
	|ПОМЕСТИТЬ втКоличествоКомнат
	|ИЗ
	|	втЛицевыеСчета КАК втЛицевыеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДочерниеКомнаты КАК втДочерниеКомнаты
	|		ПО втЛицевыеСчета.Помещение = втДочерниеКомнаты.Помещение
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПривязанныеКомнаты КАК втПривязанныеКомнаты
	|		ПО втЛицевыеСчета.ЛицевойСчет = втПривязанныеКомнаты.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий КАК Проживающий,
	|	КВП_СкидкиСрезПоследних.Услуга,
	|	МАКСИМУМ(КВП_СкидкиСрезПоследних.РазмерСкидки) КАК РазмерСкидки
	|ПОМЕСТИТЬ втМаксимальныеСкидкиЛьготниковПоУслугам
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(
	|			&ДатаКонца,
	|			Проживающий В
	|				(ВЫБРАТЬ
	|					втТаблицаДанныхСУслугами.Проживающий
	|				ИЗ
	|					втТаблицаДанныхСУслугами КАК втТаблицаДанныхСУслугами)
	|				И ДатаИзменения <= &ДатаКонца) КАК КВП_НазначенныеЛьготыСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КВП_Скидки.СрезПоследних(
	|				&ДатаКонца,
	|				Услуга В
	|					(ВЫБРАТЬ
	|						втТаблицаДанныхСУслугами.Услуга
	|					ИЗ
	|						втТаблицаДанныхСУслугами КАК втТаблицаДанныхСУслугами)) КАК КВП_СкидкиСрезПоследних
	|		ПО КВП_НазначенныеЛьготыСрезПоследних.ЛьготнаяКатегория = КВП_СкидкиСрезПоследних.ЛьготнаяКатегория
	|ГДЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.Действие
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий,
	|	КВП_СкидкиСрезПоследних.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга,
	|	СУММА(ВЫБОР
	|			КОГДА ЕСТЬNULL(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток, 0) > 0
	|				ТОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СальдоНаНачалоПериода,
	|	ВЫБОР
	|		КОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика), ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме))
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК УчитыватьСальдоНаНачалоПериода,
	|	0 КАК СуммаОплаты
	|ПОМЕСТИТЬ втВзаиморасчеты
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&ДатаНачала,
	|			Организация = &Организация
	|				И (ЛицевойСчет, Услуга) В
	|					(ВЫБРАТЬ
	|						втТаблицаДанныхСУслугами.ЛицевойСчет,
	|						втТаблицаДанныхСУслугами.Услуга
	|					ИЗ
	|						втТаблицаДанныхСУслугами КАК втТаблицаДанныхСУслугами)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет,
	|	ВЫБОР
	|		КОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика), ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме))
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	0,
	|	0,
	|	-УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНачала,
	|			&ДатаКонца,
	|			,
	|			Организация = &Организация
	|				И ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|				И (ЛицевойСчет, Услуга) В
	|					(ВЫБРАТЬ
	|						втТаблицаДанныхСУслугами.ЛицевойСчет,
	|						втТаблицаДанныхСУслугами.Услуга
	|					ИЗ
	|						втТаблицаДанныхСУслугами КАК втТаблицаДанныхСУслугами)) КАК УПЖКХ_НачисленияОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВзаиморасчеты.ЛицевойСчет,
	|	втВзаиморасчеты.Услуга,
	|	МАКСИМУМ(втВзаиморасчеты.СальдоНаНачалоПериода) КАК СальдоНаНачалоПериода,
	|	МАКСИМУМ(втВзаиморасчеты.УчитыватьСальдоНаНачалоПериода) КАК УчитыватьСальдоНаНачалоПериода,
	|	СУММА(втВзаиморасчеты.СуммаОплаты) КАК СуммаОплаты
	|ПОМЕСТИТЬ втНачальноеСальдоОплаты
	|ИЗ
	|	втВзаиморасчеты КАК втВзаиморасчеты
	|
	|СГРУППИРОВАТЬ ПО
	|	втВзаиморасчеты.ЛицевойСчет,
	|	втВзаиморасчеты.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга,
	|	ВЫБОР
	|		КОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки = ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РасчитываемаяНорма,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления,
	|	ВЫБОР
	|		КОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки = ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой)
	|			ТОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Размер
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазмерНорматива
	|ПОМЕСТИТЬ втНормыПотребления
	|ИЗ
	|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(
	|			&ДатаКонца,
	|			(ЛицевойСчет, Услуга) В
	|				(ВЫБРАТЬ
	|					втТаблицаДанныхСУслугами.ЛицевойСчет,
	|					втТаблицаДанныхСУслугами.Услуга
	|				ИЗ
	|					втТаблицаДанныхСУслугами КАК втТаблицаДанныхСУслугами)) КАК КВП_НормыПотребленияУслугЛССрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаДанныхСУслугами.LCHET,
	|	втТаблицаДанныхСУслугами.PERS_NUM,
	|	втТаблицаДанныхСУслугами.FAMILY,
	|	втТаблицаДанныхСУслугами.NAME,
	|	втТаблицаДанныхСУслугами.FATHER,
	|	втТаблицаДанныхСУслугами.DROGD,
	|	втТаблицаДанныхСУслугами.RAION,
	|	втТаблицаДанныхСУслугами.PUNKT,
	|	втТаблицаДанныхСУслугами.STREET,
	|	втТаблицаДанныхСУслугами.HOUSE,
	|	втТаблицаДанныхСУслугами.KORP,
	|	втТаблицаДанныхСУслугами.FLAT,
	|	втТаблицаДанныхСУслугами.KOD_LGT1,
	|	втТаблицаДанныхСУслугами.LGOT1,
	|	втТаблицаДанныхСУслугами.KOD_LGT2,
	|	втТаблицаДанныхСУслугами.LGOT2,
	|	втТаблицаДанныхСУслугами.USLUGA,
	|	втТаблицаДанныхСУслугами.LCPRED,
	|	втТаблицаДанныхСУслугами.PL_OB,
	|	ЕСТЬNULL(врКоличествоЗарегистрированных.КоличествоЗарегистрированных, 0) КАК KL_PR,
	|	втТаблицаДанныхСУслугами.KL_SEM,
	|	втТаблицаДанныхСУслугами.PSUMMA,
	|	ЕСТЬNULL(втНачальноеСальдоОплаты.СуммаОплаты, втТаблицаДанныхСУслугами.PSUMMA) КАК PSUMMA,
	|	втТаблицаДанныхСУслугами.LSUMMA,
	|	втТаблицаДанныхСУслугами.DBEG,
	|	втТаблицаДанныхСУслугами.DEND,
	|	втТаблицаДанныхСУслугами.DSTART,
	|	втТаблицаДанныхСУслугами.DSTOP,
	|	втТаблицаДанныхСУслугами.KL_KOM,
	|	ЕСТЬNULL(втКоличествоКомнат.КоличествоКомнат, 0) КАК KL_KOM,
	|	втТаблицаДанныхСУслугами.Проживающий,
	|	втТаблицаДанныхСУслугами.ЛицевойСчет,
	|	втТаблицаДанныхСУслугами.Услуга,
	|	ЕСТЬNULL(втМаксимальныеСкидкиЛьготниковПоУслугам.РазмерСкидки, 0) КАК РазмерСкидки,
	|	ЕСТЬNULL(втНачальноеСальдоОплаты.СальдоНаНачалоПериода, 0) КАК СальдоНаНачалоПериода,
	|	ЕСТЬNULL(втНачальноеСальдоОплаты.УчитыватьСальдоНаНачалоПериода, ЛОЖЬ) КАК УчитыватьСальдоНаНачалоПериода,
	|	ЕСТЬNULL(втНормыПотребления.НормаПотребления, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)) КАК НормаПотребления,
	|	ЕСТЬNULL(втНормыПотребления.РасчитываемаяНорма, ЛОЖЬ) КАК РасчитываемаяНорма,
	|	ЕСТЬNULL(втНормыПотребления.РазмерНорматива, 0) КАК РазмерНорматива
	|ИЗ
	|	втТаблицаДанныхСУслугами КАК втТаблицаДанныхСУслугами
	|		ЛЕВОЕ СОЕДИНЕНИЕ врКоличествоЗарегистрированных КАК врКоличествоЗарегистрированных
	|		ПО втТаблицаДанныхСУслугами.ЛицевойСчет = врКоличествоЗарегистрированных.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКоличествоКомнат КАК втКоличествоКомнат
	|		ПО втТаблицаДанныхСУслугами.ЛицевойСчет = втКоличествоКомнат.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втМаксимальныеСкидкиЛьготниковПоУслугам КАК втМаксимальныеСкидкиЛьготниковПоУслугам
	|		ПО втТаблицаДанныхСУслугами.Проживающий = втМаксимальныеСкидкиЛьготниковПоУслугам.Проживающий
	|			И втТаблицаДанныхСУслугами.Услуга = втМаксимальныеСкидкиЛьготниковПоУслугам.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНормыПотребления КАК втНормыПотребления
	|		ПО втТаблицаДанныхСУслугами.ЛицевойСчет = втНормыПотребления.ЛицевойСчет
	|			И втТаблицаДанныхСУслугами.Услуга = втНормыПотребления.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНачальноеСальдоОплаты КАК втНачальноеСальдоОплаты
	|		ПО втТаблицаДанныхСУслугами.ЛицевойСчет = втНачальноеСальдоОплаты.ЛицевойСчет
	|			И втТаблицаДанныхСУслугами.Услуга = втНачальноеСальдоОплаты.Услуга";
	
	ТаблицаИтоговая = Запрос.Выполнить().Выгрузить();
	
	ТаблицаИтоговая.Колонки.Добавить("Тариф");
	ТаблицаИтоговая.Колонки.Добавить("Норматив");
	
	Для Каждого СтрокаТаблицы Из ТаблицаИтоговая Цикл
		
		СтрокаТаблицы.Тариф = ПолучитьТарифПоЛицевомуСчету(КонецМесяца(Объект.Период), Объект.Организация, СтрокаТаблицы.Услуга, СтрокаТаблицы.ЛицевойСчет);
		
		Если СтрокаТаблицы.РасчитываемаяНорма Тогда
			СтрокаТаблицы.Норматив = ПолучитьРазмерНормыПотребления(СтрокаТаблицы.ЛицевойСчет, КонецМесяца(Объект.Период), СтрокаТаблицы.НормаПотребления, Объект.Организация);
		Иначе
			СтрокаТаблицы.Норматив = СтрокаТаблицы.РазмерНорматива;
		КонецЕсли;
		
		СальдоНаНачалоПериода = ?(СтрокаТаблицы.УчитыватьСальдоНаНачалоПериода = 1, СтрокаТаблицы.СальдоНаНачалоПериода, 0);
		
		Если СтрокаТаблицы.НормаПотребления.Пустая() Тогда
			
			СтрокаТаблицы.LSUMMA = (СтрокаТаблицы.PSUMMA + СальдоНаНачалоПериода) * СтрокаТаблицы.РазмерСкидки / 100;
			
		Иначе
			
			СуммаОплаты = СтрокаТаблицы.Тариф * СтрокаТаблицы.Норматив;
			СтрокаТаблицы.LSUMMA = Мин(СтрокаТаблицы.PSUMMA + СальдоНаНачалоПериода, СуммаОплаты) * СтрокаТаблицы.РазмерСкидки / 100;
			
		КонецЕсли;
		
		СтрокаТаблицы.LCPRED = ПодготовитьНомерЛСДляВывода(СтрокаТаблицы.ЛицевойСчет);
		
	КонецЦикла;
	
	Объект.АлтайскийКрай_Льготники2.Загрузить(ТаблицаИтоговая);
	
КонецПроцедуры // КомандаЗаполнитьНаСервере()

&НаСервереБезКонтекста
// Убирает из наименования лицевого счета не цифровые символы.
// 
Функция ПодготовитьНомерЛСДляВывода(ЛицевойСчет)
	
	НаименованиеЛС = СокрЛП(ЛицевойСчет);
	СтрокаДляВозврата = "";
	Пока СтрДлина(НаименованиеЛС) > 0 Цикл
		
		СимволЛС = Лев(НаименованиеЛС, 1);
		Если КодСимвола(СимволЛС) > 47 И КодСимвола(СимволЛС) < 58 Тогда
			СтрокаДляВозврата = СтрокаДляВозврата + СимволЛС;
		КонецЕсли;
		
		НаименованиеЛС = Прав(НаименованиеЛС, СтрДлина(НаименованиеЛС) - 1);
	КонецЦикла;
	
	Возврат СтрокаДляВозврата;
	
КонецФункции // ПодготовитьНомерЛСДляВывода()

#КонецОбласти

#Область КомандаВыгрузить

////////////////////////
// Команда "Выгрузить"

&НаКлиенте
// Обработчик команды "КомандаВыгрузить".
//
Процедура КомандаВыгрузить(Команда)
	
	ОчиститьСообщения();
	
	Если Объект.АлтайскийКрай_Льготники2.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Нет данных для выгрузки.");
		Возврат;
	КонецЕсли;
	
	ОбработчикЗавершения = Новый ОписаниеОповещения("ОбработатьПослеВыгрузки", УПЖКХ_РаботаСФайламиКлиент, Новый Структура);
	
	ИмяФайла    = Формат(Объект.Период, "ДФ=yyyyMMdd") + ".dbf";
	ИмяКаталога = Объект.ИмяКаталогаВыгрузки;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИмяФайла",             ИмяФайла);
	ДополнительныеПараметры.Вставить("ИмяКаталога",          ИмяКаталога);
	ДополнительныеПараметры.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);
	
	Если РасширениеПодключено Тогда
		// Проверяем каталог выгрузки на существование.
		КаталогВыгрузки = Новый Файл(Объект.ИмяКаталогаВыгрузки);
		ДополнительныеПараметры.Вставить("КаталогВыгрузки", КаталогВыгрузки);
		
		КаталогВыгрузки.НачатьПроверкуСуществования(Новый ОписаниеОповещения("КомандаВыгрузитьКаталогВыгрузкиСуществуетЗавершение", ЭтотОбъект, ДополнительныеПараметры));
		Возврат;
	Иначе
		ИмяКаталога = "";
		МассивВыгружаемыхФайлов = Новый Массив;
		КомандаВыгрузитьПродолжениеНаСервере(МассивВыгружаемыхФайлов, ИмяФайла, ИмяКаталога);
		
		УПЖКХ_РаботаСФайламиКлиент.ВыгрузитьВФайл(РасширениеПодключено, МассивВыгружаемыхФайлов, ОбработчикЗавершения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик результата работы процедуры "НачатьПроверкуСуществования".
//
Процедура КомандаВыгрузитьКаталогВыгрузкиСуществуетЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	КаталогВыгрузки = ДополнительныеПараметры.КаталогВыгрузки;
	
	Если Не Существует Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран каталог файла выгрузки!");
		Возврат;
	КонецЕсли;
	
	КаталогВыгрузки.НачатьПроверкуЭтоКаталог(Новый ОписаниеОповещения("КомандаВыгрузитьЭтоКаталогЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик результата работы процедуры "НачатьПроверкуЭтоКаталог".
//
Процедура КомандаВыгрузитьЭтоКаталогЗавершение(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Если Не ЭтоКаталог Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран каталог файла выгрузки!");
		Возврат;
	КонецЕсли;
	
	МассивВыгружаемыхФайлов = Новый Массив;
	КомандаВыгрузитьПродолжениеНаСервере(МассивВыгружаемыхФайлов, ДополнительныеПараметры.ИмяФайла, ДополнительныеПараметры.ИмяКаталога);
	
	УПЖКХ_РаботаСФайламиКлиент.ВыгрузитьВФайл(РасширениеПодключено, МассивВыгружаемыхФайлов, ДополнительныеПараметры.ОбработчикЗавершения);
	
КонецПроцедуры

&НаСервере
// Выполняет подготовку и выгрузку файла.
//
// Параметры:
//  МассивВыгружаемыхФайлов - Массив - массив описаний передаваемых файлов.
//  ИмяФайла                - Строка - Краткое имя выгружаемого файла.
//  ИмяКаталога             - Строка - Имя каталога, в который будет выполняться выгрузка.
//
Процедура КомандаВыгрузитьПродолжениеНаСервере(МассивВыгружаемыхФайлов, ИмяФайла, ИмяКаталога)
	
	// Подготовка выгружаемого файла происходит на сервере в виде временного файла.
	// Сформированный временный файл передается на клиент и выгружается в выбранный пользователем каталог.
	
	// Формирование полного имени выгружаемого файла на клиенте.
	КаталогНаКлиенте        = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяКаталога);
	ПолноеИмяФайлаНаКлиенте = КаталогНаКлиенте + ИмяФайла;
	
	// Формирование полного имени временного файла формируемого на сервере.
	КаталогНаСервере        = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВременныхФайлов());
	ПолноеИмяФайлаНаСервере = КаталогНаСервере + ИмяФайла;
	
	БД = Новый XBase;
	БД.Кодировка = КодировкаXBase.OEM;
	
	БД.Поля.Добавить("LCHET",    "N", 7);
	БД.Поля.Добавить("PERS_NUM", "S", 11);
	БД.Поля.Добавить("FAMILY",   "S", 20);
	БД.Поля.Добавить("NAME",     "S", 20);
	БД.Поля.Добавить("FATHER",   "S", 20);
	БД.Поля.Добавить("DROGD",    "D", 8);
	БД.Поля.Добавить("RAION",    "N", 2);
	БД.Поля.Добавить("PUNKT",    "S", 20);
	БД.Поля.Добавить("STREET",   "S", 20);
	БД.Поля.Добавить("HOUSE",    "S", 5);
	БД.Поля.Добавить("KORP",     "S", 3);
	БД.Поля.Добавить("FLAT",     "S", 8);
	БД.Поля.Добавить("KOD_LGT1", "N", 3);
	БД.Поля.Добавить("LGOT1",    "S", 70);
	БД.Поля.Добавить("KOD_LGT2", "N", 3);
	БД.Поля.Добавить("LGOT2",    "S", 70);
	БД.Поля.Добавить("USLUGA",   "N", 2);
	БД.Поля.Добавить("LCPRED",   "S", 12);
	БД.Поля.Добавить("PL_OB",    "N", 7, 2);
	БД.Поля.Добавить("KL_PR",    "N", 2);
	БД.Поля.Добавить("KL_SEM",   "N", 2);
	БД.Поля.Добавить("PSUMMA",   "N", 9, 2);
	БД.Поля.Добавить("LSUMMA",   "N", 9, 2);
	БД.Поля.Добавить("DBEG",     "D", 8);
	БД.Поля.Добавить("DEND",     "D", 8);
	БД.Поля.Добавить("DSTART",   "D", 8);
	БД.Поля.Добавить("DSTOP",    "D", 8);
	БД.Поля.Добавить("KL_KOM",   "N", 2);
	
	БД.СоздатьФайл(ПолноеИмяФайлаНаСервере);
	БД.АвтоСохранение = Истина;
	
	Для Каждого Строка Из Объект.АлтайскийКрай_Льготники Цикл
		БД.Добавить();
		ЗаполнитьЗначенияСвойств(БД, Строка);
	КонецЦикла;
	
	БД.ЗакрытьФайл();
	
	СоответствиеИменФайловИАдресов = Новый Соответствие;
	СоответствиеИменФайловИАдресов.Вставить(ПолноеИмяФайлаНаКлиенте, ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПолноеИмяФайлаНаСервере), Новый УникальныйИдентификатор));
	
	МассивВыгружаемыхФайлов = УПЖКХ_РаботаСФайламиСервер.ПолучитьМассивПередаваемыхФайлов(СоответствиеИменФайловИАдресов);
	
КонецПроцедуры // КомандаВыгрузитьПродолжениеНаСервере()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ТАБЛИЦ ФОРМЫ

#Область Льготники

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ЛьготникиПроживающий" табличного поля "Льготники".
//
Процедура ЛьготникиПроживающийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.Льготники.ТекущиеДанные;
	
	Форма = ПолучитьФорму("Справочник.УПЖКХ_Жильцы.ФормаВыбора", Новый Структура("ТекущаяСтрока", ТекущаяСтрока.Проживающий), Элемент);
	
	// Устанавливаем отбор по началу фамилии.
	FAMILY = СокрЛП(ТекущаяСтрока.FAMILY);
	
	Если ТекущаяСтрока.Проживающий.Пустая() И Не ПустаяСтрока(FAMILY) Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Форма.Список.КомпоновщикНастроек.Настройки.Отбор, "Наименование", Лев(FAMILY, СтрДлина(FAMILY) - 1),
																ВидСравненияКомпоновкиДанных.Содержит, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		
	КонецЕсли;
	
	Форма.Открыть();
	
КонецПроцедуры // ЛьготникиПроживающийНачалоВыбора()

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля "ЛьготникиПроживающий" табличного поля "Льготники".
//
Процедура ЛьготникиПроживающийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Льготники.ТекущиеДанные;
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		
		РеквизитыЖильца = ПолучитьРеквизитыЖильца(ВыбранноеЗначение);
		
		ТекущаяСтрока.Проживающий = ВыбранноеЗначение;
		ТекущаяСтрока.ЛицевойСчет = РеквизитыЖильца.ЛицевойСчет;
		
	КонецЕсли;
	
КонецПроцедуры // ЛьготникиПроживающийОбработкаВыбора()

&НаСервереБезКонтекста
// Возвращает структуру необходимых значений реквизитов проживающего по ссылке.
//
// Параметры:
//  ЖилецСсылка - СправочникСсылка.УПЖКХ_Жильцы - ссылка на проживающего.
//
// Возвращаемое значение:
//  РеквизитыЖильца - Структура - структура подготовленных реквизитов жильца.
//
Функция ПолучитьРеквизитыЖильца(ЖилецСсылка)
	
	РеквизитыЖильца = Новый Структура("ЛицевойСчет", ЖилецСсылка.Владелец);
	
	Возврат РеквизитыЖильца;
	
КонецФункции // ПолучитьРеквизитыЖильца()

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ЛьготникиЛицевойСчет" табличного поля "Льготники".
//
Процедура ЛьготникиЛицевойСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.Льготники.ТекущиеДанные;
	
	Форма = ПолучитьФорму("Справочник.КВП_ЛицевыеСчета.ФормаВыбора", Новый Структура("ТекущаяСтрока", ТекущаяСтрока.ЛицевойСчет), Элемент);
	
	// Устанавливаем отбор по началу фамилии.
	LCHET = Формат(ТекущаяСтрока.LCHET, "ЧГ=0");
	
	Если ТекущаяСтрока.ЛицевойСчет.Пустая() И Не ПустаяСтрока(LCHET) Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Форма.Список.КомпоновщикНастроек.Настройки.Отбор, "Наименование", LCHET,
																ВидСравненияКомпоновкиДанных.Содержит, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		
	КонецЕсли;
	
	Форма.Открыть();
	
КонецПроцедуры // ЛьготникиЛицевойСчетНачалоВыбора()

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля "ЛьготникиЛицевойСчет" табличного поля "Льготники".
//
Процедура ЛьготникиЛицевойСчетОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.Льготники.ТекущиеДанные;
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		
		ТекущаяСтрока.ЛицевойСчет = ВыбранноеЗначение;
		
	КонецЕсли;
	
КонецПроцедуры // ЛьготникиЛицевойСчетОбработкаВыбора()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФорм

&НаКлиенте
// Процедура управляет внешним видом формы.
//
Процедура УправлениеФормой()
	
	Элементы.ГруппаРаботаСФайлами.Видимость = РасширениеПодключено;
	
КонецПроцедуры // УправлениеФормой()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ФАЙЛАМИ

#Область СлужебныеПроцедурыРаботыСФайлами

&НаКлиенте
// Определяет подключено ли расширение для работы с файлами.
Процедура ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиенте()
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиентеЗавершение", ЭтотОбъект);
	
	УПЖКХ_РаботаСФайламиКлиент.ОпределитьВидВзаимодействияСФайловойСистемой(ОповещениеЗавершения);
	
КонецПроцедуры // ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиентеЗавершение()

&НаКлиенте
// Обработчик процедуры определяющей подключено расширение работы с файлами или нет.
Процедура ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиентеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		РасширениеПодключено = Результат;
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти