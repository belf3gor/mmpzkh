
//////////////////////////////////////////////////////////////////////////
// РАБОТА С ВРЕМЕННЫМ ХРАНИЛИЩЕМ

#Область РаботаСВременнымХранилищем

&НаСервере
// Помещает таблицу услуг во временное хранилище.
//
// Возвращаемое значение:
//  Строка - адрес настроек во временном хранилище.
//
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КодировкаDBF",               Объект.КодировкаDBF);
	СтруктураПараметров.Вставить("ИдентификацияЛС",            Объект.ИдентификацияЛС);
	СтруктураПараметров.Вставить("УслугиВ_ГИС_НМСПН",          Объект.АмурскаяОбласть_УслугиВ_ГИС_НМСПН.Выгрузить());
	СтруктураПараметров.Вставить("УслугиВБазе",                Объект.АмурскаяОбласть_УслугиВБазе.Выгрузить());
	СтруктураПараметров.Вставить("УчитыватьНачисленияЗаМесяц", УчитыватьНачисленияЗаМесяц);
	СтруктураПараметров.Вставить("ВариантВыгрузки",            ВариантВыгрузки);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураПараметров, Новый УникальныйИдентификатор);
	
КонецФункции // ПоместитьНастройкиВХранилище()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПризнакУдаления = Ложь;
	
	// Получаем настройки из хранилища.
	Если Параметры.Свойство("АдресНастроекВХранилище") И НЕ Параметры.АдресНастроекВХранилище = Неопределено Тогда
		
		СтруктураНастроек = ПолучитьИзВременногоХранилища(Параметры.АдресНастроекВХранилище);
		
		Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
			
			врПеременная = Неопределено;
			
			// Кодировка файла DBF.
			Если СтруктураНастроек.Свойство("КодировкаDBF", врПеременная) Тогда
				Объект.КодировкаDBF = врПеременная;
			КонецЕсли;
			
			Если СтруктураНастроек.Свойство("ВариантВыгрузки", врПеременная) Тогда
				ВариантВыгрузки = врПеременная;
			КонецЕсли;
			
			Если СтруктураНастроек.Свойство("УчитыватьНачисленияЗаМесяц", врПеременная) Тогда
				УчитыватьНачисленияЗаМесяц = врПеременная;
			КонецЕсли;
			
			// Идентификация данных.
			Если СтруктураНастроек.Свойство("ИдентификацияЛС", врПеременная) Тогда
				Объект.ИдентификацияЛС = врПеременная;
			КонецЕсли;
			
			// Таблица услуг в ГИС НМСПН.
			врТаблицаУслуг = Неопределено;
			Если СтруктураНастроек.Свойство("УслугиВ_ГИС_НМСПН", врТаблицаУслуг) Тогда
				Если ТипЗнч(врТаблицаУслуг) = Тип("ТаблицаЗначений") Тогда
					Объект.АмурскаяОбласть_УслугиВ_ГИС_НМСПН.Загрузить(врТаблицаУслуг);
				КонецЕсли;
			КонецЕсли;
			
			// Таблица услуг в базе.
			Если СтруктураНастроек.Свойство("УслугиВБазе", врТаблицаУслуг) Тогда
				Если ТипЗнч(врТаблицаУслуг) = Тип("ТаблицаЗначений") Тогда
					Объект.АмурскаяОбласть_УслугиВБазе.Загрузить(врТаблицаУслуг);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИмяОбъектаМетаданных = "Обработка.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты.ПФ_MXL_АмурскаяОбласть";
	
	Макет = ПолучениеМакета();
	
	СписокУслуг = Элементы.УслугиВ_ГИС_НМСПННаименованиеУслуги.СписокВыбора;
	Для Стр = 2 По Макет.ВысотаТаблицы Цикл
		Яч = Макет.Область(Стр, 1);
		СписокУслуг.Добавить(Яч.Текст, Яч.Текст);
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(Объект.АмурскаяОбласть_УслугиВ_ГИС_НМСПН) тогда
		ЗаполнитьТаблицуУслуг(Макет);
	КонецЕсли;
	
	Элементы.КодировкаDBF.Доступность = ВариантВыгрузки;
	
	Элементы.СравнитьМакетСТиповым.Видимость = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОпределитьИспользованиеПользовательскогоМакетаПечати("Обработка.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты", "ПФ_MXL_АмурскаяОбласть");
	
КонецПроцедуры // ПриСозданииНаСервере()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// СохранитьДанные.
//
Процедура СохранитьДанные(Команда)
	
	Закрыть(ПоместитьНастройкиВХранилище());
	
КонецПроцедуры // СохранитьДанные()

&НаКлиенте
// Процедура - обработчик команды "СравнитьМакетСТиповым".
//
Процедура СравнитьМакетСТиповым(Команда)
	
	УПЖКХ_РаботаСДиалогамиКлиент.СравнитьТиповойМакетСПользовательским("Обработка.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты", "ПФ_MXL_АмурскаяОбласть");
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// При активации строки УслугиВ_ГИС_НМСПН, загружает соответствия в тзУслугиВБазе.
//
Процедура УслугиВ_ГИС_НМСПНПриАктивизацииСтроки(Элемент)
	
	тзУслугиВБазе.Очистить();
	
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		
		// Видимость признаков "ЭтоТеплоноситель" и "ЭтоТепловаяЭнергия".
		Если Элементы.УслугиВ_ГИС_НМСПН.ТекущиеДанные.НаименованиеУслуги = "Горячее водоснабжение" Тогда
			Элементы.тзУслугиВБазеТеплоноситель.Видимость   = Истина;
			Элементы.тзУслугиВБазеТепловаяЭнергия.Видимость = Истина;
		Иначе
			Элементы.тзУслугиВБазеТеплоноситель.Видимость   = Ложь;
			Элементы.тзУслугиВБазеТепловаяЭнергия.Видимость = Ложь;
		КонецЕсли;
		
		// Заполнение таблицы "тзУслугиВБазе".
		Отбор = Новый Структура;
		Отбор.Вставить("Идентификатор", Элемент.ТекущиеДанные.НомерСтроки);
		
		НайденныеСтроки = Объект.АмурскаяОбласть_УслугиВБазе.НайтиСтроки(Отбор);
		
		Для Каждого ТекСтрока из НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(тзУслугиВБазе.Добавить(), ТекСтрока);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // УслугиВ_ГИС_НМСПНПриАктивизацииСтроки()

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" таблицы "УслугиВ_ГИС_НМСПН".
//
Процедура УслугиВ_ГИС_НМСПНПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Устанавливаем запрет на добавление строк копированием.
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // УслугиВ_ГИС_НМСПНПередНачаломДобавления()

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" таблицы "УслугиВ_ГИС_НМСПН".
//
Процедура УслугиВ_ГИС_НМСПНПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры // УслугиВ_ГИС_НМСПНПередУдалением()

&НаКлиенте
// Процедура - обработчик события "ПередОкончаниемРедактирования" таблицы "УслугиВ_ГИС_НМСПН".
//
Процедура УслугиВ_ГИС_НМСПНПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	КодОшибки = 0;
	
	// Проверяем на наличие и уникальность код услуги.
	ТекущийКодУслугиВ_ГИС_НМСПНП = Элемент.ТекущиеДанные.ИдентификаторУслуги;
	Если ЗначениеЗаполнено(ТекущийКодУслугиВ_ГИС_НМСПНП) Тогда
		
		ОтборКод = Новый Структура;
		ОтборКод.Вставить("ИдентификаторУслуги", ТекущийКодУслугиВ_ГИС_НМСПНП);
		
		СтрокиСовпаденияКод = Объект.АмурскаяОбласть_УслугиВ_ГИС_НМСПН.НайтиСтроки(ОтборКод);
		Если СтрокиСовпаденияКод.Количество() > 1 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Код услуги в ОСЗН не уникален!");
			КодОшибки = КодОшибки + 1;
		КонецЕсли;
		
	Иначе
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Код услуги в ОСЗН не заполнен!");
		КодОшибки = КодОшибки + 1;
		
	КонецЕсли;
	
	// Проверяем на наличие и уникальность услуги.
	ТекущаяУслугаВ_ГИС_НМСПНП = Элемент.ТекущиеДанные.НаименованиеУслуги;
	Если ЗначениеЗаполнено(ТекущаяУслугаВ_ГИС_НМСПНП) Тогда
		
		ОтборУслуга = Новый Структура;
		ОтборУслуга.Вставить("НаименованиеУслуги", ТекущаяУслугаВ_ГИС_НМСПНП);
		
		СтрокиСовпаденияУслуга = Объект.АмурскаяОбласть_УслугиВ_ГИС_НМСПН.НайтиСтроки(ОтборУслуга);
		Если СтрокиСовпаденияУслуга.Количество() > 1 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Услуга в ОСЗН не уникальна!");
			КодОшибки = КодОшибки + 1;
		КонецЕсли;
		
	Иначе
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Услуга в ОСЗН не заполнена!");
		КодОшибки = КодОшибки + 1;
		
	КонецЕсли;
	
	// При наличии незаполненных полей или дубликатов опрашиваем пользователя.
	Если КодОшибки > 0 Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Добавление незаполненных полей и дублирующих значений недопустимо!");
		Объект.АмурскаяОбласть_УслугиВ_ГИС_НМСПН.Удалить(Элементы.УслугиВ_ГИС_НМСПН.ТекущиеДанные.НомерСтроки - 1);
		
	КонецЕсли;
	
	// Разблокируем кнопку добавления табличного поля "тзУслугиВБазе".
	Если НЕ Объект.АмурскаяОбласть_УслугиВ_ГИС_НМСПН.Количество() = 0 Тогда
		Элементы.тзУслугиВБазе.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры // УслугиВ_ГИС_НМСПНПередОкончаниемРедактирования()

&НаКлиенте
// Процедура - обработчик события "ПослеУдаления" таблицы "УслугиВ_ГИС_НМСПН".
//
Процедура УслугиВ_ГИС_НМСПНПослеУдаления(Элемент)
	
	// После удаления строки из УслугиВ_ГИС_НМСПН переписываем идентификаторы в УслугиВБазе. 
	Для Каждого СтрокаГИС_НМСПН Из Объект.АмурскаяОбласть_УслугиВ_ГИС_НМСПН Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("Идентификатор", СтрокаГИС_НМСПН.ИдентификаторУслуги);
		Отбор.Вставить("Услуга",        СтрокаГИС_НМСПН.НаименованиеУслуги);
		
		СтрокиИзменения = Объект.АмурскаяОбласть_УслугиВБазе.НайтиСтроки(Отбор);
		Для Каждого Строка ИЗ СтрокиИзменения Цикл
			Строка.Идентификатор = СтрокаГИС_НМСПН.НомерСтроки;
		КонецЦикла;
		
	КонецЦикла;
	
	УслугиВ_ГИС_НМСПНПриАктивизацииСтроки(Элемент);
	
	// Если в левой колонке пользователем удалены все колонки, то блокируем возможность добавления соответствий.
	Если Объект.АмурскаяОбласть_УслугиВ_ГИС_НМСПН.Количество() = 0 Тогда
		Элементы.тзУслугиВБазе.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры // УслугиВ_ГИС_НМСПНПослеУдаления()

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" таблицы "тзУслугиВБазе".
//
Процедура тзУслугиВБазеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Если Элементы.УслугиВ_ГИС_НМСПН.ТекущиеДанные = Неопределено ИЛИ Копирование Тогда
		Отказ = Истина;
	КонецЕсли
	
КонецПроцедуры // тзУслугиВБазеПередНачаломДобавления()

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" таблицы "тзУслугиВБазе".
//
Процедура тзУслугиВБазеПередУдалением(Элемент, Отказ)
	
	Если ПризнакУдаления Тогда
		
		Отказ           = Истина;
		ПризнакУдаления = Ложь;
		
	Иначе
		
		Отбор = Новый Структура;
		Отбор.Вставить("Идентификатор", Элементы.УслугиВ_ГИС_НМСПН.ТекущиеДанные.НомерСтроки);
		Отбор.Вставить("Услуга",        Элемент.ТекущиеДанные.Услуга); 
		
		СтрокиУдаления = Объект.АмурскаяОбласть_УслугиВБазе.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
			Объект.АмурскаяОбласть_УслугиВБазе.Удалить(СтрокаУдаления);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // тзУслугиВБазеПередУдалением()

&НаКлиенте
// Процедура - обработчик события "ПриНачалеРедактирования" таблицы "тзУслугиВБазе".
//
Процедура тзУслугиВБазеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// Запоминаем предыдущее значение перезаписываемой строки.
	Если НЕ НоваяСтрока Тогда
		ПредыдущаяУслуга        = Элемент.ТекущиеДанные.Услуга;
		ПредыдущийТеплоноситель = Элемент.ТекущиеДанные.Теплоноситель;
	КонецЕсли;
	
КонецПроцедуры // тзУслугиВБазеПриНачалеРедактирования()

&НаКлиенте
// Процедура - обработчик события "ПередОкончаниемРедактирования" таблицы "тзУслугиВБазе".
//
Процедура тзУслугиВБазеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ЯвляетсяГруппой(Элемент.ТекущиеДанные.Услуга) Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		
		Если Элементы.тзУслугиВБазе.ТекущиеДанные.Услуга.Пустая() Тогда
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Добавление незаполненных полей недопустимо!");
			
			ПризнакУдаления = Истина;
			
			тзУслугиВБазе.Удалить(Элементы.тзУслугиВБазе.ТекущиеДанные);
			
		Иначе
			
			Если НЕ НоваяСтрока И ЗначениеЗаполнено(ПредыдущаяУслуга) Тогда
				
				ПризнакУдаления = Истина;
				
				Отбор = Новый Структура;
				Отбор.Вставить("Идентификатор", Элементы.УслугиВ_ГИС_НМСПН.ТекущиеДанные.НомерСтроки);
				Отбор.Вставить("Услуга",        ПредыдущаяУслуга);
				
				СтрокиУдаления = Объект.АмурскаяОбласть_УслугиВБазе.НайтиСтроки(Отбор);
				
				Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
					Объект.АмурскаяОбласть_УслугиВБазе.Удалить(СтрокаУдаления);
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		
		ПоказатьПредупреждение(, "Группа не может быть выбрана как услуга", 0, "Предупреждение");
		
	КонецЕсли;
	
КонецПроцедуры // тзУслугиВБазеПередОкончаниемРедактирования()

&НаСервере
// Функция определяет является ли группой переданный элемент справочника переданный элемент справочника "Услуги".
//
Функция ЯвляетсяГруппой(ЭлементСправочника)
	
	Возврат ОбщегоНазначения.ОбъектЯвляетсяГруппой(ЭлементСправочника);
	
КонецФункции // ЯвляетсяГруппой()

&НаКлиенте
// Процедура - обработчик события "ПриОкончанииРедактирования" таблицы "тзУслугиВБазе".
//
Процедура тзУслугиВБазеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ Элемент.ТекущиеДанные = Неопределено И НЕ ОтменаРедактирования Тогда
		
		Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Услуга) Тогда
			// Удаляем пустую строку.
			тзУслугиВБазе.Удалить(тзУслугиВБазе.Индекс(Элемент.ТекущиеДанные));
		Иначе
			// Реквизиты Теплоноситель и ТепловаяЭнергия не могут иметь значение "Истина" одновременно.
			Если Элемент.ТекущиеДанные.Теплоноситель = Истина И Элемент.ТекущиеДанные.ТепловаяЭнергия = Истина Тогда
				Если ПредыдущийТеплоноситель = Истина Тогда
					Элемент.ТекущиеДанные.Теплоноситель = Ложь;
				Иначе
					Элемент.ТекущиеДанные.ТепловаяЭнергия = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			// Добавляем запись в УслугиВБазе.
			НоваяСтрокаСоответствия                 = Объект.АмурскаяОбласть_УслугиВБазе.Добавить();
			НоваяСтрокаСоответствия.Услуга          = Элемент.ТекущиеДанные.Услуга;
			НоваяСтрокаСоответствия.Теплоноситель   = Элемент.ТекущиеДанные.Теплоноситель;
			НоваяСтрокаСоответствия.ТепловаяЭнергия = Элемент.ТекущиеДанные.ТепловаяЭнергия;
			НоваяСтрокаСоответствия.Идентификатор   = Элементы.УслугиВ_ГИС_НМСПН.ТекущиеДанные.НомерСтроки;
			
			// Удаляем старую запись при перевыборе.
			Если НЕ ПредыдущаяУслуга = Элемент.ТекущиеДанные.Услуга Тогда
				
				Отбор = Новый Структура;
				Отбор.Вставить("Идентификатор", Элементы.УслугиВ_ГИС_НМСПН.ТекущиеДанные.НомерСтроки);
				Отбор.Вставить("Услуга",        ПредыдущаяУслуга);
				
				НайденнаяСтрока = Объект.АмурскаяОбласть_УслугиВБазе.НайтиСтроки(Отбор);
				Если НайденнаяСтрока.Количество() = 1 Тогда
					НайденнаяСтрока[0].Услуга = Элемент.ТекущиеДанные.Услуга;
				КонецЕсли;
				
			КонецЕсли;
			
			// Проверим записи.
			Отбор = Новый Структура;
			Отбор.Вставить("Идентификатор", Элементы.УслугиВ_ГИС_НМСПН.ТекущиеДанные.НомерСтроки);
			
			НайденныеСтроки = Объект.АмурскаяОбласть_УслугиВБазе.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() = 1 Тогда
				Элементы.УслугиВ_ГИС_НМСПН.ТекущиеДанные.СпособСверткиТарифа = "Не сворачивать";
			Иначе
				Элементы.УслугиВ_ГИС_НМСПН.ТекущиеДанные.СпособСверткиТарифа = "Усреднять";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // тзУслугиВБазеПриОкончанииРедактирования()

&НаСервере
// Предназначена для получения сведений об услугах и их кодах в ОСЗН Амурской области.
//
Функция ПолучениеМакета()
	
	Попытка
		
		Макет = УправлениеПечатью.МакетПечатнойФормы(ИмяОбъектаМетаданных);
		
	Исключение
		
		Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("ПФ_MXL_АмурскаяОбласть");
		
	КонецПопытки;
	
	Возврат Макет;
	
КонецФункции // ПолучениеМакета()

&НаКлиенте
// Процедура-обработчик события "ПриИзменении" поля "КодировкаDBF".
//
Процедура ВариантВыгрузкиПриИзменении(Элемент)
	
	Элементы.КодировкаDBF.Доступность = ВариантВыгрузки;
	
КонецПроцедуры // ВариантВыгрузкиПриИзменении()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ПрочиеПроцедурыИФункции

&НаСервере
// Процедура предназначена для заполнения таблицы "АмурскаяОбласть_УслугиВ_ГИС_НМСПН" на основании услуг,
// которые определены в макете "ПФ_MXL_АмурскаяОбласть".
Процедура ЗаполнитьТаблицуУслуг(Макет)
	
	Для Стр = 2 По Макет.ВысотаТаблицы Цикл
		СтрокаТаблицыУслуг = Объект.АмурскаяОбласть_УслугиВ_ГИС_НМСПН.Добавить();
		СтрокаТаблицыУслуг.ИдентификаторУслуги = Макет.Область(Стр, 2).Текст;
		СтрокаТаблицыУслуг.НаименованиеУслуги  = Макет.Область(Стр, 1).Текст;
	Конеццикла;
	
КонецПроцедуры // ЗаполнитьТаблицуУслуг()

#КонецОбласти