
#Область ПрочиеПроцедурыИФункции

&НаСервере
// Процедура заполняет таблицу услуг на сервере.
//
Процедура ЗаполнитьТаблицуУслугНаСервере(Идентификатор)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Идентификатор", Идентификатор);
	
	НайденныеСтроки = Объект.ВолгоградскаяОбласть_ТаблицаУслугДляВыгрузки.Выгрузить(Отбор, "УслугаВБазе");
	
	Для Каждого ТекСтрока из НайденныеСтроки Цикл
		ЗаполнитьЗначенияСвойств(ТП_УслугаВБазе.Добавить(), ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Формирует первоначальный список услуг.
//
Процедура ПолучитьСпискиУслуг()
	
	СписокУслуг = Новый СписокЗначений;
	
	СписокУслуг.Добавить("HOUSING",  "Жилищные услуги (кроме вывоза ТБО и домофона)");
	СписокУслуг.Добавить("WATER",    "Водоснабжение");
	СписокУслуг.Добавить("SEWERAGE", "Водоотведение");
	СписокУслуг.Добавить("HEAT",     "Отопление");
	СписокУслуг.Добавить("HOT_WAT",  "Горячее водоснабжение");
	СписокУслуг.Добавить("ENERGY",   "Электроснабжение");
	СписокУслуг.Добавить("GAS",      "Газоснабжение");
	СписокУслуг.Добавить("GARBAGE",  "Вывоз мусора");
	СписокУслуг.Добавить("ENERGY_H", "Электрическое отопление");
	СписокУслуг.Добавить("GAS_HEAT", "Газовое отопление");
	
	Для Каждого ЭлементСписка Из СписокУслуг Цикл
		НоваяУслуга = Объект.ВолгоградскаяОбласть_ТаблицаУслуг.Добавить();
		НоваяУслуга.Услуга        = ЭлементСписка.Представление;
		НоваяУслуга.Идентификатор = ЭлементСписка.Значение;
	КонецЦикла;
		
КонецПроцедуры // ПолучитьСпискиУслуг()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// РАБОТА С ВРЕМЕННЫМ ХРАНИЛИЩЕМ

#Область РаботаСВременнымХранилищем

&НаСервере
// Помещает настройки во временное хранилище.
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ВолгоградскаяОбласть_ЖКУ",       Объект.ВолгоградскаяОбласть_ТаблицаУслуг.Выгрузить());
	СтруктураНастроек.Вставить("ВолгоградскаяОбласть_ЖКУ_ВБазе", Объект.ВолгоградскаяОбласть_ТаблицаУслугДляВыгрузки.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПризнакУдаления = Ложь;
	
	// Получаем настройки из хранилища.
	Если Параметры.Свойство("АдресНастроекВХранилище") И Не Параметры.АдресНастроекВХранилище = Неопределено Тогда
		
		СтруктураНастроек = ПолучитьИзВременногоХранилища(Параметры.АдресНастроекВХранилище);
		
		Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
			
			Если СтруктураНастроек.Свойство("ВолгоградскаяОбласть_ЖКУ") Тогда
				Объект.ВолгоградскаяОбласть_ТаблицаУслуг.Загрузить(СтруктураНастроек.ВолгоградскаяОбласть_ЖКУ);
			КонецЕсли;
			
			Если СтруктураНастроек.Свойство("ВолгоградскаяОбласть_ЖКУ_ВБазе") Тогда
				Объект.ВолгоградскаяОбласть_ТаблицаУслугДляВыгрузки.Загрузить(СтруктураНастроек.ВолгоградскаяОбласть_ЖКУ_ВБазе);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ВолгоградскаяОбласть_ТаблицаУслуг.Количество() = 0 Тогда
		ПолучитьСпискиУслуг();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "КомандаСохранить".
Процедура КомандаСохранить(Команда)
	
	Закрыть(ПоместитьНастройкиВХранилище());
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" табличного поля "ТП_УслугаВБазе".
//
Процедура ТП_УслугаВБазеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Устанавливаем запрет на добавление строк копированием.
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" табличного поля "ТП_УслугаВБазе".
//
Процедура ТП_УслугаВБазеПередУдалением(Элемент, Отказ)
	
	Если ПризнакУдаления Тогда
		Отказ = Истина;
		ПризнакУдаления = Ложь;
	Иначе
		// При удалении строки удаляем соответствующие записи в ВолгоградскаяОбласть_УслугиВБазе.
		УслугаВБазе              = Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе;
		ИдентификаторУслугиВОСЗН = Элементы.ВолгоградскаяОбласть_ЖКУ.ТекущиеДанные.Идентификатор;
		УслугаВОСЗН              = Элементы.ВолгоградскаяОбласть_ЖКУ.ТекущиеДанные.Услуга;
		
		Отбор = Новый Структура;
		Отбор.Вставить("УслугаВБазе",        УслугаВБазе);
		Отбор.Вставить("Идентификатор",      ИдентификаторУслугиВОСЗН);
		Отбор.Вставить("УслугаСоответствия", УслугаВОСЗН);
		
		СтрокиУдаления = Объект.ВолгоградскаяОбласть_ТаблицаУслугДляВыгрузки.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
			Объект.ВолгоградскаяОбласть_ТаблицаУслугДляВыгрузки.Удалить(СтрокаУдаления);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередОкончаниемРедактирования" таблицы "УслугаВБазе".
//
Процедура ТП_УслугаВБазеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Добавление незаполненных полей недопустимо!");
		ПризнакУдаления = Истина;
		ТП_УслугаВБазе.Удалить(Элементы.ТП_УслугаВБазе.ТекущиеДанные);
		
		Если ЗначениеЗаполнено(ПредыдущаяУслуга) Тогда
			Идентификатор   = Элементы.ВолгоградскаяОбласть_ЖКУ.ТекущиеДанные.Идентификатор;
			ПризнакУдаления = Истина;
			Отбор = Новый Структура;
			Отбор.Вставить("Идентификатор", Идентификатор);
			Отбор.Вставить("УслугаВБазе",   ПредыдущаяУслуга);
			
			СтрокиУдаления = Объект.ВолгоградскаяОбласть_ТаблицаУслугДляВыгрузки.НайтиСтроки(Отбор);
			
			Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
				Объект.ВолгоградскаяОбласть_ТаблицаУслугДляВыгрузки.Удалить(СтрокаУдаления);
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриОкончанииРедактирования" табличного поля "ТП_УслугаВБазе".
//
Процедура ТП_УслугаВБазеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		// Добавляем запись в ВолгоградскаяОбласть_УслугиВБазе.
		УслугаВБазе              = Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе;
		ИдентификаторУслугиВОСЗН = Элементы.ВолгоградскаяОбласть_ЖКУ.ТекущиеДанные.Идентификатор;
		УслугаВОСЗН              = Элементы.ВолгоградскаяОбласть_ЖКУ.ТекущиеДанные.Услуга;
		
		Если НоваяСтрока Тогда
			НоваяСтрокаСоответствия                    = Объект.ВолгоградскаяОбласть_ТаблицаУслугДляВыгрузки.Добавить();
			НоваяСтрокаСоответствия.УслугаВБазе        = УслугаВБазе;
			НоваяСтрокаСоответствия.Идентификатор      = ИдентификаторУслугиВОСЗН;
			НоваяСтрокаСоответствия.УслугаСоответствия = УслугаВОСЗН;
		Иначе
			Если НЕ ПредыдущаяУслуга = УслугаВБазе Тогда
				Отбор = Новый Структура;
				Отбор.Вставить("Идентификатор", ИдентификаторУслугиВОСЗН);
				Отбор.Вставить("УслугаВБазе",   ПредыдущаяУслуга);
				
				НайденнаяСтрока = Объект.ВолгоградскаяОбласть_ТаблицаУслугДляВыгрузки.НайтиСтроки(Отбор);
				Если НайденнаяСтрока.Количество() = 1 Тогда
					НайденнаяСтрока[0].УслугаВБазе = УслугаВБазе;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриНачалеРедактирования" табличного поля "ТП_УслугаВБазе".
//
Процедура ТП_УслугаВБазеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// Запоминаем предыдущее значение перезаписываемой строки.
	Если НЕ НоваяСтрока Тогда
		ПредыдущаяУслуга = Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "УслугаВБазе" таблицы "Услуги в Базе".
//
Процедура ТП_УслугаВБазеУслугаВБазеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Список уже выбранных услуг по данной услуге в ОСЗН.
	СписокВыбранныхУслуг = Новый СписокЗначений;
	СтрокиВыбранныхУслуг = Объект.ВолгоградскаяОбласть_ТаблицаУслугДляВыгрузки.НайтиСтроки(Новый Структура("Идентификатор", Элементы.ВолгоградскаяОбласть_ЖКУ.ТекущиеДанные.Идентификатор));
	Для Каждого СтрокаВыбраннойУслуги Из СтрокиВыбранныхУслуг Цикл
		СписокВыбранныхУслуг.Добавить(СтрокаВыбраннойУслуги.УслугаВБазе);
	КонецЦикла;
	
	ВидСравненияВОтборе = ВидСравненияКомпоновкиДанных.НеВСписке;
	
	Форма = ПолучитьФорму("Справочник.КВП_Услуги.ФормаВыбора", Новый Структура("ТекущаяСтрока", Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе), Элемент);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Форма.Список.КомпоновщикНастроек.Настройки.Отбор, "Ссылка", СписокВыбранныхУслуг,
															ВидСравненияКомпоновкиДанных.НеВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" табличного поля "Услуги в ОСЗН".
//
Процедура ВолгоградскаяОбласть_ЖКУПриАктивизацииСтроки(Элемент)
	
	// При активации строки УслугаВОСЗН, загружаем соответствия в УслугаВБазе. 
	ТП_УслугаВБазе.Очистить();
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		Идентификатор = Элемент.ТекущиеДанные.Идентификатор;
		ЗаполнитьТаблицуУслугНаСервере(Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
