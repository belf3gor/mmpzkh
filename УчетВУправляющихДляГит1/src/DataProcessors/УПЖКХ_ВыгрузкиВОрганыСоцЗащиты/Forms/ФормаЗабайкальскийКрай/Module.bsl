
//////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункции

&НаСервере
// Формирует таблицу соответствия номекров полей и имен колонок.
//
Процедура СформироватьСоответствиеНомеровИИменКолонок(ФайлДБФ)
	
	СоответствиеПолейФайлаЗагрузки.Очистить();
	Для Каждого ПолеФайлаЗагрузки ИЗ ФайлДБФ.Поля Цикл
		НоваяСтрока = СоответствиеПолейФайлаЗагрузки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПолеФайлаЗагрузки);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Формирует массив сокращений для Томской области для выбранного вида сокращения.
//
Функция СформироватьМассивСокращенийДляЗабайкальскогоКраяПоВиду(ВидСокращение)
		
	МассивСокращений = Новый Массив;
	// для регионов
	Если ВидСокращение = 1 Тогда
		МассивСокращений.Добавить("обл");
		// для районов
	ИначеЕсли ВидСокращение = 2 Тогда
		МассивСокращений.Добавить("р-н");
		МассивСокращений.Добавить("р-н.");
		// для городов
	ИначеЕсли ВидСокращение = 3 Тогда
		МассивСокращений.Добавить("г");
		МассивСокращений.Добавить("г.");
		// для нас.пунктов
	ИначеЕсли ВидСокращение = 4 Тогда
		МассивСокращений.Добавить("рп");
		МассивСокращений.Добавить("п");
		МассивСокращений.Добавить("с");
		МассивСокращений.Добавить("д");
		МассивСокращений.Добавить("х");
		МассивСокращений.Добавить("ст");
		МассивСокращений.Добавить("пгт");
		МассивСокращений.Добавить("дп");
		МассивСокращений.Добавить("рзд");
		МассивСокращений.Добавить("мкр");
		МассивСокращений.Добавить("нп");
		МассивСокращений.Добавить("тер");
		МассивСокращений.Добавить("п/ст");
		МассивСокращений.Добавить("промзона");
		МассивСокращений.Добавить("снт");
		МассивСокращений.Добавить("п/о");
		МассивСокращений.Добавить("городок");
		МассивСокращений.Добавить("заимка");
		МассивСокращений.Добавить("кп");
		МассивСокращений.Добавить("ж/д_казарм");
		МассивСокращений.Добавить("г");
		МассивСокращений.Добавить("обл");
		
		МассивСокращений.Добавить("рп.");
		МассивСокращений.Добавить("п.");
		МассивСокращений.Добавить("с.");
		МассивСокращений.Добавить("д.");
		МассивСокращений.Добавить("х.");
		МассивСокращений.Добавить("ст.");
		МассивСокращений.Добавить("пгт.");
		МассивСокращений.Добавить("дп.");
		МассивСокращений.Добавить("рзд.");
		МассивСокращений.Добавить("мкр.");
		МассивСокращений.Добавить("нп.");
		МассивСокращений.Добавить("тер.");
		МассивСокращений.Добавить("п/ст.");
		МассивСокращений.Добавить("промзона.");
		МассивСокращений.Добавить("снт.");
		МассивСокращений.Добавить("п/о.");
		МассивСокращений.Добавить("городок.");
		МассивСокращений.Добавить("заимка.");
		МассивСокращений.Добавить("кп.");
		МассивСокращений.Добавить("ж/д_казарм.");
		МассивСокращений.Добавить("г.");
		МассивСокращений.Добавить("обл.");
		// для улиц
	ИначеЕсли ВидСокращение = 5 Тогда
		МассивСокращений.Добавить("ул");
		МассивСокращений.Добавить("тер");
		МассивСокращений.Добавить("пл");
		МассивСокращений.Добавить("пер");
		МассивСокращений.Добавить("снт");
		МассивСокращений.Добавить("проезд");
		МассивСокращений.Добавить("б-р");
		МассивСокращений.Добавить("туп");
		МассивСокращений.Добавить("п");
		МассивСокращений.Добавить("ш");
		МассивСокращений.Добавить("пр-кт");
		МассивСокращений.Добавить("тракт");
		МассивСокращений.Добавить("сквер");
		МассивСокращений.Добавить("ст");
		МассивСокращений.Добавить("наб");
		МассивСокращений.Добавить("км");
		МассивСокращений.Добавить("ж/д_ст");
		МассивСокращений.Добавить("сад");
		МассивСокращений.Добавить("парк");
		МассивСокращений.Добавить("уч-к");
		МассивСокращений.Добавить("мкр");
		МассивСокращений.Добавить("городок");
		МассивСокращений.Добавить("кв-л");
		МассивСокращений.Добавить("нп");
		МассивСокращений.Добавить("остров");
		МассивСокращений.Добавить("гск");
		МассивСокращений.Добавить("линия");
		МассивСокращений.Добавить("рзд");
		МассивСокращений.Добавить("стр");
		МассивСокращений.Добавить("аллея");
		МассивСокращений.Добавить("казарма");
		МассивСокращений.Добавить("ж/д_рзд");
		МассивСокращений.Добавить("д");
		МассивСокращений.Добавить("ж/д_казарм");
		МассивСокращений.Добавить("ж/д_будка");
		МассивСокращений.Добавить("высел");
		
		МассивСокращений.Добавить("ул.");
		МассивСокращений.Добавить("тер.");
		МассивСокращений.Добавить("пл.");
		МассивСокращений.Добавить("пер.");
		МассивСокращений.Добавить("снт.");
		МассивСокращений.Добавить("проезд.");
		МассивСокращений.Добавить("б-р.");
		МассивСокращений.Добавить("туп.");
		МассивСокращений.Добавить("п.");
		МассивСокращений.Добавить("ш.");
		МассивСокращений.Добавить("пр-кт.");
		МассивСокращений.Добавить("тракт.");
		МассивСокращений.Добавить("сквер.");
		МассивСокращений.Добавить("ст.");
		МассивСокращений.Добавить("наб.");
		МассивСокращений.Добавить("км.");
		МассивСокращений.Добавить("ж/д_ст.");
		МассивСокращений.Добавить("сад.");
		МассивСокращений.Добавить("парк.");
		МассивСокращений.Добавить("уч-к.");
		МассивСокращений.Добавить("мкр.");
		МассивСокращений.Добавить("городок.");
		МассивСокращений.Добавить("кв-л.");
		МассивСокращений.Добавить("нп.");
		МассивСокращений.Добавить("остров.");
		МассивСокращений.Добавить("гск.");
		МассивСокращений.Добавить("линия.");
		МассивСокращений.Добавить("рзд.");
		МассивСокращений.Добавить("стр.");
		МассивСокращений.Добавить("аллея.");
		МассивСокращений.Добавить("казарма.");
		МассивСокращений.Добавить("ж/д_рзд.");
		МассивСокращений.Добавить("д.");
		МассивСокращений.Добавить("ж/д_казарм.");
		МассивСокращений.Добавить("ж/д_будка.");
		МассивСокращений.Добавить("высел.");
	КонецЕсли;
	
	Возврат МассивСокращений;
	
КонецФункции // СформироватьМассивСокращениеДляСвердловскойОблПоВиду()

&НаСервере
// Функция сокращает название города или улицы: убирает сокращения,
// определяющие тип данного элемента адреса: "г.", "ул." и так далее.
//
// Параметры:
//  Ресурс       - Строка - элемент адреса.
//
// Возвращаемое значение:
//  Строка - элемент адреса в сокращенном виде.
//
Функция НормализацияПолейАдресаОбласти(Ресурс, Массив)
	
	Найден = Истина;
	
	Для Каждого Элемент Из Массив Цикл
		
		Если ВРег(Прав(СокрЛП(Ресурс), СтрДлина(Элемент))) = ВРег(Элемент) Тогда
			ПредСимвол = Сред(СокрЛП(Ресурс), СтрДлина(СокрЛП(Ресурс)) - СтрДлина(Элемент), 1);
			
			Если ПредСимвол = " " Тогда
				Возврат СокрЛП(Лев(СокрЛП(Ресурс), СтрДлина(СокрЛП(Ресурс)) - СтрДлина(Элемент)));
			КонецЕсли;
		ИначеЕсли ВРег(Лев(СокрЛП(Ресурс), СтрДлина(Элемент))) = ВРег(Элемент) Тогда
			СледСимвол = Сред(СокрЛП(Ресурс), СтрДлина(Элемент) + 1, 1);
			
			Если СледСимвол = " " Тогда
				Возврат СокрЛП(Сред(СокрЛП(Ресурс), СтрДлина(Элемент) + 1));
			КонецЕсли;
		Иначе
			
			Найден = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Найден = Ложь Тогда
		Возврат Ресурс;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ДАННЫХ

#Область ЗаполнениеДанных

&НаКлиенте
// Проверяет наличие всех необходимых данных для заполнения таблиц выгрузки.
//
Функция ПроверкаУсловийДляЗаполненияТаблиц()
	
	ТекстОшибки = "";
	
	Если НЕ ЗначениеЗаполнено(Объект.Период) Тогда
		ТекстОшибки = ТекстОшибки + "Не указан период выгрузки!";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не указана организация!", "Не указан организация!");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяФайлаЗагрузки) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не указан файл загрузки!", "Не указан файл загрузки!");
	КонецЕсли;
	
	Если Объект.ЗабайкальскийКрай_ЖКУ_ВБазе.Количество() = 0 Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не заполнена таблица соответствия услуг!", "Не заполнена таблица соответствия услуг!");
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции // ПроверкаУсловийДляЗаполненияТаблиц

&НаСервере
// Процедура загрузки данных из файла.
//
Процедура ЗагрузитьНаСервере(ПутьКФайлу)
	
	// Запись временных данных во временный файл.
	врДанныеФайла = ПолучитьИзВременногоХранилища(ПутьКФайлу);
	ВременныйФайл = ПолучитьИмяВременногоФайла("DBF");
	
	// Для чтения *.dbf формата урежем имя временного файла.
	ФайлДБФ = Новый Файл(ВременныйФайл);
	СтароеИмяФайла = ФайлДБФ.ИмяБезРасширения + ".DBF";
	НовоеИмяФайла = Лев(ФайлДБФ.ИмяБезРасширения, 8) + ".DBF";
	ВременныйФайл = СтрЗаменить(ФайлДБФ.ПолноеИмя, СтароеИмяФайла, НовоеИмяФайла);
	
	врДанныеФайла.Записать(ВременныйФайл);
	
	//загрузка
	ФайлДБФ = Новый XBase;
	ФайлДБФ.Кодировка = ?(КодировкаФайла = 0, КодировкаXBase.OEM, КодировкаXBase.ANSI);
	ФайлДБФ.ОткрытьФайл(ВременныйФайл, , Истина);
	
	МассивСокрНасПункт = СформироватьМассивСокращенийДляЗабайкальскогоКраяПоВиду(4);
	МассивСокрУлицы    = СформироватьМассивСокращенийДляЗабайкальскогоКраяПоВиду(5);
	
	МассивКолонок = ПолучитьРеквизиты("тп_ЗабайкальскийКрайТаблицаНачислений");
	
	ТаблицаДанныхФайла = Новый ТаблицаЗначений;
	Для Каждого СтрокаМассиваКолонок ИЗ МассивКолонок Цикл
		ТаблицаДанныхФайла.Колонки.Добавить(СтрокаМассиваКолонок.Имя, СтрокаМассиваКолонок.ТипЗначения, СтрокаМассиваКолонок.Заголовок);
	КонецЦикла;
	
	Попытка
		
		Если ФайлДБФ.Открыта() = Истина Тогда
			
			СформироватьСоответствиеНомеровИИменКолонок(ФайлДБФ);
			
			ТаблицаДанныхФайла.Очистить();
			
			Пока Не ФайлДБФ.ВКонце() Цикл
				
				НоваяСтрока = ТаблицаДанныхФайла.Добавить();
				НоваяСтрока.ПКУ              = СокрЛП(ФайлДБФ[ФайлДБФ.поля[0].Имя]);
				НоваяСтрока.НаселенныйПункт  = ВРег(НормализацияПолейАдресаОбласти(СокрЛП(ФайлДБФ[ФайлДБФ.поля[1].Имя]), МассивСокрНасПункт));
				НоваяСтрока.Улица            = ВРег(НормализацияПолейАдресаОбласти(СокрЛП(ФайлДБФ[ФайлДБФ.поля[2].Имя]), МассивСокрУлицы));
				НоваяСтрока.НомерДома        = СокрЛП(Строка(ФайлДБФ[ФайлДБФ.поля[3].Имя]));
				НоваяСтрока.Корпус           = ВРег(СокрЛП(ФайлДБФ[ФайлДБФ.поля[4].Имя]));
				Попытка
					НомерКвартиры = Число(ФайлДБФ[ФайлДБФ.поля[5].Имя]);
				Исключение
					НомерКвартиры = 1;
				КонецПопытки;
				
				НоваяСтрока.Квартира = ?(НомерКвартиры = 0, 1, НомерКвартиры);
				
				НоваяСтрока.Зарегистрировано = СокрЛП(Строка(ФайлДБФ[ФайлДБФ.поля[6].Имя]));
				
				ФайлДБФ.Следующая();
				
			КонецЦикла;
			
		КонецЕсли;
		
	Исключение
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Загрузка данных из файла загрузки не удалась! Проверьте корректность указанного файла и корректность настройки соответствия услуг и номеров полей файла загрузки/выгрузки на форме настроек.");
	КонецПопытки;
	
	ФайлДБФ.ЗакрытьФайл();
	
	ТаблицаАдресов = ПолучитьАдресаВсехЗданий();
	СформироватьТаблицуДанныхЗабайкальскийКрай(ТаблицаДанныхФайла, ТаблицаАдресов);
	
КонецПроцедуры

// Получает таблицу данных с начислениями и необходимыми данными.
//
Процедура СформироватьТаблицуДанныхЗабайкальскийКрай(ТаблицаДанныхФайла, ТаблицаАдресов)
	
	ТаблицаИдентифицированныхЖильцов = ПолучитьТаблицуИдентифицированныхЖильцов(ТаблицаДанныхФайла, ТаблицаАдресов);
	
	Запрос = Новый Запрос;
	
	МенеджерВТ                     = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	// Параметры
	Запрос.УстановитьПараметр("ТаблицаИзФайла",        ТаблицаДанныхФайла);
	Запрос.УстановитьПараметр("ДатаНачала",            НачалоМесяца(Объект.Период));
	Запрос.УстановитьПараметр("ДатаКонца",             КонецМесяца(Объект.Период));
	Запрос.УстановитьПараметр("ДатаКонцаОплаты",       УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
	Запрос.УстановитьПараметр("МесяцНачисления",       КонецМесяца(Объект.Период));
	Запрос.УстановитьПараметр("Организация",           Объект.Организация);
	Запрос.УстановитьПараметр("ТаблицаИдентифЖильцов", ТаблицаИдентифицированныхЖильцов);
	Запрос.УстановитьПараметр("ТаблицаУслуг",          Объект.ЗабайкальскийКрай_ЖКУ_ВБазе.Выгрузить());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИзФайла.ПКУ КАК ПКУ,
	|	ТаблицаИзФайла.НаселенныйПункт КАК Город,
	|	ТаблицаИзФайла.Улица КАК Улица,
	|	ТаблицаИзФайла.НомерДома КАК Дом,
	|	ТаблицаИзФайла.Корпус КАК Корпус,
	|	ТаблицаИзФайла.Квартира КАК Квартира,
	|	ТаблицаИзФайла.Зарегистрировано КАК Зарегистрировано
	|ПОМЕСТИТЬ втТаблицаДанныхИзФайла
	|ИЗ
	|	&ТаблицаИзФайла КАК ТаблицаИзФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУслуг.КодУслугиВОСЗН КАК ИдентификаторУслугиВОСЗН,
	|	ТаблицаУслуг.УслугаВОСЗН КАК УслугаВОСЗН,
	|	ТаблицаУслуг.УслугаВБазе КАК УслугаВБазе,
	|	ТаблицаУслуг.НомерПоляНаличияСчетчика КАК НомерПоляНаличияСчетчика,
	|	ТаблицаУслуг.НомерПоляОбъемПотребления КАК НомерПоляОбъемПотребления,
	|	ТаблицаУслуг.НомерПоляСуммаОплаты КАК НомерПоляСуммаОплаты
	|ПОМЕСТИТЬ втУслуги
	|ИЗ
	|	&ТаблицаУслуг КАК ТаблицаУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаИдентифЖильцов.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаИдентифЖильцов.Помещение КАК Помещение,
	|	ТаблицаИдентифЖильцов.Город КАК Город,
	|	ТаблицаИдентифЖильцов.Улица КАК Улица,
	|	ТаблицаИдентифЖильцов.Дом КАК Дом,
	|	ТаблицаИдентифЖильцов.Корпус КАК Корпус,
	|	ТаблицаИдентифЖильцов.Квартира КАК Квартира
	|ПОМЕСТИТЬ втИдентифицированныеЖильцы
	|ИЗ
	|	&ТаблицаИдентифЖильцов КАК ТаблицаИдентифЖильцов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Владелец КАК Здание,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Адрес КАК Помещение
	|ПОМЕСТИТЬ втЛицевыеСчета
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втИдентифицированныеЖильцы.ЛицевойСчет
	|				ИЗ
	|					втИдентифицированныеЖильцы КАК втИдентифицированныеЖильцы)) КАК КВП_ЛицевыеСчетаСрезПоследних
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет,
	|	втЛицевыеСчета.Помещение КАК Помещение,
	|	втЛицевыеСчета.Здание КАК Здание,
	|	ЕСТЬNULL(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток, 0) КАК СуммаДолга
	|ПОМЕСТИТЬ втДанныеСПлощадями
	|ИЗ
	|	втЛицевыеСчета КАК втЛицевыеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|				&ДатаНачала,
	|				Организация = &Организация
	|					И ЛицевойСчет В
	|						(ВЫБРАТЬ
	|							втЛицевыеСчета.ЛицевойСчет
	|						ИЗ
	|							втЛицевыеСчета КАК втЛицевыеСчета)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|		ПО втЛицевыеСчета.ЛицевойСчет = КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеСПлощадями.ЛицевойСчет КАК ЛицевойСчет,
	|	втДанныеСПлощадями.Помещение КАК Помещение,
	|	втДанныеСПлощадями.Здание КАК Здание,
	|	втДанныеСПлощадями.СуммаДолга КАК СуммаДолга,
	|	ВЫБОР
	|		КОГДА втДанныеСПлощадями.СуммаДолга > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НаличиеЗадолженности
	|ПОМЕСТИТЬ втДанныеСДолгом
	|ИЗ
	|	втДанныеСПлощадями КАК втДанныеСПлощадями
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет,
	|	втЛицевыеСчета.Здание КАК Здание,
	|	втЛицевыеСчета.Помещение КАК Помещение,
	|	втУслуги.ИдентификаторУслугиВОСЗН КАК ИдентификаторУслугиВОСЗН,
	|	втУслуги.УслугаВБазе КАК УслугаВБазе
	|ПОМЕСТИТЬ втЛицевыеСчетаСУслугами
	|ИЗ
	|	втЛицевыеСчета КАК втЛицевыеСчета,
	|	втУслуги КАК втУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга КАК Услуга,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ))
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНачисления,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ))
	|					И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|				ТОГДА УПЖКХ_НачисленияОбороты.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОбъемНачисления
	|ПОМЕСТИТЬ втНачисленияСВидамиТарифов
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНачала,
	|			&ДатаКонца,
	|			Регистратор,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втЛицевыеСчетаСУслугами.ЛицевойСчет
	|					ИЗ
	|						втЛицевыеСчетаСУслугами КАК втЛицевыеСчетаСУслугами)
	|				И Услуга В
	|					(ВЫБРАТЬ
	|						втЛицевыеСчетаСУслугами.УслугаВБазе
	|					ИЗ
	|						втЛицевыеСчетаСУслугами КАК втЛицевыеСчетаСУслугами)
	|				И НЕ РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени))
	|				И НЕ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)) КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга КАК Услуга,
	|	СУММА(-УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот) КАК СуммаОплаты
	|ПОМЕСТИТЬ втОплаты
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаКонца,
	|			&ДатаКонцаОплаты,
	|			Регистратор,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втЛицевыеСчетаСУслугами.ЛицевойСчет
	|					ИЗ
	|						втЛицевыеСчетаСУслугами КАК втЛицевыеСчетаСУслугами)
	|				И Услуга В
	|					(ВЫБРАТЬ
	|						втЛицевыеСчетаСУслугами.УслугаВБазе
	|					ИЗ
	|						втЛицевыеСчетаСУслугами КАК втЛицевыеСчетаСУслугами)
	|				И НЕ РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени))
	|				И ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)) КАК УПЖКХ_НачисленияОбороты
	|ГДЕ
	|	НАЧАЛОПЕРИОДА(УПЖКХ_НачисленияОбороты.МесяцНачисления, МЕСЯЦ) < &МесяцНачисления
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект.Адрес КАК Помещение,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги КАК Услуга,
	|	ИСТИНА КАК НаличиеСчетчика
	|ПОМЕСТИТЬ втДействующиеИндСчетчики
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&ДатаКонца,
	|			Объект В
	|					(ВЫБРАТЬ
	|						втЛицевыеСчета.ЛицевойСчет
	|					ИЗ
	|						втЛицевыеСчета КАК втЛицевыеСчета)
	|				И ДатаИзменения <= &ДатаКонца) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги,
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&ДатаКонца,
	|			Объект В
	|					(ВЫБРАТЬ
	|						втЛицевыеСчета.Помещение
	|					ИЗ
	|						втЛицевыеСчета КАК втЛицевыеСчета)
	|				И ДатаИзменения <= &ДатаКонца) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДействующиеИндСчетчики.Помещение КАК Помещение,
	|	втДействующиеИндСчетчики.Услуга КАК Услуга,
	|	МАКСИМУМ(втДействующиеИндСчетчики.НаличиеСчетчика) КАК НаличиеСчетчика
	|ПОМЕСТИТЬ втИндСчетчиков
	|ИЗ
	|	втДействующиеИндСчетчики КАК втДействующиеИндСчетчики
	|
	|СГРУППИРОВАТЬ ПО
	|	втДействующиеИндСчетчики.Помещение,
	|	втДействующиеИндСчетчики.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛицевыеСчетаСУслугами.ЛицевойСчет КАК ЛицевойСчет,
	|	втЛицевыеСчетаСУслугами.Здание КАК Здание,
	|	втЛицевыеСчетаСУслугами.Помещение КАК Помещение,
	|	втЛицевыеСчетаСУслугами.ИдентификаторУслугиВОСЗН КАК ИдентификаторУслугиВОСЗН,
	|	втЛицевыеСчетаСУслугами.УслугаВБазе КАК УслугаВБазе,
	|	ЕСТЬNULL(втНачисленияСВидамиТарифов.СуммаНачисления, 0) КАК СуммаНачисления,
	|	ЕСТЬNULL(втОплаты.СуммаОплаты, 0) КАК СуммаОплаты,
	|	ЕСТЬNULL(втНачисленияСВидамиТарифов.ОбъемНачисления, 0) КАК ОбъемНачисления,
	|	ЕСТЬNULL(втИндСчетчиков.НаличиеСчетчика, ЛОЖЬ) КАК НаличиеСчетчика
	|ПОМЕСТИТЬ втДанныеСНачислениямиИПУ
	|ИЗ
	|	втЛицевыеСчетаСУслугами КАК втЛицевыеСчетаСУслугами
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНачисленияСВидамиТарифов КАК втНачисленияСВидамиТарифов
	|		ПО втЛицевыеСчетаСУслугами.ЛицевойСчет = втНачисленияСВидамиТарифов.ЛицевойСчет
	|			И втЛицевыеСчетаСУслугами.УслугаВБазе = втНачисленияСВидамиТарифов.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОплаты КАК втОплаты
	|		ПО втЛицевыеСчетаСУслугами.ЛицевойСчет = втОплаты.ЛицевойСчет
	|			И втЛицевыеСчетаСУслугами.УслугаВБазе = втОплаты.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втИндСчетчиков КАК втИндСчетчиков
	|		ПО (втЛицевыеСчетаСУслугами.ЛицевойСчет = втИндСчетчиков.Помещение
	|				ИЛИ втЛицевыеСчетаСУслугами.Помещение = втИндСчетчиков.Помещение)
	|			И втЛицевыеСчетаСУслугами.УслугаВБазе = втИндСчетчиков.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеСНачислениямиИПУ.ЛицевойСчет КАК ЛицевойСчет,
	|	втДанныеСНачислениямиИПУ.ИдентификаторУслугиВОСЗН КАК ИдентификаторУслугиВОСЗН,
	|	МАКСИМУМ(втДанныеСНачислениямиИПУ.НаличиеСчетчика) КАК НаличиеСчетчика,
	|	СУММА(втДанныеСНачислениямиИПУ.ОбъемНачисления) КАК ОбъемНачисления,
	|	СУММА(втДанныеСНачислениямиИПУ.СуммаНачисления) КАК СуммаНачисления,
	|	СУММА(втДанныеСНачислениямиИПУ.СуммаОплаты) КАК СуммаОплаты,
	|	МАКСИМУМ(ЕСТЬNULL(втДанныеСДолгом.НаличиеЗадолженности, ЛОЖЬ)) КАК НаличиеЗадолженности
	|ПОМЕСТИТЬ втИтоговыеДанные
	|ИЗ
	|	втДанныеСНачислениямиИПУ КАК втДанныеСНачислениямиИПУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеСДолгом КАК втДанныеСДолгом
	|		ПО втДанныеСНачислениямиИПУ.ЛицевойСчет = втДанныеСДолгом.ЛицевойСчет
	|
	|СГРУППИРОВАТЬ ПО
	|	втДанныеСНачислениямиИПУ.ЛицевойСчет,
	|	втДанныеСНачислениямиИПУ.ИдентификаторУслугиВОСЗН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИдентифицированныеЖильцы.ЛицевойСчет КАК ЛицевойСчет,
	|	втИдентифицированныеЖильцы.Город КАК Город,
	|	втИдентифицированныеЖильцы.Улица КАК Улица,
	|	втИдентифицированныеЖильцы.Дом КАК Дом,
	|	втИдентифицированныеЖильцы.Корпус КАК Корпус,
	|	втИдентифицированныеЖильцы.Квартира КАК Квартира,
	|	ЕСТЬNULL(втИтоговыеДанные.ИдентификаторУслугиВОСЗН, 0) КАК ИдентификаторУслугиВОСЗН,
	|	ЕСТЬNULL(втИтоговыеДанные.НаличиеСчетчика, ЛОЖЬ) КАК НаличиеСчетчика,
	|	ЕСТЬNULL(втИтоговыеДанные.ОбъемНачисления, 0) КАК ОбъемНачисления,
	|	ЕСТЬNULL(втИтоговыеДанные.СуммаНачисления, 0) КАК СуммаНачисления,
	|	ЕСТЬNULL(втИтоговыеДанные.СуммаОплаты, 0) КАК СуммаОплаты,
	|	ЕСТЬNULL(втИтоговыеДанные.НаличиеЗадолженности, ЛОЖЬ) КАК НаличиеЗадолженности
	|ПОМЕСТИТЬ втИтоговыеДанныеБезТаблицыИзФайла
	|ИЗ
	|	втИдентифицированныеЖильцы КАК втИдентифицированныеЖильцы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втИтоговыеДанные КАК втИтоговыеДанные
	|		ПО втИдентифицированныеЖильцы.ЛицевойСчет = втИтоговыеДанные.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговыеДанныеБезТаблицыИзФайла.ЛицевойСчет КАК ЛицевойСчет,
	|	втИтоговыеДанныеБезТаблицыИзФайла.Город КАК Город,
	|	втИтоговыеДанныеБезТаблицыИзФайла.Улица КАК Улица,
	|	втИтоговыеДанныеБезТаблицыИзФайла.Дом КАК Дом,
	|	втИтоговыеДанныеБезТаблицыИзФайла.Корпус КАК Корпус,
	|	втИтоговыеДанныеБезТаблицыИзФайла.Квартира КАК Квартира,
	|	ЕСТЬNULL(втУслуги.УслугаВОСЗН, """") КАК УслугаВОСЗН,
	|	втИтоговыеДанныеБезТаблицыИзФайла.ИдентификаторУслугиВОСЗН КАК ИдентификаторУслугиВОСЗН,
	|	втИтоговыеДанныеБезТаблицыИзФайла.НаличиеСчетчика КАК НаличиеСчетчика,
	|	втИтоговыеДанныеБезТаблицыИзФайла.ОбъемНачисления КАК ОбъемНачисления,
	|	втИтоговыеДанныеБезТаблицыИзФайла.СуммаНачисления КАК СуммаНачисления,
	|	втИтоговыеДанныеБезТаблицыИзФайла.СуммаОплаты КАК СуммаОплаты,
	|	втИтоговыеДанныеБезТаблицыИзФайла.НаличиеЗадолженности КАК НаличиеЗадолженности,
	|	ЕСТЬNULL(втУслуги.НомерПоляНаличияСчетчика, 0) КАК НомерПоляНаличияСчетчика,
	|	ЕСТЬNULL(втУслуги.НомерПоляОбъемПотребления, 0) КАК НомерПоляОбъемПотребления,
	|	ЕСТЬNULL(втУслуги.НомерПоляСуммаОплаты, 0) КАК НомерПоляСуммаОплаты
	|ПОМЕСТИТЬ втИтоговыеДанныеСНомерамиПолей
	|ИЗ
	|	втИтоговыеДанныеБезТаблицыИзФайла КАК втИтоговыеДанныеБезТаблицыИзФайла
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУслуги КАК втУслуги
	|		ПО втИтоговыеДанныеБезТаблицыИзФайла.ИдентификаторУслугиВОСЗН = втУслуги.ИдентификаторУслугиВОСЗН
	|
	|СГРУППИРОВАТЬ ПО
	|	втИтоговыеДанныеБезТаблицыИзФайла.ЛицевойСчет,
	|	втИтоговыеДанныеБезТаблицыИзФайла.Город,
	|	втИтоговыеДанныеБезТаблицыИзФайла.Улица,
	|	втИтоговыеДанныеБезТаблицыИзФайла.Дом,
	|	втИтоговыеДанныеБезТаблицыИзФайла.Корпус,
	|	втИтоговыеДанныеБезТаблицыИзФайла.Квартира,
	|	ЕСТЬNULL(втУслуги.УслугаВОСЗН, """"),
	|	втИтоговыеДанныеБезТаблицыИзФайла.ИдентификаторУслугиВОСЗН,
	|	втИтоговыеДанныеБезТаблицыИзФайла.НаличиеСчетчика,
	|	втИтоговыеДанныеБезТаблицыИзФайла.ОбъемНачисления,
	|	втИтоговыеДанныеБезТаблицыИзФайла.СуммаНачисления,
	|	втИтоговыеДанныеБезТаблицыИзФайла.СуммаОплаты,
	|	втИтоговыеДанныеБезТаблицыИзФайла.НаличиеЗадолженности,
	|	ЕСТЬNULL(втУслуги.НомерПоляНаличияСчетчика, 0),
	|	ЕСТЬNULL(втУслуги.НомерПоляОбъемПотребления, 0),
	|	ЕСТЬNULL(втУслуги.НомерПоляСуммаОплаты, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаДанныхИзФайла.ПКУ КАК ПКУ,
	|	втТаблицаДанныхИзФайла.Город КАК НаселенныйПункт,
	|	втТаблицаДанныхИзФайла.Улица КАК Улица,
	|	втТаблицаДанныхИзФайла.Дом КАК НомерДома,
	|	втТаблицаДанныхИзФайла.Корпус КАК Корпус,
	|	втТаблицаДанныхИзФайла.Квартира КАК Квартира,
	|	втТаблицаДанныхИзФайла.Зарегистрировано КАК Зарегистрировано,
	|	ЕСТЬNULL(втИтоговыеДанныеСНомерамиПолей.ЛицевойСчет, ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)) КАК ЛицевойСчет,
	|	ЕСТЬNULL(втИтоговыеДанныеСНомерамиПолей.УслугаВОСЗН, """") КАК УслугаВОСЗН,
	|	ЕСТЬNULL(втИтоговыеДанныеСНомерамиПолей.НаличиеСчетчика, 0) КАК НаличиеСчетчика,
	|	ЕСТЬNULL(втИтоговыеДанныеСНомерамиПолей.ОбъемНачисления, 0) КАК ОбъемПотребления,
	|	ЕСТЬNULL(втИтоговыеДанныеСНомерамиПолей.СуммаНачисления, 0) КАК СуммаНачисления,
	|	ЕСТЬNULL(втИтоговыеДанныеСНомерамиПолей.СуммаОплаты, 0) КАК СуммаОплаты,
	|	ЕСТЬNULL(втИтоговыеДанныеСНомерамиПолей.НаличиеЗадолженности, ЛОЖЬ) КАК НаличиеЗадолженности,
	|	ЕСТЬNULL(втИтоговыеДанныеСНомерамиПолей.НомерПоляНаличияСчетчика, 0) КАК НомерПоляНаличияСчетчика,
	|	ЕСТЬNULL(втИтоговыеДанныеСНомерамиПолей.НомерПоляОбъемПотребления, 0) КАК НомерПоляОбъемПотребления,
	|	ЕСТЬNULL(втИтоговыеДанныеСНомерамиПолей.НомерПоляСуммаОплаты, 0) КАК НомерПоляСуммаОплаты
	|ИЗ
	|	втТаблицаДанныхИзФайла КАК втТаблицаДанныхИзФайла
	|		ЛЕВОЕ СОЕДИНЕНИЕ втИтоговыеДанныеСНомерамиПолей КАК втИтоговыеДанныеСНомерамиПолей
	|		ПО втТаблицаДанныхИзФайла.Город = втИтоговыеДанныеСНомерамиПолей.Город
	|			И втТаблицаДанныхИзФайла.Улица = втИтоговыеДанныеСНомерамиПолей.Улица
	|			И втТаблицаДанныхИзФайла.Дом = втИтоговыеДанныеСНомерамиПолей.Дом
	|			И втТаблицаДанныхИзФайла.Корпус = втИтоговыеДанныеСНомерамиПолей.Корпус
	|			И втТаблицаДанныхИзФайла.Квартира = втИтоговыеДанныеСНомерамиПолей.Квартира";
	
	ТаблицаСведений = Запрос.Выполнить().Выгрузить();
	
	// Получим количества месяцев задолженности.
	СтруктураДанныхДляЗапроса = Новый Структура("Организация");
	СтруктураДанныхДляЗапроса.Организация = Объект.Организация;
	
	СписокЛС = ТаблицаСведений.ВыгрузитьКолонку("ЛицевойСчет");
	
	ТаблицаДолжников = УПЖКХ_РаботаСДолжниками.ПолучитьТаблицуДолжников(КонецМесяца(Объект.Период), СписокЛС, СтруктураДанныхДляЗапроса);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаНачислений.ПКУ КАК ПКУ,
	|	ТаблицаНачислений.НаселенныйПункт КАК НаселенныйПункт,
	|	ТаблицаНачислений.Улица КАК Улица,
	|	ТаблицаНачислений.НомерДома КАК НомерДома,
	|	ТаблицаНачислений.Корпус КАК Корпус,
	|	ТаблицаНачислений.Квартира КАК Квартира,
	|	ТаблицаНачислений.Зарегистрировано КАК Зарегистрировано,
	|	ТаблицаНачислений.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаНачислений.УслугаВОСЗН КАК УслугаВОСЗН,
	|	ТаблицаНачислений.НаличиеСчетчика КАК НаличиеСчетчика,
	|	ТаблицаНачислений.ОбъемПотребления КАК ОбъемПотребления,
	|	ТаблицаНачислений.СуммаНачисления КАК СуммаНачисления,
	|	ТаблицаНачислений.СуммаОплаты КАК СуммаОплаты,
	|	ТаблицаНачислений.НаличиеЗадолженности КАК НаличиеЗадолженности,
	|	ТаблицаНачислений.НомерПоляНаличияСчетчика КАК НомерПоляНаличияСчетчика,
	|	ТаблицаНачислений.НомерПоляОбъемПотребления КАК НомерПоляОбъемПотребления,
	|	ТаблицаНачислений.НомерПоляСуммаОплаты КАК НомерПоляСуммаОплаты
	|ПОМЕСТИТЬ втТаблицаБезитогов
	|ИЗ
	|	&ТаблицаНачислений КАК ТаблицаНачислений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДолжников.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаДолжников.МесяцевЗадолженности КАК МесяцевЗадолженности
	|ПОМЕСТИТЬ втТаблицаДолгов
	|ИЗ
	|	&ТаблицаДолжников КАК ТаблицаДолжников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаБезитогов.ПКУ КАК ПКУ,
	|	втТаблицаБезитогов.НаселенныйПункт КАК НаселенныйПункт,
	|	втТаблицаБезитогов.Улица КАК Улица,
	|	втТаблицаБезитогов.НомерДома КАК НомерДома,
	|	втТаблицаБезитогов.Корпус КАК Корпус,
	|	втТаблицаБезитогов.Квартира КАК Квартира,
	|	втТаблицаБезитогов.Зарегистрировано КАК Зарегистрировано,
	|	втТаблицаБезитогов.ЛицевойСчет КАК ЛицевойСчет,
	|	втТаблицаБезитогов.УслугаВОСЗН КАК УслугаВОСЗН,
	|	втТаблицаБезитогов.НаличиеСчетчика КАК НаличиеСчетчика,
	|	втТаблицаБезитогов.ОбъемПотребления КАК ОбъемПотребления,
	|	втТаблицаБезитогов.СуммаНачисления КАК СуммаНачисления,
	|	втТаблицаБезитогов.СуммаОплаты КАК СуммаОплаты,
	|	втТаблицаБезитогов.НаличиеЗадолженности КАК НаличиеЗадолженности,
	|	втТаблицаБезитогов.НомерПоляНаличияСчетчика КАК НомерПоляНаличияСчетчика,
	|	втТаблицаБезитогов.НомерПоляОбъемПотребления КАК НомерПоляОбъемПотребления,
	|	втТаблицаБезитогов.НомерПоляСуммаОплаты КАК НомерПоляСуммаОплаты,
	|	МАКСИМУМ(ЕСТЬNULL(втТаблицаДолгов.МесяцевЗадолженности, 0)) КАК КоличествоМесяцевДолга
	|ИЗ
	|	втТаблицаБезитогов КАК втТаблицаБезитогов
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаДолгов КАК втТаблицаДолгов
	|		ПО втТаблицаБезитогов.ЛицевойСчет = втТаблицаДолгов.ЛицевойСчет
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаБезитогов.Квартира,
	|	втТаблицаБезитогов.СуммаНачисления,
	|	втТаблицаБезитогов.СуммаОплаты,
	|	втТаблицаБезитогов.НаличиеЗадолженности,
	|	втТаблицаБезитогов.НомерПоляНаличияСчетчика,
	|	втТаблицаБезитогов.НомерПоляОбъемПотребления,
	|	втТаблицаБезитогов.УслугаВОСЗН,
	|	втТаблицаБезитогов.НомерПоляСуммаОплаты,
	|	втТаблицаБезитогов.Улица,
	|	втТаблицаБезитогов.Корпус,
	|	втТаблицаБезитогов.ПКУ,
	|	втТаблицаБезитогов.ЛицевойСчет,
	|	втТаблицаБезитогов.НаселенныйПункт,
	|	втТаблицаБезитогов.НомерДома,
	|	втТаблицаБезитогов.Зарегистрировано,
	|	втТаблицаБезитогов.НаличиеСчетчика,
	|	втТаблицаБезитогов.ОбъемПотребления
	|ИТОГИ ПО
	|	ЛицевойСчет";
	
	Запрос.УстановитьПараметр("ТаблицаНачислений", ТаблицаСведений);
	Запрос.УстановитьПараметр("ТаблицаДолжников",  ТаблицаДолжников);
	
	ДеревоДанныхФайла = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЗначениеВДанныеФормы(ДеревоДанныхФайла, тп_ЗабайкальскийКрайТаблицаНачислений);
	
КонецПроцедуры

// Получает таблицу жильцов идентифицированных с записями из файла-запроса.
//
Функция ПолучитьТаблицуИдентифицированныхЖильцов(ТаблицаДанныхФайла, ТаблицаАдресов)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИзФайла.НаселенныйПункт КАК Город,
	|	ТаблицаИзФайла.Улица КАК Улица,
	|	ТаблицаИзФайла.НомерДома КАК Дом,
	|	ТаблицаИзФайла.Корпус КАК Корпус,
	|	ТаблицаИзФайла.Квартира КАК Квартира
	|ПОМЕСТИТЬ втТаблицаДанныхИзФайла
	|ИЗ
	|	&ТаблицаИзФайла КАК ТаблицаИзФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Жильцы.Ссылка КАК Проживающий,
	|	УПЖКХ_Жильцы.Владелец.Адрес.Владелец КАК Здание,
	|	УПЖКХ_Жильцы.Владелец.Адрес.Код КАК Квартира,
	|	УПЖКХ_Жильцы.Владелец КАК ЛицевойСчет
	|ПОМЕСТИТЬ втЖильцы
	|ИЗ
	|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
	|ГДЕ
	|	НЕ УПЖКХ_Жильцы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаАдресов.Здание,
	|	ТаблицаАдресов.НаселенныйПункт,
	|	ТаблицаАдресов.Улица,
	|	ТаблицаАдресов.Дом,
	|	ТаблицаАдресов.Корпус
	|ПОМЕСТИТЬ втАдреса
	|ИЗ
	|	&ТаблицаАдресов КАК ТаблицаАдресов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцы.Проживающий,
	|	ЕСТЬNULL(втАдреса.НаселенныйПункт, """") КАК НаселенныйПункт,
	|	ЕСТЬNULL(втАдреса.Улица, """") КАК Улица,
	|	ЕСТЬNULL(втАдреса.Дом, """") КАК Дом,
	|	ЕСТЬNULL(втАдреса.Корпус, """") КАК Корпус,
	|	втЖильцы.Квартира,
	|	втЖильцы.ЛицевойСчет
	|ПОМЕСТИТЬ втЖильцыСАдресами
	|ИЗ
	|	втЖильцы КАК втЖильцы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втАдреса КАК втАдреса
	|		ПО втЖильцы.Здание = втАдреса.Здание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцыСАдресами.НаселенныйПункт КАК Город,
	|	втЖильцыСАдресами.Улица,
	|	втЖильцыСАдресами.Дом,
	|	втЖильцыСАдресами.Корпус,
	|	втЖильцыСАдресами.Квартира,
	|	втЖильцыСАдресами.ЛицевойСчет,
	|	втЖильцыСАдресами.ЛицевойСчет.Адрес КАК Помещение
	|ИЗ
	|	втТаблицаДанныхИзФайла КАК втТаблицаДанныхИзФайла
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЖильцыСАдресами КАК втЖильцыСАдресами
	|		ПО втТаблицаДанныхИзФайла.Город = втЖильцыСАдресами.НаселенныйПункт
	|			И втТаблицаДанныхИзФайла.Улица = втЖильцыСАдресами.Улица
	|			И втТаблицаДанныхИзФайла.Дом = втЖильцыСАдресами.Дом
	|			И втТаблицаДанныхИзФайла.Корпус = втЖильцыСАдресами.Корпус
	|			И втТаблицаДанныхИзФайла.Квартира = втЖильцыСАдресами.Квартира
	|
	|СГРУППИРОВАТЬ ПО
	|	втЖильцыСАдресами.ЛицевойСчет,
	|	втЖильцыСАдресами.НаселенныйПункт,
	|	втЖильцыСАдресами.Улица,
	|	втЖильцыСАдресами.Дом,
	|	втЖильцыСАдресами.Корпус,
	|	втЖильцыСАдресами.Квартира,
	|	втЖильцыСАдресами.ЛицевойСчет.Адрес";
	
	Запрос.УстановитьПараметр("ТаблицаИзФайла", ТаблицаДанныхФайла);
	Запрос.УстановитьПараметр("ТаблицаАдресов", ТаблицаАдресов);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции // ПолучитьТаблицуИдентифицированныхЖильцов()

// Получает таблицу значений с адресами зданий.
//
Функция ПолучитьАдресаВсехЗданий()
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	втКонтактнаяИнформация.Объект КАК Здание,
	|	ВЫБОР
	|		КОГДА НЕ втКонтактнаяИнформация.НаселенныйПункт = """"
	|			ТОГДА втКонтактнаяИнформация.НаселенныйПункт
	|		КОГДА НЕ втКонтактнаяИнформация.Город = """"
	|			ТОГДА втКонтактнаяИнформация.Город
	|		ИНАЧЕ втКонтактнаяИнформация.Регион
	|	КОНЕЦ КАК НаселенныйПункт,
	|	втКонтактнаяИнформация.Улица,
	|	втКонтактнаяИнформация.Дом,
	|	втКонтактнаяИнформация.Корпус
	|ИЗ
	|	втКонтактнаяИнформация КАК втКонтактнаяИнформация";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	МассивСокрНасПункт = СформироватьМассивСокращенийДляЗабайкальскогоКраяПоВиду(4);
	МассивСокрУлицы    = СформироватьМассивСокращенийДляЗабайкальскогоКраяПоВиду(5);
	
	Для Каждого СтрокаЗдания ИЗ Результат Цикл
		СтрокаЗдания.НаселенныйПункт = ВРег(НормализацияПолейАдресаОбласти(СтрокаЗдания.НаселенныйПункт, МассивСокрНасПункт));
		СтрокаЗдания.Улица           = ВРег(НормализацияПолейАдресаОбласти(СтрокаЗдания.Улица, МассивСокрУлицы));
		СтрокаЗдания.Корпус          = ВРег(СокрЛП(СтрокаЗдания.Корпус));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьАдресаВсехЗданий()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ВЫГРУЗКА ФАЙЛОВ

#Область ВыгрузкаФайлов

&НаКлиенте
// Предназначена для выгрузки данных из таблицы данных в dbf-файл.
//
Процедура ВыгрузитьДанныеВФайлЗабайкальскийКрай()
	
	Если тп_ЗабайкальскийКрайТаблицаНачислений.ПолучитьЭлементы().Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В таблице выгружаемых данных отсутствуют данные для выгрузки в dbf-файлы.");
		Возврат;
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Началась выгрузка данных в файл!");
	
	АдресФайлаВыгрузки = ПолучитьФайлНаСервере(УникальныйИдентификатор);
	ИмяФайла           = КаталогВыгрузки + "\out_file.dbf";
	
	МассивФайлов = Новый Массив;
	МассивФайлов.Добавить(Новый ОписаниеПередаваемогоФайла(, АдресФайлаВыгрузки));
	
	НачатьПолучениеФайлов(Новый ОписаниеОповещения("ВыгрузитьДанныеВФайлЗабайкальскийКрайПродолжение", ЭтаФорма), МассивФайлов, ИмяФайла, Ложь);
	
КонецПроцедуры // ВыгрузитьДанныеВФайлЗабайкальскийКрай()

&НаКлиенте
Процедура ВыгрузитьДанныеВФайлЗабайкальскийКрайПродолжение(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьФайлНаСервере(АдресДанных)
	
	ФайлВыгрузки           = Новый XBase;
	ФайлВыгрузки.Кодировка = ?(КодировкаФайла = 0, КодировкаXBase.OEM, КодировкаXBase.ANSI);
	
	Для Каждого СтрокаТаблицыПолей ИЗ СоответствиеПолейФайлаЗагрузки Цикл
		ФайлВыгрузки.Поля.Добавить(СокрЛП(СтрокаТаблицыПолей.Имя), СокрЛП(СтрокаТаблицыПолей.Тип), СтрокаТаблицыПолей.Длина, СтрокаТаблицыПолей.Точность);
	КонецЦикла;
	
	ИмяФайла = ПолучитьИмяВременногоФайла(".dbf");
	
	ФайлВыгрузки.СоздатьФайл(ИмяФайла);
	ФайлВыгрузки.АвтоСохранение = Истина;
	
	Для Каждого ТекСтрокаЛС Из тп_ЗабайкальскийКрайТаблицаНачислений.ПолучитьЭлементы() Цикл
		Если ТекСтрокаЛС.ЛицевойСчет.Пустая() Тогда
			НеИдентифицированныеСтроки = Истина;
		Иначе
			НеИдентифицированныеСтроки = Ложь;
			ФайлВыгрузки.Добавить();
		КонецЕсли;
		
		Для Каждого ТекСтрока ИЗ ТекСтрокаЛС.ПолучитьЭлементы() Цикл
			Если НеИдентифицированныеСтроки Тогда
				ФайлВыгрузки.Добавить();
			КонецЕсли;
			
			ФайлВыгрузки[ФайлВыгрузки.поля[0].Имя] = ТекСтрока.ПКУ;
			ФайлВыгрузки[ФайлВыгрузки.поля[1].Имя] = ТекСтрока.НаселенныйПункт;
			ФайлВыгрузки[ФайлВыгрузки.поля[2].Имя] = ТекСтрока.Улица;
			ФайлВыгрузки[ФайлВыгрузки.поля[3].Имя] = ТекСтрока.НомерДома;
			ФайлВыгрузки[ФайлВыгрузки.поля[4].Имя] = ТекСтрока.Корпус;
			ФайлВыгрузки[ФайлВыгрузки.поля[5].Имя] = Строка(ТекСтрока.Квартира);
			ФайлВыгрузки[ФайлВыгрузки.поля[6].Имя] = ТекСтрока.Зарегистрировано;
			Если НЕ ТекСтрока.НомерПоляНаличияСчетчика = 0 Тогда
				ФайлВыгрузки[ФайлВыгрузки.поля[ТекСтрока.НомерПоляНаличияСчетчика - 1].Имя] = ?(ТекСтрока.НаличиеСчетчика = Истина, "да", "нет");
			КонецЕсли;
			Если НЕ ТекСтрока.НомерПоляОбъемПотребления = 0 Тогда
				ФайлВыгрузки[ФайлВыгрузки.поля[ТекСтрока.НомерПоляОбъемПотребления - 1].Имя] = ТекСтрока.ОбъемПотребления;
			КонецЕсли;
			Если НЕ ТекСтрока.НомерПоляСуммаОплаты = 0 Тогда
				ФайлВыгрузки[ФайлВыгрузки.поля[ТекСтрока.НомерПоляСуммаОплаты - 1].Имя] = ТекСтрока.СуммаОплаты;
			КонецЕсли;
			ФайлВыгрузки[ФайлВыгрузки.поля[НомерПоляНаличиеЗадолженности - 1].Имя]   = ?(ТекСтрока.НаличиеЗадолженности = Истина, "да", "нет");
			ФайлВыгрузки[ФайлВыгрузки.поля[НомерПоляКоличествоМесяцевДолга - 1].Имя] = ТекСтрока.КоличествоМесяцевДолга;
		КонецЦикла;
	КонецЦикла;
	
	ФайлВыгрузки.ЗакрытьФайл();
	
	ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
	
	Возврат ПоместитьВоВременноеХранилище(ДвоичныеДанныеФайла, АдресДанных);
	
КонецФункции

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// СОХРАНЯЕМЫЕ НАСТРОЙКИ

#Область РаботаСНастройками

&НаСервере
// Процедура восстановления настроек.
//
Процедура ВосстановитьНастройки()
	
	СтруктураПараметров = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("ЗабайкальскийКрай_ВыгрузкаВОСЗН", "ПараметрыВыгрузки");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		СтруктураПараметров.Свойство("ИмяФайлаЗагрузки", ИмяФайлаЗагрузки);
		СтруктураПараметров.Свойство("КаталогВыгрузки",  КаталогВыгрузки);
		СтруктураПараметров.Свойство("КодировкаФайла",   КодировкаФайла);
		
		СтруктураПараметров.Свойство("НомерПоляКоличествоМесяцевДолга", НомерПоляКоличествоМесяцевДолга);
		СтруктураПараметров.Свойство("НомерПоляНаличиеЗадолженности",   НомерПоляНаличиеЗадолженности);
		
		врТаблицаУслугВОСЗН    = Новый ТаблицаЗначений;
		врТаблицаУслугВБазе    = Новый ТаблицаЗначений;
		
		СтруктураПараметров.Свойство("ЗабайкальскийКрай_ЖКУ", врТаблицаУслугВБазе);
		Если НЕ врТаблицаУслугВБазе = Неопределено Тогда
			Объект.ЗабайкальскийКрай_ЖКУ.Загрузить(врТаблицаУслугВБазе);
		КонецЕсли;
		
		СтруктураПараметров.Свойство("ЗабайкальскийКрай_ЖКУ_ВБазе", врТаблицаУслугВБазе);
		Если НЕ врТаблицаУслугВБазе = Неопределено Тогда
			Объект.ЗабайкальскийКрай_ЖКУ_ВБазе.Загрузить(врТаблицаУслугВБазе);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура сохранения настроек.
//
Процедура СохранитьНастройки()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяФайлаЗагрузки",                ИмяФайлаЗагрузки);
	СтруктураПараметров.Вставить("КаталогВыгрузки",                 КаталогВыгрузки);
	СтруктураПараметров.Вставить("КодировкаФайла",                  КодировкаФайла);
	СтруктураПараметров.Вставить("НомерПоляКоличествоМесяцевДолга", НомерПоляКоличествоМесяцевДолга);
	СтруктураПараметров.Вставить("НомерПоляНаличиеЗадолженности",   НомерПоляНаличиеЗадолженности);
	СтруктураПараметров.Вставить("ЗабайкальскийКрай_ЖКУ",           Объект.ЗабайкальскийКрай_ЖКУ.Выгрузить());
	СтруктураПараметров.Вставить("ЗабайкальскийКрай_ЖКУ_ВБазе",     Объект.ЗабайкальскийКрай_ЖКУ_ВБазе.Выгрузить());
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("ЗабайкальскийКрай_ВыгрузкаВОСЗН", "ПараметрыВыгрузки", СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// РАБОТА С ВРЕМЕННЫМ ХРАНИЛИЩЕМ

#Область РаботаСВременнымХранилищем

&НаСервере
// Помещает настройки во временное хранилище.
//
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("НомерПоляКоличествоМесяцевДолга", НомерПоляКоличествоМесяцевДолга);
	СтруктураНастроек.Вставить("НомерПоляНаличиеЗадолженности",   НомерПоляНаличиеЗадолженности);
	СтруктураНастроек.Вставить("ЗабайкальскийКрай_ЖКУ",           Объект.ЗабайкальскийКрай_ЖКУ.Выгрузить());
	СтруктураНастроек.Вставить("ЗабайкальскийКрай_ЖКУ_ВБазе",     Объект.ЗабайкальскийКрай_ЖКУ_ВБазе.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
// Получает настройки из временного хранилища.
//
Функция ПолучитьНастройкиИзХранилища(АдресНастроекВХранилище)
	
	СтруктураНастроек = ПолучитьИзВременногоХранилища(АдресНастроекВХранилище);
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		
		Если СтруктураНастроек.Свойство("НомерПоляКоличествоМесяцевДолга") Тогда
			НомерПоляКоличествоМесяцевДолга = СтруктураНастроек.НомерПоляКоличествоМесяцевДолга;
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("НомерПоляНаличиеЗадолженности") Тогда
			НомерПоляНаличиеЗадолженности = СтруктураНастроек.НомерПоляНаличиеЗадолженности;
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ЗабайкальскийКрай_ЖКУ") Тогда
			Объект.ЗабайкальскийКрай_ЖКУ.Загрузить(СтруктураНастроек.ЗабайкальскийКрай_ЖКУ);
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ЗабайкальскийКрай_ЖКУ_ВБазе") Тогда
			Объект.ЗабайкальскийКрай_ЖКУ_ВБазе.Загрузить(СтруктураНастроек.ЗабайкальскийКрай_ЖКУ_ВБазе);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	ТекРабДата = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	Объект.Период = ТекРабДата;
	
	ВосстановитьНастройки();
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки();
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "КомандаНастройка".
//
Процедура КомандаНастройка(Команда)
	
	АдресНастроекВХранилище = ПоместитьНастройкиВХранилище();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаНастройкаЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты.Форма.ЗабайкальскийКрай_ФормаНастройки", Новый Структура("АдресНастроекВХранилище", АдресНастроекВХранилище), , , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата опроса команды "КомандаНастройка".
//
Процедура КомандаНастройкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		ПолучитьНастройкиИзХранилища(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаЗагрузитьИзФайла".
//
Процедура КомандаЗагрузитьИзФайла(Команда)
	
	ТекстОшибки = ПроверкаУсловийДляЗаполненияТаблиц();
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ФайлНаДиске = Новый Файл(ИмяФайлаЗагрузки);
	ФайлНаДиске.НачатьПроверкуСуществования(Новый ОписаниеОповещения("КомандаЗагрузитьИзФайлаФрагмент", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьИзФайлаФрагмент(Существует, ДополнительныеПараметры) Экспорт
	
	Если НЕ Существует Тогда
		ПоказатьПредупреждение(, "Файл не найден!");
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = "";
	Описание = Новый ОписаниеОповещения("ОбработатьРезультатПомещенияФайлаВХранилище", ЭтаФорма);
	НачатьПомещениеФайла(Описание, ПутьКФайлу, ИмяФайлаЗагрузки, Ложь);
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата помещения файла в хранилище.
//
Процедура ОбработатьРезультатПомещенияФайлаВХранилище(Результат, Адрес, ВыбранноеИмяФайла, ДопПараметры) Экспорт
	
	Если тп_ЗабайкальскийКрайТаблицаНачислений.ПолучитьЭлементы().Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаЗагрузитьИзФайлаЗавершение", ЭтотОбъект, Новый Структура("ПутьКФайлу", Адрес));
		
		ТекстВопроса = "Перед заполнением таблица выгрузки будет очищена. Заполнить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Началось заполнение таблицы выгрузки!");
		
		ЗагрузитьНаСервере(Адрес);
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Заполнение таблицы выгрузки завершено!");
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатПомещенияФайлаВХранилище()

&НаКлиенте
// Обработчик результата опроса команды "ЗагрузитьИзФайла".
//
Процедура КомандаЗагрузитьИзФайлаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		тп_ЗабайкальскийКрайТаблицаНачислений.ПолучитьЭлементы().Очистить();
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Началось заполнение таблицы выгрузки!");
		
		ЗагрузитьНаСервере(ДополнительныеПараметры.ПутьКФайлу);
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Заполнение таблицы выгрузки завершено!");
		
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьВсеЗавершение()

&НаКлиенте
// Обработчик команды "КомандаВыгрузить".
//
Процедура КомандаВыгрузить(Команда)
	
	Если ПустаяСтрока(КаталогВыгрузки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указан каталог выгрузки!");
		Возврат;
	КонецЕсли;
	
	КаталогНаДиске = Новый Файл(КаталогВыгрузки);
	КаталогНаДиске.НачатьПроверкуСуществования(Новый ОписаниеОповещения("КомандаВыгрузитьЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыгрузитьЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	Если НЕ Существует Тогда
		ПоказатьПредупреждение(Неопределено, "Каталог выгрузки не найден!");
		Возврат;
	КонецЕсли;
	
	КаталогНаДиске = Новый Файл(КаталогВыгрузки);
	КаталогНаДиске.НачатьПроверкуЭтоКаталог(Новый ОписаниеОповещения("КомандаВыгрузитьЗавершениеЗавершение", ЭтотОбъект));

КонецПроцедуры

&НаКлиенте
Процедура КомандаВыгрузитьЗавершениеЗавершение(ЭтоКаталог, ДополнительныеПараметры1) Экспорт
	
	Если НЕ ЭтоКаталог Тогда
		ПоказатьПредупреждение(Неопределено, "Каталог указан неверно!");
		Возврат;
	КонецЕсли;
	
	Попытка
		
		ВыгрузитьДанныеВФайлЗабайкальскийКрай();
		
	Исключение
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Выгрузка данных в файл не выполнена. Возможно не корректны настройки номеров полей файла загрузки/выгрузки.");
	КонецПопытки;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Таблица данных выгружена в файл " + КаталогВыгрузки + "\out_file.dbf");

КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

////////////////////////
// Диалог выбора файла

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Файл загрузки".
//
Процедура ИмяФайлаЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр                      = "Файл данных (*.dbf)|*.dbf";
	ДиалогВыбораФайла.Расширение                  = "dbf";
	ДиалогВыбораФайла.Заголовок                   = "Выберите файл загрузки";
	ДиалогВыбораФайла.ПолноеИмяФайла              = ИмяФайлаЗагрузки;
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ИмяФайлаЗагрузкиНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла)));
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЗагрузкиНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ИмяФайлаЗагрузки = ДиалогВыбораФайла.ПолноеИмяФайла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Файл загрузки".
//
Процедура ИмяФайлаЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НачатьЗапускПриложения(Новый ОписаниеОповещения("ИмяФайлаЗагрузкиОткрытиеЗавершение", ЭтотОбъект), "explorer " + ИмяФайлаЗагрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЗагрузкиОткрытиеЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Имя каталога".
//
Процедура ИмяКаталогаЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Заголовок                   = "Выбор каталога файлов";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	ДиалогВыбораФайла.Каталог                     = КаталогВыгрузки;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ИмяКаталогаЗагрузкиНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла)));
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяКаталогаЗагрузкиНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		КаталогВыгрузки = ДиалогВыбораФайла.Каталог;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Имя каталога".
//
Процедура ИмяКаталогаЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НачатьЗапускПриложения(Новый ОписаниеОповещения("ИмяКаталогаЗагрузкиОткрытиеЗавершение", ЭтотОбъект), КаталогВыгрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяКаталогаЗагрузкиОткрытиеЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

////////////////////////
// Период

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПериодСтрокой".
Процедура ПериодСтрокойПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Модифицированность);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ПериодСтрокой".
Процедура ПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Регулирование" поля "ПериодСтрокой".
Процедура ПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Направление,
														Модифицированность);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "ПериодСтрокой".
Процедура ПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "ПериодСтрокой".
Процедура ПериодСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти
