
//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область События_формы

// Обработчик события "ПриСозданииНаСервере" формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбновитьПериод();
	
	ИнициализацияРеквизитов();
	
КонецПроцедуры // ПриСозданииНаСервере()

// Обработчик события "ПриОткрытии" формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеВидимостьюКнопок("ОткрытиеФормы");
	
КонецПроцедуры // ПриОткрытии()

// Обработчик события "ПередЗакрытием" формы.
//
&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьНастройкиНаСервере();
	
КонецПроцедуры // ПередЗакрытием()

#КонецОбласти // События_формы

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область МесяцВыгрузки

// Обработчик события "ПриИзменении" поля "ПериодСтрокой".
//
&НаКлиенте
Процедура ПериодСтрокойПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Модифицированность);
	
КонецПроцедуры // ПериодСтрокойПриИзменении()

// Обработчик события "НачалоВыбора" поля "ПериодСтрокой".
//
&НаКлиенте
Процедура ПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры // ПериодСтрокойНачалоВыбора()

// Обработчик события "Регулирование" поля "ПериодСтрокой".
//
&НаКлиенте
Процедура ПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Направление, Модифицированность);
	
КонецПроцедуры // ПериодСтрокойРегулирование()

// Обработчик события "АвтоПодбор" поля "ПериодСтрокой".
//
&НаКлиенте
Процедура ПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодСтрокойАвтоПодбор()

// Обработчик события "ОкончаниеВводаТекста" поля "ПериодСтрокой".
//
&НаКлиенте
Процедура ПериодСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодСтрокойОкончаниеВводаТекста()

#КонецОбласти // МесяцВыгрузки

#Область Организация

// Обработчик события "ПриИзменении" поля "Организация".
//
&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	УправлениеВидимостьюКнопок("Организация");
	
КонецПроцедуры // ОрганизацияПриИзменении()

#КонецОбласти // Организация

#Область ФайлОбмена

// Обработчик события "НачалоВыбора" поля ввода "ФайлОбмена".
//
&НаКлиенте
Процедура ФайлОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр                      = "Файл данных (*.dbf)|*.dbf";
	ДиалогВыбораФайла.Расширение                  = "dbf";
	ДиалогВыбораФайла.Заголовок                   = "Выберите файл обмена";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	ДиалогВыбораФайла.ПолноеИмяФайла              = Объект.ИмяФайлаЗагрузки;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ФайлОбменаНачалоВыбораЗавершение",
	                           ЭтотОбъект, Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла)));
	
КонецПроцедуры // ФайлОбменаНачалоВыбора()

// Обработчик завершения процедуры "ФайлОбменаНачалоВыбора".
//
&НаКлиенте
Процедура ФайлОбменаНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		
		Объект.ИмяФайлаЗагрузки = ДиалогВыбораФайла.ПолноеИмяФайла;
		КаталогФайлаЗагрузки = ДополнительныеПараметры.ДиалогВыбораФайла.Каталог;
		
		УправлениеВидимостьюКнопок("ФайлОбмена");
		
	КонецЕсли;

КонецПроцедуры // ФайлОбменаНачалоВыбораЗавершение()

// Обработчик события "Открытие" поля ввода "ФайлОбмена".
//
&НаКлиенте
Процедура ФайлОбменаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Объект.ИмяФайлаЗагрузки = "" Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран файл обмена!", , "Объект.ИмяФайлаЗагрузки");
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ФайлОбменаОткрытиеЗавершение", ЭтотОбъект);
		НачатьЗапускПриложения(ОписаниеОповещения, Объект.ИмяФайлаЗагрузки,,Ложь);
	КонецЕсли;
	
КонецПроцедуры // ФайлОбменаОткрытие()

// Обработчик завершения процедуры "ФайлОбменаОткрытие".
//
&НаКлиенте
Процедура ФайлОбменаОткрытиеЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	// Заглушка, т.к. в НачатьЗапускПриложения первый параметр обязательный
	ЭтаПеременнаяЧтобыНеРугаласьПроверкаКонфигурацииНаПустойОбработчик = Неопределено;
	
КонецПроцедуры // ФайлОбменаОткрытиеЗавершение()

#КонецОбласти // ФайлОбмена

#Область ТаблицаВыгрузки

// Обработчик события "ПриИзменении" поля "ТаблицаВыгрузкиЛицевойСчет".
//
&НаКлиенте
Процедура ТаблицаВыгрузкиЛицевойСчетПриИзменении(Элемент)
	
	АктуализироватьТаблицуИдентифицированныхЛьготников();
	
	УправлениеВидимостьюКнопок("ЛицевойСчетПриИзменении");
	
КонецПроцедуры // ТаблицаВыгрузкиЛицевойСчетПриИзменении()

#КонецОбласти // ТаблицаВыгрузки

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

// Обработчик команды "КомандаСправочнаяИнформация".
//
&НаКлиенте
Процедура КомандаСправочнаяИнформация(Команда)
	
	ОткрытьСправкуФормы();
	
	УправлениеВидимостьюКнопок("Инструкция");
	
КонецПроцедуры // КомандаСправочнаяИнформация()

// Открывает форму настроек.
//
&НаКлиенте
Процедура ОткрытьФормуНастройки(Команда)
	
	Если ЕстьОшибкиНаОсновнойФорме(, Истина) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("АдресХранилищаНастроек", ПолучитьАдресХранилищаНастроек());
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьНастройки", ЭтаФорма, СтруктураПараметров);
	
	ОткрытьФорму("Обработка.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты.Форма.ТверскаяОбласть_ФормаНастройки",
				 СтруктураПараметров,
				 ЭтотОбъект,,,,
				 ОписаниеОповещения,
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОткрытьФормуНастройки()

// Обработчик нажатия кнопки "КомандаЗагрузитьИзФайла".
//
&НаКлиенте
Процедура КомандаЗагрузитьИзФайла(Команда)
	
	Если ЕстьОшибкиНаОсновнойФорме() Или ЕстьОшибкиНаФормеНастроек() Тогда
		Возврат;
	КонецЕсли;
	
	ФайлНаДиске = Новый Файл(Объект.ИмяФайлаЗагрузки);
	
	ФайлНаДиске.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ПроверкаСуществованияФайлаОбмена", ЭтотОбъект, "Загрузка"));
	
КонецПроцедуры // КомандаЗагрузитьИзФайла()

// Обработчик нажатия кнопки "КомандаНачисленныеЛьготыЗаполнить".
//
&НаКлиенте
Процедура КомандаЗаполнитьВсе(Команда)
	
	АктуализироватьТаблицуИдентифицированныхЛьготников();
	
	Если ИдентифицированныеЛьготники.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Таблица с начисленными льготами не заполнена, т.к. не удалось идентифицировать льготников! "
														+ "Выполните повторную загрузку или заполните поле ""Лицевой счет"" вручную.");
		Возврат;
	КонецЕсли;
	
	ДозаполнитьТаблицуНачисленныхЛьгот();
	ЗаполнитьТаблицуДолжников();
	
	УправлениеВидимостьюКнопок("ЗаполнитьВсе");
	
КонецПроцедуры // КомандаЗаполнитьВсе()

// Обработчик нажатия кнопки "КомандаВыгрузитьВсе".
//
&НаКлиенте
Процедура КомандаВыгрузитьВсе(Команда)
	
	Если ЕстьОшибкиПередВыгрузкой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДанныеВФайлПоНачисленнымЛьготам();
	ВыгрузитьДанныеВФайлПоДолжникам();
	
КонецПроцедуры // КомандаВыгрузитьВсе()

#КонецОбласти // ОбработчикиКомандФормы

//////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНЦИИ

#Область ВспомогательныеМеханизмы

// Проверяет корректность заполнения настроек на основной форме.
//
&НаКлиенте
Функция ЕстьОшибкиНаОсновнойФорме(Отказ = Ложь, ВыводитьСообщениеОбОшибке = Ложь)
	
	Если НЕ ЗначениеЗаполнено(ПериодСтрокой) Тогда
		
		Если ВыводитьСообщениеОбОшибке Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не указан месяц, за который необходимо выгрузить данные!",
				, "ПериодСтрокой", "Объект");
		КонецЕсли;
		
		Отказ = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		
		Если ВыводитьСообщениеОбОшибке Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не указана организация по которой будет произведена выгрузка!",
				, "Организация", "Объект");
		КонецЕсли;
		
		Отказ = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.ИмяФайлаЗагрузки) Тогда
		
		Если ВыводитьСообщениеОбОшибке Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не указан файл обмена, который предоставила ОСЗН!",
				, "ИмяФайлаЗагрузки", "Объект");
		КонецЕсли;
		
		Отказ = Истина;
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции // ЕстьОшибкиНаОсновнойФорме()

// Проверяет корректность заполнения настроек на форме настроек.
//
&НаКлиенте
Функция ЕстьОшибкиНаФормеНастроек(Отказ = Ложь, ВыводитьСообщениеОбОшибке = Ложь)
	
	Если Объект.ТверскаяОбласть_Услуги.Количество() = 0 Тогда
		
		Если ВыводитьСообщениеОбОшибке Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не заполнена таблица услуг на форме настройки!");
		КонецЕсли;
		
		Отказ = Истина;
		
	КонецЕсли;
	
	Если Объект.ТверскаяОбласть_ЛьготныеКатегории.Количество() = 0 Тогда
		
		Если ВыводитьСообщениеОбОшибке Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не заполнена таблица кодов льготных категорий на форме настройки!");
		КонецЕсли;
		
		Отказ = Истина;
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции // ЕстьОшибкиНаФормеНастроек()

// Проверяет корректность заполнения настроек перед выгрузкой файлов.
//
&НаКлиенте
Функция ЕстьОшибкиПередВыгрузкой(Отказ = Ложь)
	
	Если Не ЗначениеЗаполнено(Объект.КодОрганизации) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не указан буквенно-цифровой код Организации! Определяется Учреждением. " +
			"Коды из диапазона «00» - «10» выделяются Организациям, предоставляющим услуги в масштабе области.", , "КодОрганизации", "Объект");
		Отказ = Истина;
	КонецЕсли;
	
	Если ПустаяСтрока(КодУчреждения) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не указан код Учреждения!", , "КодУчреждения");
		Отказ = Истина;
	КонецЕсли;
	
	Если ТаблицаВыгрузки.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Перед выгрузкой табличная часть должна быть заполнена данными о льготниках!");
		Отказ = Истина;
	ИначеЕсли ИдентифицированныеЛьготники.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Файл(ы) выгрузки не сформирован(ы), так как не удалось идентифицировать ни одного льготника!");
		Отказ = Истина;
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции // ЕстьОшибкиПередВыгрузкой()

// Проверяет существование файла загрузки.
//
&НаКлиенте
Функция ПроверкаСуществованияФайлаОбмена(Существует, ДополнительныеПараметры) Экспорт
	
	Если Существует Тогда
		
		ПутьКФайлу = "";
		
		Если ДополнительныеПараметры = "Загрузка" Тогда
			
			Описание = Новый ОписаниеОповещения("ОбработатьРезультатПомещенияФайлаВХранилище", ЭтаФорма);
			НачатьПомещениеФайла(Описание, ПутьКФайлу, Объект.ИмяФайлаЗагрузки, Ложь);
			
		Иначе
			
			// Помещаем загружаемый файл во временное хранилище.
			Описание = Новый ОписаниеОповещения("ОбработатьЗаписьФайлаОбмена", ЭтаФорма);
			НачатьПомещениеФайла(Описание, ПутьКФайлу, Объект.ИмяФайлаЗагрузки, Ложь, УникальныйИдентификатор);
			
		КонецЕсли;
		
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Выбранный файл обмена не существует! Выберите другой файл.", , "ИмяФайлаЗагрузки", "Объект");
	КонецЕсли;
	
КонецФункции // ПроверкаСуществованияФайлаОбмена()

// Обработчик результата помещения файла в хранилище.
//
&НаКлиенте
Процедура ОбработатьРезультатПомещенияФайлаВХранилище(Результат, ПутьКФайлу, ВыбранноеИмяФайла, ДопПараметры) Экспорт
	
	Если ТаблицаВыгрузки.Количество() > 0 ИЛИ ТаблицаЗадолженностей.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаЗагрузитьЗавершение", ЭтотОбъект, Новый Структура("ПутьКФайлу", ПутьКФайлу));
		
		ТекстВопроса = "Перед повторной загрузкой из файла обмена ранее загруженные данные будут очищены. Продолжить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ЗагрузитьТаблицуНачисленныхЛьгот(ПутьКФайлу);
		
		УправлениеВидимостьюКнопок("ЗагрузитьИзФайлаЗавершение");
	
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатПомещенияФайлаВХранилище()

// Обработчик результата опроса команды "КомандаЗагрузитьИзФайла".
//
&НаКлиенте
Процедура КомандаЗагрузитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЗагрузитьТаблицуНачисленныхЛьгот(ДополнительныеПараметры.ПутьКФайлу);
		
		УправлениеВидимостьюКнопок("ЗагрузитьИзФайлаЗавершение");
		
	КонецЕсли;
	
КонецПроцедуры // КомандаЗагрузитьЗавершение()

// Процедура загрузки данных из файла.
//
&НаСервере
Процедура ЗагрузитьТаблицуНачисленныхЛьгот(ПутьКФайлу)
	
	ТаблицаВыгрузки.Очистить();
	ТаблицаЗадолженностей.Очистить();
	
	// Запись временных данных во временный файл.
	врДанныеФайла = ПолучитьИзВременногоХранилища(ПутьКФайлу);
	ВременныйФайл = ПолучитьИмяВременногоФайла("DBF");
	
	// Для чтения *.dbf формата урежем имя временного файла.
	ФайлДБФ = Новый Файл(ВременныйФайл);
	СтароеИмяФайла = ФайлДБФ.ИмяБезРасширения + ".DBF";
	НовоеИмяФайла = Лев(ФайлДБФ.ИмяБезРасширения, 8) + ".DBF";
	ВременныйФайл = СтрЗаменить(ФайлДБФ.ПолноеИмя, СтароеИмяФайла, НовоеИмяФайла);
	
	врДанныеФайла.Записать(ВременныйФайл);
	
	ФайлДБФ = Новый XBase;
	ФайлДБФ.Кодировка = КодировкаXBase.OEM;
	ФайлДБФ.ОткрытьФайл(ВременныйФайл, , Истина);
	
	Если ФайлДБФ.Поля.Найти("PKU") = Неопределено Или ФайлДБФ.Поля.Найти("PY") = Неопределено Или ФайлДБФ.Поля.Найти("NKAR") = Неопределено
		Или ФайлДБФ.Поля.Найти("FAMIL") = Неопределено Или ФайлДБФ.Поля.Найти("IMJA") = Неопределено Или ФайлДБФ.Поля.Найти("OTCH") = Неопределено
		Или ФайлДБФ.Поля.Найти("DROG") = Неопределено Или ФайлДБФ.Поля.Найти("NNASP") = Неопределено Или ФайлДБФ.Поля.Найти("NYLIC") = Неопределено
		Или ФайлДБФ.Поля.Найти("NDOM") = Неопределено Или ФайлДБФ.Поля.Найти("NKORP") = Неопределено Или ФайлДБФ.Поля.Найти("NKW") = Неопределено
		Или ФайлДБФ.Поля.Найти("DS1") = Неопределено Или ФайлДБФ.Поля.Найти("DS2") = Неопределено Или ФайлДБФ.Поля.Найти("LCHET") = Неопределено Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Структура файла обмена отличается от той, что содержится в справочной информации к выгрузке! "
		+ "Выберите корректный файл и выполните повторную загрузку данных.", , "ИмяФайлаЗагрузки", "Объект");
		Возврат;
	КонецЕсли;
	
	ОстатокОтДеления = (ФайлДБФ.Поля.Количество() - 15) % 11;
	
	Если ОстатокОтДеления = 0 Тогда
		
		// Узнаём количество услуг.
		КоличествоУслуг = (ФайлДБФ.Поля.Количество() - 15) / 11;
		
		// Переопределяем колонки и поля таблицы "ТаблицаВыгрузки".
		ДобавитьРеквизитыВТаблицуЗагрузкиНаСервере();
		
		ТаблицаДанныхИзФайла = ПолучитьТаблицуДанныхИзФайла(ФайлДБФ);
		
		ИдентифицированныеЛьготники.Загрузить(ПроизвестиИдентификациюЛицевыхСчетов(ТаблицаДанныхИзФайла));
		
		ВыводНеидентифицированныхЛьготников(ИдентифицированныеЛьготники);
		
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Структура файла обмена отличается от той, что содержится в справочной информации к выгрузке! "
		+ "Выберите корректный файл и выполните повторную загрузку данных.", , "ИмяФайлаЗагрузки", "Объект");
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьТаблицуНачисленныхЛьгот()

// Возвращает адрес временного хранилища настроек.
//
&НаСервере
Функция ПолучитьАдресХранилищаНастроек()
	
	Настройки = Новый Структура;
	Настройки.Вставить("ИмяФайлаЗагрузки",                  Объект.ИмяФайлаЗагрузки);
	Настройки.Вставить("ТверскаяОбласть_УслугиСписком",     ТверскаяОбласть_УслугиСписком.Выгрузить());
	Настройки.Вставить("ТверскаяОбласть_ЛьготныеКатегории", Объект.ТверскаяОбласть_ЛьготныеКатегории.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(Настройки, Новый УникальныйИдентификатор);
	
КонецФункции // ПолучитьАдресХранилищаНастроек()

// Обработчик закрытия окна формы настройки.
//
&НаКлиенте
Процедура ОбновитьНастройки(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьНастройкиНаСервере(ДополнительныеПараметры.АдресХранилищаНастроек);
	
	УправлениеВидимостьюКнопок("НастройкаЗавершение");
	
КонецПроцедуры // ОбновитьНастройки()

// Обновляет данные обработки.
//
&НаСервере
Процедура ОбновитьНастройкиНаСервере(Адрес)
	
	СтруктураНастроек = ПолучитьИзВременногоХранилища(Адрес);
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		
		Если СтруктураНастроек.Свойство("ИмяФайлаЗагрузки") Тогда
			Объект.ИмяФайлаЗагрузки = СтруктураНастроек.ИмяФайлаЗагрузки;
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ТверскаяОбласть_УслугиСписком") Тогда
			
			ПодготовитьТаблицуСоответствияУслуг(СтруктураНастроек.ТверскаяОбласть_УслугиСписком);
			ТверскаяОбласть_УслугиСписком.Загрузить(СтруктураНастроек.ТверскаяОбласть_УслугиСписком);
			
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ТверскаяОбласть_ЛьготныеКатегории") Тогда
			Объект.ТверскаяОбласть_ЛьготныеКатегории.Загрузить(СтруктураНастроек.ТверскаяОбласть_ЛьготныеКатегории);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьНастройкиНаСервере()

// Помещает настройки во временное хранилище основной формы.
//
&НаСервере
Процедура ПодготовитьТаблицуСоответствияУслуг(ТверскаяОбласть_УслугиСписком)
	
	Объект.ТверскаяОбласть_Услуги.Очистить();
	
	Для Каждого Услуга Из ТверскаяОбласть_УслугиСписком Цикл
		
		УслугаВОСЗН = Услуга.УслугаВОСЗН;
		
		Для Каждого ТекущаяСтрока Из Услуга.УслугиВБазеСписок Цикл
			
			УслугаВБазе = ТекущаяСтрока.Значение;
			
			НоваяСтрока = Объект.ТверскаяОбласть_Услуги.Добавить();
			НоваяСтрока.УслугаВОСЗН = УслугаВОСЗН;
			НоваяСтрока.УслугаВБазе = УслугаВБазе;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ПодготовитьТаблицуСоответствияУслуг()

// Изменяет период на форме выгрузки.
//
// Параметры:
//  Период - Дата - устанавливаемый период.
//
&НаСервере
Процедура ОбновитьПериод(Период = Неопределено)
	
	Объект.Период = ?(Период = Неопределено, УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("РабочаяДата"), КонецМесяца(Период));
	
	Если Объект.Период = '00010101' Тогда
		Объект.Период = ТекущаяДата();
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры // ОбновитьПериод()

// Процедура восстанавливает сохраненные данные.
//
&НаСервере
Процедура ИнициализацияРеквизитов()
	
	Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
	СтруктураПараметров = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("ПараметрыВыгрузкиВОСЗН_ТверскаяОбласть", "ПараметрыВыгрузки");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		Если СтруктураПараметров.Свойство("КодОрганизации") Тогда
			Объект.КодОрганизации = СтруктураПараметров.КодОрганизации;
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("КодУчреждения") Тогда
			КодУчреждения = СтруктураПараметров.КодУчреждения;
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ТверскаяОбласть_Услуги") Тогда
			Объект.ТверскаяОбласть_Услуги.Загрузить(СтруктураПараметров.ТверскаяОбласть_Услуги);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ТверскаяОбласть_УслугиСписком") Тогда
			ТверскаяОбласть_УслугиСписком.Загрузить(СтруктураПараметров.ТверскаяОбласть_УслугиСписком);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ТверскаяОбласть_ЛьготныеКатегории") Тогда
			Объект.ТверскаяОбласть_ЛьготныеКатегории.Загрузить(СтруктураПараметров.ТверскаяОбласть_ЛьготныеКатегории);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ИнициализацияРеквизитов()

// Процедура сохранения настроек.
//
&НаСервере
Процедура СохранитьНастройкиНаСервере()
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("КодОрганизации",                    Объект.КодОрганизации);
	СтруктураПараметров.Вставить("КодУчреждения",                     КодУчреждения);
	СтруктураПараметров.Вставить("ТверскаяОбласть_Услуги",            Объект.ТверскаяОбласть_Услуги.Выгрузить());
	СтруктураПараметров.Вставить("ТверскаяОбласть_УслугиСписком",     ТверскаяОбласть_УслугиСписком.Выгрузить());
	СтруктураПараметров.Вставить("ТверскаяОбласть_ЛьготныеКатегории", Объект.ТверскаяОбласть_ЛьготныеКатегории.Выгрузить());
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("ПараметрыВыгрузкиВОСЗН_ТверскаяОбласть", "ПараметрыВыгрузки", СтруктураПараметров);
	
КонецПроцедуры // СохранитьНастройкиНаСервере()

// Дозаполняет таблицу начисленных льгот "ТаблицаВыгрузки" данными из базы.
// Дозаполняет поля: WELL, SUML, DATPRL, SROKS, SROKPO.
//
&НаСервере
Процедура ДозаполнитьТаблицуНачисленныхЛьгот()
	
	ОчисткаПолейПередПовторнымЗаполнением();
	
	#Область Запрос
	
	Запрос = Новый Запрос;
	
	// Описание запроса:
	//
	// втИдентифицированныеЛьготники
	// ОПИСАНИЕ:
	//  Идентифицированные льготники в разрезе услуг,
	//  полученные в результате считывания из файла обмена и идентификации в базе.
	// ПОЛЯ:
	//  ЛицевойСчет - ссылка на лицевой счет льготника
	//  Услуга      - ссылка на услугу
	//  Позиция     - номер позиции услуги у льготника
	//
	// втДоли
	// ОПИСАНИЕ:
	//  Данные о размерах долей идентифицированных лицевых счетов,
	//  действующих на дату окончания периода.
	//  Формируется по данным таблицы втИдентифицированныеЛьготники.
	// ПОЛЯ:
	//  Объект       - ссылка на помещение,
	//  ЛицевойСчета - ссылка на лицевой счет льготника,
	//  ДоляЛС       - доля площади (ДоляЧислитель / ДоляЗнаменатель)
	//
	// втПлощади
	// ОПИСАНИЕ:
	//  Данные об общих площадях помещений,
	//  действующих на дату окончания периода.
	//  Формируется отбором на основании таблицы втДоли.
	// ПОЛЯ:
	//  Объект     - ссылка на помещение,
	//  Площадь    - площадь помещения
	//
	// втWELL
	// ОПИСАНИЕ:
	//  Данные о площади помещения, которая приходится на лицевой счет,
	//  по которому зарегистрирован льготник.
	//  Формируется по данным таблиц втИдентифицированныеЛьготники, втПлощади и втДоли.
	// ПОЛЯ:
	//  ЛицевойСчет - ссылка на лицевой счет,
	//  WELL        - площадь, которая приходится на лицевой счет
	//
	// втSUML
	// ОПИСАНИЕ:
	//  Данные о суммах льгот по запрашиваемым услугам и льготным категориям,
	//  которые были начислены на идентифицированные лицевые счета.
	//  Формируется отбором на основании таблицы втИдентифицированныеЛьготники.
	// ПОЛЯ:
	//  ЛицевойСчет - ссылка на лицево счет
	//  Услуга      - ссылка на услугу
	//  SUML        - сумма льготы, предоставленная за услугу
	//
	// Основной запрос
	// ОПИСАНИЕ:
	//  Данные о суммах компенсаций расходов на уплату взноса на 
	//  капитальный ремонт общего имущества в многоквартирном доме по каждому заявителю(льготнику).
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИдентифицированныеЛьготники.ЛицевойСчет КАК ЛицевойСчет,
	|	ИдентифицированныеЛьготники.Услуга КАК Услуга,
	|	ИдентифицированныеЛьготники.Позиция КАК Позиция
	|ПОМЕСТИТЬ втИдентифицированныеЛьготники
	|ИЗ
	|	&ИдентифицированныеЛьготники КАК ИдентифицированныеЛьготники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.Объект КАК Объект,
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	ВЫБОР
	|		КОГДА КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель = 0
	|			ТОГДА 0
	|		ИНАЧЕ КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель / КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель
	|	КОНЕЦ КАК ДоляЛС
	|ПОМЕСТИТЬ втДоли
	|ИЗ
	|	РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					втИдентифицированныеЛьготники.ЛицевойСчет КАК ЛицевойСчет
	|				ИЗ
	|					втИдентифицированныеЛьготники КАК втИдентифицированныеЛьготники)) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект КАК Объект,
	|	ЕСТЬNULL(КВП_ПлощадьПомещенияСрезПоследних.Площадь, 0) КАК Площадь
	|ПОМЕСТИТЬ втПлощади
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|			&ДатаКонца,
	|			ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)
	|				И Объект В
	|					(ВЫБРАТЬ
	|						втДоли.Объект КАК Объект
	|					ИЗ
	|						втДоли КАК втДоли)) КАК КВП_ПлощадьПомещенияСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДоли.ЛицевойСчет КАК ЛицевойСчет,
	|	ВЫБОР
	|		КОГДА втДоли.ДоляЛС = 0
	|			ТОГДА 0
	|		ИНАЧЕ втДоли.ДоляЛС * втПлощади.Площадь
	|	КОНЕЦ КАК WELL
	|ПОМЕСТИТЬ втWELL
	|ИЗ
	|	втДоли КАК втДоли
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПлощади КАК втПлощади
	|		ПО втДоли.Объект = втПлощади.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втДоли
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втПлощади
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_НачисленныеЛьготыОбороты.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_НачисленныеЛьготыОбороты.Услуга КАК Услуга,
	|	КВП_НачисленныеЛьготыОбороты.СуммаНачисленияОборот КАК SUML
	|ПОМЕСТИТЬ втSUML
	|ИЗ
	|	РегистрНакопления.КВП_НачисленныеЛьготы.Обороты(
	|			&ДатаНачала,
	|			&ДатаКонца,
	|			Месяц,
	|			(ЛицевойСчет, Услуга) В
	|					(ВЫБРАТЬ
	|						втИдентифицированныеЛьготники.ЛицевойСчет КАК ЛицевойСчет,
	|						втИдентифицированныеЛьготники.Услуга КАК Услуга
	|					ИЗ
	|						втИдентифицированныеЛьготники КАК втИдентифицированныеЛьготники)
	|				И Организация = &Организация) КАК КВП_НачисленныеЛьготыОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИдентифицированныеЛьготники.Позиция КАК Позиция,
	|	втИдентифицированныеЛьготники.ЛицевойСчет КАК ЛицевойСчет,
	|	втИдентифицированныеЛьготники.Услуга КАК Услуга,
	|	ЕСТЬNULL(втWELL.WELL, 0) КАК WELL,
	|	ЕСТЬNULL(втSUML.SUML, 0) КАК SUML
	|ИЗ
	|	втИдентифицированныеЛьготники КАК втИдентифицированныеЛьготники
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втWELL КАК втWELL
	|		ПО втИдентифицированныеЛьготники.ЛицевойСчет = втWELL.ЛицевойСчет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втSUML КАК втSUML
	|		ПО втИдентифицированныеЛьготники.ЛицевойСчет = втSUML.ЛицевойСчет
	|			И втИдентифицированныеЛьготники.Услуга = втSUML.Услуга
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЛицевойСчет,
	|	Позиция
	|ИТОГИ ПО
	|	ЛицевойСчет";
	
	Запрос.УстановитьПараметр("ИдентифицированныеЛьготники",          РеквизитФормыВЗначение("ИдентифицированныеЛьготники"));
	Запрос.УстановитьПараметр("ДатаНачала",                           НачалоМесяца(Объект.Период));
	Запрос.УстановитьПараметр("ДатаКонца",                            КонецМесяца(Объект.Период));
	Запрос.УстановитьПараметр("Организация",                          Объект.Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	#КонецОбласти
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ДеревоНачислений = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		
		ОтборЛьготников = Новый Структура("ЛицевойСчет");
		
		Для Каждого Льготник Из ДеревоНачислений.Строки Цикл
			
			ОтборЛьготников.ЛицевойСчет = Льготник.ЛицевойСчет;
			
			НайденныеСтроки = ТаблицаВыгрузки.НайтиСтроки(ОтборЛьготников);
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				
				СтрокиСУслугамиОСЗН = СвернутьСтрокиСПовторяющейсяПозицией(Льготник.Строки);
				
				Для Каждого Строка Из СтрокиСУслугамиОСЗН Цикл
					
					Если НЕ Строка["SUML"] = 0 И НЕ Строка["WELL"] = 0 Тогда
						
						НайденнаяСтрока["WELL"   + Строка.Позиция] = Строка["WELL"];
						НайденнаяСтрока["SUML"   + Строка.Позиция] = Строка["SUML"];
						НайденнаяСтрока["DATPRL" + Строка.Позиция] = Формат(НачалоМесяца(КонецМесяца(Объект.Период) + 1));
						НайденнаяСтрока["SROKS"  + Строка.Позиция] = Формат(НачалоМесяца(Объект.Период));
						НайденнаяСтрока["SROKPO" + Строка.Позиция] = Формат(КонецМесяца(Объект.Период));
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Данные о начисленных льготах за """ + ПериодСтрокой + """ успешно загружены в таблицу ""Начисленные льготы""!");
		
	КонецЕсли;
	
КонецПроцедуры // ДозаполнитьТаблицуНачисленныхЛьгот()

// Заполняет таблицу должников "ТаблицаЗадолженностей" данными из базы.
// Дозаполняет поле: DAT_ZAD.
//
&НаСервере
Процедура ЗаполнитьТаблицуДолжников()
	
	ТаблицаЗадолженностей.Очистить();
	
	СтруктураНастроекКапРемонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Объект.Организация, Истина);
	
	Если СтруктураНастроекКапРемонта.СписокУслуг.Количество() > 0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИдентифицированныеЛьготники.ЛицевойСчет КАК ЛицевойСчет
		|ПОМЕСТИТЬ втИдентифицированныеЛьготники
		|ИЗ
		|	&ИдентифицированныеЛьготники КАК ИдентифицированныеЛьготники
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет КАК ЛицевойСчет,
		|	МИНИМУМ(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.МесяцНачисления) КАК СамыйРаннийМесяцНачисленияСДолгом
		|ПОМЕСТИТЬ втСведенияОСамыхРаннихМесяцахНачисленияЛСсДолгами
		|ИЗ
		|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
		|			&ДатаКонца,
		|			Организация = &Организация
		|				И ЛицевойСчет В
		|					(ВЫБРАТЬ
		|						втИдентифицированныеЛьготники.ЛицевойСчет КАК ЛицевойСчет
		|					ИЗ
		|						втИдентифицированныеЛьготники КАК втИдентифицированныеЛьготники)
		|				И Услуга В (&СписокУслугКР)
		|				И НЕ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
		|ГДЕ
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втСведенияОСамыхРаннихМесяцахНачисленияЛСсДолгами.ЛицевойСчет КАК ЛицевойСчет,
		|	втСведенияОСамыхРаннихМесяцахНачисленияЛСсДолгами.СамыйРаннийМесяцНачисленияСДолгом КАК DAT_ZAD
		|ИЗ
		|	втСведенияОСамыхРаннихМесяцахНачисленияЛСсДолгами КАК втСведенияОСамыхРаннихМесяцахНачисленияЛСсДолгами
		|ГДЕ
		|	РАЗНОСТЬДАТ(втСведенияОСамыхРаннихМесяцахНачисленияЛСсДолгами.СамыйРаннийМесяцНачисленияСДолгом, &ТекущийМесяцНачисления, МЕСЯЦ) >= 2";
		
		Запрос.УстановитьПараметр("ИдентифицированныеЛьготники", РеквизитФормыВЗначение("ИдентифицированныеЛьготники"));
		Запрос.УстановитьПараметр("СписокУслугКР",               СтруктураНастроекКапРемонта.СписокУслуг);
		Запрос.УстановитьПараметр("ДатаКонца",                   КонецМесяца(Объект.Период));
		Запрос.УстановитьПараметр("ТекущийМесяцНачисления",      НачалоДня(КонецМесяца(Объект.Период)));
		Запрос.УстановитьПараметр("Организация",                 Объект.Организация);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			
			ОтборЛьготников = Новый Структура("ЛицевойСчет");
			
			Пока Выборка.Следующий() Цикл
				
				ОтборЛьготников.ЛицевойСчет = Выборка.ЛицевойСчет;
				
				НайденныеСтроки = ТаблицаВыгрузки.НайтиСтроки(ОтборЛьготников);
				
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					
					НоваяЗапись = ТаблицаЗадолженностей.Добавить();
					
					ЗаполнитьЗначенияСвойств(НоваяЗапись, НайденнаяСтрока);
					
					НоваяЗапись.DAT_ZAD = Выборка.DAT_ZAD;
					
				КонецЦикла;
				
			КонецЦикла;
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Данные о задолженностях за """ + ПериодСтрокой + """ успешно загружены в таблицу ""Задолженности""!");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТаблицуДолжников()

// Управляет видимостью кнопок.
//
&НаКлиенте
Процедура УправлениеВидимостьюКнопок(НаименованиеОперации)
	
	Настройка               = Ложь;
	КомандаЗагрузитьИзФайла = Ложь;
	ЗаполнитьВсе            = Ложь;
	ВыгрузитьВсе            = Ложь;
	
	ЕстьОшибкиНаОсновнойФорме = ЕстьОшибкиНаОсновнойФорме();
	ЕстьОшибкиНаФормеНастроек = ЕстьОшибкиНаФормеНастроек();
	
	Если НаименованиеОперации = "ОткрытиеФормы" Тогда
		
		Если ЕстьОшибкиНаОсновнойФорме Или ЕстьОшибкиНаФормеНастроек Тогда
			
			Настройка = Истина;
			
		ИначеЕсли Не ЕстьОшибкиНаОсновнойФорме И Не ЕстьОшибкиНаФормеНастроек Тогда
			
			Настройка               = Истина;
			КомандаЗагрузитьИзФайла = Истина;
			
		КонецЕсли;
		
	ИначеЕсли НаименованиеОперации = "Инструкция" Тогда
		
		Настройка = Истина;
		
		Если Не ЕстьОшибкиНаОсновнойФорме И Не ЕстьОшибкиНаФормеНастроек Тогда
			КомандаЗагрузитьИзФайла = Истина;
			
		КонецЕсли;
		
	ИначеЕсли НаименованиеОперации = "НастройкаЗавершение" Или НаименованиеОперации = "ФайлОбмена"
		Или НаименованиеОперации = "Организация" Тогда
		
		Если Не ЕстьОшибкиНаОсновнойФорме И Не ЕстьОшибкиНаФормеНастроек(, Истина) Тогда
			
			Настройка               = Истина;
			КомандаЗагрузитьИзФайла = Истина;
			
		Иначе
			
			Настройка = Истина;
			
		КонецЕсли;
		
	ИначеЕсли НаименованиеОперации = "ЗагрузитьИзФайлаЗавершение" Или НаименованиеОперации = "ЛицевойСчетПриИзменении" Тогда
		
		Если ТаблицаВыгрузки.Количество() = 0 Тогда
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось загрузить сведения из файла! Файл обмена пустой.");
			
			Настройка               = Истина;
			КомандаЗагрузитьИзФайла = Истина;
			
		ИначеЕсли ИдентифицированныеЛьготники.Количество() = 0 Тогда
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось идентифицировать льготников из файла обмена!");
			
			Настройка               = Истина;
			КомандаЗагрузитьИзФайла = Истина;
			
		Иначе
			
			Настройка               = Истина;
			КомандаЗагрузитьИзФайла = Истина;
			ЗаполнитьВсе            = Истина;
			
		КонецЕсли;
		
	ИначеЕсли НаименованиеОперации = "ЗаполнитьВсе" Тогда
		
		Настройка               = Истина;
		КомандаЗагрузитьИзФайла = Истина;
		ЗаполнитьВсе            = Истина;
		ВыгрузитьВсе            = Истина;
		
	КонецЕсли;
	
	Элементы.Настройка.Доступность               = Настройка;
	Элементы.КомандаЗагрузитьИзФайла.Доступность = КомандаЗагрузитьИзФайла;
	Элементы.ЗаполнитьВсе.Доступность            = ЗаполнитьВсе;
	Элементы.ВыгрузитьВсе.Доступность            = ВыгрузитьВсе;
	
КонецПроцедуры // УправлениеВидимостьюКнопок()

// Очищает поля "SUML", "DATPRL", "SROKS", "SROKPO" таблицы "ТаблицаВыгрузки" перед повторным заполнением.
//
&НаСервере
Процедура ОчисткаПолейПередПовторнымЗаполнением()
	
	Для Каждого Льготник Из ТаблицаВыгрузки Цикл
		
		Сч = 1;
		Пока Сч <= КоличествоУслуг  Цикл
			
			Льготник["WELL" + Сч]   = 0;
			Льготник["SUML" + Сч]   = 0;
			Льготник["DATPRL" + Сч] = '0001-01-01';
			Льготник["SROKS" + Сч]  = '0001-01-01';
			Льготник["SROKPO" + Сч] = '0001-01-01';
			
			Сч = Сч + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ОчисткаПолейПередПовторнымЗаполнением()

#КонецОбласти // ВспомогательныеМеханизмы

//////////////////////////////////////////////////////////////////////////
// ВЫГРУЗКА ФАЙЛОВ

#Область ВыгрузкаФайлов

// Предназначена для выгрузки данных из таблицы "ТаблицаВыгрузки" в dbf-файл.
//
&НаКлиенте
Процедура ВыгрузитьДанныеВФайлПоНачисленнымЛьготам()
	
	ФайлНаДиске = Новый Файл(Объект.ИмяФайлаЗагрузки);
	
	ФайлНаДиске.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ПроверкаСуществованияФайлаОбмена", ЭтотОбъект, "Выгрузка"));
	
КонецПроцедуры // ВыгрузитьДанныеВФайлПоНачисленнымЛьготам()

// Выгружает файл обмена с начислениями в каталог.
//
&НаСервере
Функция ОбработатьЗаписьФайлаОбмена(Результат, АдресФайлаВХранилище, ВыбранноеИмяФайла, Режим) Экспорт
	
	Если Результат Тогда
		
		// Запись временных данных во временный файл.
		врДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайлаВХранилище);
		ВременныйФайл = ПолучитьИмяВременногоФайла("DBF");
		
		// Для чтения *.dbf формата урежем имя временного файла.
		ФайлДБФ = Новый Файл(ВременныйФайл);
		
		ИмяФайла = Строка(Объект.КодОрганизации) + Прав(Формат(Объект.Период, "ДФ=y"), 1) + Формат(Объект.Период, "ДФ=MM")+ "1" + КодУчреждения + ".dbf";
		
		ВременныйФайл = КаталогФайлаЗагрузки + ИмяФайла;
		
		врДанныеФайла.Записать(ВременныйФайл);
		
		ФайлДБФ = Новый XBase;
		ФайлДБФ.Автосохранение = Истина;
		ФайлДБФ.Кодировка = КодировкаXBase.OEM;
		ФайлДБФ.ОткрытьФайл(ВременныйФайл, , Ложь);
		
		Если ФайлДБФ.Открыта() Тогда
			
			Попытка
				
				Пока Не ФайлДБФ.ВКонце() Цикл
					
					ОтборЛьготников = Новый Структура("PKU");
					ОтборЛьготников.PKU = СокрЛП(ФайлДБФ.PKU);
					
					НайденныеСтроки = ТаблицаВыгрузки.НайтиСтроки(ОтборЛьготников);
					
					Для Каждого Строка Из НайденныеСтроки Цикл
						
						Сч = 1;
						Пока Сч <= КоличествоУслуг Цикл
							
							ФайлДБФ["WELL" + Сч]   = Строка["WELL" + Сч];
							ФайлДБФ["SUML" + Сч]   = Строка["SUML" + Сч];
							ФайлДБФ["DATPRL" + Сч] = Строка["DATPRL" + Сч];
							ФайлДБФ["SROKS" + Сч]  = Строка["SROKS" + Сч];
							ФайлДБФ["SROKPO" + Сч] = Строка["SROKPO" + Сч];
							
							Сч = Сч + 1;
							
						КонецЦикла;
						
					КонецЦикла;
					
					ФайлДБФ.Следующая();
					
				КонецЦикла;
				
			Исключение
				ТекстОшибки = ОписаниеОшибки();
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Структура файла обмена отличается от той, что содержится в справочной информации к выгрузке! "
				+ "Выберите корректный файл и выполните повторную загрузку данных.", , "ИмяФайлаЗагрузки", "Объект");
			КонецПопытки;
			
			Текст = "Выгрузка файла """ + ИмяФайла +""" с начисленными льготами завершена!";
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(Текст);
			
			ФайлДБФ.ЗакрытьФайл();
			
		Иначе
			СтрокаСообщения = "Не удалось открыть файл обмена!";
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(СтрокаСообщения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции // ОбработатьЗаписьФайлаОбмена()

// Предназначена для выгрузки данных из таблицы должников в dbf-файл.
//
&НаКлиенте
Процедура ВыгрузитьДанныеВФайлПоДолжникам()
	
	Файл = Новый Файл(КаталогФайлаЗагрузки);
	
	Если НЕ Файл.Существует() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Каталог не существует!", , "ИмяФайлаЗагрузки", "Объект");
	Иначе
		
		#Если Не ВебКлиент Тогда
			
			Если ТаблицаЗадолженностей.Количество() = 0 Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В таблице ""Задолженности"" отсутствуют данные! Файл со сведениями о должниках не удалось сформировать.");
				Возврат;
			КонецЕсли;
			
			ФайлВыгрузки = Новый XBase;
			ФайлВыгрузки.Кодировка = КодировкаXBase.OEM;
			
			ФайлВыгрузки.Поля.Добавить("PKU",     "S", "11");
			ФайлВыгрузки.Поля.Добавить("PY",      "S", "3");
			ФайлВыгрузки.Поля.Добавить("NKAR",    "S", "25");
			ФайлВыгрузки.Поля.Добавить("FAMIL",   "S", "20");
			ФайлВыгрузки.Поля.Добавить("IMJA",    "S", "20");
			ФайлВыгрузки.Поля.Добавить("OTCH",    "S", "25");
			ФайлВыгрузки.Поля.Добавить("DROG",    "D");
			ФайлВыгрузки.Поля.Добавить("NNASP",   "S", "30");
			ФайлВыгрузки.Поля.Добавить("NYLIC",   "S", "36");
			ФайлВыгрузки.Поля.Добавить("NDOM",    "S", "7");
			ФайлВыгрузки.Поля.Добавить("NKORP",   "S", "3");
			ФайлВыгрузки.Поля.Добавить("NKW",     "N", "3", "0");
			ФайлВыгрузки.Поля.Добавить("DS1",     "N", "3", "0");
			ФайлВыгрузки.Поля.Добавить("DS2",     "N", "3", "0");
			ФайлВыгрузки.Поля.Добавить("LCHET",   "S", "24");
			ФайлВыгрузки.Поля.Добавить("DAT_ZAD", "D");
			
			ИмяФайла = Строка(Объект.КодОрганизации) + Прав(Формат(Объект.Период, "ДФ=y"), 1) + Формат(Объект.Период, "ДФ=MM")+ "Z" + КодУчреждения + ".dbf";
			
			ФайлВыгрузки.СоздатьФайл(КаталогФайлаЗагрузки + "\" + ИмяФайла);
			ФайлВыгрузки.АвтоСохранение = Истина;
			
			Для Каждого ТекСтрока Из ТаблицаЗадолженностей Цикл
				ФайлВыгрузки.Добавить();
				ЗаполнитьЗначенияСвойств(ФайлВыгрузки, ТекСтрока);
			КонецЦикла;
			
			ФайлВыгрузки.ЗакрытьФайл();
			
			Текст = "Выгрузка файла """ +  ИмяФайла + """ с должниками завершена!";
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(Текст);
			
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры // ВыгрузитьДанныеВФайлПоДолжникам()

#КонецОбласти // ВыгрузкаФайлов

//////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНЦИИ ДЛЯ ЗАГРУЗКИ И ИДЕНТИФИКАЦИИ ЖИЛЬЦОВ

#Область ЗагрузкаИИдентификация

// Переопределяет колонки и поля таблицы "ТаблицаВыгрузки".
//
&НаСервере
Процедура ДобавитьРеквизитыВТаблицуЗагрузкиНаСервере()
	
	Если НЕ АдресДобавляемыеРеквизитыТаблицыЗагрузки = "" Тогда
		
		ДобавляемыеРеквизитыТаблицыЗагрузки = ПолучитьИзВременногоХранилища(АдресДобавляемыеРеквизитыТаблицыЗагрузки);
		
		УдаляемыеРеквизиты = Новый Массив;
		
		// Удаляем ранее добавленные элементы формы.
		Для Каждого РеквизитУдаления Из ДобавляемыеРеквизитыТаблицыЗагрузки Цикл
			УдаляемыеРеквизиты.Добавить("ТаблицаВыгрузки." + РеквизитУдаления.Имя);
			Элементы.Удалить(Элементы["ТаблицаВыгрузки" + РеквизитУдаления.Имя]);
		КонецЦикла;
		
		// Удаляем ранее добавленные реквизиты.
		ИзменитьРеквизиты(, УдаляемыеРеквизиты);
		
		ДобавляемыеРеквизитыТаблицыЗагрузки.Очистить();
		
	Иначе
		ДобавляемыеРеквизитыТаблицыЗагрузки = Новый Массив;
	КонецЕсли;
	
	Сч = 1;
	Пока Сч <= КоличествоУслуг Цикл
		
		ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("NISU_OSN" + Сч, Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(50)),           "ТаблицаВыгрузки", "NISU_OSN" + Сч, Ложь));
		ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("DATAVOZN" + Сч, Новый ОписаниеТипов("Дата",   Новый КвалификаторыДаты(ЧастиДаты.Дата)), "ТаблицаВыгрузки", "DATAVOZN" + Сч, Ложь));
		ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("SROKDO"   + Сч, Новый ОписаниеТипов("Дата",   Новый КвалификаторыДаты(ЧастиДаты.Дата)), "ТаблицаВыгрузки", "SROKDO"   + Сч, Ложь));
		ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("KODL"     + Сч, Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(14)),           "ТаблицаВыгрузки", "KODL"     + Сч, Ложь));
		ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("NKOD_LGT" + Сч, Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(50)),           "ТаблицаВыгрузки", "NKOD_LGT" + Сч, Ложь));
		ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("WELL"     + Сч, Новый ОписаниеТипов("Число",  Новый КвалификаторыЧисла(10, 2)),         "ТаблицаВыгрузки", "WELL"     + Сч, Ложь));
		ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("SUML"     + Сч, Новый ОписаниеТипов("Число",  Новый КвалификаторыЧисла(10, 2)),         "ТаблицаВыгрузки", "SUML"     + Сч, Ложь));
		ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("DATPRL"   + Сч, Новый ОписаниеТипов("Дата",   Новый КвалификаторыДаты(ЧастиДаты.Дата)), "ТаблицаВыгрузки", "DATPRL"   + Сч, Ложь));
		ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("SROKS"    + Сч, Новый ОписаниеТипов("Дата",   Новый КвалификаторыДаты(ЧастиДаты.Дата)), "ТаблицаВыгрузки", "SROKS"    + Сч, Ложь));
		ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("SROKPO"   + Сч, Новый ОписаниеТипов("Дата",   Новый КвалификаторыДаты(ЧастиДаты.Дата)), "ТаблицаВыгрузки", "SROKPO"   + Сч, Ложь));
		ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("KCHLS"    + Сч, Новый ОписаниеТипов("Число",  Новый КвалификаторыЧисла(2, 0)),          "ТаблицаВыгрузки", "KCHLS"    + Сч, Ложь));
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
	// Добавляем новые реквизиты.
	ИзменитьРеквизиты(ДобавляемыеРеквизитыТаблицыЗагрузки);
	
	// Создаем новые элементы формы.
	Для Каждого Колонка Из ДобавляемыеРеквизитыТаблицыЗагрузки Цикл 
		Элемент             = Элементы.Добавить("ТаблицаВыгрузки" + Колонка.Имя, Тип("ПолеФормы"), Элементы.ТаблицаВыгрузки); 
		Элемент.Вид         = ВидПоляФормы.ПолеВвода;
		Элемент.Формат      = "ЧН=0";
		Элемент.ПутьКДанным = "ТаблицаВыгрузки." + Колонка.Имя;
	КонецЦикла;
	
	// Сохраняем массив добавляемых реквизитов.
	АдресДобавляемыеРеквизитыТаблицыЗагрузки = ПоместитьВоВременноеХранилище(ДобавляемыеРеквизитыТаблицыЗагрузки, Новый УникальныйИдентификатор);
	
КонецПроцедуры // ДобавитьРеквизитыВТаблицуЗагрузкиНаСервере()

// Процедура предназначена для идентификации льготников из файла ОСЗН с жильцами из информационной базы.
//
&НаСервере
Функция ПроизвестиИдентификациюЛицевыхСчетов(ТаблицаДанныхИзФайла)
	
#Область Запрос
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Описание запроса:
	//
	// втТаблицаДанныхИзФайла
	// ОПИСАНИЕ:
	//  Льготники в разрезе услуг, полученные в результате считывания из файла.
	// ПОЛЯ:
	//  УникальнаяСтрока  - уникальная строка (Фамилия + Имя + Отчество + NKAR).
	//  FAMIL             - фамилия
	//  IMJA              - имя
	//  OTCH              - отчество
	//  NNASP             - наименование население пункт
	//  NYLIC             - наименование улиц
	//  NDOM              - номер дома
	//  NKORP             - номер корпуса
	//  NKW               - номер квартиры
	//  ЛьготнаяКатегория - ссылка на льготную категорию
	//  Услуга            - ссылка на услугу
	//  Позиция           - номер позиции услуги у льготника
	//
	// втФИОФизЛиц
	// ОПИСАНИЕ:
	//  Данные ФИО физических лиц с отбором по льготникам из файла обмена,
	//  действующие на дату окончания периода.
	//  Формируется по данным таблицы втТаблицаДанныхИзФайла.
	// ПОЛЯ:
	//  ФизическоеЛицо - ссылка на физическое лицо
	//  Фамилия        - фамилия
	//  Имя            - имя
	//  Отчество       - отчество
	//
	// втЖильцы
	// ОПИСАНИЕ:
	//  Данные о жильцах. Формируется по данным таблицы втФИОФизЛиц.
	// ПОЛЯ:
	//  Проживающий  - ссылка на проживающего
	//  ФизЛицо      - ссылка на Физ лицо
	//  Здание       - здание
	//  ТипПомещения - тип помещения
	//  Квартира     - квартира
	//  ЛицевойСчет  - ссылка на лицевой счет
	//
	// втЖильцыСФИО
	// ОПИСАНИЕ:
	//  Данные о жильцах с ФИО. 
	//  Формируется по данным таблиц: втЖильцы и втФИОФизЛиц.
	// ПОЛЯ:
	//  Проживающий  - ссылка на проживающего
	//  Фамилия        - фамилия
	//  Имя            - имя
	//  Отчество       - отчество
	//  Здание       - здание
	//  ТипПомещения - тип помещения
	//  Квартира     - квартира
	//  ЛицевойСчет  - ссылка на лицевой счет
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаИзФайла.FAMIL КАК FAMIL,
	|	ТаблицаИзФайла.IMJA КАК IMJA,
	|	ТаблицаИзФайла.OTCH КАК OTCH,
	|	ТаблицаИзФайла.NNASP КАК NNASP,
	|	ТаблицаИзФайла.NYLIC КАК NYLIC,
	|	ТаблицаИзФайла.NDOM КАК NDOM,
	|	ТаблицаИзФайла.NKORP КАК NKORP,
	|	ТаблицаИзФайла.NKW КАК NKW,
	|	ТаблицаИзФайла.УникальнаяСтрока КАК УникальнаяСтрока,
	|	ТаблицаИзФайла.ЛьготнаяКатегория КАК ЛьготнаяКатегорияВОСЗН,
	|	ТаблицаИзФайла.Услуга КАК Услуга,
	|	ТаблицаИзФайла.Позиция КАК Позиция
	|ПОМЕСТИТЬ втТаблицаДанныхИзФайла
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаИзФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ФИОФизическихЛицСрезПоследних.Фамилия КАК Фамилия,
	|	ФИОФизическихЛицСрезПоследних.Имя КАК Имя,
	|	ФИОФизическихЛицСрезПоследних.Отчество КАК Отчество
	|ПОМЕСТИТЬ втФИОФизЛиц
	|ИЗ
	|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(
	|			&ДатаКонца,
	|			(Фамилия, Имя, Отчество) В
	|				(ВЫБРАТЬ
	|					втТаблицаДанныхИзФайла.FAMIL КАК FAMIL,
	|					втТаблицаДанныхИзФайла.IMJA КАК IMJA,
	|					втТаблицаДанныхИзФайла.OTCH КАК OTCH
	|				ИЗ
	|					втТаблицаДанныхИзФайла КАК втТаблицаДанныхИзФайла)) КАК ФИОФизическихЛицСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Жильцы.Ссылка КАК Проживающий,
	|	УПЖКХ_Жильцы.ФизЛицо КАК ФизЛицо,
	|	УПЖКХ_Жильцы.Владелец.Адрес.Владелец КАК Здание,
	|	УПЖКХ_Жильцы.Владелец.Адрес.ВидПомещения.ТипПомещения КАК ТипПомещения,
	|	УПЖКХ_Жильцы.Владелец.Адрес.Код КАК Квартира,
	|	УПЖКХ_Жильцы.Владелец КАК ЛицевойСчет
	|ПОМЕСТИТЬ втЖильцы
	|ИЗ
	|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
	|ГДЕ
	|	НЕ УПЖКХ_Жильцы.ПометкаУдаления
	|	И УПЖКХ_Жильцы.ФизЛицо В
	|			(ВЫБРАТЬ
	|				втФИОФизЛиц.ФизическоеЛицо КАК ФизическоеЛицо
	|			ИЗ
	|				втФИОФизЛиц КАК втФИОФизЛиц)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцы.Проживающий КАК Проживающий,
	|	втФИОФизЛиц.Фамилия КАК Фамилия,
	|	втФИОФизЛиц.Имя КАК Имя,
	|	втФИОФизЛиц.Отчество КАК Отчество,
	|	втЖильцы.Здание КАК Здание,
	|	втЖильцы.ТипПомещения КАК ТипПомещения,
	|	втЖильцы.Квартира КАК Квартира,
	|	втЖильцы.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ втЖильцыСФИО
	|ИЗ
	|	втЖильцы КАК втЖильцы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втФИОФизЛиц КАК втФИОФизЛиц
	|		ПО втЖильцы.ФизЛицо = втФИОФизЛиц.ФизическоеЛицо";
	
	Запрос.УстановитьПараметр("ДатаКонца",     КонецМесяца(Объект.Период));
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанныхИзФайла);
	
	Запрос.Выполнить();
	
	ЗапросПоАдресам = Новый Запрос;
	ЗапросПоАдресам.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	
	ЗапросПоАдресам.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втЖильцыСФИО.Здание КАК Объект
	|ИЗ
	|	втЖильцыСФИО КАК втЖильцыСФИО";
	
	МассивОбъектов = ЗапросПоАдресам.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	ТаблицаАдресов = ПолучитьАдресаВсехЗданий(МассивОбъектов);
	
#КонецОбласти

#Область Запрос
	
	// Описание запроса:
	//
	// втАдреса
	// ОПИСАНИЕ:
	//  Данные о всех адресах.
	// ПОЛЯ:
	//  Здание          - здание
	//  НаселенныйПункт - населенный пункт
	//  Улица           - улица
	//  Дом             - дом
	//  Корпус          - корпус
	//
	// втЖильцыСАдресами
	// ОПИСАНИЕ:
	//  Данные о жильцах с адресами из файла обмена.
	//  Формируется по данным таблиц: втЖильцыСФИО ЛЕВОЕ втАдреса.
	// ПОЛЯ:
	//  Проживающий     - ссылка на проживающего
	//  Фамилия         - фамилия
	//  Имя             - имя
	//  Отчество        - отчество
	//  Здание          - здание
	//  НаселенныйПункт - населенный пункт
	//  Улица           - улица
	//  Дом             - дом
	//  Корпус          - корпус
	//  ТипПомещения    - тип помещения
	//  Квартира        - квартира
	//  ЛицевойСчет     - ссылка на лицевой счет
	//
	// втЛьготныеКатегорииЖильцов
	// ОПИСАНИЕ:
	//  Данные о льготных категориях жильцов. 
	//  Формируется по данным таблицы втЖильцыСАдресами.
	// ПОЛЯ:
	//  Проживающий     - ссылка на проживающего
	//  Фамилия         - фамилия
	//  Имя             - имя
	//  Отчество        - отчество
	//  Здание          - здание
	//  НаселенныйПункт - населенный пункт
	//  Улица           - улица
	//  Дом             - дом
	//  Корпус          - корпус
	//  ТипПомещения    - тип помещения
	//  Квартира        - квартира
	//  ЛицевойСчет     - ссылка на лицевой счет
	//
	// втЖильцыСАдресамиИЛК
	// ОПИСАНИЕ:
	//  Данные о льготных категориях жильцов из файла обмена.
	//  Формируется по данным таблиц: втЛьготныеКатегорииЖильцов ЛЕВОЕ втЖильцыСАдресами.
	// ПОЛЯ:
	//  Фамилия            - фамилия
	//  Имя                - имя
	//  Отчество           - отчество
	//  НаселенныйПункт    - населенный пункт
	//  Улица              - улица
	//  Дом                - дом
	//  Корпус             - корпус
	//  ТипПомещения       - тип помещения
	//  Квартира           - квартира
	//  ЛицевойСчет        - ссылка на лицевой счет
	//  ЛьготнаяКатегория  - ссылка на льготну категорию
	//
	// Основной запрос
	// ОПИСАНИЕ:
	//  Список льготников из файла обмена, которых удалось идентифицировать.
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаАдресов.Здание КАК Здание,
	|	ТаблицаАдресов.НаселенныйПункт КАК НаселенныйПункт,
	|	ТаблицаАдресов.Улица КАК Улица,
	|	ТаблицаАдресов.Дом КАК Дом,
	|	ТаблицаАдресов.Корпус КАК Корпус
	|ПОМЕСТИТЬ втАдреса
	|ИЗ
	|	&ТаблицаАдресов КАК ТаблицаАдресов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцыСФИО.Проживающий КАК Проживающий,
	|	втЖильцыСФИО.Фамилия КАК Фамилия,
	|	втЖильцыСФИО.Имя КАК Имя,
	|	втЖильцыСФИО.Отчество КАК Отчество,
	|	ЕСТЬNULL(втАдреса.НаселенныйПункт, """") КАК НаселенныйПункт,
	|	ЕСТЬNULL(втАдреса.Улица, """") КАК Улица,
	|	ЕСТЬNULL(втАдреса.Дом, """") КАК Дом,
	|	ЕСТЬNULL(втАдреса.Корпус, """") КАК Корпус,
	|	втЖильцыСФИО.ТипПомещения КАК ТипПомещения,
	|	втЖильцыСФИО.Квартира КАК Квартира,
	|	втЖильцыСФИО.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ втЖильцыСАдресами
	|ИЗ
	|	втЖильцыСФИО КАК втЖильцыСФИО
	|		ЛЕВОЕ СОЕДИНЕНИЕ втАдреса КАК втАдреса
	|		ПО втЖильцыСФИО.Здание = втАдреса.Здание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втЖильцыСФИО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втАдреса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий КАК Проживающий,
	|	КВП_НазначенныеЛьготыСрезПоследних.ЛьготнаяКатегория КАК ЛьготнаяКатегория
	|ПОМЕСТИТЬ втЛьготныеКатегорииЖильцов
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(
	|			&ДатаКонца,
	|			Проживающий В
	|					(ВЫБРАТЬ
	|						втЖильцыСАдресами.Проживающий
	|					ИЗ
	|						втЖильцыСАдресами КАК втЖильцыСАдресами)
	|				И ДатаИзменения <= &ДатаКонца) КАК КВП_НазначенныеЛьготыСрезПоследних
	|ГДЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.Действие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцыСАдресами.Фамилия КАК Фамилия,
	|	втЖильцыСАдресами.Имя КАК Имя,
	|	втЖильцыСАдресами.Отчество КАК Отчество,
	|	втЖильцыСАдресами.НаселенныйПункт КАК НаселенныйПункт,
	|	втЖильцыСАдресами.Улица КАК Улица,
	|	втЖильцыСАдресами.Дом КАК Дом,
	|	втЖильцыСАдресами.Корпус КАК Корпус,
	|	втЖильцыСАдресами.ТипПомещения КАК ТипПомещения,
	|	втЖильцыСАдресами.Квартира КАК Квартира,
	|	втЖильцыСАдресами.ЛицевойСчет КАК ЛицевойСчет,
	|	втЛьготныеКатегорииЖильцов.ЛьготнаяКатегория КАК ЛьготнаяКатегория
	|ПОМЕСТИТЬ втЖильцыСАдресамиИЛК
	|ИЗ
	|	втЛьготныеКатегорииЖильцов КАК втЛьготныеКатегорииЖильцов
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЖильцыСАдресами КАК втЖильцыСАдресами
	|		ПО втЛьготныеКатегорииЖильцов.Проживающий = втЖильцыСАдресами.Проживающий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втЖильцыСАдресами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втЛьготныеКатегорииЖильцов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцыСАдресамиИЛК.ЛицевойСчет КАК ЛицевойСчет,
	|	втТаблицаДанныхИзФайла.Услуга КАК Услуга,
	|	втТаблицаДанныхИзФайла.УникальнаяСтрока КАК УникальнаяСтрока,
	|	втТаблицаДанныхИзФайла.Позиция КАК Позиция
	|ИЗ
	|	втТаблицаДанныхИзФайла КАК втТаблицаДанныхИзФайла
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЖильцыСАдресамиИЛК КАК втЖильцыСАдресамиИЛК
	|		ПО втТаблицаДанныхИзФайла.FAMIL = втЖильцыСАдресамиИЛК.Фамилия
	|			И втТаблицаДанныхИзФайла.IMJA = втЖильцыСАдресамиИЛК.Имя
	|			И втТаблицаДанныхИзФайла.OTCH = втЖильцыСАдресамиИЛК.Отчество
	|			И втТаблицаДанныхИзФайла.NNASP = втЖильцыСАдресамиИЛК.НаселенныйПункт
	|			И втТаблицаДанныхИзФайла.NYLIC = втЖильцыСАдресамиИЛК.Улица
	|			И втТаблицаДанныхИзФайла.NDOM = втЖильцыСАдресамиИЛК.Дом
	|			И втТаблицаДанныхИзФайла.NKORP = втЖильцыСАдресамиИЛК.Корпус
	|			И втТаблицаДанныхИзФайла.ЛьготнаяКатегорияВОСЗН = втЖильцыСАдресамиИЛК.ЛьготнаяКатегория
	|			И (ВЫБОР
	|				КОГДА втЖильцыСАдресамиИЛК.ТипПомещения = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыПомещений.Дом)
	|					ТОГДА ИСТИНА
	|				КОГДА втЖильцыСАдресамиИЛК.ТипПомещения = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыПомещений.Квартира)
	|						И втТаблицаДанныхИзФайла.NKW = 0
	|					ТОГДА втЖильцыСАдресамиИЛК.Квартира = 1
	|				ИНАЧЕ втТаблицаДанныхИзФайла.NKW = втЖильцыСАдресамиИЛК.Квартира
	|			КОНЕЦ)";
	
#КонецОбласти
	
	Запрос.УстановитьПараметр("ТаблицаАдресов", ТаблицаАдресов);
	Запрос.УстановитьПараметр("ДатаКонца",      КонецМесяца(Объект.Период));
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПроизвестиИдентификациюЛицевыхСчетов()

// Получает таблицу значений с адресами зданий.
//
&НаСервере
Функция ПолучитьАдресаВсехЗданий(МассивОбъектов)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов, Ложь);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втКонтактнаяИнформация.Объект КАК Здание,
	|	ВЫБОР
	|		КОГДА НЕ втКонтактнаяИнформация.НаселенныйПункт = """"
	|			ТОГДА втКонтактнаяИнформация.НаселенныйПункт
	|		КОГДА НЕ втКонтактнаяИнформация.Город = """"
	|			ТОГДА втКонтактнаяИнформация.Город
	|		ИНАЧЕ втКонтактнаяИнформация.Регион
	|	КОНЕЦ КАК НаселенныйПункт,
	|	втКонтактнаяИнформация.Улица,
	|	втКонтактнаяИнформация.Дом,
	|	втКонтактнаяИнформация.Корпус
	|ИЗ
	|	втКонтактнаяИнформация КАК втКонтактнаяИнформация";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции // ПолучитьАдресаВсехЗданий()

// Формирует массив сокращений для Тверской области для выбранного вида сокращения.
//
&НаСервере
Функция СформироватьМассивСокращениеПоВиду(ВидСокращение)
		
	МассивСокращений = Новый Массив;
	// для регионов
	Если ВидСокращение = 1 Тогда
		МассивСокращений.Добавить("обл");
		// для районов
	ИначеЕсли ВидСокращение = 2 Тогда
		МассивСокращений.Добавить("р-н");
		// для городов
	ИначеЕсли ВидСокращение = 3 Тогда
		МассивСокращений.Добавить("г");
		// для нас.пунктов
	ИначеЕсли ВидСокращение = 4 Тогда
		МассивСокращений.Добавить("п");
		МассивСокращений.Добавить("дп");
		МассивСокращений.Добавить("нп");
		МассивСокращений.Добавить("рп");
		МассивСокращений.Добавить("снт");
		МассивСокращений.Добавить("с");
		МассивСокращений.Добавить("д");
		МассивСокращений.Добавить("ж/д_ст");
		МассивСокращений.Добавить("ст");
		МассивСокращений.Добавить("ж/д_рзд");
		МассивСокращений.Добавить("высел");
		МассивСокращений.Добавить("остров");
		МассивСокращений.Добавить("промзона");
		МассивСокращений.Добавить("городок");
		МассивСокращений.Добавить("тер");
		МассивСокращений.Добавить("рзд");
		МассивСокращений.Добавить("ж/д_пост");
		МассивСокращений.Добавить("мкр");
		МассивСокращений.Добавить("казарма");
		МассивСокращений.Добавить("х");
		МассивСокращений.Добавить("п/о");
		МассивСокращений.Добавить("г");
		МассивСокращений.Добавить("обл");
		// для улиц
	ИначеЕсли ВидСокращение = 5 Тогда
		МассивСокращений.Добавить("ул");
		МассивСокращений.Добавить("тер");
		МассивСокращений.Добавить("пл");
		МассивСокращений.Добавить("пер");
		МассивСокращений.Добавить("снт");
		МассивСокращений.Добавить("проезд");
		МассивСокращений.Добавить("б-р");
		МассивСокращений.Добавить("туп");
		МассивСокращений.Добавить("п");
		МассивСокращений.Добавить("ш");
		МассивСокращений.Добавить("пр-кт");
		МассивСокращений.Добавить("тракт");
		МассивСокращений.Добавить("сквер");
		МассивСокращений.Добавить("ст");
		МассивСокращений.Добавить("наб");
		МассивСокращений.Добавить("км");
		МассивСокращений.Добавить("ж/д_ст");
		МассивСокращений.Добавить("сад");
		МассивСокращений.Добавить("парк");
		МассивСокращений.Добавить("уч-к");
		МассивСокращений.Добавить("мкр");
		МассивСокращений.Добавить("городок");
		МассивСокращений.Добавить("кв-л");
		МассивСокращений.Добавить("нп");
		МассивСокращений.Добавить("остров");
		МассивСокращений.Добавить("гск");
		МассивСокращений.Добавить("линия");
		МассивСокращений.Добавить("рзд");
		МассивСокращений.Добавить("стр");
		МассивСокращений.Добавить("аллея");
		МассивСокращений.Добавить("казарма");
		МассивСокращений.Добавить("ж/д_рзд");
		МассивСокращений.Добавить("д");
		МассивСокращений.Добавить("ж/д_казарм");
		МассивСокращений.Добавить("ж/д_будка");
		МассивСокращений.Добавить("высел");
	КонецЕсли;
	
	Возврат МассивСокращений;
	
КонецФункции // СформироватьМассивСокращениеПоВиду()

// Функция сокращает название города или улицы: убирает сокращения,
// определяющие тип данного элемента адреса: "г.", "ул." и так далее.
//
// Параметры:
//  Ресурс       - Строка - элемент адреса.
//
// Возвращаемое значение:
//  Строка - элемент адреса в сокращенном виде.
//
&НаСервере
Функция НормализацияПолейАдресаТверскаяОбласть(Ресурс, Массив)
	
	Найден = Истина;
	
	Для Каждого Элемент Из Массив Цикл
		
		Если Прав(СокрЛП(Ресурс), СтрДлина(Элемент)) = Элемент Тогда
			ПредСимвол = Сред(СокрЛП(Ресурс), СтрДлина(СокрЛП(Ресурс)) - СтрДлина(Элемент), 1);
			
			Если ПредСимвол = " " Тогда
				Возврат СокрЛП(Лев(СокрЛП(Ресурс), СтрДлина(СокрЛП(Ресурс)) - СтрДлина(Элемент)));
			ИначеЕсли ПредСимвол = "." Тогда
				Возврат СокрЛП(Лев(СокрЛП(Ресурс), СтрДлина(СокрЛП(Ресурс)) - СтрДлина(Элемент) - 1));
			КонецЕсли;
		ИначеЕсли Лев(СокрЛП(Ресурс), СтрДлина(Элемент)) = Элемент Тогда
			СледСимвол = Сред(СокрЛП(Ресурс), СтрДлина(Элемент) + 1, 1);
			
			Если СледСимвол = " " Тогда
				Возврат СокрЛП(Сред(СокрЛП(Ресурс), СтрДлина(Элемент) + 1));
			ИначеЕсли СледСимвол = "." Тогда
				Возврат СокрЛП(Сред(СокрЛП(Ресурс), СтрДлина(Элемент) + 2));
			КонецЕсли;
		Иначе
			
			Найден = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Найден = Ложь Тогда
		Возврат Ресурс;
	КонецЕсли;
	
КонецФункции // НормализацияПолейАдресаТверскаяОбласть()

// Получает таблицу с данными о льготниках для дальнейшего поиска сведений о начисленных льготах.
//
&НаСервере
Функция ПолучитьТаблицуДанныхИзФайла(ФайлДБФ)
	
	// Нужна ТаблицаЗначений для перебора колонок.
	ТаблицаВыгрузкиКопия = РеквизитФормыВЗначение("ТаблицаВыгрузки");
	
	// Заполнение таблицы данных из файла.
	ТаблицаДанныхИзФайла = Новый ТаблицаЗначений;
	
	ТаблицаДанныхИзФайла.Колонки.Добавить("PKU",     Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(11)));
	ТаблицаДанныхИзФайла.Колонки.Добавить("PY",      Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(3)));
	ТаблицаДанныхИзФайла.Колонки.Добавить("NKAR",    Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(9)));
	ТаблицаДанныхИзФайла.Колонки.Добавить("FAMIL",   Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(25)));
	ТаблицаДанныхИзФайла.Колонки.Добавить("IMJA",    Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(20)));
	ТаблицаДанныхИзФайла.Колонки.Добавить("OTCH",    Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(25)));
	ТаблицаДанныхИзФайла.Колонки.Добавить("DROG",    Новый ОписаниеТипов("Дата",   Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаДанныхИзФайла.Колонки.Добавить("NNASP",   Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(30)));
	ТаблицаДанныхИзФайла.Колонки.Добавить("NYLIC",   Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(36)));
	ТаблицаДанныхИзФайла.Колонки.Добавить("NDOM",    Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(7)));
	ТаблицаДанныхИзФайла.Колонки.Добавить("NKORP",   Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(3)));
	ТаблицаДанныхИзФайла.Колонки.Добавить("NKW",     Новый ОписаниеТипов("Число",  Новый КвалификаторыЧисла(3, 0)));
	ТаблицаДанныхИзФайла.Колонки.Добавить("DS1",     Новый ОписаниеТипов("Число",  Новый КвалификаторыЧисла(3, 0)));
	ТаблицаДанныхИзФайла.Колонки.Добавить("DS2",     Новый ОписаниеТипов("Число",  Новый КвалификаторыЧисла(3, 0)));
	ТаблицаДанныхИзФайла.Колонки.Добавить("LCHET",   Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(24)));
	ТаблицаДанныхИзФайла.Колонки.Добавить("NISU_OSN",Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(50)));
	ТаблицаДанныхИзФайла.Колонки.Добавить("DATAVOZN",Новый ОписаниеТипов("Дата",   Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаДанныхИзФайла.Колонки.Добавить("SROKDO",  Новый ОписаниеТипов("Дата",   Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаДанныхИзФайла.Колонки.Добавить("KODL",    Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(14)));
	ТаблицаДанныхИзФайла.Колонки.Добавить("NKOD_LGT",Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(50)));
	ТаблицаДанныхИзФайла.Колонки.Добавить("WELL",    Новый ОписаниеТипов("Число",  Новый КвалификаторыЧисла(10, 2)));
	ТаблицаДанныхИзФайла.Колонки.Добавить("SUML",    Новый ОписаниеТипов("Число",  Новый КвалификаторыЧисла(10, 2)));
	ТаблицаДанныхИзФайла.Колонки.Добавить("DATPRL",  Новый ОписаниеТипов("Дата",   Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаДанныхИзФайла.Колонки.Добавить("SROKS",   Новый ОписаниеТипов("Дата",   Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаДанныхИзФайла.Колонки.Добавить("SROKPO",  Новый ОписаниеТипов("Дата",   Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаДанныхИзФайла.Колонки.Добавить("KCHLS",   Новый ОписаниеТипов("Число",  Новый КвалификаторыЧисла(2, 0)));
	
	ТаблицаДанныхИзФайла.Колонки.Добавить("Квартира",          Новый ОписаниеТипов("Число",  Новый КвалификаторыЧисла(15, 0)));
	ТаблицаДанныхИзФайла.Колонки.Добавить("Услуга",            Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
	ТаблицаДанныхИзФайла.Колонки.Добавить("ЛьготнаяКатегория", Новый ОписаниеТипов("СправочникСсылка.КВП_ЛьготныеКатегории"));
	ТаблицаДанныхИзФайла.Колонки.Добавить("УникальнаяСтрока",  Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)));
	ТаблицаДанныхИзФайла.Колонки.Добавить("Позиция",           Новый ОписаниеТипов("Число",  Новый КвалификаторыЧисла(2, 0)));
	
	Попытка
		
		МассивСокрНасПункт = СформироватьМассивСокращениеПоВиду(4);
		МассивСокрУлицы    = СформироватьМассивСокращениеПоВиду(5);
		
		Пока НЕ ФайлДБФ.ВКонце() Цикл
			
#Область ЗагрузкаДанныхИзФайлаНаФорму
			
			// Заполнение полей ТЗ "ТаблицаВыгрузки" согласно DBF-файлу.
			
			СтрокаТаблицыВыгрузки = ТаблицаВыгрузки.Добавить();
			
			Для Каждого Колонка Из ТаблицаВыгрузкиКопия.Колонки Цикл
				
				Попытка
					СтрокаТаблицыВыгрузки[Колонка.Имя] = ?(Строка(Колонка.ТипЗначения) = "Строка", СокрЛП(ФайлДБФ[Колонка.Имя]), ФайлДБФ[Колонка.Имя]);
				Исключение
				КонецПопытки;
				
			КонецЦикла;
			
#КонецОбласти
			
			Сч = 1;
			Пока Сч <= КоличествоУслуг Цикл
				
				НоваяЗапись = ТаблицаДанныхИзФайла.Добавить();
				
				НоваяЗапись["PKU"]      = СокрЛП(ФайлДБФ["PKU"]);
				НоваяЗапись["PY"]       = СокрЛП(ФайлДБФ["PY"]);
				НоваяЗапись["NKAR"]     = СокрЛП(ФайлДБФ["NKAR"]);
				НоваяЗапись["FAMIL"]    = СокрЛП(ФайлДБФ["FAMIL"]);
				НоваяЗапись["IMJA"]     = СокрЛП(ФайлДБФ["IMJA"]);
				НоваяЗапись["OTCH"]     = СокрЛП(ФайлДБФ["OTCH"]);
				НоваяЗапись["DROG"]     = ФайлДБФ["DROG"];
				НоваяЗапись["NNASP"]    = ВРег(НормализацияПолейАдресаТверскаяОбласть(СокрЛП(ФайлДБФ["NNASP"]), МассивСокрНасПункт));
				НоваяЗапись["NYLIC"]    = ВРег(НормализацияПолейАдресаТверскаяОбласть(СокрЛП(ФайлДБФ["NYLIC"]), МассивСокрУлицы));
				НоваяЗапись["NDOM"]     = СокрЛП(ФайлДБФ["NDOM"]);
				НоваяЗапись["NKORP"]    = СокрЛП(ФайлДБФ["NKORP"]);
				НоваяЗапись["NKW"]      = Число(ФайлДБФ["NKW"]);
				НоваяЗапись["DS1"]      = СокрЛП(ФайлДБФ["DS1"]);
				НоваяЗапись["DS2"]      = СокрЛП(ФайлДБФ["DS2"]);
				НоваяЗапись["LCHET"]    = СокрЛП(ФайлДБФ["LCHET"]);
				НоваяЗапись["NISU_OSN"] = СокрЛП(ФайлДБФ["NISU_OSN" + Сч]);
				НоваяЗапись["DATAVOZN"] = ФайлДБФ["DATAVOZN" + Сч];
				НоваяЗапись["SROKDO"]   = ФайлДБФ["SROKDO" + Сч];
				НоваяЗапись["KODL"]     = СокрЛП(ФайлДБФ["KODL" + Сч]);
				НоваяЗапись["NKOD_LGT"] = СокрЛП(ФайлДБФ["NKOD_LGT" + Сч]);
				НоваяЗапись["WELL"]     = ФайлДБФ["WELL" + Сч];
				НоваяЗапись["SUML"]     = ФайлДБФ["SUML" + Сч];
				НоваяЗапись["DATPRL"]   = ФайлДБФ["DATPRL" + Сч];
				НоваяЗапись["SROKS"]    = ФайлДБФ["SROKS" + Сч];
				НоваяЗапись["SROKPO"]   = ФайлДБФ["SROKPO" + Сч];
				НоваяЗапись["KCHLS"]    = ФайлДБФ["KCHLS" + Сч];
				НоваяЗапись["Позиция"]  = Сч;
				
				Попытка
					НомерКвартиры = Число(СокрЛП(ФайлДБФ["NKW"]));
				Исключение
					НомерКвартиры = 0;
				КонецПопытки;
				НоваяЗапись["Квартира"] = НомерКвартиры;
				
				Если Объект.ТверскаяОбласть_ЛьготныеКатегории.Количество() > 0 Тогда
					
					СтрокаЛК = Объект.ТверскаяОбласть_ЛьготныеКатегории.НайтиСтроки(Новый Структура("НаименованиеЛКВОСЗН", СокрЛП(ФайлДБФ["NISU_OSN" + Сч])));
					Если СтрокаЛК.Количество() > 0 Тогда
						НоваяЗапись["ЛьготнаяКатегория"] = СтрокаЛК[0].ЛьготнаяКатегория;
					КонецЕсли;
					
				КонецЕсли;
				
				НаименованиеУслуги = СокрЛП(ФайлДБФ["NKOD_LGT" + Сч]);
				Если НЕ ПустаяСтрока(НаименованиеУслуги) Тогда
					НайденныеУслуги = Объект.ТверскаяОбласть_Услуги.НайтиСтроки(Новый Структура("УслугаВОСЗН", НаименованиеУслуги));
					
					ВсегоУслуг = НайденныеУслуги.Количество();
					
					Если Не ВсегоУслуг = 0 Тогда
						НоваяЗапись["Услуга"] = НайденныеУслуги.Получить(0).УслугаВБазе;
						
						Если ВсегоУслуг > 1 Тогда
							Для СчетчикУслуг = 1 По ВсегоУслуг - 1 Цикл
								ДополнительнаяЗапись = ТаблицаДанныхИзФайла.Добавить();
								ЗаполнитьЗначенияСвойств(ДополнительнаяЗапись, НоваяЗапись);
								ДополнительнаяЗапись["Услуга"] = НайденныеУслуги.Получить(СчетчикУслуг).УслугаВБазе;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				// В файле обмена у одного клиента в некоторых строках поле "NKAR" не заполнено.
				НоваяЗапись["УникальнаяСтрока"] = СокрЛП(ФайлДБФ["FAMIL"])+ СокрЛП(ФайлДБФ["IMJA"]) + СокрЛП(ФайлДБФ["OTCH"]) 
												+ ФайлДБФ["DROG"] + СокрЛП(ФайлДБФ["NKAR"]);
				
				Сч = Сч + 1;
			КонецЦикла;
			
			ФайлДБФ.Следующая();
		КонецЦикла;
		ФайлДБФ.ЗакрытьФайл();
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Структура файла обмена отличается от той, что содержится в справочной информации к выгрузке! " +
			 + "Выберите корректный файл и выполните повторную загрузку данных.", , "ИмяФайлаЗагрузки", "Объект");
		Возврат ТаблицаДанныхИзФайла;
	КонецПопытки;
	
	Возврат ТаблицаДанныхИзФайла;
	
КонецФункции // ПолучитьТаблицуДанныхИзФайла()

// Выводит сообщение с неидентифицированными льготниками,
// заполняет поле "ЛицевоСчет" в таблице "ТаблицаВыгрузки".
//
&НаСервере
Процедура ВыводНеидентифицированныхЛьготников(ИдентифицированныеЛьготники)
	
	ИдентифицированныеЛьготникиКопия = РеквизитФормыВЗначение("ИдентифицированныеЛьготники");
	
	// Заполнение поля "ЛицевойСчет".
	Для Каждого Льготник Из ТаблицаВыгрузки Цикл
		
		// В файле обмена у одного клиента в некоторых строках поле "NKAR" не заполнено.
		УникальнаяСтрока = Льготник["FAMIL"]+ Льготник["IMJA"] + Льготник["OTCH"] + Льготник["DROG"] + Льготник["NKAR"];
		
		НайденнаяСтрока = ИдентифицированныеЛьготникиКопия.Найти(УникальнаяСтрока);
		
		Если Не НайденнаяСтрока = Неопределено Тогда
			
			Льготник.ЛицевойСчет = НайденнаяСтрока.ЛицевойСчет;
			
		КонецЕсли
		
	КонецЦикла;
	
	// Вывод неидентифицированных льготников.
	Отбор = Новый Структура("ЛицевойСчет");
	Отбор.ЛицевойСчет = Справочники.КВП_ЛицевыеСчета.ПустаяСсылка();
	
	НеидентифицированныеЛьготники = ТаблицаВыгрузки.НайтиСтроки(Отбор);
	
	Для Каждого Льготник Из НеидентифицированныеЛьготники Цикл
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Льготник """ + Льготник.FAMIL + " " + Льготник.IMJA + " " + Льготник.OTCH + """ в базе не идентифицирован! "
			+ "Номер карточки учета: """ + Льготник["NKAR"] + """");
	КонецЦикла;
	
КонецПроцедуры // ВыводНеидентифицированныхЛьготников()

// Актуализирует таблицу "ИдентифицированныеЛьготники" на основании таблицы "ТаблицаВыгрузки"
//
&НаСервере
Процедура АктуализироватьТаблицуИдентифицированныхЛьготников()
	
	ИдентифицированныеЛьготники.Очистить();
	
	ТаблицаВыгрузкиКопия = РеквизитФормыВЗначение("ТаблицаВыгрузки");
	ТаблицаВыгрузкиКопия.Очистить();
	
	// 1. Отбор идентифицированных льготников.
	Для Каждого Льготник Из ТаблицаВыгрузки Цикл
		
		Если Не Льготник.ЛицевойСчет = Справочники.КВП_ЛицевыеСчета.ПустаяСсылка() Тогда
			
			НоваяЗапись = ТаблицаВыгрузкиКопия.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, Льготник);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// 2. Актуализация таблицы "ИдентифицированныеЛьготники".
	
	Для Каждого Льготник Из ТаблицаВыгрузкиКопия Цикл
		
		Сч = 1;
		Пока Сч <= КоличествоУслуг Цикл
			
			НоваяЗапись = ИдентифицированныеЛьготники.Добавить();
			
			НоваяЗапись["ЛицевойСчет"] = Льготник.ЛицевойСчет;
			НоваяЗапись["Позиция"]     = Сч;
			
			НаименованиеУслуги = Льготник["NKOD_LGT" + Сч];
			Если НЕ ПустаяСтрока(НаименованиеУслуги) Тогда
				
				НайденныеУслуги = Объект.ТверскаяОбласть_Услуги.НайтиСтроки(Новый Структура("УслугаВОСЗН", НаименованиеУслуги));
				
				ВсегоУслуг = НайденныеУслуги.Количество();
				
				Если Не ВсегоУслуг = 0 Тогда
					НоваяЗапись["Услуга"] = НайденныеУслуги.Получить(0).УслугаВБазе;
					
					Если ВсегоУслуг > 1 Тогда
						Для СчетчикУслуг = 1 По ВсегоУслуг - 1 Цикл
							ДополнительнаяЗапись = ИдентифицированныеЛьготники.Добавить();
							ЗаполнитьЗначенияСвойств(ДополнительнаяЗапись, НоваяЗапись);
							ДополнительнаяЗапись["Услуга"] = НайденныеУслуги.Получить(СчетчикУслуг).УслугаВБазе;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			Сч = Сч + 1;
			
		КонецЦикла;
		
	КонецЦикла;
	
Конецпроцедуры // АктуализироватьТаблицуИдентифицированныхЛьготников()

// Сворачивает строки с одинаковым значением колонки "Позиция".
// Пояснение: строки с одинаковым значением колонки "Позиция" содержат данные для одной услуги ОСЗН.
//
&НаСервере
Функция СвернутьСтрокиСПовторяющейсяПозицией(СтрокиЛьготника)
	
	врТЗ = Новый ТаблицаЗначений;
	
	врТЗ.Колонки.Добавить("Позиция", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2, 0)));;
	врТЗ.Колонки.Добавить("WELL",    Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 2)));
	врТЗ.Колонки.Добавить("SUML",    Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 2)));
	
	Для Каждого Строка Из СтрокиЛьготника Цикл
		
		НоваяЗапись = врТЗ.Добавить();
		
		НоваяЗапись.Позиция = Строка.Позиция;
		НоваяЗапись.WELL    = Строка.WELL;
		НоваяЗапись.SUML    = Строка.SUML;
		
	КонецЦикла;
	
	врТЗ.Свернуть("Позиция, WELL", "SUML");
	
	Возврат врТЗ;
	
КонецФункции // СвернутьСтрокиСПовторяющейсяПозицией()

#КонецОбласти // ЗагрузкаИИдентификация