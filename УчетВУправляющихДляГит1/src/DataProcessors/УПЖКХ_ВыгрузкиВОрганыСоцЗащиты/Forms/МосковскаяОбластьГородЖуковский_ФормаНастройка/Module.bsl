
&НаКлиенте
Перем ПредыдущаяУслуга;        // Используется при перевыборе услуги в базе.

&НаКлиенте
Перем БылаУдаленаПустаяСтрока; // Используется при удалении пустых строк. Истина - строка удаляется программно, т.к. она пустая при окончании редактирования.

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Получаем настройки из хранилища.
	Если Параметры.Свойство("АдресНастроекВХранилище") И Параметры.АдресНастроекВХранилище <> Неопределено Тогда
		
		СтруктураПараметров = ПолучитьИзВременногоХранилища(Параметры.АдресНастроекВХранилище);
		Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
			
			врТаблицаУслуг = Неопределено;
			СтруктураПараметров.Свойство("МосковскаяОбластьЖуковский_СоответствиеВидовУслуг", врТаблицаУслуг);
			Если врТаблицаУслуг <> Неопределено И ТипЗнч(врТаблицаУслуг) = Тип("ТаблицаЗначений") Тогда
				Объект.МосковскаяОбластьЖуковский_СоответствиеВидовУслуг.Загрузить(врТаблицаУслуг);
			КонецЕсли;
			
			врТаблицаБлагоустройств = Новый ТаблицаЗначений;
			СтруктураПараметров.Свойство("МосковскаяОбластьЖуковский_СоответствиеВидовБлагоустройств", врТаблицаБлагоустройств);
			Если врТаблицаБлагоустройств <> Неопределено И ТипЗнч(врТаблицаБлагоустройств) = Тип("ТаблицаЗначений") Тогда
				Объект.МосковскаяОбластьЖуковский_СоответствиеВидовБлагоустройств.Загрузить(врТаблицаБлагоустройств);
			Иначе
				ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
				ОбработкаОбъект.ЗаполнитьТаблицуБлагоустройствЖуковский();
				ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
			КонецЕсли;
			
			СтруктураПараметров.Свойство("ВыводЛицевыхСчетов", Объект.ВыводЛицевыхСчетов);
			Если Объект.ВыводЛицевыхСчетов = Неопределено Или ПустаяСтрока(Объект.ВыводЛицевыхСчетов) Тогда
				// По умолчанию.
				Объект.ВыводЛицевыхСчетов = "ЦифрыНаименования";
			КонецЕсли;
			
			СтруктураПараметров.Свойство("ВыводитьЛьготников", Объект.ВыводитьЛьготников);
			Если Объект.ВыводитьЛьготников = Неопределено Тогда
				// По умолчанию.
				Объект.ВыводитьЛьготников = Ложь;
			КонецЕсли;
			
			СтруктураПараметров.Свойство("СпособРасчетаТарифа", Объект.СпособРасчетаТарифа);
			Если Объект.СпособРасчетаТарифа = Неопределено Или ПустаяСтрока(Объект.СпособРасчетаТарифа) Тогда
				// По умолчанию.
				Объект.СпособРасчетаТарифа = "максимальный";
			КонецЕсли;
			
			СтруктураПараметров.Свойство("ПрефиксВыгружаемыхТаблиц",        ПрефиксВыгружаемыхТаблиц);
			СтруктураПараметров.Свойство("АдресСтруктурыВыгружаемыхТаблиц", АдресСтруктурыВыгружаемыхТаблиц);
			
		КонецЕсли;
		
	Иначе
		
		// По умолчанию.
		Объект.ВыводЛицевыхСчетов  = "ЦифрыНаименования";
		Объект.ВыводитьЛьготников  = Ложь;
		Объект.СпособРасчетаТарифа = "максимальный";
		
		ТаблицаБлагоустройствЗаполнитьПоУмолчаниюНаСервере();
		
	КонецЕсли;
	
	ТаблицаНастроекЗаполнитьПоУмолчаниюНаСервере();
	
	ПрочитатьДеревоИзСтруктурыВыгружаемыхТаблиц();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриОткрытии(Отказ)
	
	УстановитьКартинкуИзмененныхВетвейДерева();
	
КонецПроцедуры // ПриОткрытии()

#КонецОбласти

#Область ОбработчикиКомандФормы

////////////////////////////////////////
// Команда "Инструкция"

&НаКлиенте
// Обработчик команды "КомандаСправочнаяИнформация".
//
Процедура КомандаСправочнаяИнформация(Команда)
	
	ОткрытьСправкуФормы();
	
КонецПроцедуры // КомандаСправочнаяИнформация()

////////////////////////////////////////
// Команда "Сохранить и закрыть"

&НаКлиенте
// Обработчик команды "КомандаСохранить".
//
Процедура КомандаСохранить(Команда)
	
	АдресНастроекВХранилище = ПоместитьНастройкиВХранилище();
	Закрыть(АдресНастроекВХранилище);
	
КонецПроцедуры // КомандаСохранить()

&НаСервере
// Помещает таблицу услуг во временное хранилище.
//
// Возвращаемое значение:
//  Строка - адрес настроек во временном хранилище.
//
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("МосковскаяОбластьЖуковский_СоответствиеВидовУслуг",          Объект.МосковскаяОбластьЖуковский_СоответствиеВидовУслуг.Выгрузить());
	СтруктураПараметров.Вставить("МосковскаяОбластьЖуковский_СоответствиеВидовБлагоустройств", Объект.МосковскаяОбластьЖуковский_СоответствиеВидовБлагоустройств.Выгрузить());
	
	СтруктураПараметров.Вставить("ВыводЛицевыхСчетов",  Объект.ВыводЛицевыхСчетов);
	СтруктураПараметров.Вставить("ВыводитьЛьготников",  Объект.ВыводитьЛьготников);
	СтруктураПараметров.Вставить("СпособРасчетаТарифа", Объект.СпособРасчетаТарифа);
	
	СформироватьСтруктуруВыгружаемыхТаблицИзДерева();
	СтруктураПараметров.Вставить("АдресСтруктурыВыгружаемыхТаблиц", АдресСтруктурыВыгружаемыхТаблиц);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураПараметров, Новый УникальныйИдентификатор);
	
КонецФункции // ПоместитьНастройкиВХранилище()

#КонецОбласти

#Область МеханизмФормированияПользовательскихИменПолейВыгружаемыхФайлов

&НаСервере
// Формирует дерево, соответствующее структуре соответствий имен полей выгружаемых таблиц.
// При этом, узел верхнего уровня - это имя табличной части, а узлы нижнего уровня соответствия имен полей.
//
// Параметры:
//  ПоУмолчанию - Булево - признак того, что в колонку "Имя поля выгружаемого файла"
//                         загружаются не пользовательские имена полей, а имена полей метаданных.
//
Процедура ПрочитатьДеревоИзСтруктурыВыгружаемыхТаблиц(ПоУмолчанию = Ложь)
	
	СтруктураВыгружаемыхТаблиц = ПолучитьИзВременногоХранилища(АдресСтруктурыВыгружаемыхТаблиц);
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоСоответствияПолей");
	
	Для Каждого Структура Из СтруктураВыгружаемыхТаблиц Цикл
		
		СтрокаТаблицы = ДеревоЗначений.Строки.Добавить();
		
		СтрокаТаблицы.ДанныеТаблицы = Структура.Ключ;
		
		// Условное оформление.
		ТабличнаяЧасть = ОбработкаОбъект.Метаданные().ТабличныеЧасти.Найти(Структура.Ключ);
		Если ТабличнаяЧасть <> Неопределено Тогда
			УстановитьУсловноеОформлениеДанныхТаблиц("ДеревоСоответствияПолей.ДанныеТаблицы", Структура.Ключ, ТабличнаяЧасть.Синоним, "ДеревоСоответствияПолейДанныеТаблицы");
		КонецЕсли;
		
		Для Каждого Соответствие Из Структура.Значение Цикл
			
			СтрокаСоответствия = СтрокаТаблицы.Строки.Добавить();
			
			СтрокаСоответствия.ДанныеТаблицы            = Соответствие.Ключ;
			СтрокаСоответствия.ИмяПоляВыгружаемогоФайла = ?(ПоУмолчанию, Соответствие.Ключ, Соответствие.Значение);
			
			// Устанавливаем флаги условного оформления.
			СтрокаСоответствия.ФлагИзменениеИмени = ?(ПоУмолчанию, Ложь, ?(Соответствие.Ключ <> Соответствие.Значение, Истина, Ложь));
			СтрокаСоответствия.ФлагПолеНеВыводить = ?(ПоУмолчанию, Ложь, ?(ПустаяСтрока(Соответствие.Значение), Истина, Ложь));
			
			// Условное оформление.
			Если ТабличнаяЧасть <> Неопределено Тогда
				
				РеквизитТабличнойЧасти = ТабличнаяЧасть.Реквизиты.Найти(Соответствие.Ключ);
				Если РеквизитТабличнойЧасти <> Неопределено Тогда
					УстановитьУсловноеОформлениеДанныхТаблиц("ДеревоСоответствияПолей.ДанныеТаблицы", Соответствие.Ключ, РеквизитТабличнойЧасти.Синоним, "ДеревоСоответствияПолейДанныеТаблицы");
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаТаблицы.Строки.Сортировать("ДанныеТаблицы");
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоЗначений, "ДеревоСоответствияПолей");
	
КонецПроцедуры // ПрочитатьДеревоИзСтруктурыВыгружаемыхТаблиц()

&НаСервере
// Позволяет средствами условного оформления выводить синонимы отображаемых данных табличных частей выгрузки.
//
// Параметры:
//  ИмяПоля                          - Строка - имя поля, по сравнению со значением которого
//                                              будет подставляться синоним метаданных.
//  ПравоеЗначениеСравненияИмениПоля - Строка - имя объекта из метаданных.
//  УстанавливаемыйСиноним           - Строка - синоним, полученный из метаданных.
//  ПолеДляОформления                - Строка - имя поля оформляемого элемента формы.
//
Процедура УстановитьУсловноеОформлениеДанныхТаблиц(ИмяПоля, ПравоеЗначениеСравненияИмениПоля, УстанавливаемыйСиноним, ПолеДляОформления)
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	// 1. Создаем условие отбора
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяПоля);
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ПравоеЗначениеСравненияИмениПоля;
	ЭлементОтбора.Использование  = Истина;
	
	// 2. Установка значения элемента условия отбора.
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", УстанавливаемыйСиноним);
	
	// 3. Создаем поля оформления
	ПолеОформления = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных(ПолеДляОформления);
	ПолеОформления.Использование = Истина;
	
КонецПроцедуры // УстановитьУсловноеОформлениеДанныхТаблиц()

&НаКлиенте
// Механизм отметки картинкой веток с измененными полями.
//
Процедура УстановитьКартинкуИзмененныхВетвейДерева()
	
	КоллекцияЭлементовДереваВерхнегоУровня = ДеревоСоответствияПолей.ПолучитьЭлементы();
	
	Для Каждого ЭлементДереваВерхнегоУровня Из КоллекцияЭлементовДереваВерхнегоУровня Цикл
		
		КоллекцияЭлементовДереваНижнегоУровня = ЭлементДереваВерхнегоУровня.ПолучитьЭлементы();
		Для Каждого ЭлементДереваНижнегоУровня Из КоллекцияЭлементовДереваНижнегоУровня Цикл
			
			Если ЭлементДереваНижнегоУровня.ФлагИзменениеИмени Тогда
				
				// Если хоть одно поле изменено, то устанавливаем картинку.
				ЭлементДереваВерхнегоУровня.Картинка = БиблиотекаКартинок.РедактироватьМакет;
				Прервать;
				
			КонецЕсли;
			
			// Если изменений в полях не найдено, то картинку не выводим.
			ЭлементДереваВерхнегоУровня.Картинка = Новый Картинка;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьКартинкуИзмененныхВетвейДерева()

&НаСервере
// Включает/выключает отображение картинок таблицы формы "ДеревоСоответствияПолей" в зависимости от флагов модифицированности.
//
Процедура СформироватьСтруктуруВыгружаемыхТаблицИзДерева()
	
	ДеревоЗначений = РеквизитФормыВЗначение("ДеревоСоответствияПолей");
	
	СтруктураВыгружаемыхТаблиц = Новый Структура;
	
	Для Каждого СтрокаТаблицы Из ДеревоЗначений.Строки Цикл
		
		СоответствиеПолей = Новый Соответствие;
		
		Для Каждого СтрокаСоответствия Из СтрокаТаблицы.Строки Цикл
			
			СоответствиеПолей.Вставить(СтрокаСоответствия.ДанныеТаблицы, СокрЛП(СтрокаСоответствия.ИмяПоляВыгружаемогоФайла));
			
		КонецЦикла;
		
		СтруктураВыгружаемыхТаблиц.Вставить(СтрокаТаблицы.ДанныеТаблицы, СоответствиеПолей);
		
	КонецЦикла;
	
	АдресСтруктурыВыгружаемыхТаблиц = ПоместитьВоВременноеХранилище(СтруктураВыгружаемыхТаблиц, Новый УникальныйИдентификатор);
	
КонецПроцедуры // СформироватьСтруктуруВыгружаемыхТаблицИзДерева()

#КонецОбласти // МеханизмФормированияПользовательскихИменПолейВыгружаемыхФайлов

#Область ОбработчикиСобытийЭлементовФормы_ГруппаСоответствиеПолейВыгружаемыхФайлов

&НаКлиенте
// Обработчик команды "КомандаДеревоСоответствияПолейЗаполнитьПоУмолчанию".
//
Процедура КомандаДеревоСоответствияПолейЗаполнитьПоУмолчанию(Команда)
	
	ДеревоСоответствияПолей.ПолучитьЭлементы().Очистить();
	ПрочитатьДеревоИзСтруктурыВыгружаемыхТаблиц(Истина);
	
КонецПроцедуры // КомандаДеревоСоответствияПолейЗаполнитьПоУмолчанию()

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" табличного поля "ДеревоСоответствияПолей".
//
Процедура ДеревоСоответствияПолейПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Новые строки дерева не удаляем.
	// Состав строк фиксирован и определяется составом метаданных выгружаемых табличных частей.
	Отказ = Истина;
	
КонецПроцедуры // ДеревоСоответствияПолейПередНачаломДобавления()

&НаКлиенте
// Обработчик события "ПередУдалением" табличного поля "ДеревоСоответствияПолей".
//
Процедура ДеревоСоответствияПолейПередУдалением(Элемент, Отказ)
	
	// Строки дерева не удаляем.
	// Для того, чтобы не включать поле в выгружаемый файл необходимо оставить
	// пустым соответствующее поле "Имя поля выгружаемого файла".
	Отказ = Истина;
	
КонецПроцедуры // ДеревоСоответствияПолейПередУдалением()

&НаКлиенте
// Обработчик события "ПередОкончаниемРедактирования" табличного поля "ДеревоСоответствияПолей".
//
Процедура ДеревоСоответствияПолейПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	// Условие того, что мы находимся в ветке таблицы.
	Если Найти(Элемент.ТекущиеДанные.ДанныеТаблицы, ПрефиксВыгружаемыхТаблиц) = 0 Тогда
		
		// Флаги условного оформления.
		Элемент.ТекущиеДанные.ФлагИзменениеИмени = ?(Элемент.ТекущиеДанные.ДанныеТаблицы <> Элемент.ТекущиеДанные.ИмяПоляВыгружаемогоФайла, Истина, Ложь);
		Элемент.ТекущиеДанные.ФлагПолеНеВыводить = ?(ПустаяСтрока(Элемент.ТекущиеДанные.ИмяПоляВыгружаемогоФайла), Истина, Ложь);
		
		УстановитьКартинкуИзмененныхВетвейДерева();
		
	КонецЕсли;
	
КонецПроцедуры // ДеревоСоответствияПолейПередОкончаниемРедактирования()

#КонецОбласти // ОбработчикиСобытийЭлементовФормы_ГруппаСоответствиеПолейВыгружаемыхФайлов

#Область ОбработчикиСобытийЭлементовФормы_ГруппаСоответствияВидовБлагоустройств

////////////////////////////////////////
// Команда "По умолчанию"

&НаКлиенте
// Обработчик команды "КомандаТаблицаБлагоустройствЗаполнитьПоУмолчанию".
//
Процедура КомандаТаблицаБлагоустройствЗаполнитьПоУмолчанию(Команда)
	
	Объект.МосковскаяОбластьЖуковский_СоответствиеВидовБлагоустройств.Очистить();
	ТаблицаБлагоустройствЗаполнитьПоУмолчаниюНаСервере();
	
КонецПроцедуры // КомандаТаблицаБлагоустройствЗаполнитьПоУмолчанию()

&НаСервере
// Обработчик команды "ТаблицаБлагоустройствЗаполнитьПоУмолчанию" на сервере.
//
Процедура ТаблицаБлагоустройствЗаполнитьПоУмолчаниюНаСервере()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗаполнитьТаблицуБлагоустройствЖуковский();
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецПроцедуры // ТаблицаБлагоустройствЗаполнитьПоУмолчаниюНаСервере()

////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "ТАБЛИЦА БЛАГОУСТРОЙСТВ"

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" табличного поля "ТаблицаБлагоустройств".
//
Процедура ТаблицаСоответствияБлагоустройствПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Таблицу не редактируем ни в каком виде.
	Отказ = Истина;
	
КонецПроцедуры // ТаблицаСоответствияБлагоустройствПередНачаломДобавления()

&НаКлиенте
// Обработчик события "ПередУдалением" табличного поля "ТаблицаБлагоустройств".
//
Процедура ТаблицаСоответствияБлагоустройствПередУдалением(Элемент, Отказ)
	
	// Таблицу не редактируем ни в каком виде.
	Отказ = Истина;
	
КонецПроцедуры // ТаблицаСоответствияБлагоустройствПередУдалением()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы_ГруппаСоответствиеВидовУслуг

////////////////////////////////////////
// Команда "По умолчанию"

&НаКлиенте
// Обработчик команды "КомандаТаблицаНастроекЗаполнитьПоУмолчанию".
//
Процедура КомандаТаблицаНастроекЗаполнитьПоУмолчанию(Команда)
	
	Если Объект.МосковскаяОбластьЖуковский_СоответствиеВидовУслуг.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаТаблицаНастроекЗаполнитьПоУмолчаниюЗавершение", ЭтаФорма);
		
		ТекстВопроса = "Все установленные соответствия будут очищены. Продолжить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		ТаблицаНастроекЗаполнитьПоУмолчаниюНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры // КомандаТаблицаНастроекЗаполнитьПоУмолчанию()

&НаКлиенте
// Обработчик результата опроса команды "КомандаТаблицаНастроекЗаполнитьПоУмолчанию".
//
Процедура КомандаТаблицаНастроекЗаполнитьПоУмолчаниюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Объект.МосковскаяОбластьЖуковский_СоответствиеВидовУслуг.Очистить();
		
		ТаблицаНастроекЗаполнитьПоУмолчаниюНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры // КомандаТаблицаНастроекЗаполнитьПоУмолчаниюЗавершение()

&НаСервере
// Производит заполнение таблицы видов услуг в ОСЗН.
//
Процедура ТаблицаНастроекЗаполнитьПоУмолчаниюНаСервере()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗаполнитьТаблицуВидовУслугЖуковский();
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецПроцедуры // ТаблицаНастроекЗаполнитьПоУмолчаниюНаСервере()

////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "ТАБЛИЦА НАСТРОЕК"

&НаКлиенте
// Обработчик события "ПриАктивизацииСтроки" табличного поля "ТаблицаНастроек".
//
Процедура ТаблицаНастроекПриАктивизацииСтроки(Элемент)
	
	ТП_ЖКУ_ВБазе.Очистить();
	
	// При активации строки УслугаВОСЗН, загружаем соответствия в УслугаВБазе.
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		
		Отбор = Новый Структура("ВидУслугиВОСЗН", Элемент.ТекущиеДанные.ВидУслугиВОСЗН);
		
		НайденныеСтроки = Объект.МосковскаяОбластьЖуковский_СоответствиеВидовУслуг.НайтиСтроки(Отбор);
		
		Для Каждого Строка Из НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(ТП_ЖКУ_ВБазе.Добавить(), Строка);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ТаблицаНастроекПриАктивизацииСтроки()

&НаКлиенте
// Обработчик события "НачаломДобавления" табличного поля "ТаблицаНастроек".
//
Процедура ТаблицаНастроекНачаломДобавления(Элемент, Отказ, Копирование)
	
	// Таблицу видов услуг не редактируем ни в каком виде.
	Отказ = Истина;
	
КонецПроцедуры // ТаблицаНастроекНачаломДобавления()

&НаКлиенте
// Обработчик события "ПередУдалением" табличного поля "ТаблицаНастроек".
//
Процедура ТаблицаНастроекПередУдалением(Элемент, Отказ)
	
	// Таблицу не редактируем ни в каком виде.
	Отказ = Истина;
	
КонецПроцедуры // ТаблицаНастроекПередУдалением()

&НаКлиенте
// Обработчик события "Очистка" поля "ВидУслугиВОСЗН" табличного поля "ТаблицаНастроек".
//
Процедура ВидУслугиВОСЗНОчистка(Элемент, СтандартнаяОбработка)
	
	// Запрет очищения по "Shift + F4".
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ВидУслугиВОСЗНОчистка()

////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "УСЛУГИ В БАЗЕ"

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" таблицы "Услуги в Базе".
//
Процедура ТП_ЖКУ_ВБазеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Если не выбрана строка в левой колоке или добавление строк копированием.
	Если Элементы.ТаблицаНастроек.ТекущиеДанные = Неопределено Или Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ТП_ЖКУ_ВБазеПередНачаломДобавления()

&НаКлиенте
// Обработчик события "ПередУдалением" таблицы "УслугаВБазе".
//
Процедура ТП_ЖКУ_ВБазеПередУдалением(Элемент, Отказ)
	
	Если БылаУдаленаПустаяСтрока Тогда
		
		БылаУдаленаПустаяСтрока = Ложь;
		Отказ = Истина;
		
	Иначе
		
		СтрокиУдаления = Объект.МосковскаяОбластьЖуковский_СоответствиеВидовУслуг.НайтиСтроки(Новый Структура("УслугаВБазе", Элемент.ТекущиеДанные.УслугаВБазе));
		Для Каждого СтрокаУдаления Из СтрокиУдаления Цикл
			Объект.МосковскаяОбластьЖуковский_СоответствиеВидовУслуг.Удалить(СтрокаУдаления);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ТП_ЖКУ_ВБазеПередУдалением()

&НаКлиенте
// Обработчик события "ПриНачалеРедактирования" таблицы "Услуги в Базе".
//
Процедура ТП_ЖКУ_ВБазеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Не НоваяСтрока Тогда
		ПредыдущаяУслуга = Элемент.ТекущиеДанные.УслугаВБазе;
	Иначе
		Элемент.ТекущиеДанные.Приоритет                            = 1;
		Элемент.ТекущиеДанные.УчитыватьПриРасчетеТарифа            = Истина;
		Элемент.ТекущиеДанные.ИспользоватьНормировочныйКоэффициент = Ложь;
		Элемент.ТекущиеДанные.ТипУслуги                            = "Индивидуальная и общедомовая";
	КонецЕсли;
	
КонецПроцедуры // ТП_ЖКУ_ВБазеПриНачалеРедактирования()

&НаКлиенте
// Обработчик события "ПередОкончаниемРедактирования" таблицы "ВидУслугиВБазе".
//
Процедура ТП_ЖКУ_ВБазеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Элемент.ТекущиеДанные.УслугаВБазе.Пустая() Тогда
		
		// Если услуга не была выбрана - удаляем пустую строчку.
		ТП_ЖКУ_ВБазе.Удалить(ТП_ЖКУ_ВБазе.Индекс(Элемент.ТекущиеДанные));
		
		// Если данная строка не новая, а редактируемая.
		Если Не НоваяСтрока Тогда
			
			СтрокиУдаления = Объект.МосковскаяОбластьЖуковский_СоответствиеВидовУслуг.НайтиСтроки(Новый Структура("УслугаВБазе", ПредыдущаяУслуга));
			Для Каждого СтрокаУдаления Из СтрокиУдаления Цикл
				Объект.МосковскаяОбластьЖуковский_СоответствиеВидовУслуг.Удалить(СтрокаУдаления);
			КонецЦикла;
			
		КонецЕсли;
		
		БылаУдаленаПустаяСтрока = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ТП_ЖКУ_ВБазеПередОкончаниемРедактирования()

&НаКлиенте
// Обработчик события "ПриОкончанииРедактирования" таблицы "Услуги в Базе".
//
Процедура ТП_ЖКУ_ВБазеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		
		Если НоваяСтрока Тогда
			
			СтрокаСоответствия = Объект.МосковскаяОбластьЖуковский_СоответствиеВидовУслуг.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаСоответствия, Элемент.ТекущиеДанные);
			ЗаполнитьЗначенияСвойств(СтрокаСоответствия, Элементы.ТаблицаНастроек.ТекущиеДанные);
			
		Иначе
			
			СтрокиСоответствия = Объект.МосковскаяОбластьЖуковский_СоответствиеВидовУслуг.НайтиСтроки(Новый Структура("ВидУслугиВОСЗН,УслугаВБазе", Элементы.ТаблицаНастроек.ТекущиеДанные.ВидУслугиВОСЗН, ПредыдущаяУслуга));
			Если СтрокиСоответствия.Количество() = 1 Тогда
				ЗаполнитьЗначенияСвойств(СтрокиСоответствия[0], Элемент.ТекущиеДанные);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ТП_ЖКУ_ВБазеПриОкончанииРедактирования()

&НаКлиенте
// Обработчик события "ПриОкончанииРедактирования" поля "УслугаВБазе" таблицы "Услуги в Базе".
//
Процедура ТП_ЖКУ_ВБазеУслугаВБазеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Устанавливаем отбор на справочник "Услуги".
	СтандартнаяОбработка = Ложь;
	
	// Список уже выбранных услуг по данной услуге в ОСЗН.
	СписокВыбранныхУслуг = Новый СписокЗначений;
	Для Каждого Строка Из Объект.МосковскаяОбластьЖуковский_СоответствиеВидовУслуг Цикл
		СписокВыбранныхУслуг.Добавить(Строка.УслугаВБазе);
	КонецЦикла;
	
	Форма = ПолучитьФорму("Справочник.КВП_Услуги.ФормаВыбора", Новый Структура("ТекущаяСтрока", Элементы.ТП_ЖКУ_ВБазе.ТекущиеДанные.УслугаВБазе), Элемент);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Форма.Список.КомпоновщикНастроек.Настройки.Отбор, "Ссылка", СписокВыбранныхУслуг,
															ВидСравненияКомпоновкиДанных.НеВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
	Форма.Открыть();
	
КонецПроцедуры // ТП_ЖКУ_ВБазеУслугаВБазеНачалоВыбора()

#КонецОбласти

#Область ОпределениеПеременныхМодуля

ПредыдущаяУслуга        = ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка");
БылаУдаленаПустаяСтрока = Ложь;

#КонецОбласти


