//////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура-обработчик события "ПриСозданииНаСервере" формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
	ТекРабДата = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	Объект.Период = ТекРабДата;
	
	ВосстановитьНастройки();
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура-обработчик события "ПередЗакрытием" формы.
//
&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки();
	
КонецПроцедуры // ПередЗакрытием()

//////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область Период

// Обработчик события "ПриИзменении" поля "ПериодСтрокой".
//
&НаКлиенте
Процедура ПериодСтрокойПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Модифицированность);
	
КонецПроцедуры // ПериодСтрокойПриИзменении()

// Обработчик события "НачалоВыбора" поля "ПериодСтрокой".
//
&НаКлиенте
Процедура ПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры // ПериодСтрокойНачалоВыбора()

// Обработчик события "Регулирование" поля "ПериодСтрокой".
//
&НаКлиенте
Процедура ПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Направление,
														Модифицированность);
	
КонецПроцедуры // ПериодСтрокойРегулирование()

// Обработчик события "АвтоПодбор" поля "ПериодСтрокой".
//
&НаКлиенте
Процедура ПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодСтрокойАвтоПодбор()

// Обработчик события "ОкончаниеВводаТекста" поля "ПериодСтрокой".
//
&НаКлиенте
Процедура ПериодСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодСтрокойОкончаниеВводаТекста()

#КонецОбласти

#Область РеестрыОСЗН_ЖКУ

// Процедура-обработачик события "НачалоВыбора" поля ввода "РеестрЛСПоЖКУ".
//
&НаКлиенте
Процедура РеестрЛСПоЖКУНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// В зависимости от выбранного формата загружаемого файла, необходимо организовать отбор файлов.
	// Доступны для загрузки файлы 2ух форматов: DBF(0) и XLS(1).
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Если ФорматЗагружаемогоВыгружаемогоФайлаЖКУ = 1 Тогда
		ДиалогВыбораФайла.Фильтр                      = "Файл данных (*.xls)|*.xls";
		ДиалогВыбораФайла.Расширение                  = "xls";
	Иначе
		ДиалогВыбораФайла.Фильтр                      = "Файл данных (*.dbf)|*.dbf";
		ДиалогВыбораФайла.Расширение                  = "dbf";
	КонецЕсли;
	
	ДиалогВыбораФайла.Заголовок                   = "Выберите файл";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	ДиалогВыбораФайла.ПолноеИмяФайла              = РеестрЛСПоЖКУ;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("РеестрЛСПоЖКУНачалоВыбораЗавершение",
	                           ЭтотОбъект, Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла)));
	
КонецПроцедуры // РеестрЛСПоЖКУНачалоВыбора()

// Процедура-обработчик завершения процедуры РеестрЛСПоЖКУНачалоВыбора.
//
&НаКлиенте
Процедура РеестрЛСПоЖКУНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		РеестрЛСПоЖКУ = ДиалогВыбораФайла.ПолноеИмяФайла;
	КонецЕсли;

КонецПроцедуры // РеестрЛСПоЖКУНачалоВыбораЗавершение()

// Процедура-обработачик события "Открытие" поля ввода "РеестрЛСПоЖКУ".
//
&НаКлиенте
Процедура РеестрЛСПоЖКУОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если РеестрЛСПоЖКУ = "" Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран файл с реестром лицевых счетов по ЖКУ!", , "РеестрЛСПоЖКУ");
	Иначе
		УПЖКХ_ОбщегоНазначенияКлиент.ОткрытьСтраницуВБраузере(РеестрЛСПоЖКУ);
	КонецЕсли;
	
КонецПроцедуры // РеестрЛСПоЖКУОткрытие()

#КонецОбласти

#Область РеестрыОСЗН_Капремонт

// Процедура-обработчик события "НачалоВыбора" поля ввода "РеестрЛСПоКапРемонт".
//
&НаКлиенте
Процедура РеестрЛСПоКапРемонтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// В зависимости от выбранного формата загружаемого файла, необходимо организовать отбор файлов.
	// Доступны для загрузки файлы 2ух форматов: DBF(0) и XLS(1).
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Если ФорматЗагружаемогоВыгружаемогоФайлаКапремонт = 1 Тогда
		ДиалогВыбораФайла.Фильтр                      = "Файл данных (*.xls)|*.xls";
		ДиалогВыбораФайла.Расширение                  = "xls";
	Иначе
		ДиалогВыбораФайла.Фильтр                      = "Файл данных (*.dbf)|*.dbf";
		ДиалогВыбораФайла.Расширение                  = "dbf";
	КонецЕсли;
	ДиалогВыбораФайла.Заголовок                   = "Выберите файл";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	ДиалогВыбораФайла.ПолноеИмяФайла              = РеестрЛСПоКапРемонт;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("РеестрЛСПоКапРемонтНачалоВыбораЗавершение",
	                           ЭтотОбъект, Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла)));
	
КонецПроцедуры // РеестрЛСПоКапРемонтНачалоВыбора()

// Процедура-обработчик завершения процедуры РеестрЛСПоКапРемонтНачалоВыбора.
//
&НаКлиенте
Процедура РеестрЛСПоКапРемонтНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		РеестрЛСПоКапРемонт = ДиалогВыбораФайла.ПолноеИмяФайла;
	КонецЕсли;

КонецПроцедуры // РеестрЛСПоКапРемонтНачалоВыбораЗавершение()

// Процедура-обработачик события "Открытие" поля ввода "РеестрЛСПоКапРемонт".
//
&НаКлиенте
Процедура РеестрЛСПоКапРемонтОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если РеестрЛСПоКапРемонт = "" Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран файл с реестром лицевых счетов по капремонту!", , "РеестрЛСПоКапРемонт");
	Иначе
		УПЖКХ_ОбщегоНазначенияКлиент.ОткрытьСтраницуВБраузере(РеестрЛСПоКапРемонт);
	КонецЕсли;
	
КонецПроцедуры // РеестрЛСПоКапРемонтОткрытие()

#КонецОбласти

#Область РеестрыОСЗН_ТКО

// Процедура-обработчик события "НачалоВыбора" поля ввода "РеестрЛСПоТКО".
//
&НаКлиенте
Процедура РеестрЛСПоТКОНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// В зависимости от выбранного формата загружаемого файла, необходимо организовать отбор файлов.
	// Доступны для загрузки файлы 2ух форматов: DBF(0) и XLS(1).
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр                      = "Файл данных (*.dbf)|*.dbf";
	ДиалогВыбораФайла.Расширение                  = "dbf";
	ДиалогВыбораФайла.Заголовок                   = "Выберите файл";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	ДиалогВыбораФайла.ПолноеИмяФайла              = РеестрЛСПоТКО;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("РеестрЛСПоТКОНачалоВыбораЗавершение",
	                           ЭтотОбъект, Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла)));
	
КонецПроцедуры // РеестрЛСПоКапРемонтНачалоВыбора()

// Процедура-обработчик завершения процедуры РеестрЛСПоТКОНачалоВыбора.
//
&НаКлиенте
Процедура РеестрЛСПоТКОНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		РеестрЛСПоТКО = ДиалогВыбораФайла.ПолноеИмяФайла;
	КонецЕсли;

КонецПроцедуры // РеестрЛСПоКапРемонтНачалоВыбораЗавершение()

// Процедура-обработачик события "Открытие" поля ввода "РеестрЛСПоТКО".
//
&НаКлиенте
Процедура РеестрЛСПоТКООткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если РеестрЛСПоТКО = "" Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран файл с реестром лицевых счетов по оплате за обращение с твердыми коммунальными отходами!", , "РеестрЛСПоТКО");
	Иначе
		УПЖКХ_ОбщегоНазначенияКлиент.ОткрытьСтраницуВБраузере(РеестрЛСПоТКО);
	КонецЕсли;
	
КонецПроцедуры // РеестрЛСПоКапРемонтОткрытие()

#КонецОбласти

// Процедура-обработчик события "Нажатие" кнопки "Настройка".
//
&НаКлиенте
Процедура КомандаНастройка(Команда)
	
	АдресНастроекВХранилище = ПоместитьНастройкиВХранилище();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаНастройкаЗавершение", ЭтаФорма);
	
	ОткрытьФорму("Обработка.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты.Форма.ИркутскаяОбласть_ФормаНастройки", Новый Структура("АдресНастроекВХранилище", АдресНастроекВХранилище), , , , , ОписаниеОповещения);
	
КонецПроцедуры // КомандаНастройка()

// Процедура-обработчик результата опроса команды "КомандаНастройка".
//
&НаКлиенте
Процедура КомандаНастройкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		ПолучитьНастройкиИзХранилища(Результат);
	КонецЕсли;
	
КонецПроцедуры // КомандаНастройкаЗавершение()

// Процедура-обработчик события "Нажатие" кнопки "КомандаЗагрузить".
//
&НаКлиенте
Процедура КомандаЗагрузить(Команда)
	
	ТекстОшибки = ПроверкаУсловийДляЗаполненияТаблиц();
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если Объект.ИркутскаяОбласть_РеестрЖКУ.Количество() > 0
		 ИЛИ Объект.ИркутскаяОбласть_РеестрКапремонт.Количество() > 0
		 ИЛИ Объект.ИркутскаяОбласть_РеестрТКО.Количество() > 0 Тогда
		Оповещение   = Новый ОписаниеОповещения("КомандаЗагрузитьЗавершение", ЭтаФорма);
		ТекстВопроса = "Перед заполнением таблицы с реестрами лицевых счетов будут очищены. Продолжить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ПрочитатьСведенияИзФайлов();
	КонецЕсли;
	
КонецПроцедуры // КомандаЗагрузить()

// Процедура-обработчик результата опроса команды "КомандаЗагрузить".
//
&НаКлиенте
Процедура КомандаЗагрузитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ИркутскаяОбласть_РеестрЖКУ.Очистить();
		Объект.ИркутскаяОбласть_РеестрКапремонт.Очистить();
		Объект.ИркутскаяОбласть_РеестрТКО.Очистить();
		
		ПрочитатьСведенияИзФайлов();
	КонецЕсли;
	
КонецПроцедуры // КомандаЗагрузитьЗавершение()

// Процедура-обработчик события "Нажатие" кнопки "КомандаЗаполнить".
//
&НаКлиенте
Процедура КомандаЗаполнить(Команда)
	
	ЗаполнитьСведенияОбОплатахНаСервере();
	
КонецПроцедуры // КомандаЗаполнить()

// Процедура-обработчик события "Нажатие" кнопки "КомандаВыгрузить".
//
&НаКлиенте
Процедура КомандаВыгрузить(Команда)
	
	Если Объект.ИркутскаяОбласть_РеестрЖКУ.Количество() > 0 Тогда
		ТипРеестра = "ЖКУ";
		Если ФорматЗагружаемогоВыгружаемогоФайлаЖКУ = 0 Тогда // DBF
			ВыгрузитьСведенияОбОплатахВDBFФайл();
		Иначе //XLS
			ВыгрузитьСведенияОбОплатахВXLSФайл();
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ИркутскаяОбласть_РеестрКапремонт.Количество() > 0 Тогда
		ТипРеестра = "Капремонт";
		Если ФорматЗагружаемогоВыгружаемогоФайлаКапремонт = 0 Тогда //DBF
			ВыгрузитьСведенияОбОплатахВDBFФайл();
		Иначе //XLS
			ВыгрузитьСведенияОбОплатахВXLSФайл();
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ИркутскаяОбласть_РеестрТКО.Количество() > 0 Тогда
		ТипРеестра = "ТКО";
		ВыгрузитьСведенияОбОплатахВDBFФайл();
	КонецЕсли;
	
КонецПроцедуры // КомандаВыгрузить()

// Процедура предназначена для выгрузки сведений об оплатах из таблиц обработки в DBF-файлы.
//
&НаКлиенте
Процедура ВыгрузитьСведенияОбОплатахВDBFФайл()
	
	Если ТипРеестра = "ЖКУ" Тогда
		ТекущийРеестр         = РеестрЛСПоЖКУ;
		ТекущаяКодировкаФайла = КодировкаФайлаDBFЖКУ;
		ТекущаяТаблица        = Объект.ИркутскаяОбласть_РеестрЖКУ;
		ПоляКоторыеНеНужноРедактировать = "TOWN, STREET, HOUSE, HOUSING, FLAT, ACCOUNT, PER_MONTH, PER_YEAR";
	ИначеЕсли ТипРеестра = "Капремонт" Тогда
		ТекущийРеестр         = РеестрЛСПоКапРемонт;
		ТекущаяКодировкаФайла = КодировкаФайлаDBFКапремонт;
		ТекущаяТаблица        = Объект.ИркутскаяОбласть_РеестрКапремонт;
		ПоляКоторыеНеНужноРедактировать = "TOWN, STREET, HOUSE, HOUSING, FLAT, ACCOUNT";
	Иначе
		ТекущийРеестр         = РеестрЛСПоТКО;
		ТекущаяКодировкаФайла = КодировкаФайлаDBFТКО;
		ТекущаяТаблица        = Объект.ИркутскаяОбласть_РеестрТКО;
		ПоляКоторыеНеНужноРедактировать = "TOWN, STREET, HOUSE, HOUSING, FLAT, ACCOUNT";
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ТипРеестра, ТекущийРеестр, ТекущаяКодировкаФайла, ТекущаяТаблица, ПоляКоторыеНеНужноРедактировать");
	ДополнительныеПараметры.ТипРеестра                      = ТипРеестра;
	ДополнительныеПараметры.ТекущийРеестр                   = ТекущийРеестр;
	ДополнительныеПараметры.ТекущаяКодировкаФайла           = ТекущаяКодировкаФайла;
	ДополнительныеПараметры.ТекущаяТаблица                  = ТекущаяТаблица;
	ДополнительныеПараметры.ПоляКоторыеНеНужноРедактировать = ПоляКоторыеНеНужноРедактировать;
	
	ФайлРеестрЛС = Новый Файл(ТекущийРеестр);
	
	ФайлРеестрЛС.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ВыгрузитьСведенияОбОплатахВDBFФайлЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры // ВыгрузитьСведенияОбОплатахВDBFФайл()

// Процедура-обработчик результата проверки существования DBF-файла с реестром.
//
&НаКлиенте
Функция ВыгрузитьСведенияОбОплатахВDBFФайлЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	ТипРеестра                      = ДополнительныеПараметры.ТипРеестра;
	ТекущийРеестр                   = ДополнительныеПараметры.ТекущийРеестр;
	ТекущаяКодировкаФайла           = ДополнительныеПараметры.ТекущаяКодировкаФайла;
	ТекущаяТаблица                  = ДополнительныеПараметры.ТекущаяТаблица;
	ПоляКоторыеНеНужноРедактировать = ДополнительныеПараметры.ПоляКоторыеНеНужноРедактировать;
	
	Если ТипРеестра = "ЖКУ" Тогда
		ТекстДляСообщенияОбОшибке    = "ЖКУ";
		РеквизитДляСообщенияОбОшибке = "РеестрЛСПоЖКУ";
	ИначеЕсли ТипРеестра = "Капремонт" Тогда
		ТекстДляСообщенияОбОшибке    = "капремонту";
		РеквизитДляСообщенияОбОшибке = "РеестрЛСПоКапРемонт";
	Иначе
		ТекстДляСообщенияОбОшибке    = "оплате за обращение с твердыми коммунальными отходами";
		РеквизитДляСообщенияОбОшибке = "РеестрЛСПоТКО";
	КонецЕсли;
	
	Если Существует Тогда
		
		ИмяВременногоФайла = "";
		#Если НЕ ВебКлиент Тогда
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("dbf");
		#КонецЕсли
		
		Файл = Новый Файл(ИмяВременногоФайла);
		НовоеИмяВременногоФайла = СтрЗаменить(Файл.ПолноеИмя, Файл.ИмяБезРасширения, "temporal");
		
		КопироватьФайл(ТекущийРеестр, НовоеИмяВременногоФайла);
		
		// 1. Реализовать запись сведений из таблицы в файл по ЖКУ и капремонту.
		ФайлРеестрЛС = Новый XBase;
		ФайлРеестрЛС.Автосохранение = Истина;
		#Если НЕ ВебКлиент Тогда
		ФайлРеестрЛС.Кодировка = ?(ТекущаяКодировкаФайла = 1, КодировкаXBase.ANSI, КодировкаXBase.OEM);
		#КонецЕсли
		ФайлРеестрЛС.ОткрытьФайл(НовоеИмяВременногоФайла, , Ложь);
		
		ОтборСтрок = Новый Структура("ACCOUNT, TOWN, STREET, HOUSE, HOUSING, FLAT");
		
		Если ФайлРеестрЛС.Открыта() Тогда
			
			// Добавить проверку соответствия состава полей из считываемого файла с составом из соглашения.
			ФорматФайлаСоответствуетСоглашению = СравнитьФорматФайлаССоглашениемDBF(ФайлРеестрЛС, ТипРеестра);
			Если ФорматФайлаСоответствуетСоглашению Тогда
				Пока Не ФайлРеестрЛС.ВКонце() Цикл
					
					ОтборСтрок.ACCOUNT = СокрЛП(ФайлРеестрЛС.ACCOUNT);
					ОтборСтрок.TOWN    = СокрЛП(ФайлРеестрЛС.TOWN);
					ОтборСтрок.STREET  = СокрЛП(ФайлРеестрЛС.STREET);
					ОтборСтрок.HOUSE   = СокрЛП(ФайлРеестрЛС.HOUSE);
					ОтборСтрок.HOUSING = СокрЛП(ФайлРеестрЛС.HOUSING);
					ОтборСтрок.FLAT    = СокрЛП(ФайлРеестрЛС.FLAT);
					
					НайденныеСтроки = ТекущаяТаблица.НайтиСтроки(ОтборСтрок);
					Для каждого ТекСтрока Из НайденныеСтроки Цикл
						ЗаполнитьЗначенияСвойств(ФайлРеестрЛС, ТекСтрока, , ПоляКоторыеНеНужноРедактировать)
					КонецЦикла;
					
					ФайлРеестрЛС.Следующая();
					
				КонецЦикла;
			Иначе
				СтрокаСообщения = "Указанный файл не соответствует формату файла с реестром лицевых счетов по " + ТекстДляСообщенияОбОшибке + "!";
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(СтрокаСообщения, , РеквизитДляСообщенияОбОшибке);
			КонецЕсли;
			
			СтрокаСообщения = "Файл с реестром лицевых счетов по " + ТекстДляСообщенияОбОшибке + " записан!";
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(СтрокаСообщения);
			
			ФайлРеестрЛС.ЗакрытьФайл();
			
			КопироватьФайл(НовоеИмяВременногоФайла, ТекущийРеестр);
			
		Иначе
			СтрокаСообщения = "Не удалось записать файл с реестром лицевых счетов по " + ТекстДляСообщенияОбОшибке + "!";
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(СтрокаСообщения, , РеквизитДляСообщенияОбОшибке);
		КонецЕсли;
	Иначе
		СтрокаСообщения = "Выбранный файл с реестром лицевых счетов по " + ТекстДляСообщенияОбОшибке + " не существует. Выберите другой файл";
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(СтрокаСообщения, , РеквизитДляСообщенияОбОшибке);
	КонецЕсли;
	
КонецФункции // ВыгрузитьСведенияОбОплатахВDBFФайлЗавершение()

// Процедура предназначена для выгрузки сведений об оплатах из таблиц обработки в XLS-файлы.
//
&НаКлиенте
Процедура ВыгрузитьСведенияОбОплатахВXLSФайл()
	
	Если ТипРеестра = "ЖКУ" Тогда
		ТекущийРеестр = РеестрЛСПоЖКУ;
		ТекущаяТаблица = Объект.ИркутскаяОбласть_РеестрЖКУ;
	Иначе
		ТекущийРеестр = РеестрЛСПоКапРемонт;
		ТекущаяТаблица = Объект.ИркутскаяОбласть_РеестрКапремонт;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ТипРеестра, ТекущийРеестр, ТекущаяТаблица");
	ДополнительныеПараметры.ТипРеестра                      = ТипРеестра;
	ДополнительныеПараметры.ТекущийРеестр                   = ТекущийРеестр;
	ДополнительныеПараметры.ТекущаяТаблица                  = ТекущаяТаблица;
	
	ФайлРеестрЛС = Новый Файл(ТекущийРеестр);
	
	ФайлРеестрЛС.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ВыгрузитьСведенияОбОплатахВXLSФайлЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры // ВыгрузитьСведенияОбОплатахВXLSФайл()

// Процедура-обработчик результата проверки существования XLS-файла с реестром.
//
&НаКлиенте
Процедура ВыгрузитьСведенияОбОплатахВXLSФайлЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	ТипРеестра                      = ДополнительныеПараметры.ТипРеестра;
	ТекущийРеестр                   = ДополнительныеПараметры.ТекущийРеестр;
	ТекущаяТаблица                  = ДополнительныеПараметры.ТекущаяТаблица;
	
	Если Существует Тогда
		Попытка
			Excel = Новый COMОбъект("Excel.Application");
			
			Книга = Excel.WorkBooks.Open(ТекущийРеестр);
		Исключение
			Сообщить("Ошибка при записи файла с помощью Excel!");
			Сообщить(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
		Попытка
			//Открываем необходимый лист
			Лист = Книга.WorkSheets(1);
		Исключение
			//Закрываем Excel
			Excel.ActiveWorkbook.Close();
			Excel = 0;
			Сообщить("Файл " + Строка(ТекущийРеестр) + " не соответствует необходимому формату! Первый лист не найден!");
			Возврат;
		КонецПопытки;
		
		ОтборСтрок = Новый Структура("ACCOUNT, TOWN, STREET, HOUSE, HOUSING, FLAT");
		
		Попытка //Если случится ошибка, то закроем файл, чтобы не висел в процессах
			Для Сч = 2 По ТекущаяТаблица.Количество() + 1 Цикл
				Если НЕ СокрЛП(Лист.Cells(Сч, 1).Value) = ""  Тогда
					
					Если ТипРеестра = "ЖКУ" Тогда
						ОтборСтрок.TOWN    = СокрЛП(Лист.Cells(Сч, 1).Value);
						ОтборСтрок.STREET  = СокрЛП(Лист.Cells(Сч, 2).Value);
						ОтборСтрок.HOUSE   = СокрЛП(Лист.Cells(Сч, 3).Value);
						ОтборСтрок.HOUSING = СокрЛП(Лист.Cells(Сч, 4).Value);
						ОтборСтрок.FLAT    = СокрЛП(Лист.Cells(Сч, 5).Value);
						ОтборСтрок.ACCOUNT = СокрЛП(Лист.Cells(Сч, 8).Value);
					Иначе
						ОтборСтрок.ACCOUNT = СокрЛП(Лист.Cells(Сч, 1).Value);
						ОтборСтрок.TOWN    = СокрЛП(Лист.Cells(Сч, 2).Value);
						ОтборСтрок.STREET  = СокрЛП(Лист.Cells(Сч, 3).Value);
						ОтборСтрок.HOUSE   = СокрЛП(Лист.Cells(Сч, 4).Value);
						ОтборСтрок.HOUSING = СокрЛП(Лист.Cells(Сч, 5).Value);
						ОтборСтрок.FLAT    = СокрЛП(Лист.Cells(Сч, 6).Value);
					КонецЕсли;
					
					НайденныеСтроки = ТекущаяТаблица.НайтиСтроки(ОтборСтрок);
					Для каждого ТекСтрока Из НайденныеСтроки Цикл
						
						Если ТипРеестра = "ЖКУ" Тогда
							Лист.Cells(Сч, 9).Value  = ТекСтрока.RG_COUNT;
							Лист.Cells(Сч, 10).Value = ТекСтрока.FT_COUNT;
							Лист.Cells(Сч, 11).Value = ТекСтрока.OWNERSHP;
							Лист.Cells(Сч, 12).Value = ТекСтрока.SQUARE;
							Лист.Cells(Сч, 13).Value = ТекСтрока.ACRUAL1;
							Лист.Cells(Сч, 14).Value = ТекСтрока.TARIFF1;
							Лист.Cells(Сч, 15).Value = ТекСтрока.ACRUAL2;
							Лист.Cells(Сч, 16).Value = ТекСтрока.TARIFF2;
							Лист.Cells(Сч, 17).Value = ТекСтрока.NORM2;
							Лист.Cells(Сч, 18).Value = ТекСтрока.NORM18;
							Лист.Cells(Сч, 19).Value = ТекСтрока.ACRUAL3;
							Лист.Cells(Сч, 20).Value = ТекСтрока.ACRUAL4;
							Лист.Cells(Сч, 21).Value = ТекСтрока.TARIFF4;
							Лист.Cells(Сч, 22).Value = ТекСтрока.NORM4;
							Лист.Cells(Сч, 23).Value = ТекСтрока.ACRUAL5;
							Лист.Cells(Сч, 24).Value = ТекСтрока.TARIFF12;
							Лист.Cells(Сч, 25).Value = ТекСтрока.NORM12;
							Лист.Cells(Сч, 26).Value = ТекСтрока.ACRUAL6;
							Лист.Cells(Сч, 27).Value = ТекСтрока.TARIFF6;
							Лист.Cells(Сч, 28).Value = ТекСтрока.NORM6;
							Лист.Cells(Сч, 29).Value = ТекСтрока.ACRUAL7;
							Лист.Cells(Сч, 30).Value = ТекСтрока.ACRUAL8;
							Лист.Cells(Сч, 31).Value = ТекСтрока.TARIFF8;
							Лист.Cells(Сч, 32).Value = ТекСтрока.NORM8;
							Лист.Cells(Сч, 33).Value = ТекСтрока.ACRUAL35;
							Лист.Cells(Сч, 34).Value = ТекСтрока.ACRUAL9;
							Лист.Cells(Сч, 35).Value = ТекСтрока.TARIFF9_KUB;
							Лист.Cells(Сч, 36).Value = ТекСтрока.TARIFF9_GKL;
							Лист.Cells(Сч, 37).Value = ТекСтрока.NORM9_KUB;
							Лист.Cells(Сч, 38).Value = ТекСтрока.NORM9_GKAL;
							Лист.Cells(Сч, 39).Value = ТекСтрока.ACRUAL10;
							Лист.Cells(Сч, 40).Value = ТекСтрока.ACRUAL11;
							Лист.Cells(Сч, 41).Value = ТекСтрока.TARIFF11;
							Лист.Cells(Сч, 42).Value = ТекСтрока.NORM46;
							Лист.Cells(Сч, 43).Value = ТекСтрока.DBT_MONT;
						Иначе
							Лист.Cells(Сч, 7).Value  = ТекСтрока.SQUARE;
							Лист.Cells(Сч, 8).Value  = ТекСтрока.PAYMENT;
							Лист.Cells(Сч, 9).Value  = ТекСтрока.MIN_PAY;
							Лист.Cells(Сч, 10).Value = ТекСтрока.NUM_MONTHS;
						КонецЕсли;
						
					КонецЦикла;
					
				КонецЕсли;
			КонецЦикла;
		Исключение
			//Закрываем Excel
			Excel.ActiveWorkbook.Close();
			Excel.Quit();
			Сообщить(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
		Попытка
			Книга.SaveAs(ТекущийРеестр);
			Excel.Quit();
			
			СтрокаСообщения = "Файл с реестром лицевых счетов по " + ?(ТипРеестра = "ЖКУ", "ЖКУ", "капремонту") + " записан!";
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(СтрокаСообщения);
			
		Исключение
			//Сообщить(ОписаниеОшибки());
			СтрокаСообщения = "Не удалось записать файл с реестром лицевых счетов по " + ?(ТипРеестра = "ЖКУ", "ЖКУ", "капремонту") + "!";
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(СтрокаСообщения, , ?(ТипРеестра = "ЖКУ", "РеестрЛСПоЖКУ", "РеестрЛСПоКапРемонт"));
			Возврат;
		КонецПопытки;
	Иначе
		СтрокаСообщения = "Выбранный файл с реестром лицевых счетов по " + ?(ТипРеестра = "ЖКУ", "ЖКУ", "капремонту") + " не существует. Выберите другой файл";
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(СтрокаСообщения, , ?(ТипРеестра = "ЖКУ", "РеестрЛСПоЖКУ", "РеестрЛСПоКапРемонт"));
	КонецЕсли;
	
КонецПроцедуры // ВыгрузитьСведенияОбОплатахВXLSФайлЗавершение()

#Область ВспомогательныеПроцедурыИФунции

// Помещает настройки во временное хранилище.
//
&НаСервере
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("РеквизитЛСДляИдентификации",                   РеквизитЛСДляИдентификации);
	СтруктураНастроек.Вставить("СпособИдентификацииЛС",                        СпособИдентификацииЛС);
	СтруктураНастроек.Вставить("ФорматЗагружаемогоВыгружаемогоФайлаЖКУ",       ФорматЗагружаемогоВыгружаемогоФайлаЖКУ);
	СтруктураНастроек.Вставить("ФорматЗагружаемогоВыгружаемогоФайлаКапремонт", ФорматЗагружаемогоВыгружаемогоФайлаКапремонт);
	СтруктураНастроек.Вставить("КодировкаФайлаDBFЖКУ",                         КодировкаФайлаDBFЖКУ);
	СтруктураНастроек.Вставить("КодировкаФайлаDBFКапремонт",                   КодировкаФайлаDBFКапремонт);
	СтруктураНастроек.Вставить("КодировкаФайлаDBFТКО",                         КодировкаФайлаDBFТКО);
	СтруктураНастроек.Вставить("ИркутскаяОбласть_ЖКУ_ОСЗН",                    Объект.ИркутскаяОбласть_ЖКУ_ОСЗН.Выгрузить());
	СтруктураНастроек.Вставить("ИркутскаяОбласть_ЖКУ_В_Базе",                  Объект.ИркутскаяОбласть_ЖКУ_В_Базе.Выгрузить());
	
	СтруктураНастроек.Вставить("КоличествоДнейСледующегоМесяцаВТеченииКоторыхМожноОплатитьНачисленияЗаМесяцВыгрузки", КоличествоДнейСледующегоМесяцаВТеченииКоторыхМожноОплатитьНачисленияЗаМесяцВыгрузки);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции // ПоместитьНастройкиВХранилище()

// Получает настройки из временного хранилища.
//
&НаСервере
Функция ПолучитьНастройкиИзХранилища(АдресНастроекВХранилище)
	
	СтруктураНастроек = ПолучитьИзВременногоХранилища(АдресНастроекВХранилище);
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		
		Если СтруктураНастроек.Свойство("РеквизитЛСДляИдентификации") Тогда
			РеквизитЛСДляИдентификации = СтруктураНастроек.РеквизитЛСДляИдентификации;
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("СпособИдентификацииЛС") Тогда
			СпособИдентификацииЛС = СтруктураНастроек.СпособИдентификацииЛС;
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ФорматЗагружаемогоВыгружаемогоФайлаЖКУ") Тогда
			ФорматЗагружаемогоВыгружаемогоФайлаЖКУ = СтруктураНастроек.ФорматЗагружаемогоВыгружаемогоФайлаЖКУ;
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ФорматЗагружаемогоВыгружаемогоФайлаКапремонт") Тогда
			ФорматЗагружаемогоВыгружаемогоФайлаКапремонт = СтруктураНастроек.ФорматЗагружаемогоВыгружаемогоФайлаКапремонт;
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("КодировкаФайлаDBFЖКУ") Тогда
			КодировкаФайлаDBFЖКУ = СтруктураНастроек.КодировкаФайлаDBFЖКУ;
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("КодировкаФайлаDBFКапремонт") Тогда
			КодировкаФайлаDBFКапремонт = СтруктураНастроек.КодировкаФайлаDBFКапремонт;
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("КодировкаФайлаDBFТКО") Тогда
			КодировкаФайлаDBFТКО = СтруктураНастроек.КодировкаФайлаDBFТКО;
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("КоличествоДнейСледующегоМесяцаВТеченииКоторыхМожноОплатитьНачисленияЗаМесяцВыгрузки", КоличествоДнейСледующегоМесяцаВТеченииКоторыхМожноОплатитьНачисленияЗаМесяцВыгрузки) Тогда
			КоличествоДнейСледующегоМесяцаВТеченииКоторыхМожноОплатитьНачисленияЗаМесяцВыгрузки = СтруктураНастроек.КоличествоДнейСледующегоМесяцаВТеченииКоторыхМожноОплатитьНачисленияЗаМесяцВыгрузки;
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ИркутскаяОбласть_ЖКУ_ОСЗН") Тогда
			Объект.ИркутскаяОбласть_ЖКУ_ОСЗН.Загрузить(СтруктураНастроек.ИркутскаяОбласть_ЖКУ_ОСЗН);
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ИркутскаяОбласть_ЖКУ_В_Базе") Тогда
			Объект.ИркутскаяОбласть_ЖКУ_В_Базе.Загрузить(СтруктураНастроек.ИркутскаяОбласть_ЖКУ_В_Базе);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции // ПолучитьНастройкиИзХранилища()

// Процедура восстановления настроек.
//
&НаСервере
Процедура ВосстановитьНастройки()
	
	СтруктураПараметров = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("ИркутскаяОбласть_Выгрузка_ВОСЗН_2", "ПараметрыВыгрузки");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		СтруктураПараметров.Свойство("РеквизитЛСДляИдентификации",                   РеквизитЛСДляИдентификации);
		СтруктураПараметров.Свойство("СпособИдентификацииЛС",                        СпособИдентификацииЛС);
		СтруктураПараметров.Свойство("ФорматЗагружаемогоВыгружаемогоФайлаЖКУ",       ФорматЗагружаемогоВыгружаемогоФайлаЖКУ);
		СтруктураПараметров.Свойство("ФорматЗагружаемогоВыгружаемогоФайлаКапремонт", ФорматЗагружаемогоВыгружаемогоФайлаКапремонт);
		СтруктураПараметров.Свойство("КодировкаФайлаDBFЖКУ",                         КодировкаФайлаDBFЖКУ);
		СтруктураПараметров.Свойство("КодировкаФайлаDBFКапремонт",                   КодировкаФайлаDBFКапремонт);
		СтруктураПараметров.Свойство("КодировкаФайлаDBFТКО",                         КодировкаФайлаDBFТКО);
		
		СтруктураПараметров.Свойство("КоличествоДнейСледующегоМесяцаВТеченииКоторыхМожноОплатитьНачисленияЗаМесяцВыгрузки", КоличествоДнейСледующегоМесяцаВТеченииКоторыхМожноОплатитьНачисленияЗаМесяцВыгрузки);
		
		врТаблицаУслугВОСЗН = Новый ТаблицаЗначений;
		врТаблицаУслугВБазе = Новый ТаблицаЗначений;
		
		СтруктураПараметров.Свойство("ИркутскаяОбласть_ЖКУ_ОСЗН", врТаблицаУслугВОСЗН);
		Если НЕ врТаблицаУслугВОСЗН = Неопределено Тогда
			Объект.ИркутскаяОбласть_ЖКУ_ОСЗН.Загрузить(врТаблицаУслугВОСЗН);
		КонецЕсли;
		
		СтруктураПараметров.Свойство("ИркутскаяОбласть_ЖКУ_В_Базе", врТаблицаУслугВБазе);
		Если НЕ врТаблицаУслугВБазе = Неопределено Тогда
			
			Объект.ИркутскаяОбласть_ЖКУ_В_Базе.Загрузить(врТаблицаУслугВБазе);
			
			Если врТаблицаУслугВБазе.Колонки.Найти("ТипУслуги") = Неопределено Тогда
				Для каждого ТекСтрока Из Объект.ИркутскаяОбласть_ЖКУ_В_Базе Цикл
					ТекСтрока.ТипУслуги = "Индивидуальная и общедомовая";
				КонецЦикла;
			КонецЕсли;
			
			Если врТаблицаУслугВБазе.Колонки.Найти("УчитыватьПриРасчетеНорматива") = Неопределено Тогда
				Для каждого ТекСтрока Из Объект.ИркутскаяОбласть_ЖКУ_В_Базе Цикл
					Если ТекСтрока.УникальноеНаименованиеУслуги = "ЭлектрическаяЭнергия"
					 ИЛИ ТекСтрока.УникальноеНаименованиеУслуги = "Газоснабжение"
					 ИЛИ ТекСтрока.УникальноеНаименованиеУслуги = "ГазоснабжениеБаллон"
					 ИЛИ ТекСтрока.УникальноеНаименованиеУслуги = "ХолодноеВодоснабжение"
					 ИЛИ ТекСтрока.УникальноеНаименованиеУслуги = "ОтведениеСточныхВод"
					 ИЛИ ТекСтрока.УникальноеНаименованиеУслуги = "ГорячееВодоснабжениеКубМетр"
					 ИЛИ ТекСтрока.УникальноеНаименованиеУслуги = "ГорячееВодоснабжениеГКал"
					 ИЛИ ТекСтрока.УникальноеНаименованиеУслуги = "Отопление"
					 ИЛИ ТекСтрока.УникальноеНаименованиеУслуги = "ТвердыеКоммунальныеОтходы" Тогда
						ТекСтрока.УчитыватьПриРасчетеНорматива = Истина;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(РеквизитЛСДляИдентификации) Тогда
		РеквизитЛСДляИдентификации = "Наименование";
	КонецЕсли;
	
	Если НЕ Объект.ИркутскаяОбласть_ЖКУ_ОСЗН.Количество() = 11 Тогда
		
		Объект.ИркутскаяОбласть_ЖКУ_ОСЗН.Очистить();
		
		НоваяСтрокаУслуг = Объект.ИркутскаяОбласть_ЖКУ_ОСЗН.Добавить();
		НоваяСтрокаУслуг.УникальноеНаименованиеУслуги       = "ПлатаЗаЖилоеПомещение";
		НоваяСтрокаУслуг.НаименованиеУслугиДляПользователей = "Плата за жилое помещение";
		
		НоваяСтрокаУслуг = Объект.ИркутскаяОбласть_ЖКУ_ОСЗН.Добавить();
		НоваяСтрокаУслуг.УникальноеНаименованиеУслуги       = "ЭлектрическаяЭнергия";
		НоваяСтрокаУслуг.НаименованиеУслугиДляПользователей = "Электрическая энергия";
		
		НоваяСтрокаУслуг = Объект.ИркутскаяОбласть_ЖКУ_ОСЗН.Добавить();
		НоваяСтрокаУслуг.УникальноеНаименованиеУслуги       = "Газоснабжение";
		НоваяСтрокаУслуг.НаименованиеУслугиДляПользователей = "Газоснабжение";
		
		НоваяСтрокаУслуг = Объект.ИркутскаяОбласть_ЖКУ_ОСЗН.Добавить();
		НоваяСтрокаУслуг.УникальноеНаименованиеУслуги       = "ГазоснабжениеБаллон";
		НоваяСтрокаУслуг.НаименованиеУслугиДляПользователей = "Газоснабжение (баллон)";
		
		НоваяСтрокаУслуг = Объект.ИркутскаяОбласть_ЖКУ_ОСЗН.Добавить();
		НоваяСтрокаУслуг.УникальноеНаименованиеУслуги       = "ГазоснабжениеОтопление";
		НоваяСтрокаУслуг.НаименованиеУслугиДляПользователей = "Газоснабжение (отопление)";
		
		НоваяСтрокаУслуг = Объект.ИркутскаяОбласть_ЖКУ_ОСЗН.Добавить();
		НоваяСтрокаУслуг.УникальноеНаименованиеУслуги       = "ХолодноеВодоснабжение";
		НоваяСтрокаУслуг.НаименованиеУслугиДляПользователей = "Холодное водоснабжение";
		
		НоваяСтрокаУслуг = Объект.ИркутскаяОбласть_ЖКУ_ОСЗН.Добавить();
		НоваяСтрокаУслуг.УникальноеНаименованиеУслуги       = "ОтведениеСточныхВод";
		НоваяСтрокаУслуг.НаименованиеУслугиДляПользователей = "Отведение сточных вод";
		
		НоваяСтрокаУслуг = Объект.ИркутскаяОбласть_ЖКУ_ОСЗН.Добавить();
		НоваяСтрокаУслуг.УникальноеНаименованиеУслуги       = "ГорячееВодоснабжениеКубМетр";
		НоваяСтрокаУслуг.НаименованиеУслугиДляПользователей = "Горячее водоснабжение (куб.м)";
		
		НоваяСтрокаУслуг = Объект.ИркутскаяОбласть_ЖКУ_ОСЗН.Добавить();
		НоваяСтрокаУслуг.УникальноеНаименованиеУслуги       = "ГорячееВодоснабжениеГКал";
		НоваяСтрокаУслуг.НаименованиеУслугиДляПользователей = "Горячее водоснабжение (ГКал)";
		
		НоваяСтрокаУслуг = Объект.ИркутскаяОбласть_ЖКУ_ОСЗН.Добавить();
		НоваяСтрокаУслуг.УникальноеНаименованиеУслуги       = "Отопление";
		НоваяСтрокаУслуг.НаименованиеУслугиДляПользователей = "Отопление";
		
		НоваяСтрокаУслуг = Объект.ИркутскаяОбласть_ЖКУ_ОСЗН.Добавить();
		НоваяСтрокаУслуг.УникальноеНаименованиеУслуги       = "ТвердыеКоммунальныеОтходы";
		НоваяСтрокаУслуг.НаименованиеУслугиДляПользователей = "Твердые коммунальные отходы";
		
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьНастройки()

// Процедура сохранения настроек.
//
&НаСервере
Процедура СохранитьНастройки()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("РеквизитЛСДляИдентификации",                   РеквизитЛСДляИдентификации);
	СтруктураПараметров.Вставить("СпособИдентификацииЛС",                        СпособИдентификацииЛС);
	СтруктураПараметров.Вставить("ФорматЗагружаемогоВыгружаемогоФайлаЖКУ",       ФорматЗагружаемогоВыгружаемогоФайлаЖКУ);
	СтруктураПараметров.Вставить("ФорматЗагружаемогоВыгружаемогоФайлаКапремонт", ФорматЗагружаемогоВыгружаемогоФайлаКапремонт);
	СтруктураПараметров.Вставить("КодировкаФайлаDBFЖКУ",                         КодировкаФайлаDBFЖКУ);
	СтруктураПараметров.Вставить("КодировкаФайлаDBFКапремонт",                   КодировкаФайлаDBFКапремонт);
	СтруктураПараметров.Вставить("ИркутскаяОбласть_ЖКУ_ОСЗН",                    Объект.ИркутскаяОбласть_ЖКУ_ОСЗН.Выгрузить());
	СтруктураПараметров.Вставить("ИркутскаяОбласть_ЖКУ_В_Базе",                  Объект.ИркутскаяОбласть_ЖКУ_В_Базе.Выгрузить());
	
	СтруктураПараметров.Вставить("КоличествоДнейСледующегоМесяцаВТеченииКоторыхМожноОплатитьНачисленияЗаМесяцВыгрузки", КоличествоДнейСледующегоМесяцаВТеченииКоторыхМожноОплатитьНачисленияЗаМесяцВыгрузки);
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("ИркутскаяОбласть_Выгрузка_ВОСЗН_2", "ПараметрыВыгрузки", СтруктураПараметров);
	
КонецПроцедуры // СохранитьНастройки()

// Проверяет наличие всех необходимых данных для заполнения таблиц выгрузки.
//
&НаКлиенте
Функция ПроверкаУсловийДляЗаполненияТаблиц()
	
	ТекстОшибки = "";
	
	Если НЕ ЗначениеЗаполнено(Объект.Период) Тогда
		ТекстОшибки = ТекстОшибки + "Не указан месяц выгрузки!";
	КонецЕсли;
	
	Если Объект.Организация = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка") Тогда
		ТекстОшибки = ?(ПустаяСтрока(ТекстОшибки), "", ТекстОшибки + Символы.ПС) + "Не указана организация!";
	КонецЕсли;
	
	Если ПустаяСтрока(РеестрЛСПоЖКУ) И ПустаяСтрока(РеестрЛСПоКапРемонт) И ПустаяСтрока(РеестрЛСПоТКО) Тогда
		ТекстОшибки = ?(ПустаяСтрока(ТекстОшибки), "", ТекстОшибки + Символы.ПС) + "Не указан ни один из файлов, в котором содержатся реестры л/с!";
	КонецЕсли;
	
	Если Объект.ИркутскаяОбласть_ЖКУ_В_Базе.Количество() = 0 Тогда
		ТекстОшибки = ?(ПустаяСтрока(ТекстОшибки), "", ТекстОшибки + Символы.ПС) + "Не заполнена таблица соответствия услуг!";
	КонецЕсли;
	
	Если Не ПустаяСтрока(РеестрЛСПоТКО) Тогда
		
		Отбор = Новый Структура("УникальноеНаименованиеУслуги", "ТвердыеКоммунальныеОтходы");
		НайденныеСтроки = Объект.ИркутскаяОбласть_ЖКУ_В_Базе.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() = 0 Тогда
			ТекстОшибки = ?(ПустаяСтрока(ТекстОшибки), "", ТекстОшибки + Символы.ПС) + "В настройках выгрузки не указаны услуги из базы, соответствующие услуге в ОСЗН ""Твердые коммунальные отходы""!";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции // ПроверкаУсловийДляЗаполненияТаблиц

// Предназначена для идентификации лицевых счетов из считанных файлов.
//
&НаСервере
Процедура ИдентифицироватьЛицевыеСчетаИзБазыНаСервере()
	
	Если ТипРеестра = "ЖКУ" И Объект.ИркутскаяОбласть_РеестрЖКУ.Количество() > 0 Тогда
		ТекущаяТаблица = Объект.ИркутскаяОбласть_РеестрЖКУ.Выгрузить();
	ИначеЕсли ТипРеестра = "Капремонт" И Объект.ИркутскаяОбласть_РеестрКапремонт.Количество() > 0 Тогда
		ТекущаяТаблица = Объект.ИркутскаяОбласть_РеестрКапремонт.Выгрузить();
	ИначеЕсли ТипРеестра = "ТКО" И Объект.ИркутскаяОбласть_РеестрТКО.Количество() > 0 Тогда
		ТекущаяТаблица = Объект.ИркутскаяОбласть_РеестрТКО.Выгрузить();
	Иначе
		Возврат;
	КонецЕсли;
	
	Для каждого ТекСтрока Из ТекущаяТаблица Цикл
		ТекСтрока.ДомСКорпусом = ТекСтрока.HOUSE + "/" + ТекСтрока.HOUSING;
	КонецЦикла;
	
	Если СпособИдентификацииЛС = 0 Тогда
		
		МассивСокрНасПункт = СформироватьМассивСокращениеПоВиду(1);
		МассивСокрУлицы    = СформироватьМассивСокращениеПоВиду(2);
		
		#Область ПолучениеЛС_Из_ИнформационнойБазы
			
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("ДатаКон",     КонецМесяца(Объект.Период));
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
		|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.Адрес КАК Помещение,
		|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.Адрес.Владелец КАК Здание
		|ПОМЕСТИТЬ втЛицевыеОбслуживаемыеВыбраннойОрганизацией
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(&ДатаКон, Организация = &Организация) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних";
		
		Запрос.Выполнить();
		
		ЗапросПоЗданиям = Новый Запрос;
		ЗапросПоЗданиям.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
		ЗапросПоЗданиям.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	втЛицевыеОбслуживаемыеВыбраннойОрганизацией.Здание КАК Объект
		|ИЗ
		|	втЛицевыеОбслуживаемыеВыбраннойОрганизацией КАК втЛицевыеОбслуживаемыеВыбраннойОрганизацией";
		
		МассивОбъектов = ЗапросПоЗданиям.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
		
		МассивВидовКонтактнойИнформации = Новый Массив;
		МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
		
		// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
		УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	втЛицевыеОбслуживаемыеВыбраннойОрганизацией.Помещение КАК Помещение,
		|	втЛицевыеОбслуживаемыеВыбраннойОрганизацией.Здание КАК Здание,
		|	втЛицевыеОбслуживаемыеВыбраннойОрганизацией.ЛицевойСчет КАК ЛицевойСчет,
		|	ВЫБОР
		|		КОГДА НЕ втКонтактнаяИнформация.Город = """"
		|			ТОГДА втКонтактнаяИнформация.Город
		|		КОГДА НЕ втКонтактнаяИнформация.НаселенныйПункт = """"
		|			ТОГДА втКонтактнаяИнформация.НаселенныйПункт
		|		ИНАЧЕ втКонтактнаяИнформация.Регион
		|	КОНЕЦ КАК TOWN,
		|	втКонтактнаяИнформация.Улица КАК STREET,
		|	втКонтактнаяИнформация.Дом КАК HOUSE,
		|	втКонтактнаяИнформация.Корпус КАК HOUSING,
		|	ВЫРАЗИТЬ("""" КАК СТРОКА(15)) КАК FLAT,
		|	втЛицевыеОбслуживаемыеВыбраннойОрганизацией.Помещение.Код КАК Квартира,
		|	втЛицевыеОбслуживаемыеВыбраннойОрганизацией.Помещение.Суффикс КАК Суффикс
		|ИЗ
		|	втЛицевыеОбслуживаемыеВыбраннойОрганизацией КАК втЛицевыеОбслуживаемыеВыбраннойОрганизацией
		|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК втКонтактнаяИнформация
		|		ПО втЛицевыеОбслуживаемыеВыбраннойОрганизацией.Здание = втКонтактнаяИнформация.Объект";
		
		ТаблицаЛицевыхСчетовИзБазыСАдресами = Запрос.Выполнить().Выгрузить();
		
		ИсключитьАдресныеСокращенияИзНаименованияГородовИУлиц(ТаблицаЛицевыхСчетовИзБазыСАдресами, МассивСокрНасПункт, МассивСокрУлицы, Истина);
		
		#КонецОбласти
		
		ИдентифицироватьЛСИзРеестра(ТекущаяТаблица, ТаблицаЛицевыхСчетовИзБазыСАдресами, ТипРеестра, МассивСокрНасПункт, МассивСокрУлицы);
		
	Иначе
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ДатаКон",     КонецМесяца(Объект.Период));
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		
		Запрос.УстановитьПараметр("РеквизитомДляИдентификацииЯвляетсяНаименование", ?(РеквизитЛСДляИдентификации = "Наименование", Истина, Ложь));
		
		Запрос.УстановитьПараметр("ТаблицаДанныхИзФайла", ТекущаяТаблица);
		
		Если ТипРеестра = "ЖКУ" Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
			|	ВЫБОР
			|		КОГДА &РеквизитомДляИдентификацииЯвляетсяНаименование
			|			ТОГДА УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.Наименование
			|		ИНАЧЕ УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.Идентификатор
			|	КОНЕЦ КАК ACCOUNT
			|ПОМЕСТИТЬ втЛицевыеОбслуживаемыеВыбраннойОрганизацией
			|ИЗ
			|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(&ДатаКон, Организация = &Организация) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаДанныхИзФайла.ЛицевойСчет КАК ЛицевойСчет,
			|	ТаблицаДанныхИзФайла.ACCOUNT КАК ACCOUNT,
			|	ТаблицаДанныхИзФайла.TOWN КАК TOWN,
			|	ТаблицаДанныхИзФайла.STREET КАК STREET,
			|	ТаблицаДанныхИзФайла.HOUSE КАК HOUSE,
			|	ТаблицаДанныхИзФайла.HOUSING КАК HOUSING,
			|	ТаблицаДанныхИзФайла.FLAT_Исх КАК FLAT_Исх,
			|	ТаблицаДанныхИзФайла.PER_MONTH КАК PER_MONTH,
			|	ТаблицаДанныхИзФайла.PER_YEAR КАК PER_YEAR,
			|	ТаблицаДанныхИзФайла.RG_COUNT КАК RG_COUNT,
			|	ТаблицаДанныхИзФайла.FT_COUNT КАК FT_COUNT,
			|	ТаблицаДанныхИзФайла.OWNERSHP КАК OWNERSHP,
			|	ТаблицаДанныхИзФайла.SQUARE КАК SQUARE
			|ПОМЕСТИТЬ ТаблицаДанныхИзФайла
			|ИЗ
			|	&ТаблицаДанныхИзФайла КАК ТаблицаДанныхИзФайла
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЕСТЬNULL(втЛицевыеОбслуживаемыеВыбраннойОрганизацией.ЛицевойСчет, ТаблицаДанныхИзФайла.ЛицевойСчет) КАК ЛицевойСчет,
			|	ТаблицаДанныхИзФайла.ACCOUNT КАК ACCOUNT,
			|	ТаблицаДанныхИзФайла.TOWN КАК TOWN,
			|	ТаблицаДанныхИзФайла.STREET КАК STREET,
			|	ТаблицаДанныхИзФайла.HOUSE КАК HOUSE,
			|	ТаблицаДанныхИзФайла.HOUSING КАК HOUSING,
			|	ТаблицаДанныхИзФайла.FLAT_Исх КАК FLAT,
			|	ТаблицаДанныхИзФайла.PER_MONTH КАК PER_MONTH,
			|	ТаблицаДанныхИзФайла.PER_YEAR КАК PER_YEAR,
			|	ТаблицаДанныхИзФайла.RG_COUNT КАК RG_COUNT,
			|	ТаблицаДанныхИзФайла.FT_COUNT КАК FT_COUNT,
			|	ТаблицаДанныхИзФайла.OWNERSHP КАК OWNERSHP,
			|	ТаблицаДанныхИзФайла.SQUARE КАК SQUARE
			|ИЗ
			|	ТаблицаДанныхИзФайла КАК ТаблицаДанныхИзФайла
			|		ЛЕВОЕ СОЕДИНЕНИЕ втЛицевыеОбслуживаемыеВыбраннойОрганизацией КАК втЛицевыеОбслуживаемыеВыбраннойОрганизацией
			|		ПО ТаблицаДанныхИзФайла.ACCOUNT = втЛицевыеОбслуживаемыеВыбраннойОрганизацией.ACCOUNT";
			
			ТаблицаДанных = Запрос.Выполнить().Выгрузить();
			
			Объект.ИркутскаяОбласть_РеестрЖКУ.Загрузить(ТаблицаДанных);
			
			Элементы.ИркутскаяОбласть_РеестрЖКУRG_COUNT.ТекстПодвала = ТаблицаДанных.Итог("RG_COUNT");
			Элементы.ИркутскаяОбласть_РеестрЖКУFT_COUNT.ТекстПодвала = ТаблицаДанных.Итог("FT_COUNT");
			Элементы.ИркутскаяОбласть_РеестрЖКУOWNERSHP.ТекстПодвала = ТаблицаДанных.Итог("OWNERSHP");
			Элементы.ИркутскаяОбласть_РеестрЖКУSQUARE.ТекстПодвала   = ТаблицаДанных.Итог("SQUARE");
			
		ИначеЕсли ТипРеестра = "Капремонт" Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
			|	ВЫБОР
			|		КОГДА &РеквизитомДляИдентификацииЯвляетсяНаименование
			|			ТОГДА УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.Наименование
			|		ИНАЧЕ УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.Идентификатор
			|	КОНЕЦ КАК ACCOUNT
			|ПОМЕСТИТЬ втЛицевыеОбслуживаемыеВыбраннойОрганизацией
			|ИЗ
			|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(&ДатаКон, Организация = &Организация) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаДанныхИзФайла.ЛицевойСчет КАК ЛицевойСчет,
			|	ТаблицаДанныхИзФайла.ACCOUNT КАК ACCOUNT,
			|	ТаблицаДанныхИзФайла.TOWN КАК TOWN,
			|	ТаблицаДанныхИзФайла.STREET КАК STREET,
			|	ТаблицаДанныхИзФайла.HOUSE КАК HOUSE,
			|	ТаблицаДанныхИзФайла.HOUSING КАК HOUSING,
			|	ТаблицаДанныхИзФайла.FLAT_Исх КАК FLAT_Исх,
			|	ТаблицаДанныхИзФайла.SQUARE КАК SQUARE,
			|	ТаблицаДанныхИзФайла.MIN_PAY КАК MIN_PAY
			|ПОМЕСТИТЬ ТаблицаДанныхИзФайла
			|ИЗ
			|	&ТаблицаДанныхИзФайла КАК ТаблицаДанныхИзФайла
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЕСТЬNULL(втЛицевыеОбслуживаемыеВыбраннойОрганизацией.ЛицевойСчет, ТаблицаДанныхИзФайла.ЛицевойСчет) КАК ЛицевойСчет,
			|	ТаблицаДанныхИзФайла.ACCOUNT КАК ACCOUNT,
			|	ТаблицаДанныхИзФайла.TOWN КАК TOWN,
			|	ТаблицаДанныхИзФайла.STREET КАК STREET,
			|	ТаблицаДанныхИзФайла.HOUSE КАК HOUSE,
			|	ТаблицаДанныхИзФайла.HOUSING КАК HOUSING,
			|	ТаблицаДанныхИзФайла.FLAT_Исх КАК FLAT,
			|	ТаблицаДанныхИзФайла.SQUARE КАК SQUARE,
			|	ТаблицаДанныхИзФайла.MIN_PAY КАК MIN_PAY
			|ИЗ
			|	ТаблицаДанныхИзФайла КАК ТаблицаДанныхИзФайла
			|		ЛЕВОЕ СОЕДИНЕНИЕ втЛицевыеОбслуживаемыеВыбраннойОрганизацией КАК втЛицевыеОбслуживаемыеВыбраннойОрганизацией
			|		ПО ТаблицаДанныхИзФайла.ACCOUNT = втЛицевыеОбслуживаемыеВыбраннойОрганизацией.ACCOUNT";
			
			ТаблицаДанных = Запрос.Выполнить().Выгрузить();
			
			Объект.ИркутскаяОбласть_РеестрКапремонт.Загрузить(ТаблицаДанных);
			
			Элементы.ИркутскаяОбласть_РеестрКапремонтSQUARE.ТекстПодвала = ТаблицаДанных.Итог("SQUARE");
			
		Иначе
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
			|	ВЫБОР
			|		КОГДА &РеквизитомДляИдентификацииЯвляетсяНаименование
			|			ТОГДА УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.Наименование
			|		ИНАЧЕ УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.Идентификатор
			|	КОНЕЦ КАК ACCOUNT
			|ПОМЕСТИТЬ втЛицевыеОбслуживаемыеВыбраннойОрганизацией
			|ИЗ
			|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(&ДатаКон, Организация = &Организация) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаДанныхИзФайла.ЛицевойСчет КАК ЛицевойСчет,
			|	ТаблицаДанныхИзФайла.ACCOUNT КАК ACCOUNT,
			|	ТаблицаДанныхИзФайла.TOWN КАК TOWN,
			|	ТаблицаДанныхИзФайла.STREET КАК STREET,
			|	ТаблицаДанныхИзФайла.HOUSE КАК HOUSE,
			|	ТаблицаДанныхИзФайла.HOUSING КАК HOUSING,
			|	ТаблицаДанныхИзФайла.FLAT_Исх КАК FLAT_Исх,
			|	ТаблицаДанныхИзФайла.RG_COUNT КАК RG_COUNT,
			|	ТаблицаДанныхИзФайла.FT_COUNT КАК FT_COUNT
			|ПОМЕСТИТЬ ТаблицаДанныхИзФайла
			|ИЗ
			|	&ТаблицаДанныхИзФайла КАК ТаблицаДанныхИзФайла
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЕСТЬNULL(втЛицевыеОбслуживаемыеВыбраннойОрганизацией.ЛицевойСчет, ТаблицаДанныхИзФайла.ЛицевойСчет) КАК ЛицевойСчет,
			|	ТаблицаДанныхИзФайла.ACCOUNT КАК ACCOUNT,
			|	ТаблицаДанныхИзФайла.TOWN КАК TOWN,
			|	ТаблицаДанныхИзФайла.STREET КАК STREET,
			|	ТаблицаДанныхИзФайла.HOUSE КАК HOUSE,
			|	ТаблицаДанныхИзФайла.HOUSING КАК HOUSING,
			|	ТаблицаДанныхИзФайла.FLAT_Исх КАК FLAT,
			|	ТаблицаДанныхИзФайла.RG_COUNT КАК RG_COUNT,
			|	ТаблицаДанныхИзФайла.FT_COUNT КАК FT_COUNT
			|ИЗ
			|	ТаблицаДанныхИзФайла КАК ТаблицаДанныхИзФайла
			|		ЛЕВОЕ СОЕДИНЕНИЕ втЛицевыеОбслуживаемыеВыбраннойОрганизацией КАК втЛицевыеОбслуживаемыеВыбраннойОрганизацией
			|		ПО ТаблицаДанныхИзФайла.ACCOUNT = втЛицевыеОбслуживаемыеВыбраннойОрганизацией.ACCOUNT";
			
			ТаблицаДанных = Запрос.Выполнить().Выгрузить();
			
			Объект.ИркутскаяОбласть_РеестрТКО.Загрузить(ТаблицаДанных);
			
			Элементы.ИркутскаяОбласть_РеестрТКОRG_COUNT.ТекстПодвала = ТаблицаДанных.Итог("RG_COUNT");
			Элементы.ИркутскаяОбласть_РеестрТКОFT_COUNT.ТекстПодвала = ТаблицаДанных.Итог("FT_COUNT");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ИдентифицироватьЛицевыеСчетаИзБазыНаСервере()

// Предназначена для выбора способа считывания данных в зависимости от типа реестра и формата файла.
//
&НаКлиенте
Процедура ПрочитатьСведенияИзФайлов()
	
	// 1. В зависимости от того, какой формат загружаемых файлов установлен("DBF" или "XLS"), необходимо запустить механизм считывания того или иного формата файла.
	// Могут возникнуть проблемы с передачей файлов из клиента на сервер.
	// Спросить у Вовы, в какой выгрузке он реализовал подобную передачу файлов.
	
	Если НЕ ПустаяСтрока(РеестрЛСПоЖКУ) Тогда
		Если ФорматЗагружаемогоВыгружаемогоФайлаЖКУ = 0 Тогда // DBF
			ТипРеестра = "ЖКУ";
			СчитатьСведенияИзФайловDBF();
		Иначе // XLS
			ТипРеестра = "ЖКУ";
			СчитатьСведенияИзФайловXLS();
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(РеестрЛСПоКапРемонт) Тогда
		Если ФорматЗагружаемогоВыгружаемогоФайлаКапремонт = 0 Тогда // DBF
			ТипРеестра = "Капремонт";
			СчитатьСведенияИзФайловDBF();
		Иначе // XLS
			ТипРеестра = "Капремонт";
			СчитатьСведенияИзФайловXLS();
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(РеестрЛСПоТКО) Тогда
		ТипРеестра = "ТКО";
		СчитатьСведенияИзФайловDBF();
	КонецЕсли;
	
КонецПроцедуры // ПрочитатьСведенияИзФайловИЗаписатьВТаблицыСтруктуры()

// Процедура предназначена для проверки существования считываемого DBF-файла с реестром.
//
&НаКлиенте
Процедура СчитатьСведенияИзФайловDBF()
	
	Если ТипРеестра = "ЖКУ" Тогда
		ТекущийРеестр         = РеестрЛСПоЖКУ;
		ТекущаяКодировкаФайла = КодировкаФайлаDBFЖКУ;
	ИначеЕсли ТипРеестра = "Капремонт" Тогда
		ТекущийРеестр         = РеестрЛСПоКапРемонт;
		ТекущаяКодировкаФайла = КодировкаФайлаDBFКапремонт;
	Иначе
		ТекущийРеестр         = РеестрЛСПоТКО;
		ТекущаяКодировкаФайла = КодировкаФайлаDBFТКО;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ТипРеестра, ТекущийРеестр, ТекущаяКодировкаФайла");
	ДополнительныеПараметры.ТипРеестра            = ТипРеестра;
	ДополнительныеПараметры.ТекущийРеестр         = ТекущийРеестр;
	ДополнительныеПараметры.ТекущаяКодировкаФайла = ТекущаяКодировкаФайла;
	
	ФайлРеестрЛС = Новый Файл(ТекущийРеестр);
	
	ФайлРеестрЛС.НачатьПроверкуСуществования(Новый ОписаниеОповещения("СчитатьСведенияИзФайловDBFЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры // СчитатьСведенияИзФайловDBF()

// Процедура предназначена для обработки результата проверки существования DBF-файла с реестром 
// и считывания данных (при существовании файла).
&НаКлиенте
Функция СчитатьСведенияИзФайловDBFЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	ТипРеестра            = ДополнительныеПараметры.ТипРеестра;
	ТекущийРеестр         = ДополнительныеПараметры.ТекущийРеестр;
	ТекущаяКодировкаФайла = ДополнительныеПараметры.ТекущаяКодировкаФайла;
	
	Если ТипРеестра = "ЖКУ" Тогда
		ТекстДляСообщенияОбОшибке    = "ЖКУ";
		РеквизитДляСообщенияОбОшибке = "РеестрЛСПоЖКУ";
	ИначеЕсли ТипРеестра = "Капремонт" Тогда
		ТекстДляСообщенияОбОшибке    = "капремонту";
		РеквизитДляСообщенияОбОшибке = "РеестрЛСПоКапРемонт";
	Иначе
		ТекстДляСообщенияОбОшибке    = "оплате за обращение с твердыми коммунальными отходами";
		РеквизитДляСообщенияОбОшибке = "РеестрЛСПоТКО";
	КонецЕсли;
	
	Если Существует Тогда
		
		// 1. Реализовать считывание сведений из файла по ЖКУ и капремонту.
		врДанныеФайла = Новый ДвоичныеДанные(ТекущийРеестр);
		ВременныйФайл = "";
		#Если НЕ ВебКлиент Тогда
		ВременныйФайл = ПолучитьИмяВременногоФайла("DBF");
		#КонецЕсли
		
		// Для чтения *.dbf формата урежем имя временного файла.
		ФайлДБФ = Новый Файл(ВременныйФайл);
		
		СтароеИмяФайла = ФайлДБФ.ИмяБезРасширения + ".DBF";
		НовоеИмяФайла  = Лев(ФайлДБФ.ИмяБезРасширения, 8) + ".DBF";
		ВременныйФайл  = СтрЗаменить(ФайлДБФ.ПолноеИмя, СтароеИмяФайла, НовоеИмяФайла);
		
		врДанныеФайла.Записать(ВременныйФайл);
		
		ФайлРеестрЛС = Новый XBase;
		#Если НЕ ВебКлиент Тогда
		ФайлРеестрЛС.Кодировка = ?(ТекущаяКодировкаФайла = 1, КодировкаXBase.ANSI, КодировкаXBase.OEM);
		#КонецЕсли
		ФайлРеестрЛС.ОткрытьФайл(ВременныйФайл, , Истина);
		
		Если ФайлРеестрЛС.Открыта() Тогда
			
			// Добавить проверку соответствия состава полей из считываемого файла, с составом из соглашения.
			ФорматФайлаСоответствуетСоглашению = СравнитьФорматФайлаССоглашениемDBF(ФайлРеестрЛС, ТипРеестра);
			Если ФорматФайлаСоответствуетСоглашению Тогда
				Пока Не ФайлРеестрЛС.ВКонце() Цикл
					
					Если ТипРеестра = "ЖКУ" Тогда
						НоваяСтрока = Объект.ИркутскаяОбласть_РеестрЖКУ.Добавить();
						НоваяСтрока.TOWN       = СокрЛП(ФайлРеестрЛС.TOWN);
						НоваяСтрока.TOWN_Исх   = НоваяСтрока.TOWN;
						НоваяСтрока.STREET     = СокрЛП(ФайлРеестрЛС.STREET);
						НоваяСтрока.STREET_Исх = НоваяСтрока.STREET;
						НоваяСтрока.HOUSE      = СокрЛП(ФайлРеестрЛС.HOUSE);
						НоваяСтрока.HOUSING    = СокрЛП(ФайлРеестрЛС.HOUSING);
						НоваяСтрока.FLAT       = СокрЛП(ФайлРеестрЛС.FLAT);
						НоваяСтрока.FLAT_Исх   = НоваяСтрока.FLAT;
						Если ПустаяСтрока(НоваяСтрока.FLAT) Тогда
							НоваяСтрока.FLAT = "1";
						КонецЕсли;
						НоваяСтрока.PER_MONTH  = СокрЛП(ФайлРеестрЛС.PER_MONTH);
						НоваяСтрока.PER_YEAR   = СокрЛП(ФайлРеестрЛС.PER_YEAR);
						НоваяСтрока.ACCOUNT    = СокрЛП(ФайлРеестрЛС.ACCOUNT);
					ИначеЕсли ТипРеестра = "Капремонт" Тогда
						НоваяСтрока = Объект.ИркутскаяОбласть_РеестрКапремонт.Добавить();
						НоваяСтрока.ACCOUNT    = СокрЛП(ФайлРеестрЛС.ACCOUNT);
						НоваяСтрока.TOWN       = СокрЛП(ФайлРеестрЛС.TOWN);
						НоваяСтрока.TOWN_Исх   = НоваяСтрока.TOWN;
						НоваяСтрока.STREET     = СокрЛП(ФайлРеестрЛС.STREET);
						НоваяСтрока.STREET_Исх = НоваяСтрока.STREET;
						НоваяСтрока.HOUSE      = СокрЛП(ФайлРеестрЛС.HOUSE);
						НоваяСтрока.HOUSING    = СокрЛП(ФайлРеестрЛС.HOUSING);
						НоваяСтрока.FLAT       = СокрЛП(ФайлРеестрЛС.FLAT);
						НоваяСтрока.FLAT_Исх   = НоваяСтрока.FLAT;
						Если ПустаяСтрока(НоваяСтрока.FLAT) Тогда
							НоваяСтрока.FLAT = "1";
						КонецЕсли;
						НоваяСтрока.SQUARE     = ФайлРеестрЛС.SQUARE;
						НоваяСтрока.MIN_PAY    = ФайлРеестрЛС.MIN_PAY;
						НоваяСтрока.NUM_MONTHS = ФайлРеестрЛС.NUM_MONTHS;
					Иначе
						НоваяСтрока = Объект.ИркутскаяОбласть_РеестрТКО.Добавить();
						НоваяСтрока.ACCOUNT    = СокрЛП(ФайлРеестрЛС.ACCOUNT);
						НоваяСтрока.TOWN       = СокрЛП(ФайлРеестрЛС.TOWN);
						НоваяСтрока.TOWN_Исх   = НоваяСтрока.TOWN;
						НоваяСтрока.STREET     = СокрЛП(ФайлРеестрЛС.STREET);
						НоваяСтрока.STREET_Исх = НоваяСтрока.STREET;
						НоваяСтрока.HOUSE      = СокрЛП(ФайлРеестрЛС.HOUSE);
						НоваяСтрока.HOUSING    = СокрЛП(ФайлРеестрЛС.HOUSING);
						НоваяСтрока.FLAT       = СокрЛП(ФайлРеестрЛС.FLAT);
						НоваяСтрока.FLAT_Исх   = НоваяСтрока.FLAT;
						Если ПустаяСтрока(НоваяСтрока.FLAT) Тогда
							НоваяСтрока.FLAT = "1";
						КонецЕсли;
					КонецЕсли;
					
					ФайлРеестрЛС.Следующая();
					
				КонецЦикла;
			Иначе
				СтрокаСообщения = "Указанный файл не соответствует формату файла с реестром лицевых счетов по " + ТекстДляСообщенияОбОшибке + "!";
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(СтрокаСообщения, , РеквизитДляСообщенияОбОшибке);
			КонецЕсли;
			ФайлРеестрЛС.ЗакрытьФайл();
			
		Иначе
			СтрокаСообщения = "Не удалось открыть файл с реестром лицевых счетов по " + ТекстДляСообщенияОбОшибке + "!";
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(СтрокаСообщения, , РеквизитДляСообщенияОбОшибке);
		КонецЕсли;
		
	Иначе
		
		СтрокаСообщения = "Выбранный файл с реестром лицевых счетов по " + ТекстДляСообщенияОбОшибке + " не существует. Выберите другой файл";
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(СтрокаСообщения, , РеквизитДляСообщенияОбОшибке);
		
	КонецЕсли;
	
	ИдентифицироватьЛицевыеСчетаИзБазыНаСервере();
	
КонецФункции // СчитатьСведенияИзФайловDBFЗавершение()

// Процедура предназначена для проверки существования считываемого XLS-файла с реестром.
//
&НаКлиенте
Процедура СчитатьСведенияИзФайловXLS()
	
	Если ТипРеестра = "ЖКУ" Тогда
		ТекущийРеестр = РеестрЛСПоЖКУ;
	Иначе
		ТекущийРеестр = РеестрЛСПоКапРемонт;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ТипРеестра, ТекущийРеестр");
	ДополнительныеПараметры.ТипРеестра    = ТипРеестра;
	ДополнительныеПараметры.ТекущийРеестр = ТекущийРеестр;
	
	ФайлРеестрЛС = Новый Файл(ТекущийРеестр);
	
	ФайлРеестрЛС.НачатьПроверкуСуществования(Новый ОписаниеОповещения("СчитатьСведенияИзФайловXLSЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры // СчитатьСведенияИзФайловXLS()

// Процедура предназначена для обработки результата проверки существования XLS-файла с реестром 
// и считывания данных (при существовании файла).
&НаКлиенте
Функция СчитатьСведенияИзФайловXLSЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	ТипРеестра            = ДополнительныеПараметры.ТипРеестра;
	ТекущийРеестр         = ДополнительныеПараметры.ТекущийРеестр;
	
	Если Существует Тогда
		АдресВременногоХранилища = "";
		НачатьПомещениеФайла(Новый ОписаниеОповещения("ОповещениеОЗавершенииПомещенияФайлаXLS", ЭтаФорма, ДополнительныеПараметры), АдресВременногоХранилища, ТекущийРеестр, Ложь, ЭтаФорма.УникальныйИдентификатор);
	Иначе
		СтрокаСообщения = "Выбранный файл с реестром лицевых счетов по " + ?(ТипРеестра = "ЖКУ", "ЖКУ", "капремонту") + " не существует. Выберите другой файл";
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(СтрокаСообщения, , ?(ТипРеестра = "ЖКУ", "РеестрЛСПоЖКУ", "РеестрЛСПоКапРемонт"));
	КонецЕсли;
	
КонецФункции // СчитатьСведенияИзФайловDBFЗавершение()

// Обработчик оповещения о завершении помещения XLS-файла во временное хранилище.
//
&НаКлиенте
Процедура ОповещениеОЗавершенииПомещенияФайлаXLS(Результат, АдресВременногоХранилища, ИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		Файл = Новый Файл(ИмяФайла);
		СчитатьФайлXLSНаСервере(АдресВременногоХранилища, Файл.Имя);
	Иначе
		СтрокаСообщения = "Не удалось открыть файл с реестром лицевых счетов по " + ?(ТипРеестра = "ЖКУ", "ЖКУ", "капремонту") + " для чтения!" + Символы.ПС
						+ "Возможно файл поврежден или отсутствует приложение для чтения.";
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(СтрокаСообщения, , ?(ТипРеестра = "ЖКУ", "РеестрЛСПоЖКУ", "РеестрЛСПоКапРемонт"));
	КонецЕсли;
	
КонецПроцедуры // ОповещениеОЗавершенииПомещенияФайлаXLS()

// Открывает и считывает данные из XLS-файла c реестром.
//
&НаСервере
Процедура СчитатьФайлXLSНаСервере(АдресВременногоХранилища, ИмяФайла)
	
	Попытка
		
		ПутьКВременномуФайлу = КаталогВременныхФайлов() + ИмяФайла;
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
		ДвоичныеДанные.Записать(ПутьКВременномуФайлу);
		
		ТаблицаДляЗагрузки = Новый ТабличныйДокумент;
		ТаблицаДляЗагрузки.Прочитать(ПутьКВременномуФайлу, СпособЧтенияЗначенийТабличногоДокумента.Текст);
		
		ПоследняяСтрока   = ТаблицаДляЗагрузки.ВысотаТаблицы;
		КоличествоКолонок = ТаблицаДляЗагрузки.ШиринаТаблицы;
		
		МассивДанныхФайла = ТаблицаДляЗагрузки.ПолучитьОбласть(1, 1, ПоследняяСтрока, КоличествоКолонок);
		
		СтруктураПараметровФайла = Новый Структура;
		СтруктураПараметровФайла.Вставить("ПоследняяСтрока",   ПоследняяСтрока);
		СтруктураПараметровФайла.Вставить("КоличествоКолонок", КоличествоКолонок);
		
		// Таблица значений, заполняемая данными из файла.
		ТаблицаДанныхФайла = Новый ТаблицаЗначений;
		
		// Добавляем колонки для заполнения. Количество колонок = количеству колонок в файле.
		Для ТекИндекс = 1 По КоличествоКолонок Цикл
			ТаблицаДанныхФайла.Колонки.Добавить("Колонка" + ТекИндекс);
		КонецЦикла;
		
		// Добавляем пустые строки. Количество строк = количеству строк в файле.
		Для ТекИндекс = 1 По ПоследняяСтрока Цикл
			ТаблицаДанныхФайла.Добавить();
		КонецЦикла;
		
		// Формируем массив с пустыми строками.
		МассивСтрокДляУдаления = Новый Массив;
		
		// Загружаем массивы данных в колонки таблицы данных.
		Для ТекИндексСтроки = 1 по ПоследняяСтрока Цикл
			СчетчикНезаполненныхКолонок = 0;
			Для ТекИндексКолонки = 1 По КоличествоКолонок Цикл
				Ячейка = МассивДанныхФайла.Область(ТекИндексСтроки, ТекИндексКолонки, ТекИндексСтроки, ТекИндексКолонки);
				ТаблицаДанныхФайла[ТекИндексСтроки - 1][ТекИндексКолонки - 1] = Ячейка.Текст;
				Если (ТекИндексКолонки = 1 ИЛИ ТекИндексКолонки = 2 ИЛИ ТекИндексКолонки = 3) И СокрЛП(Ячейка.Текст) = "" Тогда
					СчетчикНезаполненныхКолонок = СчетчикНезаполненныхКолонок + 1;
				КонецЕсли;
			КонецЦикла;
			
			Если СчетчикНезаполненныхКолонок = 3 Тогда
				МассивСтрокДляУдаления.Добавить(ТаблицаДанныхФайла[ТекИндексСтроки-1]);
			КонецЕсли;
			
		КонецЦикла;
		
		Для каждого ТекСтрока Из МассивСтрокДляУдаления Цикл
			ТаблицаДанныхФайла.Удалить(ТекСтрока);
		КонецЦикла;
		
		// Организовать заполнение таблиц реестров в зависимости от переданного типа.
		ПервыйПроход = Истина;
		Для каждого ТекСтрока Из ТаблицаДанныхФайла Цикл
			Если ПервыйПроход Тогда
				ФорматФайлаСоответствуетСоглашению = СравнитьФорматФайлаССоглашениемXLS(ТекСтрока, КоличествоКолонок);
				Если НЕ ФорматФайлаСоответствуетСоглашению Тогда
					СтрокаСообщения = "Указанный файл не соответствует формату файла с реестром лицевых счетов по " + ?(ТипРеестра = "ЖКУ", "ЖКУ", "капремонту") + "!";
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(СтрокаСообщения);
					Прервать;
				КонецЕсли;
				ПервыйПроход = Ложь;
				Продолжить;
			КонецЕсли;
			
			Если ТипРеестра = "ЖКУ" Тогда
				НоваяСтрока = Объект.ИркутскаяОбласть_РеестрЖКУ.Добавить();
				НоваяСтрока.TOWN      = СокрЛП(ТекСтрока[0]);
				НоваяСтрока.TOWN_Исх  = НоваяСтрока.TOWN;
				НоваяСтрока.STREET    = СокрЛП(ТекСтрока[1]);
				НоваяСтрока.STREET_Исх  = НоваяСтрока.STREET;
				НоваяСтрока.HOUSE     = СокрЛП(ТекСтрока[2]);
				НоваяСтрока.HOUSING   = СокрЛП(ТекСтрока[3]);
				НоваяСтрока.FLAT      = СокрЛП(ТекСтрока[4]);
				НоваяСтрока.FLAT_Исх = НоваяСтрока.FLAT;
				Если ПустаяСтрока(НоваяСтрока.FLAT) Тогда
					НоваяСтрока.FLAT = "1";
				КонецЕсли;
				НоваяСтрока.PER_MONTH = СокрЛП(ТекСтрока[5]);
				НоваяСтрока.PER_YEAR  = СокрЛП(ТекСтрока[6]);
				НоваяСтрока.ACCOUNT   = СокрЛП(ТекСтрока[7]);
				НоваяСтрока.RG_COUNT   = ТекСтрока[8];
				НоваяСтрока.FT_COUNT   = ТекСтрока[9];
				НоваяСтрока.OWNERSHP   = СокрЛП(ТекСтрока[10]);
				НоваяСтрока.SQUARE     = ТекСтрока[11];
			Иначе
				НоваяСтрока = Объект.ИркутскаяОбласть_РеестрКапремонт.Добавить();
				НоваяСтрока.ACCOUNT = СокрЛП(ТекСтрока[0]);
				НоваяСтрока.TOWN    = СокрЛП(ТекСтрока[1]);
				НоваяСтрока.TOWN_Исх  = НоваяСтрока.TOWN;
				НоваяСтрока.STREET  = СокрЛП(ТекСтрока[2]);
				НоваяСтрока.STREET_Исх  = НоваяСтрока.STREET;
				НоваяСтрока.HOUSE   = СокрЛП(ТекСтрока[3]);
				НоваяСтрока.HOUSING = СокрЛП(ТекСтрока[4]);
				НоваяСтрока.FLAT    = СокрЛП(ТекСтрока[5]);
				НоваяСтрока.FLAT_Исх = НоваяСтрока.FLAT;
				Если ПустаяСтрока(НоваяСтрока.FLAT) Тогда
					НоваяСтрока.FLAT = "1";
				КонецЕсли;
				НоваяСтрока.SQUARE  = ТекСтрока[6];
				НоваяСтрока.MIN_PAY = ТекСтрока[8];
			КонецЕсли;
			
		КонецЦикла;
		
		УдалитьФайлы(ПутьКВременномуФайлу);
		
	Исключение
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось открыть файл данных для чтения!
						  |Возможно файл поврежден или отсутствует приложение для чтения файла.");
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ИдентифицироватьЛицевыеСчетаИзБазыНаСервере();
	
КонецПроцедуры // СчитатьФайлXLSНаСервере()

// Предназначена для сравнения набора полей, считываемого XLS-файла, с набором полей, который определен
// в Соглашении, в соответствии с которым разработана выгрузка (содержится в справочной информации).
&НаСервере
Функция СравнитьФорматФайлаССоглашениемXLS(СтрокаСНаименованиямиКолонокВФайле, КоличествоКолонок)
	
	МассивОбъязательныхПолейДляПроверки = Новый Массив;
	МассивОбъязательныхПолейДляПроверки.Добавить("Наименование населенного пункта");
	МассивОбъязательныхПолейДляПроверки.Добавить("Наименование улицы");
	МассивОбъязательныхПолейДляПроверки.Добавить("Номер дома");
	МассивОбъязательныхПолейДляПроверки.Добавить("Номер корпуса");
	МассивОбъязательныхПолейДляПроверки.Добавить("Номер квартиры");
	МассивОбъязательныхПолейДляПроверки.Добавить("Номер лицевого счета");
	
	СчетчикСоответствияПолей = 0;
	
	Сч = 0;
	Пока Сч < КоличествоКолонок Цикл
		
		Если МассивОбъязательныхПолейДляПроверки.Найти(СтрокаСНаименованиямиКолонокВФайле[Сч]) <> Неопределено Тогда
			СчетчикСоответствияПолей = СчетчикСоответствияПолей + 1;
		КонецЕсли;
		
		Сч = Сч + 1;
	КонецЦикла;
	
	Возврат ?(СчетчикСоответствияПолей = 6, Истина, Ложь);
	
КонецФункции // СравнитьФорматФайлаССоглашениемXLS()

// Предназначена для сравнения набора полей, считываемого DBF-файла, с набором полей, который определен
// в Соглашении, в соответствии с которым разработана выгрузка (содержится в справочной информации).
&НаКлиенте
Функция СравнитьФорматФайлаССоглашениемDBF(Файл, ТипРеестра)
	
	ФорматФайлаСоответствуетСоглашению = Истина;
	
	Если Файл.Поля.Найти("TOWN") = Неопределено Тогда
		ФорматФайлаСоответствуетСоглашению = Ложь;
	КонецЕсли;
	
	Если Файл.Поля.Найти("STREET") = Неопределено Тогда
		ФорматФайлаСоответствуетСоглашению = Ложь;
	КонецЕсли;
	
	Если Файл.Поля.Найти("HOUSE") = Неопределено Тогда
		ФорматФайлаСоответствуетСоглашению = Ложь;
	КонецЕсли;
	
	Если Файл.Поля.Найти("HOUSING") = Неопределено Тогда
		ФорматФайлаСоответствуетСоглашению = Ложь;
	КонецЕсли;
	
	Если Файл.Поля.Найти("FLAT") = Неопределено Тогда
		ФорматФайлаСоответствуетСоглашению = Ложь;
	КонецЕсли;
	
	Если Файл.Поля.Найти("ACCOUNT") = Неопределено Тогда
		ФорматФайлаСоответствуетСоглашению = Ложь;
	КонецЕсли;
	
	Если ТипРеестра = "ЖКУ" Тогда
		
		Если Файл.Поля.Найти("PER_MONTH") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
		Если Файл.Поля.Найти("PER_YEAR") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
		Если Файл.Поля.Найти("RG_COUNT") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
		Если Файл.Поля.Найти("FT_COUNT") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
		Если Файл.Поля.Найти("OWNERSHP") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
		Если Файл.Поля.Найти("SQUARE") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
		Если Файл.Поля.Найти("ACRUAL1") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
		Если Файл.Поля.Найти("TARIFF1") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
		Если Файл.Поля.Найти("ACRUAL2") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
		Если Файл.Поля.Найти("TARIFF2") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
		Если Файл.Поля.Найти("NORM2") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
		Если Файл.Поля.Найти("NORM18") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
		Если Файл.Поля.Найти("ACRUAL3") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
		Если Файл.Поля.Найти("ACRUAL4") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
		Если Файл.Поля.Найти("TARIFF4") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
		Если Файл.Поля.Найти("NORM4") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
		Если Файл.Поля.Найти("ACRUAL5") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
		Если Файл.Поля.Найти("TARIFF12") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
		Если Файл.Поля.Найти("NORM12") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
		Если Файл.Поля.Найти("ACRUAL6") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
		Если Файл.Поля.Найти("TARIFF6") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
		Если Файл.Поля.Найти("NORM6") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
		Если Файл.Поля.Найти("ACRUAL7") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
		Если Файл.Поля.Найти("ACRUAL8") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
		Если Файл.Поля.Найти("TARIFF8") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
		Если Файл.Поля.Найти("NORM8") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
		Если Файл.Поля.Найти("ACRUAL35") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
		Если Файл.Поля.Найти("ACRUAL9") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
		Если Файл.Поля.Найти("TARIFF9_KUB") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
		Если Файл.Поля.Найти("TARIFF9_GKL") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
		Если Файл.Поля.Найти("NORM9_KUB") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
		Если Файл.Поля.Найти("NORM9_GKAL") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
		Если Файл.Поля.Найти("ACRUAL10") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
		Если Файл.Поля.Найти("ACRUAL11") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
		Если Файл.Поля.Найти("TARIFF11") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
		Если Файл.Поля.Найти("NORM46") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
		Если Файл.Поля.Найти("DBT_MONT") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
	ИначеЕсли ТипРеестра = "Капремонт" Тогда
		
		Если Файл.Поля.Найти("SQUARE") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
		Если Файл.Поля.Найти("PAYMENT") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
		Если Файл.Поля.Найти("MIN_PAY") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
		Если Файл.Поля.Найти("NUM_MONTHS") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
	Иначе
		
		Если Файл.Поля.Найти("RG_COUNT") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
		Если Файл.Поля.Найти("FT_COUNT") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
		Если Файл.Поля.Найти("PAYMENT") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
		Если Файл.Поля.Найти("TARIFF13") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
		Если Файл.Поля.Найти("NORM13") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
		Если Файл.Поля.Найти("DBT_MONT") = Неопределено Тогда
			ФорматФайлаСоответствуетСоглашению = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ФорматФайлаСоответствуетСоглашению;
	
КонецФункции // СравнитьФорматФайлаССоглашением()

// Предназначена для исключения из наименований городов и улиц адресных сокращений.
//
&НаСервереБезКонтекста
Процедура ИсключитьАдресныеСокращенияИзНаименованияГородовИУлиц(ТекущаяТаблица, МассивСокрНасПункт, МассивСокрУлицы, ЗаполнитьНомерКвартиры = Ложь)
	
	Для каждого ТекСтрока Из ТекущаяТаблица Цикл
		ТекСтрока.TOWN   = НормализацияПолейАдресаИркутскаяОбласть(НРег(ТекСтрока.TOWN), МассивСокрНасПункт);
		ТекСтрока.STREET = НормализацияПолейАдресаИркутскаяОбласть(НРег(ТекСтрока.STREET), МассивСокрУлицы);
		Если ЗаполнитьНомерКвартиры Тогда
			ТекСтрока.FLAT = "" + ТекСтрока.Квартира;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ИсключитьАдресныеСокращенияИзНаименованияГородовИУлиц()

// Функция сокращает название города или улицы: убирает сокращения,
// определяющие тип данного элемента адреса: "г.", "ул." и так далее.
//
// Параметры:
//  Ресурс       - Строка - элемент адреса.
//
// Возвращаемое значение:
//  Строка - элемент адреса в сокращенном виде.
//
&НаСервереБезКонтекста
Функция НормализацияПолейАдресаИркутскаяОбласть(Ресурс, Массив)
	
	Найден = Истина;
	
	Для Каждого Элемент Из Массив Цикл
		
		Если Прав(СокрЛП(Ресурс), СтрДлина(Элемент)) = Элемент Тогда
			ПредСимвол = Сред(СокрЛП(Ресурс), СтрДлина(СокрЛП(Ресурс)) - СтрДлина(Элемент), 1);
			
			Если ПредСимвол = " " Тогда
				Возврат СокрЛП(Лев(СокрЛП(Ресурс), СтрДлина(СокрЛП(Ресурс)) - СтрДлина(Элемент)));
			ИначеЕсли ПредСимвол = "." Тогда
				Возврат СокрЛП(Лев(СокрЛП(Ресурс), СтрДлина(СокрЛП(Ресурс)) - СтрДлина(Элемент) - 1));
			КонецЕсли;
		ИначеЕсли Лев(СокрЛП(Ресурс), СтрДлина(Элемент)) = Элемент Тогда
			СледСимвол = Сред(СокрЛП(Ресурс), СтрДлина(Элемент) + 1, 1);
			
			Если СледСимвол = " " Тогда
				Возврат СокрЛП(Сред(СокрЛП(Ресурс), СтрДлина(Элемент) + 1));
			ИначеЕсли СледСимвол = "." Тогда
				Возврат СокрЛП(Сред(СокрЛП(Ресурс), СтрДлина(Элемент) + 2));
			КонецЕсли;
		Иначе
			
			Найден = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Найден = Ложь Тогда
		Возврат Ресурс;
	КонецЕсли;
	
КонецФункции

// Формирует массив сокращений для выбранного вида сокращения.
//
&НаСервереБезКонтекста
Функция СформироватьМассивСокращениеПоВиду(ВидСокращение)
		
	МассивСокращений = Новый Массив;
	// для нас.пунктов
	Если ВидСокращение = 1 Тогда
		МассивСокращений.Добавить("г");
		МассивСокращений.Добавить("г.");
		МассивСокращений.Добавить("п");
		МассивСокращений.Добавить("п.");
		МассивСокращений.Добавить("с");
		МассивСокращений.Добавить("с.");
		МассивСокращений.Добавить("д");
		МассивСокращений.Добавить("д.");
		МассивСокращений.Добавить("дп");
		МассивСокращений.Добавить("нп");
		МассивСокращений.Добавить("рп");
		МассивСокращений.Добавить("снт");
		МассивСокращений.Добавить("ст");
		// для улиц
	ИначеЕсли ВидСокращение = 2 Тогда
		МассивСокращений.Добавить("ул");
		МассивСокращений.Добавить("пл");
		МассивСокращений.Добавить("пер");
		МассивСокращений.Добавить("снт");
		МассивСокращений.Добавить("проезд");
		МассивСокращений.Добавить("б-р");
		МассивСокращений.Добавить("туп");
		МассивСокращений.Добавить("п");
		МассивСокращений.Добавить("ш");
		МассивСокращений.Добавить("пр-кт");
		МассивСокращений.Добавить("пр-кт.");
		МассивСокращений.Добавить("тракт");
		МассивСокращений.Добавить("сквер");
		МассивСокращений.Добавить("наб");
		МассивСокращений.Добавить("км");
		МассивСокращений.Добавить("ж/д_ст");
		МассивСокращений.Добавить("сад");
		МассивСокращений.Добавить("парк");
		МассивСокращений.Добавить("кв-л");
		МассивСокращений.Добавить("аллея");
	КонецЕсли;
	
	Возврат МассивСокращений;
	
КонецФункции // СформироватьМассивСокращениеДляАрхангельскойОблПоВиду()

// Предназначена для идентификации лицевых счетов из файла с реестром лицевых счетов
// с лицевыми счетами из справочника "Лицевые счета" по совпадению адреса.
//
&НаСервере
Процедура ИдентифицироватьЛСИзРеестра(ТекущаяТаблица, ТаблицаЛицевыхСчетовИзБазыСАдресами, ТипРеестра, МассивСокрНасПункт, МассивСокрУлицы)
	
	// Исключим адресные сокращения из наименования городов и улиц.
	ИсключитьАдресныеСокращенияИзНаименованияГородовИУлиц(ТекущаяТаблица, МассивСокрНасПункт, МассивСокрУлицы);
	
	// Теперь необходимо сопоставить лицевые счета по адресным полям поиска.
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТаблицаДанныхИзФайла",                ТекущаяТаблица);
	Запрос.УстановитьПараметр("ТаблицаЛицевыхСчетовИзБазыСАдресами", ТаблицаЛицевыхСчетовИзБазыСАдресами);
	
	Если ТипРеестра = "ЖКУ" Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДанныхИзФайла.ЛицевойСчет КАК ЛицевойСчет,
		|	ТаблицаДанныхИзФайла.TOWN КАК TOWN,
		|	ТаблицаДанныхИзФайла.TOWN_Исх КАК TOWN_Исх,
		|	ТаблицаДанныхИзФайла.STREET КАК STREET,
		|	ТаблицаДанныхИзФайла.STREET_Исх КАК STREET_Исх,
		|	ТаблицаДанныхИзФайла.HOUSE КАК HOUSE,
		|	ТаблицаДанныхИзФайла.HOUSING КАК HOUSING,
		|	ТаблицаДанныхИзФайла.FLAT КАК FLAT,
		|	ТаблицаДанныхИзФайла.FLAT_Исх КАК FLAT_Исх,
		|	ТаблицаДанныхИзФайла.PER_MONTH КАК PER_MONTH,
		|	ТаблицаДанныхИзФайла.PER_YEAR КАК PER_YEAR,
		|	ТаблицаДанныхИзФайла.ACCOUNT КАК ACCOUNT,
		|	ТаблицаДанныхИзФайла.RG_COUNT КАК RG_COUNT,
		|	ТаблицаДанныхИзФайла.FT_COUNT КАК FT_COUNT,
		|	ТаблицаДанныхИзФайла.OWNERSHP КАК OWNERSHP,
		|	ТаблицаДанныхИзФайла.SQUARE КАК SQUARE,
		|	ТаблицаДанныхИзФайла.ДомСКорпусом КАК ДомСКорпусом
		|ПОМЕСТИТЬ ТаблицаДанныхИзФайла
		|ИЗ
		|	&ТаблицаДанныхИзФайла КАК ТаблицаДанныхИзФайла
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЛицевыхСчетовИзБазыСАдресами.ЛицевойСчет КАК ЛицевойСчет,
		|	ТаблицаЛицевыхСчетовИзБазыСАдресами.TOWN КАК TOWN,
		|	ТаблицаЛицевыхСчетовИзБазыСАдресами.STREET КАК STREET,
		|	ТаблицаЛицевыхСчетовИзБазыСАдресами.HOUSE КАК HOUSE,
		|	ТаблицаЛицевыхСчетовИзБазыСАдресами.HOUSING КАК HOUSING,
		|	ТаблицаЛицевыхСчетовИзБазыСАдресами.FLAT КАК FLAT
		|ПОМЕСТИТЬ втЛицевыеСчетаИзБазы
		|ИЗ
		|	&ТаблицаЛицевыхСчетовИзБазыСАдресами КАК ТаблицаЛицевыхСчетовИзБазыСАдресами
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(втЛицевыеСчетаИзБазы.ЛицевойСчет, ТаблицаДанныхИзФайла.ЛицевойСчет) КАК ЛицевойСчет,
		|	ТаблицаДанныхИзФайла.TOWN_Исх КАК TOWN,
		|	ТаблицаДанныхИзФайла.STREET_Исх КАК STREET,
		|	ТаблицаДанныхИзФайла.HOUSE КАК HOUSE,
		|	ТаблицаДанныхИзФайла.HOUSING КАК HOUSING,
		|	ТаблицаДанныхИзФайла.FLAT_Исх КАК FLAT,
		|	ТаблицаДанныхИзФайла.PER_MONTH КАК PER_MONTH,
		|	ТаблицаДанныхИзФайла.PER_YEAR КАК PER_YEAR,
		|	ТаблицаДанныхИзФайла.ACCOUNT КАК ACCOUNT,
		|	ТаблицаДанныхИзФайла.RG_COUNT КАК RG_COUNT,
		|	ТаблицаДанныхИзФайла.FT_COUNT КАК FT_COUNT,
		|	ТаблицаДанныхИзФайла.OWNERSHP КАК OWNERSHP,
		|	ТаблицаДанныхИзФайла.SQUARE КАК SQUARE
		|ИЗ
		|	ТаблицаДанныхИзФайла КАК ТаблицаДанныхИзФайла
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЛицевыеСчетаИзБазы КАК втЛицевыеСчетаИзБазы
		|		ПО ТаблицаДанныхИзФайла.TOWN = втЛицевыеСчетаИзБазы.TOWN
		|			И ТаблицаДанныхИзФайла.STREET = втЛицевыеСчетаИзБазы.STREET
		|			И (ТаблицаДанныхИзФайла.HOUSE = втЛицевыеСчетаИзБазы.HOUSE
		|					И ТаблицаДанныхИзФайла.HOUSING = втЛицевыеСчетаИзБазы.HOUSING
		|				ИЛИ ТаблицаДанныхИзФайла.ДомСКорпусом = втЛицевыеСчетаИзБазы.HOUSE)
		|			И ТаблицаДанныхИзФайла.FLAT = втЛицевыеСчетаИзБазы.FLAT";
		
		ТаблицаДанных = Запрос.Выполнить().Выгрузить();
		
		Объект.ИркутскаяОбласть_РеестрЖКУ.Загрузить(ТаблицаДанных);
		
		Элементы.ИркутскаяОбласть_РеестрЖКУRG_COUNT.ТекстПодвала = ТаблицаДанных.Итог("RG_COUNT");
		Элементы.ИркутскаяОбласть_РеестрЖКУFT_COUNT.ТекстПодвала = ТаблицаДанных.Итог("FT_COUNT");
		Элементы.ИркутскаяОбласть_РеестрЖКУOWNERSHP.ТекстПодвала = ТаблицаДанных.Итог("OWNERSHP");
		Элементы.ИркутскаяОбласть_РеестрЖКУSQUARE.ТекстПодвала   = ТаблицаДанных.Итог("SQUARE");
		
	ИначеЕсли ТипРеестра = "Капремонт" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДанныхИзФайла.ЛицевойСчет КАК ЛицевойСчет,
		|	ТаблицаДанныхИзФайла.ACCOUNT КАК ACCOUNT,
		|	ТаблицаДанныхИзФайла.TOWN КАК TOWN,
		|	ТаблицаДанныхИзФайла.TOWN_Исх КАК TOWN_Исх,
		|	ТаблицаДанныхИзФайла.STREET КАК STREET,
		|	ТаблицаДанныхИзФайла.STREET_Исх КАК STREET_Исх,
		|	ТаблицаДанныхИзФайла.HOUSE КАК HOUSE,
		|	ТаблицаДанныхИзФайла.HOUSING КАК HOUSING,
		|	ТаблицаДанныхИзФайла.FLAT КАК FLAT,
		|	ТаблицаДанныхИзФайла.FLAT_Исх КАК FLAT_Исх,
		|	ТаблицаДанныхИзФайла.SQUARE КАК SQUARE,
		|	ТаблицаДанныхИзФайла.MIN_PAY КАК MIN_PAY,
		|	ТаблицаДанныхИзФайла.ДомСКорпусом КАК ДомСКорпусом
		|ПОМЕСТИТЬ ТаблицаДанныхИзФайла
		|ИЗ
		|	&ТаблицаДанныхИзФайла КАК ТаблицаДанныхИзФайла
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЛицевыхСчетовИзБазыСАдресами.ЛицевойСчет КАК ЛицевойСчет,
		|	ТаблицаЛицевыхСчетовИзБазыСАдресами.TOWN КАК TOWN,
		|	ТаблицаЛицевыхСчетовИзБазыСАдресами.STREET КАК STREET,
		|	ТаблицаЛицевыхСчетовИзБазыСАдресами.HOUSE КАК HOUSE,
		|	ТаблицаЛицевыхСчетовИзБазыСАдресами.HOUSING КАК HOUSING,
		|	ТаблицаЛицевыхСчетовИзБазыСАдресами.FLAT КАК FLAT
		|ПОМЕСТИТЬ втЛицевыеСчетаИзБазы
		|ИЗ
		|	&ТаблицаЛицевыхСчетовИзБазыСАдресами КАК ТаблицаЛицевыхСчетовИзБазыСАдресами
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(втЛицевыеСчетаИзБазы.ЛицевойСчет, ТаблицаДанныхИзФайла.ЛицевойСчет) КАК ЛицевойСчет,
		|	ТаблицаДанныхИзФайла.ACCOUNT КАК ACCOUNT,
		|	ТаблицаДанныхИзФайла.TOWN_Исх КАК TOWN,
		|	ТаблицаДанныхИзФайла.STREET_Исх КАК STREET,
		|	ТаблицаДанныхИзФайла.HOUSE КАК HOUSE,
		|	ТаблицаДанныхИзФайла.HOUSING КАК HOUSING,
		|	ТаблицаДанныхИзФайла.FLAT_Исх КАК FLAT,
		|	ТаблицаДанныхИзФайла.SQUARE КАК SQUARE,
		|	ТаблицаДанныхИзФайла.MIN_PAY КАК MIN_PAY
		|ИЗ
		|	ТаблицаДанныхИзФайла КАК ТаблицаДанныхИзФайла
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЛицевыеСчетаИзБазы КАК втЛицевыеСчетаИзБазы
		|		ПО ТаблицаДанныхИзФайла.TOWN = втЛицевыеСчетаИзБазы.TOWN
		|			И ТаблицаДанныхИзФайла.STREET = втЛицевыеСчетаИзБазы.STREET
		|			И (ТаблицаДанныхИзФайла.HOUSE = втЛицевыеСчетаИзБазы.HOUSE
		|					И ТаблицаДанныхИзФайла.HOUSING = втЛицевыеСчетаИзБазы.HOUSING
		|				ИЛИ ТаблицаДанныхИзФайла.ДомСКорпусом = втЛицевыеСчетаИзБазы.HOUSE)
		|			И ТаблицаДанныхИзФайла.FLAT = втЛицевыеСчетаИзБазы.FLAT";
		
		ТаблицаДанных = Запрос.Выполнить().Выгрузить();
		
		Объект.ИркутскаяОбласть_РеестрКапремонт.Загрузить(ТаблицаДанных);
		
		Элементы.ИркутскаяОбласть_РеестрКапремонтSQUARE.ТекстПодвала = ТаблицаДанных.Итог("SQUARE");
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДанныхИзФайла.ЛицевойСчет КАК ЛицевойСчет,
		|	ТаблицаДанныхИзФайла.TOWN КАК TOWN,
		|	ТаблицаДанныхИзФайла.TOWN_Исх КАК TOWN_Исх,
		|	ТаблицаДанныхИзФайла.STREET КАК STREET,
		|	ТаблицаДанныхИзФайла.STREET_Исх КАК STREET_Исх,
		|	ТаблицаДанныхИзФайла.HOUSE КАК HOUSE,
		|	ТаблицаДанныхИзФайла.HOUSING КАК HOUSING,
		|	ТаблицаДанныхИзФайла.FLAT КАК FLAT,
		|	ТаблицаДанныхИзФайла.FLAT_Исх КАК FLAT_Исх,
		|	ТаблицаДанныхИзФайла.ACCOUNT КАК ACCOUNT,
		|	ТаблицаДанныхИзФайла.RG_COUNT КАК RG_COUNT,
		|	ТаблицаДанныхИзФайла.FT_COUNT КАК FT_COUNT,
		|	ТаблицаДанныхИзФайла.ДомСКорпусом КАК ДомСКорпусом
		|ПОМЕСТИТЬ ТаблицаДанныхИзФайла
		|ИЗ
		|	&ТаблицаДанныхИзФайла КАК ТаблицаДанныхИзФайла
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаЛицевыхСчетовИзБазыСАдресами.ЛицевойСчет КАК ЛицевойСчет,
		|	ТаблицаЛицевыхСчетовИзБазыСАдресами.TOWN КАК TOWN,
		|	ТаблицаЛицевыхСчетовИзБазыСАдресами.STREET КАК STREET,
		|	ТаблицаЛицевыхСчетовИзБазыСАдресами.HOUSE КАК HOUSE,
		|	ТаблицаЛицевыхСчетовИзБазыСАдресами.HOUSING КАК HOUSING,
		|	ТаблицаЛицевыхСчетовИзБазыСАдресами.FLAT КАК FLAT
		|ПОМЕСТИТЬ втЛицевыеСчетаИзБазы
		|ИЗ
		|	&ТаблицаЛицевыхСчетовИзБазыСАдресами КАК ТаблицаЛицевыхСчетовИзБазыСАдресами
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(втЛицевыеСчетаИзБазы.ЛицевойСчет, ТаблицаДанныхИзФайла.ЛицевойСчет) КАК ЛицевойСчет,
		|	ТаблицаДанныхИзФайла.TOWN_Исх КАК TOWN,
		|	ТаблицаДанныхИзФайла.STREET_Исх КАК STREET,
		|	ТаблицаДанныхИзФайла.HOUSE КАК HOUSE,
		|	ТаблицаДанныхИзФайла.HOUSING КАК HOUSING,
		|	ТаблицаДанныхИзФайла.FLAT_Исх КАК FLAT,
		|	ТаблицаДанныхИзФайла.ACCOUNT КАК ACCOUNT,
		|	ТаблицаДанныхИзФайла.RG_COUNT КАК RG_COUNT,
		|	ТаблицаДанныхИзФайла.FT_COUNT КАК FT_COUNT
		|ИЗ
		|	ТаблицаДанныхИзФайла КАК ТаблицаДанныхИзФайла
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЛицевыеСчетаИзБазы КАК втЛицевыеСчетаИзБазы
		|		ПО ТаблицаДанныхИзФайла.TOWN = втЛицевыеСчетаИзБазы.TOWN
		|			И ТаблицаДанныхИзФайла.STREET = втЛицевыеСчетаИзБазы.STREET
		|			И (ТаблицаДанныхИзФайла.HOUSE = втЛицевыеСчетаИзБазы.HOUSE
		|					И ТаблицаДанныхИзФайла.HOUSING = втЛицевыеСчетаИзБазы.HOUSING
		|				ИЛИ ТаблицаДанныхИзФайла.ДомСКорпусом = втЛицевыеСчетаИзБазы.HOUSE)
		|			И ТаблицаДанныхИзФайла.FLAT = втЛицевыеСчетаИзБазы.FLAT";
		
		ТаблицаДанных = Запрос.Выполнить().Выгрузить();
		
		Объект.ИркутскаяОбласть_РеестрТКО.Загрузить(ТаблицаДанных);
		
		Элементы.ИркутскаяОбласть_РеестрТКОRG_COUNT.ТекстПодвала = ТаблицаДанных.Итог("RG_COUNT");
		Элементы.ИркутскаяОбласть_РеестрТКОFT_COUNT.ТекстПодвала = ТаблицаДанных.Итог("FT_COUNT");
		
	КонецЕсли;
	
КонецПроцедуры // ИдентифицироватьЛСИзРеестра()

#Область Заполнить_данными_из_базы

// Предназначена для подготовки предварительных данных для дозаполнения в таблицы "РеестрЖКУ" и "РеестрКапремонт" сведений об оплатах.
//
&НаСервере
Процедура ЗаполнитьСведенияОбОплатахНаСервере()
	
	// При определении задолженности по лицевому счету не учитываем долги по капитальному ремонту.
	СписокУслугКапремонта = Новый СписокЗначений;
	
	мСтруктураНастроекКапРемонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Объект.Организация, Истина);
	Если мСтруктураНастроекКапРемонта <> Неопределено Тогда
		СписокУслугКапремонта = мСтруктураНастроекКапРемонта.СписокУслуг;
	КонецЕсли;
	
	Если Объект.ИркутскаяОбласть_РеестрЖКУ.Количество() > 0 Тогда
		ДозаполнитьСведенияОбОплатахИТарифахЖКУ(СписокУслугКапремонта);
	КонецЕсли;
	
	Если Объект.ИркутскаяОбласть_РеестрКапремонт.Количество() > 0 Тогда
		ДозаполнитьСведенияОбОплатахИТарифахКапремонт(СписокУслугКапремонта);
	КонецЕсли;
	
	Если Объект.ИркутскаяОбласть_РеестрТКО.Количество() > 0 Тогда
		ДозаполнитьСведенияОбОплатахИТарифахТКО();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСведенияОбОплатахНаСервере()

// Предназначена для дозаполнения сведений об оплатах в таблице "РеестрЖКУ".
//
&НаСервере
Процедура ДозаполнитьСведенияОбОплатахИТарифахЖКУ(СписокУслугКР)
	
	// Запрос по получению сведений об оплатах, нормативах и количествах месяцев задолженности лицевых счетов.
	// 1. Передать в запрос таблицу соответствия услуг в ОСЗН и базе.
	// 2. Выделить списки услуг, для которых необходимо определить оплаты на ОДН и ИНД.
	// 3. Для всех найденных лицевых счетов в базе добавим соответствия услуг из ОСЗН с услугами в базе.
	//    При помощи полного соединения.
	// 4. Для всех соответствий из п.3 определим сведения об оплатах.
	// 5. Для списков услуг из п.2 определим сведения о начислениях на ИНД и ОДН для идентифицированных лс.
	// 6. Для всех соответствий из п.2 определим сведения о нормативах для идентифицированных лс.
	// 7. Для идентифицированных лс определим количество месяцев задолженности по всем услугам, кроме Капремонта.
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаНач",     НачалоМесяца(Объект.Период));
	Запрос.УстановитьПараметр("ДатаКон",     КонецМесяца(Объект.Период));
	
	Запрос.УстановитьПараметр("ДатаНачПредПериода", НачалоМесяца(ДобавитьМесяц(Объект.Период, -1)));
	Запрос.УстановитьПараметр("ДатаКонПредПериода", КонецМесяца(ДобавитьМесяц(Объект.Период, -1)));
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Запрос.УстановитьПараметр("ТекущийМесяцНачисления", НачалоДня(КонецМесяца(Объект.Период)));
	
	// Подготовим списки услуг для реализации п.2 плана запроса.
	//СписокЭлектрическаяЭнергия        = ПодготовитьСписокУслугВБазеПоУникальномуНаименованиюИлиТипуУслуги("ЭлектрическаяЭнергия",        "УникальноеНаименованиеУслуги");
	//СписокХолодноеВодоснабжение       = ПодготовитьСписокУслугВБазеПоУникальномуНаименованиюИлиТипуУслуги("ХолодноеВодоснабжение",       "УникальноеНаименованиеУслуги");
	//СписокОтведениеСточныхВод         = ПодготовитьСписокУслугВБазеПоУникальномуНаименованиюИлиТипуУслуги("ОтведениеСточныхВод",         "УникальноеНаименованиеУслуги");
	//СписокГорячееВодоснабжениеКубМетр = ПодготовитьСписокУслугВБазеПоУникальномуНаименованиюИлиТипуУслуги("ГорячееВодоснабжениеКубМетр", "УникальноеНаименованиеУслуги");
	//СписокГорячееВодоснабжениеГКал    = ПодготовитьСписокУслугВБазеПоУникальномуНаименованиюИлиТипуУслуги("ГорячееВодоснабжениеГКал",    "УникальноеНаименованиеУслуги");
	
	Запрос.УстановитьПараметр("СписокЭлектрическаяЭнергия",        ПодготовитьСписокУслугВБазеПоУникальномуНаименованиюИлиТипуУслуги("ЭлектрическаяЭнергия",        "УникальноеНаименованиеУслуги"));
	Запрос.УстановитьПараметр("СписокХолодноеВодоснабжение",       ПодготовитьСписокУслугВБазеПоУникальномуНаименованиюИлиТипуУслуги("ХолодноеВодоснабжение",       "УникальноеНаименованиеУслуги"));
	Запрос.УстановитьПараметр("СписокОтведениеСточныхВод",         ПодготовитьСписокУслугВБазеПоУникальномуНаименованиюИлиТипуУслуги("ОтведениеСточныхВод",         "УникальноеНаименованиеУслуги"));
	Запрос.УстановитьПараметр("СписокГорячееВодоснабжениеКубМетр", ПодготовитьСписокУслугВБазеПоУникальномуНаименованиюИлиТипуУслуги("ГорячееВодоснабжениеКубМетр", "УникальноеНаименованиеУслуги"));
	Запрос.УстановитьПараметр("СписокГорячееВодоснабжениеГКал",    ПодготовитьСписокУслугВБазеПоУникальномуНаименованиюИлиТипуУслуги("ГорячееВодоснабжениеГКал",    "УникальноеНаименованиеУслуги"));
	Запрос.УстановитьПараметр("СписокТвердыеКоммунальныеОтходы",   ПодготовитьСписокУслугВБазеПоУникальномуНаименованиюИлиТипуУслуги("ТвердыеКоммунальныеОтходы",   "УникальноеНаименованиеУслуги"));
	
	// Необходимо подготовить списки услуг для Инд и ОДН и отправить их в запрос.
	//СписокИндивидуальныхУслуг             = ПодготовитьСписокУслуг("Индивидуальные",               "ТипУслуги");
	//СписокОбщедомовыхУслуг                = ПодготовитьСписокУслуг("Общедомовые",                  "ТипУслуги");
	//СписокИндивидуальныхИОбщедомовыхУслуг = ПодготовитьСписокУслуг("Индивидуальные и общедомовые", "ТипУслуги");
	
	// КДБ +
	// Доработать по ОДН
	
	Запрос.УстановитьПараметр("СписокИндивидуальныхУслуг",             ПодготовитьСписокУслугВБазеПоУникальномуНаименованиюИлиТипуУслуги("Индивидуальная",               "ТипУслуги"));
	Запрос.УстановитьПараметр("СписокОбщедомовыхУслуг",                ПодготовитьСписокУслугВБазеПоУникальномуНаименованиюИлиТипуУслуги("Общедомовая",                  "ТипУслуги"));
	Запрос.УстановитьПараметр("СписокИндивидуальныхИОбщедомовыхУслуг", ПодготовитьСписокУслугВБазеПоУникальномуНаименованиюИлиТипуУслуги("Индивидуальная и общедомовая", "ТипУслуги"));
	
	Запрос.УстановитьПараметр("СписокУслугКР", СписокУслугКР);
	
	// Исключим из таблицы соответствия услуг услугу "Твердые коммунальные отходы",
	// так как по этой услуге реестр выгружается отдельно.
	врТЗСоответствиеУслуг = Объект.ИркутскаяОбласть_ЖКУ_В_Базе.Выгрузить();
	НайденныеСтроки = врТЗСоответствиеУслуг.НайтиСтроки(Новый Структура("УникальноеНаименованиеУслуги", "ТвердыеКоммунальныеОтходы"));
	Для Каждого Строка Из НайденныеСтроки Цикл
		врТЗСоответствиеУслуг.Удалить(Строка);
	КонецЦикла;
	
	Запрос.УстановитьПараметр("СоответствиеУслуг",   врТЗСоответствиеУслуг);
	Запрос.УстановитьПараметр("ТаблицаСРеестромЖКУ", Объект.ИркутскаяОбласть_РеестрЖКУ.Выгрузить());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоответствиеУслуг.УникальноеНаименованиеУслуги КАК УникальноеНаименованиеУслуги,
	|	СоответствиеУслуг.УслугаВБазе КАК УслугаВБазе
	|ПОМЕСТИТЬ СоответствиеУслуг
	|ИЗ
	|	&СоответствиеУслуг КАК СоответствиеУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРеестра.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ втИдентифицированныеЛС
	|ИЗ
	|	&ТаблицаСРеестромЖКУ КАК ТаблицаРеестра
	|ГДЕ
	|	НЕ ТаблицаРеестра.ЛицевойСчет = ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИдентифицированныеЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	СоответствиеУслуг.УникальноеНаименованиеУслуги КАК УникальноеНаименованиеУслуги,
	|	СоответствиеУслуг.УслугаВБазе КАК УслугаВБазе
	|ПОМЕСТИТЬ втЛССоВсемиНастроеннымиУслугами
	|ИЗ
	|	СоответствиеУслуг КАК СоответствиеУслуг,
	|	втИдентифицированныеЛС КАК втИдентифицированныеЛС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_НазначенныеНачисленияСрезПоследних.Объект КАК ЛицевойСчет,
	|	КВП_НазначенныеНачисленияСрезПоследних.Услуга КАК Услуга
	|ПОМЕСТИТЬ втДействующиеУслугиБезЗависимыхУслуг
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления.СрезПоследних(
	|			&ДатаКон,
	|			организация = &Организация
	|				И (Объект, Услуга) В
	|					(ВЫБРАТЬ
	|						втЛССоВсемиНастроеннымиУслугами.ЛицевойСчет КАК ЛицевойСчет,
	|						втЛССоВсемиНастроеннымиУслугами.УслугаВБазе КАК УслугаВБазе
	|					ИЗ
	|						втЛССоВсемиНастроеннымиУслугами КАК втЛССоВсемиНастроеннымиУслугами)
	|				И ДатаИзменения <= &ДатаКон) КАК КВП_НазначенныеНачисленияСрезПоследних
	|ГДЕ
	|	КВП_НазначенныеНачисленияСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ЗависимостиУслугСрезПоследних.УслугаОснование КАК УслугаОснование,
	|	КВП_ЗависимостиУслугСрезПоследних.Услуга КАК ЗависимаяУслуга
	|ПОМЕСТИТЬ втЗависимыеУслуги
	|ИЗ
	|	РегистрСведений.КВП_ЗависимостиУслуг.СрезПоследних(
	|			&ДатаКон,
	|			УслугаОснование В
	|				(ВЫБРАТЬ
	|					втДействующиеУслугиБезЗависимыхУслуг.Услуга КАК Услуга
	|				ИЗ
	|					втДействующиеУслугиБезЗависимыхУслуг КАК втДействующиеУслугиБезЗависимыхУслуг)) КАК КВП_ЗависимостиУслугСрезПоследних
	|ГДЕ
	|	КВП_ЗависимостиУслугСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втДействующиеУслугиБезЗависимыхУслуг.ЛицевойСчет КАК ЛицевойСчет,
	|	втЗависимыеУслуги.ЗависимаяУслуга КАК Услуга
	|ПОМЕСТИТЬ втДействующиеУслуги
	|ИЗ
	|	втДействующиеУслугиБезЗависимыхУслуг КАК втДействующиеУслугиБезЗависимыхУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЗависимыеУслуги КАК втЗависимыеУслуги
	|		ПО втДействующиеУслугиБезЗависимыхУслуг.Услуга = втЗависимыеУслуги.УслугаОснование
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втДействующиеУслугиБезЗависимыхУслуг.ЛицевойСчет,
	|	втДействующиеУслугиБезЗависимыхУслуг.Услуга
	|ИЗ
	|	втДействующиеУслугиБезЗависимыхУслуг КАК втДействующиеУслугиБезЗависимыхУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга КАК Услуга,
	|	УПЖКХ_НачисленияОбороты.МесяцНачисления КАК МесяцНачисления,
	|	СУММА(-УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот) КАК ОплатаИнд,
	|	0 КАК ОплатаОДН
	|ПОМЕСТИТЬ втОплатыУслугВПериоде
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Организация = &Организация
	|				И (ЛицевойСчет, Услуга) В
	|					(ВЫБРАТЬ
	|						втЛССоВсемиНастроеннымиУслугами.ЛицевойСчет КАК ЛицевойСчет,
	|						втЛССоВсемиНастроеннымиУслугами.УслугаВБазе КАК УслугаВБазе
	|					ИЗ
	|						втЛССоВсемиНастроеннымиУслугами КАК втЛССоВсемиНастроеннымиУслугами)
	|				И ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)
	|				И НЕ РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)) КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.МесяцНачисления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ЛицевойСчет,
	|	Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_Начисления.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_Начисления.Услуга КАК Услуга,
	|	УПЖКХ_Начисления.МесяцНачисления КАК МесяцНачисления,
	|	СУММА(УПЖКХ_Начисления.СуммаНачисления) КАК СуммаНачисленияОбщая,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_Начисления.Услуга В (&СписокИндивидуальныхУслуг)
	|				ТОГДА УПЖКХ_Начисления.СуммаНачисления
	|			КОГДА УПЖКХ_Начисления.Услуга В (&СписокИндивидуальныхИОбщедомовыхУслуг)
	|					И НЕ УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|				ТОГДА УПЖКХ_Начисления.СуммаНачисления
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНачисленияИндивидуальная,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_Начисления.Услуга В (&СписокОбщедомовыхУслуг)
	|				ТОГДА УПЖКХ_Начисления.СуммаНачисления
	|			КОГДА УПЖКХ_Начисления.Услуга В (&СписокИндивидуальныхИОбщедомовыхУслуг)
	|					И УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|				ТОГДА УПЖКХ_Начисления.СуммаНачисления
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНачисленияОбщедомовая
	|ПОМЕСТИТЬ втСведенияОНачисленияхКоторыеБылиОплаченыВТекущемМесяце
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления КАК УПЖКХ_Начисления
	|ГДЕ
	|	УПЖКХ_Начисления.Период <= &ДатаКон
	|	И (УПЖКХ_Начисления.ЛицевойСчет, УПЖКХ_Начисления.Услуга, УПЖКХ_Начисления.МесяцНачисления) В
	|			(ВЫБРАТЬ
	|				втОплатыУслугВПериоде.ЛицевойСчет КАК ЛицевойСчет,
	|				втОплатыУслугВПериоде.Услуга КАК Услуга,
	|				втОплатыУслугВПериоде.МесяцНачисления КАК МесяцНачисления
	|			ИЗ
	|				втОплатыУслугВПериоде КАК втОплатыУслугВПериоде
	|			ГДЕ
	|				втОплатыУслугВПериоде.Услуга В (&СписокЭлектрическаяЭнергия, &СписокХолодноеВодоснабжение, &СписокОтведениеСточныхВод, &СписокГорячееВодоснабжениеКубМетр, &СписокГорячееВодоснабжениеГКал))
	|	И УПЖКХ_Начисления.Организация = &Организация
	|	И УПЖКХ_Начисления.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ))
	|	И УПЖКХ_Начисления.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему))
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_Начисления.ЛицевойСчет,
	|	УПЖКХ_Начисления.МесяцНачисления,
	|	УПЖКХ_Начисления.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОплатыУслугВПериоде.ЛицевойСчет КАК ЛицевойСчет,
	|	втОплатыУслугВПериоде.Услуга КАК Услуга,
	|	СУММА(ВЫБОР
	|			КОГДА втОплатыУслугВПериоде.ОплатаИнд > втСведенияОНачисленияхКоторыеБылиОплаченыВТекущемМесяце.СуммаНачисленияОбщая
	|				ТОГДА втСведенияОНачисленияхКоторыеБылиОплаченыВТекущемМесяце.СуммаНачисленияОбщая
	|			ИНАЧЕ втОплатыУслугВПериоде.ОплатаИнд
	|		КОНЕЦ * ВЫБОР
	|			КОГДА ЕСТЬNULL(втСведенияОНачисленияхКоторыеБылиОплаченыВТекущемМесяце.СуммаНачисленияОбщедомовая, 0) + ЕСТЬNULL(втСведенияОНачисленияхКоторыеБылиОплаченыВТекущемМесяце.СуммаНачисленияИндивидуальная, 0) = 0
	|				ТОГДА 1
	|			ИНАЧЕ втСведенияОНачисленияхКоторыеБылиОплаченыВТекущемМесяце.СуммаНачисленияИндивидуальная / (втСведенияОНачисленияхКоторыеБылиОплаченыВТекущемМесяце.СуммаНачисленияИндивидуальная + втСведенияОНачисленияхКоторыеБылиОплаченыВТекущемМесяце.СуммаНачисленияОбщедомовая)
	|		КОНЕЦ) КАК ОплатаИнд,
	|	СУММА(ВЫБОР
	|			КОГДА втОплатыУслугВПериоде.ОплатаИнд > втСведенияОНачисленияхКоторыеБылиОплаченыВТекущемМесяце.СуммаНачисленияОбщая
	|				ТОГДА втСведенияОНачисленияхКоторыеБылиОплаченыВТекущемМесяце.СуммаНачисленияОбщая
	|			ИНАЧЕ втОплатыУслугВПериоде.ОплатаИнд
	|		КОНЕЦ * ВЫБОР
	|			КОГДА ЕСТЬNULL(втСведенияОНачисленияхКоторыеБылиОплаченыВТекущемМесяце.СуммаНачисленияОбщедомовая, 0) + ЕСТЬNULL(втСведенияОНачисленияхКоторыеБылиОплаченыВТекущемМесяце.СуммаНачисленияИндивидуальная, 0) = 0
	|				ТОГДА 0
	|			ИНАЧЕ втСведенияОНачисленияхКоторыеБылиОплаченыВТекущемМесяце.СуммаНачисленияОбщедомовая / (втСведенияОНачисленияхКоторыеБылиОплаченыВТекущемМесяце.СуммаНачисленияИндивидуальная + втСведенияОНачисленияхКоторыеБылиОплаченыВТекущемМесяце.СуммаНачисленияОбщедомовая)
	|		КОНЕЦ) КАК ОплатаОДН
	|ПОМЕСТИТЬ втОплатыПоНекоторымУслугамРаспределенныеНаИндИОдн
	|ИЗ
	|	втОплатыУслугВПериоде КАК втОплатыУслугВПериоде
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОНачисленияхКоторыеБылиОплаченыВТекущемМесяце КАК втСведенияОНачисленияхКоторыеБылиОплаченыВТекущемМесяце
	|		ПО втОплатыУслугВПериоде.ЛицевойСчет = втСведенияОНачисленияхКоторыеБылиОплаченыВТекущемМесяце.ЛицевойСчет
	|			И втОплатыУслугВПериоде.Услуга = втСведенияОНачисленияхКоторыеБылиОплаченыВТекущемМесяце.Услуга
	|			И втОплатыУслугВПериоде.МесяцНачисления = втСведенияОНачисленияхКоторыеБылиОплаченыВТекущемМесяце.МесяцНачисления
	|
	|СГРУППИРОВАТЬ ПО
	|	втОплатыУслугВПериоде.Услуга,
	|	втОплатыУслугВПериоде.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втОплатыУслугВПериоде
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втСведенияОНачисленияхКоторыеБылиОплаченыВТекущемМесяце
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ втЛССДолгамиНаКонецТекущегоПериода
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&ДатаКон,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втИдентифицированныеЛС.ЛицевойСчет КАК ЛицевойСчет
	|					ИЗ
	|						втИдентифицированныеЛС КАК втИдентифицированныеЛС)
	|				И НЕ Услуга В (&СписокУслугКР)
	|				И НЕ Услуга В (&СписокТвердыеКоммунальныеОтходы)
	|				И НЕ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|ГДЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет КАК ЛицевойСчет,
	|	МИНИМУМ(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.МесяцНачисления) КАК СамыйРаннийМесяцНачисленияСДолгом
	|ПОМЕСТИТЬ втСведенияОСамыхРаннихМесяцахНачисленияЛСсДолгами
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&ДатаКон,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втЛССДолгамиНаКонецТекущегоПериода.ЛицевойСчет КАК ЛицевойСчет
	|					ИЗ
	|						втЛССДолгамиНаКонецТекущегоПериода КАК втЛССДолгамиНаКонецТекущегоПериода)
	|				И НЕ Услуга В (&СписокУслугКР)
	|				И НЕ Услуга В (&СписокТвердыеКоммунальныеОтходы)
	|				И НЕ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|ГДЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСведенияОСамыхРаннихМесяцахНачисленияЛСсДолгами.ЛицевойСчет КАК ЛицевойСчет,
	|	РАЗНОСТЬДАТ(втСведенияОСамыхРаннихМесяцахНачисленияЛСсДолгами.СамыйРаннийМесяцНачисленияСДолгом, &ТекущийМесяцНачисления, МЕСЯЦ) КАК КоличествоМесяцевЗадолженности
	|ПОМЕСТИТЬ втСведенияОКоличествеМесяцевЗадолженностиНайденныхЛС
	|ИЗ
	|	втСведенияОСамыхРаннихМесяцахНачисленияЛСсДолгами КАК втСведенияОСамыхРаннихМесяцахНачисленияЛСсДолгами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец) КАК КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втСведенияОЗарегистрированных
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втИдентифицированныеЛС.ЛицевойСчет КАК ЛицевойСчет
	|					ИЗ
	|						втИдентифицированныеЛС КАК втИдентифицированныеЛС)
	|				И ДатаИзменения <= &ДатаКон) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец) КАК КоличествоПроживающих
	|ПОМЕСТИТЬ втСведенияОПроживающих
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втИдентифицированныеЛС.ЛицевойСчет КАК ЛицевойСчет
	|					ИЗ
	|						втИдентифицированныеЛС КАК втИдентифицированныеЛС)
	|				И ДатаИзменения <= &ДатаКон) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.КоличествоПроживающих КАК КоличествоПроживающих,
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.КоличествоЗарегистрированных КАК КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втСведенияОЗарегистрированныхИПроживающихГотовымиЧислами
	|ИЗ
	|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втИдентифицированныеЛС.ЛицевойСчет КАК ЛицевойСчет
	|				ИЗ
	|					втИдентифицированныеЛС КАК втИдентифицированныеЛС)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИдентифицированныеЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	ВЫБОР
	|		КОГДА УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Значение
	|			ТОГДА ЕСТЬNULL(втСведенияОЗарегистрированныхИПроживающихГотовымиЧислами.КоличествоЗарегистрированных, 0)
	|		ИНАЧЕ ЕСТЬNULL(втСведенияОЗарегистрированных.КоличествоЗарегистрированных, 0)
	|	КОНЕЦ КАК КоличествоЗарегистрированных,
	|	ВЫБОР
	|		КОГДА УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Значение
	|			ТОГДА ЕСТЬNULL(втСведенияОЗарегистрированныхИПроживающихГотовымиЧислами.КоличествоПроживающих, 0)
	|		ИНАЧЕ ЕСТЬNULL(втСведенияОПроживающих.КоличествоПроживающих, 0)
	|	КОНЕЦ КАК КоличествоПроживающих
	|ПОМЕСТИТЬ втСведенияОЧисленностиЛС
	|ИЗ
	|	втИдентифицированныеЛС КАК втИдентифицированныеЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОЗарегистрированных КАК втСведенияОЗарегистрированных
	|		ПО втИдентифицированныеЛС.ЛицевойСчет = втСведенияОЗарегистрированных.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОПроживающих КАК втСведенияОПроживающих
	|		ПО втИдентифицированныеЛС.ЛицевойСчет = втСведенияОПроживающих.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОЗарегистрированныхИПроживающихГотовымиЧислами КАК втСведенияОЗарегистрированныхИПроживающихГотовымиЧислами
	|		ПО втИдентифицированныеЛС.ЛицевойСчет = втСведенияОЗарегистрированныхИПроживающихГотовымиЧислами.ЛицевойСчет,
	|	Константа.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами КАК УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение КАК Помещение,
	|	ВЫБОР
	|		КОГДА УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Частная)
	|			ТОГДА ""Приватизированная""
	|		ИНАЧЕ ""Не в собственности""
	|	КОНЕЦ КАК ВидСобственности
	|ПОМЕСТИТЬ втСведенияОВидахСобственности
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственностьНаПомещения.СрезПоследних(
	|			&ДатаКон,
	|			Помещение В
	|				(ВЫБРАТЬ
	|					втИдентифицированныеЛС.ЛицевойСчет.Адрес КАК Помещение
	|				ИЗ
	|					втИдентифицированныеЛС КАК втИдентифицированныеЛС)) КАК УПЖКХ_СобственностьНаПомещенияСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект КАК Помещение,
	|	КВП_ПлощадьПомещенияСрезПоследних.Площадь КАК ОбщаяПлощадь
	|ПОМЕСТИТЬ втПлощадиПомещения
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|			&ДатаКон,
	|			Объект В
	|					(ВЫБРАТЬ
	|						втИдентифицированныеЛС.ЛицевойСчет.Адрес КАК Помещение
	|					ИЗ
	|						втИдентифицированныеЛС КАК втИдентифицированныеЛС)
	|				И ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)) КАК КВП_ПлощадьПомещенияСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	ВЫБОР
	|		КОГДА КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель = 0
	|			ТОГДА 0
	|		ИНАЧЕ КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель / КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель
	|	КОНЕЦ КАК ДоляЛС
	|ПОМЕСТИТЬ втДолиЛС
	|ИЗ
	|	РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втИдентифицированныеЛС.ЛицевойСчет КАК ЛицевойСчет
	|				ИЗ
	|					втИдентифицированныеЛС КАК втИдентифицированныеЛС)) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИдентифицированныеЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	ЕСТЬNULL(втДолиЛС.ДоляЛС, 0) * ЕСТЬNULL(втПлощадиПомещения.ОбщаяПлощадь, 0) КАК ОбщаяПлощадьЛС
	|ПОМЕСТИТЬ втОбщиеПлощадиЛС
	|ИЗ
	|	втИдентифицированныеЛС КАК втИдентифицированныеЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДолиЛС КАК втДолиЛС
	|		ПО втИдентифицированныеЛС.ЛицевойСчет = втДолиЛС.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПлощадиПомещения КАК втПлощадиПомещения
	|		ПО втИдентифицированныеЛС.ЛицевойСчет.Адрес = втПлощадиПомещения.Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛССоВсемиНастроеннымиУслугами.ЛицевойСчет КАК ЛицевойСчет,
	|	втЛССоВсемиНастроеннымиУслугами.УникальноеНаименованиеУслуги КАК УникальноеНаименованиеУслуги,
	|	втЛССоВсемиНастроеннымиУслугами.УслугаВБазе КАК УслугаВБазе,
	|	ЕСТЬNULL(втСведенияОКоличествеМесяцевЗадолженностиНайденныхЛС.КоличествоМесяцевЗадолженности, 0) КАК КоличествоМесяцевЗадолженности,
	|	ЕСТЬNULL(втОплатыПоНекоторымУслугамРаспределенныеНаИндИОдн.ОплатаИнд, 0) КАК ОплатаИнд,
	|	ЕСТЬNULL(втОплатыПоНекоторымУслугамРаспределенныеНаИндИОдн.ОплатаОДН, 0) КАК ОплатаОДН,
	|	ЕСТЬNULL(втСведенияОВидахСобственности.ВидСобственности, """") КАК ВидСобственности,
	|	ЕСТЬNULL(втСведенияОЧисленностиЛС.КоличествоЗарегистрированных, 0) КАК КоличествоЗарегистрированных,
	|	ЕСТЬNULL(втСведенияОЧисленностиЛС.КоличествоПроживающих, 0) КАК КоличествоПроживающих,
	|	ЕСТЬNULL(втОбщиеПлощадиЛС.ОбщаяПлощадьЛС, 0) КАК ОбщаяПлощадьЛС,
	|	ВЫБОР
	|		КОГДА втДействующиеУслуги.ЛицевойСчет ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК УслугаДействует
	|ИЗ
	|	втЛССоВсемиНастроеннымиУслугами КАК втЛССоВсемиНастроеннымиУслугами
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОплатыПоНекоторымУслугамРаспределенныеНаИндИОдн КАК втОплатыПоНекоторымУслугамРаспределенныеНаИндИОдн
	|		ПО втЛССоВсемиНастроеннымиУслугами.ЛицевойСчет = втОплатыПоНекоторымУслугамРаспределенныеНаИндИОдн.ЛицевойСчет
	|			И втЛССоВсемиНастроеннымиУслугами.УслугаВБазе = втОплатыПоНекоторымУслугамРаспределенныеНаИндИОдн.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОКоличествеМесяцевЗадолженностиНайденныхЛС КАК втСведенияОКоличествеМесяцевЗадолженностиНайденныхЛС
	|		ПО втЛССоВсемиНастроеннымиУслугами.ЛицевойСчет = втСведенияОКоличествеМесяцевЗадолженностиНайденныхЛС.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОЧисленностиЛС КАК втСведенияОЧисленностиЛС
	|		ПО втЛССоВсемиНастроеннымиУслугами.ЛицевойСчет = втСведенияОЧисленностиЛС.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОВидахСобственности КАК втСведенияОВидахСобственности
	|		ПО втЛССоВсемиНастроеннымиУслугами.ЛицевойСчет.Адрес = втСведенияОВидахСобственности.Помещение
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОбщиеПлощадиЛС КАК втОбщиеПлощадиЛС
	|		ПО втЛССоВсемиНастроеннымиУслугами.ЛицевойСчет = втОбщиеПлощадиЛС.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДействующиеУслуги КАК втДействующиеУслуги
	|		ПО втЛССоВсемиНастроеннымиУслугами.ЛицевойСчет = втДействующиеУслуги.ЛицевойСчет
	|			И втЛССоВсемиНастроеннымиУслугами.УслугаВБазе = втДействующиеУслуги.Услуга";
	
	ТаблицаОплатСДопИнформацией = Запрос.Выполнить().Выгрузить();
	//ДеревоОплатСДопИнформацией = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ТаблицаОплатСДопИнформацией.Колонки.Добавить("Тариф", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(15,4));
	
	// !!!Вопросы, ответы на которые необходимо получить у клиента:
	// 1. Остатки по начислениям также нужно определять с учетом параметра "КоличествоДнейСледующегоМесяцаВТеченииКоторыхМожноОплатитьНачисленияЗаМесяцВыгрузки"?
	// 2. Почему вас не устраивает в качестве периода выгрузки именно календарный месяц (с 1 по последнее число месяца)?
	//    Вместо этого вы получаете оплаты чуть ли НЕ с середины месяца выгрузки до середины месяца, следующего за месяцем выгрузки.
	//    Насколько понимаем, ОСЗН будет возвращать суммы оплат, поступившие именно в рамках календарного месяца, а не за период, который вы укажете.
	//    Или мы что-то не понимаем? Если так, то объясните методику расчета льгот.
	
	// Сформировать таблицу с тарифами по услугам по состоянию на конец декабря прошлого года.
	НачалоТекущегоМесяца = НачалоМесяца(Объект.Период);
	
	//ТаблицаЛицевыхСчетовСУслугами = ТаблицаОплатСДопИнформацией.Скопировать(, "ЛицевойСчет, УслугаВБазе");
	ТаблицаЛицевыхСчетовСУслугами = ТаблицаОплатСДопИнформацией.Скопировать(, "ЛицевойСчет, УслугаВБазе, УслугаДействует");
	ТаблицаЛицевыхСчетовСУслугами.Колонки.Добавить("ВидТарифа",                    Новый ОписаниеТипов("ПеречислениеСсылка.КВП_ВидыТарифов"));
	ТаблицаЛицевыхСчетовСУслугами.Колонки.Добавить("Тариф",                        УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(15,4));
	ТаблицаЛицевыхСчетовСУслугами.Колонки.Добавить("КоличествоЗаполненныхТарифов", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(3));
	
	ТаблицаТарифовНаНачалоТекущегоМесяца = СформироватьТаблицуТарифовНаНачалоТекущегоМесяца(ТаблицаЛицевыхСчетовСУслугами, Объект.Организация, НачалоТекущегоМесяца);
	
	ОтборВТаблицеТарифов = Новый Структура("ЛицевойСчет, УслугаВБазе, УслугаДействует");
	
	Для каждого ТекСтрока Из ТаблицаТарифовНаНачалоТекущегоМесяца Цикл
		ЗаполнитьЗначенияСвойств(ОтборВТаблицеТарифов, ТекСтрока);
		ОтборВТаблицеТарифов.УслугаДействует = Истина;
		НайденныеСтроки = ТаблицаОплатСДопИнформацией.НайтиСтроки(ОтборВТаблицеТарифов);
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.Тариф = ТекСтрока.Тариф;
		КонецЦикла;
	КонецЦикла;
	
	// КДБ +
	// !!!Добавить механизм по расчету нормы потребления.
	ТаблицаЛицевыхСчетовСУслугами = ТаблицаОплатСДопИнформацией.Скопировать(, "ЛицевойСчет, УслугаВБазе");
	
	// Подготовить список услуг, по которым необходимо определить норматив потребления услуг.
	СписокУслугДляРасчетаНормативов = Новый СписокЗначений;
	НайденныеСтрокиУслугДляРасчетаНормативов = врТЗСоответствиеУслуг.НайтиСтроки(Новый Структура("УчитыватьПриРасчетеНорматива", Истина));
	Для каждого ТекСтрока Из НайденныеСтрокиУслугДляРасчетаНормативов Цикл
		СписокУслугДляРасчетаНормативов.Добавить(ТекСтрока.УслугаВБазе);
	КонецЦикла;
	
	ЗапросПоНормам = Новый Запрос;
	
	ЗапросПоНормам.УстановитьПараметр("СписокУслугДляРасчетаНормативов", СписокУслугДляРасчетаНормативов);
	ЗапросПоНормам.УстановитьПараметр("ТаблицаСРеестромЖКУ",             Запрос.Параметры.ТаблицаСРеестромЖКУ);
	ЗапросПоНормам.УстановитьПараметр("СоответствиеУслуг",               Запрос.Параметры.СоответствиеУслуг);
	ЗапросПоНормам.УстановитьПараметр("ДатаНач",                         Запрос.Параметры.ДатаНач);
	
	ЗапросПоНормам.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРеестра.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ втИдентифицированныеЛС
	|ИЗ
	|	&ТаблицаСРеестромЖКУ КАК ТаблицаРеестра
	|ГДЕ
	|	НЕ ТаблицаРеестра.ЛицевойСчет = ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствиеУслуг.УникальноеНаименованиеУслуги КАК УникальноеНаименованиеУслуги,
	|	СоответствиеУслуг.УслугаВБазе КАК УслугаВБазе
	|ПОМЕСТИТЬ СоответствиеУслуг
	|ИЗ
	|	&СоответствиеУслуг КАК СоответствиеУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствиеУслуг.УникальноеНаименованиеУслуги КАК УникальноеНаименованиеУслуги,
	|	СоответствиеУслуг.УслугаВБазе КАК УслугаВБазе
	|ПОМЕСТИТЬ втУслугиДляРасчетаНормативов
	|ИЗ
	|	СоответствиеУслуг КАК СоответствиеУслуг
	|ГДЕ
	|	СоответствиеУслуг.УслугаВБазе В(&СписокУслугДляРасчетаНормативов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ЗависимостиУслугСрезПоследних.УслугаОснование КАК УслугаОснование,
	|	КВП_ЗависимостиУслугСрезПоследних.Услуга КАК УслугаЗависимая,
	|	КВП_ЗависимостиУслугСрезПоследних.Объект КАК Здание,
	|	ВЫБОР
	|		КОГДА КВП_ЗависимостиУслугСрезПоследних.Значение = 0
	|			ТОГДА 0
	|		ИНАЧЕ КВП_ЗависимостиУслугСрезПоследних.ЗначениеОснование / КВП_ЗависимостиУслугСрезПоследних.Значение
	|	КОНЕЦ КАК Коэффициент
	|ПОМЕСТИТЬ втСведенияОЗависимыхУслугахНаНачалоМесяцаВыгрузки
	|ИЗ
	|	РегистрСведений.КВП_ЗависимостиУслуг.СрезПоследних(&ДатаНач, Услуга В (&СписокУслугДляРасчетаНормативов)) КАК КВП_ЗависимостиУслугСрезПоследних
	|ГДЕ
	|	КВП_ЗависимостиУслугСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСведенияОЗависимыхУслугахНаНачалоМесяцаВыгрузки.УслугаОснование КАК УслугаОснование,
	|	втСведенияОЗависимыхУслугахНаНачалоМесяцаВыгрузки.УслугаЗависимая КАК УслугаЗависимая,
	|	втСведенияОЗависимыхУслугахНаНачалоМесяцаВыгрузки.Здание КАК Здание,
	|	втСведенияОЗависимыхУслугахНаНачалоМесяцаВыгрузки.Коэффициент КАК Коэффициент
	|ПОМЕСТИТЬ втСведенияОЗависимыхУслугах
	|ИЗ
	|	втСведенияОЗависимыхУслугахНаНачалоМесяцаВыгрузки КАК втСведенияОЗависимыхУслугахНаНачалоМесяцаВыгрузки
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втУслугиДляРасчетаНормативов.УслугаВБазе,
	|	втУслугиДляРасчетаНормативов.УслугаВБазе,
	|	ЗНАЧЕНИЕ(Справочник.КВП_Здания.ПустаяСсылка),
	|	1
	|ИЗ
	|	втУслугиДляРасчетаНормативов КАК втУслугиДляРасчетаНормативов
	|ГДЕ
	|	НЕ втУслугиДляРасчетаНормативов.УслугаВБазе В
	|				(ВЫБРАТЬ
	|					втСведенияОЗависимыхУслугахНаНачалоМесяцаВыгрузки.УслугаЗависимая КАК УслугаЗависимая
	|				ИЗ
	|					втСведенияОЗависимыхУслугахНаНачалоМесяцаВыгрузки КАК втСведенияОЗависимыхУслугахНаНачалоМесяцаВыгрузки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИдентифицированныеЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	втСведенияОЗависимыхУслугах.УслугаОснование КАК УслугаОснование,
	|	втСведенияОЗависимыхУслугах.УслугаЗависимая КАК УслугаЗависимая,
	|	втСведенияОЗависимыхУслугах.Здание КАК Здание,
	|	втСведенияОЗависимыхУслугах.Коэффициент КАК Коэффициент,
	|	ВЫБОР
	|		КОГДА втИдентифицированныеЛС.ЛицевойСчет.Адрес.Владелец = втСведенияОЗависимыхУслугах.Здание
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Приоритет
	|ПОМЕСТИТЬ втСведенийОЗависимыхУслугахСПриоритетами
	|ИЗ
	|	втИдентифицированныеЛС КАК втИдентифицированныеЛС,
	|	втСведенияОЗависимыхУслугах КАК втСведенияОЗависимыхУслугах
	|ГДЕ
	|	(втСведенияОЗависимыхУслугах.Здание = ЗНАЧЕНИЕ(Справочник.КВП_Здания.ПустаяСсылка)
	|			ИЛИ втИдентифицированныеЛС.ЛицевойСчет.Адрес.Владелец = втСведенияОЗависимыхУслугах.Здание)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСведенийОЗависимыхУслугахСПриоритетами.ЛицевойСчет КАК ЛицевойСчет,
	|	втСведенийОЗависимыхУслугахСПриоритетами.УслугаОснование КАК УслугаОснование,
	|	втСведенийОЗависимыхУслугахСПриоритетами.УслугаЗависимая КАК УслугаЗависимая,
	|	МИНИМУМ(втСведенийОЗависимыхУслугахСПриоритетами.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ втСведенияОЗависимыхУслугахСНаивысшимиПриоритетами
	|ИЗ
	|	втСведенийОЗависимыхУслугахСПриоритетами КАК втСведенийОЗависимыхУслугахСПриоритетами
	|
	|СГРУППИРОВАТЬ ПО
	|	втСведенийОЗависимыхУслугахСПриоритетами.ЛицевойСчет,
	|	втСведенийОЗависимыхУслугахСПриоритетами.УслугаОснование,
	|	втСведенийОЗависимыхУслугахСПриоритетами.УслугаЗависимая
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСведенийОЗависимыхУслугахСПриоритетами.ЛицевойСчет КАК ЛицевойСчет,
	|	втСведенийОЗависимыхУслугахСПриоритетами.УслугаОснование КАК УслугаОснование,
	|	втСведенийОЗависимыхУслугахСПриоритетами.УслугаЗависимая КАК УслугаЗависимая,
	|	ВЫБОР
	|		КОГДА втСведенийОЗависимыхУслугахСПриоритетами.Здание = ЗНАЧЕНИЕ(Справочник.КВП_Здания.ПустаяСсылка)
	|			ТОГДА втСведенийОЗависимыхУслугахСПриоритетами.ЛицевойСчет.Адрес.Владелец
	|		ИНАЧЕ втСведенийОЗависимыхУслугахСПриоритетами.Здание
	|	КОНЕЦ КАК Здание,
	|	втСведенийОЗависимыхУслугахСПриоритетами.Коэффициент КАК Коэффициент,
	|	втСведенийОЗависимыхУслугахСПриоритетами.Приоритет КАК Приоритет
	|ПОМЕСТИТЬ втЛицевыхСчетовСУслугамиДляОпределенияНормативов
	|ИЗ
	|	втСведенийОЗависимыхУслугахСПриоритетами КАК втСведенийОЗависимыхУслугахСПриоритетами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСведенияОЗависимыхУслугахСНаивысшимиПриоритетами КАК втСведенияОЗависимыхУслугахСНаивысшимиПриоритетами
	|		ПО втСведенийОЗависимыхУслугахСПриоритетами.ЛицевойСчет = втСведенияОЗависимыхУслугахСНаивысшимиПриоритетами.ЛицевойСчет
	|			И втСведенийОЗависимыхУслугахСПриоритетами.УслугаОснование = втСведенияОЗависимыхУслугахСНаивысшимиПриоритетами.УслугаОснование
	|			И втСведенийОЗависимыхУслугахСПриоритетами.УслугаЗависимая = втСведенияОЗависимыхУслугахСНаивысшимиПриоритетами.УслугаЗависимая
	|			И втСведенийОЗависимыхУслугахСПриоритетами.Приоритет = втСведенияОЗависимыхУслугахСНаивысшимиПриоритетами.Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга КАК УслугаОснование,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления КАК СсылкаНаНормуПотребления,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Размер КАК РазмерНормыПотребления,
	|	ВЫБОР
	|		КОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки = ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НормаПростая
	|ПОМЕСТИТЬ втДействующиеНормативыПотребленияПоУслугамНаЛС
	|ИЗ
	|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(
	|			&ДатаНач,
	|			(ЛицевойСчет, Услуга) В
	|				(ВЫБРАТЬ
	|					втЛицевыхСчетовСУслугамиДляОпределенияНормативов.ЛицевойСчет КАК ЛицевойСчет,
	|					втЛицевыхСчетовСУслугамиДляОпределенияНормативов.УслугаОснование КАК УслугаОснование
	|				ИЗ
	|					втЛицевыхСчетовСУслугамиДляОпределенияНормативов КАК втЛицевыхСчетовСУслугамиДляОпределенияНормативов)) КАК КВП_НормыПотребленияУслугЛССрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга КАК УслугаОснование,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления КАК СсылкаНаНормуПотребления,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Размер КАК РазмерНормыПотребления,
	|	ВЫБОР
	|		КОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки = ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НормаПростая
	|ПОМЕСТИТЬ втДействующиеНормативыПотребленияПоУслугамНаЗдания
	|ИЗ
	|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(
	|			&ДатаНач,
	|			(ЛицевойСчет, Услуга) В
	|				(ВЫБРАТЬ
	|					втЛицевыхСчетовСУслугамиДляОпределенияНормативов.Здание КАК Здание,
	|					втЛицевыхСчетовСУслугамиДляОпределенияНормативов.УслугаОснование КАК УслугаОснование
	|				ИЗ
	|					втЛицевыхСчетовСУслугамиДляОпределенияНормативов КАК втЛицевыхСчетовСУслугамиДляОпределенияНормативов)) КАК КВП_НормыПотребленияУслугЛССрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛицевыхСчетовСУслугамиДляОпределенияНормативов.ЛицевойСчет КАК ЛицевойСчет,
	|	втЛицевыхСчетовСУслугамиДляОпределенияНормативов.УслугаОснование КАК УслугаОснование,
	|	втЛицевыхСчетовСУслугамиДляОпределенияНормативов.УслугаЗависимая КАК УслугаЗависимая,
	|	втЛицевыхСчетовСУслугамиДляОпределенияНормативов.Здание КАК Здание,
	|	втЛицевыхСчетовСУслугамиДляОпределенияНормативов.Коэффициент КАК Коэффициент,
	|	втЛицевыхСчетовСУслугамиДляОпределенияНормативов.Приоритет КАК Приоритет,
	|	ЕСТЬNULL(втДействующиеНормативыПотребленияПоУслугамНаЛС.СсылкаНаНормуПотребления, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)) КАК СсылкаНаНормуПотребления,
	|	ЕСТЬNULL(втДействующиеНормативыПотребленияПоУслугамНаЛС.РазмерНормыПотребления, 0) КАК РазмерНормыПотребления,
	|	ЕСТЬNULL(втДействующиеНормативыПотребленияПоУслугамНаЛС.НормаПростая, ИСТИНА) КАК НормаПростая,
	|	ЕСТЬNULL(втДействующиеНормативыПотребленияПоУслугамНаЗдания.СсылкаНаНормуПотребления, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)) КАК СсылкаНаНормуПотребленияЗдания,
	|	ЕСТЬNULL(втДействующиеНормативыПотребленияПоУслугамНаЗдания.РазмерНормыПотребления, 0) КАК РазмерНормыПотребленияЗдания,
	|	ЕСТЬNULL(втДействующиеНормативыПотребленияПоУслугамНаЗдания.НормаПростая, ИСТИНА) КАК НормаПростаяЗдания
	|ПОМЕСТИТЬ втНормативыПотребления
	|ИЗ
	|	втЛицевыхСчетовСУслугамиДляОпределенияНормативов КАК втЛицевыхСчетовСУслугамиДляОпределенияНормативов
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДействующиеНормативыПотребленияПоУслугамНаЛС КАК втДействующиеНормативыПотребленияПоУслугамНаЛС
	|		ПО втЛицевыхСчетовСУслугамиДляОпределенияНормативов.ЛицевойСчет = втДействующиеНормативыПотребленияПоУслугамНаЛС.ЛицевойСчет
	|			И втЛицевыхСчетовСУслугамиДляОпределенияНормативов.УслугаОснование = втДействующиеНормативыПотребленияПоУслугамНаЛС.УслугаОснование
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДействующиеНормативыПотребленияПоУслугамНаЗдания КАК втДействующиеНормативыПотребленияПоУслугамНаЗдания
	|		ПО втЛицевыхСчетовСУслугамиДляОпределенияНормативов.Здание = втДействующиеНормативыПотребленияПоУслугамНаЗдания.ЛицевойСчет
	|			И втЛицевыхСчетовСУслугамиДляОпределенияНормативов.УслугаОснование = втДействующиеНормативыПотребленияПоУслугамНаЗдания.УслугаОснование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНормативыПотребления.ЛицевойСчет КАК ЛицевойСчет,
	|	втНормативыПотребления.УслугаОснование КАК УслугаОснование,
	|	втНормативыПотребления.УслугаЗависимая КАК УслугаЗависимая,
	|	втНормативыПотребления.Здание КАК Здание,
	|	втНормативыПотребления.Коэффициент КАК Коэффициент,
	|	втНормативыПотребления.Приоритет КАК Приоритет,
	|	втНормативыПотребления.СсылкаНаНормуПотребления КАК СсылкаНаНормуПотребления,
	|	втНормативыПотребления.РазмерНормыПотребления КАК РазмерНормыПотребления,
	|	втНормативыПотребления.НормаПростая КАК НормаПростая,
	|	втНормативыПотребления.СсылкаНаНормуПотребленияЗдания КАК СсылкаНаНормуПотребленияЗдания,
	|	втНормативыПотребления.РазмерНормыПотребленияЗдания КАК РазмерНормыПотребленияЗдания,
	|	втНормативыПотребления.НормаПростаяЗдания КАК НормаПростаяЗдания
	|ИЗ
	|	втНормативыПотребления КАК втНормативыПотребления
	|ГДЕ
	|	НЕ втНормативыПотребления.СсылкаНаНормуПотребления = ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)
	|			ИЛИ НЕ втНормативыПотребления.СсылкаНаНормуПотребленияЗдания = ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЛицевойСчет,
	|	УслугаЗависимая";
	
	ТаблицаНормативов = ЗапросПоНормам.Выполнить().Выгрузить();
	
	// Дозаполнить размеры норм, у которых вариант настройки отличен от значения "Простой".
	Для каждого ТекСтрока Из ТаблицаНормативов Цикл
		
		Если НЕ ТекСтрока.НормаПростая Тогда
			ТекСтрока.РазмерНормыПотребления = ПолучитьРазмерНормыПотребления(ТекСтрока.ЛицевойСчет, НачалоТекущегоМесяца, ТекСтрока.СсылкаНаНормуПотребления, Объект.Организация);
		КонецЕсли;
		
		ТекСтрока.РазмерНормыПотребления = ТекСтрока.РазмерНормыПотребления * ТекСтрока.Коэффициент;
		
		Если НЕ ТекСтрока.НормаПростаяЗдания Тогда
			ТекСтрока.РазмерНормыПотребленияЗдания = ПолучитьРазмерНормыПотребления(ТекСтрока.Здание, НачалоТекущегоМесяца, ТекСтрока.СсылкаНаНормуПотребленияЗдания, Объект.Организация);
		КонецЕсли;
		
		ТекСтрока.РазмерНормыПотребленияЗдания = ТекСтрока.РазмерНормыПотребленияЗдания * ТекСтрока.Коэффициент;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТаблицаОплатСДопИнформацией", ТаблицаОплатСДопИнформацией);
	Запрос.УстановитьПараметр("ТаблицаНормативов",           ТаблицаНормативов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОплатСДопИнформацией.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаОплатСДопИнформацией.УникальноеНаименованиеУслуги КАК УникальноеНаименованиеУслуги,
	|	ТаблицаОплатСДопИнформацией.УслугаВБазе КАК УслугаВБазе,
	|	ТаблицаОплатСДопИнформацией.КоличествоМесяцевЗадолженности КАК КоличествоМесяцевЗадолженности,
	|	ТаблицаОплатСДопИнформацией.ОплатаИнд КАК ОплатаИнд,
	|	ТаблицаОплатСДопИнформацией.ОплатаОДН КАК ОплатаОДН,
	|	ТаблицаОплатСДопИнформацией.Тариф КАК Тариф,
	|	ТаблицаОплатСДопИнформацией.ВидСобственности КАК ВидСобственности,
	|	ТаблицаОплатСДопИнформацией.КоличествоЗарегистрированных КАК КоличествоЗарегистрированных,
	|	ТаблицаОплатСДопИнформацией.КоличествоПроживающих КАК КоличествоПроживающих,
	|	ТаблицаОплатСДопИнформацией.ОбщаяПлощадьЛС КАК ОбщаяПлощадьЛС
	|ПОМЕСТИТЬ втОплатСДопИнформацией
	|ИЗ
	|	&ТаблицаОплатСДопИнформацией КАК ТаблицаОплатСДопИнформацией
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНормативов.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаНормативов.УслугаЗависимая КАК Услуга,
	|	ТаблицаНормативов.РазмерНормыПотребления КАК РазмерНормыПотребления,
	|	ТаблицаНормативов.РазмерНормыПотребленияЗдания КАК РазмерНормыПотребленияЗдания
	|ПОМЕСТИТЬ втТаблицаНормативов
	|ИЗ
	|	&ТаблицаНормативов КАК ТаблицаНормативов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаНормативов.ЛицевойСчет КАК ЛицевойСчет,
	|	втТаблицаНормативов.Услуга КАК Услуга,
	|	МАКСИМУМ(втТаблицаНормативов.РазмерНормыПотребления) КАК РазмерНормыПотребления,
	|	МАКСИМУМ(втТаблицаНормативов.РазмерНормыПотребленияЗдания) КАК РазмерНормыПотребленияЗдания
	|ПОМЕСТИТЬ втСгруппированныеНормыПотребления
	|ИЗ
	|	втТаблицаНормативов КАК втТаблицаНормативов
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаНормативов.ЛицевойСчет,
	|	втТаблицаНормативов.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОплатСДопИнформацией.ЛицевойСчет КАК ЛицевойСчет,
	|	втОплатСДопИнформацией.УникальноеНаименованиеУслуги КАК УникальноеНаименованиеУслуги,
	|	втОплатСДопИнформацией.УслугаВБазе КАК УслугаВБазе,
	|	втОплатСДопИнформацией.КоличествоМесяцевЗадолженности КАК КоличествоМесяцевЗадолженности,
	|	втОплатСДопИнформацией.ОплатаИнд КАК ОплатаИнд,
	|	втОплатСДопИнформацией.ОплатаОДН КАК ОплатаОДН,
	|	втОплатСДопИнформацией.Тариф КАК Тариф,
	|	втОплатСДопИнформацией.ВидСобственности КАК ВидСобственности,
	|	втОплатСДопИнформацией.КоличествоЗарегистрированных КАК КоличествоЗарегистрированных,
	|	втОплатСДопИнформацией.КоличествоПроживающих КАК КоличествоПроживающих,
	|	втОплатСДопИнформацией.ОбщаяПлощадьЛС КАК ОбщаяПлощадьЛС,
	|	ЕСТЬNULL(втСгруппированныеНормыПотребления.РазмерНормыПотребления, 0) КАК РазмерНормыПотребления,
	|	ЕСТЬNULL(втСгруппированныеНормыПотребления.РазмерНормыПотребленияЗдания, 0) КАК РазмерНормыПотребленияЗдания
	|ИЗ
	|	втОплатСДопИнформацией КАК втОплатСДопИнформацией
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСгруппированныеНормыПотребления КАК втСгруппированныеНормыПотребления
	|		ПО втОплатСДопИнформацией.ЛицевойСчет = втСгруппированныеНормыПотребления.ЛицевойСчет
	|			И втОплатСДопИнформацией.УслугаВБазе = втСгруппированныеНормыПотребления.Услуга
	|ИТОГИ
	|	МАКСИМУМ(КоличествоМесяцевЗадолженности),
	|	СУММА(ОплатаИнд),
	|	СУММА(ОплатаОДН),
	|	МАКСИМУМ(ВидСобственности),
	|	МАКСИМУМ(КоличествоЗарегистрированных),
	|	МАКСИМУМ(КоличествоПроживающих),
	|	МАКСИМУМ(ОбщаяПлощадьЛС)
	|ПО
	|	ЛицевойСчет,
	|	УникальноеНаименованиеУслуги";
	
	ИтоговоеДеревоОплат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ОтборЛС = Новый Структура("ЛицевойСчет");
	
	Для каждого ВеткаЛС Из ИтоговоеДеревоОплат.Строки Цикл
		
		ОтборЛС.ЛицевойСчет = ВеткаЛС.ЛицевойСчет;
		НайденныеСтроки = Объект.ИркутскаяОбласть_РеестрЖКУ.НайтиСтроки(ОтборЛС);
		
		Для каждого СтрокаРеестраЖКУ Из НайденныеСтроки Цикл
			//Если НайденныеСтроки.Количество() > 0 Тогда
			//СтрокаРеестраЖКУ = НайденныеСтроки[0];
			СтрокаРеестраЖКУ.DBT_MONT = ВеткаЛС.КоличествоМесяцевЗадолженности;
			
			Если НЕ ПустаяСтрока(ВеткаЛС.ВидСобственности) Тогда
				СтрокаРеестраЖКУ.OWNERSHP = ВеткаЛС.ВидСобственности;
			КонецЕсли;
			
			Если ВеткаЛС.КоличествоЗарегистрированных <> 0 Тогда
				СтрокаРеестраЖКУ.RG_COUNT = ВеткаЛС.КоличествоЗарегистрированных;
			КонецЕсли;
			
			Если ВеткаЛС.КоличествоПроживающих <> 0 Тогда
				СтрокаРеестраЖКУ.FT_COUNT = ВеткаЛС.КоличествоПроживающих;
			КонецЕсли;
			
			Если ВеткаЛС.ОбщаяПлощадьЛС <> 0 Тогда
				СтрокаРеестраЖКУ.SQUARE = ВеткаЛС.ОбщаяПлощадьЛС;
			КонецЕсли;
			
			//Иначе
			//	Продолжить;
			//КонецЕсли;
			
			Для каждого ВеткаУникальноеНаименованиеУслуги Из ВеткаЛС.Строки Цикл
				
				Тариф    = 0;
				Норматив = 0;
				
				СчетчикНенулевыхТарифов = 0;
				СчетчикНенулевыхНорм    = 0;
				
				Для каждого ТекСтрока Из ВеткаУникальноеНаименованиеУслуги.Строки Цикл
					
					Если ТекСтрока.Тариф <> 0 Тогда
						
						Тариф = Тариф + ТекСтрока.Тариф;
						
						СчетчикНенулевыхТарифов = СчетчикНенулевыхТарифов + 1;
						
					КонецЕсли;
					
					ПомещениеОборудованоЭлектроОтопительнойУстановкой = Ложь;
					Если ПомещениеОборудованоЭлектроОтопительнойУстановкой Тогда
						
					Иначе
						Норматив = Норматив + ТекСтрока.РазмерНормыПотребления;
					КонецЕсли;
					
					//Если ТекСтрока.РазмерНормыПотребления <> 0 И ТекСтрока.РазмерНормыПотребленияЗдания <> 0 Тогда
					//	Если ВеткаУникальноеНаименованиеУслуги.УникальноеНаименованиеУслуги = "ЭлектрическаяЭнергия" Тогда
					//		Норматив = Норматив + ТекСтрока.РазмерНормыПотребленияЗдания;
					//	Иначе
					//		Норматив = Норматив + ТекСтрока.РазмерНормыПотребления;
					//	КонецЕсли;
					//ИначеЕсли ТекСтрока.РазмерНормыПотребления <> 0 ИЛИ ТекСтрока.РазмерНормыПотребленияЗдания <> 0 Тогда
					//	Норматив = Норматив + ТекСтрока.РазмерНормыПотребления + ТекСтрока.РазмерНормыПотребленияЗдания;
					//КонецЕсли;
					
					//Если ТекСтрока.РазмерНормыПотребления <> 0 ИЛИ ТекСтрока.РазмерНормыПотребленияЗдания <> 0 Тогда
					//	
					//	Норматив = Норматив + ТекСтрока.РазмерНормыПотребления + ТекСтрока.РазмерНормыПотребленияЗдания;
					//	
					//	СчетчикНенулевыхНорм = СчетчикНенулевыхНорм + 1;
					//	
					//КонецЕсли;
					
				КонецЦикла;
				
				Если ВеткаУникальноеНаименованиеУслуги.УникальноеНаименованиеУслуги = "ПлатаЗаЖилоеПомещение" Тогда
					
					СтрокаРеестраЖКУ.ACRUAL1 = ВеткаУникальноеНаименованиеУслуги.ОплатаИнд;
					СтрокаРеестраЖКУ.TARIFF1 = Тариф;
					//СтрокаРеестраЖКУ.TARIFF1 = ?(СчетчикНенулевыхТарифов = 0, 0, Тариф / СчетчикНенулевыхТарифов);
					
				ИначеЕсли ВеткаУникальноеНаименованиеУслуги.УникальноеНаименованиеУслуги = "ЭлектрическаяЭнергия" Тогда
					
					СтрокаРеестраЖКУ.ACRUAL2 = ВеткаУникальноеНаименованиеУслуги.ОплатаИнд;
					СтрокаРеестраЖКУ.TARIFF2 = ?(СчетчикНенулевыхТарифов = 0, 0, Тариф / СчетчикНенулевыхТарифов);
					
					СтрокаРеестраЖКУ.NORM2   = Норматив;
					//СтрокаРеестраЖКУ.NORM2   = ?(СчетчикНенулевыхНорм = 0,    0, Норматив / СчетчикНенулевыхНорм);
					
					СтрокаРеестраЖКУ.ACRUAL3 = ВеткаУникальноеНаименованиеУслуги.ОплатаОДН;
					
				ИначеЕсли ВеткаУникальноеНаименованиеУслуги.УникальноеНаименованиеУслуги = "Газоснабжение" Тогда
					
					СтрокаРеестраЖКУ.ACRUAL4 = ВеткаУникальноеНаименованиеУслуги.ОплатаИнд;
					СтрокаРеестраЖКУ.TARIFF4 = ?(СчетчикНенулевыхТарифов = 0, 0, Тариф / СчетчикНенулевыхТарифов);
					СтрокаРеестраЖКУ.NORM4   = Норматив;
					//СтрокаРеестраЖКУ.NORM4   = ?(СчетчикНенулевыхНорм = 0,    0, Норматив / СчетчикНенулевыхНорм);
					
				ИначеЕсли ВеткаУникальноеНаименованиеУслуги.УникальноеНаименованиеУслуги = "ГазоснабжениеБаллон" Тогда
					
					СтрокаРеестраЖКУ.ACRUAL5 = ВеткаУникальноеНаименованиеУслуги.ОплатаИнд;
					
				ИначеЕсли ВеткаУникальноеНаименованиеУслуги.УникальноеНаименованиеУслуги = "ГазоснабжениеОтопление" Тогда
					
					СтрокаРеестраЖКУ.TARIFF12 = ?(СчетчикНенулевыхТарифов = 0, 0, Тариф / СчетчикНенулевыхТарифов);
					СтрокаРеестраЖКУ.NORM12   = Норматив;
					//СтрокаРеестраЖКУ.NORM12   = ?(СчетчикНенулевыхНорм = 0,    0, Норматив / СчетчикНенулевыхНорм);
					
				ИначеЕсли ВеткаУникальноеНаименованиеУслуги.УникальноеНаименованиеУслуги = "ХолодноеВодоснабжение" Тогда
					
					СтрокаРеестраЖКУ.ACRUAL6 = ВеткаУникальноеНаименованиеУслуги.ОплатаИнд;
					СтрокаРеестраЖКУ.TARIFF6 = ?(СчетчикНенулевыхТарифов = 0, 0, Тариф / СчетчикНенулевыхТарифов);
					СтрокаРеестраЖКУ.NORM6   = Норматив;
					//СтрокаРеестраЖКУ.NORM6   = ?(СчетчикНенулевыхНорм = 0,    0, Норматив / СчетчикНенулевыхНорм);
					СтрокаРеестраЖКУ.ACRUAL7 = ВеткаУникальноеНаименованиеУслуги.ОплатаОДН;
					
				ИначеЕсли ВеткаУникальноеНаименованиеУслуги.УникальноеНаименованиеУслуги = "ОтведениеСточныхВод" Тогда
					
					СтрокаРеестраЖКУ.ACRUAL8 = ВеткаУникальноеНаименованиеУслуги.ОплатаИнд;
					СтрокаРеестраЖКУ.TARIFF8 = ?(СчетчикНенулевыхТарифов = 0, 0, Тариф / СчетчикНенулевыхТарифов);
					
					// Только для услуги "ОтведениеСточныхВод" норматив необходимо суммировать.
					СтрокаРеестраЖКУ.NORM8 = Норматив;
					//СтрокаРеестраЖКУ.NORM8   = ?(СчетчикНенулевыхНорм = 0,    0, Норматив / СчетчикНенулевыхНорм);
					
					СтрокаРеестраЖКУ.ACRUAL35 = ВеткаУникальноеНаименованиеУслуги.ОплатаОДН;
					
				ИначеЕсли ВеткаУникальноеНаименованиеУслуги.УникальноеНаименованиеУслуги = "ГорячееВодоснабжениеКубМетр" Тогда
					
					СтрокаРеестраЖКУ.ACRUAL9  = ВеткаУникальноеНаименованиеУслуги.ОплатаИнд;
					СтрокаРеестраЖКУ.ACRUAL10 = ВеткаУникальноеНаименованиеУслуги.ОплатаОДН;
					
					СтрокаРеестраЖКУ.TARIFF9_KUB = ?(СчетчикНенулевыхТарифов = 0, 0, Тариф / СчетчикНенулевыхТарифов);
					СтрокаРеестраЖКУ.NORM9_KUB   = Норматив;
					//СтрокаРеестраЖКУ.NORM9_KUB   = ?(СчетчикНенулевыхНорм = 0,    0, Норматив / СчетчикНенулевыхНорм);
					
				ИначеЕсли ВеткаУникальноеНаименованиеУслуги.УникальноеНаименованиеУслуги = "ГорячееВодоснабжениеГКал" Тогда
					
					СтрокаРеестраЖКУ.ACRUAL9  = СтрокаРеестраЖКУ.ACRUAL9  + ВеткаУникальноеНаименованиеУслуги.ОплатаИнд;
					СтрокаРеестраЖКУ.ACRUAL10 = СтрокаРеестраЖКУ.ACRUAL10 + ВеткаУникальноеНаименованиеУслуги.ОплатаОДН;
					
					СтрокаРеестраЖКУ.TARIFF9_GKL = ?(СчетчикНенулевыхТарифов = 0, 0, Тариф / СчетчикНенулевыхТарифов);
					СтрокаРеестраЖКУ.NORM9_GKAL   = Норматив;
					//СтрокаРеестраЖКУ.NORM9_GKL   = ?(СчетчикНенулевыхНорм = 0,    0, Норматив / СчетчикНенулевыхНорм);
					
				ИначеЕсли ВеткаУникальноеНаименованиеУслуги.УникальноеНаименованиеУслуги = "Отопление" Тогда
					
					СтрокаРеестраЖКУ.ACRUAL11 = ВеткаУникальноеНаименованиеУслуги.ОплатаИнд;
					СтрокаРеестраЖКУ.TARIFF11 = ?(СчетчикНенулевыхТарифов = 0, 0, Тариф / СчетчикНенулевыхТарифов);
					СтрокаРеестраЖКУ.NORM46   = Норматив;
					//СтрокаРеестраЖКУ.NORM46   = ?(СчетчикНенулевыхНорм = 0,    0, Норматив / СчетчикНенулевыхНорм);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ИтоговоеДеревоОплат.Строки.Количество() > 0 Тогда
		
		ВсегоОплачено         = 0;
		ИтогоПоТекущейКолонке = 0;
		
		Элементы.ИркутскаяОбласть_РеестрЖКУRG_COUNT.ТекстПодвала = Объект.ИркутскаяОбласть_РеестрЖКУ.Итог("RG_COUNT");
		Элементы.ИркутскаяОбласть_РеестрЖКУFT_COUNT.ТекстПодвала = Объект.ИркутскаяОбласть_РеестрЖКУ.Итог("FT_COUNT");
		Элементы.ИркутскаяОбласть_РеестрЖКУSQUARE.ТекстПодвала   = Объект.ИркутскаяОбласть_РеестрЖКУ.Итог("SQUARE");
		
		ИтогоПоТекущейКолонке = Объект.ИркутскаяОбласть_РеестрЖКУ.Итог("ACRUAL1");
		ВсегоОплачено                                            = ВсегоОплачено + ИтогоПоТекущейКолонке;
		Элементы.ИркутскаяОбласть_РеестрЖКУACRUAL1.ТекстПодвала  = ИтогоПоТекущейКолонке;
		
		ИтогоПоТекущейКолонке = Объект.ИркутскаяОбласть_РеестрЖКУ.Итог("ACRUAL2");
		ВсегоОплачено                                            = ВсегоОплачено + ИтогоПоТекущейКолонке;
		Элементы.ИркутскаяОбласть_РеестрЖКУACRUAL2.ТекстПодвала  = ИтогоПоТекущейКолонке;
		
		ИтогоПоТекущейКолонке = Объект.ИркутскаяОбласть_РеестрЖКУ.Итог("ACRUAL3");
		ВсегоОплачено                                            = ВсегоОплачено + ИтогоПоТекущейКолонке;
		Элементы.ИркутскаяОбласть_РеестрЖКУACRUAL3.ТекстПодвала  = ИтогоПоТекущейКолонке;
		
		ИтогоПоТекущейКолонке = Объект.ИркутскаяОбласть_РеестрЖКУ.Итог("ACRUAL4");
		ВсегоОплачено                                            = ВсегоОплачено + ИтогоПоТекущейКолонке;
		Элементы.ИркутскаяОбласть_РеестрЖКУACRUAL4.ТекстПодвала  = ИтогоПоТекущейКолонке;
		
		ИтогоПоТекущейКолонке = Объект.ИркутскаяОбласть_РеестрЖКУ.Итог("ACRUAL5");
		ВсегоОплачено                                            = ВсегоОплачено + ИтогоПоТекущейКолонке;
		Элементы.ИркутскаяОбласть_РеестрЖКУACRUAL5.ТекстПодвала  = ИтогоПоТекущейКолонке;
		
		ИтогоПоТекущейКолонке = Объект.ИркутскаяОбласть_РеестрЖКУ.Итог("ACRUAL6");
		ВсегоОплачено                                            = ВсегоОплачено + ИтогоПоТекущейКолонке;
		Элементы.ИркутскаяОбласть_РеестрЖКУACRUAL6.ТекстПодвала  = ИтогоПоТекущейКолонке;
		
		ИтогоПоТекущейКолонке = Объект.ИркутскаяОбласть_РеестрЖКУ.Итог("ACRUAL7");
		ВсегоОплачено                                            = ВсегоОплачено + ИтогоПоТекущейКолонке;
		Элементы.ИркутскаяОбласть_РеестрЖКУACRUAL7.ТекстПодвала  = ИтогоПоТекущейКолонке;
		
		ИтогоПоТекущейКолонке = Объект.ИркутскаяОбласть_РеестрЖКУ.Итог("ACRUAL8");
		ВсегоОплачено                                            = ВсегоОплачено + ИтогоПоТекущейКолонке;
		Элементы.ИркутскаяОбласть_РеестрЖКУACRUAL8.ТекстПодвала = ИтогоПоТекущейКолонке;
		
		ИтогоПоТекущейКолонке = Объект.ИркутскаяОбласть_РеестрЖКУ.Итог("ACRUAL35");
		ВсегоОплачено                                            = ВсегоОплачено + ИтогоПоТекущейКолонке;
		Элементы.ИркутскаяОбласть_РеестрЖКУACRUAL35.ТекстПодвала = ИтогоПоТекущейКолонке;
		
		ИтогоПоТекущейКолонке = Объект.ИркутскаяОбласть_РеестрЖКУ.Итог("ACRUAL9");
		ВсегоОплачено                                            = ВсегоОплачено + ИтогоПоТекущейКолонке;
		Элементы.ИркутскаяОбласть_РеестрЖКУACRUAL9.ТекстПодвала = ИтогоПоТекущейКолонке;
		
		ИтогоПоТекущейКолонке = Объект.ИркутскаяОбласть_РеестрЖКУ.Итог("ACRUAL10");
		ВсегоОплачено                                            = ВсегоОплачено + ИтогоПоТекущейКолонке;
		Элементы.ИркутскаяОбласть_РеестрЖКУACRUAL10.ТекстПодвала = ИтогоПоТекущейКолонке;
		
		ИтогоПоТекущейКолонке = Объект.ИркутскаяОбласть_РеестрЖКУ.Итог("ACRUAL11");
		ВсегоОплачено                                            = ВсегоОплачено + ИтогоПоТекущейКолонке;
		Элементы.ИркутскаяОбласть_РеестрЖКУACRUAL11.ТекстПодвала = ИтогоПоТекущейКолонке;
		
		Элементы.ИркутскаяОбласть_РеестрЖКУКнопкаОплаченоЗаЖКУ.Заголовок = "Всего оплачено за ЖКУ: " + Формат(ВсегоОплачено, "ЧДЦ=2; ЧН=0,00") + " руб.";
		
	КонецЕсли;
	
КонецПроцедуры // ДозаполнитьСведенияОбОплатахИТарифахЖКУ()

// Предназначена для дозаполнения сведений об оплатах в таблице "РеестрКапремонт".
//
&НаСервере
Процедура ДозаполнитьСведенияОбОплатахИТарифахКапремонт(СписокУслугКР)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаНач",     НачалоМесяца(Объект.Период));
	Запрос.УстановитьПараметр("ДатаКон",     КонецМесяца(Объект.Период));
	
	//Запрос.УстановитьПараметр("ДатаНачПредПериода",     НачалоМесяца(ДобавитьМесяц(Объект.Период, -1)));
	//Запрос.УстановитьПараметр("ДатаКонПредПериода",     КонецМесяца(ДобавитьМесяц(Объект.Период, -1)));
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Запрос.УстановитьПараметр("ТекущийМесяцНачисления", НачалоДня(КонецМесяца(Объект.Период)));
	
	Запрос.УстановитьПараметр("СписокУслугКР", СписокУслугКР);
	
	Запрос.УстановитьПараметр("ТаблицаСРеестромЖКУ", Объект.ИркутскаяОбласть_РеестрКапремонт.Выгрузить());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаРеестра.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ втИдентифицированныеЛС
	|ИЗ
	|	&ТаблицаСРеестромЖКУ КАК ТаблицаРеестра
	|ГДЕ
	|	НЕ ТаблицаРеестра.ЛицевойСчет = ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ втЛССДолгамиНаКонецТекущегоПериода
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&ДатаКон,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втИдентифицированныеЛС.ЛицевойСчет КАК ЛицевойСчет
	|					ИЗ
	|						втИдентифицированныеЛС КАК втИдентифицированныеЛС)
	|				И Услуга В (&СписокУслугКР)
	|				И НЕ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|ГДЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет КАК ЛицевойСчет,
	|	МИНИМУМ(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.МесяцНачисления) КАК СамыйРаннийМесяцНачисленияСДолгом
	|ПОМЕСТИТЬ втСведенияОСамыхРаннихМесяцахНачисленияЛСсДолгами
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&ДатаКон,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втЛССДолгамиНаКонецТекущегоПериода.ЛицевойСчет КАК ЛицевойСчет
	|					ИЗ
	|						втЛССДолгамиНаКонецТекущегоПериода КАК втЛССДолгамиНаКонецТекущегоПериода)
	|				И Услуга В (&СписокУслугКР)
	|				И НЕ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|ГДЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСведенияОСамыхРаннихМесяцахНачисленияЛСсДолгами.ЛицевойСчет КАК ЛицевойСчет,
	|	РАЗНОСТЬДАТ(втСведенияОСамыхРаннихМесяцахНачисленияЛСсДолгами.СамыйРаннийМесяцНачисленияСДолгом, &ТекущийМесяцНачисления, МЕСЯЦ) КАК КоличествоМесяцевЗадолженности
	|ПОМЕСТИТЬ втСведенияОКоличествеМесяцевЗадолженностиНайденныхЛС
	|ИЗ
	|	втСведенияОСамыхРаннихМесяцахНачисленияЛСсДолгами КАК втСведенияОСамыхРаннихМесяцахНачисленияЛСсДолгами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
	|	СУММА(-УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот) КАК Оплачено
	|ПОМЕСТИТЬ втОплатыУслугВПериоде
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втИдентифицированныеЛС.ЛицевойСчет КАК ЛицевойСчет
	|					ИЗ
	|						втИдентифицированныеЛС КАК втИдентифицированныеЛС)
	|				И Услуга В (&СписокУслугКР)
	|				И ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)
	|				И НЕ РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)) КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект КАК Помещение,
	|	КВП_ПлощадьПомещенияСрезПоследних.Площадь КАК ОбщаяПлощадь
	|ПОМЕСТИТЬ втПлощадиПомещений
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|			&ДатаКон,
	|			Объект В
	|					(ВЫБРАТЬ
	|						втИдентифицированныеЛС.ЛицевойСчет.Адрес КАК Помещение
	|					ИЗ
	|						втИдентифицированныеЛС КАК втИдентифицированныеЛС)
	|				И ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)) КАК КВП_ПлощадьПомещенияСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	ВЫБОР
	|		КОГДА КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель = 0
	|			ТОГДА 0
	|		ИНАЧЕ КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель / КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель
	|	КОНЕЦ КАК ДоляЛС
	|ПОМЕСТИТЬ втДолиЛС
	|ИЗ
	|	РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втИдентифицированныеЛС.ЛицевойСчет КАК ЛицевойСчет
	|				ИЗ
	|					втИдентифицированныеЛС КАК втИдентифицированныеЛС)) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИдентифицированныеЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	ЕСТЬNULL(втДолиЛС.ДоляЛС, 0) * ЕСТЬNULL(втПлощадиПомещений.ОбщаяПлощадь, 0) КАК ОбщаяПлощадьЛС
	|ПОМЕСТИТЬ втОбщиеПлощадиЛС
	|ИЗ
	|	втИдентифицированныеЛС КАК втИдентифицированныеЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПлощадиПомещений КАК втПлощадиПомещений
	|		ПО втИдентифицированныеЛС.ЛицевойСчет.Адрес = втПлощадиПомещений.Помещение
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДолиЛС КАК втДолиЛС
	|		ПО втИдентифицированныеЛС.ЛицевойСчет = втДолиЛС.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИдентифицированныеЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	втОплатыУслугВПериоде.Оплачено КАК Оплачено,
	|	втСведенияОКоличествеМесяцевЗадолженностиНайденныхЛС.КоличествоМесяцевЗадолженности КАК КоличествоМесяцевЗадолженности,
	|	ЕСТЬNULL(втОбщиеПлощадиЛС.ОбщаяПлощадьЛС, 0) КАК ОбщаяПлощадьЛС
	|ИЗ
	|	втИдентифицированныеЛС КАК втИдентифицированныеЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОКоличествеМесяцевЗадолженностиНайденныхЛС КАК втСведенияОКоличествеМесяцевЗадолженностиНайденныхЛС
	|		ПО втИдентифицированныеЛС.ЛицевойСчет = втСведенияОКоличествеМесяцевЗадолженностиНайденныхЛС.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОплатыУслугВПериоде КАК втОплатыУслугВПериоде
	|		ПО втИдентифицированныеЛС.ЛицевойСчет = втОплатыУслугВПериоде.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОбщиеПлощадиЛС КАК втОбщиеПлощадиЛС
	|		ПО втИдентифицированныеЛС.ЛицевойСчет = втОбщиеПлощадиЛС.ЛицевойСчет";
	
	ВыборкаОплатПоКР = Запрос.Выполнить().Выбрать();
	
	// Сформировать таблицу с тарифами по услугам по состоянию на конец декабря прошлого года.
	НачалоТекущегоМесяца = НачалоМесяца(Объект.Период);
	
	ТаблицаЛицевыхСчетовСУслугамиКР = Новый ТаблицаЗначений;
	ТаблицаЛицевыхСчетовСУслугамиКР.Колонки.Добавить("ЛицевойСчет",                  Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
	ТаблицаЛицевыхСчетовСУслугамиКР.Колонки.Добавить("УслугаВБазе",                  Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
	ТаблицаЛицевыхСчетовСУслугамиКР.Колонки.Добавить("ВидТарифа",                    Новый ОписаниеТипов("ПеречислениеСсылка.КВП_ВидыТарифов"));
	ТаблицаЛицевыхСчетовСУслугамиКР.Колонки.Добавить("Тариф",                        УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(15,4));
	ТаблицаЛицевыхСчетовСУслугамиКР.Колонки.Добавить("КоличествоЗаполненныхТарифов", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(3));
	ТаблицаЛицевыхСчетовСУслугамиКР.Колонки.Добавить("УслугаДействует",              Новый ОписаниеТипов("Булево"));
	
	Пока ВыборкаОплатПоКР.Следующий() Цикл
		Для каждого ТекУслугаКР Из СписокУслугКР Цикл
			НоваяСтрока = ТаблицаЛицевыхСчетовСУслугамиКР.Добавить();
			НоваяСтрока.ЛицевойСчет     = ВыборкаОплатПоКР.ЛицевойСчет;
			НоваяСтрока.УслугаВБазе     = ТекУслугаКР.Значение;
			НоваяСтрока.УслугаДействует = Истина;
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаЛицевыхСчетовСУслугамиКР = СформироватьТаблицуТарифовНаНачалоТекущегоМесяца(ТаблицаЛицевыхСчетовСУслугамиКР, Объект.Организация, НачалоТекущегоМесяца);
	
	ТаблицаЛицевыхСчетовСУслугамиКР.Свернуть("ЛицевойСчет", "Тариф, КоличествоЗаполненныхТарифов");
	
	Для каждого ТекСтрока Из ТаблицаЛицевыхСчетовСУслугамиКР Цикл
		ТекСтрока.Тариф = Окр(ТекСтрока.Тариф / ТекСтрока.КоличествоЗаполненныхТарифов, 2);
	КонецЦикла;
	
	ОтборЛС = Новый Структура("ЛицевойСчет");
	
	// Позиционируем выборку на первую запись.
	ВыборкаОплатПоКР.Сбросить();
	
	Пока ВыборкаОплатПоКР.Следующий() Цикл
		
		ОтборЛС.ЛицевойСчет = ВыборкаОплатПоКР.ЛицевойСчет;
		НайденныеСтроки = Объект.ИркутскаяОбласть_РеестрКапремонт.НайтиСтроки(ОтборЛС);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаРеестраКапремонта = НайденныеСтроки[0];
		Иначе
			Продолжить;
		КонецЕсли;
		
		НайденнаяСтрокаСТарифом = ТаблицаЛицевыхСчетовСУслугамиКР.Найти(ВыборкаОплатПоКР.ЛицевойСчет, "ЛицевойСчет");
		Если НайденнаяСтрокаСТарифом <> Неопределено Тогда
			СтрокаРеестраКапремонта.MIN_PAY = НайденнаяСтрокаСТарифом.Тариф;
		КонецЕсли;
		
		СтрокаРеестраКапремонта.SQUARE     = ВыборкаОплатПоКР.ОбщаяПлощадьЛС;
		СтрокаРеестраКапремонта.PAYMENT    = ВыборкаОплатПоКР.Оплачено;
		СтрокаРеестраКапремонта.NUM_MONTHS = ВыборкаОплатПоКР.КоличествоМесяцевЗадолженности;
		
	КонецЦикла;
	
	Если ВыборкаОплатПоКР.Количество() > 0 Тогда
		Элементы.ИркутскаяОбласть_РеестрКапремонтSQUARE.ТекстПодвала  = Объект.ИркутскаяОбласть_РеестрКапремонт.Итог("SQUARE");
		
		ВсегоОплачено = Объект.ИркутскаяОбласть_РеестрКапремонт.Итог("PAYMENT");
		
		Элементы.ИркутскаяОбласть_РеестрКапремонтPAYMENT.ТекстПодвала = ВсегоОплачено;
		
		Элементы.ИркутскаяОбласть_РеестрКапремонтКнопкаОплаченоЗаКР.Заголовок = "Всего оплачено за капремонт: " + Формат(ВсегоОплачено, "ЧДЦ=2; ЧН=0,00") + " руб.";
		
	КонецЕсли;
	
КонецПроцедуры // ДозаполнитьСведенияОбОплатахИТарифахКапремонт()

// Предназначена для дозаполнения сведений об оплатах в таблице "РеестрТКО".
//
&НаСервере
Процедура ДозаполнитьСведенияОбОплатахИТарифахТКО()
	
	НачалоТекущегоМесяца = НачалоМесяца(Объект.Период);
	
	// 1. Определим для лицевых счетов сумму оплаты, колчество месяцев задолженности,
	// количество зарегистрированных, количество проживающих, размер норматива потребления.
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаНач",                НачалоМесяца(Объект.Период));
	Запрос.УстановитьПараметр("ДатаКон",                КонецМесяца(Объект.Период));
	Запрос.УстановитьПараметр("Организация",            Объект.Организация);
	Запрос.УстановитьПараметр("ТекущийМесяцНачисления", НачалоДня(КонецМесяца(Объект.Период)));
	Запрос.УстановитьПараметр("ТаблицаСРеестромТКО",    Объект.ИркутскаяОбласть_РеестрТКО.Выгрузить());
	Запрос.УстановитьПараметр("СоответствиеУслуг",      Объект.ИркутскаяОбласть_ЖКУ_В_Базе.Выгрузить());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаРеестра.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ втИдентифицированныеЛС
	|ИЗ
	|	&ТаблицаСРеестромТКО КАК ТаблицаРеестра
	|ГДЕ
	|	НЕ ТаблицаРеестра.ЛицевойСчет = ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствиеУслуг.УникальноеНаименованиеУслуги КАК УникальноеНаименованиеУслуги,
	|	СоответствиеУслуг.УслугаВБазе КАК УслугаВБазе,
	|	СоответствиеУслуг.УчитыватьПриРасчетеНорматива КАК УчитыватьПриРасчетеНорматива
	|ПОМЕСТИТЬ СоответствиеУслуг
	|ИЗ
	|	&СоответствиеУслуг КАК СоответствиеУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствиеУслуг.УслугаВБазе КАК Услуга
	|ПОМЕСТИТЬ втУслуги
	|ИЗ
	|	СоответствиеУслуг КАК СоответствиеУслуг
	|ГДЕ
	|	СоответствиеУслуг.УникальноеНаименованиеУслуги ПОДОБНО ""ТвердыеКоммунальныеОтходы""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИдентифицированныеЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	втУслуги.Услуга КАК Услуга
	|ПОМЕСТИТЬ втЛицевыеСчетаИУслуги
	|ИЗ
	|	втИдентифицированныеЛС КАК втИдентифицированныеЛС,
	|	втУслуги КАК втУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствиеУслуг.УслугаВБазе КАК Услуга
	|ПОМЕСТИТЬ втУслугиОпределениеНорматива
	|ИЗ
	|	СоответствиеУслуг КАК СоответствиеУслуг
	|ГДЕ
	|	СоответствиеУслуг.УникальноеНаименованиеУслуги ПОДОБНО ""ТвердыеКоммунальныеОтходы""
	|	И СоответствиеУслуг.УчитыватьПриРасчетеНорматива = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИдентифицированныеЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	втУслугиОпределениеНорматива.Услуга КАК Услуга
	|ПОМЕСТИТЬ втЛицевыеСчетаИУслугиОпределениеНорматива
	|ИЗ
	|	втИдентифицированныеЛС КАК втИдентифицированныеЛС,
	|	втУслугиОпределениеНорматива КАК втУслугиОпределениеНорматива
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга КАК Услуга,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления КАК СсылкаНаНормуПотребления,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Размер КАК РазмерНормыПотребления,
	|	ВЫБОР
	|		КОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки = ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НормаПростая
	|ПОМЕСТИТЬ втДействующиеНормативыПотребленияПоУслугамНаЛС
	|ИЗ
	|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(
	|			&ДатаНач,
	|			(ЛицевойСчет, Услуга) В
	|				(ВЫБРАТЬ
	|					втЛицевыеСчетаИУслугиОпределениеНорматива.ЛицевойСчет КАК ЛицевойСчет,
	|					втЛицевыеСчетаИУслугиОпределениеНорматива.Услуга КАК Услуга
	|				ИЗ
	|					втЛицевыеСчетаИУслугиОпределениеНорматива КАК втЛицевыеСчетаИУслугиОпределениеНорматива)) КАК КВП_НормыПотребленияУслугЛССрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет КАК ЛицевойСчет,
	|	МИНИМУМ(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.МесяцНачисления) КАК СамыйРаннийМесяцНачисленияСДолгом
	|ПОМЕСТИТЬ втСведенияОСамыхРаннихМесяцахНачисленияЛСсДолгами
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&ДатаКон,
	|			Организация = &Организация
	|				И (ЛицевойСчет, Услуга) В
	|					(ВЫБРАТЬ
	|						втЛицевыеСчетаИУслуги.ЛицевойСчет КАК ЛицевойСчет,
	|						втЛицевыеСчетаИУслуги.Услуга КАК Услуга
	|					ИЗ
	|						втЛицевыеСчетаИУслуги КАК втЛицевыеСчетаИУслуги)
	|				И НЕ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|ГДЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСведенияОСамыхРаннихМесяцахНачисленияЛСсДолгами.ЛицевойСчет КАК ЛицевойСчет,
	|	РАЗНОСТЬДАТ(втСведенияОСамыхРаннихМесяцахНачисленияЛСсДолгами.СамыйРаннийМесяцНачисленияСДолгом, &ТекущийМесяцНачисления, МЕСЯЦ) КАК КоличествоМесяцевЗадолженности
	|ПОМЕСТИТЬ втСведенияОКоличествеМесяцевЗадолженностиНайденныхЛС
	|ИЗ
	|	втСведенияОСамыхРаннихМесяцахНачисленияЛСсДолгами КАК втСведенияОСамыхРаннихМесяцахНачисленияЛСсДолгами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
	|	СУММА(-УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот) КАК Оплачено
	|ПОМЕСТИТЬ втОплатыУслугВПериоде
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Организация = &Организация
	|				И (ЛицевойСчет, Услуга) В
	|					(ВЫБРАТЬ
	|						втЛицевыеСчетаИУслуги.ЛицевойСчет КАК ЛицевойСчет,
	|						втЛицевыеСчетаИУслуги.Услуга КАК Услуга
	|					ИЗ
	|						втЛицевыеСчетаИУслуги КАК втЛицевыеСчетаИУслуги)
	|				И ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)
	|				И НЕ РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)) КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец) КАК КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втСведенияОЗарегистрированных
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втИдентифицированныеЛС.ЛицевойСчет КАК ЛицевойСчет
	|					ИЗ
	|						втИдентифицированныеЛС КАК втИдентифицированныеЛС)
	|				И ДатаИзменения <= &ДатаКон) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец) КАК КоличествоПроживающих
	|ПОМЕСТИТЬ втСведенияОПроживающих
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втИдентифицированныеЛС.ЛицевойСчет КАК ЛицевойСчет
	|					ИЗ
	|						втИдентифицированныеЛС КАК втИдентифицированныеЛС)
	|				И ДатаИзменения <= &ДатаКон) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.КоличествоПроживающих КАК КоличествоПроживающих,
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.КоличествоЗарегистрированных КАК КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втСведенияОЗарегистрированныхИПроживающихГотовымиЧислами
	|ИЗ
	|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втИдентифицированныеЛС.ЛицевойСчет КАК ЛицевойСчет
	|				ИЗ
	|					втИдентифицированныеЛС КАК втИдентифицированныеЛС)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИдентифицированныеЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	ВЫБОР
	|		КОГДА УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Значение
	|			ТОГДА ЕСТЬNULL(втСведенияОЗарегистрированныхИПроживающихГотовымиЧислами.КоличествоЗарегистрированных, 0)
	|		ИНАЧЕ ЕСТЬNULL(втСведенияОЗарегистрированных.КоличествоЗарегистрированных, 0)
	|	КОНЕЦ КАК КоличествоЗарегистрированных,
	|	ВЫБОР
	|		КОГДА УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Значение
	|			ТОГДА ЕСТЬNULL(втСведенияОЗарегистрированныхИПроживающихГотовымиЧислами.КоличествоПроживающих, 0)
	|		ИНАЧЕ ЕСТЬNULL(втСведенияОПроживающих.КоличествоПроживающих, 0)
	|	КОНЕЦ КАК КоличествоПроживающих
	|ПОМЕСТИТЬ втСведенияОЧисленностиЛС
	|ИЗ
	|	втИдентифицированныеЛС КАК втИдентифицированныеЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОЗарегистрированных КАК втСведенияОЗарегистрированных
	|		ПО втИдентифицированныеЛС.ЛицевойСчет = втСведенияОЗарегистрированных.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОПроживающих КАК втСведенияОПроживающих
	|		ПО втИдентифицированныеЛС.ЛицевойСчет = втСведенияОПроживающих.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОЗарегистрированныхИПроживающихГотовымиЧислами КАК втСведенияОЗарегистрированныхИПроживающихГотовымиЧислами
	|		ПО втИдентифицированныеЛС.ЛицевойСчет = втСведенияОЗарегистрированныхИПроживающихГотовымиЧислами.ЛицевойСчет,
	|	Константа.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами КАК УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛицевыеСчетаИУслуги.ЛицевойСчет КАК ЛицевойСчет,
	|	втЛицевыеСчетаИУслуги.Услуга КАК УслугаВБазе,
	|	втОплатыУслугВПериоде.Оплачено КАК Оплачено,
	|	втСведенияОКоличествеМесяцевЗадолженностиНайденныхЛС.КоличествоМесяцевЗадолженности КАК КоличествоМесяцевЗадолженности,
	|	ЕСТЬNULL(втСведенияОЧисленностиЛС.КоличествоЗарегистрированных, 0) КАК КоличествоЗарегистрированных,
	|	ЕСТЬNULL(втСведенияОЧисленностиЛС.КоличествоПроживающих, 0) КАК КоличествоПроживающих,
	|	ЕСТЬNULL(втДействующиеНормативыПотребленияПоУслугамНаЛС.СсылкаНаНормуПотребления, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)) КАК СсылкаНаНормуПотребления,
	|	ЕСТЬNULL(втДействующиеНормативыПотребленияПоУслугамНаЛС.РазмерНормыПотребления, 0) КАК РазмерНормыПотребления,
	|	ЕСТЬNULL(втДействующиеНормативыПотребленияПоУслугамНаЛС.НормаПростая, ИСТИНА) КАК НормаПростая,
	|	ИСТИНА КАК УслугаДействует
	|ИЗ
	|	втЛицевыеСчетаИУслуги КАК втЛицевыеСчетаИУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОКоличествеМесяцевЗадолженностиНайденныхЛС КАК втСведенияОКоличествеМесяцевЗадолженностиНайденныхЛС
	|		ПО втЛицевыеСчетаИУслуги.ЛицевойСчет = втСведенияОКоличествеМесяцевЗадолженностиНайденныхЛС.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОплатыУслугВПериоде КАК втОплатыУслугВПериоде
	|		ПО втЛицевыеСчетаИУслуги.ЛицевойСчет = втОплатыУслугВПериоде.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОЧисленностиЛС КАК втСведенияОЧисленностиЛС
	|		ПО втЛицевыеСчетаИУслуги.ЛицевойСчет = втСведенияОЧисленностиЛС.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДействующиеНормативыПотребленияПоУслугамНаЛС КАК втДействующиеНормативыПотребленияПоУслугамНаЛС
	|		ПО втЛицевыеСчетаИУслуги.ЛицевойСчет = втДействующиеНормативыПотребленияПоУслугамНаЛС.ЛицевойСчет
	|			И втЛицевыеСчетаИУслуги.Услуга = втДействующиеНормативыПотребленияПоУслугамНаЛС.Услуга";
	
	ТаблицаЛицевыхСчетов = Запрос.Выполнить().Выгрузить();
	
	// Дозаполним размеры норм, у которых вариант настройки отличен от значения "Простой".
	Для Каждого ТекСтрока Из ТаблицаЛицевыхСчетов Цикл
		Если Не ТекСтрока.НормаПростая Тогда
			ТекСтрока.РазмерНормыПотребления = ПолучитьРазмерНормыПотребления(ТекСтрока.ЛицевойСчет, НачалоТекущегоМесяца, ТекСтрока.СсылкаНаНормуПотребления, Объект.Организация);
		КонецЕсли;
	КонецЦикла;
	
	// 2. Получим тарифы для лицевых счетов по услугам.
	ТаблицаТарифыПоУслугам = ТаблицаЛицевыхСчетов.Скопировать(, "ЛицевойСчет, УслугаВБазе, УслугаДействует");
	ТаблицаТарифыПоУслугам.Колонки.Добавить("ВидТарифа",                    Новый ОписаниеТипов("ПеречислениеСсылка.КВП_ВидыТарифов"));
	ТаблицаТарифыПоУслугам.Колонки.Добавить("Тариф",                        УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(15,4));
	ТаблицаТарифыПоУслугам.Колонки.Добавить("КоличествоЗаполненныхТарифов", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(3));
	
	ТаблицаТарифыПоУслугам = СформироватьТаблицуТарифовНаНачалоТекущегоМесяца(ТаблицаТарифыПоУслугам, Объект.Организация, НачалоТекущегоМесяца);
	
	// 3. Получим итоговые данные по лицевым счетам.
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТаблицаЛицевыхСчетов",   ТаблицаЛицевыхСчетов);
	Запрос.УстановитьПараметр("ТаблицаТарифыПоУслугам", ТаблицаТарифыПоУслугам);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЛицевыхСчетов.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаЛицевыхСчетов.УслугаВБазе КАК Услуга,
	|	ТаблицаЛицевыхСчетов.Оплачено КАК Оплачено,
	|	ТаблицаЛицевыхСчетов.КоличествоМесяцевЗадолженности КАК КоличествоМесяцевЗадолженности,
	|	ТаблицаЛицевыхСчетов.КоличествоЗарегистрированных КАК КоличествоЗарегистрированных,
	|	ТаблицаЛицевыхСчетов.КоличествоПроживающих КАК КоличествоПроживающих,
	|	ТаблицаЛицевыхСчетов.РазмерНормыПотребления КАК РазмерНормыПотребления
	|ПОМЕСТИТЬ втТаблицаЛицевыхСчетов
	|ИЗ
	|	&ТаблицаЛицевыхСчетов КАК ТаблицаЛицевыхСчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаЛицевыхСчетов.ЛицевойСчет КАК ЛицевойСчет,
	|	МАКСИМУМ(втТаблицаЛицевыхСчетов.Оплачено) КАК Оплачено,
	|	МАКСИМУМ(втТаблицаЛицевыхСчетов.КоличествоМесяцевЗадолженности) КАК КоличествоМесяцевЗадолженности,
	|	МАКСИМУМ(втТаблицаЛицевыхСчетов.КоличествоЗарегистрированных) КАК КоличествоЗарегистрированных,
	|	МАКСИМУМ(втТаблицаЛицевыхСчетов.КоличествоПроживающих) КАК КоличествоПроживающих,
	|	СУММА(втТаблицаЛицевыхСчетов.РазмерНормыПотребления) КАК РазмерНормыПотребления
	|ПОМЕСТИТЬ втТаблицаЛицевыхСчетовГруппировка
	|ИЗ
	|	втТаблицаЛицевыхСчетов КАК втТаблицаЛицевыхСчетов
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаЛицевыхСчетов.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТарифыПоУслугам.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаТарифыПоУслугам.УслугаВБазе КАК Услуга,
	|	ТаблицаТарифыПоУслугам.Тариф КАК Тариф,
	|	ТаблицаТарифыПоУслугам.КоличествоЗаполненныхТарифов КАК КоличествоЗаполненныхТарифов
	|ПОМЕСТИТЬ втТаблицаТарифыПоУслугам
	|ИЗ
	|	&ТаблицаТарифыПоУслугам КАК ТаблицаТарифыПоУслугам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаТарифыПоУслугам.ЛицевойСчет КАК ЛицевойСчет,
	|	СУММА(втТаблицаТарифыПоУслугам.Тариф) КАК Тариф,
	|	СУММА(втТаблицаТарифыПоУслугам.КоличествоЗаполненныхТарифов) КАК КоличествоЗаполненныхТарифов
	|ПОМЕСТИТЬ втТаблицаТарифыПоУслугамГруппировка
	|ИЗ
	|	втТаблицаТарифыПоУслугам КАК втТаблицаТарифыПоУслугам
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаТарифыПоУслугам.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаТарифыПоУслугамГруппировка.ЛицевойСчет КАК ЛицевойСчет,
	|	ВЫРАЗИТЬ(втТаблицаТарифыПоУслугамГруппировка.Тариф / втТаблицаТарифыПоУслугамГруппировка.КоличествоЗаполненныхТарифов КАК ЧИСЛО(10, 2)) КАК Тариф
	|ПОМЕСТИТЬ втТарифыДляЛицевыхСчетовПоУслугам
	|ИЗ
	|	втТаблицаТарифыПоУслугамГруппировка КАК втТаблицаТарифыПоУслугамГруппировка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаЛицевыхСчетовГруппировка.ЛицевойСчет КАК ЛицевойСчет,
	|	втТаблицаЛицевыхСчетовГруппировка.Оплачено КАК Оплачено,
	|	втТаблицаЛицевыхСчетовГруппировка.КоличествоМесяцевЗадолженности КАК КоличествоМесяцевЗадолженности,
	|	втТаблицаЛицевыхСчетовГруппировка.КоличествоЗарегистрированных КАК КоличествоЗарегистрированных,
	|	втТаблицаЛицевыхСчетовГруппировка.КоличествоПроживающих КАК КоличествоПроживающих,
	|	втТаблицаЛицевыхСчетовГруппировка.РазмерНормыПотребления КАК РазмерНормыПотребления,
	|	ЕСТЬNULL(втТарифыДляЛицевыхСчетовПоУслугам.Тариф, 0) КАК Тариф
	|ИЗ
	|	втТаблицаЛицевыхСчетовГруппировка КАК втТаблицаЛицевыхСчетовГруппировка
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТарифыДляЛицевыхСчетовПоУслугам КАК втТарифыДляЛицевыхСчетовПоУслугам
	|		ПО втТаблицаЛицевыхСчетовГруппировка.ЛицевойСчет = втТарифыДляЛицевыхСчетовПоУслугам.ЛицевойСчет";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ОтборЛС = Новый Структура("ЛицевойСчет");
	
	Пока Выборка.Следующий() Цикл
		
		ОтборЛС.ЛицевойСчет = Выборка.ЛицевойСчет;
		НайденныеСтроки = Объект.ИркутскаяОбласть_РеестрТКО.НайтиСтроки(ОтборЛС);
		Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			
			ТекСтрока.RG_COUNT = Выборка.КоличествоЗарегистрированных;
			ТекСтрока.FT_COUNT = Выборка.КоличествоПроживающих;
			ТекСтрока.PAYMENT  = Выборка.Оплачено;
			ТекСтрока.TARIFF13 = Выборка.Тариф;
			ТекСтрока.NORM13   = Выборка.РазмерНормыПотребления;
			ТекСтрока.DBT_MONT = Выборка.КоличествоМесяцевЗадолженности;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если Не Выборка.Количество() = 0 Тогда
		
		Элементы.ИркутскаяОбласть_РеестрТКОRG_COUNT.ТекстПодвала = Объект.ИркутскаяОбласть_РеестрТКО.Итог("RG_COUNT");
		Элементы.ИркутскаяОбласть_РеестрТКОFT_COUNT.ТекстПодвала = Объект.ИркутскаяОбласть_РеестрТКО.Итог("FT_COUNT");
		
		ВсегоОплачено = Объект.ИркутскаяОбласть_РеестрТКО.Итог("PAYMENT");
		
		Элементы.ИркутскаяОбласть_РеестрТКОPAYMENT.ТекстПодвала = ВсегоОплачено;
		
		Элементы.ИркутскаяОбласть_РеестрТКОКнопкаОплаченоЗаТКО.Заголовок = "Всего оплачено за ТКО: " + Формат(ВсегоОплачено, "ЧДЦ=2; ЧН=0,00") + " руб.";
		
	КонецЕсли;
	
КонецПроцедуры // ДозаполнитьСведенияОбОплатахИТарифахКапремонт()

// Предназначена для подготовки списка услуг по уникальному наименованию и типу услуги.
//
&НаСервере
Функция ПодготовитьСписокУслугВБазеПоУникальномуНаименованиюИлиТипуУслуги(СтрокаПоиска, КолонкаПоиска)
	
	СписокУслуг = Новый СписокЗначений;
	
	Отбор = Новый Структура(КолонкаПоиска, СтрокаПоиска);
	НайденныеСтроки = Объект.ИркутскаяОбласть_ЖКУ_В_Базе.НайтиСтроки(Отбор);
	Для каждого ТекСтрока Из НайденныеСтроки Цикл
		СписокУслуг.Добавить(ТекСтрока.УслугаВБазе);
	КонецЦикла;
	
	Возврат СписокУслуг;
	
КонецФункции // ПодготовитьСписокУслугВБазеПоУникальномуНаименованиюИлиТипуУслуги()

// Предназначена для определения размера тарифа по услугам по состоянию на конец декабря прошлого года от месяца выгрузки.
//
&НаСервереБезКонтекста
Функция СформироватьТаблицуТарифовНаНачалоТекущегоМесяца(ТаблицаЛицевыхСчетовСУслугами, Организация, НачалоТекущегоМесяца)
	
	ТаблицаУслуг = ТаблицаЛицевыхСчетовСУслугами.Скопировать(, "УслугаВБазе");
	ТаблицаУслуг.Свернуть("УслугаВБазе");
	
	ОтборУслуг       = Новый Структура("УслугаВБазе");
	СписокЛСПоУслуге = Новый СписокЗначений;
	Для каждого ТекУслуга Из ТаблицаУслуг Цикл
		
		ОтборУслуг.УслугаВБазе = ТекУслуга.УслугаВБазе;
		НайденныеСтроки = ТаблицаЛицевыхСчетовСУслугами.НайтиСтроки(ОтборУслуг);
		Для каждого ТекСтрока Из НайденныеСтроки Цикл
			Если ТекСтрока.УслугаДействует Тогда
				СписокЛСПоУслуге.Добавить(ТекСтрока.ЛицевойСчет);
			КонецЕсли;
		КонецЦикла;
		
		Если СписокЛСПоУслуге.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаТарифовПоТекущейУслуге = ПолучитьТарифПоЛицевомуСчету(НачалоТекущегоМесяца, Организация, ТекУслуга.УслугаВБазе, СписокЛСПоУслуге);
		Если ТаблицаТарифовПоТекущейУслуге.Количество() > 0 Тогда
			Для каждого ТекСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока = ТаблицаТарифовПоТекущейУслуге.Найти(ТекСтрока.ЛицевойСчет, "Объект");
				Если НайденнаяСтрока <> Неопределено Тогда
					ТекСтрока.ВидТарифа                    = НайденнаяСтрока.ВидТарифа;
					ТекСтрока.Тариф                        = НайденнаяСтрока.Тариф;
					ТекСтрока.КоличествоЗаполненныхТарифов = 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ОтборПоОчисткеНулевыхТарифов = Новый Структура("Тариф", 0);
	СтрокиСНезаполненнымиТарифами = ТаблицаЛицевыхСчетовСУслугами.НайтиСтроки(ОтборПоОчисткеНулевыхТарифов);
	
	Для каждого ТекСтрокаУдаления Из СтрокиСНезаполненнымиТарифами Цикл
		ТаблицаЛицевыхСчетовСУслугами.Удалить(ТекСтрокаУдаления);
	КонецЦикла;
	
	Возврат ТаблицаЛицевыхСчетовСУслугами;
	
КонецФункции // СформироватьТаблицуТарифовНаКонецДекабряПрошлогоГода()

// Предназначена для пересчета значений итогов в колонках таблицы "Реестр ЖКУ", "Реестр капремонт" и "Реестр ТКО".
//
&НаКлиенте
Процедура ПересчитатьИтогиПоКолонке()
	
	НаименованиеТаблицы   = ТекущийЭлемент.Имя;
	ТекущийЭлементТаблицы = ТекущийЭлемент.ТекущийЭлемент.Имя;
	НаименованиеПоля      = СтрЗаменить(ТекущийЭлемент.ТекущийЭлемент.Имя, НаименованиеТаблицы, "");
	
	Элементы[ТекущийЭлементТаблицы].ТекстПодвала = Объект[НаименованиеТаблицы].Итог(НаименованиеПоля); // Объект[ТекущийЭлемент.Имя].Итог(СтрЗаменить(ТекущийЭлемент.ТекущийЭлемент.Имя, ТекущийЭлемент.Имя, ""))
	
КонецПроцедуры // ПересчитатьИтогиПоКолонке()

#КонецОбласти

#КонецОбласти
