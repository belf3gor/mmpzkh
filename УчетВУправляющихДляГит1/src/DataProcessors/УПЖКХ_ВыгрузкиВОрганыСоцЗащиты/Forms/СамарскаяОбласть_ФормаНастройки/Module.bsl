
//////////////////////////////////////////////////////////////////////////
// РАБОТА С ВРЕМЕННЫМ ХРАНИЛИЩЕМ

#Область РаботаСВременнымХранилищем

&НаСервере
// Помещает таблицу услуг во временное хранилище.
//
// Возвращаемое значение:
//  Строка - адрес настроек во временном хранилище.
//
//
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КодировкаDBF",      Объект.КодировкаDBF);
	СтруктураПараметров.Вставить("ИдентификацияЛС",   Объект.ИдентификацияЛС);
	СтруктураПараметров.Вставить("УслугиВ_ГИС_НМСПН", Объект.СамарскаяОбласть_УслугиВ_ГИС_НМСПН.Выгрузить());
	СтруктураПараметров.Вставить("УслугиВБазе",       Объект.СамарскаяОбласть_УслугиВБазе.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураПараметров, Новый УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПризнакУдаления = Ложь;
	
	// Получаем настройки из хранилища.
	Если Параметры.Свойство("АдресНастроекВХранилище") И НЕ Параметры.АдресНастроекВХранилище = Неопределено Тогда
		
		СтруктураНастроек = ПолучитьИзВременногоХранилища(Параметры.АдресНастроекВХранилище);
		
		Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
			
			врПеременная = Неопределено;
			
			// Кодировка файла DBF.
			Если СтруктураНастроек.Свойство("КодировкаDBF", врПеременная) Тогда
				Объект.КодировкаDBF = врПеременная;
			КонецЕсли;
			
			// Идентификация данных.
			Если СтруктураНастроек.Свойство("ИдентификацияЛС", врПеременная) Тогда
				Объект.ИдентификацияЛС = врПеременная;
			КонецЕсли;
			
			// Таблица услуг в ГИС НМСПН.
			врТаблицаУслуг = Неопределено;
			Если СтруктураНастроек.Свойство("УслугиВ_ГИС_НМСПН", врТаблицаУслуг) Тогда
				Если ТипЗнч(врТаблицаУслуг) = Тип("ТаблицаЗначений") Тогда
					Объект.СамарскаяОбласть_УслугиВ_ГИС_НМСПН.Загрузить(врТаблицаУслуг);
				КонецЕсли;
			КонецЕсли;
			
			// Таблица услуг в базе.
			Если СтруктураНастроек.Свойство("УслугиВБазе", врТаблицаУслуг) Тогда
				Если ТипЗнч(врТаблицаУслуг) = Тип("ТаблицаЗначений") Тогда
					Объект.СамарскаяОбласть_УслугиВБазе.Загрузить(врТаблицаУслуг);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// СохранитьДанные.
//
Процедура СохранитьДанные(Команда)
	
	Закрыть(ПоместитьНастройкиВХранилище());
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// При активации строки УслугиВ_ГИС_НМСПН, загружает соответствия в тзУслугиВБазе.
//
Процедура УслугиВ_ГИС_НМСПНПриАктивизацииСтроки(Элемент)
	
	тзУслугиВБазе.Очистить();
	
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		
		// Видимость признаков ЭтоТеплоноситель и ЭтоТепловаяЭнергия.
		Если Элементы.УслугиВ_ГИС_НМСПН.ТекущиеДанные.НаименованиеУслуги = "Горячее водоснабжение" Тогда
			Элементы.тзУслугиВБазеТеплоноситель.Видимость   = Истина;
			Элементы.тзУслугиВБазеТепловаяЭнергия.Видимость = Истина;
		Иначе
			Элементы.тзУслугиВБазеТеплоноситель.Видимость   = Ложь;
			Элементы.тзУслугиВБазеТепловаяЭнергия.Видимость = Ложь;
		КонецЕсли;
		
		// Заполнение таблицы "тзУслугиВБазе".
		Отбор = Новый Структура;
		Отбор.Вставить("Идентификатор", Элемент.ТекущиеДанные.НомерСтроки);
		
		НайденныеСтроки = Объект.СамарскаяОбласть_УслугиВБазе.НайтиСтроки(Отбор);
		
		Для Каждого ТекСтрока из НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(тзУслугиВБазе.Добавить(), ТекСтрока);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" таблицы "УслугиВ_ГИС_НМСПН".
//
Процедура УслугиВ_ГИС_НМСПНПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Устанавливаем запрет на добавление строк копированием.
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Удаление текущей строки соответствия из правой колонки.
//
Процедура УслугиВ_ГИС_НМСПНПередУдалением(Элемент, Отказ)
	
	Отбор = Новый Структура("Идентификатор", Элемент.ТекущиеДанные.НомерСтроки);
	СтрокиУдаления = Объект.СамарскаяОбласть_УслугиВБазе.НайтиСтроки(Отбор);
	Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
		Объект.СамарскаяОбласть_УслугиВБазе.Удалить(СтрокаУдаления);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередОкончаниемРедактирования" таблицы "УслугиВ_ГИС_НМСПН".
//
Процедура УслугиВ_ГИС_НМСПНПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	КодОшибки = 0;
	
	// Проверяем на наличие и уникальность код услуги.
	ТекущийКодУслугиВ_ГИС_НМСПНП = Элемент.ТекущиеДанные.ИдентификаторУслуги;
	Если ЗначениеЗаполнено(ТекущийКодУслугиВ_ГИС_НМСПНП) Тогда
		ОтборКод = Новый Структура;
		ОтборКод.Вставить("ИдентификаторУслуги", ТекущийКодУслугиВ_ГИС_НМСПНП);
		
		СтрокиСовпаденияКод = Объект.СамарскаяОбласть_УслугиВ_ГИС_НМСПН.НайтиСтроки(ОтборКод);
		Если СтрокиСовпаденияКод.Количество() > 1 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Код услуги в ОСЗН не уникален!");
			КодОшибки = КодОшибки + 1;
		КонецЕсли;
		
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Код услуги в ОСЗН не заполнен!");
		КодОшибки = КодОшибки + 1;
	КонецЕсли;
	
	// Проверяем на наличие и уникальность услуги.
	ТекущаяУслугаВ_ГИС_НМСПНП = Элемент.ТекущиеДанные.НаименованиеУслуги;
	Если ЗначениеЗаполнено(ТекущаяУслугаВ_ГИС_НМСПНП) Тогда
		ОтборУслуга = Новый Структура;
		ОтборУслуга.Вставить("НаименованиеУслуги", ТекущаяУслугаВ_ГИС_НМСПНП);
		
		СтрокиСовпаденияУслуга = Объект.СамарскаяОбласть_УслугиВ_ГИС_НМСПН.НайтиСтроки(ОтборУслуга);
		Если СтрокиСовпаденияУслуга.Количество() > 1 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Услуга в ОСЗН не уникальна!");
			КодОшибки = КодОшибки + 1;
		КонецЕсли;
		
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Услуга в ОСЗН не заполнена!");
		КодОшибки = КодОшибки + 1;
	КонецЕсли;
	
	// Проверяем заполнение реквизита СпособСверткиТарифа
	СпособСверткиТарифа = Элемент.ТекущиеДанные.СпособСверткиТарифа;
	Если Не ЗначениеЗаполнено(СпособСверткиТарифа) Тогда	
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Способ свертки тарифа не заполнен!");
		КодОшибки = КодОшибки + 1;
	КонецЕсли;
		
	// При наличии незаполненных полей или дубликатов опрашиваем пользователя.
	Если КодОшибки > 0 Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Добавление незаполненных полей и дублирующих значений недопустимо!");
		Объект.СамарскаяОбласть_УслугиВ_ГИС_НМСПН.Удалить(Элементы.УслугиВ_ГИС_НМСПН.ТекущиеДанные.НомерСтроки - 1);
		
	КонецЕсли;
	
	// Разблокируем кнопку добавления табличного поля "тзУслугиВБазе".
	Если Не Объект.СамарскаяОбласть_УслугиВ_ГИС_НМСПН.Количество() = 0 Тогда
		Элементы.тзУслугиВБазе.Доступность = Истина;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПослеУдаления" таблицы "УслугиВ_ГИС_НМСПН".
//
Процедура УслугиВ_ГИС_НМСПНПослеУдаления(Элемент)
	
	// После удаления строки из УслугиВ_ГИС_НМСПН переписываем идентификаторы в УслугиВБазе. 
	Для Каждого СтрокаГИС_НМСПН Из Объект.СамарскаяОбласть_УслугиВ_ГИС_НМСПН Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("Идентификатор", СтрокаГИС_НМСПН.ИдентификаторУслуги);
		Отбор.Вставить("Услуга",        СтрокаГИС_НМСПН.НаименованиеУслуги);
		
		СтрокиИзменения = Объект.СамарскаяОбласть_УслугиВБазе.НайтиСтроки(Отбор);
		Для Каждого Строка ИЗ СтрокиИзменения Цикл
			Строка.Идентификатор = СтрокаГИС_НМСПН.НомерСтроки;
		КонецЦикла;
		
	КонецЦикла;
	
	УслугиВ_ГИС_НМСПНПриАктивизацииСтроки(Элемент);
	
	// Если в левой колонке пользователем удалены все колонки, то блокируем возможность добавления соответствий.
	Если Объект.СамарскаяОбласть_УслугиВ_ГИС_НМСПН.Количество() = 0 Тогда
		Элементы.тзУслугиВБазе.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Видимость признаков Теплоноситель и ТепловаяЭнергия при изменении.
//
Процедура УслугиВ_ГИС_НМСПНПриИзменении(Элемент)
	
	Если Не Элементы.УслугиВ_ГИС_НМСПН.ТекущиеДанные = Неопределено Тогда
		
		Если Элементы.УслугиВ_ГИС_НМСПН.ТекущиеДанные.НаименованиеУслуги = "Горячее водоснабжение" Тогда
			Элементы.тзУслугиВБазеТеплоноситель.Видимость   = Истина;
			Элементы.тзУслугиВБазеТепловаяЭнергия.Видимость = Истина;
		Иначе
			Элементы.тзУслугиВБазеТеплоноситель.Видимость   = Ложь;
			Элементы.тзУслугиВБазеТепловаяЭнергия.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Если не выбрана строка в левой колоке или добавление строк копированием.
//
Процедура тзУслугиВБазеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)

	Если Элементы.УслугиВ_ГИС_НМСПН.ТекущиеДанные = Неопределено ИЛИ Копирование Тогда
		Отказ = Истина;
	КонецЕсли
	
КонецПроцедуры

&НаКлиенте
// При удалении строки удаляем соответствующие записи в УслугиВБазе.
//
Процедура тзУслугиВБазеПередУдалением(Элемент, Отказ)
	
	Если ПризнакУдаления Тогда
		Отказ = Истина;
		ПризнакУдаления = Ложь;
	Иначе
		Отбор = Новый Структура;
		Отбор.Вставить("Идентификатор", Элементы.УслугиВ_ГИС_НМСПН.ТекущиеДанные.НомерСтроки);
		Отбор.Вставить("Услуга",        Элемент.ТекущиеДанные.Услуга); 
		
		СтрокиУдаления = Объект.СамарскаяОбласть_УслугиВБазе.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
			Объект.СамарскаяОбласть_УслугиВБазе.Удалить(СтрокаУдаления);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Запоминает предыдущее значение перезаписываемой строки.
//
Процедура тзУслугиВБазеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// Запоминаем предыдущее значение перезаписываемой строки.
	Если Не НоваяСтрока Тогда
		ПредыдущаяУслуга        = Элемент.ТекущиеДанные.Услуга;
		ПредыдущийТеплоноситель = Элемент.ТекущиеДанные.Теплоноситель;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Если изменяем выбранное значение, то удаляем предыдущую запись.
//
Процедура тзУслугиВБазеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ТекущаяУслуга = Элементы.тзУслугиВБазе.ТекущиеДанные.Услуга;
	
	Если ТекущаяУслуга = ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка") Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Добавление незаполненных полей недопустимо!");
		ПризнакУдаления = Истина;
		тзУслугиВБазе.Удалить(Элементы.тзУслугиВБазе.ТекущиеДанные);
		
	КонецЕсли;
	
	// Контроль дублирования услуг в  табличной части "Услуги в базе".
	ОтборУслуга = Новый Структура;
	ОтборУслуга.Вставить("Услуга", ТекущаяУслуга);
	
	СтрокиСовпаденияУслуга = тзУслугиВБазе.НайтиСтроки(ОтборУслуга);
	Если СтрокиСовпаденияУслуга.Количество() > 1 Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Услуга в базе не уникальна!");
		тзУслугиВБазе.Удалить(Элементы.тзУслугиВБазе.ТекущиеДанные);
		
	КонецЕсли;
	
	Если Не НоваяСтрока И Не ПредыдущаяУслуга = ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка") Тогда
		
		ПризнакУдаления = Истина;
		Отбор = Новый Структура;
		Отбор.Вставить("Идентификатор", Элементы.УслугиВ_ГИС_НМСПН.ТекущиеДанные.НомерСтроки);
		Отбор.Вставить("Услуга",        ПредыдущаяУслуга);
		
		СтрокиУдаления = Объект.СамарскаяОбласть_УслугиВБазе.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
			Объект.СамарскаяОбласть_УслугиВБазе.Удалить(СтрокаУдаления);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриОкончанииРедактирования" таблицы "тзУслугиВБазе".
//
Процедура тзУслугиВБазеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
		
	Если Не Элемент.ТекущиеДанные = Неопределено И Не ОтменаРедактирования Тогда
		
		Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Услуга) Или Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.СпособОпределенияНачислений) Тогда
			// Удаляем пустую строку.
			тзУслугиВБазе.Удалить(тзУслугиВБазе.Индекс(Элемент.ТекущиеДанные));
		Иначе
			
			// Реквизиты Теплоноситель и ТепловаяЭнергия не могут иметь значение "Истина" одновременно.
			Если Элемент.ТекущиеДанные.Теплоноситель = Истина И Элемент.ТекущиеДанные.ТепловаяЭнергия = Истина Тогда
				Если ПредыдущийТеплоноситель = Истина Тогда
					Элемент.ТекущиеДанные.Теплоноситель = Ложь;
				Иначе
					Элемент.ТекущиеДанные.ТепловаяЭнергия = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			// Добавляем запись в УслугиВБазе.
			НоваяСтрокаСоответствия                             = Объект.СамарскаяОбласть_УслугиВБазе.Добавить();
			НоваяСтрокаСоответствия.Услуга                      = Элемент.ТекущиеДанные.Услуга;
			НоваяСтрокаСоответствия.СпособОпределенияНачислений = Элемент.ТекущиеДанные.СпособОпределенияНачислений;
			НоваяСтрокаСоответствия.Теплоноситель               = Элемент.ТекущиеДанные.Теплоноситель;
			НоваяСтрокаСоответствия.ТепловаяЭнергия             = Элемент.ТекущиеДанные.ТепловаяЭнергия;
			НоваяСтрокаСоответствия.Идентификатор               = Элементы.УслугиВ_ГИС_НМСПН.ТекущиеДанные.НомерСтроки;
			
			// Удаляем старую запись при перевыборе.
			Если Не ПредыдущаяУслуга = Элемент.ТекущиеДанные.Услуга Тогда
				
				Отбор = Новый Структура;
				Отбор.Вставить("Идентификатор", Элементы.УслугиВ_ГИС_НМСПН.ТекущиеДанные.НомерСтроки);
				Отбор.Вставить("Услуга",        ПредыдущаяУслуга);
				
				НайденнаяСтрока = Объект.СамарскаяОбласть_УслугиВБазе.НайтиСтроки(Отбор);
				Если НайденнаяСтрока.Количество() = 1 Тогда
					НайденнаяСтрока[0].Услуга = Элемент.ТекущиеДанные.Услуга;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти