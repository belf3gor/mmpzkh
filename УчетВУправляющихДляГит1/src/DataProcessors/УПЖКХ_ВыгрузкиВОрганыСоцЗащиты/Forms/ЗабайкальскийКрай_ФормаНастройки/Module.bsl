
#Область ПрочиеПроцедурыИФункции

&НаСервере
// Процедура заполняет таблицу услуг на сервере.
//
Процедура ЗаполнитьТаблицуУслугНаСервере(Идентификатор)
	
	Отбор = Новый Структура;
	Отбор.Вставить("КодУслугиВОСЗН", Идентификатор);
	
	НайденныеСтроки = Объект.ЗабайкальскийКрай_ЖКУ_ВБазе.Выгрузить(Отбор, "УслугаВБазе");
	
	Для Каждого ТекСтрока из НайденныеСтроки Цикл
		ЗаполнитьЗначенияСвойств(ТП_УслугаВБазе.Добавить(), ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// РАБОТА С ВРЕМЕННЫМ ХРАНИЛИЩЕМ

#Область РаботаСВременнымХранилищем

&НаСервере
// Помещает настройки во временное хранилище.
//
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("НомерПоляКоличествоМесяцевДолга", НомерПоляКоличествоМесяцевДолга);
	СтруктураНастроек.Вставить("НомерПоляНаличиеЗадолженности",   НомерПоляНаличиеЗадолженности);
	СтруктураНастроек.Вставить("ЗабайкальскийКрай_ЖКУ",           Объект.ЗабайкальскийКрай_ЖКУ.Выгрузить());
	СтруктураНастроек.Вставить("ЗабайкальскийКрай_ЖКУ_ВБазе",     Объект.ЗабайкальскийКрай_ЖКУ_ВБазе.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПризнакУдаления = Ложь;
	
	// Получаем настройки из хранилища.
	Если Параметры.Свойство("АдресНастроекВХранилище") И Не Параметры.АдресНастроекВХранилище = Неопределено Тогда
		
		СтруктураНастроек = ПолучитьИзВременногоХранилища(Параметры.АдресНастроекВХранилище);
		
		Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
			
			Если СтруктураНастроек.Свойство("НомерПоляКоличествоМесяцевДолга") Тогда
				НомерПоляКоличествоМесяцевДолга = СтруктураНастроек.НомерПоляКоличествоМесяцевДолга;
			КонецЕсли;
			
			Если СтруктураНастроек.Свойство("НомерПоляНаличиеЗадолженности") Тогда
				НомерПоляНаличиеЗадолженности = СтруктураНастроек.НомерПоляНаличиеЗадолженности;
			КонецЕсли;
			
			Если СтруктураНастроек.Свойство("ЗабайкальскийКрай_ЖКУ") Тогда
				Объект.ЗабайкальскийКрай_ЖКУ.Загрузить(СтруктураНастроек.ЗабайкальскийКрай_ЖКУ);
			КонецЕсли;
			
			Если СтруктураНастроек.Свойство("ЗабайкальскийКрай_ЖКУ_ВБазе") Тогда
				Объект.ЗабайкальскийКрай_ЖКУ_ВБазе.Загрузить(СтруктураНастроек.ЗабайкальскийКрай_ЖКУ_ВБазе);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Блокировка командной панели "КП_УслугиВБазе".
	Если Объект.ЗабайкальскийКрай_ЖКУ.Количество() = 0 Тогда
		Элементы.ТП_УслугаВБазе.Доступность = Ложь;
	Иначе
		Элементы.ТП_УслугаВБазе.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "КомандаСохранить".
//
Процедура КомандаСохранить(Команда)
	
	НетОшибок = Истина;
	
	СписокНомеровПолей = Новый СписокЗначений;
	Если НЕ ЗначениеЗаполнено(НомерПоляКоличествоМесяцевДолга) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указан номер поля ""Количество месяцев долга""!");
		НетОшибок = Ложь;
	Иначе
		СписокНомеровПолей.Добавить(НомерПоляКоличествоМесяцевДолга);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НомерПоляНаличиеЗадолженности) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указан номер поля ""Наличие задолженности""!");
		НетОшибок = Ложь;
	Иначе
		СписокНомеровПолей.Добавить(НомерПоляНаличиеЗадолженности);
	КонецЕсли;
	
	ПроверитьСписокНомеровПолейНаСервере(СписокНомеровПолей, НетОшибок);
	
	Если НетОшибок Тогда
		СписокНомеровПолей.СортироватьПоЗначению();
		Если НЕ СписокНомеровПолей[0].Значение > 6 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Минимальный номер поля не может быть меньше 7, т.к. номера с 1 по 6 принадлежат основным полям загрузки! Проверьте установленные номера полей.");
			НетОшибок = Ложь;
		КонецЕсли;
		КолВоНомеров = СписокНомеровПолей.Количество();
		Если НЕ КолВоНомеров = (СписокНомеровПолей[КолВоНомеров - 1].Значение - СписокНомеровПолей[0].Значение + 1) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Пробелов среди установленных номеров полей быть не должно! Номера должны следовать друг за другом. Проверьте установленные номера полей.");
			НетОшибок = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если НетОшибок Тогда
		Закрыть(ПоместитьНастройкиВХранилище());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура производит проверку корректности заполнения списка номер полей.
//
Процедура ПроверитьСписокНомеровПолейНаСервере(СписокНомеровПолей, НетОшибок)
	
	ТаблицаПроверки = Объект.ЗабайкальскийКрай_ЖКУ_ВБазе.Выгрузить(, "КодУслугиВОСЗН, НомерПоляНаличияСчетчика, НомерПоляОбъемПотребления, НомерПоляСуммаОплаты");
	
	ТаблицаПроверки.Свернуть("КодУслугиВОСЗН, НомерПоляНаличияСчетчика, НомерПоляОбъемПотребления, НомерПоляСуммаОплаты");
	
	Для Каждого СтрокаНастройкиПоля ИЗ ТаблицаПроверки Цикл
		Если ЗначениеЗаполнено(СтрокаНастройкиПоля.НомерПоляНаличияСчетчика) Тогда
			СписокНомеровПолей.Добавить(СтрокаНастройкиПоля.НомерПоляНаличияСчетчика);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаНастройкиПоля.НомерПоляОбъемПотребления) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не для всех услуг указан номер поля ""Объем потребления""!");
			НетОшибок = Ложь;
		Иначе
			СписокНомеровПолей.Добавить(СтрокаНастройкиПоля.НомерПоляОбъемПотребления);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаНастройкиПоля.НомерПоляСуммаОплаты) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не для всех услуг указан номер поля ""Сумма оплаты""!");
			НетОшибок = Ложь;
		Иначе
			СписокНомеровПолей.Добавить(СтрокаНастройкиПоля.НомерПоляСуммаОплаты);
		КонецЕсли;
		
		Если НЕ НетОшибок Тогда
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" табличного поля "ТП_УслугаВБазе".
//
Процедура ТП_УслугаВБазеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Устанавливаем запрет на добавление строк копированием.
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" табличного поля "ТП_УслугаВБазе".
//
Процедура ТП_УслугаВБазеПередУдалением(Элемент, Отказ)
	
	Если ПризнакУдаления Тогда
		Отказ = Истина;
		ПризнакУдаления = Ложь;
	Иначе
		// При удалении строки удаляем соответствующие записи в ЗабайкальскийКрай_ЖКУ_ВБазе.
		УслугаВБазе              = Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе;
		ИдентификаторУслугиВОСЗН = Элементы.ЗабайкальскийКрай_ЖКУ.ТекущиеДанные.НомерСтроки;
		
		Отбор = Новый Структура;
		Отбор.Вставить("УслугаВБазе",    УслугаВБазе);
		Отбор.Вставить("КодУслугиВОСЗН", ИдентификаторУслугиВОСЗН);
		
		СтрокиУдаления = Объект.ЗабайкальскийКрай_ЖКУ_ВБазе.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
			Объект.ЗабайкальскийКрай_ЖКУ_ВБазе.Удалить(СтрокаУдаления);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередОкончаниемРедактирования" таблицы "УслугаВБазе".
//
Процедура ТП_УслугаВБазеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Добавление незаполненных полей недопустимо!");
		ПризнакУдаления = Истина;
		ТП_УслугаВБазе.Удалить(Элементы.ТП_УслугаВБазе.ТекущиеДанные);
		
		Если ЗначениеЗаполнено(ПредыдущаяУслуга) Тогда
			Идентификатор   = Элементы.ЗабайкальскийКрай_ЖКУ.ТекущиеДанные.НомерСтроки;
			ПризнакУдаления = Истина;
			Отбор = Новый Структура;
			Отбор.Вставить("КодУслугиВОСЗН", Идентификатор);
			Отбор.Вставить("УслугаВБазе",    ПредыдущаяУслуга);
			
			СтрокиУдаления = Объект.ЗабайкальскийКрай_ЖКУ_ВБазе.НайтиСтроки(Отбор);
			
			Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
				Объект.ЗабайкальскийКрай_ЖКУ_ВБазе.Удалить(СтрокаУдаления);
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриОкончанииРедактирования" табличного поля "ТП_УслугаВБазе".
//
Процедура ТП_УслугаВБазеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		// Добавляем запись в ЗабайкальскийКрай_ЖКУ_ВБазе.
		УслугаВБазе               = Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе;
		ИдентификаторУслугиВОСЗН  = Элементы.ЗабайкальскийКрай_ЖКУ.ТекущиеДанные.НомерСтроки;
		УслугаВОСЗН               = Элементы.ЗабайкальскийКрай_ЖКУ.ТекущиеДанные.name;
		НомерПоляНаличияСчетчика  = Элементы.ЗабайкальскийКрай_ЖКУ.ТекущиеДанные.НомерПоляНаличияСчетчика;
		НомерПоляОбъемПотребления = Элементы.ЗабайкальскийКрай_ЖКУ.ТекущиеДанные.НомерПоляОбъемПотребления;
		НомерПоляСуммаОплаты      = Элементы.ЗабайкальскийКрай_ЖКУ.ТекущиеДанные.НомерПоляСуммаОплаты;
		
		Если НоваяСтрока Тогда
			НоваяСтрокаСоответствия                           = Объект.ЗабайкальскийКрай_ЖКУ_ВБазе.Добавить();
			НоваяСтрокаСоответствия.УслугаВБазе               = УслугаВБазе;
			НоваяСтрокаСоответствия.КодУслугиВОСЗН            = ИдентификаторУслугиВОСЗН;
			НоваяСтрокаСоответствия.УслугаВОСЗН               = УслугаВОСЗН;
			НоваяСтрокаСоответствия.НомерПоляНаличияСчетчика  = НомерПоляНаличияСчетчика;
			НоваяСтрокаСоответствия.НомерПоляОбъемПотребления = НомерПоляОбъемПотребления;
			НоваяСтрокаСоответствия.НомерПоляСуммаОплаты      = НомерПоляСуммаОплаты;
		Иначе
			Если НЕ ПредыдущаяУслуга = УслугаВБазе Тогда
				Отбор = Новый Структура;
				Отбор.Вставить("КодУслугиВОСЗН", ИдентификаторУслугиВОСЗН);
				Отбор.Вставить("УслугаВБазе",    ПредыдущаяУслуга);
				
				НайденнаяСтрока = Объект.ЗабайкальскийКрай_ЖКУ_ВБазе.НайтиСтроки(Отбор);
				Если НайденнаяСтрока.Количество() = 1 Тогда
					НайденнаяСтрока[0].УслугаВБазе = УслугаВБазе;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриНачалеРедактирования" табличного поля "ТП_УслугаВБазе".
//
Процедура ТП_УслугаВБазеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// Запоминаем предыдущее значение перезаписываемой строки.
	Если НЕ НоваяСтрока Тогда
		ПредыдущаяУслуга = Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "УслугаВБазе" таблицы "Услуги в Базе".
//
Процедура ТП_УслугаВБазеУслугаВБазеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Список уже выбранных услуг по данной услуге в ОСЗН.
	СписокВыбранныхУслуг = Новый СписокЗначений;
	СтрокиВыбранныхУслуг = Объект.ЗабайкальскийКрай_ЖКУ_ВБазе.НайтиСтроки(Новый Структура("КодУслугиВОСЗН", Элементы.ЗабайкальскийКрай_ЖКУ.ТекущиеДанные.НомерСтроки));
	Для Каждого СтрокаВыбраннойУслуги Из СтрокиВыбранныхУслуг Цикл
		СписокВыбранныхУслуг.Добавить(СтрокаВыбраннойУслуги.УслугаВБазе);
	КонецЦикла;
	
	ВидСравненияВОтборе = ВидСравненияКомпоновкиДанных.НеВСписке;
	
	Форма = ПолучитьФорму("Справочник.КВП_Услуги.ФормаВыбора", Новый Структура("ТекущаяСтрока", Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе), Элемент);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Форма.Список.КомпоновщикНастроек.Настройки.Отбор, "Ссылка", СписокВыбранныхУслуг,
															ВидСравненияКомпоновкиДанных.НеВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" табличного поля "Услуги в ОСЗН".
//
Процедура ЗабайкальскийКрай_ЖКУПриАктивизацииСтроки(Элемент)
	
	// При активации строки УслугаВОСЗН, загружаем соответствия в УслугаВБазе. 
	ТП_УслугаВБазе.Очистить();
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		Идентификатор = Элемент.ТекущиеДанные.НомерСтроки;
		ЗаполнитьТаблицуУслугНаСервере(Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" табличного поля "ЗабайкальскийКрай_ЖКУНомерПоляНаличияСчетчика".
//
Процедура ЗабайкальскийКрай_ЖКУНомерПоляНаличияСчетчикаПриИзменении(Элемент)
	
	Если НЕ Элементы.ЗабайкальскийКрай_ЖКУ.ТекущиеДанные = Неопределено Тогда
		ИдентификаторУслугиВОСЗН = Элементы.ЗабайкальскийКрай_ЖКУ.ТекущиеДанные.НомерСтроки;
		
		НомерПоляНаличияСчетчика = Элементы.ЗабайкальскийКрай_ЖКУ.ТекущиеДанные.НомерПоляНаличияСчетчика;
		
		Отбор = Новый Структура;
		Отбор.Вставить("КодУслугиВОСЗН", ИдентификаторУслугиВОСЗН);
		
		НайденнаяСтрока = Объект.ЗабайкальскийКрай_ЖКУ_ВБазе.НайтиСтроки(Отбор);
		Для Каждого ТекСтрока ИЗ НайденнаяСтрока Цикл
			ТекСтрока.НомерПоляНаличияСчетчика = НомерПоляНаличияСчетчика;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ОкончаниеВводаТекста" табличного поля "ЗабайкальскийКрай_ЖКУНомерПоляНаличияСчетчика".
//
Процедура ЗабайкальскийКрай_ЖКУНомерПоляНаличияСчетчикаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЧислоНомерПоляНаличияСчетчика = Число(Текст);
	
	Если НЕ ЧислоНомерПоляНаличияСчетчика = 0 Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("НомерПоляНаличияСчетчика", ЧислоНомерПоляНаличияСчетчика);
		НайденнаяСтрока = Объект.ЗабайкальскийКрай_ЖКУ.НайтиСтроки(Отбор);
		Если НайденнаяСтрока.Количество() > 1
		 ИЛИ (НайденнаяСтрока.Количество() = 1 И НЕ Элементы.ЗабайкальскийКрай_ЖКУ.ТекущиеДанные.НомерСтроки = НайденнаяСтрока[0].НомерСтроки) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Указанный номер поля уже используется для других услуг. Необходимо указать другой номер поля!");
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
		Отбор = Новый Структура;
		Отбор.Вставить("НомерПоляОбъемПотребления", ЧислоНомерПоляНаличияСчетчика);
		НайденнаяСтрока = Объект.ЗабайкальскийКрай_ЖКУ.НайтиСтроки(Отбор);
		Если НайденнаяСтрока.Количество() > 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Указанный номер поля уже используется для других услуг. Необходимо указать другой номер поля!");
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
		Отбор = Новый Структура;
		Отбор.Вставить("НомерПоляСуммаОплаты", ЧислоНомерПоляНаличияСчетчика);
		НайденнаяСтрока = Объект.ЗабайкальскийКрай_ЖКУ.НайтиСтроки(Отбор);
		Если НайденнаяСтрока.Количество() > 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Указанный номер поля уже используется для других услуг. Необходимо указать другой номер поля!");
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
		Если ЧислоНомерПоляНаличияСчетчика = НомерПоляКоличествоМесяцевДолга Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Указанный номер поля уже используется для поля ""Количество месяцев долга"". Необходимо указать другой номер поля!");
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
		Если ЧислоНомерПоляНаличияСчетчика = НомерПоляНаличиеЗадолженности Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Указанный номер поля уже используется для поля ""Наличие задолженности"". Необходимо указать другой номер поля!");
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" табличного поля "ЗабайкальскийКрай_ЖКУНомерПоляОбъемПотребления".
//
Процедура ЗабайкальскийКрай_ЖКУНомерПоляОбъемПотребленияПриИзменении(Элемент)
	
	Если НЕ Элементы.ЗабайкальскийКрай_ЖКУ.ТекущиеДанные = Неопределено Тогда
		ИдентификаторУслугиВОСЗН = Элементы.ЗабайкальскийКрай_ЖКУ.ТекущиеДанные.НомерСтроки;
		
		НомерПоляОбъемПотребления = Элементы.ЗабайкальскийКрай_ЖКУ.ТекущиеДанные.НомерПоляОбъемПотребления;
		
		Отбор = Новый Структура;
		Отбор.Вставить("КодУслугиВОСЗН", ИдентификаторУслугиВОСЗН);
		
		НайденнаяСтрока = Объект.ЗабайкальскийКрай_ЖКУ_ВБазе.НайтиСтроки(Отбор);
		Для Каждого ТекСтрока ИЗ НайденнаяСтрока Цикл
			ТекСтрока.НомерПоляОбъемПотребления = НомерПоляОбъемПотребления;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ОкончаниеВводаТекста" табличного поля "ЗабайкальскийКрай_ЖКУНомерПоляОбъемПотребления".
//
Процедура ЗабайкальскийКрай_ЖКУНомерПоляОбъемПотребленияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЧислоНомерПоляОбъемПотребления = Число(Текст);
	
	Если НЕ ЧислоНомерПоляОбъемПотребления = 0 Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("НомерПоляНаличияСчетчика", ЧислоНомерПоляОбъемПотребления);
		НайденнаяСтрока = Объект.ЗабайкальскийКрай_ЖКУ.НайтиСтроки(Отбор);
		Если НайденнаяСтрока.Количество() > 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Указанный номер поля уже используется для других услуг. Необходимо указать другой номер поля!");
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
		Отбор = Новый Структура;
		Отбор.Вставить("НомерПоляОбъемПотребления", ЧислоНомерПоляОбъемПотребления);
		НайденнаяСтрока = Объект.ЗабайкальскийКрай_ЖКУ.НайтиСтроки(Отбор);
		Если НайденнаяСтрока.Количество() > 1
		 ИЛИ (НайденнаяСтрока.Количество() = 1 И НЕ Элементы.ЗабайкальскийКрай_ЖКУ.ТекущиеДанные.НомерСтроки = НайденнаяСтрока[0].НомерСтроки) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Указанный номер поля уже используется для других услуг. Необходимо указать другой номер поля!");
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
		Отбор = Новый Структура;
		Отбор.Вставить("НомерПоляСуммаОплаты", ЧислоНомерПоляОбъемПотребления);
		НайденнаяСтрока = Объект.ЗабайкальскийКрай_ЖКУ.НайтиСтроки(Отбор);
		Если НайденнаяСтрока.Количество() > 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Указанный номер поля уже используется для других услуг. Необходимо указать другой номер поля!");
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
		Если ЧислоНомерПоляОбъемПотребления = НомерПоляКоличествоМесяцевДолга Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Указанный номер поля уже используется для поля ""Количество месяцев долга"". Необходимо указать другой номер поля!");
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
		Если ЧислоНомерПоляОбъемПотребления = НомерПоляНаличиеЗадолженности Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Указанный номер поля уже используется для поля ""Наличие задолженности"". Необходимо указать другой номер поля!");
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" табличного поля "ЗабайкальскийКрай_ЖКУНомерПоляСуммаОплаты".
//
Процедура ЗабайкальскийКрай_ЖКУНомерПоляСуммаОплатыПриИзменении(Элемент)
	
	Если НЕ Элементы.ЗабайкальскийКрай_ЖКУ.ТекущиеДанные = Неопределено Тогда
		ИдентификаторУслугиВОСЗН = Элементы.ЗабайкальскийКрай_ЖКУ.ТекущиеДанные.НомерСтроки;
		
		НомерПоляСуммаОплаты = Элементы.ЗабайкальскийКрай_ЖКУ.ТекущиеДанные.НомерПоляСуммаОплаты;
		
		Отбор = Новый Структура;
		Отбор.Вставить("КодУслугиВОСЗН", ИдентификаторУслугиВОСЗН);
		
		НайденнаяСтрока = Объект.ЗабайкальскийКрай_ЖКУ_ВБазе.НайтиСтроки(Отбор);
		Для Каждого ТекСтрока ИЗ НайденнаяСтрока Цикл
			ТекСтрока.НомерПоляСуммаОплаты = НомерПоляСуммаОплаты;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ОкончаниеВводаТекста" табличного поля "ЗабайкальскийКрай_ЖКУНомерПоляСуммаОплаты".
//
Процедура ЗабайкальскийКрай_ЖКУНомерПоляСуммаОплатыОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЧислоНомерПоляСуммаОплаты = Число(Текст);
	
	Если НЕ ЧислоНомерПоляСуммаОплаты = 0 Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("НомерПоляНаличияСчетчика", ЧислоНомерПоляСуммаОплаты);
		НайденнаяСтрока = Объект.ЗабайкальскийКрай_ЖКУ.НайтиСтроки(Отбор);
		Если НайденнаяСтрока.Количество() > 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Указанный номер поля уже используется для других услуг. Необходимо указать другой номер поля!");
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
		Отбор = Новый Структура;
		Отбор.Вставить("НомерПоляОбъемПотребления", ЧислоНомерПоляСуммаОплаты);
		НайденнаяСтрока = Объект.ЗабайкальскийКрай_ЖКУ.НайтиСтроки(Отбор);
		Если НайденнаяСтрока.Количество() > 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Указанный номер поля уже используется для других услуг. Необходимо указать другой номер поля!");
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
		Отбор = Новый Структура;
		Отбор.Вставить("НомерПоляСуммаОплаты", ЧислоНомерПоляСуммаОплаты);
		НайденнаяСтрока = Объект.ЗабайкальскийКрай_ЖКУ.НайтиСтроки(Отбор);
		Если НайденнаяСтрока.Количество() > 1
		 ИЛИ (НайденнаяСтрока.Количество() = 1 И НЕ Элементы.ЗабайкальскийКрай_ЖКУ.ТекущиеДанные.НомерСтроки = НайденнаяСтрока[0].НомерСтроки) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Указанный номер поля уже используется для других услуг. Необходимо указать другой номер поля!");
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
		Если ЧислоНомерПоляСуммаОплаты = НомерПоляКоличествоМесяцевДолга Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Указанный номер поля уже используется для поля ""Количество месяцев долга"". Необходимо указать другой номер поля!");
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
		Если ЧислоНомерПоляСуммаОплаты = НомерПоляНаличиеЗадолженности Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Указанный номер поля уже используется для поля ""Наличие задолженности"". Необходимо указать другой номер поля!");
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" табличного поля "ЗабайкальскийКрай_ЖКУname".
//
Процедура ЗабайкальскийКрай_ЖКУnameПриИзменении(Элемент)
	
	Если НЕ Элементы.ЗабайкальскийКрай_ЖКУ.ТекущиеДанные = Неопределено Тогда
		ИдентификаторУслугиВОСЗН = Элементы.ЗабайкальскийКрай_ЖКУ.ТекущиеДанные.НомерСтроки;
		
		Отбор = Новый Структура;
		Отбор.Вставить("КодУслугиВОСЗН", ИдентификаторУслугиВОСЗН);
		
		НайденнаяСтрока = Объект.ЗабайкальскийКрай_ЖКУ_ВБазе.НайтиСтроки(Отбор);
		Для Каждого ТекСтрока ИЗ НайденнаяСтрока Цикл
			ТекСтрока.УслугаВОСЗН = Элементы.ЗабайкальскийКрай_ЖКУ.ТекущиеДанные.name;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ОкончаниеВводаТекста" табличного поля "НомерПоляКоличествоМесяцевДолга".
//
Процедура НомерПоляКоличествоМесяцевДолгаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЧислоНомерПоляКоличествоМесяцевДолга = Число(Текст);
	
	Если ЧислоНомерПоляКоличествоМесяцевДолга = НомерПоляНаличиеЗадолженности Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Указанный номер поля уже используется для поля ""Наличие задолженности"". Необходимо указать другой номер поля!");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	Для Каждого ТекСтрока ИЗ Объект.ЗабайкальскийКрай_ЖКУ Цикл
		Если ТекСтрока.НомерПоляНаличияСчетчика = ЧислоНомерПоляКоличествоМесяцевДолга
		 ИЛИ ТекСтрока.НомерПоляОбъемПотребления = ЧислоНомерПоляКоличествоМесяцевДолга
		 ИЛИ ТекСтрока.НомерПоляСуммаОплаты = ЧислоНомерПоляКоличествоМесяцевДолга Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Указанный номер поля уже используется для других услуг. Необходимо указать другой номер поля!");
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ОкончаниеВводаТекста" табличного поля "НомерПоляНаличиеЗадолженности".
//
Процедура НомерПоляНаличиеЗадолженностиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ЧислоНомерПоляНаличиеЗадолженности = Число(Текст);
	
	Если НомерПоляКоличествоМесяцевДолга = ЧислоНомерПоляНаличиеЗадолженности Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Указанный номер поля уже используется для поля ""Количество месяцев долга"". Необходимо указать другой номер поля!");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
	Для Каждого ТекСтрока ИЗ Объект.ЗабайкальскийКрай_ЖКУ Цикл
		Если ТекСтрока.НомерПоляНаличияСчетчика = ЧислоНомерПоляНаличиеЗадолженности
		 ИЛИ ТекСтрока.НомерПоляОбъемПотребления = ЧислоНомерПоляНаличиеЗадолженности
		 ИЛИ ТекСтрока.НомерПоляСуммаОплаты = ЧислоНомерПоляНаличиеЗадолженности Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Указанный номер поля уже используется для других услуг. Необходимо указать другой номер поля!");
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
