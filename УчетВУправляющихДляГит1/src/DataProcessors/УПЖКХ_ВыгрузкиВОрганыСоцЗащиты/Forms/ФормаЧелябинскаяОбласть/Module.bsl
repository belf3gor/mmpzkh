
Перем КоличествоУслуг;

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область Форма

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии(Отказ)
	
	Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
	ОбновитьПериод();
	
	КоличествоУслуг = 0;
	
	ВосстановитьНастройкиНаСервере();
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьНастройкиНаСервере();
	
КонецПроцедуры // ПриЗакрытии()

////////////////////////
// Сохраняемые настройки

&НаСервере
// Процедура восстановления настроек.
//
Процедура ВосстановитьНастройкиНаСервере()
	
	СтруктураПараметров = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("ПараметрыВыгрузки_ВыгрузкаЧелябинскаяОбласть_Версия2", "ПараметрыВыгрузки");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		// Каталог выгрузки.
		врИмяКаталогаВыгрузки = Неопределено;
		Если СтруктураПараметров.Свойство("ИмяКаталогаВыгрузки", врИмяКаталогаВыгрузки) Тогда
			Объект.ИмяКаталогаВыгрузки = врИмяКаталогаВыгрузки;
		КонецЕсли;
		
		// Код района.
		врКодРайона = Неопределено;
		Если СтруктураПараметров.Свойство("КодРайона", врКодРайона) Тогда
			КодРайона = врКодРайона;
		КонецЕсли;
		
		// Код города.
		врFIAS_CITY = Неопределено;
		Если СтруктураПараметров.Свойство("FIAS_CITY", врFIAS_CITY) Тогда
			FIAS_CITY = врFIAS_CITY;
		КонецЕсли;
		
		// Восстановление настройки в котором хранится вид отапливаемой площади.
		врВидОтапливаемойПлощади = Неопределено;
		Если СтруктураПараметров.Свойство("ВидОтапливаемойПлощади", врВидОтапливаемойПлощади) Тогда
			ВидОтапливаемойПлощади = врВидОтапливаемойПлощади;
		КонецЕсли;
		
		// Восстановление настройки в котором хранится тип выгружаемого наименования организации.
		врТипВыгружаемогоНаименованияОрганизации = Неопределено;
		Если СтруктураПараметров.Свойство("ТипВыгружаемогоНаименованияОрганизации", врТипВыгружаемогоНаименованияОрганизации) Тогда
			ТипВыгружаемогоНаименованияОрганизации = врТипВыгружаемогоНаименованияОрганизации;
		КонецЕсли;
		
		// Восстановление настройки в котором хранится признак учета пени при формировании файла выгрузки.
		врУчитыватьПени = Неопределено;
		Если СтруктураПараметров.Свойство("УчитыватьПени", врУчитыватьПени) Тогда
			УчитыватьПени = врУчитыватьПени;
		КонецЕсли;
		
		// Восстановление настройки в котором хранится признак учета перерасчетов за текущий месяц начисления при формировании файла выгрузки.
		врУчитыватьПерерасчетыЗаТекущийМесяцНачисления = Неопределено;
		Если СтруктураПараметров.Свойство("УчитыватьПерерасчетыЗаТекущийМесяцНачисления", врУчитыватьПерерасчетыЗаТекущийМесяцНачисления) Тогда
			УчитыватьПерерасчетыЗаТекущийМесяцНачисления = врУчитыватьПерерасчетыЗаТекущийМесяцНачисления;
		КонецЕсли;
		
		// Восстановление настройки в котором хранится способ получения площадей МОП.
		врСпособПолученияПлощадейМОП = Неопределено;
		Если СтруктураПараметров.Свойство("СпособПолученияПлощадейМОП", врСпособПолученияПлощадейМОП) Тогда
			СпособПолученияПлощадейМОП = врСпособПолученияПлощадейМОП;
		КонецЕсли;
		
		// Восстановление настройки в котором хранится признак учета задолженностей за месяцы начисления, которые были неоплачены более 36 месяцев.
		врУчитыватьЗадолженностиЗаМесяцыНачисленияСПросрочкойБолее36Месяцев = Неопределено;
		Если СтруктураПараметров.Свойство("УчитыватьЗадолженностиЗаМесяцыНачисленияСПросрочкойБолее36Месяцев", врУчитыватьЗадолженностиЗаМесяцыНачисленияСПросрочкойБолее36Месяцев) Тогда
			УчитыватьЗадолженностиЗаМесяцыНачисленияСПросрочкойБолее36Месяцев = врУчитыватьЗадолженностиЗаМесяцыНачисленияСПросрочкойБолее36Месяцев;
		КонецЕсли;
		
		// Восстановление настройки, в которой хранится выгружаемый реквизит единицы измерения.
		врВКакомВидеВыгружатьСведенияОЕИ = Неопределено;
		Если СтруктураПараметров.Свойство("ВКакомВидеВыгружатьСведенияОЕИ", врВКакомВидеВыгружатьСведенияОЕИ) Тогда
			ВКакомВидеВыгружатьСведенияОЕИ = врВКакомВидеВыгружатьСведенияОЕИ;
		КонецЕсли;
	Иначе
		
		ВидОтапливаемойПлощади = Справочники.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь;
		
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьНастройкиНаСервере()

&НаСервере
// Процедура сохранения настроек.
//
Процедура СохранитьНастройкиНаСервере()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяКаталогаВыгрузки",                                               Объект.ИмяКаталогаВыгрузки);
	СтруктураПараметров.Вставить("КодРайона",                                                         КодРайона);
	СтруктураПараметров.Вставить("FIAS_CITY",                                                         FIAS_CITY);
	СтруктураПараметров.Вставить("ВидОтапливаемойПлощади",                                            ВидОтапливаемойПлощади);
	СтруктураПараметров.Вставить("ТипВыгружаемогоНаименованияОрганизации",                            ТипВыгружаемогоНаименованияОрганизации);
	СтруктураПараметров.Вставить("УчитыватьПени",                                                     УчитыватьПени);
	СтруктураПараметров.Вставить("УчитыватьПерерасчетыЗаТекущийМесяцНачисления",                      УчитыватьПерерасчетыЗаТекущийМесяцНачисления);
	СтруктураПараметров.Вставить("УчитыватьЗадолженностиЗаМесяцыНачисленияСПросрочкойБолее36Месяцев", УчитыватьЗадолженностиЗаМесяцыНачисленияСПросрочкойБолее36Месяцев);
	СтруктураПараметров.Вставить("СпособПолученияПлощадейМОП",                                        СпособПолученияПлощадейМОП);
	СтруктураПараметров.Вставить("ВКакомВидеВыгружатьСведенияОЕИ",                                    ВКакомВидеВыгружатьСведенияОЕИ);
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("ПараметрыВыгрузки_ВыгрузкаЧелябинскаяОбласть_Версия2", "ПараметрыВыгрузки", СтруктураПараметров);
	
КонецПроцедуры // СохранитьНастройкиНаСервере()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ПериодСтрокой

&НаКлиенте
// Изменяет период на форме выгрузки.
//
// Параметры:
//  Период - Дата - устанавливаемый период.
//
Процедура ОбновитьПериод(Период = Неопределено)
	
	Объект.Период = ?(Период = Неопределено, УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("РабочаяДата"), КонецМесяца(Период));
	
	Если Объект.Период = '00010101' Тогда
		Объект.Период = ТекущаяДата();
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры // ОбновитьПериод()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Модифицированность);
	
КонецПроцедуры // ПериодСтрокойПриИзменении()

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры // ПериодСтрокойНачалоВыбора()

&НаКлиенте
// Обработчик события "Регулирование" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Направление, Модифицированность);
	
КонецПроцедуры // ПериодСтрокойРегулирование()

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодСтрокойАвтоПодбор()

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодСтрокойОкончаниеВводаТекста()

#КонецОбласти

#Область КаталогВыгрузки

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ИмяКаталогаВыгрузки".
//
Процедура ИмяКаталогаВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла                             = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Заголовок                   = "Выбор каталога выгрузки";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ИмяКаталогаВыгрузкиНачалоВыбораВыбрать", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения выбора каталога.
Процедура ИмяКаталогаВыгрузкиНачалоВыбораВыбрать(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		Объект.ИмяКаталогаВыгрузки = ВыбранныеФайлы[0];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Открытие" поля "ИмяКаталогаВыгрузки".
//
Процедура ИмяКаталогаВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Файл = Новый Файл(Объект.ИмяКаталогаВыгрузки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИмяКаталогаВыгрузкиОткрытиеКаталогСуществует",
												  ЭтотОбъект, Новый Структура("Файл", Файл));
	Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения проверки существования каталога.
Процедура ИмяКаталогаВыгрузкиОткрытиеКаталогСуществует(Существует, ДополнительныеПараметры) Экспорт
	
	Если Существует Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ИмяКаталогаВыгрузкиОткрытиеЭтоКаталог", ЭтотОбъект);
		Файл = ДополнительныеПараметры.Файл;
		Файл.НачатьПроверкуЭтоКаталог(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения проверки каталога.
Процедура ИмяКаталогаВыгрузкиОткрытиеЭтоКаталог(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Если ЭтоКаталог Тогда
		ЗапуститьПриложение(Объект.ИмяКаталогаВыгрузки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область Настройка

////////////////////////
// Команда Настройка

&НаКлиенте
// Обработчик команды "КомандаНастройка".
//
Процедура КомандаНастройка(Команда)
	
	АдресНастроекВХранилище = ПоместитьНастройкиВХранилище();
	
	// Передаем вид разреза выгрузки и заполняемые настройки в параметры открытия формы настроек.
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("АдресНастроекВХранилище", АдресНастроекВХранилище);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаНастройкаЗавершение", ЭтаФорма);
	
	ОткрытьФорму("Обработка.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты.Форма.ЧелябинскаяОбласть_ФормаНастройки", ПараметрыОткрытияФормы, ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры // КомандаНастройка()

&НаКлиенте
// Обработчик результата опроса команды "КомандаНастройка".
//
Процедура КомандаНастройкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ПолучитьНастройкиИзХранилища(Результат);
	КонецЕсли;
	
КонецПроцедуры // КомандаНастройкаЗавершение()

////////////////////////
// Работа с временным хранилищем

&НаСервере
// Помещает данные во временное хранилище для передачи их в форму настройки.
//
// Возвращаемое значение:
//  Строка - адрес настроек в хранилище.
//
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("УчитыватьПени",                                                     УчитыватьПени);
	СтруктураНастроек.Вставить("УчитыватьПерерасчетыЗаТекущийМесяцНачисления",                      УчитыватьПерерасчетыЗаТекущийМесяцНачисления);
	СтруктураНастроек.Вставить("ВидОтапливаемойПлощади",                                            ВидОтапливаемойПлощади);
	СтруктураНастроек.Вставить("ТипВыгружаемогоНаименованияОрганизации",                            ТипВыгружаемогоНаименованияОрганизации);
	СтруктураНастроек.Вставить("СпособПолученияПлощадейМОП",                                        СпособПолученияПлощадейМОП);
	СтруктураНастроек.Вставить("УчитыватьЗадолженностиЗаМесяцыНачисленияСПросрочкойБолее36Месяцев", УчитыватьЗадолженностиЗаМесяцыНачисленияСПросрочкойБолее36Месяцев);
	СтруктураНастроек.Вставить("ВКакомВидеВыгружатьСведенияОЕИ",                                    ВКакомВидеВыгружатьСведенияОЕИ);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции // ПоместитьДанныеВХранилище()

&НаСервере
// Помещает таблицу услуг во временное хранилище.
Функция ПолучитьНастройкиИзХранилища(АдресУслугВХранилище)
	
	СтруктураНастроек = ПолучитьИзВременногоХранилища(АдресУслугВХранилище);
	
	// Восстановление настройки в котором хранится вид отапливаемой площади.
	врВидОтапливаемойПлощади = Неопределено;
	Если СтруктураНастроек.Свойство("ВидОтапливаемойПлощади", врВидОтапливаемойПлощади) Тогда
		ВидОтапливаемойПлощади = врВидОтапливаемойПлощади;
	КонецЕсли;
	
	// Восстановление настройки в котором хранится тип выгружаемого наименования организации.
	врТипВыгружаемогоНаименованияОрганизации = Неопределено;
	Если СтруктураНастроек.Свойство("ТипВыгружаемогоНаименованияОрганизации", врТипВыгружаемогоНаименованияОрганизации) Тогда
		ТипВыгружаемогоНаименованияОрганизации = врТипВыгружаемогоНаименованияОрганизации;
	КонецЕсли;
	
	// Восстановление настройки в котором хранится признак учета пени при формировании файла выгрузки.
	врУчитыватьПени = Неопределено;
	Если СтруктураНастроек.Свойство("УчитыватьПени", врУчитыватьПени) Тогда
		УчитыватьПени = врУчитыватьПени;
	КонецЕсли;
	
	// Восстановление настройки в котором хранится признак учета перерасчетов за текущий месяц начисления при формировании файла выгрузки.
	врУчитыватьПерерасчетыЗаТекущийМесяцНачисления = Неопределено;
	Если СтруктураНастроек.Свойство("УчитыватьПерерасчетыЗаТекущийМесяцНачисления", врУчитыватьПерерасчетыЗаТекущийМесяцНачисления) Тогда
		УчитыватьПерерасчетыЗаТекущийМесяцНачисления = врУчитыватьПерерасчетыЗаТекущийМесяцНачисления;
	КонецЕсли;
	
	
	// Восстановление настройки в котором хранится способ получения площадей МОП.
	врСпособПолученияПлощадейМОП = Неопределено;
	Если СтруктураНастроек.Свойство("СпособПолученияПлощадейМОП", врСпособПолученияПлощадейМОП) Тогда
		СпособПолученияПлощадейМОП = врСпособПолученияПлощадейМОП;
	КонецЕсли;
	
	// Восстановление настройки в котором хранится признак учета задолженностей за месяцы начисления, которые были неоплачены более 36 месяцев.
	врУчитыватьЗадолженностиЗаМесяцыНачисленияСПросрочкойБолее36Месяцев = Неопределено;
	Если СтруктураНастроек.Свойство("УчитыватьЗадолженностиЗаМесяцыНачисленияСПросрочкойБолее36Месяцев", врУчитыватьЗадолженностиЗаМесяцыНачисленияСПросрочкойБолее36Месяцев) Тогда
		УчитыватьЗадолженностиЗаМесяцыНачисленияСПросрочкойБолее36Месяцев = врУчитыватьЗадолженностиЗаМесяцыНачисленияСПросрочкойБолее36Месяцев;
	КонецЕсли;
	
	// Восстановление настройки, в которой хранится выгружаемый реквизит единицы измерения.
	врВКакомВидеВыгружатьСведенияОЕИ = Неопределено;
	Если СтруктураНастроек.Свойство("ВКакомВидеВыгружатьСведенияОЕИ", врВКакомВидеВыгружатьСведенияОЕИ) Тогда
		ВКакомВидеВыгружатьСведенияОЕИ = врВКакомВидеВыгружатьСведенияОЕИ;
	КонецЕсли;
	
КонецФункции // ПолучитьНастройкиИзХранилища()

#КонецОбласти

#Область КомандаЗагрузить

////////////////////
// Загрузить из файла

&НаКлиенте
// Обработчик команды "КомандаЗагрузить".
//
Процедура КомандаЗагрузить(Команда)
	
	ИмеетсяНезаполненныеПоля(Новый ОписаниеОповещения("КомандаЗагрузитьЗавершение", ЭтотОбъект), "Заполнение");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		Возврат;
	КонецЕсли;
	
	
	Если Объект.ЧелябинскаяОбласть_ТаблицаВыгрузки.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаЗагрузитьВопрос", ЭтотОбъект);
		
		ТекстВопроса = "Перед перезаполнением табличная часть будет очищена. Продолжить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		КомандаЗагрузитьПродолжение();
	КонецЕсли;

КонецПроцедуры // КомандаЗагрузить()

&НаКлиенте
// Обработчик результата опроса команды "КомандаЗагрузить".
//
Процедура КомандаЗагрузитьВопрос(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Объект.ЧелябинскаяОбласть_ТаблицаВыгрузки.Очистить();
		
		КомандаЗагрузитьПродолжение();
		
	КонецЕсли;
	
КонецПроцедуры // КомандаЗагрузитьВопрос()

&НаСервере
// Загрузка таблицы услуг в ОСЗН из dbf-файла.
//
Процедура КомандаЗагрузитьПродолжение() 
	
	ПолучитьДанныеОНачисленияхИЗаполнитьТаблицуВыгрузки();
	
КонецПроцедуры // КомандаЗагрузитьНаСервере()

&НаСервере
// Получаем данные о начислениях по предоставляемым услугам для списка жильцов со льготной категорией из файла.
//
// Параметры:
//  Пусто.
//
// Возвращаемое значение:
//  РезультатЗапроса - содержит сведения о начислениях.
//
Процедура ПолучитьДанныеОНачисленияхИЗаполнитьТаблицуВыгрузки()
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Вынесена в отдельную переменную, т.к. она используется ниже при определении размера нормы,
	// которая рассчитывается по формуле или по набору расширений.
	КонецМесяца = КонецМесяца(Объект.Период);
	
	Запрос.УстановитьПараметр("ДатаНач",                НачалоМесяца(Объект.Период));
	Запрос.УстановитьПараметр("ДатаКон",                КонецМесяца);
	Запрос.УстановитьПараметр("Организация",            Объект.Организация);
	Запрос.УстановитьПараметр("ВидОтапливаемойПлощади", ВидОтапливаемойПлощади);
	Запрос.УстановитьПараметр("ТекущийМесяц",           НачалоДня(КонецМесяца(Объект.Период)));
	//Запрос.УстановитьПараметр("КонецПредыдущегоМесяца", НачалоДня(НачалоМесяца(Объект.Период)- 1));
	
	//Запрос.УстановитьПараметр("Здание", Здание);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ втЛицевыеСчетаОбслуживаемыеВыбраннойОрганизацией
	|ИЗ
	//|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(&ДатаКон, Организация = &Организация И ЛицевойСчет.Адрес.Владелец = &Здание) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних
	|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(&ДатаКон, Организация = &Организация) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Контрагент.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Адрес КАК Помещение,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Адрес.ВидПомещения.ТипПомещения КАК ТипПомещения,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Адрес.Владелец КАК Здание,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Адрес.Код КАК НомерКвартиры,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Адрес.Суффикс КАК СуффиксКвартиры
	|ПОМЕСТИТЬ втДействующиеЛицевыеСчета
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&ДатаНач,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втЛицевыеСчетаОбслуживаемыеВыбраннойОрганизацией.ЛицевойСчет КАК ЛицевойСчет
	|				ИЗ
	|					втЛицевыеСчетаОбслуживаемыеВыбраннойОрганизацией КАК втЛицевыеСчетаОбслуживаемыеВыбраннойОрганизацией)) КАК КВП_ЛицевыеСчетаСрезПоследних
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КВП_ЛицевыеСчета.ЛицевойСчет,
	|	КВП_ЛицевыеСчета.ЛицевойСчет.Адрес,
	|	КВП_ЛицевыеСчета.ЛицевойСчет.Адрес.ВидПомещения.ТипПомещения,
	|	КВП_ЛицевыеСчета.ЛицевойСчет.Адрес.Владелец,
	|	КВП_ЛицевыеСчета.ЛицевойСчет.Адрес.Код,
	|	КВП_ЛицевыеСчета.ЛицевойСчет.Адрес.Суффикс
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	КВП_ЛицевыеСчета.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И КВП_ЛицевыеСчета.ЛицевойСчет В
	|			(ВЫБРАТЬ
	|				втЛицевыеСчетаОбслуживаемыеВыбраннойОрганизацией.ЛицевойСчет КАК ЛицевойСчет
	|			ИЗ
	|				втЛицевыеСчетаОбслуживаемыеВыбраннойОрганизацией КАК втЛицевыеСчетаОбслуживаемыеВыбраннойОрганизацией)
	|	И КВП_ЛицевыеСчета.Действует";
	
	Запрос.Выполнить();
	
	ЗапросПоЛС = Новый Запрос;
	ЗапросПоЛС.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	
	ЗапросПоЛС.Текст =
	"ВЫБРАТЬ
	|	втДействующиеЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет
	|ИЗ
	|	втДействующиеЛицевыеСчета КАК втДействующиеЛицевыеСчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	втДействующиеЛицевыеСчета.Здание,
	|	ЛицевойСчет";
	
	ВыборкаЛС = ЗапросПоЛС.Выполнить().Выбрать();
	МассивСписковЛС = ПодготовитьНаОсновеТаблицыЛицевыхСчетовМассивСписковПо1000ЛС(ВыборкаЛС);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	втДействующиеЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет,
	|	втДействующиеЛицевыеСчета.Помещение КАК Помещение,
	|	втДействующиеЛицевыеСчета.ТипПомещения КАК ТипПомещения,
	|	втДействующиеЛицевыеСчета.Здание КАК Здание,
	|	втДействующиеЛицевыеСчета.НомерКвартиры КАК НомерКвартиры,
	|	втДействующиеЛицевыеСчета.СуффиксКвартиры КАК СуффиксКвартиры,
	|	втДействующиеЛицевыеСчета.Здание.КодДомаПоФИАС КАК FIAS_DOM,
	|	втДействующиеЛицевыеСчета.Здание.КодРодительскогоОбъектаПоФИАС КАК FIAS_STR,
	|	втДействующиеЛицевыеСчета.Здание.ГодПостройки КАК GODPOSTR,
	|	ВЫБОР
	|		КОГДА втДействующиеЛицевыеСчета.Здание.МатериалСтен = ЗНАЧЕНИЕ(Справочник.КВП_МатериалСтен.Кирпичные)
	|			ТОГДА ""м/д и ж/д со стенами из камня, кирпича""
	|		КОГДА втДействующиеЛицевыеСчета.Здание.МатериалСтен В (ЗНАЧЕНИЕ(Справочник.КВП_МатериалСтен.Блочные), ЗНАЧЕНИЕ(Справочник.КВП_МатериалСтен.Панельные))
	|			ТОГДА ""м/д и ж/д со стенами из панелей, блоков""
	|		ИНАЧЕ ""м/д и ж/д со стенами из дерева, смешанных и др. материалов""
	|	КОНЕЦ КАК TIP_DOM
	|ИЗ
	|	втДействующиеЛицевыеСчета КАК втДействующиеЛицевыеСчета";
	
	ДействующиеЛицевыеСчета = Запрос.Выполнить().Выгрузить();
	
	Для каждого ТекСписокЛС Из МассивСписковЛС Цикл
		
		#Область ЗаполнитьСведенияОНачислениях
		
		МассивВидовКонтактнойИнформации = Новый Массив;
		МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
		
		ЗапросПоЗданиям = Новый Запрос;
		ЗапросПоЗданиям.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДействующиеЛицевыеСчета1.Здание КАК Объект
		|ПОМЕСТИТЬ втЗдания
		|ИЗ
		|	&ДействующиеЛицевыеСчета1 КАК ДействующиеЛицевыеСчета1
		|ГДЕ
		|	ДействующиеЛицевыеСчета1.ЛицевойСчет В(&СписокЛС)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЗдания.Объект КАК Объект
		|ИЗ
		|	втЗдания КАК втЗдания";
		
		ЗапросПоЗданиям.УстановитьПараметр("ДействующиеЛицевыеСчета1", ДействующиеЛицевыеСчета);
		ЗапросПоЗданиям.УстановитьПараметр("СписокЛС",                 ТекСписокЛС);
		
		МассивОбъектов = ЗапросПоЗданиям.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
		
		// Помещает в менеджер временных таблиц запроса контактной информации "втКонтактнаяИнформация".
		УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов, Ложь);
		
		Запрос.УстановитьПараметр("ДействующиеЛицевыеСчета", ДействующиеЛицевыеСчета);
		Запрос.УстановитьПараметр("СписокЛС",                ТекСписокЛС);
		
		Запрос.УстановитьПараметр("СведенияОПлощадяхМОППолучатьИзПомещений", ?(СпособПолученияПлощадейМОП = 0, Истина, Ложь));
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	втДействующиеЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет,
		|	втДействующиеЛицевыеСчета.Помещение КАК Помещение,
		|	втДействующиеЛицевыеСчета.ТипПомещения КАК ТипПомещения,
		|	втДействующиеЛицевыеСчета.Здание КАК Здание,
		|	втДействующиеЛицевыеСчета.FIAS_DOM КАК FIAS_DOM,
		|	втДействующиеЛицевыеСчета.FIAS_STR КАК FIAS_STR,
		|	втДействующиеЛицевыеСчета.GODPOSTR КАК GODPOSTR,
		|	втДействующиеЛицевыеСчета.TIP_DOM КАК TIP_DOM,
		|	втДействующиеЛицевыеСчета.НомерКвартиры КАК НомерКвартиры,
		|	втДействующиеЛицевыеСчета.СуффиксКвартиры КАК СуффиксКвартиры
		|ПОМЕСТИТЬ втЛицевыеСчета
		|ИЗ
		|	&ДействующиеЛицевыеСчета КАК втДействующиеЛицевыеСчета
		|ГДЕ
		|	втДействующиеЛицевыеСчета.ЛицевойСчет В(&СписокЛС)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет,
		|	втЛицевыеСчета.Помещение КАК Помещение,
		|	втЛицевыеСчета.ТипПомещения КАК ТипПомещения,
		|	втЛицевыеСчета.Здание КАК Здание,
		|	втЛицевыеСчета.FIAS_DOM КАК FIAS_DOM,
		|	втЛицевыеСчета.FIAS_STR КАК FIAS_STR,
		|	втЛицевыеСчета.GODPOSTR КАК GODPOSTR,
		|	втЛицевыеСчета.TIP_DOM КАК TIP_DOM,
		|	втЛицевыеСчета.НомерКвартиры КАК НомерКвартиры,
		|	втЛицевыеСчета.СуффиксКвартиры КАК СуффиксКвартиры,
		|	ЕСТЬNULL(втКонтактнаяИнформация.Индекс, """") КАК Индекс,
		|	ЕСТЬNULL(втКонтактнаяИнформация.Район, """") КАК Район,
		|	ЕСТЬNULL(втКонтактнаяИнформация.Город, """") КАК Город,
		|	ЕСТЬNULL(втКонтактнаяИнформация.НаселенныйПункт, """") КАК НаселенныйПункт,
		|	ЕСТЬNULL(втКонтактнаяИнформация.Улица, """") КАК Улица,
		|	ЕСТЬNULL(втКонтактнаяИнформация.Дом, """") КАК Дом,
		|	ЕСТЬNULL(втКонтактнаяИнформация.Корпус, """") КАК Корпус,
		|	ЕСТЬNULL(втКонтактнаяИнформация.ГородСокращение, """") КАК ГородСокращение,
		|	ЕСТЬNULL(втКонтактнаяИнформация.НаселенныйПунктСокращение, """") КАК НаселенныйПунктСокращение,
		|	ЕСТЬNULL(втКонтактнаяИнформация.УлицаСокращение, """") КАК УлицаСокращение
		|ПОМЕСТИТЬ втЛицевыеСчетаСАдресами
		|ИЗ
		|	втЛицевыеСчета КАК втЛицевыеСчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК втКонтактнаяИнформация
		|		ПО втЛицевыеСчета.Здание = втКонтактнаяИнформация.Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение КАК Помещение,
		|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности КАК ВидСобственности,
		|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.ПодвидЧастнойСобственности КАК ПодвидЧастнойСобственности
		|ПОМЕСТИТЬ втСведенияОСобственностиНаПомещения
		|ИЗ
		|	РегистрСведений.УПЖКХ_СобственностьНаПомещения.СрезПоследних(
		|			&ДатаКон,
		|			Помещение В
		|					(ВЫБРАТЬ
		|						втЛицевыеСчетаСАдресами.Помещение КАК Помещение
		|					ИЗ
		|						втЛицевыеСчетаСАдресами КАК втЛицевыеСчетаСАдресами)
		|				И Действует) КАК УПЖКХ_СобственностьНаПомещенияСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_ПлощадьПомещенияСрезПоследних.Объект.Владелец КАК Здание,
		|	СУММА(ВЫБОР
		|			КОГДА КВП_ПлощадьПомещенияСрезПоследних.ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)
		|				ТОГДА КВП_ПлощадьПомещенияСрезПоследних.Площадь
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК OPS,
		|	СУММА(ВЫБОР
		|			КОГДА КВП_ПлощадьПомещенияСрезПоследних.Объект.ВидПомещения.ТипПомещения В (ЗНАЧЕНИЕ(Перечисление.КВП_ТипыПомещений.ПодсобноеПомещение), ЗНАЧЕНИЕ(Перечисление.КВП_ТипыПомещений.МестоОбщегоПользования))
		|				ТОГДА КВП_ПлощадьПомещенияСрезПоследних.Площадь
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК MOP
		|ПОМЕСТИТЬ втПлощадиЗданий
		|ИЗ
		|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
		|			&ДатаКон,
		|			Объект.Владелец В
		|				(ВЫБРАТЬ
		|					втЛицевыеСчетаСАдресами.Здание КАК Здание
		|				ИЗ
		|					втЛицевыеСчетаСАдресами КАК втЛицевыеСчетаСАдресами)) КАК КВП_ПлощадьПомещенияСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	КВП_ПлощадьПомещенияСрезПоследних.Объект.Владелец
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_БлагоустройствоОбъектов.Объект КАК Здание,
		|	ВЫБОР
		|		КОГДА КВП_БлагоустройствоОбъектов.Значение В (ИСТИНА, ""Да"", ""Имеется"", ""Есть"")
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК LIFT
		|ПОМЕСТИТЬ втБлагоустройстваЗданий
		|ИЗ
		|	РегистрСведений.КВП_БлагоустройствоОбъектов КАК КВП_БлагоустройствоОбъектов
		|ГДЕ
		|	КВП_БлагоустройствоОбъектов.Объект В
		|			(ВЫБРАТЬ
		|				втЛицевыеСчетаСАдресами.Здание КАК Здание
		|			ИЗ
		|				втЛицевыеСчетаСАдресами КАК втЛицевыеСчетаСАдресами)
		|	И КВП_БлагоустройствоОбъектов.ВидБлагоустройства = ЗНАЧЕНИЕ(Справочник.КВП_ВидыБлагоустройстваОбъектов.Лифт)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
		|	ВЫБОР
		|		КОГДА КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель = 0
		|			ТОГДА 1
		|		ИНАЧЕ КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель / КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель
		|	КОНЕЦ КАК DOLJA
		|ПОМЕСТИТЬ втСведенияОДоляхЛицевыхСчетовВПомещениях
		|ИЗ
		|	РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(
		|			&ДатаКон,
		|			ЛицевойСчет В
		|					(ВЫБРАТЬ
		|						втЛицевыеСчетаСАдресами.ЛицевойСчет КАК ЛицевойСчет
		|					ИЗ
		|						втЛицевыеСчетаСАдресами КАК втЛицевыеСчетаСАдресами)
		|				И НЕ ДокументРегистратор ССЫЛКА Документ.КВП_ЗакрытиеЛицевогоСчета) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_ПлощадьПомещенияСрезПоследних.Объект КАК Помещение,
		|	СУММА(ВЫБОР
		|			КОГДА КВП_ПлощадьПомещенияСрезПоследних.ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)
		|				ТОГДА КВП_ПлощадьПомещенияСрезПоследних.Площадь
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК PL_OBSH,
		|	СУММА(ВЫБОР
		|			КОГДА КВП_ПлощадьПомещенияСрезПоследних.ВидПлощади = &ВидОтапливаемойПлощади
		|				ТОГДА КВП_ПлощадьПомещенияСрезПоследних.Площадь
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК PL_OTAP
		|ПОМЕСТИТЬ втПлощадиПомещений
		|ИЗ
		|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
		|			&ДатаКон,
		|			Объект В
		|				(ВЫБРАТЬ
		|					втЛицевыеСчетаСАдресами.Помещение КАК Помещение
		|				ИЗ
		|					втЛицевыеСчетаСАдресами КАК втЛицевыеСчетаСАдресами)) КАК КВП_ПлощадьПомещенияСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	КВП_ПлощадьПомещенияСрезПоследних.Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК KOL_MANS,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ВременнаяРегистрация
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК KOL_MANV
		|ПОМЕСТИТЬ втСведенияОЗарегистрированныхЖильцахПолныйУчет
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
		|			&ДатаКон,
		|			ЛицевойСчет В
		|				(ВЫБРАТЬ
		|					втЛицевыеСчетаСАдресами.ЛицевойСчет КАК ЛицевойСчет
		|				ИЗ
		|					втЛицевыеСчетаСАдресами КАК втЛицевыеСчетаСАдресами)) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
		|
		|СГРУППИРОВАТЬ ПО
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
		|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.КоличествоЗарегистрированных КАК KOL_MANS,
		|	0 КАК KOL_MANV
		|ПОМЕСТИТЬ втСведенияОЗарегистрированныхГотовымиЧислами
		|ИЗ
		|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(
		|			&ДатаКон,
		|			ЛицевойСчет В
		|				(ВЫБРАТЬ
		|					втЛицевыеСчетаСАдресами.ЛицевойСчет КАК ЛицевойСчет
		|				ИЗ
		|					втЛицевыеСчетаСАдресами КАК втЛицевыеСчетаСАдресами)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЛицевыеСчетаСАдресами.ЛицевойСчет КАК ЛицевойСчет,
		|	ВЫБОР
		|		КОГДА УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Значение = ИСТИНА
		|			ТОГДА втСведенияОЗарегистрированныхГотовымиЧислами.KOL_MANS
		|		ИНАЧЕ втСведенияОЗарегистрированныхЖильцахПолныйУчет.KOL_MANS
		|	КОНЕЦ КАК KOL_MANS,
		|	ВЫБОР
		|		КОГДА УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Значение = ИСТИНА
		|			ТОГДА втСведенияОЗарегистрированныхГотовымиЧислами.KOL_MANV
		|		ИНАЧЕ втСведенияОЗарегистрированныхЖильцахПолныйУчет.KOL_MANV
		|	КОНЕЦ КАК KOL_MANV
		|ПОМЕСТИТЬ втСведенияОЗарегистрированныхЖильцах
		|ИЗ
		|	втЛицевыеСчетаСАдресами КАК втЛицевыеСчетаСАдресами
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОЗарегистрированныхЖильцахПолныйУчет КАК втСведенияОЗарегистрированныхЖильцахПолныйУчет
		|		ПО втЛицевыеСчетаСАдресами.ЛицевойСчет = втСведенияОЗарегистрированныхЖильцахПолныйУчет.ЛицевойСчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОЗарегистрированныхГотовымиЧислами КАК втСведенияОЗарегистрированныхГотовымиЧислами
		|		ПО втЛицевыеСчетаСАдресами.ЛицевойСчет = втСведенияОЗарегистрированныхГотовымиЧислами.ЛицевойСчет,
		|	Константа.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами КАК УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЛицевыеСчетаСАдресами.ЛицевойСчет КАК ЛицевойСчет,
		|	втЛицевыеСчетаСАдресами.Помещение КАК Помещение,
		|	втЛицевыеСчетаСАдресами.ТипПомещения КАК ТипПомещения,
		|	втЛицевыеСчетаСАдресами.Здание КАК Здание,
		|	втЛицевыеСчетаСАдресами.FIAS_DOM КАК FIAS_DOM,
		|	втЛицевыеСчетаСАдресами.FIAS_STR КАК FIAS_STR,
		|	втЛицевыеСчетаСАдресами.GODPOSTR КАК GODPOSTR,
		|	втЛицевыеСчетаСАдресами.TIP_DOM КАК TIP_DOM,
		|	втЛицевыеСчетаСАдресами.Индекс КАК Индекс,
		|	втЛицевыеСчетаСАдресами.Район КАК Район,
		|	ВЫБОР
		|		КОГДА втЛицевыеСчетаСАдресами.Город = """"
		|			ТОГДА втЛицевыеСчетаСАдресами.НаселенныйПункт
		|		ИНАЧЕ втЛицевыеСчетаСАдресами.Город
		|	КОНЕЦ КАК Город,
		|	втЛицевыеСчетаСАдресами.Улица КАК Улица,
		|	ВЫБОР
		|		КОГДА втЛицевыеСчетаСАдресами.ГородСокращение = """"
		|			ТОГДА втЛицевыеСчетаСАдресами.НаселенныйПунктСокращение
		|		ИНАЧЕ втЛицевыеСчетаСАдресами.ГородСокращение
		|	КОНЕЦ КАК ГородСокращение,
		|	втЛицевыеСчетаСАдресами.УлицаСокращение КАК УлицаСокращение,
		|	втЛицевыеСчетаСАдресами.Дом КАК Дом,
		|	втЛицевыеСчетаСАдресами.Корпус КАК Корпус,
		|	втЛицевыеСчетаСАдресами.НомерКвартиры КАК НомерКвартиры,
		|	втЛицевыеСчетаСАдресами.СуффиксКвартиры КАК СуффиксКвартиры,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(втСведенияОСобственностиНаПомещения.ВидСобственности, ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.ПустаяСсылка)) В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Государственная), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Ведомственная))
		|			ТОГДА 1
		|		КОГДА ЕСТЬNULL(втСведенияОСобственностиНаПомещения.ВидСобственности, ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Муниципальная)
		|			ТОГДА 2
		|		КОГДА ЕСТЬNULL(втСведенияОСобственностиНаПомещения.ВидСобственности, ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Частная)
		|			ТОГДА ВЫБОР
		|					КОГДА втЛицевыеСчетаСАдресами.ТипПомещения = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыПомещений.Квартира)
		|						ТОГДА 4
		|					ИНАЧЕ 3
		|				КОНЕЦ
		|	КОНЕЦ КАК GF,
		|	ВЫБОР
		|		КОГДА &СведенияОПлощадяхМОППолучатьИзПомещений
		|			ТОГДА ЕСТЬNULL(втПлощадиЗданий.OPS, 0)
		|		ИНАЧЕ втЛицевыеСчетаСАдресами.Здание.ПлощадьЗданияОбщая
		|	КОНЕЦ КАК OPS,
		|	ВЫБОР
		|		КОГДА &СведенияОПлощадяхМОППолучатьИзПомещений
		|			ТОГДА ЕСТЬNULL(втПлощадиЗданий.MOP, 0)
		|		ИНАЧЕ втЛицевыеСчетаСАдресами.Здание.ПлощадьЗданияМестОбщегоПользования
		|	КОНЕЦ КАК MOP,
		|	ЕСТЬNULL(втБлагоустройстваЗданий.LIFT, 0) КАК LIFT,
		|	ЕСТЬNULL(втСведенияОДоляхЛицевыхСчетовВПомещениях.DOLJA, 0) КАК DOLJA,
		|	ЕСТЬNULL(втПлощадиПомещений.PL_OBSH, 0) КАК PL_OBSH,
		|	ЕСТЬNULL(втПлощадиПомещений.PL_OTAP, 0) КАК PL_OTAP,
		|	ЕСТЬNULL(втСведенияОЗарегистрированныхЖильцах.KOL_MANS, 0) КАК KOL_MANS,
		|	ЕСТЬNULL(втСведенияОЗарегистрированныхЖильцах.KOL_MANV, 0) КАК KOL_MANV,
		|	втЛицевыеСчетаСАдресами.Помещение.КоличествоКомнат КАК KOMN,
		|	втЛицевыеСчетаСАдресами.Помещение.Этаж КАК ETAG,
		|	втЛицевыеСчетаСАдресами.Здание.Этажей КАК ETAGN,
		|	ВЫБОР
		|		КОГДА втЛицевыеСчетаСАдресами.Здание.Многоквартирное
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК MKV
		|ИЗ
		|	втЛицевыеСчетаСАдресами КАК втЛицевыеСчетаСАдресами
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОСобственностиНаПомещения КАК втСведенияОСобственностиНаПомещения
		|		ПО втЛицевыеСчетаСАдресами.Помещение = втСведенияОСобственностиНаПомещения.Помещение
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПлощадиЗданий КАК втПлощадиЗданий
		|		ПО втЛицевыеСчетаСАдресами.Здание = втПлощадиЗданий.Здание
		|		ЛЕВОЕ СОЕДИНЕНИЕ втБлагоустройстваЗданий КАК втБлагоустройстваЗданий
		|		ПО втЛицевыеСчетаСАдресами.Здание = втБлагоустройстваЗданий.Здание
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОДоляхЛицевыхСчетовВПомещениях КАК втСведенияОДоляхЛицевыхСчетовВПомещениях
		|		ПО втЛицевыеСчетаСАдресами.ЛицевойСчет = втСведенияОДоляхЛицевыхСчетовВПомещениях.ЛицевойСчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПлощадиПомещений КАК втПлощадиПомещений
		|		ПО втЛицевыеСчетаСАдресами.Помещение = втПлощадиПомещений.Помещение
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОЗарегистрированныхЖильцах КАК втСведенияОЗарегистрированныхЖильцах
		|		ПО втЛицевыеСчетаСАдресами.ЛицевойСчет = втСведенияОЗарегистрированныхЖильцах.ЛицевойСчет";
		
		// Произведем обработатку адресных сокращений в наименованиях городов(населенных пунктов) и улиц.
		ТаблицаЛицевыхСчетов = Запрос.Выполнить().Выгрузить();
		
		Запрос.УстановитьПараметр("втЛицевыеСчетаСАдресами", ТаблицаЛицевыхСчетов);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	втЛицевыеСчетаСАдресами.ЛицевойСчет КАК ЛицевойСчет,
		|	втЛицевыеСчетаСАдресами.Помещение КАК Помещение,
		|	втЛицевыеСчетаСАдресами.ТипПомещения КАК ТипПомещения,
		|	втЛицевыеСчетаСАдресами.Здание КАК Здание,
		|	втЛицевыеСчетаСАдресами.FIAS_DOM КАК FIAS_DOM,
		|	втЛицевыеСчетаСАдресами.FIAS_STR КАК FIAS_STR,
		|	втЛицевыеСчетаСАдресами.GODPOSTR КАК GODPOSTR,
		|	втЛицевыеСчетаСАдресами.TIP_DOM КАК TIP_DOM,
		|	втЛицевыеСчетаСАдресами.Индекс КАК POST_IND,
		|	втЛицевыеСчетаСАдресами.Район КАК Район,
		|	втЛицевыеСчетаСАдресами.Город КАК CITY,
		|	втЛицевыеСчетаСАдресами.ГородСокращение КАК SOCR_CITY,
		|	втЛицевыеСчетаСАдресами.Улица КАК STREET,
		|	втЛицевыеСчетаСАдресами.УлицаСокращение КАК SOCR_STR,
		|	втЛицевыеСчетаСАдресами.Дом КАК DOM,
		|	втЛицевыеСчетаСАдресами.Корпус КАК KORP,
		|	втЛицевыеСчетаСАдресами.НомерКвартиры КАК НомерКвартиры,
		|	втЛицевыеСчетаСАдресами.СуффиксКвартиры КАК СуффиксКвартиры,
		|	втЛицевыеСчетаСАдресами.GF КАК GF,
		|	втЛицевыеСчетаСАдресами.OPS КАК OPS,
		|	втЛицевыеСчетаСАдресами.MOP КАК MOP,
		|	втЛицевыеСчетаСАдресами.LIFT КАК LIFT,
		|	втЛицевыеСчетаСАдресами.DOLJA КАК DOLJA,
		|	втЛицевыеСчетаСАдресами.PL_OBSH КАК PL_OBSH,
		|	втЛицевыеСчетаСАдресами.PL_OTAP КАК PL_OTAP,
		|	втЛицевыеСчетаСАдресами.KOL_MANS КАК KOL_MANS,
		|	втЛицевыеСчетаСАдресами.KOL_MANV КАК KOL_MANV,
		|	втЛицевыеСчетаСАдресами.KOMN КАК KOMN,
		|	втЛицевыеСчетаСАдресами.ETAG КАК ETAG,
		|	втЛицевыеСчетаСАдресами.ETAGN КАК ETAGN,
		|	втЛицевыеСчетаСАдресами.MKV КАК MKV
		|ПОМЕСТИТЬ втЛицевыеСоСводнойИнформацией
		|ИЗ
		|	&втЛицевыеСчетаСАдресами КАК втЛицевыеСчетаСАдресами
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
		|	УПЖКХ_НачисленияОбороты.Услуга КАК Услуга,
		|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги КАК ВидУслуги,
		//|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги.ЕдиницаИзмерения КАК MEASURE,
		// ВКакомВидеВыгружатьСведенияОЕИ = 0 - будут выгружаться сведения об условных обозначениях
		// ВКакомВидеВыгружатьСведенияОЕИ = 1 - будут выгружаться сведения о наименованиях.
		|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги.ЕдиницаИзмерения" + ?(ВКакомВидеВыгружатьСведенияОЕИ = 0, ".Наименование", ".НаименованиеПолное") + " КАК MEASURE,
		|	МАКСИМУМ(УПЖКХ_НачисленияОбороты.Тариф) КАК TARIF,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему))
		|				ТОГДА УПЖКХ_НачисленияОбороты.Количество
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК KOL_POTR,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
		|				ТОГДА УПЖКХ_НачисленияОбороты.Количество
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК RAS_ODN,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка))
		|				ТОГДА 0
		|			ИНАЧЕ УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|		КОНЕЦ) КАК NACHISL,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
		|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК NACHISL_ODN,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка))
		|				ТОГДА 0
		|			ИНАЧЕ УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|		КОНЕЦ) КАК NACH_PVK,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка))
		|					И &УчитыватьПерерасчетыЗаТекущийМесяцНачисления
		|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК PERERASCH,
		|	СУММА(ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)
		|			ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|		ИНАЧЕ 0
		|	КОНЕЦ) КАК OPLATA
		|ПОМЕСТИТЬ втНачисления
		|ИЗ
		|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			,
		|			ЛицевойСчет В
		|					(ВЫБРАТЬ
		|						втЛицевыеСчетаСАдресами.ЛицевойСчет КАК ЛицевойСчет
		|					ИЗ
		|						втЛицевыеСчетаСАдресами КАК втЛицевыеСчетаСАдресами)
		|				И Организация = &Организация
		// Раздел учета "Льготы" исключил, т.к. льготы должны быть расчитаны в ОСЗН, т.е. УК предоставляет только сведения о начислениях.
		|				И РазделУчета В (&УчитыватьПениНачисления, ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Рассрочка))
		|				И НЕ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат)) КАК УПЖКХ_НачисленияОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
		|	УПЖКХ_НачисленияОбороты.Услуга,
		|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги,
		|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги.ЕдиницаИзмерения" + ?(ВКакомВидеВыгружатьСведенияОЕИ = 0, ".Наименование", ".НаименованиеПолное") + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет КАК ЛицевойСчет,
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга КАК Услуга,
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга.ВидУслуги КАК ВидУслуги,
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга.ВидУслуги.ЕдиницаИзмерения" + ?(ВКакомВидеВыгружатьСведенияОЕИ = 0, ".Наименование", ".НаименованиеПолное") + " КАК MEASURE,
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток КАК СуммаНачисленияОстаток
		|ПОМЕСТИТЬ втЛицевыеСчетаСДолгамиНаКонецМесяца
		|ИЗ
		|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
		|			&ДатаКон,
		|			Организация = &Организация
		|				И ЛицевойСчет В
		|					(ВЫБРАТЬ
		|						втЛицевыеСчетаСАдресами.ЛицевойСчет КАК ЛицевойСчет
		|					ИЗ
		|						втЛицевыеСчетаСАдресами КАК втЛицевыеСчетаСАдресами)
		|				И &УчитыватьПениОстатки
		|				И НЕ МесяцНачисления = &ТекущийМесяц И &УчитыватьЗадолженностиЗаМесяцыНачисленияСПросрочкойБолее36Месяцев) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
		|ГДЕ
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток > 0
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет КАК ЛицевойСчет,
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга КАК Услуга,
		|	МИНИМУМ(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.МесяцНачисления) КАК СамыйРаннийНепогашенныйМесяцНачисления
		|ПОМЕСТИТЬ втСамыеРанниеНепогашенныеМесяцыНачисления
		|ИЗ
		|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
		|			&ДатаКон,
		|			Организация = &Организация
		|				И (ЛицевойСчет, Услуга) В
		|					(ВЫБРАТЬ
		|						втЛицевыеСчетаСДолгамиНаКонецМесяца.ЛицевойСчет КАК ЛицевойСчет,
		|						втЛицевыеСчетаСДолгамиНаКонецМесяца.Услуга КАК Услуга
		|					ИЗ
		|						втЛицевыеСчетаСДолгамиНаКонецМесяца КАК втЛицевыеСчетаСДолгамиНаКонецМесяца)
		|				И &УчитыватьПениОстатки
		|				И НЕ МесяцНачисления = &ТекущийМесяц) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
		|ГДЕ
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет,
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЛицевыеСчетаСДолгамиНаКонецМесяца.ЛицевойСчет КАК ЛицевойСчет,
		|	втЛицевыеСчетаСДолгамиНаКонецМесяца.Услуга КАК Услуга,
		|	втЛицевыеСчетаСДолгамиНаКонецМесяца.ВидУслуги КАК ВидУслуги,
		|	втЛицевыеСчетаСДолгамиНаКонецМесяца.MEASURE КАК MEASURE,
		|	втЛицевыеСчетаСДолгамиНаКонецМесяца.СуммаНачисленияОстаток КАК DOLG_SUM,
		|	ЕСТЬNULL(втСамыеРанниеНепогашенныеМесяцыНачисления.СамыйРаннийНепогашенныйМесяцНачисления, ДАТАВРЕМЯ(1, 1, 1)) КАК СамыйРаннийНепогашенныйМесяцНачисления,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(втСамыеРанниеНепогашенныеМесяцыНачисления.СамыйРаннийНепогашенныйМесяцНачисления, ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА 0
		|		ИНАЧЕ РАЗНОСТЬДАТ(втСамыеРанниеНепогашенныеМесяцыНачисления.СамыйРаннийНепогашенныйМесяцНачисления, &ТекущийМесяц, МЕСЯЦ)
		|	КОНЕЦ КАК DOLG_MONTH
		|ПОМЕСТИТЬ втСведенияОЗадолженностях
		|ИЗ
		|	втЛицевыеСчетаСДолгамиНаКонецМесяца КАК втЛицевыеСчетаСДолгамиНаКонецМесяца
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСамыеРанниеНепогашенныеМесяцыНачисления КАК втСамыеРанниеНепогашенныеМесяцыНачисления
		|		ПО втЛицевыеСчетаСДолгамиНаКонецМесяца.ЛицевойСчет = втСамыеРанниеНепогашенныеМесяцыНачисления.ЛицевойСчет
		|			И втЛицевыеСчетаСДолгамиНаКонецМесяца.Услуга = втСамыеРанниеНепогашенныеМесяцыНачисления.Услуга
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втНачисления.ЛицевойСчет КАК ЛицевойСчет,
		|	втНачисления.Услуга КАК Услуга,
		|	ВЫБОР
		|		КОГДА втНачисления.Услуга.КоммунальныйРесурс = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыРесурсов.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЭтоКоммунальныйРесурс,
		|	втНачисления.ВидУслуги КАК ВидУслуги,
		|	втНачисления.MEASURE КАК MEASURE,
		|	втНачисления.TARIF КАК TARIF,
		|	втНачисления.KOL_POTR КАК KOL_POTR,
		|	втНачисления.RAS_ODN КАК RAS_ODN,
		|	втНачисления.NACHISL КАК NACHISL,
		|	втНачисления.NACHISL_ODN КАК NACHISL_ODN,
		|	втНачисления.NACH_PVK КАК NACH_PVK,
		|	втНачисления.PERERASCH КАК PERERASCH,
		|	втНачисления.OPLATA КАК OPLATA,
		|	0 КАК DOLG_SUM,
		//|	&ТекущийМесяц КАК СамыйРаннийНепогашенныйМесяцНачисления,
		|	0 КАК DOLG_MONTH
		|ПОМЕСТИТЬ втНачисленийИДолговБезГруппировки
		|ИЗ
		|	втНачисления КАК втНачисления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	втСведенияОЗадолженностях.ЛицевойСчет,
		|	втСведенияОЗадолженностях.Услуга,
		|	ВЫБОР
		|		КОГДА втСведенияОЗадолженностях.Услуга.КоммунальныйРесурс = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыРесурсов.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ,
		|	втСведенияОЗадолженностях.ВидУслуги,
		|	втСведенияОЗадолженностях.MEASURE,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	0,
		|	втСведенияОЗадолженностях.DOLG_SUM,
		//|	втСведенияОЗадолженностях.СамыйРаннийНепогашенныйМесяцНачисления,
		|	втСведенияОЗадолженностях.DOLG_MONTH
		|ИЗ
		|	втСведенияОЗадолженностях КАК втСведенияОЗадолженностях
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втНачисленийИДолговБезГруппировки.ЛицевойСчет КАК ЛицевойСчет,
		|	втНачисленийИДолговБезГруппировки.Услуга КАК Услуга,
		// КДБ (22.05.2018)
		// Добавить поле "ЭтоКоммунальныйРесурс"
		|	втНачисленийИДолговБезГруппировки.ЭтоКоммунальныйРесурс КАК ЭтоКоммунальныйРесурс,
		|	втНачисленийИДолговБезГруппировки.ВидУслуги КАК ВидУслуги,
		|	втНачисленийИДолговБезГруппировки.MEASURE КАК MEASURE,
		|	СУММА(втНачисленийИДолговБезГруппировки.TARIF) КАК TARIF,
		|	СУММА(втНачисленийИДолговБезГруппировки.KOL_POTR) КАК KOL_POTR,
		|	СУММА(втНачисленийИДолговБезГруппировки.RAS_ODN) КАК RAS_ODN,
		|	СУММА(втНачисленийИДолговБезГруппировки.NACHISL) КАК NACHISL,
		|	СУММА(втНачисленийИДолговБезГруппировки.NACHISL_ODN) КАК NACHISL_ODN,
		|	СУММА(втНачисленийИДолговБезГруппировки.NACH_PVK) КАК NACH_PVK,
		|	СУММА(втНачисленийИДолговБезГруппировки.PERERASCH) КАК PERERASCH,
		|	СУММА(втНачисленийИДолговБезГруппировки.OPLATA) КАК OPLATA,
		|	СУММА(втНачисленийИДолговБезГруппировки.DOLG_SUM) КАК DOLG_SUM,
		//|	МИНИМУМ(втНачисленийИДолговБезГруппировки.СамыйРаннийНепогашенныйМесяцНачисления) КАК СамыйРаннийНепогашенныйМесяцНачисления,
		|	СУММА(втНачисленийИДолговБезГруппировки.DOLG_MONTH) КАК DOLG_MONTH
		|ПОМЕСТИТЬ втНачисленийИДолгов
		|ИЗ
		|	втНачисленийИДолговБезГруппировки КАК втНачисленийИДолговБезГруппировки
		|
		|СГРУППИРОВАТЬ ПО
		|	втНачисленийИДолговБезГруппировки.ЛицевойСчет,
		|	втНачисленийИДолговБезГруппировки.Услуга,
		|	втНачисленийИДолговБезГруппировки.ЭтоКоммунальныйРесурс,
		|	втНачисленийИДолговБезГруппировки.ВидУслуги,
		|	втНачисленийИДолговБезГруппировки.MEASURE
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втНачисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втЛицевыеСчетаСДолгамиНаКонецМесяца
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втСамыеРанниеНепогашенныеМесяцыНачисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втСведенияОЗадолженностях
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втНачисленийИДолговБезГруппировки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга КАК Услуга,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления КАК НормаПотребления,
		|	ВЫБОР
		|		КОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки = ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК НормаПростая,
		|	ВЫБОР
		|		КОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки = ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой)
		|			ТОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Размер
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК РазмерПростойНормы
		|ПОМЕСТИТЬ втНормыПотребленияПоУслугамНаЛС
		|ИЗ
		|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(
		|			&ДатаКон,
		|			ЛицевойСчет В
		|				(ВЫБРАТЬ
		|					втЛицевыеСчетаСАдресами.ЛицевойСчет КАК ЛицевойСчет
		|				ИЗ
		|					втЛицевыеСчетаСАдресами КАК втЛицевыеСчетаСАдресами)) КАК КВП_НормыПотребленияУслугЛССрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втНачисленийИДолгов.ЛицевойСчет КАК ЛицевойСчет,
		|	втНачисленийИДолгов.Услуга КАК Услуга,
		|	втНачисленийИДолгов.ЭтоКоммунальныйРесурс КАК ЭтоКоммунальныйРесурс,
		// КДБ (22.05.2018)
		// Добавить поле "ЭтоКоммунальныйРесурс"
		|	втНачисленийИДолгов.ВидУслуги КАК ВидУслуги,
		|	втНачисленийИДолгов.MEASURE КАК MEASURE,
		|	втНачисленийИДолгов.TARIF КАК TARIF,
		|	втНачисленийИДолгов.KOL_POTR КАК KOL_POTR,
		|	втНачисленийИДолгов.RAS_ODN КАК RAS_ODN,
		|	втНачисленийИДолгов.NACHISL КАК NACHISL,
		|	втНачисленийИДолгов.NACHISL_ODN КАК NACHISL_ODN,
		|	втНачисленийИДолгов.NACH_PVK КАК NACH_PVK,
		|	втНачисленийИДолгов.OPLATA КАК OPLATA,
		|	втНачисленийИДолгов.PERERASCH КАК PERERASCH,
		|	втНачисленийИДолгов.DOLG_SUM КАК DOLG_SUM,
		//|	втНачисленийИДолгов.СамыйРаннийНепогашенныйМесяцНачисления КАК СамыйРаннийНепогашенныйМесяцНачисления,
		|	втНачисленийИДолгов.DOLG_MONTH КАК DOLG_MONTH,
		|	ЕСТЬNULL(втНормыПотребленияПоУслугамНаЛС.НормаПотребления, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)) КАК НормаПотребления,
		|	ЕСТЬNULL(втНормыПотребленияПоУслугамНаЛС.НормаПростая, ЛОЖЬ) КАК НормаПростая,
		|	ЕСТЬNULL(втНормыПотребленияПоУслугамНаЛС.РазмерПростойНормы, 0) КАК РазмерПростойНормы
		|ПОМЕСТИТЬ втСводныеНачисления
		|ИЗ
		|	втНачисленийИДолгов КАК втНачисленийИДолгов
		|		ЛЕВОЕ СОЕДИНЕНИЕ втНормыПотребленияПоУслугамНаЛС КАК втНормыПотребленияПоУслугамНаЛС
		|		ПО втНачисленийИДолгов.ЛицевойСчет = втНормыПотребленияПоУслугамНаЛС.ЛицевойСчет
		|			И втНачисленийИДолгов.Услуга = втНормыПотребленияПоУслугамНаЛС.Услуга
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЛицевыеСоСводнойИнформацией.ЛицевойСчет КАК ЛицевойСчет,
		|	втЛицевыеСоСводнойИнформацией.ЛицевойСчет.Наименование КАК LSHET,
		|	втЛицевыеСоСводнойИнформацией.Помещение КАК Помещение,
		|	втЛицевыеСоСводнойИнформацией.Здание КАК Здание,
		|	втЛицевыеСоСводнойИнформацией.FIAS_DOM КАК FIAS_DOM,
		|	втЛицевыеСоСводнойИнформацией.FIAS_STR КАК FIAS_STR,
		|	втЛицевыеСоСводнойИнформацией.GODPOSTR КАК GODPOSTR,
		|	втЛицевыеСоСводнойИнформацией.TIP_DOM КАК TIP_DOM,
		|	втЛицевыеСоСводнойИнформацией.POST_IND КАК POST_IND,
		|	втЛицевыеСоСводнойИнформацией.Район КАК Район,
		|	втЛицевыеСоСводнойИнформацией.CITY КАК CITY,
		|	втЛицевыеСоСводнойИнформацией.SOCR_CITY КАК SOCR_CITY,
		|	втЛицевыеСоСводнойИнформацией.STREET КАК STREET,
		|	втЛицевыеСоСводнойИнформацией.SOCR_STR КАК SOCR_STR,
		|	втЛицевыеСоСводнойИнформацией.DOM КАК DOM,
		|	втЛицевыеСоСводнойИнформацией.KORP КАК KORP,
		|	втЛицевыеСоСводнойИнформацией.НомерКвартиры КАК НомерКвартиры,
		|	втЛицевыеСоСводнойИнформацией.СуффиксКвартиры КАК СуффиксКвартиры,
		|	втЛицевыеСоСводнойИнформацией.GF КАК GF,
		|	втЛицевыеСоСводнойИнформацией.OPS КАК OPS,
		|	втЛицевыеСоСводнойИнформацией.MOP КАК MOP,
		|	втЛицевыеСоСводнойИнформацией.LIFT КАК LIFT,
		|	втЛицевыеСоСводнойИнформацией.DOLJA КАК DOLJA,
		|	втЛицевыеСоСводнойИнформацией.PL_OBSH КАК PL_OBSH,
		|	втЛицевыеСоСводнойИнформацией.PL_OTAP КАК PL_OTAP,
		|	втЛицевыеСоСводнойИнформацией.KOL_MANS КАК KOL_MANS,
		|	втЛицевыеСоСводнойИнформацией.KOL_MANV КАК KOL_MANV,
		|	втЛицевыеСоСводнойИнформацией.KOMN КАК KOMN,
		|	втЛицевыеСоСводнойИнформацией.ETAG КАК ETAG,
		|	втЛицевыеСоСводнойИнформацией.ETAGN КАК ETAGN,
		|	втЛицевыеСоСводнойИнформацией.MKV КАК MKV,
		|	втСводныеНачисления.Услуга КАК Услуга,
		// КДБ (22.05.2018)
		// Добавить поле "ЭтоКоммунальныйРесурс"
		|	втСводныеНачисления.ЭтоКоммунальныйРесурс КАК ЭтоКоммунальныйРесурс,
		|	втСводныеНачисления.Услуга.Наименование КАК NAME_USL,
		|	втСводныеНачисления.ВидУслуги КАК ВидУслуги,
		|	втСводныеНачисления.ВидУслуги.Наименование КАК VID_USL,
		|	втСводныеНачисления.MEASURE КАК MEASURE,
		|	втСводныеНачисления.TARIF КАК TARIF,
		|	втСводныеНачисления.KOL_POTR КАК KOL_POTR,
		|	втСводныеНачисления.RAS_ODN КАК RAS_ODN,
		|	втСводныеНачисления.NACHISL КАК NACHISL,
		|	втСводныеНачисления.NACHISL_ODN КАК NACHISL_ODN,
		|	втСводныеНачисления.NACH_PVK КАК NACH_PVK,
		|	втСводныеНачисления.OPLATA КАК OPLATA,
		|	втСводныеНачисления.PERERASCH КАК PERERASCH,
		|	втСводныеНачисления.DOLG_SUM КАК DOLG_SUM,
		//|	втСводныеНачисления.СамыйРаннийНепогашенныйМесяцНачисления КАК СамыйРаннийНепогашенныйМесяцНачисления,
		|	втСводныеНачисления.DOLG_MONTH КАК DOLG_MONTH,
		|	втСводныеНачисления.НормаПотребления КАК НормаПотребления,
		|	втСводныеНачисления.НормаПростая КАК НормаПростая,
		|	втСводныеНачисления.РазмерПростойНормы КАК РазмерПростойНормы
		|ПОМЕСТИТЬ втИтоговая
		|ИЗ
		|	втЛицевыеСоСводнойИнформацией КАК втЛицевыеСоСводнойИнформацией
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСводныеНачисления КАК втСводныеНачисления
		|		ПО втЛицевыеСоСводнойИнформацией.ЛицевойСчет = втСводныеНачисления.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втНормыПотребленияПоУслугамНаЛС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втСводныеНачисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втЛицевыеСоСводнойИнформацией
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втНачисленийИДолгов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УПЖКХ_ПоставщикиУслугСрезПоследних.Объект КАК Объект,
		|	УПЖКХ_ПоставщикиУслугСрезПоследних.ВидУслуги КАК ВидУслуги,
		|	УПЖКХ_ПоставщикиУслугСрезПоследних.Поставщик КАК Поставщик,
		|	ВЫБОР
		|		КОГДА УПЖКХ_ПоставщикиУслугСрезПоследних.ДоговорПоставщикаУслуг.УПЖКХ_ВариантПоставкиУслуг = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВариантыРасчетовСПоставщикамиУслуг.АгентскаяСхема)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоАгентскаяСхема
		|ПОМЕСТИТЬ втСведенияОПоставщикахУслуг
		|ИЗ
		|	РегистрСведений.УПЖКХ_ПоставщикиУслуг.СрезПоследних(
		|			&ДатаКон,
		|			Организация = &Организация
		|				И (Объект, ВидУслуги) В
		|					(ВЫБРАТЬ
		|						втИтоговая.Здание КАК Здание,
		|						втИтоговая.ВидУслуги КАК ВидУслуги
		|					ИЗ
		|						втИтоговая КАК втИтоговая)) КАК УПЖКХ_ПоставщикиУслугСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втИтоговая.ЛицевойСчет КАК ЛицевойСчет,
		|	втИтоговая.LSHET КАК LSHET,
		|	втИтоговая.Помещение КАК Помещение,
		|	втИтоговая.Здание КАК Здание,
		|	втИтоговая.FIAS_DOM КАК FIAS_DOM,
		|	втИтоговая.FIAS_STR КАК FIAS_STR,
		|	втИтоговая.GODPOSTR КАК GODPOSTR,
		|	втИтоговая.TIP_DOM КАК TIP_DOM,
		|	втИтоговая.POST_IND КАК POST_IND,
		|	втИтоговая.Район КАК Район,
		|	втИтоговая.CITY КАК CITY,
		|	втИтоговая.SOCR_CITY КАК SOCR_CITY,
		|	втИтоговая.STREET КАК STREET,
		|	втИтоговая.SOCR_STR КАК SOCR_STR,
		|	втИтоговая.DOM КАК DOM,
		|	втИтоговая.KORP КАК KORP,
		|	втИтоговая.НомерКвартиры КАК НомерКвартиры,
		|	втИтоговая.СуффиксКвартиры КАК СуффиксКвартиры,
		|	втИтоговая.GF КАК GF,
		|	втИтоговая.OPS КАК OPS,
		|	втИтоговая.MOP КАК MOP,
		|	втИтоговая.LIFT КАК LIFT,
		|	втИтоговая.DOLJA КАК DOLJA,
		|	втИтоговая.PL_OBSH КАК PL_OBSH,
		|	втИтоговая.PL_OTAP КАК PL_OTAP,
		|	втИтоговая.KOL_MANS КАК KOL_MANS,
		|	втИтоговая.KOL_MANV КАК KOL_MANV,
		|	втИтоговая.KOMN КАК KOMN,
		|	втИтоговая.ETAG КАК ETAG,
		|	втИтоговая.ETAGN КАК ETAGN,
		|	втИтоговая.MKV КАК MKV,
		|	втИтоговая.Услуга КАК Услуга,
		|	втИтоговая.ЭтоКоммунальныйРесурс КАК ЭтоКоммунальныйРесурс,
		|	втИтоговая.NAME_USL КАК NAME_USL,
		|	втИтоговая.ВидУслуги КАК ВидУслуги,
		|	втИтоговая.VID_USL КАК VID_USL,
		|	втИтоговая.MEASURE КАК MEASURE,
		|	втИтоговая.TARIF КАК TARIF,
		|	втИтоговая.KOL_POTR КАК KOL_POTR,
		|	втИтоговая.RAS_ODN КАК RAS_ODN,
		|	втИтоговая.NACHISL КАК NACHISL,
		|	втИтоговая.NACHISL_ODN КАК NACHISL_ODN,
		|	втИтоговая.NACH_PVK КАК NACH_PVK,
		|	втИтоговая.OPLATA КАК OPLATA,
		|	втИтоговая.PERERASCH КАК PERERASCH,
		|	втИтоговая.DOLG_SUM КАК DOLG_SUM,
		//|	втИтоговая.СамыйРаннийНепогашенныйМесяцНачисления КАК СамыйРаннийНепогашенныйМесяцНачисления,
		|	втИтоговая.DOLG_MONTH КАК DOLG_MONTH,
		|	втИтоговая.НормаПотребления КАК НормаПотребления,
		|	втИтоговая.НормаПростая КАК НормаПростая,
		|	втИтоговая.РазмерПростойНормы КАК РазмерПростойНормы,
		|	ЕСТЬNULL(втСведенияОПоставщикахУслуг.Поставщик, """") КАК Поставщик,
		|	ЕСТЬNULL(втСведенияОПоставщикахУслуг.ЭтоАгентскаяСхема, ЛОЖЬ) КАК ЭтоАгентскаяСхема
		|ИЗ
		|	втИтоговая КАК втИтоговая
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОПоставщикахУслуг КАК втСведенияОПоставщикахУслуг
		|		ПО втИтоговая.Здание = втСведенияОПоставщикахУслуг.Объект
		|			И втИтоговая.ВидУслуги = втСведенияОПоставщикахУслуг.ВидУслуги
		|
		|УПОРЯДОЧИТЬ ПО
		|	Здание,
		|	LSHET,
		|	Услуга";
		
		Если УчитыватьПерерасчетыЗаТекущийМесяцНачисления Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УчитыватьПерерасчетыЗаТекущийМесяцНачисления", "ИСТИНА");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УчитыватьПерерасчетыЗаТекущийМесяцНачисления", "НЕ УПЖКХ_НачисленияОбороты.МесяцНачисления = &ТекущийМесяц");
		КонецЕсли;
		
		Если УчитыватьПени Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УчитыватьПениНачисления", "ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УчитыватьПениОстатки",    "ИСТИНА");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УчитыватьПениНачисления", "ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.ПустаяСсылка)");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УчитыватьПениОстатки",    "НЕ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)");
		КонецЕсли;
		
		Если УчитыватьЗадолженностиЗаМесяцыНачисленияСПросрочкойБолее36Месяцев Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УчитыватьЗадолженностиЗаМесяцыНачисленияСПросрочкойБолее36Месяцев", "МесяцНачисления > &МесяцНачисления36МесяцевНазад");
			Запрос.УстановитьПараметр("МесяцНачисления36МесяцевНазад", ДобавитьМесяц(Запрос.Параметры.ТекущийМесяц, -36));
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УчитыватьЗадолженностиЗаМесяцыНачисленияСПросрочкойБолее36Месяцев", "Истина");
		КонецЕсли;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			
			Если МассивСписковЛС.Количество() = 1 Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("За выбранный период в базе не обнаружены сведения о начислениях!");
			КонецЕсли;
			
			Возврат;
		КонецЕсли;
		
		// Сформировать таблицу с тарифами по услугам по состоянию на конец декабря прошлого года.
		КонецДекабряПрошлогоГода = НачалоГода(Объект.Период) - 1;
		
		ТаблицаЛицевыхСчетовСУслугами = РезультатЗапроса.Выгрузить().Скопировать(, "ЛицевойСчет, Услуга");
		ТаблицаЛицевыхСчетовСУслугами.Колонки.Добавить("ВидТарифа", Новый ОписаниеТипов("ПеречислениеСсылка.КВП_ВидыТарифов"));
		ТаблицаЛицевыхСчетовСУслугами.Колонки.Добавить("Тариф",     УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(15,4));
		
		ТаблицаТарифовНаКонецДекабряПрошлогоГода = СформироватьТаблицуТарифовНаКонецДекабряПрошлогоГода(ТаблицаЛицевыхСчетовСУслугами, Объект.Организация, КонецДекабряПрошлогоГода);
		ОтборВТаблицеТарифов = Новый Структура("ЛицевойСчет, Услуга");
		
		ВыборкаСведенияОЛицевыхСчетахСНачислениями = РезультатЗапроса.Выбрать();
		
		Если ТипВыгружаемогоНаименованияОрганизации = 0 Тогда
			POSTAV = (Объект.Организация.НаименованиеСокращенное);
		Иначе
			POSTAV = (Объект.Организация.НаименованиеПолное);
		КонецЕсли;
		
		YEAR_S  = Формат(Объект.Период, "ДФ=yyyy");
		MONTH_S = Формат(Объект.Период, "ДФ=MM");
		
		// КДБ (22.05.2018)
		// Получить настройки формирования ПД по состоянию на конец Месяца выгрузки по Основной организации.
		// посмотреть в отчете "Платежный документ" способ получения настроек.
		
		ПредставлениеУслугСОИ = "";
		
		мНастройкиФормированияПДЖКХОтказ = Ложь;
		мНастройкиФормированияПДЖКХ = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьНастройкиФормированияПДЖКХ(Объект.Организация, мНастройкиФормированияПДЖКХОтказ);
		Если мНастройкиФормированияПДЖКХОтказ = Ложь Тогда
			ПредставлениеУслугСОИ = мНастройкиФормированияПДЖКХ.ПредставлениеУслугСОИ;
		КонецЕсли;
		
		Пока ВыборкаСведенияОЛицевыхСчетахСНачислениями.Следующий() Цикл
			
			// КДБ (22.05.2018)
			// Если по услуге, для которой заполнен реквизит "Коммунальный ресурс", произведено начисление на ОДН,
			// то сведения по таким услугам отражать в отдельной строке.
			// При этом в наименование услуги добавлять постфикс для услуг СОИ из настроек формирования ПД.
			
			НоваяСтрока = Объект.ЧелябинскаяОбласть_ТаблицаВыгрузки.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаСведенияОЛицевыхСчетахСНачислениями, ,"LSHET, RAS_ODN");
			
			Если ВыборкаСведенияОЛицевыхСчетахСНачислениями.ЭтоАгентскаяСхема Тогда
				НоваяСтрока.POSTAV   = ВыборкаСведенияОЛицевыхСчетахСНачислениями.Поставщик;
				НоваяСтрока.ORG_RACH = POSTAV;
				НоваяСтрока.LSHET_R  = НомерЛицевогоСчета(ВыборкаСведенияОЛицевыхСчетахСНачислениями.LSHET, Истина);
			Иначе
				НоваяСтрока.POSTAV = POSTAV;
				НоваяСтрока.LSHET  = НомерЛицевогоСчета(ВыборкаСведенияОЛицевыхСчетахСНачислениями.LSHET, Истина);
			КонецЕсли;
			
			Если НЕ ВыборкаСведенияОЛицевыхСчетахСНачислениями.ЭтоКоммунальныйРесурс И НЕ ВыборкаСведенияОЛицевыхСчетахСНачислениями.NACHISL_ODN = 0 Тогда
				НоваяСтрока.NACHISL     = НоваяСтрока.NACHISL + ВыборкаСведенияОЛицевыхСчетахСНачислениями.NACHISL_ODN;
				НоваяСтрока.RAS_ODN     = ВыборкаСведенияОЛицевыхСчетахСНачислениями.RAS_ODN;
			КонецЕсли;
			
			НоваяСтрока.DOLG_MONTH = ?(НоваяСтрока.DOLG_MONTH > 36, 36, НоваяСтрока.DOLG_MONTH);
			
			НоваяСтрока.K_RAION   = КодРайона;
			НоваяСтрока.FIAS_CITY = FIAS_CITY;
			
			НоваяСтрока.KV = ?(ПустаяСтрока(ВыборкаСведенияОЛицевыхСчетахСНачислениями.СуффиксКвартиры), ВыборкаСведенияОЛицевыхСчетахСНачислениями.НомерКвартиры, "" + ВыборкаСведенияОЛицевыхСчетахСНачислениями.НомерКвартиры + ВыборкаСведенияОЛицевыхСчетахСНачислениями.СуффиксКвартиры);
			
			НоваяСтрока.YEAR_S  = YEAR_S;
			НоваяСтрока.MONTH_S = MONTH_S;
			
			ОтборВТаблицеТарифов.Услуга      = ВыборкаСведенияОЛицевыхСчетахСНачислениями.Услуга;
			ОтборВТаблицеТарифов.ЛицевойСчет = ВыборкаСведенияОЛицевыхСчетахСНачислениями.ЛицевойСчет;
			
			НайденныеСтроки = ТаблицаТарифовНаКонецДекабряПрошлогоГода.НайтиСтроки(ОтборВТаблицеТарифов);
			Если НайденныеСтроки.Количество() > 0 Тогда
				НоваяСтрока.TARIF_DEC = НайденныеСтроки[0].Тариф;
			КонецЕсли;
			
			НоваяСтрока.KOPLATE = НоваяСтрока.NACHISL + НоваяСтрока.PERERASCH;
			
			Если ВыборкаСведенияОЛицевыхСчетахСНачислениями.НормаПростая Тогда
				НоваяСтрока.NORM_USL = ВыборкаСведенияОЛицевыхСчетахСНачислениями.РазмерПростойНормы;
			Иначе
				НоваяСтрока.NORM_USL = ПолучитьРазмерНормыПотребления(ВыборкаСведенияОЛицевыхСчетахСНачислениями.ЛицевойСчет, КонецМесяца,
				ВыборкаСведенияОЛицевыхСчетахСНачислениями.НормаПотребления, Объект.Организация);
			КонецЕсли;
			
			Если ВыборкаСведенияОЛицевыхСчетахСНачислениями.ЭтоКоммунальныйРесурс И НЕ ВыборкаСведенияОЛицевыхСчетахСНачислениями.NACHISL_ODN = 0 Тогда
				
				НоваяСтрокаОДН = Объект.ЧелябинскаяОбласть_ТаблицаВыгрузки.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрокаОДН, ВыборкаСведенияОЛицевыхСчетахСНачислениями, ,"LSHET, NAME_USL, VID_USL, KOL_POTR, RAS_ODN, NACHISL, NACH_PVK, OPLATA, PERERASCH, DOLG_SUM, DOLG_MONTH");
				
				Если ВыборкаСведенияОЛицевыхСчетахСНачислениями.ЭтоАгентскаяСхема Тогда
					НоваяСтрокаОДН.POSTAV   = ВыборкаСведенияОЛицевыхСчетахСНачислениями.Поставщик;
					НоваяСтрокаОДН.ORG_RACH = POSTAV;
					НоваяСтрокаОДН.LSHET_R  = НомерЛицевогоСчета(ВыборкаСведенияОЛицевыхСчетахСНачислениями.LSHET, Истина);
				Иначе
					НоваяСтрокаОДН.POSTAV = POSTAV;
					НоваяСтрокаОДН.LSHET  = НомерЛицевогоСчета(ВыборкаСведенияОЛицевыхСчетахСНачислениями.LSHET, Истина);
				КонецЕсли;
				
				НоваяСтрокаОДН.K_RAION   = КодРайона;
				НоваяСтрокаОДН.FIAS_CITY = FIAS_CITY;
				
				НоваяСтрокаОДН.KV = НоваяСтрока.KV;
				
				НоваяСтрокаОДН.YEAR_S  = YEAR_S;
				НоваяСтрокаОДН.MONTH_S = MONTH_S;
				
				НоваяСтрокаОДН.TARIF_DEC = НоваяСтрока.TARIF_DEC;
				
				НоваяСтрокаОДН.NAME_USL = ВыборкаСведенияОЛицевыхСчетахСНачислениями.NAME_USL + ПредставлениеУслугСОИ;
				НоваяСтрокаОДН.VID_USL  = ВыборкаСведенияОЛицевыхСчетахСНачислениями.VID_USL + ПредставлениеУслугСОИ;
				НоваяСтрокаОДН.RAS_ODN  = ВыборкаСведенияОЛицевыхСчетахСНачислениями.RAS_ODN;
				НоваяСтрокаОДН.NACHISL  = ВыборкаСведенияОЛицевыхСчетахСНачислениями.NACHISL_ODN;
				НоваяСтрокаОДН.NACH_PVK = НоваяСтрокаОДН.NACHISL;
				НоваяСтрокаОДН.KOPLATE  = НоваяСтрокаОДН.NACHISL;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		#КонецОбласти
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьТаблицуНачислений()

// Предназначена для определения размера тарифа по услугам по состоянию на конец декабря прошлого года от месяца выгрузки.
//
&НаСервереБезКонтекста
Функция СформироватьТаблицуТарифовНаКонецДекабряПрошлогоГода(ТаблицаЛицевыхСчетовСУслугами, Организация, КонецДекабряПрошлогоГода)
	
	ТаблицаУслуг = ТаблицаЛицевыхСчетовСУслугами.Скопировать(, "Услуга");
	ТаблицаУслуг.Свернуть("Услуга");
	
	ОтборУслуг       = Новый Структура("Услуга");
	СписокЛСПоУслуге = Новый СписокЗначений;
	Для каждого ТекУслуга Из ТаблицаУслуг Цикл
		
		ОтборУслуг.Услуга = ТекУслуга.Услуга;
		НайденныеСтроки = ТаблицаЛицевыхСчетовСУслугами.НайтиСтроки(ОтборУслуг);
		Для каждого ТекСтрока Из НайденныеСтроки Цикл
			СписокЛСПоУслуге.Добавить(ТекСтрока.ЛицевойСчет);
		КонецЦикла;
		
		ТаблицаТарифовПоТекущейУслуге = ПолучитьТарифПоЛицевомуСчету(КонецДекабряПрошлогоГода, Организация, ТекУслуга.Услуга, СписокЛСПоУслуге);
		Если ТаблицаТарифовПоТекущейУслуге.Количество() > 0 Тогда
			Для каждого ТекСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока = ТаблицаТарифовПоТекущейУслуге.Найти(ТекСтрока.ЛицевойСчет, "Объект");
				Если НайденнаяСтрока <> Неопределено Тогда
					ТекСтрока.ВидТарифа = НайденнаяСтрока.ВидТарифа;
					ТекСтрока.Тариф     = НайденнаяСтрока.Тариф;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаЛицевыхСчетовСУслугами;
	
КонецФункции // СформироватьТаблицуТарифовНаКонецДекабряПрошлогоГода()

&НаСервереБезКонтекста
Функция ПодготовитьНаОсновеТаблицыЛицевыхСчетовМассивСписковПо1000ЛС(ВыборкаЛС)
	
	МассивСписковЛС = Новый Массив;
	
	Сч       = 1;
	СписокЛС = Новый Массив;
	
	Пока ВыборкаЛС.Следующий() Цикл
		
		СписокЛС.Добавить(ВыборкаЛС.ЛицевойСчет);
		
		Если Сч = 500 Тогда
			МассивСписковЛС.Добавить(СписокЛС);
			
			Сч       = 1;
			СписокЛС = Новый Массив;
		Иначе
			Сч = Сч + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СписокЛС.Количество() > 0 Тогда
		МассивСписковЛС.Добавить(СписокЛС);
	КонецЕсли;
	
	Возврат МассивСписковЛС;
	
КонецФункции // ПодготовитьНаОсновеТаблицыЛицевыхСчетовМассивСписковПо500ЛС()

&НаКлиенте
Процедура ИмеетсяНезаполненныеПоля(Знач Оповещение, ТипОперации)
	
	СчОшибок       = 0;
	ТекстСообщения = "";
	
	Если ТипОперации = "Заполнение" Тогда
		
		Если Объект.Период = '00010101' Тогда
			СчОшибок = СчОшибок + 1;
			ТекстСообщения = "" + СчОшибок + ". Не заполнен месяц выгрузки." + Символы.ПС;
		КонецЕсли;
		
		Если Объект.Организация = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка") Тогда
			СчОшибок = СчОшибок + 1;
			ТекстСообщения = ТекстСообщения + СчОшибок + ". Не заполнена организация по которой выгружаются данные." + Символы.ПС;
		КонецЕсли;
		
		Если ПустаяСтрока(КодРайона) Тогда
			СчОшибок = СчОшибок + 1;
			ТекстСообщения = ТекстСообщения + СчОшибок + ". Не заполнен код района." + Символы.ПС;
		КонецЕсли;
		
		Если ПустаяСтрока(FIAS_CITY) Тогда
			СчОшибок = СчОшибок + 1;
			ТекстСообщения = ТекстСообщения + СчОшибок + ". Не заполнен идентификатор кода города по ФИАС.";
		КонецЕсли;
		
	Иначе
		
		Если Объект.ЧелябинскаяОбласть_ТаблицаВыгрузки.Количество() = 0 Тогда
			СчОшибок = СчОшибок + 1;
			ТекстСообщения = ТекстСообщения + СчОшибок + ". Отсутствуют данные для выгрузки." + Символы.ПС;
		КонецЕсли;
		
		// Проверяем каталог на существование.
		Файл = Новый Файл(Объект.ИмяКаталогаВыгрузки);
		Файл.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ИмеетсяНезаполненныеПоляЗавершение", ЭтотОбъект, Новый 
			Структура("Оповещение, ТипОперации, СчОшибок, ТекстСообщения", Оповещение, ТипОперации, СчОшибок, ТекстСообщения)));
		Возврат;
		
	КонецЕсли;
	
	ИмеетсяНезаполненныеПоляПродолжить(Оповещение, СчОшибок, ТекстСообщения, ТипОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмеетсяНезаполненныеПоляЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	Оповещение     = ДополнительныеПараметры.Оповещение;
	ТипОперации    = ДополнительныеПараметры.ТипОперации;
	СчОшибок       = ДополнительныеПараметры.СчОшибок;
	ТекстСообщения = ДополнительныеПараметры.ТекстСообщения;
	
	Если НЕ Существует Тогда
		СчОшибок = СчОшибок + 1;
		ТекстСообщения = ТекстСообщения + СчОшибок + ". Каталог сохранения файла для ОСЗН не существует.";
	КонецЕсли;
	
	ИмеетсяНезаполненныеПоляПродолжить(Оповещение, СчОшибок, ТекстСообщения, ТипОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмеетсяНезаполненныеПоляПродолжить(Знач Оповещение, Знач СчОшибок, ТекстСообщения, Знач ТипОперации)
	
	Если СчОшибок > 0 Тогда
		
		Если ТипОперации = "Заполнение" Тогда
			ТекстСообщения = "Заполнение таблицы выгрузки невозможно по следующим причинам:" + Символы.ПС + ТекстСообщения;
		Иначе
			ТекстСообщения = "Выгрузка данных в файл для ОСЗН невозможна по следующим причинам:" + Символы.ПС + ТекстСообщения;
		КонецЕсли;
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстСообщения);
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение, ?(СчОшибок = 0, Ложь, Истина));
	
КонецПроцедуры // ИмеетсяНезаполненныеПоля()


#КонецОбласти

#Область КомандаВыгрузить

////////////////////
// Выгрузить в файл

&НаКлиенте
// Обработчик команды "КомандаВыгрузить".
//
Процедура КомандаВыгрузить(Команда)
	
	ИмеетсяНезаполненныеПоля(Новый ОписаниеОповещения("КомандаВыгрузитьЗавершение", ЭтотОбъект), "Выгрузка");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыгрузитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		Возврат;
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
		
		ФайлВыгрузки = Новый XBase;
		ФайлВыгрузки.Кодировка = КодировкаXBase.OEM;
		ФайлВыгрузки.Поля.Добавить("NNN",        "S", 20);
		ФайлВыгрузки.Поля.Добавить("K_RAION",    "S", 2);
		ФайлВыгрузки.Поля.Добавить("POSTAV",     "S", 100);
		ФайлВыгрузки.Поля.Добавить("LSHET",      "S", 20);
		ФайлВыгрузки.Поля.Добавить("ORG_RACH",   "S", 100);
		ФайлВыгрузки.Поля.Добавить("LSHET_R",    "S", 20);
		ФайлВыгрузки.Поля.Добавить("POST_IND",   "S", 6);
		ФайлВыгрузки.Поля.Добавить("CITY",       "S", 40);
		ФайлВыгрузки.Поля.Добавить("SOCR_CITY",  "S", 10);
		ФайлВыгрузки.Поля.Добавить("STREET",     "S", 40);
		ФайлВыгрузки.Поля.Добавить("SOCR_STR",   "S", 10);
		ФайлВыгрузки.Поля.Добавить("DOM",        "S", 10);
		ФайлВыгрузки.Поля.Добавить("KORP",       "S", 10);
		ФайлВыгрузки.Поля.Добавить("KV",         "S", 10);
		ФайлВыгрузки.Поля.Добавить("FIAS_CITY",  "S", 36);
		ФайлВыгрузки.Поля.Добавить("FIAS_STR",   "S", 36);
		ФайлВыгрузки.Поля.Добавить("FIAS_DOM",   "S", 36);
		ФайлВыгрузки.Поля.Добавить("GF",         "S", 1);
		ФайлВыгрузки.Поля.Добавить("OPS",        "N", 8, 2);
		ФайлВыгрузки.Поля.Добавить("MOP",        "N", 8, 2);
		ФайлВыгрузки.Поля.Добавить("LIFT",       "S", 1);
		ФайлВыгрузки.Поля.Добавить("KOMN",       "S", 1);
		ФайлВыгрузки.Поля.Добавить("ETAG",       "S", 1);
		ФайлВыгрузки.Поля.Добавить("ETAGN",      "S", 1);
		ФайлВыгрузки.Поля.Добавить("DOLJA",      "N", 6, 2);
		ФайлВыгрузки.Поля.Добавить("PL_OBSH",    "N", 6, 2);
		ФайлВыгрузки.Поля.Добавить("PL_OTAP",    "N", 6, 2);
		ФайлВыгрузки.Поля.Добавить("KOL_MANS",   "N", 4);
		ФайлВыгрузки.Поля.Добавить("KOL_MANV",   "N", 4);
		ФайлВыгрузки.Поля.Добавить("YEAR_S",     "S", 4);
		ФайлВыгрузки.Поля.Добавить("MONTH_S",    "S", 2);
		ФайлВыгрузки.Поля.Добавить("VID_USL",    "S", 100);
		ФайлВыгрузки.Поля.Добавить("NAME_USL",   "S", 100);
		ФайлВыгрузки.Поля.Добавить("MEASURE",    "S", 20);
		ФайлВыгрузки.Поля.Добавить("NORM_USL",   "N", 15, 6);
		ФайлВыгрузки.Поля.Добавить("TARIF",      "N", 11, 3);
		ФайлВыгрузки.Поля.Добавить("TARIF_DEC",  "N", 11, 3);
		ФайлВыгрузки.Поля.Добавить("KOL_POTR",   "N", 15, 6);
		ФайлВыгрузки.Поля.Добавить("POTR6PRED",  "N", 8, 2);
		ФайлВыгрузки.Поля.Добавить("RAS_ODN",    "N", 15, 6);
		ФайлВыгрузки.Поля.Добавить("NACHISL",    "N", 11, 2);
		ФайлВыгрузки.Поля.Добавить("NACH_PVK",   "N", 11, 2);
		ФайлВыгрузки.Поля.Добавить("KOPLATE",    "N", 11, 2);
		ФайлВыгрузки.Поля.Добавить("NACH_PR",    "N", 11, 2);
		ФайлВыгрузки.Поля.Добавить("OPLATA",     "N", 11, 2);
		ФайлВыгрузки.Поля.Добавить("PERERASCH",  "N", 11, 2);
		ФайлВыгрузки.Поля.Добавить("DOLG_SUM",   "N", 11, 2);
		ФайлВыгрузки.Поля.Добавить("DOLG_MONTH", "N", 4);
		ФайлВыгрузки.Поля.Добавить("MKV",        "S", 1);
		ФайлВыгрузки.Поля.Добавить("GODPOSTR",   "N", 4);
		ФайлВыгрузки.Поля.Добавить("TIP_DOM",    "S", 60);
		
		ФайлВыгрузки.СоздатьФайл(Объект.ИмяКаталогаВыгрузки + "\OUT_FILE.DBF");
		ФайлВыгрузки.АвтоСохранение = Истина;
		
		// Запись данных из табличной части в файл выгрузки.
		Для Каждого Строка Из Объект.ЧелябинскаяОбласть_ТаблицаВыгрузки Цикл
			ФайлВыгрузки.Добавить();
			ЗаполнитьЗначенияСвойств(ФайлВыгрузки, Строка);
		КонецЦикла;
		
		ФайлВыгрузки.ЗакрытьФайл();
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Выгрузка в файл " + Объект.ИмяКаталогаВыгрузки + "\OUT_FILE.DBF завершена!");
		
	#КонецЕсли

КонецПроцедуры // КомандаВыгрузить()

#КонецОбласти

















