
//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
	ОбновитьПериод();
	
	ВосстановитьНастройкиНаСервере();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьНастройкиНаСервере();
	
КонецПроцедуры // ПередЗакрытием()

#КонецОбласти

#Область СохраняемыеНастройки

&НаСервере
// Процедура восстановления настроек.
//
Процедура ВосстановитьНастройкиНаСервере()
	
	СтруктураПараметров = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("ПараметрыВыгрузки_ВыгрузкаМосковскаяОбласть_Вариант2", "ПараметрыВыгрузки");
	
	// По умолчанию.
	ПользовательскаяСтруктураВыгружаемыхТаблиц = Новый Структура;
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		СтруктураПараметров.Свойство("ИмяКаталогаВыгрузки",      Объект.ИмяКаталогаВыгрузки);
		СтруктураПараметров.Свойство("КодОрганизации",           Объект.КодОрганизации);
		СтруктураПараметров.Свойство("МосковскаяОбласть_Здание", Объект.МосковскаяОбласть_Здание);
		
		// Таблица соответствия видов услуг в ОСЗН и услуг в базе.
		// Является буферной: нигде не отображается, элементы добавляются при добавлении соответствий на форме настроек,
		// используется для установления соответствий в запросах.
		врТаблицаУслуг = Неопределено;
		СтруктураПараметров.Свойство("МосковскаяОбласть2_СоответствиеВидовУслуг", врТаблицаУслуг);
		Если врТаблицаУслуг <> Неопределено И ТипЗнч(врТаблицаУслуг) = Тип("ТаблицаЗначений") Тогда
			
			// Удаление соответствий для неиспользуемых услуг.
			Отбор = Новый Структура("ВидУслугиВОСЗН, Суффикс", "Найм", "N");
			УдалитьСоответствияНеиспользуемыхУслуг(врТаблицаУслуг, Отбор);
			
			
			Отбор = Новый Структура("ВидУслугиВОСЗН, Суффикс", "Капитальный ремонт жилых помещений", "KR");
			УдалитьСоответствияНеиспользуемыхУслуг(врТаблицаУслуг, Отбор);
			
			Объект.МосковскаяОбласть2_СоответствиеВидовУслуг.Загрузить(врТаблицаУслуг);
		КонецЕсли;
		
		// Таблица соответствия видов благоустройств.
		врТаблицаБлагоустройств = Новый ТаблицаЗначений;
		СтруктураПараметров.Свойство("МосковскаяОбласть2_СоответствиеВидовБлагоустройств", врТаблицаБлагоустройств);
		Если врТаблицаБлагоустройств <> Неопределено И ТипЗнч(врТаблицаБлагоустройств) = Тип("ТаблицаЗначений") Тогда
			Объект.МосковскаяОбласть2_СоответствиеВидовБлагоустройств.Загрузить(врТаблицаБлагоустройств);
		Иначе
			ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
			ОбработкаОбъект.ЗаполнитьТаблицуБлагоустройств();
			ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
		КонецЕсли;
		
		СтруктураПараметров.Свойство("ВыводЛицевыхСчетов", Объект.ВыводЛицевыхСчетов);
		Если Объект.ВыводЛицевыхСчетов = Неопределено Или ПустаяСтрока(Объект.ВыводЛицевыхСчетов) Тогда
			// По умолчанию.
			Объект.ВыводЛицевыхСчетов = "ЦифрыНаименования";
		КонецЕсли;
		
		СтруктураПараметров.Свойство("ВыводитьЛьготников", Объект.ВыводитьЛьготников);
		Если Объект.ВыводитьЛьготников = Неопределено Тогда
			// По умолчанию.
			Объект.ВыводитьЛьготников = Ложь;
		КонецЕсли;
		
		СтруктураПараметров.Свойство("СпособРасчетаТарифа", Объект.СпособРасчетаТарифа);
		Если Объект.СпособРасчетаТарифа = Неопределено Или ПустаяСтрока(Объект.СпособРасчетаТарифа) Тогда
			// По умолчанию.
			Объект.СпособРасчетаТарифа = "максимальный";
		КонецЕсли;
		
		СтруктураПараметров.Свойство("МосковскаяОбласть_Этаж", Объект.МосковскаяОбласть_Этаж);
		Если Объект.МосковскаяОбласть_Этаж = Неопределено Или ПустаяСтрока(Объект.МосковскаяОбласть_Этаж) Тогда
			// По умолчанию.
			Объект.МосковскаяОбласть_Этаж = "Помещение";
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ПользовательскаяСтруктураВыгружаемыхТаблиц") И 
			ТипЗнч(СтруктураПараметров.ПользовательскаяСтруктураВыгружаемыхТаблиц) = Тип("Структура") Тогда
			
			СтруктураПараметров.Свойство("ПользовательскаяСтруктураВыгружаемыхТаблиц", ПользовательскаяСтруктураВыгружаемыхТаблиц);
		КонецЕсли;
		
	Иначе
		
		// Начальное заполнение настроек.
		Объект.ВыводЛицевыхСчетов     = "ЦифрыНаименования";
		Объект.ВыводитьЛьготников     = Ложь;
		Объект.СпособРасчетаТарифа    = "максимальный";
		Объект.МосковскаяОбласть_Этаж = "Помещение";
		
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		ОбработкаОбъект.ЗаполнитьТаблицуБлагоустройств();
		ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
		
	КонецЕсли;
	
	ПрефиксВыгружаемыхТаблиц = "МосковскаяОбласть2_Таблица";
	
	// Определение структуры, в которой соответствия имен полей выгружаемых файлов всегда равны именам полей выгружаемых табличных частей.
	// Данные всякий раз считываются из метаданных обработки, вследствии чего по определению актуальны.
	БазоваяСтруктураВыгружаемыхТаблиц = ПолучитьБазовуюСтруктуруВыгружаемыхТаблиц(РеквизитФормыВЗначение("Объект"), ПрефиксВыгружаемыхТаблиц);
	
	// Базовая структура выгружаемых таблиц, заполненная пользовательскими именами полей выгружаемых файлов.
	СтруктураВыгружаемыхТаблиц = ПолучитьСтруктуруВыгружаемыхТаблиц(БазоваяСтруктураВыгружаемыхТаблиц, ПользовательскаяСтруктураВыгружаемыхТаблиц);
	
	АдресСтруктурыВыгружаемыхТаблиц = ПоместитьВоВременноеХранилище(СтруктураВыгружаемыхТаблиц, Новый УникальныйИдентификатор);
	
КонецПроцедуры // ВосстановитьНастройкиНаСервере()

&НаСервере
// Процедура сохранения настроек.
//
Процедура СохранитьНастройкиНаСервере()
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("КодОрганизации",                                     Объект.КодОрганизации);
	СтруктураПараметров.Вставить("ИмяКаталогаВыгрузки",                                Объект.ИмяКаталогаВыгрузки);
	СтруктураПараметров.Вставить("МосковскаяОбласть_Здание",                           Объект.МосковскаяОбласть_Здание);
	
	СтруктураПараметров.Вставить("МосковскаяОбласть2_СоответствиеВидовУслуг",          Объект.МосковскаяОбласть2_СоответствиеВидовУслуг.Выгрузить());
	СтруктураПараметров.Вставить("МосковскаяОбласть2_СоответствиеВидовБлагоустройств", Объект.МосковскаяОбласть2_СоответствиеВидовБлагоустройств.Выгрузить());
	
	СтруктураПараметров.Вставить("ВыводитьЛьготников",                                 Объект.ВыводитьЛьготников);
	СтруктураПараметров.Вставить("ВыводЛицевыхСчетов",                                 Объект.ВыводЛицевыхСчетов);
	СтруктураПараметров.Вставить("СпособРасчетаТарифа",                                Объект.СпособРасчетаТарифа);
	СтруктураПараметров.Вставить("МосковскаяОбласть_Этаж",                             Объект.МосковскаяОбласть_Этаж);
	
	СтруктураПараметров.Вставить("ПользовательскаяСтруктураВыгружаемыхТаблиц",         ПолучитьИзВременногоХранилища(АдресСтруктурыВыгружаемыхТаблиц));
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("ПараметрыВыгрузки_ВыгрузкаМосковскаяОбласть_Вариант2", "ПараметрыВыгрузки", СтруктураПараметров);
	
КонецПроцедуры // СохранитьНастройкиНаСервере()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ПериодСтрокой

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Модифицированность);
	
КонецПроцедуры // ПериодСтрокойПриИзменении()

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры // ПериодСтрокойНачалоВыбора()

&НаКлиенте
// Обработчик события "Регулирование" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Направление, Модифицированность);
	
КонецПроцедуры // ПериодСтрокойРегулирование()

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодСтрокойАвтоПодбор()

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодСтрокойОкончаниеВводаТекста()

&НаСервере
// Изменяет период на форме выгрузки.
//
// Параметры:
//  Период - Дата - устанавливаемый период.
//
Процедура ОбновитьПериод(Период = Неопределено)
	
	Объект.Период = ?(Период = Неопределено, УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("РабочаяДата"), КонецМесяца(Период));
	
	Если Объект.Период = '00010101' Тогда
		Объект.Период = ТекущаяДата();
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры // ОбновитьПериод()

#КонецОбласти

#Область КаталогВыгрузки

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ИмяФайлаЗагрузки".
//
Процедура ИмяКаталогаВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла                             = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Заголовок                   = "Выбор каталога файлов";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ВыборФайлаЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		
		Объект.ИмяКаталогаВыгрузки = ВыбранныеФайлы[0];
		
	КонецЕсли;
	
КонецПроцедуры // ИмяФайлаВыгрузкиНачалоВыбора()

&НаКлиенте
// Обработчик события "Открытие" поля "ИмяФайлаЗагрузки".
//
Процедура ИмяКаталогаВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Файл = Новый Файл(Объект.ИмяКаталогаВыгрузки);
	
	Файл.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ПроверкаНаСуществованиеФайлаЗавершение", ЭтотОбъект, Новый Структура("Файл", Файл)));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаНаСуществованиеФайлаЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	Файл = ДополнительныеПараметры.Файл;
	
	
	Если Существует Тогда
		Файл.НачатьПроверкуЭтоКаталог(Новый ОписаниеОповещения("ПроверкаНаКаталогЗавершение", ЭтотОбъект));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверкаНаКаталогЗавершение(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	
	Если ЭтоКаталог Тогда
		УПЖКХ_ОбщегоНазначенияКлиент.ОткрытьСтраницуВБраузере(Объект.ИмяКаталогаВыгрузки);
	КонецЕсли;

КонецПроцедуры // ИмяФайлаВыгрузкиОткрытие()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область Настройка

////////////////////////
// Настройка

&НаКлиенте
// Обработчик команды "КомандаНастройка".
//
Процедура КомандаНастройка(Команда)
	
	АдресНастроекВХранилище = ПоместитьНастройкиВХранилище();
	
	// Передаем заполняемые настройки в параметры открытия формы настроек.
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("АдресНастроекВХранилище", АдресНастроекВХранилище);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаНастройкаЗавершение", ЭтаФорма);
	
	ОткрытьФорму("Обработка.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты.Форма.МосковскаяОбласть_ФормаНастройка2", ПараметрыОткрытияФормы, ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры // КомандаНастройка()

&НаКлиенте
// Обработчик результата опроса команды "КомандаНастройка".
//
Процедура КомандаНастройкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ПолучитьНастройкиИзХранилища(Результат);
	КонецЕсли;
	
КонецПроцедуры // КомандаНастройкаЗавершение()

////////////////////////
// Работа с временным хранилищем

&НаСервере
// Помещает данные во временное хранилище для передачи их в форму настройки.
//
// Возвращаемое значение:
//  Строка - адрес настроек в хранилище.
//
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("МосковскаяОбласть2_СоответствиеВидовУслуг",          Объект.МосковскаяОбласть2_СоответствиеВидовУслуг.Выгрузить());
	СтруктураПараметров.Вставить("МосковскаяОбласть2_СоответствиеВидовБлагоустройств", Объект.МосковскаяОбласть2_СоответствиеВидовБлагоустройств.Выгрузить());
	
	СтруктураПараметров.Вставить("ВыводЛицевыхСчетов",                                 Объект.ВыводЛицевыхСчетов);
	СтруктураПараметров.Вставить("ВыводитьЛьготников",                                 Объект.ВыводитьЛьготников);
	СтруктураПараметров.Вставить("СпособРасчетаТарифа",                                Объект.СпособРасчетаТарифа);
	СтруктураПараметров.Вставить("МосковскаяОбласть_Этаж",                             Объект.МосковскаяОбласть_Этаж);
	
	СтруктураПараметров.Вставить("ПрефиксВыгружаемыхТаблиц",                           ПрефиксВыгружаемыхТаблиц);
	СтруктураПараметров.Вставить("АдресСтруктурыВыгружаемыхТаблиц",                    АдресСтруктурыВыгружаемыхТаблиц);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураПараметров, Новый УникальныйИдентификатор);
	
КонецФункции // ПоместитьДанныеВХранилище()

&НаСервере
// Получает таблицу услуг из временного хранилища.
//
Процедура ПолучитьНастройкиИзХранилища(АдресНастроекВХранилище)
	
	СтруктураПараметров = ПолучитьИзВременногоХранилища(АдресНастроекВХранилище);
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		врТаблицаУслуг = Неопределено;
		СтруктураПараметров.Свойство("МосковскаяОбласть2_СоответствиеВидовУслуг", врТаблицаУслуг);
		Если врТаблицаУслуг <> Неопределено И ТипЗнч(врТаблицаУслуг) = Тип("ТаблицаЗначений") Тогда
			Объект.МосковскаяОбласть2_СоответствиеВидовУслуг.Загрузить(врТаблицаУслуг);
		КонецЕсли;
		
		врТаблицаБлагоустройств = Новый ТаблицаЗначений;
		СтруктураПараметров.Свойство("МосковскаяОбласть2_СоответствиеВидовБлагоустройств", врТаблицаБлагоустройств);
		Если врТаблицаБлагоустройств <> Неопределено И ТипЗнч(врТаблицаБлагоустройств) = Тип("ТаблицаЗначений") Тогда
			Объект.МосковскаяОбласть2_СоответствиеВидовБлагоустройств.Загрузить(врТаблицаБлагоустройств);
		Иначе
			ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
			ОбработкаОбъект.ЗаполнитьТаблицуБлагоустройств();
			ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
		КонецЕсли;
		
		СтруктураПараметров.Свойство("ВыводЛицевыхСчетов", Объект.ВыводЛицевыхСчетов);
		Если Объект.ВыводЛицевыхСчетов = Неопределено Или ПустаяСтрока(Объект.ВыводЛицевыхСчетов) Тогда
			// По умолчанию.
			Объект.ВыводЛицевыхСчетов = "ЦифрыНаименования";
		КонецЕсли;
		
		СтруктураПараметров.Свойство("ВыводитьЛьготников", Объект.ВыводитьЛьготников);
		Если Объект.ВыводитьЛьготников = Неопределено Тогда
			// По умолчанию.
			Объект.ВыводитьЛьготников = Ложь;
		КонецЕсли;
		
		СтруктураПараметров.Свойство("СпособРасчетаТарифа", Объект.СпособРасчетаТарифа);
		Если Объект.СпособРасчетаТарифа = Неопределено Или ПустаяСтрока(Объект.СпособРасчетаТарифа) Тогда
			// По умолчанию.
			Объект.СпособРасчетаТарифа = "максимальный";
		КонецЕсли;
		
		СтруктураПараметров.Свойство("МосковскаяОбласть_Этаж", Объект.МосковскаяОбласть_Этаж);
		Если Объект.МосковскаяОбласть_Этаж = Неопределено Или ПустаяСтрока(Объект.МосковскаяОбласть_Этаж) Тогда
			// По умолчанию.
			Объект.МосковскаяОбласть_Этаж = "Помещение";
		КонецЕсли;
		
		СтруктураПараметров.Свойство("АдресСтруктурыВыгружаемыхТаблиц", АдресСтруктурыВыгружаемыхТаблиц);
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьНастройкиИзХранилища()

#КонецОбласти

#Область Инструкция

&НаКлиенте
// Обработчик команды "КомандаСправочнаяИнформация".
//
Процедура КомандаСправочнаяИнформация(Команда)
	
	ОткрытьСправкуФормы();
	
КонецПроцедуры // КомандаСправочнаяИнформация()

#КонецОбласти

////////////////////////
// Заполнение таблиц выгрузки

#Область ТаблицаНачисленийЗаполнить

&НаКлиенте
// Обработчик команды "КомандаТаблицаНачисленийЗаполнить".
//
Процедура КомандаТаблицаНачисленийЗаполнить(Команда)
	
	ТекстОшибки = ПроверкаНеобходимыхДанныхДляЗагрузки();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если Объект.МосковскаяОбласть2_ТаблицаНачислений.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаТаблицаНачисленийЗаполнитьЗавершение", ЭтаФорма);
		
		ТекстВопроса = "Перед заполением табличная часть будет очищена. Заполнить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		КомандаТаблицаНачисленийЗаполнитьПродолжение();
	КонецЕсли;
	
КонецПроцедуры // КомандаТаблицаНачисленийЗаполнить()

&НаКлиенте
// Обработчик результата вопроса команды "КомандаТаблицаНачисленийЗаполнить".
//
Процедура КомандаТаблицаНачисленийЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		КомандаТаблицаНачисленийЗаполнитьПродолжение();
	КонецЕсли;
	
КонецПроцедуры // КомандаТаблицаНачисленийЗаполнитьЗавершение()

&НаКлиенте
// Продолжение общей части обработчика команды "КомандаТаблицаНачисленийЗаполнить".
//
Процедура КомандаТаблицаНачисленийЗаполнитьПродолжение()
	
	ЗаполнитьТаблицуНачислений();
	
	Элементы.КП_ТаблицаНачисленийВыгрузить.Доступность = Истина;
	
КонецПроцедуры // КомандаТаблицаНачисленийЗаполнитьПродолжение()

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
	////////////////////////
	// "ТаблицаНачислений"
	
	// Заполняем таблицу начислений.
	//
	Процедура ЗаполнитьТаблицуНачислений()
		
		Объект.МосковскаяОбласть2_ТаблицаНачислений.Очистить();
		
		// Получаем таблицу лицевых счетов.
		СведенияОЛицевыхСчетах = ПолучитьТаблицуОткрытыхЛицевыхСчетов();
		
		ТаблицаЛС = СведенияОЛицевыхСчетах.Скопировать(,"ЛицевойСчет, Помещение, Здание, КоличествоЛСВПомещении");
		
		СтруктураВидовУслугДляПоиска = ПодготовитьСтруктуруСТаблицамиВидовУслуг();
		
		ТаблицаНачисленийДляСписка_1 = ПолучитьТаблицуНачисленийДляСписка_1(ТаблицаЛС, СтруктураВидовУслугДляПоиска.ТаблицаВидовУслугДляСписка1);
		ТаблицаНачисленийДляСписка_2 = ПолучитьТаблицуНачисленийДляСписка_2(ТаблицаЛС, СтруктураВидовУслугДляПоиска.ТаблицаВидовУслугДляСписка2);
		ТаблицаНачисленийДляСписка_3 = ПолучитьТаблицуНачисленийДляСписка_3(ТаблицаЛС, СтруктураВидовУслугДляПоиска.ТаблицаВидовУслугДляСписка3);
		
		ТаблицаДействующихСчетчиковДляСписка_2 = ПолучитьТаблицуДействующихСчетчиковДляСписка_2(ТаблицаЛС, СтруктураВидовУслугДляПоиска.ТаблицаВидовУслугДляСписка2);
		
		// Заполняем таблицу с состояниями видов благоустройств в помещениях, в которых открыты лицевые счета.
		СведенияОБлагоустройствах = ПолучитьСведенияОБлагоустройствахЛицевыхСчетов(ТаблицаЛС);
		
		СведенияОПериодыПроживанияГраждан = ПолучитьСведенияОПрисутствияхГраждан(ТаблицаЛС);
		
		Если СведенияОЛицевыхСчетах.Количество() > 0 Тогда
			
			ЗаполненыСведенияОПроживающих = ?(СведенияОПериодыПроживанияГраждан.Количество() > 0, Истина, Ложь);
			
			ТекЗдание        = Справочники.КВП_Здания.ПустаяСсылка();
			АдресЗдания      = "";
			
			Для Каждого Строка Из СведенияОЛицевыхСчетах Цикл
				
				ОтборЛицевойСчет = Новый Структура("ЛицевойСчет", Строка.ЛицевойСчет);
				
				НоваяСтрока = Объект.МосковскаяОбласть2_ТаблицаНачислений.Добавить();
				
				НоваяСтрока.ЛицевойСчет = Строка.ЛицевойСчет;
				
				НоваяСтрока.KodOrg  = Формат(Объект.КодОрганизации, "ЧГ=0");
				НоваяСтрока.NazvOrg = Строка(Объект.Организация);
				НоваяСтрока.God     = Формат(Объект.Период, "ДФ=yyyy");
				НоваяСтрока.Mes     = Формат(Объект.Период, "ДФ=MM");
				НоваяСтрока.NumLs   = Строка[Объект.ВыводЛицевыхСчетов];
				
				НоваяСтрока.Sob      = Строка.ОбщаяПлощадь;
				НоваяСтрока.TipZF    = Строка.ВидСобственности;
				НоваяСтрока.KodTipZF = Строка.ВидСобственности;
				НоваяСтрока.KolCh    = Строка.КоличествоЗарегистрированных;
				НоваяСтрока.FIO      = Строка(Строка.ОтветственныйВладелец);
				НоваяСтрока.Dolg     = Строка.НачальноеСальдо;
				
				Если ТекЗдание <> Строка.Здание Тогда
					
					АдресЗдания       = СформироватьАдресДляВывода(Строка);
					НоваяСтрока.Adres = АдресЗдания + ?(ПустаяСтрока(АдресЗдания), "", ", ") + Строка(Строка.Помещение);
					ТекЗдание         = Строка.Здание;
					
				ИначеЕсли ТекЗдание = Строка.Здание Тогда
					
					НоваяСтрока.Adres = АдресЗдания + ?(ПустаяСтрока(АдресЗдания), "", ", ") + Строка(Строка.Помещение);
					
				КонецЕсли;
				
				Если ТаблицаНачисленийДляСписка_1.Количество() > 0 Тогда
					
					НайденныеСтроки = ТаблицаНачисленийДляСписка_1.НайтиСтроки(ОтборЛицевойСчет);
					Если НайденныеСтроки.Количество() > 0 Тогда
						
						Для Каждого СтрокаНачислений Из НайденныеСтроки Цикл
							
							НоваяСтрока["Tar" + СтрокаНачислений.Суффикс] = СтрокаНачислений.Тариф;
							
							Если СтрокаНачислений.Суффикс = "TKO" Тогда
								НоваяСтрока["Sum" + СтрокаНачислений.Суффикс] = СтрокаНачислений.Начислено;
							Иначе
								НоваяСтрока["Nac" + СтрокаНачислений.Суффикс] = СтрокаНачислений.Начислено;
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если ТаблицаНачисленийДляСписка_2.Количество() > 0 Тогда
					
					НайденныеСтроки = ТаблицаНачисленийДляСписка_2.НайтиСтроки(ОтборЛицевойСчет);
					Если НайденныеСтроки.Количество() > 0 Тогда
						
						Для Каждого СтрокаНачислений Из НайденныеСтроки Цикл
							
							НоваяСтрока["Tar" + СтрокаНачислений.Суффикс]  = СтрокаНачислений.Тариф;
							НоваяСтрока["Nac" + СтрокаНачислений.Суффикс]  = СтрокаНачислений.Начислено;
							НоваяСтрока["Norm" + СтрокаНачислений.Суффикс] = СтрокаНачислений.РазмерНормы;
							
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если ТаблицаНачисленийДляСписка_3.Количество() > 0 Тогда
					
					НайденныеСтроки = ТаблицаНачисленийДляСписка_3.НайтиСтроки(ОтборЛицевойСчет);
					Если НайденныеСтроки.Количество() > 0 Тогда
						
						Для Каждого СтрокаНачислений Из НайденныеСтроки Цикл
							
							НоваяСтрока["Tar" + СтрокаНачислений.Суффикс]  = СтрокаНачислений.Тариф;
							НоваяСтрока["Nac" + СтрокаНачислений.Суффикс]  = СтрокаНачислений.Начислено;
							НоваяСтрока["Norm" + СтрокаНачислений.Суффикс] = СтрокаНачислений.РазмерНормы;
							НоваяСтрока["KolFml"]                          = СтрокаНачислений.КоличествоСОбщимСчетчиком;
							
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
				Если ТаблицаДействующихСчетчиковДляСписка_2.Количество() > 0 Тогда
					
					НайденныеСтроки = ТаблицаДействующихСчетчиковДляСписка_2.НайтиСтроки(ОтборЛицевойСчет);
					Если НайденныеСтроки.Количество() > 0 Тогда
						
						Для Каждого СтрокаНачислений Из НайденныеСтроки Цикл
							НоваяСтрока["Sch" + СтрокаНачислений.Суффикс]  = СтрокаНачислений.НаличиеСчетчика;
							
							Если СтрокаНачислений.Суффикс = "Gaz" Тогда
								НоваяСтрока["KolFmlGaz"] = СтрокаНачислений.КоличествоСОбщимСчетчикомГаз;
							КонецЕсли;
							
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЕсли;
				
				НайденныеСведенияОБлагоустройствахЛС = СведенияОБлагоустройствах.НайтиСтроки(ОтборЛицевойСчет);
				Для Каждого ТекВБ Из НайденныеСведенияОБлагоустройствахЛС Цикл
					НоваяСтрока[ТекВБ.Суффикс] = ТекВБ.ЗначениеБлагоустройства;
				КонецЦикла;
				
				Если ЗаполненыСведенияОПроживающих Тогда
					НайденныеСведенияОПроживающихЛС = СведенияОПериодыПроживанияГраждан.НайтиСтроки(ОтборЛицевойСчет);
					Для Каждого ТекСеведенияОЛС Из НайденныеСведенияОПроживающихЛС Цикл
						НоваяСтрока.KNotKU   = ТекСеведенияОЛС.КолвоОтсутствующих;
					КонецЦикла;
				КонецЕсли;
				
				НоваяСтрока.KOMNAT   = ?(Строка.КоличествоКомнат = 0, 1, Строка.КоличествоКомнат);
				НоваяСтрока.NumFloor = ?(Строка["Этаж_" + Объект.МосковскаяОбласть_Этаж] = 0, 1, Строка["Этаж_" + Объект.МосковскаяОбласть_Этаж]);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецПроцедуры // ЗаполнитьТаблицуНачислений()
	
	/////////////////////
	// Услуги
	
	// Определяет лицевые счета, которые не закрыты на конец периода выполнения обработки.
	//
	Функция ПолучитьТаблицуОткрытыхЛицевыхСчетов()
		
		Запрос = Новый Запрос;
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		МассивВидовКонтактнойИнформации = Новый Массив;
		МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
		
		Запрос.УстановитьПараметр("ДатаКон",     КонецМесяца(Объект.Период));
		Запрос.УстановитьПараметр("ДатаНач",     НачалоМесяца(Объект.Период));
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		
		Запрос.УстановитьПараметр("ЗданиеЭтоГруппа", Объект.МосковскаяОбласть_Здание.ЭтоГруппа);
		Запрос.УстановитьПараметр("Здание",          Объект.МосковскаяОбласть_Здание);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентов.Ссылка КАК Договор
		|ПОМЕСТИТЬ втДоговорыКонтрагентов
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Организация = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет,
		|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Договор
		|ПОМЕСТИТЬ втСведенияДляВзаиморасчетовПоЛС
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(
		|			&ДатаКон,
		|			ВЫБОР
		|				КОГДА &ЗданиеЭтоГруппа
		|					ТОГДА ЛицевойСчет.Адрес.Владелец В ИЕРАРХИИ (&Здание)
		|				КОГДА &Здание <> ЗНАЧЕНИЕ(Справочник.КВП_Здания.ПустаяСсылка)
		|					ТОГДА ЛицевойСчет.Адрес.Владелец = &Здание
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	втСведенияДляВзаиморасчетовПоЛС.ЛицевойСчет
		|ПОМЕСТИТЬ втЛицевыеСчетаОрганизации
		|ИЗ
		|	втДоговорыКонтрагентов КАК втДоговорыКонтрагентов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСведенияДляВзаиморасчетовПоЛС КАК втСведенияДляВзаиморасчетовПоЛС
		|		ПО втДоговорыКонтрагентов.Договор = втСведенияДляВзаиморасчетовПоЛС.Договор";
		Запрос.Выполнить();
		
		//ПроверитьВременнуюТаблицу(Запрос.МенеджерВременныхТаблиц, "втСведенияДляВзаиморасчетовПоЛС", "ЛицевойСчет")
		
		Если Объект.ВыводитьЛьготников Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий.Владелец КАК ЛицевойСчет,
			|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий.Владелец.Адрес КАК Помещение
			|ПОМЕСТИТЬ втЛицевыеСчетаЛьготников
			|ИЗ
			|	РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(
			|			&ДатаКон,
			|			Проживающий.Владелец В
			|					(ВЫБРАТЬ
			|						втЛицевыеСчетаОрганизации.ЛицевойСчет
			|					ИЗ
			|						втЛицевыеСчетаОрганизации КАК втЛицевыеСчетаОрганизации)
			|				И ДатаИзменения <= &ДатаКон) КАК КВП_НазначенныеЛьготыСрезПоследних
			|ГДЕ
			|	КВП_НазначенныеЛьготыСрезПоследних.Действие";
			
		Иначе
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
			|	КВП_ЛицевыеСчетаСрезПоследних.Объект КАК Помещение
			|ПОМЕСТИТЬ втЛицевыеСчетаЛьготников
			|ИЗ
			|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
			|			&ДатаКон,
			|			ЛицевойСчет В
			|				(ВЫБРАТЬ
			|					втЛицевыеСчетаОрганизации.ЛицевойСчет
			|				ИЗ
			|					втЛицевыеСчетаОрганизации КАК втЛицевыеСчетаОрганизации)) КАК КВП_ЛицевыеСчетаСрезПоследних
			|ГДЕ
			|	КВП_ЛицевыеСчетаСрезПоследних.Действует";
			
		КонецЕсли;
		Запрос.Выполнить();
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	втЛицевыеСчетаЛьготников.Помещение,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втЛицевыеСчетаЛьготников.ЛицевойСчет) КАК КоличествоЛСВПомещении
		|ПОМЕСТИТЬ втКоличествоЛСВПомещении
		|ИЗ
		|	втЛицевыеСчетаЛьготников КАК втЛицевыеСчетаЛьготников
		|
		|СГРУППИРОВАТЬ ПО
		|	втЛицевыеСчетаЛьготников.Помещение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЛицевыеСчетаЛьготников.ЛицевойСчет,
		|	втКоличествоЛСВПомещении.Помещение,
		|	втКоличествоЛСВПомещении.КоличествоЛСВПомещении
		|ПОМЕСТИТЬ втЛицевыеСчета
		|ИЗ
		|	втЛицевыеСчетаЛьготников КАК втЛицевыеСчетаЛьготников
		|		ЛЕВОЕ СОЕДИНЕНИЕ втКоличествоЛСВПомещении КАК втКоличествоЛСВПомещении
		|		ПО втЛицевыеСчетаЛьготников.Помещение = втКоличествоЛСВПомещении.Помещение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.КоличествоЗарегистрированных КАК КоличествоЗарегистрированных,
		|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.ЛицевойСчет
		|ПОМЕСТИТЬ втУчетКоличестваЖильцов
		|ИЗ
		|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(
		|			&ДатаКон,
		|			ЛицевойСчет В
		|				(ВЫБРАТЬ
		|					втЛицевыеСчета.ЛицевойСчет
		|				ИЗ
		|					втЛицевыеСчета КАК втЛицевыеСчета)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетам
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец) КАК КоличествоЗарегистрированных
		|ПОМЕСТИТЬ КоличествоИзСведений
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
		|			&ДатаКон,
		|			ДатаИзменения <= &ДатаКон
		|				И ЛицевойСчет В
		|					(ВЫБРАТЬ
		|						втЛицевыеСчета.ЛицевойСчет
		|					ИЗ
		|						втЛицевыеСчета КАК втЛицевыеСчета)) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
		|ГДЕ
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
		|
		|СГРУППИРОВАТЬ ПО
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами
		|			ТОГДА ЕСТЬNULL(втУчетКоличестваЖильцов.КоличествоЗарегистрированных, 0)
		|		ИНАЧЕ ЕСТЬNULL(КоличествоИзСведений.КоличествоЗарегистрированных, 0)
		|	КОНЕЦ КАК КоличествоЗарегистрированных,
		|	ВЫБОР
		|		КОГДА Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами
		|			ТОГДА втУчетКоличестваЖильцов.ЛицевойСчет
		|		ИНАЧЕ КоличествоИзСведений.ЛицевойСчет
		|	КОНЕЦ КАК ЛицевойСчет
		|ПОМЕСТИТЬ врТаблицаКоличеств
		|ИЗ
		|	КоличествоИзСведений КАК КоличествоИзСведений
		|		ПОЛНОЕ СОЕДИНЕНИЕ втУчетКоличестваЖильцов КАК втУчетКоличестваЖильцов
		|		ПО КоличествоИзСведений.ЛицевойСчет = втУчетКоличестваЖильцов.ЛицевойСчет,
		|	Константы КАК Константы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение,
		|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности
		|ПОМЕСТИТЬ втСобственностьНаПомещения
		|ИЗ
		|	РегистрСведений.УПЖКХ_СобственностьНаПомещения.СрезПоследних(
		|			&ДатаКон,
		|			Помещение В
		|				(ВЫБРАТЬ
		|					втЛицевыеСчета.Помещение
		|				ИЗ
		|					втЛицевыеСчета КАК втЛицевыеСчета)) КАК УПЖКХ_СобственностьНаПомещенияСрезПоследних
		|ГДЕ
		|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Действует
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет,
		|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель,
		|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель
		|ПОМЕСТИТЬ втРазмерыДолейЛС
		|ИЗ
		|	РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(
		|			&ДатаКон,
		|			ЛицевойСчет В
		|				(ВЫБРАТЬ
		|					втЛицевыеСчета.ЛицевойСчет
		|				ИЗ
		|					втЛицевыеСчета КАК втЛицевыеСчета)) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_ПлощадьПомещенияСрезПоследних.Объект,
		|	КВП_ПлощадьПомещенияСрезПоследних.Площадь
		|ПОМЕСТИТЬ втПлощадьПомещений
		|ИЗ
		|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
		|			&ДатаКон,
		|			Объект В
		|					(ВЫБРАТЬ
		|						втЛицевыеСчета.Помещение
		|					ИЗ
		|						втЛицевыеСчета КАК втЛицевыеСчета)
		|				И ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)) КАК КВП_ПлощадьПомещенияСрезПоследних";
		Запрос.Выполнить();
		
		ЗапросПоЗданиям = Новый Запрос;
		ЗапросПоЗданиям.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
		ЗапросПоЗданиям.Текст = 
		"ВЫБРАТЬ
		|	втЛицевыеСчета.Помещение.Владелец КАК Объект
		|ИЗ
		|	втЛицевыеСчета КАК втЛицевыеСчета
		|
		|СГРУППИРОВАТЬ ПО
		|	втЛицевыеСчета.Помещение.Владелец";
		
		МассивОбъектов = ЗапросПоЗданиям.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
		
		// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
		УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	втЛицевыеСчета.ЛицевойСчет,
		|	втЛицевыеСчета.Помещение,
		|	ВЫБОР
		|		КОГДА НЕ ЕСТЬNULL(втРазмерыДолейЛС.ДоляЗнаменатель, 0) = 0
		|			ТОГДА ВЫБОР
		|					КОГДА НЕ ЕСТЬNULL(втРазмерыДолейЛС.ДоляЧислитель, 0) = 0
		|						ТОГДА втРазмерыДолейЛС.ДоляЧислитель / втРазмерыДолейЛС.ДоляЗнаменатель * ЕСТЬNULL(втПлощадьПомещений.Площадь, 0)
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ОбщаяПлощадь,
		|	ВЫБОР
		|		КОГДА НЕ ЕСТЬNULL(втСобственностьНаПомещения.ВидСобственности, 0) = 0
		|			ТОГДА ВЫБОР
		|					КОГДА втСобственностьНаПомещения.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Государственная)
		|						ТОГДА 7
		|					КОГДА втСобственностьНаПомещения.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Муниципальная)
		|						ТОГДА 1
		|					КОГДА втСобственностьНаПомещения.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Частная)
		|						ТОГДА 8
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ВидСобственности,
		|	ЕСТЬNULL(втКонтактнаяИнформация.Индекс, """") КАК Индекс,
		|	ЕСТЬNULL(втКонтактнаяИнформация.Регион, """") КАК Регион,
		|	ЕСТЬNULL(втКонтактнаяИнформация.Район, """") КАК Район,
		|	ЕСТЬNULL(втКонтактнаяИнформация.Город, """") КАК Город,
		|	ЕСТЬNULL(втКонтактнаяИнформация.НаселенныйПункт, """") КАК НаселенныйПункт,
		|	ЕСТЬNULL(втКонтактнаяИнформация.Улица, """") КАК Улица,
		|	ЕСТЬNULL(втКонтактнаяИнформация.Дом, """") КАК Дом,
		|	ЕСТЬNULL(втКонтактнаяИнформация.Корпус, """") КАК Корпус,
		|	втЛицевыеСчета.КоличествоЛСВПомещении
		|ПОМЕСТИТЬ втСведенияОЛС
		|ИЗ
		|	втЛицевыеСчета КАК втЛицевыеСчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ втРазмерыДолейЛС КАК втРазмерыДолейЛС
		|		ПО втЛицевыеСчета.ЛицевойСчет = втРазмерыДолейЛС.ЛицевойСчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПлощадьПомещений КАК втПлощадьПомещений
		|		ПО втЛицевыеСчета.Помещение = втПлощадьПомещений.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК втКонтактнаяИнформация
		|		ПО втЛицевыеСчета.Помещение.Владелец = втКонтактнаяИнформация.Объект
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСобственностьНаПомещения КАК втСобственностьНаПомещения
		|		ПО втЛицевыеСчета.Помещение = втСобственностьНаПомещения.Помещение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втСведенияОЛС.ЛицевойСчет,
		|	втСведенияОЛС.Помещение,
		|	втСведенияОЛС.ОбщаяПлощадь,
		|	втСведенияОЛС.ВидСобственности,
		|	втСведенияОЛС.Индекс,
		|	втСведенияОЛС.Регион,
		|	втСведенияОЛС.Район,
		|	втСведенияОЛС.Город,
		|	втСведенияОЛС.НаселенныйПункт,
		|	втСведенияОЛС.Улица,
		|	втСведенияОЛС.Дом,
		|	втСведенияОЛС.Корпус,
		|	ВЫБОР
		|		КОГДА НЕ ЕСТЬNULL(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток, 0) = 0
		|			ТОГДА ВЫБОР
		|					КОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток > 0
		|						ТОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НачальноеСальдо,
		|	втСведенияОЛС.КоличествоЛСВПомещении
		|ПОМЕСТИТЬ втНачислений
		|ИЗ
		|	втСведенияОЛС КАК втСведенияОЛС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
		|				&ДатаНач,
		|				Организация = &Организация
		|					И ЛицевойСчет В
		|						(ВЫБРАТЬ
		|							втСведенияОЛС.ЛицевойСчет
		|						ИЗ
		|							втСведенияОЛС КАК втСведенияОЛС)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
		|		ПО втСведенияОЛС.ЛицевойСчет = КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втНачислений.ЛицевойСчет,
		|	втНачислений.Помещение,
		|	втНачислений.ОбщаяПлощадь,
		|	втНачислений.ВидСобственности,
		|	втНачислений.Индекс,
		|	втНачислений.Регион,
		|	втНачислений.Район,
		|	втНачислений.Город,
		|	втНачислений.НаселенныйПункт,
		|	втНачислений.Улица,
		|	втНачислений.Дом,
		|	втНачислений.Корпус,
		|	втНачислений.НачальноеСальдо,
		|	втНачислений.КоличествоЛСВПомещении,
		|	ЕСТЬNULL(врТаблицаКоличеств.КоличествоЗарегистрированных, 0) КАК КоличествоЗарегистрированных
		|ПОМЕСТИТЬ втЛСсЗарегистрированными
		|ИЗ
		|	втНачислений КАК втНачислений
		|		ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаКоличеств КАК врТаблицаКоличеств
		|		ПО втНачислений.ЛицевойСчет = врТаблицаКоличеств.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.ЛицевойСчет,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.Комната) КАК КоличествоПривязанныхКомнат
		|ПОМЕСТИТЬ втПривязанныеКомнаты
		|ИЗ
		|	РегистрСведений.УПЖКХ_ПривязанныеКЛицевомуСчетуКомнаты.СрезПоследних(
		|			&ДатаКон,
		|			ЛицевойСчет В
		|				(ВЫБРАТЬ
		|					втСведенияОЛС.ЛицевойСчет
		|				ИЗ
		|					втСведенияОЛС КАК втСведенияОЛС)) КАК УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних
		|ГДЕ
		|	УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.Привязка
		|
		|СГРУППИРОВАТЬ ПО
		|	УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_Помещения.Родитель КАК Помещение,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_Помещения.Ссылка) КАК КоличествоДочернихКомнат
		|ПОМЕСТИТЬ втДочерниеКомнаты
		|ИЗ
		|	Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
		|ГДЕ
		|	УПЖКХ_Помещения.Родитель В
		|			(ВЫБРАТЬ
		|				втСведенияОЛС.Помещение
		|			ИЗ
		|				втСведенияОЛС КАК втСведенияОЛС)
		|
		|СГРУППИРОВАТЬ ПО
		|	УПЖКХ_Помещения.Родитель
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	втЛСсЗарегистрированными.ЛицевойСчет,
		|	УПЖКХ_Помещения.Этаж КАК Этаж_Помещение,
		|	ВЫБОР
		|		КОГДА КВП_Подъезды.Этажность = 0
		|			ТОГДА КВП_Здания.Этажей
		|		ИНАЧЕ КВП_Подъезды.Этажность
		|	КОНЕЦ КАК Этаж_Подъезд,
		|	КВП_Здания.Этажей КАК Этаж_Здание
		|ПОМЕСТИТЬ втЭтажи
		|ИЗ
		|	втЛСсЗарегистрированными КАК втЛСсЗарегистрированными
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КВП_Подъезды КАК КВП_Подъезды
		|			ПО УПЖКХ_Помещения.Подъезд = КВП_Подъезды.Ссылка
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КВП_Здания КАК КВП_Здания
		|			ПО УПЖКХ_Помещения.Владелец = КВП_Здания.Ссылка
		|		ПО втЛСсЗарегистрированными.Помещение = УПЖКХ_Помещения.Ссылка
		|;
		|
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЛСсЗарегистрированными.ЛицевойСчет КАК ЛицевойСчет,
		|	втЛСсЗарегистрированными.Помещение КАК Помещение,
		|	втЛСсЗарегистрированными.Помещение.Владелец КАК Здание,
		|	втЛСсЗарегистрированными.ОбщаяПлощадь,
		|	втЛСсЗарегистрированными.ВидСобственности,
		|	втЛСсЗарегистрированными.Индекс,
		|	втЛСсЗарегистрированными.Регион,
		|	втЛСсЗарегистрированными.Район,
		|	втЛСсЗарегистрированными.Город,
		|	втЛСсЗарегистрированными.НаселенныйПункт,
		|	втЛСсЗарегистрированными.Улица,
		|	втЛСсЗарегистрированными.Дом,
		|	втЛСсЗарегистрированными.Корпус,
		|	втЛСсЗарегистрированными.НачальноеСальдо,
		|	втЛСсЗарегистрированными.КоличествоЛСВПомещении,
		|	втЛСсЗарегистрированными.КоличествоЗарегистрированных,
		|	ЕСТЬNULL(УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец, ЗНАЧЕНИЕ(Справочник.УПЖКХ_Жильцы.ПустаяСсылка)) КАК ОтветственныйВладелец,
		|	втЛСсЗарегистрированными.ЛицевойСчет.Наименование КАК Наименование,
		|	втЛСсЗарегистрированными.ЛицевойСчет.Наименование КАК ЦифрыНаименования,
		|	втЛСсЗарегистрированными.ЛицевойСчет.Идентификатор КАК Идентификатор,
		|	ЕСТЬNULL(втПривязанныеКомнаты.КоличествоПривязанныхКомнат, ЕСТЬNULL(втДочерниеКомнаты.КоличествоДочернихКомнат, втЛСсЗарегистрированными.Помещение.КоличествоКомнат)) КАК КоличествоКомнат,
		|	ЕСТЬNULL(втЭтажи.Этаж_Помещение, 1) КАК Этаж_Помещение,
		|	ЕСТЬNULL(втЭтажи.Этаж_Подъезд, 1) КАК Этаж_Подъезд,
		|	ЕСТЬNULL(втЭтажи.Этаж_Здание, 1) КАК Этаж_Здание
		|ИЗ
		|	втЛСсЗарегистрированными КАК втЛСсЗарегистрированными
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(
		|				&ДатаКон,
		|				ЛицевойСчет В
		|					(ВЫБРАТЬ
		|						втЛицевыеСчета.ЛицевойСчет
		|					ИЗ
		|						втЛицевыеСчета КАК втЛицевыеСчета)) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
		|		ПО втЛСсЗарегистрированными.ЛицевойСчет = УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПривязанныеКомнаты КАК втПривязанныеКомнаты
		|		ПО втЛСсЗарегистрированными.ЛицевойСчет = втПривязанныеКомнаты.ЛицевойСчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ втДочерниеКомнаты КАК втДочерниеКомнаты
		|		ПО втЛСсЗарегистрированными.Помещение = втДочерниеКомнаты.Помещение
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЭтажи КАК втЭтажи
		|		ПО втЛСсЗарегистрированными.ЛицевойСчет = втЭтажи.ЛицевойСчет
		|
		|УПОРЯДОЧИТЬ ПО
		|	Здание,
		|	Помещение,
		|	ЛицевойСчет";
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		Если Объект.ВыводЛицевыхСчетов = "ЦифрыНаименования" Тогда
			
			Для Каждого Строка Из Результат Цикл
				Строка.ЦифрыНаименования = ПолучитьЦифровыеСимволыИзСтроки(Строка.ЦифрыНаименования);
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции // ПолучитьТаблицуОткрытыхЛицевыхСчетов()
	
	// Подготавливает структуру с таблицами для различных типов услуг.
	//
	Функция ПодготовитьСтруктуруСТаблицамиВидовУслуг()
		
		ТаблицаВидовУслугДляСписка1 = Новый ТаблицаЗначений;
		ТаблицаВидовУслугДляСписка1.Колонки.Добавить("Суффикс",                              УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(5));
		ТаблицаВидовУслугДляСписка1.Колонки.Добавить("УслугаВБазе",                          Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
		ТаблицаВидовУслугДляСписка1.Колонки.Добавить("Приоритет",                            УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(3, 0, ДопустимыйЗнак.Неотрицательный));
		ТаблицаВидовУслугДляСписка1.Колонки.Добавить("УчитыватьПриРасчетеТарифа",            Новый ОписаниеТипов("Булево"));
		ТаблицаВидовУслугДляСписка1.Колонки.Добавить("ИспользоватьНормировочныйКоэффициент", Новый ОписаниеТипов("Булево"));
		
		ТаблицаВидовУслугДляСписка2 = ТаблицаВидовУслугДляСписка1.СкопироватьКолонки();
		ТаблицаВидовУслугДляСписка3 = ТаблицаВидовУслугДляСписка1.СкопироватьКолонки();
		
		ОтборПоВидуОперации = Новый Структура;
		
		ОтборПоВидуОперации.Вставить("ВидОперации", 1);
		НайденныеСтроки = Объект.МосковскаяОбласть2_СоответствиеВидовУслуг.НайтиСтроки(ОтборПоВидуОперации);
		Для Каждого Строка Из НайденныеСтроки Цикл
			
			НоваяСтрока = ТаблицаВидовУслугДляСписка1.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
		КонецЦикла;
		ОтборПоВидуОперации.Очистить();
		
		ОтборПоВидуОперации.Вставить("ВидОперации", 2);
		НайденныеСтроки = Объект.МосковскаяОбласть2_СоответствиеВидовУслуг.НайтиСтроки(ОтборПоВидуОперации);
		Для Каждого Строка Из НайденныеСтроки Цикл
			
			НоваяСтрока = ТаблицаВидовУслугДляСписка2.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
		КонецЦикла;
		ОтборПоВидуОперации.Очистить();
		
		ОтборПоВидуОперации.Вставить("ВидОперации", 3);
		НайденныеСтроки = Объект.МосковскаяОбласть2_СоответствиеВидовУслуг.НайтиСтроки(ОтборПоВидуОперации);
		Для Каждого Строка Из НайденныеСтроки Цикл
			
			НоваяСтрока = ТаблицаВидовУслугДляСписка3.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
			
		КонецЦикла;
		ОтборПоВидуОперации.Очистить();
		
		СтруктураДляВозврата = Новый Структура;
		СтруктураДляВозврата.Вставить("ТаблицаВидовУслугДляСписка1", ТаблицаВидовУслугДляСписка1);
		СтруктураДляВозврата.Вставить("ТаблицаВидовУслугДляСписка2", ТаблицаВидовУслугДляСписка2);
		СтруктураДляВозврата.Вставить("ТаблицаВидовУслугДляСписка3", ТаблицаВидовУслугДляСписка3);
		
		Возврат СтруктураДляВозврата;
		
	КонецФункции // ПодготовитьСтруктуруСТаблицамиУслуг()
	
	// Формирует дерево начислений для услуг из списка1.
	//
	Функция ПолучитьТаблицуНачисленийДляСписка_1(ТаблицаЛС, ТаблицаВидовУслугДляСписка1)
		
		Запрос = Новый Запрос;
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		РасчитатьТаблицуНачислений(Запрос.МенеджерВременныхТаблиц, ТаблицаЛС, ТаблицаВидовУслугДляСписка1);
		СвернутьТарифы(Запрос.МенеджерВременныхТаблиц);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	втБезТарифов.ЛицевойСчет КАК ЛицевойСчет,
		|	втБезТарифов.Суффикс,
		|	ЕСТЬNULL(втИтоговыйТариф.Тариф, 0) КАК Тариф,
		|	втБезТарифов.Начислено
		|ИЗ
		|	втБезТарифов КАК втБезТарифов
		|		ЛЕВОЕ СОЕДИНЕНИЕ втИтоговыйТариф КАК втИтоговыйТариф
		|		ПО втБезТарифов.ЛицевойСчет = втИтоговыйТариф.ЛицевойСчет
		|			И втБезТарифов.Суффикс = втИтоговыйТариф.Суффикс
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЛицевойСчет";
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		Возврат Результат;
		
	КонецФункции // ПолучитьТаблицуНачисленийДляСписка1()
	
	// Формирует дерево начислений для услуг из списка2.
	//
	Функция ПолучитьТаблицуНачисленийДляСписка_2(ТаблицаЛС, ТаблицаВидовУслугДляСписка2)
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ДатаКон", КонецМесяца(Объект.Период));
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		РасчитатьТаблицуНачислений(Запрос.МенеджерВременныхТаблиц, ТаблицаЛС, ТаблицаВидовУслугДляСписка2);
		СвернутьТарифы(Запрос.МенеджерВременныхТаблиц);
		
		РасчитатьТаблицуНормПотребленияУслуг(Запрос.МенеджерВременныхТаблиц);
		РасчитатьСложныеНормыИСкомпоноватьТаблицуНачислений(Запрос.МенеджерВременныхТаблиц);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	втНачисленияТарифНорма.ЛицевойСчет КАК ЛицевойСчет,
		|	втНачисленияТарифНорма.Суффикс КАК Суффикс,
		|	втНачисленияТарифНорма.Тариф КАК Тариф,
		|	втНачисленияТарифНорма.Начислено КАК Начислено,
		|	втНачисленияТарифНорма.РазмерНормы КАК РазмерНормы
		|ИЗ
		|	втНачисленияТарифНорма КАК втНачисленияТарифНорма
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЛицевойСчет";
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		Возврат Результат;
		
	КонецФункции // ПолучитьТаблицуНачисленийДляСписка_2
	
	
	// Формирует таблицу действующих счетчиков из списка2.
	//
	Функция ПолучитьТаблицуДействующихСчетчиковДляСписка_2(ТаблицаЛС, ТаблицаВидовУслуг)
		
		ЗапросТаблицаДействующихСчетчиков = Новый Запрос;
		
		ЗапросТаблицаДействующихСчетчиков.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		ТаблицаУслуг = РассчитатьТаблицуУслуг(ТаблицаЛС, ТаблицаВидовУслуг, ЗапросТаблицаДействующихСчетчиков.МенеджерВременныхТаблиц);
		
		ЗапросТаблицаДействующихСчетчиков.УстановитьПараметр("втОбъединениеУслуг", ТаблицаУслуг);
		ЗапросТаблицаДействующихСчетчиков.УстановитьПараметр("ДатаКон",            КонецМесяца(Объект.Период));
		ЗапросТаблицаДействующихСчетчиков.УстановитьПараметр("ДатаНач",            НачалоМесяца(Объект.Период) - 1);
		ЗапросТаблицаДействующихСчетчиков.УстановитьПараметр("ДатаНачМесяца",      НачалоМесяца(Объект.Период));
		
		ЗапросТаблицаДействующихСчетчиков.Текст =
		"ВЫБРАТЬ
		|	втОбъединениеУслуг.Услуга КАК Услуга,
		|	втОбъединениеУслуг.УслугаОснование КАК УслугаОснование,
		|	втОбъединениеУслуг.Объект КАК Объект
		|ПОМЕСТИТЬ втОбъединениеУслуг
		|ИЗ
		|	&втОбъединениеУслуг КАК втОбъединениеУслуг
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втВидовУслуг.Суффикс КАК Суффикс,
		|	втОбъединениеУслуг.Услуга КАК Услуга,
		|	втОбъединениеУслуг.УслугаОснование КАК УслугаОснование,
		|	втОбъединениеУслуг.Объект КАК Объект
		|ПОМЕСТИТЬ втУслугиСЗависимостями
		|ИЗ
		|	втВидовУслуг КАК втВидовУслуг
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОбъединениеУслуг КАК втОбъединениеУслуг
		|		ПО втВидовУслуг.УслугаВБазе = втОбъединениеУслуг.Услуга
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТаблицаЛС.ЛицевойСчет КАК ЛицевойСчет,
		|	втТаблицаЛС.Помещение КАК Помещение,
		|	втУслугиСЗависимостями.Суффикс КАК Суффикс,
		|	втУслугиСЗависимостями.Услуга КАК Услуга,
		|	втУслугиСЗависимостями.УслугаОснование КАК УслугаОснование
		|ПОМЕСТИТЬ втУслугиСЛС
		|ИЗ
		|	втУслугиСЗависимостями КАК втУслугиСЗависимостями
		|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаЛС КАК втТаблицаЛС
		|		ПО втУслугиСЗависимостями.Объект = втТаблицаЛС.Здание
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект КАК Объект,
		|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик КАК Счетчик
		|ПОМЕСТИТЬ втЗакрепленныеСчетчикиСрезПоследних
		|ИЗ
		|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
		|			&ДатаНач,
		|			(Объект ССЫЛКА Справочник.УПЖКХ_Помещения
		|				ИЛИ Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета)
		|				И ДатаИзменения <= &ДатаНачМесяца) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
		|ГДЕ
		|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект,
		|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик
		|ИЗ
		|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
		|			&ДатаКон,
		|			ДатаИзменения МЕЖДУ &ДатаНачМесяца И &ДатаКон
		|				И (Объект ССЫЛКА Справочник.УПЖКХ_Помещения
		|					ИЛИ Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета)
		|				И Действует) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЗакрепленныеСчетчикиСрезПоследних.Объект КАК Помещение,
		|	втЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги КАК Услуга,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втУслугиСЛС.ЛицевойСчет) КАК КоличествоСОбщимСчетчикомГаз
		|ПОМЕСТИТЬ втСчетчикиНаПомещение
		|ИЗ
		|	втУслугиСЛС КАК втУслугиСЛС
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЗакрепленныеСчетчикиСрезПоследних КАК втЗакрепленныеСчетчикиСрезПоследних
		|		ПО втУслугиСЛС.Помещение = втЗакрепленныеСчетчикиСрезПоследних.Объект
		|			И втУслугиСЛС.Услуга = втЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги
		|
		|СГРУППИРОВАТЬ ПО
		|	втЗакрепленныеСчетчикиСрезПоследних.Объект,
		|	втЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втУслугиСЛС.ЛицевойСчет КАК ЛицевойСчет,
		|	втУслугиСЛС.Суффикс КАК Суффикс,
		|	МАКСИМУМ(ЕСТЬNULL(втСчетчикиНаПомещение.КоличествоСОбщимСчетчикомГаз, 1)) КАК КоличествоСОбщимСчетчикомГаз
		|ПОМЕСТИТЬ втОбщийСчетчик
		|ИЗ
		|	втУслугиСЛС КАК втУслугиСЛС
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСчетчикиНаПомещение КАК втСчетчикиНаПомещение
		|		ПО втУслугиСЛС.Помещение = втСчетчикиНаПомещение.Помещение
		|			И втУслугиСЛС.Услуга = втСчетчикиНаПомещение.Услуга
		|
		|СГРУППИРОВАТЬ ПО
		|	втУслугиСЛС.ЛицевойСчет,
		|	втУслугиСЛС.Суффикс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втУслугиСЛС.ЛицевойСчет КАК ЛицевойСчет,
		|	втУслугиСЛС.Суффикс КАК Суффикс,
		|	ВЫБОР
		|		КОГДА НЕ втЗакрепленныеСчетчикиСрезПоследних.Счетчик ЕСТЬ NULL
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НаличиеСчетчика
		|ПОМЕСТИТЬ втСчетчикиПомещенияЛС
		|ИЗ
		|	втУслугиСЛС КАК втУслугиСЛС
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЗакрепленныеСчетчикиСрезПоследних КАК втЗакрепленныеСчетчикиСрезПоследних
		|		ПО втУслугиСЛС.ЛицевойСчет = втЗакрепленныеСчетчикиСрезПоследних.Объект
		|			И втУслугиСЛС.Услуга = втЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	втУслугиСЛС.ЛицевойСчет,
		|	втУслугиСЛС.Суффикс,
		|	ВЫБОР
		|		КОГДА НЕ втЗакрепленныеСчетчикиСрезПоследних.Счетчик ЕСТЬ NULL
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ
		|ИЗ
		|	втУслугиСЛС КАК втУслугиСЛС
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЗакрепленныеСчетчикиСрезПоследних КАК втЗакрепленныеСчетчикиСрезПоследних
		|		ПО втУслугиСЛС.ЛицевойСчет = втЗакрепленныеСчетчикиСрезПоследних.Объект
		|			И втУслугиСЛС.УслугаОснование = втЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	втУслугиСЛС.ЛицевойСчет,
		|	втУслугиСЛС.Суффикс,
		|	ВЫБОР
		|		КОГДА НЕ втЗакрепленныеСчетчикиСрезПоследних.Счетчик ЕСТЬ NULL
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ
		|ИЗ
		|	втУслугиСЛС КАК втУслугиСЛС
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЗакрепленныеСчетчикиСрезПоследних КАК втЗакрепленныеСчетчикиСрезПоследних
		|		ПО втУслугиСЛС.Помещение = втЗакрепленныеСчетчикиСрезПоследних.Объект
		|			И втУслугиСЛС.Услуга = втЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	втУслугиСЛС.ЛицевойСчет,
		|	втУслугиСЛС.Суффикс,
		|	ВЫБОР
		|		КОГДА НЕ втЗакрепленныеСчетчикиСрезПоследних.Счетчик ЕСТЬ NULL
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ
		|ИЗ
		|	втУслугиСЛС КАК втУслугиСЛС
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЗакрепленныеСчетчикиСрезПоследних КАК втЗакрепленныеСчетчикиСрезПоследних
		|		ПО втУслугиСЛС.Помещение = втЗакрепленныеСчетчикиСрезПоследних.Объект
		|			И втУслугиСЛС.УслугаОснование = втЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втСчетчикиПомещенияЛС.ЛицевойСчет КАК ЛицевойСчет,
		|	втСчетчикиПомещенияЛС.Суффикс КАК Суффикс,
		|	МАКСИМУМ(втСчетчикиПомещенияЛС.НаличиеСчетчика) КАК НаличиеСчетчика,
		|	втОбщийСчетчик.КоличествоСОбщимСчетчикомГаз КАК КоличествоСОбщимСчетчикомГаз
		|ИЗ
		|	втСчетчикиПомещенияЛС КАК втСчетчикиПомещенияЛС
		|		ЛЕВОЕ СОЕДИНЕНИЕ втОбщийСчетчик КАК втОбщийСчетчик
		|		ПО втСчетчикиПомещенияЛС.ЛицевойСчет = втОбщийСчетчик.ЛицевойСчет
		|			И втСчетчикиПомещенияЛС.Суффикс = втОбщийСчетчик.Суффикс
		|
		|СГРУППИРОВАТЬ ПО
		|	втСчетчикиПомещенияЛС.ЛицевойСчет,
		|	втСчетчикиПомещенияЛС.Суффикс,
		|	втОбщийСчетчик.КоличествоСОбщимСчетчикомГаз";
		
		Результат = ЗапросТаблицаДействующихСчетчиков.Выполнить().Выгрузить();
		
		Возврат Результат;
		
	КонецФункции // ПолучитьТаблицуДействующихСчетчиковДляСписка_2()
	
	// Формирует дерево начислений для услуг из списка2.
	//
	Функция ПолучитьТаблицуНачисленийДляСписка_3(ТаблицаЛС, ТаблицаВидовУслугДляСписка3)
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ДатаКон", КонецМесяца(Объект.Период));
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		РасчитатьТаблицуНачислений(Запрос.МенеджерВременныхТаблиц, ТаблицаЛС, ТаблицаВидовУслугДляСписка3);
		СвернутьТарифы(Запрос.МенеджерВременныхТаблиц);
		
		РасчитатьТаблицуНормПотребленияУслуг(Запрос.МенеджерВременныхТаблиц);
		РасчитатьСложныеНормыИСкомпоноватьТаблицуНачислений(Запрос.МенеджерВременныхТаблиц);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект КАК Объект,
		|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик КАК Счетчик
		|ПОМЕСТИТЬ втЗакрепленныеСчетчикиСрезПоследних
		|ИЗ
		|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(&ДатаКон, Объект ССЫЛКА Справочник.УПЖКХ_Помещения) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
		|ГДЕ
		|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Объект,
		|	Счетчик
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЗакрепленныеСчетчикиСрезПоследних.Объект КАК Помещение,
		|	втЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги КАК Услуга,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втТаблицаНачислений.ЛицевойСчет) КАК КоличествоСОбщимСчетчиком
		|ПОМЕСТИТЬ втСчетчикиНаПомещение
		|ИЗ
		|	втТаблицаНачислений КАК втТаблицаНачислений
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЗакрепленныеСчетчикиСрезПоследних КАК втЗакрепленныеСчетчикиСрезПоследних
		|		ПО втТаблицаНачислений.Помещение = втЗакрепленныеСчетчикиСрезПоследних.Объект
		|			И втТаблицаНачислений.Услуга = втЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги
		|
		|СГРУППИРОВАТЬ ПО
		|	втЗакрепленныеСчетчикиСрезПоследних.Объект,
		|	втЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТаблицаНачислений.ЛицевойСчет,
		|	втТаблицаНачислений.Суффикс,
		|	МАКСИМУМ(ЕСТЬNULL(втСчетчикиНаПомещение.КоличествоСОбщимСчетчиком, 1)) КАК КоличествоСОбщимСчетчиком
		|ПОМЕСТИТЬ втОбщийСчетчик
		|ИЗ
		|	втТаблицаНачислений КАК втТаблицаНачислений
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСчетчикиНаПомещение КАК втСчетчикиНаПомещение
		|		ПО втТаблицаНачислений.Помещение = втСчетчикиНаПомещение.Помещение
		|			И втТаблицаНачислений.Услуга = втСчетчикиНаПомещение.Услуга
		|
		|СГРУППИРОВАТЬ ПО
		|	втТаблицаНачислений.ЛицевойСчет,
		|	втТаблицаНачислений.Суффикс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втНачисленияТарифНорма.ЛицевойСчет КАК ЛицевойСчет,
		|	втНачисленияТарифНорма.Суффикс,
		|	втНачисленияТарифНорма.Тариф,
		|	втНачисленияТарифНорма.Начислено,
		|	втНачисленияТарифНорма.РазмерНормы,
		|	втОбщийСчетчик.КоличествоСОбщимСчетчиком
		|ИЗ
		|	втНачисленияТарифНорма КАК втНачисленияТарифНорма
		|		ЛЕВОЕ СОЕДИНЕНИЕ втОбщийСчетчик КАК втОбщийСчетчик
		|		ПО втНачисленияТарифНорма.ЛицевойСчет = втОбщийСчетчик.ЛицевойСчет
		|			И втНачисленияТарифНорма.Суффикс = втОбщийСчетчик.Суффикс
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЛицевойСчет";
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		Возврат Результат;
		
	КонецФункции // ПолучитьТаблицуНачисленийДляСписка_3()
	
	// Подготавиливает временную таблицу начислений.
	//
	// Параметры:
	// МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц исходного запроса.
	//
	Процедура РасчитатьТаблицуНачислений(МенеджерВременныхТаблиц, ТаблицаЛС, ТаблицаВидовУслуг)
		
		ЗапросТаблицаНачислений = Новый Запрос;
		
		//ЗапросТаблицаНачислений.УстановитьПараметр("втВидовУслуг", ТаблицаВидовУслуг);
		ЗапросТаблицаНачислений.УстановитьПараметр("Организация",  Объект.Организация);
		ЗапросТаблицаНачислений.УстановитьПараметр("ДатаНач",      НачалоМесяца(Объект.Период));
		ЗапросТаблицаНачислений.УстановитьПараметр("ДатаКон",      КонецМесяца(Объект.Период));
		
		ТаблицаУслуг = РассчитатьТаблицуУслуг(ТаблицаЛС, ТаблицаВидовУслуг, МенеджерВременныхТаблиц);
		
		ЗапросТаблицаНачислений.УстановитьПараметр("втОбъединениеУслуг", ТаблицаУслуг);
		
		ЗапросТаблицаНачислений.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		ЗапросТаблицаНачислений.Текст =
		"ВЫБРАТЬ
		|	втОбъединениеУслуг.Услуга,
		|	втОбъединениеУслуг.УслугаОснование,
		|	втОбъединениеУслуг.НормировочныйКоэффициент,
		|	втОбъединениеУслуг.Объект
		|ПОМЕСТИТЬ втОбъединениеУслуг
		|ИЗ
		|	&втОбъединениеУслуг КАК втОбъединениеУслуг
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втВидовУслуг.Суффикс,
		|	втВидовУслуг.Приоритет,
		|	втВидовУслуг.УчитыватьПриРасчетеТарифа,
		|	втВидовУслуг.ИспользоватьНормировочныйКоэффициент,
		|	втОбъединениеУслуг.Услуга,
		|	втОбъединениеУслуг.УслугаОснование,
		|	втОбъединениеУслуг.НормировочныйКоэффициент,
		|	втОбъединениеУслуг.Объект
		|ПОМЕСТИТЬ втУслугиСЗависимостями
		|ИЗ
		|	втВидовУслуг КАК втВидовУслуг
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОбъединениеУслуг КАК втОбъединениеУслуг
		|		ПО втВидовУслуг.УслугаВБазе = втОбъединениеУслуг.Услуга
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет.Адрес КАК Помещение,
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет.Адрес.Владелец КАК Здание,
		|	УПЖКХ_НачисленияОбороты.Услуга,
		|	УПЖКХ_НачисленияОбороты.УслугаОснование,
		|	УПЖКХ_НачисленияОбороты.Тариф,
		|	УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот КАК Начислено,
		|	ВЫБОР
		|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоПерерасчет
		|ПОМЕСТИТЬ втНачисленияОбороты
		|ИЗ
		|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			Месяц,
		|			Организация = &Организация
		|				И ЛицевойСчет В
		|					(ВЫБРАТЬ
		|						втТаблицаЛС.ЛицевойСчет
		|					ИЗ
		|						втТаблицаЛС КАК втТаблицаЛС)
		|				И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ВводНачальногоСальдо), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Комиссия), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
		|				И Услуга В
		|					(ВЫБРАТЬ
		|						втВидовУслуг.УслугаВБазе
		|					ИЗ
		|						втВидовУслуг КАК втВидовУслуг)
		|				И РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ))) КАК УПЖКХ_НачисленияОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втНачисленияОбороты.ЛицевойСчет,
		|	втНачисленияОбороты.Помещение,
		|	втУслугиСЗависимостями.Суффикс,
		|	втУслугиСЗависимостями.Приоритет,
		|	втУслугиСЗависимостями.УчитыватьПриРасчетеТарифа,
		|	втНачисленияОбороты.Услуга,
		|	втНачисленияОбороты.УслугаОснование,
		|	ВЫБОР
		|		КОГДА втУслугиСЗависимостями.ИспользоватьНормировочныйКоэффициент
		|			ТОГДА втУслугиСЗависимостями.НормировочныйКоэффициент * втНачисленияОбороты.Тариф
		|		ИНАЧЕ втНачисленияОбороты.Тариф
		|	КОНЕЦ КАК Тариф,
		|	СУММА(втНачисленияОбороты.Начислено) КАК Начислено,
		|	втНачисленияОбороты.ЭтоПерерасчет
		|ПОМЕСТИТЬ втТаблицаНачислений
		|ИЗ
		|	втНачисленияОбороты КАК втНачисленияОбороты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втУслугиСЗависимостями КАК втУслугиСЗависимостями
		|		ПО втНачисленияОбороты.Услуга = втУслугиСЗависимостями.Услуга
		|			И втНачисленияОбороты.УслугаОснование = втУслугиСЗависимостями.УслугаОснование
		|			И втНачисленияОбороты.Здание = втУслугиСЗависимостями.Объект
		|
		|СГРУППИРОВАТЬ ПО
		|	втНачисленияОбороты.ЛицевойСчет,
		|	втНачисленияОбороты.Помещение,
		|	втУслугиСЗависимостями.Суффикс,
		|	втУслугиСЗависимостями.Приоритет,
		|	втУслугиСЗависимостями.УчитыватьПриРасчетеТарифа,
		|	втНачисленияОбороты.ЭтоПерерасчет,
		|	втНачисленияОбороты.Услуга,
		|	втНачисленияОбороты.УслугаОснование,
		|	ВЫБОР
		|		КОГДА втУслугиСЗависимостями.ИспользоватьНормировочныйКоэффициент
		|			ТОГДА втУслугиСЗависимостями.НормировочныйКоэффициент * втНачисленияОбороты.Тариф
		|		ИНАЧЕ втНачисленияОбороты.Тариф
		|	КОНЕЦ";
		
		ЗапросТаблицаНачислений.Выполнить();
		
	КонецПроцедуры // РасчитатьТаблицуНачислений()
	
	// Подготавливает временную таблицу услуг.
	//
	// Параметры:
	// МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц исходного запроса.
	//
	Функция РассчитатьТаблицуУслуг(ТаблицаЛС, ТаблицаВидовУслуг, МенеджерВременныхТаблиц)
		
		ЗапросТаблицаУслуг = Новый Запрос;
		
		ЗапросТаблицаУслуг.УстановитьПараметр("втВидовУслуг", ТаблицаВидовУслуг);
		ЗапросТаблицаУслуг.УстановитьПараметр("ТаблицаЛС",    ТаблицаЛС);
		ЗапросТаблицаУслуг.УстановитьПараметр("Организация",  Объект.Организация);
		ЗапросТаблицаУслуг.УстановитьПараметр("ДатаКон",      КонецМесяца(Объект.Период));
		
		ЗапросТаблицаУслуг.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		ОрганизацияЗависимыхУслуг = ?(Константы.УПЖКХ_НачислениеЗависимыхУслугВРазрезеОрганизаций.Получить(), Объект.Организация, Справочники.Организации.ПустаяСсылка());
		ЗапросТаблицаУслуг.УстановитьПараметр("ОрганизацияЗависимыхУслуг", ОрганизацияЗависимыхУслуг);
		
		//ЗапросТаблицаУслуг.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		ЗапросТаблицаУслуг.Текст =
		"ВЫБРАТЬ
		|	втВидовУслуг.Суффикс,
		|	втВидовУслуг.УслугаВБазе,
		|	втВидовУслуг.Приоритет,
		|	втВидовУслуг.УчитыватьПриРасчетеТарифа,
		|	втВидовУслуг.ИспользоватьНормировочныйКоэффициент
		|ПОМЕСТИТЬ втВидовУслуг
		|ИЗ
		|	&втВидовУслуг КАК втВидовУслуг
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втТаблицаЛС.ЛицевойСчет,
		|	втТаблицаЛС.Здание,
		|	втТаблицаЛС.Помещение
		|ПОМЕСТИТЬ втТаблицаЛС
		|ИЗ
		|	&ТаблицаЛС КАК втТаблицаЛС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_ЗависимостиУслугСрезПоследних.Услуга,
		|	КВП_ЗависимостиУслугСрезПоследних.УслугаОснование,
		|	ВЫБОР
		|		КОГДА КВП_ЗависимостиУслугСрезПоследних.Значение = 0
		|			ТОГДА 0
		|		ИНАЧЕ КВП_ЗависимостиУслугСрезПоследних.ЗначениеОснование / КВП_ЗависимостиУслугСрезПоследних.Значение
		|	КОНЕЦ КАК НормировочныйКоэффициент,
		|	КВП_ЗависимостиУслугСрезПоследних.Объект
		|ПОМЕСТИТЬ втЗависимостиУслуг
		|ИЗ
		|	РегистрСведений.КВП_ЗависимостиУслуг.СрезПоследних(
		|			&ДатаКон,
		|			Организация = &ОрганизацияЗависимыхУслуг
		|				И (Объект В
		|						(ВЫБРАТЬ
		|							втТаблицаЛС.Здание
		|						ИЗ
		|							втТаблицаЛС КАК втТаблицаЛС)
		|					ИЛИ Объект = ЗНАЧЕНИЕ(Справочник.КВП_Здания.ПустаяСсылка))
		|				И Услуга В
		|					(ВЫБРАТЬ
		|						втВидовУслуг.УслугаВБазе
		|					ИЗ
		|						втВидовУслуг КАК втВидовУслуг)) КАК КВП_ЗависимостиУслугСрезПоследних
		|ГДЕ
		|	КВП_ЗависимостиУслугСрезПоследних.Действует
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЗависимостиУслуг.Услуга,
		|	втЗависимостиУслуг.УслугаОснование,
		|	втЗависимостиУслуг.НормировочныйКоэффициент,
		|	втЗависимостиУслуг.Объект
		|ИЗ
		|	втЗависимостиУслуг КАК втЗависимостиУслуг
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	втВидовУслуг.УслугаВБазе,
		|	ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка),
		|	1,
		|	ЗНАЧЕНИЕ(Справочник.КВП_Здания.ПустаяСсылка)
		|ИЗ
		|	втВидовУслуг КАК втВидовУслуг
		|ГДЕ
		|	втВидовУслуг.УслугаВБазе <> ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втТаблицаЛС.Здание
		|ИЗ
		|	втТаблицаЛС КАК втТаблицаЛС";
		МассивРезультатов = ЗапросТаблицаУслуг.ВыполнитьПакет();
		
		ТаблицаУслуг  = МассивРезультатов[3].Выгрузить();
		ТаблицаЗданий = МассивРезультатов[4].Выгрузить();
		
		// Для каждой зависимости услуг, распространяющейся на все здания устанавливаем в соответствие здание из текущей выборки.
		СтрокиБезЗданий = ТаблицаУслуг.НайтиСтроки(Новый Структура("Объект", Справочники.КВП_Здания.ПустаяСсылка()));
		
		Для Каждого Строка Из СтрокиБезЗданий Цикл
			
			Для Каждого СтрокаЗдания Из ТаблицаЗданий Цикл
				
				Отбор = Новый Структура("Услуга,УслугаОснование,Объект", Строка.Услуга, Строка.УслугаОснование, СтрокаЗдания.Здание);
				Если ТаблицаУслуг.НайтиСтроки(Отбор).Количество() = 0 Тогда
					
					НоваяСтрока = ТаблицаУслуг.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, , "Объект");
					НоваяСтрока.Объект = СтрокаЗдания.Здание;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		// Строки без зданий удаляем.
		Для Каждого Строка Из СтрокиБезЗданий Цикл
			ТаблицаУслуг.Удалить(Строка);
		КонецЦикла;
		
		Возврат ТаблицаУслуг;
		
	КонецФункции // РассчитатьТаблицуУслуг()
	
	// Сворачивает тарифы в запросе в зависимости от настроек выгрузки. В исходном запросе обязательно должна быть
	// подготовленная временная таблица "втНесвернутыеТарифы", априори не имеющая строк с простым вариантом расчета норм
	// и со следующей структурой полей:
	//  ЛицевойСчет - лицевой счет;
	//  Суффикс     - суффикс услуги в ОСЗН;
	//  Тариф       - тариф.
	//
	// Параметры:
	// МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц исходного запроса//
	//
	Процедура СвернутьТарифы(МенеджерВременныхТаблиц)
		
		Если Объект.СпособРасчетаТарифа = "максимальный" Тогда
			Способ = "МАКСИМУМ";
		ИначеЕсли Объект.СпособРасчетаТарифа = "минимальный" Тогда
			Способ = "МИНИМУМ";
		ИначеЕсли Объект.СпособРасчетаТарифа = "средний" Тогда
			Способ = "СРЕДНЕЕ";
		ИначеЕсли Объект.СпособРасчетаТарифа = "суммарный" Тогда
			Способ = "СУММА";
		КонецЕсли;
		
		ЗапросСвернутьТарифы = Новый Запрос;
		
		ЗапросСвернутьТарифы.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		ЗапросСвернутьТарифы.Текст =
		"ВЫБРАТЬ
		|	втТаблицаНачислений.ЛицевойСчет,
		|	втТаблицаНачислений.Суффикс,
		|	СУММА(втТаблицаНачислений.Начислено) КАК Начислено
		|ПОМЕСТИТЬ втБезТарифов
		|ИЗ
		|	втТаблицаНачислений КАК втТаблицаНачислений
		|
		|СГРУППИРОВАТЬ ПО
		|	втТаблицаНачислений.ЛицевойСчет,
		|	втТаблицаНачислений.Суффикс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТаблицаНачислений.ЛицевойСчет,
		|	втТаблицаНачислений.Суффикс,
		|	втТаблицаНачислений.Приоритет,
		|	втТаблицаНачислений.Тариф
		|ПОМЕСТИТЬ втНесвернутыеТарифы
		|ИЗ
		|	втТаблицаНачислений КАК втТаблицаНачислений
		|ГДЕ
		|	втТаблицаНачислений.УчитыватьПриРасчетеТарифа
		|	И НЕ втТаблицаНачислений.ЭтоПерерасчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втНесвернутыеТарифы.ЛицевойСчет,
		|	втНесвернутыеТарифы.Суффикс,
		|	МИНИМУМ(втНесвернутыеТарифы.Приоритет) КАК Приоритет
		|ПОМЕСТИТЬ втНаивысшийПриоритет
		|ИЗ
		|	втНесвернутыеТарифы КАК втНесвернутыеТарифы
		|
		|СГРУППИРОВАТЬ ПО
		|	втНесвернутыеТарифы.ЛицевойСчет,
		|	втНесвернутыеТарифы.Суффикс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втНесвернутыеТарифы.ЛицевойСчет,
		|	втНесвернутыеТарифы.Суффикс,
		|	втНесвернутыеТарифы.Приоритет,
		|	втНесвернутыеТарифы.Тариф
		|ПОМЕСТИТЬ втНесвернутыеТарифыСПриоритетом
		|ИЗ
		|	втНесвернутыеТарифы КАК втНесвернутыеТарифы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНаивысшийПриоритет КАК втНаивысшийПриоритет
		|		ПО втНесвернутыеТарифы.Суффикс = втНаивысшийПриоритет.Суффикс
		|			И втНесвернутыеТарифы.Приоритет = втНаивысшийПриоритет.Приоритет
		|			И втНесвернутыеТарифы.ЛицевойСчет = втНаивысшийПриоритет.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втНесвернутыеТарифыСПриоритетом.ЛицевойСчет,
		|	втНесвернутыеТарифыСПриоритетом.Суффикс,
		|	" + Способ + "(втНесвернутыеТарифыСПриоритетом.Тариф) КАК Тариф
		|ПОМЕСТИТЬ втСвернутыеТарифы
		|ИЗ
		|	втНесвернутыеТарифыСПриоритетом КАК втНесвернутыеТарифыСПриоритетом
		|
		|СГРУППИРОВАТЬ ПО
		|	втНесвернутыеТарифыСПриоритетом.ЛицевойСчет,
		|	втНесвернутыеТарифыСПриоритетом.Суффикс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втСвернутыеТарифы.ЛицевойСчет,
		|	втСвернутыеТарифы.Суффикс,
		|	втСвернутыеТарифы.Тариф
		|ПОМЕСТИТЬ втИтоговыйТариф
		|ИЗ
		|	втСвернутыеТарифы КАК втСвернутыеТарифы";
		
		ЗапросСвернутьТарифы.Выполнить();
		
	КонецПроцедуры // СвернутьТарифы()
	
	// Подготавиливает временную таблицу норм потребления услуг.
	//
	// Параметры:
	// МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц исходного запроса.
	//
	Процедура РасчитатьТаблицуНормПотребленияУслуг(МенеджерВременныхТаблиц)
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ДатаКон", КонецМесяца(Объект.Период));
		
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга КАК Услуга,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления
		|ПОМЕСТИТЬ втНормыПотребленияУслугЛССрезПоследних
		|ИЗ
		|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(&ДатаКон, ) КАК КВП_НормыПотребленияУслугЛССрезПоследних
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ЛицевойСчет,
		|	Услуга
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТаблицаНачислений.ЛицевойСчет,
		|	втТаблицаНачислений.Суффикс,
		|	втТаблицаНачислений.Услуга,
		|	ЕСТЬNULL(втНормыПотребленияУслугЛССрезПоследних.НормаПотребления, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)) КАК НормаПотребления,
		|	ВЫБОР
		|		КОГДА НЕ втНормыПотребленияУслугЛССрезПоследних.НормаПотребления ЕСТЬ NULL 
		|				И втНормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки = ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой)
		|			ТОГДА втНормыПотребленияУслугЛССрезПоследних.НормаПотребления.Размер
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК РазмерНормы,
		|	ВЫБОР
		|		КОГДА НЕ втНормыПотребленияУслугЛССрезПоследних.НормаПотребления ЕСТЬ NULL 
		|				И втНормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки = ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЭтоСложнаяНорма
		|ПОМЕСТИТЬ втНормыПотребленияУслугЛС
		|ИЗ
		|	втТаблицаНачислений КАК втТаблицаНачислений
		|		ЛЕВОЕ СОЕДИНЕНИЕ втНормыПотребленияУслугЛССрезПоследних КАК втНормыПотребленияУслугЛССрезПоследних
		|		ПО втТаблицаНачислений.ЛицевойСчет = втНормыПотребленияУслугЛССрезПоследних.ЛицевойСчет
		|			И втТаблицаНачислений.Услуга = втНормыПотребленияУслугЛССрезПоследних.Услуга";
		Запрос.Выполнить();
		
	КонецПроцедуры // РасчитатьТаблицуНормПотребленияУслуг()
	
	// Получает размер расчитываемых норм и компонует итоговую таблицу начислений свернутыми тарифами и расчитаннцми нормами.
	//
	// Параметры:
	// МенеджерВременныхТаблиц - МенеджерВременныхТаблиц - менеджер временных таблиц исходного запроса.
	//
	Процедура РасчитатьСложныеНормыИСкомпоноватьТаблицуНачислений(МенеджерВременныхТаблиц)
		
		ЗапросСложныеНормы = Новый Запрос;
		ЗапросСложныеНормы.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		ЗапросСложныеНормы.Текст =
		"ВЫБРАТЬ
		|	втНормыПотребленияУслугЛС.ЛицевойСчет,
		|	втНормыПотребленияУслугЛС.Суффикс,
		|	втНормыПотребленияУслугЛС.Услуга,
		|	втНормыПотребленияУслугЛС.НормаПотребления,
		|	втНормыПотребленияУслугЛС.РазмерНормы
		|ИЗ
		|	втНормыПотребленияУслугЛС КАК втНормыПотребленияУслугЛС
		|ГДЕ
		|	втНормыПотребленияУслугЛС.ЭтоСложнаяНорма";
		ЗапросСложныеНормы.Выполнить();
		
		ТаблицаСложныеНормы = ЗапросСложныеНормы.Выполнить().Выгрузить();
		
		// Обрабатываем таблицу сложных норм.
		Для Каждого Строка Из ТаблицаСложныеНормы Цикл
			Строка.РазмерНормы = ПолучитьРазмерНормыПотребления(Строка.ЛицевойСчет, КонецМесяца(Объект.Период), Строка.НормаПотребления, Объект.Организация);
		КонецЦикла;
		
		// Таблицу обработанных данных помещаем в исходный менеджер виртуальных таблиц и компонуем таблицу начислений свернутыми тарифами и рассчитаннцми нормами.
		ЗапросПроверенныеДанные = Новый Запрос;
		
		ЗапросПроверенныеДанные.УстановитьПараметр("РасчитанныеСложныеНормы", ТаблицаСложныеНормы);
		
		ЗапросПроверенныеДанные.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
		
		ЗапросПроверенныеДанные.Текст =
		"ВЫБРАТЬ
		|	РасчитанныеСложныеНормы.ЛицевойСчет,
		|	РасчитанныеСложныеНормы.Суффикс,
		|	РасчитанныеСложныеНормы.Услуга,
		|	РасчитанныеСложныеНормы.НормаПотребления,
		|	РасчитанныеСложныеНормы.РазмерНормы
		|ПОМЕСТИТЬ втРасчитанныеСложныеНормы
		|ИЗ
		|	&РасчитанныеСложныеНормы КАК РасчитанныеСложныеНормы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втНормыПотребленияУслугЛС.ЛицевойСчет,
		|	втНормыПотребленияУслугЛС.Суффикс,
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА втНормыПотребленияУслугЛС.ЭтоСложнаяНорма
		|				ТОГДА втРасчитанныеСложныеНормы.РазмерНормы
		|			ИНАЧЕ втНормыПотребленияУслугЛС.РазмерНормы
		|		КОНЕЦ) КАК РазмерНормы
		|ПОМЕСТИТЬ втНормы
		|ИЗ
		|	втНормыПотребленияУслугЛС КАК втНормыПотребленияУслугЛС
		|		ЛЕВОЕ СОЕДИНЕНИЕ втРасчитанныеСложныеНормы КАК втРасчитанныеСложныеНормы
		|		ПО втНормыПотребленияУслугЛС.ЛицевойСчет = втРасчитанныеСложныеНормы.ЛицевойСчет
		|			И втНормыПотребленияУслугЛС.Услуга = втРасчитанныеСложныеНормы.Услуга
		|
		|СГРУППИРОВАТЬ ПО
		|	втНормыПотребленияУслугЛС.ЛицевойСчет,
		|	втНормыПотребленияУслугЛС.Суффикс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втБезТарифов.ЛицевойСчет,
		|	втБезТарифов.Суффикс,
		|	ЕСТЬNULL(втИтоговыйТариф.Тариф, 0) КАК Тариф,
		|	втБезТарифов.Начислено
		|ПОМЕСТИТЬ втНачисленияТариф
		|ИЗ
		|	втБезТарифов КАК втБезТарифов
		|		ЛЕВОЕ СОЕДИНЕНИЕ втИтоговыйТариф КАК втИтоговыйТариф
		|		ПО втБезТарифов.ЛицевойСчет = втИтоговыйТариф.ЛицевойСчет
		|			И втБезТарифов.Суффикс = втИтоговыйТариф.Суффикс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втНачисленияТариф.ЛицевойСчет,
		|	втНачисленияТариф.Суффикс,
		|	втНачисленияТариф.Тариф,
		|	втНачисленияТариф.Начислено,
		|	втНормы.РазмерНормы
		|ПОМЕСТИТЬ втНачисленияТарифНорма
		|ИЗ
		|	втНачисленияТариф КАК втНачисленияТариф
		|		ЛЕВОЕ СОЕДИНЕНИЕ втНормы КАК втНормы
		|		ПО втНачисленияТариф.ЛицевойСчет = втНормы.ЛицевойСчет
		|			И втНачисленияТариф.Суффикс = втНормы.Суффикс";
		ЗапросПроверенныеДанные.Выполнить();
		
	КонецПроцедуры // РасчитатьСложныеНормы()
	
	/////////////////////
	// Благоустройства
	
	// Формирует таблицу со сведениями о благоустройствах лицевых счетов.
	//
	Функция ПолучитьСведенияОБлагоустройствахЛицевыхСчетов(ТаблицаЛС)
		
		Запрос = Новый Запрос;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаЛС.ЛицевойСчет,
		|	ТаблицаЛС.Помещение,
		|	ТаблицаЛС.Здание
		|ПОМЕСТИТЬ втЛицевыхСчетов
		|ИЗ
		|	&ТаблицаЛС КАК ТаблицаЛС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СоответствиеВидовБлагоустройств.Суффикс,
		|	СоответствиеВидовБлагоустройств.ВидБлагоустройстваВБазе
		|ПОМЕСТИТЬ втВидовБлагоустройств
		|ИЗ
		|	&СоответствиеВидовБлагоустройств КАК СоответствиеВидовБлагоустройств
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_БлагоустройствоОбъектов.Объект,
		|	КВП_БлагоустройствоОбъектов.ВидБлагоустройства,
		|	КВП_БлагоустройствоОбъектов.Значение
		|ПОМЕСТИТЬ втБлагоустройствоПомещений
		|ИЗ
		|	РегистрСведений.КВП_БлагоустройствоОбъектов КАК КВП_БлагоустройствоОбъектов
		|ГДЕ
		|	КВП_БлагоустройствоОбъектов.Объект В
		|			(ВЫБРАТЬ
		|				втЛицевыхСчетов.Помещение
		|			ИЗ
		|				втЛицевыхСчетов КАК втЛицевыхСчетов)
		|	И КВП_БлагоустройствоОбъектов.ВидБлагоустройства В
		|			(ВЫБРАТЬ
		|				втВидовБлагоустройств.ВидБлагоустройстваВБазе
		|			ИЗ
		|				втВидовБлагоустройств КАК втВидовБлагоустройств)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_БлагоустройствоОбъектов.Объект,
		|	КВП_БлагоустройствоОбъектов.ВидБлагоустройства,
		|	КВП_БлагоустройствоОбъектов.Значение
		|ПОМЕСТИТЬ втБлагоустройствоЗданий
		|ИЗ
		|	РегистрСведений.КВП_БлагоустройствоОбъектов КАК КВП_БлагоустройствоОбъектов
		|ГДЕ
		|	КВП_БлагоустройствоОбъектов.Объект В
		|			(ВЫБРАТЬ
		|				втЛицевыхСчетов.Здание
		|			ИЗ
		|				втЛицевыхСчетов КАК втЛицевыхСчетов)
		|	И КВП_БлагоустройствоОбъектов.ВидБлагоустройства В
		|			(ВЫБРАТЬ
		|				втВидовБлагоустройств.ВидБлагоустройстваВБазе
		|			ИЗ
		|				втВидовБлагоустройств КАК втВидовБлагоустройств)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЛицевыхСчетов.ЛицевойСчет,
		|	втЛицевыхСчетов.Помещение,
		|	втЛицевыхСчетов.Здание,
		|	втВидовБлагоустройств.Суффикс,
		|	втВидовБлагоустройств.ВидБлагоустройстваВБазе
		|ПОМЕСТИТЬ втБлагоустройстваЛС
		|ИЗ
		|	втЛицевыхСчетов КАК втЛицевыхСчетов,
		|	втВидовБлагоустройств КАК втВидовБлагоустройств
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втБлагоустройстваЛС.ЛицевойСчет,
		|	втБлагоустройстваЛС.Суффикс,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(втБлагоустройстваЛС.ВидБлагоустройстваВБазе) = ТИП(ЧИСЛО)
		|			ТОГДА втБлагоустройстваЛС.ВидБлагоустройстваВБазе
		|		ИНАЧЕ ВЫБОР
		|				КОГДА втБлагоустройстваЛС.Суффикс = ""KodPlita""
		|					ТОГДА ВЫБОР
		|							КОГДА ЕСТЬNULL(втБлагоустройствоПомещений.Значение, втБлагоустройствоЗданий.Значение) В (""Электрическая"", ""Электро"", ЗНАЧЕНИЕ(Перечисление.КВП_Плита.Электрическая))
		|								ТОГДА 1
		|							КОГДА ЕСТЬNULL(втБлагоустройствоПомещений.Значение, втБлагоустройствоЗданий.Значение) В (""Газовая"", ""Газовое"", ЗНАЧЕНИЕ(Перечисление.КВП_Плита.Газовая))
		|								ТОГДА 2
		|							КОГДА ЕСТЬNULL(втБлагоустройствоПомещений.Значение, втБлагоустройствоЗданий.Значение) В (""Твердое топливо"")
		|								ТОГДА 3
		|							ИНАЧЕ 0
		|						КОНЕЦ
		|				КОГДА втБлагоустройстваЛС.Суффикс = ""VodoNagr""
		|					ТОГДА ВЫБОР
		|							КОГДА ЕСТЬNULL(втБлагоустройствоПомещений.Значение, втБлагоустройствоЗданий.Значение) В (&МассивИстин, ИСТИНА)
		|								ТОГДА 1
		|							ИНАЧЕ 0
		|						КОНЕЦ
		|				КОГДА втБлагоустройстваЛС.Суффикс = ""GazOtop""
		|					ТОГДА ВЫБОР
		|							КОГДА ЕСТЬNULL(втБлагоустройствоПомещений.Значение, втБлагоустройствоЗданий.Значение) В (&МассивИстин, ИСТИНА)
		|								ТОГДА 1
		|							ИНАЧЕ 0
		|						КОНЕЦ
		|				КОГДА втБлагоустройстваЛС.Суффикс = ""CentrGV""
		|					ТОГДА ВЫБОР
		|							КОГДА ЕСТЬNULL(втБлагоустройствоПомещений.Значение, втБлагоустройствоЗданий.Значение) В (&МассивИстин, ИСТИНА, ""Центральное"", ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипыГорячегоВодоснабжения.Централизованное))
		|								ТОГДА 1
		|							ИНАЧЕ 0
		|						КОНЕЦ
		|			КОНЕЦ
		|	КОНЕЦ КАК ЗначениеБлагоустройства
		|ИЗ
		|	втБлагоустройстваЛС КАК втБлагоустройстваЛС
		|		ЛЕВОЕ СОЕДИНЕНИЕ втБлагоустройствоПомещений КАК втБлагоустройствоПомещений
		|		ПО втБлагоустройстваЛС.Помещение = втБлагоустройствоПомещений.Объект
		|			И втБлагоустройстваЛС.ВидБлагоустройстваВБазе = втБлагоустройствоПомещений.ВидБлагоустройства
		|		ЛЕВОЕ СОЕДИНЕНИЕ втБлагоустройствоЗданий КАК втБлагоустройствоЗданий
		|		ПО втБлагоустройстваЛС.Здание = втБлагоустройствоЗданий.Объект
		|			И втБлагоустройстваЛС.ВидБлагоустройстваВБазе = втБлагоустройствоЗданий.ВидБлагоустройства";
		
		Запрос.УстановитьПараметр("ТаблицаЛС",                       ТаблицаЛС);
		Запрос.УстановитьПараметр("СоответствиеВидовБлагоустройств", Объект.МосковскаяОбласть2_СоответствиеВидовБлагоустройств.Выгрузить(, "Суффикс, ВидБлагоустройстваВБазе"));
		
		МассивИстин = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Присутствует,ДА,Да,да,ЕСТЬ,Есть,есть");
		Запрос.УстановитьПараметр("МассивИстин", МассивИстин);
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		Возврат Результат;
		
	КонецФункции // ПолучитьСведенияОБлагоустройствахЛицевыхСчетов()
	
	/////////////////////
	// Сведения о проживающих
	
	// Формирует таблицу с периодами присутствия жильцов в лицевых счетах.
	//
	Функция ПолучитьСведенияОПрисутствияхГраждан(ТаблицаЛС)
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаЛС.ЛицевойСчет,
		|	ТаблицаЛС.Помещение,
		|	ТаблицаЛС.КоличествоЛСВПомещении
		|ПОМЕСТИТЬ втЛицевыхСчетов
		|ИЗ
		|	&ТаблицаЛС КАК ТаблицаЛС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЛицевыхСчетов.ЛицевойСчет,
		|	втЛицевыхСчетов.Помещение,
		|	втЛицевыхСчетов.КоличествоЛСВПомещении,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец, ЗНАЧЕНИЕ(Справочник.УПЖКХ_Жильцы.ПустаяСсылка))) КАК КолвоПрисутствующих
		|ПОМЕСТИТЬ втПрисутствующих
		|ИЗ
		|	втЛицевыхСчетов КАК втЛицевыхСчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(&ДатаКон, ДатаИзменения <= &ДатаКон) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
		|		ПО втЛицевыхСчетов.ЛицевойСчет = УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет
		|ГДЕ
		|	УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает
		|
		|СГРУППИРОВАТЬ ПО
		|	втЛицевыхСчетов.ЛицевойСчет,
		|	втЛицевыхСчетов.Помещение,
		|	втЛицевыхСчетов.КоличествоЛСВПомещении
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЛицевыхСчетов.ЛицевойСчет,
		|	втЛицевыхСчетов.Помещение,
		|	втЛицевыхСчетов.КоличествоЛСВПомещении,
		|	ЕСТЬNULL(УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец, ЗНАЧЕНИЕ(Справочник.УПЖКХ_Жильцы.ПустаяСсылка)) КАК Жилец
		|ПОМЕСТИТЬ втОтсутствующихВКонцеПериода
		|ИЗ
		|	втЛицевыхСчетов КАК втЛицевыхСчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(&ДатаКон, ДатаИзменения <= &ДатаКон) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
		|		ПО втЛицевыхСчетов.ЛицевойСчет = УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет
		|ГДЕ
		|	НЕ УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втОтсутствующихВКонцеПериода.ЛицевойСчет,
		|	втОтсутствующихВКонцеПериода.Помещение,
		|	втОтсутствующихВКонцеПериода.КоличествоЛСВПомещении,
		|	втОтсутствующихВКонцеПериода.Жилец
		|ПОМЕСТИТЬ втОтсутствующихВНачалеПериода
		|ИЗ
		|	втОтсутствующихВКонцеПериода КАК втОтсутствующихВКонцеПериода
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
		|				&ДатаНач,
		|				НЕ Проживает
		|					И ДатаИзменения <= &ДатаНач) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
		|		ПО втОтсутствующихВКонцеПериода.ЛицевойСчет = УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет
		|			И втОтсутствующихВКонцеПериода.Жилец = УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втОтсутствующихВНачалеПериода.ЛицевойСчет,
		|	втОтсутствующихВНачалеПериода.Помещение,
		|	втОтсутствующихВНачалеПериода.КоличествоЛСВПомещении,
		|	втОтсутствующихВНачалеПериода.Жилец
		|ПОМЕСТИТЬ втПроверкаПрисутствияВТечениеМесяца
		|ИЗ
		|	втОтсутствующихВНачалеПериода КАК втОтсутствующихВНачалеПериода
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОПроживающих КАК УПЖКХ_СведенияОПроживающих
		|		ПО втОтсутствующихВНачалеПериода.ЛицевойСчет = УПЖКХ_СведенияОПроживающих.ЛицевойСчет
		|			И втОтсутствующихВНачалеПериода.Жилец = УПЖКХ_СведенияОПроживающих.Жилец
		|ГДЕ
		|	УПЖКХ_СведенияОПроживающих.Период МЕЖДУ &ДатаНач И &ДатаКон
		|	И УПЖКХ_СведенияОПроживающих.Проживает
		|	И УПЖКХ_СведенияОПроживающих.ДатаИзменения МЕЖДУ &ДатаНач И &ДатаКон
		|
		|СГРУППИРОВАТЬ ПО
		|	втОтсутствующихВНачалеПериода.КоличествоЛСВПомещении,
		|	втОтсутствующихВНачалеПериода.Помещение,
		|	втОтсутствующихВНачалеПериода.ЛицевойСчет,
		|	втОтсутствующихВНачалеПериода.Жилец
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втОтсутствующихВНачалеПериода.ЛицевойСчет,
		|	втОтсутствующихВНачалеПериода.Помещение,
		|	втОтсутствующихВНачалеПериода.КоличествоЛСВПомещении,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втОтсутствующихВНачалеПериода.Жилец) КАК КолвоОтсутствующих
		|ПОМЕСТИТЬ втОтсутствующих
		|ИЗ
		|	втОтсутствующихВНачалеПериода КАК втОтсутствующихВНачалеПериода
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПроверкаПрисутствияВТечениеМесяца КАК втПроверкаПрисутствияВТечениеМесяца
		|		ПО втОтсутствующихВНачалеПериода.ЛицевойСчет = втПроверкаПрисутствияВТечениеМесяца.ЛицевойСчет
		|			И (НЕ втОтсутствующихВНачалеПериода.Жилец = втПроверкаПрисутствияВТечениеМесяца.Жилец)
		|
		|СГРУППИРОВАТЬ ПО
		|	втОтсутствующихВНачалеПериода.ЛицевойСчет,
		|	втОтсутствующихВНачалеПериода.Помещение,
		|	втОтсутствующихВНачалеПериода.КоличествоЛСВПомещении
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЛицевыхСчетов.ЛицевойСчет КАК ЛицевойСчет,
		|	втЛицевыхСчетов.Помещение КАК Помещение,
		|	втЛицевыхСчетов.КоличествоЛСВПомещении,
		|	ЕСТЬNULL(втОтсутствующих.КолвоОтсутствующих, 0) КАК КолвоОтсутствующих,
		|	ЕСТЬNULL(втПрисутствующих.КолвоПрисутствующих, 0) КАК КолвоПрисутствующих
		|ИЗ
		|	втЛицевыхСчетов КАК втЛицевыхСчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПрисутствующих КАК втПрисутствующих
		|		ПО втЛицевыхСчетов.ЛицевойСчет = втПрисутствующих.ЛицевойСчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ втОтсутствующих КАК втОтсутствующих
		|		ПО втЛицевыхСчетов.ЛицевойСчет = втОтсутствующих.ЛицевойСчет
		|
		|УПОРЯДОЧИТЬ ПО
		|	Помещение,
		|	ЛицевойСчет";
		
		Запрос.УстановитьПараметр("ТаблицаЛС",   ТаблицаЛС);
		Запрос.УстановитьПараметр("ДатаНач",     НачалоМесяца(Объект.Период));
		Запрос.УстановитьПараметр("ДатаКон",     КонецМесяца(Объект.Период));
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		Возврат Результат;
		
	КонецФункции // ПолучитьСведенияОПрисутствияхГраждан()
	
	/////////////////////
	// Вспомогательные методы
	
	// Формирует адресную строку для вывода.
	Функция СформироватьАдресДляВывода(Адрес)
		
		СтрокаАдреса = "";
		Если ЗначениеЗаполнено(Адрес.Индекс) Тогда
			СтрокаАдреса = СтрокаАдреса + СокрЛП(Адрес.Индекс);
		КонецЕсли;
		Если ЗначениеЗаполнено(Адрес.Регион) Тогда
			СтрокаАдреса = ?(НЕ ПустаяСтрока(СтрокаАдреса), СтрокаАдреса + ", ", "") + СокрЛП(Адрес.Регион);
		КонецЕсли;
		Если ЗначениеЗаполнено(Адрес.Район) Тогда
			СтрокаАдреса = ?(НЕ ПустаяСтрока(СтрокаАдреса), СтрокаАдреса + ", ", "") + СокрЛП(Адрес.Район);
		КонецЕсли;
		Если ЗначениеЗаполнено(Адрес.НаселенныйПункт) Тогда
			СтрокаАдреса = ?(НЕ ПустаяСтрока(СтрокаАдреса), СтрокаАдреса + ", ", "") + СокрЛП(Адрес.НаселенныйПункт);
		КонецЕсли;
		Если ЗначениеЗаполнено(Адрес.Улица) Тогда
			СтрокаАдреса = ?(НЕ ПустаяСтрока(СтрокаАдреса), СтрокаАдреса + ", ", "") + СокрЛП(Адрес.Улица);
		КонецЕсли;
		Если ЗначениеЗаполнено(Адрес.Дом) Тогда
			СтрокаАдреса = ?(НЕ ПустаяСтрока(СтрокаАдреса), СтрокаАдреса + ", ", "") + СокрЛП(Адрес.Дом);
		КонецЕсли;
		Если ЗначениеЗаполнено(Адрес.Корпус) Тогда
			СтрокаАдреса = ?(НЕ ПустаяСтрока(СтрокаАдреса), СтрокаАдреса + ", ", "") + СокрЛП(Адрес.Корпус);
		КонецЕсли;
		
		Возврат СтрокаАдреса;
		
	КонецФункции // СформироватьАдресДляВывода()
	
#КонецЕсли

#КонецОбласти

#Область ТаблицаИзмененийЗаполнить

&НаКлиенте
// Обработчик команды "КомандаТаблицаИзмененийЗаполнить".
//
Процедура КомандаТаблицаИзмененийЗаполнить(Команда)
	
	ТекстОшибки = ПроверкаНеобходимыхДанныхДляЗагрузки();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если Объект.МосковскаяОбласть2_ТаблицаИзменений.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаТаблицаИзмененийЗаполнитьЗавершение", ЭтаФорма);
		
		ТекстВопроса = "Перед заполением табличная часть будет очищена. Заполнить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		КомандаТаблицаИзмененийЗаполнитьПродолжение();
	КонецЕсли;
	
КонецПроцедуры // КомандаТаблицаИзмененийЗаполнить()

&НаКлиенте
// Обработчик результата вопроса команды "КомандаТаблицаИзмененийЗаполнить".
//
Процедура КомандаТаблицаИзмененийЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		КомандаТаблицаИзмененийЗаполнитьПродолжение();
	КонецЕсли;
	
КонецПроцедуры // КомандаТаблицаИзмененийЗаполнитьЗавершение()

&НаКлиенте
// Продолжение общей части обработчика команды "КомандаТаблицаИзмененийЗаполнить".
//
Процедура КомандаТаблицаИзмененийЗаполнитьПродолжение()
	
	ЗаполнитьТаблицуИзменений();
	
	Элементы.КП_ТаблицаИзмененийВыгрузить.Доступность = Истина;
	
КонецПроцедуры // КомандаТаблицаИзмененийЗаполнитьПродолжение()

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
	////////////////////////
	// "ТаблицаИзменений"
	
	// Процедура заполняет таблицу изменений.
	//
	Процедура ЗаполнитьТаблицуИзменений()
		
		ТаблицаИзменений = ПолучитьТаблицуИзменений();
		Объект.МосковскаяОбласть2_ТаблицаИзменений.Очистить();
		
		// Формирование таблицы изменений
		Для Каждого Строка Из ТаблицаИзменений Цикл
			
			НоваяСтрока = Объект.МосковскаяОбласть2_ТаблицаИзменений.Добавить();
			
			НоваяСтрока.ЛицевойСчет = Строка.ЛицевойСчет;
			
			НоваяСтрока.KodOrg  = Формат(Объект.КодОрганизации, "ЧГ=0");
			НоваяСтрока.NazvOrg = Объект.Организация;
			НоваяСтрока.God     = Формат(Объект.Период, "ДФ=yyyy");
			НоваяСтрока.Mes     = Формат(Объект.Период, "ДФ=MM");
			НоваяСтрока.FIO     = Строка(Строка.ФИО);
			НоваяСтрока.NumLs   = Строка[Объект.ВыводЛицевыхСчетов];
			НоваяСтрока.Dt      = Строка.ДатаИзменения;
			НоваяСтрока.Sob     = Строка.Площадь;
			НоваяСтрока.TipZF   = Строка.ТипЖилья;
			НоваяСтрока.KolChLs = Строка.КоличествоЗарегистрированных;
			НоваяСтрока.Prim    = "";
			НоваяСтрока.DtSv    = Строка.ДатаДокумента;
			
		КонецЦикла;
		
	КонецПроцедуры // ЗаполнитьТаблицуИзменений()
	
	// Функция - получение таблицы изменений.
	//
	Функция ПолучитьТаблицуИзменений()
		
		Запрос = Новый Запрос;
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("ДатаНач",     НачалоМесяца(Объект.Период));
		Запрос.УстановитьПараметр("ДатаКон",     КонецМесяца(Объект.Период));
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		
		Запрос.УстановитьПараметр("ЗданиеЭтоГруппа", Объект.МосковскаяОбласть_Здание.ЭтоГруппа);
		Запрос.УстановитьПараметр("Здание",          Объект.МосковскаяОбласть_Здание);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентов.Ссылка КАК Договор
		|ПОМЕСТИТЬ втДоговорыКонтрагентов
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Организация = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет,
		|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Договор
		|ПОМЕСТИТЬ втСведенияДляВзаиморасчетовПоЛС
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(
		|			&ДатаКон,
		|			ВЫБОР
		|				КОГДА &ЗданиеЭтоГруппа
		|					ТОГДА ЛицевойСчет.Адрес.Владелец В ИЕРАРХИИ (&Здание)
		|				КОГДА &Здание <> ЗНАЧЕНИЕ(Справочник.КВП_Здания.ПустаяСсылка)
		|					ТОГДА ЛицевойСчет.Адрес.Владелец = &Здание
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	втСведенияДляВзаиморасчетовПоЛС.ЛицевойСчет
		|ПОМЕСТИТЬ втЛицевыеСчетаОрганизации
		|ИЗ
		|	втДоговорыКонтрагентов КАК втДоговорыКонтрагентов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСведенияДляВзаиморасчетовПоЛС КАК втСведенияДляВзаиморасчетовПоЛС
		|		ПО втДоговорыКонтрагентов.Договор = втСведенияДляВзаиморасчетовПоЛС.Договор";
		Запрос.Выполнить();
		
		Если Объект.ВыводитьЛьготников Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий.Владелец КАК ЛицевойСчет,
			|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий.Владелец.Адрес КАК Помещение
			|ПОМЕСТИТЬ втЛицевыеСчетаЛьготников
			|ИЗ
			|	РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(
			|			&ДатаКон,
			|			Проживающий.Владелец В
			|					(ВЫБРАТЬ
			|						втЛицевыеСчетаОрганизации.ЛицевойСчет
			|					ИЗ
			|						втЛицевыеСчетаОрганизации КАК втЛицевыеСчетаОрганизации)
			|				И ДатаИзменения <= &ДатаКон) КАК КВП_НазначенныеЛьготыСрезПоследних
			|ГДЕ
			|	КВП_НазначенныеЛьготыСрезПоследних.Действие";
			
		Иначе
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
			|	КВП_ЛицевыеСчетаСрезПоследних.Объект КАК Помещение
			|ПОМЕСТИТЬ втЛицевыеСчетаЛьготников
			|ИЗ
			|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
			|			&ДатаКон,
			|			ЛицевойСчет В
			|				(ВЫБРАТЬ
			|					втЛицевыеСчетаОрганизации.ЛицевойСчет
			|				ИЗ
			|					втЛицевыеСчетаОрганизации КАК втЛицевыеСчетаОрганизации)) КАК КВП_ЛицевыеСчетаСрезПоследних
			|ГДЕ
			|	КВП_ЛицевыеСчетаСрезПоследних.Действует";
			
		КонецЕсли;
		Запрос.Выполнить();
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
		|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Идентификатор,
		|	КВП_ЛицевыеСчетаСрезПоследних.Объект КАК Помещение,
		|	КВП_ЛицевыеСчетаСрезПоследних.Период КАК ДатаИзменения,
		|	КВП_ЛицевыеСчетаСрезПоследних.Период КАК ДатаДокумента
		|ПОМЕСТИТЬ втЛицевыеСчета
		|ИЗ
		|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
		|			&ДатаКон,
		|			ЛицевойСчет В
		|				(ВЫБРАТЬ
		|					втЛицевыеСчетаЛьготников.ЛицевойСчет
		|				ИЗ
		|					втЛицевыеСчетаЛьготников КАК втЛицевыеСчетаЛьготников)) КАК КВП_ЛицевыеСчетаСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет,
		|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец
		|ПОМЕСТИТЬ втСобственники
		|ИЗ
		|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(
		|			&ДатаКон,
		|			ЛицевойСчет В
		|				(ВЫБРАТЬ
		|					втЛицевыеСчета.ЛицевойСчет
		|				ИЗ
		|					втЛицевыеСчета КАК втЛицевыеСчета)) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение,
		|	ВЫБОР
		|		КОГДА НЕ ЕСТЬNULL(УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности, """") = """"
		|			ТОГДА ВЫБОР
		|					КОГДА УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Государственная)
		|						ТОГДА 7
		|					КОГДА УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Муниципальная)
		|						ТОГДА 1
		|					КОГДА УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Частная)
		|						ТОГДА 8
		|				КОНЕЦ
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК ТипЖилья,
		|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Период КАК ДатаИзменения,
		|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Период КАК ДатаДокумента
		|ПОМЕСТИТЬ втТипЖилогоФонда
		|ИЗ
		|	РегистрСведений.УПЖКХ_СобственностьНаПомещения.СрезПоследних(
		|			&ДатаКон,
		|			Помещение В
		|				(ВЫБРАТЬ
		|					втЛицевыеСчета.Помещение
		|				ИЗ
		|					втЛицевыеСчета КАК втЛицевыеСчета)) КАК УПЖКХ_СобственностьНаПомещенияСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет,
		|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель,
		|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель
		|ПОМЕСТИТЬ втРазмерыДолейЛС
		|ИЗ
		|	РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(
		|			&ДатаКон,
		|			ЛицевойСчет В
		|				(ВЫБРАТЬ
		|					втЛицевыеСчета.ЛицевойСчет
		|				ИЗ
		|					втЛицевыеСчета КАК втЛицевыеСчета)) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_ПлощадьПомещенияСрезПоследних.Объект КАК Помещение,
		|	КВП_ПлощадьПомещенияСрезПоследних.Площадь КАК Площадь,
		|	КВП_ПлощадьПомещенияСрезПоследних.Период КАК ДатаИзменения,
		|	КВП_ПлощадьПомещенияСрезПоследних.Период КАК ДатаДокумента
		|ПОМЕСТИТЬ втПлощадь
		|ИЗ
		|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
		|			&ДатаКон,
		|			Объект В
		|					(ВЫБРАТЬ
		|						втЛицевыеСчета.Помещение
		|					ИЗ
		|						втЛицевыеСчета КАК втЛицевыеСчета)
		|				И ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)) КАК КВП_ПлощадьПомещенияСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЛицевыеСчета.ЛицевойСчет,
		|	втЛицевыеСчета.Помещение,
		|	ВЫБОР
		|		КОГДА НЕ ЕСТЬNULL(втРазмерыДолейЛС.ДоляЗнаменатель, 0) = 0
		|			ТОГДА ВЫБОР
		|					КОГДА НЕ ЕСТЬNULL(втРазмерыДолейЛС.ДоляЧислитель, 0) = 0
		|						ТОГДА втРазмерыДолейЛС.ДоляЧислитель / втРазмерыДолейЛС.ДоляЗнаменатель * ЕСТЬNULL(втПлощадь.Площадь, 0)
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Площадь,
		|	втПлощадь.ДатаИзменения КАК ДатаИзменения,
		|	втПлощадь.ДатаДокумента
		|ПОМЕСТИТЬ втПлощадьЛС
		|ИЗ
		|	втЛицевыеСчета КАК втЛицевыеСчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПлощадь КАК втПлощадь
		|		ПО втЛицевыеСчета.Помещение = втПлощадь.Помещение
		|		ЛЕВОЕ СОЕДИНЕНИЕ втРазмерыДолейЛС КАК втРазмерыДолейЛС
		|		ПО втЛицевыеСчета.ЛицевойСчет = втРазмерыДолейЛС.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.ЛицевойСчет,
		|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.КоличествоЗарегистрированных КАК КоличествоЗарегистрированных,
		|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.Период КАК ДатаИзменения,
		|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.Период КАК ДатаДокумента
		|ПОМЕСТИТЬ втУчетКоличестваЖильцов
		|ИЗ
		|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(
		|			&ДатаКон,
		|			ЛицевойСчет В
		|				(ВЫБРАТЬ
		|					втЛицевыеСчета.ЛицевойСчет
		|				ИЗ
		|					втЛицевыеСчета КАК втЛицевыеСчета)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетам
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец) КАК КоличествоЗарегистрированных,
		|	МАКСИМУМ(УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ДатаИзменения) КАК ДатаИзменения,
		|	МАКСИМУМ(УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Период) КАК ДатаДокумента
		|ПОМЕСТИТЬ КоличествоИзСведений
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
		|			&ДатаКон,
		|			ДатаИзменения <= &ДатаКон
		|				И ЛицевойСчет В
		|					(ВЫБРАТЬ
		|						втЛицевыеСчета.ЛицевойСчет
		|					ИЗ
		|						втЛицевыеСчета КАК втЛицевыеСчета)) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
		|ГДЕ
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
		|
		|СГРУППИРОВАТЬ ПО
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами
		|			ТОГДА втУчетКоличестваЖильцов.ЛицевойСчет
		|		ИНАЧЕ КоличествоИзСведений.ЛицевойСчет
		|	КОНЕЦ КАК ЛицевойСчет,
		|	ВЫБОР
		|		КОГДА Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами
		|			ТОГДА ЕСТЬNULL(втУчетКоличестваЖильцов.КоличествоЗарегистрированных, 0)
		|		ИНАЧЕ ЕСТЬNULL(КоличествоИзСведений.КоличествоЗарегистрированных, 0)
		|	КОНЕЦ КАК КоличествоЗарегистрированных,
		|	ВЫБОР
		|		КОГДА Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами
		|			ТОГДА втУчетКоличестваЖильцов.ДатаИзменения
		|		ИНАЧЕ КоличествоИзСведений.ДатаИзменения
		|	КОНЕЦ КАК ДатаИзменения,
		|	ВЫБОР
		|		КОГДА Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами
		|			ТОГДА втУчетКоличестваЖильцов.ДатаДокумента
		|		ИНАЧЕ КоличествоИзСведений.ДатаДокумента
		|	КОНЕЦ КАК ДатаДокумента
		|ПОМЕСТИТЬ врКоличествоЗарегистрированных
		|ИЗ
		|	втУчетКоличестваЖильцов КАК втУчетКоличестваЖильцов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КоличествоИзСведений КАК КоличествоИзСведений
		|		ПО втУчетКоличестваЖильцов.ЛицевойСчет = КоличествоИзСведений.ЛицевойСчет,
		|	Константы КАК Константы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЛицевыеСчета.ЛицевойСчет,
		|	втЛицевыеСчета.ЛицевойСчетИдентификатор,
		|	втЛицевыеСчета.Помещение,
		|	ЕСТЬNULL(втСобственники.ОтветственныйВладелец, """") КАК ОтветственныйВладелец,
		|	втЛицевыеСчета.ДатаИзменения,
		|	втЛицевыеСчета.ДатаДокумента
		|ПОМЕСТИТЬ втОтветственныйВладелец
		|ИЗ
		|	втЛицевыеСчета КАК втЛицевыеСчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСобственники КАК втСобственники
		|		ПО втЛицевыеСчета.ЛицевойСчет = втСобственники.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втОтветственныйВладелец.ЛицевойСчет,
		|	втОтветственныйВладелец.ЛицевойСчетИдентификатор,
		|	втОтветственныйВладелец.Помещение,
		|	втОтветственныйВладелец.ОтветственныйВладелец,
		|	ЕСТЬNULL(втТипЖилогоФонда.ТипЖилья, """") КАК ТипЖилья,
		|	ВЫБОР
		|		КОГДА РАЗНОСТЬДАТ(ЕСТЬNULL(втТипЖилогоФонда.ДатаИзменения, ДАТАВРЕМЯ(1, 1, 1)), втОтветственныйВладелец.ДатаИзменения, ДЕНЬ) >= 0
		|			ТОГДА втОтветственныйВладелец.ДатаИзменения
		|		ИНАЧЕ втТипЖилогоФонда.ДатаИзменения
		|	КОНЕЦ КАК ДатаИзменения,
		|	ВЫБОР
		|		КОГДА РАЗНОСТЬДАТ(ЕСТЬNULL(втТипЖилогоФонда.ДатаДокумента, ДАТАВРЕМЯ(1, 1, 1)), втОтветственныйВладелец.ДатаДокумента, ДЕНЬ) >= 0
		|			ТОГДА втОтветственныйВладелец.ДатаДокумента
		|		ИНАЧЕ втТипЖилогоФонда.ДатаДокумента
		|	КОНЕЦ КАК ДатаДокумента
		|ПОМЕСТИТЬ втТипЖилья
		|ИЗ
		|	втОтветственныйВладелец КАК втОтветственныйВладелец
		|		ЛЕВОЕ СОЕДИНЕНИЕ втТипЖилогоФонда КАК втТипЖилогоФонда
		|		ПО втОтветственныйВладелец.Помещение = втТипЖилогоФонда.Помещение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТипЖилья.ЛицевойСчет,
		|	втТипЖилья.ЛицевойСчетИдентификатор,
		|	втТипЖилья.Помещение,
		|	втТипЖилья.ОтветственныйВладелец,
		|	втТипЖилья.ТипЖилья,
		|	ЕСТЬNULL(втПлощадьЛС.Площадь, 0) КАК Площадь,
		|	ВЫБОР
		|		КОГДА РАЗНОСТЬДАТ(ЕСТЬNULL(втПлощадьЛС.ДатаИзменения, ДАТАВРЕМЯ(1, 1, 1)), втТипЖилья.ДатаИзменения, ДЕНЬ) >= 0
		|			ТОГДА втТипЖилья.ДатаИзменения
		|		ИНАЧЕ втПлощадьЛС.ДатаИзменения
		|	КОНЕЦ КАК ДатаИзменения,
		|	ВЫБОР
		|		КОГДА РАЗНОСТЬДАТ(ЕСТЬNULL(втПлощадьЛС.ДатаДокумента, ДАТАВРЕМЯ(1, 1, 1)), втТипЖилья.ДатаДокумента, ДЕНЬ) >= 0
		|			ТОГДА втТипЖилья.ДатаДокумента
		|		ИНАЧЕ втПлощадьЛС.ДатаДокумента
		|	КОНЕЦ КАК ДатаДокумента
		|ПОМЕСТИТЬ втТипЖильяПлощадь
		|ИЗ
		|	втТипЖилья КАК втТипЖилья
		|		ЛЕВОЕ СОЕДИНЕНИЕ втПлощадьЛС КАК втПлощадьЛС
		|		ПО втТипЖилья.ЛицевойСчет = втПлощадьЛС.ЛицевойСчет
		|			И втТипЖилья.Помещение = втПлощадьЛС.Помещение
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТипЖильяПлощадь.ЛицевойСчет КАК ЛицевойСчет,
		|	втТипЖильяПлощадь.ЛицевойСчетИдентификатор,
		|	ПРЕДСТАВЛЕНИЕ(втТипЖильяПлощадь.ОтветственныйВладелец) КАК ФИО,
		|	втТипЖильяПлощадь.ТипЖилья,
		|	втТипЖильяПлощадь.Площадь,
		|	ЕСТЬNULL(врКоличествоЗарегистрированных.КоличествоЗарегистрированных, 0) КАК КоличествоЗарегистрированных,
		|	ВЫБОР
		|		КОГДА РАЗНОСТЬДАТ(ЕСТЬNULL(врКоличествоЗарегистрированных.ДатаИзменения, ДАТАВРЕМЯ(1, 1, 1)), втТипЖильяПлощадь.ДатаИзменения, ДЕНЬ) >= 0
		|			ТОГДА втТипЖильяПлощадь.ДатаИзменения
		|		ИНАЧЕ врКоличествоЗарегистрированных.ДатаИзменения
		|	КОНЕЦ КАК ДатаИзменения,
		|	ВЫБОР
		|		КОГДА РАЗНОСТЬДАТ(ЕСТЬNULL(врКоличествоЗарегистрированных.ДатаДокумента, ДАТАВРЕМЯ(1, 1, 1)), втТипЖильяПлощадь.ДатаДокумента, ДЕНЬ) >= 0
		|			ТОГДА втТипЖильяПлощадь.ДатаДокумента
		|		ИНАЧЕ врКоличествоЗарегистрированных.ДатаДокумента
		|	КОНЕЦ КАК ДатаДокумента
		|ПОМЕСТИТЬ втИтоговая
		|ИЗ
		|	втТипЖильяПлощадь КАК втТипЖильяПлощадь
		|		ЛЕВОЕ СОЕДИНЕНИЕ врКоличествоЗарегистрированных КАК врКоличествоЗарегистрированных
		|		ПО втТипЖильяПлощадь.ЛицевойСчет = врКоличествоЗарегистрированных.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втИтоговая.ЛицевойСчет,
		|	втИтоговая.ЛицевойСчет.Наименование КАК Наименование,
		|	втИтоговая.ЛицевойСчет.Наименование КАК ЦифрыНаименования,
		|	втИтоговая.ЛицевойСчетИдентификатор КАК Идентификатор,
		|	втИтоговая.ФИО,
		|	втИтоговая.ТипЖилья,
		|	втИтоговая.Площадь,
		|	втИтоговая.КоличествоЗарегистрированных,
		|	втИтоговая.ДатаИзменения,
		|	втИтоговая.ДатаДокумента
		|ИЗ
		|	втИтоговая КАК втИтоговая
		|ГДЕ
		|	втИтоговая.ДатаИзменения МЕЖДУ &ДатаНач И &ДатаКон";
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		Если Объект.ВыводЛицевыхСчетов = "ЦифрыНаименования" Тогда
			
			Для Каждого Строка Из Результат Цикл
				Строка.ЦифрыНаименования = ПолучитьЦифровыеСимволыИзСтроки(Строка.ЦифрыНаименования);
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции // ПолучитьТаблицуИзменений()
	
#КонецЕсли

#КонецОбласти

#Область ТаблицаВыписанныхЗаполнить

&НаКлиенте
// Обработчик команды "КомандаТаблицаВыписанныхЗаполнить".
//
Процедура КомандаТаблицаВыписанныхЗаполнить(Команда)
	
	ТекстОшибки = ПроверкаНеобходимыхДанныхДляЗагрузки();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если Объект.МосковскаяОбласть2_ТаблицаВыписанных.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаТаблицаВыписанныхЗаполнитьЗавершение", ЭтаФорма);
		
		ТекстВопроса = "Перед заполением табличная часть будет очищена. Заполнить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		КомандаТаблицаВыписанныхЗаполнитьПродолжение();
	КонецЕсли;
	
КонецПроцедуры // КомандаТаблицаВыписанныхЗаполнить()

&НаКлиенте
// Обработчик результата вопроса команды "КомандаТаблицаВыписанныхЗаполнить".
//
Процедура КомандаТаблицаВыписанныхЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		КомандаТаблицаВыписанныхЗаполнитьПродолжение();
	КонецЕсли;
	
КонецПроцедуры // КомандаТаблицаВыписанныхЗаполнитьЗавершение()

&НаКлиенте
// Продолжение общей части обработчика команды "КомандаТаблицаВыписанныхЗаполнить".
//
Процедура КомандаТаблицаВыписанныхЗаполнитьПродолжение()
	
	ЗаполнитьТаблицуВыписанных();
	
	Элементы.КП_ТаблицаВыписанныхВыгрузить.Доступность = Истина;
	
КонецПроцедуры // КомандаТаблицаВыписанныхЗаполнитьПродолжение()

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
	////////////////////////
	// "ТаблицаВыписанных"
	
	// Процедура заполняет таблицу выписанных.
	//
	Процедура ЗаполнитьТаблицуВыписанных()
		
		ТаблицаВыписанных    = ПолучитьТаблицуВыписанных();
		Объект.МосковскаяОбласть2_ТаблицаВыписанных.Очистить();
		
		// Формирование таблицы выписанных
		Для Каждого Строка Из ТаблицаВыписанных Цикл
			
			НоваяСтрока = Объект.МосковскаяОбласть2_ТаблицаВыписанных.Добавить();
			
			НоваяСтрока.ЛицевойСчет = Строка.ЛицевойСчет;
			НоваяСтрока.Проживающий = Строка.Жилец;
			
			НоваяСтрока.Fam     = Строка.Фамилия;
			НоваяСтрока.Im      = Строка.Имя;
			НоваяСтрока.Ot      = Строка.Отчество;
			НоваяСтрока.DtR     = Строка.ДатаРождения;
			НоваяСтрока.Gorod   = Строка.Город;
			НоваяСтрока.NasP    = Строка.НаселенныйПункт;
			НоваяСтрока.Ul      = Строка.Улица;
			НоваяСтрока.Dom     = Строка.Дом;
			НоваяСтрока.Korp    = Строка.Корпус;
			НоваяСтрока.Kv      = Строка(Строка.Квартира) + Строка(Строка.Суффикс);
			НоваяСтрока.NumLs   = Строка[Объект.ВыводЛицевыхСчетов];
			НоваяСтрока.DtWrk   = Строка.ДатаИзменения;
			НоваяСтрока.Pricina = "";
			НоваяСтрока.KolChLs = Строка.КоличествоЗарегистрированных;
			НоваяСтрока.DtSv    = Строка.ДатаДокумента;
			
		КонецЦикла;
		
	КонецПроцедуры // ЗаполнитьТаблицуВыписанных()
	
	// Функция - получение таблицы выписанных.
	//
	Функция ПолучитьТаблицуВыписанных()
		
		Запрос = Новый Запрос;
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		МассивВидовКонтактнойИнформации = Новый Массив;
		МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
		
		Запрос.УстановитьПараметр("ДатаКон",     КонецМесяца(Объект.Период));
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		
		Запрос.УстановитьПараметр("ЗданиеЭтоГруппа", Объект.МосковскаяОбласть_Здание.ЭтоГруппа);
		Запрос.УстановитьПараметр("Здание",          Объект.МосковскаяОбласть_Здание);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентов.Ссылка КАК Договор
		|ПОМЕСТИТЬ втДоговорыКонтрагентов
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Организация = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет,
		|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Договор
		|ПОМЕСТИТЬ втСведенияДляВзаиморасчетовПоЛС
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(
		|			&ДатаКон,
		|			ВЫБОР
		|				КОГДА &ЗданиеЭтоГруппа
		|					ТОГДА ЛицевойСчет.Адрес.Владелец В ИЕРАРХИИ (&Здание)
		|				КОГДА &Здание <> ЗНАЧЕНИЕ(Справочник.КВП_Здания.ПустаяСсылка)
		|					ТОГДА ЛицевойСчет.Адрес.Владелец = &Здание
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	втСведенияДляВзаиморасчетовПоЛС.ЛицевойСчет
		|ПОМЕСТИТЬ втЛицевыеСчетаОрганизации
		|ИЗ
		|	втДоговорыКонтрагентов КАК втДоговорыКонтрагентов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСведенияДляВзаиморасчетовПоЛС КАК втСведенияДляВзаиморасчетовПоЛС
		|		ПО втДоговорыКонтрагентов.Договор = втСведенияДляВзаиморасчетовПоЛС.Договор";
		Запрос.Выполнить();
		
		Если Объект.ВыводитьЛьготников Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий.Владелец КАК ЛицевойСчет,
			|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий.Владелец.Адрес КАК Помещение
			|ПОМЕСТИТЬ втЛицевыеСчетаЛьготников
			|ИЗ
			|	РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(
			|			&ДатаКон,
			|			Проживающий.Владелец В
			|					(ВЫБРАТЬ
			|						втЛицевыеСчетаОрганизации.ЛицевойСчет
			|					ИЗ
			|						втЛицевыеСчетаОрганизации КАК втЛицевыеСчетаОрганизации)
			|				И ДатаИзменения <= &ДатаКон) КАК КВП_НазначенныеЛьготыСрезПоследних
			|ГДЕ
			|	КВП_НазначенныеЛьготыСрезПоследних.Действие";
			
		Иначе
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
			|	КВП_ЛицевыеСчетаСрезПоследних.Объект КАК Помещение
			|ПОМЕСТИТЬ втЛицевыеСчетаЛьготников
			|ИЗ
			|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
			|			&ДатаКон,
			|			ЛицевойСчет В
			|				(ВЫБРАТЬ
			|					втЛицевыеСчетаОрганизации.ЛицевойСчет
			|				ИЗ
			|					втЛицевыеСчетаОрганизации КАК втЛицевыеСчетаОрганизации)) КАК КВП_ЛицевыеСчетаСрезПоследних
			|ГДЕ
			|	КВП_ЛицевыеСчетаСрезПоследних.Действует";
			
		КонецЕсли;
		Запрос.Выполнить();
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	УПЖКХ_Жильцы.Ссылка КАК Жилец,
		|	УПЖКХ_Жильцы.ФизЛицо.ДатаРождения КАК ДатаРождения,
		|	УПЖКХ_Жильцы.Владелец.Адрес.Владелец КАК Владелец,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Имя, """") КАК Имя,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Отчество, """") КАК Отчество,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия, """") КАК Фамилия
		|ПОМЕСТИТЬ врТаблЖильцов
		|ИЗ
		|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ДатаКон, ) КАК ФИОФизЛицСрезПоследних
		|		ПО УПЖКХ_Жильцы.ФизЛицо = ФИОФизЛицСрезПоследних.ФизическоеЛицо
		|ГДЕ
		|	УПЖКХ_Жильцы.Владелец В
		|			(ВЫБРАТЬ
		|				втЛицевыеСчетаЛьготников.ЛицевойСчет
		|			ИЗ
		|				втЛицевыеСчетаЛьготников КАК втЛицевыеСчетаЛьготников)";
		Запрос.Выполнить();
		
		ЗапросПоЗданиям = Новый Запрос;
		ЗапросПоЗданиям.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
		ЗапросПоЗданиям.Текст = 
		"ВЫБРАТЬ
		|	врТаблЖильцов.Владелец КАК Объект
		|ИЗ
		|	врТаблЖильцов КАК врТаблЖильцов
		|
		|СГРУППИРОВАТЬ ПО
		|	врТаблЖильцов.Владелец";
		
		МассивОбъектов = ЗапросПоЗданиям.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
		
		// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
		УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	втКонтактнаяИнформация.Объект,
		|	втКонтактнаяИнформация.Город,
		|	втКонтактнаяИнформация.НаселенныйПункт,
		|	втКонтактнаяИнформация.Улица,
		|	втКонтактнаяИнформация.Дом,
		|	втКонтактнаяИнформация.Корпус
		|ПОМЕСТИТЬ врТаблАдрес
		|ИЗ
		|	втКонтактнаяИнформация КАК втКонтактнаяИнформация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет,
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец,
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован,
		|	ЕСТЬNULL(врТаблАдрес.Город, """") КАК Город,
		|	ЕСТЬNULL(врТаблАдрес.НаселенныйПункт, """") КАК НаселенныйПункт,
		|	ЕСТЬNULL(врТаблАдрес.Улица, """") КАК Улица,
		|	ЕСТЬNULL(врТаблАдрес.Дом, """") КАК Дом,
		|	ЕСТЬNULL(врТаблАдрес.Корпус, """") КАК Корпус,
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ДатаИзменения,
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет.Адрес.Код КАК Квартира,
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет.Адрес.Суффикс КАК Суффикс,
		|	врТаблЖильцов.ДатаРождения,
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Регистратор.Дата КАК ДатаДокумента,
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет.Идентификатор,
		|	врТаблЖильцов.Фамилия,
		|	врТаблЖильцов.Имя,
		|	врТаблЖильцов.Отчество
		|ПОМЕСТИТЬ втЛицевыеСчета
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
		|			&ДатаКон,
		|			ЛицевойСчет В
		|					(ВЫБРАТЬ
		|						втЛицевыеСчетаЛьготников.ЛицевойСчет
		|					ИЗ
		|						втЛицевыеСчетаЛьготников КАК втЛицевыеСчетаЛьготников)
		|				И (ДатаИзменения МЕЖДУ &ДатаНач И &ДатаКон)) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ врТаблЖильцов КАК врТаблЖильцов
		|			ЛЕВОЕ СОЕДИНЕНИЕ врТаблАдрес КАК врТаблАдрес
		|			ПО врТаблЖильцов.Владелец = врТаблАдрес.Объект
		|		ПО УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец = врТаблЖильцов.Жилец
		|ГДЕ
		|	НЕ УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.ЛицевойСчет,
		|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.КоличествоЗарегистрированных
		|ПОМЕСТИТЬ втУчетКоличестваЖильцов
		|ИЗ
		|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(
		|			&ДатаКон,
		|			ЛицевойСчет В
		|				(ВЫБРАТЬ
		|					втЛицевыеСчета.ЛицевойСчет
		|				ИЗ
		|					втЛицевыеСчета КАК втЛицевыеСчета)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец) КАК КоличествоЗарегистрированных
		|ПОМЕСТИТЬ КоличествоИзСведений
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
		|			&ДатаКон,
		|			ДатаИзменения <= &ДатаКон
		|				И ЛицевойСчет В
		|					(ВЫБРАТЬ
		|						втЛицевыеСчета.ЛицевойСчет
		|					ИЗ
		|						втЛицевыеСчета КАК втЛицевыеСчета)) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
		|ГДЕ
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
		|
		|СГРУППИРОВАТЬ ПО
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами
		|			ТОГДА ЕСТЬNULL(втУчетКоличестваЖильцов.КоличествоЗарегистрированных, 0)
		|		ИНАЧЕ ЕСТЬNULL(КоличествоИзСведений.КоличествоЗарегистрированных, 0)
		|	КОНЕЦ КАК КоличествоЗарегистрированных,
		|	ВЫБОР
		|		КОГДА Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами
		|			ТОГДА втУчетКоличестваЖильцов.ЛицевойСчет
		|		ИНАЧЕ КоличествоИзСведений.ЛицевойСчет
		|	КОНЕЦ КАК ЛицевойСчет
		|ПОМЕСТИТЬ врКоличествоЗарегистрированных
		|ИЗ
		|	КоличествоИзСведений КАК КоличествоИзСведений
		|		ПОЛНОЕ СОЕДИНЕНИЕ втУчетКоличестваЖильцов КАК втУчетКоличестваЖильцов
		|		ПО КоличествоИзСведений.ЛицевойСчет = втУчетКоличестваЖильцов.ЛицевойСчет,
		|	Константы КАК Константы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЛицевыеСчета.ЛицевойСчет,
		|	втЛицевыеСчета.ЛицевойСчет.Наименование КАК Наименование,
		|	втЛицевыеСчета.ЛицевойСчет.Наименование КАК ЦифрыНаименования,
		|	втЛицевыеСчета.ЛицевойСчетИдентификатор КАК Идентификатор,
		|	втЛицевыеСчета.Жилец,
		|	втЛицевыеСчета.Зарегистрирован,
		|	втЛицевыеСчета.Город,
		|	втЛицевыеСчета.НаселенныйПункт,
		|	втЛицевыеСчета.Улица,
		|	втЛицевыеСчета.Дом,
		|	втЛицевыеСчета.Корпус,
		|	втЛицевыеСчета.ДатаИзменения,
		|	втЛицевыеСчета.Квартира,
		|	втЛицевыеСчета.Суффикс,
		|	втЛицевыеСчета.ДатаРождения,
		|	втЛицевыеСчета.ДатаДокумента,
		|	втЛицевыеСчета.Фамилия,
		|	втЛицевыеСчета.Имя,
		|	втЛицевыеСчета.Отчество,
		|	ЕСТЬNULL(врКоличествоЗарегистрированных.КоличествоЗарегистрированных, 0) КАК КоличествоЗарегистрированных
		|ИЗ
		|	втЛицевыеСчета КАК втЛицевыеСчета
		|		ЛЕВОЕ СОЕДИНЕНИЕ врКоличествоЗарегистрированных КАК врКоличествоЗарегистрированных
		|		ПО втЛицевыеСчета.ЛицевойСчет = врКоличествоЗарегистрированных.ЛицевойСчет";
		
		Запрос.УстановитьПараметр("ДатаНач", НачалоМесяца(Объект.Период));
		Запрос.УстановитьПараметр("ДатаКон", КонецМесяца(Объект.Период));
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		Если Объект.ВыводЛицевыхСчетов = "ЦифрыНаименования" Тогда
			
			Для Каждого Строка Из Результат Цикл
				Строка.ЦифрыНаименования = ПолучитьЦифровыеСимволыИзСтроки(Строка.ЦифрыНаименования);
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
#КонецЕсли

#КонецОбласти

#Область ТаблицаОтсутствующихЗаполнить

&НаКлиенте
// Обработчик команды "КомандаТаблицаОтсутствующихЗаполнить".
//
Процедура КомандаТаблицаОтсутствующихЗаполнить(Команда)
	
	ТекстОшибки = ПроверкаНеобходимыхДанныхДляЗагрузки();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если Объект.МосковскаяОбласть2_ТаблицаОтсутствующих.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаТаблицаОтсутствующихЗаполнитьЗавершение", ЭтаФорма);
		
		ТекстВопроса = "Перед заполением табличная часть будет очищена. Заполнить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		КомандаТаблицаОтсутствующихЗаполнитьПродолжение();
	КонецЕсли;
	
КонецПроцедуры // КомандаТаблицаОтсутствующихЗаполнить()

&НаКлиенте
// Обработчик результата вопроса команды "КомандаТаблицаОтсутствующихЗаполнить".
//
Процедура КомандаТаблицаОтсутствующихЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		КомандаТаблицаОтсутствующихЗаполнитьПродолжение();
	КонецЕсли;
	
КонецПроцедуры // КомандаТаблицаОтсутствующихЗаполнитьЗавершение()

&НаКлиенте
// Продолжение общей части обработчика команды "КомандаТаблицаОтсутствующихЗаполнить".
//
Процедура КомандаТаблицаОтсутствующихЗаполнитьПродолжение()
	
	ЗаполнитьТаблицуОтсутсвующих();
	
	Элементы.КП_ТаблицаОтсутствующихВыгрузить.Доступность = Истина;
	
КонецПроцедуры // КомандаТаблицаОтсутствующихЗаполнитьПродолжение()

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
	////////////////////////
	// "ТаблицаОтсутствующих"
	
	// Процедура заполняет таблицу отсутствующих.
	//
	Процедура ЗаполнитьТаблицуОтсутсвующих()
		
		ТаблицаОтсутствующих = ПолучитьТаблицуОтсутствующих();
		Объект.МосковскаяОбласть2_ТаблицаОтсутствующих.Очистить();
		
		// Формирование таблицы отсутствующих.
		Для Каждого Строка Из ТаблицаОтсутствующих Цикл
			
			НоваяСтрока = Объект.МосковскаяОбласть2_ТаблицаОтсутствующих.Добавить();
			
			НоваяСтрока.ЛицевойСчет = Строка.ЛицевойСчет;
			НоваяСтрока.Проживающий = Строка.Жилец;
			
			НоваяСтрока.Fam     = Строка.Фамилия;
			НоваяСтрока.Im      = Строка.Имя;
			НоваяСтрока.Ot      = Строка.Отчество;
			НоваяСтрока.DtR     = Строка.ДатаРождения;
			НоваяСтрока.DtOtsS  = Строка.ДатаНачОтс;
			НоваяСтрока.DtOtsPo = Строка.ДатаКонОтс;
			НоваяСтрока.NumLs   = Строка[Объект.ВыводЛицевыхСчетов];
			НоваяСтрока.DtSv    = Строка.ДатаДокумента;
			
		КонецЦикла;
		
	КонецПроцедуры // ЗаполнитьТаблицуОтсутсвующих()
	
	// Функция - получение таблицы отсутствующих.
	//
	Функция ПолучитьТаблицуОтсутствующих()
		
		// Получаем информацию на начало периода
		Запрос = Новый Запрос;
		
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		Запрос.УстановитьПараметр("ДатаКон",     КонецМесяца(Объект.Период));
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		
		Запрос.УстановитьПараметр("ЗданиеЭтоГруппа", Объект.МосковскаяОбласть_Здание.ЭтоГруппа);
		Запрос.УстановитьПараметр("Здание",          Объект.МосковскаяОбласть_Здание);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентов.Ссылка КАК Договор
		|ПОМЕСТИТЬ втДоговорыКонтрагентов
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Организация = &Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет,
		|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Договор
		|ПОМЕСТИТЬ втСведенияДляВзаиморасчетовПоЛС
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(
		|			&ДатаКон,
		|			ВЫБОР
		|				КОГДА &ЗданиеЭтоГруппа
		|					ТОГДА ЛицевойСчет.Адрес.Владелец В ИЕРАРХИИ (&Здание)
		|				КОГДА &Здание <> ЗНАЧЕНИЕ(Справочник.КВП_Здания.ПустаяСсылка)
		|					ТОГДА ЛицевойСчет.Адрес.Владелец = &Здание
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	втСведенияДляВзаиморасчетовПоЛС.ЛицевойСчет
		|ПОМЕСТИТЬ втЛицевыеСчетаОрганизации
		|ИЗ
		|	втДоговорыКонтрагентов КАК втДоговорыКонтрагентов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСведенияДляВзаиморасчетовПоЛС КАК втСведенияДляВзаиморасчетовПоЛС
		|		ПО втДоговорыКонтрагентов.Договор = втСведенияДляВзаиморасчетовПоЛС.Договор";
		Запрос.Выполнить();
		
		Если Объект.ВыводитьЛьготников Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий.Владелец КАК ЛицевойСчет,
			|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий.Владелец.Адрес КАК Помещение
			|ПОМЕСТИТЬ втЛицевыеСчетаЛьготников
			|ИЗ
			|	РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(
			|			&ДатаКон,
			|			Проживающий.Владелец В
			|					(ВЫБРАТЬ
			|						втЛицевыеСчетаОрганизации.ЛицевойСчет
			|					ИЗ
			|						втЛицевыеСчетаОрганизации КАК втЛицевыеСчетаОрганизации)
			|				И ДатаИзменения <= &ДатаКон) КАК КВП_НазначенныеЛьготыСрезПоследних
			|ГДЕ
			|	КВП_НазначенныеЛьготыСрезПоследних.Действие";
			
		Иначе
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
			|	КВП_ЛицевыеСчетаСрезПоследних.Объект КАК Помещение
			|ПОМЕСТИТЬ втЛицевыеСчетаЛьготников
			|ИЗ
			|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
			|			&ДатаКон,
			|			ЛицевойСчет В
			|				(ВЫБРАТЬ
			|					втЛицевыеСчетаОрганизации.ЛицевойСчет
			|				ИЗ
			|					втЛицевыеСчетаОрганизации КАК втЛицевыеСчетаОрганизации)) КАК КВП_ЛицевыеСчетаСрезПоследних
			|ГДЕ
			|	КВП_ЛицевыеСчетаСрезПоследних.Действует";
			
		КонецЕсли;
		Запрос.Выполнить();
		
		ЗапросЗначенийНаНачалоПериода = Новый Запрос;
		
		ЗапросЗначенийНаНачалоПериода.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
		
		ЗапросЗначенийНаНачалоПериода.Текст =
		"ВЫБРАТЬ
		|	УПЖКХ_Жильцы.Ссылка КАК Жилец,
		|	УПЖКХ_Жильцы.ФизЛицо.ДатаРождения КАК ДатаРождения,
		|	УПЖКХ_Жильцы.Владелец КАК ЛицевойСчет,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия, """") КАК Фамилия,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Имя, """") КАК Имя,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Отчество, """") КАК Отчество
		|ПОМЕСТИТЬ врТаблЖильцов
		|ИЗ
		|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ДатаНач, ) КАК ФИОФизЛицСрезПоследних
		|		ПО УПЖКХ_Жильцы.ФизЛицо = ФИОФизЛицСрезПоследних.ФизическоеЛицо
		|ГДЕ
		|	УПЖКХ_Жильцы.Владелец В
		|			(ВЫБРАТЬ
		|				втЛицевыеСчетаЛьготников.ЛицевойСчет
		|			ИЗ
		|				втЛицевыеСчетаЛьготников КАК втЛицевыеСчетаЛьготников)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	врТаблЖильцов.ДатаРождения,
		|	КВП_ИзменениеЛицевогоСчетаГлавная.ДатаРегистрации КАК ДатаНачОтс,
		|	КВП_ИзменениеЛицевогоСчетаГлавная.ДатаОтменыИзменения КАК ДатаКонОтс,
		|	врТаблЖильцов.ЛицевойСчет,
		|	врТаблЖильцов.Жилец,
		|	УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает,
		|	УПЖКХ_СведенияОПроживающихСрезПоследних.ДатаИзменения,
		|	УПЖКХ_СведенияОПроживающихСрезПоследних.Регистратор.Дата КАК ДатаДокумента,
		|	врТаблЖильцов.ЛицевойСчет.Идентификатор,
		|	врТаблЖильцов.Фамилия,
		|	врТаблЖильцов.Имя,
		|	врТаблЖильцов.Отчество
		|ИЗ
		|	врТаблЖильцов КАК врТаблЖильцов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
		|				&ДатаНач,
		|				Регистратор.ВидИзменения = &ВидИзменения
		|					И ДатаИзменения < &ДатаНач) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КВП_ИзменениеЛицевогоСчета.Главная КАК КВП_ИзменениеЛицевогоСчетаГлавная
		|			ПО УПЖКХ_СведенияОПроживающихСрезПоследних.Регистратор = КВП_ИзменениеЛицевогоСчетаГлавная.Ссылка
		|				И УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец = КВП_ИзменениеЛицевогоСчетаГлавная.Проживающий
		|		ПО врТаблЖильцов.Жилец = УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец
		|ГДЕ
		|	НЕ УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает
		|	И НЕ ЕСТЬNULL(КВП_ИзменениеЛицевогоСчетаГлавная.ДатаОтменыИзменения, """") = """"";
		
		ЗапросЗначенийНаНачалоПериода.УстановитьПараметр("ДатаНач",      НачалоМесяца(Объект.Период));
		ЗапросЗначенийНаНачалоПериода.УстановитьПараметр("ВидИзменения", Перечисления.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Отсутствие);
		
		ТаблицаЗначенийНаНачалоПериода = ЗапросЗначенийНаНачалоПериода.Выполнить().Выгрузить();
		
		// Получаем информацию по всему периоду
		ЗапросЗначенийНаВесьПериод = Новый Запрос;
		
		ЗапросЗначенийНаВесьПериод.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
		
		ЗапросЗначенийНаВесьПериод.Текст =
		"УНИЧТОЖИТЬ врТаблЖильцов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УПЖКХ_Жильцы.Ссылка КАК Жилец,
		|	УПЖКХ_Жильцы.ФизЛицо.ДатаРождения КАК ДатаРождения,
		|	УПЖКХ_Жильцы.Владелец КАК ЛицевойСчет,
		|	ЕСТЬNULL(ФИОФизЛиц.Фамилия, """") КАК Фамилия,
		|	ЕСТЬNULL(ФИОФизЛиц.Имя, """") КАК Имя,
		|	ЕСТЬNULL(ФИОФизЛиц.Отчество, """") КАК Отчество
		|ПОМЕСТИТЬ врТаблЖильцов
		|ИЗ
		|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц КАК ФИОФизЛиц
		|		ПО УПЖКХ_Жильцы.ФизЛицо = ФИОФизЛиц.ФизическоеЛицо
		|ГДЕ
		|	УПЖКХ_Жильцы.Владелец В
		|			(ВЫБРАТЬ
		|				втЛицевыеСчетаЛьготников.ЛицевойСчет
		|			ИЗ
		|				втЛицевыеСчетаЛьготников КАК втЛицевыеСчетаЛьготников)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	врТаблЖильцов.ДатаРождения,
		|	КВП_ИзменениеЛицевогоСчетаГлавная.ДатаРегистрации КАК ДатаНачОтс,
		|	КВП_ИзменениеЛицевогоСчетаГлавная.ДатаОтменыИзменения КАК ДатаКонОтс,
		|	врТаблЖильцов.ЛицевойСчет,
		|	врТаблЖильцов.Жилец,
		|	УПЖКХ_СведенияОПроживающих.Проживает,
		|	УПЖКХ_СведенияОПроживающих.ДатаИзменения КАК ДатаИзменения,
		|	УПЖКХ_СведенияОПроживающих.Регистратор.Дата КАК ДатаДокумента,
		|	врТаблЖильцов.ЛицевойСчет.Идентификатор,
		|	врТаблЖильцов.Фамилия,
		|	врТаблЖильцов.Имя,
		|	врТаблЖильцов.Отчество
		|ИЗ
		|	врТаблЖильцов КАК врТаблЖильцов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОПроживающих КАК УПЖКХ_СведенияОПроживающих
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КВП_ИзменениеЛицевогоСчета.Главная КАК КВП_ИзменениеЛицевогоСчетаГлавная
		|			ПО УПЖКХ_СведенияОПроживающих.Регистратор = КВП_ИзменениеЛицевогоСчетаГлавная.Ссылка
		|				И УПЖКХ_СведенияОПроживающих.Жилец = КВП_ИзменениеЛицевогоСчетаГлавная.Проживающий
		|		ПО врТаблЖильцов.Жилец = УПЖКХ_СведенияОПроживающих.Жилец
		|ГДЕ
		|	НЕ ЕСТЬNULL(КВП_ИзменениеЛицевогоСчетаГлавная.ДатаОтменыИзменения, """") = """"
		|	И УПЖКХ_СведенияОПроживающих.ДатаИзменения МЕЖДУ &ДатаНач И &ДатаКон
		|	И УПЖКХ_СведенияОПроживающих.Регистратор.ВидИзменения = &ВидИзменения
		|
		|СГРУППИРОВАТЬ ПО
		|	КВП_ИзменениеЛицевогоСчетаГлавная.ДатаРегистрации,
		|	врТаблЖильцов.Жилец,
		|	врТаблЖильцов.ДатаРождения,
		|	врТаблЖильцов.ЛицевойСчет,
		|	КВП_ИзменениеЛицевогоСчетаГлавная.ДатаОтменыИзменения,
		|	УПЖКХ_СведенияОПроживающих.Проживает,
		|	УПЖКХ_СведенияОПроживающих.ДатаИзменения,
		|	УПЖКХ_СведенияОПроживающих.Регистратор.Дата,
		|	врТаблЖильцов.ЛицевойСчет.Идентификатор,
		|	врТаблЖильцов.Фамилия,
		|	врТаблЖильцов.Имя,
		|	врТаблЖильцов.Отчество";
		
		ЗапросЗначенийНаВесьПериод.УстановитьПараметр("ДатаНач",      НачалоМесяца(Объект.Период));
		ЗапросЗначенийНаВесьПериод.УстановитьПараметр("ДатаКон",      КонецМесяца(Объект.Период));
		ЗапросЗначенийНаВесьПериод.УстановитьПараметр("ВидИзменения", Перечисления.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Отсутствие);
		
		ТаблицаЗначенийНаВесьПериод = ЗапросЗначенийНаВесьПериод.Выполнить().Выгрузить();
		
		// Получаем информацию на конец периода
		ЗапросЗначенийНаКонецПериода = Новый Запрос;
		
		ЗапросЗначенийНаКонецПериода.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
		
		ЗапросЗначенийНаКонецПериода.Текст =
		"УНИЧТОЖИТЬ врТаблЖильцов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия, """") КАК Фамилия,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Имя, """") КАК Имя,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Отчество, """") КАК Отчество,
		|	УПЖКХ_Жильцы.Ссылка КАК Жилец,
		|	УПЖКХ_Жильцы.ФизЛицо.ДатаРождения КАК ДатаРождения,
		|	УПЖКХ_Жильцы.Владелец КАК ЛицевойСчет
		|ПОМЕСТИТЬ врТаблЖильцов
		|ИЗ
		|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ДатаКон, ) КАК ФИОФизЛицСрезПоследних
		|		ПО (ФИОФизЛицСрезПоследних.ФизическоеЛицо = УПЖКХ_Жильцы.ФизЛицо)
		|ГДЕ
		|	УПЖКХ_Жильцы.Владелец В
		|			(ВЫБРАТЬ
		|				втЛицевыеСчетаЛьготников.ЛицевойСчет
		|			ИЗ
		|				втЛицевыеСчетаЛьготников КАК втЛицевыеСчетаЛьготников)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	врТаблЖильцов.ДатаРождения,
		|	КВП_ИзменениеЛицевогоСчетаГлавная.ДатаРегистрации КАК ДатаНачОтс,
		|	КВП_ИзменениеЛицевогоСчетаГлавная.ДатаОтменыИзменения КАК ДатаКонОтс,
		|	врТаблЖильцов.ЛицевойСчет,
		|	врТаблЖильцов.Жилец,
		|	УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает,
		|	УПЖКХ_СведенияОПроживающихСрезПоследних.ДатаИзменения,
		|	УПЖКХ_СведенияОПроживающихСрезПоследних.Регистратор.Дата КАК ДатаДокумента,
		|	врТаблЖильцов.ЛицевойСчет.Идентификатор,
		|	врТаблЖильцов.Фамилия,
		|	врТаблЖильцов.Имя,
		|	врТаблЖильцов.Отчество
		|ИЗ
		|	врТаблЖильцов КАК врТаблЖильцов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
		|				&ДатаКон,
		|				Регистратор.ВидИзменения = &ВидИзменения
		|					И ДатаИзменения > &ДатаКон) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КВП_ИзменениеЛицевогоСчета.Главная КАК КВП_ИзменениеЛицевогоСчетаГлавная
		|			ПО УПЖКХ_СведенияОПроживающихСрезПоследних.Регистратор = КВП_ИзменениеЛицевогоСчетаГлавная.Ссылка
		|				И УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец = КВП_ИзменениеЛицевогоСчетаГлавная.Проживающий
		|		ПО врТаблЖильцов.Жилец = УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец
		|ГДЕ
		|	УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает
		|	И НЕ ЕСТЬNULL(КВП_ИзменениеЛицевогоСчетаГлавная.ДатаОтменыИзменения, """") = """"
		|	И КВП_ИзменениеЛицевогоСчетаГлавная.ДатаРегистрации < &ДатаКон";
		
		ЗапросЗначенийНаКонецПериода.УстановитьПараметр("ДатаКон",      КонецМесяца(Объект.Период));
		ЗапросЗначенийНаКонецПериода.УстановитьПараметр("ВидИзменения", Перечисления.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Отсутствие);
		
		ТаблицаЗначенийНаКонецПериода = ЗапросЗначенийНаКонецПериода.Выполнить().Выгрузить();
		
		// Объединяем все три таблицы запросов и анализируем ее
		Запрос = Новый Запрос;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДанныеНаНачало.ЛицевойСчет,
		|	ДанныеНаНачало.Жилец,
		|	ДанныеНаНачало.Фамилия,
		|	ДанныеНаНачало.Имя,
		|	ДанныеНаНачало.Отчество,
		|	ДанныеНаНачало.ДатаНачОтс,
		|	ДанныеНаНачало.ДатаКонОтс,
		|	ДанныеНаНачало.ДатаРождения,
		|	ДанныеНаНачало.ДатаДокумента,
		|	ДанныеНаНачало.ЛицевойСчетИдентификатор
		|ПОМЕСТИТЬ втДанныеНаНачало
		|ИЗ
		|	&ДанныеНаНачало КАК ДанныеНаНачало
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеЗаПериод.ЛицевойСчет,
		|	ДанныеЗаПериод.Жилец,
		|	ДанныеЗаПериод.Фамилия,
		|	ДанныеЗаПериод.Имя,
		|	ДанныеЗаПериод.Отчество,
		|	ДанныеЗаПериод.ДатаНачОтс,
		|	ДанныеЗаПериод.ДатаКонОтс,
		|	ДанныеЗаПериод.ДатаРождения,
		|	ДанныеЗаПериод.ДатаДокумента,
		|	ДанныеЗаПериод.ЛицевойСчетИдентификатор
		|ПОМЕСТИТЬ втДанныеЗаПериод
		|ИЗ
		|	&ДанныеЗаПериод КАК ДанныеЗаПериод
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеНаКонец.ЛицевойСчет,
		|	ДанныеНаКонец.Жилец,
		|	ДанныеНаКонец.Фамилия,
		|	ДанныеНаКонец.Имя,
		|	ДанныеНаКонец.Отчество,
		|	ДанныеНаКонец.ДатаНачОтс,
		|	ДанныеНаКонец.ДатаКонОтс,
		|	ДанныеНаКонец.ДатаРождения,
		|	ДанныеНаКонец.ДатаДокумента,
		|	ДанныеНаКонец.ЛицевойСчетИдентификатор
		|ПОМЕСТИТЬ втДанныеНаКонец
		|ИЗ
		|	&ДанныеНаКонец КАК ДанныеНаКонец
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(втДанныеЗаПериод.ЛицевойСчет, ЕСТЬNULL(втДанныеНаКонец.ЛицевойСчет, втДанныеНаНачало.ЛицевойСчет)) КАК ЛицевойСчет,
		|	ЕСТЬNULL(втДанныеЗаПериод.Жилец, ЕСТЬNULL(втДанныеНаКонец.Жилец, втДанныеНаНачало.Жилец)) КАК Жилец,
		|	ЕСТЬNULL(втДанныеЗаПериод.Фамилия, ЕСТЬNULL(втДанныеНаКонец.Фамилия, втДанныеНаНачало.Фамилия)) КАК Фамилия,
		|	ЕСТЬNULL(втДанныеЗаПериод.Имя, ЕСТЬNULL(втДанныеНаКонец.Имя, втДанныеНаНачало.Имя)) КАК Имя,
		|	ЕСТЬNULL(втДанныеЗаПериод.Отчество, ЕСТЬNULL(втДанныеНаКонец.Отчество, втДанныеНаНачало.Отчество)) КАК Отчество,
		|	ЕСТЬNULL(втДанныеЗаПериод.ДатаНачОтс, ЕСТЬNULL(втДанныеНаКонец.ДатаНачОтс, втДанныеНаНачало.ДатаНачОтс)) КАК ДатаНачОтс,
		|	ЕСТЬNULL(втДанныеЗаПериод.ДатаКонОтс, ЕСТЬNULL(втДанныеНаКонец.ДатаКонОтс, втДанныеНаНачало.ДатаКонОтс)) КАК ДатаКонОтс,
		|	ЕСТЬNULL(втДанныеЗаПериод.ДатаРождения, ЕСТЬNULL(втДанныеНаКонец.ДатаРождения, втДанныеНаНачало.ДатаРождения)) КАК ДатаРождения,
		|	ЕСТЬNULL(втДанныеЗаПериод.ДатаДокумента, ЕСТЬNULL(втДанныеНаКонец.ДатаДокумента, втДанныеНаНачало.ДатаДокумента)) КАК ДатаДокумента,
		|	ЕСТЬNULL(втДанныеЗаПериод.ЛицевойСчетИдентификатор, ЕСТЬNULL(втДанныеНаКонец.ЛицевойСчетИдентификатор, втДанныеНаНачало.ЛицевойСчетИдентификатор)) КАК ЛицевойСчетИдентификатор
		|ПОМЕСТИТЬ втИтоговая
		|ИЗ
		|	втДанныеНаНачало КАК втДанныеНаНачало
		|		ПОЛНОЕ СОЕДИНЕНИЕ втДанныеЗаПериод КАК втДанныеЗаПериод
		|		ПО втДанныеНаНачало.Жилец = втДанныеЗаПериод.Жилец
		|		ПОЛНОЕ СОЕДИНЕНИЕ втДанныеНаКонец КАК втДанныеНаКонец
		|		ПО втДанныеНаНачало.Жилец = втДанныеНаКонец.Жилец
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСТЬNULL(втДанныеЗаПериод.ДатаНачОтс, ЕСТЬNULL(втДанныеНаКонец.ДатаНачОтс, втДанныеНаНачало.ДатаНачОтс)),
		|	ЕСТЬNULL(втДанныеЗаПериод.ДатаКонОтс, ЕСТЬNULL(втДанныеНаКонец.ДатаКонОтс, втДанныеНаНачало.ДатаКонОтс)),
		|	ЕСТЬNULL(втДанныеЗаПериод.ДатаРождения, ЕСТЬNULL(втДанныеНаКонец.ДатаРождения, втДанныеНаНачало.ДатаРождения)),
		|	ЕСТЬNULL(втДанныеЗаПериод.ДатаДокумента, ЕСТЬNULL(втДанныеНаКонец.ДатаДокумента, втДанныеНаНачало.ДатаДокумента)),
		|	ЕСТЬNULL(втДанныеЗаПериод.ЛицевойСчетИдентификатор, ЕСТЬNULL(втДанныеНаКонец.ЛицевойСчетИдентификатор, втДанныеНаНачало.ЛицевойСчетИдентификатор)),
		|	ЕСТЬNULL(втДанныеЗаПериод.Жилец, ЕСТЬNULL(втДанныеНаКонец.Жилец, втДанныеНаНачало.Жилец)),
		|	ЕСТЬNULL(втДанныеЗаПериод.Фамилия, ЕСТЬNULL(втДанныеНаКонец.Фамилия, втДанныеНаНачало.Фамилия)),
		|	ЕСТЬNULL(втДанныеЗаПериод.Имя, ЕСТЬNULL(втДанныеНаКонец.Имя, втДанныеНаНачало.Имя)),
		|	ЕСТЬNULL(втДанныеЗаПериод.Отчество, ЕСТЬNULL(втДанныеНаКонец.Отчество, втДанныеНаНачало.Отчество)),
		|	ЕСТЬNULL(втДанныеЗаПериод.ЛицевойСчет, ЕСТЬNULL(втДанныеНаКонец.ЛицевойСчет, втДанныеНаНачало.ЛицевойСчет))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втИтоговая.ЛицевойСчет,
		|	втИтоговая.ЛицевойСчет.Наименование КАК Наименование,
		|	втИтоговая.ЛицевойСчет.Наименование КАК ЦифрыНаименования,
		|	втИтоговая.ЛицевойСчетИдентификатор КАК Идентификатор,
		|	втИтоговая.Жилец,
		|	втИтоговая.Фамилия,
		|	втИтоговая.Имя,
		|	втИтоговая.Отчество,
		|	втИтоговая.ДатаНачОтс,
		|	втИтоговая.ДатаКонОтс,
		|	втИтоговая.ДатаРождения,
		|	втИтоговая.ДатаДокумента
		|ИЗ
		|	втИтоговая КАК втИтоговая
		|
		|УПОРЯДОЧИТЬ ПО
		|	втИтоговая.ДатаНачОтс";
		
		Запрос.УстановитьПараметр("ДанныеНаНачало", ТаблицаЗначенийНаНачалоПериода);
		Запрос.УстановитьПараметр("ДанныеНаКонец",  ТаблицаЗначенийНаКонецПериода);
		Запрос.УстановитьПараметр("ДанныеЗаПериод", ТаблицаЗначенийНаВесьПериод);
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		Если Объект.ВыводЛицевыхСчетов = "ЦифрыНаименования" Тогда
			
			Для Каждого Строка Из Результат Цикл
				Строка.ЦифрыНаименования = ПолучитьЦифровыеСимволыИзСтроки(Строка.ЦифрыНаименования);
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат Результат;
		
	КонецФункции
	
#КонецЕсли

#КонецОбласти

#Область ЗаполнитьВсе

&НаКлиенте
// Обработчик команды "КомандаЗаполнитьВсе".
//
Процедура КомандаЗаполнитьВсе(Команда)
	
	ТекстОшибки = ПроверкаНеобходимыхДанныхДляЗагрузки();
	
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если Объект.МосковскаяОбласть2_ТаблицаНачислений.Количество() > 0 
		Или Объект.МосковскаяОбласть2_ТаблицаИзменений.Количество() > 0
		Или Объект.МосковскаяОбласть2_ТаблицаВыписанных.Количество() > 0
		Или Объект.МосковскаяОбласть2_ТаблицаОтсутствующих.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаЗаполнитьВсеЗавершение", ЭтаФорма);
		
		ТекстВопроса = "Перед заполением все табличные части будут очищены. Заполнить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		КомандаЗаполнитьВсеПродолжение();
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьВсе()

&НаКлиенте
// Обработчик результата вопроса команды "КомандаЗаполнитьВсе".
//
Процедура КомандаЗаполнитьВсеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		КомандаЗаполнитьВсеПродолжение();
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьВсеЗавершение()

&НаКлиенте
// Продолжение общей части обработчика команды "КомандаЗаполнитьВсе".
//
Процедура КомандаЗаполнитьВсеПродолжение()
	
	ЗаполнитьТаблицуНачислений();
	ЗаполнитьТаблицуИзменений();
	ЗаполнитьТаблицуВыписанных();
	ЗаполнитьТаблицуОтсутсвующих();
	
	// Снимаем блокировку кнопок выгрузки.
	Элементы.КомандаВыгрузитьВсе.Доступность              = Истина;
	Элементы.КП_ТаблицаНачисленийВыгрузить.Доступность    = Истина;
	Элементы.КП_ТаблицаИзмененийВыгрузить.Доступность     = Истина;
	Элементы.КП_ТаблицаВыписанныхВыгрузить.Доступность    = Истина;
	Элементы.КП_ТаблицаОтсутствующихВыгрузить.Доступность = Истина;
	
КонецПроцедуры // КомандаЗаполнитьВсеПродолжение()

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункцииЗагрузки

&НаКлиенте
// Проверяет наличие достаточных данных для начала выполнения процесса поиска информации в базе.
//
// Возвращаемое значение:
//  ТекстОшибки - Строка - пустая строка или текст с обнаруженными ошиками заполнения реквизитов формы.
//
Функция ПроверкаНеобходимыхДанныхДляЗагрузки()
	
	ТекстОшибки = "";
	
	Если Объект.Период = '00010101' Тогда
		ТекстОшибки = "Не заполнено значение поля ""Период""!";
	КонецЕсли;
	
	Если Объект.Организация.Пустая() Тогда
		ТекстОшибки = ?(Не ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС, ТекстОшибки) + "Не заполнено значение поля ""Организация""!";
	КонецЕсли;
	
	Если Объект.КодОрганизации = 0 Тогда
		ТекстОшибки = ?(Не ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС, ТекстОшибки) + "Не заполнено значение поля ""Код организации""!";
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции // ПроверкаНеобходимыхДанныхДляЗагрузки()

&НаКлиентеНаСервереБезКонтекста
// Убирает из строки не цифровые символы и конвертирует полученное значение в число.
// 
// Параметры:
//  Строка - Строка - строка, из которой выбираются цифры;
//  СтрокаДляВозврата - Строка - начальная строка для взврата (цифровые символы из Строки конкатенируют справа).
//
// Возвращаемое значение:
//  СтрокаДляВозврата - Строка - строка, состоящая из цифр, выбранных из Строки.
//
Функция ПолучитьЦифровыеСимволыИзСтроки(Знач Строка, СтрокаДляВозврата = "")
	
	Пока СтрДлина(Строка) > 0 Цикл
		
		СимволЛС = Лев(Строка, 1);
		Если КодСимвола(СимволЛС) > 47 И КодСимвола(СимволЛС) < 58 Тогда
			СтрокаДляВозврата = СтрокаДляВозврата + СимволЛС;
		КонецЕсли;
		
		Строка = Прав(Строка, СтрДлина(Строка) - 1);
		
	КонецЦикла;
	
	Возврат СтрокаДляВозврата;
	
КонецФункции // ПодготовитьНомерЛСДляВывода()

// Удаляет строки соответствий неиспользуемых услуг в ОСЗН "Найм" и "Капитальный ремонт жилых помещений".
// Формат выгрузки, где эти услуги были исключены, изменился с версии: "3.0.70.7".
//
&НаСервере
Процедура УдалитьСоответствияНеиспользуемыхУслуг(врТаблицаУслуг, Отбор)
	
	НайденныеСтроки = врТаблицаУслуг.НайтиСтроки(Отбор);
	Для Каждого СтрокаУдаления Из НайденныеСтроки Цикл
		врТаблицаУслуг.Удалить(СтрокаУдаления);
	КонецЦикла;
	
КонецПроцедуры // УдалитьСоответствияНеиспользуемыхУслуг()

#КонецОбласти // ВспомогательныеПроцедурыИФункцииЗагрузки

////////////////////////
// Выгрузка в файлы

#Область КомандыВыгрузить

////////////////////////
// Выгрузить "ТаблицаНачислений"

&НаКлиенте
// Обработчик команды "КомандаТаблицаНачисленийВыгрузить".
//
Процедура КомандаТаблицаНачисленийВыгрузить(Команда)
	
	КаталогВыгрузкиСуществует(Новый ОписаниеОповещения("КомандаТаблицаНачисленийВыгрузитьЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаТаблицаНачисленийВыгрузитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		ВыгрузитьВФайлТаблицу(Неопределено, "Начислений");
	КонецЕсли;

КонецПроцедуры // КомандаТаблицаНачисленийВыгрузить()

////////////////////////
// Выгрузить "ТаблицаИзменений"

&НаКлиенте
// Обработчик команды "КомандаТаблицаИзмененийВыгрузить".
//
Процедура КомандаТаблицаИзмененийВыгрузить(Команда)
	
	КаталогВыгрузкиСуществует(Новый ОписаниеОповещения("КомандаТаблицаИзмененийВыгрузитьЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаТаблицаИзмененийВыгрузитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		ВыгрузитьВФайлТаблицу(Неопределено, "Изменений");
	КонецЕсли;

КонецПроцедуры // КомандаТаблицаИзмененийВыгрузить()

////////////////////////
// Выгрузить "ТаблицаВыписанных"

&НаКлиенте
// Обработчик команды "КомандаТаблицаВыписанныхВыгрузить".
//
Процедура КомандаТаблицаВыписанныхВыгрузить(Команда)
	
	КаталогВыгрузкиСуществует(Новый ОписаниеОповещения("КомандаТаблицаВыписанныхВыгрузитьЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаТаблицаВыписанныхВыгрузитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		ВыгрузитьВФайлТаблицу(Неопределено, "Выписанных");
	КонецЕсли;

КонецПроцедуры // КомандаТаблицаВыписанныхВыгрузить()

////////////////////////
// Выгрузить "ТаблицаОтсутствующих"

&НаКлиенте
// Обработчик команды "КомандаТаблицаОтсутствующихВыгрузить".
//
Процедура КомандаТаблицаОтсутствующихВыгрузить(Команда)
	
	КаталогВыгрузкиСуществует(Новый ОписаниеОповещения("КомандаТаблицаОтсутствующихВыгрузитьЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаТаблицаОтсутствующихВыгрузитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		ВыгрузитьВФайлТаблицу(Неопределено, "Отсутствующих");
	КонецЕсли;

КонецПроцедуры // КомандаТаблицаОтсутствующихВыгрузить()

////////////////////////
// Выгрузить всё

&НаКлиенте
// Обработчик команды "КомандаВыгрузитьВсе".
//
Процедура КомандаВыгрузитьВсе(Команда)
	
	КаталогВыгрузкиСуществует(Новый ОписаниеОповещения("КомандаВыгрузитьВсеЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыгрузитьВсеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		ВыгрузитьВФайлТаблицу(Новый ОписаниеОповещения("КомандаВыгрузитьВсеЗавершение1", ЭтотОбъект), "Начислений");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаВыгрузитьВсеЗавершение1(Результат, ДополнительныеПараметры) Экспорт
	
	ВыгрузитьВФайлТаблицу(Новый ОписаниеОповещения("КомандаВыгрузитьВсеЗавершение2", ЭтотОбъект), "Изменений");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыгрузитьВсеЗавершение2(Результат, ДополнительныеПараметры) Экспорт
	
	ВыгрузитьВФайлТаблицу(Новый ОписаниеОповещения("КомандаВыгрузитьВсеЗавершение3", ЭтотОбъект), "Выписанных");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыгрузитьВсеЗавершение3(Результат, ДополнительныеПараметры) Экспорт
	
	ВыгрузитьВФайлТаблицу(Неопределено, "Отсутствующих");
	
КонецПроцедуры // КомандаВыгрузитьВсе()

#КонецОбласти

#Область МеханизмФормированияПользовательскихИменПолейВыгружаемыхФайлов

// Для использования мехнизма необходимо учесть следующие требования:
// 1. Наименования выгружаемых табличных частей должны отличаться от наименований прочих используемых
// в выгрузке таблиц. Например, выгружаемые таблицы маркируются префиксом "МосковскаяОбласть2_Таблица",
// фиксируемым в глобальной переменной модуля ПрефиксВыгружаемыхТаблиц.
// 2. Постфиксы таких табличных частей должны формироваться так, чтобы наименования сочитались
// с представлением "Таблица " + Постфикс. Например, для табличной части "МосковскаяОбласть2_ТаблицаНачислений"
// постфикс "Начислений" -> представление "Таблица Начислений".

////////////////////
// Работа со структурой соответствий.

&НаСервереБезКонтекста
// Определение структуры, в которой соответствия имен полей выгружаемых файлов всегда равны именам полей
// выгружаемых табличных частей. Данные всякий раз считываются из метаданных обработки, вследствии чего
// по определению актуальны.
//
// Возвращаемое значение:
//  БазоваяСтруктураВыгружаемыхТаблиц - Структура - структура соответствия имен полей выгружаемых файлов по умолчанию.
//
Функция ПолучитьБазовуюСтруктуруВыгружаемыхТаблиц(ОбработкаОбъект, ПрефиксВыгружаемыхТаблиц)
	
	БазоваяСтруктураВыгружаемыхТаблиц = Новый Структура;
	
	Для Каждого ТабличнаяЧасть Из ОбработкаОбъект.Метаданные().ТабличныеЧасти Цикл
		
		Если Найти(ТабличнаяЧасть.Имя, ПрефиксВыгружаемыхТаблиц) > 0 Тогда
			
			СоответствиеПолей = Новый Соответствие;
			
			Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
				
				// Поля выгрузки должны быть примитивного типа (заранее к нему приведены в соответствующей табличной части).
				Если Реквизит.Тип.СодержитТип(Тип("Число"))  Или 
					Реквизит.Тип.СодержитТип(Тип("Строка")) Или 
					Реквизит.Тип.СодержитТип(Тип("Дата"))   Или
					Реквизит.Тип.СодержитТип(Тип("Булево")) Тогда
					
					СоответствиеПолей.Вставить(Реквизит.Имя, Реквизит.Имя);
					
				КонецЕсли;
				
			КонецЦикла;
			
			БазоваяСтруктураВыгружаемыхТаблиц.Вставить(ТабличнаяЧасть.Имя, СоответствиеПолей);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат БазоваяСтруктураВыгружаемыхТаблиц;
	
КонецФункции // ПолучитьБазовуюСтруктуруВыгружаемыхТаблиц()

&НаСервереБезКонтекста
// Базовая структура выгружаемых таблиц, заполненная пользовательскими именами полей выгружаемых файлов.
//
// Параметры:
//  БазоваяСтруктура          - Структура - структура соответствия имен полей выгружаемых файлов по умолчанию.
//  ПользовательскаяСтруктура - Структура - структура соответствия пользовательских имен полей выгружаемых файлов.
//
// Возвращаемое значение:
//  БазоваяСтруктураВыгружаемыхТаблиц - Структура - структура соответствия имен полей выгружаемых файлов по умолчанию.
//
Функция ПолучитьСтруктуруВыгружаемыхТаблиц(БазоваяСтруктура, ПользовательскаяСтруктура)
	
	Для Каждого ТаблицаСтруктуры Из БазоваяСтруктура Цикл
		
		ПользовательскоеСоответствие = Новый Соответствие;
		
		// Ищем в пользовательской структуре выгружаемую табличную часть.
		Если ПользовательскаяСтруктура.Свойство(ТаблицаСтруктуры.Ключ, ПользовательскоеСоответствие) Тогда
			
			// В соответствиях базовой струтуры заполняем пользовательские имена полей выгружаемого файла,
			// если такие соответствия есть в пользовательской струткуре.
			Для Каждого БазовоеСоответствиеПолей Из ТаблицаСтруктуры.Значение Цикл
				
				ИмяПользовательскогоПоля = ПользовательскоеСоответствие.Получить(БазовоеСоответствиеПолей.Ключ);
				
				ТаблицаСтруктуры.Значение.Вставить(БазовоеСоответствиеПолей.Ключ, ?(ИмяПользовательскогоПоля = Неопределено, БазовоеСоответствиеПолей.Значение, ИмяПользовательскогоПоля));
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат БазоваяСтруктура;
	
КонецФункции // ПолучитьСтруктуруВыгружаемыхТаблиц()

////////////////////
// Механизм выгрузки в файл.

&НаКлиенте
// Проверяем каталог выгрузки на существование.
//
Процедура КаталогВыгрузкиСуществует(Знач Оповещение)
	
	ВыбранныйКаталог = Новый Файл(Объект.ИмяКаталогаВыгрузки);
	
	ДополнительныеПараметры = Новый Структура("ВыбранныйКаталог, Оповещение", ВыбранныйКаталог, Оповещение);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаНаСуществованиеКаталогаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	ВыбранныйКаталог.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаНаСуществованиеКаталогаЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	ВыбранныйКаталог = ДополнительныеПараметры.ВыбранныйКаталог;
	Оповещение = ДополнительныеПараметры.Оповещение;
	
	Если Не Существует Тогда
		ПоказатьПредупреждение( , "Каталог не существует!");
		ВыполнитьОбработкуОповещения(Оповещение, Ложь);
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("Оповещение", Оповещение);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаНаКаталогЗавершение1", ЭтотОбъект, ДополнительныеПараметры);
	ВыбранныйКаталог.НачатьПроверкуЭтоКаталог(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаНаКаталогЗавершение1(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Оповещение = ДополнительныеПараметры.Оповещение;
	
	Если Не ЭтоКаталог Тогда
		ПоказатьПредупреждение( , "Каталог не существует!");
		ВыполнитьОбработкуОповещения(Оповещение, Ложь);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение, Истина);

КонецПроцедуры // КаталогВыгрузкиСуществует()

&НаКлиенте
// Процедура запускает механизм выгрузки данных в файл.
//
// Параметры:
//  СуффиксВыгружаемойТаблицы - Строка - суффикс выгружаемой табличной части. Например, если выгружаемая табличная
//                              часть "МосковскаяОбласть2_ТаблицаНачислений", то суффикс в ней "Начислений".
//
Процедура ВыгрузитьВФайлТаблицу(Знач Оповещение, СуффиксВыгружаемойТаблицы = Неопределено)
	
	Каталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Объект.ИмяКаталогаВыгрузки);
	
	ПрефиксИмениВыгружаемогоФайла = "";
	
	// Внимание! При изменении/добавлении табличных частей необходимо править данную структуру вручную.
	СтруктураОпределенияПостфикса = Новый Структура("Начислений,Изменений,Выписанных,Отсутствующих",
	"Naсh",    "Izmn",   "Vbsh",    "Vrem");
	
	Если СтруктураОпределенияПостфикса.Свойство(СуффиксВыгружаемойТаблицы, ПрефиксИмениВыгружаемогоФайла) Тогда
		
		СформироватьФайлDBF(Оповещение, СуффиксВыгружаемойТаблицы, ПрефиксВыгружаемыхТаблиц + СуффиксВыгружаемойТаблицы, Каталог, ПрефиксИмениВыгружаемогоФайла);
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение);
	
КонецПроцедуры // ВыгрузитьВфайл()

&НаКлиенте
// Процедура формирования и записи DBF-файла.
//
// Параметры:
//  СуффиксВыгружаемойТаблицы    - Строка - суффикс выгружаемой табличной части.
//  ИмяВыгружаемойТабличнойЧасти - Строка - имя выгружаемой табличной части.
//  Каталог                      - Строка - полный путь к каталогу выгрузки.
//  Постфикс                     - Строка - постфикс выгружаемого файла (на латинице).
//
Процедура СформироватьФайлDBF(Знач Оповещение, СуффиксВыгружаемойТаблицы, ИмяВыгружаемойТабличнойЧасти, Каталог, Префикс)
	
	Если Объект[ИмяВыгружаемойТабличнойЧасти].Количество() = 0 Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Табличная часть выгрузки """ + СуффиксВыгружаемойТаблицы + """ не заполнена данными и выгружена не будет!");
		ВыполнитьОбработкуОповещения(Оповещение);
		Возврат;
		
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
	
	// Формирование DBF файла.
	DBFФайлВыгрузки = Новый XBase;
	DBFФайлВыгрузки.Кодировка = КодировкаXBase.OEM;
	
	// Поля выгружаемого файла формируем на основании метаданных выгружаемой табличной части.
	КолонкиDBF = ПолучитьКолонкиDBF(ИмяВыгружаемойТабличнойЧасти);
	
	Для Каждого Колонка Из КолонкиDBF Цикл
		
		Если Колонка.Тип = "S" Тогда
			
			DBFФайлВыгрузки.Поля.Добавить(Колонка.Имя, Колонка.Тип, Колонка.Длина);
			
		ИначеЕсли Колонка.Тип = "N" Тогда
			
			DBFФайлВыгрузки.Поля.Добавить(Колонка.Имя, Колонка.Тип, Колонка.РазрядностьЦелойЧасти, Колонка.РазрядностьДробнойЧасти);
			
		ИначеЕсли Колонка.Тип = "D" Тогда
			
			DBFФайлВыгрузки.Поля.Добавить(Колонка.Имя, Колонка.Тип, Колонка.ЧастиДаты);
			
		ИначеЕсли Колонка.Тип = "L" Тогда
			
			DBFФайлВыгрузки.Поля.Добавить(Колонка.Имя, Колонка.Тип);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Данные выгружаем во временный файл с коротким наименованием (для обхода ограничения на 8 символов в имени DBF-файла).
	КороткоеИмяВременногоФайла = Каталог + "temp.dbf";
	
	DBFФайлВыгрузки.СоздатьФайл(КороткоеИмяВременногоФайла);
	DBFФайлВыгрузки.АвтоСохранение = Истина;
	
	// Ищем в пользовательской структуре соответствий имен полей данные выгружаемой табличной части.
	СтруктураВыгружаемыхТаблиц = ПолучитьИзВременногоХранилища(АдресСтруктурыВыгружаемыхТаблиц);
	
	ПользовательскиеСоответствияПолей = СтруктураВыгружаемыхТаблиц[ИмяВыгружаемойТабличнойЧасти];
	
	Для Каждого Строка Из Объект[ИмяВыгружаемойТабличнойЧасти] Цикл
		
		DBFФайлВыгрузки.Добавить();
		
		Для Каждого СоответствиеПолей Из ПользовательскиеСоответствияПолей Цикл
			
			// При выгрузке данных учитываем факт того, что:
			// 1) Имена полей DBF-файла (Значение) уже сформированы и могут отличаться от имен полей выгружаемой табличной части (Ключ).
			// 2) Для пустых соответствий поля DBF-файла не создавались (т.е. их может и не быть).
			Если Не ПустаяСтрока(ПользовательскиеСоответствияПолей.Получить(СоответствиеПолей.Ключ)) Тогда
				
				DBFФайлВыгрузки[СоответствиеПолей.Значение] = Строка[СоответствиеПолей.Ключ];
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	DBFФайлВыгрузки.ЗакрытьФайл();
	
	ДополнительныеПараметры = Новый Структура("КороткоеИмяВременногоФайла, Оповещение, Префикс", КороткоеИмяВременногоФайла,
																									Оповещение, Префикс);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СкопироватьФайлЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	// Копируем временный файл выгрузки в файл с нужным наименованием; временный удаляем.
	НачатьКопированиеФайла(ОписаниеОповещения, КороткоеИмяВременногоФайла, Каталог + НовоеИмяФайла(Префикс));
	
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьФайлЗавершение(СкопированныйФайл, ДополнительныеПараметры) Экспорт
	
	КороткоеИмяВременногоФайла = ДополнительныеПараметры.КороткоеИмяВременногоФайла;
	Оповещение = ДополнительныеПараметры.Оповещение;
	Префикс = ДополнительныеПараметры.Префикс;
	
	ПараметрыОповещения = Новый Структура("Оповещение, Префикс", Оповещение, Префикс);
	
	НачатьУдалениеФайлов(Новый ОписаниеОповещения("УдалитьФайлЗавершение", ЭтотОбъект, ПараметрыОповещения), КороткоеИмяВременногоФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайлЗавершение(ДополнительныеПараметры) Экспорт
	
	Оповещение = ДополнительныеПараметры.Оповещение;
	Префикс = ДополнительныеПараметры.Префикс;
	
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Выгрузка в файл " + НовоеИмяФайла(Префикс) + " завершена!");
	
	ВыполнитьОбработкуОповещения(Оповещение);

КонецПроцедуры // СформироватьФайлDBF()

&НаСервере
// Формирует массив структур, состоящих из параметров для записи полей выгружаемого DBF-файла.
//
// Возвращаемое значение:
//  МассивСтруктурКолонок - Массив - массив структур. 
//
Функция ПолучитьКолонкиDBF(ИмяВыгружаемойТабличнойЧасти)
	
	// Коллекция реквищзитов выгружаемой табличной асти необходима для установления типа соответствующего поля выгружаемого DBF-файла.
	КоллекцияРеквизитовТабличнойЧасти = РеквизитФормыВЗначение("Объект").Метаданные().ТабличныеЧасти[ИмяВыгружаемойТабличнойЧасти].Реквизиты;
	
	// Из структуры выгружаемых таблиц извлекаем соответствия.
	СтруктураВыгружаемыхТаблиц = ПолучитьИзВременногоХранилища(АдресСтруктурыВыгружаемыхТаблиц);
	
	ПользовательскиеСоответствияПолей = СтруктураВыгружаемыхТаблиц[ИмяВыгружаемойТабличнойЧасти];
	
	// Массив структур полей выгружаемого DBF-файла.
	МассивСтруктурКолонок = Новый Массив;
	
	Для Каждого Колонка Из КоллекцияРеквизитовТабличнойЧасти Цикл
		
		// Проверяем, установлено ли пользовательское соответствие для имени данной колонки.
		// Если соответсвие не установлено, то данную колонку вообще не выгружаем.
		Если Не ПустаяСтрока(ПользовательскиеСоответствияПолей[Колонка.Имя]) Тогда
			
			// Элемент массива - структура определения N-ого поля DBF-файла.
			Структура = Новый Структура;
			
			// Если данную колонку выгружаем, то её имя берем из пользовательской настройки.
			Структура.Вставить("Имя", ПользовательскиеСоответствияПолей[Колонка.Имя]);
			
			Если Колонка.Тип.СодержитТип(Тип("Число")) Тогда
				
				Структура.Вставить("Тип",                     "N");
				Структура.Вставить("РазрядностьЦелойЧасти",   Колонка.Тип.КвалификаторыЧисла.Разрядность);
				Структура.Вставить("РазрядностьДробнойЧасти", Колонка.Тип.КвалификаторыЧисла.РазрядностьДробнойЧасти);
				
			ИначеЕсли Колонка.Тип.СодержитТип(Тип("Строка")) Тогда
				
				Структура.Вставить("Тип",   "S");
				Структура.Вставить("Длина", Колонка.Тип.КвалификаторыСтроки.Длина);
				
			ИначеЕсли Колонка.Тип.СодержитТип(Тип("Дата")) Тогда
				
				Структура.Вставить("Тип",       "D");
				Структура.Вставить("ЧастиДаты", Колонка.Тип.КвалификаторыДаты.ЧастиДаты);
				
			ИначеЕсли Колонка.Тип.СодержитТип(Тип("Булево")) Тогда
				
				Структура.Вставить("Тип", "L");
				
			Иначе
				
				// Ссылочные типы исключаем.
				Продолжить;
				
			КонецЕсли;
			
			МассивСтруктурКолонок.Добавить(Структура);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивСтруктурКолонок;
	
КонецФункции // ПолучитьКолонкиDBF()

&НаКлиенте
// Создает новое имя файла выгрузки.
//
// Параметры:
//  Префикс - Строка - префикс выгружаемого файла.
//
// Возвращаемое значение:
//  Строка - имя файла с расширением.
//
Функция НовоеИмяФайла(Префикс)
	
	Возврат Префикс + Формат(Объект.Период, "ДФ=MMyy") + ".dbf";
	
КонецФункции // НовоеИмяФайла()

#КонецОбласти // МеханизмФормированияПользовательскихИменПолейВыгружаемыхФайлов

