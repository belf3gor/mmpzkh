
#Область ОбъявлениеПеременных

&НаКлиенте
Перем ПредыдущаяУслуга;

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Получаем настройки из хранилища.
	Если Параметры.Свойство("АдресНастроекВХранилище") И Параметры.АдресНастроекВХранилище <> Неопределено Тогда
		
		СтруктураНастроек = ПолучитьИзВременногоХранилища(Параметры.АдресНастроекВХранилище);
		
		Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
			
			// Таблица настроек справочника ОСЗН.
			врТаблицаНастроек = Неопределено;
			Если СтруктураНастроек.Свойство("КалужскаяОбласть_ТаблицаНастроек", врТаблицаНастроек) Тогда
				Если ТипЗнч(врТаблицаНастроек) = Тип("ТаблицаЗначений") Тогда
					Объект.КалужскаяОбласть_ТаблицаНастроек.Загрузить(врТаблицаНастроек);
				КонецЕсли;
			КонецЕсли;
			
			// Таблица услуг справочника ОСЗН в базе.
			врТаблицаУслугВБазе = Неопределено;
			Если СтруктураНастроек.Свойство("КалужскаяОбласть_УслугиВБазе", врТаблицаУслугВБазе) Тогда
				Если ТипЗнч(врТаблицаУслугВБазе) = Тип("ТаблицаЗначений") Тогда
					Объект.КалужскаяОбласть_УслугиВБазе.Загрузить(врТаблицаУслугВБазе);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область КоманднаяПанель

&НаКлиенте
// Обработчик команды "КомандаСохранить".
//
Процедура КомандаСохранить(Команда)
	
	АдресНастроекВХранилище = ПоместитьНастройкиВХранилище();
	Закрыть(АдресНастроекВХранилище);
	
КонецПроцедуры // КомандаСохранить()

////////////////////
// Работа с временным хранилищем

&НаСервере
// Помещает таблицу услуг во временное хранилище.
//
// Возвращаемое значение:
//  Строка - адрес настроек во временном хранилище.
//
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("КалужскаяОбласть_ТаблицаНастроек", Объект.КалужскаяОбласть_ТаблицаНастроек.Выгрузить());
	СтруктураНастроек.Вставить("КалужскаяОбласть_УслугиВБазе",     Объект.КалужскаяОбласть_УслугиВБазе.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции // ПоместитьНастройкиВХранилище()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ УСЛУГИ В ОСЗН

#Область УслугиВОСЗН

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" таблицы "УслугаВОСЗН".
//
Процедура ТаблицаНастроекПриАктивизацииСтроки(Элемент)
	
	ТП_ЖКУ_ВБазе.Очистить();
	
	// При активации строки УслугаВОСЗН, загружаем соответствия в УслугаВБазе.
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		НайденныеСтроки = Объект.КалужскаяОбласть_УслугиВБазе.НайтиСтроки(Новый Структура("КодУслугиВОСЗН", Элемент.ТекущиеДанные.КодУслугиВОСЗН));
		Для Каждого ТекСтрока из НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(ТП_ЖКУ_ВБазе.Добавить(), ТекСтрока);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ТаблицаНастроекПриАктивизацииСтроки()

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" строки таблицы "УслугаВОСЗН". 
//
Процедура ТаблицаНастроекПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Устанавливаем запрет на добавление строк копированием.
	Если Копирование Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В таблице ""Услуги в ОСЗН"" добавление строк копированием запрещено!");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ТаблицаНастроекПередНачаломДобавления()

&НаКлиенте
// Процедура - обработчик события "ПриНачалеРедактирования" таблицы "УслугаВОСЗН".
//
Процедура КалужскаяОбласть_ТаблицаНастроекПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ПредыдущийКодУслугиВОСЗН = "";
	Иначе
		ПредыдущийКодУслугиВОСЗН = Элемент.ТекущиеДанные.КодУслугиВОСЗН;
	КонецЕсли;
	
КонецПроцедуры // КалужскаяОбласть_ТаблицаНастроекПриНачалеРедактирования()

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" таблицы "УслугаВОСЗН".
//
Процедура ТаблицаНастроекПередУдалением(Элемент, Отказ)
	
	СтрокиУдаления = Объект.КалужскаяОбласть_УслугиВБазе.НайтиСтроки(Новый Структура("КодУслугиВОСЗН", Элемент.ТекущиеДанные.КодУслугиВОСЗН));
	
	Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
		Объект.КалужскаяОбласть_УслугиВБазе.Удалить(СтрокаУдаления);
	КонецЦикла;
	
КонецПроцедуры // ТаблицаНастроекПередУдалением()

&НаКлиенте
// Процедура - обработчик события "ПослеУдаления" таблицы "УслугаВОСЗН".
//
Процедура ТаблицаНастроекПослеУдаления(Элемент)
	
	ТаблицаНастроекПриАктивизацииСтроки(Элемент);
	
	// Если в левой колонке пользователем удалены все колонки, то блокируем возможность добавления соответствий.
	Если Объект.КалужскаяОбласть_ТаблицаНастроек.Количество() = 0 Тогда
		Элементы.ТП_ЖКУ_ВБазеДобавить.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ТаблицаНастроекПослеУдаления()

&НаКлиенте
// Процедура - обработчик события "ПередОкончаниемРедактирования" таблицы "УслугаВОСЗН".
//
Процедура ТаблицаНастроекПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	// Нужно, если происходит отмена редактирования строки ТЧ.
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	КодОшибки = 0;
	
	// Проверяем на наличие и уникальность код услуги.
	ТекущийКодУслугиВОСЗН = Элемент.ТекущиеДанные.КодУслугиВОСЗН;
	Если ЗначениеЗаполнено(ТекущийКодУслугиВОСЗН) Тогда
		ОтборКод = Новый Структура;
		ОтборКод.Вставить("КодУслугиВОСЗН", ТекущийКодУслугиВОСЗН);
		
		СтрокиСовпаденияКод = Объект.КалужскаяОбласть_ТаблицаНастроек.НайтиСтроки(ОтборКод);
		Если СтрокиСовпаденияКод.Количество() > 1 Тогда
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Код услуги в ОСЗН не уникален!");
			КодОшибки = КодОшибки + 1;
			
			Элемент.ТекущиеДанные.КодУслугиВОСЗН = ПредыдущийКодУслугиВОСЗН;
			
		КонецЕсли;
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Код услуги в ОСЗН не заполнен!");
		КодОшибки = КодОшибки + 1;
		
		Элемент.ТекущиеДанные.КодУслугиВОСЗН = ПредыдущийКодУслугиВОСЗН;
	КонецЕсли;
	
	// При наличии незаполненных полей или дубликатов опрашиваем пользователя.
	Если КодОшибки > 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Добавление незаполненных полей и дублирующих значений недопустимо!");
		Отказ = Истина;
	КонецЕсли;
	
	// Разблокируем кнопку добавления табличного поля "ТП_ЖКУ_ВБазе".
	Если Не Объект.КалужскаяОбласть_ТаблицаНастроек.Количество() = 0 Тогда
		Элементы.ТП_ЖКУ_ВБазеДобавить.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры // ТаблицаНастроекПередОкончаниемРедактирования()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ УСЛУГИ В БАЗЕ

#Область ТП_УслугиВБазе

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" таблицы "УслугаВБазе".
//
Процедура ТП_ЖКУ_ВБазеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Если не выбрана строка в левой колоке или добавление строк копированием.
	Если Элементы.КалужскаяОбласть_ТаблицаНастроек.ТекущиеДанные = Неопределено ИЛИ Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ТП_ЖКУ_ВБазеПередНачаломДобавления()

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" таблицы "УслугаВБазе".
//
Процедура ТП_ЖКУ_ВБазеПередУдалением(Элемент, Отказ)
	
	УслугаВБазе = Элемент.ТекущиеДанные.УслугаВБазе;
	
	Отбор = Новый Структура;
	Отбор.Вставить("КодУслугиВОСЗН", Элементы.КалужскаяОбласть_ТаблицаНастроек.ТекущиеДанные.КодУслугиВОСЗН);
	Отбор.Вставить("УслугаВБазе",    УслугаВБазе);
	
	СтрокиУдаления = Объект.КалужскаяОбласть_УслугиВБазе.НайтиСтроки(Отбор);
	
	Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
		Объект.КалужскаяОбласть_УслугиВБазе.Удалить(СтрокаУдаления);
	КонецЦикла;
	
КонецПроцедуры // ТП_ЖКУ_ВБазеПередУдалением()

&НаКлиенте
// Процедура - обработчик события "ПриНачалеРедактирования" таблицы "УслугаВБазе".
//
Процедура ТП_ЖКУ_ВБазеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// Запоминаем предыдущее значение перезаписываемой строки.
	Если НЕ НоваяСтрока Тогда
		ПредыдущаяУслуга = Элемент.ТекущиеДанные.УслугаВБазе;
	КонецЕсли;
	
КонецПроцедуры // ТП_ЖКУ_ВБазеПриНачалеРедактирования()

&НаКлиенте
// Процедура - обработчик события "ПередОкончаниемРедактирования" таблицы "УслугаВБазе".
//
Процедура ТП_ЖКУ_ВБазеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	// Если изменяем выбранное значение, то удаляем предыдущую запись.
	Если НЕ НоваяСтрока И ЗначениеЗаполнено(ПредыдущаяУслуга) Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("КодУслугиВОСЗН", Элементы.КалужскаяОбласть_ТаблицаНастроек.ТекущиеДанные.КодУслугиВОСЗН);
		Отбор.Вставить("УслугаВБазе",    ПредыдущаяУслуга);
		
		НайденнаяСтрока = Объект.КалужскаяОбласть_УслугиВБазе.НайтиСтроки(Отбор);
		
		Объект.КалужскаяОбласть_УслугиВБазе.Удалить(НайденнаяСтрока[0]);
		
	КонецЕсли;
	
КонецПроцедуры // ТП_ЖКУ_ВБазеПередОкончаниемРедактирования()

&НаКлиенте
// Процедура - обработчик события "ПриОкончанииРедактирования" таблицы "УслугаВБазе".
//
Процедура ТП_ЖКУ_ВБазеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не Элемент.ТекущиеДанные = Неопределено И Не ОтменаРедактирования Тогда
		
		Если Элемент.ТекущиеДанные.УслугаВБазе.Пустая() Тогда
			// Удаляем пустую строку.
			ТП_ЖКУ_ВБазе.Удалить(ТП_ЖКУ_ВБазе.Индекс(Элемент.ТекущиеДанные)); 
		Иначе
			// Добавляем запись в КалужскаяОбласть_УслугиВБазе.
			
			КодУслугиВОСЗН = Элементы.КалужскаяОбласть_ТаблицаНастроек.ТекущиеДанные.КодУслугиВОСЗН;
			УслугаВОСЗН    = Элементы.КалужскаяОбласть_ТаблицаНастроек.ТекущиеДанные.УслугаВОСЗН;
			УслугаВБазе    = Элемент.ТекущиеДанные.УслугаВБазе;
			
			НоваяСтрокаСоответствия = Объект.КалужскаяОбласть_УслугиВБазе.Добавить();
			
			НоваяСтрокаСоответствия.УслугаВБазе    = УслугаВБазе;
			НоваяСтрокаСоответствия.КодУслугиВОСЗН = КодУслугиВОСЗН;
			НоваяСтрокаСоответствия.УслугаВОСЗН    = УслугаВОСЗН;
			
			// Удаляем старую запись при перевыборе.
			Если НЕ ПредыдущаяУслуга = УслугаВБазе Тогда
				
				Отбор = Новый Структура;
				Отбор.Вставить("КодУслугиВОСЗН", КодУслугиВОСЗН);
				Отбор.Вставить("УслугаВБазе",    ПредыдущаяУслуга);
				
				НайденнаяСтрока = Объект.КалужскаяОбласть_УслугиВБазе.НайтиСтроки(Отбор);
				Если НайденнаяСтрока.Количество() = 1 Тогда
					НайденнаяСтрока[0].УслугаВБазе = УслугаВБазе;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ТП_ЖКУ_ВБазеПриОкончанииРедактирования()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "УслугаВБазе" таблицы "УслугаВБазе".
//
Процедура ТП_ЖКУ_ВБазеУслугаВБазеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Устанавливаем отбор на справочник "Услуги".
	СтандартнаяОбработка = Ложь;
	
	// Список уже выбранных услуг по данной услуге в ОСЗН.
	СписокВыбранныхУслуг = Новый СписокЗначений;
	Для Каждого Строка Из Объект.КалужскаяОбласть_УслугиВБазе Цикл
		СписокВыбранныхУслуг.Добавить(Строка.УслугаВБазе);
	КонецЦикла;
	
	Форма = ПолучитьФорму("Справочник.КВП_Услуги.ФормаВыбора", Новый Структура("ТекущаяСтрока", Элементы.ТП_ЖКУ_ВБазе.ТекущиеДанные.УслугаВБазе), Элемент);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Форма.Список.КомпоновщикНастроек.Настройки.Отбор, "Ссылка", СписокВыбранныхУслуг,
															ВидСравненияКомпоновкиДанных.НеВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
	Форма.Открыть();
	
КонецПроцедуры // ТП_ЖКУ_ВБазеУслугаВБазеНачалоВыбора()

#КонецОбласти