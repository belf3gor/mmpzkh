
#Область ПрочиеПроцедурыИФункции

&НаСервере
// Процедура заполняет таблицу услуг на сервере.
//
Процедура ЗаполнитьТаблицуУслугНаСервере(Идентификатор)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Код", Идентификатор);
	
	НайденныеСтроки = Объект.ЧувашскаяРеспублика_УслугиВБазе.Выгрузить(Отбор, "УслугаВБазе");
	
	Для Каждого ТекСтрока из НайденныеСтроки Цикл
		ЗаполнитьЗначенияСвойств(ТП_УслугаВБазе.Добавить(), ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Процедура заполняет таблицу норм на сервере.
//
Процедура ЗаполнитьТаблицуНормНаСервере(Идентификатор)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Здание", Идентификатор);
	
	НайденныеСтроки = Объект.ЧувашскаяРеспублика_НормыЗданий.Выгрузить(Отбор, "НормаПотребления");
	
	Для Каждого ТекСтрока из НайденныеСтроки Цикл
		ЗаполнитьЗначенияСвойств(ТП_НормыПотребления.Добавить(), ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Процедура загружает все здания в таблицу зданий для указания норм.
//
Процедура ОбновитьСписокЗданий()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_Здания.Ссылка КАК Здание
	|ИЗ
	|	Справочник.КВП_Здания КАК КВП_Здания
	|ГДЕ
	|	НЕ КВП_Здания.ЭтоГруппа
	|	И НЕ КВП_Здания.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_Здания.Ссылка";
	
	ТаблицаЗданий = Запрос.Выполнить().Выгрузить();
	
	Объект.ЧувашскаяРеспублика_ЗданияДляНорм.Загрузить(ТаблицаЗданий);
	
КонецПроцедуры

&НаСервере
// Процедура считывает данные из выбранного файла услуг.
//
Процедура СчитатьИзФайлаУслугиНаСервере(МассивОписанийФайлов)
	
	АдресФайла = ПолучитьИмяВременногоФайла();
	ВременныйФайл = Новый Файл(АдресФайла);
	СтароеИмяФайла = ВременныйФайл.ИмяБезРасширения;
	НовоеИмяФайла = Прав(ВременныйФайл.ИмяБезРасширения, 8);
	АдресФайла = СтрЗаменить(ВременныйФайл.ПолноеИмя, СтароеИмяФайла, НовоеИмяФайла);
	
	Для Каждого ОписаниеФайла Из МассивОписанийФайлов Цикл
		
		ПолучитьИзВременногоХранилища(ОписаниеФайла.Хранение).Записать(АдресФайла);
		
		УдалитьИзВременногоХранилища(ОписаниеФайла.Хранение);
		
	КонецЦикла;
	
	Объект.ЧувашскаяРеспублика_УслугиВОСЗН.Очистить();
	Объект.ЧувашскаяРеспублика_УслугиВБазе.Очистить();
	
	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать(АдресФайла, ?(Объект.КодировкаТекстовогоФайла, КодировкаТекста.ANSI, КодировкаТекста.OEM));
	
	РазделительКолонок = ";";
	
	Для НомерСтроки = 1 По Текст.КоличествоСтрок() Цикл
		
		СтрокаФайла = Текст.ПолучитьСтроку(НомерСтроки);
		
		Если СтрДлина(СтрокаФайла) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПозицияРазделителя = Найти(СтрокаФайла, РазделительКолонок);
		Если ПозицияРазделителя = 0 Тогда
			ПозицияРазделителя = СтрДлина(СтрокаФайла) + 1;
		КонецЕсли;
		
		// Прочитаем значение 1 поля из файла загрузки.
		ЗначениеПоляФайла = СокрЛП(Сред(СтрокаФайла, 1, ПозицияРазделителя - 1));
		
		СтрокаФайла = Прав(СтрокаФайла, СтрДлина(СтрокаФайла) - ПозицияРазделителя);
		
		Если ЗначениеПоляФайла = "Х" Тогда
			НоваяСтрока = Объект.ЧувашскаяРеспублика_УслугиВОСЗН.Добавить();
			
			Сч = 1;
			Пока Сч <= 4 Цикл
				Если СтрДлина(СтрокаФайла) = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ПозицияРазделителя = Найти(СтрокаФайла, РазделительКолонок);
				Если ПозицияРазделителя = 0 Тогда
					ПозицияРазделителя = СтрДлина(СтрокаФайла) + 1;
				КонецЕсли;
				ЗначениеПоляФайла = СокрЛП(Сред(СтрокаФайла, 1, ПозицияРазделителя - 1));
				
				СтрокаФайла = Прав(СтрокаФайла, СтрДлина(СтрокаФайла) - ПозицияРазделителя);
				
				Если Сч = 1 Тогда
					НоваяСтрока.Код = ЗначениеПоляФайла;
				ИначеЕсли Сч = 2 Тогда
					НоваяСтрока.УслугаВОСЗН = ЗначениеПоляФайла;
				ИначеЕсли Сч = 4 Тогда
					НоваяСтрока.ЕдиницаИзмерения = ЗначениеПоляФайла;
				КонецЕсли;
				Сч = Сч + 1;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СчитатьИзФайлаУслугиНаСервере()

&НаСервере
// Процедура считывает данные из выбранного файла.
//
Процедура СчитатьИзФайлаСтепениРодстваНаСервере(МассивОписанийФайлов)
	
	АдресФайла = ПолучитьИмяВременногоФайла();
	ВременныйФайл = Новый Файл(АдресФайла);
	СтароеИмяФайла = ВременныйФайл.ИмяБезРасширения;
	НовоеИмяФайла = Прав(ВременныйФайл.ИмяБезРасширения, 8);
	АдресФайла = СтрЗаменить(ВременныйФайл.ПолноеИмя, СтароеИмяФайла, НовоеИмяФайла);
	
	Для Каждого ОписаниеФайла Из МассивОписанийФайлов Цикл
		
		ПолучитьИзВременногоХранилища(ОписаниеФайла.Хранение).Записать(АдресФайла);
		
		УдалитьИзВременногоХранилища(ОписаниеФайла.Хранение);
		
	КонецЦикла;
	
	Объект.ЧувашскаяРеспублика_СтепениРодства.Очистить();
	
	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать(АдресФайла, ?(Объект.КодировкаТекстовогоФайла, КодировкаТекста.ANSI, КодировкаТекста.OEM));
	
	РазделительКолонок = ";";
	
	Для НомерСтроки = 1 По Текст.КоличествоСтрок() Цикл
		
		СтрокаФайла = Текст.ПолучитьСтроку(НомерСтроки);
		
		Если СтрДлина(СтрокаФайла) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПозицияРазделителя = Найти(СтрокаФайла, РазделительКолонок);
		Если ПозицияРазделителя = 0 Тогда
			ПозицияРазделителя = СтрДлина(СтрокаФайла) + 1;
		КонецЕсли;
		
		// Прочитаем значение 1 поля из файла загрузки.
		ЗначениеПоляФайла = СокрЛП(Сред(СтрокаФайла, 1, ПозицияРазделителя - 1));
		
		СтрокаФайла = Прав(СтрокаФайла, СтрДлина(СтрокаФайла) - ПозицияРазделителя);
		
		Если ЗначениеПоляФайла = "Р" Тогда
			ПозицияРазделителя = Найти(СтрокаФайла, РазделительКолонок);
			Если ПозицияРазделителя = 0 Тогда
				ПозицияРазделителя = СтрДлина(СтрокаФайла) + 1;
			КонецЕсли;
			ЗначениеПоляФайла = СокрЛП(Сред(СтрокаФайла, 1, ПозицияРазделителя - 1));
			НоваяСтрока = Объект.ЧувашскаяРеспублика_СтепениРодства.Добавить();
			НоваяСтрока.СтепеньРодстваВОСЗН = ЗначениеПоляФайла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СчитатьИзФайла()

&НаСервереБезКонтекста
// Возвращает массив загружаемых файлов по переданным именам.
//
// Параметры:
//  МассивИменФайлов - Массив - массив, содержащий полные имена передаваемых файлов.
//
// Возвращаемое значение:
//  МассивПередаваемыхФайлов - Массив - массив описаний передаваемых файлов.
Функция ПодготовитьМассивПередаваемыхФайловДляЗагрузки(МассивИменФайлов)
	
	Возврат УПЖКХ_РаботаСФайламиСервер.ПодготовитьМассивПередаваемыхФайловДляЗагрузки(МассивИменФайлов);
	
КонецФункции // ПодготовитьМассивПередаваемыхФайловДляЗагрузки()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// РАБОТА С ВРЕМЕННЫМ ХРАНИЛИЩЕМ

#Область РаботаСВременнымХранилищем

&НаСервере
// Помещает настройки во временное хранилище.
//
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ЧувашскаяРеспублика_УслугиВОСЗН",    Объект.ЧувашскаяРеспублика_УслугиВОСЗН.Выгрузить());
	СтруктураНастроек.Вставить("ЧувашскаяРеспублика_УслугиВБазе",    Объект.ЧувашскаяРеспублика_УслугиВБазе.Выгрузить());
	СтруктураНастроек.Вставить("ЧувашскаяРеспублика_СтепениРодства", Объект.ЧувашскаяРеспублика_СтепениРодства.Выгрузить());
	СтруктураНастроек.Вставить("ЧувашскаяРеспублика_НормыЗданий",    Объект.ЧувашскаяРеспублика_НормыЗданий.Выгрузить());
	СтруктураНастроек.Вставить("ТарифПодогрева",                     Объект.ТарифПодогрева);
	СтруктураНастроек.Вставить("УслугаПодогрева",                    Объект.УслугаПодогрева);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПризнакУдаления      = Ложь;
	ПризнакУдаленияНормы = Ложь;
	
	ОбновитьСписокЗданий();
	
	// Получаем настройки из хранилища.
	Если Параметры.Свойство("АдресНастроекВХранилище") И Не Параметры.АдресНастроекВХранилище = Неопределено Тогда
		
		СтруктураНастроек = ПолучитьИзВременногоХранилища(Параметры.АдресНастроекВХранилище);
		
		Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
			
			СтруктураНастроек.Свойство("ИмяФайлаЗагрузки",         ИмяФайлаЗагрузки);
			СтруктураНастроек.Свойство("ТарифПодогрева",           Объект.ТарифПодогрева);
			СтруктураНастроек.Свойство("УслугаПодогрева",          Объект.УслугаПодогрева);
			СтруктураНастроек.Свойство("КодировкаТекстовогоФайла", Объект.КодировкаТекстовогоФайла);
			
			Если СтруктураНастроек.Свойство("ЧувашскаяРеспублика_УслугиВБазе") Тогда
				Объект.ЧувашскаяРеспублика_УслугиВБазе.Загрузить(СтруктураНастроек.ЧувашскаяРеспублика_УслугиВБазе);
			КонецЕсли;
			
			Если СтруктураНастроек.Свойство("ЧувашскаяРеспублика_УслугиВОСЗН") Тогда
				Объект.ЧувашскаяРеспублика_УслугиВОСЗН.Загрузить(СтруктураНастроек.ЧувашскаяРеспублика_УслугиВОСЗН);
			КонецЕсли;
			
			Если СтруктураНастроек.Свойство("ЧувашскаяРеспублика_СтепениРодства") Тогда
				Объект.ЧувашскаяРеспублика_СтепениРодства.Загрузить(СтруктураНастроек.ЧувашскаяРеспублика_СтепениРодства);
			КонецЕсли;
			
			Если СтруктураНастроек.Свойство("ЧувашскаяРеспублика_НормыЗданий") Тогда
				Объект.ЧувашскаяРеспублика_НормыЗданий.Загрузить(СтруктураНастроек.ЧувашскаяРеспублика_НормыЗданий);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии(Отказ)
	
	ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиенте();
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "КомандаСохранить".
//
Процедура КомандаСохранить(Команда)
	
	Закрыть(ПоместитьНастройкиВХранилище());
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаЗаполнитьУслуги".
//
Процедура КомандаЗаполнитьУслуги(Команда)
	
	Если РасширениеПодключено И ПустаяСтрока(ИмяФайлаЗагрузки) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "На основной форме выгрузки не указан файл загрузки!", "На основной форме выгрузки не указан файл загрузки!");
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаЗагрузитьИзФайлаУслугиОбработкаЗагрузки", ЭтаФорма);
	
	Если РасширениеПодключено Тогда
		
		МассивИменФайлов = Новый Массив();
		МассивИменФайлов.Добавить(ИмяФайлаЗагрузки);
		
		МассивЗагружаемыхФайлов = ПодготовитьМассивПередаваемыхФайловДляЗагрузки(МассивИменФайлов);
		
		Если МассивЗагружаемыхФайлов = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		СоответствиеИмениИАдреса = Новый Соответствие();
		СоответствиеИмениИАдреса.Вставить("",);
		МассивЗагружаемыхФайлов = УПЖКХ_РаботаСФайламиСервер.ПолучитьМассивПередаваемыхФайлов(СоответствиеИмениИАдреса);
	КонецЕсли;
	
	УПЖКХ_РаботаСФайламиКлиент.ЗагрузитьФайл(РасширениеПодключено, ОписаниеОповещения, МассивЗагружаемыхФайлов);
	
КонецПроцедуры // КомандаЗаполнитьУслуги()

&НаКлиенте
// Обработчик команды "КомандаЗагрузитьИзФайлаСтепениРодства".
//
Процедура КомандаЗагрузитьИзФайлаСтепениРодства(Команда)
	
	Если РасширениеПодключено И ПустаяСтрока(ИмяФайлаЗагрузки) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "На основной форме выгрузки не указан файл загрузки!", "На основной форме выгрузки не указан файл загрузки!");
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаЗагрузитьИзФайлаСтепениРодстваОбработкаЗагрузки", ЭтаФорма);
	
	Если РасширениеПодключено Тогда
		
		МассивИменФайлов = Новый Массив();
		МассивИменФайлов.Добавить(ИмяФайлаЗагрузки);
		
		МассивЗагружаемыхФайлов = ПодготовитьМассивПередаваемыхФайловДляЗагрузки(МассивИменФайлов);
		
		Если МассивЗагружаемыхФайлов = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		СоответствиеИмениИАдреса = Новый Соответствие();
		СоответствиеИмениИАдреса.Вставить("",);
		МассивЗагружаемыхФайлов = УПЖКХ_РаботаСФайламиСервер.ПолучитьМассивПередаваемыхФайлов(СоответствиеИмениИАдреса);
	КонецЕсли;
	
	УПЖКХ_РаботаСФайламиКлиент.ЗагрузитьФайл(РасширениеПодключено, ОписаниеОповещения, МассивЗагружаемыхФайлов);
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата опроса команды "КомандаЗагрузитьИзФайлаСтепениРодства".
//
Процедура КомандаЗаполнитьСтепениРодстваЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СчитатьИзФайлаСтепениРодстваНаСервере(ДополнительныеПараметры.МассивОписанийФайлов);
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьВсеЗавершение()

&НаКлиенте
// Процедура - обработчик завершения работы процедуры "КомандаЗагрузить"
//
Процедура КомандаЗагрузитьИзФайлаУслугиОбработкаЗагрузки(МассивОписанийФайлов, ДополнительныеПараметры) Экспорт
	
	// Приходит значение Неопределено, если пользователь отменил выбор файла в веб клиенте,
	// при этом плагин "Расширение для работы с 1С:Предприятием" не подключен.
	Если МассивОписанийФайлов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ЧувашскаяРеспублика_УслугиВОСЗН.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаЗагрузитьОбработкаЗагрузкиЗавершение", ЭтаФорма,
											  Новый Структура("МассивОписанийФайлов", МассивОписанийФайлов));
		
		ТекстВопроса = "Перед заполнением таблица услуг будет очищена. Продолжить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		
	Иначе
		СчитатьИзФайлаУслугиНаСервере(МассивОписанийФайлов);
	КонецЕсли;
	
КонецПроцедуры // КомандаЗагрузитьИзФайлаУслугиОбработкаЗагрузки()

&НаКлиенте
// Обработчик результата опроса команды "КомандаЗаполнитьУслуги".
Процедура КомандаЗагрузитьОбработкаЗагрузкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		СчитатьИзФайлаУслугиНаСервере(ДополнительныеПараметры.МассивОписанийФайлов);
		
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры // КомандаЗагрузитьОбработкаЗагрузкиЗавершение()

&НаКлиенте
// Процедура - обработчик завершения работы процедуры "КомандаЗагрузить"
//
Процедура КомандаЗагрузитьИзФайлаСтепениРодстваОбработкаЗагрузки(МассивОписанийФайлов, ДополнительныеПараметры) Экспорт
	
	// Приходит значение Неопределено, если пользователь отменил выбор файла в веб клиенте,
	// при этом плагин "Расширение для работы с 1С:Предприятием" не подключен.
	Если МассивОписанийФайлов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ЧувашскаяРеспублика_СтепениРодства.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаЗаполнитьСтепениРодстваЗавершение", ЭтаФорма,
											  Новый Структура("МассивОписанийФайлов", МассивОписанийФайлов));
		
		ТекстВопроса = "Перед заполнением таблица степеней родства будет очищена. Продолжить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		
	Иначе
		СчитатьИзФайлаСтепениРодстваНаСервере(МассивОписанийФайлов);
	КонецЕсли;
	
КонецПроцедуры // КомандаЗагрузитьИзФайлаСтепениРодстваОбработкаЗагрузки()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" табличного поля "ТП_УслугаВБазе".
//
Процедура ТП_УслугаВБазеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Устанавливаем запрет на добавление строк копированием.
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" табличного поля "ТП_УслугаВБазе".
//
Процедура ТП_УслугаВБазеПередУдалением(Элемент, Отказ)
	
	Если ПризнакУдаления Тогда
		Отказ = Истина;
		ПризнакУдаления = Ложь;
	Иначе
		// При удалении строки удаляем соответствующие записи в СвердловскаяОбласть_УслугиВБазе.
		УслугаВБазе              = Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе;
		ИдентификаторУслугиВОСЗН = Элементы.ЧувашскаяРеспублика_УслугиВОСЗН.ТекущиеДанные.Код;
		УслугаВОСЗН              = Элементы.ЧувашскаяРеспублика_УслугиВОСЗН.ТекущиеДанные.УслугаВОСЗН;
		
		Отбор = Новый Структура;
		Отбор.Вставить("УслугаВБазе",    УслугаВБазе);
		Отбор.Вставить("Код",            ИдентификаторУслугиВОСЗН);
		Отбор.Вставить("УслугаВОСЗН",    УслугаВОСЗН);
		
		СтрокиУдаления = Объект.ЧувашскаяРеспублика_УслугиВБазе.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
			Объект.ЧувашскаяРеспублика_УслугиВБазе.Удалить(СтрокаУдаления);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриНачалеРедактирования" табличного поля "ТП_УслугаВБазе".
//
Процедура ТП_УслугаВБазеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// Запоминаем предыдущее значение перезаписываемой строки.
	Если НЕ НоваяСтрока Тогда
		ПредыдущаяУслуга = Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередОкончаниемРедактирования" таблицы "УслугаВБазе".
//
Процедура ТП_УслугаВБазеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Добавление незаполненных полей недопустимо!");
		ПризнакУдаления = Истина;
		ТП_УслугаВБазе.Удалить(Элементы.ТП_УслугаВБазе.ТекущиеДанные);
		
		Если ЗначениеЗаполнено(ПредыдущаяУслуга) Тогда
			Идентификатор   = Элементы.ЧувашскаяРеспублика_УслугиВОСЗН.ТекущиеДанные.Код;
			ПризнакУдаления = Истина;
			Отбор = Новый Структура;
			Отбор.Вставить("Код",            Идентификатор);
			Отбор.Вставить("УслугаВБазе",    ПредыдущаяУслуга);
			
			СтрокиУдаления = Объект.ЧувашскаяРеспублика_УслугиВБазе.НайтиСтроки(Отбор);
			
			Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
				Объект.ЧувашскаяРеспублика_УслугиВБазе.Удалить(СтрокаУдаления);
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриОкончанииРедактирования" табличного поля "ТП_УслугаВБазе".
//
Процедура ТП_УслугаВБазеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		// Добавляем запись в СвердловскаяОбласть_УслугиВБазе.
		УслугаВБазе              = Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе;
		ИдентификаторУслугиВОСЗН = Элементы.ЧувашскаяРеспублика_УслугиВОСЗН.ТекущиеДанные.Код;
		УслугаВОСЗН              = Элементы.ЧувашскаяРеспублика_УслугиВОСЗН.ТекущиеДанные.УслугаВОСЗН;
		ЕдиницаИзмерения         = Элементы.ЧувашскаяРеспублика_УслугиВОСЗН.ТекущиеДанные.ЕдиницаИзмерения;
		
		Если НоваяСтрока Тогда
			НоваяСтрокаСоответствия                  = Объект.ЧувашскаяРеспублика_УслугиВБазе.Добавить();
			НоваяСтрокаСоответствия.УслугаВБазе      = УслугаВБазе;
			НоваяСтрокаСоответствия.Код              = ИдентификаторУслугиВОСЗН;
			НоваяСтрокаСоответствия.УслугаВОСЗН      = УслугаВОСЗН;
			НоваяСтрокаСоответствия.ЕдиницаИзмерения = ЕдиницаИзмерения
		Иначе
			Если НЕ ПредыдущаяУслуга = УслугаВБазе Тогда
				Отбор = Новый Структура;
				Отбор.Вставить("Код",            ИдентификаторУслугиВОСЗН);
				Отбор.Вставить("УслугаВБазе",    ПредыдущаяУслуга);
				
				НайденнаяСтрока = Объект.ЧувашскаяРеспублика_УслугиВБазе.НайтиСтроки(Отбор);
				Если НайденнаяСтрока.Количество() = 1 Тогда
					НайденнаяСтрока[0].УслугаВБазе = УслугаВБазе;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "УслугаВБазе" таблицы "Услуги в Базе".
//
Процедура ТП_УслугаВБазеУслугаВБазеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Список уже выбранных услуг по данной услуге в ОСЗН.
	СписокВыбранныхУслуг = Новый СписокЗначений;
	СтрокиВыбранныхУслуг = Объект.ЧувашскаяРеспублика_УслугиВБазе.НайтиСтроки(Новый Структура("Код", Элементы.ЧувашскаяРеспублика_УслугиВОСЗН.ТекущиеДанные.Код));
	Для Каждого СтрокаВыбраннойУслуги Из СтрокиВыбранныхУслуг Цикл
		СписокВыбранныхУслуг.Добавить(СтрокаВыбраннойУслуги.УслугаВБазе);
	КонецЦикла;
	
	ВидСравненияВОтборе = ВидСравненияКомпоновкиДанных.НеВСписке;
	
	Форма = ПолучитьФорму("Справочник.КВП_Услуги.ФормаВыбора", Новый Структура("ТекущаяСтрока", Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе), Элемент);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Форма.Список.КомпоновщикНастроек.Настройки.Отбор, "Ссылка", СписокВыбранныхУслуг,
															ВидСравненияКомпоновкиДанных.НеВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" табличного поля "Услуги в ОСЗН".
//
Процедура ЧувашскаяРеспублика_УслугиВОСЗНПриАктивизацииСтроки(Элемент)
	
	// При активации строки УслугаВОСЗН, загружаем соответствия в УслугаВБазе. 
	ТП_УслугаВБазе.Очистить();
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		Идентификатор = Элемент.ТекущиеДанные.Код;
		ЗаполнитьТаблицуУслугНаСервере(Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" табличного поля "ТП_НормыПотребления".
//
Процедура ТП_НормыПотребленияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Устанавливаем запрет на добавление строк копированием.
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" табличного поля "ТП_НормыПотребления".
//
Процедура ТП_НормыПотребленияПередУдалением(Элемент, Отказ)
	
	Если ПризнакУдаленияНормы Тогда
		Отказ = Истина;
		ПризнакУдаленияНормы = Ложь;
	Иначе
		// При удалении строки удаляем соответствующие записи в ЧувашскаяРеспублика_НормыЗданий.
		НормаПотребления    = Элементы.ТП_НормыПотребления.ТекущиеДанные.НормаПотребления;
		ИдентификаторСтроки = Элементы.ЧувашскаяРеспублика_ЗданияДляНорм.ТекущиеДанные.Здание;
		
		Отбор = Новый Структура;
		Отбор.Вставить("НормаПотребления",  НормаПотребления);
		Отбор.Вставить("Здание",            ИдентификаторСтроки);
		
		СтрокиУдаления = Объект.ЧувашскаяРеспублика_НормыЗданий.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
			Объект.ЧувашскаяРеспублика_НормыЗданий.Удалить(СтрокаУдаления);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриНачалеРедактирования" табличного поля "ТП_НормыПотребления".
//
Процедура ТП_НормыПотребленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// Запоминаем предыдущее значение перезаписываемой строки.
	Если НЕ НоваяСтрока Тогда
		ПредыдущаяНорма = Элементы.ТП_НормыПотребления.ТекущиеДанные.НормаПотребления;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередОкончаниемРедактирования" табличного поля "ТП_НормыПотребления".
//
Процедура ТП_НормыПотребленияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Элементы.ТП_НормыПотребления.ТекущиеДанные.НормаПотребления.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Добавление незаполненных полей недопустимо!");
		ПризнакУдаленияНормы = Истина;
		ТП_НормыПотребления.Удалить(Элементы.ТП_НормыПотребления.ТекущиеДанные);
		
		Если ЗначениеЗаполнено(ПредыдущаяНорма) Тогда
			Идентификатор   = Элементы.ЧувашскаяРеспублика_ЗданияДляНорм.ТекущиеДанные.Здание;
			ПризнакУдаленияНормы = Истина;
			Отбор = Новый Структура;
			Отбор.Вставить("Здание",           Идентификатор);
			Отбор.Вставить("НормаПотребления", ПредыдущаяНорма);
			
			СтрокиУдаления = Объект.ЧувашскаяРеспублика_НормыЗданий.НайтиСтроки(Отбор);
			
			Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
				Объект.ЧувашскаяРеспублика_НормыЗданий.Удалить(СтрокаУдаления);
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриОкончанииРедактирования" табличного поля "ТП_НормыПотребления".
//
Процедура ТП_НормыПотребленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		// Добавляем запись в ЧувашскаяРеспублика_НормыЗданий.
		НормаПотребления = Элементы.ТП_НормыПотребления.ТекущиеДанные.НормаПотребления;
		Идентификатор    = Элементы.ЧувашскаяРеспублика_ЗданияДляНорм.ТекущиеДанные.Здание;
		
		Если НоваяСтрока Тогда
			НоваяСтрокаСоответствия                  = Объект.ЧувашскаяРеспублика_НормыЗданий.Добавить();
			НоваяСтрокаСоответствия.НормаПотребления = НормаПотребления;
			НоваяСтрокаСоответствия.Здание           = Идентификатор;
		Иначе
			Если НЕ ПредыдущаяНорма = НормаПотребления Тогда
				Отбор = Новый Структура;
				Отбор.Вставить("Здание",           Идентификатор);
				Отбор.Вставить("НормаПотребления", ПредыдущаяНорма);
				
				НайденнаяСтрока = Объект.ЧувашскаяРеспублика_НормыЗданий.НайтиСтроки(Отбор);
				Если НайденнаяСтрока.Количество() = 1 Тогда
					НайденнаяСтрока[0].НормаПотребления = НормаПотребления;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "НормаПотребления" таблицы "ТП_НормыПотребления".
//
Процедура ТП_НормыПотребленияНормаПотребленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Список уже выбранных услуг по данной услуге в ОСЗН.
	СписокВыбранныхНорм = Новый СписокЗначений;
	СтрокиВыбранныхНорм = Объект.ЧувашскаяРеспублика_НормыЗданий.НайтиСтроки(Новый Структура("Здание", Элементы.ЧувашскаяРеспублика_ЗданияДляНорм.ТекущиеДанные.Здание));
	Для Каждого СтрокаВыбраннойНормы Из СтрокиВыбранныхНорм Цикл
		СписокВыбранныхНорм.Добавить(СтрокаВыбраннойНормы.НормаПотребления);
	КонецЦикла;
	
	ВидСравненияВОтборе = ВидСравненияКомпоновкиДанных.НеВСписке;
	
	Форма = ПолучитьФорму("Справочник.КВП_НормыПотребленияУслуг.ФормаВыбора", Новый Структура("ТекущаяСтрока", Элементы.ТП_НормыПотребления.ТекущиеДанные.НормаПотребления), Элемент);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Форма.Список.КомпоновщикНастроек.Настройки.Отбор, "Ссылка", СписокВыбранныхНорм,
															ВидСравненияКомпоновкиДанных.НеВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" табличного поля "ЧувашскаяРеспублика_ЗданияДляНорм".
//
Процедура ЧувашскаяРеспублика_ЗданияДляНормПриАктивизацииСтроки(Элемент)
	
	// При активации строки Здание, загружаем соответствия в НормыПотребления.
	ТП_НормыПотребления.Очистить();
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		Идентификатор = Элемент.ТекущиеДанные.Здание;
		ЗаполнитьТаблицуНормНаСервере(Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФорм

&НаКлиентеНаСервереБезКонтекста
// Процедура управляет внешним видом формы.
//
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	// Блокировка командной панели "КП_УслугиВБазе".
	Если Объект.ЧувашскаяРеспублика_УслугиВОСЗН.Количество() = 0 Тогда
		Элементы.ТП_УслугаВБазе.Доступность = Ложь;
	Иначе
		Элементы.ТП_УслугаВБазе.Доступность = Истина;
		Элементы.ЧувашскаяРеспублика_УслугиВОСЗН.ТекущаяСтрока = 0;
	КонецЕсли;
	
	// Блокировка командной панели "КП_НормыПотребления".
	Если Объект.ЧувашскаяРеспублика_ЗданияДляНорм.Количество() = 0 Тогда
		Элементы.ТП_НормыПотребления.Доступность = Ложь;
	Иначе
		Элементы.ТП_НормыПотребления.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры // УправлениеФормой()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ФАЙЛАМИ

#Область СлужебныеПроцедурыРаботыСФайлами

&НаКлиенте
// Определяет подключено ли расширение для работы с файлами.
Процедура ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиенте()
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиентеЗавершение", ЭтотОбъект);
	
	УПЖКХ_РаботаСФайламиКлиент.ОпределитьВидВзаимодействияСФайловойСистемой(ОповещениеЗавершения);
	
КонецПроцедуры // ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиентеЗавершение()

&НаКлиенте
// Обработчик процедуры определяющей подключено расширение работы с файлами или нет.
Процедура ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиентеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		РасширениеПодключено = Результат;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти
