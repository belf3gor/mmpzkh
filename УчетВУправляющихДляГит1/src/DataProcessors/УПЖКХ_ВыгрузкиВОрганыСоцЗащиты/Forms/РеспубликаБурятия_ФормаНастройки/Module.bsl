
&НаКлиенте
Перем ПредыдущаяУслуга;

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АдресНастроекВХранилище") И Параметры.АдресНастроекВХранилище <> Неопределено Тогда
		
		СтруктураПараметров = ПолучитьИзВременногоХранилища(Параметры.АдресНастроекВХранилище);
		
		Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
			
			// Таблица настроек.
			врТаблицаНастроек = Неопределено;
			Если СтруктураПараметров.Свойство("РеспубликаБурятия_ТаблицаНастроек", врТаблицаНастроек) Тогда
				Если ТипЗнч(врТаблицаНастроек) = Тип("ТаблицаЗначений") Тогда
					Объект.РеспубликаБурятия_ТаблицаНастроек.Загрузить(врТаблицаНастроек);
				КонецЕсли;
			КонецЕсли;
			
			// Таблица услуг в базе.
			врТаблицаУслугиВБазе = Неопределено;
			Если СтруктураПараметров.Свойство("РеспубликаБурятия_УслугиВБазе", врТаблицаУслугиВБазе) Тогда
				Если ТипЗнч(врТаблицаУслугиВБазе) = Тип("ТаблицаЗначений") Тогда
					Объект.РеспубликаБурятия_УслугиВБазе.Загрузить(врТаблицаУслугиВБазе);
				КонецЕсли;
			КонецЕсли;
			
			// Признак использования фиксированного тарифа.
			врИспользоватьФиксированныйТариф = Неопределено;
			Если СтруктураПараметров.Свойство("ИспользоватьФиксированныйТариф", врИспользоватьФиксированныйТариф) Тогда
				Объект.ИспользоватьФиксированныйТариф = врИспользоватьФиксированныйТариф;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии(Отказ)
	
	УправлениеФормой();
	
КонецПроцедуры // ПриОткрытии()

////////////////////
// Управление внешним видом формы.

&НаКлиенте
// Обработчик команды "КомандаОбновитьСписокУслуг".
//
Процедура УправлениеФормой()
	
	Элементы.КомандаИспользоватьФиксированныйТариф.Пометка     = Объект.ИспользоватьФиксированныйТариф;
	Элементы.КомандаИспользоватьФиксированныйТариф.Отображение = ?(Объект.ИспользоватьФиксированныйТариф, ОтображениеКнопки.КартинкаИТекст, ОтображениеКнопки.Текст);
	Элементы.ФиксированныйТариф.Видимость                      = Объект.ИспользоватьФиксированныйТариф;
	
КонецПроцедуры // КомандаИспользоватьФиксированныйТариф()

#КонецОбласти

#Область ОбработчикиКомандФормы

////////////////////
// Команда Инструкция

&НаКлиенте
// Обработчик команды "КомандаСправочнаяИнформация".
//
Процедура КомандаСправочнаяИнформация(Команда)
	
	ОткрытьСправкуФормы();
	
КонецПроцедуры // КомандаСправочнаяИнформация()

////////////////////
// Команда "Использовать фиксированный тариф"

&НаКлиенте
// Обработчик команды "КомандаИспользоватьФиксированныйТариф".
//
Процедура КомандаИспользоватьФиксированныйТариф(Команда)
	
	Объект.ИспользоватьФиксированныйТариф = (Не Элементы.КомандаИспользоватьФиксированныйТариф.Пометка);
	УправлениеФормой();
	
КонецПроцедуры // КомандаИспользоватьФиксированныйТариф()

#Область КомандаОбновитьСписокУслуг

&НаКлиенте
// Обработчик команды "КомандаОбновитьСписокУслуг".
//
Процедура КомандаОбновитьСписокУслуг(Команда)
	
	Если Объект.РеспубликаБурятия_УслугиВБазе.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаОбновитьСписокУслугЗавершение", ЭтотОбъект);
		
		ТекстВопроса = "Все установленные соответствия будут очищены. Продолжить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ОбновитьСписокУслугНаСервере();
	КонецЕсли;
	
КонецПроцедуры // КомандаОбновить()

&НаКлиенте
// Обработчик результата опроса команды "КомандаОбновитьСписокУслуг".
//
Процедура КомандаОбновитьСписокУслугЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ОбновитьСписокУслугНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры // КомандаОбновитьСписокУслугЗавершение()

&НаСервере
// Загружает список услуг в ОСЗН по умолчанию из справочника.
//
Процедура ОбновитьСписокУслугНаСервере()
	
	Объект.РеспубликаБурятия_УслугиВБазе.Очистить();
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.РеспубликаБурятия_ОбновитьСписокУслугНаСервере();
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецПроцедуры // ОбновитьСписокУслугНаСервере()

#КонецОбласти

#Область КомандаСохранить

&НаКлиенте
// Обработчик команды "КомандаСохранить".
//
Процедура КомандаСохранить(Команда)
	
	АдресНастроекВХранилище = ПоместитьНастройкиВХранилище();
	Закрыть(АдресНастроекВХранилище);
	
КонецПроцедуры // КомандаСохранить()

////////////////////
// Работа с временным хранилищем

&НаСервере
// Помещает таблицу услуг во временное хранилище.
//
// Возвращаемое значение:
//  Строка - адрес настроек во временном хранилище.
//
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("РеспубликаБурятия_ТаблицаНастроек", Объект.РеспубликаБурятия_ТаблицаНастроек.Выгрузить());
	СтруктураПараметров.Вставить("РеспубликаБурятия_УслугиВБазе",     Объект.РеспубликаБурятия_УслугиВБазе.Выгрузить());
	СтруктураПараметров.Вставить("ИспользоватьФиксированныйТариф",    Объект.ИспользоватьФиксированныйТариф);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураПараметров, Новый УникальныйИдентификатор);
	
КонецФункции // ПоместитьНастройкиВХранилище()

#КонецОбласти

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область УслугиВОСЗН

&НаКлиенте
// Обработчик события "ПриАктивизацииСтроки" таблицы "ТаблицаНастроек".
//
Процедура ТаблицаНастроекПриАктивизацииСтроки(Элемент)
	
	ТП_ЖКУ_ВБазе.Очистить();
	
	// При активации строки УслугаВОСЗН, загружаем соответствия в УслугаВБазе.
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		
		Отбор = Новый Структура("КодУслугиВОСЗН", Элемент.ТекущиеДанные.КодУслугиВОСЗН);
		
		НайденныеСтроки = Объект.РеспубликаБурятия_УслугиВБазе.НайтиСтроки(Отбор);
		
		Для Каждого ТекСтрока из НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(ТП_ЖКУ_ВБазе.Добавить(), ТекСтрока);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ТаблицаНастроекПриАктивизацииСтроки()

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" таблицы "ТаблицаНастроек".
//
Процедура ТаблицаНастроекПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Устанавливаем запрет на добавление строк копированием.
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ТаблицаНастроекПередНачаломДобавления()

&НаКлиенте
// Обработчик события "ПередУдалением" таблицы "ТаблицаНастроек".
//
Процедура ТаблицаНастроекПередУдалением(Элемент, Отказ)
	
	// Устанавливаем запрет на удаление строк.
	Отказ = Истина;
	
КонецПроцедуры // ТаблицаНастроекПередУдалением()

&НаКлиенте
// Обработчик события "ПриИзменении" таблицы "ТаблицаНастроек".
//
Процедура ФиксированныйТарифПриИзменении(Элемент)
	
	НайденныеСтроки = Объект.РеспубликаБурятия_УслугиВБазе.НайтиСтроки(Новый Структура("КодУслугиВОСЗН", Элемент.Родитель.ТекущиеДанные.КодУслугиВОСЗН));
	Для Каждого ТекСтрока из НайденныеСтроки Цикл
		ТекСтрока.ФиксированныйТариф = Элемент.Родитель.ТекущиеДанные.ФиксированныйТариф;
	КонецЦикла;
	
КонецПроцедуры // ФиксированныйТарифПриИзменении()

#КонецОбласти

#Область ТП_УслугиВБазе

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" таблицы "УслугаВБазе".
//
Процедура ТП_ЖКУ_ВБазеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Если не выбрана строка в левой колоке или добавление строк копированием.
	Если Элементы.ТаблицаНастроек.ТекущиеДанные = Неопределено Или Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ТП_ЖКУ_ВБазеПередНачаломДобавления()

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" таблицы "УслугаВБазе".
//
Процедура ТП_ЖКУ_ВБазеПередУдалением(Элемент, Отказ)
	
	// При удалении строки удаляем соответствующие записи в РеспубликаБурятия_УслугиВБазе. 
	КодУслугиВОСЗН = Элементы.ТаблицаНастроек.ТекущиеДанные.КодУслугиВОСЗН;
	УслугаВБазе    = Элемент.ТекущиеДанные.УслугаВБазе;
	
	Отбор = Новый Структура;
	Отбор.Вставить("КодУслугиВОСЗН", КодУслугиВОСЗН);
	Отбор.Вставить("УслугаВБазе",    УслугаВБазе);
	
	СтрокиУдаления = Объект.РеспубликаБурятия_УслугиВБазе.НайтиСтроки(Отбор);
	
	Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
		Объект.РеспубликаБурятия_УслугиВБазе.Удалить(СтрокаУдаления);
	КонецЦикла;
	
КонецПроцедуры // ТП_ЖКУ_ВБазеПередУдалением()

&НаКлиенте
// Процедура - обработчик события "ПриНачалеРедактирования" таблицы "УслугаВБазе".
//
Процедура ТП_ЖКУ_ВБазеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// Запоминаем предыдущее значение перезаписываемой строки.
	Если Не НоваяСтрока Тогда
		ПредыдущаяУслуга = Элемент.ТекущиеДанные.УслугаВБазе;
	КонецЕсли;
	
КонецПроцедуры // ТП_ЖКУ_ВБазеПриНачалеРедактирования()

&НаКлиенте
// Процедура - обработчик события "ПередОкончаниемРедактирования" таблицы "УслугаВБазе".
//
Процедура ТП_ЖКУ_ВБазеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	// Если изменяем выбранное значение, то удаляем предыдущую запись.
	Если Не НоваяСтрока И ЗначениеЗаполнено(ПредыдущаяУслуга) Тогда
		
		КодУслугиВОСЗН = Элементы.ТаблицаНастроек.ТекущиеДанные.КодУслугиВОСЗН;
		
		Отбор = Новый Структура;
		Отбор.Вставить("КодУслугиВОСЗН", КодУслугиВОСЗН);
		Отбор.Вставить("УслугаВБазе",    ПредыдущаяУслуга);
		
		НайденнаяСтрока = Объект.РеспубликаБурятия_УслугиВБазе.НайтиСтроки(Отбор);
		Объект.РеспубликаБурятия_УслугиВБазе.Удалить(НайденнаяСтрока[0]);
		
	КонецЕсли;
	
КонецПроцедуры // ТП_ЖКУ_ВБазеПередОкончаниемРедактирования()

&НаКлиенте
// Процедура - обработчик события "ПриОкончанииРедактирования" таблицы "УслугаВБазе".
//
Процедура ТП_ЖКУ_ВБазеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не Элемент.ТекущиеДанные = Неопределено И Не ОтменаРедактирования Тогда
		
		Если Элемент.ТекущиеДанные.УслугаВБазе.Пустая() Тогда
			// Удаляем пустую строку.
			ТП_ЖКУ_ВБазе.Удалить(ТП_ЖКУ_ВБазе.Индекс(Элемент.ТекущиеДанные));
		Иначе
			// Добавляем запись в РеспубликаБурятия_УслугиВБазе.
			НоваяСтрокаСоответствия = Объект.РеспубликаБурятия_УслугиВБазе.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСоответствия, Элементы.ТаблицаНастроек.ТекущиеДанные);
			ЗаполнитьЗначенияСвойств(НоваяСтрокаСоответствия, Элемент.ТекущиеДанные);
			
			// Удаляем старую запись при перевыборе.
			Если Не ПредыдущаяУслуга = Элемент.ТекущиеДанные.УслугаВБазе Тогда
				
				Отбор = Новый Структура;
				Отбор.Вставить("КодУслугиВОСЗН", Элементы.ТаблицаНастроек.ТекущиеДанные.КодУслугиВОСЗН);
				Отбор.Вставить("УслугаВБазе",    ПредыдущаяУслуга);
				
				НайденнаяСтрока = Объект.РеспубликаБурятия_УслугиВБазе.НайтиСтроки(Отбор);
				Если НайденнаяСтрока.Количество() = 1 Тогда
					НайденнаяСтрока[0].УслугаВБазе = Элемент.ТекущиеДанные.УслугаВБазе;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ТП_ЖКУ_ВБазеПриОкончанииРедактирования()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "УслугаВБазе" таблицы "УслугаВБазе".
//
Процедура ТП_ЖКУ_ВБазеУслугаВБазеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Устанавливаем отбор на справочник "Услуги".
	СтандартнаяОбработка = Ложь;
	
	// Список уже выбранных услуг по данной услуге в ОСЗН.
	СписокВыбранныхУслуг = Новый СписокЗначений;
	Для Каждого Строка Из Объект.РеспубликаБурятия_УслугиВБазе Цикл
		СписокВыбранныхУслуг.Добавить(Строка.УслугаВБазе);
	КонецЦикла;
	
	Форма = ПолучитьФорму("Справочник.КВП_Услуги.ФормаВыбора", Новый Структура("ТекущаяСтрока", Элементы.ТП_ЖКУ_ВБазе.ТекущиеДанные.УслугаВБазе), Элемент);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Форма.Список.КомпоновщикНастроек.Настройки.Отбор, "Ссылка", СписокВыбранныхУслуг,
															ВидСравненияКомпоновкиДанных.НеВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
	Форма.Открыть();
	
КонецПроцедуры // ТП_ЖКУ_ВБазеУслугаВБазеНачалоВыбора()

#КонецОбласти


























