
#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
	ВосстановитьНастройкиНаСервере();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии(Отказ)
	
	ОбновитьПериод();
	
	ВерсияФорматаВыгрузки = "2.6";
	ГР = "|";
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьНастройкиНаСервере();
	
КонецПроцедуры // ПриЗакрытии()

#КонецОбласти

#Область СохраняемыеНастройки

////////////////////////
// Сохраняемые настройки

&НаСервере
// Процедура восстановления настроек.
//
Процедура ВосстановитьНастройкиНаСервере()
	
	СтруктураНастроек = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("ВыгрузкаРеспубликаТатарстан", "ПараметрыВыгрузки");
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		
		// Каталог выгрузки.
		врИмяКаталогаВыгрузки = Неопределено;
		Если СтруктураНастроек.Свойство("ИмяКаталогаВыгрузки", врИмяКаталогаВыгрузки) Тогда
			Объект.ИмяКаталогаВыгрузки = врИмяКаталогаВыгрузки;
		КонецЕсли;
		
		// Группа лицевых счетов.
		врГруппаЛицевыхСчетов = Неопределено;
		Если СтруктураНастроек.Свойство("ГруппаЛицевыхСчетов", врГруппаЛицевыхСчетов) Тогда
			ГруппаЛицевыхСчетов = врГруппаЛицевыхСчетов;
		КонецЕсли;
		
		// Префикс лицевых счетов.
		врПрефиксЛС = Неопределено;
		Если СтруктураНастроек.Свойство("ПрефиксЛС", врПрефиксЛС) Тогда
			ПрефиксЛС = врПрефиксЛС;
		КонецЕсли;
		
		// Идентификация лицевых счетов.
		врИдентификацияЛС = Неопределено;
		Если СтруктураНастроек.Свойство("ИдентификацияЛС", врИдентификацияЛС) Тогда
			Объект.ИдентификацияЛС = врИдентификацияЛС;
		Иначе
			// По умолчанию идентификация по наименованию.
			Объект.ИдентификацияЛС = 1;
		КонецЕсли;
		
		// Код газоснабжения.
		врКодГазоснабжения = Неопределено;
		Если СтруктураНастроек.Свойство("КодГазоснабжения", врКодГазоснабжения) Тогда
			Объект.КодГазоснабжения = врКодГазоснабжения;
		Иначе
			// По умолчанию.
			Объект.КодГазоснабжения = 1;
		КонецЕсли;
		
		// Код водоснабжения.
		врКодВодоснабжения = Неопределено;
		Если СтруктураНастроек.Свойство("КодВодоснабжения", врКодВодоснабжения) Тогда
			Объект.КодВодоснабжения = врКодВодоснабжения;
		Иначе
			// По умолчанию.
			Объект.КодВодоснабжения = 5;
		КонецЕсли;
		
		// Кодировка заружаемых/выгружаемых файлов.
		врКодировкаТекстовогоФайла = Неопределено;
		Если СтруктураНастроек.Свойство("КодировкаТекстовогоФайла", врКодировкаТекстовогоФайла) Тогда
			Объект.КодировкаТекстовогоФайла = врКодировкаТекстовогоФайла;
		Иначе
			// По умолчанию кодировка OEM.
			Объект.КодировкаТекстовогоФайла = Ложь;
		КонецЕсли;
		
		// Таблица благоустройств помещений.
		врТаблицаБлагоустройств = Неопределено;
		Если СтруктураНастроек.Свойство("РеспубликаТатарстан_СоответствиеВидовБлагоустройствПомещений", врТаблицаБлагоустройств) Тогда
			Если ТипЗнч(врТаблицаБлагоустройств) = Тип("ТаблицаЗначений") Тогда
				Объект.РеспубликаТатарстан_СоответствиеВидовБлагоустройствПомещений.Загрузить(врТаблицаБлагоустройств);
			КонецЕсли;
		КонецЕсли;
		
		// Таблица настроек.
		врТаблицаНастроек = Неопределено;
		Если СтруктураНастроек.Свойство("РеспубликаТатарстан_ТаблицаНастроек", врТаблицаНастроек) Тогда
			Если ТипЗнч(врТаблицаНастроек) = Тип("ТаблицаЗначений") Тогда
				Объект.РеспубликаТатарстан_ТаблицаНастроек.Загрузить(врТаблицаНастроек);
			КонецЕсли;
		КонецЕсли;
		
		// Таблица услуг в базе.
		врТаблицаУслугВБазе = Неопределено;
		Если СтруктураНастроек.Свойство("РеспубликаТатарстан_УслугиВБазе", врТаблицаУслугВБазе) Тогда
			Если ТипЗнч(врТаблицаУслугВБазе) = Тип("ТаблицаЗначений") Тогда
				Объект.РеспубликаТатарстан_УслугиВБазе.Загрузить(врТаблицаУслугВБазе);
			КонецЕсли;
		КонецЕсли;
		
		// Таблица соответствия кодов единиц.
		врТаблицаСоответствияКодовЕИ = Неопределено;
		Если СтруктураНастроек.Свойство("РеспубликаТатарстан_ТаблицаСоответствияКодовЕИ", врТаблицаСоответствияКодовЕИ) Тогда
			Если ТипЗнч(врТаблицаСоответствияКодовЕИ) = Тип("ТаблицаЗначений") Тогда
				Объект.РеспубликаТатарстан_ТаблицаСоответствияКодовЕИ.Загрузить(врТаблицаСоответствияКодовЕИ);
			КонецЕсли;
		КонецЕсли;
		
		// Таблица соответствия кодов единиц.
		врКубометрГВС = Неопределено;
		Если СтруктураНастроек.Свойство("РеспубликаТатарстан_КубометрГВС", врКубометрГВС) Тогда
			Если ТипЗнч(врКубометрГВС) = Тип("ТаблицаЗначений") Тогда
				Объект.РеспубликаТатарстан_КубометрГВС.Загрузить(врКубометрГВС);
			КонецЕсли;
		КонецЕсли;
		
		// Услуга для льгот ОСЗН.
		врУслугаДляЛьготОСЗН = Неопределено;
		Если СтруктураНастроек.Свойство("УслугаДляЛьготОСЗН", врУслугаДляЛьготОСЗН) Тогда
			Объект.УслугаДляЛьготОСЗН = врУслугаДляЛьготОСЗН;
		КонецЕсли;
		
		// Таблица виды выплат ОСЗН.
		врВидыВыплатОСЗН = Неопределено;
		Если СтруктураНастроек.Свойство("РеспубликаТатарстан_ВидыВыплатОСЗН", врВидыВыплатОСЗН) Тогда
			Если ТипЗнч(врВидыВыплатОСЗН) = Тип("ТаблицаЗначений") Тогда
				Объект.РеспубликаТатарстан_ВидыВыплатОСЗН.Загрузить(врВидыВыплатОСЗН);
			КонецЕсли;
		КонецЕсли;
		
		// Таблица настроек льгот.
		врЛьготыВБазе = Неопределено;
		Если СтруктураНастроек.Свойство("РеспубликаТатарстан_ЛьготыВБазе", врЛьготыВБазе) Тогда
			Если ТипЗнч(врЛьготыВБазе) = Тип("ТаблицаЗначений") Тогда
				Объект.РеспубликаТатарстан_ЛьготыВБазе.Загрузить(врЛьготыВБазе);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		// По умолчанию.
		ИдентификацияЛС  = 1;
		КодГазоснабжения = 1;
		КодВодоснабжения = 5;
		// Кодировка OEM по умолчанию.
		КодировкаТекстовогоФайла = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьНастройкиНаСервере()

&НаСервере
// Процедура сохранения настроек.
//
Процедура СохранитьНастройкиНаСервере()
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("ИмяКаталогаВыгрузки", Объект.ИмяКаталогаВыгрузки);
	
	СтруктураНастроек.Вставить("ГруппаЛицевыхСчетов", ГруппаЛицевыхСчетов);
	СтруктураНастроек.Вставить("ПрефиксЛС",           ПрефиксЛС);
	
	СтруктураНастроек.Вставить("ИдентификацияЛС",          Объект.ИдентификацияЛС);
	СтруктураНастроек.Вставить("КодГазоснабжения",         Объект.КодГазоснабжения);
	СтруктураНастроек.Вставить("КодВодоснабжения",         Объект.КодВодоснабжения);
	СтруктураНастроек.Вставить("КодировкаТекстовогоФайла", Объект.КодировкаТекстовогоФайла);
	
	СтруктураНастроек.Вставить("РеспубликаТатарстан_СоответствиеВидовБлагоустройствПомещений", Объект.РеспубликаТатарстан_СоответствиеВидовБлагоустройствПомещений.Выгрузить());
	
	СтруктураНастроек.Вставить("РеспубликаТатарстан_ТаблицаНастроек",            Объект.РеспубликаТатарстан_ТаблицаНастроек.Выгрузить());
	СтруктураНастроек.Вставить("РеспубликаТатарстан_УслугиВБазе",                Объект.РеспубликаТатарстан_УслугиВБазе.Выгрузить());
	СтруктураНастроек.Вставить("РеспубликаТатарстан_ТаблицаСоответствияКодовЕИ", Объект.РеспубликаТатарстан_ТаблицаСоответствияКодовЕИ.Выгрузить());
	СтруктураНастроек.Вставить("РеспубликаТатарстан_КубометрГВС",                Объект.РеспубликаТатарстан_КубометрГВС.Выгрузить());
	
	СтруктураНастроек.Вставить("УслугаДляЛьготОСЗН",                 Объект.УслугаДляЛьготОСЗН);
	СтруктураНастроек.Вставить("РеспубликаТатарстан_ВидыВыплатОСЗН", Объект.РеспубликаТатарстан_ВидыВыплатОСЗН.Выгрузить());
	СтруктураНастроек.Вставить("РеспубликаТатарстан_ЛьготыВБазе",    Объект.РеспубликаТатарстан_ЛьготыВБазе.Выгрузить());
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("ВыгрузкаРеспубликаТатарстан", "ПараметрыВыгрузки", СтруктураНастроек);
	
КонецПроцедуры // СохранитьНастройкиНаСервере()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ПериодСтрокой

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Модифицированность);
	
КонецПроцедуры // ПериодСтрокойПриИзменении()

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры // ПериодСтрокойНачалоВыбора()

&НаКлиенте
// Обработчик события "Регулирование" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Направление, Модифицированность);
	
КонецПроцедуры // ПериодСтрокойРегулирование()

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодСтрокойАвтоПодбор()

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодСтрокойОкончаниеВводаТекста()

&НаКлиенте
// Изменяет период на форме выгрузки.
//
// Параметры:
//  Период - Дата - устанавливаемый период.
//
Процедура ОбновитьПериод(Период = Неопределено)
	
	Объект.Период = ?(Период = Неопределено, УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("РабочаяДата"), КонецМесяца(Период));
	
	Если Объект.Период = '00010101' Тогда
		Объект.Период = ТекущаяДата();
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры // ОбновитьПериод()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область КоманднаяПанель

////////////////////////
// Команда Инструкция

&НаКлиенте
// Обработчик команды "КомандаСправочнаяИнформация".
//
Процедура КомандаСправочнаяИнформация(Команда)
	
	ОткрытьСправкуФормы();
	
КонецПроцедуры // КомандаСправочнаяИнформация()

////////////////////////
// Команда Настройка

&НаКлиенте
// Обработчик команды "КомандаНастройка".
//
Процедура КомандаНастройка(Команда)
	
	АдресНастроекВХранилище = ПоместитьНастройкиВХранилище();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаНастройкаЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты.Форма.РеспубликаТатарстан_ФормаНастройка", Новый Структура("АдресНастроекВХранилище", АдресНастроекВХранилище), ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры // КомандаНастройка()

&НаКлиенте
// Обработчик результата опроса команды "КомандаНастройка".
//
Процедура КомандаНастройкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		ПолучитьНастройкиИзХранилища(Результат);
	КонецЕсли;
	
КонецПроцедуры // КомандаНастройкаЗавершение()

////////////////////////
// Работа с временным хранилищем

&НаСервере
// Помещает данные во временное хранилище для передачи их в форму настройки.
//
// Возвращаемое значение:
//  Строка - адрес настроек в хранилище.
//
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("ИдентификацияЛС",          Объект.ИдентификацияЛС);
	СтруктураНастроек.Вставить("КодГазоснабжения",         Объект.КодГазоснабжения);
	СтруктураНастроек.Вставить("КодВодоснабжения",         Объект.КодВодоснабжения);
	СтруктураНастроек.Вставить("КодировкаТекстовогоФайла", Объект.КодировкаТекстовогоФайла);
	
	СтруктураНастроек.Вставить("РеспубликаТатарстан_СоответствиеВидовБлагоустройствПомещений", Объект.РеспубликаТатарстан_СоответствиеВидовБлагоустройствПомещений.Выгрузить());
	
	СтруктураНастроек.Вставить("РеспубликаТатарстан_ТаблицаНастроек",            Объект.РеспубликаТатарстан_ТаблицаНастроек.Выгрузить());
	СтруктураНастроек.Вставить("РеспубликаТатарстан_УслугиВБазе",                Объект.РеспубликаТатарстан_УслугиВБазе.Выгрузить());
	СтруктураНастроек.Вставить("РеспубликаТатарстан_ТаблицаСоответствияКодовЕИ", Объект.РеспубликаТатарстан_ТаблицаСоответствияКодовЕИ.Выгрузить());
	СтруктураНастроек.Вставить("РеспубликаТатарстан_КубометрГВС",                Объект.РеспубликаТатарстан_КубометрГВС.Выгрузить());
	
	СтруктураНастроек.Вставить("УслугаДляЛьготОСЗН",                 Объект.УслугаДляЛьготОСЗН);
	СтруктураНастроек.Вставить("РеспубликаТатарстан_ВидыВыплатОСЗН", Объект.РеспубликаТатарстан_ВидыВыплатОСЗН.Выгрузить());
	СтруктураНастроек.Вставить("РеспубликаТатарстан_ЛьготыВБазе",    Объект.РеспубликаТатарстан_ЛьготыВБазе.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции // ПоместитьДанныеВХранилище()

&НаСервере
// Получает настройки из временного хранилища.
//
Функция ПолучитьНастройкиИзХранилища(АдресНастроекВХранилище)
	
	СтруктураНастроек = ПолучитьИзВременногоХранилища(АдресНастроекВХранилище);
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		
		// Идентификация лицевых счетов.
		врИдентификацияЛС = Неопределено;
		Если СтруктураНастроек.Свойство("ИдентификацияЛС", врИдентификацияЛС) Тогда
			Объект.ИдентификацияЛС = врИдентификацияЛС;
		КонецЕсли;
		
		// Код газоснабжения.
		врКодГазоснабжения = Неопределено;
		Если СтруктураНастроек.Свойство("КодГазоснабжения", врКодГазоснабжения) Тогда
			Объект.КодГазоснабжения = врКодГазоснабжения;
		КонецЕсли;
		
		// Код водоснабжения.
		врКодВодоснабжения = Неопределено;
		Если СтруктураНастроек.Свойство("КодВодоснабжения", врКодВодоснабжения) Тогда
			Объект.КодВодоснабжения = врКодВодоснабжения;
		КонецЕсли;
		
		// Кодировка заружаемых/выгружаемых файлов.
		врКодировкаТекстовогоФайла = Неопределено;
		Если СтруктураНастроек.Свойство("КодировкаТекстовогоФайла", врКодировкаТекстовогоФайла) Тогда
			Объект.КодировкаТекстовогоФайла = врКодировкаТекстовогоФайла;
		КонецЕсли;
		
		// Таблица настроек.
		врТаблицаНастроек = Неопределено;
		Если СтруктураНастроек.Свойство("РеспубликаТатарстан_ТаблицаНастроек", врТаблицаНастроек) Тогда
			Если ТипЗнч(врТаблицаНастроек) = Тип("ТаблицаЗначений") Тогда
				Объект.РеспубликаТатарстан_ТаблицаНастроек.Загрузить(врТаблицаНастроек);
			КонецЕсли;
		КонецЕсли;
		
		// Таблица благоустройств помещений.
		врТаблицаБлагоустройств = Неопределено;
		Если СтруктураНастроек.Свойство("РеспубликаТатарстан_СоответствиеВидовБлагоустройствПомещений", врТаблицаБлагоустройств) Тогда
			Если ТипЗнч(врТаблицаБлагоустройств) = Тип("ТаблицаЗначений") Тогда
				Объект.РеспубликаТатарстан_СоответствиеВидовБлагоустройствПомещений.Загрузить(врТаблицаБлагоустройств);
			КонецЕсли;
		КонецЕсли;
		
		// Таблица услуг в базе.
		врТаблицаУслугВБазе = Неопределено;
		Если СтруктураНастроек.Свойство("РеспубликаТатарстан_УслугиВБазе", врТаблицаУслугВБазе) Тогда
			Если ТипЗнч(врТаблицаУслугВБазе) = Тип("ТаблицаЗначений") Тогда
				Объект.РеспубликаТатарстан_УслугиВБазе.Загрузить(врТаблицаУслугВБазе);
			КонецЕсли;
		КонецЕсли;
		
		// Таблица соответствия кодов единиц.
		врТаблицаСоответствияКодовЕИ = Неопределено;
		Если СтруктураНастроек.Свойство("РеспубликаТатарстан_ТаблицаСоответствияКодовЕИ", врТаблицаСоответствияКодовЕИ) Тогда
			Если ТипЗнч(врТаблицаСоответствияКодовЕИ) = Тип("ТаблицаЗначений") Тогда
				Объект.РеспубликаТатарстан_ТаблицаСоответствияКодовЕИ.Загрузить(врТаблицаСоответствияКодовЕИ);
			КонецЕсли;
		КонецЕсли;
		
		// Таблица соответствия кодов единиц.
		врКубометрГВС = Неопределено;
		Если СтруктураНастроек.Свойство("РеспубликаТатарстан_КубометрГВС", врКубометрГВС) Тогда
			Если ТипЗнч(врКубометрГВС) = Тип("ТаблицаЗначений") Тогда
				Объект.РеспубликаТатарстан_КубометрГВС.Загрузить(врКубометрГВС);
			КонецЕсли;
		КонецЕсли;
		
		// Услуга для льгот ОСЗН.
		врУслугаДляЛьготОСЗН = Неопределено;
		Если СтруктураНастроек.Свойство("УслугаДляЛьготОСЗН", врУслугаДляЛьготОСЗН) Тогда
			Объект.УслугаДляЛьготОСЗН = врУслугаДляЛьготОСЗН;
		КонецЕсли;
		
		// Таблица виды выплат ОСЗН.
		врВидыВыплатОСЗН = Неопределено;
		Если СтруктураНастроек.Свойство("РеспубликаТатарстан_ВидыВыплатОСЗН", врВидыВыплатОСЗН) Тогда
			Если ТипЗнч(врВидыВыплатОСЗН) = Тип("ТаблицаЗначений") Тогда
				Объект.РеспубликаТатарстан_ВидыВыплатОСЗН.Загрузить(врВидыВыплатОСЗН);
			КонецЕсли;
		КонецЕсли;
		
		// Таблица настроек льгот.
		врЛьготыВБазе = Неопределено;
		Если СтруктураНастроек.Свойство("РеспубликаТатарстан_ЛьготыВБазе", врЛьготыВБазе) Тогда
			Если ТипЗнч(врЛьготыВБазе) = Тип("ТаблицаЗначений") Тогда
				Объект.РеспубликаТатарстан_ЛьготыВБазе.Загрузить(врЛьготыВБазе);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции // ПолучитьНастройкиИзХранилища()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ГРУППЫ ОТВЕТ ПОСТАВЩИКУ

#Область ЗагрузкаФайлаОтветПоставщику

////////////////////////
// Выбор файла "Ответ поставщику"

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ФайлОтветПоставщику".
//
Процедура ФайлОтветПоставщикуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Фильтр                  = "Текстовый файл (*.txt)|*.txt";
	ДиалогВыбораФайла.Расширение              = "txt";
	ДиалогВыбораФайла.Заголовок               = "Выберите файл ""Ответ поставщику"" (справочник ПСС)";
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.ИндексФильтра           = 0;
	ДиалогВыбораФайла.ПолноеИмяФайла          = "";
	
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.МножественныйВыбор          = Ложь;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ФайлОтветПоставщикуНачалоВыбораЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
// Обработчик заверешния обработчик события "НачалоВыбора" поля "ФайлОтветПоставщику".
Процедура ФайлОтветПоставщикуНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		ФайлОтветПоставщику = ВыбранныеФайлы[0];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Открытие" поля "ФайлОтветПоставщику".
//
Процедура ФайлОтветПоставщикуОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ФайлОтветПоставщикуОткрытиеЗапускПриложения", ЭтотОбъект);
	НачатьЗапускПриложения(ОписаниеОповещения, ФайлОтветПоставщику);
	
КонецПроцедуры

&НаКлиенте
// Обработчик заверешения запуска приложения.
Процедура ФайлОтветПоставщикуОткрытиеЗапускПриложения(КодВозврата, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры // ФайлОтветПоставщикуОткрытие()

////////////////////////
// Загрузка файла "Ответ поставщику"

&НаКлиенте
// Обработчик команды "КомандаЗагрузитьОтветПоставщику".
//
Процедура КомандаЗагрузитьОтветПоставщику(Команда)
	
	ОчиститьСообщения();
	
	// Проверяем файл на существование.
	Файл = Новый Файл(ФайлОтветПоставщику);
	Файл.НачатьПроверкуСуществования(Новый ОписаниеОповещения("КомандаЗагрузитьОтветПоставщикуЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения команды "ЗагрузитьОтветПоставщику".
Процедура КомандаЗагрузитьОтветПоставщикуЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	Если Не Существует Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Указанный файл не существует!");
		Возврат;
	КонецЕсли;
	
	Если Объект.РеспубликаТатарстан_ОтветПоставщику.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаЗагрузитьОтветПоставщикуВопрос", ЭтотОбъект);
		
		ТекстВопроса = "Перед загрузкой табличная часть будет очищена. Загрузить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		КомандаЗагрузитьОтветПоставщикуПродолжение();
	КонецЕсли;

КонецПроцедуры // КомандаЗагрузитьОтветПоставщику()

&НаКлиенте
// Обработчик результата опроса команды "КомандаЗагрузитьОтветПоставщику".
//
Процедура КомандаЗагрузитьОтветПоставщикуВопрос(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Объект.РеспубликаТатарстан_ОтветПоставщику.Очистить();
		
		КомандаЗагрузитьОтветПоставщикуПродолжение();
		
	КонецЕсли;
	
КонецПроцедуры // КомандаЗагрузитьОтветПоставщикуВопрос()

&НаКлиенте
// Загрузка таблицы услуг в ОСЗН из dbf-файла.
//
Процедура КомандаЗагрузитьОтветПоставщикуПродолжение() 
	
	// Выполняем построчное чтение.
	Файл = Новый ТекстовыйДокумент;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаЗагрузитьОтветПоставщикуПродолжениеЗавершение",
												  ЭтотОбъект, Новый Структура("Файл", Файл));
	
	ТипФайла = ?(Объект.КодировкаТекстовогоФайла, КодировкаТекста.ANSI, КодировкаТекста.OEM);
	
	Файл.НачатьЧтение(ОписаниеОповещения, ФайлОтветПоставщику, ТипФайла);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения процедуры продолжения загрузки ответа.
Процедура КомандаЗагрузитьОтветПоставщикуПродолжениеЗавершение(ДополнительныеПараметры) Экспорт
	
	Файл = ДополнительныеПараметры.Файл;
	
	Если Файл.КоличествоСтрок() > 0 Тогда
		
		// Механизм проверки корректности формата загружаемого файла.
		ПерваяСтрока = Файл.ПолучитьСтроку(1);
		Если Найти(ПерваяСтрока, "begin") > 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Обнаружена попытка загрузить файл ""Начислено сумм по жильцам"" вместо ""Ответ поставщику""!");
			Возврат;
		ИначеЕсли Найти(ПерваяСтрока, "Ответ поставщику") = 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Возможно загружаемый файл не соответствует формату.");
		КонецЕсли;
		
		Для НомерСтроки = 1 По Файл.КоличествоСтрок() Цикл
			
			ТекущаяСтрока = Файл.ПолучитьСтроку(НомерСтроки);
			
			// Считываем только Строки(2).
			Если Лев(ТекущаяСтрока, 1) <> "2" Тогда
				Продолжить;
			КонецЕсли;
			
			Массив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекущаяСтрока, "|", , Истина);
			
			ДобавитьСтрокуИзФайлаОтветПоставщику(Массив);
			
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьСоответствияВБазеФайлОтветПоставщику();

КонецПроцедуры // КомандаЗагрузитьОбъект.РеспубликаТатарстан_ОтветПоставщикуПродолжение()

&НаКлиенте
// Добавляет в таблицу выгрузки значения, полученные из строки файла.
//
// Параметры:
//  Массив - Массив - массив строк-значений, полученных при чтении форматной строки CSV-файла.
//
Процедура ДобавитьСтрокуИзФайлаОтветПоставщику(Массив)
	
	Если Массив.Количество() > 0 Тогда
		
		НоваяСтрока = Объект.РеспубликаТатарстан_ОтветПоставщику.Добавить();
		
		НоваяСтрока.ПСС                     = СокрЛП(Массив[1]);
		НоваяСтрока.ЛицевойСчетНаименование = СокрЛП(Массив[2]);
		НоваяСтрока.ДатаНачала              = СокрЛП(Массив[3]);
		НоваяСтрока.ДатаОкончания           = СокрЛП(Массив[4]);
		НоваяСтрока.Фамилия                 = СокрЛП(Массив[5]);
		НоваяСтрока.Имя                     = СокрЛП(Массив[6]);
		НоваяСтрока.Отчество                = СокрЛП(Массив[7]);
		НоваяСтрока.ДатаРождения            = СокрЛП(Массив[8]);
		НоваяСтрока.ГородРайон              = СокрЛП(Массив[9]);
		НоваяСтрока.СелоДеревня             = СокрЛП(Массив[10]);
		НоваяСтрока.Улица                   = СокрЛП(Массив[11]);
		НоваяСтрока.Дом                     = СокрЛП(Массив[12]);
		НоваяСтрока.Корпус                  = СокрЛП(Массив[13]);
		НоваяСтрока.Квартира                = СокрЛП(Массив[14]);
		НоваяСтрока.Комната                 = СокрЛП(Массив[15]);
		НоваяСтрока.КодОтвета               = СокрЛП(Массив[16]);
		НоваяСтрока.ТекстОтвета             = СокрЛП(Массив[17]);
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуИзФайлаОтветПоставщику()

&НаСервере
// Устанавливает соответствие лицевых счетов в ОСЗН лицевым счетам в базе и,
// для найденных соответствий, определяет количество проживающих. 
//
Процедура УстановитьСоответствияВБазеФайлОтветПоставщику()
	
	// Идентификацию ЛС проводим в соответствии с настройкой "Идентификация лицевого счета".
	Если Объект.ИдентификацияЛС = 0 Тогда
		РеквизитИдентификации = "Код";
	ИначеЕсли Объект.ИдентификацияЛС = 1 Тогда
		РеквизитИдентификации = "Наименование";
	Иначе
		РеквизитИдентификации = "Идентификатор";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаВыгрузки.НомерСтроки,
	|	ТаблицаВыгрузки.ПСС,
	|	ТаблицаВыгрузки.ЛицевойСчетНаименование,
	|	&ПрефиксЛС + ТаблицаВыгрузки.ЛицевойСчетНаименование КАК ЛицевойСчетРеквизитИдентификации,
	|	ТаблицаВыгрузки.ДатаНачала,
	|	ТаблицаВыгрузки.ДатаОкончания,
	|	ТаблицаВыгрузки.Фамилия,
	|	ТаблицаВыгрузки.Имя,
	|	ТаблицаВыгрузки.Отчество,
	|	ТаблицаВыгрузки.ДатаРождения,
	|	ТаблицаВыгрузки.ГородРайон,
	|	ТаблицаВыгрузки.СелоДеревня,
	|	ТаблицаВыгрузки.Улица,
	|	ТаблицаВыгрузки.Дом,
	|	ТаблицаВыгрузки.Корпус,
	|	ТаблицаВыгрузки.Квартира,
	|	ТаблицаВыгрузки.Комната,
	|	ТаблицаВыгрузки.КодОтвета,
	|	ТаблицаВыгрузки.ТекстОтвета
	|ПОМЕСТИТЬ втТаблицаВыгрузки
	|ИЗ
	|	&ТаблицаВыгрузки КАК ТаблицаВыгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет." + РеквизитИдентификации + " КАК ЛицевойСчетРеквизитИдентификации
	|ПОМЕСТИТЬ втЛицевыеСчета
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет." + РеквизитИдентификации + " В
	|				(ВЫБРАТЬ
	|					втТаблицаВыгрузки.ЛицевойСчетРеквизитИдентификации
	|				ИЗ
	|					втТаблицаВыгрузки КАК втТаблицаВыгрузки)) КАК КВП_ЛицевыеСчетаСрезПоследних
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаВыгрузки.НомерСтроки,
	|	ЕСТЬNULL(втЛицевыеСчета.ЛицевойСчет, ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)) КАК ЛицевойСчет,
	|	втТаблицаВыгрузки.ПСС,
	|	втТаблицаВыгрузки.ЛицевойСчетНаименование,
	|	втТаблицаВыгрузки.ДатаНачала,
	|	втТаблицаВыгрузки.ДатаОкончания,
	|	втТаблицаВыгрузки.Фамилия,
	|	втТаблицаВыгрузки.Имя,
	|	втТаблицаВыгрузки.Отчество,
	|	втТаблицаВыгрузки.ДатаРождения,
	|	втТаблицаВыгрузки.ГородРайон,
	|	втТаблицаВыгрузки.СелоДеревня,
	|	втТаблицаВыгрузки.Улица,
	|	втТаблицаВыгрузки.Дом,
	|	втТаблицаВыгрузки.Корпус,
	|	втТаблицаВыгрузки.Квартира,
	|	втТаблицаВыгрузки.Комната,
	|	втТаблицаВыгрузки.КодОтвета,
	|	втТаблицаВыгрузки.ТекстОтвета
	|ИЗ
	|	втТаблицаВыгрузки КАК втТаблицаВыгрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЛицевыеСчета КАК втЛицевыеСчета
	|		ПО втТаблицаВыгрузки.ЛицевойСчетРеквизитИдентификации = втЛицевыеСчета.ЛицевойСчетРеквизитИдентификации";
	
	Запрос.УстановитьПараметр("ПрефиксЛС",       ?(Объект.ИдентификацияЛС = 1, ПрефиксЛС, ""));
	Запрос.УстановитьПараметр("ТаблицаВыгрузки", Объект.РеспубликаТатарстан_ОтветПоставщику.Выгрузить());
	Запрос.УстановитьПараметр("ДатаКонца",       КонецМесяца(Объект.Период));
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Объект.РеспубликаТатарстан_ОтветПоставщику.Загрузить(Результат);
	
	// О не найденных соответствиях в базе выводим сообщения.
	Для Каждого Строка Из Объект.РеспубликаТатарстан_ОтветПоставщику Цикл
		Если Строка.ЛицевойСчет.Пустая() Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("В строке №" + Строка.НомерСтроки + " не найдено соответствие лицевому счету в базе!");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УстановитьСоответствияВБазеФайлОтветПоставщику()

#КонецОбласти

#Область ФайлВыгрузки

&НаКлиенте
// Обработчик события "НачалоВыбора" поля ввода "КаталогВыгрузки".
//
Процедура КаталогВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Заголовок                   = "Выбор каталога выгрузки";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("КаталогВыгрузкиНачалоВыбораЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
// Обработчик заверешния обработчика события "НачалоВыбора" поля ввода "КаталогВыгрузки".
Процедура КаталогВыгрузкиНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		Объект.ИмяКаталогаВыгрузки = ВыбранныеФайлы[0];
	КонецЕсли;
	
КонецПроцедуры // КаталогВыгрузкиНачалоВыбора()

&НаКлиенте
// Обработчик события "Открытие" поля ввода "КаталогВыгрузки".
//
Процедура КаталогВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КаталогВыгрузкиОткрытиеЗавершение", ЭтотОбъект);
	
	НачатьЗапускПриложения(ОписаниеОповещения, "explorer " + Объект.ИмяКаталогаВыгрузки);
	
КонецПроцедуры

&НаКлиенте
// Обработчик заверешения обработчика события "Открытие" поля ввода "КаталогВыгрузки".
Процедура КаталогВыгрузкиОткрытиеЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры // КаталогВыгрузкиОткрытие()

////////////////////////
// Команда "Выгрузить"

&НаКлиенте
// Обработчик команды "КомандаВыгрузить".
//
Процедура КомандаВыгрузить(Команда)
	
	ОчиститьСообщения();
	
	ПроверитьНастройки(Новый ОписаниеОповещения("КомандаВыгрузитьЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыгрузитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		
		Если Объект.РеспубликаТатарстан_ОтветПоставщику.Количество() = 0 Тогда
			
			Оповещение = Новый ОписаниеОповещения("КомандаВыгрузитьВопрос", ЭтотОбъект, );
			
			ТекстВопроса = "Файл ""Ответ поставщику"" (справочник ПСС) не был загружен." + Символы.ПС
						   + "В выгрузке будут отсутствовать записи о номерах присвоенных ПСС. Продолжить?";
			
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Отмена);
			
		Иначе
			КомандаВыгрузитьПродолжение()
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // КомандаВыгрузить()

&НаКлиенте
// Обработчик результата опроса команды "КомандаВыгрузить".
//
Процедура КомандаВыгрузитьВопрос(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		КомандаВыгрузитьПродолжение();
		
	КонецЕсли;
	
КонецПроцедуры // КомандаВыгрузитьВопрос()

&НаКлиенте
// Продолжение обработчика команды "КомандаВыгрузить".
//
Процедура КомандаВыгрузитьПродолжение()
	
	Если СформироватьФайлВыгрузкиНаСервере() Тогда
		
		Каталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Объект.ИмяКаталогаВыгрузки);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("КомандаВыгрузитьПродолжениеНачатьЗапись", ЭтотОбъект, Новый Структура("Каталог", Каталог));
		ИмяФайла            = Каталог + Объект.ИмяФайлаВыгрузки;
		ТипФайлаВыгрузки    = ?(Объект.КодировкаТекстовогоФайла, КодировкаТекста.ANSI, КодировкаТекста.OEM);
		
		ФайлВыгрузки.НачатьЗапись(ОписаниеОповещения, ИмяФайла, ТипФайлаВыгрузки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения продолжения обработчика команды "КомандаВыгрузить".
Процедура КомандаВыгрузитьПродолжениеНачатьЗапись(Результат, ДополнительныеПараметры) Экспорт
	
	Каталог = ДополнительныеПараметры.Каталог;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Записан файл выгрузки: " + Каталог + Объект.ИмяФайлаВыгрузки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаВыгрузитьПродолжениеЗавершение", ЭтотОбъект);
	
	НачатьЗапускПриложения(ОписаниеОповещения, Каталог + Объект.ИмяФайлаВыгрузки);
	
КонецПроцедуры // КомандаВыгрузитьПродолжение()

&НаКлиенте
// Обработчик завершения продолжения обработчика команды "КомандаВыгрузить".
Процедура КомандаВыгрузитьПродолжениеЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры // КомандаВыгрузитьПродолжение()

////////////////////////
// Формирование файла выгрузки

&НаКлиенте
// Проверяет заполнение необходимых для выгрузки реквизитов.
//
// Возвращаемое значение:
//  Булево - признак достаточного заполнения настроек для формирования файла выгрузки.
//
Процедура ПроверитьНастройки(Знач Оповещение)
	
	Если Объект.Период = '00010101' Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не указан период выгрузки.");
		ВыполнитьОбработкуОповещения(Оповещение, Ложь);
		Возврат;
	КонецЕсли;
	
	Если Объект.Организация.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбрана организация.");
		ВыполнитьОбработкуОповещения(Оповещение, Ложь);
		Возврат;
	КонецЕсли;
	
	Каталог = Новый Файл(Объект.ИмяКаталогаВыгрузки);
	
	Каталог.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ПроверитьНастройкиЗавершение", ЭтотОбъект, Новый Структура("Каталог, Оповещение", Каталог, Оповещение)));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНастройкиЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	Каталог = ДополнительныеПараметры.Каталог;
	Оповещение = ДополнительныеПараметры.Оповещение;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьНастройкиЗавершениеЗавершение", ЭтотОбъект,
												  Новый Структура("Оповещение", Оповещение));
	
	Если Существует Тогда
		Каталог.НачатьПроверкуЭтоКаталог(ОписаниеОповещения);
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран каталог файла выгрузки.");
		ВыполнитьОбработкуОповещения(Оповещение, Ложь);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНастройкиЗавершениеЗавершение(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Оповещение = ДополнительныеПараметры.Оповещение;
	
	Если Не ЭтоКаталог Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран каталог файла выгрузки.");
		ВыполнитьОбработкуОповещения(Оповещение, Ложь);
		Возврат;
	КонецЕсли;
	
	// Проверяем имя выгружаемого файла. В случае чего, заполняем его по умолчанию.
	Если Объект.ИмяФайлаВыгрузки = "" Тогда
		
		ИмяОрганизацииДляВывода = СтроковыеФункцииКлиентСервер.ЗаменитьОдниСимволыДругими(" """, Строка(Объект.Организация), "_");
		Объект.ИмяФайлаВыгрузки = ИмяОрганизацииДляВывода + Формат(Объект.Период, "ДФ=-MM-yyyy") + ".txt";
		
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение, Истина);
	
КонецПроцедуры

&НаСервере
// Процедура осуществляет сбор данных для выгрузки.
//
Функция СформироватьФайлВыгрузкиНаСервере()
	
	// Подготовка данных.
	ТаблицаСведенийОЛицевыхСчетах = ПолучитьТаблицуСведенийОЛицевыхСчетах();
	
	МассивЛицевыхСчетов = ТаблицаСведенийОЛицевыхСчетах.ВыгрузитьКолонку("ЛицевойСчет");
	КоличествоДомохозяйств = МассивЛицевыхСчетов.Количество();
	
	Если МассивЛицевыхСчетов.Количество() = 0 Тогда
		
		// Если начислений в текущем периоде не было.
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Нет данных для выгрузки!" + Символы.ПС + "Возможно, в указанном периоде не было начислений.");
		Возврат Ложь;
		
	КонецЕсли;
	
	// Заполняем таблицу с состояниями видов благоустройств в помещениях, в которых открыты лицевые счета.
	СведенияОБлагоустройствах = ПолучитьСведенияОБлагоустройствахЛицевыхСчетов(ТаблицаСведенийОЛицевыхСчетах);
	
	ТаблицаНачислений = ПолучитьТаблицуНачислений(МассивЛицевыхСчетов);
	
	ТаблицаПерерасчетов = ПолучитьТаблицуПерерасчетов(ТаблицаНачислений);
	
	СгруппироватьТаблицуНачислений(ТаблицаНачислений);
	
	// Формирование файла выгрузки.
	ФайлВыгрузки.Очистить();
	ФайлВыгрузки.УстановитьТипФайла(КодировкаТекста.OEM);
	
	// Строка 1.
	Строка_1 = СформироватьСтроку_1(КоличествоДомохозяйств);
	ФайлВыгрузки.ДобавитьСтроку(Строка_1);
	
	ОтборЛС        = Новый Структура("ЛицевойСчет");
	ОтборЛСиУслуга = Новый Структура("ЛицевойСчет, КодУслугиВОСЗН");
	
	Для Каждого Домохозяйство Из ТаблицаСведенийОЛицевыхСчетах Цикл
		
		ДомохозяйствоСтрокой = ?(Объект.ИдентификацияЛС = 0, Домохозяйство.Код, ?(Объект.ИдентификацияЛС = 1, ПодготовитьНомерЛСДляВывода(Домохозяйство.ЛицевойСчет), Домохозяйство.Идентификатор));
		
		// Строка 2.
		Строка2 = СформироватьСтроку_2(Домохозяйство, ДомохозяйствоСтрокой);
		
		ОтборЛС.ЛицевойСчет = Домохозяйство.ЛицевойСчет;
		
		// Поля 2.29 - 2.34 - благоустройства помещения
		Для Сч = 29 По 34 Цикл
			
			СтрокиБлагоустройств = СведенияОБлагоустройствах.НайтиСтроки(Новый Структура("ЛицевойСчет,Суффикс", Домохозяйство.ЛицевойСчет, Сч));
			
			Строка2 = Строка2 
					+ ?(СтрокиБлагоустройств.Количество() = 1, СтрокиБлагоустройств[0].ЗначениеБлагоустройства, "0") + ГР;
			
		КонецЦикла;
		
		// Поля 2.35 - 2.37
		Строка2 = Строка2 
				+ Строка(Объект.КодГазоснабжения) + ГР 
				+ Строка(Объект.КодВодоснабжения) + ГР 
				+ "0" + ГР;
		
		// Поля 2.38 - 2.42
		Услуги = ТаблицаНачислений.НайтиСтроки(ОтборЛС);
		
		Строка2 = Строка2 
				+ Формат(Услуги.Количество(), "ЧН=0") + ГР 
				+ "0" + ГР 
				+ Домохозяйство.ДолгОтсутствует + ГР
				+ Домохозяйство.ДваМесяцаБылиОплаты + ГР
				+ Домохозяйство.ЕстьСоглашение + ГР;
		
		ФайлВыгрузки.ДобавитьСтроку(Строка2);
		
		// Проверка вывода ПСС.
		Если ПустаяСтрока(Домохозяйство.ПСС) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Для домохозяйства " + ДомохозяйствоСтрокой + " (лицевой счет """ + Домохозяйство.ЛицевойСчет + """)" + " не определён ПСС!");
		КонецЕсли;
		
		ОтборЛСиУслуга.ЛицевойСчет = Домохозяйство.ЛицевойСчет;
		Для Каждого Услуга Из Услуги Цикл
			
			//Строка 4
			Строка4 = СформироватьСтроку_4(Услуга);
			
			ОтборЛСиУслуга.КодУслугиВОСЗН = Услуга.КодУслугиВОСЗН;
			Перерасчеты = ТаблицаПерерасчетов.НайтиСтроки(ОтборЛСиУслуга);
			
			// Поля 4.17 - 4.22
			Строка4 = Строка4 
					+ Формат(Перерасчеты.Количество(), "ЧН=0") + ГР 
					+ "0" + ГР 
					+ ГР
					+ Услуга.УслугаДействует + ГР
					+ ГР
					+ ГР;
			
			ФайлВыгрузки.ДобавитьСтроку(Строка4);
			
			// Проверка вывода кода единиц измерения. Коды услуг в ОСЗН не проверяем, т.к. берем начисления только по установленным соответствиям.
			Если Услуга.КодЕИ = "" Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Для домохозяйства " + ДомохозяйствоСтрокой + " (лицевой счет """ + Домохозяйство.ЛицевойСчет + """)" + " не определён код единицы измерения одной из услуг в базе, которая соответствует услуге в ОСЗН с кодом """ + Услуга.КодУслугиВОСЗН + """!");
			КонецЕсли;
			
			Для Каждого Перерасчет Из Перерасчеты Цикл
				
				// Строка 5
				Строка5 = СформироватьСтроку_5(Перерасчет);
				
				Строка5 = Строка5 
						+ Услуга.УслугаДействует + ГР;
				
				ФайлВыгрузки.ДобавитьСтроку(Строка5);
				
			КонецЦикла;
		
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // СформироватьФайлВыгрузкиНаСервере()

&НаСервере
// Получает таблицу сведений о лицевых счетах, по которым были начисления в текущем периоде.
//
Функция ПолучитьТаблицуСведенийОЛицевыхСчетах()
	
	// Подготавливаем список услуг, по которым будут искаться начисления в текущем периоде.
	ТаблицаВыбранныхУслуг = Объект.РеспубликаТатарстан_УслугиВБазе.Выгрузить(, "УслугаВБазе");
	ТаблицаВыбранныхУслуг.Свернуть("УслугаВБазе");
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	Запрос.УстановитьПараметр("ДатаНачала",  НачалоМесяца(Объект.Период));
	Запрос.УстановитьПараметр("ДатаКонца",   КонецМесяца(Объект.Период));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ТаблицаПСС",  Объект.РеспубликаТатарстан_ОтветПоставщику.Выгрузить(, "ЛицевойСчет, ПСС"));
	Запрос.УстановитьПараметр("Услуги",      ТаблицаВыбранныхУслуг);
	
	Если Не ГруппаЛицевыхСчетов.Пустая() Тогда
		Запрос.УстановитьПараметр("ГруппаЛицевыхСчетов", ГруппаЛицевыхСчетов);
		ОтборПоГруппеЛицевыхСчетов = "И ЛицевойСчет.Родитель В ИЕРАРХИИ (&ГруппаЛицевыхСчетов)";
	Иначе
		ОтборПоГруппеЛицевыхСчетов = "";
	КонецЕсли;
	
	НетАктуальнойУПЖКХ = Ложь;
	Структура = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(КонецМесяца(Объект.Период), Объект.Организация, НетАктуальнойУПЖКХ);
	Запрос.УстановитьПараметр("ДСО", ?(НетАктуальнойУПЖКХ, НачалоМесяца(Объект.Период), НачалоМесяца(Объект.Период) + 60 * 60 * 24 * Структура.ЧислоВнесенияПлатежа));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Услуги.УслугаВБазе
	|ПОМЕСТИТЬ втУслуги
	|ИЗ
	|	&Услуги КАК Услуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет
	|ПОМЕСТИТЬ втНачисленыеЛС
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНачала,
	|			&ДатаКонца,
	|			Месяц,
	|			Организация = &Организация
	|				И ЛицевойСчет ССЫЛКА Справочник.КВП_ЛицевыеСчета " + ОтборПоГруппеЛицевыхСчетов + "
	|				И Услуга В
	|					(ВЫБРАТЬ
	|						втУслуги.УслугаВБазе
	|					ИЗ
	|						втУслуги КАК втУслуги)
	|				И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|				И РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ))) КАК УПЖКХ_НачисленияОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПСС.ЛицевойСчет,
	|	ТаблицаПСС.ПСС
	|ПОМЕСТИТЬ втТаблицаПСС
	|ИЗ
	|	&ТаблицаПСС КАК ТаблицаПСС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Код КАК Код,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Идентификатор КАК Идентификатор,
	|	ЕСТЬNULL(втТаблицаПСС.ПСС, """") КАК ПСС,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Код КАК Квартира,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.КоличествоКомнат КАК КоличествоКомнат,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект КАК Помещение
	|ПОМЕСТИТЬ втЛицевыеСчета
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втНачисленыеЛС.ЛицевойСчет
	|				ИЗ
	|					втНачисленыеЛС КАК втНачисленыеЛС)) КАК КВП_ЛицевыеСчетаСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаПСС КАК втТаблицаПСС
	|		ПО КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет = втТаблицаПСС.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет,
	|	втЛицевыеСчета.Код,
	|	втЛицевыеСчета.Идентификатор,
	|	втЛицевыеСчета.ПСС,
	|	втЛицевыеСчета.Квартира,
	|	втЛицевыеСчета.КоличествоКомнат,
	|	втЛицевыеСчета.Помещение,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец
	|ПОМЕСТИТЬ втОтветственныеЛица
	|ИЗ
	|	втЛицевыеСчета КАК втЛицевыеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(
	|				&ДатаКонца,
	|				ЛицевойСчет В
	|						(ВЫБРАТЬ
	|							втЛицевыеСчета.ЛицевойСчет
	|						ИЗ
	|							втЛицевыеСчета КАК втЛицевыеСчета)
	|					И ОтветственныйВладелец ССЫЛКА Справочник.УПЖКХ_Жильцы) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
	|		ПО втЛицевыеСчета.ЛицевойСчет = УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет
	|ГДЕ
	|	НЕ УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втОтветственныеЛица.ЛицевойСчет,
	|	втОтветственныеЛица.Код,
	|	втОтветственныеЛица.Идентификатор,
	|	втОтветственныеЛица.ПСС,
	|	ФИОФизическихЛицСрезПоследних.Фамилия КАК Фамилия,
	|	ФИОФизическихЛицСрезПоследних.Имя КАК Имя,
	|	ФИОФизическихЛицСрезПоследних.Отчество КАК Отчество,
	|	втОтветственныеЛица.Помещение,
	|	втОтветственныеЛица.Квартира,
	|	втОтветственныеЛица.КоличествоКомнат
	|ПОМЕСТИТЬ втЛСФИО
	|ИЗ
	|	втОтветственныеЛица КАК втОтветственныеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ДатаКонца, ) КАК ФИОФизическихЛицСрезПоследних
	|		ПО втОтветственныеЛица.ОтветственныйВладелец.ФизЛицо = ФИОФизическихЛицСрезПоследних.ФизическоеЛицо";
	Запрос.Выполнить();
	
	ЗапросПоЗданиям = Новый Запрос;
	ЗапросПоЗданиям.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросПоЗданиям.Текст = 
	"ВЫБРАТЬ
	|	втЛСФИО.Помещение.Владелец КАК Объект
	|ИЗ
	|	втЛСФИО КАК втЛСФИО
	|
	|СГРУППИРОВАТЬ ПО
	|	втЛСФИО.Помещение.Владелец";
	
	МассивОбъектов = ЗапросПоЗданиям.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	втЛСФИО.ЛицевойСчет,
	|	втЛСФИО.Код,
	|	втЛСФИО.Идентификатор,
	|	втЛСФИО.ПСС,
	|	втЛСФИО.Фамилия,
	|	втЛСФИО.Имя,
	|	втЛСФИО.Отчество,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втКонтактнаяИнформация.Район, """") = """"
	|			ТОГДА ЕСТЬNULL(втКонтактнаяИнформация.Город, """")
	|		ИНАЧЕ втКонтактнаяИнформация.Район
	|	КОНЕЦ КАК Район,
	|	ЕСТЬNULL(втКонтактнаяИнформация.НаселенныйПункт, """") КАК НаселенныйПункт,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Улица, """") КАК Улица,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Дом, """") КАК Дом,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Корпус, """") КАК Корпус,
	|	втЛСФИО.Квартира,
	|	втЛСФИО.Помещение,
	|	втЛСФИО.КоличествоКомнат
	|ПОМЕСТИТЬ втПомещения
	|ИЗ
	|	втЛСФИО КАК втЛСФИО
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК втКонтактнаяИнформация
	|		ПО втЛСФИО.Помещение.Владелец = втКонтактнаяИнформация.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель, 0) = 0
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель, 0) = 0
	|						ТОГДА КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель / КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДоляЛС,
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет
	|ПОМЕСТИТЬ втДоли
	|ИЗ
	|	РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втПомещения.ЛицевойСчет
	|				ИЗ
	|					втПомещения КАК втПомещения)) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втПомещения.ЛицевойСчет,
	|	втПомещения.Код,
	|	втПомещения.Идентификатор,
	|	втПомещения.ПСС,
	|	втПомещения.Помещение,
	|	втПомещения.Фамилия,
	|	втПомещения.Имя,
	|	втПомещения.Отчество,
	|	втПомещения.Район,
	|	втПомещения.НаселенныйПункт,
	|	втПомещения.Улица,
	|	втПомещения.Дом,
	|	втПомещения.Корпус,
	|	втПомещения.Квартира,
	|	втПомещения.КоличествоКомнат,
	|	ЕСТЬNULL(втДоли.ДоляЛС, 0) * ЕСТЬNULL(КВП_ПлощадьПомещенияСрезПоследних.Площадь, 0) КАК ОбщаяПлощадь
	|ПОМЕСТИТЬ втПлощадь
	|ИЗ
	|	втПомещения КАК втПомещения
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДоли КАК втДоли
	|		ПО втПомещения.ЛицевойСчет = втДоли.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|				&ДатаКонца,
	|				Объект В
	|						(ВЫБРАТЬ
	|							втПомещения.Помещение
	|						ИЗ
	|							втПомещения КАК втПомещения)
	|					И ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)) КАК КВП_ПлощадьПомещенияСрезПоследних
	|		ПО втПомещения.Помещение = КВП_ПлощадьПомещенияСрезПоследних.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец) КАК КоличествоЗаргистрированных
	|ПОМЕСТИТЬ втЗарегистрированоРС
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втПлощадь.ЛицевойСчет
	|				ИЗ
	|					втПлощадь КАК втПлощадь)) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.ЛицевойСчет,
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втУчетКоличестваЖильцов
	|ИЗ
	|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втПлощадь.ЛицевойСчет
	|				ИЗ
	|					втПлощадь КАК втПлощадь)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втПлощадь.ЛицевойСчет,
	|	втПлощадь.Код,
	|	втПлощадь.Идентификатор,
	|	втПлощадь.ПСС,
	|	втПлощадь.Помещение,
	|	втПлощадь.Фамилия,
	|	втПлощадь.Имя,
	|	втПлощадь.Отчество,
	|	втПлощадь.Район,
	|	втПлощадь.НаселенныйПункт,
	|	втПлощадь.Улица,
	|	втПлощадь.Дом,
	|	втПлощадь.Квартира,
	|	втПлощадь.Корпус,
	|	втПлощадь.КоличествоКомнат,
	|	ВЫБОР
	|		КОГДА Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами
	|			ТОГДА ЕСТЬNULL(втУчетКоличестваЖильцов.КоличествоЗарегистрированных, 0)
	|		ИНАЧЕ ЕСТЬNULL(втЗарегистрированоРС.КоличествоЗаргистрированных, 0)
	|	КОНЕЦ КАК КоличествоЗарегистрированных,
	|	втПлощадь.ОбщаяПлощадь
	|ПОМЕСТИТЬ втКоличествоЗаргистрированных
	|ИЗ
	|	Константы КАК Константы,
	|	втПлощадь КАК втПлощадь
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЗарегистрированоРС КАК втЗарегистрированоРС
	|		ПО втПлощадь.ЛицевойСчет = втЗарегистрированоРС.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУчетКоличестваЖильцов КАК втУчетКоличестваЖильцов
	|		ПО втПлощадь.ЛицевойСчет = втУчетКоличестваЖильцов.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.ЛицевойСчет,
	|	МИНИМУМ(УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.Комната.Код) КАК НомерКомнаты,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.Комната) КАК КоличествоПривязанныхКомнат
	|ПОМЕСТИТЬ втПривязанныеКомнаты
	|ИЗ
	|	РегистрСведений.УПЖКХ_ПривязанныеКЛицевомуСчетуКомнаты.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втКоличествоЗаргистрированных.ЛицевойСчет
	|				ИЗ
	|					втКоличествоЗаргистрированных КАК втКоличествоЗаргистрированных)) КАК УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних
	|ГДЕ
	|	УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.Привязка
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Помещения.Родитель КАК Помещение,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_Помещения.Ссылка) КАК КоличествоДочернихКомнат
	|ПОМЕСТИТЬ втДочерниеКомнаты
	|ИЗ
	|	Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
	|ГДЕ
	|	УПЖКХ_Помещения.Родитель В
	|			(ВЫБРАТЬ
	|				втКоличествоЗаргистрированных.Помещение
	|			ИЗ
	|				втКоличествоЗаргистрированных КАК втКоличествоЗаргистрированных)
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_Помещения.Родитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	""1"" КАК ДваМесяцаБылиОплаты
	|ПОМЕСТИТЬ втДваМесяцаБылиОплаты
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			ДОБАВИТЬКДАТЕ(&ДатаНачала, МЕСЯЦ, -2),
	|			&ДСО,
	|			Период,
	|			ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втЛицевыеСчета.ЛицевойСчет
	|					ИЗ
	|						втЛицевыеСчета КАК втЛицевыеСчета)
	|				И Услуга В
	|					(ВЫБРАТЬ
	|						втУслуги.УслугаВБазе
	|					ИЗ
	|						втУслуги КАК втУслуги)
	|				И ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))) КАК УПЖКХ_НачисленияОбороты
	|ГДЕ
	|	УПЖКХ_НачисленияОбороты.МесяцНачисления МЕЖДУ ДОБАВИТЬКДАТЕ(&ДатаНачала, МЕСЯЦ, -2) И &ДатаНачала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ГрафикиПлатежейПоЛС.ЛицевойСчет,
	|	""1"" КАК ЕстьСоглашение
	|ПОМЕСТИТЬ втНаличиеСоглашения
	|ИЗ
	|	РегистрСведений.КВП_ГрафикиПлатежейПоЛС КАК КВП_ГрафикиПлатежейПоЛС
	|ГДЕ
	|	КВП_ГрафикиПлатежейПоЛС.ЛицевойСчет В
	|			(ВЫБРАТЬ
	|				втЛицевыеСчета.ЛицевойСчет
	|			ИЗ
	|				втЛицевыеСчета КАК втЛицевыеСчета)
	|	И КВП_ГрафикиПлатежейПоЛС.ДатаПлатежа МЕЖДУ &ДатаНачала И &ДатаКонца
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет
	|ПОМЕСТИТЬ втДанныеОДолге
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&ДатаНачала,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|				втЛицевыеСчета.ЛицевойСчет
	|			ИЗ
	|				втЛицевыеСчета КАК втЛицевыеСчета)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|ГДЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втКоличествоЗаргистрированных.ЛицевойСчет КАК ЛицевойСчет,
	|	втКоличествоЗаргистрированных.Помещение,
	|	втКоличествоЗаргистрированных.Код,
	|	втКоличествоЗаргистрированных.Идентификатор,
	|	втКоличествоЗаргистрированных.ПСС КАК ПСС,
	|	втКоличествоЗаргистрированных.Фамилия,
	|	втКоличествоЗаргистрированных.Имя,
	|	втКоличествоЗаргистрированных.Отчество,
	|	втКоличествоЗаргистрированных.Район,
	|	втКоличествоЗаргистрированных.НаселенныйПункт,
	|	втКоличествоЗаргистрированных.Улица,
	|	втКоличествоЗаргистрированных.Дом,
	|	втКоличествоЗаргистрированных.Квартира,
	|	втКоличествоЗаргистрированных.Корпус,
	|	втКоличествоЗаргистрированных.Помещение.Суффикс КАК Суффикс,
	|	втКоличествоЗаргистрированных.КоличествоЗарегистрированных,
	|	втКоличествоЗаргистрированных.ОбщаяПлощадь,
	|	ЕСТЬNULL(втПривязанныеКомнаты.КоличествоПривязанныхКомнат, ЕСТЬNULL(втДочерниеКомнаты.КоличествоДочернихКомнат, втКоличествоЗаргистрированных.КоличествоКомнат)) КАК КоличествоКомнат,
	|	ЕСТЬNULL(втПривязанныеКомнаты.НомерКомнаты, 0) КАК НомерКомнаты,
	|	ЕСТЬNULL(втДваМесяцаБылиОплаты.ДваМесяцаБылиОплаты, ""0"") КАК ДваМесяцаБылиОплаты,
	|	ЕСТЬNULL(втНаличиеСоглашения.ЕстьСоглашение, ""0"") КАК ЕстьСоглашение,
	|	ВЫБОР
	|		КОГДА втДанныеОДолге.ЛицевойСчет ЕСТЬ NULL
	|			ТОГДА ""0""
	|		ИНАЧЕ ""1""
	|	КОНЕЦ КАК ДолгОтсутствует
	|ИЗ
	|	втКоличествоЗаргистрированных КАК втКоличествоЗаргистрированных
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПривязанныеКомнаты КАК втПривязанныеКомнаты
	|		ПО втКоличествоЗаргистрированных.ЛицевойСчет = втПривязанныеКомнаты.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДочерниеКомнаты КАК втДочерниеКомнаты
	|		ПО втКоличествоЗаргистрированных.Помещение = втДочерниеКомнаты.Помещение
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДваМесяцаБылиОплаты КАК втДваМесяцаБылиОплаты
	|		ПО втКоличествоЗаргистрированных.ЛицевойСчет = втДваМесяцаБылиОплаты.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНаличиеСоглашения КАК втНаличиеСоглашения
	|		ПО втКоличествоЗаргистрированных.ЛицевойСчет = втНаличиеСоглашения.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеОДолге КАК втДанныеОДолге
	|		ПО втКоличествоЗаргистрированных.ЛицевойСчет = втДанныеОДолге.ЛицевойСчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПСС УБЫВ,
	|	ЛицевойСчет";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции // ПолучитьТаблицуСведенийОЛицевыхСчетах()

&НаСервере
// Формирует таблицу со сведениями о благоустройствах лицевых счетов.
//
Функция ПолучитьСведенияОБлагоустройствахЛицевыхСчетов(ТаблицаЛС)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТаблицаЛС",                       ТаблицаЛС);
	Запрос.УстановитьПараметр("СоответствиеВидовБлагоустройств", Объект.РеспубликаТатарстан_СоответствиеВидовБлагоустройствПомещений.Выгрузить());
	
	МассивИстин = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Истина,ИСТИНА,Присутствует,ДА,Да,да,ЕСТЬ,Есть,есть");
	Запрос.УстановитьПараметр("МассивИстин", МассивИстин);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЛС.ЛицевойСчет,
	|	ТаблицаЛС.Помещение
	|ПОМЕСТИТЬ втЛицевыеСчета
	|ИЗ
	|	&ТаблицаЛС КАК ТаблицаЛС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствиеВидовБлагоустройств.Суффикс,
	|	СоответствиеВидовБлагоустройств.ВидБлагоустройстваВБазе
	|ПОМЕСТИТЬ втВидовБлагоустройств
	|ИЗ
	|	&СоответствиеВидовБлагоустройств КАК СоответствиеВидовБлагоустройств
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_БлагоустройствоОбъектов.Объект,
	|	КВП_БлагоустройствоОбъектов.ВидБлагоустройства,
	|	КВП_БлагоустройствоОбъектов.Значение
	|ПОМЕСТИТЬ втБлагоустройствоПомещений
	|ИЗ
	|	РегистрСведений.КВП_БлагоустройствоОбъектов КАК КВП_БлагоустройствоОбъектов
	|ГДЕ
	|	КВП_БлагоустройствоОбъектов.Объект В
	|			(ВЫБРАТЬ
	|				втЛицевыеСчета.Помещение
	|			ИЗ
	|				втЛицевыеСчета КАК втЛицевыеСчета)
	|	И КВП_БлагоустройствоОбъектов.ВидБлагоустройства В
	|			(ВЫБРАТЬ
	|				втВидовБлагоустройств.ВидБлагоустройстваВБазе
	|			ИЗ
	|				втВидовБлагоустройств КАК втВидовБлагоустройств)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛицевыеСчета.ЛицевойСчет,
	|	втЛицевыеСчета.Помещение,
	|	втВидовБлагоустройств.Суффикс,
	|	втВидовБлагоустройств.ВидБлагоустройстваВБазе
	|ПОМЕСТИТЬ втБлагоустройстваЛС
	|ИЗ
	|	втЛицевыеСчета КАК втЛицевыеСчета,
	|	втВидовБлагоустройств КАК втВидовБлагоустройств
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втБлагоустройстваЛС.ЛицевойСчет,
	|	втБлагоустройстваЛС.Суффикс,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(втБлагоустройстваЛС.ВидБлагоустройстваВБазе) = ТИП(СТРОКА)
	|			ТОГДА втБлагоустройстваЛС.ВидБлагоустройстваВБазе
	|		ИНАЧЕ ВЫБОР
	|				КОГДА втБлагоустройстваЛС.Суффикс = 29
	|					ТОГДА ВЫБОР
	|							КОГДА ЕСТЬNULL(втБлагоустройствоПомещений.Значение, """") В (&МассивИстин, ИСТИНА)
	|								ТОГДА ""1""
	|							ИНАЧЕ ""0""
	|						КОНЕЦ
	|				КОГДА втБлагоустройстваЛС.Суффикс = 30
	|					ТОГДА ВЫБОР
	|							КОГДА ЕСТЬNULL(втБлагоустройствоПомещений.Значение, """") В (&МассивИстин, ИСТИНА, ""Газовая"", ""Газовое"", ЗНАЧЕНИЕ(Перечисление.КВП_Плита.Газовая), ""Электрическая"", ""Электро"", ЗНАЧЕНИЕ(Перечисление.КВП_Плита.Электрическая))
	|								ТОГДА ""1""
	|							ИНАЧЕ ""0""
	|						КОНЕЦ
	|				КОГДА втБлагоустройстваЛС.Суффикс = 31
	|					ТОГДА ВЫБОР
	|							КОГДА ЕСТЬNULL(втБлагоустройствоПомещений.Значение, """") В (&МассивИстин, ИСТИНА, ""Газовая"", ""Газовое"", ЗНАЧЕНИЕ(Перечисление.КВП_Плита.Газовая))
	|								ТОГДА ""1""
	|							ИНАЧЕ ""0""
	|						КОНЕЦ
	|				КОГДА втБлагоустройстваЛС.Суффикс = 32
	|					ТОГДА ВЫБОР
	|							КОГДА ЕСТЬNULL(втБлагоустройствоПомещений.Значение, """") В (&МассивИстин, ИСТИНА)
	|								ТОГДА ""1""
	|							ИНАЧЕ ""0""
	|						КОНЕЦ
	|				КОГДА втБлагоустройстваЛС.Суффикс = 33
	|					ТОГДА ВЫБОР
	|							КОГДА ЕСТЬNULL(втБлагоустройствоПомещений.Значение, """") В (&МассивИстин, ИСТИНА)
	|								ТОГДА ""1""
	|							ИНАЧЕ ""0""
	|						КОНЕЦ
	|				КОГДА втБлагоустройстваЛС.Суффикс = 34
	|					ТОГДА ВЫБОР
	|							КОГДА ЕСТЬNULL(втБлагоустройствоПомещений.Значение, """") В (&МассивИстин, ИСТИНА)
	|								ТОГДА ""1""
	|							ИНАЧЕ ""0""
	|						КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК ЗначениеБлагоустройства
	|ИЗ
	|	втБлагоустройстваЛС КАК втБлагоустройстваЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ втБлагоустройствоПомещений КАК втБлагоустройствоПомещений
	|		ПО втБлагоустройстваЛС.Помещение = втБлагоустройствоПомещений.Объект
	|			И втБлагоустройстваЛС.ВидБлагоустройстваВБазе = втБлагоустройствоПомещений.ВидБлагоустройства";
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции // ПолучитьСведенияОБлагоустройствахЛицевыхСчетов()

&НаСервере
// Получает таблицу сведений о лицевых счетах, по которым были начисления в текущем периоде.
//
Функция ПолучитьТаблицуНачислений(МассивЛицевыхСчетов)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаНачала",          НачалоМесяца(Объект.Период));
	Запрос.УстановитьПараметр("ДатаКонца",           КонецМесяца(Объект.Период));
	Запрос.УстановитьПараметр("Организация",         Объект.Организация);
	Запрос.УстановитьПараметр("МассивЛицевыхСчетов", МассивЛицевыхСчетов);
	Запрос.УстановитьПараметр("ТаблицаУслуг",        Объект.РеспубликаТатарстан_УслугиВБазе.Выгрузить(, "КодУслугиВОСЗН, УслугаВБазе"));
	Запрос.УстановитьПараметр("ТаблицаКЕИ",          Объект.РеспубликаТатарстан_ТаблицаСоответствияКодовЕИ.Выгрузить(, "Код, ЕдиницаИзмеренияВБазе"));
	
	// Если в таблице соответствия КЕИ нет кубометра для нужд ГВС, то таблицу "Услуги ГВС и нужд ГВС" не учитываем.
	МассивСтрокКодГВС = Объект.РеспубликаТатарстан_ТаблицаСоответствияКодовЕИ.НайтиСтроки(Новый Структура("Код", "8"));
	
	Если МассивСтрокКодГВС.Количество() = 1 И Не МассивСтрокКодГВС[0].ЕдиницаИзмеренияВБазе.Пустая() Тогда
		
		Запрос.УстановитьПараметр("КубометрГВС",     Объект.РеспубликаТатарстан_КубометрГВС.Выгрузить());
		
	Иначе
		
		КубометрГВС = Новый ТаблицаЗначений;
		КубометрГВС.Колонки.Добавить("Услуга", Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
		
		Запрос.УстановитьПараметр("КубометрГВС",     КубометрГВС);
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаУслуг.КодУслугиВОСЗН,
	|	ТаблицаУслуг.УслугаВБазе
	|ПОМЕСТИТЬ втТаблицаУслуг
	|ИЗ
	|	&ТаблицаУслуг КАК ТаблицаУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКЕИ.Код КАК КодЕИ,
	|	ТаблицаКЕИ.ЕдиницаИзмеренияВБазе КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ втТаблицаКЕИ
	|ИЗ
	|	&ТаблицаКЕИ КАК ТаблицаКЕИ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КубометрГВС.Услуга
	|ПОМЕСТИТЬ втКубометрГВС
	|ИЗ
	|	&КубометрГВС КАК КубометрГВС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаУслуг.УслугаВБазе,
	|	втТаблицаУслуг.КодУслугиВОСЗН,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втТаблицаКЕИ.КодЕИ = ""8""
	|				ТОГДА ""1""
	|			ИНАЧЕ ЕСТЬNULL(втТаблицаКЕИ.КодЕИ, """")
	|		КОНЕЦ) КАК КодЕИ
	|ПОМЕСТИТЬ втУслугиСКодамиБезГВС
	|ИЗ
	|	втТаблицаУслуг КАК втТаблицаУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаКЕИ КАК втТаблицаКЕИ
	|		ПО втТаблицаУслуг.УслугаВБазе.ВидУслуги.ЕдиницаИзмерения = втТаблицаКЕИ.ЕдиницаИзмерения
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаУслуг.УслугаВБазе,
	|	втТаблицаУслуг.КодУслугиВОСЗН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втУслугиСКодамиБезГВС.УслугаВБазе,
	|	втУслугиСКодамиБезГВС.КодУслугиВОСЗН,
	|	втУслугиСКодамиБезГВС.КодЕИ
	|ПОМЕСТИТЬ втТаблицаНастроек
	|ИЗ
	|	втУслугиСКодамиБезГВС КАК втУслугиСКодамиБезГВС
	|ГДЕ
	|	НЕ втУслугиСКодамиБезГВС.УслугаВБазе В
	|				(ВЫБРАТЬ
	|					втКубометрГВС.Услуга
	|				ИЗ
	|					втКубометрГВС КАК втКубометрГВС)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втУслугиСКодамиБезГВС.УслугаВБазе,
	|	втУслугиСКодамиБезГВС.КодУслугиВОСЗН,
	|	""8""
	|ИЗ
	|	втУслугиСКодамиБезГВС КАК втУслугиСКодамиБезГВС
	|ГДЕ
	|	втУслугиСКодамиБезГВС.УслугаВБазе В
	|			(ВЫБРАТЬ
	|				втКубометрГВС.Услуга
	|			ИЗ
	|				втКубометрГВС КАК втКубометрГВС)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	МАКСИМУМ(УПЖКХ_НачисленияОбороты.Тариф) КАК Тариф,
	|	СУММА(УПЖКХ_НачисленияОбороты.Количество) КАК Количество,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Начислено,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Перерасчет,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|				ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Оплачено
	|ПОМЕСТИТЬ втНачисления
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНачала,
	|			&ДатаКонца,
	|			Месяц,
	|			Организация = &Организация
	|				И ЛицевойСчет В (&МассивЛицевыхСчетов)
	|				И Услуга В
	|					(ВЫБРАТЬ
	|						втТаблицаУслуг.УслугаВБазе
	|					ИЗ
	|						втТаблицаУслуг КАК втТаблицаУслуг)
	|				И РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ))) КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект КАК ЛицевойСчет,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги КАК Услуга,
	|	МАКСИМУМ(1) КАК НаличиеСчетчика
	|ПОМЕСТИТЬ втЗакрепленныеСчетчики
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&ДатаКонца,
	|			(Объект, Счетчик.ВидУслуги) В
	|				(ВЫБРАТЬ
	|					втНачисления.ЛицевойСчет,
	|					втНачисления.Услуга
	|				ИЗ
	|					втНачисления КАК втНачисления)
	|				И ДатаИзменения <= &ДатаКонца) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачисления.ЛицевойСчет КАК ЛицевойСчет,
	|	втНачисления.Услуга КАК Услуга,
	|	втНачисления.Тариф КАК Тариф,
	|	втНачисления.Количество КАК Количество,
	|	ЕСТЬNULL(втЗакрепленныеСчетчики.НаличиеСчетчика, 0) КАК НаличиеСчетчика,
	|	втНачисления.Начислено,
	|	втНачисления.Перерасчет,
	|	втНачисления.Оплачено
	|ПОМЕСТИТЬ втНачисленияСчетчики
	|ИЗ
	|	втНачисления КАК втНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЗакрепленныеСчетчики КАК втЗакрепленныеСчетчики
	|		ПО втНачисления.ЛицевойСчет = втЗакрепленныеСчетчики.ЛицевойСчет
	|			И втНачисления.Услуга = втЗакрепленныеСчетчики.Услуга
	|ГДЕ
	|	втНачисления.Начислено >= 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НазначенныеНачисленияСрезПоследних.Объект КАК ЛицевойСчет,
	|	КВП_НазначенныеНачисленияСрезПоследних.Услуга,
	|	ВЫБОР
	|		КОГДА КВП_НазначенныеНачисленияСрезПоследних.Действует
	|			ТОГДА ""1""
	|		ИНАЧЕ ""0""
	|	КОНЕЦ КАК УслугаДействует
	|ПОМЕСТИТЬ втДействиеУслуг
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления.СрезПоследних(
	|			&ДатаКонца,
	|			(Объект, Услуга) В
	|					(ВЫБРАТЬ
	|						втНачисления.ЛицевойСчет,
	|						втНачисления.Услуга
	|					ИЗ
	|						втНачисления КАК втНачисления)
	|				И ДатаИзменения <= &ДатаКонца) КАК КВП_НазначенныеНачисленияСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	""1"" КАК БылиОплатыЗаПоследнийМесяц
	|ПОМЕСТИТЬ втНаличиеОплатПоУлуге
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			ДОБАВИТЬКДАТЕ(&ДатаНачала, МЕСЯЦ, -1),
	|			&ДатаКонца,
	|			Период,
	|			(ЛицевойСчет, Услуга) В
	|					(ВЫБРАТЬ
	|						втНачисления.ЛицевойСчет,
	|						втНачисления.Услуга
	|					ИЗ
	|						втНачисления КАК втНачисления)
	|				И ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))) КАК УПЖКХ_НачисленияОбороты
	|ГДЕ
	|	УПЖКХ_НачисленияОбороты.МесяцНачисления МЕЖДУ ДОБАВИТЬКДАТЕ(&ДатаНачала, МЕСЯЦ, -1) И &ДатаНачала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ГрафикиПлатежейПоЛС.ЛицевойСчет,
	|	""1"" КАК ЕстьСоглашение
	|ПОМЕСТИТЬ втНаличиеСоглашения
	|ИЗ
	|	РегистрСведений.КВП_ГрафикиПлатежейПоЛС КАК КВП_ГрафикиПлатежейПоЛС
	|ГДЕ
	|	КВП_ГрафикиПлатежейПоЛС.ЛицевойСчет В
	|			(ВЫБРАТЬ
	|				втНачисления.ЛицевойСчет
	|			ИЗ
	|				втНачисления КАК втНачисления)
	|	И КВП_ГрафикиПлатежейПоЛС.ДатаПлатежа МЕЖДУ &ДатаНачала И &ДатаКонца
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачисленияСчетчики.ЛицевойСчет,
	|	втНачисленияСчетчики.Услуга,
	|	ЕСТЬNULL(втТаблицаНастроек.КодУслугиВОСЗН, """") КАК КодУслугиВОСЗН,
	|	втНачисленияСчетчики.Тариф КАК Тариф,
	|	ЕСТЬNULL(втТаблицаНастроек.КодЕИ, """") КАК КодЕИ,
	|	втНачисленияСчетчики.Количество КАК Количество,
	|	втНачисленияСчетчики.НаличиеСчетчика КАК НаличиеСчетчика,
	|	втНачисленияСчетчики.Начислено КАК Начислено,
	|	втНачисленияСчетчики.Перерасчет КАК Перерасчет,
	|	втНачисленияСчетчики.Оплачено КАК Оплачено,
	|	ЕСТЬNULL(втДействиеУслуг.УслугаДействует, ""0"") КАК УслугаДействует,
	|	ЕСТЬNULL(втНаличиеОплатПоУлуге.БылиОплатыЗаПоследнийМесяц, ""0"") КАК БылиОплатыЗаПоследнийМесяц,
	|	ЕСТЬNULL(втНаличиеСоглашения.ЕстьСоглашение, ""0"") КАК ЕстьСоглашение
	|ИЗ
	|	втНачисленияСчетчики КАК втНачисленияСчетчики
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаНастроек КАК втТаблицаНастроек
	|		ПО втНачисленияСчетчики.Услуга = втТаблицаНастроек.УслугаВБазе
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДействиеУслуг КАК втДействиеУслуг
	|		ПО втНачисленияСчетчики.ЛицевойСчет = втДействиеУслуг.ЛицевойСчет
	|			И втНачисленияСчетчики.Услуга = втДействиеУслуг.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНаличиеОплатПоУлуге КАК втНаличиеОплатПоУлуге
	|		ПО втНачисленияСчетчики.ЛицевойСчет = втНаличиеОплатПоУлуге.ЛицевойСчет
	|			И втНачисленияСчетчики.Услуга = втНаличиеОплатПоУлуге.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНаличиеСоглашения КАК втНаличиеСоглашения
	|		ПО втНачисленияСчетчики.ЛицевойСчет = втНаличиеСоглашения.ЛицевойСчет";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции // ПолучитьТаблицуНачислений()

&НаСервере
// Получает таблицу сведений о лицевых счетах, по которым были начисления в текущем периоде.
//
Функция ПолучитьТаблицуПерерасчетов(ТаблицаНачислений)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаНачала",        НачалоМесяца(Объект.Период));
	Запрос.УстановитьПараметр("ДатаКонца",         КонецМесяца(Объект.Период));
	Запрос.УстановитьПараметр("Организация",       Объект.Организация);
	Запрос.УстановитьПараметр("ТаблицаНачислений", ТаблицаНачислений);
	Запрос.УстановитьПараметр("ТаблицаУслуг",      Объект.РеспубликаТатарстан_УслугиВБазе.Выгрузить(, "КодУслугиВОСЗН, УслугаВБазе"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаУслуг.КодУслугиВОСЗН,
	|	ТаблицаУслуг.УслугаВБазе
	|ПОМЕСТИТЬ втТаблицаУслуг
	|ИЗ
	|	&ТаблицаУслуг КАК ТаблицаУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНачислений.ЛицевойСчет,
	|	ТаблицаНачислений.Услуга,
	|	ТаблицаНачислений.Тариф,
	|	ТаблицаНачислений.КодЕИ,
	|	ТаблицаНачислений.НаличиеСчетчика
	|ПОМЕСТИТЬ втТаблицаНачислений
	|ИЗ
	|	&ТаблицаНачислений КАК ТаблицаНачислений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.МесяцНачисления,
	|	УПЖКХ_НачисленияОбороты.Тариф,
	|	УПЖКХ_НачисленияОбороты.Количество,
	|	УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот КАК Перерасчет
	|ПОМЕСТИТЬ втПерерасчеты
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНачала,
	|			&ДатаКонца,
	|			Месяц,
	|			Организация = &Организация
	|				И (ЛицевойСчет, Услуга) В
	|					(ВЫБРАТЬ
	|						втТаблицаНачислений.ЛицевойСчет,
	|						втТаблицаНачислений.Услуга
	|					ИЗ
	|						втТаблицаНачислений КАК втТаблицаНачислений)
	|				И ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|				И РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ))) КАК УПЖКХ_НачисленияОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПерерасчеты.ЛицевойСчет,
	|	втТаблицаУслуг.КодУслугиВОСЗН,
	|	МАКСИМУМ(втПерерасчеты.МесяцНачисления) КАК МесяцНачисления,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втПерерасчеты.Тариф = 0
	|				ТОГДА втТаблицаНачислений.Тариф
	|			ИНАЧЕ втПерерасчеты.Тариф
	|		КОНЕЦ) КАК Тариф,
	|	МАКСИМУМ(ЕСТЬNULL(втТаблицаНачислений.КодЕИ, """")) КАК КодЕИ,
	|	СУММА(втПерерасчеты.Количество) КАК Количество,
	|	МАКСИМУМ(втТаблицаНачислений.НаличиеСчетчика) КАК НаличиеСчетчика,
	|	СУММА(втПерерасчеты.Перерасчет) КАК Перерасчет
	|ИЗ
	|	втПерерасчеты КАК втПерерасчеты
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаНачислений КАК втТаблицаНачислений
	|		ПО втПерерасчеты.ЛицевойСчет = втТаблицаНачислений.ЛицевойСчет
	|			И втПерерасчеты.Услуга = втТаблицаНачислений.Услуга
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТаблицаУслуг КАК втТаблицаУслуг
	|		ПО втПерерасчеты.Услуга = втТаблицаУслуг.УслугаВБазе
	|
	|СГРУППИРОВАТЬ ПО
	|	втПерерасчеты.ЛицевойСчет,
	|	втТаблицаУслуг.КодУслугиВОСЗН";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции // ПолучитьТаблицуПерерасчетов()

&НаСервере
// Получает таблицу сведений о лицевых счетах, по которым были начисления
// в текущем периоде и группирует по кодам услуг в ОСЗН.
//
Процедура СгруппироватьТаблицуНачислений(ТаблицаНачислений)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТаблицаНачислений", ТаблицаНачислений);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаНачислений.ЛицевойСчет,
	|	ТаблицаНачислений.Услуга,
	|	ТаблицаНачислений.КодУслугиВОСЗН,
	|	ТаблицаНачислений.Тариф,
	|	ТаблицаНачислений.КодЕИ,
	|	ТаблицаНачислений.Количество,
	|	ТаблицаНачислений.НаличиеСчетчика,
	|	ТаблицаНачислений.Начислено,
	|	ТаблицаНачислений.Перерасчет,
	|	ТаблицаНачислений.Оплачено,
	|	ТаблицаНачислений.УслугаДействует,
	|	ТаблицаНачислений.БылиОплатыЗаПоследнийМесяц,
	|	ТаблицаНачислений.ЕстьСоглашение
	|ПОМЕСТИТЬ втТаблицаНачислений
	|ИЗ
	|	&ТаблицаНачислений КАК ТаблицаНачислений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаНачислений.ЛицевойСчет,
	|	втТаблицаНачислений.КодУслугиВОСЗН,
	|	МАКСИМУМ(втТаблицаНачислений.Тариф) КАК Тариф,
	|	МАКСИМУМ(втТаблицаНачислений.КодЕИ) КАК КодЕИ,
	|	СУММА(втТаблицаНачислений.Количество) КАК Количество,
	|	МАКСИМУМ(втТаблицаНачислений.НаличиеСчетчика) КАК НаличиеСчетчика,
	|	СУММА(втТаблицаНачислений.Начислено) КАК Начислено,
	|	СУММА(втТаблицаНачислений.Перерасчет) КАК Перерасчет,
	|	СУММА(втТаблицаНачислений.Оплачено) КАК Оплачено,
	|	МАКСИМУМ(втТаблицаНачислений.УслугаДействует) КАК УслугаДействует,
	|	МАКСИМУМ(втТаблицаНачислений.БылиОплатыЗаПоследнийМесяц) КАК БылиОплатыЗаПоследнийМесяц,
	|	МАКСИМУМ(втТаблицаНачислений.ЕстьСоглашение) КАК ЕстьСоглашение
	|ИЗ
	|	втТаблицаНачислений КАК втТаблицаНачислений
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаНачислений.ЛицевойСчет,
	|	втТаблицаНачислений.КодУслугиВОСЗН";
	
	ТаблицаНачислений = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры // СгруппироватьТаблицуНачислений()

////////////////////
// Строка 1.

&НаСервере
// Формирует Строку(1)-заголовок. Заполняется один раз в начале файла.
//
// Параметры:
//  КоличествоДомохозяйств - Число - количество лицевых счетов, по которым ведется выгрузка.
//
// Возвращаемое значение:
//  Строка - сформированная для вывода строка(1).
//
Функция СформироватьСтроку_1(КоличествоДомохозяйств)
	
	Руководитель = УПЖКХ_ТиповыеМетодыВызовСервера.ОтветственныеЛица(Объект.Организация, ТекущаяДата()).РуководительПредставление;
	
	// Поля 1.1 - 1.9
	Строка1 = "1" + ГР 
			+ "Параметры поставщика" + ГР 
			+ Объект.Организация + ГР 
			+ Объект.Организация + "(1)" + ГР 
			+ "1" + ГР 
			+ Формат(ТекущаяДата(), "ДЛФ = Д") + ГР 
			+ ПолучитьТелефонИзКонтактнойИнформации() + ГР 
			+ Руководитель + ГР 
			+ Формат(Объект.Период, "ДЛФ = Д") + ГР;
	
	// Поля 1.10 - 1.11
	Строка1 = Строка1 
			+ Формат(КоличествоДомохозяйств, "ЧГ=0; ЧН=;") + ГР 
			+ ВерсияФорматаВыгрузки + ГР;
	
	Возврат Строка1;
	
КонецФункции // СформироватьСтроку_1()

&НаСервере
// Функция возвращает текстовое представление телефона и факса организации.
//
Функция ПолучитьТелефонИзКонтактнойИнформации()
	
	ВидТелефона = Справочники.ВидыКонтактнойИнформации["ТелефонОрганизации"];
	Факс        = "";
	ВидФакса    = Справочники.ВидыКонтактнойИнформации["ФаксОрганизации"];
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", Объект.Организация);
	Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("Вид"   , ВидФакса);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ОрганизацииКонтактнаяИнформация.Представление
	|ИЗ
	|	Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформация
	|ГДЕ
	|	ОрганизацииКонтактнаяИнформация.Ссылка = &Объект
	|	И ОрганизацииКонтактнаяИнформация.Тип = &Тип
	|	И ОрганизацииКонтактнаяИнформация.Вид = &Вид";
		
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Факс = ", факс: " + РезультатЗапроса.Выгрузить()[0].Представление;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Объект", Объект.Организация);
	Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.Телефон);
	Запрос.УстановитьПараметр("Вид"   , ВидТелефона);
	
	Если Объект.Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		Запрос.УстановитьПараметр("Объект", Объект.Организация.ИндивидуальныйПредприниматель);
		Запрос.УстановитьПараметр("Вид"   , Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица);
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ОрганизацииКонтактнаяИнформация.Представление
	|ИЗ
	|	Справочник.Организации.КонтактнаяИнформация КАК ОрганизацииКонтактнаяИнформация
	|ГДЕ
	|	ОрганизацииКонтактнаяИнформация.Ссылка = &Объект
	|	И ОрганизацииКонтактнаяИнформация.Тип = &Тип
	|	И ОрганизацииКонтактнаяИнформация.Вид = &Вид";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат "";
	Иначе
		Возврат РезультатЗапроса.Выгрузить()[0].Представление + Факс;
	КонецЕсли;
	
КонецФункции

////////////////////
// Строка 2.

&НаСервере
// Формирует Строку(2)-домохозяйство. Заполняется для каждого домохозяйства.
//
// Параметры:
//  Домохозяйство        - СтрокаТаблицыЗначений - подготовленные для формирования строки данные по текущему лицевому счету.
//  ДомохозяйствоСтрокой - Строка - представление лицевого счета для выгрузки (код, наименование или идентификатор).
//
// Возвращаемое значение:
//  Строка - сформированная для вывода строка(2).
//
Функция СформироватьСтроку_2(Домохозяйство, ДомохозяйствоСтрокой)
	
	// Поля 2.1 - 2.3
	Строка2 = "2" + ГР 
			+ Домохозяйство.ПСС + ГР 
			+ ДомохозяйствоСтрокой + ГР;
	
	// Поля 2.4 - 2.7
	Строка2 = Строка2 
			+ Домохозяйство.Фамилия + ГР 
			+ Домохозяйство.Имя + ГР 
			+ Домохозяйство.Отчество + ГР 
			+ ГР;
	
	// Поля 2.8 - 2.17
	Строка2 = Строка2 
			+ ?(ПустаяСтрока(СокрЛП(Домохозяйство.Район)),           "-", ВРег(СокрЛП(Домохозяйство.Район)))           + ГР 
			+ ?(ПустаяСтрока(СокрЛП(Домохозяйство.НаселенныйПункт)), "-", ВРег(СокрЛП(Домохозяйство.НаселенныйПункт))) + ГР
			+ ?(ПустаяСтрока(СокрЛП(Домохозяйство.Улица)),           "-", ВРег(СокрЛП(Домохозяйство.Улица)))           + ГР 
			+ ?(ПустаяСтрока(СокрЛП(Домохозяйство.Дом)),             "-", ВРег(СокрЛП(Домохозяйство.Дом)))             + ГР 
			+ ?(ПустаяСтрока(СокрЛП(Домохозяйство.Корпус)),          "-", ВРег(СокрЛП(Домохозяйство.Корпус)))          + ГР 
			+ ?(НЕ ЗначениеЗаполнено(Домохозяйство.Квартира),        "-", ВРег(Домохозяйство.Квартира))                + ГР 
			+ ВРег(?(НЕ ЗначениеЗаполнено(Домохозяйство.НомерКомнаты), ?(ПустаяСтрока(РеквизитФормыВЗначение("Объект").ПолучитьЦифровыеСимволыИзСтроки(СокрЛП(Домохозяйство.Суффикс))), "-", РеквизитФормыВЗначение("Объект").ПолучитьЦифровыеСимволыИзСтроки(СокрЛП(Домохозяйство.Суффикс))), Домохозяйство.НомерКомнаты)) + ГР
			+ Домохозяйство.КоличествоЗарегистрированных + ГР 
			+ Формат(Домохозяйство.КоличествоКомнат, "ЧДЦ=; ЧН=1; ЧГ=0") + ГР 
			+ Формат(Домохозяйство.ОбщаяПлощадь, "ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") + ГР;
	
	// Поля 2.18 - 2.28
	Для Сч = 18 По 28 Цикл
		Строка2 = Строка2 
				+ "0" + ГР;
	КонецЦикла;
	
	Возврат Строка2;
	
КонецФункции // СформироватьСтроку_2()

&НаСервере
// Убирает из наименования лицевого счета не цифровые символы.
//
// Параметры:
//  ЛицевойСчет - СправочникСсылка.КВП_ЛицевыеСчета - ссылка на лицевой счет.
//
// Возвращаемое значение:
//  СтрокаДляВозврата - Строка - строка, полученная из цифр наименования лицевого счета.
//
Функция ПодготовитьНомерЛСДляВывода(ЛицевойСчет)
	
	НаименованиеЛС = СокрЛП(ЛицевойСчет.Наименование);
	
	СтрокаДляВозврата = РеквизитФормыВЗначение("Объект").ПолучитьЦифровыеСимволыИзСтроки(НаименованиеЛС);
	
	Возврат СтрокаДляВозврата;
	
КонецФункции // ПодготовитьНомерЛСДляВывода()

////////////////////
// Строка 4.

&НаСервере
// Формирует Строку(4)-услуга. Заполняется для каждой услуги, оказываемой поставщиком для текущего домохозяйства.
//
// Параметры:
//  Услуга - СтрокаТаблицыЗначений - подготовленные для формирования строки данные о начислениях
// по текущей начисленной услуге текущего лицевого счета.
//
// Возвращаемое значение:
//  Строка - сформированная для вывода строка(4).
//
Функция СформироватьСтроку_4(Услуга)
	
	// Поля 4.1 - 4.3.
	Строка4 = "4" + ГР 
			+ Услуга.КодУслугиВОСЗН + ГР 
			+ "0" + ГР;
	
	Тариф = Формат(Услуга.Тариф, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");
	// Поля 4.4 - 4.6.
	Строка4 = Строка4 
			+ Тариф + ГР 
			+ Тариф + ГР 
			+ Услуга.КодЕИ + ГР;
	
	// Поля 4.7 - 4.9.
	Строка4 = Строка4 
			// Объемы потребления берём по модулю.
			+ Формат(Макс(Услуга.Количество, -Услуга.Количество), "ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") + ГР
			+ Формат(Макс(Услуга.Количество, -Услуга.Количество), "ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") + ГР
			+ Услуга.НаличиеСчетчика + ГР;
	
	// Поля 4.10 - 4.11.
	Строка4 = Строка4 
			+ Формат(Услуга.Начислено, "ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0")  + ГР 
			+ Формат(Услуга.Перерасчет, "ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") + ГР;
	
	// Поля 4.12 - 4.16.
	Строка4 = Строка4 
			+ "0.00" + ГР 
			+ "0.00" + ГР 
			+ "0.00" + ГР 
			+ "0.00" + ГР 
			+ Формат(Услуга.Оплачено, "ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") + ГР;
	
	Возврат Строка4;
	
КонецФункции // СформироватьСтроку_4()

////////////////////
// Строка 5.

&НаСервере
// Формирует Строку(5)-перерасчеты. Перерасчеты начисления по социальному нормативу по регулируемому тарифу по месяцам.
// Заполняется для каждого месяца, в котором произошел перерасчет услуги, оказываемой поставщиком для текущего домохозяйства.
//
// Параметры:
//  Перерасчет - СтрокаТаблицыЗначений - подготовленные для формирования строки данные о перерасчетах
//                                       по текущей начисленной услуге текущего лицевого счета.
//
// Возвращаемое значение:
//  Строка - сформированная для вывода строка(5).
//
Функция СформироватьСтроку_5(Перерасчет)
	
	// Поля 5.1 - 5.2.
	Строка5 = "5" + ГР 
			// Месяц перерасчета не должен быть равен отчетному месяцу. По "рекомендациям" ОСЗН все перерасчеты должны идти предыдущим месяцем.
			+ Формат(ДобавитьМесяц(Перерасчет.МесяцНачисления, -1), "ДЛФ=D") + ГР;
	
	Тариф = Формат(Перерасчет.Тариф, "ЧДЦ=2; ЧРД=.; ЧН=0.00; ЧГ=0");
	// Поля 5.3 - 5.5.
	Строка5 = Строка5 
			+ Тариф + ГР 
			+ Тариф + ГР 
			+ Перерасчет.КодЕИ + ГР;
	
	// Поля 5.6 - 5.12.
	Строка5 = Строка5
			// Объемы перерасчета берём по модулю.
			+ Формат(Макс(Перерасчет.Количество, -Перерасчет.Количество), "ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") + ГР 
			+ Формат(Макс(Перерасчет.Количество, -Перерасчет.Количество), "ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") + ГР 
			+ Перерасчет.НаличиеСчетчика + ГР
			+ Формат(Перерасчет.Перерасчет, "ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=0") + ГР 
			+ "0.00" + ГР 
			+ "0.00" + ГР 
			+ ГР;
	
	Возврат Строка5;
	
КонецФункции // СформироватьСтроку_5()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ГРУППЫ СУБСИДИИ-ЛЬГОТЫ

#Область ЗагрузкаФайлаСубсидииЛьготы

////////////////////////
// Выбор файла "Субсидии-льготы"

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ФайлСубсидииЛьготы".
//
Процедура ФайлСубсидииЛьготыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Фильтр                  = "Текстовый файл (*.txt)|*.txt";
	ДиалогВыбораФайла.Расширение              = "txt";
	ДиалогВыбораФайла.Заголовок               = "Выберите файл ""Начисленные суммы субсидий и льгот по жильцам""";
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.ИндексФильтра           = 0;
	ДиалогВыбораФайла.ПолноеИмяФайла          = "";
	
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.МножественныйВыбор          = Ложь;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ФайлСубсидииЛьготыНачалоВыбораЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения обработчика события "НачалоВыбора" поля "ФайлСубсидииЛьготы".
Процедура ФайлСубсидииЛьготыНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		ФайлСубсидииЛьготы = ВыбранныеФайлы[0];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Открытие" поля "ФайлСубсидииЛьготы".
//
Процедура ФайлСубсидииЛьготыОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Файл = Новый Файл(ФайлСубсидииЛьготы);
	
	Файл.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ФайлСубсидииЛьготыОткрытиеЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения обработчика события "Открытие" поля "ФайлСубсидииЛьготы".
Процедура ФайлСубсидииЛьготыОткрытиеЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	Если Существует Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ФайлСубсидииЛьготыОткрытиеЗапускПриложения", ЭтотОбъект);
		
		НачатьЗапускПриложения(ОписаниеОповещения, ФайлСубсидииЛьготы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения запуска приложения.
Процедура ФайлСубсидииЛьготыОткрытиеЗапускПриложения(КодВозврата, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры // ФайлСубсидииЛьготыОткрытие()

////////////////////////
// Загрузка файла "Субсидии-льготы"

&НаКлиенте
// Обработчик команды "КомандаЗагрузитьСубсидииЛьготы".
//
Процедура КомандаЗагрузитьСубсидииЛьготы(Команда)
	
	ОчиститьСообщения();
	
	// Проверяем файл на существование.
	Файл = Новый Файл(ФайлСубсидииЛьготы);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаЗагрузитьСубсидииЛьготыКаталогСуществует", ЭтотОбъект);
	
	Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата опроса команды "КомандаЗагрузитьСубсидииЛьготы".
//
Процедура КомандаЗагрузитьСубсидииЛьготыКаталогСуществует(Существует, ДополнительныеПараметры) Экспорт
	
	Если Не Существует Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Указанный файл не существует!");
		Возврат;
	КонецЕсли;
	
	Если Объект.РеспубликаТатарстан_СубсидииЛьготы.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаЗагрузитьСубсидииЛьготыВопрос", ЭтотОбъект);
		
		ТекстВопроса = "Перед загрузкой табличная часть будет очищена. Загрузить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		КомандаЗагрузитьСубсидииЛьготыПродолжение();
	КонецЕсли;

КонецПроцедуры // КомандаЗагрузитьСубсидииЛьготы()

&НаКлиенте
// Обработчик результата опроса команды "КомандаЗагрузитьСубсидииЛьготы".
//
Процедура КомандаЗагрузитьСубсидииЛьготыВопрос(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Объект.РеспубликаТатарстан_СубсидииЛьготы.Очистить();
		
		КомандаЗагрузитьСубсидииЛьготыПродолжение();
		
	КонецЕсли;
	
КонецПроцедуры // КомандаЗагрузитьСубсидииЛьготыВопрос()

&НаКлиенте
// Загрузка файла "Субсидии-льготы".
//
Процедура КомандаЗагрузитьСубсидииЛьготыПродолжение() 
	
	// Выполняем построчное чтение.
	Файл = Новый ТекстовыйДокумент;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаЗагрузитьСубсидииЛьготыПродолжениеЗавершение",
												   ЭтотОбъект, Новый Структура("Файл", Файл));
	
	ТипФайла = ?(Объект.КодировкаТекстовогоФайла, КодировкаТекста.ANSI, КодировкаТекста.OEM);
	
	Файл.НачатьЧтение(ОписаниеОповещения, ФайлСубсидииЛьготы, ТипФайла);
	
КонецПроцедуры

&НаКлиенте
// Обработчик заверешения процедуры продолжения команды "ЗагрузитьСубсидииЛьготы".
Процедура КомандаЗагрузитьСубсидииЛьготыПродолжениеЗавершение(ДополнительныеПараметры) Экспорт
	
	Файл = ДополнительныеПараметры.Файл;
	
	Если Файл.КоличествоСтрок() > 0 Тогда
		
		// Механизм проверки корректности формата загружаемого файла.
		ПерваяСтрока = Файл.ПолучитьСтроку(1);
		Если Найти(ПерваяСтрока, "Ответ поставщику") > 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Обнаружена попытка загрузить файл ""Ответ поставщику"" вместо ""Начислено сумм по жильцам""!");
			Возврат;
		ИначеЕсли Найти(ПерваяСтрока, "begin") = 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Возможно загружаемый файл не соответствует формату.");
		КонецЕсли;
		
		Для НомерСтроки = 1 По Файл.КоличествоСтрок() Цикл
			
			ТекущаяСтрока = Файл.ПолучитьСтроку(НомерСтроки);
			
			// Не считываем строки begin и end.
			Если Лев(ТекущаяСтрока, 5) = "begin" Или Лев(ТекущаяСтрока, 3) = "end" Тогда
				Продолжить;
			КонецЕсли;
			
			Массив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекущаяСтрока, "|", , Истина);
			
			ДобавитьСтрокуИзФайлаСубсидииЛьготы(Массив);
			
		КонецЦикла;
		
	КонецЕсли;
	
	УстановитьСоответствияВБазеФайлСубсидииЛьготы();

КонецПроцедуры // КомандаЗагрузитьСубсидииЛьготыПродолжение()

&НаКлиенте
// Добавляет в таблицу выгрузки значения, полученные из строки файла.
//
// Параметры:
//  Массив - Массив - массив строк-значений, полученных при чтении форматной строки CSV-файла.
//
Процедура ДобавитьСтрокуИзФайлаСубсидииЛьготы(Массив)
	
	Если Массив.Количество() > 0 Тогда
		
		НоваяСтрока = Объект.РеспубликаТатарстан_СубсидииЛьготы.Добавить();
		
		НоваяСтрока.ПСС                                   = СокрЛП(Массив[0]);
		НоваяСтрока.ЛицевойСчетНаименование               = СокрЛП(Массив[1]);
		НоваяСтрока.Фамилия                               = СокрЛП(Массив[2]);
		НоваяСтрока.Имя                                   = СокрЛП(Массив[3]);
		НоваяСтрока.Отчество                              = СокрЛП(Массив[4]);
		НоваяСтрока.ДатаРождения                          = СокрЛП(Массив[5]);
		НоваяСтрока.КодСтатьи                             = СокрЛП(Массив[6]);
		НоваяСтрока.КодУслуги                             = СокрЛП(Массив[7]);
		НоваяСтрока.НаименованиеБанка                     = СокрЛП(Массив[8]);
		НоваяСтрока.ДатаНачала                            = СокрЛП(Массив[9]);
		НоваяСтрока.СуммаВходящегоСальдо                  = Число(Массив[10]);
		НоваяСтрока.РЕЗЕРВ_1                              = Число(Массив[11]);
		НоваяСтрока.НачисленнаяСумма                      = Число(Массив[12]);
		НоваяСтрока.НачисленнаяПерерасчетомСумма          = Число(Массив[13]);
		НоваяСтрока.РЕЗЕРВ_2                              = Число(Массив[14]);
		НоваяСтрока.СуммаАвансовогоПлатежа                = Число(Массив[15]);
		НоваяСтрока.СуммаКВыплате                         = Число(Массив[16]);
		НоваяСтрока.СуммаСубсидий_СМО_РФ                  = Число(Массив[17]);
		НоваяСтрока.СуммаСубсидий_СМО_РТ                  = Число(Массив[18]);
		НоваяСтрока.СуммаСубсидий_НаОтопление             = Число(Массив[19]);
		НоваяСтрока.СуммаПерерасчетовСубсидий_СМО_РФ      = Число(Массив[20]);
		НоваяСтрока.СуммаПерерасчетовСубсидий_СМО_РТ      = Число(Массив[21]);
		НоваяСтрока.СуммаПерерасчетовСубсидий_НаОтопление = Число(Массив[22]);
		НоваяСтрока.СуммаИзменений                        = Число(Массив[23]);
		НоваяСтрока.ДатаОкончания                         = СокрЛП(Массив[24]);
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуИзФайлаСубсидииЛьготы()

&НаСервере
// Устанавливает соответствие лицевых счетов в ОСЗН лицевым счетам в базе и,
// для найденных соответствий, определяет количество проживающих. 
//
Процедура УстановитьСоответствияВБазеФайлСубсидииЛьготы()
	
	// Идентификацию ЛС проводим в соответствии с настройкой "Идентификация лицевого счета".
	Если Объект.ИдентификацияЛС = 0 Тогда
		РеквизитИдентификации = "Код";
	ИначеЕсли Объект.ИдентификацияЛС = 1 Тогда
		РеквизитИдентификации = "Наименование";
	Иначе
		РеквизитИдентификации = "Идентификатор";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаВыгрузки.НомерСтроки,
	|	ТаблицаВыгрузки.ПСС,
	|	ТаблицаВыгрузки.ЛицевойСчетНаименование,
	|	&ПрефиксЛС + ТаблицаВыгрузки.ЛицевойСчетНаименование КАК ЛицевойСчетРеквизитИдентификации,
	|	ТаблицаВыгрузки.Фамилия,
	|	ТаблицаВыгрузки.Имя,
	|	ТаблицаВыгрузки.Отчество,
	|	ТаблицаВыгрузки.ДатаРождения,
	|	ТаблицаВыгрузки.КодСтатьи,
	|	ТаблицаВыгрузки.КодУслуги,
	|	ТаблицаВыгрузки.НаименованиеБанка,
	|	ТаблицаВыгрузки.ДатаНачала,
	|	ТаблицаВыгрузки.СуммаВходящегоСальдо,
	|	ТаблицаВыгрузки.РЕЗЕРВ_1,
	|	ТаблицаВыгрузки.НачисленнаяПерерасчетомСумма,
	|	ТаблицаВыгрузки.РЕЗЕРВ_2,
	|	ТаблицаВыгрузки.СуммаАвансовогоПлатежа,
	|	ТаблицаВыгрузки.СуммаКВыплате,
	|	ТаблицаВыгрузки.СуммаСубсидий_СМО_РФ,
	|	ТаблицаВыгрузки.СуммаСубсидий_СМО_РТ,
	|	ТаблицаВыгрузки.СуммаСубсидий_НаОтопление,
	|	ТаблицаВыгрузки.СуммаПерерасчетовСубсидий_СМО_РФ,
	|	ТаблицаВыгрузки.СуммаПерерасчетовСубсидий_СМО_РТ,
	|	ТаблицаВыгрузки.СуммаПерерасчетовСубсидий_НаОтопление,
	|	ТаблицаВыгрузки.СуммаИзменений,
	|	ТаблицаВыгрузки.ДатаОкончания
	|ПОМЕСТИТЬ втТаблицаВыгрузки
	|ИЗ
	|	&ТаблицаВыгрузки КАК ТаблицаВыгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЛьготыВБазе.ЛьготнаяКатегорияВБазе,
	|	ТаблицаЛьготыВБазе.КодСтатьиЛьготы
	|ПОМЕСТИТЬ втТаблицаЛьготыВБазе
	|ИЗ
	|	&ТаблицаЛьготыВБазе КАК ТаблицаЛьготыВБазе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет." + РеквизитИдентификации + " КАК ЛицевойСчетРеквизитИдентификации
	|ПОМЕСТИТЬ втЛицевыеСчета
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет." + РеквизитИдентификации + " В
	|				(ВЫБРАТЬ
	|					втТаблицаВыгрузки.ЛицевойСчетРеквизитИдентификации
	|				ИЗ
	|					втТаблицаВыгрузки КАК втТаблицаВыгрузки)) КАК КВП_ЛицевыеСчетаСрезПоследних
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец.ФизЛицо
	|ПОМЕСТИТЬ втЗарегистрированные
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втЛицевыеСчета.ЛицевойСчет
	|				ИЗ
	|					втЛицевыеСчета КАК втЛицевыеСчета)) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо,
	|	ФИОФизическихЛицСрезПоследних.Фамилия,
	|	ФИОФизическихЛицСрезПоследних.Имя,
	|	ФИОФизическихЛицСрезПоследних.Отчество
	|ПОМЕСТИТЬ втФИОФизЛиц
	|ИЗ
	|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(
	|			&ДатаКонца,
	|			ФизическоеЛицо ССЫЛКА Справочник.ФизическиеЛица
	|				И ФизическоеЛицо В
	|					(ВЫБРАТЬ
	|						втЗарегистрированные.ЖилецФизЛицо
	|					ИЗ
	|						втЗарегистрированные КАК втЗарегистрированные)) КАК ФИОФизическихЛицСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗарегистрированные.Жилец,
	|	ЕСТЬNULL(втФИОФизЛиц.Фамилия, """") КАК Фамилия,
	|	ЕСТЬNULL(втФИОФизЛиц.Имя, """") КАК Имя,
	|	ЕСТЬNULL(втФИОФизЛиц.Отчество, """") КАК Отчество
	|ПОМЕСТИТЬ втФИОЖильцов
	|ИЗ
	|	втЗарегистрированные КАК втЗарегистрированные
	|		ЛЕВОЕ СОЕДИНЕНИЕ втФИОФизЛиц КАК втФИОФизЛиц
	|		ПО втЗарегистрированные.ЖилецФизЛицо = втФИОФизЛиц.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаВыгрузки.НомерСтроки,
	|	ЕСТЬNULL(втЛицевыеСчета.ЛицевойСчет, ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)) КАК ЛицевойСчет,
	|	ЕСТЬNULL(втФИОЖильцов.Жилец, ЗНАЧЕНИЕ(Справочник.УПЖКХ_Жильцы.ПустаяСсылка)) КАК Льготник,
	|	ЕСТЬNULL(втТаблицаЛьготыВБазе.ЛьготнаяКатегорияВБазе, ЗНАЧЕНИЕ(Справочник.КВП_ЛьготныеКатегории.ПустаяСсылка)) КАК ЛьготнаяКатегория,
	|	втТаблицаВыгрузки.ЛицевойСчетНаименование,
	|	втТаблицаВыгрузки.ПСС,
	|	втТаблицаВыгрузки.Фамилия,
	|	втТаблицаВыгрузки.Имя,
	|	втТаблицаВыгрузки.Отчество,
	|	втТаблицаВыгрузки.ДатаРождения,
	|	втТаблицаВыгрузки.КодСтатьи,
	|	втТаблицаВыгрузки.КодУслуги,
	|	втТаблицаВыгрузки.НаименованиеБанка,
	|	втТаблицаВыгрузки.ДатаНачала,
	|	втТаблицаВыгрузки.СуммаВходящегоСальдо,
	|	втТаблицаВыгрузки.РЕЗЕРВ_1,
	|	втТаблицаВыгрузки.НачисленнаяПерерасчетомСумма,
	|	втТаблицаВыгрузки.РЕЗЕРВ_2,
	|	втТаблицаВыгрузки.СуммаАвансовогоПлатежа,
	|	втТаблицаВыгрузки.СуммаКВыплате,
	|	втТаблицаВыгрузки.СуммаСубсидий_СМО_РФ,
	|	втТаблицаВыгрузки.СуммаСубсидий_СМО_РТ,
	|	втТаблицаВыгрузки.СуммаСубсидий_НаОтопление,
	|	втТаблицаВыгрузки.СуммаПерерасчетовСубсидий_СМО_РФ,
	|	втТаблицаВыгрузки.СуммаПерерасчетовСубсидий_СМО_РТ,
	|	втТаблицаВыгрузки.СуммаПерерасчетовСубсидий_НаОтопление,
	|	втТаблицаВыгрузки.СуммаИзменений,
	|	втТаблицаВыгрузки.ДатаОкончания
	|ИЗ
	|	втТаблицаВыгрузки КАК втТаблицаВыгрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЛицевыеСчета КАК втЛицевыеСчета
	|		ПО втТаблицаВыгрузки.ЛицевойСчетРеквизитИдентификации = втЛицевыеСчета.ЛицевойСчетРеквизитИдентификации
	|		ЛЕВОЕ СОЕДИНЕНИЕ втФИОЖильцов КАК втФИОЖильцов
	|		ПО втТаблицаВыгрузки.Фамилия = втФИОЖильцов.Фамилия
	|			И втТаблицаВыгрузки.Имя = втФИОЖильцов.Имя
	|			И втТаблицаВыгрузки.Отчество = втФИОЖильцов.Отчество
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаЛьготыВБазе КАК втТаблицаЛьготыВБазе
	|		ПО втТаблицаВыгрузки.КодСтатьи = втТаблицаЛьготыВБазе.КодСтатьиЛьготы";
	
	Запрос.УстановитьПараметр("ТаблицаВыгрузки",    Объект.РеспубликаТатарстан_СубсидииЛьготы.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаЛьготыВБазе", Объект.РеспубликаТатарстан_ЛьготыВБазе.Выгрузить());
	Запрос.УстановитьПараметр("ПрефиксЛС",          ?(Объект.ИдентификацияЛС = 1, ПрефиксЛС, ""));
	Запрос.УстановитьПараметр("ДатаКонца",          КонецМесяца(Объект.Период));
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Объект.РеспубликаТатарстан_СубсидииЛьготы.Загрузить(Результат);
	
	// О не найденных соответствиях в базе выводим сообщения.
	Для Каждого Строка Из Объект.РеспубликаТатарстан_СубсидииЛьготы Цикл
		
		Если Строка.ЛицевойСчет.Пустая() Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("В строке №" + Строка.НомерСтроки + " не удалось установить соответствие лицевому счету в базе!");
		КонецЕсли;
		
		Если Строка.Льготник.Пустая() Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("В строке №" + Строка.НомерСтроки + " не удалось установить соответствие жильцу в базе!");
		КонецЕсли;
		
		Если Строка.ЛьготнаяКатегория.Пустая() Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("В строке №" + Строка.НомерСтроки + " для кода статьи """ + Строка.КодСтатьи + """ не удалось установить соответствие льготной категории в базе!");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьСоответствияВБазеФайлСубсидииЛьготы()

#КонецОбласти

#Область ДокументНачислениеУслугВСторонейПрограмме

////////////////////////
// Документ "Начисление услуг в сторонней программе"

&НаКлиенте
// Обработчик события "НачалоВыбора" поля ввода "ДокументСсылкаРасчетЛьгот".
//
Процедура ДокументНачислениеУслугВСторонейПрограммеВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Устанавливаем отбор на документ "Расчет льгот" - проведенные документы не выбираем.
	СтандартнаяОбработка = Ложь;
	
	Форма = ПолучитьФорму("Документ.УПЖКХ_НачислениеУслугВСтороннейПрограмме.ФормаВыбора", , Элемент);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Форма.Список.КомпоновщикНастроек.Настройки.Отбор, "Проведен", Ложь,
															ВидСравненияКомпоновкиДанных.Равно, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
	Форма.Открыть();
	
КонецПроцедуры // ДокументНачислениеУслугВСторонейПрограммеВыбора()

////////////////////////
// Команда "Записать"

&НаКлиенте
// Обработчик команды "КомандаЗаписатьВДокумент".
//
Процедура КомандаЗаписатьВДокумент(Команда)
	
	ОчиститьСообщения();
	
	Если Объект.РеспубликаТатарстан_СубсидииЛьготы.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Отсутствуют данные для загрузки!");
		Возврат;
	КонецЕсли;
	
	Если Не ДокументНачислениеУслугВСторонейПрограмме.Пустая() Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаЗаписатьВДокументЗавершение", ЭтотОбъект, );
		
		ТекстВопроса = "Для записи данных выбран существующий документ! Следует его ";
		
		Кнопки = Новый СписокЗначений;
		// В первом случае существующий документ будет полностью перезаписан.
		// Во втором случае в него только будет загружена табличная часть.
		Кнопки.Добавить(КодВозвратаДиалога.Да,     "Перезаписать");
		Кнопки.Добавить(КодВозвратаДиалога.Нет,    "Дополнить");
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, "Пропустить");
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Отмена);
		
	Иначе
		КомандаЗаписатьВДокументПродолжение();
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаписатьВДокумент()

&НаКлиенте
// Обработчик результата опроса команды "КомандаЗаписатьВДокумент".
//
Процедура КомандаЗаписатьВДокументЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		КомандаЗаписатьВДокументПродолжение(Истина);
		
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		
		КомандаЗаписатьВДокументПродолжение();
		
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаписатьВДокументЗавершение()

&НаКлиенте
// Продолжение обработчика команды "КомандаЗаписатьВДокумент".
//
Процедура КомандаЗаписатьВДокументПродолжение(ОчищатьСуществующийДокумент = Ложь) 
	
	ЗаписьУдалась = КомандаЗаписатьВДокументНаСервере(ОчищатьСуществующийДокумент);
	
	 // Показываем сформированный документ пользователю.
	Если ЗаписьУдалась Тогда
		ПоказатьЗначение(, ДокументНачислениеУслугВСторонейПрограмме);
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаписатьВДокументПродолжение()

&НаСервере
// Обработчик команды "КомандаЗаполнитьТаблицуВыгрузки" на сервере.
//
Функция КомандаЗаписатьВДокументНаСервере(ОчищатьСуществующийДокумент)
	
	ТаблицаДляЗаписиВДокумент = ПодготовитьТаблицуДляЗаписиВДокумент();
	
	Документ = ?(ДокументНачислениеУслугВСторонейПрограмме.Пустая(), Документы.УПЖКХ_НачислениеУслугВСтороннейПрограмме.СоздатьДокумент(), ДокументНачислениеУслугВСторонейПрограмме.ПолучитьОбъект());
	
	Если ДокументНачислениеУслугВСторонейПрограмме.Пустая() Или ОчищатьСуществующийДокумент Тогда
		// Заполнение реквизитов документа.
		Документ.Дата                     = Объект.Период;
		Документ.Организация              = Объект.Организация;
		Документ.Ответственный            = ПараметрыСеанса.ТекущийПользователь;
		Документ.Комментарий              = "# Данные загружены из ОСЗН [" + Формат(ТекущаяДата(), "ДЛФ=DDT") + "] " 
		                                  + "# Файл обмена: """ + ИмяФайлаБезПолногоПути(ФайлСубсидииЛьготы) + """";
		Документ.Начисления.Очистить();
	КонецЕсли;
	
	// Заполнение табличной части документа.
	Для Каждого Строка Из ТаблицаДляЗаписиВДокумент Цикл
		НоваяСтрока = Документ.Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	
	// Запись документа.
	ЗаписьУдалась = КВП_ЗаписатьОбъект(Документ);
	ДокументНачислениеУслугВСторонейПрограмме = Документ.Ссылка;
	
	Возврат ЗаписьУдалась;
	
КонецФункции // КомандаЗаписатьВДокументНаСервере()

////////////////////////
// Прочие процедуры и функции

&НаСервере
// Формирует таблицу для записи в документ "Расчет льгот".
//
// Возвращаемое значение:
//  Результат     - ТаблицаЗначений - подготовленная таблица для загрузки в документ "Расчет льгот".
//
Функция ПодготовитьТаблицуДляЗаписиВДокумент()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&УслугаДляЛьготОСЗН КАК Услуга,
	|	СубсидииЛьготы.ЛицевойСчет,
	|	ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы) КАК РазделУчета,
	|	СубсидииЛьготы.Льготник,
	|	СубсидииЛьготы.ЛьготнаяКатегория,
	|	СубсидииЛьготы.СуммаКВыплате КАК Сумма
	|ПОМЕСТИТЬ втСубсидииЛьготы
	|ИЗ
	|	&СубсидииЛьготы КАК СубсидииЛьготы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Договор КАК ДоговорКонтрагента
	|ПОМЕСТИТЬ втОсновнойДоговорЛС
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(
	|			&Дата,
	|			ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втСубсидииЛьготы.ЛицевойСчет
	|					ИЗ
	|						втСубсидииЛьготы КАК втСубсидииЛьготы)
	|				И Организация = &Организация) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСубсидииЛьготы.Услуга,
	|	втСубсидииЛьготы.ЛицевойСчет,
	|	ЕСТЬNULL(втОсновнойДоговорЛС.ДоговорКонтрагента, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК ДоговорКонтрагента,
	|	втСубсидииЛьготы.РазделУчета,
	|	втСубсидииЛьготы.Льготник,
	|	втСубсидииЛьготы.ЛьготнаяКатегория,
	|	втСубсидииЛьготы.Сумма
	|ИЗ
	|	втСубсидииЛьготы КАК втСубсидииЛьготы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОсновнойДоговорЛС КАК втОсновнойДоговорЛС
	|		ПО втСубсидииЛьготы.ЛицевойСчет = втОсновнойДоговорЛС.ЛицевойСчет";
	
	Запрос.УстановитьПараметр("УслугаДляЛьготОСЗН", Объект.УслугаДляЛьготОСЗН);
	Запрос.УстановитьПараметр("СубсидииЛьготы",     Объект.РеспубликаТатарстан_СубсидииЛьготы.Выгрузить());
	Запрос.УстановитьПараметр("Дата",               КонецМесяца(Объект.Период));
	Запрос.УстановитьПараметр("Организация",        Объект.Организация);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции // ПодготовитьТаблицуДляЗаписиВДокумент()

&НаКлиентеНаСервереБезКонтекста
// Возвращает имя файла с расширением без полного пути к нему.
//
// Параметры:
//  ИмяФайла - Строка - полный путь к файлу в системе.
//
Функция ИмяФайлаБезПолногоПути(Знач ИмяФайла)
	
	Пока Найти(ИмяФайла, "\") <> 0 Цикл
		ИмяФайла = Прав(ИмяФайла, СтрДлина(ИмяФайла) - Найти(ИмяФайла, "\")); 
	КонецЦикла;
	
	Возврат ИмяФайла;
	
КонецФункции // ИмяФайлаБезПолногоПути()

#КонецОбласти

