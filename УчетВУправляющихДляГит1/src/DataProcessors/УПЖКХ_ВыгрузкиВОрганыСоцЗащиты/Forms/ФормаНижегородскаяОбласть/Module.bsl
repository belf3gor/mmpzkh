
//////////////////////////////////////////////////////////////////////////
// СОХРАНЯЕМЫЕ НАСТРОЙКИ

#Область РаботаСНастройками

&НаСервере
// Процедура восстановления настроек.
Процедура ВосстановитьНастройки()
	
	СтруктураПараметров = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("НижегородскаяОбласть_ВыгрузкаВОСЗН", "ПараметрыВыгрузки");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		СтруктураПараметров.Свойство("ИмяКаталогаЗагрузки",   ИмяКаталогаЗагрузки);
		СтруктураПараметров.Свойство("ИмяКаталогаВыгрузки",   ИмяКаталогаВыгрузки);
		
		врНижегородскаяОбл_НастройкиВидЖилФонда   = Новый ТаблицаЗначений;
		врНижегородскаяОбл_НастройкиВидыПлощадей  = Новый ТаблицаЗначений;
		врНижегородскаяОбл_НастройкиТипыЖилья     = Новый ТаблицаЗначений;
		врНижегородскаяОбл_НастройкиТипыОтоплений = Новый ТаблицаЗначений;
		ВрНижегородскаяОбл_НастройкиУслуги        = Новый ТаблицаЗначений;
		ВрНижегородскаяОбл_НастройкиЕдИзмерения   = Новый ТаблицаЗначений;
		
		СтруктураПараметров.Свойство("НижегородскаяОбл_НастройкиВидЖилФонда", врНижегородскаяОбл_НастройкиВидЖилФонда);
		Если НЕ врНижегородскаяОбл_НастройкиВидЖилФонда = Неопределено Тогда
			Объект.НижегородскаяОбл_НастройкиВидЖилФонда.Загрузить(врНижегородскаяОбл_НастройкиВидЖилФонда);
		КонецЕсли;
		
		СтруктураПараметров.Свойство("НижегородскаяОбл_НастройкиВидыПлощадей", врНижегородскаяОбл_НастройкиВидыПлощадей);
		Если НЕ врНижегородскаяОбл_НастройкиВидыПлощадей = Неопределено Тогда
			Объект.НижегородскаяОбл_НастройкиВидыПлощадей.Загрузить(врНижегородскаяОбл_НастройкиВидыПлощадей);
		КонецЕсли;
		
		СтруктураПараметров.Свойство("НижегородскаяОбл_НастройкиТипыЖилья", врНижегородскаяОбл_НастройкиТипыЖилья);
		Если НЕ врНижегородскаяОбл_НастройкиТипыЖилья = Неопределено Тогда
			Объект.НижегородскаяОбл_НастройкиТипыЖилья.Загрузить(врНижегородскаяОбл_НастройкиТипыЖилья);
		КонецЕсли;
		
		СтруктураПараметров.Свойство("НижегородскаяОбл_НастройкиТипыОтоплений", врНижегородскаяОбл_НастройкиТипыОтоплений);
		Если НЕ врНижегородскаяОбл_НастройкиТипыОтоплений = Неопределено Тогда
			Объект.НижегородскаяОбл_НастройкиТипыОтоплений.Загрузить(врНижегородскаяОбл_НастройкиТипыОтоплений);
		КонецЕсли;
		
		СтруктураПараметров.Свойство("НижегородскаяОбл_НастройкиУслуги", ВрНижегородскаяОбл_НастройкиУслуги);
		Если НЕ ВрНижегородскаяОбл_НастройкиУслуги = Неопределено Тогда
			Объект.НижегородскаяОбл_НастройкиУслуги.Загрузить(ВрНижегородскаяОбл_НастройкиУслуги);
		КонецЕсли;
		
		СтруктураПараметров.Свойство("НижегородскаяОбл_НастройкиЕдИзмерения", ВрНижегородскаяОбл_НастройкиЕдИзмерения);
		Если НЕ ВрНижегородскаяОбл_НастройкиЕдИзмерения = Неопределено Тогда
			Объект.НижегородскаяОбл_НастройкиЕдИзмерения.Загрузить(ВрНижегородскаяОбл_НастройкиЕдИзмерения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура сохранения настроек.
Процедура СохранитьНастройки()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяКаталогаЗагрузки",             ИмяКаталогаЗагрузки);
	СтруктураПараметров.Вставить("ИмяКаталогаВыгрузки",             ИмяКаталогаВыгрузки);
	
	СтруктураПараметров.Вставить("НижегородскаяОбл_НастройкиВидЖилФонда",   Объект.НижегородскаяОбл_НастройкиВидЖилФонда.Выгрузить());
	СтруктураПараметров.Вставить("НижегородскаяОбл_НастройкиВидыПлощадей",  Объект.НижегородскаяОбл_НастройкиВидыПлощадей.Выгрузить());
	СтруктураПараметров.Вставить("НижегородскаяОбл_НастройкиТипыЖилья",     Объект.НижегородскаяОбл_НастройкиТипыЖилья.Выгрузить());
	СтруктураПараметров.Вставить("НижегородскаяОбл_НастройкиТипыОтоплений", Объект.НижегородскаяОбл_НастройкиТипыОтоплений.Выгрузить());
	СтруктураПараметров.Вставить("НижегородскаяОбл_НастройкиУслуги",        Объект.НижегородскаяОбл_НастройкиУслуги.Выгрузить());
	СтруктураПараметров.Вставить("НижегородскаяОбл_НастройкиЕдИзмерения",   Объект.НижегородскаяОбл_НастройкиЕдИзмерения.Выгрузить());
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("НижегородскаяОбласть_ВыгрузкаВОСЗН", "ПараметрыВыгрузки", СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// РАБОТА С ВРЕМЕННЫМ ХРАНИЛИЩЕМ

#Область РаботаСВременнымХранилищем

&НаСервере
// Помещает настройки во временное хранилище.
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ИмяКаталогаЗагрузки", ИмяКаталогаЗагрузки);
	
	СтруктураНастроек.Вставить("НижегородскаяОбл_НастройкиВидЖилФонда",   Объект.НижегородскаяОбл_НастройкиВидЖилФонда.Выгрузить());
	СтруктураНастроек.Вставить("НижегородскаяОбл_НастройкиВидыПлощадей",  Объект.НижегородскаяОбл_НастройкиВидыПлощадей.Выгрузить());
	СтруктураНастроек.Вставить("НижегородскаяОбл_НастройкиТипыЖилья",     Объект.НижегородскаяОбл_НастройкиТипыЖилья.Выгрузить());
	СтруктураНастроек.Вставить("НижегородскаяОбл_НастройкиТипыОтоплений", Объект.НижегородскаяОбл_НастройкиТипыОтоплений.Выгрузить());
	СтруктураНастроек.Вставить("НижегородскаяОбл_НастройкиУслуги",        Объект.НижегородскаяОбл_НастройкиУслуги.Выгрузить());
	СтруктураНастроек.Вставить("НижегородскаяОбл_НастройкиЕдИзмерения",   Объект.НижегородскаяОбл_НастройкиЕдИзмерения.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
// Получает настройки из временного хранилища.
Функция ПолучитьНастройкиИзХранилища(АдресНастроекВХранилище)
	
	СтруктураНастроек = ПолучитьИзВременногоХранилища(АдресНастроекВХранилище);
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		
		Если СтруктураНастроек.Свойство("НижегородскаяОбл_НастройкиВидЖилФонда") Тогда
			Объект.НижегородскаяОбл_НастройкиВидЖилФонда.Загрузить(СтруктураНастроек.НижегородскаяОбл_НастройкиВидЖилФонда);
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("НижегородскаяОбл_НастройкиВидыПлощадей") Тогда
			Объект.НижегородскаяОбл_НастройкиВидыПлощадей.Загрузить(СтруктураНастроек.НижегородскаяОбл_НастройкиВидыПлощадей);
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("НижегородскаяОбл_НастройкиТипыЖилья") Тогда
			Объект.НижегородскаяОбл_НастройкиТипыЖилья.Загрузить(СтруктураНастроек.НижегородскаяОбл_НастройкиТипыЖилья);
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("НижегородскаяОбл_НастройкиТипыОтоплений") Тогда
			Объект.НижегородскаяОбл_НастройкиТипыОтоплений.Загрузить(СтруктураНастроек.НижегородскаяОбл_НастройкиТипыОтоплений);
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("НижегородскаяОбл_НастройкиУслуги") Тогда
			Объект.НижегородскаяОбл_НастройкиУслуги.Загрузить(СтруктураНастроек.НижегородскаяОбл_НастройкиУслуги);
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("НижегородскаяОбл_НастройкиЕдИзмерения") Тогда
			Объект.НижегородскаяОбл_НастройкиЕдИзмерения.Загрузить(СтруктураНастроек.НижегородскаяОбл_НастройкиЕдИзмерения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ДАННЫХ

#Область РаботаСДанными

&НаКлиенте
// Проверяет наличие всех необходимых данных для заполнения таблиц выгрузки.
//
Функция ПроверкаУсловийДляЗаполненияТаблиц()
	
	ТекстОшибки = "";
	
	Если НЕ ЗначениеЗаполнено(Объект.Период) Тогда
		ТекстОшибки = ТекстОшибки + "Не указан период выгрузки!";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + "Не указана организация!";
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяКаталогаЗагрузки) Тогда
		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + "Не указан путь к файлам загрузки!";
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяКаталогаВыгрузки) Тогда
		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + "Не указан каталог выгрузки!";
	КонецЕсли;
	
	Если Объект.НижегородскаяОбл_НастройкиВидЖилФонда.Количество() = 0 Тогда
		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + "Не заполнена таблица видов жилого фонда!";
	КонецЕсли;
	
	Если Объект.НижегородскаяОбл_НастройкиВидыПлощадей.Количество() = 0 Тогда
		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + "Не заполнена таблица видов площадей!";
	КонецЕсли;
	
	Если Объект.НижегородскаяОбл_НастройкиТипыЖилья.Количество() = 0 Тогда
		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + "Не заполнена таблица типов жилья!";
	КонецЕсли;
	
	Если Объект.НижегородскаяОбл_НастройкиТипыОтоплений.Количество() = 0 Тогда
		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + "Не заполнена таблица типов отопления!";
	КонецЕсли;
	
	Если Объект.НижегородскаяОбл_НастройкиУслуги.Количество() = 0 Тогда
		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + "Не заполнена таблица соответствия услуг!";
	КонецЕсли;
	
	Если Объект.НижегородскаяОбл_НастройкиЕдИзмерения.Количество() = 0 Тогда
		ТекстОшибки = ТекстОшибки + ?(ПустаяСтрока(ТекстОшибки), "", Символы.ПС) + "Не заполнена таблица единиц измерения!";
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции // ПроверкаУсловийДляЗаполненияТаблиц

&НаСервере
// Процедура заполнения всех данных.
Процедура ЗаполнитьНаСервере(СоответствиеАдресов)
	
	// Запись временных данных во временный файл.
	СписокФайлов = Новый Массив;
	
	Для Каждого СтрокаАдреса ИЗ СоответствиеАдресов Цикл
		врДанныеФайла = ПолучитьИзВременногоХранилища(СтрокаАдреса.Значение);
		ВременныйФайл = ПолучитьИмяВременногоФайла("DBF");
		
		// Для чтения *.dbf формата урежем имя временного файла.
		ФайлДБФ = Новый Файл(ВременныйФайл);
		СтароеИмяФайла = ФайлДБФ.ИмяБезРасширения + ".DBF";
		НовоеИмяФайла  = Лев(СтрокаАдреса.Ключ, 8) + ".DBF";
		ВременныйФайл  = СтрЗаменить(ФайлДБФ.ПолноеИмя, СтароеИмяФайла, НовоеИмяФайла);
	
		врДанныеФайла.Записать(ВременныйФайл);
		
		СписокФайлов.Добавить(ВременныйФайл);
	КонецЦикла;
	
	Кодировка = КодировкаXBase.OEM;
	
	ТаблицаРеестра = Объект.НижегородскаяОбл_РеестраПолучателейЕДК.Выгрузить();
	
	ТаблицаДопИнформации = Объект.НижегородскаяОбл_ДополнительныеПараметры.Выгрузить();
	
	ОбработкаОбъект = ДанныеФормыВЗначение(Объект, Тип("ОбработкаОбъект.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты"));
	ОбработкаОбъект.СформироватьТаблицуДанныхНижегородск(ТаблицаРеестра, ТаблицаДопИнформации, Кодировка, СписокФайлов);
	ЗначениеВДанныеФормы(ОбработкаОбъект, Объект);
	
	Объект.НижегородскаяОбл_РеестраПолучателейЕДК.Загрузить(ТаблицаРеестра);
	Объект.НижегородскаяОбл_ДополнительныеПараметры.Загрузить(ТаблицаДопИнформации);
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ВЫГРУЗКА ФАЙЛОВ

#Область ВыгрузкаФайлов

&НаКлиенте
// Предназначена для выгрузки данных из таблицы данных в dbf-файл.
//
Процедура ВыгрузитьДанныеВФайлНижегородск()
	
	Если Объект.НижегородскаяОбл_РеестраПолучателейЕДК.Количество() = 0
	 ИЛИ Объект.НижегородскаяОбл_ДополнительныеПараметры.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В таблицах выгружаемых данных отсутствуют данные для выгрузки в dbf-файлы.");
		Возврат;
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
	
	ФайлВыгрузкиРеестра           = Новый XBase;
	ФайлВыгрузкиРеестра.Кодировка = КодировкаXBase.OEM;
	ФайлВыгрузкиРеестра.Поля.Добавить("D_uch",     "D");
	ФайлВыгрузкиРеестра.Поля.Добавить("Cod_rs",    "S", "2"); 
	ФайлВыгрузкиРеестра.Поля.Добавить("Polis",     "S", "6");
	ФайлВыгрузкиРеестра.Поля.Добавить("Fam",       "S", "30");
	ФайлВыгрузкиРеестра.Поля.Добавить("Imja",      "S", "20");
	ФайлВыгрузкиРеестра.Поля.Добавить("Otch",      "S", "30");
	ФайлВыгрузкиРеестра.Поля.Добавить("N_adr",     "S", "6");
	ФайлВыгрузкиРеестра.Поля.Добавить("Gor",       "S", "3");
	ФайлВыгрузкиРеестра.Поля.Добавить("Ulica",     "S", "3");
	ФайлВыгрузкиРеестра.Поля.Добавить("Dom",       "S", "6");
	ФайлВыгрузкиРеестра.Поля.Добавить("Korpus",    "S", "2");
	ФайлВыгрузкиРеестра.Поля.Добавить("Kvart",     "S", "9");
	ФайлВыгрузкиРеестра.Поля.Добавить("Kv_dop",    "S", "2");
	ФайлВыгрузкиРеестра.Поля.Добавить("Sp_kat",    "S", "18");
	ФайлВыгрузкиРеестра.Поля.Добавить("Kat_fix",   "S", "4");
	ФайлВыгрузкиРеестра.Поля.Добавить("Pr_zakr",   "S", "1");
	ФайлВыгрузкиРеестра.Поля.Добавить("N_lsch",    "S", "10");
	ФайлВыгрузкиРеестра.Поля.Добавить("Prich",     "S", "1");
	ФайлВыгрузкиРеестра.Поля.Добавить("Gil_f",     "S", "3");
	ФайлВыгрузкиРеестра.Поля.Добавить("O_tot",     "S", "1");
	ФайлВыгрузкиРеестра.Поля.Добавить("Pl_o",      "N", "6", "2");
	ФайлВыгрузкиРеестра.Поля.Добавить("Pl_t",      "N", "6", "2");
	ФайлВыгрузкиРеестра.Поля.Добавить("Pl_g",      "N", "6", "2");
	ФайлВыгрузкиРеестра.Поля.Добавить("K_giv",     "N", "2");
	ФайлВыгрузкиРеестра.Поля.Добавить("K_vub",     "N", "2");
	ФайлВыгрузкиРеестра.Поля.Добавить("K_vpr",     "N", "2");
	ФайлВыгрузкиРеестра.Поля.Добавить("K_polr",    "N", "2");
	ФайлВыгрузкиРеестра.Поля.Добавить("Pr_w1p",    "S", "2");
	ФайлВыгрузкиРеестра.Поля.Добавить("Prv2005",   "N", "1");
	ФайлВыгрузкиРеестра.Поля.Добавить("Id_type",   "S", "2");
	ФайлВыгрузкиРеестра.Поля.Добавить("Id_recalc", "S", "2");
	ФайлВыгрузкиРеестра.Поля.Добавить("D_begr",    "D");
	ФайлВыгрузкиРеестра.Поля.Добавить("D_endr",    "D");
	ФайлВыгрузкиРеестра.Поля.Добавить("K_org",     "S", "3");
	ФайлВыгрузкиРеестра.Поля.Добавить("K_regi",    "S", "1");
	
	ФайлВыгрузкиРеестра.СоздатьФайл(ИмяКаталогаВыгрузки + "\OUT_F1.DBF",); 
	ФайлВыгрузкиРеестра.АвтоСохранение = Истина;
	
	Для каждого ТекСтрока Из Объект.НижегородскаяОбл_РеестраПолучателейЕДК Цикл
		ФайлВыгрузкиРеестра.Добавить();
		ЗаполнитьЗначенияСвойств(ФайлВыгрузкиРеестра, ТекСтрока);
	КонецЦикла;
	
	ФайлВыгрузкиРеестра.ЗакрытьФайл();
	НачатьПеремещениеФайла(Новый ОписаниеОповещения("ОбработатьРезультатПеремещенияФайла", ЭтаФорма, "reestr.dbf"), ИмяКаталогаВыгрузки + "\OUT_F1.DBF", ИмяКаталогаВыгрузки + "\reestr.dbf");
	
	ФайлВыгрузкиДопИнформации           = Новый XBase;
	ФайлВыгрузкиДопИнформации.Кодировка = КодировкаXBase.OEM;
	ФайлВыгрузкиДопИнформации.Поля.Добавить("N_lsch",   "S", "10");
	ФайлВыгрузкиДопИнформации.Поля.Добавить("K_usl",    "S", "2"); 
	ФайлВыгрузкиДопИнформации.Поля.Добавить("Tarif",    "N", "12", "4");
	ФайлВыгрузкиДопИнформации.Поля.Добавить("Tarif2",   "N", "12", "4");
	ФайлВыгрузкиДопИнформации.Поля.Добавить("Id_unit",  "S", "2");
	ФайлВыгрузкиДопИнформации.Поля.Добавить("Norm",     "N", "12", "5");
	ФайлВыгрузкиДопИнформации.Поля.Добавить("Cnt",      "L");
	ФайлВыгрузкиДопИнформации.Поля.Добавить("Diff",     "N", "12", "4");
	ФайлВыгрузкиДопИнформации.Поля.Добавить("D_begr",   "D");
	ФайлВыгрузкиДопИнформации.Поля.Добавить("D_endr",   "D");
	ФайлВыгрузкиДопИнформации.Поля.Добавить("Pr_zd",    "S", "1");
	ФайлВыгрузкиДопИнформации.Поля.Добавить("Summ_red", "N", "12", "2");
	ФайлВыгрузкиДопИнформации.Поля.Добавить("Norm_ex",  "N", "12", "5");
	
	ФайлВыгрузкиДопИнформации.СоздатьФайл(ИмяКаталогаВыгрузки + "\OUT_F2.DBF",); 
	ФайлВыгрузкиДопИнформации.АвтоСохранение = Истина;
	
	Для каждого ТекСтрока Из Объект.НижегородскаяОбл_ДополнительныеПараметры Цикл
		ФайлВыгрузкиДопИнформации.Добавить();
		ЗаполнитьЗначенияСвойств(ФайлВыгрузкиДопИнформации, ТекСтрока);
	КонецЦикла;
	
	ФайлВыгрузкиДопИнформации.ЗакрытьФайл();
	НачатьПеремещениеФайла(Новый ОписаниеОповещения("ОбработатьРезультатПеремещенияФайла", ЭтаФорма, "servinfo.dbf"), ИмяКаталогаВыгрузки + "\OUT_F2.DBF", ИмяКаталогаВыгрузки + "\servinfo.dbf");
	
	#КонецЕсли
	
КонецПроцедуры // ВыгрузитьДанныеВФайлНижегородск()

&НаКлиенте
// Обработчик результата перемещения файла.
//
Процедура ОбработатьРезультатПеремещенияФайла(ПеремещаемыйФайл, ДополнительныеПараметры) Экспорт
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Выгрузка в файл " + ДополнительныеПараметры + " завершена!");
	
КонецПроцедуры // ОбработатьРезультатПеремещенияФайла()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	ТекРабДата = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	Объект.Период = ТекРабДата;
	
	ВосстановитьНастройки();
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки();
	
КонецПроцедуры

////////////////////////
// Диалог выбора файла

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Имя каталога загрузки".
//
Процедура ИмяКаталогаЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла                             = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Заголовок                   = "Выбор каталога загрузки";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ВыборФайлаЗагрузкиЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаЗагрузкиЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ИмяКаталогаЗагрузки = ВыбранныеФайлы[0];
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Имя каталога загрузки".
//
Процедура ИмяКаталогаЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УПЖКХ_ОбщегоНазначенияКлиент.ОткрытьСтраницуВБраузере("explorer " + ИмяКаталогаЗагрузки);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Имя каталога выгрузки".
//
Процедура ИмяКаталогаВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла                             = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Заголовок                   = "Выбор каталога выгрузки";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ВыборФайлаВыгрузкиЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаВыгрузкиЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ИмяКаталогаВыгрузки = ВыбранныеФайлы[0];
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Имя каталога выгрузки".
//
Процедура ИмяКаталогаВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УПЖКХ_ОбщегоНазначенияКлиент.ОткрытьСтраницуВБраузере("explorer " + ИмяКаталогаВыгрузки);
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "КомандаНастройка".
Процедура КомандаНастройка(Команда)
	
	АдресНастроекВХранилище = ПоместитьНастройкиВХранилище();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаНастройкаЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты.Форма.НижегородскаяОбласть_ФормаНастройки", Новый Структура("АдресНастроекВХранилище", АдресНастроекВХранилище), , , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата опроса команды "КомандаНастройка".
Процедура КомандаНастройкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		ПолучитьНастройкиИзХранилища(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаЗаполнить".
Процедура КомандаЗаполнить(Команда)
	
	ТекстОшибки = ПроверкаУсловийДляЗаполненияТаблиц();
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ФайлНаДиске = Новый Файл(ИмяКаталогаЗагрузки);
	
	ДополнительныеПараметры = Новый Структура("ФайлНаДиске", ФайлНаДиске);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаСуществованияФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ФайлНаДиске.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСуществованияФайлаЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	ФайлНаДиске = ДополнительныеПараметры.ФайлНаДиске;
	
	Если НЕ Существует Тогда
		ПоказатьПредупреждение(, "Каталог не существует!");
		Возврат;
	КонецЕсли;
	
	ФайлНаДиске.НачатьПроверкуЭтоКаталог(Новый ОписаниеОповещения("ПроверкаНаКаталогЗавершение", ЭтотОбъект));

КонецПроцедуры

&НаКлиенте
Процедура ПроверкаНаКаталогЗавершение(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЭтоКаталог Тогда
		ПоказатьПредупреждение(, "Каталог не существует!");
		Возврат;
	КонецЕсли;
	
	НачатьПоискФайлов(Новый ОписаниеОповещения("НайтиФайлыЗавершение", ЭтотОбъект), ИмяКаталогаЗагрузки, "*.DBF");

КонецПроцедуры

&НаКлиенте
Процедура НайтиФайлыЗавершение(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если НайденныеФайлы.Количество() = 0 Тогда
		ПоказатьПредупреждение(,"Каталог пуст и не содержит файлов формата "".DBF""!");
		Возврат;
	КонецЕсли;
	
	ПомещаемыеФайлы = Новый Массив;
	Для Каждого ФайлЗагрузки Из НайденныеФайлы Цикл
		ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ФайлЗагрузки.ПолноеИмя));
	КонецЦикла;
	
	ДопПараметры = Новый Структура;
	Описание     = Новый ОписаниеОповещения("ОбработатьРезультатПомещенияФайлаВХранилище", ЭтаФорма, ДопПараметры);
	НачатьПомещениеФайлов(Описание, ПомещаемыеФайлы,, Ложь, Новый УникальныйИдентификатор);

КонецПроцедуры // КомандаЗаполнить()

&НаКлиенте
// Обработчик результата помещения файла в хранилище.
Процедура ОбработатьРезультатПомещенияФайлаВХранилище(ПомещенныеФайлы, ДопПараметры) Экспорт
	
	Если ПомещенныеФайлы.Количество() = 0 Тогда
		ПоказатьПредупреждение(, "Произошла ошибка при получении файлов формата "".DBF""!");
		Возврат;
	КонецЕсли;
	
	СоответствиеАдресов = Новый Соответствие;
	Для Каждого ТекОписаниеФайла Из ПомещенныеФайлы Цикл
		текФайл = Новый Файл(ТекОписаниеФайла.Имя);
		СоответствиеАдресов.Вставить(текФайл.ИмяБезРасширения, ТекОписаниеФайла.Хранение);
	КонецЦикла;
	
	Если Объект.НижегородскаяОбл_РеестраПолучателейЕДК.Количество() > 0
	 ИЛИ Объект.НижегородскаяОбл_ДополнительныеПараметры.Количество() > 0 Тогда
		Оповещение   = Новый ОписаниеОповещения("КомандаЗаполнитьЗавершение", ЭтотОбъект, Новый Структура("СоответствиеАдресов", СоответствиеАдресов));
		ТекстВопроса = "Перед заполнением таблицы выгрузки будут очищены. Заполнить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьНаСервере(СоответствиеАдресов);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатПомещенияФайлаВХранилище()

&НаКлиенте
// Обработчик результата опроса команды "КомандаЗаполнитьВсе".
Процедура КомандаЗаполнитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьНаСервере(ДополнительныеПараметры.СоответствиеАдресов);
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьВсеЗавершение()

&НаКлиенте
// Обработчик команды "КомандаВыгрузить".
Процедура КомандаВыгрузить(Команда)
	
	Если ПустаяСтрока(ИмяКаталогаВыгрузки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указан каталог выгрузки!");
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(ИмяКаталогаВыгрузки);
	Файл.НачатьПроверкуЭтоКаталог(Новый ОписаниеОповещения("ПроверкаНаКаталогЗавершение1", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаНаКаталогЗавершение1(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЭтоКаталог Тогда
		ПоказатьПредупреждение(, "Каталог указан не верно");
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДанныеВФайлНижегородск();

КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

////////////////////////
// Период

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПериодСтрокой".
Процедура ПериодСтрокойПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Модифицированность);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ПериодСтрокой".
Процедура ПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Регулирование" поля "ПериодСтрокой".
Процедура ПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Направление,
														Модифицированность);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "ПериодСтрокой".
Процедура ПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "ПериодСтрокой".
Процедура ПериодСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти
