
//////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункции

&НаСервере
// Формирует массив сокращений для Томской области для выбранного вида сокращения.
//
Функция СформироватьМассивСокращениеДляВладимирскойОблПоВиду(ВидСокращение)
		
	МассивСокращений = Новый Массив;
	// для регионов
	Если ВидСокращение = 1 Тогда
		МассивСокращений.Добавить("обл");
		// для районов
	ИначеЕсли ВидСокращение = 2 Тогда
		МассивСокращений.Добавить("р-н");
		МассивСокращений.Добавить("район");
		// для городов
	ИначеЕсли ВидСокращение = 3 Тогда
		МассивСокращений.Добавить("г");
		// для нас.пунктов
	ИначеЕсли ВидСокращение = 4 Тогда
		МассивСокращений.Добавить("рп");
		МассивСокращений.Добавить("п");
		МассивСокращений.Добавить("с");
		МассивСокращений.Добавить("д");
		МассивСокращений.Добавить("х");
		МассивСокращений.Добавить("ст");
		МассивСокращений.Добавить("пгт");
		МассивСокращений.Добавить("дп");
		МассивСокращений.Добавить("рзд");
		МассивСокращений.Добавить("мкр");
		МассивСокращений.Добавить("нп");
		МассивСокращений.Добавить("тер");
		МассивСокращений.Добавить("п/ст");
		МассивСокращений.Добавить("промзона");
		МассивСокращений.Добавить("снт");
		МассивСокращений.Добавить("п/о");
		МассивСокращений.Добавить("городок");
		МассивСокращений.Добавить("заимка");
		МассивСокращений.Добавить("кп");
		МассивСокращений.Добавить("ж/д_казарм");
		МассивСокращений.Добавить("г");
		МассивСокращений.Добавить("обл");
		МассивСокращений.Добавить("дер");
		МассивСокращений.Добавить("рп.");
		МассивСокращений.Добавить("п.");
		МассивСокращений.Добавить("с.");
		МассивСокращений.Добавить("д.");
		МассивСокращений.Добавить("х.");
		МассивСокращений.Добавить("ст.");
		МассивСокращений.Добавить("пгт.");
		МассивСокращений.Добавить("дп.");
		МассивСокращений.Добавить("рзд.");
		МассивСокращений.Добавить("мкр.");
		МассивСокращений.Добавить("нп.");
		МассивСокращений.Добавить("тер.");
		МассивСокращений.Добавить("п/ст.");
		МассивСокращений.Добавить("промзона.");
		МассивСокращений.Добавить("снт.");
		МассивСокращений.Добавить("п/о.");
		МассивСокращений.Добавить("городок.");
		МассивСокращений.Добавить("заимка.");
		МассивСокращений.Добавить("кп.");
		МассивСокращений.Добавить("ж/д_казарм.");
		МассивСокращений.Добавить("г.");
		МассивСокращений.Добавить("обл.");
		МассивСокращений.Добавить("дер.");
		// для улиц
	ИначеЕсли ВидСокращение = 5 Тогда
		МассивСокращений.Добавить("ул");
		МассивСокращений.Добавить("тер");
		МассивСокращений.Добавить("пл");
		МассивСокращений.Добавить("пер");
		МассивСокращений.Добавить("снт");
		МассивСокращений.Добавить("проезд");
		МассивСокращений.Добавить("б-р");
		МассивСокращений.Добавить("туп");
		МассивСокращений.Добавить("п");
		МассивСокращений.Добавить("ш");
		МассивСокращений.Добавить("пр-кт");
		МассивСокращений.Добавить("тракт");
		МассивСокращений.Добавить("сквер");
		МассивСокращений.Добавить("ст");
		МассивСокращений.Добавить("наб");
		МассивСокращений.Добавить("км");
		МассивСокращений.Добавить("ж/д_ст");
		МассивСокращений.Добавить("сад");
		МассивСокращений.Добавить("парк");
		МассивСокращений.Добавить("уч-к");
		МассивСокращений.Добавить("мкр");
		МассивСокращений.Добавить("городок");
		МассивСокращений.Добавить("кв-л");
		МассивСокращений.Добавить("нп");
		МассивСокращений.Добавить("остров");
		МассивСокращений.Добавить("гск");
		МассивСокращений.Добавить("линия");
		МассивСокращений.Добавить("рзд");
		МассивСокращений.Добавить("стр");
		МассивСокращений.Добавить("аллея");
		МассивСокращений.Добавить("казарма");
		МассивСокращений.Добавить("ж/д_рзд");
		МассивСокращений.Добавить("д");
		МассивСокращений.Добавить("ж/д_казарм");
		МассивСокращений.Добавить("ж/д_будка");
		МассивСокращений.Добавить("высел");
		МассивСокращений.Добавить("ул.");
		МассивСокращений.Добавить("тер.");
		МассивСокращений.Добавить("пл.");
		МассивСокращений.Добавить("пер.");
		МассивСокращений.Добавить("снт.");
		МассивСокращений.Добавить("проезд.");
		МассивСокращений.Добавить("б-р.");
		МассивСокращений.Добавить("туп.");
		МассивСокращений.Добавить("п.");
		МассивСокращений.Добавить("ш.");
		МассивСокращений.Добавить("пр-кт.");
		МассивСокращений.Добавить("тракт.");
		МассивСокращений.Добавить("сквер.");
		МассивСокращений.Добавить("ст.");
		МассивСокращений.Добавить("наб.");
		МассивСокращений.Добавить("км.");
		МассивСокращений.Добавить("ж/д_ст.");
		МассивСокращений.Добавить("сад.");
		МассивСокращений.Добавить("парк.");
		МассивСокращений.Добавить("уч-к.");
		МассивСокращений.Добавить("мкр.");
		МассивСокращений.Добавить("городок.");
		МассивСокращений.Добавить("кв-л.");
		МассивСокращений.Добавить("нп.");
		МассивСокращений.Добавить("остров.");
		МассивСокращений.Добавить("гск.");
		МассивСокращений.Добавить("линия.");
		МассивСокращений.Добавить("рзд.");
		МассивСокращений.Добавить("стр.");
		МассивСокращений.Добавить("аллея.");
		МассивСокращений.Добавить("казарма.");
		МассивСокращений.Добавить("ж/д_рзд.");
		МассивСокращений.Добавить("д.");
		МассивСокращений.Добавить("ж/д_казарм.");
		МассивСокращений.Добавить("ж/д_будка.");
		МассивСокращений.Добавить("высел.");
	КонецЕсли;
	
	Возврат МассивСокращений;
	
КонецФункции // СформироватьМассивСокращениеДляВладимирскойОблПоВиду()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// СОХРАНЯЕМЫЕ НАСТРОЙКИ

#Область РаботаСНастройками

&НаСервере
// Процедура восстановления настроек.
Процедура ВосстановитьНастройки()
	
	СтруктураПараметров = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("ВладимирскаяОбласть_ВыгрузкаВОСЗН", "ПараметрыВыгрузки");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		СтруктураПараметров.Свойство("ИмяФайлаЗагрузки",              ИмяФайлаЗагрузки);
		СтруктураПараметров.Свойство("КаталогВыгрузки",               КаталогВыгрузки);
		СтруктураПараметров.Свойство("ФайлЗагрузкиНаселенныхПунктов", ФайлЗагрузкиНаселенныхПунктов);
		СтруктураПараметров.Свойство("ФайлЗагрузкиУлиц",              ФайлЗагрузкиУлиц);
		СтруктураПараметров.Свойство("ФайлЗагрузкиУслуг",             ФайлЗагрузкиУслуг);
		СтруктураПараметров.Свойство("ВыводРеквизитаЛицевогоСчета",   Объект.ВыводРеквизитаЛицевогоСчета);
		
		врТаблицаУслугВОСЗН = Новый ТаблицаЗначений;
		врТаблицаУслугВБазе = Новый ТаблицаЗначений;
		врТаблицаНасПунктов = Новый ТаблицаЗначений;
		врТаблицаУлиц       = Новый ТаблицаЗначений;
		
		СтруктураПараметров.Свойство("ВладимирскаяОбласть_УслугиВОСЗН", врТаблицаУслугВОСЗН);
		Если НЕ врТаблицаУслугВОСЗН = Неопределено Тогда
			Объект.ВладимирскаяОбласть_УслугиВОСЗН.Загрузить(врТаблицаУслугВОСЗН);
		КонецЕсли;
		
		СтруктураПараметров.Свойство("ВладимирскаяОбласть_УслугиВБазе", врТаблицаУслугВБазе);
		Если НЕ врТаблицаУслугВБазе = Неопределено Тогда
			Объект.ВладимирскаяОбласть_УслугиВБазе.Загрузить(врТаблицаУслугВБазе);
		КонецЕсли;
		
		СтруктураПараметров.Свойство("ВладимирскаяОбласть_НастройкиНаселенныхПунктов", врТаблицаНасПунктов);
		Если НЕ врТаблицаНасПунктов = Неопределено Тогда
			Объект.ВладимирскаяОбласть_НастройкиНаселенныхПунктов.Загрузить(врТаблицаНасПунктов);
		КонецЕсли;
		
		СтруктураПараметров.Свойство("ВладимирскаяОбласть_НастройкиУлиц", врТаблицаУлиц);
		Если НЕ врТаблицаУлиц = Неопределено Тогда
			Объект.ВладимирскаяОбласть_НастройкиУлиц.Загрузить(врТаблицаУлиц);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура сохранения настроек.
Процедура СохранитьНастройки()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяФайлаЗагрузки",                               ИмяФайлаЗагрузки);
	СтруктураПараметров.Вставить("КаталогВыгрузки",                                КаталогВыгрузки);
	СтруктураПараметров.Вставить("ФайлЗагрузкиНаселенныхПунктов",                  ФайлЗагрузкиНаселенныхПунктов);
	СтруктураПараметров.Вставить("ФайлЗагрузкиУлиц",                               ФайлЗагрузкиУлиц);
	СтруктураПараметров.Вставить("ФайлЗагрузкиУслуг",                              ФайлЗагрузкиУслуг);
	СтруктураПараметров.Вставить("ВыводРеквизитаЛицевогоСчета",                    Объект.ВыводРеквизитаЛицевогоСчета);
	СтруктураПараметров.Вставить("ВладимирскаяОбласть_УслугиВОСЗН",                Объект.ВладимирскаяОбласть_УслугиВОСЗН.Выгрузить());
	СтруктураПараметров.Вставить("ВладимирскаяОбласть_УслугиВБазе",                Объект.ВладимирскаяОбласть_УслугиВБазе.Выгрузить());
	СтруктураПараметров.Вставить("ВладимирскаяОбласть_НастройкиНаселенныхПунктов", Объект.ВладимирскаяОбласть_НастройкиНаселенныхПунктов.Выгрузить());
	СтруктураПараметров.Вставить("ВладимирскаяОбласть_НастройкиУлиц",              Объект.ВладимирскаяОбласть_НастройкиУлиц.Выгрузить());
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("ВладимирскаяОбласть_ВыгрузкаВОСЗН", "ПараметрыВыгрузки", СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// РАБОТА С ВРЕМЕННЫМ ХРАНИЛИЩЕМ

#Область РаботаСВременнымХранилищем

&НаСервере
// Помещает настройки во временное хранилище.
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ФайлЗагрузкиНаселенныхПунктов",                  ФайлЗагрузкиНаселенныхПунктов);
	СтруктураНастроек.Вставить("ФайлЗагрузкиУлиц",                               ФайлЗагрузкиУлиц);
	СтруктураНастроек.Вставить("ФайлЗагрузкиУслуг",                              ФайлЗагрузкиУслуг);
	СтруктураНастроек.Вставить("ВыводРеквизитаЛицевогоСчета",                    Объект.ВыводРеквизитаЛицевогоСчета);
	СтруктураНастроек.Вставить("ВладимирскаяОбласть_УслугиВОСЗН",                Объект.ВладимирскаяОбласть_УслугиВОСЗН.Выгрузить());
	СтруктураНастроек.Вставить("ВладимирскаяОбласть_УслугиВБазе",                Объект.ВладимирскаяОбласть_УслугиВБазе.Выгрузить());
	СтруктураНастроек.Вставить("ВладимирскаяОбласть_НастройкиНаселенныхПунктов", Объект.ВладимирскаяОбласть_НастройкиНаселенныхПунктов.Выгрузить());
	СтруктураНастроек.Вставить("ВладимирскаяОбласть_НастройкиУлиц",              Объект.ВладимирскаяОбласть_НастройкиУлиц.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
// Получает настройки из временного хранилища.
Функция ПолучитьНастройкиИзХранилища(АдресНастроекВХранилище)
	
	СтруктураНастроек = ПолучитьИзВременногоХранилища(АдресНастроекВХранилище);
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		
		СтруктураНастроек.Свойство("ФайлЗагрузкиНаселенныхПунктов", ФайлЗагрузкиНаселенныхПунктов);
		СтруктураНастроек.Свойство("ФайлЗагрузкиУлиц",              ФайлЗагрузкиУлиц);
		СтруктураНастроек.Свойство("ФайлЗагрузкиУслуг",             ФайлЗагрузкиУслуг);
		СтруктураНастроек.Свойство("ВыводРеквизитаЛицевогоСчета",   Объект.ВыводРеквизитаЛицевогоСчета);
		
		Если СтруктураНастроек.Свойство("ВладимирскаяОбласть_УслугиВОСЗН") Тогда
			Объект.ВладимирскаяОбласть_УслугиВОСЗН.Загрузить(СтруктураНастроек.ВладимирскаяОбласть_УслугиВОСЗН);
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ВладимирскаяОбласть_УслугиВБазе") Тогда
			Объект.ВладимирскаяОбласть_УслугиВБазе.Загрузить(СтруктураНастроек.ВладимирскаяОбласть_УслугиВБазе);
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ВладимирскаяОбласть_НастройкиНаселенныхПунктов") Тогда
			Объект.ВладимирскаяОбласть_НастройкиНаселенныхПунктов.Загрузить(СтруктураНастроек.ВладимирскаяОбласть_НастройкиНаселенныхПунктов);
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ВладимирскаяОбласть_НастройкиУлиц") Тогда
			Объект.ВладимирскаяОбласть_НастройкиУлиц.Загрузить(СтруктураНастроек.ВладимирскаяОбласть_НастройкиУлиц);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ДАННЫХ

#Область ЗаполнениеДанных

&НаКлиенте
// Проверяет наличие всех необходимых данных для заполнения таблиц выгрузки.
//
Функция ПроверкаУсловийДляЗаполненияТаблиц()
	
	ТекстОшибки = "";
	
	Если НЕ ЗначениеЗаполнено(Объект.Период) Тогда
		ТекстОшибки = ТекстОшибки + "Не указан период выгрузки!";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не указана организация!", "Не указана организация!");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяФайлаЗагрузки) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не указан файл загрузки!", "Не указан файл загрузки!");
	КонецЕсли;
	
	Если Объект.ВладимирскаяОбласть_УслугиВБазе.Количество() = 0 Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не заполнена таблица соответствия услуг на форме настроек выгрузки!", "Не заполнена таблица соответствия услуг на форме настроек выгрузки!");
	КонецЕсли;
	
	Если Объект.ВладимирскаяОбласть_НастройкиНаселенныхПунктов.Количество() = 0 Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не заполнена таблица населенных пунктов на форме настроек выгрузки!", "Не заполнена таблица населенных пунктов на форме настроек выгрузки!");
	КонецЕсли;
	
	Если Объект.ВладимирскаяОбласть_НастройкиУлиц.Количество() = 0 Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не заполнена таблица улиц на форме настроек выгрузки!", "Не заполнена таблица улиц на форме настроек выгрузки!");
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции // ПроверкаУсловийДляЗаполненияТаблиц

&НаСервере
// Процедура загрузки данных из файла.
Процедура ЗагрузитьНаСервере(ПутьКФайлу)
	
	// Запись временных данных во временный файл.
	врДанныеФайла = ПолучитьИзВременногоХранилища(ПутьКФайлу);
	ВременныйФайл = ПолучитьИмяВременногоФайла("DBF");
	
	// Для чтения *.dbf формата урежем имя временного файла.
	ФайлДБФ = Новый Файл(ВременныйФайл);
	СтароеИмяФайла = ФайлДБФ.ИмяБезРасширения + ".DBF";
	НовоеИмяФайла  = Лев(ФайлДБФ.ИмяБезРасширения, 8) + ".DBF";
	ВременныйФайл  = СтрЗаменить(ФайлДБФ.ПолноеИмя, СтароеИмяФайла, НовоеИмяФайла);
	
	врДанныеФайла.Записать(ВременныйФайл);
	
	//загрузка
	ФайлДБФ = Новый XBase;
	ФайлДБФ.Кодировка = КодировкаXBase.OEM;
	ФайлДБФ.ОткрытьФайл(ВременныйФайл, , Истина);
	
	МассивСокрНасПункт = СформироватьМассивСокращениеДляВладимирскойОблПоВиду(4);
	МассивСокрУлицы    = СформироватьМассивСокращениеДляВладимирскойОблПоВиду(5);
	
	ТаблицаДанныхФайла = Объект.ВладимирскаяОбласть_ТаблицаДанных.Выгрузить();
	
	Если ФайлДБФ.Открыта() = Истина Тогда
		
		ТаблицаДанныхФайла.Очистить();
		
		Пока Не ФайлДБФ.ВКонце() Цикл
			
			НоваяСтрока = ТаблицаДанныхФайла.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ФайлДБФ);
			НоваяСтрока.L_SHET     = СокрЛП(ФайлДБФ.L_SHET);
			НоваяСтрока.L_SHET_ORG = СокрЛП(ФайлДБФ.L_SHET_ORG);
			НоваяСтрока.NSP        = СокрЛП(ФайлДБФ.NSP);
			НоваяСтрока.ULC        = СокрЛП(ФайлДБФ.ULC);
			НоваяСтрока.DOM        = СокрЛП(ФайлДБФ.DOM);
			НоваяСтрока.KOR        = СокрЛП(ФайлДБФ.KOR);
			Попытка
				НоваяСтрока.KVR    = Число(СокрЛП(ФайлДБФ.KVR));
			Исключение
			КонецПопытки;
			НоваяСтрока.PRIM       = СокрЛП(ФайлДБФ.PRIM);
			
			ФайлДБФ.Следующая();
			
		КонецЦикла;
		
	КонецЕсли;
	
	ФайлДБФ.ЗакрытьФайл();
	
	Объект.ВладимирскаяОбласть_ТаблицаДанных.Загрузить(ТаблицаДанныхФайла);
	
	ЗаполнитьНаСервере();
	
КонецПроцедуры

&НаСервере
// Процедура заполнения всех данных.
Процедура ЗаполнитьНаСервере()
	
	ТаблицаДанныхФайла = Объект.ВладимирскаяОбласть_ТаблицаДанных.Выгрузить();
	
	ОбработкаОбъект = ДанныеФормыВЗначение(Объект, Тип("ОбработкаОбъект.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты"));
	ОбработкаОбъект.СформироватьТаблицуДанныхВладимирскаяОбласть(ТаблицаДанныхФайла);
	ЗначениеВДанныеФормы(ОбработкаОбъект, Объект);
	
	Объект.ВладимирскаяОбласть_ТаблицаДанных.Загрузить(ТаблицаДанныхФайла);
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ВЫГРУЗКА ФАЙЛОВ

#Область ВыгрузкаФайлов

&НаКлиенте
// Предназначена для выгрузки данных из таблицы данных в dbf-файл.
//
Процедура ВыгрузитьДанныеВФайлВладимирскаяОбласть()
	
	Если Объект.ВладимирскаяОбласть_ТаблицаДанных.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В таблице выгружаемых данных отсутствуют данные для выгрузки в dbf-файлы.");
		Возврат;
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Началась выгрузка данных!");
	
	ФайлВыгрузки           = Новый XBase;
	ФайлВыгрузки.Кодировка = КодировкаXBase.OEM;
	ФайлВыгрузки.Поля.Добавить("L_ORG",      "N", "3");
	ФайлВыгрузки.Поля.Добавить("L_SHET",     "S", "20");
	ФайлВыгрузки.Поля.Добавить("L_SHET_ORG", "S", "20");
	ФайлВыгрузки.Поля.Добавить("NSP",        "S", "4");
	ФайлВыгрузки.Поля.Добавить("ULC",        "S", "4");
	ФайлВыгрузки.Поля.Добавить("DOM",        "S", "6");
	ФайлВыгрузки.Поля.Добавить("KOR",        "S", "3");
	ФайлВыгрузки.Поля.Добавить("KVR",        "S", "8");
	ФайлВыгрузки.Поля.Добавить("KODORG",     "N", "3");
	ФайлВыгрузки.Поля.Добавить("KODUSL",     "N", "3");
	ФайлВыгрузки.Поля.Добавить("VIDUSL",     "N", "6");
	ФайлВыгрузки.Поля.Добавить("USL_OPL",    "N", "9", "2");
	ФайлВыгрузки.Поля.Добавить("PRIZN_OBR",  "L", "1");
	ФайлВыгрузки.Поля.Добавить("S_TOTAL",    "N", "6", "2");
	ФайлВыгрузки.Поля.Добавить("GIL_FOND",   "N", "1");
	ФайлВыгрузки.Поля.Добавить("PRIVAT",     "L", "1");
	ФайлВыгрузки.Поля.Добавить("N_VSEGO",    "N", "2");
	ФайлВыгрузки.Поля.Добавить("N_FAKT",     "N", "2");
	ФайлВыгрузки.Поля.Добавить("ED_TAR",     "N", "12", "6");
	ФайлВыгрузки.Поля.Добавить("ED_IZM",     "N", "2");
	ФайлВыгрузки.Поля.Добавить("TAR",        "N", "8", "2");
	ФайлВыгрузки.Поля.Добавить("DATE_S",     "D");
	ФайлВыгрузки.Поля.Добавить("PRIM",       "S", "60");
	ФайлВыгрузки.Поля.Добавить("DOLG_S",     "N", "9", "2");
	
	КодОргИзФайла = Объект.ВладимирскаяОбласть_ТаблицаДанных[0].KODORG;
	
	ФайлВыгрузки.СоздатьФайл(КаталогВыгрузки + "\" + НовоеИмяФайла(КодОргИзФайла),);
	ФайлВыгрузки.АвтоСохранение = Истина;
	
	Для каждого ТекСтрока Из Объект.ВладимирскаяОбласть_ТаблицаДанных Цикл
		ФайлВыгрузки.Добавить();
		ЗаполнитьЗначенияСвойств(ФайлВыгрузки, ТекСтрока);
		ФайлВыгрузки.KVR = Строка(ТекСтрока.KVR);
	КонецЦикла;
	
	ФайлВыгрузки.ЗакрытьФайл();
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Выгрузка данных завершена!");
	
	#КонецЕсли
	
КонецПроцедуры // ВыгрузитьДанныеВФайлВладимирскаяОбласть()

&НаКлиенте
// Создает новое имя файла выгрузки.
//
// Возвращаемое значение (только для функций):
//  Строка - имя нового файла выгрузки.
//
Функция НовоеИмяФайла(КодОргИзФайла)
	
	ИмяФайла = "" + "F" + Строка(Формат(Объект.Период, "ДФ = yy")) + Строка(Формат(Объект.Период, "ДФ = MM"))  + Строка(КодОргИзФайла) + ".DBF";
	
	Возврат ИмяФайла;
	
КонецФункции // НовоеИмяФайла()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	ТекРабДата         = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	Объект.Период      = ТекРабДата;
	
	ВосстановитьНастройки();
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки();
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "КомандаНастройка".
Процедура КомандаНастройка(Команда)
	
	АдресНастроекВХранилище = ПоместитьНастройкиВХранилище();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаНастройкаЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты.Форма.ВладимирскаяОбласть_ФормаНастройки", Новый Структура("АдресНастроекВХранилище", АдресНастроекВХранилище), , , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата опроса команды "КомандаНастройка".
Процедура КомандаНастройкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		ПолучитьНастройкиИзХранилища(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаЗагрузитьИзФайла".
Процедура КомандаЗагрузитьИзФайла(Команда)
	
	ТекстОшибки = ПроверкаУсловийДляЗаполненияТаблиц();
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ФайлНаДиске = Новый Файл(ИмяФайлаЗагрузки);
	ФайлНаДиске.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ПроверкаСуществованияФайлаЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСуществованияФайлаЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	Если НЕ Существует Тогда
		ПоказатьПредупреждение(, "Файл не найден!");
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = "";
	Описание = Новый ОписаниеОповещения("ОбработатьРезультатПомещенияФайлаВХранилище", ЭтаФорма);
	НачатьПомещениеФайла(Описание, ПутьКФайлу, ИмяФайлаЗагрузки, Ложь);

КонецПроцедуры

&НаКлиенте
// Обработчик результата помещения файла в хранилище.
Процедура ОбработатьРезультатПомещенияФайлаВХранилище(Результат, Адрес, ВыбранноеИмяФайла, ДопПараметры) Экспорт
	
	Если Объект.ВладимирскаяОбласть_ТаблицаДанных.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаЗагрузитьИзФайлаЗавершение", ЭтотОбъект, Новый Структура("ПутьКФайлу", Адрес));
		
		ТекстВопроса = "Перед заполнением таблица выгрузки будет очищена. Заполнить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Началось заполнение таблицы выгрузки!");
		
		ЗагрузитьНаСервере(Адрес);
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Заполнение таблицы выгрузки завершено!");
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатПомещенияФайлаВХранилище()

&НаКлиенте
// Обработчик результата опроса команды "ЗагрузитьИзФайла".
Процедура КомандаЗагрузитьИзФайлаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Объект.ВладимирскаяОбласть_ТаблицаДанных.Очистить();
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Началось заполнение таблицы выгрузки!");
		
		ЗагрузитьНаСервере(ДополнительныеПараметры.ПутьКФайлу);
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Заполнение таблицы выгрузки завершено!");
		
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьВсеЗавершение()

&НаКлиенте
// Обработчик команды "КомандаВыгрузить".
Процедура КомандаВыгрузить(Команда)
	
	Если ПустаяСтрока(КаталогВыгрузки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указан каталог выгрузки!");
		Возврат;
	КонецЕсли;
	
	КаталогНаДиске = Новый Файл(КаталогВыгрузки);
	КаталогНаДиске.НачатьПроверкуСуществования(Новый ОписаниеОповещения("КомандаВыгрузитьЗавершение", ЭтотОбъект, Новый Структура("КаталогНаДиске", КаталогНаДиске)));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыгрузитьЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	КаталогНаДиске = ДополнительныеПараметры.КаталогНаДиске;
	
	
	Если НЕ Существует Тогда
		ПоказатьПредупреждение(Неопределено, "Каталог выгрузки не найден!");
		Возврат;
	КонецЕсли;
	
	КаталогНаДиске.НачатьПроверкуЭтоКаталог(Новый ОписаниеОповещения("ПроверкаНаКаталогЗавершение", ЭтотОбъект));

КонецПроцедуры

&НаКлиенте
Процедура ПроверкаНаКаталогЗавершение(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	
	Если НЕ ЭтоКаталог Тогда
		ПоказатьПредупреждение(Неопределено, "Каталог выгрузки не найден!");
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДанныеВФайлВладимирскаяОбласть();

КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

////////////////////////
// Диалог выбора файла

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Файл загрузки".
//
Процедура ИмяФайлаЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр                      = "Файл данных (*.dbf)|*.dbf";
	ДиалогВыбораФайла.Расширение                  = "dbf";
	ДиалогВыбораФайла.Заголовок                   = "Выберите файл загрузки";
	ДиалогВыбораФайла.ПолноеИмяФайла              = ИмяФайлаЗагрузки;
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ИмяФайлаЗагрузкиНачалоВыбораЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЗагрузкиНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ИмяФайлаЗагрузки = ВыбранныеФайлы[0];
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Файл загрузки".
//
Процедура ИмяФайлаЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УПЖКХ_ОбщегоНазначенияКлиент.ОткрытьСтраницуВБраузере("explorer " + ИмяФайлаЗагрузки);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Имя каталога".
//
Процедура ИмяКаталогаЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Заголовок                   = "Выбор каталога файлов";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	ДиалогВыбораФайла.Каталог                     = КаталогВыгрузки;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ИмяКаталогаЗагрузкиНачалоВыбораЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяКаталогаЗагрузкиНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		КаталогВыгрузки = ВыбранныеФайлы[0];
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Имя каталога".
//
Процедура ИмяКаталогаЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УПЖКХ_ОбщегоНазначенияКлиент.ОткрытьСтраницуВБраузере(КаталогВыгрузки);
	
КонецПроцедуры

////////////////////////
// Период

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПериодСтрокой".
Процедура ПериодСтрокойПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Модифицированность);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ПериодСтрокой".
Процедура ПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Регулирование" поля "ПериодСтрокой".
Процедура ПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Направление,
														Модифицированность);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "ПериодСтрокой".
Процедура ПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "ПериодСтрокой".
Процедура ПериодСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти
