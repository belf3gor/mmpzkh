
//////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура-обработчик события "ПриСозданииНаСервере" формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПризнакУдаления = Ложь;
	
	// Получаем настройки из хранилища.
	Если Параметры.Свойство("АдресНастроекВХранилище") И Не Параметры.АдресНастроекВХранилище = Неопределено Тогда
		
		СтруктураНастроек = ПолучитьИзВременногоХранилища(Параметры.АдресНастроекВХранилище);
		
		Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
			
			СтруктураНастроек.Свойство("РеквизитЛСДляИдентификации",                   РеквизитЛСДляИдентификации);
			СтруктураНастроек.Свойство("СпособИдентификацииЛС",                        СпособИдентификацииЛС);
			СтруктураНастроек.Свойство("ФорматЗагружаемогоВыгружаемогоФайлаЖКУ",       ФорматЗагружаемогоВыгружаемогоФайлаЖКУ);
			СтруктураНастроек.Свойство("ФорматЗагружаемогоВыгружаемогоФайлаКапремонт", ФорматЗагружаемогоВыгружаемогоФайлаКапремонт);
			СтруктураНастроек.Свойство("КодировкаФайлаDBFЖКУ",                         КодировкаФайлаDBFЖКУ);
			СтруктураНастроек.Свойство("КодировкаФайлаDBFКапремонт",                   КодировкаФайлаDBFКапремонт);
			СтруктураНастроек.Свойство("КодировкаФайлаDBFТКО",                         КодировкаФайлаDBFТКО);
			
			СтруктураНастроек.Свойство("КоличествоДнейСледующегоМесяцаВТеченииКоторыхМожноОплатитьНачисленияЗаМесяцВыгрузки", КоличествоДнейСледующегоМесяцаВТеченииКоторыхМожноОплатитьНачисленияЗаМесяцВыгрузки);
			
			Если СтруктураНастроек.Свойство("ИркутскаяОбласть_ЖКУ_ОСЗН") Тогда
				Объект.ИркутскаяОбласть_ЖКУ_ОСЗН.Загрузить(СтруктураНастроек.ИркутскаяОбласть_ЖКУ_ОСЗН);
			КонецЕсли;
			
			Если СтруктураНастроек.Свойство("ИркутскаяОбласть_ЖКУ_В_Базе") Тогда
				Объект.ИркутскаяОбласть_ЖКУ_В_Базе.Загрузить(СтруктураНастроек.ИркутскаяОбласть_ЖКУ_В_Базе);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Блокировка командной панели "КП_УслугиВБазе".
	Если Объект.ИркутскаяОбласть_ЖКУ_ОСЗН.Количество() = 0 Тогда
		Элементы.ТП_УслугаВБазе.Доступность = Ложь;
	Иначе
		Элементы.ТП_УслугаВБазе.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура-обработчик события "ПередЗакрытием" формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьЭлементовФормы();
	
КонецПроцедуры // ПриОткрытии()

//////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик события "ПриАктивизацииСтроки" табличного поля "Услуги в ОСЗН".
//
&НаКлиенте
Процедура ИркутскаяОбласть_ЖКУ_ОСЗНПриАктивизацииСтроки(Элемент)
	
	// При активации строки УслугаВОСЗН, загружаем соответствия в УслугаВБазе.
	ТП_УслугаВБазе.Очистить();
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		УникальноеНаименованиеУслуги = Элемент.ТекущиеДанные.УникальноеНаименованиеУслуги;
		ЗаполнитьТаблицуУслугНаСервере(УникальноеНаименованиеУслуги);
		УстановитьВидимостьКолонок(УникальноеНаименованиеУслуги);
	КонецЕсли;
	
КонецПроцедуры // ИркутскаяОбласть_ЖКУ_ОСЗНПриАктивизацииСтроки()

// Процедура - обработчик события "Очистка" табличного поля "Услуги в ОСЗН".
//
&НаКлиенте
Процедура ИркутскаяОбласть_ЖКУ_ОСЗННаименованиеУслугиДляПользователейОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ИркутскаяОбласть_ЖКУ_ОСЗННаименованиеУслугиДляПользователейОчистка()

// Процедура - обработчик события "ПередНачаломДобавления" табличного поля "Услуги в ОСЗН".
//
&НаКлиенте
Процедура ИркутскаяОбласть_ЖКУ_ОСЗНПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Набор услуг для выгрузки фиксированный, поэтому нельзя добавлять новые и удалять существующие.
	Отказ = Истина;
	
КонецПроцедуры // ИркутскаяОбласть_ЖКУ_ОСЗНПередНачаломДобавления()

// Процедура - обработчик события "ПередУдалением" табличного поля "Услуги в ОСЗН".
//
&НаКлиенте
Процедура ИркутскаяОбласть_ЖКУ_ОСЗНПередУдалением(Элемент, Отказ)
	
	// Набор услуг для выгрузки фиксированный, поэтому нельзя добавлять новые и удалять существующие.
	Отказ = Истина;
	
КонецПроцедуры // ИркутскаяОбласть_ЖКУ_ОСЗНПередУдалением()

// Процедура-обработчик нажатия на кнопку "Сохранить".
//
&НаКлиенте
Процедура Сохранить(Команда)
	
	Закрыть(ПоместитьНастройкиВХранилище());
	
КонецПроцедуры // Сохранить()

//////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура заполняет таблицу услуг на сервере.
//
&НаСервере
Процедура ЗаполнитьТаблицуУслугНаСервере(УникальноеНаименованиеУслуги)
	
	Отбор = Новый Структура;
	Отбор.Вставить("УникальноеНаименованиеУслуги", УникальноеНаименованиеУслуги);
	
	НайденныеСтроки = Объект.ИркутскаяОбласть_ЖКУ_В_Базе.Выгрузить(Отбор, "УслугаВБазе, ТипУслуги, УчитыватьПриРасчетеНорматива");
	
	Для Каждого ТекСтрока из НайденныеСтроки Цикл
		ЗаполнитьЗначенияСвойств(ТП_УслугаВБазе.Добавить(), ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблицуУслугНаСервере()

// Помещает настройки во временное хранилище.
//
&НаСервере
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ИркутскаяОбласть_ЖКУ_ОСЗН",                    Объект.ИркутскаяОбласть_ЖКУ_ОСЗН.Выгрузить());
	СтруктураНастроек.Вставить("ИркутскаяОбласть_ЖКУ_В_Базе",                  Объект.ИркутскаяОбласть_ЖКУ_В_Базе.Выгрузить());
	СтруктураНастроек.Вставить("РеквизитЛСДляИдентификации",                   РеквизитЛСДляИдентификации);
	СтруктураНастроек.Вставить("СпособИдентификацииЛС",                        СпособИдентификацииЛС);
	СтруктураНастроек.Вставить("ФорматЗагружаемогоВыгружаемогоФайлаЖКУ",       ФорматЗагружаемогоВыгружаемогоФайлаЖКУ);
	СтруктураНастроек.Вставить("ФорматЗагружаемогоВыгружаемогоФайлаКапремонт", ФорматЗагружаемогоВыгружаемогоФайлаКапремонт);
	СтруктураНастроек.Вставить("КодировкаФайлаDBFЖКУ",                         КодировкаФайлаDBFЖКУ);
	СтруктураНастроек.Вставить("КодировкаФайлаDBFКапремонт",                   КодировкаФайлаDBFКапремонт);
	СтруктураНастроек.Свойство("КодировкаФайлаDBFТКО",                         КодировкаФайлаDBFТКО);
	
	СтруктураНастроек.Вставить("КоличествоДнейСледующегоМесяцаВТеченииКоторыхМожноОплатитьНачисленияЗаМесяцВыгрузки", КоличествоДнейСледующегоМесяцаВТеченииКоторыхМожноОплатитьНачисленияЗаМесяцВыгрузки);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции // ПоместитьНастройкиВХранилище()

// Процедура-обработчик события "ПриИзменении" переключателя "СпособИдентификацииЛСВБазе".
//
&НаКлиенте
Процедура СпособИдентификацииЛСВБазеПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементовФормы();
	
КонецПроцедуры // СпособИдентификацииЛСВБазеПриИзменении()

// Процедура-обработчик события "ПриИзменении" переключателя "ФорматЗагружаемогоФайла".
//
&НаКлиенте
Процедура ФорматЗагружаемогоФайлаПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементовФормы();
	
КонецПроцедуры // ФорматЗагружаемогоФайлаПриИзменении()

// Предназначена для управления видимостью элементов формы.
//
&НаКлиенте
Процедура УстановитьВидимостьЭлементовФормы()
	
	// Поле для редактирования реквизита л/с для идентификации доступно только для способа "по номеру/идентификатору лицевого счета".
	Элементы.РеквизитЛСДляИдентификации.Доступность = СпособИдентификацииЛС = 1;
	
	// Поле для редактирования кодировки файла выгрузки доступно только для формата "DBF".
	Элементы.КодировкаФайлаDBF.Доступность          = ФорматЗагружаемогоВыгружаемогоФайлаЖКУ = 0;
	Элементы.КодировкаФайлаDBFКапремонт.Доступность = ФорматЗагружаемогоВыгружаемогоФайлаКапремонт = 0;
	
КонецПроцедуры // УстановитьВидимостьЭлементовФормы()

// Процедура-обработчик события "ПередНачаломДобавления" таблицы "ТП_УслугаВБазе".
//
&НаКлиенте
Процедура ТП_УслугаВБазеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Устанавливаем запрет на добавление строк копированием.
	Если Копирование Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Добавление услуг копированием недопустимо!");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ТП_УслугаВБазеПередНачаломДобавления()

// Процедура-обработчик события "ПередУдалением" таблицы "ТП_УслугаВБазе".
//
&НаКлиенте
Процедура ТП_УслугаВБазеПередУдалением(Элемент, Отказ)
	
	Если ПризнакУдаления Тогда
		Отказ = Истина;
		ПризнакУдаления = Ложь;
	Иначе
		// При удалении строки удаляем соответствующие записи в ИркутскаяОбласть_ЖКУ_В_Базе.
		УслугаВБазе = Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе;
		ТипУслуги   = Элементы.ТП_УслугаВБазе.ТекущиеДанные.ТипУслуги;
		
		УникальноеНаименованиеУслуги       = Элементы.ИркутскаяОбласть_ЖКУ_ОСЗН.ТекущиеДанные.УникальноеНаименованиеУслуги;
		НаименованиеУслугиДляПользователей = Элементы.ИркутскаяОбласть_ЖКУ_ОСЗН.ТекущиеДанные.НаименованиеУслугиДляПользователей;
		
		Отбор = Новый Структура;
		Отбор.Вставить("УслугаВБазе",                        УслугаВБазе);
		Отбор.Вставить("ТипУслуги",                          ТипУслуги);
		Отбор.Вставить("УникальноеНаименованиеУслуги",       УникальноеНаименованиеУслуги);
		Отбор.Вставить("НаименованиеУслугиДляПользователей", НаименованиеУслугиДляПользователей);
		
		СтрокиУдаления = Объект.ИркутскаяОбласть_ЖКУ_В_Базе.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
			Объект.ИркутскаяОбласть_ЖКУ_В_Базе.Удалить(СтрокаУдаления);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ТП_УслугаВБазеПередУдалением()

// Процедура-обработчик события "ПриНачалеРедактирования" таблицы "ТП_УслугаВБазе".
//
&НаКлиенте
Процедура ТП_УслугаВБазеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		// При добавлении новой услуги из базы автоматически установим тип "Индивидуальная и общедомовая".
		Элементы.ТП_УслугаВБазе.ТекущиеДанные.ТипУслуги                    = "Индивидуальная и общедомовая";
		Элементы.ТП_УслугаВБазе.ТекущиеДанные.УчитыватьПриРасчетеНорматива = Истина;
	Иначе
		// Запоминаем предыдущее значение перезаписываемой строки.
		ПредыдущаяУслуга                                = Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе;
		ПредыдущийТипУслуги                             = Элементы.ТП_УслугаВБазе.ТекущиеДанные.ТипУслуги;
		ПредыдущийПризнакУчетаУслугиПриРасчетеНорматива = Элементы.ТП_УслугаВБазе.ТекущиеДанные.УчитыватьПриРасчетеНорматива;
	КонецЕсли;
	
КонецПроцедуры // ТП_УслугаВБазеПриНачалеРедактирования()

// Процедура-обработчик события "ПередОкончаниемРедактирования" таблицы "ТП_УслугаВБазе".
//
&НаКлиенте
Процедура ТП_УслугаВБазеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ ОтменаРедактирования Тогда
		
		УслугаВБазе = Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе;
		ТипУслуги   = Элементы.ТП_УслугаВБазе.ТекущиеДанные.ТипУслуги;
		
		Если УслугаВБазе = ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка") Тогда
			// 1. Добавил пустую услугу в таблицу. Нужно строку удалить и отказ = Истина!
			Если НоваяСтрока Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Добавление строк незаполненными услугами в базе недопустимо!");
			//2. Очистка существующей услуги. Нужно строку удалить и Отказ = Истина.
			Иначе
				Если НЕ ПредыдущаяУслуга = ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка") Тогда
					
					УникальноеНаименованиеУслуги = Элементы.ИркутскаяОбласть_ЖКУ_ОСЗН.ТекущиеДанные.УникальноеНаименованиеУслуги;
					
					Отбор = Новый Структура;
					Отбор.Вставить("УникальноеНаименованиеУслуги", УникальноеНаименованиеУслуги);
					Отбор.Вставить("УслугаВБазе",                  ПредыдущаяУслуга);
					
					СтрокиУдаления = Объект.ИркутскаяОбласть_ЖКУ_В_Базе.НайтиСтроки(Отбор);
					
					Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
						Объект.ИркутскаяОбласть_ЖКУ_В_Базе.Удалить(СтрокаУдаления);
					КонецЦикла;
					
				КонецЕсли;
			КонецЕсли;
			Отказ = Истина;
		Иначе
			
			Если НЕ ПредыдущаяУслуга = УслугаВБазе Тогда
				
				Отбор = Новый Структура;
				Отбор.Вставить("УслугаВБазе", УслугаВБазе);
				
				НайденныеСтроки = Объект.ИркутскаяОбласть_ЖКУ_В_Базе.НайтиСтроки(Отбор);
				Если НайденныеСтроки.Количество() > 0 Тогда
					// Проверяем условие, чтобы одна и та же услуга в базе не была установлена 2-ум услугам в ОСЗН.
					Если НайденныеСтроки[0].УникальноеНаименованиеУслуги = Элементы.ИркутскаяОбласть_ЖКУ_ОСЗН.ТекущиеДанные.УникальноеНаименованиеУслуги Тогда
						УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("	Дублирование одной и той же услуги в базе в рамках одной услуги в ОСЗН недопустимо!");
					Иначе
						УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("	Услуга из базы """ + НайденныеСтроки[0].УслугаВБазе + """ уже установлена в соответствие для услуги из ОСЗН """ + НайденныеСтроки[0].НаименованиеУслугиДляПользователей +"""!");
						УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("	Установка одной услуги в базе нескольким услугам в ОСЗН недопустимо!");
					КонецЕсли;
					Отказ = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ТП_УслугаВБазеПередОкончаниемРедактирования()

// Процедура-обработчик события "ПриОкончанииРедактирования" таблицы "ТП_УслугаВБазе".
//
&НаКлиенте
Процедура ТП_УслугаВБазеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования И НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		
		// Добавляем запись в ИркутскаяОбласть_ЖКУ_В_Базе.
		УслугаВБазе                                     = Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе;
		ТипУслуги                                       = Элементы.ТП_УслугаВБазе.ТекущиеДанные.ТипУслуги;
		ПризнакУчетаУслугиПриРасчетеНорматива           = Элементы.ТП_УслугаВБазе.ТекущиеДанные.УчитыватьПриРасчетеНорматива;
		
		УникальноеНаименованиеУслуги       = Элементы.ИркутскаяОбласть_ЖКУ_ОСЗН.ТекущиеДанные.УникальноеНаименованиеУслуги;
		НаименованиеУслугиДляПользователей = Элементы.ИркутскаяОбласть_ЖКУ_ОСЗН.ТекущиеДанные.НаименованиеУслугиДляПользователей;
		
		Если НоваяСтрока Тогда
			НоваяСтрокаСоответствия                                    = Объект.ИркутскаяОбласть_ЖКУ_В_Базе.Добавить();
			НоваяСтрокаСоответствия.УслугаВБазе                        = УслугаВБазе;
			НоваяСтрокаСоответствия.УникальноеНаименованиеУслуги       = УникальноеНаименованиеУслуги;
			НоваяСтрокаСоответствия.НаименованиеУслугиДляПользователей = НаименованиеУслугиДляПользователей;
			НоваяСтрокаСоответствия.ТипУслуги                          = ТипУслуги;
		Иначе
			Если НЕ ПредыдущаяУслуга = УслугаВБазе
			 ИЛИ НЕ ПредыдущийТипУслуги = ТипУслуги
			 ИЛИ НЕ ПредыдущийПризнакУчетаУслугиПриРасчетеНорматива = ПризнакУчетаУслугиПриРасчетеНорматива Тогда
			 
				Отбор = Новый Структура;
				Отбор.Вставить("УникальноеНаименованиеУслуги", УникальноеНаименованиеУслуги);
				Отбор.Вставить("УслугаВБазе",                  ПредыдущаяУслуга);
				Отбор.Вставить("ТипУслуги",                    ПредыдущийТипУслуги);
				Отбор.Вставить("УчитыватьПриРасчетеНорматива", ПредыдущийПризнакУчетаУслугиПриРасчетеНорматива);
				
				НайденнаяСтрока = Объект.ИркутскаяОбласть_ЖКУ_В_Базе.НайтиСтроки(Отбор);
				Если НайденнаяСтрока.Количество() = 1 Тогда
					НайденнаяСтрока[0].УслугаВБазе                  = УслугаВБазе;
					НайденнаяСтрока[0].ТипУслуги                    = ТипУслуги;
					НайденнаяСтрока[0].УчитыватьПриРасчетеНорматива = ПризнакУчетаУслугиПриРасчетеНорматива;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ТП_УслугаВБазеПриОкончанииРедактирования()

// Предназначена для установки видимости колонок в таблице "ТП_УслугаВБазе" для различных услуг в ОСЗН.
//
&НаКлиенте
Процедура УстановитьВидимостьКолонок(УникальноеНаименованиеУслуги)
	
	Если УникальноеНаименованиеУслуги = "ЭлектрическаяЭнергия"
	 ИЛИ УникальноеНаименованиеУслуги = "Газоснабжение"
	 ИЛИ УникальноеНаименованиеУслуги = "ГазоснабжениеБаллон"
	 ИЛИ УникальноеНаименованиеУслуги = "ХолодноеВодоснабжение"
	 ИЛИ УникальноеНаименованиеУслуги = "ОтведениеСточныхВод"
	 ИЛИ УникальноеНаименованиеУслуги = "ГорячееВодоснабжениеКубМетр"
	 ИЛИ УникальноеНаименованиеУслуги = "ГорячееВодоснабжениеГКал"
	 ИЛИ УникальноеНаименованиеУслуги = "Отопление"
	 ИЛИ УникальноеНаименованиеУслуги = "ТвердыеКоммунальныеОтходы" Тогда
		Элементы.ТП_УслугаВБазеПолеУчитыватьПриРасчетеНорматива.Видимость = Истина;
	Иначе
		Элементы.ТП_УслугаВБазеПолеУчитыватьПриРасчетеНорматива.Видимость = Ложь;
	КонецЕсли;
	
	Если УникальноеНаименованиеУслуги = "ТвердыеКоммунальныеОтходы" Тогда
		Элементы.ТП_УслугаВБазеТипУслуги.Видимость = Ложь;
	Иначе
		Элементы.ТП_УслугаВБазеТипУслуги.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьКолонок()
