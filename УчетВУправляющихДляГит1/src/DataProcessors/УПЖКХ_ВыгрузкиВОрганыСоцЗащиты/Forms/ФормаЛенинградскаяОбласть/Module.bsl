
//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область Форма

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	ОбновитьПериод();
	
	Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
	ВосстановитьНастройкиНаСервере();
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьНастройкиНаСервере();
	
КонецПроцедуры // ПриЗакрытии()

////////////////////////
// Сохраняемые настройки

&НаСервере
// Процедура восстановления настроек.
Процедура ВосстановитьНастройкиНаСервере()
	
	СтруктураНастроек = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("ВыгрузкаЛенинградскаяОбласть", "ПараметрыВыгрузки");
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		
		// Каталог загрузки.
		врИмяКаталогаЗагрузки = Неопределено;
		Если СтруктураНастроек.Свойство("ИмяКаталогаЗагрузки", врИмяКаталогаЗагрузки) Тогда
			Объект.ИмяКаталогаЗагрузки = врИмяКаталогаЗагрузки;
		КонецЕсли;
		
		// Каталог выгрузки.
		врИмяКаталогаВыгрузки = Неопределено;
		Если СтруктураНастроек.Свойство("ИмяКаталогаВыгрузки", врИмяКаталогаВыгрузки) Тогда
			Объект.ИмяКаталогаВыгрузки = врИмяКаталогаВыгрузки;
		КонецЕсли;
		
		// Признак вывода кода-нименования-идентификатора лицевого счета.
		врИдентификацияЛС = Неопределено;
		Если СтруктураНастроек.Свойство("ИдентификацияЛС", врИдентификацияЛС) Тогда
			Объект.ИдентификацияЛС = врИдентификацияЛС;
		Иначе
			Объект.ИдентификацияЛС = 0;
		КонецЕсли;
		
		// Таблица настроек.
		врТаблицаНастроек = Неопределено;
		Если СтруктураНастроек.Свойство("ЛенинградскаяОбласть_ТаблицаНастроек", врТаблицаНастроек) Тогда
			Если ТипЗнч(врТаблицаНастроек) = Тип("ТаблицаЗначений") Тогда
				Объект.ЛенинградскаяОбласть_ТаблицаНастроек.Загрузить(врТаблицаНастроек);
			КонецЕсли;
		КонецЕсли;
		
		// Таблица услуг в базе.
		врТаблицаУслугВБазе = Неопределено;
		Если СтруктураНастроек.Свойство("ЛенинградскаяОбласть_УслугиВБазе", врТаблицаУслугВБазе) Тогда
			Если ТипЗнч(врТаблицаУслугВБазе) = Тип("ТаблицаЗначений") Тогда
				Объект.ЛенинградскаяОбласть_УслугиВБазе.Загрузить(врТаблицаУслугВБазе);
			КонецЕсли;
		КонецЕсли;
		
		// Таблица льготных категорий ОСЗН.
		врЛьготныеКатегорииОСЗН = Неопределено;
		Если СтруктураНастроек.Свойство("ЛенинградскаяОбласть_ЛьготныеКатегорииОСЗН", врЛьготныеКатегорииОСЗН) Тогда
			Если ТипЗнч(врЛьготныеКатегорииОСЗН) = Тип("ТаблицаЗначений") Тогда
				Объект.ЛенинградскаяОбласть_ЛьготныеКатегорииОСЗН.Загрузить(врЛьготныеКатегорииОСЗН);
			КонецЕсли;
		КонецЕсли;
		
		// Таблица настроек льгот.
		врЛьготыВБазе = Неопределено;
		Если СтруктураНастроек.Свойство("ЛенинградскаяОбласть_ЛьготыВБазе", врЛьготыВБазе) Тогда
			Если ТипЗнч(врЛьготыВБазе) = Тип("ТаблицаЗначений") Тогда
				Объект.ЛенинградскаяОбласть_ЛьготыВБазе.Загрузить(врЛьготыВБазе);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		// По умолчанию выводим код лицевого счета.
		Объект.ИдентификацияЛС = 0;
		
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьНастройкиНаСервере()

&НаСервере
// Процедура сохранения настроек.
Процедура СохранитьНастройкиНаСервере()
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("ИмяКаталогаЗагрузки", Объект.ИмяКаталогаЗагрузки);
	СтруктураНастроек.Вставить("ИмяКаталогаВыгрузки", Объект.ИмяКаталогаВыгрузки);
	СтруктураНастроек.Вставить("ИдентификацияЛС",     Объект.ИдентификацияЛС);
	
	СтруктураНастроек.Вставить("ЛенинградскаяОбласть_ТаблицаНастроек",       Объект.ЛенинградскаяОбласть_ТаблицаНастроек.Выгрузить());
	СтруктураНастроек.Вставить("ЛенинградскаяОбласть_УслугиВБазе",           Объект.ЛенинградскаяОбласть_УслугиВБазе.Выгрузить());
	СтруктураНастроек.Вставить("ЛенинградскаяОбласть_ЛьготныеКатегорииОСЗН", Объект.ЛенинградскаяОбласть_ЛьготныеКатегорииОСЗН.Выгрузить());
	СтруктураНастроек.Вставить("ЛенинградскаяОбласть_ЛьготыВБазе",           Объект.ЛенинградскаяОбласть_ЛьготыВБазе.Выгрузить());
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("ВыгрузкаЛенинградскаяОбласть", "ПараметрыВыгрузки", СтруктураНастроек);
	
КонецПроцедуры // СохранитьНастройкиНаСервере()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ПериодСтрокой

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Модифицированность);
	
КонецПроцедуры // ПериодСтрокойПриИзменении()

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры // ПериодСтрокойНачалоВыбора()

&НаКлиенте
// Обработчик события "Регулирование" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Направление, Модифицированность);
	
КонецПроцедуры // ПериодСтрокойРегулирование()

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодСтрокойАвтоПодбор()

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодСтрокойОкончаниеВводаТекста()

&НаКлиенте
// Изменяет период на форме выгрузки.
//
// Параметры:
//  Период - Дата - устанавливаемый период.
//
Процедура ОбновитьПериод(Период = Неопределено)
	
	Объект.Период = ?(Период = Неопределено, УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату(), КонецМесяца(Период));
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры // ОбновитьПериод()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область Настройка

////////////////////////
// Команда Настройка

&НаКлиенте
// Обработчик команды "КомандаНастройка".
Процедура КомандаНастройка(Команда)
	
	АдресНастроекВХранилище = ПоместитьНастройкиВХранилище();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаНастройкаЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты.Форма.ЛенинградскаяОбласть_ФормаНастройки", Новый Структура("АдресНастроекВХранилище", АдресНастроекВХранилище), ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры // КомандаНастройка()

&НаКлиенте
// Обработчик результата опроса команды "КомандаНастройка".
Процедура КомандаНастройкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		ПолучитьНастройкиИзХранилища(Результат);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////
// Работа с временным хранилищем

&НаСервере
// Помещает данные во временное хранилище для передачи их в форму настройки.
//
// Возвращаемое значение:
//  Строка - адрес настроек в хранилище.
//
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("ЛенинградскаяОбласть_ТаблицаНастроек",       Объект.ЛенинградскаяОбласть_ТаблицаНастроек.Выгрузить());
	СтруктураНастроек.Вставить("ЛенинградскаяОбласть_УслугиВБазе",           Объект.ЛенинградскаяОбласть_УслугиВБазе.Выгрузить());
	СтруктураНастроек.Вставить("ЛенинградскаяОбласть_ЛьготныеКатегорииОСЗН", Объект.ЛенинградскаяОбласть_ЛьготныеКатегорииОСЗН.Выгрузить());
	СтруктураНастроек.Вставить("ЛенинградскаяОбласть_ЛьготыВБазе",           Объект.ЛенинградскаяОбласть_ЛьготыВБазе.Выгрузить());
	СтруктураНастроек.Вставить("ИдентификацияЛС",                            Объект.ИдентификацияЛС);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции // ПоместитьДанныеВХранилище()

&НаСервере
// Получает настройки из временного хранилища.
Функция ПолучитьНастройкиИзХранилища(АдресНастроекВХранилище)
	
	СтруктураНастроек = ПолучитьИзВременногоХранилища(АдресНастроекВХранилище);
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		
		// Таблица настроек.
		врТаблицаНастроек = Неопределено;
		Если СтруктураНастроек.Свойство("ЛенинградскаяОбласть_ТаблицаНастроек", врТаблицаНастроек) Тогда
			Если ТипЗнч(врТаблицаНастроек) = Тип("ТаблицаЗначений") Тогда
				Объект.ЛенинградскаяОбласть_ТаблицаНастроек.Загрузить(врТаблицаНастроек);
			КонецЕсли;
		КонецЕсли;
		
		// Таблица услуг в базе.
		врТаблицаУслугВБазе = Неопределено;
		Если СтруктураНастроек.Свойство("ЛенинградскаяОбласть_УслугиВБазе", врТаблицаУслугВБазе) Тогда
			Если ТипЗнч(врТаблицаУслугВБазе) = Тип("ТаблицаЗначений") Тогда
				Объект.ЛенинградскаяОбласть_УслугиВБазе.Загрузить(врТаблицаУслугВБазе);
			КонецЕсли;
		КонецЕсли;
		
		// Таблица льготных категорий ОСЗН.
		врЛьготныеКатегорииОСЗН = Неопределено;
		Если СтруктураНастроек.Свойство("ЛенинградскаяОбласть_ЛьготныеКатегорииОСЗН", врЛьготныеКатегорииОСЗН) Тогда
			Если ТипЗнч(врЛьготныеКатегорииОСЗН) = Тип("ТаблицаЗначений") Тогда
				Объект.ЛенинградскаяОбласть_ЛьготныеКатегорииОСЗН.Загрузить(врЛьготныеКатегорииОСЗН);
			КонецЕсли;
		КонецЕсли;
		
		// Таблица настроек льгот.
		врЛьготыВБазе = Неопределено;
		Если СтруктураНастроек.Свойство("ЛенинградскаяОбласть_ЛьготыВБазе", врЛьготыВБазе) Тогда
			Если ТипЗнч(врЛьготыВБазе) = Тип("ТаблицаЗначений") Тогда
				Объект.ЛенинградскаяОбласть_ЛьготыВБазе.Загрузить(врЛьготыВБазе);
			КонецЕсли;
		КонецЕсли;
		
		// Признак вывода кода-нименования-идентификатора лицевого счета.
		СтруктураНастроек.Свойство("ИдентификацияЛС", Объект.ИдентификацияЛС);
		
	КонецЕсли;
	
КонецФункции // ПолучитьНастройкиИзХранилища()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ГРУППЫ ИДЕНТИФИКАЦИЯ ДАННЫХ

#Область КаталогЗагрузки

////////////////////////
// Каталог загрузки

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ИмяКаталогаЗагрузки".
Процедура ИмяКаталогаЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла                             = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Заголовок                   = "Выбор каталога загрузки";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	ДиалогВыбораФайла.Каталог                     = Объект.ИмяКаталогаЗагрузки;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ИмяКаталогаЗагрузкиНачалоВыбораЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата обработчика события "НачалоВыбора" поля "ИмяКаталогаЗагрузки"
Процедура ИмяКаталогаЗагрузкиНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		Объект.ИмяКаталогаЗагрузки = ВыбранныеФайлы[0];
	КонецЕсли;
	
КонецПроцедуры // ИмяКаталогаЗагрузкиНачалоВыбора()

&НаКлиенте
// Обработчик события "Открытие" поля "ИмяКаталогаЗагрузки".
Процедура ИмяКаталогаЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НачатьЗапускПриложения(Новый ОписаниеОповещения("ИмяКаталогаЗагрузкиОткрытиеЗавершение", ЭтотОбъект), Объект.ИмяКаталогаЗагрузки);
	
КонецПроцедуры

&НаКлиенте
// Обработчик заверешения обработчика события "Открытие" поля "ИмяКаталогаЗагрузки".
Процедура ИмяКаталогаЗагрузкиОткрытиеЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры // ИмяКаталогаЗагрузкиОткрытие()

#КонецОбласти

#Область ЗагрузкаИдентификация

////////////////////////
// Загрузка данных из каталога для идентификации.

&НаКлиенте
// Обработчик команды "КомандаЗагрузитьКаталогИдентификация".
//
Процедура КомандаЗагрузитьКаталогИдентификация(Команда)
	
	// Проверяем каталог на существование.
	Каталог = Новый Файл(Объект.ИмяКаталогаЗагрузки);
	Каталог.НачатьПроверкуСуществования(Новый ОписаниеОповещения("КомандаЗагрузитьКаталогИдентификацияКаталогСуществует", ЭтотОбъект,
																 Новый Структура("Каталог", Каталог)));
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата команды "ЗагрузитьКаталогИдентификация".
//
Процедура КомандаЗагрузитьКаталогИдентификацияКаталогСуществует(Существует, ДополнительныеПараметры) Экспорт
	
	Если Существует Тогда
		Каталог = ДополнительныеПараметры.Каталог;
		Каталог.НачатьПроверкуЭтоКаталог(Новый ОписаниеОповещения("КомандаЗагрузитьКаталогИдентификацияЭтоКаталог", ЭтотОбъект));
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Невозможно прочитать данные из указанного каталога!");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата команды "ЗагрузитьКаталогИдентификация".
//
Процедура КомандаЗагрузитьКаталогИдентификацияЭтоКаталог(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Если Не ЭтоКаталог Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Невозможно прочитать данные из указанного каталога!");
		Возврат;
	КонецЕсли;
	
	Если Объект.ЛенинградскаяОбласть_ИдентификацияДанных.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаЗагрузитьКаталогИдентификацияВопрос", ЭтотОбъект);
		
		ТекстВопроса = "Перед загрузкой таблица идентифицированных данных будет очищена. Продолжить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		
	Иначе
		Объект.ЛенинградскаяОбласть_ИдентификацияДанных.Очистить();
		КомандаЗагрузитьКаталогИдентификацияПродолжение();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Обработчик результата опроса команды "КомандаЗагрузитьКаталогИдентификация".
//
Процедура КомандаЗагрузитьКаталогИдентификацияВопрос(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Объект.ЛенинградскаяОбласть_ИдентификацияДанных.Очистить();
		
		КомандаЗагрузитьКаталогИдентификацияПродолжение();
		
	КонецЕсли;
	
КонецПроцедуры // КомандаЗагрузитьКаталогИдентификацияВопрос()

&НаКлиенте
// Чтение каталога.
//
Процедура КомандаЗагрузитьКаталогИдентификацияПродолжение()
	
	ПрочитатьКаталогИПоместитьНайденныеФайлыВоВременноеХранилище();
	
КонецПроцедуры // КомандаЗагрузитьКаталогИдентификацияПродолжение()

&НаКлиенте
// Чтение каталога, пойск файлов по маске /*MMyy.dbf/ и помещение их во временное хранилище.
//
Процедура ПрочитатьКаталогИПоместитьНайденныеФайлыВоВременноеХранилище()
	
	// Выполняем чтение каталога.
	МаскаПоискаФайлов = "*" + Формат(Объект.Период, "ДФ=MMyy") + "*.dbf";
	
	НачатьПоискФайлов(Новый ОписаниеОповещения("ПрочитатьКаталогИПоместитьНайденныеФайлыВоВременноеХранилищеЗавершение", ЭтотОбъект),
											   Объект.ИмяКаталогаЗагрузки, МаскаПоискаФайлов);
	
КонецПроцедуры

&НаКлиенте
// Обработчик заверешения процедуры "ПрочитатьКаталогИПоместитьНайденныеФайлыВоВременноеХранилище".
Процедура ПрочитатьКаталогИПоместитьНайденныеФайлыВоВременноеХранилищеЗавершение(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	// Массив файлов, помещаемых во временное хранилище для последующего заполнения на сервере.
	ПомещаемыеФайлы = Новый Массив;
	
	Для Каждого Файл Из НайденныеФайлы Цикл
		ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(Файл.ПолноеИмя);
		ПомещаемыеФайлы.Добавить(ОписаниеФайла);
	КонецЦикла;
	
	Если ПомещаемыеФайлы.Количество() > 0 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьПомещениеФайлов", ЭтотОбъект, );
		НачатьПомещениеФайлов(ОписаниеОповещения, ПомещаемыеФайлы, , Ложь, УникальныйИдентификатор);
	КонецЕсли;

КонецПроцедуры // КомандаЗагрузитьКаталогИдентификацияПродолжение()

//////////////////////
// Работа с файлами на сервере

&НаКлиенте
// Обработчик завершения помещения файлов во временное хранилище.
// В случае удачной передачи файлов на сервер выполняется чтение данных из файлов.
//
Процедура ОбработатьПомещениеФайлов(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	// При удачном помещении выполняем загрузку уже на сервере.
	Если ПомещенныеФайлы <> Неопределено Тогда
		
		ПрочитатьФайлыНаСервере(ПомещенныеФайлы);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьПомещениеФайлов()

&НаСервере
// Производит выгрузку помещенных файлов во временный каталог на сервере и загрузку данных из них
// в таблицу для идентификации и структуру таблиц, соответствующих этим файлам.
//
// Параметры:
//  ПомещенныеФайлы - Массив - массив передаваемых с клиента файлов, помещенных во временное хранилище.
//
Процедура ПрочитатьФайлыНаСервере(ПомещенныеФайлы)
	
	КаталогНаСервере = ВыгрузитьМассивПомещенныхФайловВоВременныйКаталогНаСервере(ПомещенныеФайлы);
	
	МассивНайденныхФайлов = НайтиФайлы(КаталогНаСервере, "*.dbf");
	ЗагрузитьДанныеИзФайловНаСервере(МассивНайденныхФайлов);
	
	УдалитьФайлы(КаталогНаСервере);
	
КонецПроцедуры // ПрочитатьФайлыНаСервере()

&НаСервереБезКонтекста
// Производит выгрузку передаваемых с клиента файлов во временный каклог на сервере.
//
// Параметры:
//  ПомещенныеФайлы - Массив - массив передаваемых с клиента файлов, помещенных во временное хранилище.
//
Функция ВыгрузитьМассивПомещенныхФайловВоВременныйКаталогНаСервере(ПомещенныеФайлы)
	
	// Временный каталог выгрузки на сервере.
	КаталогВыгрузки = КаталогВременныхФайлов() + "Загрузка\";
	СоздатьКаталог(КаталогВыгрузки);
	
	Для Каждого ПомещенныйФайл Из ПомещенныеФайлы Цикл
		
		ИмяФайла = ПомещенныйФайл.Имя;
		Пока Найти(ИмяФайла, "\") <> 0 Цикл
			ИмяФайла = Прав(ИмяФайла, СтрДлина(ИмяФайла) - Найти(ИмяФайла, "\"));
		КонецЦикла;
		
		ПолноеИмяФайла = КаталогВыгрузки + ИмяФайла;
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ПомещенныйФайл.Хранение);
		ДвоичныеДанные.Записать(ПолноеИмяФайла);
		
	КонецЦикла;
	
	Возврат КаталогВыгрузки;
	
КонецФункции // ВыгрузитьМассивПомещенныхФайловВоВременныйКаталогНаСервере()

&НаСервере
// Производит загрузку данных их файлов в таблицы-копии и таблицу идентификации.
//
// Параметры:
//  МассивНайденныхФайлов - Массив - массив файлов вво временном каталоге на сервере.
//
Процедура ЗагрузитьДанныеИзФайловНаСервере(МассивНайденныхФайлов)
	
	#Если Не ВебКлиент Тогда
		
		// Инициализируем структуру таблиц, соответствующих каждому типу файлов.
		Если АдресСтруктурыТаблиц <> "" Тогда
			СтруктураТаблиц = ПолучитьИзВременногоХранилища(АдресСтруктурыТаблиц);
		Иначе
			СтруктураТаблиц = Новый Структура;
		КонецЕсли;
		
		// Производим чтение каждого dbf файла.
		DBFФайл = Новый XBase;
		DBFФайл.Кодировка = КодировкаXBase.OEM;
		
		// Подготавливаем массив суффиксов услуг.
		МассивСуффиксовУслуг = ПолучитьМассивСуффиксовУслугНаСервере();
		
		МассивТиповИнформации = ПолучитьМассивТиповИнформации();
		
		Для Каждого Файл Из МассивНайденныхФайлов Цикл
			
			DBFФайл.ОткрытьФайл(Файл.ПолноеИмя, , Истина);
			
			Если DBFФайл.Открыта() Тогда
				
				// Идентифицируем тип информации текущего файла.
				ТипИнформации = ПолучитьТекущийТипИнформацииПоИмениФайла(Файл.ИмяБезРасширения, МассивТиповИнформации);
				
				// Подготавливаем таблицу, соответствующую исходному файлу.
				ТаблицаДанныхИзФайла = ПодготовитьТаблицуПоТипуИнформации(ТипИнформации, МассивСуффиксовУслуг);
				
				Пока Не DBFФайл.ВКонце() Цикл
					
					// Заполнение полей таблицы ЛенинградскаяОбласть_ИдентификацияДанных согласно DBF-файлу.
					НоваяСтрока = Объект.ЛенинградскаяОбласть_ИдентификацияДанных.Добавить();
					
					НоваяСтрока.ТипИнформации = ТипИнформации;
					
					НоваяСтрока.Kodpol = СокрЛП(DBFФайл.Kodpol);
					
					Если Не ТипИнформации = "K" Тогда
						НоваяСтрока.Fam    = ТРег(СокрЛП(DBFФайл.Fam));
						НоваяСтрока.Imy    = ТРег(СокрЛП(DBFФайл.Imy));
						НоваяСтрока.otch   = ТРег(СокрЛП(DBFФайл.otch));
						
						НоваяСтрока.dataR  = ПривестиДатуИзDBF(СокрЛП(DBFФайл.dataR));
						
						Если Не ТипИнформации = "I" Тогда
							НоваяСтрока.nasP = СокрЛП(DBFФайл.nasP);
							НоваяСтрока.Ul   = СокрЛП(DBFФайл.Ul);
							НоваяСтрока.Dom  = СокрЛП(DBFФайл.Dom);
							НоваяСтрока.Korp = СокрЛП(DBFФайл.Korp);
							НоваяСтрока.kv   = ПривестиНомерКватрирыИзDBF(СокрЛП(DBFФайл.kv));
						КонецЕсли;
					КонецЕсли;
					
					// Заполнение строк таблицы - копии файла.
					СтрокаКопия = ТаблицаДанныхИзФайла.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаКопия, DBFФайл, , "KODPOL");
					СтрокаКопия.KODPOL = СокрЛП(DBFФайл.Kodpol);
					
					DBFФайл.Следующая();
					
				КонецЦикла;
				
				// Добавляем/заменяем таблицу в структуре таблиц.
				ИмяТаблицыВСтруктуре = ТипИнформации + "_" + Файл.ИмяБезРасширения;
				
				Если СтруктураТаблиц.Свойство(ИмяТаблицыВСтруктуре) Тогда
					СтруктураТаблиц[ИмяТаблицыВСтруктуре] = ТаблицаДанныхИзФайла;
				Иначе
					СтруктураТаблиц.Вставить(ИмяТаблицыВСтруктуре, ТаблицаДанныхИзФайла);
				КонецЕсли;
				
				DBFФайл.ЗакрытьФайл();
				
			Иначе
				
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не удалось прочитать файл " + Файл.Имя);
				DBFФайл.ЗакрытьФайл();
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Сохраням структуру таблиц.
		АдресСтруктурыТаблиц = ПоместитьВоВременноеХранилище(СтруктураТаблиц, Новый УникальныйИдентификатор);
		
		ПроизвестиИдентификациюНаСервере();
		
	#КонецЕсли
	
КонецПроцедуры // ЗагрузитьДанныеИзФайловНаСервере()

&НаСервере
// Загружает список услуг в ОСЗН по умолчанию из справочника.
//
// Возвращаемое значение:
//  МассивСуффиксов - Массив - массив суффиксов услуг ОСЗН.
//
Функция ПолучитьМассивСуффиксовУслугНаСервере()
	
	МассивСуффиксов = Новый Массив;
	
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("ЛенинградскаяОбласть_Макет");
	
	СправочникВидыЛьгот = Макет.ПолучитьОбласть("СправочникВидыЛьгот");
	
	Для НомерСтроки = 1 По СправочникВидыЛьгот.ВысотаТаблицы Цикл
		МассивСуффиксов.Добавить(СправочникВидыЛьгот.Область(НомерСтроки, 1).Текст);
	КонецЦикла;
	
	Возврат МассивСуффиксов;
	
КонецФункции // ПолучитьМассивСуффиксовУслугНаСервере()

&НаСервере
// Загружает список услуг в ОСЗН по умолчанию из справочника.
//
// Возвращаемое значение:
//  МассивТиповИнформации - Массив - массив со всеми возможными типами информации.
//
Функция ПолучитьМассивТиповИнформации()
	
	МассивТиповИнформации = Новый Массив;
	
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("ЛенинградскаяОбласть_Макет");
	
	СправочникТипыИнформации = Макет.ПолучитьОбласть("СправочникТипыИнформации");
	
	Для НомерСтроки = 1 По СправочникТипыИнформации.ВысотаТаблицы Цикл
		МассивТиповИнформации.Добавить(СправочникТипыИнформации.Область(НомерСтроки, 1).Текст);
	КонецЦикла;
	
	Возврат МассивТиповИнформации;
	
КонецФункции // ПолучитьМассивТиповИнформации()

&НаСервере
// Получает тип информации из имени файла.
//
// Параметры:
//  ИмяФайлаБезРасширения - Строка - имя файла без разрешения;
//  МассивТиповИнформации - Массив - массив со всеми возможными типами информации.
//
// Возвращаемое значение:
//  ТаблицаИзФайла - Строка - тип информации.
//
Функция ПолучитьТекущийТипИнформацииПоИмениФайла(ИмяФайлаБезРасширения, МассивТиповИнформации)
	
	ТипИнформации = "";
	
	Для Каждого ТекущийТипИнформации Из МассивТиповИнформации Цикл
		
		Если Найти(ИмяФайлаБезРасширения, ТекущийТипИнформации) <> 0 Тогда
			ТипИнформации = ТекущийТипИнформации;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТипИнформации;
	
КонецФункции // ПолучитьТекущийТипИнформацииПоИмениФайла()

&НаСервере
// Подготавливает таблицу со структурой полей согласно типу информации.
//
// Параметры:
//  ТипИнформации   - Строка - текущий тип информации;
//  МассивСуффиксов - Массив - массив суффиксов услуг ОСЗН.
//
// Возвращаемое значение:
//  ТаблицаИзФайла - ТаблицаЗначений - таблица со структурой полей согласно типу информации.
//
Функция ПодготовитьТаблицуПоТипуИнформации(ТипИнформации, МассивСуффиксов);
	
	ТаблицаИзФайла = Новый ТаблицаЗначений;
	
	ТаблицаИзФайла.Колонки.Добавить("KODPOL",     УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(10));
	
	// Информационная часть таблиц.
	Если ТипИнформации <> "K" Тогда
		
		ТаблицаИзФайла.Колонки.Добавить("FAM",    УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(25));
		ТаблицаИзФайла.Колонки.Добавить("IMY",    УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(15));
		ТаблицаИзФайла.Колонки.Добавить("OTCH",   УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(20));
		ТаблицаИзФайла.Колонки.Добавить("DATAR",  УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(10));
		ТаблицаИзФайла.Колонки.Добавить("POL",    УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(12));
		
	Иначе
		
		// Это поле не описано в формате, но во входящих файлах типа "K" присутствует.
		ТаблицаИзФайла.Колонки.Добавить("KOD_KAT", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(5));
		
	КонецЕсли;
	
	ИсключаемыеТипыИнформации = Новый Структура("I, K");
	Если Не ИсключаемыеТипыИнформации.Свойство(ТипИнформации) Тогда
		
		ТаблицаИзФайла.Колонки.Добавить("NASP",   УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(60));
		ТаблицаИзФайла.Колонки.Добавить("UL",     УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(60));
		ТаблицаИзФайла.Колонки.Добавить("DOM",    УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(6));
		ТаблицаИзФайла.Колонки.Добавить("KORP",   УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(2));
		ТаблицаИзФайла.Колонки.Добавить("KV",     УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(3));
		
		ИсключаемыеТипыИнформации = Новый Структура("E_mk, M");
		Если Не ИсключаемыеТипыИнформации.Свойство(ТипИнформации) Тогда
			
			ТаблицаИзФайла.Колонки.Добавить("PL", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(8));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипИнформации = "F" Тогда
		
		ТаблицаИзФайла.Колонки.Добавить("GRAPL",  УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(40));
		ТаблицаИзФайла.Колонки.Добавить("GRAKUS", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(40));
		ТаблицаИзФайла.Колонки.Добавить("FSP",    УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(100));
		ТаблицаИзФайла.Колонки.Добавить("KOLKAT", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(3));
		
	КонецЕсли;
	
	ИсключаемыеТипыИнформации = Новый Структура("F, E_mk, M");
	Если Не ИсключаемыеТипыИнформации.Свойство(ТипИнформации) Тогда
		
		ТаблицаИзФайла.Колонки.Добавить("KAT1",   УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(60));
		ТаблицаИзФайла.Колонки.Добавить("DOK",    УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(60));
		ТаблицаИзФайла.Колонки.Добавить("SER",    УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(8));
		ТаблицаИзФайла.Колонки.Добавить("NOM",    УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(8));
		ТаблицаИзФайла.Колонки.Добавить("DATAV",  УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(10));
		ТаблицаИзФайла.Колонки.Добавить("ORG",    УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(60));
		ТаблицаИзФайла.Колонки.Добавить("DATAN",  УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(10));
		ТаблицаИзФайла.Колонки.Добавить("DATAOK", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(10));
		
	КонецЕсли;
	
	ИсключаемыеТипыИнформации = Новый Структура("K, I, E_mk, M");
	Если Не ИсключаемыеТипыИнформации.Свойство(ТипИнформации) Тогда
		ТаблицаИзФайла.Колонки.Добавить("IZD",    УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(2));
		ТаблицаИзФайла.Колонки.Добавить("KOLG",   УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(2));
	КонецЕсли;
	
	Если ТипИнформации = "K" Тогда
		ТаблицаИзФайла.Колонки.Добавить("PREDK",  УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(1));
	КонецЕсли;
	
	ИсключаемыеТипыИнформации = Новый Структура("E_mk, M");
	Если Не ИсключаемыеТипыИнформации.Свойство(ТипИнформации) Тогда
		ТаблицаИзФайла.Колонки.Добавить("DBEG",   УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(10));
	КонецЕсли;
	
	// Часть таблиц с начислениями.
	Если ТипИнформации <> "K" Тогда
		
		// Колонки с данными о начислениях имеют одинаковую структуру.
		Для Каждого Суффикс Из МассивСуффиксов Цикл
			
			// Для суффикса "VOD" для некоторых полей есть постфикс "OT".
			ИсключаемыеТипыИнформации = Новый Структура("E_mk, M");
			Если Не ИсключаемыеТипыИнформации.Свойство(ТипИнформации) Тогда
				
				ТаблицаИзФайла.Колонки.Добавить(Суффикс + ?(Суффикс = "VOD", "OT", ""),         УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(5));
				ТаблицаИзФайла.Колонки.Добавить("SUM" + Суффикс + ?(Суффикс = "VOD", "OT", ""), УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(12, 2));
				ТаблицаИзФайла.Колонки.Добавить("DOP" + Суффикс + ?(Суффикс = "VOD", "OT", ""), УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(12, 2));
				
			КонецЕсли;
			
			Если ТипИнформации <> "I" Тогда
				
				ИсключаемыеТипыИнформации = Новый Структура("E_mk, M");
				
				Если Не (ИсключаемыеТипыИнформации.Свойство(ТипИнформации) И Суффикс = "TOP") Тогда
					ТаблицаИзФайла.Колонки.Добавить("PRAV" + Суффикс, УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(1));
				КонецЕсли;
				
				Если Не ИсключаемыеТипыИнформации.Свойство(ТипИнформации) Тогда
					ТаблицаИзФайла.Колонки.Добавить("REZ" + Суффикс,  УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(1));
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Данные о лицевом счете.
		ИсключаемыеТипыИнформации = Новый Структура("E_mk, M");
		Если Не ИсключаемыеТипыИнформации.Свойство(ТипИнформации) Тогда
			
			ТаблицаИзФайла.Колонки.Добавить("LCJKH",  УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(12));
			ТаблицаИзФайла.Колонки.Добавить("LCELEK", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(12));
			ТаблицаИзФайла.Колонки.Добавить("LCGAZ",  УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(12));
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТаблицаИзФайла;
	
КонецФункции // ПодготовитьТаблицуПоТипуИнформации()

&НаСервере
// Приводит к типу Дата значение даты из DBF.
//
// Параметры:
//  ДатаDBF - Строка - строка с датой в формате "ДД.ММ.ГГГГ".
//
// Возвращаемое значение:
//  Дата - приведенное к типу Дата значение даты из DBF.
//
Функция ПривестиДатуИзDBF(ДатаDBF)
	
	Попытка
		Дата = Дата(Прав(ДатаDBF, 4) + Сред(ДатаDBF, 4, 2) + Лев(ДатаDBF, 2));
	Исключение
		Дата = '00010101';
	КонецПопытки;
	
	Возврат Дата;
	
КонецФункции // ПривестиДатуИзDBF()

&НаСервере
// Приводит к типу Число значение номера квартиры из DBF.
//
// Параметры:
//  КвартираDBF - Строка - номер квартиры из DBF в строковом формате.
//
// Возвращаемое значение:
//  Число - приведенное к типу Число значение номера квартиры из DBF.
//
Функция ПривестиНомерКватрирыИзDBF(КвартираDBF)
	
	Попытка
		Число = Число(КвартираDBF);
	Исключение
		// Установим номер квартиры 1, т.к. в данном случае могут быть загружены частные дома из файлы ОСЗН.
		Число = 1;
	КонецПопытки;
	
	Возврат Число;
	
КонецФункции // ПривестиНомерКватрирыИзDBF()

&НаСервере
// Дополняет незаполненные поля в строках с типом информаци "K" и "I".
// Производит идентификацию Лицевого счета и Жильца (Льготника).
//
Процедура ПроизвестиИдентификациюНаСервере()
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ИдентификацияДанных_DBF", Объект.ЛенинградскаяОбласть_ИдентификацияДанных.Выгрузить());
	Запрос.УстановитьПараметр("ДатаКонца",               КонецМесяца(Объект.Период));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИдентификацияДанных_DBF.ТипИнформации,
	|	ИдентификацияДанных_DBF.Kodpol,
	|	ИдентификацияДанных_DBF.Fam,
	|	ИдентификацияДанных_DBF.Imy,
	|	ИдентификацияДанных_DBF.otch,
	|	ИдентификацияДанных_DBF.dataR,
	|	ИдентификацияДанных_DBF.nasP,
	|	ИдентификацияДанных_DBF.Ul,
	|	ИдентификацияДанных_DBF.Dom,
	|	ИдентификацияДанных_DBF.Korp,
	|	ИдентификацияДанных_DBF.kv
	|ПОМЕСТИТЬ втИдентификацияДанных_DBF
	|ИЗ
	|	&ИдентификацияДанных_DBF КАК ИдентификацияДанных_DBF
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИдентификацияДанных_DBF.ТипИнформации,
	|	втИдентификацияДанных_DBF.Kodpol,
	|	втИдентификацияДанных_DBF.Fam,
	|	втИдентификацияДанных_DBF.Imy,
	|	втИдентификацияДанных_DBF.otch,
	|	втИдентификацияДанных_DBF.dataR,
	|	втИдентификацияДанных_DBF.nasP,
	|	втИдентификацияДанных_DBF.Ul,
	|	втИдентификацияДанных_DBF.Dom,
	|	втИдентификацияДанных_DBF.Korp,
	|	втИдентификацияДанных_DBF.kv
	|ПОМЕСТИТЬ втИдентификацияДанных_F
	|ИЗ
	|	втИдентификацияДанных_DBF КАК втИдентификацияДанных_DBF
	|ГДЕ
	|	втИдентификацияДанных_DBF.ТипИнформации = ""F""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИдентификацияДанных_DBF.ТипИнформации,
	|	втИдентификацияДанных_DBF.Kodpol
	|ПОМЕСТИТЬ втИдентификацияДанных_отборK
	|ИЗ
	|	втИдентификацияДанных_DBF КАК втИдентификацияДанных_DBF
	|ГДЕ
	|	втИдентификацияДанных_DBF.ТипИнформации = ""K""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИдентификацияДанных_отборK.ТипИнформации,
	|	втИдентификацияДанных_отборK.Kodpol,
	|	втИдентификацияДанных_F.Fam КАК Fam,
	|	втИдентификацияДанных_F.Imy КАК Imy,
	|	втИдентификацияДанных_F.otch КАК otch,
	|	втИдентификацияДанных_F.dataR КАК dataR,
	|	втИдентификацияДанных_F.nasP КАК nasP,
	|	втИдентификацияДанных_F.Ul КАК Ul,
	|	втИдентификацияДанных_F.Dom КАК Dom,
	|	втИдентификацияДанных_F.Korp КАК Korp,
	|	втИдентификацияДанных_F.kv КАК kv
	|ПОМЕСТИТЬ втИдентификацияДанных_K
	|ИЗ
	|	втИдентификацияДанных_отборK КАК втИдентификацияДанных_отборK
	|		ЛЕВОЕ СОЕДИНЕНИЕ втИдентификацияДанных_F КАК втИдентификацияДанных_F
	|		ПО втИдентификацияДанных_отборK.Kodpol = втИдентификацияДанных_F.Kodpol
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИдентификацияДанных_DBF.ТипИнформации,
	|	втИдентификацияДанных_DBF.Kodpol,
	|	втИдентификацияДанных_DBF.Fam,
	|	втИдентификацияДанных_DBF.Imy,
	|	втИдентификацияДанных_DBF.otch,
	|	втИдентификацияДанных_DBF.dataR,
	|	втИдентификацияДанных_DBF.nasP,
	|	втИдентификацияДанных_DBF.Ul,
	|	втИдентификацияДанных_DBF.Dom,
	|	втИдентификацияДанных_DBF.Korp,
	|	втИдентификацияДанных_DBF.kv
	|ПОМЕСТИТЬ втИдентификацияДанных_R
	|ИЗ
	|	втИдентификацияДанных_DBF КАК втИдентификацияДанных_DBF
	|ГДЕ
	|	втИдентификацияДанных_DBF.ТипИнформации = ""R""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИдентификацияДанных_DBF.ТипИнформации,
	|	втИдентификацияДанных_DBF.Kodpol,
	|	втИдентификацияДанных_DBF.Fam,
	|	втИдентификацияДанных_DBF.Imy,
	|	втИдентификацияДанных_DBF.otch,
	|	втИдентификацияДанных_DBF.dataR
	|ПОМЕСТИТЬ втИдентификацияДанных_отборI
	|ИЗ
	|	втИдентификацияДанных_DBF КАК втИдентификацияДанных_DBF
	|ГДЕ
	|	втИдентификацияДанных_DBF.ТипИнформации = ""I""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИдентификацияДанных_отборI.ТипИнформации,
	|	втИдентификацияДанных_отборI.Kodpol,
	|	втИдентификацияДанных_отборI.Fam,
	|	втИдентификацияДанных_отборI.Imy,
	|	втИдентификацияДанных_отборI.otch,
	|	втИдентификацияДанных_отборI.dataR,
	|	втИдентификацияДанных_R.nasP КАК nasP,
	|	втИдентификацияДанных_R.Ul КАК Ul,
	|	втИдентификацияДанных_R.Dom КАК Dom,
	|	втИдентификацияДанных_R.Korp КАК Korp,
	|	втИдентификацияДанных_R.kv КАК kv
	|ПОМЕСТИТЬ втИдентификацияДанных_I
	|ИЗ
	|	втИдентификацияДанных_отборI КАК втИдентификацияДанных_отборI
	|		ЛЕВОЕ СОЕДИНЕНИЕ втИдентификацияДанных_R КАК втИдентификацияДанных_R
	|		ПО втИдентификацияДанных_отборI.Kodpol = втИдентификацияДанных_R.Kodpol
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИдентификацияДанных_DBF.ТипИнформации,
	|	втИдентификацияДанных_DBF.Kodpol,
	|	втИдентификацияДанных_DBF.Fam,
	|	втИдентификацияДанных_DBF.Imy,
	|	втИдентификацияДанных_DBF.otch,
	|	втИдентификацияДанных_DBF.dataR,
	|	втИдентификацияДанных_DBF.nasP,
	|	втИдентификацияДанных_DBF.Ul,
	|	втИдентификацияДанных_DBF.Dom,
	|	втИдентификацияДанных_DBF.Korp,
	|	втИдентификацияДанных_DBF.kv
	|ПОМЕСТИТЬ втИдентификацияДанных
	|ИЗ
	|	втИдентификацияДанных_DBF КАК втИдентификацияДанных_DBF
	|ГДЕ
	|	НЕ втИдентификацияДанных_DBF.ТипИнформации В (""K"", ""I"")
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втИдентификацияДанных_K.ТипИнформации,
	|	втИдентификацияДанных_K.Kodpol,
	|	втИдентификацияДанных_K.Fam,
	|	втИдентификацияДанных_K.Imy,
	|	втИдентификацияДанных_K.otch,
	|	втИдентификацияДанных_K.dataR,
	|	втИдентификацияДанных_K.nasP,
	|	втИдентификацияДанных_K.Ul,
	|	втИдентификацияДанных_K.Dom,
	|	втИдентификацияДанных_K.Korp,
	|	втИдентификацияДанных_K.kv
	|ИЗ
	|	втИдентификацияДанных_K КАК втИдентификацияДанных_K
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втИдентификацияДанных_I.ТипИнформации,
	|	втИдентификацияДанных_I.Kodpol,
	|	втИдентификацияДанных_I.Fam,
	|	втИдентификацияДанных_I.Imy,
	|	втИдентификацияДанных_I.otch,
	|	втИдентификацияДанных_I.dataR,
	|	втИдентификацияДанных_I.nasP,
	|	втИдентификацияДанных_I.Ul,
	|	втИдентификацияДанных_I.Dom,
	|	втИдентификацияДанных_I.Korp,
	|	втИдентификацияДанных_I.kv
	|ИЗ
	|	втИдентификацияДанных_I КАК втИдентификацияДанных_I
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втИдентификацияДанных_DBF
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втИдентификацияДанных_F
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втИдентификацияДанных_K
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втИдентификацияДанных_отборK
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втИдентификацияДанных_R
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втИдентификацияДанных_I
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втИдентификацияДанных_отборI
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект КАК Помещение
	|ПОМЕСТИТЬ втЛицевыеСчета
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&ДатаКонца, ) КАК КВП_ЛицевыеСчетаСрезПоследних
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец.ФизЛицо
	|ПОМЕСТИТЬ втЗарегистрированные
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втЛицевыеСчета.ЛицевойСчет
	|				ИЗ
	|					втЛицевыеСчета КАК втЛицевыеСчета)) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо,
	|	ФИОФизическихЛицСрезПоследних.Фамилия,
	|	ФИОФизическихЛицСрезПоследних.Имя,
	|	ФИОФизическихЛицСрезПоследних.Отчество,
	|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо.ДатаРождения КАК ДатаРождения
	|ПОМЕСТИТЬ втФИОФизЛиц
	|ИЗ
	|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(
	|			&ДатаКонца,
	|			ФизическоеЛицо В
	|				(ВЫБРАТЬ
	|					втЗарегистрированные.ЖилецФизЛицо
	|				ИЗ
	|					втЗарегистрированные КАК втЗарегистрированные)) КАК ФИОФизическихЛицСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗарегистрированные.ЛицевойСчет,
	|	втЗарегистрированные.Жилец,
	|	ЕСТЬNULL(втФИОФизЛиц.Фамилия, """") КАК Фамилия,
	|	ЕСТЬNULL(втФИОФизЛиц.Имя, """") КАК Имя,
	|	ЕСТЬNULL(втФИОФизЛиц.Отчество, """") КАК Отчество,
	|	ЕСТЬNULL(втФИОФизЛиц.ДатаРождения, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаРождения
	|ПОМЕСТИТЬ втФИОЖильцов
	|ИЗ
	|	втЗарегистрированные КАК втЗарегистрированные
	|		ЛЕВОЕ СОЕДИНЕНИЕ втФИОФизЛиц КАК втФИОФизЛиц
	|		ПО втЗарегистрированные.ЖилецФизЛицо = втФИОФизЛиц.ФизическоеЛицо";
	
	Запрос.Выполнить();
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	ЗапросПоЗданиям = Новый Запрос;
	ЗапросПоЗданиям.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросПоЗданиям.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втЛицевыеСчета.Помещение.Владелец КАК Объект
	|ИЗ
	|	втЛицевыеСчета КАК втЛицевыеСчета
	|
	|СГРУППИРОВАТЬ ПО
	|	втЛицевыеСчета.Помещение.Владелец";
	
	МассивОбъектов = ЗапросПоЗданиям.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втЛицевыеСчета.ЛицевойСчет,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НЕ втКонтактнаяИнформация.Город = """"
	|				ТОГДА втКонтактнаяИнформация.Город
	|			КОГДА НЕ втКонтактнаяИнформация.НаселенныйПункт = """"
	|				ТОГДА втКонтактнаяИнформация.НаселенныйПункт
	|			ИНАЧЕ втКонтактнаяИнформация.Регион
	|		КОНЕЦ, """") КАК nasP,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Улица, """") КАК Ul,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Дом, """") КАК Dom,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Корпус, """") КАК Korp,
	|	втЛицевыеСчета.Помещение.Код КАК kv
	|ПОМЕСТИТЬ втАдреса
	|ИЗ
	|	втЛицевыеСчета КАК втЛицевыеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК втКонтактнаяИнформация
	|		ПО втЛицевыеСчета.Помещение.Владелец = втКонтактнаяИнформация.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втАдреса.ЛицевойСчет,
	|	ЕСТЬNULL(втФИОЖильцов.Жилец, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК Льготник,
	|	ЕСТЬNULL(втФИОЖильцов.Фамилия, """") КАК Fam,
	|	ЕСТЬNULL(втФИОЖильцов.Имя, """") КАК Imy,
	|	ЕСТЬNULL(втФИОЖильцов.Отчество, """") КАК otch,
	|	ЕСТЬNULL(втФИОЖильцов.ДатаРождения, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК dataR,
	|	втАдреса.nasP,
	|	втАдреса.Ul,
	|	втАдреса.Dom,
	|	втАдреса.Korp,
	|	втАдреса.kv
	|ПОМЕСТИТЬ втФИОиАдрес
	|ИЗ
	|	втАдреса КАК втАдреса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втФИОЖильцов КАК втФИОЖильцов
	|		ПО втАдреса.ЛицевойСчет = втФИОЖильцов.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИдентификацияДанных.ТипИнформации КАК ТипИнформации,
	|	ЕСТЬNULL(втФИОиАдрес.ЛицевойСчет, ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)) КАК ЛицевойСчет,
	|	ЕСТЬNULL(втФИОиАдрес.Льготник, ЗНАЧЕНИЕ(Справочник.УПЖКХ_Жильцы.ПустаяСсылка)) КАК Льготник,
	|	втИдентификацияДанных.Kodpol,
	|	втИдентификацияДанных.Fam,
	|	втИдентификацияДанных.Imy,
	|	втИдентификацияДанных.otch,
	|	втИдентификацияДанных.dataR,
	|	втИдентификацияДанных.nasP,
	|	втИдентификацияДанных.Ul,
	|	втИдентификацияДанных.Dom,
	|	втИдентификацияДанных.Korp,
	|	втИдентификацияДанных.kv
	|ИЗ
	|	втИдентификацияДанных КАК втИдентификацияДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ втФИОиАдрес КАК втФИОиАдрес
	|		ПО втИдентификацияДанных.Fam = втФИОиАдрес.Fam
	|			И втИдентификацияДанных.Imy = втФИОиАдрес.Imy
	|			И втИдентификацияДанных.otch = втФИОиАдрес.otch
	|			И втИдентификацияДанных.dataR = втФИОиАдрес.dataR
	|			И втИдентификацияДанных.nasP = втФИОиАдрес.nasP
	|			И втИдентификацияДанных.Ul = втФИОиАдрес.Ul
	|			И втИдентификацияДанных.Dom = втФИОиАдрес.Dom
	|			И втИдентификацияДанных.Korp = втФИОиАдрес.Korp
	|			И втИдентификацияДанных.kv = втФИОиАдрес.kv
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТипИнформации";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Объект.ЛенинградскаяОбласть_ИдентификацияДанных.Загрузить(Результат);
	
КонецПроцедуры // ПроизвестиИдентификацию()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ГРУППЫ ВЫГРУЗКА

#Область КаталогВыгрузки

////////////////////////
// Каталог выгрузки

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ИмяКаталогаВыгрузки".
Процедура ИмяКаталогаВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла                             = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Заголовок                   = "Выбор каталога выгрузки";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	ДиалогВыбораФайла.Каталог                     = Объект.ИмяКаталогаВыгрузки;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ИмяКаталогаВыгрузкиНачалоВыбораЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата обработчика события "НачалоВыбора" поля "ИмяКаталогаВыгрузки".
Процедура ИмяКаталогаВыгрузкиНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		Объект.ИмяКаталогаВыгрузки = ВыбранныеФайлы[0];
	КонецЕсли;
	
КонецПроцедуры // ИмяКаталогаВыгрузкиНачалоВыбора()

&НаКлиенте
// Обработчик события "Открытие" поля "ИмяКаталогаВыгрузки".
Процедура ИмяКаталогаВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НачатьЗапускПриложения(Новый ОписаниеОповещения("ИмяКаталогаВыгрузкиОткрытиеЗавершение", ЭтотОбъект), Объект.ИмяКаталогаВыгрузки);
	
КонецПроцедуры

&НаКлиенте
// Обработчик заверешения обработчика события "Открытие" поля "ИмяКаталогаВыгрузки".
Процедура ИмяКаталогаВыгрузкиОткрытиеЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры // ИмяКаталогаВыгрузкиОткрытие()

#КонецОбласти

#Область Выгрузка

&НаКлиенте
// Обработчик команды "КомандаВыгрузить".
//
Процедура КомандаВыгрузить(Команда)
	
	// Проверяем каталог на существование.
	Каталог = Новый Файл(Объект.ИмяКаталогаВыгрузки);
	Каталог.НачатьПроверкуСуществования(Новый ОписаниеОповещения("КомандаВыгрузитьЗавершениеКаталогСуществует",
																 ЭтотОбъект, Новый Структура("Каталог", Каталог)));
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата команды "Выгрузить".
//
Процедура КомандаВыгрузитьЗавершениеКаталогСуществует(Существует, ДополнительныеПараметры) Экспорт
	
	Каталог = ДополнительныеПараметры.Каталог;
	
	Если Существует Тогда
		Каталог.НачатьПроверкуЭтоКаталог(Новый ОписаниеОповещения("КомандаВыгрузитьЗавершениеЭтоКаталог", ЭтотОбъект));
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Каталог выгрузки не указан или не существует!");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата команды "ВыгрузитьЗавершениеЭтоКаталог".
//
Процедура КомандаВыгрузитьЗавершениеЭтоКаталог(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Если Не ЭтоКаталог Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Каталог выгрузки не указан или не существует!");
		Возврат;
	КонецЕсли;
	
	// Массив возвращаемых на клиент файлов.
	ПередаваемыеФайлы = Новый Массив;
	
	СформироватьФайлыВыгрузкиНаСервере(ПередаваемыеФайлы);
	
	Если ПередаваемыеФайлы.Количество() > 0 Тогда
		
		ВыгрузитьПереданныеНаКлиентФайлы(ПередаваемыеФайлы);
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Выгрузка завершена!");
		НачатьЗапускПриложения(Новый ОписаниеОповещения("КомандаВыгрузитьЗавершение", ЭтотОбъект), Объект.ИмяКаталогаВыгрузки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата команды "ВыгрузитьЗавершение".
//
Процедура КомандаВыгрузитьЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры // КомандаВыгрузить()

&НаСервере
// Поизводит заполнение данных в таблицах-копиях файлов для идентифицированных льготников и выгружает эти таблицы в dbf
// с помещением оных во временное хранилище.
//
// Параметры:
//  ПередаваемыеФайлы - Массив - массив возвращаемых на клиент файлов.
//
Процедура СформироватьФайлыВыгрузкиНаСервере(ПередаваемыеФайлы)
	
	// Инициализируем структуру таблиц, сообветствующих каждому типу файлов.
	Если АдресСтруктурыТаблиц <> "" Тогда
		
		СтруктураТаблиц = ПолучитьИзВременногоХранилища(АдресСтруктурыТаблиц);
		
		ТаблицаНачислений = ПолучитьТаблицуНачисленийНаСервере();
		
		Отбор = Новый Структура("ТипИнформации, KODPOL");
		
		Для Каждого Таблица Из СтруктураТаблиц Цикл
			
			// Парсим ключ структуры таблиц.
			МассивСтрокВКлюче = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Таблица.Ключ, "_", Истина, Истина);
			ТипИнформации     = МассивСтрокВКлюче[0];
			ИмяФайла          = МассивСтрокВКлюче[1];
			
			Отбор.Вставить("ТипИнформации", ТипИнформации);
			
			Для Каждого Строка Из Таблица.Значение Цикл
				
				Отбор.Вставить("KODPOL", Строка.KODPOL);
				НайденныеСтроки = ТаблицаНачислений.НайтиСтроки(Отбор);
				
				ЗаполнитьТекущуюСтрокуДаннымиОНачислениях(ТипИнформации, Строка, НайденныеСтроки);
				
			КонецЦикла;
			
			// Выгружаем таблицу в dbf и помещаем файл во временное хранилище.
			АдресФайлаВХранилище = ВыгрузитьТаблицуВDBF(Таблица.Значение);
			
			ПередаваемыйФайл = Новый ОписаниеПередаваемогоФайла(ИмяФайла, АдресФайлаВХранилище);
			ПередаваемыеФайлы.Добавить(ПередаваемыйФайл);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьФайлыВыгрузкиНаСервере()

////////////////////
// Получение данных

&НаСервере
// Получает таблицу начислений, перерасчетов, количества месяцев задолженности и признака выбора данной льготной категории.
//
// Возвращаемое значение:
//  Результат - ТаблицаЗначений - таблица начислений.
//
Функция ПолучитьТаблицуНачисленийНаСервере()
	
	// Значение реквизита, выводимое в колонке "Лицевой счет в ЖКХ".
	Если Объект.ИдентификацияЛС = 0 Тогда
		РеквизитЛС = ".Код";
	ИначеЕсли Объект.ИдентификацияЛС = 1 Тогда
		РеквизитЛС = "";
	Иначе
		РеквизитЛС = ".Идентификатор";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ИдентификацияДанных",          Объект.ЛенинградскаяОбласть_ИдентификацияДанных.Выгрузить(, "ТипИнформации, ЛицевойСчет, Льготник, Kodpol"));
	Запрос.УстановитьПараметр("ДатаКонца",                    КонецМесяца(Объект.Период));
	Запрос.УстановитьПараметр("ДатаНачала",                   НачалоМесяца(Объект.Период));
	Запрос.УстановитьПараметр("Организация",                  Объект.Организация);
	Запрос.УстановитьПараметр("ТаблицаУслуг",                 Объект.ЛенинградскаяОбласть_УслугиВБазе.Выгрузить(, "СуффиксУслугиВОСЗН, УслугаВБазе"));
	Запрос.УстановитьПараметр("ТаблицаЛьгот",                 Объект.ЛенинградскаяОбласть_ЛьготыВБазе.Выгрузить(, "КодЛьготнойКатегорииОСЗН, ЛьготнаяКатегорияВБазе"));
	Запрос.УстановитьПараметр("ДатаОпределенияЗадолженности", ДатаСрокОплаты());
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ИдентификацияДанных.ТипИнформации,
	|	ИдентификацияДанных.ЛицевойСчет,
	|	ИдентификацияДанных.Льготник,
	|	ИдентификацияДанных.Kodpol
	|ПОМЕСТИТЬ втИдентификацияДанных
	|ИЗ
	|	&ИдентификацияДанных КАК ИдентификацияДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втИдентификацияДанных.ТипИнформации,
	|	втИдентификацияДанных.ЛицевойСчет,
	|	втИдентификацияДанных.Льготник,
	|	втИдентификацияДанных.Kodpol
	|ПОМЕСТИТЬ втИдентифицированные
	|ИЗ
	|	втИдентификацияДанных КАК втИдентификацияДанных
	|ГДЕ
	|	втИдентификацияДанных.Льготник <> ЗНАЧЕНИЕ(Справочник.УПЖКХ_Жильцы.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втИдентификацияДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаУслуг.СуффиксУслугиВОСЗН,
	|	ТаблицаУслуг.УслугаВБазе
	|ПОМЕСТИТЬ втТаблицаУслуг
	|ИЗ
	|	&ТаблицаУслуг КАК ТаблицаУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаЛьгот.КодЛьготнойКатегорииОСЗН,
	|	ТаблицаЛьгот.ЛьготнаяКатегорияВБазе
	|ПОМЕСТИТЬ втТаблицаЛьгот
	|ИЗ
	|	&ТаблицаЛьгот КАК ТаблицаЛьгот
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втИдентифицированные.ТипИнформации,
	|	втИдентифицированные.ЛицевойСчет,
	|	втИдентифицированные.Льготник,
	|	втИдентифицированные.Kodpol,
	|	втТаблицаУслуг.СуффиксУслугиВОСЗН,
	|	втТаблицаУслуг.УслугаВБазе
	|ПОМЕСТИТЬ втИдентифицированныеСУслугами
	|ИЗ
	|	втИдентифицированные КАК втИдентифицированные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТаблицаУслуг КАК втТаблицаУслуг
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий,
	|	КВП_НазначенныеЛьготыСрезПоследних.ЛьготнаяКатегория,
	|	ЕСТЬNULL(КВП_СкидкиСрезПоследних.Услуга, ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)) КАК Услуга
	|ПОМЕСТИТЬ втНазначенныеПоУслугеЛьготы
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(
	|			&ДатаКонца,
	|			Проживающий В
	|					(ВЫБРАТЬ
	|						втИдентифицированные.Льготник
	|					ИЗ
	|						втИдентифицированные КАК втИдентифицированные)
	|				И ЛьготнаяКатегория В
	|					(ВЫБРАТЬ
	|						втТаблицаЛьгот.ЛьготнаяКатегорияВБазе
	|					ИЗ
	|						втТаблицаЛьгот КАК втТаблицаЛьгот)
	|				И ДатаИзменения <= &ДатаКонца) КАК КВП_НазначенныеЛьготыСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_Скидки.СрезПоследних(
	|				&ДатаКонца,
	|				ЛьготнаяКатегория В
	|						(ВЫБРАТЬ
	|							втТаблицаЛьгот.ЛьготнаяКатегорияВБазе
	|						ИЗ
	|							втТаблицаЛьгот КАК втТаблицаЛьгот)
	|					И Услуга В
	|						(ВЫБРАТЬ
	|							втТаблицаУслуг.УслугаВБазе
	|						ИЗ
	|							втТаблицаУслуг КАК втТаблицаУслуг)) КАК КВП_СкидкиСрезПоследних
	|		ПО КВП_НазначенныеЛьготыСрезПоследних.ЛьготнаяКатегория = КВП_СкидкиСрезПоследних.ЛьготнаяКатегория
	|ГДЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.Действие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втИдентифицированные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втНазначенныеПоУслугеЛьготы.Проживающий,
	|	втНазначенныеПоУслугеЛьготы.Услуга,
	|	втТаблицаЛьгот.КодЛьготнойКатегорииОСЗН
	|ПОМЕСТИТЬ втКодНазначеннойЛьготы
	|ИЗ
	|	втНазначенныеПоУслугеЛьготы КАК втНазначенныеПоУслугеЛьготы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаЛьгот КАК втТаблицаЛьгот
	|		ПО втНазначенныеПоУслугеЛьготы.ЛьготнаяКатегория = втТаблицаЛьгот.ЛьготнаяКатегорияВБазе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК SUM,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК DOP
	|ПОМЕСТИТЬ втНачисления
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНачала,
	|			&ДатаКонца,
	|			Месяц,
	|			Организация = &Организация
	|				И (ЛицевойСчет, Услуга) В
	|					(ВЫБРАТЬ
	|						втИдентифицированныеСУслугами.ЛицевойСчет,
	|						втИдентифицированныеСУслугами.УслугаВБазе
	|					ИЗ
	|						втИдентифицированныеСУслугами КАК втИдентифицированныеСУслугами)
	|				И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ФактическиеЗатраты), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|				И РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ))) КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Услуга,
	|	МАКСИМУМ(КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период) КАК Период
	|ПОМЕСТИТЬ втПериодыЗадолженности
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(
	|			,
	|			&ДатаОпределенияЗадолженности,
	|			Регистратор,
	|			Движения,
	|			Организация = &Организация
	|				И (ЛицевойСчет, Услуга) В
	|					(ВЫБРАТЬ
	|						втИдентифицированныеСУслугами.ЛицевойСчет,
	|						втИдентифицированныеСУслугами.УслугаВБазе
	|					ИЗ
	|						втИдентифицированныеСУслугами КАК втИдентифицированныеСУслугами)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты
	|ГДЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период < &ДатаОпределенияЗадолженности
	|	И КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияКонечныйОстаток <= 0
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Услуга,
	|	МИНИМУМ(КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период) КАК Период
	|ПОМЕСТИТЬ втПериодыНачалаНачислений
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(
	|			,
	|			&ДатаНачала,
	|			Регистратор,
	|			Движения,
	|			Организация = &Организация
	|				И (ЛицевойСчет, Услуга) В
	|					(ВЫБРАТЬ
	|						втИдентифицированныеСУслугами.ЛицевойСчет,
	|						втИдентифицированныеСУслугами.УслугаВБазе
	|					ИЗ
	|						втИдентифицированныеСУслугами КАК втИдентифицированныеСУслугами)
	|				И НЕ (ЛицевойСчет, Услуга) В
	|						(ВЫБРАТЬ
	|							втПериодыЗадолженности.ЛицевойСчет,
	|							втПериодыЗадолженности.Услуга
	|						ИЗ
	|							втПериодыЗадолженности КАК втПериодыЗадолженности)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты
	|ГДЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период < &ДатаНачала
	|	И КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияКонечныйОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втИдентифицированныеСУслугами.ТипИнформации КАК ТипИнформации,
	|	втИдентифицированныеСУслугами.Kodpol,
	|	втИдентифицированныеСУслугами.ЛицевойСчет" + РеквизитЛС + " КАК LCJKH,
	|	втИдентифицированныеСУслугами.СуффиксУслугиВОСЗН,
	|	МАКСИМУМ(ЕСТЬNULL(втКодНазначеннойЛьготы.КодЛьготнойКатегорииОСЗН, 0)) КАК КодЛьготнойКатегорииОСЗН,
	|	СУММА(ЕСТЬNULL(втНачисления.SUM, 0)) КАК SUM,
	|	СУММА(ЕСТЬNULL(втНачисления.DOP, 0)) КАК DOP,
	|	МАКСИМУМ(ВЫБОР
	|		КОГДА ЕСТЬNULL(втПериодыЗадолженности.Период, ЕСТЬNULL(втПериодыНачалаНачислений.Период, ДАТАВРЕМЯ(1, 1, 1))) = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА втПериодыЗадолженности.Период ЕСТЬ NULL
	|					ТОГДА РАЗНОСТЬДАТ(втПериодыНачалаНачислений.Период, &ДатаНачала, МЕСЯЦ)
	|				ИНАЧЕ ВЫБОР
	|						КОГДА втПериодыЗадолженности.Период > &ДатаНачала
	|							ТОГДА 0
	|						ИНАЧЕ РАЗНОСТЬДАТ(втПериодыЗадолженности.Период, &ДатаНачала, МЕСЯЦ)
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ) КАК КоличествоМесяцевЗадолженности
	|ИЗ
	|	втИдентифицированныеСУслугами КАК втИдентифицированныеСУслугами
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКодНазначеннойЛьготы КАК втКодНазначеннойЛьготы
	|		ПО втИдентифицированныеСУслугами.Льготник = втКодНазначеннойЛьготы.Проживающий
	|			И втИдентифицированныеСУслугами.УслугаВБазе = втКодНазначеннойЛьготы.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНачисления КАК втНачисления
	|		ПО втИдентифицированныеСУслугами.ЛицевойСчет = втНачисления.ЛицевойСчет
	|			И втИдентифицированныеСУслугами.УслугаВБазе = втНачисления.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПериодыЗадолженности КАК втПериодыЗадолженности
	|		ПО втИдентифицированныеСУслугами.ЛицевойСчет = втПериодыЗадолженности.ЛицевойСчет
	|			И втИдентифицированныеСУслугами.УслугаВБазе = втПериодыЗадолженности.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПериодыНачалаНачислений КАК втПериодыНачалаНачислений
	|		ПО втИдентифицированныеСУслугами.ЛицевойСчет = втПериодыНачалаНачислений.ЛицевойСчет
	|			И втИдентифицированныеСУслугами.УслугаВБазе = втПериодыНачалаНачислений.Услуга
	|
	|СГРУППИРОВАТЬ ПО
	|	втИдентифицированныеСУслугами.ТипИнформации,
	|	втИдентифицированныеСУслугами.Kodpol,
	|	втИдентифицированныеСУслугами.ЛицевойСчет,
	|	втИдентифицированныеСУслугами.СуффиксУслугиВОСЗН
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТипИнформации";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции // ПолучитьТаблицуНачисленийНаСервере()

&НаСервере
// Производит заполнение текущей строки таблицы-копии файла данными из таблицы начислений.
//
// Параметры:
//  ТипИнформации         - Строка                - текущий тип информации;
//  ЗаполняемаяСтрока     - СтрокаТаблицыЗначений - строка таблицы-копии файла;
//  МассивСтрокНачислений - Массив                - массив строк таблицы начислений, полученных отбором
//                                                  по типу информации и коду получателя ОСЗН.
//
Процедура ЗаполнитьТекущуюСтрокуДаннымиОНачислениях(ТипИнформации, ЗаполняемаяСтрока, МассивСтрокНачислений)
	
	// Номер лицевого счета в колонке "Лицевой счет в ЖКХ".
	Если МассивСтрокНачислений.Количество() > 0 И Не (ТипИнформации = "K" Или ТипИнформации = "E_mk" Или ТипИнформации = "M") Тогда
		ЗаполняемаяСтрока.LCJKH = ?(Объект.ИдентификацияЛС = 1, ПодготовитьНомерЛСДляВывода(МассивСтрокНачислений[0].LCJKH), МассивСтрокНачислений[0].LCJKH);
	КонецЕсли;
	
	// 1. Федеральные льготники.
	Если ТипИнформации = "F" Тогда
		
		Для Каждого Строка Из МассивСтрокНачислений Цикл
			ЗаполняемаяСтрока["SUM"  + СокрЛП(Строка.СуффиксУслугиВОСЗН) + ?(ТипИнформации = "VOD", "OT", "")] = Строка.SUM;
			ЗаполняемаяСтрока["DOP"  + СокрЛП(Строка.СуффиксУслугиВОСЗН) + ?(ТипИнформации = "VOD", "OT", "")] = Строка.DOP;
			ЗаполняемаяСтрока["PRAV" + СокрЛП(Строка.СуффиксУслугиВОСЗН)] = ПолучитьПризнакПраваПолученияКомпенсации_F(Строка);
		КонецЦикла;
		
	// 1.1 Компенсации федеральных льготников.
	ИначеЕсли ТипИнформации = "K" Тогда
		
		ЗаполняемаяСтрока.PREDK = ПолучитьПризнакПраваПолученияКомпенсации_K(МассивСтрокНачислений);
		
	// 2. Репрессированные.
	ИначеЕсли ТипИнформации = "R" Тогда
		
		Для Каждого Строка Из МассивСтрокНачислений Цикл
			ЗаполняемаяСтрока["SUM"  + СокрЛП(Строка.СуффиксУслугиВОСЗН) + ?(ТипИнформации = "VOD", "OT", "")] = Строка.SUM;
			ЗаполняемаяСтрока["DOP"  + СокрЛП(Строка.СуффиксУслугиВОСЗН) + ?(ТипИнформации = "VOD", "OT", "")] = Строка.DOP;
			ЗаполняемаяСтрока["PRAV" + СокрЛП(Строка.СуффиксУслугиВОСЗН)] = ПолучитьПризнакПраваПолученияКомпенсации_Остальные(Строка, 2);
		КонецЦикла;
		
	// 2.1 Иждивенцы репрессированных.
	ИначеЕсли ТипИнформации = "I" Тогда
		
		Для Каждого Строка Из МассивСтрокНачислений Цикл
			ЗаполняемаяСтрока["SUM"  + СокрЛП(Строка.СуффиксУслугиВОСЗН) + ?(ТипИнформации = "VOD", "OT", "")] = Строка.SUM;
			ЗаполняемаяСтрока["DOP"  + СокрЛП(Строка.СуффиксУслугиВОСЗН) + ?(ТипИнформации = "VOD", "OT", "")] = Строка.DOP;
		КонецЦикла;
		
	// 3. Ветераны труда, сельские специалисты.
	ИначеЕсли ТипИнформации = "V" Или ТипИнформации = "B" Или ТипИнформации = "U" Тогда
		
		Для Каждого Строка Из МассивСтрокНачислений Цикл
			ЗаполняемаяСтрока["PRAV" + СокрЛП(Строка.СуффиксУслугиВОСЗН)] = ПолучитьПризнакПраваПолученияКомпенсации_Остальные(Строка, 3);
		КонецЦикла;
		
	// 4. Многодетные.
	ИначеЕсли ТипИнформации = "E_mk" Или ТипИнформации = "M" Тогда
		
		Для Каждого Строка Из МассивСтрокНачислений Цикл
			ЗаполняемаяСтрока["PRAV" + СокрЛП(Строка.СуффиксУслугиВОСЗН)] = ПолучитьПризнакПраваПолученияКомпенсации_Остальные(Строка, 4);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТекущуюСтрокуДаннымиОНачислениях()

&НаСервереБезКонтекста
// Убирает из наименования лицевого счета не цифровые символы.
// 
Функция ПодготовитьНомерЛСДляВывода(ЛицевойСчет)
	
	НаименованиеЛС = СокрЛП(ЛицевойСчет.Наименование);
	СтрокаДляВозврата = "";
	Пока СтрДлина(НаименованиеЛС) > 0 Цикл
		
		СимволЛС = Лев(НаименованиеЛС, 1);
		Если КодСимвола(СимволЛС) > 47 И КодСимвола(СимволЛС) < 58 Тогда
			СтрокаДляВозврата = СтрокаДляВозврата + СимволЛС;
		КонецЕсли;
		
		НаименованиеЛС = Прав(НаименованиеЛС, СтрДлина(НаименованиеЛС) - 1);
	КонецЦикла;
	
	Возврат СтрокаДляВозврата;
	
КонецФункции // ПодготовитьНомерЛСДляВывода()

&НаСервереБезКонтекста
// Возвращает признак права получения компенсации, согласно п.3.1 формата файла выгрузки по федеральным льготникам.
//
// Параметры:
//  СтрокаНачислений - СтрокаТаблицыЗначений - строка таблицы начислений.
//
// Возвращаемое значение:
//  Число - признак получения компенсации.
//
Функция ПолучитьПризнакПраваПолученияКомпенсации_F(СтрокаНачислений)
	
	Если СтрокаНачислений.КодЛьготнойКатегорииОСЗН <> 1 Тогда
		Возврат 3;
	ИначеЕсли СтрокаНачислений.КоличествоМесяцевЗадолженности < 2 Тогда
		Возврат 1;
	ИначеЕсли (2 <= СтрокаНачислений.КоличествоМесяцевЗадолженности) И (СтрокаНачислений.КоличествоМесяцевЗадолженности < 4) Тогда
		Возврат 5;
	ИначеЕсли СтрокаНачислений.КоличествоМесяцевЗадолженности >= 4 Тогда
		Возврат 2;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ПолучитьПризнакПраваПолученияКомпенсации_F()

&НаСервереБезКонтекста
// Возвращает признак права получения компенсации, согласно п.3.2 формата файла выгрузки по федеральным льготникам.
//
// Параметры:
//  МассивСтрокНачислений - Массив - массив строк таблицы начислений, полученных отбором
//                                   по типу информации и коду получателя ОСЗН.
//
// Возвращаемое значение:
//  Число - признак получения компенсации.
//
Функция ПолучитьПризнакПраваПолученияКомпенсации_K(МассивСтрокНачислений)
	
	Для Каждого Строка Из МассивСтрокНачислений Цикл
		
		// Если хоть одна из строк начислений проходит по федеральным льготникам, то возвращаем призвнак выбора данной категории.
		Если Строка.КодЛьготнойКатегорииОСЗН = 1 Тогда
			Возврат 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат 0;
	
КонецФункции // ПолучитьПризнакПраваПолученияКомпенсации_K()

&НаСервереБезКонтекста
// Возвращает признак права получения компенсации, согласно остальных (отличных от F и K) форматов файлов выгрузки.
//
// Параметры:
//  СтрокаНачислений     - СтрокаТаблицыЗначений - строка таблицы начислений;
//  КодЛьготнойКатегории - Число                 - условный номер льготной категории, как указано на форме настроек.
//
// Возвращаемое значение:
//  Число - признак получения компенсации.
//
Функция ПолучитьПризнакПраваПолученияКомпенсации_Остальные(СтрокаНачислений, КодЛьготнойКатегории)
	
	Если СтрокаНачислений.КодЛьготнойКатегорииОСЗН <> КодЛьготнойКатегории Тогда
		Возврат 3;
	ИначеЕсли (0 <= СтрокаНачислений.КоличествоМесяцевЗадолженности) И (СтрокаНачислений.КоличествоМесяцевЗадолженности < 3) Тогда
		Возврат 1;
	ИначеЕсли СтрокаНачислений.КоличествоМесяцевЗадолженности >= 3 Тогда
		Возврат 2;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ПолучитьПризнакПраваПолученияКомпенсации_Остальные()

&НаСервере
// Возвращает дату срока оплаты в текущем периоде за предыдущие начисления.
//
Функция ДатаСрокОплаты(ОтчетныйПериод = Неопределено)
	
	ОтчетныйПериод = ?(ОтчетныйПериод = Неопределено, Объект.Период, ОтчетныйПериод);
	
	Отказ = Ложь;
	
	Структура = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(КонецМесяца(ОтчетныйПериод), Объект.Организация, Отказ);
	Если Отказ Тогда
		ДатаСрокОплаты = НачалоМесяца(ОтчетныйПериод);
	Иначе
		ДатаСрокОплаты = НачалоМесяца(ОтчетныйПериод) + Структура.ЧислоВнесенияПлатежа * 60 * 60 * 24;
	КонецЕсли;
	
	Возврат ДатаСрокОплаты;
	
КонецФункции // ДатаСрокОплаты()

////////////////////
// Выгрузка файлов

&НаСервереБезКонтекста
// Предназначена для формирования структуры, содержащей сведения о задолженности лицевого счета.
//
// Параметры:
//  ТаблицаВыгрузки - ТаблицаЗначений - выгружаемая в dbf таблица.
//
// Возвращаемое значение:
//  АдресФайлаВХранилище - Строка - адрес передаваемого на клиент dbf во временном хранилище.
//
Функция ВыгрузитьТаблицуВDBF(ТаблицаВыгрузки)
	
	#Если Не ВебКлиент Тогда
		
		АдресФайлаВХранилище = "";
		
		// Производим выгрузку в dbf.
		DBFФайл = Новый XBase;
		DBFФайл.Кодировка = КодировкаXBase.OEM;
		
		// Формируем поля dbf.
		КолонкиDBF = ПолучитьКолонкиDBF(ТаблицаВыгрузки);
		
		Для Каждого Колонка Из КолонкиDBF Цикл
			
			Если Колонка.Тип = "S" Тогда
				
				DBFФайл.Поля.Добавить(Колонка.Имя, Колонка.Тип, Колонка.Длина);
				
			ИначеЕсли Колонка.Тип = "N" Тогда
				
				DBFФайл.Поля.Добавить(Колонка.Имя, Колонка.Тип, Колонка.РазрядностьЦелойЧасти, Колонка.РазрядностьДробнойЧасти);
				
			ИначеЕсли Колонка.Тип = "D" Тогда
				
				DBFФайл.Поля.Добавить(Колонка.Имя, Колонка.Тип, Колонка.ЧастиДаты);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ИмяВременногоФайлаВыгрузки = КаталогВременныхФайлов() + "temp_dbf.dbf";
		DBFФайл.СоздатьФайл(ИмяВременногоФайлаВыгрузки);
		DBFФайл.АвтоСохранение = Истина;
		
		// Запись данных из табличной части в файл выгрузки.
		Для Каждого Строка Из ТаблицаВыгрузки Цикл
			
			DBFФайл.Добавить();
			
			ЗаполнитьЗначенияСвойств(DBFФайл, Строка);
			
			DBFФайл.Записать();
			
		КонецЦикла;
		
		DBFФайл.ЗакрытьФайл();
		
		БинарныйФайл = Новый ДвоичныеДанные(ИмяВременногоФайлаВыгрузки);
		АдресФайлаВХранилище = ПоместитьВоВременноеХранилище(БинарныйФайл, Новый УникальныйИдентификатор);
		УдалитьФайлы(ИмяВременногоФайлаВыгрузки);
		
		Возврат АдресФайлаВХранилище;
		
	#КонецЕсли
	
КонецФункции // ВыгрузитьТаблицуВDBF()

&НаСервереБезКонтекста
// Формирует массив структур, состоящих из параметров для записи полей выгружаемого DBF-файла.
//
// Параметры:
//  ТаблицаВыгрузки - ТаблицаЗначений - таблица, на основе колонок которой подготавливаются поля dbf.
//
// Возвращаемое значение:
//  МассивСтруктурКолонок - Массив - массив подготовленных структур полей dbf.
//
Функция ПолучитьКолонкиDBF(ТаблицаВыгрузки)
	
	МассивСтруктурКолонок = Новый Массив;
	
	Для Каждого Колонка Из ТаблицаВыгрузки.Колонки Цикл
		
		Если Не (Колонка.Имя = "N" Или Колонка.Имя = "ЛицевойСчет") Тогда
			
			// Элемент массива - данные N-ой строки.
			Структура = Новый Структура;
			Структура.Вставить("Имя", Колонка.Имя);
			
			Если Колонка.ТипЗначения.СодержитТип(Тип("Число")) Тогда
				
				Структура.Вставить("Тип",                     "N");
				Структура.Вставить("РазрядностьЦелойЧасти",   Колонка.ТипЗначения.КвалификаторыЧисла.Разрядность - Колонка.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти);
				Структура.Вставить("РазрядностьДробнойЧасти", Колонка.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти);
				
			ИначеЕсли Колонка.ТипЗначения.СодержитТип(Тип("Строка")) Тогда
				
				Структура.Вставить("Тип",   "S");
				Структура.Вставить("Длина", Колонка.ТипЗначения.КвалификаторыСтроки.Длина);
				
			ИначеЕсли Колонка.ТипЗначения.СодержитТип(Тип("Дата")) Тогда
				
				Структура.Вставить("Тип",       "D");
				Структура.Вставить("ЧастиДаты", Колонка.ТипЗначения.КвалификаторыДаты.ЧастиДаты);
				
			КонецЕсли;
			
			МассивСтруктурКолонок.Добавить(Структура);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивСтруктурКолонок;
	
КонецФункции // ПолучитьКолонкиDBF()

&НаКлиенте
// Сохранияет переданные с сервера файлы в указанный каталог выгрузки на клиенте.
//
// Параметры:
//  ПередаваемыеФайлы - Массив - массив возвращаемых на клиент файлов.
//
Процедура ВыгрузитьПереданныеНаКлиентФайлы(ПередаваемыеФайлы)
	
	Для Каждого ПередаваемыйФайл Из ПередаваемыеФайлы Цикл
		
		ИмяФайла = ПередаваемыйФайл.Имя;
		
		ПолноеИмяФайла = Объект.ИмяКаталогаВыгрузки + "\" + ИмяФайла + ".dbf";
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(ПередаваемыйФайл.Хранение);
		ДвоичныеДанные.Записать(ПолноеИмяФайла);
		
	КонецЦикла;
	
КонецПроцедуры // ВыгрузитьПереданныеНаКлиентФайлы()

#КонецОбласти

























