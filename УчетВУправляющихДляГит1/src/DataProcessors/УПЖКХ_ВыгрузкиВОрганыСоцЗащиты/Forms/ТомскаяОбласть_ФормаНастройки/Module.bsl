
#Область ПрочиеПроцедурыИФункции

&НаСервере
// Процедура заполняет таблицу услуг на сервере.
//
Процедура ЗаполнитьТаблицуУслугНаСервере(Идентификатор)
	
	Отбор = Новый Структура;
	Отбор.Вставить("КодУслугиВОСЗН", Идентификатор);
	
	НайденныеСтроки = Объект.ТомскаяОбласть_ЖКУ_ВБазе.Выгрузить(Отбор, "УслугаВБазе");
	
	Для Каждого ТекСтрока из НайденныеСтроки Цикл
		ЗаполнитьЗначенияСвойств(ТП_УслугаВБазе.Добавить(), ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Функция сокращает название города или улицы: убирает сокращения,
// определяющие тип данного элемента адреса: "г.", "ул." и так далее.
//
// Параметры:
//  Ресурс       - Строка - элемент адреса
//
// Возвращаемое значение:
//  Строка - элемент адреса в сокращенном виде
//
Функция НормализацияПолейАдресаОбласти(Ресурс, Массив)
	
	Найден = Истина;
	
	Для Каждого Элемент Из Массив Цикл
		
		Если Прав(СокрЛП(Ресурс), СтрДлина(Элемент)) = Элемент Тогда
			ПредСимвол = Сред(СокрЛП(Ресурс), СтрДлина(СокрЛП(Ресурс)) - СтрДлина(Элемент), 1);
			
			Если ПредСимвол = " " Тогда
				Возврат СокрЛП(Лев(СокрЛП(Ресурс), СтрДлина(СокрЛП(Ресурс)) - СтрДлина(Элемент)));
			КонецЕсли;
		ИначеЕсли Лев(СокрЛП(Ресурс), СтрДлина(Элемент)) = Элемент Тогда
			СледСимвол = Сред(СокрЛП(Ресурс), СтрДлина(Элемент) + 1, 1);
			
			Если СледСимвол = " " Тогда
				Возврат СокрЛП(Сред(СокрЛП(Ресурс), СтрДлина(Элемент) + 1));
			КонецЕсли;
		Иначе
			
			Найден = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Найден = Ложь Тогда
		Возврат Ресурс;
	КонецЕсли;
	
КонецФункции

&НаСервере
// Формирует массив сокращений для Томской области для выбранного вида сокращения.
//
Функция СформироватьМассивСокращениеДляТомскойОблПоВиду(ВидСокращение)
		
	МассивСокращений = Новый Массив;
	// для регионов
	Если ВидСокращение = 1 Тогда
		МассивСокращений.Добавить("обл");
		// для районов
	ИначеЕсли ВидСокращение = 2 Тогда
		МассивСокращений.Добавить("р-н");
		МассивСокращений.Добавить("район");
		// для городов
	ИначеЕсли ВидСокращение = 3 Тогда
		МассивСокращений.Добавить("г");
		// для нас.пунктов
	ИначеЕсли ВидСокращение = 4 Тогда
		МассивСокращений.Добавить("рп");
		МассивСокращений.Добавить("п");
		МассивСокращений.Добавить("с");
		МассивСокращений.Добавить("д");
		МассивСокращений.Добавить("х");
		МассивСокращений.Добавить("ст");
		МассивСокращений.Добавить("пгт");
		МассивСокращений.Добавить("дп");
		МассивСокращений.Добавить("рзд");
		МассивСокращений.Добавить("мкр");
		МассивСокращений.Добавить("нп");
		МассивСокращений.Добавить("тер");
		МассивСокращений.Добавить("п/ст");
		МассивСокращений.Добавить("промзона");
		МассивСокращений.Добавить("снт");
		МассивСокращений.Добавить("п/о");
		МассивСокращений.Добавить("городок");
		МассивСокращений.Добавить("заимка");
		МассивСокращений.Добавить("кп");
		МассивСокращений.Добавить("ж/д_казарм");
		МассивСокращений.Добавить("г");
		МассивСокращений.Добавить("обл");
		МассивСокращений.Добавить("рп.");
		МассивСокращений.Добавить("п.");
		МассивСокращений.Добавить("с.");
		МассивСокращений.Добавить("д.");
		МассивСокращений.Добавить("х.");
		МассивСокращений.Добавить("ст.");
		МассивСокращений.Добавить("пгт.");
		МассивСокращений.Добавить("дп.");
		МассивСокращений.Добавить("рзд.");
		МассивСокращений.Добавить("мкр.");
		МассивСокращений.Добавить("нп.");
		МассивСокращений.Добавить("тер.");
		МассивСокращений.Добавить("п/ст.");
		МассивСокращений.Добавить("промзона.");
		МассивСокращений.Добавить("снт.");
		МассивСокращений.Добавить("п/о.");
		МассивСокращений.Добавить("городок.");
		МассивСокращений.Добавить("заимка.");
		МассивСокращений.Добавить("кп.");
		МассивСокращений.Добавить("ж/д_казарм.");
		МассивСокращений.Добавить("г.");
		МассивСокращений.Добавить("обл.");
		// для улиц
	ИначеЕсли ВидСокращение = 5 Тогда
		МассивСокращений.Добавить("ул");
		МассивСокращений.Добавить("тер");
		МассивСокращений.Добавить("пл");
		МассивСокращений.Добавить("пер");
		МассивСокращений.Добавить("снт");
		МассивСокращений.Добавить("проезд");
		МассивСокращений.Добавить("б-р");
		МассивСокращений.Добавить("туп");
		МассивСокращений.Добавить("п");
		МассивСокращений.Добавить("ш");
		МассивСокращений.Добавить("пр-кт");
		МассивСокращений.Добавить("тракт");
		МассивСокращений.Добавить("сквер");
		МассивСокращений.Добавить("ст");
		МассивСокращений.Добавить("наб");
		МассивСокращений.Добавить("км");
		МассивСокращений.Добавить("ж/д_ст");
		МассивСокращений.Добавить("сад");
		МассивСокращений.Добавить("парк");
		МассивСокращений.Добавить("уч-к");
		МассивСокращений.Добавить("мкр");
		МассивСокращений.Добавить("городок");
		МассивСокращений.Добавить("кв-л");
		МассивСокращений.Добавить("нп");
		МассивСокращений.Добавить("остров");
		МассивСокращений.Добавить("гск");
		МассивСокращений.Добавить("линия");
		МассивСокращений.Добавить("рзд");
		МассивСокращений.Добавить("стр");
		МассивСокращений.Добавить("аллея");
		МассивСокращений.Добавить("казарма");
		МассивСокращений.Добавить("ж/д_рзд");
		МассивСокращений.Добавить("д");
		МассивСокращений.Добавить("ж/д_казарм");
		МассивСокращений.Добавить("ж/д_будка");
		МассивСокращений.Добавить("высел");
		МассивСокращений.Добавить("ул.");
		МассивСокращений.Добавить("тер.");
		МассивСокращений.Добавить("пл.");
		МассивСокращений.Добавить("пер.");
		МассивСокращений.Добавить("снт.");
		МассивСокращений.Добавить("проезд.");
		МассивСокращений.Добавить("б-р.");
		МассивСокращений.Добавить("туп.");
		МассивСокращений.Добавить("п.");
		МассивСокращений.Добавить("ш.");
		МассивСокращений.Добавить("пр-кт.");
		МассивСокращений.Добавить("тракт.");
		МассивСокращений.Добавить("сквер.");
		МассивСокращений.Добавить("ст.");
		МассивСокращений.Добавить("наб.");
		МассивСокращений.Добавить("км.");
		МассивСокращений.Добавить("ж/д_ст.");
		МассивСокращений.Добавить("сад.");
		МассивСокращений.Добавить("парк.");
		МассивСокращений.Добавить("уч-к.");
		МассивСокращений.Добавить("мкр.");
		МассивСокращений.Добавить("городок.");
		МассивСокращений.Добавить("кв-л.");
		МассивСокращений.Добавить("нп.");
		МассивСокращений.Добавить("остров.");
		МассивСокращений.Добавить("гск.");
		МассивСокращений.Добавить("линия.");
		МассивСокращений.Добавить("рзд.");
		МассивСокращений.Добавить("стр.");
		МассивСокращений.Добавить("аллея.");
		МассивСокращений.Добавить("казарма.");
		МассивСокращений.Добавить("ж/д_рзд.");
		МассивСокращений.Добавить("д.");
		МассивСокращений.Добавить("ж/д_казарм.");
		МассивСокращений.Добавить("ж/д_будка.");
		МассивСокращений.Добавить("высел.");
	КонецЕсли;
	
	Возврат МассивСокращений;
	
КонецФункции // СформироватьМассивСокращениеДляСвердловскойОблПоВиду()

&НаСервере
// Процедура считывает данные из указанного файла услуг.
//
Процедура СчитатьИзФайлаУслугиНаСервере(СоответствиеАдресов)
	
	Для Каждого СтрокаАдреса ИЗ СоответствиеАдресов Цикл
		
		врДанныеФайла = ПолучитьИзВременногоХранилища(СтрокаАдреса.Значение);
		
		ИмяВременногоФайла = КаталогВременныхФайлов() + Лев(СтрокаАдреса.Ключ, 4) + ".DBF";
		
		врДанныеФайла.Записать(ИмяВременногоФайла);
		
	КонецЦикла;
	
	// Загрузка услуг.
	ФайлДБФ = Новый XBase;
	ФайлДБФ.Кодировка = КодировкаXBase.OEM;
	ФайлДБФ.ОткрытьФайл(ИмяВременногоФайла, ,Истина);
	
	Если ФайлДБФ.Открыта() Тогда
		
		Объект.ТомскаяОбласть_ЖКУ.Очистить();
		
		Пока Не ФайлДБФ.ВКонце() Цикл
			
			НоваяЗапись = Объект.ТомскаяОбласть_ЖКУ.Добавить();
			НоваяЗапись.code      = ФайлДБФ.code;
			НоваяЗапись.name      = СокрЛП(ФайлДБФ.name);
			
			ФайлДБФ.Следующая();
			
		КонецЦикла;
		
		ФайлДБФ.ЗакрытьФайл();
		
		Объект.ТомскаяОбласть_ЖКУ_ВБазе.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры // СчитатьИзФайлаУслуги()

&НаСервере
// Процедура считывает данные из указанного файла районов.
//
Процедура СчитатьИзФайлаРайоныНаСервере(СоответствиеАдресов)
	
	Для Каждого СтрокаАдреса ИЗ СоответствиеАдресов Цикл
		
		врДанныеФайла = ПолучитьИзВременногоХранилища(СтрокаАдреса.Значение);
		
		ИмяВременногоФайла = КаталогВременныхФайлов() + Лев(СтрокаАдреса.Ключ, 4) + ".DBF";
		
		врДанныеФайла.Записать(ИмяВременногоФайла);
		
	КонецЦикла;
	
	// Загрузка районов.
	ФайлДБФ = Новый XBase;
	ФайлДБФ.Кодировка = КодировкаXBase.OEM;
	ФайлДБФ.ОткрытьФайл(ИмяВременногоФайла, ,Истина);
	
	Если ФайлДБФ.Открыта() Тогда
		
		Объект.ТомскаяОбласть_Районы.Очистить();
		
		МассивСокрРайонов = СформироватьМассивСокращениеДляТомскойОблПоВиду(2);
		
		Пока Не ФайлДБФ.ВКонце() Цикл
			
			НоваяЗапись = Объект.ТомскаяОбласть_Районы.Добавить();
			НоваяЗапись.area_name = ВРег(НормализацияПолейАдресаОбласти(СокрЛП(ФайлДБФ.area_name), МассивСокрРайонов));
			НоваяЗапись.code_area = ФайлДБФ.code_area;
			НоваяЗапись.owner     = ФайлДБФ.owner;
			
			ФайлДБФ.Следующая();
			
		КонецЦикла;
		
		ФайлДБФ.ЗакрытьФайл();
		
	КонецЕсли;
	
КонецПроцедуры // СчитатьИзФайлаРайоны()

&НаСервере
// Процедура считывает данные из указанного файла населенных пунктов.
//
Процедура СчитатьИзФайлаНаселенныеПунктыНаСервере(СоответствиеАдресов)
	
	Для Каждого СтрокаАдреса ИЗ СоответствиеАдресов Цикл
		
		врДанныеФайла = ПолучитьИзВременногоХранилища(СтрокаАдреса.Значение);
		
		ИмяВременногоФайла = КаталогВременныхФайлов() + Лев(СтрокаАдреса.Ключ, 4) + ".DBF";
		
		врДанныеФайла.Записать(ИмяВременногоФайла);
		
	КонецЦикла;
	
	// Загрузка населенных пунктов.
	ФайлДБФ = Новый XBase;
	ФайлДБФ.Кодировка = КодировкаXBase.OEM;
	ФайлДБФ.ОткрытьФайл(ИмяВременногоФайла,,Истина);
	
	Если ФайлДБФ.Открыта() Тогда
		
		Объект.ТомскаяОбласть_НаселенныеПункты.Очистить();
		
		МассивСокрНасПунктов = СформироватьМассивСокращениеДляТомскойОблПоВиду(4);
		
		Пока Не ФайлДБФ.ВКонце() Цикл
			
			НоваяЗапись = Объект.ТомскаяОбласть_НаселенныеПункты.Добавить();
			НоваяЗапись.code_area  = ФайлДБФ.code_area;
			НоваяЗапись.code_place = ФайлДБФ.code_place;
			НоваяЗапись.place_name = ВРег(НормализацияПолейАдресаОбласти(СокрЛП(ФайлДБФ.place_name), МассивСокрНасПунктов));
			
			ФайлДБФ.Следующая();
			
		КонецЦикла;
		
		ФайлДБФ.ЗакрытьФайл();
		
	КонецЕсли;
	
КонецПроцедуры // СчитатьИзФайлаНаселенныеПунктыНаСервере()

&НаСервере
// Процедура считывает данные из указанного файла улиц.
//
Процедура СчитатьИзФайлаУлицыНаСервере(СоответствиеАдресов)
	
	Для Каждого СтрокаАдреса ИЗ СоответствиеАдресов Цикл
		
		врДанныеФайла = ПолучитьИзВременногоХранилища(СтрокаАдреса.Значение);
		
		ИмяВременногоФайла = КаталогВременныхФайлов() + Лев(СтрокаАдреса.Ключ, 4) + ".DBF";
		
		врДанныеФайла.Записать(ИмяВременногоФайла);
		
	КонецЦикла;
	
	// Загрузка улиц.
	ФайлДБФ = Новый XBase;
	ФайлДБФ.Кодировка = КодировкаXBase.OEM;
	ФайлДБФ.ОткрытьФайл(ИмяВременногоФайла, ,Истина);
	
	Если ФайлДБФ.Открыта() Тогда
		
		Объект.ТомскаяОбласть_Улицы.Очистить();
		
		МассивСокрУлиц = СформироватьМассивСокращениеДляТомскойОблПоВиду(5);
		
		Пока Не ФайлДБФ.ВКонце() Цикл
			
			НоваяЗапись = Объект.ТомскаяОбласть_Улицы.Добавить();
			НоваяЗапись.code_area  = ФайлДБФ.code_area;
			НоваяЗапись.code_place = ФайлДБФ.code_place;
			НоваяЗапись.code_stree = ФайлДБФ.code_stree;
			НоваяЗапись.street_nam = ВРег(НормализацияПолейАдресаОбласти(СокрЛП(ФайлДБФ.street_nam), МассивСокрУлиц));
			
			ФайлДБФ.Следующая();
			
		КонецЦикла;
		
		ФайлДБФ.ЗакрытьФайл();
		
	КонецЕсли;
	
КонецПроцедуры // СчитатьИзФайлаУлицы()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// РАБОТА С ВРЕМЕННЫМ ХРАНИЛИЩЕМ

#Область РаботаСВременнымХранилищем

&НаСервере
// Помещает настройки во временное хранилище.
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("КаталогЗагрузки",                 КаталогЗагрузки);
	СтруктураНастроек.Вставить("ТомскаяОбласть_ЖКУ",              Объект.ТомскаяОбласть_ЖКУ.Выгрузить());
	СтруктураНастроек.Вставить("ТомскаяОбласть_ЖКУ_ВБазе",        Объект.ТомскаяОбласть_ЖКУ_ВБазе.Выгрузить());
	СтруктураНастроек.Вставить("ТомскаяОбласть_ЖКУ_Отопление",    Объект.ТомскаяОбласть_ЖКУ_Отопление.Выгрузить());
	СтруктураНастроек.Вставить("ТомскаяОбласть_НаселенныеПункты", Объект.ТомскаяОбласть_НаселенныеПункты.Выгрузить());
	СтруктураНастроек.Вставить("ТомскаяОбласть_Районы",           Объект.ТомскаяОбласть_Районы.Выгрузить());
	СтруктураНастроек.Вставить("ТомскаяОбласть_Улицы",            Объект.ТомскаяОбласть_Улицы.Выгрузить());
	
	СтруктураНастроек.Вставить("ЭлектрическийНагреватель", ЭлектрическийНагреватель);
	СтруктураНастроек.Вставить("ГазовыйКотел",             ГазовыйКотел);
	СтруктураНастроек.Вставить("КатегорияБлагоустройства", КатегорияБлагоустройства);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПризнакУдаления = Ложь;
	
	// Получаем настройки из хранилища.
	Если Параметры.Свойство("АдресНастроекВХранилище") И Не Параметры.АдресНастроекВХранилище = Неопределено Тогда
		
		СтруктураНастроек = ПолучитьИзВременногоХранилища(Параметры.АдресНастроекВХранилище);
		
		Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
			
			СтруктураНастроек.Свойство("КаталогЗагрузки", КаталогЗагрузки);
			
			СтруктураНастроек.Свойство("ЭлектрическийНагреватель", ЭлектрическийНагреватель);
			СтруктураНастроек.Свойство("ГазовыйКотел",             ГазовыйКотел);
			СтруктураНастроек.Свойство("КатегорияБлагоустройства", КатегорияБлагоустройства);
			
			Если СтруктураНастроек.Свойство("ТомскаяОбласть_ЖКУ") Тогда
				Объект.ТомскаяОбласть_ЖКУ.Загрузить(СтруктураНастроек.ТомскаяОбласть_ЖКУ);
			КонецЕсли;
			
			Если СтруктураНастроек.Свойство("ТомскаяОбласть_ЖКУ_ВБазе") Тогда
				Объект.ТомскаяОбласть_ЖКУ_ВБазе.Загрузить(СтруктураНастроек.ТомскаяОбласть_ЖКУ_ВБазе);
			КонецЕсли;
			
			Если СтруктураНастроек.Свойство("ТомскаяОбласть_ЖКУ_Отопление") Тогда
				Объект.ТомскаяОбласть_ЖКУ_Отопление.Загрузить(СтруктураНастроек.ТомскаяОбласть_ЖКУ_Отопление);
			КонецЕсли;
			
			Если СтруктураНастроек.Свойство("ТомскаяОбласть_НаселенныеПункты") Тогда
				Объект.ТомскаяОбласть_НаселенныеПункты.Загрузить(СтруктураНастроек.ТомскаяОбласть_НаселенныеПункты);
			КонецЕсли;
			
			Если СтруктураНастроек.Свойство("ТомскаяОбласть_Районы") Тогда
				Объект.ТомскаяОбласть_Районы.Загрузить(СтруктураНастроек.ТомскаяОбласть_Районы);
			КонецЕсли;
			
			Если СтруктураНастроек.Свойство("ТомскаяОбласть_Улицы") Тогда
				Объект.ТомскаяОбласть_Улицы.Загрузить(СтруктураНастроек.ТомскаяОбласть_Улицы);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиенте();
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "КомандаСохранить".
Процедура КомандаСохранить(Команда)
	
	Закрыть(ПоместитьНастройкиВХранилище());
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаЗаполнитьУслуги".
Процедура КомандаЗаполнитьУслуги(Команда)
	
	Если РасширениеПодключено И ПустаяСтрока(КаталогЗагрузки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указан каталог загрузки!");
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатПомещенияУслугВХранилище", ЭтаФорма);
	
	Если РасширениеПодключено Тогда
		
		// Проверяем каталог выгрузки на существование.
		
		КаталогЗагрузкиФайл = Новый Файл(КаталогЗагрузки);
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("КаталогЗагрузкиФайл", КаталогЗагрузкиФайл);
		
		КаталогЗагрузкиФайл.НачатьПроверкуСуществования(Новый ОписаниеОповещения("КаталогЗагрузкиУслугСуществуетЗавершение", ЭтотОбъект, ДополнительныеПараметры));
		
		Возврат;
		
	Иначе
		СоответствиеИмениИАдреса = Новый Соответствие();
		СоответствиеИмениИАдреса.Вставить("",);
		МассивЗагружаемыхФайлов = УПЖКХ_РаботаСФайламиСервер.ПолучитьМассивПередаваемыхФайлов(СоответствиеИмениИАдреса);
	КонецЕсли;
	
	УПЖКХ_РаботаСФайламиКлиент.ЗагрузитьФайл(РасширениеПодключено, ОписаниеОповещения, МассивЗагружаемыхФайлов);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьИзФайлаРайоны(Команда)
	
	Если РасширениеПодключено И ПустаяСтрока(КаталогЗагрузки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указан каталог загрузки!");
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатПомещенияРайоновВХранилище", ЭтаФорма);
	
	Если РасширениеПодключено Тогда
		
		// Проверяем каталог выгрузки на существование.
		
		КаталогЗагрузкиФайл = Новый Файл(КаталогЗагрузки);
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("КаталогЗагрузкиФайл", КаталогЗагрузкиФайл);
		
		КаталогЗагрузкиФайл.НачатьПроверкуСуществования(Новый ОписаниеОповещения("КаталогЗагрузкиРайоновСуществуетЗавершение", ЭтотОбъект, ДополнительныеПараметры));
		
		Возврат;
		
	Иначе
		СоответствиеИмениИАдреса = Новый Соответствие();
		СоответствиеИмениИАдреса.Вставить("",);
		МассивЗагружаемыхФайлов = УПЖКХ_РаботаСФайламиСервер.ПолучитьМассивПередаваемыхФайлов(СоответствиеИмениИАдреса);
	КонецЕсли;
	
	УПЖКХ_РаботаСФайламиКлиент.ЗагрузитьФайл(РасширениеПодключено, ОписаниеОповещения, МассивЗагружаемыхФайлов);
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата опроса команды "КомандаЗаполнитьВсе".
Процедура КомандаЗаполнитьРайоныЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СчитатьИзФайлаРайоныНаСервере(ДополнительныеПараметры.СоответствиеАдресов);
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьРайоныЗавершение()

&НаКлиенте
Процедура КомандаЗагрузитьИзФайлаНаселенныеПункты(Команда)
	
	Если РасширениеПодключено И ПустаяСтрока(КаталогЗагрузки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указан каталог загрузки!");
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатПомещенияНаселенныхПунктовВХранилище", ЭтаФорма);
	
	Если РасширениеПодключено Тогда
		
		// Проверяем каталог выгрузки на существование.
		
		КаталогЗагрузкиФайл = Новый Файл(КаталогЗагрузки);
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("КаталогЗагрузкиФайл", КаталогЗагрузкиФайл);
		
		КаталогЗагрузкиФайл.НачатьПроверкуСуществования(Новый ОписаниеОповещения("КаталогЗагрузкиНаселенныхПунктовСуществуетЗавершение", ЭтотОбъект, ДополнительныеПараметры));
		
		Возврат;
		
	Иначе
		СоответствиеИмениИАдреса = Новый Соответствие();
		СоответствиеИмениИАдреса.Вставить("",);
		МассивЗагружаемыхФайлов = УПЖКХ_РаботаСФайламиСервер.ПолучитьМассивПередаваемыхФайлов(СоответствиеИмениИАдреса);
	КонецЕсли;
	
	УПЖКХ_РаботаСФайламиКлиент.ЗагрузитьФайл(РасширениеПодключено, ОписаниеОповещения, МассивЗагружаемыхФайлов);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьИзФайлаУлицы(Команда)
	
	Если РасширениеПодключено И ПустаяСтрока(КаталогЗагрузки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указан каталог загрузки!");
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатПомещенияУлицВХранилище", ЭтаФорма);
	
	Если РасширениеПодключено Тогда
		
		// Проверяем каталог выгрузки на существование.
		
		КаталогЗагрузкиФайл = Новый Файл(КаталогЗагрузки);
		
		ДополнительныеПараметры = Новый Структура();
		ДополнительныеПараметры.Вставить("КаталогЗагрузкиФайл", КаталогЗагрузкиФайл);
		
		КаталогЗагрузкиФайл.НачатьПроверкуСуществования(Новый ОписаниеОповещения("КаталогЗагрузкиУлицСуществуетЗавершение", ЭтотОбъект, ДополнительныеПараметры));
		
		Возврат;
		
	Иначе
		СоответствиеИмениИАдреса = Новый Соответствие();
		СоответствиеИмениИАдреса.Вставить("",);
		МассивЗагружаемыхФайлов = УПЖКХ_РаботаСФайламиСервер.ПолучитьМассивПередаваемыхФайлов(СоответствиеИмениИАдреса);
	КонецЕсли;
	
	УПЖКХ_РаботаСФайламиКлиент.ЗагрузитьФайл(РасширениеПодключено, ОписаниеОповещения, МассивЗагружаемыхФайлов);
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата опроса команды "КомандаЗаполнитьВсе".
Процедура КомандаЗаполнитьУлицыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СчитатьИзФайлаУлицыНаСервере(ДополнительныеПараметры.СоответствиеАдресов);
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьУлицыЗавершение()

&НаКлиенте
// Процедура - обработчик завершения работы процедуры "НачатьПроверкуСуществования".
//
Процедура КаталогЗагрузкиУслугСуществуетЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	КаталогЗагрузкиФайл = ДополнительныеПараметры.КаталогЗагрузкиФайл;
	
	Если Не Существует Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран каталог файла выгрузки!");
		Возврат;
	КонецЕсли;
	
	КаталогЗагрузкиФайл.НачатьПроверкуЭтоКаталог(Новый ОписаниеОповещения("КаталогЗагрузкиУслугЭтоКаталогЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик результата работы процедуры "НачатьПроверкуЭтоКаталог".
//
Процедура КаталогЗагрузкиУслугЭтоКаталогЗавершение(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Если Не ЭтоКаталог Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран каталог файла выгрузки!");
		Возврат;
	КонецЕсли;
	
	НачатьПоискФайлов(Новый ОписаниеОповещения("КомандаЗаполнитьНайтиФайлУслуг", ЭтотОбъект),
											   КаталогЗагрузки, "usluga.dbf", Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения поиска файлов для загрузки районов.
Процедура КомандаЗаполнитьНайтиФайлУслуг(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	ФайлыИзКаталога = НайденныеФайлы;
	Если ФайлыИзКаталога.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено,"Каталог пуст и не содержит файла ""usluga.dbf""!");
		Возврат;
	КонецЕсли;
	
	ПомещаемыеФайлы = Новый Массив;
	Для Каждого ФайлЗагрузки Из ФайлыИзКаталога Цикл
		ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ФайлЗагрузки.ПолноеИмя));
	КонецЦикла;
	
	Описание = Новый ОписаниеОповещения("ОбработатьРезультатПомещенияУслугВХранилище", ЭтаФорма);
	НачатьПомещениеФайлов(Описание, ПомещаемыеФайлы,, Ложь, Новый УникальныйИдентификатор);
	
КонецПроцедуры // КомандаЗаполнитьНайтиФайлУслуг()

&НаКлиенте
// Обработчик результата помещения файла в хранилище.
Процедура ОбработатьРезультатПомещенияУслугВХранилище(ПомещенныеФайлы, ДопПараметры) Экспорт
	
	// Приходит значение Неопределено, если пользователь отменил выбор файла в веб клиенте,
	// при этом плагин "Расширение для работы с 1С:Предприятием" не подключен.
	Если ПомещенныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПомещенныеФайлы.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, "Произошла ошибка при получении файла ""usluga.dbf""!");
		Возврат;
	КонецЕсли;
	
	СоответствиеАдресов = Новый Соответствие;
	Для Каждого ТекОписаниеФайла Из ПомещенныеФайлы Цикл
		ТекФайл = Новый Файл(ТекОписаниеФайла.Имя);
		СоответствиеАдресов.Вставить(ТекФайл.ИмяБезРасширения, ТекОписаниеФайла.Хранение);
	КонецЦикла;
	
	Если Объект.ТомскаяОбласть_ЖКУ.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаЗаполнитьУслугЗавершение", ЭтотОбъект, Новый Структура("СоответствиеАдресов", СоответствиеАдресов));
		
		ТекстВопроса = "Перед заполением таблица услуг будет очищена. Продолжить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		
	Иначе
		
		СчитатьИзФайлаУслугиНаСервере(СоответствиеАдресов);
		
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатПомещенияУслугВХранилище()

&НаКлиенте
// Обработчик результата опроса команды "КомандаЗаполнитьВсе".
Процедура КомандаЗаполнитьУслугЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		СчитатьИзФайлаУслугиНаСервере(ДополнительныеПараметры.СоответствиеАдресов);
		
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьУслугЗавершение()


&НаКлиенте
// Процедура - обработчик завершения работы процедуры "НачатьПроверкуСуществования".
//
Процедура КаталогЗагрузкиРайоновСуществуетЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	КаталогЗагрузкиФайл = ДополнительныеПараметры.КаталогЗагрузкиФайл;
	
	Если Не Существует Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран каталог файла выгрузки!");
		Возврат;
	КонецЕсли;
	
	КаталогЗагрузкиФайл.НачатьПроверкуЭтоКаталог(Новый ОписаниеОповещения("КаталогЗагрузкиРайоновЭтоКаталогЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик результата работы процедуры "НачатьПроверкуЭтоКаталог".
//
Процедура КаталогЗагрузкиРайоновЭтоКаталогЗавершение(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Если Не ЭтоКаталог Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран каталог файла выгрузки!");
		Возврат;
	КонецЕсли;
	
	НачатьПоискФайлов(Новый ОписаниеОповещения("КомандаЗаполнитьНайтиФайлРайоны", ЭтотОбъект),
											   КаталогЗагрузки, "area.dbf", Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения поиска файлов для загрузки районов.
Процедура КомандаЗаполнитьНайтиФайлРайоны(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	ФайлыИзКаталога = НайденныеФайлы;
	Если ФайлыИзКаталога.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено,"Каталог пуст и не содержит файла ""area.dbf""!");
		Возврат;
	КонецЕсли;
	
	ПомещаемыеФайлы = Новый Массив;
	Для Каждого ФайлЗагрузки Из ФайлыИзКаталога Цикл
		ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ФайлЗагрузки.ПолноеИмя));
	КонецЦикла;
	
	Описание = Новый ОписаниеОповещения("ОбработатьРезультатПомещенияРайоновВХранилище", ЭтаФорма);
	НачатьПомещениеФайлов(Описание, ПомещаемыеФайлы,, Ложь, Новый УникальныйИдентификатор);
	
КонецПроцедуры // КомандаЗаполнитьНайтиФайлРайоны()

&НаКлиенте
// Обработчик результата помещения файла в хранилище.
Процедура ОбработатьРезультатПомещенияРайоновВХранилище(ПомещенныеФайлы, ДопПараметры) Экспорт
	
	// Приходит значение Неопределено, если пользователь отменил выбор файла в веб клиенте,
	// при этом плагин "Расширение для работы с 1С:Предприятием" не подключен.
	Если ПомещенныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПомещенныеФайлы.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, "Произошла ошибка при получении файла ""area.dbf""!");
		Возврат;
	КонецЕсли;
	
	СоответствиеАдресов = Новый Соответствие;
	Для Каждого ТекОписаниеФайла Из ПомещенныеФайлы Цикл
		ТекФайл = Новый Файл(ТекОписаниеФайла.Имя);
		СоответствиеАдресов.Вставить(ТекФайл.ИмяБезРасширения, ТекОписаниеФайла.Хранение);
	КонецЦикла;
	
	Если Объект.ТомскаяОбласть_Районы.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаЗаполнитьРайоныЗавершение", ЭтотОбъект, Новый Структура("СоответствиеАдресов", СоответствиеАдресов));
		
		ТекстВопроса = "Перед заполением таблица районов будет очищена. Продолжить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		
	Иначе
		СчитатьИзФайлаРайоныНаСервере(СоответствиеАдресов);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатПомещенияФайлаВХранилище()

&НаКлиенте
// Процедура - обработчик завершения работы процедуры "НачатьПроверкуСуществования".
//
Процедура КаталогЗагрузкиНаселенныхПунктовСуществуетЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	КаталогЗагрузкиФайл = ДополнительныеПараметры.КаталогЗагрузкиФайл;
	
	Если Не Существует Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран каталог файла выгрузки!");
		Возврат;
	КонецЕсли;
	
	КаталогЗагрузкиФайл.НачатьПроверкуЭтоКаталог(Новый ОписаниеОповещения("КаталогЗагрузкиНаселенныхПунктовЭтоКаталогЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик результата работы процедуры "НачатьПроверкуЭтоКаталог".
//
Процедура КаталогЗагрузкиНаселенныхПунктовЭтоКаталогЗавершение(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Если Не ЭтоКаталог Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран каталог файла выгрузки!");
		Возврат;
	КонецЕсли;
	
	НачатьПоискФайлов(Новый ОписаниеОповещения("КомандаЗаполнитьНайтиФайлНаселенныеПункты", ЭтотОбъект),
											   КаталогЗагрузки, "place.dbf", Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения поиска файлов для загрузки районов.
Процедура КомандаЗаполнитьНайтиФайлНаселенныеПункты(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	ФайлыИзКаталога = НайденныеФайлы;
	Если ФайлыИзКаталога.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено,"Каталог пуст и не содержит файла ""place.dbf""!");
		Возврат;
	КонецЕсли;
	
	ПомещаемыеФайлы = Новый Массив;
	Для Каждого ФайлЗагрузки Из ФайлыИзКаталога Цикл
		ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ФайлЗагрузки.ПолноеИмя));
	КонецЦикла;
	
	Описание = Новый ОписаниеОповещения("ОбработатьРезультатПомещенияНаселенныхПунктовВХранилище", ЭтаФорма);
	НачатьПомещениеФайлов(Описание, ПомещаемыеФайлы,, Ложь, Новый УникальныйИдентификатор);
	
КонецПроцедуры // КомандаЗаполнитьНайтиФайлНаселенныеПункты()

&НаКлиенте
// Обработчик результата помещения файла в хранилище.
Процедура ОбработатьРезультатПомещенияНаселенныхПунктовВХранилище(ПомещенныеФайлы, ДопПараметры) Экспорт
	
	// Приходит значение Неопределено, если пользователь отменил выбор файла в веб клиенте,
	// при этом плагин "Расширение для работы с 1С:Предприятием" не подключен.
	Если ПомещенныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПомещенныеФайлы.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, "Произошла ошибка при получении файла ""place.dbf""!");
		Возврат;
	КонецЕсли;
	
	СоответствиеАдресов = Новый Соответствие;
	Для Каждого ТекОписаниеФайла Из ПомещенныеФайлы Цикл
		ТекФайл = Новый Файл(ТекОписаниеФайла.Имя);
		СоответствиеАдресов.Вставить(ТекФайл.ИмяБезРасширения, ТекОписаниеФайла.Хранение);
	КонецЦикла;
	
	Если Объект.ТомскаяОбласть_НаселенныеПункты.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаЗаполнитьНаселенныеПунктыЗавершение", ЭтотОбъект, Новый Структура("СоответствиеАдресов", СоответствиеАдресов));
		
		ТекстВопроса = "Перед заполением таблица населенных пунктов будет очищена. Продолжить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		
	Иначе
		СчитатьИзФайлаНаселенныеПунктыНаСервере(СоответствиеАдресов);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатПомещенияНаселенныхПунктовВХранилище()

&НаКлиенте
// Обработчик результата опроса команды "КомандаЗаполнитьВсе".
Процедура КомандаЗаполнитьНаселенныеПунктыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СчитатьИзФайлаНаселенныеПунктыНаСервере(ДополнительныеПараметры.СоответствиеАдресов);
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьНаселенныеПунктыЗавершение()

&НаКлиенте
// Процедура - обработчик завершения работы процедуры "НачатьПроверкуСуществования".
//
Процедура КаталогЗагрузкиУлицСуществуетЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	КаталогЗагрузкиФайл = ДополнительныеПараметры.КаталогЗагрузкиФайл;
	
	Если Не Существует Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран каталог файла выгрузки!");
		Возврат;
	КонецЕсли;
	
	КаталогЗагрузкиФайл.НачатьПроверкуЭтоКаталог(Новый ОписаниеОповещения("КаталогЗагрузкиУлицЭтоКаталогЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик результата работы процедуры "НачатьПроверкуЭтоКаталог".
//
Процедура КаталогЗагрузкиУлицЭтоКаталогЗавершение(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Если Не ЭтоКаталог Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран каталог файла выгрузки!");
		Возврат;
	КонецЕсли;
	
	НачатьПоискФайлов(Новый ОписаниеОповещения("КомандаЗаполнитьНайтиФайлУлицы", ЭтотОбъект),
											   КаталогЗагрузки, "streets.dbf", Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения поиска файлов для загрузки районов.
Процедура КомандаЗаполнитьНайтиФайлУлицы(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	ФайлыИзКаталога = НайденныеФайлы;
	Если ФайлыИзКаталога.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено,"Каталог пуст и не содержит файла ""streets.dbf""!");
		Возврат;
	КонецЕсли;
	
	ПомещаемыеФайлы = Новый Массив;
	Для Каждого ФайлЗагрузки Из ФайлыИзКаталога Цикл
		ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ФайлЗагрузки.ПолноеИмя));
	КонецЦикла;
	
	Описание = Новый ОписаниеОповещения("ОбработатьРезультатПомещенияУлицВХранилище", ЭтаФорма);
	НачатьПомещениеФайлов(Описание, ПомещаемыеФайлы,, Ложь, Новый УникальныйИдентификатор);
	
КонецПроцедуры // КомандаЗаполнитьНайтиФайлУлицы()

&НаКлиенте
// Обработчик результата помещения файла в хранилище.
Процедура ОбработатьРезультатПомещенияУлицВХранилище(ПомещенныеФайлы, ДопПараметры) Экспорт
	
	// Приходит значение Неопределено, если пользователь отменил выбор файла в веб клиенте,
	// при этом плагин "Расширение для работы с 1С:Предприятием" не подключен.
	Если ПомещенныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПомещенныеФайлы.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, "Произошла ошибка при получении файла ""streets.dbf""!");
		Возврат;
	КонецЕсли;
	
	СоответствиеАдресов = Новый Соответствие;
	Для Каждого ТекОписаниеФайла Из ПомещенныеФайлы Цикл
		ТекФайл = Новый Файл(ТекОписаниеФайла.Имя);
		СоответствиеАдресов.Вставить(ТекФайл.ИмяБезРасширения, ТекОписаниеФайла.Хранение);
	КонецЦикла;
	
	Если Объект.ТомскаяОбласть_Улицы.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаЗаполнитьУлицыЗавершение", ЭтотОбъект, Новый Структура("СоответствиеАдресов", СоответствиеАдресов));
		
		ТекстВопроса = "Перед заполением таблица улиц будет очищена. Продолжить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		
	Иначе
		СчитатьИзФайлаУлицыНаСервере(СоответствиеАдресов);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатПомещенияУлицВХранилище()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Имя каталога".
//
Процедура ИмяФайлаЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_РаботаСФайламиКлиент.ВыбратьКаталог(ЭтаФорма, "Выбор каталога загрузки", КаталогЗагрузки);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик результата работы диалога выбора файла
//
Процедура ИмяФайлаЗагрузкиНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		КаталогЗагрузки = ДиалогВыбораФайла.Каталог;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Имя каталога".
//
Процедура ИмяФайлаЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	
	СтандартнаяОбработка = Ложь;
	
	УПЖКХ_РаботаСФайламиКлиент.ОткрытиеФайлаКаталога(КаталогЗагрузки, Истина);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик результата запуска приложения
//
Процедура ИмяФайлаЗагрузкиОткрытиеЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	// Заглушка, т.к. в НачатьЗапускПриложения первый параметр обязательный
	ЭтаПеременнаяЧтобыНеРугаласьПроверкаКонфигурацииНаПустойОбработчик = Неопределено;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" табличного поля "ТП_УслугаВБазе".
//
Процедура ТП_УслугаВБазеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Устанавливаем запрет на добавление строк копированием.
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" табличного поля "ТП_УслугаВБазе".
//
Процедура ТП_УслугаВБазеПередУдалением(Элемент, Отказ)
	
	Если ПризнакУдаления Тогда
		Отказ = Истина;
		ПризнакУдаления = Ложь;
	Иначе
		// При удалении строки удаляем соответствующие записи в ТомскаяОбласть_ЖКУ_ВБазе.
		УслугаВБазе              = Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе;
		ИдентификаторУслугиВОСЗН = Элементы.ТомскаяОбласть_ЖКУ.ТекущиеДанные.code;
		УслугаВОСЗН              = Элементы.ТомскаяОбласть_ЖКУ.ТекущиеДанные.name;
		
		Отбор = Новый Структура;
		Отбор.Вставить("УслугаВБазе",    УслугаВБазе);
		Отбор.Вставить("КодУслугиВОСЗН", ИдентификаторУслугиВОСЗН);
		Отбор.Вставить("УслугаВОСЗН",    УслугаВОСЗН);
		
		СтрокиУдаления = Объект.ТомскаяОбласть_ЖКУ_ВБазе.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
			Объект.ТомскаяОбласть_ЖКУ_ВБазе.Удалить(СтрокаУдаления);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередОкончаниемРедактирования" таблицы "УслугаВБазе".
//
Процедура ТП_УслугаВБазеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Добавление незаполненных полей недопустимо!");
		ПризнакУдаления = Истина;
		ТП_УслугаВБазе.Удалить(Элементы.ТП_УслугаВБазе.ТекущиеДанные);
		
		Если ЗначениеЗаполнено(ПредыдущаяУслуга) Тогда
			Идентификатор   = Элементы.ТомскаяОбласть_ЖКУ.ТекущиеДанные.code;
			ПризнакУдаления = Истина;
			Отбор = Новый Структура;
			Отбор.Вставить("КодУслугиВОСЗН", Идентификатор);
			Отбор.Вставить("УслугаВБазе",    ПредыдущаяУслуга);
			
			СтрокиУдаления = Объект.ТомскаяОбласть_ЖКУ_ВБазе.НайтиСтроки(Отбор);
			
			Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
				Объект.ТомскаяОбласть_ЖКУ_ВБазе.Удалить(СтрокаУдаления);
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриОкончанииРедактирования" табличного поля "ТП_УслугаВБазе".
//
Процедура ТП_УслугаВБазеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		// Добавляем запись в ТомскаяОбласть_ЖКУ_ВБазе.
		УслугаВБазе              = Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе;
		ИдентификаторУслугиВОСЗН = Элементы.ТомскаяОбласть_ЖКУ.ТекущиеДанные.code;
		УслугаВОСЗН              = Элементы.ТомскаяОбласть_ЖКУ.ТекущиеДанные.name;
		
		Если НоваяСтрока Тогда
			НоваяСтрокаСоответствия                = Объект.ТомскаяОбласть_ЖКУ_ВБазе.Добавить();
			НоваяСтрокаСоответствия.УслугаВБазе    = УслугаВБазе;
			НоваяСтрокаСоответствия.КодУслугиВОСЗН = ИдентификаторУслугиВОСЗН;
			НоваяСтрокаСоответствия.УслугаВОСЗН    = УслугаВОСЗН;
		Иначе
			Если НЕ ПредыдущаяУслуга = УслугаВБазе Тогда
				Отбор = Новый Структура;
				Отбор.Вставить("КодУслугиВОСЗН", ИдентификаторУслугиВОСЗН);
				Отбор.Вставить("УслугаВБазе",    ПредыдущаяУслуга);
				
				НайденнаяСтрока = Объект.ТомскаяОбласть_ЖКУ_ВБазе.НайтиСтроки(Отбор);
				Если НайденнаяСтрока.Количество() = 1 Тогда
					НайденнаяСтрока[0].УслугаВБазе = УслугаВБазе;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриНачалеРедактирования" табличного поля "ТП_УслугаВБазе".
//
Процедура ТП_УслугаВБазеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// Запоминаем предыдущее значение перезаписываемой строки.
	Если НЕ НоваяСтрока Тогда
		ПредыдущаяУслуга    = Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "УслугаВБазе" таблицы "Услуги в Базе".
//
Процедура ТП_УслугаВБазеУслугаВБазеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Список уже выбранных услуг по данной услуге в ОСЗН.
	СписокВыбранныхУслуг = Новый СписокЗначений;
	СтрокиВыбранныхУслуг = Объект.ТомскаяОбласть_ЖКУ_ВБазе.НайтиСтроки(Новый Структура("КодУслугиВОСЗН", Элементы.ТомскаяОбласть_ЖКУ.ТекущиеДанные.code));
	Для Каждого СтрокаВыбраннойУслуги Из СтрокиВыбранныхУслуг Цикл
		СписокВыбранныхУслуг.Добавить(СтрокаВыбраннойУслуги.УслугаВБазе);
	КонецЦикла;
	
	ВидСравненияВОтборе = ВидСравненияКомпоновкиДанных.НеВСписке;
	
	Форма = ПолучитьФорму("Справочник.КВП_Услуги.ФормаВыбора", Новый Структура("ТекущаяСтрока", Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе), Элемент);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Форма.Список.КомпоновщикНастроек.Настройки.Отбор, "Ссылка", СписокВыбранныхУслуг,
															ВидСравненияКомпоновкиДанных.НеВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" табличного поля "Услуги в ОСЗН".
//
Процедура ТомскаяОбласть_ЖКУПриАктивизацииСтроки(Элемент)
	
	// При активации строки УслугаВОСЗН, загружаем соответствия в УслугаВБазе. 
	ТП_УслугаВБазе.Очистить();
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		Идентификатор = Элемент.ТекущиеДанные.code;
		ЗаполнитьТаблицуУслугНаСервере(Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик результата работы процедуры "ДиалогВыбораФайла.Показать".
//
Процедура ВыбратьКаталогЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КаталогЗагрузки = ДиалогВыбораФайла.Каталог;
	
КонецПроцедуры // КаталогВыгрузкиНачалоВыбора()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФорм

&НаКлиентеНаСервереБезКонтекста
// Процедура управляет внешним видом формы.
//
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.КаталогЗагрузки.Видимость = Форма.РасширениеПодключено;
	
	Элементы.ТП_УслугаВБазе.Доступность = ?(Объект.ТомскаяОбласть_ЖКУ.Количество() = 0, Ложь, Истина);
	
КонецПроцедуры // УправлениеФормой()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ФАЙЛАМИ

#Область СлужебныеПроцедурыРаботыСФайлами

&НаКлиенте
// Определяет подключено ли расширение для работы с файлами.
Процедура ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиенте()
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиентеЗавершение", ЭтотОбъект);
	
	УПЖКХ_РаботаСФайламиКлиент.ОпределитьВидВзаимодействияСФайловойСистемой(ОповещениеЗавершения);
	
КонецПроцедуры // ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиентеЗавершение()

&НаКлиенте
// Обработчик процедуры определяющей подключено расширение работы с файлами или нет.
Процедура ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиентеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		РасширениеПодключено = Результат;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти
