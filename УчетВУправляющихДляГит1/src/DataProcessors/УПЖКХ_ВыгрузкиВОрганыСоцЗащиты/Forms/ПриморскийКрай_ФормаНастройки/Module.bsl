
//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область СобытияФормы

// Процедура - обработчик события "ПриСозданииНаСервере" формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Получаем настройки из хранилища.
	Если Параметры.Свойство("АдресНастроекВХранилище") И Не Параметры.АдресНастроекВХранилище = Неопределено Тогда
		
		СтруктураПараметров = ПолучитьИзВременногоХранилища(Параметры.АдресНастроекВХранилище);
		
		Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
			Если СтруктураПараметров.Свойство("ФайлОбмена") Тогда
				ФайлОбмена = СтруктураПараметров.ФайлОбмена;
			КонецЕсли;
			
			Если СтруктураПараметров.Свойство("ПриморскийКрай_УслугиВОСЗН") Тогда
				ПриморскийКрай_УслугиВОСЗН.Загрузить(СтруктураПараметров.ПриморскийКрай_УслугиВОСЗН);
			КонецЕсли;
			
			Если СтруктураПараметров.Свойство("ПриморскийКрай_СоответствиеУслуг") Тогда
				ПриморскийКрай_СоответствиеУслуг.Загрузить(СтруктураПараметров.ПриморскийКрай_СоответствиеУслуг);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события "ПриОткрытии" формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УправлениеФормой();
	
КонецПроцедуры // ПриОткрытии()

#КонецОбласти // СобытияФормы

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область СобытияЭлементовФормы

// Обработчик команды "КомандаСохранитьИЗакрыть".
//
&НаКлиенте
Процедура КомандаСохранитьИЗакрыть(Команда)
	
	Закрыть(ПоместитьНастройкиВХранилище());
	
КонецПроцедуры // КомандаСохранитьИЗакрыть()

// Обработчик команды "КомандаЗагрузитьДанныеИзФайлаОбмена".
//
&НаКлиенте
Процедура КомандаЗагрузитьДанныеИзФайлаОбмена(Команда)
	
	Если ПриморскийКрай_УслугиВОСЗН.Количество() > 0 Тогда
		ТекстВопроса = "Перед загрузкой ранее установленные соответствие услуг будут очищены. Продолжить?";
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаЗагрузить", 
												ЭтотОбъект),
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет,,
					   КодВозвратаДиалога.Да);
	Иначе
		ЗагрузитьДанныеОбУслугахИзФайлаОбменаПродолжение();
	КонецЕсли;
	
КонецПроцедуры // КомандаЗагрузитьДанныеИзФайлаОбмена()

// Процедура - обработчик события "ПриАктивизацииСтроки" таблицы "ПриморскийКрай_УслугиВОСЗН".
//
&НаКлиенте
Процедура ПриморскийКрай_УслугиВОСЗНПриАктивизацииСтроки(Элемент)
	
	// При активации строки УслугаВОСЗН, загружаем соответствия в УслугаВБазе.
	ПриморскийКрай_УслугиВБазе.Очистить();
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		УникальноеНаименованиеУслуги = Элемент.ТекущиеДанные.GKU;
		ЗаполнитьТаблицуУслугВБазе(УникальноеНаименованиеУслуги);
	КонецЕсли;
	
КонецПроцедуры // ПриморскийКрай_УслугиВОСЗНПриАктивизацииСтроки()

// Процедура - обработчик события "ПередНачаломДобавления" таблицы "ПриморскийКрай_УслугиВБазе".
//
&НаКлиенте
Процедура ПриморскийКрай_УслугиВБазеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Устанавливаем запрет на добавление строк копированием.
	Если Копирование Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Добавление услуг копированием недопустимо!");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПриморскийКрай_УслугиВБазеПередНачаломДобавления()

// Процедура - обработчик события "ПередУдалением" таблицы "ПриморскийКрай_УслугиВБазе".
//
&НаКлиенте
Процедура ПриморскийКрай_УслугиВБазеПередУдалением(Элемент, Отказ)
	
	// При удалении строки удаляем соответствующие записи в ИркутскаяОбласть_ЖКУ_ВБазе.
	УслугаВБазе = Элементы.ПриморскийКрай_УслугиВБазе.ТекущиеДанные.Услуга;
	ТипУслуги   = Элементы.ПриморскийКрай_УслугиВБазе.ТекущиеДанные.ТипУслуги;
	
	ТекущиеДанныеGKU = Элементы.ПриморскийКрай_УслугиВОСЗН.ТекущиеДанные.GKU;
	
	Отбор = Новый Структура;
	Отбор.Вставить("GKU",         ТекущиеДанныеGKU);
	Отбор.Вставить("УслугаВБазе", УслугаВБазе);
	Отбор.Вставить("ТипУслуги",   ТипУслуги);
	
	СтрокиУдаления = ПриморскийКрай_СоответствиеУслуг.НайтиСтроки(Отбор);
	
	Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
		ПриморскийКрай_СоответствиеУслуг.Удалить(СтрокаУдаления);
	КонецЦикла;
	
КонецПроцедуры // ПриморскийКрай_УслугиВБазеПередУдалением()

// Процедура - обработчик события "ПриНачалеРедактирования" таблицы "ПриморскийКрай_УслугиВБазе".
//
&НаКлиенте
Процедура ПриморскийКрай_УслугиВБазеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		// При добавлении новой услуги из базы автоматически установим тип "Индивидуальная и общедомовая".
		Элементы.ПриморскийКрай_УслугиВБазе.ТекущиеДанные.ТипУслуги = "Индивидуальная и общедомовая";
	Иначе
		// Запоминаем предыдущее значение перезаписываемой строки.
		ПредыдущаяУслуга    = Элементы.ПриморскийКрай_УслугиВБазе.ТекущиеДанные.Услуга;
		ПредыдущийТипУслуги = Элементы.ПриморскийКрай_УслугиВБазе.ТекущиеДанные.ТипУслуги;
	КонецЕсли;
	
КонецПроцедуры // ПриморскийКрай_УслугиВБазеПриНачалеРедактирования()

// Процедура - обработчик события "ПередОкончаниемРедактирования" таблицы "ПриморскийКрай_УслугиВБазе".
//
&НаКлиенте
Процедура ПриморскийКрай_УслугиВБазеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ОтменаРедактирования Или Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ПриморскийКрай_УслугиВОСЗН.ТекущиеДанные = Неопределено Тогда
		ПриморскийКрай_УслугиВБазе.Удалить(Элемент.ТекущиеДанные);
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбрана услуга в ОСЗН для которой необходимо установить соответствие! Выберите услугу в ОСЗН.");
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеGKU = Элементы.ПриморскийКрай_УслугиВОСЗН.ТекущиеДанные.GKU;
	
	УслугаВБазе = Элементы.ПриморскийКрай_УслугиВБазе.ТекущиеДанные.Услуга;
	ТипУслуги   = Элементы.ПриморскийКрай_УслугиВБазе.ТекущиеДанные.ТипУслуги;
	
	Если УслугаВБазе = ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка") Тогда
		// 1. Добавил пустую услугу в таблицу. Нужно строку удалить и отказ = Истина!
		Если НоваяСтрока Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Добавление строк незаполненными услугами в базе недопустимо!");
			//2. Очистка существующей услуги. Нужно строку удалить и Отказ = Истина.
		Иначе
			Если НЕ ПредыдущаяУслуга = ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка") Тогда
				
				Отбор = Новый Структура;
				Отбор.Вставить("GKU",         ТекущиеДанныеGKU);
				Отбор.Вставить("УслугаВБазе", ПредыдущаяУслуга);
				
				СтрокиУдаления = ПриморскийКрай_СоответствиеУслуг.НайтиСтроки(Отбор);
				
				Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
					ПриморскийКрай_СоответствиеУслуг.Удалить(СтрокаУдаления);
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
		
		Отказ = Истина;
		
	Иначе
		
		Если НЕ ПредыдущаяУслуга = УслугаВБазе Тогда
			
			Отбор = Новый Структура;
			Отбор.Вставить("GKU",         ТекущиеДанныеGKU);
			Отбор.Вставить("УслугаВБазе", УслугаВБазе);
			
			НайденныеСтроки = ПриморскийКрай_СоответствиеУслуг.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда
				// Проверяем условие, чтобы одна и та же услуга в базе не была установлена 2-ум услугам в ОСЗН.
				Если НайденныеСтроки[0].GKU = ТекущиеДанныеGKU Тогда
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("	Дублирование одной и той же услуги в базе в рамках одной услуги в ОСЗН недопустимо!");
					Отказ = Истина;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПриморскийКрай_УслугиВБазеПередОкончаниемРедактирования()

// Процедура - обработчик события "ПриОкончанииРедактирования" таблицы "ПриморскийКрай_УслугиВБазе".
//
&НаКлиенте
Процедура ПриморскийКрай_УслугиВБазеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования ИЛИ Элемент.ТекущиеДанные = Неопределено
		Или Элементы.ПриморскийКрай_УслугиВОСЗН.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Добавляем запись в ИркутскаяОбласть_ЖКУ_В_Базе.
	УслугаВБазе = Элементы.ПриморскийКрай_УслугиВБазе.ТекущиеДанные.Услуга;
	ТипУслуги   = Элементы.ПриморскийКрай_УслугиВБазе.ТекущиеДанные.ТипУслуги;
	
	ТекущиеДанныеGKU = Элементы.ПриморскийКрай_УслугиВОСЗН.ТекущиеДанные.GKU;
	
	Если НоваяСтрока Тогда
		НоваяСтрокаСоответствия = ПриморскийКрай_СоответствиеУслуг.Добавить();
		НоваяСтрокаСоответствия.GKU         = ТекущиеДанныеGKU;
		НоваяСтрокаСоответствия.УслугаВБазе = УслугаВБазе;
		НоваяСтрокаСоответствия.ТипУслуги   = ТипУслуги;
	Иначе
		Если НЕ ПредыдущаяУслуга = УслугаВБазе
			ИЛИ НЕ ПредыдущийТипУслуги = ТипУслуги Тогда
			
			Отбор = Новый Структура;
			Отбор.Вставить("GKU",         ТекущиеДанныеGKU);
			Отбор.Вставить("УслугаВБазе", ПредыдущаяУслуга);
			Отбор.Вставить("ТипУслуги",   ПредыдущийТипУслуги);
			
			НайденнаяСтрока = ПриморскийКрай_СоответствиеУслуг.НайтиСтроки(Отбор);
			Если НайденнаяСтрока.Количество() = 1 Тогда
				НайденнаяСтрока[0].УслугаВБазе                  = УслугаВБазе;
				НайденнаяСтрока[0].ТипУслуги                    = ТипУслуги;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриморскийКрай_УслугиВБазеПриОкончанииРедактирования()

#КонецОбласти // СобытияЭлементовФормы

//////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ПрочиеПроцедурыИФункции

// Сохраняет настройки.
//
&НаСервере
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ПриморскийКрай_УслугиВОСЗН",       ПриморскийКрай_УслугиВОСЗН.Выгрузить());
	СтруктураНастроек.Вставить("ПриморскийКрай_СоответствиеУслуг", ПриморскийКрай_СоответствиеУслуг.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции // ПоместитьНастройкиВХранилище()

// Предназначена для управления элементами формы настроек.
//
&НаКлиенте
Процедура УправлениеФормой()
	
	Если ПриморскийКрай_УслугиВОСЗН.Количество() = 0 Тогда
		Элементы.ПриморскийКрай_УслугиВБазе.Доступность = Ложь;
	Иначе
		Элементы.ПриморскийКрай_УслугиВБазе.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры // УправлениеФормой()

// Обработчик результата опроса команды "КомандаЗагрузитьДанныеИзФайлаОбмена".
//
&НаКлиенте
Процедура ОбработатьРезультатВопросаЗагрузить(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗагрузитьДанныеОбУслугахИзФайлаОбменаПродолжение();
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаЗагрузить()

// Предназначена для проверки существования файла обмена.
//
&НаКлиенте
Функция ЗагрузитьДанныеОбУслугахИзФайлаОбменаПродолжение()
	
	ФайлНаДиске = Новый Файл(ФайлОбмена);
	
	ФайлНаДиске.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ПроверкаСуществованияФайлаОбменаЗавершение", ЭтотОбъект));
	
КонецФункции // ЗагрузитьДанныеОбУслугахИзФайлаОбменаПродолжение()

// Процедура продолжение проверки существования файла обмена.
//
&НаКлиенте
Функция ПроверкаСуществованияФайлаОбменаЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	Если Существует Тогда
		// Помещаем загружаемый файл во временное хранилище.
		Оповещение = Новый ОписаниеОповещения("ОбработатьВыборФайлаОбмена", ЭтотОбъект);
		НачатьПомещениеФайла(Оповещение, , ФайлОбмена, Ложь, УникальныйИдентификатор);
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Выбранный файл обмена не существует. Выберите другой файл.", , "ФайлОбмена");
	КонецЕсли;
	
КонецФункции // ПроверкаСуществованияФайлаОбменаЗавершение()

// Процедура продолжение помещения во временное хранилище файла обмена.
//
&НаКлиенте
Функция ОбработатьВыборФайлаОбмена(Результат, АдресФайлаВХранилище, ВыбранноеИмяФайла, Режим) Экспорт
	
	Если Результат Тогда
		// Загружаем данные из dbf на сервере.
		ЗагрузитьИзФайлаОбменаНаСервере(АдресФайлаВХранилище);
		УправлениеФормой();
	КонецЕсли;
	
КонецФункции // ОбработатьВыборФайлаОбмена()

// Предназначена для считывания данных об услугах, по которым ОСЗН запрашивает
// данные о начислениях.
&НаСервере
Процедура ЗагрузитьИзФайлаОбменаНаСервере(АдресФайлаВХранилище)
	
	// Запись временных данных во временный файл.
	врДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайлаВХранилище);
	ВременныйФайл = ПолучитьИмяВременногоФайла("DBF");
	
	// Для чтения *.dbf формата урежем имя временного файла.
	ФайлДБФ = Новый Файл(ВременныйФайл);
	СтароеИмяФайла = ФайлДБФ.ИмяБезРасширения + ".DBF";
	НовоеИмяФайла  = Лев(ФайлДБФ.ИмяБезРасширения, 8) + ".DBF";
	ВременныйФайл  = СтрЗаменить(ФайлДБФ.ПолноеИмя, СтароеИмяФайла, НовоеИмяФайла);
	
	врДанныеФайла.Записать(ВременныйФайл);
	
	// Загрузка.
	ФайлДБФ = Новый XBase;
	ФайлДБФ.Кодировка = КодировкаXBase.OEM;
	ФайлДБФ.ОткрытьФайл(ВременныйФайл, , Истина);
	
	// Проверяем файл загрузки на существование. Добавляем поля таблицы выгрузки.
	Если ФайлДБФ.Открыта() Тогда
		Если НЕ ПроверитьНаКорректностьФайлОбмена(ФайлДБФ) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не удалось прочитать указанный файл обмена!", , "ФайлОбмена", ,);
		ФайлДБФ.ЗакрытьФайл();
		Возврат;
	КонецЕсли;
	
	ПриморскийКрай_УслугиВОСЗН.Очистить();
	ПриморскийКрай_СоответствиеУслуг.Очистить();
	
	ОтборУслуг = Новый Структура("GKU");
	
	ТаблицаДляЗагрузки = РеквизитФормыВЗначение("ПриморскийКрай_УслугиВОСЗН");
	
	Пока НЕ ФайлДБФ.ВКонце() Цикл
		
		ТекущаяУслуга = СокрЛП(ФайлДБФ["GKU"]);
		
		ОтборУслуг.GKU = ТекущаяУслуга;
		
		Если ТаблицаДляЗагрузки.НайтиСтроки(ОтборУслуг).Количество() = 0 Тогда
			НоваяСтрока = ТаблицаДляЗагрузки.Добавить();
			НоваяСтрока.GKU = ТекущаяУслуга;
		КонецЕсли;
		
		ФайлДБФ.Следующая();
		
	КонецЦикла;
	
	ФайлДБФ.ЗакрытьФайл();
	
	ТаблицаДляЗагрузки.Сортировать("GKU");
	
	// Помещаем заполненную таблицу значений в соответствующий реквизит формы.
	ЗначениеВРеквизитФормы(ТаблицаДляЗагрузки, "ПриморскийКрай_УслугиВОСЗН");
	
	// Очищает временное хранилище.
	УдалитьИзВременногоХранилища(АдресФайлаВХранилище);
	
КонецПроцедуры // ЗагрузитьИзФайлаОбменаНаСервере()

// Проверка на корректность файла обмена.
//
&НаСервереБезКонтекста
Функция ПроверитьНаКорректностьФайлОбмена(ФайлДБФ)
	
	ФайлКорректный = Ложь;
	
	Если ФайлДБФ.Поля.Количество() = 21
	 И НЕ ФайлДБФ.Поля.Найти("LS") = Неопределено
	 И НЕ ФайлДБФ.Поля.Найти("NP") = Неопределено
	 И НЕ ФайлДБФ.Поля.Найти("UL") = Неопределено
	 И НЕ ФайлДБФ.Поля.Найти("DOM") = Неопределено
	 И НЕ ФайлДБФ.Поля.Найти("KOR") = Неопределено
	 И НЕ ФайлДБФ.Поля.Найти("KV") = Неопределено
	 И НЕ ФайлДБФ.Поля.Найти("KOM") = Неопределено
	 И НЕ ФайлДБФ.Поля.Найти("GKU") = Неопределено
	 И НЕ ФайлДБФ.Поля.Найти("PL") = Неопределено
	 И НЕ ФайлДБФ.Поля.Найти("KOLP") = Неопределено
	 И НЕ ФайлДБФ.Поля.Найти("NORM") = Неопределено
	 И НЕ ФайлДБФ.Поля.Найти("FAKTP") = Неопределено
	 И НЕ ФайлДБФ.Поля.Найти("FAKTPER") = Неопределено
	 И НЕ ФайлДБФ.Поля.Найти("TARIF") = Неопределено
	 И НЕ ФайлДБФ.Поля.Найти("DATEP") = Неопределено
	 И НЕ ФайлДБФ.Поля.Найти("PRIZN") = Неопределено
	 И НЕ ФайлДБФ.Поля.Найти("PRIM") = Неопределено
	 И НЕ ФайлДБФ.Поля.Найти("PKU") = Неопределено
	 И НЕ ФайлДБФ.Поля.Найти("MESD") = Неопределено
	 И НЕ ФайлДБФ.Поля.Найти("RESTRDOLG") = Неопределено
	 И НЕ ФайлДБФ.Поля.Найти("KODTEROTDE") = Неопределено Тогда
		ФайлКорректный = Истина;
	КонецЕсли;
	
	Если НЕ ФайлКорректный Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Структура файла обмена отличается от той, что содержится в справочной информации к выгрузке! Выберите корректный файл.", , "ФайлОбмена", ,);
	КонецЕсли;
	
	Возврат ФайлКорректный;
	
КонецФункции // ПроверитьНаКорректностьФайлОбмена()

// Перезаполняет данные об услугах из справочника "Услуги", которые установлены для активной строки из таблицы "Услуги в ОСЗН".
//
&НаКлиенте
Процедура ЗаполнитьТаблицуУслугВБазе(УникальноеНаименованиеУслуги)
	
	Для каждого ТекСтрока Из ПриморскийКрай_СоответствиеУслуг Цикл
		Если ТекСтрока.GKU = УникальноеНаименованиеУслуги Тогда
			НоваяСтрока = ПриморскийКрай_УслугиВБазе.Добавить();
			НоваяСтрока.Услуга    = ТекСтрока.УслугаВБазе;
			НоваяСтрока.ТипУслуги = ТекСтрока.ТипУслуги;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблицуУслугНаСервере()

#КонецОбласти // ПрочиеПроцедурыИФункции