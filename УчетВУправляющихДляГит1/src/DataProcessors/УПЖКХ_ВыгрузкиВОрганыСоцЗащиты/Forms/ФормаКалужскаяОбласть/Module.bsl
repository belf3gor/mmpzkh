/////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события формы "ПриСозданииНаСервере".
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	Объект.Период      = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	
	ВосстановитьНастройкиНаСервере();
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Процедура - обработчик события формы "ПередЗакрытием".
//
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьНастройкиНаСервере();
	
КонецПроцедуры // ПередЗакрытием()

#КонецОбласти

#Область СохраняемыеНастройки

////////////////////////
// Сохраняемые настройки

&НаСервере
// Процедура восстановления настроек.
//
Процедура ВосстановитьНастройкиНаСервере()
	
	СтруктураНастроек = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("ВыгрузкаОСЗНКО", "ПараметрыВыгрузки");
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		
		// Имя файла загрузки.
		врИмяФайлаЗагрузки = Неопределено;
		Если СтруктураНастроек.Свойство("ИмяФайлаЗагрузки", врИмяФайлаЗагрузки) Тогда
			ИмяФайлаЗагрузки = врИмяФайлаЗагрузки;
		КонецЕсли;
		
		// Таблица настроек справочника ОСЗН.
		врТаблицаНастроек = Неопределено;
		Если СтруктураНастроек.Свойство("КалужскаяОбласть_ТаблицаНастроек", врТаблицаНастроек) Тогда
			Если ТипЗнч(врТаблицаНастроек) = Тип("ТаблицаЗначений") Тогда
				Объект.КалужскаяОбласть_ТаблицаНастроек.Загрузить(врТаблицаНастроек);
			КонецЕсли;
		КонецЕсли;
		
		// Таблица услуг справочника ОСЗН в базе.
		врТаблицаУслугВБазе = Неопределено;
		Если СтруктураНастроек.Свойство("КалужскаяОбласть_УслугиВБазе", врТаблицаУслугВБазе) Тогда
			Если ТипЗнч(врТаблицаУслугВБазе) = Тип("ТаблицаЗначений") Тогда
				Объект.КалужскаяОбласть_УслугиВБазе.Загрузить(врТаблицаУслугВБазе);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьНастройкиНаСервере()

&НаСервере
// Процедура сохранения настроек.
//
Процедура СохранитьНастройкиНаСервере()
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("ИмяКаталогаВыгрузки", КаталогВыгрузки);
	СтруктураНастроек.Вставить("ИмяФайлаЗагрузки",    ИмяФайлаЗагрузки);
	
	СтруктураНастроек.Вставить("КалужскаяОбласть_ТаблицаНастроек",         Объект.КалужскаяОбласть_ТаблицаНастроек.Выгрузить());
	СтруктураНастроек.Вставить("КалужскаяОбласть_УслугиВБазе",             Объект.КалужскаяОбласть_УслугиВБазе.Выгрузить());
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("ВыгрузкаОСЗНКО", "ПараметрыВыгрузки", СтруктураНастроек);
	
КонецПроцедуры // СохранитьНастройкиНаСервере()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

////////////////////////
// Период

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Модифицированность);
	
КонецПроцедуры // ПериодСтрокойПриИзменении()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры // ПериодСтрокойНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события "Регулирование" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Направление,
														Модифицированность);
	
КонецПроцедуры // ПериодСтрокойРегулирование()

&НаКлиенте
// Процедура - обработчик события "АвтоПодбор" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодСтрокойАвтоПодбор()

&НаКлиенте
// Процедура - обработчик события "ОкончаниеВводаТекста" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодСтрокойОкончаниеВводаТекста()

////////////////////////
// Каталог выгрузки

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля "ИмяФайлаЗагрузки".
//
Процедура ИмяФайлаЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Фильтр                  = "Файл данных (*.dbf)|*.dbf";
	ДиалогВыбораФайла.Расширение              = "dbf";
	ДиалогВыбораФайла.Заголовок               = "Выберите файл";
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.ИндексФильтра           = 0;
	
	Файл = Новый Файл(ИмяФайлаЗагрузки);
	
	ДиалогВыбораФайла.Каталог                     = Файл.Путь;
	ДиалогВыбораФайла.ПолноеИмяФайла              = Файл.Имя;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.МножественныйВыбор          = Ложь;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ИмяФайлаЗагрузкиНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла)));
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЗагрузкиНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		
		ИмяФайлаЗагрузки = ДиалогВыбораФайла.ПолноеИмяФайла;
		КаталогВыгрузки  = ДиалогВыбораФайла.Каталог;
		
	КонецЕсли;

КонецПроцедуры // ИмяФайлаЗагрузкиНачалоВыбора()

&НаКлиенте
// Процедура - обработчик события "Открытие" поля "ИмяФайлаЗагрузки".
//
Процедура ИмяФайлаЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НачатьЗапускПриложения(Новый ОписаниеОповещения("ИмяФайлаЗагрузкиОткрытиеЗавершение", ЭтотОбъект), "explorer " + КаталогВыгрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЗагрузкиОткрытиеЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры // ИмяКаталогаВыгрузкиОткрытие()

///////////////////////
// КО_ТаблицаВыгрузки

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля "СоответствующийЛицевойСчет" таблицы "КО_ТаблицаВыгрузки".
//
Процедура КО_ТаблицаВыгрузкиСоответствующийЛицевойСчетПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.КО_ТаблицаВыгрузки.ТекущиеДанные;
	Если ТекущиеДанные.СоответствующийЛицевойСчет = ПредопределенноеЗначение("Справочник.КВП_ЛицевыеСчета.ПустаяСсылка") Тогда
		ТекущиеДанные.DOP_INF = "л/с не найден";
	Иначе
		ТекущиеДанные.DOP_INF = "";
	КонецЕсли;
	
КонецПроцедуры // КО_ТаблицаВыгрузкиСоответствующийЛицевойСчетПриИзменении()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область КоманднаяПанель

////////////////////////
// Команда Настройка

&НаКлиенте
// Процедура - обработчик команды "КомандаНастройка".
//
Процедура КомандаНастройка(Команда)
	
	АдресНастроекВХранилище = ПоместитьНастройкиВХранилище();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаНастройкаЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты.Форма.КалужскаяОбласть_ФормаНастроек", Новый Структура("АдресНастроекВХранилище", АдресНастроекВХранилище), ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры // КомандаНастройка()

&НаКлиенте
// Процедура - обработчик результата опроса команды "КомандаНастройка".
//
Процедура КомандаНастройкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		ПолучитьНастройкиИзХранилища(Результат);
	КонецЕсли;
	
КонецПроцедуры // КомандаНастройкаЗавершение()

&НаКлиенте
// Процедура - обработчик команды "КомандаЗагрузить".
//
Процедура Загрузить(Команда)
	
	Если ИмяФайлаЗагрузки = "" Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Укажите файл загрузки!");
		Возврат;
		
	КонецЕсли;
	
	Если КО_ТаблицаВыгрузки.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед загрузкой данных из файла табличная часть будет очищена. Продолжить?";
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаЗагрузить", 
												ЭтотОбъект),
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет, ,
					   КодВозвратаДиалога.Да);
		
		Возврат;
		
	КонецЕсли;
	
	ЗагрузитьПродолжение();
	
КонецПроцедуры // Загрузить()

&НаКлиенте
// Процедура - обработчик результата вопроса, вызванного в процедуре-обработчике команды "Загрузить".
//
Процедура ОбработатьРезультатВопросаЗагрузить(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	КО_ТаблицаВыгрузки.Очистить();
	ТаблицаКодовУслугИзФайла.Очистить();
	ЗагрузитьПродолжение();
	
КонецПроцедуры // ОбработатьРезультатВопросаЗагрузить()

&НаКлиенте
// Процедура - продолжение процедуры - обработчика команды "Загрузить".
//
Процедура ЗагрузитьПродолжение()
	
	// Помещаем загружаемый файл во временное хранилище.
	Оповещение = Новый ОписаниеОповещения("ОбработатьВыборФайла", ЭтотОбъект);
	НачатьПомещениеФайла(Оповещение, , ИмяФайлаЗагрузки, Ложь, УникальныйИдентификатор);
	
	АктуализироватьТаблицуНастроек();
	
	// Установим период формирования равным указанным в файле ОСЗН.
	Для каждого СтрокаТаблицыВыгрузки Из КО_ТаблицаВыгрузки Цикл
		
		Если Не СтрокаТаблицыВыгрузки.DATN = Неопределено Тогда
			
			Объект.Период = СтрокаТаблицыВыгрузки.DATN;
			УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.Период", "ПериодСтрокой");
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьПродолжение()

&НаКлиенте
// Процедура - обработчик команды "КомандаЗаполнить".
//
Процедура Заполнить(Команда)
	
	Если ЕстьОшибкиЗаполненияПолейФормы() Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьСведенияОНачисленияхИОплатахНаСервере();
	
КонецПроцедуры // Заполнить()

&НаКлиенте
// Процедура - обработчик команды "КомандаВыгрузить".
//
Процедура Выгрузить(Команда)
	
	Если КО_ТаблицаВыгрузки.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Перед выгрузкой табличная часть должна быть заполнена данными о начислениях и оплатах!");
		Возврат;
	КонецЕсли;
	
	АдресФайлаНаСервере = ЗаполнитьИПолучитьФайлаЗагрузки(УникальныйИдентификатор);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьПолучениеФайлаНаСервере", ЭтаФорма);
	
	ПолучаемыеФайлы = Новый Массив;
	ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(, АдресФайлаНаСервере));
	
	НачатьПолучениеФайлов(ОписаниеОповещения, ПолучаемыеФайлы, ИмяФайлаЗагрузки, Ложь);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьИПолучитьФайлаЗагрузки(АдресФайла)
	
	DBFФайлВыгрузки = Новый XBase;
	DBFФайлВыгрузки.Кодировка = КодировкаXBase.OEM;
	
	КолонкиDBF = ПолучитьКолонкиDBF();
	
	Для Каждого Колонка Из КолонкиDBF Цикл
		
		Если Колонка.Тип = "S" Тогда
			
			DBFФайлВыгрузки.Поля.Добавить(Колонка.Имя, Колонка.Тип, Колонка.Длина);
			
		ИначеЕсли Колонка.Тип = "N" Тогда
			
			DBFФайлВыгрузки.Поля.Добавить(Колонка.Имя, Колонка.Тип, Колонка.РазрядностьЦелойЧасти, Колонка.РазрядностьДробнойЧасти);
			
		ИначеЕсли Колонка.Тип = "D" Тогда
			
			DBFФайлВыгрузки.Поля.Добавить(Колонка.Имя, Колонка.Тип, Колонка.ЧастиДаты);
			
		ИначеЕсли Колонка.Тип = "L" Тогда
			
			DBFФайлВыгрузки.Поля.Добавить(Колонка.Имя, Колонка.Тип);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Файл = Новый Файл(ПолучитьИмяВременногоФайла(".dbf"));
	ИмяВременногоФайла = Файл.Путь + Прав(Файл.Имя, 11);
	
	DBFФайлВыгрузки.СоздатьФайл(ИмяВременногоФайла);
	DBFФайлВыгрузки.АвтоСохранение = Истина;
	
	// Запись данных из табличной части в файл выгрузки.
	Для Каждого Строка Из КО_ТаблицаВыгрузки Цикл
		
		DBFФайлВыгрузки.Добавить();
		
		ЗаполнитьЗначенияСвойств(DBFФайлВыгрузки, Строка);
		
		DBFФайлВыгрузки.Записать();
		
	КонецЦикла;
	
	DBFФайлВыгрузки.ЗакрытьФайл();
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	Возврат ПоместитьВоВременноеХранилище(ДвоичныеДанные, АдресФайла);
	
Конецфункции

&НаКлиенте
Процедура ОбработатьПолучениеФайлаНаСервере(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПолученныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Сохраняем резервную копию исходного файла выгрузки.
	ИмяБэкапФайла = КаталогВыгрузки + "_Исходный.dbf";
	
	НачатьКопированиеФайла(Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект, Новый Структура("ИмяБэкапФайла", ИмяБэкапФайла)), ИмяФайлаЗагрузки, ИмяБэкапФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗавершение(СкопированныйФайл, ДополнительныеПараметры) Экспорт
	
	// Подменяем исходный файл выгрузки на заполненный.
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Выгрузка в файл """ + ИмяФайлаЗагрузки + """ завершена!");
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСХранилищем

&НаСервере
// Помещает данные во временное хранилище для передачи их в форму настройки.
//
// Возвращаемое значение:
//  Строка - адрес настроек в хранилище.
//
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("КалужскаяОбласть_ТаблицаНастроек",         Объект.КалужскаяОбласть_ТаблицаНастроек.Выгрузить());
	СтруктураНастроек.Вставить("КалужскаяОбласть_УслугиВБазе",             Объект.КалужскаяОбласть_УслугиВБазе.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции // ПоместитьДанныеВХранилище()

&НаСервере
// Получает настройки из временного хранилища.
//
Функция ПолучитьНастройкиИзХранилища(АдресНастроекВХранилище)
	
	СтруктураНастроек = ПолучитьИзВременногоХранилища(АдресНастроекВХранилище);
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		
		// Таблица настроек справочника ОСЗН.
		врТаблицаНастроек = Неопределено;
		Если СтруктураНастроек.Свойство("КалужскаяОбласть_ТаблицаНастроек", врТаблицаНастроек) Тогда
			Если ТипЗнч(врТаблицаНастроек) = Тип("ТаблицаЗначений") Тогда
				Объект.КалужскаяОбласть_ТаблицаНастроек.Загрузить(врТаблицаНастроек);
			КонецЕсли;
		КонецЕсли;
		
		// Таблица услуг справочника ОСЗН в базе.
		врТаблицаУслугВБазе = Неопределено;
		Если СтруктураНастроек.Свойство("КалужскаяОбласть_УслугиВБазе", врТаблицаУслугВБазе) Тогда
			Если ТипЗнч(врТаблицаУслугВБазе) = Тип("ТаблицаЗначений") Тогда
				Объект.КалужскаяОбласть_УслугиВБазе.Загрузить(врТаблицаУслугВБазе);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции // ПолучитьНастройкиИзХранилища()

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

&НаКлиенте
// Обработчик результата помещения файла во временное хранилище.
//
Процедура ОбработатьВыборФайла(Результат, АдресФайлаВХранилище, ВыбранноеИмяФайла, Режим) Экспорт
	
	Если Результат Тогда
		// Загружаем данные из dbf на сервере.
		ЗагрузитьИзФайлаНаСервере(АдресФайлаВХранилище);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВыборФайла()

&НаСервере
// Загружает копию dbf-файла в текущую таблицу.
// Параметры:
//  АдресФайлаВХранилище - Строка - адрес текущего файла во временном хранилище.
//
Процедура ЗагрузитьИзФайлаНаСервере(АдресФайлаВХранилище)
	
	// Получаем dbf из временного хранилища.
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВХранилище);
	
	//// Для чтения *.dbf файла в кодировке DOS (OEM), урежем имя временного файла.
	КороткоеИмяВременногоФайла = ПолучитьИмяВременногоDBFФайла();
	
	// Записываем dbf в файл с указанным именем.
	ДвоичныеДанные.Записать(КороткоеИмяВременногоФайла);
	
	// Производим чтение dbf файла.
	DBFФайл = Новый XBase;
	
	DBFФайл.Кодировка = КодировкаXBase.OEM;
	
	DBFФайл.ОткрытьФайл(КороткоеИмяВременногоФайла, , Истина);
	
	// Проверяем файл загрузки на существование. Добавляем поля таблицы выгрузки.
	Если DBFФайл.Открыта() Тогда
		
		// Подготовить таблицу значений с кодами услуги и количеством полей по каждой из них из файла загрузки.
		ПодготовитьСписокСКодамиУслугИзФайла(DBFФайл.Поля);
		ДобавитьРеквизитыВТаблицуЗагрузкиНаСервере(DBFФайл);
		
	Иначе
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не удалось прочитать указанный файл!");
		DBFФайл.ЗакрытьФайл();
		Возврат;
		
	КонецЕсли;
	
	// Нужна ТаблицаЗначений для перебора колонок.
	ТаблицаДляЗагрузки = РеквизитФормыВЗначение("КО_ТаблицаВыгрузки");
	
	// Заполнение полей ТаблицаДанныхИзФайла согласно DBF-файлу.
	Пока НЕ DBFФайл.ВКонце() Цикл
		
		НоваяЗапись = ТаблицаДляЗагрузки.Добавить();
		
		Для Каждого Колонка Из ТаблицаДляЗагрузки.Колонки Цикл
		
			Попытка
				НоваяЗапись[Колонка.Имя] = ?(Строка(Колонка.ТипЗначения) = "Строка", СокрЛП(DBFФайл[Колонка.Имя]), DBFФайл[Колонка.Имя]);
			Исключение
			КонецПопытки;
			
		КонецЦикла;
		
		DBFФайл.Следующая();
		
	КонецЦикла;
	
	DBFФайл.ЗакрытьФайл();
	
	ИсключитьАдресныеСокращения(ТаблицаДляЗагрузки, 1);
	
	ПроизвестиИдентификациюЛицевыхСчетов(ТаблицаДляЗагрузки);
	
	// Помещаем заполненную  таблицу значений в соответствующий реквизит формы.
	ЗначениеВРеквизитФормы(ТаблицаДляЗагрузки, "КО_ТаблицаВыгрузки");
	
	// Очищает временное хранилище.
	УдалитьИзВременногоХранилища(АдресФайлаВХранилище);
	
КонецПроцедуры // ЗагрузитьИзФайлаНаСервере()

&НаСервереБезКонтекста
// Возвращает полное имя временного dbf-файла с указанным именем без расширения.
//
// Параметры:
//  ИмяФайла - Строка - имя файла без расширения.
//
// Возвращаемые параметры:
//  НовоеИмяВременногоФайла - Строка - полное имя временного dbf-файла с указанным именем без расширения.
//
Функция ПолучитьИмяВременногоDBFФайла()
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("dbf");
	
	Файл = Новый Файл(ИмяВременногоФайла);
	НовоеИмяВременногоФайла = СтрЗаменить(Файл.ПолноеИмя, Файл.ИмяБезРасширения, "Загрузки");
	
	Возврат НовоеИмяВременногоФайла;
	
КонецФункции // ПолучитьИмяВременногоDBFФайла()

&НаСервере
// Процедура считывает из файла коды видов услуг.
//
Процедура ПодготовитьСписокСКодамиУслугИзФайла(ПоляDBFФайла)
	
	ТаблицаКодовУслугИзФайла.Очистить();
	
	// В начале "-1", т.к. такой код не может появиться в файле загрузки.
	СохраненныйКодУслуги = -1;
	
	ПервыйПроход = Истина;
	
	Для СчетчикПолей = 0 По ПоляDBFФайла.Количество() - 1 Цикл
		
		Если Найти(ПоляDBFФайла.Получить(СчетчикПолей).Имя, "GKU") Тогда
			ПозицияСимвола = Найти(ПоляDBFФайла.Получить(СчетчикПолей).Имя, "U");
		Иначе
			Продолжить;
		КонецЕсли;
		
		ТекКодУслуги = Сред(ПоляDBFФайла.Получить(СчетчикПолей).Имя, ПозицияСимвола + 2);
		
		Если ТекКодУслуги = "" Тогда
			Продолжить;
		КонецЕсли;
		
		Если СохраненныйКодУслуги <> ТекКодУслуги Тогда
			
			Если ПервыйПроход Тогда
				ПервыйПроход = Ложь;
			Иначе
				// Добавляем новую строку, если произошла смена кода услуги и это не первый проход.
				НоваяСтрока = ТаблицаКодовУслугИзФайла.Добавить();
				НоваяСтрока.КодУслуги = СохраненныйКодУслуги;
			КонецЕсли;
			
			СохраненныйКодУслуги = ТекКодУслуги;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавляем данные по услуге, код которой замыкает поля файла загрузки.
	Если НЕ ПервыйПроход Тогда
		НоваяСтрока = ТаблицаКодовУслугИзФайла.Добавить();
		НоваяСтрока.КодУслуги = СохраненныйКодУслуги;
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьСписокСКодамиУслугИзФайла()

&НаСервере
// Переопределяет колонки и поля таблицы "КО_ТаблицаВыгрузки".
//
// Параметры:
//  КоличествоУслугТаблицыВыгрузки - Число - количество услуг из dbf-файла.
//
Процедура ДобавитьРеквизитыВТаблицуЗагрузкиНаСервере(DBFФайл)
	
	Если НЕ АдресДобавляемыеРеквизитыТаблицыЗагрузки = "" Тогда
		
		ДобавляемыеРеквизитыТаблицыЗагрузки = ПолучитьИзВременногоХранилища(АдресДобавляемыеРеквизитыТаблицыЗагрузки);
		
		УдаляемыеРеквизиты = Новый Массив;
		
		// Удаляем ранее добавленные элементы формы.
		Для Каждого РеквизитУдаления Из ДобавляемыеРеквизитыТаблицыЗагрузки Цикл
			УдаляемыеРеквизиты.Добавить("КО_ТаблицаВыгрузки." + РеквизитУдаления.Имя);
			Элементы.Удалить(Элементы["КО_ТаблицаВыгрузки" + РеквизитУдаления.Имя]);
		КонецЦикла;
		
		// Удаляем ранее добавленные реквизиты.
		ИзменитьРеквизиты(, УдаляемыеРеквизиты);
		
		ДобавляемыеРеквизитыТаблицыЗагрузки.Очистить();
		
	Иначе
		ДобавляемыеРеквизитыТаблицыЗагрузки = Новый Массив;
	КонецЕсли;
	
	Для каждого ТекСтрока Из ТаблицаКодовУслугИзФайла Цикл
		
		КодУслуги = ТекСтрока.КодУслуги;
		//КоличествоПолейПоУслуге = ТекСтрока.КоличествоПолейПоУслуге;
		Если НЕ DBFФайл.Поля.Найти("GKU_" + КодУслуги) = Неопределено Тогда
			ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("GKU_" + КодУслуги,    УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(50),   "КО_ТаблицаВыгрузки", "GKU_" + КодУслуги,    Ложь));
		КонецЕсли;
		Если НЕ DBFФайл.Поля.Найти("NGKYSL_" + КодУслуги) = Неопределено Тогда
			ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("NGKYSL_" + КодУслуги, УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(50),   "КО_ТаблицаВыгрузки", "NGKYSL_" + КодУслуги, Ложь));
		КонецЕсли;
		Если НЕ DBFФайл.Поля.Найти("VIDTAR_" + КодУслуги) = Неопределено Тогда
			ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("VIDTAR_" + КодУслуги, УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(1, 0),  "КО_ТаблицаВыгрузки", "VIDTAR_" + КодУслуги, Ложь));
		КонецЕсли;
		Если НЕ DBFФайл.Поля.Найти("TARIF_" + КодУслуги) = Неопределено Тогда
			ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("TARIF_" + КодУслуги,  УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(12, 2), "КО_ТаблицаВыгрузки", "TARIF_" + КодУслуги,  Ложь));
		КонецЕсли;
		Если НЕ DBFФайл.Поля.Найти("FAKT_" + КодУслуги) = Неопределено Тогда
			ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("FAKT_" + КодУслуги,   УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(12, 2), "КО_ТаблицаВыгрузки", "FAKT_" + КодУслуги,   Ложь));
		КонецЕсли;
		Если НЕ DBFФайл.Поля.Найти("SUMTAR_" + КодУслуги) = Неопределено Тогда
			ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("SUMTAR_" + КодУслуги, УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(12, 2), "КО_ТаблицаВыгрузки", "SUMTAR_" + КодУслуги, Ложь));
		КонецЕсли;
		Если НЕ DBFФайл.Поля.Найти("KOEF_" + КодУслуги) = Неопределено Тогда
			ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("KOEF_" + КодУслуги,   УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(12, 2), "КО_ТаблицаВыгрузки", "KOEF_" + КодУслуги,   Ложь));
		КонецЕсли;
		Если НЕ DBFФайл.Поля.Найти("SUM_SN_" + КодУслуги) = Неопределено Тогда
			ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("SUM_SN_" + КодУслуги, УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(12, 2), "КО_ТаблицаВыгрузки", "SUM_SN_" + КодУслуги, Ложь));
		КонецЕсли;
		Если НЕ DBFФайл.Поля.Найти("SUMPER_" + КодУслуги) = Неопределено Тогда
			ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("SUMPER_" + КодУслуги, УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(12, 2), "КО_ТаблицаВыгрузки", "SUMPER_" + КодУслуги, Ложь));
		КонецЕсли;
		Если НЕ DBFФайл.Поля.Найти("PRIZN_" + КодУслуги) = Неопределено Тогда
			ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("PRIZN_" + КодУслуги,  УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(50),   "КО_ТаблицаВыгрузки", "PRIZN_" + КодУслуги,  Ложь));
		КонецЕсли;
		Если НЕ DBFФайл.Поля.Найти("CHET_" + КодУслуги) = Неопределено Тогда
			ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("CHET_" + КодУслуги,   УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(19, 5), "КО_ТаблицаВыгрузки", "CHET_" + КодУслуги,   Ложь));
		КонецЕсли;
	КонецЦикла;
	
	// Добавляем новые реквизиты.
	ИзменитьРеквизиты(ДобавляемыеРеквизитыТаблицыЗагрузки);
	
	// Создаем новые элементы формы.
	Для Каждого Колонка Из ДобавляемыеРеквизитыТаблицыЗагрузки Цикл 
		Элемент             = Элементы.Добавить("КО_ТаблицаВыгрузки" + Колонка.Имя, Тип("ПолеФормы"), Элементы.КО_ТаблицаВыгрузки); 
		Элемент.Вид         = ВидПоляФормы.ПолеВвода;
		Элемент.Формат      = "ЧН=0";
		Элемент.ПутьКДанным = "КО_ТаблицаВыгрузки." + Колонка.Имя;
	КонецЦикла;
	
	// Сохраням массив добавляемых реквизитов.
	АдресДобавляемыеРеквизитыТаблицыЗагрузки = ПоместитьВоВременноеХранилище(ДобавляемыеРеквизитыТаблицыЗагрузки, Новый УникальныйИдентификатор);
	
КонецПроцедуры // ДобавитьРеквизитыВТаблицуЗагрузкиНаСервере()

&НаКлиенте
// Процедура предназначена для добавления в таблицу настроек новых видов услуг ОСЗН.
//
Процедура АктуализироватьТаблицуНастроек()
	
	ТаблицаНастроек = Объект.КалужскаяОбласть_ТаблицаНастроек;
	ДобавленыСтрокиВТаблицуНастроек = Ложь;
	ПерваяСтрокаТЧ = КО_ТаблицаВыгрузки[0];
	Для каждого ТекущаяСтрока Из ТаблицаКодовУслугИзФайла Цикл
		
		ПараметрыОтбора = Новый Структура("КодУслугиВОСЗН", ТекущаяСтрока.КодУслуги);
		МассивСовпадений = ТаблицаНастроек.НайтиСтроки(ПараметрыОтбора);
		
		// Определим наименование вида услуги в файле ОСЗН, для этого получим данные
		// из первой строки табличной части для каждого вида услуги.
		// То есть для вида услуги "GKU_1" получим значение первой из первой строки одноименной колонки.
		НаименованиеВидаУслугиВОСЗН = ПерваяСтрокаТЧ["GKU_" + ТекущаяСтрока.КодУслуги];
		
		Если МассивСовпадений.Количество() > 0 Тогда
			ПредыдущееНаименованиеВидаУслугиВОСЗН = МассивСовпадений[0].УслугаВОСЗН;
			Если НЕ (ПредыдущееНаименованиеВидаУслугиВОСЗН = НаименованиеВидаУслугиВОСЗН) Тогда
				// Если наименование вида услуги в файле ОСЗН отличается от наименования указанного в настройках по данному коду,
				// то производим замену названия на актуальное и сообщаем об этом пользователю.
				МассивСовпадений[0].УслугаВОСЗН = НаименованиеВидаУслугиВОСЗН;
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("В таблице соответствия услуг для услуги в ОСЗН с кодом " + ТекущаяСтрока.КодУслуги + " наименование изменено на: """ + НаименованиеВидаУслугиВОСЗН + """.",
																	,
																	"ФормаКомандаНастройка");
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		ДобавленыСтрокиВТаблицуНастроек = Истина;
		
		НоваяСтрокаТаблицыНастроек = ТаблицаНастроек.Добавить();
		
		НоваяСтрокаТаблицыНастроек.КодУслугиВОСЗН = ТекущаяСтрока.КодУслуги;
		НоваяСтрокаТаблицыНастроек.УслугаВОСЗН    = НаименованиеВидаУслугиВОСЗН;
	КонецЦикла;
	
	Если ДобавленыСтрокиВТаблицуНастроек Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("В загруженном файле ОСЗН обнаружены новые коды услуг! Просьба установить соответствия в таблице настроек.",
																,
																"ФормаКомандаНастройка");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура предназначена для идентификации льготников из файла ОСЗН с жильцами из информационной базы.
//
Процедура ПроизвестиИдентификациюЛицевыхСчетов(ТаблицаДляЗагрузки)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДатаКон",     КонецМесяца(Объект.Период));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.Адрес КАК Помещение,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.Адрес.Владелец КАК Здание
	|ПОМЕСТИТЬ втЛицевыеОбслуживаемыеВыбраннойОрганизацией
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(&ДатаКон, Организация = &Организация) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних";
	
	Запрос.Выполнить();
	
	ЗапросПоЗданиям = Новый Запрос;
	ЗапросПоЗданиям.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросПоЗданиям.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	втЛицевыеОбслуживаемыеВыбраннойОрганизацией.Здание КАК Объект
	|ИЗ
	|	втЛицевыеОбслуживаемыеВыбраннойОрганизацией КАК втЛицевыеОбслуживаемыеВыбраннойОрганизацией";
	
	МассивОбъектов = ЗапросПоЗданиям.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация"
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	втЛицевыеОбслуживаемыеВыбраннойОрганизацией.ЛицевойСчет,
	|	втЛицевыеОбслуживаемыеВыбраннойОрганизацией.ЛицевойСчет.Наименование КАК НаименованиеЛС,
	|	втЛицевыеОбслуживаемыеВыбраннойОрганизацией.ЛицевойСчет.Идентификатор КАК ИдентификаторЛС,
	|	втЛицевыеОбслуживаемыеВыбраннойОрганизацией.Помещение,
	|	втЛицевыеОбслуживаемыеВыбраннойОрганизацией.Здание,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НЕ втКонтактнаяИнформация.Город = """"
	|				ТОГДА втКонтактнаяИнформация.Город
	|			КОГДА НЕ втКонтактнаяИнформация.НаселенныйПункт = """"
	|				ТОГДА втКонтактнаяИнформация.НаселенныйПункт
	|			ИНАЧЕ втКонтактнаяИнформация.Регион
	|		КОНЕЦ, """") КАК НаселенныйПункт,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Улица, """") КАК Улица,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Дом, """") КАК Дом,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Корпус, """") КАК Корпус,
	|	втЛицевыеОбслуживаемыеВыбраннойОрганизацией.Помещение.Код КАК Квартира,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(6)) КАК КвартираСтрокой
	|ИЗ
	|	втЛицевыеОбслуживаемыеВыбраннойОрганизацией КАК втЛицевыеОбслуживаемыеВыбраннойОрганизацией
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК втКонтактнаяИнформация
	|		ПО втЛицевыеОбслуживаемыеВыбраннойОрганизацией.Здание = втКонтактнаяИнформация.Объект";
	
	ТаблицаЖильцовИзБазы = Запрос.Выполнить().Выгрузить();
	
	ИсключитьАдресныеСокращения(ТаблицаЖильцовИзБазы, 2);
	
	// Идентификация льготников из файла загрузки с данными из информационной базы.
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ЖильцовИзБазы",      ТаблицаЖильцовИзБазы);
	Запрос.УстановитьПараметр("ТаблицаДляЗагрузки", ТаблицаДляЗагрузки);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЖильцовИзБазы.ЛицевойСчет КАК ЛицевойСчет,
	|	ЖильцовИзБазы.НаименованиеЛС КАК НаименованиеЛС,
	|	ЖильцовИзБазы.ИдентификаторЛС КАК ИдентификаторЛС,
	|	ЖильцовИзБазы.НаселенныйПункт КАК НаселенныйПункт,
	|	ЖильцовИзБазы.Улица КАК Улица,
	|	ЖильцовИзБазы.Дом КАК Дом,
	|	ЖильцовИзБазы.Корпус КАК Корпус,
	|	ЖильцовИзБазы.КвартираСтрокой КАК КвартираСтрокой
	|ПОМЕСТИТЬ втЖильцовИзБазы
	|ИЗ
	|	&ЖильцовИзБазы КАК ЖильцовИзБазы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДляЗагрузки.LCHET КАК LCHET,
	|	ТаблицаДляЗагрузки.НаселенныйПункт КАК НаселенныйПункт,
	|	ТаблицаДляЗагрузки.НаименованиеУлицы КАК НаименованиеУлицы,
	|	ТаблицаДляЗагрузки.NDOM КАК NDOM,
	|	ТаблицаДляЗагрузки.NKORP КАК NKORP,
	|	ТаблицаДляЗагрузки.NKW КАК NKW
	|ПОМЕСТИТЬ втДанныеИзФайла
	|ИЗ
	|	&ТаблицаДляЗагрузки КАК ТаблицаДляЗагрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втЖильцовИзБазы.ЛицевойСчет КАК ЛицевойСчет,
	|	втДанныеИзФайла.LCHET КАК LCHET
	|ИЗ
	|	втДанныеИзФайла КАК втДанныеИзФайла
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЖильцовИзБазы КАК втЖильцовИзБазы
	|		ПО (втДанныеИзФайла.LCHET = втЖильцовИзБазы.НаименованиеЛС
	|				ИЛИ втДанныеИзФайла.LCHET = втЖильцовИзБазы.ИдентификаторЛС)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втЖильцовИзБазы.ЛицевойСчет,
	|	втДанныеИзФайла.LCHET
	|ИЗ
	|	втДанныеИзФайла КАК втДанныеИзФайла
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЖильцовИзБазы КАК втЖильцовИзБазы
	|		ПО втДанныеИзФайла.НаселенныйПункт = втЖильцовИзБазы.НаселенныйПункт
	|			И втДанныеИзФайла.НаименованиеУлицы = втЖильцовИзБазы.Улица
	|			И втДанныеИзФайла.NDOM = втЖильцовИзБазы.Дом
	|			И втДанныеИзФайла.NKORP = втЖильцовИзБазы.Корпус
	|			И втДанныеИзФайла.NKW = втЖильцовИзБазы.КвартираСтрокой";
	
	ВыборкаИдентифицированныхЛС = Запрос.Выполнить().Выбрать();
	
	ОтборЛС = Новый Структура("LCHET");
	
	Пока ВыборкаИдентифицированныхЛС.Следующий() Цикл
		
		ОтборЛС.LCHET = ВыборкаИдентифицированныхЛС.LCHET;
		
		НайденныеСтрокиЛС = ТаблицаДляЗагрузки.НайтиСтроки(ОтборЛС);
		Для каждого ТекСтрокаЛС Из НайденныеСтрокиЛС Цикл
			ТекСтрокаЛС.СоответствующийЛицевойСчет = ВыборкаИдентифицированныхЛС.ЛицевойСчет;
		КонецЦикла;
		
	КонецЦикла;
	
	НайденныеСтрокиСНеидентифицированнымиЛСВБазе = ТаблицаДляЗагрузки.НайтиСтроки(Новый Структура("СоответствующийЛицевойСчет", Справочники.КВП_ЛицевыеСчета.ПустаяСсылка()));
	Для каждого ТекСтрока Из НайденныеСтрокиСНеидентифицированнымиЛСВБазе Цикл
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Лицевой счет " + ТекСтрока.LCHET + " в базе не идентифицирован!");
		ТекСтрока.DOP_INF = "л/с не найден";
		
	КонецЦикла;
	
КонецПроцедуры // ПроизвестиИдентификациюЛицевыхСчетов()

&НаСервереБезКонтекста
// Процедура предназначена для исключения из наименования здания и улицы, 
// на которой расположены выгружаемые здания, адресных сокращений.
//
Процедура ИсключитьАдресныеСокращения(ТаблицаДляЗагрузки, НаборПолейДляСокращения)
	
	МассивСокращенийНасПунктов = Новый Массив();
	МассивСокращенийНасПунктов.Добавить("г");
	МассивСокращенийНасПунктов.Добавить("г.");
	МассивСокращенийНасПунктов.Добавить("п");
	МассивСокращенийНасПунктов.Добавить("п.");
	МассивСокращенийНасПунктов.Добавить("с");
	МассивСокращенийНасПунктов.Добавить("с.");
	МассивСокращенийНасПунктов.Добавить("д");
	МассивСокращенийНасПунктов.Добавить("д.");
	МассивСокращенийНасПунктов.Добавить("дп");
	МассивСокращенийНасПунктов.Добавить("нп");
	МассивСокращенийНасПунктов.Добавить("рп");
	МассивСокращенийНасПунктов.Добавить("снт");
	МассивСокращенийНасПунктов.Добавить("ст");
	
	МассивСокращенийУлиц = Новый Массив();
	МассивСокращенийУлиц.Добавить("ул");
	МассивСокращенийУлиц.Добавить("пл");
	МассивСокращенийУлиц.Добавить("пер");
	МассивСокращенийУлиц.Добавить("снт");
	МассивСокращенийУлиц.Добавить("проезд");
	МассивСокращенийУлиц.Добавить("б-р");
	МассивСокращенийУлиц.Добавить("туп");
	МассивСокращенийУлиц.Добавить("п");
	МассивСокращенийУлиц.Добавить("ш");
	МассивСокращенийУлиц.Добавить("пр-кт");
	МассивСокращенийУлиц.Добавить("тракт");
	МассивСокращенийУлиц.Добавить("сквер");
	МассивСокращенийУлиц.Добавить("наб");
	МассивСокращенийУлиц.Добавить("км");
	МассивСокращенийУлиц.Добавить("ж/д_ст");
	МассивСокращенийУлиц.Добавить("сад");
	МассивСокращенийУлиц.Добавить("парк");
	МассивСокращенийУлиц.Добавить("кв-л");
	МассивСокращенийУлиц.Добавить("аллея");
	
	Для Каждого ТекСтрока ИЗ ТаблицаДляЗагрузки Цикл
		
		Если НаборПолейДляСокращения = 1 Тогда
			
			ТекСтрока.НаселенныйПункт   = НормализацияПолейАдресаОбласти(НРег(ТекСтрока.NASP),   МассивСокращенийНасПунктов);
			ТекСтрока.НаименованиеУлицы = НормализацияПолейАдресаОбласти(НРег(ТекСтрока.YLIC),   МассивСокращенийУлиц);
			
		Иначе
			
			ТекСтрока.НаселенныйПункт   = НормализацияПолейАдресаОбласти(НРег(ТекСтрока.НаселенныйПункт), МассивСокращенийНасПунктов);
			ТекСтрока.Улица             = НормализацияПолейАдресаОбласти(НРег(ТекСтрока.Улица),           МассивСокращенийУлиц);
			ТекСтрока.КвартираСтрокой   = Строка(ТекСтрока.Квартира);
			ТекСтрока.НаименованиеЛС    = НомерЛицевогоСчета(ТекСтрока.НаименованиеЛС);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ИсключитьАдресныеСокращения()

&НаСервереБезКонтекста
// Функция сокращает название города или улицы: убирает сокращения,
// определяющие тип данного элемента адреса: "г.", "ул." и так далее.
//
// Параметры:
//  Ресурс       - Строка - элемент адреса
//
// Возвращаемое значение:
//  Строка - элемент адреса в сокращенном виде
//
Функция НормализацияПолейАдресаОбласти(Ресурс, Массив)
	
	Найден = Истина;
	
	Для Каждого Элемент Из Массив Цикл
		
		Если Прав(СокрЛП(Ресурс), СтрДлина(Элемент)) = Элемент Тогда
			ПредСимвол = Сред(СокрЛП(Ресурс), СтрДлина(СокрЛП(Ресурс)) - СтрДлина(Элемент), 1);
			
			Если ПредСимвол = " " Тогда
				Возврат СокрЛП(Лев(СокрЛП(Ресурс), СтрДлина(СокрЛП(Ресурс)) - СтрДлина(Элемент)));
			ИначеЕсли ПредСимвол = "." Тогда
				Возврат СокрЛП(Лев(СокрЛП(Ресурс), СтрДлина(СокрЛП(Ресурс)) - СтрДлина(Элемент) - 1));
			КонецЕсли;
		ИначеЕсли Лев(СокрЛП(Ресурс), СтрДлина(Элемент)) = Элемент Тогда
			СледСимвол = Сред(СокрЛП(Ресурс), СтрДлина(Элемент) + 1, 1);
			
			Если СледСимвол = " " Тогда
				Возврат СокрЛП(Сред(СокрЛП(Ресурс), СтрДлина(Элемент) + 1));
			ИначеЕсли СледСимвол = "." Тогда
				Возврат СокрЛП(Сред(СокрЛП(Ресурс), СтрДлина(Элемент) + 2));
			КонецЕсли;
		Иначе
			
			Найден = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Найден = Ложь Тогда
		Возврат Ресурс;
	КонецЕсли;
	
КонецФункции // НормализацияПолейАдресаОбласти()

&НаКлиенте
// Процедура предназначена для проверка заполнения элементов формы.
//
Функция ЕстьОшибкиЗаполненияПолейФормы()
	
	ЕстьОшибки = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Период) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указан период выгрузки!");
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указана организация по которой будут выгружены данные!");
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	КоличествоСтрокВТаблицеВыгрузки = КО_ТаблицаВыгрузки.Количество();
	
	Если КоличествоСтрокВТаблицеВыгрузки = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для поиска данных о начислениях и оплатах табличная часть должна быть заполнена!");
		ЕстьОшибки = Истина;
	Иначе
		НеидентифицированныеЛС = КО_ТаблицаВыгрузки.НайтиСтроки(Новый Структура("СоответствующийЛицевойСчет", ПредопределенноеЗначение("Справочник.КВП_ЛицевыеСчета.ПустаяСсылка")));
		
		Если НеидентифицированныеЛС.Количество() = КоличествоСтрокВТаблицеВыгрузки Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Во всех загруженных строках табличной части жильцы не идентифицированы в базе! Данные о начислениях и оплатах не будут заполнены!");
			ЕстьОшибки = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЕстьОшибки;
	
КонецФункции // ЕстьОшибкиЗаполненияПолейФормы()

&НаСервере
// Процедура предназначена для заполнения в табличной части сведениями о суммах начислений.
//
Процедура ЗаполнитьСведенияОНачисленияхИОплатахНаСервере()
	
	ТаблицаДанных      = ПолучитьТаблицуДанных();
	ТаблицаДляВыгрузки = ПолучитьТаблицуДанныхДляВыгрузки(ТаблицаДанных);
	
	ОтборНачислений = Новый Структура;
	ОтборНачислений.Вставить("ЛицевойСчет");
	
	Для каждого ТекущаяСтрока Из КО_ТаблицаВыгрузки Цикл
		
		Если ТекущаяСтрока.СоответствующийЛицевойСчет.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		ОтборНачислений.ЛицевойСчет = ТекущаяСтрока.СоответствующийЛицевойСчет;
		
		ТаблицаСНачислениямиПоТекущемуЛС = ТаблицаДляВыгрузки.Скопировать(ОтборНачислений);
		
		Если ТаблицаСНачислениямиПоТекущемуЛС.Количество() > 0 Тогда
			
			// Установим переменные для получения сумм по оплатам, начислениям и долгам.
			СуммаОплатПоТекущемуЛС      = 0;
			СуммаНачисленийПоТекущемуЛС = 0;
			
			// Поля, содержащие сумму долга на начало месяца и количество месяцев неоплаченной задолженности,
			// являются одинаковыми для всех строк с услугами по лицевому счету, поэтому достаточно просто
			// получить их из первой строки таблицы начислений по текущему лицевому счету.
			Если ТекущаяСтрока.Свойство("SUMDOLG") И ТекущаяСтрока.Свойство("KOLDOLG") Тогда
				ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ТаблицаСНачислениямиПоТекущемуЛС[0],"SUMDOLG, KOLDOLG");
			КонецЕсли;
			
			// Заполним соответствующие поля по начислениям.
			Для каждого СтрокаНачислений Из ТаблицаСНачислениямиПоТекущемуЛС Цикл
				
				Если ТекущаяСтрока.Свойство("FAKT_" + СтрокаНачислений.КодУслугиВОСЗН) Тогда
					
					ТекущаяСтрока["FAKT_" + СтрокаНачислений.КодУслугиВОСЗН] = СтрокаНачислений.FAKT;
					
				КонецЕсли;
				
				Если ТекущаяСтрока.Свойство("TARIF_" + СтрокаНачислений.КодУслугиВОСЗН) Тогда
					
					ТекущаяСтрока["TARIF_" + СтрокаНачислений.КодУслугиВОСЗН] = СтрокаНачислений.TARIF;
					
				КонецЕсли;
				
				Если ТекущаяСтрока.Свойство("SUMTAR_" + СтрокаНачислений.КодУслугиВОСЗН) Тогда
					
					ТекущаяСтрока["SUMTAR_" + СтрокаНачислений.КодУслугиВОСЗН] = СтрокаНачислений.TARIF*СтрокаНачислений.FAKT;
					
				КонецЕсли;
				
				СуммаОплатПоТекущемуЛС      = СуммаОплатПоТекущемуЛС + СтрокаНачислений.SUMOPL;
				СуммаНачисленийПоТекущемуЛС = СуммаНачисленийПоТекущемуЛС + СтрокаНачислений.SUMNCH;
				
			КонецЦикла;
			
			// Пернесем полученные суммы в соответствующие поля.
			ТекущаяСтрока.SUMOPL = СуммаОплатПоТекущемуЛС;
			ТекущаяСтрока.SUMNCH = СуммаНачисленийПоТекущемуЛС + ТекущаяСтрока.SUMDOLG;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСведенияОНачисленияхИОплатахНаСервере()

&НаСервере
// Подготавливает таблицу с идентифицированными лицевыми счетами.
//
Функция ПолучитьТаблицуДанных()
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	// Создаем пустую таблицу.
	ТаблицаДанных.Колонки.Добавить("ЛицевойСчет",    Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
	ТаблицаДанных.Колонки.Добавить("КодУслугиВОСЗН", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(4));
	
	//Для НомерУслуги = 1 По КоличествоУслугТаблицыЗагрузки Цикл
	Для Каждого ТекКодУслуги Из ТаблицаКодовУслугИзФайла Цикл
		
		Для Каждого ТекСтрока Из КО_ТаблицаВыгрузки Цикл
			
			Если ЗначениеЗаполнено(ТекСтрока.СоответствующийЛицевойСчет) Тогда
				
				НоваяСтрока = ТаблицаДанных.Добавить();
				
				НоваяСтрока.ЛицевойСчет    = ТекСтрока.СоответствующийЛицевойСчет;
				НоваяСтрока.КодУслугиВОСЗН = ТекКодУслуги.КодУслуги;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции // ПолучитьТаблицуДанных()

&НаСервере
// Процедура подготавливает данные для выгрузки:
// Начисления, оплаты, долги, тарифы и объемы предоставляемых услуг.
Функция ПолучитьТаблицуДанныхДляВыгрузки(ТаблицаДанных)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("НачалоПериода",                  НачалоМесяца(Объект.Период));
	Запрос.УстановитьПараметр("КонецПериода",                   КонецМесяца(Объект.Период));
	Запрос.УстановитьПараметр("Организация",                    Объект.Организация);
	Запрос.УстановитьПараметр("ТаблицаУслуг",                   Объект.КалужскаяОбласть_УслугиВБазе.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаДанных",                  ТаблицаДанных);
	Запрос.УстановитьПараметр("ЛицевойСчет",                    ТаблицаДанных.ВыгрузитьКолонку("ЛицевойСчет"));
	Запрос.УстановитьПараметр("СписокВидовНачисления",          ПолучитьСписокДоступныхВидовНачислений());
	Запрос.УстановитьПараметр("СписокВидовНачисленияБезОплаты", ПолучитьСписокДоступныхВидовНачислений(Ложь));
	Запрос.УстановитьПараметр("СписокРазделовУчета",            ПолучитьСписокРазделовУчета());
	Запрос.УстановитьПараметр("ТекущийМесяц",                   НачалоДня(КонецМесяца(Объект.Период)));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДанных.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаДанных.КодУслугиВОСЗН КАК КодУслугиВОСЗН
	|ПОМЕСТИТЬ втДанных
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУслуг.УслугаВБазе КАК Услуга,
	|	ТаблицаУслуг.КодУслугиВОСЗН КАК КодУслугиВОСЗН
	|ПОМЕСТИТЬ втУслуги
	|ИЗ
	|	&ТаблицаУслуг КАК ТаблицаУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанных.ЛицевойСчет КАК ЛицевойСчет,
	|	втДанных.КодУслугиВОСЗН КАК КодУслугиВОСЗН,
	|	втУслуги.Услуга КАК Услуга
	|ПОМЕСТИТЬ втЛицевыеСчетаИУслуги
	|ИЗ
	|	втДанных КАК втДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУслуги КАК втУслуги
	|		ПО втДанных.КодУслугиВОСЗН = втУслуги.КодУслугиВОСЗН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет КАК ЛицевойСчет,
	|	МИНИМУМ(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.МесяцНачисления) КАК МесяцНачисления
	|ПОМЕСТИТЬ втДанныеПоСрокамВозникновенияЗадолженности
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&КонецПериода,
	|			МесяцНачисления <> &ТекущийМесяц
	|				И Организация = &Организация
	|				И НЕ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втЛицевыеСчетаИУслуги.ЛицевойСчет
	|					ИЗ
	|						втЛицевыеСчетаИУслуги КАК втЛицевыеСчетаИУслуги)
	|				И Услуга В
	|					(ВЫБРАТЬ
	|						втЛицевыеСчетаИУслуги.Услуга
	|					ИЗ
	|						втЛицевыеСчетаИУслуги КАК втЛицевыеСчетаИУслуги)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|ГДЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток КАК СуммаНачисленияОстаток
	|ПОМЕСТИТЬ втДанныеПоТекущейЗадолженности
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&КонецПериода,
	|			Организация = &Организация
	|				И НЕ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втЛицевыеСчетаИУслуги.ЛицевойСчет
	|					ИЗ
	|						втЛицевыеСчетаИУслуги КАК втЛицевыеСчетаИУслуги)
	|				И Услуга В
	|					(ВЫБРАТЬ
	|						втЛицевыеСчетаИУслуги.Услуга
	|					ИЗ
	|						втЛицевыеСчетаИУслуги КАК втЛицевыеСчетаИУслуги)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛицевыеСчетаИУслуги.ЛицевойСчет КАК ЛицевойСчет,
	|	втЛицевыеСчетаИУслуги.КодУслугиВОСЗН КАК КодУслугиВОСЗН,
	|	втЛицевыеСчетаИУслуги.Услуга КАК Услуга,
	|	ЕСТЬNULL(втДанныеПоСрокамВозникновенияЗадолженности.МесяцНачисления, ДАТАВРЕМЯ(1, 1, 1)) КАК МесяцНачисления,
	|	ЕСТЬNULL(втДанныеПоТекущейЗадолженности.СуммаНачисленияОстаток, 0) КАК ОстатокПоНачислениям
	|ПОМЕСТИТЬ втДанныеПоЛС
	|ИЗ
	|	втЛицевыеСчетаИУслуги КАК втЛицевыеСчетаИУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеПоСрокамВозникновенияЗадолженности КАК втДанныеПоСрокамВозникновенияЗадолженности
	|		ПО втЛицевыеСчетаИУслуги.ЛицевойСчет = втДанныеПоСрокамВозникновенияЗадолженности.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеПоТекущейЗадолженности КАК втДанныеПоТекущейЗадолженности
	|		ПО втЛицевыеСчетаИУслуги.ЛицевойСчет = втДанныеПоТекущейЗадолженности.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга КАК Услуга,
	|	СРЕДНЕЕ(УПЖКХ_НачисленияОбороты.Тариф) КАК Тариф,
	|	СУММА(УПЖКХ_НачисленияОбороты.Количество) КАК ОбъемПотребления
	|ПОМЕСТИТЬ втДанныеТарифамИОбъемамПотребления
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			МесяцНачисления = &ТекущийМесяц
	|				И Организация = &Организация
	|				И РазделУчета В (&СписокРазделовУчета)
	|				И ВидНачисления В (&СписокВидовНачисленияБезОплаты)
	|				И Услуга В
	|					(ВЫБРАТЬ
	|						втДанныеПоЛС.Услуга
	|					ИЗ
	|						втДанныеПоЛС КАК втДанныеПоЛС)
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втДанныеПоЛС.ЛицевойСчет
	|					ИЗ
	|						втДанныеПоЛС КАК втДанныеПоЛС)) КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втДанныеПоЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	втДанныеПоЛС.КодУслугиВОСЗН КАК КодУслугиВОСЗН,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата))
	|				ТОГДА -ЕСТЬNULL(УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК SUMOPL,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата))
	|				ТОГДА ЕСТЬNULL(УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК SUMNCH,
	|	втДанныеПоЛС.ОстатокПоНачислениям КАК SUMDOLG,
	|	ВЫБОР
	|		КОГДА НЕ втДанныеПоЛС.МесяцНачисления = ДАТАВРЕМЯ(1, 1, 1)
	|				И втДанныеПоЛС.ОстатокПоНачислениям > 0
	|			ТОГДА РАЗНОСТЬДАТ(втДанныеПоЛС.МесяцНачисления, &НачалоПериода, МЕСЯЦ)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК KOLDOLG,
	|	втДанныеПоЛС.МесяцНачисления КАК МесяцНачисления,
	|	ЕСТЬNULL(втДанныеТарифамИОбъемамПотребления.Тариф, 0) КАК TARIF,
	|	ЕСТЬNULL(втДанныеТарифамИОбъемамПотребления.ОбъемПотребления, 0) КАК FAKT
	|ПОМЕСТИТЬ втВременныеИтогиПоОплатамИНачислениям
	|ИЗ
	|	втДанныеПоЛС КАК втДанныеПоЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|				&НачалоПериода,
	|				,
	|				,
	|				МесяцНачисления = &ТекущийМесяц
	|					И Организация = &Организация
	|					И РазделУчета В (&СписокРазделовУчета)
	|					И ВидНачисления В (&СписокВидовНачисления)) КАК УПЖКХ_НачисленияОбороты
	|		ПО втДанныеПоЛС.ЛицевойСчет = УПЖКХ_НачисленияОбороты.ЛицевойСчет
	|			И втДанныеПоЛС.Услуга = УПЖКХ_НачисленияОбороты.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеТарифамИОбъемамПотребления КАК втДанныеТарифамИОбъемамПотребления
	|		ПО втДанныеПоЛС.ЛицевойСчет = втДанныеТарифамИОбъемамПотребления.ЛицевойСчет
	|			И втДанныеПоЛС.Услуга = втДанныеТарифамИОбъемамПотребления.Услуга
	|
	|СГРУППИРОВАТЬ ПО
	|	втДанныеПоЛС.ЛицевойСчет,
	|	втДанныеПоЛС.КодУслугиВОСЗН,
	|	втДанныеПоЛС.ОстатокПоНачислениям,
	|	ВЫБОР
	|		КОГДА НЕ втДанныеПоЛС.МесяцНачисления = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА РАЗНОСТЬДАТ(втДанныеПоЛС.МесяцНачисления, &НачалоПериода, МЕСЯЦ)
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	втДанныеПоЛС.МесяцНачисления,
	|	ЕСТЬNULL(втДанныеТарифамИОбъемамПотребления.ОбъемПотребления, 0),
	|	ЕСТЬNULL(втДанныеТарифамИОбъемамПотребления.Тариф, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВременныеИтогиПоОплатамИНачислениям.ЛицевойСчет КАК ЛицевойСчет,
	|	втВременныеИтогиПоОплатамИНачислениям.КодУслугиВОСЗН КАК КодУслугиВОСЗН,
	|	СУММА(втВременныеИтогиПоОплатамИНачислениям.SUMOPL) КАК SUMOPL,
	|	СУММА(втВременныеИтогиПоОплатамИНачислениям.SUMNCH) КАК SUMNCH,
	|	втВременныеИтогиПоОплатамИНачислениям.SUMDOLG КАК SUMDOLG,
	|	втВременныеИтогиПоОплатамИНачислениям.KOLDOLG КАК KOLDOLG,
	|	втВременныеИтогиПоОплатамИНачислениям.МесяцНачисления КАК МесяцНачисления,
	|	СРЕДНЕЕ(втВременныеИтогиПоОплатамИНачислениям.TARIF) КАК TARIF,
	|	СУММА(втВременныеИтогиПоОплатамИНачислениям.FAKT) КАК FAKT
	|ИЗ
	|	втВременныеИтогиПоОплатамИНачислениям КАК втВременныеИтогиПоОплатамИНачислениям
	|ГДЕ
	|	втВременныеИтогиПоОплатамИНачислениям.TARIF > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	втВременныеИтогиПоОплатамИНачислениям.КодУслугиВОСЗН,
	|	втВременныеИтогиПоОплатамИНачислениям.ЛицевойСчет,
	|	втВременныеИтогиПоОплатамИНачислениям.МесяцНачисления,
	|	втВременныеИтогиПоОплатамИНачислениям.SUMDOLG,
	|	втВременныеИтогиПоОплатамИНачислениям.KOLDOLG";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервереБезКонтекста
// Получает список разделов учета, не используемых для получения данных.
Функция ПолучитьСписокРазделовУчета()
	
	СписокРазделовУчета = Новый СписокЗначений;
	
	// Разделы учета по пени и льготам не учитываем при определении сведений о начислениях за период.
	СписокРазделовУчета.Добавить(Перечисления.УПЖКХ_РазделыУчета.НачислениеУслуг);
	СписокРазделовУчета.Добавить(Перечисления.УПЖКХ_РазделыУчета.НачислениеПоПУ);
	СписокРазделовУчета.Добавить(Перечисления.УПЖКХ_РазделыУчета.Рассрочка);
	
	Возврат СписокРазделовУчета;
	
КонецФункции

&НаСервереБезКонтекста
// Получает список видов начислений, необходимый для запроса.
Функция ПолучитьСписокДоступныхВидовНачислений(ВключатьОплату = Истина)
	
	СписокВидовНачислений = Новый СписокЗначений;
	
	СписокВидовНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.Начисление);
	СписокВидовНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПоИПУ);
	СписокВидовНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу);
	СписокВидовНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу);
	СписокВидовНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему);
	СписокВидовНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему);
	СписокВидовНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПоОПУ);
	СписокВидовНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.СервисныеУслуги);
	СписокВидовНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.ФактическиеЗатраты);
	СписокВидовНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента);
	
	Если ВключатьОплату Тогда
		СписокВидовНачислений.Добавить(Перечисления.УПЖКХ_ВидыНачислений.Оплата);
	КонецЕсли;
	
	Возврат СписокВидовНачислений;
	
КонецФункции // ПолучитьСписокДоступныхВидовНачислений()

&НаСервере
// Формирует массив структур, состоящих из параметров для записи полей выгружаемого DBF-файла.
//
// Возвращаемое значение:
//  МассивСтруктурКолонок - Массив - массив структур. 
//
Функция ПолучитьКолонкиDBF()
	
	ТаблицаДляВыгрузки = РеквизитФормыВЗначение("КО_ТаблицаВыгрузки");
	
	МассивСтруктурКолонок = Новый Массив;
	
	Для Каждого Колонка Из ТаблицаДляВыгрузки.Колонки Цикл
		
		Если Не (Колонка.Имя = "СоответствующийЛицевойСчет" 
			ИЛИ  Колонка.Имя = "НаселенныйПункт" 
			ИЛИ  Колонка.Имя = "НаименованиеУлицы") Тогда
			
			// Элемент массива - данные N-ой строки.
			Структура = Новый Структура;
			Структура.Вставить("Имя", Колонка.Имя);
			
			Если Колонка.ТипЗначения.СодержитТип(Тип("Число")) Тогда
				
				Структура.Вставить("Тип",                     "N");
				Структура.Вставить("РазрядностьЦелойЧасти",   Колонка.ТипЗначения.КвалификаторыЧисла.Разрядность - Колонка.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти);
				Структура.Вставить("РазрядностьДробнойЧасти", Колонка.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти);
				
			ИначеЕсли Колонка.ТипЗначения.СодержитТип(Тип("Строка")) Тогда
				
				Структура.Вставить("Тип",   "S");
				Структура.Вставить("Длина", Колонка.ТипЗначения.КвалификаторыСтроки.Длина);
				
			ИначеЕсли Колонка.ТипЗначения.СодержитТип(Тип("Дата")) Тогда
				
				Структура.Вставить("Тип",       "D");
				Структура.Вставить("ЧастиДаты", Колонка.ТипЗначения.КвалификаторыДаты.ЧастиДаты);
				
			ИначеЕсли Колонка.ТипЗначения.СодержитТип(Тип("Булево")) Тогда
				
				Структура.Вставить("Тип",       "L");
				
			КонецЕсли;
			
			МассивСтруктурКолонок.Добавить(Структура);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТаблицаДляВыгрузки, "КО_ТаблицаВыгрузки");
	
	Возврат МассивСтруктурКолонок;
	
КонецФункции // ПолучитьКолонкиDBF()

#КонецОбласти