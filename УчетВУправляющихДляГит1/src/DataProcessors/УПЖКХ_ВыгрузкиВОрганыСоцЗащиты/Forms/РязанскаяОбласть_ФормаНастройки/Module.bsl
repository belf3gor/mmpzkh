
//////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ПрочиеПроцедурыИФункции

&НаСервере
// Процедура заполняет таблицу услуг на сервере.
//
Процедура ЗаполнитьТаблицуУслугНаСервере(Идентификатор)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Идентификатор", Идентификатор);
	
	НайденныеСтроки = Объект.РязанскаяОбласть_УслугиВБазе.Выгрузить(Отбор, "УслугаВБазе");
	
	Для Каждого ТекСтрока из НайденныеСтроки Цикл
		ЗаполнитьЗначенияСвойств(ТП_УслугаВБазе.Добавить(), ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// РАБОТА С ВРЕМЕННЫМ ХРАНИЛИЩЕМ

#Область РаботаСВременнымХранилищем

&НаСервере
// Помещает настройки во временное хранилище.
//
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ОтапливаемаяПлощадь",          ОтапливаемаяПлощадь);
	СтруктураНастроек.Вставить("ВыводРеквизитаЛицевогоСчета",  Объект.ВыводРеквизитаЛицевогоСчета);
	СтруктураНастроек.Вставить("РязанскаяОбласть_УслугиВБазе", Объект.РязанскаяОбласть_УслугиВБазе.Выгрузить());
	СтруктураНастроек.Вставить("РязанскаяОбласть_УслугиВОСЗН", Объект.РязанскаяОбласть_УслугиВОСЗН.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПризнакУдаления = Ложь;
	
	// Получаем настройки из хранилища.
	Если Параметры.Свойство("АдресНастроекВХранилище") И Не Параметры.АдресНастроекВХранилище = Неопределено Тогда
		
		СтруктураНастроек = ПолучитьИзВременногоХранилища(Параметры.АдресНастроекВХранилище);
		
		Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
			
			СтруктураНастроек.Свойство("ОтапливаемаяПлощадь", ОтапливаемаяПлощадь);
			
			СтруктураНастроек.Свойство("ВыводРеквизитаЛицевогоСчета", Объект.ВыводРеквизитаЛицевогоСчета);
			
			Если СтруктураНастроек.Свойство("РязанскаяОбласть_УслугиВБазе") Тогда
				Объект.РязанскаяОбласть_УслугиВБазе.Загрузить(СтруктураНастроек.РязанскаяОбласть_УслугиВБазе);
			КонецЕсли;
			
			Если СтруктураНастроек.Свойство("РязанскаяОбласть_УслугиВОСЗН") Тогда
				Объект.РязанскаяОбласть_УслугиВОСЗН.Загрузить(СтруктураНастроек.РязанскаяОбласть_УслугиВОСЗН);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Если в левой колонке пользователем удалены все колонки, то блокируем возможность добавления соответствий.
	Если Объект.РязанскаяОбласть_УслугиВОСЗН.Количество() = 0 Тогда
		Элементы.ТП_УслугаВБазе.Доступность = Ложь;
	Иначе
		Элементы.ТП_УслугаВБазе.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "КомандаСохранить".
//
Процедура КомандаСохранить(Команда)
	
	Закрыть(ПоместитьНастройкиВХранилище());
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" табличного поля "ТП_УслугаВБазе".
//
Процедура ТП_УслугаВБазеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Устанавливаем запрет на добавление строк копированием.
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" табличного поля "ТП_УслугаВБазе".
//
Процедура ТП_УслугаВБазеПередУдалением(Элемент, Отказ)
	
	Если ПризнакУдаления Тогда
		Отказ = Истина;
		ПризнакУдаления = Ложь;
	Иначе
		// При удалении строки удаляем соответствующие записи в РязанскаяОбласть_УслугиВОСЗН.
		УслугаВБазе   = Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе;
		УслугаВОСЗН   = Элементы.РязанскаяОбласть_УслугиВОСЗН.ТекущиеДанные.УслугаВОСЗН;
		Идентификатор = Элементы.РязанскаяОбласть_УслугиВОСЗН.ТекущиеДанные.НомерСтроки;
		
		Отбор = Новый Структура;
		Отбор.Вставить("УслугаВБазе",   УслугаВБазе);
		Отбор.Вставить("УслугаВОСЗН",   УслугаВОСЗН);
		Отбор.Вставить("Идентификатор", Идентификатор);
		
		СтрокиУдаления = Объект.РязанскаяОбласть_УслугиВБазе.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
			Объект.РязанскаяОбласть_УслугиВБазе.Удалить(СтрокаУдаления);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередОкончаниемРедактирования" таблицы "УслугаВБазе".
//
Процедура ТП_УслугаВБазеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Добавление незаполненных полей недопустимо!");
		ПризнакУдаления = Истина;
		ТП_УслугаВБазе.Удалить(Элементы.ТП_УслугаВБазе.ТекущиеДанные);
		
		Если ЗначениеЗаполнено(ПредыдущаяУслуга) Тогда
			УслугаВОСЗН   = Элементы.РязанскаяОбласть_УслугиВОСЗН.ТекущиеДанные.УслугаВОСЗН;
			Идентификатор = Элементы.РязанскаяОбласть_УслугиВОСЗН.ТекущиеДанные.НомерСтроки;
			ПризнакУдаления = Истина;
			Отбор = Новый Структура;
			Отбор.Вставить("УслугаВОСЗН",   УслугаВОСЗН);
			Отбор.Вставить("УслугаВБазе",   ПредыдущаяУслуга);
			Отбор.Вставить("Идентификатор", Идентификатор);
			
			СтрокиУдаления = Объект.РязанскаяОбласть_УслугиВБазе.НайтиСтроки(Отбор);
			
			Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
				Объект.РязанскаяОбласть_УслугиВБазе.Удалить(СтрокаУдаления);
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриОкончанииРедактирования" табличного поля "ТП_УслугаВБазе".
//
Процедура ТП_УслугаВБазеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		УслугаВБазе   = Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе;
		УслугаВОСЗН   = Элементы.РязанскаяОбласть_УслугиВОСЗН.ТекущиеДанные.УслугаВОСЗН;
		Идентификатор = Элементы.РязанскаяОбласть_УслугиВОСЗН.ТекущиеДанные.НомерСтроки;
		
		Если НоваяСтрока Тогда
			НоваяСтрокаСоответствия               = Объект.РязанскаяОбласть_УслугиВБазе.Добавить();
			НоваяСтрокаСоответствия.Идентификатор = Идентификатор;
			НоваяСтрокаСоответствия.УслугаВБазе   = УслугаВБазе;
			НоваяСтрокаСоответствия.УслугаВОСЗН   = УслугаВОСЗН;
		Иначе
			Если НЕ ПредыдущаяУслуга = УслугаВБазе Тогда
				Отбор = Новый Структура;
				Отбор.Вставить("УслугаВОСЗН",   УслугаВОСЗН);
				Отбор.Вставить("УслугаВБазе",   ПредыдущаяУслуга);
				Отбор.Вставить("Идентификатор", Идентификатор);
				
				НайденнаяСтрока = Объект.РязанскаяОбласть_УслугиВБазе.НайтиСтроки(Отбор);
				Если НайденнаяСтрока.Количество() = 1 Тогда
					НайденнаяСтрока[0].УслугаВБазе = УслугаВБазе;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриНачалеРедактирования" табличного поля "ТП_УслугаВБазе".
//
Процедура ТП_УслугаВБазеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// Запоминаем предыдущее значение перезаписываемой строки.
	Если НЕ НоваяСтрока Тогда
		ПредыдущаяУслуга = Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "УслугаВБазе" таблицы "Услуги в Базе".
//
Процедура ТП_УслугаВБазеУслугаВБазеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Список уже выбранных услуг по данной услуге в ОСЗН.
	СписокВыбранныхУслуг = Новый СписокЗначений;
	СтрокиВыбранныхУслуг = Объект.РязанскаяОбласть_УслугиВБазе.НайтиСтроки(Новый Структура("УслугаВОСЗН", Элементы.РязанскаяОбласть_УслугиВОСЗН.ТекущиеДанные.УслугаВОСЗН));
	Для Каждого СтрокаВыбраннойУслуги Из СтрокиВыбранныхУслуг Цикл
		СписокВыбранныхУслуг.Добавить(СтрокаВыбраннойУслуги.УслугаВБазе);
	КонецЦикла;
	
	ВидСравненияВОтборе = ВидСравненияКомпоновкиДанных.НеВСписке;
	
	Форма = ПолучитьФорму("Справочник.КВП_Услуги.ФормаВыбора", Новый Структура("ТекущаяСтрока", Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе), Элемент);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Форма.Список.КомпоновщикНастроек.Настройки.Отбор, "Ссылка", СписокВыбранныхУслуг,
															ВидСравненияКомпоновкиДанных.НеВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" табличного поля "Услуги в ОСЗН".
//
Процедура РязанскаяОбласть_УслугиВОСЗНПриАктивизацииСтроки(Элемент)
	
	// При активации строки УслугаВОСЗН, загружаем соответствия в УслугаВБазе.
	ТП_УслугаВБазе.Очистить();
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		Идентификатор = Элемент.ТекущиеДанные.НомерСтроки;
		ЗаполнитьТаблицуУслугНаСервере(Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" табличного поля "Услуги в ОСЗН".
//
Процедура РязанскаяОбласть_УслугиВОСЗНПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Устанавливаем запрет на добавление строк копированием.
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" табличного поля "Услуги в ОСЗН".
//
Процедура РязанскаяОбласть_УслугиВОСЗНПередУдалением(Элемент, Отказ)
	
	Отбор = Новый Структура("Идентификатор", Элемент.ТекущиеДанные.НомерСтроки);
	СтрокиУдаления = Объект.РязанскаяОбласть_УслугиВБазе.НайтиСтроки(Отбор);
	Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
		Объект.РязанскаяОбласть_УслугиВБазе.Удалить(СтрокаУдаления);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередОкончаниемРедактирования" табличного поля "Услуги в ОСЗН".
//
Процедура РязанскаяОбласть_УслугиВОСЗНПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	КодОшибки = 0;
	
	// Проверяем на наличие и уникальность услуги.
	ТекущаяУслугаВ_ГИС_НМСПНП = Элемент.ТекущиеДанные.УслугаВОСЗН;
	Если ЗначениеЗаполнено(ТекущаяУслугаВ_ГИС_НМСПНП) Тогда
		ОтборУслуга = Новый Структура;
		ОтборУслуга.Вставить("УслугаВОСЗН", ТекущаяУслугаВ_ГИС_НМСПНП);
		
		СтрокиСовпаденияУслуга = Объект.РязанскаяОбласть_УслугиВОСЗН.НайтиСтроки(ОтборУслуга);
		Если СтрокиСовпаденияУслуга.Количество() > 1 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Услуга в ОСЗН не уникальна!");
			КодОшибки = КодОшибки + 1;
		КонецЕсли;
		
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Услуга в ОСЗН не заполнена!");
		КодОшибки = КодОшибки + 1;
	КонецЕсли;
	
	// При наличии незаполненных полей или дубликатов опрашиваем пользователя.
	Если КодОшибки > 0 Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Добавление незаполненных полей и дублирующих значений недопустимо!");
		Объект.РязанскаяОбласть_УслугиВОСЗН.Удалить(Элементы.РязанскаяОбласть_УслугиВОСЗН.ТекущиеДанные.НомерСтроки - 1);
		
	КонецЕсли;
	
	// Разблокируем кнопку добавления табличного поля "тзУслугиВБазе".
	Если Не Объект.РязанскаяОбласть_УслугиВОСЗН.Количество() = 0 Тогда
		Элементы.ТП_УслугаВБазе.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПослеУдаления" табличного поля "Услуги в ОСЗН".
//
Процедура РязанскаяОбласть_УслугиВОСЗНПослеУдаления(Элемент)
	
	// После удаления строки из УслугиВОСЗН переписываем идентификаторы в УслугиВБазе.
	Для Каждого СтрокаГИС_НМСПН Из Объект.РязанскаяОбласть_УслугиВОСЗН Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("УслугаВОСЗН", СтрокаГИС_НМСПН.УслугаВОСЗН);
		
		СтрокиИзменения = Объект.РязанскаяОбласть_УслугиВБазе.НайтиСтроки(Отбор);
		Для Каждого Строка ИЗ СтрокиИзменения Цикл
			Строка.Идентификатор = СтрокаГИС_НМСПН.НомерСтроки;
		КонецЦикла;
		
	КонецЦикла;
	
	РязанскаяОбласть_УслугиВОСЗНПриАктивизацииСтроки(Элемент);
	
	// Если в левой колонке пользователем удалены все колонки, то блокируем возможность добавления соответствий.
	Если Объект.РязанскаяОбласть_УслугиВОСЗН.Количество() = 0 Тогда
		Элементы.ТП_УслугаВБазе.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти