
//////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункции

&НаСервере
// Формирует таблицу всех выгружаемых данных.
//
Процедура СформироватьТаблицуДанныхКостромскаяОбласть(ТаблицаВыгрузки, Кодировка, СписокФайлов, ПараметрыВыгрузки)
	
	ТаблицаДанныхИзФайла = Новый ТаблицаЗначений;
	
	ИменаКолонок = Новый Соответствие;
	Для Каждого ТекущаяКолонка Из Элементы.КостромскаяОбласть_ТаблицаВыгрузки.ПодчиненныеЭлементы Цикл
		ИменаКолонок.Вставить(ТекущаяКолонка.Имя, ТекущаяКолонка.Заголовок);
	КонецЦикла;
	
	ПервыйПроход = Истина;
	
	МассивСокрНасПункт = СформироватьМассивСокращениеДляКостромскойОблПоВиду(4);
	МассивСокрУлицы    = СформироватьМассивСокращениеДляКостромскойОблПоВиду(5);
	
	Для Каждого ФайлЗагрузки Из СписокФайлов Цикл
		
		ФайлPerson = Новый XBase;
		ФайлPerson.Кодировка = Кодировка;
		ФайлPerson.ОткрытьФайл(ФайлЗагрузки, , Истина);
		Если ФайлPerson.Открыта() = Истина Тогда
			
			Если ПервыйПроход Тогда
				// Считываем данные из файла.
				Для Каждого Поле Из ФайлPerson.Поля Цикл
					СформироватьКолонкиВТаблицеДанныхИзФайла(ТаблицаДанныхИзФайла,
															Поле.Тип,
															Поле.Имя,
															Поле.Длина,
															Поле.Точность,
															ИменаКолонок[Поле.Имя]);
				КонецЦикла;
				
				ПервыйПроход = Ложь;
			КонецЕсли;
			
			Пока НЕ ФайлPerson.ВКонце() Цикл
				Если ФайлPerson.KPRED = ПараметрыВыгрузки.КодОрганизации Тогда
					НоваяЗапись = ТаблицаДанныхИзФайла.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗапись, ФайлPerson);
					Для Каждого КолонкаТаблицы ИЗ ТаблицаДанныхИзФайла.Колонки Цикл
						Если Тип(КолонкаТаблицы.ТипЗначения) = Тип("Строка") Тогда
							НоваяЗапись[КолонкаТаблицы.Имя] = СокрЛП(НоваяЗапись[КолонкаТаблицы.Имя]);
						КонецЕсли;
						Если КолонкаТаблицы.Имя = "NASP" Тогда
							НоваяЗапись[КолонкаТаблицы.Имя] = ВРег(НормализацияПолейАдресаОбласти(НоваяЗапись[КолонкаТаблицы.Имя], МассивСокрНасПункт));
						ИначеЕсли КолонкаТаблицы.Имя = "YLIC" Тогда
							НоваяЗапись[КолонкаТаблицы.Имя] = ВРег(НормализацияПолейАдресаОбласти(НоваяЗапись[КолонкаТаблицы.Имя], МассивСокрУлицы));
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				ФайлPerson.Следующая();
			КонецЦикла;
			ФайлPerson.ЗакрытьФайл();
		КонецЕсли;
	КонецЦикла;
	
	Если ТаблицаДанныхИзФайла.Количество() > 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Данные загружены. Идет обработка данных...");
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Данные не загружены.");
		Возврат;
	КонецЕсли;
	
	ТаблицаДанныхИзФайла.Сортировать("FAMIL Возр");
	
	ТекстОшибки  = "";
	ТаблицаУслуг = ПолучитьСписокУслуг(ТаблицаДанныхИзФайла, ТекстОшибки);
	СписокУслугВыгрузки.ЗагрузитьЗначения(ТаблицаУслуг.ВыгрузитьКолонку("KYSL"));
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ТаблицаАдресов = ПолучитьАдресаВсехЗданийКостромскаяОбласть();
	ТаблицаФИО     = ПолучитьФИОФизЛиц();
	ПолучитьТаблицуНачисленийКострома(ТаблицаВыгрузки, ТаблицаДанныхИзФайла, ТаблицаУслуг, ТаблицаАдресов, ТаблицаФИО, ПараметрыВыгрузки);
	
	Для Каждого СтрокаТаблицы Из ТаблицаВыгрузки Цикл
		Если ТипЗнч(СтрокаТаблицы.ILCHET) = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
			
			СтрокаТаблицы.ILCHET = ПодготовитьНомерЛСДляВывода(СтрокаТаблицы.ILCHET);
			
			Если НЕ СтрокаТаблицы.НормаПотребления.Пустая()
			   И ЗначениеЗаполнено(СтрокаТаблицы.НормаПотребленияВариантНастройки) Тогда
				СтрокаТаблицы.SOCHNORM = ПолучитьРазмерНормыПотребления(СтрокаТаблицы.ILCHET,
																		КонецМесяца(Объект.Период),
																		СтрокаТаблицы.НормаПотребления,
																		Объект.Организация);
			Иначе
				Если ЗначениеЗаполнено(СтрокаТаблицы.НормаПотребленияРазмер) Тогда
					СтрокаТаблицы.SOCHNORM = СтрокаТаблицы.НормаПотребленияРазмер;
				Иначе
					СтрокаТаблицы.SOCHNORM = 0;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Процедура добавляет новые колонки в таблицу данных из файла.
//
Процедура СформироватьКолонкиВТаблицеДанныхИзФайла(ТаблицаДанныхИзФайла, Тип, Имя, Длина, Точность, ТекстШапки)
	
	Если Тип = "S" Тогда
		ТаблицаДанныхИзФайла.Колонки.Добавить(Имя, УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(Длина), ТекстШапки);
	ИначеЕсли Тип = "N" Тогда
		ТаблицаДанныхИзФайла.Колонки.Добавить(Имя, УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(Длина, Точность), ТекстШапки);
	ИначеЕсли Тип = "D" Тогда
		ТаблицаДанныхИзФайла.Колонки.Добавить(Имя, УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата), ТекстШапки);
	КонецЕсли;
	
КонецПроцедуры // СформироватьКолонкиВТаблицеДанныхИзФайла()

&НаСервере
// Проверяет заполнение таблицы соответствий.
//
// Возвращаемые значения:
//  ТекстОшибки - тип строка - текст сообщения, если не найдены соответствия.
//  МассивУслуг - тип массив - массив отчетных услуг.
//
Функция ПолучитьСписокУслуг(ТаблицаДанныхИзФайла, ТекстОшибки)

	втТаблицаДанных = ТаблицаДанныхИзФайла.Скопировать();
	втТаблицаДанных.Свернуть("KYSL");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСоответствий.КодУслуги,
	|	ТаблицаСоответствий.Услуга
	|ПОМЕСТИТЬ втТаблицаСоответствий
	|ИЗ
	|	&ТаблицаСоответствий КАК ТаблицаСоответствий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаКодовУслуг.KYSL
	|ПОМЕСТИТЬ втТаблицаКодовУслуг
	|ИЗ
	|	&ТаблицаКодовУслуг КАК ТаблицаКодовУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаКодовУслуг.KYSL,
	|	ЕСТЬNULL(втТаблицаСоответствий.КодУслуги, НЕОПРЕДЕЛЕНО) КАК КодУслуги,
	|	ЕСТЬNULL(втТаблицаСоответствий.Услуга, НЕОПРЕДЕЛЕНО) КАК Услуга
	|ИЗ
	|	втТаблицаКодовУслуг КАК втТаблицаКодовУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаСоответствий КАК втТаблицаСоответствий
	|		ПО втТаблицаКодовУслуг.KYSL = втТаблицаСоответствий.КодУслуги";
		
	Запрос.УстановитьПараметр("ТаблицаКодовУслуг",   втТаблицаДанных);
	Запрос.УстановитьПараметр("ТаблицаСоответствий", Объект.КостромскаяОбласть_ТаблицаСоответствий.Выгрузить());
	
	ТаблицаУслуг = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаТаблицы Из ТаблицаУслуг Цикл
		Если СтрокаТаблицы.КодУслуги = Неопределено Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + "Для услуги с кодом " + СтрокаТаблицы.KYSL + " не задано соответствие.";
		ИначеЕсли НЕ СтрокаТаблицы.КодУслуги = Неопределено
				И СтрокаТаблицы.Услуга = Неопределено Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + "Для услуги с кодом " + СтрокаТаблицы.KYSL + " не определена услуга в базе.";
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаУслуг;
	
КонецФункции // ПолучитьСписокУслуг()

&НаСервере
// Получает таблицу значений с адресами зданий.
//
Функция ПолучитьАдресаВсехЗданийКостромскаяОбласть()
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	втКонтактнаяИнформация.Объект КАК Здание,
	|	ВЫБОР
	|		КОГДА НЕ втКонтактнаяИнформация.НаселенныйПункт = """"
	|			ТОГДА втКонтактнаяИнформация.НаселенныйПункт
	|		КОГДА НЕ втКонтактнаяИнформация.Город = """"
	|			ТОГДА втКонтактнаяИнформация.Город
	|		ИНАЧЕ втКонтактнаяИнформация.Регион
	|	КОНЕЦ КАК НаселенныйПункт,
	|	втКонтактнаяИнформация.Район,
	|	втКонтактнаяИнформация.Улица,
	|	втКонтактнаяИнформация.Дом,
	|	втКонтактнаяИнформация.Корпус
	|ИЗ
	|	втКонтактнаяИнформация КАК втКонтактнаяИнформация";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	МассивСокрРайонов  = СформироватьМассивСокращениеДляКостромскойОблПоВиду(2);
	МассивСокрНасПункт = СформироватьМассивСокращениеДляКостромскойОблПоВиду(4);
	МассивСокрУлицы    = СформироватьМассивСокращениеДляКостромскойОблПоВиду(5);
	
	Для Каждого СтрокаЗдания ИЗ Результат Цикл
		СтрокаЗдания.Район           = ВРег(НормализацияПолейАдресаОбласти(СтрокаЗдания.Район, МассивСокрРайонов));
		СтрокаЗдания.НаселенныйПункт = ВРег(НормализацияПолейАдресаОбласти(СтрокаЗдания.НаселенныйПункт, МассивСокрНасПункт));
		СтрокаЗдания.Улица           = ВРег(НормализацияПолейАдресаОбласти(СтрокаЗдания.Улица, МассивСокрУлицы));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьАдресаВсехЗданийТомскаяОбласть()

&НаСервере
// Функция сокращает название города или улицы: убирает сокращения,
// определяющие тип данного элемента адреса: "г.", "ул." и так далее.
//
// Параметры:
//  Ресурс       - Строка - элемент адреса
//
// Возвращаемое значение:
//  Строка - элемент адреса в сокращенном виде
//
Функция НормализацияПолейАдресаОбласти(Ресурс, Массив)
	
	Найден = Истина;
	
	Для Каждого Элемент Из Массив Цикл
		
		Если Прав(СокрЛП(Ресурс), СтрДлина(Элемент)) = Элемент Тогда
			ПредСимвол = Сред(СокрЛП(Ресурс), СтрДлина(СокрЛП(Ресурс)) - СтрДлина(Элемент), 1);
			
			Если ПредСимвол = " " Тогда
				Возврат СокрЛП(Лев(СокрЛП(Ресурс), СтрДлина(СокрЛП(Ресурс)) - СтрДлина(Элемент)));
			КонецЕсли;
		ИначеЕсли Лев(СокрЛП(Ресурс), СтрДлина(Элемент)) = Элемент Тогда
			СледСимвол = Сред(СокрЛП(Ресурс), СтрДлина(Элемент) + 1, 1);
			
			Если СледСимвол = " " Тогда
				Возврат СокрЛП(Сред(СокрЛП(Ресурс), СтрДлина(Элемент) + 1));
			КонецЕсли;
		Иначе
			
			Найден = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Найден = Ложь Тогда
		Возврат Ресурс;
	КонецЕсли;
	
КонецФункции

&НаСервере
// Формирует массив сокращений для Томской области для выбранного вида сокращения.
//
Функция СформироватьМассивСокращениеДляКостромскойОблПоВиду(ВидСокращение)
		
	МассивСокращений = Новый Массив;
	// для регионов
	Если ВидСокращение = 1 Тогда
		МассивСокращений.Добавить("обл");
		// для районов
	ИначеЕсли ВидСокращение = 2 Тогда
		МассивСокращений.Добавить("р-н");
		// для городов
	ИначеЕсли ВидСокращение = 3 Тогда
		МассивСокращений.Добавить("г");
		// для нас.пунктов
	ИначеЕсли ВидСокращение = 4 Тогда
		МассивСокращений.Добавить("рп");
		МассивСокращений.Добавить("п");
		МассивСокращений.Добавить("с");
		МассивСокращений.Добавить("д");
		МассивСокращений.Добавить("х");
		МассивСокращений.Добавить("ст");
		МассивСокращений.Добавить("пгт");
		МассивСокращений.Добавить("дп");
		МассивСокращений.Добавить("рзд");
		МассивСокращений.Добавить("мкр");
		МассивСокращений.Добавить("нп");
		МассивСокращений.Добавить("тер");
		МассивСокращений.Добавить("п/ст");
		МассивСокращений.Добавить("промзона");
		МассивСокращений.Добавить("снт");
		МассивСокращений.Добавить("п/о");
		МассивСокращений.Добавить("городок");
		МассивСокращений.Добавить("заимка");
		МассивСокращений.Добавить("кп");
		МассивСокращений.Добавить("ж/д_казарм");
		МассивСокращений.Добавить("г");
		МассивСокращений.Добавить("обл");
		// для улиц
	ИначеЕсли ВидСокращение = 5 Тогда
		МассивСокращений.Добавить("ул");
		МассивСокращений.Добавить("тер");
		МассивСокращений.Добавить("пл");
		МассивСокращений.Добавить("пер");
		МассивСокращений.Добавить("снт");
		МассивСокращений.Добавить("проезд");
		МассивСокращений.Добавить("б-р");
		МассивСокращений.Добавить("туп");
		МассивСокращений.Добавить("п");
		МассивСокращений.Добавить("ш");
		МассивСокращений.Добавить("пр-кт");
		МассивСокращений.Добавить("тракт");
		МассивСокращений.Добавить("сквер");
		МассивСокращений.Добавить("ст");
		МассивСокращений.Добавить("наб");
		МассивСокращений.Добавить("км");
		МассивСокращений.Добавить("ж/д_ст");
		МассивСокращений.Добавить("сад");
		МассивСокращений.Добавить("парк");
		МассивСокращений.Добавить("уч-к");
		МассивСокращений.Добавить("мкр");
		МассивСокращений.Добавить("городок");
		МассивСокращений.Добавить("кв-л");
		МассивСокращений.Добавить("нп");
		МассивСокращений.Добавить("остров");
		МассивСокращений.Добавить("гск");
		МассивСокращений.Добавить("линия");
		МассивСокращений.Добавить("рзд");
		МассивСокращений.Добавить("стр");
		МассивСокращений.Добавить("аллея");
		МассивСокращений.Добавить("казарма");
		МассивСокращений.Добавить("ж/д_рзд");
		МассивСокращений.Добавить("д");
		МассивСокращений.Добавить("ж/д_казарм");
		МассивСокращений.Добавить("ж/д_будка");
		МассивСокращений.Добавить("высел");
	КонецЕсли;
	
	Возврат МассивСокращений;
	
КонецФункции // СформироватьМассивСокращениеДляСвердловскойОблПоВиду()

&НаСервере
// Получает таблицу значений с ФИО физических лиц.
//
Функция ПолучитьФИОФизЛиц()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо,
	|	ФИОФизическихЛицСрезПоследних.Фамилия,
	|	ФИОФизическихЛицСрезПоследних.Имя,
	|	ФИОФизическихЛицСрезПоследних.Отчество
	|ИЗ
	|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&Дата, ) КАК ФИОФизическихЛицСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", КонецМесяца(Объект.Период));
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаФизЛица ИЗ Результат Цикл
		СтрокаФизЛица.Фамилия  = ВРег(СтрокаФизЛица.Фамилия);
		СтрокаФизЛица.Имя      = ВРег(СтрокаФизЛица.Имя);
		СтрокаФизЛица.Отчество = ВРег(СтрокаФизЛица.Отчество);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьФИОФизЛиц()

&НаСервере
// Получает таблицу данных с начислениями и необходимыми данными.
//
Процедура ПолучитьТаблицуНачисленийКострома(ТаблицаВыгрузки, ТаблицаДанныхИзФайла, ТаблицаУслуг, ТаблицаАдресов, ТаблицаФИО, ПараметрыВыгрузки)
	
	Запрос = Новый Запрос;
	
	МенеджерВТ                     = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	// Параметры
	
	Запрос.УстановитьПараметр("ДатаНач",                НачалоМесяца(Объект.Период));
	Запрос.УстановитьПараметр("ДатаКон",                КонецМесяца(Объект.Период));
	Запрос.УстановитьПараметр("Организация",            Объект.Организация);
	Запрос.УстановитьПараметр("ВидОтапливаемойПлощади", ПараметрыВыгрузки.ВидПлощадиОтопления);
	
	Запрос.УстановитьПараметр("ТаблицаАдресов", ТаблицаАдресов);
	Запрос.УстановитьПараметр("ТаблицаФИО",     ТаблицаФИО);
	
	Запрос.УстановитьПараметр("ТаблицаДанныхИзФайла", ТаблицаДанныхИзФайла);
	Запрос.УстановитьПараметр("ТаблицаУслуг",         ТаблицаУслуг);
	
	Запрос.УстановитьПараметр("УказыватьКоличествоПрожИЗарегЧислами", Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Получить());
	Запрос.УстановитьПараметр("ДатаОпределенияЗадолженности",         ДатаСрокОплаты());
	// параметры
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаФИО.ФизическоеЛицо,
	|	ТаблицаФИО.Фамилия,
	|	ТаблицаФИО.Имя,
	|	ТаблицаФИО.Отчество
	|ПОМЕСТИТЬ втФИОФизЛиц
	|ИЗ
	|	&ТаблицаФИО КАК ТаблицаФИО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаАдресов.Здание,
	|	ТаблицаАдресов.Район,
	|	ТаблицаАдресов.НаселенныйПункт,
	|	ТаблицаАдресов.Улица,
	|	ТаблицаАдресов.Дом,
	|	ТаблицаАдресов.Корпус
	|ПОМЕСТИТЬ втАдресаИзБазы
	|ИЗ
	|	&ТаблицаАдресов КАК ТаблицаАдресов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУслуг.KYSL,
	|	ТаблицаУслуг.Услуга
	|ПОМЕСТИТЬ втТаблицаУслуг
	|ИЗ
	|	&ТаблицаУслуг КАК ТаблицаУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанныхИзФайла.ILCHET,
	|	ТаблицаДанныхИзФайла.NPD,
	|	ТаблицаДанныхИзФайла.FAMIL,
	|	ТаблицаДанныхИзФайла.IMJA,
	|	ТаблицаДанныхИзФайла.OTCH,
	|	ТаблицаДанныхИзФайла.DROG,
	|	ТаблицаДанныхИзФайла.VDP,
	|	ТаблицаДанныхИзФайла.NASP,
	|	ТаблицаДанныхИзФайла.YLIC,
	|	ТаблицаДанныхИзФайла.NDOM,
	|	ТаблицаДанныхИзФайла.NKORP,
	|	ТаблицаДанныхИзФайла.NKW,
	|	ТаблицаДанныхИзФайла.NKOMN,
	|	ТаблицаДанныхИзФайла.OS,
	|	ТаблицаДанныхИзФайла.OTAPLIS,
	|	ТаблицаДанныхИзФайла.DATN,
	|	ТаблицаДанныхИзФайла.PRED,
	|	ТаблицаДанныхИзФайла.NGKYSL,
	|	ТаблицаДанныхИзФайла.EDIZML,
	|	ТаблицаДанныхИзФайла.SOCHNORM,
	|	ТаблицаДанныхИзФайла.TARIF,
	|	ТаблицаДанныхИзФайла.FAKT,
	|	ТаблицаДанныхИзФайла.SUMMFAKT,
	|	ТаблицаДанныхИзФайла.KOLZR,
	|	ТаблицаДанныхИзФайла.RAION,
	|	ТаблицаДанныхИзФайла.KPRED,
	|	ТаблицаДанныхИзФайла.KYSL,
	|	ТаблицаДанныхИзФайла.DATFOR,
	|	ТаблицаДанныхИзФайла.COUNT,
	|	ТаблицаДанныхИзФайла.LGT,
	|	ТаблицаДанныхИзФайла.PRIM,
	|	ТаблицаДанныхИзФайла.KOLDOLG
	|ПОМЕСТИТЬ ДанныеИзФайла
	|ИЗ
	|	&ТаблицаДанныхИзФайла КАК ТаблицаДанныхИзФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_Жильцы.Ссылка КАК Проживающий,
	|	втФИОФизЛиц.Фамилия,
	|	втФИОФизЛиц.Имя,
	|	втФИОФизЛиц.Отчество,
	|	УПЖКХ_Жильцы.ФизЛицо.ДатаРождения КАК ДатаРождения,
	|	УПЖКХ_Жильцы.Владелец КАК ЛицевойСчет,
	|	УПЖКХ_Жильцы.Владелец.Адрес.Владелец КАК Здание,
	|	УПЖКХ_Жильцы.Владелец.Адрес КАК Помещение
	|ПОМЕСТИТЬ ЖильцыБазыДанных
	|ИЗ
	|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втФИОФизЛиц КАК втФИОФизЛиц
	|		ПО УПЖКХ_Жильцы.ФизЛицо = втФИОФизЛиц.ФизическоеЛицо
	|ГДЕ
	|	НЕ УПЖКХ_Жильцы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втАдресаИзБазы.НаселенныйПункт,
	|	втАдресаИзБазы.Улица,
	|	втАдресаИзБазы.Дом,
	|	втАдресаИзБазы.Корпус,
	|	ЖильцыБазыДанных.Проживающий,
	|	ЖильцыБазыДанных.Фамилия,
	|	ЖильцыБазыДанных.Имя,
	|	ЖильцыБазыДанных.Отчество,
	|	ЖильцыБазыДанных.ДатаРождения,
	|	ЖильцыБазыДанных.ЛицевойСчет,
	|	ЖильцыБазыДанных.Здание,
	|	ЖильцыБазыДанных.Помещение
	|ПОМЕСТИТЬ втЖильцыСАдресами
	|ИЗ
	|	ЖильцыБазыДанных КАК ЖильцыБазыДанных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втАдресаИзБазы КАК втАдресаИзБазы
	|		ПО ЖильцыБазыДанных.Здание = втАдресаИзБазы.Здание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцыСАдресами.Проживающий,
	|	втЖильцыСАдресами.ЛицевойСчет,
	|	втЖильцыСАдресами.Помещение,
	|	втТаблицаУслуг.Услуга,
	|	ДанныеИзФайла.FAMIL,
	|	ДанныеИзФайла.IMJA,
	|	ДанныеИзФайла.OTCH,
	|	ДанныеИзФайла.DROG,
	|	ДанныеИзФайла.NASP,
	|	ДанныеИзФайла.YLIC,
	|	ДанныеИзФайла.NDOM,
	|	ДанныеИзФайла.NKORP
	|ПОМЕСТИТЬ втВсеНайденныеЖильцы
	|ИЗ
	|	ДанныеИзФайла КАК ДанныеИзФайла
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЖильцыСАдресами КАК втЖильцыСАдресами
	|		ПО ДанныеИзФайла.FAMIL = втЖильцыСАдресами.Фамилия
	|			И ДанныеИзФайла.IMJA = втЖильцыСАдресами.Имя
	|			И ДанныеИзФайла.OTCH = втЖильцыСАдресами.Отчество
	|			И ДанныеИзФайла.NASP = втЖильцыСАдресами.НаселенныйПункт
	|			И ДанныеИзФайла.YLIC = втЖильцыСАдресами.Улица
	|			И ДанныеИзФайла.NDOM = втЖильцыСАдресами.Дом
	|			И ДанныеИзФайла.NKORP = втЖильцыСАдресами.Корпус
	|			И ДанныеИзФайла.DROG = втЖильцыСАдресами.ДатаРождения
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаУслуг КАК втТаблицаУслуг
	|		ПО ДанныеИзФайла.KYSL = втТаблицаУслуг.KYSL
	|
	|СГРУППИРОВАТЬ ПО
	|	втЖильцыСАдресами.Проживающий,
	|	втЖильцыСАдресами.ЛицевойСчет,
	|	втЖильцыСАдресами.Помещение,
	|	втТаблицаУслуг.Услуга,
	|	ДанныеИзФайла.NASP,
	|	ДанныеИзФайла.NDOM,
	|	ДанныеИзФайла.NKORP,
	|	ДанныеИзФайла.YLIC,
	|	ДанныеИзФайла.OTCH,
	|	ДанныеИзФайла.DROG,
	|	ДанныеИзФайла.FAMIL,
	|	ДанныеИзФайла.IMJA
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец
	|ПОМЕСТИТЬ втЗарегистрированныеЖильцы
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(&ДатаКон, ДатаИзменения <= &ДатаКон) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_НазначенныеНачисленияСрезПоследних.Объект КАК ЛицевойСчет,
	|	КВП_НазначенныеНачисленияСрезПоследних.Услуга
	|ПОМЕСТИТЬ втНазначенныеУслуги
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления.СрезПоследних(
	|			&ДатаКон,
	|			Организация = &Организация
	|				И Действует
	|				И Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета) КАК КВП_НазначенныеНачисленияСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВсеНайденныеЖильцы.Проживающий,
	|	втВсеНайденныеЖильцы.ЛицевойСчет,
	|	втВсеНайденныеЖильцы.Помещение,
	|	втВсеНайденныеЖильцы.Услуга,
	|	втВсеНайденныеЖильцы.FAMIL,
	|	втВсеНайденныеЖильцы.IMJA,
	|	втВсеНайденныеЖильцы.OTCH,
	|	втВсеНайденныеЖильцы.DROG,
	|	втВсеНайденныеЖильцы.NASP,
	|	втВсеНайденныеЖильцы.YLIC,
	|	втВсеНайденныеЖильцы.NDOM,
	|	втВсеНайденныеЖильцы.NKORP
	|ПОМЕСТИТЬ НайденныеЖильцы
	|ИЗ
	|	втВсеНайденныеЖильцы КАК втВсеНайденныеЖильцы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЗарегистрированныеЖильцы КАК втЗарегистрированныеЖильцы
	|		ПО втВсеНайденныеЖильцы.ЛицевойСчет = втЗарегистрированныеЖильцы.ЛицевойСчет
	|			И втВсеНайденныеЖильцы.Проживающий = втЗарегистрированныеЖильцы.Жилец
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНазначенныеУслуги КАК втНазначенныеУслуги
	|		ПО втВсеНайденныеЖильцы.ЛицевойСчет = втНазначенныеУслуги.ЛицевойСчет
	|			И втВсеНайденныеЖильцы.Услуга = втНазначенныеУслуги.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет
	|ПОМЕСТИТЬ втДействующиеЛС
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					НайденныеЖильцы.ЛицевойСчет
	|				ИЗ
	|					НайденныеЖильцы КАК НайденныеЖильцы)) КАК КВП_ЛицевыеСчетаСрезПоследних
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.ЛицевойСчет,
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втУчетКоличестваЖильцов
	|ИЗ
	|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					НайденныеЖильцы.ЛицевойСчет
	|				ИЗ
	|					НайденныеЖильцы КАК НайденныеЖильцы)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец) КАК КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втКолвоИзСведений
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			&ДатаКон,
	|			ДатаИзменения <= &ДатаКон
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						НайденныеЖильцы.ЛицевойСчет
	|					ИЗ
	|						НайденныеЖильцы КАК НайденныеЖильцы)) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДействующиеЛС.ЛицевойСчет,
	|	ВЫБОР
	|		КОГДА &УказыватьКоличествоПрожИЗарегЧислами = ИСТИНА
	|			ТОГДА ЕСТЬNULL(втУчетКоличестваЖильцов.КоличествоЗарегистрированных, 0)
	|		ИНАЧЕ ЕСТЬNULL(втКолвоИзСведений.КоличествоЗарегистрированных, 0)
	|	КОНЕЦ КАК КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втКолвоЗарег
	|ИЗ
	|	втДействующиеЛС КАК втДействующиеЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКолвоИзСведений КАК втКолвоИзСведений
	|		ПО втДействующиеЛС.ЛицевойСчет = втКолвоИзСведений.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУчетКоличестваЖильцов КАК втУчетКоличестваЖильцов
	|		ПО втДействующиеЛС.ЛицевойСчет = втУчетКоличестваЖильцов.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Размер КАК НормаПотребленияРазмер,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки КАК ВариантНастройки
	|ПОМЕСТИТЬ втНормыПотребленияУслуг
	|ИЗ
	|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						НайденныеЖильцы.ЛицевойСчет
	|					ИЗ
	|						НайденныеЖильцы КАК НайденныеЖильцы)
	|				И Услуга В
	|					(ВЫБРАТЬ
	|						НайденныеЖильцы.Услуга
	|					ИЗ
	|						НайденныеЖильцы КАК НайденныеЖильцы)) КАК КВП_НормыПотребленияУслугЛССрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НайденныеЖильцы.Проживающий,
	|	НайденныеЖильцы.ЛицевойСчет,
	|	НайденныеЖильцы.Помещение,
	|	НайденныеЖильцы.Услуга,
	|	НайденныеЖильцы.FAMIL,
	|	НайденныеЖильцы.IMJA,
	|	НайденныеЖильцы.OTCH,
	|	НайденныеЖильцы.DROG,
	|	НайденныеЖильцы.NASP,
	|	НайденныеЖильцы.YLIC,
	|	НайденныеЖильцы.NDOM,
	|	НайденныеЖильцы.NKORP,
	|	ЕСТЬNULL(втНормыПотребленияУслуг.НормаПотребления, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)) КАК НормаПотребления,
	|	ЕСТЬNULL(втНормыПотребленияУслуг.НормаПотребленияРазмер, 0) КАК НормаПотребленияРазмер,
	|	ЕСТЬNULL(втНормыПотребленияУслуг.ВариантНастройки, ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.ПустаяСсылка)) КАК НормаПотребленияВариантНастройки
	|ПОМЕСТИТЬ втНормыПотребления
	|ИЗ
	|	НайденныеЖильцы КАК НайденныеЖильцы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНормыПотребленияУслуг КАК втНормыПотребленияУслуг
	|		ПО НайденныеЖильцы.ЛицевойСчет = втНормыПотребленияУслуг.ЛицевойСчет
	|			И НайденныеЖильцы.Услуга = втНормыПотребленияУслуг.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНормыПотребления.Проживающий,
	|	втНормыПотребления.ЛицевойСчет,
	|	втНормыПотребления.Помещение,
	|	втНормыПотребления.Услуга,
	|	ЕСТЬNULL(втКолвоЗарег.КоличествоЗарегистрированных, 0) КАК КоличествоЗарегистрированных,
	|	втНормыПотребления.FAMIL,
	|	втНормыПотребления.IMJA,
	|	втНормыПотребления.OTCH,
	|	втНормыПотребления.DROG,
	|	втНормыПотребления.NASP,
	|	втНормыПотребления.YLIC,
	|	втНормыПотребления.NDOM,
	|	втНормыПотребления.NKORP,
	|	втНормыПотребления.НормаПотребления,
	|	втНормыПотребления.НормаПотребленияРазмер,
	|	втНормыПотребления.НормаПотребленияВариантНастройки
	|ПОМЕСТИТЬ втИтоговаяЖильцы
	|ИЗ
	|	втНормыПотребления КАК втНормыПотребления
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКолвоЗарег КАК втКолвоЗарег
	|		ПО втНормыПотребления.ЛицевойСчет = втКолвоЗарег.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	СУММА(УПЖКХ_НачисленияОбороты.Количество) КАК Количество,
	|	УПЖКХ_НачисленияОбороты.Тариф
	|ПОМЕСТИТЬ втРазмерыТарифов
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Организация = &Организация
	|				И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|				И РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ))
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втИтоговаяЖильцы.ЛицевойСчет
	|					ИЗ
	|						втИтоговаяЖильцы КАК втИтоговаяЖильцы)
	|				И Услуга В
	|					(ВЫБРАТЬ
	|						втИтоговаяЖильцы.Услуга
	|					ИЗ
	|						втИтоговаяЖильцы КАК втИтоговаяЖильцы)
	|				И НЕ Тариф = 0
	|				И НЕ Количество = 0) КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.Тариф
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговаяЖильцы.Проживающий,
	|	втИтоговаяЖильцы.ЛицевойСчет,
	|	втИтоговаяЖильцы.Помещение,
	|	втИтоговаяЖильцы.КоличествоЗарегистрированных,
	|	втИтоговаяЖильцы.Услуга КАК Услуга,
	|	ЕСТЬNULL(втРазмерыТарифов.Количество, 0) КАК Количество,
	|	ЕСТЬNULL(втРазмерыТарифов.Тариф, 0) КАК РазмерТарифа,
	|	втИтоговаяЖильцы.FAMIL,
	|	втИтоговаяЖильцы.IMJA,
	|	втИтоговаяЖильцы.OTCH,
	|	втИтоговаяЖильцы.DROG,
	|	втИтоговаяЖильцы.NASP,
	|	втИтоговаяЖильцы.YLIC,
	|	втИтоговаяЖильцы.NDOM,
	|	втИтоговаяЖильцы.NKORP,
	|	втИтоговаяЖильцы.НормаПотребления,
	|	втИтоговаяЖильцы.НормаПотребленияРазмер,
	|	втИтоговаяЖильцы.НормаПотребленияВариантНастройки
	|ПОМЕСТИТЬ втЖильцыСТарифами
	|ИЗ
	|	втИтоговаяЖильцы КАК втИтоговаяЖильцы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втРазмерыТарифов КАК втРазмерыТарифов
	|		ПО втИтоговаяЖильцы.ЛицевойСчет = втРазмерыТарифов.ЛицевойСчет
	|			И втИтоговаяЖильцы.Услуга = втРазмерыТарифов.Услуга
	|
	|СГРУППИРОВАТЬ ПО
	|	втИтоговаяЖильцы.Проживающий,
	|	втИтоговаяЖильцы.ЛицевойСчет,
	|	втИтоговаяЖильцы.Помещение,
	|	втИтоговаяЖильцы.КоличествоЗарегистрированных,
	|	втИтоговаяЖильцы.Услуга,
	|	ЕСТЬNULL(втРазмерыТарифов.Количество, 0),
	|	ЕСТЬNULL(втРазмерыТарифов.Тариф, 0),
	|	втИтоговаяЖильцы.FAMIL,
	|	втИтоговаяЖильцы.IMJA,
	|	втИтоговаяЖильцы.OTCH,
	|	втИтоговаяЖильцы.DROG,
	|	втИтоговаяЖильцы.NASP,
	|	втИтоговаяЖильцы.YLIC,
	|	втИтоговаяЖильцы.NDOM,
	|	втИтоговаяЖильцы.NKORP,
	|	втИтоговаяЖильцы.НормаПотребления,
	|	втИтоговаяЖильцы.НормаПотребленияРазмер,
	|	втИтоговаяЖильцы.НормаПотребленияВариантНастройки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток КАК СуммаНачисленияОстаток
	|ПОМЕСТИТЬ втЗадолженности
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&ДатаНач,
	|			Организация = &Организация
	|				И Услуга В
	|					(ВЫБРАТЬ
	|						втЖильцыСТарифами.Услуга
	|					ИЗ
	|						втЖильцыСТарифами КАК втЖильцыСТарифами)
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втЖильцыСТарифами.ЛицевойСчет
	|					ИЗ
	|						втЖильцыСТарифами КАК втЖильцыСТарифами)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцыСТарифами.Проживающий,
	|	втЖильцыСТарифами.ЛицевойСчет,
	|	втЖильцыСТарифами.Помещение,
	|	втЖильцыСТарифами.КоличествоЗарегистрированных,
	|	втЖильцыСТарифами.Услуга,
	|	втЖильцыСТарифами.Количество,
	|	втЖильцыСТарифами.РазмерТарифа,
	|	втЖильцыСТарифами.РазмерТарифа * втЖильцыСТарифами.Количество КАК ФактНачисление,
	|	втЖильцыСТарифами.FAMIL,
	|	втЖильцыСТарифами.IMJA,
	|	втЖильцыСТарифами.OTCH,
	|	втЖильцыСТарифами.DROG,
	|	втЖильцыСТарифами.NASP,
	|	втЖильцыСТарифами.YLIC,
	|	втЖильцыСТарифами.NDOM,
	|	втЖильцыСТарифами.NKORP,
	|	втЖильцыСТарифами.НормаПотребления,
	|	втЖильцыСТарифами.НормаПотребленияРазмер,
	|	втЖильцыСТарифами.НормаПотребленияВариантНастройки,
	|	ЕСТЬNULL(втЗадолженности.СуммаНачисленияОстаток, 0) КАК СуммаНачисленияОстаток
	|ПОМЕСТИТЬ втЖильцыСКолЗадолженностями
	|ИЗ
	|	втЖильцыСТарифами КАК втЖильцыСТарифами
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЗадолженности КАК втЗадолженности
	|		ПО втЖильцыСТарифами.ЛицевойСчет = втЗадолженности.ЛицевойСчет
	|			И втЖильцыСТарифами.Услуга = втЗадолженности.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект КАК Объект,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги КАК Услуга
	|ПОМЕСТИТЬ втЗакрепленныеСчетчики
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&ДатаКон,
	|			Счетчик.ВидУслуги В
	|					(ВЫБРАТЬ
	|						втЖильцыСКолЗадолженностями.Услуга
	|					ИЗ
	|						втЖильцыСКолЗадолженностями КАК втЖильцыСКолЗадолженностями)
	|				И (Объект В
	|						(ВЫБРАТЬ
	|							втЖильцыСКолЗадолженностями.ЛицевойСчет
	|						ИЗ
	|							втЖильцыСКолЗадолженностями КАК втЖильцыСКолЗадолженностями)
	|					ИЛИ Объект В
	|						(ВЫБРАТЬ
	|							втЖильцыСКолЗадолженностями.Помещение
	|						ИЗ
	|							втЖильцыСКолЗадолженностями КАК втЖильцыСКолЗадолженностями))
	|				И ДатаИзменения <= &ДатаКон) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцыСКолЗадолженностями.Проживающий,
	|	втЖильцыСКолЗадолженностями.ЛицевойСчет,
	|	втЖильцыСКолЗадолженностями.Помещение,
	|	втЖильцыСКолЗадолженностями.КоличествоЗарегистрированных,
	|	втЖильцыСКолЗадолженностями.Услуга,
	|	втЖильцыСКолЗадолженностями.Количество,
	|	втЖильцыСКолЗадолженностями.РазмерТарифа,
	|	втЖильцыСКолЗадолженностями.ФактНачисление,
	|	ВЫБОР
	|		КОГДА втЗакрепленныеСчетчики.Услуга ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК COUNT,
	|	втЖильцыСКолЗадолженностями.FAMIL,
	|	втЖильцыСКолЗадолженностями.IMJA,
	|	втЖильцыСКолЗадолженностями.OTCH,
	|	втЖильцыСКолЗадолженностями.DROG,
	|	втЖильцыСКолЗадолженностями.NASP,
	|	втЖильцыСКолЗадолженностями.YLIC,
	|	втЖильцыСКолЗадолженностями.NDOM,
	|	втЖильцыСКолЗадолженностями.NKORP,
	|	втЖильцыСКолЗадолженностями.НормаПотребления,
	|	втЖильцыСКолЗадолженностями.НормаПотребленияРазмер,
	|	втЖильцыСКолЗадолженностями.НормаПотребленияВариантНастройки,
	|	втЖильцыСКолЗадолженностями.СуммаНачисленияОстаток
	|ПОМЕСТИТЬ втЖильцыСНаличиемИПУ
	|ИЗ
	|	втЖильцыСКолЗадолженностями КАК втЖильцыСКолЗадолженностями
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЗакрепленныеСчетчики КАК втЗакрепленныеСчетчики
	|		ПО втЖильцыСКолЗадолженностями.Услуга = втЗакрепленныеСчетчики.Услуга
	|			И (втЖильцыСКолЗадолженностями.ЛицевойСчет = втЗакрепленныеСчетчики.Объект
	|				ИЛИ втЖильцыСКолЗадолженностями.Помещение = втЗакрепленныеСчетчики.Объект)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет,
	|	ВЫБОР
	|		КОГДА НЕ КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель = 0
	|			ТОГДА КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель / КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДоляЛС
	|ПОМЕСТИТЬ втРазмерыДолейЛС
	|ИЗ
	|	РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втЖильцыСНаличиемИПУ.ЛицевойСчет
	|				ИЗ
	|					втЖильцыСНаличиемИПУ КАК втЖильцыСНаличиемИПУ)) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцыСНаличиемИПУ.Проживающий,
	|	втЖильцыСНаличиемИПУ.ЛицевойСчет,
	|	втЖильцыСНаличиемИПУ.Помещение,
	|	втЖильцыСНаличиемИПУ.КоличествоЗарегистрированных,
	|	втЖильцыСНаличиемИПУ.Услуга,
	|	втЖильцыСНаличиемИПУ.Количество,
	|	втЖильцыСНаличиемИПУ.РазмерТарифа,
	|	втЖильцыСНаличиемИПУ.ФактНачисление,
	|	ЕСТЬNULL(втРазмерыДолейЛС.ДоляЛС, 0) КАК ДоляЛС,
	|	втЖильцыСНаличиемИПУ.FAMIL,
	|	втЖильцыСНаличиемИПУ.IMJA,
	|	втЖильцыСНаличиемИПУ.OTCH,
	|	втЖильцыСНаличиемИПУ.DROG,
	|	втЖильцыСНаличиемИПУ.NASP,
	|	втЖильцыСНаличиемИПУ.YLIC,
	|	втЖильцыСНаличиемИПУ.NDOM,
	|	втЖильцыСНаличиемИПУ.NKORP,
	|	втЖильцыСНаличиемИПУ.НормаПотребления,
	|	втЖильцыСНаличиемИПУ.НормаПотребленияРазмер,
	|	втЖильцыСНаличиемИПУ.НормаПотребленияВариантНастройки,
	|	втЖильцыСНаличиемИПУ.СуммаНачисленияОстаток,
	|	втЖильцыСНаличиемИПУ.COUNT
	|ПОМЕСТИТЬ втЖильцыСДолямиЛС
	|ИЗ
	|	втЖильцыСНаличиемИПУ КАК втЖильцыСНаличиемИПУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ втРазмерыДолейЛС КАК втРазмерыДолейЛС
	|		ПО втЖильцыСНаличиемИПУ.ЛицевойСчет = втРазмерыДолейЛС.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект,
	|	КВП_ПлощадьПомещенияСрезПоследних.ВидПлощади,
	|	КВП_ПлощадьПомещенияСрезПоследних.Площадь
	|ПОМЕСТИТЬ втПлощадиПомещений
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|			&ДатаКон,
	|			Объект В
	|					(ВЫБРАТЬ
	|						втЖильцыСДолямиЛС.Помещение
	|					ИЗ
	|						втЖильцыСДолямиЛС КАК втЖильцыСДолямиЛС)
	|				И ВидПлощади В (ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь), &ВидОтапливаемойПлощади)) КАК КВП_ПлощадьПомещенияСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцыСДолямиЛС.Проживающий,
	|	втЖильцыСДолямиЛС.ЛицевойСчет,
	|	втЖильцыСДолямиЛС.Помещение,
	|	втЖильцыСДолямиЛС.КоличествоЗарегистрированных,
	|	втЖильцыСДолямиЛС.Услуга,
	|	втЖильцыСДолямиЛС.Количество,
	|	втЖильцыСДолямиЛС.РазмерТарифа,
	|	втЖильцыСДолямиЛС.ФактНачисление,
	|	втЖильцыСДолямиЛС.ДоляЛС,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втПлощадиПомещений.ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)
	|				ТОГДА ЕСТЬNULL(втПлощадиПомещений.Площадь, 0) * втЖильцыСДолямиЛС.ДоляЛС
	|		КОНЕЦ) КАК ОбщаяПлощадь,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втПлощадиПомещений.ВидПлощади = &ВидОтапливаемойПлощади
	|				ТОГДА ЕСТЬNULL(втПлощадиПомещений.Площадь, 0) * втЖильцыСДолямиЛС.ДоляЛС
	|		КОНЕЦ) КАК ОтапливаемаяПлощадь,
	|	втЖильцыСДолямиЛС.FAMIL,
	|	втЖильцыСДолямиЛС.IMJA,
	|	втЖильцыСДолямиЛС.OTCH,
	|	втЖильцыСДолямиЛС.DROG,
	|	втЖильцыСДолямиЛС.NASP,
	|	втЖильцыСДолямиЛС.YLIC,
	|	втЖильцыСДолямиЛС.NDOM,
	|	втЖильцыСДолямиЛС.NKORP,
	|	ЕСТЬNULL(втТаблицаУслуг.KYSL, """") КАК KYSL,
	|	втЖильцыСДолямиЛС.НормаПотребления,
	|	втЖильцыСДолямиЛС.НормаПотребленияРазмер,
	|	втЖильцыСДолямиЛС.НормаПотребленияВариантНастройки,
	|	втЖильцыСДолямиЛС.СуммаНачисленияОстаток,
	|	втЖильцыСДолямиЛС.COUNT
	|ПОМЕСТИТЬ втЖильцыСПлощадями
	|ИЗ
	|	втЖильцыСДолямиЛС КАК втЖильцыСДолямиЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПлощадиПомещений КАК втПлощадиПомещений
	|		ПО втЖильцыСДолямиЛС.Помещение = втПлощадиПомещений.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаУслуг КАК втТаблицаУслуг
	|		ПО втЖильцыСДолямиЛС.Услуга = втТаблицаУслуг.Услуга
	|
	|СГРУППИРОВАТЬ ПО
	|	втЖильцыСДолямиЛС.Помещение,
	|	втЖильцыСДолямиЛС.Проживающий,
	|	втЖильцыСДолямиЛС.ЛицевойСчет,
	|	втЖильцыСДолямиЛС.Услуга,
	|	втЖильцыСДолямиЛС.КоличествоЗарегистрированных,
	|	втЖильцыСДолямиЛС.Количество,
	|	втЖильцыСДолямиЛС.РазмерТарифа,
	|	втЖильцыСДолямиЛС.ФактНачисление,
	|	втЖильцыСДолямиЛС.ДоляЛС,
	|	втЖильцыСДолямиЛС.FAMIL,
	|	втЖильцыСДолямиЛС.IMJA,
	|	втЖильцыСДолямиЛС.OTCH,
	|	втЖильцыСДолямиЛС.DROG,
	|	втЖильцыСДолямиЛС.NASP,
	|	втЖильцыСДолямиЛС.YLIC,
	|	втЖильцыСДолямиЛС.NDOM,
	|	втЖильцыСДолямиЛС.NKORP,
	|	втТаблицаУслуг.KYSL,
	|	втЖильцыСДолямиЛС.НормаПотребления,
	|	втЖильцыСДолямиЛС.НормаПотребленияРазмер,
	|	втЖильцыСДолямиЛС.НормаПотребленияВариантНастройки,
	|	втЖильцыСДолямиЛС.СуммаНачисленияОстаток,
	|	втЖильцыСДолямиЛС.COUNT
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втЖильцыСПлощадями.ЛицевойСчет, ДанныеИзФайла.ILCHET) КАК ILCHET,
	|	втЖильцыСПлощадями.КоличествоЗарегистрированных КАК KOLZR,
	|	ПРЕДСТАВЛЕНИЕ(втЖильцыСПлощадями.Услуга) КАК NGKYSL,
	|	втЖильцыСПлощадями.Услуга КАК Услуга,
	|	втЖильцыСПлощадями.Количество КАК FAKT,
	|	втЖильцыСПлощадями.РазмерТарифа КАК TARIF,
	|	втЖильцыСПлощадями.ФактНачисление КАК SUMMFAKT,
	|	втЖильцыСПлощадями.ОбщаяПлощадь КАК OS,
	|	втЖильцыСПлощадями.ОтапливаемаяПлощадь КАК OTAPLIS,
	|	ДанныеИзФайла.NPD,
	|	ДанныеИзФайла.FAMIL КАК FAMIL,
	|	ДанныеИзФайла.IMJA,
	|	ДанныеИзФайла.OTCH,
	|	ДанныеИзФайла.DROG,
	|	ДанныеИзФайла.VDP,
	|	ДанныеИзФайла.NASP,
	|	ДанныеИзФайла.YLIC,
	|	ДанныеИзФайла.NDOM,
	|	ДанныеИзФайла.NKORP,
	|	ДанныеИзФайла.NKW,
	|	ДанныеИзФайла.NKOMN,
	|	ДанныеИзФайла.DATN,
	|	ДанныеИзФайла.PRED,
	|	ДанныеИзФайла.SOCHNORM,
	|	ДанныеИзФайла.RAION,
	|	ДанныеИзФайла.KPRED,
	|	ДанныеИзФайла.DATFOR,
	|	ДанныеИзФайла.LGT,
	|	ДанныеИзФайла.PRIM,
	|	ДанныеИзФайла.KYSL,
	|	втЖильцыСПлощадями.НормаПотребления,
	|	втЖильцыСПлощадями.НормаПотребленияРазмер,
	|	втЖильцыСПлощадями.НормаПотребленияВариантНастройки,
	|	ЕСТЬNULL(втЖильцыСПлощадями.СуммаНачисленияОстаток, 0) КАК Сальдо,
	|	ДанныеИзФайла.KOLDOLG,
	|	втЖильцыСПлощадями.COUNT
	|ПОМЕСТИТЬ втИтоговаяВыгрузка
	|ИЗ
	|	втЖильцыСПлощадями КАК втЖильцыСПлощадями
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДанныеИзФайла КАК ДанныеИзФайла
	|		ПО втЖильцыСПлощадями.FAMIL = ДанныеИзФайла.FAMIL
	|			И втЖильцыСПлощадями.IMJA = ДанныеИзФайла.IMJA
	|			И втЖильцыСПлощадями.OTCH = ДанныеИзФайла.OTCH
	|			И втЖильцыСПлощадями.DROG = ДанныеИзФайла.DROG
	|			И втЖильцыСПлощадями.NASP = ДанныеИзФайла.NASP
	|			И втЖильцыСПлощадями.YLIC = ДанныеИзФайла.YLIC
	|			И втЖильцыСПлощадями.NDOM = ДанныеИзФайла.NDOM
	|			И втЖильцыСПлощадями.NKORP = ДанныеИзФайла.NKORP
	|			И втЖильцыСПлощадями.KYSL = ДанныеИзФайла.KYSL";
	
	Запрос.Выполнить();
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет,
	|	МАКСИМУМ(КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период) КАК Период
	|ПОМЕСТИТЬ втПериодыЗадолженности
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(
	|			,
	|			&ДатаОпределенияЗадолженности,
	|			Регистратор,
	|			Движения,
	|			Организация = &Организация
	|				И Услуга В
	|					(ВЫБРАТЬ
	|						втЖильцыСТарифами.Услуга
	|					ИЗ
	|						втЖильцыСТарифами КАК втЖильцыСТарифами)
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втЖильцыСТарифами.ЛицевойСчет
	|					ИЗ
	|						втЖильцыСТарифами КАК втЖильцыСТарифами)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты
	|ГДЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период < &ДатаОпределенияЗадолженности
	|	И КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияКонечныйОстаток <= 0
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет,
	|	МИНИМУМ(КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период) КАК Период
	|ПОМЕСТИТЬ втПериодыНачалаНачислений
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(
	|			,
	|			&ДатаНач,
	|			Регистратор,
	|			Движения,
	|			Организация = &Организация
	|				И Услуга В
	|					(ВЫБРАТЬ
	|						втЖильцыСТарифами.Услуга
	|					ИЗ
	|						втЖильцыСТарифами КАК втЖильцыСТарифами)
	|				И (ЛицевойСчет) В
	|					(ВЫБРАТЬ
	|						втЖильцыСТарифами.ЛицевойСчет
	|					ИЗ
	|						втЖильцыСТарифами КАК втЖильцыСТарифами)
	|				И НЕ ЛицевойСчет В
	|						(ВЫБРАТЬ
	|							втПериодыЗадолженности.ЛицевойСчет
	|						ИЗ
	|							втПериодыЗадолженности КАК втПериодыЗадолженности)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты
	|ГДЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период < &ДатаНач
	|	И КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияКонечныйОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет";
	
	Запрос.Выполнить();
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	втИтоговаяВыгрузка.ILCHET,
	|	втИтоговаяВыгрузка.KOLZR,
	|	втИтоговаяВыгрузка.NGKYSL,
	|	втИтоговаяВыгрузка.Услуга,
	|	втИтоговаяВыгрузка.FAKT,
	|	втИтоговаяВыгрузка.TARIF,
	|	втИтоговаяВыгрузка.SUMMFAKT,
	|	втИтоговаяВыгрузка.OS,
	|	втИтоговаяВыгрузка.OTAPLIS,
	|	втИтоговаяВыгрузка.NPD,
	|	втИтоговаяВыгрузка.FAMIL,
	|	втИтоговаяВыгрузка.IMJA,
	|	втИтоговаяВыгрузка.OTCH,
	|	втИтоговаяВыгрузка.DROG,
	|	втИтоговаяВыгрузка.VDP,
	|	втИтоговаяВыгрузка.NASP,
	|	втИтоговаяВыгрузка.YLIC,
	|	втИтоговаяВыгрузка.NDOM,
	|	втИтоговаяВыгрузка.NKORP,
	|	втИтоговаяВыгрузка.NKW,
	|	втИтоговаяВыгрузка.NKOMN,
	|	втИтоговаяВыгрузка.DATN,
	|	втИтоговаяВыгрузка.PRED,
	|	втИтоговаяВыгрузка.SOCHNORM,
	|	втИтоговаяВыгрузка.RAION,
	|	втИтоговаяВыгрузка.KPRED,
	|	втИтоговаяВыгрузка.DATFOR,
	|	втИтоговаяВыгрузка.LGT,
	|	втИтоговаяВыгрузка.PRIM,
	|	втИтоговаяВыгрузка.KYSL,
	|	втИтоговаяВыгрузка.НормаПотребления,
	|	втИтоговаяВыгрузка.НормаПотребленияРазмер,
	|	втИтоговаяВыгрузка.НормаПотребленияВариантНастройки,
	|	втИтоговаяВыгрузка.Сальдо,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втПериодыЗадолженности.Период, ЕСТЬNULL(втПериодыНачалаНачислений.Период, ДАТАВРЕМЯ(1, 1, 1))) = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА втПериодыЗадолженности.Период ЕСТЬ NULL
	|					ТОГДА РАЗНОСТЬДАТ(втПериодыНачалаНачислений.Период, &ДатаНач, МЕСЯЦ)
	|				ИНАЧЕ ВЫБОР
	|						КОГДА втПериодыЗадолженности.Период > &ДатаНач
	|							ТОГДА 0
	|						ИНАЧЕ РАЗНОСТЬДАТ(втПериодыЗадолженности.Период, &ДатаНач, МЕСЯЦ)
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК KOLDOLG,
	|	втИтоговаяВыгрузка.COUNT,
	|	КВП_Услуги.ВидУслуги.ЕдиницаИзмерения.Наименование КАК EDIZML
	|ИЗ
	|	втИтоговаяВыгрузка КАК втИтоговаяВыгрузка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КВП_Услуги КАК КВП_Услуги
	|		ПО втИтоговаяВыгрузка.Услуга = КВП_Услуги.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПериодыЗадолженности КАК втПериодыЗадолженности
	|		ПО втИтоговаяВыгрузка.ILCHET = втПериодыЗадолженности.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПериодыНачалаНачислений КАК втПериодыНачалаНачислений
	|		ПО втИтоговаяВыгрузка.ILCHET = втПериодыНачалаНачислений.ЛицевойСчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	втИтоговаяВыгрузка.FAMIL";
	
	ТаблицаВыгрузки = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

&НаСервере
// Убирает из наименования лицевого счета не цифровые символы.
// 
Функция ПодготовитьНомерЛСДляВывода(ЛицевойСчет)
	
	НаименованиеЛС = СокрЛП(ЛицевойСчет.Наименование);
	СтрокаДляВозврата = "";
	Пока СтрДлина(НаименованиеЛС) > 0 Цикл
		
		СимволЛС = Лев(НаименованиеЛС, 1);
		Если КодСимвола(СимволЛС) > 47 И КодСимвола(СимволЛС) < 58 Тогда
			СтрокаДляВозврата = СтрокаДляВозврата + СимволЛС;
		КонецЕсли;
		
		НаименованиеЛС = Прав(НаименованиеЛС, СтрДлина(НаименованиеЛС) - 1);
	КонецЦикла;
	
	Возврат СтрокаДляВозврата;
	
КонецФункции // ПодготовитьНомерЛСДляВывода()

&НаСервере
// Возвращает дату срока оплаты в текущем периоде за предыдущие начисления.
//
Функция ДатаСрокОплаты(ОтчетныйПериод = Неопределено)
	
	ОтчетныйПериод = ?(ОтчетныйПериод = Неопределено, Объект.Период, ОтчетныйПериод);
	
	Отказ = Ложь;
	
	Структура = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(КонецМесяца(ОтчетныйПериод), Объект.Организация, Отказ);
	Если Отказ Тогда
		ДатаСрокОплаты = НачалоМесяца(ОтчетныйПериод);
	Иначе
		ДатаСрокОплаты = НачалоМесяца(ОтчетныйПериод) + Структура.ЧислоВнесенияПлатежа * 60 * 60 * 24;
	КонецЕсли;
	
	Возврат ДатаСрокОплаты;
	
КонецФункции // ДатаСрокОплаты()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// СОХРАНЯЕМЫЕ НАСТРОЙКИ

#Область РаботаСНастройками

&НаСервере
// Процедура восстановления настроек.
Процедура ВосстановитьНастройки()
	
	СтруктураПараметров = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("ПараметрыВыгрузки_ВыгрузкаКостромскаяОбласть", "ПараметрыВыгрузки");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		СтруктураПараметров.Свойство("КаталогЗагрузки",     КаталогЗагрузки);
		СтруктураПараметров.Свойство("КаталогВыгрузки",     КаталогВыгрузки);
		СтруктураПараметров.Свойство("КодОрганизации",      КодОрганизации);
		СтруктураПараметров.Свойство("ВидПлощадиОтопления", ВидПлощадиОтопления);
		
		врТаблицаСоответствий = Новый ТаблицаЗначений;
		
		СтруктураПараметров.Свойство("ТаблицаСоответствий", врТаблицаСоответствий);
		Если НЕ врТаблицаСоответствий = Неопределено Тогда
			Объект.КостромскаяОбласть_ТаблицаСоответствий.Загрузить(врТаблицаСоответствий);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура сохранения настроек.
Процедура СохранитьНастройки()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КаталогЗагрузки",     КаталогЗагрузки);
	СтруктураПараметров.Вставить("КаталогВыгрузки",     КаталогВыгрузки);
	СтруктураПараметров.Вставить("КодОрганизации",      КодОрганизации);
	СтруктураПараметров.Вставить("ВидПлощадиОтопления", ВидПлощадиОтопления);
	СтруктураПараметров.Вставить("ТаблицаСоответствий", Объект.КостромскаяОбласть_ТаблицаСоответствий.Выгрузить());
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("ПараметрыВыгрузки_ВыгрузкаКостромскаяОбласть", "ПараметрыВыгрузки", СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// РАБОТА С ВРЕМЕННЫМ ХРАНИЛИЩЕМ

#Область РаботаСВременнымХранилищем

&НаСервере
// Помещает настройки во временное хранилище.
Функция ПоместитьНастройкиВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.КостромскаяОбласть_ТаблицаСоответствий.Выгрузить(), Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
// Получает настройки из временного хранилища.
Функция ПолучитьНастройкиИзХранилища(АдресНастроекВХранилище)
	
	врУслугиВБазе = ПолучитьИзВременногоХранилища(АдресНастроекВХранилище);
	
	Если ТипЗнч(врУслугиВБазе) = Тип("ТаблицаЗначений") Тогда
		Объект.КостромскаяОбласть_ТаблицаСоответствий.Загрузить(врУслугиВБазе);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ДАННЫХ

#Область ЗаполнениеДанных

&НаКлиенте
// Проверяет наличие всех необходимых данных для заполнения таблиц выгрузки.
//
Функция ПроверкаУсловийДляЗаполненияТаблиц()
	
	ТекстОшибки = "";
	
	Если НЕ ЗначениеЗаполнено(Объект.Период) Тогда
		ТекстОшибки = ТекстОшибки + "Не указан период выгрузки!";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не указана организация!", "Не указан организация!");
	КонецЕсли;
	
	Если ПустаяСтрока(КаталогЗагрузки) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не указан каталог загрузки!", "Не указан каталог загрузки!");
	КонецЕсли;
	
	Если ПустаяСтрока(КаталогВыгрузки) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не указан каталог выгрузки!", "Не указан каталог выгрузки!");
	КонецЕсли;
	
	Если ПустаяСтрока(КодОрганизации) Тогда
		ТекстОшибки = ТекстОшибки + "Не указан код организации!";
	КонецЕсли;
	
	Если Объект.КостромскаяОбласть_ТаблицаСоответствий.Количество() = 0 Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не заполнена таблица соответствия услуг!", "Не заполнена таблица соответствия услуг!");
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции // ПроверкаУсловийДляЗаполненияТаблиц

&НаСервере
// Процедура заполнения всех данных.
Процедура ЗаполнитьНаСервере(СоответствиеАдресов)
	
	Объект.КостромскаяОбласть_ТаблицаВыгрузки.Очистить();
	
	// Запись временных данных во временный файл.
	СписокФайлов = Новый Массив;
	Для Каждого СтрокаАдреса ИЗ СоответствиеАдресов Цикл
		врДанныеФайла = ПолучитьИзВременногоХранилища(СтрокаАдреса.Значение);
		ВременныйФайл = ПолучитьИмяВременногоФайла("DBF");
		
		// Для чтения *.dbf формата урежем имя временного файла.
		ФайлДБФ = Новый Файл(ВременныйФайл);
		СтароеИмяФайла = ФайлДБФ.ИмяБезРасширения + ".DBF";
		НовоеИмяФайла  = Лев(СтрокаАдреса.Ключ, 8) + ".DBF";
		ВременныйФайл  = СтрЗаменить(ФайлДБФ.ПолноеИмя, СтароеИмяФайла, НовоеИмяФайла);
	
		врДанныеФайла.Записать(ВременныйФайл);
		
		СписокФайлов.Добавить(ВременныйФайл);
	КонецЦикла;
	
	Кодировка = КодировкаXBase.OEM;
	
	ТаблицаДанныхФайла = Объект.КостромскаяОбласть_ТаблицаВыгрузки.Выгрузить();
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("ВидПлощадиОтопления", ВидПлощадиОтопления);
	ПараметрыВыгрузки.Вставить("КодОрганизации",      КодОрганизации);
	
	СформироватьТаблицуДанныхКостромскаяОбласть(ТаблицаДанныхФайла, Кодировка, СписокФайлов, ПараметрыВыгрузки);
	
	Если ТаблицаДанныхФайла.Количество() > 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Таблица выгрузки сформирована.");
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Нет данных по жильцам в базе.");
	КонецЕсли;
	
	Объект.КостромскаяОбласть_ТаблицаВыгрузки.Загрузить(ТаблицаДанныхФайла);
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ВЫГРУЗКА ФАЙЛОВ

#Область ВыгрузкаФайлов

&НаКлиенте
// Предназначена для выгрузки данных из таблицы данных в dbf-файл.
//
Процедура ВыгрузитьДанныеВФайлКостромскаяОбласть()
	
	Если Объект.КостромскаяОбласть_ТаблицаВыгрузки.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В таблице выгружаемых данных отсутствуют данные для выгрузки в dbf-файл.");
		Возврат;
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Начало выгрузки данных в файлы!");
		
		Для Каждого СтрокаУслуги Из СписокУслугВыгрузки Цикл
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("KYSL", СтрокаУслуги.Значение);
			
			НайденныеСтрокиВыгрузки = Объект.КостромскаяОбласть_ТаблицаВыгрузки.НайтиСтроки(СтруктураПоиска);
			
			Если НайденныеСтрокиВыгрузки.Количество() > 0 Тогда
				
				НаименованиеФайлаВыгрузки = "\P" + КодОрганизации + СтрокаУслуги.Значение + ".DBF";
				
				ФайлВыгрузки           = Новый XBase;
				ФайлВыгрузки.Кодировка = КодировкаXBase.OEM;
				ФайлВыгрузки.Поля.Добавить("ILCHET",   "S", 24);
				ФайлВыгрузки.Поля.Добавить("NPD",      "S", 6);
				ФайлВыгрузки.Поля.Добавить("FAMIL",    "S", 50);
				ФайлВыгрузки.Поля.Добавить("IMJA",     "S", 50);
				ФайлВыгрузки.Поля.Добавить("OTCH",     "S", 25);
				ФайлВыгрузки.Поля.Добавить("DROG",     "D");
				ФайлВыгрузки.Поля.Добавить("VDP",      "S", 2);
				ФайлВыгрузки.Поля.Добавить("NASP",     "S", 50);
				ФайлВыгрузки.Поля.Добавить("YLIC",     "S", 50);
				ФайлВыгрузки.Поля.Добавить("NDOM",     "S", 10);
				ФайлВыгрузки.Поля.Добавить("NKORP",    "S", 5);
				ФайлВыгрузки.Поля.Добавить("NKW",      "S", 5);
				ФайлВыгрузки.Поля.Добавить("NKOMN",    "S", 5);
				ФайлВыгрузки.Поля.Добавить("OS",       "N", 10, 2);
				ФайлВыгрузки.Поля.Добавить("OTAPLIS",  "N", 10, 2);
				ФайлВыгрузки.Поля.Добавить("DATN",     "S", 10);
				ФайлВыгрузки.Поля.Добавить("PRED",     "S", 50);
				ФайлВыгрузки.Поля.Добавить("NGKYSL",   "S", 45);
				ФайлВыгрузки.Поля.Добавить("EDIZML",   "S", 6);
				ФайлВыгрузки.Поля.Добавить("SOCHNORM", "N", 8, 3);
				ФайлВыгрузки.Поля.Добавить("TARIF",    "N", 10, 5);
				ФайлВыгрузки.Поля.Добавить("FAKT",     "N", 8, 3);
				ФайлВыгрузки.Поля.Добавить("SUMMFAKT", "N", 8, 2);
				ФайлВыгрузки.Поля.Добавить("KOLZR",    "N", 2, 0);
				ФайлВыгрузки.Поля.Добавить("KOLDOLG",  "N", 2, 0);
				ФайлВыгрузки.Поля.Добавить("RAION",    "N", 3, 0);
				ФайлВыгрузки.Поля.Добавить("KPRED",    "S", 4);
				ФайлВыгрузки.Поля.Добавить("KYSL",     "S", 2);
				ФайлВыгрузки.Поля.Добавить("DATFOR",   "D");
				ФайлВыгрузки.Поля.Добавить("COUNT",    "N", 1, 0);
				ФайлВыгрузки.Поля.Добавить("LGT",      "S", 2);
				ФайлВыгрузки.Поля.Добавить("PRIM",     "S", 5);
				
				ФайлВыгрузки.СоздатьФайл(КаталогВыгрузки + НаименованиеФайлаВыгрузки,);
				ФайлВыгрузки.АвтоСохранение = Истина;
				
				Для каждого ТекСтрока Из НайденныеСтрокиВыгрузки Цикл
					ФайлВыгрузки.Добавить();
					ЗаполнитьЗначенияСвойств(ФайлВыгрузки, ТекСтрока);
				КонецЦикла;
				
				ФайлВыгрузки.ЗакрытьФайл();
			КонецЕсли;
			
		КонецЦикла;
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Выгрузка в файлы завершена!");
		
	#КонецЕсли
	
КонецПроцедуры // ВыгрузитьДанныеВФайлТомскаяОбласть()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	ТекРабДата = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	Объект.Период = ТекРабДата;
	
	ВосстановитьНастройки();
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки();
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "КомандаНастройка".
Процедура КомандаНастройка(Команда)
	
	АдресНастроекВХранилище = ПоместитьНастройкиВХранилище();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаНастройкаЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты.Форма.КостромскаяОбласть_ФормаНастройки", Новый Структура("АдресНастроекВХранилище", АдресНастроекВХранилище), , , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата опроса команды "КомандаНастройка".
Процедура КомандаНастройкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		ПолучитьНастройкиИзХранилища(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаЗаполнить".
Процедура КомандаЗаполнить(Команда)
	
	ТекстОшибки = ПроверкаУсловийДляЗаполненияТаблиц();
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	КаталогНаДиске = Новый Файл(КаталогЗагрузки);
	КаталогНаДиске.НачатьПроверкуСуществования(Новый ОписаниеОповещения("КомандаЗаполнитьЗавершениеКаталогСуществует",ЭтотОбъект,
																		Новый Структура("КаталогНаДиске", КаталогНаДиске)));
	
КонецПроцедуры // КомандаЗаполнить()

&НаКлиенте
Процедура КомандаЗаполнитьЗавершениеКаталогСуществует(Существует, ДополнительныеПараметры) Экспорт
	
	КаталогНаДиске = ДополнительныеПараметры.КаталогНаДиске;
	
	Если Не Существует Тогда
		ПоказатьПредупреждение(Неопределено, "Каталог загрузки не найден!");
		Возврат;
	КонецЕсли;
	
	КаталогНаДиске.НачатьПроверкуЭтоКаталог(Новый ОписаниеОповещения("КомандаЗаполнитьЗавершениеЭтоКаталог",ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата команды "Команда заполнить".
//
Процедура КомандаЗаполнитьЗавершениеЭтоКаталог(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Если Не ЭтоКаталог Тогда
		ПоказатьПредупреждение(Неопределено, "Каталог загрузки не найден!");
		Возврат;
	КонецЕсли;
	
	НачатьПоискФайлов(Новый ОписаниеОповещения("КомандаЗаполнитьНайтиФайл", ЭтотОбъект),
											   КаталогЗагрузки, "*.DBF", Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения поиска файлов.
Процедура КомандаЗаполнитьНайтиФайл(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	ФайлыИзКаталога = НайденныеФайлы;
	Если ФайлыИзКаталога.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено,"Каталог пуст и не содержит файлов формата "".DBF""!");
		Возврат;
	КонецЕсли;
	
	ПомещаемыеФайлы = Новый Массив;
	Для Каждого ФайлЗагрузки Из ФайлыИзКаталога Цикл
		ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ФайлЗагрузки.ПолноеИмя));
	КонецЦикла;
	
	Описание = Новый ОписаниеОповещения("ОбработатьРезультатПомещенияФайлаЗагрузкиВХранилище", ЭтаФорма);
	НачатьПомещениеФайлов(Описание, ПомещаемыеФайлы,, Ложь, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата помещения файла в хранилище.
Процедура ОбработатьРезультатПомещенияФайлаЗагрузкиВХранилище(ПомещенныеФайлы, ДопПараметры) Экспорт
	
	Если ПомещенныеФайлы.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, "Произошла ошибка при получении файлов формата "".DBF""!");
		Возврат;
	КонецЕсли;
	
	СоответствиеАдресов = Новый Соответствие;
	Для Каждого ТекОписаниеФайла Из ПомещенныеФайлы Цикл
		текФайл = Новый Файл(ТекОписаниеФайла.Имя);
		СоответствиеАдресов.Вставить(текФайл.ИмяБезРасширения, ТекОписаниеФайла.Хранение);
	КонецЦикла;
	
	Если Объект.КостромскаяОбласть_ТаблицаВыгрузки.Количество() > 0 Тогда
		// Выведем вопрос об очистке таблицы.
		Оповещение   = Новый ОписаниеОповещения("КомандаЗаполнитьЗавершение", ЭтотОбъект, Новый Структура("СоответствиеАдресов", СоответствиеАдресов));
		ТекстВопроса = "Перед заполением таблица выгрузки будет очищена. Заполнить?";
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьНаСервере(СоответствиеАдресов);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьПомещениеФайлов()

&НаКлиенте
// Обработчик результата опроса команды "КомандаЗаполнитьВсе".
Процедура КомандаЗаполнитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьНаСервере(ДополнительныеПараметры.СоответствиеАдресов);
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьВсеЗавершение()

&НаКлиенте
// Обработчик команды "КомандаВыгрузить".
Процедура КомандаВыгрузить(Команда)
	
	Если ПустаяСтрока(КаталогВыгрузки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указан каталог выгрузки!");
		Возврат;
	КонецЕсли;
	
	Каталог = Новый Файл(КаталогВыгрузки);
	Каталог.НачатьПроверкуСуществования(Новый ОписаниеОповещения("КомандаВыгрузитьЗавершениеКаталогСуществует",ЭтотОбъект,
																 Новый Структура("Каталог", Каталог)));
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата команды "КомандаВыгрузить".
//
Процедура КомандаВыгрузитьЗавершениеКаталогСуществует(Существует, ДополнительныеПараметры) Экспорт
	
	Каталог = ДополнительныеПараметры.Каталог;
	
	Если Не Существует Тогда
		ПоказатьПредупреждение(Неопределено, "Каталог выгрузки не найден");
		Возврат;
	КонецЕсли;
	
	Каталог.НачатьПроверкуЭтоКаталог(Новый ОписаниеОповещения("КомандаВыгрузитьЗавершениеЭтоКаталог",ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата команды "КомандаВыгрузить".
//
Процедура КомандаВыгрузитьЗавершениеЭтоКаталог(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Если Не ЭтоКаталог Тогда
		ПоказатьПредупреждение(Неопределено, "Каталог выгрузки не найден");
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДанныеВФайлКостромскаяОбласть();
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

////////////////////////
// Диалог выбора файла

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Каталог выгрузки".
//
Процедура ИмяКаталогаЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Заголовок                   = "Выбор каталога файлов";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	ДиалогВыбораФайла.Каталог                     = КаталогВыгрузки;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ИмяКаталогаЗагрузкиНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла)));
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик результата работы диалога выбора файла
//
Процедура ИмяКаталогаЗагрузкиНачалоВыбораЗавершение(ВыбранныйКаталог, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если (ВыбранныйКаталог <> Неопределено) Тогда
		КаталогВыгрузки = ДиалогВыбораФайла.Каталог;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Открытие" поля "Каталог выгрузки".
//
Процедура ИмяКаталогаЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НачатьЗапускПриложения(Новый ОписаниеОповещения("ИмяКаталогаЗагрузкиОткрытиеЗавершение", ЭтотОбъект), КаталогВыгрузки);
	
КонецПроцедуры // ИмяКаталогаЗагрузкиОткрытие()

&НаКлиенте
// Процедура - обработчик результата запуска приложения
//
Процедура ИмяКаталогаЗагрузкиОткрытиеЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	// Заглушка, т.к. в НачатьЗапускПриложения первый параметр обязательный.
	ЭтаПеременнаяЧтобыНеРугаласьПроверкаКонфигурацииНаПустойОбработчик = Неопределено;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Каталог загрузки".
//
Процедура КаталогЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Заголовок                   = "Выбор каталога файлов";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	ДиалогВыбораФайла.Каталог                     = КаталогЗагрузки;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("КаталогЗагрузкиНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла)));
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик результата работы диалога выбора файла
//
Процедура КаталогЗагрузкиНачалоВыбораЗавершение(ВыбранныйКаталог, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если (ВыбранныйКаталог <> Неопределено) Тогда
		КаталогЗагрузки = ДиалогВыбораФайла.Каталог;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Открытие" поля "Каталог загрузки".
//
Процедура КаталогЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НачатьЗапускПриложения(Новый ОписаниеОповещения("КаталогЗагрузкиОткрытиеЗавершение", ЭтотОбъект), КаталогЗагрузки);
	
КонецПроцедуры // КаталогЗагрузкиОткрытие()

&НаКлиенте
// Процедура - обработчик результата запуска приложения
//
Процедура КаталогЗагрузкиОткрытиеЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	// Заглушка, т.к. в НачатьЗапускПриложения первый параметр обязательный.
	ЭтаПеременнаяЧтобыНеРугаласьПроверкаКонфигурацииНаПустойОбработчик = Неопределено;
	
КонецПроцедуры

////////////////////////
// Период

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПериодСтрокой".
Процедура ПериодСтрокойПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Модифицированность);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ПериодСтрокой".
Процедура ПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Регулирование" поля "ПериодСтрокой".
Процедура ПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Направление,
														Модифицированность);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "ПериодСтрокой".
Процедура ПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "ПериодСтрокой".
Процедура ПериодСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти
