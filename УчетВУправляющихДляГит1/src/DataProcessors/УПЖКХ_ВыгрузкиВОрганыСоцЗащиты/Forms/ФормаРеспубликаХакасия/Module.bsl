
//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область Форма

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	ОбновитьПериод();
	
	Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
	ВосстановитьНастройкиНаСервере();
	
	УправлениеФормой();
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьНастройкиНаСервере();
	
КонецПроцедуры // ПриЗакрытии()

////////////////////////
// Сохраняемые настройки

&НаСервере
// Процедура восстановления настроек.
Процедура ВосстановитьНастройкиНаСервере()
	
	СтруктураПараметров = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("УПЖКХ_ВыгрузкаЗагрузкаРеспубликаХакасия", "ПараметрыВыгрузки");
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		// Префикс лицевых счетов.
		врПрефиксЛицевыхСчетов = Неопределено;
		Если СтруктураПараметров.Свойство("ПрефиксЛицевыхСчетов", врПрефиксЛицевыхСчетов) Тогда
			Объект.ПрефиксЛицевыхСчетов = врПрефиксЛицевыхСчетов;
		КонецЕсли;
		
		// Льготная категория для загруки сумм льгот из ОСЗН.
		врЛьготнаяКатегорияДляЗагрузкиИзОСЗН = Неопределено;
		Если СтруктураПараметров.Свойство("ЛьготнаяКатегорияДляЗагрузкиИзОСЗН", врЛьготнаяКатегорияДляЗагрузкиИзОСЗН) Тогда
			ЛьготнаяКатегорияДляЗагрузкиИзОСЗН = врЛьготнаяКатегорияДляЗагрузкиИзОСЗН;
		КонецЕсли;
		
		// Таблица настроек.
		врТаблицаНастроек = Неопределено;
		Если СтруктураПараметров.Свойство("РеспубликаХакасия_ТаблицаНастроек", врТаблицаНастроек) Тогда
			Если ТипЗнч(врТаблицаНастроек) = Тип("ТаблицаЗначений") Тогда
				Объект.РеспубликаХакасия_ТаблицаНастроек.Загрузить(врТаблицаНастроек);
			КонецЕсли;
		КонецЕсли;
		
		// Таблица услуг в базе.
		врТаблицаУслугВБазе = Неопределено;
		Если СтруктураПараметров.Свойство("РеспубликаХакасия_УслугиВБазе", врТаблицаУслугВБазе) Тогда
			Если ТипЗнч(врТаблицаУслугВБазе) = Тип("ТаблицаЗначений") Тогда
				Объект.РеспубликаХакасия_УслугиВБазе.Загрузить(врТаблицаУслугВБазе);
			КонецЕсли;
		КонецЕсли;
		
		// Таблица соответствия полей реестров.
		мПоляРеестровИУслугВОСЗН = Неопределено;
		Если СтруктураПараметров.Свойство("ТаблицаСоответствияПолейРеестровИУслугВОСЗН", мПоляРеестровИУслугВОСЗН) Тогда
			Если ТипЗнч(мПоляРеестровИУслугВОСЗН) = Тип("ТаблицаЗначений") Тогда
				ТаблицаСоответствияПолейРеестровИУслугВОСЗН.Загрузить(мПоляРеестровИУслугВОСЗН);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьНастройкиНаСервере()

&НаСервере
// Процедура сохранения настроек.
Процедура СохранитьНастройкиНаСервере()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПрефиксЛицевыхСчетов",                        Объект.ПрефиксЛицевыхСчетов);
	СтруктураПараметров.Вставить("ЛьготнаяКатегорияДляЗагрузкиИзОСЗН",          ЛьготнаяКатегорияДляЗагрузкиИзОСЗН);
	СтруктураПараметров.Вставить("РеспубликаХакасия_ТаблицаНастроек",           Объект.РеспубликаХакасия_ТаблицаНастроек.Выгрузить());
	СтруктураПараметров.Вставить("РеспубликаХакасия_УслугиВБазе",               Объект.РеспубликаХакасия_УслугиВБазе.Выгрузить());
	СтруктураПараметров.Вставить("ТаблицаСоответствияПолейРеестровИУслугВОСЗН", ТаблицаСоответствияПолейРеестровИУслугВОСЗН.Выгрузить());
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("УПЖКХ_ВыгрузкаЗагрузкаРеспубликаХакасия", "ПараметрыВыгрузки", СтруктураПараметров);
	
КонецПроцедуры // СохранитьНастройкиНаСервере()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриСменеСтраницы" панели формы "ГруппаПанель".
//
Процедура ГруппаПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УправлениеФормой();
	
КонецПроцедуры // ГруппаПанельПриСменеСтраницы()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПериодСтрокой".
Процедура ПериодСтрокойПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Модифицированность);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ПериодСтрокой".
Процедура ПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Регулирование" поля "ПериодСтрокой".
Процедура ПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Направление,
														Модифицированность);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "ПериодСтрокой".
Процедура ПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "ПериодСтрокой".
Процедура ПериодСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область Настройка

////////////////////////
// Команда Настройка

&НаКлиенте
// Обработчик команды "КомандаНастройка".
Процедура КомандаНастройка(Команда)
	
	АдресНастроекВХранилище = ПоместитьНастройкиВХранилище();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаНастройкаЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты.Форма.РеспубликаХакасия_ФормаНастройки", Новый Структура("АдресНастроекВХранилище", АдресНастроекВХранилище), ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры // КомандаНастройка()

&НаКлиенте
// Обработчик результата опроса команды "КомандаНастройка".
Процедура КомандаНастройкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		ПолучитьНастройкиИзХранилища(Результат);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////
// Работа с временным хранилищем

&НаСервере
// Помещает данные во временное хранилище для передачи их в форму настройки.
//
// Возвращаемое значение:
//  Строка - адрес настроек в хранилище.
//
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ИмяФайлаВыгрузки",                            Объект.ИмяФайлаВыгрузки);
	СтруктураНастроек.Вставить("ИмяФайлаЗагрузки",                            Объект.ИмяФайлаЗагрузки);
	СтруктураНастроек.Вставить("РеспубликаХакасия_ТаблицаНастроек",           Объект.РеспубликаХакасия_ТаблицаНастроек.Выгрузить());
	СтруктураНастроек.Вставить("РеспубликаХакасия_УслугиВБазе",               Объект.РеспубликаХакасия_УслугиВБазе.Выгрузить());
	СтруктураНастроек.Вставить("ТаблицаСоответствияПолейРеестровИУслугВОСЗН", ТаблицаСоответствияПолейРеестровИУслугВОСЗН.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции // ПоместитьДанныеВХранилище()

&НаСервере
// Помещает таблицу услуг во временное хранилище.
Функция ПолучитьНастройкиИзХранилища(АдресУслугВХранилище)
	
	СтруктураНастроек = ПолучитьИзВременногоХранилища(АдресУслугВХранилище);
	
	// Таблица настроек.
	врТаблицаНастроек = Неопределено;
	Если СтруктураНастроек.Свойство("РеспубликаХакасия_ТаблицаНастроек", врТаблицаНастроек) Тогда
		Если ТипЗнч(врТаблицаНастроек) = Тип("ТаблицаЗначений") Тогда
			Объект.РеспубликаХакасия_ТаблицаНастроек.Загрузить(врТаблицаНастроек);
		КонецЕсли;
	КонецЕсли;
	
	// Таблица услуг в базе.
	врТаблицаУслугВБазе = Неопределено;
	Если СтруктураНастроек.Свойство("РеспубликаХакасия_УслугиВБазе", врТаблицаУслугВБазе) Тогда
		Если ТипЗнч(врТаблицаУслугВБазе) = Тип("ТаблицаЗначений") Тогда
			Объект.РеспубликаХакасия_УслугиВБазе.Загрузить(врТаблицаУслугВБазе);
		КонецЕсли;
	КонецЕсли;
	
	// Таблица соответствия полей реестров.
	мПоляРеестровИУслугВОСЗН = Неопределено;
	Если СтруктураНастроек.Свойство("ТаблицаСоответствияПолейРеестровИУслугВОСЗН", мПоляРеестровИУслугВОСЗН) Тогда
		Если ТипЗнч(мПоляРеестровИУслугВОСЗН) = Тип("ТаблицаЗначений") Тогда
			ТаблицаСоответствияПолейРеестровИУслугВОСЗН.Загрузить(мПоляРеестровИУслугВОСЗН);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // ПолучитьНастройкиИзХранилища()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ВЫГРУЗКИ ФОРМЫ

#Область Загрузка

&НаКлиенте
// Процедура - обработчик собатия "ПриИзменении" табличного поля "птРеспубликаХакасия_ТаблицаДляВыгрузки".
//
Процедура птРеспубликаХакасия_ТаблицаДляВыгрузкиПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры // птРеспубликаХакасия_ТаблицаДляВыгрузкиПриИзменении()

////////////////////////
// Выбор файла выгрузки

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ИмяФайлаВыгрузки".
Процедура ИмяФайлаВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла                    = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок          = "Выберите файл, в который будут выгружены данные из базы";
	ДиалогВыбораФайла.Каталог            = Объект.ИмяФайлаВыгрузки;
	ДиалогВыбораФайла.ПолноеИмяФайла     = "";
	ДиалогВыбораФайла.Фильтр             = "XBase, dBase III (*.dbf)|*.dbf"; 
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ИмяФайлаВыгрузкиНачалоВыбораВыбрать", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
// Обработчик заверешения обработчика события "НачалоВыбора" поля "ИмяФайлаВыгрузки".
Процедура ИмяФайлаВыгрузкиНачалоВыбораВыбрать(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		ПроверитьУказанныйDBFФайл(ВыбранныеФайлы[0], "Выгрузки");
	КонецЕсли;
	
КонецПроцедуры // ИмяФайлаВыгрузкиНачалоВыбора()

&НаКлиенте
// Обработчик события "Открытие" поля "ИмяФайлаВыгрузки".
Процедура ИмяФайлаВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Файл = Новый Файл(Объект.ИмяФайлаВыгрузки);
	
	Файл.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ИмяФайлаВыгрузкиОткрытиеКаталогСуществует", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения проверки существования каталога.
Процедура ИмяФайлаВыгрузкиОткрытиеКаталогСуществует(Существует, ДополнительныеПараметры) Экспорт
	
	Если Существует Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ИмяФайлаВыгрузкиОткрытиеЗапускПриложения", ЭтотОбъект);
		
		НачатьЗапускПриложения(ОписаниеОповещения, Объект.ИмяФайлаВыгрузки);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Обработчик заверешения запуска приложения.
Процедура ИмяФайлаВыгрузкиОткрытиеЗапускПриложения(КодВозврата, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры // ИмяФайлаВыгрузкиОткрытие()

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "ИмяФайлаВыгрузки".
Процедура ИмяФайлаВыгрузкиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	// Проверяем ручной ввод текста.
	СтандартнаяОбработка = Ложь;
	ПроверитьУказанныйDBFФайл(Текст, "Выгрузки");
	
КонецПроцедуры // ИмяФайлаВыгрузкиОкончаниеВводаТекста()

////////////////////////
// Загрузить из файла

&НаКлиенте
// Обработчик команды "КомандаЗагрузитьИзФайлаВыгрузки".
//
Процедура КомандаЗагрузитьИзФайлаВыгрузки(Команда)
	
	// Производим загрузку данных из dbf-файла выгрузки.
	ЗагрузитьИзФайла("Выгрузки");
	
КонецПроцедуры // КомандаЗагрузитьИзФайлаВыгрузки()

////////////////////////
// Прочие процедуры и функции

&НаСервере
// Переопределяет колонки и поля таблицы "птРеспубликаХакасия_ТаблицаДляВыгрузки".
//
// Параметры:
//  КоличествоУслугТаблицыВыгрузки - Число - количество услуг из dbf-файла.
//
Процедура ДобавитьРеквизитыВТаблицуВыгрузкиНаСервере()
	
	Если АдресДобавляемыеРеквизитыТаблицыВыгрузки <> "" Тогда
		
		ДобавляемыеРеквизитыТаблицыВыгрузки = ПолучитьИзВременногоХранилища(АдресДобавляемыеРеквизитыТаблицыВыгрузки);
		
		УдаляемыеРеквизиты = Новый Массив;
		
		// Удаляем ранее добавленные элементы формы.
		Для Каждого РеквизитУдаления Из ДобавляемыеРеквизитыТаблицыВыгрузки Цикл
			УдаляемыеРеквизиты.Добавить("птРеспубликаХакасия_ТаблицаДляВыгрузки." + РеквизитУдаления.Имя);
			Элементы.Удалить(Элементы["ТаблицаДляВыгрузки_" + РеквизитУдаления.Имя]);
		КонецЦикла;
		
		// Удаляем ранее добавленные реквизиты.
		ИзменитьРеквизиты(, УдаляемыеРеквизиты);
		
		ДобавляемыеРеквизитыТаблицыВыгрузки.Очистить();
		
	Иначе
		ДобавляемыеРеквизитыТаблицыВыгрузки = Новый Массив;
	КонецЕсли;
	
	// Создаем динамическую часть колонок в таблице выгрузки (зависит от числа услуг).
	Для Сч = 1 По КоличествоУслугТаблицыВыгрузки Цикл
		ДобавляемыеРеквизитыТаблицыВыгрузки.Добавить(Новый РеквизитФормы("GKYSL_"   + Сч, УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(50),           "птРеспубликаХакасия_ТаблицаДляВыгрузки", "ЖКУ верхнего уровня", Ложь));
		ДобавляемыеРеквизитыТаблицыВыгрузки.Добавить(Новый РеквизитФормы("NGKYSL_"  + Сч, УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(50),           "птРеспубликаХакасия_ТаблицаДляВыгрузки", "ЖКУ нижнего уровня", Ложь));
		ДобавляемыеРеквизитыТаблицыВыгрузки.Добавить(Новый РеквизитФормы("LCHET_"   + Сч, УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(24),           "птРеспубликаХакасия_ТаблицаДляВыгрузки", "Лицевой счет ЖКУ", Ложь));
		ДобавляемыеРеквизитыТаблицыВыгрузки.Добавить(Новый РеквизитФормы("TARIF_"   + Сч, УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 5),         "птРеспубликаХакасия_ТаблицаДляВыгрузки", "Тариф на ЖКУ", Ложь));
		ДобавляемыеРеквизитыТаблицыВыгрузки.Добавить(Новый РеквизитФормы("CHET_"    + Сч, УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(1, 0),          "птРеспубликаХакасия_ТаблицаДляВыгрузки", "Наличие счетчика", Ложь));
		ДобавляемыеРеквизитыТаблицыВыгрузки.Добавить(Новый РеквизитФормы("FAKT_"    + Сч, УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(11, 3),         "птРеспубликаХакасия_ТаблицаДляВыгрузки", "Фактическое потребление", Ложь));
		ДобавляемыеРеквизитыТаблицыВыгрузки.Добавить(Новый РеквизитФормы("SUMTAR_"  + Сч, УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(10, 2),         "птРеспубликаХакасия_ТаблицаДляВыгрузки", "Сумма по тарифам", Ложь));
		ДобавляемыеРеквизитыТаблицыВыгрузки.Добавить(Новый РеквизитФормы("KOEF_"    + Сч, УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(13, 5),         "птРеспубликаХакасия_ТаблицаДляВыгрузки", "Коэффициент потребления", Ложь));
		ДобавляемыеРеквизитыТаблицыВыгрузки.Добавить(Новый РеквизитФормы("VIDTAR_"  + Сч, УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(1, 0),          "птРеспубликаХакасия_ТаблицаДляВыгрузки", "Вид тарифа", Ложь));
		ДобавляемыеРеквизитыТаблицыВыгрузки.Добавить(Новый РеквизитФормы("SUMDOLG_" + Сч, УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(10, 2),         "птРеспубликаХакасия_ТаблицаДляВыгрузки", "Сумма задолженности по ЖКУ", Ложь));
		ДобавляемыеРеквизитыТаблицыВыгрузки.Добавить(Новый РеквизитФормы("DATDOLG_" + Сч, УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата), "птРеспубликаХакасия_ТаблицаДляВыгрузки", "Дата погашения задолженности", Ложь));
		ДобавляемыеРеквизитыТаблицыВыгрузки.Добавить(Новый РеквизитФормы("KOLDOLG_" + Сч, УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(1, 0),          "птРеспубликаХакасия_ТаблицаДляВыгрузки", "Наличие задолженности", Ложь));
		ДобавляемыеРеквизитыТаблицыВыгрузки.Добавить(Новый РеквизитФормы("PRIZN_"   + Сч, УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(1, 0),          "птРеспубликаХакасия_ТаблицаДляВыгрузки", "Признак корректировки", Ложь));
		ДобавляемыеРеквизитыТаблицыВыгрузки.Добавить(Новый РеквизитФормы("DATP2_"   + Сч, УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата), "птРеспубликаХакасия_ТаблицаДляВыгрузки", "Период предоставления ЖКУ ПО", Ложь));
		ДобавляемыеРеквизитыТаблицыВыгрузки.Добавить(Новый РеквизитФормы("SUMPER_"  + Сч, УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(10, 2),         "птРеспубликаХакасия_ТаблицаДляВыгрузки", "Сумма перерасчета по ЖКУ", Ложь));
		ДобавляемыеРеквизитыТаблицыВыгрузки.Добавить(Новый РеквизитФормы("DATPER1_" + Сч, УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата), "птРеспубликаХакасия_ТаблицаДляВыгрузки", "Период перерасчета по ЖКУ С", Ложь));
		ДобавляемыеРеквизитыТаблицыВыгрузки.Добавить(Новый РеквизитФормы("DATPER2_" + Сч, УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата), "птРеспубликаХакасия_ТаблицаДляВыгрузки", "Период перерасчета по ЖКУ ПО", Ложь));
	КонецЦикла;
	
	// Добавляем новые реквизиты.
	ИзменитьРеквизиты(ДобавляемыеРеквизитыТаблицыВыгрузки);
	
	// Создаем новые элементы формы.
	Для Каждого Колонка Из ДобавляемыеРеквизитыТаблицыВыгрузки Цикл 
		Элемент             = Элементы.Добавить("ТаблицаДляВыгрузки_" + Колонка.Имя, Тип("ПолеФормы"), Элементы.птРеспубликаХакасия_ТаблицаДляВыгрузки); 
		Элемент.Вид         = ВидПоляФормы.ПолеВвода;
		Элемент.Формат      = "ЧН=0";
		Элемент.ПутьКДанным = "птРеспубликаХакасия_ТаблицаДляВыгрузки." + Колонка.Имя;
	КонецЦикла;
	
	// Сохраням массив добавляемых реквизитов.
	АдресДобавляемыеРеквизитыТаблицыВыгрузки = ПоместитьВоВременноеХранилище(ДобавляемыеРеквизитыТаблицыВыгрузки, Новый УникальныйИдентификатор);
	
КонецПроцедуры // ДобавитьРеквизитыВТаблицуВыгрузки()

#КонецОбласти

#Область Заполнение

////////////////////////
// Команда ЗаполнитьТаблицуВыгрузки

&НаКлиенте
// Обработчик команды "КомандаЗаполнитьТаблицуВыгрузки".
Процедура КомандаЗаполнитьТаблицуВыгрузки(Команда)
	
	КомандаЗаполнитьТаблицуВыгрузкиНаСервере();
	
КонецПроцедуры

&НаСервере
// Обработчик команды "КомандаЗаполнитьТаблицуВыгрузки" на сервере.
Процедура КомандаЗаполнитьТаблицуВыгрузкиНаСервере()
	
	ТаблицаДляВыгрузки = РеквизитФормыВЗначение("птРеспубликаХакасия_ТаблицаДляВыгрузки", Тип("ТаблицаЗначений"));
	
	ТаблицаДанных = ПолучитьТаблицуДанныхВыгрузки(ТаблицаДляВыгрузки);
	
	ТаблицаНачисленийИОплат = ПолучитьТаблицуНачисленийИОплат(ТаблицаДанных);
	
	// 1. Проверяем, есть ли строки в таблице "ТаблицаНачисленийИОплат". Если нет, то прерываем.
	Если ТаблицаНачисленийИОплат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// 2. Если есть, то продолжаем заполнение следующим образом:
	// 2.1. Перебираем все записи в таблице "ТаблицаДляВыгрузки".
	// 2.2. Делаем отбор по лицевому счету из таблицы "ТаблицаНачисленийИОплат".
	// 2.3. Значения в найденных строках заполняем в текущей строке "ТаблицаДляВыгрузки".
	
	// По строкам с неопределенным лицевым счетом данные не выгружаются.
	Для Каждого ЗаполняемаяСтрока Из ТаблицаДляВыгрузки Цикл
		
		СтрокиДляЗаполнения = ТаблицаНачисленийИОплат.НайтиСтроки(Новый Структура("ЛицевойСчет", ЗаполняемаяСтрока.ЛицевойСчет));
		
			ПервыйПроход = Истина;
			Для Каждого Строка Из СтрокиДляЗаполнения Цикл
				
				// При первом проходе заполняем повторяющиеся поля.
				Если ПервыйПроход Тогда
					ЗаполняемаяСтрока["KOMN"]   = Строка.KOMN;
					ЗаполняемаяСтрока["ROPL"]   = Строка.ROPL;
					ЗаполняемаяСтрока["PRIVAT"] = Строка.PRIVAT;
					ЗаполняемаяСтрока["KOLZR"]  = Строка.KOLZR;
					ПервыйПроход = Ложь;
				КонецЕсли;
				
				// Перебором номеров услуг ищем номер текущей NGKUSL.
				Для НомерУслуги = 1 По КоличествоУслугТаблицыВыгрузки Цикл
					
					Если ЗаполняемаяСтрока["NGKYSL_" + НомерУслуги] = Строка.NGKYSL Тогда
						
						ЗаполняемаяСтрока["TARIF_"   + НомерУслуги] = Строка.TARIF;
						ЗаполняемаяСтрока["CHET_"    + НомерУслуги] = Строка.CHET;
						ЗаполняемаяСтрока["FAKT_"    + НомерУслуги] = Строка.FAKT;
						ЗаполняемаяСтрока["SUMTAR_"  + НомерУслуги] = Строка.SUMTAR;
						ЗаполняемаяСтрока["KOEF_"    + НомерУслуги] = Строка.KOEF;
						ЗаполняемаяСтрока["PRIZN_"   + НомерУслуги] = Строка.PRIZN;
						ЗаполняемаяСтрока["SUMDOLG_" + НомерУслуги] = Строка.SUMDOLG;
						ЗаполняемаяСтрока["KOLDOLG_" + НомерУслуги] = Строка.KOLDOLG;
						ЗаполняемаяСтрока["DATP2_"   + НомерУслуги] = Строка.DATP2;
						ЗаполняемаяСтрока["SUMPER_"  + НомерУслуги] = Строка.SUMPER;
						ЗаполняемаяСтрока["DATPER1_" + НомерУслуги] = Строка.DATPER1;
						ЗаполняемаяСтрока["DATPER2_" + НомерУслуги] = Строка.DATPER2;
						
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТаблицаДляВыгрузки, "птРеспубликаХакасия_ТаблицаДляВыгрузки");
	
КонецПроцедуры // КомандаЗаполнитьТаблицуВыгрузкиНаСервере()

////////////////////////
// Прочие процедуры и функции

&НаСервере
// Формирует таблицу ЛС и услуг в ОСЗН.
//
// Параметры:
//  ТаблицаДляВыгрузки - ТаблицаЗначений - таблица выгрузки, полученная из DBF.
//
// Возвращаемое значение:
//  ТаблицаДанных      - ТаблицаЗначений - таблица ЛС и услуг в ОСЗН.
//
Функция ПолучитьТаблицуДанныхВыгрузки(ТаблицаДляВыгрузки)
	
	// Создаем таблицу данных, состоящую из связок "ЛицевойСчет - GKYSL".
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	ТаблицаДанных.Колонки.Добавить("ЛицевойСчет", Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
	ТаблицаДанных.Колонки.Добавить("NGKYSL",      УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(50));
	
	Для НомерУслуги = 1 По КоличествоУслугТаблицыВыгрузки Цикл
		
		Для Каждого Строка Из ТаблицаДляВыгрузки Цикл
			
			// Для строк без ЛС запись не производим.
			Если Не Строка.ЛицевойСчет.Пустая() И Строка["LCHET_" + НомерУслуги] <> "" Тогда
				НоваяСтрока             = ТаблицаДанных.Добавить();
				НоваяСтрока.ЛицевойСчет = Строка.ЛицевойСчет;
				НоваяСтрока.NGKYSL       = Строка["NGKYSL_" + НомерУслуги];
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции // ПолучитьТаблицуДанныхВыгрузки()

&НаСервере
// Формирует таблицу данных из БД о начислениях и оплатах за указанный период по услугам в ОСЗН.
//
// Параметры:
//  ТаблицаДанных - ТаблицаЗначений - таблица ЛС и услуг в ОСЗН.
//
// Возвращаемое значение:
//  ТаблицаНачисленийИОплат - ТаблицаЗначений - таблица ночислений и оплат.
//
Функция ПолучитьТаблицуНачисленийИОплат(ТаблицаДанных)
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДанных.ЛицевойСчет,
	|	ТаблицаДанных.NGKYSL
	|ПОМЕСТИТЬ втДанных
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУслуг.УслугаВБазе КАК Услуга,
	|	ТаблицаУслуг.УслугаВОСЗН КАК NGKYSL
	|ПОМЕСТИТЬ втУслуги
	|ИЗ
	|	&ТаблицаУслуг КАК ТаблицаУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанных.ЛицевойСчет,
	|	втУслуги.NGKYSL,
	|	втУслуги.Услуга
	|ПОМЕСТИТЬ втЛьготникиСУслугами
	|ИЗ
	|	втДанных КАК втДанных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втУслуги КАК втУслуги
	|		ПО втДанных.NGKYSL = втУслуги.NGKYSL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец) КАК КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втЗарегистрированные
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втЛьготникиСУслугами.ЛицевойСчет
	|				ИЗ
	|					втЛьготникиСУслугами КАК втЛьготникиСУслугами)) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект КАК Помещение,
	|	ЕСТЬNULL(КВП_ЛицевыеСчетаСрезПоследних.Объект.КоличествоКомнат, 1) КАК KOMN
	|ПОМЕСТИТЬ втЛицевыеСчетаПодготовка
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втЛьготникиСУслугами.ЛицевойСчет
	|				ИЗ
	|					втЛьготникиСУслугами КАК втЛьготникиСУслугами)) КАК КВП_ЛицевыеСчетаСрезПоследних
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.ЛицевойСчет,
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втУчетКоличестваЖильцов
	|ИЗ
	|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втЛицевыеСчетаПодготовка.ЛицевойСчет
	|				ИЗ
	|					втЛицевыеСчетаПодготовка КАК втЛицевыеСчетаПодготовка)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втЛицевыеСчетаПодготовка.ЛицевойСчет,
	|	втЛицевыеСчетаПодготовка.Помещение,
	|	втЛицевыеСчетаПодготовка.KOMN,
	|	ВЫБОР
	|		КОГДА УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Значение
	|			ТОГДА ЕСТЬNULL(втУчетКоличестваЖильцов.КоличествоЗарегистрированных, 0)
	|		ИНАЧЕ ЕСТЬNULL(втЗарегистрированные.КоличествоЗарегистрированных, 0)
	|	КОНЕЦ КАК KOLZR
	|ПОМЕСТИТЬ втЛицевыеСчета
	|ИЗ
	|	втЛицевыеСчетаПодготовка КАК втЛицевыеСчетаПодготовка
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЗарегистрированные КАК втЗарегистрированные
	|		ПО втЛицевыеСчетаПодготовка.ЛицевойСчет = втЗарегистрированные.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУчетКоличестваЖильцов КАК втУчетКоличестваЖильцов
	|		ПО втЛицевыеСчетаПодготовка.ЛицевойСчет = втУчетКоличестваЖильцов.ЛицевойСчет,
	|	Константа.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами КАК УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет,
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель, 0) = 0
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель, 0) = 0
	|						ТОГДА КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель / КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ * ЕСТЬNULL(КВП_ПлощадьПомещенияСрезПоследних.Площадь, 0) КАК ROPL
	|ПОМЕСТИТЬ втПомещения
	|ИЗ
	|	РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втЛьготникиСУслугами.ЛицевойСчет
	|				ИЗ
	|					втЛьготникиСУслугами КАК втЛьготникиСУслугами)) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|				&ДатаКон,
	|				Объект В
	|						(ВЫБРАТЬ
	|							втЛицевыеСчета.Помещение
	|						ИЗ
	|							втЛицевыеСчета КАК втЛицевыеСчета)
	|					И ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)) КАК КВП_ПлощадьПомещенияСрезПоследних
	|		ПО КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет.Адрес = КВП_ПлощадьПомещенияСрезПоследних.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение,
	|	ВЫБОР
	|		КОГДА УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Частная)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК PRIVAT
	|ПОМЕСТИТЬ втСобственностьНаПомещения
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственностьНаПомещения.СрезПоследних(
	|			&ДатаКон,
	|			Помещение В
	|				(ВЫБРАТЬ
	|					втЛицевыеСчета.Помещение
	|				ИЗ
	|					втЛицевыеСчета КАК втЛицевыеСчета)) КАК УПЖКХ_СобственностьНаПомещенияСрезПоследних
	|ГДЕ
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛицевыеСчета.ЛицевойСчет,
	|	втЛицевыеСчета.Помещение,
	|	втЛицевыеСчета.KOMN,
	|	втЛицевыеСчета.KOLZR,
	|	ЕСТЬNULL(втСобственностьНаПомещения.PRIVAT, 0) КАК PRIVAT
	|ПОМЕСТИТЬ втЛицевыеСчетСобственностьНаПомещения
	|ИЗ
	|	втЛицевыеСчета КАК втЛицевыеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСобственностьНаПомещения КАК втСобственностьНаПомещения
	|		ПО втЛицевыеСчета.Помещение = втСобственностьНаПомещения.Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛицевыеСчетСобственностьНаПомещения.ЛицевойСчет,
	|	втЛицевыеСчетСобственностьНаПомещения.Помещение,
	|	втЛицевыеСчетСобственностьНаПомещения.KOMN,
	|	втПомещения.ROPL,
	|	втЛицевыеСчетСобственностьНаПомещения.PRIVAT,
	|	втЛицевыеСчетСобственностьНаПомещения.KOLZR
	|ПОМЕСТИТЬ втПерваяЧасть
	|ИЗ
	|	втЛицевыеСчетСобственностьНаПомещения КАК втЛицевыеСчетСобственностьНаПомещения
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПомещения КАК втПомещения
	|		ПО втЛицевыеСчетСобственностьНаПомещения.ЛицевойСчет = втПомещения.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга,
	|	0 КАК SUMDOLG,
	|	ВЫБОР
	|		КОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток > 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК KOLDOLG
	|ПОМЕСТИТЬ втЗадолженности
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&ДСО,
	|			Организация = &Организация
	|				И (ЛицевойСчет, Услуга) В
	|					(ВЫБРАТЬ
	|						втЛьготникиСУслугами.ЛицевойСчет,
	|						втЛьготникиСУслугами.Услуга
	|					ИЗ
	|						втЛьготникиСУслугами КАК втЛьготникиСУслугами)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|ГДЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.МесяцНачисления < ДОБАВИТЬКДАТЕ(&ДСО, МЕСЯЦ, -3)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток,
	|	0
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&ДатаНач,
	|			Организация = &Организация
	|				И (ЛицевойСчет, Услуга) В
	|					(ВЫБРАТЬ
	|						втЛьготникиСУслугами.ЛицевойСчет,
	|						втЛьготникиСУслугами.Услуга
	|					ИЗ
	|						втЛьготникиСУслугами КАК втЛьготникиСУслугами)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот,
	|	0
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Месяц,
	|			ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|				И Организация = &Организация
	|				И (ЛицевойСчет, Услуга) В
	|					(ВЫБРАТЬ
	|						втЛьготникиСУслугами.ЛицевойСчет,
	|						втЛьготникиСУслугами.Услуга
	|					ИЗ
	|						втЛьготникиСУслугами КАК втЛьготникиСУслугами)) КАК УПЖКХ_НачисленияОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗадолженности.ЛицевойСчет,
	|	втЗадолженности.Услуга,
	|	СУММА(втЗадолженности.SUMDOLG) КАК SUMDOLG,
	|	МАКСИМУМ(втЗадолженности.KOLDOLG) КАК KOLDOLG
	|ПОМЕСТИТЬ втЗадолженностиСруппированные
	|ИЗ
	|	втЗадолженности КАК втЗадолженности
	|
	|СГРУППИРОВАТЬ ПО
	|	втЗадолженности.ЛицевойСчет,
	|	втЗадолженности.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗадолженностиСруппированные.ЛицевойСчет,
	|	втЗадолженностиСруппированные.Услуга,
	|	втЗадолженностиСруппированные.SUMDOLG,
	|	втЗадолженностиСруппированные.KOLDOLG
	|ПОМЕСТИТЬ втДСО
	|ИЗ
	|	втЗадолженностиСруппированные КАК втЗадолженностиСруппированные
	|ГДЕ
	// Выбираем только те записи, в которых если сумма задолженности 3 и более месяца.
	|	втЗадолженностиСруппированные.SUMDOLG * втЗадолженностиСруппированные.KOLDOLG > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.Тариф КАК TARIF,
	|	1 КАК KOEF,
	|	УПЖКХ_НачисленияОбороты.Количество КАК FAKT,
	|	ВЫБОР
	|		КОГДА НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|			ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК SUMTAR,
	|	ВЫБОР
	|		КОГДА НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК PRIZN,
	|	КОНЕЦПЕРИОДА(УПЖКХ_НачисленияОбороты.МесяцНачисления, МЕСЯЦ) КАК DATP2,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|			ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК SUMPER,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|			ТОГДА НАЧАЛОПЕРИОДА(УПЖКХ_НачисленияОбороты.МесяцНачисления, МЕСЯЦ)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК DATPER1,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|			ТОГДА КОНЕЦПЕРИОДА(УПЖКХ_НачисленияОбороты.МесяцНачисления, МЕСЯЦ)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК DATPER2
	|ПОМЕСТИТЬ втНачисления
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Месяц,
	|			НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|				И НЕ РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы))
	|				И Организация = &Организация
	|				И (ЛицевойСчет, Услуга) В
	|					(ВЫБРАТЬ
	|						втЛьготникиСУслугами.ЛицевойСчет,
	|						втЛьготникиСУслугами.Услуга
	|					ИЗ
	|						втЛьготникиСУслугами КАК втЛьготникиСУслугами)) КАК УПЖКХ_НачисленияОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачисления.ЛицевойСчет,
	|	втНачисления.Услуга,
	|	втЛьготникиСУслугами.NGKYSL,
	|	МАКСИМУМ(втНачисления.TARIF) КАК TARIF,
	|	МАКСИМУМ(втНачисления.KOEF) КАК KOEF,
	|	СУММА(втНачисления.FAKT) КАК FAKT,
	|	СУММА(втНачисления.SUMTAR) КАК SUMTAR,
	|	СУММА(ЕСТЬNULL(втДСО.SUMDOLG, 0)) КАК SUMDOLG,
	|	МАКСИМУМ(ЕСТЬNULL(втДСО.KOLDOLG, 0)) КАК KOLDOLG,
	|	МАКСИМУМ(втНачисления.PRIZN) КАК PRIZN,
	|	втНачисления.DATP2,
	|	СУММА(втНачисления.SUMPER) КАК SUMPER,
	|	МАКСИМУМ(втНачисления.DATPER1) КАК DATPER1,
	|	МАКСИМУМ(втНачисления.DATPER2) КАК DATPER2
	|ПОМЕСТИТЬ втНачисленияУслугиДСО
	|ИЗ
	|	втНачисления КАК втНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЛьготникиСУслугами КАК втЛьготникиСУслугами
	|		ПО втНачисления.ЛицевойСчет = втЛьготникиСУслугами.ЛицевойСчет
	|			И втНачисления.Услуга = втЛьготникиСУслугами.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДСО КАК втДСО
	|		ПО втНачисления.ЛицевойСчет = втДСО.ЛицевойСчет
	|			И втНачисления.Услуга = втДСО.Услуга
	|
	|СГРУППИРОВАТЬ ПО
	|	втНачисления.ЛицевойСчет,
	|	втНачисления.Услуга,
	|	втЛьготникиСУслугами.NGKYSL,
	|	втНачисления.DATP2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект КАК ЛицевойСчет,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги КАК Услуга,
	|	МАКСИМУМ(1) КАК НаличиеСчетчика
	|ПОМЕСТИТЬ втСчетчики
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&ДатаКон,
	|			(Объект В
	|					(ВЫБРАТЬ
	|						втЛьготникиСУслугами.ЛицевойСчет
	|					ИЗ
	|						втЛьготникиСУслугами КАК втЛьготникиСУслугами)
	|				ИЛИ Объект В
	|					(ВЫБРАТЬ
	|						втЛицевыеСчета.Помещение
	|					ИЗ
	|						втЛицевыеСчета КАК втЛицевыеСчета))
	|				И Счетчик.ВидУслуги В
	|					(ВЫБРАТЬ
	|						втЛьготникиСУслугами.Услуга
	|					ИЗ
	|						втЛьготникиСУслугами КАК втЛьготникиСУслугами)
	|				И ДатаИзменения <= &ДатаКон) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачисленияУслугиДСО.ЛицевойСчет,
	|	втНачисленияУслугиДСО.NGKYSL,
	|	втНачисленияУслугиДСО.TARIF,
	|	ЕСТЬNULL(втСчетчики.НаличиеСчетчика, 0) КАК CHET,
	|	втНачисленияУслугиДСО.KOEF,
	|	втНачисленияУслугиДСО.FAKT,
	|	втНачисленияУслугиДСО.SUMTAR,
	|	втНачисленияУслугиДСО.SUMDOLG,
	|	втНачисленияУслугиДСО.KOLDOLG,
	|	втНачисленияУслугиДСО.PRIZN,
	|	втНачисленияУслугиДСО.DATP2,
	|	втНачисленияУслугиДСО.SUMPER,
	|	втНачисленияУслугиДСО.DATPER1,
	|	втНачисленияУслугиДСО.DATPER2
	|ПОМЕСТИТЬ втВтораяЧасть
	|ИЗ
	|	втНачисленияУслугиДСО КАК втНачисленияУслугиДСО
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСчетчики КАК втСчетчики
	|		ПО втНачисленияУслугиДСО.ЛицевойСчет = втСчетчики.ЛицевойСчет
	|			И втНачисленияУслугиДСО.Услуга = втСчетчики.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПерваяЧасть.ЛицевойСчет,
	|	втПерваяЧасть.KOMN,
	|	втПерваяЧасть.ROPL,
	|	втПерваяЧасть.PRIVAT,
	|	втПерваяЧасть.KOLZR,
	|	втВтораяЧасть.NGKYSL,
	|	втВтораяЧасть.TARIF,
	|	втВтораяЧасть.CHET,
	|	втВтораяЧасть.KOEF,
	|	втВтораяЧасть.FAKT,
	|	втВтораяЧасть.SUMTAR,
	|	втВтораяЧасть.SUMDOLG,
	|	втВтораяЧасть.KOLDOLG,
	|	втВтораяЧасть.PRIZN,
	|	втВтораяЧасть.DATP2,
	|	втВтораяЧасть.SUMPER,
	|	втВтораяЧасть.DATPER1,
	|	втВтораяЧасть.DATPER2
	|ИЗ
	|	втПерваяЧасть КАК втПерваяЧасть
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВтораяЧасть КАК втВтораяЧасть
	|		ПО втПерваяЧасть.ЛицевойСчет = втВтораяЧасть.ЛицевойСчет";
	
	Запрос.УстановитьПараметр("ДатаНач",       НачалоМесяца(Объект.Период));
	Запрос.УстановитьПараметр("ДатаКон",       КонецМесяца(Объект.Период));
	Запрос.УстановитьПараметр("Организация",   Объект.Организация);
	Запрос.УстановитьПараметр("ТаблицаУслуг",  Объект.РеспубликаХакасия_УслугиВБазе.Выгрузить(, "УслугаВОСЗН, УслугаВБазе"));
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
	
	НетАктуальнойУПЖКХ = Ложь;
	Структура = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(КонецМесяца(Объект.Период), Объект.Организация, НетАктуальнойУПЖКХ);
	Запрос.УстановитьПараметр("ДСО", ?(НетАктуальнойУПЖКХ, НачалоМесяца(Объект.Период), НачалоМесяца(Объект.Период) + 60 * 60 * 24 * Структура.ЧислоВнесенияПлатежа));
	
	ТаблицаНачисленийИОплат = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаНачисленийИОплат;
	
КонецФункции // ПолучитьТаблицуНачисленийИОплат()

#КонецОбласти

#Область Выгрузка

////////////////////////
// Команда Выгрузить

&НаКлиенте
Процедура КомандаВыгрузить(Команда)
	
	#Если Не ВебКлиент Тогда
		
		DBFФайлВыгрузки = Новый XBase;
		DBFФайлВыгрузки.Кодировка = КодировкаXBase.OEM;
		
		КолонкиDBF = ПолучитьКолонкиDBF();
		
		Для Каждого Колонка Из КолонкиDBF Цикл
			
			Если Колонка.Тип = "S" Тогда
				
				DBFФайлВыгрузки.Поля.Добавить(Колонка.Имя, Колонка.Тип, Колонка.Длина);
				
			ИначеЕсли Колонка.Тип = "N" Тогда
				
				DBFФайлВыгрузки.Поля.Добавить(Колонка.Имя, Колонка.Тип, Колонка.РазрядностьЦелойЧасти, Колонка.РазрядностьДробнойЧасти);
				
			ИначеЕсли Колонка.Тип = "D" Тогда
				
				DBFФайлВыгрузки.Поля.Добавить(Колонка.Имя, Колонка.Тип, Колонка.ЧастиДаты);
				
			КонецЕсли;
			
		КонецЦикла;
		
		КороткоеИмяВременногоФайла = ПолучитьИмяВременногоDBFФайла("Выгрузка");
		
		DBFФайлВыгрузки.СоздатьФайл(КороткоеИмяВременногоФайла);
		DBFФайлВыгрузки.АвтоСохранение = Истина;
		
		// Запись данных из табличной части в файл выгрузки.
		Для Каждого Строка Из птРеспубликаХакасия_ТаблицаДляВыгрузки Цикл
			
			DBFФайлВыгрузки.Добавить();
			
			ЗаполнитьЗначенияСвойств(DBFФайлВыгрузки, Строка);
			
			DBFФайлВыгрузки.Записать();
			
		КонецЦикла;
		
		DBFФайлВыгрузки.ЗакрытьФайл();
		
		// Сохраняем резервную копию исходного файла выгрузки.
		Файл = Новый Файл(Объект.ИмяФайлаВыгрузки);
		ИмяБэкапФайла = СтрЗаменить(Файл.ПолноеИмя, Файл.ИмяБезРасширения, Файл.ИмяБезРасширения + "_Исходный");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("КомандаВыгрузитьКопироватьФайл", ЭтотОбъект,
													  Новый Структура("КороткоеИмяВременногоФайла", КороткоеИмяВременногоФайла));
		
		НачатьКопированиеФайла(ОписаниеОповещения, Объект.ИмяФайлаВыгрузки, ИмяБэкапФайла);
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения копирования файла.
Процедура КомандаВыгрузитьКопироватьФайл(СкопированныйФайл, ДополнительныеПараметры) Экспорт
	
	КороткоеИмяВременногоФайла = ДополнительныеПараметры.КороткоеИмяВременногоФайла;
	
	НачатьКопированиеФайла(Новый ОписаниеОповещения("КомандаВыгрузитьКопироватьФайлКопироватьФайл", ЭтотОбъект),
						   КороткоеИмяВременногоФайла, Объект.ИмяФайлаВыгрузки);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения копирования файла.
Процедура КомандаВыгрузитьКопироватьФайлКопироватьФайл(СкопированныйФайл1, ДополнительныеПараметры1) Экспорт
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Выгрузка в файл """ + Объект.ИмяФайлаВыгрузки + """ завершена!");
	
	НачатьЗапускПриложения(Новый ОписаниеОповещения("КомандаВыгрузитьЗапуститьПриложение", ЭтотОбъект),
													"explorer /select," + Объект.ИмяФайлаВыгрузки);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения запуска приложения.
Процедура КомандаВыгрузитьЗапуститьПриложение(КодВозврата, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

////////////////////////
// Прочие процедуры и функции

&НаСервере
// Формирует массив структур, состоящих из параметров для записи полей выгружаемого DBF-файла.
//
// Возвращаемое значение:
//  МассивСтруктурКолонок - Массив - массив структур. 
//
Функция ПолучитьКолонкиDBF()
	
	ТаблицаДляВыгрузки = РеквизитФормыВЗначение("птРеспубликаХакасия_ТаблицаДляВыгрузки");
	
	МассивСтруктурКолонок = Новый Массив;
	
	Для Каждого Колонка Из ТаблицаДляВыгрузки.Колонки Цикл
		
		Если Не (Колонка.Имя = "N" Или Колонка.Имя = "ЛицевойСчет") Тогда
			
			// Элемент массива - данные N-ой строки.
			Структура = Новый Структура;
			Структура.Вставить("Имя", Колонка.Имя);
			
			Если Колонка.ТипЗначения.СодержитТип(Тип("Число")) Тогда
				
				Структура.Вставить("Тип",                     "N");
				Структура.Вставить("РазрядностьЦелойЧасти",   Колонка.ТипЗначения.КвалификаторыЧисла.Разрядность - Колонка.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти);
				Структура.Вставить("РазрядностьДробнойЧасти", Колонка.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти);
				
			ИначеЕсли Колонка.ТипЗначения.СодержитТип(Тип("Строка")) Тогда
				
				Структура.Вставить("Тип",   "S");
				Структура.Вставить("Длина", Колонка.ТипЗначения.КвалификаторыСтроки.Длина);
				
			ИначеЕсли Колонка.ТипЗначения.СодержитТип(Тип("Дата")) Тогда
				
				Структура.Вставить("Тип",       "D");
				Структура.Вставить("ЧастиДаты", Колонка.ТипЗначения.КвалификаторыДаты.ЧастиДаты);
				
			КонецЕсли;
			
			МассивСтруктурКолонок.Добавить(Структура);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТаблицаДляВыгрузки, "птРеспубликаХакасия_ТаблицаДляВыгрузки");
	
	Возврат МассивСтруктурКолонок;
	
КонецФункции // ПолучитьКолонкиDBF()

#КонецОбласти 

#Область ПечатьРеестров

////////////////////////
// Команда ПечатьРеестров

&НаКлиенте
// Обработчик команды "КомандаПечатьРеестров".
//
Процедура КомандаПечатьРеестров(Команда)
	
	ТабличныйДокументРеестры = Новый ТабличныйДокумент;
	
	УстановитьПараметрыПечати(ТабличныйДокументРеестры);
	
	ЗаполнитьТабличныйДокументРеестры(ТабличныйДокументРеестры);
	
	ЗаголовокПечатнойФормы = "Реестры стоимости жилищных и коммунальных услуг, " + ПериодСтрокой;
	
	// Подготовка печатной формы и новой коллекции печатных форм.
	КоллекцияПечатныхФорм = УправлениеПечатьюКлиент.НоваяКоллекцияПечатныхФорм("РеспубликаХакасия_Макет");
	
	ПечатнаяФорма = УправлениеПечатьюКлиент.ОписаниеПечатнойФормы(КоллекцияПечатныхФорм, "РеспубликаХакасия_Макет");
	ПечатнаяФорма.СинонимМакета         = ЗаголовокПечатнойФормы;
	ПечатнаяФорма.ТабличныйДокумент     = ТабличныйДокументРеестры;
	ПечатнаяФорма.ИмяФайлаПечатнойФормы = "РеспубликаХакасия_Макет";
	
	// Подготовка параметров открытия общей формы "Печать документов".
	ПараметрыОткрытия = Новый Структура("ИмяМенеджераПечати,ИменаМакетов,ПараметрКоманды,ПараметрыПечати,КоллекцияПечатныхФорм,ОбъектыПечати");
	ПараметрыОткрытия.ПараметрКоманды       = Новый Массив;
	ПараметрыОткрытия.ПараметрыПечати       = Новый Структура("ЗаголовокФормы", ЗаголовокПечатнойФормы);
	ПараметрыОткрытия.КоллекцияПечатныхФорм = КоллекцияПечатныхФорм;
	ПараметрыОткрытия.ОбъектыПечати         = Новый СписокЗначений;
	
	ОткрытьФорму("ОбщаяФорма.ПечатьДокументов", ПараметрыОткрытия, ЭтаФорма, Строка(Новый УникальныйИдентификатор));
	
КонецПроцедуры // КомандаПечатьРеестров()

////////////////////////
// Прочие процедуры и функции

&НаКлиенте
// Установка параметров печати для формируемого табличного документа.
//
// Параметры:
//  ТабличныйДокумент - формируемый табличный документ.
//
Процедура УстановитьПараметрыПечати(ТабличныйДокумент)
	
	Если Не ЗаданКлючПараметровПечати() Тогда
		
		// Автомасштаб - по ширине страницы.
		ТабличныйДокумент.АвтоМасштаб = Истина;
		
		// Ориентация страницы по умолчанию альбомная.
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
	КонецЕсли;
	
	// Для табличного документа подключаем настройки параметров печати,
	// установленные в окне "Параметры страницы".
	ТабличныйДокумент.КлючПараметровПечати = "НастройкиПечати_РеспубликаХакасия_Макет";
	
КонецПроцедуры // УстановитьПараметрыПечати()

&НаСервереБезКонтекста
// Проверяет наличие сохраненного ключа пользовательских настроек печати.
//
// Возвращаемое значение:
//  Истина - если ключ пользовательских настроек печати существует;
//  Ложь   - если ключа пользовательских настроек печати нет.
//
Функция ЗаданКлючПараметровПечати()
	
	КлючОбъекта     = "Общее/НастройкиПечатиТабличногоДокумента/НастройкиПечати_РеспубликаХакасия_Макет";
	КлючНастроек    = "";
	ИмяПользователя = ПользователиИнформационнойБазы.ТекущийПользователь().ПолноеИмя;
	
	Если ХранилищеСистемныхНастроек.Загрузить(КлючОбъекта, КлючНастроек, ИмяПользователя) <> Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ЗаданКлючПараметровПечати()

&НаСервере
// Производится заполнение табличного документа для печати реестров.
//
// Параметры:
//  ТабличныйДокументРеестры - ТабличныДокумент - табличный документ дл печати реестров стоимости ЖКУ.
//
Процедура ЗаполнитьТабличныйДокументРеестры(ТабличныйДокументРеестры)
	
	ТаблицаДляВыгрузки = РеквизитФормыВЗначение("птРеспубликаХакасия_ТаблицаДляВыгрузки", Тип("ТаблицаЗначений"));
	
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("РеспубликаХакасия_Макет");
	
	ТаблицаСоответствия = РеквизитФормыВЗначение("ТаблицаСоответствияПолейРеестровИУслугВОСЗН", Тип("ТаблицаЗначений"));
	
	// 1. Шапка
	ПериодОтчета = ПериодСтрокой + " г.";
	Организация  = Объект.Организация.Наименование;
	
	// Реестр стоимости жилищных услуг
	МассивСтрокЖилУсл  = Новый Массив;
	ОбластьШапкаЖилУсл = Макет.ПолучитьОбласть("ОбластьШапкаЖилУсл");
	
	ОбластьШапкаЖилУсл.Параметры.ПериодОтчета = ПериодОтчета;
	ОбластьШапкаЖилУсл.Параметры.Организация  = Организация;
	
	// Реестр стоимости коммунальных услуг
	МассивСтрокКомУсл  = Новый Массив;
	ОбластьШапкаКомУсл = Макет.ПолучитьОбласть("ОбластьШапкаКомУсл");
	
	ОбластьШапкаКомУсл.Параметры.ПериодОтчета = ПериодОтчета;
	ОбластьШапкаКомУсл.Параметры.Организация  = Организация;
	
	// 2. Табличная часть
	
	// Итоговые показатели для строки ВСЕГО.
	Сум_СодержИРем = 0;
	Сум_КапРемонт  = 0;
	Сум_Найм       = 0;
	Сум_Лифт       = 0;
	Сум_ТвОтходы   = 0;
	Сум_ЖидОтходы  = 0;
	ИтоговаяСумма  = 0;
	
	// Заполненные строки записываем в массивы для последующего вывода в соответствующий реестр.
	Для Каждого Строка Из ТаблицаДляВыгрузки Цикл
		
		ФИО   = Строка.FAMIL + " " + Строка.IMJA + " " + Строка.OTCH;
		Адрес = ?(Строка.POSEL <> "", Строка.POSEL              + ", ", "")
			  + ?(Строка.YLIC <> "",  Строка.YLIC               + ", ", "")
			  + ?(Строка.NDOM <> "",  "д. "      + Строка.NDOM  + ", ", "")
			  + ?(Строка.NKORP <> "", "корп. "   + Строка.NKORP + ", ", "")
			  + ?(Строка.NKW <> 0,    "кв. "     + Строка.NKW   + "",   "")
			  + ?(Строка.NKOMN <> "", ", комн. " + Строка.NKOMN + ", ", "");
		
		// Реестр стоимости жилищных услуг
		ОбластьСтрокаЖилУсл = Макет.ПолучитьОбласть("ОбластьСтрокаЖилУсл");
		
		// Общая часть
		ОбластьСтрокаЖилУсл.Параметры.Заполнить(Строка);
		
		ОбластьСтрокаЖилУсл.Параметры.ФИО   = ФИО;
		ОбластьСтрокаЖилУсл.Параметры.Адрес = Адрес;
		
		// Данные о начислениях
		ОбластьСтрокаЖилУсл.Параметры.Тар_СодержИРем = ПолучитьЗначениеПоляРеестра("TARIF_",  Строка, ТаблицаСоответствия.Найти("Содержание и тек. ремонт"));
		ОбластьСтрокаЖилУсл.Параметры.Сум_СодержИРем = ПолучитьЗначениеПоляРеестра("SUMTAR_", Строка, ТаблицаСоответствия.Найти("Содержание и тек. ремонт"),               Сум_СодержИРем);
		ОбластьСтрокаЖилУсл.Параметры.Тар_КапРемонт  = ПолучитьЗначениеПоляРеестра("TARIF_",  Строка, ТаблицаСоответствия.Найти("Капитальный ремонт собственников жилья"));
		ОбластьСтрокаЖилУсл.Параметры.Сум_КапРемонт  = ПолучитьЗначениеПоляРеестра("SUMTAR_", Строка, ТаблицаСоответствия.Найти("Капитальный ремонт собственников жилья"), Сум_КапРемонт);
		ОбластьСтрокаЖилУсл.Параметры.Тар_Найм       = ПолучитьЗначениеПоляРеестра("TARIF_",  Строка, ТаблицаСоответствия.Найти("Оплата за наим жилого помещения"));
		ОбластьСтрокаЖилУсл.Параметры.Сум_Найм       = ПолучитьЗначениеПоляРеестра("SUMTAR_", Строка, ТаблицаСоответствия.Найти("Оплата за наим жилого помещения"),        Сум_Найм);
		ОбластьСтрокаЖилУсл.Параметры.Тар_Лифт       = ПолучитьЗначениеПоляРеестра("TARIF_",  Строка, ТаблицаСоответствия.Найти("Содержание и обслуживание лифтов"));
		ОбластьСтрокаЖилУсл.Параметры.Сум_Лифт       = ПолучитьЗначениеПоляРеестра("SUMTAR_", Строка, ТаблицаСоответствия.Найти("Содержание и обслуживание лифтов"),       Сум_Лифт);
		ОбластьСтрокаЖилУсл.Параметры.Тар_ТвОтходы   = ПолучитьЗначениеПоляРеестра("TARIF_",  Строка, ТаблицаСоответствия.Найти("Вывоз твердых бытовых отходов"));
		ОбластьСтрокаЖилУсл.Параметры.Сум_ТвОтходы   = ПолучитьЗначениеПоляРеестра("SUMTAR_", Строка, ТаблицаСоответствия.Найти("Вывоз твердых бытовых отходов"),          Сум_ТвОтходы);
		ОбластьСтрокаЖилУсл.Параметры.Тар_ЖидОтходы  = ПолучитьЗначениеПоляРеестра("TARIF_",  Строка, ТаблицаСоответствия.Найти("Вывоз жидких бытовых отходов"));
		ОбластьСтрокаЖилУсл.Параметры.Сум_ЖидОтходы  = ПолучитьЗначениеПоляРеестра("SUMTAR_", Строка, ТаблицаСоответствия.Найти("Вывоз жидких бытовых отходов"),           Сум_ЖидОтходы);
		
		МассивСтрокЖилУсл.Добавить(ОбластьСтрокаЖилУсл);
		
		// Реестр стоимости коммунальных услуг
		ОбластьСтрокаКомУсл = Макет.ПолучитьОбласть("ОбластьСтрокаКомУсл");
		
		// Общая часть
		ОбластьСтрокаКомУсл.Параметры.Заполнить(Строка);
		
		ОбластьСтрокаКомУсл.Параметры.ФИО   = ФИО; 
		ОбластьСтрокаКомУсл.Параметры.Адрес = Адрес; 
		
		// Данные о начислениях
		ОбластьСтрокаКомУсл.Параметры.Факт_ХВС         = ПолучитьЗначениеПоляРеестра("FAKT_",   Строка, ТаблицаСоответствия.Найти("ХВС"));
		ОбластьСтрокаКомУсл.Параметры.Факт_ГВС         = ПолучитьЗначениеПоляРеестра("FAKT_",   Строка, ТаблицаСоответствия.Найти("ГВС"));
		ОбластьСтрокаКомУсл.Параметры.Факт_Водоотв     = ПолучитьЗначениеПоляРеестра("FAKT_",   Строка, ТаблицаСоответствия.Найти("Водоотведение"));
		ОбластьСтрокаКомУсл.Параметры.Факт_ХВС_ОДН     = ПолучитьЗначениеПоляРеестра("FAKT_",   Строка, ТаблицаСоответствия.Найти("Общедомовые нужды: ХВС"));
		ОбластьСтрокаКомУсл.Параметры.Факт_ГВС_ОДН     = ПолучитьЗначениеПоляРеестра("FAKT_",   Строка, ТаблицаСоответствия.Найти("Общедомовые нужды: ГВС"));
		ОбластьСтрокаКомУсл.Параметры.Факт_Водоотв_ОДН = ПолучитьЗначениеПоляРеестра("FAKT_",   Строка, ТаблицаСоответствия.Найти("Общедомовые нужды: Водоотведение"));
		ОбластьСтрокаКомУсл.Параметры.Тар_Отопление    = ПолучитьЗначениеПоляРеестра("TARIF_",  Строка, ТаблицаСоответствия.Найти("Отопление"));
		ОбластьСтрокаКомУсл.Параметры.Сум_Отопление    = ПолучитьЗначениеПоляРеестра("SUMTAR_", Строка, ТаблицаСоответствия.Найти("Отопление"));
		ОбластьСтрокаКомУсл.Параметры.Факт_ЭлЭн        = ПолучитьЗначениеПоляРеестра("FAKT_",   Строка, ТаблицаСоответствия.Найти("Электроэнергия"));
		ОбластьСтрокаКомУсл.Параметры.Сум_ЭлЭн         = ПолучитьЗначениеПоляРеестра("SUMTAR_", Строка, ТаблицаСоответствия.Найти("Электроэнергия"));
		ОбластьСтрокаКомУсл.Параметры.Факт_ЭлЭн_ОДН    = ПолучитьЗначениеПоляРеестра("FAKT_",   Строка, ТаблицаСоответствия.Найти("ОДН электроэнергия"));
		
		ОбластьСтрокаКомУсл.Параметры.КолДолг          = ПолучитьЗначениеПоляРеестраСуммарное("SUMDOLG_", Строка);
		ОбластьСтрокаКомУсл.Параметры.ИтоговаяСумма    = ПолучитьЗначениеПоляРеестраСуммарное("SUMTAR_",  Строка, ИтоговаяСумма);
		
		МассивСтрокКомУсл.Добавить(ОбластьСтрокаКомУсл);
		
	КонецЦикла;
	
	// 3. Строка ВСЕГО
	// Реестр стоимости жилищных услуг.
	ОбластьВсегоЖилУсл = Макет.ПолучитьОбласть("ОбластьВсегоЖилУсл");
	ОбластьВсегоЖилУсл.Параметры.KOLZR          = ТаблицаДляВыгрузки.Итог("KOLZR");
	ОбластьВсегоЖилУсл.Параметры.ROPL           = ТаблицаДляВыгрузки.Итог("ROPL");
	ОбластьВсегоЖилУсл.Параметры.Сум_СодержИРем = Сум_СодержИРем;
	ОбластьВсегоЖилУсл.Параметры.Сум_КапРемонт  = Сум_КапРемонт;
	ОбластьВсегоЖилУсл.Параметры.Сум_Найм       = Сум_Найм;
	ОбластьВсегоЖилУсл.Параметры.Сум_Лифт       = Сум_Лифт;
	ОбластьВсегоЖилУсл.Параметры.Сум_ТвОтходы   = Сум_ТвОтходы;
	ОбластьВсегоЖилУсл.Параметры.Сум_ЖидОтходы  = Сум_ЖидОтходы;
	
	// Реестр стоимости коммунальных услуг
	ОбластьВсегоКомУсл = Макет.ПолучитьОбласть("ОбластьВсегоКомУсл");
	ОбластьВсегоКомУсл.Параметры.KOLZR         = ТаблицаДляВыгрузки.Итог("KOLZR");
	ОбластьВсегоКомУсл.Параметры.ROPL          = ТаблицаДляВыгрузки.Итог("ROPL");
	ОбластьВсегоКомУсл.Параметры.ИтоговаяСумма = ИтоговаяСумма;
	
	// 4. Подвал
	// Реестр стоимости жилищных услуг.
	ОбластьПодвалЖилУсл = Макет.ПолучитьОбласть("ОбластьПодвалЖилУсл");
	
	// Реестр стоимости коммунальных услуг
	ОбластьПодвалКомУсл = Макет.ПолучитьОбласть("ОбластьПодвалКомУсл");
	
	// Вывод в табличный документ.
	// Реестр стоимости жилищных услуг.
	ТабличныйДокументРеестры.Вывести(ОбластьШапкаЖилУсл);
	
	Для Каждого ОбластьСтрокаЖилУсл Из МассивСтрокЖилУсл Цикл
		ТабличныйДокументРеестры.Вывести(ОбластьСтрокаЖилУсл);
	КонецЦикла;
	
	ТабличныйДокументРеестры.Вывести(ОбластьВсегоЖилУсл);
	ТабличныйДокументРеестры.Вывести(ОбластьПодвалЖилУсл);
	
	ТабличныйДокументРеестры.ВывестиГоризонтальныйРазделительСтраниц();
	
	// Реестр стоимости коммунальных услуг
	ТабличныйДокументРеестры.Вывести(ОбластьШапкаКомУсл);
	
	Для Каждого ОбластьСтрокаКомУсл Из МассивСтрокКомУсл Цикл
		ТабличныйДокументРеестры.Вывести(ОбластьСтрокаКомУсл);
	КонецЦикла;
	
	ТабличныйДокументРеестры.Вывести(ОбластьВсегоКомУсл);
	ТабличныйДокументРеестры.Вывести(ОбластьПодвалКомУсл);
	
КонецПроцедуры // ЗаполнитьТабличныйДокументРеестры()

&НаСервере
// Определяет значение для вывода в поле реестра.
//
// Параметры:
//  ПрефиксВыгружаемогоПоля   - Строка                - перфикс в наименовании колонок в птРеспубликаХакасия_ТаблицаДляВыгрузки.
//  СтрокаТаблицаДляВыгрузки  - СтрокаТаблицыЗначений - текущая строка таблицы выгрузки птРеспубликаХакасия_ТаблицаДляВыгрузки.
//  СтрокаТаблицаСоответствия - СтрокаТаблицыЗначений - строка таблицы ТаблицаСоответствияПолейРеестровИУслугВОСЗН.
//  ИтоговыйПоказатель        - Число                 - значение для вывода в итоговой строке.
//
// Возвращаемое значение:
//  ИтоговоеЗначение - Число - значение в текущей строке по даному префиксу
//                             (суммарное, если несколько соответствий услуг и полей реестров).
//
Функция ПолучитьЗначениеПоляРеестра(ПрефиксВыгружаемогоПоля, СтрокаТаблицаДляВыгрузки, СтрокаТаблицаСоответствия, ИтоговыйПоказатель = Неопределено)
	
	ИтоговоеЗначение = 0;
	КоличествоНенулевыхНачислений = 0;
	
	// В строке таблицы для выгрузки суммируем значения в колонках, орпеделяемых через префикс и номер услуги в ОСЗН. 
	Для Каждого ЭлементСписка Из СтрокаТаблицаСоответствия.СписокУслугВОСЗН Цикл
		 
		ИтоговоеЗначение = СтрокаТаблицаДляВыгрузки[ПрефиксВыгружаемогоПоля + Строка(ЭлементСписка.Значение)] + ИтоговоеЗначение;
		
		Если СтрокаТаблицаДляВыгрузки[ПрефиксВыгружаемогоПоля + ЭлементСписка.Значение] <> 0 Тогда
			КоличествоНенулевыхНачислений = КоличествоНенулевыхНачислений + 1;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПрефиксВыгружаемогоПоля = "TARIF_" Тогда
		ИтоговоеЗначение = ИтоговоеЗначение / ?(КоличествоНенулевыхНачислений <> 0, КоличествоНенулевыхНачислений, 1);
	КонецЕсли;
	
	Если ИтоговыйПоказатель <> Неопределено Тогда
		ИтоговыйПоказатель = ИтоговыйПоказатель + ИтоговоеЗначение;
	КонецЕсли;
	
	Возврат ИтоговоеЗначение;
	
КонецФункции // ПолучитьЗначениеПоляРеестра()

&НаСервере
// Определяет суммарное значение для вывода в поле реестра.
//
// Параметры:
//  ПрефиксВыгружаемогоПоля   - Строка                - перфикс в наименовании колонок в птРеспубликаХакасия_ТаблицаДляВыгрузки.
//  СтрокаТаблицаДляВыгрузки  - СтрокаТаблицыЗначений - текущая строка таблицы выгрузки птРеспубликаХакасия_ТаблицаДляВыгрузки.
//  ИтоговыйПоказатель        - Число                 - значение для вывода в итоговой строке.
//
// Возвращаемое значение:
//  ИтоговоеЗначение - Число - суммарное значение по всем услугам по данному префиксу.
//
Функция ПолучитьЗначениеПоляРеестраСуммарное(ПрефиксВыгружаемогоПоля, СтрокаТаблицаДляВыгрузки, ИтоговыйПоказатель = Неопределено)
	
	ИтоговоеЗначение = 0;
	
	Для Сч = 1 По КоличествоУслугТаблицыВыгрузки Цикл
		ИтоговоеЗначение = СтрокаТаблицаДляВыгрузки[ПрефиксВыгружаемогоПоля + Сч] + ИтоговоеЗначение; 
	КонецЦикла;
	
	Если ИтоговыйПоказатель <> Неопределено Тогда
		ИтоговыйПоказатель = ИтоговыйПоказатель + ИтоговоеЗначение;
	КонецЕсли;
	
	Возврат ИтоговоеЗначение;
	
КонецФункции // ПолучитьЗначениеПоляРеестраСуммарное()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ЗАГРУЗКИ ФОРМЫ

#Область Загрузка

&НаКлиенте
// Процедура - обработчик собатия "ПриИзменении" табличного поля "птРеспубликаХакасия_ТаблицаДляЗагрузки".
//
Процедура птРеспубликаХакасия_ТаблицаДляЗагрузкиПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры // птРеспубликаХакасия_ТаблицаДляЗагрузкиПриИзменении()

////////////////////////
// Выбор файла загрузки

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ИмяФайлаЗагрузки".
Процедура ИмяФайлаЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла                    = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок          = "Выберите файл, из которого будут загружены данные в базу";
	ДиалогВыбораФайла.Каталог            = Объект.ИмяФайлаЗагрузки;
	ДиалогВыбораФайла.ПолноеИмяФайла     = "";
	ДиалогВыбораФайла.Фильтр             = "XBase, dBase III (*.dbf)|*.dbf"; 
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ИмяФайлаЗагрузкиНачалоВыбораВыбрать", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
// Обработчик заверешения обработчика события "НачалоВыбора" поля "ИмяФайлаЗагрузки".
Процедура ИмяФайлаЗагрузкиНачалоВыбораВыбрать(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		ПроверитьУказанныйDBFФайл(ВыбранныеФайлы[0], "Загрузки");
	КонецЕсли;
	
КонецПроцедуры // ИмяФайлаВыгрузкиНачалоВыбора()

&НаКлиенте
// Обработчик события "Открытие" поля "ИмяФайлаЗагрузки".
Процедура ИмяФайлаЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Файл = Новый Файл(Объект.ИмяФайлаЗагрузки);
	
	Файл.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ИмяФайлаЗагрузкиОткрытиеКаталогСуществует", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения проверки существования каталога.
Процедура ИмяФайлаЗагрузкиОткрытиеКаталогСуществует(Существует, ДополнительныеПараметры) Экспорт
	
	Если Существует Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ИмяФайлаЗагрузкиОткрытиеЗапускПриложения", ЭтотОбъект);
		
		НачатьЗапускПриложения(ОписаниеОповещения, Объект.ИмяФайлаЗагрузки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения запуска приложения.
Процедура ИмяФайлаЗагрузкиОткрытиеЗапускПриложения(КодВозврата, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры // ИмяФайлаЗагрузкиОткрытие()

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "ИмяФайлаЗагрузки".
Процедура ИмяФайлаЗагрузкиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	// Проверяем ручной ввод текста.
	СтандартнаяОбработка = Ложь;
	ПроверитьУказанныйDBFФайл(Текст, "Загрузки");
	
КонецПроцедуры // ИмяФайлаЗагрузкиОкончаниеВводаТекста()

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ТаблицаДляЗагрузки_Льготник".
//
Процедура ТаблицаДляЗагрузки_ЛьготникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущийЛС = Элементы.птРеспубликаХакасия_ТаблицаДляЗагрузки.ТекущиеДанные.ЛицевойСчет;
	
	Если Не ТекущийЛС.Пустая() Тогда
		
		// Устанавливаем отбор по владельцу.
		СтандартнаяОбработка = Ложь;
		
		Форма = ПолучитьФорму("Справочник.УПЖКХ_Жильцы.ФормаВыбора", Новый Структура("ТекущаяСтрока", Элементы.птРеспубликаХакасия_ТаблицаДляЗагрузки.ТекущиеДанные.Льготник), Элемент);
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Форма.Список.КомпоновщикНастроек.Настройки.Отбор, "Владелец", ТекущийЛС,
																ВидСравненияКомпоновкиДанных.Равно, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
		
		Форма.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры // ТаблицаДляЗагрузки_ЛьготникНачалоВыбора()

////////////////////////
// Загрузить из файла

&НаКлиенте
// Обработчик команды "КомандаЗагрузитьИзФайлаЗагрузки".
//
Процедура КомандаЗагрузитьИзФайлаЗагрузки(Команда)
	
	// Производим загрузку данных из dbf-файла загрузки.
	ЗагрузитьИзФайла("Загрузки");
	
КонецПроцедуры // КомандаЗагрузитьИзФайлаЗагрузки()

////////////////////////
// Прочие процедуры и функции

&НаСервере
// Переопределяет колонки и поля таблицы "птРеспубликаХакасия_ТаблицаДляЗагрузки".
//
// Параметры:
//  КоличествоУслугТаблицыВыгрузки - Число - количество услуг из dbf-файла.
//
Процедура ДобавитьРеквизитыВТаблицуЗагрузкиНаСервере();
	
	Если АдресДобавляемыеРеквизитыТаблицыЗагрузки <> "" Тогда
		
		ДобавляемыеРеквизитыТаблицыЗагрузки = ПолучитьИзВременногоХранилища(АдресДобавляемыеРеквизитыТаблицыЗагрузки);
		
		УдаляемыеРеквизиты = Новый Массив;
		
		// Удаляем ранее добавленные элементы формы.
		Для Каждого РеквизитУдаления Из ДобавляемыеРеквизитыТаблицыЗагрузки Цикл
			УдаляемыеРеквизиты.Добавить("птРеспубликаХакасия_ТаблицаДляЗагрузки." + РеквизитУдаления.Имя);
			Элементы.Удалить(Элементы["ТаблицаДляЗагрузки_" + РеквизитУдаления.Имя]);
		КонецЦикла;
		
		// Удаляем ранее добавленные реквизиты.
		ИзменитьРеквизиты(, УдаляемыеРеквизиты);
		
		ДобавляемыеРеквизитыТаблицыЗагрузки.Очистить();
		
	Иначе
		ДобавляемыеРеквизитыТаблицыЗагрузки = Новый Массив;
	КонецЕсли;
	
	// Создаем динамическую часть колонок в таблице выгрузки (зависит от числа услуг).
	Для Сч = 1 По КоличествоУслугТаблицыЗагрузки Цикл
		ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("GKYSL_"  + Сч, УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(50),   "птРеспубликаХакасия_ТаблицаДляЗагрузки", "ЖКУ верхнего уровня", Ложь));
		ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("KGKYSL_" + Сч, УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(4, 0),  "птРеспубликаХакасия_ТаблицаДляЗагрузки", "Код ЖКУ нижнего уровня", Ложь));
		ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("NGKYSL_" + Сч, УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(50),   "птРеспубликаХакасия_ТаблицаДляЗагрузки", "ЖКУ нижнего уровня", Ложь));
		ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("LCHET_"  + Сч, УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(24),   "птРеспубликаХакасия_ТаблицаДляЗагрузки", "Лицевой счет ЖКУ", Ложь));
		ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("TARIF_"  + Сч, УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(19, 5), "птРеспубликаХакасия_ТаблицаДляЗагрузки", "Тариф ЖКУ", Ложь));
		ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("SUMTAR_" + Сч, УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(19, 5), "птРеспубликаХакасия_ТаблицаДляЗагрузки", "Сумма льготы", Ложь));
	КонецЦикла;
	
	// Добавляем новые реквизиты.
	ИзменитьРеквизиты(ДобавляемыеРеквизитыТаблицыЗагрузки);
	
	// Создаем новые элементы формы.
	Для Каждого Колонка Из ДобавляемыеРеквизитыТаблицыЗагрузки Цикл 
		Элемент             = Элементы.Добавить("ТаблицаДляЗагрузки_" + Колонка.Имя, Тип("ПолеФормы"), Элементы.птРеспубликаХакасия_ТаблицаДляЗагрузки); 
		Элемент.Вид         = ВидПоляФормы.ПолеВвода;
		Элемент.Формат      = "ЧН=0";
		Элемент.ПутьКДанным = "птРеспубликаХакасия_ТаблицаДляЗагрузки." + Колонка.Имя;
	КонецЦикла;
	
	// Сохраням массив добавляемых реквизитов.
	АдресДобавляемыеРеквизитыТаблицыЗагрузки = ПоместитьВоВременноеХранилище(ДобавляемыеРеквизитыТаблицыЗагрузки, Новый УникальныйИдентификатор);
	
КонецПроцедуры // ДобавитьРеквизитыВТаблицуЗагрузки()

#КонецОбласти

#Область ДокументНачислениеУслугВСторонейПрограмме

////////////////////////
// Документ "Начисление услуг в сторонней программе"

&НаКлиенте
// Обработчик события "НачалоВыбора" поля ввода "ДокументСсылкаРасчетЛьгот".
//
Процедура ДокументНачислениеУслугВСторонейПрограммеВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Устанавливаем отбор на документ "Расчет льгот" - проведенные документы не выбираем.
	СтандартнаяОбработка = Ложь;
	
	Форма = ПолучитьФорму("Документ.УПЖКХ_НачислениеУслугВСтороннейПрограмме.ФормаВыбора", , Элемент);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Форма.Список.КомпоновщикНастроек.Настройки.Отбор, "Проведен", Ложь,
															ВидСравненияКомпоновкиДанных.Равно, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
	Форма.Открыть();
	
КонецПроцедуры // ДокументНачислениеУслугВСторонейПрограммеВыбора()

////////////////////////
// Команда "КомандаЗаписатьВДокумент"

&НаКлиенте
// Обработчик команды "КомандаЗаписатьВДокумент".
//
Процедура КомандаЗаписатьВДокумент(Команда)
	
	ОчиститьСообщения();
	
	Если птРеспубликаХакасия_ТаблицаДляЗагрузки.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Отсутствуют данные для загрузки.");
		Возврат;
	КонецЕсли;
	
	Если ЛьготнаяКатегорияДляЗагрузкиИзОСЗН.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбрана льготная категория для загрузки сумм льгот из ОСЗН.");
		Возврат;
	КонецЕсли;
	
	Если Не ДокументНачислениеУслугВСторонейПрограмме.Пустая() Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаЗаписатьВДокументЗавершение", ЭтотОбъект, );
		
		ТекстВопроса = "Для записи данных выбран существующий докумет. Следует его ";
		
		Кнопки = Новый СписокЗначений;
		// В первом случае существующий документ будет полностью перезаписан.
		// Во втором случае в него только будет загружена табличная часть.
		Кнопки.Добавить(КодВозвратаДиалога.Да,     "Перезаписать");
		Кнопки.Добавить(КодВозвратаДиалога.Нет,    "Дополнить");
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, "Пропустить");
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Отмена);
		
	Иначе
		КомандаЗаписатьВДокументПродолжение();
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаписатьВДокумент()

&НаКлиенте
// Обработчик результата опроса команды "КомандаЗаписатьВДокумент".
//
Процедура КомандаЗаписатьВДокументЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		КомандаЗаписатьВДокументПродолжение(Истина);
		
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		
		КомандаЗаписатьВДокументПродолжение();
		
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаписатьВДокументЗавершение()

&НаКлиенте
// Продолжение обработчика команды "КомандаЗаписатьВДокумент".
//
Процедура КомандаЗаписатьВДокументПродолжение(ОчищатьСуществующийДокумент = Ложь) 
	
	ЗаписьУдалась = КомандаЗаписатьВДокументНаСервере(ОчищатьСуществующийДокумент);
	
	// Показываем сформированный документ пользователю.
	Если ЗаписьУдалась Тогда
		ПоказатьЗначение(, ДокументНачислениеУслугВСторонейПрограмме);
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаписатьВДокументПродолжение()

&НаСервере
// Обработчик команды "КомандаЗаполнитьТаблицуВыгрузки" на сервере.
Функция КомандаЗаписатьВДокументНаСервере(ОчищатьСуществующийДокумент)
	
	ТаблицаДанных = ПолучитьТаблицуДанныхЗагрузки();
	Если ТаблицаДанных.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не обнаружены идентифицированные в базе лицевые счета.");
		Возврат Ложь;
	КонецЕсли;
	
	ТаблицаДляЗаписиВДокумент = ПодготовитьТаблицуДляЗаписиВДокумент(ТаблицаДанных);
	
	Документ = ?(ДокументНачислениеУслугВСторонейПрограмме.Пустая(), Документы.УПЖКХ_НачислениеУслугВСтороннейПрограмме.СоздатьДокумент(), ДокументНачислениеУслугВСторонейПрограмме.ПолучитьОбъект());
	
	Если ДокументСсылкаРасчетЛьгот.Пустая() Или ОчищатьСуществующийДокумент Тогда
		
		// Заполнение реквизитов документа.
		Документ.Дата                     = Объект.Период;
		Документ.Организация              = Объект.Организация;
		Документ.Ответственный            = ПараметрыСеанса.ТекущийПользователь;
		Документ.Комментарий              = "# Данные загружены из УСПН [" + Формат(ТекущаяДата(), "ДЛФ=DDT") + "] "
		                                  + "# Файл обмена: """ + ИмяФайлаБезПолногоПути(Объект.ИмяФайлаЗагрузки) + """";
		Документ.Начисления.Очистить();
	КонецЕсли;
	
	// Заполнение табличной части документа.
	Для Каждого Строка Из ТаблицаДляЗаписиВДокумент Цикл
		НоваяСтрока = Документ.Начисления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	
	// Запись документа.
	ЗаписьУдалась = КВП_ЗаписатьОбъект(Документ);
	ДокументНачислениеУслугВСторонейПрограмме = Документ.Ссылка;
	
	Возврат ЗаписьУдалась;
	
КонецФункции // КомандаЗаписатьВДокументНаСервере()

////////////////////////
// Прочие процедуры и функции

&НаСервере
// Формирует таблицу ЛС, услуг в ОСЗН и сумме начисленной льготы.
//
// Возвращаемое значение:
//  ТаблицаДанных - ТаблицаЗначений - таблица ЛС, услуг в ОСЗН и начисленной льготы.
//
Функция ПолучитьТаблицуДанныхЗагрузки()
	
	ТаблицаДляЗагрузки = РеквизитФормыВЗначение("птРеспубликаХакасия_ТаблицаДляЗагрузки", Тип("ТаблицаЗначений"));
	
	// Создаем таблицу данных, состоящую из связок "ЛицевойСчет - Начислено - УслугаВОСЗН".
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	ТаблицаДанных.Колонки.Добавить("ЛицевойСчет", Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
	ТаблицаДанных.Колонки.Добавить("Льготник",    Новый ОписаниеТипов("СправочникСсылка.УПЖКХ_Жильцы"));
	ТаблицаДанных.Колонки.Добавить("Сумма",       УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТаблицаДанных.Колонки.Добавить("УслугаВОСЗН", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(50));
	
	Для Каждого Строка Из ТаблицаДляЗагрузки Цикл
		
		// Для строк без ЛС запись не производим.
		Если Строка.ЛицевойСчет.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		// Для строк без льготников запись не производим.
		Если Строка.Льготник.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		Для НомерУслуги = 1 По КоличествоУслугТаблицыЗагрузки Цикл 
			
			// Выбираем услуги в ОСЗН нижнего уровня с записями о начисленной льготе.
			Если Строка["NGKYSL_" + НомерУслуги] <> "" Тогда
				НоваяСтрока             = ТаблицаДанных.Добавить();
				НоваяСтрока.ЛицевойСчет = Строка.ЛицевойСчет;
				НоваяСтрока.Льготник    = Строка.Льготник;
				НоваяСтрока.УслугаВОСЗН = Строка["NGKYSL_" + НомерУслуги];
				НоваяСтрока.Сумма       = Строка["SUMTAR_" + НомерУслуги];
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТаблицаДляЗагрузки, "птРеспубликаХакасия_ТаблицаДляЗагрузки");
	
	Возврат ТаблицаДанных;
	
КонецФункции // ПолучитьТаблицуДанныхЗагрузки()

&НаСервере
// Формирует таблицу для записи в документ "Расчет льгот".
//
// Параметры:
//  ТаблицаДанных - ТаблицаЗначений - таблица ЛС, услуг в ОСЗН и начисленной льготы.
//
// Возвращаемое значение:
//  Результат     - ТаблицаЗначений - подготовленная таблица для загрузки в документ "Расчет льгот".
//
Функция ПодготовитьТаблицуДляЗаписиВДокумент(ТаблицаДанных)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаУслуг.УслугаВОСЗН,
	|	ТаблицаУслуг.УслугаВБазе КАК Услуга
	|ПОМЕСТИТЬ втТаблицаУслуг
	|ИЗ
	|	&ТаблицаУслуг КАК ТаблицаУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанных.ЛицевойСчет,
	|	ТаблицаДанных.Льготник,
	|	ТаблицаДанных.Сумма,
	|	ТаблицаДанных.УслугаВОСЗН
	|ПОМЕСТИТЬ втТаблицаДанных
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_НазначенныеНачисленияСрезПоследних.Объект,
	|	КВП_НазначенныеНачисленияСрезПоследних.Услуга
	|ПОМЕСТИТЬ втНазначенныеНачисления
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления.СрезПоследних(
	|			&Дата,
	|			Объект В
	|					(ВЫБРАТЬ
	|						втТаблицаДанных.ЛицевойСчет
	|					ИЗ
	|						втТаблицаДанных КАК втТаблицаДанных)
	|				И Организация = &Организация
	|				И Услуга В
	|					(ВЫБРАТЬ
	|						втТаблицаУслуг.Услуга
	|					ИЗ
	|						втТаблицаУслуг КАК втТаблицаУслуг)
	|				И Действует) КАК КВП_НазначенныеНачисленияСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаДанных.ЛицевойСчет КАК ЛицевойСчет,
	|	втТаблицаДанных.Льготник КАК Льготник,
	|	втТаблицаУслуг.Услуга КАК Услуга,
	|	СУММА(втТаблицаДанных.Сумма) КАК Сумма
	|ПОМЕСТИТЬ втСуммаЛьгот
	|ИЗ
	|	втТаблицаУслуг КАК втТаблицаУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТаблицаДанных КАК втТаблицаДанных
	|		ПО втТаблицаУслуг.УслугаВОСЗН = втТаблицаДанных.УслугаВОСЗН
	|ГДЕ
	|	(втТаблицаДанных.ЛицевойСчет, втТаблицаУслуг.Услуга) В
	|			(ВЫБРАТЬ
	|				втНазначенныеНачисления.Объект,
	|				втНазначенныеНачисления.Услуга
	|			ИЗ
	|				втНазначенныеНачисления КАК втНазначенныеНачисления)
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаДанных.ЛицевойСчет,
	|	втТаблицаДанных.Льготник,
	|	втТаблицаУслуг.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Договор КАК ДоговорКонтрагента
	|ПОМЕСТИТЬ втОсновнойДоговорЛС
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(
	|			&Дата,
	|			ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втСуммаЛьгот.ЛицевойСчет
	|					ИЗ
	|						втСуммаЛьгот КАК втСуммаЛьгот)
	|				И Организация = &Организация) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСуммаЛьгот.Услуга КАК Услуга,
	|	втСуммаЛьгот.ЛицевойСчет КАК ЛицевойСчет,
	|	ЕСТЬNULL(втОсновнойДоговорЛС.ДоговорКонтрагента, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК ДоговорКонтрагента,
	|	ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы) КАК РазделУчета,
	|	втСуммаЛьгот.Льготник,
	|	&ЛьготнаяКатегория КАК ЛьготнаяКатегория,
	|	ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление) КАК ВидНачисления,
	|	ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Общий) КАК ВидТарифа,
	|	втСуммаЛьгот.Сумма
	|ИЗ
	|	втСуммаЛьгот КАК втСуммаЛьгот
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОсновнойДоговорЛС КАК втОсновнойДоговорЛС
	|		ПО втСуммаЛьгот.ЛицевойСчет = втОсновнойДоговорЛС.ЛицевойСчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЛицевойСчет,
	|	Услуга";
	
	Запрос.УстановитьПараметр("ТаблицаУслуг",      Объект.РеспубликаХакасия_УслугиВБазе.Выгрузить(, "УслугаВОСЗН, УслугаВБазе"));
	Запрос.УстановитьПараметр("ТаблицаДанных",     ТаблицаДанных);
	Запрос.УстановитьПараметр("Организация",       Объект.Организация);
	Запрос.УстановитьПараметр("Дата",              КонецМесяца(Объект.Период));
	Запрос.УстановитьПараметр("ЛьготнаяКатегория", ЛьготнаяКатегорияДляЗагрузкиИзОСЗН);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции // ПодготовитьТаблицуДляЗаписиВДокумент()

&НаКлиентеНаСервереБезКонтекста
// Возвращает имя файла с расширением без полного пути к нему.
//
// Параметры:
//  ИмяФайла - Строка - полный путь к файлу в системе.
//
Функция ИмяФайлаБезПолногоПути(Знач ИмяФайла)
	
	Пока Найти(ИмяФайла, "\") <> 0 Цикл
		ИмяФайла = Прав(ИмяФайла, СтрДлина(ИмяФайла) - Найти(ИмяФайла, "\")); 
	КонецЦикла;
	
	Возврат ИмяФайла;
	
КонецФункции // ИмяФайлаБезПолногоПути()

#КонецОбласти


//////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область МеханизмЗагрузкиИзФайла

////////////////////////
// Механизм загрузки

&НаКлиенте
// Загрузка данных из dbf-файла. Если заполняемая таблица не пуста - выводится асинхронный вопрос.
//
// Параметры:
//  Режим - Строка - наименование режима работы текущего загружаемого файла: "Загрузки" или "Выгрузки".
//
Процедура ЗагрузитьИзФайла(Режим)
	
	Если ЭтотОбъект["птРеспубликаХакасия_ТаблицаДля" + Режим].Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("ЗагрузитьИзФайлаПослеЗакрытияВопроса", ЭтотОбъект, Режим);
		
		ТекстВопроса = "Перед загрузкой данная таблица будет очищена. Продолжить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		
	Иначе
		ЗагрузитьИзФайлаПродолжение(Режим);
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьИзФайла()

&НаКлиенте
// Обработчик результата вопроса о перезаполнении текущей таблицы.
//
Процедура ЗагрузитьИзФайлаПослеЗакрытияВопроса(Результат, Режим) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЭтотОбъект["птРеспубликаХакасия_ТаблицаДля" + Режим].Очистить();
		
		ЗагрузитьИзФайлаПродолжение(Режим);
		
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьИзФайлаПослеЗакрытияВопроса()

&НаКлиенте
// Продолжение алгоритма загрузки. Загружаемый файл помещается во временное хранилище для последующей обработки на сервере.
//
Процедура ЗагрузитьИзФайлаПродолжение(Режим) 
	
	// Помещаем загружаемый файл во временное хранилище.
	Оповещение = Новый ОписаниеОповещения("ОбработатьВыборФайла", ЭтотОбъект, Режим);
	НачатьПомещениеФайла(Оповещение, , Объект["ИмяФайла" + Режим], Ложь, УникальныйИдентификатор);
	
КонецПроцедуры // ЗагрузитьИзФайлаПродолжение()

&НаКлиенте
// Обработчик результата помещения файла во временное хранилище.
//
Процедура ОбработатьВыборФайла(Результат, АдресФайлаВХранилище, ВыбранноеИмяФайла, Режим) Экспорт
	
	Если Результат Тогда
		// Загружаем данные из dbf на сервере.
		ЗагрузитьИзФайлаНаСервере(АдресФайлаВХранилище, Режим);
		
		// Обновляем период согласно записям в текущем файле.
		ОбновитьПериод(ПериодИзФайла);
		
		// Устанавливаем видимость кнопок.
		УправлениеФормой();
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВыборФайла()

&НаСервере
// Загружает копию dbf-файла в текущую таблицу.
// Параметры:
//  АдресФайлаВХранилище - Строка - адрес текущего файла во временном хранилище.
//  Режим                - Строка - наименование режима работы текущего загружаемого файла: "Загрузки" или "Выгрузки".
//
Процедура ЗагрузитьИзФайлаНаСервере(АдресФайлаВХранилище, Режим)
	
	#Если Не ВебКлиент Тогда
		
		// Получаем dbf из временного хранилища.
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВХранилище);
		
		// Для чтения *.dbf файла в кодировке DOS (OEM), урежем имя временного файла.
		КороткоеИмяВременногоФайла = ПолучитьИмяВременногоDBFФайла(Режим);
		
		// Записываем dbf в файл с указанным именем.
		ДвоичныеДанные.Записать(КороткоеИмяВременногоФайла);
		
		// Производим чтение dbf файла.
		DBFФайл = Новый XBase;
		DBFФайл.Кодировка = КодировкаXBase.OEM;
		
		DBFФайл.ОткрытьФайл(КороткоеИмяВременногоФайла, , Истина);
		
		// Проверяем файл загрузки на существование. Добавляем поля таблицы выгрузки.
		Если DBFФайл.Открыта() Тогда
			
			// Определяем серверную переменную.
			ЭтотОбъект["КоличествоУслугТаблицы" + Режим] = (DBFФайл.Поля.Количество() - ?(Режим = "Выгрузки", 24, 15)) / ?(Режим = "Выгрузки", 17, 6);
			
			// Проверяем количество услуг.
			Если ?(ЭтотОбъект["КоличествоУслугТаблицы" + Режим] = Цел(ЭтотОбъект["КоличествоУслугТаблицы" + Режим]), Ложь, Истина) Тогда
				
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Неверный формат файла!");
				DBFФайл.ЗакрытьФайл();
				Возврат;
				
			КонецЕсли;
			
			Выполнить("ДобавитьРеквизитыВТаблицу" + Режим + "НаСервере()");
			
		Иначе
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не удалось прочитать указанный файл!");
			DBFФайл.ЗакрытьФайл();
			Возврат;
			
		КонецЕсли;
		
		// Нужна ТаблицаЗначений для перебора колонок.
		ТаблицаДляЗагрузки = РеквизитФормыВЗначение("птРеспубликаХакасия_ТаблицаДля" + Режим);
		
		// Заполнение полей ТаблицаДанныхИзФайла согласно DBF-файлу.
		Сч = 1;
		Пока Не DBFФайл.ВКонце() Цикл
			
			НоваяЗапись = ТаблицаДляЗагрузки.Добавить();
			
			Для Каждого Колонка Из ТаблицаДляЗагрузки.Колонки Цикл
				
				Если Не DBFФайл.Поля.Найти(Колонка.Имя) = Неопределено Тогда
					
					НоваяЗапись[Колонка.Имя] = ?(Строка(Колонка.ТипЗначения) = "Строка", СокрЛП(DBFФайл[Колонка.Имя]), DBFФайл[Колонка.Имя]);
					
				ИначеЕсли Колонка.Имя = "N" Тогда
					// Нумерация строк.
					НоваяЗапись[Колонка.Имя] = Сч;
					
				КонецЕсли;
				
			КонецЦикла;
			
			DBFФайл.Следующая();
			Сч = Сч + 1;
			
		КонецЦикла;
		
		DBFФайл.ЗакрытьФайл();
		
		ПроизвестиИдентификациюЛицевыхСчетов(Режим, ТаблицаДляЗагрузки, ЭтотОбъект["КоличествоУслугТаблицы" + Режим], Объект.Период, Объект.ПрефиксЛицевыхСчетов);
		
		// Определяем отчетную дату из файла.
		ПериодИзФайла = ?(ТипЗнч(ТаблицаДляЗагрузки[0].DATN) = Тип("Дата"), ТаблицаДляЗагрузки[0].DATN, Неопределено);
		
		// Помещаем заполенную таблицу значений в соответствующий реквизит формы.
		ЗначениеВРеквизитФормы(ТаблицаДляЗагрузки, "птРеспубликаХакасия_ТаблицаДля" + Режим);
		
		// Очищае временное хранилище.
		УдалитьИзВременногоХранилища(АдресФайлаВХранилище);
		
	#КонецЕсли
	
КонецПроцедуры // ЗагрузитьИзФайлаНаСервере()

////////////////////////
// Механизм идентификации лицевых счетов

&НаСервереБезКонтекста
// Устанавливает связь данных из dbf-файла с базой путём идентификации лицевых счетов.
// Для таблицы загрузки дополнительно определяются помещение и ответственный собственник.
//
// Параметры:
//  ИсходнаяТаблица - ТаблицаЗначений - таблица выгрузки/загрузки, полученная из DBF.
//  КоличествоУслуг - Число           - целое чило - количество услуг в DBF.
//  Период          - Дата            - период выгрузки/загрузки.
//  Префикс         - Строка          - префикс лицевых счетов.
//
Функция ПроизвестиИдентификациюЛицевыхСчетов(Режим, ИсходнаяТаблица, КоличествоУслуг, Период, Префикс)
	
	РежимЗагрузки = ?(Режим = "Загрузки", Истина, Ложь);
	
	// Создаем таблицу лицевых счетов из DBF.
	ТаблицаИдентификации = Новый ТаблицаЗначений;
	ТаблицаИдентификации.Колонки.Добавить("N",     УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(5, 0));
	ТаблицаИдентификации.Колонки.Добавить("LCHET", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(24));
	
	// Для режима загрузки добавляем данные о жильце из DBF.
	Если РежимЗагрузки Тогда
		
		ТаблицаИдентификации.Колонки.Добавить("FAMIL", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(50));
		ТаблицаИдентификации.Колонки.Добавить("IMJA",  УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(50));
		ТаблицаИдентификации.Колонки.Добавить("OTCH",  УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(50));
		
	КонецЕсли;
	
	Для Каждого Строка Из ИсходнаяТаблица Цикл
		
		НоваяСтрока   = ТаблицаИдентификации.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		Для Сч = 1 По КоличествоУслуг Цикл
			Если Строка["LCHET_" + Сч] <> "" Тогда
				НоваяСтрока.LCHET = Префикс + Строка["LCHET_" + Сч];
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Если РежимЗагрузки Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаЛС.N,
		|	ТаблицаЛС.LCHET,
		|	ТаблицаЛС.FAMIL,
		|	ТаблицаЛС.IMJA,
		|	ТаблицаЛС.OTCH
		|ПОМЕСТИТЬ втТаблицаЛС
		|ИЗ
		|	&ТаблицаЛС КАК ТаблицаЛС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
		|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Наименование КАК Наименование
		|ПОМЕСТИТЬ втЛицевыеСчета
		|ИЗ
		|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&ДатаКонца, ) КАК КВП_ЛицевыеСчетаСрезПоследних
		|ГДЕ
		|	КВП_ЛицевыеСчетаСрезПоследних.Действует
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец,
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец.ФизЛицо
		|ПОМЕСТИТЬ втЗарегистрированные
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
		|			&ДатаКонца,
		|			ЛицевойСчет В
		|				(ВЫБРАТЬ
		|					втЛицевыеСчета.ЛицевойСчет
		|				ИЗ
		|					втЛицевыеСчета КАК втЛицевыеСчета)) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
		|ГДЕ
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо,
		|	ФИОФизическихЛицСрезПоследних.Фамилия,
		|	ФИОФизическихЛицСрезПоследних.Имя,
		|	ФИОФизическихЛицСрезПоследних.Отчество
		|ПОМЕСТИТЬ втФИОФизЛиц
		|ИЗ
		|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(
		|			&ДатаКонца,
		|			ФизическоеЛицо ССЫЛКА Справочник.ФизическиеЛица
		|				И ФизическоеЛицо В
		|					(ВЫБРАТЬ
		|						втЗарегистрированные.ЖилецФизЛицо
		|					ИЗ
		|						втЗарегистрированные КАК втЗарегистрированные)) КАК ФИОФизическихЛицСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЗарегистрированные.Жилец,
		|	ЕСТЬNULL(втФИОФизЛиц.Фамилия, """") КАК Фамилия,
		|	ЕСТЬNULL(втФИОФизЛиц.Имя, """") КАК Имя,
		|	ЕСТЬNULL(втФИОФизЛиц.Отчество, """") КАК Отчество
		|ПОМЕСТИТЬ втФИОЖильцов
		|ИЗ
		|	втЗарегистрированные КАК втЗарегистрированные
		|		ЛЕВОЕ СОЕДИНЕНИЕ втФИОФизЛиц КАК втФИОФизЛиц
		|		ПО втЗарегистрированные.ЖилецФизЛицо = втФИОФизЛиц.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТаблицаЛС.N,
		|	ЕСТЬNULL(втЛицевыеСчета.ЛицевойСчет, ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)) КАК ЛицевойСчет,
		|	ЕСТЬNULL(втФИОЖильцов.Жилец, ЗНАЧЕНИЕ(Справочник.УПЖКХ_Жильцы.ПустаяСсылка)) КАК Льготник
		|ИЗ
		|	втТаблицаЛС КАК втТаблицаЛС
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЛицевыеСчета КАК втЛицевыеСчета
		|		ПО втТаблицаЛС.LCHET = втЛицевыеСчета.Наименование
		|		ЛЕВОЕ СОЕДИНЕНИЕ втФИОЖильцов КАК втФИОЖильцов
		|		ПО втТаблицаЛС.FAMIL = втФИОЖильцов.Фамилия
		|			И втТаблицаЛС.IMJA = втФИОЖильцов.Имя
		|			И втТаблицаЛС.OTCH = втФИОЖильцов.Отчество";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаЛС.N,
		|	ТаблицаЛС.LCHET
		|ПОМЕСТИТЬ втТаблицаЛС
		|ИЗ
		|	&ТаблицаЛС КАК ТаблицаЛС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
		|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Наименование
		|ПОМЕСТИТЬ втЛицевыеСчета
		|ИЗ
		|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&ДатаКонца, ) КАК КВП_ЛицевыеСчетаСрезПоследних
		|ГДЕ
		|	КВП_ЛицевыеСчетаСрезПоследних.Действует
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втТаблицаЛС.N,
		|	ЕСТЬNULL(втЛицевыеСчета.ЛицевойСчет, ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)) КАК ЛицевойСчет
		|ИЗ
		|	втТаблицаЛС КАК втТаблицаЛС
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЛицевыеСчета КАК втЛицевыеСчета
		|		ПО втТаблицаЛС.LCHET = втЛицевыеСчета.ЛицевойСчетНаименование";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаКонца", КонецМесяца(Период));
	Запрос.УстановитьПараметр("ТаблицаЛС", ТаблицаИдентификации);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	// Информация пользователю о неудачной идентификации.
	Для Каждого Строка Из Результат Цикл
		
		Если Строка.ЛицевойСчет.Пустая() Тогда
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Для строки №" + Строка.N + " не удалось идентифицировать лицевой счет в базе!");
			
		КонецЕсли;
		
		Если РежимЗагрузки Тогда
			Если Строка.Льготник.Пустая() Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("В строке №" + Строка.N + " не удалось установить соответствие жильцу в базе!");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Загружаем в исходную таблицу результаты идентификации.
	ИсходнаяТаблица.ЗагрузитьКолонку(Результат.ВыгрузитьКолонку("ЛицевойСчет"), "ЛицевойСчет");
	
	Если РежимЗагрузки Тогда
		ИсходнаяТаблица.ЗагрузитьКолонку(Результат.ВыгрузитьКолонку("Льготник"), "Льготник");
	КонецЕсли;
	
КонецФункции // ПроизвестиИдентификациюЛицевыхСчетов()

#КонецОбласти

#Область ПрочиеПроцедуры

&НаКлиенте
// Изменяет период на форме выгрузки.
//
// Параметры:
//  Период - Дата - устанавливаемый период.
//
Процедура ОбновитьПериод(Период = Неопределено)
	
	Объект.Период = ?(Период = Неопределено, УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("РабочаяДата"), КонецМесяца(Период));
	
	Если Объект.Период = '00010101' Тогда
		Объект.Период = ТекущаяДата();
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры // ОбновитьПериод()

&НаКлиенте
// Проверяет указанный файл на существование. Если файл существует, то производит запись его имени в соответствующий реквизит
// и управляет видимостью кнопок загрузки.
//
// Параметры:
//  ПолноеИмя - Строка - полное имя проверяемого файла.
//  Режим     - Строка - наименование режима работы текущего файла: "Загрузки" или "Выгрузки".
//
Процедура ПроверитьУказанныйDBFФайл(ПолноеИмя, Режим)
	
	Файл = Новый Файл(ПолноеИмя);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьУказанныйDBFФайлКаталогСуществует", ЭтотОбъект,
												  Новый Структура("ПолноеИмя, Режим, Файл", ПолноеИмя, Режим, Файл));
	
	Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения проверки существования каталога.
Процедура ПроверитьУказанныйDBFФайлКаталогСуществует(Существует, ДополнительныеПараметры) Экспорт
	
	ПолноеИмя = ДополнительныеПараметры.ПолноеИмя;
	Режим = ДополнительныеПараметры.Режим;
	Файл = ДополнительныеПараметры.Файл;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверитьУказанныйDBFФайлЭтоФайл", ЭтотОбъект,
												  Новый Структура("ПолноеИмя, Режим, Существует", ПолноеИмя, Режим, Существует));
	
	Файл.НачатьПроверкуЭтоФайл(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения определения файла.
Процедура ПроверитьУказанныйDBFФайлЭтоФайл(ЭтоФайл, ДополнительныеПараметры) Экспорт
	
	ПолноеИмя  = ДополнительныеПараметры.ПолноеИмя;
	Режим      = ДополнительныеПараметры.Режим;
	Существует = ДополнительныеПараметры.Существует;
	
	Если Существует И ЭтоФайл Тогда
		Объект["ИмяФайла" + Режим] = ПолноеИмя;
		Элементы["ТаблицаДля" + Режим + "КнопкаЗагрузить"].Доступность = Истина;
	Иначе
		// Если была полностью удалена срока адреса файла.
		Если ПолноеИмя = "" Тогда
			Объект["ИмяФайла" + Режим] = ПолноеИмя;
		КонецЕсли;
		Элементы["ТаблицаДля" + Режим + "КнопкаЗагрузить"].Доступность = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
// Возвращает полное имя временного dbf-файла с указанным именем без расширения.
//
// Параметры:
//  ИмяФайла - Строка - имя файла без расширения.
//
// Возвращаемые параметры:
//  НовоеИмяВременногоФайла - Строка - полное имя временного dbf-файла с указанным именем без расширения.
//
Функция ПолучитьИмяВременногоDBFФайла(ИмяБезРасширения)
	
	#Если Не ВебКлиент Тогда
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("dbf");
		
		Файл = Новый Файл(ИмяВременногоФайла);
		НовоеИмяВременногоФайла = СтрЗаменить(Файл.ПолноеИмя, Файл.ИмяБезРасширения, ИмяБезРасширения);
		
		Возврат НовоеИмяВременногоФайла;
		
	#КонецЕсли
	
КонецФункции // ПолучитьИмяВременногоDBFФайла()

&НаКлиенте
// Обработчик видимости элементов формы.
Процедура УправлениеФормой()
	
	Если птРеспубликаХакасия_ТаблицаДляВыгрузки.Количество() = 0 Тогда
		Элементы.КнопкаЗаполнить.Доступность      = Ложь;
		Элементы.КнопкаВыгрузить.Доступность      = Ложь;
		Элементы.КнопкаПечатьРеестров.Доступность = Ложь;
	Иначе
		Элементы.КнопкаЗаполнить.Доступность      = Истина;
		Элементы.КнопкаВыгрузить.Доступность      = Истина;
		Элементы.КнопкаПечатьРеестров.Доступность = Истина;
	КонецЕсли;
	
	Если птРеспубликаХакасия_ТаблицаДляЗагрузки.Количество() = 0 Тогда
		Элементы.КнопкаЗаписать.Доступность = Ложь;
	Иначе
		Элементы.КнопкаЗаписать.Доступность = Истина;
	КонецЕсли;
	
	Элементы.ЛьготнаяКатегорияДляЗагрузкиИзОСЗН.Видимость = ?(Элементы.ГруппаПанель.ТекущаяСтраница.Имя = "ГруппаТаблицаЗагрузки", Истина, Ложь);
	
КонецПроцедуры // УправлениеФормой()

#КонецОбласти

















