
#Область ПрочиеПроцедурыИФункции

&НаСервере
// Процедура заполняет таблицу услуг на сервере.
//
Процедура ЗаполнитьТаблицуУслугНаСервере(Идентификатор)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Код", Идентификатор);
	
	НайденныеСтроки = Объект.ВладимирскаяОбласть_УслугиВБазе.Выгрузить(Отбор, "УслугаВБазе");
	
	Для Каждого ТекСтрока из НайденныеСтроки Цикл
		ЗаполнитьЗначенияСвойств(ТП_УслугаВБазе.Добавить(), ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Процедура считывает данные из указанного файла услуг.
//
Процедура СчитатьИзФайлаУслуги(МассивАдресов)
	
	// Запись временных данных во временный файл.
	СписокФайлов = Новый Массив;
	Для Каждого СтрокаАдреса ИЗ МассивАдресов Цикл
		врДанныеФайла = ПолучитьИзВременногоХранилища(СтрокаАдреса);
		ВременныйФайл = ПолучитьИмяВременногоФайла("DBF");
	
		// Для чтения *.dbf формата урежем имя временного файла.
		ФайлДБФ = Новый Файл(ВременныйФайл);
		СтароеИмяФайла = ФайлДБФ.ИмяБезРасширения + ".DBF";
		НовоеИмяФайла = Лев(ФайлДБФ.ИмяБезРасширения, 8) + ".DBF";
		ВременныйФайл = СтрЗаменить(ФайлДБФ.ПолноеИмя, СтароеИмяФайла, НовоеИмяФайла);
	
		врДанныеФайла.Записать(ВременныйФайл);
		
		СписокФайлов.Добавить(ВременныйФайл);
	КонецЦикла;
	
	Кодировка = КодировкаXBase.OEM;
	
	ТаблицаУслугВОСЗН = Объект.ВладимирскаяОбласть_УслугиВОСЗН.Выгрузить();
	
	Для Каждого ФайлЗагрузки Из СписокФайлов Цикл
		
		// Загрузка.
		ФайлДБФ = Новый XBase;
		ФайлДБФ.Кодировка = Кодировка;
		ФайлДБФ.ОткрытьФайл(ФайлЗагрузки, , Истина);
		Если ФайлДБФ.Открыта() = Истина Тогда
			
			ТаблицаУслугВОСЗН.Очистить();
			
			Если ФайлДБФ.КоличествоЗаписей() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Пока НЕ ФайлДБФ.ВКонце() Цикл
				
				НоваяСтрокаЗагрузки = ТаблицаУслугВОСЗН.Добавить();
				НоваяСтрокаЗагрузки.Код                = ФайлДБФ.KODUSL;
				НоваяСтрокаЗагрузки.УслугаВСправочнике = СокрЛП(ФайлДБФ.NAME);
				
				ФайлДБФ.Следующая();
			КонецЦикла;
			
		КонецЕсли;
		
		ФайлДБФ.ЗакрытьФайл();
		
	КонецЦикла;
	
	Объект.ВладимирскаяОбласть_УслугиВОСЗН.Загрузить(ТаблицаУслугВОСЗН);
	Объект.ВладимирскаяОбласть_УслугиВБазе.Очистить();
	
КонецПроцедуры // СчитатьИзФайлаУслуги()

&НаСервере
// Процедура считывает данные из указанного файла населенных пунктов.
//
Процедура СчитатьИзФайлаНаселенныеПункты(МассивАдресов)
	
	// Запись временных данных во временный файл.
	СписокФайлов = Новый Массив;
	Для Каждого СтрокаАдреса ИЗ МассивАдресов Цикл
		врДанныеФайла = ПолучитьИзВременногоХранилища(СтрокаАдреса);
		ВременныйФайл = ПолучитьИмяВременногоФайла("DBF");
	
		// Для чтения *.dbf формата урежем имя временного файла.
		ФайлДБФ = Новый Файл(ВременныйФайл);
		СтароеИмяФайла = ФайлДБФ.ИмяБезРасширения + ".DBF";
		НовоеИмяФайла = Лев(ФайлДБФ.ИмяБезРасширения, 8) + ".DBF";
		ВременныйФайл = СтрЗаменить(ФайлДБФ.ПолноеИмя, СтароеИмяФайла, НовоеИмяФайла);
	
		врДанныеФайла.Записать(ВременныйФайл);
		
		СписокФайлов.Добавить(ВременныйФайл);
	КонецЦикла;
	
	Кодировка = КодировкаXBase.OEM;
	
	ТаблицаНасПунктов = Объект.ВладимирскаяОбласть_НастройкиНаселенныхПунктов.Выгрузить();
	
	Для Каждого ФайлЗагрузки Из СписокФайлов Цикл
		
		// Загрузка.
		ФайлДБФ = Новый XBase;
		ФайлДБФ.Кодировка = Кодировка;
		ФайлДБФ.ОткрытьФайл(ФайлЗагрузки, , Истина);
		Если ФайлДБФ.Открыта() = Истина Тогда
			
			ТаблицаНасПунктов.Очистить();
			
			МассивСокрНасПунктов = СформироватьМассивСокращениеДляВладимирскойОблПоВиду(4);
			
			Если ФайлДБФ.КоличествоЗаписей() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Пока НЕ ФайлДБФ.ВКонце() Цикл
				
				НоваяСтрокаЗагрузки = ТаблицаНасПунктов.Добавить();
				НоваяСтрокаЗагрузки.Код                         = СокрЛП(ФайлДБФ.KOD);
				НоваяСтрокаЗагрузки.НаселенныйПунктВСправочнике = ВРег(НормализацияПолейАдресаОбласти(СокрЛП(ФайлДБФ.NAME), МассивСокрНасПунктов));
				
				ФайлДБФ.Следующая();
			КонецЦикла;
			
		КонецЕсли;
		
		ФайлДБФ.ЗакрытьФайл();
		
	КонецЦикла;
	
	Объект.ВладимирскаяОбласть_НастройкиНаселенныхПунктов.Загрузить(ТаблицаНасПунктов);
	
КонецПроцедуры // СчитатьИзФайлаНаселенныеПункты()

&НаСервере
// Процедура считывает данные из указанного файла улиц.
//
Процедура СчитатьИзФайлаУлицы(МассивАдресов)
	
	// Запись временных данных во временный файл.
	СписокФайлов = Новый Массив;
	Для Каждого СтрокаАдреса ИЗ МассивАдресов Цикл
		врДанныеФайла = ПолучитьИзВременногоХранилища(СтрокаАдреса);
		ВременныйФайл = ПолучитьИмяВременногоФайла("DBF");
	
		// Для чтения *.dbf формата урежем имя временного файла.
		ФайлДБФ = Новый Файл(ВременныйФайл);
		СтароеИмяФайла = ФайлДБФ.ИмяБезРасширения + ".DBF";
		НовоеИмяФайла = Лев(ФайлДБФ.ИмяБезРасширения, 8) + ".DBF";
		ВременныйФайл = СтрЗаменить(ФайлДБФ.ПолноеИмя, СтароеИмяФайла, НовоеИмяФайла);
	
		врДанныеФайла.Записать(ВременныйФайл);
		
		СписокФайлов.Добавить(ВременныйФайл);
	КонецЦикла;
	
	Кодировка = КодировкаXBase.OEM;
	
	ТаблицаУлиц = Объект.ВладимирскаяОбласть_НастройкиУлиц.Выгрузить();
	
	Для Каждого ФайлЗагрузки Из СписокФайлов Цикл
		
		// Загрузка.
		ФайлДБФ = Новый XBase;
		ФайлДБФ.Кодировка = Кодировка;
		ФайлДБФ.ОткрытьФайл(ФайлЗагрузки, , Истина);
		Если ФайлДБФ.Открыта() = Истина Тогда
			
			ТаблицаУлиц.Очистить();
			
			МассивСокрУлиц = СформироватьМассивСокращениеДляВладимирскойОблПоВиду(5);
			
			Если ФайлДБФ.КоличествоЗаписей() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Пока НЕ ФайлДБФ.ВКонце() Цикл
				
				НоваяСтрокаЗагрузки = ТаблицаУлиц.Добавить();
				НоваяСтрокаЗагрузки.КодНаселенногоПункта = СокрЛП(ФайлДБФ.KOD1);
				НоваяСтрокаЗагрузки.КодУлицы             = СокрЛП(ФайлДБФ.KOD2);
				НоваяСтрокаЗагрузки.УлицаВСправочнике    = ВРег(НормализацияПолейАдресаОбласти(СокрЛП(ФайлДБФ.NAME), МассивСокрУлиц));
				
				ФайлДБФ.Следующая();
			КонецЦикла;
			
		КонецЕсли;
		
		ФайлДБФ.ЗакрытьФайл();
		
	КонецЦикла;
	
	Объект.ВладимирскаяОбласть_НастройкиУлиц.Загрузить(ТаблицаУлиц);
	
КонецПроцедуры // СчитатьИзФайлаУлицы()

&НаСервере
// Функция сокращает название города или улицы: убирает сокращения,
// определяющие тип данного элемента адреса: "г.", "ул." и так далее.
//
// Параметры:
//  Ресурс       - Строка - элемент адреса
//
// Возвращаемое значение:
//  Строка - элемент адреса в сокращенном виде
//
Функция НормализацияПолейАдресаОбласти(Ресурс, Массив)
	
	Найден = Истина;
	
	Для Каждого Элемент Из Массив Цикл
		
		Если Прав(СокрЛП(Ресурс), СтрДлина(Элемент)) = Элемент Тогда
			ПредСимвол = Сред(СокрЛП(Ресурс), СтрДлина(СокрЛП(Ресурс)) - СтрДлина(Элемент), 1);
			
			Если ПредСимвол = " " Тогда
				Возврат СокрЛП(Лев(СокрЛП(Ресурс), СтрДлина(СокрЛП(Ресурс)) - СтрДлина(Элемент)));
			КонецЕсли;
		ИначеЕсли Лев(СокрЛП(Ресурс), СтрДлина(Элемент)) = Элемент Тогда
			СледСимвол = Сред(СокрЛП(Ресурс), СтрДлина(Элемент) + 1, 1);
			
			Если СледСимвол = " " Тогда
				Возврат СокрЛП(Сред(СокрЛП(Ресурс), СтрДлина(Элемент) + 1));
			КонецЕсли;
		Иначе
			
			Найден = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Найден = Ложь Тогда
		Возврат Ресурс;
	КонецЕсли;
	
КонецФункции

&НаСервере
// Формирует массив сокращений для Владимирской области для выбранного вида сокращения.
//
Функция СформироватьМассивСокращениеДляВладимирскойОблПоВиду(ВидСокращение)
		
	МассивСокращений = Новый Массив;
	// Для регионов.
	Если ВидСокращение = 1 Тогда
		МассивСокращений.Добавить("обл");
		// Для районов.
	ИначеЕсли ВидСокращение = 2 Тогда
		МассивСокращений.Добавить("р-н");
		МассивСокращений.Добавить("район");
		// Для городов.
	ИначеЕсли ВидСокращение = 3 Тогда
		МассивСокращений.Добавить("г");
		// Для нас.пунктов.
	ИначеЕсли ВидСокращение = 4 Тогда
		МассивСокращений.Добавить("рп");
		МассивСокращений.Добавить("п");
		МассивСокращений.Добавить("с");
		МассивСокращений.Добавить("д");
		МассивСокращений.Добавить("х");
		МассивСокращений.Добавить("ст");
		МассивСокращений.Добавить("пгт");
		МассивСокращений.Добавить("дп");
		МассивСокращений.Добавить("рзд");
		МассивСокращений.Добавить("мкр");
		МассивСокращений.Добавить("нп");
		МассивСокращений.Добавить("тер");
		МассивСокращений.Добавить("п/ст");
		МассивСокращений.Добавить("промзона");
		МассивСокращений.Добавить("снт");
		МассивСокращений.Добавить("п/о");
		МассивСокращений.Добавить("городок");
		МассивСокращений.Добавить("заимка");
		МассивСокращений.Добавить("кп");
		МассивСокращений.Добавить("ж/д_казарм");
		МассивСокращений.Добавить("г");
		МассивСокращений.Добавить("обл");
		МассивСокращений.Добавить("дер");
		МассивСокращений.Добавить("рп.");
		МассивСокращений.Добавить("п.");
		МассивСокращений.Добавить("с.");
		МассивСокращений.Добавить("д.");
		МассивСокращений.Добавить("х.");
		МассивСокращений.Добавить("ст.");
		МассивСокращений.Добавить("пгт.");
		МассивСокращений.Добавить("дп.");
		МассивСокращений.Добавить("рзд.");
		МассивСокращений.Добавить("мкр.");
		МассивСокращений.Добавить("нп.");
		МассивСокращений.Добавить("тер.");
		МассивСокращений.Добавить("п/ст.");
		МассивСокращений.Добавить("промзона.");
		МассивСокращений.Добавить("снт.");
		МассивСокращений.Добавить("п/о.");
		МассивСокращений.Добавить("городок.");
		МассивСокращений.Добавить("заимка.");
		МассивСокращений.Добавить("кп.");
		МассивСокращений.Добавить("ж/д_казарм.");
		МассивСокращений.Добавить("г.");
		МассивСокращений.Добавить("обл.");
		МассивСокращений.Добавить("дер.");
		// Для улиц.
	ИначеЕсли ВидСокращение = 5 Тогда
		МассивСокращений.Добавить("ул");
		МассивСокращений.Добавить("тер");
		МассивСокращений.Добавить("пл");
		МассивСокращений.Добавить("пер");
		МассивСокращений.Добавить("снт");
		МассивСокращений.Добавить("проезд");
		МассивСокращений.Добавить("б-р");
		МассивСокращений.Добавить("туп");
		МассивСокращений.Добавить("п");
		МассивСокращений.Добавить("ш");
		МассивСокращений.Добавить("пр-кт");
		МассивСокращений.Добавить("тракт");
		МассивСокращений.Добавить("сквер");
		МассивСокращений.Добавить("ст");
		МассивСокращений.Добавить("наб");
		МассивСокращений.Добавить("км");
		МассивСокращений.Добавить("ж/д_ст");
		МассивСокращений.Добавить("сад");
		МассивСокращений.Добавить("парк");
		МассивСокращений.Добавить("уч-к");
		МассивСокращений.Добавить("мкр");
		МассивСокращений.Добавить("городок");
		МассивСокращений.Добавить("кв-л");
		МассивСокращений.Добавить("нп");
		МассивСокращений.Добавить("остров");
		МассивСокращений.Добавить("гск");
		МассивСокращений.Добавить("линия");
		МассивСокращений.Добавить("рзд");
		МассивСокращений.Добавить("стр");
		МассивСокращений.Добавить("аллея");
		МассивСокращений.Добавить("казарма");
		МассивСокращений.Добавить("ж/д_рзд");
		МассивСокращений.Добавить("д");
		МассивСокращений.Добавить("ж/д_казарм");
		МассивСокращений.Добавить("ж/д_будка");
		МассивСокращений.Добавить("высел");
		МассивСокращений.Добавить("ул.");
		МассивСокращений.Добавить("тер.");
		МассивСокращений.Добавить("пл.");
		МассивСокращений.Добавить("пер.");
		МассивСокращений.Добавить("снт.");
		МассивСокращений.Добавить("проезд.");
		МассивСокращений.Добавить("б-р.");
		МассивСокращений.Добавить("туп.");
		МассивСокращений.Добавить("п.");
		МассивСокращений.Добавить("ш.");
		МассивСокращений.Добавить("пр-кт.");
		МассивСокращений.Добавить("тракт.");
		МассивСокращений.Добавить("сквер.");
		МассивСокращений.Добавить("ст.");
		МассивСокращений.Добавить("наб.");
		МассивСокращений.Добавить("км.");
		МассивСокращений.Добавить("ж/д_ст.");
		МассивСокращений.Добавить("сад.");
		МассивСокращений.Добавить("парк.");
		МассивСокращений.Добавить("уч-к.");
		МассивСокращений.Добавить("мкр.");
		МассивСокращений.Добавить("городок.");
		МассивСокращений.Добавить("кв-л.");
		МассивСокращений.Добавить("нп.");
		МассивСокращений.Добавить("остров.");
		МассивСокращений.Добавить("гск.");
		МассивСокращений.Добавить("линия.");
		МассивСокращений.Добавить("рзд.");
		МассивСокращений.Добавить("стр.");
		МассивСокращений.Добавить("аллея.");
		МассивСокращений.Добавить("казарма.");
		МассивСокращений.Добавить("ж/д_рзд.");
		МассивСокращений.Добавить("д.");
		МассивСокращений.Добавить("ж/д_казарм.");
		МассивСокращений.Добавить("ж/д_будка.");
		МассивСокращений.Добавить("высел.");
	КонецЕсли;
	
	Возврат МассивСокращений;
	
КонецФункции // СформироватьМассивСокращениеДляСвердловскойОблПоВиду()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// РАБОТА С ВРЕМЕННЫМ ХРАНИЛИЩЕМ

#Область РаботаСВременнымХранилищем

&НаСервере
// Помещает настройки во временное хранилище.
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ФайлЗагрузкиНаселенныхПунктов",                  ФайлЗагрузкиНаселенныхПунктов);
	СтруктураНастроек.Вставить("ФайлЗагрузкиУлиц",                               ФайлЗагрузкиУлиц);
	СтруктураНастроек.Вставить("ФайлЗагрузкиУслуг",                              ФайлЗагрузкиУслуг);
	СтруктураНастроек.Вставить("ВыводРеквизитаЛицевогоСчета",                    Объект.ВыводРеквизитаЛицевогоСчета);
	СтруктураНастроек.Вставить("ВладимирскаяОбласть_УслугиВОСЗН",                Объект.ВладимирскаяОбласть_УслугиВОСЗН.Выгрузить());
	СтруктураНастроек.Вставить("ВладимирскаяОбласть_УслугиВБазе",                Объект.ВладимирскаяОбласть_УслугиВБазе.Выгрузить());
	СтруктураНастроек.Вставить("ВладимирскаяОбласть_НастройкиНаселенныхПунктов", Объект.ВладимирскаяОбласть_НастройкиНаселенныхПунктов.Выгрузить());
	СтруктураНастроек.Вставить("ВладимирскаяОбласть_НастройкиУлиц",              Объект.ВладимирскаяОбласть_НастройкиУлиц.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПризнакУдаления = Ложь;
	
	// Получаем настройки из хранилища.
	Если Параметры.Свойство("АдресНастроекВХранилище") И Не Параметры.АдресНастроекВХранилище = Неопределено Тогда
		
		СтруктураНастроек = ПолучитьИзВременногоХранилища(Параметры.АдресНастроекВХранилище);
		
		Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
			
			СтруктураНастроек.Свойство("ФайлЗагрузкиНаселенныхПунктов", ФайлЗагрузкиНаселенныхПунктов);
			СтруктураНастроек.Свойство("ФайлЗагрузкиУлиц",              ФайлЗагрузкиУлиц);
			СтруктураНастроек.Свойство("ФайлЗагрузкиУслуг",             ФайлЗагрузкиУслуг);
			СтруктураНастроек.Свойство("ВыводРеквизитаЛицевогоСчета",   Объект.ВыводРеквизитаЛицевогоСчета);
			
			Если СтруктураНастроек.Свойство("ВладимирскаяОбласть_УслугиВОСЗН") Тогда
				Объект.ВладимирскаяОбласть_УслугиВОСЗН.Загрузить(СтруктураНастроек.ВладимирскаяОбласть_УслугиВОСЗН);
			КонецЕсли;
			
			Если СтруктураНастроек.Свойство("ВладимирскаяОбласть_УслугиВБазе") Тогда
				Объект.ВладимирскаяОбласть_УслугиВБазе.Загрузить(СтруктураНастроек.ВладимирскаяОбласть_УслугиВБазе);
			КонецЕсли;
			
			Если СтруктураНастроек.Свойство("ВладимирскаяОбласть_НастройкиНаселенныхПунктов") Тогда
				Объект.ВладимирскаяОбласть_НастройкиНаселенныхПунктов.Загрузить(СтруктураНастроек.ВладимирскаяОбласть_НастройкиНаселенныхПунктов);
			КонецЕсли;
			
			Если СтруктураНастроек.Свойство("ВладимирскаяОбласть_НастройкиУлиц") Тогда
				Объект.ВладимирскаяОбласть_НастройкиУлиц.Загрузить(СтруктураНастроек.ВладимирскаяОбласть_НастройкиУлиц);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Блокировка командной панели "КП_УслугиВБазе".
	Если Объект.ВладимирскаяОбласть_УслугиВОСЗН.Количество() = 0 Тогда
		Элементы.ТП_УслугаВБазе.Доступность = Ложь;
	Иначе
		Элементы.ТП_УслугаВБазе.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "КомандаСохранить".
Процедура КомандаСохранить(Команда)
	
	Закрыть(ПоместитьНастройкиВХранилище());
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаЗаполнитьУслуги".
Процедура КомандаЗаполнитьУслуги(Команда)
	
	Если ПустаяСтрока(ФайлЗагрузкиУслуг) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указан файл загрузки услуг!");
		Возврат;
	КонецЕсли;
	
	ФайлНаДиске = Новый Файл(ФайлЗагрузкиУслуг);
	ФайлНаДиске.НачатьПроверкуСуществования(Новый ОписаниеОповещения("КомандаЗаполнитьУслугиКаталогНаДискеСуществуетЗавершение", ЭтотОбъект));
	
КонецПроцедуры // КомандаЗаполнитьУслуги()

&НаКлиенте
// Процедура - обработчик завершения работы процедуры "НачатьПроверкуСуществования".
//
Процедура КомандаЗаполнитьУслугиКаталогНаДискеСуществуетЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	Если НЕ Существует Тогда
		ПоказатьПредупреждение(Неопределено, "Файл загрузки услуг не найден!");
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = "";
	
	НачатьПомещениеФайла(Новый ОписаниеОповещения("ОбработатьПомещениеФайлаУслуг", ЭтаФорма),
						 ПутьКФайлу, ФайлЗагрузкиУслуг, Ложь);
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата помещения файла, вызванного в процедуре "КомандаЗаполнитьУслуги()".
Процедура ОбработатьПомещениеФайлаУслуг(Результат, ПутьКФайлу, ВыбранноеИмяФайла, ДопПараметры) Экспорт
	
	МассивАдресов = Новый Массив;
	МассивАдресов.Добавить(ПутьКФайлу);
	
	Если Объект.ВладимирскаяОбласть_УслугиВОСЗН.Количество() > 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("КомандаЗаполнитьУслугиЗавершение", ЭтотОбъект, Новый Структура("МассивАдресов", МассивАдресов));
		
		ТекстВопроса = "Перед заполением таблица услуг будет очищена. Заполнить?";
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		СчитатьИзФайлаУслуги(МассивАдресов);
		// Блокировка командной панели "КП_УслугиВБазе".
		Если Объект.ВладимирскаяОбласть_УслугиВОСЗН.Количество() = 0 Тогда
			Элементы.ТП_УслугаВБазе.Доступность = Ложь;
		Иначе
			Элементы.ТП_УслугаВБазе.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьПомещениеФайла()

&НаКлиенте
// Обработчик результата опроса команды "КомандаЗаполнитьУслугиЗавершение".
Процедура КомандаЗаполнитьУслугиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СчитатьИзФайлаУслуги(ДополнительныеПараметры.МассивАдресов);
		// Блокировка командной панели "КП_УслугиВБазе".
		Если Объект.ВладимирскаяОбласть_УслугиВОСЗН.Количество() = 0 Тогда
			Элементы.ТП_УслугаВБазе.Доступность = Ложь;
		Иначе
			Элементы.ТП_УслугаВБазе.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьВсеЗавершение()

&НаКлиенте
// Обработчик команды "КомандаЗагрузитьИзФайлаНаселенныеПункты".
Процедура КомандаЗагрузитьИзФайлаНаселенныеПункты(Команда)
	
	Если ПустаяСтрока(ФайлЗагрузкиНаселенныхПунктов) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указан файл загрузки населенных пунктов!");
		Возврат;
	КонецЕсли;
	
	ФайлНаДиске = Новый Файл(ФайлЗагрузкиНаселенныхПунктов);
	ФайлНаДиске.НачатьПроверкуСуществования(Новый ОписаниеОповещения("КомандаЗагрузитьИзФайлаНаселенныеПунктыКаталогНаДискеСуществуетЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик завершения работы процедуры "НачатьПроверкуСуществования".
//
Процедура КомандаЗагрузитьИзФайлаНаселенныеПунктыКаталогНаДискеСуществуетЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	Если НЕ Существует Тогда
		ПоказатьПредупреждение(Неопределено, "Файл загрузки населенных пунктов не найден!");
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = "";
	
	НачатьПомещениеФайла(Новый ОписаниеОповещения("ОбработатьПомещениеФайлаНаселенныхПунктов", ЭтаФорма),
						 ПутьКФайлу, ФайлЗагрузкиНаселенныхПунктов, Ложь);
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата помещения файла, вызванного в процедуре "КомандаЗагрузитьИзФайлаНаселенныеПункты()".
Процедура ОбработатьПомещениеФайлаНаселенныхПунктов(Результат, ПутьКФайлу, ВыбранноеИмяФайла, ДопПараметры) Экспорт
	
	МассивАдресов = Новый Массив;
	МассивАдресов.Добавить(ПутьКФайлу);
	
	Если Объект.ВладимирскаяОбласть_НастройкиНаселенныхПунктов.Количество() > 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("КомандаЗаполнитьНасПунктыЗавершение", ЭтотОбъект, Новый Структура("МассивАдресов", МассивАдресов));
		
		ТекстВопроса = "Перед заполением таблица населенных пунктов будет очищена. Заполнить?";
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		СчитатьИзФайлаНаселенныеПункты(МассивАдресов);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьПомещениеФайла()

&НаКлиенте
// Обработчик результата опроса команды "КомандаЗаполнитьНасПунктыЗавершение".
Процедура КомандаЗаполнитьНасПунктыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СчитатьИзФайлаНаселенныеПункты(ДополнительныеПараметры.МассивАдресов);
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьВсеЗавершение()

&НаКлиенте
// Обработчик команды "КомандаЗагрузитьИзФайлаУлицы".
Процедура КомандаЗагрузитьИзФайлаУлицы(Команда)
	
	Если ПустаяСтрока(ФайлЗагрузкиУлиц) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указан файл загрузки улиц!");
		Возврат;
	КонецЕсли;
	
	ФайлНаДиске = Новый Файл(ФайлЗагрузкиУлиц);
	ФайлНаДиске.НачатьПроверкуСуществования(Новый ОписаниеОповещения("КомандаЗагрузитьИзФайлаУлицыКаталогНаДискеСуществуетЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик завершения работы процедуры "НачатьПроверкуСуществования".
//
Процедура КомандаЗагрузитьИзФайлаУлицыКаталогНаДискеСуществуетЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	Если НЕ Существует Тогда
		ПоказатьПредупреждение(Неопределено, "Файл загрузки улиц не найден!");
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = "";
	
	НачатьПомещениеФайла(Новый ОписаниеОповещения("ОбработатьПомещениеФайлаУлиц", ЭтаФорма),
						 ПутьКФайлу, ФайлЗагрузкиУлиц, Ложь);
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата помещения файла, вызванного в процедуре "КомандаЗагрузитьИзФайлаУлицы()".
Процедура ОбработатьПомещениеФайлаУлиц(Результат, ПутьКФайлу, ВыбранноеИмяФайла, ДопПараметры) Экспорт
	
	МассивАдресов = Новый Массив;
	МассивАдресов.Добавить(ПутьКФайлу);
	
	Если Объект.ВладимирскаяОбласть_НастройкиУлиц.Количество() > 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("КомандаЗаполнитьУлицыЗавершение", ЭтотОбъект, Новый Структура("МассивАдресов", МассивАдресов));
		
		ТекстВопроса = "Перед заполением таблица улиц будет очищена. Заполнить?";
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		СчитатьИзФайлаУлицы(МассивАдресов);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьПомещениеФайла()

&НаКлиенте
// Обработчик результата опроса команды "КомандаЗаполнитьУлицыЗавершение".
Процедура КомандаЗаполнитьУлицыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СчитатьИзФайлаУлицы(ДополнительныеПараметры.МассивАдресов);
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьВсеЗавершение()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" табличного поля "ТП_УслугаВБазе".
//
Процедура ТП_УслугаВБазеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Устанавливаем запрет на добавление строк копированием.
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" табличного поля "ТП_УслугаВБазе".
//
Процедура ТП_УслугаВБазеПередУдалением(Элемент, Отказ)
	
	Если ПризнакУдаления Тогда
		Отказ = Истина;
		ПризнакУдаления = Ложь;
	Иначе
		// При удалении строки удаляем соответствующие записи в ВладимирскаяОбласть_УслугиВБазе.
		УслугаВБазе              = Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе;
		ИдентификаторУслугиВОСЗН = Элементы.ВладимирскаяОбласть_УслугиВОСЗН.ТекущиеДанные.Код;
		УслугаВСправочнике       = Элементы.ВладимирскаяОбласть_УслугиВОСЗН.ТекущиеДанные.УслугаВСправочнике;
		
		Отбор = Новый Структура;
		Отбор.Вставить("УслугаВБазе",        УслугаВБазе);
		Отбор.Вставить("Код",                ИдентификаторУслугиВОСЗН);
		Отбор.Вставить("УслугаВСправочнике", УслугаВСправочнике);
		
		СтрокиУдаления = Объект.ВладимирскаяОбласть_УслугиВБазе.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
			Объект.ВладимирскаяОбласть_УслугиВБазе.Удалить(СтрокаУдаления);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередОкончаниемРедактирования" таблицы "УслугаВБазе".
//
Процедура ТП_УслугаВБазеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Добавление незаполненных полей недопустимо!");
		ПризнакУдаления = Истина;
		ТП_УслугаВБазе.Удалить(Элементы.ТП_УслугаВБазе.ТекущиеДанные);
		
		Если ЗначениеЗаполнено(ПредыдущаяУслуга) Тогда
			Идентификатор   = Элементы.ВладимирскаяОбласть_УслугиВОСЗН.ТекущиеДанные.Код;
			ПризнакУдаления = Истина;
			Отбор = Новый Структура;
			Отбор.Вставить("Код",         Идентификатор);
			Отбор.Вставить("УслугаВБазе", ПредыдущаяУслуга);
			
			СтрокиУдаления = Объект.ВладимирскаяОбласть_УслугиВБазе.НайтиСтроки(Отбор);
			
			Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
				Объект.ВладимирскаяОбласть_УслугиВБазе.Удалить(СтрокаУдаления);
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриОкончанииРедактирования" табличного поля "ТП_УслугаВБазе".
//
Процедура ТП_УслугаВБазеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		// Добавляем запись в ВладимирскаяОбласть_УслугиВБазе.
		УслугаВБазе              = Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе;
		ИдентификаторУслугиВОСЗН = Элементы.ВладимирскаяОбласть_УслугиВОСЗН.ТекущиеДанные.Код;
		УслугаВОСЗН              = Элементы.ВладимирскаяОбласть_УслугиВОСЗН.ТекущиеДанные.УслугаВСправочнике;
		
		Если НоваяСтрока Тогда
			НоваяСтрокаСоответствия                    = Объект.ВладимирскаяОбласть_УслугиВБазе.Добавить();
			НоваяСтрокаСоответствия.УслугаВБазе        = УслугаВБазе;
			НоваяСтрокаСоответствия.Код                = ИдентификаторУслугиВОСЗН;
			НоваяСтрокаСоответствия.УслугаВСправочнике = УслугаВОСЗН;
		Иначе
			Если НЕ ПредыдущаяУслуга = УслугаВБазе Тогда
				Отбор = Новый Структура;
				Отбор.Вставить("Код",         ИдентификаторУслугиВОСЗН);
				Отбор.Вставить("УслугаВБазе", ПредыдущаяУслуга);
				
				НайденнаяСтрока = Объект.ВладимирскаяОбласть_УслугиВБазе.НайтиСтроки(Отбор);
				Если НайденнаяСтрока.Количество() = 1 Тогда
					НайденнаяСтрока[0].УслугаВБазе = УслугаВБазе;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриНачалеРедактирования" табличного поля "ТП_УслугаВБазе".
//
Процедура ТП_УслугаВБазеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// Запоминаем предыдущее значение перезаписываемой строки.
	Если НЕ НоваяСтрока Тогда
		ПредыдущаяУслуга = Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "УслугаВБазе" таблицы "Услуги в Базе".
//
Процедура ТП_УслугаВБазеУслугаВБазеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Список уже выбранных услуг по данной услуге в ОСЗН.
	СписокВыбранныхУслуг = Новый СписокЗначений;
	СтрокиВыбранныхУслуг = Объект.ВладимирскаяОбласть_УслугиВБазе.НайтиСтроки(Новый Структура("Код", Элементы.ВладимирскаяОбласть_УслугиВОСЗН.ТекущиеДанные.Код));
	Для Каждого СтрокаВыбраннойУслуги Из СтрокиВыбранныхУслуг Цикл
		СписокВыбранныхУслуг.Добавить(СтрокаВыбраннойУслуги.УслугаВБазе);
	КонецЦикла;
	
	ВидСравненияВОтборе = ВидСравненияКомпоновкиДанных.НеВСписке;
	
	Форма = ПолучитьФорму("Справочник.КВП_Услуги.ФормаВыбора", Новый Структура("ТекущаяСтрока", Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе), Элемент);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Форма.Список.КомпоновщикНастроек.Настройки.Отбор, "Ссылка", СписокВыбранныхУслуг,
															ВидСравненияКомпоновкиДанных.НеВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" табличного поля "Услуги в ОСЗН".
//
Процедура ВладимирскаяОбласть_УслугиВОСЗНПриАктивизацииСтроки(Элемент)
	
	// При активации строки УслугаВОСЗН, загружаем соответствия в УслугаВБазе. 
	ТП_УслугаВБазе.Очистить();
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		Идентификатор = Элемент.ТекущиеДанные.Код;
		ЗаполнитьТаблицуУслугНаСервере(Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Файл загрузки услуг".
//
Процедура ФайлЗагрузкиУслугНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр                      = "Файл данных (*.dbf)|*.dbf";
	ДиалогВыбораФайла.Расширение                  = "dbf";
	ДиалогВыбораФайла.Заголовок                   = "Выберите файл справочника услуг";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	ДиалогВыбораФайла.ПолноеИмяФайла              = ФайлЗагрузкиУслуг;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ФайлЗагрузкиУслугНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла)));
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик результата работы диалога выбора файла.
//
Процедура ФайлЗагрузкиУслугНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ФайлЗагрузкиУслуг = ДиалогВыбораФайла.ПолноеИмяФайла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "Открытие" поля ввода "Файл загрузки услуг".
//
Процедура ФайлЗагрузкиУслугОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НачатьЗапускПриложения(Новый ОписаниеОповещения("ФайлЗагрузкиОткрытиеЗавершение", ЭтотОбъект), ФайлЗагрузкиУслуг);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик результата запуска приложения
//
Процедура ФайлЗагрузкиОткрытиеЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	// Заглушка, т.к. в НачатьЗапускПриложения первый параметр обязательный
	ЭтаПеременнаяЧтобыНеРугаласьПроверкаКонфигурацииНаПустойОбработчик = Неопределено;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Файл загрузки населенных пунктов".
//
Процедура ФайлЗагрузкиНаселенныхПунктовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр                      = "Файл данных (*.dbf)|*.dbf";
	ДиалогВыбораФайла.Расширение                  = "dbf";
	ДиалогВыбораФайла.Заголовок                   = "Выберите файл справочника населенных пунктов";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	ДиалогВыбораФайла.ПолноеИмяФайла              = ФайлЗагрузкиНаселенныхПунктов;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ФайлЗагрузкиНаселенныхПунктовНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла)));
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик результата работы диалога выбора файла.
//
Процедура ФайлЗагрузкиНаселенныхПунктовНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ФайлЗагрузкиНаселенныхПунктов = ДиалогВыбораФайла.ПолноеИмяФайла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "Открытие" поля ввода "Файл загрузки населенных пунктов".
//
Процедура ФайлЗагрузкиНаселенныхПунктовОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НачатьЗапускПриложения(Новый ОписаниеОповещения("ФайлЗагрузкиОткрытиеЗавершение", ЭтотОбъект), ФайлЗагрузкиНаселенныхПунктов);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Файл загрузки улиц".
//
Процедура ФайлЗагрузкиУлицНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр                      = "Файл данных (*.dbf)|*.dbf";
	ДиалогВыбораФайла.Расширение                  = "dbf";
	ДиалогВыбораФайла.Заголовок                   = "Выберите файл справочника улиц";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	ДиалогВыбораФайла.ПолноеИмяФайла              = ФайлЗагрузкиУлиц;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ФайлЗагрузкиУлицНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла)));
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик результата работы диалога выбора файла.
//
Процедура ФайлЗагрузкиУлицНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ФайлЗагрузкиУлиц = ДиалогВыбораФайла.ПолноеИмяФайла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "Открытие" поля ввода "Файл загрузки улиц".
//
Процедура ФайлЗагрузкиУлицОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НачатьЗапускПриложения(Новый ОписаниеОповещения("ФайлЗагрузкиОткрытиеЗавершение", ЭтотОбъект), ФайлЗагрузкиУлиц);
	
КонецПроцедуры

#КонецОбласти
