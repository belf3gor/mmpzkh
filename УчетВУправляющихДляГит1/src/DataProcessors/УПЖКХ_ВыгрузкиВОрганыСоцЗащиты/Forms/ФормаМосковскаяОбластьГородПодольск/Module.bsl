
//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область События_формы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ОбновитьПериод();
	
	ИнициализацияРеквизитов();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьНастройкиНаСервере();
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область Период

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Модифицированность);
	
КонецПроцедуры // ПериодСтрокойПриИзменении()

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры // ПериодСтрокойНачалоВыбора()

&НаКлиенте
// Обработчик события "Регулирование" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Направление, Модифицированность);
	
КонецПроцедуры // ПериодСтрокойРегулирование()

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодСтрокойАвтоПодбор()

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодСтрокойОкончаниеВводаТекста()

#КонецОбласти //ПериодСтрокой

#Область Каталог_выгрузки

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ИмяФайлаЗагрузки".
//
Процедура ИмяКаталогаВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла                             = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Заголовок                   = "Выбор каталога для выгрузки";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ВыборФайлаЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		Объект.ИмяКаталогаВыгрузки = ВыбранныеФайлы[0];
	КонецЕсли;
	
КонецПроцедуры // ИмяФайлаВыгрузкиНачалоВыбора()

&НаКлиенте
// Обработчик события "Открытие" поля "ИмяФайлаЗагрузки".
//
Процедура ИмяКаталогаВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Файл = Новый Файл(Объект.ИмяКаталогаВыгрузки);
	
	ДополнительныеПараметры = Новый Структура("Файл", Файл);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаНаСуществованиеФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаНаСуществованиеФайлаЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	Файл = ДополнительныеПараметры.Файл;
	
	Если Существует Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаНаКаталогЗавершение", ЭтотОбъект);
		
		Файл.НачатьПроверкуЭтоКаталог(ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаНаКаталогЗавершение(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Если ЭтоКаталог Тогда
		УПЖКХ_ОбщегоНазначенияКлиент.ОткрытьСтраницуВБраузере(Объект.ИмяКаталогаВыгрузки);
	КонецЕсли;
	
КонецПроцедуры // ИмяФайлаВыгрузкиОткрытие()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область Команды

&НаКлиенте
// Процедура - обработчик команды "Заполнить".
Процедура КомандаЗаполнить(Команда)
	
	Отказ = Ложь;
	
	Если Объект.Организация.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указана организация.", Отказ);
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Объект.МосковскаяОбластьГородПодольск_ТаблицаСоответствия Цикл
		Если ПустаяСтрока(ТекСтрока.УслугаВОСЗ) Тогда
			ТекстОшибки = "В строке № " + ТекСтрока.НомерСтроки + " таблицы соответствия услуг на форме Настройки не задано наименование услуги в ОСЗ.";
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки, Отказ);
		КонецЕсли;
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Предупреждаем об очистке таблицы сведений перед загрузкой данных.
	Если Объект.МосковскаяОбластьГородПодольск_ТаблицаСведений.Количество() > 0 Тогда
		ПоказатьВопрос(	Новый ОписаниеОповещения("ОбработатьРезультатВопросаОбОчисткеТаблицыСведений", ЭтаФорма),
		"Перед заполнением таблица сведений будет очищена. Продолжить?",
		РежимДиалогаВопрос.ДаНет,,
		КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	КомандаЗаполнитьПродолжение();
	
КонецПроцедуры

&НаКлиенте
// Открывает форму настроек.
Процедура ОткрытьФормуНастройки(Команда)
	
	СтруктураПараметров = Новый Структура("АдресХранилищаНастроек", ПолучитьАдресХранилищаНастроек());
	
	ОткрытьФорму("Обработка.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты.Форма.МосковскаяОбластьГородПодольск_ФормаНастройки",
	СтруктураПараметров,
	ЭтотОбъект,,,,
	Новый ОписаниеОповещения("ОбновитьНастройки", ЭтаФорма, СтруктураПараметров),
	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды "Выгрузить".
Процедура КомандаВыгрузить(Команда)
	
	Если Объект.МосковскаяОбластьГородПодольск_ТаблицаСведений.Количество() > 0 Тогда
		
		Если ПустаяСтрока(Объект.ИмяКаталогаВыгрузки) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Путь к каталогу не указан.");
			Возврат;
		КонецЕсли;
		
		ИмяФайла = "" + Объект.ИмяКаталогаВыгрузки + "\" + ПериодСтрокой + ".xls";
		
		ТабличныйДокумент = ПодготовитьДанныеДляВыгрузки();
		
		ТабличныйДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.XLS);
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Выгрузка завершена.");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьДанныеДляВыгрузки()
	
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("МосковскаяОбластьГородПодольск_Макет");
	
	врТаблицаСведений = Объект.МосковскаяОбластьГородПодольск_ТаблицаСведений.Выгрузить();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
	ТабличныйДокумент.Вывести(ОбластьЗаголовок);
	
	Для Каждого текСтрока Из врТаблицаСведений Цикл
		
		ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаТаблицы");
		ОбластьСтрока.Параметры.Заполнить(текСтрока);
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНЦИИ

#Область Вспомогательные_механизмы

&НаСервере
// Возвращает адрес временного хранилища настроек.
&НаСервере
Функция ПолучитьАдресХранилищаНастроек()
	
	Настройки = Новый Структура;
	Настройки.Вставить("ТаблицаСоответствия",  Объект.МосковскаяОбластьГородПодольск_ТаблицаСоответствия.Выгрузить());
	Настройки.Вставить("ТаблицаПорядокЗданий", Объект.МосковскаяОбластьГородПодольск_ПорядокЗданий.Выгрузить());
	Настройки.Вставить("СписокУслугВОСЗ",      ПолучитьСписокУслугВОСЗНаСервере());
	
	Возврат ПоместитьВоВременноеХранилище(Настройки, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
// Обновляет данные обработки.
Процедура ОбновитьНастройкиНаСервере(Адрес)
	
	Настройки = ПолучитьИзВременногоХранилища(Адрес);
	
	ТаблицаСоответствия = Настройки.ТаблицаСоответствия;
	Если ТаблицаСоответствия.Количество() > 0 Тогда
		Объект.МосковскаяОбластьГородПодольск_ТаблицаСоответствия.Загрузить(ТаблицаСоответствия);
	КонецЕсли;
	
	ПорядокЗданий = Настройки.ТаблицаПорядокЗданий;
	Если ПорядокЗданий.Количество() > 0 Тогда
		Объект.МосковскаяОбластьГородПодольск_ПорядокЗданий.Загрузить(ПорядокЗданий);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик закрытия окна формы настройки.
Процедура ОбновитьНастройки(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьНастройкиНаСервере(ДополнительныеПараметры.АдресХранилищаНастроек);
	
КонецПроцедуры

&НаСервере
// Изменяет период на форме выгрузки.
//
// Параметры:
//  Период - Дата - устанавливаемый период.
//
Процедура ОбновитьПериод(Период = Неопределено)
	
	Объект.Период = ?(Период = Неопределено, УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("РабочаяДата"), КонецМесяца(Период));
	
	Если Объект.Период = '00010101' Тогда
		Объект.Период = ТекущаяДата();
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры // ОбновитьПериод()

&НаСервере
// Процедура восстанавливает сохраненные данные.
Процедура ИнициализацияРеквизитов()
	
	Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
	СтруктураПараметров = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("ПараметрыВыгрузкиВОСЗ_МосковскаяОбластьГородПодольск", "ПараметрыВыгрузки");
	
	врПорядокЗданий       = Объект.МосковскаяОбластьГородПодольск_ПорядокЗданий.Выгрузить().СкопироватьКолонки();
	врТаблицаСоответствия = Объект.МосковскаяОбластьГородПодольск_ТаблицаСоответствия.Выгрузить().СкопироватьКолонки();
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		СтруктураПараметров.Свойство("ИмяКаталогаВыгрузки", Объект.ИмяКаталогаВыгрузки);
		СтруктураПараметров.Свойство("ПорядокЗданий",       врПорядокЗданий);
		СтруктураПараметров.Свойство("ТаблицаСоответствия", врТаблицаСоответствия);
	КонецЕсли;
	
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	
	ОбъектОбработки.МосковскаяОбластьГородПодольск_АктуализироватьТаблицуПорядокЗданий(врПорядокЗданий);
	Объект.МосковскаяОбластьГородПодольск_ПорядокЗданий.Очистить();
	Объект.МосковскаяОбластьГородПодольск_ПорядокЗданий.Загрузить(врПорядокЗданий);
	
	ОбъектОбработки.МосковскаяОбластьГородПодольск_АктуализироватьТаблицуСоответствияУслуг(врТаблицаСоответствия);
	Объект.МосковскаяОбластьГородПодольск_ТаблицаСоответствия.Очистить();
	Объект.МосковскаяОбластьГородПодольск_ТаблицаСоответствия.Загрузить(врТаблицаСоответствия);
	
КонецПроцедуры

&НаСервере
// Процедура сохранения настроек.
Процедура СохранитьНастройкиНаСервере()
	
	СтруктураПараметров = Новый Структура;
	
	ТаблицаСоответствия = Объект.МосковскаяОбластьГородПодольск_ТаблицаСоответствия.Выгрузить();
	ПорядокЗданий       = Объект.МосковскаяОбластьГородПодольск_ПорядокЗданий.Выгрузить();
	
	СтруктураПараметров.Вставить("ИмяКаталогаВыгрузки", Объект.ИмяКаталогаВыгрузки);
	СтруктураПараметров.Вставить("ТаблицаСоответствия", ТаблицаСоответствия);
	СтруктураПараметров.Вставить("ПорядокЗданий",       ПорядокЗданий);
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("ПараметрыВыгрузкиВОСЗ_МосковскаяОбластьГородПодольск", "ПараметрыВыгрузки", СтруктураПараметров);
	
КонецПроцедуры // СохранитьНастройкиНаСервере()

&НаСервере
// Процедура вызывает механизм получения списка услуг в ОСЗ.
Функция ПолучитьСписокУслугВОСЗНаСервере()
	
	Возврат РеквизитФормыВЗначение("Объект").МосковскаяОбластьГородПодольск_ПолучитьСписокНаименованийУслугВОСЗН();
	
КонецФункции

#Область Механизмы_заполнения_таблицы_сведений

&НаКлиенте
// Обработчик результата вопроса об очистке таблицы обработки.
Процедура ОбработатьРезультатВопросаОбОчисткеТаблицыСведений(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьНаСервере();
	
КонецПроцедуры

&НаКлиенте
// Процедура вызывает механизхм заполнения таблицы сведений.
Процедура КомандаЗаполнитьПродолжение()
	
	ЗаполнитьНаСервере();
	
КонецПроцедуры

&НаСервере
// Заполняет таблицу сведений для выгрузки.
Процедура ЗаполнитьНаСервере()
	
	Объект.МосковскаяОбластьГородПодольск_ТаблицаСведений.Очистить();
	
	ОбъектОбработки = РеквизитФормыВЗначение("Объект");
	
	ДеревоНачислений = ПолучитьДеревоНачислений();
	
	Если ДеревоНачислений.Строки.Количество() > 0 Тогда
		
		НаименованиеОрганизации = СокрЛП(Объект.Организация);
		ГодПериода              = Формат(Объект.Период, "ДФ=yyyy");
		МесяцПериода            = Формат(Объект.Период, "ДФ=M");
		СписокУслугВОСЗ         = ОбъектОбработки.МосковскаяОбластьГородПодольск_ПолучитьСписокНаименованийУслугВОСЗН();
		
		Для Каждого СтрокаДерева Из ДеревоНачислений.Строки Цикл
			
			КоллекцияСтрокЛС = СтрокаДерева.Строки;
			
			Если КоллекцияСтрокЛС.Количество() > 0 Тогда
				ЛицевойСчет    = КоллекцияСтрокЛС[0].ЛицевойСчет;
				НаименованиеЛС = КоллекцияСтрокЛС[0].НаименованиеЛС;
				НаименованиеЛС = СокрЛП(ОбъектОбработки.ПодготовитьНомерЛСДляВывода(ЛицевойСчет));
			КонецЕсли;
			
			НоваяСтрока = Неопределено;
			
			Для Каждого СтрокаДанных Из КоллекцияСтрокЛС Цикл
				
				УслугаВОСЗ = СтрокаДанных.УслугаВОСЗ;
				
				ДанныеПоУслугеВОСЗ = КоллекцияСтрокЛС.НайтиСтроки(Новый Структура("УслугаВОСЗ", УслугаВОСЗ));
				
				Если ДанныеПоУслугеВОСЗ.Количество() = 0 ИЛИ ДанныеПоУслугеВОСЗ.Количество() > 1 Тогда
					Продолжить;
				КонецЕсли;
				
				Если НоваяСтрока = Неопределено Тогда
					
					НоваяСтрока = Объект.МосковскаяОбластьГородПодольск_ТаблицаСведений.Добавить();
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
					
					ОтветственныйВладелец = СокрЛП(СтрокаДанных.ОтветственныйВладелец);
					
					Если СтрокаДанных.ЭтоЖилец Тогда
						ФИО     = СтрЗаменить(ОтветственныйВладелец, "  ", " ");
						ПозицияПробела = Найти(ФИО, " ");
						Фамилия = Лев(ФИО, ПозицияПробела - 1);
						ФИО = Сред(ФИО, ПозицияПробела + 1, СтрДлина(ФИО));
						ПозицияПробела = Найти(ФИО, " ");
						Имя = Лев(ФИО, ПозицияПробела - 1);
						Отчество = Сред(ФИО, ПозицияПробела + 1, СтрДлина(ФИО));
						
						СтруктураФИО = Новый Структура("Fam, Im, Ot", Фамилия, Имя, Отчество);
					Иначе
						СтруктураФИО = Новый Структура("Fam", ОтветственныйВладелец);
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураФИО);
					
				КонецЕсли;
				
				НоваяСтрока["NazvOgr"] = НаименованиеОрганизации;
				НоваяСтрока["God"]     = ГодПериода;
				НоваяСтрока["Mes"]     = МесяцПериода;
				НоваяСтрока["NumLs"]   = НаименованиеЛС;
				
				Если НЕ ЗначениеЗаполнено(СтрокаДанных.Тариф) Тогда
					СтрокаДанных.Тариф = ПолучитьТарифПоЛицевомуСчету(КонецМесяца(Объект.Период),
					Объект.Организация,
					СтрокаДанных.УслугаВБазе, 
					СтрокаДанных.Здание);
				КонецЕсли;
				
				Если УслугаВОСЗ = "Содержание и тех.обслуживание жилья" Тогда
					НоваяСтрока["TarifTO"]  = СтрокаДанных.Тариф;
					НоваяСтрока["SumTO"]    = СтрокаДанных.СуммаНачисления;
				КонецЕсли;
				
				Если УслугаВОСЗ = "Горячее водоснабжение" Тогда
					НоваяСтрока["TarifGV"]  = СтрокаДанных.Тариф;
					НоваяСтрока["SumGV"]    = СтрокаДанных.СуммаНачисления;
					НоваяСтрока["SchGV"]    = СтрокаДанных.НаличиеСчетчика;
					НоваяСтрока["FaktGV"]   = СтрокаДанных.Количество;
				КонецЕсли;
				
				Если УслугаВОСЗ = "Холодное водоснабжение" Тогда
					НоваяСтрока["TarifHV"]  = СтрокаДанных.Тариф;
					НоваяСтрока["SumHV"]    = СтрокаДанных.СуммаНачисления;
					НоваяСтрока["SchHV"]    = СтрокаДанных.НаличиеСчетчика;
					НоваяСтрока["FaktHV"]   = СтрокаДанных.Количество;
				КонецЕсли;
				
				Если УслугаВОСЗ = "Водоотведение" Тогда
					НоваяСтрока["TarifStoki"]  = СтрокаДанных.Тариф;
					НоваяСтрока["SumStoki"]    = СтрокаДанных.СуммаНачисления;
					НоваяСтрока["SchStoki"]    = СтрокаДанных.НаличиеСчетчика;
					НоваяСтрока["FaktStoki"]   = СтрокаДанных.Количество;
				КонецЕсли;
				
				Если УслугаВОСЗ = "Отопление" Тогда
					НоваяСтрока["TarifOtop"]  = СтрокаДанных.Тариф;
					НоваяСтрока["SumOtop"]    = СтрокаДанных.СуммаНачисления;
				КонецЕсли;
				
				Если УслугаВОСЗ = "Электроэнергия" Тогда
					НоваяСтрока["TarifEed"]  = СтрокаДанных.Тариф;
					НоваяСтрока["SumEed"]    = СтрокаДанных.СуммаНачисленияДневнойТарифЭлЭн;
					НоваяСтрока["SchEe"]     = СтрокаДанных.НаличиеСчетчика;
					НоваяСтрока["FaktEed"]   = СтрокаДанных.Количество;
					НоваяСтрока["TarifEen"]  = СтрокаДанных.ТарифНочнойЭлЭн;
					НоваяСтрока["SumEen"]    = СтрокаДанных.СуммаНачисленияНочнойТарифЭлЭн;
					НоваяСтрока["FaktEen"]   = СтрокаДанных.КоличествоНочнойТарифЭлЭн;
				КонецЕсли;
				
				Если УслугаВОСЗ = "ОДН ХВС" Тогда
					НоваяСтрока["TarifKomResHV"] = СтрокаДанных.Тариф;
					НоваяСтрока["SumKomResHV"]   = СтрокаДанных.СуммаНачисления;
				КонецЕсли;
				
				Если УслугаВОСЗ = "ОДН ГВС" Тогда
					НоваяСтрока["TarifKomResGV"] = СтрокаДанных.Тариф;
					НоваяСтрока["SumKomResGV"]   = СтрокаДанных.СуммаНачисления;
				КонецЕсли;
				
				Если УслугаВОСЗ = "ОДН Э/Э" Тогда
					НоваяСтрока["TarifKomResEE"] = СтрокаДанных.Тариф;
					НоваяСтрока["SumKomResEE"]   = СтрокаДанных.СуммаНачисления;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Функция возвращает дерево сведений по начислениям.
Функция ПолучитьДеревоНачислений()
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДатаНачала",          НачалоМесяца(Объект.Период));
	Запрос.УстановитьПараметр("ДатаКонца",           КонецМесяца(Объект.Период));
	Запрос.УстановитьПараметр("Организация",         Объект.Организация);
	Запрос.УстановитьПараметр("ТаблицаСоответствия", Объект.МосковскаяОбластьГородПодольск_ТаблицаСоответствия.Выгрузить());
	Запрос.УстановитьПараметр("ПорядокЗданий",       Объект.МосковскаяОбластьГородПодольск_ПорядокЗданий.Выгрузить());
	Запрос.УстановитьПараметр("ЭлЭнергия",           "Электроэнергия");
	
	УказыватьКоличествоПрожИЗарегЧислами = Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Получить();
	
	Запрос.УстановитьПараметр("УказыватьКоличествоПрожИЗарегЧислами", УказыватьКоличествоПрожИЗарегЧислами);
	
	// 1. Получаем таблицу л/с, по которым назначены льготы.
	
	// По найденным л/с будут выгружены сведения в ОСЗ. Итоговые данные в пакете запроса "втДействующиеЛС".
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.Регистратор.Объект КАК ЛицевойСчет
	|ПОМЕСТИТЬ втЛСНазначенныеЛьготы
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(&ДатаКонца, Регистратор ССЫЛКА Документ.КВП_УстановкаЛьгот) КАК КВП_НазначенныеЛьготыСрезПоследних
	|ГДЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.Действие
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_НазначенныеЛьготыСрезПоследних.Регистратор.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Код КАК КодЛС,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Наименование КАК НаименованиеЛС,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект КАК Помещение,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Код КАК Квартира,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Владелец КАК Здание
	|ПОМЕСТИТЬ втДействующиеЛС
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втЛСНазначенныеЛьготы.ЛицевойСчет
	|				ИЗ
	|					втЛСНазначенныеЛьготы КАК втЛСНазначенныеЛьготы)) КАК КВП_ЛицевыеСчетаСрезПоследних
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втЛСНазначенныеЛьготы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДействующиеЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	втДействующиеЛС.КодЛС КАК КодЛС,
	|	втДействующиеЛС.НаименованиеЛС КАК НаименованиеЛС,
	|	втДействующиеЛС.Помещение КАК Помещение,
	|	втДействующиеЛС.Квартира КАК Квартира,
	|	втДействующиеЛС.Здание КАК Здание
	|ИЗ
	|	втДействующиеЛС КАК втДействующиеЛС";
	Таблица = Запрос.Выполнить().Выгрузить();
	
	// 2. Получим сведения по л/с.
	
	// Получаем сведения об адресах.
	ЗапросПоЗданиям = Новый Запрос;
	ЗапросПоЗданиям.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросПоЗданиям.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втДействующиеЛС.Здание
	|ИЗ
	|	втДействующиеЛС КАК втДействующиеЛС";
	
	МассивЗданий = ЗапросПоЗданиям.Выполнить().Выгрузить().ВыгрузитьКолонку("Здание");
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивЗданий);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	втДействующиеЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Город, """") КАК Город,
	|	ЕСТЬNULL(втКонтактнаяИнформация.НаселенныйПункт, """") КАК НаселенныйПункт,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Улица, """") КАК Улица,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Дом, """") КАК Дом,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Корпус, """") КАК Корпус
	|ПОМЕСТИТЬ втЛСCАдресами
	|ИЗ
	|	втДействующиеЛС КАК втДействующиеЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК втКонтактнаяИнформация
	|		ПО втДействующиеЛС.Здание = втКонтактнаяИнформация.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛСCАдресами.ЛицевойСчет КАК ЛицевойСчет,
	|	втЛСCАдресами.Город КАК Город,
	|	втЛСCАдресами.НаселенныйПункт КАК НаселенныйПункт,
	|	втЛСCАдресами.Улица КАК Улица,
	|	втЛСCАдресами.Дом КАК Дом,
	|	втЛСCАдресами.Корпус КАК Корпус
	|ИЗ
	|	втЛСCАдресами КАК втЛСCАдресами";
	Таблица = Запрос.Выполнить().Выгрузить();
	
	// Получаем сведения об ответственных лицах л/с. Итоговые данные в пакете запроса "втОтветственныйСобственникНаниматель".
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_ОтветственныйСобственникНаниматель.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_ОтветственныйСобственникНаниматель.ОтветственныйВладелец КАК ОтветственныйВладелец,
	|	ВЫБОР
	|		КОГДА УПЖКХ_ОтветственныйСобственникНаниматель.ОтветственныйВладелец ССЫЛКА Справочник.УПЖКХ_Жильцы
	|			ТОГДА УПЖКХ_ОтветственныйСобственникНаниматель.ОтветственныйВладелец.ФизЛицо.ДатаРождения
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаРождения,
	|	ВЫБОР
	|		КОГДА УПЖКХ_ОтветственныйСобственникНаниматель.ОтветственныйВладелец ССЫЛКА Справочник.УПЖКХ_Жильцы
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоЖилец
	|ПОМЕСТИТЬ втОтветственныйСобственникНаниматель
	|ИЗ
	|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втДействующиеЛС.ЛицевойСчет
	|				ИЗ
	|					втДействующиеЛС КАК втДействующиеЛС)) КАК УПЖКХ_ОтветственныйСобственникНаниматель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОтветственныйСобственникНаниматель.ЛицевойСчет КАК ЛицевойСчет,
	|	втОтветственныйСобственникНаниматель.ОтветственныйВладелец КАК ОтветственныйВладелец,
	|	втОтветственныйСобственникНаниматель.ДатаРождения КАК ДатаРождения,
	|	втОтветственныйСобственникНаниматель.ЭтоЖилец КАК ЭтоЖилец
	|ИЗ
	|	втОтветственныйСобственникНаниматель КАК втОтветственныйСобственникНаниматель";
	Таблица = Запрос.Выполнить().Выгрузить();
	
	// Получаем сведения о количестве проживающих/зарегистрированных по л/с. Итоговые данные в пакете запроса "втЛицевыеСчетаПроживЗарег".
	Если УказыватьКоличествоПрожИЗарегЧислами Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
		|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.КоличествоПроживающих КАК КоличествоПроживающих,
		|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.КоличествоЗарегистрированных КАК КоличествоЗарегистрированных
		|ПОМЕСТИТЬ втКоличествоЖильцовГотовымиЧислами
		|ИЗ
		|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(
		|			&ДатаКонца,
		|			ЛицевойСчет В
		|				(ВЫБРАТЬ
		|					втДействующиеЛС.ЛицевойСчет
		|				ИЗ
		|					втДействующиеЛС КАК втДействующиеЛС)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних
		|ГДЕ
		|	&УказыватьКоличествоПрожИЗарегЧислами
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втДействующиеЛС.ЛицевойСчет КАК ЛицевойСчет,
		|	ЕСТЬNULL(втКоличествоЖильцовГотовымиЧислами.КоличествоПроживающих, 0) КАК КоличествоПроживающих,
		|	ЕСТЬNULL(втКоличествоЖильцовГотовымиЧислами.КоличествоЗарегистрированных, 0) КАК КоличествоЗарегистрированных
		|ПОМЕСТИТЬ втЛицевыеСчетаПроживЗарег
		|ИЗ
		|	втДействующиеЛС КАК втДействующиеЛС
		|		ЛЕВОЕ СОЕДИНЕНИЕ втКоличествоЖильцовГотовымиЧислами КАК втКоличествоЖильцовГотовымиЧислами
		|		ПО втДействующиеЛС.ЛицевойСчет = втКоличествоЖильцовГотовымиЧислами.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втКоличествоЖильцовГотовымиЧислами
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЛицевыеСчетаПроживЗарег.ЛицевойСчет КАК ЛицевойСчет,
		|	втЛицевыеСчетаПроживЗарег.КоличествоПроживающих КАК КоличествоПроживающих,
		|	втЛицевыеСчетаПроживЗарег.КоличествоЗарегистрированных КАК КоличествоЗарегистрированных
		|ИЗ
		|	втЛицевыеСчетаПроживЗарег КАК втЛицевыеСчетаПроживЗарег";
		Таблица = Запрос.Выполнить().Выгрузить();
		
	Иначе
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец) КАК КоличествоЗарегистрированных
		|ПОМЕСТИТЬ втСведенияОЗарегистрированных
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
		|			&ДатаКонца,
		|			ДатаИзменения <= &ДатаКонца
		|				И ЛицевойСчет В
		|					(ВЫБРАТЬ
		|						втДействующиеЛС.ЛицевойСчет
		|					ИЗ
		|						втДействующиеЛС КАК втДействующиеЛС)) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
		|ГДЕ
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
		|
		|СГРУППИРОВАТЬ ПО
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец) КАК КоличествоПроживающих
		|ПОМЕСТИТЬ втСведенияОПроживающих
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
		|			&ДатаКонца,
		|			ДатаИзменения <= &ДатаКонца
		|				И ЛицевойСчет В
		|					(ВЫБРАТЬ
		|						втДействующиеЛС.ЛицевойСчет
		|					ИЗ
		|						втДействующиеЛС КАК втДействующиеЛС)) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
		|ГДЕ
		|	УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает
		|
		|СГРУППИРОВАТЬ ПО
		|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втДействующиеЛС.ЛицевойСчет КАК ЛицевойСчет,
		|	ЕСТЬNULL(втСведенияОПроживающих.КоличествоПроживающих, 0) КАК КоличествоПроживающих,
		|	ЕСТЬNULL(втСведенияОЗарегистрированных.КоличествоЗарегистрированных, 0) КАК КоличествоЗарегистрированных
		|ПОМЕСТИТЬ втЛицевыеСчетаПроживЗарег
		|ИЗ
		|	втДействующиеЛС КАК втДействующиеЛС
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОПроживающих КАК втСведенияОПроживающих
		|		ПО втДействующиеЛС.ЛицевойСчет = втСведенияОПроживающих.ЛицевойСчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОЗарегистрированных КАК втСведенияОЗарегистрированных
		|		ПО втДействующиеЛС.ЛицевойСчет = втСведенияОЗарегистрированных.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втСведенияОПроживающих
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втСведенияОЗарегистрированных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЛицевыеСчетаПроживЗарег.ЛицевойСчет КАК ЛицевойСчет,
		|	втЛицевыеСчетаПроживЗарег.КоличествоПроживающих КАК КоличествоПроживающих,
		|	втЛицевыеСчетаПроживЗарег.КоличествоЗарегистрированных КАК КоличествоЗарегистрированных
		|ИЗ
		|	втЛицевыеСчетаПроживЗарег КАК втЛицевыеСчетаПроживЗарег";
		Таблица = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
	// Получаем сведения о площадях по л/с, учитывая их доли. Итоговые данные в пакете запроса "втЛССПлощадями".
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель, 0) = 0
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель, 0) = 0
	|						ТОГДА КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель / КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДоляЛС,
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ втДолиЛС
	|ИЗ
	|	РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втДействующиеЛС.ЛицевойСчет
	|				ИЗ
	|					втДействующиеЛС КАК втДействующиеЛС)) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект КАК Помещение,
	|	КВП_ПлощадьПомещенияСрезПоследних.Площадь КАК Площадь
	|ПОМЕСТИТЬ втПлощади
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|			&ДатаКонца,
	|			Объект В
	|					(ВЫБРАТЬ
	|						втДействующиеЛС.Помещение
	|					ИЗ
	|						втДействующиеЛС КАК втДействующиеЛС)
	|				И ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)) КАК КВП_ПлощадьПомещенияСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДействующиеЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	ЕСТЬNULL(втДолиЛС.ДоляЛС, 0) * ЕСТЬNULL(втПлощади.Площадь, 0) КАК ОбщаяПлощадь
	|ПОМЕСТИТЬ втПлощадиЛС
	|ИЗ
	|	втДействующиеЛС КАК втДействующиеЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДолиЛС КАК втДолиЛС
	|		ПО втДействующиеЛС.ЛицевойСчет = втДолиЛС.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПлощади КАК втПлощади
	|		ПО втДействующиеЛС.Помещение = втПлощади.Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втДолиЛС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втПлощади
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПлощадиЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	втПлощадиЛС.ОбщаяПлощадь КАК ОбщаяПлощадь
	|ИЗ
	|	втПлощадиЛС КАК втПлощадиЛС";
	Таблица = Запрос.Выполнить().Выгрузить();
	
	// Получим итоговые данные по л/с.
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втДействующиеЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	""Частная"" КАК ТипСобственности,
	|	втДействующиеЛС.КодЛС КАК КодЛС,
	|	втДействующиеЛС.НаименованиеЛС КАК НаименованиеЛС,
	|	втДействующиеЛС.Помещение КАК Помещение,
	|	втДействующиеЛС.Квартира КАК Квартира,
	|	втДействующиеЛС.Здание КАК Здание,
	|	ЕСТЬNULL(втЛСCАдресами.Город, """") КАК Город,
	|	ЕСТЬNULL(втЛСCАдресами.НаселенныйПункт, """") КАК НаселенныйПункт,
	|	ЕСТЬNULL(втЛСCАдресами.Улица, """") КАК Улица,
	|	ЕСТЬNULL(втЛСCАдресами.Дом, """") КАК Дом,
	|	ЕСТЬNULL(втЛСCАдресами.Корпус, """") КАК Корпус,
	|	ЕСТЬNULL(втОтветственныйСобственникНаниматель.ОтветственныйВладелец, ЗНАЧЕНИЕ(СПРАВОЧНИК.УПЖКХ_Жильцы.ПустаяСсылка)) КАК ОтветственныйВладелец,
	|	ЕСТЬNULL(втОтветственныйСобственникНаниматель.ДатаРождения, """") КАК ДатаРождения,
	|	ЕСТЬNULL(втОтветственныйСобственникНаниматель.ЭтоЖилец, ЛОЖЬ) КАК ЭтоЖилец,
	|	ЕСТЬNULL(втЛицевыеСчетаПроживЗарег.КоличествоПроживающих, 0) КАК КоличествоПроживающих,
	|	ЕСТЬNULL(втЛицевыеСчетаПроживЗарег.КоличествоЗарегистрированных, 0) КАК КоличествоЗарегистрированных,
	|	ЕСТЬNULL(втПлощадиЛС.ОбщаяПлощадь, 0) КАК ОбщаяПлощадь
	|ПОМЕСТИТЬ втИтоговыеДанныеПоЛС
	|ИЗ
	|	втДействующиеЛС КАК втДействующиеЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЛСCАдресами КАК втЛСCАдресами
	|		ПО втДействующиеЛС.ЛицевойСчет = втЛСCАдресами.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОтветственныйСобственникНаниматель КАК втОтветственныйСобственникНаниматель
	|		ПО втДействующиеЛС.ЛицевойСчет = втОтветственныйСобственникНаниматель.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЛицевыеСчетаПроживЗарег КАК втЛицевыеСчетаПроживЗарег
	|		ПО втДействующиеЛС.ЛицевойСчет = втЛицевыеСчетаПроживЗарег.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПлощадиЛС КАК втПлощадиЛС
	|		ПО втДействующиеЛС.ЛицевойСчет = втПлощадиЛС.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втЛСCАдресами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втОтветственныйСобственникНаниматель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втЛицевыеСчетаПроживЗарег
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втПлощадиЛС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговыеДанныеПоЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	втИтоговыеДанныеПоЛС.ТипСобственности КАК ТипСобственности,
	|	втИтоговыеДанныеПоЛС.КодЛС КАК КодЛС,
	|	втИтоговыеДанныеПоЛС.НаименованиеЛС КАК НаименованиеЛС,
	|	втИтоговыеДанныеПоЛС.Помещение КАК Помещение,
	|	втИтоговыеДанныеПоЛС.Квартира КАК Квартира,
	|	втИтоговыеДанныеПоЛС.Здание КАК Здание,
	|	втИтоговыеДанныеПоЛС.Город КАК Город,
	|	втИтоговыеДанныеПоЛС.НаселенныйПункт КАК НаселенныйПункт,
	|	втИтоговыеДанныеПоЛС.Улица КАК Улица,
	|	втИтоговыеДанныеПоЛС.Дом КАК Дом,
	|	втИтоговыеДанныеПоЛС.Корпус КАК Корпус,
	|	втИтоговыеДанныеПоЛС.ОтветственныйВладелец КАК ОтветственныйВладелец,
	|	втИтоговыеДанныеПоЛС.ДатаРождения КАК ДатаРождения,
	|	втИтоговыеДанныеПоЛС.ЭтоЖилец КАК ЭтоЖилец,
	|	втИтоговыеДанныеПоЛС.КоличествоПроживающих КАК КоличествоПроживающих,
	|	втИтоговыеДанныеПоЛС.КоличествоЗарегистрированных КАК КоличествоЗарегистрированных,
	|	втИтоговыеДанныеПоЛС.ОбщаяПлощадь КАК ОбщаяПлощадь
	|ИЗ
	|	втИтоговыеДанныеПоЛС КАК втИтоговыеДанныеПоЛС";
	Таблица = Запрос.Выполнить().Выгрузить();
	
	// 3. Получим сведения по услугам (назначенные услуги, начисления, количество месяцев задолженности, факты наличия счетчиков).
	
	// Получаем таблицы назначенных услуг на л/с. Итоговые данные в пакете запроса "втЛССНазначеннымиНачислениями".
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаСоответствия.УслугаВБазе КАК УслугаВБазе,
	|	ТаблицаСоответствия.УслугаВОСЗ КАК УслугаВОСЗ
	|ПОМЕСТИТЬ втУслуги
	|ИЗ
	|	&ТаблицаСоответствия КАК ТаблицаСоответствия
	|ГДЕ
	|	ТаблицаСоответствия.УслугаВБазе <> ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДействующиеЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	втУслуги.УслугаВОСЗ КАК УслугаВОСЗ,
	|	втУслуги.УслугаВБазе КАК УслугаВБазе
	|ПОМЕСТИТЬ втЛССУслугами
	|ИЗ
	|	втДействующиеЛС КАК втДействующиеЛС,
	|	втУслуги КАК втУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НазначенныеНачисленияСрезПоследних.Объект КАК ЛицевойСчет,
	|	КВП_НазначенныеНачисленияСрезПоследних.Услуга КАК Услуга
	|ПОМЕСТИТЬ втНазначенныеНачисленияИзРегистра
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления.СрезПоследних(
	|			&ДатаКонца,
	|			Организация = &Организация
	|				И Объект В
	|					(ВЫБРАТЬ
	|						втЛССУслугами.ЛицевойСчет
	|					ИЗ
	|						втЛССУслугами КАК втЛССУслугами)
	|				И Услуга В
	|					(ВЫБРАТЬ
	|						втЛССУслугами.УслугаВБазе
	|					ИЗ
	|						втЛССУслугами КАК втЛССУслугами)) КАК КВП_НазначенныеНачисленияСрезПоследних
	|ГДЕ
	|	КВП_НазначенныеНачисленияСрезПоследних.Действует
	|	И КВП_НазначенныеНачисленияСрезПоследних.ДатаИзменения < &ДатаКонца
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛССУслугами.ЛицевойСчет КАК ЛицевойСчет,
	|	втЛССУслугами.УслугаВОСЗ КАК УслугаВОСЗ,
	|	втЛССУслугами.УслугаВБазе КАК УслугаВБазе
	|ПОМЕСТИТЬ втЛССНазначеннымиНачислениями
	|ИЗ
	|	втЛССУслугами КАК втЛССУслугами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНазначенныеНачисленияИзРегистра КАК втНазначенныеНачисленияИзРегистра
	|		ПО втЛССУслугами.ЛицевойСчет = втНазначенныеНачисленияИзРегистра.ЛицевойСчет
	|			И втЛССУслугами.УслугаВБазе = втНазначенныеНачисленияИзРегистра.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втЛССУслугами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втНазначенныеНачисленияИзРегистра
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛССНазначеннымиНачислениями.ЛицевойСчет КАК ЛицевойСчет,
	|	втЛССНазначеннымиНачислениями.УслугаВОСЗ КАК УслугаВОСЗ,
	|	втЛССНазначеннымиНачислениями.УслугаВБазе КАК УслугаВБазе
	|ИЗ
	|	втЛССНазначеннымиНачислениями КАК втЛССНазначеннымиНачислениями";
	Таблица = Запрос.Выполнить().Выгрузить();
	
	// Получаем сведения о начислениях. Итоговые данные в пакете запроса "втНачисленияПоЛС".
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга КАК Услуга,
	|	УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот КАК СуммаНачисления,
	|	УПЖКХ_НачисленияОбороты.ВидНачисления КАК ВидНачисления,
	|	УПЖКХ_НачисленияОбороты.Тариф КАК Тариф,
	|	УПЖКХ_НачисленияОбороты.ВидТарифа КАК ВидТарифа,
	|	УПЖКХ_НачисленияОбороты.РазделУчета КАК РазделУчета,
	|	УПЖКХ_НачисленияОбороты.Количество КАК Количество
	|ПОМЕСТИТЬ втВсеНачисленияИзРегистра
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНачала,
	|			&ДатаКонца,
	|			,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втЛССНазначеннымиНачислениями.ЛицевойСчет
	|					ИЗ
	|						втЛССНазначеннымиНачислениями КАК втЛССНазначеннымиНачислениями)
	|				И Услуга В
	|					(ВЫБРАТЬ
	|						втЛССНазначеннымиНачислениями.УслугаВБазе
	|					ИЗ
	|						втЛССНазначеннымиНачислениями КАК втЛССНазначеннымиНачислениями)
	|				И НЕ РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
	|				И НЕ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)) КАК УПЖКХ_НачисленияОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВсеНачисленияИзРегистра.ЛицевойСчет КАК ЛицевойСчет,
	|	втВсеНачисленияИзРегистра.Услуга КАК Услуга,
	|	ВЫБОР
	|		КОГДА НЕ втВсеНачисленияИзРегистра.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|			ТОГДА втВсеНачисленияИзРегистра.Тариф
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Тариф,
	|	СУММА(втВсеНачисленияИзРегистра.СуммаНачисления) КАК СуммаНачисления,
	|	СУММА(втВсеНачисленияИзРегистра.Количество) КАК Количество
	|ПОМЕСТИТЬ втНачисленияКромеУслугиЭлЭн
	|ИЗ
	|	втВсеНачисленияИзРегистра КАК втВсеНачисленияИзРегистра
	|ГДЕ
	|	втВсеНачисленияИзРегистра.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ))
	|	И втВсеНачисленияИзРегистра.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ))
	|	И НЕ втВсеНачисленияИзРегистра.Услуга = &ЭлЭнергия
	|
	|СГРУППИРОВАТЬ ПО
	|	втВсеНачисленияИзРегистра.ЛицевойСчет,
	|	втВсеНачисленияИзРегистра.Услуга,
	|	ВЫБОР
	|		КОГДА НЕ втВсеНачисленияИзРегистра.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|			ТОГДА втВсеНачисленияИзРегистра.Тариф
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВсеНачисленияИзРегистра.ЛицевойСчет КАК ЛицевойСчет,
	|	втВсеНачисленияИзРегистра.Услуга КАК Услуга,
	|	ВЫБОР
	|		КОГДА втВсеНачисленияИзРегистра.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Дневной)
	|				И НЕ втВсеНачисленияИзРегистра.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|			ТОГДА втВсеНачисленияИзРегистра.Тариф
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Тариф,
	|	ВЫБОР
	|		КОГДА втВсеНачисленияИзРегистра.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Дневной)
	|			ТОГДА втВсеНачисленияИзРегистра.СуммаНачисления
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаНачисления,
	|	ВЫБОР
	|		КОГДА втВсеНачисленияИзРегистра.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Дневной)
	|			ТОГДА втВсеНачисленияИзРегистра.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА втВсеНачисленияИзРегистра.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Дневной)
	|			ТОГДА втВсеНачисленияИзРегистра.СуммаНачисления
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаНачисленияДневнойТарифЭлЭн,
	|	ВЫБОР
	|		КОГДА втВсеНачисленияИзРегистра.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Ночной)
	|			ТОГДА втВсеНачисленияИзРегистра.СуммаНачисления
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаНачисленияНочнойТарифЭлЭн,
	|	ВЫБОР
	|		КОГДА втВсеНачисленияИзРегистра.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Ночной)
	|				И НЕ втВсеНачисленияИзРегистра.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|			ТОГДА втВсеНачисленияИзРегистра.Тариф
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ТарифНочнойЭлЭн,
	|	ВЫБОР
	|		КОГДА втВсеНачисленияИзРегистра.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Ночной)
	|			ТОГДА втВсеНачисленияИзРегистра.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоНочнойТарифЭлЭн
	|ПОМЕСТИТЬ втНачисленияПоУслугеЭлЭн
	|ИЗ
	|	втВсеНачисленияИзРегистра КАК втВсеНачисленияИзРегистра
	|ГДЕ
	|	втВсеНачисленияИзРегистра.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ))
	|	И втВсеНачисленияИзРегистра.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ))
	|	И втВсеНачисленияИзРегистра.Услуга = &ЭлЭнергия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабНачисления.ЛицевойСчет КАК ЛицевойСчет,
	|	ТабНачисления.Услуга КАК Услуга,
	|	МАКСИМУМ(ТабНачисления.Тариф) КАК Тариф,
	|	СУММА(ТабНачисления.СуммаНачисления) КАК СуммаНачисления,
	|	СУММА(ТабНачисления.Количество) КАК Количество,
	|	СУММА(ТабНачисления.СуммаНачисленияДневнойТарифЭлЭн) КАК СуммаНачисленияДневнойТарифЭлЭн,
	|	СУММА(ТабНачисления.СуммаНачисленияНочнойТарифЭлЭн) КАК СуммаНачисленияНочнойТарифЭлЭн,
	|	МАКСИМУМ(ТабНачисления.ТарифНочнойЭлЭн) КАК ТарифНочнойЭлЭн,
	|	СУММА(ТабНачисления.КоличествоНочнойТарифЭлЭн) КАК КоличествоНочнойТарифЭлЭн
	|ПОМЕСТИТЬ втНачисления
	|ИЗ
	|	(ВЫБРАТЬ
	|		втНачисленияПоУслугеЭлЭн.ЛицевойСчет КАК ЛицевойСчет,
	|		втНачисленияПоУслугеЭлЭн.Услуга КАК Услуга,
	|		втНачисленияПоУслугеЭлЭн.Тариф КАК Тариф,
	|		втНачисленияПоУслугеЭлЭн.СуммаНачисления КАК СуммаНачисления,
	|		втНачисленияПоУслугеЭлЭн.Количество КАК Количество,
	|		втНачисленияПоУслугеЭлЭн.СуммаНачисленияДневнойТарифЭлЭн КАК СуммаНачисленияДневнойТарифЭлЭн,
	|		втНачисленияПоУслугеЭлЭн.СуммаНачисленияНочнойТарифЭлЭн КАК СуммаНачисленияНочнойТарифЭлЭн,
	|		втНачисленияПоУслугеЭлЭн.ТарифНочнойЭлЭн КАК ТарифНочнойЭлЭн,
	|		втНачисленияПоУслугеЭлЭн.КоличествоНочнойТарифЭлЭн КАК КоличествоНочнойТарифЭлЭн
	|	ИЗ
	|		втНачисленияПоУслугеЭлЭн КАК втНачисленияПоУслугеЭлЭн
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		втНачисленияКромеУслугиЭлЭн.ЛицевойСчет,
	|		втНачисленияКромеУслугиЭлЭн.Услуга,
	|		втНачисленияКромеУслугиЭлЭн.Тариф,
	|		втНачисленияКромеУслугиЭлЭн.СуммаНачисления,
	|		втНачисленияКромеУслугиЭлЭн.Количество,
	|		0,
	|		0,
	|		0,
	|		0
	|	ИЗ
	|		втНачисленияКромеУслугиЭлЭн КАК втНачисленияКромеУслугиЭлЭн) КАК ТабНачисления
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабНачисления.ЛицевойСчет,
	|	ТабНачисления.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втНачисленияКромеУслугиЭлЭн
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втНачисленияПоУслугеЭлЭн
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВсеНачисленияИзРегистра.ЛицевойСчет КАК ЛицевойСчет,
	|	втВсеНачисленияИзРегистра.Услуга КАК Услуга,
	|	СУММА(втВсеНачисленияИзРегистра.СуммаНачисления) КАК СуммаНачисления,
	|	СУММА(втВсеНачисленияИзРегистра.Количество) КАК Количество
	|ПОМЕСТИТЬ втПерерасчеты
	|ИЗ
	|	втВсеНачисленияИзРегистра КАК втВсеНачисленияИзРегистра
	|ГДЕ
	|	втВсеНачисленияИзРегистра.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|	И втВсеНачисленияИзРегистра.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ))
	|	И НЕ втВсеНачисленияИзРегистра.Услуга = &ЭлЭнергия
	|
	|СГРУППИРОВАТЬ ПО
	|	втВсеНачисленияИзРегистра.ЛицевойСчет,
	|	втВсеНачисленияИзРегистра.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втВсеНачисленияИзРегистра
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛССНазначеннымиНачислениями.ЛицевойСчет КАК ЛицевойСчет,
	|	втЛССНазначеннымиНачислениями.УслугаВБазе КАК УслугаВБазе,
	|	втЛССНазначеннымиНачислениями.УслугаВОСЗ КАК УслугаВОСЗ,
	|	СУММА(ЕСТЬNULL(втНачисления.СуммаНачисления, 0) + ЕСТЬNULL(втПерерасчеты.СуммаНачисления, 0)) КАК СуммаНачисления,
	|	ЕСТЬNULL(втНачисления.Тариф, 0) КАК Тариф,
	|	СУММА(ЕСТЬNULL(втНачисления.Количество, 0)) КАК Количество,
	|	СУММА(ЕСТЬNULL(втНачисления.СуммаНачисленияДневнойТарифЭлЭн, 0)) КАК СуммаНачисленияДневнойТарифЭлЭн,
	|	СУММА(ЕСТЬNULL(втНачисления.СуммаНачисленияНочнойТарифЭлЭн, 0)) КАК СуммаНачисленияНочнойТарифЭлЭн,
	|	ЕСТЬNULL(втНачисления.ТарифНочнойЭлЭн, 0) КАК ТарифНочнойЭлЭн,
	|	СУММА(ЕСТЬNULL(втНачисления.КоличествоНочнойТарифЭлЭн, 0)) КАК КоличествоНочнойТарифЭлЭн
	|ПОМЕСТИТЬ втНачисленияПоЛС
	|ИЗ
	|	втЛССНазначеннымиНачислениями КАК втЛССНазначеннымиНачислениями
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНачисления КАК втНачисления
	|		ПО втЛССНазначеннымиНачислениями.ЛицевойСчет = втНачисления.ЛицевойСчет
	|			И втЛССНазначеннымиНачислениями.УслугаВБазе = втНачисления.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПерерасчеты КАК втПерерасчеты
	|		ПО втЛССНазначеннымиНачислениями.УслугаВБазе = втПерерасчеты.Услуга
	|			И втЛССНазначеннымиНачислениями.ЛицевойСчет = втПерерасчеты.ЛицевойСчет
	|
	|СГРУППИРОВАТЬ ПО
	|	втЛССНазначеннымиНачислениями.ЛицевойСчет,
	|	втЛССНазначеннымиНачислениями.УслугаВБазе,
	|	втЛССНазначеннымиНачислениями.УслугаВОСЗ,
	|	ЕСТЬNULL(втНачисления.Тариф, 0),
	|	ЕСТЬNULL(втНачисления.ТарифНочнойЭлЭн, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втПерерасчеты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачисленияПоЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	втНачисленияПоЛС.УслугаВБазе КАК УслугаВБазе,
	|	втНачисленияПоЛС.УслугаВОСЗ КАК УслугаВОСЗ,
	|	втНачисленияПоЛС.СуммаНачисления КАК СуммаНачисления,
	|	втНачисленияПоЛС.Тариф КАК Тариф,
	|	втНачисленияПоЛС.Количество КАК Количество,
	|	втНачисленияПоЛС.СуммаНачисленияДневнойТарифЭлЭн КАК СуммаНачисленияДневнойТарифЭлЭн,
	|	втНачисленияПоЛС.СуммаНачисленияНочнойТарифЭлЭн КАК СуммаНачисленияНочнойТарифЭлЭн,
	|	втНачисленияПоЛС.ТарифНочнойЭлЭн КАК ТарифНочнойЭлЭн,
	|	втНачисленияПоЛС.КоличествоНочнойТарифЭлЭн КАК КоличествоНочнойТарифЭлЭн
	|ИЗ
	|	втНачисленияПоЛС КАК втНачисленияПоЛС";
	Таблица = Запрос.Выполнить().Выгрузить();
	
	// Получим сведения о количестве месяцев задолженности. Итоговые данные в пакете запроса "втКоличествоМесяцевЗадолженности".
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Услуга КАК Услуга,
	|	МАКСИМУМ(КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период) КАК Период
	|ПОМЕСТИТЬ втПериодыЗадолженности
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(
	|			,
	|			&ДатаНачала,
	|			Регистратор,
	|			,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втЛССНазначеннымиНачислениями.ЛицевойСчет
	|					ИЗ
	|						втЛССНазначеннымиНачислениями КАК втЛССНазначеннымиНачислениями)
	|				И Услуга В
	|					(ВЫБРАТЬ
	|						втЛССНазначеннымиНачислениями.УслугаВБазе
	|					ИЗ
	|						втЛССНазначеннымиНачислениями КАК втЛССНазначеннымиНачислениями)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты
	|ГДЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период < &ДатаНачала
	|	И КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияКонечныйОстаток <= 0
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачисленияПоЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	втНачисленияПоЛС.УслугаВБазе КАК УслугаВБазе,
	|	втНачисленияПоЛС.УслугаВОСЗ КАК УслугаВОСЗ,
	|	ВЫБОР
	|		КОГДА втПериодыЗадолженности.Период ЕСТЬ NULL
	|				ИЛИ втПериодыЗадолженности.Период = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА 0
	|		ИНАЧЕ РАЗНОСТЬДАТ(втПериодыЗадолженности.Период, &ДатаНачала, МЕСЯЦ)
	|	КОНЕЦ КАК КоличествоМесяцевЗадолженности
	|ПОМЕСТИТЬ втКоличествоМесяцевЗадолженности
	|ИЗ
	|	втНачисленияПоЛС КАК втНачисленияПоЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПериодыЗадолженности КАК втПериодыЗадолженности
	|		ПО втНачисленияПоЛС.ЛицевойСчет = втПериодыЗадолженности.ЛицевойСчет
	|			И втНачисленияПоЛС.УслугаВБазе = втПериодыЗадолженности.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втПериодыЗадолженности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКоличествоМесяцевЗадолженности.ЛицевойСчет КАК ЛицевойСчет,
	|	втКоличествоМесяцевЗадолженности.УслугаВБазе КАК УслугаВБазе,
	|	втКоличествоМесяцевЗадолженности.УслугаВОСЗ КАК УслугаВОСЗ,
	|	втКоличествоМесяцевЗадолженности.КоличествоМесяцевЗадолженности КАК КоличествоМесяцевЗадолженности
	|ИЗ
	|	втКоличествоМесяцевЗадолженности КАК втКоличествоМесяцевЗадолженности";
	Таблица = Запрос.Выполнить().Выгрузить();
	
	// Получим сведения о наличии счетчиков.
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект КАК ЛицевойСчет,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги КАК Услуга,
	|	ВЫБОР
	|		КОГДА НЕ КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик ЕСТЬ NULL
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НаличиеСчетчика
	|ПОМЕСТИТЬ втНаличиеСчетчика
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&ДатаКонца,
	|			Объект В
	|					(ВЫБРАТЬ
	|						втЛССНазначеннымиНачислениями.ЛицевойСчет
	|					ИЗ
	|						втЛССНазначеннымиНачислениями КАК втЛССНазначеннымиНачислениями)
	|				И Счетчик.ВидУслуги В
	|					(ВЫБРАТЬ
	|						втЛССНазначеннымиНачислениями.УслугаВБазе
	|					ИЗ
	|						втЛССНазначеннымиНачислениями КАК втЛССНазначеннымиНачислениями)) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛССНазначеннымиНачислениями.ЛицевойСчет КАК ЛицевойСчет,
	|	втЛССНазначеннымиНачислениями.УслугаВБазе КАК УслугаВБазе,
	|	втЛССНазначеннымиНачислениями.УслугаВОСЗ КАК УслугаВОСЗ,
	|	МАКСИМУМ(ЕСТЬNULL(втНаличиеСчетчика.НаличиеСчетчика, 0)) КАК НаличиеСчетчика
	|ПОМЕСТИТЬ втЛСФактыНаличияСчетчиковПоУслугам
	|ИЗ
	|	втЛССНазначеннымиНачислениями КАК втЛССНазначеннымиНачислениями
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНаличиеСчетчика КАК втНаличиеСчетчика
	|		ПО втЛССНазначеннымиНачислениями.ЛицевойСчет = втНаличиеСчетчика.ЛицевойСчет
	|			И втЛССНазначеннымиНачислениями.УслугаВБазе = втНаличиеСчетчика.Услуга
	|
	|СГРУППИРОВАТЬ ПО
	|	втЛССНазначеннымиНачислениями.ЛицевойСчет,
	|	втЛССНазначеннымиНачислениями.УслугаВБазе,
	|	втЛССНазначеннымиНачислениями.УслугаВОСЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втНаличиеСчетчика
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛСФактыНаличияСчетчиковПоУслугам.ЛицевойСчет КАК ЛицевойСчет,
	|	втЛСФактыНаличияСчетчиковПоУслугам.УслугаВБазе КАК УслугаВБазе,
	|	втЛСФактыНаличияСчетчиковПоУслугам.УслугаВОСЗ КАК УслугаВОСЗ,
	|	втЛСФактыНаличияСчетчиковПоУслугам.НаличиеСчетчика КАК НаличиеСчетчика
	|ИЗ
	|	втЛСФактыНаличияСчетчиковПоУслугам КАК втЛСФактыНаличияСчетчиковПоУслугам";
	Таблица = Запрос.Выполнить().Выгрузить();
	
	// Получим итоговые данные по услугам.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	втЛССНазначеннымиНачислениями.ЛицевойСчет КАК ЛицевойСчет,
	|	втЛССНазначеннымиНачислениями.УслугаВОСЗ КАК УслугаВОСЗ,
	|	втЛССНазначеннымиНачислениями.УслугаВБазе КАК УслугаВБазе,
	|	ЕСТЬNULL(втНачисленияПоЛС.СуммаНачисления, 0) КАК СуммаНачисления,
	|	ЕСТЬNULL(втНачисленияПоЛС.Тариф, 0) КАК Тариф,
	|	ЕСТЬNULL(втНачисленияПоЛС.Количество, 0) КАК Количество,
	|	ЕСТЬNULL(втНачисленияПоЛС.СуммаНачисленияДневнойТарифЭлЭн, 0) КАК СуммаНачисленияДневнойТарифЭлЭн,
	|	ЕСТЬNULL(втНачисленияПоЛС.СуммаНачисленияНочнойТарифЭлЭн, 0) КАК СуммаНачисленияНочнойТарифЭлЭн,
	|	ЕСТЬNULL(втНачисленияПоЛС.ТарифНочнойЭлЭн, 0) КАК ТарифНочнойЭлЭн,
	|	ЕСТЬNULL(втНачисленияПоЛС.КоличествоНочнойТарифЭлЭн, 0) КАК КоличествоНочнойТарифЭлЭн,
	|	ЕСТЬNULL(втКоличествоМесяцевЗадолженности.КоличествоМесяцевЗадолженности, 0) КАК КоличествоМесяцевЗадолженности,
	|	ЕСТЬNULL(втЛСФактыНаличияСчетчиковПоУслугам.НаличиеСчетчика, ЛОЖЬ) КАК НаличиеСчетчика
	|ПОМЕСТИТЬ втИтоговыеДанныеПоУслугам
	|ИЗ
	|	втЛССНазначеннымиНачислениями КАК втЛССНазначеннымиНачислениями
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНачисленияПоЛС КАК втНачисленияПоЛС
	|		ПО втЛССНазначеннымиНачислениями.ЛицевойСчет = втНачисленияПоЛС.ЛицевойСчет
	|			И втЛССНазначеннымиНачислениями.УслугаВБазе = втНачисленияПоЛС.УслугаВБазе
	|			И втЛССНазначеннымиНачислениями.УслугаВОСЗ = втНачисленияПоЛС.УслугаВОСЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКоличествоМесяцевЗадолженности КАК втКоличествоМесяцевЗадолженности
	|		ПО втЛССНазначеннымиНачислениями.ЛицевойСчет = втКоличествоМесяцевЗадолженности.ЛицевойСчет
	|			И втЛССНазначеннымиНачислениями.УслугаВБазе = втКоличествоМесяцевЗадолженности.УслугаВБазе
	|			И втЛССНазначеннымиНачислениями.УслугаВОСЗ = втКоличествоМесяцевЗадолженности.УслугаВОСЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЛСФактыНаличияСчетчиковПоУслугам КАК втЛСФактыНаличияСчетчиковПоУслугам
	|		ПО втЛССНазначеннымиНачислениями.ЛицевойСчет = втЛСФактыНаличияСчетчиковПоУслугам.ЛицевойСчет
	|			И втЛССНазначеннымиНачислениями.УслугаВБазе = втЛСФактыНаличияСчетчиковПоУслугам.УслугаВБазе
	|			И втЛССНазначеннымиНачислениями.УслугаВОСЗ = втЛСФактыНаличияСчетчиковПоУслугам.УслугаВОСЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втНачисленияПоЛС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втКоличествоМесяцевЗадолженности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втЛСФактыНаличияСчетчиковПоУслугам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговыеДанныеПоУслугам.ЛицевойСчет КАК ЛицевойСчет,
	|	втИтоговыеДанныеПоУслугам.УслугаВОСЗ КАК УслугаВОСЗ,
	|	втИтоговыеДанныеПоУслугам.УслугаВБазе КАК УслугаВБазе,
	|	втИтоговыеДанныеПоУслугам.СуммаНачисления КАК СуммаНачисления,
	|	втИтоговыеДанныеПоУслугам.Тариф КАК Тариф,
	|	втИтоговыеДанныеПоУслугам.Количество КАК Количество,
	|	втИтоговыеДанныеПоУслугам.СуммаНачисленияДневнойТарифЭлЭн КАК СуммаНачисленияДневнойТарифЭлЭн,
	|	втИтоговыеДанныеПоУслугам.СуммаНачисленияНочнойТарифЭлЭн КАК СуммаНачисленияНочнойТарифЭлЭн,
	|	втИтоговыеДанныеПоУслугам.ТарифНочнойЭлЭн КАК ТарифНочнойЭлЭн,
	|	втИтоговыеДанныеПоУслугам.КоличествоНочнойТарифЭлЭн КАК КоличествоНочнойТарифЭлЭн,
	|	втИтоговыеДанныеПоУслугам.КоличествоМесяцевЗадолженности КАК КоличествоМесяцевЗадолженности,
	|	втИтоговыеДанныеПоУслугам.НаличиеСчетчика КАК НаличиеСчетчика
	|ИЗ
	|	втИтоговыеДанныеПоУслугам КАК втИтоговыеДанныеПоУслугам";
	Таблица = Запрос.Выполнить().Выгрузить();
	
	// 4. Получим итоговые данные по л/с с сортировкой по зданиям.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПорядокЗданий.НомерСтроки,
	|	ПорядокЗданий.Здание
	|ПОМЕСТИТЬ втПорядокЗданий
	|ИЗ
	|	&ПорядокЗданий КАК ПорядокЗданий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговыеДанныеПоЛС.ЛицевойСчет,
	|	втИтоговыеДанныеПоЛС.ТипСобственности,
	|	втИтоговыеДанныеПоЛС.КодЛС,
	|	втИтоговыеДанныеПоЛС.НаименованиеЛС,
	|	втИтоговыеДанныеПоЛС.Помещение,
	|	втИтоговыеДанныеПоЛС.Квартира,
	|	втИтоговыеДанныеПоЛС.Здание,
	|	втИтоговыеДанныеПоЛС.Город,
	|	втИтоговыеДанныеПоЛС.НаселенныйПункт,
	|	втИтоговыеДанныеПоЛС.Улица,
	|	втИтоговыеДанныеПоЛС.Дом,
	|	втИтоговыеДанныеПоЛС.Корпус,
	|	втИтоговыеДанныеПоЛС.ОтветственныйВладелец,
	|	втИтоговыеДанныеПоЛС.ДатаРождения,
	|	втИтоговыеДанныеПоЛС.ЭтоЖилец,
	|	втИтоговыеДанныеПоЛС.КоличествоПроживающих,
	|	втИтоговыеДанныеПоЛС.КоличествоЗарегистрированных,
	|	втИтоговыеДанныеПоЛС.ОбщаяПлощадь,
	|	втИтоговыеДанныеПоУслугам.УслугаВОСЗ,
	|	втИтоговыеДанныеПоУслугам.УслугаВБазе,
	|	втИтоговыеДанныеПоУслугам.СуммаНачисления,
	|	втИтоговыеДанныеПоУслугам.Тариф,
	|	втИтоговыеДанныеПоУслугам.Количество,
	|	втИтоговыеДанныеПоУслугам.СуммаНачисленияДневнойТарифЭлЭн,
	|	втИтоговыеДанныеПоУслугам.СуммаНачисленияНочнойТарифЭлЭн,
	|	втИтоговыеДанныеПоУслугам.ТарифНочнойЭлЭн,
	|	втИтоговыеДанныеПоУслугам.КоличествоНочнойТарифЭлЭн,
	|	втИтоговыеДанныеПоУслугам.КоличествоМесяцевЗадолженности,
	|	втИтоговыеДанныеПоУслугам.НаличиеСчетчика,
	|	втПорядокЗданий.НомерСтроки КАК ПорядокЗдания
	|ПОМЕСТИТЬ втИтоговая
	|ИЗ
	|	втИтоговыеДанныеПоЛС КАК втИтоговыеДанныеПоЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ втИтоговыеДанныеПоУслугам КАК втИтоговыеДанныеПоУслугам
	|		ПО втИтоговыеДанныеПоЛС.ЛицевойСчет = втИтоговыеДанныеПоУслугам.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПорядокЗданий КАК втПорядокЗданий
	|		ПО втИтоговыеДанныеПоЛС.Здание = втПорядокЗданий.Здание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втПорядокЗданий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговая.ЛицевойСчет,
	|	втИтоговая.ТипСобственности,
	|	втИтоговая.КодЛС,
	|	втИтоговая.НаименованиеЛС,
	|	втИтоговая.Помещение,
	|	втИтоговая.Квартира,
	|	втИтоговая.Здание,
	|	втИтоговая.Город,
	|	втИтоговая.НаселенныйПункт,
	|	втИтоговая.Улица,
	|	втИтоговая.Дом,
	|	втИтоговая.Корпус,
	|	втИтоговая.ОтветственныйВладелец,
	|	втИтоговая.ДатаРождения,
	|	втИтоговая.ЭтоЖилец,
	|	втИтоговая.КоличествоПроживающих,
	|	втИтоговая.КоличествоЗарегистрированных,
	|	втИтоговая.ОбщаяПлощадь,
	|	втИтоговая.УслугаВОСЗ,
	|	втИтоговая.УслугаВБазе,
	|	втИтоговая.СуммаНачисления,
	|	втИтоговая.Тариф,
	|	втИтоговая.Количество,
	|	втИтоговая.СуммаНачисленияДневнойТарифЭлЭн,
	|	втИтоговая.СуммаНачисленияНочнойТарифЭлЭн,
	|	втИтоговая.ТарифНочнойЭлЭн,
	|	втИтоговая.КоличествоНочнойТарифЭлЭн,
	|	втИтоговая.КоличествоМесяцевЗадолженности,
	|	втИтоговая.НаличиеСчетчика,
	|	втИтоговая.ПорядокЗдания
	|ИЗ
	|	втИтоговая КАК втИтоговая";
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	втИтоговая.Здание,
	|	втИтоговая.Помещение,
	|	втИтоговая.ЛицевойСчет КАК ЛицевойСчет,
	|	МАКСИМУМ(втИтоговая.ТипСобственности) КАК TipZF,
	|	втИтоговая.КодЛС,
	|	втИтоговая.НаименованиеЛС КАК НаименованиеЛС,
	|	втИтоговая.КоличествоЗарегистрированных КАК KolChls,
	|	МАКСИМУМ(втИтоговая.КоличествоЗарегистрированных) КАК KolChlsReg,
	|	втИтоговая.Город КАК Gorod,
	|	втИтоговая.НаселенныйПункт КАК Nasp,
	|	втИтоговая.Улица КАК Ul,
	|	втИтоговая.Дом КАК Dom,
	|	втИтоговая.Корпус КАК Korp,
	|	втИтоговая.Квартира КАК Kv,
	|	втИтоговая.ОбщаяПлощадь КАК Sob,
	|	МАКСИМУМ(втИтоговая.ОбщаяПлощадь) КАК Sot,
	|	втИтоговая.УслугаВОСЗ,
	|	втИтоговая.УслугаВБазе,
	|	втИтоговая.Тариф КАК Тариф,
	|	СУММА(втИтоговая.СуммаНачисления) КАК СуммаНачисления,
	|	СУММА(втИтоговая.Количество) КАК Количество,
	|	МАКСИМУМ(втИтоговая.КоличествоМесяцевЗадолженности) КАК KolMesDolg,
	|	МАКСИМУМ(втИтоговая.НаличиеСчетчика) КАК НаличиеСчетчика,
	|	втИтоговая.ПорядокЗдания КАК ПорядокЗдания,
	|	втИтоговая.ОтветственныйВладелец,
	|	втИтоговая.ДатаРождения КАК Dtr,
	|	втИтоговая.ЭтоЖилец,
	|	СУММА(втИтоговая.СуммаНачисленияДневнойТарифЭлЭн) КАК СуммаНачисленияДневнойТарифЭлЭн,
	|	СУММА(втИтоговая.СуммаНачисленияНочнойТарифЭлЭн) КАК СуммаНачисленияНочнойТарифЭлЭн,
	|	втИтоговая.ТарифНочнойЭлЭн КАК ТарифНочнойЭлЭн,
	|	СУММА(втИтоговая.КоличествоНочнойТарифЭлЭн) КАК КоличествоНочнойТарифЭлЭн
	|ИЗ
	|	втИтоговая КАК втИтоговая
	|
	|СГРУППИРОВАТЬ ПО
	|	втИтоговая.Улица,
	|	втИтоговая.Дом,
	|	втИтоговая.Корпус,
	|	втИтоговая.УслугаВБазе,
	|	втИтоговая.НаселенныйПункт,
	|	втИтоговая.Здание,
	|	втИтоговая.Помещение,
	|	втИтоговая.ЛицевойСчет,
	|	втИтоговая.КодЛС,
	|	втИтоговая.НаименованиеЛС,
	|	втИтоговая.УслугаВОСЗ,
	|	втИтоговая.ПорядокЗдания,
	|	втИтоговая.КоличествоПроживающих,
	|	втИтоговая.КоличествоЗарегистрированных,
	|	втИтоговая.Квартира,
	|	втИтоговая.ОбщаяПлощадь,
	|	втИтоговая.ОтветственныйВладелец,
	|	втИтоговая.Город,
	|	втИтоговая.ДатаРождения,
	|	втИтоговая.ЭтоЖилец,
	|	втИтоговая.Тариф,
	|	втИтоговая.ТарифНочнойЭлЭн
	|
	|УПОРЯДОЧИТЬ ПО
	|	втИтоговая.ПорядокЗдания,
	|	втИтоговая.Квартира,
	|	втИтоговая.КодЛС
	|ИТОГИ
	|	МАКСИМУМ(НаименованиеЛС),
	|	МАКСИМУМ(ПорядокЗдания)
	|ПО
	|	ЛицевойСчет";
	
	ДеревоНачислений = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Возврат ДеревоНачислений;
	
КонецФункции // ПолучитьДеревоНачислений()

#КонецОбласти // Механизмы_заполнения_таблицы_сведений

#КонецОбласти