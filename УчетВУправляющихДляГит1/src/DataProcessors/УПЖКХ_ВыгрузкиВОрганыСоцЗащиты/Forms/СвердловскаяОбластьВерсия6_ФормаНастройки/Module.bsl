
#Область ПрочиеПроцедурыИФункции

&НаСервере
// Заполняет таблицу Услуг в ОСЗН из внешнего файла формата DBF.
//
Процедура ЗаполнитьУслугиНаСервере(МассивАдресов)
	
	// Запись временных данных во временный файл.
	СписокФайлов = Новый Массив;
	Для Каждого СтрокаАдреса ИЗ МассивАдресов Цикл
		врДанныеФайла = ПолучитьИзВременногоХранилища(СтрокаАдреса);
		ВременныйФайл = ПолучитьИмяВременногоФайла("DBF");
	
		// Для чтения *.dbf формата урежем имя временного файла.
		ФайлДБФ = Новый Файл(ВременныйФайл);
		СтароеИмяФайла = ФайлДБФ.ИмяБезРасширения + ".DBF";
		НовоеИмяФайла = Лев(ФайлДБФ.ИмяБезРасширения, 8) + ".DBF";
		ВременныйФайл = СтрЗаменить(ФайлДБФ.ПолноеИмя, СтароеИмяФайла, НовоеИмяФайла);
	
		врДанныеФайла.Записать(ВременныйФайл);
		
		СписокФайлов.Добавить(ВременныйФайл);
	КонецЦикла;
	
	Кодировка = КодировкаXBase.OEM;
	
	ТаблицаУслугВОСЗН = Объект.СвердловскаяОбласть_УслугиВОСЗН.Выгрузить();
	
	Для Каждого ФайлЗагрузки Из СписокФайлов Цикл
		
		// Загрузка.
		ФайлДБФ = Новый XBase;
		ФайлДБФ.Кодировка = Кодировка;
		ФайлДБФ.ОткрытьФайл(ФайлЗагрузки, , Истина);
		Если ФайлДБФ.Открыта() = Истина Тогда
			
			ТаблицаУслугВОСЗН.Очистить();
			
			Если ФайлДБФ.КоличествоЗаписей() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Пока НЕ ФайлДБФ.ВКонце() Цикл
				
				НоваяСтрокаЗагрузки = ТаблицаУслугВОСЗН.Добавить();
				НоваяСтрокаЗагрузки.ИдентификаторУслугиВОСЗН = ФайлДБФ.SERVID;
				НоваяСтрокаЗагрузки.УслугаВОСЗН              = СокрЛП(ФайлДБФ.SERVNAME);
				
				ФайлДБФ.Следующая();
			КонецЦикла;
			
		КонецЕсли;
		
		ФайлДБФ.ЗакрытьФайл();
		
	КонецЦикла;
	
	Объект.СвердловскаяОбласть_УслугиВОСЗН.Загрузить(ТаблицаУслугВОСЗН);
	
	Объект.СвердловскаяОбласть_УслугиВБазе.Очистить();
	
КонецПроцедуры

&НаСервере
// Процедура заполняет таблицу услуг на сервере.
//
Процедура ЗаполнитьТаблицуУслугНаСервере(Идентификатор)
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИдентификаторУслугиВОСЗН", Идентификатор);
	
	НайденныеСтроки = Объект.СвердловскаяОбласть_УслугиВБазе.Выгрузить(Отбор, "УслугаВБазе, ВидТарифа");
	
	Для Каждого ТекСтрока из НайденныеСтроки Цикл
		ЗаполнитьЗначенияСвойств(ТП_УслугаВБазе.Добавить(), ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Процедура управления видимостью элементов формы.
//
Процедура УстановитьВидимость()
	
	Элементы.ТП_УслугаВБазеВидТарифа.Видимость = мУчитыватьВидыТарифовУслуг;
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// РАБОТА С ВРЕМЕННЫМ ХРАНИЛИЩЕМ

#Область РаботаСВременнымХранилищем

&НаСервере
// Помещает настройки во временное хранилище.
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ИмяФайлаЗагрузкиУслуг",                           ИмяФайлаЗагрузки);
	СтруктураНастроек.Вставить("СвердловскаяОбласть_УслугиВОСЗН",                 Объект.СвердловскаяОбласть_УслугиВОСЗН.Выгрузить());
	СтруктураНастроек.Вставить("СвердловскаяОбласть_УслугиВБазе",                 Объект.СвердловскаяОбласть_УслугиВБазе.Выгрузить());
	СтруктураНастроек.Вставить("СвердловскаяОбласть_ЛьготныеКатегорииДетейСирот", Объект.СвердловскаяОбласть_ЛьготныеКатегорииДетейСирот.Выгрузить());
	СтруктураНастроек.Вставить("УслугиБезОДН",                                    Объект.УслугиБезОДН.Выгрузить());
	
	СтруктураНастроек.Вставить("КоридорнаяСистемаПроживания", КоридорнаяСистемаПроживания);
	СтруктураНастроек.Вставить("ТипОтопления",                ТипОтопления);
	СтруктураНастроек.Вставить("НаличиеВыгребнойЯмы",         НаличиеВыгребнойЯмы);
	СтруктураНастроек.Вставить("ТипВодонагревателя",          ТипВодонагревателя);
	СтруктураНастроек.Вставить("Газоснабжение",               Газоснабжение);
	СтруктураНастроек.Вставить("МестоРасположенияДуша",       МестоРасположенияДуша);
	СтруктураНастроек.Вставить("НаличиеДуша",                 НаличиеДуша);
	СтруктураНастроек.Вставить("УчитыватьВидыТарифовУслуг",   мУчитыватьВидыТарифовУслуг);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПризнакУдаления = Ложь;
	
	// Получаем настройки из хранилища.
	Если Параметры.Свойство("АдресНастроекВХранилище") И Не Параметры.АдресНастроекВХранилище = Неопределено Тогда
		
		СтруктураНастроек = ПолучитьИзВременногоХранилища(Параметры.АдресНастроекВХранилище);
		
		Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
			
			СтруктураНастроек.Свойство("ИмяФайлаЗагрузкиУслуг", ИмяФайлаЗагрузки);
			
			СтруктураНастроек.Свойство("КоридорнаяСистемаПроживания", КоридорнаяСистемаПроживания);
			СтруктураНастроек.Свойство("ТипОтопления",                ТипОтопления);
			СтруктураНастроек.Свойство("НаличиеВыгребнойЯмы",         НаличиеВыгребнойЯмы);
			СтруктураНастроек.Свойство("ТипВодонагревателя",          ТипВодонагревателя);
			СтруктураНастроек.Свойство("Газоснабжение",               Газоснабжение);
			СтруктураНастроек.Свойство("МестоРасположенияДуша",       МестоРасположенияДуша);
			СтруктураНастроек.Свойство("НаличиеДуша",                 НаличиеДуша);
			СтруктураНастроек.Свойство("УчитыватьВидыТарифовУслуг",   мУчитыватьВидыТарифовУслуг);
			
			Если СтруктураНастроек.Свойство("СвердловскаяОбласть_УслугиВОСЗН") Тогда
				Объект.СвердловскаяОбласть_УслугиВОСЗН.Загрузить(СтруктураНастроек.СвердловскаяОбласть_УслугиВОСЗН);
			КонецЕсли;
			
			Если СтруктураНастроек.Свойство("СвердловскаяОбласть_УслугиВБазе") Тогда
				Объект.СвердловскаяОбласть_УслугиВБазе.Загрузить(СтруктураНастроек.СвердловскаяОбласть_УслугиВБазе);
			КонецЕсли;
			
			Если СтруктураНастроек.Свойство("СвердловскаяОбласть_ЛьготныеКатегорииДетейСирот") Тогда
				Объект.СвердловскаяОбласть_ЛьготныеКатегорииДетейСирот.Загрузить(СтруктураНастроек.СвердловскаяОбласть_ЛьготныеКатегорииДетейСирот);
			КонецЕсли;
			
			Если СтруктураНастроек.Свойство("УслугиБезОДН") Тогда
				Объект.УслугиБезОДН.Загрузить(СтруктураНастроек.УслугиБезОДН);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Блокировка командной панели "КП_УслугиВБазе".
	Если Объект.СвердловскаяОбласть_УслугиВОСЗН.Количество() = 0 Тогда
		Элементы.ТП_УслугаВБазе.Доступность = Ложь;
	Иначе
		Элементы.ТП_УслугаВБазе.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимость();
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "КомандаСохранить".
Процедура КомандаСохранить(Команда)
	
	Закрыть(ПоместитьНастройкиВХранилище());
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаЗаполнитьУслуги".
Процедура КомандаЗаполнитьУслуги(Команда)
	
	Если ПустаяСтрока(ИмяФайлаЗагрузки) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не указан файл справочника услуг!", "Не указан файл справочника услуг!");
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ФайлНаДиске = Новый Файл(ИмяФайлаЗагрузки);
	ФайлНаДиске.НачатьПроверкуСуществования(Новый ОписаниеОповещения("КомандаЗаполнитьУслугиКаталогНаДискеСуществуетЗавершение", ЭтотОбъект));
	
КонецПроцедуры // КомандаЗаполнитьУслуги()

&НаКлиенте
// Процедура - обработчик завершения работы процедуры "НачатьПроверкуСуществования".
//
Процедура КомандаЗаполнитьУслугиКаталогНаДискеСуществуетЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	Если НЕ Существует Тогда
		ПоказатьПредупреждение(Неопределено, "Файл не найден!");
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = "";
	
	НачатьПомещениеФайла(Новый ОписаниеОповещения("ОбработатьПомещениеФайла", ЭтаФорма),
						 ПутьКФайлу, ИмяФайлаЗагрузки, Ложь);
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата помещения файла, вызванного в процедуре "КомандаЗаполнитьУслуги()".
Процедура ОбработатьПомещениеФайла(Результат, ПутьКФайлу, ВыбранноеИмяФайла, ДопПараметры) Экспорт
	
	МассивАдресов = Новый Массив;
	МассивАдресов.Добавить(ПутьКФайлу);
	
	Если Объект.СвердловскаяОбласть_УслугиВОСЗН.Количество() > 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("КомандаЗаполнитьУслугиЗавершение", ЭтотОбъект, Новый Структура("МассивАдресов", МассивАдресов));
		
		ТекстВопроса = "Перед заполением таблица услуг будет очищена. Заполнить?";
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ЗаполнитьУслугиНаСервере(МассивАдресов);
		// Блокировка командной панели "КП_УслугиВБазе".
		Если Объект.СвердловскаяОбласть_УслугиВОСЗН.Количество() = 0 Тогда
			Элементы.ТП_УслугаВБазе.Доступность = Ложь;
		Иначе
			Элементы.ТП_УслугаВБазе.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьПомещениеФайла()

&НаКлиенте
// Обработчик результата опроса команды "КомандаЗаполнитьВсе".
Процедура КомандаЗаполнитьУслугиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьУслугиНаСервере(ДополнительныеПараметры.МассивАдресов);
		// Блокировка командной панели "КП_УслугиВБазе".
		Если Объект.СвердловскаяОбласть_УслугиВОСЗН.Количество() = 0 Тогда
			Элементы.ТП_УслугаВБазе.Доступность = Ложь;
		Иначе
			Элементы.ТП_УслугаВБазе.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьВсеЗавершение()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" флага "Учитывать виды тарифов услуг".
//
Процедура мУчитыватьВидыТарифовУслугПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Имя каталога".
//
Процедура ИмяФайлаЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр                      = "Файл данных (*.dbf)|*.dbf";
	ДиалогВыбораФайла.Расширение                  = "dbf";
	ДиалогВыбораФайла.Заголовок                   = "Выберите файл справочника услуг";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	ДиалогВыбораФайла.ПолноеИмяФайла              = ИмяФайлаЗагрузки;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ИмяФайлаЗагрузкиНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла)));
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик результата работы диалога выбора файла.
//
Процедура ИмяФайлаЗагрузкиНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ИмяФайлаЗагрузки = ДиалогВыбораФайла.ПолноеИмяФайла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Имя каталога".
//
Процедура ИмяФайлаЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НачатьЗапускПриложения(Новый ОписаниеОповещения("ИмяФайлаЗагрузкиОткрытиеЗавершение", ЭтотОбъект), ИмяФайлаЗагрузки);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик результата запуска приложения
//
Процедура ИмяФайлаЗагрузкиОткрытиеЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	// Заглушка, т.к. в НачатьЗапускПриложения первый параметр обязательный
	ЭтаПеременнаяЧтобыНеРугаласьПроверкаКонфигурацииНаПустойОбработчик = Неопределено;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" табличного поля "ТП_УслугаВБазе".
//
Процедура ТП_УслугаВБазеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Устанавливаем запрет на добавление строк копированием.
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" табличного поля "ТП_УслугаВБазе".
//
Процедура ТП_УслугаВБазеПередУдалением(Элемент, Отказ)
	
	Если ПризнакУдаления Тогда
		Отказ = Истина;
		ПризнакУдаления = Ложь;
	Иначе
		// При удалении строки удаляем соответствующие записи в СвердловскаяОбласть_УслугиВБазе.
		УслугаВБазе              = Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе;
		ВидТарифа                = Элементы.ТП_УслугаВБазе.ТекущиеДанные.ВидТарифа;
		ИдентификаторУслугиВОСЗН = Элементы.СвердловскаяОбласть_УслугиВОСЗН.ТекущиеДанные.ИдентификаторУслугиВОСЗН;
		УслугаВОСЗН              = Элементы.СвердловскаяОбласть_УслугиВОСЗН.ТекущиеДанные.УслугаВОСЗН;
		
		Отбор = Новый Структура;
		Отбор.Вставить("УслугаВБазе",              УслугаВБазе);
		Отбор.Вставить("ИдентификаторУслугиВОСЗН", ИдентификаторУслугиВОСЗН);
		Отбор.Вставить("УслугаВОСЗН",              УслугаВОСЗН);
		Отбор.Вставить("ВидТарифа",                ВидТарифа);
		
		СтрокиУдаления = Объект.СвердловскаяОбласть_УслугиВБазе.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
			Объект.СвердловскаяОбласть_УслугиВБазе.Удалить(СтрокаУдаления);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередОкончаниемРедактирования" таблицы "УслугаВБазе".
//
Процедура ТП_УслугаВБазеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Добавление незаполненных полей недопустимо!");
		ПризнакУдаления = Истина;
		ТП_УслугаВБазе.Удалить(Элементы.ТП_УслугаВБазе.ТекущиеДанные);
		
		Если ЗначениеЗаполнено(ПредыдущаяУслуга) ИЛИ ЗначениеЗаполнено(ПредыдущийВидТарифа) Тогда
			Идентификатор   = Элементы.СвердловскаяОбласть_УслугиВОСЗН.ТекущиеДанные.ИдентификаторУслугиВОСЗН;
			ПризнакУдаления = Истина;
			Отбор = Новый Структура;
			Отбор.Вставить("ИдентификаторУслугиВОСЗН", Идентификатор);
			Отбор.Вставить("УслугаВБазе",              ПредыдущаяУслуга);
			Отбор.Вставить("ВидТарифа",                ПредыдущийВидТарифа);
			
			СтрокиУдаления = Объект.СвердловскаяОбласть_УслугиВБазе.НайтиСтроки(Отбор);
			
			Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
				Объект.СвердловскаяОбласть_УслугиВБазе.Удалить(СтрокаУдаления);
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриОкончанииРедактирования" табличного поля "ТП_УслугаВБазе".
//
Процедура ТП_УслугаВБазеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		// Добавляем запись в СвердловскаяОбласть_УслугиВБазе.
		УслугаВБазе              = Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе;
		ВидТарифа                = Элементы.ТП_УслугаВБазе.ТекущиеДанные.ВидТарифа;
		ИдентификаторУслугиВОСЗН = Элементы.СвердловскаяОбласть_УслугиВОСЗН.ТекущиеДанные.ИдентификаторУслугиВОСЗН;
		УслугаВОСЗН              = Элементы.СвердловскаяОбласть_УслугиВОСЗН.ТекущиеДанные.УслугаВОСЗН;
		
		Если НоваяСтрока Тогда
			НоваяСтрокаСоответствия                          = Объект.СвердловскаяОбласть_УслугиВБазе.Добавить();
			НоваяСтрокаСоответствия.УслугаВБазе              = УслугаВБазе;
			НоваяСтрокаСоответствия.ИдентификаторУслугиВОСЗН = ИдентификаторУслугиВОСЗН;
			НоваяСтрокаСоответствия.УслугаВОСЗН              = УслугаВОСЗН;
			НоваяСтрокаСоответствия.ВидТарифа                = ВидТарифа;
		Иначе
			Если НЕ ПредыдущаяУслуга = УслугаВБазе ИЛИ НЕ ПредыдущийВидТарифа = ВидТарифа Тогда
				Отбор = Новый Структура;
				Отбор.Вставить("ИдентификаторУслугиВОСЗН", ИдентификаторУслугиВОСЗН);
				Отбор.Вставить("УслугаВБазе",              ПредыдущаяУслуга);
				Отбор.Вставить("ВидТарифа",                ПредыдущийВидТарифа);
				
				НайденнаяСтрока = Объект.СвердловскаяОбласть_УслугиВБазе.НайтиСтроки(Отбор);
				Если НайденнаяСтрока.Количество() = 1 Тогда
					НайденнаяСтрока[0].УслугаВБазе = УслугаВБазе;
					НайденнаяСтрока[0].ВидТарифа   = ВидТарифа;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриНачалеРедактирования" табличного поля "ТП_УслугаВБазе".
//
Процедура ТП_УслугаВБазеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// Запоминаем предыдущее значение перезаписываемой строки.
	Если НЕ НоваяСтрока Тогда
		ПредыдущаяУслуга    = Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе;
		ПредыдущийВидТарифа = Элементы.ТП_УслугаВБазе.ТекущиеДанные.ВидТарифа;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "УслугаВБазе" таблицы "Услуги в Базе".
//
Процедура ТП_УслугаВБазеУслугаВБазеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Список уже выбранных услуг по данной услуге в ОСЗН.
	СписокВыбранныхУслуг = Новый СписокЗначений;
	СтрокиВыбранныхУслуг = Объект.СвердловскаяОбласть_УслугиВБазе.НайтиСтроки(Новый Структура("ИдентификаторУслугиВОСЗН", Элементы.СвердловскаяОбласть_УслугиВОСЗН.ТекущиеДанные.ИдентификаторУслугиВОСЗН));
	Для Каждого СтрокаВыбраннойУслуги Из СтрокиВыбранныхУслуг Цикл
		СписокВыбранныхУслуг.Добавить(СтрокаВыбраннойУслуги.УслугаВБазе);
	КонецЦикла;
	
	ВидСравненияВОтборе = ВидСравненияКомпоновкиДанных.НеВСписке;
	
	Форма = ПолучитьФорму("Справочник.КВП_Услуги.ФормаВыбора", Новый Структура("ТекущаяСтрока", Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе), Элемент);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Форма.Список.КомпоновщикНастроек.Настройки.Отбор, "Ссылка", СписокВыбранныхУслуг,
															ВидСравненияКомпоновкиДанных.НеВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" табличного поля "Услуги в ОСЗН".
//
Процедура СвердловскаяОбласть_УслугиВОСЗНПриАктивизацииСтроки(Элемент)
	
	// При активации строки УслугаВОСЗН, загружаем соответствия в УслугаВБазе. 
	ТП_УслугаВБазе.Очистить();
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		Идентификатор = Элемент.ТекущиеДанные.ИдентификаторУслугиВОСЗН;
		ЗаполнитьТаблицуУслугНаСервере(Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти