
&НаКлиенте
Перем НаименованияКолонокТаблицыНачисленийВыгружаемогоCSV;
&НаКлиенте
Перем НаименованияКолонокТаблицыОплатВыгружаемогоCSV;
&НаКлиенте
Перем РазделительCSV;
&НаКлиенте
Перем ПерваяСтрокаCSV;
&НаКлиенте
Перем ПерваяСтрокаОплатCSV;

//////////////////////////////////////////////////////////////////////////
// СОХРАНЯЕМЫЕ НАСТРОЙКИ

#Область РаботаСНастройками

&НаСервере
// Процедура восстановления настроек.
Процедура ВосстановитьНастройкиНаСервере()
	
	СтруктураПараметров = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("ПараметрыВыгрузки_СаратовскаяОбласть", "ПараметрыВыгрузки");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		СтруктураПараметров.Свойство("ИмяФайлаЗагрузки",                      Объект.ИмяФайлаЗагрузки);
		СтруктураПараметров.Свойство("ИмяКаталогаВыгрузки",                   Объект.ИмяКаталогаВыгрузки);
		СтруктураПараметров.Свойство("ВыводРеквизитаЛицевогоСчета",           Объект.ВыводРеквизитаЛицевогоСчета);
		СтруктураПараметров.Свойство("НеУчитыватьВНаименованииЛСПодстрокуЛС", НеУчитыватьВНаименованииЛСПодстрокуЛС);
		
		врТаблицаНастроек   = Новый ТаблицаЗначений;
		
		СтруктураПараметров.Свойство("СаратовскаяОбласть_ТаблицаНастроек", врТаблицаНастроек);
		Если ТипЗнч(врТаблицаНастроек) = Тип("ТаблицаЗначений") Тогда
			Объект.СаратовскаяОбласть_ТаблицаНастроек.Загрузить(врТаблицаНастроек);
		КонецЕсли;
		
		врТаблицаУслугВБазе = Новый ТаблицаЗначений;
		
		СтруктураПараметров.Свойство("СаратовскаяОбласть_УслугиВБазе", врТаблицаУслугВБазе);
		Если ТипЗнч(врТаблицаУслугВБазе) = Тип("ТаблицаЗначений") Тогда
			Объект.СаратовскаяОбласть_УслугиВБазе.Загрузить(врТаблицаУслугВБазе);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьНастройкиНаСервере()

&НаСервере
// Процедура сохранения настроек.
Процедура СохранитьНастройкиНаСервере()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяФайлаЗагрузки",                      Объект.ИмяФайлаЗагрузки);
	СтруктураПараметров.Вставить("ИмяКаталогаВыгрузки",                   Объект.ИмяКаталогаВыгрузки);
	СтруктураПараметров.Вставить("ВыводРеквизитаЛицевогоСчета",           Объект.ВыводРеквизитаЛицевогоСчета);
	СтруктураПараметров.Вставить("НеУчитыватьВНаименованииЛСПодстрокуЛС", НеУчитыватьВНаименованииЛСПодстрокуЛС);
	СтруктураПараметров.Вставить("СаратовскаяОбласть_ТаблицаНастроек",    Объект.СаратовскаяОбласть_ТаблицаНастроек.Выгрузить());
	СтруктураПараметров.Вставить("СаратовскаяОбласть_УслугиВБазе",        Объект.СаратовскаяОбласть_УслугиВБазе.Выгрузить());
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("ПараметрыВыгрузки_СаратовскаяОбласть", "ПараметрыВыгрузки", СтруктураПараметров);
	
КонецПроцедуры // СохранитьНастройкиНаСервере()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
	ВосстановитьНастройкиНаСервере();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	// Установливаем период и, если это возможно, восстанавливаем код организации.
	Если НЕ Объект.ИмяФайлаЗагрузки = "" Тогда
		ЧтениеИмениФайлаЗагрузки(Объект.ИмяФайлаЗагрузки);
	Иначе
		УстановитьПериод();
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьНастройкиНаСервере();
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПРЕДСТАВЛЕНИЯ МЕСЯЦА

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПериодСтрокой".
Процедура ПериодСтрокойПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Модифицированность);
	
КонецПроцедуры // ПериодСтрокойПриИзменении()

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ПериодСтрокой".
Процедура ПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("ОбновитьМесяцНачисления", ЭтотОбъект);
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.Период", "ПериодСтрокой", Истина, ОповещениеЗавершения);
	
КонецПроцедуры // ПериодСтрокойНачалоВыбора()

&НаКлиенте
// Обработка оповещения выбора значения поля "Период". 
// Устанавливает месяц начисления в таблице выгрузки.
//
Процедура ОбновитьМесяцНачисления(Результат, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если Результат Тогда
		Для Каждого Строка Из Объект.СаратовскаяОбласть_ТаблицаВыгрузки Цикл
			Строка.МЕСЯЦ = Формат(Объект.Период, "ДФ=MMyyyy");
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьМесяцНачисления()

&НаКлиенте
// Обработчик события "Регулирование" поля "ПериодСтрокой".
Процедура ПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Направление,
													  Модифицированность);
	
	ОбновитьМесяцНачисления(Модифицированность);
	
КонецПроцедуры // ПериодСтрокойРегулирование()

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "ПериодСтрокой".
Процедура ПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодСтрокойАвтоПодбор()

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "ПериодСтрокой".
Процедура ПериодСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодСтрокойОкончаниеВводаТекста()

////////////////////
// Входящий Zip

&НаКлиенте
// Процедура - обработчика события "НачалоВыбора" поля ввода "ИмяФайлаЗагрузки".
//
Процедура ИмяФайлаЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Фильтр                  = "Zip-архив (*.zip)|Z*.zip";
	ДиалогВыбораФайла.Расширение              = "zip";
	ДиалогВыбораФайла.Заголовок               = "Выберите файл запроса";
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.ИндексФильтра           = 0;
	ДиалогВыбораФайла.ПолноеИмяФайла          = "";
	
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.МножественныйВыбор          = Ложь;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ВыборФайлаЗагрузкиЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаЗагрузкиЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		Объект.ИмяФайлаЗагрузки = ВыбранныеФайлы[0];
		ЧтениеИмениФайлаЗагрузки(Объект.ИмяФайлаЗагрузки);
	КонецЕсли;

КонецПроцедуры // ИмяФайлаЗагрузкиНачалоВыбора()

&НаКлиенте
// Процедура - обработчика события "Открытие" поля ввода "ИмяФайлаЗагрузки".
//
Процедура ИмяФайлаЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УПЖКХ_ОбщегоНазначенияКлиент.ОткрытьСтраницуВБраузере("explorer " + Объект.ИмяФайлаЗагрузки);
	
КонецПроцедуры // ИмяФайлаЗагрузкиОткрытие()

////////////////////////
// Каталог выгрузки

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ИмяФайлаЗагрузки".
Процедура ИмяКаталогаВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла                             = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Заголовок                   = "Выбор каталога выгрузки";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ВыборФайлаВыгрузкиЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаВыгрузкиЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		Объект.ИмяКаталогаВыгрузки = ВыбранныеФайлы[0];
	КонецЕсли;

КонецПроцедуры // ИмяФайлаВыгрузкиНачалоВыбора()

&НаКлиенте
// Обработчик события "Открытие" поля "ИмяФайлаЗагрузки".
Процедура ИмяКаталогаВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УПЖКХ_ОбщегоНазначенияКлиент.ОткрытьСтраницуВБраузере("explorer " + Объект.ИмяКаталогаВыгрузки);
	
КонецПроцедуры // ИмяФайлаВыгрузкиОткрытие()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// РАБОТА С ВРЕМЕННЫМ ХРАНИЛИЩЕМ

#Область РаботаСВременнымХранилищем

&НаСервере
// Помещает данные во временное хранилище для передачи их в форму настройки.
//
// Возвращаемое значение:
//  Строка - адрес настроек в хранилище.
//
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("СаратовскаяОбласть_ТаблицаНастроек",    Объект.СаратовскаяОбласть_ТаблицаНастроек.Выгрузить());
	СтруктураНастроек.Вставить("СаратовскаяОбласть_УслугиВБазе",        Объект.СаратовскаяОбласть_УслугиВБазе.Выгрузить());
	СтруктураНастроек.Вставить("ВыводРеквизитаЛицевогоСчета",           Объект.ВыводРеквизитаЛицевогоСчета);
	СтруктураНастроек.Вставить("НеУчитыватьВНаименованииЛСПодстрокуЛС", НеУчитыватьВНаименованииЛСПодстрокуЛС);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции // ПоместитьДанныеВХранилище()

&НаСервере
// Получает таблицу услуг из временного хранилища.
Процедура ПолучитьНастройкиИзХранилища(АдресНастроекВХранилище)
	
	СтруктураНастроек = ПолучитьИзВременногоХранилища(АдресНастроекВХранилище);
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		
		СтруктураНастроек.Свойство("ВыводРеквизитаЛицевогоСчета",           Объект.ВыводРеквизитаЛицевогоСчета);
		СтруктураНастроек.Свойство("НеУчитыватьВНаименованииЛСПодстрокуЛС", НеУчитыватьВНаименованииЛСПодстрокуЛС);
		
		врТаблицаУслугВБазе = СтруктураНастроек.СаратовскаяОбласть_УслугиВБазе;
		Если ТипЗнч(врТаблицаУслугВБазе) = Тип("ТаблицаЗначений") Тогда
			
			// Анализируем - были ли изменения в таблице соответствий. Если были, то обновляем таблицу начислений с полной очисткой.
			Если Не УПЖКХ_ОбщегоНазначенияСервер.СравнитьТаблицыНаборовЗаписей(Объект.СаратовскаяОбласть_УслугиВБазе.Выгрузить(), врТаблицаУслугВБазе) Тогда
				Объект.СаратовскаяОбласть_УслугиВБазе.Загрузить(врТаблицаУслугВБазе);
			КонецЕсли;
			
		КонецЕсли;
		
		врТаблицаНастроек = СтруктураНастроек.СаратовскаяОбласть_ТаблицаНастроек;
		Если ТипЗнч(врТаблицаНастроек) = Тип("ТаблицаЗначений") Тогда
			Объект.СаратовскаяОбласть_ТаблицаНастроек.Загрузить(врТаблицаНастроек);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьНастройкиИзХранилища()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

////////////////////////
// Настройка

&НаКлиенте
// Обработчик команды "КомандаНастройка".
Процедура КомандаНастройка(Команда)
	
	АдресНастроекВХранилище = ПоместитьНастройкиВХранилище();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаНастройкаЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты.Форма.СаратовскаяОбласть_ФормаНастройки", Новый Структура("АдресНастроекВХранилище", АдресНастроекВХранилище), ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры // КомандаНастройка()

&НаКлиенте
// Обработчик результата опроса команды "КомандаНастройка".
Процедура КомандаНастройкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		ПолучитьНастройкиИзХранилища(Результат);
	КонецЕсли;
	
КонецПроцедуры // КомандаНастройкаЗавершение()

////////////////////
// Загрузить из файла

&НаКлиенте
// Обработчик команды "КомандаЗагрузить".
//
Процедура КомандаЗагрузить(Команда)
	
	Если ПустаяСтрока(Объект.ИмяФайлаЗагрузки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указан входящий ZIP-файл!");
		Возврат;
	КонецЕсли;
	
	Если Объект.СаратовскаяОбласть_ТаблицаВыгрузки.Количество() > 0
	 ИЛИ Объект.СаратовскаяОбласть_ТаблицаВыгрузкиОплат.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаЗагрузитьВопрос", ЭтотОбъект);
		
		ТекстВопроса = "Перед загрузкой табличные части будут очищены. Загрузить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		КомандаЗагрузитьПродолжение();
	КонецЕсли;
	
КонецПроцедуры // КомандаЗагрузить()

&НаКлиенте
// Обработчик результата опроса команды "КомандаЗагрузитьИзФайла".
//
Процедура КомандаЗагрузитьВопрос(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Объект.СаратовскаяОбласть_ТаблицаВыгрузки.Очистить();
		Объект.СаратовскаяОбласть_ТаблицаВыгрузкиОплат.Очистить();
		
		КомандаЗагрузитьПродолжение();
		
	КонецЕсли;
	
КонецПроцедуры // КомандаЗагрузитьВопрос()

&НаКлиенте
// Загрузка таблицы услуг в ОСЗН из dbf-файла.
//
Процедура КомандаЗагрузитьПродолжение()
	
	// Проверяем файл-запрос на существование.
	Файл = Новый Файл(Объект.ИмяФайлаЗагрузки);
	Файл.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ПроверкаСуществованияФайлаЗагрузкиЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСуществованияФайлаЗагрузкиЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	Если Не Существует Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Указанный файл не существует!");
		Возврат;
	КонецЕсли;
	
	// Откроем файл для чтения
	ZipАрхив = Новый ЧтениеZipФайла(Объект.ИмяФайлаЗагрузки);
	
	// Создаем временный каталог.
	ПараметрыОповещения = Новый Структура("ZipАрхив", ZipАрхив);
	Оповещение = Новый ОписаниеОповещения("КомандаЗагрузитьПродолжениеЗавершение", ЭтотОбъект, ПараметрыОповещения);
	ДополнительныеПараметрыОповещения = Новый Структура("Оповещение", Оповещение);
	ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьВременныйКаталогЗавершение", ЭтотОбъект, ДополнительныеПараметрыОповещения, "ОписаниеОповещенияОбработкаОшибки", ЭтотОбъект);
	
	НачатьСозданиеКаталога(ОписаниеОповещения, КаталогВременныхФайлов() + "tmpzip");

КонецПроцедуры

&НаКлиенте
Процедура ОписаниеОповещенияОбработкаОшибки() Экспорт
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ОписаниеОшибки());

КонецПроцедуры

&НаКлиенте
Процедура СоздатьВременныйКаталогЗавершение(ИмяКаталога, ДополнительныеПараметры) Экспорт
	
	Оповещение = ДополнительныеПараметры.Оповещение;
	
	Если Не ИмяКаталога = "" Тогда
		ВыполнитьОбработкуОповещения(Оповещение, ИмяКаталога);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаЗагрузитьПродолжениеЗавершение(Путь, ДополнительныеПараметры) Экспорт
	
	ДополнительныеПараметры.ZipАрхив.ИзвлечьВсе(Путь);
	
	// Ищем во временном каталоге файлы для загрузки.
	НачатьПоискФайлов(Новый ОписаниеОповещения("НайтиФайлыЗавершение", ЭтотОбъект, Новый Структура("Путь", Путь)), Путь, "*.csv");

КонецПроцедуры

&НаКлиенте
Процедура НайтиФайлыЗавершение(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	Путь = ДополнительныеПараметры.Путь;
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	
	// Выполняем чтение найденных файлов и построчно их читаем.
	Для Каждого Файл Из НайденныеФайлы Цикл
		
		ПараметрыОповещения = Новый Структура("Путь, ТекстовыйДокумент, НайденныеФайлы, Файл",
												Путь, ТекстовыйДокумент, НайденныеФайлы, Файл);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПрочитатьФайлЗавершение", ЭтотОбъект, ПараметрыОповещения);
		
		ТекстовыйДокумент.НачатьЧтение(ОписаниеОповещения, Файл.ПолноеИмя);
		Возврат;
		
	КонецЦикла;
	
	// Удаляем временный каталог со всем содержимым.
	НачатьУдалениеФайлов(Новый ОписаниеОповещения("УдалитьФайлыЗавершение", ЭтотОбъект, , "ОписаниеОповещенияОбработкаОшибки", ЭтотОбъект), Путь);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайлыЗавершение(ДополнительныеПараметры) Экспорт
	
	УстановитьСоответствияЛицевымСчетамВБазе();

КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьФайлЗавершение(ДополнительныеПараметры) Экспорт
	
	Путь              = ДополнительныеПараметры.Путь;
	ТекстовыйДокумент = ДополнительныеПараметры.ТекстовыйДокумент;
	НайденныеФайлы    = ДополнительныеПараметры.НайденныеФайлы;
	Файл              = ДополнительныеПараметры.Файл;
	
	Если ТекстовыйДокумент.КоличествоСтрок() > 0 Тогда
		
		Если Найти(Файл.ИмяБезРасширения, "ZO") > 0
			ИЛИ Найти(Файл.ИмяБезРасширения, "zo") > 0 Тогда
			
			Если ПерваяСтрокаCSV = "" Тогда
				ПерваяСтрокаCSV = ТекстовыйДокумент.ПолучитьСтроку(1);
			КонецЕсли;
			
			Если НаименованияКолонокТаблицыНачисленийВыгружаемогоCSV = "" Тогда
				НаименованияКолонокТаблицыНачисленийВыгружаемогоCSV = ТекстовыйДокумент.ПолучитьСтроку(2);
			КонецЕсли;
			
			Для НомерСтроки = 3 По ТекстовыйДокумент.КоличествоСтрок() Цикл
				
				ТекущаяСтрока = ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки);
				
				УдалитьПервыйИПоследнийСимволВСтроке(ТекущаяСтрока);
				
				Массив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекущаяСтрока, "';'");
				
				ДобавитьСтрокуИзФайлаВТаблицуВыгрузки(Массив);
				
			КонецЦикла;
			
		ИначеЕсли Найти(Файл.ИмяБезРасширения, "ZD") > 0
			ИЛИ Найти(Файл.ИмяБезРасширения, "zd") > 0 Тогда
			
			Если ПерваяСтрокаОплатCSV = "" Тогда
				ПерваяСтрокаОплатCSV = ТекстовыйДокумент.ПолучитьСтроку(1);
			КонецЕсли;
			
			Если НаименованияКолонокТаблицыОплатВыгружаемогоCSV = "" Тогда
				НаименованияКолонокТаблицыОплатВыгружаемогоCSV = ТекстовыйДокумент.ПолучитьСтроку(2);
			КонецЕсли;
			
			Для НомерСтроки = 3 По ТекстовыйДокумент.КоличествоСтрок() Цикл
				
				ТекущаяСтрока = ТекстовыйДокумент.ПолучитьСтроку(НомерСтроки);
				
				УдалитьПервыйИПоследнийСимволВСтроке(ТекущаяСтрока);
				
				Массив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекущаяСтрока, "';'");
				
				ДобавитьСтрокуИзФайлаВТаблицуВыгрузки(Массив, Ложь);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ИндексЭлемента = НайденныеФайлы.Найти(Файл);
	
	Если Не ИндексЭлемента = Неопределено Тогда
		НайденныеФайлы.Удалить(ИндексЭлемента);
	КонецЕсли;
	
	НайтиФайлыЗавершение(НайденныеФайлы, Новый Структура("Путь", Путь));

КонецПроцедуры // КомандаЗагрузитьНаСервере()

&НаКлиенте
// Добавляет в таблицу выгрузки значения, полученные из строки файла.
//
// Параметры:
//  Массив - Массив - массив строк-значений, полученных при чтении форматной строки CSV-файла.
//
Процедура ДобавитьСтрокуИзФайлаВТаблицуВыгрузки(Массив, ЭтоТаблицаНачислений = Истина)
	
	Если Массив.Количество() > 0 Тогда
		
		Если ЭтоТаблицаНачислений Тогда
			НоваяСтрока = Объект.СаратовскаяОбласть_ТаблицаВыгрузки.Добавить();
		Иначе
			НоваяСтрока = Объект.СаратовскаяОбласть_ТаблицаВыгрузкиОплат.Добавить();
		КонецЕсли;
		
		НоваяСтрока.НОМЕР_ЖП    = Массив[1];
		НоваяСтрока.ЛИЦ_СЧ      = Массив[2];
		НоваяСтрока.РАЙОН       = Массив[3];
		НоваяСтрока.НАС_П_ТИП   = Массив[4];
		НоваяСтрока.НАС_П_НАИМ  = Массив[5];
		НоваяСтрока.УЛ_ТИП      = Массив[6];
		НоваяСтрока.УЛ_НАИМ     = Массив[7];
		НоваяСтрока.ДОМ         = Массив[8];
		НоваяСтрока.КОРПУС      = Массив[9];
		НоваяСтрока.КВАРТИРА    = Массив[10];
		НоваяСтрока.КОМНАТА     = Массив[11];
		НоваяСтрока.МЕСЯЦ       = Массив[12];
		НоваяСтрока.ПРИЗ_ЖП     = Массив[13];
		НоваяСтрока.ПРИЗ_ЛС     = Массив[14];
		
		Если Объект.ВыводРеквизитаЛицевогоСчета = 1 И НеУчитыватьВНаименованииЛСПодстрокуЛС Тогда
			НоваяСтрока.ЛицевойСчетНаименование = "л/с №" + НоваяСтрока.ЛИЦ_СЧ;
		Иначе
			НоваяСтрока.ЛицевойСчетНаименование = НоваяСтрока.ЛИЦ_СЧ;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуИзФайлаВТаблицуВыгрузки()

&НаСервере
// Устанавливает соответствие лицевых счетов в ОСЗН лицевым счетам в базе
// и для найденных соответствий определяет количество проживающих.
//
Процедура УстановитьСоответствияЛицевымСчетамВБазе()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаВыгрузки.НОМЕР_ЖП,
	|	ТаблицаВыгрузки.ЛИЦ_СЧ,
	|	ТаблицаВыгрузки.РАЙОН,
	|	ТаблицаВыгрузки.НАС_П_ТИП,
	|	ТаблицаВыгрузки.НАС_П_НАИМ,
	|	ТаблицаВыгрузки.УЛ_ТИП,
	|	ТаблицаВыгрузки.УЛ_НАИМ,
	|	ТаблицаВыгрузки.ДОМ,
	|	ТаблицаВыгрузки.КОРПУС,
	|	ТаблицаВыгрузки.КВАРТИРА,
	|	ТаблицаВыгрузки.КОМНАТА,
	|	ТаблицаВыгрузки.МЕСЯЦ,
	|	ТаблицаВыгрузки.ПРИЗ_ЖП,
	|	ТаблицаВыгрузки.ПРИЗ_ЛС,
	|	ТаблицаВыгрузки.ЛицевойСчетНаименование
	|ПОМЕСТИТЬ втТаблицаВыгрузки
	|ИЗ
	|	&ТаблицаВыгрузки КАК ТаблицаВыгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Наименование,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Адрес КАК Помещение,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Адрес.Владелец КАК Здание,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Адрес.КоличествоКомнат КАК КоличествоКомнат
	|ПОМЕСТИТЬ втЛицевыеСчета
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&ДатаКонца,
	|			" + ?(Объект.ВыводРеквизитаЛицевогоСчета = 0, "ЛицевойСчет.Код",?(Объект.ВыводРеквизитаЛицевогоСчета = 1, "ЛицевойСчет.Наименование", "ЛицевойСчет.Идентификатор")) + " В
	|				(ВЫБРАТЬ
	|					втТаблицаВыгрузки.ЛицевойСчетНаименование
	|				ИЗ
	|					втТаблицаВыгрузки КАК втТаблицаВыгрузки)) КАК КВП_ЛицевыеСчетаСрезПоследних
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаВыгрузки.НОМЕР_ЖП,
	|	втТаблицаВыгрузки.ЛИЦ_СЧ,
	|	втТаблицаВыгрузки.РАЙОН,
	|	втТаблицаВыгрузки.НАС_П_ТИП,
	|	втТаблицаВыгрузки.НАС_П_НАИМ,
	|	втТаблицаВыгрузки.УЛ_ТИП,
	|	втТаблицаВыгрузки.УЛ_НАИМ,
	|	втТаблицаВыгрузки.ДОМ,
	|	втТаблицаВыгрузки.КОРПУС,
	|	втТаблицаВыгрузки.КВАРТИРА,
	|	втТаблицаВыгрузки.КОМНАТА,
	|	втТаблицаВыгрузки.МЕСЯЦ,
	|	втТаблицаВыгрузки.ПРИЗ_ЖП,
	|	втТаблицаВыгрузки.ПРИЗ_ЛС,
	|	втТаблицаВыгрузки.ЛицевойСчетНаименование,
	|	ЕСТЬNULL(втЛицевыеСчета.ЛицевойСчет, ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)) КАК ЛицевойСчет,
	|	ЕСТЬNULL(втЛицевыеСчета.Помещение, ЗНАЧЕНИЕ(Справочник.УПЖКХ_Помещения.ПустаяСсылка)) КАК Помещение,
	|	ЕСТЬNULL(втЛицевыеСчета.Здание, ЗНАЧЕНИЕ(Справочник.КВП_Здания.ПустаяСсылка)) КАК Здание,
	|	ЕСТЬNULL(втЛицевыеСчета.КоличествоКомнат, 0) КАК КоличествоКомнат
	|ПОМЕСТИТЬ втДействующиеЛС
	|ИЗ
	|	втТаблицаВыгрузки КАК втТаблицаВыгрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЛицевыеСчета КАК втЛицевыеСчета
	|		ПО втТаблицаВыгрузки.ЛицевойСчетНаименование = втЛицевыеСчета.ЛицевойСчетНаименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.ЛицевойСчет,
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.КоличествоПроживающих
	|ПОМЕСТИТЬ втУчетКоличестваЖильцов
	|ИЗ
	|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втЛицевыеСчета.ЛицевойСчет
	|				ИЗ
	|					втЛицевыеСчета КАК втЛицевыеСчета)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец) КАК КоличествоПроживающих
	|ПОМЕСТИТЬ втСведенияОПроживающих
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втДействующиеЛС.ЛицевойСчет
	|				ИЗ
	|					втДействующиеЛС КАК втДействующиеЛС)) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Помещение,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник) КАК КолВоСобственников
	|ПОМЕСТИТЬ втКолВоСобственников
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(
	|			&ДатаКонца,
	|			Помещение В
	|				(ВЫБРАТЬ
	|					втДействующиеЛС.Помещение
	|				ИЗ
	|					втДействующиеЛС КАК втДействующиеЛС)) КАК УПЖКХ_СобственникиПомещенийСрезПоследних
	|ГДЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Действует
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА КВП_БлагоустройствоОбъектов.ВидБлагоустройства = ЗНАЧЕНИЕ(Справочник.КВП_ВидыБлагоустройстваОбъектов.Плита)
	|				ТОГДА ВЫБОР
	|						КОГДА КВП_БлагоустройствоОбъектов.Значение = ЗНАЧЕНИЕ(Перечисление.КВП_Плита.Электрическая)
	|							ТОГДА 2
	|						ИНАЧЕ ВЫБОР
	|								КОГДА КВП_БлагоустройствоОбъектов.Значение = ЗНАЧЕНИЕ(Перечисление.КВП_Плита.Газовая)
	|									ТОГДА 1
	|								ИНАЧЕ 5
	|							КОНЕЦ
	|					КОНЕЦ
	|			ИНАЧЕ 5
	|		КОНЕЦ) КАК Плита,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА КВП_БлагоустройствоОбъектов.ВидБлагоустройства = ЗНАЧЕНИЕ(Справочник.КВП_ВидыБлагоустройстваОбъектов.Лифт)
	|				ТОГДА ВЫБОР
	|						КОГДА КВП_БлагоустройствоОбъектов.Значение В (ИСТИНА, ""ДА"", ""да"", ""Да"", ""Имеется"", ""Присутсвует"", ""Есть"", ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ДаНет.Да))
	|							ТОГДА 1
	|						ИНАЧЕ ВЫБОР
	|								КОГДА КВП_БлагоустройствоОбъектов.Значение В (ЛОЖЬ, ""НЕТ"", ""нет"", ""нет"", ""Не имеется"", ""Отсутствует"", ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ДаНет.Нет))
	|									ТОГДА 2
	|								ИНАЧЕ 5
	|							КОНЕЦ
	|					КОНЕЦ
	|			ИНАЧЕ 5
	|		КОНЕЦ) КАК Лифт,
	|	КВП_БлагоустройствоОбъектов.Объект КАК Здание
	|ПОМЕСТИТЬ втСвойстваЗданий
	|ИЗ
	|	РегистрСведений.КВП_БлагоустройствоОбъектов КАК КВП_БлагоустройствоОбъектов
	|ГДЕ
	|	КВП_БлагоустройствоОбъектов.Объект В
	|			(ВЫБРАТЬ
	|				втДействующиеЛС.Здание
	|			ИЗ
	|				втДействующиеЛС КАК втДействующиеЛС)
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_БлагоустройствоОбъектов.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА КВП_БлагоустройствоОбъектов.ВидБлагоустройства = ЗНАЧЕНИЕ(Справочник.КВП_ВидыБлагоустройстваОбъектов.Плита)
	|				ТОГДА ВЫБОР
	|						КОГДА КВП_БлагоустройствоОбъектов.Значение = ЗНАЧЕНИЕ(Перечисление.КВП_Плита.Электрическая)
	|							ТОГДА 2
	|						ИНАЧЕ ВЫБОР
	|								КОГДА КВП_БлагоустройствоОбъектов.Значение = ЗНАЧЕНИЕ(Перечисление.КВП_Плита.Газовая)
	|									ТОГДА 1
	|								ИНАЧЕ 5
	|							КОНЕЦ
	|					КОНЕЦ
	|			ИНАЧЕ 5
	|		КОНЕЦ) КАК Плита,
	|	КВП_БлагоустройствоОбъектов.Объект КАК Помещение
	|ПОМЕСТИТЬ втСвойстваПомещений
	|ИЗ
	|	РегистрСведений.КВП_БлагоустройствоОбъектов КАК КВП_БлагоустройствоОбъектов
	|ГДЕ
	|	КВП_БлагоустройствоОбъектов.Объект В
	|			(ВЫБРАТЬ
	|				втДействующиеЛС.Помещение
	|			ИЗ
	|				втДействующиеЛС КАК втДействующиеЛС)
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_БлагоустройствоОбъектов.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДействующиеЛС.ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_Помещения.Ссылка) КАК Доля
	|ПОМЕСТИТЬ втДанныеИзСправочника
	|ИЗ
	|	втДействующиеЛС КАК втДействующиеЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
	|		ПО втДействующиеЛС.Помещение = УПЖКХ_Помещения.Родитель
	|ГДЕ
	|	НЕ УПЖКХ_Помещения.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	втДействующиеЛС.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДействующиеЛС.ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.Комната) КАК Доля
	|ПОМЕСТИТЬ втДанныеИзСведений
	|ИЗ
	|	втДействующиеЛС КАК втДействующиеЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ПривязанныеКЛицевомуСчетуКомнаты.СрезПоследних(
	|				&ДатаКонца,
	|				ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втДействующиеЛС.ЛицевойСчет
	|					ИЗ
	|						втДействующиеЛС КАК втДействующиеЛС)) КАК УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних
	|		ПО втДействующиеЛС.ЛицевойСчет = УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.ЛицевойСчет
	|ГДЕ
	|	УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.Привязка
	|
	|СГРУППИРОВАТЬ ПО
	|	втДействующиеЛС.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель, 0) = 0
	|				ТОГДА 0
	|			ИНАЧЕ КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель / КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель * ЕСТЬNULL(КВП_ПлощадьПомещенияСрезПоследних.Площадь, 0)
	|		КОНЕЦ) КАК ОбщаяПлощадь
	|ПОМЕСТИТЬ втДанныеОПлощадях
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|			&ДатаКонца,
	|			Объект В
	|					(ВЫБРАТЬ
	|						втДействующиеЛС.Помещение
	|					ИЗ
	|						втДействующиеЛС КАК втДействующиеЛС)
	|				И ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)) КАК КВП_ПлощадьПомещенияСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(
	|				&ДатаКонца,
	|				ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втДействующиеЛС.ЛицевойСчет
	|					ИЗ
	|						втДействующиеЛС КАК втДействующиеЛС)) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
	|		ПО КВП_ПлощадьПомещенияСрезПоследних.Объект = КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.Объект
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДействующиеЛС.НОМЕР_ЖП,
	|	втДействующиеЛС.ЛИЦ_СЧ,
	|	втДействующиеЛС.РАЙОН,
	|	втДействующиеЛС.НАС_П_ТИП,
	|	втДействующиеЛС.НАС_П_НАИМ,
	|	втДействующиеЛС.УЛ_ТИП,
	|	втДействующиеЛС.УЛ_НАИМ,
	|	втДействующиеЛС.ДОМ,
	|	втДействующиеЛС.КОРПУС,
	|	втДействующиеЛС.КВАРТИРА,
	|	втДействующиеЛС.КОМНАТА,
	|	втДействующиеЛС.МЕСЯЦ,
	|	втДействующиеЛС.ПРИЗ_ЖП,
	|	втДействующиеЛС.ПРИЗ_ЛС,
	|	ВЫБОР
	|		КОГДА &УказыватьКоличествоПрожИЗарегЧислами = ИСТИНА
	|			ТОГДА ЕСТЬNULL(втУчетКоличестваЖильцов.КоличествоПроживающих, 0)
	|		ИНАЧЕ ЕСТЬNULL(втСведенияОПроживающих.КоличествоПроживающих, 0)
	|	КОНЕЦ КАК КОЛ_ПРОЖ,
	|	ЕСТЬNULL(втКолВоСобственников.КолВоСобственников, 0) КАК КОЛ_СОБСТ,
	|	0 КАК Л_СЧ_ИЗМ,
	|	ДАТАВРЕМЯ(1990, 1, 1) КАК Л_СЧ_ИЗМ_Д,
	|	ЕСТЬNULL(втСвойстваПомещений.Плита, ЕСТЬNULL(втСвойстваЗданий.Плита, 5)) КАК ПЛИТА,
	|	втДействующиеЛС.Здание.Этажей КАК ЭТАЖНОСТЬ,
	|	ЕСТЬNULL(втСвойстваЗданий.Лифт, 5) КАК ЛИФТ,
	|	ВЫБОР
	|		КОГДА НЕ втДанныеИзСведений.Доля = 0
	|			ТОГДА втДанныеИзСведений.Доля
	|		КОГДА НЕ втДанныеИзСправочника.Доля = 0
	|			ТОГДА втДанныеИзСправочника.Доля
	|		ИНАЧЕ втДействующиеЛС.КоличествоКомнат
	|	КОНЕЦ КАК КОМН,
	|	ЕСТЬNULL(втДанныеОПлощадях.ОбщаяПлощадь, 0) КАК S,
	|	ЕСТЬNULL(втДанныеОПлощадях.ОбщаяПлощадь, 0) КАК S_ОТАПЛ,
	|	втДействующиеЛС.ЛицевойСчет,
	|	втДействующиеЛС.ЛицевойСчетНаименование
	|ИЗ
	|	втДействующиеЛС КАК втДействующиеЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОПроживающих КАК втСведенияОПроживающих
	|		ПО втДействующиеЛС.ЛицевойСчет = втСведенияОПроживающих.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУчетКоличестваЖильцов КАК втУчетКоличестваЖильцов
	|		ПО втДействующиеЛС.ЛицевойСчет = втУчетКоличестваЖильцов.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКолВоСобственников КАК втКолВоСобственников
	|		ПО втДействующиеЛС.Помещение = втКолВоСобственников.Помещение
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСвойстваЗданий КАК втСвойстваЗданий
	|		ПО втДействующиеЛС.Здание = втСвойстваЗданий.Здание
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСвойстваПомещений КАК втСвойстваПомещений
	|		ПО втДействующиеЛС.Помещение = втСвойстваПомещений.Помещение
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеИзСправочника КАК втДанныеИзСправочника
	|		ПО втДействующиеЛС.ЛицевойСчет = втДанныеИзСправочника.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеИзСведений КАК втДанныеИзСведений
	|		ПО втДействующиеЛС.ЛицевойСчет = втДанныеИзСведений.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеОПлощадях КАК втДанныеОПлощадях
	|		ПО втДействующиеЛС.ЛицевойСчет = втДанныеОПлощадях.ЛицевойСчет";
	
	Запрос.УстановитьПараметр("ТаблицаВыгрузки", Объект.СаратовскаяОбласть_ТаблицаВыгрузки.Выгрузить());
	Запрос.УстановитьПараметр("ДатаКонца",       КонецМесяца(Объект.Период));
	
	Запрос.УстановитьПараметр("УказыватьКоличествоПрожИЗарегЧислами", Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Получить());
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Объект.СаратовскаяОбласть_ТаблицаВыгрузки.Загрузить(Результат);
	
	// О не найденных соответствиях в базе выводим сообщения.
	Для Каждого Строка Из Объект.СаратовскаяОбласть_ТаблицаВыгрузки Цикл
		Если Строка.ЛицевойСчет.Пустая() Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("В строке №" + Строка.НомерСтроки + " таблицы начислений не найдено соответствие лицевому счету в базе!");
		КонецЕсли;
	КонецЦикла;
	
	// таблица выгрузки оплат
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаВыгрузки.НОМЕР_ЖП,
	|	ТаблицаВыгрузки.ЛИЦ_СЧ,
	|	ТаблицаВыгрузки.РАЙОН,
	|	ТаблицаВыгрузки.НАС_П_ТИП,
	|	ТаблицаВыгрузки.НАС_П_НАИМ,
	|	ТаблицаВыгрузки.УЛ_ТИП,
	|	ТаблицаВыгрузки.УЛ_НАИМ,
	|	ТаблицаВыгрузки.ДОМ,
	|	ТаблицаВыгрузки.КОРПУС,
	|	ТаблицаВыгрузки.КВАРТИРА,
	|	ТаблицаВыгрузки.КОМНАТА,
	|	ТаблицаВыгрузки.МЕСЯЦ,
	|	ТаблицаВыгрузки.ПРИЗ_ЖП,
	|	ТаблицаВыгрузки.ПРИЗ_ЛС,
	|	ТаблицаВыгрузки.ЛицевойСчетНаименование
	|ПОМЕСТИТЬ втТаблицаВыгрузки
	|ИЗ
	|	&ТаблицаВыгрузки КАК ТаблицаВыгрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Наименование
	|ПОМЕСТИТЬ втЛицевыеСчета
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&ДатаКонца,
	|			" + ?(Объект.ВыводРеквизитаЛицевогоСчета = 0, "ЛицевойСчет.Код",?(Объект.ВыводРеквизитаЛицевогоСчета = 1, "ЛицевойСчет.Наименование", "ЛицевойСчет.Идентификатор")) + " В
	|				(ВЫБРАТЬ
	|					втТаблицаВыгрузки.ЛицевойСчетНаименование
	|				ИЗ
	|					втТаблицаВыгрузки КАК втТаблицаВыгрузки)) КАК КВП_ЛицевыеСчетаСрезПоследних
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаВыгрузки.НОМЕР_ЖП,
	|	втТаблицаВыгрузки.ЛИЦ_СЧ,
	|	втТаблицаВыгрузки.РАЙОН,
	|	втТаблицаВыгрузки.НАС_П_ТИП,
	|	втТаблицаВыгрузки.НАС_П_НАИМ,
	|	втТаблицаВыгрузки.УЛ_ТИП,
	|	втТаблицаВыгрузки.УЛ_НАИМ,
	|	втТаблицаВыгрузки.ДОМ,
	|	втТаблицаВыгрузки.КОРПУС,
	|	втТаблицаВыгрузки.КВАРТИРА,
	|	втТаблицаВыгрузки.КОМНАТА,
	|	втТаблицаВыгрузки.МЕСЯЦ,
	|	втТаблицаВыгрузки.ПРИЗ_ЖП,
	|	втТаблицаВыгрузки.ПРИЗ_ЛС,
	|	втТаблицаВыгрузки.ЛицевойСчетНаименование,
	|	ЕСТЬNULL(втЛицевыеСчета.ЛицевойСчет, ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)) КАК ЛицевойСчет
	|ИЗ
	|	втТаблицаВыгрузки КАК втТаблицаВыгрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЛицевыеСчета КАК втЛицевыеСчета
	|		ПО втТаблицаВыгрузки.ЛицевойСчетНаименование = втЛицевыеСчета.ЛицевойСчетНаименование";
	
	Запрос.УстановитьПараметр("ТаблицаВыгрузки", Объект.СаратовскаяОбласть_ТаблицаВыгрузкиОплат.Выгрузить());
	Запрос.УстановитьПараметр("ДатаКонца",       КонецМесяца(Объект.Период));
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Объект.СаратовскаяОбласть_ТаблицаВыгрузкиОплат.Загрузить(Результат);
	
	// О не найденных соответствиях в базе выводим сообщения.
	Для Каждого Строка Из Объект.СаратовскаяОбласть_ТаблицаВыгрузкиОплат Цикл
		Если Строка.ЛицевойСчет.Пустая() Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("В строке №" + Строка.НомерСтроки + " таблицы оплат не найдено соответствие лицевому счету в базе!");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УстановитьСоответствияЛицевымСчетамВБазе()

////////////////////
// Заполнить

&НаКлиенте
// Обработчик команды "КомандаЗаполнить".
//
Процедура КомандаЗаполнить(Команда)
	
	ТекстОшибки = ПроверкаУсловийДляЗаполненияТаблиц();
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ПолучитьТаблицыНачисленийИОплатНаСервере();
	
КонецПроцедуры // КомандаЗаполнить()

&НаКлиенте
// Проверяет наличие всех необходимых данных для заполнения таблиц выгрузки.
//
Функция ПроверкаУсловийДляЗаполненияТаблиц()
	
	ТекстОшибки = "";
	
	Если НЕ ЗначениеЗаполнено(Объект.Период) Тогда
		ТекстОшибки = ТекстОшибки + "Не указан период выгрузки!";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не указана организация!", "Не указана организация!");
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.КодОрганизации) Тогда
		ТекстОшибки = ТекстОшибки + "Не указан код организации!";
	КонецЕсли;
	
	Если Объект.СаратовскаяОбласть_УслугиВБазе.Количество() = 0 Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не заполнена таблица соответствия услуг на форме настроек!", "Не заполнена таблица соответствия услуг на форме настроек!");
	КонецЕсли;
	
	Если Объект.СаратовскаяОбласть_ТаблицаВыгрузки.Количество() = 0 И Объект.СаратовскаяОбласть_ТаблицаВыгрузкиОплат.Количество() = 0 Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Таблицы сведения о начислениях и оплатах не заполнены. Необходимо сначала загрузить данные из входящего ZIP-файла!", "Таблицы сведения о начислениях и оплатах не заполнены. Необходимо сначала загрузить данные из входящего ZIP-файла!");
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции // ПроверкаУсловийДляЗаполненияТаблиц

&НаСервере
// Получает и заполняет таблицы начислений и оплат по используемым услугам и определенным лицевым счетам.
//
Процедура ПолучитьТаблицыНачисленийИОплатНаСервере()
	
	// заполнение таблицы начисления.
	ТаблицаНачислений = ПолучитьТаблицуНачисленийНаСервере();
	
	Отбор = Новый Структура;
	Отбор.Вставить("ЛицевойСчет");
	Отбор.Вставить("Организация");
	
	ТаблицаДляЗаполнения = Объект.СаратовскаяОбласть_ТаблицаВыгрузки.Выгрузить().СкопироватьКолонки();
	
	Для Каждого СтрокаНачислений Из Объект.СаратовскаяОбласть_ТаблицаВыгрузки Цикл
		
		Отбор.Организация = Объект.Организация;
		
		Если ЗначениеЗаполнено(СтрокаНачислений.ЛицевойСчет) Тогда
			
			Если ЗначениеЗаполнено(СтрокаНачислений.УСЛУГА) Тогда
				ОтборСуществующихСтрок = Новый Структура;
				ОтборСуществующихСтрок.Вставить("ЛицевойСчет", СтрокаНачислений.ЛицевойСчет);
				ОтборСуществующихСтрок.Вставить("УСЛУГА",      СтрокаНачислений.УСЛУГА);
				ОтборСуществующихСтрок.Вставить("Организация", Объект.Организация);
				Если ТаблицаДляЗаполнения.НайтиСтроки(ОтборСуществующихСтрок).Количество() = 0 Тогда
					ЗаполнитьЗначенияСвойств(ТаблицаДляЗаполнения.Добавить(), СтрокаНачислений);
				КонецЕсли;
			КонецЕсли;
			
			Отбор.ЛицевойСчет = СтрокаНачислений.ЛицевойСчет;
			
			НайденныеСтроки = ТаблицаНачислений.НайтиСтроки(Отбор);
			Для Каждого ТекСтрока ИЗ НайденныеСтроки Цикл
				ОтборСуществующихСтрок = Новый Структура;
				ОтборСуществующихСтрок.Вставить("ЛицевойСчет", ТекСтрока.ЛицевойСчет);
				ОтборСуществующихСтрок.Вставить("УСЛУГА",      ТекСтрока.УСЛУГА);
				ОтборСуществующихСтрок.Вставить("Организация", Объект.Организация);
				Если ТаблицаДляЗаполнения.НайтиСтроки(ОтборСуществующихСтрок).Количество() = 0 Тогда
					НоваяСтрока = ТаблицаДляЗаполнения.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачислений);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока, , "ЛицевойСчет");
				КонецЕсли;
			КонецЦикла;
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				Отбор.Организация = Справочники.Организации.ПустаяСсылка();
				
				НайденныеСтрокиСПустойОрганизацией = ТаблицаНачислений.НайтиСтроки(Отбор);
				Для Каждого ТекСтрока ИЗ НайденныеСтрокиСПустойОрганизацией Цикл
					ОтборСуществующихСтрок = Новый Структура;
					ОтборСуществующихСтрок.Вставить("ЛицевойСчет", ТекСтрока.ЛицевойСчет);
					ОтборСуществующихСтрок.Вставить("УСЛУГА",      ТекСтрока.УСЛУГА);
					ОтборСуществующихСтрок.Вставить("Организация", Объект.Организация);
					Если ТаблицаДляЗаполнения.НайтиСтроки(ОтборСуществующихСтрок).Количество() = 0 Тогда
						НоваяСтрока = ТаблицаДляЗаполнения.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНачислений);
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока, , "ЛицевойСчет");
						НоваяСтрока.Организация = Объект.Организация;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СтрокаНачислений.УСЛУГА) И НайденныеСтроки.Количество() = 0 Тогда
				ЗаполнитьЗначенияСвойств(ТаблицаДляЗаполнения.Добавить(), СтрокаНачислений);
			КонецЕсли;
		Иначе
			ЗаполнитьЗначенияСвойств(ТаблицаДляЗаполнения.Добавить(), СтрокаНачислений);
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.СаратовскаяОбласть_ТаблицаВыгрузки.Загрузить(ТаблицаДляЗаполнения);
	
	// заполнение таблицы оплат.
	ТаблицаНачислений = ПолучитьТаблицуОплатНаСервере();
	
	Отбор = Новый Структура;
	Отбор.Вставить("ЛицевойСчет");
	Отбор.Вставить("Организация");
	
	Отбор.Организация = Объект.Организация;
	
	ТаблицаДляЗаполнения = Объект.СаратовскаяОбласть_ТаблицаВыгрузкиОплат.Выгрузить().СкопироватьКолонки();
	
	Для Каждого СтрокаОплат Из Объект.СаратовскаяОбласть_ТаблицаВыгрузкиОплат Цикл
		
		Если ЗначениеЗаполнено(СтрокаОплат.ЛицевойСчет) Тогда
			Отбор.ЛицевойСчет = СтрокаОплат.ЛицевойСчет;
			
			НайденныеСтроки = ТаблицаНачислений.НайтиСтроки(Отбор);
			Если НайденныеСтроки.Количество() > 0 Тогда
				Для Каждого ТекСтрока ИЗ НайденныеСтроки Цикл
					НоваяСтрока = ТаблицаДляЗаполнения.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОплат);
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока, , "ЛицевойСчет");
				КонецЦикла;
			Иначе
				ЗаполнитьЗначенияСвойств(ТаблицаДляЗаполнения.Добавить(), СтрокаОплат);
			КонецЕсли;
		Иначе
			ЗаполнитьЗначенияСвойств(ТаблицаДляЗаполнения.Добавить(), СтрокаОплат);
		КонецЕсли;
		
	КонецЦикла;
	
	Объект.СаратовскаяОбласть_ТаблицаВыгрузкиОплат.Загрузить(ТаблицаДляЗаполнения);
	
КонецПроцедуры // ПолучитьТаблицыНачисленийИОплатНаСервере()

&НаСервере
// Возвращает таблицу начислений по используемым услугам и определенным лицевым счетам.
//
// Возвращаемое значение:
//  Результат - ТаблицаЗначений - таблица начислений.
//
Функция ПолучитьТаблицуНачисленийНаСервере()
	
	// Таблица используемых услуг в базе.
	МассивСтрокИспользуемыхУслугВБазе = Объект.СаратовскаяОбласть_УслугиВБазе.НайтиСтроки(Новый Структура("Использовать", Истина));
	УслугиВБазеСКодами = Объект.СаратовскаяОбласть_УслугиВБазе.Выгрузить(МассивСтрокИспользуемыхУслугВБазе, "УслугаВБазе, КодУслуги, СпособНачислений");
	
	УслугиСкодом123 = УслугиВБазеСКодами.НайтиСтроки(Новый Структура("КодУслуги", "123"));
	УслугиСкодом124 = УслугиВБазеСКодами.НайтиСтроки(Новый Структура("КодУслуги", "124"));
	СоставныеУслугиСкодом123 = УслугиВБазеСКодами.НайтиСтроки(Новый Структура("КодУслуги", "134"));
	Для Каждого СтрокаСоставныеУслугиСкодом123 ИЗ УслугиВБазеСКодами.НайтиСтроки(Новый Структура("КодУслуги", "141")) Цикл
		СоставныеУслугиСкодом123.Добавить(СтрокаСоставныеУслугиСкодом123);
	КонецЦикла;
	СоставныеУслугиСкодом124 = УслугиВБазеСКодами.НайтиСтроки(Новый Структура("КодУслуги", "131"));
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ЛицевыеСчета.Ссылка КАК ЛицевойСчет,
	|	КВП_ЛицевыеСчета.Адрес КАК Помещение,
	|	КВП_ЛицевыеСчета.Адрес.Владелец КАК Здание
	|ПОМЕСТИТЬ втЛицевыеСчета
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	КВП_ЛицевыеСчета.Ссылка В(&ЛицевыеСчета)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УслугиСКодами.УслугаВБазе,
	|	УслугиСКодами.КодУслуги,
	|	УслугиСКодами.СпособНачислений
	|ПОМЕСТИТЬ втУслугиСКодами
	|ИЗ
	|	&УслугиСКодами КАК УслугиСКодами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛицевыеСчета.ЛицевойСчет,
	|	втЛицевыеСчета.Помещение,
	|	втЛицевыеСчета.Здание,
	|	втУслугиСКодами.КодУслуги
	|ПОМЕСТИТЬ втЛицевыеСчетаСКодамиУслуг
	|ИЗ
	|	втЛицевыеСчета КАК втЛицевыеСчета,
	|	втУслугиСКодами КАК втУслугиСКодами
	|
	|СГРУППИРОВАТЬ ПО
	|	втЛицевыеСчета.ЛицевойСчет,
	|	втЛицевыеСчета.Помещение,
	|	втЛицевыеСчета.Здание,
	|	втУслугиСКодами.КодУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.УслугаОснование,
	|	втУслугиСКодами.КодУслуги,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.Услуга В (&УслугиСкодом123)
	|					ИЛИ УПЖКХ_НачисленияОбороты.Услуга В (&УслугиСкодом124)
	|				ТОГДА ВЫБОР
	|						КОГДА УПЖКХ_НачисленияОбороты.Услуга В (&УслугиСкодом123)
	|								И УПЖКХ_НачисленияОбороты.УслугаОснование В (&СоставныеУслугиСкодом123)
	|								И втУслугиСКодами.КодУслуги = ""123""
	|							ТОГДА ВЫБОР
	|									КОГДА втУслугиСКодами.СпособНачислений = ""Индивидуально""
	|											И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|										ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|									КОГДА втУслугиСКодами.СпособНачислений = ""ОДН""
	|											И УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|										ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|									КОГДА втУслугиСКодами.СпособНачислений = ""Прочее""
	|										ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|									ИНАЧЕ 0
	|								КОНЕЦ
	|						КОГДА УПЖКХ_НачисленияОбороты.Услуга В (&УслугиСкодом124)
	|								И УПЖКХ_НачисленияОбороты.УслугаОснование В (&СоставныеУслугиСкодом124)
	|								И втУслугиСКодами.КодУслуги = ""124""
	|							ТОГДА ВЫБОР
	|									КОГДА втУслугиСКодами.СпособНачислений = ""Индивидуально""
	|											И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|										ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|									КОГДА втУслугиСКодами.СпособНачислений = ""ОДН""
	|											И УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|										ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|									КОГДА втУслугиСКодами.СпособНачислений = ""Прочее""
	|										ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|									ИНАЧЕ 0
	|								КОНЕЦ
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА втУслугиСКодами.СпособНачислений = ""Индивидуально""
	|							И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|						ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|					КОГДА втУслугиСКодами.СпособНачислений = ""ОДН""
	|							И УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|						ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|					КОГДА втУслугиСКодами.СпособНачислений = ""Прочее""
	|						ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		КОНЕЦ) КАК НАЧИСЛЕНИЯ,
	|	УПЖКХ_НачисленияОбороты.Организация
	|ПОМЕСТИТЬ втНачисления
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНачала,
	|			&ДатаКонца,
	|			,
	|			Организация = &Организация
	|				И ЛицевойСчет В (&ЛицевыеСчета)
	|				И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ВводНачальногоСальдо), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|				И Услуга В
	|					(ВЫБРАТЬ
	|						втУслугиСКодами.УслугаВБазе
	|					ИЗ
	|						втУслугиСКодами КАК втУслугиСКодами)
	|				И НЕ РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы))) КАК УПЖКХ_НачисленияОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУслугиСКодами КАК втУслугиСКодами
	|		ПО УПЖКХ_НачисленияОбороты.Услуга = втУслугиСКодами.УслугаВБазе
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.УслугаОснование,
	|	втУслугиСКодами.СпособНачислений,
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	втУслугиСКодами.КодУслуги,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_НазначенныеНачисленияСрезПоследних.Объект КАК ЛицевойСчет,
	|	КВП_НазначенныеНачисленияСрезПоследних.Услуга,
	|	1 КАК ПризнакНазначения,
	|	КВП_НазначенныеНачисленияСрезПоследних.Организация
	|ПОМЕСТИТЬ втНазначенныеУслугиНаНачало
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления.СрезПоследних(
	|			&ДатаНачала,
	|			Организация = &Организация
	|				И Услуга В
	|					(ВЫБРАТЬ
	|						втУслугиСКодами.УслугаВБазе
	|					ИЗ
	|						втУслугиСКодами КАК втУслугиСКодами)
	|				И ДатаИзменения < &ДатаНачала
	|				И Объект В (&ЛицевыеСчета)) КАК КВП_НазначенныеНачисленияСрезПоследних
	|ГДЕ
	|	КВП_НазначенныеНачисленияСрезПоследних.Действует
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КВП_НазначенныеНачисления.Объект,
	|	КВП_НазначенныеНачисления.Услуга,
	|	1,
	|	КВП_НазначенныеНачисления.Организация
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления КАК КВП_НазначенныеНачисления
	|ГДЕ
	|	КВП_НазначенныеНачисления.Период <= КОНЕЦПЕРИОДА(&ДатаКонца, ДЕНЬ)
	|	И КВП_НазначенныеНачисления.ДатаИзменения МЕЖДУ &ДатаНачала И &ДатаКонца
	|	И КВП_НазначенныеНачисления.Услуга В
	|			(ВЫБРАТЬ
	|				втУслугиСКодами.УслугаВБазе
	|			ИЗ
	|				втУслугиСКодами КАК втУслугиСКодами)
	|	И КВП_НазначенныеНачисления.Организация = &Организация
	|	И КВП_НазначенныеНачисления.Действует
	|	И КВП_НазначенныеНачисления.Объект В(&ЛицевыеСчета)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНазначенныеУслугиНаНачало.ЛицевойСчет,
	|	втУслугиСКодами.КодУслуги,
	|	втНазначенныеУслугиНаНачало.Услуга,
	|	втНазначенныеУслугиНаНачало.ПризнакНазначения,
	|	втНазначенныеУслугиНаНачало.Организация
	|ПОМЕСТИТЬ втНазначенныеУслугиНаНачалоСКодамиУслуг
	|ИЗ
	|	втНазначенныеУслугиНаНачало КАК втНазначенныеУслугиНаНачало
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУслугиСКодами КАК втУслугиСКодами
	|		ПО втНазначенныеУслугиНаНачало.Услуга = втУслугиСКодами.УслугаВБазе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_НазначенныеНачисленияСрезПоследних.Объект КАК ЛицевойСчет,
	|	КВП_НазначенныеНачисленияСрезПоследних.Услуга,
	|	КВП_НазначенныеНачисленияСрезПоследних.ДатаИзменения,
	|	-1 КАК ПризнакОтключения,
	|	КВП_НазначенныеНачисленияСрезПоследних.Организация
	|ПОМЕСТИТЬ втОтключенныеНазначенияНаКонец
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления.СрезПоследних(
	|			&ДатаКонца,
	|			Организация = &Организация
	|				И Объект В (&ЛицевыеСчета)
	|				И Услуга В
	|					(ВЫБРАТЬ
	|						втУслугиСКодами.УслугаВБазе
	|					ИЗ
	|						втУслугиСКодами КАК втУслугиСКодами)) КАК КВП_НазначенныеНачисленияСрезПоследних
	|ГДЕ
	|	НЕ КВП_НазначенныеНачисленияСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОтключенныеНазначенияНаКонец.ЛицевойСчет,
	|	втУслугиСКодами.КодУслуги,
	|	втОтключенныеНазначенияНаКонец.Услуга,
	|	втОтключенныеНазначенияНаКонец.ДатаИзменения,
	|	втОтключенныеНазначенияНаКонец.ПризнакОтключения,
	|	втОтключенныеНазначенияНаКонец.Организация
	|ПОМЕСТИТЬ втОтключенныеНазначенияНаКонецСКодамиУслуг
	|ИЗ
	|	втОтключенныеНазначенияНаКонец КАК втОтключенныеНазначенияНаКонец
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУслугиСКодами КАК втУслугиСКодами
	|		ПО втОтключенныеНазначенияНаКонец.Услуга = втУслугиСКодами.УслугаВБазе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНазначенныеУслугиНаНачалоСКодамиУслуг.ЛицевойСчет,
	|	втНазначенныеУслугиНаНачалоСКодамиУслуг.КодУслуги,
	|	втНазначенныеУслугиНаНачалоСКодамиУслуг.Услуга,
	|	втНазначенныеУслугиНаНачалоСКодамиУслуг.ПризнакНазначения,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаИзменения,
	|	втНазначенныеУслугиНаНачалоСКодамиУслуг.Организация
	|ПОМЕСТИТЬ втОтключенияУслуг
	|ИЗ
	|	втНазначенныеУслугиНаНачалоСКодамиУслуг КАК втНазначенныеУслугиНаНачалоСКодамиУслуг
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втОтключенныеНазначенияНаКонецСКодамиУслуг.ЛицевойСчет,
	|	втОтключенныеНазначенияНаКонецСКодамиУслуг.КодУслуги,
	|	втОтключенныеНазначенияНаКонецСКодамиУслуг.Услуга,
	|	втОтключенныеНазначенияНаКонецСКодамиУслуг.ПризнакОтключения,
	|	втОтключенныеНазначенияНаКонецСКодамиУслуг.ДатаИзменения,
	|	втОтключенныеНазначенияНаКонецСКодамиУслуг.Организация
	|ИЗ
	|	втОтключенныеНазначенияНаКонецСКодамиУслуг КАК втОтключенныеНазначенияНаКонецСКодамиУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОтключенияУслуг.ЛицевойСчет,
	|	втОтключенияУслуг.КодУслуги,
	|	втОтключенияУслуг.Организация,
	|	СУММА(втОтключенияУслуг.ПризнакНазначения) КАК ПризнакНазначения,
	|	МАКСИМУМ(втОтключенияУслуг.ДатаИзменения) КАК ДатаИзменения
	|ПОМЕСТИТЬ втОтключенияУслугСгруппированные
	|ИЗ
	|	втОтключенияУслуг КАК втОтключенияУслуг
	|
	|СГРУППИРОВАТЬ ПО
	|	втОтключенияУслуг.ЛицевойСчет,
	|	втОтключенияУслуг.КодУслуги,
	|	втОтключенияУслуг.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОтключенияУслугСгруппированные.ЛицевойСчет,
	|	втОтключенияУслугСгруппированные.КодУслуги,
	|	втОтключенияУслугСгруппированные.Организация,
	|	ВЫБОР
	|		КОГДА втОтключенияУслугСгруппированные.ПризнакНазначения = 0
	|			ТОГДА втОтключенияУслугСгруппированные.ДатаИзменения
	|		ИНАЧЕ ДАТАВРЕМЯ(1990, 1, 1)
	|	КОНЕЦ КАК ПРЕКРАЩ_УСЛ
	|ПОМЕСТИТЬ втДатыОтключенияУслуг
	|ИЗ
	|	втОтключенияУслугСгруппированные КАК втОтключенияУслугСгруппированные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛицевыеСчетаСКодамиУслуг.ЛицевойСчет КАК ЛицевойСчет,
	|	втЛицевыеСчетаСКодамиУслуг.КодУслуги КАК КодУслуги,
	|	втЛицевыеСчетаСКодамиУслуг.Помещение,
	|	втЛицевыеСчетаСКодамиУслуг.Здание,
	|	ЕСТЬNULL(втНачисления.Организация, ЕСТЬNULL(втДатыОтключенияУслуг.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))) КАК Организация,
	|	СУММА(ЕСТЬNULL(втНачисления.НАЧИСЛЕНИЯ, 0)) КАК НАЧИСЛЕНИЯ,
	|	МАКСИМУМ(ЕСТЬNULL(втДатыОтключенияУслуг.ПРЕКРАЩ_УСЛ, ДАТАВРЕМЯ(1990, 1, 1))) КАК ПРЕКРАЩ_УСЛ
	|ПОМЕСТИТЬ втИтоговыеДанныеБезИПУ
	|ИЗ
	|	втЛицевыеСчетаСКодамиУслуг КАК втЛицевыеСчетаСКодамиУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНачисления КАК втНачисления
	|		ПО втЛицевыеСчетаСКодамиУслуг.ЛицевойСчет = втНачисления.ЛицевойСчет
	|			И втЛицевыеСчетаСКодамиУслуг.КодУслуги = втНачисления.КодУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДатыОтключенияУслуг КАК втДатыОтключенияУслуг
	|		ПО втЛицевыеСчетаСКодамиУслуг.ЛицевойСчет = втДатыОтключенияУслуг.ЛицевойСчет
	|			И втЛицевыеСчетаСКодамиУслуг.КодУслуги = втДатыОтключенияУслуг.КодУслуги
	|
	|СГРУППИРОВАТЬ ПО
	|	втЛицевыеСчетаСКодамиУслуг.ЛицевойСчет,
	|	втЛицевыеСчетаСКодамиУслуг.КодУслуги,
	|	втЛицевыеСчетаСКодамиУслуг.Помещение,
	|	втЛицевыеСчетаСКодамиУслуг.Здание,
	|	ЕСТЬNULL(втНачисления.Организация, ЕСТЬNULL(втДатыОтключенияУслуг.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги КАК Услуга
	|ПОМЕСТИТЬ втИПУ
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&ДатаКонца,
	|			(Объект В
	|					(ВЫБРАТЬ
	|						втЛицевыеСчета.ЛицевойСчет
	|					ИЗ
	|						втЛицевыеСчета КАК втЛицевыеСчета)
	|				ИЛИ Объект В
	|					(ВЫБРАТЬ
	|						втЛицевыеСчета.Помещение
	|					ИЗ
	|						втЛицевыеСчета КАК втЛицевыеСчета))
	|				И Счетчик.ВидУслуги В
	|					(ВЫБРАТЬ
	|						втУслугиСКодами.УслугаВБазе
	|					ИЗ
	|						втУслугиСКодами КАК втУслугиСКодами)) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИПУ.Объект,
	|	втИПУ.Счетчик,
	|	втУслугиСКодами.КодУслуги,
	|	втИПУ.Услуга
	|ПОМЕСТИТЬ втИПУсКодамиУслуг
	|ИЗ
	|	втИПУ КАК втИПУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУслугиСКодами КАК втУслугиСКодами
	|		ПО втИПУ.Услуга = втУслугиСКодами.УслугаВБазе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги КАК Услуга
	|ПОМЕСТИТЬ втОПУ
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&ДатаКонца,
	|			Объект В
	|					(ВЫБРАТЬ
	|						втЛицевыеСчета.Здание
	|					ИЗ
	|						втЛицевыеСчета КАК втЛицевыеСчета)
	|				И Счетчик.ВидУслуги В
	|					(ВЫБРАТЬ
	|						втУслугиСКодами.УслугаВБазе
	|					ИЗ
	|						втУслугиСКодами КАК втУслугиСКодами)) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОПУ.Объект,
	|	втОПУ.Счетчик,
	|	втУслугиСКодами.КодУслуги,
	|	втОПУ.Услуга
	|ПОМЕСТИТЬ втОПУсКодамиУслуг
	|ИЗ
	|	втОПУ КАК втОПУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУслугиСКодами КАК втУслугиСКодами
	|		ПО втОПУ.Услуга = втУслугиСКодами.УслугаВБазе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговыеДанныеБезИПУ.ЛицевойСчет,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втИПУсКодамиУслуг.КодУслуги = ""131""
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЛПУ_Х_ВОДА,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втИПУсКодамиУслуг.КодУслуги = ""141""
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЛПУ_Г_ВОДА,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втИПУсКодамиУслуг.КодУслуги = ""101""
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЛПУ_ГАЗ,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втИПУсКодамиУслуг.КодУслуги = ""151""
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЛПУ_ОТОПЛ,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втИПУсКодамиУслуг.КодУслуги = ""111""
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЛПУ_ЭЛЕКТ
	|ПОМЕСТИТЬ втИПУПоЛС
	|ИЗ
	|	втИтоговыеДанныеБезИПУ КАК втИтоговыеДанныеБезИПУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ втИПУсКодамиУслуг КАК втИПУсКодамиУслуг
	|		ПО (втИтоговыеДанныеБезИПУ.ЛицевойСчет = втИПУсКодамиУслуг.Объект
	|				ИЛИ втИтоговыеДанныеБезИПУ.Помещение = втИПУсКодамиУслуг.Объект)
	|			И втИтоговыеДанныеБезИПУ.КодУслуги = втИПУсКодамиУслуг.КодУслуги
	|
	|СГРУППИРОВАТЬ ПО
	|	втИтоговыеДанныеБезИПУ.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговыеДанныеБезИПУ.ЛицевойСчет,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втОПУсКодамиУслуг.КодУслуги = ""132""
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОПУ_Х_ВОДА,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втОПУсКодамиУслуг.КодУслуги = ""142""
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОПУ_Г_ВОДА,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втОПУсКодамиУслуг.КодУслуги = ""102""
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОПУ_ГАЗ,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втОПУсКодамиУслуг.КодУслуги = ""152""
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОПУ_ОТОПЛ,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втОПУсКодамиУслуг.КодУслуги = ""112""
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОПУ_ЭЛЕКТ
	|ПОМЕСТИТЬ втОПУПоЛС
	|ИЗ
	|	втИтоговыеДанныеБезИПУ КАК втИтоговыеДанныеБезИПУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОПУсКодамиУслуг КАК втОПУсКодамиУслуг
	|		ПО втИтоговыеДанныеБезИПУ.Здание = втОПУсКодамиУслуг.Объект
	|			И втИтоговыеДанныеБезИПУ.КодУслуги = втОПУсКодамиУслуг.КодУслуги
	|
	|СГРУППИРОВАТЬ ПО
	|	втИтоговыеДанныеБезИПУ.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговыеДанныеБезИПУ.ЛицевойСчет,
	|	втИтоговыеДанныеБезИПУ.Организация,
	|	втИтоговыеДанныеБезИПУ.КодУслуги КАК УСЛУГА,
	|	втИтоговыеДанныеБезИПУ.НАЧИСЛЕНИЯ,
	|	втИтоговыеДанныеБезИПУ.ПРЕКРАЩ_УСЛ,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втИПУсКодамиУслуг.Счетчик) КАК ЛПУ,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втОПУсКодамиУслуг.Счетчик) КАК ОПУ,
	|	ЕСТЬNULL(втИПУПоЛС.ЛПУ_Х_ВОДА, 5) КАК ЛПУ_Х_ВОДА,
	|	ЕСТЬNULL(втИПУПоЛС.ЛПУ_Г_ВОДА, 5) КАК ЛПУ_Г_ВОДА,
	|	ЕСТЬNULL(втИПУПоЛС.ЛПУ_ГАЗ, 5) КАК ЛПУ_ГАЗ,
	|	ЕСТЬNULL(втИПУПоЛС.ЛПУ_ОТОПЛ, 5) КАК ЛПУ_ОТОПЛ,
	|	ЕСТЬNULL(втИПУПоЛС.ЛПУ_ЭЛЕКТ, 5) КАК ЛПУ_ЭЛЕКТ,
	|	ЕСТЬNULL(втОПУПоЛС.ОПУ_Х_ВОДА, 5) КАК ОПУ_Х_ВОДА,
	|	ЕСТЬNULL(втОПУПоЛС.ОПУ_Г_ВОДА, 5) КАК ОПУ_Г_ВОДА,
	|	ЕСТЬNULL(втОПУПоЛС.ОПУ_ГАЗ, 5) КАК ОПУ_ГАЗ,
	|	ЕСТЬNULL(втОПУПоЛС.ОПУ_ОТОПЛ, 5) КАК ОПУ_ОТОПЛ,
	|	ЕСТЬNULL(втОПУПоЛС.ОПУ_ЭЛЕКТ, 5) КАК ОПУ_ЭЛЕКТ
	|ИЗ
	|	втИтоговыеДанныеБезИПУ КАК втИтоговыеДанныеБезИПУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ втИПУПоЛС КАК втИПУПоЛС
	|		ПО втИтоговыеДанныеБезИПУ.ЛицевойСчет = втИПУПоЛС.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОПУПоЛС КАК втОПУПоЛС
	|		ПО втИтоговыеДанныеБезИПУ.ЛицевойСчет = втОПУПоЛС.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втИПУсКодамиУслуг КАК втИПУсКодамиУслуг
	|		ПО (втИтоговыеДанныеБезИПУ.ЛицевойСчет = втИПУсКодамиУслуг.Объект
	|				ИЛИ втИтоговыеДанныеБезИПУ.Помещение = втИПУсКодамиУслуг.Объект)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОПУсКодамиУслуг КАК втОПУсКодамиУслуг
	|		ПО втИтоговыеДанныеБезИПУ.Здание = втОПУсКодамиУслуг.Объект
	|
	|СГРУППИРОВАТЬ ПО
	|	втИтоговыеДанныеБезИПУ.ЛицевойСчет,
	|	втИтоговыеДанныеБезИПУ.Организация,
	|	втИтоговыеДанныеБезИПУ.КодУслуги,
	|	втИтоговыеДанныеБезИПУ.НАЧИСЛЕНИЯ,
	|	втИтоговыеДанныеБезИПУ.ПРЕКРАЩ_УСЛ,
	|	ЕСТЬNULL(втИПУПоЛС.ЛПУ_Х_ВОДА, 5),
	|	ЕСТЬNULL(втИПУПоЛС.ЛПУ_Г_ВОДА, 5),
	|	ЕСТЬNULL(втИПУПоЛС.ЛПУ_ГАЗ, 5),
	|	ЕСТЬNULL(втИПУПоЛС.ЛПУ_ОТОПЛ, 5),
	|	ЕСТЬNULL(втИПУПоЛС.ЛПУ_ЭЛЕКТ, 5),
	|	ЕСТЬNULL(втОПУПоЛС.ОПУ_Х_ВОДА, 5),
	|	ЕСТЬNULL(втОПУПоЛС.ОПУ_Г_ВОДА, 5),
	|	ЕСТЬNULL(втОПУПоЛС.ОПУ_ГАЗ, 5),
	|	ЕСТЬNULL(втОПУПоЛС.ОПУ_ОТОПЛ, 5),
	|	ЕСТЬNULL(втОПУПоЛС.ОПУ_ЭЛЕКТ, 5)
	|
	|УПОРЯДОЧИТЬ ПО
	|	втИтоговыеДанныеБезИПУ.ЛицевойСчет,
	|	втИтоговыеДанныеБезИПУ.КодУслуги";
	
	Запрос.УстановитьПараметр("ДатаНачала",               НачалоМесяца(Объект.Период));
	Запрос.УстановитьПараметр("ДатаКонца",                КонецМесяца(Объект.Период));
	Запрос.УстановитьПараметр("Организация",              Объект.Организация);
	Запрос.УстановитьПараметр("ЛицевыеСчета",             Объект.СаратовскаяОбласть_ТаблицаВыгрузки.Выгрузить().ВыгрузитьКолонку("ЛицевойСчет"));
	Запрос.УстановитьПараметр("УслугиСКодами",            УслугиВБазеСКодами);
	Запрос.УстановитьПараметр("УслугиСкодом123",          УслугиСкодом123);
	Запрос.УстановитьПараметр("УслугиСкодом124",          УслугиСкодом124);
	Запрос.УстановитьПараметр("СоставныеУслугиСкодом123", СоставныеУслугиСкодом123);
	Запрос.УстановитьПараметр("СоставныеУслугиСкодом124", СоставныеУслугиСкодом124);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции // ПолучитьТаблицуНачисленийНаСервере()

&НаСервере
// Возвращает таблицу оплат по используемым услугам и определенным лицевым счетам.
//
// Возвращаемое значение:
//  Результат - ТаблицаЗначений - таблица начислений.
//
Функция ПолучитьТаблицуОплатНаСервере()
	
	// Таблица используемых услуг в базе.
	МассивСтрокИспользуемыхУслугВБазе = Объект.СаратовскаяОбласть_УслугиВБазе.НайтиСтроки(Новый Структура("Использовать", Истина));
	УслугиВБазеСКодами = Объект.СаратовскаяОбласть_УслугиВБазе.Выгрузить(МассивСтрокИспользуемыхУслугВБазе, "УслугаВБазе, КодУслуги, СпособНачислений");
	
	УслугиСкодом123 = УслугиВБазеСКодами.НайтиСтроки(Новый Структура("КодУслуги", "123"));
	УслугиСкодом124 = УслугиВБазеСКодами.НайтиСтроки(Новый Структура("КодУслуги", "124"));
	СоставныеУслугиСкодом123 = УслугиВБазеСКодами.НайтиСтроки(Новый Структура("КодУслуги", "134"));
	Для Каждого СтрокаСоставныеУслугиСкодом123 ИЗ УслугиВБазеСКодами.НайтиСтроки(Новый Структура("КодУслуги", "141")) Цикл
		СоставныеУслугиСкодом123.Добавить(СтрокаСоставныеУслугиСкодом123);
	КонецЦикла;
	СоставныеУслугиСкодом124 = УслугиВБазеСКодами.НайтиСтроки(Новый Структура("КодУслуги", "131"));
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ЛицевыеСчета.Ссылка КАК ЛицевойСчет,
	|	КВП_ЛицевыеСчета.Адрес КАК Помещение,
	|	КВП_ЛицевыеСчета.Адрес.Владелец КАК Здание
	|ПОМЕСТИТЬ втЛицевыеСчета
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	КВП_ЛицевыеСчета.Ссылка В(&ЛицевыеСчета)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УслугиСКодами.УслугаВБазе,
	|	УслугиСКодами.КодУслуги,
	|	УслугиСКодами.СпособНачислений
	|ПОМЕСТИТЬ втУслугиСКодами
	|ИЗ
	|	&УслугиСКодами КАК УслугиСКодами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛицевыеСчета.ЛицевойСчет,
	|	втЛицевыеСчета.Помещение,
	|	втЛицевыеСчета.Здание,
	|	втУслугиСКодами.КодУслуги
	|ПОМЕСТИТЬ втЛицевыеСчетаСКодамиУслуг
	|ИЗ
	|	втЛицевыеСчета КАК втЛицевыеСчета,
	|	втУслугиСКодами КАК втУслугиСКодами
	|
	|СГРУППИРОВАТЬ ПО
	|	втЛицевыеСчета.ЛицевойСчет,
	|	втЛицевыеСчета.Помещение,
	|	втЛицевыеСчета.Здание,
	|	втУслугиСКодами.КодУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Организация,
	|	СУММА(ВЫБОР
	|			КОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток > 0
	|				ТОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ДОЛГ,
	|	СУММА(ВЫБОР
	|			КОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток < 0
	|				ТОГДА -КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК АВАНС
	|ПОМЕСТИТЬ втСуммыДолга
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&ДатаНачала,
	|			Организация = &Организация
	|				И ЛицевойСчет В (&ЛицевыеСчета)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Организация,
	|	-СУММА(УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот) КАК ОПЛАТА
	|ПОМЕСТИТЬ втОплаты
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНачала,
	|			&ДатаКонца,
	|			,
	|			Организация = &Организация
	|				И ЛицевойСчет В (&ЛицевыеСчета)
	|				И ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)
	|				И НЕ МесяцНачисления = &ДатаКонцаМесяца) КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_НазначенныеНачисленияСрезПоследних.Объект КАК ЛицевойСчет,
	|	КВП_НазначенныеНачисленияСрезПоследних.Организация,
	|	КВП_НазначенныеНачисленияСрезПоследних.Услуга
	|ПОМЕСТИТЬ втНазначенияУслуг
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления.СрезПоследних(
	|			&ДатаКонца,
	|			Организация = &Организация
	|				И Объект В (&ЛицевыеСчета)
	|				И Услуга В
	|					(ВЫБРАТЬ
	|						втУслугиСКодами.УслугаВБазе
	|					ИЗ
	|						втУслугиСКодами КАК втУслугиСКодами)) КАК КВП_НазначенныеНачисленияСрезПоследних
	|ГДЕ
	|	КВП_НазначенныеНачисленияСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНазначенияУслуг.ЛицевойСчет,
	|	втНазначенияУслуг.Организация,
	|	втУслугиСКодами.КодУслуги
	|ПОМЕСТИТЬ втвтНазначенияУслугСКодамиУслуг
	|ИЗ
	|	втНазначенияУслуг КАК втНазначенияУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУслугиСКодами КАК втУслугиСКодами
	|		ПО втНазначенияУслуг.Услуга = втУслугиСКодами.УслугаВБазе
	|
	|СГРУППИРОВАТЬ ПО
	|	втНазначенияУслуг.ЛицевойСчет,
	|	втНазначенияУслуг.Организация,
	|	втУслугиСКодами.КодУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Организация,
	|	втУслугиСКодами.КодУслуги
	|ПОМЕСТИТЬ втНачисления
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНачала,
	|			&ДатаКонца,
	|			,
	|			Организация = &Организация
	|				И ЛицевойСчет В (&ЛицевыеСчета)
	|				И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ВводНачальногоСальдо), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|				И Услуга В
	|					(ВЫБРАТЬ
	|						втУслугиСКодами.УслугаВБазе
	|					ИЗ
	|						втУслугиСКодами КАК втУслугиСКодами)
	|				И НЕ РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы))) КАК УПЖКХ_НачисленияОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУслугиСКодами КАК втУслугиСКодами
	|		ПО УПЖКХ_НачисленияОбороты.Услуга = втУслугиСКодами.УслугаВБазе
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Организация,
	|	втУслугиСКодами.КодУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛицевыеСчета.ЛицевойСчет,
	|	втЛицевыеСчета.Помещение,
	|	втЛицевыеСчета.Здание,
	|	ЕСТЬNULL(втОплаты.Организация, ЕСТЬNULL(втСуммыДолга.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))) КАК Организация,
	|	ЕСТЬNULL(втОплаты.ОПЛАТА, 0) КАК ОПЛАТА,
	|	ЕСТЬNULL(втСуммыДолга.ДОЛГ, 0) КАК ДОЛГ,
	|	ЕСТЬNULL(втСуммыДолга.АВАНС, 0) КАК АВАНС
	|ПОМЕСТИТЬ втЛицевыеСчетаССуммами
	|ИЗ
	|	втЛицевыеСчета КАК втЛицевыеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСуммыДолга КАК втСуммыДолга
	|		ПО втЛицевыеСчета.ЛицевойСчет = втСуммыДолга.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОплаты КАК втОплаты
	|		ПО втЛицевыеСчета.ЛицевойСчет = втОплаты.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛицевыеСчетаСКодамиУслуг.ЛицевойСчет,
	|	втЛицевыеСчетаСКодамиУслуг.Помещение,
	|	втЛицевыеСчетаСКодамиУслуг.Здание,
	|	втЛицевыеСчетаСКодамиУслуг.КодУслуги,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА НЕ втвтНазначенияУслугСКодамиУслуг.ЛицевойСчет ЕСТЬ NULL
	|					И НЕ втНачисления.ЛицевойСчет ЕСТЬ NULL
	|				ТОГДА 1
	|			КОГДА НЕ втвтНазначенияУслугСКодамиУслуг.ЛицевойСчет ЕСТЬ NULL
	|					И втНачисления.ЛицевойСчет ЕСТЬ NULL
	|				ТОГДА 2
	|			ИНАЧЕ 5
	|		КОНЕЦ) КАК ПризнакНазначенияНачисления
	|ПОМЕСТИТЬ втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления
	|ИЗ
	|	втЛицевыеСчетаСКодамиУслуг КАК втЛицевыеСчетаСКодамиУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ втвтНазначенияУслугСКодамиУслуг КАК втвтНазначенияУслугСКодамиУслуг
	|		ПО втЛицевыеСчетаСКодамиУслуг.ЛицевойСчет = втвтНазначенияУслугСКодамиУслуг.ЛицевойСчет
	|			И втЛицевыеСчетаСКодамиУслуг.КодУслуги = втвтНазначенияУслугСКодамиУслуг.КодУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНачисления КАК втНачисления
	|		ПО втЛицевыеСчетаСКодамиУслуг.ЛицевойСчет = втНачисления.ЛицевойСчет
	|			И втЛицевыеСчетаСКодамиУслуг.КодУслуги = втНачисления.КодУслуги
	|
	|СГРУППИРОВАТЬ ПО
	|	втЛицевыеСчетаСКодамиУслуг.ЛицевойСчет,
	|	втЛицевыеСчетаСКодамиУслуг.Помещение,
	|	втЛицевыеСчетаСКодамиУслуг.Здание,
	|	втЛицевыеСчетаСКодамиУслуг.КодУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛицевыеСчетаССуммами.ЛицевойСчет,
	|	втЛицевыеСчетаССуммами.Организация,
	|	втЛицевыеСчетаССуммами.ДОЛГ,
	|	втЛицевыеСчетаССуммами.АВАНС,
	|	втЛицевыеСчетаССуммами.ОПЛАТА,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.КодУслуги, """") = ""121""
	|				ТОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.ПризнакНазначенияНачисления, 5)
	|			ИНАЧЕ 5
	|		КОНЕЦ) КАК УСЛ121,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.КодУслуги, """") = ""122""
	|				ТОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.ПризнакНазначенияНачисления, 5)
	|			ИНАЧЕ 5
	|		КОНЕЦ) КАК УСЛ122,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.КодУслуги, """") = ""123""
	|				ТОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.ПризнакНазначенияНачисления, 5)
	|			ИНАЧЕ 5
	|		КОНЕЦ) КАК УСЛ123,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.КодУслуги, """") = ""124""
	|				ТОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.ПризнакНазначенияНачисления, 5)
	|			ИНАЧЕ 5
	|		КОНЕЦ) КАК УСЛ124,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.КодУслуги, """") = ""260""
	|				ТОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.ПризнакНазначенияНачисления, 5)
	|			ИНАЧЕ 5
	|		КОНЕЦ) КАК УСЛ260,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.КодУслуги, """") = ""250""
	|				ТОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.ПризнакНазначенияНачисления, 5)
	|			ИНАЧЕ 5
	|		КОНЕЦ) КАК УСЛ250,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.КодУслуги, """") = ""101""
	|				ТОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.ПризнакНазначенияНачисления, 5)
	|			ИНАЧЕ 5
	|		КОНЕЦ) КАК УСЛ101,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.КодУслуги, """") = ""102""
	|				ТОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.ПризнакНазначенияНачисления, 5)
	|			ИНАЧЕ 5
	|		КОНЕЦ) КАК УСЛ102,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.КодУслуги, """") = ""141""
	|				ТОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.ПризнакНазначенияНачисления, 5)
	|			ИНАЧЕ 5
	|		КОНЕЦ) КАК УСЛ141,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.КодУслуги, """") = ""142""
	|				ТОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.ПризнакНазначенияНачисления, 5)
	|			ИНАЧЕ 5
	|		КОНЕЦ) КАК УСЛ142,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.КодУслуги, """") = ""240""
	|				ТОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.ПризнакНазначенияНачисления, 5)
	|			ИНАЧЕ 5
	|		КОНЕЦ) КАК УСЛ240,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.КодУслуги, """") = ""230""
	|				ТОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.ПризнакНазначенияНачисления, 5)
	|			ИНАЧЕ 5
	|		КОНЕЦ) КАК УСЛ230,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.КодУслуги, """") = ""151""
	|				ТОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.ПризнакНазначенияНачисления, 5)
	|			ИНАЧЕ 5
	|		КОНЕЦ) КАК УСЛ151,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.КодУслуги, """") = ""152""
	|				ТОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.ПризнакНазначенияНачисления, 5)
	|			ИНАЧЕ 5
	|		КОНЕЦ) КАК УСЛ152,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.КодУслуги, """") = ""210""
	|				ТОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.ПризнакНазначенияНачисления, 5)
	|			ИНАЧЕ 5
	|		КОНЕЦ) КАК УСЛ210,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.КодУслуги, """") = ""10""
	|				ТОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.ПризнакНазначенияНачисления, 5)
	|			ИНАЧЕ 5
	|		КОНЕЦ) КАК УСЛ10,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.КодУслуги, """") = ""EST""
	|				ТОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.ПризнакНазначенияНачисления, 5)
	|			ИНАЧЕ 5
	|		КОНЕЦ) КАК УСЛEST,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.КодУслуги, """") = ""220""
	|				ТОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.ПризнакНазначенияНачисления, 5)
	|			ИНАЧЕ 5
	|		КОНЕЦ) КАК УСЛ220,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.КодУслуги, """") = ""133""
	|				ТОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.ПризнакНазначенияНачисления, 5)
	|			ИНАЧЕ 5
	|		КОНЕЦ) КАК УСЛ133,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.КодУслуги, """") = ""156""
	|				ТОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.ПризнакНазначенияНачисления, 5)
	|			ИНАЧЕ 5
	|		КОНЕЦ) КАК УСЛ156,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.КодУслуги, """") = ""131""
	|				ТОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.ПризнакНазначенияНачисления, 5)
	|			ИНАЧЕ 5
	|		КОНЕЦ) КАК УСЛ131,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.КодУслуги, """") = ""132""
	|				ТОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.ПризнакНазначенияНачисления, 5)
	|			ИНАЧЕ 5
	|		КОНЕЦ) КАК УСЛ132,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.КодУслуги, """") = ""134""
	|				ТОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.ПризнакНазначенияНачисления, 5)
	|			ИНАЧЕ 5
	|		КОНЕЦ) КАК УСЛ134,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.КодУслуги, """") = ""270""
	|				ТОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.ПризнакНазначенияНачисления, 5)
	|			ИНАЧЕ 5
	|		КОНЕЦ) КАК УСЛ270,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.КодУслуги, """") = ""111""
	|				ТОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.ПризнакНазначенияНачисления, 5)
	|			ИНАЧЕ 5
	|		КОНЕЦ) КАК УСЛ111,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.КодУслуги, """") = ""112""
	|				ТОГДА ЕСТЬNULL(втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.ПризнакНазначенияНачисления, 5)
	|			ИНАЧЕ 5
	|		КОНЕЦ) КАК УСЛ112
	|ИЗ
	|	втЛицевыеСчетаССуммами КАК втЛицевыеСчетаССуммами
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления КАК втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления
	|		ПО втЛицевыеСчетаССуммами.ЛицевойСчет = втЛицевыеСчетаСКодамиИПризнакамиНазначенияНачисления.ЛицевойСчет
	|
	|СГРУППИРОВАТЬ ПО
	|	втЛицевыеСчетаССуммами.ЛицевойСчет,
	|	втЛицевыеСчетаССуммами.Организация,
	|	втЛицевыеСчетаССуммами.ДОЛГ,
	|	втЛицевыеСчетаССуммами.АВАНС,
	|	втЛицевыеСчетаССуммами.ОПЛАТА
	|
	|УПОРЯДОЧИТЬ ПО
	|	втЛицевыеСчетаССуммами.ЛицевойСчет";
	
	Запрос.УстановитьПараметр("ДатаНачала",               НачалоМесяца(Объект.Период));
	Запрос.УстановитьПараметр("ДатаКонца",                КонецМесяца(Объект.Период));
	Запрос.УстановитьПараметр("ДатаКонцаМесяца",          НачалоДня(КонецМесяца(Объект.Период)));
	Запрос.УстановитьПараметр("Организация",              Объект.Организация);
	Запрос.УстановитьПараметр("ЛицевыеСчета",             Объект.СаратовскаяОбласть_ТаблицаВыгрузкиОплат.Выгрузить().ВыгрузитьКолонку("ЛицевойСчет"));
	Запрос.УстановитьПараметр("УслугиСКодами",            УслугиВБазеСКодами);
	Запрос.УстановитьПараметр("УслугиСкодом123",          УслугиСкодом123);
	Запрос.УстановитьПараметр("УслугиСкодом124",          УслугиСкодом124);
	Запрос.УстановитьПараметр("СоставныеУслугиСкодом123", СоставныеУслугиСкодом123);
	Запрос.УстановитьПараметр("СоставныеУслугиСкодом124", СоставныеУслугиСкодом124);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции // ПолучитьТаблицуОплатНаСервере()

////////////////////
// Выгрузить

&НаКлиенте
// Обработчик команды "КомандаВыгрузить".
//
Процедура КомандаВыгрузить(Команда)
	
	// Проверяем наличие выгружаемых данных.
	Если Объект.СаратовскаяОбласть_ТаблицаВыгрузки.Количество() = 0 И Объект.СаратовскаяОбласть_ТаблицаВыгрузкиОплат.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Данные для выгрузки отсутствуют!");
		Возврат;
	ИначеЕсли Объект.СаратовскаяОбласть_ТаблицаВыгрузки.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Данные для выгрузки начислений отсутствуют! Будут выгружены только данные об оплатах.");
	ИначеЕсли Объект.СаратовскаяОбласть_ТаблицаВыгрузкиОплат.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Данные для выгрузки оплат отсутствуют! Будут выгружены только данные о начислениях.");
	КонецЕсли;
	
	// Проверяем каталог выгрузки на существование.
	Файл = Новый Файл(Объект.ИмяКаталогаВыгрузки);
	Файл.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ПроверкаСуществованияКаталогаВыгрузкиЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСуществованияКаталогаВыгрузкиЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	Если Не Существует Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Указанный каталог не существует!");
		Возврат;
	КонецЕсли;
	
	// Создаем временный каталог.
	Оповещение = Новый ОписаниеОповещения("КомандаВыгрузитьЗавершение", ЭтотОбъект);
	ПараметрыОповещения = Новый Структура("Оповещение", Оповещение);
	ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьВременныйКаталогЗавершение", ЭтотОбъект, ПараметрыОповещения, "ОписаниеОповещенияОбработкаОшибки", ЭтотОбъект);
	
	НачатьСозданиеКаталога(ОписаниеОповещения, Объект.ИмяКаталогаВыгрузки + "\tmpzip");

КонецПроцедуры

&НаКлиенте
Процедура КомандаВыгрузитьЗавершение(Путь, ДополнительныеПараметры) Экспорт
	
	ИспользуемыеУслуги = ПолучитьМассивВыбранныхУслуг();
	
	Отбор = Новый Структура();
	Отбор.Вставить("УСЛУГА");
	
	КодИПериодФайлаВыгрузки = Формат(Объект.КодОрганизации, "ЧГ=0") + Формат(Объект.Период, "ДФ=MMyy");
	
	Для Каждого ИспользуемаяУслуга Из ИспользуемыеУслуги Цикл
		
		// Формируем файл по начислениям.
		
		ИмяФайла = Путь + "\O" + КодИПериодФайлаВыгрузки + ?(ИспользуемаяУслуга.КодУслуги = "EST", "Estate", ИспользуемаяУслуга.КодУслуги) + ".csv";
		ТекстовыйФайлЗапись = Новый ЗаписьТекста(ИмяФайла);
		
		// Первая строка - информационная (копируем один в один из файлов загрузки).
		ТекстовыйФайлЗапись.ЗаписатьСтроку(ПерваяСтрокаCSV);
		// Вторая строка - названия колонок.
		ТекстовыйФайлЗапись.ЗаписатьСтроку(НаименованияКолонокТаблицыНачисленийВыгружаемогоCSV);
		
		// Заполнение строк, начиная с третьей.
		Отбор.УСЛУГА = ИспользуемаяУслуга.КодУслуги;
		
		НайденныеСтроки = Объект.СаратовскаяОбласть_ТаблицаВыгрузки.НайтиСтроки(Отбор);
		
		Сч = 1;
		
		Для Каждого СтрокаВыгрузки Из НайденныеСтроки Цикл
			
			ТекстДанные = ПолучитьТекстовуюСтрокуСРазделителямиИзТаблицыВыгрузки(СтрокаВыгрузки);
			
			ТекстДанные = Строка(Сч) + РазделительCSV + ТекстДанные + РазделительCSV
			+ СтрокаВыгрузки.НАЧИСЛЕНИЯ + РазделительCSV 
			+ Формат(СтрокаВыгрузки.ПРЕКРАЩ_УСЛ, "ДФ=dd.MM.yyyy; ДП=01.01.1990") + РазделительCSV 
			+ ?(ИспользуемаяУслуга.КодУслуги = "EST", "Estate", ИспользуемаяУслуга.КодУслуги) + РазделительCSV 
			+ СтрокаВыгрузки.КОЛ_ПРОЖ + РазделительCSV
			+ СтрокаВыгрузки.КОЛ_СОБСТ + РазделительCSV
			+ СтрокаВыгрузки.Л_СЧ_ИЗМ + РазделительCSV
			+ Формат(СтрокаВыгрузки.Л_СЧ_ИЗМ_Д, "ДФ=dd.MM.yyyy; ДП=01.01.1990") + РазделительCSV
			+ СтрокаВыгрузки.ЛПУ + РазделительCSV
			+ СтрокаВыгрузки.ЛПУ_Х_ВОДА + РазделительCSV
			+ СтрокаВыгрузки.ЛПУ_Г_ВОДА + РазделительCSV
			+ СтрокаВыгрузки.ЛПУ_ГАЗ + РазделительCSV
			+ СтрокаВыгрузки.ЛПУ_ОТОПЛ + РазделительCSV
			+ СтрокаВыгрузки.ЛПУ_ЭЛЕКТ + РазделительCSV
			+ СтрокаВыгрузки.ОПУ + РазделительCSV
			+ СтрокаВыгрузки.ОПУ_Х_ВОДА + РазделительCSV
			+ СтрокаВыгрузки.ОПУ_Г_ВОДА + РазделительCSV
			+ СтрокаВыгрузки.ОПУ_ГАЗ + РазделительCSV
			+ СтрокаВыгрузки.ОПУ_ОТОПЛ + РазделительCSV
			+ СтрокаВыгрузки.ОПУ_ЭЛЕКТ + РазделительCSV + 5 + РазделительCSV + 5 + РазделительCSV + 1 + РазделительCSV
			+ СтрокаВыгрузки.ПЛИТА + РазделительCSV
			+ СтрокаВыгрузки.ЭТАЖНОСТЬ + РазделительCSV
			+ СтрокаВыгрузки.ЛИФТ + РазделительCSV
			+ СтрокаВыгрузки.КОМН + РазделительCSV
			+ СтрокаВыгрузки.S + РазделительCSV
			+ СтрокаВыгрузки.S_ОТАПЛ + РазделительCSV + 0 + РазделительCSV + 5 + РазделительCSV + 5 + РазделительCSV
			+ 5 + РазделительCSV + 5 + РазделительCSV + 5 + РазделительCSV + 5 + РазделительCSV + 5 + РазделительCSV + 5;
			
			Сч = Сч + 1;
			ТекстовыйФайлЗапись.ЗаписатьСтроку("'" + ТекстДанные + "'");
		КонецЦикла;
		
		// заполним строки без кода услуг.
		Отбор.УСЛУГА = "";
		
		НайденныеСтроки = Объект.СаратовскаяОбласть_ТаблицаВыгрузки.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаВыгрузки Из НайденныеСтроки Цикл
			
			ТекстДанные = ПолучитьТекстовуюСтрокуСРазделителямиИзТаблицыВыгрузки(СтрокаВыгрузки);
			
			ТекстДанные = Строка(Сч) + РазделительCSV + ТекстДанные + РазделительCSV
			+ "X" + РазделительCSV 
			+ Формат(СтрокаВыгрузки.ПРЕКРАЩ_УСЛ, "ДФ=dd.MM.yyyy; ДП=01.01.1990") + РазделительCSV 
			+ "N" + РазделительCSV 
			+ СтрокаВыгрузки.КОЛ_ПРОЖ + РазделительCSV
			+ СтрокаВыгрузки.КОЛ_СОБСТ + РазделительCSV
			+ СтрокаВыгрузки.Л_СЧ_ИЗМ + РазделительCSV
			+ Формат(СтрокаВыгрузки.Л_СЧ_ИЗМ_Д, "ДФ=dd.MM.yyyy; ДП=01.01.1990") + РазделительCSV
			+ СтрокаВыгрузки.ЛПУ + РазделительCSV
			+ СтрокаВыгрузки.ЛПУ_Х_ВОДА + РазделительCSV
			+ СтрокаВыгрузки.ЛПУ_Г_ВОДА + РазделительCSV
			+ СтрокаВыгрузки.ЛПУ_ГАЗ + РазделительCSV
			+ СтрокаВыгрузки.ЛПУ_ОТОПЛ + РазделительCSV
			+ СтрокаВыгрузки.ЛПУ_ЭЛЕКТ + РазделительCSV
			+ СтрокаВыгрузки.ОПУ + РазделительCSV
			+ СтрокаВыгрузки.ОПУ_Х_ВОДА + РазделительCSV
			+ СтрокаВыгрузки.ОПУ_Г_ВОДА + РазделительCSV
			+ СтрокаВыгрузки.ОПУ_ГАЗ + РазделительCSV
			+ СтрокаВыгрузки.ОПУ_ОТОПЛ + РазделительCSV
			+ СтрокаВыгрузки.ОПУ_ЭЛЕКТ + РазделительCSV + 5 + РазделительCSV + 5 + РазделительCSV + 1 + РазделительCSV
			+ СтрокаВыгрузки.ПЛИТА + РазделительCSV
			+ СтрокаВыгрузки.ЭТАЖНОСТЬ + РазделительCSV
			+ СтрокаВыгрузки.ЛИФТ + РазделительCSV
			+ СтрокаВыгрузки.КОМН + РазделительCSV
			+ СтрокаВыгрузки.S + РазделительCSV
			+ СтрокаВыгрузки.S_ОТАПЛ + РазделительCSV + 0 + РазделительCSV + 5 + РазделительCSV + 5 + РазделительCSV
			+ 5 + РазделительCSV + 5 + РазделительCSV + 5 + РазделительCSV + 5 + РазделительCSV + 5 + РазделительCSV + 5;
			
			Сч = Сч + 1;
			ТекстовыйФайлЗапись.ЗаписатьСтроку("'" + ТекстДанные + "'");
		КонецЦикла;
		
		ТекстовыйФайлЗапись.Закрыть();
		
	КонецЦикла;
	
	// Формируем файл по оплатам.
	
	ИмяФайлаОплат = Путь + "\O" + КодИПериодФайлаВыгрузки + "PAY.csv";
	ТекстовыйФайлЗапись = Новый ЗаписьТекста(ИмяФайлаОплат);
	
	// Первая строка - информационная (копируем один в один из файлов загрузки).
	ТекстовыйФайлЗапись.ЗаписатьСтроку(ПерваяСтрокаОплатCSV);
	// Вторая строка - названия колонок.
	ТекстовыйФайлЗапись.ЗаписатьСтроку(НаименованияКолонокТаблицыОплатВыгружаемогоCSV);
	
	Сч = 1;
	
	// Заполнение строк, начиная с третьей.
	Для Каждого СтрокаВыгрузки Из Объект.СаратовскаяОбласть_ТаблицаВыгрузкиОплат Цикл
		
		ТекстДанные = ПолучитьТекстовуюСтрокуСРазделителямиИзТаблицыВыгрузки(СтрокаВыгрузки);
		
		ТекстДанные = Строка(Сч) + РазделительCSV + ТекстДанные + РазделительCSV
		+ СтрокаВыгрузки.ДОЛГ + РазделительCSV
		+ СтрокаВыгрузки.АВАНС + РазделительCSV
		+ СтрокаВыгрузки.ОПЛАТА + РазделительCSV
		+ СтрокаВыгрузки.УСЛ121 + РазделительCSV
		+ СтрокаВыгрузки.УСЛ122 + РазделительCSV
		+ СтрокаВыгрузки.УСЛ123 + РазделительCSV
		+ СтрокаВыгрузки.УСЛ124 + РазделительCSV
		+ СтрокаВыгрузки.УСЛ260 + РазделительCSV
		+ СтрокаВыгрузки.УСЛ250 + РазделительCSV
		+ СтрокаВыгрузки.УСЛ101 + РазделительCSV
		+ СтрокаВыгрузки.УСЛ102 + РазделительCSV
		+ СтрокаВыгрузки.УСЛ141 + РазделительCSV
		+ СтрокаВыгрузки.УСЛ142 + РазделительCSV
		+ СтрокаВыгрузки.УСЛ240 + РазделительCSV
		+ СтрокаВыгрузки.УСЛ230 + РазделительCSV
		+ СтрокаВыгрузки.УСЛ151 + РазделительCSV
		+ СтрокаВыгрузки.УСЛ152 + РазделительCSV
		+ СтрокаВыгрузки.УСЛ210 + РазделительCSV
		+ СтрокаВыгрузки.УСЛ10  + РазделительCSV
		+ СтрокаВыгрузки.УСЛEST + РазделительCSV
		+ СтрокаВыгрузки.УСЛ220 + РазделительCSV
		+ СтрокаВыгрузки.УСЛ133 + РазделительCSV
		+ СтрокаВыгрузки.УСЛ156 + РазделительCSV
		+ СтрокаВыгрузки.УСЛ131 + РазделительCSV
		+ СтрокаВыгрузки.УСЛ132 + РазделительCSV
		+ СтрокаВыгрузки.УСЛ134 + РазделительCSV
		+ СтрокаВыгрузки.УСЛ270 + РазделительCSV
		+ СтрокаВыгрузки.УСЛ111 + РазделительCSV
		+ СтрокаВыгрузки.УСЛ112;
		
		Сч = Сч + 1;
		ТекстовыйФайлЗапись.ЗаписатьСтроку("'" + ТекстДанные + "'");
	КонецЦикла;
	
	ТекстовыйФайлЗапись.Закрыть();
	
	Архив = Новый ЗаписьZIPФайла(Объект.ИмяКаталогаВыгрузки + "\O" + КодИПериодФайлаВыгрузки + ".zip");
	Архив.Добавить(Путь + "\*.csv");
	Архив.Записать();
	
	ПараметрыОповещения = Новый Структура("КодИПериодФайлаВыгрузки", КодИПериодФайлаВыгрузки);
	ОписаниеОповещения = Новый ОписаниеОповещения("УдалитьФайлыЗавершение1", ЭтотОбъект, ПараметрыОповещения, "ОписаниеОповещенияОбработкаОшибки", ЭтотОбъект);
	
	НачатьУдалениеФайлов(ОписаниеОповещения, Путь);

КонецПроцедуры

&НаКлиенте
Процедура УдалитьФайлыЗавершение1(ДополнительныеПараметры) Экспорт
	
	КодИПериодФайлаВыгрузки = ДополнительныеПараметры.КодИПериодФайлаВыгрузки;
	
	УПЖКХ_ОбщегоНазначенияКлиент.ОткрытьСтраницуВБраузере("explorer  /select," + Объект.ИмяКаталогаВыгрузки + "\O" + КодИПериодФайлаВыгрузки + ".zip");

КонецПроцедуры // КомандаВыгрузить()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ПрочиеПроцендурыИФункции

&НаКлиенте
// Производит анализ и чтение имени файла загрузки, устанавливает код организации и период выгрузки.
//
// Параметры:
//  ИмяФайлаЗагрузки - Строка - полное ия файла загрузки, включая путь к нему <С:\путь\к\архиву\ZКОДОРГММГГ.zip>.
//
Процедура ЧтениеИмениФайлаЗагрузки(Знач ИмяФайлаЗагрузки)
	
	// Получаем имя файла загрузки без пути к нему.
	Пока Не Найти(ИмяФайлаЗагрузки, "\") = 0 Цикл
		ИмяФайлаЗагрузки = Прав(ИмяФайлаЗагрузки, СтрДлина(ИмяФайлаЗагрузки) - Найти(ИмяФайлаЗагрузки, "\"));
	КонецЦикла;
	
	// Выделяем из имени файла код организации и период загрузки.
	КодИПериодФайлаЗагрузки = Сред(ИмяФайлаЗагрузки, 2, Найти(ИмяФайлаЗагрузки, ".") - 2);
	
	// Устанавливаем код организации.
	Попытка
		Объект.КодОрганизации = Число(Лев(КодИПериодФайлаЗагрузки, СтрДлина(КодИПериодФайлаЗагрузки) - 4));
	Исключение
		Объект.КодОрганизации = 0;
	КонецПопытки;
	
	// Устанавливаем период.
	Попытка
		ДатаИзФайла = Дата("20" + Прав(КодИПериодФайлаЗагрузки, 2) + Сред(КодИПериодФайлаЗагрузки, СтрДлина(КодИПериодФайлаЗагрузки) - 3, 2) + "01");
		УстановитьПериод(ДатаИзФайла);
	Исключение
		УстановитьПериод();
	КонецПопытки;
	
КонецПроцедуры // УстановитьКодОрганизации()

&НаКлиенте
// Устанавливает период выгрузки.
//
// Параметры:
//  ДатаИзФайла - Дата - период начислений из наименования файла загрузки.
//
Процедура УстановитьПериод(ДатаИзФайла = Неопределено)
	
	Объект.Период = ?(ДатаИзФайла = Неопределено, УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьРабочуюДату(), ДатаИзФайла);
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры // УстановитьПериод()

&НаКлиенте
// Удаляет из строки первый и последний символ.
//
// Параметры:
//  Текст - Строка - строка, в которой необходимо удалить символы.
//
Процедура УдалитьПервыйИПоследнийСимволВСтроке(Текст)
	
	Текст = Прав(Текст, СтрДлина(Текст) - 1);
	Текст = Лев(Текст, СтрДлина(Текст) - 1);
	
КонецПроцедуры // УдалитьПервыйИПоследнийСимволВСтроке()

&НаКлиенте
// Возвращает массив строк используемых услуг из таблицы СаратовскаяОбласть_ТаблицаНастроек.
//
// Возвращаемое значение:
//  МассивИспользуемыхСтрок - Массив - сформированный массив используемых услуг.
//
Функция ПолучитьМассивВыбранныхУслуг()
	
	Отбор = Новый Структура("Использовать", Истина);
	МассивИспользуемыхСтрок = Объект.СаратовскаяОбласть_ТаблицаНастроек.НайтиСтроки(Отбор);
	
	Возврат МассивИспользуемыхСтрок;
	
КонецФункции // ПолучитьМассивВыбранныхУслуг()

&НаКлиенте
// Возвращает строку с разделителями, полученная из текущей строки таблицы выгрузки.
//
// Параметры:
//  СтрокаВыгрузки - ДанныеФормыЭлементКоллекции - текущая строка таблицы выгрузки.
//
// Возвращаемое значение:
//  ТекстДанные - Строка - строка с разделителями, полученная из текущей строки таблицы выгрузки.
//
Функция ПолучитьТекстовуюСтрокуСРазделителямиИзТаблицыВыгрузки(СтрокаВыгрузки)
	
	ТекстДанные = "";
	
	ТекстДанные = СтрокаВыгрузки.НОМЕР_ЖП + РазделительCSV + СтрокаВыгрузки.ЛИЦ_СЧ + РазделительCSV + СтрокаВыгрузки.РАЙОН
				+ РазделительCSV + СтрокаВыгрузки.НАС_П_ТИП + РазделительCSV + СтрокаВыгрузки.НАС_П_НАИМ
				+ РазделительCSV + СтрокаВыгрузки.УЛ_ТИП + РазделительCSV + СтрокаВыгрузки.УЛ_НАИМ
				+ РазделительCSV + СтрокаВыгрузки.ДОМ + РазделительCSV + СтрокаВыгрузки.КОРПУС
				+ РазделительCSV + СтрокаВыгрузки.КВАРТИРА + РазделительCSV + СтрокаВыгрузки.КОМНАТА
				+ РазделительCSV + СтрокаВыгрузки.МЕСЯЦ + РазделительCSV + СтрокаВыгрузки.ПРИЗ_ЖП + РазделительCSV + СтрокаВыгрузки.ПРИЗ_ЛС;
	
	Возврат ТекстДанные;
	
КонецФункции // ПолучитьТекстовуюСтрокуСРазделителямиИзТаблицыВыгрузки()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОПРЕДЕЛЕНИЕ ПЕРЕМЕННЫХ

#Область ОпределениеПеременных

НаименованияКолонокТаблицыНачисленийВыгружаемогоCSV = "";
НаименованияКолонокТаблицыОплатВыгружаемогоCSV = "";
РазделительCSV = "';'";
ПерваяСтрокаCSV = "";
ПерваяСтрокаОплатCSV = "";

#КонецОбласти