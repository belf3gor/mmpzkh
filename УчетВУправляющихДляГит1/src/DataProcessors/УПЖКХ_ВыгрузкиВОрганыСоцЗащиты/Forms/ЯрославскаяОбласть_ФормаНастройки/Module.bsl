
#Область ПроцедурыМодуляФормы

// Обработчик события "ПриСозданииНаСервере" формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АдресНастроекВХранилище") И НЕ Параметры.АдресНастроекВХранилище = Неопределено Тогда
		СтруктураНастроек = ПолучитьИзВременногоХранилища(Параметры.АдресНастроекВХранилище);
		Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
			
			Если СтруктураНастроек.Свойство("ЯрославскаяОбласть_СоответствияУслуг") И ТипЗнч(СтруктураНастроек.ЯрославскаяОбласть_СоответствияУслуг) = Тип("ТаблицаЗначений") Тогда
				Объект.ЯрославскаяОбласть_СоответствияУслуг.Загрузить(СтруктураНастроек.ЯрославскаяОбласть_СоответствияУслуг);
			КонецЕсли;
			
			Если СтруктураНастроек.Свойство("ЯрославскаяОбласть_КоммунальныеУслуги") И ТипЗнч(СтруктураНастроек.ЯрославскаяОбласть_КоммунальныеУслуги) = Тип("ТаблицаЗначений") Тогда
				Объект.ЯрославскаяОбласть_КоммунальныеУслуги.Загрузить(СтруктураНастроек.ЯрославскаяОбласть_КоммунальныеУслуги);
			КонецЕсли;
			
			Если СтруктураНастроек.Свойство("ЯрославскаяОбласть_СоответствияЛьготныхКатегорий") 
				И ТипЗнч(СтруктураНастроек.ЯрославскаяОбласть_СоответствияЛьготныхКатегорий) = Тип("ТаблицаЗначений") Тогда
				Объект.ЯрославскаяОбласть_СоответствияЛьготныхКатегорий.Загрузить(СтруктураНастроек.ЯрославскаяОбласть_СоответствияЛьготныхКатегорий);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

// Обработчки команды "СохранитьНастройки".
//
&НаКлиенте
Процедура СохранитьНастройки(Команда)
	
	АдресНастроекВХранилище = ПоместитьУслугиВХранилище();
	Закрыть(АдресНастроекВХранилище);
	
КонецПроцедуры // СохранитьНастройки()

// Процедура помещения услуги в хранилище.
//
&НаСервере
Функция ПоместитьУслугиВХранилище()
	
	Для каждого ТекУслуга Из Объект.ЯрославскаяОбласть_СоответствияУслуг Цикл
		ТекУслуга.КодУслугиПоЛьготам   = СокрЛП(ТекУслуга.КодУслугиПоЛьготам);
		ТекУслуга.КодУслугиПоСубсидиям = СокрЛП(ТекУслуга.КодУслугиПоСубсидиям);
	КонецЦикла;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЯрославскаяОбласть_СоответствияУслуг",             Объект.ЯрославскаяОбласть_СоответствияУслуг.Выгрузить());
	СтруктураПараметров.Вставить("ЯрославскаяОбласть_КоммунальныеУслуги",            Объект.ЯрославскаяОбласть_КоммунальныеУслуги.Выгрузить());
	СтруктураПараметров.Вставить("ЯрославскаяОбласть_СоответствияЛьготныхКатегорий", Объект.ЯрославскаяОбласть_СоответствияЛьготныхКатегорий.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураПараметров, Новый УникальныйИдентификатор);
	
КонецФункции // ПоместитьУслугиВХранилище()

// Обработчик события "ПередОкончаниемРедактирования" поля " ЯрославскаяОбласть_СоответствияЛьготныхКатегорий".
//
&НаКлиенте
Процедура ЯрославскаяОбласть_СоответствияЛьготныхКатегорийПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Не ОтменаРедактирования Тогда
		
		// Проверка правильности заполнения значения колонки "ЛьготнаяКатегория".
		Если Элемент.ТекущиеДанные.ЛьготнаяКатегория = ПредопределенноеЗначение("Справочник.КВП_ЛьготныеКатегории.ПустаяСсылка") Тогда
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Льготная категория должна быть заполнена!");
			Отказ = Истина;
			
		Иначе
			
			Отбор = Новый Структура("ЛьготнаяКатегория");
			Отбор.ЛьготнаяКатегория = Элемент.ТекущиеДанные.ЛьготнаяКатегория;
			
			НайденныеСтроки = Объект.ЯрославскаяОбласть_СоответствияЛьготныхКатегорий.НайтиСтроки(Отбор);
			
			Если НайденныеСтроки.Количество() > 1 Тогда
				
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Льготная категория """ + Отбор.ЛьготнаяКатегория + 
				""" уже установлена в соответствие для льготной категориия """ + НайденныеСтроки[0].ЛьготнаяКатегория + """! Выберите другую льготную категорию.");
				Элемент.ТекущиеДанные.ЛьготнаяКатегория = ПредопределенноеЗначение("Справочник.КВП_ЛьготныеКатегории.ПустаяСсылка");
				Отказ = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Проверка правильности заполнения значения колонки "КодЛьготнойКатегории".
		Если ПустаяСтрока(Элемент.ТекущиеДанные.КодЛьготнойКатегории) Тогда
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Код льготной категории должен быть заполнен!");
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЯрославскаяОбласть_СоответствияЛьготныхКатегорийПередОкончаниемРедактирования()

// Обработчик команды "КомандаЗаполнитьКодыЛьготныхКатегорий".
//
&НаКлиенте
Процедура КомандаЗаполнитьКодыЛьготныхКатегорий(Команда)
	
	Если НЕ Объект.ЯрославскаяОбласть_СоответствияЛьготныхКатегорий.Количество() = 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("КомандаЗаполнитьКодыЛьготныхКатегорийЗавершение", ЭтотОбъект);
		
		ПоказатьВопрос(ОписаниеОповещения, "Перед заполением табличная часть будет очищена. Заполнить?",
						РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКодыЛьготныхКатегорийНаСервере();
	
КонецПроцедуры // КомандаЗаполнитьКодыЛьготныхКатегорий()

// Заполняет ТЧ "Коды льготных категорий" на сервере.
//
&НаКлиенте
Процедура КомандаЗаполнитьКодыЛьготныхКатегорийЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьКодыЛьготныхКатегорийНаСервере();
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьКодыЛьготныхКатегорийЗавершение()

// Заполняет ТЧ "Коды льготных категорий" на сервере.
//
&НаСервере
Процедура ЗаполнитьКодыЛьготныхКатегорийНаСервере()
	
	Объект.ЯрославскаяОбласть_СоответствияЛьготныхКатегорий.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ЛьготныеКатегории.Ссылка КАК ЛьготнаяКатегория,
	|	КВП_ЛьготныеКатегории.Код КАК КодЛьготнойКатегории
	|ИЗ
	|	Справочник.КВП_ЛьготныеКатегории КАК КВП_ЛьготныеКатегории
	|ГДЕ
	|	НЕ КВП_ЛьготныеКатегории.ПометкаУдаления";
	
	СписокЛК = Запрос.Выполнить().Выгрузить();
	
	Объект.ЯрославскаяОбласть_СоответствияЛьготныхКатегорий.Загрузить(СписокЛК);
	
КонецПроцедуры // ЗаполнитьКодыЛьготныхКатегорийНаСервере()

#КонецОбласти