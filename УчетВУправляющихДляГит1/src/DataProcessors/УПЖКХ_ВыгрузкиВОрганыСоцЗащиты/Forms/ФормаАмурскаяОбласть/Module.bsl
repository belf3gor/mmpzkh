
//////////////////////////////////////////////////////////////////////////
// СОХРАНЯЕМЫЕ НАСТРОЙКИ

#Область РаботаСНастройками

&НаСервере
// Процедура восстановления настроек.
//
Процедура ВосстановитьНастройкиНаСервере()
	
	СтруктураПараметров = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("АмурскаяОбластьВыгрузкаВОСЗН", "ПараметрыВыгрузки");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		врТаблица    = Неопределено;
		врПеременная = Неопределено;
		
		// Кодировка файла DBF.
		Если СтруктураПараметров.Свойство("КодировкаDBF", врПеременная) Тогда
			Объект.КодировкаDBF = врПеременная;
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ВариантВыгрузки", врПеременная) Тогда
			ВариантВыгрузки = врПеременная;
		КонецЕсли;
		
		
		Если СтруктураПараметров.Свойство("УчитыватьНачисленияЗаМесяц", врПеременная) Тогда
			УчитыватьНачисленияЗаМесяц = врПеременная;
		КонецЕсли;
		
		// Идентификация данных.
		Если СтруктураПараметров.Свойство("ИдентификацияЛС", врПеременная) Тогда
			Объект.ИдентификацияЛС = врПеременная;
		Иначе
			Объект.ИдентификацияЛС = 0;
		КонецЕсли;
		
		// Каталог загрузки.
		Если СтруктураПараметров.Свойство("ИмяКаталогаЗагрузки", врПеременная) Тогда
			ИмяКаталогаЗагрузки = врПеременная;
		КонецЕсли;
		
		// Каталог выгрузки.
		Если СтруктураПараметров.Свойство("ИмяКаталогаВыгрузки", врПеременная) Тогда
			ИмяКаталогаВыгрузки = врПеременная;
		КонецЕсли;
		
		
		// Таблица настроек.
		Если СтруктураПараметров.Свойство("УслугиВ_ГИС_НМСПН", врТаблица) Тогда
			Если ТипЗнч(врТаблица) = Тип("ТаблицаЗначений") Тогда
				Объект.АмурскаяОбласть_УслугиВ_ГИС_НМСПН.Загрузить(врТаблица);
			КонецЕсли;
		КонецЕсли;
		
		// Таблица услуг в базе.
		Если СтруктураПараметров.Свойство("УслугиВБазе", врТаблица) Тогда
			Если ТипЗнч(врТаблица) = Тип("ТаблицаЗначений") Тогда
				Объект.АмурскаяОбласть_УслугиВБазе.Загрузить(врТаблица);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьНастройкиНаСервере()

&НаСервере
// Процедура сохранения настроек.
//
Процедура СохранитьНастройкиНаСервере()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КодировкаDBF",               Объект.КодировкаDBF);
	СтруктураПараметров.Вставить("ИдентификацияЛС",            Объект.ИдентификацияЛС);
	СтруктураПараметров.Вставить("ИмяКаталогаЗагрузки",        ИмяКаталогаЗагрузки);
	СтруктураПараметров.Вставить("ИмяКаталогаВыгрузки",        ИмяКаталогаВыгрузки);
	СтруктураПараметров.Вставить("УслугиВ_ГИС_НМСПН",          Объект.АмурскаяОбласть_УслугиВ_ГИС_НМСПН.Выгрузить());
	СтруктураПараметров.Вставить("УслугиВБазе",                Объект.АмурскаяОбласть_УслугиВБазе.Выгрузить());
	СтруктураПараметров.Вставить("УчитыватьНачисленияЗаМесяц", УчитыватьНачисленияЗаМесяц);
	СтруктураПараметров.Вставить("ВариантВыгрузки",            ВариантВыгрузки);
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("АмурскаяОбластьВыгрузкаВОСЗН", "ПараметрыВыгрузки", СтруктураПараметров);
	
КонецПроцедуры // СохранитьНастройкиНаСервере()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// РАБОТА С ВРЕМЕННЫМ ХРАНИЛИЩЕМ

#Область РаботаСВременнымХранилищем

&НаСервере
// Помещает настройки во временное хранилище.
//
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("КодировкаDBF",               Объект.КодировкаDBF);
	СтруктураНастроек.Вставить("ИдентификацияЛС",            Объект.ИдентификацияЛС);
	СтруктураНастроек.Вставить("УслугиВ_ГИС_НМСПН",          Объект.АмурскаяОбласть_УслугиВ_ГИС_НМСПН.Выгрузить());
	СтруктураНастроек.Вставить("УслугиВБазе",                Объект.АмурскаяОбласть_УслугиВБазе.Выгрузить());
	СтруктураНастроек.Вставить("УчитыватьНачисленияЗаМесяц", УчитыватьНачисленияЗаМесяц);
	СтруктураНастроек.Вставить("ВариантВыгрузки",            ВариантВыгрузки);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции // ПоместитьНастройкиВХранилище()

&НаСервере
// Получает настройки из временного хранилища.
//
Функция ПолучитьНастройкиИзХранилища(АдресУслугВХранилище)
	
	СтруктураНастроек = ПолучитьИзВременногоХранилища(АдресУслугВХранилище);
	
	врТаблица    = Неопределено;
	врПеременная = Неопределено;
	
	// Кодировка файла DBF.
	Если СтруктураНастроек.Свойство("КодировкаDBF", врПеременная) Тогда
		Объект.КодировкаDBF = врПеременная;
	КонецЕсли;
	
	Если СтруктураНастроек.Свойство("ВариантВыгрузки", врПеременная) Тогда
		ВариантВыгрузки = врПеременная;
	КонецЕсли;
	
	// Идентификация данных.
	Если СтруктураНастроек.Свойство("ИдентификацияЛС", врПеременная) Тогда
		Объект.ИдентификацияЛС = врПеременная;
	КонецЕсли;
	
	Если СтруктураНастроек.Свойство("УчитыватьНачисленияЗаМесяц", врПеременная) Тогда
		УчитыватьНачисленияЗаМесяц = врПеременная;
	КонецЕсли;
	
	// Таблица услуг в ОСЗН.
	Если СтруктураНастроек.Свойство("УслугиВ_ГИС_НМСПН", врТаблица) Тогда
		Если ТипЗнч(врТаблица) = Тип("ТаблицаЗначений") Тогда
			Объект.АмурскаяОбласть_УслугиВ_ГИС_НМСПН.Загрузить(врТаблица);
		КонецЕсли;
	КонецЕсли;
	
	// Таблица услуг в базе.
	Если СтруктураНастроек.Свойство("УслугиВБазе", врТаблица) Тогда
		Если ТипЗнч(врТаблица) = Тип("ТаблицаЗначений") Тогда
			Объект.АмурскаяОбласть_УслугиВБазе.Загрузить(врТаблица);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // ПолучитьНастройкиИзХранилища()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура-обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	ТекРабДата = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	Объект.Период = ТекРабДата;
	
	ВосстановитьНастройкиНаСервере();
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьНастройкиНаСервере();
	
КонецПроцедуры // ПередЗакрытием()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "НачалоВыбора" поля ввода "ИмяКаталогаЗагрузки".
//
Процедура ИмяКаталогаЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогОткрытия = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогОткрытия.Заголовок = "Выберите каталог загрузки";
	
	ДиалогОткрытия.Показать(Новый ОписаниеОповещения("ИмяКаталогаЗагрузкиНачалоВыбораЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяКаталогаЗагрузкиНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ИмяКаталогаЗагрузки = ВыбранныеФайлы[0];
	КонецЕсли;

КонецПроцедуры // ИмяКаталогаЗагрузкиНачалоВыбора()

&НаКлиенте
// Обработчик события "Открытие" поля ввода "ИмяКаталогаЗагрузки".
//
Процедура ИмяКаталогаЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УПЖКХ_ОбщегоНазначенияКлиент.ОткрытьСтраницуВБраузере("explorer " + ИмяКаталогаЗагрузки);
	
КонецПроцедуры // ИмяКаталогаЗагрузкиОткрытие()

&НаКлиенте
// Обработчик события "НачалоВыбора" поля ввода "ИмяКаталогаВыгрузки".
//
Процедура ИмяКаталогаВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогОткрытия = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогОткрытия.Заголовок = "Выберите каталог выгрузки";
	
	ДиалогОткрытия.Показать(Новый ОписаниеОповещения("ИмяКаталогаВыгрузкиНачалоВыбораЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяКаталогаВыгрузкиНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ИмяКаталогаВыгрузки = ВыбранныеФайлы[0];
	КонецЕсли;

КонецПроцедуры // ИмяКаталогаВыгрузкиНачалоВыбора()

&НаКлиенте
// Обработчик события "Открытие" поля ввода "ИмяКаталогаВыгрузки".
//
Процедура ИмяКаталогаВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УПЖКХ_ОбщегоНазначенияКлиент.ОткрытьСтраницуВБраузере("explorer " + ИмяКаталогаВыгрузки);
	
КонецПроцедуры // ИмяКаталогаВыгрузкиОткрытие()

////////////////////////
// Период

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Модифицированность);
	
КонецПроцедуры // ПериодСтрокойПриИзменении()

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры // ПериодСтрокойНачалоВыбора()

&НаКлиенте
// Обработчик события "Регулирование" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Направление,
	Модифицированность);
	
КонецПроцедуры // ПериодСтрокойРегулирование()

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодСтрокойАвтоПодбор()

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодСтрокойОкончаниеВводаТекста()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик события "Нажатие" кнопки "Настройка".
//
Процедура КомандаНастройка(Команда)
	
	АдресНастроекВХранилище = ПоместитьНастройкиВХранилище();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаНастройкаЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты.Форма.АмурскаяОбласть_ФормаНастройки", Новый Структура("АдресНастроекВХранилище", АдресНастроекВХранилище), , , , , ОписаниеОповещения);
	
КонецПроцедуры // КомандаНастройка()

&НаКлиенте
// Обработчик результата опроса команды "КомандаНастройка".
//
Процедура КомандаНастройкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		ПолучитьНастройкиИзХранилища(Результат);
	КонецЕсли;
	
КонецПроцедуры // КомандаНастройкаЗавершение()

&НаКлиенте
// Выполнение команды "ЗагрузитьИзКаталога".
//
Процедура КомандаЗагрузитьИзКаталога(Команда)
	
	Если ПустаяСтрока(ИмяКаталогаЗагрузки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указан каталог загрузки! Загрузка данных прервана!");
		Возврат;
	КонецЕсли;
	
	Если НЕ Элементы.Найти("ГруппаСтраницы") = Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("КомандаЗагрузитьИзФайлаВопрос", ЭтотОбъект);
		
		ТекстВопроса = "Перед загрузкой табличные части будут очищены. Продолжить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		КомандаЗагрузитьИзФайлаПродолжение();
	КонецЕсли;
	
КонецПроцедуры // КомандаЗагрузитьИзКаталога()

&НаКлиенте
// Обработчик результата опроса команды "ЗагрузитьИзФайла".
//
Процедура КомандаЗагрузитьИзФайлаВопрос(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		КомандаЗагрузитьИзФайлаПродолжение();
	КонецЕсли;
	
КонецПроцедуры // КомандаЗагрузитьИзФайлаВопрос()

&НаКлиенте
// Обработчик результата продолжения опроса команды "ЗагрузитьИзФайла".
//
Процедура КомандаЗагрузитьИзФайлаПродолжение()
	
	// Ищем файлы в указанном каталоге
	Если ВариантВыгрузки Тогда
		НачатьПоискФайлов(Новый ОписаниеОповещения("НачатьПоискФайловЗавершение", ЭтотОбъект), ИмяКаталогаЗагрузки, "*.dbf");
		Возврат;
	Иначе
		НачатьПоискФайлов(Новый ОписаниеОповещения("НачатьПоискФайловЗавершение", ЭтотОбъект), ИмяКаталогаЗагрузки, "*.xls");
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПоискФайловЗавершение(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	Файлы = НайденныеФайлы;
	
	Объект.АмурскаяОбласть_СписокТаблицЗначений.Очистить();
	
	Для Каждого файл из Файлы Цикл
		
		// Помещаем загружаемый файл во временное хранилище.
		Оповещение = Новый ОписаниеОповещения("ОбработатьВыборФайла", ЭтотОбъект);
		НачатьПомещениеФайла(Оповещение, , файл.ПолноеИмя, Ложь, УникальныйИдентификатор);
		
	КонецЦикла;

КонецПроцедуры // КомандаЗагрузитьИзФайлаПродолжение()

&НаКлиенте
// Обработчик результата помещения файла во временное хранилище.
Процедура ОбработатьВыборФайла(Результат, АдресФайлаВХранилище, ВыбранноеИмяФайла, Режим) Экспорт
	
	КоличествоНеИдентифицированных = 0;
	Если Результат Тогда
		// Загружаем данные из dbf на сервере.
		ЗагрузитьИзФайлаНаСервере(АдресФайлаВХранилище);
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Количество не идентифицированных счетов: " + КоличествоНеИдентифицированных);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВыборФайла()

&НаСервере
// Загружает копию dbf-файла в текущую таблицу.
// Параметры:
//  АдресФайлаВХранилище - Строка - адрес текущего файла во временном хранилище.
//  Режим                - Строка - наименование режима работы текущего загружаемого файла: "Загрузки" или "Выгрузки".
//
Процедура ЗагрузитьИзФайлаНаСервере(АдресФайлаВХранилище)
	
	// Получаем dbf из временного хранилища.
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВХранилище);
	
	Если ВариантВыгрузки Тогда
		// Для чтения *.dbf файла в кодировке DOS (OEM), урежем имя временного файла.
		КороткоеИмяВременногоФайла = ПолучитьИмяВременногоDBFФайла();
		
		// Записываем dbf в файл с указанным именем.
		ДвоичныеДанные.Записать(КороткоеИмяВременногоФайла);
		
		// Производим чтение dbf файла.
		Файл = Новый XBase;
		
		Если Объект.КодировкаDBF Тогда
			Файл.Кодировка = КодировкаXBase.ANSI;
		Иначе
			Файл.Кодировка = КодировкаXBase.OEM;
		КонецЕсли;
		
		Файл.ОткрытьФайл(КороткоеИмяВременногоФайла, , Истина);	
		
		Если Файл.Открыта() Тогда
			
			Файл.Первая();
			
			СтрокиСУслугойВГИС = Объект.АмурскаяОбласть_УслугиВ_ГИС_НМСПН;
			
			Если СтрокиСУслугойВГИС.Количество() = 0 Тогда
				Отказ = Истина;
			Иначе
				МассивУслуг = новый  Массив;
				Для каждого строка из СтрокиСУслугойВГИС Цикл
					Структура = Новый Структура;
					Структура.Вставить("ИдентификаторУслуги",Формат(строка.ИдентификаторУслуги,"ЧЦ=2; ЧВН="));
					Структура.Вставить("НаименованиеУслуги",строка.НаименованиеУслуги);
					Структура.Вставить("СпособСверткиТарифа",строка.СпособСверткиТарифа);
					МассивУслуг.Добавить(Структура);
				КонецЦикла;
			КонецЕсли;
			
			// Создаем таблицу значений для перебора колонок DBF файла и заполняем колонки.
			ТЗ = Новый ТаблицаЗначений;
			ТЗ = ЗаполнениеКолонокТЗ(ТЗ);
			
			ТЗ1 = Новый ТаблицаЗначений;
			ТЗ1 = ЗаполнениеКолонокТЗ1(ТЗ1, МассивУслуг);
			
			ТЗ2 = Новый ТаблицаЗначений;
			ТЗ2 = ЗаполнениеКолонокТЗ2(ТЗ2);
			
			// Проверяем структуру метаданных ДБФ на соответствие требованиям
			Для Каждого Поле Из Файл.поля Цикл
				Если ТЗ.Колонки.Найти(Поле.Имя) = Неопределено Тогда
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Структура DBF не соответствует требованиям " + КороткоеИмяВременногоФайла);
					Возврат;
				КонецЕсли;
			КонецЦикла;
			
			// Записываем данные ДБФ в таблицу значений.
			Пока Не Файл.ВКонце() Цикл
				
				Строка = ТЗ.Добавить();
				Для каждого поле из Файл.Поля Цикл
					Если Поле.Имя = "LCHET" Тогда
						Строка[Поле.Имя] = СокрЛП(НомерЛицевогоСчета(Файл[Поле.Имя]));
					Иначе
						Строка[Поле.Имя] = СокрЛП(Файл[Поле.Имя]);
					КонецЕсли;
				КонецЦикла;
				
				Файл.Следующая();
				
			КонецЦикла;
			
		Иначе
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось прочитать указанный файл!");
			Файл.ЗакрытьФайл();
			Возврат;
		КонецЕсли;
		
		Файл.ЗакрытьФайл();
		
	Иначе 
		// Для чтения *.dbf файла в кодировке DOS (OEM), урежем имя временного файла.
		КороткоеИмяВременногоФайла = ПолучитьИмяВременногоXLSФайла();
		
		// Записываем dbf в файл с указанным именем.
		ДвоичныеДанные.Записать(КороткоеИмяВременногоФайла);
		
		Попытка
			// Производим чтение dbf файла.
			Файл = Новый COMОбъект("Excel.Application");
			Файл.WorkBooks.Open(КороткоеИмяВременногоФайла); 
		Исключение 
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Ошибка при открытии файла с помощью Excel! Загрузка не будет произведена!"); 
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ОписаниеОшибки()); 
			Возврат; 
		КонецПопытки;
		
		Попытка // Открываем необходимый лист
			Файл.Sheets(1).Select(); // лист 1, по умолчанию
		Исключение // Закрываем файл
			Файл.ActiveWorkbook.Close();
			Файл = 0; 
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Файл " + Строка(КороткоеИмяВременногоФайла) + " не соответствует необходимому формату! Первый лист не найден!");
			ОтменитьТранзакцию();
			Возврат;
		КонецПопытки;
		
		Попытка
			
			// Получим количество строк и колонок. // В разных версиях Excel получаются по-разному, поэтому сначала определим версию Excel.
			Версия = Лев(Файл.Version,Найти(Файл.Version,".")-1);
			Если Версия = "8" тогда 
				ФайлСтрок = Файл.Cells.CurrentRegion.Rows.Count;
				ФайлКолонок = Макс(Файл.Cells.CurrentRegion.Columns.Count, 13);
			Иначе ФайлСтрок = Файл.Cells(1,1).SpecialCells(11).Row;
				ФайлКолонок = Файл.Cells(1,1).SpecialCells(11).Column;
			Конецесли;
			
			СтрокиСУслугойВГИС = Объект.АмурскаяОбласть_УслугиВ_ГИС_НМСПН;
			
			Если СтрокиСУслугойВГИС.Количество() = 0 Тогда
				Отказ = Истина;
			Иначе
				МассивУслуг = новый  Массив;
				Для каждого строка из СтрокиСУслугойВГИС Цикл
					Структура = Новый Структура;
					Структура.Вставить("ИдентификаторУслуги",Формат(строка.ИдентификаторУслуги,"ЧЦ=2; ЧВН="));
					Структура.Вставить("НаименованиеУслуги",строка.НаименованиеУслуги);
					Структура.Вставить("СпособСверткиТарифа",строка.СпособСверткиТарифа);
					МассивУслуг.Добавить(Структура);
				КонецЦикла;
			КонецЕсли;
			
			// Создаем таблицу значений для перебора колонок .
			ТЗ = Новый ТаблицаЗначений;
			ТЗ = ЗаполнениеКолонокТЗ(ТЗ);
			
			ТЗ1 = Новый ТаблицаЗначений;
			ТЗ1 = ЗаполнениеКолонокТЗ1(ТЗ1, МассивУслуг);
			
			ТЗ2 = Новый ТаблицаЗначений;
			ТЗ2 = ЗаполнениеКолонокТЗ2(ТЗ2);
			
			СтруктураКолонок = Новый Соответствие;
			Сч = 1;
			Пока ЗначениеЗаполнено(Файл.Cells(1, Сч).Text) Цикл
				
				ИмяКолонки = Файл.Cells(1, Сч).Text;
				ИмяБезПробелов = СтрЗаменить(ИмяКолонки," ","");
				
				// Убираем из имени колонок пробелы.
				Если ТЗ.Колонки.Найти(ИмяБезПробелов) = Неопределено Тогда
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Структура XLS не соответствует требованиям " + КороткоеИмяВременногоФайла);
					Возврат;
				КонецЕсли;
				
				СтруктураКолонок.Вставить(Сч,ИмяКолонки);
				Сч = Сч + 1;
				
			КонецЦикла;
			
			Для НС = 2 по ФайлСтрок Цикл
				
				НоваяСтрока = ТЗ.Добавить();
				
				Для НомерКолонки = 1 по ТЗ.Колонки.Количество() - 2 Цикл
					
					ТекущееЗначение = Файл.Cells(НС, НомерКолонки).Text;
					ИмяКолонки = СтруктураКолонок.Получить(НомерКолонки);
					
					Если НЕ ИмяКолонки = Неопределено Тогда
						НоваяСтрока[ИмяКолонки] = ТекущееЗначение;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		Исключение
			
			Файл.ActiveWorkbook.Close();
			Файл = 0;
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не удалось прочитать данные из файла!");
			ОтменитьТранзакцию();
			Возврат;
			
		КонецПопытки;
		
		Файл.DisplayAlerts = 0; 
		Файл.Quit(); 
		Файл.DisplayAlerts = 1;
		
	КонецЕсли;
	
	// Стандартизируем наименование здания и улицы в ТЗ.
	ИсключитьАдресныеСокращения(ТЗ, 1);
	
	ТЗИдентифицирован = Новый ТаблицаЗначений;
	
	// Проверяем, есть ли жилец из загружаемого файла в базе.
	ПроизвестиИдентификациюЛицевыхСчетов(ТЗ,ТЗИдентифицирован);
	
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТЗИдентифицирован,ТЗ1);
	ОбщегоНазначенияБПВызовСервера.ЗагрузитьВТаблицуЗначений(ТЗИдентифицирован,ТЗ2);
	
	ТЗПредоставленныхУслуг = новый ТаблицаЗначений;
	
	// Добавляем ТаблицуЗначений на форму.
	ИзменитьФорму(ТЗ2,ТЗ1);
	
	// Очищаем временное хранилище.
	УдалитьИзВременногоХранилища(АдресФайлаВХранилище);
	
КонецПроцедуры // ЗагрузитьИзФайлаНаСервере()

&НаСервере
// Добавляет стандартные колонки в таблицу значений.
Функция ЗаполнениеКолонокТЗ(ТЗ)
	
	// Колонки, присутствующие в ДБВ файле.
	ТЗ.Колонки.Добавить("LCHET",             Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(15)), "Лицевой счет");
	ТЗ.Колонки.Добавить("PKU",               Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(11)), "Номер карточки учета");
	ТЗ.Колонки.Добавить("POS",               Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(9)),  "Пселение");
	ТЗ.Колонки.Добавить("NNASP",             Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(9)),  "Населенный пункт");
	ТЗ.Колонки.Добавить("NYLIC",             Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(23)), "Улица");
	ТЗ.Колонки.Добавить("NDOM",              Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(5)),  "Номер дома");
	ТЗ.Колонки.Добавить("NKORP",             Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(2)),  "Корпус");
	ТЗ.Колонки.Добавить("NKW",               Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(11)), "Номер квартиры");
	ТЗ.Колонки.Добавить("NKOMN",             Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(2)),  "Номер комнаты");
	ТЗ.Колонки.Добавить("НаселенныйПункт",   Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(11)), "");
	ТЗ.Колонки.Добавить("НаименованиеУлицы", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(11)), "");
	
	Возврат ТЗ;
	
КонецФункции // ЗаполнениеКолонокТЗ()

&НаСервере
// Добавляет стандартные колонки в таблицу выгрузки, которая содержит сведения о начислениях.
Функция ЗаполнениеКолонокТЗ1(ТЗ, МассивУслуг)
	
	// Колонки, присутствующие в ДБВ файле.
	ТЗ.Колонки.Добавить("ЛицевойСчет", Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"),      "Лицевой счет");
	ТЗ.Колонки.Добавить("PKU",         Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(11)),  "PKU");
	ТЗ.Колонки.Добавить("POS",         Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(9)),   "POS");
	ТЗ.Колонки.Добавить("NNASP",       Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(9)),   "NNASP");
	ТЗ.Колонки.Добавить("NYLIC",       Новый ОписаниеТипов("Строка",  Новый КвалификаторыСтроки(23)), "NYLIC");
	ТЗ.Колонки.Добавить("NDOM",        Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(5)),   "NDOM");
	ТЗ.Колонки.Добавить("NKORP",       Новый ОписаниеТипов("Строка",  Новый КвалификаторыСтроки(2)),  "NKORP");
	ТЗ.Колонки.Добавить("NKW",         Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(11)),  "NKW");
	ТЗ.Колонки.Добавить("NKOMN",       Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(2)),   "NKOMN");
	ТЗ.Колонки.Добавить("LCHET",       Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(15)),  "LCHET");
	
	// Дополняем данные динамическим набором колонок для выгрузки.
	Для каждого Услуга из МассивУслуг Цикл
		ТЗ.Колонки.Добавить("T" + Услуга.ИдентификаторУслуги, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(9, 2)), "T" + Услуга.ИдентификаторУслуги);
		ТЗ.Колонки.Добавить("P" + Услуга.ИдентификаторУслуги, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(9, 2)), "P" + Услуга.ИдентификаторУслуги);
	КонецЦикла;
	
	Возврат ТЗ;
	
КонецФункции // ЗаполнениеКолонокТЗ()

&НаСервере
// Добавляет стандартные колонки в таблицу выгрузки, которая содержит сведения о задолженностях.
Функция ЗаполнениеКолонокТЗ2(ТЗ)
	
	// Колонки, присутствующие в ДБВ файле.
	ТЗ.Колонки.Добавить("ЛицевойСчет", Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"),     "Лицевой счет");
	ТЗ.Колонки.Добавить("PKU",         Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(11)), "PKU");
	ТЗ.Колонки.Добавить("POS",         Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(9)),  "POS");
	ТЗ.Колонки.Добавить("NNASP",       Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(9)),  "NNASP");
	ТЗ.Колонки.Добавить("NYLIC",       Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(23)), "NYLIC");
	ТЗ.Колонки.Добавить("NDOM",        Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(5)),  "NDOM");
	ТЗ.Колонки.Добавить("NKORP",       Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(2)),  "NKORP");
	ТЗ.Колонки.Добавить("NKW",         Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(11)), "NKW");
	ТЗ.Колонки.Добавить("NKOMN",       Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(2)),  "NKOMN");
	ТЗ.Колонки.Добавить("LCHET",       Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(15)), "LCHET");
	
	// Дополняем данные фиксированным набором колонок для выгрузки.
	ТЗ.Колонки.Добавить("ZADOL", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(11,2)), "Сумма задолженности за отчетный месяц (данные поставщика)");
	
	Возврат ТЗ;
	
КонецФункции // ЗаполнениеКолонокТЗ()

&НаСервере
// Возвращает полное имя временного dbf-файла с указанным именем без расширения.
//
// Параметры:
//  ИмяФайла - Строка - имя файла без расширения.
//
// Возвращаемые параметры:
//  НовоеИмяВременногоФайла - Строка - полное имя временного dbf-файла с указанным именем без расширения.
//
Функция ПолучитьИмяВременногоDBFФайла()
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("dbf");
	
	ФайлДБФ = Новый Файл(ИмяВременногоФайла);
	СтароеИмяФайла = ФайлДБФ.ИмяБезРасширения + ".dbf";
	НовоеИмяФайла  = "in_file.dbf";
	НовоеИмяВременногоФайла = СтрЗаменить(ФайлДБФ.ПолноеИмя, СтароеИмяФайла, НовоеИмяФайла);
	
	Возврат НовоеИмяВременногоФайла;
	
КонецФункции // ПолучитьИмяВременногоDBFФайла()

// Возвращает полное имя временного dbf-файла с указанным именем без расширения.
//
// Параметры:
//  ИмяФайла - Строка - имя файла без расширения.
//
// Возвращаемые параметры:
//  НовоеИмяВременногоФайла - Строка - полное имя временного dbf-файла с указанным именем без расширения.
//
Функция ПолучитьИмяВременногоXLSФайла()
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xls");
	
	ФайлДБФ = Новый Файл(ИмяВременногоФайла);
	СтароеИмяФайла = ФайлДБФ.ИмяБезРасширения + ".xls";
	НовоеИмяФайла  = "in_file.xls";
	НовоеИмяВременногоФайла = СтрЗаменить(ФайлДБФ.ПолноеИмя, СтароеИмяФайла, НовоеИмяФайла);
	
	Возврат НовоеИмяВременногоФайла;
	
КонецФункции

&НаСервере
// Процедура предназначена для исключения из наименования здания и улицы, 
// на которой расположены выгружаемые здания, адресных сокращений.
//
Процедура ИсключитьАдресныеСокращения(ТаблицаДляЗагрузки, НаборПолейДляСокращения)
	
	МассивСокращенийНасПунктов = Новый Массив();
	МассивСокращенийНасПунктов.Добавить("г");
	МассивСокращенийНасПунктов.Добавить("г.");
	МассивСокращенийНасПунктов.Добавить("п");
	МассивСокращенийНасПунктов.Добавить("п.");
	МассивСокращенийНасПунктов.Добавить("с");
	МассивСокращенийНасПунктов.Добавить("с.");
	МассивСокращенийНасПунктов.Добавить("д");
	МассивСокращенийНасПунктов.Добавить("д.");
	МассивСокращенийНасПунктов.Добавить("дп");
	МассивСокращенийНасПунктов.Добавить("нп");
	МассивСокращенийНасПунктов.Добавить("рп");
	МассивСокращенийНасПунктов.Добавить("снт");
	МассивСокращенийНасПунктов.Добавить("ст");
	
	МассивСокращенийУлиц = Новый Массив();
	МассивСокращенийУлиц.Добавить("ул");
	МассивСокращенийУлиц.Добавить("пл");
	МассивСокращенийУлиц.Добавить("пер");
	МассивСокращенийУлиц.Добавить("снт");
	МассивСокращенийУлиц.Добавить("проезд");
	МассивСокращенийУлиц.Добавить("б-р");
	МассивСокращенийУлиц.Добавить("туп");
	МассивСокращенийУлиц.Добавить("п");
	МассивСокращенийУлиц.Добавить("ш");
	МассивСокращенийУлиц.Добавить("пр-кт");
	МассивСокращенийУлиц.Добавить("тракт");
	МассивСокращенийУлиц.Добавить("сквер");
	МассивСокращенийУлиц.Добавить("наб");
	МассивСокращенийУлиц.Добавить("км");
	МассивСокращенийУлиц.Добавить("ж/д_ст");
	МассивСокращенийУлиц.Добавить("сад");
	МассивСокращенийУлиц.Добавить("парк");
	МассивСокращенийУлиц.Добавить("кв-л");
	МассивСокращенийУлиц.Добавить("аллея");
	МассивСокращенийУлиц.Добавить("ул.");
	МассивСокращенийУлиц.Добавить("пл.");
	МассивСокращенийУлиц.Добавить("пер.");
	МассивСокращенийУлиц.Добавить("б-р.");
	МассивСокращенийУлиц.Добавить("туп.");
	МассивСокращенийУлиц.Добавить("п.");
	МассивСокращенийУлиц.Добавить("ш.");
	МассивСокращенийУлиц.Добавить("наб.");
	МассивСокращенийУлиц.Добавить("км.");
	МассивСокращенийУлиц.Добавить("ж/д_ст.");
	МассивСокращенийУлиц.Добавить("сад.");
	
	
	Для Каждого ТекСтрока ИЗ ТаблицаДляЗагрузки Цикл
		
		Если НаборПолейДляСокращения = 1 Тогда
			
			ТекСтрока.НаселенныйПункт   = НормализацияПолейАдресаОбласти(НРег(ТекСтрока.NNASP), МассивСокращенийНасПунктов);
			ТекСтрока.НаименованиеУлицы = НормализацияПолейАдресаОбласти(НРег(ТекСтрока.NYLIC), МассивСокращенийУлиц);
			
		Иначе
			
			ТекСтрока.НаселенныйПункт   = НормализацияПолейАдресаОбласти(НРег(ТекСтрока.НаселенныйПункт), МассивСокращенийНасПунктов);
			ТекСтрока.Улица             = НормализацияПолейАдресаОбласти(НРег(ТекСтрока.Улица),           МассивСокращенийУлиц);
			ТекСтрока.КвартираСтрокой   = Строка(ТекСтрока.Квартира);
			ТекСтрока.НаименованиеЛС    = НомерЛицевогоСчета(ТекСтрока.НаименованиеЛС);
			//ТекСтрока.НаименованиеЛС    = ВыбратьТолькоЦифры(ТекСтрока.НаименованиеЛС);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ИсключитьАдресныеСокращения()

//&НаСервереБезКонтекста
//Функция ВыбратьТолькоЦифры(Знач ИсхСтрока)
//	
//	СписокЦифр = Новый СписокЗначений();
//	СписокЦифр.Добавить("0");
//	СписокЦифр.Добавить("1");
//	СписокЦифр.Добавить("2");
//	СписокЦифр.Добавить("3");
//	СписокЦифр.Добавить("4");
//	СписокЦифр.Добавить("5");
//	СписокЦифр.Добавить("6");
//	СписокЦифр.Добавить("7");
//	СписокЦифр.Добавить("8");
//	СписокЦифр.Добавить("9");
//	СписокЦифр.Добавить("-");
//	СписокЦифр.Добавить("_");
//	
//	ИсхСтрока     = СокрЛП(ИсхСтрока);
//	ВсегоСимволов = СтрДлина(ИсхСтрока);
//	НоваяСтрока   = "";
//	
//	Для Сч = 1 По ВсегоСимволов Цикл
//		
//		Если СписокЦифр.НайтиПоЗначению(Сред(ИсхСтрока, Сч, 1)) = Неопределено Тогда
//			Продолжить;
//		КонецЕсли;
//		
//		НоваяСтрока = НоваяСтрока + Сред(ИсхСтрока, Сч, 1);
//		
//	КонецЦикла;
//	
//	Если ПустаяСтрока(НоваяСтрока) Тогда
//		НоваяСтрока = "0";
//	КонецЕсли;
//	
//	Возврат НоваяСтрока;
//	
//КонецФункции // ВыбратьТолькоЦифры()

&НаСервере
// Функция сокращает название города или улицы: убирает сокращения,
// определяющие тип данного элемента адреса: "г.", "ул." и так далее.
//
// Параметры:
//  Ресурс - Строка - элемент адреса
//
// Возвращаемое значение:
//  Строка - элемент адреса в сокращенном виде
//
Функция НормализацияПолейАдресаОбласти(Ресурс, Массив, НеУчитыватьПробел = Ложь)
	
	Найден = Истина;
	
	Для Каждого Элемент Из Массив Цикл
		
		Если Прав(СокрЛП(Ресурс), СтрДлина(Элемент)) = Элемент Тогда
			ПредСимвол = Сред(СокрЛП(Ресурс), СтрДлина(СокрЛП(Ресурс)) - СтрДлина(Элемент), 1);
			
			Если ПредСимвол = " " Тогда
				Возврат СокрЛП(Лев(СокрЛП(Ресурс), СтрДлина(СокрЛП(Ресурс)) - СтрДлина(Элемент)));
			ИначеЕсли ПредСимвол = "." Тогда
				Возврат СокрЛП(Лев(СокрЛП(Ресурс), СтрДлина(СокрЛП(Ресурс)) - СтрДлина(Элемент) - 1));
			КонецЕсли;
		ИначеЕсли Лев(СокрЛП(Ресурс), СтрДлина(Элемент)) = Элемент Тогда
			СледСимвол = Сред(СокрЛП(Ресурс), СтрДлина(Элемент) + 1, 1);
			
			Если СледСимвол = " " Тогда
				Возврат СокрЛП(Сред(СокрЛП(Ресурс), СтрДлина(Элемент) + 1));
			ИначеЕсли СледСимвол = "." Тогда
				Возврат СокрЛП(Сред(СокрЛП(Ресурс), СтрДлина(Элемент) + 2));
			КонецЕсли;
		Иначе
			
			Найден = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Найден = Ложь Тогда
		Возврат Ресурс;
	КонецЕсли;

	
КонецФункции

&НаСервере
// Процедура предназначена для идентификации льготников из файла с жильцами из базы.
Процедура ПроизвестиИдентификациюЛицевыхСчетов(ТаблицаДляЗагрузки, ТЗЗадолженности)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДатаКон",     КонецМесяца(Объект.Период));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.Адрес КАК Помещение,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.Адрес.Владелец КАК Здание
	|ПОМЕСТИТЬ втЛицевыеОбслуживаемыеВыбраннойОрганизацией
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(&ДатаКон, Организация = &Организация) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Контрагент.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)";
	
	Запрос.Выполнить();
	
	ЗапросПоЗданиям = Новый Запрос;
	ЗапросПоЗданиям.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросПоЗданиям.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	втЛицевыеОбслуживаемыеВыбраннойОрганизацией.Здание КАК Объект
	|ИЗ
	|	втЛицевыеОбслуживаемыеВыбраннойОрганизацией КАК втЛицевыеОбслуживаемыеВыбраннойОрганизацией";
	
	МассивОбъектов = ЗапросПоЗданиям.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация"
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	втЛицевыеОбслуживаемыеВыбраннойОрганизацией.ЛицевойСчет,
	|	втЛицевыеОбслуживаемыеВыбраннойОрганизацией.ЛицевойСчет.Наименование КАК НаименованиеЛС,
	|	втЛицевыеОбслуживаемыеВыбраннойОрганизацией.ЛицевойСчет.Идентификатор КАК ИдентификаторЛС,
	|	втЛицевыеОбслуживаемыеВыбраннойОрганизацией.Помещение,
	|	втЛицевыеОбслуживаемыеВыбраннойОрганизацией.Здание,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НЕ втКонтактнаяИнформация.Город = """"
	|				ТОГДА втКонтактнаяИнформация.Город
	|			КОГДА НЕ втКонтактнаяИнформация.НаселенныйПункт = """"
	|				ТОГДА втКонтактнаяИнформация.НаселенныйПункт
	|			ИНАЧЕ втКонтактнаяИнформация.Регион
	|		КОНЕЦ, """") КАК НаселенныйПункт,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Улица, """") КАК Улица,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Дом, """") КАК Дом,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Корпус, """") КАК Корпус,
	|	втЛицевыеОбслуживаемыеВыбраннойОрганизацией.Помещение.Код КАК Квартира,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(6)) КАК КвартираСтрокой
	|ИЗ
	|	втЛицевыеОбслуживаемыеВыбраннойОрганизацией КАК втЛицевыеОбслуживаемыеВыбраннойОрганизацией
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК втКонтактнаяИнформация
	|		ПО втЛицевыеОбслуживаемыеВыбраннойОрганизацией.Здание = втКонтактнаяИнформация.Объект";
	
	ТаблицаЖильцовИзБазы = Запрос.Выполнить().Выгрузить();
	
	ИсключитьАдресныеСокращения(ТаблицаЖильцовИзБазы, 2);
	
	// Идентификация льготников из файла загрузки с данными из информационной базы.	
	
	Запрос = Новый Запрос;
	
	
	Запрос.УстановитьПараметр("ЖильцовИзБазы",      ТаблицаЖильцовИзБазы);
	Запрос.УстановитьПараметр("ТаблицаДляЗагрузки", ТаблицаДляЗагрузки);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЖильцовИзБазы.ЛицевойСчет КАК ЛицевойСчет,
	|	ЖильцовИзБазы.НаселенныйПункт КАК НаселенныйПункт,
	|	ЖильцовИзБазы.Улица КАК Улица,
	|	ЖильцовИзБазы.Дом КАК Дом,
	|	ЖильцовИзБазы.Корпус КАК Корпус,
	|	ЖильцовИзБазы.КвартираСтрокой КАК КвартираСтрокой,
	|	ЖильцовИзБазы.НаименованиеЛС КАК ЛицевойСчетСтрокой,
	|	ЖильцовИзБазы.ИдентификаторЛС КАК ИдентификаторЛС
	|ПОМЕСТИТЬ втЖильцовИзБазы
	|ИЗ
	|	&ЖильцовИзБазы КАК ЖильцовИзБазы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДляЗагрузки.PKU КАК PKU,
	|	ТаблицаДляЗагрузки.POS КАК POS,
	|	ТаблицаДляЗагрузки.NNASP КАК NNASP,
	|	ТаблицаДляЗагрузки.NYLIC КАК NYLIC,
	|	ТаблицаДляЗагрузки.NDOM КАК NDOM,
	|	ТаблицаДляЗагрузки.NKORP КАК NKORP,
	|	ТаблицаДляЗагрузки.NKW КАК NKW,
	|	ТаблицаДляЗагрузки.NKOMN КАК NKOMN,
	|	ТаблицаДляЗагрузки.LCHET КАК LCHET,
	|	ТаблицаДляЗагрузки.НаселенныйПункт КАК НачеленыйПункт,
	|	ТаблицаДляЗагрузки.НаименованиеУлицы КАК НаименованиеУлицы	
	|ПОМЕСТИТЬ втДанныеИзФайла
	|ИЗ
	|	&ТаблицаДляЗагрузки КАК ТаблицаДляЗагрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеИзФайла.LCHET КАК LCHET,
	|	втДанныеИзФайла.PKU КАК PKU,
	|	втДанныеИзФайла.POS КАК POS,
	|	втДанныеИзФайла.NNASP КАК NNASP,
	|	втДанныеИзФайла.NYLIC КАК NYLIC,
	|	втДанныеИзФайла.NDOM КАК NDOM,
	|	втДанныеИзФайла.NKORP КАК NKORP,
	|	втДанныеИзФайла.NKW КАК NKW,
	|	втДанныеИзФайла.NKOMN КАК NKOMN,
	|   втЖильцовИзБазы.ЛицевойСчет КАК ЛицевойСчет
	|ИЗ
	|	втДанныеИзФайла КАК втДанныеИзФайла
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЖильцовИзБазы КАК втЖильцовИзБазы
	|		ПО (" + ?(Объект.ИдентификацияЛС <> 1, 
	"втДанныеИзФайла.LCHET = втЖильцовИзБазы.ЛицевойСчетСтрокой
	|			ИЛИ втДанныеИзФайла.LCHET = втЖильцовИзБазы.ИдентификаторЛС)",
	"втЖильцовИзБазы.НаселенныйПункт = втДанныеИзФайла.НачеленыйПункт
	|				И втЖильцовИзБазы.Улица = втДанныеИзФайла.НаименованиеУлицы
	|				И втЖильцовИзБазы.Дом = втДанныеИзФайла.NDOM
	|				И втЖильцовИзБазы.Корпус = втДанныеИзФайла.NKORP
	|				И втЖильцовИзБазы.КвартираСтрокой = втДанныеИзФайла.NKW)")+
	"
	|
	|СГРУППИРОВАТЬ ПО
	|	втДанныеИзФайла.PKU,
	|	втДанныеИзФайла.POS,
	|	втДанныеИзФайла.NNASP,
	|	втДанныеИзФайла.NYLIC,
	|	втДанныеИзФайла.NDOM,
	|	втДанныеИзФайла.NKORP,
	|	втДанныеИзФайла.NKW,
	|	втДанныеИзФайла.NKOMN,
	|	втДанныеИзФайла.LCHET,
	|	втЖильцовИзБазы.ЛицевойСчет";
	
	ТЗЗадолженности = Запрос.Выполнить().Выгрузить();
	
	Для каждого СтрокаТаблицы из ТЗЗадолженности Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.ЛицевойСчет) Тогда
			КоличествоНеИдентифицированных = КоличествоНеИдентифицированных + 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Добавление на форму дополнительных реквизитов и элементов.
Процедура ИзменитьФорму(ТЗ,ТЗ1)
	
	УсловноеОформление.Элементы.Очистить();
	ИмяФайла = "Задолженность";
	
	// Проверяем на наличие добавляемых элементов на форме.
	Если НЕ Элементы.Найти(ИмяФайла) = Неопределено Тогда
		
		// Удаляем реквизиты.
		МассивУдаляемыхРеквизитов = Новый Массив;
		МассивУдаляемыхРеквизитов.Добавить(ИмяФайла);
		ИзменитьРеквизиты( ,МассивУдаляемыхРеквизитов);
		
		// Удаляем элементы.
		Элементы.Удалить(Элементы.Найти(ИмяФайла));
		
	КонецЕсли;
	
	// Добавляем реквизиты.
	МассивДобавляемыхРеквизитов = Новый Массив;
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяФайла, Новый ОписаниеТипов("ТаблицаЗначений")));
	
	// Записываем название ТЗ в СписокТаблицЗначений.
	ЗаписываемыйТЗ = Объект.АмурскаяОбласть_СписокТаблицЗначений.Добавить();
	ЗаписываемыйТЗ.НазваниеТаблицыЗначений = ИмяФайла;
	
	Для Каждого Колонка Из ТЗ.Колонки Цикл 
		РеквизитФормы = Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, ИмяФайла, Колонка.Заголовок);
		МассивДобавляемыхРеквизитов.Добавить(РеквизитФормы);
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	// Добавляем элементы формы.
	Если Элементы.Найти("ГруппаСтраницы")= Неопределено Тогда
		СтраницыФормы = Элементы.Добавить("ГруппаСтраницы",Тип("ГруппаФормы"));
		СтраницыФормы.Вид = ВидГруппыФормы.Страницы;
	КонецЕсли;
	
	СтраницаФормы = Элементы.Добавить(ИмяФайла,Тип("ГруппаФормы"),Элементы.ГруппаСтраницы);
	СтраницаФормы.Вид       = ВидГруппыФормы.Страница;
	СтраницаФормы.Заголовок = "Сведения о задолженностях";
	
	ИмяТаблицы = "ТаблицаФормы" + ИмяФайла;
	ТаблицаФормы = Элементы.Добавить(ИмяТаблицы, Тип("ТаблицаФормы"), Элементы[ИмяФайла]);
	ТаблицаФормы.ПутьКДанным = ИмяФайла;
	ТаблицаФормы.КоманднаяПанель.Видимость=Ложь;
	
	Для Каждого Колонка Из ТЗ.Колонки Цикл 
		Элемент = Элементы.Добавить(ИмяТаблицы + Колонка.Имя, Тип("ПолеФормы"), Элементы[ИмяТаблицы]);
		Элемент.Вид         = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = ИмяФайла + "." + Колонка.Имя;
	КонецЦикла;
	
	// Загружаем данные в созданную таблицу.
	ЭтаФорма[ИмяФайла].Загрузить(ТЗ);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТаблицаФормыЗадолженность");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Задолженность.ЛицевойСчет");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.КВП_ЛицевыеСчета.ПустаяСсылка();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СеребристоСерый);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ИмяФайла = "ФактическиПредоставленныеУслуги";
	
	// Проверяем на наличие добавляемых элементов на форме.
	Если НЕ Элементы.Найти(ИмяФайла) = Неопределено Тогда
		
		// Удаляем реквизиты.
		МассивУдаляемыхРеквизитов = Новый Массив;
		МассивУдаляемыхРеквизитов.Добавить(ИмяФайла);
		ИзменитьРеквизиты( ,МассивУдаляемыхРеквизитов);
		
		// Удаляем элементы.
		Элементы.Удалить(Элементы.Найти(ИмяФайла));
		
	КонецЕсли;
	
	// Добавляем реквизиты.
	МассивДобавляемыхРеквизитов = Новый Массив;
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяФайла, Новый ОписаниеТипов("ТаблицаЗначений")));
	
	// Записываем название ТЗ в СписокТаблицЗначений.
	ЗаписываемыйТЗ = Объект.АмурскаяОбласть_СписокТаблицЗначений.Добавить();
	ЗаписываемыйТЗ.НазваниеТаблицыЗначений = ИмяФайла;
	
	Для Каждого Колонка Из ТЗ1.Колонки Цикл 
		РеквизитФормы = Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, ИмяФайла, Колонка.Заголовок);
		МассивДобавляемыхРеквизитов.Добавить(РеквизитФормы);
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	// Добавляем элементы формы.
	Если Элементы.Найти("ГруппаСтраницы")= Неопределено Тогда
		СтраницыФормы = Элементы.Добавить("ГруппаСтраницы",Тип("ГруппаФормы"));
		СтраницыФормы.Вид = ВидГруппыФормы.Страницы;
	КонецЕсли;
	
	СтраницаФормы = Элементы.Добавить(ИмяФайла,Тип("ГруппаФормы"),Элементы.ГруппаСтраницы);
	СтраницаФормы.Вид       = ВидГруппыФормы.Страница;
	СтраницаФормы.Заголовок = "Сведения о фактически предоставленных услугах";
	
	ИмяТаблицы = "ТаблицаФормы" + ИмяФайла;
	ТаблицаФормы = Элементы.Добавить(ИмяТаблицы, Тип("ТаблицаФормы"), Элементы[ИмяФайла]);
	ТаблицаФормы.ПутьКДанным = ИмяФайла;
	ТаблицаФормы.КоманднаяПанель.Видимость=Ложь;
	
	Для Каждого Колонка Из ТЗ1.Колонки Цикл 
		Элемент = Элементы.Добавить(ИмяТаблицы + Колонка.Имя, Тип("ПолеФормы"), Элементы[ИмяТаблицы]);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = ИмяФайла + "." + Колонка.Имя;
	КонецЦикла;
	
	// Загружаем данные в созданную таблицу.
	ЭтаФорма[ИмяФайла].Загрузить(ТЗ1);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента      = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ТаблицаФормыФактическиПредоставленныеУслуги");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ФактическиПредоставленныеУслуги.ЛицевойСчет");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Справочники.КВП_ЛицевыеСчета.ПустаяСсылка();
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СеребристоСерый);
	
КонецПроцедуры // ИзменитьФорму()

&НаКлиенте
// Обработчик команды "Заполнить".
Процедура КомандаЗаполнить(Команда)
	
	Если Объект.АмурскаяОбласть_УслугиВ_ГИС_НМСПН.Количество() = 0
		ИЛИ Объект.АмурскаяОбласть_УслугиВБазе.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указаны настройки соответствия услуг на форме настроек!");
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка ИЗ Объект.АмурскаяОбласть_СписокТаблицЗначений Цикл
		КомандаЗаполнитьНаСервере(Строка.НазваниеТаблицыЗначений);
	КонецЦикла;
	
КонецПроцедуры // КомандаЗаполнить()

&НаСервере
// Процедура заполнения всех данных.
Процедура КомандаЗаполнитьНаСервере(ИмяФайла)
	
	// Записть данных формы в Таблицу Значений
	ТаблицаДляЗагрузки = Новый ТаблицаЗначений;
	ТаблицаДляЗагрузки = РеквизитФормыВЗначение(ИмяФайла);
	
	Если ИмяФайла = "Задолженность" Тогда
		
		ТаблицаДляЗагрузки.ЗаполнитьЗначения(0,"ZADOL");
		
		МассивЛицевыхСчетов = Новый Массив;
		
		Для каждого строкаТаблицы из  ТаблицаДляЗагрузки Цикл
			МассивЛицевыхСчетов.Добавить(строкаТаблицы.ЛицевойСчет);
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	УПЖКХ_Начисления.ЛицевойСчет КАК ЛицевойСчет,
		|	СУММА(УПЖКХ_Начисления.СуммаНачисления) КАК СуммаНачисления
		|ПОМЕСТИТЬ ВТ_начисления
		|ИЗ
		|	РегистрНакопления.УПЖКХ_Начисления КАК УПЖКХ_Начисления
		|ГДЕ
		|	УПЖКХ_Начисления.Период МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|	И УПЖКХ_Начисления.ЛицевойСчет В(&ЛицевойСчет)
		|	И УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)
		|
		|СГРУППИРОВАТЬ ПО
		|	УПЖКХ_Начисления.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет КАК ЛицевойСчет,
		|	ВЫБОР
		|		КОГДА &УчитыватьНачисленияЗаПериод
		|			ТОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияКонечныйОстаток
		|		ИНАЧЕ КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияНачальныйОстаток + ЕСТЬNULL(ВТ_начисления.СуммаНачисления, 0)
		|	КОНЕЦ КАК Задолженность
		|ИЗ
		|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(&НачалоПериода, &ОкончаниеПериода, Авто, , ЛицевойСчет В (&ЛицевойСчет)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_начисления КАК ВТ_начисления
		|		ПО КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет = ВТ_начисления.ЛицевойСчет
		|ГДЕ
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Организация = &Организация";
		
		Запрос.УстановитьПараметр("ЛицевойСчет",                 МассивЛицевыхСчетов);
		Запрос.УстановитьПараметр("Организация",                 Объект.Организация);
		Запрос.УстановитьПараметр("НачалоПериода",               НачалоМесяца(Объект.Период));
		Запрос.УстановитьПараметр("ОкончаниеПериода",            КонецМесяца(Объект.Период));
		Запрос.УстановитьПараметр("УчитыватьНачисленияЗаПериод", УчитыватьНачисленияЗаМесяц);
		
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		
		Пока РезультатЗапроса.Следующий() Цикл
			НайденнаяСтрока = ТаблицаДляЗагрузки.Найти(РезультатЗапроса.ЛицевойСчет, "ЛицевойСчет");
			Если НайденнаяСтрока <> Неопределено Тогда
				НайденнаяСтрока.ZADOL = РезультатЗапроса.Задолженность;
			КонецЕсли;
		КонецЦикла;
		
		ЗначениеВРеквизитФормы(ТаблицаДляЗагрузки,ИмяФайла)
		
	ИначеЕсли ИмяФайла = "ФактическиПредоставленныеУслуги" Тогда
		
		Для каждого строка из Объект.АмурскаяОбласть_УслугиВ_ГИС_НМСПН Цикл
			ТаблицаДляЗагрузки.ЗаполнитьЗначения(0,"T"+Формат(строка.ИдентификаторУслуги,"ЧЦ=2; ЧВН="));
			ТаблицаДляЗагрузки.ЗаполнитьЗначения(0,"P"+Формат(строка.ИдентификаторУслуги,"ЧЦ=2; ЧВН="));
		КонецЦикла;
		
		
		МассивЛицевыхСчетов = Новый Массив;
		
		Для каждого строкаТаблицы из ТаблицаДляЗагрузки Цикл
			МассивЛицевыхСчетов.Добавить(строкаТаблицы.ЛицевойСчет);
		КонецЦикла;
		
		Запрос1 = Новый Запрос;
		Запрос1.Текст = 
		"ВЫБРАТЬ
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
		|	УПЖКХ_НачисленияОбороты.Услуга КАК Услуга,
		|	СУММА(УПЖКХ_НачисленияОбороты.Количество) КАК Количество,
		|	УПЖКХ_НачисленияОбороты.Тариф КАК Тариф,
		|	УПЖКХ_НачисленияОбороты.ВидНачисления КАК ВидНачисления
		|ИЗ
		|	РегистрНакопления.УПЖКХ_Начисления.Обороты КАК УПЖКХ_НачисленияОбороты
		|ГДЕ
		|	УПЖКХ_НачисленияОбороты.Организация = &Организация
		|	И УПЖКХ_НачисленияОбороты.МесяцНачисления МЕЖДУ &НачалоПериода И &ОкончаниеПериода
		|	И УПЖКХ_НачисленияОбороты.ВидНачисления В (&Начисления)
		|	И УПЖКХ_НачисленияОбороты.РазделУчета В (&РазделУчета)
		|	И УПЖКХ_НачисленияОбороты.ЛицевойСчет В(&ЛицевойСчет)
		|
		|СГРУППИРОВАТЬ ПО
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
		|	УПЖКХ_НачисленияОбороты.Услуга,
		|	УПЖКХ_НачисленияОбороты.Тариф,
		|	УПЖКХ_НачисленияОбороты.ВидНачисления";
		
		Запрос1.УстановитьПараметр("ЛицевойСчет",      МассивЛицевыхСчетов);
		Запрос1.УстановитьПараметр("Организация",      Объект.Организация);
		Запрос1.УстановитьПараметр("НачалоПериода",    НачалоМесяца(Объект.Период));
		Запрос1.УстановитьПараметр("ОкончаниеПериода", КонецМесяца(Объект.Период));
		
		Начисления = Новый Массив;
		Начисления.Добавить(Перечисления.УПЖКХ_ВидыНачислений.Начисление);
		Начисления.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПоИПУ);
		Начисления.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу);
		Начисления.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу);
		Начисления.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПоОПУ);
		Начисления.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему);
		Начисления.Добавить(Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему);
		Начисления.Добавить(Перечисления.УПЖКХ_ВидыНачислений.СервисныеУслуги);
		Запрос1.УстановитьПараметр("Начисления",Начисления);
		
		РазделУчета = Новый Массив;
		РазделУчета.Добавить(Перечисления.УПЖКХ_РазделыУчета.НачислениеУслуг);
		РазделУчета.Добавить(Перечисления.УПЖКХ_РазделыУчета.НачислениеПоПУ);
		Запрос1.УстановитьПараметр("РазделУчета",РазделУчета);
		
		РезультатЗапроса1 = Запрос1.Выполнить().Выгрузить();
		
		Для каждого строкаТаблицы из ТаблицаДляЗагрузки Цикл
			
			Отбор = Новый Структура();
			Отбор.Вставить("ЛицевойСчет",строкаТаблицы.ЛицевойСчет); 
			ТаблицаСЛицевымСчетом = РезультатЗапроса1.Скопировать(Отбор);
			
			Для каждого УслугаВОСЗН из Объект.АмурскаяОбласть_УслугиВ_ГИС_НМСПН Цикл
				
				Отбор = Новый Структура();
				Отбор.Вставить("Идентификатор",УслугаВОСЗН.НомерСтроки); 
				ТаблицаУслугВбазе = Объект.АмурскаяОбласть_УслугиВБазе.Выгрузить().Скопировать(Отбор);
				
				Если УслугаВОСЗН.СпособСверткиТарифа = "Максимум" Тогда
					Способсверткистрока = "Максимум";
				ИначеЕсли УслугаВОСЗН.СпособСверткиТарифа = "Минимум" Тогда
					Способсверткистрока = "Минимум";
				ИначеЕсли УслугаВОСЗН.СпособСверткиТарифа = "Суммировать" Тогда
					Способсверткистрока = "Сумма";
				Иначе
					Способсверткистрока = "Среднее";
				КонецЕсли;
				
				Если Найти(УслугаВОСЗН.НаименованиеУслуги,"на ОДН") <> 0 Тогда
					УсловиеОДН = "";
				Иначе
					УсловиеОДН = "НЕ";
				КонецЕсли;
				
				ЗапросУслуг = новый Запрос;
				ЗапросУслуг.Текст = "ВЫБРАТЬ
				|	ТаблицаСЛицевымСчетом.Услуга КАК Услуга,
				|	ТаблицаСЛицевымСчетом.Тариф КАК Тариф,
				|	ТаблицаСЛицевымСчетом.Количество КАК Количество,
				|	ТаблицаСЛицевымСчетом.ВидНачисления КАК ВидНачисления
				|ПОМЕСТИТЬ ВТ_ТаблицаСЛицевымиСчетами
				|ИЗ
				|	&ТаблицаСЛицевымСчетом КАК ТаблицаСЛицевымСчетом
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ТаблицаУслугВбазе.Услуга КАК Услуга
				|ПОМЕСТИТЬ ВТ_ТаблицаУслугВБазе
				|ИЗ
				|	&ТаблицаУслугВбазе КАК ТаблицаУслугВбазе
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	"+ Способсверткистрока +"(ВТ_ТаблицаСЛицевымиСчетами.Тариф) КАК Тариф,
				|	СУММА(ВТ_ТаблицаСЛицевымиСчетами.Количество) КАК Количество
				|ИЗ
				|	ВТ_ТаблицаУслугВБазе КАК ВТ_ТаблицаУслугВБазе
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТаблицаСЛицевымиСчетами КАК ВТ_ТаблицаСЛицевымиСчетами
				|		ПО ВТ_ТаблицаУслугВБазе.Услуга = ВТ_ТаблицаСЛицевымиСчетами.Услуга
				|ГДЕ
				| "+ УсловиеОДН +"	ВТ_ТаблицаСЛицевымиСчетами.ВидНачисления = &ОДН";
				ЗапросУслуг.УстановитьПараметр("ТаблицаСЛицевымСчетом",ТаблицаСЛицевымСчетом);
				ЗапросУслуг.УстановитьПараметр("ТаблицаУслугВбазе",ТаблицаУслугВбазе);
				ЗапросУслуг.УстановитьПараметр("ОДН",Перечисления.УПЖКХ_ВидыНачислений.НачислениеПоОПУ);
				
				СвернутыеУслуги = ЗапросУслуг.Выполнить().Выбрать();
				Если СвернутыеУслуги.Следующий() Тогда
					строкаТаблицы["P"+Формат(УслугаВОСЗН.ИдентификаторУслуги,"ЧЦ=2; ЧВН=")] = СвернутыеУслуги.Количество;
					строкаТаблицы["T"+Формат(УслугаВОСЗН.ИдентификаторУслуги,"ЧЦ=2; ЧВН=")] = СвернутыеУслуги.Тариф;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ЗначениеВРеквизитФормы(ТаблицаДляЗагрузки,ИмяФайла)
		
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьНаСервере()

&НаКлиенте
// Обработчик команды "КомандаВыгрузить".
Процедура КомандаВыгрузить(Команда)
	
	Если ПустаяСтрока(ИмяКаталогаВыгрузки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указан каталог выгрузки!");
		Возврат;
	КонецЕсли;
	
	АдресФайлаВХранилище = КомандаВыгрузитьНаСервере();
	
	Если АдресФайлаВХранилище <> -1 Тогда
		СоответствиеФайлов = ПолучитьИзВременногоХранилища(АдресФайлаВХранилище);
		Сч = 1;
		Для Каждого СтрокаСоответствия ИЗ СоответствиеФайлов Цикл
			ФайлЗаписи = СтрокаСоответствия.Значение;
			ФайлЗаписи.Записать(ИмяКаталогаВыгрузки + "\OUT_F" + Сч + ?(ВариантВыгрузки,".DBF",".XLS"));
			
			ИмяФайла = "\"  + Формат(Объект.Период, "ДФ=ММ")+ "-" + Формат(Объект.Период, "ДФ=гггг") + ?(СтрокаСоответствия.Ключ = "Задолженность","Z","P") + ?(ВариантВыгрузки,".DBF",".XLS");
			
			НачатьПеремещениеФайла(Новый ОписаниеОповещения("ОбработатьРезультатПеремещенияФайла", ЭтаФорма, ИмяФайла), ИмяКаталогаВыгрузки + "\OUT_F" + Сч + ?(ВариантВыгрузки,".DBF",".XLS"), ИмяКаталогаВыгрузки + ИмяФайла);
			Сч = Сч + 1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // КомандаВыгрузить()

&НаКлиенте
// Обработчик результата перемещения файла.
//
Процедура ОбработатьРезультатПеремещенияФайла(ПеремещаемыйФайл, ДополнительныеПараметры) Экспорт
	
	Текст = "Выгрузка в файл " + ДополнительныеПараметры + " завершена!";
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(Текст);
	
КонецПроцедуры // ОбработатьРезультатПеремещенияФайла()

&НаСервере
// Предназначена для выгрузки данных из таблицы данных в dbf-файл.
Функция КомандаВыгрузитьНаСервере()
	
	СтруктураДвоичныхДанных = Новый Соответствие;
	
	Для Каждого Строка из Объект.АмурскаяОбласть_СписокТаблицЗначений Цикл
		
		ИмяФайла = строка.НазваниеТаблицыЗначений;
		
		// Записть данных формы в Таблицу Значений
		ТаблицаДляВыгрузки = Новый ТаблицаЗначений;
		ТаблицаДляВыгрузки = РеквизитФормыВЗначение(ИмяФайла);
		
		Если ТаблицаДляВыгрузки.Количество() = 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Перед выгрузкой табличная часть должна быть заполнена данными о начислениях и оплатах!");
			Продолжить;
		КонецЕсли;
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("DBF");
		ВременныйФайл = Новый Файл(ИмяВременногоФайла);
		СтароеИмяФайла = ВременныйФайл.ИмяБезРасширения;
		НовоеИмяФайла = Прав(ВременныйФайл.ИмяБезРасширения, 8);
		ИмяВременногоФайла = СтрЗаменить(ВременныйФайл.ПолноеИмя, СтароеИмяФайла, НовоеИмяФайла);
		
		DBFФайлВыгрузки = Новый XBase;
		
		DBFФайлВыгрузки.Кодировка = КодировкаXBase.OEM;
		
		КолонкиDBF = ПолучитьКолонкиDBF(ТаблицаДляВыгрузки);
		
		Для Каждого Колонка Из КолонкиDBF Цикл
			
			Если Колонка.Тип = "S" Тогда
				
				DBFФайлВыгрузки.Поля.Добавить(Колонка.Имя, Колонка.Тип, Колонка.Длина);
				
			ИначеЕсли Колонка.Тип = "N" Тогда
				
				DBFФайлВыгрузки.Поля.Добавить(Колонка.Имя, Колонка.Тип, Колонка.РазрядностьЦелойЧасти, Колонка.РазрядностьДробнойЧасти);
				
			ИначеЕсли Колонка.Тип = "D" Тогда
				
				DBFФайлВыгрузки.Поля.Добавить(Колонка.Имя, Колонка.Тип, Колонка.ЧастиДаты);
				
			КонецЕсли;
			
		КонецЦикла;
		
		DBFФайлВыгрузки.СоздатьФайл(ИмяВременногоФайла);
		DBFФайлВыгрузки.АвтоСохранение = Истина;
		
		// Запись данных из табличной части в файл выгрузки.
		Для Каждого Строка Из ТаблицаДляВыгрузки Цикл
			
			DBFФайлВыгрузки.Добавить();
			
			ЗаполнитьЗначенияСвойств(DBFФайлВыгрузки, Строка);
			
			DBFФайлВыгрузки.Записать();
			
		КонецЦикла;
		
		DBFФайлВыгрузки.ЗакрытьФайл();
		
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
		СтруктураДвоичныхДанных.Вставить(ИмяФайла, ДвоичныеДанные);
		
	КонецЦикла;
	
	АдресФайловВХранилище = ПоместитьВоВременноеХранилище(СтруктураДвоичныхДанных, Новый УникальныйИдентификатор);
	
	Возврат АдресФайловВХранилище;
	
КонецФункции

&НаСервере
// Формирует массив структур, состоящих из параметров для записи полей выгружаемого DBF-файла.
//
// Возвращаемое значение:
//  МассивСтруктурКолонок - Массив - массив структур. 
//
Функция ПолучитьКолонкиDBF(ТаблицаДляВыгрузки)
	
	МассивСтруктурКолонок = Новый Массив;
	
	Для Каждого Колонка Из ТаблицаДляВыгрузки.Колонки Цикл
		
		Если Колонка.Имя = "PKU" ИЛИ Колонка.Имя = "POS" ИЛИ Колонка.Имя = "NNASP"
			ИЛИ Колонка.Имя = "NYLIC" ИЛИ Колонка.Имя = "NDOM" ИЛИ Колонка.Имя = "NKORP"
			ИЛИ Колонка.Имя = "NKW" ИЛИ Колонка.Имя = "NKOMN" ИЛИ Колонка.Имя = "LCHET"
			ИЛИ Колонка.Имя = "ZADOL" ИЛИ Найти(Колонка.Имя,"P") <> 0  ИЛИ Найти(Колонка.Имя,"T") <> 0 Тогда
			
			// Элемент массива - данные N-ой строки.
			Структура = Новый Структура;
			Структура.Вставить("Имя", Колонка.Имя);
			
			Если Колонка.ТипЗначения.СодержитТип(Тип("Число")) Тогда
				
				Структура.Вставить("Тип",                     "N");
				Структура.Вставить("РазрядностьЦелойЧасти",   Колонка.ТипЗначения.КвалификаторыЧисла.Разрядность - Колонка.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти);
				Структура.Вставить("РазрядностьДробнойЧасти", Колонка.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти);
				
			ИначеЕсли Колонка.ТипЗначения.СодержитТип(Тип("Строка")) Тогда
				
				Структура.Вставить("Тип",   "S");
				Структура.Вставить("Длина", Колонка.ТипЗначения.КвалификаторыСтроки.Длина);
				
			ИначеЕсли Колонка.ТипЗначения.СодержитТип(Тип("Дата")) Тогда
				
				Структура.Вставить("Тип",       "D");
				Структура.Вставить("ЧастиДаты", Колонка.ТипЗначения.КвалификаторыДаты.ЧастиДаты);
				
			КонецЕсли;
			
			МассивСтруктурКолонок.Добавить(Структура);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивСтруктурКолонок;
	
КонецФункции

#КонецОбласти