
&НаКлиенте
Перем ПредыдущаяУслуга;

&НаКлиенте
Перем ПредыдущаяЛьготнаяКатегория;

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область Форма

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Получаем настройки из хранилища.
	Если Параметры.Свойство("АдресНастроекВХранилище") И Параметры.АдресНастроекВХранилище <> Неопределено Тогда
		
		СтруктураНастроек = ПолучитьИзВременногоХранилища(Параметры.АдресНастроекВХранилище);
		
		Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
			
			// Таблица настроек.
			врТаблицаНастроек = Неопределено;
			Если СтруктураНастроек.Свойство("ЛенинградскаяОбласть_ТаблицаНастроек", врТаблицаНастроек) Тогда
				Если ТипЗнч(врТаблицаНастроек) = Тип("ТаблицаЗначений") Тогда
					Объект.ЛенинградскаяОбласть_ТаблицаНастроек.Загрузить(врТаблицаНастроек);
				КонецЕсли;
			КонецЕсли;
			
			// Таблица услуг в базе.
			врТаблицаУслугВБазе = Неопределено;
			Если СтруктураНастроек.Свойство("ЛенинградскаяОбласть_УслугиВБазе", врТаблицаУслугВБазе) Тогда
				Если ТипЗнч(врТаблицаУслугВБазе) = Тип("ТаблицаЗначений") Тогда
					Объект.ЛенинградскаяОбласть_УслугиВБазе.Загрузить(врТаблицаУслугВБазе);
				КонецЕсли;
			КонецЕсли;
			
			// Таблица льготных категорий ОСЗН.
			врЛьготныеКатегорииОСЗН = Неопределено;
			Если СтруктураНастроек.Свойство("ЛенинградскаяОбласть_ЛьготныеКатегорииОСЗН", врЛьготныеКатегорииОСЗН) Тогда
				Если ТипЗнч(врЛьготныеКатегорииОСЗН) = Тип("ТаблицаЗначений") Тогда
					Объект.ЛенинградскаяОбласть_ЛьготныеКатегорииОСЗН.Загрузить(врЛьготныеКатегорииОСЗН);
				КонецЕсли;
			КонецЕсли;
			
			// Таблица настроек льгот.
			врЛьготыВБазе = Неопределено;
			Если СтруктураНастроек.Свойство("ЛенинградскаяОбласть_ЛьготыВБазе", врЛьготыВБазе) Тогда
				Если ТипЗнч(врЛьготыВБазе) = Тип("ТаблицаЗначений") Тогда
					Объект.ЛенинградскаяОбласть_ЛьготыВБазе.Загрузить(врЛьготыВБазе);
				КонецЕсли;
			КонецЕсли;
			
			// Признак вывода кода-нименования-идентификатора лицевого счета.
			СтруктураНастроек.Свойство("ИдентификацияЛС", Объект.ИдентификацияЛС);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполнение по умолчанию списка услуг в ОСЗН.
	Если Объект.ЛенинградскаяОбласть_ТаблицаНастроек.Количество() = 0 Тогда
		ОбновитьСписокУслугНаСервере();
	КонецЕсли;
	
	// Заполнение по умолчанию кодов единиц измерения в ОСЗН.
	Если Объект.ЛенинградскаяОбласть_ЛьготныеКатегорииОСЗН.Количество() = 0 Тогда
		ОбновитьСписокЛьготНаСервере();
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	// Блокировка командных панелей.
	Если Объект.ЛенинградскаяОбласть_ТаблицаНастроек.Количество() = 0 Тогда
		Элементы.ТП_ЖКУ_ВБазеДобавить.Доступность = Ложь;
	Иначе
		Элементы.ТП_ЖКУ_ВБазеДобавить.Доступность = Истина;
	КонецЕсли;
	
	Если Объект.ЛенинградскаяОбласть_ЛьготныеКатегорииОСЗН.Количество() = 0 Тогда
		Элементы.ТП_ЛьготныеКатегории_ВБазеДобавить.Доступность = Ложь;
	Иначе
		Элементы.ТП_ЛьготныеКатегории_ВБазеДобавить.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область КомандаСохранить

////////////////////
// Сохранить и закрыть

&НаКлиенте
// Обработчик команды "КомандаСохранить".
Процедура КомандаСохранить(Команда)
	
	АдресНастроекВХранилище = ПоместитьНастройкиВХранилище(); 
	Закрыть(АдресНастроекВХранилище);
	
КонецПроцедуры // КомандаСохранить()

////////////////////
// Работа с временным хранилищем

&НаСервере
// Помещает таблицу услуг во временное хранилище.
//
// Возвращаемое значение:
//  Строка - адрес настроек во временном хранилище.
//
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("ЛенинградскаяОбласть_ТаблицаНастроек",       Объект.ЛенинградскаяОбласть_ТаблицаНастроек.Выгрузить());
	СтруктураНастроек.Вставить("ЛенинградскаяОбласть_УслугиВБазе",           Объект.ЛенинградскаяОбласть_УслугиВБазе.Выгрузить());
	СтруктураНастроек.Вставить("ЛенинградскаяОбласть_ЛьготныеКатегорииОСЗН", Объект.ЛенинградскаяОбласть_ЛьготныеКатегорииОСЗН.Выгрузить());
	СтруктураНастроек.Вставить("ЛенинградскаяОбласть_ЛьготыВБазе",           Объект.ЛенинградскаяОбласть_ЛьготыВБазе.Выгрузить());
	СтруктураНастроек.Вставить("ИдентификацияЛС",                            Объект.ИдентификацияЛС);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции // ПоместитьНастройкиВХранилище()

#КонецОбласти

/////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ УСЛУГИ В ОСЗН

#Область КомандаОбновитьСписокУслуг

&НаКлиенте
// Обработчик команды "КомандаОбновитьСписокУслуг".
//
Процедура КомандаОбновитьСписокУслуг(Команда)
	
	Если Объект.ЛенинградскаяОбласть_УслугиВБазе.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаОбновитьСписокУслугЗавершение", ЭтотОбъект);
		
		ТекстВопроса = "Все установленные соответствия будут очищены. Продолжить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ОбновитьСписокУслугНаСервере();
	КонецЕсли;
	
КонецПроцедуры // КомандаОбновитьСписокУслуг()

&НаКлиенте
// Обработчик результата опроса команды "КомандаОбновитьСписокУслуг".
//
Процедура КомандаОбновитьСписокУслугЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Объект.ЛенинградскаяОбласть_УслугиВБазе.Очистить();
		
		ОбновитьСписокУслугНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры // КомандаОбновитьСписокУслугЗавершение()

&НаСервере
// Загружает список услуг в ОСЗН по умолчанию из справочника.
//
Процедура ОбновитьСписокУслугНаСервере()
	
	Объект.ЛенинградскаяОбласть_ТаблицаНастроек.Очистить();
	
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("ЛенинградскаяОбласть_Макет");
	
	СправочникВидыЛьгот = Макет.ПолучитьОбласть("СправочникВидыЛьгот");
	
	Для НомерСтроки = 1 По СправочникВидыЛьгот.ВысотаТаблицы Цикл
		
		НоваяСтрока                    = Объект.ЛенинградскаяОбласть_ТаблицаНастроек.Добавить();
		НоваяСтрока.СуффиксУслугиВОСЗН = СокрЛП(СправочникВидыЛьгот.Область(НомерСтроки, 1).Текст);
		НоваяСтрока.УслугаВОСЗН        = СправочникВидыЛьгот.Область(НомерСтроки, 2).Текст;
		
	КонецЦикла;
	
КонецПроцедуры // ОбновитьСписокУслугНаСервере()

#КонецОбласти

#Область УслугиВОСЗН

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" таблицы "УслугаВОСЗН".
//
Процедура ТаблицаНастроекПриАктивизацииСтроки(Элемент)
	
	ТП_ЖКУ_ВБазе.Очистить();
	
	// При активации строки УслугаВОСЗН, загружаем соответствия в УслугаВБазе. 
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Идентификатор", Элемент.ТекущиеДанные.НомерСтроки);
		
		НайденныеСтроки = Объект.ЛенинградскаяОбласть_УслугиВБазе.НайтиСтроки(Отбор);
		
		Для Каждого ТекСтрока из НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(ТП_ЖКУ_ВБазе.Добавить(), ТекСтрока);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ТаблицаНастроекПриАктивизацииСтроки()

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" строки таблицы "УслугаВОСЗН". 
//
Процедура ТаблицаНастроекПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Устанавливаем запрет на добавление строк копированием.
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ТаблицаНастроекПередНачаломДобавления()

&НаКлиенте
// Процедура - обработчик события "ПослеУдаления" таблицы "УслугаВОСЗН".
//
Процедура ТаблицаНастроекПослеУдаления(Элемент)
	
	ТаблицаНастроекПриАктивизацииСтроки(Элемент);
	
КонецПроцедуры // ТаблицаНастроекПослеУдаления()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ УСЛУГИ В БАЗЕ

#Область ТП_УслугиВБазе

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" таблицы "УслугаВБазе".
//
Процедура ТП_ЖКУ_ВБазеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Если не выбрана строка в левой колоке или добавление строк копированием.
	Если Элементы.ТаблицаНастроек.ТекущиеДанные = Неопределено Или Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ТП_ЖКУ_ВБазеПередНачаломДобавления()

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" таблицы "УслугаВБазе".
//
Процедура ТП_ЖКУ_ВБазеПередУдалением(Элемент, Отказ)
	
	// При удалении строки удаляем соответствующие записи в ЛенинградскаяОбласть_УслугиВБазе. 
	Идентификатор = Элементы.ТаблицаНастроек.ТекущиеДанные.НомерСтроки;
	УслугаВБазе   = Элемент.ТекущиеДанные.УслугаВБазе;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Идентификатор",  Идентификатор);
	Отбор.Вставить("УслугаВБазе",    УслугаВБазе);
	
	СтрокиУдаления = Объект.ЛенинградскаяОбласть_УслугиВБазе.НайтиСтроки(Отбор);
	
	Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
		Объект.ЛенинградскаяОбласть_УслугиВБазе.Удалить(СтрокаУдаления);
	КонецЦикла;
	
КонецПроцедуры // ТП_ЖКУ_ВБазеПередУдалением()

&НаКлиенте
// Процедура - обработчик события "ПриНачалеРедактирования" таблицы "УслугаВБазе".
//
Процедура ТП_ЖКУ_ВБазеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// Запоминаем предыдущее значение перезаписываемой строки.
	Если Не НоваяСтрока Тогда
		ПредыдущаяУслуга = Элемент.ТекущиеДанные.УслугаВБазе;
	КонецЕсли;
	
КонецПроцедуры // ТП_ЖКУ_ВБазеПриНачалеРедактирования()

&НаКлиенте
// Процедура - обработчик события "ПередОкончаниемРедактирования" таблицы "УслугаВБазе".
//
Процедура ТП_ЖКУ_ВБазеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	// Если изменяем выбранное значение, то удаляем предыдущую запись.
	Если Не НоваяСтрока И ЗначениеЗаполнено(ПредыдущаяУслуга) Тогда
		
		Идентификатор = Элементы.ТаблицаНастроек.ТекущиеДанные.НомерСтроки;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Идентификатор", Идентификатор);
		Отбор.Вставить("УслугаВБазе",   ПредыдущаяУслуга);
		
		НайденнаяСтрока = Объект.ЛенинградскаяОбласть_УслугиВБазе.НайтиСтроки(Отбор);
		Объект.ЛенинградскаяОбласть_УслугиВБазе.Удалить(НайденнаяСтрока[0]);
		
	КонецЕсли;
	
КонецПроцедуры // ТП_ЖКУ_ВБазеПередОкончаниемРедактирования()

&НаКлиенте
// Процедура - обработчик события "ПриОкончанииРедактирования" таблицы "УслугаВБазе".
//
Процедура ТП_ЖКУ_ВБазеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не Элемент.ТекущиеДанные = Неопределено И Не ОтменаРедактирования Тогда
		
		Если Элемент.ТекущиеДанные.УслугаВБазе.Пустая() Тогда
			// Удаляем пустую строку.
			ТП_ЖКУ_ВБазе.Удалить(ТП_ЖКУ_ВБазе.Индекс(Элемент.ТекущиеДанные)); 
		Иначе
			// Добавляем запись в ЛенинградскаяОбласть_УслугиВБазе.
			Идентификатор      = Элементы.ТаблицаНастроек.ТекущиеДанные.НомерСтроки;
			СуффиксУслугиВОСЗН = Элементы.ТаблицаНастроек.ТекущиеДанные.СуффиксУслугиВОСЗН;
			УслугаВОСЗН        = Элементы.ТаблицаНастроек.ТекущиеДанные.УслугаВОСЗН;
			УслугаВБазе        = Элемент.ТекущиеДанные.УслугаВБазе;
			
			НоваяСтрокаСоответствия                    = Объект.ЛенинградскаяОбласть_УслугиВБазе.Добавить();
			НоваяСтрокаСоответствия.УслугаВБазе        = УслугаВБазе;
			НоваяСтрокаСоответствия.Идентификатор      = Идентификатор;
			НоваяСтрокаСоответствия.СуффиксУслугиВОСЗН = СуффиксУслугиВОСЗН;
			НоваяСтрокаСоответствия.УслугаВОСЗН        = УслугаВОСЗН;
			
			// Удаляем старую запись при перевыборе.
			Если Не ПредыдущаяУслуга = УслугаВБазе Тогда
				
				Отбор = Новый Структура;
				Отбор.Вставить("Идентификатор", Идентификатор);
				Отбор.Вставить("УслугаВБазе",   ПредыдущаяУслуга);
				
				НайденнаяСтрока = Объект.ЛенинградскаяОбласть_УслугиВБазе.НайтиСтроки(Отбор);
				Если НайденнаяСтрока.Количество() = 1 Тогда
					НайденнаяСтрока[0].УслугаВБазе = УслугаВБазе;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ТП_ЖКУ_ВБазеПриОкончанииРедактирования()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "УслугаВБазе" таблицы "УслугаВБазе".
//
Процедура ТП_ЖКУ_ВБазеУслугаВБазеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Устанавливаем отбор на справочник "Услуги".
	СтандартнаяОбработка = Ложь;
	
	// Список уже выбранных услуг по данной услуге в ОСЗН.
	СписокВыбранныхУслуг = Новый СписокЗначений;
	СтрокиВыбранныхУслуг = Объект.ЛенинградскаяОбласть_УслугиВБазе.НайтиСтроки(Новый Структура("УслугаВОСЗН", Элементы.ТаблицаНастроек.ТекущиеДанные.УслугаВОСЗН));
	Для Каждого СтрокаВыбраннойУслуги Из СтрокиВыбранныхУслуг Цикл
		СписокВыбранныхУслуг.Добавить(СтрокаВыбраннойУслуги.УслугаВБазе);
	КонецЦикла;
	
	Форма = ПолучитьФорму("Справочник.КВП_Услуги.ФормаВыбора", Новый Структура("ТекущаяСтрока", Элементы.ТП_ЖКУ_ВБазе.ТекущиеДанные.УслугаВБазе), Элемент);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Форма.Список.КомпоновщикНастроек.Настройки.Отбор, "Ссылка", СписокВыбранныхУслуг,
															ВидСравненияКомпоновкиДанных.НеВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
	Форма.Открыть();
	
КонецПроцедуры // ТП_ЖКУ_ВБазеУслугаВБазеНачалоВыбора()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ЛЬГОТНЫЕ КАТЕГОРИИ В ОСЗН

#Область КомандаОбновитьСписокЛьгот

&НаКлиенте
// Обработчик команды "КомандаОбновитьСписокЛьгот".
//
Процедура КомандаОбновитьСписокЛьгот(Команда)
	
	Если Объект.ЛенинградскаяОбласть_ЛьготыВБазе.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаОбновитьСписокЛьготЗавершение", ЭтотОбъект);
		
		ТекстВопроса = "Все установленные соответствия будут очищены. Продолжить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ОбновитьСписокЛьготНаСервере();
	КонецЕсли;
	
КонецПроцедуры // КомандаОбновитьСписокЛьгот()

&НаКлиенте
// Обработчик результата опроса команды "КомандаОбновитьСписокЛьгот".
//
Процедура КомандаОбновитьСписокЛьготЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Объект.ЛенинградскаяОбласть_ЛьготыВБазе.Очистить();
		
		ОбновитьСписокЛьготНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры // КомандаОбновитьСписокЛьготЗавершение()

&НаСервере
// Загружает список льготных категорий в ОСЗН по умолчанию из справочника.
//
Процедура ОбновитьСписокЛьготНаСервере()
	
	Объект.ЛенинградскаяОбласть_ЛьготныеКатегорииОСЗН.Очистить();
	
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("ЛенинградскаяОбласть_Макет");
	
	СправочникЛьготныеКатегории = Макет.ПолучитьОбласть("СправочникЛьготныеКатегории");
	
	Для НомерСтроки = 1 По СправочникЛьготныеКатегории.ВысотаТаблицы Цикл
		
		НоваяСтрока                          = Объект.ЛенинградскаяОбласть_ЛьготныеКатегорииОСЗН.Добавить();
		НоваяСтрока.КодЛьготнойКатегорииОСЗН = Число(СправочникЛьготныеКатегории.Область(НомерСтроки, 1).Текст);
		НоваяСтрока.ВидЛьготнойКатегорииОСЗН = СправочникЛьготныеКатегории.Область(НомерСтроки, 2).Текст;
		
	КонецЦикла;
	
КонецПроцедуры // ОбновитьСписокЛьготНаСервере()

#КонецОбласти

#Область ВидыВыплатОСЗН

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" таблицы "ЛьготныеКатегорииОСЗН".
//
Процедура ЛьготныеКатегорииОСЗНПриАктивизацииСтроки(Элемент)
	
	ТП_ЛьготныеКатегории_ВБазе.Очистить();
	
	// При активации строки КодЛьготнойКатегорииОСЗН, загружаем соответствия в УслугаВБазе. 
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("КодЛьготнойКатегорииОСЗН", Элемент.ТекущиеДанные.КодЛьготнойКатегорииОСЗН);
		
		НайденныеСтроки = Объект.ЛенинградскаяОбласть_ЛьготыВБазе.НайтиСтроки(Отбор);
		
		Для Каждого ТекСтрока из НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(ТП_ЛьготныеКатегории_ВБазе.Добавить(), ТекСтрока);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ЛьготныеКатегорииОСЗНПриАктивизацииСтроки()

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" строки таблицы "ЛьготныеКатегорииОСЗН".
//
Процедура ЛьготныеКатегорииОСЗНПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Устанавливаем запрет на добавление строк копированием.
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ЛьготныеКатегорииОСЗНПередНачаломДобавления()

&НаКлиенте
// Процедура - обработчик события "ПослеУдаления" таблицы "ЛьготныеКатегорииОСЗН".
//
Процедура ЛьготныеКатегорииОСЗНПослеУдаления(Элемент)
	
	ЛьготныеКатегорииОСЗНПриАктивизацииСтроки(Элемент);
	
КонецПроцедуры // ЛьготныеКатегорииОСЗНПослеУдаления()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ЛЬГОТНЫЕ КАТЕГОРИИ В БАЗЕ

#Область ТП_ЛьготныеКатегории_ВБазе

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" таблицы "ТП_ЛьготныеКатегории_ВБазе".
//
Процедура ТП_ЛьготныеКатегории_ВБазеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Если не выбрана строка в левой колоке или добавление строк копированием.
	Если Элементы.ЛьготныеКатегорииОСЗН.ТекущиеДанные = Неопределено Или Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ТП_ЛьготныеКатегории_ВБазеПередНачаломДобавления()

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" таблицы "ТП_ЛьготныеКатегории_ВБазе".
//
Процедура ТП_ЛьготныеКатегории_ВБазеПередУдалением(Элемент, Отказ)
	
	// При удалении строки удаляем соответствующие записи в ЛенинградскаяОбласть_ЛьготыВБазе. 
	КодЛьготнойКатегорииОСЗН = Элементы.ЛьготныеКатегорииОСЗН.ТекущиеДанные.КодЛьготнойКатегорииОСЗН;
	ЛьготнаяКатегорияВБазе   = Элемент.ТекущиеДанные.ЛьготнаяКатегорияВБазе;
	
	Отбор = Новый Структура;
	Отбор.Вставить("КодЛьготнойКатегорииОСЗН", КодЛьготнойКатегорииОСЗН);
	Отбор.Вставить("ЛьготнаяКатегорияВБазе",   ЛьготнаяКатегорияВБазе);
	
	СтрокиУдаления = Объект.ЛенинградскаяОбласть_ЛьготыВБазе.НайтиСтроки(Отбор);
	
	Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
		Объект.ЛенинградскаяОбласть_ЛьготыВБазе.Удалить(СтрокаУдаления);
	КонецЦикла;
	
КонецПроцедуры // ТП_ЛьготныеКатегории_ВБазеПередУдалением()

&НаКлиенте
// Процедура - обработчик события "ПриНачалеРедактирования" таблицы "ТП_ЛьготныеКатегории_ВБазе".
//
Процедура ТП_ЛьготныеКатегории_ВБазеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// Запоминаем предыдущее значение перезаписываемой строки.
	Если Не НоваяСтрока Тогда
		ПредыдущаяЛьготнаяКатегория = Элемент.ТекущиеДанные.ЛьготнаяКатегорияВБазе;
	КонецЕсли;
	
КонецПроцедуры // ТП_ЛьготныеКатегории_ВБазеПриНачалеРедактирования()

&НаКлиенте
// Процедура - обработчик события "ПередОкончаниемРедактирования" таблицы "ТП_ЛьготныеКатегории_ВБазе".
//
Процедура ТП_ЛьготныеКатегории_ВБазеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	// Если изменяем выбранное значение, то удаляем предыдущую запись.
	Если Не НоваяСтрока И ЗначениеЗаполнено(ПредыдущаяЛьготнаяКатегория) Тогда
		
		КодЛьготнойКатегорииОСЗН = Элементы.ЛьготныеКатегорииОСЗН.ТекущиеДанные.КодЛьготнойКатегорииОСЗН;
		
		Отбор = Новый Структура;
		Отбор.Вставить("КодЛьготнойКатегорииОСЗН", КодЛьготнойКатегорииОСЗН);
		Отбор.Вставить("ЛьготнаяКатегорияВБазе",   ПредыдущаяЛьготнаяКатегория);
		
		НайденнаяСтрока = Объект.ЛенинградскаяОбласть_ЛьготыВБазе.НайтиСтроки(Отбор);
		Объект.ЛенинградскаяОбласть_ЛьготыВБазе.Удалить(НайденнаяСтрока[0]);
		
	КонецЕсли;
	
КонецПроцедуры // ТП_ЛьготныеКатегории_ВБазеПередОкончаниемРедактирования()

&НаКлиенте
// Процедура - обработчик события "ПриОкончанииРедактирования" таблицы "ТП_ЛьготныеКатегории_ВБазе".
//
Процедура ТП_ЛьготныеКатегории_ВБазеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не Элемент.ТекущиеДанные = Неопределено И Не ОтменаРедактирования Тогда
		
		Если Элемент.ТекущиеДанные.ЛьготнаяКатегорияВБазе.Пустая() Тогда
			// Удаляем пустую строку.
			ТП_ЛьготныеКатегории_ВБазе.Удалить(ТП_ЛьготныеКатегории_ВБазе.Индекс(Элемент.ТекущиеДанные)); 
		Иначе
			// Добавляем запись в ЛенинградскаяОбласть_ЛьготыВБазе.
			КодЛьготнойКатегорииОСЗН = Элементы.ЛьготныеКатегорииОСЗН.ТекущиеДанные.КодЛьготнойКатегорииОСЗН;
			ВидЛьготнойКатегорииОСЗН = Элементы.ЛьготныеКатегорииОСЗН.ТекущиеДанные.ВидЛьготнойКатегорииОСЗН;
			ЛьготнаяКатегорияВБазе   = Элемент.ТекущиеДанные.ЛьготнаяКатегорияВБазе;
			
			НоваяСтрокаСоответствия = Объект.ЛенинградскаяОбласть_ЛьготыВБазе.Добавить();
			НоваяСтрокаСоответствия.КодЛьготнойКатегорииОСЗН = КодЛьготнойКатегорииОСЗН;
			НоваяСтрокаСоответствия.ВидЛьготнойКатегорииОСЗН = ВидЛьготнойКатегорииОСЗН;
			НоваяСтрокаСоответствия.ЛьготнаяКатегорияВБазе   = ЛьготнаяКатегорияВБазе;
			
			// Удаляем старую запись при перевыборе.
			Если Не ПредыдущаяЛьготнаяКатегория = ЛьготнаяКатегорияВБазе Тогда
				
				Отбор = Новый Структура;
				Отбор.Вставить("КодЛьготнойКатегорииОСЗН", КодЛьготнойКатегорииОСЗН);
				Отбор.Вставить("ЛьготнаяКатегорияВБазе",   ПредыдущаяЛьготнаяКатегория);
				
				НайденнаяСтрока = Объект.ЛенинградскаяОбласть_ЛьготыВБазе.НайтиСтроки(Отбор);
				Если НайденнаяСтрока.Количество() = 1 Тогда
					НайденнаяСтрока[0].ЛьготнаяКатегорияВБазе = ЛьготнаяКатегорияВБазе;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ТП_ЛьготныеКатегории_ВБазеПриОкончанииРедактирования()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "ЛьготнаяКатегория" таблицы "ТП_ЛьготныеКатегории_ВБазе".
//
Процедура ТП_ЛьготныеКатегории_ВБазеЛьготнаяКатегорияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Устанавливаем отбор на справочник "Льготные категории".
	СтандартнаяОбработка = Ложь;
	
	// Список уже выбранных льготных категорий.
	СписокВыбранныхЛьготныхКатегорий = Новый СписокЗначений;
	Для Каждого СтрокаВыбранныхЛьготныхКатегорий Из Объект.ЛенинградскаяОбласть_ЛьготыВБазе Цикл
		СписокВыбранныхЛьготныхКатегорий.Добавить(СтрокаВыбранныхЛьготныхКатегорий.ЛьготнаяКатегорияВБазе);
	КонецЦикла;
	
	Форма = ПолучитьФорму("Справочник.КВП_ЛьготныеКатегории.ФормаВыбора", Новый Структура("ТекущаяСтрока", Элементы.ТП_ЛьготныеКатегории_ВБазе.ТекущиеДанные.ЛьготнаяКатегорияВБазе), Элемент);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Форма.Список.КомпоновщикНастроек.Настройки.Отбор, "Ссылка", СписокВыбранныхЛьготныхКатегорий,
															ВидСравненияКомпоновкиДанных.НеВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
	Форма.Открыть();
	
КонецПроцедуры // ТП_ЛьготныеКатегории_ВБазеЛьготнаяКатегорияНачалоВыбора()

#КонецОбласти

