
//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область Форма

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Заполним таблицу "Услуги".
	ЗаполнитьТаблицуУслугВОСЗН();
	
	ВосстановитьНастройкиНаСервере();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии(Отказ)
	
	ОбновитьПериод();
	
	Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьНастройкиНаСервере();
	
КонецПроцедуры // ПередЗакрытием()

////////////////////////
// Сохраняемые настройки

&НаСервере
// Процедура восстановления настроек.
//
Процедура ВосстановитьНастройкиНаСервере()
	
	СтруктураНастроек = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("ВыгрузкаМурманскаяОбласть", "ПараметрыВыгрузки");
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		
		// Каталог выгрузки.
		врИмяКаталогаВыгрузки = Неопределено;
		Если СтруктураНастроек.Свойство("ИмяКаталогаВыгрузки", врИмяКаталогаВыгрузки) Тогда
			Объект.ИмяКаталогаВыгрузки = врИмяКаталогаВыгрузки;
		КонецЕсли;
		
		// Признак выгрузки только льготников.
		врТолькоЛьготники = Неопределено;
		Если СтруктураНастроек.Свойство("ТолькоЛьготники", врТолькоЛьготники) Тогда
			ТолькоЛьготники = врТолькоЛьготники;
		КонецЕсли;
		
		// Благоустройство для признака подключения к газу.
		врПодключениеКГазу = Неопределено;
		Если СтруктураНастроек.Свойство("ПодключениеКГазу", врПодключениеКГазу) Тогда
			ПодключениеКГазу = врПодключениеКГазу;
		КонецЕсли;
		
		// Таблица зданий.
		врТаблица = Неопределено;
		Если СтруктураНастроек.Свойство("МурманскаяОбласть_Здания", врТаблица) Тогда
			Если ТипЗнч(врТаблица) = Тип("ТаблицаЗначений") Тогда
				Объект.МурманскаяОбласть_Здания.Загрузить(врТаблица);
			КонецЕсли;
		КонецЕсли;
		
		// Таблица соответствия услуг.
		Если СтруктураНастроек.Свойство("МурманскаяОбласть_СоответствиеУслуг", врТаблица) Тогда
			Если ТипЗнч(врТаблица) = Тип("ТаблицаЗначений") Тогда
				
				Запрос = Новый Запрос;
				Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
				
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	*
				|ПОМЕСТИТЬ втСоответствиеУслуг
				|ИЗ
				|	&ТаблицаСоответствияУслуг КАК ТаблицаСоответствияУслуг
				|ГДЕ
				|	ТаблицаСоответствияУслуг.Идентификатор В(&МассивИдентификаторов)
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	*
				|ИЗ
				|	втСоответствиеУслуг КАК втСоответствиеУслуг";
				
				Запрос.УстановитьПараметр("ТаблицаСоответствияУслуг", врТаблица);
				Запрос.УстановитьПараметр("МассивИдентификаторов", УслугиВОСЗН.Выгрузить().ВыгрузитьКолонку("Идентификатор"));
			
				РезультатЗапроса = Запрос.Выполнить().Выгрузить();
				Объект.МурманскаяОбласть_СоответствиеУслуг.Загрузить(РезультатЗапроса);
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьНастройкиНаСервере()

&НаСервере
// Процедура сохранения настроек.
//
Процедура СохранитьНастройкиНаСервере()
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("ИмяКаталогаВыгрузки", Объект.ИмяКаталогаВыгрузки);
	
	СтруктураНастроек.Вставить("ТолькоЛьготники", ТолькоЛьготники);
	
	СтруктураНастроек.Вставить("ПодключениеКГазу", ПодключениеКГазу);
	
	СтруктураНастроек.Вставить("МурманскаяОбласть_Здания", Объект.МурманскаяОбласть_Здания.Выгрузить());
	
	СтруктураНастроек.Вставить("МурманскаяОбласть_СоответствиеУслуг", Объект.МурманскаяОбласть_СоответствиеУслуг.Выгрузить());
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("ВыгрузкаМурманскаяОбласть", "ПараметрыВыгрузки", СтруктураНастроек);
	
КонецПроцедуры // СохранитьНастройкиНаСервере()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ПериодСтрокой

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Модифицированность);
	
КонецПроцедуры // ПериодСтрокойПриИзменении()

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры // ПериодСтрокойНачалоВыбора()

&НаКлиенте
// Обработчик события "Регулирование" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Направление, Модифицированность);
	
КонецПроцедуры // ПериодСтрокойРегулирование()

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодСтрокойАвтоПодбор()

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодСтрокойОкончаниеВводаТекста()

&НаКлиенте
// Изменяет период на форме выгрузки.
//
// Параметры:
//  Период - Дата - устанавливаемый период.
//
Процедура ОбновитьПериод(Период = Неопределено)
	
	Объект.Период = ?(Период = Неопределено, УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьРабочуюДату(), КонецМесяца(Период));
	ДатаВыгрузки  = Объект.Период;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры // ОбновитьПериод()

#КонецОбласти

#Область КаталогВыгрузки

&НаКлиенте
// Обработчик события "НачалоВыбора" поля ввода КаталогВыгрузки.
//
Процедура КаталогВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Заголовок                   = "Выбор каталога выгрузки";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ВыборФайлаЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Открытие" поля ввода КаталогВыгрузки.
//
Процедура КаталогВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Каталог = Новый Файл(Объект.ИмяКаталогаВыгрузки);
	
	ДополнительныеПараметры = Новый Структура("Каталог", Каталог);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаНаСуществованиеФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Каталог.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		Объект.ИмяКаталогаВыгрузки = ВыбранныеФайлы[0];
	КонецЕсли;

КонецПроцедуры // КаталогВыгрузкиНачалоВыбора()

&НаКлиенте
Процедура ПроверкаНаСуществованиеФайлаЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	Каталог = ДополнительныеПараметры.Каталог;
	
	Если Существует Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаНаКаталогЗавершение", ЭтотОбъект);
		
		Каталог.НачатьПроверкуЭтоКаталог(ОписаниеОповещения);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПроверкаНаКаталогЗавершение(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Если ЭтоКаталог Тогда
		УПЖКХ_ОбщегоНазначенияКлиент.ОткрытьСтраницуВБраузере(Объект.ИмяКаталогаВыгрузки);
	КонецЕсли;

КонецПроцедуры // КаталогВыгрузкиОткрытие()

#КонецОбласти

#Область МурманскаяОбласть_Здания

&НаКлиенте
// Обработчик события "ПриОкончанииРедактирования" табличного поля "МурманскаяОбласть_Здания" формы.
//
Процедура МурманскаяОбласть_ЗданияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не Элемент.ТекущиеДанные = Неопределено И Не ОтменаРедактирования Тогда
		
		// Исключаем дубли.
		НайденныеСтроки = Объект.МурманскаяОбласть_Здания.НайтиСтроки(Новый Структура("Здание", Элемент.ТекущиеДанные.Здание));
		ЗданиеУжеВыбрано = ?(НайденныеСтроки.Количество() > 1, Истина, Ложь);
		
		Если Элемент.ТекущиеДанные.Здание.Пустая() Или ЗданиеУжеВыбрано Тогда
			// Удаляем пустую строку.
			Объект.МурманскаяОбласть_Здания.Удалить(Объект.МурманскаяОбласть_Здания.Индекс(Элемент.ТекущиеДанные));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // МурманскаяОбласть_ЗданияПриОкончанииРедактирования()

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля "Здание" табличного поля "МурманскаяОбласть_Здания" формы.
//
Процедура ЗданиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЗданиеОбработкаВыбораНаСервере(ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры // ЗданиеОбработкаВыбора()

&НаСервере
// Обработчик события "ОбработкаВыбора" поля "Здание" табличного поля "МурманскаяОбласть_Здания" формы.
//
Процедура ЗданиеОбработкаВыбораНаСервере(ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение.ЭтоГруппа Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("ГруппаЗданий", ВыбранноеЗначение);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КВП_Здания.Ссылка КАК Здание
		|ИЗ
		|	Справочник.КВП_Здания КАК КВП_Здания
		|ГДЕ
		|	КВП_Здания.Родитель = &ГруппаЗданий";
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		Для Каждого Строка Из Результат Цикл
			
			НоваяСтрока = Объект.МурманскаяОбласть_Здания.Добавить();
			НоваяСтрока.Здание = Строка.Здание;
			
		КонецЦикла;
		
		// Удаляем пустые строки.
		ПустыеСтроки = Объект.МурманскаяОбласть_Здания.НайтиСтроки(Новый Структура("Здание", Справочники.КВП_Здания.ПустаяСсылка()));
		
		Для Каждого Строка Из ПустыеСтроки Цикл
			Объект.МурманскаяОбласть_Здания.Удалить(Объект.МурманскаяОбласть_Здания.Индекс(Строка));
		КонецЦикла;
		
		// Сворачиваем таблицу для исключения дублей.
		МурманскаяОбласть_Здания = Объект.МурманскаяОбласть_Здания.Выгрузить();
		МурманскаяОбласть_Здания.Свернуть("Здание");
		Объект.МурманскаяОбласть_Здания.Загрузить(МурманскаяОбласть_Здания);
		
		// Позиционируемся на последней строке.
		КоличествоСтрок = Объект.МурманскаяОбласть_Здания.Количество();
		Если КоличествоСтрок > 0 Тогда
			Элементы.МурманскаяОбласть_Здания.ТекущаяСтрока = Объект.МурманскаяОбласть_Здания[КоличествоСтрок - 1].ПолучитьИдентификатор();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗданиеОбработкаВыбора()

#КонецОбласти

#Область ВыгрузкаФизЛиц

&НаКлиенте
// Процедура производит выгрузку физлиц.
//
Процедура ВыгрузкаФизЛиц()
	
	ПроверитьНастройки(Новый ОписаниеОповещения("ВыгрузкаФизЛицЗавершение", ЭтотОбъект));

КонецПроцедуры

&НаКлиенте
// Проверяет заполнение необходимых для выгрузки реквизитов.
//
// Возвращаемое значение:
//  Булево - признак достаточного заполнения настроек для формирования файла выгрузки.
//
Функция ВыгрузкаФизЛиц_ПодготовитьСтруктуруНастроек()
	
	СтруктураНастроек = Новый Структура("ДатаВыгрузки, ТолькоЛьготники, Здания");
	
	СтруктураНастроек.ДатаВыгрузки    = ДатаВыгрузки;
	СтруктураНастроек.ТолькоЛьготники = ТолькоЛьготники;
	
	Здания = Новый Массив;
	Для Каждого Строка Из Объект.МурманскаяОбласть_Здания Цикл
		Здания.Добавить(Строка.Здание);
	КонецЦикла;
	
	СтруктураНастроек.Здания = Здания;
	
	Возврат СтруктураНастроек;
	
КонецФункции // ВыгрузкаФизЛиц_ПодготовитьСтруктуруНастроек()

&НаСервереБезКонтекста
// Процедура производит выгрузку физлиц.
//
Функция ВыгрузкаФизЛиц_НаСервере(СтруктураНастроек)
	
	Запрос = Новый Запрос;
	
	ОтборПоЛьготникам = "";
	Если СтруктураНастроек.ТолькоЛьготники Тогда
		ОтборПоЛьготникам =
		"Жилец В
		|(ВЫБРАТЬ
		|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий
		|ИЗ
		|	РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(&ДатаВыгрузки, ДатаИзменения <= &ДатаВыгрузки) КАК КВП_НазначенныеЛьготыСрезПоследних
		|ГДЕ
		|	КВП_НазначенныеЛьготыСрезПоследних.Действие) И ";
	КонецЕсли;
	
	ОтборПоЗданиям = "";
	Если СтруктураНастроек.Здания.Количество() > 0 Тогда
		
		ОтборПоЗданиям = "ЛицевойСчет.Адрес.Владелец В (&Здания) И ";
		Запрос.УстановитьПараметр("Здания", СтруктураНастроек.Здания);
		
	КонецЕсли;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	Запрос.УстановитьПараметр("ДатаВыгрузки", КонецДня(СтруктураНастроек.ДатаВыгрузки));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОПроживающихСрезПервых.ЛицевойСчет,
	|	УПЖКХ_СведенияОПроживающихСрезПервых.Жилец,
	|	УПЖКХ_СведенияОПроживающихСрезПервых.ДатаИзменения,
	|	ИСТИНА КАК МеткаПрисутствия
	|ПОМЕСТИТЬ втСведенияОПроживающихСрезПервых
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПервых(&ДатаВыгрузки, ДатаИзменения > &ДатаВыгрузки) КАК УПЖКХ_СведенияОПроживающихСрезПервых
	|ГДЕ
	|	УПЖКХ_СведенияОПроживающихСрезПервых.Проживает
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет,
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец,
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.ДатаИзменения
	|ПОМЕСТИТЬ втСведенияОПроживающихСрезПоследних
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(&ДатаВыгрузки, ДатаИзменения < &ДатаВыгрузки) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
	|ГДЕ
	|	НЕ УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втСведенияОПроживающихСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	втСведенияОПроживающихСрезПоследних.Жилец,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА втСведенияОПроживающихСрезПервых.МеткаПрисутствия
	|				ТОГДА ""Временное отсутствие""
	|		КОНЕЦ, """") КАК ВидРегистрации,
	|	ДОБАВИТЬКДАТЕ(втСведенияОПроживающихСрезПоследних.ДатаИзменения, ДЕНЬ, -1) КАК ДатаВыбытия,
	|	ЕСТЬNULL(втСведенияОПроживающихСрезПервых.ДатаИзменения, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПрибытия
	|ПОМЕСТИТЬ втДанныеОПроживающих
	|ИЗ
	|	втСведенияОПроживающихСрезПоследних КАК втСведенияОПроживающихСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОПроживающихСрезПервых КАК втСведенияОПроживающихСрезПервых
	|		ПО втСведенияОПроживающихСрезПоследних.Жилец = втСведенияОПроживающихСрезПервых.Жилец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет.Адрес.Владелец КАК Здание,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет.Адрес КАК Квартира,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец.ФизЛицо.ДатаРождения КАК ДатаРождения,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ДатаИзменения КАК ДатаИзменения,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ВременнаяРегистрация
	|ПОМЕСТИТЬ втСведенияОЗарегистрированных
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			&ДатаВыгрузки,
	|			" + ОтборПоЛьготникам + ОтборПоЗданиям + "ДатаИзменения <= &ДатаВыгрузки) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втСведенияОЗарегистрированных.ЛицевойСчет,
	|	втСведенияОЗарегистрированных.Жилец,
	|	втСведенияОЗарегистрированных.Здание,
	|	втСведенияОЗарегистрированных.Квартира,
	|	втСведенияОЗарегистрированных.ДатаРождения,
	|	ЕСТЬNULL(ДокументыФизическихЛицСрезПоследних.Серия, """") + "" "" + ЕСТЬNULL(ДокументыФизическихЛицСрезПоследних.Номер, """") КАК Паспорт,
	|	втСведенияОЗарегистрированных.ДатаИзменения,
	|	втСведенияОЗарегистрированных.Зарегистрирован,
	|	втСведенияОЗарегистрированных.ВременнаяРегистрация
	|ПОМЕСТИТЬ втЗарегистрированныеСПаспортнымиДанными
	|ИЗ
	|	втСведенияОЗарегистрированных КАК втСведенияОЗарегистрированных
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
	|				&ДатаВыгрузки,
	|				ФизЛицо В
	|						(ВЫБРАТЬ
	|							втСведенияОЗарегистрированных.Жилец.ФизЛицо
	|						ИЗ
	|							втСведенияОЗарегистрированных КАК втСведенияОЗарегистрированных)
	|					И ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ)) КАК ДокументыФизическихЛицСрезПоследних
	|		ПО втСведенияОЗарегистрированных.Жилец.ФизЛицо = ДокументыФизическихЛицСрезПоследних.Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗарегистрированныеСПаспортнымиДанными.ЛицевойСчет,
	|	втЗарегистрированныеСПаспортнымиДанными.Жилец,
	|	втЗарегистрированныеСПаспортнымиДанными.Здание,
	|	втЗарегистрированныеСПаспортнымиДанными.Квартира,
	|	втЗарегистрированныеСПаспортнымиДанными.ДатаРождения,
	|	втЗарегистрированныеСПаспортнымиДанными.Паспорт,
	|	ВЫБОР
	|		КОГДА втЗарегистрированныеСПаспортнымиДанными.Зарегистрирован
	|			ТОГДА ВЫБОР
	|					КОГДА втЗарегистрированныеСПаспортнымиДанными.ВременнаяРегистрация
	|						ТОГДА 2
	|					ИНАЧЕ ВЫБОР
	|							КОГДА втДанныеОПроживающих.ВидРегистрации = ""Временное отсутствие""
	|								ТОГДА 3
	|							ИНАЧЕ 1
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Зарегистрирован,
	|	втЗарегистрированныеСПаспортнымиДанными.ДатаИзменения
	|ПОМЕСТИТЬ втДанныеБезКомнат
	|ИЗ
	|	втЗарегистрированныеСПаспортнымиДанными КАК втЗарегистрированныеСПаспортнымиДанными
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеОПроживающих КАК втДанныеОПроживающих
	|		ПО втЗарегистрированныеСПаспортнымиДанными.Жилец = втДанныеОПроживающих.Жилец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втДанныеБезКомнат.ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_Помещения.Ссылка) КАК Доля
	|ПОМЕСТИТЬ втДанныеИзСправочника
	|ИЗ
	|	втДанныеБезКомнат КАК втДанныеБезКомнат
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
	|		ПО втДанныеБезКомнат.ЛицевойСчет.Адрес = УПЖКХ_Помещения.Родитель
	|ГДЕ
	|	НЕ УПЖКХ_Помещения.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	втДанныеБезКомнат.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втДанныеБезКомнат.ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.Комната) КАК Доля
	|ПОМЕСТИТЬ втДанныеИзСведений
	|ИЗ
	|	втДанныеБезКомнат КАК втДанныеБезКомнат
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ПривязанныеКЛицевомуСчетуКомнаты.СрезПоследних(
	|				&ДатаВыгрузки,
	|				ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втДанныеБезКомнат.ЛицевойСчет
	|					ИЗ
	|						втДанныеБезКомнат КАК втДанныеБезКомнат)) КАК УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних
	|		ПО втДанныеБезКомнат.ЛицевойСчет = УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.ЛицевойСчет
	|			И втДанныеБезКомнат.ЛицевойСчет.Адрес = УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.Комната.Родитель
	|ГДЕ
	|	УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.Привязка
	|
	|СГРУППИРОВАТЬ ПО
	|	втДанныеБезКомнат.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеБезКомнат.Жилец,
	|	втДанныеБезКомнат.Здание,
	|	втДанныеБезКомнат.Квартира.Код КАК Квартира,
	|	ВЫБОР
	|		КОГДА втДанныеИзСведений.Доля <> 0
	|			ТОГДА втДанныеИзСведений.Доля
	|		КОГДА втДанныеИзСправочника.Доля <> 0
	|			ТОГДА втДанныеИзСправочника.Доля
	|		ИНАЧЕ втДанныеБезКомнат.ЛицевойСчет.Адрес.КоличествоКомнат
	|	КОНЕЦ КАК КоличествоКомнат,
	|	втДанныеБезКомнат.ДатаРождения,
	|	втДанныеБезКомнат.Паспорт,
	|	втДанныеБезКомнат.Зарегистрирован,
	|	втДанныеБезКомнат.ДатаИзменения КАК ДатаРегистрации
	|ПОМЕСТИТЬ втИтоговая
	|ИЗ
	|	втДанныеБезКомнат КАК втДанныеБезКомнат
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеИзСправочника КАК втДанныеИзСправочника
	|		ПО втДанныеБезКомнат.ЛицевойСчет = втДанныеИзСправочника.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеИзСведений КАК втДанныеИзСведений
	|		ПО втДанныеБезКомнат.ЛицевойСчет = втДанныеИзСведений.ЛицевойСчет";
	Запрос.Выполнить();
	
	ЗапросПоЗданиям = Новый Запрос;
	ЗапросПоЗданиям.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросПоЗданиям.Текст = 
	"ВЫБРАТЬ
	|	втИтоговая.Здание КАК Объект
	|ИЗ
	|	втИтоговая КАК втИтоговая
	|
	|СГРУППИРОВАТЬ ПО
	|	втИтоговая.Здание";
	
	МассивОбъектов = ЗапросПоЗданиям.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	втИтоговая.Здание,
	|	втИтоговая.Жилец,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Город, """") КАК City,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Улица, """") КАК Street,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Дом, """") КАК Number,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Корпус, """") КАК Suffix,
	|	втИтоговая.Квартира КАК Flat,
	|	втИтоговая.КоличествоКомнат КАК Room,
	|	втИтоговая.ДатаРождения КАК DR,
	|	втИтоговая.Паспорт КАК NU,
	|	втИтоговая.Зарегистрирован КАК RegType,
	|	втИтоговая.ДатаРегистрации КАК Date
	|ПОМЕСТИТЬ втАдрес
	|ИЗ
	|	втИтоговая КАК втИтоговая
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК втКонтактнаяИнформация
	|		ПО втИтоговая.Здание = втКонтактнаяИнформация.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втАдрес.Здание КАК Здание,
	|	втАдрес.Жилец КАК Жилец,
	|	втАдрес.City,
	|	втАдрес.Street,
	|	втАдрес.Number,
	|	втАдрес.Suffix,
	|	втАдрес.Flat КАК Flat,
	|	втАдрес.Room,
	|	ЕСТЬNULL(ФИОФизическихЛицСрезПоследних.Фамилия, """") КАК F,
	|	ЕСТЬNULL(ФИОФизическихЛицСрезПоследних.Имя, """") КАК I,
	|	ЕСТЬNULL(ФИОФизическихЛицСрезПоследних.Отчество, """") КАК O,
	|	втАдрес.DR,
	|	втАдрес.NU,
	|	втАдрес.RegType,
	|	втАдрес.Date
	|ИЗ
	|	втАдрес КАК втАдрес
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ДатаВыгрузки, ) КАК ФИОФизическихЛицСрезПоследних
	|		ПО втАдрес.Жилец.ФизЛицо = ФИОФизическихЛицСрезПоследних.ФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	Здание,
	|	Flat,
	|	F";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	МассивСтруктур = Новый Массив;
	
	Для Каждого Строка Из Результат Цикл
		
		_ОбработатьАдрес(Строка);
		
		Структура = Новый Структура("City,Street,Number,Suffix,Flat,Room,F,I,O,DR,NU,RegType,Date");
		ЗаполнитьЗначенияСвойств(Структура, Строка);
		
		МассивСтруктур.Добавить(Структура);
		
	КонецЦикла;
	
	Возврат МассивСтруктур;
	
КонецФункции // ВыгрузкаФизЛицНаСервере()

&НаКлиентеНаСервереБезКонтекста
// Процедура обрабатывает адрес.
Процедура _ОбработатьАдрес(СтруктАдрес)
	
	Если Прав("  " + СтруктАдрес.City, 2) = " г" Тогда
		СтруктАдрес.City = Лев(СтруктАдрес.City, СтрДлина(СтруктАдрес.City) - 2);
	КонецЕсли;
	
	Если Прав("   " + СтруктАдрес.Street, 3) = " ул" Тогда
		СтруктАдрес.Street = Лев(СтруктАдрес.Street, СтрДлина(СтруктАдрес.Street) - 3);
	ИначеЕсли Прав("       " + СтруктАдрес.Street, 6) = " пр-кт" Тогда
		СтруктАдрес.Street = Лев(СтруктАдрес.Street, СтрДлина(СтруктАдрес.Street) - 6);
	КонецЕсли;
	
	СтруктАдрес.City = ВРЕГ(СтруктАдрес.City);
	СтруктАдрес.Street = ВРЕГ(СтруктАдрес.Street);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаФизЛицЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	#Если Не ВебКлиент Тогда
	
	Если Результат Тогда
		
		СтруктураНастроек = ВыгрузкаФизЛиц_ПодготовитьСтруктуруНастроек();
		
		МассивСтруктур = ВыгрузкаФизЛиц_НаСервере(СтруктураНастроек);
		
		Если МассивСтруктур.Количество() = 0 Тогда
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не обнаружены данные для выгрузки перечня физических лиц.");
			
		Иначе
			
			ФайлДБФ = Новый XBase;
			ФайлДБФ.Кодировка      = КодировкаXBase.OEM;
			
			ФайлДБФ.Поля.Добавить("City",    "S", 50);
			ФайлДБФ.Поля.Добавить("Street",  "S", 50);
			ФайлДБФ.Поля.Добавить("Number",  "N", 5);
			ФайлДБФ.Поля.Добавить("Suffix",  "S", 5);
			ФайлДБФ.Поля.Добавить("Flat",    "N", 10);
			ФайлДБФ.Поля.Добавить("Room",    "S", 50);
			ФайлДБФ.Поля.Добавить("F",       "S", 50);
			ФайлДБФ.Поля.Добавить("I",       "S", 50);
			ФайлДБФ.Поля.Добавить("O",       "S", 50);
			ФайлДБФ.Поля.Добавить("DR",      "D");
			ФайлДБФ.Поля.Добавить("NU",      "S", 50);
			ФайлДБФ.Поля.Добавить("RegType", "N", 10);
			ФайлДБФ.Поля.Добавить("Date",    "D");
			
			Каталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Объект.ИмяКаталогаВыгрузки);
			ФайлДБФ.СоздатьФайл(Каталог + "Reg.dbf");
			ФайлДБФ.АвтоСохранение = Истина;
			
			Для Каждого Структура Из МассивСтруктур Цикл
				
				ФайлДБФ.Добавить();
				
				ЗаполнитьЗначенияСвойств(ФайлДБФ, Структура,, "Number");
				
				Попытка
					ФайлДБФ.Number = Число(СокрЛП(Структура.Number));
				Исключение
					ФайлДБФ.Number = Число(ПодготовитьЗданиеДляВывода(Структура.Number));
				КонецПопытки;
				
				ФайлДБФ.Записать();
				
			КонецЦикла;
			
			ФайлДБФ.ЗакрытьФайл();
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Выгрузка перечня физических лиц успешно завершена.");
			
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецЕсли
	
КонецПроцедуры // ВыгрузкаФизЛиц()

#КонецОбласти

#Область ВыгрузкаПаспортныхДанных

&НаКлиенте
// Процедура производит выгрузку паспортных данных.
//
Процедура ВыгрузкаПаспортныхДанных()
	
	ПроверитьНастройки(Новый ОписаниеОповещения("ВыгрузкаПаспортныхДанныхЗавершение", ЭтотОбъект));

КонецПроцедуры

&НаКлиенте
// Проверяет заполнение необходимых для выгрузки реквизитов.
//
// Возвращаемое значение:
//  Булево - признак достаточного заполнения настроек для формирования файла выгрузки.
//
Функция ВыгрузкаПаспортныхДанных_ПодготовитьСтруктуруНастроек()
	
	СтруктураНастроек = Новый Структура("ДатаВыгрузки, ТолькоЛьготники, Здания");
	
	СтруктураНастроек.ДатаВыгрузки    = ДатаВыгрузки;
	СтруктураНастроек.ТолькоЛьготники = ТолькоЛьготники;
	
	Здания = Новый Массив;
	Для Каждого Строка Из Объект.МурманскаяОбласть_Здания Цикл
		Здания.Добавить(Строка.Здание);
	КонецЦикла;
	
	СтруктураНастроек.Здания = Здания;
	
	Возврат СтруктураНастроек;
	
КонецФункции // ВыгрузкаПаспортныхДанных_ПодготовитьСтруктуруНастроек()

&НаСервереБезКонтекста
// Процедура производит выгрузку паспортных данных.
//
Функция ВыгрузкаПаспортныхДанных_НаСервере(СтруктураНастроек)
	
	ТаблицаВыгрузки = Новый ТаблицаЗначений;
	ТаблицаВыгрузки.Колонки.Добавить("ПредФамилия");
	ТаблицаВыгрузки.Колонки.Добавить("ПредИмя");
	ТаблицаВыгрузки.Колонки.Добавить("ПредОтчество");
	ТаблицаВыгрузки.Колонки.Добавить("ПредДокумент");
	ТаблицаВыгрузки.Колонки.Добавить("ТекФамилия");
	ТаблицаВыгрузки.Колонки.Добавить("ТекИмя");
	ТаблицаВыгрузки.Колонки.Добавить("ТекОтчество");
	ТаблицаВыгрузки.Колонки.Добавить("ТекДокумент");
	ТаблицаВыгрузки.Колонки.Добавить("Фамилия");
	ТаблицаВыгрузки.Колонки.Добавить("Имя");
	ТаблицаВыгрузки.Колонки.Добавить("Отчество");
	ТаблицаВыгрузки.Колонки.Добавить("Документ");
	ТаблицаВыгрузки.Колонки.Добавить("ДатаИзмененияФИО");
	ТаблицаВыгрузки.Колонки.Добавить("ДатаИзмененияДокумента");
	ТаблицаВыгрузки.Колонки.Добавить("ДатаРождения");
	
	ЗапросПроживающие = Новый Запрос;
	
	ОтборПоЗданиям = "";
	Если СтруктураНастроек.Здания.Количество() > 0 Тогда
		
		ОтборПоЗданиям = ?(СтруктураНастроек.ТолькоЛьготники, " И Проживающий.Владелец.Адрес.Владелец В (&Здания)", " И УПЖКХ_Жильцы.Владелец.Адрес.Владелец В (&Здания)");
		ЗапросПроживающие.УстановитьПараметр("Здания", СтруктураНастроек.Здания);
		
	КонецЕсли;
	
	ЗапросПроживающие.УстановитьПараметр("ДатаВыгрузки", СтруктураНастроек.ДатаВыгрузки);
	
	Если СтруктураНастроек.ТолькоЛьготники Тогда
		
		ЗапросПроживающие.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий КАК Ссылка
		|ИЗ
		|	РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(&ДатаВыгрузки, ДатаИзменения <= &ДатаВыгрузки" + ОтборПоЗданиям + ") КАК КВП_НазначенныеЛьготыСрезПоследних
		|ГДЕ
		|	КВП_НазначенныеЛьготыСрезПоследних.Действие";
		
	Иначе
		
		ЗапросПроживающие.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_Жильцы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
		|ГДЕ
		|	НЕ УПЖКХ_Жильцы.ПометкаУдаления" + ОтборПоЗданиям;
		
	КонецЕсли;
	
	Выборка = ЗапросПроживающие.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТаблицаИзмененийФИО       = ПолучитьИзмененияФИО(Выборка.Ссылка.ФизЛицо, СтруктураНастроек.ДатаВыгрузки);
		ТаблицаИзмененийДокумента = ПолучитьИзмененияДокумента(Выборка.Ссылка.ФизЛицо, СтруктураНастроек.ДатаВыгрузки);
		
		Если ТаблицаИзмененийФИО.Количество() > 1 Или ТаблицаИзмененийДокумента.Количество() > 1 Тогда
			
			НоваяСтрока = ТаблицаВыгрузки.Добавить();
			
			Если ТаблицаИзмененийФИО.Количество() <> 0 Тогда
				
				НоваяСтрока.ДатаИзмененияФИО = ТаблицаИзмененийФИО[0].Период;
				НоваяСтрока.ТекФамилия       = ТаблицаИзмененийФИО[0].Фамилия;
				НоваяСтрока.ТекИмя           = ТаблицаИзмененийФИО[0].Имя;
				НоваяСтрока.ТекОтчество      = ТаблицаИзмененийФИО[0].Отчество;
				
				ИндексФИО                    = ?(ТаблицаИзмененийФИО.Количество() > 1, 1, 0);
				НоваяСтрока.ПредФамилия      = ТаблицаИзмененийФИО[ИндексФИО].Фамилия;
				НоваяСтрока.ПредИмя          = ТаблицаИзмененийФИО[ИндексФИО].Имя;
				НоваяСтрока.ПредОтчество     = ТаблицаИзмененийФИО[ИндексФИО].Отчество;
				
				НоваяСтрока.Документ         = ТаблицаИзмененийФИО[0].Документ;
				
			КонецЕсли;
			
			Если ТаблицаИзмененийДокумента.Количество() <> 0 Тогда
				
				НоваяСтрока.ДатаИзмененияДокумента = ТаблицаИзмененийДокумента[0].Период;
				НоваяСтрока.ТекДокумент            = ТаблицаИзмененийДокумента[0].СерияНомер;
				
				ИндексДокумента                    = ?(ТаблицаИзмененийДокумента.Количество() > 1, 1, 0);
				НоваяСтрока.ПредДокумент           = ТаблицаИзмененийДокумента[ИндексДокумента].СерияНомер;
				
				НоваяСтрока.Фамилия                = ТаблицаИзмененийДокумента[0].Фамилия;
				НоваяСтрока.Имя                    = ТаблицаИзмененийДокумента[0].Имя;
				НоваяСтрока.Отчество               = ТаблицаИзмененийДокумента[0].Отчество;
				
			КонецЕсли;
			
			НоваяСтрока.ДатаРождения = Выборка.Ссылка.ФизЛицо.ДатаРождения;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Заполнение массива структур с данными для передачи на клиента.
	МассивСтруктур = Новый Массив;
	
	Для Каждого СтрТаблицыВыгрузки Из ТаблицаВыгрузки Цикл
		
		Структура = Новый Структура("OldF,OldI,OldO,OldDR,OldNU,NewF,NewI,NewO,NewDR,NewNU,Date");
		
		Структура.OldDR = СтрТаблицыВыгрузки.ДатаРождения;
		Структура.NewDR = СтрТаблицыВыгрузки.ДатаРождения;
		
		Если СтрТаблицыВыгрузки.ДатаИзмененияФИО <> Неопределено И СтрТаблицыВыгрузки.ДатаИзмененияДокумента <> Неопределено Тогда
			
			Если СтрТаблицыВыгрузки.ДатаИзмененияФИО > СтрТаблицыВыгрузки.ДатаИзмененияДокумента Тогда
				Структура.OldF  = СтрТаблицыВыгрузки.ПредФамилия;
				Структура.OldI  = СтрТаблицыВыгрузки.ПредИмя;
				Структура.OldO  = СтрТаблицыВыгрузки.ПредОтчество;
				Структура.OldNU = СтрТаблицыВыгрузки.Документ;
				Структура.NewF  = СтрТаблицыВыгрузки.ТекФамилия;
				Структура.NewI  = СтрТаблицыВыгрузки.ТекИмя;
				Структура.NewO  = СтрТаблицыВыгрузки.ТекОтчество;
				Структура.NewNU = СтрТаблицыВыгрузки.Документ;
				Структура.Date  = СтрТаблицыВыгрузки.ДатаИзмененияФИО;
			Иначе
				Структура.OldF  = СтрТаблицыВыгрузки.Фамилия;
				Структура.OldI  = СтрТаблицыВыгрузки.Имя;
				Структура.OldO  = СтрТаблицыВыгрузки.Отчество;
				Структура.OldNU = СтрТаблицыВыгрузки.ПредДокумент;
				Структура.NewF  = СтрТаблицыВыгрузки.Фамилия;
				Структура.NewI  = СтрТаблицыВыгрузки.Имя;
				Структура.NewO  = СтрТаблицыВыгрузки.Отчество;
				Структура.NewNU = СтрТаблицыВыгрузки.ТекДокумент;
				Структура.Date  = СтрТаблицыВыгрузки.ДатаИзмененияДокумента;
			КонецЕсли;
			
		Иначе
			
			Если СтрТаблицыВыгрузки.ДатаИзмененияФИО <> Неопределено Тогда
				Структура.OldF  = СтрТаблицыВыгрузки.ПредФамилия;
				Структура.OldI  = СтрТаблицыВыгрузки.ПредИмя;
				Структура.OldO  = СтрТаблицыВыгрузки.ПредОтчество;
				Структура.OldNU = СтрТаблицыВыгрузки.Документ;
				Структура.NewF  = СтрТаблицыВыгрузки.ТекФамилия;
				Структура.NewI  = СтрТаблицыВыгрузки.ТекИмя;
				Структура.NewO  = СтрТаблицыВыгрузки.ТекОтчество;
				Структура.NewNU = СтрТаблицыВыгрузки.Документ;
				Структура.Date  = СтрТаблицыВыгрузки.ДатаИзмененияФИО;
			Иначе
				Структура.OldF  = СтрТаблицыВыгрузки.Фамилия;
				Структура.OldI  = СтрТаблицыВыгрузки.Имя;
				Структура.OldO  = СтрТаблицыВыгрузки.Отчество;
				Структура.OldNU = СтрТаблицыВыгрузки.ПредДокумент;
				Структура.NewF  = СтрТаблицыВыгрузки.Фамилия;
				Структура.NewI  = СтрТаблицыВыгрузки.Имя;
				Структура.NewO  = СтрТаблицыВыгрузки.Отчество;
				Структура.NewNU = СтрТаблицыВыгрузки.ТекДокумент;
				Структура.Date  = СтрТаблицыВыгрузки.ДатаИзмененияДокумента;
			КонецЕсли;
			
		КонецЕсли;
		
		МассивСтруктур.Добавить(Структура);
		
	КонецЦикла;
	
	Возврат МассивСтруктур;
	
КонецФункции // ВыгрузкаПаспортныхДанных_НаСервере()

&НаСервереБезКонтекста
// Функция получает данные об измененях ФИО физлица.
Функция ПолучитьИзмененияФИО(Объект, ДатаВыгрузки)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ФизЛицо",      Объект);
	Запрос.УстановитьПараметр("ДатаВыгрузки", ДатаВыгрузки);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФИОФизическихЛиц.ФизическоеЛицо КАК ФизЛицо,
	|	ВЫРАЗИТЬ(ФИОФизическихЛиц.Период КАК ДАТА) КАК Период,
	|	ФИОФизическихЛиц.Фамилия,
	|	ФИОФизическихЛиц.Имя,
	|	ФИОФизическихЛиц.Отчество
	|ПОМЕСТИТЬ втФИОФизЛиц
	|ИЗ
	|	РегистрСведений.ФИОФизическихЛиц КАК ФИОФизическихЛиц
	|ГДЕ
	|	ФИОФизическихЛиц.ФизическоеЛицо = &ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументыФизическихЛицСрезПоследних.Серия + "" "" + ДокументыФизическихЛицСрезПоследних.Номер КАК Документ,
	|	ДокументыФизическихЛицСрезПоследних.Физлицо
	|ПОМЕСТИТЬ втПаспортныеДанные
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
	|			&ДатаВыгрузки,
	|			ФизЛицо В
	|					(ВЫБРАТЬ
	|						втФИОФизЛиц.ФизЛицо
	|					ИЗ
	|						втФИОФизЛиц КАК втФИОФизЛиц)
	|				И ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ)) КАК ДокументыФизическихЛицСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втФИОФизЛиц.Период КАК Период,
	|	втФИОФизЛиц.Фамилия,
	|	втФИОФизЛиц.Имя,
	|	втФИОФизЛиц.Отчество,
	|	ЕСТЬNULL(втПаспортныеДанные.Документ, """") КАК Документ
	|ИЗ
	|	втФИОФизЛиц КАК втФИОФизЛиц
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПаспортныеДанные КАК втПаспортныеДанные
	|		ПО втФИОФизЛиц.ФизЛицо = втПаспортныеДанные.Физлицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции // ПолучитьИзмененияФИО()

&НаСервереБезКонтекста
// Функция получает данные об измененях документов физлица.
Функция ПолучитьИзмененияДокумента(Объект, ДатаВыгрузки)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ФизЛицо",      Объект);
	Запрос.УстановитьПараметр("ДатаВыгрузки", ДатаВыгрузки);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументыФизическихЛиц.Серия + "" "" + ДокументыФизическихЛиц.Номер КАК СерияНомер,
	|	ДокументыФизическихЛиц.Период,
	|	ДокументыФизическихЛиц.Физлицо
	|ПОМЕСТИТЬ втПаспортныеДанные
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц КАК ДокументыФизическихЛиц
	|ГДЕ
	|	ДокументыФизическихЛиц.Физлицо = &ФизЛицо
	|	И ДокументыФизическихЛиц.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ПаспортРФ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФИОФизическихЛицСрезПоследних.Фамилия,
	|	ФИОФизическихЛицСрезПоследних.Имя,
	|	ФИОФизическихЛицСрезПоследних.Отчество,
	|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо КАК ФизЛицо
	|ПОМЕСТИТЬ втФИОФизЛиц
	|ИЗ
	|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(
	|			&ДатаВыгрузки,
	|			ФизическоеЛицо В
	|				(ВЫБРАТЬ
	|					втПаспортныеДанные.Физлицо
	|				ИЗ
	|					втПаспортныеДанные КАК втПаспортныеДанные)) КАК ФИОФизическихЛицСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПаспортныеДанные.СерияНомер,
	|	втПаспортныеДанные.Период,
	|	ЕСТЬNULL(втФИОФизЛиц.Фамилия, """") КАК Фамилия,
	|	ЕСТЬNULL(втФИОФизЛиц.Имя, """") КАК Имя,
	|	ЕСТЬNULL(втФИОФизЛиц.Отчество, """") КАК Отчество
	|ИЗ
	|	втПаспортныеДанные КАК втПаспортныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ втФИОФизЛиц КАК втФИОФизЛиц
	|		ПО втПаспортныеДанные.Физлицо = втФИОФизЛиц.ФизЛицо";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции // ПолучитьИзмененияДокумента()

&НаКлиенте
Процедура ВыгрузкаПаспортныхДанныхЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	#Если Не ВебКлиент Тогда
	
	Если Результат Тогда
		
		СтруктураНастроек = ВыгрузкаПаспортныхДанных_ПодготовитьСтруктуруНастроек();
		
		МассивСтруктур = ВыгрузкаПаспортныхДанных_НаСервере(СтруктураНастроек);
		
		Если МассивСтруктур.Количество() = 0 Тогда
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не обнаружены сведения об изменениях ФИО и паспортных данных физических лиц.");
			
		Иначе
			
			ФайлДБФ = Новый XBase;
			ФайлДБФ.Кодировка = КодировкаXBase.OEM;
			
			ФайлДБФ.Поля.Добавить("OldF",  "S", 50);
			ФайлДБФ.Поля.Добавить("OldI",  "S", 50);
			ФайлДБФ.Поля.Добавить("OldO",  "S", 50);
			ФайлДБФ.Поля.Добавить("OldDR", "D");
			ФайлДБФ.Поля.Добавить("OldNU", "S", 50);
			ФайлДБФ.Поля.Добавить("NewF",  "S", 50);
			ФайлДБФ.Поля.Добавить("NewI",  "S", 50);
			ФайлДБФ.Поля.Добавить("NewO",  "S", 50);
			ФайлДБФ.Поля.Добавить("NewDR", "D");
			ФайлДБФ.Поля.Добавить("NewNU", "S", 50);
			ФайлДБФ.Поля.Добавить("Date",  "D");
			
			Каталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Объект.ИмяКаталогаВыгрузки);
			ФайлДБФ.СоздатьФайл(Каталог + "People.dbf");
			ФайлДБФ.АвтоСохранение = Истина;
			
			Для Каждого Структура Из МассивСтруктур Цикл
				
				ФайлДБФ.Добавить();
				
				ЗаполнитьЗначенияСвойств(ФайлДБФ, Структура);
				
				ФайлДБФ.Записать();
				
			КонецЦикла;
			
			ФайлДБФ.ЗакрытьФайл();
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Выгрузка изменений ФИО и паспортных данных физических лиц успешно завершена.");
			
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецЕсли

КонецПроцедуры // ВыгрузкаПаспортныхДанных()

#КонецОбласти

#Область ВыгрузкаИнформацииОВыбывшихЖильцах

&НаКлиенте
// Процедура производит выгрузку физлиц.
//
Процедура ВыгрузкаИнформацииОВыбывшихЖильцах()
	
	ВыгрузкаИнформацииОВыбывшихЖильцах_ПроверитьНастройки(Новый ОписаниеОповещения("ВыгрузкаИнформацииОВыбывшихЖильцахЗавершение", ЭтотОбъект));

КонецПроцедуры

&НаКлиенте
// Проверяет заполнение необходимых для выгрузки реквизитов.
//
// Возвращаемое значение:
//  Булево - признак достаточного заполнения настроек для формирования файла выгрузки.
//
Функция ВыгрузкаИнформацииОВыбывшихЖильцах_ПодготовитьСтруктуруНастроек()
	
	СтруктураНастроек = Новый Структура("ДатаНачало,ДатаКонец,ТолькоЛьготники,Здания");
	
	СтруктураНастроек.ДатаНачало      = НачалоМесяца(Объект.Период);
	СтруктураНастроек.ДатаКонец       = КонецМесяца(Объект.Период);
	СтруктураНастроек.ТолькоЛьготники = ТолькоЛьготники;
	
	Здания = Новый Массив;
	Для Каждого Строка Из Объект.МурманскаяОбласть_Здания Цикл
		Здания.Добавить(Строка.Здание);
	КонецЦикла;
	
	СтруктураНастроек.Здания = Здания;
	
	Возврат СтруктураНастроек;
	
КонецФункции // ВыгрузкаИнформацииОВыбывшихЖильцах_ПодготовитьСтруктуруНастроек()

&НаСервереБезКонтекста
// Процедура производит выгрузку физлиц.
//
Функция ВыгрузкаИнформацииОВыбывшихЖильцах_НаСервере(СтруктураНастроек)
	
	Запрос = Новый Запрос;
	
	ОтборПоЛьготникам = "";
	Если СтруктураНастроек.ТолькоЛьготники Тогда
		ОтборПоЛьготникам =
		"УПЖКХ_СведенияОЗарегистрированных.Жилец В
		|	(ВЫБРАТЬ
		|		КВП_НазначенныеЛьготыСрезПоследних.Проживающий
		|	ИЗ
		|		РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(&ДатаВыгрузки, Действие И ДатаИзменения <= &ДатаВыгрузки) КАК КВП_НазначенныеЛьготыСрезПоследних) И ";
	КонецЕсли;
	
	ОтборПоЗданиям = "";
	Если СтруктураНастроек.Здания.Количество() > 0 Тогда
		
		ОтборПоЗданиям = "УПЖКХ_СведенияОЗарегистрированных.ЛицевойСчет.Адрес.Владелец В (&Здания) И ";
		Запрос.УстановитьПараметр("Здания", СтруктураНастроек.Здания);
		
	КонецЕсли;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	Запрос.УстановитьПараметр("ДатаНачало",        СтруктураНастроек.ДатаНачало);
	Запрос.УстановитьПараметр("ДатаКонец",         СтруктураНастроек.ДатаКонец);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОЗарегистрированных.ЛицевойСчет.Адрес.Владелец КАК Здание,
	|	УПЖКХ_СведенияОЗарегистрированных.Жилец,
	|	УПЖКХ_СведенияОЗарегистрированных.Жилец.ФизЛицо КАК ФизЛицо,
	|	УПЖКХ_СведенияОЗарегистрированных.Жилец.ФизЛицо.ДатаРождения КАК ДатаРождения,
	|	УПЖКХ_СведенияОЗарегистрированных.ЛицевойСчет.Адрес.Код КАК Квартира,
	|	УПЖКХ_СведенияОЗарегистрированных.ДатаИзменения
	|ПОМЕСТИТЬ втИтоговая
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных КАК УПЖКХ_СведенияОЗарегистрированных
	|ГДЕ
	|	" + ОтборПоЛьготникам + ОтборПоЗданиям + "НЕ УПЖКХ_СведенияОЗарегистрированных.Зарегистрирован
	|	И УПЖКХ_СведенияОЗарегистрированных.ДатаИзменения МЕЖДУ &ДатаНачало И &ДатаКонец";
	Запрос.Выполнить();
	
	ЗапросПоЗданиям = Новый Запрос;
	ЗапросПоЗданиям.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросПоЗданиям.Текст = 
	"ВЫБРАТЬ
	|	втИтоговая.Здание КАК Объект
	|ИЗ
	|	втИтоговая КАК втИтоговая
	|
	|СГРУППИРОВАТЬ ПО
	|	втИтоговая.Здание";
	
	МассивОбъектов = ЗапросПоЗданиям.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	втИтоговая.Здание,
	|	втИтоговая.Жилец,
	|	втИтоговая.ФизЛицо,
	|	втИтоговая.ДатаРождения,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Улица, """") КАК Улица,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Дом, """") КАК Дом,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Корпус, """") КАК Корпус,
	|	втИтоговая.Квартира,
	|	втИтоговая.ДатаИзменения
	|ПОМЕСТИТЬ втАдрес
	|ИЗ
	|	втИтоговая КАК втИтоговая
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК втКонтактнаяИнформация
	|		ПО втИтоговая.Здание = втКонтактнаяИнформация.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втАдрес.Здание КАК Здание,
	|	втАдрес.Жилец,
	|	втАдрес.ФизЛицо,
	|	ЕСТЬNULL(ФИОФизическихЛицСрезПоследних.Фамилия, """") КАК Фамилия,
	|	ЕСТЬNULL(ФИОФизическихЛицСрезПоследних.Имя, """") КАК Имя,
	|	ЕСТЬNULL(ФИОФизическихЛицСрезПоследних.Отчество, """") КАК Отчество,
	|	втАдрес.ДатаРождения,
	|	втАдрес.Улица,
	|	ВЫБОР
	|		КОГДА втАдрес.Корпус = """"
	|			ТОГДА втАдрес.Дом
	|		ИНАЧЕ втАдрес.Дом + ""/"" + втАдрес.Корпус
	|	КОНЕЦ КАК Дом,
	|	втАдрес.Квартира КАК Квартира,
	|	втАдрес.ДатаИзменения
	|ИЗ
	|	втАдрес КАК втАдрес
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ДатаКонец, ) КАК ФИОФизическихЛицСрезПоследних
	|		ПО втАдрес.Жилец.ФизЛицо = ФИОФизическихЛицСрезПоследних.ФизическоеЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	Здание,
	|	Квартира";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	МассивСтруктур = Новый Массив;
	
	Для Каждого Строка Из Результат Цикл
		
		Структура = Новый Структура("Фамилия,Имя,Отчество,ДатаРождения,Улица,Дом,Квартира,ДатаИзменения");
		ЗаполнитьЗначенияСвойств(Структура, Строка);
		
		МассивСтруктур.Добавить(Структура);
		
	КонецЦикла;
	
	Возврат МассивСтруктур;
	
КонецФункции // ВыгрузкаИнформацииОВыбывшихЖильцах_НаСервере()

&НаСервере
// Процедура производит выгрузку физлиц.
//
Функция ВыгрузкаИнформацииОВыбывшихЖильцах_СформироватьТабличныйДокумент(МассивСтруктур)
	
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("МурманскаяОбласть_Макет");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ОбластьШапка = Макет.ПолучитьОбласть("ОбластьШапка");
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	Для Каждого Структура Из МассивСтруктур Цикл
		
		ОбластьСтрока = Макет.ПолучитьОбласть("ОбластьСтрока");
		ОбластьСтрока.Параметры.Заполнить(Структура);
		ТабличныйДокумент.Вывести(ОбластьСтрока);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ВыгрузкаИнформацииОВыбывшихЖильцах_СформироватьТабличныйДокумент()

&НаКлиенте
Процедура ВыгрузкаИнформацииОВыбывшихЖильцахЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		
		СтруктураНастроек = ВыгрузкаИнформацииОВыбывшихЖильцах_ПодготовитьСтруктуруНастроек();
		
		МассивСтруктур = ВыгрузкаИнформацииОВыбывшихЖильцах_НаСервере(СтруктураНастроек);
		
		Если МассивСтруктур.Количество() = 0 Тогда
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не обнаружены данные для выгрузки информации о выбывших жильцах.");
			
		Иначе
			
			ТабличныйДокумент = ВыгрузкаИнформацииОВыбывшихЖильцах_СформироватьТабличныйДокумент(МассивСтруктур);
			
			Каталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Объект.ИмяКаталогаВыгрузки);
			ТабличныйДокумент.Записать(Каталог + "Информация о выбывших гражданах, " + Формат(Объект.Период, "ДФ='MMMM yyyy'") + ".xls", ТипФайлаТабличногоДокумента.XLS);
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Выгрузка информации о выбывших жильцах успешно завершена.");
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ВыгрузкаФизЛиц()

&НаКлиенте
// Проверяет заполнение необходимых для выгрузки реквизитов.
//
// Возвращаемое значение:
//  Булево - признак достаточного заполнения настроек для формирования файла выгрузки.
//
Процедура ВыгрузкаИнформацииОВыбывшихЖильцах_ПроверитьНастройки(Знач Оповещение)
	
	Если Объект.Период = '00010101' Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не указан период выгрузки.");
		ВыполнитьОбработкуОповещения(Оповещение, Ложь);
		Возврат;
	КонецЕсли;
	
	Каталог = Новый Файл(Объект.ИмяКаталогаВыгрузки);
	
	ДополнительныеПараметры = Новый Структура("Каталог, Оповещение", Каталог, Оповещение);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаСуществованияФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	Каталог.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры // ВыгрузкаИнформацииОВыбывшихЖильцах_ПроверитьНастройки()

#КонецОбласти

#Область ВыгрузкаНачислений

&НаКлиенте
// Процедура производит выгрузку начислений.
//
Процедура ВыгрузкаНачислений()
	
	ВыгрузкаНачислений_ПроверитьНастройки(Новый ОписаниеОповещения("ВыгрузкаНачисленийЗавершение", ЭтотОбъект));

КонецПроцедуры

&НаКлиенте
// Проверяет заполнение необходимых для выгрузки реквизитов.
//
// Возвращаемое значение:
//  Булево - признак достаточного заполнения настроек для формирования файла выгрузки.
//
Функция ВыгрузкаНачислений_ПодготовитьСтруктуруНастроек()
	
	СтруктураНастроек = Новый Структура("Период,ТолькоЛьготники,Здания,Организация,ДатаНачало,ДатаКонец,Водоотведение,Газ,ГорВода,Найм,Отопление,СодержаниеИРемонт,ХолВода,Электроэнергия,КапРемонт,СписокУслуг");
	
	СтруктураНастроек.Период          = Объект.Период;
	СтруктураНастроек.ТолькоЛьготники = ТолькоЛьготники;
	
	Здания = Новый Массив;
	Для Каждого Строка Из Объект.МурманскаяОбласть_Здания Цикл
		Здания.Добавить(Строка.Здание);
	КонецЦикла;
	
	СтруктураНастроек.Здания = Здания;
	
	СтруктураНастроек.Организация       = Объект.Организация;
	СтруктураНастроек.ДатаНачало        = НачалоМесяца(Объект.Период);
	СтруктураНастроек.ДатаКонец         = КонецМесяца(Объект.Период);
	
	УслугиСодержанияИРемонта     = Новый СписокЗначений;
	УслугиОтопления              = Новый СписокЗначений;
	УслугиХолодногоВодоснабжения = Новый СписокЗначений;
	УслугиГорячегоВодоснабжения  = Новый СписокЗначений;
	УслугиГаза                   = Новый СписокЗначений;
	УслугиЭлектроэнергии         = Новый СписокЗначений;
	УслугиВодоотведения          = Новый СписокЗначений;
	УслугиНайма                  = Новый СписокЗначений;
	УслугиКапРемонта             = Новый СписокЗначений;
	
	СписокУслуг = Новый СписокЗначений;
	
	Для каждого ТекСтрока Из Объект.МурманскаяОбласть_СоответствиеУслуг Цикл
		
		Если ТекСтрока.Идентификатор = "MAINTENANCE" Тогда
			УслугиСодержанияИРемонта.Добавить(ТекСтрока.УслугаВБазе);
		ИначеЕсли ТекСтрока.Идентификатор = "HEATING" Тогда
			УслугиОтопления.Добавить(ТекСтрока.УслугаВБазе);
		ИначеЕсли ТекСтрока.Идентификатор = "COLDWATER" Тогда
			УслугиХолодногоВодоснабжения.Добавить(ТекСтрока.УслугаВБазе);
		ИначеЕсли ТекСтрока.Идентификатор = "HOTWATER" Тогда
			УслугиГорячегоВодоснабжения.Добавить(ТекСтрока.УслугаВБазе);
		ИначеЕсли ТекСтрока.Идентификатор = "GAZ" Тогда
			УслугиГаза.Добавить(ТекСтрока.УслугаВБазе);
		ИначеЕсли ТекСтрока.Идентификатор = "ELECTRICITY" Тогда
			УслугиЭлектроэнергии.Добавить(ТекСтрока.УслугаВБазе);
		ИначеЕсли ТекСтрока.Идентификатор = "WATERDRAIN" Тогда
			УслугиВодоотведения.Добавить(ТекСтрока.УслугаВБазе);
		ИначеЕсли ТекСтрока.Идентификатор = "HIRING" Тогда
			УслугиНайма.Добавить(ТекСтрока.УслугаВБазе);
		ИначеЕсли ТекСтрока.Идентификатор = "RECONSTRUCTION" Тогда
			УслугиКапРемонта.Добавить(ТекСтрока.УслугаВБазе);
		КонецЕсли;
		
		СписокУслуг.Добавить(ТекСтрока.УслугаВБазе);
		
	КонецЦикла;
	
	СтруктураНастроек.СодержаниеИРемонт = УслугиСодержанияИРемонта;
	СтруктураНастроек.Отопление         = УслугиОтопления;
	СтруктураНастроек.ХолВода           = УслугиХолодногоВодоснабжения;
	СтруктураНастроек.ГорВода           = УслугиГорячегоВодоснабжения;
	СтруктураНастроек.Газ               = УслугиГаза;
	СтруктураНастроек.Электроэнергия    = УслугиЭлектроэнергии;
	СтруктураНастроек.Водоотведение     = УслугиВодоотведения;
	СтруктураНастроек.Найм              = УслугиНайма;
	СтруктураНастроек.КапРемонт         = УслугиКапРемонта;
	
	СтруктураНастроек.СписокУслуг = СписокУслуг;
	
	Возврат СтруктураНастроек;
	
КонецФункции // ВыгрузкаНачислений_ПодготовитьСтруктуруНастроек()

&НаСервереБезКонтекста
// Процедура производит выгрузку начислений.
//
Функция ВыгрузкаНачислений_НаСервере(СтруктураНастроек)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	Запрос.УстановитьПараметр("Организация",       СтруктураНастроек.Организация);
	Запрос.УстановитьПараметр("ДатаНачало",        СтруктураНастроек.ДатаНачало);
	Запрос.УстановитьПараметр("ДатаКонец",         СтруктураНастроек.ДатаКонец);
	Запрос.УстановитьПараметр("СодержаниеИРемонт", СтруктураНастроек.СодержаниеИРемонт);
	Запрос.УстановитьПараметр("Отопление",         СтруктураНастроек.Отопление);
	Запрос.УстановитьПараметр("ХолВода",           СтруктураНастроек.ХолВода);
	Запрос.УстановитьПараметр("ГорВода",           СтруктураНастроек.ГорВода);
	Запрос.УстановитьПараметр("Газ",               СтруктураНастроек.Газ);
	Запрос.УстановитьПараметр("Электроэнергия",    СтруктураНастроек.Электроэнергия);
	Запрос.УстановитьПараметр("Водоотведение",     СтруктураНастроек.Водоотведение);
	Запрос.УстановитьПараметр("Найм",              СтруктураНастроек.Найм);
	Запрос.УстановитьПараметр("КапРемонт",         СтруктураНастроек.КапРемонт);
	Запрос.УстановитьПараметр("СписокУслуг",       СтруктураНастроек.СписокУслуг);
	Запрос.УстановитьПараметр("Period",            Год(СтруктураНастроек.Период) * 12 + Месяц(СтруктураНастроек.Период) - 1);
	
	ОтборЗдания = "";
	Если СтруктураНастроек.Здания.Количество() > 0 Тогда
		
		Если СтруктураНастроек.ТолькоЛьготники Тогда
			ОтборЗдания = 
			"ГДЕ ТаблицаЛьготников.Проживающий.Владелец.Адрес.Владелец В (&СписокЗданий)";
		Иначе
			ОтборЗдания = 
			"И УПЖКХ_Жильцы.Владелец.Адрес.Владелец В (&СписокЗданий)";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("СписокЗданий", СтруктураНастроек.Здания);
		
	КонецЕсли;
	
	Если СтруктураНастроек.ТолькоЛьготники Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий КАК Проживающий,
		|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий.Владелец КАК ЛицевойСчет
		|ПОМЕСТИТЬ ТаблицаЛьготников
		|ИЗ
		|	РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(&ДатаНачало, ДатаИзменения <= &ДатаНачало) КАК КВП_НазначенныеЛьготыСрезПоследних
		|ГДЕ
		|	КВП_НазначенныеЛьготыСрезПоследних.Действие
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КВП_НазначенныеЛьготы.Проживающий,
		|	КВП_НазначенныеЛьготы.Проживающий.Владелец
		|ИЗ
		|	РегистрСведений.КВП_НазначенныеЛьготы КАК КВП_НазначенныеЛьготы
		|ГДЕ
		|	КВП_НазначенныеЛьготы.ДатаИзменения МЕЖДУ &ДатаНачало И &ДатаКонец
		|	И КВП_НазначенныеЛьготы.Действие
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаЛьготников.Проживающий,
		|	ТаблицаЛьготников.Проживающий.Владелец КАК ЛицевойСчет
		|ПОМЕСТИТЬ СписокЛьготников
		|ИЗ
		|	ТаблицаЛьготников КАК ТаблицаЛьготников
		|	" + ОтборЗдания;
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_Жильцы.Ссылка КАК Проживающий,
		|	УПЖКХ_Жильцы.Владелец КАК ЛицевойСчет
		|ПОМЕСТИТЬ СписокЛьготников
		|ИЗ
		|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
		|ГДЕ
		|	НЕ УПЖКХ_Жильцы.ПометкаУдаления
		|	" + ОтборЗдания;
		
	КонецЕсли;
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Код КАК Квартира,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Владелец КАК Здание,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект КАК Помещение
	|ПОМЕСТИТЬ втОбъекты
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&ДатаКонец,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					СписокЛьготников.ЛицевойСчет
	|				ИЗ
	|					СписокЛьготников КАК СписокЛьготников)) КАК КВП_ЛицевыеСчетаСрезПоследних
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втОбъекты.ЛицевойСчет КАК ЛицевойСчет,
	|	втОбъекты.Квартира,
	|	втОбъекты.Здание,
	|	втОбъекты.Помещение,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец,
	|	ВЫБОР
	|		КОГДА УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец ССЫЛКА Справочник.УПЖКХ_Жильцы
	|			ТОГДА УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец.ФизЛицо.ДатаРождения
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаРождения
	|ПОМЕСТИТЬ втЛСБезПаспорта
	|ИЗ
	|	втОбъекты КАК втОбъекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(
	|				&ДатаКонец,
	|				ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втОбъекты.ЛицевойСчет
	|					ИЗ
	|						втОбъекты КАК втОбъекты)) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
	|		ПО втОбъекты.ЛицевойСчет = УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель, 0) = 0
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель, 0) = 0
	|						ТОГДА КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель / КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДоляЛС,
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.Объект КАК Объект
	|ПОМЕСТИТЬ ДолиЛС
	|ИЗ
	|	РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(
	|			&ДатаКонец,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втЛСБезПаспорта.ЛицевойСчет
	|				ИЗ
	|					втЛСБезПаспорта КАК втЛСБезПаспорта)) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект,
	|	СУММА(ВЫБОР
	|			КОГДА КВП_ПлощадьПомещенияСрезПоследних.ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)
	|				ТОГДА КВП_ПлощадьПомещенияСрезПоследних.Площадь
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОбщаяПлощадь
	|ПОМЕСТИТЬ втПлощади1
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|			&ДатаКонец,
	|			Объект В
	|				(ВЫБРАТЬ
	|					втЛСБезПаспорта.Помещение
	|				ИЗ
	|					втЛСБезПаспорта КАК втЛСБезПаспорта)
	|			И ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)) КАК КВП_ПлощадьПомещенияСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДолиЛС.ЛицевойСчет,
	|	ДолиЛС.ДоляЛС * ЕСТЬNULL(втПлощади.ОбщаяПлощадь, 0) КАК ОбщаяПлощадь
	|ПОМЕСТИТЬ втПлощади
	|ИЗ
	|	ДолиЛС КАК ДолиЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПлощади1 КАК втПлощади
	|		ПО ДолиЛС.Объект = втПлощади.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛСБезПаспорта.ЛицевойСчет КАК ЛицевойСчет,
	|	втЛСБезПаспорта.Квартира,
	|	втЛСБезПаспорта.Здание,
	|	втЛСБезПаспорта.Помещение,
	|	втЛСБезПаспорта.ОтветственныйВладелец,
	|	втЛСБезПаспорта.ДатаРождения,
	|	ЕСТЬNULL(втПлощади.ОбщаяПлощадь, 0) КАК ЖилаяПлощадь
	|ПОМЕСТИТЬ втОбъектыБезНачисленийПоУслугам
	|ИЗ
	|	втЛСБезПаспорта КАК втЛСБезПаспорта
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПлощади КАК втПлощади
	|		ПО втЛСБезПаспорта.ЛицевойСчет = втПлощади.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга КАК Услуга,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Оплата,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НачислениеОбщ,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата))
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НачислениеИнд
	|ПОМЕСТИТЬ НачисленияОбщие
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНачало,
	|			&ДатаКонец,
	|			,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втОбъекты.ЛицевойСчет
	|					ИЗ
	|						втОбъекты КАК втОбъекты)
	|				И Услуга В (&СписокУслуг)
	|				И НЕ РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.КомиссияБанка))
	|				И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|				) КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОбъектыБезНачисленийПоУслугам.ЛицевойСчет КАК ЛицевойСчет,
	|	втОбъектыБезНачисленийПоУслугам.Квартира,
	|	втОбъектыБезНачисленийПоУслугам.Здание,
	|	втОбъектыБезНачисленийПоУслугам.Помещение,
	|	втОбъектыБезНачисленийПоУслугам.ОтветственныйВладелец,
	|	втОбъектыБезНачисленийПоУслугам.ДатаРождения,
	|	втОбъектыБезНачисленийПоУслугам.ЖилаяПлощадь,
	|	СУММА(ВЫБОР
	|			КОГДА НачисленияОбщие.Услуга В (&СодержаниеИРемонт)
	|				ТОГДА НачисленияОбщие.НачислениеИнд + НачисленияОбщие.НачислениеОбщ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаСодержаниеИРемонт,
	|	СУММА(ВЫБОР
	|			КОГДА НачисленияОбщие.Услуга В (&Отопление)
	|				ТОГДА НачисленияОбщие.НачислениеИнд
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаОтопление,
	|	СУММА(ВЫБОР
	|			КОГДА НачисленияОбщие.Услуга В (&Отопление)
	|				ТОГДА НачисленияОбщие.НачислениеОбщ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаОтоплениеОбщ,
	|	СУММА(ВЫБОР
	|			КОГДА НачисленияОбщие.Услуга В (&ХолВода)
	|				ТОГДА НачисленияОбщие.НачислениеИнд
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаХолВода,
	|	СУММА(ВЫБОР
	|			КОГДА НачисленияОбщие.Услуга В (&ХолВода)
	|				ТОГДА НачисленияОбщие.НачислениеОбщ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаХолВодаОбщ,
	|	СУММА(ВЫБОР
	|			КОГДА НачисленияОбщие.Услуга В (&ГорВода)
	|				ТОГДА НачисленияОбщие.НачислениеИнд
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаГорВода,
	|	СУММА(ВЫБОР
	|			КОГДА НачисленияОбщие.Услуга В (&ГорВода)
	|				ТОГДА НачисленияОбщие.НачислениеОбщ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаГорВодаОбщ,
	|	СУММА(ВЫБОР
	|			КОГДА НачисленияОбщие.Услуга В (&Газ)
	|				ТОГДА НачисленияОбщие.НачислениеИнд + НачисленияОбщие.НачислениеОбщ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаГаз,
	|	СУММА(ВЫБОР
	|			КОГДА НачисленияОбщие.Услуга В (&Электроэнергия)
	|				ТОГДА НачисленияОбщие.НачислениеИнд
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаЭлектроэнергия,
	|	СУММА(ВЫБОР
	|			КОГДА НачисленияОбщие.Услуга В (&Электроэнергия)
	|				ТОГДА НачисленияОбщие.НачислениеОбщ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаЭлектроэнергияОбщ,
	|	СУММА(ВЫБОР
	|			КОГДА НачисленияОбщие.Услуга В (&Водоотведение)
	|				ТОГДА НачисленияОбщие.НачислениеИнд
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВодоотведение,
	|	СУММА(ВЫБОР
	|			КОГДА НачисленияОбщие.Услуга В (&Водоотведение)
	|				ТОГДА НачисленияОбщие.НачислениеОбщ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаВодоотведениеОбщ,
	|	СУММА(ВЫБОР
	|			КОГДА НачисленияОбщие.Услуга В (&Найм)
	|				ТОГДА НачисленияОбщие.НачислениеИнд + НачисленияОбщие.НачислениеОбщ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНайм,
	|	СУММА(ВЫБОР
	|			КОГДА НачисленияОбщие.Услуга В (&КапРемонт)
	|				ТОГДА НачисленияОбщие.НачислениеИнд + НачисленияОбщие.НачислениеОбщ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаКапРемонт,
	|	СУММА(-ЕСТЬNULL(НачисленияОбщие.Оплата, 0)) КАК ОбщаяОплата
	|ПОМЕСТИТЬ втДанныеБезДолга
	|ИЗ
	|	втОбъектыБезНачисленийПоУслугам КАК втОбъектыБезНачисленийПоУслугам
	|		ЛЕВОЕ СОЕДИНЕНИЕ НачисленияОбщие КАК НачисленияОбщие
	|		ПО втОбъектыБезНачисленийПоУслугам.ЛицевойСчет = НачисленияОбщие.ЛицевойСчет
	|
	|СГРУППИРОВАТЬ ПО
	|	втОбъектыБезНачисленийПоУслугам.ЛицевойСчет,
	|	втОбъектыБезНачисленийПоУслугам.Квартира,
	|	втОбъектыБезНачисленийПоУслугам.Здание,
	|	втОбъектыБезНачисленийПоУслугам.Помещение,
	|	втОбъектыБезНачисленийПоУслугам.ОтветственныйВладелец,
	|	втОбъектыБезНачисленийПоУслугам.ДатаРождения,
	|	втОбъектыБезНачисленийПоУслугам.ЖилаяПлощадь
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втДанныеБезДолга.ЛицевойСчет КАК ЛицевойСчет,
	|	втДанныеБезДолга.Квартира,
	|	втДанныеБезДолга.Здание,
	|	втДанныеБезДолга.Помещение,
	|	втДанныеБезДолга.ОтветственныйВладелец КАК Объект,
	|	втДанныеБезДолга.ДатаРождения,
	|	втДанныеБезДолга.ЖилаяПлощадь,
	|	втДанныеБезДолга.СуммаСодержаниеИРемонт,
	|	втДанныеБезДолга.СуммаОтопление,
	|	втДанныеБезДолга.СуммаОтоплениеОбщ,
	|	втДанныеБезДолга.СуммаХолВода,
	|	втДанныеБезДолга.СуммаХолВодаОбщ,
	|	втДанныеБезДолга.СуммаГорВода,
	|	втДанныеБезДолга.СуммаГорВодаОбщ,
	|	втДанныеБезДолга.СуммаГаз,
	|	втДанныеБезДолга.СуммаЭлектроэнергия,
	|	втДанныеБезДолга.СуммаЭлектроэнергияОбщ,
	|	втДанныеБезДолга.СуммаВодоотведение,
	|	втДанныеБезДолга.СуммаВодоотведениеОбщ,
	|	втДанныеБезДолга.СуммаНайм,
	|	втДанныеБезДолга.СуммаКапРемонт,
	|	втДанныеБезДолга.ОбщаяОплата,
	|	ЕСТЬNULL(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток, 0) КАК ОбщийДолг
	|ПОМЕСТИТЬ втИтоговая
	|ИЗ
	|	втДанныеБезДолга КАК втДанныеБезДолга
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|				&ДатаНачало,
	|				Организация = &Организация
	|					И ЛицевойСчет В
	|						(ВЫБРАТЬ
	|							втОбъектыБезНачисленийПоУслугам.ЛицевойСчет
	|						ИЗ
	|							втОбъектыБезНачисленийПоУслугам КАК втОбъектыБезНачисленийПоУслугам)
	|					И Услуга В (&СписокУслуг)
	|					И НЕ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|		ПО втДанныеБезДолга.ЛицевойСчет = КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет";
	Запрос.Выполнить();
		
	ЗапросПоЗданиям = Новый Запрос;
	ЗапросПоЗданиям.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросПоЗданиям.Текст = 
	"ВЫБРАТЬ
	|	втИтоговая.Здание КАК Объект
	|ИЗ
	|	втИтоговая КАК втИтоговая
	|
	|СГРУППИРОВАТЬ ПО
	|	втИтоговая.Здание";
	
	МассивОбъектов = ЗапросПоЗданиям.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	втИтоговая.Здание,
	|	втИтоговая.Помещение,
	|	втИтоговая.Объект,
	|	втИтоговая.ЛицевойСчет,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Город, """") КАК City,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Улица, """") КАК Street,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Дом, """") КАК Number,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Корпус, """") КАК Suffix,
	|	втИтоговая.Квартира КАК Flat,
	|	"""" КАК Room,
	|	втИтоговая.ДатаРождения КАК DR,
	|	втИтоговая.ЛицевойСчет.Наименование КАК LS,
	|	втИтоговая.ЖилаяПлощадь КАК SG,
	|	втИтоговая.ОбщийДолг КАК Debt,
	|	втИтоговая.ОбщаяОплата КАК Opl,
	|	втИтоговая.СуммаСодержаниеИРемонт КАК Maintenance,
	|	втИтоговая.СуммаОтопление КАК Heating,
	|	втИтоговая.СуммаОтоплениеОбщ КАК HeatОdn,
	|	втИтоговая.СуммаХолВода КАК ColdWater,
	|	втИтоговая.СуммаХолВодаОбщ КАК ColdOdn,
	|	втИтоговая.СуммаГорВода КАК HotWater,
	|	втИтоговая.СуммаГорВодаОбщ КАК HotOdn,
	|	втИтоговая.СуммаГаз КАК Gaz,
	|	втИтоговая.СуммаЭлектроэнергия КАК Electricity,
	|	втИтоговая.СуммаЭлектроэнергияОбщ КАК ElectrOdn,
	|	втИтоговая.СуммаВодоотведение КАК WaterDrain,
	|	втИтоговая.СуммаВодоотведениеОбщ КАК WaterOdn,
	|	втИтоговая.СуммаНайм КАК Hiring,
	|	втИтоговая.СуммаКапРемонт КАК Reconstruction
	|ПОМЕСТИТЬ втАдрес
	|ИЗ
	|	втИтоговая КАК втИтоговая
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК втКонтактнаяИнформация
	|		ПО втИтоговая.Здание = втКонтактнаяИнформация.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втАдрес.Здание КАК Здание,
	|	втАдрес.City,
	|	втАдрес.Street,
	|	ВЫБОР
	|		КОГДА втАдрес.Suffix = """"
	|			ТОГДА втАдрес.Number
	|		ИНАЧЕ втАдрес.Number + ""/"" + втАдрес.Suffix
	|	КОНЕЦ КАК Number,
	|	втАдрес.Flat КАК Flat,
	|	втАдрес.Room,
	|	ЕСТЬNULL(ФИОФизическихЛицСрезПоследних.Фамилия, ПРЕДСТАВЛЕНИЕ(втАдрес.Объект)) КАК F,
	|	ЕСТЬNULL(ФИОФизическихЛицСрезПоследних.Имя, """") КАК I,
	|	ЕСТЬNULL(ФИОФизическихЛицСрезПоследних.Отчество, """") КАК O,
	|	втАдрес.DR,
	|	втАдрес.LS,
	|	втАдрес.SG,
	|	втАдрес.Debt,
	|	втАдрес.Opl,
	|	втАдрес.Maintenance,
	|	втАдрес.Maintenance КАК Maintenanc,
	|	втАдрес.Heating,
	|	втАдрес.HeatОdn,
	|	втАдрес.ColdWater,
	|	втАдрес.ColdOdn,
	|	втАдрес.HotWater,
	|	втАдрес.HotOdn,
	|	втАдрес.Gaz,
	|	втАдрес.Electricity,
	|	втАдрес.ElectrOdn,
	|	втАдрес.Electricity КАК Electricit,
	|	втАдрес.WaterDrain,
	|	втАдрес.WaterOdn,
	|	втАдрес.Hiring,
	|	втАдрес.Reconstruction,
	|	втАдрес.Reconstruction КАК Reconstruc,
	|	&ДатаНачало КАК Date
	|ИЗ
	|	втАдрес КАК втАдрес
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ДатаКонец, ) КАК ФИОФизическихЛицСрезПоследних
	|		ПО (ВЫБОР
	|				КОГДА втАдрес.Объект ССЫЛКА Справочник.УПЖКХ_Жильцы
	|					ТОГДА втАдрес.Объект.ФизЛицо = ФИОФизическихЛицСрезПоследних.ФизическоеЛицо
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Здание,
	|	Flat";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	МассивСтруктур = Новый Массив;
	
	Для Каждого Строка Из Результат Цикл
		
		_ОбработатьАдрес(Строка);
		
		Структура = Новый Структура("City,Street,Number,Flat,Room,F,I,O,DR,LS,SG,Debt,Opl,Maintenance,Maintenanc,Heating,HeatOdn,ColdWater,ColdOdn,HotWater,HotOdn,Gaz,Electricity,Electricit,ElectrOdn,WaterDrain,WaterOdn,Hiring,Reconstruction,Reconstruc,Date");
		ЗаполнитьЗначенияСвойств(Структура, Строка);
		
		МассивСтруктур.Добавить(Структура);
		
	КонецЦикла;
	
	Возврат МассивСтруктур;
	
КонецФункции // ВыгрузкаНачислений_НаСервере()

&НаКлиенте
Процедура ВыгрузкаНачисленийЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	#Если Не ВебКлиент Тогда
	
	Если Результат Тогда
		
		СтруктураНастроек = ВыгрузкаНачислений_ПодготовитьСтруктуруНастроек();
		
		МассивСтруктур = ВыгрузкаНачислений_НаСервере(СтруктураНастроек);
		
		Если МассивСтруктур.Количество() = 0 Тогда
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не обнаружены сведения для выгрузки данных по начислениям.");
			
		Иначе
			
			ФайлДБФ = Новый XBase;
			ФайлДБФ.Кодировка = КодировкаXBase.OEM;
			
			ФайлДБФ.Поля.Добавить("City",           "S", 20);
			ФайлДБФ.Поля.Добавить("Street",         "S", 30);
			ФайлДБФ.Поля.Добавить("Number",         "S", 7);
			ФайлДБФ.Поля.Добавить("Flat",           "S", 7);
			ФайлДБФ.Поля.Добавить("Room",           "S", 4);
			ФайлДБФ.Поля.Добавить("F",              "S", 25);
			ФайлДБФ.Поля.Добавить("I",              "S", 25);
			ФайлДБФ.Поля.Добавить("O",              "S", 25);
			ФайлДБФ.Поля.Добавить("DR",             "D");
			ФайлДБФ.Поля.Добавить("LS",             "S", 15);
			ФайлДБФ.Поля.Добавить("SG",             "N", 6, 2);
			ФайлДБФ.Поля.Добавить("Debt",           "N", 9, 2);
			ФайлДБФ.Поля.Добавить("Opl",            "N", 9, 2);
			ФайлДБФ.Поля.Добавить("Maintenance",    "N", 9, 2);
			ФайлДБФ.Поля.Добавить("Heating",        "N", 9, 2);
			ФайлДБФ.Поля.Добавить("HeatOdn",        "N", 9, 2);
			ФайлДБФ.Поля.Добавить("ColdWater",      "N", 9, 2);
			ФайлДБФ.Поля.Добавить("ColdOdn",        "N", 9, 2);
			ФайлДБФ.Поля.Добавить("HotWater",       "N", 9, 2);
			ФайлДБФ.Поля.Добавить("HotOdn",         "N", 9, 2);
			ФайлДБФ.Поля.Добавить("Gaz",            "N", 9, 2);
			ФайлДБФ.Поля.Добавить("Electricity",    "N", 9, 2);
			ФайлДБФ.Поля.Добавить("ElectrOdn",      "N", 9, 2);
			ФайлДБФ.Поля.Добавить("WaterDrain",     "N", 9, 2);
			ФайлДБФ.Поля.Добавить("WaterOdn",       "N", 9, 2);
			ФайлДБФ.Поля.Добавить("Reconstruction", "N", 9, 2);
			ФайлДБФ.Поля.Добавить("Hiring",         "N", 9, 2);
			ФайлДБФ.Поля.Добавить("Date",           "D");
			
			Каталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Объект.ИмяКаталогаВыгрузки);
			ФайлДБФ.СоздатьФайл(Каталог + "Nach.dbf");
			
			ФайлДБФ.АвтоСохранение = Истина;
			
			Для Каждого Структура Из МассивСтруктур Цикл
				
				ФайлДБФ.Добавить();
				
				ЗаполнитьЗначенияСвойств(ФайлДБФ, Структура);
				
				ФайлДБФ.LS = СтрЗаменить(ФайлДБФ.LS, "л/с №", "");
				
				ФайлДБФ.Записать();
				
			КонецЦикла;
			
			ФайлДБФ.ЗакрытьФайл();
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Выгрузка сведений о начислениях успешно завершена.");
			
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецЕсли

КонецПроцедуры // ВыгрузкаНачислений()

&НаКлиенте
// Проверяет заполнение необходимых для выгрузки реквизитов.
//
// Возвращаемое значение:
//  Булево - признак достаточного заполнения настроек для формирования файла выгрузки.
//
Процедура ВыгрузкаНачислений_ПроверитьНастройки(Знач Оповещение)
	
	Если Объект.Период = '00010101' Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не указан период выгрузки.");
		ВыполнитьОбработкуОповещения(Оповещение, Ложь);
		Возврат;
	КонецЕсли;
	
	Если Объект.Организация.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбрана организация.");
		ВыполнитьОбработкуОповещения(Оповещение, Ложь);
		Возврат;
	КонецЕсли;
	
	Каталог = Новый Файл(Объект.ИмяКаталогаВыгрузки);
	
	ДополнительныеПараметры = Новый Структура("Каталог, Оповещение", Каталог, Оповещение);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаСуществованияФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	Каталог.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаТарифов

&НаКлиенте
// Процедура производит выгрузку начислений.
//
Процедура ВыгрузкаТарифов()
	
	ВыгрузкаТарифов_ПроверитьНастройки(Новый ОписаниеОповещения("ВыгрузкаТарифовЗавершение", ЭтотОбъект));

КонецПроцедуры

&НаКлиенте
// Проверяет заполнение необходимых для выгрузки реквизитов.
//
// Возвращаемое значение:
//  Булево - признак достаточного заполнения настроек для формирования файла выгрузки.
//
Функция ВыгрузкаТарифов_ПодготовитьСтруктуруНастроек()
	
	СтруктураНастроек = Новый Структура("ДатаВыгрузки,ТолькоЛьготники,Здания,Организация,Водоотведение,Газ,ГорВода,Найм,Отопление,СодержаниеИРемонт,ХолВода,Электроэнергия,КапРемонт,СписокУслуг");
	
	СтруктураНастроек.ДатаВыгрузки    = КонецДня(ДатаВыгрузки);
	СтруктураНастроек.ТолькоЛьготники = ТолькоЛьготники;
	
	Здания = Новый Массив;
	Для Каждого Строка Из Объект.МурманскаяОбласть_Здания Цикл
		Здания.Добавить(Строка.Здание);
	КонецЦикла;
	
	СтруктураНастроек.Здания = Здания;
	
	СтруктураНастроек.Организация       = Объект.Организация;
	
	УслугиСодержанияИРемонта     = Новый СписокЗначений;
	УслугиОтопления              = Новый СписокЗначений;
	УслугиХолодногоВодоснабжения = Новый СписокЗначений;
	УслугиГорячегоВодоснабжения  = Новый СписокЗначений;
	УслугиГаза                   = Новый СписокЗначений;
	УслугиЭлектроэнергии         = Новый СписокЗначений;
	УслугиВодоотведения          = Новый СписокЗначений;
	УслугиНайма                  = Новый СписокЗначений;
	УслугиКапРемонта             = Новый СписокЗначений;
	
	СписокУслуг = Новый СписокЗначений;
	
	Для каждого ТекСтрока Из Объект.МурманскаяОбласть_СоответствиеУслуг Цикл
		
		Если ТекСтрока.Идентификатор = "MAINTENANC" Тогда
			УслугиСодержанияИРемонта.Добавить(ТекСтрока.УслугаВБазе);
		ИначеЕсли ТекСтрока.Идентификатор = "HEATING" Тогда
			УслугиОтопления.Добавить(ТекСтрока.УслугаВБазе);
		ИначеЕсли ТекСтрока.Идентификатор = "COLDWATER" Тогда
			УслугиХолодногоВодоснабжения.Добавить(ТекСтрока.УслугаВБазе);
		ИначеЕсли ТекСтрока.Идентификатор = "HOTWATER" Тогда
			УслугиГорячегоВодоснабжения.Добавить(ТекСтрока.УслугаВБазе);
		ИначеЕсли ТекСтрока.Идентификатор = "GAZ" Тогда
			УслугиГаза.Добавить(ТекСтрока.УслугаВБазе);
		ИначеЕсли ТекСтрока.Идентификатор = "ELECTRICIT" Тогда
			УслугиЭлектроэнергии.Добавить(ТекСтрока.УслугаВБазе);
		ИначеЕсли ТекСтрока.Идентификатор = "WATERDRAIN" Тогда
			УслугиВодоотведения.Добавить(ТекСтрока.УслугаВБазе);
		ИначеЕсли ТекСтрока.Идентификатор = "HIRING" Тогда
			УслугиНайма.Добавить(ТекСтрока.УслугаВБазе);
		ИначеЕсли ТекСтрока.Идентификатор = "RECONSTRUCTION" Тогда
			УслугиКапРемонта.Добавить(ТекСтрока.УслугаВБазе);
		КонецЕсли;
		
		СписокУслуг.Добавить(ТекСтрока.УслугаВБазе);
		
	КонецЦикла;
	
	СтруктураНастроек.СодержаниеИРемонт = УслугиСодержанияИРемонта;
	СтруктураНастроек.Отопление         = УслугиОтопления;
	СтруктураНастроек.ХолВода           = УслугиХолодногоВодоснабжения;
	СтруктураНастроек.ГорВода           = УслугиГорячегоВодоснабжения;
	СтруктураНастроек.Газ               = УслугиГаза;
	СтруктураНастроек.Электроэнергия    = УслугиЭлектроэнергии;
	СтруктураНастроек.Водоотведение     = УслугиВодоотведения;
	СтруктураНастроек.Найм              = УслугиНайма;
	СтруктураНастроек.КапРемонт         = УслугиКапРемонта;
	
	СтруктураНастроек.СписокУслуг = СписокУслуг;
	
	Возврат СтруктураНастроек;
	
КонецФункции // ВыгрузкаТарифов_ПодготовитьСтруктуруНастроек()

&НаСервереБезКонтекста
// Процедура производит выгрузку начислений.
//
Функция ВыгрузкаТарифов_НаСервере(СтруктураНастроек)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	Запрос.УстановитьПараметр("Организация",       СтруктураНастроек.Организация);
	Запрос.УстановитьПараметр("ДатаВыгрузки",      СтруктураНастроек.ДатаВыгрузки);
	Запрос.УстановитьПараметр("СодержаниеИРемонт", СтруктураНастроек.СодержаниеИРемонт);
	Запрос.УстановитьПараметр("Отопление",         СтруктураНастроек.Отопление);
	Запрос.УстановитьПараметр("ХолВода",           СтруктураНастроек.ХолВода);
	Запрос.УстановитьПараметр("ГорВода",           СтруктураНастроек.ГорВода);
	Запрос.УстановитьПараметр("Газ",               СтруктураНастроек.Газ);
	Запрос.УстановитьПараметр("Электроэнергия",    СтруктураНастроек.Электроэнергия);
	Запрос.УстановитьПараметр("Водоотведение",     СтруктураНастроек.Водоотведение);
	Запрос.УстановитьПараметр("Найм",              СтруктураНастроек.Найм);
	Запрос.УстановитьПараметр("КапРемонт",         СтруктураНастроек.КапРемонт);
	Запрос.УстановитьПараметр("СписокУслуг",       СтруктураНастроек.СписокУслуг);
	
	ОтборЗдания = "";
	Если СтруктураНастроек.Здания.Количество() > 0 Тогда
		
		Если СтруктураНастроек.ТолькоЛьготники Тогда
			ОтборЗдания = 
			"ГДЕ СписокЛьготников.ЛицевойСчет.Адрес.Владелец В (&СписокЗданий)";
		Иначе
			ОтборЗдания = 
			"И УПЖКХ_Жильцы.Владелец.Адрес.Владелец В (&СписокЗданий)";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("СписокЗданий", СтруктураНастроек.Здания);
		
	КонецЕсли;
	
	Если СтруктураНастроек.ТолькоЛьготники Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий КАК Проживающий,
		|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий.Владелец КАК ЛицевойСчет
		|ПОМЕСТИТЬ СписокЛьготников
		|ИЗ
		|	РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(&ДатаНачало, ДатаИзменения <= &ДатаНачало) КАК КВП_НазначенныеЛьготыСрезПоследних
		|ГДЕ
		|	КВП_НазначенныеЛьготыСрезПоследних.Действие
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КВП_НазначенныеЛьготы.Проживающий,
		|	КВП_НазначенныеЛьготы.Проживающий.Владелец
		|ИЗ
		|	РегистрСведений.КВП_НазначенныеЛьготы КАК КВП_НазначенныеЛьготы
		|ГДЕ
		|	КВП_НазначенныеЛьготы.ДатаИзменения МЕЖДУ &ДатаНачало И &ДатаКонец
		|	И КВП_НазначенныеЛьготы.Действие
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СписокЛьготников.Проживающий,
		|	СписокЛьготников.ЛицевойСчет КАК ЛицевойСчет
		|ПОМЕСТИТЬ ТаблицаЛьготников
		|ИЗ
		|	СписокЛьготников КАК СписокЛьготников
		|	" + ОтборЗдания;
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_Жильцы.Ссылка КАК Проживающий,
		|	УПЖКХ_Жильцы.Владелец КАК ЛицевойСчет
		|ПОМЕСТИТЬ ТаблицаЛьготников
		|ИЗ
		|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
		|ГДЕ
		|	НЕ УПЖКХ_Жильцы.ПометкаУдаления
		|	" + ОтборЗдания;
		
	КонецЕсли;
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КВП_НазначенныеНачисленияСрезПоследних.Объект КАК ОбъектНазначения,
	|	КВП_НазначенныеНачисленияСрезПоследних.Услуга
	|ПОМЕСТИТЬ втНазначенныеОбъекты
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления.СрезПоследних(
	|			&ДатаВыгрузки,
	|			Организация = &Организация
	|				И Услуга В (&СписокУслуг)
	|				И Объект В
	|					(ВЫБРАТЬ
	|						ТаблицаЛьготников.ЛицевойСчет
	|					ИЗ
	|						ТаблицаЛьготников КАК ТаблицаЛьготников)) КАК КВП_НазначенныеНачисленияСрезПоследних
	|ГДЕ
	|	КВП_НазначенныеНачисленияСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Код КАК Квартира,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект КАК Помещение,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Владелец КАК Здание,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет,
	|	втНазначенныеОбъекты.Услуга
	|ПОМЕСТИТЬ втОбъекты
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&ДатаВыгрузки,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					ТаблицаЛьготников.ЛицевойСчет
	|				ИЗ
	|					ТаблицаЛьготников КАК ТаблицаЛьготников)) КАК КВП_ЛицевыеСчетаСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНазначенныеОбъекты КАК втНазначенныеОбъекты
	|		ПО КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет = втНазначенныеОбъекты.ОбъектНазначения
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ТарифыСрезПоследних.Объект КАК Помещение,
	|	КВП_ТарифыСрезПоследних.Услуга КАК Услуга,
	|	КВП_ТарифыСрезПоследних.Тариф КАК Тариф
	|ПОМЕСТИТЬ ТарифыНаПомещения
	|ИЗ
	|	РегистрСведений.КВП_Тарифы.СрезПоследних(
	|			&ДатаВыгрузки,
	|			(Услуга, Объект) В
	|					(ВЫБРАТЬ
	|						втОбъекты.Услуга,
	|						втОбъекты.Помещение
	|					ИЗ
	|						втОбъекты КАК втОбъекты)
	|				И ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Общий)
	|				И Организация = &Организация) КАК КВП_ТарифыСрезПоследних
	|ГДЕ
	|	КВП_ТарифыСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ТарифыСрезПоследних.Объект КАК Здание,
	|	КВП_ТарифыСрезПоследних.Услуга КАК Услуга,
	|	КВП_ТарифыСрезПоследних.Тариф КАК Тариф
	|ПОМЕСТИТЬ ТарифыНаЗдания
	|ИЗ
	|	РегистрСведений.КВП_Тарифы.СрезПоследних(
	|			&ДатаВыгрузки,
	|			(Услуга, Объект) В
	|					(ВЫБРАТЬ
	|						втОбъекты.Услуга,
	|						втОбъекты.Здание
	|					ИЗ
	|						втОбъекты КАК втОбъекты)
	|				И ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Общий)
	|				И Организация = &Организация) КАК КВП_ТарифыСрезПоследних
	|ГДЕ
	|	КВП_ТарифыСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ТарифыСрезПоследних.Объект КАК Объект,
	|	КВП_ТарифыСрезПоследних.Услуга КАК Услуга,
	|	КВП_ТарифыСрезПоследних.Тариф КАК Тариф
	|ПОМЕСТИТЬ ОбщиеТарифы
	|ИЗ
	|	РегистрСведений.КВП_Тарифы.СрезПоследних(
	|			&ДатаВыгрузки,
	|			Услуга В (&СписокУслуг)
	|				И ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Общий)
	|				И Организация = &Организация) КАК КВП_ТарифыСрезПоследних
	|ГДЕ
	|	КВП_ТарифыСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОбъекты.Квартира,
	|	втОбъекты.Помещение,
	|	втОбъекты.Здание,
	|	втОбъекты.ЛицевойСчет,
	|	втОбъекты.Услуга,
	|	ВЫБОР
	|		КОГДА НЕ ТарифыНаПомещения.Тариф ЕСТЬ NULL
	|			ТОГДА ТарифыНаПомещения.Тариф
	|		КОГДА НЕ ТарифыНаЗдания.Тариф ЕСТЬ NULL
	|			ТОГДА ТарифыНаЗдания.Тариф
	|		ИНАЧЕ ЕСТЬNULL(ОбщиеТарифы.Тариф, 0)
	|	КОНЕЦ КАК Тариф,
	|	ВЫБОР
	|		КОГДА НЕ ТарифыНаПомещения.Тариф ЕСТЬ NULL
	|				И (ТарифыНаПомещения.Тариф ССЫЛКА Справочник.КВП_РассчитываемыеТарифы
	|					ИЛИ ТарифыНаПомещения.Тариф = 0)
	|			ТОГДА ИСТИНА
	|		КОГДА НЕ ТарифыНаЗдания.Тариф ЕСТЬ NULL
	|				И (ТарифыНаЗдания.Тариф ССЫЛКА Справочник.КВП_РассчитываемыеТарифы
	|					ИЛИ ТарифыНаЗдания.Тариф = 0)
	|			ТОГДА ИСТИНА
	|		КОГДА НЕ ОбщиеТарифы.Тариф ЕСТЬ NULL
	|				И (ОбщиеТарифы.Тариф ССЫЛКА Справочник.КВП_РассчитываемыеТарифы
	|					ИЛИ ОбщиеТарифы.Тариф = 0)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РассчитываемыйИлиНулевойТариф,
	|	ВЫБОР
	|		КОГДА НЕ ТарифыНаПомещения.Тариф ЕСТЬ NULL
	|			ТОГДА втОбъекты.Помещение
	|		КОГДА НЕ ТарифыНаЗдания.Тариф ЕСТЬ NULL
	|			ТОГДА втОбъекты.Здание
	|		ИНАЧЕ втОбъекты.ЛицевойСчет
	|	КОНЕЦ КАК Объект
	|ПОМЕСТИТЬ втВсеТарифы
	|ИЗ
	|	втОбъекты КАК втОбъекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТарифыНаПомещения КАК ТарифыНаПомещения
	|		ПО втОбъекты.Помещение = ТарифыНаПомещения.Помещение
	|			И втОбъекты.Услуга = ТарифыНаПомещения.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТарифыНаЗдания КАК ТарифыНаЗдания
	|		ПО втОбъекты.Здание = ТарифыНаЗдания.Здание
	|			И втОбъекты.Услуга = ТарифыНаЗдания.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОбщиеТарифы КАК ОбщиеТарифы
	|		ПО втОбъекты.Услуга = ОбщиеТарифы.Услуга";
	Запрос.Выполнить();
	
	ВыгрузкаТарифов_ПолучитьРассчитываемыйИлиНулевойТариф(Запрос.МенеджерВременныхТаблиц, СтруктураНастроек);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	втВсеТарифы.Квартира,
	|	втВсеТарифы.Помещение,
	|	втВсеТарифы.Здание,
	|	втВсеТарифы.ЛицевойСчет,
	|	втВсеТарифы.Услуга,
	|	втВсеТарифы.Тариф
	|ПОМЕСТИТЬ втОбщаяТаблица
	|ИЗ
	|	втВсеТарифы КАК втВсеТарифы
	|ГДЕ
	|	НЕ втВсеТарифы.РассчитываемыйИлиНулевойТариф
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втРассчитываемыеИлиНулевыеТарифы.Квартира,
	|	втРассчитываемыеИлиНулевыеТарифы.Помещение,
	|	втРассчитываемыеИлиНулевыеТарифы.Здание,
	|	втРассчитываемыеИлиНулевыеТарифы.ЛицевойСчет,
	|	втРассчитываемыеИлиНулевыеТарифы.Услуга,
	|	втРассчитываемыеИлиНулевыеТарифы.Тариф
	|ИЗ
	|	втРассчитываемыеИлиНулевыеТарифы КАК втРассчитываемыеИлиНулевыеТарифы";
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	втОбщаяТаблица.Квартира,
	|	втОбщаяТаблица.Помещение,
	|	втОбщаяТаблица.Здание,
	|	втОбщаяТаблица.ЛицевойСчет,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втОбщаяТаблица.Услуга В (&СодержаниеИРемонт)
	|				ТОГДА втОбщаяТаблица.Тариф
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ТарифСодержаниеИРемонт,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втОбщаяТаблица.Услуга В (&Отопление)
	|				ТОГДА втОбщаяТаблица.Тариф
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ТарифОтопление,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втОбщаяТаблица.Услуга В (&ХолВода)
	|				ТОГДА втОбщаяТаблица.Тариф
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ТарифХолВода,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втОбщаяТаблица.Услуга В (&ГорВода)
	|				ТОГДА втОбщаяТаблица.Тариф
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ТарифГорВода,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втОбщаяТаблица.Услуга В (&Газ)
	|				ТОГДА втОбщаяТаблица.Тариф
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ТарифГаз,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втОбщаяТаблица.Услуга В (&Электроэнергия)
	|				ТОГДА втОбщаяТаблица.Тариф
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ТарифЭлектроэнергия,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втОбщаяТаблица.Услуга В (&Водоотведение)
	|				ТОГДА втОбщаяТаблица.Тариф
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ТарифВодоотведение,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втОбщаяТаблица.Услуга В (&Найм)
	|				ТОГДА втОбщаяТаблица.Тариф
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ТарифНайм,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втОбщаяТаблица.Услуга В (&КапРемонт)
	|				ТОГДА втОбщаяТаблица.Тариф
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ТарифКапРемонт
	|ПОМЕСТИТЬ втИтоговая
	|ИЗ
	|	втОбщаяТаблица КАК втОбщаяТаблица
	|
	|СГРУППИРОВАТЬ ПО
	|	втОбщаяТаблица.Квартира,
	|	втОбщаяТаблица.Помещение,
	|	втОбщаяТаблица.Здание,
	|	втОбщаяТаблица.ЛицевойСчет";
	Запрос.Выполнить();
	
	ЗапросПоЗданиям = Новый Запрос;
	ЗапросПоЗданиям.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросПоЗданиям.Текст = 
	"ВЫБРАТЬ
	|	втИтоговая.Здание КАК Объект
	|ИЗ
	|	втИтоговая КАК втИтоговая
	|
	|СГРУППИРОВАТЬ ПО
	|	втИтоговая.Здание";
	
	МассивОбъектов = ЗапросПоЗданиям.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	втИтоговая.Здание,
	|	втИтоговая.Помещение,
	|	втИтоговая.ЛицевойСчет,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Город, """") КАК City,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Улица, """") КАК Street,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Дом, """") КАК Number,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Корпус, """") КАК Suffix,
	|	втИтоговая.Квартира КАК Flat,
	|	"""" КАК Room,
	|	втИтоговая.ТарифСодержаниеИРемонт КАК Maintenance,
	|	втИтоговая.ТарифОтопление КАК Heating,
	|	втИтоговая.ТарифХолВода КАК ColdWater,
	|	втИтоговая.ТарифГорВода КАК HotWater,
	|	втИтоговая.ТарифГаз КАК Gaz,
	|	втИтоговая.ТарифЭлектроэнергия КАК Electricity,
	|	втИтоговая.ТарифВодоотведение КАК WaterDrain,
	|	втИтоговая.ТарифНайм КАК Hiring,
	|	втИтоговая.ТарифКапРемонт КАК Reconstruction,
	|	&ДатаВыгрузки КАК Date
	|ИЗ
	|	втИтоговая КАК втИтоговая
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК втКонтактнаяИнформация
	|		ПО втИтоговая.Здание = втКонтактнаяИнформация.Объект
	|
	|УПОРЯДОЧИТЬ ПО
	|	Здание,
	|	Flat";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	МассивСтруктур = Новый Массив;
	
	Для Каждого Строка Из Результат Цикл
		
		_ОбработатьАдрес(Строка);
		
		Структура = Новый Структура("City,Street,Number,Suffix,Flat,Room,Maintenance,Maintenanc,Heating,ColdWater,HotWater,Gaz,Electricity,Electricit,WaterDrain,Hiring,Reconstruction,Date");
		ЗаполнитьЗначенияСвойств(Структура, Строка);
		
		МассивСтруктур.Добавить(Структура);
		
	КонецЦикла;
	
	Возврат МассивСтруктур;
	
КонецФункции // ВыгрузкаПаспортныхДанных_НаСервере()

&НаСервереБезКонтекста
// Процедура производит выгрузку начислений.
//
Процедура ВыгрузкаТарифов_ПолучитьРассчитываемыйИлиНулевойТариф(МенеджерВременныхТаблиц, СтруктураНастроек)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	втВсеТарифы КАК втВсеТарифы
	|
	|ГДЕ
	|	втВсеТарифы.РассчитываемыйИлиНулевойТариф";
	Запрос.Выполнить();
	
	ТаблицаРассчитываемыхИлиНулевыхТарифов = Запрос.Выполнить().Выгрузить();
	
	// Обрабатываем таблицу сложных норм.
	Для Каждого Строка Из ТаблицаРассчитываемыхИлиНулевыхТарифов Цикл
		
		Если ТипЗнч(Строка.Тариф) = Тип("СправочникСсылка.КВП_РассчитываемыеТарифы") Тогда
			Строка.Тариф = НайтиРассчитываемыйТариф(Строка.Тариф, Строка.Объект, КонецМесяца(СтруктураНастроек.ДатаВыгрузки));
		Иначе
			Строка.Тариф = ПолучитьТарифПоЛицевомуСчету(КонецМесяца(СтруктураНастроек.ДатаВыгрузки), СтруктураНастроек.Организация, Строка.Услуга, Строка.Объект);
		КонецЕсли;
		
	КонецЦикла;
	
	// Таблицу обработанных данных помещаем в исходный менеджер виртуальных таблиц.
	ЗапросПроверенныеДанные = Новый Запрос;
	ЗапросПроверенныеДанные.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	ЗапросПроверенныеДанные.Текст =
	"ВЫБРАТЬ
	| *
	|ПОМЕСТИТЬ втРассчитываемыеИлиНулевыеТарифы
	|ИЗ
	|	&ТаблицаРассчитываемыеИлиНулевыеТарифы КАК ТаблицаРассчитываемыеИлиНулевыеТарифы";
	
	ЗапросПроверенныеДанные.УстановитьПараметр("ТаблицаРассчитываемыеИлиНулевыеТарифы", ТаблицаРассчитываемыхИлиНулевыхТарифов);
	
	ЗапросПроверенныеДанные.Выполнить();
	
КонецПроцедуры // ВыгрузкаТарифов_ПолучитьРассчитываемыйИлиНулевойТариф()

&НаКлиенте
Процедура ВыгрузкаТарифовЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	#Если Не ВебКлиент Тогда
	
	Если Результат Тогда
		
		СтруктураНастроек = ВыгрузкаТарифов_ПодготовитьСтруктуруНастроек();
		
		МассивСтруктур = ВыгрузкаТарифов_НаСервере(СтруктураНастроек);
		
		Если МассивСтруктур.Количество() = 0 Тогда
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не обнаружены данные для выгрузки информации о тарифах.");
			
		Иначе
			
			ФайлДБФ = Новый XBase;
			ФайлДБФ.Кодировка = КодировкаXBase.OEM;
			
			ФайлДБФ.Поля.Добавить("City",           "S", 50);
			ФайлДБФ.Поля.Добавить("Street",         "S", 50);
			ФайлДБФ.Поля.Добавить("Number",         "N", 5);
			ФайлДБФ.Поля.Добавить("Suffix",         "S", 5);
			ФайлДБФ.Поля.Добавить("Flat",           "N", 10);
			ФайлДБФ.Поля.Добавить("Room",           "S", 50);
			ФайлДБФ.Поля.Добавить("Maintenance",    "N", 19, 2);
			ФайлДБФ.Поля.Добавить("Heating",        "N", 19, 2);
			ФайлДБФ.Поля.Добавить("ColdWater",      "N", 19, 2);
			ФайлДБФ.Поля.Добавить("HotWater",       "N", 19, 2);
			ФайлДБФ.Поля.Добавить("Gaz",            "N", 19, 2);
			ФайлДБФ.Поля.Добавить("Electricity",    "N", 19, 2);
			ФайлДБФ.Поля.Добавить("WaterDrain",     "N", 19, 2);
			ФайлДБФ.Поля.Добавить("Hiring",         "N", 19, 2);
			ФайлДБФ.Поля.Добавить("Reconstruction", "N", 19, 2);
			ФайлДБФ.Поля.Добавить("Date",           "D");
			
			Каталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Объект.ИмяКаталогаВыгрузки);
			ФайлДБФ.СоздатьФайл(Каталог + "Rates.dbf");
			
			ФайлДБФ.АвтоСохранение = Истина;
			
			Для Каждого Структура Из МассивСтруктур Цикл
				
				ФайлДБФ.Добавить();
				
				ЗаполнитьЗначенияСвойств(ФайлДБФ, Структура,, "Number");
				
				Попытка
					ФайлДБФ.Number = Число(СокрЛП(Структура.Number));
				Исключение
					ФайлДБФ.Number = Число(ПодготовитьЗданиеДляВывода(Структура.Number));
				КонецПопытки;
				
				ФайлДБФ.Записать();
				
			КонецЦикла;
			
			ФайлДБФ.ЗакрытьФайл();
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Выгрузка тарифов успешно завершена.");
			
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецЕсли

КонецПроцедуры // ВыгрузкаНачислений()

&НаКлиенте
// Проверяет заполнение необходимых для выгрузки реквизитов.
//
// Возвращаемое значение:
//  Булево - признак достаточного заполнения настроек для формирования файла выгрузки.
//
Процедура ВыгрузкаТарифов_ПроверитьНастройки(Знач Оповещение)
	
	Если ДатаВыгрузки = '00010101' Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не указана дата выгрузки.");
		ВыполнитьОбработкуОповещения(Оповещение, Ложь);
		Возврат;
	КонецЕсли;
	
	Если Объект.Организация.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбрана организация.");
		ВыполнитьОбработкуОповещения(Оповещение, Ложь);
		Возврат;
	КонецЕсли;
	
	Каталог = Новый Файл(Объект.ИмяКаталогаВыгрузки);
	
	ДополнительныеПараметры = Новый Структура("Каталог, Оповещение", Каталог, Оповещение);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаСуществованияФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	Каталог.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаПараметровДомаИЖилогоПомещения

&НаКлиенте
// Процедура производит выгрузку паспортных данных.
//
Процедура ВыгрузкаПараметровДомаИЖилогоПомещения()
	
	ПроверитьНастройки(Новый ОписаниеОповещения("ВыгрузкаПараметровДомаИЖилогоПомещенияЗавершение", ЭтотОбъект));

КонецПроцедуры

&НаКлиенте
// Проверяет заполнение необходимых для выгрузки реквизитов.
//
// Возвращаемое значение:
//  Булево - признак достаточного заполнения настроек для формирования файла выгрузки.
//
Функция ВыгрузкаПараметровДомаИЖилогоПомещения_ПодготовитьСтруктуруНастроек()
	
	СтруктураНастроек = Новый Структура("ДатаВыгрузки, ТолькоЛьготники, Здания, ПодключениеКГазу, МассивИстин");
	
	СтруктураНастроек.ДатаВыгрузки    = ДатаВыгрузки;
	СтруктураНастроек.ТолькоЛьготники = ТолькоЛьготники;
	
	Здания = Новый Массив;
	Для Каждого Строка Из Объект.МурманскаяОбласть_Здания Цикл
		Здания.Добавить(Строка.Здание);
	КонецЦикла;
	
	СтруктураНастроек.Здания = Здания;
	
	СтруктураНастроек.ПодключениеКГазу = ПодключениеКГазу;
	
	СтруктураНастроек.МассивИстин = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("Присутствует,ДА,Да,да,ЕСТЬ,Есть,есть");
	
	Возврат СтруктураНастроек;
	
КонецФункции // ВыгрузкаПараметровДомаИЖилогоПомещения_ПодготовитьСтруктуруНастроек()

&НаСервереБезКонтекста
// Процедура производит выгрузку паспортных данных.
//
Функция ВыгрузкаПараметровДомаИЖилогоПомещения_НаСервере(СтруктураНастроек)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	Запрос.УстановитьПараметр("ДатаВыгрузки",     СтруктураНастроек.ДатаВыгрузки);
	Запрос.УстановитьПараметр("ПодключениеКГазу", СтруктураНастроек.ПодключениеКГазу);
	Запрос.УстановитьПараметр("МассивИстин",      СтруктураНастроек.МассивИстин);
	
	ОтборЗдания = "";
	Если СтруктураНастроек.Здания.Количество() > 0 Тогда
		
		Если СтруктураНастроек.ТолькоЛьготники Тогда
			ОтборЗдания = 
			"ГДЕ КВП_НазначенныеЛьготыСрезПоследних.Проживающий.Владелец.Адрес.Владелец В (&СписокЗданий)";
		Иначе
			ОтборЗдания = 
			"И УПЖКХ_Жильцы.Владелец.Адрес.Владелец В (&СписокЗданий)";
		КонецЕсли;
		
		Запрос.УстановитьПараметр("СписокЗданий", СтруктураНастроек.Здания);
		
	КонецЕсли;
	
	Если СтруктураНастроек.ТолькоЛьготники Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий.Владелец.Адрес.Владелец КАК Здание,
		|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий.Владелец.Адрес КАК Помещение
		|ПОМЕСТИТЬ втОбъекты
		|ИЗ
		|	РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(&ДатаВыгрузки, Действие И ДатаИзменения <= &ДатаВыгрузки) КАК КВП_НазначенныеЛьготыСрезПоследних
		|	" + ОтборЗдания;
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_Жильцы.Владелец.Адрес.Владелец КАК Здание,
		|	УПЖКХ_Жильцы.Владелец.Адрес КАК Помещение
		|ПОМЕСТИТЬ втОбъекты
		|ИЗ
		|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
		|ГДЕ
		|	НЕ УПЖКХ_Жильцы.ПометкаУдаления
		|	" + ОтборЗдания;
		
	КонецЕсли;
	Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_БлагоустройствоОбъектов.Объект,
	|	КВП_БлагоустройствоОбъектов.Значение
	|ПОМЕСТИТЬ втБлагоустройствоЛифт
	|ИЗ
	|	РегистрСведений.КВП_БлагоустройствоОбъектов КАК КВП_БлагоустройствоОбъектов
	|ГДЕ
	|	КВП_БлагоустройствоОбъектов.Объект В
	|			(ВЫБРАТЬ
	|				втОбъекты.Здание
	|			ИЗ
	|				втОбъекты КАК втОбъекты)
	|	И КВП_БлагоустройствоОбъектов.ВидБлагоустройства = ЗНАЧЕНИЕ(Справочник.КВП_ВидыБлагоустройстваОбъектов.Лифт)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_БлагоустройствоОбъектов.Объект,
	|	КВП_БлагоустройствоОбъектов.Значение
	|ПОМЕСТИТЬ втБлагоустройствоГаз
	|ИЗ
	|	РегистрСведений.КВП_БлагоустройствоОбъектов КАК КВП_БлагоустройствоОбъектов
	|ГДЕ
	|	КВП_БлагоустройствоОбъектов.Объект В
	|			(ВЫБРАТЬ
	|				втОбъекты.Помещение
	|			ИЗ
	|				втОбъекты КАК втОбъекты)
	|	И КВП_БлагоустройствоОбъектов.ВидБлагоустройства = &ПодключениеКГазу
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОбъекты.Здание,
	|	втОбъекты.Помещение,
	|	ВЫБОР
	|		КОГДА НЕ втБлагоустройствоЛифт.Значение ЕСТЬ NULL 
	|				И втБлагоустройствоЛифт.Значение В (&МассивИстин, ИСТИНА)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК БлагоустройствоЛифт,
	|	ВЫБОР
	|		КОГДА НЕ втБлагоустройствоГаз.Значение ЕСТЬ NULL 
	|				И втБлагоустройствоГаз.Значение В (&МассивИстин, ИСТИНА)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК БлагоустройствоГаз
	|ПОМЕСТИТЬ втБлагоустройства
	|ИЗ
	|	втОбъекты КАК втОбъекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ втБлагоустройствоЛифт КАК втБлагоустройствоЛифт
	|		ПО втОбъекты.Здание = втБлагоустройствоЛифт.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ втБлагоустройствоГаз КАК втБлагоустройствоГаз
	|		ПО втОбъекты.Помещение = втБлагоустройствоГаз.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение,
	|	ВЫБОР
	|		КОГДА УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Частная)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВидСобственности
	|ПОМЕСТИТЬ втСобственностьНаПомещения
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственностьНаПомещения.СрезПоследних(
	|			&ДатаВыгрузки,
	|			Помещение В
	|				(ВЫБРАТЬ
	|					втОбъекты.Помещение
	|				ИЗ
	|					втОбъекты КАК втОбъекты)) КАК УПЖКХ_СобственностьНаПомещенияСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втБлагоустройства.Здание,
	|	втБлагоустройства.Помещение,
	|	втБлагоустройства.БлагоустройствоЛифт,
	|	втБлагоустройства.БлагоустройствоГаз,
	|	ЕСТЬNULL(втСобственностьНаПомещения.ВидСобственности, 0) КАК ВидСобственности
	|ПОМЕСТИТЬ втВидСобственности
	|ИЗ
	|	втБлагоустройства КАК втБлагоустройства
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСобственностьНаПомещения КАК втСобственностьНаПомещения
	|		ПО втБлагоустройства.Помещение = втСобственностьНаПомещения.Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_Подъезды.Владелец КАК Здание,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КВП_Подъезды.Ссылка) КАК Подъездов
	|ПОМЕСТИТЬ втПодъезды
	|ИЗ
	|	Справочник.КВП_Подъезды КАК КВП_Подъезды
	|ГДЕ
	|	КВП_Подъезды.Владелец В
	|			(ВЫБРАТЬ
	|				втОбъекты.Здание
	|			ИЗ
	|				втОбъекты КАК втОбъекты)
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_Подъезды.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втПодъезды.Здание,
	|	втПодъезды.Подъездов
	|ПОМЕСТИТЬ втПодъездов
	|ИЗ
	|	втПодъезды КАК втПодъезды
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втОбъекты.Здание,
	|	втОбъекты.Здание.Подъездов
	|ИЗ
	|	втОбъекты КАК втОбъекты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПодъездов.Здание,
	|	МАКСИМУМ(втПодъездов.Подъездов) КАК КоличествоПодъездов
	|ПОМЕСТИТЬ втКоличествоПодъездов
	|ИЗ
	|	втПодъездов КАК втПодъездов
	|
	|СГРУППИРОВАТЬ ПО
	|	втПодъездов.Здание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВидСобственности.Здание,
	|	втВидСобственности.Помещение,
	|	втВидСобственности.Помещение.Код КАК Flat,
	|	втВидСобственности.Здание.Этажей КАК FloorCount,
	|	втВидСобственности.БлагоустройствоЛифт КАК Lift,
	|	втВидСобственности.БлагоустройствоГаз КАК Gaz,
	|	втВидСобственности.Помещение.Этаж КАК Floor,
	|	втВидСобственности.ВидСобственности КАК Ownership,
	|	втВидСобственности.Помещение.Подъезд.НомерПодъезда КАК Enterance,
	|	ЕСТЬNULL(втКоличествоПодъездов.КоличествоПодъездов, 0) КАК Enterancecount
	|ПОМЕСТИТЬ втИтоговая
	|ИЗ
	|	втВидСобственности КАК втВидСобственности
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКоличествоПодъездов КАК втКоличествоПодъездов
	|		ПО втВидСобственности.Здание = втКоличествоПодъездов.Здание";
	Запрос.Выполнить();
	//ПроверитьВременнуюТаблицу(Запрос.МенеджерВременныхТаблиц, "втОбщаяТаблица", "ЛицевойСчет")
	
	ЗапросПоЗданиям = Новый Запрос;
	ЗапросПоЗданиям.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросПоЗданиям.Текст = 
	"ВЫБРАТЬ
	|	втИтоговая.Здание КАК Объект
	|ИЗ
	|	втИтоговая КАК втИтоговая
	|
	|СГРУППИРОВАТЬ ПО
	|	втИтоговая.Здание";
	
	МассивОбъектов = ЗапросПоЗданиям.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	втИтоговая.Здание КАК Здание,
	|	втИтоговая.Помещение,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Город, """") КАК City,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Улица, """") КАК Street,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Дом, """") КАК Number,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Корпус, """") КАК Suffix,
	|	втИтоговая.Flat КАК Flat,
	|	"""" КАК Room,
	|	втИтоговая.FloorCount,
	|	втИтоговая.Lift,
	|	втИтоговая.Gaz,
	|	втИтоговая.Floor,
	|	втИтоговая.Ownership,
	|	втИтоговая.Enterance,
	|	втИтоговая.Enterancecount,
	|	втИтоговая.Enterancecount КАК Enterancec
	|ИЗ
	|	втИтоговая КАК втИтоговая
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК втКонтактнаяИнформация
	|		ПО втИтоговая.Здание = втКонтактнаяИнформация.Объект
	|
	|УПОРЯДОЧИТЬ ПО
	|	Здание,
	|	Flat";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	МассивСтруктур = Новый Массив;
	
	Для Каждого Строка Из Результат Цикл
		
		_ОбработатьАдрес(Строка);
		
		Структура = Новый Структура("City,Street,Number,Suffix,Flat,Room,FloorCount,Lift,Gaz,Floor,Ownership,Enterance,Enterancecount,Enterancec");
		ЗаполнитьЗначенияСвойств(Структура, Строка);
		
		МассивСтруктур.Добавить(Структура);
		
	КонецЦикла;
	
	Возврат МассивСтруктур;
	
КонецФункции // ВыгрузкаПараметровДомаИЖилогоПомещения_НаСервере()

&НаКлиенте
// Обработчик события "ПриАктивизацииСтроки" таблицы "Услуги в ОСЗН".
//
Процедура УслугиВОСЗНПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		
		УслугиВБазе.Очистить();
		
		// 1. Для выбранной услуги в ОСЗН необходимо отоборать все строки из ТЧ "МурманскаяОбласть_СоответствиеУслуг" в которых не пустая услуга в базе.
		НайденныеСтрокиПоТекущейУслугеВОСЗН = Объект.МурманскаяОбласть_СоответствиеУслуг.НайтиСтроки(Новый Структура("Идентификатор", Элемент.ТекущиеДанные.Идентификатор));
		
		// 2. Найденные в п.1 услуги в базе добавить в таблицу "Услуги в базе".
		Для каждого ТекСтрока Из НайденныеСтрокиПоТекущейУслугеВОСЗН Цикл
			
			Если ТекСтрока.УслугаВБазе <> ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка") Тогда
				НоваяСтрока = УслугиВБазе.Добавить();
				НоваяСтрока.Услуга = ТекСтрока.УслугаВБазе;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // УслугиВОСЗНПриАктивизацииСтроки()

&НаСервере
// Продедура предназначена для первоначального заполнения таблицы "Услуги в ОСЗН" при открытии обработки.
//
Процедура ЗаполнитьТаблицуУслугВОСЗН()
	
	// Содержание и ремонт
	НоваяСтрока = УслугиВОСЗН.Добавить();
	НоваяСтрока.Идентификатор = "MAINTENANCE";
	НоваяСтрока.Услуга        = "Содержание и ремонт";
	
	// Отопление
	НоваяСтрока = УслугиВОСЗН.Добавить();
	НоваяСтрока.Идентификатор = "HEATING";
	НоваяСтрока.Услуга        = "Отопление";
	
	// Холодное водоснабжение
	НоваяСтрока = УслугиВОСЗН.Добавить();
	НоваяСтрока.Идентификатор = "COLDWATER";
	НоваяСтрока.Услуга        = "Холодное водоснабжение";
	
	// Горячее водоснабжение
	НоваяСтрока = УслугиВОСЗН.Добавить();
	НоваяСтрока.Идентификатор = "HOTWATER";
	НоваяСтрока.Услуга        = "Горячее водоснабжение";
	
	// Газовое снабжение
	НоваяСтрока = УслугиВОСЗН.Добавить();
	НоваяСтрока.Идентификатор = "GAZ";
	НоваяСтрока.Услуга        = "Газовое снабжение";
	
	// Электроэнергия
	НоваяСтрока = УслугиВОСЗН.Добавить();
	НоваяСтрока.Идентификатор = "ELECTRICITY";
	НоваяСтрока.Услуга        = "Электроэнергия";
	
	// Водоотведение
	НоваяСтрока = УслугиВОСЗН.Добавить();
	НоваяСтрока.Идентификатор = "WATERDRAIN";
	НоваяСтрока.Услуга        = "Водоотведение";
	
	// Найм
	НоваяСтрока = УслугиВОСЗН.Добавить();
	НоваяСтрока.Идентификатор = "HIRING";
	НоваяСтрока.Услуга        = "Найм";
	
	// Капитальный ремонт
	НоваяСтрока = УслугиВОСЗН.Добавить();
	НоваяСтрока.Идентификатор = "RECONSTRUCTION";
	НоваяСтрока.Услуга        = "Капитальный ремонт";
	
КонецПроцедуры // ЗаполнитьТаблицуУслугВОСЗН()

&НаКлиенте
// Обработчик события "ПриНачалеРедактирования" таблицы "Услуги в базе".
//
Процедура УслугиВБазеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не допускается добавлять одну и ту же услугу в базе для разных услуг в ОСЗН!");
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		УслугаДоИзменения = Элемент.ТекущиеДанные.Услуга;
	КонецЕсли;
	
КонецПроцедуры // УслугиВБазеПриНачалеРедактирования()

&НаКлиенте
// Обработчик события "ПередОкончаниемРедактирования" таблицы "Услуги в базе".
//
Процедура УслугиВБазеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		
		// 1. Проверка на пустую услугу.
		Если Элемент.ТекущиеДанные.Услуга = ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка") Тогда
			// 2. Не допускается добавление строк с незаполненной услугой в базе.
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не допускается добавление строк с незаполненной услугой в базе!");
			Отказ = Истина;
		Иначе
			
			// Не нужно редактировать таблицу "МурманскаяОбласть_СоответствиеУслуг" если услуга в базе в результате редактирования не поменялась.
			Если УслугаДоИзменения = Элемент.ТекущиеДанные.Услуга Тогда
				Возврат;
			КонецЕсли;
			
			// 3. Не допускается добавлять одну и ту же услугу из базы для разных услуг в ОСЗН.
			//    Если попытаться добавить более одного раза, то не поз
			НайденныеСтроки = Объект.МурманскаяОбласть_СоответствиеУслуг.НайтиСтроки(Новый Структура("УслугаВБазе", Элемент.ТекущиеДанные.Услуга));
			Если НайденныеСтроки.Количество() = 0 Тогда
				
				Если НоваяСтрока Тогда
					НоваяСтрока = Объект.МурманскаяОбласть_СоответствиеУслуг.Добавить();
					НоваяСтрока.Идентификатор = Элементы.УслугиВОСЗН.ТекущиеДанные.Идентификатор;
					НоваяСтрока.УслугаВОСЗН   = Элементы.УслугиВОСЗН.ТекущиеДанные.Услуга;
					НоваяСтрока.УслугаВБазе   = Элемент.ТекущиеДанные.Услуга;
				Иначе
					НайденныеСтроки = Объект.МурманскаяОбласть_СоответствиеУслуг.НайтиСтроки(Новый Структура("Идентификатор, УслугаВБазе", Элементы.УслугиВОСЗН.ТекущиеДанные.Идентификатор, УслугаДоИзменения));
					Если НайденныеСтроки.Количество() > 0 Тогда
						//НайденныеСтроки[0].УслугаВОСЗН = Элементы.УслугиВОСЗН.ТекущиеДанные.Услуга;
						НайденныеСтроки[0].УслугаВБазе = Элемент.ТекущиеДанные.Услуга;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не допускается добавлять одну и ту же услугу в базе для разных услуг в ОСЗН!");
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("	Услуга в базе """ + Элемент.ТекущиеДанные.Услуга + """ уже установлена в соответствие для услуг в ОСЗН """ + НайденныеСтроки[0].УслугаВОСЗН + """!");
				
				Если УслугаДоИзменения <> ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка") Тогда
					Элемент.ТекущиеДанные.Услуга = УслугаДоИзменения;
				КонецЕсли;
				
				Отказ = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередУдалением" таблицы "Услуги в базе".
//
Процедура УслугиВБазеПередУдалением(Элемент, Отказ)
	
	НайденныеСтроки = Объект.МурманскаяОбласть_СоответствиеУслуг.НайтиСтроки(Новый Структура("Идентификатор, УслугаВБазе", Элементы.УслугиВОСЗН.ТекущиеДанные.Идентификатор, Элемент.ТекущиеДанные.Услуга));
	Для каждого ТекСтрока Из НайденныеСтроки Цикл
		Объект.МурманскаяОбласть_СоответствиеУслуг.Удалить(ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры // УслугиВБазеПередУдалением()

&НаКлиенте
Процедура ВыгрузкаПараметровДомаИЖилогоПомещенияЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	#Если Не ВебКлиент Тогда
	
	Если Результат Тогда
		
		СтруктураНастроек = ВыгрузкаПараметровДомаИЖилогоПомещения_ПодготовитьСтруктуруНастроек();
		
		МассивСтруктур = ВыгрузкаПараметровДомаИЖилогоПомещения_НаСервере(СтруктураНастроек);
		
		Если МассивСтруктур.Количество() = 0 Тогда
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не обнаружены данные для выгрузки сведений о параметрах домов и жилых помещений.");
			
		Иначе
			
			ФайлДБФ = Новый XBase;
			ФайлДБФ.Кодировка = КодировкаXBase.OEM;
			
			ФайлДБФ.Поля.Добавить("City",           "S", 50);
			ФайлДБФ.Поля.Добавить("Street",         "S", 50);
			ФайлДБФ.Поля.Добавить("Number",         "N", 5);
			ФайлДБФ.Поля.Добавить("Suffix",         "S", 5);
			ФайлДБФ.Поля.Добавить("Flat",           "N", 10);
			ФайлДБФ.Поля.Добавить("Room",           "S", 50);
			ФайлДБФ.Поля.Добавить("FloorCount",     "N", 5);
			ФайлДБФ.Поля.Добавить("Lift",           "N", 5);
			ФайлДБФ.Поля.Добавить("Gaz",            "N", 5);
			ФайлДБФ.Поля.Добавить("Floor",          "N", 5);
			ФайлДБФ.Поля.Добавить("Ownership",      "N", 5);
			ФайлДБФ.Поля.Добавить("Enterance",      "N", 5);
			ФайлДБФ.Поля.Добавить("Enterancecount", "N", 5);
			
			Каталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Объект.ИмяКаталогаВыгрузки);
			ИмяВыгружаемогоФайла = Каталог + "_TEMP.dbf";
			ФайлДБФ.СоздатьФайл(ИмяВыгружаемогоФайла);
			ФайлДБФ.АвтоСохранение = Истина;
			
			Для Каждого Структура Из МассивСтруктур Цикл
				
				ФайлДБФ.Добавить();
				
				ЗаполнитьЗначенияСвойств(ФайлДБФ, Структура,, "Number");
				
				Попытка
					ФайлДБФ.Number = Число(СокрЛП(Структура.Number));
				Исключение
					ФайлДБФ.Number = Число(ПодготовитьЗданиеДляВывода(Структура.Number));
				КонецПопытки;
				
				ФайлДБФ.Записать();
				
			КонецЦикла;
			
			ФайлДБФ.ЗакрытьФайл();
			
			ДополнительныеПараметры = Новый Структура("Каталог", Каталог);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("КопироватьФайлЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			
			НачатьКопированиеФайла(ОписаниеОповещения, ИмяВыгружаемогоФайла, Каталог + "Properties.dbf");
			
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура КопироватьФайлЗавершение(СкопированныйФайл, ДополнительныеПараметры) Экспорт
	
	Каталог = ДополнительныеПараметры.Каталог;
	
	НачатьУдалениеФайлов(Новый ОписаниеОповещения("УдалениеФайлаЗавершение", ЭтотОбъект), Каталог, "_TEMP.dbf");

КонецПроцедуры

&НаКлиенте
Процедура УдалениеФайлаЗавершение(ДополнительныеПараметры) Экспорт
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Выгрузка параметров домов и жилых помещений успешно завершена.");
	
КонецПроцедуры // ВыгрузкаПараметровДомаИЖилогоПомещения()

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

&НаСервереБезКонтекста
// Предназначена для отладки временных таблиц, находящихся в менеждере временных таблиц запроса.
// 
Функция ПроверитьВременнуюТаблицу(МенеджерВременныхТаблиц, ИмяВременнойТаблицы = "", Порядок = "")
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	| *
	|ИЗ
	| ВременнаяТаблица КАК ВременнаяТаблица
	|
	|УПОРЯДОЧИТЬ ПО Порядок";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВременнаяТаблица", ИмяВременнойТаблицы); 
	Если Порядок = "" тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПОРЯДОЧИТЬ ПО Порядок", "");
	Иначе 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Порядок", Порядок);
	КонецЕсли; 
	
	Результат = Запрос.Выполнить().Выгрузить(); 
	
	Возврат Результат; 
	
КонецФункции // ПроверитьВременнуюТаблицу()

// Убирает из номера здания не цифровые символы.
// 
Функция ПодготовитьЗданиеДляВывода(НомерДома)
	
	НомерДома = СокрЛП(НомерДома);
	СтрокаДляВозврата = "";
	
	Если СтрДлина(НомерДома) = 0 Тогда
		СтрокаДляВозврата = "0";
	Иначе
		
		Пока СтрДлина(НомерДома) > 0 Цикл
			
			СимволЛС = Лев(НомерДома, 1);
			Если КодСимвола(СимволЛС) > 47 И КодСимвола(СимволЛС) < 58 Тогда
				СтрокаДляВозврата = СтрокаДляВозврата + СимволЛС;
			КонецЕсли;
			
			НомерДома = Прав(НомерДома, СтрДлина(НомерДома) - 1);
		КонецЦикла;
		
		Если ПустаяСтрока(СтрокаДляВозврата) Тогда
			СтрокаДляВозврата = "0";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаДляВозврата;
	
КонецФункции // ПодготовитьЗданиеДляВывода()

&НаКлиенте
// Проверяет заполнение необходимых для выгрузки реквизитов.
//
// Возвращаемое значение:
//  Булево - признак достаточного заполнения настроек для формирования файла выгрузки.
//
Процедура ПроверитьНастройки(Знач Оповещение)
	
	Если ДатаВыгрузки = '00010101' Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не указана дата выгрузки.");
		ВыполнитьОбработкуОповещения(Оповещение, Ложь);
		Возврат;
	КонецЕсли;
	
	Каталог = Новый Файл(Объект.ИмяКаталогаВыгрузки);
	
	ДополнительныеПараметры = Новый Структура("Каталог, Оповещение", Каталог, Оповещение);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаСуществованияФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Каталог.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСуществованияФайлаЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	Каталог = ДополнительныеПараметры.Каталог;
	Оповещение = ДополнительныеПараметры.Оповещение;
	
	Если Не Существует Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран каталог выгрузки.");
		ВыполнитьОбработкуОповещения(Оповещение, Ложь);
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура("Оповещение", Оповещение);
	Каталог.НачатьПроверкуЭтоКаталог(Новый ОписаниеОповещения("ПроверкаНаКатологЗавершение", ЭтотОбъект, ПараметрыОповещения));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаНаКатологЗавершение(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Оповещение = ДополнительныеПараметры.Оповещение;
	
	Если Не ЭтоКаталог Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран каталог выгрузки.");
		ВыполнитьОбработкуОповещения(Оповещение, Ложь);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение, Истина);
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "ПанельНастроек".
//
Процедура ПанельНастроек(Команда)
	
	Попытка
		
		Элементы.ГруппаПанельНастроек.Видимость = Не Элементы.ГруппаПанельНастроек.Видимость;
		УПЖКХ_ТиповыеМетодыКлиентСервер.ИзменитьЗаголовокКнопкиПанельНастроек(Элементы.ПанельНастроек, Элементы.ГруппаПанельНастроек.Видимость);
		
	Исключение
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ОписаниеОшибки());
		
	КонецПопытки;
	
КонецПроцедуры // ПанельНастроек()

&НаКлиенте
// Обработчик команды "КомандаВыгрузить".
//
Процедура КомандаВыгрузить(Команда)
	
	ОчиститьСообщения();
	
	Если Элементы.ГруппаПанельОсновная.ТекущаяСтраница.Имя = "СтраницаПереченьФизЛиц" Тогда
		
		ВыгрузкаФизЛиц();
		
	ИначеЕсли Элементы.ГруппаПанельОсновная.ТекущаяСтраница.Имя = "СтраницаПаспортныеДанные" Тогда
		
		ВыгрузкаПаспортныхДанных();
		
	ИначеЕсли Элементы.ГруппаПанельОсновная.ТекущаяСтраница.Имя = "СтраницаИнформацияОВыбывшихЖильцах" Тогда
		
		ВыгрузкаИнформацииОВыбывшихЖильцах();
		
	ИначеЕсли Элементы.ГруппаПанельОсновная.ТекущаяСтраница.Имя = "СтраницаДанныеПоНачислениям" Тогда
		
		ВыгрузкаНачислений();
		
	ИначеЕсли Элементы.ГруппаПанельОсновная.ТекущаяСтраница.Имя = "СтраницаИнформацияОТарифах" Тогда
		
		ВыгрузкаТарифов();
		
	ИначеЕсли Элементы.ГруппаПанельОсновная.ТекущаяСтраница.Имя = "СтраницаПараметрыДомаИЖилогоПомещения" Тогда
		
		ВыгрузкаПараметровДомаИЖилогоПомещения();
		
	КонецЕсли;
	
КонецПроцедуры // КомандаВыгрузить()

#КонецОбласти
