
//////////////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

// Обработчик события "ПриСозданииНаСервере" формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
	ТекРабДата = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	Объект.Период = ТекРабДата;
	
	ВосстановитьНастройки();
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры // ПриСозданииНаСервере()

// Обработчик события "ПередЗакрытием" формы.
//
&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки();
	
КонецПроцедуры // ПередЗакрытием()

#КонецОбласти // ОбработчикиСобытийФормы

//////////////////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

#Область Обработчики_поля_Период

// Обработчик события "ПриИзменении" поля "ПериодСтрокой".
//
&НаКлиенте
Процедура ПериодСтрокойПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Модифицированность);
	
КонецПроцедуры // ПериодСтрокойПриИзменении()

// Обработчик события "НачалоВыбора" поля "ПериодСтрокой".
//
&НаКлиенте
Процедура ПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры // ПериодСтрокойНачалоВыбора()

// Обработчик события "Регулирование" поля "ПериодСтрокой".
//
&НаКлиенте
Процедура ПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Направление,
														Модифицированность);
	
КонецПроцедуры // ПериодСтрокойРегулирование()

// Обработчик события "АвтоПодбор" поля "ПериодСтрокой".
//
&НаКлиенте
Процедура ПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодСтрокойАвтоПодбор()

// Обработчик события "ОкончаниеВводаТекста" поля "ПериодСтрокой".
//
&НаКлиенте
Процедура ПериодСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодСтрокойОкончаниеВводаТекста()

#КонецОбласти // Обработчики_поля_Период

#Область Обработчики_поля_ФайлОбмена

// Обработачик события "НачалоВыбора" поля ввода "ФайлОбмена".
//
&НаКлиенте
Процедура ФайлОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр                      = "Файл данных (*.dbf)|*.dbf";
	ДиалогВыбораФайла.Расширение                  = "dbf";
	ДиалогВыбораФайла.Заголовок                   = "Выберите файл обмена";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	ДиалогВыбораФайла.ПолноеИмяФайла              = ФайлОбмена;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ФайлОбменаНачалоВыбораЗавершение",
	                           ЭтотОбъект, Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла)));
	
КонецПроцедуры // ФайлОбменаНачалоВыбора()

// Обработчик завершения процедуры ФайлОбменаНачалоВыбора.
//
&НаКлиенте
Процедура ФайлОбменаНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ФайлОбмена      = ДиалогВыбораФайла.ПолноеИмяФайла;
		КаталогВыгрузки = ДиалогВыбораФайла.Каталог;
	КонецЕсли;

КонецПроцедуры // ФайлОбменаНачалоВыбораЗавершение()

// Обработчик события "Открытие" поля ввода "ФайлОбмена".
//
&НаКлиенте
Процедура ФайлОбменаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ФайлОбмена = "" Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран файл обмена!", , "ФайлОбмена");
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ФайлОбменаОткрытиеЗавершение", ЭтотОбъект);
		НачатьЗапускПриложения(ОписаниеОповещения, ФайлОбмена,,Ложь);
	КонецЕсли;
	
КонецПроцедуры // ФайлОбменаОткрытие()

// Обработчик завершения процедуры ФайлОбменаОткрытие.
//
&НаКлиенте
Процедура ФайлОбменаОткрытиеЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	// Заглушка, т.к. в НачатьЗапускПриложения первый параметр обязательный
	ЭтаПеременнаяЧтобыНеРугаласьПроверкаКонфигурацииНаПустойОбработчик = Неопределено;
	
КонецПроцедуры // ФайлОбменаОткрытиеЗавершение()

#КонецОбласти // Обработчики_поля_ФайлОбмена

// Обработчик команды "КомандаСправочнаяИнформация".
//
&НаКлиенте
Процедура КомандаСправочнаяИнформация(Команда)
	
	ОткрытьСправкуФормы();
	
КонецПроцедуры // КомандаСправочнаяИнформация()

// Обработчик команды "КомандаНастройка".
//
&НаКлиенте
Процедура КомандаНастройка(Команда)
	
	АдресНастроекВХранилище = ПолучитьАдресХранилищаНастроек();
	
	// Передаем вид разреза выгрузки и заполняемые настройки в параметры открытия формы настроек.
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("АдресНастроекВХранилище", АдресНастроекВХранилище);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьНастройки", ЭтаФорма);
	
	ОткрытьФорму("Обработка.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты.Форма.ПриморскийКрай_ФормаНастройки", ПараметрыОткрытияФормы, ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры // КомандаНастройка

// Обработчик команды "КомандаЗагрузитьИзФайла".
//
&НаКлиенте
Процедура КомандаЗагрузитьИзФайла(Команда)
	
	// Проверка заполнения реквизитов перед чтением данных из файла обмена.
	Если ОбнаруженыОшибкиЗаполненияОбязательныхПолей("ЧтениеИзФайла") Тогда
		Возврат;
	КонецЕсли;
	
	Если ПриморскийКрай_ТаблицаВыгрузки.Количество() > 0 Тогда
		ТекстВопроса = "Перед повторной загрузкой из файла обмена ранее загруженные данные будут очищены. Продолжить?";
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаЗагрузить", 
												ЭтотОбъект),
					   ТекстВопроса,
					   РежимДиалогаВопрос.ДаНет, ,
					   КодВозвратаДиалога.Да);
	Иначе
		ЗагрузитьИзФайлаПродолжение();
	КонецЕсли;
	
КонецПроцедуры // КомандаЗагрузитьИзФайла()

// Обработчик команды "КомандаЗаполнитьДанныеОНачислениях".
//
&НаКлиенте
Процедура КомандаЗаполнитьДанныеОНачислениях(Команда)
	
	Если ОбнаруженыОшибкиЗаполненияОбязательныхПолей("ЗаполнениеСведенийОНачислениях") Тогда
		Возврат;
	КонецЕсли;
	
	// 2. Выделить список идентифицированных лс.
	ПолучитьСведенияОНачисленияхНаСервере();
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Заполнение сведений о начислениях за " + Формат(Объект.Период, "ДФ='MMMM yyyy'") + " завершено!");
	
КонецПроцедуры // КомандаЗаполнитьДанныеОНачислениях()

// Обработчик команды "КомандаВыгрузитьВФайл".
//
&НаКлиенте
Процедура КомандаВыгрузитьВФайл(Команда)
	
	// 1. Проверить наличие данных для выгрузки.
	Если ОбнаруженыОшибкиЗаполненияОбязательныхПолей("СоздатьФайлОтвета") Тогда
		Возврат;
	КонецЕсли;
	
	// Сохраняем резервную копию исходного файла выгрузки.
	ИмяБэкапФайла = СтрЗаменить(ФайлОбмена, ".dbf", "") + "_Исходный.dbf";
	
	НачатьКопированиеФайла(Новый ОписаниеОповещения("ВыгрузитьЗавершение", ЭтотОбъект, Новый Структура("ИмяБэкапФайла", ИмяБэкапФайла)), ФайлОбмена, ИмяБэкапФайла);
	
КонецПроцедуры // КомандаВыгрузитьВФайл()

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

//////////////////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ПолучениеСведенийОНачислениях

// Предназначена для получения сведений о начислениях за выбранный месяц.
//
&НаСервере
Функция ПолучитьСведенияОНачисленияхНаСервере()
	
	// 1. Выделим строки с заполненными лицевыми счетами.
	// 2. Дозаполним сведения о начислениях и долгах.
	
	ТаблицаДанныхДляЗапроса = ПриморскийКрай_ТаблицаВыгрузки.Выгрузить(, "ЛицевойСчет, LS, GKU");
	
	МассивСтрокСПустымиЛицевымиСчетами = ТаблицаДанныхДляЗапроса.НайтиСтроки(Новый Структура("ЛицевойСчет", ПредопределенноеЗначение("Справочник.КВП_ЛицевыеСчета.ПустаяСсылка")));
	
	Для каждого ТекСтрока Из МассивСтрокСПустымиЛицевымиСчетами Цикл
		ТаблицаДанныхДляЗапроса.Удалить(ТекСтрока);
	КонецЦикла;
	
	// Запрос по получению сведений о начислениях и состояниях лицевых сечтов.
	
	// 1. PL (Общая площадь жилого помещения);
	// 2. KOLP (Кол-во постоянно зарегистрированных граждан);
	// 3. NORM (В нашем регионе не исп-ся нормативы согласно постановлению Департамента, поэтому в поле всегда указывается общая площадь жилого помещения);
	// 4. FAKTP (Сумма начисленных сумм, с учетом перерасчетов за месяц (в рублях));
	// 5. FAKTPER (Фактическое потребление ЖКУ с учетом перерасчета (в квадратных метрах или кубах);
	// 6. TARF (Установленный тариф на ЖКУ);
	// 7. PRIZN (0-Если поставщик ЖКУ не корректировал строку, 1 – если корректировки были внесены);
	// 8. MESD (Количество месяцев задолженности за ЖКУ, возникшей с 01.07.2015г.);
	// 9. RESTRDOLG (0 - При отсутствии соглашения о реструктуризации долга,1 - при наличии соглашения о реструктуризации долга).
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ТаблицаДанныхДляЗапроса",          ТаблицаДанныхДляЗапроса);
	Запрос.УстановитьПараметр("ПриморскийКрай_СоответствиеУслуг", ПриморскийКрай_СоответствиеУслуг.Выгрузить());
	
	Запрос.УстановитьПараметр("ДатаНач",      НачалоМесяца(Объект.Период));
	Запрос.УстановитьПараметр("ДатаКон",      КонецМесяца(Объект.Период));
	Запрос.УстановитьПараметр("Организация",  Объект.Организация);
	
	Запрос.УстановитьПараметр("ТекущийМесяц", НачалоДня(КонецМесяца(Объект.Период)));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДанныхДляЗапроса.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаДанныхДляЗапроса.LS КАК LS,
	|	ТаблицаДанныхДляЗапроса.GKU КАК GKU
	|ПОМЕСТИТЬ втДанныхДляЗапроса
	|ИЗ
	|	&ТаблицаДанныхДляЗапроса КАК ТаблицаДанныхДляЗапроса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПриморскийКрай_СоответствиеУслуг.GKU КАК GKU,
	|	ПриморскийКрай_СоответствиеУслуг.УслугаВБазе КАК УслугаВБазе,
	|	ПриморскийКрай_СоответствиеУслуг.ТипУслуги КАК ТипУслуги
	|ПОМЕСТИТЬ втПриморскийКрай_СоответствиеУслуг
	|ИЗ
	|	&ПриморскийКрай_СоответствиеУслуг КАК ПриморскийКрай_СоответствиеУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныхДляЗапроса.ЛицевойСчет КАК ЛицевойСчет,
	|	втДанныхДляЗапроса.LS КАК LS,
	|	втДанныхДляЗапроса.GKU КАК GKU,
	|	втПриморскийКрай_СоответствиеУслуг.УслугаВБазе КАК УслугаВБазе,
	|	втПриморскийКрай_СоответствиеУслуг.ТипУслуги КАК ТипУслуги
	|ПОМЕСТИТЬ втДанныеДляЗапросаСУслугами
	|ИЗ
	|	втДанныхДляЗапроса КАК втДанныхДляЗапроса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПриморскийКрай_СоответствиеУслуг КАК втПриморскийКрай_СоответствиеУслуг
	|		ПО втДанныхДляЗапроса.GKU = втПриморскийКрай_СоответствиеУслуг.GKU
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.Объект КАК Помещение,
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	ВЫБОР
	|		КОГДА КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель = 0
	|			ТОГДА 0
	|		ИНАЧЕ КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель / КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель
	|	КОНЕЦ КАК ДоляЛС
	|ПОМЕСТИТЬ втДолиЛС
	|ИЗ
	|	РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(
	|			&ДатаНач,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втДанныеДляЗапросаСУслугами.ЛицевойСчет КАК ЛицевойСчет
	|				ИЗ
	|					втДанныеДляЗапросаСУслугами КАК втДанныеДляЗапросаСУслугами)) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект КАК Помещение,
	|	КВП_ПлощадьПомещенияСрезПоследних.Площадь КАК Площадь
	|ПОМЕСТИТЬ втОбщиеПлощади
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|			&ДатаНач,
	|			Объект В
	|					(ВЫБРАТЬ
	|						втДолиЛС.Помещение КАК Помещение
	|					ИЗ
	|						втДолиЛС КАК втДолиЛС)
	|				И ВидПлощади В (ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь))) КАК КВП_ПлощадьПомещенияСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДолиЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	втДолиЛС.ДоляЛС * втОбщиеПлощади.Площадь КАК PL
	|ПОМЕСТИТЬ втОбщиеПлощадиЛС
	|ИЗ
	|	втДолиЛС КАК втДолиЛС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОбщиеПлощади КАК втОбщиеПлощади
	|		ПО втДолиЛС.Помещение = втОбщиеПлощади.Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втДолиЛС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втОбщиеПлощади
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец) КАК КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втСведенияОЗарегистрированныхПолныйУчет
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			&ДатаНач,
	|			ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втДанныхДляЗапроса.ЛицевойСчет КАК ЛицевойСчет
	|					ИЗ
	|						втДанныхДляЗапроса КАК втДанныхДляЗапроса)
	|				И ДатаИзменения <= &ДатаНач) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|	И НЕ УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ВременнаяРегистрация
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.КоличествоЗарегистрированных КАК КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втСведенияОЗарегистрированныхГотовыйУчет
	|ИЗ
	|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(
	|			&ДатаНач,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втДанныхДляЗапроса.ЛицевойСчет КАК ЛицевойСчет
	|				ИЗ
	|					втДанныхДляЗапроса КАК втДанныхДляЗапроса)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втСведенияОЗарегистрированныхГотовыйУчет.ЛицевойСчет, ЕСТЬNULL(втСведенияОЗарегистрированныхПолныйУчет.ЛицевойСчет, ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка))) КАК ЛицевойСчет,
	|	ВЫБОР
	|		КОГДА УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Значение = ИСТИНА
	|			ТОГДА ЕСТЬNULL(втСведенияОЗарегистрированныхГотовыйУчет.КоличествоЗарегистрированных, 0)
	|		ИНАЧЕ ЕСТЬNULL(втСведенияОЗарегистрированныхПолныйУчет.КоличествоЗарегистрированных, 0)
	|	КОНЕЦ КАК KOLP
	|ПОМЕСТИТЬ втКоличествоЗарегистрированныхНаЛС
	|ИЗ
	|	Константа.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами КАК УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами,
	|	втСведенияОЗарегистрированныхПолныйУчет КАК втСведенияОЗарегистрированныхПолныйУчет
	|		ПОЛНОЕ СОЕДИНЕНИЕ втСведенияОЗарегистрированныхГотовыйУчет КАК втСведенияОЗарегистрированныхГотовыйУчет
	|		ПО втСведенияОЗарегистрированныхПолныйУчет.ЛицевойСчет = втСведенияОЗарегистрированныхГотовыйУчет.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втСведенияОЗарегистрированныхПолныйУчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втСведенияОЗарегистрированныхГотовыйУчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга КАК Услуга,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|			ТОГДА 0
	|		ИНАЧЕ УПЖКХ_НачисленияОбороты.Тариф
	|	КОНЕЦ КАК Тариф,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|			ТОГДА УПЖКХ_НачисленияОбороты.Тариф
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ТарифОДН,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|			ТОГДА 0
	|		ИНАЧЕ УПЖКХ_НачисленияОбороты.Количество
	|	КОНЕЦ КАК ОбъемПотребления,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|			ТОГДА УПЖКХ_НачисленияОбороты.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОбъемПотребленияОДН,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|			ТОГДА 0
	|		ИНАЧЕ УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|	КОНЕЦ КАК СуммаНачисления,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|			ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаНачисленияОДН,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоПерерасчет
	|ПОМЕСТИТЬ втНачисления
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Организация = &Организация
	|				И (ЛицевойСчет, Услуга) В
	|					(ВЫБРАТЬ
	|						втДанныеДляЗапросаСУслугами.ЛицевойСчет КАК ЛицевойСчет,
	|						втДанныеДляЗапросаСУслугами.УслугаВБазе КАК УслугаВБазе
	|					ИЗ
	|						втДанныеДляЗапросаСУслугами КАК втДанныеДляЗапросаСУслугами)
	|				И РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Рассрочка))
	|				И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ВводНачальногоСальдо), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Комиссия), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата))) КАК УПЖКХ_НачисленияОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачисления.ЛицевойСчет КАК ЛицевойСчет,
	|	втНачисления.Услуга КАК Услуга,
	|	СУММА(втНачисления.Тариф) КАК Тариф,
	|	СУММА(втНачисления.ТарифОДН) КАК ТарифОДН
	|ПОМЕСТИТЬ втСведенияОТарифахИзНачислений
	|ИЗ
	|	втНачисления КАК втНачисления
	|ГДЕ
	|	НЕ втНачисления.ЭтоПерерасчет
	|
	|СГРУППИРОВАТЬ ПО
	|	втНачисления.Услуга,
	|	втНачисления.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачисления.ЛицевойСчет КАК ЛицевойСчет,
	|	втНачисления.Услуга КАК Услуга,
	|	СУММА(втНачисления.ОбъемПотребления) КАК ОбъемПотребления,
	|	СУММА(втНачисления.СуммаНачисления) КАК СуммаНачисления,
	|	СУММА(втНачисления.ОбъемПотребленияОДН) КАК ОбъемПотребленияОДН,
	|	СУММА(втНачисления.СуммаНачисленияОДН) КАК СуммаНачисленияОДН
	|ПОМЕСТИТЬ втСведенияОбОбъемахИСуммахНачислений
	|ИЗ
	|	втНачисления КАК втНачисления
	|
	|СГРУППИРОВАТЬ ПО
	|	втНачисления.ЛицевойСчет,
	|	втНачисления.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСведенияОбОбъемахИСуммахНачислений.ЛицевойСчет КАК ЛицевойСчет,
	|	втСведенияОбОбъемахИСуммахНачислений.Услуга КАК Услуга,
	|	втСведенияОбОбъемахИСуммахНачислений.ОбъемПотребления КАК ОбъемПотребления,
	|	втСведенияОбОбъемахИСуммахНачислений.СуммаНачисления КАК СуммаНачисления,
	|	втСведенияОбОбъемахИСуммахНачислений.ОбъемПотребленияОДН КАК ОбъемПотребленияОДН,
	|	втСведенияОбОбъемахИСуммахНачислений.СуммаНачисленияОДН КАК СуммаНачисленияОДН,
	|	ЕСТЬNULL(втСведенияОТарифахИзНачислений.Тариф, 0) КАК Тариф,
	|	ЕСТЬNULL(втСведенияОТарифахИзНачислений.ТарифОДН, 0) КАК ТарифОДН
	|ПОМЕСТИТЬ втСвернутыеСведенияОНачислениях
	|ИЗ
	|	втСведенияОбОбъемахИСуммахНачислений КАК втСведенияОбОбъемахИСуммахНачислений
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОТарифахИзНачислений КАК втСведенияОТарифахИзНачислений
	|		ПО втСведенияОбОбъемахИСуммахНачислений.ЛицевойСчет = втСведенияОТарифахИзНачислений.ЛицевойСчет
	|			И втСведенияОбОбъемахИСуммахНачислений.Услуга = втСведенияОТарифахИзНачислений.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втСведенияОТарифахИзНачислений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втСведенияОбОбъемахИСуммахНачислений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга КАК Услуга,
	|	МИНИМУМ(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.МесяцНачисления) КАК МесяцНачисления
	|ПОМЕСТИТЬ втСведенияОСамыхРаннихМесяцахЗадолженности
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&ДатаКон,
	|			Организация = &Организация
	|				И (ЛицевойСчет, Услуга) В
	|					(ВЫБРАТЬ
	|						втДанныеДляЗапросаСУслугами.ЛицевойСчет КАК ЛицевойСчет,
	|						втДанныеДляЗапросаСУслугами.УслугаВБазе КАК УслугаВБазе
	|					ИЗ
	|						втДанныеДляЗапросаСУслугами КАК втДанныеДляЗапросаСУслугами)
	|				И НЕ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНачисленияОстатки.Пени)
	|				И МесяцНачисления > ДАТАВРЕМЯ(2015, 6, 30)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|ГДЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСведенияОСамыхРаннихМесяцахЗадолженности.ЛицевойСчет КАК ЛицевойСчет,
	|	втСведенияОСамыхРаннихМесяцахЗадолженности.Услуга КАК Услуга,
	|	РАЗНОСТЬДАТ(втСведенияОСамыхРаннихМесяцахЗадолженности.МесяцНачисления, &ТекущийМесяц, МЕСЯЦ) КАК MESD
	|ПОМЕСТИТЬ втКоличествоМесяцевЗадолженности
	|ИЗ
	|	втСведенияОСамыхРаннихМесяцахЗадолженности КАК втСведенияОСамыхРаннихМесяцахЗадолженности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втСведенияОСамыхРаннихМесяцахЗадолженности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ГрафикиПлатежейПоЛС.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ втЛицевыеСчетаСДействующимиСоглашениямиОПогашенииЗадолженности
	|ИЗ
	|	РегистрСведений.КВП_ГрафикиПлатежейПоЛС КАК КВП_ГрафикиПлатежейПоЛС
	|ГДЕ
	|	КВП_ГрафикиПлатежейПоЛС.ДатаПлатежа МЕЖДУ &ДатаНач И &ДатаКон
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ГрафикиПлатежейПоЛС.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеДляЗапросаСУслугами.ЛицевойСчет КАК ЛицевойСчет,
	|	втДанныеДляЗапросаСУслугами.LS КАК LS,
	|	втДанныеДляЗапросаСУслугами.GKU КАК GKU,
	|	втДанныеДляЗапросаСУслугами.УслугаВБазе КАК УслугаВБазе,
	|	втДанныеДляЗапросаСУслугами.ТипУслуги КАК ТипУслуги,
	|	ЕСТЬNULL(втКоличествоЗарегистрированныхНаЛС.KOLP, 0) КАК KOLP,
	|	ЕСТЬNULL(втКоличествоМесяцевЗадолженности.MESD, 0) КАК MESD,
	|	ЕСТЬNULL(втОбщиеПлощадиЛС.PL, 0) КАК PL,
	|	ЕСТЬNULL(втСвернутыеСведенияОНачислениях.Тариф, 0) КАК Тариф,
	|	ЕСТЬNULL(втСвернутыеСведенияОНачислениях.ТарифОДН, 0) КАК ТарифОДН,
	|	ЕСТЬNULL(втСвернутыеСведенияОНачислениях.ОбъемПотребления, 0) КАК ОбъемПотребления,
	|	ЕСТЬNULL(втСвернутыеСведенияОНачислениях.ОбъемПотребленияОДН, 0) КАК ОбъемПотребленияОДН,
	|	ЕСТЬNULL(втСвернутыеСведенияОНачислениях.СуммаНачисления, 0) КАК СуммаНачисления,
	|	ЕСТЬNULL(втСвернутыеСведенияОНачислениях.СуммаНачисленияОДН, 0) КАК СуммаНачисленияОДН,
	|	ВЫБОР
	|		КОГДА втЛицевыеСчетаСДействующимиСоглашениямиОПогашенииЗадолженности.ЛицевойСчет ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК RESTRDOLG
	|ИЗ
	|	втДанныеДляЗапросаСУслугами КАК втДанныеДляЗапросаСУслугами
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОбщиеПлощадиЛС КАК втОбщиеПлощадиЛС
	|		ПО втДанныеДляЗапросаСУслугами.ЛицевойСчет = втОбщиеПлощадиЛС.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКоличествоЗарегистрированныхНаЛС КАК втКоличествоЗарегистрированныхНаЛС
	|		ПО втДанныеДляЗапросаСУслугами.ЛицевойСчет = втКоличествоЗарегистрированныхНаЛС.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСвернутыеСведенияОНачислениях КАК втСвернутыеСведенияОНачислениях
	|		ПО втДанныеДляЗапросаСУслугами.ЛицевойСчет = втСвернутыеСведенияОНачислениях.ЛицевойСчет
	|			И втДанныеДляЗапросаСУслугами.УслугаВБазе = втСвернутыеСведенияОНачислениях.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКоличествоМесяцевЗадолженности КАК втКоличествоМесяцевЗадолженности
	|		ПО втДанныеДляЗапросаСУслугами.ЛицевойСчет = втКоличествоМесяцевЗадолженности.ЛицевойСчет
	|			И втДанныеДляЗапросаСУслугами.УслугаВБазе = втКоличествоМесяцевЗадолженности.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЛицевыеСчетаСДействующимиСоглашениямиОПогашенииЗадолженности КАК втЛицевыеСчетаСДействующимиСоглашениямиОПогашенииЗадолженности
	|		ПО втДанныеДляЗапросаСУслугами.ЛицевойСчет = втЛицевыеСчетаСДействующимиСоглашениямиОПогашенииЗадолженности.ЛицевойСчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЛицевойСчет,
	|	GKU
	|ИТОГИ
	|	МАКСИМУМ(KOLP),
	|	МАКСИМУМ(MESD),
	|	МАКСИМУМ(PL),
	|	МАКСИМУМ(RESTRDOLG)
	|ПО
	|	ЛицевойСчет,
	|	GKU";
	
	ДеревоРезультатЗапроса = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ОтборСтрок = Новый Структура("ЛицевойСчет, GKU");
	
	// Обход лицевых счетов.
	Пока ДеревоРезультатЗапроса.Следующий() Цикл
		
		ОтборСтрок.ЛицевойСчет = ДеревоРезультатЗапроса.ЛицевойСчет;
		
		// Обход услуг из ОСЗН.
		ВыборкаGKU = ДеревоРезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаGKU.Следующий() Цикл
			
			ОтборСтрок.GKU = ВыборкаGKU.GKU;
			
			ВыборкаУслуг = ВыборкаGKU.Выбрать();
			
			ИтоговыйОбъемПотребления = 0;
			ИтоговаяСуммаНачисления  = 0;
			ИтоговыйТариф            = 0;
			
			Пока ВыборкаУслуг.Следующий() Цикл
				
				ИтоговыйОбъемПотребления = ИтоговыйОбъемПотребления + ВыборкаУслуг.ОбъемПотребления + ВыборкаУслуг.ОбъемПотребленияОДН;
				ИтоговаяСуммаНачисления  = ИтоговаяСуммаНачисления + ВыборкаУслуг.СуммаНачисления + ВыборкаУслуг.СуммаНачисленияОДН;
				ИтоговыйТариф            = ИтоговыйТариф + ВыборкаУслуг.Тариф + ВыборкаУслуг.ТарифОДН;
				
			КонецЦикла;
			
			// 1. Тут ищем строку из таблицы "ПриморскийКрай_ТаблицаВыгрузки", в которой совпадет комбинация "LS" и "GKU".
			НайденноеСтрока = ПриморскийКрай_ТаблицаВыгрузки.НайтиСтроки(ОтборСтрок);
			Для каждого ТекСтрока Из НайденноеСтрока Цикл
				
				ТекСтрока.PL        = ВыборкаGKU.PL;
				ТекСтрока.KOLP      = ВыборкаGKU.KOLP;
				Если ВыборкаGKU.MESD > 1 Тогда
					ТекСтрока.MESD  = ВыборкаGKU.MESD;
				КонецЕсли;
				ТекСтрока.RESTRDOLG = ВыборкаGKU.RESTRDOLG;
				// В Приморском крае не используются нормативы согласно постановлению Департамента, поэтому в поле "NORM" всегда указывается общая площадь жилого помещения.
				ТекСтрока.NORM      = ВыборкаGKU.PL;
				
				ТекСтрока.FAKTP   = ИтоговаяСуммаНачисления;
				
				ТекСтрока.TARIF   = ИтоговыйТариф;
				Если ИтоговыйТариф = 0 Тогда
					//ТекСтрока.FAKTPER = 
				Иначе
					ТекСтрока.FAKTPER = Окр(ИтоговаяСуммаНачисления / ИтоговыйТариф, 2);//ИтоговыйОбъемПотребления;
				КонецЕсли;
				
				ТекСтрока.PRIZN   = 1;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецФункции // ПолучитьСведенияОНачисленияхНаСервере()

#КонецОбласти // ПолучениеСведенийОНачислениях

#Область ВыгрузитьДанныеВФайлОтвета

// Предназначена для выгрузки сведений в файл ответа.
//
&НаСервере
Функция ЗаполнитьИПолучитьФайлаОтвета(АдресФайла)
	
	DBFФайлВыгрузки = Новый XBase;
	DBFФайлВыгрузки.Кодировка = КодировкаXBase.OEM;
	
	КолонкиDBF = ПолучитьКолонкиDBF();
	
	Для Каждого Колонка Из КолонкиDBF Цикл
		
		Если Колонка.Тип = "S" Тогда
			
			DBFФайлВыгрузки.Поля.Добавить(Колонка.Имя, Колонка.Тип, Колонка.Длина);
			
		ИначеЕсли Колонка.Тип = "N" Тогда
			
			DBFФайлВыгрузки.Поля.Добавить(Колонка.Имя, Колонка.Тип, Колонка.РазрядностьЦелойЧасти, Колонка.РазрядностьДробнойЧасти);
			
		ИначеЕсли Колонка.Тип = "D" Тогда
			
			DBFФайлВыгрузки.Поля.Добавить(Колонка.Имя, Колонка.Тип, Колонка.ЧастиДаты);
			
		ИначеЕсли Колонка.Тип = "L" Тогда
			
			DBFФайлВыгрузки.Поля.Добавить(Колонка.Имя, Колонка.Тип);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Файл = Новый Файл(ПолучитьИмяВременногоФайла(".dbf"));
	ИмяВременногоФайла = Файл.Путь + Прав(Файл.Имя, 11);
	
	DBFФайлВыгрузки.СоздатьФайл(ИмяВременногоФайла);
	DBFФайлВыгрузки.АвтоСохранение = Истина;
	
	// Запись данных из табличной части в файл выгрузки.
	Для Каждого Строка Из ПриморскийКрай_ТаблицаВыгрузки Цикл
		
		DBFФайлВыгрузки.Добавить();
		
		ЗаполнитьЗначенияСвойств(DBFФайлВыгрузки, Строка);
		
		DBFФайлВыгрузки.Записать();
		
	КонецЦикла;
	
	DBFФайлВыгрузки.ЗакрытьФайл();
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	Возврат ПоместитьВоВременноеХранилище(ДвоичныеДанные, АдресФайла);
	
КонецФункции // ЗаполнитьИПолучитьФайлаЗагрузки()

// Формирует массив структур, состоящих из параметров для записи полей выгружаемого DBF-файла.
//
// Возвращаемое значение:
//  МассивСтруктурКолонок - Массив - массив структур.
//
&НаСервере
Функция ПолучитьКолонкиDBF()
	
	ТаблицаДляВыгрузки = РеквизитФормыВЗначение("ПриморскийКрай_ТаблицаВыгрузки");
	
	МассивСтруктурКолонок = Новый Массив;
	
	Для Каждого Колонка Из ТаблицаДляВыгрузки.Колонки Цикл
		
		Если Не (Колонка.Имя = "ЛицевойСчет" 
			ИЛИ  Колонка.Имя = "НаселенныйПункт" 
			ИЛИ  Колонка.Имя = "Улица"
			ИЛИ  Колонка.Имя = "Помещение") Тогда
			
			// Элемент массива - данные N-ой строки.
			Структура = Новый Структура;
			Структура.Вставить("Имя", Колонка.Имя);
			
			Если Колонка.ТипЗначения.СодержитТип(Тип("Число")) Тогда
				
				Структура.Вставить("Тип",                     "N");
				//Структура.Вставить("РазрядностьЦелойЧасти",   Колонка.ТипЗначения.КвалификаторыЧисла.Разрядность - Колонка.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти);
				Структура.Вставить("РазрядностьЦелойЧасти",   Колонка.ТипЗначения.КвалификаторыЧисла.Разрядность);
				Структура.Вставить("РазрядностьДробнойЧасти", Колонка.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти);
				
			ИначеЕсли Колонка.ТипЗначения.СодержитТип(Тип("Строка")) Тогда
				
				Структура.Вставить("Тип",   "S");
				Структура.Вставить("Длина", Колонка.ТипЗначения.КвалификаторыСтроки.Длина);
				
			ИначеЕсли Колонка.ТипЗначения.СодержитТип(Тип("Дата")) Тогда
				
				Структура.Вставить("Тип",       "D");
				Структура.Вставить("ЧастиДаты", Колонка.ТипЗначения.КвалификаторыДаты.ЧастиДаты);
				
			ИначеЕсли Колонка.ТипЗначения.СодержитТип(Тип("Булево")) Тогда
				
				Структура.Вставить("Тип",       "L");
				
			КонецЕсли;
			
			МассивСтруктурКолонок.Добавить(Структура);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТаблицаДляВыгрузки, "ПриморскийКрай_ТаблицаВыгрузки");
	
	Возврат МассивСтруктурКолонок;
	
КонецФункции // ПолучитьКолонкиDBF()

// Обработчик завершения процедуры "КомандаВыгрузитьВФайл".
//
&НаКлиенте
Процедура ВыгрузитьЗавершение(СкопированныйФайл, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(СкопированныйФайл) Тогда
		
		АдресФайлаНаСервере = ЗаполнитьИПолучитьФайлаОтвета(УникальныйИдентификатор);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьПолучениеФайлаНаСервере", ЭтаФорма);
		
		ПолучаемыеФайлы = Новый Массив;
		ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ФайлОбмена, АдресФайлаНаСервере));
		
		НачатьПолучениеФайлов(ОписаниеОповещения, ПолучаемыеФайлы, ФайлОбмена, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры // ВыгрузитьЗавершение()

// Обработчик завершения процедуры "ВыгрузитьЗавершение".
//
&НаКлиенте
Процедура ОбработатьПолучениеФайлаНаСервере(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ПолученныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Подменяем исходный файл выгрузки на заполненный.
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Выгрузка сведений о начислениях за " + Формат(Объект.Период, "ДФ='MMMM yyyy'") + " в файл """ + ФайлОбмена + """ завершена!");
	
КонецПроцедуры // ОбработатьПолучениеФайлаНаСервере()

#КонецОбласти // ВыгрузитьДанныеВФайлОтвета

#Область ВспомогательныеПроцедурыИФункции

// Восстановление настроек.
//
&НаСервере
Процедура ВосстановитьНастройки()
	
	СтруктураПараметров = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("ПриморскийКрай_ВыгрузкаВОСЗН", "ПараметрыВыгрузки");
	
	// СтруктураПараметров = Неопределено;
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		//СтруктураПараметров.Свойство("ВидОтапливаемойПлощади", ВидОтапливаемойПлощади);
		
		// Таблица услуг справочника ОСЗН в базе.
		врТаблица = Неопределено;
		Если СтруктураПараметров.Свойство("ПриморскийКрай_УслугиВОСЗН", врТаблица) Тогда
			Если ТипЗнч(врТаблица) = Тип("ТаблицаЗначений") Тогда
				ПриморскийКрай_УслугиВОСЗН.Загрузить(врТаблица);
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ПриморскийКрай_СоответствиеУслуг", врТаблица) Тогда
			Если ТипЗнч(врТаблица) = Тип("ТаблицаЗначений") Тогда
				ПриморскийКрай_СоответствиеУслуг.Загрузить(врТаблица);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьНастройки()

// Сохранение настроек.
//
&НаСервере
Процедура СохранитьНастройки()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПриморскийКрай_УслугиВОСЗН",       ПриморскийКрай_УслугиВОСЗН.Выгрузить());
	СтруктураПараметров.Вставить("ПриморскийКрай_СоответствиеУслуг", ПриморскийКрай_СоответствиеУслуг.Выгрузить());
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("ПриморскийКрай_ВыгрузкаВОСЗН", "ПараметрыВыгрузки", СтруктураПараметров);
	
КонецПроцедуры // СохранитьНастройки()

// Проверяет заполнение реквизитов перед чтением данных из файла обмена.
//
&НаКлиенте
Функция ОбнаруженыОшибкиЗаполненияОбязательныхПолей(НаименованиеОперации)
	
	ОбнаруженыОшибки = Ложь;
	
	Если Объект.Период = Дата(1, 1, 1) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран месяц выгрузки", , "ПериодСтрокой", , ОбнаруженыОшибки);
	КонецЕсли;
	
	Если НЕ ОбнаруженыОшибки И Объект.Организация = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка") Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбрана организация, по которой производится обмен данными", , "Организация", "Объект", ОбнаруженыОшибки);
	КонецЕсли;
	
	Если НаименованиеОперации = "ЧтениеИзФайла" Тогда
		
		Если НЕ ОбнаруженыОшибки И ПустаяСтрока(ФайлОбмена) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран файл обмена", , "ФайлОбмена", , ОбнаруженыОшибки);
		КонецЕсли;
		
	ИначеЕсли НаименованиеОперации = "ЗаполнениеСведенийОНачислениях" Тогда
		
		Если ПриморскийКрай_ТаблицаВыгрузки.Количество() = 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Таблица обработки не заполнена! Перед заполнением необходимо загрузить данные из файла обмена.", , "ФормаЗагрузить", , ОбнаруженыОшибки);
		Иначе
			СтрокиСНеИдентифицированнымиЛьготниками = ПриморскийКрай_ТаблицаВыгрузки.НайтиСтроки(Новый Структура("ЛицевойСчет", ПредопределенноеЗначение("Справочник.КВП_ЛицевыеСчета.ПустаяСсылка")));
			Если СтрокиСНеИдентифицированнымиЛьготниками.Количество() = ПриморскийКрай_ТаблицаВыгрузки.Количество() Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("В таблице обработки во всех строках содержатся сведения о не идентифицированных лицевых счетах. Заполнение данных доступно только для идентифицированных лицевых счетов.", , "ФормаЗагрузить", , ОбнаруженыОшибки);
			КонецЕсли;
		КонецЕсли;
		
		Если ПриморскийКрай_СоответствиеУслуг.Количество() = 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("На форме настроек на странице ""Соответствие услуг"" не установлено ни одного соответствия услуг. Установите соответствия и продолжите заполнение.", ОбнаруженыОшибки);
		КонецЕсли;
		
	ИначеЕсли НаименованиеОперации = "СоздатьФайлОтвета" Тогда
		
		Если ПриморскийКрай_ТаблицаВыгрузки.Количество() = 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Таблица обработки не заполнена! Для выгрузки данных таблица должна быть заполнена.", , "ФормаЗагрузить", , ОбнаруженыОшибки);
		Иначе
			СтрокиСНеИдентифицированнымиЛьготниками = ПриморскийКрай_ТаблицаВыгрузки.НайтиСтроки(Новый Структура("ЛицевойСчет", ПредопределенноеЗначение("Справочник.КВП_ЛицевыеСчета.ПустаяСсылка")));
			Если СтрокиСНеИдентифицированнымиЛьготниками.Количество() = ПриморскийКрай_ТаблицаВыгрузки.Количество() Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("В таблице обработки во всех строках содержатся сведения о не идентифицированных лицевых счетах. Выгрузка данных возможна только в том случае, если в таблице содержится хотя бы одна строка с идентифицированным лицевым счетом.", , "ФормаЗагрузить", , ОбнаруженыОшибки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ОбнаруженыОшибки;
	
КонецФункции // ОбнаруженыОшибкиЗаполненияОбязательныхПолей()

// Обработчик завершения процедуры "КомандаЗагрузитьИзФайла".
//
&НаКлиенте
Процедура ОбработатьРезультатВопросаЗагрузить(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЗагрузитьИзФайлаПродолжение();
		ПриморскийКрай_ТаблицаВыгрузки.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаЗагрузить()

// Процедура - продолжение процедуры - "ОбработатьРезультатВопросаЗагрузить".
//
&НаКлиенте
Процедура ЗагрузитьИзФайлаПродолжение()
	
	ФайлНаДиске = Новый Файл(ФайлОбмена);
	
	ФайлНаДиске.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ПроверкаСуществованияФайлаОбменаЗавершение", ЭтотОбъект));
	
КонецПроцедуры // ЗагрузитьПродолжение()

// Обработчик завершения процедуры "ЗагрузитьИзФайлаПродолжение".
//
&НаКлиенте
Функция ПроверкаСуществованияФайлаОбменаЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	Если Существует Тогда
		// Помещаем загружаемый файл во временное хранилище.
		Оповещение = Новый ОписаниеОповещения("ОбработатьВыборФайлаОбмена", ЭтотОбъект);
		НачатьПомещениеФайла(Оповещение, , ФайлОбмена, Ложь, УникальныйИдентификатор);
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Выбранный файл обмена не существует. Выберите другой файл", , "ФайлОбмена");
	КонецЕсли;
	
КонецФункции // ПроверкаСуществованияФайлаОбменаЗавершение()

// Проверяет существование файла обмена и в случае, если файл обмена существует, то продолжает загрузку данных из файла обмена.
//
&НаКлиенте
Функция ОбработатьВыборФайлаОбмена(Результат, АдресФайлаВХранилище, ВыбранноеИмяФайла, Режим) Экспорт
	
	Если Результат Тогда
		// Загружаем данные из dbf на сервере.
		ЗагрузитьИзФайлаОбменаНаСервере(АдресФайлаВХранилище);
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Загрузка данных из файла обмена завершена!");
	КонецЕсли;
	
КонецФункции // ОбработатьВыборФайлаОбмена()

// Загружает данные из dbf на сервере.
//
&НаСервере
Процедура ЗагрузитьИзФайлаОбменаНаСервере(АдресФайлаВХранилище)
	
	// Запись временных данных во временный файл.
	врДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайлаВХранилище);
	ВременныйФайл = ПолучитьИмяВременногоФайла("DBF");
	
	// Для чтения *.dbf формата урежем имя временного файла.
	ФайлДБФ = Новый Файл(ВременныйФайл);
	СтароеИмяФайла = ФайлДБФ.ИмяБезРасширения + ".DBF";
	НовоеИмяФайла  = Лев(ФайлДБФ.ИмяБезРасширения, 8) + ".DBF";
	ВременныйФайл  = СтрЗаменить(ФайлДБФ.ПолноеИмя, СтароеИмяФайла, НовоеИмяФайла);
	
	врДанныеФайла.Записать(ВременныйФайл);
	
	// Загрузка.
	ФайлДБФ = Новый XBase;
	ФайлДБФ.Кодировка = КодировкаXBase.OEM;
	ФайлДБФ.ОткрытьФайл(ВременныйФайл, , Истина);
	
	// Проверяем файл загрузки на существование. Добавляем поля таблицы выгрузки.
	Если ФайлДБФ.Открыта() Тогда
		Если НЕ ПроверитьНаКорректностьФайлОбмена(ФайлДБФ) Тогда
			Возврат;
			//ДобавитьРеквизитыВТаблицуЗагрузкиНаСервере(ФайлДБФ);
		КонецЕсли;
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не удалось прочитать указанный файл обмена!", , "ФайлОбмена", ,);
		ФайлДБФ.ЗакрытьФайл();
		Возврат;
	КонецЕсли;
	
	// Нужна ТаблицаЗначений для перебора колонок.
	ТаблицаДляЗагрузки = РеквизитФормыВЗначение("ПриморскийКрай_ТаблицаВыгрузки");
	
	// Заполнение полей ТаблицаДанныхИзФайла согласно DBF-файлу.
	Пока НЕ ФайлДБФ.ВКонце() Цикл
		
		НоваяЗапись = ТаблицаДляЗагрузки.Добавить();
		
		Для Каждого Колонка Из ТаблицаДляЗагрузки.Колонки Цикл
			Попытка
				НоваяЗапись[Колонка.Имя] = ?(Строка(Колонка.ТипЗначения) = "Строка", СокрЛП(ФайлДБФ[Колонка.Имя]), ФайлДБФ[Колонка.Имя]);
			Исключение
			КонецПопытки;
			
		КонецЦикла;
		
		ФайлДБФ.Следующая();
		
	КонецЦикла;
	
	ФайлДБФ.ЗакрытьФайл();
	
	ИсключитьАдресныеСокращения(ТаблицаДляЗагрузки);
	
	ПроизвестиИдентификациюЛицевыхСчетов(ТаблицаДляЗагрузки, Объект.Период, Объект.Организация);
	
	// Помещаем заполненную таблицу значений в соответствующий реквизит формы.
	ЗначениеВРеквизитФормы(ТаблицаДляЗагрузки, "ПриморскийКрай_ТаблицаВыгрузки");
	
	// Очищает временное хранилище.
	УдалитьИзВременногоХранилища(АдресФайлаВХранилище);
	
КонецПроцедуры // ЗагрузитьИзФайлаОбменаНаСервере()

// Проверяет структуру файла обмена на корректность.
//
&НаСервереБезКонтекста
Функция ПроверитьНаКорректностьФайлОбмена(ФайлДБФ)
	
	ФайлКорректный = Ложь;
	
	Если ФайлДБФ.Поля.Количество() = 21
	 И НЕ ФайлДБФ.Поля.Найти("LS") = Неопределено
	 И НЕ ФайлДБФ.Поля.Найти("NP") = Неопределено
	 И НЕ ФайлДБФ.Поля.Найти("UL") = Неопределено
	 И НЕ ФайлДБФ.Поля.Найти("DOM") = Неопределено
	 И НЕ ФайлДБФ.Поля.Найти("KOR") = Неопределено
	 И НЕ ФайлДБФ.Поля.Найти("KV") = Неопределено
	 И НЕ ФайлДБФ.Поля.Найти("KOM") = Неопределено
	 И НЕ ФайлДБФ.Поля.Найти("GKU") = Неопределено
	 И НЕ ФайлДБФ.Поля.Найти("PL") = Неопределено
	 И НЕ ФайлДБФ.Поля.Найти("KOLP") = Неопределено
	 И НЕ ФайлДБФ.Поля.Найти("NORM") = Неопределено
	 И НЕ ФайлДБФ.Поля.Найти("FAKTP") = Неопределено
	 И НЕ ФайлДБФ.Поля.Найти("FAKTPER") = Неопределено
	 И НЕ ФайлДБФ.Поля.Найти("TARIF") = Неопределено
	 И НЕ ФайлДБФ.Поля.Найти("DATEP") = Неопределено
	 И НЕ ФайлДБФ.Поля.Найти("PRIZN") = Неопределено
	 И НЕ ФайлДБФ.Поля.Найти("PRIM") = Неопределено
	 И НЕ ФайлДБФ.Поля.Найти("PKU") = Неопределено
	 И НЕ ФайлДБФ.Поля.Найти("MESD") = Неопределено
	 И НЕ ФайлДБФ.Поля.Найти("RESTRDOLG") = Неопределено
	 И НЕ ФайлДБФ.Поля.Найти("KODTEROTDE") = Неопределено Тогда
		ФайлКорректный = Истина;
	КонецЕсли;
	
	Если НЕ ФайлКорректный Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Структура файла обмена отличается от той, что содержится в справочной информации к выгрузке! Выберите корректный файл.", , "ФайлОбмена", ,);
	КонецЕсли;
	
	Возврат ФайлКорректный;
	
КонецФункции // ПроверитьНаКорректностьФайлОбмена()

// Функция сокращает название города или улицы: убирает сокращения,
// определяющие тип данного элемента адреса: "г.", "ул." и так далее.
//
&НаСервереБезКонтекста
Процедура ИсключитьАдресныеСокращения(ТаблицаДляЗагрузки)
	
	МассивСокращенийНасПунктов = Новый Массив();
	МассивСокращенийНасПунктов.Добавить("г");
	МассивСокращенийНасПунктов.Добавить("г.");
	МассивСокращенийНасПунктов.Добавить("п");
	МассивСокращенийНасПунктов.Добавить("п.");
	МассивСокращенийНасПунктов.Добавить("с");
	МассивСокращенийНасПунктов.Добавить("с.");
	МассивСокращенийНасПунктов.Добавить("д");
	МассивСокращенийНасПунктов.Добавить("д.");
	МассивСокращенийНасПунктов.Добавить("дп");
	МассивСокращенийНасПунктов.Добавить("нп");
	МассивСокращенийНасПунктов.Добавить("рп");
	МассивСокращенийНасПунктов.Добавить("снт");
	МассивСокращенийНасПунктов.Добавить("ст");
	
	МассивСокращенийУлиц = Новый Массив();
	МассивСокращенийУлиц.Добавить("ул");
	МассивСокращенийУлиц.Добавить("пл");
	МассивСокращенийУлиц.Добавить("пер");
	МассивСокращенийУлиц.Добавить("переулок");
	МассивСокращенийУлиц.Добавить("снт");
	МассивСокращенийУлиц.Добавить("проезд");
	МассивСокращенийУлиц.Добавить("б-р");
	МассивСокращенийУлиц.Добавить("туп");
	МассивСокращенийУлиц.Добавить("п");
	МассивСокращенийУлиц.Добавить("ш");
	МассивСокращенийУлиц.Добавить("пр-кт");
	МассивСокращенийУлиц.Добавить("тракт");
	МассивСокращенийУлиц.Добавить("сквер");
	МассивСокращенийУлиц.Добавить("наб");
	МассивСокращенийУлиц.Добавить("км");
	МассивСокращенийУлиц.Добавить("ж/д_ст");
	МассивСокращенийУлиц.Добавить("сад");
	МассивСокращенийУлиц.Добавить("парк");
	МассивСокращенийУлиц.Добавить("кв-л");
	МассивСокращенийУлиц.Добавить("аллея");
	
	Для Каждого ТекСтрока ИЗ ТаблицаДляЗагрузки Цикл
		
		ТекСтрока.НаселенныйПункт = НормализацияПолейАдресаОбласти(НРег(ТекСтрока.NP), МассивСокращенийНасПунктов);
		ТекСтрока.Улица           = НормализацияПолейАдресаОбласти(НРег(ТекСтрока.UL), МассивСокращенийУлиц);
		
	КонецЦикла;
	
КонецПроцедуры // ИсключитьАдресныеСокращения()

// Функция сокращает название города или улицы: убирает сокращения,
// определяющие тип данного элемента адреса: "г.", "ул." и так далее.
//
// Параметры:
//  Ресурс       - Строка - элемент адреса
//
// Возвращаемое значение:
//  Строка - элемент адреса в сокращенном виде
//
&НаСервереБезКонтекста
Функция НормализацияПолейАдресаОбласти(Ресурс, Массив)
	
	Найден = Истина;
	
	Для Каждого Элемент Из Массив Цикл
		
		Если Прав(СокрЛП(Ресурс), СтрДлина(Элемент)) = Элемент Тогда
			ПредСимвол = Сред(СокрЛП(Ресурс), СтрДлина(СокрЛП(Ресурс)) - СтрДлина(Элемент), 1);
			
			Если ПредСимвол = " " Тогда
				Возврат СокрЛП(Лев(СокрЛП(Ресурс), СтрДлина(СокрЛП(Ресурс)) - СтрДлина(Элемент)));
			ИначеЕсли ПредСимвол = "." Тогда
				Возврат СокрЛП(Лев(СокрЛП(Ресурс), СтрДлина(СокрЛП(Ресурс)) - СтрДлина(Элемент) - 1));
			КонецЕсли;
		ИначеЕсли Лев(СокрЛП(Ресурс), СтрДлина(Элемент)) = Элемент Тогда
			СледСимвол = Сред(СокрЛП(Ресурс), СтрДлина(Элемент) + 1, 1);
			
			Если СледСимвол = " " Тогда
				Возврат СокрЛП(Сред(СокрЛП(Ресурс), СтрДлина(Элемент) + 1));
			ИначеЕсли СледСимвол = "." Тогда
				Возврат СокрЛП(Сред(СокрЛП(Ресурс), СтрДлина(Элемент) + 2));
			КонецЕсли;
		Иначе
			
			Найден = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Найден = Ложь Тогда
		Возврат Ресурс;
	КонецЕсли;
	
КонецФункции // НормализацияПолейАдресаОбласти()

// Идентифицирует лицевые счета из файла обмена с лицевыми счетами из информационной базы.
//
&НаСервереБезКонтекста
Процедура ПроизвестиИдентификациюЛицевыхСчетов(ТаблицаДляЗагрузки, Период, Организация)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДатаНач",            НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ДатаКон",            КонецМесяца(Период));
	Запрос.УстановитьПараметр("ТаблицаДляЗагрузки", ТаблицаДляЗагрузки);
	Запрос.УстановитьПараметр("Организация",        Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДляЗагрузки.LS КАК LS,
	|	ТаблицаДляЗагрузки.NP КАК NP,
	|	ТаблицаДляЗагрузки.UL КАК UL,
	|	ТаблицаДляЗагрузки.DOM КАК DOM,
	|	ТаблицаДляЗагрузки.KOR КАК KOR,
	|	ТаблицаДляЗагрузки.KV КАК KV,
	|	ТаблицаДляЗагрузки.KOM КАК KOM,
	|	ТаблицаДляЗагрузки.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаДляЗагрузки.НаселенныйПункт КАК НаселенныйПункт,
	|	ТаблицаДляЗагрузки.Улица КАК Улица
	|ПОМЕСТИТЬ втДанныеИзФайла
	|ИЗ
	|	&ТаблицаДляЗагрузки КАК ТаблицаДляЗагрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ втЛицевыеСчетаОбслуживаемыеВыбраннойОрганизацией
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(&ДатаКон, Организация = &Организация) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Наименование КАК ЛицевойСчетСтрокой,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект КАК Помещение,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Владелец КАК Здание,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Код КАК НомерКвартиры,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Суффикс КАК СуффиксКвартиры
	|ПОМЕСТИТЬ втДействующиеЛицевыеСчета
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&ДатаНач,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втЛицевыеСчетаОбслуживаемыеВыбраннойОрганизацией.ЛицевойСчет КАК ЛицевойСчет
	|				ИЗ
	|					втЛицевыеСчетаОбслуживаемыеВыбраннойОрганизацией КАК втЛицевыеСчетаОбслуживаемыеВыбраннойОрганизацией)) КАК КВП_ЛицевыеСчетаСрезПоследних
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КВП_ЛицевыеСчета.ЛицевойСчет,
	|	КВП_ЛицевыеСчета.ЛицевойСчет.Наименование,
	|	КВП_ЛицевыеСчета.Объект,
	|	КВП_ЛицевыеСчета.Объект.Владелец,
	|	КВП_ЛицевыеСчета.Объект.Код,
	|	КВП_ЛицевыеСчета.Объект.Суффикс
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	КВП_ЛицевыеСчета.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И КВП_ЛицевыеСчета.ЛицевойСчет В
	|			(ВЫБРАТЬ
	|				втЛицевыеСчетаОбслуживаемыеВыбраннойОрганизацией.ЛицевойСчет КАК ЛицевойСчет
	|			ИЗ
	|				втЛицевыеСчетаОбслуживаемыеВыбраннойОрганизацией КАК втЛицевыеСчетаОбслуживаемыеВыбраннойОрганизацией)
	|	И КВП_ЛицевыеСчета.Действует";
	
	Запрос.Выполнить();
	
	ЗапросПоАдресам = Новый Запрос;
	ЗапросПоАдресам.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	
	ЗапросПоАдресам.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втДействующиеЛицевыеСчета.Здание КАК Объект
	|ИЗ
	|	втДействующиеЛицевыеСчета КАК втДействующиеЛицевыеСчета";
	
	МассивОбъектов = ЗапросПоАдресам.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	// Помещает в менеджер временных таблиц запроса контактной информации "втКонтактнаяИнформация".
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов, Ложь);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	втДействующиеЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет,
	|	втДействующиеЛицевыеСчета.ЛицевойСчетСтрокой КАК ЛицевойСчетСтрокой,
	|	втДействующиеЛицевыеСчета.Помещение КАК Помещение,
	|	втДействующиеЛицевыеСчета.НомерКвартиры КАК НомерКвартиры,
	|	втДействующиеЛицевыеСчета.СуффиксКвартиры КАК СуффиксКвартиры,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(15)) КАК КвартираСтрокой,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Город, """") КАК Город,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втКонтактнаяИнформация.Город, """") <> """"
	|			ТОГДА втКонтактнаяИнформация.Город
	|		КОГДА ЕСТЬNULL(втКонтактнаяИнформация.НаселенныйПункт, """") <> """"
	|			ТОГДА втКонтактнаяИнформация.НаселенныйПункт
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК НаселенныйПункт,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Улица, """") КАК Улица,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Дом, """") КАК Дом,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Корпус, """") КАК Корпус
	|ИЗ
	|	втДействующиеЛицевыеСчета КАК втДействующиеЛицевыеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК втКонтактнаяИнформация
	|		ПО втДействующиеЛицевыеСчета.Здание = втКонтактнаяИнформация.Объект";
	
	ТаблицаЛСсАдресамиИзБазы = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаНач",                  НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ДатаКон",                  КонецМесяца(Период));
	Запрос.УстановитьПараметр("ТаблицаДляЗагрузки",       ТаблицаДляЗагрузки);
	Запрос.УстановитьПараметр("ТаблицаЛСсАдресамиИзБазы", ТаблицаЛСсАдресамиИзБазы);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДляЗагрузки.LS КАК LS,
	|	ТаблицаДляЗагрузки.NP КАК NP,
	|	ТаблицаДляЗагрузки.UL КАК UL,
	|	ТаблицаДляЗагрузки.DOM КАК DOM,
	|	ТаблицаДляЗагрузки.KOR КАК KOR,
	|	ТаблицаДляЗагрузки.KV КАК KV,
	|	ТаблицаДляЗагрузки.KOM КАК KOM,
	|	ТаблицаДляЗагрузки.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаДляЗагрузки.НаселенныйПункт КАК НаселенныйПункт,
	|	ТаблицаДляЗагрузки.Улица КАК Улица
	|ПОМЕСТИТЬ втДанныеИзФайла
	|ИЗ
	|	&ТаблицаДляЗагрузки КАК ТаблицаДляЗагрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЛСсАдресамиИзБазы.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаЛСсАдресамиИзБазы.ЛицевойСчетСтрокой КАК ЛицевойСчетСтрокой,
	|	ТаблицаЛСсАдресамиИзБазы.Помещение КАК Помещение,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаЛСсАдресамиИзБазы.Город = """"
	|			ТОГДА ТаблицаЛСсАдресамиИзБазы.Город
	|		ИНАЧЕ ТаблицаЛСсАдресамиИзБазы.НаселенныйПункт
	|	КОНЕЦ КАК НаселенныйПункт,
	|	ТаблицаЛСсАдресамиИзБазы.Улица КАК Улица,
	|	ТаблицаЛСсАдресамиИзБазы.Дом КАК Дом,
	|	ТаблицаЛСсАдресамиИзБазы.Корпус КАК Корпус,
	|	ТаблицаЛСсАдресамиИзБазы.КвартираСтрокой КАК КвартираСтрокой
	|ПОМЕСТИТЬ втЛСИзБазы
	|ИЗ
	|	&ТаблицаЛСсАдресамиИзБазы КАК ТаблицаЛСсАдресамиИзБазы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеИзФайла.LS КАК LS,
	|	втДанныеИзФайла.NP КАК NP,
	|	втДанныеИзФайла.UL КАК UL,
	|	втДанныеИзФайла.DOM КАК DOM,
	|	втДанныеИзФайла.KOR КАК KOR,
	|	втДанныеИзФайла.KV КАК KV,
	|	втДанныеИзФайла.KOM КАК KOM,
	|	втЛСИзБазы.ЛицевойСчет КАК ЛицевойСчет,
	|	втЛСИзБазы.Помещение КАК Помещение
	|ИЗ
	|	втДанныеИзФайла КАК втДанныеИзФайла
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЛСИзБазы КАК втЛСИзБазы
	|		ПО втДанныеИзФайла.НаселенныйПункт = втЛСИзБазы.НаселенныйПункт
	|			И втДанныеИзФайла.Улица = втЛСИзБазы.Улица
	|			И втДанныеИзФайла.DOM = втЛСИзБазы.Дом
	|			И втДанныеИзФайла.KOR = втЛСИзБазы.Корпус
	|			И втДанныеИзФайла.KV = втЛСИзБазы.КвартираСтрокой
	|			И втДанныеИзФайла.LS = втЛСИзБазы.ЛицевойСчетСтрокой";
	
	ВыборкаИдентифицированныхЛС = Запрос.Выполнить().Выбрать();
	
	ОтборСтрок = Новый Структура("LS, NP, UL, DOM, KOR, KV");
	
	Пока ВыборкаИдентифицированныхЛС.Следующий() Цикл
		
		ОтборСтрок.LS  = ВыборкаИдентифицированныхЛС.LS;
		ОтборСтрок.NP  = ВыборкаИдентифицированныхЛС.NP;
		ОтборСтрок.UL  = ВыборкаИдентифицированныхЛС.UL;
		ОтборСтрок.DOM = ВыборкаИдентифицированныхЛС.DOM;
		ОтборСтрок.KOR = ВыборкаИдентифицированныхЛС.KOR;
		ОтборСтрок.KV  = ВыборкаИдентифицированныхЛС.KV;
		
		НайденныеСтроки = ТаблицаДляЗагрузки.НайтиСтроки(ОтборСтрок);
		Для каждого ТекСтрока Из НайденныеСтроки Цикл
			ТекСтрока.ЛицевойСчет = ВыборкаИдентифицированныхЛС.ЛицевойСчет;
			ТекСтрока.Помещение   = ВыборкаИдентифицированныхЛС.Помещение;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ПроизвестиИдентификациюЛицевыхСчетов()

// Подготавливает для передачи на форму настроек данных для редактирования.
//
&НаСервере
Функция ПолучитьАдресХранилищаНастроек()
	
	Настройки = Новый Структура;
	Настройки.Вставить("ФайлОбмена",                       ФайлОбмена);
	Настройки.Вставить("ПриморскийКрай_УслугиВОСЗН",       ПриморскийКрай_УслугиВОСЗН.Выгрузить());
	Настройки.Вставить("ПриморскийКрай_СоответствиеУслуг", ПриморскийКрай_СоответствиеУслуг.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(Настройки, Новый УникальныйИдентификатор);
	
КонецФункции // ПолучитьАдресХранилищаНастроек()

// Обработчик закрытия окна формы настройки.
//
&НаКлиенте
Процедура ОбновитьНастройки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		//ПолучитьНастройкиИзХранилища(Результат);
		ОбновитьНастройкиНаСервере(Результат);
	КонецЕсли;
	
КонецПроцедуры // ОбновитьНастройки()

// Обновляет настройки, которые хранятся в реквизитах основной формы обработки, на основании настроек,
// которые были установлены на форме настроек.
//
&НаСервере
Процедура ОбновитьНастройкиНаСервере(Адрес)
	
	СтруктураНастроек = ПолучитьИзВременногоХранилища(Адрес);
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		
		Если СтруктураНастроек.Свойство("ПриморскийКрай_УслугиВОСЗН") Тогда
			ПриморскийКрай_УслугиВОСЗН.Загрузить(СтруктураНастроек.ПриморскийКрай_УслугиВОСЗН);
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ПриморскийКрай_СоответствиеУслуг") Тогда
			ПриморскийКрай_СоответствиеУслуг.Загрузить(СтруктураНастроек.ПриморскийКрай_СоответствиеУслуг);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьНастройкиНаСервере()

#КонецОбласти // ВспомогательныеПроцедурыИФункции