
&НаКлиенте
Перем ПредыдущийКодУслуги; // Используется при перевыборе кода услуги в ОСЗН.
&НаКлиенте
Перем ПредыдущаяУслуга;    // Используется при перевыборе услуги в базе.
&НаКлиенте
Перем ПризнакУдаления;     // Используется при удалении пустых строк. Истина - пустая строка удалена.

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Получаем настройки из хранилища.
	Если Параметры.Свойство("АдресНастроекВХранилище") И Не Параметры.АдресНастроекВХранилище = Неопределено Тогда
		
		СтруктураНастроек = ПолучитьИзВременногоХранилища(Параметры.АдресНастроекВХранилище);
		Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
			
			СтруктураНастроек.Свойство("ВыводРеквизитаЛицевогоСчета",           Объект.ВыводРеквизитаЛицевогоСчета);
			СтруктураНастроек.Свойство("НеУчитыватьВНаименованииЛСПодстрокуЛС", НеУчитыватьВНаименованииЛСПодстрокуЛС);
			
			врТаблицаНастроек = Новый ТаблицаЗначений;
			
			СтруктураНастроек.Свойство("СаратовскаяОбласть_ТаблицаНастроек", врТаблицаНастроек);
			Если ТипЗнч(врТаблицаНастроек) = Тип("ТаблицаЗначений") Тогда
				Объект.СаратовскаяОбласть_ТаблицаНастроек.Загрузить(врТаблицаНастроек);
			КонецЕсли;
			
			врТаблицаУслугВБазе = Новый ТаблицаЗначений;
			
			СтруктураНастроек.Свойство("СаратовскаяОбласть_УслугиВБазе", врТаблицаУслугВБазе);
			Если ТипЗнч(врТаблицаУслугВБазе) = Тип("ТаблицаЗначений") Тогда
				Объект.СаратовскаяОбласть_УслугиВБазе.Загрузить(врТаблицаУслугВБазе);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Процедура-обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Проверяем наличие установленных соответствий.
	Для Каждого Строка Из Объект.СаратовскаяОбласть_ТаблицаНастроек Цикл
		
		Если Строка.Использовать Тогда
			Отбор = Новый Структура;
			Отбор.Вставить("КодУслуги", Строка.КодУслуги);
			
			СтрокиИспользовать = Объект.СаратовскаяОбласть_УслугиВБазе.НайтиСтроки(Отбор);
			
			Если СтрокиИспользовать.Количество() = 0 Тогда
				Отказ = Истина;
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В используемой строке №" + Строка.НомерСтроки + " не выбрана ни одна услуга в базе!");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПередЗакрытием()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

////////////////////
// Заполнить по умолчанию

&НаКлиенте
// Обработчик команды "КомандаЗаполнитьПоУмолчанию".
//
Процедура КомандаЗаполнитьПоУмолчанию(Команда)
	
	Если Объект.СаратовскаяОбласть_ТаблицаНастроек.Количество() > 0 Тогда
		
		Оповещение   = Новый ОписаниеОповещения("КомандаЗаполнитьПоУмолчаниюЗавершение", ЭтотОбъект, );
		ТекстВопроса = "Перед заполнением таблица будет очищена. Заполнить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ЗаполнитьУслугиПоУмолчанию();
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьПоУмолчанию()

&НаКлиенте
// Обработчик результата опроса команды "КомандаЗагрузитьИзФайла".
//
Процедура КомандаЗаполнитьПоУмолчаниюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Объект.СаратовскаяОбласть_ТаблицаНастроек.Очистить();
		ЗаполнитьУслугиПоУмолчанию();
		
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьПоУмолчаниюЗавершение()

&НаСервере
// Заполняет табличную часть услугами по умолчанию из макета.
//
Процедура ЗаполнитьУслугиПоУмолчанию()
	
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("СаратовскаяОбласть_Макет");
	
	ОбластьУслуг = Макет.ПолучитьОбласть("Услуги");
	Для НомерСтроки = 1 По ОбластьУслуг.ВысотаТаблицы Цикл
		
		НоваяСтрока              = Объект.СаратовскаяОбласть_ТаблицаНастроек.Добавить();
		НоваяСтрока.Использовать = Ложь;
		
		НоваяСтрока.УслугаВОСЗН  = ОбластьУслуг.Область(НомерСтроки, 1).Текст;
		НоваяСтрока.КодУслуги    = ОбластьУслуг.Область(НомерСтроки, 2).Текст;
		
		Если Найти(НоваяСтрока.УслугаВОСЗН, "(индивидуальное)") <> 0 Тогда
			НоваяСтрока.СпособНачислений = "Индивидуально";
		ИначеЕсли Найти(НоваяСтрока.УслугаВОСЗН, "(ОДН)") <> 0 Тогда
			НоваяСтрока.СпособНачислений = "ОДН";
		Иначе
			НоваяСтрока.СпособНачислений = "Прочее";
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьУслугиПоУмолчанию()

////////////////////
// Установить/снять флажки

&НаКлиенте
// Обработчик команды "КомандаУстановитьФлажки".
Процедура КомандаУстановитьФлажки(Команда)
	
	Для Каждого Строка Из Объект.СаратовскаяОбласть_ТаблицаНастроек Цикл
		Строка.Использовать = Истина;
	КонецЦикла;
	
	Для Каждого Строка Из Объект.СаратовскаяОбласть_УслугиВБазе Цикл
		Строка.Использовать = Истина;
	КонецЦикла;
	
КонецПроцедуры // КомандаУстановитьФлажки()

&НаКлиенте
// Обработчик команды "КомандаСнятьФлажки".
Процедура КомандаСнятьФлажки(Команда)
	
	Для Каждого Строка Из Объект.СаратовскаяОбласть_ТаблицаНастроек Цикл
		Строка.Использовать = Ложь;
	КонецЦикла;
	
	Для Каждого Строка Из Объект.СаратовскаяОбласть_УслугиВБазе Цикл
		Строка.Использовать = Ложь;
	КонецЦикла;
	
КонецПроцедуры // КомандаСнятьФлажки()

////////////////////
// Сохранить и закрыть

&НаКлиенте
// Обработчик команды "КомандаСохранить".
Процедура КомандаСохранить(Команда)
	
	АдресНастроекВХранилище = ПоместитьНастройкиВХранилище();
	Закрыть(АдресНастроекВХранилище);
	
КонецПроцедуры // КомандаСохранить()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// РАБОТА С ВРЕМЕННЫМ ХРАНИЛИЩЕМ

#Область РаботаСВременнымХранилищем

&НаСервере
// Помещает таблицу настроек во временное хранилище.
//
// Возвращаемое значение:
//  Строка - адрес настроек во временном хранилище.
//
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СаратовскаяОбласть_ТаблицаНастроек",    Объект.СаратовскаяОбласть_ТаблицаНастроек.Выгрузить());
	СтруктураПараметров.Вставить("СаратовскаяОбласть_УслугиВБазе",        Объект.СаратовскаяОбласть_УслугиВБазе.Выгрузить());
	СтруктураПараметров.Вставить("ВыводРеквизитаЛицевогоСчета",           Объект.ВыводРеквизитаЛицевогоСчета);
	СтруктураПараметров.Вставить("НеУчитыватьВНаименованииЛСПодстрокуЛС", НеУчитыватьВНаименованииЛСПодстрокуЛС);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураПараметров, Новый УникальныйИдентификатор);
	
КонецФункции // ПоместитьНастройкиВХранилище()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиентеНаСервереБезКонтекста
// Управляет видимостью элементов формы.
//
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.ГруппаНаименованиеЛС.Видимость = ?(Объект.ВыводРеквизитаЛицевогоСчета = 1, Истина, Ложь);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода "ВыводРеквизитаЛицевогоСчета".
//
Процедура ВыводРеквизитаЛицевогоСчетаПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "УСЛУГИ В ОСЗН"

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" таблицы "Услуги в ОСЗН".
//
Процедура ТаблицаНастроекПриАктивизацииСтроки(Элемент)
	
	// При активации строки УслугаВОСЗН, загружаем соответствия в УслугаВБазе.
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		ТП_ЖКУ_ВБазе.Очистить();
		
		Отбор = Новый Структура;
		Отбор.Вставить("КодУслуги", Элемент.ТекущиеДанные.КодУслуги);
		
		НайденныеСтроки = Объект.СаратовскаяОбласть_УслугиВБазе.НайтиСтроки(Отбор);
		
		Для Каждого ТекСтрока из НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(ТП_ЖКУ_ВБазе.Добавить(), ТекСтрока);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ТаблицаНастроекПриАктивизацииСтроки()

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" таблицы "Услуги в ОСЗН".
//
Процедура ТаблицаНастроекПередУдалением(Элемент, Отказ)
	
	// Удаление текущей строки соответствия из правой колонки.
	СтрокиУдаления = Объект.СаратовскаяОбласть_УслугиВБазе.НайтиСтроки(Новый Структура("КодУслуги", Элемент.ТекущиеДанные.КодУслуги));
	Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
		Объект.СаратовскаяОбласть_УслугиВБазе.Удалить(СтрокаУдаления);
	КонецЦикла;
	
КонецПроцедуры // ТаблицаНастроекПередУдалением()

&НаКлиенте
// Процедура - обработчик события "ПриНачалеРедактирования" таблицы "Услуги в ОСЗН".
//
Процедура ТаблицаНастроекПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Не НоваяСтрока Тогда
		ПредыдущийКодУслуги = Элемент.ТекущиеДанные.КодУслуги;
	КонецЕсли;
	
КонецПроцедуры // ТаблицаНастроекПриНачалеРедактирования()

&НаКлиенте
// Процедура-обработчик события "ПриИзменении" поля флажка "Использовать" табличного поля "ТаблицаНачислений".
//
Процедура ТаблицаНастроекИспользоватьПриИзменении(Элемент)
	
	НайденныеСтроки = Объект.СаратовскаяОбласть_УслугиВБазе.НайтиСтроки(Новый Структура("КодУслуги", Элемент.Родитель.ТекущиеДанные.КодУслуги));
	Для Каждого ТекСтрока из НайденныеСтроки Цикл
		ТекСтрока.Использовать = Элемент.Родитель.ТекущиеДанные.Использовать;
	КонецЦикла;
	
КонецПроцедуры // ТаблицаНастроекИспользоватьПриИзменении()

&НаКлиенте
// Процедура-обработчик события "ПриИзменении" поля выбора "СпособНачислений" табличного поля "ТаблицаНачислений".
//
Процедура ТаблицаНастроекСпособНачисленийПриИзменении(Элемент)
	
	НайденныеСтроки = Объект.СаратовскаяОбласть_УслугиВБазе.НайтиСтроки(Новый Структура("КодУслуги", Элемент.Родитель.ТекущиеДанные.КодУслуги));
	Для Каждого ТекСтрока из НайденныеСтроки Цикл
		ТекСтрока.СпособНачислений = Элемент.Родитель.ТекущиеДанные.СпособНачислений;
	КонецЦикла;
	
КонецПроцедуры // ТаблицаНастроекСпособНачисленийПриИзменении()

&НаКлиенте
// Процедура-обработчик события "ПриИзменении" поля ввода "КодУслуги" табличного поля "ТаблицаНачислений".
//
Процедура ТаблицаНастроекКодУслугиПриИзменении(Элемент)
	
	НайденныеСтроки = Объект.СаратовскаяОбласть_ТаблицаНастроек.НайтиСтроки(Новый Структура("КодУслуги", Элемент.Родитель.ТекущиеДанные.КодУслуги));
	Если НЕ НайденныеСтроки.Количество() > 1 Тогда
		
		НайденныеСтроки = Объект.СаратовскаяОбласть_УслугиВБазе.НайтиСтроки(Новый Структура("КодУслуги", ПредыдущийКодУслуги));
		Для Каждого ТекСтрока из НайденныеСтроки Цикл
			ТекСтрока.КодУслуги = Элемент.Родитель.ТекущиеДанные.КодУслуги;
		КонецЦикла;
		
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Введен не уникальный код!");
		Элемент.Родитель.ТекущиеДанные.КодУслуги = ПредыдущийКодУслуги;
	КонецЕсли;
	
КонецПроцедуры // ТаблицаНастроекКодУслугиПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "УСЛУГИ В БАЗЕ"

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" таблицы "Услуги в Базе". 
//
Процедура ТП_ЖКУ_ВБазеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Запрещаем любое копирование строк (в т.ч. и по F9).
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ТП_ЖКУ_ВБазеПередНачаломДобавления()

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" таблицы "Услуги в Базе".
//
Процедура ТП_ЖКУ_ВБазеПередУдалением(Элемент, Отказ)
	
	Если ПризнакУдаления Тогда
		Отказ = Истина;
		ПризнакУдаления = Ложь;
	Иначе
		Отбор = Новый Структура("УслугаВБазе, КодУслуги", Элемент.ТекущиеДанные.УслугаВБазе, Элементы.ТаблицаНастроек.ТекущиеДанные.КодУслуги);
		СтрокиУдаления = Объект.СаратовскаяОбласть_УслугиВБазе.НайтиСтроки(Отбор);
		Для Каждого СтрокаУдаления Из СтрокиУдаления Цикл
			Объект.СаратовскаяОбласть_УслугиВБазе.Удалить(СтрокаУдаления);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ТП_ЖКУ_ВБазеПередУдалением()

&НаКлиенте
// Процедура - обработчик события "ПриНачалеРедактирования" таблицы "Услуги в Базе".
//
Процедура ТП_ЖКУ_ВБазеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Не НоваяСтрока Тогда
		ПредыдущаяУслуга = Элемент.ТекущиеДанные.УслугаВБазе;
	КонецЕсли;
	
КонецПроцедуры // ТП_ЖКУ_ВБазеПриНачалеРедактирования()

&НаКлиенте
// Процедура - обработчик события "ПередОкончаниемРедактирования" таблицы "УслугаВБазе".
//
Процедура ТП_ЖКУ_ВБазеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	// Если изменяем выбранное значение, то удаляем предыдущую запись.
	Если Элемент.ТекущиеДанные.УслугаВБазе.Пустая() Тогда
		
		// Если услуга не была выбрана - удаляем пустую строчку.
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Добавление незаполненных полей недопустимо!");
		ПризнакУдаления = Истина;
		ТП_ЖКУ_ВБазе.Удалить(Элемент.ТекущиеДанные);
		
		// Если данная строка не новая, а редактируемая.
		Если ЗначениеЗаполнено(ПредыдущаяУслуга) Тогда
			ПризнакУдаления = Истина;
			
			СтрокиУдаления = Объект.СаратовскаяОбласть_УслугиВБазе.НайтиСтроки(Новый Структура("УслугаВБазе, КодУслуги", ПредыдущаяУслуга, Элементы.ТаблицаНастроек.ТекущиеДанные.КодУслуги));
			Для Каждого СтрокаУдаления Из СтрокиУдаления Цикл
				Объект.СаратовскаяОбласть_УслугиВБазе.Удалить(СтрокаУдаления);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ТП_ЖКУ_ВБазеПередОкончаниемРедактирования()

&НаКлиенте
// Процедура - обработчик события "ПриОкончанииРедактирования" таблицы "Услуги в Базе".
//
Процедура ТП_ЖКУ_ВБазеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		
		УслугаВБазе = Элемент.ТекущиеДанные.УслугаВБазе;
		
		// Удаляем старую запись при перевыборе.
		Если НоваяСтрока Тогда
			СтрокаСоответствия             = Объект.СаратовскаяОбласть_УслугиВБазе.Добавить();
			СтрокаСоответствия.УслугаВБазе = УслугаВБазе;
			ЗаполнитьЗначенияСвойств(СтрокаСоответствия, Элементы.ТаблицаНастроек.ТекущиеДанные);
		Иначе
			Если НЕ ПредыдущаяУслуга = УслугаВБазе Тогда
				Отбор = Новый Структура("УслугаВБазе, КодУслуги", ПредыдущаяУслуга, Элементы.ТаблицаНастроек.ТекущиеДанные.КодУслуги);
				НайденнаяСтрока = Объект.СаратовскаяОбласть_УслугиВБазе.НайтиСтроки(Отбор);
				Если НайденнаяСтрока.Количество() = 1 Тогда
					НайденнаяСтрока[0].УслугаВБазе = УслугаВБазе;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ТП_ЖКУ_ВБазеПриОкончанииРедактирования()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "УслугаВБазе" таблицы "Услуги в Базе".
//
Процедура ТП_ЖКУ_ВБазеУслугаВБазеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Список уже выбранных услуг по данной услуге в ОСЗН.
	СписокВыбранныхУслуг = Новый СписокЗначений;
	СтрокиВыбранныхУслуг = Объект.СаратовскаяОбласть_УслугиВБазе.НайтиСтроки(Новый Структура("КодУслуги", Элементы.ТаблицаНастроек.ТекущиеДанные.КодУслуги));
	Для Каждого СтрокаВыбраннойУслуги Из СтрокиВыбранныхУслуг Цикл
		СписокВыбранныхУслуг.Добавить(СтрокаВыбраннойУслуги.УслугаВБазе);
	КонецЦикла;
	
	// Определяем вид сравнения для отбора.
	Если Элементы.ТаблицаНастроек.ТекущиеДанные.СпособНачислений = "Прочее" Тогда
		ВидСравненияВОтборе = ВидСравненияКомпоновкиДанных.НеВСписке;
	Иначе
		ВидСравненияВОтборе = ВидСравненияКомпоновкиДанных.ВСписке;
	КонецЕсли;
	
	Форма = ПолучитьФорму("Справочник.КВП_Услуги.ФормаВыбора", Новый Структура("ТекущаяСтрока", Элементы.ТП_ЖКУ_ВБазе.ТекущиеДанные.УслугаВБазе), Элемент);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Форма.Список.КомпоновщикНастроек.Настройки.Отбор, "Ссылка", СписокВыбранныхУслуг,
															ВидСравненияКомпоновкиДанных.НеВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
	Форма.Открыть();
	
КонецПроцедуры // ТП_ЖКУ_ВБазеУслугаВБазеНачалоВыбора()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОПРЕДЕЛЕНИЕ ПЕРЕМЕННЫХ МОДУЛЯ

#Область ОпределениеПеременных

ПредыдущийКодУслуги = "";
ПредыдущаяУслуга = ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка");
ПризнакУдаления = Ложь;

#КонецОбласти