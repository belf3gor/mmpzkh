
//////////////////////////////////////////////////////////////////////////
// СОХРАНЯЕМЫЕ НАСТРОЙКИ

#Область РаботаСНастройками

&НаСервере
// Процедура восстановления настроек.
Процедура ВосстановитьНастройки()
	
	СтруктураПараметров = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("УПЖКХ_ВыгрузкаКрасноярскийКрай", "ПараметрыВыгрузки");
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		ВрТаблицаУслуг = Новый ТаблицаЗначений;
		СтруктураПараметров.Свойство("ЛицевыеСчета",                  Объект.ЛицевыеСчета);
		СтруктураПараметров.Свойство("КрасноярскийКрай_ТаблицаУслуг", ВрТаблицаУслуг);
		Если Не ВрТаблицаУслуг = Неопределено Тогда
			Объект.КрасноярскийКрай_ТаблицаУслуг.Загрузить(ВрТаблицаУслуг);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура сохранения настроек.
Процедура СохранитьНастройки()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЛицевыеСчета",                  Объект.ЛицевыеСчета);
	СтруктураПараметров.Вставить("КрасноярскийКрай_ТаблицаУслуг", Объект.КрасноярскийКрай_ТаблицаУслуг.Выгрузить());
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("УПЖКХ_ВыгрузкаКрасноярскийКрай", "ПараметрыВыгрузки", СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// РАБОТА С ВРЕМЕННЫМ ХРАНИЛИЩЕМ

#Область РаботаСВременнымХранилищем

&НаСервере
// Помещает таблицу услуг во временное хранилище.
Функция ПоместитьУслугиВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.КрасноярскийКрай_ТаблицаУслуг.Выгрузить(), Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
// Помещает таблицу услуг во временное хранилище.
Функция ПолучитьУслугиИзХранилища(АдресУслугВХранилище)
	
	врТаблицаУслуг = ПолучитьИзВременногоХранилища(АдресУслугВХранилище);
	Если ТипЗнч(врТаблицаУслуг) = Тип("ТаблицаЗначений") Тогда
		Объект.КрасноярскийКрай_ТаблицаУслуг.Загрузить(врТаблицаУслуг);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	Объект.Период = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	
	ВосстановитьНастройки();
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки();
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПРЕДСТАВЛЕНИЯ МЕСЯЦА

#Область РаботаСПериодом

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "ПериодСтрокой".
Процедура ПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "ПериодСтрокой".
Процедура ПериодСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПериодСтрокой".
Процедура ПериодСтрокойПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Модифицированность);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Регулирование" поля "ПериодСтрокой".
Процедура ПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Направление,
														Модифицированность);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ПериодСтрокой".
Процедура ПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "КомандаНастроитьУслуги".
Процедура КомандаНастроитьУслуги(Команда)
	
	АдресУслугВХранилище = ПоместитьУслугиВХранилище();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаНастроитьУслугиЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты.Форма.КрасноярскийКрай_ФормаНастройка", Новый Структура("АдресУслугВХранилище", АдресУслугВХранилище), , , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата опроса команды "КомандаНастроитьУслуги".
Процедура КомандаНастроитьУслугиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		ПолучитьУслугиИзХранилища(Результат);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиЭлементовФормы

////////////////////////
// Диалог выбора файла

&НаКлиенте
// Процедура проивзодит открытие dbf файлов.
Процедура ВыборФайла(Операция, ИмяРеквизита)
	
	ДиалогВыбораФайла                             = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Фильтр                      = "Файл данных (*.dbf)|*.dbf";
	ДиалогВыбораФайла.Расширение                  = "dbf";
	ДиалогВыбораФайла.Заголовок                   = "Сохранение файла";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	
	ТекМесяц = Строка(Месяц(Объект.Период));
	Если СтрДлина(ТекМесяц) = 1 Тогда
		ТекМесяц = "0" + ТекМесяц;
	КонецЕсли;	
	
	ИмяФайла = "S" + ТекМесяц + Прав(Строка(Год(Объект.Период)), 2) + "-" + Операция + ".DBF"; 
	
	ДиалогВыбораФайла.ПолноеИмяФайла = ИмяФайла;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ДиалогВыбораФайла", ДиалогВыбораФайла);
	ДополнительныеПараметры.Вставить("Операция",          Операция);
	ДополнительныеПараметры.Вставить("ИмяРеквизита",       ИмяРеквизита);
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ВыборФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаЗавершение(ВыбранныйФайл, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйФайл <> Неопределено Тогда
		
		ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
		Операция          = ДополнительныеПараметры.Операция;
		ИмяРеквизита      = ДополнительныеПараметры.ИмяРеквизита;
		
		ЭтаФорма[ИмяРеквизита] = ДиалогВыбораФайла.ПолноеИмяФайла;
		Если Операция = "01" Тогда
			СохранитьКвартиросъемщики(Неопределено);
		ИначеЕсли Операция = "02" Тогда
			СохранитьСуммы(Неопределено);
		ИначеЕсли Операция = "2a" Тогда
			СохранитьЧленыСемьи(Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ФайлКвартиросъемщики".
Процедура ФайлКвартиросъемщикиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборФайла("01", "ФайлКвартиросъемщики");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ФайлЧленыСемьи".
Процедура ФайлЧленыСемьиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборФайла("2a", "ФайлЧленыСемьи");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ФайлСуммы".
Процедура ФайлСуммыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборФайла("02", "ФайлСуммы");
	
КонецПроцедуры

////////////////////////
// Заполнение данных

&НаКлиенте
// Обработчик команды "КомандаЗаполнитьВсе".
Процедура КомандаЗаполнитьВсе(Команда)
	
	ТекстОшибки = ПроверкаУсловийДляВЗаполненияТаблиц();
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если Объект.КрасноярскийКрай_СуммыОплатыУслуг.Количество() > 0
	 ИЛИ Объект.КрасноярскийКрай_СуммыОплатыУслуг.Количество() > 0
	 ИЛИ Объект.КрасноярскийКрай_ЧленыСемьи.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаЗаполнитьВсеЗавершение", ЭтотОбъект);
		
		ТекстВопроса = "Перед заполением все таблицы выгрузки будут очищены. Заполнить всё?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ЗаполнитьКвартиросъемщикиНаСервере();
		ЗаполнитьСуммыНаСервере();
		ЗаполнитьЧленыСемьиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата опроса команды "КомандаЗаполнитьВсе".
Процедура КомандаЗаполнитьВсеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Объект.КрасноярскийКрай_Квартиросъемщики.Очистить();
		Объект.КрасноярскийКрай_СуммыОплатыУслуг.Очистить();
		Объект.КрасноярскийКрай_ЧленыСемьи.Очистить();
		
		ЗаполнитьКвартиросъемщикиНаСервере();
		ЗаполнитьСуммыНаСервере();
		ЗаполнитьЧленыСемьиНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьВсеЗавершение()

&НаКлиенте
// Обработчик команды "ЗаполнитьКвартиросъемщики".
Процедура ЗаполнитьКвартиросъемщики(Команда)
	
	ТекстОшибки = ПроверкаУсловийДляВЗаполненияТаблиц();
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если Объект.КрасноярскийКрай_Квартиросъемщики.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьКвартиросъемщикиЗавершение", ЭтотОбъект);
		
		ТекстВопроса = "Перед заполением таблица квартиросъемщиков будет очищена. Заполнить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьКвартиросъемщикиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата опроса команды "ЗаполнитьКвартиросъемщики".
Процедура ЗаполнитьКвартиросъемщикиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Объект.КрасноярскийКрай_Квартиросъемщики.Очистить();
		
		ЗаполнитьКвартиросъемщикиНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьКвартиросъемщикиЗавершение()

&НаКлиенте
// Обработчик команды "ЗаполнитьСуммы".
Процедура ЗаполнитьСуммы(Команда)
	
	Если Объект.КрасноярскийКрай_Квартиросъемщики.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Перед заполнением таблицы сумм оплат по услугам необходимо заполнить таблицу квартиросъещиков!");
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = ПроверкаУсловийДляВЗаполненияТаблиц();
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если Объект.КрасноярскийКрай_СуммыОплатыУслуг.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьСуммыЗавершение", ЭтотОбъект);
		
		ТекстВопроса = "Перед заполением таблица сумма оплат по услугам будет очищена. Заполнить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьСуммыНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата опроса команды "ЗаполнитьСуммы".
Процедура ЗаполнитьСуммыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Объект.КрасноярскийКрай_СуммыОплатыУслуг.Очистить();
		
		ЗаполнитьСуммыНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ЗаполнитьЧленыСемьи".
Процедура ЗаполнитьЧленыСемьи(Команда)
	
	Если Объект.КрасноярскийКрай_Квартиросъемщики.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Перед заполнением таблицы членов семьи необходимо заполнить таблицу квартиросъещиков!");
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = ПроверкаУсловийДляВЗаполненияТаблиц();
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если Объект.КрасноярскийКрай_ЧленыСемьи.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьЧленыСемьиЗавершение", ЭтотОбъект);
		
		ТекстВопроса = "Перед заполением таблица членов семьи будет очищена. Заполнить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьЧленыСемьиНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата опроса команды "ЗаполнитьЧленыСемьи".
Процедура ЗаполнитьЧленыСемьиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Объект.КрасноярскийКрай_ЧленыСемьи.Очистить();
		
		ЗаполнитьЧленыСемьиНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура заполнения данных о квартиросьемщиках.
Процедура ЗаполнитьКвартиросъемщикиНаСервере()
	
	ТаблицаСоответствияУслуг = ПолучитьТаблицуСоответствияУслуг();
	ТаблицаТиповУлиц         = ПолучитьТаблицуТиповУлиц();
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.СформироватьТаблицуКвартиросъемщиков(ТаблицаСоответствияУслуг, ТаблицаТиповУлиц, 1);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	Элементы.ФайлКвартиросъемщики.Доступность = Истина;
	
КонецПроцедуры

&НаСервере
// Процедура заполнения данных о суммах.
Процедура ЗаполнитьСуммыНаСервере()
	
	ТаблицаСоответствияУслуг = ПолучитьТаблицуСоответствияУслуг();
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.СформироватьТаблицуСуммОплатПоУслугам(ТаблицаСоответствияУслуг, 1);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	Элементы.ФайлСуммы.Доступность = Истина;
	
КонецПроцедуры

&НаСервере
// Процедура заполнения данных о членах семьи.
Процедура ЗаполнитьЧленыСемьиНаСервере()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.СформироватьТаблицуСведенийОЧленахСемьи(1);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	Элементы.ФайлЧленыСемьи.Доступность = Истина;
	
КонецПроцедуры

////////////////////////
// Сохранение файлов

&НаКлиенте
// Обработчик команды "СохранитьКвартиросъемщики".
Процедура СохранитьКвартиросъемщики(Команда)
	
	#Если Не ВебКлиент Тогда
		
		БД = Новый XBase; 
		БД.Кодировка = КодировкаXBase.OEM;
		БД.Поля.Добавить("ID",    "S", 15); 
		БД.Поля.Добавить("PUNKT", "S", 30); 
		БД.Поля.Добавить("TIP",   "S", 20);
		БД.Поля.Добавить("UL",    "S", 30); 
		БД.Поля.Добавить("DOM",   "N", 3); 
		БД.Поля.Добавить("KOR",   "N", 2);
		БД.Поля.Добавить("BDOM",  "S", 1); 
		БД.Поля.Добавить("KV",    "S", 10); 
		БД.Поля.Добавить("OTCH",  "S", 7);
		БД.Поля.Добавить("SEM",   "N", 2); 
		БД.Поля.Добавить("PL",    "N", 6, 2); 
		БД.Поля.Добавить("DOLG",  "L");
		БД.Поля.Добавить("Z",     "S", 60); 
		БД.Поля.Добавить("KVSM",  "N", 7); 
		
		Если (Найти( СокрЛП( ФайлКвартиросъемщики ), ".dbf") = 0 И Найти( СокрЛП( ФайлКвартиросъемщики ), ".DBF") = 0 ) ИЛИ Найти( СокрЛП( ФайлКвартиросъемщики ), ":\") <> 2 Тогда
			
			Текст = "Неверное имя файла!";
			
		Иначе
			БД.СоздатьФайл(ФайлКвартиросъемщики, ); 
			БД.АвтоСохранение = Истина;
			
			Для Каждого Строка Из Объект.КрасноярскийКрай_Квартиросъемщики Цикл
				
				БД.Добавить();
				ЗаполнитьЗначенияСвойств(БД, Строка);
				
			КонецЦикла;
			
			БД.ЗакрытьФайл(); 
			
			Текст = "Загрузка в файл завершена!" + Символы.ПС + "Путь: " + ФайлКвартиросъемщики;
			
		КонецЕсли;
		
		ПоказатьПредупреждение(, Текст, 0, "Оповещение.");
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "СохранитьСуммы".
Процедура СохранитьСуммы(Команда)
	
	#Если Не ВебКлиент Тогда
		
		БД = Новый XBase; 
		БД.Кодировка = КодировкаXBase.OEM;
		БД.Поля.Добавить("NN",   "N", 7); 
		БД.Поля.Добавить("ID",   "S", 15); 
		БД.Поля.Добавить("USL",  "N", 3);
		БД.Поля.Добавить("S1",   "N", 9, 2); 
		БД.Поля.Добавить("S2",   "N", 9, 2); 
		БД.Поля.Добавить("S3",   "N", 9, 2);
		БД.Поля.Добавить("S4",   "N", 9, 2); 
		БД.Поля.Добавить("S5",   "N", 9, 2); 
		БД.Поля.Добавить("PER",  "N", 2);
		БД.Поля.Добавить("CHET", "L"); 
		БД.Поля.Добавить("OTCH", "S", 7); 
		БД.Поля.Добавить("ITOG", "L");
		
		Если ( Найти( СокрЛП( ФайлСуммы ), ".dbf") = 0 И Найти( СокрЛП( ФайлСуммы ), ".DBF") = 0 )  ИЛИ Найти( СокрЛП( ФайлСуммы ), ":\") <> 2 Тогда
			
			Текст = "Неверное имя файла!";
			
		Иначе
			
			БД.СоздатьФайл(ФайлСуммы, ); 
			БД.АвтоСохранение = Истина;
			
			Для Каждого Строка Из Объект.КрасноярскийКрай_СуммыОплатыУслуг Цикл
				
				БД.Добавить();
				ЗаполнитьЗначенияСвойств(БД, Строка);
				
			КонецЦикла;
			
			БД.ЗакрытьФайл(); 
			
			Текст = "Загрузка в файл завершена!" + Символы.ПС + "Путь: " + ФайлСуммы;
			
		КонецЕсли;
		
		ПоказатьПредупреждение(, Текст, 0, "Оповещение.");
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "СохранитьЧленыСемьи".
Процедура СохранитьЧленыСемьи(Команда)
	
	#Если Не ВебКлиент Тогда
		
		БД = Новый XBase; 
		БД.Кодировка = КодировкаXBase.OEM;
		БД.Поля.Добавить("NN",    "N", 7); 
		БД.Поля.Добавить("ID",    "S", 15); 
		БД.Поля.Добавить("FIO",   "S", 60);
		БД.Поля.Добавить("DR",    "S", 10);
		БД.Поля.Добавить("SX",    "N", 1); 
		БД.Поля.Добавить("VR",    "N", 2); 
		БД.Поля.Добавить("UDT",   "N", 2);
		БД.Поля.Добавить("UDS",   "S", 10); 
		БД.Поля.Добавить("UDN",   "N", 7); 
		БД.Поля.Добавить("UDD",   "S", 10);
		БД.Поля.Добавить("ORGAN", "S", 100); 
		БД.Поля.Добавить("RO",    "N", 2); 
		БД.Поля.Добавить("DD",    "N", 2);
		БД.Поля.Добавить("DREG",  "S", 10);
		БД.Поля.Добавить("DVYB",  "S", 10);
		
		Если ( Найти( СокрЛП( ФайлЧленыСемьи ), ".dbf") = 0 И Найти( СокрЛП( ФайлЧленыСемьи ), ".DBF") = 0 )  ИЛИ Найти( СокрЛП( ФайлЧленыСемьи ), ":\") <> 2 Тогда
			
			Текст = "Неверное имя файла!";
			
		Иначе
			БД.СоздатьФайл(ФайлЧленыСемьи, ); 
			БД.АвтоСохранение = Истина;
			
			Для Каждого Строка Из Объект.КрасноярскийКрай_ЧленыСемьи Цикл
				
				БД.Добавить();
				ЗаполнитьЗначенияСвойств(БД, Строка);
				
			КонецЦикла;
			
			БД.ЗакрытьФайл(); 
			
			Текст = "Загрузка в файл завершена!" + Символы.ПС + "Путь: " + ФайлЧленыСемьи;
			
		КонецЕсли;
		
		ПоказатьПредупреждение(, Текст, 0, "Оповещение.");
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчика события "Открытие" поля ввода "ФайлКвартиросъемщики".
Процедура ФайлКвартиросъемщикиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НачатьЗапускПриложения(Новый ОписаниеОповещения("ФайлКвартиросъемщикиОткрытиеЗавершение", ЭтотОбъект), "explorer " + Элемент.ТекстРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлКвартиросъемщикиОткрытиеЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчика события "Открытие" поля ввода "ФайлСуммы".
Процедура ФайлСуммыОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НачатьЗапускПриложения(Новый ОписаниеОповещения("ФайлСуммыОткрытиеЗавершение", ЭтотОбъект), "explorer " + Элемент.ТекстРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлСуммыОткрытиеЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчика события "Открытие" поля ввода "ФайлЧленыСемьи".
Процедура ФайлЧленыСемьиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НачатьЗапускПриложения(Новый ОписаниеОповещения("ФайлЧленыСемьиОткрытиеЗавершение", ЭтотОбъект), "explorer " + Элемент.ТекстРедактирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлЧленыСемьиОткрытиеЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ПрочиеПроцедурыИФункции

&НаКлиенте
// Проверяет наличие всех необходимых данных для заполнения таблиц выгрузки.
//
Функция ПроверкаУсловийДляВЗаполненияТаблиц()
	
	ТекстОшибки = "";
	
	Если НЕ ЗначениеЗаполнено(Объект.Период) Тогда
		ТекстОшибки = ТекстОшибки + "Не указан период выгрузки!";
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не указана организация!", "Не указан организация!");
	КонецЕсли;
	
	Если Объект.КрасноярскийКрай_ТаблицаУслуг.Количество() = 0 Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не заполнена таблица соответствия услуг!", "Не заполнена таблица соответствия услуг!");
	КонецЕсли; 
	
	Возврат ТекстОшибки;
	
КонецФункции // ПроверкаУсловийДляВЗаполненияТаблиц

&НаСервере
// Получает строки из таблицы соответствия услуг, в которых заполнены все поля.
//
Функция ПолучитьТаблицуСоответствияУслуг()
	
	ТаблицаДляВозврата = Новый ТаблицаЗначений;
	ТаблицаДляВозврата.Колонки.Добавить("Код",               ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(3));
	ТаблицаДляВозврата.Колонки.Добавить("КодПерерасчета",    ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(3));
	ТаблицаДляВозврата.Колонки.Добавить("КодСОИ",            ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(3));
	ТаблицаДляВозврата.Колонки.Добавить("КодПерерасчетаСОИ", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(3));
	ТаблицаДляВозврата.Колонки.Добавить("Услуга",            Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
	
	Для Каждого ТекСтрока Из Объект.КрасноярскийКрай_ТаблицаУслуг Цикл
		Если НЕ ПустаяСтрока(ТекСтрока.Код) И ЗначениеЗаполнено(ТекСтрока.Услуга) Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаДляВозврата.Добавить(), ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаДляВозврата;
	
КонецФункции // ПолучитьТаблицуСоответствияУслуг()

&НаСервере
// Получает строки из таблицы типов улиц, в которых заполнены все поля.
//
Функция ПолучитьТаблицуТиповУлиц()
	
	ТаблицаДляВозврата = Новый ТаблицаЗначений;
	ТаблицаДляВозврата.Колонки.Добавить("НаименованиеКраткоеИзБазы",        ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(20));
	ТаблицаДляВозврата.Колонки.Добавить("НаименованиеДляВыводаВФайлОтвета", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(20));
	
	НовыйТУ                                  = ТаблицаДляВозврата.Добавить();
	НовыйТУ.НаименованиеКраткоеИзБазы        = "ул";
	НовыйТУ.НаименованиеДляВыводаВФайлОтвета = "УЛИЦА";
	
	НовыйТУ                                  = ТаблицаДляВозврата.Добавить();
	НовыйТУ.НаименованиеКраткоеИзБазы        = "ул.";
	НовыйТУ.НаименованиеДляВыводаВФайлОтвета = "УЛИЦА";
	
	НовыйТУ                                  = ТаблицаДляВозврата.Добавить();
	НовыйТУ.НаименованиеКраткоеИзБазы        = "УЛ";
	НовыйТУ.НаименованиеДляВыводаВФайлОтвета = "УЛИЦА";
	
	НовыйТУ                                  = ТаблицаДляВозврата.Добавить();
	НовыйТУ.НаименованиеКраткоеИзБазы        = "УЛ.";
	НовыйТУ.НаименованиеДляВыводаВФайлОтвета = "УЛИЦА";
	
	НовыйТУ                                  = ТаблицаДляВозврата.Добавить();
	НовыйТУ.НаименованиеКраткоеИзБазы        = "пер";
	НовыйТУ.НаименованиеДляВыводаВФайлОтвета = "ПЕРЕУЛОК";
	
	НовыйТУ                                  = ТаблицаДляВозврата.Добавить();
	НовыйТУ.НаименованиеКраткоеИзБазы        = "пер.";
	НовыйТУ.НаименованиеДляВыводаВФайлОтвета = "ПЕРЕУЛОК";
	
	НовыйТУ                                  = ТаблицаДляВозврата.Добавить();
	НовыйТУ.НаименованиеКраткоеИзБазы        = "ПЕР";
	НовыйТУ.НаименованиеДляВыводаВФайлОтвета = "ПЕРЕУЛОК";
	
	НовыйТУ                                  = ТаблицаДляВозврата.Добавить();
	НовыйТУ.НаименованиеКраткоеИзБазы        = "ПЕР.";
	НовыйТУ.НаименованиеДляВыводаВФайлОтвета = "ПЕРЕУЛОК";
	
	НовыйТУ                                  = ТаблицаДляВозврата.Добавить();
	НовыйТУ.НаименованиеКраткоеИзБазы        = "пр-кт";
	НовыйТУ.НаименованиеДляВыводаВФайлОтвета = "ПРОСПЕКТ";
	
	НовыйТУ                                  = ТаблицаДляВозврата.Добавить();
	НовыйТУ.НаименованиеКраткоеИзБазы        = "пр-зд";
	НовыйТУ.НаименованиеДляВыводаВФайлОтвета = "ПРОЕЗД";
	
	НовыйТУ                                  = ТаблицаДляВозврата.Добавить();
	НовыйТУ.НаименованиеКраткоеИзБазы        = "проезд";
	НовыйТУ.НаименованиеДляВыводаВФайлОтвета = "ПРОЕЗД";
	
	НовыйТУ                                  = ТаблицаДляВозврата.Добавить();
	НовыйТУ.НаименованиеКраткоеИзБазы        = "пл";
	НовыйТУ.НаименованиеДляВыводаВФайлОтвета = "ПЛОЩАДЬ";
	
	НовыйТУ                                  = ТаблицаДляВозврата.Добавить();
	НовыйТУ.НаименованиеКраткоеИзБазы        = "б-р";
	НовыйТУ.НаименованиеДляВыводаВФайлОтвета = "БУЛЬВАР";
	
	НовыйТУ                                  = ТаблицаДляВозврата.Добавить();
	НовыйТУ.НаименованиеКраткоеИзБазы        = "наб";
	НовыйТУ.НаименованиеДляВыводаВФайлОтвета = "набережная";
	
	НовыйТУ                                  = ТаблицаДляВозврата.Добавить();
	НовыйТУ.НаименованиеКраткоеИзБазы        = "ш";
	НовыйТУ.НаименованиеДляВыводаВФайлОтвета = "шоссе";
	
	НовыйТУ                                  = ТаблицаДляВозврата.Добавить();
	НовыйТУ.НаименованиеКраткоеИзБазы        = "туп";
	НовыйТУ.НаименованиеДляВыводаВФайлОтвета = "тупик";
	
	НовыйТУ                                  = ТаблицаДляВозврата.Добавить();
	НовыйТУ.НаименованиеКраткоеИзБазы        = "тракт";
	НовыйТУ.НаименованиеДляВыводаВФайлОтвета = "тракт";
	
	НовыйТУ                                  = ТаблицаДляВозврата.Добавить();
	НовыйТУ.НаименованиеКраткоеИзБазы        = "ал";
	НовыйТУ.НаименованиеДляВыводаВФайлОтвета = "аллея";
	
	НовыйТУ                                  = ТаблицаДляВозврата.Добавить();
	НовыйТУ.НаименованиеКраткоеИзБазы        = "парк";
	НовыйТУ.НаименованиеДляВыводаВФайлОтвета = "ПАРК";
	
	НовыйТУ                                  = ТаблицаДляВозврата.Добавить();
	НовыйТУ.НаименованиеКраткоеИзБазы        = "сквер";
	НовыйТУ.НаименованиеДляВыводаВФайлОтвета = "СКВЕР";
	
	Возврат ТаблицаДляВозврата;
	
КонецФункции // ПолучитьТаблицуТиповУлиц()

#КонецОбласти
