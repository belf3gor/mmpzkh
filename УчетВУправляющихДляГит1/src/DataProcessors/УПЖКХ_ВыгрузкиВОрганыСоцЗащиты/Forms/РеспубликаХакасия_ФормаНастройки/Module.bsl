
&НаКлиенте
Перем ПредыдущаяУслуга;

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область Форма

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Получаем настройки из хранилища.
	Если Параметры.Свойство("АдресНастроекВХранилище") И Параметры.АдресНастроекВХранилище <> Неопределено Тогда
		
		СтруктураНастроек = ПолучитьИзВременногоХранилища(Параметры.АдресНастроекВХранилище);
		Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
			
			// Файл выгрузки.
			врИмяФайлаВыгрузки = Неопределено;
			Если СтруктураНастроек.Свойство("ИмяФайлаВыгрузки", врИмяФайлаВыгрузки) Тогда
				Объект.ИмяФайлаВыгрузки = врИмяФайлаВыгрузки;
			КонецЕсли;
			
			// Файл загрузки.
			врИмяФайлаЗагрузки = Неопределено;
			Если СтруктураНастроек.Свойство("ИмяФайлаЗагрузки", врИмяФайлаЗагрузки) Тогда
				Объект.ИмяФайлаЗагрузки = врИмяФайлаЗагрузки;
			КонецЕсли;
			
			// Таблица настроек.
			врТаблицаНастроек = Неопределено;
			Если СтруктураНастроек.Свойство("РеспубликаХакасия_ТаблицаНастроек", врТаблицаНастроек) Тогда
				Если ТипЗнч(врТаблицаНастроек) = Тип("ТаблицаЗначений") Тогда
					Объект.РеспубликаХакасия_ТаблицаНастроек.Загрузить(врТаблицаНастроек);
				КонецЕсли;
			КонецЕсли;
			
			// Таблица услуг в базе.
			врТаблицаУслугВБазе = Неопределено;
			Если СтруктураНастроек.Свойство("РеспубликаХакасия_УслугиВБазе", врТаблицаУслугВБазе) Тогда
				Если ТипЗнч(врТаблицаУслугВБазе) = Тип("ТаблицаЗначений") Тогда
					Объект.РеспубликаХакасия_УслугиВБазе.Загрузить(врТаблицаУслугВБазе);
				КонецЕсли;
			КонецЕсли;
			
			// Таблица соответствия полей реестров.
			мПоляРеестровИУслугВОСЗН = Неопределено;
			Если СтруктураНастроек.Свойство("ТаблицаСоответствияПолейРеестровИУслугВОСЗН", мПоляРеестровИУслугВОСЗН) Тогда
				Если ТипЗнч(мПоляРеестровИУслугВОСЗН) = Тип("ТаблицаЗначений") Тогда
					ТаблицаСоответствияПолейРеестровИУслугВОСЗН.Загрузить(мПоляРеестровИУслугВОСЗН);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Процедура - обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии()
	
	// Загрузка данных из файла выгрузки.
	Если НЕ ПустаяСтрока(Объект.ИмяФайлаВыгрузки) Тогда
		
		Если ЭтоСетевойРесурс(Объект.ИмяФайлаВыгрузки) Тогда
			ЗаполнитьДанныеОбУслугахИзФайлаНаСервере("Выгрузки");
		Иначе
			ЗаполнитьДанныеОбУслугахИзФайла("Выгрузки");
		КонецЕсли;
		
	КонецЕсли;
	
	// Загрузка данных из файла загрузки.
	Если НЕ ПустаяСтрока(Объект.ИмяФайлаЗагрузки) Тогда
		
		Если ЭтоСетевойРесурс(Объект.ИмяФайлаЗагрузки) Тогда
			ЗаполнитьДанныеОбУслугахИзФайлаНаСервере("Загрузки");
		Иначе
			ЗаполнитьДанныеОбУслугахИзФайла("Загрузки");
		КонецЕсли;
		
	КонецЕсли;
	
	// Блокировка командной панели "КП_УслугиВБазе".
	Если Объект.РеспубликаХакасия_ТаблицаНастроек.Количество() = 0 Тогда
		Элементы.ТП_ЖКУ_ВБазеДобавить.Доступность = Ложь;
	Иначе
		Элементы.ТП_ЖКУ_ВБазеДобавить.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

////////////////////
// Данные об услугах из файлов

&НаКлиенте
// Определяет, является ли расположение указанного файла сетевым ресурсом по началу пути (по слэшам).
//
// Параметры:
//  Адрес - Строка - полное наименование файла.
//
// Возвращаемое значение:
//  Булево - признак того, что указанный адрес является сетевым ресурсом.
//
Функция ЭтоСетевойРесурс(Адрес)
	
	КорневойСимвол = Лев(Адрес, 2);
	Если КорневойСимвол = "\\" Или КорневойСимвол = "//" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ЭтоСетевойресурс()

&НаКлиенте
// Производится чтение DBF-файла с целью формирования таблицы "ДанныеОбУслугахИзФайла", в которой содержатся
// вид услуги и услуга в ОСЗН, и списка значений "ДоступныеЗначенияВидовУслугВОСЗН", содержащего доступные значения 
// видов услуг в ОСЗН для установления их соответствия с полями реестров.
//
// Параметры:
//  Режим     - Строка - наименование режима работы текущего файла: "Загрузки" или "Выгрузки".
//
Процедура ЗаполнитьДанныеОбУслугахИзФайла(Режим)
	
	// Для чтения *.dbf файла в кодировке DOS (OEM), урежем имя временного файла.
	КороткоеИмяВременногоФайла = ПолучитьИмяВременногоDBFФайла(Режим);
	
	// Копируем исходный dbf-файл во временный с коротким именем.
	КопироватьФайл(Объект["ИмяФайла" + Режим], КороткоеИмяВременногоФайла);
	
	// Проверяем файл загрузки на существование.
	DBFФайл = Новый XBase;
	#Если НЕ ВебКлиент Тогда
	DBFФайл.Кодировка = КодировкаXBase.OEM;
	#КонецЕсли
	
	DBFФайл.ОткрытьФайл(КороткоеИмяВременногоФайла, , Истина);
	
	// Производим его чтение.
	Если DBFФайл.Открыта() Тогда
		
		КоличествоУслуг = (DBFФайл.Поля.Количество() - ?(Режим = "Выгрузки", 24, 15)) / ?(Режим = "Выгрузки", 17, 6);
		
		Если ЗагружаемыйФайлКорректный(DBFФайл, КоличествоУслуг) Тогда
			
			// Заполняем таблицу услуг из dbf-файла выгрузки.
			Пока Не DBFФайл.ВКонце() Цикл
				
				Для Сч = 1 По КоличествоУслуг Цикл
					
					ИмяПоляУслугаВОСЗН = "NGKYSL_" + Сч;
					
					// Пустые ЖКУ нижнего уровня не добавляем.
					Если Не СокрЛП(DBFФайл[ИмяПоляУслугаВОСЗН]) = "" Тогда
						
						НоваяЗапись                = ЭтотОбъект["ДанныеОбУслугахИзФайла" + Режим].Добавить();
						НоваяЗапись.ВидУслугиВОСЗН = DBFФайл["GKYSL_" + Сч];
						НоваяЗапись.УслугаВОСЗН    = СокрЛП(DBFФайл[ИмяПоляУслугаВОСЗН]);
						
						Если Режим = "Выгрузки" Тогда
							// Номер услуги в файле выгрузки. Необходим для печати реесров.
							НоваяЗапись.НомерУслуги    = Сч;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				DBFФайл.Следующая();
				
			КонецЦикла;
		КонецЕсли;
		
		DBFФайл.ЗакрытьФайл();
		
		Если Режим = "Выгрузки" Тогда
			// Для файла выгрузки производим отдельное сворачивание, т.к. в настройки реестров платежей
			// загружаются виды услуг в ОСЗН только из этого файла (могут различаться с файлом загрузки).
			СвернутьТаблицуСУслугамиВОСЗН("ДанныеОбУслугахИзФайлаВыгрузки", Истина);
			
			// Заполняем стуктуру доступных значений видов услуг в ОСЗН.
			Для Каждого Строка Из ДанныеОбУслугахИзФайлаВыгрузки Цикл
				Если ДоступныеЗначенияВидовУслугВОСЗН.НайтиПоЗначению(Строка.НомерУслуги) = Неопределено Тогда
					ДоступныеЗначенияВидовУслугВОСЗН.Добавить(Строка.НомерУслуги, Строка.ВидУслугиВОСЗН);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДанныеОбУслугахИзФайла()

&НаКлиенте
// Если файл находися на сетевом ресурсе, то чтение файла выполняем на сервере с помещением во временное хранилище.
//
Процедура ЗаполнитьДанныеОбУслугахИзФайлаНаСервере(Режим) 
	
	// Помещаем загружаемый файл во временное хранилище.
	Оповещение = Новый ОписаниеОповещения("ОбработатьВыборФайла", ЭтотОбъект, Режим);
	НачатьПомещениеФайла(Оповещение, , Объект["ИмяФайла" + Режим], Ложь, УникальныйИдентификатор);
	
КонецПроцедуры // ЗагрузитьИзФайлаПродолжение()

&НаКлиенте
// Обработчик результата помещения файла во временное хранилище.
//
Процедура ОбработатьВыборФайла(Результат, АдресФайлаВХранилище, ВыбранноеИмяФайла, Режим) Экспорт
	
	Если Результат Тогда
		// Загружаем данные из dbf на сервере.
		ЗагрузитьИзФайлаНаСервере(АдресФайлаВХранилище, Режим);
		
		Если Объект.РеспубликаХакасия_ТаблицаНастроек.Количество() = 0 Тогда
			Элементы.ТП_ЖКУ_ВБазеДобавить.Доступность = Ложь;
		Иначе
			Элементы.ТП_ЖКУ_ВБазеДобавить.Доступность = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВыборФайла()

&НаСервере
// Производится чтение DBF-файла с целью формирования таблицы "ДанныеОбУслугахИзФайла", в которой содержатся
// вид услуги и услуга в ОСЗН, и списка значений "ДоступныеЗначенияВидовУслугВОСЗН", содержащего доступные значения 
// видов услуг в ОСЗН для установления их соответствия с полями реестров.
//
// Параметры:
//  АдресФайлаВХранилище - Строка - адрес текущего файла во временном хранилище.
//  Режим     - Строка - наименование режима работы текущего файла: "Загрузки" или "Выгрузки".
//
Процедура ЗагрузитьИзФайлаНаСервере(АдресФайлаВХранилище, Режим)
	
	// Получаем dbf из временного хранилища.
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВХранилище);
	
	// Для чтения *.dbf файла в кодировке DOS (OEM), урежем имя временного файла.
	КороткоеИмяВременногоФайла = ПолучитьИмяВременногоDBFФайла(Режим);
	
	// Записываем dbf в файл с указанным именем.
	ДвоичныеДанные.Записать(КороткоеИмяВременногоФайла);
	
	// Проверяем файл загрузки на существование.
	DBFФайл = Новый XBase;
	DBFФайл.Кодировка = КодировкаXBase.OEM;
	
	DBFФайл.ОткрытьФайл(КороткоеИмяВременногоФайла, , Истина);
	
	// Производим его чтение.
	Если DBFФайл.Открыта() Тогда
		
		КоличествоУслуг = (DBFФайл.Поля.Количество() - ?(Режим = "Выгрузки", 24, 15)) / ?(Режим = "Выгрузки", 17, 6);
		
		Если ЗагружаемыйФайлКорректный(DBFФайл, КоличествоУслуг) Тогда
			
			// Заполняем таблицу услуг из dbf-файла выгрузки.
			Пока Не DBFФайл.ВКонце() Цикл
				
				Для Сч = 1 По КоличествоУслуг Цикл
					
					ИмяПоляУслугаВОСЗН = "NGKYSL_" + Сч;
					
					// Пустые ЖКУ нижнего уровня не добавляем.
					Если Не СокрЛП(DBFФайл[ИмяПоляУслугаВОСЗН]) = "" Тогда
						
						НоваяЗапись                = ЭтотОбъект["ДанныеОбУслугахИзФайла" + Режим].Добавить();
						НоваяЗапись.ВидУслугиВОСЗН = DBFФайл["GKYSL_" + Сч];
						НоваяЗапись.УслугаВОСЗН    = СокрЛП(DBFФайл[ИмяПоляУслугаВОСЗН]);
						
						Если Режим = "Выгрузки" Тогда
							// Номер услуги в файле выгрузки. Необходим для печати реесров.
							НоваяЗапись.НомерУслуги    = Сч;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				DBFФайл.Следующая();
				
			КонецЦикла;
		КонецЕсли;
		
		DBFФайл.ЗакрытьФайл();
		
		Если Режим = "Выгрузки" Тогда
			// Для файла выгрузки производим отдельное сворачивание, т.к. в настройки реестров платежей
			// загружаются виды услуг в ОСЗН только из этого файла (могут различаться с файлом загрузки).
			СвернутьТаблицуСУслугамиВОСЗН("ДанныеОбУслугахИзФайлаВыгрузки", Истина);
			
			// Заполняем стуктуру доступных значений видов услуг в ОСЗН.
			Для Каждого Строка Из ДанныеОбУслугахИзФайлаВыгрузки Цикл
				Если ДоступныеЗначенияВидовУслугВОСЗН.НайтиПоЗначению(Строка.НомерУслуги) = Неопределено Тогда
					ДоступныеЗначенияВидовУслугВОСЗН.Добавить(Строка.НомерУслуги, Строка.ВидУслугиВОСЗН);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьИзФайлаНаСервере()

&НаКлиентеНаСервереБезКонтекста
// Проверяет наличие необходимых полей в файле загрузки dbf.
//
Функция ЗагружаемыйФайлКорректный(DBFФайл, КоличествоУслуг)
	
	РезультатПроверки = Истина;
	
	Для Сч = 1 По КоличествоУслуг Цикл
		Если DBFФайл.Поля.Найти("NGKYSL_" + Сч) = Неопределено
		 ИЛИ DBFФайл.Поля.Найти("GKYSL_" + Сч) = Неопределено Тогда
			РезультатПроверки = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Возвращает полное имя временного dbf-файла с указанным именем без расширения.
//
// Параметры:
//  ИмяФайла - Строка - имя файла без расширения.
//
// Возвращаемые параметры:
//  НовоеИмяВременногоФайла - Строка - полное имя временного dbf-файла с указанным именем без расширения.
//
Функция ПолучитьИмяВременногоDBFФайла(Режим)
	
	ИмяВременногоФайла = "";
	#Если НЕ ВебКлиент Тогда
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("dbf");
	#КонецЕсли
	
	Файл = Новый Файл(ИмяВременногоФайла);
	НовоеИмяВременногоФайла = СтрЗаменить(Файл.ПолноеИмя, Файл.ИмяБезРасширения, Режим);
	
	Возврат НовоеИмяВременногоФайла;
	
КонецФункции // ПолучитьИмяВременногоDBFФайла()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ УСЛУГИ В ОСЗН 

#Область УслугиВОСЗН

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" таблицы "УслугаВОСЗН".
//
Процедура ТаблицаНастроекПриАктивизацииСтроки(Элемент)
	
	ТП_ЖКУ_ВБазе.Очистить();
	
	// При активации строки УслугаВОСЗН, загружаем соответствия в УслугаВБазе. 
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Идентификатор", Элемент.ТекущиеДанные.НомерСтроки);
		
		НайденныеСтроки = Объект.РеспубликаХакасия_УслугиВБазе.НайтиСтроки(Отбор);
		
		Для Каждого ТекСтрока из НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(ТП_ЖКУ_ВБазе.Добавить(), ТекСтрока);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ТаблицаНастроекПриАктивизацииСтроки()

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" строки таблицы "УслугаВОСЗН". 
//
Процедура ТаблицаНастроекПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Устанавливаем запрет на добавление строк копированием.
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ТаблицаНастроекПередНачаломДобавления()

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" таблицы "УслугаВОСЗН".
//
Процедура ТаблицаНастроекПередУдалением(Элемент, Отказ)
	
	// Удаление текущей строки соответствия из правой колонки.
	СтрокиУдаления = Объект.РеспубликаХакасия_УслугиВБазе.НайтиСтроки(Новый Структура("Идентификатор",  Элемент.ТекущиеДанные.НомерСтроки));
	Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
		Объект.РеспубликаХакасия_УслугиВБазе.Удалить(СтрокаУдаления);
	КонецЦикла;
	
КонецПроцедуры // ТаблицаНастроекПередУдалением()

&НаКлиенте
// Процедура - обработчик события "ПослеУдаления" таблицы "УслугаВОСЗН".
//
Процедура ТаблицаНастроекПослеУдаления(Элемент)
	
	// После удаления строки из УслугиВОСЗН переписываем идентификаторы в УслугиВБазе. 
	Для Каждого СтрокаОСЗН Из Объект.РеспубликаХакасия_ТаблицаНастроек Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("ВидУслугиВОСЗН", СтрокаОСЗН.ВидУслугиВОСЗН);
		Отбор.Вставить("УслугаВОСЗН",    СтрокаОСЗН.УслугаВОСЗН);
		
		СтрокиИзменения = Объект.РеспубликаХакасия_УслугиВБазе.НайтиСтроки(Отбор); 
		
		Для Каждого Строка ИЗ СтрокиИзменения Цикл
			Строка.Идентификатор = СтрокаОСЗН.НомерСтроки; 
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаНастроекПриАктивизацииСтроки(Элемент);
	
	// Если в левой колонке пользователем удалены все колонки, то блокируем возможность добавления соответствий.
	Если Объект.РеспубликаХакасия_ТаблицаНастроек.Количество() = 0 Тогда
		Элементы.ТП_ЖКУ_ВБазеДобавить.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ТаблицаНастроекПослеУдаления()

&НаКлиенте
// Процедура - обработчик события "ПередОкончаниемРедактирования" таблицы "УслугаВОСЗН".
//
Процедура ТаблицаНастроекПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	КодОшибки = 0;
	
	// Проверяем на наличие и уникальность код услуги.
	ТекущийВидУслугиВОСЗН = Элемент.ТекущиеДанные.ВидУслугиВОСЗН;
	Если ЗначениеЗаполнено(ТекущийВидУслугиВОСЗН) Тогда
		ОтборКод = Новый Структура;
		ОтборКод.Вставить("ВидУслугиВОСЗН", ТекущийВидУслугиВОСЗН);
		
		СтрокиСовпаденияКод = Объект.РеспубликаХакасия_ТаблицаНастроек.НайтиСтроки(ОтборКод);
		Если СтрокиСовпаденияКод.Количество() > 1 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Вид услуги в ОСЗН не уникален!");
			КодОшибки = КодОшибки + 1;
		КонецЕсли;
		
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Вид услуги в ОСЗН не заполнен!");
		КодОшибки = КодОшибки + 1;
	КонецЕсли;
	
	// Проверяем на наличие и уникальность услуги.
	ТекущаяУслугаВОСЗН    = Элемент.ТекущиеДанные.УслугаВОСЗН;
	Если ЗначениеЗаполнено(ТекущаяУслугаВОСЗН) Тогда
		ОтборУслуга = Новый Структура;
		ОтборУслуга.Вставить("УслугаВОСЗН", ТекущаяУслугаВОСЗН);
		
		СтрокиСовпаденияУслуга = Объект.РеспубликаХакасия_ТаблицаНастроек.НайтиСтроки(ОтборУслуга);
		Если СтрокиСовпаденияУслуга.Количество() > 1 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Услуга в ОСЗН не уникальна!");
			КодОшибки = КодОшибки + 1;
		КонецЕсли;
		
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Услуга в ОСЗН не заполнена!");
		КодОшибки = КодОшибки + 1;
	КонецЕсли;
	
	// При наличии незаполненных полей или дубликатов опрашиваем пользователя.
	Если КодОшибки > 0 Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Добавление незаполненных полей и дублирующих значений недопустимо!"); 
		Объект.РеспубликаХакасия_ТаблицаНастроек.Удалить(Элементы.ТаблицаНастроек.ТекущиеДанные.НомерСтроки - 1);
		
	КонецЕсли;
	
	// Разблокируем кнопку добавления табличного поля "ТП_ЖКУ_ВБазе".
	Если Не Объект.РеспубликаХакасия_ТаблицаНастроек.Количество() = 0 Тогда
		Элементы.ТП_ЖКУ_ВБазеДобавить.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры // ТаблицаНастроекПередОкончаниемРедактирования()

#КонецОбласти


#Область КомандаЗагрузить

////////////////////
// Загрузить

&НаКлиенте
// Обработчик команды "КомандаЗагрузить".
Процедура КомандаЗагрузить(Команда)
	
	Если ДанныеОбУслугахИзФайлаВыгрузки.Количество() = 0 И ДанныеОбУслугахИзФайлаЗагрузки.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Данная настройка недоступна! Возможно не выбран файл выгрузки/загрузки.");
		Возврат;
	КонецЕсли;
	
	Если Объект.РеспубликаХакасия_ТаблицаНастроек.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаЗагрузитьЗавершение", ЭтотОбъект);
		
		ТекстВопроса = "Перед загрузкой таблица услуг будет очищена. Загрузить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		КомандаЗагрузитьЗаполнить();
	КонецЕсли;
	
КонецПроцедуры // КомандаЗагрузить()

&НаКлиенте
// Обработчик результата опроса команды "КомандаЗагрузить".
Процедура КомандаЗагрузитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Объект.РеспубликаХакасия_ТаблицаНастроек.Очистить();
		
		КомандаЗагрузитьЗаполнить();
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьКвартиросъемщикиЗавершение()

&НаКлиенте
// Загрузка таблицы услуг в ОСЗН из dbf-файла.
//
// Параметры:
//  ФайлДБФ - XBase - загружаемый dbf-файл.
//
Процедура КомандаЗагрузитьЗаполнить()
	
	Объект.РеспубликаХакасия_УслугиВБазе.Очистить();
	
	// 1. Дополняем таблицу ДанныеОбУслугахИзФайлаЗагрузки улугами из таблицы ДанныеОбУслугахИзФайлаВыгрузки.
	// Таблица ДанныеОбУслугахИзФайлаЗагрузки более нигде не используется, а проводить свертку табличной части объекта 
	// "Объект.РеспубликаХакасия_ТаблицаНастроек" довольно накладно.
	Для Каждого Строка Из ДанныеОбУслугахИзФайлаВыгрузки Цикл
		
		НоваяЗапись = ДанныеОбУслугахИзФайлаЗагрузки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Строка);
		
	КонецЦикла;
	
	СвернутьТаблицуСУслугамиВОСЗН("ДанныеОбУслугахИзФайлаЗагрузки");
	
	// 2. Услуги из файла загрузки.
	Для Каждого Строка Из ДанныеОбУслугахИзФайлаЗагрузки Цикл
		
		НоваяЗапись = Объект.РеспубликаХакасия_ТаблицаНастроек.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, Строка);
		
	КонецЦикла;
	
	// Разблокируем кнопку добавления табличного поля "ТП_ЖКУ_ВБазе".
	Если Объект.РеспубликаХакасия_ТаблицаНастроек.Количество() > 0 Тогда
		// Позиционируемся на первой строке.
		Элементы.ТаблицаНастроек.ТекущаяСтрока = 0;
		// Разблокируем кнобку добавления услуг в базе.
		Элементы.ТП_ЖКУ_ВБазеДобавить.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры // КомандаЗагрузитьЗаполнить()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ УСЛУГИ В БАЗЕ

#Область УслугиВБазе

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" таблицы "УслугаВБазе".
//
Процедура ТП_ЖКУ_ВБазеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Если не выбрана строка в левой колоке или добавление строк копированием.
	Если Элементы.ТаблицаНастроек.ТекущиеДанные = Неопределено Или Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ТП_ЖКУ_ВБазеПередНачаломДобавления()

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" таблицы "УслугаВБазе".
//
Процедура ТП_ЖКУ_ВБазеПередУдалением(Элемент, Отказ)
	
	// При удалении строки удаляем соответствующие записи в РеспубликаХакасия_УслугиВБазе. 
	Идентификатор = Элементы.ТаблицаНастроек.ТекущиеДанные.НомерСтроки;
	УслугаВБазе   = Элемент.ТекущиеДанные.УслугаВБазе;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Идентификатор",  Идентификатор);
	Отбор.Вставить("УслугаВБазе",    УслугаВБазе);
	
	СтрокиУдаления = Объект.РеспубликаХакасия_УслугиВБазе.НайтиСтроки(Отбор);
	
	Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
		Объект.РеспубликаХакасия_УслугиВБазе.Удалить(СтрокаУдаления);
	КонецЦикла;
	
КонецПроцедуры // ТП_ЖКУ_ВБазеПередУдалением()

&НаКлиенте
// Процедура - обработчик события "ПриНачалеРедактирования" таблицы "УслугаВБазе".
//
Процедура ТП_ЖКУ_ВБазеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// Запоминаем предыдущее значение перезаписываемой строки.
	Если Не НоваяСтрока Тогда
		ПредыдущаяУслуга = Элемент.ТекущиеДанные.УслугаВБазе;
	КонецЕсли;
	
КонецПроцедуры // ТП_ЖКУ_ВБазеПриНачалеРедактирования()

&НаКлиенте
// Процедура - обработчик события "ПередОкончаниемРедактирования" таблицы "УслугаВБазе".
//
Процедура ТП_ЖКУ_ВБазеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	// Если изменяем выбранное значение, то удаляем предыдущую запись.
	Если Не НоваяСтрока И ЗначениеЗаполнено(ПредыдущаяУслуга) Тогда
		
		Идентификатор = Элементы.ТаблицаНастроек.ТекущиеДанные.НомерСтроки;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Идентификатор", Идентификатор);
		Отбор.Вставить("УслугаВБазе",   ПредыдущаяУслуга);
		
		НайденнаяСтрока = Объект.РеспубликаХакасия_УслугиВБазе.НайтиСтроки(Отбор);
		Объект.РеспубликаХакасия_УслугиВБазе.Удалить(НайденнаяСтрока[0]);
		
	КонецЕсли;
	
КонецПроцедуры // ТП_ЖКУ_ВБазеПередОкончаниемРедактирования()

&НаКлиенте
// Процедура - обработчик события "ПриОкончанииРедактирования" таблицы "УслугаВБазе".
//
Процедура ТП_ЖКУ_ВБазеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не Элемент.ТекущиеДанные = Неопределено И Не ОтменаРедактирования Тогда
		
		Если Элемент.ТекущиеДанные.УслугаВБазе.Пустая() Тогда
			// Удаляем пустую строку.
			ТП_ЖКУ_ВБазе.Удалить(ТП_ЖКУ_ВБазе.Индекс(Элемент.ТекущиеДанные)); 
		Иначе
			// Добавляем запись в РеспубликаХакасия_УслугиВБазе.
			Идентификатор  = Элементы.ТаблицаНастроек.ТекущиеДанные.НомерСтроки;
			ВидУслугиВОСЗН = Элементы.ТаблицаНастроек.ТекущиеДанные.ВидУслугиВОСЗН;
			УслугаВОСЗН    = Элементы.ТаблицаНастроек.ТекущиеДанные.УслугаВОСЗН;
			УслугаВБазе    = Элемент.ТекущиеДанные.УслугаВБазе;
			
			НоваяСтрокаСоответствия                = Объект.РеспубликаХакасия_УслугиВБазе.Добавить();
			НоваяСтрокаСоответствия.УслугаВБазе    = УслугаВБазе;
			НоваяСтрокаСоответствия.Идентификатор  = Идентификатор;
			НоваяСтрокаСоответствия.ВидУслугиВОСЗН = ВидУслугиВОСЗН;
			НоваяСтрокаСоответствия.УслугаВОСЗН    = УслугаВОСЗН;
			
			// Удаляем старую запись при перевыборе.
			Если Не ПредыдущаяУслуга = УслугаВБазе Тогда
				
				Отбор = Новый Структура;
				Отбор.Вставить("Идентификатор", Идентификатор);
				Отбор.Вставить("УслугаВБазе",   ПредыдущаяУслуга);
				
				НайденнаяСтрока = Объект.РеспубликаХакасия_УслугиВБазе.НайтиСтроки(Отбор);
				Если НайденнаяСтрока.Количество() = 1 Тогда
					НайденнаяСтрока[0].УслугаВБазе = УслугаВБазе;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ТП_ЖКУ_ВБазеПриОкончанииРедактирования()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "УслугаВБазе" таблицы "УслугаВБазе".
//
Процедура ТП_ЖКУ_ВБазеУслугаВБазеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Устанавливаем отбор на справочник "Услуги".
	СтандартнаяОбработка = Ложь;
	
	// Список уже выбранных услуг по данной услуге в ОСЗН.
	СписокВыбранныхУслуг = Новый СписокЗначений;
	СтрокиВыбранныхУслуг = Объект.РеспубликаХакасия_УслугиВБазе.НайтиСтроки(Новый Структура("УслугаВОСЗН", Элементы.ТаблицаНастроек.ТекущиеДанные.УслугаВОСЗН));
	Для Каждого СтрокаВыбраннойУслуги Из СтрокиВыбранныхУслуг Цикл
		СписокВыбранныхУслуг.Добавить(СтрокаВыбраннойУслуги.УслугаВБазе);
	КонецЦикла;
	
	Форма = ПолучитьФорму("Справочник.КВП_Услуги.ФормаВыбора", Новый Структура("ТекущаяСтрока", Элементы.ТП_ЖКУ_ВБазе.ТекущиеДанные.УслугаВБазе), Элемент);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Форма.Список.КомпоновщикНастроек.Настройки.Отбор, "Ссылка", СписокВыбранныхУслуг,
															ВидСравненияКомпоновкиДанных.НеВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
	Форма.Открыть();
	
КонецПроцедуры // ТП_ЖКУ_ВБазеУслугаВБазеНачалоВыбора()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область КомандаСохранить

////////////////////
// Сохранить и закрыть

&НаКлиенте
// Обработчик команды "КомандаСохранить".
Процедура КомандаСохранить(Команда)
	
	// Оставляем таслицу соответствия полей реестра вседа заполненной.
	Если ТаблицаСоответствияПолейРеестровИУслугВОСЗН.Количество() = 0 Тогда
		ОбновитьТаблицуСоответствияПолейРеестровИУслугВОСЗН();
	КонецЕсли;
	
	АдресНастроекВХранилище = ПоместитьНастройкиВХранилище(); 
	Закрыть(АдресНастроекВХранилище);
	
КонецПроцедуры // КомандаСохранить()

////////////////////
// Работа с временным хранилищем

&НаСервере
// Помещает таблицу услуг во временное хранилище.
//
// Возвращаемое значение:
//  Строка - адрес настроек во временном хранилище.
//
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ПрефиксЛицевыхСчетов",                        Объект.ПрефиксЛицевыхСчетов);
	СтруктураПараметров.Вставить("РеспубликаХакасия_ТаблицаНастроек",           Объект.РеспубликаХакасия_ТаблицаНастроек.Выгрузить());
	СтруктураПараметров.Вставить("РеспубликаХакасия_УслугиВБазе",               Объект.РеспубликаХакасия_УслугиВБазе.Выгрузить());
	СтруктураПараметров.Вставить("ТаблицаСоответствияПолейРеестровИУслугВОСЗН", ТаблицаСоответствияПолейРеестровИУслугВОСЗН.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураПараметров, Новый УникальныйИдентификатор);
	
КонецФункции // ПоместитьНастройкиВХранилище()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "ПОЛЯ РЕЕСТРОВ СТРОМИОСТИ ЖКУ"

#Область СписокУслугВОСЗН

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля выбора "СписокУслугВОСЗН" табличного поля "ТаблицаСоответствияПолейРеестровИУслугВОСЗН".
//
Процедура СписокУслугВОСЗННачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ДоступныеЗначенияВидовУслугВОСЗН.Количество() > 0 Тогда
		
		ТекущийСписокЗначений = Элемент.Родитель.ТекущиеДанные.СписокУслугВОСЗН;
		
		Оповещение = Новый ОписаниеОповещения("СписокУслугВОСЗНПослеВыбораЭлемента", ЭтотОбъект, ТекущийСписокЗначений);
		Заголовок  = "Услуги верхнего уровня, сооветствующие полю реестра """ + Элемент.Родитель.ТекущиеДанные.ПолеРеестра + """";
		
		// Устанавливаем пометки в списке доступных видов услуг в ОСЗН в соответсвии с текущим списком.
		Для Каждого ЭлементСписка Из ТекущийСписокЗначений Цикл
			НайденныйЭлемент = ДоступныеЗначенияВидовУслугВОСЗН.НайтиПоЗначению(ЭлементСписка.Значение);
			Если НайденныйЭлемент <> Неопределено Тогда
				НайденныйЭлемент.Пометка = Истина;
			КонецЕсли;
		КонецЦикла;
		
		ДоступныеЗначенияВидовУслугВОСЗН.ПоказатьОтметкуЭлементов(Оповещение, Заголовок);
		
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Данная настройка недоступна! Возможно не выбран файл выгрузки.");
	КонецЕсли; 
	
	
КонецПроцедуры // СписокУслугВОСЗННачалоВыбора()

&НаКлиенте
// Обработчик результата выбора метода "ПоказатьОтметкуЭлементов".
//
Процедура СписокУслугВОСЗНПослеВыбораЭлемента(Результат, ТекущийСписокЗначений) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		// Записываем выбранные элементы в список услуг в ОСЗН.
		ТекущийСписокЗначений.Очистить();
		
		Для Каждого ЭлементСписка Из Результат Цикл
			Если ЭлементСписка.Пометка Тогда
				ТекущийСписокЗначений.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Обнуляем пометки в списке доступных видов услуг в ОСЗН.
	ДоступныеЗначенияВидовУслугВОСЗН.ЗаполнитьПометки(Ложь);
	
КонецПроцедуры // СписокУслугВОСЗНПослеВыбораЭлемента()

#КонецОбласти

#Область КомандаОбновить

&НаКлиенте
// Обработчик команды "КомандаОбновить".
//
Процедура КомандаОбновить(Команда)
	
	Если ТаблицаСоответствияПолейРеестровИУслугВОСЗН.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаОбновитьЗавершение", ЭтотОбъект);
		
		ТекстВопроса = "При обновлении таблица будет очищена. Продолжить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ОбновитьТаблицуСоответствияПолейРеестровИУслугВОСЗН();
	КонецЕсли;
	
КонецПроцедуры // КомандаОбновить()

&НаКлиенте
// Обработчик результата опроса команды "КомандаОбновить".
//
Процедура КомандаОбновитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ТаблицаСоответствияПолейРеестровИУслугВОСЗН.Очистить();
		
		ОбновитьТаблицуСоответствияПолейРеестровИУслугВОСЗН();
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьКвартиросъемщикиЗавершение()

&НаКлиенте
// Заполняет таблицу соответствия полей реестров и видов услуг в ОСЗН по умолчанию.
//
Процедура ОбновитьТаблицуСоответствияПолейРеестровИУслугВОСЗН()
	
	// Значения полей реестров по умолчанию. 
	ПоляРеестров = Новый СписокЗначений;
	ПоляРеестров.Добавить("Содержание и тек. ремонт");
	ПоляРеестров.Добавить("Капитальный ремонт собственников жилья");
	ПоляРеестров.Добавить("Оплата за наим жилого помещения");
	ПоляРеестров.Добавить("Содержание и обслуживание лифтов");
	ПоляРеестров.Добавить("Вывоз твердых бытовых отходов");
	ПоляРеестров.Добавить("Вывоз жидких бытовых отходов");
	ПоляРеестров.Добавить("ХВС");
	ПоляРеестров.Добавить("ГВС");
	ПоляРеестров.Добавить("Водоотведение");
	ПоляРеестров.Добавить("Общедомовые нужды: ХВС");
	ПоляРеестров.Добавить("Общедомовые нужды: ГВС");
	ПоляРеестров.Добавить("Общедомовые нужды: Водоотведение");
	ПоляРеестров.Добавить("Отопление");
	ПоляРеестров.Добавить("Электроэнергия");
	ПоляРеестров.Добавить("ОДН электроэнергия");
	
	// Заполняем таблицу соответствия полей реестров.
	Для Каждого ПолеРеестра Из ПоляРеестров Цикл
		
		НоваяСтрока = ТаблицаСоответствияПолейРеестровИУслугВОСЗН.Добавить();
		НоваяСтрока.ПолеРеестра = ПолеРеестра.Значение;
		НоваяСтрока.СписокУслугВОСЗН.ТипЗначения = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(2, 0, ДопустимыйЗнак.Неотрицательный);
		
	КонецЦикла;
	
КонецПроцедуры // ОбновитьТаблицуСоответствияПолейРеестровИУслугВОСЗН()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ПрочиеПроцедурыИФункции

&НаСервере
// Сворачиваем таблицу услуг в ОСЗН из файлов выгрузки/загрузки.
//
// Параметры:
//  ИмяСворачиваемойТаблицы - Строка - имя таблицы. В данном механизме это "ДанныеОбУслугахИзФайлаВыгрузки" или "ДанныеОбУслугахИзФайлаЗагрузки".
//  ЕстьНомерУслуги         - Булево - признак наличия в таблице колонки "НомерУслуги".
//
Процедура СвернутьТаблицуСУслугамиВОСЗН(ИмяСворачиваемойТаблицы, ЕстьНомерУслуги = Ложь)
	
	тзДанныеОбУслугахИзФайла = РеквизитФормыВЗначение(ИмяСворачиваемойТаблицы, Тип("ТаблицаЗначений"));
	
	// Сворачиваем текущую таблицу.
	тзДанныеОбУслугахИзФайла.Свернуть(?(ЕстьНомерУслуги, "НомерУслуги, ВидУслугиВОСЗН, УслугаВОСЗН", "ВидУслугиВОСЗН, УслугаВОСЗН"));
	
	// Сортируем текущую таблицу.
	тзДанныеОбУслугахИзФайла.Сортировать(?(ЕстьНомерУслуги, "НомерУслуги, ВидУслугиВОСЗН", "ВидУслугиВОСЗН"));
	
	ЗначениеВРеквизитФормы(тзДанныеОбУслугахИзФайла, ИмяСворачиваемойТаблицы) ;
	
КонецПроцедуры // СвернутьТаблицуСУслугамиВОСЗН()

#КонецОбласти








