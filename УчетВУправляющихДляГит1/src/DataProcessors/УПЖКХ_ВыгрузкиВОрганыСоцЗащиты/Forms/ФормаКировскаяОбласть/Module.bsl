
//////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ДАННЫХ

#Область ЗаполнениеДанных

&НаКлиенте
// Проверяет наличие всех необходимых данных для заполнения таблиц выгрузки.
//
Функция ПроверкаУсловийДляЗаполненияТаблиц()
	
	ТекстОшибки = "";
	
	Если НЕ ЗначениеЗаполнено(Объект.Период) Тогда
		ТекстОшибки = ТекстОшибки + "Не указан период выгрузки!";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не указана организация!", "Не указана организация!");
	КонецЕсли;
	
	Если Объект.КировскаяОбласть_ТаблицаКодовУслуг.Количество() = 0 Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не заполнена таблица соответствия услуг!", "Не заполнена таблица соответствия услуг!");
	КонецЕсли;
	
	МассивПустыхКодов = Объект.КировскаяОбласть_ТаблицаКодовУслуг.НайтиСтроки(Новый Структура("КодОСЗН", 0));
	
	Если МассивПустыхКодов.Количество() = Объект.КировскаяОбласть_ТаблицаКодовУслуг.Количество() Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "В таблице соответствия услуг не указан ни один код услуги!", "В таблице соответствия услуг не указан ни один код услуги!");
	КонецЕсли;
	
	Если Объект.КировскаяОбласть_СоответствиеЛьготныхКатегорий.Количество() = 0 Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не заполнена таблица соответствия кодов льготных категорий!", "Не заполнена таблица соответствия кодов льготных категорий!");
	КонецЕсли;
	
	МассивПустыхКодов = Объект.КировскаяОбласть_СоответствиеЛьготныхКатегорий.НайтиСтроки(Новый Структура("КодЛьготнойКатегорииВОСЗН", ""));
	
	Если МассивПустыхКодов.Количество() = Объект.КировскаяОбласть_СоответствиеЛьготныхКатегорий.Количество() Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "В таблице соответствия кодов льготных категорий не указан ни один код льготной категории!", "В таблице соответствия кодов льготных категорий не указан ни один код льготной категории!");
	КонецЕсли;
	
	СтрокиСНезаполненнымВидомБюджета = Объект.КировскаяОбласть_СоответствиеЛьготныхКатегорий.НайтиСтроки(Новый Структура("ВидБюджета", ""));
	
	Если СтрокиСНезаполненнымВидомБюджета.Количество() = Объект.КировскаяОбласть_СоответствиеЛьготныхКатегорий.Количество() Тогда
		
		Текст = "В настройках выгрузки на закладке ""Соответствие льготных категорий"" ни для одной льготной категории не указан вид бюджета!";
		
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + Текст, Текст);
		
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции // ПроверкаУсловийДляЗаполненияТаблиц

&НаСервере
// Процедура заполнения всех данных на сервере.
//
Процедура ЗаполнитьНаСервере()
	
	Объект.КировскаяОбласть_ТаблицаВыгрузки.Очистить();
	
	ТаблицаДанныхФайла = Объект.КировскаяОбласть_ТаблицаВыгрузки.Выгрузить();
	
	ОбработкаОбъект = ДанныеФормыВЗначение(Объект, Тип("ОбработкаОбъект.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты"));
	ОбработкаОбъект.СформироватьТаблицуДанныхКировскаяОбласть(ТаблицаДанныхФайла, ВидБюджета, Услуги);
	ЗначениеВДанныеФормы(ОбработкаОбъект, Объект);
	
	Объект.КировскаяОбласть_ТаблицаВыгрузки.Загрузить(ТаблицаДанныхФайла);
	
КонецПроцедуры

&НаСервере
// Возвращает таблицу соответствия льготных категорий исключив из нее удаленные льготные категории.
//
Функция ИсключитьУдаленныеЛьготныеКатегории(ТаблицаЛьготныхКатегорий)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЗ.ЛьготнаяКатегорияВБазе,
	|	ТЗ.КодЛьготнойКатегорииВОСЗН,
	|	ТЗ.ВидБюджета
	|ПОМЕСТИТЬ ТЗ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗ.ЛьготнаяКатегорияВБазе,
	|	ТЗ.КодЛьготнойКатегорииВОСЗН,
	|	ТЗ.ВидБюджета
	|ИЗ
	|	ТЗ КАК ТЗ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КВП_ЛьготныеКатегории КАК КВП_ЛьготныеКатегории
	|		ПО ТЗ.ЛьготнаяКатегорияВБазе = КВП_ЛьготныеКатегории.Ссылка
	|ГДЕ
	|	НЕ КВП_ЛьготныеКатегории.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ТЗ", ТаблицаЛьготныхКатегорий);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ИсключитьУдаленныеЛьготныеКатегории

&НаСервере
// Возвращает таблицу соответствия услуг исключив из нее удаленные услуги.
//
Функция ИсключитьУдаленныеУслуги(ТаблицаУслуг)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТЗ.Услуга,
	|	ТЗ.КодОСЗН
	|ПОМЕСТИТЬ ТЗ
	|ИЗ
	|	&ТЗ КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТЗ.Услуга,
	|	ТЗ.КодОСЗН
	|ИЗ
	|	ТЗ КАК ТЗ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КВП_Услуги КАК КВП_Услуги
	|		ПО ТЗ.Услуга = КВП_Услуги.Ссылка
	|ГДЕ
	|	НЕ КВП_Услуги.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ТЗ", ТаблицаУслуг);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ИсключитьУдаленныеУслуги

&НаСервере
// Возвращает все льготные категории из справочника КВП_ЛьготныеКатегории.
//
Функция ПолучитьВсеЛьготныеКатегории()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ЛьготныеКатегории.Ссылка КАК ЛьготнаяКатегорияВБазе,
	|	"""" КАК КодЛьготнойКатегорииВОСЗН
	|ИЗ
	|	Справочник.КВП_ЛьготныеКатегории КАК КВП_ЛьготныеКатегории
	|ГДЕ
	|	НЕ КВП_ЛьготныеКатегории.ПометкаУдаления";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьВсеЛьготныеКатегории()

&НаСервере
// Возвращает все услуги из справочника КВП_Услуги.
//
Функция ПолучитьВсеУслуги()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_Услуги.Ссылка КАК Услуга,
	|	0 КАК КодОСЗН
	|ИЗ
	|	Справочник.КВП_Услуги КАК КВП_Услуги
	|ГДЕ
	|	НЕ КВП_Услуги.ПометкаУдаления";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьВсеУслуги()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ВЫГРУЗКА ФАЙЛОВ

#Область ВыгрузкаФайлов

&НаКлиенте
// Предназначена для выгрузки данных из таблицы данных в dbf-файл.
//
Процедура ВыгрузитьДанныеВФайлКировскаяОбласть()
	
	Если Объект.КировскаяОбласть_ТаблицаВыгрузки.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В таблице выгружаемых данных отсутствуют данные для выгрузки в dbf-файлы.");
		Возврат;
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Началась выгрузка данных в файлы!");
		
		ФайлВыгрузки           = Новый XBase;
		ФайлВыгрузки.Кодировка = ?(КодировкаФайла = 0, КодировкаXBase.OEM, КодировкаXBase.ANSI);
		ФайлВыгрузки.Поля.Добавить("FAMIL",      "S", 20);
		ФайлВыгрузки.Поля.Добавить("IMJA",       "S", 20);
		ФайлВыгрузки.Поля.Добавить("OTCH",       "S", 50);
		ФайлВыгрузки.Поля.Добавить("DROG",       "D", 8);
		ФайлВыгрузки.Поля.Добавить("NNASP",      "S", 50);
		ФайлВыгрузки.Поля.Добавить("NYLIC",      "S", 50);
		ФайлВыгрузки.Поля.Добавить("NDOM",       "S", 7);
		ФайлВыгрузки.Поля.Добавить("NKORP",      "S", 3);
		ФайлВыгрузки.Поля.Добавить("NKW",        "S", 15);
		ФайлВыгрузки.Поля.Добавить("KODU",       "S", 3);
		ФайлВыгрузки.Поля.Добавить("SUML1",      "N", 10, 2);
		ФайлВыгрузки.Поля.Добавить("SOB",        "N", 5, 2);
		ФайлВыгрузки.Поля.Добавить("KOLZ",       "N", 3);
		ФайлВыгрузки.Поля.Добавить("ZADOLJ",     "S", 1);
		ФайлВыгрузки.Поля.Добавить("ZADOLJ_C",   "D", 8);
		ФайлВыгрузки.Поля.Добавить("ZADOLJ_PO",  "D", 8);
		ФайлВыгрузки.Поля.Добавить("AKT",        "S", 30);
		ФайлВыгрузки.Поля.Добавить("OGRN",       "S", 15);
		ФайлВыгрузки.Поля.Добавить("SHORTNAME",  "S", 80);
		ФайлВыгрузки.Поля.Добавить("DATUPR_C",   "D", 8);
		ФайлВыгрузки.Поля.Добавить("DATUPR_PO",  "D", 8);
		ФайлВыгрузки.Поля.Добавить("SUM_ZADOLJ", "N", 10, 2);
		ФайлВыгрузки.Поля.Добавить("KOD_USLUGI", "N", 3);
		ФайлВыгрузки.Поля.Добавить("LS",         "S", 15);
		ФайлВыгрузки.Поля.Добавить("FIAS_ID",    "S", 36);
		ФайлВыгрузки.Поля.Добавить("LGMYLIST",   "S", 40);
		ФайлВыгрузки.Поля.Добавить("NEP_MES_C",  "D", 8);
		ФайлВыгрузки.Поля.Добавить("NEP_MES_PO", "D", 8);
		
		ПризнакКапремонтаВИмениФайла = "";
		
		СтруктураНастроекКапРемонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Объект.Организация);
		Если СтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет
			 И Услуги = "УслугиКапитальногоРемонта" Тогда
			
			ПризнакКапремонтаВИмениФайла = "_Капремонт";
			
		КонецЕсли;
		
		ИмяФайла = Формат(Объект.Период, "ДФ = ММгггг") + "_" + ВидБюджета + ПризнакКапремонтаВИмениФайла + ".dbf";
		
		// При создании файла .dbf имя файла может содержать не больше 8 символов,
		// поэтому итоговое имя файла задается далее с помощью метода "НачатьПеремещениеФайла".
		ФайлВыгрузки.СоздатьФайл(КаталогВыгрузки + "\OUT_F");
		ФайлВыгрузки.АвтоСохранение = Истина;
		
		Для каждого ТекСтрока Из Объект.КировскаяОбласть_ТаблицаВыгрузки Цикл
			ФайлВыгрузки.Добавить();
			ЗаполнитьЗначенияСвойств(ФайлВыгрузки, ТекСтрока);
		КонецЦикла;
		
		ФайлВыгрузки.ЗакрытьФайл();
		
		НачатьПеремещениеФайла(Новый ОписаниеОповещения("ОбработатьРезультатПеремещенияФайла", ЭтаФорма, ИмяФайла), КаталогВыгрузки + "\OUT_F" + ".DBF", КаталогВыгрузки + "\" + ИмяФайла);
		
	#КонецЕсли
	
КонецПроцедуры // ВыгрузитьДанныеВФайлКировскаяОбласть()

&НаКлиенте
// Обработчик результата перемещения файла.
//
Процедура ОбработатьРезультатПеремещенияФайла(ПеремещаемыйФайл, ДополнительныеПараметры) Экспорт
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Файл """ + ДополнительныеПараметры + """ успешно сформирован!");
	
КонецПроцедуры // ОбработатьРезультатПеремещенияФайла()

&НаСервере
// Возвращает массив различных кодов льготных категорий для выгрузки в отдельные файлы.
//
Функция ПолучитьЛьготныеКатегорииДляВыгрузки()
	
	ТаблицаВыгружаемых = Объект.КировскаяОбласть_ТаблицаВыгрузки.Выгрузить(, "KODU");
	ТаблицаВыгружаемых.Свернуть("KODU");
	
	Возврат ТаблицаВыгружаемых.ВыгрузитьКолонку("KODU");
	
КонецФункции

&НаКлиенте
// Проверяет наличие всех необходимых данных для выгрузки таблиц выгрузки.
//
Функция ПроверкаУсловийДляВыгрузкиТаблиц()
	
	ТекстОшибки = "";
	
	Если ПустаяСтрока(КаталогВыгрузки) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не указан каталог выгрузки!", "Не указан каталог выгрузки!");
	КонецЕсли;
	
	Если Объект.КировскаяОбласть_ТаблицаВыгрузки.Количество() = 0 Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не заполнена таблица выгрузки!", "Не заполнена таблица выгрузки!");
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции // ПроверкаУсловийДляВыгрузкиТаблиц

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// СОХРАНЯЕМЫЕ НАСТРОЙКИ

#Область РаботаСНастройками

&НаСервере
// Процедура восстановления настроек.
//
Процедура ВосстановитьНастройки()
	
	СтруктураПараметров = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("КировскаяОбласть_ВыгрузкаВОСЗН", "ПараметрыВыгрузки");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		СтруктураПараметров.Свойство("КаталогВыгрузки", КаталогВыгрузки);
		СтруктураПараметров.Свойство("ПериодВыгрузки",  Объект.Период);
		СтруктураПараметров.Свойство("КодировкаФайла",  КодировкаФайла);
		СтруктураПараметров.Свойство("Услуги",          Услуги);
		
		врТаблицаЛьготныхКатегорий = Новый ТаблицаЗначений;
		врТаблицаУслуг             = Новый ТаблицаЗначений;
		
		СтруктураПараметров.Свойство("КировскаяОбласть_СоответствиеЛьготныхКатегорий", врТаблицаЛьготныхКатегорий);
		
		Если врТаблицаЛьготныхКатегорий.Колонки.Найти("ВидБюджета") = Неопределено Тогда
			врТаблицаЛьготныхКатегорий.Колонки.Добавить("ВидБюджета", Новый ОписаниеТипов("Строка", , , Новый КвалификаторыСтроки(11)));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(врТаблицаЛьготныхКатегорий) > 0 Тогда
			врТаблицаЛьготныхКатегорий = ИсключитьУдаленныеЛьготныеКатегории(врТаблицаЛьготныхКатегорий);
			Объект.КировскаяОбласть_СоответствиеЛьготныхКатегорий.Загрузить(врТаблицаЛьготныхКатегорий);
		КонецЕсли;
		
		СтруктураПараметров.Свойство("КировскаяОбласть_ТаблицаКодовУслуг", врТаблицаУслуг);
		
		Если ЗначениеЗаполнено(врТаблицаУслуг) > 0 Тогда
			врТаблицаУслуг = ИсключитьУдаленныеУслуги(врТаблицаУслуг);
			Объект.КировскаяОбласть_ТаблицаКодовУслуг.Загрузить(врТаблицаУслуг);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура сохранения настроек.
//
Процедура СохранитьНастройки()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КаталогВыгрузки", КаталогВыгрузки);
	СтруктураПараметров.Вставить("ПериодВыгрузки",  Объект.Период);
	СтруктураПараметров.Вставить("КодировкаФайла",  КодировкаФайла);
	СтруктураПараметров.Вставить("Услуги",          Услуги);
	
	СтруктураПараметров.Вставить("КировскаяОбласть_СоответствиеЛьготныхКатегорий", Объект.КировскаяОбласть_СоответствиеЛьготныхКатегорий.Выгрузить());
	СтруктураПараметров.Вставить("КировскаяОбласть_ТаблицаКодовУслуг",             Объект.КировскаяОбласть_ТаблицаКодовУслуг.Выгрузить());
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("КировскаяОбласть_ВыгрузкаВОСЗН", "ПараметрыВыгрузки", СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// РАБОТА С ВРЕМЕННЫМ ХРАНИЛИЩЕМ

#Область РаботаСВременнымХранилищем

&НаСервере
// Помещает настройки во временное хранилище.
//
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("КировскаяОбласть_ТаблицаКодовУслуг",             Объект.КировскаяОбласть_ТаблицаКодовУслуг.Выгрузить());
	СтруктураНастроек.Вставить("КировскаяОбласть_СоответствиеЛьготныхКатегорий", Объект.КировскаяОбласть_СоответствиеЛьготныхКатегорий.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
// Получает настройки из временного хранилища.
//
Функция ПолучитьНастройкиИзХранилища(АдресНастроекВХранилище)
	
	СтруктураНастроек = ПолучитьИзВременногоХранилища(АдресНастроекВХранилище);
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		
		Если СтруктураНастроек.Свойство("КировскаяОбласть_ТаблицаКодовУслуг") Тогда
			Объект.КировскаяОбласть_ТаблицаКодовУслуг.Загрузить(СтруктураНастроек.КировскаяОбласть_ТаблицаКодовУслуг);
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("КировскаяОбласть_СоответствиеЛьготныхКатегорий") Тогда
			Объект.КировскаяОбласть_СоответствиеЛьготныхКатегорий.Загрузить(СтруктураНастроек.КировскаяОбласть_СоответствиеЛьготныхКатегорий);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	ТекРабДата = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	Объект.Период = ТекРабДата;
	
	ВосстановитьНастройки();
	
	ВсеЛьготныеКатегории = ПолучитьВсеЛьготныеКатегории();
	ВсеУслуги            = ПолучитьВсеУслуги();
	
	Если Объект.КировскаяОбласть_СоответствиеЛьготныхКатегорий.Количество() = 0 Тогда
		Объект.КировскаяОбласть_СоответствиеЛьготныхКатегорий.Загрузить(ВсеЛьготныеКатегории);
	ИначеЕсли НЕ ВсеЛьготныеКатегории.Количество() = Объект.КировскаяОбласть_СоответствиеЛьготныхКатегорий.Количество() Тогда
		ЕстьИзменения = Ложь;
		КоличествоСтр = ВсеЛьготныеКатегории.Количество();
		Для Сч = 1 По КоличествоСтр Цикл
			СтрВсехЛьготныхКатегорий = ВсеЛьготныеКатегории.Получить(КоличествоСтр - Сч);
			Если Объект.КировскаяОбласть_СоответствиеЛьготныхКатегорий.НайтиСтроки(Новый Структура("ЛьготнаяКатегорияВБазе", СтрВсехЛьготныхКатегорий.ЛьготнаяКатегорияВБазе)).Количество() > 0 Тогда
				ЕстьИзменения = Истина;
				ВсеЛьготныеКатегории.Удалить(СтрВсехЛьготныхКатегорий);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрЛьготныхКатегорий Из ВсеЛьготныеКатегории Цикл
			НовСтрОбщегоСписка = Объект.КировскаяОбласть_СоответствиеЛьготныхКатегорий.Добавить();
			НовСтрОбщегоСписка.ЛьготнаяКатегорияВБазе = СтрЛьготныхКатегорий.ЛьготнаяКатегорияВБазе;
		КонецЦикла;
		Если ЕстьИзменения Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Изменен список льготных категорий, необходимо проверить соответствие кодов льготным категориям на форме настроек.");
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.КировскаяОбласть_ТаблицаКодовУслуг.Количество() = 0 Тогда
		Объект.КировскаяОбласть_ТаблицаКодовУслуг.Загрузить(ВсеУслуги);
	ИначеЕсли НЕ ВсеУслуги.Количество() = Объект.КировскаяОбласть_ТаблицаКодовУслуг.Количество() Тогда
		ЕстьИзменения = Ложь;
		КоличествоСтр = ВсеУслуги.Количество();
		Для Сч = 1 По КоличествоСтр Цикл
			СтрВсехУслуг = ВсеУслуги.Получить(КоличествоСтр - Сч);
			Если Объект.КировскаяОбласть_ТаблицаКодовУслуг.НайтиСтроки(Новый Структура("Услуга", СтрВсехУслуг.Услуга)).Количество() > 0 Тогда
				ЕстьИзменения = Истина;
				ВсеУслуги.Удалить(СтрВсехУслуг);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрУслуг Из ВсеУслуги Цикл
			НовСтрОбщегоСписка = Объект.КировскаяОбласть_ТаблицаКодовУслуг.Добавить();
			НовСтрОбщегоСписка.Услуга = СтрУслуг.Услуга;
		КонецЦикла;
		Если ЕстьИзменения Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Изменен список услуг, необходимо проверить соответствие кодов услуг на форме настроек.");
		КонецЕсли;
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
	ВидБюджета = "Федеральный";
	
	// Получение настроек учета кап. ремонта.
	СтруктураНастроекКапРемонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Объект.Организация);
	
	Элементы.Услуги.Видимость = СтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет;
	
	Если СтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет
		 И Услуги = "" Тогда
		
		Услуги = "ВсеУслуги";
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки();
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "КомандаНастройка".
//
Процедура КомандаНастройка(Команда)
	
	АдресНастроекВХранилище = ПоместитьНастройкиВХранилище();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаНастройкаЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты.Форма.КировскаяОбласть_ФормаНастройки", Новый Структура("АдресНастроекВХранилище", АдресНастроекВХранилище), , , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата опроса команды "КомандаНастройка".
//
Процедура КомандаНастройкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		ПолучитьНастройкиИзХранилища(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаЗаполнить".
//
Процедура КомандаЗаполнить(Команда)
	
	ТекстОшибки = ПроверкаУсловийДляЗаполненияТаблиц();
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если Объект.КировскаяОбласть_ТаблицаВыгрузки.Количество() > 0 Тогда
		Оповещение   = Новый ОписаниеОповещения("КомандаЗаполнитьЗавершение", ЭтаФорма);
		ТекстВопроса = "Перед заполением таблица выгрузки будет очищена. Заполнить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьНаСервере();
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнить()

&НаКлиенте
// Обработчик результата опроса команды "КомандаЗаполнитьВсе".
//
Процедура КомандаЗаполнитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьНаСервере();
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьВсеЗавершение()

&НаКлиенте
// Обработчик команды "КомандаВыгрузить".
//
Процедура КомандаВыгрузить(Команда)
	
	ТекстОшибки = ПроверкаУсловийДляВыгрузкиТаблиц();
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	// Проверяем каталог на существование.
	Каталог = Новый Файл(КаталогВыгрузки);
	Каталог.НачатьПроверкуСуществования(Новый ОписаниеОповещения("КомандаВыгрузитьЗавершениеКаталогСуществует",ЭтотОбъект,
																 Новый Структура("Каталог", Каталог)));
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата команды "КомандаВыгрузить".
//
Процедура КомандаВыгрузитьЗавершениеКаталогСуществует(Существует, ДополнительныеПараметры) Экспорт
	
	Каталог = ДополнительныеПараметры.Каталог;
	
	Если Не Существует Тогда
		ПоказатьПредупреждение(Неопределено, "Каталог выгрузки не найден");
		Возврат;
	КонецЕсли;
	
	Каталог.НачатьПроверкуЭтоКаталог(Новый ОписаниеОповещения("КомандаВыгрузитьЗавершениеЭтоКаталог",ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата команды "КомандаВыгрузить".
//
Процедура КомандаВыгрузитьЗавершениеЭтоКаталог(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Если Не ЭтоКаталог Тогда
		ПоказатьПредупреждение(Неопределено, "Каталог выгрузки не найден");
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДанныеВФайлКировскаяОбласть();
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

////////////////////////
// Диалог выбора файла

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Каталог выгрузки".
//
Процедура КаталогВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла                             = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Заголовок                   = "Выбор каталога файлов";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	ДиалогВыбораФайла.Каталог                     = КаталогВыгрузки;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("КаталогВыгрузкиНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла)));
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик результата работы диалога выбора файла
//
Процедура КаталогВыгрузкиНачалоВыбораЗавершение(ВыбранныйКаталог, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если (ВыбранныйКаталог <> Неопределено) Тогда
		КаталогВыгрузки = ДиалогВыбораФайла.Каталог;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Открытие" поля "Каталог выгрузки".
//
Процедура КаталогВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НачатьЗапускПриложения(Новый ОписаниеОповещения("КаталогВыгрузкиОткрытиеЗавершение", ЭтотОбъект), КаталогВыгрузки);
	
КонецПроцедуры // КаталогВыгрузкиОткрытие()

&НаКлиенте
// Процедура - обработчик результата запуска приложения
//
Процедура КаталогВыгрузкиОткрытиеЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	// Заглушка, т.к. в НачатьЗапускПриложения первый параметр обязательный.
	ЭтаПеременнаяЧтобыНеРугаласьПроверкаКонфигурацииНаПустойОбработчик = Неопределено;
	
КонецПроцедуры

////////////////////////
// Период

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПериодСтрокой".
Процедура ПериодСтрокойПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Модифицированность);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ПериодСтрокой".
Процедура ПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Регулирование" поля "ПериодСтрокой".
Процедура ПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Направление,
														Модифицированность);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "ПериодСтрокой".
Процедура ПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "ПериодСтрокой".
Процедура ПериодСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти
