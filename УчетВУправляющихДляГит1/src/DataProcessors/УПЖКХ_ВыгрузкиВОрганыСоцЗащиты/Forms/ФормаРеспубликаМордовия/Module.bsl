
//////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункции

&НаСервере
// Формирует массив сокращений для Томской области для выбранного вида сокращения.
//
Функция СформироватьМассивСокращениеДляРеспМордовияПоВиду(ВидСокращение)
	
	МассивСокращений = Новый Массив;
	// Для регионов.
	Если ВидСокращение = 1 Тогда
		МассивСокращений.Добавить("обл");
		// Для районов.
	ИначеЕсли ВидСокращение = 2 Тогда
		МассивСокращений.Добавить("р-н");
		МассивСокращений.Добавить("р-н.");
		// Для городов.
	ИначеЕсли ВидСокращение = 3 Тогда
		МассивСокращений.Добавить("г");
		МассивСокращений.Добавить("г.");
		// Для нас.пунктов.
	ИначеЕсли ВидСокращение = 4 Тогда
		МассивСокращений.Добавить("рп");
		МассивСокращений.Добавить("п");
		МассивСокращений.Добавить("с");
		МассивСокращений.Добавить("д");
		МассивСокращений.Добавить("х");
		МассивСокращений.Добавить("ст");
		МассивСокращений.Добавить("пгт");
		МассивСокращений.Добавить("дп");
		МассивСокращений.Добавить("рзд");
		МассивСокращений.Добавить("мкр");
		МассивСокращений.Добавить("нп");
		МассивСокращений.Добавить("тер");
		МассивСокращений.Добавить("п/ст");
		МассивСокращений.Добавить("промзона");
		МассивСокращений.Добавить("снт");
		МассивСокращений.Добавить("п/о");
		МассивСокращений.Добавить("городок");
		МассивСокращений.Добавить("заимка");
		МассивСокращений.Добавить("кп");
		МассивСокращений.Добавить("ж/д_казарм");
		МассивСокращений.Добавить("г");
		МассивСокращений.Добавить("обл");
		МассивСокращений.Добавить("рп.");
		МассивСокращений.Добавить("п.");
		МассивСокращений.Добавить("с.");
		МассивСокращений.Добавить("д.");
		МассивСокращений.Добавить("х.");
		МассивСокращений.Добавить("ст.");
		МассивСокращений.Добавить("пгт.");
		МассивСокращений.Добавить("дп.");
		МассивСокращений.Добавить("рзд.");
		МассивСокращений.Добавить("мкр.");
		МассивСокращений.Добавить("нп.");
		МассивСокращений.Добавить("тер.");
		МассивСокращений.Добавить("п/ст.");
		МассивСокращений.Добавить("промзона.");
		МассивСокращений.Добавить("снт.");
		МассивСокращений.Добавить("п/о.");
		МассивСокращений.Добавить("городок.");
		МассивСокращений.Добавить("заимка.");
		МассивСокращений.Добавить("кп.");
		МассивСокращений.Добавить("ж/д_казарм.");
		МассивСокращений.Добавить("г.");
		МассивСокращений.Добавить("обл.");
		// Для улиц.
	ИначеЕсли ВидСокращение = 5 Тогда
		МассивСокращений.Добавить("ул");
		МассивСокращений.Добавить("тер");
		МассивСокращений.Добавить("пл");
		МассивСокращений.Добавить("пер");
		МассивСокращений.Добавить("снт");
		МассивСокращений.Добавить("проезд");
		МассивСокращений.Добавить("б-р");
		МассивСокращений.Добавить("туп");
		МассивСокращений.Добавить("п");
		МассивСокращений.Добавить("ш");
		МассивСокращений.Добавить("пр-кт");
		МассивСокращений.Добавить("тракт");
		МассивСокращений.Добавить("сквер");
		МассивСокращений.Добавить("ст");
		МассивСокращений.Добавить("наб");
		МассивСокращений.Добавить("км");
		МассивСокращений.Добавить("ж/д_ст");
		МассивСокращений.Добавить("сад");
		МассивСокращений.Добавить("парк");
		МассивСокращений.Добавить("уч-к");
		МассивСокращений.Добавить("мкр");
		МассивСокращений.Добавить("городок");
		МассивСокращений.Добавить("кв-л");
		МассивСокращений.Добавить("нп");
		МассивСокращений.Добавить("остров");
		МассивСокращений.Добавить("гск");
		МассивСокращений.Добавить("линия");
		МассивСокращений.Добавить("рзд");
		МассивСокращений.Добавить("стр");
		МассивСокращений.Добавить("аллея");
		МассивСокращений.Добавить("казарма");
		МассивСокращений.Добавить("ж/д_рзд");
		МассивСокращений.Добавить("д");
		МассивСокращений.Добавить("ж/д_казарм");
		МассивСокращений.Добавить("ж/д_будка");
		МассивСокращений.Добавить("высел");
		МассивСокращений.Добавить("ул.");
		МассивСокращений.Добавить("тер.");
		МассивСокращений.Добавить("пл.");
		МассивСокращений.Добавить("пер.");
		МассивСокращений.Добавить("снт.");
		МассивСокращений.Добавить("проезд.");
		МассивСокращений.Добавить("б-р.");
		МассивСокращений.Добавить("туп.");
		МассивСокращений.Добавить("п.");
		МассивСокращений.Добавить("ш.");
		МассивСокращений.Добавить("пр-кт.");
		МассивСокращений.Добавить("тракт.");
		МассивСокращений.Добавить("сквер.");
		МассивСокращений.Добавить("ст.");
		МассивСокращений.Добавить("наб.");
		МассивСокращений.Добавить("км.");
		МассивСокращений.Добавить("ж/д_ст.");
		МассивСокращений.Добавить("сад.");
		МассивСокращений.Добавить("парк.");
		МассивСокращений.Добавить("уч-к.");
		МассивСокращений.Добавить("мкр.");
		МассивСокращений.Добавить("городок.");
		МассивСокращений.Добавить("кв-л.");
		МассивСокращений.Добавить("нп.");
		МассивСокращений.Добавить("остров.");
		МассивСокращений.Добавить("гск.");
		МассивСокращений.Добавить("линия.");
		МассивСокращений.Добавить("рзд.");
		МассивСокращений.Добавить("стр.");
		МассивСокращений.Добавить("аллея.");
		МассивСокращений.Добавить("казарма.");
		МассивСокращений.Добавить("ж/д_рзд.");
		МассивСокращений.Добавить("д.");
		МассивСокращений.Добавить("ж/д_казарм.");
		МассивСокращений.Добавить("ж/д_будка.");
		МассивСокращений.Добавить("высел.");
	КонецЕсли;
	
	Возврат МассивСокращений;
	
КонецФункции // СформироватьМассивСокращениеДляСвердловскойОблПоВиду()

&НаСервере
// Функция сокращает название города или улицы: убирает сокращения,
// определяющие тип данного элемента адреса: "г.", "ул." и так далее.
//
// Параметры:
//  Ресурс       - Строка - элемент адреса.
//
// Возвращаемое значение:
//  Строка - элемент адреса в сокращенном виде.
//
Функция НормализацияПолейАдресаОбласти(Ресурс, Массив)
	
	Найден = Истина;
	
	Для Каждого Элемент Из Массив Цикл
		
		Если Прав(СокрЛП(Ресурс), СтрДлина(Элемент)) = Элемент Тогда
			ПредСимвол = Сред(СокрЛП(Ресурс), СтрДлина(СокрЛП(Ресурс)) - СтрДлина(Элемент), 1);
			
			Если ПредСимвол = " " Тогда
				Возврат СокрЛП(Лев(СокрЛП(Ресурс), СтрДлина(СокрЛП(Ресурс)) - СтрДлина(Элемент)));
			КонецЕсли;
		ИначеЕсли Лев(СокрЛП(Ресурс), СтрДлина(Элемент)) = Элемент Тогда
			СледСимвол = Сред(СокрЛП(Ресурс), СтрДлина(Элемент) + 1, 1);
			
			Если СледСимвол = " " Тогда
				Возврат СокрЛП(Сред(СокрЛП(Ресурс), СтрДлина(Элемент) + 1));
			КонецЕсли;
		Иначе
			
			Найден = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Найден = Ложь Тогда
		Возврат Ресурс;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// СОХРАНЯЕМЫЕ НАСТРОЙКИ

#Область РаботаСНастройками

&НаСервере
// Процедура восстановления настроек.
//
Процедура ВосстановитьНастройки()
	
	СтруктураПараметров = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("РеспубликаМордовия_ВыгрузкаВОСЗН", "ПараметрыВыгрузки");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		СтруктураПараметров.Свойство("ИмяФайлаЗагрузки",            ИмяФайлаЗагрузки);
		СтруктураПараметров.Свойство("КаталогВыгрузки",             КаталогВыгрузки);
		СтруктураПараметров.Свойство("КодировкаФайла",              КодировкаФайла);
		СтруктураПараметров.Свойство("ФорматВыгрузки",              ФорматВыгрузки);
		СтруктураПараметров.Свойство("ВыводРеквизитаЛицевогоСчета", Объект.ВыводРеквизитаЛицевогоСчета);
		
		врТаблицаУслугВОСЗН = Новый ТаблицаЗначений;
		врТаблицаУслугВБазе = Новый ТаблицаЗначений;
		
		СтруктураПараметров.Свойство("РеспубликаМордовия_ЖКУ", врТаблицаУслугВОСЗН);
		Если НЕ врТаблицаУслугВОСЗН = Неопределено Тогда
			Объект.РеспубликаМордовия_ТаблицаУслуг.Загрузить(врТаблицаУслугВОСЗН);
		КонецЕсли;
		
		СтруктураПараметров.Свойство("РеспубликаМордовия_ЖКУ_ВБазе", врТаблицаУслугВБазе);
		Если НЕ врТаблицаУслугВБазе = Неопределено Тогда
			Объект.РеспубликаМордовия_ТаблицаУслугДляВыгрузки.Загрузить(врТаблицаУслугВБазе);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура сохранения настроек.
//
Процедура СохранитьНастройки()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяФайлаЗагрузки",             ИмяФайлаЗагрузки);
	СтруктураПараметров.Вставить("КаталогВыгрузки",              КаталогВыгрузки);
	СтруктураПараметров.Вставить("КодировкаФайла",               КодировкаФайла);
	СтруктураПараметров.Вставить("ФорматВыгрузки",               ФорматВыгрузки);
	СтруктураПараметров.Вставить("ВыводРеквизитаЛицевогоСчета",  Объект.ВыводРеквизитаЛицевогоСчета);
	СтруктураПараметров.Вставить("РеспубликаМордовия_ЖКУ",       Объект.РеспубликаМордовия_ТаблицаУслуг.Выгрузить());
	СтруктураПараметров.Вставить("РеспубликаМордовия_ЖКУ_ВБазе", Объект.РеспубликаМордовия_ТаблицаУслугДляВыгрузки.Выгрузить());
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("РеспубликаМордовия_ВыгрузкаВОСЗН", "ПараметрыВыгрузки", СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// РАБОТА С ВРЕМЕННЫМ ХРАНИЛИЩЕМ

#Область РаботаСВременнымХранилищем

&НаСервере
// Помещает настройки во временное хранилище.
//
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ВыводРеквизитаЛицевогоСчета",  Объект.ВыводРеквизитаЛицевогоСчета);
	СтруктураНастроек.Вставить("РеспубликаМордовия_ЖКУ",       Объект.РеспубликаМордовия_ТаблицаУслуг.Выгрузить());
	СтруктураНастроек.Вставить("РеспубликаМордовия_ЖКУ_ВБазе", Объект.РеспубликаМордовия_ТаблицаУслугДляВыгрузки.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
// Получает настройки из временного хранилища.
//
Функция ПолучитьНастройкиИзХранилища(АдресНастроекВХранилище)
	
	СтруктураНастроек = ПолучитьИзВременногоХранилища(АдресНастроекВХранилище);
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		
		Если СтруктураНастроек.Свойство("ВыводРеквизитаЛицевогоСчета") Тогда
			Объект.ВыводРеквизитаЛицевогоСчета = СтруктураНастроек.ВыводРеквизитаЛицевогоСчета;
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("РеспубликаМордовия_ЖКУ") Тогда
			Объект.РеспубликаМордовия_ТаблицаУслуг.Загрузить(СтруктураНастроек.РеспубликаМордовия_ЖКУ);
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("РеспубликаМордовия_ЖКУ_ВБазе") Тогда
			Объект.РеспубликаМордовия_ТаблицаУслугДляВыгрузки.Загрузить(СтруктураНастроек.РеспубликаМордовия_ЖКУ_ВБазе);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ДАННЫХ

#Область ЗаполнениеДанных

&НаКлиенте
// Проверяет наличие всех необходимых данных для заполнения таблиц выгрузки.
//
Функция ПроверкаУсловийДляЗаполненияТаблиц()
	
	ТекстОшибки = "";
	
	Если НЕ ЗначениеЗаполнено(Объект.Период) Тогда
		ТекстОшибки = ТекстОшибки + "Не указан период выгрузки!";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не указана организация!", "Не указан организация!");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяФайлаЗагрузки) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не указан файл загрузки!", "Не указан файл загрузки!");
	КонецЕсли;
	
	Если Объект.РеспубликаМордовия_ТаблицаУслугДляВыгрузки.Количество() = 0 Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не заполнена таблица соответствия услуг на форме настроек выгрузки!", "Не заполнена таблица соответствия услуг на форме настроек выгрузки!");
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции // ПроверкаУсловийДляЗаполненияТаблиц

&НаСервере
// Процедура загрузки данных из файла.
//
Процедура ЗагрузитьНаСервере(ПутьКФайлу)
	
	// Запись временных данных во временный файл.
	врДанныеФайла = ПолучитьИзВременногоХранилища(ПутьКФайлу);
	ВременныйФайл = ПолучитьИмяВременногоФайла("DBF");
	
	// Для чтения *.dbf формата урежем имя временного файла.
	ФайлДБФ = Новый Файл(ВременныйФайл);
	СтароеИмяФайла = ФайлДБФ.ИмяБезРасширения + ".DBF";
	НовоеИмяФайла = Лев(ФайлДБФ.ИмяБезРасширения, 8) + ".DBF";
	ВременныйФайл = СтрЗаменить(ФайлДБФ.ПолноеИмя, СтароеИмяФайла, НовоеИмяФайла);
	
	врДанныеФайла.Записать(ВременныйФайл);
	
	// Загрузка.
	ФайлДБФ = Новый XBase;
	#Если НЕ ВебКлиент Тогда
	ФайлДБФ.Кодировка = ?(КодировкаФайла = 0, КодировкаXBase.OEM, КодировкаXBase.ANSI);
	#КонецЕсли
	ФайлДБФ.ОткрытьФайл(ВременныйФайл, , Истина);
	
	МассивСокрНасПункт = СформироватьМассивСокращениеДляРеспМордовияПоВиду(4);
	МассивСокрУлицы    = СформироватьМассивСокращениеДляРеспМордовияПоВиду(5);
	
	ТаблицаДанныхФайла = Объект.РеспубликаМордовия_ТаблицаДанных.Выгрузить();
	ТаблицаДанныхФайла.Колонки.Добавить("FMВрег", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(20));
	ТаблицаДанныхФайла.Колонки.Добавить("IMВрег", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(20));
	ТаблицаДанныхФайла.Колонки.Добавить("OTВрег", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(20));
	ТаблицаДанныхФайла.Колонки.Добавить("GORODВрег", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(30));
	ТаблицаДанныхФайла.Колонки.Добавить("ULВрег", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(36));
	
	КолВоСтрокВФайле = 0;
	
	Если ФайлДБФ.Открыта() = Истина Тогда
		
		ТаблицаДанныхФайла.Очистить();
		ПервыйПроход = Истина;
		
		Пока Не ФайлДБФ.ВКонце() Цикл
			
			Если ПервыйПроход И (НЕ ВРег(СокрЛП(ФайлДБФ.DATPR)) = ВРег(Формат(Объект.Период, "ДФ='MMММ yyyy'"))) Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Файл загрузки принадлежит периоду: " + СокрЛП(ФайлДБФ.DATPR) + ". Данные заполнены за период: " + Формат(Объект.Период, "ДФ='MMММ yyyy'"));
				ПервыйПроход = Ложь;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаДанныхФайла.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ФайлДБФ);
			НоваяСтрока.FMВрег    = ВРег(СокрЛП(ФайлДБФ.FM));
			НоваяСтрока.IMВрег    = ВРег(СокрЛП(ФайлДБФ.IM));
			НоваяСтрока.OTВрег    = ВРег(СокрЛП(ФайлДБФ.OT));
			НоваяСтрока.GORODВрег = ВРег(НормализацияПолейАдресаОбласти(СокрЛП(ФайлДБФ.GOROD), МассивСокрНасПункт));
			НоваяСтрока.ULВрег    = ВРег(НормализацияПолейАдресаОбласти(СокрЛП(ФайлДБФ.UL), МассивСокрУлицы));
			НоваяСтрока.KORP      = СокрЛП(ФайлДБФ.KORP);
			НоваяСтрока.DM        = СокрЛП(ФайлДБФ.DM);
			
			Попытка
				НоваяСтрока.KV = Число(СокрЛП(ФайлДБФ.KV));
			Исключение
				НоваяСтрока.KV = 1;
			КонецПопытки;
			
			КолВоСтрокВФайле = КолВоСтрокВФайле + 1;
			ФайлДБФ.Следующая();
			
		КонецЦикла;
		
	КонецЕсли;
	
	ФайлДБФ.ЗакрытьФайл();
	
	ЗаполнитьНаСервере(ТаблицаДанныхФайла, КолВоСтрокВФайле);
	
КонецПроцедуры

&НаСервере
// Процедура заполнения всех данных.
//
Процедура ЗаполнитьНаСервере(ТаблицаДанныхФайла, КолВоСтрокВФайле)
	
	ОбработкаОбъект = ДанныеФормыВЗначение(Объект, Тип("ОбработкаОбъект.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты"));
	ОбработкаОбъект.СформироватьТаблицуДанныхРеспубликаМордовия(ТаблицаДанныхФайла, ФорматВыгрузки);
	ЗначениеВДанныеФормы(ОбработкаОбъект, Объект);
	
	Объект.РеспубликаМордовия_ТаблицаДанных.Загрузить(ТаблицаДанныхФайла);
	
	Объект.РеспубликаМордовия_ТаблицаДанных.Сортировать("ПризнакЗадвоения, Проживающий");
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("В файле загрузки: " + КолВоСтрокВФайле + " строк(и)." + Символы.ПС + "В таблице выгрузки: " + Объект.РеспубликаМордовия_ТаблицаДанных.Количество() + " строк(и).");
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ВЫГРУЗКА ФАЙЛОВ

#Область ВыгрузкаФайлов

&НаКлиенте
// Предназначена для выгрузки данных из таблицы данных в dbf-файл.
//
Процедура ВыгрузитьДанныеВФайлРеспубликаМордовия()
	
	Если Объект.РеспубликаМордовия_ТаблицаДанных.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В таблице выгружаемых данных отсутствуют данные для выгрузки в dbf-файл.");
		Возврат;
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Началась выгрузка таблицы в файл!");
	
	ФайлВыгрузки           = Новый XBase;
	#Если НЕ ВебКлиент Тогда
	ФайлВыгрузки.Кодировка = ?(КодировкаФайла = 0, КодировкаXBase.OEM, КодировкаXBase.ANSI);
	#КонецЕсли
	ФайлВыгрузки.Поля.Добавить("A_SPUNID", "S", 50);
	ФайлВыгрузки.Поля.Добавить("A_SPUN",   "S", 50);
	ФайлВыгрузки.Поля.Добавить("FM",       "S", 20);
	ФайлВыгрузки.Поля.Добавить("IM",       "S", 20);
	ФайлВыгрузки.Поля.Добавить("OT",       "S", 20);
	ФайлВыгрузки.Поля.Добавить("DROG",     "D");
	ФайлВыгрузки.Поля.Добавить("SERP",     "S", 10);
	ФайлВыгрузки.Поля.Добавить("NOMP",     "S", 10);
	ФайлВыгрузки.Поля.Добавить("GOROD",    "S", 30);
	ФайлВыгрузки.Поля.Добавить("UL",       "S", 36);
	ФайлВыгрузки.Поля.Добавить("DM",       "S", 15);
	ФайлВыгрузки.Поля.Добавить("KORP",     "S", 15);
	ФайлВыгрузки.Поля.Добавить("KV",       "S", 15);
	ФайлВыгрузки.Поля.Добавить("DATS",     "D");
	ФайлВыгрузки.Поля.Добавить("DATPO",    "D");
	ФайлВыгрузки.Поля.Добавить("SUB",      "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("DATPR",    "S", 15);
	ФайлВыгрузки.Поля.Добавить("KHLS",     "N", 2);
	ФайлВыгрузки.Поля.Добавить("A_MD5",    "S", 50);
	ФайлВыгрузки.Поля.Добавить("LCHET",    "S", 24);
	ФайлВыгрузки.Поля.Добавить("KREG",     "N", 2);
	ФайлВыгрузки.Поля.Добавить("ZADOL",    "S", 1);
	ФайлВыгрузки.Поля.Добавить("SUM_Z",    "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("DAT_Z",    "D");
	ФайлВыгрузки.Поля.Добавить("SUMUSL1",  "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUMUSL2",  "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUMUSL3",  "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUMUSL4",  "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUMUSL5",  "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUMUSL6",  "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUMUSL7",  "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUMUSL8",  "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUMUSL9",  "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUMUSL10", "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUMUSL11", "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUMUSL12", "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUMUSL13", "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUMUSL14", "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUMUSL15", "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUMUSL16", "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUMUSL17", "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUMUSL18", "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUMUSL19", "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUMUSL20", "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUMUSL21", "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUM1",     "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUM2",     "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUM3",     "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUM4",     "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUM5",     "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUM6",     "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUM7",     "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUM8",     "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUM9",     "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUM10",    "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUM11",    "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUM12",    "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUM13",    "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUM14",    "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUM15",    "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUM16",    "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUM17",    "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUM18",    "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUM19",    "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUM20",    "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUM21",    "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUM22",    "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUM23",    "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUM24",    "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUM25",    "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUM26",    "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUM27",    "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUM28",    "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUM29",    "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUM30",    "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUM31",    "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUM32",    "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUM33",    "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUM34",    "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUM35",    "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUM36",    "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("SUM37",    "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("DATS1",    "D");
	ФайлВыгрузки.Поля.Добавить("DATPO1",   "D");
	ФайлВыгрузки.Поля.Добавить("DATS2",    "D");
	ФайлВыгрузки.Поля.Добавить("DATPO2",   "D");
	ФайлВыгрузки.Поля.Добавить("DATS3",    "D");
	ФайлВыгрузки.Поля.Добавить("DATPO3",   "D");
	ФайлВыгрузки.Поля.Добавить("DATS4",    "D");
	ФайлВыгрузки.Поля.Добавить("DATPO4",   "D");
	ФайлВыгрузки.Поля.Добавить("KAT",      "S", 200);
	ФайлВыгрузки.Поля.Добавить("LGOTA",    "S", 50);
	ФайлВыгрузки.Поля.Добавить("KHLS1",    "N", 3);
	ФайлВыгрузки.Поля.Добавить("KHLS2",    "N", 3);
	ФайлВыгрузки.Поля.Добавить("KHLS3",    "N", 3);
	ФайлВыгрузки.Поля.Добавить("KHLS4",    "N", 3);
	ФайлВыгрузки.Поля.Добавить("OPL",      "N", 10, 2);
	ФайлВыгрузки.Поля.Добавить("KOM",      "N", 2);
	
	ФайлВыгрузки.СоздатьФайл(КаталогВыгрузки + "\OUT_FILE.dbf",);
	ФайлВыгрузки.АвтоСохранение = Истина;
	
	Для каждого ТекСтрока Из Объект.РеспубликаМордовия_ТаблицаДанных Цикл
		ФайлВыгрузки.Добавить();
		ЗаполнитьЗначенияСвойств(ФайлВыгрузки, ТекСтрока);
		ФайлВыгрузки.KV = Строка(ТекСтрока.KV);
	КонецЦикла;
	
	ИмяФайла = "\F" + Формат(Объект.Период, "ДФ=yyyy") + Формат(Объект.Период, "ДФ=MM") + ?(ФорматВыгрузки = 0, " Льготы", " Субсидии") + ".dbf";
	
	ФайлВыгрузки.ЗакрытьФайл();
	НачатьПеремещениеФайла(Новый ОписаниеОповещения("ОбработатьРезультатПеремещенияФайла", ЭтаФорма, ИмяФайла), КаталогВыгрузки + "\OUT_FILE.DBF", КаталогВыгрузки + ИмяФайла);
	
КонецПроцедуры // ВыгрузитьДанныеВФайлРеспубликаМордовия()

&НаКлиенте
// Обработчик результата перемещения файла.
//
Процедура ОбработатьРезультатПеремещенияФайла(ПеремещаемыйФайл, ДополнительныеПараметры) Экспорт
	
	Текст = "Выгрузка в файл " + ДополнительныеПараметры + " завершена!";
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(Текст);
	
КонецПроцедуры // ОбработатьРезультатПеремещенияФайла()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	ТекРабДата         = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	Объект.Период      = ТекРабДата;
	
	ВосстановитьНастройки();
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки();
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "КомандаНастройка".
//
Процедура КомандаНастройка(Команда)
	
	АдресНастроекВХранилище = ПоместитьНастройкиВХранилище();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаНастройкаЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты.Форма.РеспубликаМордовия_ФормаНастройки", Новый Структура("АдресНастроекВХранилище", АдресНастроекВХранилище), , , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата опроса команды "КомандаНастройка".
//
Процедура КомандаНастройкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		ПолучитьНастройкиИзХранилища(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаЗагрузитьИзФайла".
//
Процедура КомандаЗагрузитьИзФайла(Команда)
	
	ЗагрузитьИзФайлаПродолжение();
	
КонецПроцедуры

&НаКлиенте
// Продолжение обработчика команды "КомандаЗагрузитьИзФайла".
//
Процедура ЗагрузитьИзФайлаПродолжение()
	
	ТекстОшибки = ПроверкаУсловийДляЗаполненияТаблиц();
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ФайлНаДиске = Новый Файл(ИмяФайлаЗагрузки);
	ФайлНаДиске.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ЗагрузитьИзФайлаПродолжениеФайлНаДискеСуществуетЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик завершения работы процедуры "НачатьПроверкуСуществования".
//
Процедура ЗагрузитьИзФайлаПродолжениеФайлНаДискеСуществуетЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	Если НЕ Существует Тогда
		ПоказатьПредупреждение(Неопределено, "Файл не найден!");
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = "";
	Описание = Новый ОписаниеОповещения("ОбработатьРезультатПомещенияФайлаВХранилище", ЭтаФорма);
	НачатьПомещениеФайла(Описание, ПутьКФайлу, ИмяФайлаЗагрузки, Ложь);
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата помещения файла в хранилище.
//
Процедура ОбработатьРезультатПомещенияФайлаВХранилище(Результат, Адрес, ВыбранноеИмяФайла, ДопПараметры) Экспорт
	
	Если Объект.РеспубликаМордовия_ТаблицаДанных.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаЗагрузитьИзФайлаЗавершение", ЭтотОбъект, Новый Структура("ПутьКФайлу", Адрес));
		
		ТекстВопроса = "Перед заполнением таблица выгрузки будет очищена. Заполнить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Началось заполнение таблицы выгрузки!");
		
		ЗагрузитьНаСервере(Адрес);
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Заполнение таблицы выгрузки завершено!");
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатПомещенияФайлаВХранилище()

&НаКлиенте
// Обработчик результата опроса команды "ЗагрузитьИзФайла".
//
Процедура КомандаЗагрузитьИзФайлаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Объект.РеспубликаМордовия_ТаблицаДанных.Очистить();
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Началось заполнение таблицы выгрузки!");
		
		ЗагрузитьНаСервере(ДополнительныеПараметры.ПутьКФайлу);
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Заполнение таблицы выгрузки завершено!");
		
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьВсеЗавершение()

&НаКлиенте
// Обработчик команды "КомандаВыгрузить".
//
Процедура КомандаВыгрузить(Команда)
	
	Если ПустаяСтрока(КаталогВыгрузки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указан каталог выгрузки!");
		Возврат;
	КонецЕсли;
	
	КаталогНаДиске = Новый Файл(КаталогВыгрузки);
	КаталогНаДиске.НачатьПроверкуСуществования(Новый ОписаниеОповещения("КомандаВыгрузитьКаталогНаДискеСуществуетЗавершение", ЭтотОбъект, Новый Структура("КаталогНаДиске", КаталогНаДиске)));
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик завершения работы процедуры "НачатьПроверкуСуществования".
//
Процедура КомандаВыгрузитьКаталогНаДискеСуществуетЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	КаталогНаДиске = ДополнительныеПараметры.КаталогНаДиске;
	
	Если НЕ Существует Тогда
		ПоказатьПредупреждение(Неопределено, "Каталог выгрузки не найден!");
		Возврат;
	КонецЕсли;
	
	КаталогНаДиске.НачатьПроверкуЭтоКаталог(Новый ОписаниеОповещения("КомандаВыгрузитьЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыгрузитьЗавершение(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЭтоКаталог Тогда
		ПоказатьПредупреждение(Неопределено, "Каталог выгрузки не найден!");
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДанныеВФайлРеспубликаМордовия();
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Формат выгрузки".
//
Процедура ФорматВыгрузкиПриИзменении(Элемент)
	
	Если Объект.РеспубликаМордовия_ТаблицаДанных.Количество() > 0 Тогда
		ЗагрузитьИзФайлаПродолжение();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////
// Диалог выбора файла.

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Файл загрузки".
//
Процедура ИмяФайлаЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр                      = "Файл данных (*.dbf)|*.dbf";
	ДиалогВыбораФайла.Расширение                  = "dbf";
	ДиалогВыбораФайла.Заголовок                   = "Выберите файл загрузки";
	ДиалогВыбораФайла.ПолноеИмяФайла              = ИмяФайлаЗагрузки;
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ИмяФайлаЗагрузкиНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла)));
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЗагрузкиНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если НЕ ВыбранныеФайлы = Неопределено Тогда
		ИмяФайлаЗагрузки = ДиалогВыбораФайла.ПолноеИмяФайла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Файл загрузки".
//
Процедура ИмяФайлаЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НачатьЗапускПриложения(Новый ОписаниеОповещения("ИмяФайлаЗагрузкиОткрытиеЗавершение", ЭтотОбъект), ИмяФайлаЗагрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЗагрузкиОткрытиеЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Имя каталога".
//
Процедура ИмяКаталогаЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Заголовок                   = "Выбор каталога файлов";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	ДиалогВыбораФайла.Каталог                     = КаталогВыгрузки;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ИмяКаталогаЗагрузкиНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла)));
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяКаталогаЗагрузкиНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если НЕ ВыбранныеФайлы = Неопределено Тогда
		КаталогВыгрузки = ДиалогВыбораФайла.Каталог;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Имя каталога".
//
Процедура ИмяКаталогаЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НачатьЗапускПриложения(Новый ОписаниеОповещения("ИмяФайлаЗагрузкиОткрытиеЗавершение", ЭтотОбъект), КаталогВыгрузки);
	
КонецПроцедуры

////////////////////////
// Период.

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Модифицированность);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Регулирование" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Направление,
														Модифицированность);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "ПериодСтрокой".
//
Процедура ПериодСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти
