
//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик событий "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
	Объект.МесяцВыгрузки = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.МесяцВыгрузки", "ПериодСтрокой");
	
	СтруктураПараметров = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("ВыгрузкаВОСЗН_ЯрославскаяОбласть", "ПараметрыВыгрузки");
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		Если СтруктураПараметров.Свойство("ВариантВыгрузки") Тогда
			Объект.ВариантВыгрузки = СтруктураПараметров.ВариантВыгрузки;
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("КаталогВыгрузки") Тогда
			Объект.КаталогВыгрузки = СтруктураПараметров.КаталогВыгрузки;
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("КодРайона") Тогда
			Объект.КодРайона = СтруктураПараметров.КодРайона;
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("КодОрганизации") Тогда
			Объект.КодОрганизацииДляЯрославскойОбласти = СтруктураПараметров.КодОрганизации;
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("СоответствияУслуг") Тогда
			врТаблицаУслуг = СтруктураПараметров.СоответствияУслуг;
			Если ТипЗнч(врТаблицаУслуг) = Тип("ТаблицаЗначений") Тогда
				Объект.ЯрославскаяОбласть_СоответствияУслуг.Загрузить(врТаблицаУслуг);
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ОтборЛС") Тогда
			врТаблицаУслуг = СтруктураПараметров.ОтборЛС;
			Если ТипЗнч(врТаблицаУслуг) = Тип("ТаблицаЗначений") Тогда
				ЯрославскаяОбласть_ТаблицаЛС.Загрузить(врТаблицаУслуг);
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("СоответствияЛьготныхКатегорий") Тогда
			врТаблицаЛьготныхКатегорий = СтруктураПараметров.СоответствияЛьготныхКатегорий;
			Если ТипЗнч(врТаблицаЛьготныхКатегорий) = Тип("ТаблицаЗначений") Тогда
				Объект.ЯрославскаяОбласть_СоответствияЛьготныхКатегорий.Загрузить(врТаблицаЛьготныхКатегорий);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		Объект.ВариантВыгрузки = "Сведения о начисленных льготах";
		ПриПервомЗапускеЗаполнитьТаблицуСоответствияУслуг();
	КонецЕсли;
	
	ДобавитьКолонкиВТабличнуюЧастьВыгрузки();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Обработчик событий "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиенте();
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьНастройкиНаСервере();
	
КонецПроцедуры // ПриЗакрытии()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик команды "Настройки".
Процедура Настройки(Команда)
	
	АдресНастроекВХранилище = ПоместитьНастройкиВХранилище();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаНастройкаЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты.Форма.ЯрославскаяОбласть_ФормаНастройки", Новый Структура("АдресНастроекВХранилище", АдресНастроекВХранилище), , , , , ОписаниеОповещения);
	
КонецПроцедуры // Настройки()

&НаКлиенте
// Обработчик команды "Заполнить".
Процедура Заполнить(Команда)
	
	Если ЯрославскаяОбласть_ТаблицаДляВыгрузки.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект, );
		ТекстВопроса = "Перед заполнением таблица выгрузки будет очищена. Продолжить?";
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		Если ЕстьНезаполненныеПоляФормы(Истина) Тогда
			Возврат;
		КонецЕсли;
		ПолучитьДанныеИзБазыИЗаполнитьТЧВыгрузки(Объект.ВариантВыгрузки = "Сведения о начисленных льготах");
	КонецЕсли;
	
КонецПроцедуры // Заполнить()

&НаКлиенте
Процедура ЗаполнитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЯрославскаяОбласть_ТаблицаДляВыгрузки.Очистить();
		
		Если ЕстьНезаполненныеПоляФормы(Истина) Тогда
			Возврат;
		КонецЕсли;
		
		ПолучитьДанныеИзБазыИЗаполнитьТЧВыгрузки(Объект.ВариантВыгрузки = "Сведения о начисленных льготах");
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьЗавершение()

&НаКлиенте
// Обработчик команды "ВыгрузитьВФайл".
Процедура ВыгрузитьВФайл(Команда)
	
	Если ЯрославскаяОбласть_ТаблицаДляВыгрузки.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Отсутствуют данные для выгрузки! Файл не будет сформирован");
		Возврат;
	КонецЕсли;
	
	Если ЕстьНезаполненныеПоляФормы() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВариантВыгрузки = "Сведения о начисленных льготах" Тогда
		ИмяФайла = Формат(Объект.МесяцВыгрузки, "ДФ=yy") + Формат(Объект.МесяцВыгрузки, "ДФ=MМ")
				 + Объект.КодРайона + Объект.КодОрганизацииДляЯрославскойОбласти;
	Иначе
		ИмяФайла = "S" + Формат(Объект.МесяцВыгрузки, "ДФ=yy") + Формат(Объект.МесяцВыгрузки, "ДФ=MМ")
				 + Объект.КодОрганизацииДляЯрославскойОбласти;
	КонецЕсли;
	
	ИмяФайла = ИмяФайла + ".dbf";
	
	ИмяКаталога = Объект.КаталогВыгрузки;
	
	ОбработчикЗавершения = Новый ОписаниеОповещения("ОбработатьПослеВыгрузки", УПЖКХ_РаботаСФайламиКлиент, Новый Структура);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИмяФайла",             ИмяФайла);
	ДополнительныеПараметры.Вставить("ИмяКаталога",          ИмяКаталога);
	ДополнительныеПараметры.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);
	
	Если РасширениеПодключено Тогда
		
		// Проверяем каталог выгрузки на существование.
		
		КаталогВыгрузки = Новый Файл(Объект.КаталогВыгрузки);
		
		ДополнительныеПараметры.Вставить("КаталогВыгрузки", КаталогВыгрузки);
		
		КаталогВыгрузки.НачатьПроверкуСуществования(Новый ОписаниеОповещения("КаталогВыгрузкиСуществуетЗавершение", ЭтотОбъект, ДополнительныеПараметры));
		
		Возврат;
		
	Иначе
		
		ИмяКаталога = "";
		
		МассивВыгружаемыхФайлов = Новый Массив;
		
		ВыгрузитьФайлВКаталогНаДискеПродолжениеНаСервере(МассивВыгружаемыхФайлов, ИмяФайла, ИмяКаталога);
		
		УПЖКХ_РаботаСФайламиКлиент.ВыгрузитьВФайл(РасширениеПодключено, МассивВыгружаемыхФайлов, ОбработчикЗавершения);
		
	КонецЕсли;
	
КонецПроцедуры // ВыгрузитьВФайл()

&НаКлиенте
Процедура КомандаНастройкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		ПолучитьНастройкиИзХранилища(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_РаботаСФайламиКлиент.ВыбратьКаталог(ЭтаФорма, "Выбор каталога выгрузки", Объект.КаталогВыгрузки);
	
КонецПроцедуры // КаталогВыгрузкиНачалоВыбора()

&НаКлиенте
Процедура КаталогВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УПЖКХ_РаботаСФайламиКлиент.ОткрытиеФайлаКаталога(Объект.КаталогВыгрузки, Истина);
	
КонецПроцедуры // КаталогВыгрузкиОткрытие()

&НаКлиенте
// Процедура - обработчик результата запуска приложения
//
Процедура КаталогВыгрузкиОткрытиеЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	// Заглушка, т.к. в НачатьЗапускПриложения первый параметр обязательный.
	ЭтаПеременнаяЧтобыНеРугаласьПроверкаКонфигурацииНаПустойОбработчик = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантВыгрузкиПриИзменении(Элемент)
	
	ДобавитьКолонкиВТабличнуюЧастьВыгрузки(Истина);
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // ВариантВыгрузкиПриИзменении()

&НаКлиенте
Процедура ЯрославскаяОбласть_ТаблицаЛСЛьготникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЛицевойСчет = Элементы.ЯрославскаяОбласть_ТаблицаЛС.ТекущиеДанные.ЛицевойСчет;
	Если НЕ ЛицевойСчет = ПредопределенноеЗначение("Справочник.КВП_ЛицевыеСчета.ПустаяСсылка") Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.УПЖКХ_Жильцы.Форма.ФормаВыбора", Новый Структура("ЛицевойСчет", ЛицевойСчет), Элемент);
	КонецЕсли;
	
КонецПроцедуры // ЯрославскаяОбласть_ТаблицаЛСЛьготникНачалоВыбора()

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕДАКТИРОВАНИЯ ПОЛЯ "МЕСЯЦВЫГРУЗКИ"

&НаКлиенте
Процедура ПериодСтрокойПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.МесяцВыгрузки", "ПериодСтрокой", Модифицированность);
	
КонецПроцедуры // ПериодСтрокойПриИзменении()

&НаКлиенте
Процедура ПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.МесяцВыгрузки", "ПериодСтрокой");
	
КонецПроцедуры // ПериодСтрокойНачалоВыбора()

&НаКлиенте
Процедура ПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.МесяцВыгрузки", "ПериодСтрокой", Направление,
														Модифицированность);
	
КонецПроцедуры // ПериодСтрокойРегулирование()

&НаКлиенте
Процедура ПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодСтрокойАвтоПодбор()

&НаКлиенте
Процедура ПериодСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодСтрокойОкончаниеВводаТекста()

&НаКлиенте
// Процедура - обработчик завершения работы процедуры "НачатьПроверкуСуществования".
//
Процедура КаталогВыгрузкиСуществуетЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	КаталогВыгрузки = ДополнительныеПараметры.КаталогВыгрузки;
	
	Если Не Существует Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран каталог файла выгрузки!");
		Возврат;
	КонецЕсли;
	
	КаталогВыгрузки.НачатьПроверкуЭтоКаталог(Новый ОписаниеОповещения("КаталогВыгрузкиЭтоКаталогЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик результата работы процедуры "НачатьПроверкуЭтоКаталог".
//
Процедура КаталогВыгрузкиЭтоКаталогЗавершение(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Если Не ЭтоКаталог Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран каталог файла выгрузки!");
		Возврат;
	КонецЕсли;
	
	МассивВыгружаемыхФайлов = Новый Массив;
	
	ВыгрузитьФайлВКаталогНаДискеПродолжениеНаСервере(МассивВыгружаемыхФайлов, ДополнительныеПараметры.ИмяФайла, ДополнительныеПараметры.ИмяКаталога);
	
	УПЖКХ_РаботаСФайламиКлиент.ВыгрузитьВФайл(РасширениеПодключено, МассивВыгружаемыхФайлов, ДополнительныеПараметры.ОбработчикЗавершения);
	
КонецПроцедуры

&НаСервере
// Выполняет подготовку и выгрузку файла.
//
// Параметры:
//  МассивВыгружаемыхФайлов - Массив - массив описаний передаваемых файлов.
//  ИмяФайла                - Строка - Краткое имя выгружаемого файла.
//  ИмяКаталога             - Строка - Имя каталога, в который будет выполняться выгрузка.
//
Процедура ВыгрузитьФайлВКаталогНаДискеПродолжениеНаСервере(МассивВыгружаемыхФайлов, ИмяФайла, ИмяКаталога)
	
	// Подготовка выгружаемого файла происходит на сервере в виде временного файла.
	// Сформированный временный файл передается на клиент и выгружается в выбранный пользователем каталог.
	
	// Формирование полного имени выгружаемого файла на клиенте.
	КаталогНаКлиенте        = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяКаталога);
	ПолноеИмяФайлаНаКлиенте = КаталогНаКлиенте + ИмяФайла;
	
	// Формирование полного имени временного файла формируемого на сервере.
	КаталогНаСервере        = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВременныхФайлов());
	ПолноеИмяФайлаНаСервере = КаталогНаСервере + ИмяФайла;
	
	КолонкиDBF = ПолучитьКолонкиDBF();
	
	ФайлВыгрузки = Новый XBase;
	ФайлВыгрузки.Кодировка = КодировкаXBase.OEM;
	
	Для Каждого Колонка Из КолонкиDBF Цикл
		
		Если Колонка.Тип = "S" Тогда
			
			ФайлВыгрузки.Поля.Добавить(Колонка.Имя, Колонка.Тип, Колонка.Длина);
			
		ИначеЕсли Колонка.Тип = "N" Тогда
			
			ФайлВыгрузки.Поля.Добавить(Колонка.Имя, Колонка.Тип, Колонка.РазрядностьЦелойЧасти, Колонка.РазрядностьДробнойЧасти);
			
		ИначеЕсли Колонка.Тип = "D" Тогда
			
			ФайлВыгрузки.Поля.Добавить(Колонка.Имя, Колонка.Тип, Колонка.ЧастиДаты);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ФайлВыгрузки.СоздатьФайл(ПолноеИмяФайлаНаСервере);
	ФайлВыгрузки.АвтоСохранение = Истина;
	
	// Запись данных из табличной части в файл выгрузки.
	Для Каждого ТекСтрока Из ЯрославскаяОбласть_ТаблицаДляВыгрузки Цикл
		
		ФайлВыгрузки.Добавить();
		
		ЗаполнитьЗначенияСвойств(ФайлВыгрузки, ТекСтрока);
		
		ФайлВыгрузки.Записать();
		
	КонецЦикла;
	
	ФайлВыгрузки.ЗакрытьФайл();
	
	СоответствиеИменФайловИАдресов = Новый Соответствие;
	СоответствиеИменФайловИАдресов.Вставить(ПолноеИмяФайлаНаКлиенте, ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПолноеИмяФайлаНаСервере), Новый УникальныйИдентификатор));
	
	МассивВыгружаемыхФайлов = УПЖКХ_РаботаСФайламиСервер.ПолучитьМассивПередаваемыхФайлов(СоответствиеИменФайловИАдресов);
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик результата работы процедуры "ДиалогВыбораФайла.Показать".
//
Процедура ВыбратьКаталогЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		Объект.КаталогВыгрузки = ДиалогВыбораФайла.Каталог;
	КонецЕсли;
	
КонецПроцедуры // КаталогВыгрузкиНачалоВыбора()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// РАБОТА С ВРЕМЕННЫМ ХРАНИЛИЩЕМ

#Область РаботаСВременнымХранилищем

&НаСервере
// Помещает настройки во временное хранилище.
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ЯрославскаяОбласть_СоответствияУслуг",  Объект.ЯрославскаяОбласть_СоответствияУслуг.Выгрузить());
	СтруктураНастроек.Вставить("ЯрославскаяОбласть_СоответствияЛьготныхКатегорий", Объект.ЯрославскаяОбласть_СоответствияЛьготныхКатегорий.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции // ПоместитьНастройкиВХранилище()

&НаСервере
// Получает настройки из временного хранилища.
Функция ПолучитьНастройкиИзХранилища(АдресНастроекВХранилище)
	
	СтруктураНастроек = ПолучитьИзВременногоХранилища(АдресНастроекВХранилище);
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		
		Если СтруктураНастроек.Свойство("ЯрославскаяОбласть_СоответствияУслуг") Тогда
			Объект.ЯрославскаяОбласть_СоответствияУслуг.Загрузить(СтруктураНастроек.ЯрославскаяОбласть_СоответствияУслуг);
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ЯрославскаяОбласть_СоответствияЛьготныхКатегорий") Тогда
			Объект.ЯрославскаяОбласть_СоответствияЛьготныхКатегорий.Загрузить(СтруктураНастроек.ЯрославскаяОбласть_СоответствияЛьготныхКатегорий);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции // ПолучитьНастройкиИзХранилища()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ПрочиеПроцедурыИФункции

&НаСервере
Процедура СохранитьНастройкиНаСервере()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СоответствияУслуг",              Объект.ЯрославскаяОбласть_СоответствияУслуг.Выгрузить());
	СтруктураПараметров.Вставить("ОтборЛС",                        ЯрославскаяОбласть_ТаблицаЛС.Выгрузить());
	СтруктураПараметров.Вставить("ВариантВыгрузки",                Объект.ВариантВыгрузки);
	СтруктураПараметров.Вставить("КодРайона",                      Объект.КодРайона);
	СтруктураПараметров.Вставить("КодОрганизации",                 Объект.КодОрганизацииДляЯрославскойОбласти);
	СтруктураПараметров.Вставить("КаталогВыгрузки",                Объект.КаталогВыгрузки);
	СтруктураПараметров.Вставить("СоответствияЛьготныхКатегорий",  Объект.ЯрославскаяОбласть_СоответствияЛьготныхКатегорий.Выгрузить());
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("ВыгрузкаВОСЗН_ЯрославскаяОбласть", "ПараметрыВыгрузки", СтруктураПараметров);
	
КонецПроцедуры // СохранитьНастройкиНаСервере()

&НаСервере
Процедура ПриПервомЗапускеЗаполнитьТаблицуСоответствияУслуг()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_Услуги.Ссылка КАК Услуга
	|ИЗ
	|	Справочник.КВП_Услуги КАК КВП_Услуги
	|ГДЕ
	|	НЕ КВП_Услуги.ЭтоГруппа
	|	И НЕ КВП_Услуги.ПометкаУдаления";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Объект.ЯрославскаяОбласть_СоответствияУслуг.Загрузить(РезультатЗапроса);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ЛьготныеКатегории.Ссылка КАК ЛьготнаяКатегория,
	|	КВП_ЛьготныеКатегории.Код КАК КодЛьготнойКатегории
	|ИЗ
	|	Справочник.КВП_ЛьготныеКатегории КАК КВП_ЛьготныеКатегории
	|ГДЕ
	|	НЕ КВП_ЛьготныеКатегории.ПометкаУдаления";
	
	СписокЛК = Запрос.Выполнить().Выгрузить();
	
	Объект.ЯрославскаяОбласть_СоответствияЛьготныхКатегорий.Загрузить(СписокЛК);
	
КонецПроцедуры // ПриПервомЗапускеЗаполнитьТаблицуСоответствияУслуг()

&НаСервере
Процедура ДобавитьКолонкиВТабличнуюЧастьВыгрузки(ПриИзмененииВариантаВыгрузки = Ложь)
	
	// Удаляем существующие колонки в таблице "птРеспубликаХакасия_ТаблицаДляВыгрузки".
	УдаляемыеРеквизиты = Новый Массив;
	Если ПриИзмененииВариантаВыгрузки Тогда
		РеквизитыДляУдаления = ПолучитьРеквизиты("ЯрославскаяОбласть_ТаблицаДляВыгрузки");
		Для Каждого РеквизитУдаления Из РеквизитыДляУдаления Цикл
			УдаляемыеРеквизиты.Добавить("ЯрославскаяОбласть_ТаблицаДляВыгрузки." + РеквизитУдаления.Имя);
			// Удаляем элементы формы
			Элементы.Удалить(Элементы[РеквизитУдаления.Имя]);
		КонецЦикла;
	КонецЕсли;
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("PFR", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(14), "ЯрославскаяОбласть_ТаблицаДляВыгрузки", , Ложь));
	Если Объект.ВариантВыгрузки = "Сведения о начисленных льготах" Тогда
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("FM",        ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(20), "ЯрославскаяОбласть_ТаблицаДляВыгрузки", , Ложь));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("IM",        ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(20), "ЯрославскаяОбласть_ТаблицаДляВыгрузки", , Ложь));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("OT",        ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(20), "ЯрославскаяОбласть_ТаблицаДляВыгрузки", , Ложь));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("DTR",       ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата), "ЯрославскаяОбласть_ТаблицаДляВыгрузки", , Ложь));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("INDX",      ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(6), "ЯрославскаяОбласть_ТаблицаДляВыгрузки", , Ложь));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("NSP",       ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(40), "ЯрославскаяОбласть_ТаблицаДляВыгрузки", , Ложь));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ULC",       ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(40), "ЯрославскаяОбласть_ТаблицаДляВыгрузки", , Ложь));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("DOM",       ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(8), "ЯрославскаяОбласть_ТаблицаДляВыгрузки", , Ложь));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("KORP",      ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(7), "ЯрославскаяОбласть_ТаблицаДляВыгрузки", , Ложь));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("KVAR",      ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(4), "ЯрославскаяОбласть_ТаблицаДляВыгрузки", , Ложь));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("KOMNATA",   ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(15), "ЯрославскаяОбласть_ТаблицаДляВыгрузки", , Ложь));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("CAT_ID",    ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(3), "ЯрославскаяОбласть_ТаблицаДляВыгрузки", , Ложь));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("USLUGA",    ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(2), "ЯрославскаяОбласть_ТаблицаДляВыгрузки", , Ложь));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("SUMMA",     ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(10, 2), "ЯрославскаяОбласть_ТаблицаДляВыгрузки", , Ложь));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("SUMMA_PER", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(10, 2), "ЯрославскаяОбласть_ТаблицаДляВыгрузки", , Ложь));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("SUMMA_ALL", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(10, 2), "ЯрославскаяОбласть_ТаблицаДляВыгрузки", , Ложь));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("PR",        ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(1), "ЯрославскаяОбласть_ТаблицаДляВыгрузки", , Ложь));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ORG_ID",    ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(2), "ЯрославскаяОбласть_ТаблицаДляВыгрузки", , Ложь));
	Иначе
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("GOD",      ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(2), "ЯрославскаяОбласть_ТаблицаДляВыгрузки", , Ложь));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("MES",      ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(2), "ЯрославскаяОбласть_ТаблицаДляВыгрузки", , Ложь));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ORGJKX",   ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(2), "ЯрославскаяОбласть_ТаблицаДляВыгрузки", , Ложь));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("LSJKX",    ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(9), "ЯрославскаяОбласть_ТаблицаДляВыгрузки", , Ложь));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("NSP",      ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(40), "ЯрославскаяОбласть_ТаблицаДляВыгрузки", , Ложь));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ULC",      ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(40), "ЯрославскаяОбласть_ТаблицаДляВыгрузки", , Ложь));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("DOM",      ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(8), "ЯрославскаяОбласть_ТаблицаДляВыгрузки", , Ложь));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("KORP",     ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(7), "ЯрославскаяОбласть_ТаблицаДляВыгрузки", , Ложь));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("KVAR",     ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(4), "ЯрославскаяОбласть_ТаблицаДляВыгрузки", , Ложь));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("KOMNATA",  ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(15), "ЯрославскаяОбласть_ТаблицаДляВыгрузки", , Ложь));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("KOL_REG",  ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(2, 0), "ЯрославскаяОбласть_ТаблицаДляВыгрузки", , Ложь));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("KOL_VREM", ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(2, 0), "ЯрославскаяОбласть_ТаблицаДляВыгрузки", , Ложь));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("USLUGA",   ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(2), "ЯрославскаяОбласть_ТаблицаДляВыгрузки", , Ложь));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("SUMMA",    ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(10, 2), "ЯрославскаяОбласть_ТаблицаДляВыгрузки", , Ложь));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("DOLG",     ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(1), "ЯрославскаяОбласть_ТаблицаДляВыгрузки", , Ложь));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("GASCHD",   ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(1), "ЯрославскаяОбласть_ТаблицаДляВыгрузки", , Ложь));
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("IZMEN",    ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповСтроки(1), "ЯрославскаяОбласть_ТаблицаДляВыгрузки", , Ложь));
	КонецЕсли;
	
	// Лицевой счет из базы; не выгружается.
	//ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ЛицевойСчет", Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"), "ЯрославскаяОбласть_ТаблицаДляВыгрузки", , Ложь));
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	
	// Создаем новые элементы формы.
	Для Каждого Колонка Из ДобавляемыеРеквизиты Цикл
		Элемент             = Элементы.Добавить(Колонка.Имя, Тип("ПолеФормы"), Элементы.ЯрославскаяОбласть_ТаблицаДляВыгрузки);
		Элемент.Вид         = ВидПоляФормы.ПолеВвода;
		Элемент.Формат      = "ЧН=0";
		Элемент.ПутьКДанным = "ЯрославскаяОбласть_ТаблицаДляВыгрузки." + Колонка.Имя;
		
		Если Колонка.Имя = "ЛицевойСчет" Тогда
			Элементы.ЛицевойСчет.Видимость = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьКолонкиВТабличнуюЧастьВыгрузки()

&НаКлиенте
Функция ЕстьНезаполненныеПоляФормы(ЭтоЗаполнение = Ложь)
	
	ЕстьНезаполненныеПоля = Ложь;
	
	Если ЭтоЗаполнение Тогда
		Если Объект.МесяцВыгрузки = Дата("00010101") Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не указан месяц за который будут выгружены данные!");
			ЕстьНезаполненныеПоля = Истина;
		КонецЕсли;
		
		Если Объект.Организация = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка") Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не заполнена организация, по которой выгружаются данные из базы!");
			ЕстьНезаполненныеПоля = Истина;
		КонецЕсли;
		
		Если ПустаяСтрока(Объект.Организация) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не заполнен код организации, по которой выгружаются данные из базы!");
			ЕстьНезаполненныеПоля = Истина;
		КонецЕсли;
		
		Если Объект.ВариантВыгрузки = "НачислениеЛьгот" И ПустаяСтрока(Объект.КодРайона) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не заполнен код района, по которому выгружаются данные из базы!");
			ЕстьНезаполненныеПоля = Истина;
		КонецЕсли;
		
		Если Объект.ВариантВыгрузки = "Сведения о начисленных льготах" 
			И Объект.ЯрославскаяОбласть_СоответствияЛьготныхКатегорий.Количество() = 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не заполнены соответствия льготных категорий на форме настроек!");
		КонецЕсли;
		
		Если (Объект.ВариантВыгрузки = "Сведения о начисленных льготах" 
			Или Объект.ВариантВыгрузки = "Сведения о начислениях по услугам")
			И Объект.ЯрославскаяОбласть_СоответствияУслуг.Количество() = 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не заполнены соответствия услуг на форме настроек!");
		КонецЕсли;
		
		Если ПустаяСтрока(Объект.ВариантВыгрузки) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не заполнен вариант выгрузки данных!");
		КонецЕсли;
	Иначе
		
		Если РасширениеПодключено И ПустаяСтрока(Объект.КаталогВыгрузки) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не заполнен каталог выгрузки, в котором будут сохранен выгружаемый файл!");
			ЕстьНезаполненныеПоля = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ЕстьНезаполненныеПоля;
	
КонецФункции // ЕстьНезаполненныеПоляФормы()

&НаСервере
Процедура ПолучитьДанныеИзБазыИЗаполнитьТЧВыгрузки(ЭтоНачислениеЛьгот)
	
	ТаблицаДанныхИзБазы = ПолучитьДанныеИзБазы(ЭтоНачислениеЛьгот);
	
	Если НЕ ЭтоНачислениеЛьгот Тогда
		ОтчетныйГод   = Формат(Объект.МесяцВыгрузки, "ДФ=yy");
		ОтчетныйМесяц = Формат(Объект.МесяцВыгрузки, "ДФ=M");
	КонецЕсли;
	
	Для каждого ТекСтрока Из ТаблицаДанныхИзБазы Цикл
		НоваяСтрока = ЯрославскаяОбласть_ТаблицаДляВыгрузки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		Если ЭтоНачислениеЛьгот Тогда
			НоваяСтрока.ORG_ID = Объект.КодОрганизацииДляЯрославскойОбласти;
		Иначе
			НоваяСтрока.ORGJKX = Объект.КодОрганизацииДляЯрославскойОбласти;
			НоваяСтрока.GOD    = ОтчетныйГод;
			НоваяСтрока.MES    = ОтчетныйМесяц;
			НоваяСтрока.LSJKX  = ПодготовитьНомерЛС(ТекСтрока.ЛицевойСчет);
			НоваяСтрока.GASCHD = НоваяСтрока.DOLG;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьДанныеИзБазыИЗаполнитьТЧВыгрузки()

&НаСервере
Функция ПолучитьДанныеИзБазы(ЭтоНачислениеЛьгот)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ДатаНач",                 НачалоМесяца(Объект.МесяцВыгрузки));
	Запрос.УстановитьПараметр("ДатаКон",                 КонецМесяца(Объект.МесяцВыгрузки));
	Запрос.УстановитьПараметр("Организация",             Объект.Организация);
	Запрос.УстановитьПараметр("КодыУслуг",               Объект.ЯрославскаяОбласть_СоответствияУслуг.Выгрузить());
	Запрос.УстановитьПараметр("КодыЛьготныхКатегорий",   Объект.ЯрославскаяОбласть_СоответствияЛьготныхКатегорий.Выгрузить());
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	Если ЭтоНачислениеЛьгот Тогда
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий.Владелец КАК ЛицевойСчет,
		|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий КАК Льготник,
		|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий.ФизЛицо КАК ФизЛицо,
		|	КВП_НазначенныеЛьготыСрезПоследних.ЛьготнаяКатегория,
		|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий.ФизЛицо.ДатаРождения КАК ДатаРождения,
		|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий.ФизЛицо.СтраховойНомерПФР КАК СтраховойНомерПФР
		|ПОМЕСТИТЬ втДействующиеЛьготники
		|ИЗ
		|	РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(&ДатаКон, ДатаИзменения <= &ДатаКон) КАК КВП_НазначенныеЛьготыСрезПоследних
		|ГДЕ
		|	КВП_НазначенныеЛьготыСрезПоследних.Действие
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втДействующиеЛьготники.ЛицевойСчет,
		|	втДействующиеЛьготники.ЛицевойСчет.Адрес.Владелец КАК Здание,
		|	втДействующиеЛьготники.ЛицевойСчет.Адрес.Код КАК НомерПомещения,
		|	втДействующиеЛьготники.Льготник,
		|	втДействующиеЛьготники.ФизЛицо,
		|	втДействующиеЛьготники.ДатаРождения,
		|	втДействующиеЛьготники.СтраховойНомерПФР,
		|	втДействующиеЛьготники.ЛьготнаяКатегория,
		|	ЕСТЬNULL(ФИОФизическихЛицСрезПоследних.Фамилия, """") КАК Фамилия,
		|	ЕСТЬNULL(ФИОФизическихЛицСрезПоследних.Имя, """") КАК Имя,
		|	ЕСТЬNULL(ФИОФизическихЛицСрезПоследних.Отчество, """") КАК Отчество
		|ПОМЕСТИТЬ втЛьготникиСФИО
		|ИЗ
		|	втДействующиеЛьготники КАК втДействующиеЛьготники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(
		|				&ДатаКон,
		|				ФизическоеЛицо В
		|					(ВЫБРАТЬ
		|						втДействующиеЛьготники.ФизЛицо
		|					ИЗ
		|						втДействующиеЛьготники КАК втДействующиеЛьготники)) КАК ФИОФизическихЛицСрезПоследних
		|		ПО втДействующиеЛьготники.ФизЛицо = ФИОФизическихЛицСрезПоследних.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ втДействующиеЛьготники
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЛьготникиСФИО.Здание
		|ПОМЕСТИТЬ втЗдания
		|ИЗ
		|	втЛьготникиСФИО КАК втЛьготникиСФИО
		|
		|СГРУППИРОВАТЬ ПО
		|	втЛьготникиСФИО.Здание";
		
		Запрос.Выполнить();
		
		ЗапросПоЗданиям = Новый Запрос;
		ЗапросПоЗданиям.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
		ЗапросПоЗданиям.Текст =
		"ВЫБРАТЬ
		|	втЗдания.Здание КАК Объект
		|ИЗ
		|	втЗдания КАК втЗдания
		|
		|СГРУППИРОВАТЬ ПО
		|	втЗдания.Здание";
		
		МассивОбъектов = ЗапросПоЗданиям.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
		
		// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
		УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	втЛьготникиСФИО.ЛицевойСчет,
		|	втЛьготникиСФИО.Льготник,
		|	втЛьготникиСФИО.ФизЛицо,
		|	втЛьготникиСФИО.ДатаРождения,
		|	втЛьготникиСФИО.СтраховойНомерПФР,
		|	втЛьготникиСФИО.ЛьготнаяКатегория,
		|	втЛьготникиСФИО.Фамилия,
		|	втЛьготникиСФИО.Имя,
		|	втЛьготникиСФИО.Отчество,
		|	втЛьготникиСФИО.Здание,
		|	втЛьготникиСФИО.НомерПомещения,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА НЕ втКонтактнаяИнформация.Город = """"
		|				ТОГДА втКонтактнаяИнформация.Город
		|			КОГДА НЕ втКонтактнаяИнформация.НаселенныйПункт = """"
		|				ТОГДА втКонтактнаяИнформация.НаселенныйПункт
		|			КОГДА НЕ втКонтактнаяИнформация.Регион = """"
		|				ТОГДА втКонтактнаяИнформация.Регион
		|			ИНАЧЕ """"
		|		КОНЕЦ, """") КАК НаселенныйПункт,
		|	ЕСТЬNULL(втКонтактнаяИнформация.Улица, """") КАК Улица,
		|	ЕСТЬNULL(втКонтактнаяИнформация.Дом, """") КАК Дом,
		|	ЕСТЬNULL(втКонтактнаяИнформация.Корпус, """") КАК Корпус,
		|	ЕСТЬNULL(втКонтактнаяИнформация.Индекс, """") КАК Индекс
		|ПОМЕСТИТЬ втЛьготникиСАдресами
		|ИЗ
		|	втЛьготникиСФИО КАК втЛьготникиСФИО
		|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК втКонтактнаяИнформация
		|		ПО втЛьготникиСФИО.Здание = втКонтактнаяИнформация.Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_НачисленныеЛьготыОбороты.ЛицевойСчет,
		|	КВП_НачисленныеЛьготыОбороты.Проживающий КАК Льготник,
		|	КВП_НачисленныеЛьготыОбороты.ЛьготнаяКатегория,
		|	КВП_НачисленныеЛьготыОбороты.Услуга,
		|	СУММА(КВП_НачисленныеЛьготыОбороты.СуммаНачисленияОборот) КАК СуммаЛьгот
		|ПОМЕСТИТЬ втНачисленныеЛьготы
		|ИЗ
		|	РегистрНакопления.КВП_НачисленныеЛьготы.Обороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			,
		|			(Проживающий, ЛьготнаяКатегория) В
		|					(ВЫБРАТЬ
		|						втЛьготникиСАдресами.Льготник,
		|						втЛьготникиСАдресами.ЛьготнаяКатегория
		|					ИЗ
		|						втЛьготникиСАдресами КАК втЛьготникиСАдресами
		|					СГРУППИРОВАТЬ ПО
		|						втЛьготникиСАдресами.Льготник,
		|						втЛьготникиСАдресами.ЛьготнаяКатегория)
		|				И Организация = &Организация) КАК КВП_НачисленныеЛьготыОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	КВП_НачисленныеЛьготыОбороты.Услуга,
		|	КВП_НачисленныеЛьготыОбороты.Проживающий,
		|	КВП_НачисленныеЛьготыОбороты.ЛьготнаяКатегория,
		|	КВП_НачисленныеЛьготыОбороты.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
		|	УПЖКХ_НачисленияОбороты.Услуга,
		|	СУММА(УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот) КАК СуммаНачислений,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
		|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаПерерасчета
		|ПОМЕСТИТЬ втНачислений
		|ИЗ
		|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			,
		|			(ЛицевойСчет, Услуга) В
		|					(ВЫБРАТЬ
		|						втНачисленныеЛьготы.ЛицевойСчет,
		|						втНачисленныеЛьготы.Услуга
		|					ИЗ
		|						втНачисленныеЛьготы КАК втНачисленныеЛьготы
		|					СГРУППИРОВАТЬ ПО
		|						втНачисленныеЛьготы.ЛицевойСчет,
		|						втНачисленныеЛьготы.Услуга)
		|				И Организация = &Организация
		|				И НЕ РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени))
		|				И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ВводНачальногоСальдо))) КАК УПЖКХ_НачисленияОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	УПЖКХ_НачисленияОбороты.Услуга,
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЛьготникиСАдресами.СтраховойНомерПФР КАК PFR,
		|	втЛьготникиСАдресами.Фамилия КАК FM,
		|	втЛьготникиСАдресами.Имя КАК IM,
		|	втЛьготникиСАдресами.Отчество КАК OT,
		|	втЛьготникиСАдресами.ДатаРождения КАК DTR,
		|	втЛьготникиСАдресами.Индекс КАК INDX,
		|	втЛьготникиСАдресами.НаселенныйПункт КАК NSP,
		|	втЛьготникиСАдресами.Улица КАК ULC,
		|	втЛьготникиСАдресами.Дом КАК DOM,
		|	втЛьготникиСАдресами.Корпус КАК KORP,
		|	втЛьготникиСАдресами.НомерПомещения КАК KVAR,
		|	втЛьготникиСАдресами.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
		|	ЕСТЬNULL(втНачисленныеЛьготы.Услуга, ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)) КАК Услуга,
		|	ЕСТЬNULL(втНачисленныеЛьготы.СуммаЛьгот, 0) КАК SUMMA,
		|	ЕСТЬNULL(втНачислений.СуммаПерерасчета, 0) КАК SUMMA_PER,
		|	ЕСТЬNULL(втНачислений.СуммаНачислений, 0) КАК SUMMA_ALL
		|ПОМЕСТИТЬ втНачисленияБезКодовУслуг
		|ИЗ
		|	втЛьготникиСАдресами КАК втЛьготникиСАдресами
		|		ЛЕВОЕ СОЕДИНЕНИЕ втНачисленныеЛьготы КАК втНачисленныеЛьготы
		|			ЛЕВОЕ СОЕДИНЕНИЕ втНачислений КАК втНачислений
		|			ПО втНачисленныеЛьготы.ЛицевойСчет = втНачислений.ЛицевойСчет
		|				И втНачисленныеЛьготы.Услуга = втНачислений.Услуга
		|		ПО втЛьготникиСАдресами.Льготник = втНачисленныеЛьготы.Льготник
		|			И втЛьготникиСАдресами.ЛьготнаяКатегория = втНачисленныеЛьготы.ЛьготнаяКатегория
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КодыУслуг.Услуга,
		|	КодыУслуг.КодУслугиПоЛьготам
		|ПОМЕСТИТЬ втКодыУслуг
		|ИЗ
		|	&КодыУслуг КАК КодыУслуг
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КодыЛьготныхКатегорий.ЛьготнаяКатегория,
		|	КодыЛьготныхКатегорий.КодЛьготнойКатегории
		|ПОМЕСТИТЬ КодыЛьготныхКатегорий
		|ИЗ
		|	&КодыЛьготныхКатегорий КАК КодыЛьготныхКатегорий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втНачисленияБезКодовУслуг.PFR,
		|	втНачисленияБезКодовУслуг.FM КАК FM,
		|	втНачисленияБезКодовУслуг.IM КАК IM,
		|	втНачисленияБезКодовУслуг.OT КАК OT,
		|	втНачисленияБезКодовУслуг.DTR,
		|	втНачисленияБезКодовУслуг.INDX,
		|	втНачисленияБезКодовУслуг.NSP,
		|	втНачисленияБезКодовУслуг.ULC,
		|	втНачисленияБезКодовУслуг.DOM,
		|	втНачисленияБезКодовУслуг.KORP,
		|	втНачисленияБезКодовУслуг.KVAR,
		|	КодыЛьготныхКатегорий.КодЛьготнойКатегории КАК CAT_ID,
		|	втКодыУслуг.КодУслугиПоЛьготам КАК USLUGA,
		|	СУММА(втНачисленияБезКодовУслуг.SUMMA) КАК SUMMA,
		|	СУММА(втНачисленияБезКодовУслуг.SUMMA_PER) КАК SUMMA_PER,
		|	СУММА(втНачисленияБезКодовУслуг.SUMMA_ALL) КАК SUMMA_ALL
		|ИЗ
		|	втНачисленияБезКодовУслуг КАК втНачисленияБезКодовУслуг
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКодыУслуг КАК втКодыУслуг
		|		ПО втНачисленияБезКодовУслуг.Услуга = втКодыУслуг.Услуга
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КодыЛьготныхКатегорий КАК КодыЛьготныхКатегорий
		|		ПО втНачисленияБезКодовУслуг.ЛьготнаяКатегория = КодыЛьготныхКатегорий.ЛьготнаяКатегория
		|
		|СГРУППИРОВАТЬ ПО
		|	втНачисленияБезКодовУслуг.PFR,
		|	втНачисленияБезКодовУслуг.KVAR,
		|	втНачисленияБезКодовУслуг.IM,
		|	втНачисленияБезКодовУслуг.ULC,
		|	втНачисленияБезКодовУслуг.OT,
		|	втНачисленияБезКодовУслуг.NSP,
		|	КодыЛьготныхКатегорий.КодЛьготнойКатегории,
		|	втНачисленияБезКодовУслуг.DTR,
		|	втНачисленияБезКодовУслуг.KORP,
		|	втНачисленияБезКодовУслуг.FM,
		|	втНачисленияБезКодовУслуг.INDX,
		|	втНачисленияБезКодовУслуг.DOM,
		|	втКодыУслуг.КодУслугиПоЛьготам
		|
		|УПОРЯДОЧИТЬ ПО
		|	FM,
		|	IM,
		|	OT,
		|	USLUGA";
		
	Иначе
		
		Запрос.УстановитьПараметр("ВыбранныеЛС", ЯрославскаяОбласть_ТаблицаЛС.Выгрузить());
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВыбранныеЛС.ЛицевойСчет,
		|	ВыбранныеЛС.Льготник
		|ПОМЕСТИТЬ втЛьготники
		|ИЗ
		|	&ВыбранныеЛС КАК ВыбранныеЛС
		|;
		|
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.ЛицевойСчет,
		|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.КоличествоЗарегистрированных КАК КоличествоЗарегистрированных,
		|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.КоличествоПроживающих КАК КоличествоПроживающих
		|ПОМЕСТИТЬ втУчетКоличестваЖильцов
		|ИЗ
		|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(&ДатаКон, ЛицевойСчет В (&ВыбранныеЛС)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Владелец КАК Здание,
		|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет,
		|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Код КАК НомерПомещения,
		|	втЛьготники.Льготник.ФизЛицо.СтраховойНомерПФР КАК СНИЛС
		|ПОМЕСТИТЬ втДействующиеЛСТаб1
		|ИЗ
		|	втЛьготники КАК втЛьготники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
		|				&ДатаКон,
		|				ЛицевойСчет В
		|					(ВЫБРАТЬ
		|						втЛьготники.ЛицевойСчет
		|					ИЗ
		|						втЛьготники КАК втЛьготники)) КАК КВП_ЛицевыеСчетаСрезПоследних
		|		ПО втЛьготники.ЛицевойСчет = КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет
		|ГДЕ
		|	КВП_ЛицевыеСчетаСрезПоследних.Действует
		|;
		|
		|ВЫБРАТЬ
		|	втДействующиеЛСТаб1.Здание КАК Здание,
		|	втДействующиеЛСТаб1.ЛицевойСчет,
		|	втДействующиеЛСТаб1.НомерПомещения КАК НомерПомещения,
		|   втУчетКоличестваЖильцов.КоличествоЗарегистрированных,
		|	втДействующиеЛСТаб1.СНИЛС КАК СНИЛС
		|ПОМЕСТИТЬ втДействующиеЛС
		|ИЗ
		|	втДействующиеЛСТаб1 КАК втДействующиеЛСТаб1
		|	ЛЕВОЕ СОЕДИНЕНИЕ втУчетКоличестваЖильцов КАК втУчетКоличестваЖильцов
		|	ПО втДействующиеЛСТаб1.ЛицевойСчет = втУчетКоличестваЖильцов.ЛицевойСчет
		|;
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ВременнаяРегистрация
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоВременноЗарегистрированных,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ВременнаяРегистрация
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоЗарегистрированных
		|ПОМЕСТИТЬ втКоличестваИзРС
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
		|			&ДатаКон,
		|			ЛицевойСчет В
		|					(ВЫБРАТЬ
		|						втДействующиеЛС.ЛицевойСчет
		|					ИЗ
		|						втДействующиеЛС КАК втДействующиеЛС)
		|				И ДатаИзменения <= &ДатаКон) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
		|ГДЕ
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
		|
		|СГРУППИРОВАТЬ ПО
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втДействующиеЛС.Здание,
		|	втДействующиеЛС.ЛицевойСчет,
		|	втДействующиеЛС.НомерПомещения,
		|	ВЫБОР
		|		КОГДА Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами
		|			ТОГДА втДействующиеЛС.КоличествоЗарегистрированных
		|		ИНАЧЕ ЕСТЬNULL(втКоличестваИзРС.КоличествоЗарегистрированных, 0)
		|	КОНЕЦ КАК КоличествоЗарегистрированных,
		|	ВЫБОР
		|		КОГДА Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами
		|			ТОГДА 0
		|		ИНАЧЕ ЕСТЬNULL(втКоличестваИзРС.КоличествоВременноЗарегистрированных, 0)
		|	КОНЕЦ КАК КоличествоВременноЗарегистрированных,
		|	втДействующиеЛС.СНИЛС
		|ПОМЕСТИТЬ втЛСсКоличествамиЖильцов
		|ИЗ
		|	втДействующиеЛС КАК втДействующиеЛС
		|		ЛЕВОЕ СОЕДИНЕНИЕ втКоличестваИзРС КАК втКоличестваИзРС
		|		ПО втДействующиеЛС.ЛицевойСчет = втКоличестваИзРС.ЛицевойСчет,
		|	Константы КАК Константы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЛСсКоличествамиЖильцов.Здание
		|ПОМЕСТИТЬ втЗдания
		|ИЗ
		|	втЛСсКоличествамиЖильцов КАК втЛСсКоличествамиЖильцов";
		
		Запрос.Выполнить();
		
		ЗапросПоЗданиям = Новый Запрос;
		ЗапросПоЗданиям.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
		ЗапросПоЗданиям.Текст =
		"ВЫБРАТЬ
		|	втЗдания.Здание КАК Объект
		|ИЗ
		|	втЗдания КАК втЗдания
		|
		|СГРУППИРОВАТЬ ПО
		|	втЗдания.Здание";
		
		МассивОбъектов = ЗапросПоЗданиям.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
		
		// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
		УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	втЛСсКоличествамиЖильцов.СНИЛС,
		|	втЛСсКоличествамиЖильцов.ЛицевойСчет,
		|	втЛСсКоличествамиЖильцов.НомерПомещения,
		|	втЛСсКоличествамиЖильцов.КоличествоЗарегистрированных,
		|	втЛСсКоличествамиЖильцов.КоличествоВременноЗарегистрированных,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА НЕ втКонтактнаяИнформация.Город = """"
		|				ТОГДА втКонтактнаяИнформация.Город
		|			КОГДА НЕ втКонтактнаяИнформация.НаселенныйПункт = """"
		|				ТОГДА втКонтактнаяИнформация.НаселенныйПункт
		|			КОГДА НЕ втКонтактнаяИнформация.Регион = """"
		|				ТОГДА втКонтактнаяИнформация.Регион
		|			ИНАЧЕ """"
		|		КОНЕЦ, """") КАК НаселенныйПункт,
		|	ЕСТЬNULL(втКонтактнаяИнформация.Улица, """") КАК Улица,
		|	ЕСТЬNULL(втКонтактнаяИнформация.Дом, """") КАК Дом,
		|	ЕСТЬNULL(втКонтактнаяИнформация.Корпус, """") КАК Корпус
		|ПОМЕСТИТЬ втЛСсАдресами
		|ИЗ
		|	втЛСсКоличествамиЖильцов КАК втЛСсКоличествамиЖильцов
		|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК втКонтактнаяИнформация
		|		ПО втЛСсКоличествамиЖильцов.Здание = втКонтактнаяИнформация.Объект
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
		|	УПЖКХ_НачисленияОбороты.Услуга,
		|	УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот КАК СуммаНачислений
		|ПОМЕСТИТЬ втНачислений
		|ИЗ
		|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
		|			&ДатаНач,
		|			&ДатаКон,
		|			,
		|			Организация = &Организация
		|				И ЛицевойСчет В
		|					(ВЫБРАТЬ
		|						втЛСсАдресами.ЛицевойСчет
		|					ИЗ
		|						втЛСсАдресами КАК втЛСсАдресами)
		|				И НЕ РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы))
		|				И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ВводНачальногоСальдо))) КАК УПЖКХ_НачисленияОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет,
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга,
		|	ВЫБОР
		|		КОГДА КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток > 0
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ПризнакЗадолженности
		|ПОМЕСТИТЬ втОстаткиПоУслугам
		|ИЗ
		|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
		|			&ДатаКон,
		|			Организация = &Организация
		|				И (ЛицевойСчет, Услуга) В
		|					(ВЫБРАТЬ
		|						втНачислений.ЛицевойСчет,
		|						втНачислений.Услуга
		|					ИЗ
		|						втНачислений КАК втНачислений)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
		|ГДЕ
		|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.МесяцНачисления < ДОБАВИТЬКДАТЕ(&ДСО, МЕСЯЦ, -2)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КВП_ИзменениеЛицевогоСчета.ЛицевойСчет
		|ПОМЕСТИТЬ втИзмененийЛС
		|ИЗ
		|	Документ.КВП_ИзменениеЛицевогоСчета КАК КВП_ИзменениеЛицевогоСчета
		|ГДЕ
		|	КВП_ИзменениеЛицевогоСчета.Проведен
		|	И КВП_ИзменениеЛицевогоСчета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ИзменениеДанныхОЖильцах)
		|	И КВП_ИзменениеЛицевогоСчета.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|
		|СГРУППИРОВАТЬ ПО
		|	КВП_ИзменениеЛицевогоСчета.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЛСсАдресами.ЛицевойСчет,
		|	втЛСсАдресами.СНИЛС,
		|	втЛСсАдресами.КоличествоЗарегистрированных,
		|	втЛСсАдресами.КоличествоВременноЗарегистрированных,
		|	втЛСсАдресами.НаселенныйПункт КАК NSP,
		|	втЛСсАдресами.Улица КАК ULC,
		|	втЛСсАдресами.Дом КАК DOM,
		|	втЛСсАдресами.Корпус КАК KORP,
		|	втЛСсАдресами.НомерПомещения КАК KVAR,
		|	ЕСТЬNULL(втНачислений.Услуга, ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)) КАК Услуга,
		|	ЕСТЬNULL(втНачислений.СуммаНачислений, 0) КАК SUMMA,
		|	ЕСТЬNULL(втОстаткиПоУслугам.ПризнакЗадолженности, 0) КАК DOLG,
		|	ВЫБОР
		|		КОГДА втИзмененийЛС.ЛицевойСчет ЕСТЬ NULL 
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК IZMEN
		|ПОМЕСТИТЬ втИтоговаяБезКодовУслуг
		|ИЗ
		|	втЛСсАдресами КАК втЛСсАдресами
		|		ЛЕВОЕ СОЕДИНЕНИЕ втНачислений КАК втНачислений
		|			ЛЕВОЕ СОЕДИНЕНИЕ втОстаткиПоУслугам КАК втОстаткиПоУслугам
		|			ПО втНачислений.ЛицевойСчет = втОстаткиПоУслугам.ЛицевойСчет
		|				И втНачислений.Услуга = втОстаткиПоУслугам.Услуга
		|		ПО втЛСсАдресами.ЛицевойСчет = втНачислений.ЛицевойСчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ втИзмененийЛС КАК втИзмененийЛС
		|		ПО втЛСсАдресами.ЛицевойСчет = втИзмененийЛС.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КодыУслуг.Услуга,
		|	КодыУслуг.КодУслугиПоСубсидиям
		|ПОМЕСТИТЬ втКодыУслуг
		|ИЗ
		|	&КодыУслуг КАК КодыУслуг
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втИтоговаяБезКодовУслуг.ЛицевойСчет.Наименование КАК ЛицевойСчет,
		|	втИтоговаяБезКодовУслуг.СНИЛС КАК PFR,
		|	втИтоговаяБезКодовУслуг.КоличествоЗарегистрированных КАК KOL_REG,
		|	втИтоговаяБезКодовУслуг.КоличествоВременноЗарегистрированных КАК KOL_VREM,
		|	втИтоговаяБезКодовУслуг.NSP,
		|	втИтоговаяБезКодовУслуг.ULC,
		|	втИтоговаяБезКодовУслуг.DOM,
		|	втИтоговаяБезКодовУслуг.KORP,
		|	втИтоговаяБезКодовУслуг.KVAR,
		|	втКодыУслуг.КодУслугиПоСубсидиям КАК USLUGA,
		|	СУММА(втИтоговаяБезКодовУслуг.SUMMA) КАК SUMMA,
		|	МАКСИМУМ(втИтоговаяБезКодовУслуг.DOLG) КАК DOLG,
		|	МАКСИМУМ(втИтоговаяБезКодовУслуг.IZMEN) КАК IZMEN
		|ИЗ
		|	втИтоговаяБезКодовУслуг КАК втИтоговаяБезКодовУслуг
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКодыУслуг КАК втКодыУслуг
		|		ПО втИтоговаяБезКодовУслуг.Услуга = втКодыУслуг.Услуга
		|
		|СГРУППИРОВАТЬ ПО
		|	втИтоговаяБезКодовУслуг.ULC,
		|	втИтоговаяБезКодовУслуг.KORP,
		|	втИтоговаяБезКодовУслуг.KVAR,
		|	втИтоговаяБезКодовУслуг.КоличествоВременноЗарегистрированных,
		|	втИтоговаяБезКодовУслуг.NSP,
		|	втИтоговаяБезКодовУслуг.DOM,
		|	втКодыУслуг.КодУслугиПоСубсидиям,
		|	втИтоговаяБезКодовУслуг.КоличествоЗарегистрированных,
		|	втИтоговаяБезКодовУслуг.ЛицевойСчет,
		|	втИтоговаяБезКодовУслуг.СНИЛС
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЛицевойСчет,
		|	PFR,
		|	USLUGA";
		
		Структура = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(КонецМесяца(Объект.МесяцВыгрузки), Объект.Организация);
		Запрос.УстановитьПараметр("ДСО", НачалоМесяца(Объект.МесяцВыгрузки) + 60*60*24 * Структура.ЧислоВнесенияПлатежа);
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьДанныеИзБазы()

&НаСервере
Функция ПодготовитьНомерЛС(ЛицевойСчет)
	
	НаименованиеЛС = СокрЛП(ЛицевойСчет);
	СтрокаДляВозврата = "";
	Пока СтрДлина(НаименованиеЛС) > 0 Цикл
		
		СимволЛС = Лев(НаименованиеЛС, 1);
		Если КодСимвола(СимволЛС) > 47 И КодСимвола(СимволЛС) < 58 Тогда
			СтрокаДляВозврата = СтрокаДляВозврата + СимволЛС;
		КонецЕсли;
		
		НаименованиеЛС = Прав(НаименованиеЛС, СтрДлина(НаименованиеЛС) - 1);
	КонецЦикла;
	
	Возврат СтрокаДляВозврата;
	
КонецФункции // ПодготовитьНомерЛС()

&НаСервере
// Формирует массив структур, состоящих из параметров для записи полей выгружаемого DBF-файла.
//
// Возвращаемое значение:
//  МассивСтруктурКолонок - Массив - массив структур. 
//
Функция ПолучитьКолонкиDBF()
	
	ТаблицаДляВыгрузки = РеквизитФормыВЗначение("ЯрославскаяОбласть_ТаблицаДляВыгрузки");
	
	МассивСтруктурКолонок = Новый Массив;
	
	Для Каждого Колонка Из ТаблицаДляВыгрузки.Колонки Цикл
		
		Если Не (Колонка.Имя = "N") Тогда
			
			// Элемент массива - данные N-ой строки.
			Структура = Новый Структура;
			Структура.Вставить("Имя",                     Колонка.Имя);
			
			//Если Колонка.Имя = "NKW" Тогда
			//	
			//	Структура.Вставить("Тип",   "S");
			//	Структура.Вставить("Длина", 50);
			//	
			//Иначе
			Если Колонка.ТипЗначения.СодержитТип(Тип("Число")) Тогда
				Структура.Вставить("Тип",                     "N");
				Структура.Вставить("РазрядностьЦелойЧасти",   Колонка.ТипЗначения.КвалификаторыЧисла.Разрядность - Колонка.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти);
				Структура.Вставить("РазрядностьДробнойЧасти", Колонка.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти);
			ИначеЕсли Колонка.ТипЗначения.СодержитТип(Тип("Строка")) Тогда
				Структура.Вставить("Тип",   "S");
				Структура.Вставить("Длина", Колонка.ТипЗначения.КвалификаторыСтроки.Длина);
			ИначеЕсли Колонка.ТипЗначения.СодержитТип(Тип("Дата")) Тогда
				Структура.Вставить("Тип",       "D");
				Структура.Вставить("ЧастиДаты", Колонка.ТипЗначения.КвалификаторыДаты.ЧастиДаты);
			КонецЕсли;
			
			МассивСтруктурКолонок.Добавить(Структура);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТаблицаДляВыгрузки, "ЯрославскаяОбласть_ТаблицаДляВыгрузки");
	
	Возврат МассивСтруктурКолонок;
	
КонецФункции // ПолучитьКолонкиDBF()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФорм

&НаКлиентеНаСервереБезКонтекста
// Процедура управляет внешним видом формы.
//
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	ЭтоЛьгота = Объект.ВариантВыгрузки = "Сведения о начисленных льготах";
	
	Элементы.КодРайона.Видимость     = ЭтоЛьгота;
	Элементы.ГруппаОтборЛС.Видимость = Не ЭтоЛьгота;
	
	Элементы.КаталогВыгрузки.Видимость = Форма.РасширениеПодключено;
	
КонецПроцедуры // УправлениеФормой()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ФАЙЛАМИ

#Область СлужебныеПроцедурыРаботыСФайлами

&НаКлиенте
// Определяет подключено ли расширение для работы с файлами.
Процедура ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиенте()
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиентеЗавершение", ЭтотОбъект);
	
	УПЖКХ_РаботаСФайламиКлиент.ОпределитьВидВзаимодействияСФайловойСистемой(ОповещениеЗавершения);
	
КонецПроцедуры // ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиентеЗавершение()

&НаКлиенте
// Обработчик процедуры определяющей подключено расширение работы с файлами или нет.
Процедура ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиентеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		РасширениеПодключено = Результат;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти
