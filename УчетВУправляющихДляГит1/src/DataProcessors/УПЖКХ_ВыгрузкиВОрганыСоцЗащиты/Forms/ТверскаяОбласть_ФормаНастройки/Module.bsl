
//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область СобытияФормы

// Обработчик события "ПриСозданииНаСервере" формы.
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Получаем настройки из хранилища.
	Если Параметры.Свойство("АдресХранилищаНастроек") И Не Параметры.АдресХранилищаНастроек = Неопределено Тогда
		
		АдресХранилищаНастроек = Параметры.АдресХранилищаНастроек;
		
		СтруктураПараметров = ПолучитьИзВременногоХранилища(АдресХранилищаНастроек);
		
		Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
			Если СтруктураПараметров.Свойство("ИмяФайлаЗагрузки") Тогда
				Объект.ИмяФайлаЗагрузки = СтруктураПараметров.ИмяФайлаЗагрузки;
			КонецЕсли;
			
			Если СтруктураПараметров.Свойство("ТверскаяОбласть_УслугиСписком") Тогда
				ТверскаяОбласть_УслугиСписком.Загрузить(СтруктураПараметров.ТверскаяОбласть_УслугиСписком);
			КонецЕсли;
			
			Если СтруктураПараметров.Свойство("ТверскаяОбласть_ЛьготныеКатегории") Тогда
				Объект.ТверскаяОбласть_ЛьготныеКатегории.Загрузить(СтруктураПараметров.ТверскаяОбласть_ЛьготныеКатегории);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

#КонецОбласти // СобытияФормы

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКоманд

// Обработчик команды "КомандаСохранитьИЗакрыть" формы.
//
&НаКлиенте
Процедура КомандаСохранитьИЗакрыть(Команда)
	
	Если ЕстьОшибкиВТаблицахСоответствия() Тогда
		Возврат
	КонецЕсли;
	
	СохранитьНастройкиНаСервере();
	
	Закрыть(Новый Структура("НастройкиСохранены", Истина));
	
КонецПроцедуры // КомандаСохранитьИЗакрыть()

// Обработчик команды "КомандаЗаполнитьЛК" формы.
//
&НаКлиенте
Процедура КомандаЗаполнитьЛК(Команда)
	
	Если ПустаяСтрока(Объект.ИмяФайлаЗагрузки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указан файл обмена!");
		Возврат;
	КонецЕсли;
	
	ФайлНаДиске = Новый Файл(Объект.ИмяФайлаЗагрузки);
	Если НЕ ФайлНаДиске.Существует() Тогда
		ПоказатьПредупреждение(Неопределено, "Файл обмена не найден!");
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = "";
	
	НачатьПомещениеФайла(Новый ОписаниеОповещения("ОбработатьПомещениеФайлаЛК", ЭтаФорма),
						 ПутьКФайлу, Объект.ИмяФайлаЗагрузки, Ложь);
	
КонецПроцедуры // КомандаЗаполнитьЛК()

// Обработчик команды "КомандаЗаполнитьУслуги".
//
&НаКлиенте
Процедура КомандаЗаполнитьУслуги(Команда)
	
	Если ПустаяСтрока(Объект.ИмяФайлаЗагрузки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указан файл обмена!");
		Возврат;
	КонецЕсли;
	
	ФайлНаДиске = Новый Файл(Объект.ИмяФайлаЗагрузки);
	Если НЕ ФайлНаДиске.Существует() Тогда
		ПоказатьПредупреждение(Неопределено, "Файл обмена не найден!");
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = "";
	
	НачатьПомещениеФайла(Новый ОписаниеОповещения("ОбработатьПомещениеФайлаУслуг", ЭтаФорма),
						 ПутьКФайлу, Объект.ИмяФайлаЗагрузки, Ложь);
	
КонецПроцедуры // КомандаЗаполнитьУслуги()

#КонецОбласти // ОбработчикиКоманд

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область СобытияЭлементовФормы

// Обработчик события "Очистка" формы.
//
&НаКлиенте
Процедура ТверскаяОбласть_УслугиУслугиВБазеСтрокойОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ТверскаяОбласть_УслугиУслугиВБазеСтрокойОчистка()

// Обработчик события "НачалоВыбора" поля "ТверскаяОбласть_УслугиУслугиВБазеСтрокой".
//
&НаКлиенте
Процедура ТверскаяОбласть_УслугиУслугиВБазеСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ТверскаяОбласть_Услуги.ТекущиеДанные;
	
	ОткрытьФорму("Обработка.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты.Форма.ТверскаяОбласть_ФормаЗаполненияСпискаЗначений",
				 Новый Структура("СписокУслуг, УслугаВОСЗН, СписокВсехВыбранныхУслуг", ТекущиеДанные.УслугиВБазеСписок, ТекущиеДанные.УслугаВОСЗН, ТверскаяОбласть_УслугиСписком),
				 ЭтаФорма,,,,
				 Новый ОписаниеОповещения("ОбработатьВыборУслуг", ЭтаФорма, Новый Структура("ТекущиеДанные", ТекущиеДанные)),
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ТверскаяОбласть_УслугиУслугиВБазеСтрокойНачалоВыбора()

// Обработчик события "ПередОкончаниемРедактирования" поля " ТверскаяОбласть_ЛьготныеКатегории".
//
&НаКлиенте
Процедура ТверскаяОбласть_ЛьготныеКатегорииПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ ОтменаРедактирования Тогда
		
		// Проверка колонки "Льгоная категория в Базе" на наличие пустых полей и дубликатов льготных категорий.
		Если Элемент.ТекущиеДанные.ЛьготнаяКатегория = ПредопределенноеЗначение("Справочник.КВП_ЛьготныеКатегории.ПустаяСсылка") Тогда
			
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Льготная категория в Базе должна быть заполнена!";
			СообщениеПользователю.Сообщить();
			
			Отказ = Истина;
			
		Иначе
			
			// Проверка наличия дубликатов льготных категорий.
			ОтборСтрок = Новый Структура("ЛьготнаяКатегория");
			ОтборСтрок.ЛьготнаяКатегория = Элемент.ТекущиеДанные.ЛьготнаяКатегория;
			
			НайденныеСтроки = Объект.ТверскаяОбласть_ЛьготныеКатегории.НайтиСтроки(ОтборСтрок);
			
			ПерваяИтерация = Истина;
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				
				Если ПерваяИтерация Тогда
					НаименованиеЛКВОСЗН = ТекСтрока.НаименованиеЛКВОСЗН;
					ПерваяИтерация = Ложь;
				Иначе
					
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Льготная категория в Базе""" + ОтборСтрок.ЛьготнаяКатегория + 
																	""" уже установлена в соответствие для льготной категории в ОСЗН """ + НаименованиеЛКВОСЗН + """! Выберите другую льготную категорию.");
					Элемент.ТекущиеДанные.ЛьготнаяКатегория = ПредопределенноеЗначение("Справочник.КВП_ЛьготныеКатегории.ПустаяСсылка");
					Отказ = Истина;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Проверка колонки "Наименование льготной категории в ОСЗН" на наличие пустых полей и дубликатов льготных категорий.
		Если Элемент.ТекущиеДанные.НаименованиеЛКВОСЗН = "" Тогда
			
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Льготная категория в ОСЗН должна быть заполнена!";
			СообщениеПользователю.Сообщить();
			
			Отказ = Истина;
			
		Иначе
			
			// Проверка наличия дубликатов льготных категорий в ОСЗН.
			ОтборСтрок = Новый Структура("НаименованиеЛКВОСЗН");
			ОтборСтрок.НаименованиеЛКВОСЗН = Элемент.ТекущиеДанные.НаименованиеЛКВОСЗН;
			
			НайденныеСтроки = Объект.ТверскаяОбласть_ЛьготныеКатегории.НайтиСтроки(ОтборСтрок);
			
			ПерваяИтерация = Истина;
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				
				Если ПерваяИтерация Тогда
					НаименованиеЛКВБазе = ТекСтрока.ЛьготнаяКатегория;
					ПерваяИтерация = Ложь;
				Иначе
					
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Льготная категория в ОСЗН """ + ОтборСтрок.НаименованиеЛКВОСЗН + 
																	""" уже установлена в соответствие для льготной категории в Базе """ + НаименованиеЛКВБазе + """! Выберите другую льготную категорию.");
					Элемент.ТекущиеДанные.НаименованиеЛКВОСЗН = "";
					Отказ = Истина;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ТверскаяОбласть_ЛьготныеКатегорииПередОкончаниемРедактирования()

// Обработчик события "ПередОкончаниемРедактирования" поля " ТверскаяОбласть_Услуги".
//
&НаКлиенте
Процедура ТверскаяОбласть_УслугиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ ОтменаРедактирования Тогда
		
		// Проверка колонки "Услуга в ОСЗН" на наличие пустых полей и дубликатов услуг.
		Если Элемент.ТекущиеДанные.УслугаВОСЗН = "" Тогда
			
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Услуга в ОСЗН должна быть заполнена!";
			СообщениеПользователю.Сообщить();
			
			Отказ = Истина;
			
		Иначе
			
			// Проверка наличия дубликатов льготных категорий в ОСЗН.
			ОтборСтрок = Новый Структура("УслугаВОСЗН");
			ОтборСтрок.УслугаВОСЗН = Элемент.ТекущиеДанные.УслугаВОСЗН;
			
			НайденныеСтроки = ТверскаяОбласть_УслугиСписком.НайтиСтроки(ОтборСтрок);
			
			ПерваяИтерация = Истина;
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				
				Если ПерваяИтерация Тогда
					НаименованияУслуг = ТекСтрока.УслугиВБазеСтрокой;
					ПерваяИтерация = Ложь;
				Иначе
					
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Услуга в ОСЗН""" + ОтборСтрок.УслугаВОСЗН + 
					""" уже установлена в соответствие для списка услуг в Базе: """ + НаименованияУслуг + """! Выберите другую услугу.");
					Элемент.ТекущиеДанные.УслугаВОСЗН = "";
					Отказ = Истина;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		// Проверка колонки "Услуга в Базе" на наличие пустых полей услуг.
		Если Элемент.ТекущиеДанные.УслугиВБазеСтрокой = "" Тогда
			
			СообщениеПользователю = Новый СообщениеПользователю;
			СообщениеПользователю.Текст = "Услуги в Базе должны быть заполнены!";
			СообщениеПользователю.Сообщить();
			
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ТверскаяОбласть_УслугиПередОкончаниемРедактирования()

#КонецОбласти // СобытияЭлементовФормы

//////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНЦИИ

#Область ВспомогательныеМеханизмы

// Помещает настройки во временное хранилище основной формы.
//
&НаСервере
Процедура СохранитьНастройкиНаСервере()
	
	ПараметрыНастройки = Новый Структура;
	ПараметрыНастройки.Вставить("ТверскаяОбласть_УслугиСписком",     ТверскаяОбласть_УслугиСписком.Выгрузить());
	ПараметрыНастройки.Вставить("ТверскаяОбласть_ЛьготныеКатегории", Объект.ТверскаяОбласть_ЛьготныеКатегории.Выгрузить());
	
	ПоместитьВоВременноеХранилище(ПараметрыНастройки, АдресХранилищаНастроек);
	
КонецПроцедуры // СохранитьНастройкиНаСервере()

// Обработчик выбора услуг.
//
&НаКлиенте
Процедура ОбработатьВыборУслуг(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	СписокУслуг   = Результат.СписокУслуг;
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ТекущиеДанные.УслугиВБазеСписок = СписокУслуг;
		
		УслугиВБазеСтрокой = "";
		Для Каждого ТекУслуга Из СписокУслуг Цикл
			УслугиВБазеСтрокой = УслугиВБазеСтрокой + Строка(ТекУслуга.Значение) + "; ";
		КонецЦикла;
		
		ТекущиеДанные.УслугиВБазеСтрокой = Лев(УслугиВБазеСтрокой, СтрДлина(УслугиВБазеСтрокой) - 2);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВыборУслуг()

// Обработчик результата помещения файла, вызванного в процедуре "КомандаЗаполнитьУслуги()".
//
&НаКлиенте
Процедура ОбработатьПомещениеФайлаУслуг(Результат, ПутьКФайлу, ВыбранноеИмяФайла, ДопПараметры) Экспорт
	
	Если ТверскаяОбласть_УслугиСписком.Количество() > 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("КомандаЗаполнитьУслугиЗавершение", ЭтотОбъект, Новый Структура("ПутьКФайлу", ПутьКФайлу));
		
		ТекстВопроса = "Перед заполнением таблица услуг будет очищена. Заполнить?";
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ЗагрузитьДанные(ПутьКФайлу, "Услуги");
	КонецЕсли;
	
КонецПроцедуры // ОбработатьПомещениеФайлаУслуг()

// Обработчик результата опроса команды "КомандаЗаполнитьУслугиЗавершение".
//
&НаКлиенте
Процедура КомандаЗаполнитьУслугиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЗагрузитьДанные(ДополнительныеПараметры.ПутьКФайлу, "Услуги");
		
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьУслугиЗавершение()

// Обработчик результата помещения файла, вызванного в процедуре "КомандаЗаполнитьЛК()".
//
&НаКлиенте
Процедура ОбработатьПомещениеФайлаЛК(Результат, ПутьКФайлу, ВыбранноеИмяФайла, ДопПараметры) Экспорт
	
	Если ТверскаяОбласть_УслугиСписком.Количество() > 0 Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("КомандаЗаполнитьЛКЗавершение", ЭтотОбъект, Новый Структура("ПутьКФайлу", ПутьКФайлу));
		
		ТекстВопроса = "Перед заполнением таблица льготных категорий будет очищена. Заполнить?";
		
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ЗагрузитьДанные(ПутьКФайлу, "ЛьготныеКатегории");
	КонецЕсли;
	
КонецПроцедуры // ОбработатьПомещениеФайлаЛК()

// Обработчик результата опроса команды "КомандаЗаполнитьЛКЗавершение".
//
&НаКлиенте
Процедура КомандаЗаполнитьЛКЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЗагрузитьДанные(ДополнительныеПараметры.ПутьКФайлу, "ЛьготныеКатегории");
		
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьЛКЗавершение()

// Процедура загрузки данных из файла.
//
&НаСервере
Процедура ЗагрузитьДанные(ПутьКФайлу, ТипЗагружаемыхДанных)
	
	// Запись временных данных во временный файл.
	врДанныеФайла = ПолучитьИзВременногоХранилища(ПутьКФайлу);
	ВременныйФайл = ПолучитьИмяВременногоФайла("DBF");
	
	// Для чтения *.dbf формата урежем имя временного файла.
	ФайлДБФ = Новый Файл(ВременныйФайл);
	СтароеИмяФайла = ФайлДБФ.ИмяБезРасширения + ".DBF";
	НовоеИмяФайла = Лев(ФайлДБФ.ИмяБезРасширения, 8) + ".DBF";
	ВременныйФайл = СтрЗаменить(ФайлДБФ.ПолноеИмя, СтароеИмяФайла, НовоеИмяФайла);
	
	врДанныеФайла.Записать(ВременныйФайл);
	
	ФайлДБФ = Новый XBase;
	ФайлДБФ.Кодировка = КодировкаXBase.OEM;
	ФайлДБФ.ОткрытьФайл(ВременныйФайл, , Истина);
	
	ОстатокОтДеления = (ФайлДБФ.Поля.Количество() - 15) % 11;
	
	Если ОстатокОтДеления = 0 Тогда
		
		// Узнаём количество услуг.
		КоличествоУслуг = (ФайлДБФ.Поля.Количество() - 15) / 11;
		
		ТаблицаДанныхИзФайла = ПолучитьТаблицуДанныхИзФайла(ФайлДБФ, КоличествоУслуг, ТипЗагружаемыхДанных);
		
		Если ТипЗагружаемыхДанных = "Услуги" Тогда
			ТверскаяОбласть_УслугиСписком.Очистить();
			ТверскаяОбласть_УслугиСписком.Загрузить(ТаблицаДанныхИзФайла);
		Иначе
			Объект.ТверскаяОбласть_ЛьготныеКатегории.Очистить();
			Объект.ТверскаяОбласть_ЛьготныеКатегории.Загрузить(ТаблицаДанныхИзФайла);
		КонецЕсли;
		
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Структура файла обмена отличается от той, что содержится в справочной информации к выгрузке! Выберите корректный файл.",
															, "ИмяФайлаЗагрузки", "Объект");
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьДанные()

// Получает таблицу услуг, либо же таблицу льготных категорий.
//
&НаСервере
Функция ПолучитьТаблицуДанныхИзФайла(ФайлДБФ, КоличествоУслуг, ТипЗагружаемыхДанных)
	
	// Заполнение таблицы данных услуг из файла.
	ТаблицаДанныхИзФайла = Новый ТаблицаЗначений;
	
	ТаблицаДанныхИзФайла.Колонки.Добавить("УслугаВОСЗН", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)));
	ТаблицаДанныхИзФайла.Колонки.Добавить("НаименованиеЛКВОСЗН", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(0)));
	
	Попытка
		Пока НЕ ФайлДБФ.ВКонце() Цикл
			
			Сч = 1;
			Пока Сч <= КоличествоУслуг Цикл
				
				Если ТипЗагружаемыхДанных = "Услуги" Тогда
					
					ТекУслуга = СокрЛП(ФайлДБФ["NKOD_LGT" + Сч]);
					Если Не ТекУслуга = "" Тогда
						НоваяЗапись = ТаблицаДанныхИзФайла.Добавить();
						НоваяЗапись["УслугаВОСЗН"] = ТекУслуга;
					КонецЕсли;
					
				Иначе
					
					ТекЛК = СокрЛП(ФайлДБФ["NISU_OSN" + Сч]);
					Если Не ТекЛК = "" Тогда
						НоваяЗапись = ТаблицаДанныхИзФайла.Добавить();
						НоваяЗапись["НаименованиеЛКВОСЗН"] = СокрЛП(ФайлДБФ["NISU_OSN" + Сч]);
					КонецЕсли;
					
				КонецЕсли;
				
				Сч = Сч + 1;
				
			КонецЦикла;
			
			ФайлДБФ.Следующая();
		КонецЦикла;
		ФайлДБФ.ЗакрытьФайл();
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Структура файла обмена отличается от той, что содержится в справочной информации к выгрузке! Выберите корректный файл.",
															, "ИмяФайлаЗагрузки", "Объект");
		Возврат ТаблицаДанныхИзФайла;
	КонецПопытки;
	
	ТаблицаДанныхИзФайла.Свернуть("УслугаВОСЗН, НаименованиеЛКВОСЗН");
	
	Возврат ТаблицаДанныхИзФайла;
	
КонецФункции // ПолучитьТаблицуДанныхИзФайла()

// Проверяет корректность заполненности таблиц соответствия.
//
&НаСервере
Функция ЕстьОшибкиВТаблицахСоответствия()
	
	Отбор = Новый Структура("ЛьготнаяКатегория");
	
	Отбор.ЛьготнаяКатегория = Справочники.КВП_ЛьготныеКатегории.ПустаяСсылка();
	
	НайденныеСтроки = Объект.ТверскаяОбласть_ЛьготныеКатегории.НайтиСтроки(Отбор);
	
	Если НайденныеСтроки.Количество() = Объект.ТверскаяОбласть_ЛьготныеКатегории.Количество() Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для дальнейшей загрузки необходимо заполнить соответствие как минимум у одной льготной категории из ОСЗН!");
		Возврат Истина;
		
	КонецЕсли;
	
	Отбор = Новый Структура("УслугиВБазеСтрокой");
	
	Отбор.УслугиВБазеСтрокой = "";
	
	НайденныеСтроки = ТверскаяОбласть_УслугиСписком.НайтиСтроки(Отбор);
	
	Если НайденныеСтроки.Количество() = ТверскаяОбласть_УслугиСписком.Количество() Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для дальнейшей загрузки необходимо заполнить соответствие как минимум у одной услуги из ОСЗН!");
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ЕстьОшибкиВТаблицахСоответствия()

#КонецОбласти // ВспомогательныеМеханизмы
