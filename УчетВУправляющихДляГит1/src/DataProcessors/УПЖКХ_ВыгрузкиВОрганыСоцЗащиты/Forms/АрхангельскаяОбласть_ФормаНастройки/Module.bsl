
#Область ПрочиеПроцедурыИФункции

&НаСервере
// Процедура заполняет таблицу услуг на сервере.
//
Процедура ЗаполнитьТаблицуУслугНаСервере(Идентификатор)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Идентификатор", Идентификатор);
	
	НайденныеСтроки = Объект.АрхангельскаяОбласть_ТаблицаСоответствияЛьготИУслуг.Выгрузить(Отбор, "УслугаВБазе");
	
	Для Каждого ТекСтрока из НайденныеСтроки Цикл
		ЗаполнитьЗначенияСвойств(ТП_УслугаВБазе.Добавить(), ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// РАБОТА С ВРЕМЕННЫМ ХРАНИЛИЩЕМ

#Область РаботаСВременнымХранилищем

&НаСервере
// Помещает настройки во временное хранилище.
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ИмяФайлаЗагрузки",                                    ИмяФайлаЗагрузки);
	СтруктураНастроек.Вставить("АрхангельскаяОбласть_СоответствиеЛьготныхКатегорий",  Объект.АрхангельскаяОбласть_СоответствиеЛьготныхКатегорий.Выгрузить());
	СтруктураНастроек.Вставить("АрхангельскаяОбласть_ТаблицаНаименованийЛьгот",       Объект.АрхангельскаяОбласть_ТаблицаНаименованийЛьгот.Выгрузить());
	СтруктураНастроек.Вставить("АрхангельскаяОбласть_ТаблицаСоответствияЛьготИУслуг", Объект.АрхангельскаяОбласть_ТаблицаСоответствияЛьготИУслуг.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Получаем настройки из хранилища.
	Если Параметры.Свойство("АдресНастроекВХранилище") И Не Параметры.АдресНастроекВХранилище = Неопределено Тогда
		
		СтруктураНастроек = ПолучитьИзВременногоХранилища(Параметры.АдресНастроекВХранилище);
		
		Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
			
			СтруктураНастроек.Свойство("ИмяФайлаЗагрузки", ИмяФайлаЗагрузки);
			
			Если СтруктураНастроек.Свойство("АрхангельскаяОбласть_СоответствиеЛьготныхКатегорий") Тогда
				Объект.АрхангельскаяОбласть_СоответствиеЛьготныхКатегорий.Загрузить(СтруктураНастроек.АрхангельскаяОбласть_СоответствиеЛьготныхКатегорий);
			КонецЕсли;
			
			Если СтруктураНастроек.Свойство("АрхангельскаяОбласть_ТаблицаНаименованийЛьгот") Тогда
				Объект.АрхангельскаяОбласть_ТаблицаНаименованийЛьгот.Загрузить(СтруктураНастроек.АрхангельскаяОбласть_ТаблицаНаименованийЛьгот);
			КонецЕсли;
			
			Если СтруктураНастроек.Свойство("АрхангельскаяОбласть_ТаблицаСоответствияЛьготИУслуг") Тогда
				Объект.АрхангельскаяОбласть_ТаблицаСоответствияЛьготИУслуг.Загрузить(СтруктураНастроек.АрхангельскаяОбласть_ТаблицаСоответствияЛьготИУслуг);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "КомандаСохранить".
Процедура КомандаСохранить(Команда)
	
	Закрыть(ПоместитьНастройкиВХранилище());
	
КонецПроцедуры

&НаКлиенте
// Процедура обработки события нажатия на кнопку "Загрузить из файла загрузки"
//
Процедура ЗагрузитьЛК(Команда)
	
	Если ПустаяСтрока(ИмяФайлаЗагрузки) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не указан файл загрузки на основной форме выгрузки!", "Не указан файл загрузки на основной форме выгрузки!");
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ФайлНаДиске = Новый Файл(ИмяФайлаЗагрузки);
	ФайлНаДиске.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ПроверитьСуществованиеФайлаЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
// Процедура обработки события нажатия на кнопку "Загрузить из файла загрузки"
//
Процедура ЗагрузитьНаименованияЛьгот(Команда)
	
	Если ПустаяСтрока(ИмяФайлаЗагрузки) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не указан файл загрузки на основной форме выгрузки!", "Не указан файл загрузки на основной форме выгрузки!");
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ФайлНаДиске = Новый Файл(ИмяФайлаЗагрузки);
	ФайлНаДиске.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ПроверитьСуществованиеФайлаЗавершение", ЭтотОбъект));
	
КонецПроцедуры

// Обрабатывает результат проверки существования файла.
&НаКлиенте
Процедура ПроверитьСуществованиеФайлаЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	Если НЕ Существует Тогда
		ПоказатьПредупреждение(Неопределено, "Файл не найден!");
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = "";
	
	НачатьПомещениеФайла(Новый ОписаниеОповещения("ОбработатьПомещениеФайла", ЭтаФорма, Истина),
	ПутьКФайлу, ИмяФайлаЗагрузки, Ложь);

КонецПроцедуры

&НаКлиенте
// Обработчик результата помещения файла, вызванного в процедуре "КомандаЗаполнитьУслуги()".
Процедура ОбработатьПомещениеФайла(Результат, ПутьКФайлу, ВыбранноеИмяФайла, ДопПараметры) Экспорт
	
	МассивАдресов = Новый Массив;
	МассивАдресов.Добавить(ПутьКФайлу);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("МассивАдресов",                МассивАдресов);
	ДополнительныеПараметры.Вставить("ЭтоЗагрузкаНаименованийЛьгот", ДопПараметры);
	
	Если ДопПараметры = Истина Тогда
		Если Объект.АрхангельскаяОбласть_ТаблицаНаименованийЛьгот.Количество() > 0 Тогда
			
			Оповещение = Новый ОписаниеОповещения("КомандаЗагрузитьНажатиеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			
			ТекстВопроса = "Перед повторным заполнением таблица соответствия наименований льгот будет очищена. Продолжить?";
			
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			КомандаЗагрузитьНажатиеНаСервере(МассивАдресов, ДопПараметры);
		КонецЕсли;
	Иначе
		Если Объект.АрхангельскаяОбласть_СоответствиеЛьготныхКатегорий.Количество() > 0 Тогда
			
			Оповещение = Новый ОписаниеОповещения("КомандаЗагрузитьНажатиеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			
			ТекстВопроса = "Перед повторным заполнением таблица соответствия льготных категорий будет очищена. Продолжить?";
			
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
		Иначе
			КомандаЗагрузитьНажатиеНаСервере(МассивАдресов, ДопПараметры);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьПомещениеФайла()

&НаКлиенте
// Обработчик результата опроса команды "КомандаЗагрузить".
Процедура КомандаЗагрузитьНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		КомандаЗагрузитьНажатиеНаСервере(ДополнительныеПараметры.МассивАдресов, ДополнительныеПараметры.ЭтоЗагрузкаНаименованийЛьгот);
		
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьНажаниеЗавершение()

&НаСервере
// Процедура обработки события нажатия на кнопку "Загрузить" НаСервере.
// Выгружается список всех услуг из Справочника "КВП_Услуги". 
//
Процедура КомандаЗагрузитьНажатиеНаСервере(МассивАдресов, ЭтоЗагрузкаНаименованийЛьгот)
	
	// Запись временных данных во временный файл.
	СписокФайлов = Новый Массив;
	Для Каждого СтрокаАдреса ИЗ МассивАдресов Цикл
		врДанныеФайла = ПолучитьИзВременногоХранилища(СтрокаАдреса);
		ВременныйФайл = ПолучитьИмяВременногоФайла("DBF");
	
		// Для чтения *.dbf формата урежем имя временного файла.
		ФайлДБФ = Новый Файл(ВременныйФайл);
		СтароеИмяФайла = ФайлДБФ.ИмяБезРасширения + ".DBF";
		НовоеИмяФайла = Лев(ФайлДБФ.ИмяБезРасширения, 8) + ".DBF";
		ВременныйФайл = СтрЗаменить(ФайлДБФ.ПолноеИмя, СтароеИмяФайла, НовоеИмяФайла);
	
		врДанныеФайла.Записать(ВременныйФайл);
		
		СписокФайлов.Добавить(ВременныйФайл);
	КонецЦикла;
	
	Кодировка = КодировкаXBase.OEM;
	
	Если ЭтоЗагрузкаНаименованийЛьгот Тогда
		
		ТаблицаНаименованийЛьготВОСЗН = Объект.АрхангельскаяОбласть_ТаблицаНаименованийЛьгот.Выгрузить();
		
		Для Каждого ФайлЗагрузки Из СписокФайлов Цикл
			
			//загрузка
			ФайлДБФ = Новый XBase;
			ФайлДБФ.Кодировка = Кодировка;
			ФайлДБФ.ОткрытьФайл(ФайлЗагрузки, , Истина);
			Если ФайлДБФ.Открыта() = Истина Тогда
				
				ТаблицаНаименованийЛьготВОСЗН.Очистить();
				
				Если ФайлДБФ.КоличествоЗаписей() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Пока НЕ ФайлДБФ.ВКонце() Цикл
					
					Если ЗначениеЗаполнено(СокрЛП(ФайлДБФ.NKOD_LGT1)) Тогда
						НоваяСтрокаЗагрузки = ТаблицаНаименованийЛьготВОСЗН.Добавить();
						НоваяСтрокаЗагрузки.Идентификатор = СокрЛП(ФайлДБФ.NKOD_LGT1);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СокрЛП(ФайлДБФ.NKOD_LGT2)) Тогда
						НоваяСтрокаЗагрузки = ТаблицаНаименованийЛьготВОСЗН.Добавить();
						НоваяСтрокаЗагрузки.Идентификатор = СокрЛП(ФайлДБФ.NKOD_LGT2);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СокрЛП(ФайлДБФ.NKOD_LGT3)) Тогда
						НоваяСтрокаЗагрузки = ТаблицаНаименованийЛьготВОСЗН.Добавить();
						НоваяСтрокаЗагрузки.Идентификатор = СокрЛП(ФайлДБФ.NKOD_LGT3);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СокрЛП(ФайлДБФ.NKOD_LGT4)) Тогда
						НоваяСтрокаЗагрузки = ТаблицаНаименованийЛьготВОСЗН.Добавить();
						НоваяСтрокаЗагрузки.Идентификатор = СокрЛП(ФайлДБФ.NKOD_LGT4);
					КонецЕсли;
					
					ФайлДБФ.Следующая();
				КонецЦикла;
				
			КонецЕсли;
			
			ФайлДБФ.ЗакрытьФайл();
			
		КонецЦикла;
		
		ТаблицаНаименованийЛьготВОСЗН.Свернуть("Идентификатор");
		
		Объект.АрхангельскаяОбласть_ТаблицаНаименованийЛьгот.Загрузить(ТаблицаНаименованийЛьготВОСЗН);
		
	Иначе
		
		ТаблицаЛКВОСЗН = Объект.АрхангельскаяОбласть_СоответствиеЛьготныхКатегорий.Выгрузить();
		
		Для Каждого ФайлЗагрузки Из СписокФайлов Цикл
			
			//загрузка
			ФайлДБФ = Новый XBase;
			ФайлДБФ.Кодировка = Кодировка;
			ФайлДБФ.ОткрытьФайл(ФайлЗагрузки, , Истина);
			Если ФайлДБФ.Открыта() = Истина Тогда
				
				ТаблицаЛКВОСЗН.Очистить();
				
				Если ФайлДБФ.КоличествоЗаписей() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Пока НЕ ФайлДБФ.ВКонце() Цикл
					
					Если ЗначениеЗаполнено(СокрЛП(ФайлДБФ.NKOD_PU1)) Тогда
						НоваяСтрокаЗагрузки = ТаблицаЛКВОСЗН.Добавить();
						НоваяСтрокаЗагрузки.ЛьготнаяКатегорияВОСЗН = СокрЛП(ФайлДБФ.NKOD_PU1);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СокрЛП(ФайлДБФ.NKOD_PU2)) Тогда
						НоваяСтрокаЗагрузки = ТаблицаЛКВОСЗН.Добавить();
						НоваяСтрокаЗагрузки.ЛьготнаяКатегорияВОСЗН = СокрЛП(ФайлДБФ.NKOD_PU2);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СокрЛП(ФайлДБФ.NKOD_PU3)) Тогда
						НоваяСтрокаЗагрузки = ТаблицаЛКВОСЗН.Добавить();
						НоваяСтрокаЗагрузки.ЛьготнаяКатегорияВОСЗН = СокрЛП(ФайлДБФ.NKOD_PU3);
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СокрЛП(ФайлДБФ.NKOD_PU4)) Тогда
						НоваяСтрокаЗагрузки = ТаблицаЛКВОСЗН.Добавить();
						НоваяСтрокаЗагрузки.ЛьготнаяКатегорияВОСЗН = СокрЛП(ФайлДБФ.NKOD_PU4);
					КонецЕсли;
					
					ФайлДБФ.Следующая();
				КонецЦикла;
				
			КонецЕсли;
			
			ФайлДБФ.ЗакрытьФайл();
			
		КонецЦикла;
		
		ТаблицаЛКВОСЗН.Свернуть("ЛьготнаяКатегорияВОСЗН");
		
		Объект.АрхангельскаяОбласть_СоответствиеЛьготныхКатегорий.Загрузить(ТаблицаЛКВОСЗН);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНажаниеНаСервере()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" таблицы "АрхангельскаяОбласть_СоответствиеЛьготныхКатегорий".
//
Процедура АрхангельскаяОбласть_СоответствиеЛьготныхКатегорийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Запрещаем любое копирование строк (в т.ч. и по F9).
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" табличного поля "ТП_УслугаВБазе".
//
Процедура ТП_УслугаВБазеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Устанавливаем запрет на добавление строк копированием.
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" табличного поля "ТП_УслугаВБазе".
//
Процедура ТП_УслугаВБазеПередУдалением(Элемент, Отказ)
	
	Если ПризнакУдаления Тогда
		Отказ = Истина;
		ПризнакУдаления = Ложь;
	Иначе
		УслугаВБазе         = Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе;
		ИдентификаторЛьготы = Элементы.АрхангельскаяОбласть_ТаблицаНаименованийЛьгот.ТекущиеДанные.Идентификатор;
		
		Отбор = Новый Структура;
		Отбор.Вставить("УслугаВБазе",   УслугаВБазе);
		Отбор.Вставить("Идентификатор", ИдентификаторЛьготы);
		
		СтрокиУдаления = Объект.АрхангельскаяОбласть_ТаблицаСоответствияЛьготИУслуг.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
			Объект.АрхангельскаяОбласть_ТаблицаСоответствияЛьготИУслуг.Удалить(СтрокаУдаления);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередОкончаниемРедактирования" таблицы "УслугаВБазе".
//
Процедура ТП_УслугаВБазеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Добавление незаполненных полей недопустимо!");
		ПризнакУдаления = Истина;
		ТП_УслугаВБазе.Удалить(Элементы.ТП_УслугаВБазе.ТекущиеДанные);
		
		Если ЗначениеЗаполнено(ПредыдущаяУслуга) Тогда
			Идентификатор   = Элементы.АрхангельскаяОбласть_ТаблицаНаименованийЛьгот.ТекущиеДанные.Идентификатор;
			ПризнакУдаления = Истина;
			Отбор = Новый Структура;
			Отбор.Вставить("Идентификатор", Идентификатор);
			Отбор.Вставить("УслугаВБазе",   ПредыдущаяУслуга);
			
			СтрокиУдаления = Объект.АрхангельскаяОбласть_ТаблицаСоответствияЛьготИУслуг.НайтиСтроки(Отбор);
			
			Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
				Объект.АрхангельскаяОбласть_ТаблицаСоответствияЛьготИУслуг.Удалить(СтрокаУдаления);
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриОкончанииРедактирования" табличного поля "ТП_УслугаВБазе".
//
Процедура ТП_УслугаВБазеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		УслугаВБазе         = Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе;
		ИдентификаторЛьготы = Элементы.АрхангельскаяОбласть_ТаблицаНаименованийЛьгот.ТекущиеДанные.Идентификатор;
		
		Если НоваяСтрока Тогда
			НоваяСтрокаСоответствия               = Объект.АрхангельскаяОбласть_ТаблицаСоответствияЛьготИУслуг.Добавить();
			НоваяСтрокаСоответствия.УслугаВБазе   = УслугаВБазе;
			НоваяСтрокаСоответствия.Идентификатор = ИдентификаторЛьготы;
		Иначе
			Если НЕ ПредыдущаяУслуга = УслугаВБазе Тогда
				Отбор = Новый Структура;
				Отбор.Вставить("Идентификатор", ИдентификаторЛьготы);
				Отбор.Вставить("УслугаВБазе",   ПредыдущаяУслуга);
				
				НайденнаяСтрока = Объект.АрхангельскаяОбласть_ТаблицаСоответствияЛьготИУслуг.НайтиСтроки(Отбор);
				Если НайденнаяСтрока.Количество() = 1 Тогда
					НайденнаяСтрока[0].УслугаВБазе = УслугаВБазе;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриНачалеРедактирования" табличного поля "ТП_УслугаВБазе".
//
Процедура ТП_УслугаВБазеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НЕ НоваяСтрока Тогда
		ПредыдущаяУслуга = Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "УслугаВБазе" таблицы "Услуги в Базе".
//
Процедура ТП_УслугаВБазеУслугаВБазеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВыбранныхУслуг = Новый СписокЗначений;
	СтрокиВыбранныхУслуг = Объект.АрхангельскаяОбласть_ТаблицаСоответствияЛьготИУслуг.НайтиСтроки(Новый Структура("Идентификатор", Элементы.АрхангельскаяОбласть_ТаблицаНаименованийЛьгот.ТекущиеДанные.Идентификатор));
	Для Каждого СтрокаВыбраннойУслуги Из СтрокиВыбранныхУслуг Цикл
		СписокВыбранныхУслуг.Добавить(СтрокаВыбраннойУслуги.УслугаВБазе);
	КонецЦикла;
	
	ВидСравненияВОтборе = ВидСравненияКомпоновкиДанных.НеВСписке;
	
	Форма = ПолучитьФорму("Справочник.КВП_Услуги.ФормаВыбора", Новый Структура("ТекущаяСтрока", Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе), Элемент);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Форма.Список.КомпоновщикНастроек.Настройки.Отбор, "Ссылка", СписокВыбранныхУслуг,
															ВидСравненияКомпоновкиДанных.НеВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" табличного поля "Наименование Льготы".
//
Процедура АрхангельскаяОбласть_ТаблицаНаименованийЛьготПриАктивизацииСтроки(Элемент)
	
	ТП_УслугаВБазе.Очистить();
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		Идентификатор = Элемент.ТекущиеДанные.Идентификатор;
		ЗаполнитьТаблицуУслугНаСервере(Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
