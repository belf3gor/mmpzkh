
#Область ПрочиеПроцедурыИФункции

&НаКлиенте
// Процедура считывает данные из указанного файла.
//
Процедура СчитатьИзФайла(ИмяФайла, КолонкаСКодом, КолонкаСДанными, КолонкаДляПроверки = Неопределено, ТаблицаЗагрузки)
	
	// Загрузка виды жил. фонда.
	ФайлДБФ = Новый XBase;
	#Если НЕ ВебКлиент Тогда
	ФайлДБФ.Кодировка = КодировкаXBase.OEM;
	#КонецЕсли
	ФайлДБФ.ОткрытьФайл(ИмяКаталогаЗагрузки + "/" + ИмяФайла, ,Истина);
	
	Если Не ФайлДБФ.Открыта() Тогда
		Текст = "ru = ""Не удалось открыть указанный файл """ + ИмяКаталогаЗагрузки + "/" + ИмяФайла + """!"";"
		+ " en = ""Can't open this file!""";
		ПоказатьПредупреждение(, НСтр(Текст));
	Иначе
		
		ТаблицаЗагрузки.Очистить();
		
		Пока Не ФайлДБФ.ВКонце() Цикл
			
			Если ЗначениеЗаполнено(КолонкаДляПроверки) Тогда 
				Если НЕ ЗначениеЗаполнено(ФайлДБФ[КолонкаДляПроверки]) Тогда
					ФайлДБФ.Следующая();
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			НоваяЗапись = ТаблицаЗагрузки.Добавить();
			НоваяЗапись.Номер         = ФайлДБФ[КолонкаСКодом];
			НоваяЗапись.ИзСправочника = СокрЛП(ФайлДБФ[КолонкаСДанными]);
			
			ФайлДБФ.Следующая();
			
		КонецЦикла;
		
		ФайлДБФ.ЗакрытьФайл();
		
	КонецЕсли;
	
КонецПроцедуры // СчитатьИзФайла()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// РАБОТА С ВРЕМЕННЫМ ХРАНИЛИЩЕМ

#Область РаботаСВременнымХранилищем

&НаСервере
// Помещает настройки во временное хранилище.
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("НижегородскаяОбл_НастройкиВидЖилФонда",   Объект.НижегородскаяОбл_НастройкиВидЖилФонда.Выгрузить());
	СтруктураНастроек.Вставить("НижегородскаяОбл_НастройкиТипыОтоплений", Объект.НижегородскаяОбл_НастройкиТипыОтоплений.Выгрузить());
	СтруктураНастроек.Вставить("НижегородскаяОбл_НастройкиВидыПлощадей",  Объект.НижегородскаяОбл_НастройкиВидыПлощадей.Выгрузить());
	СтруктураНастроек.Вставить("НижегородскаяОбл_НастройкиТипыЖилья",     Объект.НижегородскаяОбл_НастройкиТипыЖилья.Выгрузить());
	СтруктураНастроек.Вставить("НижегородскаяОбл_НастройкиУслуги",        Объект.НижегородскаяОбл_НастройкиУслуги.Выгрузить());
	СтруктураНастроек.Вставить("НижегородскаяОбл_НастройкиЕдИзмерения",   Объект.НижегородскаяОбл_НастройкиЕдИзмерения.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Получаем настройки из хранилища.
	Если Параметры.Свойство("АдресНастроекВХранилище") И Не Параметры.АдресНастроекВХранилище = Неопределено Тогда
		
		СтруктураНастроек = ПолучитьИзВременногоХранилища(Параметры.АдресНастроекВХранилище);
		
		Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
			
			СтруктураНастроек.Свойство("ИмяКаталогаЗагрузки", ИмяКаталогаЗагрузки);
			
			Если СтруктураНастроек.Свойство("НижегородскаяОбл_НастройкиВидЖилФонда") Тогда
				Объект.НижегородскаяОбл_НастройкиВидЖилФонда.Загрузить(СтруктураНастроек.НижегородскаяОбл_НастройкиВидЖилФонда);
			КонецЕсли;
			
			Если СтруктураНастроек.Свойство("НижегородскаяОбл_НастройкиТипыОтоплений") Тогда
				Объект.НижегородскаяОбл_НастройкиТипыОтоплений.Загрузить(СтруктураНастроек.НижегородскаяОбл_НастройкиТипыОтоплений);
			КонецЕсли;
			
			Если СтруктураНастроек.Свойство("НижегородскаяОбл_НастройкиВидыПлощадей") Тогда
				Объект.НижегородскаяОбл_НастройкиВидыПлощадей.Загрузить(СтруктураНастроек.НижегородскаяОбл_НастройкиВидыПлощадей);
			КонецЕсли;
			
			Если СтруктураНастроек.Свойство("НижегородскаяОбл_НастройкиТипыЖилья") Тогда
				Объект.НижегородскаяОбл_НастройкиТипыЖилья.Загрузить(СтруктураНастроек.НижегородскаяОбл_НастройкиТипыЖилья);
			КонецЕсли;
			
			Если СтруктураНастроек.Свойство("НижегородскаяОбл_НастройкиУслуги") Тогда
				Объект.НижегородскаяОбл_НастройкиУслуги.Загрузить(СтруктураНастроек.НижегородскаяОбл_НастройкиУслуги);
			КонецЕсли;
			
			Если СтруктураНастроек.Свойство("НижегородскаяОбл_НастройкиЕдИзмерения") Тогда
				Объект.НижегородскаяОбл_НастройкиЕдИзмерения.Загрузить(СтруктураНастроек.НижегородскаяОбл_НастройкиЕдИзмерения);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "КомандаСохранить".
Процедура КомандаСохранить(Команда)
	
	Закрыть(ПоместитьНастройкиВХранилище());
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаЗаполнить".
Процедура КомандаЗаполнить(Команда)
	
	ПоказатьВопрос(Новый ОписаниеОповещения("КомандаЗаполнитьЗавершение", ЭтотОбъект),
						"Перед заполением табличные части настроек будут очищены. Заполнить?",
						РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры // КомандаЗаполнить()

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "КомандаЗаполнить()".
Процедура КомандаЗаполнитьЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		КомандаЗаполнитьПродолжение();
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьЗавершение()

&НаКлиенте
// Продолжение процедуры "КомандаЗаполнить()".
Процедура КомандаЗаполнитьПродолжение()
	
	// Загрузка виды жил. фонда.
	СчитатьИзФайла("sprgilf.dbf", "GIL_F", "I_GILF", "GIL_F", Объект.НижегородскаяОбл_НастройкиВидЖилФонда);
	
	// Загрузка типов отопления.
	СчитатьИзФайла("sprtot.dbf", "O_TOT", "I_OT", , Объект.НижегородскаяОбл_НастройкиТипыОтоплений);
	
	// Загрузка типов жилья.
	СчитатьИзФайла("sprdomtp.dbf", "ID", "NAME", , Объект.НижегородскаяОбл_НастройкиТипыЖилья);
	
	// Загрузка услуг.
	СчитатьИзФайла("sprusl.dbf", "K_USL", "I_USL", , Объект.НижегородскаяОбл_НастройкиУслуги);
	
	// Загрузка единиц измерения.
	СчитатьИзФайла("sprunits.dbf", "ID", "NAME", , Объект.НижегородскаяОбл_НастройкиЕдИзмерения);
	
КонецПроцедуры // КомандаЗаполнитьПродолжение()

#КонецОбласти