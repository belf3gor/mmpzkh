
//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область События_формы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	АдресХранилищаНастроек = Параметры.АдресХранилищаНастроек;
	
	СтруктураПараметров = ПолучитьИзВременногоХранилища(АдресХранилищаНастроек);
	
	СписокУслугВОСЗ = СтруктураПараметров.СписокУслугВОСЗ;
	
	ЗаполнитьТаблицуСоответствия(СтруктураПараметров.ТаблицаСоответствия);
	ЗаполнитьТаблицуПорядокЗданий(СтруктураПараметров.ТаблицаПорядокЗданий);
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область СобытияФормы

&НаКлиенте
// Обработчик события "Очистка" формы.
Процедура ТаблицаСоответствияУслугиВБазеСтрокойОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ТаблицаПорядокЗданий".
Процедура ТаблицаПорядокЗданийПриИзменении(Элемент)
	
	Порядок = 0;
	Для Каждого ТекущаяСтрока Из ТаблицаПорядокЗданий Цикл
		Порядок = Порядок + 1;
		ТекущаяСтрока.Порядок = Порядок;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ТаблицаСоответствияУслугиВБазеСтрокой".
Процедура ТаблицаСоответствияУслугиВБазеСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ТаблицаСоответствия.ТекущиеДанные;
	
	ОткрытьФорму("Обработка.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты.Форма.МосковскаяОбластьГородПодольск_ФормаЗаполненияСпискаЗначений",
				 Новый Структура("СписокУслуг, УслугаВОСЗ", ТекущиеДанные.УслугиВБазеСписок, ТекущиеДанные.УслугаВОСЗ),
				 ЭтаФорма,,,,
				 Новый ОписаниеОповещения("ОбработатьВыборУслуг", ЭтаФорма, Новый Структура("ТекущиеДанные", ТекущиеДанные)),
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область Команды

&НаКлиенте
// Обработчик команды "КомандаСохранитьИЗакрыть" формы.
Процедура КомандаСохранитьИЗакрыть(Команда)
	
	СохранитьНастройкиНаСервере();
	
	Закрыть(Новый Структура("НастройкиСохранены", Истина));
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область Вспомогательные_механизмы

&НаКлиенте
// Обработчик выбора услуг.
Процедура ОбработатьВыборУслуг(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	СписокУслуг   = Результат.СписокУслуг;
	ТекущиеДанные = ДополнительныеПараметры.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		ТекущиеДанные.УслугиВБазеСписок = СписокУслуг;
		
		УслугиВБазеСтрокой = "";
		Для Каждого ТекУслуга Из СписокУслуг Цикл
			УслугиВБазеСтрокой = УслугиВБазеСтрокой + Строка(ТекУслуга.Значение) + "; ";
		КонецЦикла;
		
		ТекущиеДанные.УслугиВБазеСтрокой = Лев(УслугиВБазеСтрокой, СтрДлина(УслугиВБазеСтрокой) - 2);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Помещает настройки во временное хранилище основной формы.
Процедура СохранитьНастройкиНаСервере()
	
	ПодготовитьТаблицуСоответствия();
	
	ПараметрыНастройки = Новый Структура;
	ПараметрыНастройки.Вставить("ТаблицаСоответствия",  ТаблицаСоответствияДляСохранения.Выгрузить());
	ПараметрыНастройки.Вставить("ТаблицаПорядокЗданий", ТаблицаПорядокЗданий.Выгрузить());
	
	ПоместитьВоВременноеХранилище(ПараметрыНастройки, АдресХранилищаНастроек);
	
КонецПроцедуры

&НаСервере
// Помещает настройки во временное хранилище основной формы.
Процедура ПодготовитьТаблицуСоответствия()
	
	Для Каждого ТекЭлемент Из СписокУслугВОСЗ Цикл
		УслугаВОСЗ = ТекЭлемент.Значение;
		
		НайденныеСтроки = ТаблицаСоответствия.НайтиСтроки(Новый Структура("УслугаВОСЗ", УслугаВОСЗ));
		
		Если НайденныеСтроки.Количество() = 1 Тогда
			УслугиВБазеСписок = НайденныеСтроки[0].УслугиВБазеСписок;
			Для Каждого ТекущаяСтрока Из УслугиВБазеСписок Цикл
				УслугаВБазе = ТекущаяСтрока.Значение;
				ДобавитьСтрокуВТаблицуСоответствия(УслугаВОСЗ, УслугаВБазе);
			КонецЦикла;
		Иначе
			ДобавитьСтрокуВТаблицуСоответствия(УслугаВОСЗ, Справочники.КВП_Услуги.ПустаяСсылка());
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Добавляет строку в таблицу соответствия.
Процедура ДобавитьСтрокуВТаблицуСоответствия(УслугаВОСЗ, УслугаВБазе)
	
	Отбор = Новый Структура("УслугаВОСЗ, УслугаВБазе", УслугаВОСЗ, УслугаВБазе);
	Если ТаблицаСоответствияДляСохранения.НайтиСтроки(Новый Структура("УслугаВОСЗ, УслугаВБазе", УслугаВОСЗ, УслугаВБазе)).Количество() = 0 Тогда
		НоваяСтрока = ТаблицаСоответствияДляСохранения.Добавить();
		НоваяСтрока.УслугаВОСЗ  = УслугаВОСЗ;
		НоваяСтрока.УслугаВБазе = УслугаВБазе;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура заполняет таблицу соответствия.
Процедура ЗаполнитьТаблицуСоответствия(ТаблицаСоответствияИзОсновнойФормы)
	
	Для Каждого ТекЭлемент Из СписокУслугВОСЗ Цикл
		УслугаВОСЗ = ТекЭлемент.Значение;
		
		НоваяСтрока = ТаблицаСоответствия.Добавить();
		НоваяСтрока.УслугаВОСЗ = УслугаВОСЗ;
		
		УслугиВБазеСтрокой = "";
		
		НайденныеСтроки = ТаблицаСоответствияИзОсновнойФормы.НайтиСтроки(Новый Структура("УслугаВОСЗ", УслугаВОСЗ));
		
		Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
			УслугаВБазе = ТекущаяСтрока.УслугаВБазе;
			Если НоваяСтрока.УслугиВБазеСписок.НайтиПоЗначению(УслугаВБазе) = Неопределено Тогда
				НоваяСтрока.УслугиВБазеСписок.Добавить(УслугаВБазе);
				УслугиВБазеСтрокой = УслугиВБазеСтрокой + Строка(УслугаВБазе) + "; ";
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(УслугиВБазеСтрокой) Тогда
			НоваяСтрока.УслугиВБазеСтрокой = Лев(УслугиВБазеСтрокой, СтрДлина(УслугиВБазеСтрокой) - 2);;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Процедура заполняет таблицу порядок зданий.
Процедура ЗаполнитьТаблицуПорядокЗданий(ТаблицаПорядокЗданийИзОсновнойФормы)
	
	ТаблицаПорядокЗданийИзОсновнойФормы.Сортировать("Порядок");
	ТаблицаПорядокЗданий.Загрузить(ТаблицаПорядокЗданийИзОсновнойФормы);
	
КонецПроцедуры

#КонецОбласти
