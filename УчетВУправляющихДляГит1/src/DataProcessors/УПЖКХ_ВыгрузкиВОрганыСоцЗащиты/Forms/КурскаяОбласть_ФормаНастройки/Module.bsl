&НаКлиенте
Перем ПредыдущаяУслуга;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Получаем настройки из хранилища.
	Если Параметры.Свойство("АдресНастроекВХранилище") И Параметры.АдресНастроекВХранилище <> Неопределено Тогда
		
		СтруктураНастроек = ПолучитьИзВременногоХранилища(Параметры.АдресНастроекВХранилище);
		Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
			
			врПеременная = Неопределено;
			
			// Файл выгрузки.
			Если СтруктураНастроек.Свойство("ИмяФайлаЗагрузки", врПеременная) Тогда
				Объект.ИмяФайлаЗагрузки = врПеременная;
			КонецЕсли;
			
			// Кодировка файла DBF.
			Если СтруктураНастроек.Свойство("КодировкаDBF", врПеременная) Тогда
				Объект.КодировкаDBF = врПеременная;
			КонецЕсли;
			
			// Таблица услуг в ОСЗН.
			врТаблицаУслуг = Неопределено;
			Если СтруктураНастроек.Свойство("КурскаяОбласть_УслугиВОСЗН", врТаблицаУслуг) Тогда
				Если ТипЗнч(врТаблицаУслуг) = Тип("ТаблицаЗначений") Тогда
					Объект.КурскаяОбласть_УслугиВОСЗН.Загрузить(врТаблицаУслуг);
				КонецЕсли;
			КонецЕсли;
			
			// Таблица услуг в базе.
			Если СтруктураНастроек.Свойство("КурскаяОбласть_УслугиВБазе", врТаблицаУслуг) Тогда
				Если ТипЗнч(врТаблицаУслуг) = Тип("ТаблицаЗначений") Тогда
					Объект.КурскаяОбласть_УслугиВБазе.Загрузить(врТаблицаУслуг);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

// Процедура - обработчик события "ПриАктивизацииСтроки" таблицы "ТаблицаНастроек".
//
&НаКлиенте
Процедура ТаблицаНастроекПриАктивизацииСтроки(Элемент)
	
	ТП_ЖКУ_ВБазе.Очистить();
	
	// При активации строки УслугаВОСЗН, загружаем соответствия в УслугаВБазе.
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Идентификатор", Элемент.ТекущиеДанные.НомерСтроки);
		
		НайденныеСтроки = Объект.КурскаяОбласть_УслугиВБазе.НайтиСтроки(Отбор);
		
		Для Каждого ТекСтрока из НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(ТП_ЖКУ_ВБазе.Добавить(), ТекСтрока);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ТаблицаНастроекПриАктивизацииСтроки()

// Процедура - обработчик события "ПередНачаломДобавления" таблицы "ТаблицаНастроек".
//
&НаКлиенте
Процедура ТаблицаНастроекПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Устанавливаем запрет на добавление строк копированием.
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ТаблицаНастроекПередНачаломДобавления()

// Процедура - обработчик события "ПередУдалением" таблицы "ТаблицаНастроек".
//
&НаКлиенте
Процедура ТаблицаНастроекПередУдалением(Элемент, Отказ)
	
	// Удаление текущей строки соответствия из правой колонки.
	СтрокиУдаления = Объект.КурскаяОбласть_УслугиВБазе.НайтиСтроки(Новый Структура("Идентификатор",  Элемент.ТекущиеДанные.НомерСтроки));
	Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
		Объект.КурскаяОбласть_УслугиВБазе.Удалить(СтрокаУдаления);
	КонецЦикла;
	
КонецПроцедуры // ТаблицаНастроекПередУдалением()

// Процедура - обработчик события "ПередОкончаниемРедактирования" таблицы "ТаблицаНастроек".
//
&НаКлиенте
Процедура ТаблицаНастроекПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	КодОшибки = 0;
	
	// Проверяем на наличие и уникальность код услуги.
	ТекущийКодУслугиВОСЗН = Элемент.ТекущиеДанные.КодУслугиВОСЗН;
	Если ЗначениеЗаполнено(ТекущийКодУслугиВОСЗН) Тогда
		ОтборКод = Новый Структура;
		ОтборКод.Вставить("КодУслугиВОСЗН", ТекущийКодУслугиВОСЗН);
		
		СтрокиСовпаденияКод = Объект.КурскаяОбласть_УслугиВОСЗН.НайтиСтроки(ОтборКод);
		Если СтрокиСовпаденияКод.Количество() > 1 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Код услуги в ОСЗН не уникален!");
			КодОшибки = КодОшибки + 1;
		КонецЕсли;
		
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Код услуги в ОСЗН не заполнен!");
		КодОшибки = КодОшибки + 1;
	КонецЕсли;
	
	// Проверяем на наличие и уникальность услуги.
	ТекущаяУслугаВОСЗН = Элемент.ТекущиеДанные.УслугаВОСЗН;
	Если ЗначениеЗаполнено(ТекущаяУслугаВОСЗН) Тогда
		ОтборУслуга = Новый Структура;
		ОтборУслуга.Вставить("УслугаВОСЗН", ТекущаяУслугаВОСЗН);
		
		СтрокиСовпаденияУслуга = Объект.РеспубликаХакасия_ТаблицаНастроек.НайтиСтроки(ОтборУслуга);
		Если СтрокиСовпаденияУслуга.Количество() > 1 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Услуга в ОСЗН не уникальна!");
			КодОшибки = КодОшибки + 1;
		КонецЕсли;
		
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Услуга в ОСЗН не заполнена!");
		КодОшибки = КодОшибки + 1;
	КонецЕсли;
	
	// При наличии незаполненных полей или дубликатов опрашиваем пользователя.
	Если КодОшибки > 0 Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Добавление незаполненных полей и дублирующих значений недопустимо!");
		Объект.КурскаяОбласть_УслугиВОСЗН.Удалить(Элементы.ТаблицаНастроек.ТекущиеДанные.НомерСтроки - 1);
		
	КонецЕсли;
	
	// Разблокируем кнопку добавления табличного поля "ТП_ЖКУ_ВБазе".
	Если Не Объект.КурскаяОбласть_УслугиВОСЗН.Количество() = 0 Тогда
		Элементы.ТП_ЖКУ_ВБазеДобавить.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры // ТаблицаНастроекПередОкончаниемРедактирования()

// Процедура - обработчик события "ПослеУдаления" таблицы "ТаблицаНастроек".
//
&НаКлиенте
Процедура ТаблицаНастроекПослеУдаления(Элемент)
	
	// После удаления строки из УслугиВОСЗН переписываем идентификаторы в УслугиВБазе. 
	Для Каждого СтрокаОСЗН Из Объект.КурскаяОбласть_УслугиВОСЗН Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("КодУслугиВОСЗН", СтрокаОСЗН.КодУслугиВОСЗН);
		Отбор.Вставить("УслугаВОСЗН",    СтрокаОСЗН.УслугаВОСЗН);
		
		СтрокиИзменения = Объект.КурскаяОбласть_УслугиВБазе.НайтиСтроки(Отбор);
		Для Каждого Строка ИЗ СтрокиИзменения Цикл
			Строка.Идентификатор = СтрокаОСЗН.НомерСтроки;
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаНастроекПриАктивизацииСтроки(Элемент);
	
	// Если в левой колонке пользователем удалены все колонки, то блокируем возможность добавления соответствий.
	Если Объект.КурскаяОбласть_УслугиВОСЗН.Количество() = 0 Тогда
		Элементы.ТП_ЖКУ_ВБазеДобавить.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ТаблицаНастроекПослеУдаления()

// Процедура - обработчик события "ПередНачаломДобавления" таблицы "ТП_ЖКУ_ВБазе".
//
&НаКлиенте
Процедура ТП_ЖКУ_ВБазеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Если не выбрана строка в левой колоке или добавление строк копированием.
	Если Элементы.ТаблицаНастроек.ТекущиеДанные = Неопределено Или Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ТП_ЖКУ_ВБазеПередНачаломДобавления()

// Процедура - обработчик события "ПередУдалением" таблицы "ТП_ЖКУ_ВБазе".
//
&НаКлиенте
Процедура ТП_ЖКУ_ВБазеПередУдалением(Элемент, Отказ)
	
	// При удалении строки удаляем соответствующие записи в РеспубликаХакасия_УслугиВБазе.
	Отбор = Новый Структура;
	Отбор.Вставить("Идентификатор",  Элементы.ТаблицаНастроек.ТекущиеДанные.НомерСтроки);
	Отбор.Вставить("УслугаВБазе",    Элемент.ТекущиеДанные.УслугаВБазе);
	
	СтрокиУдаления = Объект.КурскаяОбласть_УслугиВБазе.НайтиСтроки(Отбор);
	
	Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
		Объект.КурскаяОбласть_УслугиВБазе.Удалить(СтрокаУдаления);
	КонецЦикла;
	
КонецПроцедуры // ТП_ЖКУ_ВБазеПередУдалением()

// Процедура - обработчик события "ПриНачалеРедактирования" таблицы "ТП_ЖКУ_ВБазе".
//
&НаКлиенте
Процедура ТП_ЖКУ_ВБазеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// Запоминаем предыдущее значение перезаписываемой строки.
	Если Не НоваяСтрока Тогда
		ПредыдущаяУслуга = Элемент.ТекущиеДанные.УслугаВБазе;
	КонецЕсли;
	
КонецПроцедуры // ТП_ЖКУ_ВБазеПриНачалеРедактирования()

// Процедура - обработчик события "ПередОкончаниемРедактирования" таблицы "ТП_ЖКУ_ВБазе".
//
&НаКлиенте
Процедура ТП_ЖКУ_ВБазеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	// Если изменяем выбранное значение, то удаляем предыдущую запись.
	Если Не НоваяСтрока И ЗначениеЗаполнено(ПредыдущаяУслуга) Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Идентификатор", Элементы.ТаблицаНастроек.ТекущиеДанные.НомерСтроки);
		Отбор.Вставить("УслугаВБазе",   ПредыдущаяУслуга);
		
		НайденнаяСтрока = Объект.КурскаяОбласть_УслугиВБазе.НайтиСтроки(Отбор);
		
		Объект.КурскаяОбласть_УслугиВБазе.Удалить(НайденнаяСтрока[0]);
		
	КонецЕсли;
	
КонецПроцедуры // ТП_ЖКУ_ВБазеПередОкончаниемРедактирования()

// Процедура - обработчик события "ПриОкончанииРедактирования" таблицы "ТП_ЖКУ_ВБазе".
//
&НаКлиенте
Процедура ТП_ЖКУ_ВБазеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не Элемент.ТекущиеДанные = Неопределено И Не ОтменаРедактирования Тогда
		
		Если Элемент.ТекущиеДанные.УслугаВБазе.Пустая() Тогда
			// Удаляем пустую строку.
			ТП_ЖКУ_ВБазе.Удалить(ТП_ЖКУ_ВБазе.Индекс(Элемент.ТекущиеДанные)); 
		Иначе
			// Добавляем запись в КурскаяОбласть_УслугиВБазе.
			
			НоваяСтрокаСоответствия                = Объект.КурскаяОбласть_УслугиВБазе.Добавить();
			НоваяСтрокаСоответствия.УслугаВБазе    = Элемент.ТекущиеДанные.УслугаВБазе;
			НоваяСтрокаСоответствия.Идентификатор  = Элементы.ТаблицаНастроек.ТекущиеДанные.НомерСтроки;
			НоваяСтрокаСоответствия.КодУслугиВОСЗН = Элементы.ТаблицаНастроек.ТекущиеДанные.КодУслугиВОСЗН;
			НоваяСтрокаСоответствия.УслугаВОСЗН    = Элементы.ТаблицаНастроек.ТекущиеДанные.УслугаВОСЗН;
			
			// Удаляем старую запись при перевыборе.
			Если Не ПредыдущаяУслуга = Элемент.ТекущиеДанные.УслугаВБазе Тогда
				
				Отбор = Новый Структура;
				Отбор.Вставить("Идентификатор", Элементы.ТаблицаНастроек.ТекущиеДанные.НомерСтроки);
				Отбор.Вставить("УслугаВБазе",   ПредыдущаяУслуга);
				
				НайденнаяСтрока = Объект.КурскаяОбласть_УслугиВБазе.НайтиСтроки(Отбор);
				Если НайденнаяСтрока.Количество() = 1 Тогда
					НайденнаяСтрока[0].УслугаВБазе = Элемент.ТекущиеДанные.УслугаВБазе;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля "Услуга" таблицы "ТП_ЖКУ_ВБазе".
//
&НаКлиенте
Процедура ТП_ЖКУ_ВБазеУслугаВБазеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Устанавливаем отбор на справочник "Услуги".
	СтандартнаяОбработка = Ложь;
	
	// Список уже выбранных услуг по данной услуге в ОСЗН.
	СписокВыбранныхУслуг = Новый СписокЗначений;
	СтрокиВыбранныхУслуг = Объект.КурскаяОбласть_УслугиВБазе.НайтиСтроки(Новый Структура("УслугаВОСЗН", Элементы.ТаблицаНастроек.ТекущиеДанные.УслугаВОСЗН));
	Для Каждого СтрокаВыбраннойУслуги Из СтрокиВыбранныхУслуг Цикл
		СписокВыбранныхУслуг.Добавить(СтрокаВыбраннойУслуги.УслугаВБазе);
	КонецЦикла;
	
	Форма = ПолучитьФорму("Справочник.КВП_Услуги.ФормаВыбора", Новый Структура("ТекущаяСтрока", Элементы.ТП_ЖКУ_ВБазе.ТекущиеДанные.УслугаВБазе), Элемент);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Форма.Список.КомпоновщикНастроек.Настройки.Отбор, "Ссылка", СписокВыбранныхУслуг,
															ВидСравненияКомпоновкиДанных.НеВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
	Форма.Открыть();
	
КонецПроцедуры // ТП_ЖКУ_ВБазеУслугаВБазеНачалоВыбора()

// Процедура - обработчик события "Нажатие" кнопки "ЗагрузитьИзФайла".
//
&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	Если ПустаяСтрока(Объект.ИмяФайлаЗагрузки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не выбран файл загрузки на основной форме выгрузки!");
		Возврат;
	КонецЕсли;
	
	Если Объект.КурскаяОбласть_УслугиВОСЗН.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаЗагрузитьЗавершение", ЭтотОбъект);
		
		ТекстВопроса = "Перед загрузкой таблица услуг в ОСЗН будет очищена. Продолжить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		КомандаЗагрузитьЗаполнить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата опроса команды "КомандаЗагрузить".
Процедура КомандаЗагрузитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Объект.КурскаяОбласть_УслугиВБазе.Очистить();
		Объект.КурскаяОбласть_УслугиВОСЗН.Очистить();
		
		КомандаЗагрузитьЗаполнить();
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьКвартиросъемщикиЗавершение()

&НаКлиенте
// Загрузка таблицы услуг в ОСЗН из dbf-файла.
//
// Параметры:
//  ФайлДБФ - XBase - загружаемый dbf-файл.
//
Процедура КомандаЗагрузитьЗаполнить()
	
	Если ЭтоСетевойРесурс(Объект.ИмяФайлаЗагрузки) Тогда
		ЗаполнитьДанныеОбУслугахИзФайлаНаСервере();
	Иначе
		ЗаполнитьДанныеОбУслугахИзФайла();
	КонецЕсли;
	
КонецПроцедуры // КомандаЗагрузитьЗаполнить()

&НаКлиенте
Процедура СохранитьДанные(Команда)
	
	АдресНастроекВХранилище = ПоместитьНастройкиВХранилище();
	Закрыть(АдресНастроекВХранилище);
	
КонецПроцедуры // СохранитьДанные()

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

&НаКлиенте
// Производится чтение DBF-файла с целью формирования таблицы "ДанныеОбУслугахИзФайла", в которой содержатся
// вид услуги и услуга в ОСЗН, и списка значений "ДоступныеЗначенияВидовУслугВОСЗН", содержащего доступные значения 
// видов услуг в ОСЗН для установления их соответствия с полями реестров.
//
// Параметры:
//  Режим     - Строка - наименование режима работы текущего файла: "Загрузки" или "Выгрузки".
//
Процедура ЗаполнитьДанныеОбУслугахИзФайла()
	
	// Для чтения *.dbf файла в кодировке DOS (OEM), урежем имя временного файла.
	КороткоеИмяВременногоФайла = ПолучитьИмяВременногоDBFФайла();
	
	// Копируем исходный dbf-файл во временный с коротким именем.
	КопироватьФайл(Объект["ИмяФайлаЗагрузки"], КороткоеИмяВременногоФайла);
	
	// Проверяем файл загрузки на существование.
	DBFФайл = Новый XBase;
	
	#Если НЕ ВебКлиент Тогда
	Если Объект.КодировкаDBF Тогда
		DBFФайл.Кодировка = КодировкаXBase.OEM;
	Иначе
		DBFФайл.Кодировка = КодировкаXBase.ANSI;
	КонецЕсли;
	#КонецЕсли
	
	DBFФайл.ОткрытьФайл(КороткоеИмяВременногоФайла, , Истина);
	
	// Производим его чтение.
	Если DBFФайл.Открыта() Тогда
		
		КоличествоУслуг = (DBFФайл.Поля.Количество() - 19) / 19;
		
		Если ЗагружаемыйФайлКорректный(DBFФайл, КоличествоУслуг) Тогда
			
			Пока Не DBFФайл.ВКонце() Цикл
				// Заполняем коды и услуги, согласно dbf-файлу.
				// Записи берутся по первой строке, т.к. в формате поля данных колонок дублируются.
				Для Сч = 1 По КоличествоУслуг Цикл
					НоваяЗапись                = Объект.КурскаяОбласть_УслугиВОСЗН.Добавить();
					НоваяЗапись.КодУслугиВОСЗН = DBFФайл["KGKYSL_" + Сч];
					НоваяЗапись.УслугаВОСЗН    = СокрЛП(DBFФайл["GKYSL_" + Сч]);
				КонецЦикла;
				
				// Считываем данные об услугах только из первой строки.
				// !!!Нужно проверить в файле могут ли быть услуги заданы в произвольном порядке,
				// !!!Или некоторые ячейки останутся пустыми.
				Прервать;
				
			КонецЦикла;
			
		Иначе
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Структура файла загрузки не соответствует описанию формата выгрузки! Данные не загружены!");
		КонецЕсли;
		
		DBFФайл.ЗакрытьФайл();
		
	КонецЕсли;
	
	// Блокировка командной панели "КП_УслугиВБазе".
	Если Объект.КурскаяОбласть_УслугиВОСЗН.Количество() = 0 Тогда
		Элементы.ТП_ЖКУ_ВБазе.Доступность = Ложь;
	Иначе
		Элементы.ТП_ЖКУ_ВБазе.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДанныеОбУслугахИзФайла()

&НаСервере
// Производится чтение DBF-файла с целью формирования таблицы "ДанныеОбУслугахИзФайла", в которой содержатся
// вид услуги и услуга в ОСЗН, и списка значений "ДоступныеЗначенияВидовУслугВОСЗН", содержащего доступные значения 
// видов услуг в ОСЗН для установления их соответствия с полями реестров.
//
// Параметры:
//  АдресФайлаВХранилище - Строка - адрес текущего файла во временном хранилище.
//  Режим     - Строка - наименование режима работы текущего файла: "Загрузки" или "Выгрузки".
//
Процедура ЗагрузитьИзФайлаНаСервере(АдресФайлаВХранилище)
	
	// Получаем dbf из временного хранилища.
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВХранилище);
	
	// Для чтения *.dbf файла в кодировке DOS (OEM), урежем имя временного файла.
	КороткоеИмяВременногоФайла = ПолучитьИмяВременногоDBFФайла();
	
	// Записываем dbf в файл с указанным именем.
	ДвоичныеДанные.Записать(КороткоеИмяВременногоФайла);
	
	// Проверяем файл загрузки на существование.
	DBFФайл = Новый XBase;
	
	Если Объект.КодировкаDBF Тогда
		DBFФайл.Кодировка = КодировкаXBase.OEM;
	Иначе
		DBFФайл.Кодировка = КодировкаXBase.ANSI;
	КонецЕсли;
	
	DBFФайл.ОткрытьФайл(КороткоеИмяВременногоФайла, , Истина);
	
	// Производим его чтение.
	Если DBFФайл.Открыта() Тогда
		
		КоличествоУслуг = (DBFФайл.Поля.Количество() - 19) / 19;
		
		Если ЗагружаемыйФайлКорректный(DBFФайл, КоличествоУслуг) Тогда
			
			Пока Не DBFФайл.ВКонце() Цикл
				
				// Заполняем коды и услуги, согласно dbf-файлу. 
				// Записи берутся по первой строке, т.к. в формате поля данных колонок дублируются.
				Для Сч = 1 По КоличествоУслуг Цикл
					НоваяЗапись                = Объект.КурскаяОбласть_УслугиВОСЗН.Добавить();
					НоваяЗапись.КодУслугиВОСЗН = DBFФайл["KGKYSL_" + Сч];
					НоваяЗапись.УслугаВОСЗН    = СокрЛП(DBFФайл["GKYSL_" + Сч]);
				КонецЦикла;
				
				// Считываем данные об услугах только из первой строки.
				// !!!Нужно проверить в файле могут ли быть услуги заданы в произвольном порядке,
				// !!!Или некоторые ячейки останутся пустыми.
				
				Прервать;
				
			КонецЦикла;
			
		Иначе
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Структура файла загрузки не соответствует описанию формата выгрузки! Данные не загружены!");
		КонецЕсли;
		
		DBFФайл.ЗакрытьФайл();
		
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьИзФайлаНаСервере()

&НаКлиентеНаСервереБезКонтекста
// Проверяет наличие необходимых полей в файле загрузки dbf.
//
Функция ЗагружаемыйФайлКорректный(DBFФайл, КоличествоУслуг)
	
	РезультатПроверки = Истина;
	
	Для Сч = 1 По КоличествоУслуг Цикл
		Если DBFФайл.Поля.Найти("KGKYSL_" + Сч) = Неопределено
		 ИЛИ DBFФайл.Поля.Найти("GKYSL_" + Сч) = Неопределено Тогда
			РезультатПроверки = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаКлиенте
// Если файл находися на сетевом ресурсе, то чтение файла выполняем на сервере с помещением во временное хранилище.
//
Процедура ЗаполнитьДанныеОбУслугахИзФайлаНаСервере() 
	
	// Помещаем загружаемый файл во временное хранилище.
	Оповещение = Новый ОписаниеОповещения("ОбработатьВыборФайла", ЭтотОбъект);
	НачатьПомещениеФайла(Оповещение, , Объект["ИмяФайлаЗагрузки"], Ложь, УникальныйИдентификатор);
	
КонецПроцедуры // ЗагрузитьИзФайлаПродолжение()

&НаКлиенте
// Обработчик результата помещения файла во временное хранилище.
//
Процедура ОбработатьВыборФайла(Результат, АдресФайлаВХранилище, ВыбранноеИмяФайла) Экспорт
	
	Если Результат Тогда
		// Загружаем данные из dbf на сервере.
		ЗагрузитьИзФайлаНаСервере(АдресФайлаВХранилище);
	КонецЕсли;
	
	// Блокировка командной панели "КП_УслугиВБазе".
	Если Объект.КурскаяОбласть_УслугиВОСЗН.Количество() = 0 Тогда
		Элементы.ТП_ЖКУ_ВБазе.Доступность = Ложь;
	Иначе
		Элементы.ТП_ЖКУ_ВБазе.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВыборФайла()

&НаКлиентеНаСервереБезКонтекста
// Возвращает полное имя временного dbf-файла с указанным именем без расширения.
//
// Параметры:
//  ИмяФайла - Строка - имя файла без расширения.
//
// Возвращаемые параметры:
//  НовоеИмяВременногоФайла - Строка - полное имя временного dbf-файла с указанным именем без расширения.
//
Функция ПолучитьИмяВременногоDBFФайла()
	
	ИмяВременногоФайла = "";
	#Если НЕ ВебКлиент Тогда
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("dbf");
	#КонецЕсли
	
	Файл = Новый Файл(ИмяВременногоФайла);
	НовоеИмяВременногоФайла = СтрЗаменить(Файл.ПолноеИмя, Файл.ИмяБезРасширения, "Загрузки");
	
	Возврат НовоеИмяВременногоФайла;
	
КонецФункции // ПолучитьИмяВременногоDBFФайла()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Определяет, является ли расположение указанного файла сетевым ресурсом по началу пути (по слэшам).
//
// Параметры:
//  Адрес - Строка - полное наименование файла.
//
// Возвращаемое значение:
//  Булево - признак того, что указанный адрес является сетевым ресурсом.
//
&НаКлиенте
Функция ЭтоСетевойРесурс(Адрес)
	
	КорневойСимвол = Лев(Адрес, 2);
	Если КорневойСимвол = "\\" Или КорневойСимвол = "//" Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ЭтоСетевойресурс()

&НаСервере
// Помещает таблицу услуг во временное хранилище.
//
// Возвращаемое значение:
//  Строка - адрес настроек во временном хранилище.
//
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КодировкаDBF",               Объект.КодировкаDBF);
	СтруктураПараметров.Вставить("КурскаяОбласть_УслугиВБазе", Объект.КурскаяОбласть_УслугиВБазе.Выгрузить());
	СтруктураПараметров.Вставить("КурскаяОбласть_УслугиВОСЗН", Объект.КурскаяОбласть_УслугиВОСЗН.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураПараметров, Новый УникальныйИдентификатор);
	
КонецФункции // ПоместитьНастройкиВХранилище()

#КонецОбласти
