
#Область РаботаСНастройками

&НаСервере
// Процедура восстановления настроек.
Процедура ВосстановитьНастройки()
	
	СтруктураПараметров = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("ЧувашскаяРеспублика_ВыгрузкаВОСЗН", "ПараметрыВыгрузки");
	
	Объект.КодировкаТекстовогоФайла = Истина;
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		Если СтруктураПараметров.Свойство("ИмяФайлаЗагрузки") Тогда
			ИмяФайлаЗагрузки = СтруктураПараметров.ИмяФайлаЗагрузки;
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ИмяКаталогаЗагрузки") Тогда
			ИмяКаталогаЗагрузки = СтруктураПараметров.ИмяКаталогаЗагрузки;
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ТарифПодогрева") Тогда
			Объект.ТарифПодогрева = СтруктураПараметров.ТарифПодогрева;
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("УслугаПодогрева") Тогда
			Объект.УслугаПодогрева = СтруктураПараметров.УслугаПодогрева;
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("КодировкаТекстовогоФайла") Тогда
			Объект.КодировкаТекстовогоФайла = СтруктураПараметров.КодировкаТекстовогоФайла;
		КонецЕсли;
		
		врТаблицаЗначений = Новый ТаблицаЗначений;
		
		СтруктураПараметров.Свойство("ЧувашскаяРеспублика_УслугиВОСЗН", врТаблицаЗначений);
		Если НЕ врТаблицаЗначений = Неопределено Тогда
			Объект.ЧувашскаяРеспублика_УслугиВОСЗН.Загрузить(врТаблицаЗначений);
		КонецЕсли;
		
		СтруктураПараметров.Свойство("ЧувашскаяРеспублика_УслугиВБазе", врТаблицаЗначений);
		Если НЕ врТаблицаЗначений = Неопределено Тогда
			Объект.ЧувашскаяРеспублика_УслугиВБазе.Загрузить(врТаблицаЗначений);
		КонецЕсли;
		
		СтруктураПараметров.Свойство("ЧувашскаяРеспублика_СтепениРодства", врТаблицаЗначений);
		Если НЕ врТаблицаЗначений = Неопределено Тогда
			Объект.ЧувашскаяРеспублика_СтепениРодства.Загрузить(врТаблицаЗначений);
		КонецЕсли;
		
		СтруктураПараметров.Свойство("ЧувашскаяРеспублика_НормыЗданий", врТаблицаЗначений);
		Если НЕ врТаблицаЗначений = Неопределено Тогда
			Объект.ЧувашскаяРеспублика_НормыЗданий.Загрузить(врТаблицаЗначений);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура сохранения настроек.
Процедура СохранитьНастройки()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяФайлаЗагрузки",                   ИмяФайлаЗагрузки);
	СтруктураПараметров.Вставить("ИмяКаталогаЗагрузки",                ИмяКаталогаЗагрузки);
	СтруктураПараметров.Вставить("ТарифПодогрева",                     Объект.ТарифПодогрева);
	СтруктураПараметров.Вставить("УслугаПодогрева",                    Объект.УслугаПодогрева);
	СтруктураПараметров.Вставить("КодировкаТекстовогоФайла",           Объект.КодировкаТекстовогоФайла);
	СтруктураПараметров.Вставить("ЧувашскаяРеспублика_УслугиВБазе",    Объект.ЧувашскаяРеспублика_УслугиВБазе.Выгрузить());
	СтруктураПараметров.Вставить("ЧувашскаяРеспублика_УслугиВОСЗН",    Объект.ЧувашскаяРеспублика_УслугиВОСЗН.Выгрузить());
	СтруктураПараметров.Вставить("ЧувашскаяРеспублика_СтепениРодства", Объект.ЧувашскаяРеспублика_СтепениРодства.Выгрузить());
	СтруктураПараметров.Вставить("ЧувашскаяРеспублика_НормыЗданий",    Объект.ЧувашскаяРеспублика_НормыЗданий.Выгрузить());
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("ЧувашскаяРеспублика_ВыгрузкаВОСЗН", "ПараметрыВыгрузки", СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// РАБОТА С ВРЕМЕННЫМ ХРАНИЛИЩЕМ

#Область РаботаСВременнымХранилищем

&НаСервере
// Помещает настройки во временное хранилище.
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ИмяФайлаЗагрузки",                   ИмяФайлаЗагрузки);
	СтруктураНастроек.Вставить("ТарифПодогрева",                     Объект.ТарифПодогрева);
	СтруктураНастроек.Вставить("УслугаПодогрева",                    Объект.УслугаПодогрева);
	СтруктураНастроек.Вставить("КодировкаТекстовогоФайла",           Объект.КодировкаТекстовогоФайла);
	СтруктураНастроек.Вставить("ЧувашскаяРеспублика_УслугиВБазе",    Объект.ЧувашскаяРеспублика_УслугиВБазе.Выгрузить());
	СтруктураНастроек.Вставить("ЧувашскаяРеспублика_УслугиВОСЗН",    Объект.ЧувашскаяРеспублика_УслугиВОСЗН.Выгрузить());
	СтруктураНастроек.Вставить("ЧувашскаяРеспублика_СтепениРодства", Объект.ЧувашскаяРеспублика_СтепениРодства.Выгрузить());
	СтруктураНастроек.Вставить("ЧувашскаяРеспублика_НормыЗданий",    Объект.ЧувашскаяРеспублика_НормыЗданий.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
// Получает настройки из временного хранилища.
Функция ПолучитьНастройкиИзХранилища(АдресНастроекВХранилище)
	
	СтруктураНастроек = ПолучитьИзВременногоХранилища(АдресНастроекВХранилище);
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		
		Если СтруктураНастроек.Свойство("ТарифПодогрева") Тогда
			Объект.ТарифПодогрева = СтруктураНастроек.ТарифПодогрева;
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("УслугаПодогрева") Тогда
			Объект.УслугаПодогрева = СтруктураНастроек.УслугаПодогрева;
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ЧувашскаяРеспублика_УслугиВБазе") Тогда
			Объект.ЧувашскаяРеспублика_УслугиВБазе.Загрузить(СтруктураНастроек.ЧувашскаяРеспублика_УслугиВБазе);
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ЧувашскаяРеспублика_УслугиВОСЗН") Тогда
			Объект.ЧувашскаяРеспублика_УслугиВОСЗН.Загрузить(СтруктураНастроек.ЧувашскаяРеспублика_УслугиВОСЗН);
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ЧувашскаяРеспублика_СтепениРодства") Тогда
			Объект.ЧувашскаяРеспублика_СтепениРодства.Загрузить(СтруктураНастроек.ЧувашскаяРеспублика_СтепениРодства);
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ЧувашскаяРеспублика_НормыЗданий") Тогда
			Объект.ЧувашскаяРеспублика_НормыЗданий.Загрузить(СтруктураНастроек.ЧувашскаяРеспублика_НормыЗданий);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ДАННЫХ

#Область ЗаполнениеДанных

&НаКлиенте
// Проверяет наличие всех необходимых данных для заполнения таблиц выгрузки.
//
Функция ПроверкаУсловийДляЗаполненияТаблиц()
	
	ТекстОшибки = "";
	
	Если НЕ ЗначениеЗаполнено(Объект.Период) Тогда
		ТекстОшибки = ТекстОшибки + "Не указан период выгрузки!";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не указана организация!", "Не указан организация!");
	КонецЕсли;
	
	Если РасширениеПодключено И ПустаяСтрока(ИмяФайлаЗагрузки) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не указан файл загрузки!", "Не указан файл загрузки!");
	КонецЕсли;
	
	Если Объект.ЧувашскаяРеспублика_УслугиВБазе.Количество() = 0 Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "На форме настроек не заполнена таблица соответствия услуг!", "На форме настроек не заполнена таблица соответствия услуг!");
	КонецЕсли;
	
	Если Объект.ЧувашскаяРеспублика_СтепениРодства.Количество() = 0 Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "На форме настроек не заполнена таблица соответствия степеней родства!", "На форме настроек не заполнена таблица соответствия степеней родства!");
	КонецЕсли;
	
	Если Объект.ЧувашскаяРеспублика_НормыЗданий.Количество() = 0 Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "На форме настроек не заполнена таблица соответствия норм потребления зданий!", "На форме настроек не заполнена таблица соответствия норм потребления зданий!");
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции // ПроверкаУсловийДляЗаполненияТаблиц

&НаСервере
// Процедура заполнения всех данных.
//
Процедура ЗаполнитьТаблицыНаСервере(МассивОписанийФайлов)
	
	Каталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВременныхФайлов());
	
	Для Каждого ОписаниеФайла Из МассивОписанийФайлов Цикл
		
		ПолучитьИзВременногоХранилища(ОписаниеФайла.Хранение).Записать(Каталог + "ALTAI.DBF");
		
		АдресФайла = Каталог + "ALTAI.DBF";
		
		УдалитьИзВременногоХранилища(ОписаниеФайла.Хранение);
		
	КонецЦикла;
	
	Объект.ЧувашскаяРеспублика_ОсновнаяЗапись.Очистить();
	Объект.ЧувашскаяРеспублика_ДанныеЛьготников.Очистить();
	Объект.ЧувашскаяРеспублика_СведенияОГражданахИХарактеристикахЖилья.Очистить();
	Объект.ЧувашскаяРеспублика_СведенияОСоставеСемьи.Очистить();
	Объект.ЧувашскаяРеспублика_СведенияОбУслугахЖКХ.Очистить();
	
	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать(АдресФайла, ?(Объект.КодировкаТекстовогоФайла, КодировкаТекста.ANSI, КодировкаТекста.OEM));
	
	РазделительКолонок = ";";
	
	НаименованиеОрганизации = Объект.Организация.Наименование;
	
	Для НомерСтроки = 1 По Текст.КоличествоСтрок() Цикл
		
		СтрокаФайла = Текст.ПолучитьСтроку(НомерСтроки);
		
		Если СтрДлина(СтрокаФайла) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ПозицияРазделителя = Найти(СтрокаФайла, РазделительКолонок);
		Если ПозицияРазделителя = 0 Тогда
			ПозицияРазделителя = СтрДлина(СтрокаФайла) + 1;
		КонецЕсли;
		
		// Прочитаем значение 1 поля из файла загрузки.
		ЗначениеПоляФайла = Сред(СтрокаФайла, 1, ПозицияРазделителя - 1);
		
		СтрокаФайла = Прав(СтрокаФайла, СтрДлина(СтрокаФайла) - ПозицияРазделителя);
		
		Если Лев(ЗначениеПоляФайла, 1) = "А" Тогда
			НоваяСтрокаОсновнойЗаписи = Объект.ЧувашскаяРеспублика_ОсновнаяЗапись.Добавить();
			
			НоваяСтрокаОсновнойЗаписи.ИдентификаторЗаписи  = ЗначениеПоляФайла;
			НоваяСтрокаОсновнойЗаписи.НачалоПериодаЗапроса = Формат(НачалоМесяца(Объект.Период), "ДФ=yyyyMMdd");
			НоваяСтрокаОсновнойЗаписи.КонецПериодаЗапроса  = Формат(КонецМесяца(Объект.Период), "ДФ=yyyyMMdd");
			НоваяСтрокаОсновнойЗаписи.НазваниеКомпании     = СокрЛП(НаименованиеОрганизации);
			НоваяСтрокаОсновнойЗаписи.ТипФайла             = 1;
			
			ПозицияРазделителя = Найти(СтрокаФайла, РазделительКолонок);
			Если ПозицияРазделителя = 0 Тогда
				ПозицияРазделителя = СтрДлина(СтрокаФайла) + 1;
			КонецЕсли;
			
			ЗначениеПоляФайла = Сред(СтрокаФайла, 1, ПозицияРазделителя - 1);
			
			НоваяСтрокаОсновнойЗаписи.ИдентификаторКомпании = ЗначениеПоляФайла;
			
		ИначеЕсли Лев(ЗначениеПоляФайла, 1) = "О" Тогда
			НоваяСтрокаЛьготника = Объект.ЧувашскаяРеспублика_ДанныеЛьготников.Добавить();
			
			НоваяСтрокаЛьготника.ИдентификаторЗаписи = СокрЛП(ЗначениеПоляФайла);
			НоваяСтрокаЛьготника.НазваниеКомпании    = СокрЛП(НаименованиеОрганизации);
			
			Сч = 1;
			Пока Сч <= 24 Цикл
				Если СтрДлина(СтрокаФайла) = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ПозицияРазделителя = Найти(СтрокаФайла, РазделительКолонок);
				Если ПозицияРазделителя = 0 Тогда
					ПозицияРазделителя = СтрДлина(СтрокаФайла) + 1;
				КонецЕсли;
				ЗначениеПоляФайла = Сред(СтрокаФайла, 1, ПозицияРазделителя - 1);
				
				СтрокаФайла = Прав(СтрокаФайла, СтрДлина(СтрокаФайла) - ПозицияРазделителя);
				
				Если Сч = 1 Тогда
					НоваяСтрокаЛьготника.ИД = ЗначениеПоляФайла;
				ИначеЕсли Сч = 2 Тогда
					НоваяСтрокаЛьготника.ИдентификаторЛицевогоСчета = ЗначениеПоляФайла;
				ИначеЕсли Сч = 3 Тогда
					НоваяСтрокаЛьготника.СНИЛС = ЗначениеПоляФайла;
				ИначеЕсли Сч = 4 Тогда
					НоваяСтрокаЛьготника.Фамилия = ЗначениеПоляФайла;
				ИначеЕсли Сч = 5 Тогда
					НоваяСтрокаЛьготника.Имя = ЗначениеПоляФайла;
				ИначеЕсли Сч = 6 Тогда
					НоваяСтрокаЛьготника.Отчество = ЗначениеПоляФайла;
				ИначеЕсли Сч = 7 Тогда
					НоваяСтрокаЛьготника.ДатаРождения = ЗначениеПоляФайла;
				ИначеЕсли Сч = 8 Тогда
					НоваяСтрокаЛьготника.Пол = ЗначениеПоляФайла;
				ИначеЕсли Сч = 9 Тогда
					НоваяСтрокаЛьготника.ИдентификаторКомпании = ЗначениеПоляФайла;
				ИначеЕсли Сч = 11 Тогда
					НоваяСтрокаЛьготника.КодПоАдресномуКлассификатору = ЗначениеПоляФайла;
				ИначеЕсли Сч = 12 Тогда
					НоваяСтрокаЛьготника.АдминистративныйРайон = ЗначениеПоляФайла;
				ИначеЕсли Сч = 13 Тогда
					НоваяСтрокаЛьготника.ТипНаселенногоПункта = ЗначениеПоляФайла;
				ИначеЕсли Сч = 14 Тогда
					НоваяСтрокаЛьготника.НаселенныйПункт = ЗначениеПоляФайла;
				ИначеЕсли Сч = 15 Тогда
					НоваяСтрокаЛьготника.ТипУлицы = ЗначениеПоляФайла;
				ИначеЕсли Сч = 16 Тогда
					НоваяСтрокаЛьготника.Улица = ЗначениеПоляФайла;
				ИначеЕсли Сч = 17 Тогда
					НоваяСтрокаЛьготника.Дом = ЗначениеПоляФайла;
				ИначеЕсли Сч = 18 Тогда
					НоваяСтрокаЛьготника.Корпус = ЗначениеПоляФайла;
				ИначеЕсли Сч = 19 Тогда
					Попытка
						НоваяСтрокаЛьготника.КвартираЧислом = Число(СокрЛП(ЗначениеПоляФайла));
					Исключение
					КонецПопытки;
					НоваяСтрокаЛьготника.Квартира = СокрЛП(ЗначениеПоляФайла);
				ИначеЕсли Сч = 20 Тогда
					НоваяСтрокаЛьготника.ПаспортСерия = ЗначениеПоляФайла;
				ИначеЕсли Сч = 21 Тогда
					НоваяСтрокаЛьготника.ПаспортНомер = ЗначениеПоляФайла;
				ИначеЕсли Сч = 22 Тогда
					НоваяСтрокаЛьготника.ПаспортДатаВыдачи = ЗначениеПоляФайла;
				ИначеЕсли Сч = 23 Тогда
					Попытка
						НоваяСтрокаЛьготника.ПризнакСобственникаЖилья = Число(СокрЛП(ЗначениеПоляФайла));
					Исключение
						НоваяСтрокаЛьготника.ПризнакСобственникаЖилья = 0;
					КонецПопытки;
				ИначеЕсли Сч = 24 Тогда
					Попытка
						НоваяСтрокаЛьготника.ПризнакСоставаСемьи = Число(СокрЛП(ЗначениеПоляФайла));
					Исключение
						НоваяСтрокаЛьготника.ПризнакСоставаСемьи = 0;
					КонецПопытки;
				КонецЕсли;
				Сч = Сч + 1;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаАдресов = ПолучитьАдресаВсехЗданий();
	ТаблицаФИО     = ПолучитьФИОФизЛиц();
	
	ТаблицаИдентифицированныхЖильцов = ПолучитьТаблицуИдентифицированныхЖильцов(ТаблицаАдресов, ТаблицаФИО);
	
	ЗаполнитьТаблицуЛьготников(ТаблицаИдентифицированныхЖильцов);
	ЗаполнитьСведенияОГражданахИХарактеристикахЖилья(ТаблицаИдентифицированныхЖильцов);
	ЗаполнитьСведенияОСоставеСемьи(ТаблицаИдентифицированныхЖильцов);
	ЗаполнитьСведенияОбУслугах(ТаблицаИдентифицированныхЖильцов);
	
КонецПроцедуры

&НаСервере
// Заполняет табличную часть льготников.
//
Процедура ЗаполнитьТаблицуЛьготников(ТаблицаИдентифицированныхЖильцов)
	
	Для Каждого СтрокаЖильца ИЗ ТаблицаИдентифицированныхЖильцов Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Фамилия",         СтрокаЖильца.Фамилия);
		СтруктураПоиска.Вставить("Имя",             СтрокаЖильца.Имя);
		СтруктураПоиска.Вставить("Отчество",        СтрокаЖильца.Отчество);
		// Населенный пункт не будем учитывать при идентификации, т.к. не во всех файлах ОСЗН он заполнен.
		//СтруктураПоиска.Вставить("НаселенныйПункт", СтрокаЖильца.НаселенныйПункт);
		СтруктураПоиска.Вставить("Улица",           СтрокаЖильца.Улица);
		СтруктураПоиска.Вставить("Дом",             СтрокаЖильца.Дом);
		СтруктураПоиска.Вставить("Корпус",          СтрокаЖильца.Корпус);
		СтруктураПоиска.Вставить("Квартира",        СтрокаЖильца.Квартира);
		НайденныеСтроки = Объект.ЧувашскаяРеспублика_ДанныеЛьготников.НайтиСтроки(СтруктураПоиска);
		Для Каждого НайденнаяСтрока ИЗ НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(НайденнаяСтрока, СтрокаЖильца);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблицуЛьгот()

&НаСервере
// Заполняет табличную часть сведений о гражданах и характеристиках жилья.
//
Процедура ЗаполнитьСведенияОГражданахИХарактеристикахЖилья(ТаблицаИдентифицированныхЖильцов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаИзФайла.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаИзФайла.Помещение КАК Помещение,
	|	ТаблицаИзФайла.ПризнакСоставаСемьи КАК ПризнакСоставаСемьи
	|ПОМЕСТИТЬ втТаблицаДанныхИзФайла
	|ИЗ
	|	&ТаблицаИзФайла КАК ТаблицаИзФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.ЛицевойСчет,
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втУчетКоличестваЖильцов
	|ИЗ
	|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втТаблицаДанныхИзФайла.ЛицевойСчет
	|				ИЗ
	|					втТаблицаДанныхИзФайла КАК втТаблицаДанныхИзФайла)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец) КАК КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втКолВоПроживающих
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втТаблицаДанныхИзФайла.ЛицевойСчет
	|				ИЗ
	|					втТаблицаДанныхИзФайла КАК втТаблицаДанныхИзФайла)) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаДанныхИзФайла.ЛицевойСчет,
	|	ВЫБОР
	|		КОГДА &УказыватьКоличествоПрожИЗарегЧислами = ИСТИНА
	|			ТОГДА ЕСТЬNULL(втУчетКоличестваЖильцов.КоличествоЗарегистрированных, 0)
	|		ИНАЧЕ ЕСТЬNULL(втКолВоПроживающих.КоличествоЗарегистрированных, 0)
	|	КОНЕЦ КАК КоличествоПроживающих,
	|	втТаблицаДанныхИзФайла.Помещение,
	|	втТаблицаДанныхИзФайла.ПризнакСоставаСемьи
	|ПОМЕСТИТЬ втДанныеСКолВомПроживающих
	|ИЗ
	|	втТаблицаДанныхИзФайла КАК втТаблицаДанныхИзФайла
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУчетКоличестваЖильцов КАК втУчетКоличестваЖильцов
	|		ПО втТаблицаДанныхИзФайла.ЛицевойСчет = втУчетКоличестваЖильцов.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКолВоПроживающих КАК втКолВоПроживающих
	|		ПО втТаблицаДанныхИзФайла.ЛицевойСчет = втКолВоПроживающих.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение,
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности
	|ПОМЕСТИТЬ втВидыСобственности
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственностьНаПомещения.СрезПоследних(
	|			&ДатаКонца,
	|			Помещение В
	|				(ВЫБРАТЬ
	|					втДанныеСКолВомПроживающих.Помещение
	|				ИЗ
	|					втДанныеСКолВомПроживающих КАК втДанныеСКолВомПроживающих)) КАК УПЖКХ_СобственностьНаПомещенияСрезПоследних
	|ГДЕ
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеСКолВомПроживающих.ЛицевойСчет,
	|	втДанныеСКолВомПроживающих.Помещение,
	|	втДанныеСКолВомПроживающих.КоличествоПроживающих,
	|	втДанныеСКолВомПроживающих.ПризнакСоставаСемьи,
	|	ВЫБОР
	|		КОГДА втВидыСобственности.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Муниципальная)
	|			ТОГДА 1
	|		КОГДА втВидыСобственности.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Государственная)
	|			ТОГДА 3
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ТипСобственности
	|ПОМЕСТИТЬ втДанныеССобственностями
	|ИЗ
	|	втДанныеСКолВомПроживающих КАК втДанныеСКолВомПроживающих
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВидыСобственности КАК втВидыСобственности
	|		ПО втДанныеСКолВомПроживающих.Помещение = втВидыСобственности.Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект КАК Помещение,
	|	КВП_ПлощадьПомещенияСрезПоследних.ВидПлощади,
	|	КВП_ПлощадьПомещенияСрезПоследних.Площадь
	|ПОМЕСТИТЬ втПлощадиПомещений
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|			&ДатаКонца,
	|			Объект В
	|					(ВЫБРАТЬ
	|						втДанныеССобственностями.Помещение
	|					ИЗ
	|						втДанныеССобственностями КАК втДанныеССобственностями)
	|				И ВидПлощади В (ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь), ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь))) КАК КВП_ПлощадьПомещенияСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет,
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель,
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель
	|ПОМЕСТИТЬ втРазмерыДолейЛС
	|ИЗ
	|	РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втДанныеССобственностями.ЛицевойСчет
	|				ИЗ
	|					втДанныеССобственностями КАК втДанныеССобственностями)) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеССобственностями.ЛицевойСчет,
	|	втДанныеССобственностями.Помещение,
	|	втДанныеССобственностями.КоличествоПроживающих,
	|	втДанныеССобственностями.ПризнакСоставаСемьи,
	|	втДанныеССобственностями.ТипСобственности,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втПлощадиПомещений.ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(втРазмерыДолейЛС.ДоляЗнаменатель, 0) = 0
	|							ТОГДА 0
	|						ИНАЧЕ ВЫБОР
	|								КОГДА ЕСТЬNULL(втРазмерыДолейЛС.ДоляЧислитель, 0) = 0
	|									ТОГДА 0
	|								ИНАЧЕ втРазмерыДолейЛС.ДоляЧислитель / втРазмерыДолейЛС.ДоляЗнаменатель * ЕСТЬNULL(втПлощадиПомещений.Площадь, 0)
	|							КОНЕЦ
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОбщаяПлощадь,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втПлощадиПомещений.ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь)
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(втРазмерыДолейЛС.ДоляЗнаменатель, 0) = 0
	|							ТОГДА 0
	|						ИНАЧЕ ВЫБОР
	|								КОГДА ЕСТЬNULL(втРазмерыДолейЛС.ДоляЧислитель, 0) = 0
	|									ТОГДА 0
	|								ИНАЧЕ втРазмерыДолейЛС.ДоляЧислитель / втРазмерыДолейЛС.ДоляЗнаменатель * ЕСТЬNULL(втПлощадиПомещений.Площадь, 0)
	|							КОНЕЦ
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЖилаяПлощадь
	|ПОМЕСТИТЬ втДанныеСПлощадями
	|ИЗ
	|	втДанныеССобственностями КАК втДанныеССобственностями
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПлощадиПомещений КАК втПлощадиПомещений
	|		ПО втДанныеССобственностями.Помещение = втПлощадиПомещений.Помещение
	|		ЛЕВОЕ СОЕДИНЕНИЕ втРазмерыДолейЛС КАК втРазмерыДолейЛС
	|		ПО втДанныеССобственностями.ЛицевойСчет = втРазмерыДолейЛС.ЛицевойСчет
	|
	|СГРУППИРОВАТЬ ПО
	|	втДанныеССобственностями.ЛицевойСчет,
	|	втДанныеССобственностями.Помещение,
	|	втДанныеССобственностями.КоличествоПроживающих,
	|	втДанныеССобственностями.ПризнакСоставаСемьи,
	|	втДанныеССобственностями.ТипСобственности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	СУММА(УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот) КАК СуммаПени
	|ПОМЕСТИТЬ втНачисленияПени
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНачала,
	|			&ДатаКонца,
	|			Период,
	|			ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втДанныеСПлощадями.ЛицевойСчет
	|					ИЗ
	|						втДанныеСПлощадями КАК втДанныеСПлощадями)
	|				И Организация = &Организация
	|				И РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|				И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка))) КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	СУММА(-УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот) КАК СуммаОплаты
	|ПОМЕСТИТЬ втОплатыЗаСледМесяц
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНачалаСледМесяца,
	|			&ДатаКонцаСледМесяца,
	|			Период,
	|			ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втДанныеСПлощадями.ЛицевойСчет
	|					ИЗ
	|						втДанныеСПлощадями КАК втДанныеСПлощадями)
	|				И Организация = &Организация
	// В рамках лицевого счета и месяца начисления сумма оборотов по виду начисления "ЗачетДолговИПереплат" равна 0,
	// поэтому в отбор не включаем указанный вид начисления.
	|				И ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)) КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	СУММА(-УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот) КАК СуммаОплаты
	|ПОМЕСТИТЬ втОплатыЗаТекМесяц
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНачала,
	|			&ДатаКонца,
	|			Период,
	|			ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втДанныеСПлощадями.ЛицевойСчет
	|					ИЗ
	|						втДанныеСПлощадями КАК втДанныеСПлощадями)
	|				И Организация = &Организация
	// В рамках лицевого счета и месяца начисления сумма оборотов по виду начисления "ЗачетДолговИПереплат" равна 0,
	// поэтому в отбор не включаем указанный вид начисления.
	|				И ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)) КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток КАК СуммаЗадолженностиЗаЖКУ
	|ПОМЕСТИТЬ втСуммыЗадолженности
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&ДатаНачала,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втДанныеСПлощадями.ЛицевойСчет
	|					ИЗ
	|						втДанныеСПлощадями КАК втДанныеСПлощадями)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|ГДЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет,
	|	МАКСИМУМ(КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период) КАК Период
	|ПОМЕСТИТЬ втПериодыЗадолженности
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(
	|			,
	|			&ДатаОпределенияЗадолженности,
	|			Регистратор,
	|			Движения,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втДанныеСПлощадями.ЛицевойСчет
	|					ИЗ
	|						втДанныеСПлощадями КАК втДанныеСПлощадями)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты
	|ГДЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период < &ДатаОпределенияЗадолженности
	|	И КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияКонечныйОстаток <= 0
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет,
	|	МИНИМУМ(КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период) КАК Период
	|ПОМЕСТИТЬ втПериодыНачалаНачислений
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(
	|			,
	|			&ДатаНачала,
	|			Регистратор,
	|			Движения,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втДанныеСПлощадями.ЛицевойСчет
	|					ИЗ
	|						втДанныеСПлощадями КАК втДанныеСПлощадями)
	|				И НЕ ЛицевойСчет В
	|						(ВЫБРАТЬ
	|							втПериодыЗадолженности.ЛицевойСчет
	|						ИЗ
	|							втПериодыЗадолженности КАК втПериодыЗадолженности)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты
	|ГДЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период < &ДатаНачала
	|	И КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияКонечныйОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеСПлощадями.ЛицевойСчет КАК ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_Помещения.Ссылка) КАК КолВоКомнат
	|ПОМЕСТИТЬ втКолВоИзСправочникаЛицевыеСчета
	|ИЗ
	|	втДанныеСПлощадями КАК втДанныеСПлощадями
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
	|		ПО втДанныеСПлощадями.Помещение = УПЖКХ_Помещения.Родитель
	|ГДЕ
	|	НЕ УПЖКХ_Помещения.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	втДанныеСПлощадями.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеСПлощадями.ЛицевойСчет КАК ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.Комната) КАК КолВоКомнат
	|ПОМЕСТИТЬ втПривязанныеКЛСКомнаты
	|ИЗ
	|	втДанныеСПлощадями КАК втДанныеСПлощадями
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ПривязанныеКЛицевомуСчетуКомнаты.СрезПоследних(
	|				&ДатаКонца,
	|				ЛицевойСчет В
	|						(ВЫБРАТЬ
	|							втДанныеСПлощадями.ЛицевойСчет
	|						ИЗ
	|							втДанныеСПлощадями КАК втДанныеСПлощадями)
	|					И Комната.Родитель В
	|						(ВЫБРАТЬ
	|							втДанныеСПлощадями.Помещение
	|						ИЗ
	|							втДанныеСПлощадями КАК втДанныеСПлощадями)) КАК УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних
	|		ПО втДанныеСПлощадями.ЛицевойСчет = УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.ЛицевойСчет
	|			И втДанныеСПлощадями.Помещение = УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.Комната.Родитель
	|ГДЕ
	|	УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.Привязка
	|
	|СГРУППИРОВАТЬ ПО
	|	втДанныеСПлощадями.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеСПлощадями.ЛицевойСчет,
	|	втДанныеСПлощадями.Помещение,
	|	втДанныеСПлощадями.КоличествоПроживающих,
	|	втДанныеСПлощадями.ТипСобственности,
	|	втДанныеСПлощадями.ОбщаяПлощадь,
	|	втДанныеСПлощадями.ЖилаяПлощадь,
	|	ЕСТЬNULL(втОплатыЗаСледМесяц.СуммаОплаты, 0) КАК СуммаОплатыВСледМесяце,
	|	ЕСТЬNULL(втОплатыЗаТекМесяц.СуммаОплаты, 0) КАК СуммаОплатыВТекМесяце,
	|	ЕСТЬNULL(втНачисленияПени.СуммаПени, 0) КАК СуммаПени,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втОплатыЗаТекМесяц.СуммаОплаты, 0) < ЕСТЬNULL(втСуммыЗадолженности.СуммаЗадолженностиЗаЖКУ, 0)
	|			ТОГДА ЕСТЬNULL(втСуммыЗадолженности.СуммаЗадолженностиЗаЖКУ, 0) - ЕСТЬNULL(втОплатыЗаТекМесяц.СуммаОплаты, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаЗадолженностиЗаЖКУ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втПериодыЗадолженности.Период, ЕСТЬNULL(втПериодыНачалаНачислений.Период, ДАТАВРЕМЯ(1, 1, 1))) = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА втПериодыЗадолженности.Период ЕСТЬ NULL
	|					ТОГДА РАЗНОСТЬДАТ(втПериодыНачалаНачислений.Период, &ДатаНачала, МЕСЯЦ)
	|				ИНАЧЕ ВЫБОР
	|						КОГДА втПериодыЗадолженности.Период > &ДатаКонца
	|							ТОГДА 0
	|						ИНАЧЕ РАЗНОСТЬДАТ(втПериодыЗадолженности.Период, &ДатаНачала, МЕСЯЦ)
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоМесяцевЗадолженностиЗаЖКУ,
	|	""Ж"" КАК ИдентификаторЗаписи,
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(ПривязанныеКЛСКомнаты.КолВоКомнат, 0) = 0
	|			ТОГДА ПривязанныеКЛСКомнаты.КолВоКомнат
	|		КОГДА НЕ ЕСТЬNULL(КолВоИзСправочникаЛицевыеСчета.КолВоКомнат, 0) = 0
	|			ТОГДА КолВоИзСправочникаЛицевыеСчета.КолВоКомнат
	|		ИНАЧЕ втДанныеСПлощадями.Помещение.КоличествоКомнат
	|	КОНЕЦ КАК КоличествоКомнат
	|ПОМЕСТИТЬ втИтоговыеДанные
	|ИЗ
	|	втДанныеСПлощадями КАК втДанныеСПлощадями
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОплатыЗаСледМесяц КАК втОплатыЗаСледМесяц
	|		ПО втДанныеСПлощадями.ЛицевойСчет = втОплатыЗаСледМесяц.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОплатыЗаТекМесяц КАК втОплатыЗаТекМесяц
	|		ПО втДанныеСПлощадями.ЛицевойСчет = втОплатыЗаТекМесяц.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНачисленияПени КАК втНачисленияПени
	|		ПО втДанныеСПлощадями.ЛицевойСчет = втНачисленияПени.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСуммыЗадолженности КАК втСуммыЗадолженности
	|		ПО втДанныеСПлощадями.ЛицевойСчет = втСуммыЗадолженности.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПериодыЗадолженности КАК втПериодыЗадолженности
	|		ПО втДанныеСПлощадями.ЛицевойСчет = втПериодыЗадолженности.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПериодыНачалаНачислений КАК втПериодыНачалаНачислений
	|		ПО втДанныеСПлощадями.ЛицевойСчет = втПериодыНачалаНачислений.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКолВоИзСправочникаЛицевыеСчета КАК КолВоИзСправочникаЛицевыеСчета
	|		ПО втДанныеСПлощадями.ЛицевойСчет = КолВоИзСправочникаЛицевыеСчета.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПривязанныеКЛСКомнаты КАК ПривязанныеКЛСКомнаты
	|		ПО втДанныеСПлощадями.ЛицевойСчет = ПривязанныеКЛСКомнаты.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговыеДанные.ЛицевойСчет,
	|	втИтоговыеДанные.Помещение,
	|	втИтоговыеДанные.КоличествоПроживающих,
	|	втИтоговыеДанные.ТипСобственности,
	|	втИтоговыеДанные.ОбщаяПлощадь,
	|	втИтоговыеДанные.ЖилаяПлощадь,
	|	втИтоговыеДанные.СуммаОплатыВСледМесяце,
	|	втИтоговыеДанные.СуммаОплатыВТекМесяце,
	|	втИтоговыеДанные.СуммаПени,
	|	втИтоговыеДанные.СуммаЗадолженностиЗаЖКУ,
	|	ВЫБОР
	|		КОГДА втИтоговыеДанные.СуммаЗадолженностиЗаЖКУ > 0
	|			ТОГДА
	|				ВЫБОР
	|					КОГДА втИтоговыеДанные.СуммаОплатыВСледМесяце > втИтоговыеДанные.СуммаЗадолженностиЗаЖКУ
	|						ТОГДА втИтоговыеДанные.СуммаОплатыВСледМесяце - втИтоговыеДанные.СуммаЗадолженностиЗаЖКУ
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ
	|			втИтоговыеДанные.СуммаОплатыВСледМесяце
	|	КОНЕЦ КАК СуммаОплатыЗаЖКУ,
	|	ВЫБОР
	|		КОГДА втИтоговыеДанные.СуммаЗадолженностиЗаЖКУ > 0
	|			ТОГДА
	|				ВЫБОР
	|					КОГДА втИтоговыеДанные.СуммаОплатыВСледМесяце > втИтоговыеДанные.СуммаЗадолженностиЗаЖКУ
	|						ТОГДА втИтоговыеДанные.СуммаЗадолженностиЗаЖКУ
	|					ИНАЧЕ втИтоговыеДанные.СуммаОплатыВСледМесяце
	|				КОНЕЦ
	|		ИНАЧЕ
	|			0
	|	КОНЕЦ КАК ВнесеннаяОплатаЗадолженностиЗаЖКУ,
	|	ВЫБОР
	|		КОГДА втИтоговыеДанные.СуммаЗадолженностиЗаЖКУ = 0
	|			ТОГДА 0
	|		ИНАЧЕ втИтоговыеДанные.КоличествоМесяцевЗадолженностиЗаЖКУ
	|	КОНЕЦ КАК КоличествоМесяцевЗадолженностиЗаЖКУ,
	|	втИтоговыеДанные.ИдентификаторЗаписи,
	|	втИтоговыеДанные.КоличествоКомнат,
	|	1 КАК КодОшибки
	|ИЗ
	|	втИтоговыеДанные КАК втИтоговыеДанные";
	
	Запрос.УстановитьПараметр("ТаблицаИзФайла",                       ТаблицаИдентифицированныхЖильцов);
	Запрос.УстановитьПараметр("ДатаНачала",                           НачалоМесяца(Объект.Период));
	Запрос.УстановитьПараметр("ДатаКонца",                            КонецМесяца(Объект.Период));
	Запрос.УстановитьПараметр("ДатаНачалаСледМесяца",                 НачалоМесяца(ДобавитьМесяц(НачалоМесяца(Объект.Период), 1)));
	Запрос.УстановитьПараметр("ДатаКонцаСледМесяца",                  КонецМесяца(ДобавитьМесяц(НачалоМесяца(Объект.Период), 1)));
	Запрос.УстановитьПараметр("Организация",                          Объект.Организация);
	Запрос.УстановитьПараметр("УказыватьКоличествоПрожИЗарегЧислами", Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Получить());
	Запрос.УстановитьПараметр("ДатаОпределенияЗадолженности",         ДатаСрокОплаты());
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Объект.ЧувашскаяРеспублика_СведенияОГражданахИХарактеристикахЖилья.Загрузить(Результат);
	
	Для Каждого СтрокаХарактеристики ИЗ Объект.ЧувашскаяРеспублика_СведенияОГражданахИХарактеристикахЖилья Цикл
		НайденныеСтрокиЛьготника = Объект.ЧувашскаяРеспублика_ДанныеЛьготников.НайтиСтроки(Новый Структура("ЛицевойСчет", СтрокаХарактеристики.ЛицевойСчет));
		Если НайденныеСтрокиЛьготника.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтрокаХарактеристики, НайденныеСтрокиЛьготника[0],, "ИдентификаторЗаписи");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСведенияОГражданахИХарактеристикахЖилья()

&НаСервере
// Заполняет табличную часть сведений о составе семьи.
//
Процедура ЗаполнитьСведенияОСоставеСемьи(ТаблицаИдентифицированныхЖильцов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаИзФайла.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаИзФайла.ЖилецИзБазы КАК ЖилецИзБазы,
	|	ТаблицаИзФайла.Помещение КАК Помещение,
	|	ТаблицаИзФайла.ПризнакСоставаСемьи КАК ПризнакСоставаСемьи,
	|	ТаблицаИзФайла.ФизЛицо
	|ПОМЕСТИТЬ втТаблицаДанныхИзФайла
	|ИЗ
	|	&ТаблицаИзФайла КАК ТаблицаИзФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаДанныхИзФайла.ЛицевойСчет,
	|	втТаблицаДанныхИзФайла.ЖилецИзБазы,
	|	втТаблицаДанныхИзФайла.Помещение,
	|	втТаблицаДанныхИзФайла.ФизЛицо
	|ПОМЕСТИТЬ втТаблицаДанныхИзФайлаДляПоиска
	|ИЗ
	|	втТаблицаДанныхИзФайла КАК втТаблицаДанныхИзФайла
	|ГДЕ
	|	втТаблицаДанныхИзФайла.ПризнакСоставаСемьи = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСтепенейРодства.СтепеньРодстваВБазе КАК СтепеньРодстваВБазе,
	|	ТаблицаСтепенейРодства.СтепеньРодстваВОСЗН КАК СтепеньРодстваВОСЗН
	|ПОМЕСТИТЬ втТаблицаСтепенейРодства
	|ИЗ
	|	&ТаблицаСтепенейРодства КАК ТаблицаСтепенейРодства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет,
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет.Адрес КАК Помещение,
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец,
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец.ФизЛицо КАК ФизЛицо
	|ПОМЕСТИТЬ втПроживающие
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втТаблицаДанныхИзФайлаДляПоиска.ЛицевойСчет
	|					ИЗ
	|						втТаблицаДанныхИзФайлаДляПоиска КАК втТаблицаДанныхИзФайлаДляПоиска)
	|				И НЕ Жилец В
	|						(ВЫБРАТЬ
	|							втТаблицаДанныхИзФайлаДляПоиска.ЖилецИзБазы
	|						ИЗ
	|							втТаблицаДанныхИзФайлаДляПоиска КАК втТаблицаДанныхИзФайлаДляПоиска)) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизическиеЛица.Ссылка КАК ФизЛицо,
	|	ФизическиеЛица.ДатаРождения,
	|	ВЫБОР
	|		КОГДА ФизическиеЛица.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)
	|			ТОГДА ""М""
	|		КОГДА ФизическиеЛица.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский)
	|			ТОГДА ""Ж""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Пол
	|ПОМЕСТИТЬ втПолИДРФизЛиц
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	ФизическиеЛица.Ссылка В
	|			(ВЫБРАТЬ
	|				втПроживающие.ФизЛицо
	|			ИЗ
	|				втПроживающие КАК втПроживающие)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФИОФизЛицСрезПоследних.ФизическоеЛицо КАК ФизЛицо,
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество
	|ПОМЕСТИТЬ втФИОФизЛиц
	|ИЗ
	|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(
	|			&ДатаКонца,
	|			ФизическоеЛицо В
	|				(ВЫБРАТЬ
	|					втПроживающие.ФизЛицо
	|				ИЗ
	|					втПроживающие КАК втПроживающие)) КАК ФИОФизЛицСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Помещение,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник
	|ПОМЕСТИТЬ втСобственникиПомещений
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(
	|			&ДатаКонца,
	|			(Помещение, Собственник) В
	|				(ВЫБРАТЬ
	|					втПроживающие.Помещение,
	|					втПроживающие.ФизЛицо
	|				ИЗ
	|					втПроживающие КАК втПроживающие)) КАК УПЖКХ_СобственникиПомещенийСрезПоследних
	|ГДЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий
	|ПОМЕСТИТЬ втНазначенныеЛьготы
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(
	|			&ДатаКонца,
	|			Проживающий В
	|					(ВЫБРАТЬ
	|						втПроживающие.Жилец
	|					ИЗ
	|						втПроживающие КАК втПроживающие)
	|				И ДатаИзменения <= &ДатаКонца) КАК КВП_НазначенныеЛьготыСрезПоследних
	|ГДЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.Действие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.ФизическоеЛицоОсновное,
	|	УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.ФизическоеЛицоСвязанное,
	|	УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.СтепеньРодства
	|ПОМЕСТИТЬ втСтепениРодстваВБазе
	|ИЗ
	|	РегистрСведений.УПЖКХ_СтепеньРодстваФизЛиц.СрезПоследних(
	|			&ДатаКонца,
	|			ФизическоеЛицоОсновное В
	|					(ВЫБРАТЬ
	|						втТаблицаДанныхИзФайлаДляПоиска.ФизЛицо
	|					ИЗ
	|						втТаблицаДанныхИзФайлаДляПоиска КАК втТаблицаДанныхИзФайлаДляПоиска)
	|				И ФизическоеЛицоСвязанное В
	|					(ВЫБРАТЬ
	|						втПроживающие.ФизЛицо
	|					ИЗ
	|						втПроживающие КАК втПроживающие)) КАК УПЖКХ_СтепеньРодстваФизЛицСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСтепениРодстваВБазе.ФизическоеЛицоОсновное,
	|	втСтепениРодстваВБазе.ФизическоеЛицоСвязанное,
	|	ЕСТЬNULL(втТаблицаСтепенейРодства.СтепеньРодстваВОСЗН, """") КАК СтепеньРодстваВОСЗН
	|ПОМЕСТИТЬ втСтепениРодстваВОСЗН
	|ИЗ
	|	втСтепениРодстваВБазе КАК втСтепениРодстваВБазе
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаСтепенейРодства КАК втТаблицаСтепенейРодства
	|		ПО втСтепениРодстваВБазе.СтепеньРодства = втТаблицаСтепенейРодства.СтепеньРодстваВБазе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПроживающие.ЛицевойСчет,
	|	втПроживающие.Жилец,
	|	втПроживающие.ФизЛицо,
	|	ЕСТЬNULL(втФИОФизЛиц.Фамилия, """") КАК Фамилия,
	|	ЕСТЬNULL(втФИОФизЛиц.Имя, """") КАК Имя,
	|	ЕСТЬNULL(втФИОФизЛиц.Отчество, """") КАК Отчество,
	|	втПолИДРФизЛиц.ДатаРождения,
	|	втПолИДРФизЛиц.Пол,
	|	ВЫБОР
	|		КОГДА НЕ втСобственникиПомещений.Собственник ЕСТЬ NULL
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакСобственникаЖилья,
	|	ВЫБОР
	|		КОГДА НЕ втНазначенныеЛьготы.Проживающий ЕСТЬ NULL
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакЛьготника
	|ПОМЕСТИТЬ втИтоговаяБезСтепенейРодства
	|ИЗ
	|	втПроживающие КАК втПроживающие
	|		ЛЕВОЕ СОЕДИНЕНИЕ втФИОФизЛиц КАК втФИОФизЛиц
	|		ПО втПроживающие.ФизЛицо = втФИОФизЛиц.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПолИДРФизЛиц КАК втПолИДРФизЛиц
	|		ПО втПроживающие.ФизЛицо = втПолИДРФизЛиц.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСобственникиПомещений КАК втСобственникиПомещений
	|		ПО втПроживающие.ФизЛицо = втСобственникиПомещений.Собственник
	|			И втПроживающие.Помещение = втСобственникиПомещений.Помещение
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНазначенныеЛьготы КАК втНазначенныеЛьготы
	|		ПО втПроживающие.Жилец = втНазначенныеЛьготы.Проживающий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаДанныхИзФайлаДляПоиска.ЛицевойСчет,
	|	втТаблицаДанныхИзФайлаДляПоиска.ЖилецИзБазы,
	|	втТаблицаДанныхИзФайлаДляПоиска.ФизЛицо КАК ФизЛицоИзБазы,
	|	втИтоговаяБезСтепенейРодства.ДатаРождения,
	|	втИтоговаяБезСтепенейРодства.Пол,
	|	втИтоговаяБезСтепенейРодства.ПризнакСобственникаЖилья,
	|	втИтоговаяБезСтепенейРодства.ПризнакЛьготника,
	|	втИтоговаяБезСтепенейРодства.Фамилия,
	|	втИтоговаяБезСтепенейРодства.Имя,
	|	втИтоговаяБезСтепенейРодства.Отчество,
	|	втИтоговаяБезСтепенейРодства.Жилец,
	|	втИтоговаяБезСтепенейРодства.ФизЛицо КАК ФизЛицо
	|ПОМЕСТИТЬ втИтоговая
	|ИЗ
	|	втТаблицаДанныхИзФайлаДляПоиска КАК втТаблицаДанныхИзФайлаДляПоиска
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втИтоговаяБезСтепенейРодства КАК втИтоговаяБезСтепенейРодства
	|		ПО втТаблицаДанныхИзФайлаДляПоиска.ЛицевойСчет = втИтоговаяБезСтепенейРодства.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""С"" КАК ИдентификаторЗаписи,
	|	втИтоговая.ЛицевойСчет,
	|	втИтоговая.ЖилецИзБазы,
	|	втИтоговая.ДатаРождения,
	|	втИтоговая.Пол,
	|	втСтепениРодстваВОСЗН.СтепеньРодстваВОСЗН КАК СтепеньРодства,
	|	втИтоговая.ПризнакСобственникаЖилья,
	|	втИтоговая.ПризнакЛьготника,
	|	втИтоговая.Фамилия,
	|	втИтоговая.Имя,
	|	втИтоговая.Отчество
	|ИЗ
	|	втИтоговая КАК втИтоговая
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСтепениРодстваВОСЗН КАК втСтепениРодстваВОСЗН
	|		ПО втИтоговая.ФизЛицоИзБазы = втСтепениРодстваВОСЗН.ФизическоеЛицоОсновное
	|			И втИтоговая.ФизЛицо = втСтепениРодстваВОСЗН.ФизическоеЛицоСвязанное
	|			И (НЕ втСтепениРодстваВОСЗН.СтепеньРодстваВОСЗН = """")";
	
	Запрос.УстановитьПараметр("ТаблицаИзФайла",         ТаблицаИдентифицированныхЖильцов);
	Запрос.УстановитьПараметр("ТаблицаСтепенейРодства", Объект.ЧувашскаяРеспублика_СтепениРодства.Выгрузить());
	Запрос.УстановитьПараметр("ДатаКонца",              КонецМесяца(Объект.Период));
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаРезультата ИЗ Результат Цикл
		НоваяСтрокаСоставаСемьи = Объект.ЧувашскаяРеспублика_СведенияОСоставеСемьи.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаСоставаСемьи, СтрокаРезультата,, "ДатаРождения");
		НоваяСтрокаСоставаСемьи.ДатаРождения = Формат(СтрокаРезультата.ДатаРождения, "ДФ=yyyyddMM; ДЛФ=");
	КонецЦикла;
	
	Для Каждого СтрокаХарактеристики ИЗ Объект.ЧувашскаяРеспублика_СведенияОГражданахИХарактеристикахЖилья Цикл
		НайденныеСтрокиСоставаСемьи = Объект.ЧувашскаяРеспублика_СведенияОСоставеСемьи.НайтиСтроки(Новый Структура("ЛицевойСчет", СтрокаХарактеристики.ЛицевойСчет));
		СтрокаХарактеристики.КоличествоПроживающихЧленовСемьи = НайденныеСтрокиСоставаСемьи.Количество();
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСведенияОСоставеСемьи()

&НаСервере
// Заполняет табличную часть сведений об услугах ЖКУ.
//
Процедура ЗаполнитьСведенияОбУслугах(ТаблицаИдентифицированныхЖильцов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаИзФайла.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ втТаблицаДанныхИзФайла
	|ИЗ
	|	&ТаблицаИзФайла КАК ТаблицаИзФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУслуг.УслугаВБазе КАК УслугаВБазе,
	|	ТаблицаУслуг.Код КАК Код,
	|	ТаблицаУслуг.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаУслуг.УслугаВОСЗН КАК УслугаВОСЗН
	|ПОМЕСТИТЬ втТаблицаУслуг
	|ИЗ
	|	&ТаблицаУслуг КАК ТаблицаУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаНорм.Здание КАК Здание,
	|	ТаблицаНорм.НормаПотребления КАК НормаПотребления
	|ПОМЕСТИТЬ втТаблицаНормБезУслуг
	|ИЗ
	|	&ТаблицаНорм КАК ТаблицаНорм
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаНормБезУслуг.Здание,
	|	ЕСТЬNULL(КВП_НормыПотребленияУслуг.Владелец, ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)) КАК Услуга,
	|	втТаблицаНормБезУслуг.НормаПотребления
	|ПОМЕСТИТЬ втТаблицаНорм
	|ИЗ
	|	втТаблицаНормБезУслуг КАК втТаблицаНормБезУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КВП_НормыПотребленияУслуг КАК КВП_НормыПотребленияУслуг
	|		ПО втТаблицаНормБезУслуг.НормаПотребления = КВП_НормыПотребленияУслуг.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаДанныхИзФайла.ЛицевойСчет,
	|	втТаблицаУслуг.УслугаВБазе,
	|	втТаблицаУслуг.Код,
	|	втТаблицаУслуг.ЕдиницаИзмерения,
	|	втТаблицаУслуг.УслугаВОСЗН
	|ПОМЕСТИТЬ втЛицевыеСчетаСУслугами
	|ИЗ
	|	втТаблицаДанныхИзФайла КАК втТаблицаДанныхИзФайла
	|		ПОЛНОЕ СОЕДИНЕНИЕ втТаблицаУслуг КАК втТаблицаУслуг
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет.Адрес.Владелец КАК Здание,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.Услуга = &УслугаПодогрева
	|			ТОГДА &ТарифПодогрева
	|		ИНАЧЕ УПЖКХ_НачисленияОбороты.Тариф
	|	КОНЕЦ КАК ТарифНаЖКУ,
	|	УПЖКХ_НачисленияОбороты.Количество КАК ОбъемУслуги,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу))
	|			ТОГДА 1
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ))
	|			ТОГДА 2
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему))
	|			ТОГДА 3
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ОбъемУслугиОпределенПо,
	|	ВЫБОР
	|		КОГДА НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|				И НЕ УПЖКХ_НачисленияОбороты.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы))
	|			ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Начислено,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|			ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПерерасчетСуммы,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|			ТОГДА УПЖКХ_НачисленияОбороты.МесяцНачисления
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК МесяцПерерасчета,
	|	ВЫБОР
	|		КОГДА НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|				И УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|			ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НачисленоПени,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|			ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Оплачено
	|ПОМЕСТИТЬ втНачисления
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНачала,
	|			&ДатаКонца,
	|			Запись,
	|			ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втЛицевыеСчетаСУслугами.ЛицевойСчет
	|					ИЗ
	|						втЛицевыеСчетаСУслугами КАК втЛицевыеСчетаСУслугами)
	|				И Услуга В
	|					(ВЫБРАТЬ
	|						втЛицевыеСчетаСУслугами.УслугаВБазе
	|					ИЗ
	|						втЛицевыеСчетаСУслугами КАК втЛицевыеСчетаСУслугами)
	|				И Организация = &Организация) КАК УПЖКХ_НачисленияОбороты
	|ГДЕ
	|	ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.Регистратор ССЫЛКА Документ.КВП_РегистрацияОплаты
	|				ТОГДА НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Рассрочка)
	|						И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Комиссия))
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачисления.ЛицевойСчет,
	|	втНачисления.Здание,
	|	втНачисления.Услуга,
	|	СУММА(втНачисления.ОбъемУслуги) КАК ОбъемУслуги,
	|	МАКСИМУМ(втНачисления.ОбъемУслугиОпределенПо) КАК ОбъемУслугиОпределенПо,
	|	СУММА(втНачисления.Начислено) КАК Начислено,
	|	СУММА(втНачисления.ПерерасчетСуммы) КАК ПерерасчетСуммы,
	|	МАКСИМУМ(втНачисления.МесяцПерерасчета) КАК МесяцПерерасчета,
	|	СУММА(втНачисления.НачисленоПени) КАК НачисленоПени,
	|	СУММА(втНачисления.Оплачено) КАК Оплачено
	|ПОМЕСТИТЬ втНачисленияСГруппировкойБезТарифа
	|ИЗ
	|	втНачисления КАК втНачисления
	|
	|СГРУППИРОВАТЬ ПО
	|	втНачисления.ЛицевойСчет,
	|	втНачисления.Здание,
	|	втНачисления.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачисления.ЛицевойСчет,
	|	втНачисления.Услуга,
	|	СРЕДНЕЕ(втНачисления.ТарифНаЖКУ) КАК ТарифНаЖКУ
	|ПОМЕСТИТЬ втСредниеТарифы
	|ИЗ
	|	втНачисления КАК втНачисления
	|ГДЕ
	|	НЕ втНачисления.ТарифНаЖКУ = 0
	|
	|СГРУППИРОВАТЬ ПО
	|	втНачисления.ЛицевойСчет,
	|	втНачисления.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления
	|ПОМЕСТИТЬ втНормыПотребления
	|ИЗ
	|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(
	|			&ДатаКонца,
	|			(ЛицевойСчет, Услуга) В
	|				(ВЫБРАТЬ
	|					втНачисленияСГруппировкойБезТарифа.ЛицевойСчет,
	|					втНачисленияСГруппировкойБезТарифа.Услуга
	|				ИЗ
	|					втНачисленияСГруппировкойБезТарифа КАК втНачисленияСГруппировкойБезТарифа)) КАК КВП_НормыПотребленияУслугЛССрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачисления.ЛицевойСчет,
	|	втНачисления.Услуга,
	|	ЕСТЬNULL(втСредниеТарифы.ТарифНаЖКУ, 0) КАК ТарифНаЖКУ,
	|	втНачисления.ОбъемУслуги,
	|	втНачисления.ОбъемУслугиОпределенПо,
	|	втНачисления.Начислено,
	|	втНачисления.ПерерасчетСуммы,
	|	втНачисления.МесяцПерерасчета,
	|	втНачисления.НачисленоПени,
	|	втНачисления.Оплачено,
	|	ВЫБОР
	|		КОГДА втТаблицаНорм.НормаПотребления ЕСТЬ NULL 
	|			ТОГДА ЕСТЬNULL(втНормыПотребления.НормаПотребления, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка))
	|		ИНАЧЕ втТаблицаНорм.НормаПотребления
	|	КОНЕЦ КАК НормаПотребления
	|ПОМЕСТИТЬ втДанныеДляОтбораНачисленийСГруппировкой
	|ИЗ
	|	втНачисленияСГруппировкойБезТарифа КАК втНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНормыПотребления КАК втНормыПотребления
	|		ПО втНачисления.ЛицевойСчет = втНормыПотребления.ЛицевойСчет
	|			И втНачисления.Услуга = втНормыПотребления.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаНорм КАК втТаблицаНорм
	|		ПО втНачисления.Здание = втТаблицаНорм.Здание
	|			И втНачисления.Услуга = втТаблицаНорм.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСредниеТарифы КАК втСредниеТарифы
	|		ПО втНачисления.ЛицевойСчет = втСредниеТарифы.ЛицевойСчет
	|			И втНачисления.Услуга = втСредниеТарифы.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	""У"" КАК ИдентификаторЗаписи,
	|	втЛицевыеСчетаСУслугами.Код КАК КодУслугиЖКХ,
	|	втЛицевыеСчетаСУслугами.ЕдиницаИзмерения,
	|	втДанныеДляОтбораНачисленийСГруппировкой.ТарифНаЖКУ,
	|	втДанныеДляОтбораНачисленийСГруппировкой.НормаПотребления,
	|	втДанныеДляОтбораНачисленийСГруппировкой.ОбъемУслуги,
	|	втДанныеДляОтбораНачисленийСГруппировкой.ОбъемУслугиОпределенПо,
	|	втДанныеДляОтбораНачисленийСГруппировкой.Начислено,
	|	втДанныеДляОтбораНачисленийСГруппировкой.ПерерасчетСуммы,
	|	втДанныеДляОтбораНачисленийСГруппировкой.МесяцПерерасчета,
	|	втДанныеДляОтбораНачисленийСГруппировкой.НачисленоПени,
	|	втДанныеДляОтбораНачисленийСГруппировкой.Оплачено,
	|	втЛицевыеСчетаСУслугами.ЛицевойСчет,
	|	втДанныеДляОтбораНачисленийСГруппировкой.НормаПотребления.Размер КАК РазмерНормы,
	|	втДанныеДляОтбораНачисленийСГруппировкой.НормаПотребления.ВариантНастройки КАК ВариантНастройкиНормы,
	|	втДанныеДляОтбораНачисленийСГруппировкой.Услуга
	|ПОМЕСТИТЬ втИтоговыеДанныеБезЗадолженности
	|ИЗ
	|	втДанныеДляОтбораНачисленийСГруппировкой КАК втДанныеДляОтбораНачисленийСГруппировкой
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЛицевыеСчетаСУслугами КАК втЛицевыеСчетаСУслугами
	|		ПО втДанныеДляОтбораНачисленийСГруппировкой.ЛицевойСчет = втЛицевыеСчетаСУслугами.ЛицевойСчет
	|			И втДанныеДляОтбораНачисленийСГруппировкой.Услуга = втЛицевыеСчетаСУслугами.УслугаВБазе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Услуга,
	|	МАКСИМУМ(КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период) КАК Период
	|ПОМЕСТИТЬ втПериодыЗадолженности
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(
	|			,
	|			&ДатаОпределенияЗадолженности,
	|			Регистратор,
	|			Движения,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втИтоговыеДанныеБезЗадолженности.ЛицевойСчет
	|					ИЗ
	|						втИтоговыеДанныеБезЗадолженности КАК втИтоговыеДанныеБезЗадолженности)
	|				И Услуга В
	|					(ВЫБРАТЬ
	|						втИтоговыеДанныеБезЗадолженности.Услуга
	|					ИЗ
	|						втИтоговыеДанныеБезЗадолженности КАК втИтоговыеДанныеБезЗадолженности)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты
	|ГДЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период < &ДатаОпределенияЗадолженности
	|	И КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияКонечныйОстаток <= 0
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Услуга,
	|	МИНИМУМ(КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период) КАК Период
	|ПОМЕСТИТЬ втПериодыНачалаНачислений
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(
	|			,
	|			&ДатаКонца,
	|			Регистратор,
	|			Движения,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втИтоговыеДанныеБезЗадолженности.ЛицевойСчет
	|					ИЗ
	|						втИтоговыеДанныеБезЗадолженности КАК втИтоговыеДанныеБезЗадолженности)
	|				И НЕ ЛицевойСчет В
	|						(ВЫБРАТЬ
	|							втПериодыЗадолженности.ЛицевойСчет
	|						ИЗ
	|							втПериодыЗадолженности КАК втПериодыЗадолженности)
	|				И Услуга В
	|					(ВЫБРАТЬ
	|						втИтоговыеДанныеБезЗадолженности.Услуга
	|					ИЗ
	|						втИтоговыеДанныеБезЗадолженности КАК втИтоговыеДанныеБезЗадолженности)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты
	|ГДЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период < &ДатаКонца
	|	И КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияКонечныйОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговыеДанныеБезЗадолженности.ИдентификаторЗаписи,
	|	втИтоговыеДанныеБезЗадолженности.КодУслугиЖКХ,
	|	втИтоговыеДанныеБезЗадолженности.ЕдиницаИзмерения,
	|	втИтоговыеДанныеБезЗадолженности.ТарифНаЖКУ,
	|	втИтоговыеДанныеБезЗадолженности.НормаПотребления,
	|	втИтоговыеДанныеБезЗадолженности.ОбъемУслуги,
	|	втИтоговыеДанныеБезЗадолженности.ОбъемУслугиОпределенПо,
	|	втИтоговыеДанныеБезЗадолженности.Начислено,
	|	втИтоговыеДанныеБезЗадолженности.ПерерасчетСуммы,
	|	втИтоговыеДанныеБезЗадолженности.МесяцПерерасчета,
	|	втИтоговыеДанныеБезЗадолженности.НачисленоПени,
	|	втИтоговыеДанныеБезЗадолженности.Оплачено,
	|	втИтоговыеДанныеБезЗадолженности.ЛицевойСчет,
	|	втИтоговыеДанныеБезЗадолженности.РазмерНормы,
	|	втИтоговыеДанныеБезЗадолженности.ВариантНастройкиНормы,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втПериодыЗадолженности.Период, ЕСТЬNULL(втПериодыНачалаНачислений.Период, ДАТАВРЕМЯ(1, 1, 1))) = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА втПериодыЗадолженности.Период ЕСТЬ NULL
	|					ТОГДА РАЗНОСТЬДАТ(втПериодыНачалаНачислений.Период, &ДатаКонца, МЕСЯЦ)
	|				ИНАЧЕ ВЫБОР
	|						КОГДА втПериодыЗадолженности.Период > &ДатаКонца
	|							ТОГДА 0
	|						ИНАЧЕ РАЗНОСТЬДАТ(втПериодыЗадолженности.Период, &ДатаКонца, МЕСЯЦ)
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК КолВоМесяцевДолга
	|ПОМЕСТИТЬ втИтоговыеДанные
	|ИЗ
	|	втИтоговыеДанныеБезЗадолженности КАК втИтоговыеДанныеБезЗадолженности
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПериодыЗадолженности КАК втПериодыЗадолженности
	|		ПО втИтоговыеДанныеБезЗадолженности.ЛицевойСчет = втПериодыЗадолженности.ЛицевойСчет
	|			И втИтоговыеДанныеБезЗадолженности.Услуга = втПериодыЗадолженности.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПериодыНачалаНачислений КАК втПериодыНачалаНачислений
	|		ПО втИтоговыеДанныеБезЗадолженности.ЛицевойСчет = втПериодыНачалаНачислений.ЛицевойСчет
	|			И втИтоговыеДанныеБезЗадолженности.Услуга = втПериодыНачалаНачислений.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговыеДанные.ИдентификаторЗаписи,
	|	втИтоговыеДанные.КодУслугиЖКХ,
	|	втИтоговыеДанные.ЕдиницаИзмерения,
	|	втИтоговыеДанные.ТарифНаЖКУ,
	|	втИтоговыеДанные.НормаПотребления,
	|	втИтоговыеДанные.ОбъемУслуги,
	|	втИтоговыеДанные.ОбъемУслугиОпределенПо,
	|	втИтоговыеДанные.Начислено,
	|	втИтоговыеДанные.ПерерасчетСуммы,
	|	втИтоговыеДанные.МесяцПерерасчета,
	|	втИтоговыеДанные.НачисленоПени,
	|	втИтоговыеДанные.ЛицевойСчет,
	|	втИтоговыеДанные.РазмерНормы,
	|	втИтоговыеДанные.ВариантНастройкиНормы,
	|	ВЫБОР
	|		КОГДА НЕ втИтоговыеДанные.КолВоМесяцевДолга < 3
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОтметкаОбОтсутствииНарушенийПорядкаОплаты
	|ИЗ
	|	втИтоговыеДанные КАК втИтоговыеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	втИтоговыеДанные.НормаПотребления,
	|	втИтоговыеДанные.ЕдиницаИзмерения,
	|	втИтоговыеДанные.МесяцПерерасчета,
	|	втИтоговыеДанные.КодУслугиЖКХ,
	|	втИтоговыеДанные.ЛицевойСчет,
	|	втИтоговыеДанные.ИдентификаторЗаписи,
	|	втИтоговыеДанные.ВариантНастройкиНормы,
	|	втИтоговыеДанные.ТарифНаЖКУ,
	|	втИтоговыеДанные.ОбъемУслуги,
	|	втИтоговыеДанные.Начислено,
	|	втИтоговыеДанные.ПерерасчетСуммы,
	|	втИтоговыеДанные.НачисленоПени,
	|	втИтоговыеДанные.РазмерНормы,
	|	втИтоговыеДанные.ОбъемУслугиОпределенПо,
	|	ВЫБОР
	|		КОГДА НЕ втИтоговыеДанные.КолВоМесяцевДолга < 3
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ";
	
	Запрос.УстановитьПараметр("ТаблицаИзФайла",               ТаблицаИдентифицированныхЖильцов);
	Запрос.УстановитьПараметр("ТаблицаУслуг",                 Объект.ЧувашскаяРеспублика_УслугиВБазе.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаНорм",                  Объект.ЧувашскаяРеспублика_НормыЗданий.Выгрузить());
	Запрос.УстановитьПараметр("ДатаКонца",                    КонецМесяца(Объект.Период));
	Запрос.УстановитьПараметр("ДатаНачала",                   НачалоМесяца(Объект.Период));
	Запрос.УстановитьПараметр("Организация",                  Объект.Организация);
	Запрос.УстановитьПараметр("ДатаОпределенияЗадолженности", ДатаСрокОплаты(КонецМесяца(Объект.Период) + 1));
	
	Запрос.УстановитьПараметр("УслугаПодогрева", Объект.УслугаПодогрева);
	Запрос.УстановитьПараметр("ТарифПодогрева",  Объект.ТарифПодогрева);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаРезультата ИЗ Результат Цикл
		НоваяСтрокаУслуг = Объект.ЧувашскаяРеспублика_СведенияОбУслугахЖКХ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаУслуг, СтрокаРезультата);
		Если ЗначениеЗаполнено(СтрокаРезультата.НормаПотребления) Тогда
			Если НЕ СтрокаРезультата.ВариантНастройкиНормы = ПредопределенноеЗначение("Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой") Тогда
				НоваяСтрокаУслуг.НормативПотребления = ПолучитьРазмерНормыПотребления(СтрокаРезультата.ЛицевойСчет, КонецМесяца(Объект.Период), СтрокаРезультата.НормаПотребления, Объект.Организация);
			Иначе
				НоваяСтрокаУслуг.НормативПотребления = СтрокаРезультата.РазмерНормы;
			КонецЕсли;
		Иначе
			НоваяСтрокаУслуг.НормативПотребления = 0;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаРезультата.МесяцПерерасчета) Тогда
			НоваяСтрокаУслуг.НачалоПериодаПерерасчета = Формат(НачалоМесяца(СтрокаРезультата.МесяцПерерасчета), "ДФ=yyyyMMdd; ДЛФ=");
			НоваяСтрокаУслуг.КонецПериодаПерерасчета  = Формат(КонецМесяца(СтрокаРезультата.МесяцПерерасчета), "ДФ=yyyyMMdd; ДЛФ=");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСведенияОбУслугах()

&НаСервере
// Получает таблицу значений с адресами зданий.
//
Функция ПолучитьАдресаВсехЗданий()
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	втКонтактнаяИнформация.Объект КАК Здание,
	|	ВЫБОР
	|		КОГДА НЕ втКонтактнаяИнформация.НаселенныйПункт = """"
	|			ТОГДА втКонтактнаяИнформация.НаселенныйПункт
	|		ИНАЧЕ втКонтактнаяИнформация.Город
	|	КОНЕЦ КАК НаселенныйПункт,
	|	втКонтактнаяИнформация.Улица,
	|	втКонтактнаяИнформация.Дом,
	|	втКонтактнаяИнформация.Корпус
	|ИЗ
	|	втКонтактнаяИнформация КАК втКонтактнаяИнформация";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	МассивСокрНасПункт = СформироватьМассивСокращениеДляЧувашскойРеспубликиПоВиду(4);
	МассивСокрУлицы    = СформироватьМассивСокращениеДляЧувашскойРеспубликиПоВиду(5);
	
	Для Каждого СтрокаЗдания ИЗ Результат Цикл
		СтрокаЗдания.НаселенныйПункт = НормализацияПолейАдресаОбласти(СтрокаЗдания.НаселенныйПункт, МассивСокрНасПункт);
		СтрокаЗдания.Улица           = НормализацияПолейАдресаОбласти(СтрокаЗдания.Улица, МассивСокрУлицы);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьАдресаВсехЗданий()

&НаСервере
// Функция сокращает название города или улицы: убирает сокращения,
// определяющие тип данного элемента адреса: "г.", "ул." и так далее.
//
// Параметры:
//  Ресурс       - Строка - элемент адреса
//
// Возвращаемое значение:
//  Строка - элемент адреса в сокращенном виде
//
Функция НормализацияПолейАдресаОбласти(Ресурс, Массив)
	
	Найден = Истина;
	
	Для Каждого Элемент Из Массив Цикл
		
		Если Прав(СокрЛП(Ресурс), СтрДлина(Элемент)) = Элемент Тогда
			ПредСимвол = Сред(СокрЛП(Ресурс), СтрДлина(СокрЛП(Ресурс)) - СтрДлина(Элемент), 1);
			
			Если ПредСимвол = " " Тогда
				Возврат СокрЛП(Лев(СокрЛП(Ресурс), СтрДлина(СокрЛП(Ресурс)) - СтрДлина(Элемент)));
			КонецЕсли;
		ИначеЕсли Лев(СокрЛП(Ресурс), СтрДлина(Элемент)) = Элемент Тогда
			СледСимвол = Сред(СокрЛП(Ресурс), СтрДлина(Элемент) + 1, 1);
			
			Если СледСимвол = " " Тогда
				Возврат СокрЛП(Сред(СокрЛП(Ресурс), СтрДлина(Элемент) + 1));
			КонецЕсли;
		Иначе
			
			Найден = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Найден = Ложь Тогда
		Возврат Ресурс;
	КонецЕсли;
	
КонецФункции

&НаСервере
// Формирует массив сокращений для Свердловской области для выбранного вида сокращения.
//
Функция СформироватьМассивСокращениеДляЧувашскойРеспубликиПоВиду(ВидСокращение)
	
	МассивСокращений = Новый Массив;
	// Для регионов.
	Если ВидСокращение = 1 Тогда
		МассивСокращений.Добавить("обл");
		// Для районов.
	ИначеЕсли ВидСокращение = 2 Тогда
		МассивСокращений.Добавить("р-н");
		// Для городов.
	ИначеЕсли ВидСокращение = 3 Тогда
		МассивСокращений.Добавить("г");
		// Для нас.пунктов.
	ИначеЕсли ВидСокращение = 4 Тогда
		МассивСокращений.Добавить("рп");
		МассивСокращений.Добавить("п");
		МассивСокращений.Добавить("с");
		МассивСокращений.Добавить("д");
		МассивСокращений.Добавить("х");
		МассивСокращений.Добавить("ст");
		МассивСокращений.Добавить("пгт");
		МассивСокращений.Добавить("дп");
		МассивСокращений.Добавить("рзд");
		МассивСокращений.Добавить("мкр");
		МассивСокращений.Добавить("нп");
		МассивСокращений.Добавить("тер");
		МассивСокращений.Добавить("п/ст");
		МассивСокращений.Добавить("промзона");
		МассивСокращений.Добавить("снт");
		МассивСокращений.Добавить("п/о");
		МассивСокращений.Добавить("городок");
		МассивСокращений.Добавить("заимка");
		МассивСокращений.Добавить("кп");
		МассивСокращений.Добавить("ж/д_казарм");
		МассивСокращений.Добавить("г");
		МассивСокращений.Добавить("обл");
		// Для улиц.
	ИначеЕсли ВидСокращение = 5 Тогда
		МассивСокращений.Добавить("ул");
		МассивСокращений.Добавить("тер");
		МассивСокращений.Добавить("пл");
		МассивСокращений.Добавить("пер");
		МассивСокращений.Добавить("снт");
		МассивСокращений.Добавить("проезд");
		МассивСокращений.Добавить("б-р");
		МассивСокращений.Добавить("туп");
		МассивСокращений.Добавить("п");
		МассивСокращений.Добавить("ш");
		МассивСокращений.Добавить("пр-кт");
		МассивСокращений.Добавить("тракт");
		МассивСокращений.Добавить("сквер");
		МассивСокращений.Добавить("ст");
		МассивСокращений.Добавить("наб");
		МассивСокращений.Добавить("км");
		МассивСокращений.Добавить("ж/д_ст");
		МассивСокращений.Добавить("сад");
		МассивСокращений.Добавить("парк");
		МассивСокращений.Добавить("уч-к");
		МассивСокращений.Добавить("мкр");
		МассивСокращений.Добавить("городок");
		МассивСокращений.Добавить("кв-л");
		МассивСокращений.Добавить("нп");
		МассивСокращений.Добавить("остров");
		МассивСокращений.Добавить("гск");
		МассивСокращений.Добавить("линия");
		МассивСокращений.Добавить("рзд");
		МассивСокращений.Добавить("стр");
		МассивСокращений.Добавить("аллея");
		МассивСокращений.Добавить("казарма");
		МассивСокращений.Добавить("ж/д_рзд");
		МассивСокращений.Добавить("д");
		МассивСокращений.Добавить("ж/д_казарм");
		МассивСокращений.Добавить("ж/д_будка");
		МассивСокращений.Добавить("высел");
	КонецЕсли;
	
	Возврат МассивСокращений;
	
КонецФункции // СформироватьМассивСокращениеДляЧувашскойРеспубликиПоВиду()

&НаСервере
// Получает таблицу значений с ФИО физических лиц.
//
Функция ПолучитьФИОФизЛиц()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо КАК ФизЛицо,
	|	ФИОФизическихЛицСрезПоследних.Фамилия,
	|	ФИОФизическихЛицСрезПоследних.Имя,
	|	ФИОФизическихЛицСрезПоследних.Отчество
	|ИЗ
	|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&Дата, ) КАК ФИОФизическихЛицСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", КонецМесяца(Объект.Период));
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаФизЛица ИЗ Результат Цикл
		СтрокаФизЛица.Фамилия  = СокрЛП(СтрокаФизЛица.Фамилия);
		СтрокаФизЛица.Имя      = СокрЛП(СтрокаФизЛица.Имя);
		СтрокаФизЛица.Отчество = СокрЛП(СтрокаФизЛица.Отчество);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьФИОФизЛиц()

&НаСервере
// Получает таблицу жильцов идентифицированных с записями из файла-запроса.
//
Функция ПолучитьТаблицуИдентифицированныхЖильцов(ТаблицаАдресов, ТаблицаФИО)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИзФайла.Фамилия КАК Фамилия,
	|	ТаблицаИзФайла.Имя КАК Имя,
	|	ТаблицаИзФайла.Отчество КАК Отчество,
	|	ТаблицаИзФайла.НаселенныйПункт КАК НаселенныйПункт,
	|	ТаблицаИзФайла.Улица КАК Улица,
	|	ТаблицаИзФайла.Дом КАК Дом,
	|	ТаблицаИзФайла.Корпус КАК Корпус,
	|	ТаблицаИзФайла.Квартира КАК Квартира,
	|	ТаблицаИзФайла.КвартираЧислом КАК КвартираЧислом,
	|	ТаблицаИзФайла.ПризнакСоставаСемьи КАК ПризнакСоставаСемьи
	|ПОМЕСТИТЬ втТаблицаДанныхИзФайла
	|ИЗ
	|	&ТаблицаИзФайла КАК ТаблицаИзФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаФИО.ФизЛицо,
	|	ТаблицаФИО.Фамилия,
	|	ТаблицаФИО.Имя,
	|	ТаблицаФИО.Отчество
	|ПОМЕСТИТЬ втФИОФизЛиц
	|ИЗ
	|	&ТаблицаФИО КАК ТаблицаФИО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_Жильцы.Ссылка КАК Проживающий,
	|	УПЖКХ_Жильцы.ФизЛицо,
	|	УПЖКХ_Жильцы.Владелец.Адрес.Владелец КАК Здание,
	|	УПЖКХ_Жильцы.Владелец.Адрес.Код КАК Квартира,
	|	УПЖКХ_Жильцы.Владелец.Адрес.ВидПомещения.ТипПомещения КАК ТипПомещения,
	|	УПЖКХ_Жильцы.Владелец КАК ЛицевойСчет,
	|	УПЖКХ_Жильцы.Владелец.Адрес КАК Помещение,
	|	УПЖКХ_Жильцы.Владелец.Идентификатор КАК ИдентификаторЛицевогоСчета
	|ПОМЕСТИТЬ втЖильцы
	|ИЗ
	|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
	|ГДЕ
	|	НЕ УПЖКХ_Жильцы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцы.Проживающий,
	|	ЕСТЬNULL(втФИОФизЛиц.Фамилия, """") КАК Фамилия,
	|	ЕСТЬNULL(втФИОФизЛиц.Имя, """") КАК Имя,
	|	ЕСТЬNULL(втФИОФизЛиц.Отчество, """") КАК Отчество,
	|	втЖильцы.Здание,
	|	втЖильцы.Квартира,
	|	втЖильцы.ТипПомещения,
	|	втЖильцы.ЛицевойСчет,
	|	втЖильцы.ИдентификаторЛицевогоСчета,
	|	втЖильцы.Помещение,
	|	втЖильцы.ФизЛицо
	|ПОМЕСТИТЬ втЖильцыСФИО
	|ИЗ
	|	втЖильцы КАК втЖильцы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втФИОФизЛиц КАК втФИОФизЛиц
	|		ПО втЖильцы.ФизЛицо = втФИОФизЛиц.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаАдресов.Здание,
	|	ТаблицаАдресов.НаселенныйПункт,
	|	ТаблицаАдресов.Улица,
	|	ТаблицаАдресов.Дом,
	|	ТаблицаАдресов.Корпус
	|ПОМЕСТИТЬ втАдреса
	|ИЗ
	|	&ТаблицаАдресов КАК ТаблицаАдресов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцыСФИО.Проживающий,
	|	втЖильцыСФИО.Фамилия,
	|	втЖильцыСФИО.Имя,
	|	втЖильцыСФИО.Отчество,
	|	ЕСТЬNULL(втАдреса.НаселенныйПункт, """") КАК НаселенныйПункт,
	|	ЕСТЬNULL(втАдреса.Улица, """") КАК Улица,
	|	ЕСТЬNULL(втАдреса.Дом, """") КАК Дом,
	|	ЕСТЬNULL(втАдреса.Корпус, """") КАК Корпус,
	|	втЖильцыСФИО.Квартира,
	|	втЖильцыСФИО.ТипПомещения,
	|	втЖильцыСФИО.ЛицевойСчет,
	|	втЖильцыСФИО.ИдентификаторЛицевогоСчета,
	|	втЖильцыСФИО.Помещение,
	|	втЖильцыСФИО.ФизЛицо
	|ПОМЕСТИТЬ втЖильцыСАдресами
	|ИЗ
	|	втЖильцыСФИО КАК втЖильцыСФИО
	|		ЛЕВОЕ СОЕДИНЕНИЕ втАдреса КАК втАдреса
	|		ПО втЖильцыСФИО.Здание = втАдреса.Здание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Помещение,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник
	|ПОМЕСТИТЬ втСобственникиПомещений
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(
	|			&ДатаКонца,
	|			(Помещение, Собственник) В
	|				(ВЫБРАТЬ
	|					втЖильцыСАдресами.Помещение,
	|					втЖильцыСАдресами.ФизЛицо
	|				ИЗ
	|					втЖильцыСАдресами КАК втЖильцыСАдресами)) КАК УПЖКХ_СобственникиПомещенийСрезПоследних
	|ГДЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцыСАдресами.Проживающий,
	|	втЖильцыСАдресами.Фамилия,
	|	втЖильцыСАдресами.Имя,
	|	втЖильцыСАдресами.Отчество,
	|	втЖильцыСАдресами.НаселенныйПункт,
	|	втЖильцыСАдресами.Улица,
	|	втЖильцыСАдресами.Дом,
	|	втЖильцыСАдресами.Корпус,
	|	втЖильцыСАдресами.Квартира,
	|	втЖильцыСАдресами.ТипПомещения,
	|	втЖильцыСАдресами.ЛицевойСчет,
	|	втЖильцыСАдресами.ИдентификаторЛицевогоСчета,
	|	втЖильцыСАдресами.Помещение,
	|	ВЫБОР
	|		КОГДА НЕ втСобственникиПомещений.Собственник ЕСТЬ NULL
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакСобственникаЖилья
	|ПОМЕСТИТЬ втИтоговаяТаблица
	|ИЗ
	|	втЖильцыСАдресами КАК втЖильцыСАдресами
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСобственникиПомещений КАК втСобственникиПомещений
	|		ПО втЖильцыСАдресами.Помещение = втСобственникиПомещений.Помещение
	|			И втЖильцыСАдресами.Проживающий.ФизЛицо = втСобственникиПомещений.Собственник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговаяТаблица.Проживающий КАК ЖилецИзБазы,
	|	втИтоговаяТаблица.Проживающий.ФизЛицо КАК ФизЛицо,
	|	втТаблицаДанныхИзФайла.Фамилия,
	|	втТаблицаДанныхИзФайла.Имя,
	|	втТаблицаДанныхИзФайла.Отчество,
	|	втТаблицаДанныхИзФайла.НаселенныйПункт,
	|	втТаблицаДанныхИзФайла.Улица,
	|	втТаблицаДанныхИзФайла.Дом,
	|	втТаблицаДанныхИзФайла.Корпус,
	|	втТаблицаДанныхИзФайла.Квартира,
	|	втИтоговаяТаблица.ТипПомещения,
	|	втИтоговаяТаблица.ЛицевойСчет,
	|	втИтоговаяТаблица.ИдентификаторЛицевогоСчета,
	|	втИтоговаяТаблица.Помещение,
	|	втИтоговаяТаблица.ПризнакСобственникаЖилья,
	|	втТаблицаДанныхИзФайла.ПризнакСоставаСемьи
	|ИЗ
	|	втТаблицаДанныхИзФайла КАК втТаблицаДанныхИзФайла
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втИтоговаяТаблица КАК втИтоговаяТаблица
	|		ПО втТаблицаДанныхИзФайла.Фамилия = втИтоговаяТаблица.Фамилия
	|			И втТаблицаДанныхИзФайла.Имя = втИтоговаяТаблица.Имя
	|			И втТаблицаДанныхИзФайла.Отчество = втИтоговаяТаблица.Отчество
	// Населенный пункт не будем учитывать при идентификации, т.к. не во всех файлах ОСЗН он заполнен.
	//|			И втТаблицаДанныхИзФайла.НаселенныйПункт = втИтоговаяТаблица.НаселенныйПункт
	|			И втТаблицаДанныхИзФайла.Улица = втИтоговаяТаблица.Улица
	|			И втТаблицаДанныхИзФайла.Дом = втИтоговаяТаблица.Дом
	|			И втТаблицаДанныхИзФайла.Корпус = втИтоговаяТаблица.Корпус
	|			И (ВЫБОР
	|				КОГДА втИтоговаяТаблица.ТипПомещения = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыПомещений.Дом)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ втТаблицаДанныхИзФайла.КвартираЧислом = втИтоговаяТаблица.Квартира
	|			КОНЕЦ)";
	
	Запрос.УстановитьПараметр("ТаблицаИзФайла", Объект.ЧувашскаяРеспублика_ДанныеЛьготников.Выгрузить());
	Запрос.УстановитьПараметр("ДатаКонца",      КонецМесяца(Объект.Период));
	Запрос.УстановитьПараметр("ТаблицаАдресов", ТаблицаАдресов);
	Запрос.УстановитьПараметр("ТаблицаФИО",     ТаблицаФИО);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции // ПолучитьТаблицуИдентифицированныхЖильцов()

&НаСервере
// Возвращает сформированное имя выгружаемого файла.
//
Функция ПолучитьНаименованиеФайлаНаСервере()
	
	НаименованиеФайла = "";
	
	НаименованиеФайла = НаименованиеФайла + Формат(ТекущаяДата(), "ДФ=yyMMdd") + "_" + СокрЛП(Объект.Организация.ИНН) + ".csv";
	
	Возврат НаименованиеФайла;
	
КонецФункции

&НаСервере
// Возвращает дату срока оплаты в текущем периоде за предыдущие начисления.
//
Функция ДатаСрокОплаты(ОтчетныйПериод = Неопределено)
	
	ОтчетныйПериод = ?(ОтчетныйПериод = Неопределено, Объект.Период, ОтчетныйПериод);
	
	Отказ = Ложь;
	
	Структура = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(КонецМесяца(ОтчетныйПериод), Объект.Организация, Отказ);
	Если Отказ Тогда
		ДатаСрокОплаты = НачалоМесяца(ОтчетныйПериод);
	Иначе
		ДатаСрокОплаты = НачалоМесяца(ОтчетныйПериод) + Структура.ЧислоВнесенияПлатежа * 60 * 60 * 24;
	КонецЕсли;
	
	Возврат ДатаСрокОплаты;
	
КонецФункции // ДатаСрокОплаты()

&НаСервереБезКонтекста
// Возвращает массив загружаемых файлов по переданным именам.
//
// Параметры:
//  МассивИменФайлов - Массив - массив, содержащий полные имена передаваемых файлов.
//
// Возвращаемое значение:
//  МассивПередаваемыхФайлов - Массив - массив описаний передаваемых файлов.
Функция ПодготовитьМассивПередаваемыхФайловДляЗагрузки(МассивИменФайлов)
	
	Возврат УПЖКХ_РаботаСФайламиСервер.ПодготовитьМассивПередаваемыхФайловДляЗагрузки(МассивИменФайлов);
	
КонецФункции // ПодготовитьМассивПередаваемыхФайловДляЗагрузки()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ВЫГРУЗКА ФАЙЛОВ

#Область ВыгрузкаФайлов

&НаСервере
// Выполняет подготовку и выгрузку файла.
//
// Параметры:
//  МассивВыгружаемыхФайлов - Массив - массив описаний передаваемых файлов.
//  ИмяФайла                - Строка - Краткое имя выгружаемого файла.
//  ИмяКаталога             - Строка - Имя каталога, в который будет выполняться выгрузка.
//
Процедура ВыгрузитьФайлВКаталогНаДискеПродолжениеНаСервере(МассивВыгружаемыхФайлов, ИмяФайла, ИмяКаталога)
	
	// Подготовка выгружаемого файла происходит на сервере в виде временного файла.
	// Сформированный временный файл передается на клиент и выгружается в выбранный пользователем каталог.
	
	// Формирование полного имени выгружаемого файла на клиенте.
	КаталогНаКлиенте        = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяКаталога);
	ПолноеИмяФайлаНаКлиенте = КаталогНаКлиенте + ИмяФайла;
	
	// Формирование полного имени временного файла формируемого на сервере.
	КаталогНаСервере        = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВременныхФайлов());
	ПолноеИмяФайлаНаСервере = КаталогНаСервере + ИмяФайла;
	
	Текст = Новый ТекстовыйДокумент;
	
	Если Объект.ЧувашскаяРеспублика_ОсновнаяЗапись.Количество() > 0 Тогда
		СтрокаОсновнойЗаписи = Объект.ЧувашскаяРеспублика_ОсновнаяЗапись[0];
		Текст.ДобавитьСтроку(СтрокаОсновнойЗаписи.ИдентификаторЗаписи + ";" + СтрокаОсновнойЗаписи.ИдентификаторКомпании + ";"
							+ СтрокаОсновнойЗаписи.ТипФайла + ";" + СтрокаОсновнойЗаписи.НачалоПериодаЗапроса + ";"
							+ СтрокаОсновнойЗаписи.КонецПериодаЗапроса + ";" + СтрокаОсновнойЗаписи.НазваниеКомпании);
	КонецЕсли;
	
	Для Каждого СтрокаЛьготника ИЗ Объект.ЧувашскаяРеспублика_ДанныеЛьготников Цикл
		Если ЗначениеЗаполнено(СтрокаЛьготника.ЖилецИзБазы) И ЗначениеЗаполнено(СтрокаЛьготника.ЛицевойСчет) Тогда
			Текст.ДобавитьСтроку(СтрокаЛьготника.ИдентификаторЗаписи + ";" + СтрокаЛьготника.ИД + ";"
								+ СтрокаЛьготника.ИдентификаторЛицевогоСчета + ";" + СтрокаЛьготника.СНИЛС + ";"
								+ СтрокаЛьготника.Фамилия + ";" + СтрокаЛьготника.Имя + ";"
								+ СтрокаЛьготника.Отчество + ";" + СтрокаЛьготника.ДатаРождения + ";"
								+ СтрокаЛьготника.Пол + ";" + СтрокаЛьготника.ИдентификаторКомпании + ";"
								+ СтрокаЛьготника.НазваниеКомпании + ";" + СтрокаЛьготника.КодПоАдресномуКлассификатору + ";"
								+ СтрокаЛьготника.АдминистративныйРайон + ";" + СтрокаЛьготника.ТипНаселенногоПункта + ";"
								+ СтрокаЛьготника.НаселенныйПункт + ";" + СтрокаЛьготника.ТипУлицы + ";"
								+ СтрокаЛьготника.Улица + ";" + СтрокаЛьготника.Дом + ";"
								+ СтрокаЛьготника.Корпус + ";" + СтрокаЛьготника.Квартира + ";"
								+ СтрокаЛьготника.ПаспортСерия + ";" + СтрокаЛьготника.ПаспортНомер + ";"
								+ СтрокаЛьготника.ПаспортДатаВыдачи + ";" + СтрокаЛьготника.ПризнакСобственникаЖилья + ";"
								+ СтрокаЛьготника.ПризнакСоставаСемьи);
								
			НайденныеСтрокаХарактеристикиЖилья = Объект.ЧувашскаяРеспублика_СведенияОГражданахИХарактеристикахЖилья.НайтиСтроки(Новый Структура("ЛицевойСчет", СтрокаЛьготника.ЛицевойСчет));
			Если НайденныеСтрокаХарактеристикиЖилья.Количество() > 0 Тогда
				
				НайденнаяСтрокаХарактеристикиЖилья = НайденныеСтрокаХарактеристикиЖилья[0];
				Текст.ДобавитьСтроку(НайденнаяСтрокаХарактеристикиЖилья.ИдентификаторЗаписи + ";" + НайденнаяСтрокаХарактеристикиЖилья.ИД + ";"
									+ НайденнаяСтрокаХарактеристикиЖилья.ИдентификаторЛицевогоСчета + ";" + НайденнаяСтрокаХарактеристикиЖилья.ИдентификаторКомпании + ";"
									+ НайденнаяСтрокаХарактеристикиЖилья.НазваниеКомпании + ";" + НайденнаяСтрокаХарактеристикиЖилья.КодПоАдресномуКлассификатору + ";"
									+ НайденнаяСтрокаХарактеристикиЖилья.АдминистративныйРайон + ";" + НайденнаяСтрокаХарактеристикиЖилья.ТипНаселенногоПункта + ";"
									+ НайденнаяСтрокаХарактеристикиЖилья.НаселенныйПункт + ";" + НайденнаяСтрокаХарактеристикиЖилья.ТипУлицы + ";"
									+ НайденнаяСтрокаХарактеристикиЖилья.Улица + ";" + НайденнаяСтрокаХарактеристикиЖилья.Дом + ";"
									+ НайденнаяСтрокаХарактеристикиЖилья.Корпус + ";" + НайденнаяСтрокаХарактеристикиЖилья.Квартира + ";"
									+ НайденнаяСтрокаХарактеристикиЖилья.ТипСобственности + ";" + Формат(НайденнаяСтрокаХарактеристикиЖилья.ОбщаяПлощадь, "ЧРД=.; ЧГ=0") + ";"
									+ Формат(НайденнаяСтрокаХарактеристикиЖилья.ЖилаяПлощадь, "ЧРД=.; ЧГ=0") + ";" + Формат(НайденнаяСтрокаХарактеристикиЖилья.КоличествоПроживающих, "ЧН=0; ЧГ=0") + ";"
									+ Формат(НайденнаяСтрокаХарактеристикиЖилья.КоличествоПроживающихЧленовСемьи, "ЧН=0; ЧГ=0") + ";" + Формат(НайденнаяСтрокаХарактеристикиЖилья.СуммаОплатыЗаЖКУ, "ЧРД=.; ЧГ=0") + ";"
									+ Формат(НайденнаяСтрокаХарактеристикиЖилья.СуммаПени, "ЧРД=.; ЧГ=0") + ";" + Формат(НайденнаяСтрокаХарактеристикиЖилья.СуммаЗадолженностиЗаЖКУ, "ЧРД=.; ЧГ=0") + ";"
									+ НайденнаяСтрокаХарактеристикиЖилья.КоличествоМесяцевЗадолженностиЗаЖКУ + ";" + Формат(НайденнаяСтрокаХарактеристикиЖилья.ВнесеннаяОплатаЗадолженностиЗаЖКУ, "ЧРД=.; ЧГ=0") + ";"
									+ НайденнаяСтрокаХарактеристикиЖилья.КодОшибки + ";" + НайденнаяСтрокаХарактеристикиЖилья.КомментарийКомпании + ";"
									+ Формат(НайденнаяСтрокаХарактеристикиЖилья.РазмерЗемельногоУчастка, "ЧРД=.; ЧГ=0") + ";" + НайденнаяСтрокаХарактеристикиЖилья.КоличествоКомнат);
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ЛицевойСчет", СтрокаЛьготника.ЛицевойСчет);
			СтруктураПоиска.Вставить("ЖилецИзБазы", СтрокаЛьготника.ЖилецИзБазы);
			
			НайденныеСтрокиСоставаСемьи = Объект.ЧувашскаяРеспублика_СведенияОСоставеСемьи.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаСоставаСемьи ИЗ НайденныеСтрокиСоставаСемьи Цикл
				Текст.ДобавитьСтроку(СтрокаСоставаСемьи.ИдентификаторЗаписи + ";" + СтрокаСоставаСемьи.ДатаРождения + ";"
									+ СтрокаСоставаСемьи.Пол + ";" + СтрокаСоставаСемьи.СтепеньРодства + ";"
									+ СтрокаСоставаСемьи.ПризнакСобственникаЖилья + ";" + СтрокаСоставаСемьи.ПризнакЛьготника + ";"
									+ СтрокаСоставаСемьи.Фамилия + ";" + СтрокаСоставаСемьи.Имя + ";"
									+ СтрокаСоставаСемьи.Отчество);
			КонецЦикла;
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("ЛицевойСчет", СтрокаЛьготника.ЛицевойСчет);
			
			НайденныеСтрокиУслуг = Объект.ЧувашскаяРеспублика_СведенияОбУслугахЖКХ.НайтиСтроки(СтруктураПоиска);
			Для Каждого СтрокаУслуги ИЗ НайденныеСтрокиУслуг Цикл
				Текст.ДобавитьСтроку(СтрокаУслуги.ИдентификаторЗаписи + ";" + СтрокаУслуги.КодУслугиЖКХ + ";"
									+ СтрокаУслуги.ЕдиницаИзмерения + ";" + Формат(СтрокаУслуги.ТарифНаЖКУ, "ЧРД=.; ЧГ=0") + ";"
									+ Формат(СтрокаУслуги.НормативПотребления, "ЧРД=.; ЧГ=0") + ";" + Формат(СтрокаУслуги.ОбъемУслуги, "ЧРД=.; ЧГ=0") + ";"
									+ ?(СтрокаУслуги.КодУслугиЖКХ = "1000" ИЛИ СтрокаУслуги.КодУслугиЖКХ = "2000", "1", СтрокаУслуги.ОбъемУслугиОпределенПо) + ";" + Формат(СтрокаУслуги.Начислено, "ЧРД=.; ЧГ=0") + ";"
									+ Формат(СтрокаУслуги.ПерерасчетСуммы, "ЧРД=.; ЧГ=0") + ";" + СтрокаУслуги.НачалоПериодаПерерасчета + ";"
									+ СтрокаУслуги.КонецПериодаПерерасчета + ";" + Формат(СтрокаУслуги.НачисленоПени, "ЧРД=.; ЧГ=0") + ";"
									+ Формат(СтрокаУслуги.Оплачено, "ЧРД=.; ЧГ=0") + ";" + СтрокаУслуги.ОтметкаОбОтсутствииНарушенийПорядкаОплаты);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Текст.Записать(ПолноеИмяФайлаНаСервере, ?(Объект.КодировкаТекстовогоФайла, КодировкаТекста.ANSI, КодировкаТекста.OEM));
	
	СоответствиеИменФайловИАдресов = Новый Соответствие;
	СоответствиеИменФайловИАдресов.Вставить(ПолноеИмяФайлаНаКлиенте, ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПолноеИмяФайлаНаСервере), Новый УникальныйИдентификатор));
	
	МассивВыгружаемыхФайлов = УПЖКХ_РаботаСФайламиСервер.ПолучитьМассивПередаваемыхФайлов(СоответствиеИменФайловИАдресов);
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	ТекРабДата = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	Объект.Период = ТекРабДата;
	
	ВосстановитьНастройки();
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиенте();
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "КомандаНастройка".
Процедура КомандаНастройка(Команда)
	
	АдресНастроекВХранилище = ПоместитьНастройкиВХранилище();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаНастройкаЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты.Форма.ЧувашскаяРеспублика_ФормаНастройки", Новый Структура("АдресНастроекВХранилище", АдресНастроекВХранилище), , , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата опроса команды "КомандаНастройка".
Процедура КомандаНастройкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		ПолучитьНастройкиИзХранилища(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаЗаполнить".
Процедура КомандаЗаполнить(Команда)
	
	ТекстОшибки = ПроверкаУсловийДляЗаполненияТаблиц();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаЗагрузитьОбработкаЗагрузки", ЭтаФорма);
	
	Если РасширениеПодключено Тогда
		
		МассивИменФайлов = Новый Массив();
		МассивИменФайлов.Добавить(ИмяФайлаЗагрузки);
		
		МассивЗагружаемыхФайлов = ПодготовитьМассивПередаваемыхФайловДляЗагрузки(МассивИменФайлов);
		
		Если МассивЗагружаемыхФайлов = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		СоответствиеИмениИАдреса = Новый Соответствие();
		СоответствиеИмениИАдреса.Вставить("",);
		МассивЗагружаемыхФайлов = УПЖКХ_РаботаСФайламиСервер.ПолучитьМассивПередаваемыхФайлов(СоответствиеИмениИАдреса);
	КонецЕсли;
	
	УПЖКХ_РаботаСФайламиКлиент.ЗагрузитьФайл(РасширениеПодключено, ОписаниеОповещения, МассивЗагружаемыхФайлов);
	
КонецПроцедуры // КомандаЗаполнить()

&НаКлиенте
// Обработчик результата опроса команды "КомандаЗаполнитьВсе".
Процедура КомандаЗаполнитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьТаблицыНаСервере(ДополнительныеПараметры.МассивОписанийФайлов);
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьВсеЗавершение()

&НаКлиенте
// Обработчик команды "КомандаВыгрузить".
Процедура КомандаВыгрузить(Команда)
	
	Если РасширениеПодключено И ПустаяСтрока(ИмяКаталогаЗагрузки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указан каталог загрузки/выгрузки!");
		Возврат;
	КонецЕсли;
	
	Если Объект.ЧувашскаяРеспублика_ДанныеЛьготников.Количество() = 0 Тогда
		ПоказатьПредупреждение(, "Не заполнена таблица ""Основные записи о льготниках"". Для того, чтобы выполнить выгрузку данных в файл, обязательно необходимо заполнить данную таблицу.");
		Возврат;
	КонецЕсли;
	
	ИмяФайла = ПолучитьНаименованиеФайлаНаСервере();
	
	ИмяКаталога = ИмяКаталогаЗагрузки;
	
	ОбработчикЗавершения = Новый ОписаниеОповещения("ОбработатьПослеВыгрузки", ЭтаФорма, Новый Структура);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИмяФайла",             ИмяФайла);
	ДополнительныеПараметры.Вставить("ИмяКаталога",          ИмяКаталога);
	ДополнительныеПараметры.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);
	
	Если РасширениеПодключено Тогда
		
		// Проверяем каталог выгрузки на существование.
		КаталогВыгрузки = Новый Файл(ИмяКаталогаЗагрузки);
		
		ДополнительныеПараметры.Вставить("КаталогВыгрузки", КаталогВыгрузки);
		
		КаталогВыгрузки.НачатьПроверкуСуществования(Новый ОписаниеОповещения("КаталогВыгрузкиСуществуетЗавершение", ЭтотОбъект, ДополнительныеПараметры));
		
		Возврат;
		
	Иначе
		
		ИмяКаталога = "";
		
		МассивВыгружаемыхФайлов = Новый Массив;
		
		ВыгрузитьФайлВКаталогНаДискеПродолжениеНаСервере(МассивВыгружаемыхФайлов, ИмяФайла, ИмяКаталога);
		
		УПЖКХ_РаботаСФайламиКлиент.ВыгрузитьВФайл(РасширениеПодключено, МассивВыгружаемыхФайлов, ОбработчикЗавершения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик завершения работы процедуры "КомандаЗагрузить"
//
Процедура КомандаЗагрузитьОбработкаЗагрузки(МассивОписанийФайлов, ДополнительныеПараметры) Экспорт
	
	Если МассивОписанийФайлов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ЧувашскаяРеспублика_ДанныеЛьготников.Количество() > 0
	 ИЛИ Объект.ЧувашскаяРеспублика_СведенияОГражданахИХарактеристикахЖилья.Количество() > 0
	 ИЛИ Объект.ЧувашскаяРеспублика_СведенияОСоставеСемьи.Количество() > 0
	 ИЛИ Объект.ЧувашскаяРеспублика_СведенияОбУслугахЖКХ.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("КомандаЗаполнитьЗавершение", ЭтаФорма,
											  Новый Структура("МассивОписанийФайлов", МассивОписанийФайлов));
		ТекстВопроса = "Перед заполнением все таблицы выгрузки будут очищены. Продолжить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьТаблицыНаСервере(МассивОписанийФайлов);
	КонецЕсли;
	
КонецПроцедуры // КомандаЗагрузитьОбработкаЗагрузки()

&НаКлиенте
// Процедура - обработчик завершения работы процедуры "НачатьПроверкуСуществования".
//
Процедура КаталогВыгрузкиСуществуетЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	КаталогВыгрузки = ДополнительныеПараметры.КаталогВыгрузки;
	
	Если Не Существует Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран каталог файла выгрузки!");
		Возврат;
	КонецЕсли;
	
	КаталогВыгрузки.НачатьПроверкуЭтоКаталог(Новый ОписаниеОповещения("КаталогВыгрузкиЭтоКаталогЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик результата работы процедуры "НачатьПроверкуЭтоКаталог".
//
Процедура КаталогВыгрузкиЭтоКаталогЗавершение(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Если Не ЭтоКаталог Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран каталог файла выгрузки!");
		Возврат;
	КонецЕсли;
	
	МассивВыгружаемыхФайлов = Новый Массив;
	
	ВыгрузитьФайлВКаталогНаДискеПродолжениеНаСервере(МассивВыгружаемыхФайлов, ДополнительныеПараметры.ИмяФайла, ДополнительныеПараметры.ИмяКаталога);
	
	УПЖКХ_РаботаСФайламиКлиент.ВыгрузитьВФайл(РасширениеПодключено, МассивВыгружаемыхФайлов, ДополнительныеПараметры.ОбработчикЗавершения);
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик, вызываемый после завершения выгрузки файлов
// для вывода пользователю сообщения с итогами выполненной выгрузки.
//
Процедура ОбработатьПослеВыгрузки(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если Не ПомещенныеФайлы = Неопределено И Не ПомещенныеФайлы.Количество() = 0 Тогда
		
		ТекстСообщения = "Выгрузка в файл завершена!
						|В выгруженный файл попали записи с заполненными полями ""Жилец из базы"" и ""Лицевой счет"".";
		
		Для Каждого Файл Из ПомещенныеФайлы Цикл
			ТекстСообщения = ТекстСообщения + Символы.ПС + Файл.Имя;
		КонецЦикла;
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось выгрузить файл(ы)!");
	КонецЕсли;
	
КонецПроцедуры // ОбработатьПослеВыгрузки()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Процедура - обработчик события "Очистка" поля ввода "КодировкаТекстовогоФайла".
//
Процедура КодировкаТекстовогоФайлаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

////////////////////////
// Диалог выбора файла

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Имя каталога".
//
Процедура ИмяКаталогаЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_РаботаСФайламиКлиент.ВыбратьФайл(ЭтаФорма, "Файл данных (*.csv)|*.csv", "csv", , ИмяФайлаЗагрузки);
	
КонецПроцедуры


&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Имя каталога".
//
Процедура ИмяКаталогаЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УПЖКХ_РаботаСФайламиКлиент.ОткрытиеФайлаКаталога(ИмяФайлаЗагрузки);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик результата запуска приложения
//
Процедура ИмяКаталогаЗагрузкиОткрытиеЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	// Заглушка, т.к. в НачатьЗапускПриложения первый параметр обязательный.
	ЭтаПеременнаяЧтобыНеРугаласьПроверкаКонфигурацииНаПустойОбработчик = Неопределено;
	
КонецПроцедуры

////////////////////////
// Период

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПериодСтрокой".
Процедура ПериодСтрокойПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Модифицированность);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ПериодСтрокой".
Процедура ПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Регулирование" поля "ПериодСтрокой".
Процедура ПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Направление,
														Модифицированность);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "ПериодСтрокой".
Процедура ПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "ПериодСтрокой".
Процедура ПериодСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик заверешения работы процедуры "ДиалогВыбораФайла.Показать".
//
Процедура ВыбратьФайлЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ИмяФайлаЗагрузки    = ДиалогВыбораФайла.ПолноеИмяФайла;
		ИмяКаталогаЗагрузки = ДиалогВыбораФайла.Каталог;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФорм

&НаКлиентеНаСервереБезКонтекста
// Процедура управляет внешним видом формы.
//
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ГруппаШапкаСправа.Видимость = Форма.РасширениеПодключено;
	
КонецПроцедуры // УправлениеФормой()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ФАЙЛАМИ

#Область СлужебныеПроцедурыРаботыСФайлами

&НаКлиенте
// Определяет подключено ли расширение для работы с файлами.
Процедура ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиенте()
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиентеЗавершение", ЭтотОбъект);
	
	УПЖКХ_РаботаСФайламиКлиент.ОпределитьВидВзаимодействияСФайловойСистемой(ОповещениеЗавершения);
	
КонецПроцедуры // ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиентеЗавершение()

&НаКлиенте
// Обработчик процедуры определяющей подключено расширение работы с файлами или нет.
Процедура ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиентеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		РасширениеПодключено = Результат;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти
