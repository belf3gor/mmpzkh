
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервере
// Промежуточная функция на сервере, предназначенная для обращения к функции модуля менеждера 
// справочника "Настройки учета по услугам капитального ремонта".
//
Функция ПолучитьЭлементСправочникаПоОрганизацииНаСервере(Организация)
	
	Возврат Справочники.УПЖКХ_НастройкиУчетаКапремонта.ПолучитьЭлементСправочникаПоОрганизации(Организация);
	
КонецФункции // ПолучитьЭлементСправочникаПоОрганизацииНаСервере()

&НаСервере
// Устанавливает видимость элементов формы.
//
Процедура УстановитьВидимость()
	
	Если мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет Тогда
		Элементы.СпособВыгрузкиДанныхКапРемонт.Видимость = Истина;
		Элементы.ГруппаУслугиКапРемонта.Видимость        = Истина;
	Иначе
		Элементы.СпособВыгрузкиДанныхКапРемонт.Видимость = Ложь;
		Элементы.ГруппаУслугиКапРемонта.Видимость        = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура предназначена для заполнения сведения о ведение раздельного учета по капремонту в организации.
//
Процедура ЗаполнитьРеквизитыОбработкиПоКапремонту()
	
	мСтруктураНастроекКапРемонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Объект.Организация, Истина);
	
КонецПроцедуры // ЗаполнитьРеквизитыОтчетаПоКапремонту()

&НаСервере
// Обновляет строку с представлением услуг капитального ремонта.
//
Процедура ОбновитьСписокУслугКапРемонт()
	
	СтрокаСоСпискомУслуг = "";
	
	Для Каждого ТекУслуга ИЗ мСтруктураНастроекКапРемонта.СписокУслуг Цикл
		СтрокаСоСпискомУслуг = СтрокаСоСпискомУслуг + ?(ПустаяСтрока(СтрокаСоСпискомУслуг), ТекУслуга, ", " + ТекУслуга);
	КонецЦикла;
	
	СтрокаСоСпискомУслуг = ?(ПустаяСтрока(СтрокаСоСпискомУслуг), "Не указаны.", СтрокаСоСпискомУслуг);
	
	Элементы.НадписьСписокУслугКапРемонт.Заголовок = СтрокаСоСпискомУслуг;
	
КонецПроцедуры // ОбновитьСписокУслугКапРемонт()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// СОХРАНЯЕМЫЕ НАСТРОЙКИ

#Область РаботаСНастройками

&НаСервере
// Процедура восстановления настроек.
Процедура ВосстановитьНастройки()
	
	СтруктураПараметров = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("АрхангельскаяОбласть_ВыгрузкаВОСЗН", "ПараметрыВыгрузки");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		СтруктураПараметров.Свойство("ИмяФайлаЗагрузки",              ИмяФайлаЗагрузки);
		СтруктураПараметров.Свойство("ИмяКаталогаЗагрузки",           ИмяКаталогаЗагрузки);
		СтруктураПараметров.Свойство("Организация",                   Объект.Организация);
		СтруктураПараметров.Свойство("СпособВыгрузкиДанныхКапРемонт", Объект.СпособВыгрузкиДанныхКапРемонт);
		
		врТаблицаЛКВОСЗН                = Новый ТаблицаЗначений;
		врТаблицаНаименованийЛьготВОСЗН = Новый ТаблицаЗначений;
		врТаблицаСоответствияЛиУВОСЗН   = Новый ТаблицаЗначений;
		
		СтруктураПараметров.Свойство("АрхангельскаяОбласть_СоответствиеЛьготныхКатегорий", врТаблицаЛКВОСЗН);
		Если НЕ врТаблицаЛКВОСЗН = Неопределено Тогда
			Объект.АрхангельскаяОбласть_СоответствиеЛьготныхКатегорий.Загрузить(врТаблицаЛКВОСЗН);
		КонецЕсли;
		
		СтруктураПараметров.Свойство("АрхангельскаяОбласть_ТаблицаНаименованийЛьгот", врТаблицаНаименованийЛьготВОСЗН);
		Если НЕ врТаблицаНаименованийЛьготВОСЗН = Неопределено Тогда
			Объект.АрхангельскаяОбласть_ТаблицаНаименованийЛьгот.Загрузить(врТаблицаНаименованийЛьготВОСЗН);
		КонецЕсли;
		
		СтруктураПараметров.Свойство("АрхангельскаяОбласть_ТаблицаСоответствияЛьготИУслуг", врТаблицаСоответствияЛиУВОСЗН);
		Если НЕ врТаблицаСоответствияЛиУВОСЗН = Неопределено Тогда
			Объект.АрхангельскаяОбласть_ТаблицаСоответствияЛьготИУслуг.Загрузить(врТаблицаСоответствияЛиУВОСЗН);
		КонецЕсли;
		
		Если Объект.Организация.Пустая() Тогда
			Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьОсновнуюОрганизацию();
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.СпособВыгрузкиДанныхКапРемонт) Тогда
		Объект.СпособВыгрузкиДанныхКапРемонт = "по всем услугам";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура сохранения настроек.
Процедура СохранитьНастройки()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяФайлаЗагрузки",    ИмяФайлаЗагрузки);
	СтруктураПараметров.Вставить("ИмяКаталогаЗагрузки", ИмяКаталогаЗагрузки);
	
	СтруктураПараметров.Вставить("АрхангельскаяОбласть_СоответствиеЛьготныхКатегорий",  Объект.АрхангельскаяОбласть_СоответствиеЛьготныхКатегорий.Выгрузить());
	СтруктураПараметров.Вставить("АрхангельскаяОбласть_ТаблицаНаименованийЛьгот",       Объект.АрхангельскаяОбласть_ТаблицаНаименованийЛьгот.Выгрузить());
	СтруктураПараметров.Вставить("АрхангельскаяОбласть_ТаблицаСоответствияЛьготИУслуг", Объект.АрхангельскаяОбласть_ТаблицаСоответствияЛьготИУслуг.Выгрузить());
	СтруктураПараметров.Вставить("Организация",                                         Объект.Организация);
	СтруктураПараметров.Вставить("СпособВыгрузкиДанныхКапРемонт",                       Объект.СпособВыгрузкиДанныхКапРемонт);
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("АрхангельскаяОбласть_ВыгрузкаВОСЗН", "ПараметрыВыгрузки", СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// РАБОТА С ВРЕМЕННЫМ ХРАНИЛИЩЕМ

#Область РаботаСВременнымХранилищем

&НаСервере
// Помещает настройки во временное хранилище.
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ИмяФайлаЗагрузки",                                    ИмяФайлаЗагрузки);
	СтруктураНастроек.Вставить("АрхангельскаяОбласть_СоответствиеЛьготныхКатегорий",  Объект.АрхангельскаяОбласть_СоответствиеЛьготныхКатегорий.Выгрузить());
	СтруктураНастроек.Вставить("АрхангельскаяОбласть_ТаблицаНаименованийЛьгот",       Объект.АрхангельскаяОбласть_ТаблицаНаименованийЛьгот.Выгрузить());
	СтруктураНастроек.Вставить("АрхангельскаяОбласть_ТаблицаСоответствияЛьготИУслуг", Объект.АрхангельскаяОбласть_ТаблицаСоответствияЛьготИУслуг.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
// Получает настройки из временного хранилища.
Функция ПолучитьНастройкиИзХранилища(АдресНастроекВХранилище)
	
	СтруктураНастроек = ПолучитьИзВременногоХранилища(АдресНастроекВХранилище);
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		
		Если СтруктураНастроек.Свойство("ИмяФайлаЗагрузки") Тогда
			ИмяФайлаЗагрузки = СтруктураНастроек.ИмяФайлаЗагрузки;
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("АрхангельскаяОбласть_СоответствиеЛьготныхКатегорий") Тогда
			Объект.АрхангельскаяОбласть_СоответствиеЛьготныхКатегорий.Загрузить(СтруктураНастроек.АрхангельскаяОбласть_СоответствиеЛьготныхКатегорий);
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("АрхангельскаяОбласть_ТаблицаНаименованийЛьгот") Тогда
			Объект.АрхангельскаяОбласть_ТаблицаНаименованийЛьгот.Загрузить(СтруктураНастроек.АрхангельскаяОбласть_ТаблицаНаименованийЛьгот);
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("АрхангельскаяОбласть_ТаблицаСоответствияЛьготИУслуг") Тогда
			Объект.АрхангельскаяОбласть_ТаблицаСоответствияЛьготИУслуг.Загрузить(СтруктураНастроек.АрхангельскаяОбласть_ТаблицаСоответствияЛьготИУслуг);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ДАННЫХ

#Область ЗаполнениеДанных

&НаКлиенте
// Проверяет наличие всех необходимых данных для заполнения таблиц выгрузки.
//
Функция ПроверкаУсловийДляЗаполненияТаблиц()
	
	ТекстОшибки = "";
	
	Если НЕ ЗначениеЗаполнено(Объект.Период) Тогда
		ТекстОшибки = ТекстОшибки + "Не указан период выгрузки!";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не указана организация!", "Не указан организация!");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяФайлаЗагрузки) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не выбран файл загрузки!", "Не выбран файл загрузки!");
	КонецЕсли;
	
	Если Объект.АрхангельскаяОбласть_СоответствиеЛьготныхКатегорий.Количество() = 0 Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не указаны соответствия льготных категорий на форме настройки!", "Не указаны соответствия льготных категорий на форме настройки!");
	КонецЕсли;
	
	Если Объект.АрхангельскаяОбласть_ТаблицаСоответствияЛьготИУслуг.Количество() = 0 Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не указаны соответствия наименований льгот и услуг на форме настройки!", "Не указаны соответствия наименований льгот и услуг на форме настройки!");
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции // ПроверкаУсловийДляЗаполненияТаблиц

&НаСервере
// Процедура заполнения всех данных.
Процедура ЗаполнитьНаСервере(ПутьКФайлу)
	
	// Запись временных данных во временный файл.
	врДанныеФайла = ПолучитьИзВременногоХранилища(ПутьКФайлу);
	ВременныйФайл = ПолучитьИмяВременногоФайла("DBF");
	
	// Для чтения *.dbf формата урежем имя временного файла.
	ФайлДБФ = Новый Файл(ВременныйФайл);
	СтароеИмяФайла = ФайлДБФ.ИмяБезРасширения + ".DBF";
	НовоеИмяФайла = Лев(ФайлДБФ.ИмяБезРасширения, 8) + ".DBF";
	ВременныйФайл = СтрЗаменить(ФайлДБФ.ПолноеИмя, СтароеИмяФайла, НовоеИмяФайла);
	
	врДанныеФайла.Записать(ВременныйФайл);
	
	Кодировка = КодировкаXBase.OEM;
	
	ТаблицаДанныхФайла             = Объект.АрхангельскаяОбласть_ЛьготникиДляЗагрузки.Выгрузить();
	ТаблицаСоответствияЛК          = Объект.АрхангельскаяОбласть_СоответствиеЛьготныхКатегорий.Выгрузить();
	ТаблицаСоответствияЛьготИУслуг = Объект.АрхангельскаяОбласть_ТаблицаСоответствияЛьготИУслуг.Выгрузить();
	
	ОбработкаОбъект = ДанныеФормыВЗначение(Объект, Тип("ОбработкаОбъект.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты"));
	ОбработкаОбъект.СформироватьТаблицуДанныхАрхангельскойОбласти(ТаблицаДанныхФайла, ТаблицаСоответствияЛК, ТаблицаСоответствияЛьготИУслуг, Кодировка, ВременныйФайл, мСтруктураНастроекКапРемонта);
	ЗначениеВДанныеФормы(ОбработкаОбъект, Объект);
	
	Объект.АрхангельскаяОбласть_ЛьготникиДляЗагрузки.Загрузить(ТаблицаДанныхФайла);
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ВЫГРУЗКА ФАЙЛОВ

#Область ВыгрузкаФайлов

&НаКлиенте
// Предназначена для выгрузки данных из таблицы данных в dbf-файл.
//
Процедура ВыгрузитьДанныеВФайлАрхангельск()
	
	Если Объект.АрхангельскаяОбласть_ЛьготникиДляЗагрузки.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В таблице выгружаемых данных отсутствуют данные для выгрузки в dbf-файл.");
		Возврат;
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
	
	ФайлВыгрузки           = Новый XBase;
	ФайлВыгрузки.Кодировка = КодировкаXBase.OEM;
	ФайлВыгрузки.Поля.Добавить("PKU",        "S", "11");
	ФайлВыгрузки.Поля.Добавить("FAMIL",      "S", "50");
	ФайлВыгрузки.Поля.Добавить("IMJA",       "S", "50");
	ФайлВыгрузки.Поля.Добавить("OTCH",       "S", "50");
	ФайлВыгрузки.Поля.Добавить("NNASP",      "S", "50");
	ФайлВыгрузки.Поля.Добавить("NYLIC",      "S", "50");
	ФайлВыгрузки.Поля.Добавить("NDOM",       "S", "10");
	ФайлВыгрузки.Поля.Добавить("NKORP",      "S", "10");
	ФайлВыгрузки.Поля.Добавить("NKW",        "S", "10");
	ФайлВыгрузки.Поля.Добавить("NKOD_PU1",   "S", "50");
	ФайлВыгрузки.Поля.Добавить("DATS",       "D");
	ФайлВыгрузки.Поля.Добавить("DATPO",      "D");
	ФайлВыгрузки.Поля.Добавить("ROPL",       "N", "6", "2");
	ФайлВыгрузки.Поля.Добавить("NKOD_LGT1",  "S", "50");
	ФайлВыгрузки.Поля.Добавить("SUML1",      "N", "12", "2");
	ФайлВыгрузки.Поля.Добавить("DATEPRL1",   "D");
	ФайлВыгрузки.Поля.Добавить("NKOD_PU2",   "S", "50");
	ФайлВыгрузки.Поля.Добавить("NKOD_LGT2",  "S", "50");
	ФайлВыгрузки.Поля.Добавить("SUML2",      "N", "12", "2");
	ФайлВыгрузки.Поля.Добавить("DATEPRL2",   "D");
	ФайлВыгрузки.Поля.Добавить("NKOD_PU3",   "S", "50");
	ФайлВыгрузки.Поля.Добавить("NKOD_LGT3",  "S", "50");
	ФайлВыгрузки.Поля.Добавить("SUML3",      "N", "12", "2");
	ФайлВыгрузки.Поля.Добавить("DATEPRL3",   "D");
	ФайлВыгрузки.Поля.Добавить("NKOD_PU4",   "S", "50");
	ФайлВыгрузки.Поля.Добавить("NKOD_LGT4",  "S", "50");
	ФайлВыгрузки.Поля.Добавить("SUML4",      "N", "12", "2");
	ФайлВыгрузки.Поля.Добавить("DATEPRL4",   "D");
	ФайлВыгрузки.Поля.Добавить("DOLG",       "S", "1");
	ФайлВыгрузки.Поля.Добавить("NSUD",       "S", "50");
	ФайлВыгрузки.Поля.Добавить("DATRESH",    "D");
	ФайлВыгрузки.Поля.Добавить("DATVST",     "D");
	ФайлВыгрузки.Поля.Добавить("NDELO",      "S", "10");
	ФайлВыгрузки.Поля.Добавить("SUMDOLG",    "N", "12", "2");
	ФайлВыгрузки.Поля.Добавить("PERDOLG",    "S", "25");
	ФайлВыгрузки.Поля.Добавить("DATZAYV_1",  "D");
	ФайлВыгрузки.Поля.Добавить("DATUZAYV_1", "D");
	ФайлВыгрузки.Поля.Добавить("DATZAYV_2",  "D");
	ФайлВыгрузки.Поля.Добавить("DATUZAYV_2", "D");
	ФайлВыгрузки.Поля.Добавить("DATZAYV_3",  "D");
	ФайлВыгрузки.Поля.Добавить("DATUZAYV_3", "D");
	ФайлВыгрузки.Поля.Добавить("DATZAYV_4",  "D");
	ФайлВыгрузки.Поля.Добавить("DATUZAYV_4", "D");
	
	ФайлВыгрузки.СоздатьФайл(ИмяКаталогаЗагрузки + "OUT_FILE.DBF",); 
	ФайлВыгрузки.АвтоСохранение = Истина;
	
	Для каждого ТекСтрока Из Объект.АрхангельскаяОбласть_ЛьготникиДляЗагрузки Цикл
		Если ТекСтрока.SUML1 > 0 ИЛИ ТекСтрока.SUML2 > 0 ИЛИ ТекСтрока.SUML3 > 0 ИЛИ ТекСтрока.SUML4 > 0 Тогда
			ФайлВыгрузки.Добавить();
			ЗаполнитьЗначенияСвойств(ФайлВыгрузки, ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	ФайлВыгрузки.ЗакрытьФайл();
	
	Текст = "Выгрузка в файл ""OUT_FILE.DBF"" завершена!";
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(Текст);
	
	#КонецЕсли
	
КонецПроцедуры // ВыгрузитьДанныеВФайлАрхангельск()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	Объект.Период = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	
	ВосстановитьНастройки();
	
	ЗаполнитьРеквизитыОбработкиПоКапремонту();
	
	Если мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет Тогда
		ОбновитьСписокУслугКапРемонт();
	Иначе
		Объект.СпособВыгрузкиДанныхКапРемонт = "по всем услугам";
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписаныНастройкиУчетаКапремонта"
		И Параметр = Объект.Организация Тогда
		ЗаполнитьРеквизитыОбработкиПоКапремонту();
		Если мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет Тогда
			ОбновитьСписокУслугКапРемонт();
		Иначе
			Объект.СпособВыгрузкиДанныхКапРемонт = "по всем услугам";
		КонецЕсли;
		УстановитьВидимость();
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "КомандаНастройка".
Процедура КомандаНастройка(Команда)
	
	АдресНастроекВХранилище = ПоместитьНастройкиВХранилище();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаНастройкаЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты.Форма.АрхангельскаяОбласть_ФормаНастройки", Новый Структура("АдресНастроекВХранилище", АдресНастроекВХранилище), , , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата опроса команды "КомандаНастройка".
Процедура КомандаНастройкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		ПолучитьНастройкиИзХранилища(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаЗаполнитьТаблицуВыгрузки".
Процедура КомандаЗаполнитьТаблицуВыгрузки(Команда)
	
	ТекстОшибки = ПроверкаУсловийДляЗаполненияТаблиц();
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ФайлНаДиске = Новый Файл(ИмяФайлаЗагрузки);
	ФайлНаДиске.НачатьПроверкуСуществования(Новый ОписаниеОповещения("КомандаЗаполнитьТаблицуВыгрузкиЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьТаблицуВыгрузкиЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	Если НЕ Существует Тогда
		ПоказатьПредупреждение(, "Файл не найден!");
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = "";
	Описание = Новый ОписаниеОповещения("ОбработатьРезультатПомещенияФайлаВХранилище", ЭтаФорма);
	НачатьПомещениеФайла(Описание, ПутьКФайлу, ИмяФайлаЗагрузки, Ложь);

КонецПроцедуры

&НаКлиенте
// Обработчик результата помещения файла в хранилище.
Процедура ОбработатьРезультатПомещенияФайлаВХранилище(Результат, Адрес, ВыбранноеИмяФайла, ДопПараметры) Экспорт
	
	Если Объект.АрхангельскаяОбласть_ЛьготникиДляЗагрузки.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаЗаполнитьЗавершение", ЭтотОбъект, Новый Структура("ПутьКФайлу", Адрес));
		
		ТекстВопроса = "Перед заполнением таблица выгрузки будет очищена. Заполнить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		
		ЗаполнитьНаСервере(Адрес);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатПомещенияФайлаВХранилище()

&НаКлиенте
// Обработчик результата опроса команды "КомандаЗаполнитьВсе".
Процедура КомандаЗаполнитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьНаСервере(ДополнительныеПараметры.ПутьКФайлу);
		
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьВсеЗавершение()

&НаКлиенте
// Обработчик команды "КомандаВыгрузить".
Процедура КомандаВыгрузить(Команда)
	
	Если ПустаяСтрока(ИмяКаталогаЗагрузки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указан каталог загрузки/выгрузки!");
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(ИмяКаталогаЗагрузки);
	Файл.НачатьПроверкуЭтоКаталог(Новый ОписаниеОповещения("КомандаВыгрузитьЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыгрузитьЗавершение(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЭтоКаталог Тогда
		ПоказатьПредупреждение(, "Каталог указан не верно");
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДанныеВФайлАрхангельск();

КонецПроцедуры

&НаКлиенте
// Обработчик события "Нажатие" гиперссылки "СписокУслугКапРемонт".
//
Процедура СписокУслугКапРемонтНажатие(Команда)
	
	СсылкаНаЭлемент = ПолучитьЭлементСправочникаПоОрганизацииНаСервере(Объект.Организация);
	Если НЕ СсылкаНаЭлемент = ПредопределенноеЗначение("Справочник.УПЖКХ_НастройкиУчетаКапремонта.ПустаяСсылка") Тогда
		ОткрытьФорму("Справочник.УПЖКХ_НастройкиУчетаКапремонта.Форма.ФормаЭлемента", Новый Структура("Ключ", СсылкаНаЭлемент), ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры // СписокУслугКапРемонтНажатие()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриИзменении" поля Организация.
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЗаполнитьРеквизитыОбработкиПоКапремонту();
	Если мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет Тогда
		ОбновитьСписокУслугКапРемонт();
	КонецЕсли;
	УстановитьВидимость();
	
КонецПроцедуры // ОрганизацияПриИзменении()

////////////////////////
// Диалог выбора файла                                 -

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Имя каталога".
//
Процедура ИмяКаталогаЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр                      = "Файл данных (*.dbf)|*.dbf";
	ДиалогВыбораФайла.Расширение                  = "dbf";
	ДиалогВыбораФайла.Заголовок                   = "Выберите файл загрузки";
	ДиалогВыбораФайла.ПолноеИмяФайла              = ИмяФайлаЗагрузки;
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	
	ДополнительныеПараметры = Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла);
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ИмяКаталогаЗагрузкиНачалоВыбораЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяКаталогаЗагрузкиНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ИмяФайлаЗагрузки    = ВыбранныеФайлы[0];
		ИмяКаталогаЗагрузки = ДиалогВыбораФайла.Каталог;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Имя каталога".
//
Процедура ИмяКаталогаЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УПЖКХ_ОбщегоНазначенияКлиент.ОткрытьСтраницуВБраузере("explorer " + ИмяФайлаЗагрузки);
	
КонецПроцедуры

////////////////////////
// Период

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПериодСтрокой".
Процедура ПериодСтрокойПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Модифицированность);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ПериодСтрокой".
Процедура ПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Регулирование" поля "ПериодСтрокой".
Процедура ПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Направление,
														Модифицированность);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "ПериодСтрокой".
Процедура ПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "ПериодСтрокой".
Процедура ПериодСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти