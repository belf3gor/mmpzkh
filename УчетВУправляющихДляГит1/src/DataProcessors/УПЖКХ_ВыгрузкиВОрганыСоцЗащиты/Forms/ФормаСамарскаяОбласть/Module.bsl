
//////////////////////////////////////////////////////////////////////////
// СОХРАНЯЕМЫЕ НАСТРОЙКИ

#Область РаботаСНастройками

&НаСервере
// Процедура восстановления настроек.
Процедура ВосстановитьНастройкиНаСервере()
	
	СтруктураПараметров = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("СамарскаяОбластьВыгрузкаВОСЗН", "ПараметрыВыгрузки");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		врТаблица    = Неопределено;
		врПеременная = Неопределено;
		
		// Кодировка файла DBF.
		Если СтруктураПараметров.Свойство("КодировкаDBF", врПеременная) Тогда
			Объект.КодировкаDBF = врПеременная;
		КонецЕсли;
		
		// Идентификация данных.
		Если СтруктураПараметров.Свойство("ИдентификацияЛС", врПеременная) Тогда
			Объект.ИдентификацияЛС = врПеременная;
		Иначе
			Объект.ИдентификацияЛС = 0;
		КонецЕсли;
		
		// Каталог загрузки.
		Если СтруктураПараметров.Свойство("ИмяКаталогаЗагрузки", врПеременная) Тогда
			ИмяКаталогаЗагрузки = врПеременная;
		КонецЕсли;
		
		// Каталог выгрузки.
		Если СтруктураПараметров.Свойство("ИмяКаталогаВыгрузки", врПеременная) Тогда
			ИмяКаталогаВыгрузки = врПеременная;
		КонецЕсли;
		
		// Идентификатор организации.
		Если СтруктураПараметров.Свойство("ИдентификаторОрганизации", врПеременная) Тогда
			ИдентификаторОрганизации = врПеременная;
		КонецЕсли;
		
		// Таблица настроек.
		Если СтруктураПараметров.Свойство("УслугиВ_ГИС_НМСПН", врТаблица) Тогда
			Если ТипЗнч(врТаблица) = Тип("ТаблицаЗначений") Тогда
				Объект.СамарскаяОбласть_УслугиВ_ГИС_НМСПН.Загрузить(врТаблица);
			КонецЕсли;
		КонецЕсли;
		
		// Таблица услуг в базе.
		Если СтруктураПараметров.Свойство("УслугиВБазе", врТаблица) Тогда
			Если ТипЗнч(врТаблица) = Тип("ТаблицаЗначений") Тогда
				Объект.СамарскаяОбласть_УслугиВБазе.Загрузить(врТаблица);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура сохранения настроек.
Процедура СохранитьНастройкиНаСервере()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КодировкаDBF",             Объект.КодировкаDBF);
	СтруктураПараметров.Вставить("ИдентификацияЛС",          Объект.ИдентификацияЛС);
	СтруктураПараметров.Вставить("ИмяКаталогаЗагрузки",      ИмяКаталогаЗагрузки);
	СтруктураПараметров.Вставить("ИмяКаталогаВыгрузки",      ИмяКаталогаВыгрузки);
	СтруктураПараметров.Вставить("ИдентификаторОрганизации", ИдентификаторОрганизации);
	СтруктураПараметров.Вставить("УслугиВ_ГИС_НМСПН",        Объект.СамарскаяОбласть_УслугиВ_ГИС_НМСПН.Выгрузить());
	СтруктураПараметров.Вставить("УслугиВБазе",              Объект.СамарскаяОбласть_УслугиВБазе.Выгрузить());
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("СамарскаяОбластьВыгрузкаВОСЗН", "ПараметрыВыгрузки", СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// РАБОТА С ВРЕМЕННЫМ ХРАНИЛИЩЕМ

#Область РаботаСВременнымХранилищем

&НаСервере
// Помещает настройки во временное хранилище.
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("КодировкаDBF",      Объект.КодировкаDBF);
	СтруктураНастроек.Вставить("ИдентификацияЛС",   Объект.ИдентификацияЛС);
	СтруктураНастроек.Вставить("УслугиВ_ГИС_НМСПН", Объект.СамарскаяОбласть_УслугиВ_ГИС_НМСПН.Выгрузить());
	СтруктураНастроек.Вставить("УслугиВБазе",       Объект.СамарскаяОбласть_УслугиВБазе.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
// Получает настройки из временного хранилища.
Функция ПолучитьНастройкиИзХранилища(АдресУслугВХранилище)
	
	СтруктураНастроек = ПолучитьИзВременногоХранилища(АдресУслугВХранилище);
	
	врТаблица    = Неопределено;
	врПеременная = Неопределено;
	
	// Кодировка файла DBF.
	Если СтруктураНастроек.Свойство("КодировкаDBF", врПеременная) Тогда
		Объект.КодировкаDBF = врПеременная;
	КонецЕсли;
	
	// Идентификация данных.
	Если СтруктураНастроек.Свойство("ИдентификацияЛС", врПеременная) Тогда
		Объект.ИдентификацияЛС = врПеременная;
	КонецЕсли;
	
	// Таблица услуг в ОСЗН.
	Если СтруктураНастроек.Свойство("УслугиВ_ГИС_НМСПН", врТаблица) Тогда
		Если ТипЗнч(врТаблица) = Тип("ТаблицаЗначений") Тогда
			Объект.СамарскаяОбласть_УслугиВ_ГИС_НМСПН.Загрузить(врТаблица);
		КонецЕсли;
	КонецЕсли;
	
	// Таблица услуг в базе.
	Если СтруктураНастроек.Свойство("УслугиВБазе", врТаблица) Тогда
		Если ТипЗнч(врТаблица) = Тип("ТаблицаЗначений") Тогда
			Объект.СамарскаяОбласть_УслугиВБазе.Загрузить(врТаблица);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура-обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	ТекРабДата = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	Объект.Период = ТекРабДата;
	
	ВосстановитьНастройкиНаСервере();
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьНастройкиНаСервере();
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "НачалоВыбора" поля ввода "ИмяКаталогаЗагрузки".
Процедура ИмяКаталогаЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогОткрытия = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогОткрытия.Заголовок = "Выберите каталог загрузки";
	
	ДиалогОткрытия.Показать(Новый ОписаниеОповещения("ВыборФайлаЗагрузкиЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаЗагрузкиЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ИмяКаталогаЗагрузки = ВыбранныеФайлы[0];
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Обработчик события "Открытие" поля ввода "ИмяКаталогаЗагрузки".
Процедура ИмяКаталогаЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УПЖКХ_ОбщегоНазначенияКлиент.ОткрытьСтраницуВБраузере("explorer " + ИмяКаталогаЗагрузки);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля ввода "ИмяКаталогаВыгрузки".
Процедура ИмяКаталогаВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогОткрытия = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогОткрытия.Заголовок = "Выберите каталог выгрузки";
	
	ДиалогОткрытия.Показать(Новый ОписаниеОповещения("ВыборФайлаВыгрузкиЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаВыгрузкиЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ИмяКаталогаВыгрузки = ВыбранныеФайлы[0];
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Обработчик события "Открытие" поля ввода "ИмяКаталогаВыгрузки".
Процедура ИмяКаталогаВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УПЖКХ_ОбщегоНазначенияКлиент.ОткрытьСтраницуВБраузере("explorer " + ИмяКаталогаВыгрузки);
	
КонецПроцедуры

// Обработчик события "НачалоВыбора" поля "ФИОЖильцов".
//
&НаКлиенте
Процедура ФИОЖильцовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные;
	
	Если Не ТекДанные.ЛицевойСчетВБазе = ПредопределенноеЗначение("Справочник.КВП_ЛицевыеСчета.ПустаяСсылка") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		// Устанавливаем параметры открытия формы выбора с отбором по л/с.
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Отбор", Новый Структура("Владелец", ТекДанные.ЛицевойСчетВБазе));
		
		// При создании жильца из документов открытия и изменения л/с в помощнике
		// необходимо пропускать страницу с вводом сведений для изменения л/с.
		СтруктураПараметров.Вставить("НеВводитьИзменениеЛСПриСозданииЖильца", Истина);
		
		// Открываем форму выбора жильца.
		ОткрытьФорму("Справочник.УПЖКХ_Жильцы.ФормаВыбора", СтруктураПараметров, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры // ФИОЖильцовНачалоВыбора()

// Обработчик события "ПриИзменении" поля "ФИОЖильцов".
//
&НаКлиенте
Процедура ФИОЖильцовПриИзменении(Элемент)
	
	ТекДанные = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные;
	
	Если ТекДанные.ЛицевойСчетВБазе = ПредопределенноеЗначение("Справочник.КВП_ЛицевыеСчета.ПустаяСсылка") Тогда
		ТекДанные.ЛицевойСчетВБазе = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекДанные.ФИОЖильцов, "Владелец");
	КонецЕсли;
	
КонецПроцедуры // ФИОЖильцовПриИзменении()

// Обработчик события "ПриИзменении" поля "ЛицевойСчетВБазе".
//
&НаКлиенте
Процедура ЛицевойСчетВБазеПриИзменении(Элемент)
	
	ТекДанные = ЭтаФорма.ТекущийЭлемент.ТекущиеДанные;
	
	Если Не ТекДанные.ФИОЖильцов = ПредопределенноеЗначение("Справочник.УПЖКХ_Жильцы.ПустаяСсылка") Тогда
		
		ЛСЖильца = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекДанные.ФИОЖильцов, "Владелец");
		
		Если Не ЛСЖильца = ТекДанные.ЛицевойСчетВБазе Тогда
			
			ТекДанные.ФИОЖильцов = ПредопределенноеЗначение("Справочник.УПЖКХ_Жильцы.ПустаяСсылка");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЛицевойСчетВБазеПриИзменении()

////////////////////////
// Период

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПериодСтрокой".
Процедура ПериодСтрокойПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Модифицированность);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ПериодСтрокой".
Процедура ПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Регулирование" поля "ПериодСтрокой".
Процедура ПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Направление,
														Модифицированность);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "ПериодСтрокой".
Процедура ПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "ПериодСтрокой".
Процедура ПериодСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик события "Нажатие" кнопки "Настройка".
Процедура КомандаНастройка(Команда)
	
	АдресНастроекВХранилище = ПоместитьНастройкиВХранилище();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаНастройкаЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты.Форма.СамарскаяОбласть_ФормаНастройки", Новый Структура("АдресНастроекВХранилище", АдресНастроекВХранилище), , , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата опроса команды "КомандаНастройка".
Процедура КомандаНастройкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		ПолучитьНастройкиИзХранилища(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Выполнение команды "ЗагрузитьИзКаталога".
Процедура КомандаЗагрузитьИзКаталога(Команда)
	
	Если ПустаяСтрока(ИмяКаталогаЗагрузки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указан каталог загрузки! Загрузка данных прервана!");
		Возврат;
	КонецЕсли;
	
	Если НЕ Элементы.Найти("ГруппаСтраницы") = Неопределено Тогда
		Оповещение = Новый ОписаниеОповещения("КомандаЗагрузитьИзФайлаВопрос", ЭтотОбъект);
		
		ТекстВопроса = "Перед загрузкой табличные части будут очищены. Продолжить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		КомандаЗагрузитьИзФайлаПродолжение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата опроса команды "ЗагрузитьИзФайла".
Процедура КомандаЗагрузитьИзФайлаВопрос(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		КомандаЗагрузитьИзФайлаПродолжение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата продолжения опроса команды "ЗагрузитьИзФайла".
Процедура КомандаЗагрузитьИзФайлаПродолжение()
	
	// Ищем dbf файлы в указанном каталоге
	НачатьПоискФайлов(Новый ОписаниеОповещения("НайтиФайлыЗавершение", ЭтотОбъект), ИмяКаталогаЗагрузки, "*.dbf");
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиФайлыЗавершение(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	Объект.СамарскаяОбласть_СписокТаблицЗначений.Очистить();
	Для Каждого файл из НайденныеФайлы Цикл
		
		// Помещаем загружаемый файл во временное хранилище.
		Оповещение = Новый ОписаниеОповещения("ОбработатьВыборФайла", ЭтотОбъект);
		НачатьПомещениеФайла(Оповещение, , файл.ПолноеИмя, Ложь, УникальныйИдентификатор);
		
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
// Обработчик результата помещения файла во временное хранилище.
Процедура ОбработатьВыборФайла(Результат, АдресФайлаВХранилище, ВыбранноеИмяФайла, Режим) Экспорт
	
	Если Результат Тогда
		// Загружаем данные из dbf на сервере.
		ЗагрузитьИзФайлаНаСервере(АдресФайлаВХранилище);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Загружает копию dbf-файла в текущую таблицу.
// Параметры:
//  АдресФайлаВХранилище - Строка - адрес текущего файла во временном хранилище.
//  Режим                - Строка - наименование режима работы текущего загружаемого файла: "Загрузки" или "Выгрузки".
//
Процедура ЗагрузитьИзФайлаНаСервере(АдресФайлаВХранилище)
	
	// Получаем dbf из временного хранилища.
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВХранилище);
	
	// Для чтения *.dbf файла в кодировке DOS (OEM), урежем имя временного файла.
	КороткоеИмяВременногоФайла = ПолучитьИмяВременногоDBFФайла();
	
	// Записываем dbf в файл с указанным именем.
	ДвоичныеДанные.Записать(КороткоеИмяВременногоФайла);
	
	// Производим чтение dbf файла.
	DBFФайл = Новый XBase;
	
	Если Объект.КодировкаDBF Тогда
		DBFФайл.Кодировка = КодировкаXBase.ANSI;
	Иначе
		DBFФайл.Кодировка = КодировкаXBase.OEM;
	КонецЕсли;
	
	DBFФайл.ОткрытьФайл(КороткоеИмяВременногоФайла, , Истина);
	
	Если DBFФайл.Открыта() Тогда
		
		DBFФайл.Первая();
		
		// Ищем услугу ОСЗН в настройках формы.
		КодУслугиВОСЗН = DBFФайл["SERVICE_ID"];
		Отбор = Новый Структура;
		Отбор.Вставить("ИдентификаторУслуги", КодУслугиВОСЗН);
		
		СтрокиСУслугойВГИС = Объект.СамарскаяОбласть_УслугиВ_ГИС_НМСПН.НайтиСтроки(Отбор);
		
		Если СтрокиСУслугойВГИС.Количество() = 0 Тогда
			Отказ = Истина;
		Иначе
			ИдентификаторУслуги = СтрокиСУслугойВГИС[0].ИдентификаторУслуги;
			НаименованиеУслуги  = СтрокиСУслугойВГИС[0].НаименованиеУслуги;
			СпособСвертки       = СтрокиСУслугойВГИС[0].СпособСверткиТарифа;
		КонецЕсли;

		// Создаем таблицу значений для перебора колонок DBF файла и заполняем колонки.
		ТЗ = Новый ТаблицаЗначений;
		ТЗ = ЗаполнениеКолонокТЗ(ТЗ, НаименованиеУслуги);
		
		// Проверяем структуру метаданных ДБФ на соответствие требованиям
		Для Каждого Поле Из DBFФайл.поля Цикл
			Если ТЗ.Колонки.Найти(Поле.Имя) = Неопределено Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Структура DBF не соответствует требованиям " + КороткоеИмяВременногоФайла);
				Возврат;
			КонецЕсли;
		КонецЦикла;
		
		// Записываем данные ДБФ в таблицу значений.
		Пока Не DBFФайл.ВКонце() Цикл
			
			Строка = ТЗ.Добавить();
			Для каждого поле из DBFФайл.Поля Цикл
				//Если ТЗ.Колонки.Найти(Поле.Имя <> Неопределено Тогда
					Строка[Поле.Имя] = СокрЛП(DBFФайл[Поле.Имя]);
				//КонецЕсли;
			КонецЦикла;
			
			DBFФайл.Следующая();
			
		КонецЦикла;
		
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось прочитать указанный файл!");
		DBFФайл.ЗакрытьФайл();
		Возврат;
	КонецЕсли;
	
	DBFФайл.ЗакрытьФайл();
	
	// Стандартизируем наименование здания и улицы в ТЗ.
	ИсключитьАдресныеСокращения(ТЗ, 1);
	
	// Проверяем, есть ли жилец из загружаемого файла в базе.
	ПроизвестиИдентификациюЛицевыхСчетов(ТЗ);
	
	// Добавляем ТаблицуЗначений на форму.
	ИзменитьФорму(ТЗ);
	
	// Очищаем временное хранилище.
	УдалитьИзВременногоХранилища(АдресФайлаВХранилище);
	
КонецПроцедуры

&НаСервере
// Добавляет стандартные колонки в таблицу значений.
Функция ЗаполнениеКолонокТЗ(ТЗ, НаименованиеУслуги)
	
	// Колонки, присутствующие в ДБВ файле.
	ТЗ.Колонки.Добавить("ЛицевойСчетВБазе", Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"),               "Лицевой счет");
	ТЗ.Колонки.Добавить("ФИОЖильцов",       Новый ОписаниеТипов("СправочникСсылка.УПЖКХ_Жильцы"),                   "Жилец");
	ТЗ.Колонки.Добавить("AO_GUID",          Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(38)),           "GUID адресного объекта в ФИАС");
	ТЗ.Колонки.Добавить("HOUSE_GUID",       Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(38)),           "GUID дома в ФИАС");
	ТЗ.Колонки.Добавить("PERSON_ID",        Новый ОписаниеТипов("Число",  Новый КвалификаторыЧисла(10)),            "Идентификатор в ГИС НМСПН");
	ТЗ.Колонки.Добавить("MAN_DIS_ID",       Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(38)),           "Идентификатор в Организации");
	ТЗ.Колонки.Добавить("SERVICE_ID",       Новый ОписаниеТипов("Число",  Новый КвалификаторыЧисла(10)),            "Идентификатор услуги в ГИС НМСПН");
	ТЗ.Колонки.Добавить("CITY",             Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)),          "Населенный пункт");
	ТЗ.Колонки.Добавить("STREET",           Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(100)),          "Улица");
	ТЗ.Колонки.Добавить("HOUSE",            Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(10)),           "Дом");
	ТЗ.Колонки.Добавить("HOUSE_LIT",        Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(3)),            "Литера дома");
	ТЗ.Колонки.Добавить("HOUSING",          Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(5)),            "Корпус");
	ТЗ.Колонки.Добавить("BUILDING",         Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(5)),            "Строение");
	ТЗ.Колонки.Добавить("FLAT",             Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(5)),            "Квартира");
	ТЗ.Колонки.Добавить("ROOM",             Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(5)),            "Комната");
	ТЗ.Колонки.Добавить("LASTNAME",         Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(30)),           "Фамилия");
	ТЗ.Колонки.Добавить("FIRSTNAME",        Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(30)),           "Имя");
	ТЗ.Колонки.Добавить("SECONDNAME",       Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(30)),           "Отчество");
	ТЗ.Колонки.Добавить("SNILS",            Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(14)),           "СНИЛС");
	ТЗ.Колонки.Добавить("BIRTH_DATE",       Новый ОписаниеТипов("Дата",   Новый КвалификаторыДаты(ЧастиДаты.Дата)), "Дата рождения");
	ТЗ.Колонки.Добавить("DOC_TYPE",         Новый ОписаниеТипов("Число",  Новый КвалификаторыЧисла(2)),             "Тип документа, удостоверяющего личность");
	ТЗ.Колонки.Добавить("DOC_SERIA",        Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(20)),           "Серия документа");
	ТЗ.Колонки.Добавить("DOC_NUMBER",       Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(20)),           "Номер документа");
	
	// Дополняем данные фиксированным набором колонок для выгрузки.
	ТЗ.Колонки.Добавить("ORG_ID",    Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)),            "Идентификатор поставщика услуг в ГИС НМСПН");
	ТЗ.Колонки.Добавить("FROM_DATE", Новый ОписаниеТипов("Дата",  Новый КвалификаторыДаты(ЧастиДаты.Дата)), "Начало периода предоставления сведений");
	ТЗ.Колонки.Добавить("TO_DATE",   Новый ОписаниеТипов("Дата",  Новый КвалификаторыДаты(ЧастиДаты.Дата)), "Конец периода предоставления сведений");
	ТЗ.Колонки.Добавить("REG_QUANT", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2)),             "Количество зарегистрированных");
	ТЗ.Колонки.Добавить("S_BALANCE", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,2)),          "Сальдо на начало периода");
	ТЗ.Колонки.Добавить("CREDITED",  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,2)),          "Сумма начислений");
	ТЗ.Колонки.Добавить("PAID",      Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,2)),          "Сумма оплат");
	ТЗ.Колонки.Добавить("E_BALANCE", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,2)),          "Сальдо на конец периода");
	
	// Дополняем данные динамическим набором колонок для выгрузки.
	Если НаименованиеУслуги = "Оплата жилья" Или НаименованиеУслуги = "Общедомовые расходы" Или НаименованиеУслуги = "Найм жилья" Тогда
		
		ТЗ.Колонки.Добавить("SQUARE",   Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 2)), "Общая площадь");
		ТЗ.Колонки.Добавить("STD_RATE", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 2)), "Тариф");
		ТЗ.Колонки.Добавить("STATUS",   Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2)),     "Человек найден в ИС организации");
		
	ИначеЕсли НаименованиеУслуги = "Холодное водоснабжение" Тогда
		
		ТЗ.Колонки.Добавить("STD_COUNT", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 2)), "Норматив");
		ТЗ.Колонки.Добавить("STD_RATE",  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 2)), "Тариф");
		ТЗ.Колонки.Добавить("STATUS",    Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2)),     "Человек найден в ИС организации");
		
	ИначеЕсли НаименованиеУслуги = "Горячее водоснабжение" Тогда
		
		ТЗ.Колонки.Добавить("STDC_COUNT", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 4)), "Норматив на тепловую энергию");
		ТЗ.Колонки.Добавить("STDC_RATE",  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 2)), "Тариф тепловой энергии");
		ТЗ.Колонки.Добавить("STD_COUNT",  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 4)), "Норматив горячей воды");
		ТЗ.Колонки.Добавить("STD_RATE",   Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 2)), "Тариф на теплоноситель");
		ТЗ.Колонки.Добавить("STATUS",     Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2)),     "Человек найден в ИС организации");
		
	ИначеЕсли НаименованиеУслуги = "Водоотведение" Тогда
			
		ТЗ.Колонки.Добавить("STDH_COUNT", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 2)), "Норматив горячей воды");
		ТЗ.Колонки.Добавить("STDC_COUNT", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 2)), "Норматив холодной воды");
		ТЗ.Колонки.Добавить("STD_RATE",   Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 2)), "Тариф");
		ТЗ.Колонки.Добавить("STATUS",     Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2)),     "Человек найден в ИС организации");
		
	ИначеЕсли НаименованиеУслуги = "Газоснабжение" Тогда
		
		ТЗ.Колонки.Добавить("STDP_COUNT", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 2)), "Норматив");
		ТЗ.Колонки.Добавить("PRICE",      Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 2)), "Розничаня цена на газ");
		ТЗ.Колонки.Добавить("STDM_COUNT", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 2)), "Норматив");
		ТЗ.Колонки.Добавить("SQUARE",     Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 2)), "Отапливаемая площадь");
		ТЗ.Колонки.Добавить("STDH_COUNT", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 2)), "Норматив");
		ТЗ.Колонки.Добавить("STATUS",     Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2)),     "Человек найден в ИС организации");
		
	ИначеЕсли НаименованиеУслуги = "Теплоснабжение" Тогда
		
		ТЗ.Колонки.Добавить("SQUARE",     Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 2)), "Отапливаемая площадь");
		ТЗ.Колонки.Добавить("STDM_COUNT", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 4)), "Норматив");
		ТЗ.Колонки.Добавить("STD_RATE",   Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 2)), "Тариф");
		ТЗ.Колонки.Добавить("STATUS",     Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2)),     "Человек найден в ИС организации");
		
	ИначеЕсли  НаименованиеУслуги = "Электроснабжение" Тогда
		
		ТЗ.Колонки.Добавить("STD_COUNT", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 2)), "Норматив");
		ТЗ.Колонки.Добавить("STD_RATE",  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 2)), "Тариф");
		ТЗ.Колонки.Добавить("STATUS",    Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2)),     "Человек найден в ИС организации");
		
	ИначеЕсли  НаименованиеУслуги = "Оплата топлива" Тогда
		
		ТЗ.Колонки.Добавить("SQUARE",    Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 2)), "Общая площадь");
		ТЗ.Колонки.Добавить("STD_COUNT", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 2)), "Годовая норма твердого топлива");
		ТЗ.Колонки.Добавить("PRICE_GVM", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 2)), "Государственная регулируемая цена твердого топлива");
		ТЗ.Колонки.Добавить("PRICE_TRT", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 2)), "Цена на транспортные услуги по доставке твердого топлива");
		ТЗ.Колонки.Добавить("STATUS",    Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2)),     "Человек найден в ИС организации");
		
	ИначеЕсли НаименованиеУслуги = "Капитальный ремонт" Тогда
		
		ТЗ.Колонки.Добавить("SQUARE",     Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 2)),         "Общая площадь");
		ТЗ.Колонки.Добавить("SQUARE_NM",  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)),            "Доля собственности (числитель)");
		ТЗ.Колонки.Добавить("SQUARE_DNM", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)),            "Доля собственности (знаменатель)");
		ТЗ.Колонки.Добавить("REG_DATE",   Новый ОписаниеТипов("Дата",  Новый КвалификаторыДаты(ЧастиДаты.Дата)), "Дата регистрации прав собственности");
		ТЗ.Колонки.Добавить("MIN_PAY",    Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 2)),         "Минимальный размер взноса");
		ТЗ.Колонки.Добавить("FLOOR",      Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3)),             "Этажность здания");
		ТЗ.Колонки.Добавить("STATUS",     Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2)),             "Человек найден в ИС организации");
		
	ИначеЕсли НаименованиеУслуги = "Твердые коммунальные отходы" Тогда
		
		ТЗ.Колонки.Добавить("STD_COUNT",  Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 4)), "Годовой норматив накопления отходов (куб.м./чел. в год)");
		ТЗ.Колонки.Добавить("STDM_COUNT", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 4)), "Годовой норматив накопления отходов (куб.м./кв.м. в год)");
		ТЗ.Колонки.Добавить("STD_RATE",   Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 2)), "Тариф");
		ТЗ.Колонки.Добавить("STATUS",     Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(2)),     "Человек найден в ИС организации");
		
	Иначе
		
		Отказ = Истина;
		
	КонецЕсли;
	
	Возврат ТЗ;
	
КонецФункции // ЗаполнениеКолонокТЗ()

&НаСервере
// Возвращает полное имя временного dbf-файла с указанным именем без расширения.
//
// Параметры:
//  ИмяФайла - Строка - имя файла без расширения.
//
// Возвращаемые параметры:
//  НовоеИмяВременногоФайла - Строка - полное имя временного dbf-файла с указанным именем без расширения.
//
Функция ПолучитьИмяВременногоDBFФайла()
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("dbf");
	
	ФайлДБФ = Новый Файл(ИмяВременногоФайла);
	СтароеИмяФайла = ФайлДБФ.ИмяБезРасширения + ".dbf";
	НовоеИмяФайла  = "in_file.dbf";
	НовоеИмяВременногоФайла = СтрЗаменить(ФайлДБФ.ПолноеИмя, СтароеИмяФайла, НовоеИмяФайла);
	
	Возврат НовоеИмяВременногоФайла;
	
КонецФункции

&НаСервере
// Процедура предназначена для исключения из наименования здания и улицы, 
// на которой расположены выгружаемые здания, адресных сокращений.
//
Процедура ИсключитьАдресныеСокращения(ТЗ, НаборПолейДляСокращения)
	
	МассивСокращенийНасПунктов = Новый Массив();
	МассивСокращенийНасПунктов.Добавить("л/с");
	МассивСокращенийНасПунктов.Добавить("г.");
	МассивСокращенийНасПунктов.Добавить("пгт.");
	МассивСокращенийНасПунктов.Добавить("д.");
	МассивСокращенийНасПунктов.Добавить("п.");
	МассивСокращенийНасПунктов.Добавить("ст.");
	МассивСокращенийНасПунктов.Добавить("мкр.");
	МассивСокращенийНасПунктов.Добавить("с.");
	
	МассивСокращенийУлиц = Новый Массив();
	МассивСокращенийУлиц.Добавить("ул.");
	МассивСокращенийУлиц.Добавить("пер.");
	МассивСокращенийУлиц.Добавить("пр-кт.");
	МассивСокращенийУлиц.Добавить("проезд.");
	МассивСокращенийУлиц.Добавить("б-р.");
	МассивСокращенийУлиц.Добавить("б.");
	МассивСокращенийУлиц.Добавить("пл.");
	МассивСокращенийУлиц.Добавить("парк.");
	МассивСокращенийУлиц.Добавить("сквер.");
	МассивСокращенийУлиц.Добавить("пр.");
	МассивСокращенийУлиц.Добавить("проспект.");
	
	МассивСокращенийНасПунктов.Добавить("г");
	МассивСокращенийНасПунктов.Добавить("пгт");
	МассивСокращенийНасПунктов.Добавить("д");
	МассивСокращенийНасПунктов.Добавить("п");
	МассивСокращенийНасПунктов.Добавить("ст");
	МассивСокращенийНасПунктов.Добавить("мкр");
	МассивСокращенийНасПунктов.Добавить("с");
	
	МассивСокращенийУлиц.Добавить("ул");
	МассивСокращенийУлиц.Добавить("пер");
	МассивСокращенийУлиц.Добавить("пр-кт");
	МассивСокращенийУлиц.Добавить("проезд");
	МассивСокращенийУлиц.Добавить("б-р");
	МассивСокращенийУлиц.Добавить("б");
	МассивСокращенийУлиц.Добавить("пл");
	МассивСокращенийУлиц.Добавить("парк");
	МассивСокращенийУлиц.Добавить("сквер");
	МассивСокращенийУлиц.Добавить("пр");
	МассивСокращенийУлиц.Добавить("проспект");
	
	ЕстьКвартираСтрокой = ТЗ.Колонки.Найти("КвартираСтрокой") <> Неопределено;
	
	Для Каждого ТекСтрока ИЗ ТЗ Цикл
		Если НаборПолейДляСокращения = 1 Тогда
			ТекСтрока.CITY = НормализацияПолейАдресаОбласти(НРег(ТекСтрока.CITY),   МассивСокращенийНасПунктов, Истина);
			ЧислоВхожденийПробела = СтрЧислоВхождений(ТекСтрока.CITY, " ");
			Если ЧислоВхожденийПробела > 0 Тогда
				ТекСтрока.CITY = НормализацияПолейАдресаОбласти(НРег(ТекСтрока.CITY), МассивСокращенийНасПунктов, Истина);
			КонецЕсли;
			ТекСтрока.STREET = НормализацияПолейАдресаОбласти(НРег(ТекСтрока.STREET), МассивСокращенийУлиц, Истина);
			ЧислоВхожденийПробела = СтрЧислоВхождений(ТекСтрока.STREET, " ");
			Если ЧислоВхожденийПробела > 0 Тогда
				ТекСтрока.STREET = НормализацияПолейАдресаОбласти(НРег(ТекСтрока.STREET), МассивСокращенийУлиц, Истина);
			КонецЕсли;
		Иначе
			ТекСтрока.НаселенныйПункт = НормализацияПолейАдресаОбласти(НРег(ТекСтрока.НаселенныйПункт), МассивСокращенийНасПунктов);
			ЧислоВхожденийПробела = СтрЧислоВхождений(ТекСтрока.НаселенныйПункт, " ");
			Если ЧислоВхожденийПробела > 0 Тогда
				ТекСтрока.НаселенныйПункт = НормализацияПолейАдресаОбласти(НРег(ТекСтрока.НаселенныйПункт), МассивСокращенийНасПунктов);
			КонецЕсли;
			ТекСтрока.Город           = НормализацияПолейАдресаОбласти(НРег(ТекСтрока.Город),           МассивСокращенийНасПунктов);
			ЧислоВхожденийПробела = СтрЧислоВхождений(ТекСтрока.Город, " ");
			Если ЧислоВхожденийПробела > 0 Тогда
				ТекСтрока.Город = НормализацияПолейАдресаОбласти(НРег(ТекСтрока.Город), МассивСокращенийНасПунктов);
			КонецЕсли;
			ТекСтрока.Улица           = НормализацияПолейАдресаОбласти(НРег(ТекСтрока.Улица),           МассивСокращенийУлиц);
			ЧислоВхожденийПробела = СтрЧислоВхождений(ТекСтрока.Улица, " ");
			Если ЧислоВхожденийПробела > 0 Тогда
				ТекСтрока.Улица = НормализацияПолейАдресаОбласти(НРег(ТекСтрока.Улица), МассивСокращенийУлиц);
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьКвартираСтрокой Тогда
			ТекСтрока.КвартираСтрокой = Строка(ТекСтрока.Квартира);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Функция сокращает название города или улицы: убирает сокращения,
// определяющие тип данного элемента адреса: "г.", "ул." и так далее.
//
// Параметры:
//  Ресурс - Строка - элемент адреса
//
// Возвращаемое значение:
//  Строка - элемент адреса в сокращенном виде
//
Функция НормализацияПолейАдресаОбласти(Ресурс, Массив, НеУчитыватьПробел = Ложь)
	
	Найден = Истина;
	
	Для Каждого Элемент Из Массив Цикл
		
		Если Прав(СокрЛП(Ресурс), СтрДлина(Элемент)) = Элемент Тогда
			ПредСимвол = Сред(СокрЛП(Ресурс), СтрДлина(СокрЛП(Ресурс)) - СтрДлина(Элемент), 1);
			
			Если НеУчитыватьПробел Тогда
				Если ПредСимвол = " " ИЛИ НЕ СтрНайти(Элемент, ".") = 0 Тогда
					Возврат СокрЛП(Лев(СокрЛП(Ресурс), СтрДлина(СокрЛП(Ресурс)) - СтрДлина(Элемент)));
				КонецЕсли;
			Иначе
				Если ПредСимвол = " " Тогда
					Возврат СокрЛП(Лев(СокрЛП(Ресурс), СтрДлина(СокрЛП(Ресурс)) - СтрДлина(Элемент)));
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли Лев(СокрЛП(Ресурс), СтрДлина(Элемент)) = Элемент Тогда
			СледСимвол = Сред(СокрЛП(Ресурс), СтрДлина(Элемент) + 1, 1);
			
			Если НеУчитыватьПробел Тогда
				Если СледСимвол = " " ИЛИ НЕ СтрНайти(Элемент, ".") = 0 Тогда
					Возврат СокрЛП(Сред(СокрЛП(Ресурс), СтрДлина(Элемент) + 1));
				КонецЕсли;
			Иначе
				Если СледСимвол = " " Тогда
					Возврат СокрЛП(Сред(СокрЛП(Ресурс), СтрДлина(Элемент) + 1));
				КонецЕсли;
			КонецЕсли;
		Иначе
			
			Найден = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Найден = Ложь Тогда
		Возврат Ресурс;
	КонецЕсли;
	
КонецФункции

&НаСервере
// Процедура предназначена для идентификации льготников из файла с жильцами из базы.
Процедура ПроизвестиИдентификациюЛицевыхСчетов(ТаблицаДляЗагрузки)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	втКонтактнаяИнформация.Объект КАК Здание,
	|	втКонтактнаяИнформация.Объект.КодДомаПоФИАС КАК КодДомаПоФИАС,
	|	втКонтактнаяИнформация.Город КАК Город,
	|	ВЫБОР
	|		КОГДА НЕ втКонтактнаяИнформация.НаселенныйПункт = """"
	|			ТОГДА втКонтактнаяИнформация.НаселенныйПункт
	|		КОГДА НЕ втКонтактнаяИнформация.Город = """"
	|			ТОГДА втКонтактнаяИнформация.Город
	|		ИНАЧЕ втКонтактнаяИнформация.Регион
	|	КОНЕЦ КАК НаселенныйПункт,
	|	втКонтактнаяИнформация.Улица КАК Улица,
	|	втКонтактнаяИнформация.Дом КАК Дом,
	|	втКонтактнаяИнформация.ТипКорпуса КАК ТипКорпуса,
	|	ВЫБОР
	|		КОГДА втКонтактнаяИнформация.ТипКорпуса ПОДОБНО ""Литер%""
	|			ТОГДА втКонтактнаяИнформация.Корпус
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Литера,
	|	ВЫБОР
	|		КОГДА втКонтактнаяИнформация.ТипКорпуса ПОДОБНО ""Корпус""
	|			ТОГДА втКонтактнаяИнформация.Корпус
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Корпус
	|ИЗ
	|	втКонтактнаяИнформация КАК втКонтактнаяИнформация";
	
	ТаблицаАдресовИзБазы = Запрос.Выполнить().Выгрузить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо,
	|	ФИОФизическихЛицСрезПоследних.Фамилия,
	|	ФИОФизическихЛицСрезПоследних.Имя,
	|	ФИОФизическихЛицСрезПоследних.Отчество
	|ИЗ
	|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ДатаКонца, ) КАК ФИОФизическихЛицСрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаКонца", КонецМесяца(Объект.Период));
	
	ТаблицаФИО = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаФизЛица ИЗ ТаблицаФИО Цикл
		СтрокаФизЛица.Фамилия  = ВРег(СтрокаФизЛица.Фамилия);
		СтрокаФизЛица.Имя      = ВРег(СтрокаФизЛица.Имя);
		СтрокаФизЛица.Отчество = ВРег(СтрокаФизЛица.Отчество);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаФИО.ФизическоеЛицо,
	|	ТаблицаФИО.Фамилия,
	|	ТаблицаФИО.Имя,
	|	ТаблицаФИО.Отчество
	|ПОМЕСТИТЬ втФИОФизЛиц
	|ИЗ
	|	&ТаблицаФИО КАК ТаблицаФИО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Жильцы.Ссылка КАК Проживающий,
	|	УПЖКХ_Жильцы.ФизЛицо,
	|	УПЖКХ_Жильцы.Владелец.Адрес.Владелец КАК Здание,
	|	УПЖКХ_Жильцы.Владелец.Адрес.Код КАК Квартира,
	|	УПЖКХ_Жильцы.Владелец КАК ЛицевойСчет
	|ПОМЕСТИТЬ втЖильцы
	|ИЗ
	|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
	|ГДЕ
	|	НЕ УПЖКХ_Жильцы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцы.Проживающий,
	|	ЕСТЬNULL(втФИОФизЛиц.Фамилия, """") КАК Фамилия,
	|	ЕСТЬNULL(втФИОФизЛиц.Имя, """") КАК Имя,
	|	ЕСТЬNULL(втФИОФизЛиц.Отчество, """") КАК Отчество,
	|	втЖильцы.Здание,
	|	втЖильцы.Квартира,
	|	втЖильцы.ЛицевойСчет
	|ПОМЕСТИТЬ втЖильцыСФИО
	|ИЗ
	|	втЖильцы КАК втЖильцы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втФИОФизЛиц КАК втФИОФизЛиц
	|		ПО втЖильцы.ФизЛицо = втФИОФизЛиц.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаАдресов.КодДомаПоФИАС,
	|	ТаблицаАдресов.Здание,
	|	ТаблицаАдресов.Город,
	|	ТаблицаАдресов.НаселенныйПункт,
	|	ТаблицаАдресов.Улица,
	|	ТаблицаАдресов.Дом,
	|	ТаблицаАдресов.Литера,
	|	ТаблицаАдресов.Корпус
	|ПОМЕСТИТЬ втАдреса
	|ИЗ
	|	&ТаблицаАдресов КАК ТаблицаАдресов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцыСФИО.Проживающий КАК Жилец,
	|	втЖильцыСФИО.Фамилия,
	|	втЖильцыСФИО.Имя,
	|	втЖильцыСФИО.Отчество,
	|	ЕСТЬNULL(втАдреса.Город, """") КАК Город,
	|	ЕСТЬNULL(втАдреса.НаселенныйПункт, """") КАК НаселенныйПункт,
	|	ЕСТЬNULL(втАдреса.Улица, """") КАК Улица,
	|	ЕСТЬNULL(втАдреса.Дом, """") КАК Дом,
	|	ЕСТЬNULL(втАдреса.Литера, """") КАК Литера,
	|	ЕСТЬNULL(втАдреса.Корпус, """") КАК Корпус,
	|	втАдреса.КодДомаПоФИАС КАК КодДомаПоФИАС,
	|	втЖильцыСФИО.Квартира,
	|	втЖильцыСФИО.ЛицевойСчет
	|ИЗ
	|	втЖильцыСФИО КАК втЖильцыСФИО
	|		ЛЕВОЕ СОЕДИНЕНИЕ втАдреса КАК втАдреса
	|		ПО втЖильцыСФИО.Здание = втАдреса.Здание";
	
	Запрос.УстановитьПараметр("ТаблицаАдресов", ТаблицаАдресовИзБазы);
	Запрос.УстановитьПараметр("ТаблицаФИО",     ТаблицаФИО);
	
	ТаблицаЖильцовИзБазы = Запрос.Выполнить().Выгрузить();
	
	ТаблицаЖильцовИзБазы.Колонки.Добавить("КвартираСтрокой", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(10));
	
	ИсключитьАдресныеСокращения(ТаблицаЖильцовИзБазы, 2);
	
	// Идентификация льготников из файла загрузки с данными из информационной базы.
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ЖильцовИзБазы",      ТаблицаЖильцовИзБазы);
	Запрос.УстановитьПараметр("ТаблицаДляЗагрузки", ТаблицаДляЗагрузки);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЖильцовИзБазы.КодДомаПоФИАС,
	|	ЖильцовИзБазы.ЛицевойСчет,
	|	ЖильцовИзБазы.Жилец,
	|	ЖильцовИзБазы.Фамилия,
	|	ЖильцовИзБазы.Имя,
	|	ЖильцовИзБазы.Отчество,
	|	ЖильцовИзБазы.Город,
	|	ЖильцовИзБазы.НаселенныйПункт,
	|	ЖильцовИзБазы.Улица,
	|	ЖильцовИзБазы.Дом,
	|	ЖильцовИзБазы.Литера,
	|	ЖильцовИзБазы.Корпус,
	|	ЖильцовИзБазы.КвартираСтрокой
	|ПОМЕСТИТЬ втЖильцовИзБазы
	|ИЗ
	|	&ЖильцовИзБазы КАК ЖильцовИзБазы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДляЗагрузки.PERSON_ID,
	|	ТаблицаДляЗагрузки.HOUSE_GUID,
	|	ТаблицаДляЗагрузки.CITY,
	|	ТаблицаДляЗагрузки.STREET,
	|	ТаблицаДляЗагрузки.HOUSE,
	|	ТаблицаДляЗагрузки.HOUSE_LIT,
	|	ТаблицаДляЗагрузки.HOUSING,
	|	ТаблицаДляЗагрузки.BUILDING,
	|	ТаблицаДляЗагрузки.FLAT,
	|	ТаблицаДляЗагрузки.LASTNAME,
	|	ТаблицаДляЗагрузки.FIRSTNAME,
	|	ТаблицаДляЗагрузки.SECONDNAME
	|ПОМЕСТИТЬ втДанныеИзФайла
	|ИЗ
	|	&ТаблицаДляЗагрузки КАК ТаблицаДляЗагрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втЖильцовИзБазы.ЛицевойСчет, ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)) КАК ЛицевойСчет,
	|	МАКСИМУМ(ЕСТЬNULL(втЖильцовИзБазы.Жилец, ЗНАЧЕНИЕ(Справочник.УПЖКХ_Жильцы.ПустаяСсылка))) КАК Жилец,
	|	втДанныеИзФайла.PERSON_ID,
	|	втДанныеИзФайла.LASTNAME КАК Фамилия,
	|	втДанныеИзФайла.FIRSTNAME КАК Имя,
	|	втДанныеИзФайла.SECONDNAME КАК Отчество,
	|	втДанныеИзФайла.CITY КАК НаселенныйПункт,
	|	втДанныеИзФайла.STREET КАК Улица,
	|	втДанныеИзФайла.HOUSE КАК Дом,
	|	втДанныеИзФайла.HOUSE_LIT КАК Литера,
	|	втДанныеИзФайла.HOUSING КАК Корпус,
	|	втДанныеИзФайла.FLAT КАК Квартира
	|ИЗ
	|	втДанныеИзФайла КАК втДанныеИзФайла
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЖильцовИзБазы КАК втЖильцовИзБазы
	|		ПО (" + ?(Объект.ИдентификацияЛС = 1,
				"втЖильцовИзБазы.НаселенныйПункт = втДанныеИзФайла.CITY)
	|			И (втЖильцовИзБазы.Улица = втДанныеИзФайла.STREET)
	|			И (втЖильцовИзБазы.Дом = втДанныеИзФайла.HOUSE)
	|			И (втЖильцовИзБазы.Корпус = втДанныеИзФайла.HOUSING)
	|			И (втЖильцовИзБазы.Литера = втДанныеИзФайла.HOUSE_LIT)
	|			И (втЖильцовИзБазы.КвартираСтрокой = втДанныеИзФайла.FLAT)", ?(Объект.ИдентификацияЛС = 2,
				"втЖильцовИзБазы.Фамилия = втДанныеИзФайла.LASTNAME)
	|			И (втЖильцовИзБазы.Имя = втДанныеИзФайла.FIRSTNAME)
	|			И (втЖильцовИзБазы.Отчество = втДанныеИзФайла.SECONDNAME)
	|			И (втЖильцовИзБазы.КодДомаПоФИАС = втДанныеИзФайла.HOUSE_GUID)
	|			И (втЖильцовИзБазы.КвартираСтрокой = втДанныеИзФайла.FLAT)",
				"втЖильцовИзБазы.Фамилия = втДанныеИзФайла.LASTNAME)
	|			И (втЖильцовИзБазы.Имя = втДанныеИзФайла.FIRSTNAME)
	|			И (втЖильцовИзБазы.Отчество = втДанныеИзФайла.SECONDNAME)
	|			И (втЖильцовИзБазы.НаселенныйПункт = втДанныеИзФайла.CITY)
	|			И (втЖильцовИзБазы.Улица = втДанныеИзФайла.STREET)
	|			И (втЖильцовИзБазы.Дом = втДанныеИзФайла.HOUSE)
	|			И (втЖильцовИзБазы.Корпус = втДанныеИзФайла.HOUSE_LIT)
	|			И (втЖильцовИзБазы.Корпус = втДанныеИзФайла.HOUSING)
	|			И (втЖильцовИзБазы.КвартираСтрокой = втДанныеИзФайла.FLAT)")) +
	"
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(втЖильцовИзБазы.ЛицевойСчет, ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)),
	|	втДанныеИзФайла.PERSON_ID,
	|	втДанныеИзФайла.LASTNAME,
	|	втДанныеИзФайла.FIRSTNAME,
	|	втДанныеИзФайла.SECONDNAME,
	|	втДанныеИзФайла.CITY,
	|	втДанныеИзФайла.STREET,
	|	втДанныеИзФайла.HOUSE,
	|	втДанныеИзФайла.HOUSE_LIT,
	|	втДанныеИзФайла.HOUSING,
	|	втДанныеИзФайла.FLAT";
	
	ТаблицаИдентифицированныхЛьготников = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекСтрока Из ТаблицаДляЗагрузки Цикл
		
		НайденныйЛС = ТаблицаИдентифицированныхЛьготников.Найти(ТекСтрока.PERSON_ID, "PERSON_ID");
		Если НЕ НайденныйЛС = Неопределено Тогда
			
			ТекСтрока.ЛицевойСчетВБазе = НайденныйЛС.ЛицевойСчет;
			ТекСтрока.ФИОЖильцов       = НайденныйЛС.Жилец;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Добавление на форму дополнительных реквизитов и элементов.
Процедура ИзменитьФорму(ТЗ)
	
	ИмяФайла = "ID" + СтрЗаменить(ТЗ[0][6]," ","");
	
	// Проверяем на наличие добавляемых элементов на форме.
	Если НЕ Элементы.Найти(ИмяФайла) = Неопределено Тогда
		
		// Удаляем реквизиты.
		МассивУдаляемыхРеквизитов = Новый Массив;
		МассивУдаляемыхРеквизитов.Добавить(ИмяФайла);
		ИзменитьРеквизиты( ,МассивУдаляемыхРеквизитов);
		
		// Удаляем элементы.
		Элементы.Удалить(Элементы.Найти(ИмяФайла));
		
	КонецЕсли;
	
	// Добавляем реквизиты.
	МассивДобавляемыхРеквизитов = Новый Массив;
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяФайла, Новый ОписаниеТипов("ТаблицаЗначений")));
	
	// Записываем название ТЗ в СписокТаблицЗначений.
	ЗаписываемыйТЗ = Объект.СамарскаяОбласть_СписокТаблицЗначений.Добавить();
	ЗаписываемыйТЗ.НазваниеТаблицыЗначений = ИмяФайла;
	
	Для Каждого Колонка Из ТЗ.Колонки Цикл 
		РеквизитФормы = Новый РеквизитФормы(Колонка.Имя, Колонка.ТипЗначения, ИмяФайла, Колонка.Заголовок);
		МассивДобавляемыхРеквизитов.Добавить(РеквизитФормы);
	КонецЦикла;
	
	ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	// Добавляем элементы формы.
	Если Элементы.Найти("ГруппаСтраницы")= Неопределено Тогда
		СтраницыФормы = Элементы.Добавить("ГруппаСтраницы",Тип("ГруппаФормы"));
		СтраницыФормы.Вид = ВидГруппыФормы.Страницы;
	КонецЕсли;
	
	// Находим наименование услуги в ГИС НМСПН.
	Отбор = Новый Структура;
	Отбор.Вставить("ИдентификаторУслуги", ТЗ[0][6]);
	НазваниеУслуги = Объект.СамарскаяОбласть_УслугиВ_ГИС_НМСПН.НайтиСтроки(Отбор);
	Для каждого строка Из НазваниеУслуги Цикл
		НазваниеУслуги = строка.НаименованиеУслуги;
	КонецЦикла;
		
	
	СтраницаФормы = Элементы.Добавить(ИмяФайла,Тип("ГруппаФормы"),Элементы.ГруппаСтраницы);
	СтраницаФормы.Вид = ВидГруппыФормы.Страница;
	СтраницаФормы.Заголовок = ИмяФайла + " (" + НазваниеУслуги + ")";
	
	ИмяТаблицы = "ТаблицаФормы" + ИмяФайла;
	ТаблицаФормы = Элементы.Добавить(ИмяТаблицы, Тип("ТаблицаФормы"), Элементы[ИмяФайла]);
	ТаблицаФормы.ПутьКДанным = ИмяФайла;
	
	Для Каждого Колонка Из ТЗ.Колонки Цикл 
		Элемент = Элементы.Добавить(ИмяТаблицы + Колонка.Имя, Тип("ПолеФормы"), Элементы[ИмяТаблицы]);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = ИмяФайла + "." + Колонка.Имя;
		
		Если Колонка.Имя = "ЛицевойСчетВБазе" Или Колонка.Имя = "ФИОЖильцов" Тогда
			
			Элемент.АвтоОтметкаНезаполненного = Истина;
			Элемент.ИсторияВыбораПриВводе     = ИсторияВыбораПриВводе.НеИспользовать;
			Элемент.КнопкаСоздания            = Ложь;
			
			Если Колонка.Имя = "ФИОЖильцов" Тогда
				
				Элемент.УстановитьДействие("НачалоВыбора", "ФИОЖильцовНачалоВыбора");
				Элемент.УстановитьДействие("ПриИзменении", "ФИОЖильцовПриИзменении");
				
			ИначеЕсли Колонка.Имя = "ЛицевойСчетВБазе" Тогда
				
				Элемент.УстановитьДействие("ПриИзменении", "ЛицевойСчетВБазеПриИзменении");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Загружаем данные в созданную таблицу.
	ЭтаФорма[ИмяФайла].Загрузить(ТЗ);
	
КонецПроцедуры // ИзменитьФорму()

&НаКлиенте
// Обработчик команды "Заполнить".
Процедура КомандаЗаполнить(Команда)
	
	Если Объект.СамарскаяОбласть_УслугиВ_ГИС_НМСПН.Количество() = 0
	 ИЛИ Объект.СамарскаяОбласть_УслугиВБазе.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указаны настройки соответствия услуг на форме настроек!");
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка ИЗ Объект.СамарскаяОбласть_СписокТаблицЗначений Цикл
		
		КомандаЗаполнитьНаСервере(Строка.НазваниеТаблицыЗначений);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Процедура заполнения всех данных.
Процедура КомандаЗаполнитьНаСервере(ИмяФайла)
	
	// Записть данных формы в Таблицу Значений
	ТаблицаДляЗагрузки = Новый ТаблицаЗначений;
	ТаблицаДляЗагрузки = РеквизитФормыВЗначение(ИмяФайла);
	
	// Получение данных из формы настроек для таблицы УслугиВОСЗН.
	КодУслугиВОСЗН = ТаблицаДляЗагрузки[0][6];
	Отбор = Новый Структура;
	Отбор.Вставить("ИдентификаторУслуги", КодУслугиВОСЗН);
	
	СтрокиСУслугойВГИС = Объект.СамарскаяОбласть_УслугиВ_ГИС_НМСПН.НайтиСтроки(Отбор);
	
	Если СтрокиСУслугойВГИС.Количество() = 0 Тогда
		Отказ = Истина;
	Иначе
		ИдентификаторУслуги = СтрокиСУслугойВГИС[0].ИдентификаторУслуги;
		НаименованиеУслуги  = СтрокиСУслугойВГИС[0].НаименованиеУслуги;
		СпособСвертки       = СтрокиСУслугойВГИС[0].СпособСверткиТарифа;
		НомерСтроки         = СтрокиСУслугойВГИС[0].НомерСтроки;
	КонецЕсли;
	
	// Получение данных из формы настроек для таблицы "УслугиВБазе".
	Услуги                      = Новый Массив;
	СписокОбщедомовыхУслуг      = Новый Массив;
	СписокИндивидуальныхУслуг   = Новый Массив;
	СписокИндивИОбщедомУслуг    = Новый Массив;
	
	СписокУслуг = Новый ТаблицаЗначений;
	СписокУслуг.Колонки.Добавить("Услуга",          Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
	СписокУслуг.Колонки.Добавить("Теплоноситель",   Новый ОписаниеТипов("Булево"));
	СписокУслуг.Колонки.Добавить("ТепловаяЭнергия", Новый ОписаниеТипов("Булево"));
	
	ОтборВБазе = Новый Структура;
	ОтборВБазе.Вставить("Идентификатор", НомерСтроки);
	НайденнаяСтрока = Объект.СамарскаяОбласть_УслугиВБазе.НайтиСтроки(ОтборВБазе);
	
	Для Каждого Строка Из НайденнаяСтрока Цикл
		Услуги.Добавить(Строка.Услуга);
		
		Список = СписокУслуг.Добавить();
		Список.Услуга           = (Строка.Услуга);
		Список.Теплоноситель    = (Строка.Теплоноситель);
		Список.ТепловаяЭнергия  = (Строка.ТепловаяЭнергия);
		
		Если Строка.СпособОпределенияНачислений = "Общедомовая" Тогда
			
			СписокОбщедомовыхУслуг.Добавить(Строка.Услуга);
			
		ИначеЕсли Строка.СпособОпределенияНачислений = "Индивидуальная" Тогда
			
			СписокИндивидуальныхУслуг.Добавить(Строка.Услуга);
			
		ИначеЕсли строка.СпособОпределенияНачислений = "Индивидуальная и общедомовая" Тогда
			
			СписокИндивИОбщедомУслуг.Добавить(Строка.Услуга);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// 1. подгружаем таблицу для загрузки.
	// 2. получаем сведения о количестве зарегистрированных.
	// 3. получаем сведения об остатках, суммах начиаления и оплаты.
	// 4. получаем сведения о площадях.
	// 5. получаем сведения о тарифах
	// 6. получаем сведения о статусе.

	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаДляЗагрузки",                   ТаблицаДляЗагрузки);
	Запрос.УстановитьПараметр("ДатаНач",                              НачалоМесяца(Объект.Период));
	Запрос.УстановитьПараметр("ДатаКон",                              КонецМесяца(Объект.Период));
	Запрос.УстановитьПараметр("УказыватьКоличествоПрожИЗарегЧислами", Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Получить());
	Запрос.УстановитьПараметр("Организация",                          Объект.Организация);
	Запрос.УстановитьПараметр("СписокДопустимыхУслуг",                Услуги);
	Запрос.УстановитьПараметр("ORG_ID",                               ИдентификаторОрганизации);
	Запрос.УстановитьПараметр("СписокОбщедомовыхУслуг",               СписокОбщедомовыхУслуг);
	Запрос.УстановитьПараметр("СписокИндивидуальныхУслуг",            СписокИндивидуальныхУслуг);
	Запрос.УстановитьПараметр("СписокИндивИОбщедомУслуг",             СписокИндивИОбщедомУслуг);
	Запрос.УстановитьПараметр("СписокУслуг",                          СписокУслуг);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДляЗагрузки.ЛицевойСчетВБазе КАК ЛицевойСчетВБазе,
	|	ТаблицаДляЗагрузки.SERVICE_ID,
	|	ТаблицаДляЗагрузки.PERSON_ID,
	|	ТаблицаДляЗагрузки.MAN_DIS_ID,
	|	ТаблицаДляЗагрузки.ФИОЖильцов
	|ПОМЕСТИТЬ втДанныеИзФайла
	|ИЗ
	|	&ТаблицаДляЗагрузки КАК ТаблицаДляЗагрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец) КАК КоличествоЗарегистрированных,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет
	|ПОМЕСТИТЬ втКоличествоИзРегистра
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втДанныеИзФайла.ЛицевойСчетВБазе
	|					ИЗ
	|						втДанныеИзФайла КАК втДанныеИзФайла)
	|				И ДатаИзменения <= &ДатаКон) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.ЛицевойСчет,
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.КоличествоЗарегистрированных КАК КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втУчетКоличестваЖильцов
	|ИЗ
	|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втДанныеИзФайла.ЛицевойСчетВБазе
	|				ИЗ
	|					втДанныеИзФайла КАК втДанныеИзФайла)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеИзФайла.ЛицевойСчетВБазе,
	|	втДанныеИзФайла.SERVICE_ID,
	|	втДанныеИзФайла.PERSON_ID,
	|	втДанныеИзФайла.MAN_DIS_ID,
	|	втДанныеИзФайла.ФИОЖильцов,
	|	ВЫБОР
	|		КОГДА &УказыватьКоличествоПрожИЗарегЧислами = ИСТИНА
	|			ТОГДА ЕСТЬNULL(втУчетКоличестваЖильцов.КоличествоЗарегистрированных, 0)
	|		ИНАЧЕ ЕСТЬNULL(втКоличествоИзРегистра.КоличествоЗарегистрированных, 0)
	|	КОНЕЦ КАК REG_QUANT
	|ПОМЕСТИТЬ втКоличествоЗарегистрированных
	|ИЗ
	|	втДанныеИзФайла КАК втДанныеИзФайла
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУчетКоличестваЖильцов КАК втУчетКоличестваЖильцов
	|		ПО втДанныеИзФайла.ЛицевойСчетВБазе = втУчетКоличестваЖильцов.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКоличествоИзРегистра КАК втКоличествоИзРегистра
	|		ПО втДанныеИзФайла.ЛицевойСчетВБазе = втКоличествоИзРегистра.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втКоличествоИзРегистра
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втУчетКоличестваЖильцов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияНачальныйОстаток КАК S_BALANCE,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияКонечныйОстаток КАК E_BALANCE
	|ПОМЕСТИТЬ втОстатков
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втКоличествоЗарегистрированных.ЛицевойСчетВБазе
	|					ИЗ
	|						втКоличествоЗарегистрированных КАК втКоличествоЗарегистрированных)
	|				И Услуга В (&СписокДопустимыхУслуг)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.Тариф,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|			ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК PAID,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.Услуга В (&СписокОбщедомовыхУслуг)
	|				И УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|			ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|		КОГДА УПЖКХ_НачисленияОбороты.Услуга В (&СписокИндивидуальныхУслуг)
	|				И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|			ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|		КОГДА УПЖКХ_НачисленияОбороты.Услуга В (&СписокИндивИОбщедомУслуг)
	|				И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|			ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК CREDITED
	|ПОМЕСТИТЬ втНачисления
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втКоличествоЗарегистрированных.ЛицевойСчетВБазе
	|					ИЗ
	|						втКоличествоЗарегистрированных КАК втКоличествоЗарегистрированных)
	|				И Услуга В (&СписокДопустимыхУслуг)
	|				И РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени))
	|				И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ВводНачальногоСальдо), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Комиссия))) КАК УПЖКХ_НачисленияОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачисления.ЛицевойСчет КАК ЛицевойСчет,
	|	СУММА(втНачисления.CREDITED) КАК CREDITED,
	|	СУММА(втНачисления.PAID) КАК PAID
	|ПОМЕСТИТЬ втНачисленийИОплат
	|ИЗ
	|	втНачисления КАК втНачисления
	|
	|СГРУППИРОВАТЬ ПО
	|	втНачисления.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКоличествоЗарегистрированных.ЛицевойСчетВБазе,
	|	втКоличествоЗарегистрированных.SERVICE_ID,
	|	втКоличествоЗарегистрированных.PERSON_ID,
	|	втКоличествоЗарегистрированных.MAN_DIS_ID,
	|	втКоличествоЗарегистрированных.ФИОЖильцов,
	|	втКоличествоЗарегистрированных.REG_QUANT,
	|	ЕСТЬNULL(втНачисленийИОплат.CREDITED, 0) КАК CREDITED,
	|	ЕСТЬNULL(втНачисленийИОплат.PAID, 0) КАК PAID,
	|	ЕСТЬNULL(втОстатков.S_BALANCE, 0) КАК S_BALANCE,
	|	ЕСТЬNULL(втОстатков.E_BALANCE, 0) КАК E_BALANCE
	|ПОМЕСТИТЬ втСведенияОНачисленияхОплатахИОстатках
	|ИЗ
	|	втКоличествоЗарегистрированных КАК втКоличествоЗарегистрированных
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОстатков КАК втОстатков
	|		ПО втКоличествоЗарегистрированных.ЛицевойСчетВБазе = втОстатков.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНачисленийИОплат КАК втНачисленийИОплат
	|		ПО втКоличествоЗарегистрированных.ЛицевойСчетВБазе = втНачисленийИОплат.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втОстатков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втНачисленийИОплат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втКоличествоЗарегистрированных";
	
	Запрос.Выполнить();
	
	// Выше это запрос фиксированный.
	// Ниже динамический, для каждой услуги свой.
	
	Запрос.УстановитьПараметр("СпособСвертки", СпособСвертки);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет,
	|	ВЫБОР
	|		КОГДА КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель = 0
	|			ТОГДА 0
	|		ИНАЧЕ КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель / КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель
	|	КОНЕЦ КАК ДоляЛС,
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель,
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель,
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.Период КАК ДатаРегистрацииПравСобственности
	|ПОМЕСТИТЬ втДолиЛС
	|ИЗ
	|	РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втСведенияОНачисленияхОплатахИОстатках.ЛицевойСчетВБазе
	|				ИЗ
	|					втСведенияОНачисленияхОплатахИОстатках КАК втСведенияОНачисленияхОплатахИОстатках)) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект КАК Помещение,
	|	КВП_ПлощадьПомещенияСрезПоследних.Площадь КАК SQUARE
	|ПОМЕСТИТЬ втПлощадиПомещений
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|			&ДатаКон,
	|			Объект В
	|					(ВЫБРАТЬ
	|						втДолиЛС.ЛицевойСчет.Адрес
	|					ИЗ
	|						втДолиЛС КАК втДолиЛС)
	|				И ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)) КАК КВП_ПлощадьПомещенияСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСведенияОНачисленияхОплатахИОстатках.ЛицевойСчетВБазе,
	|	втСведенияОНачисленияхОплатахИОстатках.SERVICE_ID,
	|	втСведенияОНачисленияхОплатахИОстатках.PERSON_ID,
	|	втСведенияОНачисленияхОплатахИОстатках.MAN_DIS_ID,
	|	втСведенияОНачисленияхОплатахИОстатках.ФИОЖильцов,
	|	втСведенияОНачисленияхОплатахИОстатках.REG_QUANT,
	|	втСведенияОНачисленияхОплатахИОстатках.CREDITED,
	|	втСведенияОНачисленияхОплатахИОстатках.PAID,
	|	втСведенияОНачисленияхОплатахИОстатках.S_BALANCE,
	|	втСведенияОНачисленияхОплатахИОстатках.E_BALANCE,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втДолиЛС.ДоляЛС, 0) <> 0
	|			ТОГДА втДолиЛС.ДоляЛС * ЕСТЬNULL(втПлощадиПомещений.SQUARE, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК SQUARE,
	|	ЕСТЬNULL(втДолиЛС.ДоляЧислитель, 0) КАК ДоляЧислитель,
	|	ЕСТЬNULL(втДолиЛС.ДоляЗнаменатель, 0) КАК ДоляЗнаменатель,
	|	ЕСТЬNULL(втДолиЛС.ДатаРегистрацииПравСобственности, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРегистрацииПравСобственности
	|ПОМЕСТИТЬ втНачисленияСПлощадями
	|ИЗ
	|	втСведенияОНачисленияхОплатахИОстатках КАК втСведенияОНачисленияхОплатахИОстатках
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДолиЛС КАК втДолиЛС
	|		ПО втСведенияОНачисленияхОплатахИОстатках.ЛицевойСчетВБазе = втДолиЛС.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПлощадиПомещений КАК втПлощадиПомещений
	|		ПО втСведенияОНачисленияхОплатахИОстатках.ЛицевойСчетВБазе.Адрес = втПлощадиПомещений.Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втСведенияОНачисленияхОплатахИОстатках
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втДолиЛС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втПлощадиПомещений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокУслуг.Услуга,
	|	СписокУслуг.Теплоноситель,
	|	СписокУслуг.ТепловаяЭнергия
	|ПОМЕСТИТЬ втСписокУслуг
	|ИЗ
	|	&СписокУслуг КАК СписокУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачисления.ЛицевойСчет,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втСписокУслуг.ТепловаяЭнергия, ЛОЖЬ) = ИСТИНА
	|			ТОГДА втНачисления.Тариф
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ТарифТепловаяЭнергия,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втСписокУслуг.ТепловаяЭнергия, ЛОЖЬ) = ЛОЖЬ
	|			ТОГДА втНачисления.Тариф
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Тариф
	|ПОМЕСТИТЬ втНенулевыеТарифы
	|ИЗ
	|	втНачисления КАК втНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСписокУслуг КАК втСписокУслуг
	|		ПО втНачисления.Услуга = втСписокУслуг.Услуга
	|ГДЕ
	|	втНачисления.Тариф <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	Если СпособСвертки = "Суммировать" Тогда
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	втНенулевыеТарифы.ЛицевойСчет,
		|	СУММА(втНенулевыеТарифы.Тариф) КАК STD_RATE,
		|	СУММА(втНенулевыеТарифы.ТарифТепловаяЭнергия) КАК STDC_RATE
		|ПОМЕСТИТЬ втСвернутыеТарифы
		|ИЗ
		|	втНенулевыеТарифы КАК втНенулевыеТарифы
		|
		|СГРУППИРОВАТЬ ПО
		|	втНенулевыеТарифы.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
	ИначеЕсли СпособСвертки = "Минимум" Тогда
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	втНенулевыеТарифы.ЛицевойСчет,
		|	МИНИМУМ(втНенулевыеТарифы.Тариф) КАК STD_RATE,
		|	МИНИМУМ(втНенулевыеТарифы.ТарифТепловаяЭнергия) КАК STDC_RATE
		|ПОМЕСТИТЬ втСвернутыеТарифы
		|ИЗ
		|	втНенулевыеТарифы КАК втНенулевыеТарифы
		|
		|СГРУППИРОВАТЬ ПО
		|	втНенулевыеТарифы.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
	ИначеЕсли СпособСвертки = "Максимум" Тогда
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	втНенулевыеТарифы.ЛицевойСчет,
		|	МАКСИМУМ(втНенулевыеТарифы.Тариф) КАК STD_RATE,
		|	МАКСИМУМ(втНенулевыеТарифы.ТарифТепловаяЭнергия) КАК STDC_RATE
		|ПОМЕСТИТЬ втСвернутыеТарифы
		|ИЗ
		|	втНенулевыеТарифы КАК втНенулевыеТарифы
		|
		|СГРУППИРОВАТЬ ПО
		|	втНенулевыеТарифы.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
	ИначеЕсли СпособСвертки = "Усреднять" Тогда
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	втНенулевыеТарифы.ЛицевойСчет,
		|	СРЕДНЕЕ(втНенулевыеТарифы.Тариф) КАК STD_RATE,
		|	СРЕДНЕЕ(втНенулевыеТарифы.ТарифТепловаяЭнергия) КАК STDC_RATE
		|ПОМЕСТИТЬ втСвернутыеТарифы
		|ИЗ
		|	втНенулевыеТарифы КАК втНенулевыеТарифы
		|
		|СГРУППИРОВАТЬ ПО
		|	втНенулевыеТарифы.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст +
	"ВЫБРАТЬ
	|	втНачисленияСПлощадями.ЛицевойСчетВБазе,
	|	втНачисленияСПлощадями.SERVICE_ID,
	|	втНачисленияСПлощадями.PERSON_ID,
	|	ВЫБОР 
	|		КОГДА втНачисленияСПлощадями.MAN_DIS_ID = """"
	|			ТОГДА втНачисленияСПлощадями.ЛицевойСчетВБазе.Код
	|		ИНАЧЕ втНачисленияСПлощадями.MAN_DIS_ID
	|	КОНЕЦ КАК MAN_DIS_ID,
	|	втНачисленияСПлощадями.ФИОЖильцов,
	|	втНачисленияСПлощадями.REG_QUANT,
	|	втНачисленияСПлощадями.CREDITED КАК CREDITED,
	|	втНачисленияСПлощадями.PAID КАК PAID,
	|	втНачисленияСПлощадями.S_BALANCE КАК S_BALANCE,
	|	втНачисленияСПлощадями.E_BALANCE КАК E_BALANCE,
	|	втНачисленияСПлощадями.SQUARE,
	|	втНачисленияСПлощадями.ДоляЧислитель,
	|	втНачисленияСПлощадями.ДоляЗнаменатель,
	|	втНачисленияСПлощадями.ДатаРегистрацииПравСобственности,
	|	ЕСТЬNULL(втСвернутыеТарифы.STD_RATE, 0) КАК STD_RATE,
	|	ЕСТЬNULL(втСвернутыеТарифы.STDC_RATE, 0) КАК STDC_RATE,
	|	ВЫБОР
	|		КОГДА втНачисленияСПлощадями.ЛицевойСчетВБазе = ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)
	|			ТОГДА 1
	|		ИНАЧЕ ВЫБОР
	|				КОГДА втНачисленияСПлощадями.CREDITED = 0 И втНачисленияСПлощадями.S_BALANCE = 0
	|					ТОГДА 2
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК STATUS,
	|	&ORG_ID,
	|	&ДатаНач КАК FROM_DATE,
	|	&ДатаКон КАК TO_DATE
	|ПОМЕСТИТЬ втФиксированныеПоля
	|ИЗ
	|	втНачисленияСПлощадями КАК втНачисленияСПлощадями
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСвернутыеТарифы КАК втСвернутыеТарифы
	|		ПО втНачисленияСПлощадями.ЛицевойСчетВБазе = втСвернутыеТарифы.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	
	// «Оплата жилья», «Общедомовые нужды» и «Найм жилья».
	Если НаименованиеУслуги = "Оплата жилья" Или НаименованиеУслуги = "Общедомовые расходы" Или НаименованиеУслуги = "Найм жилья" Тогда
		
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	втФиксированныеПоля.ЛицевойСчетВБазе,
		|	втФиксированныеПоля.SERVICE_ID,
		|	втФиксированныеПоля.PERSON_ID,
		|	втФиксированныеПоля.MAN_DIS_ID,
		|	втФиксированныеПоля.ФИОЖильцов,
		|	втФиксированныеПоля.REG_QUANT,
		|	втФиксированныеПоля.CREDITED,
		|	втФиксированныеПоля.PAID,
		|	втФиксированныеПоля.S_BALANCE,
		|	втФиксированныеПоля.E_BALANCE,
		|	втФиксированныеПоля.STD_RATE,
		|	втФиксированныеПоля.SQUARE,
		|	втФиксированныеПоля.STATUS,
		|	втФиксированныеПоля.FROM_DATE,
		|	втФиксированныеПоля.TO_DATE,
		|	втФиксированныеПоля.ORG_ID
		|ИЗ
		|	втФиксированныеПоля КАК втФиксированныеПоля";
		
		ТаблицаСДанными = Запрос.Выполнить().Выгрузить();
		
		ОтборСтрок = Новый Структура("PERSON_ID");
		
		Для каждого ТекЛицевойСчет Из ТаблицаСДанными Цикл
			
			ОтборСтрок.PERSON_ID = ТекЛицевойСчет.PERSON_ID;
			
			НайденныеСтроки = ЭтаФорма[ИмяФайла].НайтиСтроки(ОтборСтрок);
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				Если НЕ НайденныеСтроки[0].ЛицевойСчетВБазе.Наименование = "" Тогда
					
					ЗаполнитьЗначенияСвойств(НайденныеСтроки[0], ТекЛицевойСчет, "MAN_DIS_ID, REG_QUANT, CREDITED, PAID, S_BALANCE, E_BALANCE, SQUARE, STD_RATE, STATUS, FROM_DATE, TO_DATE, ORG_ID");
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	// «Холодное водоснабжение»	
	ИначеЕсли НаименованиеУслуги = "Холодное водоснабжение" Тогда
		
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	втФиксированныеПоля.ЛицевойСчетВБазе,
		|	втФиксированныеПоля.SERVICE_ID,
		|	втФиксированныеПоля.PERSON_ID,
		|	втФиксированныеПоля.MAN_DIS_ID,
		|	втФиксированныеПоля.ФИОЖильцов,
		|	втФиксированныеПоля.REG_QUANT,
		|	втФиксированныеПоля.CREDITED,
		|	втФиксированныеПоля.PAID,
		|	втФиксированныеПоля.S_BALANCE,
		|	втФиксированныеПоля.E_BALANCE,
		|	втФиксированныеПоля.STD_RATE,
		|	втФиксированныеПоля.STATUS,
		|	втФиксированныеПоля.FROM_DATE,
		|	втФиксированныеПоля.TO_DATE,
		|	втФиксированныеПоля.ORG_ID
		|ПОМЕСТИТЬ втПоляФиксированные
		|ИЗ
		|	втФиксированныеПоля КАК втФиксированныеПоля
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет,
		|	ВЫБОР
		|		КОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки = ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой)
		|			ТОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Размер
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НормаПотребленияРазмер,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления
		|ПОМЕСТИТЬ втУслуги
		|ИЗ
		|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(
		|			&ДатаКон,
		|			ЛицевойСчет В
		|					(ВЫБРАТЬ
		|						втПоляФиксированные.ЛицевойСчетВБазе
		|					ИЗ
		|						втПоляФиксированные КАК втПоляФиксированные)
		|				И Услуга В (&СписокДопустимыхУслуг)) КАК КВП_НормыПотребленияУслугЛССрезПоследних
		|ГДЕ
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Основание = ЗНАЧЕНИЕ(Перечисление.КВП_ОснованияНормПотребления.ОдинЧеловек)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПоляФиксированные.ЛицевойСчетВБазе,
		|	втПоляФиксированные.SERVICE_ID,
		|	втПоляФиксированные.PERSON_ID,
		|	втПоляФиксированные.MAN_DIS_ID,
		|	втПоляФиксированные.ФИОЖильцов,
		|	втПоляФиксированные.REG_QUANT,
		|	втПоляФиксированные.CREDITED,
		|	втПоляФиксированные.PAID,
		|	втПоляФиксированные.S_BALANCE,
		|	втПоляФиксированные.E_BALANCE,
		|	втПоляФиксированные.STATUS,
		|	втПоляФиксированные.STD_RATE,
		|	втПоляФиксированные.FROM_DATE,
		|	втПоляФиксированные.TO_DATE,
		|	втПоляФиксированные.ORG_ID,
		|	ЕСТЬNULL(втУслуги.НормаПотребленияРазмер, 0) КАК STD_COUNT,
		|	втУслуги.НормаПотребленияВариантНастройки,
		|	втУслуги.НормаПотребления
		|ИЗ
		|	втПоляФиксированные КАК втПоляФиксированные
		|		ЛЕВОЕ СОЕДИНЕНИЕ втУслуги КАК втУслуги
		|		ПО втПоляФиксированные.ЛицевойСчетВБазе = втУслуги.ЛицевойСчет";
		
		ТаблицаСДанными = Запрос.Выполнить().Выгрузить();
		
		ОтборСтрок = Новый Структура("PERSON_ID");
		
		Для каждого ТекЛицевойСчет Из ТаблицаСДанными Цикл
			
			ОтборСтрок.PERSON_ID = ТекЛицевойСчет.PERSON_ID;
			
			НайденныеСтроки = ЭтаФорма[ИмяФайла].НайтиСтроки(ОтборСтрок);
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				Если ТекЛицевойСчет.НормаПотребленияВариантНастройки = Перечисления.КВП_ВариантыНастроекРасчетаНормативовПотребления.Расширенный ИЛИ ТекЛицевойСчет.НормаПотребленияВариантНастройки = Перечисления.КВП_ВариантыНастроекРасчетаНормативовПотребления.Формула  Тогда
					
					ТекЛицевойСчет.STD_COUNT = ПолучитьРазмерНормыПотребления(ТекЛицевойСчет.ЛицевойСчетВБазе, КонецМесяца(Объект.Период), ТекЛицевойСчет.НормаПотребления, Объект.Организация)	
					
				КонецЕсли;
				
				Если НЕ НайденныеСтроки[0].ЛицевойСчетВБазе.Наименование = "" Тогда
					
					ЗаполнитьЗначенияСвойств(НайденныеСтроки[0], ТекЛицевойСчет, "MAN_DIS_ID, REG_QUANT, CREDITED, PAID, S_BALANCE, E_BALANCE, STD_COUNT, STD_RATE, STATUS, FROM_DATE, TO_DATE, ORG_ID");
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		
	// «Горячее водоснабжение»	
	ИначеЕсли НаименованиеУслуги = "Горячее водоснабжение" Тогда	
		
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	втФиксированныеПоля.ЛицевойСчетВБазе,
		|	втФиксированныеПоля.SERVICE_ID,
		|	втФиксированныеПоля.PERSON_ID,
		|	втФиксированныеПоля.MAN_DIS_ID,
		|	втФиксированныеПоля.ФИОЖильцов,
		|	втФиксированныеПоля.REG_QUANT,
		|	втФиксированныеПоля.CREDITED,
		|	втФиксированныеПоля.PAID,
		|	втФиксированныеПоля.S_BALANCE,
		|	втФиксированныеПоля.E_BALANCE,
		|	втФиксированныеПоля.STD_RATE,
		|	втФиксированныеПоля.STDC_RATE,
		|	втФиксированныеПоля.STATUS,
		|	втФиксированныеПоля.FROM_DATE,
		|	втФиксированныеПоля.TO_DATE,
		|	втФиксированныеПоля.ORG_ID
		|ПОМЕСТИТЬ втПоляФиксированные
		|ИЗ
		|	втФиксированныеПоля КАК втФиксированныеПоля
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления,
		|	ВЫБОР
		|		КОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки = ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой)
		|			ТОГДА ВЫБОР
		|					КОГДА втСписокУслуг.ТепловаяЭнергия = ЛОЖЬ
		|						ТОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Размер
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК STD_COUNT,
		|	ВЫБОР
		|		КОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки = ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой)
		|			ТОГДА ВЫБОР
		|					КОГДА втСписокУслуг.ТепловаяЭнергия = ИСТИНА
		|						ТОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Размер
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК STDC_COUNT,
		|	втСписокУслуг.Теплоноситель,
		|	втСписокУслуг.ТепловаяЭнергия,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Размер,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Основание
		|ПОМЕСТИТЬ втУслуги
		|ИЗ
		|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(
		|			&ДатаКон,
		|			ЛицевойСчет В
		|					(ВЫБРАТЬ
		|						втПоляФиксированные.ЛицевойСчетВБазе
		|					ИЗ
		|						втПоляФиксированные КАК втПоляФиксированные)
		|				И Услуга В (&СписокДопустимыхУслуг)) КАК КВП_НормыПотребленияУслугЛССрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСписокУслуг КАК втСписокУслуг
		|		ПО КВП_НормыПотребленияУслугЛССрезПоследних.Услуга = втСписокУслуг.Услуга
		|ГДЕ
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Основание = ЗНАЧЕНИЕ(Перечисление.КВП_ОснованияНормПотребления.ОдинЧеловек)
		|
		|СГРУППИРОВАТЬ ПО
		|	втСписокУслуг.ТепловаяЭнергия,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет,
		|	втСписокУслуг.Теплоноситель,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Размер,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Основание
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПоляФиксированные.ЛицевойСчетВБазе,
		|	втПоляФиксированные.SERVICE_ID,
		|	втПоляФиксированные.PERSON_ID,
		|	втПоляФиксированные.MAN_DIS_ID,
		|	втПоляФиксированные.ФИОЖильцов,
		|	втПоляФиксированные.REG_QUANT,
		|	втПоляФиксированные.CREDITED,
		|	втПоляФиксированные.PAID,
		|	втПоляФиксированные.S_BALANCE,
		|	втПоляФиксированные.E_BALANCE,
		|	втПоляФиксированные.STATUS,
		|	втПоляФиксированные.FROM_DATE,
		|	втПоляФиксированные.TO_DATE,
		|	втПоляФиксированные.ORG_ID,
		|	ЕСТЬNULL(втУслуги.НормаПотребленияВариантНастройки, ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)) КАК НормаПотребленияВариантНастройки,
		|	ЕСТЬNULL(втУслуги.STD_COUNT, 0) КАК STD_COUNT,
		|	ЕСТЬNULL(втУслуги.STDC_COUNT, 0) КАК STDC_COUNT,
		|	втПоляФиксированные.STD_RATE,
		|	втПоляФиксированные.STDC_RATE,
		|	втУслуги.НормаПотребленияОснование,
		|	втУслуги.Теплоноситель,
		|	втУслуги.ТепловаяЭнергия,
		|	втУслуги.НормаПотребления
		|ИЗ
		|	втПоляФиксированные КАК втПоляФиксированные
		|		ЛЕВОЕ СОЕДИНЕНИЕ втУслуги КАК втУслуги
		|		ПО втПоляФиксированные.ЛицевойСчетВБазе = втУслуги.ЛицевойСчет";
		
		ТаблицаСДанными = Запрос.Выполнить().Выгрузить();
		
		ОтборСтрок = Новый Структура("PERSON_ID");
		
		Для каждого ТекЛицевойСчет Из ТаблицаСДанными Цикл
			
			ОтборСтрок.PERSON_ID = ТекЛицевойСчет.PERSON_ID;
			
			НайденныеСтроки = ЭтаФорма[ИмяФайла].НайтиСтроки(ОтборСтрок);
			
			Если ТекЛицевойСчет.НормаПотребленияВариантНастройки = Перечисления.КВП_ВариантыНастроекРасчетаНормативовПотребления.Расширенный 
				ИЛИ ТекЛицевойСчет.НормаПотребленияВариантНастройки = Перечисления.КВП_ВариантыНастроекРасчетаНормативовПотребления.Формула  Тогда
				
				Если ТекЛицевойСчет.ТепловаяЭнергия = ЛОЖЬ Тогда
					
					ТекЛицевойСчет.STD_COUNT = ПолучитьРазмерНормыПотребления(ТекЛицевойСчет.ЛицевойСчетВБазе, КонецМесяца(Объект.Период), 
					ТекЛицевойСчет.НормаПотребления, Объект.Организация)
					
				ИначеЕсли ТекЛицевойСчет.ТепловаяЭнергия = ИСТИНА Тогда
					
					ТекЛицевойСчет.STDC_COUNT = ПолучитьРазмерНормыПотребления(ТекЛицевойСчет.ЛицевойСчетВБазе, КонецМесяца(Объект.Период), 
					ТекЛицевойСчет.НормаПотребления, Объект.Организация)
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		ЗапросГорячаяВода = Новый Запрос;
		
		ЗапросГорячаяВода.УстановитьПараметр("ТаблицаСДанными" , ТаблицаСДанными);
		
		ЗапросГорячаяВода.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаСДанными.ЛицевойСчетВБазе,
		|	ТаблицаСДанными.SERVICE_ID,
		|	ТаблицаСДанными.PERSON_ID,
		|	ТаблицаСДанными.MAN_DIS_ID,
		|	ТаблицаСДанными.ФИОЖильцов,
		|	ТаблицаСДанными.REG_QUANT,
		|	ТаблицаСДанными.CREDITED,
		|	ТаблицаСДанными.PAID,
		|	ТаблицаСДанными.S_BALANCE,
		|	ТаблицаСДанными.E_BALANCE,
		|	ТаблицаСДанными.STATUS,
		|	ТаблицаСДанными.FROM_DATE,
		|	ТаблицаСДанными.TO_DATE,
		|	ТаблицаСДанными.ORG_ID,
		|	ТаблицаСДанными.STD_COUNT,
		|	ТаблицаСДанными.STDC_COUNT,
		|	ТаблицаСДанными.STDC_RATE,
		|	ТаблицаСДанными.STD_RATE
		|ПОМЕСТИТЬ втДляГруппировки
		|ИЗ
		|	&ТаблицаСДанными КАК ТаблицаСДанными
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втДляГруппировки.ЛицевойСчетВБазе,
		|	втДляГруппировки.SERVICE_ID,
		|	втДляГруппировки.PERSON_ID,
		|	втДляГруппировки.MAN_DIS_ID,
		|	втДляГруппировки.ФИОЖильцов,
		|	втДляГруппировки.REG_QUANT,
		|	втДляГруппировки.CREDITED,
		|	втДляГруппировки.PAID,
		|	втДляГруппировки.S_BALANCE,
		|	втДляГруппировки.E_BALANCE,
		|	втДляГруппировки.STATUS,
		|	втДляГруппировки.FROM_DATE,
		|	втДляГруппировки.TO_DATE,
		|	втДляГруппировки.ORG_ID,
		|	СУММА(втДляГруппировки.STD_COUNT) КАК STD_COUNT,
		|	СУММА(втДляГруппировки.STDC_COUNT) КАК STDC_COUNT,
		|	СРЕДНЕЕ(втДляГруппировки.STDC_RATE) КАК STDC_RATE,
		|	СРЕДНЕЕ(втДляГруппировки.STD_RATE) КАК STD_RATE
		|ИЗ
		|	втДляГруппировки КАК втДляГруппировки
		|
		|СГРУППИРОВАТЬ ПО
		|	втДляГруппировки.ЛицевойСчетВБазе,
		|	втДляГруппировки.SERVICE_ID,
		|	втДляГруппировки.PERSON_ID,
		|	втДляГруппировки.MAN_DIS_ID,
		|	втДляГруппировки.ФИОЖильцов,
		|	втДляГруппировки.REG_QUANT,
		|	втДляГруппировки.CREDITED,
		|	втДляГруппировки.PAID,
		|	втДляГруппировки.S_BALANCE,
		|	втДляГруппировки.E_BALANCE,
		|	втДляГруппировки.STATUS,
		|	втДляГруппировки.FROM_DATE,
		|	втДляГруппировки.TO_DATE,
		|	втДляГруппировки.ORG_ID";
		
		ТаблицаСДанными = ЗапросГорячаяВода.Выполнить().Выгрузить();
		
		Для каждого ТекЛицевойСчет Из ТаблицаСДанными Цикл
			
			ОтборСтрок.PERSON_ID = ТекЛицевойСчет.PERSON_ID;
			НайденныеСтроки = ЭтаФорма[ИмяФайла].НайтиСтроки(ОтборСтрок);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				Если НЕ НайденныеСтроки[0].ЛицевойСчетВБазе.Наименование = "" Тогда
					
					ЗаполнитьЗначенияСвойств(НайденныеСтроки[0], ТекЛицевойСчет, "MAN_DIS_ID, REG_QUANT, CREDITED, PAID, S_BALANCE, E_BALANCE, STDC_COUNT, STDC_RATE, STD_COUNT, STD_RATE, FROM_DATE, TO_DATE, ORG_ID, STATUS");
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		
	// Водоотведение
	ИначеЕсли НаименованиеУслуги = "Водоотведение" Тогда
		
		// Получение данных о ГВС из формы настроек.
		ОтборГВС = Новый Структура;
		ОтборГВС.Вставить("НаименованиеУслуги", "Горячее водоснабжение");
		УслугаГВС = Объект.СамарскаяОбласть_УслугиВ_ГИС_НМСПН.НайтиСтроки(ОтборГВС);
		
		Для каждого строка Из УслугаГВС Цикл
			НомерСтроки = строка.НомерСтроки;
		КонецЦикла;
		
		ОтборГВСВБазе = Новый Структура;
		ОтборГВСВБазе.Вставить("Идентификатор", НомерСтроки);
		НайденнаяСтрока = Объект.СамарскаяОбласть_УслугиВБазе.НайтиСтроки(ОтборГВСВБазе);
		
		СписокУслугГВС = Новый ТаблицаЗначений;
		СписокУслугГВС.Колонки.Добавить("Услуга",          Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
		СписокУслугГВС.Колонки.Добавить("Теплоноситель",   Новый ОписаниеТипов("Булево"));
		СписокУслугГВС.Колонки.Добавить("ТепловаяЭнергия", Новый ОписаниеТипов("Булево"));
		
		Для каждого строка Из НайденнаяСтрока Цикл
			СписокУслуг                 = СписокУслугГВС.Добавить();
			СписокУслуг.Услуга          = строка.Услуга;
			СписокУслуг.Теплоноситель   = строка.Теплоноситель;
			СписокУслуг.ТепловаяЭнергия = строка.ТепловаяЭнергия;
		КонецЦикла;
		
		// Необходимо добавить список услуг по холодному водоснабжению для определения норматива потребления и последующего заполнения поля "STDC_COUNT".
		// Получение данных о ХВС из формы настроек.
		ОтборХВС = Новый Структура;
		ОтборХВС.Вставить("НаименованиеУслуги", "Холодное водоснабжение");
		УслугаХВС = Объект.СамарскаяОбласть_УслугиВ_ГИС_НМСПН.НайтиСтроки(ОтборХВС);
		
		Если УслугаХВС.Количество() > 0 Тогда
			НомерСтроки = УслугаХВС[0].НомерСтроки;
		КонецЕсли;
		
		ОтборХВС.Очистить();
		ОтборХВС.Вставить("Идентификатор", НомерСтроки);
		НайденнаяСтрока = Объект.СамарскаяОбласть_УслугиВБазе.НайтиСтроки(ОтборХВС);
		
		СписокУслугХВС = Новый СписокЗначений;
		
		Для каждого ТекСтрока Из НайденнаяСтрока Цикл
			СписокУслугХВС.Добавить(ТекСтрока.Услуга);
		КонецЦикла;
		
		Запрос.УстановитьПараметр("СписокУслугХВС", СписокУслугХВС);
		
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	втФиксированныеПоля.ЛицевойСчетВБазе,
		|	втФиксированныеПоля.SERVICE_ID,
		|	втФиксированныеПоля.PERSON_ID,
		|	втФиксированныеПоля.MAN_DIS_ID,
		|	втФиксированныеПоля.ФИОЖильцов,
		|	втФиксированныеПоля.REG_QUANT,
		|	втФиксированныеПоля.CREDITED,
		|	втФиксированныеПоля.PAID,
		|	втФиксированныеПоля.S_BALANCE,
		|	втФиксированныеПоля.E_BALANCE,
		|	втФиксированныеПоля.STD_RATE,
		|	втФиксированныеПоля.STATUS,
		|	втФиксированныеПоля.FROM_DATE,
		|	втФиксированныеПоля.TO_DATE,
		|	втФиксированныеПоля.ORG_ID
		|ПОМЕСТИТЬ втПоляФиксированные
		|ИЗ
		|	втФиксированныеПоля КАК втФиксированныеПоля
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет,
		|	ВЫБОР
		|		КОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки = ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой)
		|			ТОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Размер
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НормаПотребленияРазмер,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления
		|ПОМЕСТИТЬ втУслуги
		|ИЗ
		|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(
		|			&ДатаКон,
		|			ЛицевойСчет В
		|					(ВЫБРАТЬ
		|						втПоляФиксированные.ЛицевойСчетВБазе
		|					ИЗ
		|						втПоляФиксированные КАК втПоляФиксированные)
		|				И Услуга В (&СписокУслугХВС)) КАК КВП_НормыПотребленияУслугЛССрезПоследних
		|ГДЕ
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Основание = ЗНАЧЕНИЕ(Перечисление.КВП_ОснованияНормПотребления.ОдинЧеловек)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПоляФиксированные.ЛицевойСчетВБазе,
		|	втПоляФиксированные.SERVICE_ID,
		|	втПоляФиксированные.PERSON_ID,
		|	втПоляФиксированные.MAN_DIS_ID,
		|	втПоляФиксированные.ФИОЖильцов,
		|	втПоляФиксированные.REG_QUANT,
		|	втПоляФиксированные.CREDITED,
		|	втПоляФиксированные.PAID,
		|	втПоляФиксированные.S_BALANCE,
		|	втПоляФиксированные.E_BALANCE,
		|	втПоляФиксированные.STATUS,
		|	втПоляФиксированные.STD_RATE,
		|	втПоляФиксированные.FROM_DATE,
		|	втПоляФиксированные.TO_DATE,
		|	втПоляФиксированные.ORG_ID,
		|	ЕСТЬNULL(втУслуги.НормаПотребленияРазмер, 0) КАК STDC_COUNT,
		|	втУслуги.НормаПотребления,
		|	втУслуги.НормаПотребленияВариантНастройки
		|ИЗ
		|	втПоляФиксированные КАК втПоляФиксированные
		|		ЛЕВОЕ СОЕДИНЕНИЕ втУслуги КАК втУслуги
		|		ПО втПоляФиксированные.ЛицевойСчетВБазе = втУслуги.ЛицевойСчет";

		
		ТаблицаСДанными = Запрос.Выполнить().Выгрузить();
		
		ОтборСтрок = Новый Структура("PERSON_ID");
		
		Для каждого ТекЛицевойСчет Из ТаблицаСДанными Цикл
			
			ОтборСтрок.PERSON_ID = ТекЛицевойСчет.PERSON_ID;
			
			НайденныеСтроки = ЭтаФорма[ИмяФайла].НайтиСтроки(ОтборСтрок);
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				Если ТекЛицевойСчет.НормаПотребленияВариантНастройки = Перечисления.КВП_ВариантыНастроекРасчетаНормативовПотребления.Расширенный 
					ИЛИ ТекЛицевойСчет.НормаПотребленияВариантНастройки = Перечисления.КВП_ВариантыНастроекРасчетаНормативовПотребления.Формула  Тогда
					
					ТекЛицевойСчет.STDC_COUNT = ПолучитьРазмерНормыПотребления(ТекЛицевойСчет.ЛицевойСчетВБазе, КонецМесяца(Объект.Период), ТекЛицевойСчет.НормаПотребления, Объект.Организация);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗапросПоГВС = Новый Запрос;
		
		ЗапросПоГВС.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
		
		ЗапросПоГВС.УстановитьПараметр("СписокУслугГВС", СписокУслугГВС);
		ЗапросПоГВС.УстановитьПараметр("ДатаКон",        КонецМесяца(Объект.Период));
		
		ЗапросПоГВС.Текст = 
		"ВЫБРАТЬ
		|	СписокУслугГВС.Услуга,
		|	СписокУслугГВС.Теплоноситель,
		|	СписокУслугГВС.ТепловаяЭнергия
		|ПОМЕСТИТЬ втСписокУслугГВС
		|ИЗ
		|	&СписокУслугГВС КАК СписокУслугГВС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки КАК НормаПотребленияВариантНастройкиГВС,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления КАК НормаПотребленияГВС,
		|	ВЫБОР
		|		КОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки = ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой)
		|			ТОГДА ВЫБОР
		|					КОГДА втСписокУслугГВС.ТепловаяЭнергия = ЛОЖЬ
		|						ТОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Размер
		|					ИНАЧЕ 0
		|				КОНЕЦ
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК STDH_COUNT
		|ИЗ
		|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(
		|			&ДатаКон,
		|			ЛицевойСчет В
		|				(ВЫБРАТЬ
		|					втПоляФиксированные.ЛицевойСчетВБазе
		|				ИЗ
		|					втПоляФиксированные КАК втПоляФиксированные)) КАК КВП_НормыПотребленияУслугЛССрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСписокУслугГВС КАК втСписокУслугГВС
		|		ПО КВП_НормыПотребленияУслугЛССрезПоследних.Услуга = втСписокУслугГВС.Услуга
		|ГДЕ
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Основание = ЗНАЧЕНИЕ(Перечисление.КВП_ОснованияНормПотребления.ОдинЧеловек)";
				
		ТаблицаСДаннымиПоГВС = ЗапросПоГВС.Выполнить().Выгрузить();
		
		ОтборСтрокГВС = Новый Структура("ЛицевойСчетВБазе");
		
		Для каждого ТекЛицевойСчет Из ТаблицаСДаннымиПоГВС Цикл
			
			ОтборСтрокГВС.ЛицевойСчетВБазе = ТекЛицевойСчет.ЛицевойСчет;
			
			НайденныеСтроки = ЭтаФорма[ИмяФайла].НайтиСтроки(ОтборСтрокГВС);
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				Если ТекЛицевойСчет.НормаПотребленияВариантНастройкиГВС = Перечисления.КВП_ВариантыНастроекРасчетаНормативовПотребления.Расширенный 
					ИЛИ ТекЛицевойСчет.НормаПотребленияВариантНастройкиГВС = Перечисления.КВП_ВариантыНастроекРасчетаНормативовПотребления.Формула  Тогда
					
					ТекЛицевойСчет.STDH_COUNT = ПолучитьРазмерНормыПотребления(ТекЛицевойСчет.ЛицевойСчет, КонецМесяца(Объект.Период), ТекЛицевойСчет.НормаПотребленияГВС, Объект.Организация);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		
		ЗапросИтоговый = Новый Запрос;
		
		ЗапросИтоговый.УстановитьПараметр("ТаблицаСДанными",      ТаблицаСДанными);
		ЗапросИтоговый.УстановитьПараметр("ТаблицаСДаннымиПоГВС", ТаблицаСДаннымиПоГВС);
		
		ЗапросИтоговый.Текст =
		"ВЫБРАТЬ
		|	ТаблицаСДанными.ЛицевойСчетВБазе КАК ЛицевойСчетВБазе,
		|	ТаблицаСДанными.SERVICE_ID КАК SERVICE_ID,
		|	ТаблицаСДанными.PERSON_ID КАК PERSON_ID,
		|	ТаблицаСДанными.MAN_DIS_ID КАК MAN_DIS_ID,
		|	ТаблицаСДанными.ФИОЖильцов КАК ФИОЖильцов,
		|	ТаблицаСДанными.REG_QUANT КАК REG_QUANT,
		|	ТаблицаСДанными.CREDITED КАК CREDITED,
		|	ТаблицаСДанными.PAID КАК PAID,
		|	ТаблицаСДанными.S_BALANCE КАК S_BALANCE,
		|	ТаблицаСДанными.E_BALANCE КАК E_BALANCE,
		|	ТаблицаСДанными.STATUS КАК STATUS,
		|	ТаблицаСДанными.STD_RATE КАК STD_RATE,
		|	ТаблицаСДанными.FROM_DATE КАК FROM_DATE,
		|	ТаблицаСДанными.TO_DATE КАК TO_DATE,
		|	ТаблицаСДанными.ORG_ID КАК ORG_ID,
		|	ТаблицаСДанными.STDC_COUNT КАК STDC_COUNT
		|ПОМЕСТИТЬ вт1
		|ИЗ
		|	&ТаблицаСДанными КАК ТаблицаСДанными
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт1.ЛицевойСчетВБазе КАК ЛицевойСчетВБазе,
		|	вт1.SERVICE_ID КАК SERVICE_ID,
		|	вт1.PERSON_ID КАК PERSON_ID,
		|	вт1.MAN_DIS_ID КАК MAN_DIS_ID,
		|	вт1.ФИОЖильцов КАК ФИОЖильцов,
		|	вт1.REG_QUANT КАК REG_QUANT,
		|	вт1.CREDITED КАК CREDITED,
		|	вт1.PAID КАК PAID,
		|	вт1.S_BALANCE КАК S_BALANCE,
		|	вт1.E_BALANCE КАК E_BALANCE,
		|	вт1.STATUS КАК STATUS,
		|	вт1.STD_RATE КАК STD_RATE,
		|	вт1.FROM_DATE КАК FROM_DATE,
		|	вт1.TO_DATE КАК TO_DATE,
		|	вт1.ORG_ID КАК ORG_ID,
		|	СУММА(вт1.STDC_COUNT) КАК STDC_COUNT
		|ПОМЕСТИТЬ вт4
		|ИЗ
		|	вт1 КАК вт1
		|
		|СГРУППИРОВАТЬ ПО
		|	вт1.ЛицевойСчетВБазе,
		|	вт1.SERVICE_ID,
		|	вт1.PERSON_ID,
		|	вт1.MAN_DIS_ID,
		|	вт1.ФИОЖильцов,
		|	вт1.REG_QUANT,
		|	вт1.CREDITED,
		|	вт1.PAID,
		|	вт1.S_BALANCE,
		|	вт1.E_BALANCE,
		|	вт1.STATUS,
		|	вт1.STD_RATE,
		|	вт1.FROM_DATE,
		|	вт1.TO_DATE,
		|	вт1.ORG_ID
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаСДаннымиПоГВС.ЛицевойСчет КАК ЛицевойСчет,
		|	ТаблицаСДаннымиПоГВС.STDH_COUNT КАК STDH_COUNT
		|ПОМЕСТИТЬ вт2
		|ИЗ
		|	&ТаблицаСДаннымиПоГВС КАК ТаблицаСДаннымиПоГВС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт2.ЛицевойСчет КАК ЛицевойСчет,
		|	СУММА(вт2.STDH_COUNT) КАК STDH_COUNT
		|ПОМЕСТИТЬ вт3
		|ИЗ
		|	вт2 КАК вт2
		|
		|СГРУППИРОВАТЬ ПО
		|	вт2.ЛицевойСчет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	вт4.ЛицевойСчетВБазе КАК ЛицевойСчетВБазе,
		|	вт4.SERVICE_ID КАК SERVICE_ID,
		|	вт4.PERSON_ID КАК PERSON_ID,
		|	вт4.MAN_DIS_ID КАК MAN_DIS_ID,
		|	вт4.ФИОЖильцов КАК ФИОЖильцов,
		|	вт4.REG_QUANT КАК REG_QUANT,
		|	вт4.CREDITED КАК CREDITED,
		|	вт4.PAID КАК PAID,
		|	вт4.S_BALANCE КАК S_BALANCE,
		|	вт4.E_BALANCE КАК E_BALANCE,
		|	вт4.STATUS КАК STATUS,
		|	вт4.STD_RATE КАК STD_RATE,
		|	вт4.FROM_DATE КАК FROM_DATE,
		|	вт4.TO_DATE КАК TO_DATE,
		|	вт4.ORG_ID КАК ORG_ID,
		|	СУММА(вт4.STDC_COUNT) КАК STDC_COUNT,
		|	СУММА(вт3.STDH_COUNT) КАК STDH_COUNT
		|ИЗ
		|	вт4 КАК вт4
		|		ЛЕВОЕ СОЕДИНЕНИЕ вт3 КАК вт3
		|		ПО вт4.ЛицевойСчетВБазе = вт3.ЛицевойСчет
		|
		|СГРУППИРОВАТЬ ПО
		|	вт4.ЛицевойСчетВБазе,
		|	вт4.SERVICE_ID,
		|	вт4.PERSON_ID,
		|	вт4.MAN_DIS_ID,
		|	вт4.ФИОЖильцов,
		|	вт4.REG_QUANT,
		|	вт4.CREDITED,
		|	вт4.PAID,
		|	вт4.S_BALANCE,
		|	вт4.E_BALANCE,
		|	вт4.STATUS,
		|	вт4.STD_RATE,
		|	вт4.FROM_DATE,
		|	вт4.TO_DATE,
		|	вт4.ORG_ID";
		
		ТаблицаСИтоговымиДанными = ЗапросИтоговый.Выполнить().Выгрузить();
		
		Для каждого ТекЛицевойСчет Из ТаблицаСИтоговымиДанными Цикл
			
			ОтборСтрок.PERSON_ID = ТекЛицевойСчет.PERSON_ID;
			
			НайденныеСтроки = ЭтаФорма[ИмяФайла].НайтиСтроки(ОтборСтрок);
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				Если НЕ НайденныеСтроки[0].ЛицевойСчетВБазе.Наименование = "" Тогда
					
					ЗаполнитьЗначенияСвойств(НайденныеСтроки[0], ТекЛицевойСчет, "MAN_DIS_ID, REG_QUANT, CREDITED, PAID, S_BALANCE, E_BALANCE, STDH_COUNT,STDC_COUNT, STD_RATE, STATUS, FROM_DATE, TO_DATE, ORG_ID");
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		
	// «Газоснабжение»
	ИначеЕсли  НаименованиеУслуги = "Газоснабжение" Тогда
		
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	втФиксированныеПоля.ЛицевойСчетВБазе,
		|	втФиксированныеПоля.SERVICE_ID,
		|	втФиксированныеПоля.PERSON_ID,
		|	втФиксированныеПоля.MAN_DIS_ID,
		|	втФиксированныеПоля.ФИОЖильцов,
		|	втФиксированныеПоля.REG_QUANT,
		|	втФиксированныеПоля.CREDITED,
		|	втФиксированныеПоля.PAID,
		|	втФиксированныеПоля.S_BALANCE,
		|	втФиксированныеПоля.E_BALANCE,
		|	втФиксированныеПоля.STD_RATE,
		|	втФиксированныеПоля.STATUS,
		|	втФиксированныеПоля.SQUARE,
		|	втФиксированныеПоля.FROM_DATE,
		|	втФиксированныеПоля.TO_DATE,
		|	втФиксированныеПоля.ORG_ID
		|ПОМЕСТИТЬ втПоляФиксированные
		|ИЗ
		|	втФиксированныеПоля КАК втФиксированныеПоля
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет,
		|	ВЫБОР
		|		КОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Основание = ЗНАЧЕНИЕ(Перечисление.КВП_ОснованияНормПотребления.ОдинЧеловек)
		|			ТОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Размер
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК STDP_COUNT,
		|	ВЫБОР
		|		КОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Основание = ЗНАЧЕНИЕ(Перечисление.КВП_ОснованияНормПотребления.Площадь)
		|			ТОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Размер
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК STDM_COUNT,
		|	ВЫБОР
		|		КОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Основание = ЗНАЧЕНИЕ(Перечисление.КВП_ОснованияНормПотребления.БезОснования)
		|			ТОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Размер
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК STDH_COUNT,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Основание
		|ПОМЕСТИТЬ втУслуги
		|ИЗ
		|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(
		|			&ДатаКон,
		|			ЛицевойСчет В
		|					(ВЫБРАТЬ
		|						втПоляФиксированные.ЛицевойСчетВБазе
		|					ИЗ
		|						втПоляФиксированные КАК втПоляФиксированные)
		|				И Услуга В (&СписокДопустимыхУслуг)) КАК КВП_НормыПотребленияУслугЛССрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПоляФиксированные.ЛицевойСчетВБазе,
		|	втПоляФиксированные.SERVICE_ID,
		|	втПоляФиксированные.PERSON_ID,
		|	втПоляФиксированные.MAN_DIS_ID,
		|	втПоляФиксированные.ФИОЖильцов,
		|	втПоляФиксированные.REG_QUANT,
		|	втПоляФиксированные.CREDITED,
		|	втПоляФиксированные.PAID,
		|	втПоляФиксированные.S_BALANCE,
		|	втПоляФиксированные.E_BALANCE,
		|	втПоляФиксированные.STATUS,
		|	втПоляФиксированные.FROM_DATE,
		|	втПоляФиксированные.TO_DATE,
		|	втПоляФиксированные.ORG_ID,
		|	ЕСТЬNULL(втУслуги.STDP_COUNT , 0) КАК STDP_COUNT,
		|	ЕСТЬNULL(втУслуги.STDM_COUNT , 0) КАК STDM_COUNT,
		|	втПоляФиксированные.SQUARE,
		|	ЕСТЬNULL(втУслуги.STDH_COUNT, 0) КАК STDH_COUNT,
		|	втПоляФиксированные.STD_RATE КАК PRICE,
		|	втУслуги.НормаПотребления,
		|	втУслуги.НормаПотребленияВариантНастройки,
		|	втУслуги.НормаПотребленияОснование
		|ИЗ
		|	втПоляФиксированные КАК втПоляФиксированные
		|		ЛЕВОЕ СОЕДИНЕНИЕ втУслуги КАК втУслуги
		|		ПО втПоляФиксированные.ЛицевойСчетВБазе = втУслуги.ЛицевойСчет";
		
		ТаблицаСДанными = Запрос.Выполнить().Выгрузить();
		
		ОтборСтрок = Новый Структура("PERSON_ID");
		
		Для каждого ТекЛицевойСчет Из ТаблицаСДанными Цикл
			
			ОтборСтрок.PERSON_ID = ТекЛицевойСчет.PERSON_ID;
			НайденныеСтроки = ЭтаФорма[ИмяФайла].НайтиСтроки(ОтборСтрок);
			
			Если ТекЛицевойСчет.НормаПотребленияВариантНастройки = Перечисления.КВП_ВариантыНастроекРасчетаНормативовПотребления.Расширенный 
				ИЛИ ТекЛицевойСчет.НормаПотребленияВариантНастройки = Перечисления.КВП_ВариантыНастроекРасчетаНормативовПотребления.Формула  Тогда
				
				Если ТекЛицевойСчет.НормаПотребленияОснование = Перечисления.КВП_ОснованияНормПотребления.ОдинЧеловек Тогда
					
					ТекЛицевойСчет.STDP_COUNT = ПолучитьРазмерНормыПотребления(ТекЛицевойСчет.ЛицевойСчетВБазе, КонецМесяца(Объект.Период), 
					ТекЛицевойСчет.НормаПотребления, Объект.Организация)
					
				ИначеЕсли ТекЛицевойСчет.НормаПотребленияОснование = Перечисления.КВП_ОснованияНормПотребления.Площадь Тогда
					
					ТекЛицевойСчет.STDM_COUNT = ПолучитьРазмерНормыПотребления(ТекЛицевойСчет.ЛицевойСчетВБазе, КонецМесяца(Объект.Период), 
					ТекЛицевойСчет.НормаПотребления, Объект.Организация)
					
				ИначеЕсли ТекЛицевойСчет.НормаПотребленияОснование = Перечисления.КВП_ОснованияНормПотребления.БезОснования Тогда
					
					ТекЛицевойСчет.STDH_COUNT = ПолучитьРазмерНормыПотребления(ТекЛицевойСчет.ЛицевойСчетВБазе, КонецМесяца(Объект.Период), 
					ТекЛицевойСчет.НормаПотребления, Объект.Организация)
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				Если НЕ НайденныеСтроки[0].ЛицевойСчетВБазе.Наименование = "" Тогда
					
					ЗаполнитьЗначенияСвойств(НайденныеСтроки[0], ТекЛицевойСчет, "MAN_DIS_ID, REG_QUANT, CREDITED, PAID, S_BALANCE, E_BALANCE, STDP_COUNT, PRICE, STDM_COUNT, SQUARE, STDH_COUNT, STATUS, FROM_DATE, TO_DATE, ORG_ID");
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗапросГазоснабжение = Новый Запрос;
		
		ЗапросГазоснабжение.УстановитьПараметр("ТаблицаСДанными", ТаблицаСДанными);
		
		ЗапросГазоснабжение.Текст = 
		"ВЫБРАТЬ
		|	ТаблицаСДанными.ЛицевойСчетВБазе,
		|	ТаблицаСДанными.SERVICE_ID,
		|	ТаблицаСДанными.PERSON_ID,
		|	ТаблицаСДанными.MAN_DIS_ID,
		|	ТаблицаСДанными.ФИОЖильцов,
		|	ТаблицаСДанными.REG_QUANT,
		|	ТаблицаСДанными.CREDITED,
		|	ТаблицаСДанными.PAID,
		|	ТаблицаСДанными.S_BALANCE,
		|	ТаблицаСДанными.E_BALANCE,
		|	ТаблицаСДанными.STATUS,
		|	ТаблицаСДанными.FROM_DATE,
		|	ТаблицаСДанными.TO_DATE,
		|	ТаблицаСДанными.ORG_ID,
		|	ТаблицаСДанными.STDP_COUNT КАК STDP_COUNT,
		|	ТаблицаСДанными.STDM_COUNT КАК STDM_COUNT,
		|	ТаблицаСДанными.SQUARE,
		|	ТаблицаСДанными.STDH_COUNT КАК STDH_COUNT,
		|	ТаблицаСДанными.PRICE
		|ПОМЕСТИТЬ втДляГруппировки
		|ИЗ
		|	&ТаблицаСДанными КАК ТаблицаСДанными
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втДляГруппировки.ЛицевойСчетВБазе,
		|	втДляГруппировки.SERVICE_ID,
		|	втДляГруппировки.PERSON_ID,
		|	втДляГруппировки.MAN_DIS_ID,
		|	втДляГруппировки.ФИОЖильцов,
		|	втДляГруппировки.REG_QUANT,
		|	втДляГруппировки.CREDITED,
		|	втДляГруппировки.PAID,
		|	втДляГруппировки.S_BALANCE,
		|	втДляГруппировки.E_BALANCE,
		|	втДляГруппировки.STATUS,
		|	втДляГруппировки.FROM_DATE,
		|	втДляГруппировки.TO_DATE,
		|	втДляГруппировки.ORG_ID,
		|	СУММА(втДляГруппировки.STDP_COUNT) КАК STDP_COUNT,
		|	СУММА(втДляГруппировки.STDM_COUNT) КАК STDM_COUNT,
		|	втДляГруппировки.SQUARE,
		|	СУММА(втДляГруппировки.STDH_COUNT) КАК STDH_COUNT,
		|	втДляГруппировки.PRICE
		|ИЗ
		|	втДляГруппировки КАК втДляГруппировки
		|
		|СГРУППИРОВАТЬ ПО
		|	втДляГруппировки.ЛицевойСчетВБазе,
		|	втДляГруппировки.SERVICE_ID,
		|	втДляГруппировки.PERSON_ID,
		|	втДляГруппировки.MAN_DIS_ID,
		|	втДляГруппировки.ФИОЖильцов,
		|	втДляГруппировки.REG_QUANT,
		|	втДляГруппировки.CREDITED,
		|	втДляГруппировки.PAID,
		|	втДляГруппировки.S_BALANCE,
		|	втДляГруппировки.E_BALANCE,
		|	втДляГруппировки.STATUS,
		|	втДляГруппировки.FROM_DATE,
		|	втДляГруппировки.TO_DATE,
		|	втДляГруппировки.ORG_ID,
		|	втДляГруппировки.SQUARE,
		|	втДляГруппировки.PRICE";
		
		ТаблицаСДанными = ЗапросГазоснабжение.Выполнить().Выгрузить();
		
		Для каждого ТекЛицевойСчет Из ТаблицаСДанными Цикл
			
			ОтборСтрок.PERSON_ID = ТекЛицевойСчет.PERSON_ID;
			НайденныеСтроки = ЭтаФорма[ИмяФайла].НайтиСтроки(ОтборСтрок);
			
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				Если НЕ НайденныеСтроки[0].ЛицевойСчетВБазе.Наименование = "" Тогда
					
					ЗаполнитьЗначенияСвойств(НайденныеСтроки[0], ТекЛицевойСчет, "MAN_DIS_ID, REG_QUANT, CREDITED, PAID, S_BALANCE, E_BALANCE, STDP_COUNT, PRICE, STDM_COUNT, SQUARE, STDH_COUNT, STATUS, FROM_DATE, TO_DATE, ORG_ID");
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		
	// «Теплоснабжение»
	ИначеЕсли НаименованиеУслуги = "Теплоснабжение" Тогда
		
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	втФиксированныеПоля.ЛицевойСчетВБазе,
		|	втФиксированныеПоля.SERVICE_ID,
		|	втФиксированныеПоля.PERSON_ID,
		|	втФиксированныеПоля.MAN_DIS_ID,
		|	втФиксированныеПоля.ФИОЖильцов,
		|	втФиксированныеПоля.REG_QUANT,
		|	втФиксированныеПоля.CREDITED,
		|	втФиксированныеПоля.PAID,
		|	втФиксированныеПоля.S_BALANCE,
		|	втФиксированныеПоля.E_BALANCE,
		|	втФиксированныеПоля.STD_RATE,
		|	втФиксированныеПоля.STATUS,
		|	втФиксированныеПоля.SQUARE,
		|	втФиксированныеПоля.FROM_DATE,
		|	втФиксированныеПоля.TO_DATE,
		|	втФиксированныеПоля.ORG_ID
		|ПОМЕСТИТЬ втПоляФиксированные
		|ИЗ
		|	втФиксированныеПоля КАК втФиксированныеПоля
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет,
		|	ВЫБОР
		|		КОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки = ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой)
		|			ТОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Размер
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НормаПотребленияРазмер,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления
		|ПОМЕСТИТЬ втУслуги
		|ИЗ
		|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(
		|			&ДатаКон,
		|			ЛицевойСчет В
		|					(ВЫБРАТЬ
		|						втПоляФиксированные.ЛицевойСчетВБазе
		|					ИЗ
		|						втПоляФиксированные КАК втПоляФиксированные)
		|				И Услуга В (&СписокДопустимыхУслуг)) КАК КВП_НормыПотребленияУслугЛССрезПоследних
		|ГДЕ
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Основание = ЗНАЧЕНИЕ(Перечисление.КВП_ОснованияНормПотребления.Площадь)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПоляФиксированные.ЛицевойСчетВБазе,
		|	втПоляФиксированные.SERVICE_ID,
		|	втПоляФиксированные.PERSON_ID,
		|	втПоляФиксированные.MAN_DIS_ID,
		|	втПоляФиксированные.ФИОЖильцов,
		|	втПоляФиксированные.REG_QUANT,
		|	втПоляФиксированные.CREDITED,
		|	втПоляФиксированные.PAID,
		|	втПоляФиксированные.S_BALANCE,
		|	втПоляФиксированные.E_BALANCE,
		|	втПоляФиксированные.STD_RATE,
		|	втПоляФиксированные.STATUS,
		|	втПоляФиксированные.SQUARE,
		|	втПоляФиксированные.FROM_DATE,
		|	втПоляФиксированные.TO_DATE,
		|	втПоляФиксированные.ORG_ID,
		|	ЕСТЬNULL(втУслуги.НормаПотребленияРазмер, 0) КАК STDM_COUNT,
		|	втУслуги.НормаПотребления,
		|	втУслуги.НормаПотребленияВариантНастройки
		|ИЗ
		|	втПоляФиксированные КАК втПоляФиксированные
		|		ЛЕВОЕ СОЕДИНЕНИЕ втУслуги КАК втУслуги
		|		ПО втПоляФиксированные.ЛицевойСчетВБазе = втУслуги.ЛицевойСчет";
		
		
		ТаблицаСДанными = Запрос.Выполнить().Выгрузить();
		
		ОтборСтрок = Новый Структура("PERSON_ID");
		
		Для каждого ТекЛицевойСчет Из ТаблицаСДанными Цикл
			
			ОтборСтрок.PERSON_ID = ТекЛицевойСчет.PERSON_ID;
			
			НайденныеСтроки = ЭтаФорма[ИмяФайла].НайтиСтроки(ОтборСтрок);
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				Если ТекЛицевойСчет.НормаПотребленияВариантНастройки = Перечисления.КВП_ВариантыНастроекРасчетаНормативовПотребления.Расширенный 
					ИЛИ ТекЛицевойСчет.НормаПотребленияВариантНастройки = Перечисления.КВП_ВариантыНастроекРасчетаНормативовПотребления.Формула Тогда
					
					ТекЛицевойСчет.STDM_COUNT = ПолучитьРазмерНормыПотребления(ТекЛицевойСчет.ЛицевойСчетВБазе, КонецМесяца(Объект.Период), ТекЛицевойСчет.НормаПотребления, Объект.Организация);
					
				КонецЕсли;
				
				Если НЕ НайденныеСтроки[0].ЛицевойСчетВБазе.Наименование = "" Тогда
					
					ЗаполнитьЗначенияСвойств(НайденныеСтроки[0], ТекЛицевойСчет, "MAN_DIS_ID, REG_QUANT, CREDITED, PAID, S_BALANCE, E_BALANCE, SQUARE, STDM_COUNT, STD_RATE, STATUS, FROM_DATE, TO_DATE, ORG_ID");
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла
		
	// «Электроснабжение»
	ИначеЕсли  НаименованиеУслуги = "Электроснабжение" Тогда
		
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	втФиксированныеПоля.ЛицевойСчетВБазе,
		|	втФиксированныеПоля.SERVICE_ID,
		|	втФиксированныеПоля.PERSON_ID,
		|	втФиксированныеПоля.MAN_DIS_ID,
		|	втФиксированныеПоля.ФИОЖильцов,
		|	втФиксированныеПоля.REG_QUANT,
		|	втФиксированныеПоля.CREDITED,
		|	втФиксированныеПоля.PAID,
		|	втФиксированныеПоля.S_BALANCE,
		|	втФиксированныеПоля.E_BALANCE,
		|	втФиксированныеПоля.STD_RATE,
		|	втФиксированныеПоля.STATUS,
		|	втФиксированныеПоля.SQUARE,
		|	втФиксированныеПоля.FROM_DATE,
		|	втФиксированныеПоля.TO_DATE,
		|	втФиксированныеПоля.ORG_ID
		|ПОМЕСТИТЬ втПоляФиксированные
		|ИЗ
		|	втФиксированныеПоля КАК втФиксированныеПоля
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет,
		|	ВЫБОР
		|		КОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки = ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой)
		|			ТОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Размер
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НормаПотребленияРазмер,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления
		|ПОМЕСТИТЬ втУслуги
		|ИЗ
		|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(
		|			&ДатаКон,
		|			ЛицевойСчет В
		|					(ВЫБРАТЬ
		|						втПоляФиксированные.ЛицевойСчетВБазе
		|					ИЗ
		|						втПоляФиксированные КАК втПоляФиксированные)
		|				И Услуга В (&СписокДопустимыхУслуг)) КАК КВП_НормыПотребленияУслугЛССрезПоследних
		|ГДЕ
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Основание = ЗНАЧЕНИЕ(Перечисление.КВП_ОснованияНормПотребления.ОдинЧеловек)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПоляФиксированные.ЛицевойСчетВБазе,
		|	втПоляФиксированные.SERVICE_ID,
		|	втПоляФиксированные.PERSON_ID,
		|	втПоляФиксированные.MAN_DIS_ID,
		|	втПоляФиксированные.ФИОЖильцов,
		|	втПоляФиксированные.REG_QUANT,
		|	втПоляФиксированные.CREDITED,
		|	втПоляФиксированные.PAID,
		|	втПоляФиксированные.S_BALANCE,
		|	втПоляФиксированные.E_BALANCE,
		|	втПоляФиксированные.STD_RATE,
		|	втПоляФиксированные.STATUS,
		|	втПоляФиксированные.SQUARE,
		|	втПоляФиксированные.FROM_DATE,
		|	втПоляФиксированные.TO_DATE,
		|	втПоляФиксированные.ORG_ID,
		|	ЕСТЬNULL(втУслуги.НормаПотребленияРазмер, 0) КАК STD_COUNT,
		|	втУслуги.НормаПотребления,
		|	втУслуги.НормаПотребленияВариантНастройки
		|ИЗ
		|	втПоляФиксированные КАК втПоляФиксированные
		|		ЛЕВОЕ СОЕДИНЕНИЕ втУслуги КАК втУслуги
		|		ПО втПоляФиксированные.ЛицевойСчетВБазе = втУслуги.ЛицевойСчет";
		
		
		ТаблицаСДанными = Запрос.Выполнить().Выгрузить();
		
		ОтборСтрок = Новый Структура("PERSON_ID");
		
		Для каждого ТекЛицевойСчет Из ТаблицаСДанными Цикл
			
			ОтборСтрок.PERSON_ID = ТекЛицевойСчет.PERSON_ID;
			
			НайденныеСтроки = ЭтаФорма[ИмяФайла].НайтиСтроки(ОтборСтрок);
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				Если ТекЛицевойСчет.НормаПотребленияВариантНастройки = Перечисления.КВП_ВариантыНастроекРасчетаНормативовПотребления.Расширенный 
					ИЛИ ТекЛицевойСчет.НормаПотребленияВариантНастройки = Перечисления.КВП_ВариантыНастроекРасчетаНормативовПотребления.Формула  Тогда
					
					ТекЛицевойСчет.STD_COUNT = ПолучитьРазмерНормыПотребления(ТекЛицевойСчет.ЛицевойСчетВБазе, КонецМесяца(Объект.Период), ТекЛицевойСчет.НормаПотребления, Объект.Организация);
					
				КонецЕсли;
				
				Если НЕ НайденныеСтроки[0].ЛицевойСчетВБазе.Наименование = "" Тогда
					
					ЗаполнитьЗначенияСвойств(НайденныеСтроки[0], ТекЛицевойСчет, "MAN_DIS_ID, REG_QUANT, CREDITED, PAID, S_BALANCE, E_BALANCE, STD_COUNT, STD_RATE, STATUS, FROM_DATE, TO_DATE, ORG_ID");
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	// «Топливо»
	ИначеЕсли НаименованиеУслуги = "Оплата топлива" Тогда
		
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	втФиксированныеПоля.ЛицевойСчетВБазе,
		|	втФиксированныеПоля.SERVICE_ID,
		|	втФиксированныеПоля.PERSON_ID,
		|	втФиксированныеПоля.MAN_DIS_ID,
		|	втФиксированныеПоля.ФИОЖильцов,
		|	втФиксированныеПоля.REG_QUANT,
		|	втФиксированныеПоля.CREDITED,
		|	втФиксированныеПоля.PAID,
		|	втФиксированныеПоля.S_BALANCE,
		|	втФиксированныеПоля.E_BALANCE,
		|	втФиксированныеПоля.STD_RATE КАК PRICE_GVM,
		|	втФиксированныеПоля.STATUS,
		|	втФиксированныеПоля.SQUARE,
		|	втФиксированныеПоля.SQUARE,
		|	втФиксированныеПоля.FROM_DATE,
		|	втФиксированныеПоля.TO_DATE,
		|	втФиксированныеПоля.ORG_ID,
		|	0 КАК STD_COUNT,
		|	0 КАК PRICE_TRT
		|ИЗ
		|	втФиксированныеПоля КАК втФиксированныеПоля";
		
		
		ТаблицаСДанными = Запрос.Выполнить().Выгрузить();
		
		ОтборСтрок = Новый Структура("PERSON_ID");
		
		Для каждого ТекЛицевойСчет Из ТаблицаСДанными Цикл
			
			ОтборСтрок.PERSON_ID = ТекЛицевойСчет.PERSON_ID;
			
			НайденныеСтроки = ЭтаФорма[ИмяФайла].НайтиСтроки(ОтборСтрок);
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				Если НЕ НайденныеСтроки[0].ЛицевойСчетВБазе.Наименование = "" Тогда
					
					ЗаполнитьЗначенияСвойств(НайденныеСтроки[0], ТекЛицевойСчет, "MAN_DIS_ID, REG_QUANT, CREDITED, PAID, S_BALANCE, E_BALANCE, SQUARE, STD_COUNT, PRICE_GVM, PRICE_TRT, STATUS, FROM_DATE, TO_DATE, ORG_ID");
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	// «Капитальный ремонт»
	ИначеЕсли НаименованиеУслуги = "Капитальный ремонт" Тогда
		
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	втФиксированныеПоля.ЛицевойСчетВБазе,
		|	втФиксированныеПоля.SERVICE_ID,
		|	втФиксированныеПоля.PERSON_ID,
		|	втФиксированныеПоля.MAN_DIS_ID,
		|	втФиксированныеПоля.ФИОЖильцов,
		|	втФиксированныеПоля.REG_QUANT,
		|	втФиксированныеПоля.CREDITED,
		|	втФиксированныеПоля.PAID,
		|	втФиксированныеПоля.S_BALANCE,
		|	втФиксированныеПоля.E_BALANCE,
		|	втФиксированныеПоля.STD_RATE КАК MIN_PAY,
		|	втФиксированныеПоля.STATUS,
		|	втФиксированныеПоля.SQUARE,
		|	втФиксированныеПоля.ДоляЧислитель КАК SQUARE_NM,
		|	втФиксированныеПоля.ДоляЗнаменатель КАК SQUARE_DNM,
		|	втФиксированныеПоля.ДатаРегистрацииПравСобственности КАК REG_DATE,
		|	втФиксированныеПоля.FROM_DATE,
		|	втФиксированныеПоля.TO_DATE,
		|	втФиксированныеПоля.ORG_ID,
		|	0 КАК STD_COUNT,
		|	0 КАК PRICE_TRT,
		|	ВЫБОР
		|		КОГДА НЕ втФиксированныеПоля.ЛицевойСчетВБазе ЕСТЬ NULL
		|			ТОГДА втФиксированныеПоля.ЛицевойСчетВБазе.Адрес.Владелец.Этажей
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК FLOOR
		|ИЗ
		|	втФиксированныеПоля КАК втФиксированныеПоля";
		
		ТаблицаСДанными = Запрос.Выполнить().Выгрузить();
		
		ОтборСтрок = Новый Структура("PERSON_ID");
		
		Для каждого ТекЛицевойСчет Из ТаблицаСДанными Цикл
			
			ОтборСтрок.PERSON_ID = ТекЛицевойСчет.PERSON_ID;
			
			НайденныеСтроки = ЭтаФорма[ИмяФайла].НайтиСтроки(ОтборСтрок);
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				Если НЕ НайденныеСтроки[0].ЛицевойСчетВБазе = Справочники.КВП_ЛицевыеСчета.ПустаяСсылка() Тогда
					
					ЗаполнитьЗначенияСвойств(НайденныеСтроки[0], ТекЛицевойСчет, "ORG_ID, MAN_DIS_ID, FROM_DATE, TO_DATE, REG_QUANT, CREDITED, PAID, S_BALANCE, E_BALANCE, SQUARE, REG_DATE, MIN_PAY, FLOOR, STATUS");
					
					Если ТекЛицевойСчет.SQUARE_NM <> 0
					 И ТекЛицевойСчет.SQUARE_DNM <> 0 Тогда
					 
						ДробнаяЧастьЧислителя   = ТекЛицевойСчет.SQUARE_NM - Цел(ТекЛицевойСчет.SQUARE_NM);
						ДробнаяЧастьЗнаменателя = ТекЛицевойСчет.SQUARE_DNM - Цел(ТекЛицевойСчет.SQUARE_DNM);
						
						Если ДробнаяЧастьЧислителя = 0 И ДробнаяЧастьЗнаменателя = 0 Тогда
							ДоляЧислитель   = ТекЛицевойСчет.SQUARE_NM;
							ДоляЗнаменатель = ТекЛицевойСчет.SQUARE_DNM;
							ОбщаяДоля = ДоляЧислитель / ДоляЗнаменатель;
						Иначе
							ДоляЧислитель   = ТекЛицевойСчет.SQUARE_NM * 100;
							ДоляЗнаменатель = ТекЛицевойСчет.SQUARE_DNM * 100;
							ОбщаяДоля = ДоляЧислитель / ДоляЗнаменатель;
						КонецЕсли;
						
						Если ОбщаяДоля = 1 Тогда
							НайденныеСтроки[0].SQUARE_NM  = 1;
							НайденныеСтроки[0].SQUARE_DNM = 1;
						Иначе
							НайденныеСтроки[0].SQUARE_NM  = ДоляЧислитель;
							НайденныеСтроки[0].SQUARE_DNM = ДоляЗнаменатель;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	// «Твердые коммунальные отходы»
	ИначеЕсли НаименованиеУслуги = "Твердые коммунальные отходы" Тогда
		
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	втФиксированныеПоля.ЛицевойСчетВБазе,
		|	втФиксированныеПоля.SERVICE_ID,
		|	втФиксированныеПоля.PERSON_ID,
		|	втФиксированныеПоля.MAN_DIS_ID,
		|	втФиксированныеПоля.ФИОЖильцов,
		|	втФиксированныеПоля.REG_QUANT,
		|	втФиксированныеПоля.CREDITED,
		|	втФиксированныеПоля.PAID,
		|	втФиксированныеПоля.S_BALANCE,
		|	втФиксированныеПоля.E_BALANCE,
		|	втФиксированныеПоля.STD_RATE,
		|	втФиксированныеПоля.STATUS,
		|	втФиксированныеПоля.FROM_DATE,
		|	втФиксированныеПоля.TO_DATE,
		|	втФиксированныеПоля.ORG_ID
		|ПОМЕСТИТЬ втПоляФиксированные
		|ИЗ
		|	втФиксированныеПоля КАК втФиксированныеПоля
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет,
		|	ВЫБОР
		|		КОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки = ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой)
		|			ТОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Размер
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК НормаПотребленияРазмер,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки,
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления
		|ПОМЕСТИТЬ втНормыПотребления
		|ИЗ
		|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(
		|			&ДатаКон,
		|			ЛицевойСчет В
		|					(ВЫБРАТЬ
		|						втПоляФиксированные.ЛицевойСчетВБазе
		|					ИЗ
		|						втПоляФиксированные КАК втПоляФиксированные)
		|				И Услуга В (&СписокДопустимыхУслуг)) КАК КВП_НормыПотребленияУслугЛССрезПоследних
		|ГДЕ
		|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Основание = ЗНАЧЕНИЕ(Перечисление.КВП_ОснованияНормПотребления.Площадь)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПоляФиксированные.ЛицевойСчетВБазе,
		|	втПоляФиксированные.SERVICE_ID,
		|	втПоляФиксированные.PERSON_ID,
		|	втПоляФиксированные.MAN_DIS_ID,
		|	втПоляФиксированные.ФИОЖильцов,
		|	втПоляФиксированные.REG_QUANT,
		|	втПоляФиксированные.CREDITED,
		|	втПоляФиксированные.PAID,
		|	втПоляФиксированные.S_BALANCE,
		|	втПоляФиксированные.E_BALANCE,
		|	втПоляФиксированные.STD_RATE,
		|	втПоляФиксированные.STATUS,
		|	втПоляФиксированные.FROM_DATE,
		|	втПоляФиксированные.TO_DATE,
		|	втПоляФиксированные.ORG_ID,
		|	0 КАК STD_COUNT,
		|	ЕСТЬNULL(втНормыПотребления.НормаПотребленияРазмер, 0) КАК STDM_COUNT,
		|	втНормыПотребления.НормаПотребления,
		|	втНормыПотребления.НормаПотребленияВариантНастройки
		|ИЗ
		|	втПоляФиксированные КАК втПоляФиксированные
		|		ЛЕВОЕ СОЕДИНЕНИЕ втНормыПотребления КАК втНормыПотребления
		|		ПО втПоляФиксированные.ЛицевойСчетВБазе = втНормыПотребления.ЛицевойСчет";
		
		ТаблицаСДанными = Запрос.Выполнить().Выгрузить();
		
		ОтборСтрок = Новый Структура("PERSON_ID");
		
		Для каждого ТекЛицевойСчет Из ТаблицаСДанными Цикл
			
			ОтборСтрок.PERSON_ID = ТекЛицевойСчет.PERSON_ID;
			
			НайденныеСтроки = ЭтаФорма[ИмяФайла].НайтиСтроки(ОтборСтрок);
			Если НайденныеСтроки.Количество() > 0 Тогда
				
				Если ТекЛицевойСчет.НормаПотребленияВариантНастройки = Перечисления.КВП_ВариантыНастроекРасчетаНормативовПотребления.Расширенный 
					ИЛИ ТекЛицевойСчет.НормаПотребленияВариантНастройки = Перечисления.КВП_ВариантыНастроекРасчетаНормативовПотребления.Формула  Тогда
					
					ТекЛицевойСчет.STDM_COUNT = ПолучитьРазмерНормыПотребления(ТекЛицевойСчет.ЛицевойСчетВБазе, КонецМесяца(Объект.Период), ТекЛицевойСчет.НормаПотребления, Объект.Организация);
					
				КонецЕсли;
				
				Если НЕ НайденныеСтроки[0].ЛицевойСчетВБазе.Наименование = "" Тогда
					
					ЗаполнитьЗначенияСвойств(НайденныеСтроки[0], ТекЛицевойСчет, "MAN_DIS_ID, REG_QUANT, CREDITED, PAID, S_BALANCE, E_BALANCE, STD_COUNT, STDM_COUNT, STD_RATE, STATUS, FROM_DATE, TO_DATE, ORG_ID");
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаВыгрузить".
Процедура КомандаВыгрузить(Команда)
	
	Если ПустаяСтрока(ИмяКаталогаВыгрузки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указан каталог выгрузки!");
		Возврат;
	КонецЕсли;
	
	АдресФайлаВХранилище = КомандаВыгрузитьНаСервере();
	
	Если АдресФайлаВХранилище <> -1 Тогда
		СоответствиеФайлов = ПолучитьИзВременногоХранилища(АдресФайлаВХранилище);
		
		Сч = 1;
		Для Каждого СтрокаСоответствия ИЗ СоответствиеФайлов Цикл
			ФайлЗаписи = СтрокаСоответствия.Значение;
			ФайлЗаписи.Записать(ИмяКаталогаВыгрузки + "\OUT_F" + Сч + ".DBF");
			
			ИмяФайла = "\" + ИдентификаторОрганизации + "_" + СтрЗаменить(СтрокаСоответствия.Ключ,"ID","") + "_" + Формат(Объект.Период, "ДФ=гггг")+ "-" + Формат(Объект.Период, "ДФ=ММ") +".DBF";
			
			НачатьПеремещениеФайла(Новый ОписаниеОповещения("ОбработатьРезультатПеремещенияФайла", ЭтаФорма, ИмяФайла), ИмяКаталогаВыгрузки + "\OUT_F" + Сч + ".DBF", ИмяКаталогаВыгрузки + ИмяФайла);
			Сч = Сч + 1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата перемещения файла.
//
Процедура ОбработатьРезультатПеремещенияФайла(ПеремещаемыйФайл, ДополнительныеПараметры) Экспорт
	
	Текст = "Выгрузка в файл " + ДополнительныеПараметры + " завершена!";
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(Текст);
	
КонецПроцедуры // ОбработатьРезультатПеремещенияФайла()

&НаСервере
// Предназначена для выгрузки данных из таблицы данных в dbf-файл.
Функция КомандаВыгрузитьНаСервере()
	
	СтруктураДвоичныхДанных = Новый Соответствие;
	
	Для Каждого Строка из Объект.СамарскаяОбласть_СписокТаблицЗначений Цикл
		
		ИмяФайла = строка.НазваниеТаблицыЗначений;
		
		// Записть данных формы в Таблицу Значений
		ТаблицаДляВыгрузки = Новый ТаблицаЗначений;
		ТаблицаДляВыгрузки = РеквизитФормыВЗначение(ИмяФайла);
		
		Если ТаблицаДляВыгрузки.Количество() = 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Перед выгрузкой табличная часть должна быть заполнена данными о начислениях и оплатах!");
			Продолжить;
		КонецЕсли;
		
		ТаблицаДляВыгрузки.Колонки.Сдвинуть("ORG_ID",     -19);
		ТаблицаДляВыгрузки.Колонки.Сдвинуть("SERVICE_ID", -2);
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("DBF");
		ВременныйФайл = Новый Файл(ИмяВременногоФайла);
		СтароеИмяФайла = ВременныйФайл.ИмяБезРасширения;
		НовоеИмяФайла = Прав(ВременныйФайл.ИмяБезРасширения, 8);
		ИмяВременногоФайла = СтрЗаменить(ВременныйФайл.ПолноеИмя, СтароеИмяФайла, НовоеИмяФайла);
		
		DBFФайлВыгрузки = Новый XBase;
		DBFФайлВыгрузки.Кодировка = КодировкаXBase.OEM;
		
		КолонкиDBF = ПолучитьКолонкиDBF(ТаблицаДляВыгрузки);
		
		Для Каждого Колонка Из КолонкиDBF Цикл
			
			Если Колонка.Тип = "S" Тогда
				
				DBFФайлВыгрузки.Поля.Добавить(Колонка.Имя, Колонка.Тип, Колонка.Длина);
				
			ИначеЕсли Колонка.Тип = "N" Тогда
				
				DBFФайлВыгрузки.Поля.Добавить(Колонка.Имя, Колонка.Тип, Колонка.РазрядностьЦелойЧасти, Колонка.РазрядностьДробнойЧасти);
				
			ИначеЕсли Колонка.Тип = "D" Тогда
				
				DBFФайлВыгрузки.Поля.Добавить(Колонка.Имя, Колонка.Тип, Колонка.ЧастиДаты);
				
			КонецЕсли;
			
		КонецЦикла;
		
		DBFФайлВыгрузки.СоздатьФайл(ИмяВременногоФайла);
		DBFФайлВыгрузки.АвтоСохранение = Истина;
		
		// Запись данных из табличной части в файл выгрузки.
		Для Каждого Строка Из ТаблицаДляВыгрузки Цикл
			
			DBFФайлВыгрузки.Добавить();
			
			ЗаполнитьЗначенияСвойств(DBFФайлВыгрузки, Строка);
			
			DBFФайлВыгрузки.Записать();
			
		КонецЦикла;
		
		DBFФайлВыгрузки.ЗакрытьФайл();
		
		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
		СтруктураДвоичныхДанных.Вставить(ИмяФайла, ДвоичныеДанные);
		
	КонецЦикла;
	
	АдресФайловВХранилище = ПоместитьВоВременноеХранилище(СтруктураДвоичныхДанных, Новый УникальныйИдентификатор);
	
	Возврат АдресФайловВХранилище;
	
КонецФункции

&НаСервере
// Формирует массив структур, состоящих из параметров для записи полей выгружаемого DBF-файла.
//
// Возвращаемое значение:
//  МассивСтруктурКолонок - Массив - массив структур. 
//
Функция ПолучитьКолонкиDBF(ТаблицаДляВыгрузки)
	
	МассивСтруктурКолонок = Новый Массив;
	
	Для Каждого Колонка Из ТаблицаДляВыгрузки.Колонки Цикл
		
		Если Колонка.Имя = "ORG_ID" ИЛИ Колонка.Имя = "SERVICE_ID" ИЛИ Колонка.Имя = "PERSON_ID"
			ИЛИ Колонка.Имя = "MAN_DIS_ID" ИЛИ Колонка.Имя = "FROM_DATE" ИЛИ Колонка.Имя = "TO_DATE"
			ИЛИ Колонка.Имя = "REG_QUANT" ИЛИ Колонка.Имя = "S_BALANCE" ИЛИ Колонка.Имя = "CREDITED"
			ИЛИ Колонка.Имя = "PAID" ИЛИ Колонка.Имя = "E_BALANCE" ИЛИ Колонка.Имя = "SQUARE"
			ИЛИ Колонка.Имя = "STD_RATE" ИЛИ Колонка.Имя = "STATUS" ИЛИ Колонка.Имя = "STD_COUNT"
			ИЛИ Колонка.Имя = "STDC_COUNT" ИЛИ Колонка.Имя = "STDC_RATE" ИЛИ Колонка.Имя = "FLOOR"
			ИЛИ Колонка.Имя = "STDH_COUNT" ИЛИ Колонка.Имя = "STDP_COUNT" ИЛИ Колонка.Имя = "PRICE"
			ИЛИ Колонка.Имя = "STDM_COUNT" ИЛИ Колонка.Имя = "SQUARE" ИЛИ Колонка.Имя = "PRICE_GVM"
			ИЛИ Колонка.Имя = "PRICE_TRT" ИЛИ Колонка.Имя = "SQUARE_NM" ИЛИ Колонка.Имя = "SQUARE_DNM"
			ИЛИ Колонка.Имя = "REG_DATE" ИЛИ Колонка.Имя = "MIN_PAY" Тогда
			
			// Элемент массива - данные N-ой строки.
			Структура = Новый Структура;
			Структура.Вставить("Имя", Колонка.Имя);
			
			Если Колонка.ТипЗначения.СодержитТип(Тип("Число")) Тогда
				
				Структура.Вставить("Тип",                     "N");
				Структура.Вставить("РазрядностьЦелойЧасти",   Колонка.ТипЗначения.КвалификаторыЧисла.Разрядность - Колонка.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти);
				Структура.Вставить("РазрядностьДробнойЧасти", Колонка.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти);
				
			ИначеЕсли Колонка.ТипЗначения.СодержитТип(Тип("Строка")) Тогда
				
				Структура.Вставить("Тип",   "S");
				Структура.Вставить("Длина", Колонка.ТипЗначения.КвалификаторыСтроки.Длина);
				
			ИначеЕсли Колонка.ТипЗначения.СодержитТип(Тип("Дата")) Тогда
				
				Структура.Вставить("Тип",       "D");
				Структура.Вставить("ЧастиДаты", Колонка.ТипЗначения.КвалификаторыДаты.ЧастиДаты);
				
			КонецЕсли;
			
			МассивСтруктурКолонок.Добавить(Структура);
			
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат МассивСтруктурКолонок;
	
КонецФункции

#КонецОбласти