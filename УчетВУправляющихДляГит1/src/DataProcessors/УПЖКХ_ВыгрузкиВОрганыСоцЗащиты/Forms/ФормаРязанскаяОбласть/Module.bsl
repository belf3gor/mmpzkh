
//////////////////////////////////////////////////////////////////////////
// СОХРАНЯЕМЫЕ НАСТРОЙКИ

#Область РаботаСНастройками

&НаСервере
// Процедура восстановления настроек.
//
Процедура ВосстановитьНастройки()
	
	СтруктураПараметров = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("РязанскаяОбласть_ВыгрузкаВОСЗН", "ПараметрыВыгрузки");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		Если СтруктураПараметров.Свойство("КаталогВыгрузки") Тогда
			КаталогВыгрузки = СтруктураПараметров.КаталогВыгрузки;
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ОтапливаемаяПлощадь") Тогда
			ОтапливаемаяПлощадь = СтруктураПараметров.ОтапливаемаяПлощадь;
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ВыводРеквизитаЛицевогоСчета") Тогда
			Объект.ВыводРеквизитаЛицевогоСчета = СтруктураПараметров.ВыводРеквизитаЛицевогоСчета;
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ПериодВыгрузки") Тогда
			Объект.Период = СтруктураПараметров.ПериодВыгрузки;
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("НачалоПериода") Тогда
			Объект.НачалоПериода = СтруктураПараметров.НачалоПериода;
		Иначе
			Объект.НачалоПериода = НачалоДня(НачалоМесяца(Объект.Период));
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("КонецПериода") Тогда
			Объект.КонецПериода  = СтруктураПараметров.КонецПериода;
		Иначе
			Объект.КонецПериода = КонецДня(КонецМесяца(Объект.Период));
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("ВидПериода") Тогда
			ВидПериода = СтруктураПараметров.ВидПериода;
		Иначе
			ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц");
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("РязанскаяОбласть_УслугиВБазе") Тогда
			Объект.РязанскаяОбласть_УслугиВБазе.Загрузить(СтруктураПараметров.РязанскаяОбласть_УслугиВБазе);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("РязанскаяОбласть_УслугиВОСЗН") Тогда
			Объект.РязанскаяОбласть_УслугиВОСЗН.Загрузить(СтруктураПараметров.РязанскаяОбласть_УслугиВОСЗН);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура сохранения настроек.
//
Процедура СохранитьНастройки()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КаталогВыгрузки",              КаталогВыгрузки);
	СтруктураПараметров.Вставить("ОтапливаемаяПлощадь",          ОтапливаемаяПлощадь);
	СтруктураПараметров.Вставить("ВыводРеквизитаЛицевогоСчета",  Объект.ВыводРеквизитаЛицевогоСчета);
	СтруктураПараметров.Вставить("ПериодВыгрузки",               Объект.НачалоПериода);
	СтруктураПараметров.Вставить("НачалоПериода",                Объект.НачалоПериода);
	СтруктураПараметров.Вставить("КонецПериода",                 Объект.КонецПериода);
	СтруктураПараметров.Вставить("РязанскаяОбласть_УслугиВБазе", Объект.РязанскаяОбласть_УслугиВБазе.Выгрузить());
	СтруктураПараметров.Вставить("РязанскаяОбласть_УслугиВОСЗН", Объект.РязанскаяОбласть_УслугиВОСЗН.Выгрузить());
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("РязанскаяОбласть_ВыгрузкаВОСЗН", "ПараметрыВыгрузки", СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// РАБОТА С ВРЕМЕННЫМ ХРАНИЛИЩЕМ

#Область РаботаСВременнымХранилищем

&НаСервере
// Помещает настройки во временное хранилище.
//
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ОтапливаемаяПлощадь",          ОтапливаемаяПлощадь);
	СтруктураНастроек.Вставить("ВыводРеквизитаЛицевогоСчета",  Объект.ВыводРеквизитаЛицевогоСчета);
	СтруктураНастроек.Вставить("РязанскаяОбласть_УслугиВБазе", Объект.РязанскаяОбласть_УслугиВБазе.Выгрузить());
	СтруктураНастроек.Вставить("РязанскаяОбласть_УслугиВОСЗН", Объект.РязанскаяОбласть_УслугиВОСЗН.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
// Получает настройки из временного хранилища.
//
Функция ПолучитьНастройкиИзХранилища(АдресНастроекВХранилище)
	
	СтруктураНастроек = ПолучитьИзВременногоХранилища(АдресНастроекВХранилище);
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		
		Если СтруктураНастроек.Свойство("ОтапливаемаяПлощадь") Тогда
			ОтапливаемаяПлощадь = СтруктураНастроек.ОтапливаемаяПлощадь;
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ВыводРеквизитаЛицевогоСчета") Тогда
			Объект.ВыводРеквизитаЛицевогоСчета = СтруктураНастроек.ВыводРеквизитаЛицевогоСчета;
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("РязанскаяОбласть_УслугиВБазе") Тогда
			Объект.РязанскаяОбласть_УслугиВБазе.Загрузить(СтруктураНастроек.РязанскаяОбласть_УслугиВБазе);
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("РязанскаяОбласть_УслугиВОСЗН") Тогда
			Объект.РязанскаяОбласть_УслугиВОСЗН.Загрузить(СтруктураНастроек.РязанскаяОбласть_УслугиВОСЗН);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ДАННЫХ

#Область ЗаполнениеДанных

&НаКлиенте
// Проверяет наличие всех необходимых данных для заполнения таблиц выгрузки.
//
Функция ПроверкаУсловийДляЗаполненияТаблиц()
	
	ТекстОшибки = "";
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не указана организация!", "Не указана организация!");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОтапливаемаяПлощадь) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не указан вид отапливаемой площади на форме настроек!", "Не указан вид отапливаемой площади на форме настроек!");
	КонецЕсли;
	
	Если Объект.РязанскаяОбласть_УслугиВБазе.Количество() = 0 Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не заполнена таблица соответствия услуг на форме настроек!", "Не заполнена таблица соответствия услуг на форме настроек!");
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции // ПроверкаУсловийДляЗаполненияТаблиц

&НаКлиенте
// Проверяет наличие всех необходимых данных для выгрузки таблиц выгрузки.
//
Функция ПроверкаУсловийДляВыгрузкиТаблиц()
	
	ТекстОшибки = "";
	
	Если ПустаяСтрока(КаталогВыгрузки) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не указан каталог выгрузки!", "Не указан каталог выгрузки!");
	КонецЕсли;
	
	Если Объект.РязанскаяОбласть_ТаблицаВыгрузки.Количество() = 0 Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не заполнена таблица выгрузки!", "Не заполнена таблица выгрузки!");
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции // ПроверкаУсловийДляВыгрузкиТаблиц

&НаСервере
// Процедура заполнения всех данных.
//
Процедура ЗаполнитьНаСервере()
	
	Объект.РязанскаяОбласть_ТаблицаВыгрузки.Очистить();
	
	ТаблицаДанныхФайла = Объект.РязанскаяОбласть_ТаблицаВыгрузки.Выгрузить();
	
	ОбработкаОбъект = ДанныеФормыВЗначение(Объект, Тип("ОбработкаОбъект.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты"));
	ОбработкаОбъект.СформироватьТаблицуДанныхРязанскаяОбласть(ТаблицаДанныхФайла, ОтапливаемаяПлощадь);
	ЗначениеВДанныеФормы(ОбработкаОбъект, Объект);
	
	Если Объект.ВыводРеквизитаЛицевогоСчета = 3 Тогда
		ОбработатьПрефиксыЛС(ТаблицаДанныхФайла);
	КонецЕсли;
	
	Объект.РязанскаяОбласть_ТаблицаВыгрузки.Загрузить(ТаблицаДанныхФайла);
	
КонецПроцедуры

&НаСервере
// Обрабатывает не числовые символы в наименовании лицевых счетов.
//
Процедура ОбработатьПрефиксыЛС(ТаблицаДанныхФайла)
	
	Для Каждого СтрокаДанных ИЗ ТаблицаДанныхФайла Цикл
		СтрокаДанных.ILCHET = ПодготовитьНомерЛСДляВывода(СтрокаДанных.ILCHET);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Убирает из наименования лицевого счета не цифровые символы.
//
Функция ПодготовитьНомерЛСДляВывода(ЛицевойСчет)
	
	НаименованиеЛС = СокрЛП(ЛицевойСчет);
	СтрокаДляВозврата = "";
	Пока СтрДлина(НаименованиеЛС) > 0 Цикл
		
		СимволЛС = Лев(НаименованиеЛС, 1);
		Если КодСимвола(СимволЛС) > 47 И КодСимвола(СимволЛС) < 58 Тогда
			СтрокаДляВозврата = СтрокаДляВозврата + СимволЛС;
		КонецЕсли;
		
		НаименованиеЛС = Прав(НаименованиеЛС, СтрДлина(НаименованиеЛС) - 1);
	КонецЦикла;
	
	Возврат СтрокаДляВозврата;
	
КонецФункции // ПодготовитьНомерЛСДляВывода()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ВЫГРУЗКА ФАЙЛОВ

#Область ВыгрузкаФайлов

&НаКлиенте
// Предназначена для выгрузки данных из таблицы данных в dbf-файл.
//
Процедура ВыгрузитьДанныеВФайлРязанскаяОбласть()
	
	Если Объект.РязанскаяОбласть_ТаблицаВыгрузки.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В таблице выгружаемых данных отсутствуют данные для выгрузки в dbf-файл.");
		Возврат;
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Началась выгрузка данных!");
	
	СписокУслугДляВыгрузки = ПолучитьУслугиДляВыгрузки();
	
	Сч = 1;
	
	Для Каждого ТекУслуга ИЗ СписокУслугДляВыгрузки Цикл
		
		ФайлВыгрузки           = Новый XBase;
		#Если НЕ ВебКлиент Тогда
		ФайлВыгрузки.Кодировка = КодировкаXBase.OEM;
		#КонецЕсли
		ФайлВыгрузки.Поля.Добавить("FAMIL",   "S", 50);
		ФайлВыгрузки.Поля.Добавить("IMJA",    "S", 50);
		ФайлВыгрузки.Поля.Добавить("OTCH",    "S", 50);
		ФайлВыгрузки.Поля.Добавить("DROG",    "D", 8);
		ФайлВыгрузки.Поля.Добавить("POSEL",   "S", 30);
		ФайлВыгрузки.Поля.Добавить("NASP",    "S", 90);
		ФайлВыгрузки.Поля.Добавить("YLIC",    "S", 90);
		ФайлВыгрузки.Поля.Добавить("NDOM",    "S", 50);
		ФайлВыгрузки.Поля.Добавить("NKORP",   "S", 50);
		ФайлВыгрузки.Поля.Добавить("NKW",     "S", 50);
		ФайлВыгрузки.Поля.Добавить("NKOMN",   "S", 15);
		ФайлВыгрузки.Поля.Добавить("LCHADR",  "S", 15);
		ФайлВыгрузки.Поля.Добавить("ILCHET",  "S", 24);
		ФайлВыгрузки.Поля.Добавить("VIDGF",   "S", 25);
		ФайлВыгрузки.Поля.Добавить("LIFT",    "S", 1);
		ФайлВыгрузки.Поля.Добавить("OPL",     "N", 8, 2);
		ФайлВыгрузки.Поля.Добавить("OTPL",    "N", 8, 2);
		ФайлВыгрузки.Поля.Добавить("KOLZR",   "N", 2);
		ФайлВыгрузки.Поля.Добавить("GKU",     "S", 50);
		ФайлВыгрузки.Поля.Добавить("ORG",     "S", 30);
		ФайлВыгрузки.Поля.Добавить("VIDTAR",  "N", 1);
		ФайлВыгрузки.Поля.Добавить("KOEF",    "N", 10);
		ФайлВыгрузки.Поля.Добавить("TARIF",   "N", 8, 2);
		ФайлВыгрузки.Поля.Добавить("FAKT",    "N", 8, 3);
		ФайлВыгрузки.Поля.Добавить("SUMTAR",  "N", 8, 2);
		ФайлВыгрузки.Поля.Добавить("SUMDOLG", "N", 12, 2);
		ФайлВыгрузки.Поля.Добавить("OPLDOLG", "N", 12, 2);
		ФайлВыгрузки.Поля.Добавить("DATDOLG", "D", 8);
		ФайлВыгрузки.Поля.Добавить("KOLDOLG", "N", 3);
		
		ФайлВыгрузки.СоздатьФайл(КаталогВыгрузки + "\USLUGA" + Сч,);
		ФайлВыгрузки.АвтоСохранение = Истина;
		
		ИмяФайла = "" + ТекУслуга + "_" + Строка(Формат(?(ЗначениеЗаполнено(Объект.НачалоПериода), Объект.НачалоПериода, Объект.КонецПериода), "ДФ = MM")) + Строка(Формат(?(ЗначениеЗаполнено(Объект.НачалоПериода), Объект.НачалоПериода, Объект.КонецПериода), "ДФ = yyyy")) + ".DBF";
		
		ТаблицаВыгрузки = Объект.РязанскаяОбласть_ТаблицаВыгрузки.НайтиСтроки(Новый Структура("GKU", ТекУслуга));
		
		Для каждого ТекСтрока Из ТаблицаВыгрузки Цикл
			ФайлВыгрузки.Добавить();
			ЗаполнитьЗначенияСвойств(ФайлВыгрузки, ТекСтрока);
		КонецЦикла;
		
		ФайлВыгрузки.ЗакрытьФайл();
		
		НачатьПеремещениеФайла(Новый ОписаниеОповещения("ОбработатьРезультатПеремещенияФайла", ЭтаФорма, ИмяФайла), КаталогВыгрузки + "\USLUGA" + Сч + ".DBF", КаталогВыгрузки + "\" + ИмяФайла);
		
		Сч = Сч + 1;
		
	КонецЦикла;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Выгрузка данных завершена!");
	
КонецПроцедуры // ВыгрузитьДанныеВФайлРязанскаяОбласть()

&НаКлиенте
// Обработчик результата перемещения файла.
//
Процедура ОбработатьРезультатПеремещенияФайла(ПеремещаемыйФайл, ДополнительныеПараметры) Экспорт
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Файл """ + ДополнительныеПараметры + """ успешно сформирован!");
	
КонецПроцедуры // ОбработатьРезультатПеремещенияФайла()

&НаСервере
// Возвращает массив различных услуг в ОСЗН для выгрузки в отдельные файлы.
//
Функция ПолучитьУслугиДляВыгрузки()
	
	ТаблицаВыгружаемых = Объект.РязанскаяОбласть_ТаблицаВыгрузки.Выгрузить(, "GKU");
	ТаблицаВыгружаемых.Свернуть("GKU");
	
	Возврат ТаблицаВыгружаемых.ВыгрузитьКолонку("GKU");
	
КонецФункции

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	ТекРабДата = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	Объект.Период = ТекРабДата;
	
	ВосстановитьНастройки();
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьСписокВыбораВидПериода(Перечисления.ДоступныеПериодыОтчета.День,
																	Элементы.ВидПериода.СписокВыбора, ВидПериода);
	
	ПериодСтрокой = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьПредставлениеПериодаОтчета(ВидПериода, Объект.НачалоПериода, Объект.КонецПериода);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ПереключитьТекущуюСтраницуВыбораПериода(ВидПериода, Элементы.ГруппаПоляВводаПериода);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки();
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "КомандаНастройка".
//
Процедура КомандаНастройка(Команда)
	
	АдресНастроекВХранилище = ПоместитьНастройкиВХранилище();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаНастройкаЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты.Форма.РязанскаяОбласть_ФормаНастройки", Новый Структура("АдресНастроекВХранилище", АдресНастроекВХранилище), , , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата опроса команды "КомандаНастройка".
//
Процедура КомандаНастройкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		ПолучитьНастройкиИзХранилища(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаЗаполнить".
//
Процедура КомандаЗаполнить(Команда)
	
	ТекстОшибки = ПроверкаУсловийДляЗаполненияТаблиц();
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьНаСервере();
	
КонецПроцедуры // КомандаЗаполнить()

&НаКлиенте
// Обработчик команды "КомандаВыгрузить".
//
Процедура КомандаВыгрузить(Команда)
	
	ТекстОшибки = ПроверкаУсловийДляВыгрузкиТаблиц();
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	КаталогНаДиске = Новый Файл(КаталогВыгрузки);
	КаталогНаДиске.НачатьПроверкуСуществования(Новый ОписаниеОповещения("КомандаВыгрузитьКаталогНаДискеСуществуетЗавершение", ЭтотОбъект, Новый Структура("КаталогНаДиске", КаталогНаДиске)));
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик завершения работы процедуры "НачатьПроверкуСуществования".
//
Процедура КомандаВыгрузитьКаталогНаДискеСуществуетЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	КаталогНаДиске = ДополнительныеПараметры.КаталогНаДиске;
	
	Если НЕ Существует Тогда
		ПоказатьПредупреждение(Неопределено, "Каталог выгрузки данных указан не верно!");
		Возврат;
	КонецЕсли;
	
	КаталогНаДиске.НачатьПроверкуЭтоКаталог(Новый ОписаниеОповещения("КомандаВыгрузитьЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВыгрузитьЗавершение(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЭтоКаталог Тогда
		ПоказатьПредупреждение(Неопределено, "Каталог выгрузки данных указан не верно!");
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДанныеВФайлРязанскаяОбласть();
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

////////////////////////
// Диалог выбора файла.

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Каталог выгрузки начислений".
//
Процедура КаталогВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Заголовок                   = "Выбор каталога файлов";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	ДиалогВыбораФайла.Каталог                     = КаталогВыгрузки;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("КаталогВыгрузкиНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла)));
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогВыгрузкиНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если НЕ ВыбранныеФайлы = Неопределено Тогда
		КаталогВыгрузки = ДиалогВыбораФайла.Каталог;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "Открытие" поля ввода "Каталог выгрузки начислений".
//
Процедура КаталогВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НачатьЗапускПриложения(Новый ОписаниеОповещения("КаталогВыгрузкиОткрытиеЗавершение", ЭтотОбъект), КаталогВыгрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура КаталогВыгрузкиОткрытиеЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

////////////////////////
// Период

// Обработчик события "ПриИзменении" поля "ВидПериода".
&НаКлиенте
Процедура ВидПериодаПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВидПериодаПриИзменении(Элемент, ВидПериода, Объект.НачалоПериода, Объект.КонецПериода, ПериодСтрокой);
	УПЖКХ_ТиповыеМетодыКлиентСервер.ПереключитьТекущуюСтраницуВыбораПериода(ВидПериода, Элементы.ГруппаПоляВводаПериода);
	
КонецПроцедуры // ВидПериодаПриИзменении()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПериодСтрокой".
Процедура ПериодСтрокойПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодПриИзменении(Элемент, ПериодСтрокой, Объект.НачалоПериода, Объект.КонецПериода);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ПериодСтрокой".
Процедура ПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПериодНачалоВыбораЗавершение", ЭтотОбъект);
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка, 
		ВидПериода, Объект.НачалоПериода, ОписаниеОповещения);
	
КонецПроцедуры

// Процедура окончания асинхроного выбора периода.
&НаКлиенте
Процедура ПериодНачалоВыбораЗавершение(СтруктураПериода, ДополнительныеПараметры) Экспорт
	
	// Установим полученный период.
	Если СтруктураПериода <> Неопределено Тогда
		ВидПериода = СтруктураПериода.ВидПериода;
		ПериодСтрокой = СтруктураПериода.Период;
		Объект.НачалоПериода = СтруктураПериода.НачалоПериода;
		Объект.КонецПериода = СтруктураПериода.КонецПериода;
	КонецЕсли;
	
КонецПроцедуры // ПериодНачалоВыбораЗавершение()

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля "ПериодСтрокой".
Процедура ПериодСтрокойОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка,
		ВидПериода, ПериодСтрокой, Объект.НачалоПериода, Объект.КонецПериода);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "ПериодСтрокой".
Процедура ПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка,
		ВидПериода, ПериодСтрокой, Объект.НачалоПериода, Объект.КонецПериода);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "ПериодСтрокой".
Процедура ПериодСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка,
		ВидПериода, ПериодСтрокой, Объект.НачалоПериода, Объект.КонецПериода);
	
КонецПроцедуры

// Обработчик события "ПриИзменении" поля "НачалоПериодаДень".
&НаКлиенте
Процедура НачалоПериодаДеньПриИзменении(Элемент)
	
	Объект.КонецПериода = КонецДня(Объект.НачалоПериода);
	
КонецПроцедуры // НачалоПериодаДеньПриИзменении()

#КонецОбласти