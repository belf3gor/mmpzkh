
//////////////////////////////////////////////////////////////////////////
// СОХРАНЯЕМЫЕ НАСТРОЙКИ

#Область РаботаСНастройками

&НаСервере
// Процедура восстановления настроек.
Процедура ВосстановитьНастройкиНаСервере()
	
	СтруктураПараметров = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("ПараметрыВыгрузки_УПЖКХ_ВыгрузкаПермскийКрай", "ПараметрыВыгрузки");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		Если СтруктураПараметров.Свойство("ПермскийКрай_НастройкиТаблицаУслуг") Тогда
			СтруктураПараметров.Свойство("ИмяФайлаВыгрузки", Объект.ИмяФайлаВыгрузки);
		КонецЕсли;
		
		// Настройки соответствия услуг.
		Если СтруктураПараметров.Свойство("ПермскийКрай_НастройкиТаблицаУслуг") Тогда
			врНастройкиТаблицаУслуг = СтруктураПараметров.ПермскийКрай_НастройкиТаблицаУслуг;
			Если ТипЗнч(врНастройкиТаблицаУслуг) = Тип("ТаблицаЗначений") Тогда
				Объект.ПермскийКрай_НастройкиТаблицаУслуг.Загрузить(врНастройкиТаблицаУслуг);
			КонецЕсли;
		КонецЕсли;
		
		// Услуги кап.ремонта.
		Если СтруктураПараметров.Свойство("МассивЗначенийУслугиКапРемонта") Тогда
			врМассивЗначенийУслугиКапРемонта = СтруктураПараметров.МассивЗначенийУслугиКапРемонта;
			Если ТипЗнч(врМассивЗначенийУслугиКапРемонта) = Тип("Массив") Тогда
				УслугиКапРемонта.ЗагрузитьЗначения(врМассивЗначенийУслугиКапРемонта);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьНастройкиНаСервере()

&НаСервере
// Процедура сохранения настроек.
Процедура СохранитьНастройкиНаСервере()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяФайлаВыгрузки",                   Объект.ИмяФайлаВыгрузки);
	СтруктураПараметров.Вставить("ПермскийКрай_НастройкиТаблицаУслуг", Объект.ПермскийКрай_НастройкиТаблицаУслуг.Выгрузить());
	СтруктураПараметров.Вставить("МассивЗначенийУслугиКапРемонта",     УслугиКапРемонта.ВыгрузитьЗначения());
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("ПараметрыВыгрузки_УПЖКХ_ВыгрузкаПермскийКрай", "ПараметрыВыгрузки", СтруктураПараметров);
	
КонецПроцедуры // СохранитьНастройкиНаСервере()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаКлиенте
// Обработчик события "ПриОткрытии" формы
Процедура ПриОткрытии(Отказ)
	
	Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
	Объект.Период = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьРабочуюДату();     
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
	ВосстановитьНастройкиНаСервере();
	
	Если Не Объект.ИмяФайлаВыгрузки = "" Тогда
		Элементы.КнопкаЗагрузить.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьНастройкиНаСервере();
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийФормы

////////////////////////
// Период

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПериодСтрокой".
Процедура ПериодСтрокойПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Модифицированность);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ПериодСтрокой".
Процедура ПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Регулирование" поля "ПериодСтрокой".
Процедура ПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Направление,
														Модифицированность);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "ПериодСтрокой".
Процедура ПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "ПериодСтрокой".
Процедура ПериодСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

////////////////////////
// Выбор файла выгрузки

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ИмяФайлаЗагрузки".
Процедура ИмяФайлаВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла                             = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Заголовок                   = "Выбор каталога файлов";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ВыборФайлаЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		
		// В случае выбора каталога снимаем блокировку с кнопки "Загрузить".
		Объект.ИмяФайлаВыгрузки = ВыбранныеФайлы[0];
		Элементы.КнопкаЗагрузить.Доступность = Истина;
		
	ИначеЕсли Объект.ИмяФайлаВыгрузки = "" Тогда
		
		Элементы.КнопкаЗагрузить.Доступность = Ложь;
		
	КонецЕсли;
	
	// Устанавливаем блокировку с кнопок (для случая повторной загрузки).
	Элементы.КнопкаНастройка.Доступность    = Ложь;
	Элементы.КнопкаЗаполнить.Доступность = Ложь;

КонецПроцедуры // ИмяФайлаВыгрузкиНачалоВыбора()

&НаКлиенте
// Обработчик события "Открытие" поля "ИмяФайлаЗагрузки".
Процедура ИмяФайлаВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УПЖКХ_ОбщегоНазначенияКлиент.ОткрытьСтраницуВБраузере("explorer " + Объект.ИмяФайлаВыгрузки);
	
КонецПроцедуры // ИмяФайлаВыгрузкиОткрытие()

////////////////////////
// Флаг группировки таблицы оплат

&НаКлиенте
// Обработчик события "ПриИзменении" флажка "Свернуть".
Процедура СвернутьПриИзменении(Элемент)
	                       
	СвернутьРазвернуть();
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// РАБОТА С ВРЕМЕННЫМ ХРАНИЛИЩЕМ

#Область РаботаСВременнымХранилищем

&НаСервере
// Помещает данные во временное хранилище для передачи их в форму настройки.
//
// Возвращаемое значение:
//  Строка - адрес настроек в хранилище.
//
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ПермскийКрай_НастройкиТаблицаУслуг", Объект.ПермскийКрай_НастройкиТаблицаУслуг.Выгрузить());
	СтруктураНастроек.Вставить("ПермскийКрай_ТаблицаУслуг",          Объект.ПермскийКрай_ТаблицаУслуг.Выгрузить());
	СтруктураНастроек.Вставить("МассивЗначенийУслугиКапРемонта",     УслугиКапРемонта.ВыгрузитьЗначения());
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции // ПоместитьДанныеВХранилище()

&НаСервере
// Получает таблицу услуг из временного хранилища.
Процедура ПолучитьНастройкиИзХранилища(АдресНастроекВХранилище)
	
	СтруктураНастроек = ПолучитьИзВременногоХранилища(АдресНастроекВХранилище);
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		
		врНастройкиТаблицаУслуг = СтруктураНастроек.ПермскийКрай_НастройкиТаблицаУслуг;
		Если ТипЗнч(врНастройкиТаблицаУслуг) = Тип("ТаблицаЗначений") Тогда
			Объект.ПермскийКрай_НастройкиТаблицаУслуг.Загрузить(врНастройкиТаблицаУслуг);
		КонецЕсли;
		
		врМассивЗначенийУслугиКапРемонта = СтруктураНастроек.МассивЗначенийУслугиКапРемонта;
		Если ТипЗнч(врМассивЗначенийУслугиКапРемонта) = Тип("Массив") Тогда
			УслугиКапРемонта.ЗагрузитьЗначения(врМассивЗначенийУслугиКапРемонта);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьНастройкиИзХранилища()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

////////////////////////
// Настройка

&НаКлиенте
// Обработчик команды "КомандаНастройка".
Процедура КомандаНастройка(Команда)
	
	АдресНастроекВХранилище = ПоместитьНастройкиВХранилище();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаНастройкаЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты.Форма.ПермскийКрай_ФормаНастройка", Новый Структура("АдресНастроекВХранилище", АдресНастроекВХранилище), ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата опроса команды "КомандаНастройка".
Процедура КомандаНастройкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		ПолучитьНастройкиИзХранилища(Результат);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////
// Загрузить

&НаКлиенте
// Обработчик команды "КомандаЗагрузить".
Процедура КомандаЗагрузить(Команда)
	
	Если ТаблицаПоставщиков.Количество() > 0 Или
		 ТаблицаУлиц.Количество() > 0 Или
		 Объект.ПермскийКрай_ТаблицаУслуг.Количество() > 0 Или
		 Объект.ПермскийКрай_Проживающие.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаЗагрузитьЗавершение", ЭтаФорма);
		
		ТекстВопроса = "Перед загрузкой все таблицы будут очищены. Продолжить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		КомандаЗагрузитьПродолжение();
	КонецЕсли;
	
КонецПроцедуры // КомандаЗагрузить()

&НаКлиенте
// Обработчик результата вопроса команды "КомандаЗагрузить".
Процедура КомандаЗагрузитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		КомандаЗагрузитьПродолжение();
	КонецЕсли;
	
КонецПроцедуры // КомандаЗагрузитьЗавершение()

&НаКлиенте
// Продолжение общей части обработчика команды "КомандаЗагрузить".
Процедура КомандаЗагрузитьПродолжение()
	
	// Проверяем каталог на существование.
	Файл = Новый Файл(Объект.ИмяФайлаВыгрузки);
	Файл.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ПроверкаНаСуществованиеФайлаЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаНаСуществованиеФайлаЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	Если Не Существует Тогда
		ПоказатьПредупреждение(, "Указанный каталог не существует!");
		Возврат;
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
	
	// Очищаем таблицы.
	ТаблицаПоставщиков.Очистить();
	ТаблицаУлиц.Очистить();
	Объект.ПермскийКрай_ТаблицаУслуг.Очистить();
	Объект.ПермскийКрай_Проживающие.Очистить();
	
	// Заполнение таблицы поставщиков.
	ФайлSPR_POST = Новый XBase;
	ФайлSPR_POST.Кодировка = КодировкаXBase.OEM;
	ФайлSPR_POST.ОткрытьФайл(Объект.ИмяФайлаВыгрузки + "\SPR_POST.DBF", , Истина); 
	
	Если ФайлSPR_POST.Открыта() Тогда
		Пока Не ФайлSPR_POST.ВКонце() Цикл
			
			НоваяСтрока = ТаблицаПоставщиков.Добавить();
			НоваяСтрока.ID   = Строка(ФайлSPR_POST.ID);
			НоваяСтрока.NAME = СокрЛП(ФайлSPR_POST.NAME);
			НоваяСтрока.Terr = Строка(ФайлSPR_POST.Terr);
			
			ФайлSPR_POST.Следующая();
			
		КонецЦикла;
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось открыть справочный файл поставщиков ""SPR_POST.DBF""!");
	КонецЕсли;
	
	// Заполнение таблицы улиц.
	ФайлSPR_UL = Новый XBase;
	ФайлSPR_UL.Кодировка = КодировкаXBase.OEM;
	ФайлSPR_UL.ОткрытьФайл(Объект.ИмяФайлаВыгрузки + "\SPR_UL.DBF", , Истина); 
	
	Если ФайлSPR_UL.Открыта() Тогда
		Пока Не ФайлSPR_UL.ВКонце() Цикл
			
			НоваяСтрока      = ТаблицаУлиц.Добавить();
			НоваяСтрока.ID   = Строка(ФайлSPR_UL.ID);
			НоваяСтрока.VID  = СокрЛП(ФайлSPR_UL.VID);
			НоваяСтрока.NAME = СокрЛП(ФайлSPR_UL.NAME);
			
			ФайлSPR_UL.Следующая();
			
		КонецЦикла;
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось открыть справочный файл улиц ""SPR_UL.DBF""!");
	КонецЕсли;
	
	// Заполнение таблицы услуг.
	ФайлSPR_USL = Новый XBase;
	ФайлSPR_USL.Кодировка = КодировкаXBase.OEM;
	ФайлSPR_USL.ОткрытьФайл(Объект.ИмяФайлаВыгрузки + "\SPR_USL.DBF", , Истина); 
	
	Если ФайлSPR_USL.Открыта() Тогда
		Пока Не ФайлSPR_USL.ВКонце() Цикл
			
			НоваяСтрока      = Объект.ПермскийКрай_ТаблицаУслуг.Добавить();
			НоваяСтрока.ID   = Строка(ФайлSPR_USL.ID);
			НоваяСтрока.NAME = СокрЛП(ФайлSPR_USL.NAME);
			ФайлSPR_USL.Следующая();
			
		КонецЦикла;
		
		// Снимаем блокировку с кнопки "Настройка"
		Элементы.КнопкаНастройка.Доступность = Истина;
		
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось открыть справочный файл услуг ""SPR_USL.DBF""!");
	КонецЕсли;
	
	// Заполнение таблицы проживающих.
	ФайлPerson = Новый XBase;
	ФайлPerson.Кодировка = КодировкаXBase.OEM;
	ФайлPerson.ОткрытьФайл(Объект.ИмяФайлаВыгрузки + "\PERSON.DBF", , Истина); //только для чтения
	
	Если ФайлPerson.Открыта() Тогда
		
		Пока Не ФайлPerson.ВКонце() Цикл
			
			НоваяСтрока = Объект.ПермскийКрай_Проживающие.Добавить();
			
			НоваяСтрока.КодЕАИС        = ФайлPerson.ID;
			НоваяСтрока.КодЖКУ         = ФайлPerson.ID_Z;
			НоваяСтрока.Фамилия        = СокрЛП(ФайлPerson.FAM);
			НоваяСтрока.Имя            = СокрЛП(ФайлPerson.IM);
			НоваяСтрока.Отчество       = СокрЛП(ФайлPerson.OT);
			НоваяСтрока.ДатаРождения   = ФайлPerson.DATA_R;
			НоваяСтрока.КодТерритории  = ФайлPerson.Terr;
			НоваяСтрока.КодУлицы       = ФайлPerson.UL;
			НоваяСтрока.ПочтовыйИндекс = СокрЛП(ФайлPerson.INDEX);
			НоваяСтрока.Дом            = ФайлPerson.NDOM;
			НоваяСтрока.Корпус         = СокрЛП(ФайлPerson.NKORP);
			НоваяСтрока.Квартира       = СокрЛП(ФайлPerson.NKV);
			НоваяСтрока.ЛитераКвартиры = СокрЛП(ФайлPerson.KVLIT);
			НоваяСтрока.КодЖилОрганов  = ФайлPerson.ORG;
			
			ФайлPerson.Следующая();
			
		КонецЦикла;
		
		// Если была снята блокировка с кнопки "Настройка", то снимаем блокировку с кнопки "ЗаполнитьВсе".
		Элементы.КнопкаЗаполнить.Доступность = (Элементы.КнопкаНастройка.Доступность);
		
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось открыть справочный файл проживающих ""PERSON.DBF""!");
	КонецЕсли;
	
	#КонецЕсли

КонецПроцедуры // КомандаЗагрузитьПродолжение()

////////////////////////
// Заполнить

&НаКлиенте
// Обработчик команды "КомандаЗаполнить".
Процедура КомандаЗаполнить(Команда)
	
	Если Объект.ПермскийКрай_ОплатаПоУслугам.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаЗаполнитьЗавершение", ЭтаФорма);
		
		ТекстВопроса = "Перед заполнением таблица оплат будет очищена. Продолжить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		КомандаЗаполнитьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата вопроса команды "КомандаЗаполнить".
Процедура КомандаЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		
		Объект.ПермскийКрай_ОплатаПоУслугам.Очистить();
		КомандаЗаполнитьНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьЗавершение()


#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

// Продолжение общей части обработчика команды "КомандаЗаполнить".
Процедура КомандаЗаполнитьНаСервере()
	
	ТаблицаЖильцов = ПолучитьДанные();
	
	ТаблицаОплат = Новый ТаблицаЗначений;
	ТаблицаОплат.Колонки.Добавить("Код");
	ТаблицаОплат.Колонки.Добавить("КодПроживающего");
	ТаблицаОплат.Колонки.Добавить("НачалоПериода");
	ТаблицаОплат.Колонки.Добавить("КонецПериода");
	ТаблицаОплат.Колонки.Добавить("Сумма");
	ТаблицаОплат.Колонки.Добавить("КодУслуги");
	ТаблицаОплат.Колонки.Добавить("КодПоставщика");
	
	Для Каждого Проживающий Из Объект.ПермскийКрай_Проживающие Цикл
		
		// Подготавливаем структуру адреса для поиска платильщика в таблице начислений.
		СтруктАдрес = Новый Структура();
		
		ТекФИО = Проживающий.Фамилия + " " + Проживающий.Имя + " " + Проживающий.Отчество;
		СтруктАдрес.Вставить("ФИО", ТекФИО);
		
		СтрокаУлицы = ТаблицаУлиц.НайтиСтроки(Новый Структура("ID", Строка(Проживающий.КодУлицы)));
		Если СтрокаУлицы.Количество() <> 0 Тогда
			ТекУлица = СтрокаУлицы[0].NAME;
		КонецЕсли;
		СтруктАдрес.Вставить("Улица", ?(ТекУлица = Неопределено, "", ТекУлица));
		
		СтруктАдрес.Вставить("Дом", Строка(Проживающий.Дом));
		
		Если Не ПустаяСтрока(Проживающий.Корпус) Тогда
			СтруктАдрес.Вставить("Корпус", Проживающий.Корпус);
		КонецЕсли;
		
		СтруктАдрес.Вставить("Квартира", Проживающий.Квартира);
		
		Если Не ПустаяСтрока(Проживающий.ЛитераКвартиры) Тогда
			СтруктАдрес.Вставить("Суффикс", Проживающий.ЛитераКвартиры);
		КонецЕсли;
		
		// Поиск платильщика в таблице начислений.
		СтрокиПлательщика = ТаблицаЖильцов.НайтиСтроки(СтруктАдрес);
		
		Если СтрокиПлательщика.Количество() <> 0 Тогда
			
			// Незаполненные поля в "Объект.ПермскийКрай_Проживающие"
			Проживающий.ЛицевойСчет    = СтрокиПлательщика[0].ЛицевойСчет;
			Проживающий.КолПроживающих = СтрокиПлательщика[0].КоличествоПроживающих;
			
			// Заполнение таблицы оплат. Услуги, которым не задано соответствие в базе, в таблицу не попадают.
			Для Индекс = 0 По СтрокиПлательщика.Количество() - 1 Цикл
				
				Если Не СтрокиПлательщика[Индекс].Услуга.Пустая() Тогда
					
					СтрокаУслуги = Объект.ПермскийКрай_НастройкиТаблицаУслуг.НайтиСтроки(Новый Структура("Колонка2", СтрокиПлательщика[Индекс].Услуга));
					Если СтрокаУслуги.Количество() <> 0 Тогда
							
							СтрокаУслуги = Объект.ПермскийКрай_ТаблицаУслуг.НайтиСтроки(Новый Структура("NAME", СтрокаУслуги[0].Колонка1));
							Если СтрокаУслуги.Количество() <> 0 Тогда
								
								НоваяСтрокаУслуг = ТаблицаОплат.Добавить();
								
								НоваяСтрокаУслуг.КодПроживающего = Проживающий.КодЕАИС;
								НоваяСтрокаУслуг.НачалоПериода   = НачалоМесяца(Объект.Период);
								НоваяСтрокаУслуг.КонецПериода    = КонецМесяца(Объект.Период);
								НоваяСтрокаУслуг.Сумма           = СтрокиПлательщика[Индекс].СуммаПравильная;
								
								НоваяСтрокаУслуг.КодУслуги       = СтрокаУслуги[0].ID;
								
							КонецЕсли;
							
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Номер = 1;
	Для Каждого Строка Из ТаблицаОплат Цикл
		
		НоваяСтрокаУслуг = Объект.ПермскийКрай_ОплатаПоУслугам.Добавить();
		НоваяСтрокаУслуг.Код             = Формат(Номер, "ЧГ=0");
		НоваяСтрокаУслуг.КодПроживающего = Строка.КодПроживающего;
		НоваяСтрокаУслуг.НачалоПериода   = Строка.НачалоПериода;
		НоваяСтрокаУслуг.КонецПериода    = Строка.КонецПериода;
		НоваяСтрокаУслуг.Сумма           = Строка.Сумма;
		НоваяСтрокаУслуг.КодУслуги       = Строка.КодУслуги;
		Номер = Номер + 1;
		
	КонецЦикла;
	
	// Свернутый вариант таблицы оплат
	ТаблицаОплатСвернутая   = Объект.ПермскийКрай_ОплатаПоУслугам.Выгрузить();
	ТаблицаОплатСвернутая.Свернуть("КодПроживающего, КодУслуги, НачалоПериода, КонецПериода", "Сумма");
	ТаблицаОплатСвернутая.Колонки.Добавить("Код");
	Номер = 1;
	Для Каждого Строка Из ТаблицаОплатСвернутая Цикл
		Строка.Код = Формат(Номер, "ЧГ=0");
		Номер = Номер + 1;
	КонецЦикла;
	
	СтруктураТаблицОплат = Новый Структура;
	СтруктураТаблицОплат.Вставить("ТаблицаОплатРазвернутая", Объект.ПермскийКрай_ОплатаПоУслугам.Выгрузить());
	СтруктураТаблицОплат.Вставить("ТаблицаОплатСвернутая",   ТаблицаОплатСвернутая);
	
	АдресТаблицОплатВХранилище = ПоместитьВоВременноеХранилище(СтруктураТаблицОплат, Новый УникальныйИдентификатор);
	
	Объект.Свернуть = Истина;
	СвернутьРазвернуть();
	
	Элементы.Свернуть.Доступность         = Истина;
	Элементы.КомандаВыгрузить.Доступность = Истина;
	
КонецПроцедуры

// Функция получает данные о жильцах и оплатах.
Функция ПолучитьДанные()
	
	Запрос = Новый Запрос();
	
	// Устанавливаем параметры запроса.
	Запрос.УстановитьПараметр("ДатаНач",          НачалоМесяца(Объект.Период));
	Запрос.УстановитьПараметр("ДатаКон",          КонецМесяца(Объект.Период));
	Запрос.УстановитьПараметр("Организация",      Объект.Организация);
	Запрос.УстановитьПараметр("УслугиКапРемонта", УслугиКапРемонта);
	
	// Назначаем менеджер временных таблиц.
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Выбираем вид контактной информации - почтовый адрес.
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	// 1. Получаем данные о проживающих в связке с ЛС и Помещением.
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет КАК ЛицевойСчетСсылка,
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет.Адрес КАК Помещение,
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец.Наименование КАК ФИО,
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет.Наименование КАК ЛицевойСчет,
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет.Адрес.Код КАК ТекКвартира,
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет.Адрес.Суффикс КАК Суффикс
	|ПОМЕСТИТЬ врПроживающие
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(&ДатаКон, ДатаИзменения <= &ДатаКон) КАК УПЖКХ_СведенияОПроживающихСрезПоследних";
	
	Запрос.Выполнить();
	
	// Из запроса (1) помучаем массив объектов (КВП_Здания).
	ЗапросПоЗданиям = Новый Запрос;
	ЗапросПоЗданиям.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросПоЗданиям.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	врПроживающие.Помещение.Владелец КАК Объект
	|ИЗ
	|	врПроживающие КАК врПроживающие
	|
	|СГРУППИРОВАТЬ ПО
	|	врПроживающие.Помещение.Владелец";
	
	МассивОбъектов = ЗапросПоЗданиям.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
	// 2. Получаем данные об адресе объекта.
	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов);
	
	// 3. Продолжаем запрос.
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втКонтактнаяИнформация.Объект,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Улица, """") КАК Улица,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Дом, """") КАК Дом,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Корпус, """") КАК Корпус
	|ПОМЕСТИТЬ врАдреса
	|ИЗ
	|	втКонтактнаяИнформация КАК втКонтактнаяИнформация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец) КАК КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втЗарегистрированные
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					врПроживающие.ЛицевойСчетСсылка
	|				ИЗ
	|					врПроживающие КАК врПроживающие)) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект
	|ПОМЕСТИТЬ втЛицевыеСчетаПодготовка
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					врПроживающие.ЛицевойСчетСсылка
	|				ИЗ
	|					врПроживающие КАК врПроживающие)) КАК КВП_ЛицевыеСчетаСрезПоследних
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.ЛицевойСчет,
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних.КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втУчетКоличестваЖильцов
	|ИЗ
	|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втЛицевыеСчетаПодготовка.ЛицевойСчет
	|				ИЗ
	|					втЛицевыеСчетаПодготовка КАК втЛицевыеСчетаПодготовка)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетамСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛицевыеСчетаПодготовка.ЛицевойСчет,
	|	втЛицевыеСчетаПодготовка.Объект,
	|	ВЫБОР
	|		КОГДА &УказыватьКоличествоПрожИЗарегЧислами = ИСТИНА
	|			ТОГДА ЕСТЬNULL(втУчетКоличестваЖильцов.КоличествоЗарегистрированных, 0)
	|		ИНАЧЕ ЕСТЬNULL(втЗарегистрированные.КоличествоЗарегистрированных, 0)
	|	КОНЕЦ КАК КоличествоПроживающих
	|ПОМЕСТИТЬ втЛицевыеСчета
	|ИЗ
	|	втЛицевыеСчетаПодготовка КАК втЛицевыеСчетаПодготовка
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЗарегистрированные КАК втЗарегистрированные
	|		ПО втЛицевыеСчетаПодготовка.ЛицевойСчет = втЗарегистрированные.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУчетКоличестваЖильцов КАК втУчетКоличестваЖильцов
	|		ПО втЛицевыеСчетаПодготовка.ЛицевойСчет = втУчетКоличестваЖильцов.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втЛицевыеСчета.ЛицевойСчет,
	|	втЛицевыеСчета.КоличествоПроживающих,
	|	врАдреса.Улица,
	|	врАдреса.Дом,
	|	врАдреса.Корпус
	|ПОМЕСТИТЬ врАдресКоличествоПроживающих
	|ИЗ
	|	втЛицевыеСчета КАК втЛицевыеСчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врАдреса КАК врАдреса
	|		ПО втЛицевыеСчета.Объект.Владелец = врАдреса.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врПроживающие.ЛицевойСчетСсылка,
	|	врПроживающие.ФИО,
	|	врПроживающие.ЛицевойСчет,
	|	врПроживающие.ТекКвартира,
	|	врПроживающие.Суффикс,
	|	врАдресКоличествоПроживающих.КоличествоПроживающих,
	|	врАдресКоличествоПроживающих.Улица,
	|	врАдресКоличествоПроживающих.Дом,
	|	врАдресКоличествоПроживающих.Корпус
	|ПОМЕСТИТЬ врТаблЖильцов
	|ИЗ
	|	врПроживающие КАК врПроживающие
	|		ЛЕВОЕ СОЕДИНЕНИЕ врАдресКоличествоПроживающих КАК врАдресКоличествоПроживающих
	|		ПО врПроживающие.ЛицевойСчетСсылка = врАдресКоличествоПроживающих.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|ПОМЕСТИТЬ Взаиморасчеты
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			НЕ Услуга В (&УслугиКапРемонта)
	|				И Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						врТаблЖильцов.ЛицевойСчетСсылка
	|					ИЗ
	|						врТаблЖильцов КАК врТаблЖильцов)
	|				И НЕ РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы))
	|				И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))) КАК УПЖКХ_НачисленияОбороты
	|ГДЕ
	|	УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КВП_НазначенныеНачисленияСрезПоследних.Объект,
	|	КВП_НазначенныеНачисленияСрезПоследних.Услуга,
	|	0
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления.СрезПоследних(
	|			&ДатаКон,
	|			Организация = &Организация
	|				И ДатаИзменения <= &ДатаКон
	|				И Объект В
	|					(ВЫБРАТЬ
	|						врТаблЖильцов.ЛицевойСчетСсылка
	|					ИЗ
	|						врТаблЖильцов КАК врТаблЖильцов)) КАК КВП_НазначенныеНачисленияСрезПоследних
	|ГДЕ
	|	КВП_НазначенныеНачисленияСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Взаиморасчеты.ЛицевойСчет,
	|	Взаиморасчеты.Услуга,
	|	СУММА(Взаиморасчеты.СуммаНачисленияОборот) КАК СуммаНачисленияОборот
	|ПОМЕСТИТЬ врТаблПравильныхОплат
	|ИЗ
	|	Взаиморасчеты КАК Взаиморасчеты
	|
	|СГРУППИРОВАТЬ ПО
	|	Взаиморасчеты.ЛицевойСчет,
	|	Взаиморасчеты.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	врТаблЖильцов.ФИО КАК ФИО,
	|	врТаблЖильцов.ЛицевойСчет КАК ЛицевойСчет,
	|	врТаблЖильцов.Улица,
	|	врТаблЖильцов.Дом,
	|	врТаблЖильцов.Корпус,
	|	врТаблЖильцов.ТекКвартира,
	|	врТаблЖильцов.Суффикс,
	|	врТаблЖильцов.КоличествоПроживающих,
	|	ЕСТЬNULL(врТаблПравильныхОплат.СуммаНачисленияОборот, 0) КАК СуммаПравильная,
	|	ЕСТЬNULL(врТаблПравильныхОплат.Услуга, ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)) КАК Услуга
	|ИЗ
	|	врТаблЖильцов КАК врТаблЖильцов
	|		ЛЕВОЕ СОЕДИНЕНИЕ врТаблПравильныхОплат КАК врТаблПравильныхОплат
	|		ПО врТаблЖильцов.ЛицевойСчетСсылка = врТаблПравильныхОплат.ЛицевойСчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЛицевойСчет";
	Запрос.УстановитьПараметр("УказыватьКоличествоПрожИЗарегЧислами", Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Получить());
	Результат = Запрос.Выполнить().Выгрузить();
	НормализацияЗапроса(Результат);
	
	Возврат Результат;
	
КонецФункции

// Процедура нормализует поля таблицы проживающих.
Процедура НормализацияЗапроса(Ресурс)
	
	Ресурс.Колонки.Добавить("Квартира", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(4));
	
	Для Каждого СтрокаТаблицыЛьготников Из Ресурс Цикл
		
		СтрокаТаблицыЛьготников.Улица    = НормализацияПолейАдреса(СтрокаТаблицыЛьготников.Улица);
		СтрокаТаблицыЛьготников.Квартира = Строка(СтрокаТаблицыЛьготников.ТекКвартира);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура производит загрузку таблицы значений в табличную часть в зависимости от значения флажка "Свернуть".
Процедура СвернутьРазвернуть()
	
	Если Не Объект.ПермскийКрай_ОплатаПоУслугам.Количество() = 0 Тогда
		
		СтруктураТаблицОплат = ПолучитьИзВременногоХранилища(АдресТаблицОплатВХранилище);
		
		Если ТипЗнч(СтруктураТаблицОплат) = Тип("Структура") Тогда
			
			врТаблицаОплат = Новый ТаблицаЗначений;
			
			Если Объект.Свернуть Тогда
				СтруктураТаблицОплат.Свойство("ТаблицаОплатСвернутая", врТаблицаОплат);
			Иначе
				СтруктураТаблицОплат.Свойство("ТаблицаОплатРазвернутая", врТаблицаОплат);
			КонецЕсли;
			
			Объект.ПермскийКрай_ОплатаПоУслугам.Загрузить(врТаблицаОплат);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПроверитьВремТаб(МенеджерВремТаб, ИмяВремтаб = "", Порядок = "")
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВремТаб;
	Запрос.Текст =
	"ВЫБРАТЬ
	| *
	|ИЗ
	| ВремТаб КАК ВремТаб
	|
	|УПОРЯДОЧИТЬ ПО Порядок";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"ВремТаб",ИмяВремтаб); 
	Если Порядок = "" тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"УПОРЯДОЧИТЬ ПО Порядок","");
	Иначе 
		Запрос.Текст = СтрЗаменить(Запрос.Текст,"Порядок",Порядок);
	КонецЕсли; 
	
	ТЗ = Запрос.Выполнить().Выгрузить(); 
	
	Возврат ТЗ; 
	
КонецФункции

#КонецЕсли

////////////////////////
// Выгрузить

&НаКлиенте
// Обработчик команды "КомандаВыгрузить".
Процедура КомандаВыгрузить(Команда)
	
	ФлагЗаполненности = Истина;
	Для Каждого Элемент Из Объект.ПермскийКрай_НастройкиТаблицаУслуг Цикл
		
		Если Не ПустаяСтрока(Элемент.Колонка1) Тогда
			ФлагЗаполненности = Ложь;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ФлагЗаполненности Тогда
		ПоказатьПредупреждение(, "Не заданы соответствия услуг!");
	Иначе
		
		#Если Не ВебКлиент Тогда
		
		ФайлДБФ = Новый XBase;
		ФайлДБФ.Кодировка = КодировкаXBase.OEM;
		ФайлДБФ.ОткрытьФайл(Объект.ИмяФайлаВыгрузки + "\PERSON.DBF"); 
		
		Для Каждого Строка Из Объект.ПермскийКрай_Проживающие Цикл
			ФайлДБФ.LS  = Строка.ЛицевойСчет;
			ФайлДБФ.NPP = Строка.КолПроживающих;
			ФайлДБФ.Записать();
			ФайлДБФ.Следующая();
		КонецЦикла;
		
		ФайлДБФ.ЗакрытьФайл();
		
		БД = Новый XBase; 
		БД.Кодировка = КодировкаXBase.OEM;
		БД.Поля.Добавить("ID",     "S", 20); 
		БД.Поля.Добавить("PERSON", "N", 20); 
		БД.Поля.Добавить("BEGDATE","D");
		БД.Поля.Добавить("ENDDATE","D");
		БД.Поля.Добавить("SUM",    "N", 20, 5); 
		БД.Поля.Добавить("USL",    "N", 20); 
		БД.Поля.Добавить("POST",   "N", 20);
		БД.СоздатьФайл(Объект.ИмяФайлаВыгрузки + "\FACTUSL.DBF"); 
		БД.АвтоСохранение = Истина;
		
		Для Каждого Строка Из Объект.ПермскийКрай_ОплатаПоУслугам Цикл
			
			БД.Добавить();
			БД.ID      = Строка.Код;
			БД.PERSON  = Строка.КодПроживающего;
			БД.BEGDATE = Строка.НачалоПериода;
			БД.ENDDATE = Строка.КонецПериода;
			БД.SUM     = Строка.Сумма;
			БД.USL     = Строка.КодУслуги;
			БД.POST    = Строка.КодПоставщика;
			
		КонецЦикла;
		
		БД.ЗакрытьФайл();
		
		ПоказатьПредупреждение(, "Выгрузка в файлы завершена.");
		
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


