
//////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУЕКЦИИ

#Область ПрочиеПроцедурыИФункции

&НаСервере
// Возвращает льготную категорию.
//
Функция ОпределитьЛК(КодЛК)
	
	НайденнаяЛК = Справочники.КВП_ЛьготныеКатегории.НайтиПоНаименованию("Льготная категория " + КодЛК, Истина);
	Если НЕ НайденнаяЛК = Неопределено И НЕ НайденнаяЛК.Пустая() Тогда
		Возврат НайденнаяЛК;
	Иначе
		НоваяЛК = Справочники.КВП_ЛьготныеКатегории.СоздатьЭлемент();
		НоваяЛК.Наименование = "Льготная категория " + КодЛК;
		
		КВП_ЗаписатьОбъект(НоваяЛК);
		
		Возврат НоваяЛК.Ссылка;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Возвращает имя файла с расширением без полного пути к нему.
//
// Параметры:
//  ИмяФайла - Строка - полный путь к файлу в системе.
//
Функция ИмяФайлаБезПолногоПути(Знач ИмяФайла)
	
	Пока Найти(ИмяФайла, "\") <> 0 Цикл
		ИмяФайла = Прав(ИмяФайла, СтрДлина(ИмяФайла) - Найти(ИмяФайла, "\")); 
	КонецЦикла;
	
	Возврат ИмяФайла;
	
КонецФункции // ИмяФайлаБезПолногоПути()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// РАБОТА С НАСТРОЙКАМИ

#Область РаботаСНастройками

&НаСервере
// Процедура восстановления настроек.
Процедура ВосстановитьНастройки()
	
	СтруктураПараметров = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("ТамбовскаяОбласть_ВыгрузкаВОСЗН", "ПараметрыВыгрузки");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		СтруктураПараметров.Свойство("КаталогВыгрузкиНачислений",     КаталогВыгрузкиНачислений);
		СтруктураПараметров.Свойство("КаталогЗагрузкиЛьгот",          КаталогЗагрузкиЛьгот);
		СтруктураПараметров.Свойство("ФайлЗагрузкиЛьготныхКатегорий", ФайлЗагрузкиЛьготныхКатегорий);
		СтруктураПараметров.Свойство("КаталогЗагрузкиНачислений",     КаталогЗагрузкиНачислений);
		СтруктураПараметров.Свойство("ФайлЗагрузкиУслуг",             ФайлЗагрузкиУслуг);
		СтруктураПараметров.Свойство("КодОрганизации",                КодОрганизации);
		СтруктураПараметров.Свойство("ВидОтапливаемойПлощади",        ВидОтапливаемойПлощади);
		СтруктураПараметров.Свойство("ПериодВыгрузки",                Объект.Период);
		СтруктураПараметров.Свойство("КодУслугиОтопления",            КодУслугиОтопления);
		
		врТаблицаУслугВОСЗН        = Новый ТаблицаЗначений;
		врТаблицаУслугВБазе        = Новый ТаблицаЗначений;
		врТаблицаЛьготныхКатегорий = Новый ТаблицаЗначений;
		врТаблицаКодовУслугДляРасчетаНорматива = Новый ТаблицаЗначений;
		
		СтруктураПараметров.Свойство("ТамбовскаяОбласть_ЖКУ", врТаблицаУслугВОСЗН);
		Если НЕ врТаблицаУслугВОСЗН = Неопределено Тогда
			Объект.ТамбовскаяОбласть_ЖКУ.Загрузить(врТаблицаУслугВОСЗН);
		КонецЕсли;
		
		СтруктураПараметров.Свойство("ТамбовскаяОбласть_ЖКУ_ВБазе", врТаблицаУслугВБазе);
		Если НЕ врТаблицаУслугВБазе = Неопределено Тогда
			Объект.ТамбовскаяОбласть_ЖКУ_ВБазе.Загрузить(врТаблицаУслугВБазе);
		КонецЕсли;
		
		СтруктураПараметров.Свойство("ТамбовскаяОбласть_ЛьготныеКатегории", врТаблицаЛьготныхКатегорий);
		Если НЕ врТаблицаЛьготныхКатегорий = Неопределено Тогда
			Объект.ТамбовскаяОбласть_ЛьготныеКатегории.Загрузить(врТаблицаЛьготныхКатегорий);
		КонецЕсли;
		
		СтруктураПараметров.Свойство("ТамбовскаяОбласть_КодыУслугДляРасчетаНорматива", врТаблицаКодовУслугДляРасчетаНорматива);
		Если НЕ врТаблицаКодовУслугДляРасчетаНорматива = Неопределено Тогда
			Объект.ТамбовскаяОбласть_КодыУслугДляРасчетаНорматива.Загрузить(врТаблицаКодовУслугДляРасчетаНорматива);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура сохранения настроек.
Процедура СохранитьНастройки()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КаталогВыгрузкиНачислений",     КаталогВыгрузкиНачислений);
	СтруктураПараметров.Вставить("КаталогЗагрузкиЛьгот",          КаталогЗагрузкиЛьгот);
	СтруктураПараметров.Вставить("ФайлЗагрузкиЛьготныхКатегорий", ФайлЗагрузкиЛьготныхКатегорий);
	СтруктураПараметров.Вставить("КаталогЗагрузкиНачислений",     КаталогЗагрузкиНачислений);
	СтруктураПараметров.Вставить("ФайлЗагрузкиУслуг",             ФайлЗагрузкиУслуг);
	СтруктураПараметров.Вставить("КодОрганизации",                КодОрганизации);
	СтруктураПараметров.Вставить("ВидОтапливаемойПлощади",        ВидОтапливаемойПлощади);
	СтруктураПараметров.Вставить("ПериодВыгрузки",                Объект.Период);
	СтруктураПараметров.Вставить("КодУслугиОтопления",            КодУслугиОтопления);
	
	СтруктураПараметров.Вставить("ТамбовскаяОбласть_ЖКУ",                          Объект.ТамбовскаяОбласть_ЖКУ.Выгрузить());
	СтруктураПараметров.Вставить("ТамбовскаяОбласть_ЖКУ_ВБазе",                    Объект.ТамбовскаяОбласть_ЖКУ_ВБазе.Выгрузить());
	СтруктураПараметров.Вставить("ТамбовскаяОбласть_ЛьготныеКатегории",            Объект.ТамбовскаяОбласть_ЛьготныеКатегории.Выгрузить());
	СтруктураПараметров.Вставить("ТамбовскаяОбласть_КодыУслугДляРасчетаНорматива", Объект.ТамбовскаяОбласть_КодыУслугДляРасчетаНорматива.Выгрузить());
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("ТамбовскаяОбласть_ВыгрузкаВОСЗН", "ПараметрыВыгрузки", СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// РАБОТА С ВРЕМЕННЫМ ХРАНИЛИЩЕМ

#Область РаботаСВременнымХранилищем

&НаСервере
// Помещает настройки во временное хранилище.
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ФайлЗагрузкиУслуг",             ФайлЗагрузкиУслуг);
	СтруктураНастроек.Вставить("ФайлЗагрузкиЛьготныхКатегорий", ФайлЗагрузкиЛьготныхКатегорий);
	СтруктураНастроек.Вставить("КодУслугиОтопления",            КодУслугиОтопления);
	
	СтруктураНастроек.Вставить("ТамбовскаяОбласть_ЖКУ",                          Объект.ТамбовскаяОбласть_ЖКУ.Выгрузить());
	СтруктураНастроек.Вставить("ТамбовскаяОбласть_ЖКУ_ВБазе",                    Объект.ТамбовскаяОбласть_ЖКУ_ВБазе.Выгрузить());
	СтруктураНастроек.Вставить("ТамбовскаяОбласть_ЛьготныеКатегории",            Объект.ТамбовскаяОбласть_ЛьготныеКатегории.Выгрузить());
	СтруктураНастроек.Вставить("ТамбовскаяОбласть_КодыУслугДляРасчетаНорматива", Объект.ТамбовскаяОбласть_КодыУслугДляРасчетаНорматива.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
// Получает настройки из временного хранилища.
Функция ПолучитьНастройкиИзХранилища(АдресНастроекВХранилище)
	
	СтруктураНастроек = ПолучитьИзВременногоХранилища(АдресНастроекВХранилище);
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		
		Если СтруктураНастроек.Свойство("ФайлЗагрузкиУслуг") Тогда
			ФайлЗагрузкиУслуг = СтруктураНастроек.ФайлЗагрузкиУслуг;
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ФайлЗагрузкиЛьготныхКатегорий") Тогда
			ФайлЗагрузкиЛьготныхКатегорий = СтруктураНастроек.ФайлЗагрузкиЛьготныхКатегорий;
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("КодУслугиОтопления") Тогда
			КодУслугиОтопления = СтруктураНастроек.КодУслугиОтопления;
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ТамбовскаяОбласть_ЖКУ") Тогда
			Объект.ТамбовскаяОбласть_ЖКУ.Загрузить(СтруктураНастроек.ТамбовскаяОбласть_ЖКУ);
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ТамбовскаяОбласть_ЖКУ_ВБазе") Тогда
			Объект.ТамбовскаяОбласть_ЖКУ_ВБазе.Загрузить(СтруктураНастроек.ТамбовскаяОбласть_ЖКУ_ВБазе);
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ТамбовскаяОбласть_ЛьготныеКатегории") Тогда
			Объект.ТамбовскаяОбласть_ЛьготныеКатегории.Загрузить(СтруктураНастроек.ТамбовскаяОбласть_ЛьготныеКатегории);
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ТамбовскаяОбласть_КодыУслугДляРасчетаНорматива") Тогда
			Объект.ТамбовскаяОбласть_КодыУслугДляРасчетаНорматива.Загрузить(СтруктураНастроек.ТамбовскаяОбласть_КодыУслугДляРасчетаНорматива);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ДАННЫХ

#Область ЗаполнениеДанных

&НаКлиенте
// Проверяет наличие всех необходимых данных для заполнения таблиц выгрузки.
//
Функция ПроверкаУсловийДляЗаполненияТаблиц()
	
	ТекстОшибки = "";
	
	Если НЕ ЗначениеЗаполнено(Объект.Период) Тогда
		ТекстОшибки = ТекстОшибки + "Не указан период выгрузки!";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не указана организация!", "Не указана организация!");
	КонецЕсли;
	
	Если РасширениеПодключено И ПустаяСтрока(КаталогЗагрузкиНачислений) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не указан каталог файлов загрузки начислений!", "Не указан каталог файлов загрузки начислений!");
	КонецЕсли;
	
	Если ПустаяСтрока(ВидОтапливаемойПлощади) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не указан вид отапливаемой площади!", "Не указан вид отапливаемой площади!");
	КонецЕсли;
	
	Если Объект.ТамбовскаяОбласть_ЖКУ_ВБазе.Количество() = 0 Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не заполнена таблица соответствия услуг!", "Не заполнена таблица соответствия услуг!");
	КонецЕсли;
	
	Если Объект.ТамбовскаяОбласть_ЛьготныеКатегории.Количество() = 0 Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не заполнена таблица соответствия льготных категорий!", "Не заполнена таблица соответствия льготных категорий!");
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции // ПроверкаУсловийДляЗаполненияТаблиц

&НаКлиенте
// Проверяет наличие всех необходимых данных для заполнения таблицы загрузки льгот.
//
Функция ПроверкаУсловийДляЗаполненияТаблицыЛьгот()
	
	ТекстОшибки = "";
	
	Если НЕ ЗначениеЗаполнено(Объект.Период) Тогда
		ТекстОшибки = ТекстОшибки + "Не указан период выгрузки!";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не указана организация!", "Не указана организация!");
	КонецЕсли;
	
	Если РасширениеПодключено И ПустаяСтрока(КаталогЗагрузкиЛьгот) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не указан каталог файлов загрузки начислений!", "Не указан каталог файлов загрузки начислений!");
	КонецЕсли;
	
	Если ПустаяСтрока(КаталогЗагрузкиЛьгот) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не указан каталог файлов загрузки льгот!", "Не указан каталог файлов загрузки льгот!");
	КонецЕсли;
	
	Если Объект.ТамбовскаяОбласть_ЖКУ_ВБазе.Количество() = 0 Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не заполнена таблица соответствия услуг!", "Не заполнена таблица соответствия услуг!");
	КонецЕсли;
	
	Если Объект.ТамбовскаяОбласть_ЛьготныеКатегории.Количество() = 0 Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не заполнена таблица соответствия льготных категорий!", "Не заполнена таблица соответствия льготных категорий!");
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции // ПроверкаУсловийДляЗаполненияТаблиц

&НаКлиенте
// Проверяет наличие всех необходимых данных для выгрузки таблиц выгрузки.
//
Функция ПроверкаУсловийДляВыгрузкиТаблиц()
	
	ТекстОшибки = "";
	
	Если НЕ ЗначениеЗаполнено(КодОрганизации) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не указана код организации!", "Не указана код организации!");
	КонецЕсли;
	
	Если РасширениеПодключено И ПустаяСтрока(КаталогВыгрузкиНачислений) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не указан каталог выгрузки начислений!", "Не указан каталог выгрузки начислений!");
	КонецЕсли;
	
	Если Объект.ТамбовскаяОбласть_ТаблицаНачислений.Количество() = 0 Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не заполнена таблица начислений!", "Не заполнена таблица начислений!");
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции // ПроверкаУсловийДляВыгрузкиТаблиц

&НаСервере
// Процедура заполнения всех данных.
Процедура ЗаполнитьНаСервере(СоответствиеАдресов)
	
	Объект.ТамбовскаяОбласть_ТаблицаНачислений.Очистить();
	
	СписокКодовУслугВыгрузки = Новый СписокЗначений;
	
	// Запись временных данных во временный файл.
	СписокФайлов = Новый Массив;
	Сч = 1;
	Для Каждого СтрокаАдреса ИЗ СоответствиеАдресов Цикл
		врДанныеФайла = ПолучитьИзВременногоХранилища(СтрокаАдреса.Значение);
		ВременныйФайл = ПолучитьИмяВременногоФайла("DBF");
		
		// Для чтения *.dbf формата урежем имя временного файла.
		ФайлДБФ = Новый Файл(ВременныйФайл);
		СтароеИмяФайла = ФайлДБФ.ИмяБезРасширения + ".DBF";
		НовоеИмяФайла  = Лев(СтрокаАдреса.Ключ, 4) + Строка(Сч) + ".DBF";
		Сч = Сч + 1;
		ВременныйФайл  = СтрЗаменить(ФайлДБФ.ПолноеИмя, СтароеИмяФайла, НовоеИмяФайла);
	
		врДанныеФайла.Записать(ВременныйФайл);
		
		СписокФайлов.Добавить(ВременныйФайл);
		
		НачалоСтрокиКодаУслуги = СтрНайти(СтрокаАдреса.Ключ, "VIDU");
		КодУслуги = Сред(СтрокаАдреса.Ключ, НачалоСтрокиКодаУслуги + 5, 8);
		СписокКодовУслугВыгрузки.Добавить(КодУслуги);
	КонецЦикла;
	
	ТаблицаДанныхФайла = Объект.ТамбовскаяОбласть_ТаблицаНачислений.Выгрузить();
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("ВидОтапливаемойПлощади",   ВидОтапливаемойПлощади);
	ПараметрыВыгрузки.Вставить("СписокФайлов",             СписокФайлов);
	ПараметрыВыгрузки.Вставить("КодУслугиОтопления",       КодУслугиОтопления);
	ПараметрыВыгрузки.Вставить("СписокКодовУслугВыгрузки", СписокКодовУслугВыгрузки);
	
	ОбработкаОбъект = ДанныеФормыВЗначение(Объект, Тип("ОбработкаОбъект.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты"));
	ОбработкаОбъект.СформироватьТаблицуДанныхТамбовскаяОбласть(ТаблицаДанныхФайла, ПараметрыВыгрузки);
	ЗначениеВДанныеФормы(ОбработкаОбъект, Объект);
	
	Объект.ТамбовскаяОбласть_ТаблицаНачислений.Загрузить(ТаблицаДанныхФайла);
	
КонецПроцедуры

&НаСервере
// Процедура заполнения всех данных.
Процедура ЗаполнитьЛьготыНаСервере(СоответствиеАдресов)
	
	птТамбовскаяОбласть_ТаблицаДляЗагрузки.Очистить();
	
	// Запись временных данных во временный файл.
	СписокФайлов = Новый Соответствие;
	Для Каждого СтрокаАдреса ИЗ СоответствиеАдресов Цикл
		
		врДанныеФайла = ПолучитьИзВременногоХранилища(СтрокаАдреса.Значение);
		ВременныйФайл = ПолучитьИмяВременногоФайла("DBF");
		
		// Для чтения *.dbf формата урежем имя временного файла.
		ФайлДБФ = Новый Файл(ВременныйФайл);
		СтароеИмяФайла = ФайлДБФ.ИмяБезРасширения + ".DBF";
		НовоеИмяФайла  = Лев(СтрокаАдреса.Ключ, 8) + ".DBF";
		ВременныйФайл  = СтрЗаменить(ФайлДБФ.ПолноеИмя, СтароеИмяФайла, НовоеИмяФайла);
	
		врДанныеФайла.Записать(ВременныйФайл);
		
		СписокФайлов.Вставить(СтрокаАдреса.Ключ, ВременныйФайл);
	КонецЦикла;
	
	ТаблицаДанныхЛьгот = птТамбовскаяОбласть_ТаблицаДляЗагрузки.Выгрузить();
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("СписокФайлов", СписокФайлов);
	
	ОбработкаОбъект = ДанныеФормыВЗначение(Объект, Тип("ОбработкаОбъект.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты"));
	ОбработкаОбъект.СформироватьТаблицуЛьготТамбовскаяОбласть(ТаблицаДанныхЛьгот, ПараметрыВыгрузки);
	ЗначениеВДанныеФормы(ОбработкаОбъект, Объект);
	
	птТамбовскаяОбласть_ТаблицаДляЗагрузки.Загрузить(ТаблицаДанныхЛьгот);
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ВЫГРУЗКА ФАЙЛОВ

#Область ВыгрузкаФайлов

&НаСервере
// Выполняет подготовку и выгрузку файла.
//
// Параметры:
//  МассивВыгружаемыхФайлов - Массив - массив описаний передаваемых файлов.
//  ИмяФайла                - Строка - Краткое имя выгружаемого файла.
//  ИмяКаталога             - Строка - Имя каталога, в который будет выполняться выгрузка.
//
Процедура ВыгрузитьДанныеВФайлТамбовскаяОбластьНаСервере(МассивВыгружаемыхФайлов, ИмяФайла, ИмяКаталога)
	
	// Подготовка выгружаемого файла происходит на сервере в виде временного файла.
	// Сформированный временный файл передается на клиент и выгружается в выбранный пользователем каталог.
	
	// Формирование имени каталога для сохранения выгружаемого файла на клиенте.
	КаталогНаКлиенте = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяКаталога);
	
	ПолноеИмяФайлаНаКлиенте = "";
	
	СоответствиеИменФайловИАдресов = Новый Соответствие;
	
	ТаблицаВыгрузкиУслуг = Объект.ТамбовскаяОбласть_ТаблицаНачислений.Выгрузить(, "КодУслугиВОСЗН");
	ТаблицаВыгрузкиУслуг.Свернуть("КодУслугиВОСЗН");
	
	ТаблицаЗначенийВыгрузки = Объект.ТамбовскаяОбласть_ТаблицаНачислений.Выгрузить();
	
	ТаблицаЛьготныхКатегорий = Объект.ТамбовскаяОбласть_ЛьготныеКатегории.Выгрузить();
	КопияТаблицаЛьготныхКатегорий = ТаблицаЛьготныхКатегорий.Скопировать();
	КопияТаблицаЛьготныхКатегорий.Свернуть("КодЗакона, КодРеестра");
	
	Для Каждого СтрокаЛК ИЗ ТаблицаЛьготныхКатегорий Цикл
		
		ПараметрыПоискаЛК = Новый Структура;
		ПараметрыПоискаЛК.Вставить("КодЗакона",  СтрокаЛК.КодЗакона);
		ПараметрыПоискаЛК.Вставить("КодРеестра", СтрокаЛК.КодРеестра);
		
		НайденныеЛК = ТаблицаЛьготныхКатегорий.НайтиСтроки(ПараметрыПоискаЛК);
		
		
		Если НайденныеЛК.Количество() > 0 Тогда
			
			Для Каждого СтрокаВыгрузкиУслуги ИЗ ТаблицаВыгрузкиУслуг Цикл
				
				// Формирование полного имени выгружаемого файла на клиенте.
				ИмяФайлаНаКлиенте = "UTSR-211-Y-" + Формат(Объект.Период, "ДФ=yyyy") + "-M-" + Формат(Объект.Период, "ДФ=MM") +
				"-ORG-" + СокрЛП(КодОрганизации) + "-VIDU-" + СтрокаВыгрузкиУслуги.КодУслугиВОСЗН +
				"-TIPZ-" + СтрокаЛК.КодЗакона + "-R-" + СтрокаЛК.КодРеестра + ".DBF";
				
				ПолноеИмяФайлаНаКлиенте = КаталогНаКлиенте + ИмяФайлаНаКлиенте;
				
				// Формирование полного имени временного файла формируемого на сервере.
				ПолноеИмяФайлаНаСервере = ПолучитьИмяВременногоФайла("DBF");
				ВременныйФайл = Новый Файл(ПолноеИмяФайлаНаСервере);
				СтароеИмяФайла = ВременныйФайл.ИмяБезРасширения;
				НовоеИмяФайла = Прав(ВременныйФайл.ИмяБезРасширения, 8);
				ПолноеИмяФайлаНаСервере = СтрЗаменить(ВременныйФайл.ПолноеИмя, СтароеИмяФайла, НовоеИмяФайла);
				
				ФайлВыгрузки           = Новый XBase;
				ФайлВыгрузки.Кодировка = КодировкаXBase.OEM;
				ФайлВыгрузки.Поля.Добавить("NPD", "S", 6);
				ФайлВыгрузки.Поля.Добавить("FAM", "S", 20);
				ФайлВыгрузки.Поля.Добавить("IM",  "S", 15);
				ФайлВыгрузки.Поля.Добавить("OT",  "S", 20);
				ФайлВыгрузки.Поля.Добавить("PIN", "S", 6);
				ФайлВыгрузки.Поля.Добавить("RG",  "S", 20);
				ФайлВыгрузки.Поля.Добавить("NSP", "S", 30);
				ФайлВыгрузки.Поля.Добавить("ULC", "S", 30);
				ФайлВыгрузки.Поля.Добавить("DOM", "S", 7);
				ФайлВыгрузки.Поля.Добавить("KOR", "S", 5);
				
				ФайлВыгрузки.Поля.Добавить("KVR",     "S", 5);
				ФайлВыгрузки.Поля.Добавить("SERIES",  "S", 8);
				ФайлВыгрузки.Поля.Добавить("NDOC",    "S", 8);
				ФайлВыгрузки.Поля.Добавить("ACCOUNT", "S", 15);
				ФайлВыгрузки.Поля.Добавить("OKS",     "S", 55);
				ФайлВыгрузки.Поля.Добавить("KOLIG",   "N", 2);
				ФайлВыгрузки.Поля.Добавить("KOLLGTP", "N", 5, 2);
				ФайлВыгрузки.Поля.Добавить("KOLZR",   "N", 2);
				ФайлВыгрузки.Поля.Добавить("KOLPR",   "N", 2);
				ФайлВыгрузки.Поля.Добавить("TARIF",   "N", 15, 2);
				
				ФайлВыгрузки.Поля.Добавить("NORM",   "N", 8, 4);
				ФайлВыгрузки.Поля.Добавить("VOLUME", "N", 11, 4);
				ФайлВыгрузки.Поля.Добавить("KODK",   "S", 2);
				ФайлВыгрузки.Поля.Добавить("G_PL",   "N", 6, 2);
				ФайлВыгрузки.Поля.Добавить("O_PL",   "N", 6, 2);
				ФайлВыгрузки.Поля.Добавить("H_PL",   "N", 6, 2);
				ФайлВыгрузки.Поля.Добавить("ROOMS",  "N", 1);
				ФайлВыгрузки.Поля.Добавить("EL_PL",  "N", 1);
				ФайлВыгрузки.Поля.Добавить("EL_VN",  "N", 1);
				ФайлВыгрузки.Поля.Добавить("DOLG",   "N", 12, 2);
				ФайлВыгрузки.Поля.Добавить("UNIT",   "S", 15);
				ФайлВыгрузки.Поля.Добавить("CHTYPE", "S", 1);
				ФайлВыгрузки.Поля.Добавить("METERS", "N", 1);
				
				ФайлВыгрузки.Поля.Добавить("PERCENT",  "N", 3);
				ФайлВыгрузки.Поля.Добавить("SUMN",     "N", 12, 2);
				ФайлВыгрузки.Поля.Добавить("SUM",      "N", 9, 2);
				ФайлВыгрузки.Поля.Добавить("KMS",      "N", 2);
				ФайлВыгрузки.Поля.Добавить("GOD",      "S", 4);
				ФайлВыгрузки.Поля.Добавить("PER",      "S", 1);
				ФайлВыгрузки.Поля.Добавить("OPLPOMES", "N", 2);
				ФайлВыгрузки.Поля.Добавить("OPLPOGOD", "S", 4);
				ФайлВыгрузки.Поля.Добавить("DAYS",     "N", 2);
				
				ФайлВыгрузки.СоздатьФайл(ПолноеИмяФайлаНаСервере);
				
				ФайлВыгрузки.АвтоСохранение = Истина;
				
				Для Каждого СтрокаВыгрузкиЛК ИЗ НайденныеЛК Цикл
					
					ПараметрыПоиска = Новый Структура;
					ПараметрыПоиска.Вставить("KODK",           СтрокаВыгрузкиЛК.КодКатегории);
					ПараметрыПоиска.Вставить("КодУслугиВОСЗН", СтрокаВыгрузкиУслуги.КодУслугиВОСЗН);
					
					НайденныеСтрокиВыгрузки = ТаблицаЗначенийВыгрузки.НайтиСтроки(ПараметрыПоиска);
					
					Если НайденныеСтрокиВыгрузки.Количество() > 0 Тогда
						
						Для каждого ТекСтрока Из НайденныеСтрокиВыгрузки Цикл
							ФайлВыгрузки.Добавить();
							ЗаполнитьЗначенияСвойств(ФайлВыгрузки, ТекСтрока, , "KVR");
							ФайлВыгрузки.KVR = Строка(ТекСтрока.KVR);
						КонецЦикла;
						
					КонецЕсли;
					
				КонецЦикла;
				
				ФайлВыгрузки.Записать();
				
				Если ФайлВыгрузки.КоличествоЗаписей() > 0 Тогда
					
					ФайлВыгрузки.ЗакрытьФайл();
					
					СоответствиеИменФайловИАдресов.Вставить(ПолноеИмяФайлаНаКлиенте, ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПолноеИмяФайлаНаСервере), Новый УникальныйИдентификатор));
					
				КонецЕсли;
				
				Если ФайлВыгрузки.Открыта() Тогда
					ФайлВыгрузки.ЗакрытьФайл();
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	МассивВыгружаемыхФайлов = УПЖКХ_РаботаСФайламиСервер.ПолучитьМассивПередаваемыхФайлов(СоответствиеИменФайловИАдресов);
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	ТекРабДата = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	Объект.Период = ТекРабДата;
	
	ВосстановитьНастройки();
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиенте();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки();
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "КомандаНастройка".
Процедура КомандаНастройка(Команда)
	
	АдресНастроекВХранилище = ПоместитьНастройкиВХранилище();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаНастройкаЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты.Форма.ТамбовскаяОбласть_ФормаНастройки", Новый Структура("АдресНастроекВХранилище", АдресНастроекВХранилище), , , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата опроса команды "КомандаНастройка".
Процедура КомандаНастройкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		ПолучитьНастройкиИзХранилища(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаЗаполнить".
Процедура КомандаЗаполнить(Команда)
	
	ТекстОшибки = ПроверкаУсловийДляЗаполненияТаблиц();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатПомещенияФайлаЗагрузкиНачисленийВХранилище", ЭтаФорма);
	
	Если РасширениеПодключено Тогда
		
		// Проверяем каталог выгрузки на существование.
		
		КаталогЗагрузки = Новый Файл(КаталогЗагрузкиНачислений);
		
		ДополнительныеПараметры = Новый Структура("КаталогЗагрузки", КаталогЗагрузки);
		
		КаталогЗагрузки.НачатьПроверкуСуществования(Новый ОписаниеОповещения("КаталогЗагрузкиНачисленийСуществуетЗавершение", ЭтотОбъект, ДополнительныеПараметры));
		
		Возврат;
		
	Иначе
		СоответствиеИмениИАдреса = Новый Соответствие();
		СоответствиеИмениИАдреса.Вставить("",);
		МассивЗагружаемыхФайлов = УПЖКХ_РаботаСФайламиСервер.ПолучитьМассивПередаваемыхФайлов(СоответствиеИмениИАдреса);
	КонецЕсли;
	
	УПЖКХ_РаботаСФайламиКлиент.ЗагрузитьФайл(РасширениеПодключено, ОписаниеОповещения, МассивЗагружаемыхФайлов);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения поиска файлов.
Процедура КомандаЗаполнитьНайтиФайл(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	ФайлыИзКаталога  = НайденныеФайлы;
	Если ФайлыИзКаталога.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено,"Каталог пуст и не содержит файлов формата "".DBF""!");
		Возврат;
	КонецЕсли;
	
	ПомещаемыеФайлы = Новый Массив;
	Для Каждого ФайлЗагрузки Из ФайлыИзКаталога Цикл
		ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ФайлЗагрузки.ПолноеИмя));
	КонецЦикла;
	
	Описание = Новый ОписаниеОповещения("ОбработатьРезультатПомещенияФайлаЗагрузкиНачисленийВХранилище", ЭтаФорма);
	НачатьПомещениеФайлов(Описание, ПомещаемыеФайлы,, Ложь, Новый УникальныйИдентификатор);
	
КонецПроцедуры // КомандаЗаполнить()

&НаКлиенте
// Обработчик результата помещения файла в хранилище.
Процедура ОбработатьРезультатПомещенияФайлаЗагрузкиНачисленийВХранилище(ПомещенныеФайлы, ДопПараметры) Экспорт
	
	// Приходит значение Неопределено, если пользователь отменил выбор файла в веб клиенте,
	// при этом плагин "Расширение для работы с 1С:Предприятием" не подключен.
	Если ПомещенныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПомещенныеФайлы.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, "Произошла ошибка при получении файлов формата "".DBF""!");
		Возврат;
	КонецЕсли;
	
	СоответствиеАдресов = Новый Соответствие;
	Для Каждого ТекОписаниеФайла Из ПомещенныеФайлы Цикл
		текФайл = Новый Файл(ТекОписаниеФайла.Имя);
		СоответствиеАдресов.Вставить(текФайл.ИмяБезРасширения, ТекОписаниеФайла.Хранение);
	КонецЦикла;
	
	Если Объект.ТамбовскаяОбласть_ТаблицаНачислений.Количество() > 0 Тогда
		Оповещение   = Новый ОписаниеОповещения("КомандаЗаполнитьЗавершение", ЭтотОбъект, Новый Структура("СоответствиеАдресов", СоответствиеАдресов));
		ТекстВопроса = "Перед заполением таблица начислений будет очищена. Заполнить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьНаСервере(СоответствиеАдресов);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатПомещенияФайлаВХранилище()

&НаКлиенте
// Обработчик результата опроса команды "КомандаЗаполнитьВсе".
Процедура КомандаЗаполнитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьНаСервере(ДополнительныеПараметры.СоответствиеАдресов);
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьВсеЗавершение()

&НаКлиенте
// Обработчик команды "КомандаВыгрузить".
Процедура КомандаВыгрузить(Команда)
	
	ТекстОшибки = ПроверкаУсловийДляВыгрузкиТаблиц();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ИмяФайла    = "";
	ИмяКаталога = КаталогВыгрузкиНачислений;
	
	ОбработчикЗавершения = Новый ОписаниеОповещения("ОбработатьПослеВыгрузки", УПЖКХ_РаботаСФайламиКлиент, Новый Структура);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИмяФайла",             ИмяФайла);
	ДополнительныеПараметры.Вставить("ИмяКаталога",          ИмяКаталога);
	ДополнительныеПараметры.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);
	
	Если РасширениеПодключено Тогда
		
		// Проверяем каталог выгрузки на существование.
		
		КаталогВыгрузки = Новый Файл(ИмяКаталога);
		
		ДополнительныеПараметры.Вставить("КаталогВыгрузки", КаталогВыгрузки);
		
		КаталогВыгрузки.НачатьПроверкуСуществования(Новый ОписаниеОповещения("КаталогВыгрузкиСуществуетЗавершение", ЭтотОбъект, ДополнительныеПараметры));
		
		Возврат;
		
	Иначе
		
		ИмяКаталога = "";
		
		МассивВыгружаемыхФайлов = Новый Массив;
		
		ВыгрузитьДанныеВФайлТамбовскаяОбластьНаСервере(МассивВыгружаемыхФайлов, ИмяФайла, ИмяКаталога);
		
		УПЖКХ_РаботаСФайламиКлиент.ВыгрузитьВФайл(РасширениеПодключено, МассивВыгружаемыхФайлов, ОбработчикЗавершения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаЗаполнитьЗагрузкуЛьгот".
Процедура КомандаЗаполнитьЗагрузкуЛьгот(Команда)
	
	ТекстОшибки = ПроверкаУсловийДляЗаполненияТаблицыЛьгот();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатПомещенияФайлаЗагрузкиЛьготВХранилище", ЭтаФорма);
	
	Если РасширениеПодключено Тогда
		
		// Проверяем каталог выгрузки на существование.
		
		КаталогЗагрузки = Новый Файл(КаталогЗагрузкиЛьгот);
		
		ДополнительныеПараметры = Новый Структура("КаталогЗагрузки", КаталогЗагрузки);
		
		КаталогЗагрузки.НачатьПроверкуСуществования(Новый ОписаниеОповещения("КомандаЗаполнитьЗагрузкуЛьготКаталогСуществует", ЭтотОбъект, ДополнительныеПараметры));
		
		Возврат;
		
	Иначе
		СоответствиеИмениИАдреса = Новый Соответствие();
		СоответствиеИмениИАдреса.Вставить("",);
		МассивЗагружаемыхФайлов = УПЖКХ_РаботаСФайламиСервер.ПолучитьМассивПередаваемыхФайлов(СоответствиеИмениИАдреса);
	КонецЕсли;
	
	УПЖКХ_РаботаСФайламиКлиент.ЗагрузитьФайл(РасширениеПодключено, ОписаниеОповещения, МассивЗагружаемыхФайлов);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения проверки существования каталога.
Процедура КомандаЗаполнитьЗагрузкуЛьготКаталогСуществует(Существует, ДополнительныеПараметры) Экспорт
	
	КаталогЗагрузки = ДополнительныеПараметры.КаталогЗагрузки;
	
	Если Не Существует Тогда
		ПоказатьПредупреждение(Неопределено, "Каталога загрузки файлов льгот не существует!");
		Возврат;
	КонецЕсли;
	
	КаталогЗагрузки.НачатьПроверкуЭтоКаталог(Новый ОписаниеОповещения("КомандаЗаполнитьЗагрузкуЛьготЭтоКаталог", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения проверки является ли каталогом.
Процедура КомандаЗаполнитьЗагрузкуЛьготЭтоКаталог(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Если Не ЭтоКаталог Тогда
		ПоказатьПредупреждение(Неопределено, "Каталог загрузки файлов льгот указан не верно!");
		Возврат;
	КонецЕсли;
	
	НачатьПоискФайлов(Новый ОписаниеОповещения("КомандаЗаполнитьЗагрузкуЛьготНайтиФайл", ЭтотОбъект),
											   КаталогЗагрузкиЛьгот, "*.DBF", Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения поиска файлов.
Процедура КомандаЗаполнитьЗагрузкуЛьготНайтиФайл(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	ФайлыИзКаталога = НайденныеФайлы;
	Если ФайлыИзКаталога.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено,"Каталог пуст и не содержит файлов формата "".DBF""!");
		Возврат;
	КонецЕсли;
	
	ПомещаемыеФайлы = Новый Массив;
	Для Каждого ФайлЗагрузки Из ФайлыИзКаталога Цикл
		Если НЕ СтрНайти(ИмяФайлаБезПолногоПути(ФайлЗагрузки.ПолноеИмя), "VIDU") = 0 Тогда
			ПомещаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(ФайлЗагрузки.ПолноеИмя));
		КонецЕсли;
	КонецЦикла;
	
	Описание = Новый ОписаниеОповещения("ОбработатьРезультатПомещенияФайлаЗагрузкиЛьготВХранилище", ЭтаФорма);
	НачатьПомещениеФайлов(Описание, ПомещаемыеФайлы,, Ложь, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата помещения файла в хранилище.
Процедура ОбработатьРезультатПомещенияФайлаЗагрузкиЛьготВХранилище(ПомещенныеФайлы, ДопПараметры) Экспорт
	
	// Приходит значение Неопределено, если пользователь отменил выбор файла в веб клиенте,
	// при этом плагин "Расширение для работы с 1С:Предприятием" не подключен.
	Если ПомещенныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПомещенныеФайлы.Количество() = 0 Тогда
		ПоказатьПредупреждение(Неопределено, "Произошла ошибка при получении файлов формата "".DBF""!");
		Возврат;
	КонецЕсли;
	
	СоответствиеАдресов = Новый Соответствие;
	Для Каждого ТекОписаниеФайла Из ПомещенныеФайлы Цикл
		текФайл = Новый Файл(ТекОписаниеФайла.Имя);
		СоответствиеАдресов.Вставить(текФайл.ИмяБезРасширения, ТекОписаниеФайла.Хранение);
	КонецЦикла;
	
	Если птТамбовскаяОбласть_ТаблицаДляЗагрузки.Количество() > 0 Тогда
		Оповещение   = Новый ОписаниеОповещения("КомандаЗаполнитьЛьготыЗавершение", ЭтотОбъект, Новый Структура("СоответствиеАдресов", СоответствиеАдресов));
		ТекстВопроса = "Перед заполением таблица загрузки льгот будет очищена. Заполнить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьЛьготыНаСервере(СоответствиеАдресов);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатПомещенияФайлаВХранилище()

&НаКлиенте
// Обработчик результата опроса команды "КомандаЗаполнитьВсе".
Процедура КомандаЗаполнитьЛьготыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьЛьготыНаСервере(ДополнительныеПараметры.СоответствиеАдресов);
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьВсеЗавершение()

&НаКлиенте
// Обработчик результата опроса команды "КомандаЗаписатьВДокумент".
Процедура КомандаЗаписатьВДокумент(Команда)
	
	ТекстОшибки = "";
	
	Если птТамбовскаяОбласть_ТаблицаДляЗагрузки.Количество() = 0 Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не заполнена таблица загрузки льгот!", "Не заполнена таблица загрузки льгот!");
	КонецЕсли;
	
	Для Каждого СтрокаЗагрузки ИЗ птТамбовскаяОбласть_ТаблицаДляЗагрузки Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаЗагрузки.Льготник) Тогда
			ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не заполнен льготник для лицевого счета " + СтрокаЗагрузки.ЛицевойСчет + "!", "Не заполнен льготник для лицевого счета " + СтрокаЗагрузки.ЛицевойСчет + "!");
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если Не ДокументНачислениеУслугВСторонейПрограмме.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Документ ""Начисление услуг в сторонней программе"" уже заполнен. Перед записью нового документа необходимо очистить поле ""Начисление услуг""!");
		Возврат;
	КонецЕсли;
	
	ЗаписьУдалась = КомандаЗаписатьВДокументНаСервере();
	
	// Показываем сформированный документ пользователю.
	Если ЗаписьУдалась Тогда
		ПоказатьЗначение(, ДокументНачислениеУслугВСторонейПрограмме);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Обработчик команды "КомандаЗаполнитьТаблицуВыгрузки" на сервере.
Функция КомандаЗаписатьВДокументНаСервере()
	
	Документ = Документы.УПЖКХ_НачислениеУслугВСтороннейПрограмме.СоздатьДокумент();
	
	// Заполнение реквизитов документа.
	Документ.Дата          = КонецМесяца(Объект.Период);
	Документ.Организация   = Объект.Организация;
	Документ.Ответственный = ПараметрыСеанса.ТекущийПользователь;
	Документ.Комментарий   = "# Данные загружены из Выгрузки в ОСЗН Тамбовской области #";
	Документ.Начисления.Очистить();
	
	ТаблицаУслугВОСЗН = птТамбовскаяОбласть_ТаблицаДляЗагрузки.Выгрузить(, "КодУслугиВОСЗН");
	ТаблицаУслугВОСЗН.Свернуть("КодУслугиВОСЗН");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИзФайла.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаИзФайла.КодУслугиВОСЗН КАК КодУслугиВОСЗН
	|ПОМЕСТИТЬ втТаблицаДанныхИзФайла
	|ИЗ
	|	&ТаблицаИзФайла КАК ТаблицаИзФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУслуг.КодУслугиВОСЗН,
	|	ТаблицаУслуг.УслугаВБазе
	|ПОМЕСТИТЬ втТаблицаУслуг
	|ИЗ
	|	&ТаблицаУслуг КАК ТаблицаУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаДанныхИзФайла.ЛицевойСчет,
	|	втТаблицаДанныхИзФайла.КодУслугиВОСЗН,
	|	втТаблицаУслуг.УслугаВБазе
	|ПОМЕСТИТЬ втЛСсУслугами
	|ИЗ
	|	втТаблицаДанныхИзФайла КАК втТаблицаДанныхИзФайла
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаУслуг КАК втТаблицаУслуг
	|		ПО втТаблицаДанныхИзФайла.КодУслугиВОСЗН = втТаблицаУслуг.КодУслугиВОСЗН
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаУслуг.УслугаВБазе,
	|	втТаблицаДанныхИзФайла.ЛицевойСчет,
	|	втТаблицаДанныхИзФайла.КодУслугиВОСЗН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НазначенныеНачисленияСрезПоследних.Объект КАК ЛицевойСчет,
	|	КВП_НазначенныеНачисленияСрезПоследних.Услуга
	|ПОМЕСТИТЬ втНазначенныеУслуги
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления.СрезПоследних(
	|			&ДатаКонца,
	|			Объект В
	|					(ВЫБРАТЬ
	|						втЛСсУслугами.ЛицевойСчет
	|					ИЗ
	|						втЛСсУслугами КАК втЛСсУслугами)
	|				И Организация = &Организация
	|				И ДатаИзменения <= &ДатаКонца) КАК КВП_НазначенныеНачисленияСрезПоследних
	|ГДЕ
	|	КВП_НазначенныеНачисленияСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛСсУслугами.ЛицевойСчет,
	|	втЛСсУслугами.КодУслугиВОСЗН,
	|	втЛСсУслугами.УслугаВБазе
	|ИЗ
	|	втЛСсУслугами КАК втЛСсУслугами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНазначенныеУслуги КАК втНазначенныеУслуги
	|		ПО втЛСсУслугами.ЛицевойСчет = втНазначенныеУслуги.ЛицевойСчет
	|			И втЛСсУслугами.УслугаВБазе = втНазначенныеУслуги.Услуга";
	
	Запрос.УстановитьПараметр("ДатаКонца",      КонецМесяца(Объект.Период));
	Запрос.УстановитьПараметр("Организация",    Объект.Организация);
	Запрос.УстановитьПараметр("ТаблицаИзФайла", птТамбовскаяОбласть_ТаблицаДляЗагрузки.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаУслуг",   Объект.ТамбовскаяОбласть_ЖКУ_ВБазе.Выгрузить());
	
	ТаблицаНазначенныхУслуг = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаУслугиВОСЗН ИЗ ТаблицаУслугВОСЗН Цикл
		
		НайденныеСтрокиУслуг = птТамбовскаяОбласть_ТаблицаДляЗагрузки.НайтиСтроки(Новый Структура("КодУслугиВОСЗН", СтрокаУслугиВОСЗН.КодУслугиВОСЗН));
		
		НайденныеУслугиВБазе = Объект.ТамбовскаяОбласть_ЖКУ_ВБазе.НайтиСтроки(Новый Структура("КодУслугиВОСЗН", СтрокаУслугиВОСЗН.КодУслугиВОСЗН));
		
		КоличествоУслугИзБазы = НайденныеУслугиВБазе.Количество();
		
		Если КоличествоУслугИзБазы = 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для услуги из ОСЗН с кодом """ + СтрокаУслугиВОСЗН.КодУслугиВОСЗН + """, по которой загружаются льготы, не установлено соответствие услуги из базы!");
			Продолжить;
		КонецЕсли;
		
		// Заполнение табличной части документа.
		Для Каждого Строка Из НайденныеСтрокиУслуг Цикл
			
			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("КодУслугиВОСЗН", СтрокаУслугиВОСЗН.КодУслугиВОСЗН);
			СтруктураПоиска.Вставить("ЛицевойСчет",    Строка.ЛицевойСчет);
			НайденныеУслугиВБазеПоТекЛС = ТаблицаНазначенныхУслуг.НайтиСтроки(СтруктураПоиска);
			
			КоличествоУслугИзБазыПоТекЛС = НайденныеУслугиВБазеПоТекЛС.Количество();
			
			Для Каждого СтрокаУслуги ИЗ НайденныеУслугиВБазеПоТекЛС Цикл
				НоваяСтрока = Документ.Начисления.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
				
				НоваяСтрока.Услуга            = СтрокаУслуги.УслугаВБазе;
				НоваяСтрока.РазделУчета       = Перечисления.УПЖКХ_РазделыУчета.Льготы;
				НоваяСтрока.ВидНачисления     = Перечисления.УПЖКХ_ВидыНачислений.Начисление;
				НоваяСтрока.ВидТарифа         = Перечисления.КВП_ВидыТарифов.Общий;
				НоваяСтрока.Сумма             = Строка.SUM / КоличествоУслугИзБазыПоТекЛС;
				НоваяСтрока.ЛьготнаяКатегория = ОпределитьЛК(Строка.KODK);
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// Запись документа.
	ЗаписьУдалась = КВП_ЗаписатьОбъект(Документ);
	ДокументНачислениеУслугВСторонейПрограмме = Документ.Ссылка;
	
	Возврат ЗаписьУдалась;
	
КонецФункции // КомандаЗаписатьВДокументНаСервере()

&НаКлиенте
// Процедура - обработчик завершения работы процедуры "НачатьПроверкуСуществования".
//
Процедура КаталогЗагрузкиНачисленийСуществуетЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	КаталогЗагрузки = ДополнительныеПараметры.КаталогЗагрузки;
	
	Если Не Существует Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран каталог файла выгрузки!");
		Возврат;
	КонецЕсли;
	
	КаталогЗагрузки.НачатьПроверкуЭтоКаталог(Новый ОписаниеОповещения("КаталогЗагрузкиНачисленийЭтоКаталогЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик результата работы процедуры "НачатьПроверкуЭтоКаталог".
//
Процедура КаталогЗагрузкиНачисленийЭтоКаталогЗавершение(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Если Не ЭтоКаталог Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран каталог файла выгрузки!");
		Возврат;
	КонецЕсли;
	
	НачатьПоискФайлов(Новый ОписаниеОповещения("КомандаЗаполнитьНайтиФайл", ЭтотОбъект),
											   КаталогЗагрузкиНачислений, "*.DBF", Истина);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик завершения работы процедуры "НачатьПроверкуСуществования".
//
Процедура КаталогВыгрузкиСуществуетЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	КаталогВыгрузки = ДополнительныеПараметры.КаталогВыгрузки;
	
	Если Не Существует Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран каталог файла выгрузки!");
		Возврат;
	КонецЕсли;
	
	КаталогВыгрузки.НачатьПроверкуЭтоКаталог(Новый ОписаниеОповещения("КаталогВыгрузкиЭтоКаталогЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры


&НаКлиенте
// Процедура - обработчик результата работы процедуры "НачатьПроверкуЭтоКаталог".
//
Процедура КаталогВыгрузкиЭтоКаталогЗавершение(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Если Не ЭтоКаталог Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран каталог файла выгрузки!");
		Возврат;
	КонецЕсли;
	
	МассивВыгружаемыхФайлов = Новый Массив;
	
	ВыгрузитьДанныеВФайлТамбовскаяОбластьНаСервере(МассивВыгружаемыхФайлов, ДополнительныеПараметры.ИмяФайла, ДополнительныеПараметры.ИмяКаталога);
	
	УПЖКХ_РаботаСФайламиКлиент.ВыгрузитьВФайл(РасширениеПодключено, МассивВыгружаемыхФайлов, ДополнительныеПараметры.ОбработчикЗавершения);
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

////////////////////////
// Диалог выбора файла

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Файл загрузки начислений".
//
Процедура КаталогЗагрузкиНачисленийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_РаботаСФайламиКлиент.ВыбратьКаталог(ЭтаФорма, "Выбор каталога загрузки", КаталогЗагрузкиНачислений);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "Открытие" поля ввода "Файл загрузки начислений".
//
Процедура КаталогЗагрузкиНачисленийОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УПЖКХ_РаботаСФайламиКлиент.ОткрытиеФайлаКаталога(КаталогЗагрузкиНачислений, Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения запуска приложения.
Процедура КаталогЗагрузкиНачисленийОткрытиеЗапускПриложения(КодВозврата, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Каталог выгрузки начислений".
//
Процедура КаталогВыгрузкиНачисленийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_РаботаСФайламиКлиент.ВыбратьКаталог(ЭтаФорма, "Выбор каталога выгрузки", КаталогВыгрузкиНачислений);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения выбора каталога.
Процедура КаталогВыгрузкиНачисленийНачалоВыбораВыбрать(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	КаталогВыгрузкиНачислений = ДиалогВыбораФайла.Каталог;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "Открытие" поля ввода "Каталог выгрузки начислений".
//
Процедура КаталогВыгрузкиНачисленийОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УПЖКХ_РаботаСФайламиКлиент.ОткрытиеФайлаКаталога(КаталогВыгрузкиНачислений, Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения запуска приложения.
Процедура КаталогВыгрузкиНачисленийОткрытиеЗапускПриложения(КодВозврата, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Файл загрузки льгот".
//
Процедура КаталогЗагрузкиЛьготНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Заголовок                   = "Выберите каталог файлов загрузки льгот";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	ДиалогВыбораФайла.Каталог                     = КаталогЗагрузкиЛьгот;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КаталогЗагрузкиЛьготНачалоВыбораВыбрать", ЭтотОбъект);
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения выбора каталога.
Процедура КаталогЗагрузкиЛьготНачалоВыбораВыбрать(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		КаталогЗагрузкиЛьгот = ВыбранныеФайлы[0];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "Открытие" поля ввода "Файл загрузки начислений".
//
Процедура КаталогЗагрузкиЛьготОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачатьЗапускПриложения(Новый ОписаниеОповещения("КаталогЗагрузкиЛьготОткрытиеЗапускПриложения", ЭтотОбъект),
						   КаталогЗагрузкиЛьгот);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения запуска приложения.
Процедура КаталогЗагрузкиЛьготОткрытиеЗапускПриложения(КодВозврата, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

////////////////////////
// Период

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПериодСтрокой".
Процедура ПериодСтрокойПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Модифицированность);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ПериодСтрокой".
Процедура ПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Регулирование" поля "ПериодСтрокой".
Процедура ПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Направление,
														Модифицированность);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "ПериодСтрокой".
Процедура ПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "ПериодСтрокой".
Процедура ПериодСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик результата работы процедуры "ДиалогВыбораФайла.Показать".
//
Процедура ВыбратьКаталогЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДиалогВыбораФайла.Заголовок = "Выбор каталога загрузки" Тогда
		КаталогЗагрузкиНачислений = ДиалогВыбораФайла.Каталог;
	ИначеЕсли ДиалогВыбораФайла.Заголовок = "Выбор каталога выгрузки" Тогда
		КаталогВыгрузкиНачислений = ДиалогВыбораФайла.Каталог;
	КонецЕсли;
	
КонецПроцедуры // КаталогВыгрузкиНачалоВыбора()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФорм

&НаКлиентеНаСервереБезКонтекста
// Процедура управляет внешним видом формы.
//
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.КаталогЗагрузкиНачислений.Видимость = Форма.РасширениеПодключено;
	Элементы.КаталогВыгрузкиНачислений.Видимость = Форма.РасширениеПодключено;
	Элементы.КаталогЗагрузкиЛьгот.Видимость      = Форма.РасширениеПодключено;
	
КонецПроцедуры // УправлениеФормой()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ФАЙЛАМИ

#Область СлужебныеПроцедурыРаботыСФайлами

&НаКлиенте
// Определяет подключено ли расширение для работы с файлами.
Процедура ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиенте()
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиентеЗавершение", ЭтотОбъект);
	
	УПЖКХ_РаботаСФайламиКлиент.ОпределитьВидВзаимодействияСФайловойСистемой(ОповещениеЗавершения);
	
КонецПроцедуры // ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиентеЗавершение()

&НаКлиенте
// Обработчик процедуры определяющей подключено расширение работы с файлами или нет.
Процедура ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиентеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		РасширениеПодключено = Результат;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти
