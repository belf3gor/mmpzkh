
&НаКлиенте
Перем ПредыдущаяУслуга;

&НаКлиенте
Перем ПредыдущаяЛьготнаяКатегория;

&НаКлиенте
Перем ПредыдущаяСтатьяЛьгот;

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область Форма

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Получаем настройки из хранилища.
	Если Параметры.Свойство("АдресНастроекВХранилище") И Параметры.АдресНастроекВХранилище <> Неопределено Тогда
		
		СтруктураНастроек = ПолучитьИзВременногоХранилища(Параметры.АдресНастроекВХранилище);
		
		Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
			
			// Идентификация лицевых счетов.
			врИдентификацияЛС = Неопределено;
			Если СтруктураНастроек.Свойство("ИдентификацияЛС", врИдентификацияЛС) Тогда
				Объект.ИдентификацияЛС = врИдентификацияЛС;
			Иначе
				// По умолчанию идентификация по наименованию.
				Объект.ИдентификацияЛС = 1;
			КонецЕсли;
			
			// Код газоснабжения.
			врКодГазоснабжения = Неопределено;
			Если СтруктураНастроек.Свойство("КодГазоснабжения", врКодГазоснабжения) Тогда
				Объект.КодГазоснабжения = врКодГазоснабжения;
			Иначе
				// По умолчанию.
				Объект.КодГазоснабжения = 1;
			КонецЕсли;
			
			// Код водоснабжения.
			врКодВодоснабжения = Неопределено;
			Если СтруктураНастроек.Свойство("КодВодоснабжения", врКодВодоснабжения) Тогда
				Объект.КодВодоснабжения = врКодВодоснабжения;
			Иначе
				// По умолчанию.
				Объект.КодВодоснабжения = 5;
			КонецЕсли;
			
			// Кодировка заружаемых/выгружаемых файлов.
			врКодировкаТекстовогоФайла = Неопределено;
			Если СтруктураНастроек.Свойство("КодировкаТекстовогоФайла", врКодировкаТекстовогоФайла) Тогда
				Объект.КодировкаТекстовогоФайла = врКодировкаТекстовогоФайла;
			Иначе
				// По умолчанию кодировка OEM.
				Объект.КодировкаТекстовогоФайла = Ложь;
			КонецЕсли;
			
			// Таблица благоустройств помещений.
			врТаблицаБлагоустройств = Неопределено;
			Если СтруктураНастроек.Свойство("РеспубликаТатарстан_СоответствиеВидовБлагоустройствПомещений", врТаблицаБлагоустройств) Тогда
				Если ТипЗнч(врТаблицаБлагоустройств) = Тип("ТаблицаЗначений") Тогда
					Объект.РеспубликаТатарстан_СоответствиеВидовБлагоустройствПомещений.Загрузить(врТаблицаБлагоустройств);
				КонецЕсли;
			КонецЕсли;
			
			// Таблица настроек.
			врТаблицаНастроек = Неопределено;
			Если СтруктураНастроек.Свойство("РеспубликаТатарстан_ТаблицаНастроек", врТаблицаНастроек) Тогда
				Если ТипЗнч(врТаблицаНастроек) = Тип("ТаблицаЗначений") Тогда
					Объект.РеспубликаТатарстан_ТаблицаНастроек.Загрузить(врТаблицаНастроек);
				КонецЕсли;
			КонецЕсли;
			
			// Таблица услуг в базе.
			врТаблицаУслугВБазе = Неопределено;
			Если СтруктураНастроек.Свойство("РеспубликаТатарстан_УслугиВБазе", врТаблицаУслугВБазе) Тогда
				Если ТипЗнч(врТаблицаУслугВБазе) = Тип("ТаблицаЗначений") Тогда
					Объект.РеспубликаТатарстан_УслугиВБазе.Загрузить(врТаблицаУслугВБазе);
				КонецЕсли;
			КонецЕсли;
			
			// Таблица соответствия кодов единиц.
			врТаблицаСоответствияКодовЕИ = Неопределено;
			Если СтруктураНастроек.Свойство("РеспубликаТатарстан_ТаблицаСоответствияКодовЕИ", врТаблицаСоответствияКодовЕИ) Тогда
				Если ТипЗнч(врТаблицаСоответствияКодовЕИ) = Тип("ТаблицаЗначений") Тогда
					Объект.РеспубликаТатарстан_ТаблицаСоответствияКодовЕИ.Загрузить(врТаблицаСоответствияКодовЕИ);
				КонецЕсли;
			КонецЕсли;
			
			// Таблица соответствия кодов единиц.
			врКубометрГВС = Неопределено;
			Если СтруктураНастроек.Свойство("РеспубликаТатарстан_КубометрГВС", врКубометрГВС) Тогда
				Если ТипЗнч(врКубометрГВС) = Тип("ТаблицаЗначений") Тогда
					Объект.РеспубликаТатарстан_КубометрГВС.Загрузить(врКубометрГВС);
				КонецЕсли;
			КонецЕсли;
			
			// Услуга для льгот ОСЗН.
			врУслугаДляЛьготОСЗН = Неопределено;
			Если СтруктураНастроек.Свойство("УслугаДляЛьготОСЗН", врУслугаДляЛьготОСЗН) Тогда
				Объект.УслугаДляЛьготОСЗН = врУслугаДляЛьготОСЗН;
			КонецЕсли;
			
			// Таблица виды выплат ОСЗН.
			врВидыВыплатОСЗН = Неопределено;
			Если СтруктураНастроек.Свойство("РеспубликаТатарстан_ВидыВыплатОСЗН", врВидыВыплатОСЗН) Тогда
				Если ТипЗнч(врВидыВыплатОСЗН) = Тип("ТаблицаЗначений") Тогда
					Объект.РеспубликаТатарстан_ВидыВыплатОСЗН.Загрузить(врВидыВыплатОСЗН);
				КонецЕсли;
			КонецЕсли;
			
			// Таблица настроек льгот.
			врЛьготыВБазе = Неопределено;
			Если СтруктураНастроек.Свойство("РеспубликаТатарстан_ЛьготыВБазе", врЛьготыВБазе) Тогда
				Если ТипЗнч(врЛьготыВБазе) = Тип("ТаблицаЗначений") Тогда
					Объект.РеспубликаТатарстан_ЛьготыВБазе.Загрузить(врЛьготыВБазе);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполнение списков выбора типов жилья
	ЗаполнитьТипыЖилья("Газ");
	ЗаполнитьТипыЖилья("Вод");
	
	// Заполнение по умолчанию списка благоустройств помещений.
	Если Объект.РеспубликаТатарстан_СоответствиеВидовБлагоустройствПомещений.Количество() = 0 Тогда
		ОбновитьСписокБлагоустройствНаСервере();
	КонецЕсли;
	
	// Заполнение по умолчанию списка услуг в ОСЗН.
	Если Объект.РеспубликаТатарстан_ТаблицаНастроек.Количество() = 0 Тогда
		ОбновитьСписокУслугНаСервере();
	КонецЕсли;
	
	// Заполнение по умолчанию кодов единиц измерения в ОСЗН.
	Если Объект.РеспубликаТатарстан_ТаблицаСоответствияКодовЕИ.Количество() = 0 Тогда
		ОбновитьКодыЕИНаСервере();
	КонецЕсли;
	
	// Заполнение списка значений СтатьиНачисленныхСубсидий.
	РазделительСтатейЛьгот = ". ";
	ЗаполнитьСписокСтатейЛьготНаСервере();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаСервере
// Процедура формирует список типов услуги "Водоснабжение".
//
// Параметры:
//  КореньТипаЖилья - Строка - "Газ" или "Вод" соответственно для газоснабжения и водоснабжения.
//
Процедура ЗаполнитьТипыЖилья(КореньТипаЖилья)
	
	СписокВыбора = Элементы["ТипыПо" + КореньТипаЖилья + "оснабжению"].СписокВыбора;
	
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("РеспубликаТатарстан_Макет");
	
	ОбластьСправочникТиповЖилья = Макет.ПолучитьОбласть("СправочникТиповЖильяПо" + КореньТипаЖилья + "оснабжению");
	
	Для НомерСтроки = 1 По ОбластьСправочникТиповЖилья.ВысотаТаблицы Цикл
		
		НовоеЗначение               = СписокВыбора.Добавить();
		НовоеЗначение.Значение      = ОбластьСправочникТиповЖилья.Область(НомерСтроки, 1).Текст;
		НовоеЗначение.Представление = ОбластьСправочникТиповЖилья.Область(НомерСтроки, 2).Текст;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТипыЖилья()

&НаКлиенте
// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	// Блокировка командных панелей.
	Если Объект.РеспубликаТатарстан_ТаблицаНастроек.Количество() = 0 Тогда
		Элементы.ТП_ЖКУ_ВБазеДобавить.Доступность = Ложь;
	Иначе
		Элементы.ТП_ЖКУ_ВБазеДобавить.Доступность = Истина;
	КонецЕсли;
	
	Если Объект.РеспубликаТатарстан_ВидыВыплатОСЗН.Количество() = 0 Тогда
		Элементы.ТП_СтатьяЛьготыДобавить.Доступность = Ложь;
	Иначе
		Элементы.ТП_СтатьяЛьготыДобавить.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область КоманднаяПанель

////////////////////
// Команда "Сохранить и закрыть"

&НаКлиенте
// Обработчик команды "КомандаСохранить".
//
Процедура КомандаСохранить(Команда)
	
	АдресНастроекВХранилище = ПоместитьНастройкиВХранилище(); 
	Закрыть(АдресНастроекВХранилище);
	
КонецПроцедуры // КомандаСохранить()

////////////////////
// Работа с временным хранилищем

&НаСервере
// Помещает таблицу услуг во временное хранилище.
//
// Возвращаемое значение:
//  Строка - адрес настроек во временном хранилище.
//
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("ИдентификацияЛС",          Объект.ИдентификацияЛС);
	СтруктураНастроек.Вставить("КодГазоснабжения",         Объект.КодГазоснабжения);
	СтруктураНастроек.Вставить("КодВодоснабжения",         Объект.КодВодоснабжения);
	СтруктураНастроек.Вставить("КодировкаТекстовогоФайла", Объект.КодировкаТекстовогоФайла);
	
	СтруктураНастроек.Вставить("РеспубликаТатарстан_СоответствиеВидовБлагоустройствПомещений", Объект.РеспубликаТатарстан_СоответствиеВидовБлагоустройствПомещений.Выгрузить());
	
	СтруктураНастроек.Вставить("РеспубликаТатарстан_ТаблицаНастроек",            Объект.РеспубликаТатарстан_ТаблицаНастроек.Выгрузить());
	СтруктураНастроек.Вставить("РеспубликаТатарстан_УслугиВБазе",                Объект.РеспубликаТатарстан_УслугиВБазе.Выгрузить());
	СтруктураНастроек.Вставить("РеспубликаТатарстан_ТаблицаСоответствияКодовЕИ", Объект.РеспубликаТатарстан_ТаблицаСоответствияКодовЕИ.Выгрузить());
	СтруктураНастроек.Вставить("РеспубликаТатарстан_КубометрГВС",                Объект.РеспубликаТатарстан_КубометрГВС.Выгрузить());
	
	СтруктураНастроек.Вставить("УслугаДляЛьготОСЗН",                 Объект.УслугаДляЛьготОСЗН);
	СтруктураНастроек.Вставить("РеспубликаТатарстан_ВидыВыплатОСЗН", Объект.РеспубликаТатарстан_ВидыВыплатОСЗН.Выгрузить());
	СтруктураНастроек.Вставить("РеспубликаТатарстан_ЛьготыВБазе",    Объект.РеспубликаТатарстан_ЛьготыВБазе.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции // ПоместитьНастройкиВХранилище()

////////////////////
// Команда Инструкция

&НаКлиенте
// Обработчик команды "КомандаСправочнаяИнформация".
//
Процедура КомандаСправочнаяИнформация(Команда)
	
	ОткрытьСправкуФормы();
	
КонецПроцедуры // КомандаСправочнаяИнформация()

#КонецОбласти

#Область БлагоустройстваПомещений

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ БЛАГОУСТРОЙСТВ ПОМЕЩЕНИЙ

&НаКлиенте
// Обработчик команды "КомандаОбновитьСписокБлагоустройств".
//
Процедура КомандаОбновитьСписокБлагоустройств(Команда)
	
	ОбновитьСписокБлагоустройствНаСервере();
	
КонецПроцедуры // КомандаОбновитьСписокБлагоустройств()

&НаСервере
// Обработчик команды "КомандаОбновитьСписокБлагоустройств" на сервере.
//
Процедура ОбновитьСписокБлагоустройствНаСервере()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.РеспубликаТатарстан_ОбновитьСписокБлагоустройств();
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецПроцедуры // ОбновитьСписокБлагоустройствНаСервере()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ УСЛУГИ В ОСЗН

#Область УслугиВОСЗН

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" таблицы "УслугаВОСЗН".
//
Процедура ТаблицаНастроекПриАктивизацииСтроки(Элемент)
	
	ТП_ЖКУ_ВБазе.Очистить();
	
	// При активации строки УслугаВОСЗН, загружаем соответствия в УслугаВБазе. 
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Отбор = Новый Структура;
		Отбор.Вставить("Идентификатор", Элемент.ТекущиеДанные.НомерСтроки);
		
		НайденныеСтроки = Объект.РеспубликаТатарстан_УслугиВБазе.НайтиСтроки(Отбор);
		
		Для Каждого ТекСтрока из НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(ТП_ЖКУ_ВБазе.Добавить(), ТекСтрока);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ТаблицаНастроекПриАктивизацииСтроки()

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" строки таблицы "УслугаВОСЗН". 
//
Процедура ТаблицаНастроекПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Устанавливаем запрет на добавление строк копированием.
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ТаблицаНастроекПередНачаломДобавления()

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" таблицы "УслугаВОСЗН".
//
Процедура ТаблицаНастроекПередУдалением(Элемент, Отказ)
	
	// Удаление текущей строки соответствия из правой колонки.
	СтрокиУдаления = Объект.РеспубликаТатарстан_УслугиВБазе.НайтиСтроки(Новый Структура("Идентификатор",  Элемент.ТекущиеДанные.НомерСтроки));
	Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
		Объект.РеспубликаТатарстан_УслугиВБазе.Удалить(СтрокаУдаления);
	КонецЦикла;
	
КонецПроцедуры // ТаблицаНастроекПередУдалением()

&НаКлиенте
// Процедура - обработчик события "ПослеУдаления" таблицы "УслугаВОСЗН".
//
Процедура ТаблицаНастроекПослеУдаления(Элемент)
	
	// После удаления строки из УслугиВОСЗН переписываем идентификаторы в УслугиВБазе. 
	Для Каждого СтрокаОСЗН Из Объект.РеспубликаТатарстан_ТаблицаНастроек Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("КодУслугиВОСЗН", СтрокаОСЗН.КодУслугиВОСЗН);
		Отбор.Вставить("УслугаВОСЗН",    СтрокаОСЗН.УслугаВОСЗН);
		
		СтрокиИзменения = Объект.РеспубликаТатарстан_УслугиВБазе.НайтиСтроки(Отбор); 
		
		Для Каждого Строка ИЗ СтрокиИзменения Цикл
			Строка.Идентификатор = СтрокаОСЗН.НомерСтроки; 
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаНастроекПриАктивизацииСтроки(Элемент);
	
	// Если в левой колонке пользователем удалены все колонки, то блокируем возможность добавления соответствий.
	Если Объект.РеспубликаТатарстан_ТаблицаНастроек.Количество() = 0 Тогда
		Элементы.ТП_ЖКУ_ВБазеДобавить.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ТаблицаНастроекПослеУдаления()

&НаКлиенте
// Процедура - обработчик события "ПередОкончаниемРедактирования" таблицы "УслугаВОСЗН".
//
Процедура ТаблицаНастроекПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	КодОшибки = 0;
	
	// Проверяем на наличие и уникальность код услуги.
	ТекущийКодУслугиВОСЗН = Элемент.ТекущиеДанные.КодУслугиВОСЗН;
	Если ЗначениеЗаполнено(ТекущийКодУслугиВОСЗН) Тогда
		ОтборКод = Новый Структура;
		ОтборКод.Вставить("КодУслугиВОСЗН", ТекущийКодУслугиВОСЗН);
		
		СтрокиСовпаденияКод = Объект.РеспубликаТатарстан_ТаблицаНастроек.НайтиСтроки(ОтборКод);
		Если СтрокиСовпаденияКод.Количество() > 1 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Вид услуги в ОСЗН не уникален!");
			КодОшибки = КодОшибки + 1;
		КонецЕсли;
		
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Вид услуги в ОСЗН не заполнен!");
		КодОшибки = КодОшибки + 1;
	КонецЕсли;
	
	// Проверяем на наличие и уникальность услуги.
	ТекущаяУслугаВОСЗН    = Элемент.ТекущиеДанные.УслугаВОСЗН;
	Если ЗначениеЗаполнено(ТекущаяУслугаВОСЗН) Тогда
		ОтборУслуга = Новый Структура;
		ОтборУслуга.Вставить("УслугаВОСЗН", ТекущаяУслугаВОСЗН);
		
		СтрокиСовпаденияУслуга = Объект.РеспубликаТатарстан_ТаблицаНастроек.НайтиСтроки(ОтборУслуга);
		Если СтрокиСовпаденияУслуга.Количество() > 1 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Услуга в ОСЗН не уникальна!");
			КодОшибки = КодОшибки + 1;
		КонецЕсли;
		
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Услуга в ОСЗН не заполнена!");
		КодОшибки = КодОшибки + 1;
	КонецЕсли;
	
	// При наличии незаполненных полей или дубликатов опрашиваем пользователя.
	Если КодОшибки > 0 Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Добовление незаполненных полей и дублирующих значений недопустимо!"); 
		Объект.РеспубликаТатарстан_ТаблицаНастроек.Удалить(Элементы.ТаблицаНастроек.ТекущиеДанные.НомерСтроки - 1);
		
	КонецЕсли;
	
	// Разблокируем кнопку добавления табличного поля "ТП_ЖКУ_ВБазе".
	Если Не Объект.РеспубликаТатарстан_ТаблицаНастроек.Количество() = 0 Тогда
		Элементы.ТП_ЖКУ_ВБазеДобавить.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры // ТаблицаНастроекПередОкончаниемРедактирования()

#КонецОбласти

#Область КомандаОбновитьСписокУслуг

&НаКлиенте
// Обработчик команды "КомандаОбновитьСписокУслуг".
//
Процедура КомандаОбновитьСписокУслуг(Команда)
	
	Если Объект.РеспубликаТатарстан_УслугиВБазе.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаОбновитьСписокУслугЗавершение", ЭтотОбъект);
		
		ТекстВопроса = "Все установленные соответствия будут очищены. Продолжить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ОбновитьСписокУслугНаСервере();
	КонецЕсли;
	
КонецПроцедуры // КомандаОбновить()

&НаКлиенте
// Обработчик результата опроса команды "КомандаОбновитьСписокУслуг".
//
Процедура КомандаОбновитьСписокУслугЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Объект.РеспубликаТатарстан_УслугиВБазе.Очистить();
		
		ОбновитьСписокУслугНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры // КомандаОбновитьСписокУслугЗавершение()

&НаСервере
// Загружает список услуг в ОСЗН по умолчанию из справочника.
//
Процедура ОбновитьСписокУслугНаСервере()
	
	Объект.РеспубликаТатарстан_ТаблицаНастроек.Очистить();
	
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("РеспубликаТатарстан_Макет");
	
	ОбластьСправочникУслуг = Макет.ПолучитьОбласть("СправочникУслуг");
	
	Для НомерСтроки = 1 По ОбластьСправочникУслуг.ВысотаТаблицы Цикл
		
		НоваяСтрока                = Объект.РеспубликаТатарстан_ТаблицаНастроек.Добавить();
		НоваяСтрока.КодУслугиВОСЗН = ОбластьСправочникУслуг.Область(НомерСтроки, 1).Текст;
		НоваяСтрока.УслугаВОСЗН    = ОбластьСправочникУслуг.Область(НомерСтроки, 2).Текст;
		
	КонецЦикла;
	
КонецПроцедуры // ОбновитьСписокУслугНаСервере()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ УСЛУГИ В БАЗЕ

#Область ТП_УслугиВБазе

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" таблицы "УслугаВБазе".
//
Процедура ТП_ЖКУ_ВБазеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Если не выбрана строка в левой колоке или добавление строк копированием.
	Если Элементы.ТаблицаНастроек.ТекущиеДанные = Неопределено Или Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ТП_ЖКУ_ВБазеПередНачаломДобавления()

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" таблицы "УслугаВБазе".
//
Процедура ТП_ЖКУ_ВБазеПередУдалением(Элемент, Отказ)
	
	// При удалении строки удаляем соответствующие записи в РеспубликаТатарстан_УслугиВБазе. 
	Идентификатор = Элементы.ТаблицаНастроек.ТекущиеДанные.НомерСтроки;
	УслугаВБазе   = Элемент.ТекущиеДанные.УслугаВБазе;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Идентификатор",  Идентификатор);
	Отбор.Вставить("УслугаВБазе",    УслугаВБазе);
	
	СтрокиУдаления = Объект.РеспубликаТатарстан_УслугиВБазе.НайтиСтроки(Отбор);
	
	Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
		Объект.РеспубликаТатарстан_УслугиВБазе.Удалить(СтрокаУдаления);
	КонецЦикла;
	
КонецПроцедуры // ТП_ЖКУ_ВБазеПередУдалением()

&НаКлиенте
// Процедура - обработчик события "ПриНачалеРедактирования" таблицы "УслугаВБазе".
//
Процедура ТП_ЖКУ_ВБазеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// Запоминаем предыдущее значение перезаписываемой строки.
	Если Не НоваяСтрока Тогда
		ПредыдущаяУслуга = Элемент.ТекущиеДанные.УслугаВБазе;
	КонецЕсли;
	
КонецПроцедуры // ТП_ЖКУ_ВБазеПриНачалеРедактирования()

&НаКлиенте
// Процедура - обработчик события "ПередОкончаниемРедактирования" таблицы "УслугаВБазе".
//
Процедура ТП_ЖКУ_ВБазеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	// Если изменяем выбранное значение, то удаляем предыдущую запись.
	Если Не НоваяСтрока И ЗначениеЗаполнено(ПредыдущаяУслуга) Тогда
		
		Идентификатор = Элементы.ТаблицаНастроек.ТекущиеДанные.НомерСтроки;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Идентификатор", Идентификатор);
		Отбор.Вставить("УслугаВБазе",   ПредыдущаяУслуга);
		
		НайденнаяСтрока = Объект.РеспубликаТатарстан_УслугиВБазе.НайтиСтроки(Отбор);
		Объект.РеспубликаТатарстан_УслугиВБазе.Удалить(НайденнаяСтрока[0]);
		
	КонецЕсли;
	
КонецПроцедуры // ТП_ЖКУ_ВБазеПередОкончаниемРедактирования()

&НаКлиенте
// Процедура - обработчик события "ПриОкончанииРедактирования" таблицы "УслугаВБазе".
//
Процедура ТП_ЖКУ_ВБазеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не Элемент.ТекущиеДанные = Неопределено И Не ОтменаРедактирования Тогда
		
		Если Элемент.ТекущиеДанные.УслугаВБазе.Пустая() Тогда
			// Удаляем пустую строку.
			ТП_ЖКУ_ВБазе.Удалить(ТП_ЖКУ_ВБазе.Индекс(Элемент.ТекущиеДанные)); 
		Иначе
			// Добавляем запись в РеспубликаТатарстан_УслугиВБазе.
			Идентификатор  = Элементы.ТаблицаНастроек.ТекущиеДанные.НомерСтроки;
			КодУслугиВОСЗН = Элементы.ТаблицаНастроек.ТекущиеДанные.КодУслугиВОСЗН;
			УслугаВОСЗН    = Элементы.ТаблицаНастроек.ТекущиеДанные.УслугаВОСЗН;
			УслугаВБазе    = Элемент.ТекущиеДанные.УслугаВБазе;
			
			НоваяСтрокаСоответствия                = Объект.РеспубликаТатарстан_УслугиВБазе.Добавить();
			НоваяСтрокаСоответствия.УслугаВБазе    = УслугаВБазе;
			НоваяСтрокаСоответствия.Идентификатор  = Идентификатор;
			НоваяСтрокаСоответствия.КодУслугиВОСЗН = КодУслугиВОСЗН;
			НоваяСтрокаСоответствия.УслугаВОСЗН    = УслугаВОСЗН;
			
			// Удаляем старую запись при перевыборе.
			Если Не ПредыдущаяУслуга = УслугаВБазе Тогда
				
				Отбор = Новый Структура;
				Отбор.Вставить("Идентификатор", Идентификатор);
				Отбор.Вставить("УслугаВБазе",   ПредыдущаяУслуга);
				
				НайденнаяСтрока = Объект.РеспубликаТатарстан_УслугиВБазе.НайтиСтроки(Отбор);
				Если НайденнаяСтрока.Количество() = 1 Тогда
					НайденнаяСтрока[0].УслугаВБазе = УслугаВБазе;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ТП_ЖКУ_ВБазеПриОкончанииРедактирования()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "УслугаВБазе" таблицы "УслугаВБазе".
//
Процедура ТП_ЖКУ_ВБазеУслугаВБазеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Устанавливаем отбор на справочник "Услуги".
	СтандартнаяОбработка = Ложь;
	
	// Список уже выбранных услуг по данной услуге в ОСЗН.
	СписокВыбранныхУслуг = Новый СписокЗначений;
	Для Каждого Строка Из Объект.РеспубликаТатарстан_УслугиВБазе Цикл
		СписокВыбранныхУслуг.Добавить(Строка.УслугаВБазе);
	КонецЦикла;
	
	Форма = ПолучитьФорму("Справочник.КВП_Услуги.ФормаВыбора", Новый Структура("ТекущаяСтрока", Элементы.ТП_ЖКУ_ВБазе.ТекущиеДанные.УслугаВБазе), Элемент);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Форма.Список.КомпоновщикНастроек.Настройки.Отбор, "Ссылка", СписокВыбранныхУслуг,
															ВидСравненияКомпоновкиДанных.НеВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
	Форма.Открыть();
	
КонецПроцедуры // ТП_ЖКУ_ВБазеУслугаВБазеНачалоВыбора()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ КОДЫ ЕДИНИЦ ИЗМЕРЕНИЯ

#Область КомандаОбновитьКодыЕИ

&НаКлиенте
// Обработчик команды "КомандаОбновитьКодыЕИ".
//
Процедура КомандаОбновитьКодыЕИ(Команда)
	
	Если Объект.РеспубликаТатарстан_ТаблицаСоответствияКодовЕИ.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаОбновитьКодыЕИЗавершение", ЭтотОбъект);
		
		ТекстВопроса = "Все установленные соответствия будут очищены. Продолжить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ОбновитьКодыЕИНаСервере();
	КонецЕсли;
	
КонецПроцедуры // КомандаОбновитьКодыЕИ()

&НаКлиенте
// Обработчик результата опроса команды "КомандаОбновитьКодыЕИ".
//
Процедура КомандаОбновитьКодыЕИЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Объект.РеспубликаТатарстан_ТаблицаСоответствияКодовЕИ.Очистить();
		
		ОбновитьКодыЕИНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры // КомандаОбновитьКодыЕИЗавершение()

&НаСервере
// Загружает коды единиц измерения в ОСЗН по умолчанию из справочника.
//
Процедура ОбновитьКодыЕИНаСервере()
	
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("РеспубликаТатарстан_Макет");
	
	ОбластьСправочникЕдиницИзмерения = Макет.ПолучитьОбласть("СправочникЕдиницИзмерения");
	
	Для НомерСтроки = 1 По ОбластьСправочникЕдиницИзмерения.ВысотаТаблицы Цикл
		
		НоваяСтрока              = Объект.РеспубликаТатарстан_ТаблицаСоответствияКодовЕИ.Добавить();
		НоваяСтрока.Код          = ОбластьСправочникЕдиницИзмерения.Область(НомерСтроки, 1).Текст;
		НоваяСтрока.Наименование = ОбластьСправочникЕдиницИзмерения.Область(НомерСтроки, 2).Текст;
		
	КонецЦикла;
	
КонецПроцедуры // ОбновитьКодыЕИНаСервере()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "КубометрГВС"

#Область КубометрГВС

&НаКлиенте
// Процедура - обработчик события "ПриОкончанииРедактирования" таблицы "КубометрГВС".
//
Процедура КубометрГВСПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не Элемент.ТекущиеДанные = Неопределено И Не ОтменаРедактирования Тогда
		
		Если Элемент.ТекущиеДанные.Услуга.Пустая() Тогда
			// Удаляем пустую строку.
			Объект.РеспубликаТатарстан_КубометрГВС.Удалить(Объект.РеспубликаТатарстан_КубометрГВС.Индекс(Элемент.ТекущиеДанные));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // КубометрГВСПриОкончанииРедактирования()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" таблицы "КубометрГВС".
//
Процедура КубометрГВСУслугаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Устанавливаем отбор на справочник "Услуги".
	СтандартнаяОбработка = Ложь;
	
	// Список услуг, установленных в соответсвие услугам ОСЗН.
	СписокВыбранныхУслуг = Новый СписокЗначений;
	Для Каждого Строка Из Объект.РеспубликаТатарстан_УслугиВБазе Цикл
		СписокВыбранныхУслуг.Добавить(Строка.УслугаВБазе);
	КонецЦикла;
	
	Форма = ПолучитьФорму("Справочник.КВП_Услуги.ФормаВыбора", Новый Структура("ТекущаяСтрока", Элементы.КубометрГВС.ТекущиеДанные.Услуга), Элемент);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Форма.Список.КомпоновщикНастроек.Настройки.Отбор, "Ссылка", СписокВыбранныхУслуг,
															ВидСравненияКомпоновкиДанных.ВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
	Форма.Открыть();
	
КонецПроцедуры // КубометрГВСУслугаНачалоВыбора()

#КонецОбласти

#Область КомандаОбновитьСписокУслугГВС

&НаКлиенте
// Обработчик команды "ОбновитьСписокУслугГВС".
//
Процедура КомандаОбновитьСписокУслугГВС(Команда)
	
	КомандаОбновитьСписокУслугГВСНаСервере();
	
КонецПроцедуры // КоманднаяПанельКубометрГВСОбновитьСписокУслугГВС()

&НаСервере
// Проверяет корректность формата введенной строки статьи льгот - обязательно [КодСтатьиЛьгот] - число,
// а после него [РазделительСтатейЛьгот]; код статьи должен быть уникальным.
//
// Параметры:
//  МассивСтрокКодГВС - Строка - строка формата [КодСтатьиЛьгот][РазделительСтатейЛьгот][НаименованиеСтатьиЛьгот].
//
Процедура КомандаОбновитьСписокУслугГВСНаСервере()
	
	МассивСтрокКодГВС = Объект.РеспубликаТатарстан_ТаблицаСоответствияКодовЕИ.НайтиСтроки(Новый Структура("Код", "8"));
	
	Если МассивСтрокКодГВС.Количество() = 1 И Не МассивСтрокКодГВС[0].ЕдиницаИзмеренияВБазе.Пустая() Тогда
		
		Запрос = Новый Запрос;
		
		Запрос.УстановитьПараметр("КубическийМетрДляНуждГВС", МассивСтрокКодГВС[0].ЕдиницаИзмеренияВБазе);
		Запрос.УстановитьПараметр("УслугиВБазе",              Объект.РеспубликаТатарстан_УслугиВБазе.Выгрузить());
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	УслугиВБазе.УслугаВБазе
		|ПОМЕСТИТЬ втУслугиВБазе
		|ИЗ
		|	&УслугиВБазе КАК УслугиВБазе
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	втУслугиВБазе.УслугаВБазе КАК Услуга
		|ИЗ
		|	втУслугиВБазе КАК втУслугиВБазе
		|ГДЕ
		|	втУслугиВБазе.УслугаВБазе.ВидУслуги.ЕдиницаИзмерения = &КубическийМетрДляНуждГВС";
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		Объект.РеспубликаТатарстан_КубометрГВС.Очистить();
		Объект.РеспубликаТатарстан_КубометрГВС.Загрузить(Результат);
		
	Иначе
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не определено соответствие в базе для единицы измерения в ОСЗН ""Код 8. Кубический метр для нужд ГВС"".");
		
	КонецЕсли;
	
КонецПроцедуры // КомандаОбновитьСписокУслугГВСНаСервере()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ УСЛУГИ В ОСЗН

#Область ВидыВыплатОСЗН

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" таблицы "ВидыВыплатОСЗН".
//
Процедура ВидыВыплатОСЗНПриАктивизацииСтроки(Элемент)
	
	ТП_СтатьяЛьготы.Очистить();
	
	// При активации строки ВидыВыплатОСЗН, загружаем соответствия в ТП_СтатьяЛьготы. 
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("ВидВыплатыОСЗН", Элемент.ТекущиеДанные.ВидВыплатыОСЗН);
		
		НайденныеСтроки = Объект.РеспубликаТатарстан_ЛьготыВБазе.НайтиСтроки(Отбор);
		
		Для Каждого ТекСтрока из НайденныеСтроки Цикл
			НоваяСтрока = ТП_СтатьяЛьготы.Добавить();
			НоваяСтрока.СтатьяЛьготы = ТекСтрока.КодСтатьиЛьготы + РазделительСтатейЛьгот + ТекСтрока.НаименованиеСтатьиЛьготы;
		КонецЦикла;
		
		Если Элемент.ТекущиеДанные.ЛьготнаяКатегорияВБазе.Пустая() Тогда
			Элементы.ТП_СтатьяЛьготыДобавить.Доступность = Ложь;
		Иначе
			Элементы.ТП_СтатьяЛьготыДобавить.Доступность = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ВидыВыплатОСЗНПриАктивизацииСтроки()

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" таблицы "ВидыВыплатОСЗН".
//
Процедура ВидыВыплатОСЗНПередУдалением(Элемент, Отказ)
	
	Отбор = Новый Структура;
	Отбор.Вставить("ВидВыплатыОСЗН", Элемент.ТекущиеДанные.ВидВыплатыОСЗН);
	
	СтрокиУдаления = Объект.РеспубликаТатарстан_ЛьготыВБазе.НайтиСтроки(Отбор);
	
	Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
		Объект.РеспубликаТатарстан_ЛьготыВБазе.Удалить(СтрокаУдаления);
	КонецЦикла;
	
КонецПроцедуры // ТаблицаСоответсвияКодовЕИПередУдалением()

&НаКлиенте
// Процедура - обработчик события "ПриНачалеРедактирования" таблицы "ВидыВыплатОСЗН".
//
Процедура ВидыВыплатОСЗНПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ПредыдущаяЛьготнаяКатегория = Элемент.ТекущиеДанные.ЛьготнаяКатегорияВБазе;
	
КонецПроцедуры // ВидыВыплатОСЗНПриНачалеРедактирования()

&НаКлиенте
// Процедура - обработчик события "ПередОкончанииРедактирования" таблицы "ВидыВыплатОСЗН".
//
Процедура ВидыВыплатОСЗНПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ПредыдущаяЛьготнаяКатегория <> Неопределено И Не ПредыдущаяЛьготнаяКатегория.Пустая() Тогда
		
		Если ПредыдущаяЛьготнаяКатегория <> Элемент.ТекущиеДанные.ЛьготнаяКатегорияВБазе Тогда
			
			Отбор = Новый Структура;
			Отбор.Вставить("ЛьготнаяКатегорияВБазе", ПредыдущаяЛьготнаяКатегория);
			
			НайденныеСтроки = Объект.РеспубликаТатарстан_ЛьготыВБазе.НайтиСтроки(Отбор);
			
			Для Каждого ТекСтрока из НайденныеСтроки Цикл
				ТекСтрока.ЛьготнаяКатегорияВБазе = Элемент.ТекущиеДанные.ЛьготнаяКатегорияВБазе;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.ЛьготнаяКатегорияВБазе.Пустая() Тогда
		Элементы.ТП_СтатьяЛьготыДобавить.Доступность = Ложь;
	Иначе
		Элементы.ТП_СтатьяЛьготыДобавить.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры // ВидыВыплатОСЗНПередОкончаниемРедактирования()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля "ЛьготнаяКатегорияВБазе" таблицы "ВидыВыплатОСЗН".
//
Процедура ЛьготнаяКатегорияВБазеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Устанавливаем отбор на справочник "Льготные категории".
	СтандартнаяОбработка = Ложь;
	
	// Список уже выбранных льготных категорий.
	СписокВыбранныхЛьгот = Новый СписокЗначений;
	
	Для Каждого Строка Из Объект.РеспубликаТатарстан_ВидыВыплатОСЗН Цикл
		СписокВыбранныхЛьгот.Добавить(Строка.ЛьготнаяКатегорияВБазе);
	КонецЦикла;
	
	Форма = ПолучитьФорму("Справочник.КВП_ЛьготныеКатегории.ФормаВыбора", Новый Структура("ТекущаяСтрока", Элементы.ВидыВыплатОСЗН.ТекущиеДанные.ЛьготнаяКатегорияВБазе), Элемент);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Форма.Список.КомпоновщикНастроек.Настройки.Отбор, "Ссылка", СписокВыбранныхЛьгот,
															ВидСравненияКомпоновкиДанных.НеВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
	Форма.Открыть();
	
КонецПроцедуры // ЛьготнаяКатегорияВБазеНачалоВыбора()

#КонецОбласти

#Область КомандаОбновитьВидыВыплатОСЗН

&НаКлиенте
// Обработчик команды "КомандаОбновитьВидыВыплатОСЗН".
//
Процедура КомандаОбновитьВидыВыплатОСЗН(Команда)
	
	Если Объект.РеспубликаТатарстан_ВидыВыплатОСЗН.Количество() > 0 Или Объект.РеспубликаТатарстан_ЛьготыВБазе.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаОбновитьВидыВыплатОСЗНЗавершение", ЭтотОбъект);
		
		ТекстВопроса = "Все установленные соответствия будут очищены. Продолжить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ОбновитьВидыВыплатОСЗННаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата опроса команды "КомандаОбновитьКодыЕИ".
//
Процедура КомандаОбновитьВидыВыплатОСЗНЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Объект.РеспубликаТатарстан_ВидыВыплатОСЗН.Очистить();
		Объект.РеспубликаТатарстан_ЛьготыВБазе.Очистить();
		
		ОбновитьВидыВыплатОСЗННаСервере();
		
	КонецЕсли;
	
КонецПроцедуры // КомандаОбновитьКодыЕИЗавершение()

&НаСервере
// Загружает коды единиц измерения в ОСЗН по умолчанию из справочника.
//
Процедура ОбновитьВидыВыплатОСЗННаСервере()
	
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("РеспубликаТатарстан_Макет");
	
	ОбластьСправочникВидыВыплатОСЗН = Макет.ПолучитьОбласть("СправочникВидыВыплатОСЗН");
	
	Для НомерСтроки = 1 По ОбластьСправочникВидыВыплатОСЗН.ВысотаТаблицы Цикл
		
		НоваяСтрока                = Объект.РеспубликаТатарстан_ВидыВыплатОСЗН.Добавить();
		НоваяСтрока.ВидВыплатыОСЗН = ОбластьСправочникВидыВыплатОСЗН.Область(НомерСтроки, 1).Текст;
		
	КонецЦикла;
	
КонецПроцедуры // ОбновитьВидыВыплатОСЗННаСервере()

#КонецОбласти

#Область ТП_СтатьяЛьгот

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" таблицы "ТП_СтатьяЛьготы".
//
Процедура ТП_СтатьяЛьготыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Если не выбрана строка в левой колоке или добавление строк копированием.
	Если Элементы.ВидыВыплатОСЗН.ТекущиеДанные = Неопределено Или Копирование Или Элементы.ВидыВыплатОСЗН.ТекущиеДанные.ЛьготнаяКатегорияВБазе.Пустая()Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ТП_СтатьяЛьготыПередНачаломДобавления()

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" таблицы "ТП_СтатьяЛьготы".
//
Процедура ТП_СтатьяЛьготыПередУдалением(Элемент, Отказ)
	
	// При удалении строки удаляем соответствующие записи в РеспубликаТатарстан_ЛьготыВБазе.
	СтатьяЛьготы = РазобратьСтатьюЛьготНаСоставляющие(Элемент.ТекущиеДанные.СтатьяЛьготы);
	
	Отбор = Новый Структура;
	Отбор.Вставить("КодСтатьиЛьготы",          СтатьяЛьготы.Код);
	Отбор.Вставить("НаименованиеСтатьиЛьготы", СтатьяЛьготы.Наименование);
	
	СтрокиУдаления = Объект.РеспубликаТатарстан_ЛьготыВБазе.НайтиСтроки(Отбор);
	
	Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
		Объект.РеспубликаТатарстан_ЛьготыВБазе.Удалить(СтрокаУдаления);
	КонецЦикла;
	
КонецПроцедуры // ТП_СтатьяЛьготыПередУдалением()

&НаКлиенте
// Процедура - обработчик события "ПриНачалеРедактирования" таблицы "ТП_СтатьяЛьготы".
//
Процедура ТП_СтатьяЛьготыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// Запоминаем предыдущее значение перезаписываемой строки.
	Если Не НоваяСтрока Тогда
		ПредыдущаяСтатьяЛьгот = Элемент.ТекущиеДанные.СтатьяЛьготы;
	КонецЕсли;
	
КонецПроцедуры // ТП_СтатьяЛьготыПриНачалеРедактирования()

&НаКлиенте
// Процедура - обработчик события "ПриОкончанииРедактирования" таблицы "ТП_СтатьяЛьготы".
//
Процедура ТП_СтатьяЛьготыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	// Если изменяем выбранное значение, то удаляем предыдущую запись.
	Если Не НоваяСтрока И ЗначениеЗаполнено(ПредыдущаяСтатьяЛьгот) Тогда
		
		СтатьяЛьготы = РазобратьСтатьюЛьготНаСоставляющие(ПредыдущаяСтатьяЛьгот);
		
		Отбор = Новый Структура;
		Отбор.Вставить("КодСтатьиЛьготы",          СтатьяЛьготы.Код);
		Отбор.Вставить("НаименованиеСтатьиЛьготы", СтатьяЛьготы.Наименование);
		
		НайденнаяСтрока = Объект.РеспубликаТатарстан_ЛьготыВБазе.НайтиСтроки(Отбор);
		Объект.РеспубликаТатарстан_ЛьготыВБазе.Удалить(НайденнаяСтрока[0]);
		
	КонецЕсли;
	
КонецПроцедуры // ТП_СтатьяЛьготыПередОкончаниемРедактирования()

&НаКлиенте
// Процедура - обработчик события "ПриОкончанииРедактирования" таблицы "ТП_СтатьяЛьготы".
//
Процедура ТП_СтатьяЛьготыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не Элемент.ТекущиеДанные = Неопределено И Не ОтменаРедактирования Тогда
		
		Если Элемент.ТекущиеДанные.СтатьяЛьготы = "" Или Не ЭтаСтрокаКорректногоФормата(Элемент.ТекущиеДанные.СтатьяЛьготы) Тогда
			// Удаляем пустую или некорректно введенную строку.
			ТП_СтатьяЛьготы.Удалить(ТП_СтатьяЛьготы.Индекс(Элемент.ТекущиеДанные));
		Иначе
			// Добавляем запись в РеспубликаТатарстан_ЛьготыВБазе.
			СтатьяЛьготы = РазобратьСтатьюЛьготНаСоставляющие(Элемент.ТекущиеДанные.СтатьяЛьготы);
			
			ВидВыплатыОСЗН           = Элементы.ВидыВыплатОСЗН.ТекущиеДанные.ВидВыплатыОСЗН;
			ЛьготнаяКатегорияВБазе   = Элементы.ВидыВыплатОСЗН.ТекущиеДанные.ЛьготнаяКатегорияВБазе;
			КодСтатьиЛьготы          = СтатьяЛьготы.Код;
			НаименованиеСтатьиЛьготы = СтатьяЛьготы.Наименование;
			
			НоваяСтрокаСоответствия                          = Объект.РеспубликаТатарстан_ЛьготыВБазе.Добавить();
			НоваяСтрокаСоответствия.ВидВыплатыОСЗН           = ВидВыплатыОСЗН;
			НоваяСтрокаСоответствия.ЛьготнаяКатегорияВБазе   = ЛьготнаяКатегорияВБазе;
			НоваяСтрокаСоответствия.КодСтатьиЛьготы          = КодСтатьиЛьготы;
			НоваяСтрокаСоответствия.НаименованиеСтатьиЛьготы = НаименованиеСтатьиЛьготы;
			
			// Удаляем старую запись при перевыборе.
			Если Не ПредыдущаяСтатьяЛьгот = Элемент.ТекущиеДанные.СтатьяЛьготы Тогда
				
				ПредыдущаяСтатьяЛьгот = РазобратьСтатьюЛьготНаСоставляющие(ПредыдущаяСтатьяЛьгот);
				
				Отбор = Новый Структура;
				Отбор.Вставить("КодСтатьиЛьготы",          ПредыдущаяСтатьяЛьгот.Код);
				Отбор.Вставить("НаименованиеСтатьиЛьготы", ПредыдущаяСтатьяЛьгот.Наименование);
				
				НайденнаяСтрока = Объект.РеспубликаТатарстан_ЛьготыВБазе.НайтиСтроки(Отбор);
				Если НайденнаяСтрока.Количество() = 1 Тогда
					НайденнаяСтрока[0].КодСтатьиЛьготы          = КодСтатьиЛьготы;
					НайденнаяСтрока[0].НаименованиеСтатьиЛьготы = НаименованиеСтатьиЛьготы;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ТП_СтатьяЛьготыПриОкончанииРедактирования()

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля "СтатьяЛьготы" таблицы "ТП_СтатьяЛьготы".
//
Процедура СтатьяЛьготыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Устанавливаем отбор на список выбора.
	СтандартнаяОбработка = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("СтатьяЛьготыПослеВыбораЭлемента", ЭтотОбъект, Элемент.Родитель.ТекущаяСтрока);
	Заголовок  = "Статья начисляемых льгот, сооветствующяя виду выплаты """ + Элементы.ВидыВыплатОСЗН.ТекущиеДанные.ВидВыплатыОСЗН + """";
	
	СписокДоступныхСтатейЛьгот = Новый СписокЗначений;
	СписокДоступныхСтатейЛьгот.ЗагрузитьЗначения(СписокСтатейЛьгот.ВыгрузитьЗначения());
	
	Для Каждого Строка Из Объект.РеспубликаТатарстан_ЛьготыВБазе Цикл
		
		УжеВыбраннаяСтатья = Строка.КодСтатьиЛьготы + РазделительСтатейЛьгот + Строка.НаименованиеСтатьиЛьготы;
		УдаляемаяСтатья = СписокДоступныхСтатейЛьгот.НайтиПоЗначению(УжеВыбраннаяСтатья);
		Если УдаляемаяСтатья <> Неопределено Тогда
			СписокДоступныхСтатейЛьгот.Удалить(УдаляемаяСтатья);
		КонецЕсли;
		
	КонецЦикла;
	
	СписокДоступныхСтатейЛьгот.ПоказатьВыборЭлемента(Оповещение, Заголовок);
	
КонецПроцедуры // СтатьяЛьготыНачалоВыбора()

&НаКлиенте
// Обработчик результата выбора метода "ПоказатьВыборЭлемента".
//
Процедура СтатьяЛьготыПослеВыбораЭлемента(Результат, Идентификатор) Экспорт
	
	Если Результат <> Неопределено Тогда
		
		ТП_СтатьяЛьготы.НайтиПоИдентификатору(Идентификатор).СтатьяЛьготы = Результат;
		
	КонецЕсли;
	
КонецПроцедуры // СтатьяЛьготыПослеВыбораЭлемента()

#КонецОбласти

#Область ТП_СтатьяЛьгот_ВспомогательныеМетоды

&НаСервере
// Загружает статьи начисленных сумм субсидий из справочника.
//
Процедура ЗаполнитьСписокСтатейЛьготНаСервере()
	
	Макет = РеквизитФормыВЗначение("Объект").ПолучитьМакет("РеспубликаТатарстан_Макет");
	
	ОбластьСправочникСтатейНачисленныхСуммСубсидий = Макет.ПолучитьОбласть("СправочникСтатейНачисленныхСуммСубсидий");
	
	Для НомерСтроки = 1 По ОбластьСправочникСтатейНачисленныхСуммСубсидий.ВысотаТаблицы Цикл
		
		НоваяСтрока               = СписокСтатейЛьгот.Добавить();
		НоваяСтрока.Значение      = ОбластьСправочникСтатейНачисленныхСуммСубсидий.Область(НомерСтроки, 1).Текст
								  + РазделительСтатейЛьгот + ОбластьСправочникСтатейНачисленныхСуммСубсидий.Область(НомерСтроки, 2).Текст;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСписокСтатейЛьготНаСервере()

&НаКлиенте
// Производит парсинг строки статьи льгот.
//
// Параметры:
//  СтатьяЛьгот - Строка - строка формата [КодСтатьиЛьгот][РазделительСтатейЛьгот][НаименованиеСтатьиЛьгот].
//
// Возвращаемое значение:
//  Структура - структура из двух значений - код и наименование статьи льгот.
//
Функция РазобратьСтатьюЛьготНаСоставляющие(СтатьяЛьгот)
	
	Структура = Новый Структура("Код, Наименование");
	
	ПозицияРазделителя = Найти(СтатьяЛьгот, РазделительСтатейЛьгот);
	
	Структура.Код          = Лев(СтатьяЛьгот, ПозицияРазделителя - 1);
	Структура.Наименование = Прав(СтатьяЛьгот, СтрДлина(СтатьяЛьгот) - (ПозицияРазделителя - 1) - СтрДлина(РазделительСтатейЛьгот));
	
	Возврат Структура;
	
КонецФункции // РазобратьСтатьюЛьготНаСоставляющие()

&НаКлиенте
// Проверяет корректность формата введенной строки статьи льгот - обязательно [КодСтатьиЛьгот] - число,
// а после него [РазделительСтатейЛьгот]; код статьи должен быть уникальным.
//
// Параметры:
// Параметры:
//  СтатьяЛьгот - Строка - строка формата [КодСтатьиЛьгот][РазделительСтатейЛьгот][НаименованиеСтатьиЛьгот].
//
// Возвращаемое значение:
//  Булево - если строка корректного формата, то истина.
//
Функция ЭтаСтрокаКорректногоФормата(СтатьяЛьгот)
	
	ПозицияРазделителя = Найти(СтатьяЛьгот, РазделительСтатейЛьгот);
	
	Если ПозицияРазделителя <> 0 Тогда
		
		ПодстрокаКод = Лев(СтатьяЛьгот, ПозицияРазделителя - 1);
		
		// Проверка кода статьи.
		Пока СтрДлина(ПодстрокаКод) > 0 Цикл
			
			СимволКода = Лев(ПодстрокаКод, 1);
			Если КодСимвола(СимволКода) > 47 И КодСимвола(СимволКода) < 58 Тогда
				
				ПодстрокаКод = Прав(ПодстрокаКод, СтрДлина(ПодстрокаКод) - 1);
				Продолжить;
				
			Иначе
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Некорректно введена строка. Необходимй формат [Код. Наименование].");
				Возврат Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
		// Уникальность кода статьи.
		Отбор = Новый Структура;
		Отбор.Вставить("КодСтатьиЛьготы", Лев(СтатьяЛьгот, ПозицияРазделителя - 1));
		
		НайденныеСтроки = Объект.РеспубликаТатарстан_ЛьготыВБазе.НайтиСтроки(Отбор);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Введен не уникальный код!");
			Возврат Ложь;
			
		КонецЕсли;
		
		Возврат Истина;
		
	Иначе
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Некорректно введена строка. Необходимй формат [Код. Наименование].");
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции // ЭтаСтрокаКорректногоФормата()

#КонецОбласти








