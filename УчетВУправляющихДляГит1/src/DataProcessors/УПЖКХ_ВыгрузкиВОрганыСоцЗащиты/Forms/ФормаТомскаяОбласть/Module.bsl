
//////////////////////////////////////////////////////////////////////////
// СОХРАНЯЕМЫЕ НАСТРОЙКИ

#Область РаботаСНастройками

&НаСервере
// Процедура восстановления настроек.
Процедура ВосстановитьНастройки()
	
	СтруктураПараметров = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("ТомскаяОбласть_ВыгрузкаВОСЗН", "ПараметрыВыгрузки");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		СтруктураПараметров.Свойство("КаталогЗагрузки", КаталогЗагрузки);
		СтруктураПараметров.Свойство("КаталогВыгрузки", КаталогВыгрузки);
		СтруктураПараметров.Свойство("КодОрганизации",  КодОрганизации);
		
		СтруктураПараметров.Свойство("ЭлектрическийНагреватель", ЭлектрическийНагреватель);
		СтруктураПараметров.Свойство("ГазовыйКотел",             ГазовыйКотел);
		СтруктураПараметров.Свойство("КатегорияБлагоустройства", КатегорияБлагоустройства);
		
		врТаблицаУслугВОСЗН     = Новый ТаблицаЗначений;
		врТаблицаУслугВБазе     = Новый ТаблицаЗначений;
		врТаблицаУслугОтопление = Новый ТаблицаЗначений;
		врТаблицаНасПунктов     = Новый ТаблицаЗначений;
		врТаблицаРайонов        = Новый ТаблицаЗначений;
		врТаблицаУлиц           = Новый ТаблицаЗначений;
		
		СтруктураПараметров.Свойство("ТомскаяОбласть_ЖКУ", врТаблицаУслугВОСЗН);
		Если НЕ врТаблицаУслугВОСЗН = Неопределено Тогда
			Объект.ТомскаяОбласть_ЖКУ.Загрузить(врТаблицаУслугВОСЗН);
		КонецЕсли;
		
		СтруктураПараметров.Свойство("ТомскаяОбласть_ЖКУ_ВБазе", врТаблицаУслугВБазе);
		Если НЕ врТаблицаУслугВБазе = Неопределено Тогда
			Объект.ТомскаяОбласть_ЖКУ_ВБазе.Загрузить(врТаблицаУслугВБазе);
		КонецЕсли;
		
		СтруктураПараметров.Свойство("ТомскаяОбласть_ЖКУ_Отопление", врТаблицаУслугОтопление);
		Если НЕ врТаблицаУслугОтопление = Неопределено Тогда
			Объект.ТомскаяОбласть_ЖКУ_Отопление.Загрузить(врТаблицаУслугОтопление);
		КонецЕсли;
		
		СтруктураПараметров.Свойство("ТомскаяОбласть_НаселенныеПункты", врТаблицаНасПунктов);
		Если НЕ врТаблицаНасПунктов = Неопределено Тогда
			Объект.ТомскаяОбласть_НаселенныеПункты.Загрузить(врТаблицаНасПунктов);
		КонецЕсли;
		
		СтруктураПараметров.Свойство("ТомскаяОбласть_Районы", врТаблицаРайонов);
		Если НЕ врТаблицаРайонов = Неопределено Тогда
			Объект.ТомскаяОбласть_Районы.Загрузить(врТаблицаРайонов);
		КонецЕсли;
		
		СтруктураПараметров.Свойство("ТомскаяОбласть_Улицы", врТаблицаУлиц);
		Если НЕ врТаблицаУлиц = Неопределено Тогда
			Объект.ТомскаяОбласть_Улицы.Загрузить(врТаблицаУлиц);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура сохранения настроек.
Процедура СохранитьНастройки()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КаталогЗагрузки",                 КаталогЗагрузки);
	СтруктураПараметров.Вставить("КаталогВыгрузки",                 КаталогВыгрузки);
	СтруктураПараметров.Вставить("КодОрганизации",                  КодОрганизации);
	СтруктураПараметров.Вставить("ТомскаяОбласть_ЖКУ",              Объект.ТомскаяОбласть_ЖКУ.Выгрузить());
	СтруктураПараметров.Вставить("ТомскаяОбласть_ЖКУ_ВБазе",        Объект.ТомскаяОбласть_ЖКУ_ВБазе.Выгрузить());
	СтруктураПараметров.Вставить("ТомскаяОбласть_ЖКУ_Отопление",    Объект.ТомскаяОбласть_ЖКУ_Отопление.Выгрузить());
	СтруктураПараметров.Вставить("ТомскаяОбласть_НаселенныеПункты", Объект.ТомскаяОбласть_НаселенныеПункты.Выгрузить());
	СтруктураПараметров.Вставить("ТомскаяОбласть_Районы",           Объект.ТомскаяОбласть_Районы.Выгрузить());
	СтруктураПараметров.Вставить("ТомскаяОбласть_Улицы",            Объект.ТомскаяОбласть_Улицы.Выгрузить());
	
	СтруктураПараметров.Вставить("ЭлектрическийНагреватель", ЭлектрическийНагреватель);
	СтруктураПараметров.Вставить("ГазовыйКотел",             ГазовыйКотел);
	СтруктураПараметров.Вставить("КатегорияБлагоустройства", КатегорияБлагоустройства);
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("ТомскаяОбласть_ВыгрузкаВОСЗН", "ПараметрыВыгрузки", СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// РАБОТА С ВРЕМЕННЫМ ХРАНИЛИЩЕМ

#Область РаботаСВременнымХранилищем

&НаСервере
// Помещает настройки во временное хранилище.
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("КаталогЗагрузки",                 КаталогЗагрузки);
	СтруктураНастроек.Вставить("ТомскаяОбласть_ЖКУ",              Объект.ТомскаяОбласть_ЖКУ.Выгрузить());
	СтруктураНастроек.Вставить("ТомскаяОбласть_ЖКУ_ВБазе",        Объект.ТомскаяОбласть_ЖКУ_ВБазе.Выгрузить());
	СтруктураНастроек.Вставить("ТомскаяОбласть_ЖКУ_Отопление",    Объект.ТомскаяОбласть_ЖКУ_Отопление.Выгрузить());
	СтруктураНастроек.Вставить("ТомскаяОбласть_НаселенныеПункты", Объект.ТомскаяОбласть_НаселенныеПункты.Выгрузить());
	СтруктураНастроек.Вставить("ТомскаяОбласть_Районы",           Объект.ТомскаяОбласть_Районы.Выгрузить());
	СтруктураНастроек.Вставить("ТомскаяОбласть_Улицы",            Объект.ТомскаяОбласть_Улицы.Выгрузить());
	
	СтруктураНастроек.Вставить("ЭлектрическийНагреватель", ЭлектрическийНагреватель);
	СтруктураНастроек.Вставить("ГазовыйКотел",             ГазовыйКотел);
	СтруктураНастроек.Вставить("КатегорияБлагоустройства", КатегорияБлагоустройства);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
// Получает настройки из временного хранилища.
Функция ПолучитьНастройкиИзХранилища(АдресНастроекВХранилище)
	
	СтруктураНастроек = ПолучитьИзВременногоХранилища(АдресНастроекВХранилище);
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		
		Если СтруктураНастроек.Свойство("КаталогЗагрузки") Тогда
			КаталогЗагрузки = СтруктураНастроек.КаталогЗагрузки;
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ТомскаяОбласть_ЖКУ") Тогда
			Объект.ТомскаяОбласть_ЖКУ.Загрузить(СтруктураНастроек.ТомскаяОбласть_ЖКУ);
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ТомскаяОбласть_ЖКУ_ВБазе") Тогда
			Объект.ТомскаяОбласть_ЖКУ_ВБазе.Загрузить(СтруктураНастроек.ТомскаяОбласть_ЖКУ_ВБазе);
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ТомскаяОбласть_ЖКУ_Отопление") Тогда
			Объект.ТомскаяОбласть_ЖКУ_Отопление.Загрузить(СтруктураНастроек.ТомскаяОбласть_ЖКУ_Отопление);
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ТомскаяОбласть_НаселенныеПункты") Тогда
			Объект.ТомскаяОбласть_НаселенныеПункты.Загрузить(СтруктураНастроек.ТомскаяОбласть_НаселенныеПункты);
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ТомскаяОбласть_Районы") Тогда
			Объект.ТомскаяОбласть_Районы.Загрузить(СтруктураНастроек.ТомскаяОбласть_Районы);
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ТомскаяОбласть_Улицы") Тогда
			Объект.ТомскаяОбласть_Улицы.Загрузить(СтруктураНастроек.ТомскаяОбласть_Улицы);
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ЭлектрическийНагреватель") Тогда
			ЭлектрическийНагреватель = СтруктураНастроек.ЭлектрическийНагреватель;
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ГазовыйКотел") Тогда
			ГазовыйКотел = СтруктураНастроек.ГазовыйКотел;
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("КатегорияБлагоустройства") Тогда
			КатегорияБлагоустройства = СтруктураНастроек.КатегорияБлагоустройства;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ДАННЫХ

#Область ЗаполнениеДанных

&НаКлиенте
// Проверяет наличие всех необходимых данных для заполнения таблиц выгрузки.
//
Функция ПроверкаУсловийДляЗаполненияТаблиц()
	
	ТекстОшибки = "";
	
	Если НЕ ЗначениеЗаполнено(Объект.Период) Тогда
		ТекстОшибки = ТекстОшибки + "Не указан период выгрузки!";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не указана организация!", "Не указан организация!");
	КонецЕсли;
	
	Если РасширениеПодключено И ПустаяСтрока(КаталогВыгрузки) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не указан каталог выгрузки!", "Не указан каталог выгрузки!");
	КонецЕсли;
	
	Если ПустаяСтрока(КодОрганизации) Тогда
		ТекстОшибки = ТекстОшибки + "Не указан код организации!";
	КонецЕсли;
	
	Если Объект.ТомскаяОбласть_ЖКУ_ВБазе.Количество() = 0 Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не заполнена таблица соответствия услуг!", "Не заполнена таблица соответствия услуг!");
	КонецЕсли;
	
	Если Объект.ТомскаяОбласть_НаселенныеПункты.Количество() = 0 Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не заполнена таблица населенных пунктов!", "Не заполнена таблица населенных пунктов!");
	КонецЕсли;
	
	Если Объект.ТомскаяОбласть_Районы.Количество() = 0 Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не заполнена таблица районов!", "Не заполнена таблица районов!");
	КонецЕсли;
	
	Если Объект.ТомскаяОбласть_Улицы.Количество() = 0 Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не заполнена таблица улиц!", "Не заполнена таблица улиц!");
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции // ПроверкаУсловийДляЗаполненияТаблиц

&НаСервере
// Процедура заполнения всех данных.
Процедура ЗаполнитьНаСервере()
	
	ТаблицаДанныхФайла = Объект.ТомскаяОбласть_ТаблицаНачислений.Выгрузить();
	
	ПараметрыВыгрузки = Новый Структура;
	ПараметрыВыгрузки.Вставить("ГазовыйКотел",             ГазовыйКотел);
	ПараметрыВыгрузки.Вставить("ЭлектрическийНагреватель", ЭлектрическийНагреватель);
	ПараметрыВыгрузки.Вставить("КодОрганизации",           КодОрганизации);
	ПараметрыВыгрузки.Вставить("КатегорияБлагоустройства", КатегорияБлагоустройства);
	
	ОбработкаОбъект = ДанныеФормыВЗначение(Объект, Тип("ОбработкаОбъект.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты"));
	ОбработкаОбъект.СформироватьТаблицуДанныхТомскаяОбласть(ТаблицаДанныхФайла, ПараметрыВыгрузки);
	ЗначениеВДанныеФормы(ОбработкаОбъект, Объект);
	
	Объект.ТомскаяОбласть_ТаблицаНачислений.Загрузить(ТаблицаДанныхФайла);
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ВЫГРУЗКА ФАЙЛОВ

#Область ВыгрузкаФайлов

&НаСервере
// Формирует dbf-файл, заполняя данными из табличной части "ТомскаяОбласть_ТаблицаНачислений".
//
Процедура ВыгрузитьДанныеВФайлТомскаяОбластьНаСервере(МассивВыгружаемыхФайлов, ИмяФайла, ИмяКаталога)
	
	// Подготовка выгружаемого файла происходит на сервере в виде временного файла.
	// Сформированный временный файл передается на клиент и выгружается в выбранный пользователем каталог.
	
	// Формирование полного имени выгружаемого файла на клиенте.
	КаталогНаКлиенте        = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяКаталога);
	ПолноеИмяФайлаНаКлиенте = КаталогНаКлиенте + ИмяФайла;
	
	// Формирование полного имени временного файла формируемого на сервере.
	КаталогНаСервере        = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогВременныхФайлов());
	ПолноеИмяФайлаНаСервере = КаталогНаСервере + ИмяФайла;
	
	ФайлВыгрузки           = Новый XBase;
	ФайлВыгрузки.Кодировка = КодировкаXBase.OEM;
	ФайлВыгрузки.Поля.Добавить("type_zap",  "N", 1);
	ФайлВыгрузки.Поля.Добавить("date_form", "D", 8);
	ФайлВыгрузки.Поля.Добавить("ls",        "S", 15);
	ФайлВыгрузки.Поля.Добавить("kod_o",     "N", 6);
	ФайлВыгрузки.Поля.Добавить("kod_zeu",   "N", 6);
	ФайлВыгрузки.Поля.Добавить("kod_r",     "N", 3);
	ФайлВыгрузки.Поля.Добавить("kod_pr",    "N", 3);
	ФайлВыгрузки.Поля.Добавить("kod_np",    "N", 3);
	ФайлВыгрузки.Поля.Добавить("st",        "N", 4);
	ФайлВыгрузки.Поля.Добавить("dom",       "N", 6);
	
	ФайлВыгрузки.Поля.Добавить("doml",      "S", 5);
	ФайлВыгрузки.Поля.Добавить("domkor",    "S", 5);
	ФайлВыгрузки.Поля.Добавить("domstr",    "S", 5);
	ФайлВыгрузки.Поля.Добавить("koddom",    "S", 40);
	ФайлВыгрузки.Поля.Добавить("kv",        "N", 4);
	ФайлВыгрузки.Поля.Добавить("kvl",       "S", 1);
	ФайлВыгрузки.Поля.Добавить("fm",        "S", 20);
	ФайлВыгрузки.Поля.Добавить("im",        "S", 20);
	ФайлВыгрузки.Поля.Добавить("ot",        "S", 20);
	ФайлВыгрузки.Поля.Добавить("dtr",       "D", 8);
	ФайлВыгрузки.Поля.Добавить("kodl",      "N", 3);
	ФайлВыгрузки.Поля.Добавить("doc1",      "S", 40);
	ФайлВыгрузки.Поля.Добавить("doc2",      "S", 40);
	
	ФайлВыгрузки.Поля.Добавить("date_beg",  "D", 8);
	ФайлВыгрузки.Поля.Добавить("date_end",  "D", 8);
	ФайлВыгрузки.Поля.Добавить("Tip_z",     "N", 3);
	ФайлВыгрузки.Поля.Добавить("urblag",    "N", 3);
	ФайлВыгрузки.Поля.Добавить("Tip_dom",   "N", 2);
	ФайлВыгрузки.Поля.Добавить("etag_dom",  "N", 2);
	ФайлВыгрузки.Поля.Добавить("lift",      "L", 1);
	ФайлВыгрузки.Поля.Добавить("so",        "N", 9, 3);
	ФайлВыгрузки.Поля.Добавить("ssn",       "N", 9, 3);
	ФайлВыгрузки.Поля.Добавить("el_nagr",   "L", 1);
	
	ФайлВыгрузки.Поля.Добавить("kol_kom",   "N", 2);
	ФайлВыгрузки.Поля.Добавить("kol",       "N", 2);
	ФайлВыгрузки.Поля.Добавить("koll",      "N", 2);
	ФайлВыгрузки.Поля.Добавить("plita",     "N", 2);
	ФайлВыгрузки.Поля.Добавить("gaz_nagr",  "L", 1);
	ФайлВыгрузки.Поля.Добавить("gaz_kotel", "L", 1);
	ФайлВыгрузки.Поля.Добавить("usluga",    "N", 3);
	ФайлВыгрузки.Поля.Добавить("kod_p",     "N", 6);
	ФайлВыгрузки.Поля.Добавить("pruch_ob",  "L", 1);
	ФайлВыгрузки.Поля.Добавить("pruch_ind", "L", 1);
	
	ФайлВыгрузки.Поля.Добавить("dolgmes",   "N", 3);
	ФайлВыгрузки.Поля.Добавить("dolgsum",   "N", 9, 2);
	ФайлВыгрузки.Поля.Добавить("dolgs",     "N", 1);
	ФайлВыгрузки.Поля.Добавить("stoeu_nd",  "N", 9, 3);
	ФайлВыгрузки.Поля.Добавить("stoeu_nf",  "N", 9, 3);
	ФайлВыгрузки.Поля.Добавить("tarif",     "N", 9, 3);
	ФайлВыгрузки.Поля.Добавить("kodei",     "N", 2);
	ФайлВыгрузки.Поля.Добавить("norm",      "N", 11, 6);
	ФайлВыгрузки.Поля.Добавить("norm_otop", "N", 11, 6);
	ФайлВыгрузки.Поля.Добавить("fact",      "N", 12, 4);
	
	ФайлВыгрузки.Поля.Добавить("sumvf",     "N", 9, 2);
	ФайлВыгрузки.Поля.Добавить("sump",      "N", 9, 2);
	ФайлВыгрузки.Поля.Добавить("sumn",      "N", 9, 2);
	ФайлВыгрузки.Поля.Добавить("suml",      "N", 9, 2);
	ФайлВыгрузки.Поля.Добавить("sumns",     "N", 9, 2);
	
	ФайлВыгрузки.СоздатьФайл(ПолноеИмяФайлаНаСервере);
	ФайлВыгрузки.АвтоСохранение = Истина;
	
	Для каждого ТекСтрока Из Объект.ТомскаяОбласть_ТаблицаНачислений Цикл
		ФайлВыгрузки.Добавить();
		ЗаполнитьЗначенияСвойств(ФайлВыгрузки, ТекСтрока);
	КонецЦикла;
	
	ФайлВыгрузки.ЗакрытьФайл();
	
	СоответствиеИменФайловИАдресов = Новый Соответствие;
	СоответствиеИменФайловИАдресов.Вставить(ПолноеИмяФайлаНаКлиенте, ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПолноеИмяФайлаНаСервере), Новый УникальныйИдентификатор));
	
	МассивВыгружаемыхФайлов = УПЖКХ_РаботаСФайламиСервер.ПолучитьМассивПередаваемыхФайлов(СоответствиеИменФайловИАдресов);
	
КонецПроцедуры // ВыгрузитьДанныеВФайлТомскаяОбластьНаСервере()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	ТекРабДата = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	Объект.Период = ТекРабДата;
	
	ВосстановитьНастройки();
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиенте();
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "КомандаНастройка".
Процедура КомандаНастройка(Команда)
	
	АдресНастроекВХранилище = ПоместитьНастройкиВХранилище();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаНастройкаЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты.Форма.ТомскаяОбласть_ФормаНастройки", Новый Структура("АдресНастроекВХранилище", АдресНастроекВХранилище), , , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата опроса команды "КомандаНастройка".
Процедура КомандаНастройкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		ПолучитьНастройкиИзХранилища(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаЗаполнить".
Процедура КомандаЗаполнить(Команда)
	
	ТекстОшибки = ПроверкаУсловийДляЗаполненияТаблиц();
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если Объект.ТомскаяОбласть_ТаблицаНачислений.Количество() > 0 Тогда
		Оповещение   = Новый ОписаниеОповещения("КомандаЗаполнитьЗавершение", ЭтотОбъект);
		ТекстВопроса = "Перед заполением таблица выгрузки будет очищена. Заполнить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Началось заполнение таблицы выгрузки!");
		ЗаполнитьНаСервере();
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Заполнение таблицы выгрузки завершено!");
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнить()

&НаКлиенте
// Обработчик результата опроса команды "КомандаЗаполнитьВсе".
Процедура КомандаЗаполнитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Началось заполнение таблицы выгрузки!");
		ЗаполнитьНаСервере();
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Заполнение таблицы выгрузки завершено!");
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьВсеЗавершение()

&НаКлиенте
// Обработчик команды "КомандаВыгрузить".
Процедура КомандаВыгрузить(Команда)
	
	Если РасширениеПодключено И ПустаяСтрока(КаталогВыгрузки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указан каталог выгрузки!");
		Возврат;
	КонецЕсли;
	
	Если Объект.ТомскаяОбласть_ТаблицаНачислений.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В таблице выгружаемых данных отсутствуют данные для выгрузки в dbf-файл.");
		Возврат;
	КонецЕсли;
	
	ИмяФайла    = "gcusl.dbf";
	ИмяКаталога = КаталогВыгрузки;
	
	ОбработчикЗавершения = Новый ОписаниеОповещения("ОбработатьПослеВыгрузки", УПЖКХ_РаботаСФайламиКлиент, Новый Структура);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИмяФайла",             ИмяФайла);
	ДополнительныеПараметры.Вставить("ИмяКаталога",          ИмяКаталога);
	ДополнительныеПараметры.Вставить("ОбработчикЗавершения", ОбработчикЗавершения);
	
	Если РасширениеПодключено Тогда
		
		// Проверяем каталог выгрузки на существование.
		
		КаталогВыгрузкиФайл = Новый Файл(КаталогВыгрузки);
		
		ДополнительныеПараметры.Вставить("КаталогВыгрузкиФайл", КаталогВыгрузкиФайл);
		
		КаталогВыгрузкиФайл.НачатьПроверкуСуществования(Новый ОписаниеОповещения("КаталогВыгрузкиСуществуетЗавершение", ЭтотОбъект, ДополнительныеПараметры));
		
		Возврат;
		
	Иначе
		
		ИмяКаталога = "";
		
		МассивВыгружаемыхФайлов = Новый Массив;
		
		ВыгрузитьДанныеВФайлТомскаяОбластьНаСервере(МассивВыгружаемыхФайлов, ИмяФайла, ИмяКаталога);
		
		УПЖКХ_РаботаСФайламиКлиент.ВыгрузитьВФайл(РасширениеПодключено, МассивВыгружаемыхФайлов, ОбработчикЗавершения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик завершения работы процедуры "НачатьПроверкуСуществования".
//
Процедура КаталогВыгрузкиСуществуетЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	КаталогВыгрузкиФайл = ДополнительныеПараметры.КаталогВыгрузкиФайл;
	
	Если Не Существует Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран каталог файла выгрузки!");
		Возврат;
	КонецЕсли;
	
	КаталогВыгрузкиФайл.НачатьПроверкуЭтоКаталог(Новый ОписаниеОповещения("КаталогВыгрузкиЭтоКаталогЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик результата работы процедуры "НачатьПроверкуЭтоКаталог".
//
Процедура КаталогВыгрузкиЭтоКаталогЗавершение(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Если Не ЭтоКаталог Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран каталог файла выгрузки!");
		Возврат;
	КонецЕсли;
	
	МассивВыгружаемыхФайлов = Новый Массив;
	
	ВыгрузитьДанныеВФайлТомскаяОбластьНаСервере(МассивВыгружаемыхФайлов, ДополнительныеПараметры.ИмяФайла, ДополнительныеПараметры.ИмяКаталога);
	
	УПЖКХ_РаботаСФайламиКлиент.ВыгрузитьВФайл(РасширениеПодключено, МассивВыгружаемыхФайлов, ДополнительныеПараметры.ОбработчикЗавершения);
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

////////////////////////
// Диалог выбора файла

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Имя каталога".
//
Процедура ИмяКаталогаЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_РаботаСФайламиКлиент.ВыбратьКаталог(ЭтаФорма, "Выбор каталога выгрузки", КаталогВыгрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяКаталогаЗагрузкиНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если НЕ ВыбранныеФайлы = Неопределено Тогда
		КаталогВыгрузки = ДиалогВыбораФайла.Каталог;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Имя каталога".
//
Процедура ИмяКаталогаЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УПЖКХ_РаботаСФайламиКлиент.ОткрытиеФайлаКаталога(КаталогВыгрузки, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяКаталогаЗагрузкиОткрытиеЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

////////////////////////
// Период

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПериодСтрокой".
Процедура ПериодСтрокойПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Модифицированность);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ПериодСтрокой".
Процедура ПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Регулирование" поля "ПериодСтрокой".
Процедура ПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Направление,
														Модифицированность);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "ПериодСтрокой".
Процедура ПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "ПериодСтрокой".
Процедура ПериодСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Процедура обработчик результата работы процедуры "ДиалогВыбораФайла.Показать".
//
Процедура ВыбратьКаталогЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		КаталогВыгрузки = ДиалогВыбораФайла.Каталог;
	КонецЕсли;
	
КонецПроцедуры // КаталогВыгрузкиНачалоВыбора()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФорм

&НаКлиентеНаСервереБезКонтекста
// Процедура управляет внешним видом формы.
//
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.КаталогВыгрузки.Видимость = Форма.РасширениеПодключено;
	
КонецПроцедуры // УправлениеФормой()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ФАЙЛАМИ

#Область СлужебныеПроцедурыРаботыСФайлами

&НаКлиенте
// Определяет подключено ли расширение для работы с файлами.
Процедура ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиенте()
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиентеЗавершение", ЭтотОбъект);
	
	УПЖКХ_РаботаСФайламиКлиент.ОпределитьВидВзаимодействияСФайловойСистемой(ОповещениеЗавершения);
	
КонецПроцедуры // ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиентеЗавершение()

&НаКлиенте
// Обработчик процедуры определяющей подключено расширение работы с файлами или нет.
Процедура ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиентеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		РасширениеПодключено = Результат;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти
