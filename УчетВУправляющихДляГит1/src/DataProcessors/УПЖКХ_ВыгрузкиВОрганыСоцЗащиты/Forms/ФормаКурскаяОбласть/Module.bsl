#Область ОбработчикиСобытийФормы

// Процедура-обработчик события "ПриОткрытии" формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьПериод();
	
	Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	
	ВосстановитьНастройкиНаСервере();
	
КонецПроцедуры // ПриОткрытии()

// Процедура-обработчик события "ПриЗакрытии" формы.
//
&НаКлиенте
Процедура ПриЗакрытии()
	
	СохранитьНастройкиНаСервере();
	
КонецПроцедуры // ПриЗакрытии()

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

// Обработчик события "Нажатие" кнопки "Настройка".
//
&НаКлиенте
Процедура КомандаНастройка(Команда)
	
	АдресНастроекВХранилище = ПоместитьНастройкиВХранилище();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаНастройкаЗавершение", ЭтаФорма);
	
	ОткрытьФорму("Обработка.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты.Форма.КурскаяОбласть_ФормаНастройки", Новый Структура("АдресНастроекВХранилище", АдресНастроекВХранилище), ЭтаФорма, , , , ОписаниеОповещения);
	
КонецПроцедуры // КомандаНастройка()

// Обработчик результата опроса команды "КомандаНастройка".
//
&НаКлиенте
Процедура КомандаНастройкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		ПолучитьНастройкиИзХранилища(Результат);
	КонецЕсли;
	
КонецПроцедуры // КомандаНастройкаЗавершение()

// Процедура - обработчик события "Нажатие" кнопки "Загрузить из файла".
//
&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	Если Объект.ИмяФайлаЗагрузки = "" Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не выбран файл загрузки! Загрузка данные прервана!");
		Возврат;
	КонецЕсли;
	
	Если КурскаяОбласть_ТаблицаВыгрузки.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("КомандаЗагрузитьИзФайлаВопрос", ЭтотОбъект);
		
		ТекстВопроса = "Перед загрузкой табличная часть будет очищена. Продолжить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		КомандаЗагрузитьИзФайлаПродолжение();
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьИзФайла()

// Обработчик результата опроса команды "ЗагрузитьИзФайла".
//
&НаКлиенте
Процедура КомандаЗагрузитьИзФайлаВопрос(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		КурскаяОбласть_ТаблицаВыгрузки.Очистить();
		
		ТаблицаКодовУслугИзФайл.Очистить();
		
		КомандаЗагрузитьИзФайлаПродолжение();
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьВопрос()

// Обработчик результата продолжения опроса команды "ЗагрузитьИзФайла".
//
&НаКлиенте
Процедура КомандаЗагрузитьИзФайлаПродолжение()
	
	// Помещаем загружаемый файл во временное хранилище.
	Оповещение = Новый ОписаниеОповещения("ОбработатьВыборФайла", ЭтотОбъект);
	НачатьПомещениеФайла(Оповещение, , Объект["ИмяФайлаЗагрузки"], Ложь, УникальныйИдентификатор);
	
КонецПроцедуры // КомандаЗаполнитьПродолжение()

// Обработчик события "Нажатие" кнопки "Заполнить".
//
&НаКлиенте
Процедура КомандаЗаполнить(Команда)
	
	Если ЕстьОшибкиЗаполненияПолейФормы() Тогда
		Возврат;
	КонецЕсли;
	
	Если КурскаяОбласть_ТаблицаВыгрузки.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Для поиска данных о начислениях и оплатах табличная часть должна быть заполнена!");
	Иначе
		ОтборНеидентифицированныхЛС = Новый Структура("ЛицевойСчет");
		ОтборНеидентифицированныхЛС.ЛицевойСчет = ПредопределенноеЗначение("Справочник.КВП_ЛицевыеСчета.ПустаяСсылка");
		
		НеидентифицированныеЛС = КурскаяОбласть_ТаблицаВыгрузки.НайтиСтроки(ОтборНеидентифицированныхЛС);
		Если НеидентифицированныеЛС.Количество() = КурскаяОбласть_ТаблицаВыгрузки.Количество() Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Во всех загруженных строках табличной части жильцы не идентифицированы в базе! Данные о начислениях и оплатах не будут заполнены!");
		Иначе
			ЗаполнитьСведенияОНачисленияхИОплатахНаСервере();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнить()

// Обработчик события "Нажатие" кнопки "Выгрузить".
//
&НаКлиенте
Процедура КомандаВыгрузить(Команда)
	
	Если КурскаяОбласть_ТаблицаВыгрузки.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Перед выгрузкой табличная часть должна быть заполнена данными о начислениях и оплатах!");
		Возврат;
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
		
		DBFФайлВыгрузки = Новый XBase;
		DBFФайлВыгрузки.Кодировка = КодировкаXBase.OEM;
		
		КолонкиDBF = ПолучитьКолонкиDBF();
		
		Для Каждого Колонка Из КолонкиDBF Цикл
			
			Если Колонка.Тип = "S" Тогда
				
				DBFФайлВыгрузки.Поля.Добавить(Колонка.Имя, Колонка.Тип, Колонка.Длина);
				
			ИначеЕсли Колонка.Тип = "N" Тогда
				
				DBFФайлВыгрузки.Поля.Добавить(Колонка.Имя, Колонка.Тип, Колонка.РазрядностьЦелойЧасти, Колонка.РазрядностьДробнойЧасти);
				
			ИначеЕсли Колонка.Тип = "D" Тогда
				
				DBFФайлВыгрузки.Поля.Добавить(Колонка.Имя, Колонка.Тип, Колонка.ЧастиДаты);
				
			КонецЕсли;
			
		КонецЦикла;
		
		КороткоеИмяВременногоФайла = ПолучитьИмяВременногоDBFФайла();
		
		DBFФайлВыгрузки.СоздатьФайл(КороткоеИмяВременногоФайла);
		DBFФайлВыгрузки.АвтоСохранение = Истина;
		
		// Запись данных из табличной части в файл выгрузки.
		Для Каждого Строка Из КурскаяОбласть_ТаблицаВыгрузки Цикл
			
			DBFФайлВыгрузки.Добавить();
			
			ЗаполнитьЗначенияСвойств(DBFФайлВыгрузки, Строка);
			
			DBFФайлВыгрузки.Записать();
			
		КонецЦикла;
		
		DBFФайлВыгрузки.ЗакрытьФайл();
		
		// Сохраняем резервную копию исходного файла выгрузки.
		Файл = Новый Файл(Объект.ИмяФайлаЗагрузки);
		ИмяБэкапФайла = СтрЗаменить(Файл.ПолноеИмя, Файл.ИмяБезРасширения, Файл.ИмяБезРасширения + "_Исходный");
		
		ОписаниеОповещения = Новый ОписаниеОповещения("КомандаВыгрузитьЗавершение", ЭтотОбъект,
													  Новый Структура("КороткоеИмяВременногоФайла", КороткоеИмяВременногоФайла));
		НачатьКопированиеФайла(ОписаниеОповещения, Объект.ИмяФайлаЗагрузки, ИмяБэкапФайла);
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата команды "Выгрузить".
Процедура КомандаВыгрузитьЗавершение(СкопированныйФайл, ДополнительныеПараметры) Экспорт
	
	КороткоеИмяВременногоФайла = ДополнительныеПараметры.КороткоеИмяВременногоФайла;
	
	// Подменяем исходный файл выгрузки на заполненный.
	НачатьКопированиеФайла(Новый ОписаниеОповещения("КомандаВыгрузитьЗавершениеЗавершение", ЭтотОбъект), КороткоеИмяВременногоФайла, Объект.ИмяФайлаЗагрузки);
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата обработчика оповещения "КомандаВыгрузитьЗавершение".
Процедура КомандаВыгрузитьЗавершениеЗавершение(СкопированныйФайл, ДополнительныеПараметры) Экспорт
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Выгрузка в файл """ + Объект.ИмяФайлаЗагрузки + """ завершена!");
	
КонецПроцедуры

// Обработчик события "НачалоВыбора" поля ввода "ИмяКаталогаЗагрузки".
//
&НаКлиенте
Процедура ИмяКаталогаЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла                    = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок          = "Выберите файл, в который будут выгружены данные из базы";
	ДиалогВыбораФайла.Каталог            = Объект.ИмяФайлаВыгрузки;
	ДиалогВыбораФайла.ПолноеИмяФайла     = "";
	ДиалогВыбораФайла.Фильтр             = "XBase, dBase III (*.dbf)|*.dbf"; 
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ИмяКаталогаЗагрузкиНачалоВыбораЗавершение", ЭтотОбъект));
	
КонецПроцедуры

// Обработчик результата обработчика события "НачалоВыбора" элемента формы "ИмяКаталогаЗагрузки".
&НаКлиенте
Процедура ИмяКаталогаЗагрузкиНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		ПроверитьУказанныйDBFФайл(ВыбранныеФайлы[0]);
	КонецЕсли;
	
КонецПроцедуры // ИмяКаталогаЗагрузкиНачалоВыбора()

// Обработчик события "Открытие" поля ввода "ИмяКаталогаЗагрузки".
//
&НаКлиенте
Процедура ИмяКаталогаЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	Файл = Новый Файл(Объект.ИмяФайлаВыгрузки);
	Файл.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ИмяКаталогаЗагрузкиОткрытиеФайлСуществует", ЭтотОбъект));
	
КонецПроцедуры

// Обработчик результата обработчика события "Открытие" элемента формы "ИмяКаталогаЗагрузки".
&НаКлиенте
Процедура ИмяКаталогаЗагрузкиОткрытиеФайлСуществует(Существует, ДополнительныеПараметры) Экспорт
	
	Если Существует Тогда
		НачатьЗапускПриложения(Новый ОписаниеОповещения("ИмяКаталогаЗагрузкиОткрытиеЗапускПриложения", ЭтотОбъект), Объект.ИмяФайлаВыгрузки);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик результата обработчика оповещения "ИмяКаталогаЗагрузкиОткрытиеФайлСуществует".
&НаКлиенте
Процедура ИмяКаталогаЗагрузкиОткрытиеЗапускПриложения(КодВозврата, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры // ИмяКаталогаЗагрузкиОткрытие

// Обработчик события "ОкончаниеВводаТекста" поля ввода "ИмяКаталогаЗагрузки".
//
&НаКлиенте
Процедура ИмяКаталогаЗагрузкиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	// Проверяем ручной ввод текста.
	СтандартнаяОбработка = Ложь;
	ПроверитьУказанныйDBFФайл(Текст);
	
КонецПроцедуры // ИмяКаталогаЗагрузкиОкончаниеВводаТекста()

#Область ПериодСтрокой

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПериодСтрокой".
Процедура ПериодСтрокойПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Модифицированность);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ПериодСтрокой".
Процедура ПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Регулирование" поля "ПериодСтрокой".
Процедура ПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Направление,
														Модифицированность);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "ПериодСтрокой".
Процедура ПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "ПериодСтрокой".
Процедура ПериодСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ВспомогательныеПроцедурыИФункции

&НаКлиенте
// Обработчик результата помещения файла во временное хранилище.
//
Процедура ОбработатьВыборФайла(Результат, АдресФайлаВХранилище, ВыбранноеИмяФайла, Режим) Экспорт
	
	Если Результат Тогда
		// Загружаем данные из dbf на сервере.
		ЗагрузитьИзФайлаНаСервере(АдресФайлаВХранилище);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВыборФайла()

&НаСервере
// Загружает копию dbf-файла в текущую таблицу.
// Параметры:
//  АдресФайлаВХранилище - Строка - адрес текущего файла во временном хранилище.
//  Режим                - Строка - наименование режима работы текущего загружаемого файла: "Загрузки" или "Выгрузки".
//
Процедура ЗагрузитьИзФайлаНаСервере(АдресФайлаВХранилище)
	
	// Получаем dbf из временного хранилища.
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВХранилище);
	
	// Для чтения *.dbf файла в кодировке DOS (OEM), урежем имя временного файла.
	КороткоеИмяВременногоФайла = ПолучитьИмяВременногоDBFФайла();
	
	// Записываем dbf в файл с указанным именем.
	ДвоичныеДанные.Записать(КороткоеИмяВременногоФайла);
	
	// Производим чтение dbf файла.
	DBFФайл = Новый XBase;
	
	Если Объект.КодировкаDBF Тогда
		DBFФайл.Кодировка = КодировкаXBase.OEM;
	Иначе
		DBFФайл.Кодировка = КодировкаXBase.ANSI;
	КонецЕсли;
	
	DBFФайл.ОткрытьФайл(КороткоеИмяВременногоФайла, , Истина);
	
	// Проверяем файл загрузки на существование. Добавляем поля таблицы выгрузки.
	Если DBFФайл.Открыта() Тогда
		
		// Подготовить таблицу значений с кодами услуги и количеством полей по каждой из них из файла загрузки.
		ПодготовитьСписокСКодамиУслугИзФайла(DBFФайл.Поля);
		
		ДобавитьРеквизитыВТаблицуЗагрузкиНаСервере(DBFФайл);
		
	Иначе
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не удалось прочитать указанный файл!");
		DBFФайл.ЗакрытьФайл();
		Возврат;
		
	КонецЕсли;
	
	ТаблицаДляЗагрузки = РеквизитФормыВЗначение("КурскаяОбласть_ТаблицаВыгрузки");
	
	// Заполнение полей ТаблицаДанныхИзФайла согласно DBF-файлу.
	Сч = 1;
	Пока Не DBFФайл.ВКонце() Цикл
		
		НоваяЗапись = ТаблицаДляЗагрузки.Добавить();
		
		Для Каждого Колонка Из ТаблицаДляЗагрузки.Колонки Цикл
			
			Если Колонка.Имя = "НомерКвартиры" ИЛИ Колонка.Имя = "ЛицевойСчет" ИЛИ Колонка.Имя = "Жилец" 
				ИЛИ Колонка.Имя = "НаселенныйПункт" ИЛИ Колонка.Имя = "Улица" Тогда
				Продолжить;
			КонецЕсли;
			
			Если Колонка.Имя = "NKW" Тогда
				Попытка
					НомерКвартиры = Число(DBFФайл[Колонка.Имя]);
				Исключение
					// Если номер квартиры определить не удалось, то эта строка "всплывет" в ПроверкаЗаполнения().
					НомерКвартиры = 0;
				КонецПопытки;
				НоваяЗапись["НомерКвартиры"] = НомерКвартиры;
				НоваяЗапись["NKW"]           = СокрЛП(DBFФайл[Колонка.Имя]);
			Иначе
				Попытка
					НоваяЗапись[Колонка.Имя] = ?(Строка(Колонка.ТипЗначения) = "Строка", СокрЛП(DBFФайл[Колонка.Имя]), DBFФайл[Колонка.Имя]);
				Исключение
				КонецПопытки;
			КонецЕсли;
			
		КонецЦикла;
		
		DBFФайл.Следующая();
		Сч = Сч + 1;
		
	КонецЦикла;
	
	DBFФайл.ЗакрытьФайл();
	
	ИсключитьАдресныеСокращения(ТаблицаДляЗагрузки, 1);
	
	ПроизвестиИдентификациюЛицевыхСчетов(ТаблицаДляЗагрузки);
	
	// Помещаем заполенную таблицу значений в соответствующий реквизит формы.
	ЗначениеВРеквизитФормы(ТаблицаДляЗагрузки, "КурскаяОбласть_ТаблицаВыгрузки");
	
	// Очищае временное хранилище.
	УдалитьИзВременногоХранилища(АдресФайлаВХранилище);
	
КонецПроцедуры // ЗагрузитьИзФайлаНаСервере()

// Процедура предназначена для проверка заполнения элементов формы.
//
Функция ЕстьОшибкиЗаполненияПолейФормы()
	
	ЕстьОшибки = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Объект.Период) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указан период выгрузки!");
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указана организация по которой будут выгружены данные!");
		ЕстьОшибки = Истина;
	КонецЕсли;
	
	Возврат ЕстьОшибки;
	
КонецФункции // ЕстьОшибкиЗаполненияПолейФормы()

// Формирует массив структур, состоящих из параметров для записи полей выгружаемого DBF-файла.
//
// Возвращаемое значение:
//  МассивСтруктурКолонок - Массив - массив структур. 
//
&НаСервере
Функция ПолучитьКолонкиDBF()
	
	ТаблицаДляВыгрузки = РеквизитФормыВЗначение("КурскаяОбласть_ТаблицаВыгрузки");
	
	МассивСтруктурКолонок = Новый Массив;
	
	Для Каждого Колонка Из ТаблицаДляВыгрузки.Колонки Цикл
		
		Если Не (Колонка.Имя = "ЛицевойСчет" ИЛИ Колонка.Имя = "Жилец" ИЛИ Колонка.Имя = "НомерКвартиры" ИЛИ Колонка.Имя = "НаселенныйПункт" ИЛИ Колонка.Имя = "Улица") Тогда
			
			// Элемент массива - данные N-ой строки.
			Структура = Новый Структура;
			Структура.Вставить("Имя", Колонка.Имя);
			
			Если Колонка.ТипЗначения.СодержитТип(Тип("Число")) Тогда
				
				Структура.Вставить("Тип",                     "N");
				Структура.Вставить("РазрядностьЦелойЧасти",   Колонка.ТипЗначения.КвалификаторыЧисла.Разрядность - Колонка.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти);
				Структура.Вставить("РазрядностьДробнойЧасти", Колонка.ТипЗначения.КвалификаторыЧисла.РазрядностьДробнойЧасти);
				
			ИначеЕсли Колонка.ТипЗначения.СодержитТип(Тип("Строка")) Тогда
				
				Структура.Вставить("Тип",   "S");
				Структура.Вставить("Длина", Колонка.ТипЗначения.КвалификаторыСтроки.Длина);
				
			ИначеЕсли Колонка.ТипЗначения.СодержитТип(Тип("Дата")) Тогда
				
				Структура.Вставить("Тип",       "D");
				Структура.Вставить("ЧастиДаты", Колонка.ТипЗначения.КвалификаторыДаты.ЧастиДаты);
				
			КонецЕсли;
			
			МассивСтруктурКолонок.Добавить(Структура);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТаблицаДляВыгрузки, "КурскаяОбласть_ТаблицаВыгрузки");
	
	Возврат МассивСтруктурКолонок;
	
КонецФункции // ПолучитьКолонкиDBF()

// Процедура предназначена для заполнения в табличной части сведениями о начислениях и оплатах.
//
&НаСервере
Процедура ЗаполнитьСведенияОНачисленияхИОплатахНаСервере()
	
	ТаблицаДанных = ПолучитьТаблицуДанных();
	
	ТаблицаНачисленийИОплат = ПолучитьТаблицуНачисленийИОплат(ТаблицаДанных);
	
	ОтборНачислений = Новый Структура;
	ОтборНачислений.Вставить("ЛицевойСчет");
	
	Для Каждого ТекСтрока Из КурскаяОбласть_ТаблицаВыгрузки Цикл
		
		Если ТекСтрока.ЛицевойСчет.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		ОтборНачислений.ЛицевойСчет = ТекСтрока.ЛицевойСчет;
		СтрокиСНачислениями = ТаблицаНачисленийИОплат.НайтиСтроки(ОтборНачислений);
		Если СтрокиСНачислениями.Количество() > 0 Тогда
			Для каждого СтрокаНачисления Из СтрокиСНачислениями Цикл
				
				Если ТекСтрока.Свойство("TARIF1_" + СтрокаНачисления.НомерУслуги) Тогда
					ТекСтрока["TARIF1_" + СтрокаНачисления.НомерУслуги] = СтрокаНачисления.TARIF;
				КонецЕсли;
				Если ТекСтрока.Свойство("TARIF2_" + СтрокаНачисления.НомерУслуги) Тогда
					ТекСтрока["TARIF2_" + СтрокаНачисления.НомерУслуги] = СтрокаНачисления.TARIF;
				КонецЕсли;
				Если ТекСтрока.Свойство("FAKT_" + СтрокаНачисления.НомерУслуги) Тогда
					ТекСтрока["FAKT_" + СтрокаНачисления.НомерУслуги]   = СтрокаНачисления.FAKT;
				КонецЕсли;
				Если ТекСтрока.Свойство("SUMTAR_" + СтрокаНачисления.НомерУслуги) Тогда
					ТекСтрока["SUMTAR_" + СтрокаНачисления.НомерУслуги] = СтрокаНачисления.SUMTAR;
				КонецЕсли;
				Если ТекСтрока.Свойство("SUMOPL_" + СтрокаНачисления.НомерУслуги) Тогда
					ТекСтрока["SUMOPL_" + СтрокаНачисления.НомерУслуги] = СтрокаНачисления.SUMOPL;
				КонецЕсли;
				Если ТекСтрока.Свойство("SUMLGT_" + СтрокаНачисления.НомерУслуги) Тогда
					ТекСтрока["SUMLGT_" + СтрокаНачисления.НомерУслуги] = СтрокаНачисления.SUMLGT;
				КонецЕсли;
				Если ТекСтрока.Свойство("PRIZN_" + СтрокаНачисления.НомерУслуги) Тогда
					ТекСтрока["PRIZN_" + СтрокаНачисления.НомерУслуги]  = СтрокаНачисления.PRIZN;
				КонецЕсли;
				
			КонецЦикла;
		Иначе
			
			Для Каждого ТекСтрока Из ТаблицаКодовУслугИзФайл Цикл
				Если ТекСтрока.Свойство("TARIF1_" + СтрокаНачисления.НомерУслуги) Тогда
					ТекСтрока["TARIF1_" + СтрокаНачисления.НомерУслуги] = 0;
				КонецЕсли;
				Если ТекСтрока.Свойство("TARIF2_" + СтрокаНачисления.НомерУслуги) Тогда
					ТекСтрока["TARIF2_" + СтрокаНачисления.НомерУслуги] = 0;
				КонецЕсли;
				Если ТекСтрока.Свойство("FAKT_" + СтрокаНачисления.НомерУслуги) Тогда
					ТекСтрока["FAKT_" + СтрокаНачисления.НомерУслуги]   = 0;
				КонецЕсли;
				Если ТекСтрока.Свойство("SUMTAR_" + СтрокаНачисления.НомерУслуги) Тогда
					ТекСтрока["SUMTAR_" + СтрокаНачисления.НомерУслуги] = 0;
				КонецЕсли;
				Если ТекСтрока.Свойство("SUMOPL_" + СтрокаНачисления.НомерУслуги) Тогда
					ТекСтрока["SUMOPL_" + СтрокаНачисления.НомерУслуги] = 0;
				КонецЕсли;
				Если ТекСтрока.Свойство("SUMLGT_" + СтрокаНачисления.НомерУслуги) Тогда
					ТекСтрока["SUMLGT_" + СтрокаНачисления.НомерУслуги] = 0;
				КонецЕсли;
				Если ТекСтрока.Свойство("PRIZN_" + СтрокаНачисления.НомерУслуги) Тогда
					ТекСтрока["PRIZN_" + СтрокаНачисления.НомерУслуги]  = 0;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	// Помещаем заполенную таблицу значений в соответствующий реквизит формы.
	ЗначениеВРеквизитФормы(КурскаяОбласть_ТаблицаВыгрузки.Выгрузить(), "КурскаяОбласть_ТаблицаВыгрузки");
	
КонецПроцедуры // ЗаполнитьСведенияОНачисленияхиОплатахНаСервере()

// Подготавливает таблицу с идентифицированными лицевыми счетами.
//
&НаСервере
Функция ПолучитьТаблицуДанных()
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	
	// Создаем пустую таблицу. 
	ТаблицаДанных.Колонки.Добавить("ЛицевойСчет", Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
	ТаблицаДанных.Колонки.Добавить("KGKYSL",      УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(11, 2));
	ТаблицаДанных.Колонки.Добавить("НомерУслуги", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(2));
	
	Для Каждого ТекКодУслуги Из ТаблицаКодовУслугИзФайл Цикл
		
		Для каждого ТекСтрока Из КурскаяОбласть_ТаблицаВыгрузки Цикл
			Если ЗначениеЗаполнено(ТекСтрока.ЛицевойСчет) Тогда
				НоваяСтрока             = ТаблицаДанных.Добавить();
				НоваяСтрока.ЛицевойСчет = ТекСтрока.ЛицевойСчет;
				НоваяСтрока.KGKYSL      = ТекСтрока["KGKYSL_" + ТекКодУслуги.КодУслуги];
				НоваяСтрока.НомерУслуги = ТекКодУслуги.КодУслуги;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции // ПолучитьТаблицуДанных()

// Процедура предназначена для получения данных о начислениях и оплатах за выбранный период.
//
&НаСервере
Функция ПолучитьТаблицуНачисленийИОплат(ТаблицаДанных)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаНач",       НачалоМесяца(Объект.Период));
	Запрос.УстановитьПараметр("ДатаКон",       КонецМесяца(Объект.Период));
	Запрос.УстановитьПараметр("Организация",   Объект.Организация);
	Запрос.УстановитьПараметр("ТаблицаУслуг",  Объект.КурскаяОбласть_УслугиВБазе.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДанных.ЛицевойСчет,
	|	ТаблицаДанных.KGKYSL,
	|	ТаблицаДанных.НомерУслуги
	|ПОМЕСТИТЬ втДанных
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУслуг.УслугаВБазе КАК Услуга,
	|	ТаблицаУслуг.КодУслугиВОСЗН КАК KGKYSL
	|ПОМЕСТИТЬ втУслуги
	|ИЗ
	|	&ТаблицаУслуг КАК ТаблицаУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанных.ЛицевойСчет,
	|	втДанных.KGKYSL,
	|	втДанных.НомерУслуги,
	|	втУслуги.Услуга
	|ПОМЕСТИТЬ втЛьготникиСУслугами
	|ИЗ
	|	втДанных КАК втДанных
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втУслуги КАК втУслуги
	|		ПО втДанных.KGKYSL = втУслуги.KGKYSL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.Тариф,
	|	СУММА(УПЖКХ_НачисленияОбороты.Количество) КАК Количество,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата))
	|					И НЕ УПЖКХ_НачисленияОбороты.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы))
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНачисление,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата))
	|				ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаОплаты,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы))
	|				ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаЛьготы,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПризнакПерерасчета
	|ПОМЕСТИТЬ втНачисления
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Организация = &Организация
	|				И (ЛицевойСчет, Услуга) В
	|					(ВЫБРАТЬ
	|						втЛьготникиСУслугами.ЛицевойСчет,
	|						втЛьготникиСУслугами.Услуга
	|					ИЗ
	|						втЛьготникиСУслугами КАК втЛьготникиСУслугами)
	|				И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ВводНачальногоСальдо), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Комиссия))
	|				И НЕ РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.КомиссияБанка))) КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.Тариф
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛьготникиСУслугами.ЛицевойСчет,
	|	втЛьготникиСУслугами.KGKYSL,
	|	втЛьготникиСУслугами.НомерУслуги,
	|	ЕСТЬNULL(втНачисления.Тариф, 0) КАК TARIF,
	|	СУММА(ЕСТЬNULL(втНачисления.Количество, 0)) КАК FAKT,
	|	СУММА(ЕСТЬNULL(втНачисления.СуммаНачисление, 0)) КАК SUMTAR,
	|	СУММА(ЕСТЬNULL(втНачисления.СуммаОплаты, 0)) КАК SUMOPL,
	|	СУММА(ЕСТЬNULL(втНачисления.СуммаЛьготы, 0)) КАК SUMLGT,
	|	СУММА(ЕСТЬNULL(втНачисления.ПризнакПерерасчета, 0)) КАК PRIZN
	|ИЗ
	|	втЛьготникиСУслугами КАК втЛьготникиСУслугами
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНачисления КАК втНачисления
	|		ПО втЛьготникиСУслугами.ЛицевойСчет = втНачисления.ЛицевойСчет
	|			И втЛьготникиСУслугами.Услуга = втНачисления.Услуга
	|
	|СГРУППИРОВАТЬ ПО
	|	втЛьготникиСУслугами.ЛицевойСчет,
	|	втЛьготникиСУслугами.KGKYSL,
	|	втЛьготникиСУслугами.НомерУслуги,
	|	ЕСТЬNULL(втНачисления.Тариф, 0)";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	ТаблицаНачисленийИОплат = Результат.Скопировать();
	ТаблицаНачисленийИОплат.Свернуть("ЛицевойСчет, KGKYSL, НомерУслуги", "TARIF, FAKT, SUMOPL, SUMTAR, SUMLGT, PRIZN");
	
	Для Каждого Строка Из ТаблицаНачисленийИОплат Цикл
		
		Отбор = Новый Структура;
		Отбор.Вставить("ЛицевойСчет", Строка.ЛицевойСчет);
		Отбор.Вставить("KGKYSL",      Строка.KGKYSL);
		
		МассивТарифов = Результат.НайтиСтроки(Отбор);
		
		Сч = 0;
		СуммаTARIF = 0;
		Для Каждого СтрокаТарифа Из МассивТарифов Цикл
			Если ЗначениеЗаполнено(СтрокаТарифа.TARIF) Тогда
				СуммаTARIF = СуммаTARIF + СтрокаТарифа.TARIF;
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;
		
		МассивСтрока = ТаблицаНачисленийИОплат.НайтиСтроки(Отбор);
		Если Не Сч = 0 Тогда
			МассивСтрока[0].TARIF = СуммаTARIF / Сч;
		Иначе
			МассивСтрока[0].TARIF = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаНачисленийИОплат;
	
КонецФункции // ПолучитьТаблицуНачисленийИОплат()

// Процедура предназначена для исключения из наименования здания и улицы, 
// на которой расположены выгружаемые здания, адресных сокращений.
//
&НаСервере
Процедура ИсключитьАдресныеСокращения(ТаблицаДляЗагрузки, НаборПолейДляСокращения)
	
	МассивСокращенийНасПунктов = Новый Массив();
	МассивСокращенийНасПунктов.Добавить("л/с");
	МассивСокращенийНасПунктов.Добавить("г");
	МассивСокращенийНасПунктов.Добавить("г.");
	МассивСокращенийНасПунктов.Добавить("пгт");
	МассивСокращенийНасПунктов.Добавить("пгт.");
	МассивСокращенийНасПунктов.Добавить("д");
	МассивСокращенийНасПунктов.Добавить("д.");
	МассивСокращенийНасПунктов.Добавить("п");
	МассивСокращенийНасПунктов.Добавить("п.");
	МассивСокращенийНасПунктов.Добавить("ст");
	МассивСокращенийНасПунктов.Добавить("ст.");
	
	МассивСокращенийУлиц = Новый Массив();
	МассивСокращенийУлиц.Добавить("ул");
	МассивСокращенийУлиц.Добавить("ул.");
	МассивСокращенийУлиц.Добавить("пер");
	МассивСокращенийУлиц.Добавить("пер.");
	МассивСокращенийУлиц.Добавить("пр-кт");
	МассивСокращенийУлиц.Добавить("проезд");
	МассивСокращенийУлиц.Добавить("б-р");
	МассивСокращенийУлиц.Добавить("б.");
	МассивСокращенийУлиц.Добавить("пл");
	МассивСокращенийУлиц.Добавить("пл.");
	МассивСокращенийУлиц.Добавить("парк");
	МассивСокращенийУлиц.Добавить("сквер");
	
	Для Каждого ТекСтрока ИЗ ТаблицаДляЗагрузки Цикл
		Если НаборПолейДляСокращения = 1 Тогда
			ТекСтрока.НаселенныйПункт = НормализацияПолейАдресаОбласти(НРег(ТекСтрока.NASP), МассивСокращенийНасПунктов);
			ТекСтрока.Улица           = НормализацияПолейАдресаОбласти(НРег(ТекСтрока.YLIC), МассивСокращенийУлиц);
		Иначе
			ТекСтрока.НаселенныйПункт = НормализацияПолейАдресаОбласти(НРег(ТекСтрока.НаселенныйПункт), МассивСокращенийНасПунктов);
			ТекСтрока.Город           = НормализацияПолейАдресаОбласти(НРег(ТекСтрока.Город),           МассивСокращенийНасПунктов);
			ТекСтрока.Улица           = НормализацияПолейАдресаОбласти(НРег(ТекСтрока.Улица),           МассивСокращенийУлиц);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ИсключитьАдресныеСокращения()

// Функция сокращает название города или улицы: убирает сокращения,
// определяющие тип данного элемента адреса: "г.", "ул." и так далее.
//
// Параметры:
//  Ресурс       - Строка - элемент адреса
//
// Возвращаемое значение:
//  Строка - элемент адреса в сокращенном виде
//
Функция НормализацияПолейАдресаОбласти(Ресурс, Массив)
	
	Найден = Истина;
	
	Для Каждого Элемент Из Массив Цикл
		
		Если Прав(СокрЛП(Ресурс), СтрДлина(Элемент)) = Элемент Тогда
			ПредСимвол = Сред(СокрЛП(Ресурс), СтрДлина(СокрЛП(Ресурс)) - СтрДлина(Элемент), 1);
			
			Если ПредСимвол = " " Тогда
				Возврат СокрЛП(Лев(СокрЛП(Ресурс), СтрДлина(СокрЛП(Ресурс)) - СтрДлина(Элемент)));
			КонецЕсли;
		ИначеЕсли Лев(СокрЛП(Ресурс), СтрДлина(Элемент)) = Элемент Тогда
			СледСимвол = Сред(СокрЛП(Ресурс), СтрДлина(Элемент) + 1, 1);
			
			Если СледСимвол = " " Тогда
				Возврат СокрЛП(Сред(СокрЛП(Ресурс), СтрДлина(Элемент) + 1));
			КонецЕсли;
		Иначе
			
			Найден = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Найден = Ложь Тогда
		Возврат Ресурс;
	КонецЕсли;
	
КонецФункции // НормализацияПолейАдресаОбласти()

// Процедура предназначена для идентификации льготников из файла с жильцами из базы.
//
&НаСервере
Процедура ПроизвестиИдентификациюЛицевыхСчетов(ТаблицаДляЗагрузки)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	Запрос.УстановитьПараметр("ТаблицаДляЗагрузки", ТаблицаДляЗагрузки);
	Запрос.УстановитьПараметр("ДатаКонца",          КонецМесяца(Объект.Период));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_Жильцы.Ссылка КАК Жилец,
	|	УПЖКХ_Жильцы.Владелец КАК ЛицевойСчет,
	|	УПЖКХ_Жильцы.ФизЛицо
	|ПОМЕСТИТЬ втВсеЖильцы
	|ИЗ
	|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
	|ГДЕ
	|	НЕ УПЖКХ_Жильцы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо,
	|	ФИОФизическихЛицСрезПоследних.Фамилия,
	|	ФИОФизическихЛицСрезПоследних.Имя,
	|	ФИОФизическихЛицСрезПоследних.Отчество
	|ПОМЕСТИТЬ втФИОЖильцов
	|ИЗ
	|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ДатаКонца, ) КАК ФИОФизическихЛицСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВсеЖильцы.ЛицевойСчет,
	|	втВсеЖильцы.Жилец,
	|	втФИОЖильцов.Фамилия,
	|	втФИОЖильцов.Имя,
	|	втФИОЖильцов.Отчество
	|ПОМЕСТИТЬ втЖильцыСФИО
	|ИЗ
	|	втВсеЖильцы КАК втВсеЖильцы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втФИОЖильцов КАК втФИОЖильцов
	|		ПО втВсеЖильцы.ФизЛицо = втФИОЖильцов.ФизическоеЛицо";
	
	Запрос.Выполнить();
	
	ЗапросПоЗданиям = Новый Запрос;
	ЗапросПоЗданиям.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросПоЗданиям.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втЖильцыСФИО.ЛицевойСчет.Адрес.Владелец КАК Объект
	|ИЗ
	|	втЖильцыСФИО КАК втЖильцыСФИО
	|
	|СГРУППИРОВАТЬ ПО
	|	втЖильцыСФИО.ЛицевойСчет.Адрес.Владелец";
	
	МассивОбъектов = ЗапросПоЗданиям.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация"
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	втФИОЖильцов.ЛицевойСчет,
	|	втФИОЖильцов.Жилец,
	|	втФИОЖильцов.Фамилия,
	|	втФИОЖильцов.Имя,
	|	втФИОЖильцов.Отчество,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Город, """") КАК Город,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НЕ втКонтактнаяИнформация.Город = """"
	|				ТОГДА втКонтактнаяИнформация.Город
	|			КОГДА НЕ втКонтактнаяИнформация.НаселенныйПункт = """"
	|				ТОГДА втКонтактнаяИнформация.НаселенныйПункт
	|			ИНАЧЕ втКонтактнаяИнформация.Регион
	|		КОНЕЦ, """") КАК НаселенныйПункт,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Улица, """") КАК Улица,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Дом, """") КАК Дом,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Корпус, """") КАК Корпус,
	|	втФИОЖильцов.ЛицевойСчет.Адрес.Код КАК Квартира
	|ИЗ
	|	втЖильцыСФИО КАК втФИОЖильцов
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК втКонтактнаяИнформация
	|		ПО втФИОЖильцов.ЛицевойСчет.Адрес.Владелец = втКонтактнаяИнформация.Объект";
	
	ТаблицаЖильцовИзБазы = Запрос.Выполнить().Выгрузить();
	
	ИсключитьАдресныеСокращения(ТаблицаЖильцовИзБазы, 2);
	
	// Идентификация льготников из файла загрузки с данными из информационной базы.
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ЖильцовИзБазы",      ТаблицаЖильцовИзБазы);
	Запрос.УстановитьПараметр("ТаблицаДляЗагрузки", ТаблицаДляЗагрузки);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЖильцовИзБазы.ЛицевойСчет,
	|	ЖильцовИзБазы.Жилец,
	|	ЖильцовИзБазы.Фамилия,
	|	ЖильцовИзБазы.Имя,
	|	ЖильцовИзБазы.Отчество,
	|	ЖильцовИзБазы.Город,
	|	ЖильцовИзБазы.НаселенныйПункт,
	|	ЖильцовИзБазы.Улица,
	|	ЖильцовИзБазы.Дом,
	|	ЖильцовИзБазы.Корпус,
	|	ЖильцовИзБазы.Квартира
	|ПОМЕСТИТЬ втЖильцовИзБазы
	|ИЗ
	|	&ЖильцовИзБазы КАК ЖильцовИзБазы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДляЗагрузки.ID,
	|	ТаблицаДляЗагрузки.PKU,
	|	ТаблицаДляЗагрузки.FAMIL,
	|	ТаблицаДляЗагрузки.IMJA,
	|	ТаблицаДляЗагрузки.OTCH,
	|	ТаблицаДляЗагрузки.DROG,
	|	ТаблицаДляЗагрузки.НаселенныйПункт,
	|	ТаблицаДляЗагрузки.Улица,
	|	ТаблицаДляЗагрузки.NDOM,
	|	ТаблицаДляЗагрузки.NKORP,
	|	ТаблицаДляЗагрузки.НомерКвартиры
	|ПОМЕСТИТЬ втДанныеИзФайла
	|ИЗ
	|	&ТаблицаДляЗагрузки КАК ТаблицаДляЗагрузки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцовИзБазы.ЛицевойСчет,
	|	втЖильцовИзБазы.Жилец,
	|	втЖильцовИзБазы.Фамилия,
	|	втЖильцовИзБазы.Имя,
	|	втЖильцовИзБазы.Отчество,
	|	втЖильцовИзБазы.Город,
	|	втЖильцовИзБазы.НаселенныйПункт,
	|	втЖильцовИзБазы.Улица,
	|	втЖильцовИзБазы.Дом,
	|	втЖильцовИзБазы.Корпус,
	|	втЖильцовИзБазы.Квартира,
	|	втДанныеИзФайла.ID,
	|	втДанныеИзФайла.PKU
	|ИЗ
	|	втДанныеИзФайла КАК втДанныеИзФайла
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЖильцовИзБазы КАК втЖильцовИзБазы
	|		ПО втДанныеИзФайла.FAMIL = втЖильцовИзБазы.Фамилия
	|			И втДанныеИзФайла.IMJA = втЖильцовИзБазы.Имя
	|			И втДанныеИзФайла.OTCH = втЖильцовИзБазы.Отчество
	|			И втДанныеИзФайла.НаселенныйПункт = втЖильцовИзБазы.НаселенныйПункт
	|			И втДанныеИзФайла.Улица = втЖильцовИзБазы.Улица
	|			И втДанныеИзФайла.NDOM = втЖильцовИзБазы.Дом
	|			И втДанныеИзФайла.NKORP = втЖильцовИзБазы.Корпус
	|			И втДанныеИзФайла.НомерКвартиры = втЖильцовИзБазы.Квартира";
	
	ТаблицаИдентифицированныхЛьготников = Запрос.Выполнить().Выгрузить();
	
	Для каждого ТекСтрока Из ТаблицаДляЗагрузки Цикл
		
		НайденныйЛС = ТаблицаИдентифицированныхЛьготников.Найти(ТекСтрока.PKU, "PKU");
		Если НайденныйЛС = Неопределено Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Лицевой счет жильца " + ТекСтрока.FAMIL + " " + ТекСтрока.IMJA + " " + ТекСтрока.OTCH + " c PKU = " + ТекСтрока.PKU + " в базе не идентифицирован!");
		Иначе
			ТекСтрока.ЛицевойСчет = НайденныйЛС.ЛицевойСчет;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроизвестиИдентификациюЛицевыхСчетов()

// Переопределяет колонки и поля таблицы "КурскаяОбласть_ТаблицаВыгрузки".
//
// Параметры:
//  КоличествоУслугТаблицыВыгрузки - Число - количество услуг из dbf-файла.
//
&НаСервере
Процедура ДобавитьРеквизитыВТаблицуЗагрузкиНаСервере(DBFФайл)
	
	Если АдресДобавляемыеРеквизитыТаблицыЗагрузки <> "" Тогда
		
		ДобавляемыеРеквизитыТаблицыЗагрузки = ПолучитьИзВременногоХранилища(АдресДобавляемыеРеквизитыТаблицыЗагрузки);
		
		УдаляемыеРеквизиты = Новый Массив;
		
		// Удаляем ранее добавленные элементы формы.
		Для Каждого РеквизитУдаления Из ДобавляемыеРеквизитыТаблицыЗагрузки Цикл
			УдаляемыеРеквизиты.Добавить("КурскаяОбласть_ТаблицаВыгрузки." + РеквизитУдаления.Имя);
			Элементы.Удалить(Элементы["КурскаяОбласть_ТаблицаВыгрузки" + РеквизитУдаления.Имя]);
		КонецЦикла;
		
		// Удаляем ранее добавленные реквизиты.
		ИзменитьРеквизиты(, УдаляемыеРеквизиты);
		
		ДобавляемыеРеквизитыТаблицыЗагрузки.Очистить();
		
	Иначе
		ДобавляемыеРеквизитыТаблицыЗагрузки = Новый Массив;
	КонецЕсли;
	
	Для каждого ТекСтрока Из ТаблицаКодовУслугИзФайл Цикл
		
		КодУслуги               = ТекСтрока.КодУслуги;
		
		Если DBFФайл.Поля.Найти("KGKYSL_" + КодУслуги) <> Неопределено Тогда
			ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("KGKYSL_"  + КодУслуги,  УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(11, 0),         "КурскаяОбласть_ТаблицаВыгрузки", "Код услуги " + КодУслуги,                       Ложь));
		КонецЕсли;
		Если DBFФайл.Поля.Найти("GKYSL_" + КодУслуги) <> Неопределено Тогда
			ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("GKYSL_" + КодУслуги,    УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(30),           "КурскаяОбласть_ТаблицаВыгрузки", "Название услуги(главный уровень) " + КодУслуги, Ложь));
		КонецЕсли;
		Если DBFФайл.Поля.Найти("NGKYSL1_" + КодУслуги) <> Неопределено Тогда
			ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("NGKYSL1_" + КодУслуги,  УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(70),           "КурскаяОбласть_ТаблицаВыгрузки", "Название услуги1_ " + КодУслуги,                  Ложь));
		КонецЕсли;
		Если DBFФайл.Поля.Найти("NGKYSL2_" + КодУслуги) <> Неопределено Тогда
			ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("NGKYSL2_"  + КодУслуги, УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(70),           "КурскаяОбласть_ТаблицаВыгрузки", "Название услуги2_" + КодУслуги,                  Ложь));
		КонецЕсли;
		Если DBFФайл.Поля.Найти("LCHET_" + КодУслуги) <> Неопределено Тогда
			ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("LCHET_"  + КодУслуги,   УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(24),           "КурскаяОбласть_ТаблицаВыгрузки", "Лицевой счет " + КодУслуги,                     Ложь));
		КонецЕсли;
		Если DBFФайл.Поля.Найти("TARIF1_" + КодУслуги) <> Неопределено Тогда
			ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("TARIF1_" + КодУслуги,   УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(19, 5),         "КурскаяОбласть_ТаблицаВыгрузки", "Тариф1_" + КодУслуги,                            Ложь));
		КонецЕсли;
		Если DBFФайл.Поля.Найти("TARIF2_" + КодУслуги) <> Неопределено Тогда
			ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("TARIF2_"  + КодУслуги,  УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(19, 5),         "КурскаяОбласть_ТаблицаВыгрузки", "Тариф2_" + КодУслуги,                            Ложь));
		КонецЕсли;
		Если DBFФайл.Поля.Найти("FAKT_" + КодУслуги) <> Неопределено Тогда
			ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("FAKT_" + КодУслуги,     УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(19, 5),         "КурскаяОбласть_ТаблицаВыгрузки", "Фактическое потребление " + КодУслуги,          Ложь));
		КонецЕсли;
		Если DBFФайл.Поля.Найти("SUMTAR_" + КодУслуги) <> Неопределено Тогда
			ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("SUMTAR_" + КодУслуги,   УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(19, 5),         "КурскаяОбласть_ТаблицаВыгрузки", "Начисленная сумма по тарифам " + КодУслуги,     Ложь));
		КонецЕсли;
		Если DBFФайл.Поля.Найти("SUMOPL_" + КодУслуги) <> Неопределено Тогда
			ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("SUMOPL_"  + КодУслуги,  УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(19, 5),         "КурскаяОбласть_ТаблицаВыгрузки", "Фактическая сумма оплаты " + КодУслуги,         Ложь));
		КонецЕсли;
		Если DBFФайл.Поля.Найти("SUMLGT_" + КодУслуги) <> Неопределено Тогда
			ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("SUMLGT_"  + КодУслуги,  УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(19, 5),         "КурскаяОбласть_ТаблицаВыгрузки", "Сумма льготы " + КодУслуги,                     Ложь));
		КонецЕсли;
		Если DBFФайл.Поля.Найти("SUMDOLG_" + КодУслуги) <> Неопределено Тогда
			ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("SUMDOLG_" + КодУслуги,  УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(19, 5),         "КурскаяОбласть_ТаблицаВыгрузки", "Сумма долга " + КодУслуги,                      Ложь));
		КонецЕсли;
		Если DBFФайл.Поля.Найти("OPLDOLG_" + КодУслуги) <> Неопределено Тогда
			ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("OPLDOLG_" + КодУслуги,  УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(19, 5),         "КурскаяОбласть_ТаблицаВыгрузки", "Сумма оплаты долга " + КодУслуги,               Ложь));
		КонецЕсли;
		Если DBFФайл.Поля.Найти("DATDOLG_" + КодУслуги) <> Неопределено Тогда
			ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("DATDOLG_" + КодУслуги,  УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата), "КурскаяОбласть_ТаблицаВыгрузки", "Дата задолженности " + КодУслуги,               Ложь));
		КонецЕсли;
		Если DBFФайл.Поля.Найти("KOLDOLG_" + КодУслуги) <> Неопределено Тогда
			ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("KOLDOLG_" + КодУслуги,  УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(11),            "КурскаяОбласть_ТаблицаВыгрузки", "Количество должников " + КодУслуги,             Ложь));
		КонецЕсли;
		Если DBFФайл.Поля.Найти("PRIZN_" + КодУслуги) <> Неопределено Тогда
			ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("PRIZN_" + КодУслуги,    УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(11),            "КурскаяОбласть_ТаблицаВыгрузки", "Признак корректировки " + КодУслуги,            Ложь));
		КонецЕсли;
		Если DBFФайл.Поля.Найти("KOLLGTP_" + КодУслуги) <> Неопределено Тогда
			ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("KOLLGTP_" + КодУслуги,  УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(11),            "КурскаяОбласть_ТаблицаВыгрузки", "Количество льготополучателей " + КодУслуги,     Ложь));
		КонецЕсли;
		Если DBFФайл.Поля.Найти("KOLLGT_" + КодУслуги) <> Неопределено Тогда
			ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("KOLLGT_" + КодУслуги,   УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(11),            "КурскаяОбласть_ТаблицаВыгрузки", "Количество льготников " + КодУслуги,            Ложь));
		КонецЕсли;
		Если DBFФайл.Поля.Найти("KOLZR_" + КодУслуги) <> Неопределено Тогда
			ДобавляемыеРеквизитыТаблицыЗагрузки.Добавить(Новый РеквизитФормы("KOLZR_" + КодУслуги,    УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(11),            "КурскаяОбласть_ТаблицаВыгрузки", "Количество зарегистрированных " + КодУслуги,    Ложь));
		КонецЕсли;
	КонецЦикла;
	
	// Добавляем новые реквизиты.
	ИзменитьРеквизиты(ДобавляемыеРеквизитыТаблицыЗагрузки);
	
	// Создаем новые элементы формы.
	Для Каждого Колонка Из ДобавляемыеРеквизитыТаблицыЗагрузки Цикл 
		Элемент             = Элементы.Добавить("КурскаяОбласть_ТаблицаВыгрузки" + Колонка.Имя, Тип("ПолеФормы"), Элементы.КурскаяОбласть_ТаблицаВыгрузки); 
		Элемент.Вид         = ВидПоляФормы.ПолеВвода;
		Элемент.Формат      = "ЧН=0";
		Элемент.ПутьКДанным = "КурскаяОбласть_ТаблицаВыгрузки." + Колонка.Имя;
	КонецЦикла;
	
	// Сохраням массив добавляемых реквизитов.
	АдресДобавляемыеРеквизитыТаблицыЗагрузки = ПоместитьВоВременноеХранилище(ДобавляемыеРеквизитыТаблицыЗагрузки, Новый УникальныйИдентификатор);
	
КонецПроцедуры // ДобавитьРеквизитыВТаблицуЗагрузкиНаСервере()

&НаКлиентеНаСервереБезКонтекста
// Возвращает полное имя временного dbf-файла с указанным именем без расширения.
//
// Параметры:
//  ИмяФайла - Строка - имя файла без расширения.
//
// Возвращаемые параметры:
//  НовоеИмяВременногоФайла - Строка - полное имя временного dbf-файла с указанным именем без расширения.
//
Функция ПолучитьИмяВременногоDBFФайла()
	
	#Если Не ВебКлиент Тогда
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("dbf");
		
		Файл = Новый Файл(ИмяВременногоФайла);
		НовоеИмяВременногоФайла = СтрЗаменить(Файл.ПолноеИмя, Файл.ИмяБезРасширения, "Загрузки");
		
		Возврат НовоеИмяВременногоФайла;
		
	#КонецЕсли
	
КонецФункции // ПолучитьИмяВременногоDBFФайла()

&НаСервере
Процедура ВосстановитьНастройкиНаСервере()
	
	СтруктураПараметров = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("УПЖКХ_ВыгрузкиВОрганыСоцЗащиты_КурскаяОбласть", "ПараметрыВыгрузки");
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		врПеременная = Неопределено;
		// Кодировка файла DBF.
		Если СтруктураПараметров.Свойство("КодировкаDBF", врПеременная) Тогда
			Объект.КодировкаDBF = врПеременная;
		КонецЕсли;
		
		врТаблица = Неопределено;
		
		// Таблица настроек.
		Если СтруктураПараметров.Свойство("КурскаяОбласть_УслугиВБазе", врТаблица) Тогда
			Если ТипЗнч(врТаблица) = Тип("ТаблицаЗначений") Тогда
				Объект.КурскаяОбласть_УслугиВБазе.Загрузить(врТаблица);
			КонецЕсли;
		КонецЕсли;
		
		// Таблица услуг в базе.
		Если СтруктураПараметров.Свойство("КурскаяОбласть_УслугиВОСЗН", врТаблица) Тогда
			Если ТипЗнч(врТаблица) = Тип("ТаблицаЗначений") Тогда
				Объект.КурскаяОбласть_УслугиВОСЗН.Загрузить(врТаблица);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьНастройкиНаСервере()

&НаСервере
// Процедура сохранения настроек.
Процедура СохранитьНастройкиНаСервере()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("КодировкаDBF",               Объект.КодировкаDBF);
	СтруктураПараметров.Вставить("КурскаяОбласть_УслугиВБазе", Объект.КурскаяОбласть_УслугиВБазе.Выгрузить());
	СтруктураПараметров.Вставить("КурскаяОбласть_УслугиВОСЗН", Объект.КурскаяОбласть_УслугиВОСЗН.Выгрузить());
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("УПЖКХ_ВыгрузкиВОрганыСоцЗащиты_КурскаяОбласть", "ПараметрыВыгрузки", СтруктураПараметров);
	
КонецПроцедуры // СохранитьНастройкиНаСервере()

// Изменяет период на форме выгрузки.
//
// Параметры:
//  Период - Дата - устанавливаемый период.
//
&НаКлиенте
Процедура ОбновитьПериод(Период = Неопределено)
	
	Объект.Период = ?(Период = Неопределено, УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("РабочаяДата"), КонецМесяца(Период));
	
	Если Объект.Период = '00010101' Тогда
		Объект.Период = ТекущаяДата();
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры // ОбновитьПериод()

// Проверяет указанный файл на существование. Если файл существует, то производит запись его имени в соответствующий реквизит
// и управляет видимостью кнопок загрузки.
//
// Параметры:
//  ПолноеИмя - Строка - полное имя проверяемого файла.
//  Режим     - Строка - наименование режима работы текущего файла: "Загрузки" или "Выгрузки".
//
&НаКлиенте
Процедура ПроверитьУказанныйDBFФайл(ПолноеИмя)
	
	Файл = Новый Файл(ПолноеИмя);
	
	Файл.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ПроверитьУказанныйDBFФайлСуществует", ЭтотОбъект,
														Новый Структура("ПолноеИмя, Файл", ПолноеИмя, Файл)));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьУказанныйDBFФайлСуществует(Существует, ДополнительныеПараметры) Экспорт
	
	Если Существует Тогда
		Файл = ДополнительныеПараметры.Файл;
		Файл.НачатьПроверкуЭтоФайл(Новый ОписаниеОповещения("ПроверитьУказанныйDBFФайлЭтоФайл", ЭтотОбъект,
																  Новый Структура("ПолноеИмя, Файл", ДополнительныеПараметры.ПолноеИмя, Файл)));
	Иначе
		
		ПолноеИмя = ДополнительныеПараметры.ПолноеИмя;
		
		// Если была полностью удалена строка адреса файла.
		Если ПолноеИмя = "" Тогда
			Объект["ИмяФайлаЗагрузки"] = ПолноеИмя;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьУказанныйDBFФайлЭтоФайл(ЭтоФайл, ДополнительныеПараметры) Экспорт
	
	ПолноеИмя = ДополнительныеПараметры.ПолноеИмя;
	
	Если ЭтоФайл Тогда
		Объект["ИмяФайлаЗагрузки"] = ПолноеИмя;
	Иначе
		// Если была полностью удалена строка адреса файла.
		Если ПолноеИмя = "" Тогда
			Объект["ИмяФайлаЗагрузки"] = ПолноеИмя;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Помещает данные во временное хранилище для передачи их в форму настройки.
//
// Возвращаемое значение:
//  Строка - адрес настроек в хранилище.
//
&НаСервере
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ИмяФайлаЗагрузки",           Объект.ИмяФайлаЗагрузки);
	СтруктураНастроек.Вставить("КодировкаDBF",               Объект.КодировкаDBF);
	СтруктураНастроек.Вставить("КурскаяОбласть_УслугиВОСЗН", Объект.КурскаяОбласть_УслугиВОСЗН.Выгрузить());
	СтруктураНастроек.Вставить("КурскаяОбласть_УслугиВБазе", Объект.КурскаяОбласть_УслугиВБазе.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции // ПоместитьНастройкиВХранилище()

// Помещает таблицу услуг во временное хранилище.
//
&НаСервере
Функция ПолучитьНастройкиИзХранилища(АдресУслугВХранилище)
	
	СтруктураНастроек = ПолучитьИзВременногоХранилища(АдресУслугВХранилище);
	
	врПеременная = Неопределено;
	// Кодировка файла DBF.
	Если СтруктураНастроек.Свойство("КодировкаDBF", врПеременная) Тогда
		Объект.КодировкаDBF = врПеременная;
	КонецЕсли;
	
	врТаблица = Неопределено;
	
	// Таблица услуг в ОСЗН.
	Если СтруктураНастроек.Свойство("КурскаяОбласть_УслугиВОСЗН", врТаблица) Тогда
		Если ТипЗнч(врТаблица) = Тип("ТаблицаЗначений") Тогда
			Объект.КурскаяОбласть_УслугиВОСЗН.Загрузить(врТаблица);
		КонецЕсли;
	КонецЕсли;
	
	// Таблица услуг в базе.
	Если СтруктураНастроек.Свойство("КурскаяОбласть_УслугиВБазе", врТаблица) Тогда
		Если ТипЗнч(врТаблица) = Тип("ТаблицаЗначений") Тогда
			Объект.КурскаяОбласть_УслугиВБазе.Загрузить(врТаблица);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // ПолучитьНастройкиИзХранилища()

&НаКлиенте
Процедура ИмяКаталогаВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Заголовок                   = "Выбор каталога файлов";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ИмяКаталогаВыгрузкиНачалоВыбораЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяКаталогаВыгрузкиНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		Объект["ИмяКаталогаВыгрузки"] = ВыбранныеФайлы[0];
	КонецЕсли;
	
КонецПроцедуры // ИмяКаталогаВыгрузкиНачалоВыбора()

&НаКлиенте
Процедура ИмяКаталогаВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	НачатьЗапускПриложения(Новый ОписаниеОповещения("ИмяКаталогаВыгрузкиОткрытиеЗавершение", ЭтотОбъект), "explorer " + Элемент.Значение);
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяКаталогаВыгрузкиОткрытиеЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры // ИмяКаталогаВыгрузкиОткрытие()

&НаСервере
Процедура ПодготовитьСписокСКодамиУслугИзФайла(ПоляDBFФайла)
	
	// В начале "-1", т.к. данный код не может появиться в файле загрузки.
	СохраненныйКодУслуги    = -1;
	
	ПервыйПроход = Истина;
	
	Для СчетчикПолей = 19 По ПоляDBFФайла.Количество() - 1 Цикл
		
		ПозицияСимволаПодчеркивания = Найти(ПоляDBFФайла.Получить(СчетчикПолей).Имя, "_");
		
		ТекКодУслуги = Сред(ПоляDBFФайла.Получить(СчетчикПолей).Имя, ПозицияСимволаПодчеркивания + 1);
		
		Если СохраненныйКодУслуги <> ТекКодУслуги Тогда
			Если ПервыйПроход Тогда
				ПервыйПроход = Ложь;
			Иначе
				// Добавляем новую строку, если произошла смена кода услуги и это не первый проход.
				НоваяСтрока = ТаблицаКодовУслугИзФайл.Добавить();
				НоваяСтрока.КодУслуги               = СохраненныйКодУслуги;
				
				// Изменяем количество полей по текущему коду услуги.
				КоличествоПолейПоУслуге = 1;
			КонецЕсли;
			СохраненныйКодУслуги = ТекКодУслуги;
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавляем данные по услуге, код которой замыкает поля файла загрузки.
	Если НЕ ПервыйПроход Тогда
		НоваяСтрока = ТаблицаКодовУслугИзФайл.Добавить();
		НоваяСтрока.КодУслуги               = СохраненныйКодУслуги;
	КонецЕсли;
	
КонецПроцедуры // ПодготовитьСписокСКодамиУслугИзФайла()

#КонецОбласти