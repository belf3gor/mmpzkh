
//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	Объект.Период      = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	
	ВосстановитьНастройки();
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки();
	
КонецПроцедуры // ПередЗакрытием()

#КонецОбласти

#Область РаботаСНастройками

&НаСервере
// Процедура восстановления настроек.
//
Процедура ВосстановитьНастройки()
	
	СтруктураПараметров = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("КрасноярскийКрай_ВыгрузкаВОСЗН", "ПараметрыВыгрузки");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		СтруктураПараметров.Свойство("ИмяКаталогаВыгрузки", ИмяКаталогаВыгрузки);
		СтруктураПараметров.Свойство("КатегорияЖильцов",    Объект.КатегорияЖильцов);
		
		врТаблица = Новый ТаблицаЗначений;
		
		// Востановление таблицы "Соответствие услуг".
		СтруктураПараметров.Свойство("КрасноярскийКрай_ТаблицаУслуг", врТаблица);
		Если НЕ врТаблица = Неопределено Тогда
			врТаблица = Обработки.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты.АктуализироватьУслуги(врТаблица);
			Объект.КрасноярскийКрай_ТаблицаУслуг.Загрузить(врТаблица);
		КонецЕсли;
		
		// Восстановление таблицы "Услуги по электроэнергии".
		СтруктураПараметров.Свойство("КрасноярскийКрай_УслугиЭлектроэнергии", врТаблица);
		Если НЕ врТаблица = Неопределено Тогда
			Объект.КрасноярскийКрай_УслугиЭлектроэнергии.Загрузить(врТаблица);
		КонецЕсли;
		
		// Восстановление таблицы "Типы улиц".
		СтруктураПараметров.Свойство("КрасноярскийКрай_ТипыУлиц", врТаблица);
		Если НЕ врТаблица = Неопределено Тогда
			Объект.КрасноярскийКрай_ТипыУлиц.Загрузить(врТаблица);
		КонецЕсли;
		
		// Восстановление таблицы "Виды документов удостоверяющих личность".
		СтруктураПараметров.Свойство("КрасноярскийКрай_УдостоверенияЛичности", врТаблица);
		Если НЕ врТаблица = Неопределено Тогда
			Объект.КрасноярскийКрай_УдостоверенияЛичности.Загрузить(врТаблица);
		КонецЕсли;
		
		врВыводЛицевыхСчетов = Неопределено;
		Если СтруктураПараметров.Свойство("ВыводЛицевыхСчетов", врВыводЛицевыхСчетов) Тогда
			Объект.ВыводЛицевыхСчетов = врВыводЛицевыхСчетов;
		Иначе
			// По умолчанию.
			Объект.ВыводЛицевыхСчетов = "ЦифрыНаименования";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьНастройки()

&НаСервере
// Процедура сохранения настроек.
//
Процедура СохранитьНастройки()
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ИмяКаталогаВыгрузки",                    ИмяКаталогаВыгрузки);
	СтруктураПараметров.Вставить("КатегорияЖильцов",                       Объект.КатегорияЖильцов);
	СтруктураПараметров.Вставить("КрасноярскийКрай_ТаблицаУслуг",          Объект.КрасноярскийКрай_ТаблицаУслуг.Выгрузить());
	СтруктураПараметров.Вставить("КрасноярскийКрай_ТипыУлиц",              Объект.КрасноярскийКрай_ТипыУлиц.Выгрузить());
	СтруктураПараметров.Вставить("КрасноярскийКрай_УслугиЭлектроэнергии",  Объект.КрасноярскийКрай_УслугиЭлектроэнергии.Выгрузить());
	СтруктураПараметров.Вставить("КрасноярскийКрай_УдостоверенияЛичности", Объект.КрасноярскийКрай_УдостоверенияЛичности.Выгрузить());
	СтруктураПараметров.Вставить("ВыводЛицевыхСчетов",                     Объект.ВыводЛицевыхСчетов);
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("КрасноярскийКрай_ВыгрузкаВОСЗН", "ПараметрыВыгрузки", СтруктураПараметров);
	
КонецПроцедуры // СохранитьНастройки()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ДАННЫХ

#Область ЗаполнениеДанных

&НаКлиенте
// Проверяет наличие всех необходимых данных для заполнения таблиц выгрузки.
//
Функция ПроверкаУсловийДляВЗаполненияТаблиц()
	
	ТекстОшибки = "";
	
	Если НЕ ЗначениеЗаполнено(Объект.Период) Тогда
		ТекстОшибки = ТекстОшибки + "Не указан период выгрузки!";
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не указана организация!", "Не указан организация!");
	КонецЕсли;
	
	Если Объект.КрасноярскийКрай_ТаблицаУслуг.Количество() = 0 Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не заполнена таблица соответствия услуг!", "Не заполнена таблица соответствия услуг!");
	КонецЕсли; 
	
	Если Объект.КрасноярскийКрай_ТипыУлиц.Количество() = 0 Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не заполнена таблица типов улиц!", "Не заполнена таблица типов!");
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции // ПроверкаУсловийДляВЗаполненияТаблиц

&НаСервере
// Получает строки из таблицы соответствия услуг, в которых заполнены все поля.
//
Функция ПолучитьТаблицуСоответствияУслуг()
	
	ТаблицаДляВозврата = Новый ТаблицаЗначений;
	ТаблицаДляВозврата.Колонки.Добавить("Код",               УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(3));
	ТаблицаДляВозврата.Колонки.Добавить("КодПерерасчета",    УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(3));
	ТаблицаДляВозврата.Колонки.Добавить("КодСОИ",            УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(3));
	ТаблицаДляВозврата.Колонки.Добавить("КодПерерасчетаСОИ", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповЧисла(3));
	ТаблицаДляВозврата.Колонки.Добавить("Услуга",            Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
	
	Для Каждого ТекСтрока Из Объект.КрасноярскийКрай_ТаблицаУслуг Цикл
		Если ТекСтрока.Код <> 0 И ЗначениеЗаполнено(ТекСтрока.Услуга) Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаДляВозврата.Добавить(), ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаДляВозврата;
	
КонецФункции // ПолучитьТаблицуСоответствияУслуг()

&НаСервере
// Получает строки из таблицы типов улиц, в которых заполнены все поля.
//
Функция ПолучитьТаблицуТиповУлиц()
	
	ТаблицаДляВозврата = Новый ТаблицаЗначений;
	ТаблицаДляВозврата.Колонки.Добавить("НаименованиеКраткоеИзБазы",        УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(20));
	ТаблицаДляВозврата.Колонки.Добавить("НаименованиеДляВыводаВФайлОтвета", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(20));
	
	Для Каждого ТекСтрока Из Объект.КрасноярскийКрай_ТипыУлиц Цикл
		Если НЕ ПустаяСтрока(ТекСтрока.НаименованиеКраткоеИзБазы) И ЗначениеЗаполнено(ТекСтрока.НаименованиеДляВыводаВФайлОтвета) Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаДляВозврата.Добавить(), ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаДляВозврата;
	
КонецФункции // ПолучитьТаблицуТиповУлиц()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ВЫГРУЗКА ФАЙЛОВ

#Область ВыгрузкаФайлов

&НаКлиенте
// Предназначена для выгрузки данных из таблицы квартиросъемщиков в dbf-файл.
//
Процедура ВыгрузитьДанныеВФайлПоКвартиросъемщикам()
	
	Если Объект.КрасноярскийКрай_КвартиросъемщикиДоработка.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В таблице квартиросъемщиков отсутствуют данные для выгрузки в dbf-файл.");
		Возврат;
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
		
		ФайлВыгрузки           = Новый XBase;
		ФайлВыгрузки.Кодировка = КодировкаXBase.OEM;
		ФайлВыгрузки.Поля.Добавить("ID",      "S", "15");
		ФайлВыгрузки.Поля.Добавить("PUNKT",   "S", "30");
		ФайлВыгрузки.Поля.Добавить("TIP",     "S", "20");
		ФайлВыгрузки.Поля.Добавить("UL",      "S", "30");
		ФайлВыгрузки.Поля.Добавить("DOM",     "N", "3");
		ФайлВыгрузки.Поля.Добавить("KOR",     "N", "2");
		ФайлВыгрузки.Поля.Добавить("BDOM",    "S", "1");
		ФайлВыгрузки.Поля.Добавить("KV",      "S", "10");
		ФайлВыгрузки.Поля.Добавить("BKV",     "S", "1");
		ФайлВыгрузки.Поля.Добавить("OTCH",    "S", "7");
		ФайлВыгрузки.Поля.Добавить("SEM",     "N", "2");
		ФайлВыгрузки.Поля.Добавить("PL",      "N", "6", "2");
		ФайлВыгрузки.Поля.Добавить("DOLG",    "L");
		ФайлВыгрузки.Поля.Добавить("Z",       "S", "60");
		ФайлВыгрузки.Поля.Добавить("KVSM",    "N", "7");
		ФайлВыгрузки.Поля.Добавить("SDOLG",   "N", "9", "2");
		ФайлВыгрузки.Поля.Добавить("PER_B",   "S", "10");
		ФайлВыгрузки.Поля.Добавить("PER_E",   "S", "10");
		ФайлВыгрузки.Поля.Добавить("SOG",     "L");
		ФайлВыгрузки.Поля.Добавить("IUSOG",   "L");
		ФайлВыгрузки.Поля.Добавить("PLODN",   "N", "6", "2");
		ФайлВыгрузки.Поля.Добавить("PLODN_V", "N", "6", "2");
		ФайлВыгрузки.Поля.Добавить("FIAS_ID", "S", "36");
		
		ИмяФайла = "s" + Формат(Объект.Период, "ДФ=yy") + Формат(Объект.Период, "ДФ=MM") + "-01.dbf";
		
		ФайлВыгрузки.СоздатьФайл(ИмяКаталогаВыгрузки + "\" + ИмяФайла,); 
		ФайлВыгрузки.АвтоСохранение = Истина;
		
		Для каждого ТекСтрока Из Объект.КрасноярскийКрай_КвартиросъемщикиДоработка Цикл
			ФайлВыгрузки.Добавить();
			ЗаполнитьЗначенияСвойств(ФайлВыгрузки, ТекСтрока);
		КонецЦикла;
		
		ФайлВыгрузки.ЗакрытьФайл();
		
		Текст = "Выгрузка в файл " + ИмяФайла + " завершена!";
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(Текст);
		
	#КонецЕсли
	
КонецПроцедуры // ВыгрузитьДанныеВФайлПоКвартиросъемщикам()

&НаКлиенте
// Предназначена для выгрузки данных из таблицы сумм оплат по услугам в dbf-файл.
//
Процедура ВыгрузитьДанныеВФайлПоСуммаОплат()
	
	Если Объект.КрасноярскийКрай_СуммыОплатыУслугДоработка.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В таблице сумм оплат по услугам отсутствуют данные для выгрузки в dbf-файл.");
		Возврат;
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
		
		ФайлВыгрузки           = Новый XBase;
		ФайлВыгрузки.Кодировка = КодировкаXBase.OEM;
		ФайлВыгрузки.Поля.Добавить("NN",   "N", "7");
		ФайлВыгрузки.Поля.Добавить("ID",   "S", "15");
		ФайлВыгрузки.Поля.Добавить("USL",  "N", "3");
		ФайлВыгрузки.Поля.Добавить("S1",   "N", "9", "2");
		ФайлВыгрузки.Поля.Добавить("S2",   "N", "9", "2");
		ФайлВыгрузки.Поля.Добавить("S3",   "N", "9", "2");
		ФайлВыгрузки.Поля.Добавить("S4",   "N", "9", "2");
		ФайлВыгрузки.Поля.Добавить("S5",   "N", "9", "2");
		ФайлВыгрузки.Поля.Добавить("PER",  "N", "2");
		ФайлВыгрузки.Поля.Добавить("CHET", "L");
		ФайлВыгрузки.Поля.Добавить("OTCH", "S", "7");
		ФайлВыгрузки.Поля.Добавить("ITOG", "L");
		
		ИмяФайла = "s" + Формат(Объект.Период, "ДФ=yy") + Формат(Объект.Период, "ДФ=MM") + "-02.dbf";
		
		ФайлВыгрузки.СоздатьФайл(ИмяКаталогаВыгрузки + "\" + ИмяФайла,); 
		ФайлВыгрузки.АвтоСохранение = Истина;
		
		Для каждого ТекСтрока Из Объект.КрасноярскийКрай_СуммыОплатыУслугДоработка Цикл
			ФайлВыгрузки.Добавить();
			ЗаполнитьЗначенияСвойств(ФайлВыгрузки, ТекСтрока);
			ФайлВыгрузки.NN = ТекСтрока.НомерСтроки;
		КонецЦикла;
		
		ФайлВыгрузки.ЗакрытьФайл();
		
		Текст = "Выгрузка в файл " + ИмяФайла + " завершена!";
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(Текст);
		
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
// Предназначена для выгрузки данных из таблицы сведений о членах семьи в dbf-файл.
//
Процедура ВыгрузитьДанныеВФайлСведенийПоЧленамСемьи()
	
	Если Объект.КрасноярскийКрай_ЧленыСемьиДоработка.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В таблице сведений о членах семьи отсутствуют данные для выгрузки в dbf-файл.");
		Возврат;
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
		
		ФайлВыгрузки           = Новый XBase;
		ФайлВыгрузки.Кодировка = КодировкаXBase.OEM;
		ФайлВыгрузки.Поля.Добавить("NN",    "N", "7");
		ФайлВыгрузки.Поля.Добавить("ID",    "S", "15");
		ФайлВыгрузки.Поля.Добавить("FIO",   "S", "60");
		ФайлВыгрузки.Поля.Добавить("DR",    "S", "10");
		ФайлВыгрузки.Поля.Добавить("SX",    "S", "1");
		ФайлВыгрузки.Поля.Добавить("VR",    "N", "2");
		ФайлВыгрузки.Поля.Добавить("UDT",   "N", "2");
		ФайлВыгрузки.Поля.Добавить("UDS",   "S", "10");
		ФайлВыгрузки.Поля.Добавить("UDN",   "N", "7");
		ФайлВыгрузки.Поля.Добавить("UDD",   "S", "10");
		ФайлВыгрузки.Поля.Добавить("ORGAN", "S", "100");
		ФайлВыгрузки.Поля.Добавить("RO",    "N", "2");
		ФайлВыгрузки.Поля.Добавить("DD",    "N", "2");
		ФайлВыгрузки.Поля.Добавить("DREG",  "S", "10");
		ФайлВыгрузки.Поля.Добавить("DVYB",  "S", "10");
		ФайлВыгрузки.Поля.Добавить("POTS",  "S", "250");
		
		ИмяФайла = "s" + Формат(Объект.Период, "ДФ=yy") + Формат(Объект.Период, "ДФ=MM") + "-2a.dbf";
		
		ФайлВыгрузки.СоздатьФайл(ИмяКаталогаВыгрузки + "\" + ИмяФайла);
		ФайлВыгрузки.АвтоСохранение = Истина;
		
		Для каждого ТекСтрока Из Объект.КрасноярскийКрай_ЧленыСемьиДоработка Цикл
			ФайлВыгрузки.Добавить();
			ЗаполнитьЗначенияСвойств(ФайлВыгрузки, ТекСтрока);
		КонецЦикла;
		
		ФайлВыгрузки.ЗакрытьФайл();
		
		Текст = "Выгрузка в файл " + ИмяФайла + " завершена!";
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(Текст);
		
	#КонецЕсли
	
КонецПроцедуры // ВыгрузитьДанныеВФайлСведенийПоЧленамСемьи()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

////////////////////////
// Период

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПериодСтрокой".
Процедура ПериодСтрокойПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Модифицированность);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ПериодСтрокой".
Процедура ПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Регулирование" поля "ПериодСтрокой".
Процедура ПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Направление,
														Модифицированность);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "ПериодСтрокой".
Процедура ПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "ПериодСтрокой".
Процедура ПериодСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

////////////////////////
// Диалог выбора файла

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Имя каталога".
//
Процедура ФайлКвартиросъемщикиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла                             = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Заголовок                   = "Выбор каталога файлов";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ФайлКвартиросъемщикиНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла)));
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик результата работы диалога выбора файла
//
Процедура ФайлКвартиросъемщикиНачалоВыбораЗавершение(ВыбранныйКаталог, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если (ВыбранныйКаталог <> Неопределено) Тогда
		ИмяКаталогаВыгрузки = ДиалогВыбораФайла.Каталог;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Имя каталога выгрузки".
//
Процедура ИмяКаталогаВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НачатьЗапускПриложения(Новый ОписаниеОповещения("ИмяКаталогаВыгрузкиОткрытиеЗавершение", ЭтотОбъект), "explorer " + ИмяКаталогаВыгрузки);
	
КонецПроцедуры // ИмяКаталогаВыгрузкиОткрытие()

&НаКлиенте
Процедура ИмяКаталогаВыгрузкиОткрытиеЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры


#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область КомандаНастройка

////////////////////////
// Команда "Настройка"

&НаКлиенте
// Обработчик команды "КомандаНастройка".
//
Процедура КомандаНастройка(Команда)
	
	АдресНастроекВХранилище = ПоместитьНастройкиВХранилище();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаНастройкаЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты.Форма.КрасноярскийКрай_ФормаНастройки2", Новый Структура("АдресНастроекВХранилище", АдресНастроекВХранилище), , , , , ОписаниеОповещения);
	
КонецПроцедуры // КомандаНастройка()

&НаКлиенте
// Обработчик результата опроса команды "КомандаНастройка".
//
Процедура КомандаНастройкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		ПолучитьНастройкиИзХранилища(Результат);
	КонецЕсли;
	
КонецПроцедуры // КомандаНастройкаЗавершение()

////////////////////////
// Работа с временным хранилищем

&НаСервере
// Помещает настройки во временное хранилище.
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("КрасноярскийКрай_ТаблицаУслуг",          Объект.КрасноярскийКрай_ТаблицаУслуг.Выгрузить());
	СтруктураПараметров.Вставить("КрасноярскийКрай_УслугиЭлектроэнергии",  Объект.КрасноярскийКрай_УслугиЭлектроэнергии.Выгрузить());
	СтруктураПараметров.Вставить("КрасноярскийКрай_ТипыУлиц",              Объект.КрасноярскийКрай_ТипыУлиц.Выгрузить());
	СтруктураПараметров.Вставить("КрасноярскийКрай_УдостоверенияЛичности", Объект.КрасноярскийКрай_УдостоверенияЛичности.Выгрузить());
	СтруктураПараметров.Вставить("КатегорияЖильцов",                       Объект.КатегорияЖильцов);
	СтруктураПараметров.Вставить("ВыводЛицевыхСчетов",                     Объект.ВыводЛицевыхСчетов);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураПараметров, Новый УникальныйИдентификатор);
	
КонецФункции // ПоместитьНастройкиВХранилище()

&НаСервере
// Получает настройки из временного хранилища.
//
Функция ПолучитьНастройкиИзХранилища(АдресНастроекВХранилище)
	
	СтруктураПараметров = ПолучитьИзВременногоХранилища(АдресНастроекВХранилище);
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		Если СтруктураПараметров.Свойство("КрасноярскийКрай_ТаблицаУслуг") Тогда
			Объект.КрасноярскийКрай_ТаблицаУслуг.Загрузить(СтруктураПараметров.КрасноярскийКрай_ТаблицаУслуг);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("КрасноярскийКрай_УслугиЭлектроэнергии") Тогда
			Объект.КрасноярскийКрай_УслугиЭлектроэнергии.Загрузить(СтруктураПараметров.КрасноярскийКрай_УслугиЭлектроэнергии);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("КрасноярскийКрай_ТипыУлиц") Тогда
			Объект.КрасноярскийКрай_ТипыУлиц.Загрузить(СтруктураПараметров.КрасноярскийКрай_ТипыУлиц);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("КрасноярскийКрай_УдостоверенияЛичности") Тогда
			Объект.КрасноярскийКрай_УдостоверенияЛичности.Загрузить(СтруктураПараметров.КрасноярскийКрай_УдостоверенияЛичности);
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("КатегорияЖильцов") Тогда
			Объект.КатегорияЖильцов = СтруктураПараметров.КатегорияЖильцов;
		КонецЕсли;
		
		врВыводЛицевыхСчетов = Неопределено;
		Если СтруктураПараметров.Свойство("ВыводЛицевыхСчетов", врВыводЛицевыхСчетов) Тогда
			Объект.ВыводЛицевыхСчетов = врВыводЛицевыхСчетов;
		Иначе
			// По умолчанию.
			Объект.ВыводЛицевыхСчетов = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции // ПолучитьНастройкиИзХранилища()

#КонецОбласти

#Область КомандаИнструкция

&НаКлиенте
// Обработчик команды "КомандаСправочнаяИнформация".
//
Процедура КомандаСправочнаяИнформация(Команда)
	
	ОткрытьСправкуФормы();
	
КонецПроцедуры // КомандаСправочнаяИнформация()

#КонецОбласти

////////////////////////
// Заполнение данных

#Область ЗаполнениеДанных

&НаКлиенте
// Обработчик команды "КомандаЗаполнитьВсе".
Процедура КомандаЗаполнитьВсе(Команда)
	
	ТекстОшибки = ПроверкаУсловийДляВЗаполненияТаблиц();
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если Объект.КрасноярскийКрай_СуммыОплатыУслугДоработка.Количество() > 0
	 ИЛИ Объект.КрасноярскийКрай_СуммыОплатыУслугДоработка.Количество() > 0
	 ИЛИ Объект.КрасноярскийКрай_ЧленыСемьиДоработка.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаЗаполнитьВсеЗавершение", ЭтотОбъект);
		
		ТекстВопроса = "Перед заполнением все таблицы выгрузки будут очищены. Продолжить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		ЗаполнитьВсеНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата опроса команды "КомандаЗаполнитьВсе".
Процедура КомандаЗаполнитьВсеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьВсеНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьВсеЗавершение()

&НаКлиенте
// Обработчик команды "КомандаКвартиросъемщикиЗаполнить".
//
Процедура КомандаКвартиросъемщикиЗаполнить(Команда)
	
	ТекстОшибки = ПроверкаУсловийДляВЗаполненияТаблиц();
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если Объект.КрасноярскийКрай_КвартиросъемщикиДоработка.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаКвартиросъемщикиЗаполнитьЗавершение", ЭтотОбъект);
		
		ТекстВопроса = "Перед заполнением таблица квартиросъемщиков будет очищена. Продолжить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		КомандаКвартиросъемщикиЗаполнитьНаСервере();
	КонецЕсли;
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Для заполнения поля ""Главный квартиросъемщик"" необходимо заполнить/перезаполнить таблицу сведений о членах семьи!");
	
КонецПроцедуры // КомандаКвартиросъемщикиЗаполнить()

&НаКлиенте
// Обработчик результата опроса команды "КомандаКвартиросъемщикиЗаполнить".
Процедура КомандаКвартиросъемщикиЗаполнитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Объект.КрасноярскийКрай_КвартиросъемщикиДоработка.Очистить();
		
		КомандаКвартиросъемщикиЗаполнитьНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаСуммыОплатыУслугЗаполнить".
Процедура КомандаСуммыОплатыУслугЗаполнить(Команда)
	
	Если Объект.КрасноярскийКрай_КвартиросъемщикиДоработка.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Перед заполнением таблицы членов семьи необходимо заполнить таблицу квартиросъещиков!");
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = ПроверкаУсловийДляВЗаполненияТаблиц();
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если Объект.КрасноярскийКрай_СуммыОплатыУслугДоработка.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаСуммыОплатыУслугЗаполнитьЗавершение", ЭтотОбъект);
		
		ТекстВопроса = "Перед заполнением таблица с суммами оплат по услугам будет очищена. Продолжить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		КомандаСуммыОплатыУслугЗаполнитьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата опроса команды "КомандаСуммыОплатыУслугЗаполнить".
Процедура КомандаСуммыОплатыУслугЗаполнитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Объект.КрасноярскийКрай_СуммыОплатыУслугДоработка.Очистить();
		
		КомандаСуммыОплатыУслугЗаполнитьНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаЧленыСемьиЗаполнить".
Процедура КомандаЧленыСемьиЗаполнить(Команда)
	
	Если Объект.КрасноярскийКрай_КвартиросъемщикиДоработка.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Перед заполнением таблицы членов семьи необходимо заполнить таблицу квартиросъещиков!");
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = ПроверкаУсловийДляВЗаполненияТаблиц();
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если Объект.КрасноярскийКрай_ЧленыСемьиДоработка.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаЧленыСемьиЗаполнитьЗавершение", ЭтотОбъект);
		
		ТекстВопроса = "Перед заполнением таблица членов семьи будет очищена. Продолжить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		КомандаЧленыСемьиЗаполнитьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата опроса команды "КомандаЧленыСемьиЗаполнить".
Процедура КомандаЧленыСемьиЗаполнитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Объект.КрасноярскийКрай_ЧленыСемьиДоработка.Очистить();
		
		КомандаЧленыСемьиЗаполнитьНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура заполнения всех данных.
Процедура ЗаполнитьВсеНаСервере()
	
	Объект.КрасноярскийКрай_КвартиросъемщикиДоработка.Очистить();
	Объект.КрасноярскийКрай_СуммыОплатыУслугДоработка.Очистить();
	Объект.КрасноярскийКрай_ЧленыСемьиДоработка.Очистить();
	
	ТаблицаТиповУлиц         = ПолучитьТаблицуТиповУлиц();
	ТаблицаСоответствияУслуг = ПолучитьТаблицуСоответствияУслуг();
	
	ОбработкаОбъект = ДанныеФормыВЗначение(Объект, Тип("ОбработкаОбъект.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты"));
	// Вызов метода необходим для отработки механизма вывода обычных сообщений пользователю об ошибках.
	УстановитьСоответствиеОбъектаИРеквизитаФормы(ОбработкаОбъект, "Объект");
	ОбработкаОбъект.СформироватьТаблицуКвартиросъемщиков(ТаблицаСоответствияУслуг, ТаблицаТиповУлиц, 2);
	ОбработкаОбъект.СформироватьТаблицуСуммОплатПоУслугам(ТаблицаСоответствияУслуг, 2);
	ОбработкаОбъект.СформироватьТаблицуСведенийОЧленахСемьи(2);
	ЗначениеВДанныеФормы(ОбработкаОбъект, Объект);
	
КонецПроцедуры // ЗаполнитьВсеНаСервере()

&НаСервере
// Процедура заполнения таблицы квартиросъемщиков.
Процедура КомандаКвартиросъемщикиЗаполнитьНаСервере()
	
	ТаблицаТиповУлиц         = ПолучитьТаблицуТиповУлиц();
	ТаблицаСоответствияУслуг = ПолучитьТаблицуСоответствияУслуг();
	
	ОбработкаОбъект = ДанныеФормыВЗначение(Объект, Тип("ОбработкаОбъект.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты"));
	УстановитьСоответствиеОбъектаИРеквизитаФормы(ОбработкаОбъект, "Объект");
	ОбработкаОбъект.СформироватьТаблицуКвартиросъемщиков(ТаблицаСоответствияУслуг, ТаблицаТиповУлиц, 2);
	ЗначениеВДанныеФормы(ОбработкаОбъект, Объект);
	
КонецПроцедуры // КомандаКвартиросъемщикиЗаполнитьНаСервере()

&НаСервере
// Процедура заполнения таблицы сумм оплат услуг.
Процедура КомандаСуммыОплатыУслугЗаполнитьНаСервере()
	
	ТаблицаСоответствияУслуг = ПолучитьТаблицуСоответствияУслуг();
	
	ОбработкаОбъект = ДанныеФормыВЗначение(Объект, Тип("ОбработкаОбъект.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты"));
	УстановитьСоответствиеОбъектаИРеквизитаФормы(ОбработкаОбъект, "Объект");
	ОбработкаОбъект.СформироватьТаблицуСуммОплатПоУслугам(ТаблицаСоответствияУслуг, 2);
	ЗначениеВДанныеФормы(ОбработкаОбъект, Объект);
	
КонецПроцедуры // КомандаСуммыОплатыУслугЗаполнитьНаСервере()

&НаСервере
// Процедура заполнения таблицы членов семьи.
Процедура КомандаЧленыСемьиЗаполнитьНаСервере()
	
	ОбработкаОбъект = ДанныеФормыВЗначение(Объект, Тип("ОбработкаОбъект.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты"));
	УстановитьСоответствиеОбъектаИРеквизитаФормы(ОбработкаОбъект, "Объект");
	ОбработкаОбъект.СформироватьТаблицуСведенийОЧленахСемьи(2);
	ЗначениеВДанныеФормы(ОбработкаОбъект, Объект);
	
КонецПроцедуры // КомандаЧленыСемьиЗаполнитьНаСервере()

#КонецОбласти

////////////////////////
// Сохранение файлов

#Область СохранениеФайлов

&НаКлиенте
// Обработчик команды "КомандаВыгрузитьВсе".
Процедура КомандаВыгрузитьВсе(Команда)
	
	Если ПустаяСтрока(ИмяКаталогаВыгрузки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указан каталог выгрузки!");
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(ИмяКаталогаВыгрузки);
	Файл.НачатьПроверкуСуществования(Новый ОписаниеОповещения("КомандаВыгрузитьВсеЗавершениеКаталогСуществует",ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата команды "КомандаВыгрузитьВсе".
//
Процедура КомандаВыгрузитьВсеЗавершениеКаталогСуществует(Существует, ДополнительныеПараметры) Экспорт
	
	Если НЕ Существует Тогда
		ПоказатьПредупреждение(Неопределено, "Каталог не существует");
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДанныеВФайлПоКвартиросъемщикам();
	ВыгрузитьДанныеВФайлПоСуммаОплат();
	ВыгрузитьДанныеВФайлСведенийПоЧленамСемьи();
	
КонецПроцедуры


#КонецОбласти