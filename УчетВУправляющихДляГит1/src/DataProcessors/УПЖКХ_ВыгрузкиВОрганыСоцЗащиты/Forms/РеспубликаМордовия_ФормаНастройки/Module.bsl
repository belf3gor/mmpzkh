
#Область ПрочиеПроцедурыИФункции

&НаСервере
// Процедура заполняет таблицу услуг на сервере.
//
Процедура ЗаполнитьТаблицуУслугНаСервере(Идентификатор)
	
	Отбор = Новый Структура;
	Отбор.Вставить("Идентификатор", Идентификатор);
	
	НайденныеСтроки = Объект.РеспубликаМордовия_ТаблицаУслугДляВыгрузки.Выгрузить(Отбор, "УслугаВБазе");
	
	Для Каждого ТекСтрока из НайденныеСтроки Цикл
		ЗаполнитьЗначенияСвойств(ТП_УслугаВБазе.Добавить(), ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Формирует первоначальный список услуг.
//
Процедура ПолучитьСпискиУслуг()
	
	СписокУслуг = Новый СписокЗначений;
	
	СписокУслуг.Добавить(1,  "Плата за обращение с твердыми коммунальными отходами");
	СписокУслуг.Добавить(2,  "Плата за содержание общей площади жилых помещений");
	СписокУслуг.Добавить(3,  "Плата за наем общей площади жилых помещений");
	СписокУслуг.Добавить(4,  "Плата за ремонт общей площади жилых помещений");
	СписокУслуг.Добавить(5,  "Предоставление жилых помещений по договору найма в домах всех форм собственности");
	СписокУслуг.Добавить(6,  "Содержание и текущий ремонт, включая места общего пользования в жилых зданиях, за счет средств по оплате жилья");
	СписокУслуг.Добавить(7,  "Управление жилым фондом");
	СписокУслуг.Добавить(8,  "Капитальный ремонт, включая места общего пользования в жилых зданиях, за счет средств по оплате жилья");
	СписокУслуг.Добавить(9,  "Предоставление услуг сетевого газоснабжения");
	СписокУслуг.Добавить(10, "Предоставление услуг горячего водоснабжения");
	СписокУслуг.Добавить(11, "Предоставление услуг центрального отопления");
	СписокУслуг.Добавить(12, "Предоставление услуг водоснабжения (без горячей воды)");
	СписокУслуг.Добавить(13, "Предоставление электроэнергии");
	СписокУслуг.Добавить(14, "Предоставление услуг водоотведения");
	СписокУслуг.Добавить(15, "Предоставление услуг сжиженного газоснабжения");
	СписокУслуг.Добавить(16, "Топливо (доставка)");
	СписокУслуг.Добавить(17, "Топливо (приобретение)");
	СписокУслуг.Добавить(18, "Оплата горячего водоснабжения, протребляемого при содержание общего имущества");
	СписокУслуг.Добавить(19, "Оплата холодного водоснабжения, протребляемого при содержание общего имущества");
	СписокУслуг.Добавить(20, "Оплата электрической энергии, потребляемой при содержание общего имущества");
	СписокУслуг.Добавить(21, "Оплата за отведение сточных вод в целях содержания общего имущества");
	СписокУслуг.Добавить(22, "(по педагогам) (резерв)");
	СписокУслуг.Добавить(23, "(по педагогам) Плата за содержание общей площади жилых помещений");
	СписокУслуг.Добавить(24, "(по педагогам) Плата за наем общей площади жилых помещений");
	СписокУслуг.Добавить(25, "(по педагогам) Плата за ремонт общей площади жилых помещений");
	СписокУслуг.Добавить(26, "(по педагогам) Предоставление жилых помещений по договору найма в домах всех форм собственности");
	СписокУслуг.Добавить(27, "(по педагогам) Содержание и текущий ремонт, включая места общего пользования в жилых зданиях, за счет средств по оплате жилья");
	СписокУслуг.Добавить(28, "(по педагогам) Управление жилым фондом");
	СписокУслуг.Добавить(29, "(по педагогам) Предоставление услуг сетевого газоснабжения");
	СписокУслуг.Добавить(30, "(по педагогам) Предоставление услуг центрального отопления");
	СписокУслуг.Добавить(31, "(по педагогам) Предоставление электроэнергии");
	СписокУслуг.Добавить(32, "(по педагогам) (резерв)");
	СписокУслуг.Добавить(33, "(по педагогам) Топливо (доставка)");
	СписокУслуг.Добавить(34, "(по педагогам) Топливо (приобретение)");
	СписокУслуг.Добавить(35, "(по педагогам) (резерв)");
	СписокУслуг.Добавить(36, "(по педагогам) (резерв)");
	СписокУслуг.Добавить(37, "(по педагогам) (резерв)");
	
	Для Каждого ЭлементСписка Из СписокУслуг Цикл
		НоваяУслуга = Объект.РеспубликаМордовия_ТаблицаУслуг.Добавить();
		НоваяУслуга.Услуга        = ЭлементСписка.Представление;
		НоваяУслуга.Идентификатор = ЭлементСписка.Значение;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьСпискиУслуг()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// РАБОТА С ВРЕМЕННЫМ ХРАНИЛИЩЕМ

#Область РаботаСВременнымХранилищем

&НаСервере
// Помещает настройки во временное хранилище.
//
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ВыводРеквизитаЛицевогоСчета",  Объект.ВыводРеквизитаЛицевогоСчета);
	СтруктураНастроек.Вставить("РеспубликаМордовия_ЖКУ",       Объект.РеспубликаМордовия_ТаблицаУслуг.Выгрузить());
	СтруктураНастроек.Вставить("РеспубликаМордовия_ЖКУ_ВБазе", Объект.РеспубликаМордовия_ТаблицаУслугДляВыгрузки.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПризнакУдаления = Ложь;
	
	// Получаем настройки из хранилища.
	Если Параметры.Свойство("АдресНастроекВХранилище") И Не Параметры.АдресНастроекВХранилище = Неопределено Тогда
		
		СтруктураНастроек = ПолучитьИзВременногоХранилища(Параметры.АдресНастроекВХранилище);
		
		Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
			
			СтруктураНастроек.Свойство("ВыводРеквизитаЛицевогоСчета", Объект.ВыводРеквизитаЛицевогоСчета);
			
			Если СтруктураНастроек.Свойство("РеспубликаМордовия_ЖКУ") Тогда
				Объект.РеспубликаМордовия_ТаблицаУслуг.Загрузить(СтруктураНастроек.РеспубликаМордовия_ЖКУ);
			КонецЕсли;
			
			Если СтруктураНастроек.Свойство("РеспубликаМордовия_ЖКУ_ВБазе") Тогда
				Объект.РеспубликаМордовия_ТаблицаУслугДляВыгрузки.Загрузить(СтруктураНастроек.РеспубликаМордовия_ЖКУ_ВБазе);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.РеспубликаМордовия_ТаблицаУслуг.Количество() = 0 Тогда
		ПолучитьСпискиУслуг();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "КомандаСохранить".
//
Процедура КомандаСохранить(Команда)
	
	Закрыть(ПоместитьНастройкиВХранилище());
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" табличного поля "ТП_УслугаВБазе".
//
Процедура ТП_УслугаВБазеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Устанавливаем запрет на добавление строк копированием.
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" табличного поля "ТП_УслугаВБазе".
//
Процедура ТП_УслугаВБазеПередУдалением(Элемент, Отказ)
	
	Если ПризнакУдаления Тогда
		Отказ = Истина;
		ПризнакУдаления = Ложь;
	Иначе
		// При удалении строки удаляем соответствующие записи в РеспубликаМордовия_УслугиВБазе.
		УслугаВБазе              = Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе;
		ИдентификаторУслугиВОСЗН = Элементы.РеспубликаМордовия_ЖКУ.ТекущиеДанные.Идентификатор;
		УслугаВОСЗН              = Элементы.РеспубликаМордовия_ЖКУ.ТекущиеДанные.Услуга;
		
		Отбор = Новый Структура;
		Отбор.Вставить("УслугаВБазе",        УслугаВБазе);
		Отбор.Вставить("Идентификатор",      ИдентификаторУслугиВОСЗН);
		Отбор.Вставить("УслугаСоответствия", УслугаВОСЗН);
		
		СтрокиУдаления = Объект.РеспубликаМордовия_ТаблицаУслугДляВыгрузки.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
			Объект.РеспубликаМордовия_ТаблицаУслугДляВыгрузки.Удалить(СтрокаУдаления);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередОкончаниемРедактирования" таблицы "УслугаВБазе".
//
Процедура ТП_УслугаВБазеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Добавление незаполненных полей недопустимо!");
		ПризнакУдаления = Истина;
		ТП_УслугаВБазе.Удалить(Элементы.ТП_УслугаВБазе.ТекущиеДанные);
		
		Если ЗначениеЗаполнено(ПредыдущаяУслуга) Тогда
			Идентификатор   = Элементы.РеспубликаМордовия_ЖКУ.ТекущиеДанные.Идентификатор;
			ПризнакУдаления = Истина;
			Отбор = Новый Структура;
			Отбор.Вставить("Идентификатор", Идентификатор);
			Отбор.Вставить("УслугаВБазе",   ПредыдущаяУслуга);
			
			СтрокиУдаления = Объект.РеспубликаМордовия_ТаблицаУслугДляВыгрузки.НайтиСтроки(Отбор);
			
			Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
				Объект.РеспубликаМордовия_ТаблицаУслугДляВыгрузки.Удалить(СтрокаУдаления);
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриОкончанииРедактирования" табличного поля "ТП_УслугаВБазе".
//
Процедура ТП_УслугаВБазеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		// Добавляем запись в РеспубликаМордовия_УслугиВБазе.
		УслугаВБазе              = Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе;
		ИдентификаторУслугиВОСЗН = Элементы.РеспубликаМордовия_ЖКУ.ТекущиеДанные.Идентификатор;
		УслугаВОСЗН              = Элементы.РеспубликаМордовия_ЖКУ.ТекущиеДанные.Услуга;
		
		Если НоваяСтрока Тогда
			НоваяСтрокаСоответствия                    = Объект.РеспубликаМордовия_ТаблицаУслугДляВыгрузки.Добавить();
			НоваяСтрокаСоответствия.УслугаВБазе        = УслугаВБазе;
			НоваяСтрокаСоответствия.Идентификатор      = ИдентификаторУслугиВОСЗН;
			НоваяСтрокаСоответствия.УслугаСоответствия = УслугаВОСЗН;
		Иначе
			Если НЕ ПредыдущаяУслуга = УслугаВБазе Тогда
				Отбор = Новый Структура;
				Отбор.Вставить("Идентификатор", ИдентификаторУслугиВОСЗН);
				Отбор.Вставить("УслугаВБазе",   ПредыдущаяУслуга);
				
				НайденнаяСтрока = Объект.РеспубликаМордовия_ТаблицаУслугДляВыгрузки.НайтиСтроки(Отбор);
				Если НайденнаяСтрока.Количество() = 1 Тогда
					НайденнаяСтрока[0].УслугаВБазе = УслугаВБазе;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриНачалеРедактирования" табличного поля "ТП_УслугаВБазе".
//
Процедура ТП_УслугаВБазеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// Запоминаем предыдущее значение перезаписываемой строки.
	Если НЕ НоваяСтрока Тогда
		ПредыдущаяУслуга = Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "УслугаВБазе" таблицы "Услуги в Базе".
//
Процедура ТП_УслугаВБазеУслугаВБазеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Список уже выбранных услуг по данной услуге в ОСЗН.
	СписокВыбранныхУслуг = Новый СписокЗначений;
	СтрокиВыбранныхУслуг = Объект.РеспубликаМордовия_ТаблицаУслугДляВыгрузки.НайтиСтроки(Новый Структура("Идентификатор", Элементы.РеспубликаМордовия_ЖКУ.ТекущиеДанные.Идентификатор));
	Для Каждого СтрокаВыбраннойУслуги Из СтрокиВыбранныхУслуг Цикл
		СписокВыбранныхУслуг.Добавить(СтрокаВыбраннойУслуги.УслугаВБазе);
	КонецЦикла;
	
	ВидСравненияВОтборе = ВидСравненияКомпоновкиДанных.НеВСписке;
	
	Форма = ПолучитьФорму("Справочник.КВП_Услуги.ФормаВыбора", Новый Структура("ТекущаяСтрока", Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе), Элемент);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Форма.Список.КомпоновщикНастроек.Настройки.Отбор, "Ссылка", СписокВыбранныхУслуг,
															ВидСравненияКомпоновкиДанных.НеВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" табличного поля "Услуги в ОСЗН".
//
Процедура РеспубликаМордовия_ЖКУПриАктивизацииСтроки(Элемент)
	
	// При активации строки УслугаВОСЗН, загружаем соответствия в УслугаВБазе.
	ТП_УслугаВБазе.Очистить();
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		Идентификатор = Элемент.ТекущиеДанные.Идентификатор;
		ЗаполнитьТаблицуУслугНаСервере(Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
