
//////////////////////////////////////////////////////////////////////////
// СОХРАНЯЕМЫЕ НАСТРОЙКИ

#Область РаботаСНастройками

&НаСервере
// Процедура восстановления настроек.
Процедура ВосстановитьНастройки()
	
	СтруктураПараметров = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("СвердловскаяОбластьВерсия5_ВыгрузкаВОСЗН", "ПараметрыВыгрузки");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		СтруктураПараметров.Свойство("ИмяКаталогаЗагрузки",   ИмяКаталогаЗагрузки);
		СтруктураПараметров.Свойство("ИмяФайлаЗагрузки",      ИмяФайлаЗагрузки);
		СтруктураПараметров.Свойство("ИмяФайлаЗагрузкиУслуг", ИмяФайлаЗагрузкиУслуг);
		СтруктураПараметров.Свойство("КодОрганизации",        КодОрганизации);
		
		СтруктураПараметров.Свойство("КоридорнаяСистемаПроживания", КоридорнаяСистемаПроживания);
		СтруктураПараметров.Свойство("ТипОтопления",                ТипОтопления);
		СтруктураПараметров.Свойство("НаличиеВыгребнойЯмы",         НаличиеВыгребнойЯмы);
		СтруктураПараметров.Свойство("ТипВодонагревателя",          ТипВодонагревателя);
		СтруктураПараметров.Свойство("Газоснабжение",               Газоснабжение);
		СтруктураПараметров.Свойство("МестоРасположенияДуша",       МестоРасположенияДуша);
		СтруктураПараметров.Свойство("НаличиеДуша",                 НаличиеДуша);
		СтруктураПараметров.Свойство("УчитыватьВидыТарифовУслуг",   мУчитыватьВидыТарифовУслуг);
		
		врТаблицаУслугВОСЗН   = Новый ТаблицаЗначений;
		врТаблицаУслугВБазе   = Новый ТаблицаЗначений;
		врТаблицаЛКДетейСирот = Новый ТаблицаЗначений;
		врТаблицаУслугиБезОДН = Новый ТаблицаЗначений;
		
		СтруктураПараметров.Свойство("СвердловскаяОбласть_УслугиВОСЗН", врТаблицаУслугВОСЗН);
		Если НЕ врТаблицаУслугВОСЗН = Неопределено Тогда
			Объект.СвердловскаяОбласть_УслугиВОСЗН.Загрузить(врТаблицаУслугВОСЗН);
		КонецЕсли;
		
		СтруктураПараметров.Свойство("СвердловскаяОбласть_УслугиВБазе", врТаблицаУслугВБазе);
		Если НЕ врТаблицаУслугВБазе = Неопределено Тогда
			Объект.СвердловскаяОбласть_УслугиВБазе.Загрузить(врТаблицаУслугВБазе);
		КонецЕсли;
		
		СтруктураПараметров.Свойство("СвердловскаяОбласть_ЛьготныеКатегорииДетейСирот", врТаблицаЛКДетейСирот);
		Если НЕ врТаблицаЛКДетейСирот = Неопределено Тогда
			Объект.СвердловскаяОбласть_ЛьготныеКатегорииДетейСирот.Загрузить(врТаблицаЛКДетейСирот);
		КонецЕсли;
		
		СтруктураПараметров.Свойство("УслугиБезОДН", врТаблицаУслугиБезОДН);
		Если НЕ врТаблицаУслугиБезОДН = Неопределено Тогда
			Объект.УслугиБезОДН.Загрузить(врТаблицаУслугиБезОДН);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура сохранения настроек.
Процедура СохранитьНастройки()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяКаталогаЗагрузки",                             ИмяКаталогаЗагрузки);
	СтруктураПараметров.Вставить("ИмяФайлаЗагрузки",                                ИмяФайлаЗагрузки);
	СтруктураПараметров.Вставить("ИмяФайлаЗагрузкиУслуг",                           ИмяФайлаЗагрузкиУслуг);
	СтруктураПараметров.Вставить("КодОрганизации",                                  КодОрганизации);
	СтруктураПараметров.Вставить("СвердловскаяОбласть_УслугиВОСЗН",                 Объект.СвердловскаяОбласть_УслугиВОСЗН.Выгрузить());
	СтруктураПараметров.Вставить("СвердловскаяОбласть_УслугиВБазе",                 Объект.СвердловскаяОбласть_УслугиВБазе.Выгрузить());
	СтруктураПараметров.Вставить("СвердловскаяОбласть_ЛьготныеКатегорииДетейСирот", Объект.СвердловскаяОбласть_ЛьготныеКатегорииДетейСирот.Выгрузить());
	СтруктураПараметров.Вставить("УслугиБезОДН",                                    Объект.УслугиБезОДН.Выгрузить());
	
	СтруктураПараметров.Вставить("КоридорнаяСистемаПроживания", КоридорнаяСистемаПроживания);
	СтруктураПараметров.Вставить("ТипОтопления",                ТипОтопления);
	СтруктураПараметров.Вставить("НаличиеВыгребнойЯмы",         НаличиеВыгребнойЯмы);
	СтруктураПараметров.Вставить("ТипВодонагревателя",          ТипВодонагревателя);
	СтруктураПараметров.Вставить("Газоснабжение",               Газоснабжение);
	СтруктураПараметров.Вставить("МестоРасположенияДуша",       МестоРасположенияДуша);
	СтруктураПараметров.Вставить("НаличиеДуша",                 НаличиеДуша);
	СтруктураПараметров.Вставить("УчитыватьВидыТарифовУслуг",   мУчитыватьВидыТарифовУслуг);
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("СвердловскаяОбластьВерсия5_ВыгрузкаВОСЗН", "ПараметрыВыгрузки", СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// РАБОТА С ВРЕМЕННЫМ ХРАНИЛИЩЕМ

#Область РаботаСВременнымХранилищем

&НаСервере
// Помещает настройки во временное хранилище.
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ИмяФайлаЗагрузкиУслуг",                           ИмяФайлаЗагрузкиУслуг);
	СтруктураНастроек.Вставить("СвердловскаяОбласть_УслугиВОСЗН",                 Объект.СвердловскаяОбласть_УслугиВОСЗН.Выгрузить());
	СтруктураНастроек.Вставить("СвердловскаяОбласть_УслугиВБазе",                 Объект.СвердловскаяОбласть_УслугиВБазе.Выгрузить());
	СтруктураНастроек.Вставить("СвердловскаяОбласть_ЛьготныеКатегорииДетейСирот", Объект.СвердловскаяОбласть_ЛьготныеКатегорииДетейСирот.Выгрузить());
	СтруктураНастроек.Вставить("УслугиБезОДН",                                    Объект.УслугиБезОДН.Выгрузить());
	
	СтруктураНастроек.Вставить("КоридорнаяСистемаПроживания", КоридорнаяСистемаПроживания);
	СтруктураНастроек.Вставить("ТипОтопления",                ТипОтопления);
	СтруктураНастроек.Вставить("НаличиеВыгребнойЯмы",         НаличиеВыгребнойЯмы);
	СтруктураНастроек.Вставить("ТипВодонагревателя",          ТипВодонагревателя);
	СтруктураНастроек.Вставить("Газоснабжение",               Газоснабжение);
	СтруктураНастроек.Вставить("МестоРасположенияДуша",       МестоРасположенияДуша);
	СтруктураНастроек.Вставить("НаличиеДуша",                 НаличиеДуша);
	СтруктураНастроек.Вставить("УчитыватьВидыТарифовУслуг",   мУчитыватьВидыТарифовУслуг);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
// Получает настройки из временного хранилища.
Функция ПолучитьНастройкиИзХранилища(АдресНастроекВХранилище)
	
	СтруктураНастроек = ПолучитьИзВременногоХранилища(АдресНастроекВХранилище);
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		
		Если СтруктураНастроек.Свойство("ИмяФайлаЗагрузкиУслуг") Тогда
			ИмяФайлаЗагрузкиУслуг = СтруктураНастроек.ИмяФайлаЗагрузкиУслуг;
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("СвердловскаяОбласть_УслугиВОСЗН") Тогда
			Объект.СвердловскаяОбласть_УслугиВОСЗН.Загрузить(СтруктураНастроек.СвердловскаяОбласть_УслугиВОСЗН);
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("СвердловскаяОбласть_УслугиВБазе") Тогда
			Объект.СвердловскаяОбласть_УслугиВБазе.Загрузить(СтруктураНастроек.СвердловскаяОбласть_УслугиВБазе);
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("СвердловскаяОбласть_ЛьготныеКатегорииДетейСирот") Тогда
			Объект.СвердловскаяОбласть_ЛьготныеКатегорииДетейСирот.Загрузить(СтруктураНастроек.СвердловскаяОбласть_ЛьготныеКатегорииДетейСирот);
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("УслугиБезОДН") Тогда
			Объект.УслугиБезОДН.Загрузить(СтруктураНастроек.УслугиБезОДН);
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("КоридорнаяСистемаПроживания") Тогда
			КоридорнаяСистемаПроживания = СтруктураНастроек.КоридорнаяСистемаПроживания;
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ТипОтопления") Тогда
			ТипОтопления = СтруктураНастроек.ТипОтопления;
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("НаличиеВыгребнойЯмы") Тогда
			НаличиеВыгребнойЯмы = СтруктураНастроек.НаличиеВыгребнойЯмы;
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ТипВодонагревателя") Тогда
			ТипВодонагревателя = СтруктураНастроек.ТипВодонагревателя;
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("Газоснабжение") Тогда
			Газоснабжение = СтруктураНастроек.Газоснабжение;
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("МестоРасположенияДуша") Тогда
			МестоРасположенияДуша = СтруктураНастроек.МестоРасположенияДуша;
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("НаличиеДуша") Тогда
			НаличиеДуша = СтруктураНастроек.НаличиеДуша;
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("УчитыватьВидыТарифовУслуг") Тогда
			мУчитыватьВидыТарифовУслуг = СтруктураНастроек.УчитыватьВидыТарифовУслуг;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ДАННЫХ

#Область ЗаполнениеДанных

&НаКлиенте
// Проверяет наличие всех необходимых данных для заполнения таблиц выгрузки.
//
Функция ПроверкаУсловийДляЗаполненияТаблиц()
	
	ТекстОшибки = "";
	
	Если НЕ ЗначениеЗаполнено(Объект.Период) Тогда
		ТекстОшибки = ТекстОшибки + "Не указан период выгрузки!";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаОпределенияЗадолженности) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не указана дата определения задолженности!", "Не указана дата определения задолженности!");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не указана организация!", "Не указан организация!");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяФайлаЗагрузки) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не указано имя файла загрузки!", "Не указано имя файла загрузки!");
	КонецЕсли;
	
	Если ПустаяСтрока(КодОрганизации) Тогда
		ТекстОшибки = ТекстОшибки + "Не указан код организации!";
	КонецЕсли;
	
	Если Объект.СвердловскаяОбласть_УслугиВБазе.Количество() = 0 Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не заполнена таблица соответствия услуг!", "Не заполнена таблица соответствия услуг!");
	КонецЕсли;
	
	Если НЕ НачалоМесяца(Объект.Период) = НачалоМесяца(Объект.ДатаОпределенияЗадолженности) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Дата определения задолженности не принадлежит периоду выгрузки!", "Дата определения задолженности не принадлежит периоду выгрузки!");
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции // ПроверкаУсловийДляЗаполненияТаблиц

&НаСервере
// Процедура заполнения всех данных.
Процедура ЗаполнитьНаСервере(АдресФайла)
	
	// Запись временных данных во временный файл.
	СписокФайлов = Новый Массив;
	
	врДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайла);
	ВременныйФайл = ПолучитьИмяВременногоФайла("DBF");

	// Для чтения *.dbf формата урежем имя временного файла.
	ФайлДБФ = Новый Файл(ВременныйФайл);
	СтароеИмяФайла = ФайлДБФ.ИмяБезРасширения + ".DBF";
	НовоеИмяФайла = Лев(ФайлДБФ.ИмяБезРасширения, 8) + ".DBF";
	ВременныйФайл = СтрЗаменить(ФайлДБФ.ПолноеИмя, СтароеИмяФайла, НовоеИмяФайла);

	врДанныеФайла.Записать(ВременныйФайл);
	
	СписокФайлов.Добавить(ВременныйФайл);
	
	Кодировка = КодировкаXBase.OEM;
	
	ТаблицаДанныхФайла = Объект.СвердловскаяОбласть_ТаблицаДанных.Выгрузить();
	
	ПараметрыБлагоустройств = Новый Структура;
	ПараметрыБлагоустройств.Вставить("НаличиеДуша",                 НаличиеДуша);
	ПараметрыБлагоустройств.Вставить("КоридорнаяСистемаПроживания", КоридорнаяСистемаПроживания);
	ПараметрыБлагоустройств.Вставить("НаличиеВыгребнойЯмы",         НаличиеВыгребнойЯмы);
	ПараметрыБлагоустройств.Вставить("ТипОтопления",                ТипОтопления);
	ПараметрыБлагоустройств.Вставить("ТипВодонагревателя",          ТипВодонагревателя);
	ПараметрыБлагоустройств.Вставить("Газоснабжение",               Газоснабжение);
	ПараметрыБлагоустройств.Вставить("МестоРасположенияДуша",       МестоРасположенияДуша);
	
	ОбработкаОбъект = ДанныеФормыВЗначение(Объект, Тип("ОбработкаОбъект.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты"));
	ОбработкаОбъект.СформироватьТаблицуДанныхСвердловскВерсия6(ТаблицаДанныхФайла, Кодировка, СписокФайлов, ПараметрыБлагоустройств, мУчитыватьВидыТарифовУслуг);
	ЗначениеВДанныеФормы(ОбработкаОбъект, Объект);
	
	Если мУчитыватьВидыТарифовУслуг Тогда
		ПроверитьНаличиеПерерасчетов(ТаблицаДанныхФайла);
	КонецЕсли;
	
	Объект.СвердловскаяОбласть_ТаблицаДанных.Загрузить(ТаблицаДанныхФайла);
	
КонецПроцедуры

&НаСервере
// Проверяет наличие перерасчетов в таблице значений вгрузки.
//
Процедура ПроверитьНаличиеПерерасчетов(ТаблицаДанныхФайла)
	
	КопияТаблицыДанных = ТаблицаДанныхФайла.Скопировать();
	КопияТаблицыДанных.Сортировать("RECALC Убыв");
	
	КолВоЗаписей = КопияТаблицыДанных.Количество();
	
	Если КолВоЗаписей > 0 И (НЕ КопияТаблицыДанных[0].RECALC = 0 ИЛИ НЕ КопияТаблицыДанных[КолВоЗаписей-1].RECALC = 0) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("В таблице выгрузки имеются перерасчеты, которые необходимо проверить и откорретировать");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ВЫГРУЗКА ФАЙЛОВ

#Область ВыгрузкаФайлов

&НаКлиенте
// Предназначена для выгрузки данных из таблицы данных в dbf-файл.
//
Процедура ВыгрузитьДанныеВФайлСвердловскВерсия5()
	
	Если Объект.СвердловскаяОбласть_ТаблицаДанных.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В таблице выгружаемых данных отсутствуют данные для выгрузки в dbf-файл.");
		Возврат;
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
	
	ФайлВыгрузки           = Новый XBase;
	ФайлВыгрузки.Кодировка = КодировкаXBase.OEM;
	ФайлВыгрузки.Поля.Добавить("OVERDATE",   "D");
	ФайлВыгрузки.Поля.Добавить("ID",         "N", "7"); 
	ФайлВыгрузки.Поля.Добавить("SNILS",      "S", "11");
	ФайлВыгрузки.Поля.Добавить("LASTNAME",   "S", "50");
	ФайлВыгрузки.Поля.Добавить("FIRSTNAME",  "S", "50");
	ФайлВыгрузки.Поля.Добавить("MIDDLENAME", "S", "50");
	ФайлВыгрузки.Поля.Добавить("CITY",       "S", "50");
	ФайлВыгрузки.Поля.Добавить("STREET",     "S", "50");
	ФайлВыгрузки.Поля.Добавить("HOUSE",      "N", "5");
	ФайлВыгрузки.Поля.Добавить("BUILDING",   "S", "5");
	ФайлВыгрузки.Поля.Добавить("FLAT",       "S", "10");
	ФайлВыгрузки.Поля.Добавить("LS",         "S", "50");
	ФайлВыгрузки.Поля.Добавить("OWNERSHIP",  "N", "2");
	ФайлВыгрузки.Поля.Добавить("TYPEFLAT",   "N", "2");
	ФайлВыгрузки.Поля.Добавить("ISHOSTEL",   "N", "2");
	ФайлВыгрузки.Поля.Добавить("LIFT",       "N", "2");
	ФайлВыгрузки.Поля.Добавить("AREA",       "N", "12", "2");
	ФайлВыгрузки.Поля.Добавить("LIVAREA",    "N", "12", "2");
	ФайлВыгрузки.Поля.Добавить("SOI",        "N", "12", "2");
	ФайлВыгрузки.Поля.Добавить("SOB",        "N", "12", "2");
	ФайлВыгрузки.Поля.Добавить("SYSTEMHOME", "N", "2");
	ФайлВыгрузки.Поля.Добавить("ROOMCOUNT",  "N", "2");
	ФайлВыгрузки.Поля.Добавить("TYPEHEAT",   "N", "2");
	ФайлВыгрузки.Поля.Добавить("TYPEPLATEH", "N", "2");
	ФайлВыгрузки.Поля.Добавить("TYPEPLATE",  "N", "2");
	ФайлВыгрузки.Поля.Добавить("HOTWATER",   "N", "2");
	ФайлВыгрузки.Поля.Добавить("COLDWATER",  "N", "2");
	ФайлВыгрузки.Поля.Добавить("WHEATER",    "N", "2");
	ФайлВыгрузки.Поля.Добавить("GASSUPPLY",  "N", "2");
	ФайлВыгрузки.Поля.Добавить("CESSPOOL",   "N", "2");
	ФайлВыгрузки.Поля.Добавить("HASBATH",    "N", "2");
	ФайлВыгрузки.Поля.Добавить("HASSHOWER",  "N", "2");
	ФайлВыгрузки.Поля.Добавить("PLACESHOW",  "N", "2");
	ФайлВыгрузки.Поля.Добавить("NODNHWS",    "N", "5", "2");
	ФайлВыгрузки.Поля.Добавить("NODNGWS",    "N", "5", "2");
	ФайлВыгрузки.Поля.Добавить("FIXREGCNT",  "N", "3");
	ФайлВыгрузки.Поля.Добавить("TMPREGCNT",  "N", "3");
	ФайлВыгрузки.Поля.Добавить("UNREGCNT",   "N", "3");
	ФайлВыгрузки.Поля.Добавить("PRIVCHILD",  "N", "3");
	ФайлВыгрузки.Поля.Добавить("GUESTCHILD", "N", "3");
	ФайлВыгрузки.Поля.Добавить("AREACHILD",  "N", "12", "2");
	ФайлВыгрузки.Поля.Добавить("SERVID",     "N", "2");
	ФайлВыгрузки.Поля.Добавить("SERVDAYCNT", "N", "2");
	ФайлВыгрузки.Поля.Добавить("VOLUME",     "N", "12", "4");
	ФайлВыгрузки.Поля.Добавить("VOLUMEODPU", "N", "12", "4");
	ФайлВыгрузки.Поля.Добавить("RECALC",     "N", "12", "2");
	ФайлВыгрузки.Поля.Добавить("RECALCODPU", "N", "12", "2");
	ФайлВыгрузки.Поля.Добавить("VRECALC",    "N", "12", "4");
	ФайлВыгрузки.Поля.Добавить("VRECALCODP", "N", "12", "4");
	ФайлВыгрузки.Поля.Добавить("CHARGE",     "N", "12", "2");
	ФайлВыгрузки.Поля.Добавить("CHARGEODPU", "N", "12", "2");
	ФайлВыгрузки.Поля.Добавить("BENEFITS",   "N", "12", "2");
	ФайлВыгрузки.Поля.Добавить("VBENEFITS",  "N", "12", "4");
	ФайлВыгрузки.Поля.Добавить("NOTFOUND",   "N", "2");
	ФайлВыгрузки.Поля.Добавить("DEBT",       "N", "2");
	ФайлВыгрузки.Поля.Добавить("DEBTDATE",   "D");
	ФайлВыгрузки.Поля.Добавить("DEBTSUM",    "N", "12", "2");
	ФайлВыгрузки.Поля.Добавить("DEBTDEAL",   "N", "1");
	ФайлВыгрузки.Поля.Добавить("ODPUUSAGE",  "N", "1");
	ФайлВыгрузки.Поля.Добавить("IPUUSAGE",   "N", "1");
	
	ФайлВыгрузки.СоздатьФайл(ИмяКаталогаЗагрузки + "OUT_FILE.DBF",); 
	ФайлВыгрузки.АвтоСохранение = Истина;
	
	Для каждого ТекСтрока Из Объект.СвердловскаяОбласть_ТаблицаДанных Цикл
		ФайлВыгрузки.Добавить();
		ЗаполнитьЗначенияСвойств(ФайлВыгрузки, ТекСтрока);
	КонецЦикла;
	
	ИмяФайла = "" + КодОрганизации + "_1_" + Формат(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату(), "ДФ=ddMMyyyy") + "_" + Формат(Объект.Период, "ДФ=yyyy") + Формат(Объект.Период, "ДФ=MM") + "_6.dbf";
	
	ФайлВыгрузки.ЗакрытьФайл();
	НачатьПеремещениеФайла(Новый ОписаниеОповещения("ОбработатьРезультатПеремещенияФайла", ЭтаФорма, ИмяФайла), ИмяКаталогаЗагрузки + "OUT_FILE.DBF", ИмяКаталогаЗагрузки + ИмяФайла);
	
	#КонецЕсли
	
КонецПроцедуры // ВыгрузитьДанныеВФайлСвердловскВерсия5()

&НаКлиенте
// Обработчик результата перемещения файла.
Процедура ОбработатьРезультатПеремещенияФайла(ПеремещаемыйФайл, ДополнительныеПараметры) Экспорт
	
	Текст = "Выгрузка в файл " + ДополнительныеПараметры + " завершена!";
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(Текст);
	
КонецПроцедуры // ОбработатьРезультатПеремещенияФайла()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	ТекРабДата = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	Объект.Период = ТекРабДата;
	Объект.ДатаОпределенияЗадолженности = ТекРабДата;
	
	ВосстановитьНастройки();
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки();
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "КомандаНастройка".
Процедура КомандаНастройка(Команда)
	
	АдресНастроекВХранилище = ПоместитьНастройкиВХранилище();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаНастройкаЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты.Форма.СвердловскаяОбластьВерсия6_ФормаНастройки", Новый Структура("АдресНастроекВХранилище", АдресНастроекВХранилище), , , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата опроса команды "КомандаНастройка".
Процедура КомандаНастройкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		ПолучитьНастройкиИзХранилища(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаЗаполнить".
Процедура КомандаЗаполнить(Команда)
	
	ТекстОшибки = ПроверкаУсловийДляЗаполненияТаблиц();
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ФайлНаДиске = Новый Файл(ИмяФайлаЗагрузки);
	ФайлНаДиске.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ПроверкаНаСуществованиеФайлаЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаНаСуществованиеФайлаЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	Если НЕ Существует Тогда
		ПоказатьПредупреждение(Неопределено, "Файл не найден!");
		Возврат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура;
	Описание     = Новый ОписаниеОповещения("ОбработатьРезультатПомещенияФайлаВХранилище", ЭтаФорма, ДопПараметры);
	НачатьПомещениеФайла(Описание, , ИмяФайлаЗагрузки, Ложь);

КонецПроцедуры // КомандаЗаполнить()

&НаКлиенте
// Обработчик результата помещения файла в хранилище.
Процедура ОбработатьРезультатПомещенияФайлаВХранилище(Результат, Адрес, ВыбранноеИмяФайла, ДопПараметры) Экспорт
	
	Если Объект.СвердловскаяОбласть_ТаблицаДанных.Количество() > 0 Тогда
		Оповещение   = Новый ОписаниеОповещения("КомандаЗаполнитьЗавершение", ЭтотОбъект, Новый Структура("АдресФайла", Адрес));
		ТекстВопроса = "Перед заполением таблица выгрузки будет очищена. Заполнить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьНаСервере(Адрес);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатПомещенияФайлаВХранилище()

&НаКлиенте
// Обработчик результата опроса команды "КомандаЗаполнитьВсе".
Процедура КомандаЗаполнитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьНаСервере(ДополнительныеПараметры.АдресФайла);
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьВсеЗавершение()

&НаКлиенте
// Обработчик команды "КомандаВыгрузить".
Процедура КомандаВыгрузить(Команда)
	
	Если ПустаяСтрока(ИмяКаталогаЗагрузки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указан каталог загрузки/выгрузки!");
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(ИмяКаталогаЗагрузки);
	Файл.НачатьПроверкуЭтоКаталог(Новый ОписаниеОповещения("ПроверкаНаКаталогЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаНаКаталогЗавершение(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЭтоКаталог Тогда
		ПоказатьПредупреждение(Неопределено, "Каталог указан не верно");
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДанныеВФайлСвердловскВерсия5();

КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

////////////////////////
// Диалог выбора файла

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Имя каталога".
//
Процедура ИмяКаталогаЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр                      = "Файл данных (*.dbf)|*.dbf";
	ДиалогВыбораФайла.Расширение                  = "dbf";
	ДиалогВыбораФайла.Заголовок                   = "Выберите файл";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	ДиалогВыбораФайла.ПолноеИмяФайла              = ИмяФайлаЗагрузки;
	
	ДополнительныеПараметры = Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла);
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ВыборФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ИмяФайлаЗагрузки    = ВыбранныеФайлы[0];
		ИмяКаталогаЗагрузки = ДиалогВыбораФайла.Каталог;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Имя каталога".
//
Процедура ИмяКаталогаЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УПЖКХ_ОбщегоНазначенияКлиент.ОткрытьСтраницуВБраузере("explorer " + ИмяФайлаЗагрузки);
	
КонецПроцедуры

////////////////////////
// Период

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПериодСтрокой".
Процедура ПериодСтрокойПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Модифицированность);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ПериодСтрокой".
Процедура ПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Регулирование" поля "ПериодСтрокой".
Процедура ПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Направление,
														Модифицированность);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "ПериодСтрокой".
Процедура ПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "ПериодСтрокой".
Процедура ПериодСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти
