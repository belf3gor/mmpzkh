
//////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункции

&НаСервере
// Формирует массив сокращений для Вологодской области для выбранного вида сокращения.
//
Функция СформироватьМассивСокращениеДляВологодскойОблПоВиду(ВидСокращение)
		
	МассивСокращений = Новый Массив;
	// для регионов
	Если ВидСокращение = 1 Тогда
		МассивСокращений.Добавить("обл");
		// для районов
	ИначеЕсли ВидСокращение = 2 Тогда
		МассивСокращений.Добавить("р-н");
		МассивСокращений.Добавить("р-н.");
		// для городов
	ИначеЕсли ВидСокращение = 3 Тогда
		МассивСокращений.Добавить("г");
		МассивСокращений.Добавить("г.");
		// для нас.пунктов
	ИначеЕсли ВидСокращение = 4 Тогда
		МассивСокращений.Добавить("рп");
		МассивСокращений.Добавить("п");
		МассивСокращений.Добавить("с");
		МассивСокращений.Добавить("д");
		МассивСокращений.Добавить("х");
		МассивСокращений.Добавить("ст");
		МассивСокращений.Добавить("пгт");
		МассивСокращений.Добавить("дп");
		МассивСокращений.Добавить("рзд");
		МассивСокращений.Добавить("мкр");
		МассивСокращений.Добавить("нп");
		МассивСокращений.Добавить("тер");
		МассивСокращений.Добавить("п/ст");
		МассивСокращений.Добавить("промзона");
		МассивСокращений.Добавить("снт");
		МассивСокращений.Добавить("п/о");
		МассивСокращений.Добавить("городок");
		МассивСокращений.Добавить("заимка");
		МассивСокращений.Добавить("кп");
		МассивСокращений.Добавить("ж/д_казарм");
		МассивСокращений.Добавить("г");
		МассивСокращений.Добавить("обл");
		
		МассивСокращений.Добавить("рп.");
		МассивСокращений.Добавить("п.");
		МассивСокращений.Добавить("с.");
		МассивСокращений.Добавить("д.");
		МассивСокращений.Добавить("х.");
		МассивСокращений.Добавить("ст.");
		МассивСокращений.Добавить("пгт.");
		МассивСокращений.Добавить("дп.");
		МассивСокращений.Добавить("рзд.");
		МассивСокращений.Добавить("мкр.");
		МассивСокращений.Добавить("нп.");
		МассивСокращений.Добавить("тер.");
		МассивСокращений.Добавить("п/ст.");
		МассивСокращений.Добавить("промзона.");
		МассивСокращений.Добавить("снт.");
		МассивСокращений.Добавить("п/о.");
		МассивСокращений.Добавить("городок.");
		МассивСокращений.Добавить("заимка.");
		МассивСокращений.Добавить("кп.");
		МассивСокращений.Добавить("ж/д_казарм.");
		МассивСокращений.Добавить("г.");
		МассивСокращений.Добавить("обл.");
		// для улиц
	ИначеЕсли ВидСокращение = 5 Тогда
		МассивСокращений.Добавить("ул");
		МассивСокращений.Добавить("тер");
		МассивСокращений.Добавить("пл");
		МассивСокращений.Добавить("пер");
		МассивСокращений.Добавить("снт");
		МассивСокращений.Добавить("проезд");
		МассивСокращений.Добавить("б-р");
		МассивСокращений.Добавить("туп");
		МассивСокращений.Добавить("п");
		МассивСокращений.Добавить("ш");
		МассивСокращений.Добавить("пр-кт");
		МассивСокращений.Добавить("тракт");
		МассивСокращений.Добавить("сквер");
		МассивСокращений.Добавить("ст");
		МассивСокращений.Добавить("наб");
		МассивСокращений.Добавить("км");
		МассивСокращений.Добавить("ж/д_ст");
		МассивСокращений.Добавить("сад");
		МассивСокращений.Добавить("парк");
		МассивСокращений.Добавить("уч-к");
		МассивСокращений.Добавить("мкр");
		МассивСокращений.Добавить("городок");
		МассивСокращений.Добавить("кв-л");
		МассивСокращений.Добавить("нп");
		МассивСокращений.Добавить("остров");
		МассивСокращений.Добавить("гск");
		МассивСокращений.Добавить("линия");
		МассивСокращений.Добавить("рзд");
		МассивСокращений.Добавить("стр");
		МассивСокращений.Добавить("аллея");
		МассивСокращений.Добавить("казарма");
		МассивСокращений.Добавить("ж/д_рзд");
		МассивСокращений.Добавить("д");
		МассивСокращений.Добавить("ж/д_казарм");
		МассивСокращений.Добавить("ж/д_будка");
		МассивСокращений.Добавить("высел");
		
		МассивСокращений.Добавить("ул.");
		МассивСокращений.Добавить("тер.");
		МассивСокращений.Добавить("пл.");
		МассивСокращений.Добавить("пер.");
		МассивСокращений.Добавить("снт.");
		МассивСокращений.Добавить("проезд.");
		МассивСокращений.Добавить("б-р.");
		МассивСокращений.Добавить("туп.");
		МассивСокращений.Добавить("п.");
		МассивСокращений.Добавить("ш.");
		МассивСокращений.Добавить("пр-кт.");
		МассивСокращений.Добавить("тракт.");
		МассивСокращений.Добавить("сквер.");
		МассивСокращений.Добавить("ст.");
		МассивСокращений.Добавить("наб.");
		МассивСокращений.Добавить("км.");
		МассивСокращений.Добавить("ж/д_ст.");
		МассивСокращений.Добавить("сад.");
		МассивСокращений.Добавить("парк.");
		МассивСокращений.Добавить("уч-к.");
		МассивСокращений.Добавить("мкр.");
		МассивСокращений.Добавить("городок.");
		МассивСокращений.Добавить("кв-л.");
		МассивСокращений.Добавить("нп.");
		МассивСокращений.Добавить("остров.");
		МассивСокращений.Добавить("гск.");
		МассивСокращений.Добавить("линия.");
		МассивСокращений.Добавить("рзд.");
		МассивСокращений.Добавить("стр.");
		МассивСокращений.Добавить("аллея.");
		МассивСокращений.Добавить("казарма.");
		МассивСокращений.Добавить("ж/д_рзд.");
		МассивСокращений.Добавить("д.");
		МассивСокращений.Добавить("ж/д_казарм.");
		МассивСокращений.Добавить("ж/д_будка.");
		МассивСокращений.Добавить("высел.");
	КонецЕсли;
	
	Возврат МассивСокращений;
	
КонецФункции // СформироватьМассивСокращениеДляВологодскойОблПоВиду()

&НаСервере
// Функция сокращает название города или улицы: убирает сокращения,
// определяющие тип данного элемента адреса: "г.", "ул." и так далее.
//
// Параметры:
//  Ресурс       - Строка - элемент адреса.
//
// Возвращаемое значение:
//  Строка - элемент адреса в сокращенном виде.
//
Функция НормализацияПолейАдресаОбласти(Ресурс, Массив)
	
	Найден = Истина;
	
	Для Каждого Элемент Из Массив Цикл
		
		Если Прав(СокрЛП(Ресурс), СтрДлина(Элемент)) = Элемент Тогда
			ПредСимвол = Сред(СокрЛП(Ресурс), СтрДлина(СокрЛП(Ресурс)) - СтрДлина(Элемент), 1);
			
			Если ПредСимвол = " " Тогда
				Возврат СокрЛП(Лев(СокрЛП(Ресурс), СтрДлина(СокрЛП(Ресурс)) - СтрДлина(Элемент)));
			КонецЕсли;
		ИначеЕсли Лев(СокрЛП(Ресурс), СтрДлина(Элемент)) = Элемент Тогда
			СледСимвол = Сред(СокрЛП(Ресурс), СтрДлина(Элемент) + 1, 1);
			
			Если СледСимвол = " " Тогда
				Возврат СокрЛП(Сред(СокрЛП(Ресурс), СтрДлина(Элемент) + 1));
			КонецЕсли;
		Иначе
			
			Найден = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Найден = Ложь Тогда
		Возврат Ресурс;
	КонецЕсли;
	
КонецФункции

&НаСервере
// Убирает из наименования помещения не цифровые символы.
// 
Функция ПодготовитьПомещениеДляВывода(Помещение)
	
	НаименованиеПомещения = СокрЛП(Помещение);
	СтрокаДляВозврата = "";
	
	Если СтрДлина(НаименованиеПомещения) = 0 Тогда
		СтрокаДляВозврата = "0";
	Иначе
		
		Пока СтрДлина(НаименованиеПомещения) > 0 Цикл
			
			СимволЛС = Лев(НаименованиеПомещения, 1);
			Если КодСимвола(СимволЛС) > 47 И КодСимвола(СимволЛС) < 58 Тогда
				СтрокаДляВозврата = СтрокаДляВозврата + СимволЛС;
			КонецЕсли;
			
			НаименованиеПомещения = Прав(НаименованиеПомещения, СтрДлина(НаименованиеПомещения) - 1);
		КонецЦикла;
		
		Если ПустаяСтрока(СтрокаДляВозврата) Тогда
			СтрокаДляВозврата = "0";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтрокаДляВозврата;
	
КонецФункции // ПодготовитьПомещениеДляВывода()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// СОХРАНЯЕМЫЕ НАСТРОЙКИ

#Область РаботаСНастройками

&НаСервере
// Процедура восстановления настроек.
Процедура ВосстановитьНастройки()
	
	СтруктураПараметров = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("ВологодскаяОбласть_ВыгрузкаВОСЗН", "ПараметрыВыгрузки");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		СтруктураПараметров.Свойство("ИмяФайлаЗагрузки", ИмяФайлаЗагрузки);
		
		врВологодскаяОбласть_ТаблицаНастройкиВидовСобственности     = Новый ТаблицаЗначений;
		врВологодскаяОбласть_ТаблицаНастройкиУслуг                  = Новый ТаблицаЗначений;
		врВологодскаяОбласть_ТаблицаНастройкиКодовОрганизаций       = Новый ТаблицаЗначений;
		врВологодскаяОбласть_ТаблицаНастройкиКодовЛьготныхКатегорий = Новый ТаблицаЗначений;
		врВологодскаяОбласть_ФормыУправленияМКД                     = Новый ТаблицаЗначений;
		
		СтруктураПараметров.Свойство("ВологодскаяОбласть_ТаблицаНастройкиУслуг",                  врВологодскаяОбласть_ТаблицаНастройкиУслуг);
		СтруктураПараметров.Свойство("ВологодскаяОбласть_ТаблицаНастройкиВидовСобственности",     врВологодскаяОбласть_ТаблицаНастройкиВидовСобственности);
		СтруктураПараметров.Свойство("ВологодскаяОбласть_ТаблицаНастройкиКодовОрганизаций",       врВологодскаяОбласть_ТаблицаНастройкиКодовОрганизаций);
		СтруктураПараметров.Свойство("ВологодскаяОбласть_ТаблицаНастройкиКодовЛьготныхКатегорий", врВологодскаяОбласть_ТаблицаНастройкиКодовЛьготныхКатегорий);
		СтруктураПараметров.Свойство("ВологодскаяОбласть_ФормыУправленияМКД",                     врВологодскаяОбласть_ФормыУправленияМКД);
		
		Если НЕ врВологодскаяОбласть_ТаблицаНастройкиУслуг = Неопределено Тогда
			Объект.ВологодскаяОбласть_ТаблицаНастройкиУслуг.Загрузить(врВологодскаяОбласть_ТаблицаНастройкиУслуг);
		КонецЕсли;
		Если НЕ врВологодскаяОбласть_ТаблицаНастройкиВидовСобственности = Неопределено Тогда
			Объект.ВологодскаяОбласть_ТаблицаНастройкиВидовСобственности.Загрузить(врВологодскаяОбласть_ТаблицаНастройкиВидовСобственности);
		КонецЕсли;
		Если НЕ врВологодскаяОбласть_ТаблицаНастройкиКодовОрганизаций = Неопределено Тогда
			Объект.ВологодскаяОбласть_ТаблицаНастройкиКодовОрганизаций.Загрузить(врВологодскаяОбласть_ТаблицаНастройкиКодовОрганизаций);
		КонецЕсли;
		Если НЕ врВологодскаяОбласть_ТаблицаНастройкиКодовЛьготныхКатегорий = Неопределено Тогда
			Объект.ВологодскаяОбласть_ТаблицаНастройкиКодовЛьготныхКатегорий.Загрузить(врВологодскаяОбласть_ТаблицаНастройкиКодовЛьготныхКатегорий);
		КонецЕсли;
		Если НЕ врВологодскаяОбласть_ФормыУправленияМКД = Неопределено Тогда
			Объект.ВологодскаяОбласть_ФормыУправленияМКД.Загрузить(врВологодскаяОбласть_ФормыУправленияМКД);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура сохранения настроек.
Процедура СохранитьНастройки()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяФайлаЗагрузки",        ИмяФайлаЗагрузки);
	СтруктураПараметров.Вставить("ВологодскаяОбласть_ТаблицаНастройкиВидовСобственности",     Объект.ВологодскаяОбласть_ТаблицаНастройкиВидовСобственности.Выгрузить());
	СтруктураПараметров.Вставить("ВологодскаяОбласть_ТаблицаНастройкиУслуг",                  Объект.ВологодскаяОбласть_ТаблицаНастройкиУслуг.Выгрузить());
	СтруктураПараметров.Вставить("ВологодскаяОбласть_ТаблицаНастройкиКодовОрганизаций",       Объект.ВологодскаяОбласть_ТаблицаНастройкиКодовОрганизаций.Выгрузить());
	СтруктураПараметров.Вставить("ВологодскаяОбласть_ТаблицаНастройкиКодовЛьготныхКатегорий", Объект.ВологодскаяОбласть_ТаблицаНастройкиКодовЛьготныхКатегорий.Выгрузить());
	СтруктураПараметров.Вставить("ВологодскаяОбласть_ФормыУправленияМКД",                     Объект.ВологодскаяОбласть_ФормыУправленияМКД.Выгрузить());
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("ВологодскаяОбласть_ВыгрузкаВОСЗН", "ПараметрыВыгрузки", СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// РАБОТА С ВРЕМЕННЫМ ХРАНИЛИЩЕМ

#Область РаботаСВременнымХранилищем

&НаСервере
// Помещает настройки во временное хранилище.
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ВологодскаяОбласть_ТаблицаНастройкиКодовОрганизаций",       Объект.ВологодскаяОбласть_ТаблицаНастройкиКодовОрганизаций.Выгрузить());
	СтруктураНастроек.Вставить("ВологодскаяОбласть_ТаблицаНастройкиВидовСобственности",     Объект.ВологодскаяОбласть_ТаблицаНастройкиВидовСобственности.Выгрузить());
	СтруктураНастроек.Вставить("ВологодскаяОбласть_ТаблицаНастройкиУслуг",                  Объект.ВологодскаяОбласть_ТаблицаНастройкиУслуг.Выгрузить());
	СтруктураНастроек.Вставить("ВологодскаяОбласть_ТаблицаНастройкиКодовЛьготныхКатегорий", Объект.ВологодскаяОбласть_ТаблицаНастройкиКодовЛьготныхКатегорий.Выгрузить());
	СтруктураНастроек.Вставить("ВологодскаяОбласть_ФормыУправленияМКД",                     Объект.ВологодскаяОбласть_ФормыУправленияМКД.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции

&НаСервере
// Получает настройки из временного хранилища.
Функция ПолучитьНастройкиИзХранилища(АдресНастроекВХранилище)
	
	СтруктураНастроек = ПолучитьИзВременногоХранилища(АдресНастроекВХранилище);
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		
		Если СтруктураНастроек.Свойство("ВологодскаяОбласть_ТаблицаНастройкиКодовОрганизаций") Тогда
			Объект.ВологодскаяОбласть_ТаблицаНастройкиКодовОрганизаций.Загрузить(СтруктураНастроек.ВологодскаяОбласть_ТаблицаНастройкиКодовОрганизаций);
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ВологодскаяОбласть_ТаблицаНастройкиВидовСобственности") Тогда
			Объект.ВологодскаяОбласть_ТаблицаНастройкиВидовСобственности.Загрузить(СтруктураНастроек.ВологодскаяОбласть_ТаблицаНастройкиВидовСобственности);
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ВологодскаяОбласть_ТаблицаНастройкиУслуг") Тогда
			Объект.ВологодскаяОбласть_ТаблицаНастройкиУслуг.Загрузить(СтруктураНастроек.ВологодскаяОбласть_ТаблицаНастройкиУслуг);
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ВологодскаяОбласть_ТаблицаНастройкиКодовЛьготныхКатегорий") Тогда
			Объект.ВологодскаяОбласть_ТаблицаНастройкиКодовЛьготныхКатегорий.Загрузить(СтруктураНастроек.ВологодскаяОбласть_ТаблицаНастройкиКодовЛьготныхКатегорий);
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("ВологодскаяОбласть_ФормыУправленияМКД") Тогда
			Объект.ВологодскаяОбласть_ФормыУправленияМКД.Загрузить(СтруктураНастроек.ВологодскаяОбласть_ФормыУправленияМКД);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ЗАПОЛНЕНИЕ ДАННЫХ

#Область ЗаполнениеДанных

&НаКлиенте
// Проверяет наличие всех необходимых данных для заполнения таблиц выгрузки.
//
Функция ПроверкаУсловийДляЗаполненияТаблиц()
	
	ТекстОшибки = "";
	
	Если НЕ ЗначениеЗаполнено(Объект.Период) Тогда
		ТекстОшибки = ТекстОшибки + "Не указан период выгрузки!";
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не указана организация!", "Не указан организация!");
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяФайлаЗагрузки) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не указан файл загрузки!", "Не указан файл загрузки!");
	КонецЕсли;
	
	Если Объект.ВологодскаяОбласть_ТаблицаНастройкиВидовСобственности.Количество() = 0 Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не заполнена таблица видов собственности на форме настройки!", "Не заполнена таблица видов собственности на форме настройки!");
	КонецЕсли;
	
	Если Объект.ВологодскаяОбласть_ТаблицаНастройкиКодовОрганизаций.Количество() = 0 Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не заполнена таблица кодов организаций на форме настройки!", "Не заполнена таблица кодов организаций на форме настройки!");
	КонецЕсли;
	
	Если Объект.ВологодскаяОбласть_ТаблицаНастройкиУслуг.Количество() = 0 Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не заполнена таблица услуг на форме настройки!", "Не заполнена таблица услуг на форме настройки!");
	КонецЕсли;
	
	Если Объект.ВологодскаяОбласть_ТаблицаНастройкиКодовЛьготныхКатегорий.Количество() = 0 Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не заполнена таблица кодов льготных категорий на форме настройки!", "Не заполнена таблица кодов льготных категорий на форме настройки!");
	КонецЕсли;
	
	Если Объект.ВологодскаяОбласть_ФормыУправленияМКД.Количество() = 0 Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не заполнена таблица форм управления МКД на форме настройки!", "Не заполнена таблица форм управления МКД на форме настройки!");
	КонецЕсли;
	
	Возврат ТекстОшибки;
	
КонецФункции // ПроверкаУсловийДляЗаполненияТаблиц

&НаСервере
// Процедура заполнения всех данных.
Процедура ЗаполнитьНаСервере(Адрес)
	
	Объект.ВологодскаяОбласть_ТаблицаНачислений.Очистить();
	
	// Запись временных данных во временный файл.
	врДанныеФайла = ПолучитьИзВременногоХранилища(Адрес);
	ВременныйФайл = ПолучитьИмяВременногоФайла("DBF");
	
	// Для чтения *.dbf формата урежем имя временного файла.
	Файл = Новый Файл(ВременныйФайл);
	ВременныйФайл = Файл.Путь + Прав(Файл.Имя, 11);
	
	врДанныеФайла.Записать(ВременныйФайл);
	
	//загрузка
	ФайлДБФ = Новый XBase;
	ФайлДБФ.Кодировка = КодировкаXBase.OEM;
	ФайлДБФ.ОткрытьФайл(ВременныйФайл, , Истина);
	
	МассивСокрНасПункт = СформироватьМассивСокращениеДляВологодскойОблПоВиду(4);
	МассивСокрУлицы    = СформироватьМассивСокращениеДляВологодскойОблПоВиду(5);
	
	ТаблицаДанныхФайла = Объект.ВологодскаяОбласть_ТаблицаНачислений.Выгрузить();
	
	Если ФайлДБФ.Открыта() = Истина Тогда
		
		ТаблицаДанныхФайла.Очистить();
		
		Пока НЕ ФайлДБФ.ВКонце() Цикл
			НоваяЗапись = ТаблицаДанныхФайла.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ФайлДБФ);
			
			Попытка
				НоваяЗапись.FLAT = Число(СокрЛП(ФайлДБФ.FLAT));
			Исключение
				НоваяЗапись.FLAT = Число(ПодготовитьПомещениеДляВывода(ФайлДБФ.FLAT));
			КонецПопытки;
			
			НоваяЗапись.FAM       = ВРег(СокрЛП(ФайлДБФ.FAM));
			НоваяЗапись.IM        = ВРег(СокрЛП(ФайлДБФ.IM));
			НоваяЗапись.OT        = ВРег(СокрЛП(ФайлДБФ.OT));
			НоваяЗапись.HOUSE     = СокрЛП(ФайлДБФ.HOUSE);
			НоваяЗапись.KORP      = СокрЛП(ФайлДБФ.KORP);
			НоваяЗапись.KAT_LG    = СокрЛП(ФайлДБФ.KAT_LG);
			НоваяЗапись.PUNKT_NM  = ВРег(НормализацияПолейАдресаОбласти(СокрЛП(ФайлДБФ.PUNKT_NM), МассивСокрНасПункт));
			НоваяЗапись.STREET_NM = ВРег(НормализацияПолейАдресаОбласти(СокрЛП(ФайлДБФ.STREET_NM), МассивСокрУлицы));
			
			ФайлДБФ.Следующая();
		КонецЦикла;
		
	КонецЕсли;
	
	ФайлДБФ.ЗакрытьФайл();
	
	ОбработкаОбъект = ДанныеФормыВЗначение(Объект, Тип("ОбработкаОбъект.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты"));
	ОбработкаОбъект.СформироватьТаблицуДанныхВологодскаяОбласть(ТаблицаДанныхФайла);
	ЗначениеВДанныеФормы(ОбработкаОбъект, Объект);
	
	Объект.ВологодскаяОбласть_ТаблицаНачислений.Загрузить(ТаблицаДанныхФайла);
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ВЫГРУЗКА ФАЙЛОВ

#Область ВыгрузкаФайлов

&НаКлиенте
// Предназначена для выгрузки данных из таблицы данных в dbf-файл.
//
Процедура ВыгрузитьДанныеВФайлВологда()
	
	Если Объект.ВологодскаяОбласть_ТаблицаНачислений.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В таблице выгружаемых данных отсутствуют данные для выгрузки в dbf-файл.");
	Иначе
		
		ФайлДляСохранения = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		
		ФайлДляСохранения.Заголовок                   = "Сохранение файла";
		ФайлДляСохранения.ПроверятьСуществованиеФайла = Истина;
		ФайлДляСохранения.ПолноеИмяФайла              = "";
		ФайлДляСохранения.Фильтр                      = "Файл данных (*.dbf)|*.dbf";
		ФайлДляСохранения.Расширение                  = "dbf";
		
		ФайлДляСохранения.Показать(Новый ОписаниеОповещения("ВыгрузитьДанныеВФайлВологдаЗавершение", ЭтотОбъект, Новый Структура("ФайлДляСохранения", ФайлДляСохранения)));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьДанныеВФайлВологдаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ФайлДляСохранения = ДополнительныеПараметры.ФайлДляСохранения;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		Если НЕ ЗначениеЗаполнено(ФайлДляСохранения.ПолноеИмяФайла) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
	АдресФайлаВыгрузки = ПолучитьФайлВыгрузки(УникальныйИдентификатор);
	
	ПолучаемыеФайлы = Новый Массив;
	ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(,АдресФайлаВыгрузки));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыгрузитьДанныеВФайлВологдаЗавершениеФрагмент", ЭтаФорма, Новый Структура("ФайлДляСохранения", ФайлДляСохранения));
	
	НачатьПолучениеФайлов(	ОписаниеОповещения,
							ПолучаемыеФайлы,
							ФайлДляСохранения.ПолноеИмяФайла,
							Ложь);
	
КонецПроцедуры // ВыгрузитьДанныеВФайлВологда()

&НаКлиенте
Процедура ВыгрузитьДанныеВФайлВологдаЗавершениеФрагмент(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	
	ФайлДляСохранения = ДополнительныеПараметры.ФайлДляСохранения;
	
	Текст = "Выгрузка в файл " + СтрЗаменить(ФайлДляСохранения.ПолноеИмяФайла, ФайлДляСохранения.Каталог, "") + " завершена!";
	УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(Текст);
	
КонецПроцедуры // ВыгрузитьДанныеВФайлВологда()

&НаСервере
Функция ПолучитьФайлВыгрузки(АдресХранилища)
	
	ИмяФайла = ПолучитьИмяВременногоФайла(".dbf");
	
	ФайлВыгрузки           = Новый XBase;
	ФайлВыгрузки.Кодировка = КодировкаXBase.OEM;
	ФайлВыгрузки.Поля.Добавить("KOD_R",    "N", "2");
	ФайлВыгрузки.Поля.Добавить("LCHET",    "N", "6");
	ФайлВыгрузки.Поля.Добавить("SNILS",    "S", "11");
	ФайлВыгрузки.Поля.Добавить("NCHET",    "S", "12");
	ФайлВыгрузки.Поля.Добавить("FAM",      "S", "30");
	ФайлВыгрузки.Поля.Добавить("IM",       "S", "30");
	ФайлВыгрузки.Поля.Добавить("OT",       "S", "30");
	ФайлВыгрузки.Поля.Добавить("D_ROGD",   "D");
	ФайлВыгрузки.Поля.Добавить("POST",     "S", "6");
	ФайлВыгрузки.Поля.Добавить("HOUSE",    "S", "6");
	ФайлВыгрузки.Поля.Добавить("KORP",     "S", "6");
	ФайлВыгрузки.Поля.Добавить("FLAT",     "S", "6");
	ФайлВыгрузки.Поля.Добавить("N_ROOM",   "S", "6");
	ФайлВыгрузки.Поля.Добавить("K_FLAT",   "N", "2");
	ФайлВыгрузки.Поля.Добавить("Q_ROOM",   "N", "2");
	ФайлВыгрузки.Поля.Добавить("S_FLAT",   "N", "6", "2");
	ФайлВыгрузки.Поля.Добавить("Q_PROJ",   "N", "2");
	ФайлВыгрузки.Поля.Добавить("KAT_LG",   "S", "3");
	ФайлВыгрузки.Поля.Добавить("PRIZNAK",  "N", "2");
	ФайлВыгрузки.Поля.Добавить("D_PRAVO",  "D");
	ФайлВыгрузки.Поля.Добавить("ORG_PLAT", "N", "3");
	ФайлВыгрузки.Поля.Добавить("PERIOD",   "S", "5");
	ФайлВыгрузки.Поля.Добавить("C",        "D");
	ФайлВыгрузки.Поля.Добавить("DO",       "D");
	
	Сч = 1;
	Пока НЕ Сч > 20 Цикл
		ФайлВыгрузки.Поля.Добавить("K_USL" + Сч, "N", "2");
		ФайлВыгрузки.Поля.Добавить("SUMMA" + Сч, "N", "14", "2");
		Сч = Сч + 1;
	КонецЦикла;
	
	ФайлВыгрузки.Поля.Добавить("P_DOLG",    "N", "1");
	ФайлВыгрузки.Поля.Добавить("SUMMA_D",   "N", "14", "2");
	ФайлВыгрузки.Поля.Добавить("LC_ID",     "S", "20");
	ФайлВыгрузки.Поля.Добавить("PUNKT_NM",  "S", "100");
	ФайлВыгрузки.Поля.Добавить("STREET_NM", "S", "100");
	ФайлВыгрузки.Поля.Добавить("N_UPR",     "N", "1");
	ФайлВыгрузки.Поля.Добавить("K_CODE",    "S", "25");
	ФайлВыгрузки.Поля.Добавить("Q_EDKJ",    "N", "2");
	ФайлВыгрузки.Поля.Добавить("Q_EDKK",    "N", "2");
	ФайлВыгрузки.Поля.Добавить("Q_IJD",     "N", "2");
	ФайлВыгрузки.Поля.Добавить("Q_OUT",     "N", "2");
	ФайлВыгрузки.Поля.Добавить("F_CODE",    "S", "36");
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(".dbf");
	Файл = Новый Файл(ИмяВременногоФайла);
	ИмяВременногоФайла = Файл.Путь + Прав(Файл.Имя, 11);
	
	ФайлВыгрузки.СоздатьФайл(ИмяВременногоФайла);
	ФайлВыгрузки.АвтоСохранение = Истина;
	
	Для Каждого ТекСтрока Из Объект.ВологодскаяОбласть_ТаблицаНачислений Цикл
		ФайлВыгрузки.Добавить();
		ЗаполнитьЗначенияСвойств(ФайлВыгрузки, ТекСтрока);
		ФайлВыгрузки.FLAT = Строка(ТекСтрока.FLAT);
	КонецЦикла;
	
	ФайлВыгрузки.ЗакрытьФайл();
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяВременногоФайла);
	
	Возврат ПоместитьВоВременноеХранилище(ДвоичныеДанные, АдресХранилища);
	
КонецФункции

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	Объект.Период = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	
	ВосстановитьНастройки();
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки();
	
КонецПроцедуры

////////////////////////
// Диалог выбора файла

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Имя каталога".
//
Процедура ИмяФайлаЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр                      = "Файл данных (*.dbf)|*.dbf";
	ДиалогВыбораФайла.Расширение                  = "dbf";
	ДиалогВыбораФайла.Заголовок                   = "Выберите файл загрузки";
	ДиалогВыбораФайла.ПолноеИмяФайла              = ИмяФайлаЗагрузки;
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ИмяФайлаЗагрузкиНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла)));
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЗагрузкиНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ИмяФайлаЗагрузки = ДиалогВыбораФайла.ПолноеИмяФайла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Имя каталога".
//
Процедура ИмяФайлаЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НачатьЗапускПриложения(Новый ОписаниеОповещения("ИмяФайлаЗагрузкиОткрытиеЗавершение", ЭтотОбъект), "explorer " + ИмяФайлаЗагрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЗагрузкиОткрытиеЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаКлиенте
// Обработчик команды "КомандаНастройка".
Процедура КомандаНастройка(Команда)
	
	АдресНастроекВХранилище = ПоместитьНастройкиВХранилище();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаНастройкаЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты.Форма.ВологодскаяОбласть_ФормаНастройки", Новый Структура("АдресНастроекВХранилище", АдресНастроекВХранилище), , , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата опроса команды "КомандаНастройка".
Процедура КомандаНастройкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		ПолучитьНастройкиИзХранилища(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаЗаполнить".
Процедура КомандаЗаполнить(Команда)
	
	ТекстОшибки = ПроверкаУсловийДляЗаполненияТаблиц();
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ФайлНаДиске = Новый Файл(ИмяФайлаЗагрузки);
	ФайлНаДиске.НачатьПроверкуСуществования(Новый ОписаниеОповещения("КомандаЗаполнитьЗавершение1", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗаполнитьЗавершение1(Существует, ДополнительныеПараметры) Экспорт
	
	Если НЕ Существует Тогда
		ПоказатьПредупреждение(Неопределено, "Файл не найден!");
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = "";
	Описание = Новый ОписаниеОповещения("ОбработатьРезультатПомещенияФайлаВХранилище", ЭтаФорма);
	НачатьПомещениеФайла(Описание, ПутьКФайлу, ИмяФайлаЗагрузки, Ложь);

КонецПроцедуры // КомандаЗаполнить()

&НаКлиенте
// Обработчик результата помещения файла в хранилище.
Процедура ОбработатьРезультатПомещенияФайлаВХранилище(Результат, Адрес, ВыбранноеИмяФайла, ДопПараметры) Экспорт
	
	Если Объект.ВологодскаяОбласть_ТаблицаНачислений.Количество() > 0 Тогда
		// Выведем вопрос об очистке таблицы.
		Оповещение   = Новый ОписаниеОповещения("КомандаЗаполнитьЗавершение", ЭтотОбъект, Новый Структура("Адрес", Адрес));
		ТекстВопроса = "Перед заполением таблица выгрузки будет очищена. Заполнить?";
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьНаСервере(Адрес);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьПомещениеФайлов()

&НаКлиенте
// Обработчик результата опроса команды "КомандаЗаполнитьВсе".
Процедура КомандаЗаполнитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ЗаполнитьНаСервере(ДополнительныеПараметры.Адрес);
		
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьВсеЗавершение()

&НаКлиенте
// Обработчик команды "КомандаВыгрузить".
Процедура КомандаВыгрузить(Команда)
	
	ВыгрузитьДанныеВФайлВологда();
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

////////////////////////
// Период

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПериодСтрокой".
Процедура ПериодСтрокойПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Модифицированность);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ПериодСтрокой".
Процедура ПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Регулирование" поля "ПериодСтрокой".
Процедура ПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Направление,
														Модифицированность);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "ПериодСтрокой".
Процедура ПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "ПериодСтрокой".
Процедура ПериодСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти
