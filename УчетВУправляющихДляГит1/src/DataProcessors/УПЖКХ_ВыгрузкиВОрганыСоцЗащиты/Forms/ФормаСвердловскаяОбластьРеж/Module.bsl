
//////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ПрочиеПроцедурыИФункции

&НаКлиенте
// Функция проверяет заполнение полей основной формы.
//
Функция ПроверкаЗаполненияФормы()
	
	ТекстОшибки = "";
	
	Если НЕ ЗначениеЗаполнено(Объект.Период) Тогда
		ТекстОшибки = ТекстОшибки + "Не указан период выгрузки!";
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не указана организация!", "Не указана организация!");
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.ИмяКаталогаВыгрузки) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не указан каталог выгрузки!", "Не указан каталог выгрузки!");
	КонецЕсли;
	
	Если Объект.СвердловскаяОбластьРеж_УслугиВБазе.Количество() = 0 Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не заполнена таблица соответствия услуг!", "Не заполнена таблица соответствия услуг!");
	КонецЕсли; 
	
	Возврат ТекстОшибки;
	
КонецФункции // ПроверкаЗаполненияФормы()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	Объект.Период      = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	
	ВосстановитьНастройки();
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьМесяцПоДате(ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки();
	
КонецПроцедуры // ПередЗакрытием()

&НаСервере
// Процедура восстановления настроек.
//
Процедура ВосстановитьНастройки()
	
	СтруктураПараметров = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("СвердловскаяОбластьРеж_ВыгрузкаВОСЗН", "ПараметрыВыгрузки");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		СтруктураПараметров.Свойство("ИмяКаталогаВыгрузки", Объект.ИмяКаталогаВыгрузки);
		СтруктураПараметров.Свойство("ТолькоЛьготники",     ТолькоЛьготники);
		
		врУслугиВБазе = Новый ТаблицаЗначений;
		
		// Востановление таблицы "УслугиВБазе".
		СтруктураПараметров.Свойство("СвердловскаяОбластьРеж_УслугиВБазе", врУслугиВБазе);
		Если НЕ врУслугиВБазе = Неопределено Тогда
			Объект.СвердловскаяОбластьРеж_УслугиВБазе.Загрузить(врУслугиВБазе);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВосстановитьНастройки()

&НаСервере
// Процедура сохранения настроек.
//
Процедура СохранитьНастройки()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяКаталогаВыгрузки",                Объект.ИмяКаталогаВыгрузки);
	СтруктураПараметров.Вставить("ТолькоЛьготники",                    ТолькоЛьготники);
	СтруктураПараметров.Вставить("СвердловскаяОбластьРеж_УслугиВБазе", Объект.СвердловскаяОбластьРеж_УслугиВБазе.Выгрузить());
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("СвердловскаяОбластьРеж_ВыгрузкаВОСЗН", "ПараметрыВыгрузки", СтруктураПараметров);
	
КонецПроцедуры // СохранитьНастройки()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ПАНЕЛИ ДЕЙСТВИЯ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаКлиенте
// Обработчик команды "ДействияФормыНастройка".
//
Процедура ДействияФормыНастройка(Команда)
	
	АдресНастроекВХранилище = ПоместитьНастройкиВХранилище();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаНастройкаЗавершение", ЭтаФорма);
	ОткрытьФорму("Обработка.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты.Форма.СвердловскаяОбластьРеж_ФормаНастройка", Новый Структура("АдресНастроекВХранилище", АдресНастроекВХранилище), , , , , ОписаниеОповещения);
	
КонецПроцедуры // ДействияФормыНастройка()

&НаКлиенте
// Обработчик результата опроса команды "КомандаНастройка".
Процедура КомандаНастройкаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Не Результат = Неопределено Тогда
		ПолучитьНастройкиИзХранилища(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Помещает настройки во временное хранилище.
//
Функция ПоместитьНастройкиВХранилище()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.СвердловскаяОбластьРеж_УслугиВБазе.Выгрузить(), Новый УникальныйИдентификатор);
	
КонецФункции // ПоместитьНастройкиВХранилище()

&НаСервере
// Получает настройки из временного хранилища.
//
Функция ПолучитьНастройкиИзХранилища(АдресНастроекВХранилище)
	
	врУслугиВБазе = ПолучитьИзВременногоХранилища(АдресНастроекВХранилище);
	
	Если ТипЗнч(врУслугиВБазе) = Тип("ТаблицаЗначений") Тогда
		Объект.СвердловскаяОбластьРеж_УслугиВБазе.Загрузить(врУслугиВБазе);
	КонецЕсли;
	
КонецФункции // ПолучитьНастройкиИзХранилища()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
//// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийФормы

////////////////////////
// Период

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПериодСтрокой".
Процедура ПериодСтрокойПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаПриИзменении(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Модифицированность);
	
КонецПроцедуры // ПериодСтрокойПриИзменении()

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ПериодСтрокой".
Процедура ПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаНачалоВыбора(ЭтаФорма, ЭтаФорма, "Объект.Период", "ПериодСтрокой");
	
КонецПроцедуры // ПериодСтрокойНачалоВыбора()

&НаКлиенте
// Обработчик события "Регулирование" поля "ПериодСтрокой".
Процедура ПериодСтрокойРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаРегулирование(ЭтаФорма, "Объект.Период", "ПериодСтрокой", Направление,
														Модифицированность);
	
КонецПроцедуры // ПериодСтрокойРегулирование()

&НаКлиенте
// Обработчик события "АвтоПодбор" поля "ПериодСтрокой".
Процедура ПериодСтрокойАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаАвтоПодборТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодСтрокойАвтоПодбор()

&НаКлиенте
// Обработчик события "ОкончаниеВводаТекста" поля "ПериодСтрокой".
Процедура ПериодСтрокойОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВводМесяцаОкончаниеВводаТекста(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодСтрокойОкончаниеВводаТекста()

////////////////////////
// Каталог выгрузки

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ИмяКаталогаВыгрузки".
//
Процедура ИмяКаталогаВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Заголовок                   = "Выбор каталога файлов";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИмяКаталогаВыгрузкиНачалоВыбораВыбрать", ЭтотОбъект);
	
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения выбора каталога.
Процедура ИмяКаталогаВыгрузкиНачалоВыбораВыбрать(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено Тогда
		Объект.ИмяКаталогаВыгрузки = ВыбранныеФайлы[0];
	КонецЕсли;
	
КонецПроцедуры // ИмяКаталогаВыгрузкиНачалоВыбора()

&НаКлиенте
// Обработчик события "Открытие" поля "ИмяКаталогаВыгрузки".
//
Процедура ИмяКаталогаВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИмяКаталогаВыгрузкиОткрытиеЗапускПриложения", ЭтотОбъект);
	НачатьЗапускПриложения(ОписаниеОповещения, "explorer " + Объект.ИмяКаталогаВыгрузки);
	
КонецПроцедуры

&НаКлиенте
// Обоработчик завершения запуска приложения.
Процедура ИмяКаталогаВыгрузкиОткрытиеЗапускПриложения(КодВозврата, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры // ИмяКаталогаВыгрузкиОткрытие()

////////////////////////
// Заполнить, выгрузить

&НаКлиенте
// Обработчик команды "КомандаТаблицаНачисленийЗаполнить".
Процедура КомандаТаблицаНачисленийЗаполнить(Команда)
	
	ТекстОшибки = ПроверкаЗаполненияФормы();
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ФайлНаДиске = Новый Файл(Объект.ИмяКаталогаВыгрузки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаТаблицаНачисленийЗаполнитьФайлСуществует", ЭтотОбъект);
	ФайлНаДиске.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения проверки существования файла.
Процедура КомандаТаблицаНачисленийЗаполнитьФайлСуществует(Существует, ДополнительныеПараметры) Экспорт
	
	Если НЕ Существует Тогда
		ПоказатьПредупреждение(Неопределено, "Каталог не найден!");
		Возврат;
	КонецЕсли;
	
	Если Объект.СвердловскаяОбластьРеж_ТаблицаНачислений.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаЗаполнитьЗавершение", ЭтотОбъект);
		
		ТекстВопроса = "Перед повторным заполением таблица выгрузки будет очищена. Продолжить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
	Иначе
		
		КомандаТаблицаНачисленийЗаполнитьНаСервере();
		Элементы.ТаблицаНачисленийВыгрузить.Доступность = Объект.СвердловскаяОбластьРеж_ТаблицаНачислений.Количество() > 0;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Обработчик результата опроса команды "КомандаЗаполнитьВсе".
Процедура КомандаЗаполнитьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Объект.СвердловскаяОбластьРеж_ТаблицаНачислений.Очистить();
		КомандаТаблицаНачисленийЗаполнитьНаСервере();
		Элементы.ТаблицаНачисленийВыгрузить.Доступность = Объект.СвердловскаяОбластьРеж_ТаблицаНачислений.Количество() > 0;
		
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьВсеЗавершение()

&НаСервере
// Собственно заполнение таблицы ТаблицаНачислений.
//
Процедура КомандаТаблицаНачисленийЗаполнитьНаСервере()
	
	ОбработкаОбъект = ДанныеФормыВЗначение(Объект, Тип("ОбработкаОбъект.УПЖКХ_ВыгрузкиВОрганыСоцЗащиты"));
	ОбработкаОбъект.СформироватьТаблицуНачисленийСвердловскаяОбластьРеж(ТолькоЛьготники);
	ЗначениеВДанныеФормы(ОбработкаОбъект, Объект);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "КомандаТаблицаНачисленийВыгрузить".
Процедура КомандаТаблицаНачисленийВыгрузить(Команда)
	
	Если ПустаяСтрока(Объект.ИмяКаталогаВыгрузки) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не указан каталог выгрузки!");
		Возврат;
	КонецЕсли;
	
	Файл = Новый Файл(Объект.ИмяКаталогаВыгрузки);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаТаблицаНачисленийВыгрузитьФайлСуществует", ЭтотОбъект);
	Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения проверки существования файла.
Процедура КомандаТаблицаНачисленийВыгрузитьФайлСуществует(Существует, ДополнительныеПараметры) Экспорт
	
	Если НЕ Существует Тогда
		ПоказатьПредупреждение(Неопределено, "Каталог не существует");
		Возврат;
	КонецЕсли;
	
	ВыгрузитьДанныеВФайл();
	
КонецПроцедуры

&НаКлиенте
// Предназначена для выгрузки данных из таблицы начислений в dbf-файл.
//
Процедура ВыгрузитьДанныеВФайл()
	
	Если Объект.СвердловскаяОбластьРеж_ТаблицаНачислений.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В таблице выгружаемых данных отсутствуют данные для выгрузки в dbf-файл.");
		Возврат;
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
		
		ФайлВыгрузки           = Новый XBase;
		ФайлВыгрузки.Кодировка = КодировкаXBase.OEM;
		
		ФайлВыгрузки.Поля.Добавить("LS",       "S", "10");
		ФайлВыгрузки.Поля.Добавить("VIL",      "S", "50");
		ФайлВыгрузки.Поля.Добавить("STR",      "S", "100");
		ФайлВыгрузки.Поля.Добавить("DOM",      "S", "5");
		ФайлВыгрузки.Поля.Добавить("KOR",      "S", "5");
		ФайлВыгрузки.Поля.Добавить("KV",       "S", "5");
		ФайлВыгрузки.Поля.Добавить("F",        "S", "50");
		ФайлВыгрузки.Поля.Добавить("I",        "S", "50");
		ФайлВыгрузки.Поля.Добавить("O",        "S", "50");
		ФайлВыгрузки.Поля.Добавить("SERVICE",  "N", "5");
		ФайлВыгрузки.Поля.Добавить("V",        "N", "8", "3");
		ФайлВыгрузки.Поля.Добавить("TARIF",    "N", "8", "3");
		ФайлВыгрузки.Поля.Добавить("NORMATIV", "N", "8", "3");
		ФайлВыгрузки.Поля.Добавить("SUMMA",    "N", "8", "2");
		ФайлВыгрузки.Поля.Добавить("SH",       "N", "1");
		ФайлВыгрузки.Поля.Добавить("ORD",      "N", "1");
		ФайлВыгрузки.Поля.Добавить("REDED",    "N", "1");
		ФайлВыгрузки.Поля.Добавить("DATA",     "D");
		ФайлВыгрузки.Поля.Добавить("P_DATA",   "D");
		ФайлВыгрузки.Поля.Добавить("DOLG_AB",  "N", "10", "2");
		
		ИмяФайла = "OUT_" + Формат(Объект.Период, "ДФ=yy") + Формат(Объект.Период, "ДФ=MM") + ".dbf";
		
		ФайлВыгрузки.СоздатьФайл(Объект.ИмяКаталогаВыгрузки + "\" + ИмяФайла,); 
		ФайлВыгрузки.АвтоСохранение = Истина;
		
		Для каждого ТекСтрока Из Объект.СвердловскаяОбластьРеж_ТаблицаНачислений Цикл
			ФайлВыгрузки.Добавить();
			ЗаполнитьЗначенияСвойств(ФайлВыгрузки, ТекСтрока);
		КонецЦикла;
		
		ФайлВыгрузки.ЗакрытьФайл();
		
		Текст = "Выгрузка в файл " + ИмяФайла + " завершена!";
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(Текст);
		
	#КонецЕсли
	
КонецПроцедуры // ВыгрузитьДанныеВФайл()

#КонецОбласти
