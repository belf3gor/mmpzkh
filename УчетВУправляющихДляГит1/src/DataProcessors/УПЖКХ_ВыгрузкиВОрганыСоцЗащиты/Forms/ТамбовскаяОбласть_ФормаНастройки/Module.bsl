
//////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ПрочиеПроцедурыИФункции

&НаСервере
// Процедура заполняет таблицу услуг на сервере.
//
Процедура ЗаполнитьТаблицуУслугНаСервере(Идентификатор)
	
	Отбор = Новый Структура;
	Отбор.Вставить("КодУслугиВОСЗН", Идентификатор);
	
	НайденныеСтроки = Объект.ТамбовскаяОбласть_ЖКУ_ВБазе.Выгрузить(Отбор, "УслугаВБазе");
	
	Для Каждого ТекСтрока из НайденныеСтроки Цикл
		ЗаполнитьЗначенияСвойств(ТП_УслугаВБазе.Добавить(), ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблицуУслугНаСервере()

&НаСервере
// Процедура считывает данные из указанного файла услуг.
//
Процедура СчитатьИзФайлаУслугиНаСервере(МассивОписанийФайлов)
	
	АдресФайла = ПолучитьИмяВременногоФайла("DBF");
	ВременныйФайл = Новый Файл(АдресФайла);
	СтароеИмяФайла = ВременныйФайл.ИмяБезРасширения;
	НовоеИмяФайла = Прав(ВременныйФайл.ИмяБезРасширения, 8);
	АдресФайла = СтрЗаменить(ВременныйФайл.ПолноеИмя, СтароеИмяФайла, НовоеИмяФайла);
	
	Для Каждого ОписаниеФайла Из МассивОписанийФайлов Цикл
		
		ПолучитьИзВременногоХранилища(ОписаниеФайла.Хранение).Записать(АдресФайла);
		
		УдалитьИзВременногоХранилища(ОписаниеФайла.Хранение);
		
	КонецЦикла;
	
	ФайлДБФ = Новый XBase;
	ФайлДБФ.Кодировка = КодировкаXBase.OEM;
	ФайлДБФ.ОткрытьФайл(АдресФайла, ,Истина);
	
	Если ФайлДБФ.Открыта() Тогда
		
		Объект.ТамбовскаяОбласть_ЖКУ.Очистить();
		
		Пока Не ФайлДБФ.ВКонце() Цикл
			
			KOD = "";
			KOD1 = "";
			KOD2 = "";
			KOD3 = "";
			
			НоваяЗапись = Объект.ТамбовскаяОбласть_ЖКУ.Добавить();
			НоваяЗапись.name = СокрЛП(ФайлДБФ.name);
			
			KOD  = СокрЛП(ФайлДБФ.VID);
			KOD1 = СокрЛП(ФайлДБФ.KOD1);
			KOD2 = СокрЛП(ФайлДБФ.KOD2);
			KOD3 = СокрЛП(ФайлДБФ.KOD3);
			
			НоваяЗапись.code = ?(KOD3 = "", "00", "") + ?(KOD2 = "", "00", "") + ?(KOD1 = "", "00", "")
								+ KOD + KOD1 + KOD2 + KOD3;
			
			ФайлДБФ.Следующая();
			
		КонецЦикла;
		
		ФайлДБФ.ЗакрытьФайл();
		
		Объект.ТамбовскаяОбласть_ЖКУ_ВБазе.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры // СчитатьИзФайлаУслугиНаСервере()

&НаСервере
// Процедура считывает данные из указанного файла льготных категорий.
//
Процедура СчитатьИзФайлаЛьготныеКатегорииНаСервере(МассивОписанийФайлов)
	
	АдресФайла = ПолучитьИмяВременногоФайла("DBF");
	ВременныйФайл = Новый Файл(АдресФайла);
	СтароеИмяФайла = ВременныйФайл.ИмяБезРасширения;
	НовоеИмяФайла = Прав(ВременныйФайл.ИмяБезРасширения, 8);
	АдресФайла = СтрЗаменить(ВременныйФайл.ПолноеИмя, СтароеИмяФайла, НовоеИмяФайла);

	
	Для Каждого ОписаниеФайла Из МассивОписанийФайлов Цикл
		
		ПолучитьИзВременногоХранилища(ОписаниеФайла.Хранение).Записать(АдресФайла);
		
		УдалитьИзВременногоХранилища(ОписаниеФайла.Хранение);
		
	КонецЦикла;
	
	ФайлДБФ = Новый XBase;
	ФайлДБФ.Кодировка = КодировкаXBase.OEM;
	ФайлДБФ.ОткрытьФайл(АдресФайла, ,Истина);
	
	Если ФайлДБФ.Открыта() Тогда
		
		Объект.ТамбовскаяОбласть_ЛьготныеКатегории.Очистить();
		
		Пока Не ФайлДБФ.ВКонце() Цикл
			
			Если ЗначениеЗаполнено(СокрЛП(ФайлДБФ.KODK)) Тогда
				НоваяЗапись = Объект.ТамбовскаяОбласть_ЛьготныеКатегории.Добавить();
				НоваяЗапись.КодКатегории          = СокрЛП(ФайлДБФ.KODK);
				НоваяЗапись.НаименованиеКатегории = СокрЛП(ФайлДБФ.NAME);
			КонецЕсли;
			
			ФайлДБФ.Следующая();
			
		КонецЦикла;
		
		ФайлДБФ.ЗакрытьФайл();
		
	КонецЕсли;
	
КонецПроцедуры // СчитатьИзФайлаЛьготныеКатегории()

&НаСервереБезКонтекста
// Возвращает массив загружаемых файлов по переданным именам.
//
// Параметры:
//  МассивИменФайлов - Массив - массив, содержащий полные имена передаваемых файлов.
//
// Возвращаемое значение:
//  МассивПередаваемыхФайлов - Массив - массив описаний передаваемых файлов.
Функция ПодготовитьМассивПередаваемыхФайловДляЗагрузки(МассивИменФайлов)
	
	Возврат УПЖКХ_РаботаСФайламиСервер.ПодготовитьМассивПередаваемыхФайловДляЗагрузки(МассивИменФайлов);
	
КонецФункции // ПодготовитьМассивПередаваемыхФайловДляЗагрузки()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// РАБОТА С ВРЕМЕННЫМ ХРАНИЛИЩЕМ

#Область РаботаСВременнымХранилищем

&НаСервере
// Помещает настройки во временное хранилище.
//
Функция ПоместитьНастройкиВХранилище()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ФайлЗагрузкиУслуг",             ФайлЗагрузкиУслуг);
	СтруктураНастроек.Вставить("ФайлЗагрузкиЛьготныхКатегорий", ФайлЗагрузкиЛьготныхКатегорий);
	СтруктураНастроек.Вставить("КодУслугиОтопления",            КодУслугиОтопления);
	
	СтруктураНастроек.Вставить("ТамбовскаяОбласть_ЖКУ",                          Объект.ТамбовскаяОбласть_ЖКУ.Выгрузить());
	СтруктураНастроек.Вставить("ТамбовскаяОбласть_ЖКУ_ВБазе",                    Объект.ТамбовскаяОбласть_ЖКУ_ВБазе.Выгрузить());
	СтруктураНастроек.Вставить("ТамбовскаяОбласть_ЛьготныеКатегории",            Объект.ТамбовскаяОбласть_ЛьготныеКатегории.Выгрузить());
	СтруктураНастроек.Вставить("ТамбовскаяОбласть_КодыУслугДляРасчетаНорматива", Объект.ТамбовскаяОбласть_КодыУслугДляРасчетаНорматива.Выгрузить());
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	
КонецФункции

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ПризнакУдаления = Ложь;
	
	// Получаем настройки из хранилища.
	Если Параметры.Свойство("АдресНастроекВХранилище") И Не Параметры.АдресНастроекВХранилище = Неопределено Тогда
		
		СтруктураНастроек = ПолучитьИзВременногоХранилища(Параметры.АдресНастроекВХранилище);
		
		Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
			
			СтруктураНастроек.Свойство("ФайлЗагрузкиУслуг",             ФайлЗагрузкиУслуг);
			СтруктураНастроек.Свойство("ФайлЗагрузкиЛьготныхКатегорий", ФайлЗагрузкиЛьготныхКатегорий);
			СтруктураНастроек.Свойство("КодУслугиОтопления",            КодУслугиОтопления);
			
			Если СтруктураНастроек.Свойство("ТамбовскаяОбласть_ЖКУ") Тогда
				Объект.ТамбовскаяОбласть_ЖКУ.Загрузить(СтруктураНастроек.ТамбовскаяОбласть_ЖКУ);
			КонецЕсли;
			
			Если СтруктураНастроек.Свойство("ТамбовскаяОбласть_ЖКУ_ВБазе") Тогда
				Объект.ТамбовскаяОбласть_ЖКУ_ВБазе.Загрузить(СтруктураНастроек.ТамбовскаяОбласть_ЖКУ_ВБазе);
			КонецЕсли;
			
			Если СтруктураНастроек.Свойство("ТамбовскаяОбласть_ЛьготныеКатегории") Тогда
				Объект.ТамбовскаяОбласть_ЛьготныеКатегории.Загрузить(СтруктураНастроек.ТамбовскаяОбласть_ЛьготныеКатегории);
			КонецЕсли;
			
			Если СтруктураНастроек.Свойство("ТамбовскаяОбласть_КодыУслугДляРасчетаНорматива") Тогда
				Объект.ТамбовскаяОбласть_КодыУслугДляРасчетаНорматива.Загрузить(СтруктураНастроек.ТамбовскаяОбласть_КодыУслугДляРасчетаНорматива);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии(Отказ)
	
	ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиенте();
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "КомандаСохранить".
Процедура КомандаСохранить(Команда)
	
	Закрыть(ПоместитьНастройкиВХранилище());
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ЗаполнитьУслуги".
Процедура КомандаЗаполнитьУслуги(Команда)
	
	Если РасширениеПодключено И ПустаяСтрока(ФайлЗагрузкиУслуг) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не указан файл загрузки услуг!", "Не указан файл загрузки услуг!");
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаЗаполнитьУслугиОбработкаЗагрузки", ЭтаФорма);
	
	Если РасширениеПодключено Тогда
		
		МассивИменФайлов = Новый Массив();
		МассивИменФайлов.Добавить(ФайлЗагрузкиУслуг);
		
		МассивЗагружаемыхФайлов = ПодготовитьМассивПередаваемыхФайловДляЗагрузки(МассивИменФайлов);
		
		Если МассивЗагружаемыхФайлов = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		СоответствиеИмениИАдреса = Новый Соответствие();
		СоответствиеИмениИАдреса.Вставить("",);
		МассивЗагружаемыхФайлов = УПЖКХ_РаботаСФайламиСервер.ПолучитьМассивПередаваемыхФайлов(СоответствиеИмениИАдреса);
	КонецЕсли;
	
	УПЖКХ_РаботаСФайламиКлиент.ЗагрузитьФайл(РасширениеПодключено, ОписаниеОповещения, МассивЗагружаемыхФайлов);
	
КонецПроцедуры  // КомандаЗаполнитьУслуги()

&НаКлиенте
// Обработчик команды "ЗагрузитьИзФайлаЛьготныеКатегории".
Процедура КомандаЗагрузитьИзФайлаЛьготныеКатегории(Команда)
	
	Если РасширениеПодключено И ПустаяСтрока(ФайлЗагрузкиЛьготныхКатегорий) Тогда
		ТекстОшибки = ?(НЕ ПустаяСтрока(ТекстОшибки), ТекстОшибки + Символы.ПС + "Не указан файл загрузки льготных категорий!", "Не указан файл загрузки льготных категорий!");
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаЗагрузитьИзФайлаЛьготныеКатегорииОбработкаЗагрузки", ЭтаФорма);
	
	Если РасширениеПодключено Тогда
		
		МассивИменФайлов = Новый Массив();
		МассивИменФайлов.Добавить(ФайлЗагрузкиЛьготныхКатегорий);
		
		МассивЗагружаемыхФайлов = ПодготовитьМассивПередаваемыхФайловДляЗагрузки(МассивИменФайлов);
		
		Если МассивЗагружаемыхФайлов = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		СоответствиеИмениИАдреса = Новый Соответствие();
		СоответствиеИмениИАдреса.Вставить("",);
		МассивЗагружаемыхФайлов = УПЖКХ_РаботаСФайламиСервер.ПолучитьМассивПередаваемыхФайлов(СоответствиеИмениИАдреса);
	КонецЕсли;
	
	УПЖКХ_РаботаСФайламиКлиент.ЗагрузитьФайл(РасширениеПодключено, ОписаниеОповещения, МассивЗагружаемыхФайлов);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик завершения работы процедуры "КомандаЗаполнитьУслуги"
//
Процедура КомандаЗаполнитьУслугиОбработкаЗагрузки(МассивОписанийФайлов, ДополнительныеПараметры) Экспорт
	
	// Приходит значение Неопределено, если пользователь отменил выбор файла в веб клиенте,
	// при этом плагин "Расширение для работы с 1С:Предприятием" не подключен.
	Если МассивОписанийФайлов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ТамбовскаяОбласть_ЖКУ.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаЗаполнитьУслугиОбработкаЗагрузкиЗавершение", ЭтотОбъект,
											  Новый Структура("МассивОписанийФайлов", МассивОписанийФайлов));
		
		ТекстВопроса = "Перед заполением таблица соответствия услуг будет очищена. Продолжить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		
	Иначе
		
		СчитатьИзФайлаУслугиНаСервере(МассивОписанийФайлов);
		
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьУслугиОбработкаЗагрузки()

&НаКлиенте
// Обработчик результата опроса команды "ЗаполнитьУслуги".
Процедура КомандаЗаполнитьУслугиОбработкаЗагрузкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		СчитатьИзФайлаУслугиНаСервере(ДополнительныеПараметры.МассивОписанийФайлов);
		
		УправлениеФормой(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры // КомандаЗаполнитьУслугиОбработкаЗагрузкиЗавершение()

&НаКлиенте
// Процедура - обработчик завершения работы процедуры "КомандаЗаполнитьЛьготныеКатегории"
//
Процедура КомандаЗагрузитьИзФайлаЛьготныеКатегорииОбработкаЗагрузки(МассивОписанийФайлов, ДополнительныеПараметры) Экспорт
	
	// Приходит значение Неопределено, если пользователь отменил выбор файла в веб клиенте,
	// при этом плагин "Расширение для работы с 1С:Предприятием" не подключен.
	Если МассивОписанийФайлов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ТамбовскаяОбласть_ЛьготныеКатегории.Количество() > 0 Тогда
		
		Оповещение = Новый ОписаниеОповещения("КомандаЗагрузитьИзФайлаЛьготныеКатегорииОбработкаЗагрузкиЗавершение", ЭтотОбъект,
											  Новый Структура("МассивОписанийФайлов", МассивОписанийФайлов));
		
		ТекстВопроса = "Перед заполением таблица льготных категорий будет очищена. Продолжить?";
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		
	Иначе
		СчитатьИзФайлаЛьготныеКатегорииНаСервере(МассивОписанийФайлов);
	КонецЕсли;
	
КонецПроцедуры // КомандаЗагрузитьИзФайлаЛьготныеКатегорииОбработкаЗагрузки()

&НаКлиенте
// Обработчик результата опроса команды "ЗагрузитьИзФайлаЛьготныеКатегории".
Процедура КомандаЗагрузитьИзФайлаЛьготныеКатегорииОбработкаЗагрузкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СчитатьИзФайлаЛьготныеКатегорииНаСервере(ДополнительныеПараметры.МассивОписанийФайлов);
	КонецЕсли;
	
КонецПроцедуры // КомандаЗагрузитьИзФайлаЛьготныеКатегорииОбработкаЗагрузкиЗавершение()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Файл загрузки услуг".
//
Процедура ФайлЗагрузкиУслугНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_РаботаСФайламиКлиент.ВыбратьФайл(ЭтаФорма, "Файл данных (*.dbf)|*.dbf", "dbf", "Выберите файл загрузки услуг", ФайлЗагрузкиУслуг);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик завершения функции ДиалогВыбораФайла.
//
Процедура ФайлЗагрузкиУслугНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ФайлЗагрузкиУслуг = ДиалогВыбораФайла.ПолноеИмяФайла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "Открытие" поля ввода "Файл загрузки услуг".
//
Процедура ФайлЗагрузкиУслугОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УПЖКХ_РаботаСФайламиКлиент.ОткрытиеФайлаКаталога(ФайлЗагрузкиУслуг);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "Файл загрузки льготных категорий".
//
Процедура ФайлЗагрузкиЛьготныхКатегорийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_РаботаСФайламиКлиент.ВыбратьФайл(ЭтаФорма, "Файл данных (*.dbf)|*.dbf", "dbf", "Выберите файл загрузки льготных категорий", ФайлЗагрузкиЛьготныхКатегорий);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик завершения функции ДиалогВыбораФайла.
//
Процедура ФайлЗагрузкиЛьготныхКатегорийНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ФайлЗагрузкиЛьготныхКатегорий = ДиалогВыбораФайла.ПолноеИмяФайла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "Открытие" поля ввода "Файл загрузки льготных категорий".
//
Процедура ФайлЗагрузкиЛьготныхКатегорийОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УПЖКХ_РаботаСФайламиКлиент.ОткрытиеФайлаКаталога(ФайлЗагрузкиЛьготныхКатегорий);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" табличного поля "ТП_УслугаВБазе".
//
Процедура ТП_УслугаВБазеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Устанавливаем запрет на добавление строк копированием.
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" табличного поля "ТП_УслугаВБазе".
//
Процедура ТП_УслугаВБазеПередУдалением(Элемент, Отказ)
	
	Если ПризнакУдаления Тогда
		Отказ = Истина;
		ПризнакУдаления = Ложь;
	Иначе
		// При удалении строки удаляем соответствующие записи в ТамбовскаяОбласть_ЖКУ_ВБазе.
		УслугаВБазе              = Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе;
		ИдентификаторУслугиВОСЗН = Элементы.ТамбовскаяОбласть_ЖКУ.ТекущиеДанные.code;
		УслугаВОСЗН              = Элементы.ТамбовскаяОбласть_ЖКУ.ТекущиеДанные.name;
		УслугаОДН                = Элементы.ТамбовскаяОбласть_ЖКУ.ТекущиеДанные.УслугаОДН;
		
		Отбор = Новый Структура;
		Отбор.Вставить("УслугаВБазе",    УслугаВБазе);
		Отбор.Вставить("КодУслугиВОСЗН", ИдентификаторУслугиВОСЗН);
		Отбор.Вставить("УслугаВОСЗН",    УслугаВОСЗН);
		Отбор.Вставить("УслугаОДН",      УслугаОДН);
		
		СтрокиУдаления = Объект.ТамбовскаяОбласть_ЖКУ_ВБазе.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
			Объект.ТамбовскаяОбласть_ЖКУ_ВБазе.Удалить(СтрокаУдаления);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередОкончаниемРедактирования" таблицы "УслугаВБазе".
//
Процедура ТП_УслугаВБазеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Добавление незаполненных полей недопустимо!");
		ПризнакУдаления = Истина;
		ТП_УслугаВБазе.Удалить(Элементы.ТП_УслугаВБазе.ТекущиеДанные);
		
		Если ЗначениеЗаполнено(ПредыдущаяУслуга) Тогда
			Идентификатор   = Элементы.ТамбовскаяОбласть_ЖКУ.ТекущиеДанные.code;
			ПризнакУдаления = Истина;
			Отбор = Новый Структура;
			Отбор.Вставить("КодУслугиВОСЗН", Идентификатор);
			Отбор.Вставить("УслугаВБазе",    ПредыдущаяУслуга);
			
			СтрокиУдаления = Объект.ТамбовскаяОбласть_ЖКУ_ВБазе.НайтиСтроки(Отбор);
			
			Для Каждого СтрокаУдаления ИЗ СтрокиУдаления Цикл
				Объект.ТамбовскаяОбласть_ЖКУ_ВБазе.Удалить(СтрокаУдаления);
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриОкончанииРедактирования" табличного поля "ТП_УслугаВБазе".
//
Процедура ТП_УслугаВБазеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		// Добавляем запись в ТамбовскаяОбласть_ЖКУ_ВБазе.
		УслугаВБазе              = Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе;
		ИдентификаторУслугиВОСЗН = Элементы.ТамбовскаяОбласть_ЖКУ.ТекущиеДанные.code;
		УслугаВОСЗН              = Элементы.ТамбовскаяОбласть_ЖКУ.ТекущиеДанные.name;
		УслугаОДН                = Элементы.ТамбовскаяОбласть_ЖКУ.ТекущиеДанные.УслугаОДН;
		
		Если НоваяСтрока Тогда
			НоваяСтрокаСоответствия                = Объект.ТамбовскаяОбласть_ЖКУ_ВБазе.Добавить();
			НоваяСтрокаСоответствия.УслугаВБазе    = УслугаВБазе;
			НоваяСтрокаСоответствия.КодУслугиВОСЗН = ИдентификаторУслугиВОСЗН;
			НоваяСтрокаСоответствия.УслугаВОСЗН    = УслугаВОСЗН;
			НоваяСтрокаСоответствия.УслугаОДН      = УслугаОДН;
		Иначе
			Если НЕ ПредыдущаяУслуга = УслугаВБазе Тогда
				Отбор = Новый Структура;
				Отбор.Вставить("КодУслугиВОСЗН", ИдентификаторУслугиВОСЗН);
				Отбор.Вставить("УслугаВБазе",    ПредыдущаяУслуга);
				
				НайденнаяСтрока = Объект.ТамбовскаяОбласть_ЖКУ_ВБазе.НайтиСтроки(Отбор);
				Если НайденнаяСтрока.Количество() = 1 Тогда
					НайденнаяСтрока[0].УслугаВБазе = УслугаВБазе;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриНачалеРедактирования" табличного поля "ТП_УслугаВБазе".
//
Процедура ТП_УслугаВБазеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	// Запоминаем предыдущее значение перезаписываемой строки.
	Если НЕ НоваяСтрока Тогда
		ПредыдущаяУслуга = Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля ввода "УслугаВБазе" таблицы "Услуги в Базе".
//
Процедура ТП_УслугаВБазеУслугаВБазеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Список уже выбранных услуг по данной услуге в ОСЗН.
	СписокВыбранныхУслуг = Новый СписокЗначений;
	СтрокиВыбранныхУслуг = Объект.ТамбовскаяОбласть_ЖКУ_ВБазе.НайтиСтроки(Новый Структура("КодУслугиВОСЗН", Элементы.ТамбовскаяОбласть_ЖКУ.ТекущиеДанные.code));
	Для Каждого СтрокаВыбраннойУслуги Из СтрокиВыбранныхУслуг Цикл
		СписокВыбранныхУслуг.Добавить(СтрокаВыбраннойУслуги.УслугаВБазе);
	КонецЦикла;
	
	ВидСравненияВОтборе = ВидСравненияКомпоновкиДанных.НеВСписке;
	
	Форма = ПолучитьФорму("Справочник.КВП_Услуги.ФормаВыбора", Новый Структура("ТекущаяСтрока", Элементы.ТП_УслугаВБазе.ТекущиеДанные.УслугаВБазе), Элемент);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(Форма.Список.КомпоновщикНастроек.Настройки.Отбор, "Ссылка", СписокВыбранныхУслуг,
															ВидСравненияКомпоновкиДанных.НеВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриАктивизацииСтроки" табличного поля "Услуги в ОСЗН".
//
Процедура ТомскаяОбласть_ЖКУПриАктивизацииСтроки(Элемент)
	
	// При активации строки УслугаВОСЗН, загружаем соответствия в УслугаВБазе. 
	ТП_УслугаВБазе.Очистить();
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		Идентификатор = Элемент.ТекущиеДанные.code;
		ЗаполнитьТаблицуУслугНаСервере(Идентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередНачаломДобавления" табличного поля "ТамбовскаяОбласть_ЖКУ".
//
Процедура ТамбовскаяОбласть_ЖКУПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередУдалением" табличного поля "ТамбовскаяОбласть_ЖКУ".
//
Процедура ТамбовскаяОбласть_ЖКУПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля ввода "УслугаОДН" табличного поля "ТамбовскаяОбласть_ЖКУ".
//
Процедура ТамбовскаяОбласть_ЖКУУслугаОДНПриИзменении(Элемент)
	
	Если НЕ Элементы.ТамбовскаяОбласть_ЖКУ.ТекущиеДанные = Неопределено Тогда
		ИдентификаторУслугиВОСЗН = Элементы.ТамбовскаяОбласть_ЖКУ.ТекущиеДанные.code;
		УслугаВОСЗН              = Элементы.ТамбовскаяОбласть_ЖКУ.ТекущиеДанные.name;
		
		Отбор = Новый Структура;
		Отбор.Вставить("КодУслугиВОСЗН", ИдентификаторУслугиВОСЗН);
		Отбор.Вставить("УслугаВОСЗН",    УслугаВОСЗН);
		
		НайденнаяСтрока = Объект.ТамбовскаяОбласть_ЖКУ_ВБазе.НайтиСтроки(Отбор);
		Для Каждого ТекСтрока ИЗ НайденнаяСтрока Цикл
			ТекСтрока.УслугаОДН = Элементы.ТамбовскаяОбласть_ЖКУ.ТекущиеДанные.УслугаОДН;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик заверешения работы процедуры "ДиалогВыбораФайла.Показать".
//
Процедура ВыбратьФайлЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДиалогВыбораФайла.Заголовок = "Выберите файл загрузки услуг" Тогда
		ФайлЗагрузкиУслуг = ДиалогВыбораФайла.ПолноеИмяФайла;
	ИначеЕсли ДиалогВыбораФайла.Заголовок = "Выберите файл загрузки льготных категорий" Тогда
		ФайлЗагрузкиЛьготныхКатегорий = ДиалогВыбораФайла.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

#Область ПроцедурыИФункцииДляУправленияВнешнимВидомФорм

&НаКлиентеНаСервереБезКонтекста
// Процедура управляет внешним видом формы.
//
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Элементы.ФайлЗагрузкиУслуг.Видимость             = Форма.РасширениеПодключено;
	Элементы.ФайлЗагрузкиЛьготныхКатегорий.Видимость = Форма.РасширениеПодключено;
	
	// Блокировка командной панели "КП_УслугиВБазе".
	Если Объект.ТамбовскаяОбласть_ЖКУ.Количество() = 0 Тогда
		Элементы.ТП_УслугаВБазе.Доступность = Ложь;
	Иначе
		Элементы.ТП_УслугаВБазе.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры // УправлениеФормой()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ФАЙЛАМИ

#Область СлужебныеПроцедурыРаботыСФайлами

&НаКлиенте
// Определяет подключено ли расширение для работы с файлами.
Процедура ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиенте()
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиентеЗавершение", ЭтотОбъект);
	
	УПЖКХ_РаботаСФайламиКлиент.ОпределитьВидВзаимодействияСФайловойСистемой(ОповещениеЗавершения);
	
КонецПроцедуры // ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиентеЗавершение()

&НаКлиенте
// Обработчик процедуры определяющей подключено расширение работы с файлами или нет.
Процедура ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиентеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		РасширениеПодключено = Результат;
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти
