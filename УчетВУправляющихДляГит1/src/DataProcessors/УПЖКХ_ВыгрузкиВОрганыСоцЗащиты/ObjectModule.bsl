
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область Механизм_Подключения_Дополнительной_Обработки

// Для внутреннего использования.
// Сведения для регистрации отчета.
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("Вид",             "ДополнительнаяОбработка"); // Варианты: "ДополнительнаяОбработка", "ДополнительныйОтчет", 
																			 // "ЗаполнениеОбъекта", "Отчет", "ПечатнаяФорма", "СозданиеСвязанныхОбъектов".
	
	ПараметрыРегистрации.Вставить("Наименование",    "Внешняя обработка: " + Метаданные().Синоним);
	ПараметрыРегистрации.Вставить("Версия",          "<Версия>");     // Версия внешней обработки.
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);           // Если ИСТИНА, то выводится конфигураторская ошибка в типовой реализации,
																	  // связанная с ограничениями при использовании компоненты в механизмах внешних отчетов и обработок.
	ПараметрыРегистрации.Вставить("Информация",      "<Информация>");
	ПараметрыРегистрации.Вставить("ВерсияБСП",       "2.4.3.98");     // Не ниже какой версии БСП подерживается обработка.
	
	// Команды формирования обработки:
	ТаблицаКоманд = Новый ТаблицаЗначений;
	ТаблицаКоманд.Колонки.Добавить("Представление",         Новый ОписаниеТипов("Строка"));
	ТаблицаКоманд.Колонки.Добавить("Идентификатор",         Новый ОписаниеТипов("Строка"));
	ТаблицаКоманд.Колонки.Добавить("Использование",         Новый ОписаниеТипов("Строка"));
	ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение",  Новый ОписаниеТипов("Булево"));
	ТаблицаКоманд.Колонки.Добавить("Модификатор",           Новый ОписаниеТипов("Строка"));
	
	// Для Платежных документов:
	ДобавитьКоманду(ТаблицаКоманд,
					"Открыть " + ПараметрыРегистрации.Наименование,
					"Открыть " + ПараметрыРегистрации.Наименование,
					"ОткрытиеФормы",	// Использование.  Варианты: "ОткрытиеФормы", "ВызовКлиентскогоМетода", "ВызовСерверногоМетода".
					Ложь,				// Показывать оповещение. Варианты Истина, Ложь.
					"");				// Модификатор.
	
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции // СведенияОВнешнейОбработке()

// Добавляет команды в таблицу.
Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")

	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление        = Представление;
	НоваяКоманда.Идентификатор        = Идентификатор;
	НоваяКоманда.Использование        = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор          = Модификатор;

КонецПроцедуры // ДобавитьКоманду()

#КонецОбласти // Механизм_Подключения_Дополнительной_Обработки

//////////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ВЫГРУЗКИ ДЛЯ МОСКОВСКОЙ ОБЛАСТИ

#Область МосковскаяОбласть

/////////////////////
// Услуги.

// Заполняет таблицу видов услуг в ОСЗН по умолчанию.
//
Процедура ЗаполнитьТаблицуВидовУслуг() Экспорт
	
	Макет = ПолучитьМакет("МосковскаяОбласть2_Макет");
	
	МосковскаяОбласть2_ВидыУслуг.Очистить();
	
	// Для услуг из "СпискаУслуг1" будет произеден поиск данных о тарифах и начислениях.
	ДобавитьСтрокиТаблицыВидовУслугСогласноСписку(Макет, "СписокВидовУслуг1", 1);
	
	// Для услуг из "СпискаУслуг2" будет произеден поиск данных о тарифах,
	// начислениях, наличии счетчиков и нормах потребления.
	ДобавитьСтрокиТаблицыВидовУслугСогласноСписку(Макет, "СписокВидовУслуг2", 2);
	
	// Для услуг из "СпискаУслуг3" будет произеден поиск данных о тарифах,
	// начислениях, нормах потребления и количество л/с, на которые распределяется показания счетчиков.
	ДобавитьСтрокиТаблицыВидовУслугСогласноСписку(Макет, "СписокВидовУслуг3", 3);
	
КонецПроцедуры // ЗаполнитьТаблицуВидовУслуг()

// Добавляет в таблицу видов услуг в ОСЗН строки соглано текущему списку видов услуг.
// 
// Параметры:
//  ТекущийСписокВидовУслуг - СписокЗначений - один из списков значений видов услуг,
//                                             определенных как глобальные переменные данного модуля;
//  ТекущийВидОперации      - Число          - вид операции, согласно нумерации текущего списка видов услуг.
//
Процедура ДобавитьСтрокиТаблицыВидовУслугСогласноСписку(Макет, ИмяСписка, ТекущийВидОперации)
	
	СписокВидовУслуг = Макет.ПолучитьОбласть(ИмяСписка);
	
	Для НомерСтроки = 1 По СписокВидовУслуг.ВысотаТаблицы Цикл
		
		НоваяУслуга                = МосковскаяОбласть2_ВидыУслуг.Добавить();
		НоваяУслуга.ВидОперации    = ТекущийВидОперации;
		НоваяУслуга.Суффикс        = СписокВидовУслуг.Область(НомерСтроки, 1).Текст;
		НоваяУслуга.ВидУслугиВОСЗН = СписокВидовУслуг.Область(НомерСтроки, 2).Текст;
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьСтрокиТаблицыВидовУслугСогласноСписку()

/////////////////////
// Благоустройства.

// Заполняет таблицу благоустройств по умолчанию.
//
Процедура ЗаполнитьТаблицуБлагоустройств() Экспорт
	
	Макет = ПолучитьМакет("МосковскаяОбласть2_Макет");
	
	ОбластьСписокВидовБлагоустройств = Макет.ПолучитьОбласть("СписокВидовБлагоустройств");
	
	Для КодУслуги = 1 По ОбластьСписокВидовБлагоустройств.ВысотаТаблицы Цикл
		
		НоваяСтрока                         = МосковскаяОбласть2_СоответствиеВидовБлагоустройств.Добавить();
		НоваяСтрока.Суффикс                 = ОбластьСписокВидовБлагоустройств.Область(КодУслуги, 1).Текст;
		НоваяСтрока.ВидБлагоустройстваВОСЗН = ОбластьСписокВидовБлагоустройств.Область(КодУслуги, 2).Текст;
		НоваяСтрока.ВидБлагоустройстваВБазе = ?(НоваяСтрока.Суффикс = "KodPlita", Справочники.КВП_ВидыБлагоустройстваОбъектов.Плита, 0);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблицуВидовУслуг()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ И ПРОЦЕДУРЫ ВЫГРУЗКИ ДЛЯ МОСКОВСКОЙ ОБЛАСТИ, г.ПОДОЛЬСК
//
// На основании Постановления Правительства Московской области от 30.12.2008 №1235/52
// "Об утверждении Порядка предоставления компенсации расходов по оплате жилого помещения
// и коммунальных услуг отдельным категориям граждан, имеющим место жительства в Московской области".

#Область МосковскаяОбласть_гПодольск

// Актуализирует порядок зданий в таблице.
Процедура МосковскаяОбластьГородПодольск_АктуализироватьТаблицуПорядокЗданий(врПорядокЗданий) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_Здания.Ссылка КАК Здание
	|ПОМЕСТИТЬ втЗданияВБазе
	|ИЗ
	|	Справочник.КВП_Здания КАК КВП_Здания
	|ГДЕ
	|	НЕ КВП_Здания.ЭтоГруппа
	|	И НЕ КВП_Здания.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПорядокЗданий.Порядок,
	|	ПорядокЗданий.Здание
	|ПОМЕСТИТЬ втПорядокЗданий
	|ИЗ
	|	&ПорядокЗданий КАК ПорядокЗданий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗданияВБазе.Здание,
	|	ЕСТЬNULL(втПорядокЗданий.Порядок, 0) КАК Порядок,
	|	ЕСТЬNULL(втМаксимальныйНомерСтроки.МаксимальныйНомерСтроки, 0) КАК МаксимальныйНомерСтроки
	|ИЗ
	|	втЗданияВБазе КАК втЗданияВБазе
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПорядокЗданий КАК втПорядокЗданий
	|		ПО втЗданияВБазе.Здание = втПорядокЗданий.Здание,
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(втПорядокЗданий.Порядок) КАК МаксимальныйНомерСтроки
	|	ИЗ
	|		втПорядокЗданий КАК втПорядокЗданий) КАК втМаксимальныйНомерСтроки";
	
	Запрос.УстановитьПараметр("Период",        Период);
	Запрос.УстановитьПараметр("ПорядокЗданий", врПорядокЗданий);
	
	врПорядокЗданий = Запрос.Выполнить().Выгрузить();
	
	МосковскаяОбластьГородПодольск_ЗаполнитьНулевыеНомераСтрок(врПорядокЗданий);
	
КонецПроцедуры // МосковскаяОбластьГородПодольск_АктуализироватьТаблицуПорядокЗданий()

// Процедура заполняет нулевые номера строк таблицы.
Процедура МосковскаяОбластьГородПодольск_ЗаполнитьНулевыеНомераСтрок(врПорядокЗданий)
	
	МаксимальныйНомерСтроки = врПорядокЗданий[0].МаксимальныйНомерСтроки;
	
	Для Каждого ТекСтрока Из врПорядокЗданий Цикл
		Если ТекСтрока.Порядок = 0 Тогда
			ТекСтрока.Порядок = МаксимальныйНомерСтроки + 1;
			МаксимальныйНомерСтроки = МаксимальныйНомерСтроки + 1;
		КонецЕсли;
	КонецЦикла;
	
	врПорядокЗданий.Колонки.Удалить("МаксимальныйНомерСтроки");
	врПорядокЗданий.Сортировать("Порядок Возр");
	
КонецПроцедуры // ЗаполнитьНулевыеНомераСтрок()

// Актуализирует таблицу соответствия услуг.
Процедура МосковскаяОбластьГородПодольск_АктуализироватьТаблицуСоответствияУслуг(врТаблицаСоответствия) Экспорт
	
	МосковскаяОбластьГородПодольск_ТаблицаСоответствия.Очистить();
	
	СписокУслугВОСЗ = МосковскаяОбластьГородПодольск_ПолучитьСписокНаименованийУслугВОСЗН();
	
	Для Каждого ТекЭлемент Из СписокУслугВОСЗ Цикл
		
		УслугаВОСЗ = ТекЭлемент.Значение;
		
		НайденныеСтроки = врТаблицаСоответствия.НайтиСтроки(Новый Структура("УслугаВОСЗ", УслугаВОСЗ));
		Если НайденныеСтроки.Количество() > 0 Тогда
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				
				Если врТаблицаСоответствия.НайтиСтроки(Новый Структура("УслугаВОСЗ, УслугаВБазе", УслугаВОСЗ, ТекСтрока.УслугаВБазе)).Количество() > 0 Тогда
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = врТаблицаСоответствия.Добавить();
				НоваяСтрока.УслугаВОСЗ = УслугаВОСЗ;
				Если Не ТекСтрока.УслугаВБазе.Пустая() Тогда
					НоваяСтрока.УслугаВБазе = ТекСтрока.УслугаВБазе;
				КонецЕсли;
			КонецЦикла;
		Иначе
			НоваяСтрока = врТаблицаСоответствия.Добавить();
			НоваяСтрока.УслугаВОСЗ = УслугаВОСЗ;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // МосковскаяОбластьГородПодольск_АктуализироватьТаблицуСоответствияУслуг()

// Возвращает список наименований услуг ОСЗН.
Функция МосковскаяОбластьГородПодольск_ПолучитьСписокНаименованийУслугВОСЗН() Экспорт
	
	СписокУслугВОСЗ = Новый СписокЗначений;
	СписокУслугВОСЗ.Добавить("Содержание и тех.обслуживание жилья");
	СписокУслугВОСЗ.Добавить("Горячее водоснабжение");
	СписокУслугВОСЗ.Добавить("Холодное водоснабжение");
	СписокУслугВОСЗ.Добавить("Водоотведение");
	СписокУслугВОСЗ.Добавить("Отопление");
	СписокУслугВОСЗ.Добавить("Электроэнергия");
	СписокУслугВОСЗ.Добавить("ОДН ХВС");
	СписокУслугВОСЗ.Добавить("ОДН ГВС");
	СписокУслугВОСЗ.Добавить("ОДН Э/Э");
	
	Возврат СписокУслугВОСЗ;
	
КонецФункции // МосковскаяОбластьГородПодольск_ПолучитьСписокНаименованийУслугВОСЗН()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ВЫГРУЗКИ ДЛЯ РЕСПУБЛИКИ БУРЯТИЯ

#Область РеспубликаБурятия

// Загружает список услуг в ОСЗН по умолчанию из справочника.
//
Процедура РеспубликаБурятия_ОбновитьСписокУслугНаСервере() Экспорт
	
	РеспубликаБурятия_ТаблицаНастроек.Очистить();
	
	Макет = ПолучитьМакет("РеспубликаБурятия_Макет");
	
	ОбластьСправочникУслуг = Макет.ПолучитьОбласть("СправочникУслуг");
	
	Для НомерСтроки = 1 По ОбластьСправочникУслуг.ВысотаТаблицы Цикл
		
		НоваяСтрока                    = РеспубликаБурятия_ТаблицаНастроек.Добавить();
		НоваяСтрока.КодУслугиВОСЗН     = Число(ОбластьСправочникУслуг.Область(НомерСтроки, 1).Текст);
		НоваяСтрока.УслугаВОСЗН        = ОбластьСправочникУслуг.Область(НомерСтроки, 2).Текст;
		
	КонецЦикла;
	
КонецПроцедуры // ОбновитьСписокУслугНаСервере()

// Заполнение таблицы выгрузки данными о начислениях.
//
Процедура РеспубликаБурятия_ЗаполнитьТаблицуВыгрузки() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("ТаблицаУслугВБазе",              РеспубликаБурятия_УслугиВБазе.Выгрузить());
	Запрос.УстановитьПараметр("ДатаНачала",                     НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ДатаКонца",                      КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",                    Организация);
	Запрос.УстановитьПараметр("КодОрганизации",                 КодОрганизации);
	Запрос.УстановитьПараметр("ВыводЛицевыхСчетов",             ВыводЛицевыхСчетов);
	Запрос.УстановитьПараметр("ИспользоватьФиксированныйТариф", ИспользоватьФиксированныйТариф);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаУслугВБазе.КодУслугиВОСЗН,
	|	ТаблицаУслугВБазе.ФиксированныйТариф,
	|	ТаблицаУслугВБазе.УслугаВБазе
	|ПОМЕСТИТЬ втТаблицаУслугВБазе
	|ИЗ
	|	&ТаблицаУслугВБазе КАК ТаблицаУслугВБазе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.Тариф КАК TAR,
	|	УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот КАК SUM,
	|	0 КАК OPL
	|ПОМЕСТИТЬ втНачисления_Подготовительная
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНачала,
	|			&ДатаКонца,
	|			Месяц,
	|			Организация = &Организация
	|				И Услуга В
	|					(ВЫБРАТЬ
	|						втТаблицаУслугВБазе.УслугаВБазе
	|					ИЗ
	|						втТаблицаУслугВБазе КАК втТаблицаУслугВБазе)
	|				И РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ))
	|				И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))) КАК УПЖКХ_НачисленияОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	0,
	|	0,
	|	-УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНачала,
	|			&ДатаКонца,
	|			Месяц,
	|			Организация = &Организация
	|				И Услуга В
	|					(ВЫБРАТЬ
	|						втТаблицаУслугВБазе.УслугаВБазе
	|					ИЗ
	|						втТаблицаУслугВБазе КАК втТаблицаУслугВБазе)
	|				И РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ))
	|				И ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))) КАК УПЖКХ_НачисленияОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачисления_Подготовительная.ЛицевойСчет,
	|	втТаблицаУслугВБазе.КодУслугиВОСЗН,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА &ИспользоватьФиксированныйТариф
	|				ТОГДА втТаблицаУслугВБазе.ФиксированныйТариф
	|			ИНАЧЕ втНачисления_Подготовительная.TAR
	|		КОНЕЦ) КАК TAR,
	|	СУММА(втНачисления_Подготовительная.SUM) КАК SUM,
	|	СУММА(втНачисления_Подготовительная.OPL) КАК OPL
	|ПОМЕСТИТЬ втНачисления
	|ИЗ
	|	втНачисления_Подготовительная КАК втНачисления_Подготовительная
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТаблицаУслугВБазе КАК втТаблицаУслугВБазе
	|		ПО втНачисления_Подготовительная.Услуга = втТаблицаУслугВБазе.УслугаВБазе
	|
	|СГРУППИРОВАТЬ ПО
	|	втНачисления_Подготовительная.ЛицевойСчет,
	|	втТаблицаУслугВБазе.КодУслугиВОСЗН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец,
	|	ВЫБОР
	|		КОГДА УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец ССЫЛКА Справочник.Контрагенты
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВладелецКонтрагент
	|ПОМЕСТИТЬ втОтветственныйСобственник
	|ИЗ
	|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втНачисления.ЛицевойСчет
	|				ИЗ
	|					втНачисления КАК втНачисления)) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо,
	|	ФИОФизическихЛицСрезПоследних.Фамилия,
	|	ФИОФизическихЛицСрезПоследних.Имя,
	|	ФИОФизическихЛицСрезПоследних.Отчество
	|ПОМЕСТИТЬ втФИОФизическихЛиц
	|ИЗ
	|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(
	|			&ДатаКонца,
	|			ФизическоеЛицо В
	|				(ВЫБРАТЬ
	|					втОтветственныйСобственник.ОтветственныйВладелец.ФизЛицо
	|				ИЗ
	|					втОтветственныйСобственник КАК втОтветственныйСобственник
	|				ГДЕ
	|					НЕ втОтветственныйСобственник.ВладелецКонтрагент)) КАК ФИОФизическихЛицСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОтветственныйСобственник.ЛицевойСчет,
	|	втФИОФизическихЛиц.Фамилия КАК FAM,
	|	втФИОФизическихЛиц.Имя КАК IMIA,
	|	втФИОФизическихЛиц.Отчество КАК OTCH
	|ПОМЕСТИТЬ втФИО
	|ИЗ
	|	втОтветственныйСобственник КАК втОтветственныйСобственник
	|		ЛЕВОЕ СОЕДИНЕНИЕ втФИОФизическихЛиц КАК втФИОФизическихЛиц
	|		ПО втОтветственныйСобственник.ОтветственныйВладелец.ФизЛицо = втФИОФизическихЛиц.ФизическоеЛицо
	|ГДЕ
	|	НЕ втОтветственныйСобственник.ВладелецКонтрагент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втОтветственныйСобственник.ЛицевойСчет,
	|	втОтветственныйСобственник.ОтветственныйВладелец.Наименование,
	|	"""",
	|	""""
	|ИЗ
	|	втОтветственныйСобственник КАК втОтветственныйСобственник
	|ГДЕ
	|	втОтветственныйСобственник.ВладелецКонтрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель, 0) = 0
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель, 0) = 0
	|						ТОГДА КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель / КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДоляЛС,
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет
	|ПОМЕСТИТЬ втДоли
	|ИЗ
	|	РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втНачисления.ЛицевойСчет
	|				ИЗ
	|					втНачисления КАК втНачисления)) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект,
	|	КВП_ПлощадьПомещенияСрезПоследних.Площадь КАК ОбщаяПлощадь
	|ПОМЕСТИТЬ втПлощадь
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|			&ДатаКонца,
	|			Объект В
	|					(ВЫБРАТЬ
	|						втНачисления.ЛицевойСчет.Адрес
	|					ИЗ
	|						втНачисления КАК втНачисления)
	|				И ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)) КАК КВП_ПлощадьПомещенияСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец) КАК КоличествоПроживающих
	|ПОМЕСТИТЬ втПроживающиеРС
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втНачисления.ЛицевойСчет
	|				ИЗ
	|					втНачисления КАК втНачисления)) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.ЛицевойСчет,
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.КоличествоПроживающих
	|ПОМЕСТИТЬ втУчетКоличестваЖильцов
	|ИЗ
	|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втНачисления.ЛицевойСчет
	|				ИЗ
	|					втНачисления КАК втНачисления)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачисления.ЛицевойСчет,
	|	втНачисления.КодУслугиВОСЗН,
	|	втНачисления.TAR,
	|	втНачисления.SUM,
	|	втНачисления.OPL,
	|	ВЫБОР
	|		КОГДА Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами
	|			ТОГДА ЕСТЬNULL(втУчетКоличестваЖильцов.КоличествоПроживающих, 0)
	|		ИНАЧЕ ЕСТЬNULL(втПроживающиеРС.КоличествоПроживающих, 0)
	|	КОНЕЦ КАК SOSTSEM
	|ПОМЕСТИТЬ втКоличествоПроживающих
	|ИЗ
	|	Константы КАК Константы,
	|	втНачисления КАК втНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПроживающиеРС КАК втПроживающиеРС
	|		ПО втНачисления.ЛицевойСчет = втПроживающиеРС.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУчетКоличестваЖильцов КАК втУчетКоличестваЖильцов
	|		ПО втНачисления.ЛицевойСчет = втУчетКоличестваЖильцов.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКоличествоПроживающих.ЛицевойСчет,
	|	втКоличествоПроживающих.КодУслугиВОСЗН,
	|	втКоличествоПроживающих.TAR,
	|	втКоличествоПроживающих.SUM,
	|	втКоличествоПроживающих.OPL,
	|	втКоличествоПроживающих.SOSTSEM,
	|	ЕСТЬNULL(втДоли.ДоляЛС, 0) * ЕСТЬNULL(втПлощадь.ОбщаяПлощадь, 0) КАК ZHILPLOS
	|ПОМЕСТИТЬ втПлощадьЛС
	|ИЗ
	|	втКоличествоПроживающих КАК втКоличествоПроживающих
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДоли КАК втДоли
	|		ПО втКоличествоПроживающих.ЛицевойСчет = втДоли.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПлощадь КАК втПлощадь
	|		ПО втКоличествоПроживающих.ЛицевойСчет.Адрес = втПлощадь.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПлощадьЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	&КодОрганизации КАК NJ,
	|	ВЫБОР
	|		КОГДА &ВыводЛицевыхСчетов = ""Код""
	|			ТОГДА втПлощадьЛС.ЛицевойСчет.Код
	|		КОГДА &ВыводЛицевыхСчетов В (""Наименование"", ""ЦифрыНаименования"")
	|			ТОГДА втПлощадьЛС.ЛицевойСчет.Наименование
	|		ИНАЧЕ втПлощадьЛС.ЛицевойСчет.Идентификатор
	|	КОНЕЦ КАК LS,
	|	ЕСТЬNULL(втФИО.FAM, """") КАК FAM,
	|	ЕСТЬNULL(втФИО.IMIA, """") КАК IMIA,
	|	ЕСТЬNULL(втФИО.OTCH, """") КАК OTCH,
	|	втПлощадьЛС.SOSTSEM КАК SOSTSEM,
	|	втПлощадьЛС.ZHILPLOS КАК ZHILPLOS,
	|	втПлощадьЛС.КодУслугиВОСЗН,
	|	втПлощадьЛС.TAR,
	|	втПлощадьЛС.SUM,
	|	втПлощадьЛС.OPL
	|ИЗ
	|	втПлощадьЛС КАК втПлощадьЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ втФИО КАК втФИО
	|		ПО втПлощадьЛС.ЛицевойСчет = втФИО.ЛицевойСчет
	|ИТОГИ
	|	МАКСИМУМ(NJ),
	|	МАКСИМУМ(LS),
	|	МАКСИМУМ(FAM),
	|	МАКСИМУМ(IMIA),
	|	МАКСИМУМ(OTCH),
	|	МАКСИМУМ(SOSTSEM),
	|	МАКСИМУМ(ZHILPLOS)
	|ПО
	|	ЛицевойСчет";
	
	ДеревоРезультата = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	// Выгружаем колонки табличной части в отдельную таблицу значений для поиска и установления соответствий.
	тзКолонкиТаблицыНачислений = РеспубликаБурятия_ТаблицаВыгрузки.ВыгрузитьКолонки();
	
	Для Каждого ВеткаЛицевогоСчета Из ДеревоРезультата.Строки Цикл
		
		НоваяСтрока = РеспубликаБурятия_ТаблицаВыгрузки.Добавить();
		
		ВеткаЛицевогоСчета.LS = ?(ВыводЛицевыхСчетов = "ЦифрыНаименования", ПолучитьЦифровыеСимволыИзСтроки(ВеткаЛицевогоСчета.LS), ВеткаЛицевогоСчета.LS);
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ВеткаЛицевогоСчета, "ЛицевойСчет,NJ,LS,FAM,IMIA,OTCH,SOSTSEM,ZHILPLOS");
		
		НоваяСтрока.DATNACH = Формат(Период, "ДФ=yyyyMM");
		
		Для Каждого ВеткаКодаУслугиВОСЗН Из ВеткаЛицевогоСчета.Строки Цикл
			
			Если тзКолонкиТаблицыНачислений.Колонки.Найти("TAR" + ВеткаКодаУслугиВОСЗН.КодУслугиВОСЗН) <> Неопределено Тогда
				НоваяСтрока["TAR" + ВеткаКодаУслугиВОСЗН.КодУслугиВОСЗН] = ?(ВеткаКодаУслугиВОСЗН.TAR = 0 И ВеткаКодаУслугиВОСЗН.SUM > 0, 1, ВеткаКодаУслугиВОСЗН.TAR);
			КонецЕсли;
			
			Если тзКолонкиТаблицыНачислений.Колонки.Найти("POTR" + ВеткаКодаУслугиВОСЗН.КодУслугиВОСЗН) <> Неопределено Тогда
				НоваяСтрока["POTR" + ВеткаКодаУслугиВОСЗН.КодУслугиВОСЗН] = Окр(ВеткаКодаУслугиВОСЗН.SUM / ?(ВеткаКодаУслугиВОСЗН.TAR = 0, 1, ВеткаКодаУслугиВОСЗН.TAR), 5);
			КонецЕсли;
			
			Если тзКолонкиТаблицыНачислений.Колонки.Найти("SUM" + ВеткаКодаУслугиВОСЗН.КодУслугиВОСЗН) <> Неопределено Тогда
				НоваяСтрока["SUM" + ВеткаКодаУслугиВОСЗН.КодУслугиВОСЗН] = ВеткаКодаУслугиВОСЗН.SUM;
			КонецЕсли;
			
			Если тзКолонкиТаблицыНачислений.Колонки.Найти("OPL" + ВеткаКодаУслугиВОСЗН.КодУслугиВОСЗН) <> Неопределено Тогда
				НоваяСтрока["OPL" + ВеткаКодаУслугиВОСЗН.КодУслугиВОСЗН] = ВеткаКодаУслугиВОСЗН.OPL;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // РеспубликаБурятия_ЗаполнитьТаблицуВыгрузки()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ВЫГРУЗКИ ДЛЯ РЕСПУБЛИКИ ТАТАРСТАН

#Область РеспубликаТатарстан

// Загружает список услуг в ОСЗН по умолчанию из справочника.
//
Процедура РеспубликаТатарстан_ОбновитьСписокБлагоустройств() Экспорт
	
	РеспубликаТатарстан_СоответствиеВидовБлагоустройствПомещений.Очистить();
	
	Макет = ПолучитьМакет("РеспубликаТатарстан_Макет");
	
	ОбластьСправочникТипыБлагоустройствПомещения = Макет.ПолучитьОбласть("СправочникТипыБлагоустройствПомещения");
	
	Для НомерСтроки = 1 По ОбластьСправочникТипыБлагоустройствПомещения.ВысотаТаблицы Цикл
		
		НоваяСтрока                         = РеспубликаТатарстан_СоответствиеВидовБлагоустройствПомещений.Добавить();
		НоваяСтрока.Суффикс                 = Число(ОбластьСправочникТипыБлагоустройствПомещения.Область(НомерСтроки, 1).Текст);
		НоваяСтрока.ВидБлагоустройстваВОСЗН = ОбластьСправочникТипыБлагоустройствПомещения.Область(НомерСтроки, 2).Текст;
		НоваяСтрока.ВидБлагоустройстваВБазе = ?(НоваяСтрока.Суффикс = 30, Справочники.КВП_ВидыБлагоустройстваОбъектов.Плита, 0);
		
	КонецЦикла;
	
КонецПроцедуры // ОбновитьСписокУслугНаСервере()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ВЫГРУЗКИ ДЛЯ КРАСНОЯРСКОГО КРАЯ

#Область КрасноярскийКрай

// Предназначена для заполнения таблицы "Квартиросъемщики".
//
Процедура СформироватьТаблицуКвартиросъемщиков(ТаблицаСоответствияУслуг, ТаблицаТиповУлиц, Вариант) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	Запрос.УстановитьПараметр("ДатаНач",     НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ДатаКон",     КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("СписокУслуг", ТаблицаСоответствияУслуг.ВыгрузитьКолонку("Услуга"));
	
	Запрос.УстановитьПараметр("УказыватьКоличествоПрожИЗарегЧислами", Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Получить());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ втСведенияДляВзаиморасчетов
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(
	|			&ДатаКон,
	|			Организация = &Организация
	|				И &ДопУсловие) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект КАК Помещение,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Владелец КАК Здание,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ втЛС
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&ДатаНач,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втСведенияДляВзаиморасчетов.ЛицевойСчет
	|				ИЗ
	|					втСведенияДляВзаиморасчетов КАК втСведенияДляВзаиморасчетов)) КАК КВП_ЛицевыеСчетаСрезПоследних
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КВП_ЛицевыеСчета.Объект,
	|	КВП_ЛицевыеСчета.Объект.Владелец,
	|	КВП_ЛицевыеСчета.ЛицевойСчет
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	КВП_ЛицевыеСчета.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И КВП_ЛицевыеСчета.ЛицевойСчет В
	|			(ВЫБРАТЬ
	|				втСведенияДляВзаиморасчетов.ЛицевойСчет
	|			ИЗ
	|				втСведенияДляВзаиморасчетов КАК втСведенияДляВзаиморасчетов)
	|	И КВП_ЛицевыеСчета.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец) КАК КоличествоПроживающих
	|ПОМЕСТИТЬ втКоличествоИзРегистра
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втЛС.ЛицевойСчет
	|					ИЗ
	|						втЛС КАК втЛС)
	|				И ДатаИзменения <= &ДатаКон) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.КоличествоПроживающих КАК КоличествоПроживающих
	|ПОМЕСТИТЬ втУчетКоличестваЖильцов
	|ИЗ
	|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втЛС.ЛицевойСчет
	|				ИЗ
	|					втЛС КАК втЛС)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛС.Помещение КАК Помещение,
	|	втЛС.Здание КАК Здание,
	|	втЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	ВЫБОР
	|		КОГДА &УказыватьКоличествоПрожИЗарегЧислами = ИСТИНА
	|			ТОГДА ЕСТЬNULL(втУчетКоличестваЖильцов.КоличествоПроживающих, 0)
	|		ИНАЧЕ ЕСТЬNULL(втКоличествоИзРегистра.КоличествоПроживающих, 0)
	|	КОНЕЦ КАК КоличествоПроживающих
	|ПОМЕСТИТЬ втКоличестваПроживающих
	|ИЗ
	|	втЛС КАК втЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКоличествоИзРегистра КАК втКоличествоИзРегистра
	|		ПО втЛС.ЛицевойСчет = втКоличествоИзРегистра.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУчетКоличестваЖильцов КАК втУчетКоличестваЖильцов
	|		ПО втЛС.ЛицевойСчет = втУчетКоличестваЖильцов.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втКоличестваПроживающих.Помещение КАК Помещение,
	|	втКоличестваПроживающих.Здание КАК Здание,
	|	втКоличестваПроживающих.ЛицевойСчет КАК ЛицевойСчет,
	|	втКоличестваПроживающих.КоличествоПроживающих КАК КоличествоПроживающих,
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель, 0) = 0
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель, 0) = 0
	|						ТОГДА КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель / КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДоляЛС
	|ПОМЕСТИТЬ втДоли
	|ИЗ
	|	втКоличестваПроживающих КАК втКоличестваПроживающих
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(
	|				&ДатаКон,
	|				ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втЛС.ЛицевойСчет
	|					ИЗ
	|						втЛС КАК втЛС)) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
	|		ПО втКоличестваПроживающих.ЛицевойСчет = КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втДоли.Помещение КАК Помещение,
	|	втДоли.Здание КАК Здание,
	|	втДоли.ЛицевойСчет КАК ЛицевойСчет,
	|	втДоли.КоличествоПроживающих КАК КоличествоПроживающих,
	|	втДоли.ДоляЛС * ЕСТЬNULL(КВП_ПлощадьПомещенияСрезПоследних.Площадь, 0) КАК ОбщаяПлощадь
	|ПОМЕСТИТЬ втПлощадейБезРасчета
	|ИЗ
	|	втДоли КАК втДоли
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|				&ДатаКон,
	|				Объект В
	|						(ВЫБРАТЬ
	|							втЛС.Помещение
	|						ИЗ
	|							втЛС КАК втЛС)
	|					И ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.общаяПлощадь)) КАК КВП_ПлощадьПомещенияСрезПоследних
	|		ПО втДоли.Помещение = КВП_ПлощадьПомещенияСрезПоследних.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втПлощадейБезРасчета.Помещение КАК Помещение,
	|	втПлощадейБезРасчета.Здание КАК Здание,
	|	втПлощадейБезРасчета.ЛицевойСчет КАК ЛицевойСчет,
	|	втПлощадейБезРасчета.КоличествоПроживающих КАК КоличествоПроживающих,
	|	втПлощадейБезРасчета.ОбщаяПлощадь КАК ОбщаяПлощадь,
	|	ВЫБОР
	|		КОГДА втПлощадейБезРасчета.Здание.ПлощадьЗданияЖилыхНежилыхПомещений = 0
	|			ТОГДА 0
	|		ИНАЧЕ втПлощадейБезРасчета.Здание.ПлощадьЗданияМестОбщегоПользования * втПлощадейБезРасчета.ОбщаяПлощадь / втПлощадейБезРасчета.Здание.ПлощадьЗданияЖилыхНежилыхПомещений
	|	КОНЕЦ КАК ОбщаяПлощадьСОИ
	|ПОМЕСТИТЬ втПлощадей
	|ИЗ
	|	втПлощадейБезРасчета КАК втПлощадейБезРасчета";
	
	Если ЗначениеЗаполнено(ЛицевыеСчета) Тогда
		ТекстЗамены = "ЛицевойСчет В ИЕРАРХИИ (&ГруппаЛС)";
		Запрос.УстановитьПараметр("ГруппаЛС", ЛицевыеСчета);
	Иначе
		ТекстЗамены = "ИСТИНА";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопУсловие", ТекстЗамены);
	
	Запрос.Выполнить();
	
	ЗапросПоЗданиям = Новый Запрос;
	ЗапросПоЗданиям.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросПоЗданиям.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втПлощадей.Помещение.Владелец КАК Объект
	|ИЗ
	|	втПлощадей КАК втПлощадей
	|
	|СГРУППИРОВАТЬ ПО
	|	втПлощадей.Помещение.Владелец";
	
	МассивОбъектов = ЗапросПоЗданиям.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втПлощадей.Помещение,
	|	втПлощадей.ЛицевойСчет,
	|	втПлощадей.КоличествоПроживающих,
	|	втПлощадей.ОбщаяПлощадь,
	|	втПлощадей.ОбщаяПлощадьСОИ,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Город, """") КАК Город,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НЕ втКонтактнаяИнформация.Город = """"
	|				ТОГДА втКонтактнаяИнформация.Город
	|			КОГДА НЕ втКонтактнаяИнформация.НаселенныйПункт = """"
	|				ТОГДА втКонтактнаяИнформация.НаселенныйПункт
	|			ИНАЧЕ втКонтактнаяИнформация.Регион
	|		КОНЕЦ, """") КАК НаселенныйПункт,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Улица, """") КАК Улица,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Дом, """") КАК Дом,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Корпус, """") КАК Корпус,
	|	втПлощадей.Помещение.Код КАК Квартира,
	|	втПлощадей.Помещение.Суффикс КАК БукваКвартиры
	|ПОМЕСТИТЬ втАдреса
	|ИЗ
	|	втПлощадей КАК втПлощадей
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК втКонтактнаяИнформация
	|		ПО втПлощадей.Помещение.Владелец = втКонтактнаяИнформация.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втАдреса.Помещение,
	|	втАдреса.ЛицевойСчет,
	|	втАдреса.КоличествоПроживающих,
	|	втАдреса.ОбщаяПлощадь,
	|	втАдреса.ОбщаяПлощадьСОИ,
	|	втАдреса.Город,
	|	втАдреса.НаселенныйПункт,
	|	втАдреса.Улица,
	|	втАдреса.Дом,
	|	втАдреса.Корпус,
	|	втАдреса.Квартира,
	|	втАдреса.БукваКвартиры,
	|	ЕСТЬNULL(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток, 0) КАК СуммаДолга
	|ПОМЕСТИТЬ втСальдо
	|ИЗ
	|	втАдреса КАК втАдреса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|				&ДатаНач,
	|				ЛицевойСчет В
	|						(ВЫБРАТЬ
	|							втЛС.ЛицевойСчет
	|						ИЗ
	|							втЛС КАК втЛС)
	|					И Услуга В (&СписокУслуг)
	|					И Организация = &Организация) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|		ПО втАдреса.ЛицевойСчет = КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втСальдо.Помещение,
	|	втСальдо.Помещение.Владелец.КодДомаПоФИАС КАК КодДомаПоФИАС,
	|	втСальдо.ЛицевойСчет,
	|	втСальдо.ЛицевойСчет.Наименование КАК ID,
	|	втСальдо.КоличествоПроживающих КАК SEM,
	|	втСальдо.ОбщаяПлощадь КАК PL,
	|	втСальдо.ОбщаяПлощадьСОИ КАК PLSOI,
	|	втСальдо.Город,
	|	втСальдо.НаселенныйПункт КАК PUNKT,
	|	втСальдо.Улица КАК UL,
	|	втСальдо.Дом КАК DOM,
	|	втСальдо.Корпус КАК KOR,
	|	втСальдо.Квартира КАК KV,
	|	втСальдо.БукваКвартиры КАК BKV,
	|	втСальдо.СуммаДолга КАК SDOLG,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец КАК ОтветственныйСобственник
	|ИЗ
	|	втСальдо КАК втСальдо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(
	|				&ДатаКон,
	|				ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втЛС.ЛицевойСчет
	|					ИЗ
	|						втЛС КАК втЛС)) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
	|		ПО втСальдо.ЛицевойСчет = УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ID";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Если РезультатЗапроса.Количество() > 0 Тогда
		
		РезультатЗапроса = ЗаполнитьТипыУлиц(РезультатЗапроса, ТаблицаТиповУлиц);
		Для Каждого ТекЛС Из РезультатЗапроса Цикл
			
			Если Вариант = 1 Тогда
				
				НоваяСтрока = КрасноярскийКрай_Квартиросъемщики.Добавить();
				
				НоваяСтрока.ID = ПодготовитьНомерЛСДляВывода(ТекЛС.ID);
				
			ИначеЕсли Вариант = 2 Тогда
				
				НоваяСтрока    = КрасноярскийКрай_КвартиросъемщикиДоработка.Добавить();
				НоваяСтрока.ID = ?(ВыводЛицевыхСчетов = "ЦифрыНаименования", ПолучитьЦифровыеСимволыИзСтроки(ТекЛС.ID, , Истина), ТекЛС.ID);
				
			КонецЕсли;
			
			НоваяСтрока.PUNKT = ВРег(НормализацияПолейАдреса(СокрЛП(ТекЛС.PUNKT)));
			НоваяСтрока.UL    = ТекЛС.UL;
			НоваяСтрока.TIP   = ТекЛС.TIP;
			НоваяСтрока.PL    = ТекЛС.PL;
			
			СтрокаДома = СокрЛП(ТекЛС.DOM);
			Попытка
				НомерДома = Число(СтрокаДома);
				БукваДома = "";
			Исключение
				НомерДома = "";
				БукваДома = "";
				Пока СтрДлина(СтрокаДома) > 0 Цикл
					ТекСимвол = Лев(СтрокаДома, 1);
					Если КодСимвола(ТекСимвол) > 47 И КодСимвола(ТекСимвол) < 58 Тогда
						НомерДома = НомерДома + ТекСимвол;
						СтрокаДома = Прав(СтрокаДома, СтрДлина(СтрокаДома) - 1);
					Иначе
						БукваДома = Прав(СтрокаДома, СтрДлина(СтрокаДома));
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецПопытки;
			НоваяСтрока.DOM   = НомерДома;
			НоваяСтрока.BDOM  = ВРег(БукваДома);
			
			НоваяСтрока.KOR  = ВРег(ТекЛС.KOR);
			НоваяСтрока.KV   = ТекЛС.KV;
			
			Если Вариант = 2 Тогда
				НоваяСтрока.BKV  = ВРег(ТекЛС.BKV);
			КонецЕсли;
			
			// Для варианта 2 заполняется только на основании таблицы сведений о членах семьи.
			Если Вариант = 1 Тогда
				НоваяСтрока.KVSM = НоваяСтрока.НомерСтроки;
			КонецЕсли;
			
			НоваяСтрока.ОтветственныйСобственник = ТекЛС.ОтветственныйСобственник;
			НоваяСтрока.ЛицевойСчет              = ТекЛС.ЛицевойСчет;
			
			НоваяСтрока.SEM  = ТекЛС.SEM;
			НоваяСтрока.OTCH = Формат(Период, "ДФ=MM.yyyy");
			
			Если Вариант = 2 Тогда
				НоваяСтрока.PLODN   = ТекЛС.PLSOI;
				НоваяСтрока.PLODN_V = ТекЛС.PLSOI;
				НоваяСтрока.FIAS_ID = ТекЛС.КодДомаПоФИАС;
			КонецЕсли;
			
			Если ТекЛС.SDOLG > 0 Тогда
				
				НоваяСтрока.DOLG  = Истина;
				
				Если Вариант = 2 Тогда
					
					НоваяСтрока.SDOLG = ТекЛС.SDOLG;
					СтруктураЗадолженности = ПолучитьСтруктуруЗадолженностиЛС(ТекЛС.ЛицевойСчет);
					
					Если ЗначениеЗаполнено(СтруктураЗадолженности) Тогда
						
						НоваяСтрока.PER_B = Формат(СтруктураЗадолженности.ДатаВозникновенияЗадолженности, "ДФ=dd.MM.yyyy");
						НоваяСтрока.PER_E = Формат(СтруктураЗадолженности.ДатаОкончанияВозникновения,     "ДФ=dd.MM.yyyy");
						
						Если ЗначениеЗаполнено(СтруктураЗадолженности.НаличиеСоглашения) Тогда
							НоваяСтрока.SOG = Истина;
							СтруктураОплатЗадолженности = СтруктураЗадолженности.СтруктураОплатЗадолженности;
							Если ЗначениеЗаполнено(СтруктураОплатЗадолженности) Тогда
								Если СтруктураОплатЗадолженности.СуммаФактическая > 0 Тогда
									НоваяСтрока.IUSOG = Истина;
								Иначе
									НоваяСтрока.IUSOG = Ложь;
								КонецЕсли;
							КонецЕсли;
						Иначе
							НоваяСтрока.SOG = Ложь;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьТаблицуКвартиросъемщиков()

// Предназначена для заполнения таблицы "Суммы оплат по услугам".
//
Процедура СформироватьТаблицуСуммОплатПоУслугам(ТаблицаСоответствияУслуг, Вариант) Экспорт
	
	Запрос = Новый Запрос;
	
	Если Вариант = 1 Тогда
		
		ТаблицаКвартиросъемщики = КрасноярскийКрай_Квартиросъемщики.Выгрузить(,"ID, ЛицевойСчет, KVSM");
		ТекстЗамены = "";
		
	ИначеЕсли Вариант = 2 Тогда
		
		ТаблицаКвартиросъемщики = КрасноярскийКрай_КвартиросъемщикиДоработка.Выгрузить(,"ID, ЛицевойСчет, KVSM");
		
		ТекстЗамены = "И УПЖКХ_НачисленияОбороты.Услуга В (&УслугиЭлектроэнергии)";
		Запрос.УстановитьПараметр("УслугиЭлектроэнергии", КрасноярскийКрай_УслугиЭлектроэнергии.ВыгрузитьКолонку("Услуга"));
		
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаКвартиросъемщиков.ID,
	|	ТаблицаКвартиросъемщиков.ЛицевойСчет,
	|	ТаблицаКвартиросъемщиков.KVSM
	|ПОМЕСТИТЬ втКвартиросъемщики
	|ИЗ
	|	&ТаблицаКвартиросъемщиков КАК ТаблицаКвартиросъемщиков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствиеУслуг.Код,
	|	СоответствиеУслуг.КодПерерасчета,
	|	СоответствиеУслуг.КодСОИ,
	|	СоответствиеУслуг.КодПерерасчетаСОИ,
	|	СоответствиеУслуг.Услуга
	|ПОМЕСТИТЬ втСоответствиеУслуг
	|ИЗ
	|	&СоответствиеУслуг КАК СоответствиеУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.МесяцНачисления,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.КоммунальныйРесурс В (&СписокКоммунальныхРесурсов)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОДНОтноситсяКОбщемуИмуществу,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ))
	|				И УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоПерерасчет,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ))
	|				И УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|				И (УПЖКХ_НачисленияОбороты.ТипНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипНачисления.Индивидуальное)
	|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоПерерасчетИНД,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ))
	|				И УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|				И УПЖКХ_НачисленияОбороты.ТипНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипНачисления.Общедомовое)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоПерерасчетОДН,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ))
	|				И УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоНачисление,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ))
	|				И УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоНачислениеИНД,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ))
	|				И УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоНачислениеОДН,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|				" + ТекстЗамены + "
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоОплата,
	|	СУММА(УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот) КАК СуммаНачисления
	|ПОМЕСТИТЬ втНачисленийБезКвартиросъемщиков
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|				&ДатаНач,
	|				&ДатаКон,
	|				,
	|				Организация = &Организация
	|					И Услуга В (&СписокУслуг)
	|					И ЛицевойСчет В
	|						(ВЫБРАТЬ
	|							втКвартиросъемщики.ЛицевойСчет
	|						ИЗ
	|							втКвартиросъемщики КАК втКвартиросъемщики)
	|					И НЕ РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени))) КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ЛицевойСчет,
	|	Услуга,
	|	МесяцНачисления,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.КоммунальныйРесурс В (&СписокКоммунальныхРесурсов)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ))
	|				И УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ))
	|				И УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|				И (УПЖКХ_НачисленияОбороты.ТипНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипНачисления.Индивидуальное)
	|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ))
	|				И УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|				И УПЖКХ_НачисленияОбороты.ТипНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипНачисления.Общедомовое)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ))
	|				И УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ))
	|				И УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ))
	|				И УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|				" + ТекстЗамены + "
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втКвартиросъемщики.ID,
	|	втКвартиросъемщики.ЛицевойСчет,
	|	втКвартиросъемщики.KVSM,
	|	втНачисленийБезКвартиросъемщиков.Услуга,
	|	втНачисленийБезКвартиросъемщиков.МесяцНачисления,
	|	втНачисленийБезКвартиросъемщиков.ОДНОтноситсяКОбщемуИмуществу,
	|	втНачисленийБезКвартиросъемщиков.ЭтоПерерасчет,
	|	втНачисленийБезКвартиросъемщиков.ЭтоПерерасчетИНД,
	|	втНачисленийБезКвартиросъемщиков.ЭтоПерерасчетОДН,
	|	втНачисленийБезКвартиросъемщиков.ЭтоНачисление,
	|	втНачисленийБезКвартиросъемщиков.ЭтоНачислениеИНД,
	|	втНачисленийБезКвартиросъемщиков.ЭтоНачислениеОДН,
	|	втНачисленийБезКвартиросъемщиков.ЭтоОплата,
	|	втНачисленийБезКвартиросъемщиков.СуммаНачисления
	|ПОМЕСТИТЬ втНачислений
	|ИЗ
	|	втКвартиросъемщики КАК втКвартиросъемщики
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНачисленийБезКвартиросъемщиков КАК втНачисленийБезКвартиросъемщиков
	|		ПО втКвартиросъемщики.ЛицевойСчет = втНачисленийБезКвартиросъемщиков.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачислений.ID,
	|	втНачислений.ЛицевойСчет КАК ЛицевойСчет,
	|	втНачислений.KVSM,
	|	втНачислений.Услуга,
	|	втНачислений.МесяцНачисления,
	|	втНачислений.ЭтоПерерасчет,
	|	втНачислений.ЭтоНачисление,
	|	втНачислений.ЭтоОплата,
	|	ВЫБОР
	|		КОГДА &Вариант = 2
	|			ТОГДА ВЫБОР
	|					КОГДА втНачислений.ЭтоПерерасчет
	|						ТОГДА ВЫБОР
	|								КОГДА втНачислений.ОДНОтноситсяКОбщемуИмуществу = ИСТИНА И втНачислений.ЭтоПерерасчетОДН
	|									ТОГДА втСоответствиеУслуг.КодПерерасчетаСОИ
	|								ИНАЧЕ втСоответствиеУслуг.КодПерерасчета
	|							КОНЕЦ
	|					ИНАЧЕ ВЫБОР
	|							КОГДА втНачислений.ОДНОтноситсяКОбщемуИмуществу = ИСТИНА И втНачислений.ЭтоНачислениеОДН
	|								ТОГДА втСоответствиеУслуг.КодСОИ
	|							ИНАЧЕ втСоответствиеУслуг.Код
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ втСоответствиеУслуг.Код
	|	КОНЕЦ КАК USL,
	|		втНачислений.СуммаНачисления КАК СуммаНачисления
	|ПОМЕСТИТЬ втУслугСКодами
	|ИЗ
	|	втНачислений КАК втНачислений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСоответствиеУслуг КАК втСоответствиеУслуг
	|		ПО втНачислений.Услуга = втСоответствиеУслуг.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект.Адрес КАК Помещение,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги КАК Услуга,
	|	ИСТИНА КАК НаличиеСчетчика
	|ПОМЕСТИТЬ втДействующиеСчетчики
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&ДатаКон,
	|			Объект В
	|					(ВЫБРАТЬ
	|						втКвартиросъемщики.ЛицевойСчет
	|					ИЗ
	|						втКвартиросъемщики КАК втКвартиросъемщики)
	|				И Счетчик.ВидУслуги В (&СписокУслуг)
	|				И ДатаИзменения <= &ДатаКон) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги,
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&ДатаКон,
	|			Объект В
	|					(ВЫБРАТЬ
	|						втКвартиросъемщики.ЛицевойСчет.Адрес
	|					ИЗ
	|						втКвартиросъемщики КАК втКвартиросъемщики)
	|				И Счетчик.ВидУслуги В (&СписокУслуг)
	|				И ДатаИзменения <= &ДатаКон) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДействующиеСчетчики.Помещение,
	|	втДействующиеСчетчики.Услуга,
	|	МАКСИМУМ(втДействующиеСчетчики.НаличиеСчетчика) КАК НаличиеСчетчика
	|ПОМЕСТИТЬ втСчетчиков
	|ИЗ
	|	втДействующиеСчетчики КАК втДействующиеСчетчики
	|
	|СГРУППИРОВАТЬ ПО
	|	втДействующиеСчетчики.Помещение,
	|	втДействующиеСчетчики.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втУслугСКодами.ID,
	|	втУслугСКодами.ЛицевойСчет КАК ЛицевойСчет,
	|	втУслугСКодами.KVSM,
	|	втУслугСКодами.МесяцНачисления КАК МесяцНачисления,
	|	втУслугСКодами.ЭтоПерерасчет,
	|	втУслугСКодами.ЭтоНачисление,
	|	втУслугСКодами.ЭтоОплата,
	|	втУслугСКодами.USL КАК USL,
	|	втУслугСКодами.СуммаНачисления,
	|	ЕСТЬNULL(втСчетчиков.НаличиеСчетчика, ЛОЖЬ) КАК CHET
	|ИЗ
	|	втУслугСКодами КАК втУслугСКодами
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСчетчиков КАК втСчетчиков
	|		ПО втУслугСКодами.ЛицевойСчет.Адрес = втСчетчиков.Помещение
	|			И втУслугСКодами.Услуга = втСчетчиков.Услуга
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЛицевойСчет,
	|	USL,
	|	МесяцНачисления
	|ИТОГИ ПО
	|	ЛицевойСчет,
	|	USL";
	
	Запрос.УстановитьПараметр("ДатаНач",                    НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ДатаКон",                    КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",                Организация);
	Запрос.УстановитьПараметр("СписокУслуг",                ТаблицаСоответствияУслуг.ВыгрузитьКолонку("Услуга"));
	Запрос.УстановитьПараметр("ТаблицаКвартиросъемщиков",   ТаблицаКвартиросъемщики);
	Запрос.УстановитьПараметр("СоответствиеУслуг",          ТаблицаСоответствияУслуг);
	Запрос.УстановитьПараметр("Вариант",                    Вариант);
	Запрос.УстановитьПараметр("СписокКоммунальныхРесурсов", Перечисления.УПЖКХ_ВидыРесурсов.ПолучитьСписокКоммунальныхРесурсов());
	
	ДеревоРезультата = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Если ДеревоРезультата.Строки.Количество() > 0 Тогда
		
		ОтборНачислений    = Новый Структура;
		ОтборПерерасчетов  = Новый Структура;
		ОтборОплат         = Новый Структура;
		МесяцыПерерасчетов = Новый ТаблицаЗначений;
		МесяцыПерерасчетов.Колонки.Добавить("МесяцНачисления", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
		
		МесяцыНачисления = МесяцыПерерасчетов.Скопировать();
		
		Для Каждого ТекЛС Из ДеревоРезультата.Строки Цикл
			
			Для Каждого ТекКодУслуги Из ТекЛС.Строки Цикл
				
				Если ТекКодУслуги.Строки.Количество() > 0 Тогда
					
					СуммаОплаты      = 0;
					СуммаПерерасчета = 0;
					СуммаНачисления  = 0;
					НаличиеСчетчика  = Ложь;
					
					// Определяем сумму для вывода в поле "S1".
					ОтборНачислений.Вставить("ЭтоНачисление", Истина);
					СтрокиНачислений = ТекКодУслуги.Строки.НайтиСтроки(ОтборНачислений);
					Если СтрокиНачислений.Количество() > 0 Тогда
						НаличиеСчетчика = СтрокиНачислений[0].CHET;
						Для Каждого ТекСтрока Из СтрокиНачислений Цикл
							СуммаНачисления = СуммаНачисления + ТекСтрока.СуммаНачисления;
							
							МесяцыНачисления = ДобавитьМесяцПерерасчета(МесяцыНачисления, ТекСтрока.МесяцНачисления);
						КонецЦикла;
					КонецЕсли;
					
					// Определяем сумму для вывода данных о перерасчетах (поля "OTCH", "ITOG").
					ОтборПерерасчетов.Вставить("ЭтоПерерасчет", Истина);
					СтрокиПерерасчетов = ТекКодУслуги.Строки.НайтиСтроки(ОтборПерерасчетов);
					Если СтрокиПерерасчетов.Количество() > 0 Тогда
						НаличиеСчетчика = СтрокиПерерасчетов[0].CHET;
						Для Каждого ТекСтрока Из СтрокиПерерасчетов Цикл
							СуммаПерерасчета = СуммаПерерасчета + ТекСтрока.СуммаНачисления;
							
							МесяцыПерерасчетов = ДобавитьМесяцПерерасчета(МесяцыПерерасчетов, ТекСтрока.МесяцНачисления);
							МесяцыНачисления   = ДобавитьМесяцПерерасчета(МесяцыНачисления, ТекСтрока.МесяцНачисления);
						КонецЦикла;
						
						МесяцыПерерасчетов.Сортировать("МесяцНачисления Возр");
						
					КонецЕсли;
					
					// Определяем сумму для вывода в поле "S4".
					ОтборОплат.Вставить("ЭтоОплата", Истина);
					СтрокиОплат = ТекКодУслуги.Строки.НайтиСтроки(ОтборОплат);
					Если СтрокиОплат.Количество() > 0 Тогда
						НаличиеСчетчика = СтрокиОплат[0].CHET;
						Для Каждого ТекСтрока Из СтрокиОплат Цикл
							СуммаОплаты = СуммаОплаты + ТекСтрока.СуммаНачисления;
						КонецЦикла;
					КонецЕсли;
					
					Если НЕ СуммаНачисления = 0 ИЛИ НЕ СуммаПерерасчета = 0 ИЛИ НЕ СуммаОплаты = 0 Тогда
						
						Если Вариант = 1 Тогда
							
							НоваяСтрока = КрасноярскийКрай_СуммыОплатыУслуг.Добавить();
							
							НоваяСтрока.ID  = ПодготовитьНомерЛСДляВывода(ТекКодУслуги.Строки[0].ID);
							
							НоваяСтрока.NN = ТекКодУслуги.Строки[0].KVSM;
							
						ИначеЕсли Вариант = 2 Тогда
							
							НоваяСтрока = КрасноярскийКрай_СуммыОплатыУслугДоработка.Добавить();
							
							НоваяСтрока.ЛицевойСчет = ТекКодУслуги.Строки[0].ЛицевойСчет;
							НоваяСтрока.ID          = ?(ВыводЛицевыхСчетов = "ЦифрыНаименования", ПолучитьЦифровыеСимволыИзСтроки(ТекКодУслуги.Строки[0].ID, , Истина), ТекКодУслуги.Строки[0].ID);
							
							НоваяСтрока.NN = НоваяСтрока.НомерСтроки;
							
						КонецЕсли;
						
						НоваяСтрока.USL = ТекКодУслуги.Строки[0].USL;
						НоваяСтрока.S1  = СуммаНачисления + СуммаПерерасчета;
						
						Если НЕ СуммаПерерасчета = 0 Тогда
							НоваяСтрока.ITOG = Истина;
						КонецЕсли;
						НоваяСтрока.PER  = МесяцыНачисления.Количество();
						
						
						НоваяСтрока.CHET = ОпределитьНаличиеСчетчика(ТекКодУслуги.Строки);
						
						Если МесяцыПерерасчетов.Количество() > 0 Тогда
							НоваяСтрока.OTCH = Формат(МесяцыПерерасчетов[МесяцыПерерасчетов.Количество() - 1].МесяцНачисления, "ДФ=MM.yyyy");
						Иначе
							Если Вариант = 2 Тогда
								Если МесяцыНачисления.Количество() > 0 Тогда
									НоваяСтрока.OTCH = Формат(МесяцыНачисления[МесяцыНачисления.Количество() - 1].МесяцНачисления, "ДФ=MM.yyyy");
								Иначе
									НоваяСтрока.OTCH = Формат(Период, "ДФ=MM.yyyy");
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
						Если Вариант = 1 Тогда
							НоваяСтрока.S5 = (-1) * СуммаОплаты;
						ИначеЕсли Вариант = 2 Тогда
							НоваяСтрока.S4 = (-1) * СуммаОплаты;
						КонецЕсли;
						
					КонецЕсли;
					
					МесяцыНачисления.Очистить();
					МесяцыПерерасчетов.Очистить();
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // СформироватьТаблицуСуммОплатПоУслугам

// Предназначена для заполнения таблицы "Суммы оплат по услугам".
//
Процедура СформироватьТаблицуСведенийОЧленахСемьи(Вариант) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_АдресВыбытияЖильца);
	
	Если Вариант = 1 Тогда
		
		КатегорияЖильцов = 4;
		
		ТаблицаКвартиросъемщики = КрасноярскийКрай_Квартиросъемщики.Выгрузить(,"ID, ЛицевойСчет, ОтветственныйСобственник, KVSM");
		ТекстЗамены = "";
		
		ТаблицаУЛ  = Новый ТаблицаЗначений;
		ТаблицаУЛ.Колонки.Добавить("Код", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(5));
		
		МассивТипов = Новый Массив();
		МассивТипов.Добавить(Тип("СправочникСсылка.ВидыДокументовФизическихЛиц"));
		МассивТипов.Добавить(Тип("СправочникСсылка.УдалитьДокументыУдостоверяющиеЛичность"));
		
		ТаблицаУЛ.Колонки.Добавить("ВидДокументаУдостоверяющегоЛичность", Новый ОписаниеТипов(МассивТипов));
		
	ИначеЕсли Вариант = 2 Тогда
		
		ТаблицаКвартиросъемщики = КрасноярскийКрай_КвартиросъемщикиДоработка.Выгрузить(,"ID, ЛицевойСчет, ОтветственныйСобственник, KVSM");
		
		ТекстЗамены = "И УПЖКХ_НачисленияОбороты.Услуга В (&УслугиЭлектроэнергии)";
		Запрос.УстановитьПараметр("УслугиЭлектроэнергии", КрасноярскийКрай_УслугиЭлектроэнергии.ВыгрузитьКолонку("Услуга"));
		
		ТаблицаУЛ = КрасноярскийКрай_УдостоверенияЛичности.Выгрузить();
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНач",                  НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ДатаКон",                  КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",              Организация);
	Запрос.УстановитьПараметр("ТаблицаКвартиросъемщиков", ТаблицаКвартиросъемщики);
	Запрос.УстановитьПараметр("ТаблицаУЛ",                ТаблицаУЛ);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаКвартиросъемщиков.ID КАК ID,
	|	ТаблицаКвартиросъемщиков.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаКвартиросъемщиков.ОтветственныйСобственник КАК ОтветственныйСобственник,
	|	ТаблицаКвартиросъемщиков.KVSM КАК KVSM,
	|	ВЫБОР
	|		КОГДА ТаблицаКвартиросъемщиков.ОтветственныйСобственник ССЫЛКА Справочник.УПЖКХ_Жильцы
	|			ТОГДА ТаблицаКвартиросъемщиков.ОтветственныйСобственник
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УПЖКХ_Жильцы.ПустаяСсылка)
	|	КОНЕЦ КАК Жилец
	|ПОМЕСТИТЬ втКвартиросъемщикиБезОтветственного
	|ИЗ
	|	&ТаблицаКвартиросъемщиков КАК ТаблицаКвартиросъемщиков
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКвартиросъемщикиБезОтветственного.ID КАК ID,
	|	втКвартиросъемщикиБезОтветственного.ЛицевойСчет КАК ЛицевойСчет,
	|	втКвартиросъемщикиБезОтветственного.ОтветственныйСобственник КАК ОтветственныйСобственник,
	|	втКвартиросъемщикиБезОтветственного.KVSM КАК KVSM,
	|	втКвартиросъемщикиБезОтветственного.Жилец КАК Жилец,
	|	втКвартиросъемщикиБезОтветственного.Жилец.ФизЛицо КАК ФизЛицо,
	|	втКвартиросъемщикиБезОтветственного.Жилец.ФизЛицо.ДатаРождения КАК ДатаРождения,
	|	втКвартиросъемщикиБезОтветственного.Жилец.ФизЛицо.Пол КАК Пол
	|ПОМЕСТИТЬ втКвартиросъемщики
	|ИЗ
	|	втКвартиросъемщикиБезОтветственного КАК втКвартиросъемщикиБезОтветственного
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";
	
	Если КатегорияЖильцов = 0 Тогда
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	втКвартиросъемщики.ID,
		|	втКвартиросъемщики.ЛицевойСчет,
		|	втКвартиросъемщики.ОтветственныйСобственник,
		|	втКвартиросъемщики.KVSM,
		|	УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец,
		|	УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец.ФизЛицо КАК ФизЛицо,
		|	УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец.ФизЛицо.ДатаРождения КАК ДатаРождения,
		|	УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец.ФизЛицо.Пол КАК Пол
		|ПОМЕСТИТЬ втЖильцов
		|ИЗ
		|	втКвартиросъемщики КАК втКвартиросъемщики
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
		|				&ДатаКон,
		|				ЛицевойСчет В
		|						(ВЫБРАТЬ
		|							втКвартиросъемщики.ЛицевойСчет
		|						ИЗ
		|							втКвартиросъемщики КАК втКвартиросъемщики)
		|					И ДатаИзменения <= &ДатаКон) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
		|		ПО втКвартиросъемщики.ЛицевойСчет = УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет
		|ГДЕ
		|	УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает";
		
	ИначеЕсли КатегорияЖильцов = 1 Тогда
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	втКвартиросъемщики.ID,
		|	втКвартиросъемщики.ЛицевойСчет,
		|	втКвартиросъемщики.ОтветственныйСобственник,
		|	втКвартиросъемщики.KVSM,
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец,
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец.ФизЛицо КАК ФизЛицо,
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец.ФизЛицо.ДатаРождения КАК ДатаРождения,
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец.ФизЛицо.Пол КАК Пол
		|ПОМЕСТИТЬ втЖильцов
		|ИЗ
		|	втКвартиросъемщики КАК втКвартиросъемщики
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
		|				&ДатаКон,
		|				ЛицевойСчет В
		|						(ВЫБРАТЬ
		|							втКвартиросъемщики.ЛицевойСчет
		|						ИЗ
		|							втКвартиросъемщики КАК втКвартиросъемщики)
		|					И ДатаИзменения <= &ДатаКон) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
		|		ПО втКвартиросъемщики.ЛицевойСчет = УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет
		|ГДЕ
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован";
		
	ИначеЕсли КатегорияЖильцов = 2 Тогда
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	втКвартиросъемщики.ID,
		|	втКвартиросъемщики.ЛицевойСчет,
		|	втКвартиросъемщики.ОтветственныйСобственник,
		|	втКвартиросъемщики.KVSM,
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец,
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован,
		|	ЛОЖЬ КАК Проживает
		|ПОМЕСТИТЬ втПодг
		|ИЗ
		|	втКвартиросъемщики КАК втКвартиросъемщики
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
		|				&ДатаКон,
		|				ЛицевойСчет В
		|						(ВЫБРАТЬ
		|							втКвартиросъемщики.ЛицевойСчет
		|						ИЗ
		|							втКвартиросъемщики КАК втКвартиросъемщики)
		|					И ДатаИзменения <= &ДатаКон) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
		|		ПО втКвартиросъемщики.ЛицевойСчет = УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет
		|ГДЕ
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	втКвартиросъемщики.ID,
		|	втКвартиросъемщики.ЛицевойСчет,
		|	втКвартиросъемщики.ОтветственныйСобственник,
		|	втКвартиросъемщики.KVSM,
		|	УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец,
		|	ЛОЖЬ,
		|	УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает
		|ИЗ
		|	втКвартиросъемщики КАК втКвартиросъемщики
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
		|				&ДатаКон,
		|				ЛицевойСчет В
		|						(ВЫБРАТЬ
		|							втКвартиросъемщики.ЛицевойСчет
		|						ИЗ
		|							втКвартиросъемщики КАК втКвартиросъемщики)
		|					И ДатаИзменения <= &ДатаКон) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
		|		ПО втКвартиросъемщики.ЛицевойСчет = УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет
		|ГДЕ
		|	УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПодг.Жилец,
		|	МАКСИМУМ(втПодг.Зарегистрирован) КАК Зарегистрирован,
		|	МАКСИМУМ(втПодг.Проживает) КАК Проживает,
		|	втПодг.ID,
		|	втПодг.ЛицевойСчет,
		|	втПодг.ОтветственныйСобственник,
		|	втПодг.KVSM
		|ПОМЕСТИТЬ втСведений
		|ИЗ
		|	втПодг КАК втПодг
		|
		|СГРУППИРОВАТЬ ПО
		|	втПодг.Жилец,
		|	втПодг.ID,
		|	втПодг.ЛицевойСчет,
		|	втПодг.ОтветственныйСобственник,
		|	втПодг.KVSM
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втСведений.ID,
		|	втСведений.ЛицевойСчет,
		|	втСведений.ОтветственныйСобственник,
		|	втСведений.KVSM,
		|	втСведений.Жилец,
		|	втСведений.Жилец.ФизЛицо КАК ФизЛицо,
		|	втСведений.Жилец.ФизЛицо.ДатаРождения КАК ДатаРождения,
		|	втСведений.Жилец.ФизЛицо.Пол КАК Пол
		|ПОМЕСТИТЬ втЖильцов
		|ИЗ
		|	втСведений КАК втСведений
		|ГДЕ
		|	втСведений.Проживает
		|	И втСведений.Зарегистрирован";
		
	ИначеЕсли КатегорияЖильцов = 3 Тогда
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	втКвартиросъемщики.ID,
		|	втКвартиросъемщики.ЛицевойСчет,
		|	втКвартиросъемщики.ОтветственныйСобственник,
		|	втКвартиросъемщики.KVSM,
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец,
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован,
		|	ЛОЖЬ КАК Проживает
		|ПОМЕСТИТЬ втПодг
		|ИЗ
		|	втКвартиросъемщики КАК втКвартиросъемщики
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
		|				&ДатаКон,
		|				ЛицевойСчет В
		|						(ВЫБРАТЬ
		|							втКвартиросъемщики.ЛицевойСчет
		|						ИЗ
		|							втКвартиросъемщики КАК втКвартиросъемщики)
		|					И ДатаИзменения <= &ДатаКон) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
		|		ПО втКвартиросъемщики.ЛицевойСчет = УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет
		|ГДЕ
		|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	втКвартиросъемщики.ID,
		|	втКвартиросъемщики.ЛицевойСчет,
		|	втКвартиросъемщики.ОтветственныйСобственник,
		|	втКвартиросъемщики.KVSM,
		|	УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец,
		|	ЛОЖЬ,
		|	УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает
		|ИЗ
		|	втКвартиросъемщики КАК втКвартиросъемщики
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
		|				&ДатаКон,
		|				ЛицевойСчет В
		|						(ВЫБРАТЬ
		|							втКвартиросъемщики.ЛицевойСчет
		|						ИЗ
		|							втКвартиросъемщики КАК втКвартиросъемщики)
		|					И ДатаИзменения <= &ДатаКон) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
		|		ПО втКвартиросъемщики.ЛицевойСчет = УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет
		|ГДЕ
		|	УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втПодг.Жилец,
		|	МАКСИМУМ(втПодг.Зарегистрирован) КАК Зарегистрирован,
		|	МАКСИМУМ(втПодг.Проживает) КАК Проживает,
		|	втПодг.ID,
		|	втПодг.ЛицевойСчет,
		|	втПодг.ОтветственныйСобственник,
		|	втПодг.KVSM
		|ПОМЕСТИТЬ втСведений
		|ИЗ
		|	втПодг КАК втПодг
		|
		|СГРУППИРОВАТЬ ПО
		|	втПодг.Жилец,
		|	втПодг.ID,
		|	втПодг.ЛицевойСчет,
		|	втПодг.ОтветственныйСобственник,
		|	втПодг.KVSM
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втСведений.ID,
		|	втСведений.ЛицевойСчет,
		|	втСведений.ОтветственныйСобственник,
		|	втСведений.KVSM,
		|	втСведений.Жилец,
		|	втСведений.Жилец.ФизЛицо КАК ФизЛицо,
		|	втСведений.Жилец.ФизЛицо.ДатаРождения КАК ДатаРождения,
		|	втСведений.Жилец.ФизЛицо.Пол КАК Пол
		|ПОМЕСТИТЬ втЖильцов
		|ИЗ
		|	втСведений КАК втСведений
		|ГДЕ
		|	(втСведений.Проживает
		|			ИЛИ втСведений.Зарегистрирован)";
		
	ИначеЕсли КатегорияЖильцов = 4 Тогда
		
		ТекстЗапроса = ТекстЗапроса + Символы.ПС +
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	втКвартиросъемщики.ID,
		|	втКвартиросъемщики.ЛицевойСчет,
		|	втКвартиросъемщики.ОтветственныйСобственник,
		|	втКвартиросъемщики.KVSM,
		|	УПЖКХ_Жильцы.Ссылка КАК Жилец,
		|	УПЖКХ_Жильцы.ФизЛицо КАК ФизЛицо,
		|	УПЖКХ_Жильцы.ФизЛицо.ДатаРождения КАК ДатаРождения,
		|	УПЖКХ_Жильцы.ФизЛицо.Пол КАК Пол
		|ПОМЕСТИТЬ втЖильцов
		|ИЗ
		|	втКвартиросъемщики КАК втКвартиросъемщики
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
		|		ПО втКвартиросъемщики.ЛицевойСчет = УПЖКХ_Жильцы.Владелец
		|ГДЕ
		|	НЕ УПЖКХ_Жильцы.ПометкаУдаления";
		
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + Символы.ПС +
	";
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУЛ.Код,
	|	ТаблицаУЛ.ВидДокументаУдостоверяющегоЛичность
	|ПОМЕСТИТЬ втДокументыУЛ
	|ИЗ
	|	&ТаблицаУЛ КАК ТаблицаУЛ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцов.ЛицевойСчет,
	|	втЖильцов.ID,
	|	втЖильцов.KVSM,
	|	втЖильцов.Жилец,
	|	втЖильцов.ФизЛицо,
	|	втЖильцов.ДатаРождения,
	|	втЖильцов.Пол,
	|	втЖильцов.ОтветственныйСобственник
	|ПОМЕСТИТЬ втЖильцовСОтветственными
	|ИЗ
	|	втЖильцов КАК втЖильцов
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втКвартиросъемщики.ЛицевойСчет,
	|	втКвартиросъемщики.ID,
	|	втКвартиросъемщики.KVSM,
	|	втКвартиросъемщики.Жилец,
	|	втКвартиросъемщики.ФизЛицо,
	|	втКвартиросъемщики.ДатаРождения,
	|	втКвартиросъемщики.Пол,
	|	втКвартиросъемщики.ОтветственныйСобственник
	|ИЗ
	|	втКвартиросъемщики КАК втКвартиросъемщики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втЖильцов.ЛицевойСчет,
	|	втЖильцов.ID,
	|	втЖильцов.KVSM,
	|	втЖильцов.Жилец,
	|	втЖильцов.ФизЛицо,
	|	втЖильцов.ДатаРождения,
	|	втЖильцов.Пол,
	|	ЕСТЬNULL(ДокументыФизическихЛицСрезПоследних.ВидДокумента, """") КАК ВидДокумента,
	|	ЕСТЬNULL(ДокументыФизическихЛицСрезПоследних.ВидДокумента.КодМВД, """") КАК КодМВД,
	|	ЕСТЬNULL(ДокументыФизическихЛицСрезПоследних.Серия, """") КАК СерияДокумента,
	|	ЕСТЬNULL(ДокументыФизическихЛицСрезПоследних.Номер, """") КАК НомерДокумента,
	|	ЕСТЬNULL(ДокументыФизическихЛицСрезПоследних.ДатаВыдачи, """") КАК ДатаВыдачи,
	|	ЕСТЬNULL(ДокументыФизическихЛицСрезПоследних.КемВыдан, """") КАК КемВыдан,
	|	втЖильцов.ОтветственныйСобственник,
	|	ВЫБОР
	|		КОГДА втЖильцов.ОтветственныйСобственник ССЫЛКА Справочник.УПЖКХ_Жильцы
	|				И втЖильцов.ОтветственныйСобственник = втЖильцов.Жилец
	|			ТОГДА ИСТИНА
	|		КОГДА втЖильцов.ОтветственныйСобственник ССЫЛКА Справочник.Контрагенты
	|				И втЖильцов.ОтветственныйСобственник.Наименование = втЖильцов.Жилец.Наименование
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПризнакОтветственного
	|ПОМЕСТИТЬ втПаспортныеДанные
	|ИЗ
	|	втЖильцовСОтветственными КАК втЖильцов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДокументыФизическихЛиц.СрезПоследних КАК ДокументыФизическихЛицСрезПоследних
	|		ПО втЖильцов.ФизЛицо = ДокументыФизическихЛицСрезПоследних.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ВременнаяРегистрация
	|ПОМЕСТИТЬ втСведОЗарег
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|				&ДатаКон,
	|				Жилец В
	|						(ВЫБРАТЬ
	|							втЖильцов.Жилец
	|						ИЗ
	|							втЖильцов КАК втЖильцов)
	|					И ДатаИзменения <= &ДатаКон) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец,
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает
	|ПОМЕСТИТЬ втСведОПрож
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
	|				&ДатаКон,
	|				Жилец В
	|						(ВЫБРАТЬ
	|							втЖильцов.Жилец
	|						ИЗ
	|							втЖильцов КАК втЖильцов)
	|					И ДатаИзменения <= &ДатаКон) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
	|ГДЕ УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОЗарегистрированныхВообщеСрезПоследних.Жилец,
	|	УПЖКХ_СведенияОЗарегистрированныхВообщеСрезПоследних.Зарегистрирован,
	|	УПЖКХ_СведенияОЗарегистрированныхВообщеСрезПоследних.ДатаИзменения
	|ПОМЕСТИТЬ втСведОЗарегВообще
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|				,
	|				Жилец В
	|					(ВЫБРАТЬ
	|						втСведОЗарег.Жилец
	|					ИЗ
	|						втСведОЗарег КАК втСведОЗарег) И Зарегистрирован) КАК УПЖКХ_СведенияОЗарегистрированныхВообщеСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПаспортныеДанные.ЛицевойСчет,
	|	втПаспортныеДанные.ID,
	|	втПаспортныеДанные.KVSM,
	|	втПаспортныеДанные.Жилец,
	|	втПаспортныеДанные.ФизЛицо,
	|	втПаспортныеДанные.ДатаРождения,
	|	втПаспортныеДанные.Пол,
	|	втПаспортныеДанные.ВидДокумента,
	|	втПаспортныеДанные.КодМВД,
	|	втПаспортныеДанные.СерияДокумента,
	|	втПаспортныеДанные.НомерДокумента,
	|	втПаспортныеДанные.ДатаВыдачи,
	|	втПаспортныеДанные.КемВыдан,
	|	ЕСТЬNULL(втСведОЗарег.Зарегистрирован, ЛОЖЬ) КАК Зарегистрирован,
	|	ЕСТЬNULL(втСведОЗарег.ВременнаяРегистрация, ЛОЖЬ) КАК ВременнаяРегистрация,
	|	ЕСТЬNULL(втСведОПрож.Проживает, ЛОЖЬ) КАК Проживает,
	|	ЕСТЬNULL(втСведОЗарегВообще.Зарегистрирован, ЛОЖЬ) КАК БылЗарегистрирован,
	|	ЕСТЬNULL(втСведОЗарегВообще.ДатаИзменения, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаРегистрацииСнятия,
	|	втПаспортныеДанные.ПризнакОтветственного
	|ПОМЕСТИТЬ втПодготов
	|ИЗ
	|	втПаспортныеДанные КАК втПаспортныеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведОЗарег КАК втСведОЗарег
	|		ПО втПаспортныеДанные.Жилец = втСведОЗарег.Жилец
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведОПрож КАК втСведОПрож
	|		ПО втПаспортныеДанные.Жилец = втСведОПрож.Жилец
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведОЗарегВообще КАК втСведОЗарегВообще
	|		ПО втПаспортныеДанные.Жилец = втСведОЗарегВообще.Жилец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПодготов.ЛицевойСчет,
	|	втПодготов.ID,
	|	втПодготов.KVSM,
	|	втПодготов.Жилец,
	|	втПодготов.ФизЛицо,
	|	втПодготов.ДатаРождения,
	|	втПодготов.Пол,
	|	втПодготов.ВидДокумента,
	|	втПодготов.КодМВД,
	|	втПодготов.СерияДокумента,
	|	втПодготов.НомерДокумента,
	|	втПодготов.ДатаВыдачи,
	|	втПодготов.КемВыдан,
	|	втПодготов.ДатаРегистрацииСнятия,
	|	втПодготов.Зарегистрирован,
	|	втПодготов.ВременнаяРегистрация,
	|	втПодготов.Проживает,
	|	втПодготов.БылЗарегистрирован,
	|	втПодготов.ПризнакОтветственного,
	|	ЕСТЬNULL(втДокументыУЛ.Код, """") КАК КодДУЛ
	|ПОМЕСТИТЬ втВидыРегистраций
	|ИЗ
	|	втПодготов КАК втПодготов
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДокументыУЛ КАК втДокументыУЛ
	|		ПО втПодготов.ВидДокумента = втДокументыУЛ.ВидДокументаУдостоверяющегоЛичность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втВидыРегистраций.ЛицевойСчет,
	|	втВидыРегистраций.ID,
	|	втВидыРегистраций.KVSM,
	|	втВидыРегистраций.Жилец,
	|	втВидыРегистраций.ФизЛицо,
	|	втВидыРегистраций.ДатаРождения,
	|	втВидыРегистраций.Пол,
	|	втВидыРегистраций.КодМВД,
	|	втВидыРегистраций.СерияДокумента,
	|	втВидыРегистраций.НомерДокумента,
	|	втВидыРегистраций.ДатаВыдачи,
	|	втВидыРегистраций.КемВыдан,
	|	втВидыРегистраций.ДатаРегистрацииСнятия,
	|	втВидыРегистраций.Зарегистрирован,
	|	втВидыРегистраций.ВременнаяРегистрация,
	|	втВидыРегистраций.Проживает,
	|	втВидыРегистраций.БылЗарегистрирован,
	|	ВЫБОР
	|		КОГДА НЕ втВидыРегистраций.ПризнакОтветственного
	|			ТОГДА ЕСТЬNULL(УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.СтепеньРодства.Код, ЗНАЧЕНИЕ(Справочник.КВП_ТипыРодственныхСвязей.ПустаяСсылка))
	|		ИНАЧЕ ВЫБОР
	|				КОГДА втВидыРегистраций.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Мужской)
	|					ТОГДА ""91""
	|				КОГДА втВидыРегистраций.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическогоЛица.Женский)
	|					ТОГДА ""92""
	|			КОНЕЦ
	|	КОНЕЦ КАК СтепеньРодства,
	|	втВидыРегистраций.ПризнакОтветственного,
	|	втВидыРегистраций.КодДУЛ
	|ПОМЕСТИТЬ втРодственныеОтношения
	|ИЗ
	|	втВидыРегистраций КАК втВидыРегистраций
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СтепеньРодстваФизЛиц.СрезПоследних(&ДатаКон, ) КАК УПЖКХ_СтепеньРодстваФизЛицСрезПоследних
	|		ПО втВидыРегистраций.ФизЛицо = УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.ФизическоеЛицоСвязанное";
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.Выполнить();
	
	ЗапросПоЗданиям = Новый Запрос;
	ЗапросПоЗданиям.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросПоЗданиям.Текст = 
	"ВЫБРАТЬ
	|	втРодственныеОтношения.Жилец КАК Объект
	|ИЗ
	|	втРодственныеОтношения КАК втРодственныеОтношения
	|
	|СГРУППИРОВАТЬ ПО
	|	втРодственныеОтношения.Жилец";
	
	МассивОбъектов = ЗапросПоЗданиям.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	втРодственныеОтношения.ЛицевойСчет,
	|	втРодственныеОтношения.ID,
	|	втРодственныеОтношения.KVSM,
	|	втРодственныеОтношения.Жилец,
	|	втРодственныеОтношения.ФизЛицо,
	|	втРодственныеОтношения.ДатаРождения,
	|	втРодственныеОтношения.Пол,
	|	втРодственныеОтношения.КодМВД,
	|	втРодственныеОтношения.СерияДокумента,
	|	втРодственныеОтношения.НомерДокумента,
	|	втРодственныеОтношения.ДатаВыдачи,
	|	втРодственныеОтношения.КемВыдан,
	|	втРодственныеОтношения.ДатаРегистрацииСнятия,
	|	втРодственныеОтношения.СтепеньРодства,
	|	втРодственныеОтношения.ПризнакОтветственного,
	|	втРодственныеОтношения.Зарегистрирован,
	|	втРодственныеОтношения.ВременнаяРегистрация,
	|	втРодственныеОтношения.Проживает,
	|	втРодственныеОтношения.БылЗарегистрирован,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Период, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаВыбытия,
	|	втРодственныеОтношения.КодДУЛ
	|ПОМЕСТИТЬ втДатыВыбытия
	|ИЗ
	|	втРодственныеОтношения КАК втРодственныеОтношения
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК втКонтактнаяИнформация
	|		ПО втРодственныеОтношения.Жилец = втКонтактнаяИнформация.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОПроживающих.Жилец КАК Жилец,
	|	КВП_ИзменениеЛицевогоСчетаГлавная.ДатаРегистрации КАК ДатаНачалаОтсутствия,
	|	КВП_ИзменениеЛицевогоСчетаГлавная.ДатаОтменыИзменения КАК ДатаОкончанияОтсутствия
	|ПОМЕСТИТЬ втДанныеОбОтсутствиях
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОПроживающих КАК УПЖКХ_СведенияОПроживающих
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КВП_ИзменениеЛицевогоСчета.Главная КАК КВП_ИзменениеЛицевогоСчетаГлавная
	|		ПО УПЖКХ_СведенияОПроживающих.Регистратор = КВП_ИзменениеЛицевогоСчетаГлавная.Ссылка
	|ГДЕ
	|	УПЖКХ_СведенияОПроживающих.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И УПЖКХ_СведенияОПроживающих.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийИзмененияЛицевыхСчетов.ИзменениеДанныхОЖильцах)
	|	И УПЖКХ_СведенияОПроживающих.Регистратор.ВидИзменения = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийИзменениеДанныхОЖильцах.Отсутствие)
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОПроживающих.Жилец,
	|	КВП_ИзменениеЛицевогоСчетаГлавная.ДатаРегистрации,
	|	КВП_ИзменениеЛицевогоСчетаГлавная.ДатаОтменыИзменения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДатыВыбытия.ЛицевойСчет,
	|	втДатыВыбытия.ID КАК ID,
	|	втДатыВыбытия.KVSM,
	|	втДатыВыбытия.Жилец КАК Жилец,
	|	ПРЕДСТАВЛЕНИЕ(втДатыВыбытия.ФизЛицо) КАК FIO,
	|	втДатыВыбытия.ДатаРождения КАК DR,
	|	втДатыВыбытия.Пол КАК SX,
	|	втДатыВыбытия.КодМВД,
	|	втДатыВыбытия.СерияДокумента КАК UDS,
	|	втДатыВыбытия.НомерДокумента КАК UDN,
	|	втДатыВыбытия.ДатаВыдачи КАК UDD,
	|	втДатыВыбытия.КемВыдан КАК ORGAN,
	|	втДатыВыбытия.ДатаРегистрацииСнятия,
	|	втДатыВыбытия.СтепеньРодства КАК RO,
	|	втДатыВыбытия.ПризнакОтветственного,
	|	втДатыВыбытия.ДатаВыбытия КАК DVYB,
	|	втДатыВыбытия.Зарегистрирован,
	|	втДатыВыбытия.ВременнаяРегистрация,
	|	втДатыВыбытия.Проживает,
	|	втДатыВыбытия.БылЗарегистрирован,
	|	ЕСТЬNULL(втДанныеОбОтсутствиях.ДатаНачалаОтсутствия, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаНачалаОтсутствия,
	|	ЕСТЬNULL(втДанныеОбОтсутствиях.ДатаОкончанияОтсутствия, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаОкончанияОтсутствия,
	|	втДатыВыбытия.КодДУЛ КАК UDT
	|ИЗ
	|	втДатыВыбытия КАК втДатыВыбытия
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеОбОтсутствиях КАК втДанныеОбОтсутствиях
	|		ПО втДатыВыбытия.Жилец = втДанныеОбОтсутствиях.Жилец
	|ГДЕ
	|	НЕ втДатыВыбытия.Жилец = ЗНАЧЕНИЕ(Справочник.УПЖКХ_Жильцы.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ID,
	|	Жилец,
	|	ДатаНачалаОтсутствия,
	|	ДатаОкончанияОтсутствия
	|ИТОГИ ПО
	|	Жилец";
	
	ДеревоРезультата = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Если ДеревоРезультата.Строки.Количество() > 0 Тогда
		Для Каждого ТекЖилец Из ДеревоРезультата.Строки Цикл
			ПервыйПроход = Истина;
			СтрокаОтсутствия = "";
			
			Для Каждого ТекПериод Из ТекЖилец.Строки Цикл
				Если ПервыйПроход Тогда
					
					Если Вариант = 1 Тогда
						НоваяСтрока = КрасноярскийКрай_ЧленыСемьи.Добавить();
					ИначеЕсли Вариант = 2 Тогда
						НоваяСтрока = КрасноярскийКрай_ЧленыСемьиДоработка.Добавить();
					КонецЕсли;
					
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекПериод, , "UDT");
					
					Если ТекПериод.Зарегистрирован И Не ТекПериод.Проживает Тогда
						ТекВидРег = 11;
					ИначеЕсли  Не ТекПериод.Зарегистрирован И Не ТекПериод.Проживает Тогда
						ТекВидРег = 10;
					ИначеЕсли Не ТекПериод.Зарегистрирован И ТекПериод.Проживает Тогда
						ТекВидРег = 9;
					ИначеЕсли ТекПериод.Зарегистрирован <> ТекПериод.БылЗарегистрирован Тогда
						ТекВидРег = 2;
					Иначе
						ТекВидРег = 1;
					КонецЕсли;
					НоваяСтрока.VR = ТекВидРег;
					
					Если Вариант = 1 Тогда
						
						НоваяСтрока.UDT = ТекПериод.КодМВД;
						
					ИначеЕсли Вариант = 2 Тогда
						
						НоваяСтрока.UDT = ТекПериод.UDT;
						
						Если ТекПериод.Зарегистрирован Тогда
							Если ТекПериод.ВременнаяРегистрация Тогда
								НоваяСтрока.VR = "2";
							Иначе
								НоваяСтрока.VR = "1";
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
					НоваяСтрока.DREG = ТекПериод.ДатаРегистрацииСнятия;
					
					Если НЕ ЗначениеЗаполнено(ТекПериод.DVYB) Тогда
						НоваяСтрока.DVYB = "";
					КонецЕсли;
					
					Если НЕ ЗначениеЗаполнено(ТекПериод.UDD) Тогда
						НоваяСтрока.UDD = "";
					КонецЕсли;
					
					Если ТекПериод.SX = Перечисления.ПолФизическогоЛица.Мужской Тогда
						НоваяСтрока.SX = 1;
					ИначеЕсли ТекПериод.SX = Перечисления.ПолФизическогоЛица.Женский Тогда
						НоваяСтрока.SX = 2;
					КонецЕсли; 
					
					ПервыйПроход = Ложь;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТекПериод.ДатаНачалаОтсутствия) Тогда
					СтрокаОтсутствия = СтрокаОтсутствия + Формат(ТекПериод.ДатаНачалаОтсутствия, "ДФ=dd.MM.yyyy") + " - "
									 + ?(ЗначениеЗаполнено(ТекПериод.ДатаОкончанияОтсутствия),(Формат(ТекПериод.ДатаОкончанияОтсутствия, "ДФ=dd.MM.yyyy")), " ") + ";";
				КонецЕсли;
				
				Если Вариант = 2 Тогда
					НоваяСтрока.NN = НоваяСтрока.НомерСтроки;
				Иначе
					НоваяСтрока.NN = ТекПериод.KVSM;
				КонецЕсли;
				
			КонецЦикла;
			Если Вариант = 2 И НЕ ПустаяСтрока(СтрокаОтсутствия) Тогда
				НоваяСтрока.POTS = СтрокаОтсутствия;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Вариант = 2 Тогда
		ЗаполнитьГлавногоКвартиросъемщика();
	КонецЕсли;
	
КонецПроцедуры // СформироватьТаблицуСведенийОЧленахСемьи()

// Заполняет колонку KVSM таблицы "Квартиросъемщики" на основе поля NN таблицы "Сведения о членах семьи".
//
Процедура ЗаполнитьГлавногоКвартиросъемщика()
	
	МассивСтрокОтветственный = КрасноярскийКрай_ЧленыСемьиДоработка.НайтиСтроки(Новый Структура("ПризнакОтветственного", Истина));
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Квартиросъемщики", КрасноярскийКрай_КвартиросъемщикиДоработка.Выгрузить(, "НомерСтроки, ЛицевойСчет"));
	Запрос.УстановитьПараметр("ЧленыСемьи",       КрасноярскийКрай_ЧленыСемьиДоработка.Выгрузить(МассивСтрокОтветственный, "ЛицевойСчет, NN"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Квартиросъемщики.НомерСтроки,
	|	Квартиросъемщики.ЛицевойСчет
	|ПОМЕСТИТЬ втКвартиросъемщики
	|ИЗ
	|	&Квартиросъемщики КАК Квартиросъемщики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЧленыСемьи.ЛицевойСчет,
	|	ЧленыСемьи.NN
	|ПОМЕСТИТЬ втЧленыСемьи
	|ИЗ
	|	&ЧленыСемьи КАК ЧленыСемьи
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКвартиросъемщики.НомерСтроки,
	|	втКвартиросъемщики.ЛицевойСчет,
	|	ЕСТЬNULL(втЧленыСемьи.NN, 0) КАК KVSM
	|ИЗ
	|	втКвартиросъемщики КАК втКвартиросъемщики
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЧленыСемьи КАК втЧленыСемьи
	|		ПО втКвартиросъемщики.ЛицевойСчет = втЧленыСемьи.ЛицевойСчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ВыборкаКолонкиKVSM = Запрос.Выполнить().Выбрать();
	
	Для Каждого Строка Из КрасноярскийКрай_КвартиросъемщикиДоработка Цикл
		
		Если ВыборкаКолонкиKVSM.НайтиСледующий(Новый Структура("НомерСтроки", Строка.НомерСтроки)) Тогда
			Строка.KVSM = ВыборкаКолонкиKVSM.KVSM;
		КонецЕсли;
		
		Если Строка.KVSM = 0 Тогда
			
			Сообщение = Новый СообщениеПользователю;
			
			Сообщение.Текст = "Для " + Строка.ЛицевойСчет.Наименование + " не удалось определить код главного квартиросъемщика! (строка " + Строка.НомерСтроки + " таблицы квартиросъемщиков)";
			Сообщение.Поле  = "КрасноярскийКрай_КвартиросъемщикиДоработка[" + КрасноярскийКрай_КвартиросъемщикиДоработка.Индекс(Строка) + "].KVSM";
			
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Сообщить();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьГлавногоКвартиросъемщика()

// Предназначена для заполнения в таблице "Квартиросъемщики" сведений о типах улиц.
//
Функция ЗаполнитьТипыУлиц(РезультатЗапроса, ТаблицаТиповУлиц)
	
	РезультатЗапроса.Колонки.Добавить("TIP", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(20));
	Для Каждого ТекЛС Из РезультатЗапроса Цикл
		СтруктураУлицы = ОпределитьТипУлицы(СокрЛП(ТекЛС.UL), ТаблицаТиповУлиц);
		
		ТекЛС.UL  = ВРег(СтруктураУлицы.UL);
		ТекЛС.TIP = ВРег(СтруктураУлицы.TIP);
	КонецЦикла;
	
	Возврат РезультатЗапроса;
	
КонецФункции // ЗаполнитьТипыУслуг()

// Предназначена для определения типа улица.
//
Функция ОпределитьТипУлицы(Улица, ТаблицаТиповУлиц)
	
	НаименованиеУлицы = "";
	ТипУлицы          = "";
	Для Каждого ТекТип Из ТаблицаТиповУлиц Цикл
		ДлинаПрефикса = СтрДлина(ТекТип.НаименованиеКраткоеИзБазы);
		Если Прав(Улица, ДлинаПрефикса) = ТекТип.НаименованиеКраткоеИзБазы ИЛИ Прав(Улица, ДлинаПрефикса + 1) = ТекТип.НаименованиеКраткоеИзБазы + "." Тогда
			НаименованиеУлицы = Лев(Улица, СтрДлина(Улица) - ДлинаПрефикса - 1);
			ТипУлицы          = ТекТип.НаименованиеДляВыводаВФайлОтвета;
			Прервать;
		ИначеЕсли Лев(Улица, ДлинаПрефикса) = ТекТип.НаименованиеКраткоеИзБазы ИЛИ Лев(Улица, ДлинаПрефикса + 1) = ТекТип.НаименованиеКраткоеИзБазы + "." Тогда
			НаименованиеУлицы = Прав(Улица, СтрДлина(Улица) - ДлинаПрефикса - 1);
			ТипУлицы = ТекТип.НаименованиеДляВыводаВФайлОтвета;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДляВозврата = Новый Структура;
	СтруктураДляВозврата.Вставить("UL",  НаименованиеУлицы);
	СтруктураДляВозврата.Вставить("TIP", ТипУлицы);
	
	Возврат СтруктураДляВозврата;
	
КонецФункции // ОпределитьТипУлицы()

// Предназначена для формирования структуры, содержащей сведения о задолженности лицевого счета.
//
Функция ПолучитьСтруктуруЗадолженностиЛС(ЛицевойСчет) Экспорт
	
	СтруктураЗадолженности = Новый Структура;
	ДатаВозникновенияЗадолженности = Дата(1,1,1,0,0,0);
	ДатаОкончанияВозникновения     = Дата(1,1,1,0,0,0);
	ОпеределитьДатуВозникновенияЗадолженности(ЛицевойСчет, ДатаВозникновенияЗадолженности, ДатаОкончанияВозникновения);
	СтруктураЗадолженности.Вставить("ДатаВозникновенияЗадолженности", ДатаВозникновенияЗадолженности);
	СтруктураЗадолженности.Вставить("ДатаОкончанияВозникновения",     ДатаОкончанияВозникновения);
	
	НаличиеСоглашения = ОпределитьНаличиеДействующегоСоглашения(ЛицевойСчет, СтруктураЗадолженности.ДатаВозникновенияЗадолженности);
	СтруктураЗадолженности.Вставить("НаличиеСоглашения", НаличиеСоглашения);
	
	Если ЗначениеЗаполнено(НаличиеСоглашения.Ссылка) Тогда
		СтруктураОплатЗадолженности = ОпределитьФактическуюСуммуОплатПоТекущемуСоглашению(ЛицевойСчет, НаличиеСоглашения.Ссылка);
		СтруктураЗадолженности.Вставить("СтруктураОплатЗадолженности", СтруктураОплатЗадолженности);
	КонецЕсли;
	
	Возврат СтруктураЗадолженности;
	
КонецФункции // ПолучитьСтруктуруЗадолженностиЛС()

// Определяет дату возникновения задолженности.
//
Процедура ОпеределитьДатуВозникновенияЗадолженности(ЛицевойСчет, ДатаНачалаВозникновения, ДатаОкончанияВозникновения)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.МесяцНачисления КАК МесяцНачисления,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток КАК НачальноеСальдо
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&ДатаОпределенияЗадолженности,
	|			Организация = &Организация
	|				И ЛицевойСчет = &ЛицевойСчет) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|ГДЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	МесяцНачисления";
	
	Запрос.УстановитьПараметр("Организация",                  Организация);
	Запрос.УстановитьПараметр("ЛицевойСчет",                  ЛицевойСчет);
	Запрос.УстановитьПараметр("ДатаОпределенияЗадолженности", ДатаСрокОплаты());
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	КоличествоПериодовЗадолженности = Результат.Количество();
	
	Если КоличествоПериодовЗадолженности > 0 Тогда
		ДатаНачалаВозникновения    = НачалоМесяца(Результат[0].МесяцНачисления);
		ДатаОкончанияВозникновения = КонецМесяца(Результат[КоличествоПериодовЗадолженности - 1].МесяцНачисления);
	КонецЕсли;
	
КонецПроцедуры // ОпеределитьДатуВозникновенияЗадолженности()

// Возвращает дату срока оплаты в текущем периоде за предыдущие начисления.
//
Функция ДатаСрокОплаты(ОтчетныйПериод = Неопределено)
	
	ОтчетныйПериод = ?(ОтчетныйПериод = Неопределено, Период, ОтчетныйПериод);
	
	Отказ = Ложь;
	
	Структура = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(КонецМесяца(ОтчетныйПериод), Организация, Отказ);
	Если Отказ Тогда
		ДатаСрокОплаты = НачалоМесяца(ОтчетныйПериод);
	Иначе
		ДатаСрокОплаты = НачалоМесяца(ОтчетныйПериод) + Структура.ЧислоВнесенияПлатежа * 60 * 60 * 24;
	КонецЕсли;
	
	Возврат ДатаСрокОплаты;
	
КонецФункции // ДатаСрокОплаты()

// Определяет наличие действующего соглашения о погашении задолженности.
//
Функция ОпределитьНаличиеДействующегоСоглашения(ЛицевойСчет, ДатаВозникновенияЗадолженности)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_ИсторияРаботыСДолжникамиСрезПоследних.Регистратор
	|ИЗ
	|	РегистрСведений.УПЖКХ_ИсторияРаботыСДолжниками.СрезПоследних(
	|			&ДатаКон,
	|			Организация = &Организация
	|				И Должник = &ЛицевойСчет) КАК УПЖКХ_ИсторияРаботыСДолжникамиСрезПоследних
	|ГДЕ
	|	ДОБАВИТЬКДАТЕ(УПЖКХ_ИсторияРаботыСДолжникамиСрезПоследних.Регистратор.ДатаНачалаПлатежей, МЕСЯЦ, УПЖКХ_ИсторияРаботыСДолжникамиСрезПоследних.Регистратор.МесяцевПоСоглашению) > &ДатаКон";
	
	Запрос.УстановитьПараметр("ДатаНач",     ДатаВозникновенияЗадолженности);
	Запрос.УстановитьПараметр("ДатаКон",     НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() > 0 Тогда
		Возврат Результат[0].Регистратор;
	Иначе
		Возврат Документы.УПЖКХ_СудебноеСоглашение.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции // ОпределитьНаличиеДействующегоСоглашения()

// Определяет фактическую сумму оплат по текущему соглашению о погашении задолженности лицевого счета.
//
Функция ОпределитьФактическуюСуммуОплатПоТекущемуСоглашению(ЛицевойСчет, СудебноеСоглашение)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ГрафикиПлатежейПоЛС.ДатаПлатежа КАК Дата,
	|	КВП_ГрафикиПлатежейПоЛС.Сумма КАК СуммаПлановая,
	|	ВложенныйЗапрос.СуммаПоГрафику КАК СуммаФактическая
	|ИЗ
	|	РегистрСведений.КВП_ГрафикиПлатежейПоЛС КАК КВП_ГрафикиПлатежейПоЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СУММА(КВП_РегистрацияОплатыЛицевыеСчета.СуммаПоГрафику) КАК СуммаПоГрафику,
	|			НАЧАЛОПЕРИОДА(КВП_РегистрацияОплатыЛицевыеСчета.Ссылка.Дата, МЕСЯЦ) КАК Дата
	|		ИЗ
	|			Документ.КВП_РегистрацияОплаты.ЛицевыеСчета КАК КВП_РегистрацияОплатыЛицевыеСчета
	|		ГДЕ
	|			КВП_РегистрацияОплатыЛицевыеСчета.Объект = &ЛицевойСчет
	|			И КВП_РегистрацияОплатыЛицевыеСчета.Ссылка.Организация = &Организация
	|		
	|		СГРУППИРОВАТЬ ПО
	|			НАЧАЛОПЕРИОДА(КВП_РегистрацияОплатыЛицевыеСчета.Ссылка.Дата, МЕСЯЦ)) КАК ВложенныйЗапрос
	|		ПО КВП_ГрафикиПлатежейПоЛС.ДатаПлатежа = ВложенныйЗапрос.Дата
	|ГДЕ
	|	КВП_ГрафикиПлатежейПоЛС.Регистратор = &СудебноеСоглашение
	|	И КВП_ГрафикиПлатежейПоЛС.ЛицевойСчет = &ЛицевойСчет";
	
	Запрос.УстановитьПараметр("ЛицевойСчет",        ЛицевойСчет);
	Запрос.УстановитьПараметр("СудебноеСоглашение", СудебноеСоглашение);
	Запрос.УстановитьПараметр("Организация",        Организация);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	СтруктураДляВозврата = Новый Структура;
	Если Результат.Количество() > 0 Тогда
		СтруктураДляВозврата.Вставить("СуммаПлановая",    Результат.Итог("СуммаПлановая"));
		СтруктураДляВозврата.Вставить("СуммаФактическая", Результат.Итог("СуммаФактическая"));
	КонецЕсли;
	
	Возврат СтруктураДляВозврата;
	
КонецФункции // ОпределитьФактическуюСуммуОплатПоТекущемуСоглашению()

// Предназначена для формирования различных месяцев перерасчетов.
//
Функция ДобавитьМесяцПерерасчета(МесяцыПерерасчетов, МесяцНачисления)
	
	НайденнаяСтрока = МесяцыПерерасчетов.Найти(МесяцНачисления, "МесяцНачисления");
	Если НайденнаяСтрока = Неопределено Тогда
		НовыйМесяц                 = МесяцыПерерасчетов.Добавить();
		НовыйМесяц.МесяцНачисления = МесяцНачисления;
	КонецЕсли;
	
	Возврат МесяцыПерерасчетов;
	
КонецФункции // ДобавитьМесяцПерерасчета()

// Определяет наличие счетчика по услуге из ОСЗН.
//
Функция ОпределитьНаличиеСчетчика(СтрокиПоУслуге)
	
	Для Каждого ТекСтрока Из СтрокиПоУслуге Цикл
		Если ТекСтрока.CHET Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции // ОпределитьНаличиеСчетчика()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ВЫГРУЗКИ ДЛЯ ВОЛОГОДСКОЙ ОБЛАСТИ

#Область ВологодскаяОбласть

// Получает все необходимые данные для выгрузки в Вологодскую область.
//
Процедура СформироватьТаблицуДанныхВологодскаяОбласть(ТаблицаВыгрузки) Экспорт
	
	ТаблицаАдресов = ПолучитьАдресаВсехЗданий();
	
	ТаблицаФИО = ПолучитьФИОФизЛиц();
	
	РезультатЗапроса = ПолучитьТаблицуНачисленийВологда(ТаблицаВыгрузки, ТаблицаАдресов, ТаблицаФИО);
	
	ТаблицаНачислений = РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ТаблицаУслуг = РезультатЗапроса.Выгрузить();
	
	ТаблицаУслуг.Свернуть("K_USL");
	ТаблицаУслуг.Сортировать("K_USL Возр");
	
	// Установление соответствия услуги с номером выводимой колонки.
	ПозицияУслуг = Новый Соответствие;
	Сч = 1;
	
	Если НЕ ТаблицаУслуг.Количество() = 0 Тогда
		Для Каждого Услуга Из ТаблицаУслуг Цикл
			ТекКодУслуги = Услуга.K_USL;
			Если НЕ ТипЗнч(ТекКодУслуги) = ТипЗнч(NULL) И НЕ ТекКодУслуги = 0 Тогда
				ПозицияУслуг.Вставить(ТекКодУслуги, Сч);
				Сч = Сч + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТаблицаВыгрузки.Очистить();
	
	// Запись данных в табличную часть документа.
	ФлагЗаполнения = Истина;
	Для Каждого Проживающий Из ТаблицаНачислений.Строки Цикл
		
		Для Каждого ЛьготнаяКатегория Из Проживающий.Строки Цикл
			
			ФлагЗаполнения = ?(ЗначениеЗаполнено(ЛьготнаяКатегория.Проживающий), Ложь, Истина);
			
			Если НЕ ФлагЗаполнения Тогда
				НоваяСтрока = ТаблицаВыгрузки.Добавить();
				ТекСтрокаЛК = ЛьготнаяКатегория.Строки.Получить(0);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаЛК);
				НоваяСтрока.NCHET  = ПодготовитьНомерЛСДляВывода(ТекСтрокаЛК.ЛицевойСчет.Наименование);
				НоваяСтрока.Period = Формат(Период, "ДФ=""ММ.гг""");
				Если ТекСтрокаЛК.Summa_D > 0 Тогда
					Если ТекСтрокаЛК.КоличествоМесяцевЗадолженности > 3 Тогда
						Если НЕ ТекСтрокаЛК.СтруктураСоглашения = 0 Тогда
							Если ТекСтрокаЛК.СтруктураСоглашения = 2 Тогда
								НоваяСтрока.P_Dolg = 4;
							ИначеЕсли ТекСтрокаЛК.СтруктураСоглашения = 3 Тогда
								НоваяСтрока.P_Dolg = 2;
							Иначе
								НоваяСтрока.P_Dolg = 3;
							КонецЕсли;
						Иначе
							НоваяСтрока.P_Dolg = 1;
						КонецЕсли;
					Иначе
						НоваяСтрока.Summa_D = 0;
					КонецЕсли;
				Иначе
					ТекСтрокаЛК.Summa_D = 0;
				КонецЕсли;
				
			КонецЕсли;
			
			Для Каждого Услуга Из ЛьготнаяКатегория.Строки Цикл
				
				Если ФлагЗаполнения Тогда
					НоваяСтрока = ТаблицаВыгрузки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Услуга);
					НоваяСтрока.Period = "";
				Иначе
					Если ЗначениеЗаполнено(Услуга.Услуга) Тогда
						НомерКолонки = ПозицияУслуг.Получить(Услуга.K_USL);
						Если НЕ НомерКолонки = Неопределено Тогда
							НоваяСтрока["K_USL"  + НомерКолонки]  = Услуга.K_USL;
							НоваяСтрока["SUMMA"  + НомерКолонки]  = Услуга.SUMMA;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаВыгрузки.Сортировать("FAM Возр, IM Возр, OT Возр");
	
КонецПроцедуры

// Получает таблицу значений с адресами зданий.
//
Функция ПолучитьАдресаВсехЗданий()
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	втКонтактнаяИнформация.Объект КАК Здание,
	|	ВЫБОР
	|		КОГДА НЕ втКонтактнаяИнформация.НаселенныйПункт = """"
	|			ТОГДА втКонтактнаяИнформация.НаселенныйПункт
	|		КОГДА НЕ втКонтактнаяИнформация.Город = """"
	|			ТОГДА втКонтактнаяИнформация.Город
	|		ИНАЧЕ втКонтактнаяИнформация.Регион
	|	КОНЕЦ КАК НаселенныйПункт,
	|	втКонтактнаяИнформация.Улица,
	|	втКонтактнаяИнформация.Дом,
	|	втКонтактнаяИнформация.Корпус
	|ИЗ
	|	втКонтактнаяИнформация КАК втКонтактнаяИнформация";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	МассивСокрНасПункт = СформироватьМассивСокращениеДляВологодскойОблПоВиду(4);
	МассивСокрУлицы    = СформироватьМассивСокращениеДляВологодскойОблПоВиду(5);
	
	Для Каждого СтрокаЗдания ИЗ Результат Цикл
		СтрокаЗдания.НаселенныйПункт = ВРег(НормализацияПолейАдресаОбласти(СтрокаЗдания.НаселенныйПункт, МассивСокрНасПункт));
		СтрокаЗдания.Улица           = ВРег(НормализацияПолейАдресаОбласти(СтрокаЗдания.Улица, МассивСокрУлицы));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьАдресаВсехЗданий()

// Формирует массив сокращений для Вологодской области для выбранного вида сокращения.
//
Функция СформироватьМассивСокращениеДляВологодскойОблПоВиду(ВидСокращение)
		
	МассивСокращений = Новый Массив;
	// Для регионов.
	Если ВидСокращение = 1 Тогда
		МассивСокращений.Добавить("обл");
		// Для районов.
	ИначеЕсли ВидСокращение = 2 Тогда
		МассивСокращений.Добавить("р-н");
		МассивСокращений.Добавить("р-н.");
		// Для городов.
	ИначеЕсли ВидСокращение = 3 Тогда
		МассивСокращений.Добавить("г");
		МассивСокращений.Добавить("г.");
		// Для нас.пунктов.
	ИначеЕсли ВидСокращение = 4 Тогда
		МассивСокращений.Добавить("рп");
		МассивСокращений.Добавить("п");
		МассивСокращений.Добавить("с");
		МассивСокращений.Добавить("д");
		МассивСокращений.Добавить("х");
		МассивСокращений.Добавить("ст");
		МассивСокращений.Добавить("пгт");
		МассивСокращений.Добавить("дп");
		МассивСокращений.Добавить("рзд");
		МассивСокращений.Добавить("мкр");
		МассивСокращений.Добавить("нп");
		МассивСокращений.Добавить("тер");
		МассивСокращений.Добавить("п/ст");
		МассивСокращений.Добавить("промзона");
		МассивСокращений.Добавить("снт");
		МассивСокращений.Добавить("п/о");
		МассивСокращений.Добавить("городок");
		МассивСокращений.Добавить("заимка");
		МассивСокращений.Добавить("кп");
		МассивСокращений.Добавить("ж/д_казарм");
		МассивСокращений.Добавить("г");
		МассивСокращений.Добавить("обл");
		МассивСокращений.Добавить("рп.");
		МассивСокращений.Добавить("п.");
		МассивСокращений.Добавить("с.");
		МассивСокращений.Добавить("д.");
		МассивСокращений.Добавить("х.");
		МассивСокращений.Добавить("ст.");
		МассивСокращений.Добавить("пгт.");
		МассивСокращений.Добавить("дп.");
		МассивСокращений.Добавить("рзд.");
		МассивСокращений.Добавить("мкр.");
		МассивСокращений.Добавить("нп.");
		МассивСокращений.Добавить("тер.");
		МассивСокращений.Добавить("п/ст.");
		МассивСокращений.Добавить("промзона.");
		МассивСокращений.Добавить("снт.");
		МассивСокращений.Добавить("п/о.");
		МассивСокращений.Добавить("городок.");
		МассивСокращений.Добавить("заимка.");
		МассивСокращений.Добавить("кп.");
		МассивСокращений.Добавить("ж/д_казарм.");
		МассивСокращений.Добавить("г.");
		МассивСокращений.Добавить("обл.");
		// Для улиц.
	ИначеЕсли ВидСокращение = 5 Тогда
		МассивСокращений.Добавить("ул");
		МассивСокращений.Добавить("тер");
		МассивСокращений.Добавить("пл");
		МассивСокращений.Добавить("пер");
		МассивСокращений.Добавить("снт");
		МассивСокращений.Добавить("проезд");
		МассивСокращений.Добавить("б-р");
		МассивСокращений.Добавить("туп");
		МассивСокращений.Добавить("п");
		МассивСокращений.Добавить("ш");
		МассивСокращений.Добавить("пр-кт");
		МассивСокращений.Добавить("тракт");
		МассивСокращений.Добавить("сквер");
		МассивСокращений.Добавить("ст");
		МассивСокращений.Добавить("наб");
		МассивСокращений.Добавить("км");
		МассивСокращений.Добавить("ж/д_ст");
		МассивСокращений.Добавить("сад");
		МассивСокращений.Добавить("парк");
		МассивСокращений.Добавить("уч-к");
		МассивСокращений.Добавить("мкр");
		МассивСокращений.Добавить("городок");
		МассивСокращений.Добавить("кв-л");
		МассивСокращений.Добавить("нп");
		МассивСокращений.Добавить("остров");
		МассивСокращений.Добавить("гск");
		МассивСокращений.Добавить("линия");
		МассивСокращений.Добавить("рзд");
		МассивСокращений.Добавить("стр");
		МассивСокращений.Добавить("аллея");
		МассивСокращений.Добавить("казарма");
		МассивСокращений.Добавить("ж/д_рзд");
		МассивСокращений.Добавить("д");
		МассивСокращений.Добавить("ж/д_казарм");
		МассивСокращений.Добавить("ж/д_будка");
		МассивСокращений.Добавить("высел");
		МассивСокращений.Добавить("ул.");
		МассивСокращений.Добавить("тер.");
		МассивСокращений.Добавить("пл.");
		МассивСокращений.Добавить("пер.");
		МассивСокращений.Добавить("снт.");
		МассивСокращений.Добавить("проезд.");
		МассивСокращений.Добавить("б-р.");
		МассивСокращений.Добавить("туп.");
		МассивСокращений.Добавить("п.");
		МассивСокращений.Добавить("ш.");
		МассивСокращений.Добавить("пр-кт.");
		МассивСокращений.Добавить("тракт.");
		МассивСокращений.Добавить("сквер.");
		МассивСокращений.Добавить("ст.");
		МассивСокращений.Добавить("наб.");
		МассивСокращений.Добавить("км.");
		МассивСокращений.Добавить("ж/д_ст.");
		МассивСокращений.Добавить("сад.");
		МассивСокращений.Добавить("парк.");
		МассивСокращений.Добавить("уч-к.");
		МассивСокращений.Добавить("мкр.");
		МассивСокращений.Добавить("городок.");
		МассивСокращений.Добавить("кв-л.");
		МассивСокращений.Добавить("нп.");
		МассивСокращений.Добавить("остров.");
		МассивСокращений.Добавить("гск.");
		МассивСокращений.Добавить("линия.");
		МассивСокращений.Добавить("рзд.");
		МассивСокращений.Добавить("стр.");
		МассивСокращений.Добавить("аллея.");
		МассивСокращений.Добавить("казарма.");
		МассивСокращений.Добавить("ж/д_рзд.");
		МассивСокращений.Добавить("д.");
		МассивСокращений.Добавить("ж/д_казарм.");
		МассивСокращений.Добавить("ж/д_будка.");
		МассивСокращений.Добавить("высел.");
	КонецЕсли;
	
	Возврат МассивСокращений;
	
КонецФункции // СформироватьМассивСокращениеДляВологодскойОблПоВиду()

// Возвращает таблицу начислений для Вологодской области.
//
Функция ПолучитьТаблицуНачисленийВологда(ТаблицаДанныхИзФайла, ТаблицаАдресов, ТаблицаФИО)
	
	Запрос = Новый Запрос;
	
	// Получаем список найденных жильцов.
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДанныхИзФайла.FAM,
	|	ТаблицаДанныхИзФайла.IM,
	|	ТаблицаДанныхИзФайла.OT
	|ПОМЕСТИТЬ втСведенияИзФайла
	|ИЗ
	|	&ТаблицаДанныхИзФайла КАК ТаблицаДанныхИзФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаФИО.ФизическоеЛицо,
	|	ТаблицаФИО.Фамилия,
	|	ТаблицаФИО.Имя,
	|	ТаблицаФИО.Отчество
	|ПОМЕСТИТЬ втФИОФизЛиц
	|ИЗ
	|	&ТаблицаФИО КАК ТаблицаФИО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Жильцы.Ссылка КАК Жилец,
	|	ЕСТЬNULL(втФИОФизЛиц.Фамилия, """") КАК Фамилия,
	|	ЕСТЬNULL(втФИОФизЛиц.Имя, """") КАК Имя,
	|	ЕСТЬNULL(втФИОФизЛиц.Отчество, """") КАК Отчество
	|ПОМЕСТИТЬ втЖильцыСФИО
	|ИЗ
	|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втФИОФизЛиц КАК втФИОФизЛиц
	|		ПО УПЖКХ_Жильцы.ФизЛицо = втФИОФизЛиц.ФизическоеЛицо
	|ГДЕ
	|	НЕ УПЖКХ_Жильцы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцыСФИО.Жилец,
	|	втЖильцыСФИО.Фамилия,
	|	втЖильцыСФИО.Имя,
	|	втЖильцыСФИО.Отчество
	|ПОМЕСТИТЬ втНайденныеЖильцы
	|ИЗ
	|	втЖильцыСФИО КАК втЖильцыСФИО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСведенияИзФайла КАК втСведенияИзФайла
	|		ПО втЖильцыСФИО.Фамилия = втСведенияИзФайла.FAM
	|			И втЖильцыСФИО.Имя = втСведенияИзФайла.IM
	|			И втЖильцыСФИО.Отчество = втСведенияИзФайла.OT
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаАдресов.Здание,
	|	ТаблицаАдресов.НаселенныйПункт,
	|	ТаблицаАдресов.Улица,
	|	ТаблицаАдресов.Дом,
	|	ТаблицаАдресов.Корпус
	|ПОМЕСТИТЬ втАдреса
	|ИЗ
	|	&ТаблицаАдресов КАК ТаблицаАдресов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втНайденныеЖильцы.Жилец КАК Проживающий,
	|	втНайденныеЖильцы.Жилец.Владелец КАК ЛицевойСчет,
	|	втНайденныеЖильцы.Жилец.Владелец.Адрес КАК Помещение,
	|	втНайденныеЖильцы.Жилец.Владелец.Адрес.Владелец КАК Здание,
	|	втНайденныеЖильцы.Фамилия,
	|	втНайденныеЖильцы.Имя,
	|	втНайденныеЖильцы.Отчество,
	|	ЕСТЬNULL(втАдреса.НаселенныйПункт, """") КАК НаселенныйПункт,
	|	ЕСТЬNULL(втАдреса.Улица, """") КАК Улица,
	|	ЕСТЬNULL(втАдреса.Дом, """") КАК Дом,
	|	ЕСТЬNULL(втАдреса.Корпус, """") КАК Корпус,
	|	втНайденныеЖильцы.Жилец.Владелец.Адрес.Код КАК Квартира
	|ПОМЕСТИТЬ втЖильцыБезКомнат
	|ИЗ
	|	втНайденныеЖильцы КАК втНайденныеЖильцы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втАдреса КАК втАдреса
	|		ПО втНайденныеЖильцы.Жилец.Владелец.Адрес.Владелец = втАдреса.Здание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втЖильцыБезКомнат.ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.Комната) КАК Доля
	|ПОМЕСТИТЬ втЛСКомнатыИзРегистра
	|ИЗ
	|	втЖильцыБезКомнат КАК втЖильцыБезКомнат
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ПривязанныеКЛицевомуСчетуКомнаты.СрезПоследних(
	|				&ДатаКон,
	|				ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втЖильцыБезКомнат.ЛицевойСчет
	|					ИЗ
	|						втЖильцыБезКомнат КАК втЖильцыБезКомнат)) КАК УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних
	|		ПО втЖильцыБезКомнат.ЛицевойСчет = УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.ЛицевойСчет
	|			И втЖильцыБезКомнат.ЛицевойСчет.Адрес = УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.Комната.Родитель
	|ГДЕ
	|	УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.Привязка
	|
	|СГРУППИРОВАТЬ ПО
	|	втЖильцыБезКомнат.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втЖильцыБезКомнат.ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_Помещения.Ссылка) КАК Доля
	|ПОМЕСТИТЬ втКомнатыИзСправочника
	|ИЗ
	|	втЖильцыБезКомнат КАК втЖильцыБезКомнат
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
	|		ПО втЖильцыБезКомнат.Помещение = УПЖКХ_Помещения.Родитель
	|ГДЕ
	|	НЕ УПЖКХ_Помещения.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	втЖильцыБезКомнат.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцыБезКомнат.Проживающий,
	|	втЖильцыБезКомнат.ЛицевойСчет,
	|	втЖильцыБезКомнат.Помещение,
	|	втЖильцыБезКомнат.Здание,
	|	втЖильцыБезКомнат.Фамилия,
	|	втЖильцыБезКомнат.Имя,
	|	втЖильцыБезКомнат.Отчество,
	|	втЖильцыБезКомнат.НаселенныйПункт,
	|	втЖильцыБезКомнат.Улица,
	|	втЖильцыБезКомнат.Дом,
	|	втЖильцыБезКомнат.Корпус,
	|	втЖильцыБезКомнат.Квартира,
	|	ВЫБОР
	|		КОГДА НЕ втЛСКомнатыИзРегистра.Доля = 0
	|			ТОГДА втЛСКомнатыИзРегистра.Доля
	|		КОГДА НЕ втКомнатыИзСправочника.Доля = 0
	|			ТОГДА втКомнатыИзСправочника.Доля
	|		ИНАЧЕ втЖильцыБезКомнат.Помещение.КоличествоКомнат
	|	КОНЕЦ КАК КоличествоКомнат
	|ИЗ
	|	втЖильцыБезКомнат КАК втЖильцыБезКомнат
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЛСКомнатыИзРегистра КАК втЛСКомнатыИзРегистра
	|		ПО втЖильцыБезКомнат.ЛицевойСчет = втЛСКомнатыИзРегистра.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКомнатыИзСправочника КАК втКомнатыИзСправочника
	|		ПО втЖильцыБезКомнат.ЛицевойСчет = втКомнатыИзСправочника.ЛицевойСчет";
	
	Запрос.УстановитьПараметр("ДатаКон",              КонецМесяца(Период));
	Запрос.УстановитьПараметр("ТаблицаДанныхИзФайла", ТаблицаДанныхИзФайла);
	Запрос.УстановитьПараметр("ТаблицаАдресов",       ТаблицаАдресов);
	Запрос.УстановитьПараметр("ТаблицаФИО",           ТаблицаФИО);
	
	НайденныеЖильцы = Запрос.Выполнить().Выгрузить();
	
	// Получаем итоговые данные.
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДанныхИзФайла.KOD_R,
	|	ТаблицаДанныхИзФайла.LCHET,
	|	ТаблицаДанныхИзФайла.SNILS,
	|	ТаблицаДанныхИзФайла.FAM,
	|	ТаблицаДанныхИзФайла.IM,
	|	ТаблицаДанныхИзФайла.OT,
	|	ТаблицаДанныхИзФайла.D_ROGD,
	|	ТаблицаДанныхИзФайла.POST,
	|	ТаблицаДанныхИзФайла.HOUSE,
	|	ТаблицаДанныхИзФайла.KORP,
	|	ТаблицаДанныхИзФайла.FLAT,
	|	ТаблицаДанныхИзФайла.N_ROOM,
	|	ТаблицаДанныхИзФайла.KAT_LG,
	|	ТаблицаДанныхИзФайла.PRIZNAK,
	|	ТаблицаДанныхИзФайла.D_PRAVO,
	|	ТаблицаДанныхИзФайла.ORG_PLAT,
	|	ТаблицаДанныхИзФайла.C,
	|	ТаблицаДанныхИзФайла.DO,
	|	ТаблицаДанныхИзФайла.LC_ID,
	|	ТаблицаДанныхИзФайла.PUNKT_NM,
	|	ТаблицаДанныхИзФайла.STREET_NM,
	|	ТаблицаДанныхИзФайла.K_CODE,
	|	ТаблицаДанныхИзФайла.Q_EDKJ,
	|	ТаблицаДанныхИзФайла.Q_EDKK,
	|	ТаблицаДанныхИзФайла.Q_IJD,
	|	ТаблицаДанныхИзФайла.Q_OUT,
	|	ТаблицаДанныхИзФайла.F_CODE
	|ПОМЕСТИТЬ втСведенияИзФайла
	|ИЗ
	|	&ТаблицаДанныхИзФайла КАК ТаблицаДанныхИзФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НайденныеЖильцы.Проживающий,
	|	НайденныеЖильцы.ЛицевойСчет,
	|	НайденныеЖильцы.Помещение,
	|	НайденныеЖильцы.Здание,
	|	НайденныеЖильцы.Фамилия,
	|	НайденныеЖильцы.Имя,
	|	НайденныеЖильцы.Отчество,
	|	НайденныеЖильцы.НаселенныйПункт,
	|	НайденныеЖильцы.Улица,
	|	НайденныеЖильцы.Дом,
	|	НайденныеЖильцы.Корпус,
	|	НайденныеЖильцы.Квартира,
	|	НайденныеЖильцы.КоличествоКомнат
	|ПОМЕСТИТЬ втНайденныеЖильцы
	|ИЗ
	|	&НайденныеЖильцы КАК НайденныеЖильцы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидовСобственности.Код,
	|	ТаблицаВидовСобственности.ВидСобственности
	|ПОМЕСТИТЬ втТаблицаВидовСобственности
	|ИЗ
	|	&ТаблицаВидовСобственности КАК ТаблицаВидовСобственности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаОрганизаций.Код,
	|	ТаблицаОрганизаций.Организация
	|ПОМЕСТИТЬ втТаблицаОрганизаций
	|ИЗ
	|	&ТаблицаОрганизаций КАК ТаблицаОрганизаций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУслуг.Код,
	|	ТаблицаУслуг.Услуга
	|ПОМЕСТИТЬ втТаблицаУслуг
	|ИЗ
	|	&ТаблицаУслуг КАК ТаблицаУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЛьготныхКатегорий.ЛьготнаяКатегория,
	|	ТаблицаЛьготныхКатегорий.Код КАК КодЛК
	|ПОМЕСТИТЬ втКодыЛК
	|ИЗ
	|	&ТаблицаЛьготныхКатегорий КАК ТаблицаЛьготныхКатегорий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаФормУправленияМКД.Здание,
	|	ТаблицаФормУправленияМКД.ФормаУправления
	|ПОМЕСТИТЬ втФормыУправленияМКДБезГруппировки
	|ИЗ
	|	&ТаблицаФормУправленияМКД КАК ТаблицаФормУправленияМКД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втФормыУправленияМКДБезГруппировки.Здание,
	|	МАКСИМУМ(втФормыУправленияМКДБезГруппировки.ФормаУправления)
	|ПОМЕСТИТЬ втФормыУправленияМКД
	|ИЗ
	|	втФормыУправленияМКДБезГруппировки КАК втФормыУправленияМКДБезГруппировки
	|
	|СГРУППИРОВАТЬ ПО
	|	втФормыУправленияМКДБезГруппировки.Здание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСведенияИзФайла.FAM,
	|	втСведенияИзФайла.IM,
	|	втСведенияИзФайла.OT,
	|	втСведенияИзФайла.PUNKT_NM,
	|	втСведенияИзФайла.STREET_NM,
	|	втСведенияИзФайла.HOUSE,
	|	втСведенияИзФайла.KORP,
	|	втСведенияИзФайла.FLAT,
	|	втСведенияИзФайла.KAT_LG,
	|	втСведенияИзФайла.D_ROGD
	|ПОМЕСТИТЬ втДанныеДляПоиска
	|ИЗ
	|	втСведенияИзФайла КАК втСведенияИзФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНайденныеЖильцы.Проживающий,
	|	втНайденныеЖильцы.ЛицевойСчет,
	|	втНайденныеЖильцы.Помещение,
	|	втНайденныеЖильцы.Здание,
	|	втНайденныеЖильцы.Фамилия,
	|	втНайденныеЖильцы.Имя,
	|	втНайденныеЖильцы.Отчество,
	|	втДанныеДляПоиска.PUNKT_NM КАК НаселенныйПункт,
	|	втДанныеДляПоиска.STREET_NM КАК Улица,
	|	втНайденныеЖильцы.Дом,
	|	втНайденныеЖильцы.Корпус,
	|	втНайденныеЖильцы.Квартира,
	|	втНайденныеЖильцы.КоличествоКомнат,
	|	втДанныеДляПоиска.KAT_LG
	|ПОМЕСТИТЬ втИтоговаяТаблицаЖильцов
	|ИЗ
	|	втДанныеДляПоиска КАК втДанныеДляПоиска
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНайденныеЖильцы КАК втНайденныеЖильцы
	|		ПО (втНайденныеЖильцы.Фамилия = втДанныеДляПоиска.FAM)
	|			И (втНайденныеЖильцы.Отчество = втДанныеДляПоиска.OT)
	|			И (втНайденныеЖильцы.Имя = втДанныеДляПоиска.IM)
	|			И (втНайденныеЖильцы.НаселенныйПункт = втДанныеДляПоиска.PUNKT_NM)
	|			И (втНайденныеЖильцы.Улица = втДанныеДляПоиска.STREET_NM)
	|			И (втНайденныеЖильцы.Дом = втДанныеДляПоиска.HOUSE)
	|			И (втНайденныеЖильцы.Корпус = втДанныеДляПоиска.KORP)
	|			И (втНайденныеЖильцы.Квартира = втДанныеДляПоиска.FLAT)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОЖильцахСрезПоследних.ЛицевойСчет
	|ПОМЕСТИТЬ втДействующиеЛС
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втИтоговаяТаблицаЖильцов.ЛицевойСчет
	|				ИЗ
	|					втИтоговаяТаблицаЖильцов КАК втИтоговаяТаблицаЖильцов)) КАК УПЖКХ_СведенияОЖильцахСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОЖильцахСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.ЛицевойСчет,
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.КоличествоЗарегистрированных КАК КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втУчетКоличестваЖильцов
	|ИЗ
	|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втДействующиеЛС.ЛицевойСчет
	|				ИЗ
	|					втДействующиеЛС КАК втДействующиеЛС)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец) КАК КоличествоЗарегистрированных
	|ПОМЕСТИТЬ КоличествоИзСведений
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			,
	|			ДатаИзменения <= &ДатаКон
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втИтоговаяТаблицаЖильцов.ЛицевойСчет
	|					ИЗ
	|						втИтоговаяТаблицаЖильцов КАК втИтоговаяТаблицаЖильцов)) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &УказыватьКоличествоПрожИЗарегЧислами = ИСТИНА
	|			ТОГДА ЕСТЬNULL(втУчетКоличестваЖильцов.КоличествоЗарегистрированных, 0)
	|		ИНАЧЕ ЕСТЬNULL(КоличествоИзСведений.КоличествоЗарегистрированных, 0)
	|	КОНЕЦ КАК КоличествоЗарегистрированных,
	|	ВЫБОР
	|		КОГДА &УказыватьКоличествоПрожИЗарегЧислами = ИСТИНА
	|			ТОГДА втУчетКоличестваЖильцов.ЛицевойСчет
	|		ИНАЧЕ КоличествоИзСведений.ЛицевойСчет
	|	КОНЕЦ КАК ЛицевойСчет
	|ПОМЕСТИТЬ врТаблицаКоличеств
	|ИЗ
	|	КоличествоИзСведений КАК КоличествоИзСведений
	|		ПОЛНОЕ СОЕДИНЕНИЕ втУчетКоличестваЖильцов КАК втУчетКоличестваЖильцов
	|		ПО КоличествоИзСведений.ЛицевойСчет = втУчетКоличестваЖильцов.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий,
	|	КВП_НазначенныеЛьготыСрезПоследних.ЛьготнаяКатегория,
	|	ЕСТЬNULL(КВП_СкидкиСрезПоследних.Услуга, ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)) КАК Услуга,
	|	ЕСТЬNULL(втКодыЛК.КодЛК, """") КАК КодЛК
	|ПОМЕСТИТЬ втНазначенныеЛК
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(
	|			&ДатаКон,
	|			Проживающий В
	|					(ВЫБРАТЬ
	|						втИтоговаяТаблицаЖильцов.Проживающий
	|					ИЗ
	|						втИтоговаяТаблицаЖильцов КАК втИтоговаяТаблицаЖильцов)
	|				И ДатаИзменения <= &ДатаКон) КАК КВП_НазначенныеЛьготыСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_Скидки.СрезПоследних(&ДатаКон, Услуга В (&ТаблицаУслугОтбор)) КАК КВП_СкидкиСрезПоследних
	|		ПО КВП_НазначенныеЛьготыСрезПоследних.ЛьготнаяКатегория = КВП_СкидкиСрезПоследних.ЛьготнаяКатегория
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКодыЛК КАК втКодыЛК
	|		ПО КВП_НазначенныеЛьготыСрезПоследних.ЛьготнаяКатегория = втКодыЛК.ЛьготнаяКатегория
	|ГДЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.Действие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговаяТаблицаЖильцов.Проживающий,
	|	втИтоговаяТаблицаЖильцов.ЛицевойСчет,
	|	втИтоговаяТаблицаЖильцов.Фамилия,
	|	втИтоговаяТаблицаЖильцов.Имя,
	|	втИтоговаяТаблицаЖильцов.Отчество,
	|	втИтоговаяТаблицаЖильцов.НаселенныйПункт,
	|	втИтоговаяТаблицаЖильцов.Улица,
	|	втИтоговаяТаблицаЖильцов.Дом,
	|	втИтоговаяТаблицаЖильцов.Корпус,
	|	втИтоговаяТаблицаЖильцов.Квартира,
	|	втИтоговаяТаблицаЖильцов.КоличествоКомнат,
	|	втИтоговаяТаблицаЖильцов.KAT_LG,
	|	ЕСТЬNULL(врТаблицаКоличеств.КоличествоЗарегистрированных, 0) КАК КоличествоЗарегистрированных,
	|	втИтоговаяТаблицаЖильцов.Помещение,
	|	втИтоговаяТаблицаЖильцов.Здание,
	|	ЕСТЬNULL(втФормыУправленияМКД.ФормаУправления, 2) КАК N_Upr
	|ПОМЕСТИТЬ втИтоговаяТаблицаЖильцовСЗарегистрированными
	|ИЗ
	|	втИтоговаяТаблицаЖильцов КАК втИтоговаяТаблицаЖильцов
	|		ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаКоличеств КАК врТаблицаКоличеств
	|		ПО втИтоговаяТаблицаЖильцов.ЛицевойСчет = врТаблицаКоличеств.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втФормыУправленияМКД КАК втФормыУправленияМКД
	|		ПО втИтоговаяТаблицаЖильцов.Здание = втФормыУправленияМКД.Здание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности,
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение
	|ПОМЕСТИТЬ втСобственностиНаПомещения
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственностьНаПомещения.СрезПоследних(
	|			&ДатаКон,
	|			Помещение В
	|				(ВЫБРАТЬ
	|					втИтоговаяТаблицаЖильцовСЗарегистрированными.Помещение
	|				ИЗ
	|					втИтоговаяТаблицаЖильцовСЗарегистрированными КАК втИтоговаяТаблицаЖильцовСЗарегистрированными)) КАК УПЖКХ_СобственностьНаПомещенияСрезПоследних
	|ГДЕ
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговаяТаблицаЖильцовСЗарегистрированными.Проживающий,
	|	втИтоговаяТаблицаЖильцовСЗарегистрированными.ЛицевойСчет,
	|	втИтоговаяТаблицаЖильцовСЗарегистрированными.Фамилия,
	|	втИтоговаяТаблицаЖильцовСЗарегистрированными.Имя,
	|	втИтоговаяТаблицаЖильцовСЗарегистрированными.Отчество,
	|	втИтоговаяТаблицаЖильцовСЗарегистрированными.НаселенныйПункт,
	|	втИтоговаяТаблицаЖильцовСЗарегистрированными.Улица,
	|	втИтоговаяТаблицаЖильцовСЗарегистрированными.Дом,
	|	втИтоговаяТаблицаЖильцовСЗарегистрированными.Корпус,
	|	втИтоговаяТаблицаЖильцовСЗарегистрированными.Квартира,
	|	втИтоговаяТаблицаЖильцовСЗарегистрированными.КоличествоКомнат,
	|	втИтоговаяТаблицаЖильцовСЗарегистрированными.KAT_LG,
	|	втИтоговаяТаблицаЖильцовСЗарегистрированными.КоличествоЗарегистрированных,
	|	втИтоговаяТаблицаЖильцовСЗарегистрированными.Помещение,
	|	втИтоговаяТаблицаЖильцовСЗарегистрированными.N_Upr,
	|	втСобственностиНаПомещения.ВидСобственности
	|ПОМЕСТИТЬ втИтоговаяТаблицаЖильцовСЗарегИВидСобств
	|ИЗ
	|	втИтоговаяТаблицаЖильцовСЗарегистрированными КАК втИтоговаяТаблицаЖильцовСЗарегистрированными
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСобственностиНаПомещения КАК втСобственностиНаПомещения
	|		ПО втИтоговаяТаблицаЖильцовСЗарегистрированными.Помещение = втСобственностиНаПомещения.Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель, 0) = 0
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель, 0) = 0
	|						ТОГДА КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель / КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДоляЛС,
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ втДоли
	|ИЗ
	|	РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втИтоговаяТаблицаЖильцовСЗарегИВидСобств.ЛицевойСчет
	|				ИЗ
	|					втИтоговаяТаблицаЖильцовСЗарегИВидСобств КАК втИтоговаяТаблицаЖильцовСЗарегИВидСобств)) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект КАК Помещение,
	|	КВП_ПлощадьПомещенияСрезПоследних.Площадь
	|ПОМЕСТИТЬ втПлощади
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|			&ДатаКон,
	|			ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)
	|				И Объект В
	|					(ВЫБРАТЬ
	|						втИтоговаяТаблицаЖильцовСЗарегИВидСобств.Помещение
	|					ИЗ
	|						втИтоговаяТаблицаЖильцовСЗарегИВидСобств КАК втИтоговаяТаблицаЖильцовСЗарегИВидСобств)) КАК КВП_ПлощадьПомещенияСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговаяТаблицаЖильцовСЗарегИВидСобств.Проживающий,
	|	втИтоговаяТаблицаЖильцовСЗарегИВидСобств.ЛицевойСчет,
	|	втИтоговаяТаблицаЖильцовСЗарегИВидСобств.Фамилия,
	|	втИтоговаяТаблицаЖильцовСЗарегИВидСобств.Имя,
	|	втИтоговаяТаблицаЖильцовСЗарегИВидСобств.Отчество,
	|	втИтоговаяТаблицаЖильцовСЗарегИВидСобств.НаселенныйПункт,
	|	втИтоговаяТаблицаЖильцовСЗарегИВидСобств.Улица,
	|	втИтоговаяТаблицаЖильцовСЗарегИВидСобств.Дом,
	|	втИтоговаяТаблицаЖильцовСЗарегИВидСобств.Корпус,
	|	втИтоговаяТаблицаЖильцовСЗарегИВидСобств.Квартира,
	|	втИтоговаяТаблицаЖильцовСЗарегИВидСобств.КоличествоКомнат,
	|	втИтоговаяТаблицаЖильцовСЗарегИВидСобств.KAT_LG,
	|	втИтоговаяТаблицаЖильцовСЗарегИВидСобств.КоличествоЗарегистрированных,
	|	втИтоговаяТаблицаЖильцовСЗарегИВидСобств.Помещение,
	|	втИтоговаяТаблицаЖильцовСЗарегИВидСобств.N_Upr,
	|	втИтоговаяТаблицаЖильцовСЗарегИВидСобств.ВидСобственности,
	|	ЕСТЬNULL(втДоли.ДоляЛС, 0) * ЕСТЬNULL(втПлощади.Площадь, 0) КАК Площадь
	|ПОМЕСТИТЬ втИтоговаяТаблицаЖильцовСЗарегВидСобствПлощадь
	|ИЗ
	|	втИтоговаяТаблицаЖильцовСЗарегИВидСобств КАК втИтоговаяТаблицаЖильцовСЗарегИВидСобств
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПлощади КАК втПлощади
	|		ПО втИтоговаяТаблицаЖильцовСЗарегИВидСобств.Помещение = втПлощади.Помещение
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДоли КАК втДоли
	|		ПО втИтоговаяТаблицаЖильцовСЗарегИВидСобств.ЛицевойСчет = втДоли.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговаяТаблицаЖильцовСЗарегВидСобствПлощадь.Проживающий КАК Проживающий,
	|	втИтоговаяТаблицаЖильцовСЗарегВидСобствПлощадь.ЛицевойСчет КАК ЛицевойСчет,
	|	втИтоговаяТаблицаЖильцовСЗарегВидСобствПлощадь.Фамилия КАК Фамилия,
	|	втИтоговаяТаблицаЖильцовСЗарегВидСобствПлощадь.Имя КАК Имя,
	|	втИтоговаяТаблицаЖильцовСЗарегВидСобствПлощадь.Отчество КАК Отчество,
	|	втИтоговаяТаблицаЖильцовСЗарегВидСобствПлощадь.НаселенныйПункт КАК НаселенныйПункт,
	|	втИтоговаяТаблицаЖильцовСЗарегВидСобствПлощадь.Улица КАК Улица,
	|	втИтоговаяТаблицаЖильцовСЗарегВидСобствПлощадь.Дом КАК Дом,
	|	втИтоговаяТаблицаЖильцовСЗарегВидСобствПлощадь.Корпус КАК Корпус,
	|	втИтоговаяТаблицаЖильцовСЗарегВидСобствПлощадь.Квартира КАК Квартира,
	|	втИтоговаяТаблицаЖильцовСЗарегВидСобствПлощадь.КоличествоКомнат КАК КоличествоКомнат,
	|	втИтоговаяТаблицаЖильцовСЗарегВидСобствПлощадь.KAT_LG КАК KAT_LG,
	|	втИтоговаяТаблицаЖильцовСЗарегВидСобствПлощадь.N_Upr,
	|	втИтоговаяТаблицаЖильцовСЗарегВидСобствПлощадь.ВидСобственности КАК ВидСобственности,
	|	ЕСТЬNULL(втНазначенныеЛК.ЛьготнаяКатегория, ЗНАЧЕНИЕ(Справочник.КВП_ЛьготныеКатегории.ПустаяСсылка)) КАК ЛьготнаяКатегория,
	|	ЕСТЬNULL(втНазначенныеЛК.Услуга, ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)) КАК Услуга,
	|	втИтоговаяТаблицаЖильцовСЗарегВидСобствПлощадь.Площадь,
	|	втИтоговаяТаблицаЖильцовСЗарегВидСобствПлощадь.КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втНазначенныеЛьготы
	|ИЗ
	|	втИтоговаяТаблицаЖильцовСЗарегВидСобствПлощадь КАК втИтоговаяТаблицаЖильцовСЗарегВидСобствПлощадь
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНазначенныеЛК КАК втНазначенныеЛК
	|		ПО втИтоговаяТаблицаЖильцовСЗарегВидСобствПлощадь.Проживающий = втНазначенныеЛК.Проживающий
	|			И втИтоговаяТаблицаЖильцовСЗарегВидСобствПлощадь.KAT_LG = втНазначенныеЛК.КодЛК
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(КВП_НачисленныеЛьготыОбороты.СуммаНачисленияОборот, 0) КАК СуммаНачисленияОборот,
	|	&Организация КАК Организация,
	|	втНазначенныеЛьготы.Проживающий,
	|	втНазначенныеЛьготы.ЛицевойСчет,
	|	втНазначенныеЛьготы.Фамилия,
	|	втНазначенныеЛьготы.Имя,
	|	втНазначенныеЛьготы.Отчество,
	|	втНазначенныеЛьготы.НаселенныйПункт,
	|	втНазначенныеЛьготы.Улица,
	|	втНазначенныеЛьготы.Дом,
	|	втНазначенныеЛьготы.Корпус,
	|	втНазначенныеЛьготы.Квартира,
	|	втНазначенныеЛьготы.КоличествоКомнат,
	|	втНазначенныеЛьготы.KAT_LG,
	|	втНазначенныеЛьготы.N_Upr,
	|	втНазначенныеЛьготы.ВидСобственности,
	|	втНазначенныеЛьготы.ЛьготнаяКатегория,
	|	втНазначенныеЛьготы.Услуга,
	|	втНазначенныеЛьготы.Площадь,
	|	втНазначенныеЛьготы.КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втНачисленныеЛьготы
	|ИЗ
	|	втНазначенныеЛьготы КАК втНазначенныеЛьготы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_НачисленныеЛьготы.Обороты(
	|				&ДатаНач,
	|				&ДатаКон,
	|				Месяц,
	|				Организация = &Организация
	|					И Услуга В (&ТаблицаУслугОтбор)) КАК КВП_НачисленныеЛьготыОбороты
	|		ПО втНазначенныеЛьготы.Проживающий = КВП_НачисленныеЛьготыОбороты.Проживающий
	|			И втНазначенныеЛьготы.ЛьготнаяКатегория = КВП_НачисленныеЛьготыОбороты.ЛьготнаяКатегория
	|			И втНазначенныеЛьготы.Услуга = КВП_НачисленныеЛьготыОбороты.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачисленныеЛьготы.СуммаНачисленияОборот,
	|	втНачисленныеЛьготы.Организация,
	|	втНачисленныеЛьготы.Проживающий,
	|	втНачисленныеЛьготы.ЛицевойСчет,
	|	втНачисленныеЛьготы.Фамилия,
	|	втНачисленныеЛьготы.Имя,
	|	втНачисленныеЛьготы.Отчество,
	|	втНачисленныеЛьготы.НаселенныйПункт,
	|	втНачисленныеЛьготы.Улица,
	|	втНачисленныеЛьготы.Дом,
	|	втНачисленныеЛьготы.Корпус,
	|	втНачисленныеЛьготы.Квартира,
	|	втНачисленныеЛьготы.КоличествоКомнат,
	|	втНачисленныеЛьготы.KAT_LG,
	|	втНачисленныеЛьготы.N_Upr,
	|	втНачисленныеЛьготы.ВидСобственности,
	|	втНачисленныеЛьготы.ЛьготнаяКатегория,
	|	втНачисленныеЛьготы.Услуга,
	|	втНачисленныеЛьготы.Площадь,
	|	втНачисленныеЛьготы.КоличествоЗарегистрированных,
	|	ЕСТЬNULL(втТаблицаВидовСобственности.Код, 0) КАК КодВидаСобственности,
	|	ЕСТЬNULL(втТаблицаОрганизаций.Код, 0) КАК КодОрганизации,
	|	ЕСТЬNULL(втТаблицаУслуг.Код, 0) КАК КодУслуги
	|ПОМЕСТИТЬ втСведенияОЛьготахСданными
	|ИЗ
	|	втНачисленныеЛьготы КАК втНачисленныеЛьготы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаВидовСобственности КАК втТаблицаВидовСобственности
	|		ПО втНачисленныеЛьготы.ВидСобственности = втТаблицаВидовСобственности.ВидСобственности
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаОрганизаций КАК втТаблицаОрганизаций
	|		ПО втНачисленныеЛьготы.Организация = втТаблицаОрганизаций.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаУслуг КАК втТаблицаУслуг
	|		ПО втНачисленныеЛьготы.Услуга = втТаблицаУслуг.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСведенияИзФайла.KOD_R,
	|	втСведенияИзФайла.LCHET,
	|	втСведенияИзФайла.SNILS,
	|	втСведенияОЛьготахСданными.ЛицевойСчет КАК ЛицевойСчет,
	|	"""" КАК NCHET,
	|	втСведенияИзФайла.FAM,
	|	втСведенияИзФайла.IM,
	|	втСведенияИзФайла.OT,
	|	втСведенияИзФайла.D_ROGD,
	|	втСведенияИзФайла.POST,
	|	втСведенияИзФайла.HOUSE,
	|	втСведенияИзФайла.KORP,
	|	втСведенияИзФайла.FLAT,
	|	втСведенияИзФайла.N_ROOM,
	|	втСведенияОЛьготахСданными.КодВидаСобственности КАК K_FLAT,
	|	втСведенияОЛьготахСданными.ВидСобственности,
	|	втСведенияОЛьготахСданными.КоличествоКомнат КАК Q_ROOM,
	|	втСведенияОЛьготахСданными.Площадь КАК S_FLAT,
	|	втСведенияОЛьготахСданными.КоличествоЗарегистрированных КАК Q_PROJ,
	|	втСведенияОЛьготахСданными.ЛьготнаяКатегория,
	|	втСведенияИзФайла.KAT_LG,
	|	втСведенияИзФайла.PRIZNAK,
	|	втСведенияИзФайла.D_PRAVO,
	|	втСведенияОЛьготахСданными.КодОрганизации КАК ORG_PLAT,
	|	"""" КАК PERIOD,
	|	втСведенияИзФайла.C,
	|	втСведенияИзФайла.DO,
	|	втСведенияОЛьготахСданными.КодУслуги КАК K_USL,
	|	втСведенияОЛьготахСданными.Услуга,
	|	втСведенияОЛьготахСданными.СуммаНачисленияОборот КАК SUMMA,
	|	втСведенияОЛьготахСданными.Проживающий,
	|	втСведенияИзФайла.LC_ID,
	|	втСведенияИзФайла.PUNKT_NM,
	|	втСведенияИзФайла.STREET_NM,
	|	втСведенияОЛьготахСданными.N_Upr КАК N_UPR,
	|	втСведенияИзФайла.K_CODE,
	|	втСведенияИзФайла.Q_EDKJ,
	|	втСведенияИзФайла.Q_EDKK,
	|	втСведенияИзФайла.Q_IJD,
	|	втСведенияИзФайла.Q_OUT,
	|	втСведенияИзФайла.F_CODE
	|ПОМЕСТИТЬ втИтоговая
	|ИЗ
	|	втСведенияИзФайла КАК втСведенияИзФайла
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОЛьготахСданными КАК втСведенияОЛьготахСданными
	|		ПО втСведенияИзФайла.FAM = втСведенияОЛьготахСданными.Фамилия
	|			И втСведенияИзФайла.IM = втСведенияОЛьготахСданными.Имя
	|			И втСведенияИзФайла.OT = втСведенияОЛьготахСданными.Отчество
	|			И втСведенияИзФайла.KAT_LG = втСведенияОЛьготахСданными.KAT_LG
	|			И втСведенияИзФайла.FLAT = втСведенияОЛьготахСданными.Квартира
	|			И втСведенияИзФайла.KORP = втСведенияОЛьготахСданными.Корпус
	|			И втСведенияИзФайла.HOUSE = втСведенияОЛьготахСданными.Дом
	|			И втСведенияИзФайла.STREET_NM = втСведенияОЛьготахСданными.Улица
	|			И втСведенияИзФайла.PUNKT_NM = втСведенияОЛьготахСданными.НаселенныйПункт
	|
	|СГРУППИРОВАТЬ ПО
	|	втСведенияИзФайла.KOD_R,
	|	втСведенияИзФайла.LCHET,
	|	втСведенияИзФайла.SNILS,
	|	втСведенияОЛьготахСданными.ЛицевойСчет,
	|	втСведенияИзФайла.FAM,
	|	втСведенияИзФайла.IM,
	|	втСведенияИзФайла.OT,
	|	втСведенияИзФайла.D_ROGD,
	|	втСведенияИзФайла.POST,
	|	втСведенияИзФайла.HOUSE,
	|	втСведенияИзФайла.KORP,
	|	втСведенияИзФайла.FLAT,
	|	втСведенияИзФайла.N_ROOM,
	|	втСведенияОЛьготахСданными.КодВидаСобственности,
	|	втСведенияОЛьготахСданными.ВидСобственности,
	|	втСведенияОЛьготахСданными.КоличествоКомнат,
	|	втСведенияОЛьготахСданными.Площадь,
	|	втСведенияОЛьготахСданными.КоличествоЗарегистрированных,
	|	втСведенияОЛьготахСданными.ЛьготнаяКатегория,
	|	втСведенияИзФайла.KAT_LG,
	|	втСведенияИзФайла.PRIZNAK,
	|	втСведенияИзФайла.D_PRAVO,
	|	втСведенияОЛьготахСданными.КодОрганизации,
	|	втСведенияИзФайла.C,
	|	втСведенияИзФайла.DO,
	|	втСведенияОЛьготахСданными.КодУслуги,
	|	втСведенияОЛьготахСданными.Услуга,
	|	втСведенияОЛьготахСданными.СуммаНачисленияОборот,
	|	втСведенияОЛьготахСданными.Проживающий,
	|	втСведенияОЛьготахСданными.N_Upr,
	|	втСведенияИзФайла.LC_ID,
	|	втСведенияИзФайла.PUNKT_NM,
	|	втСведенияИзФайла.STREET_NM,
	|	втСведенияИзФайла.K_CODE,
	|	втСведенияИзФайла.Q_EDKJ,
	|	втСведенияИзФайла.Q_EDKK,
	|	втСведенияИзФайла.Q_IJD,
	|	втСведенияИзФайла.Q_OUT,
	|	втСведенияИзФайла.F_CODE
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток КАК СуммаДолга
	|ПОМЕСТИТЬ втДанныеОДолге
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&ДатаОпределенияЗадолженности,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втИтоговая.ЛицевойСчет
	|					ИЗ
	|						втИтоговая КАК втИтоговая)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|ГДЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет,
	|	МАКСИМУМ(КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период) КАК Период
	|ПОМЕСТИТЬ втПериодыЗадолженности
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(
	|			,
	|			&ДатаОпределенияЗадолженности,
	|			Регистратор,
	|			Движения,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втДанныеОДолге.ЛицевойСчет
	|					ИЗ
	|						втДанныеОДолге КАК втДанныеОДолге
	|					ГДЕ
	|						втДанныеОДолге.СуммаДолга > 0)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты
	|ГДЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период < &ДатаОпределенияЗадолженности
	|	И КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияКонечныйОстаток <= 0
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет,
	|	МИНИМУМ(КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период) КАК Период
	|ПОМЕСТИТЬ втПериодыНачалаНачислений
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(
	|			,
	|			&ДатаОпределенияЗадолженности,
	|			Регистратор,
	|			Движения,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втДанныеОДолге.ЛицевойСчет
	|					ИЗ
	|						втДанныеОДолге КАК втДанныеОДолге
	|					ГДЕ
	|						втДанныеОДолге.СуммаДолга > 0)
	|				И НЕ ЛицевойСчет В
	|						(ВЫБРАТЬ
	|							втПериодыЗадолженности.ЛицевойСчет
	|						ИЗ
	|							втПериодыЗадолженности КАК втПериодыЗадолженности)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты
	|ГДЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период < &ДатаОпределенияЗадолженности
	|	И КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияКонечныйОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_ИсторияРаботыСДолжникамиСрезПоследних.Регистратор КАК СудебноеСоглашение,
	|	УПЖКХ_ИсторияРаботыСДолжникамиСрезПоследних.Должник КАК ЛицевойСчет
	|ПОМЕСТИТЬ втСудебныеСоглашения
	|ИЗ
	|	РегистрСведений.УПЖКХ_ИсторияРаботыСДолжниками.СрезПоследних(
	|			&ДатаКон,
	|			Организация = &Организация
	|				И Должник В
	|					(ВЫБРАТЬ
	|						втДанныеОДолге.ЛицевойСчет
	|					ИЗ
	|						втДанныеОДолге КАК втДанныеОДолге)) КАК УПЖКХ_ИсторияРаботыСДолжникамиСрезПоследних
	|ГДЕ
	|	ДОБАВИТЬКДАТЕ(УПЖКХ_ИсторияРаботыСДолжникамиСрезПоследних.Регистратор.ДатаНачалаПлатежей, МЕСЯЦ, УПЖКХ_ИсторияРаботыСДолжникамиСрезПоследних.Регистратор.МесяцевПоСоглашению) > &ДатаКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСудебныеСоглашения.ЛицевойСчет,
	|	втСудебныеСоглашения.СудебноеСоглашение,
	|	ЕСТЬNULL(УПЖКХ_Иск.НаименованиеСудебногоОргана, """") КАК НаименованиеСудебногоОргана,
	|	ЕСТЬNULL(УПЖКХ_Иск.ДатаСуда, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаСуда,
	|	ЕСТЬNULL(УПЖКХ_Иск.НомерПостановления, """") КАК НомерПостановления
	|ПОМЕСТИТЬ втИскиИСудебныеСоглашения
	|ИЗ
	|	втСудебныеСоглашения КАК втСудебныеСоглашения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УПЖКХ_Иск КАК УПЖКХ_Иск
	|		ПО втСудебныеСоглашения.СудебноеСоглашение = УПЖКХ_Иск.СудебноеСоглашение
	|			И втСудебныеСоглашения.ЛицевойСчет = УПЖКХ_Иск.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ГрафикиПлатежейПоЛС.Регистратор КАК СудебноеСоглашение,
	|	КВП_ГрафикиПлатежейПоЛС.ЛицевойСчет,
	|	КВП_ГрафикиПлатежейПоЛС.ДатаПлатежа,
	|	СУММА(КВП_ГрафикиПлатежейПоЛС.Сумма) КАК Сумма
	|ПОМЕСТИТЬ втГрафикиПлатежей
	|ИЗ
	|	РегистрСведений.КВП_ГрафикиПлатежейПоЛС КАК КВП_ГрафикиПлатежейПоЛС
	|ГДЕ
	|	(КВП_ГрафикиПлатежейПоЛС.Регистратор, КВП_ГрафикиПлатежейПоЛС.ЛицевойСчет) В
	|			(ВЫБРАТЬ
	|				втИскиИСудебныеСоглашения.СудебноеСоглашение,
	|				втИскиИСудебныеСоглашения.ЛицевойСчет
	|			ИЗ
	|				втИскиИСудебныеСоглашения КАК втИскиИСудебныеСоглашения)
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ГрафикиПлатежейПоЛС.Регистратор,
	|	КВП_ГрафикиПлатежейПоЛС.ЛицевойСчет,
	|	КВП_ГрафикиПлатежейПоЛС.ДатаПлатежа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГрафикиПлатежей.СудебноеСоглашение,
	|	втГрафикиПлатежей.ЛицевойСчет,
	|	СУММА(втГрафикиПлатежей.Сумма) КАК СуммаПлановая,
	|	СУММА(ЕСТЬNULL(КВП_РегистрацияОплатыЛицевыеСчета.СуммаПоГрафику, 0)) КАК СуммаФактическая
	|ПОМЕСТИТЬ втФактическиеСуммыОплат
	|ИЗ
	|	втГрафикиПлатежей КАК втГрафикиПлатежей
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КВП_РегистрацияОплаты.ЛицевыеСчета КАК КВП_РегистрацияОплатыЛицевыеСчета
	|		ПО втГрафикиПлатежей.ЛицевойСчет = КВП_РегистрацияОплатыЛицевыеСчета.Объект
	|			И (НАЧАЛОПЕРИОДА(втГрафикиПлатежей.ДатаПлатежа, МЕСЯЦ) = НАЧАЛОПЕРИОДА(КВП_РегистрацияОплатыЛицевыеСчета.Ссылка.Дата, МЕСЯЦ))
	|
	|СГРУППИРОВАТЬ ПО
	|	втГрафикиПлатежей.СудебноеСоглашение,
	|	втГрафикиПлатежей.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИскиИСудебныеСоглашения.ЛицевойСчет,
	|	втИскиИСудебныеСоглашения.СудебноеСоглашение,
	|	втИскиИСудебныеСоглашения.НаименованиеСудебногоОргана,
	|	втИскиИСудебныеСоглашения.ДатаСуда,
	|	втИскиИСудебныеСоглашения.НомерПостановления,
	|	ЕСТЬNULL(втФактическиеСуммыОплат.СуммаПлановая, 0) КАК СуммаПлановая,
	|	ЕСТЬNULL(втФактическиеСуммыОплат.СуммаФактическая, 0) КАК СуммаФактическая
	|ПОМЕСТИТЬ втСтруктураЗадолженности
	|ИЗ
	|	втИскиИСудебныеСоглашения КАК втИскиИСудебныеСоглашения
	|		ЛЕВОЕ СОЕДИНЕНИЕ втФактическиеСуммыОплат КАК втФактическиеСуммыОплат
	|		ПО втИскиИСудебныеСоглашения.ЛицевойСчет = втФактическиеСуммыОплат.ЛицевойСчет
	|			И втИскиИСудебныеСоглашения.СудебноеСоглашение = втФактическиеСуммыОплат.СудебноеСоглашение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втИтоговая.KOD_R,
	|	втИтоговая.LCHET,
	|	втИтоговая.SNILS,
	|	втИтоговая.NCHET,
	|	втИтоговая.FAM,
	|	втИтоговая.IM,
	|	втИтоговая.OT,
	|	втИтоговая.D_ROGD,
	|	втИтоговая.POST,
	|	втИтоговая.HOUSE,
	|	втИтоговая.KORP,
	|	втИтоговая.FLAT,
	|	втИтоговая.N_ROOM,
	|	втИтоговая.K_FLAT,
	|	втИтоговая.Q_ROOM,
	|	втИтоговая.S_FLAT,
	|	втИтоговая.Q_PROJ,
	|	втИтоговая.KAT_LG КАК KAT_LG,
	|	втИтоговая.PRIZNAK,
	|	втИтоговая.D_PRAVO,
	|	втИтоговая.ORG_PLAT,
	|	втИтоговая.PERIOD,
	|	втИтоговая.C,
	|	втИтоговая.DO,
	|	втИтоговая.K_USL,
	|	МИНИМУМ(втИтоговая.Услуга) КАК Услуга,
	|	СУММА(втИтоговая.SUMMA) КАК SUMMA,
	|	втИтоговая.Проживающий КАК Проживающий,
	|	втИтоговая.ЛицевойСчет,
	|	втИтоговая.ВидСобственности,
	|	втИтоговая.ЛьготнаяКатегория,
	|	МИНИМУМ(0) КАК P_DOLG,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втПериодыЗадолженности.Период, ЕСТЬNULL(втПериодыНачалаНачислений.Период, ДАТАВРЕМЯ(1, 1, 1))) = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА втПериодыЗадолженности.Период ЕСТЬ NULL
	|					ТОГДА РАЗНОСТЬДАТ(втПериодыНачалаНачислений.Период, &ДатаКон, МЕСЯЦ)
	|				ИНАЧЕ ВЫБОР
	|						КОГДА втПериодыЗадолженности.Период > &ДатаКон
	|							ТОГДА 0
	|						ИНАЧЕ РАЗНОСТЬДАТ(втПериодыЗадолженности.Период, &ДатаКон, МЕСЯЦ)
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоМесяцевЗадолженности,
	|	ВЫБОР
	|		КОГДА втСтруктураЗадолженности.СудебноеСоглашение ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ втСтруктураЗадолженности.СуммаФактическая > 0
	|					ТОГДА 1
	|				ИНАЧЕ ВЫБОР
	|						КОГДА втСтруктураЗадолженности.СуммаПлановая > 0
	|							ТОГДА 2
	|						ИНАЧЕ 3
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК СтруктураСоглашения,
	|	ЕСТЬNULL(втДанныеОДолге.СуммаДолга, 0) КАК SUMMA_D,
	|	втИтоговая.LC_ID,
	|	втИтоговая.PUNKT_NM,
	|	втИтоговая.STREET_NM,
	|	втИтоговая.N_UPR,
	|	втИтоговая.K_CODE,
	|	втИтоговая.Q_EDKJ,
	|	втИтоговая.Q_EDKK,
	|	втИтоговая.Q_IJD,
	|	втИтоговая.Q_OUT,
	|	втИтоговая.F_CODE
	|ИЗ
	|	втИтоговая КАК втИтоговая
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПериодыЗадолженности КАК втПериодыЗадолженности
	|		ПО втИтоговая.ЛицевойСчет = втПериодыЗадолженности.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПериодыНачалаНачислений КАК втПериодыНачалаНачислений
	|		ПО втИтоговая.ЛицевойСчет = втПериодыНачалаНачислений.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеОДолге КАК втДанныеОДолге
	|		ПО втИтоговая.ЛицевойСчет = втДанныеОДолге.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСтруктураЗадолженности КАК втСтруктураЗадолженности
	|		ПО втИтоговая.ЛицевойСчет = втСтруктураЗадолженности.ЛицевойСчет
	|
	|СГРУППИРОВАТЬ ПО
	|	втИтоговая.KOD_R,
	|	втИтоговая.LCHET,
	|	втИтоговая.SNILS,
	|	втИтоговая.NCHET,
	|	втИтоговая.FAM,
	|	втИтоговая.IM,
	|	втИтоговая.OT,
	|	втИтоговая.D_ROGD,
	|	втИтоговая.POST,
	|	втИтоговая.HOUSE,
	|	втИтоговая.KORP,
	|	втИтоговая.FLAT,
	|	втИтоговая.N_ROOM,
	|	втИтоговая.K_FLAT,
	|	втИтоговая.Q_ROOM,
	|	втИтоговая.S_FLAT,
	|	втИтоговая.Q_PROJ,
	|	втИтоговая.KAT_LG,
	|	втИтоговая.PRIZNAK,
	|	втИтоговая.D_PRAVO,
	|	втИтоговая.ORG_PLAT,
	|	втИтоговая.PERIOD,
	|	втИтоговая.C,
	|	втИтоговая.DO,
	|	втИтоговая.K_USL,
	|	втИтоговая.Проживающий,
	|	втИтоговая.ЛицевойСчет,
	|	втИтоговая.ВидСобственности,
	|	втИтоговая.ЛьготнаяКатегория,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втПериодыЗадолженности.Период, ЕСТЬNULL(втПериодыНачалаНачислений.Период, ДАТАВРЕМЯ(1, 1, 1))) = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА втПериодыЗадолженности.Период ЕСТЬ NULL
	|					ТОГДА РАЗНОСТЬДАТ(втПериодыНачалаНачислений.Период, &ДатаКон, МЕСЯЦ)
	|				ИНАЧЕ ВЫБОР
	|						КОГДА втПериодыЗадолженности.Период > &ДатаКон
	|							ТОГДА 0
	|						ИНАЧЕ РАЗНОСТЬДАТ(втПериодыЗадолженности.Период, &ДатаКон, МЕСЯЦ)
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА втСтруктураЗадолженности.СудебноеСоглашение ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ втСтруктураЗадолженности.СуммаФактическая > 0
	|					ТОГДА 1
	|				ИНАЧЕ ВЫБОР
	|						КОГДА втСтруктураЗадолженности.СуммаПлановая > 0
	|							ТОГДА 2
	|						ИНАЧЕ 3
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ,
	|	ЕСТЬNULL(втДанныеОДолге.СуммаДолга, 0),
	|	втИтоговая.LC_ID,
	|	втИтоговая.PUNKT_NM,
	|	втИтоговая.STREET_NM,
	|	втИтоговая.N_UPR,
	|	втИтоговая.K_CODE,
	|	втИтоговая.Q_EDKJ,
	|	втИтоговая.Q_EDKK,
	|	втИтоговая.Q_IJD,
	|	втИтоговая.Q_OUT,
	|	втИтоговая.F_CODE
	|ИТОГИ ПО
	|	Проживающий,
	|	KAT_LG";
	
	
	Запрос.УстановитьПараметр("ДатаНач",                      НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ДатаКон",                      КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",                  Организация);
	Запрос.УстановитьПараметр("НайденныеЖильцы",              НайденныеЖильцы);
	Запрос.УстановитьПараметр("ТаблицаДанныхИзФайла",         ТаблицаДанныхИзФайла);
	Запрос.УстановитьПараметр("ТаблицаВидовСобственности",    ВологодскаяОбласть_ТаблицаНастройкиВидовСобственности.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаФормУправленияМКД",     ВологодскаяОбласть_ФормыУправленияМКД.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаОрганизаций",           ВологодскаяОбласть_ТаблицаНастройкиКодовОрганизаций.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаУслуг",                 ВологодскаяОбласть_ТаблицаНастройкиУслуг.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаЛьготныхКатегорий",     ВологодскаяОбласть_ТаблицаНастройкиКодовЛьготныхКатегорий.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаУслугОтбор",            ВологодскаяОбласть_ТаблицаНастройкиУслуг.Выгрузить(, "Услуга"));
	Запрос.УстановитьПараметр("ДатаОпределенияЗадолженности", ДатаСрокОплаты());
	
	Запрос.УстановитьПараметр("УказыватьКоличествоПрожИЗарегЧислами", Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Получить());
	
	Результат = Запрос.Выполнить();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ВЫГРУЗКИ ДЛЯ СВЕРДЛОВСКОЙ ОБЛАСТИ

#Область СвердловскаяОбласть

// Формирует таблицу всех выгружаемых данных.
//
Процедура СформироватьТаблицуДанныхСвердловскВерсия6(ТаблицаДанныхФайла, Кодировка, СписокФайлов, ПараметрыБлагоустройств, мУчитыватьВидыТарифовУслуг) Экспорт
	
	Для Каждого ФайлЗагрузки Из СписокФайлов Цикл
		
		// Загрузка.
		ФайлДБФ = Новый XBase;
		ФайлДБФ.Кодировка = Кодировка;
		ФайлДБФ.ОткрытьФайл(ФайлЗагрузки, , Истина);
		Если ФайлДБФ.Открыта() = Истина Тогда
			
			ТаблицаДанныхФайла.Очистить();
			
			Если ФайлДБФ.КоличествоЗаписей() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Пока НЕ ФайлДБФ.ВКонце() Цикл
				
				НоваяСтрокаЗагрузки = ТаблицаДанныхФайла.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаЗагрузки, ФайлДБФ);
				НоваяСтрокаЗагрузки.LASTNAME   = ВРег(СокрЛП(ФайлДБФ.LASTNAME));
				НоваяСтрокаЗагрузки.FIRSTNAME  = ВРег(СокрЛП(ФайлДБФ.FIRSTNAME));
				НоваяСтрокаЗагрузки.MIDDLENAME = ВРег(СокрЛП(ФайлДБФ.MIDDLENAME));
				НоваяСтрокаЗагрузки.CITY       = ВРег(СокрЛП(ФайлДБФ.CITY));
				НоваяСтрокаЗагрузки.STREET     = ВРег(СокрЛП(ФайлДБФ.STREET));
				НоваяСтрокаЗагрузки.HOUSE      = СокрЛП(Строка(ФайлДБФ.HOUSE));
				НоваяСтрокаЗагрузки.BUILDING   = СокрЛП(ФайлДБФ.BUILDING);
				
				Попытка
					НоваяСтрокаЗагрузки.FLAT = Число(СокрЛП(ФайлДБФ.FLAT));
					
				Исключение
					Если ПустаяСтрока(ФайлДБФ.FLAT) Тогда
						// Установим номер квартиры 1, т.к. в данном случае могут быть загружены частные дома из файлы ОСЗН.
						НоваяСтрокаЗагрузки.FLAT = 1;
						
					Иначе
						// Если номер квартиры составной и имеет суффикс, то находим код помещения.
						// Чтобы найти код помещения в строке находим первый числовой символ и расширяем подстроку пока не будет получена буква или знак.
						ДлинаСтроки = СтрДлина(СокрЛП(ФайлДБФ.FLAT));
						ПервыйСимволЧисла = "";
						
						Для НомерСимвола = 1 По ДлинаСтроки Цикл
							Символ = Сред(ФайлДБФ.FLAT, НомерСимвола, 1);
							Если КодСимвола(Символ) > 47 И КодСимвола(Символ) < 58 И ПустаяСтрока(ПервыйСимволЧисла) Тогда
								ПервыйСимволЧисла = НомерСимвола;
								Если НомерСимвола = ДлинаСтроки Тогда
									ПоследнийСимволЧисла = НомерСимвола + 1;
									Прервать;
								КонецЕсли;
							ИначеЕсли НЕ ПустаяСтрока(ПервыйСимволЧисла) И (КодСимвола(Символ) <= 47 ИЛИ КодСимвола(Символ) >= 58) Тогда
								ПоследнийСимволЧисла = НомерСимвола;
								Прервать;
							ИначеЕсли НЕ ПустаяСтрока(ПервыйСимволЧисла) И КодСимвола(Символ) > 47 И КодСимвола(Символ) < 58 И НомерСимвола = ДлинаСтроки Тогда
								ПоследнийСимволЧисла = НомерСимвола + 1;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						НоваяСтрокаЗагрузки.FLAT = Число(Сред(ФайлДБФ.FLAT, ПервыйСимволЧисла, ПоследнийСимволЧисла - ПервыйСимволЧисла));
						
					КонецЕсли;
				КонецПопытки;
				
				НоваяСтрокаЗагрузки.SNILS = СокрЛП(ФайлДБФ.SNILS);
				ФайлДБФ.Следующая();
			КонецЦикла;
			
		КонецЕсли;
		
		ФайлДБФ.ЗакрытьФайл();
		
		ТаблицаАдресов = ПолучитьАдресаВсехЗданийСвердловск();
		ТаблицаФИО     = ПолучитьФИОФизЛиц();
		ПолучитьТаблицуНачисленийСвердловск(ТаблицаДанныхФайла, ТаблицаАдресов, ТаблицаФИО, ПараметрыБлагоустройств, мУчитыватьВидыТарифовУслуг);
		
	КонецЦикла;
	
КонецПроцедуры

// Получает таблицу значений с адресами зданий.
//
Функция ПолучитьАдресаВсехЗданийСвердловск()
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	втКонтактнаяИнформация.Объект КАК Здание,
	|	ВЫБОР
	|		КОГДА НЕ втКонтактнаяИнформация.НаселенныйПункт = """"
	|			ТОГДА втКонтактнаяИнформация.НаселенныйПункт
	|		КОГДА НЕ втКонтактнаяИнформация.Город = """"
	|			ТОГДА втКонтактнаяИнформация.Город
	|		ИНАЧЕ втКонтактнаяИнформация.Регион
	|	КОНЕЦ КАК НаселенныйПункт,
	|	втКонтактнаяИнформация.Улица,
	|	втКонтактнаяИнформация.Дом,
	|	втКонтактнаяИнформация.Корпус
	|ИЗ
	|	втКонтактнаяИнформация КАК втКонтактнаяИнформация";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	МассивСокрНасПункт = СформироватьМассивСокращениеДляСвердловскойОблПоВиду(4);
	МассивСокрУлицы    = СформироватьМассивСокращениеДляСвердловскойОблПоВиду(5);
	
	Для Каждого СтрокаЗдания ИЗ Результат Цикл
		СтрокаЗдания.НаселенныйПункт = ВРег(НормализацияПолейАдресаОбласти(СтрокаЗдания.НаселенныйПункт, МассивСокрНасПункт));
		СтрокаЗдания.Улица           = ВРег(НормализацияПолейАдресаОбласти(СтрокаЗдания.Улица, МассивСокрУлицы));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьАдресаВсехЗданийСвердловск()

// Формирует массив сокращений для Свердловской области для выбранного вида сокращения.
//
Функция СформироватьМассивСокращениеДляСвердловскойОблПоВиду(ВидСокращение)
		
	МассивСокращений = Новый Массив;
	// Для регионов.
	Если ВидСокращение = 1 Тогда
		МассивСокращений.Добавить("обл");
		// Для районов.
	ИначеЕсли ВидСокращение = 2 Тогда
		МассивСокращений.Добавить("р-н");
		// Для городов.
	ИначеЕсли ВидСокращение = 3 Тогда
		МассивСокращений.Добавить("г");
		// Для нас.пунктов.
	ИначеЕсли ВидСокращение = 4 Тогда
		МассивСокращений.Добавить("рп");
		МассивСокращений.Добавить("п");
		МассивСокращений.Добавить("с");
		МассивСокращений.Добавить("д");
		МассивСокращений.Добавить("х");
		МассивСокращений.Добавить("ст");
		МассивСокращений.Добавить("пгт");
		МассивСокращений.Добавить("дп");
		МассивСокращений.Добавить("рзд");
		МассивСокращений.Добавить("мкр");
		МассивСокращений.Добавить("нп");
		МассивСокращений.Добавить("тер");
		МассивСокращений.Добавить("п/ст");
		МассивСокращений.Добавить("промзона");
		МассивСокращений.Добавить("снт");
		МассивСокращений.Добавить("п/о");
		МассивСокращений.Добавить("городок");
		МассивСокращений.Добавить("заимка");
		МассивСокращений.Добавить("кп");
		МассивСокращений.Добавить("ж/д_казарм");
		МассивСокращений.Добавить("г");
		МассивСокращений.Добавить("обл");
		// Для улиц.
	ИначеЕсли ВидСокращение = 5 Тогда
		МассивСокращений.Добавить("ул");
		МассивСокращений.Добавить("тер");
		МассивСокращений.Добавить("пл");
		МассивСокращений.Добавить("пер");
		МассивСокращений.Добавить("снт");
		МассивСокращений.Добавить("проезд");
		МассивСокращений.Добавить("б-р");
		МассивСокращений.Добавить("туп");
		МассивСокращений.Добавить("п");
		МассивСокращений.Добавить("ш");
		МассивСокращений.Добавить("пр-кт");
		МассивСокращений.Добавить("тракт");
		МассивСокращений.Добавить("сквер");
		МассивСокращений.Добавить("ст");
		МассивСокращений.Добавить("наб");
		МассивСокращений.Добавить("км");
		МассивСокращений.Добавить("ж/д_ст");
		МассивСокращений.Добавить("сад");
		МассивСокращений.Добавить("парк");
		МассивСокращений.Добавить("уч-к");
		МассивСокращений.Добавить("мкр");
		МассивСокращений.Добавить("городок");
		МассивСокращений.Добавить("кв-л");
		МассивСокращений.Добавить("нп");
		МассивСокращений.Добавить("остров");
		МассивСокращений.Добавить("гск");
		МассивСокращений.Добавить("линия");
		МассивСокращений.Добавить("рзд");
		МассивСокращений.Добавить("стр");
		МассивСокращений.Добавить("аллея");
		МассивСокращений.Добавить("казарма");
		МассивСокращений.Добавить("ж/д_рзд");
		МассивСокращений.Добавить("д");
		МассивСокращений.Добавить("ж/д_казарм");
		МассивСокращений.Добавить("ж/д_будка");
		МассивСокращений.Добавить("высел");
	КонецЕсли;
	
	Возврат МассивСокращений;
	
КонецФункции // СформироватьМассивСокращениеДляСвердловскойОблПоВиду()

// Получает таблицу данных с начислениями и необходимыми данными.
//
Процедура ПолучитьТаблицуНачисленийСвердловск(ТаблицаДанныхФайла, ТаблицаАдресов, ТаблицаФИО, ПараметрыБлагоустройств, мУчитыватьВидыТарифовУслуг)
	
	ТаблицаИдентифицированныхЖильцов = ПолучитьТаблицуИдентифицированныхЖильцов(ТаблицаДанныхФайла, ТаблицаАдресов, ТаблицаФИО);
	
	Запрос = Новый Запрос;
	
	МенеджерВТ                     = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	// Параметры.
	
	Запрос.УстановитьПараметр("ТаблицаИзФайла",               ТаблицаДанныхФайла);
	Запрос.УстановитьПараметр("ДатаНачала",                   НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ДатаКонца",                    КонецМесяца(Период));
	Запрос.УстановитьПараметр("ДатаОпределенияЗадолженности", ДатаОпределенияЗадолженности);
	Запрос.УстановитьПараметр("Организация",                  Организация);
	Запрос.УстановитьПараметр("ТаблицаИдентифЖильцов",        ТаблицаИдентифицированныхЖильцов);
	Запрос.УстановитьПараметр("ТаблицаУслуг",                 СвердловскаяОбласть_УслугиВБазе.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаЛКДетейСирот",          СвердловскаяОбласть_ЛьготныеКатегорииДетейСирот.Выгрузить());
	Запрос.УстановитьПараметр("УслугиБезОДН",                 УслугиБезОДН.Выгрузить());
	
	Запрос.УстановитьПараметр("Душ",                  ПараметрыБлагоустройств.НаличиеДуша);
	Запрос.УстановитьПараметр("СистемаПроживания",    ПараметрыБлагоустройств.КоридорнаяСистемаПроживания);
	Запрос.УстановитьПараметр("Яма",                  ПараметрыБлагоустройств.НаличиеВыгребнойЯмы);
	Запрос.УстановитьПараметр("ТипОтопления",         ПараметрыБлагоустройств.ТипОтопления);
	Запрос.УстановитьПараметр("Водонагреватель",      ПараметрыБлагоустройств.ТипВодонагревателя);
	Запрос.УстановитьПараметр("Газоснабжение",        ПараметрыБлагоустройств.Газоснабжение);
	Запрос.УстановитьПараметр("РасположениеДуша",     ПараметрыБлагоустройств.МестоРасположенияДуша);
	Запрос.УстановитьПараметр("УчитыватьВидыТарифов", мУчитыватьВидыТарифовУслуг);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИзФайла.OVERDATE КАК Дата,
	|	ТаблицаИзФайла.ID КАК ИД,
	|	ТаблицаИзФайла.LASTNAME КАК Фамилия,
	|	ТаблицаИзФайла.FIRSTNAME КАК Имя,
	|	ТаблицаИзФайла.MIDDLENAME КАК Отчество,
	|	ТаблицаИзФайла.CITY КАК Город,
	|	ТаблицаИзФайла.STREET КАК Улица,
	|	ТаблицаИзФайла.HOUSE КАК Дом,
	|	ТаблицаИзФайла.BUILDING КАК Корпус,
	|	ТаблицаИзФайла.FLAT КАК Квартира,
	|	ТаблицаИзФайла.SNILS КАК СНИЛС
	|ПОМЕСТИТЬ втТаблицаДанныхИзФайла
	|ИЗ
	|	&ТаблицаИзФайла КАК ТаблицаИзФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУслуг.ИдентификаторУслугиВОСЗН,
	|	ТаблицаУслуг.УслугаВБазе,
	|	ТаблицаУслуг.ВидТарифа
	|ПОМЕСТИТЬ втУслуги
	|ИЗ
	|	&ТаблицаУслуг КАК ТаблицаУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУслугБезОДН.Услуга КАК Услуга
	|ПОМЕСТИТЬ втТаблицаУслугБезОДН
	|ИЗ
	|	&УслугиБезОДН КАК ТаблицаУслугБезОДН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаИдентифЖильцов.Проживающий,
	|	ТаблицаИдентифЖильцов.ЛицевойСчет,
	|	ТаблицаИдентифЖильцов.Фамилия,
	|	ТаблицаИдентифЖильцов.Имя,
	|	ТаблицаИдентифЖильцов.Отчество,
	|	ТаблицаИдентифЖильцов.Город,
	|	ТаблицаИдентифЖильцов.Улица,
	|	ТаблицаИдентифЖильцов.Дом,
	|	ТаблицаИдентифЖильцов.Корпус,
	|	ТаблицаИдентифЖильцов.Квартира
	|ПОМЕСТИТЬ втИдентифицированныеЖильцы
	|ИЗ
	|	&ТаблицаИдентифЖильцов КАК ТаблицаИдентифЖильцов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЛКДетейСирот.ЛьготнаяКатегория
	|ПОМЕСТИТЬ втЛКДетейСирот
	|ИЗ
	|	&ТаблицаЛКДетейСирот КАК ТаблицаЛКДетейСирот
	|ГДЕ
	|	НЕ ТаблицаЛКДетейСирот.ЛьготнаяКатегория = ЗНАЧЕНИЕ(Справочник.КВП_ЛьготныеКатегории.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий,
	|	КВП_НазначенныеЛьготыСрезПоследних.ЛьготнаяКатегория
	|ПОМЕСТИТЬ втНазначенныеЛьготыДетейСирот
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(
	|			&ДатаКонца,
	|			Проживающий В
	|					(ВЫБРАТЬ
	|						втИдентифицированныеЖильцы.Проживающий
	|					ИЗ
	|						втИдентифицированныеЖильцы КАК втИдентифицированныеЖильцы)
	|				И ЛьготнаяКатегория В
	|					(ВЫБРАТЬ
	|						втЛКДетейСирот.ЛьготнаяКатегория
	|					ИЗ
	|						втЛКДетейСирот КАК втЛКДетейСирот)
	|				И ДатаИзменения <= &ДатаКонца) КАК КВП_НазначенныеЛьготыСрезПоследних
	|ГДЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.Действие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИдентифицированныеЖильцы.ЛицевойСчет,
	|	втИдентифицированныеЖильцы.Проживающий,
	|	втНазначенныеЛьготыДетейСирот.ЛьготнаяКатегория
	|ПОМЕСТИТЬ втЛицевыеСчетаСЛКДетейСирот
	|ИЗ
	|	втИдентифицированныеЖильцы КАК втИдентифицированныеЖильцы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНазначенныеЛьготыДетейСирот КАК втНазначенныеЛьготыДетейСирот
	|		ПО втИдентифицированныеЖильцы.Проживающий = втНазначенныеЛьготыДетейСирот.Проживающий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Владелец КАК Здание,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Адрес КАК Помещение,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Адрес.КоличествоКомнат КАК ПомещениеКоличествоКомнат,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Владелец.ПлощадьЗданияЖилыхНежилыхПомещений КАК ПлощадьЖилыхНежилыхПомещений,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Владелец.ПлощадьЗданияМестОбщегоПользования КАК ПлощадьМестОбщегоПользования
	|ПОМЕСТИТЬ втЛицевыеСчетаПодготовка
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втИдентифицированныеЖильцы.ЛицевойСчет
	|				ИЗ
	|					втИдентифицированныеЖильцы КАК втИдентифицированныеЖильцы)) КАК КВП_ЛицевыеСчетаСрезПоследних
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.ЛицевойСчет,
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.КоличествоЗарегистрированных,
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.КоличествоПроживающих
	|ПОМЕСТИТЬ втУчетКоличестваЖильцов
	|ИЗ
	|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втЛицевыеСчетаПодготовка.ЛицевойСчет
	|				ИЗ
	|					втЛицевыеСчетаПодготовка КАК втЛицевыеСчетаПодготовка)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛицевыеСчетаПодготовка.ЛицевойСчет,
	|	втЛицевыеСчетаПодготовка.Здание,
	|	втЛицевыеСчетаПодготовка.Помещение,
	|	втЛицевыеСчетаПодготовка.ПомещениеКоличествоКомнат,
	|	втЛицевыеСчетаПодготовка.ПлощадьЖилыхНежилыхПомещений,
	|	втЛицевыеСчетаПодготовка.ПлощадьМестОбщегоПользования,
	|	ЕСТЬNULL(втУчетКоличестваЖильцов.КоличествоЗарегистрированных, 0) КАК КоличествоЗарегистрированных,
	|	ЕСТЬNULL(втУчетКоличестваЖильцов.КоличествоПроживающих, 0) КАК КоличествоПроживающих
	|ПОМЕСТИТЬ втЛицевыеСчета
	|ИЗ
	|	втЛицевыеСчетаПодготовка КАК втЛицевыеСчетаПодготовка
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУчетКоличестваЖильцов КАК втУчетКоличестваЖильцов
	|		ПО втЛицевыеСчетаПодготовка.ЛицевойСчет = втУчетКоличестваЖильцов.ЛицевойСчет";
	
	Запрос.Выполнить();
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НачисленныеЛьготыОбороты.ЛицевойСчет,
	|	КВП_НачисленныеЛьготыОбороты.Услуга,
	|	СУММА(КВП_НачисленныеЛьготыОбороты.СуммаНачисленияОборот) КАК СуммаНачисления,
	|	СУММА(КВП_НачисленныеЛьготыОбороты.КоличествоОборот) КАК Количество
	|ПОМЕСТИТЬ втНачисленныеЛьготыДетямСиротам
	|ИЗ
	|	РегистрНакопления.КВП_НачисленныеЛьготы.Обороты(
	|			&ДатаНачала,
	|			&ДатаКонца,
	|			Запись,
	|			(ЛицевойСчет, ЛьготнаяКатегория) В
	|					(ВЫБРАТЬ
	|						втЛицевыеСчетаСЛКДетейСирот.ЛицевойСчет,
	|						втЛицевыеСчетаСЛКДетейСирот.ЛьготнаяКатегория
	|					ИЗ
	|						втЛицевыеСчетаСЛКДетейСирот КАК втЛицевыеСчетаСЛКДетейСирот)
	|				И Организация = &Организация) КАК КВП_НачисленныеЛьготыОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_НачисленныеЛьготыОбороты.ЛицевойСчет,
	|	КВП_НачисленныеЛьготыОбороты.Услуга";
	
	Запрос.Выполнить();
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение,
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности
	|ПОМЕСТИТЬ втСобственностьНаПомещение
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственностьНаПомещения.СрезПоследних(
	|			&ДатаКонца,
	|			Помещение В
	|				(ВЫБРАТЬ
	|					втЛицевыеСчета.Помещение
	|				ИЗ
	|					втЛицевыеСчета КАК втЛицевыеСчета)) КАК УПЖКХ_СобственностьНаПомещенияСрезПоследних
	|ГДЕ
	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Помещение,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ОснованиеПолученияВСобственность
	|ПОМЕСТИТЬ втСобственникиПомещений
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(
	|			&ДатаКонца,
	|			Помещение В
	|				(ВЫБРАТЬ
	|					втЛицевыеСчета.Помещение
	|				ИЗ
	|					втЛицевыеСчета КАК втЛицевыеСчета)) КАК УПЖКХ_СобственникиПомещенийСрезПоследних
	|ГДЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втСобственностьНаПомещение.Помещение,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втСобственностьНаПомещение.ВидСобственности = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Частная)
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(втСобственникиПомещений.ОснованиеПолученияВСобственность, ЗНАЧЕНИЕ(Справочник.УПЖКХ_ОснованияПолученияВСобственностьПомещений.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ОснованияПолученияВСобственностьПомещений.Покупка)
	|							ТОГДА 0
	|						ИНАЧЕ 1
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА втСобственностьНаПомещение.ВидСобственности В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Муниципальная), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Государственная), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.Ведомственная))
	|						ТОГДА 2
	|					ИНАЧЕ -1
	|				КОНЕЦ
	|		КОНЕЦ) КАК ФормаСобственности
	|ПОМЕСТИТЬ втВидСобственности
	|ИЗ
	|	втСобственностьНаПомещение КАК втСобственностьНаПомещение
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСобственникиПомещений КАК втСобственникиПомещений
	|		ПО втСобственностьНаПомещение.Помещение = втСобственникиПомещений.Помещение
	|
	|СГРУППИРОВАТЬ ПО
	|	втСобственностьНаПомещение.Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛицевыеСчета.ЛицевойСчет,
	|	втЛицевыеСчета.Помещение,
	|	втЛицевыеСчета.Здание,
	|	втЛицевыеСчета.ПомещениеКоличествоКомнат,
	|	ЕСТЬNULL(втВидСобственности.ФормаСобственности, -1) КАК ФормаСобственности,
	|	втЛицевыеСчета.КоличествоЗарегистрированных,
	|	втЛицевыеСчета.КоличествоПроживающих,
	|	втЛицевыеСчета.ПлощадьЖилыхНежилыхПомещений,
	|	втЛицевыеСчета.ПлощадьМестОбщегоПользования
	|ПОМЕСТИТЬ втСФормойСобственности
	|ИЗ
	|	втЛицевыеСчета КАК втЛицевыеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВидСобственности КАК втВидСобственности
	|		ПО втЛицевыеСчета.Помещение = втВидСобственности.Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втВидСобственности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втСобственностьНаПомещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втСобственникиПомещений";
	
	Запрос.Выполнить();
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект,
	|	КВП_ПлощадьПомещенияСрезПоследних.ВидПлощади,
	|	КВП_ПлощадьПомещенияСрезПоследних.Площадь
	|ПОМЕСТИТЬ втПлощадиПомещений
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|			&ДатаКонца,
	|			Объект В
	|					(ВЫБРАТЬ
	|						втСФормойСобственности.Помещение
	|					ИЗ
	|						втСФормойСобственности КАК втСФормойСобственности)
	|				И ВидПлощади В (ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь), ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь))) КАК КВП_ПлощадьПомещенияСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.Объект,
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет,
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель,
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель,
	|	ВЫБОР
	|		КОГДА КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель = 0
	|			ТОГДА 0
	|		ИНАЧЕ КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель / КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель
	|	КОНЕЦ КАК Доля
	|ПОМЕСТИТЬ втРазмерыДолейЛС
	|ИЗ
	|	РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втСФормойСобственности.ЛицевойСчет
	|				ИЗ
	|					втСФормойСобственности КАК втСФормойСобственности)) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втРазмерыДолейЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втПлощадиПомещений.ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)
	|				ТОГДА ЕСТЬNULL(втПлощадиПомещений.Площадь, 0) * втРазмерыДолейЛС.Доля
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОбщаяПлощадь,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втПлощадиПомещений.ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь)
	|				ТОГДА ЕСТЬNULL(втПлощадиПомещений.Площадь, 0) * втРазмерыДолейЛС.Доля
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЖилаяПлощадь
	|ПОМЕСТИТЬ втДанныеОПлощадях
	|ИЗ
	|	втРазмерыДолейЛС КАК втРазмерыДолейЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПлощадиПомещений КАК втПлощадиПомещений
	|		ПО втРазмерыДолейЛС.Объект = втПлощадиПомещений.Объект
	|
	|СГРУППИРОВАТЬ ПО
	|	втРазмерыДолейЛС.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСФормойСобственности.ЛицевойСчет,
	|	втСФормойСобственности.Помещение,
	|	втСФормойСобственности.Здание,
	|	втСФормойСобственности.ПомещениеКоличествоКомнат,
	|	втСФормойСобственности.ФормаСобственности,
	|	ЕСТЬNULL(втДанныеОПлощадях.ОбщаяПлощадь, 0) КАК ОбщаяПлощадь,
	|	ЕСТЬNULL(втДанныеОПлощадях.ЖилаяПлощадь, 0) КАК ЖилаяПлощадь,
	|	втСФормойСобственности.КоличествоЗарегистрированных,
	|	втСФормойСобственности.КоличествоПроживающих,
	|	втСФормойСобственности.ПлощадьЖилыхНежилыхПомещений,
	|	втСФормойСобственности.ПлощадьМестОбщегоПользования
	|ПОМЕСТИТЬ втДанныеСПлощадями
	|ИЗ
	|	втСФормойСобственности КАК втСФормойСобственности
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеОПлощадях КАК втДанныеОПлощадях
	|		ПО втСФормойСобственности.ЛицевойСчет = втДанныеОПлощадях.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втСФормойСобственности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втДанныеОПлощадях
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втРазмерыДолейЛС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втПлощадиПомещений";
	
	Запрос.Выполнить();
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втДанныеСПлощадями.ЛицевойСчет,
	|	втДанныеСПлощадями.Помещение,
	|	втДанныеСПлощадями.Здание,
	|	втДанныеСПлощадями.ФормаСобственности,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КВП_СостояниеПомещения.КатегорияКвартиры, ЗНАЧЕНИЕ(Перечисление.КВП_КатегорииКвартир.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.КВП_КатегорииКвартир.Коммунальная)
	|			ТОГДА 1
	|		КОГДА ЕСТЬNULL(КВП_СостояниеПомещения.КатегорияКвартиры, ЗНАЧЕНИЕ(Перечисление.КВП_КатегорииКвартир.ПустаяСсылка)) = ЗНАЧЕНИЕ(Перечисление.КВП_КатегорииКвартир.Отдельная)
	|			ТОГДА 0
	|		ИНАЧЕ -1
	|	КОНЕЦ КАК ВидЖилья,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КВП_СостояниеПомещения.КатегорияКвартиры, ЗНАЧЕНИЕ(Перечисление.КВП_КатегорииКвартир.ПустаяСсылка)) В (ЗНАЧЕНИЕ(Перечисление.КВП_КатегорииКвартир.ОбщежитиеКоридорногоТипа), ЗНАЧЕНИЕ(Перечисление.КВП_КатегорииКвартир.Общежитие))
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПризнакОбщежития,
	|	втДанныеСПлощадями.ПомещениеКоличествоКомнат,
	|	втДанныеСПлощадями.ОбщаяПлощадь,
	|	втДанныеСПлощадями.ЖилаяПлощадь,
	|	втДанныеСПлощадями.КоличествоЗарегистрированных,
	|	втДанныеСПлощадями.КоличествоПроживающих,
	|	втДанныеСПлощадями.ПлощадьЖилыхНежилыхПомещений,
	|	втДанныеСПлощадями.ПлощадьМестОбщегоПользования
	|ПОМЕСТИТЬ втДанныеССостояниямиПомещений
	|ИЗ
	|	втДанныеСПлощадями КАК втДанныеСПлощадями
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_СостояниеПомещения КАК КВП_СостояниеПомещения
	|		ПО втДанныеСПлощадями.Помещение = КВП_СостояниеПомещения.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втДанныеСПлощадями
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втДанныеССостояниямиПомещений.ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_Помещения.Ссылка) КАК Доля
	|ПОМЕСТИТЬ втДанныеИзСправочника
	|ИЗ
	|	втДанныеССостояниямиПомещений КАК втДанныеССостояниямиПомещений
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
	|		ПО втДанныеССостояниямиПомещений.Помещение = УПЖКХ_Помещения.Родитель
	|ГДЕ
	|	НЕ УПЖКХ_Помещения.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	втДанныеССостояниямиПомещений.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втДанныеССостояниямиПомещений.ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.Комната) КАК Доля
	|ПОМЕСТИТЬ втДанныеИзСведений
	|ИЗ
	|	втДанныеССостояниямиПомещений КАК втДанныеССостояниямиПомещений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ПривязанныеКЛицевомуСчетуКомнаты.СрезПоследних(
	|				&ДатаКонца,
	|				ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втДанныеССостояниямиПомещений.ЛицевойСчет
	|					ИЗ
	|						втДанныеССостояниямиПомещений КАК втДанныеССостояниямиПомещений)) КАК УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних
	|		ПО втДанныеССостояниямиПомещений.ЛицевойСчет = УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.ЛицевойСчет
	|ГДЕ
	|	УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.Привязка
	|
	|СГРУППИРОВАТЬ ПО
	|	втДанныеССостояниямиПомещений.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеССостояниямиПомещений.ЛицевойСчет,
	|	втДанныеССостояниямиПомещений.Помещение,
	|	втДанныеССостояниямиПомещений.Здание,
	|	втДанныеССостояниямиПомещений.ФормаСобственности,
	|	втДанныеССостояниямиПомещений.ВидЖилья,
	|	втДанныеССостояниямиПомещений.ПризнакОбщежития,
	|	втДанныеССостояниямиПомещений.ОбщаяПлощадь,
	|	втДанныеССостояниямиПомещений.ЖилаяПлощадь,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НЕ втДанныеИзСведений.Доля = 0
	|				ТОГДА втДанныеИзСведений.Доля
	|			КОГДА НЕ втДанныеИзСправочника.Доля = 0
	|				ТОГДА втДанныеИзСправочника.Доля
	|			ИНАЧЕ втДанныеССостояниямиПомещений.ПомещениеКоличествоКомнат
	|		КОНЕЦ, -1) КАК КоличествоКомнат,
	|	втДанныеССостояниямиПомещений.КоличествоЗарегистрированных,
	|	втДанныеССостояниямиПомещений.КоличествоПроживающих,
	|	втДанныеССостояниямиПомещений.ПлощадьЖилыхНежилыхПомещений,
	|	втДанныеССостояниямиПомещений.ПлощадьМестОбщегоПользования
	|ПОМЕСТИТЬ втДанныеСКомнатами
	|ИЗ
	|	втДанныеССостояниямиПомещений КАК втДанныеССостояниямиПомещений
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеИзСправочника КАК втДанныеИзСправочника
	|		ПО втДанныеССостояниямиПомещений.ЛицевойСчет = втДанныеИзСправочника.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеИзСведений КАК втДанныеИзСведений
	|		ПО втДанныеССостояниямиПомещений.ЛицевойСчет = втДанныеИзСведений.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втДанныеССостояниямиПомещений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втДанныеИзСправочника
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втДанныеИзСведений";
	
	Запрос.Выполнить();
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втДанныеСКомнатами.ЛицевойСчет,
	|	втДанныеСКомнатами.Помещение,
	|	втДанныеСКомнатами.Здание,
	|	втДанныеСКомнатами.ФормаСобственности КАК OWNERSHIP,
	|	втДанныеСКомнатами.ВидЖилья КАК TYPEFLAT,
	|	втДанныеСКомнатами.ПризнакОбщежития КАК ISHOSTEL,
	|	втДанныеСКомнатами.ОбщаяПлощадь КАК AREA,
	|	втДанныеСКомнатами.ЖилаяПлощадь КАК LIVAREA,
	|	втДанныеСКомнатами.КоличествоКомнат КАК ROOMCOUNT,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток, 0) < 0
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток, 0)
	|	КОНЕЦ КАК DEBTSUM,
	|	0 КАК NOTFOUND,
	|	втДанныеСКомнатами.КоличествоЗарегистрированных,
	|	втДанныеСКомнатами.КоличествоПроживающих,
	|	втДанныеСКомнатами.ПлощадьЖилыхНежилыхПомещений КАК SOB,
	|	втДанныеСКомнатами.ПлощадьМестОбщегоПользования КАК SOI
	|ПОМЕСТИТЬ втДанныеБезДопСведенийИПериодаДолга
	|ИЗ
	|	втДанныеСКомнатами КАК втДанныеСКомнатами
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|				&ДатаОпределенияЗадолженности,
	|				Организация = &Организация
	|					И ЛицевойСчет В
	|						(ВЫБРАТЬ
	|							втДанныеСКомнатами.ЛицевойСчет
	|						ИЗ
	|							втДанныеСКомнатами КАК втДанныеСКомнатами)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|		ПО втДанныеСКомнатами.ЛицевойСчет = КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втДанныеСКомнатами";
	
	Запрос.Выполнить();
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет,
	|	МАКСИМУМ(КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период) КАК Период
	|ПОМЕСТИТЬ втПериодыЗадолженности
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(
	|			,
	|			&ДатаОпределенияЗадолженности,
	|			Регистратор,
	|			,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втДанныеБезДопСведенийИПериодаДолга.ЛицевойСчет
	|					ИЗ
	|						втДанныеБезДопСведенийИПериодаДолга КАК втДанныеБезДопСведенийИПериодаДолга
	|					ГДЕ
	|						втДанныеБезДопСведенийИПериодаДолга.DEBTSUM > 0)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты
	|ГДЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период < &ДатаОпределенияЗадолженности
	|	И КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияКонечныйОстаток <= 0
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет";
	
	Запрос.Выполнить();
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_ИсторияРаботыСДолжникамиСрезПоследних.Регистратор КАК СудебноеСоглашение,
	|	УПЖКХ_ИсторияРаботыСДолжникамиСрезПоследних.Должник КАК ЛицевойСчет
	|ПОМЕСТИТЬ втСудебныеСоглашения
	|ИЗ
	|	РегистрСведений.УПЖКХ_ИсторияРаботыСДолжниками.СрезПоследних(
	|			&ДатаКонца,
	|			Организация = &Организация
	|				И Должник В
	|					(ВЫБРАТЬ
	|						втДанныеБезДопСведенийИПериодаДолга.ЛицевойСчет
	|					ИЗ
	|						втДанныеБезДопСведенийИПериодаДолга КАК втДанныеБезДопСведенийИПериодаДолга)) КАК УПЖКХ_ИсторияРаботыСДолжникамиСрезПоследних
	|ГДЕ
	|	ДОБАВИТЬКДАТЕ(УПЖКХ_ИсторияРаботыСДолжникамиСрезПоследних.Регистратор.ДатаНачалаПлатежей, МЕСЯЦ, УПЖКХ_ИсторияРаботыСДолжникамиСрезПоследних.Регистратор.МесяцевПоСоглашению) > &ДатаКонца
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ГрафикиПлатежейПоЛС.Регистратор КАК СудебноеСоглашение,
	|	КВП_ГрафикиПлатежейПоЛС.ЛицевойСчет,
	|	КВП_ГрафикиПлатежейПоЛС.ДатаПлатежа,
	|	СУММА(КВП_ГрафикиПлатежейПоЛС.Сумма) КАК Сумма
	|ПОМЕСТИТЬ втГрафикиПлатежей
	|ИЗ
	|	РегистрСведений.КВП_ГрафикиПлатежейПоЛС КАК КВП_ГрафикиПлатежейПоЛС
	|ГДЕ
	|	(КВП_ГрафикиПлатежейПоЛС.Регистратор, КВП_ГрафикиПлатежейПоЛС.ЛицевойСчет) В
	|			(ВЫБРАТЬ
	|				втСудебныеСоглашения.СудебноеСоглашение,
	|				втСудебныеСоглашения.ЛицевойСчет
	|			ИЗ
	|				втСудебныеСоглашения КАК втСудебныеСоглашения)
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ГрафикиПлатежейПоЛС.Регистратор,
	|	КВП_ГрафикиПлатежейПоЛС.ЛицевойСчет,
	|	КВП_ГрафикиПлатежейПоЛС.ДатаПлатежа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГрафикиПлатежей.СудебноеСоглашение,
	|	втГрафикиПлатежей.ЛицевойСчет,
	|	СУММА(втГрафикиПлатежей.Сумма) КАК СуммаПлановая,
	|	СУММА(ЕСТЬNULL(КВП_РегистрацияОплатыЛицевыеСчета.СуммаПоГрафику, 0)) КАК СуммаФактическая
	|ПОМЕСТИТЬ втФактическиеСуммыОплат
	|ИЗ
	|	втГрафикиПлатежей КАК втГрафикиПлатежей
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КВП_РегистрацияОплаты.ЛицевыеСчета КАК КВП_РегистрацияОплатыЛицевыеСчета
	|		ПО втГрафикиПлатежей.ЛицевойСчет = КВП_РегистрацияОплатыЛицевыеСчета.Объект
	|			И (НАЧАЛОПЕРИОДА(втГрафикиПлатежей.ДатаПлатежа, МЕСЯЦ) = НАЧАЛОПЕРИОДА(КВП_РегистрацияОплатыЛицевыеСчета.Ссылка.Дата, МЕСЯЦ))
	|
	|СГРУППИРОВАТЬ ПО
	|	втГрафикиПлатежей.СудебноеСоглашение,
	|	втГрафикиПлатежей.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСудебныеСоглашения.ЛицевойСчет,
	|	втСудебныеСоглашения.СудебноеСоглашение,
	|	ЕСТЬNULL(втФактическиеСуммыОплат.СуммаПлановая, 0) КАК СуммаПлановая,
	|	ЕСТЬNULL(втФактическиеСуммыОплат.СуммаФактическая, 0) КАК СуммаФактическая
	|ПОМЕСТИТЬ втСтруктураЗадолженности
	|ИЗ
	|	втСудебныеСоглашения КАК втСудебныеСоглашения
	|		ЛЕВОЕ СОЕДИНЕНИЕ втФактическиеСуммыОплат КАК втФактическиеСуммыОплат
	|		ПО втСудебныеСоглашения.ЛицевойСчет = втФактическиеСуммыОплат.ЛицевойСчет
	|			И втСудебныеСоглашения.СудебноеСоглашение = втФактическиеСуммыОплат.СудебноеСоглашение";
	
	Запрос.Выполнить();
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втДанныеБезДопСведенийИПериодаДолга.ЛицевойСчет,
	|	втДанныеБезДопСведенийИПериодаДолга.Помещение,
	|	втДанныеБезДопСведенийИПериодаДолга.Здание,
	|	втДанныеБезДопСведенийИПериодаДолга.OWNERSHIP,
	|	втДанныеБезДопСведенийИПериодаДолга.TYPEFLAT,
	|	втДанныеБезДопСведенийИПериодаДолга.ISHOSTEL,
	|	втДанныеБезДопСведенийИПериодаДолга.AREA,
	|	втДанныеБезДопСведенийИПериодаДолга.LIVAREA,
	|	втДанныеБезДопСведенийИПериодаДолга.ROOMCOUNT,
	|	втДанныеБезДопСведенийИПериодаДолга.DEBTSUM,
	|	ВЫБОР
	|		КОГДА втДанныеБезДопСведенийИПериодаДолга.DEBTSUM > 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК DEBT,
	|	ЕСТЬNULL(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(втПериодыЗадолженности.Период, МЕСЯЦ), СЕКУНДА, 1), ДАТАВРЕМЯ(1, 1, 1)) КАК DEBTDATE,
	|	втДанныеБезДопСведенийИПериодаДолга.NOTFOUND,
	|	ВЫБОР
	|		КОГДА втСтруктураЗадолженности.СудебноеСоглашение ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ втСтруктураЗадолженности.СуммаФактическая > 0
	|					ТОГДА 1
	|				ИНАЧЕ 2
	|			КОНЕЦ
	|	КОНЕЦ КАК DEBTDEAL,
	|	втДанныеБезДопСведенийИПериодаДолга.КоличествоЗарегистрированных,
	|	втДанныеБезДопСведенийИПериодаДолга.КоличествоПроживающих,
	|	втДанныеБезДопСведенийИПериодаДолга.SOB,
	|	втДанныеБезДопСведенийИПериодаДолга.SOI
	|ПОМЕСТИТЬ втДанныеБезДопСведений
	|ИЗ
	|	втДанныеБезДопСведенийИПериодаДолга КАК втДанныеБезДопСведенийИПериодаДолга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПериодыЗадолженности КАК втПериодыЗадолженности
	|		ПО втДанныеБезДопСведенийИПериодаДолга.ЛицевойСчет = втПериодыЗадолженности.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСтруктураЗадолженности КАК втСтруктураЗадолженности
	|		ПО втДанныеБезДопСведенийИПериодаДолга.ЛицевойСчет = втСтруктураЗадолженности.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втДанныеБезДопСведенийИПериодаДолга";
	
	Запрос.Выполнить();
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА КВП_БлагоустройствоОбъектов.ВидБлагоустройства = &СистемаПроживания
	|				ТОГДА ВЫБОР
	|						КОГДА КВП_БлагоустройствоОбъектов.Значение = ""некоридорная""
	|							ТОГДА 0
	|						ИНАЧЕ ВЫБОР
	|								КОГДА КВП_БлагоустройствоОбъектов.Значение = ""коридорная""
	|									ТОГДА 1
	|								ИНАЧЕ -1
	|							КОНЕЦ
	|					КОНЕЦ
	|			ИНАЧЕ -1
	|		КОНЕЦ) КАК СистемаПроживания,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА КВП_БлагоустройствоОбъектов.ВидБлагоустройства = &ТипОтопления
	|				ТОГДА ВЫБОР
	|						КОГДА КВП_БлагоустройствоОбъектов.Значение = ""централизованное""
	|							ТОГДА 0
	|						ИНАЧЕ ВЫБОР
	|								КОГДА КВП_БлагоустройствоОбъектов.Значение = ""газовое""
	|									ТОГДА 1
	|								ИНАЧЕ ВЫБОР
	|										КОГДА КВП_БлагоустройствоОбъектов.Значение = ""электрическое""
	|											ТОГДА 2
	|										ИНАЧЕ ВЫБОР
	|												КОГДА КВП_БлагоустройствоОбъектов.Значение = ""печное""
	|													ТОГДА 3
	|												ИНАЧЕ -1
	|											КОНЕЦ
	|									КОНЕЦ
	|							КОНЕЦ
	|					КОНЕЦ
	|			ИНАЧЕ -1
	|		КОНЕЦ) КАК ТипОтопления,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА КВП_БлагоустройствоОбъектов.ВидБлагоустройства = ЗНАЧЕНИЕ(Справочник.КВП_ВидыБлагоустройстваОбъектов.Плита)
	|				ТОГДА ВЫБОР
	|						КОГДА КВП_БлагоустройствоОбъектов.Значение = ЗНАЧЕНИЕ(Перечисление.КВП_Плита.Электрическая)
	|							ТОГДА 1
	|						ИНАЧЕ ВЫБОР
	|								КОГДА КВП_БлагоустройствоОбъектов.Значение = ЗНАЧЕНИЕ(Перечисление.КВП_Плита.Газовая)
	|									ТОГДА 0
	|								ИНАЧЕ 2
	|							КОНЕЦ
	|					КОНЕЦ
	|			ИНАЧЕ -1
	|		КОНЕЦ) КАК ТипПлиты,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА КВП_БлагоустройствоОбъектов.ВидБлагоустройства = ЗНАЧЕНИЕ(Справочник.КВП_ВидыБлагоустройстваОбъектов.ГорячееВодоснабжение)
	|				ТОГДА ВЫБОР
	|						КОГДА КВП_БлагоустройствоОбъектов.Значение = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипыГорячегоВодоснабжения.Централизованное)
	|							ТОГДА 1
	|						ИНАЧЕ ВЫБОР
	|								КОГДА КВП_БлагоустройствоОбъектов.Значение = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипыГорячегоВодоснабжения.Водонагреватель)
	|									ТОГДА 2
	|								ИНАЧЕ 0
	|							КОНЕЦ
	|					КОНЕЦ
	|			ИНАЧЕ -1
	|		КОНЕЦ) КАК ТипГорячегоВодоснабжения,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА КВП_БлагоустройствоОбъектов.ВидБлагоустройства = ЗНАЧЕНИЕ(Справочник.КВП_ВидыБлагоустройстваОбъектов.ХолодноеВодоснабжение)
	|				ТОГДА ВЫБОР
	|						КОГДА КВП_БлагоустройствоОбъектов.Значение = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипыХолодногоВодоснабжения.ВодоразборИзУличныхКолонок)
	|							ТОГДА 2
	|						ИНАЧЕ ВЫБОР
	|								КОГДА КВП_БлагоустройствоОбъектов.Значение = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипыХолодногоВодоснабжения.Централизованное)
	|									ТОГДА 1
	|								ИНАЧЕ 0
	|							КОНЕЦ
	|					КОНЕЦ
	|			ИНАЧЕ -1
	|		КОНЕЦ) КАК ТипХолодногоВодоснабжения,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА КВП_БлагоустройствоОбъектов.ВидБлагоустройства = &Яма
	|				ТОГДА ВЫБОР
	|						КОГДА КВП_БлагоустройствоОбъектов.Значение В (ИСТИНА, ""да"", ""имеется"", ""присутсвует"", ""есть"")
	|							ТОГДА 1
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ -1
	|		КОНЕЦ) КАК Яма,
	|	КВП_БлагоустройствоОбъектов.Объект КАК Здание,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА КВП_БлагоустройствоОбъектов.ВидБлагоустройства = &Газоснабжение
	|				ТОГДА ВЫБОР
	|						КОГДА КВП_БлагоустройствоОбъектов.Значение = ""природный""
	|							ТОГДА 1
	|						ИНАЧЕ ВЫБОР
	|								КОГДА КВП_БлагоустройствоОбъектов.Значение = ""сжиженный""
	|									ТОГДА 2
	|								ИНАЧЕ 0
	|							КОНЕЦ
	|					КОНЕЦ
	|			ИНАЧЕ -1
	|		КОНЕЦ) КАК Газоснабжение,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА КВП_БлагоустройствоОбъектов.ВидБлагоустройства = ЗНАЧЕНИЕ(Справочник.КВП_ВидыБлагоустройстваОбъектов.Лифт)
	|				ТОГДА ВЫБОР
	|						КОГДА КВП_БлагоустройствоОбъектов.Значение В (ИСТИНА, ""да"", ""имеется"", ""присутсвует"", ""есть"")
	|							ТОГДА 1
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ -1
	|		КОНЕЦ) КАК Лифт
	|ПОМЕСТИТЬ втСвойстваЗданий
	|ИЗ
	|	РегистрСведений.КВП_БлагоустройствоОбъектов КАК КВП_БлагоустройствоОбъектов
	|ГДЕ
	|	КВП_БлагоустройствоОбъектов.Объект В
	|			(ВЫБРАТЬ
	|				втДанныеБезДопСведений.Здание
	|			ИЗ
	|				втДанныеБезДопСведений КАК втДанныеБезДопСведений)
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_БлагоустройствоОбъектов.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА КВП_БлагоустройствоОбъектов.ВидБлагоустройства = ЗНАЧЕНИЕ(Справочник.КВП_ВидыБлагоустройстваОбъектов.Ванна)
	|				ТОГДА ВЫБОР
	|						КОГДА ТИПЗНАЧЕНИЯ(КВП_БлагоустройствоОбъектов.Значение) = ТИП(ЧИСЛО)
	|							ТОГДА ВЫБОР
	|									КОГДА КВП_БлагоустройствоОбъектов.Значение = 1200
	|										ТОГДА 1
	|									ИНАЧЕ ВЫБОР
	|											КОГДА КВП_БлагоустройствоОбъектов.Значение МЕЖДУ 1500 И 1700
	|												ТОГДА 2
	|											ИНАЧЕ 0
	|										КОНЕЦ
	|								КОНЕЦ
	|						ИНАЧЕ -1
	|					КОНЕЦ
	|			ИНАЧЕ -1
	|		КОНЕЦ) КАК Ванна,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА КВП_БлагоустройствоОбъектов.ВидБлагоустройства = ЗНАЧЕНИЕ(Справочник.КВП_ВидыБлагоустройстваОбъектов.Плита)
	|				ТОГДА ВЫБОР
	|						КОГДА КВП_БлагоустройствоОбъектов.Значение = ЗНАЧЕНИЕ(Перечисление.КВП_Плита.Электрическая)
	|							ТОГДА 1
	|						ИНАЧЕ ВЫБОР
	|								КОГДА КВП_БлагоустройствоОбъектов.Значение = ЗНАЧЕНИЕ(Перечисление.КВП_Плита.Газовая)
	|									ТОГДА 0
	|								ИНАЧЕ 2
	|							КОНЕЦ
	|					КОНЕЦ
	|			ИНАЧЕ -1
	|		КОНЕЦ) КАК ТипПлиты,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА КВП_БлагоустройствоОбъектов.ВидБлагоустройства = &Водонагреватель
	|				ТОГДА ВЫБОР
	|						КОГДА КВП_БлагоустройствоОбъектов.Значение = ""бойлер""
	|							ТОГДА 1
	|						ИНАЧЕ ВЫБОР
	|								КОГДА КВП_БлагоустройствоОбъектов.Значение В (""ёмкостный"", ""емкостный"")
	|									ТОГДА 2
	|								ИНАЧЕ ВЫБОР
	|										КОГДА КВП_БлагоустройствоОбъектов.Значение = ""проточный""
	|											ТОГДА 3
	|										ИНАЧЕ ВЫБОР
	|												КОГДА КВП_БлагоустройствоОбъектов.Значение = ""на твердом топливе""
	|													ТОГДА 4
	|												ИНАЧЕ 0
	|											КОНЕЦ
	|									КОНЕЦ
	|							КОНЕЦ
	|					КОНЕЦ
	|			ИНАЧЕ -1
	|		КОНЕЦ) КАК ТипВодонагревателя,
	|	КВП_БлагоустройствоОбъектов.Объект КАК Помещение,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА КВП_БлагоустройствоОбъектов.ВидБлагоустройства = &Душ
	|				ТОГДА ВЫБОР
	|						КОГДА КВП_БлагоустройствоОбъектов.Значение В (ИСТИНА, ""да"", ""имеется"", ""присутсвует"", ""есть"")
	|							ТОГДА 1
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ -1
	|		КОНЕЦ) КАК НаличиеДуша,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА КВП_БлагоустройствоОбъектов.ВидБлагоустройства = &РасположениеДуша
	|				ТОГДА ВЫБОР
	|						КОГДА КВП_БлагоустройствоОбъектов.Значение = ""секция""
	|							ТОГДА 1
	|						ИНАЧЕ ВЫБОР
	|								КОГДА КВП_БлагоустройствоОбъектов.Значение = ""комната""
	|									ТОГДА 2
	|								ИНАЧЕ ВЫБОР
	|										КОГДА КВП_БлагоустройствоОбъектов.Значение = ""общие""
	|											ТОГДА 3
	|										ИНАЧЕ -1
	|									КОНЕЦ
	|							КОНЕЦ
	|					КОНЕЦ
	|			ИНАЧЕ -1
	|		КОНЕЦ) КАК РасположениеДуша
	|ПОМЕСТИТЬ втСвойстваПомещений
	|ИЗ
	|	РегистрСведений.КВП_БлагоустройствоОбъектов КАК КВП_БлагоустройствоОбъектов
	|ГДЕ
	|	КВП_БлагоустройствоОбъектов.Объект В
	|			(ВЫБРАТЬ
	|				втДанныеБезДопСведений.Помещение
	|			ИЗ
	|				втДанныеБезДопСведений КАК втДанныеБезДопСведений)
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_БлагоустройствоОбъектов.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеБезДопСведений.ЛицевойСчет КАК LS,
	|	втДанныеБезДопСведений.Помещение,
	|	втДанныеБезДопСведений.Здание,
	|	втДанныеБезДопСведений.OWNERSHIP,
	|	втДанныеБезДопСведений.TYPEFLAT,
	|	втДанныеБезДопСведений.ISHOSTEL,
	|	ЕСТЬNULL(втСвойстваЗданий.Лифт, -1) КАК LIFT,
	|	втДанныеБезДопСведений.AREA,
	|	втДанныеБезДопСведений.LIVAREA,
	|	втДанныеБезДопСведений.DEBTSUM,
	|	втДанныеБезДопСведений.SOI,
	|	втДанныеБезДопСведений.SOB,
	|	ЕСТЬNULL(втСвойстваЗданий.СистемаПроживания, -1) КАК SYSTEMHOME,
	|	втДанныеБезДопСведений.ROOMCOUNT,
	|	ЕСТЬNULL(втСвойстваЗданий.ТипОтопления, -1) КАК TYPEHEAT,
	|	ЕСТЬNULL(втСвойстваЗданий.ТипПлиты, -1) КАК TYPEPLATEH,
	|	ЕСТЬNULL(втСвойстваПомещений.ТипПлиты, -1) КАК TYPEPLATE,
	|	ЕСТЬNULL(втСвойстваЗданий.ТипГорячегоВодоснабжения, -1) КАК HOTWATER,
	|	ЕСТЬNULL(втСвойстваЗданий.ТипХолодногоВодоснабжения, -1) КАК COLDWATER,
	|	ЕСТЬNULL(втСвойстваПомещений.ТипВодонагревателя, -1) КАК WHEATER,
	|	ЕСТЬNULL(втСвойстваЗданий.Газоснабжение, -1) КАК GASSUPPLY,
	|	ЕСТЬNULL(втСвойстваЗданий.Яма, -1) КАК CESSPOOL,
	|	ЕСТЬNULL(втСвойстваПомещений.Ванна, -1) КАК HASBATH,
	|	ЕСТЬNULL(втСвойстваПомещений.НаличиеДуша, -1) КАК HASSHOWER,
	|	ЕСТЬNULL(втСвойстваПомещений.РасположениеДуша, -1) КАК PLACESHOW,
	|	втДанныеБезДопСведений.DEBT,
	|	втДанныеБезДопСведений.NOTFOUND,
	|	втДанныеБезДопСведений.DEBTDATE,
	|	втДанныеБезДопСведений.DEBTDEAL,
	|	втДанныеБезДопСведений.КоличествоЗарегистрированных,
	|	втДанныеБезДопСведений.КоличествоПроживающих
	|ПОМЕСТИТЬ втДанныеСоСвойствамиПомещенийИЗданий
	|ИЗ
	|	втДанныеБезДопСведений КАК втДанныеБезДопСведений
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСвойстваЗданий КАК втСвойстваЗданий
	|		ПО втДанныеБезДопСведений.Здание = втСвойстваЗданий.Здание
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСвойстваПомещений КАК втСвойстваПомещений
	|		ПО втДанныеБезДопСведений.Помещение = втСвойстваПомещений.Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втДанныеБезДопСведений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втСвойстваЗданий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втСвойстваПомещений";
	
	Запрос.Выполнить();
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ВременнаяРегистрация,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец
	|ПОМЕСТИТЬ втЗарегистрированные
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втЛицевыеСчета.ЛицевойСчет
	|				ИЗ
	|					втЛицевыеСчета КАК втЛицевыеСчета)) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗарегистрированные.ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втЗарегистрированные.Жилец) КАК КолВоЗарегистрированных
	|ПОМЕСТИТЬ втПостоянноЗарегистрированные
	|ИЗ
	|	втЗарегистрированные КАК втЗарегистрированные
	|
	|СГРУППИРОВАТЬ ПО
	|	втЗарегистрированные.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗарегистрированные.ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втЗарегистрированные.Жилец) КАК ВременноЗарегистрированные
	|ПОМЕСТИТЬ втВременноЗарегистрированные
	|ИЗ
	|	втЗарегистрированные КАК втЗарегистрированные
	|ГДЕ
	|	втЗарегистрированные.ВременнаяРегистрация
	|
	|СГРУППИРОВАТЬ ПО
	|	втЗарегистрированные.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец) КАК КолВоПроживающих
	|ПОМЕСТИТЬ втКолВоПроживающихБезРегистрации
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втЛицевыеСчета.ЛицевойСчет
	|					ИЗ
	|						втЛицевыеСчета КАК втЛицевыеСчета)
	|				И НЕ Жилец В
	|						(ВЫБРАТЬ
	|							втЗарегистрированные.Жилец
	|						ИЗ
	|							втЗарегистрированные КАК втЗарегистрированные)) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Помещение,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ДоляСобственникаЧислитель,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.ДоляСобственникаЗнаменатель
	|ПОМЕСТИТЬ втСобственникиПомещенийСДолями
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних КАК УПЖКХ_СобственникиПомещенийСрезПоследних
	|ГДЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втЗарегистрированные.ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втЗарегистрированные.Жилец) КАК КолВоЗарегистрированных
	|ПОМЕСТИТЬ втКоличествоЗарегистрированныхДетейСиротСобственников
	|ИЗ
	|	втСобственникиПомещенийСДолями КАК втСобственникиПомещенийСДолями
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЗарегистрированные КАК втЗарегистрированные
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЛицевыеСчетаСЛКДетейСирот КАК втЛицевыеСчетаСЛКДетейСирот
	|			ПО втЗарегистрированные.ЛицевойСчет = втЛицевыеСчетаСЛКДетейСирот.ЛицевойСчет
	|				И втЗарегистрированные.Жилец = втЛицевыеСчетаСЛКДетейСирот.Проживающий
	|		ПО втСобственникиПомещенийСДолями.Помещение = втЗарегистрированные.ЛицевойСчет.Адрес
	|			И втСобственникиПомещенийСДолями.Собственник = втЗарегистрированные.Жилец.ФизЛицо
	|
	|СГРУППИРОВАТЬ ПО
	|	втЗарегистрированные.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗарегистрированные.ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втЗарегистрированные.Жилец) КАК КолВоЗарегистрированных
	|ПОМЕСТИТЬ втКоличествоЗарегистрированныхДетейСирот
	|ИЗ
	|	втЗарегистрированные КАК втЗарегистрированные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЛицевыеСчетаСЛКДетейСирот КАК втЛицевыеСчетаСЛКДетейСирот
	|		ПО втЗарегистрированные.ЛицевойСчет = втЛицевыеСчетаСЛКДетейСирот.ЛицевойСчет
	|			И втЗарегистрированные.Жилец = втЛицевыеСчетаСЛКДетейСирот.Проживающий
	|ГДЕ
	|	НЕ (втЗарегистрированные.ЛицевойСчет.Адрес, втЗарегистрированные.Жилец.ФизЛицо) В
	|				(ВЫБРАТЬ
	|					втСобственникиПомещенийСДолями.Помещение,
	|					втСобственникиПомещенийСДолями.Собственник
	|				ИЗ
	|					втСобственникиПомещенийСДолями КАК втСобственникиПомещенийСДолями)
	|
	|СГРУППИРОВАТЬ ПО
	|	втЗарегистрированные.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втЗарегистрированные";
	
	Запрос.Выполнить();
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Владелец КАК Здание
	|ПОМЕСТИТЬ втПроживающиеВЗданииИзСведенийПодготовка
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&ДатаКонца,
	|			Объект.Владелец В
	|				(ВЫБРАТЬ
	|					втЛицевыеСчета.Здание
	|				ИЗ
	|					втЛицевыеСчета КАК втЛицевыеСчета)) КАК КВП_ЛицевыеСчетаСрезПоследних
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.ЛицевойСчет.Адрес.Владелец КАК Здание,
	|	СУММА(КВП_УчетКоличестваЖильцовПоЛицевымСчетам.КоличествоПроживающих) КАК КоличествоПроживающих
	|ПОМЕСТИТЬ втУчетКоличестваЖильцовПоЗданию
	|ИЗ
	|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет.Адрес.Владелец В
	|				(ВЫБРАТЬ
	|					втЛицевыеСчета.Здание
	|				ИЗ
	|					втЛицевыеСчета КАК втЛицевыеСчета)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетам
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.ЛицевойСчет.Адрес.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПроживающиеВЗданииИзСведенийПодготовка.Здание,
	|	ЕСТЬNULL(втУчетКоличестваЖильцовПоЗданию.КоличествоПроживающих, 0) КАК КоличествоПроживающих
	|ПОМЕСТИТЬ втПроживающиеВЗданииИзСведений
	|ИЗ
	|	втПроживающиеВЗданииИзСведенийПодготовка КАК втПроживающиеВЗданииИзСведенийПодготовка
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУчетКоличестваЖильцовПоЗданию КАК втУчетКоличестваЖильцовПоЗданию
	|		ПО втПроживающиеВЗданииИзСведенийПодготовка.Здание = втУчетКоличестваЖильцовПоЗданию.Здание";
	
	Запрос.Выполнить();
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец) КАК КолВоПроживающих,
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет.Адрес.Владелец КАК Здание
	|ПОМЕСТИТЬ втПроживающие
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет.Адрес.Владелец В
	|				(ВЫБРАТЬ
	|					втЛицевыеСчета.Здание
	|				ИЗ
	|					втЛицевыеСчета КАК втЛицевыеСчета)) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет.Адрес.Владелец";
	
	Запрос.Выполнить();
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	втДанныеСоСвойствамиПомещенийИЗданий.LS,
	|	втДанныеСоСвойствамиПомещенийИЗданий.Помещение,
	|	втДанныеСоСвойствамиПомещенийИЗданий.Здание,
	|	втДанныеСоСвойствамиПомещенийИЗданий.OWNERSHIP,
	|	втДанныеСоСвойствамиПомещенийИЗданий.TYPEFLAT,
	|	втДанныеСоСвойствамиПомещенийИЗданий.ISHOSTEL,
	|	втДанныеСоСвойствамиПомещенийИЗданий.LIFT,
	|	втДанныеСоСвойствамиПомещенийИЗданий.AREA,
	|	втДанныеСоСвойствамиПомещенийИЗданий.LIVAREA,
	|	втДанныеСоСвойствамиПомещенийИЗданий.DEBTSUM,
	|	втДанныеСоСвойствамиПомещенийИЗданий.SOI,
	|	втДанныеСоСвойствамиПомещенийИЗданий.SOB,
	|	втДанныеСоСвойствамиПомещенийИЗданий.SYSTEMHOME,
	|	втДанныеСоСвойствамиПомещенийИЗданий.ROOMCOUNT,
	|	втДанныеСоСвойствамиПомещенийИЗданий.TYPEHEAT,
	|	втДанныеСоСвойствамиПомещенийИЗданий.TYPEPLATEH,
	|	втДанныеСоСвойствамиПомещенийИЗданий.TYPEPLATE,
	|	втДанныеСоСвойствамиПомещенийИЗданий.HOTWATER,
	|	втДанныеСоСвойствамиПомещенийИЗданий.COLDWATER,
	|	втДанныеСоСвойствамиПомещенийИЗданий.WHEATER,
	|	втДанныеСоСвойствамиПомещенийИЗданий.GASSUPPLY,
	|	втДанныеСоСвойствамиПомещенийИЗданий.CESSPOOL,
	|	втДанныеСоСвойствамиПомещенийИЗданий.HASBATH,
	|	втДанныеСоСвойствамиПомещенийИЗданий.HASSHOWER,
	|	втДанныеСоСвойствамиПомещенийИЗданий.PLACESHOW,
	|	ЕСТЬNULL(втВременноЗарегистрированные.ВременноЗарегистрированные, 0) КАК TMPREGCNT,
	|	ВЫБОР
	|		КОГДА &УказыватьКоличествоПрожИЗарегЧислами = ИСТИНА
	|			ТОГДА втДанныеСоСвойствамиПомещенийИЗданий.КоличествоЗарегистрированных
	|		ИНАЧЕ ЕСТЬNULL(втПостоянноЗарегистрированные.КолВоЗарегистрированных, 0)
	|	КОНЕЦ КАК FIXREGCNT,
	|	ВЫБОР
	|		КОГДА &УказыватьКоличествоПрожИЗарегЧислами = ИСТИНА
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ втДанныеСоСвойствамиПомещенийИЗданий.КоличествоПроживающих < втДанныеСоСвойствамиПомещенийИЗданий.КоличествоЗарегистрированных
	|						ТОГДА втДанныеСоСвойствамиПомещенийИЗданий.КоличествоПроживающих - втДанныеСоСвойствамиПомещенийИЗданий.КоличествоЗарегистрированных
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ ЕСТЬNULL(втКолВоПроживающихБезРегистрации.КолВоПроживающих, 0)
	|	КОНЕЦ КАК UNREGCNT,
	|	ЕСТЬNULL(втКоличествоЗарегистрированныхДетейСиротСобственников.КолВоЗарегистрированных, 0) КАК PRIVCHILD,
	|	ЕСТЬNULL(втКоличествоЗарегистрированныхДетейСирот.КолВоЗарегистрированных, 0) КАК GUESTCHILD,
	|	втДанныеСоСвойствамиПомещенийИЗданий.DEBT,
	|	втДанныеСоСвойствамиПомещенийИЗданий.NOTFOUND,
	|	втДанныеСоСвойствамиПомещенийИЗданий.DEBTDATE,
	|	втДанныеСоСвойствамиПомещенийИЗданий.DEBTDEAL,
	|	ВЫБОР
	|		КОГДА &УказыватьКоличествоПрожИЗарегЧислами = ИСТИНА
	|			ТОГДА ЕСТЬNULL(втПроживающиеВЗданииИзСведений.КоличествоПроживающих, 0)
	|		ИНАЧЕ ЕСТЬNULL(втПроживающие.КолВоПроживающих, 0)
	|	КОНЕЦ КАК КолВоВсехПроживающих
	|ПОМЕСТИТЬ втБезНачисленийИПерерасчетов
	|ИЗ
	|	втДанныеСоСвойствамиПомещенийИЗданий КАК втДанныеСоСвойствамиПомещенийИЗданий
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВременноЗарегистрированные КАК втВременноЗарегистрированные
	|		ПО втДанныеСоСвойствамиПомещенийИЗданий.LS = втВременноЗарегистрированные.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПостоянноЗарегистрированные КАК втПостоянноЗарегистрированные
	|		ПО втДанныеСоСвойствамиПомещенийИЗданий.LS = втПостоянноЗарегистрированные.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПроживающие КАК втПроживающие
	|		ПО втДанныеСоСвойствамиПомещенийИЗданий.Здание = втПроживающие.Здание
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПроживающиеВЗданииИзСведений КАК втПроживающиеВЗданииИзСведений
	|		ПО втДанныеСоСвойствамиПомещенийИЗданий.Здание = втПроживающиеВЗданииИзСведений.Здание
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКолВоПроживающихБезРегистрации КАК втКолВоПроживающихБезРегистрации
	|		ПО втДанныеСоСвойствамиПомещенийИЗданий.LS = втКолВоПроживающихБезРегистрации.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКоличествоЗарегистрированныхДетейСиротСобственников КАК втКоличествоЗарегистрированныхДетейСиротСобственников
	|		ПО втДанныеСоСвойствамиПомещенийИЗданий.LS = втКоличествоЗарегистрированныхДетейСиротСобственников.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКоличествоЗарегистрированныхДетейСирот КАК втКоличествоЗарегистрированныхДетейСирот
	|		ПО втДанныеСоСвойствамиПомещенийИЗданий.LS = втКоличествоЗарегистрированныхДетейСирот.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втБезНачисленийИПерерасчетов.LS,
	|	втБезНачисленийИПерерасчетов.Помещение,
	|	втБезНачисленийИПерерасчетов.Здание,
	|	втБезНачисленийИПерерасчетов.OWNERSHIP,
	|	втБезНачисленийИПерерасчетов.TYPEFLAT,
	|	втБезНачисленийИПерерасчетов.ISHOSTEL,
	|	втБезНачисленийИПерерасчетов.LIFT,
	|	втБезНачисленийИПерерасчетов.AREA,
	|	втБезНачисленийИПерерасчетов.LIVAREA,
	|	втБезНачисленийИПерерасчетов.DEBTSUM,
	|	втБезНачисленийИПерерасчетов.SOI,
	|	втБезНачисленийИПерерасчетов.SOB,
	|	втБезНачисленийИПерерасчетов.SYSTEMHOME,
	|	втБезНачисленийИПерерасчетов.ROOMCOUNT,
	|	втБезНачисленийИПерерасчетов.TYPEHEAT,
	|	втБезНачисленийИПерерасчетов.TYPEPLATEH,
	|	втБезНачисленийИПерерасчетов.TYPEPLATE,
	|	втБезНачисленийИПерерасчетов.HOTWATER,
	|	втБезНачисленийИПерерасчетов.COLDWATER,
	|	втБезНачисленийИПерерасчетов.WHEATER,
	|	втБезНачисленийИПерерасчетов.GASSUPPLY,
	|	втБезНачисленийИПерерасчетов.CESSPOOL,
	|	втБезНачисленийИПерерасчетов.HASBATH,
	|	втБезНачисленийИПерерасчетов.HASSHOWER,
	|	втБезНачисленийИПерерасчетов.PLACESHOW,
	|	втБезНачисленийИПерерасчетов.TMPREGCNT,
	|	втБезНачисленийИПерерасчетов.FIXREGCNT,
	|	втБезНачисленийИПерерасчетов.UNREGCNT,
	|	втБезНачисленийИПерерасчетов.PRIVCHILD,
	|	втБезНачисленийИПерерасчетов.GUESTCHILD,
	|	втБезНачисленийИПерерасчетов.DEBT,
	|	втБезНачисленийИПерерасчетов.NOTFOUND,
	|	втБезНачисленийИПерерасчетов.DEBTDATE,
	|	втБезНачисленийИПерерасчетов.DEBTDEAL,
	|	втБезНачисленийИПерерасчетов.КолВоВсехПроживающих,
	|	втУслуги.ИдентификаторУслугиВОСЗН КАК ИдентификаторУслуги,
	|	втУслуги.УслугаВБазе,
	|	втУслуги.ВидТарифа
	|ПОМЕСТИТЬ втБезНачисленийИПерерасчетовСУслугами
	|ИЗ
	|	втБезНачисленийИПерерасчетов КАК втБезНачисленийИПерерасчетов,
	|	втУслуги КАК втУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втДанныеСоСвойствамиПомещенийИЗданий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втВременноЗарегистрированные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втПостоянноЗарегистрированные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втПроживающиеВЗданииИзСведений
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втПроживающие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втБезНачисленийИПерерасчетов";
	
	Запрос.УстановитьПараметр("УказыватьКоличествоПрожИЗарегЧислами", Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Получить());
	
	Запрос.Выполнить();
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ))
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНачисления,
	|	СРЕДНЕЕ(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ))
	|					И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В(ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ))
	|				ТОГДА УПЖКХ_НачисленияОбороты.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОбъемНачисления,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В(ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|				ТОГДА УПЖКХ_НачисленияОбороты.ДнейНачисленоОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ДнейНачислено,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПерерасчета,
	|	СРЕДНЕЕ(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ))
	|					И УПЖКХ_НачисленияОбороты.ВидНачисления В(ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|				ТОГДА УПЖКХ_НачисленияОбороты.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОбъемПерерасчета,
	|	СРЕДНЕЕ(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|				ТОГДА УПЖКХ_НачисленияОбороты.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОбъемНачисленияОДН,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНачисленияОДН,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_НачисленияОбороты.УслугаОснование) КАК УслугаОснование,
	|	УПЖКХ_НачисленияОбороты.ВидТарифа КАК ВидТарифа,
	|	СРЕДНЕЕ(УПЖКХ_НачисленияОбороты.Тариф) КАК Тариф,
	|	УПЖКХ_НачисленияОбороты.Регистратор,
	|	УПЖКХ_НачисленияОбороты.РазделУчета,
	|	УПЖКХ_НачисленияОбороты.ВидНачисления
	|ПОМЕСТИТЬ втНачисленияСВидамиТарифовИРегистраторами
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНачала,
	|			&ДатаКонца,
	|			Регистратор,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втЛицевыеСчета.ЛицевойСчет
	|					ИЗ
	|						втЛицевыеСчета КАК втЛицевыеСчета)
	|				И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|				И НЕ РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени))) КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.ВидТарифа,
	|	УПЖКХ_НачисленияОбороты.Регистратор,
	|	УПЖКХ_НачисленияОбороты.РазделУчета,
	|	УПЖКХ_НачисленияОбороты.ВидНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачисленияСВидамиТарифовИРегистраторами.ЛицевойСчет,
	|	втНачисленияСВидамиТарифовИРегистраторами.Услуга,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаУслугБезОДН.Услуга ЕСТЬ NULL
	|				ТОГДА втНачисленияСВидамиТарифовИРегистраторами.СуммаНачисления
	|			ИНАЧЕ втНачисленияСВидамиТарифовИРегистраторами.СуммаНачисления + втНачисленияСВидамиТарифовИРегистраторами.СуммаНачисленияОДН
	|		КОНЕЦ) КАК СуммаНачисления,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаУслугБезОДН.Услуга ЕСТЬ NULL
	|				ТОГДА втНачисленияСВидамиТарифовИРегистраторами.ОбъемНачисления
	|			ИНАЧЕ втНачисленияСВидамиТарифовИРегистраторами.ОбъемНачисления + втНачисленияСВидамиТарифовИРегистраторами.ОбъемНачисленияОДН
	|		КОНЕЦ) КАК ОбъемНачисления,
	|	МАКСИМУМ(втНачисленияСВидамиТарифовИРегистраторами.ДнейНачислено) КАК ДнейНачислено,
	|	СУММА(втНачисленияСВидамиТарифовИРегистраторами.СуммаПерерасчета) КАК СуммаПерерасчета,
	|	СУММА(втНачисленияСВидамиТарифовИРегистраторами.ОбъемПерерасчета) КАК ОбъемПерерасчета,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаУслугБезОДН.Услуга ЕСТЬ NULL
	|				ТОГДА втНачисленияСВидамиТарифовИРегистраторами.ОбъемНачисленияОДН
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОбъемНачисленияОДН,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаУслугБезОДН.Услуга ЕСТЬ NULL
	|				ТОГДА втНачисленияСВидамиТарифовИРегистраторами.СуммаНачисленияОДН
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНачисленияОДН,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втНачисленияСВидамиТарифовИРегистраторами.УслугаОснование) КАК УслугаОснование,
	|	втНачисленияСВидамиТарифовИРегистраторами.ВидТарифа КАК ВидТарифа,
	|	СРЕДНЕЕ(втНачисленияСВидамиТарифовИРегистраторами.Тариф) КАК Тариф,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втНачисленияСВидамиТарифовИРегистраторами.Регистратор) КАК Регистратор
	|ПОМЕСТИТЬ втНачисленияСВидамиТарифов
	|ИЗ
	|	втНачисленияСВидамиТарифовИРегистраторами КАК втНачисленияСВидамиТарифовИРегистраторами
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаУслугБезОДН КАК ТаблицаУслугБезОДН
	|		ПО втНачисленияСВидамиТарифовИРегистраторами.Услуга = ТаблицаУслугБезОДН.Услуга
	|
	|СГРУППИРОВАТЬ ПО
	|	втНачисленияСВидамиТарифовИРегистраторами.ЛицевойСчет,
	|	втНачисленияСВидамиТарифовИРегистраторами.Услуга,
	|	втНачисленияСВидамиТарифовИРегистраторами.ВидТарифа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачисленияСВидамиТарифов.ЛицевойСчет,
	|	втНачисленияСВидамиТарифов.Услуга,
	|	СУММА(втНачисленияСВидамиТарифов.СуммаНачисления) КАК СуммаНачисления,
	|	СУММА(втНачисленияСВидамиТарифов.ОбъемНачисления) КАК ОбъемНачисления,
	|	МАКСИМУМ(втНачисленияСВидамиТарифов.ДнейНачислено) КАК ДнейНачислено,
	|	СУММА(втНачисленияСВидамиТарифов.СуммаПерерасчета) КАК СуммаПерерасчета,
	|	СУММА(втНачисленияСВидамиТарифов.ОбъемПерерасчета) КАК ОбъемПерерасчета,
	|	СУММА(втНачисленияСВидамиТарифов.ОбъемНачисленияОДН) КАК ОбъемНачисленияОДН,
	|	СУММА(втНачисленияСВидамиТарифов.СуммаНачисленияОДН) КАК СуммаНачисленияОДН,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втНачисленияСВидамиТарифов.УслугаОснование) КАК УслугаОснование,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втНачисленияСВидамиТарифов.ВидТарифа) КАК ВидТарифа,
	|	СРЕДНЕЕ(втНачисленияСВидамиТарифов.Тариф) КАК Тариф,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втНачисленияСВидамиТарифов.Регистратор) КАК Регистратор
	|ПОМЕСТИТЬ втНачисления
	|ИЗ
	|	втНачисленияСВидамиТарифов КАК втНачисленияСВидамиТарифов
	|
	|СГРУППИРОВАТЬ ПО
	|	втНачисленияСВидамиТарифов.ЛицевойСчет,
	|	втНачисленияСВидамиТарифов.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект.Адрес КАК Помещение,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги КАК Услуга,
	|	ИСТИНА КАК НаличиеСчетчика
	|ПОМЕСТИТЬ втДействующиеИндСчетчики
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&ДатаКонца,
	|			Объект В
	|					(ВЫБРАТЬ
	|						втЛицевыеСчета.ЛицевойСчет
	|					ИЗ
	|						втЛицевыеСчета КАК втЛицевыеСчета)
	|				И ДатаИзменения <= &ДатаКонца) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги,
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&ДатаКонца,
	|			Объект В
	|					(ВЫБРАТЬ
	|						втЛицевыеСчета.Помещение
	|					ИЗ
	|						втЛицевыеСчета КАК втЛицевыеСчета)
	|				И ДатаИзменения <= &ДатаКонца) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДействующиеИндСчетчики.Помещение,
	|	втДействующиеИндСчетчики.Услуга,
	|	МАКСИМУМ(втДействующиеИндСчетчики.НаличиеСчетчика) КАК НаличиеСчетчика
	|ПОМЕСТИТЬ втИндСчетчиков
	|ИЗ
	|	втДействующиеИндСчетчики КАК втДействующиеИндСчетчики
	|
	|СГРУППИРОВАТЬ ПО
	|	втДействующиеИндСчетчики.Помещение,
	|	втДействующиеИндСчетчики.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект КАК Здание,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги КАК Услуга,
	|	ИСТИНА КАК НаличиеСчетчика
	|ПОМЕСТИТЬ втОбщСчетчики
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&ДатаКонца,
	|			Объект В
	|					(ВЫБРАТЬ
	|						втЛицевыеСчета.Здание
	|					ИЗ
	|						втЛицевыеСчета КАК втЛицевыеСчета)
	|				И ДатаИзменения <= &ДатаКонца) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует";
	
	Запрос.Выполнить();
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	втБезНачисленийИПерерасчетовСУслугами.LS КАК LS,
	|	втБезНачисленийИПерерасчетовСУслугами.Помещение,
	|	втБезНачисленийИПерерасчетовСУслугами.Здание,
	|	втБезНачисленийИПерерасчетовСУслугами.OWNERSHIP,
	|	втБезНачисленийИПерерасчетовСУслугами.TYPEFLAT,
	|	втБезНачисленийИПерерасчетовСУслугами.ISHOSTEL,
	|	втБезНачисленийИПерерасчетовСУслугами.LIFT,
	|	втБезНачисленийИПерерасчетовСУслугами.AREA,
	|	втБезНачисленийИПерерасчетовСУслугами.LIVAREA,
	|	втБезНачисленийИПерерасчетовСУслугами.DEBTSUM,
	|	втБезНачисленийИПерерасчетовСУслугами.SOI,
	|	втБезНачисленийИПерерасчетовСУслугами.SOB,
	|	втБезНачисленийИПерерасчетовСУслугами.SYSTEMHOME,
	|	втБезНачисленийИПерерасчетовСУслугами.ROOMCOUNT,
	|	втБезНачисленийИПерерасчетовСУслугами.TYPEHEAT,
	|	втБезНачисленийИПерерасчетовСУслугами.TYPEPLATEH,
	|	втБезНачисленийИПерерасчетовСУслугами.TYPEPLATE,
	|	втБезНачисленийИПерерасчетовСУслугами.HOTWATER,
	|	втБезНачисленийИПерерасчетовСУслугами.COLDWATER,
	|	втБезНачисленийИПерерасчетовСУслугами.WHEATER,
	|	втБезНачисленийИПерерасчетовСУслугами.GASSUPPLY,
	|	втБезНачисленийИПерерасчетовСУслугами.CESSPOOL,
	|	втБезНачисленийИПерерасчетовСУслугами.HASBATH,
	|	втБезНачисленийИПерерасчетовСУслугами.HASSHOWER,
	|	втБезНачисленийИПерерасчетовСУслугами.PLACESHOW,
	|	втБезНачисленийИПерерасчетовСУслугами.TMPREGCNT,
	|	втБезНачисленийИПерерасчетовСУслугами.FIXREGCNT,
	|	втБезНачисленийИПерерасчетовСУслугами.UNREGCNT,
	|	втБезНачисленийИПерерасчетовСУслугами.PRIVCHILD,
	|	втБезНачисленийИПерерасчетовСУслугами.GUESTCHILD,
	|	втБезНачисленийИПерерасчетовСУслугами.DEBT,
	|	втБезНачисленийИПерерасчетовСУслугами.NOTFOUND,
	|	втБезНачисленийИПерерасчетовСУслугами.DEBTDATE,
	|	втБезНачисленийИПерерасчетовСУслугами.DEBTDEAL,
	|	втБезНачисленийИПерерасчетовСУслугами.КолВоВсехПроживающих,
	|	втБезНачисленийИПерерасчетовСУслугами.ИдентификаторУслуги КАК SERVID,
	|	втБезНачисленийИПерерасчетовСУслугами.УслугаВБазе,
	|	втБезНачисленийИПерерасчетовСУслугами.ВидТарифа,
	|	ВЫБОР
	|		КОГДА НЕ &УчитыватьВидыТарифов
	|				ИЛИ втБезНачисленийИПерерасчетовСУслугами.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(втНачисления.ДнейНачислено, 0)
	|		ИНАЧЕ ЕСТЬNULL(втНачисленияСВидамиТарифов.ДнейНачислено, 0)
	|	КОНЕЦ КАК SERVDAYCNT,
	|	ВЫБОР
	|		КОГДА НЕ &УчитыватьВидыТарифов
	|				ИЛИ втБезНачисленийИПерерасчетовСУслугами.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(втНачисления.СуммаНачисления, 0)
	|		ИНАЧЕ ЕСТЬNULL(втНачисленияСВидамиТарифов.СуммаНачисления, 0)
	|	КОНЕЦ КАК CHARGE,
	|	ВЫБОР
	|		КОГДА НЕ &УчитыватьВидыТарифов
	|				ИЛИ втБезНачисленийИПерерасчетовСУслугами.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(втНачисления.ОбъемНачисления, 0)
	|		ИНАЧЕ ЕСТЬNULL(втНачисленияСВидамиТарифов.ОбъемНачисления, 0)
	|	КОНЕЦ КАК VOLUME,
	|	ЕСТЬNULL(втНачисления.СуммаПерерасчета, 0) КАК RECALC,
	|	ЕСТЬNULL(втНачисления.ОбъемПерерасчета, 0) КАК VRECALC,
	|	ВЫБОР
	|		КОГДА НЕ &УчитыватьВидыТарифов
	|				ИЛИ втБезНачисленийИПерерасчетовСУслугами.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(втНачисления.ОбъемНачисленияОДН, 0)
	|		ИНАЧЕ ЕСТЬNULL(втНачисленияСВидамиТарифов.ОбъемНачисленияОДН, 0)
	|	КОНЕЦ КАК VOLUMEODPU,
	|	ВЫБОР
	|		КОГДА НЕ &УчитыватьВидыТарифов
	|				ИЛИ втБезНачисленийИПерерасчетовСУслугами.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.ПустаяСсылка)
	|			ТОГДА ЕСТЬNULL(втНачисления.СуммаНачисленияОДН, 0)
	|		ИНАЧЕ ЕСТЬNULL(втНачисленияСВидамиТарифов.СуммаНачисленияОДН, 0)
	|	КОНЕЦ КАК CHARGEODPU
	|ПОМЕСТИТЬ втБезИтоговИСчетчиков
	|ИЗ
	|	втБезНачисленийИПерерасчетовСУслугами КАК втБезНачисленийИПерерасчетовСУслугами
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНачисления КАК втНачисления
	|		ПО втБезНачисленийИПерерасчетовСУслугами.LS = втНачисления.ЛицевойСчет
	|			И втБезНачисленийИПерерасчетовСУслугами.УслугаВБазе = втНачисления.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНачисленияСВидамиТарифов КАК втНачисленияСВидамиТарифов
	|		ПО втБезНачисленийИПерерасчетовСУслугами.LS = втНачисленияСВидамиТарифов.ЛицевойСчет
	|			И втБезНачисленийИПерерасчетовСУслугами.УслугаВБазе = втНачисленияСВидамиТарифов.Услуга
	|			И втБезНачисленийИПерерасчетовСУслугами.ВидТарифа = втНачисленияСВидамиТарифов.ВидТарифа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НазначенныеНачисленияСрезПоследних.Объект,
	|	КВП_НазначенныеНачисленияСрезПоследних.Услуга
	|ПОМЕСТИТЬ втНазначенныеНачисления
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления.СрезПоследних(
	|			&ДатаКонца,
	|			Организация = &Организация
	|				И ДатаИзменения < &ДатаКонца
	|				И Объект В
	|					(ВЫБРАТЬ
	|						втБезИтоговИСчетчиков.LS
	|					ИЗ
	|						втБезИтоговИСчетчиков КАК втБезИтоговИСчетчиков)
	|				И Услуга В
	|					(ВЫБРАТЬ
	|						втБезИтоговИСчетчиков.УслугаВБазе
	|					ИЗ
	|						втБезИтоговИСчетчиков КАК втБезИтоговИСчетчиков)) КАК КВП_НазначенныеНачисленияСрезПоследних
	|ГДЕ
	|	КВП_НазначенныеНачисленияСрезПоследних.Действует
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_НазначенныеНачисленияСрезПоследних.Объект,
	|	КВП_НазначенныеНачисленияСрезПоследних.Услуга
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КВП_НазначенныеНачисления.Объект,
	|	КВП_НазначенныеНачисления.Услуга
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления КАК КВП_НазначенныеНачисления
	|ГДЕ
	|	КВП_НазначенныеНачисления.ДатаИзменения МЕЖДУ &ДатаНачала И &ДатаКонца
	|	И КВП_НазначенныеНачисления.Активность
	|	И КВП_НазначенныеНачисления.Организация = &Организация
	|	И КВП_НазначенныеНачисления.Объект В
	|			(ВЫБРАТЬ
	|				втБезИтоговИСчетчиков.LS
	|			ИЗ
	|				втБезИтоговИСчетчиков КАК втБезИтоговИСчетчиков)
	|	И КВП_НазначенныеНачисления.Услуга В
	|			(ВЫБРАТЬ
	|				втБезИтоговИСчетчиков.УслугаВБазе
	|			ИЗ
	|				втБезИтоговИСчетчиков КАК втБезИтоговИСчетчиков)
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_НазначенныеНачисления.Объект,
	|	КВП_НазначенныеНачисления.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОВозможностиУстановкиПриборовУчетаВЗданияхИПомещениях.Здание,
	|	УПЖКХ_СведенияОВозможностиУстановкиПриборовУчетаВЗданияхИПомещениях.Помещение,
	|	УПЖКХ_СведенияОВозможностиУстановкиПриборовУчетаВЗданияхИПомещениях.Услуга,
	|	УПЖКХ_СведенияОВозможностиУстановкиПриборовУчетаВЗданияхИПомещениях.ТехническаяВозможностьПрисутствует
	|ПОМЕСТИТЬ втВозможностьУстановкиПУ
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОВозможностиУстановкиПриборовУчетаВЗданияхИПомещениях КАК УПЖКХ_СведенияОВозможностиУстановкиПриборовУчетаВЗданияхИПомещениях
	|ГДЕ
	|	(УПЖКХ_СведенияОВозможностиУстановкиПриборовУчетаВЗданияхИПомещениях.Здание, УПЖКХ_СведенияОВозможностиУстановкиПриборовУчетаВЗданияхИПомещениях.Услуга) В
	|			(ВЫБРАТЬ
	|				втБезИтоговИСчетчиков.Здание,
	|				втБезИтоговИСчетчиков.УслугаВБазе
	|			ИЗ
	|				втБезИтоговИСчетчиков КАК втБезИтоговИСчетчиков)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_ЗначенияПовышающихКоэффициентовДляНачисленияПоНормативуСрезПоследних.Услуга,
	|	УПЖКХ_ЗначенияПовышающихКоэффициентовДляНачисленияПоНормативуСрезПоследних.ПовышающийКоэффициент
	|ПОМЕСТИТЬ втПовышающиеКоэффициенты
	|ИЗ
	|	РегистрСведений.УПЖКХ_ЗначенияПовышающихКоэффициентовДляНачисленияПоНормативу.СрезПоследних(
	|			&ДатаКонца,
	|			Услуга В
	|				(ВЫБРАТЬ
	|					втБезИтоговИСчетчиков.УслугаВБазе
	|				ИЗ
	|					втБезИтоговИСчетчиков КАК втБезИтоговИСчетчиков)) КАК УПЖКХ_ЗначенияПовышающихКоэффициентовДляНачисленияПоНормативуСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втБезИтоговИСчетчиков.LS,
	|	втБезИтоговИСчетчиков.Помещение,
	|	втБезИтоговИСчетчиков.Здание,
	|	втБезИтоговИСчетчиков.OWNERSHIP,
	|	втБезИтоговИСчетчиков.TYPEFLAT,
	|	втБезИтоговИСчетчиков.ISHOSTEL,
	|	втБезИтоговИСчетчиков.LIFT,
	|	втБезИтоговИСчетчиков.AREA,
	|	втБезИтоговИСчетчиков.LIVAREA,
	|	втБезИтоговИСчетчиков.DEBTSUM,
	|	втБезИтоговИСчетчиков.SOI,
	|	втБезИтоговИСчетчиков.SOB,
	|	втБезИтоговИСчетчиков.SYSTEMHOME,
	|	втБезИтоговИСчетчиков.ROOMCOUNT,
	|	втБезИтоговИСчетчиков.TYPEHEAT,
	|	втБезИтоговИСчетчиков.TYPEPLATEH,
	|	втБезИтоговИСчетчиков.TYPEPLATE,
	|	втБезИтоговИСчетчиков.HOTWATER,
	|	втБезИтоговИСчетчиков.COLDWATER,
	|	втБезИтоговИСчетчиков.WHEATER,
	|	втБезИтоговИСчетчиков.GASSUPPLY,
	|	втБезИтоговИСчетчиков.CESSPOOL,
	|	втБезИтоговИСчетчиков.HASBATH,
	|	втБезИтоговИСчетчиков.HASSHOWER,
	|	втБезИтоговИСчетчиков.PLACESHOW,
	|	втБезИтоговИСчетчиков.TMPREGCNT,
	|	втБезИтоговИСчетчиков.FIXREGCNT,
	|	втБезИтоговИСчетчиков.UNREGCNT,
	|	втБезИтоговИСчетчиков.PRIVCHILD,
	|	втБезИтоговИСчетчиков.GUESTCHILD,
	|	втБезИтоговИСчетчиков.DEBT,
	|	втБезИтоговИСчетчиков.NOTFOUND,
	|	втБезИтоговИСчетчиков.DEBTDATE,
	|	втБезИтоговИСчетчиков.DEBTDEAL,
	|	втБезИтоговИСчетчиков.КолВоВсехПроживающих,
	|	втБезИтоговИСчетчиков.SERVID,
	|	втБезИтоговИСчетчиков.УслугаВБазе,
	|	втБезИтоговИСчетчиков.ВидТарифа,
	|	втБезИтоговИСчетчиков.SERVDAYCNT,
	|	втБезИтоговИСчетчиков.CHARGE,
	|	втБезИтоговИСчетчиков.VOLUME,
	|	втБезИтоговИСчетчиков.RECALC,
	|	втБезИтоговИСчетчиков.VRECALC,
	|	втБезИтоговИСчетчиков.VOLUMEODPU,
	|	втБезИтоговИСчетчиков.CHARGEODPU,
	|	ЕСТЬNULL(втНачисленныеЛьготыДетямСиротам.СуммаНачисления, 0) КАК BENEFITS,
	|	ЕСТЬNULL(втНачисленныеЛьготыДетямСиротам.Количество, 0) КАК VBENEFITS,
	|	ВЫБОР
	|		КОГДА втБезИтоговИСчетчиков.SERVID В (1, 2, 3, 5, 6, 7, 8, 10, 12, 13)
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(втИндСчетчиков.НаличиеСчетчика, ЛОЖЬ) = ИСТИНА
	|						ТОГДА 1
	|					ИНАЧЕ ВЫБОР
	|							КОГДА НЕ втНазначенныеНачисления.Услуга ЕСТЬ NULL
	|								ТОГДА ВЫБОР
	|										КОГДА ЕСТЬNULL(втВозможностьУстановкиПУ.ТехническаяВозможностьПрисутствует, ЛОЖЬ) = ИСТИНА
	|											ТОГДА 2
	|										ИНАЧЕ ВЫБОР
	|												КОГДА ЕСТЬNULL(втПовышающиеКоэффициенты.ПовышающийКоэффициент, 0) = 0
	|													ТОГДА 3
	|												ИНАЧЕ 0
	|											КОНЕЦ
	|									КОНЕЦ
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК IPUUSAGE,
	|	ВЫБОР
	|		КОГДА втБезИтоговИСчетчиков.SERVID В (1, 2, 3, 5, 6, 7, 8, 10, 12, 13)
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(втОбщСчетчики.НаличиеСчетчика, ЛОЖЬ) = ИСТИНА
	|						ТОГДА 1
	|					ИНАЧЕ ВЫБОР
	|							КОГДА НЕ втНазначенныеНачисления.Услуга ЕСТЬ NULL
	|								ТОГДА ВЫБОР
	|										КОГДА ЕСТЬNULL(втВозможностьУстановкиПУ.ТехническаяВозможностьПрисутствует, ЛОЖЬ) = ИСТИНА
	|											ТОГДА 2
	|										ИНАЧЕ ВЫБОР
	|												КОГДА ЕСТЬNULL(втПовышающиеКоэффициенты.ПовышающийКоэффициент, 0) = 0
	|													ТОГДА 3
	|												ИНАЧЕ 0
	|											КОНЕЦ
	|									КОНЕЦ
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ODPUUSAGE
	|ПОМЕСТИТЬ втТаблицаИтоговПоЛС
	|ИЗ
	|	втБезИтоговИСчетчиков КАК втБезИтоговИСчетчиков
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНачисленныеЛьготыДетямСиротам КАК втНачисленныеЛьготыДетямСиротам
	|		ПО втБезИтоговИСчетчиков.LS = втНачисленныеЛьготыДетямСиротам.ЛицевойСчет
	|			И втБезИтоговИСчетчиков.УслугаВБазе = втНачисленныеЛьготыДетямСиротам.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втИндСчетчиков КАК втИндСчетчиков
	|		ПО втБезИтоговИСчетчиков.Помещение = втИндСчетчиков.Помещение
	|			И втБезИтоговИСчетчиков.УслугаВБазе = втИндСчетчиков.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОбщСчетчики КАК втОбщСчетчики
	|		ПО втБезИтоговИСчетчиков.Здание = втОбщСчетчики.Здание
	|			И втБезИтоговИСчетчиков.УслугаВБазе = втОбщСчетчики.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВозможностьУстановкиПУ КАК втВозможностьУстановкиПУ
	|		ПО втБезИтоговИСчетчиков.Здание = втВозможностьУстановкиПУ.Здание
	|			И втБезИтоговИСчетчиков.УслугаВБазе = втВозможностьУстановкиПУ.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПовышающиеКоэффициенты КАК втПовышающиеКоэффициенты
	|		ПО втБезИтоговИСчетчиков.УслугаВБазе = втПовышающиеКоэффициенты.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНазначенныеНачисления КАК втНазначенныеНачисления
	|		ПО втБезИтоговИСчетчиков.LS = втНазначенныеНачисления.Объект
	|			И втБезИтоговИСчетчиков.УслугаВБазе = втНазначенныеНачисления.Услуга
	|
	|СГРУППИРОВАТЬ ПО
	|	втБезИтоговИСчетчиков.LS,
	|	втБезИтоговИСчетчиков.Помещение,
	|	втБезИтоговИСчетчиков.Здание,
	|	втБезИтоговИСчетчиков.OWNERSHIP,
	|	втБезИтоговИСчетчиков.TYPEFLAT,
	|	втБезИтоговИСчетчиков.ISHOSTEL,
	|	втБезИтоговИСчетчиков.LIFT,
	|	втБезИтоговИСчетчиков.AREA,
	|	втБезИтоговИСчетчиков.LIVAREA,
	|	втБезИтоговИСчетчиков.DEBTSUM,
	|	втБезИтоговИСчетчиков.SOI,
	|	втБезИтоговИСчетчиков.SOB,
	|	втБезИтоговИСчетчиков.SYSTEMHOME,
	|	втБезИтоговИСчетчиков.ROOMCOUNT,
	|	втБезИтоговИСчетчиков.TYPEHEAT,
	|	втБезИтоговИСчетчиков.TYPEPLATEH,
	|	втБезИтоговИСчетчиков.TYPEPLATE,
	|	втБезИтоговИСчетчиков.HOTWATER,
	|	втБезИтоговИСчетчиков.COLDWATER,
	|	втБезИтоговИСчетчиков.WHEATER,
	|	втБезИтоговИСчетчиков.GASSUPPLY,
	|	втБезИтоговИСчетчиков.CESSPOOL,
	|	втБезИтоговИСчетчиков.HASBATH,
	|	втБезИтоговИСчетчиков.HASSHOWER,
	|	втБезИтоговИСчетчиков.PLACESHOW,
	|	втБезИтоговИСчетчиков.TMPREGCNT,
	|	втБезИтоговИСчетчиков.FIXREGCNT,
	|	втБезИтоговИСчетчиков.UNREGCNT,
	|	втБезИтоговИСчетчиков.PRIVCHILD,
	|	втБезИтоговИСчетчиков.GUESTCHILD,
	|	втБезИтоговИСчетчиков.DEBT,
	|	втБезИтоговИСчетчиков.NOTFOUND,
	|	втБезИтоговИСчетчиков.DEBTDATE,
	|	втБезИтоговИСчетчиков.DEBTDEAL,
	|	втБезИтоговИСчетчиков.КолВоВсехПроживающих,
	|	втБезИтоговИСчетчиков.SERVID,
	|	втБезИтоговИСчетчиков.УслугаВБазе,
	|	втБезИтоговИСчетчиков.ВидТарифа,
	|	втБезИтоговИСчетчиков.SERVDAYCNT,
	|	втБезИтоговИСчетчиков.CHARGE,
	|	втБезИтоговИСчетчиков.VOLUME,
	|	втБезИтоговИСчетчиков.RECALC,
	|	втБезИтоговИСчетчиков.VRECALC,
	|	втБезИтоговИСчетчиков.VOLUMEODPU,
	|	втБезИтоговИСчетчиков.CHARGEODPU,
	|	ЕСТЬNULL(втНачисленныеЛьготыДетямСиротам.СуммаНачисления, 0),
	|	ЕСТЬNULL(втНачисленныеЛьготыДетямСиротам.Количество, 0),
	|	ВЫБОР
	|		КОГДА втБезИтоговИСчетчиков.SERVID В (1, 2, 3, 5, 6, 7, 8, 10, 12, 13)
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(втИндСчетчиков.НаличиеСчетчика, ЛОЖЬ) = ИСТИНА
	|						ТОГДА 1
	|					ИНАЧЕ ВЫБОР
	|							КОГДА НЕ втНазначенныеНачисления.Услуга ЕСТЬ NULL
	|								ТОГДА ВЫБОР
	|										КОГДА ЕСТЬNULL(втВозможностьУстановкиПУ.ТехническаяВозможностьПрисутствует, ЛОЖЬ) = ИСТИНА
	|											ТОГДА 2
	|										ИНАЧЕ ВЫБОР
	|												КОГДА ЕСТЬNULL(втПовышающиеКоэффициенты.ПовышающийКоэффициент, 0) = 0
	|													ТОГДА 3
	|												ИНАЧЕ 0
	|											КОНЕЦ
	|									КОНЕЦ
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА втБезИтоговИСчетчиков.SERVID В (1, 2, 3, 5, 6, 7, 8, 10, 12, 13)
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(втОбщСчетчики.НаличиеСчетчика, ЛОЖЬ) = ИСТИНА
	|						ТОГДА 1
	|					ИНАЧЕ ВЫБОР
	|							КОГДА НЕ втНазначенныеНачисления.Услуга ЕСТЬ NULL
	|								ТОГДА ВЫБОР
	|										КОГДА ЕСТЬNULL(втВозможностьУстановкиПУ.ТехническаяВозможностьПрисутствует, ЛОЖЬ) = ИСТИНА
	|											ТОГДА 2
	|										ИНАЧЕ ВЫБОР
	|												КОГДА ЕСТЬNULL(втПовышающиеКоэффициенты.ПовышающийКоэффициент, 0) = 0
	|													ТОГДА 3
	|												ИНАЧЕ 0
	|											КОНЕЦ
	|									КОНЕЦ
	|							ИНАЧЕ 0
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИдентифицированныеЖильцы.Фамилия КАК LASTNAME,
	|	втИдентифицированныеЖильцы.Имя КАК FIRSTNAME,
	|	втИдентифицированныеЖильцы.Отчество КАК MIDDLENAME,
	|	втИдентифицированныеЖильцы.Город КАК CITY,
	|	втИдентифицированныеЖильцы.Улица КАК STREET,
	|	втИдентифицированныеЖильцы.Дом КАК HOUSE,
	|	втИдентифицированныеЖильцы.Корпус КАК BUILDING,
	|	втИдентифицированныеЖильцы.Квартира КАК FLAT,
	|	втТаблицаИтоговПоЛС.LS,
	|	втИдентифицированныеЖильцы.Проживающий,
	|	втТаблицаИтоговПоЛС.Помещение,
	|	втТаблицаИтоговПоЛС.Здание,
	|	втТаблицаИтоговПоЛС.КолВоВсехПроживающих,
	|	втТаблицаИтоговПоЛС.OWNERSHIP,
	|	втТаблицаИтоговПоЛС.TYPEFLAT,
	|	втТаблицаИтоговПоЛС.ISHOSTEL,
	|	втТаблицаИтоговПоЛС.LIFT,
	|	втТаблицаИтоговПоЛС.AREA,
	|	втТаблицаИтоговПоЛС.LIVAREA,
	|	втТаблицаИтоговПоЛС.SOI,
	|	втТаблицаИтоговПоЛС.SOB,
	|	втТаблицаИтоговПоЛС.SYSTEMHOME,
	|	втТаблицаИтоговПоЛС.ROOMCOUNT,
	|	втТаблицаИтоговПоЛС.TYPEHEAT,
	|	втТаблицаИтоговПоЛС.TYPEPLATEH,
	|	втТаблицаИтоговПоЛС.TYPEPLATE,
	|	втТаблицаИтоговПоЛС.HOTWATER,
	|	втТаблицаИтоговПоЛС.COLDWATER,
	|	втТаблицаИтоговПоЛС.WHEATER,
	|	втТаблицаИтоговПоЛС.GASSUPPLY,
	|	втТаблицаИтоговПоЛС.CESSPOOL,
	|	втТаблицаИтоговПоЛС.HASBATH,
	|	втТаблицаИтоговПоЛС.HASSHOWER,
	|	втТаблицаИтоговПоЛС.PLACESHOW,
	|	втТаблицаИтоговПоЛС.FIXREGCNT,
	|	втТаблицаИтоговПоЛС.UNREGCNT,
	|	втТаблицаИтоговПоЛС.PRIVCHILD,
	|	втТаблицаИтоговПоЛС.GUESTCHILD,
	|	втТаблицаИтоговПоЛС.TMPREGCNT,
	|	втТаблицаИтоговПоЛС.SERVID,
	|	втТаблицаИтоговПоЛС.SERVDAYCNT,
	|	втТаблицаИтоговПоЛС.VOLUME,
	|	втТаблицаИтоговПоЛС.RECALC,
	|	втТаблицаИтоговПоЛС.VRECALC,
	|	втТаблицаИтоговПоЛС.CHARGE,
	|	втТаблицаИтоговПоЛС.VOLUMEODPU,
	|	втТаблицаИтоговПоЛС.CHARGEODPU,
	|	втТаблицаИтоговПоЛС.BENEFITS,
	|	втТаблицаИтоговПоЛС.VBENEFITS,
	|	втТаблицаИтоговПоЛС.NOTFOUND,
	|	втТаблицаИтоговПоЛС.DEBT,
	|	втТаблицаИтоговПоЛС.DEBTSUM,
	|	втТаблицаИтоговПоЛС.DEBTDATE,
	|	втТаблицаИтоговПоЛС.DEBTDEAL,
	|	втТаблицаИтоговПоЛС.IPUUSAGE,
	|	втТаблицаИтоговПоЛС.ODPUUSAGE
	|ПОМЕСТИТЬ втТаблицаИтоговПоЛССПроживающими
	|ИЗ
	|	втТаблицаИтоговПоЛС КАК втТаблицаИтоговПоЛС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втИдентифицированныеЖильцы КАК втИдентифицированныеЖильцы
	|		ПО втТаблицаИтоговПоЛС.LS = втИдентифицированныеЖильцы.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаДанныхИзФайла.Дата КАК OVERDATE,
	|	втТаблицаДанныхИзФайла.ИД КАК ID,
	|	втТаблицаДанныхИзФайла.СНИЛС КАК SNILS,
	|	втТаблицаДанныхИзФайла.Фамилия КАК LASTNAME,
	|	втТаблицаДанныхИзФайла.Имя КАК FIRSTNAME,
	|	втТаблицаДанныхИзФайла.Отчество КАК MIDDLENAME,
	|	втТаблицаДанныхИзФайла.Город КАК CITY,
	|	втТаблицаДанныхИзФайла.Улица КАК STREET,
	|	втТаблицаДанныхИзФайла.Дом КАК HOUSE,
	|	втТаблицаДанныхИзФайла.Корпус КАК BUILDING,
	|	втТаблицаДанныхИзФайла.Квартира КАК FLAT,
	|	ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.LS, """") КАК LS,
	|	ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.OWNERSHIP, -1) КАК OWNERSHIP,
	|	ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.TYPEFLAT, -1) КАК TYPEFLAT,
	|	ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.ISHOSTEL, -1) КАК ISHOSTEL,
	|	ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.LIFT, -1) КАК LIFT,
	|	ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.AREA, 0) КАК AREA,
	|	ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.LIVAREA, 0) КАК LIVAREA,
	|	ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.SOI, 0) КАК SOI,
	|	ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.SOB, 0) КАК SOB,
	|	ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.SYSTEMHOME, -1) КАК SYSTEMHOME,
	|	ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.ROOMCOUNT, -1) КАК ROOMCOUNT,
	|	ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.TYPEHEAT, -1) КАК TYPEHEAT,
	|	ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.TYPEPLATEH, -1) КАК TYPEPLATEH,
	|	ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.TYPEPLATE, -1) КАК TYPEPLATE,
	|	ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.HOTWATER, -1) КАК HOTWATER,
	|	ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.COLDWATER, -1) КАК COLDWATER,
	|	ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.WHEATER, -1) КАК WHEATER,
	|	ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.GASSUPPLY, -1) КАК GASSUPPLY,
	|	ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.CESSPOOL, -1) КАК CESSPOOL,
	|	ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.HASBATH, -1) КАК HASBATH,
	|	ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.HASSHOWER, -1) КАК HASSHOWER,
	|	ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.PLACESHOW, -1) КАК PLACESHOW,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.SOI, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.КолВоВсехПроживающих, 0) / втТаблицаИтоговПоЛССПроживающими.SOI
	|	КОНЕЦ КАК NODNHWS,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.SOI, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.КолВоВсехПроживающих, 0) / втТаблицаИтоговПоЛССПроживающими.SOI
	|	КОНЕЦ КАК NODNGWS,
	|	ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.FIXREGCNT, 0) КАК FIXREGCNT,
	|	ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.UNREGCNT, 0) КАК UNREGCNT,
	|	ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.PRIVCHILD, 0) КАК PRIVCHILD,
	|	ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.GUESTCHILD, 0) КАК GUESTCHILD,
	|	ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.TMPREGCNT, -1) КАК TMPREGCNT,
	|	ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.SERVID, 0) КАК SERVID,
	|	ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.SERVDAYCNT, 0) КАК SERVDAYCNT,
	|	ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.VOLUME, 0) КАК VOLUME,
	|	ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.RECALC, 0) КАК RECALC,
	|	ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.VRECALC, 0) КАК VRECALC,
	|	ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.CHARGE, 0) КАК CHARGE,
	|	ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.VOLUMEODPU, 0) КАК VOLUMEODPU,
	|	ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.CHARGEODPU, 0) КАК CHARGEODPU,
	|	ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.BENEFITS, 0) КАК BENEFITS,
	|	ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.VBENEFITS, 0) КАК VBENEFITS,
	|	ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.NOTFOUND, -1) КАК NOTFOUND,
	|	ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.DEBT, -1) КАК DEBT,
	|	ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.DEBTSUM, 0) КАК DEBTSUM,
	|	ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.DEBTDATE, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК DEBTDATE,
	|	ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.DEBTDEAL, 0) КАК DEBTDEAL,
	|	ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.IPUUSAGE, 0) КАК IPUUSAGE,
	|	ЕСТЬNULL(втТаблицаИтоговПоЛССПроживающими.ODPUUSAGE, 0) КАК ODPUUSAGE
	|ПОМЕСТИТЬ втИтоговая
	|ИЗ
	|	втТаблицаДанныхИзФайла КАК втТаблицаДанныхИзФайла
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаИтоговПоЛССПроживающими КАК втТаблицаИтоговПоЛССПроживающими
	|		ПО втТаблицаДанныхИзФайла.Фамилия = втТаблицаИтоговПоЛССПроживающими.LASTNAME
	|			И втТаблицаДанныхИзФайла.Имя = втТаблицаИтоговПоЛССПроживающими.FIRSTNAME
	|			И втТаблицаДанныхИзФайла.Отчество = втТаблицаИтоговПоЛССПроживающими.MIDDLENAME
	|			И втТаблицаДанныхИзФайла.Город = втТаблицаИтоговПоЛССПроживающими.CITY
	|			И втТаблицаДанныхИзФайла.Улица = втТаблицаИтоговПоЛССПроживающими.STREET
	|			И втТаблицаДанныхИзФайла.Дом = втТаблицаИтоговПоЛССПроживающими.HOUSE
	|			И втТаблицаДанныхИзФайла.Корпус = втТаблицаИтоговПоЛССПроживающими.BUILDING
	|			И втТаблицаДанныхИзФайла.Квартира = втТаблицаИтоговПоЛССПроживающими.FLAT
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговая.OVERDATE,
	|	втИтоговая.ID,
	|	втИтоговая.SNILS,
	|	втИтоговая.LASTNAME,
	|	втИтоговая.FIRSTNAME,
	|	втИтоговая.MIDDLENAME,
	|	втИтоговая.CITY,
	|	втИтоговая.STREET,
	|	втИтоговая.HOUSE,
	|	втИтоговая.BUILDING,
	|	втИтоговая.FLAT,
	|	втИтоговая.LS,
	|	втИтоговая.OWNERSHIP,
	|	втИтоговая.TYPEFLAT,
	|	втИтоговая.ISHOSTEL,
	|	втИтоговая.LIFT,
	|	втИтоговая.AREA,
	|	втИтоговая.LIVAREA,
	|	втИтоговая.SOI,
	|	втИтоговая.SOB,
	|	втИтоговая.SYSTEMHOME,
	|	втИтоговая.ROOMCOUNT,
	|	втИтоговая.TYPEHEAT,
	|	втИтоговая.TYPEPLATEH,
	|	втИтоговая.TYPEPLATE,
	|	втИтоговая.HOTWATER,
	|	втИтоговая.COLDWATER,
	|	втИтоговая.WHEATER,
	|	втИтоговая.GASSUPPLY,
	|	втИтоговая.CESSPOOL,
	|	втИтоговая.HASBATH,
	|	втИтоговая.HASSHOWER,
	|	втИтоговая.PLACESHOW,
	|	втИтоговая.NODNHWS,
	|	втИтоговая.NODNGWS,
	|	втИтоговая.FIXREGCNT,
	|	втИтоговая.UNREGCNT,
	|	втИтоговая.PRIVCHILD,
	|	втИтоговая.GUESTCHILD,
	|	СУММА(0) КАК AREACHILD,
	|	втИтоговая.TMPREGCNT,
	|	втИтоговая.SERVID,
	|	МАКСИМУМ(втИтоговая.SERVDAYCNT) КАК SERVDAYCNT,
	|	СУММА(втИтоговая.VOLUME) КАК VOLUME,
	|	СУММА(втИтоговая.RECALC) КАК RECALC,
	|	СУММА(втИтоговая.VRECALC) КАК VRECALC,
	|	СУММА(втИтоговая.CHARGE) КАК CHARGE,
	|	СУММА(втИтоговая.VOLUMEODPU) КАК VOLUMEODPU,
	|	СУММА(втИтоговая.CHARGEODPU) КАК CHARGEODPU,
	|	СУММА(втИтоговая.BENEFITS) КАК BENEFITS,
	|	СУММА(втИтоговая.VBENEFITS) КАК VBENEFITS,
	|	втИтоговая.NOTFOUND,
	|	втИтоговая.DEBT,
	|	втИтоговая.DEBTSUM,
	|	втИтоговая.DEBTDATE,
	|	втИтоговая.DEBTDEAL,
	|	МАКСИМУМ(втИтоговая.IPUUSAGE) КАК IPUUSAGE,
	|	МАКСИМУМ(втИтоговая.ODPUUSAGE) КАК ODPUUSAGE
	|ИЗ
	|	втИтоговая КАК втИтоговая
	|
	|СГРУППИРОВАТЬ ПО
	|	втИтоговая.ID,
	|	втИтоговая.SNILS,
	|	втИтоговая.OVERDATE,
	|	втИтоговая.DEBTDATE,
	|	втИтоговая.LASTNAME,
	|	втИтоговая.FIRSTNAME,
	|	втИтоговая.MIDDLENAME,
	|	втИтоговая.CITY,
	|	втИтоговая.STREET,
	|	втИтоговая.HOUSE,
	|	втИтоговая.BUILDING,
	|	втИтоговая.FLAT,
	|	втИтоговая.LS,
	|	втИтоговая.OWNERSHIP,
	|	втИтоговая.TYPEFLAT,
	|	втИтоговая.ISHOSTEL,
	|	втИтоговая.LIFT,
	|	втИтоговая.AREA,
	|	втИтоговая.LIVAREA,
	|	втИтоговая.SOI,
	|	втИтоговая.SOB,
	|	втИтоговая.SYSTEMHOME,
	|	втИтоговая.ROOMCOUNT,
	|	втИтоговая.TYPEHEAT,
	|	втИтоговая.TYPEPLATEH,
	|	втИтоговая.TYPEPLATE,
	|	втИтоговая.HOTWATER,
	|	втИтоговая.COLDWATER,
	|	втИтоговая.WHEATER,
	|	втИтоговая.GASSUPPLY,
	|	втИтоговая.CESSPOOL,
	|	втИтоговая.HASBATH,
	|	втИтоговая.HASSHOWER,
	|	втИтоговая.PLACESHOW,
	|	втИтоговая.NODNHWS,
	|	втИтоговая.NODNGWS,
	|	втИтоговая.FIXREGCNT,
	|	втИтоговая.UNREGCNT,
	|	втИтоговая.PRIVCHILD,
	|	втИтоговая.GUESTCHILD,
	|	втИтоговая.TMPREGCNT,
	|	втИтоговая.SERVID,
	|	втИтоговая.NOTFOUND,
	|	втИтоговая.DEBT,
	|	втИтоговая.DEBTSUM,
	|	втИтоговая.DEBTDEAL
	|
	|УПОРЯДОЧИТЬ ПО
	|	втИтоговая.LS,
	|	втИтоговая.LASTNAME,
	|	втИтоговая.FIRSTNAME,
	|	втИтоговая.MIDDLENAME,
	|	втИтоговая.SERVID";
	
	ТаблицаДанныхФайла = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Получает таблицу жильцов идентифицированных с записями из файла-запроса.
//
Функция ПолучитьТаблицуИдентифицированныхЖильцов(ТаблицаДанныхФайла, ТаблицаАдресов, ТаблицаФИО)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИзФайла.LASTNAME КАК Фамилия,
	|	ТаблицаИзФайла.FIRSTNAME КАК Имя,
	|	ТаблицаИзФайла.MIDDLENAME КАК Отчество,
	|	ТаблицаИзФайла.CITY КАК Город,
	|	ТаблицаИзФайла.STREET КАК Улица,
	|	ТаблицаИзФайла.HOUSE КАК Дом,
	|	ТаблицаИзФайла.BUILDING КАК Корпус,
	|	ТаблицаИзФайла.FLAT КАК Квартира
	|ПОМЕСТИТЬ втТаблицаДанныхИзФайла
	|ИЗ
	|	&ТаблицаИзФайла КАК ТаблицаИзФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаФИО.ФизическоеЛицо,
	|	ТаблицаФИО.Фамилия,
	|	ТаблицаФИО.Имя,
	|	ТаблицаФИО.Отчество
	|ПОМЕСТИТЬ втФИОФизЛиц
	|ИЗ
	|	&ТаблицаФИО КАК ТаблицаФИО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Жильцы.Ссылка КАК Проживающий,
	|	УПЖКХ_Жильцы.ФизЛицо,
	|	УПЖКХ_Жильцы.Владелец.Адрес.Владелец КАК Здание,
	|	УПЖКХ_Жильцы.Владелец.Адрес.Код КАК Квартира,
	|	УПЖКХ_Жильцы.Владелец КАК ЛицевойСчет
	|ПОМЕСТИТЬ втЖильцы
	|ИЗ
	|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
	|ГДЕ
	|	НЕ УПЖКХ_Жильцы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцы.Проживающий,
	|	ЕСТЬNULL(втФИОФизЛиц.Фамилия, """") КАК Фамилия,
	|	ЕСТЬNULL(втФИОФизЛиц.Имя, """") КАК Имя,
	|	ЕСТЬNULL(втФИОФизЛиц.Отчество, """") КАК Отчество,
	|	втЖильцы.Здание,
	|	втЖильцы.Квартира,
	|	втЖильцы.ЛицевойСчет
	|ПОМЕСТИТЬ втЖильцыСФИО
	|ИЗ
	|	втЖильцы КАК втЖильцы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втФИОФизЛиц КАК втФИОФизЛиц
	|		ПО втЖильцы.ФизЛицо = втФИОФизЛиц.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаАдресов.Здание,
	|	ТаблицаАдресов.НаселенныйПункт,
	|	ТаблицаАдресов.Улица,
	|	ТаблицаАдресов.Дом,
	|	ТаблицаАдресов.Корпус
	|ПОМЕСТИТЬ втАдреса
	|ИЗ
	|	&ТаблицаАдресов КАК ТаблицаАдресов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцыСФИО.Проживающий,
	|	втЖильцыСФИО.Фамилия,
	|	втЖильцыСФИО.Имя,
	|	втЖильцыСФИО.Отчество,
	|	ЕСТЬNULL(втАдреса.НаселенныйПункт, """") КАК НаселенныйПункт,
	|	ЕСТЬNULL(втАдреса.Улица, """") КАК Улица,
	|	ЕСТЬNULL(втАдреса.Дом, """") КАК Дом,
	|	ЕСТЬNULL(втАдреса.Корпус, """") КАК Корпус,
	|	втЖильцыСФИО.Квартира,
	|	втЖильцыСФИО.ЛицевойСчет
	|ПОМЕСТИТЬ втЖильцыСАдресами
	|ИЗ
	|	втЖильцыСФИО КАК втЖильцыСФИО
	|		ЛЕВОЕ СОЕДИНЕНИЕ втАдреса КАК втАдреса
	|		ПО втЖильцыСФИО.Здание = втАдреса.Здание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцыСАдресами.Проживающий,
	|	втЖильцыСАдресами.Фамилия,
	|	втЖильцыСАдресами.Имя,
	|	втЖильцыСАдресами.Отчество,
	|	втЖильцыСАдресами.НаселенныйПункт КАК Город,
	|	втЖильцыСАдресами.Улица,
	|	втЖильцыСАдресами.Дом,
	|	втЖильцыСАдресами.Корпус,
	|	втЖильцыСАдресами.Квартира,
	|	втЖильцыСАдресами.ЛицевойСчет
	|ИЗ
	|	втТаблицаДанныхИзФайла КАК втТаблицаДанныхИзФайла
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЖильцыСАдресами КАК втЖильцыСАдресами
	|		ПО втТаблицаДанныхИзФайла.Фамилия = втЖильцыСАдресами.Фамилия
	|			И втТаблицаДанныхИзФайла.Имя = втЖильцыСАдресами.Имя
	|			И втТаблицаДанныхИзФайла.Отчество = втЖильцыСАдресами.Отчество
	|			И втТаблицаДанныхИзФайла.Город = втЖильцыСАдресами.НаселенныйПункт
	|			И втТаблицаДанныхИзФайла.Улица = втЖильцыСАдресами.Улица
	|			И втТаблицаДанныхИзФайла.Дом = втЖильцыСАдресами.Дом
	|			И втТаблицаДанныхИзФайла.Корпус = втЖильцыСАдресами.Корпус
	|			И втТаблицаДанныхИзФайла.Квартира = втЖильцыСАдресами.Квартира
	|
	|СГРУППИРОВАТЬ ПО
	|	втЖильцыСАдресами.ЛицевойСчет,
	|	втЖильцыСАдресами.Проживающий,
	|	втЖильцыСАдресами.Фамилия,
	|	втЖильцыСАдресами.Имя,
	|	втЖильцыСАдресами.Отчество,
	|	втЖильцыСАдресами.НаселенныйПункт,
	|	втЖильцыСАдресами.Улица,
	|	втЖильцыСАдресами.Дом,
	|	втЖильцыСАдресами.Корпус,
	|	втЖильцыСАдресами.Квартира";
	
	Запрос.УстановитьПараметр("ТаблицаИзФайла", ТаблицаДанныхФайла);
	Запрос.УстановитьПараметр("ДатаКонца",      КонецМесяца(Период));
	Запрос.УстановитьПараметр("ТаблицаАдресов", ТаблицаАдресов);
	Запрос.УстановитьПараметр("ТаблицаФИО",     ТаблицаФИО);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции // ПолучитьТаблицуИдентифицированныхЖильцов()

// Формирует таблицу начилений для выгрузки данных в ОСЗН г.Красноуральск.
//
Процедура СформироватьТаблицуНачисленийСвердловскаяОбласть(ТолькоЛьготники, ИдентификаторУК) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаНачала",     НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ДатаКонца",      КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("УслугиВБазе",    СвердловскаяОбластьКрасноуральск_УслугиВБазе);

	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	ВыборЛьготников = "";
	Если ТолькоЛьготники Тогда
		ВыборЛьготников = 
		"ВЫБРАТЬ
		|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий КАК Проживающий
		|ИЗ
		|	РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(&ДатаНачала, ДатаИзменения <= &ДатаНачала) КАК КВП_НазначенныеЛьготыСрезПоследних
		|ГДЕ
		|	КВП_НазначенныеЛьготыСрезПоследних.Действие
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КВП_НазначенныеЛьготы.Проживающий
		|ИЗ
		|	РегистрСведений.КВП_НазначенныеЛьготы КАК КВП_НазначенныеЛьготы
		|ГДЕ
		|	КВП_НазначенныеЛьготы.ДатаИзменения МЕЖДУ &ДатаНачала И &ДатаКонца
		|	И КВП_НазначенныеЛьготы.Действие";
	Иначе
		ВыборЛьготников = 
		"ВЫБРАТЬ
		|	УПЖКХ_Жильцы.Ссылка КАК Проживающий
		|ИЗ
		|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
		|ГДЕ
		|	НЕ УПЖКХ_Жильцы.ПометкаУдаления";
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаЛьготников.Проживающий,
	|	ТаблицаЛьготников.Проживающий.Владелец КАК ЛицевойСчет
	|ПОМЕСТИТЬ СписокЛьготников
	|ИЗ
	|	(" +ВыборЛьготников + ") КАК ТаблицаЛьготников
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УслугиВБазе.Услуга,
	|	УслугиВБазе.КодУслуги
	|ПОМЕСТИТЬ втУслугиВБазе
	|ИЗ
	|	&УслугиВБазе КАК УслугиВБазе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	СУММА(УПЖКХ_НачисленияОбороты.ДнейНачисленоОборот) КАК N_DN,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика), ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ISCOUNTER,
	|	СУММА(УПЖКХ_НачисленияОбороты.Количество) КАК V,
	|	МАКСИМУМ(УПЖКХ_НачисленияОбороты.Тариф) КАК Тариф,
	|	СУММА(УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот) КАК СуммаНачислений,
	|	втУслугиВБазе.КодУслуги,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|			ТОГДА УПЖКХ_НачисленияОбороты.МесяцНачисления
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ КАК МесяцПерерасчета,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ТипПерерасчета
	|ПОМЕСТИТЬ втНачисления
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНачала,
	|			&ДатаКонца,
	|			,
	|			НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ВводНачальногоСальдо))
	|				И Организация = &Организация
	|				И НЕ РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы))
	|				И Услуга В
	|					(ВЫБРАТЬ
	|						втУслугиВБазе.Услуга
	|					ИЗ
	|						втУслугиВБазе КАК втУслугиВБазе)) КАК УПЖКХ_НачисленияОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУслугиВБазе КАК втУслугиВБазе
	|		ПО УПЖКХ_НачисленияОбороты.Услуга = втУслугиВБазе.Услуга
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика), ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	втУслугиВБазе.КодУслуги,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|			ТОГДА УПЖКХ_НачисленияОбороты.МесяцНачисления
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втНачисления.ЛицевойСчет КАК ЛицевойСчет,
	|	втНачисления.N_DN,
	|	втНачисления.Услуга,
	|	втНачисления.ISCOUNTER,
	|	втНачисления.V,
	|	втНачисления.Тариф КАК Тариф,
	|	ЕСТЬNULL(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток, 0) КАК СуммаДолга,
	|	втНачисления.КодУслуги,
	|	втНачисления.СуммаНачислений,
	|	втНачисления.МесяцПерерасчета,
	|	втНачисления.ТипПерерасчета
	|ПОМЕСТИТЬ втСальдо
	|ИЗ
	|	втНачисления КАК втНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|				&ДатаКонца,
	|				ЛицевойСчет В
	|						(ВЫБРАТЬ
	|							втНачисления.ЛицевойСчет КАК ЛицевойСчет
	|						ИЗ
	|							втНачисления КАК втНачисления)
	|					И Организация = &Организация) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|		ПО втНачисления.ЛицевойСчет = КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект КАК Помещение,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Владелец КАК Здание
	|ПОМЕСТИТЬ втДействующиеЛС
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|		&ДатаКонца,
	|					ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					СписокЛьготников.ЛицевойСчет
	|				ИЗ
	|					СписокЛьготников КАК СписокЛьготников)) КАК КВП_ЛицевыеСчетаСрезПоследних
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.ЛицевойСчет,
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втУчетКоличестваЖильцов
	|ИЗ
	|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втДействующиеЛС.ЛицевойСчет
	|				ИЗ
	|					втДействующиеЛС КАК втДействующиеЛС)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец) КАК КоличествоЗаргистрированных
	|ПОМЕСТИТЬ втЗарегистрированоРС
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втДействующиеЛС.ЛицевойСчет
	|				ИЗ
	|					втДействующиеЛС КАК втДействующиеЛС)) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДействующиеЛС.ЛицевойСчет,
	|	втДействующиеЛС.Помещение,
	|	втДействующиеЛС.Здание,
	|	ВЫБОР
	|		КОГДА &УказыватьКоличествоПрожИЗарегЧислами = ИСТИНА
	|			ТОГДА ЕСТЬNULL(втУчетКоличестваЖильцов.КоличествоЗарегистрированных, 0)
	|		ИНАЧЕ ЕСТЬNULL(втЗарегистрированоРС.КоличествоЗаргистрированных, 0)
	|	КОНЕЦ КАК КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втЗарегистрировано
	|ИЗ
	|	втДействующиеЛС КАК втДействующиеЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЗарегистрированоРС КАК втЗарегистрированоРС
	|		ПО втДействующиеЛС.ЛицевойСчет = втЗарегистрированоРС.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУчетКоличестваЖильцов КАК втУчетКоличестваЖильцов
	|		ПО втДействующиеЛС.ЛицевойСчет = втУчетКоличестваЖильцов.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втЗарегистрировано.ЛицевойСчет КАК ЛицевойСчет,
	|	втЗарегистрировано.Помещение КАК Помещение,
	|	втЗарегистрировано.Здание КАК Здание,
	|	втЗарегистрировано.КоличествоЗарегистрированных,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец
	|ПОМЕСТИТЬ втОтветственныеЛица
	|ИЗ
	|	втЗарегистрировано КАК втЗарегистрировано
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(
	|				&ДатаКонца,
	|				ЛицевойСчет В
	|						(ВЫБРАТЬ
	|							втДействующиеЛС.ЛицевойСчет
	|						ИЗ
	|							втДействующиеЛС КАК втДействующиеЛС)
	|					И ОтветственныйВладелец ССЫЛКА Справочник.УПЖКХ_Жильцы) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
	|		ПО втЗарегистрировано.ЛицевойСчет = УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втОтветственныеЛица.ЛицевойСчет,
	|	втОтветственныеЛица.Помещение,
	|	втОтветственныеЛица.Здание,
	|	втОтветственныеЛица.КоличествоЗарегистрированных,
	|	ЕСТЬNULL(ФИОФизическихЛицСрезПоследних.Фамилия, """") КАК Фамилия,
	|	ЕСТЬNULL(ФИОФизическихЛицСрезПоследних.Имя, """") КАК Имя,
	|	ЕСТЬNULL(ФИОФизическихЛицСрезПоследних.Отчество, """") КАК Отчество
	|ПОМЕСТИТЬ втФИО
	|ИЗ
	|	втОтветственныеЛица КАК втОтветственныеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(
	|				&ДатаКонца,
	|				ФизическоеЛицо В
	|					(ВЫБРАТЬ
	|						втОтветственныеЛица.ОтветственныйВладелец.ФизЛицо
	|					ИЗ
	|						втОтветственныеЛица КАК втОтветственныеЛица)) КАК ФИОФизическихЛицСрезПоследних
	|		ПО втОтветственныеЛица.ОтветственныйВладелец.ФизЛицо = ФИОФизическихЛицСрезПоследних.ФизическоеЛицо";
	
	Запрос.УстановитьПараметр("УказыватьКоличествоПрожИЗарегЧислами", Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Получить());
	
	Запрос.Выполнить();
	
	ЗапросПоЗданиям = Новый Запрос;
	ЗапросПоЗданиям.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросПоЗданиям.Текст = 
	"ВЫБРАТЬ
	|	втФИО.Здание КАК Объект
	|ИЗ
	|	втФИО КАК втФИО
	|
	|СГРУППИРОВАТЬ ПО
	|	втФИО.Здание";
	
	МассивОбъектов = ЗапросПоЗданиям.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	втФИО.ЛицевойСчет,
	|	втФИО.Помещение,
	|	втФИО.Здание,
	|	втФИО.КоличествоЗарегистрированных,
	|	втФИО.Фамилия,
	|	втФИО.Имя,
	|	втФИО.Отчество,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Улица, """") КАК Улица,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Дом, """") КАК Дом,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Корпус, """") КАК Корпус
	|ПОМЕСТИТЬ втАдреса
	|ИЗ
	|	втФИО КАК втФИО
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК втКонтактнаяИнформация
	|		ПО втФИО.Здание = втКонтактнаяИнформация.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель, 0) = 0
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель, 0) = 0
	|						ТОГДА КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель / КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДоляЛС,
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет
	|ПОМЕСТИТЬ втДоли
	|ИЗ
	|	РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втАдреса.ЛицевойСчет
	|				ИЗ
	|					втАдреса КАК втАдреса)) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втАдреса.ЛицевойСчет КАК ЛицевойСчет,
	|	втАдреса.Помещение,
	|	втАдреса.Здание,
	|	втАдреса.Фамилия,
	|	втАдреса.Имя,
	|	втАдреса.Отчество,
	|	втАдреса.Улица,
	|	втАдреса.Дом,
	|	втАдреса.Корпус,
	|	втАдреса.Помещение.Код КАК Квартира,
	|	ЕСТЬNULL(втДоли.ДоляЛС, 0) * ЕСТЬNULL(КВП_ПлощадьПомещенияСрезПоследних.Площадь, 0) КАК ОбщаяПлощадь,
	|	втАдреса.КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втПлощадь
	|ИЗ
	|	втАдреса КАК втАдреса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|				&ДатаКонца,
	|				Объект В
	|						(ВЫБРАТЬ
	|							втАдреса.Помещение
	|						ИЗ
	|							втАдреса КАК втАдреса)
	|					И ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)) КАК КВП_ПлощадьПомещенияСрезПоследних
	|		ПО втАдреса.Помещение = КВП_ПлощадьПомещенияСрезПоследних.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДоли КАК втДоли
	|		ПО втАдреса.ЛицевойСчет = втДоли.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПлощадь.ЛицевойСчет КАК LS,
	|	втПлощадь.Улица КАК STR,
	|	втПлощадь.Дом КАК DOM,
	|	втПлощадь.Корпус КАК KOR,
	|	втПлощадь.Квартира КАК KV,
	|	втПлощадь.Фамилия КАК F,
	|	втПлощадь.Имя КАК I,
	|	втПлощадь.Отчество КАК O,
	|	втПлощадь.КоличествоЗарегистрированных КАК N,
	|	втПлощадь.ОбщаяПлощадь КАК S,
	|	втСальдо.N_DN,
	|	втСальдо.Услуга КАК Услуга,
	|	втСальдо.КодУслуги КАК SERVICE,
	|	втСальдо.ISCOUNTER,
	|	втСальдо.V,
	|	втСальдо.Тариф КАК TARIF,
	|	втСальдо.СуммаДолга КАК DOLG,
	|	втСальдо.СуммаНачислений КАК SUMMA,
	|	втСальдо.МесяцПерерасчета КАК M_REDED,
	|	втСальдо.ТипПерерасчета КАК REDED
	|ПОМЕСТИТЬ втБезНорм
	|ИЗ
	|	втПлощадь КАК втПлощадь
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСальдо КАК втСальдо
	|		ПО втПлощадь.ЛицевойСчет = втСальдо.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втБезНорм.LS КАК ЛицевойСчет,
	|	втБезНорм.STR,
	|	втБезНорм.DOM,
	|	втБезНорм.KOR,
	|	втБезНорм.KV,
	|	втБезНорм.F,
	|	втБезНорм.I,
	|	втБезНорм.O,
	|	втБезНорм.N,
	|	втБезНорм.S,
	|	втБезНорм.N_DN,
	|	втБезНорм.Услуга КАК Услуга,
	|	втБезНорм.SERVICE,
	|	втБезНорм.ISCOUNTER,
	|	втБезНорм.V,
	|	втБезНорм.TARIF,
	|	втБезНорм.DOLG,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК DATA,
	|	втБезНорм.SUMMA,
	|	втБезНорм.M_REDED,
	|	втБезНорм.REDED,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НЕ КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки = ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой)
	|				ТОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления
	|			ИНАЧЕ КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Размер
	|		КОНЕЦ, 0) КАК NORMATIV,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НЕ КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки = ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ, ЛОЖЬ) КАК РасчетНормыСложный
	|ИЗ
	|	втБезНорм КАК втБезНорм
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(
	|				&ДатаКонца,
	|				(ЛицевойСчет, Услуга) В
	|					(ВЫБРАТЬ
	|						втБезНорм.LS,
	|						втБезНорм.Услуга
	|					ИЗ
	|						втБезНорм КАК втБезНорм)) КАК КВП_НормыПотребленияУслугЛССрезПоследних
	|		ПО втБезНорм.LS = КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет
	|			И втБезНорм.Услуга = КВП_НормыПотребленияУслугЛССрезПоследних.Услуга
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЛицевойСчет,
	|	Услуга";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	РезультатЗапроса.Колонки.Добавить("LS", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(10));
	РезультатЗапроса.Колонки.Добавить("UK", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(4));
	
	Для Каждого СтрокаТаблицы ИЗ РезультатЗапроса Цикл
		
		// Заполнение тарифов.
	
		Если СтрокаТаблицы.TARIF = 0 Тогда
			ТарифПоУслуге = ПолучитьТарифПоЛицевомуСчету(КонецМесяца(Период), Организация, СтрокаТаблицы.Услуга, СтрокаТаблицы.ЛицевойСчет);
			СтрокаТаблицы.TARIF = ТарифПоУслуге;
		КонецЕсли;
		
		// Заполнение нормативов потребления.
		
		Если СтрокаТаблицы.РасчетНормыСложный Тогда
			РазмерНормы = ПолучитьРазмерНормыПотребления(СтрокаТаблицы.ЛицевойСчет, КонецМесяца(Период), СтрокаТаблицы.NORMATIV, Организация);
			СтрокаТаблицы.NORMATIV = РазмерНормы;
		КонецЕсли;
		
		СтрокаТаблицы.LS   = ПодготовитьНомерЛСДляВывода(СтрокаТаблицы.ЛицевойСчет.Наименование);
		СтрокаТаблицы.DATA = КонецМесяца(Период);
		СтрокаТаблицы.UK   = ИдентификаторУК;
		
	КонецЦикла;
	
	СвердловскаяОбластьКрасноуральск_ТаблицаНачислений.Загрузить(РезультатЗапроса);
	
КонецПроцедуры // СформироватьТаблицуНачисленийСвердловскаяОбласть()

// Формирует таблицу начилений для выгрузки данных в ОСЗН г.Реж.
//
Процедура СформироватьТаблицуНачисленийСвердловскаяОбластьРеж(ТолькоЛьготники) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаНачала",     НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ДатаКонца",      КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",    Организация);
	Запрос.УстановитьПараметр("УслугиВБазе",    СвердловскаяОбластьРеж_УслугиВБазе.Выгрузить());

	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	ВыборЛьготников = "";
	Если ТолькоЛьготники Тогда
		ВыборЛьготников = 
		"ВЫБРАТЬ
		|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий КАК Проживающий
		|ИЗ
		|	РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(&ДатаНачала, ДатаИзменения <= &ДатаНачала) КАК КВП_НазначенныеЛьготыСрезПоследних
		|ГДЕ
		|	КВП_НазначенныеЛьготыСрезПоследних.Действие
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КВП_НазначенныеЛьготы.Проживающий
		|ИЗ
		|	РегистрСведений.КВП_НазначенныеЛьготы КАК КВП_НазначенныеЛьготы
		|ГДЕ
		|	КВП_НазначенныеЛьготы.ДатаИзменения МЕЖДУ &ДатаНачала И &ДатаКонца
		|	И КВП_НазначенныеЛьготы.Действие";
	Иначе
		ВыборЛьготников = 
		"ВЫБРАТЬ
		|	УПЖКХ_Жильцы.Ссылка КАК Проживающий
		|ИЗ
		|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
		|ГДЕ
		|	НЕ УПЖКХ_Жильцы.ПометкаУдаления";
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаЛьготников.Проживающий,
	|	ТаблицаЛьготников.Проживающий.Владелец КАК ЛицевойСчет
	|ПОМЕСТИТЬ СписокЛьготников
	|ИЗ
	|	(" +ВыборЛьготников + ") КАК ТаблицаЛьготников
	|
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УслугиВБазе.Услуга,
	|	УслугиВБазе.КодУслуги
	|ПОМЕСТИТЬ втУслугиВБазе
	|ИЗ
	|	&УслугиВБазе КАК УслугиВБазе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	СУММА(УПЖКХ_НачисленияОбороты.Количество) КАК V,
	|	УПЖКХ_НачисленияОбороты.Тариф,
	|	УПЖКХ_НачисленияОбороты.ВидТарифа,
	|	СУММА(УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот) КАК СуммаНачислений,
	|	втУслугиВБазе.КодУслуги,
	//|	ВЫБОР
	//|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	//|			ТОГДА УПЖКХ_НачисленияОбороты.МесяцНачисления
	//|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	//|	КОНЕЦ КАК МесяцПерерасчета,
	|	УПЖКХ_НачисленияОбороты.МесяцНачисления КАК МесяцПерерасчета,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ТипПерерасчета,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|			ТОГДА Истина
	|		ИНАЧЕ Ложь
	|	КОНЕЦ КАК ЭтоОПУ
	|ПОМЕСТИТЬ втНачисленияБезГруппировки
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНачала,
	|			&ДатаКонца,
	|			,
	|			НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ВводНачальногоСальдо))
	|				И Организация = &Организация
	|				И НЕ РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы))
	|				И Услуга В
	|					(ВЫБРАТЬ
	|						втУслугиВБазе.Услуга
	|					ИЗ
	|						втУслугиВБазе КАК втУслугиВБазе)) КАК УПЖКХ_НачисленияОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУслугиВБазе КАК втУслугиВБазе
	|		ПО УПЖКХ_НачисленияОбороты.Услуга = втУслугиВБазе.Услуга
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.Тариф,
	|	УПЖКХ_НачисленияОбороты.ВидТарифа,
	|	втУслугиВБазе.КодУслуги,
	//|	ВЫБОР
	//|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	//|			ТОГДА УПЖКХ_НачисленияОбороты.МесяцНачисления
	//|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	//|	КОНЕЦ,
	|	УПЖКХ_НачисленияОбороты.МесяцНачисления,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|			ТОГДА Истина
	|		ИНАЧЕ Ложь
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втНачисленияБезГруппировки.ЛицевойСчет КАК ЛицевойСчет,
	|	втНачисленияБезГруппировки.Услуга,
	|	СУММА(втНачисленияБезГруппировки.V) КАК V,
	|	МАКСИМУМ(втНачисленияБезГруппировки.Тариф) КАК Тариф,
	|	ВЫБОР
	|		КОГДА втНачисленияБезГруппировки.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Ночной)
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК НомерШкалы,
	|	ВЫБОР
	|		КОГДА втНачисленияБезГруппировки.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Ночной) И втНачисленияБезГруппировки.ЭтоОПУ = ИСТИНА
	|			ТОГДА 4
	|		КОГДА втНачисленияБезГруппировки.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Ночной) И втНачисленияБезГруппировки.ЭтоОПУ = ЛОЖЬ
	|			ТОГДА 3
	|		КОГДА НЕ втНачисленияБезГруппировки.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Ночной) И втНачисленияБезГруппировки.ЭтоОПУ = ИСТИНА
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ПорядокНачисления,
	|	втНачисленияБезГруппировки.КодУслуги,
	|	СУММА(втНачисленияБезГруппировки.СуммаНачислений) КАК СуммаНачислений,
	|	втНачисленияБезГруппировки.МесяцПерерасчета,
	|	втНачисленияБезГруппировки.ТипПерерасчета
	|ПОМЕСТИТЬ втНачисления
	|ИЗ
	|	втНачисленияБезГруппировки КАК втНачисленияБезГруппировки
	|
	|СГРУППИРОВАТЬ ПО
	|	втНачисленияБезГруппировки.ЛицевойСчет,
	|	втНачисленияБезГруппировки.Услуга,
	|	ВЫБОР
	|		КОГДА втНачисленияБезГруппировки.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Ночной)
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА втНачисленияБезГруппировки.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Ночной) И втНачисленияБезГруппировки.ЭтоОПУ = ИСТИНА
	|			ТОГДА 4
	|		КОГДА втНачисленияБезГруппировки.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Ночной) И втНачисленияБезГруппировки.ЭтоОПУ = ЛОЖЬ
	|			ТОГДА 3
	|		КОГДА НЕ втНачисленияБезГруппировки.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Ночной) И втНачисленияБезГруппировки.ЭтоОПУ = ИСТИНА
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	втНачисленияБезГруппировки.КодУслуги,
	|	втНачисленияБезГруппировки.МесяцПерерасчета,
	|	втНачисленияБезГруппировки.ТипПерерасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втНачисления.ЛицевойСчет КАК ЛицевойСчет,
	|	втНачисления.Услуга,
	|	втНачисления.V,
	|	втНачисления.Тариф КАК Тариф,
	|	втНачисления.НомерШкалы КАК НомерШкалы,
	|	втНачисления.ПорядокНачисления КАК ПорядокНачисления,
	|	ЕСТЬNULL(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток, 0) КАК СуммаДолга,
	|	втНачисления.КодУслуги,
	|	втНачисления.СуммаНачислений,
	|	втНачисления.МесяцПерерасчета,
	|	втНачисления.ТипПерерасчета
	|ПОМЕСТИТЬ втСальдо
	|ИЗ
	|	втНачисления КАК втНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|				&ДатаКонца,
	|				ЛицевойСчет В
	|						(ВЫБРАТЬ
	|							втНачисления.ЛицевойСчет КАК ЛицевойСчет
	|						ИЗ
	|							втНачисления КАК втНачисления)
	|					И Организация = &Организация) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|		ПО втНачисления.ЛицевойСчет = КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект КАК Помещение,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Владелец КАК Здание
	|ПОМЕСТИТЬ втДействующиеЛС
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|		&ДатаКонца,
	|					ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					СписокЛьготников.ЛицевойСчет
	|				ИЗ
	|					СписокЛьготников КАК СписокЛьготников)) КАК КВП_ЛицевыеСчетаСрезПоследних
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втДействующиеЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	втДействующиеЛС.Помещение КАК Помещение,
	|	втДействующиеЛС.Здание КАК Здание,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец
	|ПОМЕСТИТЬ втОтветственныеЛица
	|ИЗ
	|	втДействующиеЛС КАК втДействующиеЛС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(
	|				&ДатаКонца,
	|				ЛицевойСчет В
	|						(ВЫБРАТЬ
	|							втДействующиеЛС.ЛицевойСчет
	|						ИЗ
	|							втДействующиеЛС КАК втДействующиеЛС)
	|					И ОтветственныйВладелец ССЫЛКА Справочник.УПЖКХ_Жильцы) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
	|		ПО втДействующиеЛС.ЛицевойСчет = УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втОтветственныеЛица.ЛицевойСчет,
	|	втОтветственныеЛица.Помещение,
	|	втОтветственныеЛица.Здание,
	|	ЕСТЬNULL(ФИОФизическихЛицСрезПоследних.Фамилия, """") КАК Фамилия,
	|	ЕСТЬNULL(ФИОФизическихЛицСрезПоследних.Имя, """") КАК Имя,
	|	ЕСТЬNULL(ФИОФизическихЛицСрезПоследних.Отчество, """") КАК Отчество
	|ПОМЕСТИТЬ втФИО
	|ИЗ
	|	втОтветственныеЛица КАК втОтветственныеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(
	|				&ДатаКонца,
	|				ФизическоеЛицо В
	|					(ВЫБРАТЬ
	|						втОтветственныеЛица.ОтветственныйВладелец.ФизЛицо
	|					ИЗ
	|						втОтветственныеЛица КАК втОтветственныеЛица)) КАК ФИОФизическихЛицСрезПоследних
	|		ПО втОтветственныеЛица.ОтветственныйВладелец.ФизЛицо = ФИОФизическихЛицСрезПоследних.ФизическоеЛицо";
	
	Запрос.УстановитьПараметр("УказыватьКоличествоПрожИЗарегЧислами", Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Получить());
	
	Запрос.Выполнить();
	
	ЗапросПоЗданиям = Новый Запрос;
	ЗапросПоЗданиям.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросПоЗданиям.Текст = 
	"ВЫБРАТЬ
	|	втФИО.Здание КАК Объект
	|ИЗ
	|	втФИО КАК втФИО
	|
	|СГРУППИРОВАТЬ ПО
	|	втФИО.Здание";
	
	МассивОбъектов = ЗапросПоЗданиям.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	втФИО.ЛицевойСчет,
	|	втФИО.Помещение,
	|	втФИО.Здание,
	|	втФИО.Фамилия,
	|	втФИО.Имя,
	|	втФИО.Отчество,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НЕ втКонтактнаяИнформация.Город = """"
	|				ТОГДА втКонтактнаяИнформация.Город
	|			КОГДА НЕ втКонтактнаяИнформация.НаселенныйПункт = """"
	|				ТОГДА втКонтактнаяИнформация.НаселенныйПункт
	|			ИНАЧЕ втКонтактнаяИнформация.Регион
	|		КОНЕЦ, """") КАК НаселенныйПункт,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Улица, """") КАК Улица,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Дом, """") КАК Дом,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Корпус, """") КАК Корпус,
	|	втФИО.Помещение.Код КАК Квартира
	|ПОМЕСТИТЬ втАдреса
	|ИЗ
	|	втФИО КАК втФИО
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК втКонтактнаяИнформация
	|		ПО втФИО.Здание = втКонтактнаяИнформация.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втАдреса.ЛицевойСчет КАК LS,
	|	втАдреса.НаселенныйПункт КАК VIL,
	|	втАдреса.Улица КАК STR,
	|	втАдреса.Дом КАК DOM,
	|	втАдреса.Корпус КАК KOR,
	|	втАдреса.Квартира КАК KV,
	|	втАдреса.Фамилия КАК F,
	|	втАдреса.Имя КАК I,
	|	втАдреса.Отчество КАК O,
	|	втСальдо.Услуга КАК Услуга,
	|	втСальдо.КодУслуги КАК SERVICE,
	|	втСальдо.V,
	|	втСальдо.Тариф КАК TARIF,
	|	втСальдо.НомерШкалы КАК SH,
	|	втСальдо.ПорядокНачисления КАК ORD,
	|	втСальдо.СуммаДолга КАК DOLG_AB,
	|	втСальдо.СуммаНачислений КАК SUMMA,
	|	втСальдо.МесяцПерерасчета КАК P_DATA,
	|	втСальдо.ТипПерерасчета КАК REDED
	|ПОМЕСТИТЬ втБезНорм
	|ИЗ
	|	втАдреса КАК втАдреса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСальдо КАК втСальдо
	|		ПО втАдреса.ЛицевойСчет = втСальдо.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втБезНорм.LS КАК ЛицевойСчет,
	|	втБезНорм.VIL,
	|	втБезНорм.STR,
	|	втБезНорм.DOM,
	|	втБезНорм.KOR,
	|	втБезНорм.KV,
	|	втБезНорм.F,
	|	втБезНорм.I,
	|	втБезНорм.O,
	|	втБезНорм.Услуга КАК Услуга,
	|	втБезНорм.SERVICE,
	|	втБезНорм.V,
	|	втБезНорм.TARIF,
	|	втБезНорм.DOLG_AB,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК DATA,
	|	втБезНорм.SUMMA,
	|	втБезНорм.SH,
	|	втБезНорм.ORD,
	|	втБезНорм.P_DATA,
	|	втБезНорм.REDED,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НЕ КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки = ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой)
	|				ТОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления
	|			ИНАЧЕ КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Размер
	|		КОНЕЦ, 0) КАК NORMATIV,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НЕ КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки = ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ, ЛОЖЬ) КАК РасчетНормыСложный
	|ИЗ
	|	втБезНорм КАК втБезНорм
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(
	|				&ДатаКонца,
	|				(ЛицевойСчет, Услуга) В
	|					(ВЫБРАТЬ
	|						втБезНорм.LS,
	|						втБезНорм.Услуга
	|					ИЗ
	|						втБезНорм КАК втБезНорм)) КАК КВП_НормыПотребленияУслугЛССрезПоследних
	|		ПО втБезНорм.LS = КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет
	|			И втБезНорм.Услуга = КВП_НормыПотребленияУслугЛССрезПоследних.Услуга
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЛицевойСчет,
	|	Услуга";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	РезультатЗапроса.Колонки.Добавить("LS", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(10));
	
	Для Каждого СтрокаТаблицы ИЗ РезультатЗапроса Цикл
		
		// Заполнение тарифов.
	
		Если СтрокаТаблицы.TARIF = 0 Тогда
			ТарифПоУслуге = ПолучитьТарифПоЛицевомуСчету(КонецМесяца(Период), Организация, СтрокаТаблицы.Услуга, СтрокаТаблицы.ЛицевойСчет);
			СтрокаТаблицы.TARIF = ТарифПоУслуге;
		КонецЕсли;
		
		// Заполнение нормативов потребления.
		
		Если СтрокаТаблицы.РасчетНормыСложный Тогда
			РазмерНормы = ПолучитьРазмерНормыПотребления(СтрокаТаблицы.ЛицевойСчет, КонецМесяца(Период), СтрокаТаблицы.NORMATIV, Организация);
			СтрокаТаблицы.NORMATIV = РазмерНормы;
		КонецЕсли;
		
		СтрокаТаблицы.LS     = ПодготовитьНомерЛСДляВывода(СтрокаТаблицы.ЛицевойСчет.Наименование);
		СтрокаТаблицы.P_DATA = НачалоМесяца(СтрокаТаблицы.P_DATA);
		СтрокаТаблицы.DATA   = НачалоМесяца(Период);
		
	КонецЦикла;
	
	СвердловскаяОбластьРеж_ТаблицаНачислений.Загрузить(РезультатЗапроса);
	
КонецПроцедуры // СформироватьТаблицуНачисленийСвердловскаяОбласть()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ВЫГРУЗКИ ДЛЯ АРХАНГЕЛЬСКОЙ ОБЛАСТИ

#Область АрхангельскаяОбласть

// Формирует таблицу задолженностей для выгрузки данных в ОСЗН.
//
Процедура СформироватьТаблицуДанныхАрхангельскойОбласти(ТаблицаДанныхФайла, ТаблицаСоответствияЛК, ТаблицаСоответствияЛьготИУслуг, Кодировка, ВременныйФайл, мСтруктураНастроекКапРемонта) Экспорт
	
	// Загрузка.
	ФайлДБФ = Новый XBase;
	ФайлДБФ.Кодировка = Кодировка;
	ФайлДБФ.ОткрытьФайл(ВременныйФайл, , Истина);
	
	МассивСокрНасПункт = СформироватьМассивСокращениеДляАрхангельскойОблПоВиду(4);
	МассивСокрУлицы    = СформироватьМассивСокращениеДляАрхангельскойОблПоВиду(5);
	
	Если ФайлДБФ.Открыта() = Истина Тогда
		
		ТаблицаДанныхФайла.Очистить();
		
		Пока Не ФайлДБФ.ВКонце() Цикл
			
			НоваяСтрока = ТаблицаДанныхФайла.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ФайлДБФ);
			НоваяСтрока.FAMIL     = ВРег(СокрЛП(ФайлДБФ.FAMIL));
			НоваяСтрока.IMJA      = ВРег(СокрЛП(ФайлДБФ.IMJA));
			НоваяСтрока.OTCH      = ВРег(СокрЛП(ФайлДБФ.OTCH));
			НоваяСтрока.NNASP     = ВРег(НормализацияПолейАдресаАрхангельскойОбласти(СокрЛП(ФайлДБФ.NNASP), МассивСокрНасПункт));
			НоваяСтрока.NYLIC     = ВРег(НормализацияПолейАдресаАрхангельскойОбласти(СокрЛП(ФайлДБФ.NYLIC), МассивСокрУлицы));
			НоваяСтрока.NKOD_PU1  = СокрЛП(ФайлДБФ.NKOD_PU1);
			НоваяСтрока.NKOD_PU2  = СокрЛП(ФайлДБФ.NKOD_PU2);
			НоваяСтрока.NKOD_PU3  = СокрЛП(ФайлДБФ.NKOD_PU3);
			НоваяСтрока.NKOD_PU4  = СокрЛП(ФайлДБФ.NKOD_PU4);
			НоваяСтрока.NKOD_LGT1 = СокрЛП(ФайлДБФ.NKOD_LGT1);
			НоваяСтрока.NKOD_LGT2 = СокрЛП(ФайлДБФ.NKOD_LGT2);
			НоваяСтрока.NKOD_LGT3 = СокрЛП(ФайлДБФ.NKOD_LGT3);
			НоваяСтрока.NKOD_LGT4 = СокрЛП(ФайлДБФ.NKOD_LGT4);
			
			НоваяСтрока.NDOM  = СокрЛП(ФайлДБФ.NDOM);
			НоваяСтрока.NKORP = СокрЛП(ФайлДБФ.NKORP);
			Попытка
				НоваяСтрока.NKW = Число(СокрЛП(ФайлДБФ.NKW));
			Исключение
				// Установим номер квартиры 0, т.к. в данном случае могут быть загружены частные дома из файлы ОСЗН.
				НоваяСтрока.NKW = 0;
			КонецПопытки;
			
			ФайлДБФ.Следующая();
			
		КонецЦикла;
		
	КонецЕсли;
	
	ФайлДБФ.ЗакрытьФайл();
	
	ТаблицаАдресов = ПолучитьАдресаВсехЗданийАрхангельск();
	ТаблицаИдентифицированныхЖильцов = ПолучитьТаблицуИдентифицированныхЖильцовАрхангельск(ТаблицаДанныхФайла, ТаблицаАдресов, ТаблицаСоответствияЛК);
	ПолучитьТаблицуНачисленийАрхангельск(ТаблицаДанныхФайла, ТаблицаАдресов, ТаблицаИдентифицированныхЖильцов, ТаблицаСоответствияЛьготИУслуг, мСтруктураНастроекКапРемонта);
	
	Для Каждого СтрокаДанных ИЗ ТаблицаДанныхФайла Цикл
		
		Если СтрокаДанных.DOLG = 1 Тогда
			СтрокаДанных.PERDOLG = "" + Формат(СтрокаДанных.ДатаНачалаЗадолженности, "ДЛФ=Д") + " - " + Формат(СтрокаДанных.ДатаОкончанияЗадолженности, "ДЛФ=Д");
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Получает таблицу значений с адресами зданий.
//
Функция ПолучитьАдресаВсехЗданийАрхангельск()
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втКонтактнаяИнформация.Объект КАК Здание,
	|	ВЫБОР
	|		КОГДА НЕ втКонтактнаяИнформация.НаселенныйПункт = """"
	|			ТОГДА втКонтактнаяИнформация.НаселенныйПункт
	|		КОГДА НЕ втКонтактнаяИнформация.Город = """"
	|			ТОГДА втКонтактнаяИнформация.Город
	|		ИНАЧЕ втКонтактнаяИнформация.Регион
	|	КОНЕЦ КАК НаселенныйПункт,
	|	втКонтактнаяИнформация.Улица,
	|	втКонтактнаяИнформация.Дом,
	|	втКонтактнаяИнформация.Корпус
	|ИЗ
	|	втКонтактнаяИнформация КАК втКонтактнаяИнформация";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	МассивСокрНасПункт = СформироватьМассивСокращениеДляАрхангельскойОблПоВиду(4);
	МассивСокрУлицы    = СформироватьМассивСокращениеДляАрхангельскойОблПоВиду(5);
	
	Для Каждого СтрокаЗдания ИЗ Результат Цикл
		СтрокаЗдания.НаселенныйПункт = ВРег(НормализацияПолейАдресаАрхангельскойОбласти(СтрокаЗдания.НаселенныйПункт, МассивСокрНасПункт));
		СтрокаЗдания.Улица           = ВРег(НормализацияПолейАдресаАрхангельскойОбласти(СтрокаЗдания.Улица, МассивСокрУлицы));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьАдресаВсехЗданийАрхангельск()

// Формирует массив сокращений для Архангельской области для выбранного вида сокращения.
//
Функция СформироватьМассивСокращениеДляАрхангельскойОблПоВиду(ВидСокращение)
		
	МассивСокращений = Новый Массив;
	// Для регионов.
	Если ВидСокращение = 1 Тогда
		МассивСокращений.Добавить("обл");
		// Для районов.
	ИначеЕсли ВидСокращение = 2 Тогда
		МассивСокращений.Добавить("р-н");
		// Для городов.
	ИначеЕсли ВидСокращение = 3 Тогда
		МассивСокращений.Добавить("г");
		// Для нас.пунктов.
	ИначеЕсли ВидСокращение = 4 Тогда
		МассивСокращений.Добавить("п");
		МассивСокращений.Добавить("дп");
		МассивСокращений.Добавить("нп");
		МассивСокращений.Добавить("рп");
		МассивСокращений.Добавить("снт");
		МассивСокращений.Добавить("с");
		МассивСокращений.Добавить("д");
		МассивСокращений.Добавить("ж/д_ст");
		МассивСокращений.Добавить("ст");
		МассивСокращений.Добавить("ж/д_рзд");
		МассивСокращений.Добавить("высел");
		МассивСокращений.Добавить("остров");
		МассивСокращений.Добавить("промзона");
		МассивСокращений.Добавить("городок");
		МассивСокращений.Добавить("тер");
		МассивСокращений.Добавить("рзд");
		МассивСокращений.Добавить("ж/д_пост");
		МассивСокращений.Добавить("мкр");
		МассивСокращений.Добавить("казарма");
		МассивСокращений.Добавить("х");
		МассивСокращений.Добавить("п/о");
		МассивСокращений.Добавить("г");
		МассивСокращений.Добавить("обл");
		// Для улиц.
	ИначеЕсли ВидСокращение = 5 Тогда
		МассивСокращений.Добавить("ул");
		МассивСокращений.Добавить("тер");
		МассивСокращений.Добавить("пл");
		МассивСокращений.Добавить("пер");
		МассивСокращений.Добавить("снт");
		МассивСокращений.Добавить("проезд");
		МассивСокращений.Добавить("б-р");
		МассивСокращений.Добавить("туп");
		МассивСокращений.Добавить("п");
		МассивСокращений.Добавить("ш");
		МассивСокращений.Добавить("пр-кт");
		МассивСокращений.Добавить("тракт");
		МассивСокращений.Добавить("сквер");
		МассивСокращений.Добавить("ст");
		МассивСокращений.Добавить("наб");
		МассивСокращений.Добавить("км");
		МассивСокращений.Добавить("ж/д_ст");
		МассивСокращений.Добавить("сад");
		МассивСокращений.Добавить("парк");
		МассивСокращений.Добавить("уч-к");
		МассивСокращений.Добавить("мкр");
		МассивСокращений.Добавить("городок");
		МассивСокращений.Добавить("кв-л");
		МассивСокращений.Добавить("нп");
		МассивСокращений.Добавить("остров");
		МассивСокращений.Добавить("гск");
		МассивСокращений.Добавить("линия");
		МассивСокращений.Добавить("рзд");
		МассивСокращений.Добавить("стр");
		МассивСокращений.Добавить("аллея");
		МассивСокращений.Добавить("казарма");
		МассивСокращений.Добавить("ж/д_рзд");
		МассивСокращений.Добавить("д");
		МассивСокращений.Добавить("ж/д_казарм");
		МассивСокращений.Добавить("ж/д_будка");
		МассивСокращений.Добавить("высел");
	КонецЕсли;
	
	Возврат МассивСокращений;
	
КонецФункции // СформироватьМассивСокращениеДляАрхангельскойОблПоВиду()

// Получает таблицу жильцов идентифицированных с записями из файла-запроса.
//
Функция ПолучитьТаблицуИдентифицированныхЖильцовАрхангельск(ТаблицаДанныхФайла, ТаблицаАдресов, ТаблицаСоответствияЛК)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо,
	|	ФИОФизическихЛицСрезПоследних.Фамилия,
	|	ФИОФизическихЛицСрезПоследних.Имя,
	|	ФИОФизическихЛицСрезПоследних.Отчество
	|ИЗ
	|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&Дата, ) КАК ФИОФизическихЛицСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", КонецМесяца(Период));
	
	ТаблицаФИО = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаФизЛица ИЗ ТаблицаФИО Цикл
		СтрокаФизЛица.Фамилия  = ВРег(СтрокаФизЛица.Фамилия);
		СтрокаФизЛица.Имя      = ВРег(СтрокаФизЛица.Имя);
		СтрокаФизЛица.Отчество = ВРег(СтрокаФизЛица.Отчество);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИзФайла.FAMIL КАК Фамилия,
	|	ТаблицаИзФайла.IMJA КАК Имя,
	|	ТаблицаИзФайла.OTCH КАК Отчество,
	|	ТаблицаИзФайла.NNASP КАК Город,
	|	ТаблицаИзФайла.NYLIC КАК Улица,
	|	ТаблицаИзФайла.NDOM КАК Дом,
	|	ТаблицаИзФайла.NKORP КАК Корпус,
	|	ТаблицаИзФайла.NKW КАК Квартира,
	|	ТаблицаИзФайла.NKOD_PU1 КАК ЛьготнаяКатегория1,
	|	ТаблицаИзФайла.NKOD_PU2 КАК ЛьготнаяКатегория2,
	|	ТаблицаИзФайла.NKOD_PU3 КАК ЛьготнаяКатегория3,
	|	ТаблицаИзФайла.NKOD_PU4 КАК ЛьготнаяКатегория4
	|ПОМЕСТИТЬ втТаблицаДанныхИзФайла
	|ИЗ
	|	&ТаблицаИзФайла КАК ТаблицаИзФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЛК.ЛьготнаяКатегорияВОСЗН,
	|	ТаблицаЛК.ЛьготнаяКатегорияВБазе
	|ПОМЕСТИТЬ втЛКЖильцов
	|ИЗ
	|	&ТаблицаЛК КАК ТаблицаЛК
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаДанныхИзФайла.Фамилия,
	|	втТаблицаДанныхИзФайла.Имя,
	|	втТаблицаДанныхИзФайла.Отчество,
	|	втТаблицаДанныхИзФайла.Город,
	|	втТаблицаДанныхИзФайла.Улица,
	|	втТаблицаДанныхИзФайла.Дом,
	|	втТаблицаДанныхИзФайла.Корпус,
	|	втТаблицаДанныхИзФайла.Квартира,
	|	ВЫБОР
	|		КОГДА втТаблицаДанныхИзФайла.ЛьготнаяКатегория1 = втЛКЖильцов.ЛьготнаяКатегорияВОСЗН
	|			ТОГДА втТаблицаДанныхИзФайла.ЛьготнаяКатегория1
	|		КОГДА втТаблицаДанныхИзФайла.ЛьготнаяКатегория2 = втЛКЖильцов.ЛьготнаяКатегорияВОСЗН
	|			ТОГДА втТаблицаДанныхИзФайла.ЛьготнаяКатегория2
	|		КОГДА втТаблицаДанныхИзФайла.ЛьготнаяКатегория3 = втЛКЖильцов.ЛьготнаяКатегорияВОСЗН
	|			ТОГДА втТаблицаДанныхИзФайла.ЛьготнаяКатегория3
	|		КОГДА втТаблицаДанныхИзФайла.ЛьготнаяКатегория4 = втЛКЖильцов.ЛьготнаяКатегорияВОСЗН
	|			ТОГДА втТаблицаДанныхИзФайла.ЛьготнаяКатегория4
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ЛьготнаяКатегорияВОСЗН,
	|	ЕСТЬNULL(втЛКЖильцов.ЛьготнаяКатегорияВБазе, ЗНАЧЕНИЕ(Справочник.КВП_льготныеКатегории.ПустаяСсылка)) КАК ЛьготнаяКатегорияВБазе
	|ПОМЕСТИТЬ втТаблицаДанныхИзФайлаСЛьготнымиКатегориями
	|ИЗ
	|	втТаблицаДанныхИзФайла КАК втТаблицаДанныхИзФайла
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЛКЖильцов КАК втЛКЖильцов
	|		ПО (втТаблицаДанныхИзФайла.ЛьготнаяКатегория1 = втЛКЖильцов.ЛьготнаяКатегорияВОСЗН
	|				ИЛИ втТаблицаДанныхИзФайла.ЛьготнаяКатегория2 = втЛКЖильцов.ЛьготнаяКатегорияВОСЗН
	|				ИЛИ втТаблицаДанныхИзФайла.ЛьготнаяКатегория3 = втЛКЖильцов.ЛьготнаяКатегорияВОСЗН
	|				ИЛИ втТаблицаДанныхИзФайла.ЛьготнаяКатегория4 = втЛКЖильцов.ЛьготнаяКатегорияВОСЗН)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаФИО.ФизическоеЛицо,
	|	ТаблицаФИО.Фамилия,
	|	ТаблицаФИО.Имя,
	|	ТаблицаФИО.Отчество
	|ПОМЕСТИТЬ втФИОФизЛиц
	|ИЗ
	|	&ТаблицаФИО КАК ТаблицаФИО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Жильцы.Ссылка КАК Проживающий,
	|	УПЖКХ_Жильцы.ФизЛицо,
	|	УПЖКХ_Жильцы.Владелец.Адрес.Владелец КАК Здание,
	|	УПЖКХ_Жильцы.Владелец.Адрес.ВидПомещения.ТипПомещения КАК ТипПомещения,
	|	УПЖКХ_Жильцы.Владелец.Адрес.Код КАК Квартира,
	|	УПЖКХ_Жильцы.Владелец КАК ЛицевойСчет
	|ПОМЕСТИТЬ втЖильцы
	|ИЗ
	|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
	|ГДЕ
	|	НЕ УПЖКХ_Жильцы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцы.Проживающий,
	|	ЕСТЬNULL(втФИОФизЛиц.Фамилия, """") КАК Фамилия,
	|	ЕСТЬNULL(втФИОФизЛиц.Имя, """") КАК Имя,
	|	ЕСТЬNULL(втФИОФизЛиц.Отчество, """") КАК Отчество,
	|	втЖильцы.Здание,
	|	втЖильцы.ТипПомещения,
	|	втЖильцы.Квартира,
	|	втЖильцы.ЛицевойСчет
	|ПОМЕСТИТЬ втЖильцыСФИО
	|ИЗ
	|	втЖильцы КАК втЖильцы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втФИОФизЛиц КАК втФИОФизЛиц
	|		ПО втЖильцы.ФизЛицо = втФИОФизЛиц.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаАдресов.Здание,
	|	ТаблицаАдресов.НаселенныйПункт,
	|	ТаблицаАдресов.Улица,
	|	ТаблицаАдресов.Дом,
	|	ТаблицаАдресов.Корпус
	|ПОМЕСТИТЬ втАдреса
	|ИЗ
	|	&ТаблицаАдресов КАК ТаблицаАдресов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцыСФИО.Проживающий,
	|	втЖильцыСФИО.Фамилия,
	|	втЖильцыСФИО.Имя,
	|	втЖильцыСФИО.Отчество,
	|	ЕСТЬNULL(втАдреса.НаселенныйПункт, """") КАК НаселенныйПункт,
	|	ЕСТЬNULL(втАдреса.Улица, """") КАК Улица,
	|	ЕСТЬNULL(втАдреса.Дом, """") КАК Дом,
	|	ЕСТЬNULL(втАдреса.Корпус, """") КАК Корпус,
	|	втЖильцыСФИО.ТипПомещения,
	|	втЖильцыСФИО.Квартира,
	|	втЖильцыСФИО.ЛицевойСчет
	|ПОМЕСТИТЬ втЖильцыСАдресами
	|ИЗ
	|	втЖильцыСФИО КАК втЖильцыСФИО
	|		ЛЕВОЕ СОЕДИНЕНИЕ втАдреса КАК втАдреса
	|		ПО втЖильцыСФИО.Здание = втАдреса.Здание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий,
	|	КВП_НазначенныеЛьготыСрезПоследних.ЛьготнаяКатегория
	|ПОМЕСТИТЬ втЛьготныеКатегорииЖильцов
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(
	|			&ДатаКонца,
	|			Проживающий В
	|					(ВЫБРАТЬ
	|						втЖильцыСАдресами.Проживающий
	|					ИЗ
	|						втЖильцыСАдресами КАК втЖильцыСАдресами)
	|				И ДатаИзменения <= &ДатаКонца) КАК КВП_НазначенныеЛьготыСрезПоследних
	|ГДЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.Действие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцыСАдресами.Проживающий,
	|	втЖильцыСАдресами.Фамилия,
	|	втЖильцыСАдресами.Имя,
	|	втЖильцыСАдресами.Отчество,
	|	втЖильцыСАдресами.НаселенныйПункт,
	|	втЖильцыСАдресами.Улица,
	|	втЖильцыСАдресами.Дом,
	|	втЖильцыСАдресами.Корпус,
	|	втЖильцыСАдресами.ТипПомещения,
	|	втЖильцыСАдресами.Квартира,
	|	втЖильцыСАдресами.ЛицевойСчет,
	|	ЕСТЬNULL(втЛьготныеКатегорииЖильцов.ЛьготнаяКатегория, ЗНАЧЕНИЕ(Справочник.КВП_ЛьготныеКатегории.ПустаяСсылка)) КАК ЛьготнаяКатегория
	|ПОМЕСТИТЬ втЖильцыСАдресамиИЛК
	|ИЗ
	|	втЖильцыСАдресами КАК втЖильцыСАдресами
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЛьготныеКатегорииЖильцов КАК втЛьготныеКатегорииЖильцов
	|		ПО втЖильцыСАдресами.Проживающий = втЛьготныеКатегорииЖильцов.Проживающий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцыСАдресамиИЛК.Проживающий,
	|	втЖильцыСАдресамиИЛК.Фамилия,
	|	втЖильцыСАдресамиИЛК.Имя,
	|	втЖильцыСАдресамиИЛК.Отчество,
	|	втЖильцыСАдресамиИЛК.НаселенныйПункт КАК Город,
	|	втЖильцыСАдресамиИЛК.Улица,
	|	втЖильцыСАдресамиИЛК.Дом,
	|	втЖильцыСАдресамиИЛК.Корпус,
	|	втЖильцыСАдресамиИЛК.Квартира,
	|	втЖильцыСАдресамиИЛК.ТипПомещения,
	|	втЖильцыСАдресамиИЛК.ЛицевойСчет,
	|	втЖильцыСАдресамиИЛК.ЛьготнаяКатегория,
	|	втТаблицаДанныхИзФайлаСЛьготнымиКатегориями.ЛьготнаяКатегорияВОСЗН
	|ИЗ
	|	втТаблицаДанныхИзФайлаСЛьготнымиКатегориями КАК втТаблицаДанныхИзФайлаСЛьготнымиКатегориями
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЖильцыСАдресамиИЛК КАК втЖильцыСАдресамиИЛК
	|		ПО втТаблицаДанныхИзФайлаСЛьготнымиКатегориями.Фамилия = втЖильцыСАдресамиИЛК.Фамилия
	|			И втТаблицаДанныхИзФайлаСЛьготнымиКатегориями.Имя = втЖильцыСАдресамиИЛК.Имя
	|			И втТаблицаДанныхИзФайлаСЛьготнымиКатегориями.Отчество = втЖильцыСАдресамиИЛК.Отчество
	|			И втТаблицаДанныхИзФайлаСЛьготнымиКатегориями.Город = втЖильцыСАдресамиИЛК.НаселенныйПункт
	|			И втТаблицаДанныхИзФайлаСЛьготнымиКатегориями.Улица = втЖильцыСАдресамиИЛК.Улица
	|			И втТаблицаДанныхИзФайлаСЛьготнымиКатегориями.Дом = втЖильцыСАдресамиИЛК.Дом
	|			И втТаблицаДанныхИзФайлаСЛьготнымиКатегориями.Корпус = втЖильцыСАдресамиИЛК.Корпус
	|			И (ВЫБОР
	|				КОГДА втЖильцыСАдресамиИЛК.ТипПомещения = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыПомещений.Дом)
	|					ТОГДА ИСТИНА
	|				КОГДА втЖильцыСАдресамиИЛК.ТипПомещения = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыПомещений.Квартира)
	|						И втТаблицаДанныхИзФайлаСЛьготнымиКатегориями.Квартира = 0
	|					ТОГДА втЖильцыСАдресамиИЛК.Квартира = 1
	|				ИНАЧЕ втТаблицаДанныхИзФайлаСЛьготнымиКатегориями.Квартира = втЖильцыСАдресамиИЛК.Квартира
	|			КОНЕЦ)
	|			И втТаблицаДанныхИзФайлаСЛьготнымиКатегориями.ЛьготнаяКатегорияВБазе = втЖильцыСАдресамиИЛК.ЛьготнаяКатегория
	|			И (НЕ втТаблицаДанныхИзФайлаСЛьготнымиКатегориями.ЛьготнаяКатегорияВБазе = ЗНАЧЕНИЕ(Справочник.КВП_ЛьготныеКатегории.ПустаяСсылка))";
	
	Запрос.УстановитьПараметр("ТаблицаИзФайла", ТаблицаДанныхФайла);
	Запрос.УстановитьПараметр("ДатаКонца",      КонецМесяца(Период));
	Запрос.УстановитьПараметр("ТаблицаАдресов", ТаблицаАдресов);
	Запрос.УстановитьПараметр("ТаблицаФИО",     ТаблицаФИО);
	Запрос.УстановитьПараметр("ТаблицаЛК",      ТаблицаСоответствияЛК);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции // ПолучитьТаблицуИдентифицированныхЖильцов()

// Заполняет таблицу данных необходимой информацией.
//
Процедура ПолучитьТаблицуНачисленийАрхангельск(ТаблицаДанныхФайла, ТаблицаАдресов, ТаблицаИдентифицированныхЖильцов, ТаблицаСоответствияЛьготИУслуг, мСтруктураНастроекКапРемонта)
	
	Запрос = Новый Запрос;
	
	УсловиеВыгрузкиКапРемонта = Ложь;
	
	Если СпособВыгрузкиДанныхКапРемонт = "по всем услугам" Тогда
		УсловиеОтбораУслуг = "";
	Иначе
		Запрос.УстановитьПараметр("СписокУслуг", мСтруктураНастроекКапРемонта.СписокУслуг);
		УсловиеОтбораУслуг = "И " + ?(СпособВыгрузкиДанныхКапРемонт = "по основным услугам", "НЕ ", "") + "Услуга В (&СписокУслуг)";
		Если СпособВыгрузкиДанныхКапРемонт = "по услугам капитального ремонта" Тогда
			УсловиеВыгрузкиКапРемонта = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Параметры.
	Запрос.УстановитьПараметр("ТаблицаИзФайла",                 ТаблицаДанныхФайла);
	Запрос.УстановитьПараметр("ДатаНачала",                     НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ДатаКонца",                      КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",                    Организация);
	Запрос.УстановитьПараметр("ТаблицаИдентифЖильцов",          ТаблицаИдентифицированныхЖильцов);
	Запрос.УстановитьПараметр("УсловиеВыгрузкиКапРемонта",      УсловиеВыгрузкиКапРемонта);
	Запрос.УстановитьПараметр("ТаблицаСоответствияЛьготИУслуг", ТаблицаСоответствияЛьготИУслуг);
	Запрос.УстановитьПараметр("ДатаОпределенияЗадолженности",   ДатаСрокОплаты());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИзФайла.PKU,
	|	ТаблицаИзФайла.FAMIL,
	|	ТаблицаИзФайла.IMJA,
	|	ТаблицаИзФайла.OTCH,
	|	ТаблицаИзФайла.NNASP,
	|	ТаблицаИзФайла.NYLIC,
	|	ТаблицаИзФайла.NDOM,
	|	ТаблицаИзФайла.NKORP,
	|	ТаблицаИзФайла.NKW,
	|	ТаблицаИзФайла.NKOD_PU1,
	|	ТаблицаИзФайла.NKOD_LGT1,
	|	ТаблицаИзФайла.NKOD_PU2,
	|	ТаблицаИзФайла.NKOD_LGT2,
	|	ТаблицаИзФайла.NKOD_PU3,
	|	ТаблицаИзФайла.NKOD_LGT3,
	|	ТаблицаИзФайла.NKOD_PU4,
	|	ТаблицаИзФайла.NKOD_LGT4,
	|	ТаблицаИзФайла.DATS,
	|	ТаблицаИзФайла.DATPO,
	|	ТаблицаИзФайла.PERDOLG
	|ПОМЕСТИТЬ втТаблицаДанныхИзФайла
	|ИЗ
	|	&ТаблицаИзФайла КАК ТаблицаИзФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИдентифЖильцов.Проживающий,
	|	ТаблицаИдентифЖильцов.ЛицевойСчет,
	|	ТаблицаИдентифЖильцов.Фамилия,
	|	ТаблицаИдентифЖильцов.Имя,
	|	ТаблицаИдентифЖильцов.Отчество,
	|	ТаблицаИдентифЖильцов.Город,
	|	ТаблицаИдентифЖильцов.Улица,
	|	ТаблицаИдентифЖильцов.Дом,
	|	ТаблицаИдентифЖильцов.Корпус,
	|	ТаблицаИдентифЖильцов.Квартира,
	|	ТаблицаИдентифЖильцов.ТипПомещения,
	|	ТаблицаИдентифЖильцов.ЛьготнаяКатегория,
	|	ТаблицаИдентифЖильцов.ЛьготнаяКатегорияВОСЗН
	|ПОМЕСТИТЬ втИдентифицированныеЖильцы
	|ИЗ
	|	&ТаблицаИдентифЖильцов КАК ТаблицаИдентифЖильцов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСоответствияЛьготИУслуг.Идентификатор КАК НаименованиеЛьготы,
	|	ТаблицаСоответствияЛьготИУслуг.УслугаВБазе
	|ПОМЕСТИТЬ втТаблицаСоответствияЛьготИУслуг
	|ИЗ
	|	&ТаблицаСоответствияЛьготИУслуг КАК ТаблицаСоответствияЛьготИУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Владелец КАК Здание,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Адрес КАК Помещение
	|ПОМЕСТИТЬ втЛицевыеСчета
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втИдентифицированныеЖильцы.ЛицевойСчет
	|				ИЗ
	|					втИдентифицированныеЖильцы КАК втИдентифицированныеЖильцы)) КАК КВП_ЛицевыеСчетаСрезПоследних
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель, 0) = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель, 0) = 0
	|						ТОГДА 0
	|					ИНАЧЕ КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель / КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель * ЕСТЬNULL(КВП_ПлощадьПомещенияСрезПоследних.Площадь, 0)
	|				КОНЕЦ
	|		КОНЕЦ) КАК ОбщаяПлощадь
	|ПОМЕСТИТЬ втДанныеОПлощадях
	|ИЗ
	|	РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втЛицевыеСчета.ЛицевойСчет
	|				ИЗ
	|					втЛицевыеСчета КАК втЛицевыеСчета)) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|				&ДатаКонца,
	|				Объект В
	|						(ВЫБРАТЬ
	|							втЛицевыеСчета.Помещение
	|						ИЗ
	|							втЛицевыеСчета КАК втЛицевыеСчета)
	|					И ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)) КАК КВП_ПлощадьПомещенияСрезПоследних
	|		ПО (КВП_ПлощадьПомещенияСрезПоследних.Объект = КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.Объект)
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛицевыеСчета.ЛицевойСчет,
	|	втЛицевыеСчета.Помещение,
	|	втЛицевыеСчета.Здание,
	|	ЕСТЬNULL(втДанныеОПлощадях.ОбщаяПлощадь, 0) КАК ОбщаяПлощадь,
	|	ЕСТЬNULL(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток, 0) КАК СуммаДолга
	|ПОМЕСТИТЬ втДанныеСПлощадями
	|ИЗ
	|	втЛицевыеСчета КАК втЛицевыеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеОПлощадях КАК втДанныеОПлощадях
	|		ПО втЛицевыеСчета.ЛицевойСчет = втДанныеОПлощадях.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|				&ДатаНачала,
	|				Организация = &Организация
	|					И ЛицевойСчет В
	|						(ВЫБРАТЬ
	|							втЛицевыеСчета.ЛицевойСчет
	|						ИЗ
	|							втЛицевыеСчета КАК втЛицевыеСчета) " + УсловиеОтбораУслуг + ") КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|		ПО втЛицевыеСчета.ЛицевойСчет = КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет,
	|	МАКСИМУМ(КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период) КАК Период
	|ПОМЕСТИТЬ втПериодыЗадолженности
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(
	|			,
	|			&ДатаОпределенияЗадолженности,
	|			Регистратор,
	|			Движения,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втДанныеСПлощадями.ЛицевойСчет
	|					ИЗ
	|						втДанныеСПлощадями КАК втДанныеСПлощадями
	|					ГДЕ
	|						втДанныеСПлощадями.СуммаДолга > 0) " + УсловиеОтбораУслуг + ") КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты
	|ГДЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период < &ДатаОпределенияЗадолженности
	|	И КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияКонечныйОстаток <= 0
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет,
	|	МИНИМУМ(КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период) КАК Период
	|ПОМЕСТИТЬ втПериодыНачалаНачислений
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(
	|			,
	|			&ДатаНачала,
	|			Регистратор,
	|			Движения,
	|			Организация = &Организация
	|				И (ЛицевойСчет) В
	|					(ВЫБРАТЬ
	|						втДанныеСПлощадями.ЛицевойСчет
	|					ИЗ
	|						втДанныеСПлощадями КАК втДанныеСПлощадями
	|					ГДЕ
	|						втДанныеСПлощадями.СуммаДолга > 0)
	|				И НЕ ЛицевойСчет В
	|						(ВЫБРАТЬ
	|							втПериодыЗадолженности.ЛицевойСчет
	|						ИЗ
	|							втПериодыЗадолженности КАК втПериодыЗадолженности) " + УсловиеОтбораУслуг + ") КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты
	|ГДЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период < &ДатаНачала
	|	И КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияКонечныйОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_ИсторияРаботыСДолжникамиСрезПоследних.Регистратор КАК СудебноеСоглашение,
	|	УПЖКХ_ИсторияРаботыСДолжникамиСрезПоследних.Должник КАК ЛицевойСчет
	|ПОМЕСТИТЬ втСудебныеСоглашения
	|ИЗ
	|	РегистрСведений.УПЖКХ_ИсторияРаботыСДолжниками.СрезПоследних(
	|			&ДатаКонца,
	|			Организация = &Организация
	|				И Должник В
	|					(ВЫБРАТЬ
	|						втДанныеСПлощадями.ЛицевойСчет
	|					ИЗ
	|						втДанныеСПлощадями КАК втДанныеСПлощадями)) КАК УПЖКХ_ИсторияРаботыСДолжникамиСрезПоследних
	|ГДЕ
	|	ДОБАВИТЬКДАТЕ(УПЖКХ_ИсторияРаботыСДолжникамиСрезПоследних.Регистратор.ДатаНачалаПлатежей, МЕСЯЦ, УПЖКХ_ИсторияРаботыСДолжникамиСрезПоследних.Регистратор.МесяцевПоСоглашению) > &ДатаКонца
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСудебныеСоглашения.ЛицевойСчет,
	|	втСудебныеСоглашения.СудебноеСоглашение,
	|	ЕСТЬNULL(УПЖКХ_Иск.НаименованиеСудебногоОргана, """") КАК НаименованиеСудебногоОргана,
	|	ЕСТЬNULL(УПЖКХ_Иск.ДатаСуда, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаСуда,
	|	ЕСТЬNULL(УПЖКХ_Иск.НомерПостановления, """") КАК НомерПостановления
	|ПОМЕСТИТЬ втИскиИСудебныеСоглашения
	|ИЗ
	|	втСудебныеСоглашения КАК втСудебныеСоглашения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УПЖКХ_Иск КАК УПЖКХ_Иск
	|		ПО втСудебныеСоглашения.СудебноеСоглашение = УПЖКХ_Иск.СудебноеСоглашение
	|			И втСудебныеСоглашения.ЛицевойСчет = УПЖКХ_Иск.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ГрафикиПлатежейПоЛС.Регистратор КАК СудебноеСоглашение,
	|	КВП_ГрафикиПлатежейПоЛС.ЛицевойСчет,
	|	КВП_ГрафикиПлатежейПоЛС.ДатаПлатежа,
	|	СУММА(КВП_ГрафикиПлатежейПоЛС.Сумма) КАК Сумма
	|ПОМЕСТИТЬ втГрафикиПлатежей
	|ИЗ
	|	РегистрСведений.КВП_ГрафикиПлатежейПоЛС КАК КВП_ГрафикиПлатежейПоЛС
	|ГДЕ
	|	(КВП_ГрафикиПлатежейПоЛС.Регистратор, КВП_ГрафикиПлатежейПоЛС.ЛицевойСчет) В
	|			(ВЫБРАТЬ
	|				втИскиИСудебныеСоглашения.СудебноеСоглашение,
	|				втИскиИСудебныеСоглашения.ЛицевойСчет
	|			ИЗ
	|				втИскиИСудебныеСоглашения КАК втИскиИСудебныеСоглашения)
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ГрафикиПлатежейПоЛС.Регистратор,
	|	КВП_ГрафикиПлатежейПоЛС.ЛицевойСчет,
	|	КВП_ГрафикиПлатежейПоЛС.ДатаПлатежа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГрафикиПлатежей.СудебноеСоглашение,
	|	втГрафикиПлатежей.ЛицевойСчет,
	|	СУММА(втГрафикиПлатежей.Сумма) КАК СуммаПлановая,
	|	СУММА(ЕСТЬNULL(КВП_РегистрацияОплатыЛицевыеСчета.СуммаПоГрафику, 0)) КАК СуммаФактическая
	|ПОМЕСТИТЬ втФактическиеСуммыОплат
	|ИЗ
	|	втГрафикиПлатежей КАК втГрафикиПлатежей
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КВП_РегистрацияОплаты.ЛицевыеСчета КАК КВП_РегистрацияОплатыЛицевыеСчета
	|		ПО втГрафикиПлатежей.ЛицевойСчет = КВП_РегистрацияОплатыЛицевыеСчета.Объект
	|			И (НАЧАЛОПЕРИОДА(втГрафикиПлатежей.ДатаПлатежа, МЕСЯЦ) = НАЧАЛОПЕРИОДА(КВП_РегистрацияОплатыЛицевыеСчета.Ссылка.Дата, МЕСЯЦ))
	|
	|СГРУППИРОВАТЬ ПО
	|	втГрафикиПлатежей.СудебноеСоглашение,
	|	втГрафикиПлатежей.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИскиИСудебныеСоглашения.ЛицевойСчет,
	|	втИскиИСудебныеСоглашения.СудебноеСоглашение,
	|	втИскиИСудебныеСоглашения.НаименованиеСудебногоОргана,
	|	втИскиИСудебныеСоглашения.ДатаСуда,
	|	втИскиИСудебныеСоглашения.НомерПостановления,
	|	ЕСТЬNULL(втФактическиеСуммыОплат.СуммаПлановая, 0) КАК СуммаПлановая,
	|	ЕСТЬNULL(втФактическиеСуммыОплат.СуммаФактическая, 0) КАК СуммаФактическая
	|ПОМЕСТИТЬ втСтруктураЗадолженности
	|ИЗ
	|	втИскиИСудебныеСоглашения КАК втИскиИСудебныеСоглашения
	|		ЛЕВОЕ СОЕДИНЕНИЕ втФактическиеСуммыОплат КАК втФактическиеСуммыОплат
	|		ПО втИскиИСудебныеСоглашения.ЛицевойСчет = втФактическиеСуммыОплат.ЛицевойСчет
	|			И втИскиИСудебныеСоглашения.СудебноеСоглашение = втФактическиеСуммыОплат.СудебноеСоглашение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеСПлощадями.ЛицевойСчет,
	|	втДанныеСПлощадями.Помещение,
	|	втДанныеСПлощадями.Здание,
	|	втДанныеСПлощадями.ОбщаяПлощадь,
	|	втДанныеСПлощадями.СуммаДолга КАК СуммаДолга,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втПериодыЗадолженности.Период, ЕСТЬNULL(втПериодыНачалаНачислений.Период, ДАТАВРЕМЯ(1, 1, 1))) = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА втПериодыЗадолженности.Период ЕСТЬ NULL
	|					ТОГДА РАЗНОСТЬДАТ(втПериодыНачалаНачислений.Период, &ДатаНачала, МЕСЯЦ)
	|				ИНАЧЕ ВЫБОР
	|						КОГДА втПериодыЗадолженности.Период > &ДатаКонца
	|							ТОГДА 0
	|						ИНАЧЕ РАЗНОСТЬДАТ(втПериодыЗадолженности.Период, &ДатаНачала, МЕСЯЦ)
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоМесяцевЗадолженности,
	|	ЕСТЬNULL(втПериодыЗадолженности.Период, ЕСТЬNULL(втПериодыНачалаНачислений.Период, ДАТАВРЕМЯ(1, 1, 1))) КАК ДатаФормированияЗадолженности,
	|	ЕСТЬNULL(втСтруктураЗадолженности.НаименованиеСудебногоОргана, """") КАК НаименованиеСудебногоОргана,
	|	ЕСТЬNULL(втСтруктураЗадолженности.ДатаСуда, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаСуда,
	|	ЕСТЬNULL(втСтруктураЗадолженности.НомерПостановления, """") КАК НомерПостановления,
	|	ЕСТЬNULL(втСтруктураЗадолженности.СуммаПлановая, 0) КАК СуммаПлановая,
	|	ЕСТЬNULL(втСтруктураЗадолженности.СуммаФактическая, 0) КАК СуммаФактическая,
	|	втСтруктураЗадолженности.СудебноеСоглашение
	|ПОМЕСТИТЬ втДанныеСДолгом
	|ИЗ
	|	втДанныеСПлощадями КАК втДанныеСПлощадями
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПериодыЗадолженности КАК втПериодыЗадолженности
	|		ПО втДанныеСПлощадями.ЛицевойСчет = втПериодыЗадолженности.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПериодыНачалаНачислений КАК втПериодыНачалаНачислений
	|		ПО втДанныеСПлощадями.ЛицевойСчет = втПериодыНачалаНачислений.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСтруктураЗадолженности КАК втСтруктураЗадолженности
	|		ПО втДанныеСПлощадями.ЛицевойСчет = втСтруктураЗадолженности.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИдентифицированныеЖильцы.Проживающий КАК Проживающий,
	|	втИдентифицированныеЖильцы.ЛицевойСчет,
	|	втИдентифицированныеЖильцы.Фамилия,
	|	втИдентифицированныеЖильцы.Имя,
	|	втИдентифицированныеЖильцы.Отчество,
	|	втИдентифицированныеЖильцы.Город,
	|	втИдентифицированныеЖильцы.Улица,
	|	втИдентифицированныеЖильцы.Дом,
	|	втИдентифицированныеЖильцы.Корпус,
	|	втИдентифицированныеЖильцы.Квартира,
	|	втИдентифицированныеЖильцы.ТипПомещения,
	|	втИдентифицированныеЖильцы.ЛьготнаяКатегория,
	|	втИдентифицированныеЖильцы.ЛьготнаяКатегорияВОСЗН,
	|	ЕСТЬNULL(КВП_НачисленныеЛьготыОбороты.СуммаНачисленияОборот, 0) КАК СуммаКВозмещению,
	|	ЕСТЬNULL(КВП_НачисленныеЛьготыОбороты.Услуга, ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)) КАК УслугаВозмещения
	|ПОМЕСТИТЬ втСуммыНачисленныхЛьгот
	|ИЗ
	|	втИдентифицированныеЖильцы КАК втИдентифицированныеЖильцы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_НачисленныеЛьготы.Обороты(
	|				&ДатаНачала,
	|				&ДатаКонца,
	|				,
	|				ЛицевойСчет В
	|						(ВЫБРАТЬ
	|							втДанныеСДолгом.ЛицевойСчет
	|						ИЗ
	|							втДанныеСДолгом КАК втДанныеСДолгом)
	|					И Организация = &Организация " + УсловиеОтбораУслуг + ") КАК КВП_НачисленныеЛьготыОбороты
	|		ПО втИдентифицированныеЖильцы.Проживающий = КВП_НачисленныеЛьготыОбороты.Проживающий
	|			И втИдентифицированныеЖильцы.ЛьготнаяКатегория = КВП_НачисленныеЛьготыОбороты.ЛьготнаяКатегория
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСуммыНачисленныхЛьгот.Фамилия,
	|	втСуммыНачисленныхЛьгот.Имя,
	|	втСуммыНачисленныхЛьгот.Отчество,
	|	втСуммыНачисленныхЛьгот.Город,
	|	втСуммыНачисленныхЛьгот.Улица,
	|	втСуммыНачисленныхЛьгот.Дом,
	|	втСуммыНачисленныхЛьгот.Корпус,
	|	втСуммыНачисленныхЛьгот.Квартира,
	|	втСуммыНачисленныхЛьгот.ТипПомещения,
	|	втСуммыНачисленныхЛьгот.ЛицевойСчет,
	|	втСуммыНачисленныхЛьгот.Проживающий,
	|	ЕСТЬNULL(втДанныеСДолгом.ОбщаяПлощадь, 0) КАК ОбщаяПлощадь,
	|	ЕСТЬNULL(втДанныеСДолгом.СуммаДолга, 0) КАК СуммаДолга,
	|	втСуммыНачисленныхЛьгот.СуммаКВозмещению КАК СуммаКВозмещению,
	|	втСуммыНачисленныхЛьгот.УслугаВозмещения КАК УслугаВозмещения,
	|	ЕСТЬNULL(втТаблицаСоответствияЛьготИУслуг.НаименованиеЛьготы, """") КАК НаименованиеЛьготы,
	|	ЕСТЬNULL(втДанныеСДолгом.КоличествоМесяцевЗадолженности, 0) КАК КоличествоМесяцевЗадолженности,
	|	ЕСТЬNULL(втДанныеСДолгом.ДатаФормированияЗадолженности, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаФормированияЗадолженности,
	|	ЕСТЬNULL(втДанныеСДолгом.НаименованиеСудебногоОргана, """") КАК НаименованиеСудебногоОргана,
	|	ЕСТЬNULL(втДанныеСДолгом.ДатаСуда, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаСуда,
	|	ЕСТЬNULL(втДанныеСДолгом.НомерПостановления, """") КАК НомерПостановления,
	|	ЕСТЬNULL(втДанныеСДолгом.СуммаФактическая, 0) КАК СуммаФактическая,
	|	втДанныеСДолгом.СудебноеСоглашение,
	|	втСуммыНачисленныхЛьгот.ЛьготнаяКатегория,
	|	втСуммыНачисленныхЛьгот.ЛьготнаяКатегорияВОСЗН
	|ПОМЕСТИТЬ втИдентифЖильцыСДаннымиБезГруппировки
	|ИЗ
	|	втСуммыНачисленныхЛьгот КАК втСуммыНачисленныхЛьгот
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеСДолгом КАК втДанныеСДолгом
	|		ПО втСуммыНачисленныхЛьгот.ЛицевойСчет = втДанныеСДолгом.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаСоответствияЛьготИУслуг КАК втТаблицаСоответствияЛьготИУслуг
	|		ПО втСуммыНачисленныхЛьгот.УслугаВозмещения = втТаблицаСоответствияЛьготИУслуг.УслугаВБазе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИдентифЖильцыСДаннымиБезГруппировки.Фамилия,
	|	втИдентифЖильцыСДаннымиБезГруппировки.Имя,
	|	втИдентифЖильцыСДаннымиБезГруппировки.Отчество,
	|	втИдентифЖильцыСДаннымиБезГруппировки.Город,
	|	втИдентифЖильцыСДаннымиБезГруппировки.Улица,
	|	втИдентифЖильцыСДаннымиБезГруппировки.Дом,
	|	втИдентифЖильцыСДаннымиБезГруппировки.Корпус,
	|	втИдентифЖильцыСДаннымиБезГруппировки.Квартира,
	|	втИдентифЖильцыСДаннымиБезГруппировки.ТипПомещения,
	|	втИдентифЖильцыСДаннымиБезГруппировки.ЛицевойСчет,
	|	втИдентифЖильцыСДаннымиБезГруппировки.Проживающий,
	|	втИдентифЖильцыСДаннымиБезГруппировки.ОбщаяПлощадь,
	|	втИдентифЖильцыСДаннымиБезГруппировки.СуммаДолга,
	|	СУММА(втИдентифЖильцыСДаннымиБезГруппировки.СуммаКВозмещению) КАК СуммаКВозмещению,
	|	втИдентифЖильцыСДаннымиБезГруппировки.НаименованиеЛьготы,
	|	втИдентифЖильцыСДаннымиБезГруппировки.КоличествоМесяцевЗадолженности,
	|	втИдентифЖильцыСДаннымиБезГруппировки.ДатаФормированияЗадолженности,
	|	втИдентифЖильцыСДаннымиБезГруппировки.НаименованиеСудебногоОргана,
	|	втИдентифЖильцыСДаннымиБезГруппировки.ДатаСуда,
	|	втИдентифЖильцыСДаннымиБезГруппировки.НомерПостановления,
	|	втИдентифЖильцыСДаннымиБезГруппировки.СуммаФактическая,
	|	втИдентифЖильцыСДаннымиБезГруппировки.СудебноеСоглашение,
	|	втИдентифЖильцыСДаннымиБезГруппировки.ЛьготнаяКатегория,
	|	втИдентифЖильцыСДаннымиБезГруппировки.ЛьготнаяКатегорияВОСЗН
	|ПОМЕСТИТЬ втИдентифЖильцыСДанными
	|ИЗ
	|	втИдентифЖильцыСДаннымиБезГруппировки КАК втИдентифЖильцыСДаннымиБезГруппировки
	|
	|СГРУППИРОВАТЬ ПО
	|	втИдентифЖильцыСДаннымиБезГруппировки.Фамилия,
	|	втИдентифЖильцыСДаннымиБезГруппировки.Имя,
	|	втИдентифЖильцыСДаннымиБезГруппировки.Отчество,
	|	втИдентифЖильцыСДаннымиБезГруппировки.Город,
	|	втИдентифЖильцыСДаннымиБезГруппировки.Улица,
	|	втИдентифЖильцыСДаннымиБезГруппировки.Дом,
	|	втИдентифЖильцыСДаннымиБезГруппировки.Корпус,
	|	втИдентифЖильцыСДаннымиБезГруппировки.Квартира,
	|	втИдентифЖильцыСДаннымиБезГруппировки.ТипПомещения,
	|	втИдентифЖильцыСДаннымиБезГруппировки.ЛицевойСчет,
	|	втИдентифЖильцыСДаннымиБезГруппировки.Проживающий,
	|	втИдентифЖильцыСДаннымиБезГруппировки.ОбщаяПлощадь,
	|	втИдентифЖильцыСДаннымиБезГруппировки.СуммаДолга,
	|	втИдентифЖильцыСДаннымиБезГруппировки.НаименованиеЛьготы,
	|	втИдентифЖильцыСДаннымиБезГруппировки.КоличествоМесяцевЗадолженности,
	|	втИдентифЖильцыСДаннымиБезГруппировки.ДатаФормированияЗадолженности,
	|	втИдентифЖильцыСДаннымиБезГруппировки.НаименованиеСудебногоОргана,
	|	втИдентифЖильцыСДаннымиБезГруппировки.ДатаСуда,
	|	втИдентифЖильцыСДаннымиБезГруппировки.НомерПостановления,
	|	втИдентифЖильцыСДаннымиБезГруппировки.СуммаФактическая,
	|	втИдентифЖильцыСДаннымиБезГруппировки.СудебноеСоглашение,
	|	втИдентифЖильцыСДаннымиБезГруппировки.ЛьготнаяКатегория,
	|	втИдентифЖильцыСДаннымиБезГруппировки.ЛьготнаяКатегорияВОСЗН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаДанныхИзФайла.PKU,
	|	втТаблицаДанныхИзФайла.FAMIL КАК FAMIL,
	|	втТаблицаДанныхИзФайла.IMJA КАК IMJA,
	|	втТаблицаДанныхИзФайла.OTCH КАК OTCH,
	|	втТаблицаДанныхИзФайла.NNASP,
	|	втТаблицаДанныхИзФайла.NYLIC,
	|	втТаблицаДанныхИзФайла.NDOM,
	|	втТаблицаДанныхИзФайла.NKORP,
	|	втТаблицаДанныхИзФайла.NKW,
	|	втТаблицаДанныхИзФайла.NKOD_PU1,
	|	втТаблицаДанныхИзФайла.NKOD_LGT1,
	|	втТаблицаДанныхИзФайла.NKOD_PU2,
	|	втТаблицаДанныхИзФайла.NKOD_LGT2,
	|	втТаблицаДанныхИзФайла.NKOD_PU3,
	|	втТаблицаДанныхИзФайла.NKOD_LGT3,
	|	втТаблицаДанныхИзФайла.NKOD_PU4,
	|	втТаблицаДанныхИзФайла.NKOD_LGT4,
	|	втТаблицаДанныхИзФайла.DATS,
	|	втТаблицаДанныхИзФайла.DATPO,
	|	ЕСТЬNULL(втИдентифЖильцыСДанными.ОбщаяПлощадь, 0) КАК ROPL,
	|	ВЫБОР
	|		КОГДА втТаблицаДанныхИзФайла.NKOD_PU1 = втИдентифЖильцыСДанными.ЛьготнаяКатегорияВОСЗН
	|			И втТаблицаДанныхИзФайла.NKOD_LGT1 = втИдентифЖильцыСДанными.НаименованиеЛьготы
	|				ТОГДА ЕСТЬNULL(втИдентифЖильцыСДанными.СуммаКВозмещению, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК SUML1,
	|	ВЫБОР
	|		КОГДА втТаблицаДанныхИзФайла.NKOD_PU2 = втИдентифЖильцыСДанными.ЛьготнаяКатегорияВОСЗН
	|			И втТаблицаДанныхИзФайла.NKOD_LGT2 = втИдентифЖильцыСДанными.НаименованиеЛьготы
	|			ТОГДА ЕСТЬNULL(втИдентифЖильцыСДанными.СуммаКВозмещению, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК SUML2,
	|	ВЫБОР
	|		КОГДА втТаблицаДанныхИзФайла.NKOD_PU3 = втИдентифЖильцыСДанными.ЛьготнаяКатегорияВОСЗН
	|			И втТаблицаДанныхИзФайла.NKOD_LGT3 = втИдентифЖильцыСДанными.НаименованиеЛьготы
	|			ТОГДА ЕСТЬNULL(втИдентифЖильцыСДанными.СуммаКВозмещению, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК SUML3,
	|	ВЫБОР
	|		КОГДА втТаблицаДанныхИзФайла.NKOD_PU4 = втИдентифЖильцыСДанными.ЛьготнаяКатегорияВОСЗН
	|			И втТаблицаДанныхИзФайла.NKOD_LGT4 = втИдентифЖильцыСДанными.НаименованиеЛьготы
	|			ТОГДА ЕСТЬNULL(втИдентифЖильцыСДанными.СуммаКВозмещению, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК SUML4,
	|	ВЫБОР
	|		КОГДА НЕ втИдентифЖильцыСДанными.ЛицевойСчет ЕСТЬ NULL 
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ДатаКонца, СЕКУНДА, 1)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК DATEPRL1,
	|	ВЫБОР
	|		КОГДА НЕ втИдентифЖильцыСДанными.ЛицевойСчет ЕСТЬ NULL 
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ДатаКонца, СЕКУНДА, 1)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК DATEPRL2,
	|	ВЫБОР
	|		КОГДА НЕ втИдентифЖильцыСДанными.ЛицевойСчет ЕСТЬ NULL 
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ДатаКонца, СЕКУНДА, 1)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК DATEPRL3,
	|	ВЫБОР
	|		КОГДА НЕ втИдентифЖильцыСДанными.ЛицевойСчет ЕСТЬ NULL 
	|			ТОГДА ДОБАВИТЬКДАТЕ(&ДатаКонца, СЕКУНДА, 1)
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК DATEPRL4,
	|	ВЫБОР
	|		КОГДА НЕ втИдентифЖильцыСДанными.СудебноеСоглашение ЕСТЬ NULL 
	|				И НЕ ЕСТЬNULL(втИдентифЖильцыСДанными.СуммаФактическая, 0) > 0
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК DOLG,
	|	ВЫБОР
	|		КОГДА НЕ втИдентифЖильцыСДанными.СудебноеСоглашение ЕСТЬ NULL 
	|				И НЕ ЕСТЬNULL(втИдентифЖильцыСДанными.СуммаФактическая, 0) > 0
	|			ТОГДА ЕСТЬNULL(втИдентифЖильцыСДанными.НаименованиеСудебногоОргана, """")
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК NSUD,
	|	ВЫБОР
	|		КОГДА НЕ втИдентифЖильцыСДанными.СудебноеСоглашение ЕСТЬ NULL 
	|				И НЕ ЕСТЬNULL(втИдентифЖильцыСДанными.СуммаФактическая, 0) > 0
	|			ТОГДА ЕСТЬNULL(втИдентифЖильцыСДанными.ДатаСуда, ДАТАВРЕМЯ(1, 1, 1))
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК DATRESH,
	|	ВЫБОР
	|		КОГДА НЕ втИдентифЖильцыСДанными.СудебноеСоглашение ЕСТЬ NULL 
	|				И НЕ ЕСТЬNULL(втИдентифЖильцыСДанными.СуммаФактическая, 0) > 0
	|			ТОГДА ЕСТЬNULL(втИдентифЖильцыСДанными.ДатаСуда, ДАТАВРЕМЯ(1, 1, 1))
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК DATVST,
	|	ВЫБОР
	|		КОГДА НЕ втИдентифЖильцыСДанными.СудебноеСоглашение ЕСТЬ NULL 
	|				И НЕ ЕСТЬNULL(втИдентифЖильцыСДанными.СуммаФактическая, 0) > 0
	|			ТОГДА ЕСТЬNULL(втИдентифЖильцыСДанными.НомерПостановления, """")
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК NDELO,
	|	ВЫБОР
	|		КОГДА НЕ втИдентифЖильцыСДанными.СудебноеСоглашение ЕСТЬ NULL 
	|				И НЕ ЕСТЬNULL(втИдентифЖильцыСДанными.СуммаФактическая, 0) > 0
	|			ТОГДА ЕСТЬNULL(втИдентифЖильцыСДанными.СуммаДолга, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК SUMDOLG,
	|	втТаблицаДанныхИзФайла.PERDOLG,
	|	ВЫБОР
	|		КОГДА НЕ втИдентифЖильцыСДанными.СудебноеСоглашение ЕСТЬ NULL 
	|				И НЕ ЕСТЬNULL(втИдентифЖильцыСДанными.СуммаФактическая, 0) > 0
	|			ТОГДА ЕСТЬNULL(втИдентифЖильцыСДанными.ДатаФормированияЗадолженности, ДАТАВРЕМЯ(1, 1, 1))
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаНачалаЗадолженности,
	|	ВЫБОР
	|		КОГДА НЕ втИдентифЖильцыСДанными.СудебноеСоглашение ЕСТЬ NULL 
	|				И НЕ ЕСТЬNULL(втИдентифЖильцыСДанными.СуммаФактическая, 0) > 0
	|			ТОГДА ДОБАВИТЬКДАТЕ(ЕСТЬNULL(втИдентифЖильцыСДанными.ДатаФормированияЗадолженности, ДАТАВРЕМЯ(1, 1, 1)), МЕСЯЦ, ЕСТЬNULL(втИдентифЖильцыСДанными.КоличествоМесяцевЗадолженности, 0))
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаОкончанияЗадолженности,
	|	ЕСТЬNULL(втИдентифЖильцыСДанными.ЛицевойСчет, ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)) КАК ЛицевойСчет
	|ПОМЕСТИТЬ втИтоговаТаблицаДанныхИзФайла
	|ИЗ
	|	втТаблицаДанныхИзФайла КАК втТаблицаДанныхИзФайла
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втИдентифЖильцыСДанными КАК втИдентифЖильцыСДанными
	|		ПО втТаблицаДанныхИзФайла.FAMIL = втИдентифЖильцыСДанными.Фамилия
	|			И втТаблицаДанныхИзФайла.IMJA = втИдентифЖильцыСДанными.Имя
	|			И втТаблицаДанныхИзФайла.OTCH = втИдентифЖильцыСДанными.Отчество
	|			И втТаблицаДанныхИзФайла.NNASP = втИдентифЖильцыСДанными.Город
	|			И втТаблицаДанныхИзФайла.NYLIC = втИдентифЖильцыСДанными.Улица
	|			И втТаблицаДанныхИзФайла.NDOM = втИдентифЖильцыСДанными.Дом
	|			И втТаблицаДанныхИзФайла.NKORP = втИдентифЖильцыСДанными.Корпус
	|			И (ВЫБОР
	|				КОГДА втИдентифЖильцыСДанными.ТипПомещения = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыПомещений.Дом)
	|					ТОГДА ИСТИНА
	|				КОГДА втИдентифЖильцыСДанными.ТипПомещения = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыПомещений.Квартира)
	|						И втТаблицаДанныхИзФайла.NKW = 0
	|					ТОГДА втИдентифЖильцыСДанными.Квартира = 1
	|				ИНАЧЕ втТаблицаДанныхИзФайла.NKW = втИдентифЖильцыСДанными.Квартира
	|			КОНЕЦ)
	|			И (втТаблицаДанныхИзФайла.NKOD_PU1 = втИдентифЖильцыСДанными.ЛьготнаяКатегорияВОСЗН
	|			   ИЛИ втТаблицаДанныхИзФайла.NKOD_PU2 = втИдентифЖильцыСДанными.ЛьготнаяКатегорияВОСЗН
	|			   ИЛИ втТаблицаДанныхИзФайла.NKOD_PU3 = втИдентифЖильцыСДанными.ЛьготнаяКатегорияВОСЗН
	|			   ИЛИ втТаблицаДанныхИзФайла.NKOD_PU4 = втИдентифЖильцыСДанными.ЛьготнаяКатегорияВОСЗН)
	|			И (втТаблицаДанныхИзФайла.NKOD_LGT1 = втИдентифЖильцыСДанными.НаименованиеЛьготы
	|			   ИЛИ втТаблицаДанныхИзФайла.NKOD_LGT2 = втИдентифЖильцыСДанными.НаименованиеЛьготы
	|			   ИЛИ втТаблицаДанныхИзФайла.NKOD_LGT3 = втИдентифЖильцыСДанными.НаименованиеЛьготы
	|			   ИЛИ втТаблицаДанныхИзФайла.NKOD_LGT4 = втИдентифЖильцыСДанными.НаименованиеЛьготы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаДанныхИзФайла.PKU,
	|	втТаблицаДанныхИзФайла.FAMIL КАК FAMIL,
	|	втТаблицаДанныхИзФайла.IMJA КАК IMJA,
	|	втТаблицаДанныхИзФайла.OTCH КАК OTCH,
	|	втТаблицаДанныхИзФайла.NNASP,
	|	втТаблицаДанныхИзФайла.NYLIC,
	|	втТаблицаДанныхИзФайла.NDOM,
	|	втТаблицаДанныхИзФайла.NKORP,
	|	втТаблицаДанныхИзФайла.NKW,
	|	втТаблицаДанныхИзФайла.NKOD_PU1,
	|	втТаблицаДанныхИзФайла.NKOD_LGT1,
	|	втТаблицаДанныхИзФайла.NKOD_PU2,
	|	втТаблицаДанныхИзФайла.NKOD_LGT2,
	|	втТаблицаДанныхИзФайла.NKOD_PU3,
	|	втТаблицаДанныхИзФайла.NKOD_LGT3,
	|	втТаблицаДанныхИзФайла.NKOD_PU4,
	|	втТаблицаДанныхИзФайла.NKOD_LGT4,
	|	втТаблицаДанныхИзФайла.DATS,
	|	втТаблицаДанныхИзФайла.DATPO,
	|	втТаблицаДанныхИзФайла.ROPL,
	|	СУММА(втТаблицаДанныхИзФайла.SUML1) КАК SUML1,
	|	СУММА(втТаблицаДанныхИзФайла.SUML2) КАК SUML2,
	|	СУММА(втТаблицаДанныхИзФайла.SUML3) КАК SUML3,
	|	СУММА(втТаблицаДанныхИзФайла.SUML4) КАК SUML4,
	|	втТаблицаДанныхИзФайла.DATEPRL1,
	|	втТаблицаДанныхИзФайла.DATEPRL2,
	|	втТаблицаДанныхИзФайла.DATEPRL3,
	|	втТаблицаДанныхИзФайла.DATEPRL4,
	|	втТаблицаДанныхИзФайла.DOLG,
	|	втТаблицаДанныхИзФайла.NSUD,
	|	втТаблицаДанныхИзФайла.DATRESH,
	|	втТаблицаДанныхИзФайла.DATVST,
	|	втТаблицаДанныхИзФайла.NDELO,
	|	втТаблицаДанныхИзФайла.SUMDOLG,
	|	втТаблицаДанныхИзФайла.PERDOLG,
	|	втТаблицаДанныхИзФайла.ДатаНачалаЗадолженности,
	|	втТаблицаДанныхИзФайла.ДатаОкончанияЗадолженности,
	|	втТаблицаДанныхИзФайла.ЛицевойСчет
	|ИЗ
	|	втИтоговаТаблицаДанныхИзФайла КАК втТаблицаДанныхИзФайла
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаДанныхИзФайла.PKU,
	|	втТаблицаДанныхИзФайла.FAMIL,
	|	втТаблицаДанныхИзФайла.IMJA,
	|	втТаблицаДанныхИзФайла.OTCH,
	|	втТаблицаДанныхИзФайла.NNASP,
	|	втТаблицаДанныхИзФайла.NYLIC,
	|	втТаблицаДанныхИзФайла.NDOM,
	|	втТаблицаДанныхИзФайла.NKORP,
	|	втТаблицаДанныхИзФайла.NKW,
	|	втТаблицаДанныхИзФайла.NKOD_PU1,
	|	втТаблицаДанныхИзФайла.NKOD_LGT1,
	|	втТаблицаДанныхИзФайла.NKOD_PU2,
	|	втТаблицаДанныхИзФайла.NKOD_LGT2,
	|	втТаблицаДанныхИзФайла.NKOD_PU3,
	|	втТаблицаДанныхИзФайла.NKOD_LGT3,
	|	втТаблицаДанныхИзФайла.NKOD_PU4,
	|	втТаблицаДанныхИзФайла.NKOD_LGT4,
	|	втТаблицаДанныхИзФайла.DATS,
	|	втТаблицаДанныхИзФайла.DATPO,
	|	втТаблицаДанныхИзФайла.ROPL,
	|	втТаблицаДанныхИзФайла.DATEPRL1,
	|	втТаблицаДанныхИзФайла.DATEPRL2,
	|	втТаблицаДанныхИзФайла.DATEPRL3,
	|	втТаблицаДанныхИзФайла.DATEPRL4,
	|	втТаблицаДанныхИзФайла.DOLG,
	|	втТаблицаДанныхИзФайла.NSUD,
	|	втТаблицаДанныхИзФайла.DATRESH,
	|	втТаблицаДанныхИзФайла.DATVST,
	|	втТаблицаДанныхИзФайла.NDELO,
	|	втТаблицаДанныхИзФайла.SUMDOLG,
	|	втТаблицаДанныхИзФайла.PERDOLG,
	|	втТаблицаДанныхИзФайла.ДатаНачалаЗадолженности,
	|	втТаблицаДанныхИзФайла.ДатаОкончанияЗадолженности,
	|	втТаблицаДанныхИзФайла.ЛицевойСчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	FAMIL,
	|	IMJA,
	|	OTCH,
	|	ЛицевойСчет";
	
	ТаблицаДанныхФайла = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Функция сокращает название города или улицы: убирает сокращения,
// определяющие тип данного элемента адреса: "г.", "ул." и так далее.
//
// Параметры:
//  Ресурс       - Строка - элемент адреса.
//
// Возвращаемое значение:
//  Строка - элемент адреса в сокращенном виде.
//
Функция НормализацияПолейАдресаАрхангельскойОбласти(Ресурс, Массив)
	
	Найден = Истина;
	
	Для Каждого Элемент Из Массив Цикл
		
		Если Прав(СокрЛП(Ресурс), СтрДлина(Элемент)) = Элемент Тогда
			ПредСимвол = Сред(СокрЛП(Ресурс), СтрДлина(СокрЛП(Ресурс)) - СтрДлина(Элемент), 1);
			
			Если ПредСимвол = " " Тогда
				Возврат СокрЛП(Лев(СокрЛП(Ресурс), СтрДлина(СокрЛП(Ресурс)) - СтрДлина(Элемент)));
			ИначеЕсли ПредСимвол = "." Тогда
				Возврат СокрЛП(Лев(СокрЛП(Ресурс), СтрДлина(СокрЛП(Ресурс)) - СтрДлина(Элемент) - 1));
			КонецЕсли;
		ИначеЕсли Лев(СокрЛП(Ресурс), СтрДлина(Элемент)) = Элемент Тогда
			СледСимвол = Сред(СокрЛП(Ресурс), СтрДлина(Элемент) + 1, 1);
			
			Если СледСимвол = " " Тогда
				Возврат СокрЛП(Сред(СокрЛП(Ресурс), СтрДлина(Элемент) + 1));
			ИначеЕсли СледСимвол = "." Тогда
				Возврат СокрЛП(Сред(СокрЛП(Ресурс), СтрДлина(Элемент) + 2));
			КонецЕсли;
		Иначе
			
			Найден = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Найден = Ложь Тогда
		Возврат Ресурс;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ВЫГРУЗКИ ДЛЯ НИЖЕГОРОДСКОЙ ОБЛАСТИ

#Область НижегородскаяОбласть

// Формирует таблицу всех выгружаемых данных.
//
Процедура СформироватьТаблицуДанныхНижегородск(ТаблицаРеестра, ТаблицаДопИнформации, Кодировка, СписокФайлов) Экспорт
	
	мТаблицаГородов = Новый ТаблицаЗначений;
	мТаблицаУлиц    = Новый ТаблицаЗначений;
	мТаблицаЛС      = Новый ТаблицаЗначений;
	
	Для Каждого ФайлЗагрузки Из СписокФайлов Цикл
		
		Если НЕ Найти(ФайлЗагрузки, "sprgor.DBF") = 0 Тогда
			
			// Загрузка кодов городов.
			ФайлДБФ = Новый XBase;
			ФайлДБФ.Кодировка = Кодировка;
			ФайлДБФ.ОткрытьФайл(ФайлЗагрузки, , Истина);
			Если ФайлДБФ.Открыта() Тогда
				
				мТаблицаГородов.Очистить();
				мТаблицаГородов.Колонки.Очистить();
				мТаблицаГородов.Колонки.Добавить("Gor",   УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(3));
				мТаблицаГородов.Колонки.Добавить("I_gor", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(100));
				
				Пока Не ФайлДБФ.ВКонце() Цикл
					НоваяСтрока = мТаблицаГородов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ФайлДБФ);
					НоваяСтрока.I_gor = СокрЛП(НоваяСтрока.I_gor);
					
					ФайлДБФ.Следующая();
				КонецЦикла;
				
				ФайлДБФ.ЗакрытьФайл();
				
			КонецЕсли;
				
		ИначеЕсли НЕ Найти(ФайлЗагрузки, "spruli.DBF") = 0 Тогда
			
			// Загрузка кодов улиц.
			ФайлДБФ = Новый XBase;
			ФайлДБФ.Кодировка = Кодировка;
			ФайлДБФ.ОткрытьФайл(ФайлЗагрузки, , Истина);
			Если ФайлДБФ.Открыта() Тогда
				мТаблицаУлиц.Очистить();
				мТаблицаУлиц.Колонки.Очистить();
				мТаблицаУлиц.Колонки.Добавить("Ulica",   УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(3));
				мТаблицаУлиц.Колонки.Добавить("I_Ulica", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(100));
				
				Пока Не ФайлДБФ.ВКонце() Цикл
					НоваяСтрока = мТаблицаУлиц.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ФайлДБФ);
					НоваяСтрока.I_Ulica = СокрЛП(НоваяСтрока.I_Ulica);
					
					ФайлДБФ.Следующая();
				КонецЦикла;
				
				ФайлДБФ.ЗакрытьФайл();
				
			КонецЕсли;
			
		ИначеЕсли НЕ Найти(ФайлЗагрузки, "reestr.DBF") = 0 Тогда
			
			// Загрузка реестра.
			ФайлДБФ = Новый XBase;
			ФайлДБФ.Кодировка = Кодировка;
			ФайлДБФ.ОткрытьФайл(ФайлЗагрузки, , Истина);
			Если ФайлДБФ.Открыта() Тогда
				ТаблицаРеестра.Очистить();
				ТаблицаДопИнформации.Очистить();
				
				Пока Не ФайлДБФ.ВКонце() Цикл
					НоваяСтрока = ТаблицаРеестра.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ФайлДБФ);
					НоваяСтрока.Fam    = ВРег(СокрЛП(ФайлДБФ.Fam));
					НоваяСтрока.Imja   = ВРег(СокрЛП(ФайлДБФ.Imja));
					НоваяСтрока.Otch   = ВРег(СокрЛП(ФайлДБФ.Otch));
					НоваяСтрока.Dom    = СокрЛП(Строка(ФайлДБФ.Dom));
					НоваяСтрока.Korpus = СокрЛП(ФайлДБФ.Korpus);
					Попытка
						НоваяСтрока.Kvart = Число(СокрЛП(ФайлДБФ.Kvart));
					Исключение
						// Установим номер квартиры 1, т.к. в данном случае могут быть загружены частные дома из файлы ОСЗН.
						НоваяСтрока.Kvart = 1;
					КонецПопытки;
					
					ФайлДБФ.Следующая();
				КонецЦикла;
				
				ФайлДБФ.ЗакрытьФайл();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
		
	ТаблицаАдресов = ПолучитьАдресаВсехЗданийНижегородск(мТаблицаГородов, мТаблицаУлиц);
	ТаблицаФИО     = ПолучитьФИОФизЛиц();
	ПолучитьТаблицуНачисленийНижегородск(ТаблицаРеестра, ТаблицаАдресов, ТаблицаФИО);
	ПолучитьДанныеДляДопПараметров(ТаблицаРеестра.Скопировать(), ТаблицаДопИнформации);
	ЗаполнитьПерерасчетыВТаблицуНачисленийНижегородск(ТаблицаРеестра, ТаблицаДопИнформации.Скопировать());
	
КонецПроцедуры

// Получает таблицу данных с начислениями и необходимыми данными.
//
Процедура ПолучитьТаблицуНачисленийНижегородск(ТаблицаРеестра, ТаблицаАдресов, ТаблицаФИО)
	
	ТаблицаИдентифицированныхЖильцов = ПолучитьТаблицуИдентифицированныхЖильцовНижегородск(ТаблицаРеестра, ТаблицаАдресов, ТаблицаФИО);
	
	Запрос = Новый Запрос;
	
	МенеджерВТ                     = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	// Параметры.
	
	ТаблицаПлощадей = НижегородскаяОбл_НастройкиВидыПлощадей.Выгрузить();
	
	ОбщаяПлощадь = ТаблицаПлощадей.Найти("Общая площадь", "ИзСправочника");
	ЖилаяПлощадь = ТаблицаПлощадей.Найти("Жилая площадь", "ИзСправочника");
	ОтапПлощадь  = ТаблицаПлощадей.Найти("Отапливаемая площадь", "ИзСправочника");
	
	Запрос.УстановитьПараметр("ДатаНачала",            НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ДатаКонца",             КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",           Организация);
	Запрос.УстановитьПараметр("ТаблицаИдентифЖильцов", ТаблицаИдентифицированныхЖильцов);
	Запрос.УстановитьПараметр("ТаблицаЖилФонда",       НижегородскаяОбл_НастройкиВидЖилФонда.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаТиповЖилья",     НижегородскаяОбл_НастройкиТипыЖилья.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаТиповОтопления", НижегородскаяОбл_НастройкиТипыОтоплений.Выгрузить());

	Запрос.УстановитьПараметр("ВидПлощадиОбщая",        ?(ЗначениеЗаполнено(ОбщаяПлощадь), ОбщаяПлощадь.ЗначениеВБазе, "ИСТИНА"));
	Запрос.УстановитьПараметр("ВидПлощадиЖилая",        ?(ЗначениеЗаполнено(ЖилаяПлощадь), ЖилаяПлощадь.ЗначениеВБазе, "ИСТИНА"));
	Запрос.УстановитьПараметр("ВидПлощадиОтапливаемая", ?(ЗначениеЗаполнено(ОтапПлощадь), ОтапПлощадь.ЗначениеВБазе, "ИСТИНА"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИзФайла.Проживающий,
	|	ТаблицаИзФайла.ЛицевойСчет,
	|	ТаблицаИзФайла.ПлощадьЖилыхПомещений,
	|	ТаблицаИзФайла.D_uch КАК D_uch,
	|	ТаблицаИзФайла.Cod_rs КАК Cod_rs,
	|	ТаблицаИзФайла.Polis КАК Polis,
	|	ТаблицаИзФайла.Fam КАК Fam,
	|	ТаблицаИзФайла.Imja КАК Imja,
	|	ТаблицаИзФайла.Otch КАК Otch,
	|	ТаблицаИзФайла.N_adr КАК N_adr,
	|	ТаблицаИзФайла.Gor КАК Gor,
	|	ТаблицаИзФайла.Ulica КАК Ulica,
	|	ТаблицаИзФайла.Dom КАК Dom,
	|	ТаблицаИзФайла.Korpus КАК Korpus,
	|	ТаблицаИзФайла.Kvart КАК Kvart,
	|	ТаблицаИзФайла.Kv_dop КАК Kv_dop,
	|	ТаблицаИзФайла.Sp_kat КАК Sp_kat,
	|	ТаблицаИзФайла.Kat_fix КАК Kat_fix,
	|	ТаблицаИзФайла.Pr_zakr КАК Pr_zakr,
	|	ТаблицаИзФайла.N_lsch КАК N_lsch,
	|	ТаблицаИзФайла.Prich КАК Prich,
	|	ТаблицаИзФайла.Gil_f КАК Gil_f,
	|	ТаблицаИзФайла.O_tot КАК O_tot,
	|	ТаблицаИзФайла.Pl_o КАК Pl_o,
	|	ТаблицаИзФайла.Pl_t КАК Pl_t,
	|	ТаблицаИзФайла.Pl_g КАК Pl_g,
	|	ТаблицаИзФайла.K_giv КАК K_giv,
	|	ТаблицаИзФайла.K_vub КАК K_vub,
	|	ТаблицаИзФайла.K_vpr КАК K_vpr,
	|	ТаблицаИзФайла.K_polr КАК K_polr,
	|	ТаблицаИзФайла.Pr_w1p КАК Pr_w1p,
	|	ТаблицаИзФайла.Prv2005 КАК Prv2005,
	|	ТаблицаИзФайла.Id_type КАК Id_type,
	|	ТаблицаИзФайла.Id_recalc КАК Id_recalc,
	|	ТаблицаИзФайла.D_begr КАК D_begr,
	|	ТаблицаИзФайла.D_endr КАК D_endr,
	|	ТаблицаИзФайла.K_org КАК K_org,
	|	ТаблицаИзФайла.K_regi КАК K_regi
	|ПОМЕСТИТЬ втТаблицаДанныхИзФайла
	|ИЗ
	|	&ТаблицаИдентифЖильцов КАК ТаблицаИзФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаИдентифЖильцов.Проживающий,
	|	ТаблицаИдентифЖильцов.ЛицевойСчет
	|ПОМЕСТИТЬ втИдентифицированныеЖильцы
	|ИЗ
	|	&ТаблицаИдентифЖильцов КАК ТаблицаИдентифЖильцов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_Здания.Ссылка КАК Здание,
	|	КВП_Здания.ПлощадьЗданияЖилыхНежилыхПомещений КАК ПлощадьЖилыхНежилыхПомещений,
	|	КВП_Здания.ПлощадьЗданияМестОбщегоПользования КАК ПлощадьМестОбщегоПользования,
	|	КВП_Здания.ПлощадьЗданияОбщая,
	|	КВП_Здания.ТипЖилФонда
	|ПОМЕСТИТЬ втДанныеЗданий
	|ИЗ
	|	Справочник.КВП_Здания КАК КВП_Здания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Идентификатор КАК КодЛС,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Владелец КАК Здание,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект КАК Помещение,
	|	ЕСТЬNULL(втДанныеЗданий.ПлощадьЖилыхНежилыхПомещений, 0) КАК ПлощадьЖилыхНежилыхПомещений,
	|	ЕСТЬNULL(втДанныеЗданий.ПлощадьМестОбщегоПользования, 0) КАК ПлощадьМестОбщегоПользования,
	|	ЕСТЬNULL(втДанныеЗданий.ПлощадьЗданияОбщая, 0) КАК ПлощадьЗданияОбщая,
	|	ЕСТЬNULL(втДанныеЗданий.ТипЖилФонда, ЗНАЧЕНИЕ(Перечисление.КВП_ТипыЖилогоФонда.ПустаяСсылка)) КАК ТипЖилФонда,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.ВидПомещения КАК ВидПомещения
	|ПОМЕСТИТЬ втЛицевыеСчета
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втИдентифицированныеЖильцы.ЛицевойСчет
	|				ИЗ
	|					втИдентифицированныеЖильцы КАК втИдентифицированныеЖильцы)) КАК КВП_ЛицевыеСчетаСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеЗданий КАК втДанныеЗданий
	|		ПО КВП_ЛицевыеСчетаСрезПоследних.Объект.Владелец = втДанныеЗданий.Здание
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует";
	
	Запрос.Выполнить();
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ВременнаяРегистрация
	|ПОМЕСТИТЬ втЗарегистрированные
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втЛицевыеСчета.ЛицевойСчет
	|				ИЗ
	|					втЛицевыеСчета КАК втЛицевыеСчета)) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗарегистрированные.ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втЗарегистрированные.Жилец) КАК КолПостоянноЗар
	|ПОМЕСТИТЬ втПостоянноЗарегистрированные
	|ИЗ
	|	втЗарегистрированные КАК втЗарегистрированные
	|ГДЕ
	|	НЕ втЗарегистрированные.ВременнаяРегистрация
	|
	|СГРУППИРОВАТЬ ПО
	|	втЗарегистрированные.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗарегистрированные.ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втЗарегистрированные.Жилец) КАК КолВременноЗар
	|ПОМЕСТИТЬ втВременноЗарегистрированные
	|ИЗ
	|	втЗарегистрированные КАК втЗарегистрированные
	|ГДЕ
	|	втЗарегистрированные.ВременнаяРегистрация
	|
	|СГРУППИРОВАТЬ ПО
	|	втЗарегистрированные.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец) КАК КолВременноОтс
	|ПОМЕСТИТЬ втВременноОтс
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втЛицевыеСчета.ЛицевойСчет
	|				ИЗ
	|					втЛицевыеСчета КАК втЛицевыеСчета)) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
	|ГДЕ
	|	НЕ УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛицевыеСчета.ЛицевойСчет,
	|	втЛицевыеСчета.КодЛС,
	|	втЛицевыеСчета.Помещение,
	|	втЛицевыеСчета.Здание,
	|	втЛицевыеСчета.ПлощадьЖилыхНежилыхПомещений,
	|	втЛицевыеСчета.ПлощадьМестОбщегоПользования,
	|	втЛицевыеСчета.ПлощадьЗданияОбщая,
	|	втЛицевыеСчета.ТипЖилФонда,
	|	втЛицевыеСчета.ВидПомещения,
	|	ЕСТЬNULL(втВременноЗарегистрированные.КолВременноЗар, 0) КАК КолВременноЗар,
	|	ЕСТЬNULL(втПостоянноЗарегистрированные.КолПостоянноЗар, 0) КАК КолПостоянноЗар,
	|	ЕСТЬNULL(втВременноОтс.КолВременноОтс, 0) КАК КолВременноОтс
	|ПОМЕСТИТЬ втСЗарегистрированными
	|ИЗ
	|	втЛицевыеСчета КАК втЛицевыеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВременноЗарегистрированные КАК втВременноЗарегистрированные
	|		ПО втЛицевыеСчета.ЛицевойСчет = втВременноЗарегистрированные.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПостоянноЗарегистрированные КАК втПостоянноЗарегистрированные
	|		ПО втЛицевыеСчета.ЛицевойСчет = втПостоянноЗарегистрированные.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВременноОтс КАК втВременноОтс
	|		ПО втЛицевыеСчета.ЛицевойСчет = втВременноОтс.ЛицевойСчет";
	
	Запрос.Выполнить();
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект,
	|	КВП_ПлощадьПомещенияСрезПоследних.ВидПлощади,
	|	КВП_ПлощадьПомещенияСрезПоследних.Площадь
	|ПОМЕСТИТЬ втПлощадиПомещений
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|			&ДатаКонца,
	|			Объект В
	|				(ВЫБРАТЬ
	|					втСЗарегистрированными.Помещение
	|				ИЗ
	|					втСЗарегистрированными КАК втСЗарегистрированными)) КАК КВП_ПлощадьПомещенияСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.Объект,
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет,
	|	ВЫБОР
	|		КОГДА КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель = 0
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|			КОГДА КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель = 0
	|				ТОГДА 0
	|			ИНАЧЕ КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель / КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель
	|			КОНЕЦ
	|		КОНЕЦ КАК ДоляЛС
	|ПОМЕСТИТЬ втРазмерыДолейЛС
	|ИЗ
	|	РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(
	|				&ДатаКонца,
	|				ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втСЗарегистрированными.ЛицевойСчет
	|					ИЗ
	|						втСЗарегистрированными КАК втСЗарегистрированными)) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(втРазмерыДолейЛС.ЛицевойСчет, ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)) КАК ЛицевойСчет,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втПлощадиПомещений.ВидПлощади = &ВидПлощадиОбщая
	|				ТОГДА ДоляЛС * ЕСТЬNULL(втПлощадиПомещений.Площадь, 0)
	|		КОНЕЦ) КАК ОбщаяПлощадь,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втПлощадиПомещений.ВидПлощади = &ВидПлощадиЖилая
	|				ТОГДА ДоляЛС * ЕСТЬNULL(втПлощадиПомещений.Площадь, 0)
	|		КОНЕЦ) КАК ЖилаяПлощадь,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втПлощадиПомещений.ВидПлощади = &ВидПлощадиОтапливаемая
	|				ТОГДА ДоляЛС * ЕСТЬNULL(втПлощадиПомещений.Площадь, 0)
	|		КОНЕЦ) КАК ОтапливаемаяПлощадь
	|ПОМЕСТИТЬ втДанныеОПлощадях
	|ИЗ
	|	втРазмерыДолейЛС КАК втРазмерыДолейЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПлощадиПомещений КАК втПлощадиПомещений
	|		ПО втРазмерыДолейЛС.Объект = втПлощадиПомещений.Объект
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(втРазмерыДолейЛС.ЛицевойСчет, ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСЗарегистрированными.ЛицевойСчет,
	|	втСЗарегистрированными.КодЛС,
	|	втСЗарегистрированными.Помещение,
	|	втСЗарегистрированными.Здание,
	|	втСЗарегистрированными.ПлощадьЖилыхНежилыхПомещений,
	|	втСЗарегистрированными.ПлощадьМестОбщегоПользования,
	|	втСЗарегистрированными.ПлощадьЗданияОбщая,
	|	втСЗарегистрированными.ТипЖилФонда,
	|	втСЗарегистрированными.ВидПомещения,
	|	ЕСТЬNULL(втДанныеОПлощадях.ОбщаяПлощадь, 0) КАК ОбщаяПлощадь,
	|	ЕСТЬNULL(втДанныеОПлощадях.ЖилаяПлощадь, 0) КАК ЖилаяПлощадь,
	|	ЕСТЬNULL(втДанныеОПлощадях.ОтапливаемаяПлощадь, 0) КАК ОтапливаемаяПлощадь,
	|	втСЗарегистрированными.КолВременноЗар,
	|	втСЗарегистрированными.КолПостоянноЗар,
	|	втСЗарегистрированными.КолВременноОтс
	|ПОМЕСТИТЬ втДанныеСПлощадями
	|ИЗ
	|	втСЗарегистрированными КАК втСЗарегистрированными
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеОПлощадях КАК втДанныеОПлощадях
	|		ПО втСЗарегистрированными.ЛицевойСчет = втДанныеОПлощадях.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЖилФонда.Номер,
	|	ТаблицаЖилФонда.ЗначениеВБазе
	|ПОМЕСТИТЬ втТипыЖилФонда
	|ИЗ
	|	&ТаблицаЖилФонда КАК ТаблицаЖилФонда
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТиповЖилья.Номер,
	|	ТаблицаТиповЖилья.ЗначениеВБазе
	|ПОМЕСТИТЬ втТипыЖилья
	|ИЗ
	|	&ТаблицаТиповЖилья КАК ТаблицаТиповЖилья
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_БлагоустройствоОбъектов.Объект,
	|	ВЫРАЗИТЬ(КВП_БлагоустройствоОбъектов.Значение КАК СТРОКА) КАК ТипОтопления
	|ПОМЕСТИТЬ втБлагоустройстваЗданий
	|ИЗ
	|	РегистрСведений.КВП_БлагоустройствоОбъектов КАК КВП_БлагоустройствоОбъектов
	|ГДЕ
	|	КВП_БлагоустройствоОбъектов.Объект В
	|			(ВЫБРАТЬ
	|				втСЗарегистрированными.Здание
	|			ИЗ
	|				втСЗарегистрированными КАК втСЗарегистрированными)
	|	И КВП_БлагоустройствоОбъектов.ВидБлагоустройства = ЗНАЧЕНИЕ(Справочник.КВП_ВидыБлагоустройстваОбъектов.Отопление)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаТиповОтопления.Номер,
	|	ТаблицаТиповОтопления.ЗначениеВБазе
	|ПОМЕСТИТЬ втТипыОтопления
	|ИЗ
	|	&ТаблицаТиповОтопления КАК ТаблицаТиповОтопления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втБлагоустройстваЗданий.Объект,
	|	ЕСТЬNULL(втТипыОтопления.Номер, """") КАК ТипОтопления
	|ПОМЕСТИТЬ втТипыОтопленияЗданий
	|ИЗ
	|	втБлагоустройстваЗданий КАК втБлагоустройстваЗданий
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТипыОтопления КАК втТипыОтопления
	|		ПО (втБлагоустройстваЗданий.ТипОтопления ПОДОБНО втТипыОтопления.ЗначениеВБазе)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеСПлощадями.ЛицевойСчет,
	|	втДанныеСПлощадями.КодЛС,
	|	втДанныеСПлощадями.Помещение,
	|	втДанныеСПлощадями.Здание,
	|	втДанныеСПлощадями.ПлощадьЖилыхНежилыхПомещений,
	|	втДанныеСПлощадями.ПлощадьМестОбщегоПользования,
	|	втДанныеСПлощадями.ПлощадьЗданияОбщая,
	|	ЕСТЬNULL(втТипыЖилФонда.Номер, """") КАК ТипЖилФонда,
	|	ЕСТЬNULL(втТипыЖилья.Номер, """") КАК ТипЖилья,
	|	втДанныеСПлощадями.ОбщаяПлощадь,
	|	втДанныеСПлощадями.ЖилаяПлощадь,
	|	втДанныеСПлощадями.ОтапливаемаяПлощадь,
	|	втДанныеСПлощадями.КолВременноЗар,
	|	втДанныеСПлощадями.КолПостоянноЗар,
	|	втДанныеСПлощадями.КолВременноОтс,
	|	ЕСТЬNULL(втТипыОтопленияЗданий.ТипОтопления, """") КАК ТипОтопления
	|ПОМЕСТИТЬ втДанныеСПлощадямиИтог
	|ИЗ
	|	втДанныеСПлощадями КАК втДанныеСПлощадями
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТипыЖилФонда КАК втТипыЖилФонда
	|		ПО втДанныеСПлощадями.ТипЖилФонда = втТипыЖилФонда.ЗначениеВБазе
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТипыЖилья КАК втТипыЖилья
	|		ПО втДанныеСПлощадями.ВидПомещения = втТипыЖилья.ЗначениеВБазе
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТипыОтопленияЗданий КАК втТипыОтопленияЗданий
	|		ПО втДанныеСПлощадями.Здание = втТипыОтопленияЗданий.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втСЗарегистрированными
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втДанныеОПлощадях
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втДанныеСПлощадями";
	
	Запрос.Выполнить();
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	втИдентифицированныеЖильцы.Проживающий,
	|	втИдентифицированныеЖильцы.ЛицевойСчет,
	|	втДанныеСПлощадямиИтог.КодЛС,
	|	втДанныеСПлощадямиИтог.Помещение,
	|	втДанныеСПлощадямиИтог.Здание,
	|	втДанныеСПлощадямиИтог.ПлощадьЖилыхНежилыхПомещений,
	|	втДанныеСПлощадямиИтог.ПлощадьМестОбщегоПользования,
	|	втДанныеСПлощадямиИтог.ПлощадьЗданияОбщая,
	|	втДанныеСПлощадямиИтог.ТипЖилФонда,
	|	втДанныеСПлощадямиИтог.ТипЖилья,
	|	втДанныеСПлощадямиИтог.ТипОтопления,
	|	втДанныеСПлощадямиИтог.ОбщаяПлощадь,
	|	втДанныеСПлощадямиИтог.ЖилаяПлощадь,
	|	втДанныеСПлощадямиИтог.ОтапливаемаяПлощадь,
	|	втДанныеСПлощадямиИтог.КолВременноЗар,
	|	втДанныеСПлощадямиИтог.КолПостоянноЗар,
	|	втДанныеСПлощадямиИтог.КолВременноОтс
	|ПОМЕСТИТЬ втИдентифЖильцыИтог
	|ИЗ
	|	втИдентифицированныеЖильцы КАК втИдентифицированныеЖильцы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДанныеСПлощадямиИтог КАК втДанныеСПлощадямиИтог
	|		ПО втИдентифицированныеЖильцы.ЛицевойСчет = втДанныеСПлощадямиИтог.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаДанныхИзФайла.D_uch КАК D_uch,
	|	втТаблицаДанныхИзФайла.Cod_rs КАК Cod_rs,
	|	втТаблицаДанныхИзФайла.Polis КАК Polis,
	|	втТаблицаДанныхИзФайла.Fam КАК Fam,
	|	втТаблицаДанныхИзФайла.Imja КАК Imja,
	|	втТаблицаДанныхИзФайла.Otch КАК Otch,
	|	втТаблицаДанныхИзФайла.N_adr КАК N_adr,
	|	втТаблицаДанныхИзФайла.Gor КАК Gor,
	|	втТаблицаДанныхИзФайла.Ulica КАК Ulica,
	|	втТаблицаДанныхИзФайла.Dom КАК Dom,
	|	втТаблицаДанныхИзФайла.Korpus КАК Korpus,
	|	втТаблицаДанныхИзФайла.Kvart КАК Kvart,
	|	ЕСТЬNULL(втИдентифЖильцыИтог.ПлощадьЗданияОбщая, 0) КАК S_bld,
	|	втТаблицаДанныхИзФайла.ПлощадьЖилыхПомещений КАК S_liv,
	|	ЕСТЬNULL(втИдентифЖильцыИтог.ПлощадьЖилыхНежилыхПомещений, 0) - втТаблицаДанныхИзФайла.ПлощадьЖилыхПомещений КАК S_non,
	|	ЕСТЬNULL(втИдентифЖильцыИтог.ПлощадьМестОбщегоПользования, 0) КАК S_gen,
	|	втТаблицаДанныхИзФайла.Kv_dop КАК Kv_dop,
	|	втТаблицаДанныхИзФайла.Sp_kat КАК Sp_kat,
	|	втТаблицаДанныхИзФайла.Kat_fix КАК Kat_fix,
	|	втТаблицаДанныхИзФайла.Pr_zakr КАК Pr_zakr,
	|	ВЫБОР
	|		КОГДА втИдентифЖильцыИтог.КодЛС ЕСТЬ NULL 
	|			ТОГДА втТаблицаДанныхИзФайла.N_lsch
	|		ИНАЧЕ втИдентифЖильцыИтог.КодЛС
	|	КОНЕЦ КАК N_lsch,
	|	втТаблицаДанныхИзФайла.Prich КАК Prich,
	|	ВЫБОР
	|		КОГДА втИдентифЖильцыИтог.ЛицевойСчет ЕСТЬ NULL 
	|			ТОГДА втТаблицаДанныхИзФайла.Gil_f
	|		ИНАЧЕ ЕСТЬNULL(втИдентифЖильцыИтог.ТипЖилФонда, """")
	|	КОНЕЦ КАК Gil_f,
	|	ВЫБОР
	|		КОГДА втИдентифЖильцыИтог.ЛицевойСчет ЕСТЬ NULL 
	|			ТОГДА втТаблицаДанныхИзФайла.O_tot
	|		ИНАЧЕ ЕСТЬNULL(втИдентифЖильцыИтог.ТипОтопления, """")
	|	КОНЕЦ КАК O_tot,
	|	ВЫБОР
	|		КОГДА втИдентифЖильцыИтог.ЛицевойСчет ЕСТЬ NULL 
	|			ТОГДА втТаблицаДанныхИзФайла.Pl_o
	|		ИНАЧЕ ЕСТЬNULL(втИдентифЖильцыИтог.ОбщаяПлощадь, 0)
	|	КОНЕЦ КАК Pl_o,
	|	ВЫБОР
	|		КОГДА втИдентифЖильцыИтог.ЛицевойСчет ЕСТЬ NULL 
	|			ТОГДА втТаблицаДанныхИзФайла.Pl_t
	|		ИНАЧЕ ЕСТЬNULL(втИдентифЖильцыИтог.ОтапливаемаяПлощадь, 0)
	|	КОНЕЦ КАК Pl_t,
	|	ВЫБОР
	|		КОГДА втИдентифЖильцыИтог.ЛицевойСчет ЕСТЬ NULL 
	|			ТОГДА втТаблицаДанныхИзФайла.Pl_g
	|		ИНАЧЕ ЕСТЬNULL(втИдентифЖильцыИтог.ЖилаяПлощадь, 0)
	|	КОНЕЦ КАК Pl_g,
	|	ВЫБОР
	|		КОГДА втИдентифЖильцыИтог.ЛицевойСчет ЕСТЬ NULL 
	|			ТОГДА втТаблицаДанныхИзФайла.K_giv
	|		ИНАЧЕ ЕСТЬNULL(втИдентифЖильцыИтог.КолПостоянноЗар, 0)
	|	КОНЕЦ КАК K_giv,
	|	ВЫБОР
	|		КОГДА втИдентифЖильцыИтог.ЛицевойСчет ЕСТЬ NULL 
	|			ТОГДА втТаблицаДанныхИзФайла.K_vub
	|		ИНАЧЕ ЕСТЬNULL(втИдентифЖильцыИтог.КолВременноОтс, 0)
	|	КОНЕЦ КАК K_vub,
	|	ВЫБОР
	|		КОГДА втИдентифЖильцыИтог.ЛицевойСчет ЕСТЬ NULL 
	|			ТОГДА втТаблицаДанныхИзФайла.K_vpr
	|		ИНАЧЕ ЕСТЬNULL(втИдентифЖильцыИтог.КолВременноЗар, 0)
	|	КОНЕЦ КАК K_vpr,
	|	втТаблицаДанныхИзФайла.K_polr КАК K_polr,
	|	втТаблицаДанныхИзФайла.Pr_w1p КАК Pr_w1p,
	|	втТаблицаДанныхИзФайла.Prv2005 КАК Prv2005,
	|	ВЫБОР
	|		КОГДА втИдентифЖильцыИтог.ТипЖилья ЕСТЬ NULL 
	|			ТОГДА втТаблицаДанныхИзФайла.Id_type
	|		ИНАЧЕ ЕСТЬNULL(втИдентифЖильцыИтог.ТипЖилья, """")
	|	КОНЕЦ КАК Id_type,
	|	втТаблицаДанныхИзФайла.Id_recalc КАК Id_recalc,
	|	втТаблицаДанныхИзФайла.D_begr КАК D_begr,
	|	втТаблицаДанныхИзФайла.D_endr КАК D_endr,
	|	втТаблицаДанныхИзФайла.K_org КАК K_org,
	|	втТаблицаДанныхИзФайла.K_regi КАК K_regi,
	|	втТаблицаДанныхИзФайла.ЛицевойСчет
	|ИЗ
	|	втТаблицаДанныхИзФайла КАК втТаблицаДанныхИзФайла
	|		ЛЕВОЕ СОЕДИНЕНИЕ втИдентифЖильцыИтог КАК втИдентифЖильцыИтог
	|		ПО втТаблицаДанныхИзФайла.Проживающий = втИдентифЖильцыИтог.Проживающий
	|			И втТаблицаДанныхИзФайла.ЛицевойСчет = втИдентифЖильцыИтог.ЛицевойСчет";
	
	ТаблицаРеестра = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Получает таблицу жильцов идентифицированных с записями из файла-запроса.
//
Функция ПолучитьТаблицуИдентифицированныхЖильцовНижегородск(ТаблицаРеестра, ТаблицаАдресов, ТаблицаФИО)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИзФайла.D_uch КАК D_uch,
	|	ТаблицаИзФайла.Cod_rs КАК Cod_rs,
	|	ТаблицаИзФайла.Polis КАК Polis,
	|	ТаблицаИзФайла.Fam КАК Fam,
	|	ТаблицаИзФайла.Imja КАК Imja,
	|	ТаблицаИзФайла.Otch КАК Otch,
	|	ТаблицаИзФайла.N_adr КАК N_adr,
	|	ТаблицаИзФайла.Gor КАК Gor,
	|	ТаблицаИзФайла.Ulica КАК Ulica,
	|	ТаблицаИзФайла.Dom КАК Dom,
	|	ТаблицаИзФайла.Korpus КАК Korpus,
	|	ТаблицаИзФайла.Kvart КАК Kvart,
	|	ТаблицаИзФайла.Kv_dop КАК Kv_dop,
	|	ТаблицаИзФайла.Sp_kat КАК Sp_kat,
	|	ТаблицаИзФайла.Kat_fix КАК Kat_fix,
	|	ТаблицаИзФайла.Pr_zakr КАК Pr_zakr,
	|	ТаблицаИзФайла.N_lsch КАК N_lsch,
	|	ТаблицаИзФайла.Prich КАК Prich,
	|	ТаблицаИзФайла.Gil_f КАК Gil_f,
	|	ТаблицаИзФайла.O_tot КАК O_tot,
	|	ТаблицаИзФайла.Pl_o КАК Pl_o,
	|	ТаблицаИзФайла.Pl_t КАК Pl_t,
	|	ТаблицаИзФайла.Pl_g КАК Pl_g,
	|	ТаблицаИзФайла.K_giv КАК K_giv,
	|	ТаблицаИзФайла.K_vub КАК K_vub,
	|	ТаблицаИзФайла.K_vpr КАК K_vpr,
	|	ТаблицаИзФайла.K_polr КАК K_polr,
	|	ТаблицаИзФайла.Pr_w1p КАК Pr_w1p,
	|	ТаблицаИзФайла.Prv2005 КАК Prv2005,
	|	ТаблицаИзФайла.Id_type КАК Id_type,
	|	ТаблицаИзФайла.Id_recalc КАК Id_recalc,
	|	ТаблицаИзФайла.D_begr КАК D_begr,
	|	ТаблицаИзФайла.D_endr КАК D_endr,
	|	ТаблицаИзФайла.K_org КАК K_org,
	|	ТаблицаИзФайла.K_regi КАК K_regi
	|ПОМЕСТИТЬ втТаблицаДанныхИзФайла
	|ИЗ
	|	&ТаблицаИзФайла КАК ТаблицаИзФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаФИО.ФизическоеЛицо,
	|	ТаблицаФИО.Фамилия,
	|	ТаблицаФИО.Имя,
	|	ТаблицаФИО.Отчество
	|ПОМЕСТИТЬ втФИОФизЛиц
	|ИЗ
	|	&ТаблицаФИО КАК ТаблицаФИО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Жильцы.Ссылка КАК Проживающий,
	|	УПЖКХ_Жильцы.ФизЛицо,
	|	УПЖКХ_Жильцы.Владелец.Адрес.Владелец КАК Здание,
	|	УПЖКХ_Жильцы.Владелец.Адрес.Код КАК Квартира,
	|	УПЖКХ_Жильцы.Владелец КАК ЛицевойСчет
	|ПОМЕСТИТЬ втЖильцы
	|ИЗ
	|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
	|ГДЕ
	|	НЕ УПЖКХ_Жильцы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцы.Проживающий,
	|	ЕСТЬNULL(втФИОФизЛиц.Фамилия, """") КАК Фамилия,
	|	ЕСТЬNULL(втФИОФизЛиц.Имя, """") КАК Имя,
	|	ЕСТЬNULL(втФИОФизЛиц.Отчество, """") КАК Отчество,
	|	втЖильцы.Здание,
	|	втЖильцы.Квартира,
	|	втЖильцы.ЛицевойСчет
	|ПОМЕСТИТЬ втЖильцыСФИО
	|ИЗ
	|	втЖильцы КАК втЖильцы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втФИОФизЛиц КАК втФИОФизЛиц
	|		ПО втЖильцы.ФизЛицо = втФИОФизЛиц.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаАдресов.Здание,
	|	ТаблицаАдресов.КодГорода,
	|	ТаблицаАдресов.КодУлицы,
	|	ТаблицаАдресов.Дом,
	|	ТаблицаАдресов.Корпус,
	|	ТаблицаАдресов.ПлощадьЖилыхПомещений
	|ПОМЕСТИТЬ втАдреса
	|ИЗ
	|	&ТаблицаАдресов КАК ТаблицаАдресов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцыСФИО.Проживающий,
	|	втЖильцыСФИО.Фамилия,
	|	втЖильцыСФИО.Имя,
	|	втЖильцыСФИО.Отчество,
	|	ЕСТЬNULL(втАдреса.КодГорода, """") КАК КодГорода,
	|	ЕСТЬNULL(втАдреса.КодУлицы, """") КАК КодУлицы,
	|	ЕСТЬNULL(втАдреса.Дом, """") КАК Дом,
	|	ЕСТЬNULL(втАдреса.Корпус, """") КАК Корпус,
	|	ЕСТЬNULL(втАдреса.ПлощадьЖилыхПомещений, 0) КАК ПлощадьЖилыхПомещений,
	|	втЖильцыСФИО.Квартира,
	|	втЖильцыСФИО.ЛицевойСчет
	|ПОМЕСТИТЬ втЖильцыСАдресами
	|ИЗ
	|	втЖильцыСФИО КАК втЖильцыСФИО
	|		ЛЕВОЕ СОЕДИНЕНИЕ втАдреса КАК втАдреса
	|		ПО втЖильцыСФИО.Здание = втАдреса.Здание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцыСАдресами.ЛицевойСчет,
	|	втЖильцыСАдресами.КодГорода,
	|	втЖильцыСАдресами.КодУлицы,
	|	втЖильцыСАдресами.Дом,
	|	втЖильцыСАдресами.Корпус,
	|	втЖильцыСАдресами.Квартира
	|ПОМЕСТИТЬ втПомещенияИдентифПоАдресу
	|ИЗ
	|	втТаблицаДанныхИзФайла КАК втТаблицаДанныхИзФайла
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЖильцыСАдресами КАК втЖильцыСАдресами
	|		ПО втТаблицаДанныхИзФайла.Gor = втЖильцыСАдресами.КодГорода
	|			И втТаблицаДанныхИзФайла.Ulica = втЖильцыСАдресами.КодУлицы
	|			И втТаблицаДанныхИзФайла.Dom = втЖильцыСАдресами.Дом
	|			И втТаблицаДанныхИзФайла.Korpus = втЖильцыСАдресами.Корпус
	|			И втТаблицаДанныхИзФайла.Kvart = втЖильцыСАдресами.Квартира
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втЖильцыСАдресами.Проживающий, ЗНАЧЕНИЕ(Справочник.УПЖКХ_Жильцы.ПустаяСсылка)) КАК Проживающий,
	|	ЕСТЬNULL(втЖильцыСАдресами.ЛицевойСчет, ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)) КАК ЛицевойСчет,
	|	СУММА(ЕСТЬNULL(втЖильцыСАдресами.ПлощадьЖилыхПомещений, 0)) КАК ПлощадьЖилыхПомещений,
	|	втТаблицаДанныхИзФайла.D_uch,
	|	втТаблицаДанныхИзФайла.Cod_rs,
	|	втТаблицаДанныхИзФайла.Polis,
	|	втТаблицаДанныхИзФайла.Fam,
	|	втТаблицаДанныхИзФайла.Imja,
	|	втТаблицаДанныхИзФайла.Otch,
	|	втТаблицаДанныхИзФайла.N_adr,
	|	втТаблицаДанныхИзФайла.Gor,
	|	втТаблицаДанныхИзФайла.Ulica,
	|	втТаблицаДанныхИзФайла.Dom,
	|	втТаблицаДанныхИзФайла.Korpus,
	|	втТаблицаДанныхИзФайла.Kvart,
	|	втТаблицаДанныхИзФайла.Kv_dop,
	|	втТаблицаДанныхИзФайла.Sp_kat,
	|	втТаблицаДанныхИзФайла.Kat_fix,
	|	втТаблицаДанныхИзФайла.Pr_zakr,
	|	втТаблицаДанныхИзФайла.N_lsch,
	|	ВЫБОР
	|		КОГДА НЕ втЖильцыСАдресами.ЛицевойСчет ЕСТЬ NULL 
	|			ТОГДА """"
	|		ИНАЧЕ ВЫБОР
	|				КОГДА втПомещенияИдентифПоАдресу.ЛицевойСчет ЕСТЬ NULL 
	|					ТОГДА ""7""
	|				ИНАЧЕ ""8""
	|			КОНЕЦ
	|	КОНЕЦ КАК Prich,
	|	втТаблицаДанныхИзФайла.Gil_f,
	|	втТаблицаДанныхИзФайла.O_tot,
	|	втТаблицаДанныхИзФайла.Pl_o,
	|	втТаблицаДанныхИзФайла.Pl_t,
	|	втТаблицаДанныхИзФайла.Pl_g,
	|	втТаблицаДанныхИзФайла.K_giv,
	|	втТаблицаДанныхИзФайла.K_vub,
	|	втТаблицаДанныхИзФайла.K_vpr,
	|	втТаблицаДанныхИзФайла.K_polr,
	|	втТаблицаДанныхИзФайла.Pr_w1p,
	|	втТаблицаДанныхИзФайла.Prv2005,
	|	втТаблицаДанныхИзФайла.Id_type,
	|	втТаблицаДанныхИзФайла.Id_recalc,
	|	втТаблицаДанныхИзФайла.D_begr,
	|	втТаблицаДанныхИзФайла.D_endr,
	|	втТаблицаДанныхИзФайла.K_org,
	|	втТаблицаДанныхИзФайла.K_regi
	|ИЗ
	|	втТаблицаДанныхИзФайла КАК втТаблицаДанныхИзФайла
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЖильцыСАдресами КАК втЖильцыСАдресами
	|		ПО втТаблицаДанныхИзФайла.Fam = втЖильцыСАдресами.Фамилия
	|			И втТаблицаДанныхИзФайла.Imja = втЖильцыСАдресами.Имя
	|			И втТаблицаДанныхИзФайла.Otch = втЖильцыСАдресами.Отчество
	|			И втТаблицаДанныхИзФайла.Gor = втЖильцыСАдресами.КодГорода
	|			И втТаблицаДанныхИзФайла.Ulica = втЖильцыСАдресами.КодУлицы
	|			И втТаблицаДанныхИзФайла.Dom = втЖильцыСАдресами.Дом
	|			И втТаблицаДанныхИзФайла.Korpus = втЖильцыСАдресами.Корпус
	|			И втТаблицаДанныхИзФайла.Kvart = втЖильцыСАдресами.Квартира
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПомещенияИдентифПоАдресу КАК втПомещенияИдентифПоАдресу
	|		ПО втТаблицаДанныхИзФайла.Gor = втПомещенияИдентифПоАдресу.КодГорода
	|			И втТаблицаДанныхИзФайла.Ulica = втПомещенияИдентифПоАдресу.КодУлицы
	|			И втТаблицаДанныхИзФайла.Dom = втПомещенияИдентифПоАдресу.Дом
	|			И втТаблицаДанныхИзФайла.Korpus = втПомещенияИдентифПоАдресу.Корпус
	|			И втТаблицаДанныхИзФайла.Kvart = втПомещенияИдентифПоАдресу.Квартира
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(втЖильцыСАдресами.Проживающий, ЗНАЧЕНИЕ(Справочник.УПЖКХ_Жильцы.ПустаяСсылка)),
	|	ЕСТЬNULL(втЖильцыСАдресами.ЛицевойСчет, ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)),
	|	втТаблицаДанныхИзФайла.D_uch,
	|	втТаблицаДанныхИзФайла.Cod_rs,
	|	втТаблицаДанныхИзФайла.Polis,
	|	втТаблицаДанныхИзФайла.Fam,
	|	втТаблицаДанныхИзФайла.Imja,
	|	втТаблицаДанныхИзФайла.Otch,
	|	втТаблицаДанныхИзФайла.N_adr,
	|	втТаблицаДанныхИзФайла.Gor,
	|	втТаблицаДанныхИзФайла.Ulica,
	|	втТаблицаДанныхИзФайла.Dom,
	|	втТаблицаДанныхИзФайла.Korpus,
	|	втТаблицаДанныхИзФайла.Kvart,
	|	втТаблицаДанныхИзФайла.Kv_dop,
	|	втТаблицаДанныхИзФайла.Sp_kat,
	|	втТаблицаДанныхИзФайла.Kat_fix,
	|	втТаблицаДанныхИзФайла.Pr_zakr,
	|	втТаблицаДанныхИзФайла.N_lsch,
	|	ВЫБОР
	|		КОГДА НЕ втЖильцыСАдресами.ЛицевойСчет ЕСТЬ NULL 
	|			ТОГДА """"
	|		ИНАЧЕ ВЫБОР
	|				КОГДА втПомещенияИдентифПоАдресу.ЛицевойСчет ЕСТЬ NULL 
	|					ТОГДА ""7""
	|				ИНАЧЕ ""8""
	|			КОНЕЦ
	|	КОНЕЦ,
	|	втТаблицаДанныхИзФайла.Gil_f,
	|	втТаблицаДанныхИзФайла.O_tot,
	|	втТаблицаДанныхИзФайла.Pl_o,
	|	втТаблицаДанныхИзФайла.Pl_t,
	|	втТаблицаДанныхИзФайла.Pl_g,
	|	втТаблицаДанныхИзФайла.K_giv,
	|	втТаблицаДанныхИзФайла.K_vub,
	|	втТаблицаДанныхИзФайла.K_vpr,
	|	втТаблицаДанныхИзФайла.K_polr,
	|	втТаблицаДанныхИзФайла.Pr_w1p,
	|	втТаблицаДанныхИзФайла.Prv2005,
	|	втТаблицаДанныхИзФайла.Id_type,
	|	втТаблицаДанныхИзФайла.Id_recalc,
	|	втТаблицаДанныхИзФайла.D_begr,
	|	втТаблицаДанныхИзФайла.D_endr,
	|	втТаблицаДанныхИзФайла.K_org,
	|	втТаблицаДанныхИзФайла.K_regi";
	
	Запрос.УстановитьПараметр("ТаблицаИзФайла", ТаблицаРеестра);
	Запрос.УстановитьПараметр("ДатаКонца",      КонецМесяца(Период));
	Запрос.УстановитьПараметр("ТаблицаАдресов", ТаблицаАдресов);
	Запрос.УстановитьПараметр("ТаблицаФИО",     ТаблицаФИО);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции // ПолучитьТаблицуИдентифицированныхЖильцовНижегородск()

// Процедура заполняет необходимыми данными таблицу "Дополнительные данные".
//
Процедура ПолучитьДанныеДляДопПараметров(ВрСкопированнаяТаблица, ТаблицаДопИнформации)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НазначенныеНачисленияСрезПоследних.Объект КАК ЛицевойСчет,
	|	КВП_НазначенныеНачисленияСрезПоследних.Услуга,
	|	КВП_НазначенныеНачисленияСрезПоследних.Услуга.ВидУслуги.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ втНазначенныеУслуги
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления.СрезПоследних(
	|			&ДатаКонца,
	|			Организация = &Организация
	|				И Объект В (&СписокЛС)) КАК КВП_НазначенныеНачисленияСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки = ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой)
	|			ТОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Размер
	|		ИНАЧЕ КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления
	|	КОНЕЦ КАК НормаПотребления,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет,
	|	ВЫБОР
	|		КОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки = ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК РасчетНормыСложный
	|ПОМЕСТИТЬ втНормыПотребления
	|ИЗ
	|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(&ДатаКонца, ЛицевойСчет В (&СписокЛС)) КАК КВП_НормыПотребленияУслугЛССрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНазначенныеУслуги.ЛицевойСчет,
	|	втНазначенныеУслуги.Услуга,
	|	втНазначенныеУслуги.ЕдиницаИзмерения,
	|	МАКСИМУМ(ЕСТЬNULL(втНормыПотребления.НормаПотребления, 0)) КАК НормаПотребления,
	|	МАКСИМУМ(ЕСТЬNULL(втНормыПотребления.РасчетНормыСложный, ЛОЖЬ)) КАК РасчетНормыСложный
	|ПОМЕСТИТЬ втНазначенныеУслугиСНормамиИТарифами
	|ИЗ
	|	втНазначенныеУслуги КАК втНазначенныеУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНормыПотребления КАК втНормыПотребления
	|		ПО втНазначенныеУслуги.ЛицевойСчет = втНормыПотребления.ЛицевойСчет
	|			И втНазначенныеУслуги.Услуга = втНормыПотребления.Услуга
	|
	|СГРУППИРОВАТЬ ПО
	|	втНазначенныеУслуги.ЛицевойСчет,
	|	втНазначенныеУслуги.Услуга,
	|	втНазначенныеУслуги.ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга,
	|	СУММА(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток) КАК СуммаНачисленияОстаток
	|ПОМЕСТИТЬ втВзаиморасчетыПоЛС
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&ДатаКонца,
	|			Организация = &Организация
	|				И ЛицевойСчет В (&СписокЛС)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНазначенныеУслугиСНормамиИТарифами.ЛицевойСчет,
	|	втНазначенныеУслугиСНормамиИТарифами.Услуга,
	|	втНазначенныеУслугиСНормамиИТарифами.ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втВзаиморасчетыПоЛС.СуммаНачисленияОстаток, 0) > 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НаличиеЗадолженности,
	|	втНазначенныеУслугиСНормамиИТарифами.НормаПотребления,
	|	втНазначенныеУслугиСНормамиИТарифами.РасчетНормыСложный
	|ПОМЕСТИТЬ втДанныеСЗадолженностью
	|ИЗ
	|	втНазначенныеУслугиСНормамиИТарифами КАК втНазначенныеУслугиСНормамиИТарифами
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВзаиморасчетыПоЛС КАК втВзаиморасчетыПоЛС
	|		ПО втНазначенныеУслугиСНормамиИТарифами.ЛицевойСчет = втВзаиморасчетыПоЛС.ЛицевойСчет
	|			И втНазначенныеУслугиСНормамиИТарифами.Услуга = втВзаиморасчетыПоЛС.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУслуг.Номер,
	|	ТаблицаУслуг.ЗначениеВБазе
	|ПОМЕСТИТЬ втУслуги
	|ИЗ
	|	&ТаблицаУслуг КАК ТаблицаУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЕдИзмерения.Номер,
	|	ТаблицаЕдИзмерения.ЗначениеВБазе
	|ПОМЕСТИТЬ втЕдИзмерения
	|ИЗ
	|	&ТаблицаЕдИзмерения КАК ТаблицаЕдИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ))
	|					И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|				ТОГДА УПЖКХ_НачисленияОбороты.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК КоличествоПотребления,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.Количество = 0
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК ПризнакРасчета,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ПризнакПерерасчета,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|				ТОГДА УПЖКХ_НачисленияОбороты.Тариф
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Тариф,
	|	УПЖКХ_НачисленияОбороты.МесяцНачисления,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаПерерасчета
	|ПОМЕСТИТЬ втДанныеоНачислениях
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНачала,
	|			&ДатаКонца,
	|			,
	|			Организация = &Организация
	|				И ЛицевойСчет В (&СписокЛС)
	|				И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|				И НЕ РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени))) КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.МесяцНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеСЗадолженностью.ЛицевойСчет,
	|	втДанныеСЗадолженностью.Услуга,
	|	втДанныеСЗадолженностью.ЕдиницаИзмерения,
	|	втДанныеСЗадолженностью.НаличиеЗадолженности КАК НаличиеЗадолженности,
	|	МАКСИМУМ(ЕСТЬNULL(втДанныеоНачислениях.КоличествоПотребления, 0)) КАК КоличествоПотребления,
	|	МАКСИМУМ(ЕСТЬNULL(втДанныеоНачислениях.ПризнакРасчета, ЛОЖЬ)) КАК ПризнакРасчета,
	|	МАКСИМУМ(ЕСТЬNULL(втДанныеоНачислениях.ПризнакПерерасчета, ЛОЖЬ)) КАК ПризнакПерерасчета,
	|	МАКСИМУМ(ЕСТЬNULL(втДанныеоНачислениях.Тариф, 0)) КАК Тариф,
	|	МАКСИМУМ(втДанныеоНачислениях.МесяцНачисления) КАК МесяцНачисления,
	|	МАКСИМУМ(ЕСТЬNULL(втДанныеоНачислениях.СуммаПерерасчета, 0)) КАК СуммаПерерасчета,
	|	втДанныеСЗадолженностью.НормаПотребления КАК НормаПотребления,
	|	втДанныеСЗадолженностью.РасчетНормыСложный КАК РасчетНормыСложный
	|ПОМЕСТИТЬ втДанныеСОборотами
	|ИЗ
	|	втДанныеСЗадолженностью КАК втДанныеСЗадолженностью
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеоНачислениях КАК втДанныеоНачислениях
	|		ПО втДанныеСЗадолженностью.ЛицевойСчет = втДанныеоНачислениях.ЛицевойСчет
	|			И втДанныеСЗадолженностью.Услуга = втДанныеоНачислениях.Услуга
	|
	|СГРУППИРОВАТЬ ПО
	|	втДанныеСЗадолженностью.ЛицевойСчет,
	|	втДанныеСЗадолженностью.Услуга,
	|	втДанныеСЗадолженностью.ЕдиницаИзмерения,
	|	втДанныеСЗадолженностью.НаличиеЗадолженности,
	|	втДанныеСЗадолженностью.НормаПотребления,
	|	втДанныеСЗадолженностью.РасчетНормыСложный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеСОборотами.ЛицевойСчет КАК ЛицевойСчет,
	|	втДанныеСОборотами.ЛицевойСчет.Идентификатор КАК N_lsch,
	|	ЕСТЬNULL(втУслуги.Номер, """") КАК K_usl,
	|	МАКСИМУМ(втДанныеСОборотами.Тариф) КАК Tarif,
	|	СУММА(0) КАК Tarif2,
	|	ЕСТЬNULL(втЕдИзмерения.Номер, """") КАК Id_unit,
	|	СУММА(0) КАК Norm,
	|	МАКСИМУМ(втДанныеСОборотами.ПризнакРасчета) КАК Cnt,
	|	СУММА(втДанныеСОборотами.КоличествоПотребления) КАК Diff,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втДанныеСОборотами.ПризнакПерерасчета
	|				ТОГДА НАЧАЛОПЕРИОДА(втДанныеСОборотами.МесяцНачисления, МЕСЯЦ)
	|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|		КОНЕЦ) КАК D_begr,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втДанныеСОборотами.ПризнакПерерасчета
	|				ТОГДА КОНЕЦПЕРИОДА(втДанныеСОборотами.МесяцНачисления, МЕСЯЦ)
	|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|		КОНЕЦ) КАК D_endr,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втДанныеСОборотами.НаличиеЗадолженности
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Pr_zd,
	|	втДанныеСОборотами.СуммаПерерасчета КАК Summ_red,
	|	СУММА(0) КАК Norm_ex,
	|	МАКСИМУМ(втДанныеСОборотами.НормаПотребления) КАК НормаПотребления,
	|	МАКСИМУМ(втДанныеСОборотами.РасчетНормыСложный) КАК РасчетНормыСложный,
	|	втДанныеСОборотами.Услуга
	|ИЗ
	|	втДанныеСОборотами КАК втДанныеСОборотами
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУслуги КАК втУслуги
	|		ПО втДанныеСОборотами.Услуга = втУслуги.ЗначениеВБазе
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЕдИзмерения КАК втЕдИзмерения
	|		ПО втДанныеСОборотами.ЕдиницаИзмерения = втЕдИзмерения.ЗначениеВБазе
	|
	|СГРУППИРОВАТЬ ПО
	|	втДанныеСОборотами.ЛицевойСчет,
	|	втДанныеСОборотами.ЛицевойСчет.Идентификатор,
	|	ЕСТЬNULL(втУслуги.Номер, """"),
	|	ЕСТЬNULL(втЕдИзмерения.Номер, """"),
	|	втДанныеСОборотами.СуммаПерерасчета,
	|	втДанныеСОборотами.Услуга
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЛицевойСчет";
	
	ВрСкопированнаяТаблица.Свернуть("ЛицевойСчет");
	
	Запрос.УстановитьПараметр("ДатаНачала",         НачалоДня(НачалоМесяца(Период)));
	Запрос.УстановитьПараметр("ДатаКонца",          КонецДня(КонецМесяца(Период)));
	Запрос.УстановитьПараметр("Организация",        Организация);
	Запрос.УстановитьПараметр("СписокЛС",           ВрСкопированнаяТаблица.ВыгрузитьКолонку("ЛицевойСчет"));
	Запрос.УстановитьПараметр("ТаблицаУслуг",       НижегородскаяОбл_НастройкиУслуги.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаЕдИзмерения", НижегородскаяОбл_НастройкиЕдИзмерения.Выгрузить());
	
	ТаблицаДопИнформации = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаДопИнформации Цикл
		
		Если (ТипЗнч(СтрокаТаблицы.Tarif) = Тип("Число") И СтрокаТаблицы.Tarif = 0)
		 ИЛИ (ТипЗнч(СтрокаТаблицы.Tarif) = Тип("СправочникСсылка.КВП_РассчитываемыеТарифы") И СтрокаТаблицы.Tarif = Справочники.КВП_РассчитываемыеТарифы.ПустаяСсылка()) Тогда
			ТарифПоУслуге = ПолучитьТарифПоЛицевомуСчету(КонецМесяца(Период), Организация, СтрокаТаблицы.Услуга, СтрокаТаблицы.ЛицевойСчет);
			СтрокаТаблицы.Tarif = ТарифПоУслуге;
		КонецЕсли;
		
		// Заполнение нормативов потребления.
		
		Если СтрокаТаблицы.РасчетНормыСложный Тогда
			РазмерНормы = ПолучитьРазмерНормыПотребления(СтрокаТаблицы.ЛицевойСчет, КонецМесяца(Период), СтрокаТаблицы.НормаПотребления, Организация);
			СтрокаТаблицы.Norm = РазмерНормы;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПолучитьДанныеДляДопПараметров()

// Заполняет перерасчеты в таблице начисления если таковы присутствуют в таблице дополнительной информации.
//
Процедура ЗаполнитьПерерасчетыВТаблицуНачисленийНижегородск(ТаблицаРеестра, врСкопированнаяТаблицаДопИнформации)
	
	врСкопированнаяТаблицаДопИнформации.Свернуть("ЛицевойСчет, D_begr, D_endr");
	врСкопированнаяТаблицаДопИнформации.Сортировать("D_endr УБЫВ");
	врСкопированнаяТаблицаДопИнформацииСЛС = врСкопированнаяТаблицаДопИнформации.Скопировать();
	врСкопированнаяТаблицаДопИнформацииСЛС.Свернуть("ЛицевойСчет");
	
	Для Каждого СтрокаСкопированнойТаблицы ИЗ врСкопированнаяТаблицаДопИнформацииСЛС Цикл
		НайденныеСтрокиПерерасчетов = врСкопированнаяТаблицаДопИнформации.НайтиСтроки(Новый Структура("ЛицевойСчет", СтрокаСкопированнойТаблицы.ЛицевойСчет));
		
		НайденныеСтрокиВРеестре = ТаблицаРеестра.НайтиСтроки(Новый Структура("ЛицевойСчет", СтрокаСкопированнойТаблицы.ЛицевойСчет));
		Если НЕ НайденныеСтрокиВРеестре.Количество() = 0 И НЕ ЗначениеЗаполнено(НайденныеСтрокиВРеестре[0].Id_recalc) И НЕ НайденныеСтрокиПерерасчетов[0].D_begr = ДАТА(1,1,1) Тогда
			НайденныеСтрокиВРеестре[0].Id_recalc = "03";
			НайденныеСтрокиВРеестре[0].D_begr    = НайденныеСтрокиПерерасчетов[0].D_begr;
			НайденныеСтрокиВРеестре[0].D_endr    = НайденныеСтрокиПерерасчетов[0].D_endr;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Получает таблицу значений с адресами зданий.
//
Функция ПолучитьАдресаВсехЗданийНижегородск(мТаблицаГородов, мТаблицаУлиц)
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втКонтактнаяИнформация.Объект КАК Здание,
	|	ВЫБОР
	|		КОГДА НЕ втКонтактнаяИнформация.НаселенныйПункт = """"
	|			ТОГДА втКонтактнаяИнформация.НаселенныйПункт
	|		КОГДА НЕ втКонтактнаяИнформация.Город = """"
	|			ТОГДА втКонтактнаяИнформация.Город
	|		ИНАЧЕ втКонтактнаяИнформация.Регион
	|	КОНЕЦ КАК НаселенныйПункт,
	|	втКонтактнаяИнформация.Улица,
	|	втКонтактнаяИнформация.Дом,
	|	втКонтактнаяИнформация.Корпус,
	|	0 КАК ПлощадьЖилыхПомещений
	|ИЗ
	|	втКонтактнаяИнформация КАК втКонтактнаяИнформация";
	
	АдресаИзБазы = Запрос.Выполнить().Выгрузить();
	
	МассивСокрНасПункт = СформироватьМассивСокращениеДляНижегородскойОблПоВиду(4);
	МассивСокрУлицы    = СформироватьМассивСокращениеДляНижегородскойОблПоВиду(5);
	
	Для Каждого СтрокаЗдания ИЗ АдресаИзБазы Цикл
		СтрокаЗдания.НаселенныйПункт       = ВРег(НормализацияПолейАдресаОбласти(СтрокаЗдания.НаселенныйПункт, МассивСокрНасПункт));
		СтрокаЗдания.Улица                 = ВРег(НормализацияПолейАдресаОбласти(СтрокаЗдания.Улица, МассивСокрУлицы));
		СтрокаЗдания.ПлощадьЖилыхПомещений = Справочники.КВП_Здания.РассчитатьПлощадиЗдания(СтрокаЗдания.Здание).ПлощадьЖилыхПомещений;
	КонецЦикла;
	
	Для Каждого СтрокаГорода ИЗ мТаблицаГородов Цикл
		СтрокаГорода.I_gor = НормализацияПолейАдресаОбласти(СтрокаГорода.I_gor, МассивСокрНасПункт);
	КонецЦикла;
	
	Для Каждого СтрокаУлицы ИЗ мТаблицаУлиц Цикл
		СтрокаУлицы.I_Ulica = НормализацияПолейАдресаОбласти(СтрокаУлицы.I_Ulica, МассивСокрУлицы);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("АдресаИзБазы", АдресаИзБазы);
	Запрос.УстановитьПараметр("Города",       мТаблицаГородов);
	Запрос.УстановитьПараметр("Улицы",        мТаблицаУлиц);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АдресаИзБазы.Здание,
	|	АдресаИзБазы.НаселенныйПункт,
	|	АдресаИзБазы.Улица,
	|	АдресаИзБазы.Дом,
	|	АдресаИзБазы.Корпус,
	|	АдресаИзБазы.ПлощадьЖилыхПомещений
	|ПОМЕСТИТЬ втЗдания
	|ИЗ
	|	&АдресаИзБазы КАК АдресаИзБазы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Города.Gor КАК Код,
	|	Города.I_gor КАК Наименование
	|ПОМЕСТИТЬ втГорода
	|ИЗ
	|	&Города КАК Города
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Улицы.Ulica КАК Код,
	|	Улицы.I_ulica КАК Наименование
	|ПОМЕСТИТЬ втУлицы
	|ИЗ
	|	&Улицы КАК Улицы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗдания.Здание,
	|	ЕСТЬNULL(втГорода.Код, """") КАК КодГорода,
	|	ЕСТЬNULL(втУлицы.Код, """") КАК КодУлицы,
	|	втЗдания.Дом,
	|	втЗдания.Корпус,
	|	втЗдания.ПлощадьЖилыхПомещений
	|ИЗ
	|	втЗдания КАК втЗдания
	|		ЛЕВОЕ СОЕДИНЕНИЕ втГорода КАК втГорода
	|		ПО втЗдания.НаселенныйПункт = втГорода.Наименование
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУлицы КАК втУлицы
	|		ПО втЗдания.Улица = втУлицы.Наименование";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции // ПолучитьАдресаВсехЗданийНижегородск()

// Формирует массив сокращений для Свердловской области для выбранного вида сокращения.
//
Функция СформироватьМассивСокращениеДляНижегородскойОблПоВиду(ВидСокращение)
		
	МассивСокращений = Новый Массив;
	// Для регионов.
	Если ВидСокращение = 1 Тогда
		МассивСокращений.Добавить("обл");
		// Для районов.
	ИначеЕсли ВидСокращение = 2 Тогда
		МассивСокращений.Добавить("р-н");
		// Для городов.
	ИначеЕсли ВидСокращение = 3 Тогда
		МассивСокращений.Добавить("г");
		// Для нас.пунктов.
	ИначеЕсли ВидСокращение = 4 Тогда
		МассивСокращений.Добавить("рп");
		МассивСокращений.Добавить("п");
		МассивСокращений.Добавить("с");
		МассивСокращений.Добавить("д");
		МассивСокращений.Добавить("х");
		МассивСокращений.Добавить("ст");
		МассивСокращений.Добавить("пгт");
		МассивСокращений.Добавить("дп");
		МассивСокращений.Добавить("рзд");
		МассивСокращений.Добавить("мкр");
		МассивСокращений.Добавить("нп");
		МассивСокращений.Добавить("тер");
		МассивСокращений.Добавить("п/ст");
		МассивСокращений.Добавить("промзона");
		МассивСокращений.Добавить("снт");
		МассивСокращений.Добавить("п/о");
		МассивСокращений.Добавить("городок");
		МассивСокращений.Добавить("заимка");
		МассивСокращений.Добавить("кп");
		МассивСокращений.Добавить("ж/д_казарм");
		МассивСокращений.Добавить("г");
		МассивСокращений.Добавить("обл");
		// Для улиц.
	ИначеЕсли ВидСокращение = 5 Тогда
		МассивСокращений.Добавить("ул");
		МассивСокращений.Добавить("тер");
		МассивСокращений.Добавить("пл");
		МассивСокращений.Добавить("пер");
		МассивСокращений.Добавить("снт");
		МассивСокращений.Добавить("проезд");
		МассивСокращений.Добавить("б-р");
		МассивСокращений.Добавить("туп");
		МассивСокращений.Добавить("п");
		МассивСокращений.Добавить("ш");
		МассивСокращений.Добавить("пр-кт");
		МассивСокращений.Добавить("тракт");
		МассивСокращений.Добавить("сквер");
		МассивСокращений.Добавить("ст");
		МассивСокращений.Добавить("наб");
		МассивСокращений.Добавить("км");
		МассивСокращений.Добавить("ж/д_ст");
		МассивСокращений.Добавить("сад");
		МассивСокращений.Добавить("парк");
		МассивСокращений.Добавить("уч-к");
		МассивСокращений.Добавить("мкр");
		МассивСокращений.Добавить("городок");
		МассивСокращений.Добавить("кв-л");
		МассивСокращений.Добавить("нп");
		МассивСокращений.Добавить("остров");
		МассивСокращений.Добавить("гск");
		МассивСокращений.Добавить("линия");
		МассивСокращений.Добавить("рзд");
		МассивСокращений.Добавить("стр");
		МассивСокращений.Добавить("аллея");
		МассивСокращений.Добавить("казарма");
		МассивСокращений.Добавить("ж/д_рзд");
		МассивСокращений.Добавить("д");
		МассивСокращений.Добавить("ж/д_казарм");
		МассивСокращений.Добавить("ж/д_будка");
		МассивСокращений.Добавить("высел");
	КонецЕсли;
	
	Возврат МассивСокращений;
	
КонецФункции // СформироватьМассивСокращениеДляНижегородскойОблПоВиду()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ВЫГРУЗКИ ДЛЯ ВОЛГОГРАДСКОЙ ОБЛАСТИ

#Область ВолгоградскаяОбласть

// Формирует таблицу всех выгружаемых данных.
//
Процедура СформироватьТаблицуДанныхВолгоградскаяОбласть(ТаблицаДанныхФайлаОНачислениях, ТаблицаДанныхФайлаОЗадолженностях) Экспорт
	
	ТаблицаАдресов = ПолучитьАдресаВсехЗданийВолгоградскаяОбласть();
	ТаблицаФИО     = ПолучитьФИОФизЛиц();
	ПолучитьТаблицуНачисленийВолгоград(ТаблицаДанныхФайлаОНачислениях, ТаблицаАдресов, ТаблицаФИО);
	
	ТаблицаДанныхФайлаОЗадолженностях = ПолучитьТаблицуЗадолженностейВолгоград(ТаблицаДанныхФайлаОНачислениях);
	
КонецПроцедуры

// Получает таблицу значений с адресами зданий.
//
Функция ПолучитьАдресаВсехЗданийВолгоградскаяОбласть()
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	втКонтактнаяИнформация.Объект КАК Здание,
	|	ВЫБОР
	|		КОГДА НЕ втКонтактнаяИнформация.НаселенныйПункт = """"
	|			ТОГДА втКонтактнаяИнформация.НаселенныйПункт
	|		КОГДА НЕ втКонтактнаяИнформация.Город = """"
	|			ТОГДА втКонтактнаяИнформация.Город
	|		ИНАЧЕ втКонтактнаяИнформация.Регион
	|	КОНЕЦ КАК НаселенныйПункт,
	|	втКонтактнаяИнформация.Район,
	|	втКонтактнаяИнформация.Улица,
	|	втКонтактнаяИнформация.Дом,
	|	втКонтактнаяИнформация.Корпус
	|ИЗ
	|	втКонтактнаяИнформация КАК втКонтактнаяИнформация";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	МассивСокрРайонов  = СформироватьМассивСокращениеДляВолгоградскойОблПоВиду(2);
	МассивСокрНасПункт = СформироватьМассивСокращениеДляВолгоградскойОблПоВиду(4);
	МассивСокрУлицы    = СформироватьМассивСокращениеДляВолгоградскойОблПоВиду(5);
	
	Для Каждого СтрокаЗдания ИЗ Результат Цикл
		СтрокаЗдания.Район           = ВРег(НормализацияПолейАдресаОбласти(СтрокаЗдания.Район, МассивСокрРайонов));
		СтрокаЗдания.НаселенныйПункт = ВРег(НормализацияПолейАдресаОбласти(СтрокаЗдания.НаселенныйПункт, МассивСокрНасПункт));
		СтрокаЗдания.Улица           = ВРег(НормализацияПолейАдресаОбласти(СтрокаЗдания.Улица, МассивСокрУлицы));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьАдресаВсехЗданийВолгоградскаяОбласть()

// Формирует массив сокращений для Томской области для выбранного вида сокращения.
//
Функция СформироватьМассивСокращениеДляВолгоградскойОблПоВиду(ВидСокращение)
	
	МассивСокращений = Новый Массив;
	// Для регионов.
	Если ВидСокращение = 1 Тогда
		МассивСокращений.Добавить("обл");
		// Для районов.
	ИначеЕсли ВидСокращение = 2 Тогда
		МассивСокращений.Добавить("р-н");
		МассивСокращений.Добавить("р-н.");
		// Для городов.
	ИначеЕсли ВидСокращение = 3 Тогда
		МассивСокращений.Добавить("г");
		МассивСокращений.Добавить("г.");
		// Для нас.пунктов.
	ИначеЕсли ВидСокращение = 4 Тогда
		МассивСокращений.Добавить("рп");
		МассивСокращений.Добавить("п");
		МассивСокращений.Добавить("с");
		МассивСокращений.Добавить("д");
		МассивСокращений.Добавить("х");
		МассивСокращений.Добавить("ст");
		МассивСокращений.Добавить("пгт");
		МассивСокращений.Добавить("дп");
		МассивСокращений.Добавить("рзд");
		МассивСокращений.Добавить("мкр");
		МассивСокращений.Добавить("нп");
		МассивСокращений.Добавить("тер");
		МассивСокращений.Добавить("п/ст");
		МассивСокращений.Добавить("промзона");
		МассивСокращений.Добавить("снт");
		МассивСокращений.Добавить("п/о");
		МассивСокращений.Добавить("городок");
		МассивСокращений.Добавить("заимка");
		МассивСокращений.Добавить("кп");
		МассивСокращений.Добавить("ж/д_казарм");
		МассивСокращений.Добавить("г");
		МассивСокращений.Добавить("обл");
		МассивСокращений.Добавить("рп.");
		МассивСокращений.Добавить("п.");
		МассивСокращений.Добавить("с.");
		МассивСокращений.Добавить("д.");
		МассивСокращений.Добавить("х.");
		МассивСокращений.Добавить("ст.");
		МассивСокращений.Добавить("пгт.");
		МассивСокращений.Добавить("дп.");
		МассивСокращений.Добавить("рзд.");
		МассивСокращений.Добавить("мкр.");
		МассивСокращений.Добавить("нп.");
		МассивСокращений.Добавить("тер.");
		МассивСокращений.Добавить("п/ст.");
		МассивСокращений.Добавить("промзона.");
		МассивСокращений.Добавить("снт.");
		МассивСокращений.Добавить("п/о.");
		МассивСокращений.Добавить("городок.");
		МассивСокращений.Добавить("заимка.");
		МассивСокращений.Добавить("кп.");
		МассивСокращений.Добавить("ж/д_казарм.");
		МассивСокращений.Добавить("г.");
		МассивСокращений.Добавить("обл.");
		// Для улиц.
	ИначеЕсли ВидСокращение = 5 Тогда
		МассивСокращений.Добавить("ул");
		МассивСокращений.Добавить("тер");
		МассивСокращений.Добавить("пл");
		МассивСокращений.Добавить("пер");
		МассивСокращений.Добавить("снт");
		МассивСокращений.Добавить("проезд");
		МассивСокращений.Добавить("б-р");
		МассивСокращений.Добавить("туп");
		МассивСокращений.Добавить("п");
		МассивСокращений.Добавить("ш");
		МассивСокращений.Добавить("пр-кт");
		МассивСокращений.Добавить("тракт");
		МассивСокращений.Добавить("сквер");
		МассивСокращений.Добавить("ст");
		МассивСокращений.Добавить("наб");
		МассивСокращений.Добавить("км");
		МассивСокращений.Добавить("ж/д_ст");
		МассивСокращений.Добавить("сад");
		МассивСокращений.Добавить("парк");
		МассивСокращений.Добавить("уч-к");
		МассивСокращений.Добавить("мкр");
		МассивСокращений.Добавить("городок");
		МассивСокращений.Добавить("кв-л");
		МассивСокращений.Добавить("нп");
		МассивСокращений.Добавить("остров");
		МассивСокращений.Добавить("гск");
		МассивСокращений.Добавить("линия");
		МассивСокращений.Добавить("рзд");
		МассивСокращений.Добавить("стр");
		МассивСокращений.Добавить("аллея");
		МассивСокращений.Добавить("казарма");
		МассивСокращений.Добавить("ж/д_рзд");
		МассивСокращений.Добавить("д");
		МассивСокращений.Добавить("ж/д_казарм");
		МассивСокращений.Добавить("ж/д_будка");
		МассивСокращений.Добавить("высел");
		МассивСокращений.Добавить("ул.");
		МассивСокращений.Добавить("тер.");
		МассивСокращений.Добавить("пл.");
		МассивСокращений.Добавить("пер.");
		МассивСокращений.Добавить("снт.");
		МассивСокращений.Добавить("проезд.");
		МассивСокращений.Добавить("б-р.");
		МассивСокращений.Добавить("туп.");
		МассивСокращений.Добавить("п.");
		МассивСокращений.Добавить("ш.");
		МассивСокращений.Добавить("пр-кт.");
		МассивСокращений.Добавить("тракт.");
		МассивСокращений.Добавить("сквер.");
		МассивСокращений.Добавить("ст.");
		МассивСокращений.Добавить("наб.");
		МассивСокращений.Добавить("км.");
		МассивСокращений.Добавить("ж/д_ст.");
		МассивСокращений.Добавить("сад.");
		МассивСокращений.Добавить("парк.");
		МассивСокращений.Добавить("уч-к.");
		МассивСокращений.Добавить("мкр.");
		МассивСокращений.Добавить("городок.");
		МассивСокращений.Добавить("кв-л.");
		МассивСокращений.Добавить("нп.");
		МассивСокращений.Добавить("остров.");
		МассивСокращений.Добавить("гск.");
		МассивСокращений.Добавить("линия.");
		МассивСокращений.Добавить("рзд.");
		МассивСокращений.Добавить("стр.");
		МассивСокращений.Добавить("аллея.");
		МассивСокращений.Добавить("казарма.");
		МассивСокращений.Добавить("ж/д_рзд.");
		МассивСокращений.Добавить("д.");
		МассивСокращений.Добавить("ж/д_казарм.");
		МассивСокращений.Добавить("ж/д_будка.");
		МассивСокращений.Добавить("высел.");
	КонецЕсли;
	
	Возврат МассивСокращений;
	
КонецФункции // СформироватьМассивСокращениеДляСвердловскойОблПоВиду()

// Получает таблицу жильцов идентифицированных с записями из файла-запроса.
//
Функция ПолучитьТаблицуИдентифицированныхЖильцовВолгоград(ТаблицаДанныхФайла, ТаблицаАдресов, ТаблицаФИО)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИзФайла.SURNAME КАК Фамилия,
	|	ТаблицаИзФайла.NAME КАК Имя,
	|	ТаблицаИзФайла.SECNAME КАК Отчество,
	|	ТаблицаИзФайла.TOWN КАК Город,
	|	ТаблицаИзФайла.STREET КАК Улица,
	|	ТаблицаИзФайла.HOUSE КАК Дом,
	|	ТаблицаИзФайла.KORPUS КАК Корпус,
	|	ТаблицаИзФайла.FLAT КАК Квартира
	|ПОМЕСТИТЬ втТаблицаДанныхИзФайла
	|ИЗ
	|	&ТаблицаИзФайла КАК ТаблицаИзФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаФИО.ФизическоеЛицо,
	|	ТаблицаФИО.Фамилия,
	|	ТаблицаФИО.Имя,
	|	ТаблицаФИО.Отчество
	|ПОМЕСТИТЬ втФИОФизЛиц
	|ИЗ
	|	&ТаблицаФИО КАК ТаблицаФИО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Жильцы.Ссылка КАК Проживающий,
	|	УПЖКХ_Жильцы.ФизЛицо,
	|	УПЖКХ_Жильцы.Владелец.Адрес.Владелец КАК Здание,
	|	УПЖКХ_Жильцы.Владелец.Адрес.Код КАК Квартира,
	|	УПЖКХ_Жильцы.Владелец КАК ЛицевойСчет,
	|	УПЖКХ_Жильцы.Владелец.Адрес КАК Помещение
	|ПОМЕСТИТЬ втЖильцы
	|ИЗ
	|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
	|ГДЕ
	|	НЕ УПЖКХ_Жильцы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцы.Проживающий,
	|	ЕСТЬNULL(втФИОФизЛиц.Фамилия, """") КАК Фамилия,
	|	ЕСТЬNULL(втФИОФизЛиц.Имя, """") КАК Имя,
	|	ЕСТЬNULL(втФИОФизЛиц.Отчество, """") КАК Отчество,
	|	втЖильцы.Здание,
	|	втЖильцы.Квартира,
	|	втЖильцы.ЛицевойСчет,
	|	втЖильцы.Помещение
	|ПОМЕСТИТЬ втЖильцыСФИО
	|ИЗ
	|	втЖильцы КАК втЖильцы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втФИОФизЛиц КАК втФИОФизЛиц
	|		ПО втЖильцы.ФизЛицо = втФИОФизЛиц.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаАдресов.Здание,
	|	ТаблицаАдресов.НаселенныйПункт,
	|	ТаблицаАдресов.Улица,
	|	ТаблицаАдресов.Дом,
	|	ТаблицаАдресов.Корпус
	|ПОМЕСТИТЬ втАдреса
	|ИЗ
	|	&ТаблицаАдресов КАК ТаблицаАдресов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцыСФИО.Проживающий,
	|	втЖильцыСФИО.Фамилия,
	|	втЖильцыСФИО.Имя,
	|	втЖильцыСФИО.Отчество,
	|	ЕСТЬNULL(втАдреса.НаселенныйПункт, """") КАК НаселенныйПункт,
	|	ЕСТЬNULL(втАдреса.Улица, """") КАК Улица,
	|	ЕСТЬNULL(втАдреса.Дом, """") КАК Дом,
	|	ЕСТЬNULL(втАдреса.Корпус, """") КАК Корпус,
	|	втЖильцыСФИО.Квартира,
	|	втЖильцыСФИО.ЛицевойСчет,
	|	втЖильцыСФИО.Помещение
	|ПОМЕСТИТЬ втЖильцыСАдресами
	|ИЗ
	|	втЖильцыСФИО КАК втЖильцыСФИО
	|		ЛЕВОЕ СОЕДИНЕНИЕ втАдреса КАК втАдреса
	|		ПО втЖильцыСФИО.Здание = втАдреса.Здание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцыСАдресами.Проживающий,
	|	втЖильцыСАдресами.Фамилия,
	|	втЖильцыСАдресами.Имя,
	|	втЖильцыСАдресами.Отчество,
	|	втЖильцыСАдресами.НаселенныйПункт КАК Город,
	|	втЖильцыСАдресами.Улица,
	|	втЖильцыСАдресами.Дом,
	|	втЖильцыСАдресами.Корпус,
	|	втЖильцыСАдресами.Квартира,
	|	втЖильцыСАдресами.ЛицевойСчет,
	|	втЖильцыСАдресами.Помещение
	|ИЗ
	|	втТаблицаДанныхИзФайла КАК втТаблицаДанныхИзФайла
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЖильцыСАдресами КАК втЖильцыСАдресами
	|		ПО втТаблицаДанныхИзФайла.Фамилия = втЖильцыСАдресами.Фамилия
	|			И втТаблицаДанныхИзФайла.Имя = втЖильцыСАдресами.Имя
	|			И втТаблицаДанныхИзФайла.Отчество = втЖильцыСАдресами.Отчество
	|			И втТаблицаДанныхИзФайла.Город = втЖильцыСАдресами.НаселенныйПункт
	|			И втТаблицаДанныхИзФайла.Улица = втЖильцыСАдресами.Улица
	|			И втТаблицаДанныхИзФайла.Дом = втЖильцыСАдресами.Дом
	|			И втТаблицаДанныхИзФайла.Корпус = втЖильцыСАдресами.Корпус
	|			И втТаблицаДанныхИзФайла.Квартира = втЖильцыСАдресами.Квартира
	|
	|СГРУППИРОВАТЬ ПО
	|	втЖильцыСАдресами.ЛицевойСчет,
	|	втЖильцыСАдресами.Помещение,
	|	втЖильцыСАдресами.Проживающий,
	|	втЖильцыСАдресами.Фамилия,
	|	втЖильцыСАдресами.Имя,
	|	втЖильцыСАдресами.Отчество,
	|	втЖильцыСАдресами.НаселенныйПункт,
	|	втЖильцыСАдресами.Улица,
	|	втЖильцыСАдресами.Дом,
	|	втЖильцыСАдресами.Корпус,
	|	втЖильцыСАдресами.Квартира";
	
	Запрос.УстановитьПараметр("ТаблицаИзФайла", ТаблицаДанныхФайла);
	Запрос.УстановитьПараметр("ДатаКонца",      КонецМесяца(Период));
	Запрос.УстановитьПараметр("ТаблицаАдресов", ТаблицаАдресов);
	Запрос.УстановитьПараметр("ТаблицаФИО",     ТаблицаФИО);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции // ПолучитьТаблицуИдентифицированныхЖильцов()

// Получает таблицу данных с начислениями и необходимыми данными.
//
Процедура ПолучитьТаблицуНачисленийВолгоград(ТаблицаДанныхФайлаОНачислениях, ТаблицаАдресов, ТаблицаФИО)
	
	ТаблицаИдентифицированныхЖильцов = ПолучитьТаблицуИдентифицированныхЖильцовВолгоград(ТаблицаДанныхФайлаОНачислениях, ТаблицаАдресов, ТаблицаФИО);
	
	Запрос = Новый Запрос;
	
	МенеджерВТ                     = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	// Параметры.
	
	Запрос.УстановитьПараметр("ДатаНачала",                     НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ДатаКонца",                      КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",                    Организация);
	Запрос.УстановитьПараметр("ТаблицаИдентифЖильцов",          ТаблицаИдентифицированныхЖильцов);
	Запрос.УстановитьПараметр("ТаблицаДанныхФайлаОНачислениях", ТаблицаДанныхФайлаОНачислениях);
	Запрос.УстановитьПараметр("ЖКУ_ВБазе",                      ВолгоградскаяОбласть_ТаблицаУслугДляВыгрузки.Выгрузить());
	
	Запрос.УстановитьПараметр("УказыватьКоличествоПрожИЗарегЧислами", Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Получить());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИзФайла.SURNAME,
	|	ТаблицаИзФайла.NAME,
	|	ТаблицаИзФайла.SECNAME,
	|	ТаблицаИзФайла.BIRTHDAY,
	|	ТаблицаИзФайла.POST,
	|	ТаблицаИзФайла.TOWN,
	|	ТаблицаИзФайла.STREET,
	|	ТаблицаИзФайла.HOUSE,
	|	ТаблицаИзФайла.KORPUS,
	|	ТаблицаИзФайла.FRACTION,
	|	ТаблицаИзФайла.FLAT,
	|	ТаблицаИзФайла.LITERA,
	|	ТаблицаИзФайла.MONTH,
	|	ТаблицаИзФайла.YEAR,
	|	ТаблицаИзФайла.NUMBER,
	|	ТаблицаИзФайла.SQ_METR,
	|	ТаблицаИзФайла.HOUSING,
	|	ТаблицаИзФайла.WATER,
	|	ТаблицаИзФайла.ODN_W,
	|	ТаблицаИзФайла.NORM_W,
	|	ТаблицаИзФайла.TARIF_W,
	|	ТаблицаИзФайла.MES_W,
	|	ТаблицаИзФайла.SEWERAGE,
	|	ТаблицаИзФайла.ODN_S,
	|	ТаблицаИзФайла.NORM_S,
	|	ТаблицаИзФайла.TARIF_S,
	|	ТаблицаИзФайла.MES_S,
	|	ТаблицаИзФайла.HEAT,
	|	ТаблицаИзФайла.ODN_H,
	|	ТаблицаИзФайла.NORM_H,
	|	ТаблицаИзФайла.TARIF_H,
	|	ТаблицаИзФайла.MES_H,
	|	ТаблицаИзФайла.HOT_WAT,
	|	ТаблицаИзФайла.ODN_HW,
	|	ТаблицаИзФайла.NORM_HW,
	|	ТаблицаИзФайла.TARIF_HW,
	|	ТаблицаИзФайла.MES_HW,
	|	ТаблицаИзФайла.ENERGY,
	|	ТаблицаИзФайла.ODN_E,
	|	ТаблицаИзФайла.NORM_E,
	|	ТаблицаИзФайла.TARIF_E,
	|	ТаблицаИзФайла.MES_E,
	|	ТаблицаИзФайла.GAS,
	|	ТаблицаИзФайла.NORM_G,
	|	ТаблицаИзФайла.TARIF_G,
	|	ТаблицаИзФайла.MES_G,
	|	ТаблицаИзФайла.GARBAGE,
	|	ТаблицаИзФайла.ENERGY_H,
	|	ТаблицаИзФайла.GAS_HEAT,
	|	ТаблицаИзФайла.ULICA,
	|	ТаблицаИзФайла.KOD,
	|	ТаблицаИзФайла.KODRC,
	|	ТаблицаИзФайла.NOM_LC,
	|	ТаблицаИзФайла.DAT_BEG,
	|	ТаблицаИзФайла.DAT_END,
	|	ТаблицаИзФайла.ARREST,
	|	ТаблицаИзФайла.ACC_ORG,
	|	ТаблицаИзФайла.REPAIR
	|ПОМЕСТИТЬ втТаблицаДанныхИзФайла
	|ИЗ
	|	&ТаблицаДанныхФайлаОНачислениях КАК ТаблицаИзФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУслуг.Идентификатор,
	|	ТаблицаУслуг.УслугаВБазе
	|ПОМЕСТИТЬ втУслуги
	|ИЗ
	|	&ЖКУ_ВБазе КАК ТаблицаУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаИдентифЖильцов.Проживающий,
	|	ТаблицаИдентифЖильцов.ЛицевойСчет,
	|	ТаблицаИдентифЖильцов.Помещение,
	|	ТаблицаИдентифЖильцов.Фамилия,
	|	ТаблицаИдентифЖильцов.Имя,
	|	ТаблицаИдентифЖильцов.Отчество,
	|	ТаблицаИдентифЖильцов.Город,
	|	ТаблицаИдентифЖильцов.Улица,
	|	ТаблицаИдентифЖильцов.Дом,
	|	ТаблицаИдентифЖильцов.Корпус,
	|	ТаблицаИдентифЖильцов.Квартира
	|ПОМЕСТИТЬ втИдентифицированныеЖильцы
	|ИЗ
	|	&ТаблицаИдентифЖильцов КАК ТаблицаИдентифЖильцов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.ЛицевойСчет,
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.КоличествоЗарегистрированных КАК Количество
	|ПОМЕСТИТЬ втУчетКоличестваЖильцов
	|ИЗ
	|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втИдентифицированныеЖильцы.ЛицевойСчет
	|				ИЗ
	|					втИдентифицированныеЖильцы КАК втИдентифицированныеЖильцы)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец) КАК Количество,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет
	|ПОМЕСТИТЬ КоличествоИзСведений
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втИдентифицированныеЖильцы.ЛицевойСчет
	|					ИЗ
	|						втИдентифицированныеЖильцы КАК втИдентифицированныеЖильцы)
	|				И ДатаИзменения <= &ДатаКонца) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втИдентифицированныеЖильцы.Проживающий,
	|	втИдентифицированныеЖильцы.ЛицевойСчет,
	|	втИдентифицированныеЖильцы.Помещение,
	|	втИдентифицированныеЖильцы.Фамилия,
	|	втИдентифицированныеЖильцы.Имя,
	|	втИдентифицированныеЖильцы.Отчество,
	|	втИдентифицированныеЖильцы.Город,
	|	втИдентифицированныеЖильцы.Улица,
	|	втИдентифицированныеЖильцы.Дом,
	|	втИдентифицированныеЖильцы.Корпус,
	|	втИдентифицированныеЖильцы.Квартира,
	|	ВЫБОР
	|		КОГДА &УказыватьКоличествоПрожИЗарегЧислами
	|			ТОГДА ЕСТЬNULL(втУчетКоличестваЖильцов.Количество, 0)
	|		ИНАЧЕ ЕСТЬNULL(КоличествоИзСведений.Количество, 0)
	|	КОНЕЦ КАК КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втЖильцыИЗарегистрированные
	|ИЗ
	|	втИдентифицированныеЖильцы КАК втИдентифицированныеЖильцы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУчетКоличестваЖильцов КАК втУчетКоличестваЖильцов
	|		ПО втИдентифицированныеЖильцы.ЛицевойСчет = втУчетКоличестваЖильцов.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоИзСведений КАК КоличествоИзСведений
	|		ПО (КоличествоИзСведений.ЛицевойСчет = КоличествоИзСведений.ЛицевойСчет)";
	
	Запрос.Выполнить();
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект,
	|	КВП_ПлощадьПомещенияСрезПоследних.Площадь
	|ПОМЕСТИТЬ втПлощадиПомещений
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|			&ДатаКонца,
	|			Объект В
	|					(ВЫБРАТЬ
	|						втЖильцыИЗарегистрированные.Помещение
	|					ИЗ
	|						втЖильцыИЗарегистрированные КАК втЖильцыИЗарегистрированные)
	|				И ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)) КАК КВП_ПлощадьПомещенияСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.Объект,
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет,
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель,
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель,
	|	ВЫБОР
	|		КОГДА КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель = 0
	|			ТОГДА 0
	|		ИНАЧЕ КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель / КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель
	|	КОНЕЦ КАК Доля
	|ПОМЕСТИТЬ втРазмерыДолейЛС
	|ИЗ
	|	РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втЖильцыИЗарегистрированные.ЛицевойСчет
	|				ИЗ
	|					втЖильцыИЗарегистрированные КАК втЖильцыИЗарегистрированные)) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втРазмерыДолейЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	МАКСИМУМ(ЕСТЬNULL(втПлощадиПомещений.Площадь, 0) * втРазмерыДолейЛС.Доля) КАК ОбщаяПлощадь
	|ПОМЕСТИТЬ втДанныеОПлощадях
	|ИЗ
	|	втРазмерыДолейЛС КАК втРазмерыДолейЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПлощадиПомещений КАК втПлощадиПомещений
	|		ПО втРазмерыДолейЛС.Объект = втПлощадиПомещений.Объект
	|
	|СГРУППИРОВАТЬ ПО
	|	втРазмерыДолейЛС.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцыИЗарегистрированные.Проживающий,
	|	втЖильцыИЗарегистрированные.ЛицевойСчет,
	|	втЖильцыИЗарегистрированные.Помещение,
	|	втЖильцыИЗарегистрированные.Фамилия,
	|	втЖильцыИЗарегистрированные.Имя,
	|	втЖильцыИЗарегистрированные.Отчество,
	|	втЖильцыИЗарегистрированные.Город,
	|	втЖильцыИЗарегистрированные.Улица,
	|	втЖильцыИЗарегистрированные.Дом,
	|	втЖильцыИЗарегистрированные.Корпус,
	|	втЖильцыИЗарегистрированные.Квартира,
	|	втЖильцыИЗарегистрированные.КоличествоЗарегистрированных,
	|	ЕСТЬNULL(втДанныеОПлощадях.ОбщаяПлощадь, 0) КАК ОбщаяПлощадь
	|ПОМЕСТИТЬ втДанныеСПлощадями
	|ИЗ
	|	втЖильцыИЗарегистрированные КАК втЖильцыИЗарегистрированные
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеОПлощадях КАК втДанныеОПлощадях
	|		ПО втЖильцыИЗарегистрированные.ЛицевойСчет = втДанныеОПлощадях.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втЖильцыИЗарегистрированные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втДанныеОПлощадях
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втРазмерыДолейЛС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втПлощадиПомещений";
	
	Запрос.Выполнить();
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.Тариф,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНачисления,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаНачисленияОДН
	|ПОМЕСТИТЬ втНачисленияСТарифами
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНачала,
	|			&ДатаКонца,
	|			Запись,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втДанныеСПлощадями.ЛицевойСчет
	|					ИЗ
	|						втДанныеСПлощадями КАК втДанныеСПлощадями)
	|				И Услуга В
	|					(ВЫБРАТЬ
	|						втУслуги.УслугаВБазе
	|					ИЗ
	|						втУслуги КАК втУслуги)
	|				И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|				И НЕ РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)) КАК УПЖКХ_НачисленияОбороты
	|ГДЕ
	|	ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.Регистратор ССЫЛКА Документ.КВП_РегистрацияОплаты
	|				ТОГДА НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Рассрочка)
	|						И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Комиссия))
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.Тариф
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачисленияСТарифами.ЛицевойСчет,
	|	втНачисленияСТарифами.Услуга,
	|	СУММА(втНачисленияСТарифами.СуммаНачисления) КАК СуммаНачисления,
	|	СУММА(втНачисленияСТарифами.СуммаНачисленияОДН) КАК СуммаНачисленияОДН
	|ПОМЕСТИТЬ втНачисленияСГруппировкойБезТарифа
	|ИЗ
	|	втНачисленияСТарифами КАК втНачисленияСТарифами
	|
	|СГРУППИРОВАТЬ ПО
	|	втНачисленияСТарифами.ЛицевойСчет,
	|	втНачисленияСТарифами.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачисленияСТарифами.ЛицевойСчет,
	|	втНачисленияСТарифами.Услуга,
	|	СРЕДНЕЕ(втНачисленияСТарифами.Тариф) КАК Тариф
	|ПОМЕСТИТЬ втСредниеТарифы
	|ИЗ
	|	втНачисленияСТарифами КАК втНачисленияСТарифами
	|ГДЕ
	|	НЕ втНачисленияСТарифами.Тариф = 0
	|
	|СГРУППИРОВАТЬ ПО
	|	втНачисленияСТарифами.ЛицевойСчет,
	|	втНачисленияСТарифами.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления
	|ПОМЕСТИТЬ втНормыПотребления
	|ИЗ
	|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(
	|			&ДатаКонца,
	|			(ЛицевойСчет, Услуга) В
	|				(ВЫБРАТЬ
	|					втНачисленияСГруппировкойБезТарифа.ЛицевойСчет,
	|					втНачисленияСГруппировкойБезТарифа.Услуга
	|				ИЗ
	|					втНачисленияСГруппировкойБезТарифа КАК втНачисленияСГруппировкойБезТарифа)) КАК КВП_НормыПотребленияУслугЛССрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачисления.ЛицевойСчет,
	|	втНачисления.Услуга,
	|	ЕСТЬNULL(втСредниеТарифы.Тариф, 0) КАК Тариф,
	|	втНачисления.СуммаНачисления,
	|	втНачисления.СуммаНачисленияОДН,
	|	ЕСТЬNULL(втНормыПотребления.НормаПотребления, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)) КАК НормаПотребления
	|ПОМЕСТИТЬ втДанныеДляОтбораНачисленийСГруппировкой
	|ИЗ
	|	втНачисленияСГруппировкойБезТарифа КАК втНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНормыПотребления КАК втНормыПотребления
	|		ПО втНачисления.ЛицевойСчет = втНормыПотребления.ЛицевойСчет
	|			И втНачисления.Услуга = втНормыПотребления.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСредниеТарифы КАК втСредниеТарифы
	|		ПО втНачисления.ЛицевойСчет = втСредниеТарифы.ЛицевойСчет
	|			И втНачисления.Услуга = втСредниеТарифы.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеДляОтбораНачисленийСГруппировкой.ЛицевойСчет,
	|	втДанныеДляОтбораНачисленийСГруппировкой.Услуга,
	|	ЕСТЬNULL(втУслуги.Идентификатор, """") КАК ИдентификаторУслуги,
	|	втДанныеДляОтбораНачисленийСГруппировкой.Тариф,
	|	втДанныеДляОтбораНачисленийСГруппировкой.СуммаНачисления,
	|	втДанныеДляОтбораНачисленийСГруппировкой.СуммаНачисленияОДН,
	|	втДанныеДляОтбораНачисленийСГруппировкой.НормаПотребления
	|ПОМЕСТИТЬ втНачисленияСИдентификаторамиУслуг
	|ИЗ
	|	втДанныеДляОтбораНачисленийСГруппировкой КАК втДанныеДляОтбораНачисленийСГруппировкой
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУслуги КАК втУслуги
	|		ПО втДанныеДляОтбораНачисленийСГруппировкой.Услуга = втУслуги.УслугаВБазе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачисленияСИдентификаторамиУслуг.ЛицевойСчет,
	|	втНачисленияСИдентификаторамиУслуг.ИдентификаторУслуги,
	|	СУММА(втНачисленияСИдентификаторамиУслуг.СуммаНачисления) КАК СуммаНачисления,
	|	СУММА(втНачисленияСИдентификаторамиУслуг.СуммаНачисленияОДН) КАК СуммаНачисленияОДН,
	|	МАКСИМУМ(втНачисленияСИдентификаторамиУслуг.НормаПотребления) КАК НормаПотребления
	|ПОМЕСТИТЬ втГруппировкаНачисленийПоУслугамБезТарифов
	|ИЗ
	|	втНачисленияСИдентификаторамиУслуг КАК втНачисленияСИдентификаторамиУслуг
	|
	|СГРУППИРОВАТЬ ПО
	|	втНачисленияСИдентификаторамиУслуг.ЛицевойСчет,
	|	втНачисленияСИдентификаторамиУслуг.ИдентификаторУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачисленияСИдентификаторамиУслуг.ЛицевойСчет,
	|	втНачисленияСИдентификаторамиУслуг.ИдентификаторУслуги,
	|	СРЕДНЕЕ(втНачисленияСИдентификаторамиУслуг.Тариф) КАК Тариф
	|ПОМЕСТИТЬ втСредниеТарифыПоУслугам
	|ИЗ
	|	втНачисленияСИдентификаторамиУслуг КАК втНачисленияСИдентификаторамиУслуг
	|ГДЕ
	|	НЕ втНачисленияСИдентификаторамиУслуг.Тариф = 0
	|
	|СГРУППИРОВАТЬ ПО
	|	втНачисленияСИдентификаторамиУслуг.ЛицевойСчет,
	|	втНачисленияСИдентификаторамиУслуг.ИдентификаторУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГруппировкаНачисленийПоУслугамБезТарифов.ЛицевойСчет,
	|	втГруппировкаНачисленийПоУслугамБезТарифов.ИдентификаторУслуги,
	|	ЕСТЬNULL(втСредниеТарифыПоУслугам.Тариф, 0) КАК Тариф,
	|	втГруппировкаНачисленийПоУслугамБезТарифов.СуммаНачисления,
	|	втГруппировкаНачисленийПоУслугамБезТарифов.СуммаНачисленияОДН,
	|	втГруппировкаНачисленийПоУслугамБезТарифов.НормаПотребления
	|ПОМЕСТИТЬ втИтоговыеНачисления
	|ИЗ
	|	втГруппировкаНачисленийПоУслугамБезТарифов КАК втГруппировкаНачисленийПоУслугамБезТарифов
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСредниеТарифыПоУслугам КАК втСредниеТарифыПоУслугам
	|		ПО втГруппировкаНачисленийПоУслугамБезТарифов.ЛицевойСчет = втСредниеТарифыПоУслугам.ЛицевойСчет
	|			И втГруппировкаНачисленийПоУслугамБезТарифов.ИдентификаторУслуги = втСредниеТарифыПоУслугам.ИдентификаторУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговыеНачисления.ЛицевойСчет,
	|	СУММА(ВЫБОР
	|			КОГДА втИтоговыеНачисления.ИдентификаторУслуги = ""HOUSING""
	|				ТОГДА втИтоговыеНачисления.СуммаНачисления
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК HOUSING,
	|	СУММА(ВЫБОР
	|			КОГДА втИтоговыеНачисления.ИдентификаторУслуги = ""WATER""
	|				ТОГДА втИтоговыеНачисления.Тариф
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК TARIF_W,
	|	СУММА(ВЫБОР
	|			КОГДА втИтоговыеНачисления.ИдентификаторУслуги = ""WATER""
	|				ТОГДА втИтоговыеНачисления.СуммаНачисления
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК WATER,
	|	СУММА(ВЫБОР
	|			КОГДА втИтоговыеНачисления.ИдентификаторУслуги = ""WATER""
	|				ТОГДА втИтоговыеНачисления.СуммаНачисленияОДН
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ODN_W,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втИтоговыеНачисления.ИдентификаторУслуги = ""WATER""
	|				ТОГДА втИтоговыеНачисления.НормаПотребления
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)
	|		КОНЕЦ) КАК NORM_W,
	|	СУММА(ВЫБОР
	|			КОГДА втИтоговыеНачисления.ИдентификаторУслуги = ""SEWERAGE""
	|				ТОГДА втИтоговыеНачисления.Тариф
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК TARIF_S,
	|	СУММА(ВЫБОР
	|			КОГДА втИтоговыеНачисления.ИдентификаторУслуги = ""SEWERAGE""
	|				ТОГДА втИтоговыеНачисления.СуммаНачисления
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК SEWERAGE,
	|	СУММА(ВЫБОР
	|			КОГДА втИтоговыеНачисления.ИдентификаторУслуги = ""SEWERAGE""
	|				ТОГДА втИтоговыеНачисления.СуммаНачисленияОДН
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ODN_S,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втИтоговыеНачисления.ИдентификаторУслуги = ""SEWERAGE""
	|				ТОГДА втИтоговыеНачисления.НормаПотребления
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)
	|		КОНЕЦ) КАК NORM_S,
	|	СУММА(ВЫБОР
	|			КОГДА втИтоговыеНачисления.ИдентификаторУслуги = ""HEAT""
	|				ТОГДА втИтоговыеНачисления.Тариф
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК TARIF_H,
	|	СУММА(ВЫБОР
	|			КОГДА втИтоговыеНачисления.ИдентификаторУслуги = ""HEAT""
	|				ТОГДА втИтоговыеНачисления.СуммаНачисления
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК HEAT,
	|	СУММА(ВЫБОР
	|			КОГДА втИтоговыеНачисления.ИдентификаторУслуги = ""HEAT""
	|				ТОГДА втИтоговыеНачисления.СуммаНачисленияОДН
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ODN_H,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втИтоговыеНачисления.ИдентификаторУслуги = ""HEAT""
	|				ТОГДА втИтоговыеНачисления.НормаПотребления
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)
	|		КОНЕЦ) КАК NORM_H,
	|	СУММА(ВЫБОР
	|			КОГДА втИтоговыеНачисления.ИдентификаторУслуги = ""HOT_WAT""
	|				ТОГДА втИтоговыеНачисления.Тариф
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК TARIF_HW,
	|	СУММА(ВЫБОР
	|			КОГДА втИтоговыеНачисления.ИдентификаторУслуги = ""HOT_WAT""
	|				ТОГДА втИтоговыеНачисления.СуммаНачисления
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК HOT_WAT,
	|	СУММА(ВЫБОР
	|			КОГДА втИтоговыеНачисления.ИдентификаторУслуги = ""HOT_WAT""
	|				ТОГДА втИтоговыеНачисления.СуммаНачисленияОДН
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ODN_HW,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втИтоговыеНачисления.ИдентификаторУслуги = ""HOT_WAT""
	|				ТОГДА втИтоговыеНачисления.НормаПотребления
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)
	|		КОНЕЦ) КАК NORM_HW,
	|	СУММА(ВЫБОР
	|			КОГДА втИтоговыеНачисления.ИдентификаторУслуги = ""ENERGY""
	|				ТОГДА втИтоговыеНачисления.Тариф
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК TARIF_E,
	|	СУММА(ВЫБОР
	|			КОГДА втИтоговыеНачисления.ИдентификаторУслуги = ""ENERGY""
	|				ТОГДА втИтоговыеНачисления.СуммаНачисления
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ENERGY,
	|	СУММА(ВЫБОР
	|			КОГДА втИтоговыеНачисления.ИдентификаторУслуги = ""ENERGY""
	|				ТОГДА втИтоговыеНачисления.СуммаНачисленияОДН
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ODN_E,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втИтоговыеНачисления.ИдентификаторУслуги = ""ENERGY""
	|				ТОГДА втИтоговыеНачисления.НормаПотребления
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)
	|		КОНЕЦ) КАК NORM_E,
	|	СУММА(ВЫБОР
	|			КОГДА втИтоговыеНачисления.ИдентификаторУслуги = ""GAS""
	|				ТОГДА втИтоговыеНачисления.Тариф
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК TARIF_G,
	|	СУММА(ВЫБОР
	|			КОГДА втИтоговыеНачисления.ИдентификаторУслуги = ""GAS""
	|				ТОГДА втИтоговыеНачисления.СуммаНачисления
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК GAS,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втИтоговыеНачисления.ИдентификаторУслуги = ""GAS""
	|				ТОГДА втИтоговыеНачисления.НормаПотребления
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)
	|		КОНЕЦ) КАК NORM_G,
	|	СУММА(ВЫБОР
	|			КОГДА втИтоговыеНачисления.ИдентификаторУслуги = ""GARBAGE""
	|				ТОГДА втИтоговыеНачисления.СуммаНачисления
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК GARBAGE,
	|	СУММА(ВЫБОР
	|			КОГДА втИтоговыеНачисления.ИдентификаторУслуги = ""ENERGY_H""
	|				ТОГДА втИтоговыеНачисления.СуммаНачисления
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ENERGY_H,
	|	СУММА(ВЫБОР
	|			КОГДА втИтоговыеНачисления.ИдентификаторУслуги = ""GAS_HEAT""
	|				ТОГДА втИтоговыеНачисления.СуммаНачисления
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК GAS_HEAT
	|ПОМЕСТИТЬ втИтоговыеНачисленияПоУслугам
	|ИЗ
	|	втИтоговыеНачисления КАК втИтоговыеНачисления
	|
	|СГРУППИРОВАТЬ ПО
	|	втИтоговыеНачисления.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеСПлощадями.Проживающий,
	|	втДанныеСПлощадями.ЛицевойСчет,
	|	втДанныеСПлощадями.Помещение,
	|	втДанныеСПлощадями.Фамилия,
	|	втДанныеСПлощадями.Имя,
	|	втДанныеСПлощадями.Отчество,
	|	втДанныеСПлощадями.Город,
	|	втДанныеСПлощадями.Улица,
	|	втДанныеСПлощадями.Дом,
	|	втДанныеСПлощадями.Корпус,
	|	втДанныеСПлощадями.Квартира,
	|	втДанныеСПлощадями.КоличествоЗарегистрированных КАК NUMBER,
	|	втДанныеСПлощадями.ОбщаяПлощадь КАК SQ_METR,
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.HOUSING, 0) КАК HOUSING,
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.TARIF_W, 0) КАК TARIF_W,
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.WATER, 0) КАК WATER,
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.ODN_W, 0) КАК ODN_W,
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.NORM_W, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)) КАК NORM_W,
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.TARIF_S, 0) КАК TARIF_S,
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.SEWERAGE, 0) КАК SEWERAGE,
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.ODN_S, 0) КАК ODN_S,
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.NORM_S, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)) КАК NORM_S,
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.TARIF_H, 0) КАК TARIF_H,
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.HEAT, 0) КАК HEAT,
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.ODN_H, 0) КАК ODN_H,
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.NORM_H, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)) КАК NORM_H,
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.TARIF_HW, 0) КАК TARIF_HW,
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.HOT_WAT, 0) КАК HOT_WAT,
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.ODN_HW, 0) КАК ODN_HW,
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.NORM_HW, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)) КАК NORM_HW,
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.TARIF_E, 0) КАК TARIF_E,
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.ENERGY, 0) КАК ENERGY,
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.ODN_E, 0) КАК ODN_E,
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.NORM_E, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)) КАК NORM_E,
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.TARIF_G, 0) КАК TARIF_G,
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.GAS, 0) КАК GAS,
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.NORM_G, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)) КАК NORM_G,
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.GARBAGE, 0) КАК GARBAGE,
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.ENERGY_H, 0) КАК ENERGY_H,
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.GAS_HEAT, 0) КАК GAS_HEAT
	|ПОМЕСТИТЬ втПолученныеДанныеДляВыгрузки
	|ИЗ
	|	втДанныеСПлощадями КАК втДанныеСПлощадями
	|		ЛЕВОЕ СОЕДИНЕНИЕ втИтоговыеНачисленияПоУслугам КАК втИтоговыеНачисленияПоУслугам
	|		ПО втДанныеСПлощадями.ЛицевойСчет = втИтоговыеНачисленияПоУслугам.ЛицевойСчет
	|
	|СГРУППИРОВАТЬ ПО
	|	втДанныеСПлощадями.Проживающий,
	|	втДанныеСПлощадями.ЛицевойСчет,
	|	втДанныеСПлощадями.Помещение,
	|	втДанныеСПлощадями.Фамилия,
	|	втДанныеСПлощадями.Имя,
	|	втДанныеСПлощадями.Отчество,
	|	втДанныеСПлощадями.Город,
	|	втДанныеСПлощадями.Улица,
	|	втДанныеСПлощадями.Дом,
	|	втДанныеСПлощадями.Корпус,
	|	втДанныеСПлощадями.Квартира,
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.NORM_HW, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)),
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.NORM_W, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)),
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.NORM_E, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)),
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.NORM_H, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)),
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.NORM_G, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)),
	|	втДанныеСПлощадями.КоличествоЗарегистрированных,
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.NORM_S, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)),
	|	втДанныеСПлощадями.ОбщаяПлощадь,
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.HOUSING, 0),
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.TARIF_W, 0),
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.WATER, 0),
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.ODN_W, 0),
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.TARIF_S, 0),
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.SEWERAGE, 0),
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.ODN_S, 0),
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.TARIF_H, 0),
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.HEAT, 0),
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.ODN_H, 0),
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.TARIF_HW, 0),
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.HOT_WAT, 0),
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.ODN_HW, 0),
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.TARIF_E, 0),
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.ENERGY, 0),
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.ODN_E, 0),
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.TARIF_G, 0),
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.GAS, 0),
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.GARBAGE, 0),
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.ENERGY_H, 0),
	|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам.GAS_HEAT, 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаДанныхИзФайла.SURNAME,
	|	втТаблицаДанныхИзФайла.NAME,
	|	втТаблицаДанныхИзФайла.SECNAME,
	|	втТаблицаДанныхИзФайла.BIRTHDAY,
	|	втТаблицаДанныхИзФайла.POST,
	|	втТаблицаДанныхИзФайла.TOWN,
	|	втТаблицаДанныхИзФайла.STREET,
	|	втТаблицаДанныхИзФайла.HOUSE,
	|	втТаблицаДанныхИзФайла.KORPUS,
	|	втТаблицаДанныхИзФайла.FRACTION,
	|	втТаблицаДанныхИзФайла.FLAT,
	|	втТаблицаДанныхИзФайла.LITERA,
	|	втТаблицаДанныхИзФайла.MONTH,
	|	втТаблицаДанныхИзФайла.YEAR,
	|	ЕСТЬNULL(втПолученныеДанныеДляВыгрузки.NUMBER, 0) КАК NUMBER,
	|	ЕСТЬNULL(втПолученныеДанныеДляВыгрузки.SQ_METR, 0) КАК SQ_METR,
	|	ЕСТЬNULL(втПолученныеДанныеДляВыгрузки.HOUSING, 0) КАК HOUSING,
	|	ЕСТЬNULL(втПолученныеДанныеДляВыгрузки.WATER, 0) КАК WATER,
	|	ЕСТЬNULL(втПолученныеДанныеДляВыгрузки.ODN_W, 0) КАК ODN_W,
	|	втТаблицаДанныхИзФайла.NORM_W,
	|	ЕСТЬNULL(втПолученныеДанныеДляВыгрузки.NORM_W, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)) КАК NORM_WИзБазы,
	|	ЕСТЬNULL(втПолученныеДанныеДляВыгрузки.TARIF_W, 0) КАК TARIF_W,
	|	втТаблицаДанныхИзФайла.MES_W,
	|	ЕСТЬNULL(втПолученныеДанныеДляВыгрузки.SEWERAGE, 0) КАК SEWERAGE,
	|	ЕСТЬNULL(втПолученныеДанныеДляВыгрузки.ODN_S, 0) КАК ODN_S,
	|	втТаблицаДанныхИзФайла.NORM_S,
	|	ЕСТЬNULL(втПолученныеДанныеДляВыгрузки.NORM_S, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)) КАК NORM_SИзБазы,
	|	ЕСТЬNULL(втПолученныеДанныеДляВыгрузки.TARIF_S, 0) КАК TARIF_S,
	|	втТаблицаДанныхИзФайла.MES_S,
	|	ЕСТЬNULL(втПолученныеДанныеДляВыгрузки.HEAT, 0) КАК HEAT,
	|	ЕСТЬNULL(втПолученныеДанныеДляВыгрузки.ODN_H, 0) КАК ODN_H,
	|	втТаблицаДанныхИзФайла.NORM_H,
	|	ЕСТЬNULL(втПолученныеДанныеДляВыгрузки.NORM_H, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)) КАК NORM_HИзБазы,
	|	ЕСТЬNULL(втПолученныеДанныеДляВыгрузки.TARIF_H, 0) КАК TARIF_H,
	|	втТаблицаДанныхИзФайла.MES_H,
	|	ЕСТЬNULL(втПолученныеДанныеДляВыгрузки.HOT_WAT, 0) КАК HOT_WAT,
	|	ЕСТЬNULL(втПолученныеДанныеДляВыгрузки.ODN_HW, 0) КАК ODN_HW,
	|	втТаблицаДанныхИзФайла.NORM_HW,
	|	ЕСТЬNULL(втПолученныеДанныеДляВыгрузки.NORM_HW, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)) КАК NORM_HWИзБазы,
	|	ЕСТЬNULL(втПолученныеДанныеДляВыгрузки.TARIF_HW, 0) КАК TARIF_HW,
	|	втТаблицаДанныхИзФайла.MES_HW,
	|	ЕСТЬNULL(втПолученныеДанныеДляВыгрузки.ENERGY, 0) КАК ENERGY,
	|	ЕСТЬNULL(втПолученныеДанныеДляВыгрузки.ODN_E, 0) КАК ODN_E,
	|	втТаблицаДанныхИзФайла.NORM_E,
	|	ЕСТЬNULL(втПолученныеДанныеДляВыгрузки.NORM_E, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)) КАК NORM_EИзБазы,
	|	ЕСТЬNULL(втПолученныеДанныеДляВыгрузки.TARIF_E, 0) КАК TARIF_E,
	|	втТаблицаДанныхИзФайла.MES_E,
	|	ЕСТЬNULL(втПолученныеДанныеДляВыгрузки.GAS, 0) КАК GAS,
	|	втТаблицаДанныхИзФайла.NORM_G,
	|	ЕСТЬNULL(втПолученныеДанныеДляВыгрузки.NORM_G, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)) КАК NORM_GИзБазы,
	|	ЕСТЬNULL(втПолученныеДанныеДляВыгрузки.TARIF_G, 0) КАК TARIF_G,
	|	втТаблицаДанныхИзФайла.MES_G,
	|	ЕСТЬNULL(втПолученныеДанныеДляВыгрузки.GARBAGE, 0) КАК GARBAGE,
	|	ЕСТЬNULL(втПолученныеДанныеДляВыгрузки.ENERGY_H, 0) КАК ENERGY_H,
	|	ЕСТЬNULL(втПолученныеДанныеДляВыгрузки.GAS_HEAT, 0) КАК GAS_HEAT,
	|	втТаблицаДанныхИзФайла.ULICA,
	|	втТаблицаДанныхИзФайла.KOD,
	|	втТаблицаДанныхИзФайла.KODRC,
	|	втТаблицаДанныхИзФайла.NOM_LC,
	|	втТаблицаДанныхИзФайла.DAT_BEG,
	|	втТаблицаДанныхИзФайла.DAT_END,
	|	втТаблицаДанныхИзФайла.ARREST,
	|	втТаблицаДанныхИзФайла.ACC_ORG,
	|	втТаблицаДанныхИзФайла.REPAIR,
	|	ЕСТЬNULL(втПолученныеДанныеДляВыгрузки.ЛицевойСчет, ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)) КАК ЛицевойСчет
	|ИЗ
	|	втТаблицаДанныхИзФайла КАК втТаблицаДанныхИзФайла
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПолученныеДанныеДляВыгрузки КАК втПолученныеДанныеДляВыгрузки
	|		ПО втТаблицаДанныхИзФайла.SURNAME = втПолученныеДанныеДляВыгрузки.Фамилия
	|			И втТаблицаДанныхИзФайла.NAME = втПолученныеДанныеДляВыгрузки.Имя
	|			И втТаблицаДанныхИзФайла.SECNAME = втПолученныеДанныеДляВыгрузки.Отчество
	|			И втТаблицаДанныхИзФайла.TOWN = втПолученныеДанныеДляВыгрузки.Город
	|			И втТаблицаДанныхИзФайла.STREET = втПолученныеДанныеДляВыгрузки.Улица
	|			И втТаблицаДанныхИзФайла.HOUSE = втПолученныеДанныеДляВыгрузки.Дом
	|			И втТаблицаДанныхИзФайла.KORPUS = втПолученныеДанныеДляВыгрузки.Корпус
	|			И втТаблицаДанныхИзФайла.FLAT = втПолученныеДанныеДляВыгрузки.Квартира";
	
	ТаблицаДанныхФайлаОНачислениях = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаРезультата ИЗ ТаблицаДанныхФайлаОНачислениях Цикл
		Если ЗначениеЗаполнено(СтрокаРезультата.NORM_WИзБазы) Тогда
			Если НЕ СтрокаРезультата.NORM_WИзБазы.ВариантНастройки = ПредопределенноеЗначение("Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой") Тогда
				СтрокаРезультата.NORM_W = ПолучитьРазмерНормыПотребления(СтрокаРезультата.ЛицевойСчет, КонецМесяца(Период), СтрокаРезультата.NORM_WИзБазы, Организация);
			Иначе
				СтрокаРезультата.NORM_W = СтрокаРезультата.NORM_WИзБазы.Размер;
			КонецЕсли;
		Иначе
			СтрокаРезультата.NORM_W = 0;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаРезультата.NORM_SИзБазы) Тогда
			Если НЕ СтрокаРезультата.NORM_SИзБазы.ВариантНастройки = ПредопределенноеЗначение("Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой") Тогда
				СтрокаРезультата.NORM_S = ПолучитьРазмерНормыПотребления(СтрокаРезультата.ЛицевойСчет, КонецМесяца(Период), СтрокаРезультата.NORM_SИзБазы, Организация);
			Иначе
				СтрокаРезультата.NORM_S = СтрокаРезультата.NORM_SИзБазы.Размер;
			КонецЕсли;
		Иначе
			СтрокаРезультата.NORM_S = 0;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаРезультата.NORM_HИзБазы) Тогда
			Если НЕ СтрокаРезультата.NORM_HИзБазы.ВариантНастройки = ПредопределенноеЗначение("Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой") Тогда
				СтрокаРезультата.NORM_H = ПолучитьРазмерНормыПотребления(СтрокаРезультата.ЛицевойСчет, КонецМесяца(Период), СтрокаРезультата.NORM_HИзБазы, Организация);
			Иначе
				СтрокаРезультата.NORM_H = СтрокаРезультата.NORM_HИзБазы.Размер;
			КонецЕсли;
		Иначе
			СтрокаРезультата.NORM_H = 0;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаРезультата.NORM_HWИзБазы) Тогда
			Если НЕ СтрокаРезультата.NORM_HWИзБазы.ВариантНастройки = ПредопределенноеЗначение("Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой") Тогда
				СтрокаРезультата.NORM_HW = ПолучитьРазмерНормыПотребления(СтрокаРезультата.ЛицевойСчет, КонецМесяца(Период), СтрокаРезультата.NORM_HWИзБазы, Организация);
			Иначе
				СтрокаРезультата.NORM_HW = СтрокаРезультата.NORM_HWИзБазы.Размер;
			КонецЕсли;
		Иначе
			СтрокаРезультата.NORM_HW = 0;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаРезультата.NORM_EИзБазы) Тогда
			Если НЕ СтрокаРезультата.NORM_EИзБазы.ВариантНастройки = ПредопределенноеЗначение("Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой") Тогда
				СтрокаРезультата.NORM_E = ПолучитьРазмерНормыПотребления(СтрокаРезультата.ЛицевойСчет, КонецМесяца(Период), СтрокаРезультата.NORM_EИзБазы, Организация);
			Иначе
				СтрокаРезультата.NORM_E = СтрокаРезультата.NORM_EИзБазы.Размер;
			КонецЕсли;
		Иначе
			СтрокаРезультата.NORM_E = 0;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаРезультата.NORM_GИзБазы) Тогда
			Если НЕ СтрокаРезультата.NORM_GИзБазы.ВариантНастройки = ПредопределенноеЗначение("Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой") Тогда
				СтрокаРезультата.NORM_G = ПолучитьРазмерНормыПотребления(СтрокаРезультата.ЛицевойСчет, КонецМесяца(Период), СтрокаРезультата.NORM_GИзБазы, Организация);
			Иначе
				СтрокаРезультата.NORM_G = СтрокаРезультата.NORM_GИзБазы.Размер;
			КонецЕсли;
		Иначе
			СтрокаРезультата.NORM_G = 0;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаРезультата.ЛицевойСчет) Тогда
			СтрокаРезультата.ACC_ORG = ПодготовитьНомерЛСДляВывода(СтрокаРезультата.ЛицевойСчет.Наименование);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Получает таблицу данных с задолженностями.
//
Функция ПолучитьТаблицуЗадолженностейВолгоград(ТаблицаДанныхФайлаОНачислениях)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДатаНачала",                     НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ДатаКонца",                      КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",                    Организация);
	Запрос.УстановитьПараметр("ТаблицаДанныхФайлаОНачислениях", ТаблицаДанныхФайлаОНачислениях);
	Запрос.УстановитьПараметр("ДатаОпределенияЗадолженности",   ДатаСрокОплаты());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаИзФайла.SURNAME,
	|	ТаблицаИзФайла.NAME,
	|	ТаблицаИзФайла.SECNAME,
	|	ТаблицаИзФайла.MONTH,
	|	ТаблицаИзФайла.YEAR,
	|	ТаблицаИзФайла.NOM_LC,
	|	ТаблицаИзФайла.ACC_ORG,
	|	ТаблицаИзФайла.ЛицевойСчет
	|ПОМЕСТИТЬ втТаблицаДанныхИзФайла
	|ИЗ
	|	&ТаблицаДанныхФайлаОНачислениях КАК ТаблицаИзФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток КАК СуммаЗадолженностиЗаЖКУ
	|ПОМЕСТИТЬ втСуммыЗадолженности
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&ДатаНачала,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втТаблицаДанныхИзФайла.ЛицевойСчет
	|					ИЗ
	|						втТаблицаДанныхИзФайла КАК втТаблицаДанныхИзФайла)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|ГДЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет,
	|	МАКСИМУМ(КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период) КАК Период
	|ПОМЕСТИТЬ втПериодыЗадолженности
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(
	|			,
	|			&ДатаОпределенияЗадолженности,
	|			Регистратор,
	|			Движения,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втСуммыЗадолженности.ЛицевойСчет
	|					ИЗ
	|						втСуммыЗадолженности КАК втСуммыЗадолженности)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты
	|ГДЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период < &ДатаОпределенияЗадолженности
	|	И КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияКонечныйОстаток <= 0
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет,
	|	МИНИМУМ(КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период) КАК Период
	|ПОМЕСТИТЬ втПериодыНачалаНачислений
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(
	|			,
	|			&ДатаНачала,
	|			Регистратор,
	|			Движения,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втСуммыЗадолженности.ЛицевойСчет
	|					ИЗ
	|						втСуммыЗадолженности КАК втСуммыЗадолженности)
	|				И НЕ ЛицевойСчет В
	|						(ВЫБРАТЬ
	|							втПериодыЗадолженности.ЛицевойСчет
	|						ИЗ
	|							втПериодыЗадолженности КАК втПериодыЗадолженности)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты
	|ГДЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период < &ДатаНачала
	|	И КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияКонечныйОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСуммыЗадолженности.ЛицевойСчет,
	|	втСуммыЗадолженности.СуммаЗадолженностиЗаЖКУ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втПериодыЗадолженности.Период, ЕСТЬNULL(втПериодыНачалаНачислений.Период, ДАТАВРЕМЯ(1, 1, 1))) = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА втПериодыЗадолженности.Период ЕСТЬ NULL
	|					ТОГДА РАЗНОСТЬДАТ(втПериодыНачалаНачислений.Период, &ДатаНачала, МЕСЯЦ)
	|				ИНАЧЕ ВЫБОР
	|						КОГДА втПериодыЗадолженности.Период > &ДатаНачала
	|							ТОГДА 0
	|						ИНАЧЕ РАЗНОСТЬДАТ(втПериодыЗадолженности.Период, &ДатаНачала, МЕСЯЦ)
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоМесяцевЗадолженностиЗаЖКУ
	|ПОМЕСТИТЬ втЗадолженностьСМесяцами
	|ИЗ
	|	втСуммыЗадолженности КАК втСуммыЗадолженности
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПериодыЗадолженности КАК втПериодыЗадолженности
	|		ПО втСуммыЗадолженности.ЛицевойСчет = втПериодыЗадолженности.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПериодыНачалаНачислений КАК втПериодыНачалаНачислений
	|		ПО втСуммыЗадолженности.ЛицевойСчет = втПериодыНачалаНачислений.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаДанныхИзФайла.SURNAME,
	|	втТаблицаДанныхИзФайла.NAME,
	|	втТаблицаДанныхИзФайла.SECNAME,
	|	втТаблицаДанныхИзФайла.NOM_LC,
	|	втЗадолженностьСМесяцами.СуммаЗадолженностиЗаЖКУ КАК SUMMA,
	|	втТаблицаДанныхИзФайла.ACC_ORG,
	|	втТаблицаДанныхИзФайла.MONTH,
	|	втТаблицаДанныхИзФайла.YEAR,
	|	втТаблицаДанныхИзФайла.ЛицевойСчет
	|ИЗ
	|	втТаблицаДанныхИзФайла КАК втТаблицаДанныхИзФайла
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЗадолженностьСМесяцами КАК втЗадолженностьСМесяцами
	|		ПО втТаблицаДанныхИзФайла.ЛицевойСчет = втЗадолженностьСМесяцами.ЛицевойСчет
	|			И (НЕ втЗадолженностьСМесяцами.КоличествоМесяцевЗадолженностиЗаЖКУ < 3)";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ВЫГРУЗКИ ДЛЯ ТОМСКОЙ ОБЛАСТИ

#Область ТомскаяОбласть

// Формирует таблицу всех выгружаемых данных.
//
Процедура СформироватьТаблицуДанныхТомскаяОбласть(ТаблицаДанныхФайла, ПараметрыВыгрузки) Экспорт
	
	ТаблицаАдресов = ПолучитьАдресаВсехЗданийТомскаяОбласть();
	ТаблицаФИО     = ПолучитьФИОФизЛиц();
	ПолучитьТаблицуНачисленийТомск(ТаблицаДанныхФайла, ТаблицаАдресов, ТаблицаФИО, ПараметрыВыгрузки);
	
КонецПроцедуры

// Получает таблицу значений с адресами зданий.
//
Функция ПолучитьАдресаВсехЗданийТомскаяОбласть()
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	втКонтактнаяИнформация.Объект КАК Здание,
	|	ВЫБОР
	|		КОГДА НЕ втКонтактнаяИнформация.НаселенныйПункт = """"
	|			ТОГДА втКонтактнаяИнформация.НаселенныйПункт
	|		КОГДА НЕ втКонтактнаяИнформация.Город = """"
	|			ТОГДА втКонтактнаяИнформация.Город
	|		ИНАЧЕ втКонтактнаяИнформация.Регион
	|	КОНЕЦ КАК НаселенныйПункт,
	|	втКонтактнаяИнформация.Район КАК Район,
	|	втКонтактнаяИнформация.Улица КАК Улица,
	|	втКонтактнаяИнформация.Дом КАК Дом,
	|	втКонтактнаяИнформация.Корпус КАК Корпус,
	|	втКонтактнаяИнформация.ТипКорпуса КАК ТипКорпуса
	|ИЗ
	|	втКонтактнаяИнформация КАК втКонтактнаяИнформация";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	МассивСокрРайонов  = СформироватьМассивСокращениеДляТомскойОблПоВиду(2);
	МассивСокрНасПункт = СформироватьМассивСокращениеДляТомскойОблПоВиду(4);
	МассивСокрУлицы    = СформироватьМассивСокращениеДляТомскойОблПоВиду(5);
	
	Для Каждого СтрокаЗдания ИЗ Результат Цикл
		СтрокаЗдания.Район           = ВРег(НормализацияПолейАдресаОбласти(СтрокаЗдания.Район, МассивСокрРайонов));
		СтрокаЗдания.НаселенныйПункт = ВРег(НормализацияПолейАдресаОбласти(СтрокаЗдания.НаселенныйПункт, МассивСокрНасПункт));
		СтрокаЗдания.Улица           = ВРег(НормализацияПолейАдресаОбласти(СтрокаЗдания.Улица, МассивСокрУлицы));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьАдресаВсехЗданийТомскаяОбласть()

// Формирует массив сокращений для Томской области для выбранного вида сокращения.
//
Функция СформироватьМассивСокращениеДляТомскойОблПоВиду(ВидСокращение)
	
	МассивСокращений = Новый Массив;
	// Для регионов.
	Если ВидСокращение = 1 Тогда
		МассивСокращений.Добавить("обл");
		// Для районов.
	ИначеЕсли ВидСокращение = 2 Тогда
		МассивСокращений.Добавить("р-н");
		МассивСокращений.Добавить("район");
		// Для городов.
	ИначеЕсли ВидСокращение = 3 Тогда
		МассивСокращений.Добавить("г");
		// Для нас.пунктов.
	ИначеЕсли ВидСокращение = 4 Тогда
		МассивСокращений.Добавить("рп");
		МассивСокращений.Добавить("п");
		МассивСокращений.Добавить("с");
		МассивСокращений.Добавить("д");
		МассивСокращений.Добавить("х");
		МассивСокращений.Добавить("ст");
		МассивСокращений.Добавить("пгт");
		МассивСокращений.Добавить("дп");
		МассивСокращений.Добавить("рзд");
		МассивСокращений.Добавить("мкр");
		МассивСокращений.Добавить("нп");
		МассивСокращений.Добавить("тер");
		МассивСокращений.Добавить("п/ст");
		МассивСокращений.Добавить("промзона");
		МассивСокращений.Добавить("снт");
		МассивСокращений.Добавить("п/о");
		МассивСокращений.Добавить("городок");
		МассивСокращений.Добавить("заимка");
		МассивСокращений.Добавить("кп");
		МассивСокращений.Добавить("ж/д_казарм");
		МассивСокращений.Добавить("г");
		МассивСокращений.Добавить("обл");
		МассивСокращений.Добавить("рп.");
		МассивСокращений.Добавить("п.");
		МассивСокращений.Добавить("с.");
		МассивСокращений.Добавить("д.");
		МассивСокращений.Добавить("х.");
		МассивСокращений.Добавить("ст.");
		МассивСокращений.Добавить("пгт.");
		МассивСокращений.Добавить("дп.");
		МассивСокращений.Добавить("рзд.");
		МассивСокращений.Добавить("мкр.");
		МассивСокращений.Добавить("нп.");
		МассивСокращений.Добавить("тер.");
		МассивСокращений.Добавить("п/ст.");
		МассивСокращений.Добавить("промзона.");
		МассивСокращений.Добавить("снт.");
		МассивСокращений.Добавить("п/о.");
		МассивСокращений.Добавить("городок.");
		МассивСокращений.Добавить("заимка.");
		МассивСокращений.Добавить("кп.");
		МассивСокращений.Добавить("ж/д_казарм.");
		МассивСокращений.Добавить("г.");
		МассивСокращений.Добавить("обл.");
		// Для улиц.
	ИначеЕсли ВидСокращение = 5 Тогда
		МассивСокращений.Добавить("ул");
		МассивСокращений.Добавить("тер");
		МассивСокращений.Добавить("пл");
		МассивСокращений.Добавить("пер");
		МассивСокращений.Добавить("снт");
		МассивСокращений.Добавить("проезд");
		МассивСокращений.Добавить("б-р");
		МассивСокращений.Добавить("туп");
		МассивСокращений.Добавить("п");
		МассивСокращений.Добавить("ш");
		МассивСокращений.Добавить("пр-кт");
		МассивСокращений.Добавить("тракт");
		МассивСокращений.Добавить("сквер");
		МассивСокращений.Добавить("ст");
		МассивСокращений.Добавить("наб");
		МассивСокращений.Добавить("км");
		МассивСокращений.Добавить("ж/д_ст");
		МассивСокращений.Добавить("сад");
		МассивСокращений.Добавить("парк");
		МассивСокращений.Добавить("уч-к");
		МассивСокращений.Добавить("мкр");
		МассивСокращений.Добавить("городок");
		МассивСокращений.Добавить("кв-л");
		МассивСокращений.Добавить("нп");
		МассивСокращений.Добавить("остров");
		МассивСокращений.Добавить("гск");
		МассивСокращений.Добавить("линия");
		МассивСокращений.Добавить("рзд");
		МассивСокращений.Добавить("стр");
		МассивСокращений.Добавить("аллея");
		МассивСокращений.Добавить("казарма");
		МассивСокращений.Добавить("ж/д_рзд");
		МассивСокращений.Добавить("д");
		МассивСокращений.Добавить("ж/д_казарм");
		МассивСокращений.Добавить("ж/д_будка");
		МассивСокращений.Добавить("высел");
		МассивСокращений.Добавить("ул.");
		МассивСокращений.Добавить("тер.");
		МассивСокращений.Добавить("пл.");
		МассивСокращений.Добавить("пер.");
		МассивСокращений.Добавить("снт.");
		МассивСокращений.Добавить("проезд.");
		МассивСокращений.Добавить("б-р.");
		МассивСокращений.Добавить("туп.");
		МассивСокращений.Добавить("п.");
		МассивСокращений.Добавить("ш.");
		МассивСокращений.Добавить("пр-кт.");
		МассивСокращений.Добавить("тракт.");
		МассивСокращений.Добавить("сквер.");
		МассивСокращений.Добавить("ст.");
		МассивСокращений.Добавить("наб.");
		МассивСокращений.Добавить("км.");
		МассивСокращений.Добавить("ж/д_ст.");
		МассивСокращений.Добавить("сад.");
		МассивСокращений.Добавить("парк.");
		МассивСокращений.Добавить("уч-к.");
		МассивСокращений.Добавить("мкр.");
		МассивСокращений.Добавить("городок.");
		МассивСокращений.Добавить("кв-л.");
		МассивСокращений.Добавить("нп.");
		МассивСокращений.Добавить("остров.");
		МассивСокращений.Добавить("гск.");
		МассивСокращений.Добавить("линия.");
		МассивСокращений.Добавить("рзд.");
		МассивСокращений.Добавить("стр.");
		МассивСокращений.Добавить("аллея.");
		МассивСокращений.Добавить("казарма.");
		МассивСокращений.Добавить("ж/д_рзд.");
		МассивСокращений.Добавить("д.");
		МассивСокращений.Добавить("ж/д_казарм.");
		МассивСокращений.Добавить("ж/д_будка.");
		МассивСокращений.Добавить("высел.");
	КонецЕсли;
	
	Возврат МассивСокращений;
	
КонецФункции // СформироватьМассивСокращениеДляСвердловскойОблПоВиду()

// Получает таблицу данных с начислениями и необходимыми данными.
//
Процедура ПолучитьТаблицуНачисленийТомск(ТаблицаДанныхФайла, ТаблицаАдресов, ТаблицаФИО, ПараметрыВыгрузки)
	
	Запрос = Новый Запрос;
	
	МенеджерВТ                     = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	// Параметры.
	
	Запрос.УстановитьПараметр("ДатаНачала",                   НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ДатаКонца",                    КонецМесяца(Период));
	Запрос.УстановитьПараметр("ДатаОпределенияЗадолженности", ДатаСрокОплаты());
	Запрос.УстановитьПараметр("Организация",                  Организация);
	Запрос.УстановитьПараметр("ТаблицаАдресов",               ТаблицаАдресов);
	Запрос.УстановитьПараметр("ТаблицаФИО",                   ТаблицаФИО);
	
	Запрос.УстановитьПараметр("gaz_kotel",                ПараметрыВыгрузки.ГазовыйКотел);
	Запрос.УстановитьПараметр("el_nagr",                  ПараметрыВыгрузки.ЭлектрическийНагреватель);
	Запрос.УстановитьПараметр("КодОрганизации",           ПараметрыВыгрузки.КодОрганизации);
	Запрос.УстановитьПараметр("КатегорияБлагоустройства", ПараметрыВыгрузки.КатегорияБлагоустройства);
	
	Запрос.УстановитьПараметр("Районы",                   ТомскаяОбласть_Районы.Выгрузить());
	Запрос.УстановитьПараметр("НаселенныеПункты",         ТомскаяОбласть_НаселенныеПункты.Выгрузить());
	Запрос.УстановитьПараметр("КодУлицы",                 ТомскаяОбласть_Улицы.Выгрузить());
	Запрос.УстановитьПараметр("ЖКУ_ВБазе",                ТомскаяОбласть_ЖКУ_ВБазе.Выгрузить());
	Запрос.УстановитьПараметр("ЖКУ_Отопление",            ТомскаяОбласть_ЖКУ_Отопление.Выгрузить());
	
	Запрос.УстановитьПараметр("УказыватьКоличествоПрожИЗарегЧислами", Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Получить());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаФИО.ФизическоеЛицо,
	|	ТаблицаФИО.Фамилия,
	|	ТаблицаФИО.Имя,
	|	ТаблицаФИО.Отчество
	|ПОМЕСТИТЬ втФИОФизЛиц
	|ИЗ
	|	&ТаблицаФИО КАК ТаблицаФИО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаАдресов.Здание,
	|	ТаблицаАдресов.Район,
	|	ТаблицаАдресов.НаселенныйПункт,
	|	ТаблицаАдресов.Улица,
	|	ТаблицаАдресов.Дом,
	|	ТаблицаАдресов.Корпус,
	|	ТаблицаАдресов.ТипКорпуса
	|ПОМЕСТИТЬ втАдресаИзБазы
	|ИЗ
	|	&ТаблицаАдресов КАК ТаблицаАдресов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект КАК Помещение,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Владелец КАК Здание,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Владелец.КодДомаПоФИАС КАК КодДомаПоФИАС
	|ПОМЕСТИТЬ втДействующиеЛС
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&ДатаКонца, ) КАК КВП_ЛицевыеСчетаСрезПоследних
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги.ЕдиницаИзмерения.Код КАК ОКЕИ,
	|	МАКСИМУМ(УПЖКХ_НачисленияОбороты.Тариф) КАК Тариф,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
	|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НачисленияСПерерасчетами,
	|	СУММА(ЕСТЬNULL(УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот, 0)) КАК НачисленияСПерерасчетамиИЛьготами,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)
	|				ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаЛьготы,
	|	СУММА(ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента))
	|			ИЛИ УПЖКХ_НачисленияОбороты.Услуга.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоНормамПотребления), ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.СОграничениемПоНормам))
	|				ТОГДА УПЖКХ_НачисленияОбороты.Количество
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОбъемПоНормативу
	|ПОМЕСТИТЬ втНачисления
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНачала,
	|			&ДатаКонца,
	|			,
	|			ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втДействующиеЛС.ЛицевойСчет
	|					ИЗ
	|						втДействующиеЛС КАК втДействующиеЛС)
	|				И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ВводНачальногоСальдо))
	|				И Организация = &Организация
	|				И НЕ РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)) КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги.ЕдиницаИзмерения.Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачисления.ЛицевойСчет,
	|	втДействующиеЛС.Помещение,
	|	втДействующиеЛС.Здание,
	|	втДействующиеЛС.КодДомаПоФИАС,
	|	втНачисления.Услуга,
	|	втНачисления.ОКЕИ,
	|	втНачисления.Тариф КАК Тариф,
	|	втНачисления.НачисленияСПерерасчетами КАК НачисленияСПерерасчетами,
	|	втНачисления.НачисленияСПерерасчетамиИЛьготами КАК НачисленияСПерерасчетамиИЛьготами,
	|	втНачисления.СуммаЛьготы КАК СуммаЛьготы,
	|	втНачисления.ОбъемПоНормативу КАК ОбъемПоНормативу,
	|	ЕСТЬNULL(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток, 0) КАК СуммаДолга
	|ПОМЕСТИТЬ втСальдо
	|ИЗ
	|	втНачисления КАК втНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|				&ДатаОпределенияЗадолженности,
	|				(ЛицевойСчет, Услуга) В
	|						(ВЫБРАТЬ
	|							втНачисления.ЛицевойСчет,
	|							втНачисления.Услуга
	|						ИЗ
	|							втНачисления КАК втНачисления)
	|					И Организация = &Организация) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|		ПО втНачисления.ЛицевойСчет = КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет
	|			И втНачисления.Услуга = КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДействующиеЛС КАК втДействующиеЛС
	|		ПО втНачисления.ЛицевойСчет = втДействующиеЛС.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец) КАК КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втЗарегистрированоРС
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втСальдо.ЛицевойСчет
	|				ИЗ
	|					втСальдо КАК втСальдо)) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.ЛицевойСчет,
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.КоличествоЗарегистрированных КАК КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втУчетКоличестваЖильцов
	|ИЗ
	|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втСальдо.ЛицевойСчет
	|				ИЗ
	|					втСальдо КАК втСальдо)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСальдо.ЛицевойСчет,
	|	втСальдо.Помещение,
	|	втСальдо.Здание,
	|	втСальдо.КодДомаПоФИАС,
	|	ВЫБОР
	|		КОГДА &УказыватьКоличествоПрожИЗарегЧислами = ИСТИНА
	|			ТОГДА ЕСТЬNULL(втУчетКоличестваЖильцов.КоличествоЗарегистрированных, 0)
	|		ИНАЧЕ ЕСТЬNULL(втЗарегистрированоРС.КоличествоЗарегистрированных, 0)
	|	КОНЕЦ КАК КоличествоЗарегистрированных,
	|	ВЫБОР
	|		КОГДА втСальдо.Здание.Многоквартирное
	|			ТОГДА 2
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ТипДома
	|ПОМЕСТИТЬ втЗарегистрировано
	|ИЗ
	|	втСальдо КАК втСальдо
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЗарегистрированоРС КАК втЗарегистрированоРС
	|		ПО втСальдо.ЛицевойСчет = втЗарегистрированоРС.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУчетКоличестваЖильцов КАК втУчетКоличестваЖильцов
	|		ПО втСальдо.ЛицевойСчет = втУчетКоличестваЖильцов.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗарегистрировано.ЛицевойСчет КАК ЛицевойСчет,
	|	втЗарегистрировано.Помещение КАК Помещение,
	|	втЗарегистрировано.Здание КАК Здание,
	|	втЗарегистрировано.КодДомаПоФИАС,
	|	втЗарегистрировано.КоличествоЗарегистрированных,
	|	ЕСТЬNULL(УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец, ЗНАЧЕНИЕ(Справочник.УПЖКХ_Жильцы.ПустаяСсылка)) КАК ОтветственныйВладелец,
	|	втЗарегистрировано.ТипДома
	|ПОМЕСТИТЬ втОтветственныеЛица
	|ИЗ
	|	втЗарегистрировано КАК втЗарегистрировано
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(
	|				&ДатаКонца,
	|				ЛицевойСчет В
	|						(ВЫБРАТЬ
	|							втНачисления.ЛицевойСчет
	|						ИЗ
	|							втНачисления КАК втНачисления)
	|					И ОтветственныйВладелец ССЫЛКА Справочник.УПЖКХ_Жильцы) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
	|		ПО втЗарегистрировано.ЛицевойСчет = УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОтветственныеЛица.ЛицевойСчет,
	|	втОтветственныеЛица.Помещение,
	|	втОтветственныеЛица.Здание,
	|	втОтветственныеЛица.КодДомаПоФИАС,
	|	втОтветственныеЛица.КоличествоЗарегистрированных,
	|	ЕСТЬNULL(втФИОФизЛиц.Фамилия, """") КАК Фамилия,
	|	ЕСТЬNULL(втФИОФизЛиц.Имя, """") КАК Имя,
	|	ЕСТЬNULL(втФИОФизЛиц.Отчество, """") КАК Отчество,
	|	втОтветственныеЛица.ТипДома
	|ПОМЕСТИТЬ втФИО
	|ИЗ
	|	втОтветственныеЛица КАК втОтветственныеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ втФИОФизЛиц КАК втФИОФизЛиц
	|		ПО втОтветственныеЛица.ОтветственныйВладелец.ФизЛицо = втФИОФизЛиц.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втФИО.ЛицевойСчет,
	|	втФИО.Помещение,
	|	втФИО.Здание,
	|	втФИО.КодДомаПоФИАС,
	|	втФИО.КоличествоЗарегистрированных,
	|	втФИО.Фамилия,
	|	втФИО.Имя,
	|	втФИО.Отчество,
	|	ЕСТЬNULL(втАдресаИзБазы.НаселенныйПункт, """") КАК НаселенныйПункт,
	|	ЕСТЬNULL(втАдресаИзБазы.Район, """") КАК Район,
	|	ЕСТЬNULL(втАдресаИзБазы.Улица, """") КАК Улица,
	|	ЕСТЬNULL(втАдресаИзБазы.Дом, """") КАК Дом,
	|	ЕСТЬNULL(втАдресаИзБазы.Корпус, """") КАК Корпус,
	|	ЕСТЬNULL(втАдресаИзБазы.ТипКорпуса, """") КАК ТипКорпуса,
	|	втФИО.ТипДома
	|ПОМЕСТИТЬ втАдреса
	|ИЗ
	|	втФИО КАК втФИО
	|		ЛЕВОЕ СОЕДИНЕНИЕ втАдресаИзБазы КАК втАдресаИзБазы
	|		ПО втФИО.Здание = втАдресаИзБазы.Здание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НЕ КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель = 0
	|			ТОГДА КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель / КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДоляЛС,
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет
	|ПОМЕСТИТЬ втДоли
	|ИЗ
	|	РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втАдреса.ЛицевойСчет
	|				ИЗ
	|					втАдреса КАК втАдреса)) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втАдреса.ЛицевойСчет,
	|	втАдреса.Помещение,
	|	втАдреса.Здание,
	|	втАдреса.КодДомаПоФИАС,
	|	втАдреса.Фамилия,
	|	втАдреса.Имя,
	|	втАдреса.Отчество,
	|	втАдреса.НаселенныйПункт,
	|	втАдреса.Район,
	|	втАдреса.Улица,
	|	втАдреса.Дом,
	|	втАдреса.Корпус,
	|	втАдреса.ТипКорпуса,
	|	втАдреса.Помещение.Код КАК Квартира,
	|	втАдреса.Помещение.Суффикс КАК ЛитераКвартиры,
	|	втАдреса.ТипДома,
	|	ЕСТЬNULL(втДоли.ДоляЛС, 0) * ЕСТЬNULL(КВП_ПлощадьПомещенияСрезПоследних.Площадь, 0) КАК ОбщаяПлощадь,
	|	втАдреса.КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втПлощадь
	|ИЗ
	|	втАдреса КАК втАдреса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|				&ДатаКонца,
	|				Объект В
	|						(ВЫБРАТЬ
	|							втАдреса.Помещение
	|						ИЗ
	|							втАдреса КАК втАдреса)
	|					И ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)) КАК КВП_ПлощадьПомещенияСрезПоследних
	|		ПО втАдреса.Помещение = КВП_ПлощадьПомещенияСрезПоследних.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДоли КАК втДоли
	|		ПО втАдреса.ЛицевойСчет = втДоли.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_БлагоустройствоОбъектов.Объект,
	|	КВП_БлагоустройствоОбъектов.ВидБлагоустройства,
	|	КВП_БлагоустройствоОбъектов.Значение
	|ПОМЕСТИТЬ втБлагоустройство
	|ИЗ
	|	РегистрСведений.КВП_БлагоустройствоОбъектов КАК КВП_БлагоустройствоОбъектов
	|ГДЕ
	|	(КВП_БлагоустройствоОбъектов.ВидБлагоустройства = &el_nagr
	|			ИЛИ КВП_БлагоустройствоОбъектов.ВидБлагоустройства = &gaz_kotel)
	|	И (КВП_БлагоустройствоОбъектов.Объект В
	|				(ВЫБРАТЬ
	|					втПлощадь.Здание
	|				ИЗ
	|					втПлощадь КАК втПлощадь)
	|			ИЛИ КВП_БлагоустройствоОбъектов.Объект В
	|				(ВЫБРАТЬ
	|					втПлощадь.Помещение
	|				ИЗ
	|					втПлощадь КАК втПлощадь))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втБлагоустройство.Объект,
	|	втБлагоустройство.ВидБлагоустройства,
	|	втБлагоустройство.Значение
	|ПОМЕСТИТЬ втБлагвоЗдания
	|ИЗ
	|	втБлагоустройство КАК втБлагоустройство
	|ГДЕ
	|	втБлагоустройство.Объект ССЫЛКА Справочник.КВП_Здания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втБлагоустройство.Объект,
	|	втБлагоустройство.ВидБлагоустройства,
	|	втБлагоустройство.Значение
	|ПОМЕСТИТЬ втБлагвоПомещения
	|ИЗ
	|	втБлагоустройство КАК втБлагоустройство
	|ГДЕ
	|	втБлагоустройство.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПлощадь.ЛицевойСчет КАК ЛицевойСчет,
	|	втПлощадь.Помещение,
	|	втПлощадь.Здание,
	|	втПлощадь.КодДомаПоФИАС,
	|	втПлощадь.Фамилия,
	|	втПлощадь.Имя,
	|	втПлощадь.Отчество,
	|	втПлощадь.НаселенныйПункт,
	|	втПлощадь.Район,
	|	втПлощадь.Улица,
	|	втПлощадь.Дом,
	|	втПлощадь.Корпус,
	|	втПлощадь.ТипКорпуса,
	|	втПлощадь.Квартира,
	|	втПлощадь.ЛитераКвартиры,
	|	втПлощадь.ТипДома,
	|	втПлощадь.ОбщаяПлощадь,
	|	втПлощадь.КоличествоЗарегистрированных,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втБлагвоПомещения.ВидБлагоустройства = &el_nagr
	|					И втБлагвоПомещения.Значение В (ИСТИНА, ""Есть"", ""Да"", ""Имеется"", ""Присутствует"")
	|				ТОГДА ИСТИНА
	|			КОГДА втБлагвоЗдания.ВидБлагоустройства = &el_nagr
	|					И втБлагвоЗдания.Значение В (ИСТИНА, ""Есть"", ""Да"", ""Имеется"", ""Присутствует"")
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК НаличиеЭлектрическогоНагревателя,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втБлагвоПомещения.ВидБлагоустройства = &gaz_kotel
	|					И втБлагвоПомещения.Значение В (ИСТИНА, ""Есть"", ""Да"", ""Имеется"", ""Присутствует"")
	|				ТОГДА ИСТИНА
	|			КОГДА втБлагвоЗдания.ВидБлагоустройства = &gaz_kotel
	|					И втБлагвоЗдания.Значение В (ИСТИНА, ""Есть"", ""Да"", ""Имеется"", ""Присутствует"")
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК НаличиеГазовогоКотла
	|ПОМЕСТИТЬ втНагревательКотел
	|ИЗ
	|	втПлощадь КАК втПлощадь
	|		ЛЕВОЕ СОЕДИНЕНИЕ втБлагвоЗдания КАК втБлагвоЗдания
	|		ПО втПлощадь.Здание = втБлагвоЗдания.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ втБлагвоПомещения КАК втБлагвоПомещения
	|		ПО втПлощадь.Помещение = втБлагвоПомещения.Объект
	|
	|СГРУППИРОВАТЬ ПО
	|	втПлощадь.ЛицевойСчет,
	|	втПлощадь.Помещение,
	|	втПлощадь.Здание,
	|	втПлощадь.КодДомаПоФИАС,
	|	втПлощадь.Фамилия,
	|	втПлощадь.Имя,
	|	втПлощадь.Отчество,
	|	втПлощадь.НаселенныйПункт,
	|	втПлощадь.Район,
	|	втПлощадь.Улица,
	|	втПлощадь.Дом,
	|	втПлощадь.Корпус,
	|	втПлощадь.ТипКорпуса,
	|	втПлощадь.ЛитераКвартиры,
	|	втПлощадь.Квартира,
	|	втПлощадь.ОбщаяПлощадь,
	|	втПлощадь.КоличествоЗарегистрированных,
	|	втПлощадь.ТипДома
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНагревательКотел.ЛицевойСчет,
	|	втНагревательКотел.Здание,
	|	втНагревательКотел.КодДомаПоФИАС,
	|	втНагревательКотел.Фамилия,
	|	втНагревательКотел.Имя,
	|	втНагревательКотел.Отчество,
	|	втНагревательКотел.НаселенныйПункт,
	|	втНагревательКотел.Район,
	|	втНагревательКотел.Улица,
	|	втНагревательКотел.Дом,
	|	втНагревательКотел.Корпус,
	|	втНагревательКотел.ТипКорпуса,
	|	втНагревательКотел.Квартира,
	|	втНагревательКотел.ЛитераКвартиры,
	|	втНагревательКотел.ТипДома,
	|	втНагревательКотел.ОбщаяПлощадь,
	|	втНагревательКотел.КоличествоЗарегистрированных,
	|	втНагревательКотел.НаличиеЭлектрическогоНагревателя,
	|	втНагревательКотел.НаличиеГазовогоКотла,
	|	втСальдо.Услуга,
	|	втСальдо.ОКЕИ,
	|	втСальдо.Тариф,
	|	втСальдо.НачисленияСПерерасчетами,
	|	втСальдо.НачисленияСПерерасчетамиИЛьготами,
	|	втСальдо.СуммаЛьготы,
	|	втСальдо.СуммаДолга,
	|	втСальдо.ОбъемПоНормативу
	|ПОМЕСТИТЬ втСоборИзБазы
	|ИЗ
	|	втНагревательКотел КАК втНагревательКотел
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСальдо КАК втСальдо
	|		ПО втНагревательКотел.ЛицевойСчет = втСальдо.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Районы.code_area,
	|	Районы.area_name,
	|	Районы.owner
	|ПОМЕСТИТЬ втКодРайоны
	|ИЗ
	|	&Районы КАК Районы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСоборИзБазы.ЛицевойСчет,
	|	втСоборИзБазы.Здание,
	|	втСоборИзБазы.КодДомаПоФИАС,
	|	втСоборИзБазы.Фамилия,
	|	втСоборИзБазы.Имя,
	|	втСоборИзБазы.Отчество,
	|	втСоборИзБазы.НаселенныйПункт,
	|	втСоборИзБазы.Улица,
	|	втСоборИзБазы.Дом,
	|	втСоборИзБазы.Корпус,
	|	втСоборИзБазы.ТипКорпуса,
	|	втСоборИзБазы.Квартира,
	|	втСоборИзБазы.ЛитераКвартиры,
	|	втСоборИзБазы.ТипДома,
	|	втСоборИзБазы.ОбщаяПлощадь,
	|	втСоборИзБазы.КоличествоЗарегистрированных,
	|	втСоборИзБазы.НаличиеЭлектрическогоНагревателя,
	|	втСоборИзБазы.НаличиеГазовогоКотла,
	|	втСоборИзБазы.Услуга,
	|	втСоборИзБазы.ОКЕИ,
	|	втСоборИзБазы.Тариф,
	|	втСоборИзБазы.НачисленияСПерерасчетами,
	|	втСоборИзБазы.НачисленияСПерерасчетамиИЛьготами,
	|	втСоборИзБазы.СуммаЛьготы,
	|	втСоборИзБазы.СуммаДолга,
	|	втСоборИзБазы.ОбъемПоНормативу,
	|	ЕСТЬNULL(втКодРайоны.code_area, 0) КАК code_area,
	|	ЕСТЬNULL(втКодРайоны.owner, 0) КАК owner
	|ПОМЕСТИТЬ втСоборРайоны
	|ИЗ
	|	втСоборИзБазы КАК втСоборИзБазы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКодРайоны КАК втКодРайоны
	|		ПО втСоборИзБазы.Район = втКодРайоны.area_name
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НаселенныеПункты.code_area,
	|	НаселенныеПункты.code_place,
	|	НаселенныеПункты.place_name
	|ПОМЕСТИТЬ втКодНаселенныеПункты
	|ИЗ
	|	&НаселенныеПункты КАК НаселенныеПункты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСоборРайоны.ЛицевойСчет,
	|	втСоборРайоны.Здание,
	|	втСоборРайоны.КодДомаПоФИАС,
	|	втСоборРайоны.Фамилия,
	|	втСоборРайоны.Имя,
	|	втСоборРайоны.Отчество,
	|	втСоборРайоны.Улица,
	|	втСоборРайоны.Дом,
	|	втСоборРайоны.Корпус,
	|	втСоборРайоны.ТипКорпуса,
	|	втСоборРайоны.Квартира,
	|	втСоборРайоны.ЛитераКвартиры,
	|	втСоборРайоны.ТипДома,
	|	втСоборРайоны.ОбщаяПлощадь,
	|	втСоборРайоны.КоличествоЗарегистрированных,
	|	втСоборРайоны.НаличиеЭлектрическогоНагревателя,
	|	втСоборРайоны.НаличиеГазовогоКотла,
	|	втСоборРайоны.Услуга,
	|	втСоборРайоны.ОКЕИ,
	|	втСоборРайоны.Тариф,
	|	втСоборРайоны.НачисленияСПерерасчетами,
	|	втСоборРайоны.НачисленияСПерерасчетамиИЛьготами,
	|	втСоборРайоны.СуммаЛьготы,
	|	втСоборРайоны.СуммаДолга,
	|	втСоборРайоны.ОбъемПоНормативу,
	|	втСоборРайоны.code_area,
	|	втСоборРайоны.owner,
	|	ЕСТЬNULL(втКодНаселенныеПункты.code_place, 0) КАК code_place
	|ПОМЕСТИТЬ втСоборНасПункты
	|ИЗ
	|	втСоборРайоны КАК втСоборРайоны
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКодНаселенныеПункты КАК втКодНаселенныеПункты
	|		ПО втСоборРайоны.НаселенныйПункт = втКодНаселенныеПункты.place_name
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КодУлицы.code_area,
	|	КодУлицы.code_place,
	|	КодУлицы.code_stree,
	|	КодУлицы.street_nam
	|ПОМЕСТИТЬ втКодУлицы
	|ИЗ
	|	&КодУлицы КАК КодУлицы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСоборНасПункты.ЛицевойСчет,
	|	втСоборНасПункты.Здание,
	|	втСоборНасПункты.КодДомаПоФИАС,
	|	втСоборНасПункты.Фамилия,
	|	втСоборНасПункты.Имя,
	|	втСоборНасПункты.Отчество,
	|	втСоборНасПункты.Дом,
	|	втСоборНасПункты.Корпус,
	|	втСоборНасПункты.ТипКорпуса,
	|	втСоборНасПункты.Квартира,
	|	втСоборНасПункты.ЛитераКвартиры,
	|	втСоборНасПункты.ТипДома,
	|	втСоборНасПункты.ОбщаяПлощадь,
	|	втСоборНасПункты.КоличествоЗарегистрированных,
	|	втСоборНасПункты.НаличиеЭлектрическогоНагревателя,
	|	втСоборНасПункты.НаличиеГазовогоКотла,
	|	втСоборНасПункты.Услуга,
	|	втСоборНасПункты.ОКЕИ,
	|	втСоборНасПункты.Тариф,
	|	втСоборНасПункты.НачисленияСПерерасчетами,
	|	втСоборНасПункты.НачисленияСПерерасчетамиИЛьготами,
	|	втСоборНасПункты.СуммаЛьготы,
	|	втСоборНасПункты.СуммаДолга,
	|	втСоборНасПункты.ОбъемПоНормативу,
	|	втСоборНасПункты.code_area,
	|	втСоборНасПункты.owner,
	|	втСоборНасПункты.code_place,
	|	ЕСТЬNULL(втКодУлицы.code_stree, 0) КАК code_stree
	|ПОМЕСТИТЬ втСоборУлицы
	|ИЗ
	|	втСоборНасПункты КАК втСоборНасПункты
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКодУлицы КАК втКодУлицы
	|		ПО втСоборНасПункты.Улица = втКодУлицы.street_nam
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительныеСведения.Объект,
	|	ДополнительныеСведения.Значение КАК urblag
	|ПОМЕСТИТЬ втКодКатегоряБлагоустройства
	|ИЗ
	|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	|ГДЕ
	|	ДополнительныеСведения.Объект В
	|			(ВЫБРАТЬ
	|				втНагревательКотел.Здание
	|			ИЗ
	|				втНагревательКотел КАК втНагревательКотел)
	|	И ДополнительныеСведения.Свойство = &КатегорияБлагоустройства
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСоборУлицы.ЛицевойСчет,
	|	втСоборУлицы.Фамилия,
	|	втСоборУлицы.Имя,
	|	втСоборУлицы.Отчество,
	|	втСоборУлицы.Дом,
	|	втСоборУлицы.Корпус,
	|	втСоборУлицы.ТипКорпуса,
	|	втСоборУлицы.КодДомаПоФИАС,
	|	втСоборУлицы.Квартира,
	|	втСоборУлицы.ЛитераКвартиры,
	|	втСоборУлицы.ТипДома,
	|	втСоборУлицы.ОбщаяПлощадь,
	|	втСоборУлицы.КоличествоЗарегистрированных,
	|	втСоборУлицы.НаличиеЭлектрическогоНагревателя,
	|	втСоборУлицы.НаличиеГазовогоКотла,
	|	втСоборУлицы.Услуга,
	|	втСоборУлицы.ОКЕИ,
	|	втСоборУлицы.Тариф,
	|	втСоборУлицы.НачисленияСПерерасчетами,
	|	втСоборУлицы.НачисленияСПерерасчетамиИЛьготами,
	|	втСоборУлицы.СуммаЛьготы,
	|	втСоборУлицы.СуммаДолга,
	|	втСоборУлицы.ОбъемПоНормативу,
	|	втСоборУлицы.code_area,
	|	втСоборУлицы.owner,
	|	втСоборУлицы.code_place,
	|	втСоборУлицы.code_stree,
	|	ЕСТЬNULL(втКодКатегоряБлагоустройства.urblag, 0) КАК urblag
	|ПОМЕСТИТЬ втСоборБлагоустройство
	|ИЗ
	|	втСоборУлицы КАК втСоборУлицы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКодКатегоряБлагоустройства КАК втКодКатегоряБлагоустройства
	|		ПО втСоборУлицы.Здание = втКодКатегоряБлагоустройства.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЖКУ_ВБазе.УслугаВБазе,
	|	ЖКУ_ВБазе.КодУслугиВОСЗН,
	|	ЖКУ_ВБазе.УслугаВОСЗН
	|ПОМЕСТИТЬ втКодЖКУ_ВБазе
	|ИЗ
	|	&ЖКУ_ВБазе КАК ЖКУ_ВБазе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЖКУ_Отопление.Услуга
	|ПОМЕСТИТЬ втЖКУ_Отопление
	|ИЗ
	|	&ЖКУ_Отопление КАК ЖКУ_Отопление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга КАК Услуга,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления
	|ПОМЕСТИТЬ втНормыПотребленияУслугЛССрезПоследних
	|ИЗ
	|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(
	|			&ДатаКонца,
	|			(ЛицевойСчет, Услуга) В
	|				(ВЫБРАТЬ
	|					втСоборБлагоустройство.ЛицевойСчет,
	|					втСоборБлагоустройство.Услуга
	|				ИЗ
	|					втСоборБлагоустройство КАК втСоборБлагоустройство)) КАК КВП_НормыПотребленияУслугЛССрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСоборБлагоустройство.ЛицевойСчет КАК ЛицевойСчет,
	|	втСоборБлагоустройство.code_area КАК kod_r,
	|	втСоборБлагоустройство.owner КАК kod_pr,
	|	втСоборБлагоустройство.code_place КАК kod_np,
	|	втСоборБлагоустройство.code_stree КАК st,
	|	втСоборБлагоустройство.Дом КАК dom,
	|	ВЫБОР
	|		КОГДА втСоборБлагоустройство.ТипКорпуса = ""Литера""
	|			ТОГДА втСоборБлагоустройство.Корпус
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК doml,
	|	ВЫБОР
	|		КОГДА втСоборБлагоустройство.ТипКорпуса = ""Корпус""
	|			ТОГДА втСоборБлагоустройство.Корпус
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК domkor,
	|	ВЫБОР
	|		КОГДА втСоборБлагоустройство.ТипКорпуса = ""Строение""
	|			ТОГДА втСоборБлагоустройство.Корпус
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК domstr,
	|	втСоборБлагоустройство.КодДомаПоФИАС КАК koddom,
	|	втСоборБлагоустройство.Квартира КАК kv,
	|	втСоборБлагоустройство.ЛитераКвартиры КАК kvl,
	|	втСоборБлагоустройство.Фамилия КАК fm,
	|	втСоборБлагоустройство.Имя КАК im,
	|	втСоборБлагоустройство.Отчество КАК ot,
	|	втСоборБлагоустройство.urblag,
	|	втСоборБлагоустройство.ТипДома КАК Tip_dom,
	|	втСоборБлагоустройство.ОбщаяПлощадь КАК so,
	|	втСоборБлагоустройство.НаличиеЭлектрическогоНагревателя КАК el_nagr,
	|	втСоборБлагоустройство.КоличествоЗарегистрированных КАК kol,
	|	втСоборБлагоустройство.НаличиеГазовогоКотла КАК gaz_kotel,
	|	ЕСТЬNULL(втКодЖКУ_ВБазе.КодУслугиВОСЗН, 0) КАК usluga,
	|	втСоборБлагоустройство.СуммаДолга КАК dolgsum,
	|	втСоборБлагоустройство.Тариф КАК tarif,
	|	втСоборБлагоустройство.ОКЕИ КАК kodei,
	|	втСоборБлагоустройство.НачисленияСПерерасчетами КАК sump,
	|	втСоборБлагоустройство.НачисленияСПерерасчетамиИЛьготами КАК sumn,
	|	втСоборБлагоустройство.СуммаЛьготы КАК suml,
	|	втСоборБлагоустройство.Услуга КАК Услуга,
	|	ВЫБОР
	|		КОГДА НЕ втЖКУ_Отопление.Услуга ЕСТЬ NULL
	|			ТОГДА втСоборБлагоустройство.ОбъемПоНормативу
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК norm_otop,
	|	ЕСТЬNULL(втНормыПотребленияУслугЛССрезПоследних.НормаПотребления, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)) КАК НормаПотребления,
	|	ВЫБОР
	|		КОГДА НЕ втНормыПотребленияУслугЛССрезПоследних.НормаПотребления ЕСТЬ NULL 
	|				И втНормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки = ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой)
	|			ТОГДА втНормыПотребленияУслугЛССрезПоследних.НормаПотребления.Размер
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РазмерНормы,
	|	ВЫБОР
	|		КОГДА НЕ втНормыПотребленияУслугЛССрезПоследних.НормаПотребления ЕСТЬ NULL 
	|				И НЕ втНормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки = ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоСложнаяНорма
	|ПОМЕСТИТЬ втИтоговаяТаблицаБезДанныхОЗадолженности
	|ИЗ
	|	втСоборБлагоустройство КАК втСоборБлагоустройство
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКодЖКУ_ВБазе КАК втКодЖКУ_ВБазе
	|		ПО втСоборБлагоустройство.Услуга = втКодЖКУ_ВБазе.УслугаВБазе
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЖКУ_Отопление КАК втЖКУ_Отопление
	|		ПО втСоборБлагоустройство.Услуга = втЖКУ_Отопление.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНормыПотребленияУслугЛССрезПоследних КАК втНормыПотребленияУслугЛССрезПоследних
	|		ПО втСоборБлагоустройство.ЛицевойСчет = втНормыПотребленияУслугЛССрезПоследних.ЛицевойСчет
	|			И втСоборБлагоустройство.Услуга = втНормыПотребленияУслугЛССрезПоследних.Услуга";
	
	Запрос.Выполнить();
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет,
	|	МАКСИМУМ(КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период) КАК Период
	|ПОМЕСТИТЬ втПериодыЗадолженности
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(
	|			,
	|			&ДатаОпределенияЗадолженности,
	|			Регистратор,
	|			Движения,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втИтоговаяТаблицаБезДанныхОЗадолженности.ЛицевойСчет
	|					ИЗ
	|						втИтоговаяТаблицаБезДанныхОЗадолженности КАК втИтоговаяТаблицаБезДанныхОЗадолженности
	|					ГДЕ
	|						втИтоговаяТаблицаБезДанныхОЗадолженности.dolgsum > 0)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты
	|ГДЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период < &ДатаОпределенияЗадолженности
	|	И КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияКонечныйОстаток <= 0
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет,
	|	МИНИМУМ(КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период) КАК Период
	|ПОМЕСТИТЬ втПериодыНачалаНачислений
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(
	|			,
	|			&ДатаНачала,
	|			Регистратор,
	|			Движения,
	|			Организация = &Организация
	|				И (ЛицевойСчет) В
	|					(ВЫБРАТЬ
	|						втИтоговаяТаблицаБезДанныхОЗадолженности.ЛицевойСчет
	|					ИЗ
	|						втИтоговаяТаблицаБезДанныхОЗадолженности КАК втИтоговаяТаблицаБезДанныхОЗадолженности
	|					ГДЕ
	|						втИтоговаяТаблицаБезДанныхОЗадолженности.dolgsum > 0)
	|				И НЕ ЛицевойСчет В
	|						(ВЫБРАТЬ
	|							втПериодыЗадолженности.ЛицевойСчет
	|						ИЗ
	|							втПериодыЗадолженности КАК втПериодыЗадолженности)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты
	|ГДЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период < &ДатаНачала
	|	И КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияКонечныйОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет";
	
	Запрос.Выполнить();
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_ИсторияРаботыСДолжникамиСрезПоследних.Регистратор КАК СудебноеСоглашение,
	|	УПЖКХ_ИсторияРаботыСДолжникамиСрезПоследних.Должник КАК ЛицевойСчет
	|ПОМЕСТИТЬ втСудебныеСоглашения
	|ИЗ
	|	РегистрСведений.УПЖКХ_ИсторияРаботыСДолжниками.СрезПоследних(
	|			&ДатаОпределенияЗадолженности,
	|			Организация = &Организация
	|				И Должник В
	|					(ВЫБРАТЬ
	|						втИтоговаяТаблицаБезДанныхОЗадолженности.ЛицевойСчет
	|					ИЗ
	|						втИтоговаяТаблицаБезДанныхОЗадолженности КАК втИтоговаяТаблицаБезДанныхОЗадолженности)) КАК УПЖКХ_ИсторияРаботыСДолжникамиСрезПоследних
	|ГДЕ
	|	ДОБАВИТЬКДАТЕ(УПЖКХ_ИсторияРаботыСДолжникамиСрезПоследних.Регистратор.ДатаНачалаПлатежей, МЕСЯЦ, УПЖКХ_ИсторияРаботыСДолжникамиСрезПоследних.Регистратор.МесяцевПоСоглашению) > &ДатаОпределенияЗадолженности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ГрафикиПлатежейПоЛС.Регистратор КАК СудебноеСоглашение,
	|	КВП_ГрафикиПлатежейПоЛС.ЛицевойСчет,
	|	КВП_ГрафикиПлатежейПоЛС.ДатаПлатежа,
	|	СУММА(КВП_ГрафикиПлатежейПоЛС.Сумма) КАК Сумма
	|ПОМЕСТИТЬ втГрафикиПлатежей
	|ИЗ
	|	РегистрСведений.КВП_ГрафикиПлатежейПоЛС КАК КВП_ГрафикиПлатежейПоЛС
	|ГДЕ
	|	(КВП_ГрафикиПлатежейПоЛС.Регистратор, КВП_ГрафикиПлатежейПоЛС.ЛицевойСчет) В
	|			(ВЫБРАТЬ
	|				втСудебныеСоглашения.СудебноеСоглашение,
	|				втСудебныеСоглашения.ЛицевойСчет
	|			ИЗ
	|				втСудебныеСоглашения КАК втСудебныеСоглашения)
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ГрафикиПлатежейПоЛС.Регистратор,
	|	КВП_ГрафикиПлатежейПоЛС.ЛицевойСчет,
	|	КВП_ГрафикиПлатежейПоЛС.ДатаПлатежа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГрафикиПлатежей.СудебноеСоглашение,
	|	втГрафикиПлатежей.ЛицевойСчет,
	|	СУММА(втГрафикиПлатежей.Сумма) КАК СуммаПлановая,
	|	СУММА(ЕСТЬNULL(КВП_РегистрацияОплатыЛицевыеСчета.СуммаПоГрафику, 0)) КАК СуммаФактическая
	|ПОМЕСТИТЬ втФактическиеСуммыОплат
	|ИЗ
	|	втГрафикиПлатежей КАК втГрафикиПлатежей
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КВП_РегистрацияОплаты.ЛицевыеСчета КАК КВП_РегистрацияОплатыЛицевыеСчета
	|		ПО втГрафикиПлатежей.ЛицевойСчет = КВП_РегистрацияОплатыЛицевыеСчета.Объект
	|			И (НАЧАЛОПЕРИОДА(втГрафикиПлатежей.ДатаПлатежа, МЕСЯЦ) = НАЧАЛОПЕРИОДА(КВП_РегистрацияОплатыЛицевыеСчета.Ссылка.Дата, МЕСЯЦ))
	|
	|СГРУППИРОВАТЬ ПО
	|	втГрафикиПлатежей.СудебноеСоглашение,
	|	втГрафикиПлатежей.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСудебныеСоглашения.ЛицевойСчет,
	|	втСудебныеСоглашения.СудебноеСоглашение,
	|	ЕСТЬNULL(втФактическиеСуммыОплат.СуммаПлановая, 0) КАК СуммаПлановая,
	|	ЕСТЬNULL(втФактическиеСуммыОплат.СуммаФактическая, 0) КАК СуммаФактическая
	|ПОМЕСТИТЬ втСтруктураЗадолженности
	|ИЗ
	|	втСудебныеСоглашения КАК втСудебныеСоглашения
	|		ЛЕВОЕ СОЕДИНЕНИЕ втФактическиеСуммыОплат КАК втФактическиеСуммыОплат
	|		ПО втСудебныеСоглашения.ЛицевойСчет = втФактическиеСуммыОплат.ЛицевойСчет
	|			И втСудебныеСоглашения.СудебноеСоглашение = втФактическиеСуммыОплат.СудебноеСоглашение";
	
	Запрос.Выполнить();
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	втИтоговаяТаблицаБезДанныхОЗадолженности.ЛицевойСчет,
	|	ВЫРАЗИТЬ("""" КАК СТРОКА(15)) КАК ls,
	|	втИтоговаяТаблицаБезДанныхОЗадолженности.kod_r,
	|	втИтоговаяТаблицаБезДанныхОЗадолженности.kod_pr,
	|	втИтоговаяТаблицаБезДанныхОЗадолженности.kod_np,
	|	втИтоговаяТаблицаБезДанныхОЗадолженности.st,
	|	втИтоговаяТаблицаБезДанныхОЗадолженности.dom,
	|	втИтоговаяТаблицаБезДанныхОЗадолженности.doml,
	|	втИтоговаяТаблицаБезДанныхОЗадолженности.domkor,
	|	втИтоговаяТаблицаБезДанныхОЗадолженности.domstr,
	|	втИтоговаяТаблицаБезДанныхОЗадолженности.koddom,
	|	втИтоговаяТаблицаБезДанныхОЗадолженности.kv,
	|	втИтоговаяТаблицаБезДанныхОЗадолженности.kvl,
	|	втИтоговаяТаблицаБезДанныхОЗадолженности.fm,
	|	втИтоговаяТаблицаБезДанныхОЗадолженности.im,
	|	втИтоговаяТаблицаБезДанныхОЗадолженности.ot,
	|	втИтоговаяТаблицаБезДанныхОЗадолженности.urblag,
	|	втИтоговаяТаблицаБезДанныхОЗадолженности.Tip_dom,
	|	втИтоговаяТаблицаБезДанныхОЗадолженности.so,
	|	втИтоговаяТаблицаБезДанныхОЗадолженности.el_nagr,
	|	втИтоговаяТаблицаБезДанныхОЗадолженности.kol,
	|	втИтоговаяТаблицаБезДанныхОЗадолженности.gaz_kotel,
	|	втИтоговаяТаблицаБезДанныхОЗадолженности.usluga,
	|	втИтоговаяТаблицаБезДанныхОЗадолженности.dolgsum,
	|	втИтоговаяТаблицаБезДанныхОЗадолженности.tarif,
	|	втИтоговаяТаблицаБезДанныхОЗадолженности.kodei,
	|	втИтоговаяТаблицаБезДанныхОЗадолженности.sump,
	|	втИтоговаяТаблицаБезДанныхОЗадолженности.sumn,
	|	втИтоговаяТаблицаБезДанныхОЗадолженности.suml,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втПериодыЗадолженности.Период, ЕСТЬNULL(втПериодыНачалаНачислений.Период, ДАТАВРЕМЯ(1, 1, 1))) = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА втПериодыЗадолженности.Период ЕСТЬ NULL
	|					ТОГДА РАЗНОСТЬДАТ(втПериодыНачалаНачислений.Период, &ДатаНачала, МЕСЯЦ)
	|				ИНАЧЕ ВЫБОР
	|						КОГДА втПериодыЗадолженности.Период > &ДатаНачала
	|							ТОГДА 0
	|						ИНАЧЕ РАЗНОСТЬДАТ(втПериодыЗадолженности.Период, &ДатаНачала, МЕСЯЦ)
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК dolgmes,
	|	ВЫБОР
	|		КОГДА втСтруктураЗадолженности.СудебноеСоглашение ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК dolgs,
	|	втИтоговаяТаблицаБезДанныхОЗадолженности.Услуга,
	|	1 КАК type_zap,
	|	0 КАК norm,
	|	втИтоговаяТаблицаБезДанныхОЗадолженности.norm_otop,
	|	втИтоговаяТаблицаБезДанныхОЗадолженности.НормаПотребления,
	|	втИтоговаяТаблицаБезДанныхОЗадолженности.РазмерНормы,
	|	втИтоговаяТаблицаБезДанныхОЗадолженности.ЭтоСложнаяНорма,
	|	&ДатаКонца КАК date_form,
	|	&КодОрганизации КАК kod_o,
	|	&КодОрганизации КАК kod_zeu
	|ИЗ
	|	втИтоговаяТаблицаБезДанныхОЗадолженности КАК втИтоговаяТаблицаБезДанныхОЗадолженности
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПериодыЗадолженности КАК втПериодыЗадолженности
	|		ПО втИтоговаяТаблицаБезДанныхОЗадолженности.ЛицевойСчет = втПериодыЗадолженности.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПериодыНачалаНачислений КАК втПериодыНачалаНачислений
	|		ПО втИтоговаяТаблицаБезДанныхОЗадолженности.ЛицевойСчет = втПериодыНачалаНачислений.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСтруктураЗадолженности КАК втСтруктураЗадолженности
	|		ПО втИтоговаяТаблицаБезДанныхОЗадолженности.ЛицевойСчет = втСтруктураЗадолженности.ЛицевойСчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	втИтоговаяТаблицаБезДанныхОЗадолженности.ЛицевойСчет,
	|	втИтоговаяТаблицаБезДанныхОЗадолженности.Услуга";
	
	ТаблицаДанныхФайла = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаДанных ИЗ ТаблицаДанныхФайла Цикл
		СтрокаДанных.ls = ПодготовитьНомерЛСДляВывода(СтрокаДанных.ЛицевойСчет.Наименование);
		Если ЗначениеЗаполнено(СтрокаДанных.НормаПотребления) Тогда
			Если СтрокаДанных.ЭтоСложнаяНорма Тогда
				СтрокаДанных.norm = ПолучитьНормуПотребления(СтрокаДанных.ЛицевойСчет, СтрокаДанных.Услуга, КонецМесяца(Период));
			Иначе
				СтрокаДанных.norm = СтрокаДанных.РазмерНормы;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЫГРУЗКИ ДЛЯ ИРКУТСКОЙ ОБЛАСТИ

//#Область ИркутскаяОбласть

//// Формирует таблицу всех выгружаемых данных.
////
//Процедура СформироватьТаблицуДанныхИркутскаяОбласть(ТаблицаДанныхФайла, ПараметрыВыгрузки) Экспорт
//	
//	// Собственно заполнение таблицы.
//	ТаблицаСведений = СформироватьТаблицуНачисленийИркутскаяОбласть(ТаблицаДанныхФайла, ПараметрыВыгрузки);
//	
//	ДополнитьТаблицуНачисленийИркутскаяОбластьИтоговую(ТаблицаСведений);
//	
//	Если ТаблицаСведений.Количество() > 0 Тогда
//		
//		ТаблицаСведений.Колонки.Добавить("PERIOD_MONTH", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(2));
//		ТаблицаСведений.Колонки.Добавить("PERIOD_YEAR",  УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(4));
//		ТаблицаСведений.ЗаполнитьЗначения(Строка(Формат(Период, "ДФ = MM")),   "PERIOD_MONTH");
//		ТаблицаСведений.ЗаполнитьЗначения(Строка(Формат(Период, "ДФ = yyyy")), "PERIOD_YEAR");
//		
//		// Получим количества месяцев задолженности.
//		СтруктураДанныхДляЗапроса = Новый Структура("Организация");
//		СтруктураДанныхДляЗапроса.Организация = Организация;
//		
//		СписокЛС = ТаблицаСведений.ВыгрузитьКолонку("ЛицевойСчет");
//		
//		ТаблицаДолжников = УПЖКХ_РаботаСДолжниками.ПолучитьТаблицуДолжников(КонецМесяца(Период), СписокЛС, СтруктураДанныхДляЗапроса);
//		
//		ДеревоНачислений = СкомпоноватьТаблицуНачисленийИркутскаяОбласть(ТаблицаСведений, ТаблицаДолжников, ПараметрыВыгрузки);
//		
//		Для Каждого СтрокаДерева Из ДеревоНачислений.Строки Цикл
//			
//			КоллекцияСтрокЛС = СтрокаДерева.Строки;
//			
//			НоваяСтрока = Неопределено;
//			
//			Для Каждого СтрокаДанных ИЗ КоллекцияСтрокЛС Цикл
//				
//				ИУ = СтрокаДанных.Идентификатор;
//				
//				Если НоваяСтрока = Неопределено Тогда
//					НоваяСтрока = ТаблицаДанныхФайла.Добавить();
//					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
//					НоваяСтрока.DBT_MONT = СтрокаДанных.КоличествоМесяцевЗадолженности;
//				КонецЕсли;
//				
//				Если ИУ = 1 Тогда
//					НоваяСтрока["ACRUAL1"]  = СтрокаДанных.СуммаНачисления;
//					НоваяСтрока["TARIFF1"]  = СтрокаДанных.Тариф;
//				КонецЕсли;
//				
//				Если ИУ = 2 Тогда
//					НоваяСтрока["ACRUAL2"]  = СтрокаДанных.СуммаОплаты;
//					НоваяСтрока["TARIFF2"]  = СтрокаДанных.Тариф;
//					НоваяСтрока["NORM2"]    = СтрокаДанных.НормаПотребления;
//					НоваяСтрока["ACRUAL3"]  = СтрокаДанных.СуммаНачисленияОДН;
//					НоваяСтрока["ACRUAL13"] = СтрокаДанных.СуммаНачисления;
//				КонецЕсли;
//				
//				Если ИУ = 3 Тогда
//					НоваяСтрока["ACRUAL4"] = СтрокаДанных.СуммаНачисления;
//					НоваяСтрока["NORM4"]   = СтрокаДанных.НормаПотребления;
//					НоваяСтрока["TARIFF4"] = СтрокаДанных.Тариф;
//				КонецЕсли;
//				
//				Если ИУ = 4 Тогда
//					НоваяСтрока["ACRUAL5"] = СтрокаДанных.СуммаНачисления;
//				КонецЕсли;
//				
//				Если ИУ = 5 Тогда
//					НоваяСтрока["ACRUAL6"] = СтрокаДанных.СуммаНачисления;
//					НоваяСтрока["NORM6"]   = СтрокаДанных.НормаПотребления;
//					НоваяСтрока["TARIFF6"] = СтрокаДанных.Тариф;
//					НоваяСтрока["ACRUAL7"] = СтрокаДанных.СуммаНачисленияОДН;
//				КонецЕсли;
//				
//				Если ИУ = 6 Тогда
//					НоваяСтрока["TARIFF8"] = СтрокаДанных.Тариф;
//					НоваяСтрока["ACRUAL8"] = СтрокаДанных.СуммаНачисления;
//					НоваяСтрока["NORM8"]   = СтрокаДанных.НормаПотребления;
//				КонецЕсли;
//				
//				Если ИУ = 9 Тогда
//					НоваяСтрока["ACRUAL11"] = СтрокаДанных.СуммаНачисления;
//					НоваяСтрока["TARIFF11"] = СтрокаДанных.Тариф;
//				КонецЕсли;
//				
//				Если ИУ = 10 Тогда
//					НоваяСтрока["TARIFF12"] = СтрокаДанных.Тариф;
//					НоваяСтрока["NORM12"]   = СтрокаДанных.НормаПотребления;
//				КонецЕсли;
//				
//				Если ИУ = 7 ИЛИ ИУ = 8 Тогда
//					
//					НоваяСтрока["ACRUAL10"] = НоваяСтрока["ACRUAL10"] + СтрокаДанных.СуммаНачисленияОДН;
//					НоваяСтрока["ACRUAL9"]  = НоваяСтрока["ACRUAL9"] + СтрокаДанных.СуммаНачисления;
//					
//					Если ИУ = 7 Тогда
//						НоваяСтрока["NORM9_KUB"]   = СтрокаДанных.НормаПотребления;
//						НоваяСтрока["TARIFF9_KUB"] = СтрокаДанных.Тариф;
//					КонецЕсли;
//					
//					Если ИУ = 8 Тогда
//						НоваяСтрока["NORM9_GKAL"]   = СтрокаДанных.НормаПотребления;
//						НоваяСтрока["TARIFF9_GKAL"] = СтрокаДанных.Тариф;
//					КонецЕсли;
//					
//				КонецЕсли;
//				
//			КонецЦикла;
//			
//		КонецЦикла;
//	КонецЕсли;
//	
//КонецПроцедуры

//// Возвращает таблицу данных с начислениями и необходимыми данными.
////
//Функция СформироватьТаблицуНачисленийИркутскаяОбласть(ТаблицаДанныхФайла, ПараметрыВыгрузки)
//	
//	Запрос = Новый Запрос;
//	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
//	
//	Запрос.УстановитьПараметр("ДатаНачала",                           НачалоМесяца(Период));
//	Запрос.УстановитьПараметр("ДатаКонца",                            КонецМесяца(Период));
//	Запрос.УстановитьПараметр("Организация",                          Организация);
//	Запрос.УстановитьПараметр("ВидБлагоустройства",                   ПараметрыВыгрузки.Бойлер);
//	Запрос.УстановитьПараметр("ЖКУ_ВБазе",                            ИркутскаяОбласть_ЖКУ_ВБазе.Выгрузить());
//	Запрос.УстановитьПараметр("ДатаОпределенияЗадолженности",         ДатаСрокОплаты(КонецМесяца(Период) + 1));
//	Запрос.УстановитьПараметр("УказыватьКоличествоПрожИЗарегЧислами", Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Получить());
//	
//	СпособРасчетаТарифа = ПараметрыВыгрузки.СпособРасчетаТарифа;
//	
//	Если СпособРасчетаТарифа = "максимальный" Тогда
//		Способ = "МАКСИМУМ";
//	ИначеЕсли СпособРасчетаТарифа = "минимальный" Тогда
//		Способ = "МИНИМУМ";
//	ИначеЕсли СпособРасчетаТарифа = "средний" Тогда
//		Способ = "СРЕДНЕЕ";
//	ИначеЕсли СпособРасчетаТарифа = "суммарный" Тогда
//		Способ = "СУММА";
//	Иначе
//		Способ = "СРЕДНЕЕ";
//	КонецЕсли;
//	
//	втЛицевыеСчетаЛьготников =
//	"ВЫБРАТЬ
//	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет КАК ЛицевойСчет
//	|ПОМЕСТИТЬ втЛицевыеСчетаОрганизации
//	|ИЗ
//	|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(&ДатаКонца, Организация = &Организация) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
//	|	КВП_ЛицевыеСчетаСрезПоследних.Объект КАК Помещение,
//	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Владелец КАК Здание" + Символы.ПС;
//	
//	втЛицевыеСчетаЛьготников = втЛицевыеСчетаЛьготников + ?(ПараметрыВыгрузки.ВыводитьЛьготников, "ПОМЕСТИТЬ втДействующиеЛС", "ПОМЕСТИТЬ втЛицевыеСчета") + Символы.ПС;
//	
//	втЛицевыеСчетаЛьготников = втЛицевыеСчетаЛьготников +
//	"ИЗ
//	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
//	|			&ДатаНачала,
//	|			ЛицевойСчет В
//	|				(ВЫБРАТЬ
//	|					втЛицевыеСчетаОрганизации.ЛицевойСчет КАК ЛицевойСчет
//	|				ИЗ
//	|					втЛицевыеСчетаОрганизации КАК втЛицевыеСчетаОрганизации)) КАК КВП_ЛицевыеСчетаСрезПоследних
//	|ГДЕ
//	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
//	|
//	|ОБЪЕДИНИТЬ
//	|
//	|ВЫБРАТЬ
//	|	КВП_ЛицевыеСчета.ЛицевойСчет,
//	|	КВП_ЛицевыеСчета.Объект,
//	|	КВП_ЛицевыеСчета.Объект.Владелец
//	|ИЗ
//	|	РегистрСведений.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
//	|ГДЕ
//	|	КВП_ЛицевыеСчета.Период МЕЖДУ &ДатаНачала И &ДатаКонца
//	|	И КВП_ЛицевыеСчета.ЛицевойСчет В
//	|			(ВЫБРАТЬ
//	|				втЛицевыеСчетаОрганизации.ЛицевойСчет КАК ЛицевойСчет
//	|			ИЗ
//	|				втЛицевыеСчетаОрганизации КАК втЛицевыеСчетаОрганизации)
//	|	И КВП_ЛицевыеСчета.Действует";
//	
//	Если ПараметрыВыгрузки.ВыводитьЛьготников Тогда
//		
//		втЛицевыеСчетаЛьготников = втЛицевыеСчетаЛьготников +
//		";
//		|
//		|////////////////////////////////////////////////////////////////////////////////
//		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
//		|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий.Владелец КАК ЛицевойСчет,
//		|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий.Владелец.Адрес КАК Помещение,
//		|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий.Владелец.Адрес.Владелец КАК Здание
//		|ПОМЕСТИТЬ втЛицевыеСчета
//		|ИЗ
//		|	РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(
//		|			&ДатаНачала,
//		|			Проживающий.Владелец В
//		|				(ВЫБРАТЬ
//		|					втДействующиеЛС.ЛицевойСчет
//		|				ИЗ
//		|					втДействующиеЛС КАК втДействующиеЛС)) КАК КВП_НазначенныеЛьготыСрезПоследних
//		|ГДЕ
//		|	КВП_НазначенныеЛьготыСрезПоследних.Действие
//		|
//		|ОБЪЕДИНИТЬ
//		|
//		|ВЫБРАТЬ
//		|	КВП_НазначенныеЛьготы.Проживающий.Владелец,
//		|	КВП_НазначенныеЛьготы.Проживающий.Владелец.Адрес,
//		|	КВП_НазначенныеЛьготы.Проживающий.Владелец.Адрес.Владелец
//		|ИЗ
//		|	РегистрСведений.КВП_НазначенныеЛьготы КАК КВП_НазначенныеЛьготы
//		|ГДЕ
//		|	КВП_НазначенныеЛьготы.Период МЕЖДУ &ДатаНачала И &ДатаКонца
//		|	И КВП_НазначенныеЛьготы.Проживающий.Владелец В
//		|			(ВЫБРАТЬ
//		|				втДействующиеЛС.ЛицевойСчет
//		|			ИЗ
//		|				втДействующиеЛС КАК втДействующиеЛС)
//		|	И КВП_НазначенныеЛьготы.Действие
//		|;
//		|
//		|////////////////////////////////////////////////////////////////////////////////";
//		
//	Иначе
//		
//		втЛицевыеСчетаЛьготников = втЛицевыеСчетаЛьготников +
//		";
//		|
//		|////////////////////////////////////////////////////////////////////////////////";
//		
//	КонецЕсли;
//	
//	Запрос.Текст = втЛицевыеСчетаЛьготников + Символы.ПС +
//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.ЛицевойСчет,
//	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.КоличествоПроживающих,
//	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.КоличествоЗарегистрированных
//	|ПОМЕСТИТЬ втУчетКоличестваЖильцов
//	|ИЗ
//	|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(
//	|			&ДатаКонца,
//	|			ЛицевойСчет В
//	|				(ВЫБРАТЬ
//	|					втЛицевыеСчета.ЛицевойСчет
//	|				ИЗ
//	|					втЛицевыеСчета КАК втЛицевыеСчета)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетам
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет,
//	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец) КАК КолвоЗарегистрированных
//	|ПОМЕСТИТЬ втСведенияОЗарегистрированных
//	|ИЗ
//	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
//	|			&ДатаКонца,
//	|			ДатаИзменения <= &ДатаКонца
//	|				И ЛицевойСчет В
//	|					(ВЫБРАТЬ
//	|						втЛицевыеСчета.ЛицевойСчет
//	|					ИЗ
//	|						втЛицевыеСчета КАК втЛицевыеСчета)) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
//	|ГДЕ
//	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет,
//	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец) КАК КолвоПроживающих
//	|ПОМЕСТИТЬ втСведенияОПроживающих
//	|ИЗ
//	|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
//	|			&ДатаКонца,
//	|			ДатаИзменения <= &ДатаКонца
//	|				И ЛицевойСчет В
//	|					(ВЫБРАТЬ
//	|						втЛицевыеСчета.ЛицевойСчет
//	|					ИЗ
//	|						втЛицевыеСчета КАК втЛицевыеСчета)) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
//	|ГДЕ
//	|	УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	втЛицевыеСчета.Помещение,
//	|	втЛицевыеСчета.Здание,
//	|	втЛицевыеСчета.ЛицевойСчет,
//	|	ВЫБОР
//	|		КОГДА &УказыватьКоличествоПрожИЗарегЧислами = ИСТИНА
//	|			ТОГДА ЕСТЬNULL(втУчетКоличестваЖильцов.КоличествоПроживающих, 0)
//	|		ИНАЧЕ ЕСТЬNULL(втСведенияОПроживающих.КолвоПроживающих, 0)
//	|	КОНЕЦ КАК КоличествоПроживающих,
//	|	ВЫБОР
//	|		КОГДА &УказыватьКоличествоПрожИЗарегЧислами = ИСТИНА
//	|			ТОГДА ЕСТЬNULL(втУчетКоличестваЖильцов.КоличествоЗарегистрированных, 0)
//	|		ИНАЧЕ ЕСТЬNULL(втСведенияОЗарегистрированных.КолвоЗарегистрированных, 0)
//	|	КОНЕЦ КАК КоличествоЗарегистрированных
//	|ПОМЕСТИТЬ втЛицевыеСчетаПроживЗарег
//	|ИЗ
//	|	втЛицевыеСчета КАК втЛицевыеСчета
//	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОПроживающих КАК втСведенияОПроживающих
//	|		ПО втЛицевыеСчета.ЛицевойСчет = втСведенияОПроживающих.ЛицевойСчет
//	|		ЛЕВОЕ СОЕДИНЕНИЕ втСведенияОЗарегистрированных КАК втСведенияОЗарегистрированных
//	|		ПО втЛицевыеСчета.ЛицевойСчет = втСведенияОЗарегистрированных.ЛицевойСчет
//	|		ЛЕВОЕ СОЕДИНЕНИЕ втУчетКоличестваЖильцов КАК втУчетКоличестваЖильцов
//	|		ПО втЛицевыеСчета.ЛицевойСчет = втУчетКоличестваЖильцов.ЛицевойСчет
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|УНИЧТОЖИТЬ втСведенияОПроживающих
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|УНИЧТОЖИТЬ втСведенияОЗарегистрированных";
//	Запрос.Выполнить();
//	
//	ЗапросПоЗданиям = Новый Запрос;
//	ЗапросПоЗданиям.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
//	ЗапросПоЗданиям.Текст = 
//	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	втЛицевыеСчетаПроживЗарег.Здание КАК Объект
//	|ИЗ
//	|	втЛицевыеСчетаПроживЗарег КАК втЛицевыеСчетаПроживЗарег
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	втЛицевыеСчетаПроживЗарег.Здание";
//	
//	МассивОбъектов = ЗапросПоЗданиям.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
//	
//	МассивВидовКонтактнойИнформации = Новый Массив;
//	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
//	
//	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
//	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов);
//	
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	втЛицевыеСчетаПроживЗарег.Помещение,
//	|	втЛицевыеСчетаПроживЗарег.Здание,
//	|	втЛицевыеСчетаПроживЗарег.ЛицевойСчет,
//	|	втЛицевыеСчетаПроживЗарег.КоличествоПроживающих,
//	|	втЛицевыеСчетаПроживЗарег.КоличествоЗарегистрированных,
//	|	ВЫБОР
//	|		КОГДА НЕ втКонтактнаяИнформация.НаселенныйПункт = """"
//	|			ТОГДА втКонтактнаяИнформация.НаселенныйПункт
//	|		КОГДА НЕ втКонтактнаяИнформация.Город = """"
//	|			ТОГДА втКонтактнаяИнформация.Город
//	|		ИНАЧЕ втКонтактнаяИнформация.Регион
//	|	КОНЕЦ КАК НаселенныйПункт,
//	|	втКонтактнаяИнформация.Улица,
//	|	втКонтактнаяИнформация.Дом,
//	|	втКонтактнаяИнформация.Корпус КАК Корпус,
//	|	втЛицевыеСчетаПроживЗарег.Помещение.Код КАК Квартира
//	|ПОМЕСТИТЬ втЛССАдресами
//	|ИЗ
//	|	втЛицевыеСчетаПроживЗарег КАК втЛицевыеСчетаПроживЗарег
//	|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК втКонтактнаяИнформация
//	|		ПО втЛицевыеСчетаПроживЗарег.Здание = втКонтактнаяИнформация.Объект
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|УНИЧТОЖИТЬ втЛицевыеСчетаПроживЗарег
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение,
//	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности
//	|ПОМЕСТИТЬ втВидысобственности
//	|ИЗ
//	|	РегистрСведений.УПЖКХ_СобственностьНаПомещения.СрезПоследних(
//	|			&ДатаКонца,
//	|			Помещение В
//	|				(ВЫБРАТЬ
//	|					втЛицевыеСчета.Помещение
//	|				ИЗ
//	|					втЛицевыеСчета КАК втЛицевыеСчета)) КАК УПЖКХ_СобственностьНаПомещенияСрезПоследних
//	|ГДЕ
//	|	УПЖКХ_СобственностьНаПомещенияСрезПоследних.Действует
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	втЛССАдресами.Помещение,
//	|	втЛССАдресами.Здание,
//	|	втЛССАдресами.ЛицевойСчет,
//	|	втЛССАдресами.КоличествоПроживающих,
//	|	втЛССАдресами.КоличествоЗарегистрированных,
//	|	втЛССАдресами.Квартира,
//	|	ЕСТЬNULL(втВидысобственности.ВидСобственности, ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыСобственности.ПустаяСсылка)) КАК ВидСобственности,
//	|	втЛССАдресами.НаселенныйПункт,
//	|	втЛССАдресами.Улица,
//	|	втЛССАдресами.Дом,
//	|	втЛССАдресами.Корпус
//	|ПОМЕСТИТЬ втЛССВидамисобственности
//	|ИЗ
//	|	втЛССАдресами КАК втЛССАдресами
//	|		ЛЕВОЕ СОЕДИНЕНИЕ втВидысобственности КАК втВидысобственности
//	|		ПО втЛССАдресами.Помещение = втВидысобственности.Помещение
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|УНИЧТОЖИТЬ втВидысобственности
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	ВЫБОР
//	|		КОГДА НЕ ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель, 0) = 0
//	|			ТОГДА ВЫБОР
//	|					КОГДА НЕ ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель, 0) = 0
//	|						ТОГДА КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель / КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель
//	|					ИНАЧЕ 0
//	|				КОНЕЦ
//	|		ИНАЧЕ 0
//	|	КОНЕЦ КАК ДоляЛС,
//	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет
//	|ПОМЕСТИТЬ втДоли
//	|ИЗ
//	|	РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(
//	|			&ДатаКонца,
//	|			ЛицевойСчет В
//	|				(ВЫБРАТЬ
//	|					втЛицевыеСчета.ЛицевойСчет
//	|				ИЗ
//	|					втЛицевыеСчета КАК втЛицевыеСчета)) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	КВП_ПлощадьПомещенияСрезПоследних.Объект,
//	|	КВП_ПлощадьПомещенияСрезПоследних.Площадь
//	|ПОМЕСТИТЬ втПлощади
//	|ИЗ
//	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
//	|			&ДатаКонца,
//	|			Объект В
//	|					(ВЫБРАТЬ
//	|						втЛицевыеСчета.Помещение
//	|					ИЗ
//	|						втЛицевыеСчета КАК втЛицевыеСчета)
//	|				И ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)) КАК КВП_ПлощадьПомещенияСрезПоследних
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	втЛССВидамисобственности.Помещение,
//	|	втЛССВидамисобственности.Здание,
//	|	втЛССВидамисобственности.ЛицевойСчет,
//	|	втЛССВидамисобственности.КоличествоПроживающих,
//	|	втЛССВидамисобственности.КоличествоЗарегистрированных,
//	|	втЛССВидамисобственности.Квартира,
//	|	ЕСТЬNULL(втДоли.ДоляЛС, 0) * ЕСТЬNULL(втПлощади.Площадь, 0) КАК ОбщаяПлощадь,
//	|	втЛССВидамисобственности.НаселенныйПункт,
//	|	втЛССВидамисобственности.Улица,
//	|	втЛССВидамисобственности.Дом,
//	|	втЛССВидамисобственности.Корпус,
//	|	втЛССВидамисобственности.ВидСобственности
//	|ПОМЕСТИТЬ втЛССПлощадями
//	|ИЗ
//	|	втЛССВидамисобственности КАК втЛССВидамисобственности
//	|		ЛЕВОЕ СОЕДИНЕНИЕ втДоли КАК втДоли
//	|		ПО втЛССВидамисобственности.ЛицевойСчет = втДоли.ЛицевойСчет
//	|		ЛЕВОЕ СОЕДИНЕНИЕ втПлощади КАК втПлощади
//	|		ПО втЛССВидамисобственности.Помещение = втПлощади.Объект
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|УНИЧТОЖИТЬ втДоли
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|УНИЧТОЖИТЬ втПлощади
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|УНИЧТОЖИТЬ втЛССВидамисобственности
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	КВП_БлагоустройствоОбъектов.Объект КАК Помещение,
//	|	КВП_БлагоустройствоОбъектов.Значение
//	|ПОМЕСТИТЬ втБлагоустройства
//	|ИЗ
//	|	РегистрСведений.КВП_БлагоустройствоОбъектов КАК КВП_БлагоустройствоОбъектов
//	|ГДЕ
//	|	КВП_БлагоустройствоОбъектов.ВидБлагоустройства = &ВидБлагоустройства
//	|	И КВП_БлагоустройствоОбъектов.Объект В
//	|			(ВЫБРАТЬ
//	|				втЛицевыеСчета.Помещение
//	|			ИЗ
//	|				втЛицевыеСчета КАК втЛицевыеСчета)
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	втЛССПлощадями.Помещение,
//	|	втЛССПлощадями.Здание,
//	|	втЛССПлощадями.ЛицевойСчет,
//	|	втЛССПлощадями.КоличествоПроживающих,
//	|	втЛССПлощадями.КоличествоЗарегистрированных,
//	|	втЛССПлощадями.Квартира,
//	|	втЛССПлощадями.ОбщаяПлощадь,
//	|	ВЫБОР
//	|		КОГДА ЕСТЬNULL(втБлагоустройства.Значение, ЛОЖЬ) В (ИСТИНА, ""Есть"", ""Да"", ""Имеется"", ""Присутствует"")
//	|			ТОГДА ИСТИНА
//	|		ИНАЧЕ ЛОЖЬ
//	|	КОНЕЦ КАК НаличиеБойлера,
//	|	втЛССПлощадями.НаселенныйПункт,
//	|	втЛССПлощадями.Улица,
//	|	втЛССПлощадями.Дом,
//	|	втЛССПлощадями.Корпус,
//	|	втЛССПлощадями.ВидСобственности
//	|ПОМЕСТИТЬ втЛСБезУслуг
//	|ИЗ
//	|	втЛССПлощадями КАК втЛССПлощадями
//	|		ЛЕВОЕ СОЕДИНЕНИЕ втБлагоустройства КАК втБлагоустройства
//	|		ПО втЛССПлощадями.Помещение = втБлагоустройства.Помещение
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|УНИЧТОЖИТЬ втБлагоустройства
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|УНИЧТОЖИТЬ втЛССПлощадями
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ЖКУ_ВБазе.УслугаВБазе,
//	|	ЖКУ_ВБазе.УслугаВОСЗН,
//	|	ЖКУ_ВБазе.КодУслугиВОСЗН,
//	|	ЖКУ_ВБазе.ОДНСОсновнымиНачислениями
//	|ПОМЕСТИТЬ втУслуги
//	|ИЗ
//	|	&ЖКУ_ВБазе КАК ЖКУ_ВБазе
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	втЛСБезУслуг.Помещение,
//	|	втЛСБезУслуг.Здание,
//	|	втЛСБезУслуг.ЛицевойСчет,
//	|	втЛСБезУслуг.КоличествоПроживающих,
//	|	втЛСБезУслуг.КоличествоЗарегистрированных,
//	|	втЛСБезУслуг.НаселенныйПункт,
//	|	втЛСБезУслуг.Улица,
//	|	втЛСБезУслуг.Дом,
//	|	втЛСБезУслуг.Корпус,
//	|	втЛСБезУслуг.Квартира,
//	|	втЛСБезУслуг.ВидСобственности,
//	|	втЛСБезУслуг.ОбщаяПлощадь,
//	|	втЛСБезУслуг.НаличиеБойлера,
//	|	втУслуги.КодУслугиВОСЗН,
//	|	втУслуги.УслугаВОСЗН,
//	|	втУслуги.УслугаВБазе,
//	|	втУслуги.ОДНСОсновнымиНачислениями
//	|ПОМЕСТИТЬ втБезНачисленийИОплат
//	|ИЗ
//	|	втЛСБезУслуг КАК втЛСБезУслуг,
//	|	втУслуги КАК втУслуги
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|УНИЧТОЖИТЬ втЛСБезУслуг
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
//	|	УПЖКХ_НачисленияОбороты.Услуга,
//	|	УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот КАК СуммаНачисления,
//	|	УПЖКХ_НачисленияОбороты.ВидНачисления,
//	|	УПЖКХ_НачисленияОбороты.Тариф,
//	|	УПЖКХ_НачисленияОбороты.РазделУчета
//	|ПОМЕСТИТЬ втВсеНачисленияБезНастройкиВыгрузкиОДН
//	|ИЗ
//	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
//	|			&ДатаНачала,
//	|			&ДатаКонца,
//	|			,
//	|			Организация = &Организация
//	|				И (ЛицевойСчет, Услуга) В
//	|					(ВЫБРАТЬ
//	|						втБезНачисленийИОплат.ЛицевойСчет,
//	|						втБезНачисленийИОплат.УслугаВБазе
//	|					ИЗ
//	|						втБезНачисленийИОплат КАК втБезНачисленийИОплат)
//	|				И НЕ РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени))) КАК УПЖКХ_НачисленияОбороты
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	втВсеНачисленияБезНастройкиВыгрузкиОДН.ЛицевойСчет,
//	|	втВсеНачисленияБезНастройкиВыгрузкиОДН.Услуга,
//	|	втВсеНачисленияБезНастройкиВыгрузкиОДН.СуммаНачисления,
//	|	втВсеНачисленияБезНастройкиВыгрузкиОДН.ВидНачисления,
//	|	втВсеНачисленияБезНастройкиВыгрузкиОДН.Тариф,
//	|	втВсеНачисленияБезНастройкиВыгрузкиОДН.РазделУчета,
//	|	ЕСТЬNULL(втУслуги.ОДНСОсновнымиНачислениями, ЛОЖЬ) КАК ОДНСОсновнымиНачислениями
//	|ПОМЕСТИТЬ втВсеНачисления
//	|ИЗ
//	|	втВсеНачисленияБезНастройкиВыгрузкиОДН КАК втВсеНачисленияБезНастройкиВыгрузкиОДН
//	|		ЛЕВОЕ СОЕДИНЕНИЕ втУслуги КАК втУслуги
//	|		ПО втВсеНачисленияБезНастройкиВыгрузкиОДН.Услуга = втУслуги.УслугаВБазе
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	втВсеНачисления.ЛицевойСчет,
//	|	втВсеНачисления.Услуга,
//	|	втВсеНачисления.Тариф,
//	|	СУММА(ВЫБОР
//	|			КОГДА втВсеНачисления.ОДНСОсновнымиНачислениями = ИСТИНА ИЛИ НЕ втВсеНачисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
//	|				ТОГДА втВсеНачисления.СуммаНачисления
//	|			ИНАЧЕ 0
//	|		КОНЕЦ) КАК СуммаНачисления,
//	|	СУММА(ВЫБОР
//	|			КОГДА втВсеНачисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
//	|					И втВсеНачисления.ОДНСОсновнымиНачислениями = ЛОЖЬ
//	|				ТОГДА втВсеНачисления.СуммаНачисления
//	|			ИНАЧЕ 0
//	|		КОНЕЦ) КАК СуммаНачисленияОДН
//	|ПОМЕСТИТЬ втНачисления
//	|ИЗ
//	|	втВсеНачисления КАК втВсеНачисления
//	|ГДЕ
//	|	втВсеНачисления.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ))
//	|	И втВсеНачисления.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ))
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	втВсеНачисления.ЛицевойСчет,
//	|	втВсеНачисления.Услуга,
//	|	втВсеНачисления.Тариф
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	втВсеНачисления.ЛицевойСчет,
//	|	втВсеНачисления.Услуга,
//	|	СУММА(втВсеНачисления.СуммаНачисления) КАК СуммаНачисления
//	|ПОМЕСТИТЬ втПерерасчеты
//	|ИЗ
//	|	втВсеНачисления КАК втВсеНачисления
//	|ГДЕ
//	|	втВсеНачисления.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
//	|	И втВсеНачисления.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ))
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	втВсеНачисления.ЛицевойСчет,
//	|	втВсеНачисления.Услуга
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	втВсеНачисления.ЛицевойСчет,
//	|	втВсеНачисления.Услуга,
//	|	СУММА(втВсеНачисления.СуммаНачисления) КАК СуммаНачисления
//	|ПОМЕСТИТЬ втОплаты
//	|ИЗ
//	|	втВсеНачисления КАК втВсеНачисления
//	|ГДЕ
//	|	втВсеНачисления.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	втВсеНачисления.ЛицевойСчет,
//	|	втВсеНачисления.Услуга
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	втВсеНачисления.ЛицевойСчет,
//	|	втВсеНачисления.Услуга,
//	|	втВсеНачисления.СуммаНачисления
//	|ПОМЕСТИТЬ втПени
//	|ИЗ
//	|	втВсеНачисления КАК втВсеНачисления
//	|ГДЕ
//	|	втВсеНачисления.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
//	|	И НЕ втВсеНачисления.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	втБезНачисленийИОплат.Помещение,
//	|	втБезНачисленийИОплат.Здание,
//	|	втБезНачисленийИОплат.ЛицевойСчет,
//	|	втБезНачисленийИОплат.КоличествоПроживающих,
//	|	втБезНачисленийИОплат.КоличествоЗарегистрированных,
//	|	втБезНачисленийИОплат.НаселенныйПункт,
//	|	втБезНачисленийИОплат.Улица,
//	|	втБезНачисленийИОплат.Дом,
//	|	втБезНачисленийИОплат.Корпус,
//	|	втБезНачисленийИОплат.Квартира,
//	|	втБезНачисленийИОплат.ВидСобственности,
//	|	втБезНачисленийИОплат.ОбщаяПлощадь,
//	|	втБезНачисленийИОплат.НаличиеБойлера,
//	|	втБезНачисленийИОплат.КодУслугиВОСЗН,
//	|	втБезНачисленийИОплат.УслугаВОСЗН,
//	|	втБезНачисленийИОплат.УслугаВБазе,
//	|	СУММА(ЕСТЬNULL(втНачисления.СуммаНачисления, 0) + ЕСТЬNULL(втПени.СуммаНачисления, 0) + ЕСТЬNULL(втПерерасчеты.СуммаНачисления, 0)) КАК СуммаНачисления,
//	|	СУММА(ЕСТЬNULL(-втОплаты.СуммаНачисления, 0)) КАК СуммаОплаты,
//	|	СУММА(ЕСТЬNULL(втНачисления.Тариф, 0)) КАК Тариф,
//	|	СУММА(ЕСТЬNULL(втНачисления.СуммаНачисленияОДН, 0)) КАК СуммаНачисленияОДН
//	|ПОМЕСТИТЬ втБезНорм
//	|ИЗ
//	|	втБезНачисленийИОплат КАК втБезНачисленийИОплат
//	|		ЛЕВОЕ СОЕДИНЕНИЕ втНачисления КАК втНачисления
//	|		ПО втБезНачисленийИОплат.ЛицевойСчет = втНачисления.ЛицевойСчет
//	|			И втБезНачисленийИОплат.УслугаВБазе = втНачисления.Услуга
//	|		ЛЕВОЕ СОЕДИНЕНИЕ втПерерасчеты КАК втПерерасчеты
//	|		ПО втБезНачисленийИОплат.УслугаВБазе = втПерерасчеты.Услуга
//	|			И втБезНачисленийИОплат.ЛицевойСчет = втПерерасчеты.ЛицевойСчет
//	|		ЛЕВОЕ СОЕДИНЕНИЕ втОплаты КАК втОплаты
//	|		ПО втБезНачисленийИОплат.ЛицевойСчет = втОплаты.ЛицевойСчет
//	|			И втБезНачисленийИОплат.УслугаВБазе = втОплаты.Услуга
//	|		ЛЕВОЕ СОЕДИНЕНИЕ втПени КАК втПени
//	|		ПО втБезНачисленийИОплат.УслугаВБазе = втПени.Услуга
//	|			И втБезНачисленийИОплат.ЛицевойСчет = втПени.ЛицевойСчет
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	втБезНачисленийИОплат.Помещение,
//	|	втБезНачисленийИОплат.Здание,
//	|	втБезНачисленийИОплат.ЛицевойСчет,
//	|	втБезНачисленийИОплат.НаселенныйПункт,
//	|	втБезНачисленийИОплат.Улица,
//	|	втБезНачисленийИОплат.Дом,
//	|	втБезНачисленийИОплат.Корпус,
//	|	втБезНачисленийИОплат.Квартира,
//	|	втБезНачисленийИОплат.ВидСобственности,
//	|	втБезНачисленийИОплат.ОбщаяПлощадь,
//	|	втБезНачисленийИОплат.НаличиеБойлера,
//	|	втБезНачисленийИОплат.КодУслугиВОСЗН,
//	|	втБезНачисленийИОплат.УслугаВОСЗН,
//	|	втБезНачисленийИОплат.УслугаВБазе,
//	|	втБезНачисленийИОплат.КоличествоЗарегистрированных,
//	|	втБезНачисленийИОплат.КоличествоПроживающих
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|УНИЧТОЖИТЬ втВсеНачисления
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|УНИЧТОЖИТЬ втНачисления
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|УНИЧТОЖИТЬ втОплаты
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|УНИЧТОЖИТЬ втПени
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет,
//	|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга,
//	|	ВЫБОР
//	|		КОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки = ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой)
//	|			ТОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Размер
//	|		ИНАЧЕ КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления
//	|	КОНЕЦ КАК НормаПотребления,
//	|	ВЫБОР
//	|		КОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки = ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой)
//	|			ТОГДА ЛОЖЬ
//	|		ИНАЧЕ ИСТИНА
//	|	КОНЕЦ КАК РасчетНормыСложный
//	|ПОМЕСТИТЬ втРСНормыПотребленияЛС
//	|ИЗ
//	|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(
//	|			&ДатаКонца,
//	|			(ЛицевойСчет, Услуга) В
//	|				(ВЫБРАТЬ
//	|					втБезНорм.ЛицевойСчет,
//	|					втБезНорм.УслугаВБазе
//	|				ИЗ
//	|					втБезНорм КАК втБезНорм)) КАК КВП_НормыПотребленияУслугЛССрезПоследних
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
//	|	КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет КАК Здание,
//	|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга,
//	|	ВЫБОР
//	|		КОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки = ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой)
//	|			ТОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.Размер
//	|		ИНАЧЕ КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления
//	|	КОНЕЦ КАК НормаПотребления,
//	|	ВЫБОР
//	|		КОГДА КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления.ВариантНастройки = ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой)
//	|			ТОГДА ЛОЖЬ
//	|		ИНАЧЕ ИСТИНА
//	|	КОНЕЦ КАК РасчетНормыСложный
//	|ПОМЕСТИТЬ втРСНормыПотребленияЗданий
//	|ИЗ
//	|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(
//	|			&ДатаКонца,
//	|			(ЛицевойСчет, Услуга) В
//	|				(ВЫБРАТЬ
//	|					втБезНорм.Здание,
//	|					втБезНорм.УслугаВБазе
//	|				ИЗ
//	|					втБезНорм КАК втБезНорм)) КАК КВП_НормыПотребленияУслугЛССрезПоследних
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	втБезНорм.Помещение,
//	|	втБезНорм.Здание,
//	|	втБезНорм.ЛицевойСчет,
//	|	втБезНорм.КоличествоПроживающих,
//	|	втБезНорм.КоличествоЗарегистрированных,
//	|	втБезНорм.НаселенныйПункт,
//	|	втБезНорм.Улица,
//	|	втБезНорм.Дом,
//	|	втБезНорм.Корпус,
//	|	втБезНорм.Квартира,
//	|	втБезНорм.ВидСобственности,
//	|	втБезНорм.ОбщаяПлощадь,
//	|	втБезНорм.НаличиеБойлера,
//	|	втБезНорм.КодУслугиВОСЗН,
//	|	втБезНорм.УслугаВОСЗН,
//	|	втБезНорм.УслугаВБазе,
//	|	втБезНорм.Тариф,
//	|	втБезНорм.СуммаНачисления,
//	|	втБезНорм.СуммаОплаты,
//	|	ЕСТЬNULL(втРСНормыПотребленияЛС.НормаПотребления, 0) КАК НормаПотребленияЛС,
//	|	ЕСТЬNULL(втРСНормыПотребленияЛС.РасчетНормыСложный, ЛОЖЬ) КАК РасчетНормыСложныйЛС,
//	|	ЕСТЬNULL(втРСНормыПотребленияЗданий.НормаПотребления, 0) КАК НормаПотребленияЗдания,
//	|	ЕСТЬNULL(втРСНормыПотребленияЗданий.РасчетНормыСложный, ЛОЖЬ) КАК РасчетНормыСложныйЗдания,
//	|	втБезНорм.СуммаНачисленияОДН
//	|ПОМЕСТИТЬ втИтоговая
//	|ИЗ
//	|	втБезНорм КАК втБезНорм
//	|		ЛЕВОЕ СОЕДИНЕНИЕ втРСНормыПотребленияЛС КАК втРСНормыПотребленияЛС
//	|		ПО втБезНорм.ЛицевойСчет = втРСНормыПотребленияЛС.ЛицевойСчет
//	|			И втБезНорм.УслугаВБазе = втРСНормыПотребленияЛС.Услуга
//	|		ЛЕВОЕ СОЕДИНЕНИЕ втРСНормыПотребленияЗданий КАК втРСНормыПотребленияЗданий
//	|		ПО втБезНорм.Здание = втРСНормыПотребленияЗданий.Здание
//	|			И втБезНорм.УслугаВБазе = втРСНормыПотребленияЗданий.Услуга
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|УНИЧТОЖИТЬ втРСНормыПотребленияЛС
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|УНИЧТОЖИТЬ втРСНормыПотребленияЗданий
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	втИтоговая.Помещение,
//	|	втИтоговая.Здание,
//	|	втИтоговая.ЛицевойСчет,
//	|	втИтоговая.ЛицевойСчет." + ?(ПараметрыВыгрузки.ВыводРеквизитаЛицевогоСчета = 0, "Код", ?(ПараметрыВыгрузки.ВыводРеквизитаЛицевогоСчета = 1, "Наименование", "Идентификатор")) + " КАК НомерЛицевойСчет,
//	|	втИтоговая.КоличествоПроживающих,
//	|	втИтоговая.КоличествоЗарегистрированных,
//	|	втИтоговая.НаселенныйПункт,
//	|	втИтоговая.Улица,
//	|	втИтоговая.Дом,
//	|	втИтоговая.Корпус,
//	|	втИтоговая.Квартира,
//	|	втИтоговая.ВидСобственности,
//	|	втИтоговая.ОбщаяПлощадь,
//	|	втИтоговая.НаличиеБойлера,
//	|	втИтоговая.КодУслугиВОСЗН КАК Идентификатор,
//	|	втИтоговая.УслугаВОСЗН,
//	|	втИтоговая.УслугаВБазе,
//	|	втИтоговая.Тариф,
//	|	втИтоговая.СуммаНачисления,
//	|	втИтоговая.СуммаОплаты,
//	|	втИтоговая.НормаПотребленияЛС,
//	|	втИтоговая.РасчетНормыСложныйЛС,
//	|	втИтоговая.НормаПотребленияЗдания,
//	|	втИтоговая.РасчетНормыСложныйЗдания,
//	|	втИтоговая.СуммаНачисленияОДН
//	|ИЗ
//	|	втИтоговая КАК втИтоговая";
//	
//	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
//	
//	Возврат РезультатЗапроса;
//	
//КонецФункции

//// Заполняет таблицу нормами потребления и тарифами.
////
//// Параметры:
////  Таблица - ТаблицаЗначений - содержит итоговые данные об оплатах по лицевым счетам и соответствующим им услугами.
////
//// Возвращаемое значение:
////  ТаблицаЗначений
////
//Процедура ДополнитьТаблицуНачисленийИркутскаяОбластьИтоговую(Таблица)
//	
//	Для Каждого СтрокаТаблицы ИЗ Таблица Цикл
//		
//		// Заполнение тарифов.
//		Если СтрокаТаблицы.Тариф = 0 Тогда
//			ТарифПоУслуге = ПолучитьТарифПоЛицевомуСчету(КонецМесяца(Период), Организация, СтрокаТаблицы.УслугаВБазе, СтрокаТаблицы.ЛицевойСчет);
//			СтрокаТаблицы.Тариф = ТарифПоУслуге;
//		КонецЕсли;
//		
//		// Заполнение нормативов потребления л/с.
//		Если СтрокаТаблицы.РасчетНормыСложныйЛС Тогда
//			РазмерНормы = ПолучитьРазмерНормыПотребления(СтрокаТаблицы.ЛицевойСчет, КонецМесяца(Период), СтрокаТаблицы.НормаПотребленияЛС, Организация);
//			СтрокаТаблицы.НормаПотребленияЛС = РазмерНормы;
//		КонецЕсли;
//		
//		// Заполнение нормативов потребления зданий.
//		Если СтрокаТаблицы.РасчетНормыСложныйЗдания Тогда
//			РазмерНормы = ПолучитьРазмерНормыПотребления(СтрокаТаблицы.ЛицевойСчет, КонецМесяца(Период), СтрокаТаблицы.НормаПотребленияЗдания, Организация);
//			СтрокаТаблицы.НормаПотребленияЗдания = РазмерНормы;
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//КонецПроцедуры // ДополнитьТаблицуНачисленийИркутскаяОбластьИтоговую()

//// Предназначена для получения итогов в таблице начисления.
////
//// Параметры:
////  ТаблицаНачислений - ТаблицаЗначений - содержит итоговые данные о начислениях и перерасчетах
////                                        по лицевым счетам и соответствующим им услугами.
////
//// ВозвращаемоеЗначение:
////  ТаблицаЗначений - содержит сведения о начислениях и перерасчетах для лицевых счетов по данным услугам.
////
//Функция СкомпоноватьТаблицуНачисленийИркутскаяОбласть(ТаблицаНачислений, ТаблицаДолжников, ПараметрыВыгрузки)
//	
//	СпособРасчетаТарифа = ПараметрыВыгрузки.СпособРасчетаТарифа;
//	
//	Если СпособРасчетаТарифа = "максимальный" Тогда
//		Способ = "МАКСИМУМ";
//	ИначеЕсли СпособРасчетаТарифа = "минимальный" Тогда
//		Способ = "МИНИМУМ";
//	ИначеЕсли СпособРасчетаТарифа = "средний" Тогда
//		Способ = "СРЕДНЕЕ";
//	ИначеЕсли СпособРасчетаТарифа = "суммарный" Тогда
//		Способ = "СУММА";
//	Иначе
//		Способ = "СРЕДНЕЕ";
//	КонецЕсли;
//	
//	Запрос = Новый Запрос;
//	Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	ТаблицаНачислений.Помещение,
//	|	ТаблицаНачислений.ЛицевойСчет КАК ЛицевойСчет,
//	|	ТаблицаНачислений.НомерЛицевойСчет КАК НомерЛицевойСчет,
//	|	ТаблицаНачислений.КоличествоПроживающих,
//	|	ТаблицаНачислений.КоличествоЗарегистрированных,
//	|	ТаблицаНачислений.НаселенныйПункт,
//	|	ТаблицаНачислений.Улица,
//	|	ТаблицаНачислений.Дом,
//	|	ТаблицаНачислений.Корпус,
//	|	ТаблицаНачислений.Квартира,
//	|	ТаблицаНачислений.ВидСобственности,
//	|	ТаблицаНачислений.ОбщаяПлощадь,
//	|	ТаблицаНачислений.НаличиеБойлера,
//	|	ТаблицаНачислений.Идентификатор,
//	|	ТаблицаНачислений.УслугаВОСЗН,
//	|	ТаблицаНачислений.УслугаВБазе,
//	|	ТаблицаНачислений.СуммаНачисления,
//	|	ТаблицаНачислений.НормаПотребленияЛС,
//	|	ТаблицаНачислений.НормаПотребленияЗдания,
//	|	ТаблицаНачислений.Тариф,
//	|	ТаблицаНачислений.PERIOD_MONTH,
//	|	ТаблицаНачислений.PERIOD_YEAR,
//	|	ТаблицаНачислений.СуммаОплаты,
//	|	ТаблицаНачислений.СуммаНачисленияОДН
//	|ПОМЕСТИТЬ втТаблицаБезитогов
//	|ИЗ
//	|	&ТаблицаНачислений КАК ТаблицаНачислений
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	ТаблицаДолжников.ЛицевойСчет,
//	|	ТаблицаДолжников.МесяцевЗадолженности
//	|ПОМЕСТИТЬ втТаблицаДолгов
//	|ИЗ
//	|	&ТаблицаДолжников КАК ТаблицаДолжников
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	втТаблицаБезитогов.Помещение,
//	|	втТаблицаБезитогов.ЛицевойСчет,
//	|	втТаблицаБезитогов.НомерЛицевойСчет,
//	|	втТаблицаБезитогов.КоличествоПроживающих,
//	|	втТаблицаБезитогов.КоличествоЗарегистрированных,
//	|	втТаблицаБезитогов.НаселенныйПункт,
//	|	втТаблицаБезитогов.Улица,
//	|	втТаблицаБезитогов.Дом,
//	|	втТаблицаБезитогов.Корпус,
//	|	втТаблицаБезитогов.Квартира,
//	|	втТаблицаБезитогов.ВидСобственности,
//	|	втТаблицаБезитогов.ОбщаяПлощадь,
//	|	втТаблицаБезитогов.НаличиеБойлера,
//	|	втТаблицаБезитогов.Идентификатор,
//	|	втТаблицаБезитогов.УслугаВОСЗН,
//	|	втТаблицаБезитогов.УслугаВБазе,
//	|	втТаблицаБезитогов.СуммаНачисления,
//	|	втТаблицаБезитогов.НормаПотребленияЛС,
//	|	втТаблицаБезитогов.НормаПотребленияЗдания,
//	|	втТаблицаБезитогов.Тариф,
//	|	ЕСТЬNULL(втТаблицаДолгов.МесяцевЗадолженности, 0) КАК КоличествоМесяцевЗадолженности,
//	|	втТаблицаБезитогов.PERIOD_MONTH,
//	|	втТаблицаБезитогов.PERIOD_YEAR,
//	|	втТаблицаБезитогов.СуммаОплаты,
//	|	втТаблицаБезитогов.СуммаНачисленияОДН
//	|ПОМЕСТИТЬ втТаблицаБезитоговСМесяцамиДолга
//	|ИЗ
//	|	втТаблицаБезитогов КАК втТаблицаБезитогов
//	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаДолгов КАК втТаблицаДолгов
//	|		ПО втТаблицаБезитогов.ЛицевойСчет = втТаблицаДолгов.ЛицевойСчет
//	|;
//	|
//	|////////////////////////////////////////////////////////////////////////////////
//	|ВЫБРАТЬ
//	|	втТаблицаБезитоговСМесяцамиДолга.Помещение,
//	|	втТаблицаБезитоговСМесяцамиДолга.ЛицевойСчет КАК ЛицевойСчет,
//	|	втТаблицаБезитоговСМесяцамиДолга.НаселенныйПункт КАК TOWN,
//	|	втТаблицаБезитоговСМесяцамиДолга.Улица КАК STREET,
//	|	втТаблицаБезитоговСМесяцамиДолга.Дом КАК HOUSE,
//	|	втТаблицаБезитоговСМесяцамиДолга.Корпус КАК HOUSING,
//	|	втТаблицаБезитоговСМесяцамиДолга.Квартира КАК FLAT,
//	|	втТаблицаБезитоговСМесяцамиДолга.PERIOD_MONTH,
//	|	втТаблицаБезитоговСМесяцамиДолга.PERIOD_YEAR,
//	|	втТаблицаБезитоговСМесяцамиДолга.НомерЛицевойСчет КАК ACCOUNT,
//	|	втТаблицаБезитоговСМесяцамиДолга.КоличествоЗарегистрированных КАК RG_COUNT,
//	|	втТаблицаБезитоговСМесяцамиДолга.КоличествоПроживающих КАК FT_COUNT,
//	|	втТаблицаБезитоговСМесяцамиДолга.ВидСобственности КАК OWNERSHP,
//	|	втТаблицаБезитоговСМесяцамиДолга.ОбщаяПлощадь КАК SQUARE,
//	|	втТаблицаБезитоговСМесяцамиДолга.НаличиеБойлера КАК ISBOILER,
//	|	втТаблицаБезитоговСМесяцамиДолга.Идентификатор КАК Идентификатор,
//	|	втТаблицаБезитоговСМесяцамиДолга.УслугаВОСЗН,
//	|	СУММА(втТаблицаБезитоговСМесяцамиДолга.СуммаНачисления) КАК СуммаНачисления,
//	|	СУММА(втТаблицаБезитоговСМесяцамиДолга.СуммаОплаты) КАК СуммаОплаты,
//	|	МАКСИМУМ(ВЫБОР
//	|			КОГДА втТаблицаБезитоговСМесяцамиДолга.НормаПотребленияЛС = 0
//	|				ТОГДА втТаблицаБезитоговСМесяцамиДолга.НормаПотребленияЗдания
//	|			ИНАЧЕ втТаблицаБезитоговСМесяцамиДолга.НормаПотребленияЛС
//	|		КОНЕЦ) КАК НормаПотребления,
//	|	" + Способ + "(втТаблицаБезитоговСМесяцамиДолга.Тариф) КАК Тариф,
//	|	МАКСИМУМ(втТаблицаБезитоговСМесяцамиДолга.КоличествоМесяцевЗадолженности) КАК КоличествоМесяцевЗадолженности,
//	|	СУММА(втТаблицаБезитоговСМесяцамиДолга.СуммаНачисленияОДН) КАК СуммаНачисленияОДН
//	|ИЗ
//	|	втТаблицаБезитоговСМесяцамиДолга КАК втТаблицаБезитоговСМесяцамиДолга
//	|
//	|СГРУППИРОВАТЬ ПО
//	|	втТаблицаБезитоговСМесяцамиДолга.Помещение,
//	|	втТаблицаБезитоговСМесяцамиДолга.ЛицевойСчет,
//	|	втТаблицаБезитоговСМесяцамиДолга.НомерЛицевойСчет,
//	|	втТаблицаБезитоговСМесяцамиДолга.КоличествоПроживающих,
//	|	втТаблицаБезитоговСМесяцамиДолга.КоличествоЗарегистрированных,
//	|	втТаблицаБезитоговСМесяцамиДолга.НаселенныйПункт,
//	|	втТаблицаБезитоговСМесяцамиДолга.Улица,
//	|	втТаблицаБезитоговСМесяцамиДолга.Дом,
//	|	втТаблицаБезитоговСМесяцамиДолга.Корпус,
//	|	втТаблицаБезитоговСМесяцамиДолга.Квартира,
//	|	втТаблицаБезитоговСМесяцамиДолга.ВидСобственности,
//	|	втТаблицаБезитоговСМесяцамиДолга.ОбщаяПлощадь,
//	|	втТаблицаБезитоговСМесяцамиДолга.НаличиеБойлера,
//	|	втТаблицаБезитоговСМесяцамиДолга.Идентификатор,
//	|	втТаблицаБезитоговСМесяцамиДолга.УслугаВОСЗН,
//	|	втТаблицаБезитоговСМесяцамиДолга.PERIOD_MONTH,
//	|	втТаблицаБезитоговСМесяцамиДолга.PERIOD_YEAR
//	|
//	|УПОРЯДОЧИТЬ ПО
//	|	ЛицевойСчет,
//	|	Идентификатор
//	|ИТОГИ ПО
//	|	ЛицевойСчет";
//	
//	Запрос.УстановитьПараметр("ТаблицаНачислений", ТаблицаНачислений);
//	Запрос.УстановитьПараметр("ТаблицаДолжников", ТаблицаДолжников);
//	
//	Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
//	
//	Возврат Результат;
//	
//КонецФункции // СкомпоноватьТаблицуНачисленийИркутскаяОбласть()

//#КонецОбласти

//////////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ВЫГРУЗКИ ДЛЯ ТАМБОВСКОЙ ОБЛАСТИ

#Область ТамбовскаяОбласть

// Формирует таблицу всех выгружаемых данных.
//
Процедура СформироватьТаблицуДанныхТамбовскаяОбласть(ТаблицаДанныхФайла, ПараметрыВыгрузки) Экспорт
	
	ТаблицаДанныхФайла.Очистить();
	
	Для Каждого ФайлЗагрузки Из ПараметрыВыгрузки.СписокФайлов Цикл
		
		// Загрузка.
		ФайлДБФ = Новый XBase;
		ФайлДБФ.Кодировка = КодировкаXBase.OEM;
		ФайлДБФ.ОткрытьФайл(ФайлЗагрузки, , Истина);
		Если ФайлДБФ.Открыта() = Истина Тогда
			
			Если ФайлДБФ.КоличествоЗаписей() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Пока НЕ ФайлДБФ.ВКонце() Цикл
				
				НоваяСтрокаЗагрузки = ТаблицаДанныхФайла.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаЗагрузки, ФайлДБФ);
				Попытка
					НоваяСтрокаЗагрузки.KVR = Число(СокрЛП(ФайлДБФ.KVR));
				Исключение
					// Установим номер квартиры 1, т.к. в данном случае могут быть загружены частные дома из файлы ОСЗН.
					НоваяСтрокаЗагрузки.KVR = 1;
				КонецПопытки;
				НоваяСтрокаЗагрузки.ACCOUNT = СокрЛП(ФайлДБФ.ACCOUNT);
				
				ФайлДБФ.Следующая();
			КонецЦикла;
			
		КонецЕсли;
		
		ФайлДБФ.ЗакрытьФайл();
		
	КонецЦикла;
	
	ТаблицаАдресов = ПолучитьАдресаВсехЗданийТамбовскаяОбласть();
	ТаблицаФИО     = ПолучитьФИОФизЛиц();
	ПолучитьТаблицуНачисленийТамбов(ТаблицаДанныхФайла, ТаблицаАдресов, ТаблицаФИО, ПараметрыВыгрузки);
	
КонецПроцедуры

// Получает таблицу значений с адресами зданий.
//
Функция ПолучитьАдресаВсехЗданийТамбовскаяОбласть()
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	втКонтактнаяИнформация.Объект КАК Здание,
	|	ВЫБОР
	|		КОГДА НЕ втКонтактнаяИнформация.НаселенныйПункт = """"
	|			ТОГДА втКонтактнаяИнформация.НаселенныйПункт
	|		КОГДА НЕ втКонтактнаяИнформация.Город = """"
	|			ТОГДА втКонтактнаяИнформация.Город
	|		ИНАЧЕ втКонтактнаяИнформация.Регион
	|	КОНЕЦ КАК НаселенныйПункт,
	|	втКонтактнаяИнформация.Улица,
	|	втКонтактнаяИнформация.Дом,
	|	втКонтактнаяИнформация.Корпус
	|ИЗ
	|	втКонтактнаяИнформация КАК втКонтактнаяИнформация";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	МассивСокрНасПункт = СформироватьМассивСокращениеДляТамбовскойОблПоВиду(4);
	МассивСокрУлицы    = СформироватьМассивСокращениеДляТамбовскойОблПоВиду(5);
	
	Для Каждого СтрокаЗдания ИЗ Результат Цикл
		СтрокаЗдания.НаселенныйПункт = ВРег(НормализацияПолейАдресаОбласти(СтрокаЗдания.НаселенныйПункт, МассивСокрНасПункт));
		СтрокаЗдания.Улица           = ВРег(НормализацияПолейАдресаОбласти(СтрокаЗдания.Улица,           МассивСокрУлицы));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьАдресаВсехЗданийТамбовскаяОбласть()

// Формирует массив сокращений для Томской области для выбранного вида сокращения.
//
Функция СформироватьМассивСокращениеДляТамбовскойОблПоВиду(ВидСокращение)
	
	МассивСокращений = Новый Массив;
	// Для регионов.
	Если ВидСокращение = 1 Тогда
		МассивСокращений.Добавить("обл");
		// Для районов.
	ИначеЕсли ВидСокращение = 2 Тогда
		МассивСокращений.Добавить("р-н");
		// Для городов.
	ИначеЕсли ВидСокращение = 3 Тогда
		МассивСокращений.Добавить("г");
		// Для нас.пунктов.
	ИначеЕсли ВидСокращение = 4 Тогда
		МассивСокращений.Добавить("рп");
		МассивСокращений.Добавить("п");
		МассивСокращений.Добавить("с");
		МассивСокращений.Добавить("д");
		МассивСокращений.Добавить("д.");
		МассивСокращений.Добавить("х");
		МассивСокращений.Добавить("ст");
		МассивСокращений.Добавить("пгт");
		МассивСокращений.Добавить("дп");
		МассивСокращений.Добавить("рзд");
		МассивСокращений.Добавить("мкр");
		МассивСокращений.Добавить("нп");
		МассивСокращений.Добавить("тер");
		МассивСокращений.Добавить("п/ст");
		МассивСокращений.Добавить("промзона");
		МассивСокращений.Добавить("снт");
		МассивСокращений.Добавить("п/о");
		МассивСокращений.Добавить("городок");
		МассивСокращений.Добавить("заимка");
		МассивСокращений.Добавить("кп");
		МассивСокращений.Добавить("ж/д_казарм");
		МассивСокращений.Добавить("г");
		МассивСокращений.Добавить("г.");
		МассивСокращений.Добавить("обл");
		// Для улиц.
	ИначеЕсли ВидСокращение = 5 Тогда
		МассивСокращений.Добавить("ул");
		МассивСокращений.Добавить("ул.");
		МассивСокращений.Добавить("тер");
		МассивСокращений.Добавить("пл");
		МассивСокращений.Добавить("пер");
		МассивСокращений.Добавить("пер.");
		МассивСокращений.Добавить("снт");
		МассивСокращений.Добавить("проезд");
		МассивСокращений.Добавить("б-р");
		МассивСокращений.Добавить("туп");
		МассивСокращений.Добавить("п");
		МассивСокращений.Добавить("ш");
		МассивСокращений.Добавить("пр-кт");
		МассивСокращений.Добавить("тракт");
		МассивСокращений.Добавить("сквер");
		МассивСокращений.Добавить("ст");
		МассивСокращений.Добавить("наб");
		МассивСокращений.Добавить("км");
		МассивСокращений.Добавить("ж/д_ст");
		МассивСокращений.Добавить("сад");
		МассивСокращений.Добавить("парк");
		МассивСокращений.Добавить("уч-к");
		МассивСокращений.Добавить("мкр");
		МассивСокращений.Добавить("городок");
		МассивСокращений.Добавить("кв-л");
		МассивСокращений.Добавить("нп");
		МассивСокращений.Добавить("остров");
		МассивСокращений.Добавить("гск");
		МассивСокращений.Добавить("линия");
		МассивСокращений.Добавить("рзд");
		МассивСокращений.Добавить("стр");
		МассивСокращений.Добавить("аллея");
		МассивСокращений.Добавить("казарма");
		МассивСокращений.Добавить("ж/д_рзд");
		МассивСокращений.Добавить("д");
		МассивСокращений.Добавить("ж/д_казарм");
		МассивСокращений.Добавить("ж/д_будка");
		МассивСокращений.Добавить("высел");
	КонецЕсли;
	
	Возврат МассивСокращений;
	
КонецФункции // СформироватьМассивСокращениеДляСвердловскойОблПоВиду()

// Получает таблицу данных с начислениями и необходимыми данными.
//
Процедура ПолучитьТаблицуНачисленийТамбов(ТаблицаДанныхФайла, ТаблицаАдресов, ТаблицаФИО, ПараметрыВыгрузки)
	
	ТаблицаИдентифицированныхЖильцов = ПолучитьТаблицуИдентифицированныхЖильцовТамбов(ТаблицаДанныхФайла, ТаблицаАдресов, ТаблицаФИО);
	
	Запрос = Новый Запрос;
	
	МенеджерВТ                     = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	// Параметры.
	
	Запрос.УстановитьПараметр("ДатаНачала",             НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ДатаКонца",              КонецМесяца(Период));
	Запрос.УстановитьПараметр("ТекущийМесяц",           НачалоДня(КонецМесяца(Период)));
	Запрос.УстановитьПараметр("Организация",            Организация);
	Запрос.УстановитьПараметр("ТаблицаИзФайла",         ТаблицаДанныхФайла);
	Запрос.УстановитьПараметр("ТаблицаИдентифЖильцов",  ТаблицаИдентифицированныхЖильцов);
	
	Запрос.УстановитьПараметр("ВидОтапливаемойПлощади",   ПараметрыВыгрузки.ВидОтапливаемойПлощади);
	Запрос.УстановитьПараметр("КодУслугиОтопления",       ПараметрыВыгрузки.КодУслугиОтопления);
	Запрос.УстановитьПараметр("СписокКодовУслугВыгрузки", ПараметрыВыгрузки.СписокКодовУслугВыгрузки);
	
	Запрос.УстановитьПараметр("ЛьготныеКатегории", ТамбовскаяОбласть_ЛьготныеКатегории.Выгрузить());
	Запрос.УстановитьПараметр("ЖКУ_ВБазе",         ТамбовскаяОбласть_ЖКУ_ВБазе.Выгрузить());
	
	Запрос.УстановитьПараметр("ОрганизацияЗависимыхУслуг", ?(Константы.УПЖКХ_НачислениеЗависимыхУслугВРазрезеОрганизаций.Получить(), Организация, Справочники.Организации.ПустаяСсылка()));
	
	Запрос.УстановитьПараметр("УказыватьКоличествоПрожИЗарегЧислами", Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Получить());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИзФайла.NPD,
	|	ТаблицаИзФайла.FAM,
	|	ТаблицаИзФайла.IM,
	|	ТаблицаИзФайла.OT,
	|	ТаблицаИзФайла.PIN,
	|	ТаблицаИзФайла.RG,
	|	ТаблицаИзФайла.NSP,
	|	ТаблицаИзФайла.ULC,
	|	ТаблицаИзФайла.DOM,
	|	ТаблицаИзФайла.KOR,
	|	ТаблицаИзФайла.KVR,
	|	ТаблицаИзФайла.SERIES,
	|	ТаблицаИзФайла.NDOC,
	|	ТаблицаИзФайла.ACCOUNT,
	|	ТаблицаИзФайла.OKS,
	|	ТаблицаИзФайла.KOLIG,
	|	ТаблицаИзФайла.KOLLGTP,
	|	ТаблицаИзФайла.KODK,
	|	ТаблицаИзФайла.SUM,
	|	ТаблицаИзФайла.KMS,
	|	ТаблицаИзФайла.GOD
	|ПОМЕСТИТЬ втТаблицаДанныхИзФайлаБезГруппировки
	|ИЗ
	|	&ТаблицаИзФайла КАК ТаблицаИзФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(втТаблицаДанныхИзФайлаБезГруппировки.NPD) КАК NPD,
	|	втТаблицаДанныхИзФайлаБезГруппировки.FAM КАК FAM,
	|	втТаблицаДанныхИзФайлаБезГруппировки.IM КАК IM,
	|	втТаблицаДанныхИзФайлаБезГруппировки.OT КАК OT,
	|	МАКСИМУМ(втТаблицаДанныхИзФайлаБезГруппировки.PIN) КАК PIN,
	|	МАКСИМУМ(втТаблицаДанныхИзФайлаБезГруппировки.RG) КАК RG,
	|	МАКСИМУМ(втТаблицаДанныхИзФайлаБезГруппировки.NSP) КАК NSP,
	|	МАКСИМУМ(втТаблицаДанныхИзФайлаБезГруппировки.ULC) КАК ULC,
	|	МАКСИМУМ(втТаблицаДанныхИзФайлаБезГруппировки.DOM) КАК DOM,
	|	МАКСИМУМ(втТаблицаДанныхИзФайлаБезГруппировки.KOR) КАК KOR,
	|	МАКСИМУМ(втТаблицаДанныхИзФайлаБезГруппировки.KVR) КАК KVR,
	|	МАКСИМУМ(втТаблицаДанныхИзФайлаБезГруппировки.SERIES) КАК SERIES,
	|	МАКСИМУМ(втТаблицаДанныхИзФайлаБезГруппировки.NDOC) КАК NDOC,
	|	втТаблицаДанныхИзФайлаБезГруппировки.ACCOUNT,
	|	МАКСИМУМ(втТаблицаДанныхИзФайлаБезГруппировки.OKS) КАК OKS,
	|	МАКСИМУМ(втТаблицаДанныхИзФайлаБезГруппировки.KOLIG) КАК KOLIG,
	|	МАКСИМУМ(втТаблицаДанныхИзФайлаБезГруппировки.KOLLGTP) КАК KOLLGTP,
	|	МАКСИМУМ(втТаблицаДанныхИзФайлаБезГруппировки.KODK) КАК KODK,
	|	МАКСИМУМ(втТаблицаДанныхИзФайлаБезГруппировки.SUM) КАК SUM,
	|	МАКСИМУМ(втТаблицаДанныхИзФайлаБезГруппировки.KMS) КАК KMS,
	|	МАКСИМУМ(втТаблицаДанныхИзФайлаБезГруппировки.GOD) КАК GOD
	|ПОМЕСТИТЬ втТаблицаДанныхИзФайла
	|ИЗ
	|	втТаблицаДанныхИзФайлаБезГруппировки КАК втТаблицаДанныхИзФайлаБезГруппировки
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаДанныхИзФайлаБезГруппировки.ACCOUNT,
	|	втТаблицаДанныхИзФайлаБезГруппировки.FAM,
	|	втТаблицаДанныхИзФайлаБезГруппировки.IM,
	|	втТаблицаДанныхИзФайлаБезГруппировки.OT
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУслуг.КодУслугиВОСЗН,
	|	ТаблицаУслуг.УслугаВБазе,
	|	ТаблицаУслуг.УслугаВОСЗН,
	|	ТаблицаУслуг.УслугаОДН
	|ПОМЕСТИТЬ втУслугиБезПризнакаОДН
	|ИЗ
	|	&ЖКУ_ВБазе КАК ТаблицаУслуг
	|ГДЕ
	|	ТаблицаУслуг.КодУслугиВОСЗН В(&СписокКодовУслугВыгрузки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втУслугиБезПризнакаОДН.КодУслугиВОСЗН,
	|	втУслугиБезПризнакаОДН.УслугаВБазе,
	|	втУслугиБезПризнакаОДН.УслугаВОСЗН
	|ПОМЕСТИТЬ втУслугиОДН
	|ИЗ
	|	втУслугиБезПризнакаОДН КАК втУслугиБезПризнакаОДН
	|ГДЕ
	|	втУслугиБезПризнакаОДН.УслугаОДН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втУслугиБезПризнакаОДН.КодУслугиВОСЗН,
	|	втУслугиБезПризнакаОДН.УслугаВБазе,
	|	втУслугиБезПризнакаОДН.УслугаВОСЗН,
	|	втУслугиБезПризнакаОДН.УслугаОДН,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втУслугиОДН.УслугаВОСЗН, """") = """"
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УслугаТолькоПоИПУ
	|ПОМЕСТИТЬ втУслуги
	|ИЗ
	|	втУслугиБезПризнакаОДН КАК втУслугиБезПризнакаОДН
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУслугиОДН КАК втУслугиОДН
	|		ПО втУслугиБезПризнакаОДН.УслугаВБазе = втУслугиОДН.УслугаВБазе
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЛьготныеКатегории.КодКатегории,
	|	ЛьготныеКатегории.ОтноситсяКМногодетнымСемьям
	|ПОМЕСТИТЬ втЛьготныеКатегории
	|ИЗ
	|	&ЛьготныеКатегории КАК ЛьготныеКатегории
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаИдентифЖильцов.ЛицевойСчет,
	|	ТаблицаИдентифЖильцов.ИдентификаторЛС,
	|	ТаблицаИдентифЖильцов.НаселенныйПункт КАК Город,
	|	ТаблицаИдентифЖильцов.Улица,
	|	ТаблицаИдентифЖильцов.Дом,
	|	ТаблицаИдентифЖильцов.Корпус,
	|	ТаблицаИдентифЖильцов.Квартира
	|ПОМЕСТИТЬ втИдентифицированныеЖильцы
	|ИЗ
	|	&ТаблицаИдентифЖильцов КАК ТаблицаИдентифЖильцов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Владелец КАК Здание,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Адрес КАК Помещение,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Адрес.КоличествоКомнат КАК ПомещениеКоличествоКомнат
	|ПОМЕСТИТЬ втЛицевыеСчетаПодготовка
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втИдентифицированныеЖильцы.ЛицевойСчет
	|				ИЗ
	|					втИдентифицированныеЖильцы КАК втИдентифицированныеЖильцы)) КАК КВП_ЛицевыеСчетаСрезПоследних
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.ЛицевойСчет,
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.КоличествоЗарегистрированных,
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.КоличествоПроживающих
	|ПОМЕСТИТЬ втУчетКоличестваЖильцов
	|ИЗ
	|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втЛицевыеСчетаПодготовка.ЛицевойСчет
	|				ИЗ
	|					втЛицевыеСчетаПодготовка КАК втЛицевыеСчетаПодготовка)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец) КАК КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втЗарегистрированоРС
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втЛицевыеСчетаПодготовка.ЛицевойСчет
	|				ИЗ
	|					втЛицевыеСчетаПодготовка КАК втЛицевыеСчетаПодготовка)) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец) КАК КоличествоПроживающих
	|ПОМЕСТИТЬ втПроживаетРС
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втЛицевыеСчетаПодготовка.ЛицевойСчет
	|				ИЗ
	|					втЛицевыеСчетаПодготовка КАК втЛицевыеСчетаПодготовка)) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛицевыеСчетаПодготовка.ЛицевойСчет,
	|	втЛицевыеСчетаПодготовка.Здание,
	|	втЛицевыеСчетаПодготовка.Помещение,
	|	втЛицевыеСчетаПодготовка.ПомещениеКоличествоКомнат,
	|	ВЫБОР
	|		КОГДА &УказыватьКоличествоПрожИЗарегЧислами = ИСТИНА
	|			ТОГДА ЕСТЬNULL(втУчетКоличестваЖильцов.КоличествоЗарегистрированных, 0)
	|		ИНАЧЕ ЕСТЬNULL(втЗарегистрированоРС.КоличествоЗарегистрированных, 0)
	|	КОНЕЦ КАК КоличествоЗарегистрированных,
	|	ВЫБОР
	|		КОГДА &УказыватьКоличествоПрожИЗарегЧислами = ИСТИНА
	|			ТОГДА ЕСТЬNULL(втУчетКоличестваЖильцов.КоличествоПроживающих, 0)
	|		ИНАЧЕ ЕСТЬNULL(втПроживаетРС.КоличествоПроживающих, 0)
	|	КОНЕЦ КАК КоличествоПроживающих
	|ПОМЕСТИТЬ втЛицевыеСчета
	|ИЗ
	|	втЛицевыеСчетаПодготовка КАК втЛицевыеСчетаПодготовка
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУчетКоличестваЖильцов КАК втУчетКоличестваЖильцов
	|		ПО втЛицевыеСчетаПодготовка.ЛицевойСчет = втУчетКоличестваЖильцов.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЗарегистрированоРС КАК втЗарегистрированоРС
	|		ПО втЛицевыеСчетаПодготовка.ЛицевойСчет = втЗарегистрированоРС.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПроживаетРС КАК втПроживаетРС
	|		ПО втЛицевыеСчетаПодготовка.ЛицевойСчет = втПроживаетРС.ЛицевойСчет";
	
	Запрос.Выполнить();
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект,
	|	КВП_ПлощадьПомещенияСрезПоследних.ВидПлощади,
	|	КВП_ПлощадьПомещенияСрезПоследних.Площадь
	|ПОМЕСТИТЬ втПлощадиПомещений
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|			&ДатаКонца,
	|			Объект В
	|				(ВЫБРАТЬ
	|					втЛицевыеСчета.Помещение
	|				ИЗ
	|					втЛицевыеСчета КАК втЛицевыеСчета)) КАК КВП_ПлощадьПомещенияСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.Объект,
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет,
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель,
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель,
	|	ВЫБОР
	|		КОГДА КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель = 0
	|			ТОГДА 0
	|		ИНАЧЕ КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель / КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель
	|	КОНЕЦ КАК Доля
	|ПОМЕСТИТЬ втРазмерыДолейЛС
	|ИЗ
	|	РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втЛицевыеСчета.ЛицевойСчет
	|				ИЗ
	|					втЛицевыеСчета КАК втЛицевыеСчета)) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втРазмерыДолейЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втПлощадиПомещений.ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)
	|				ТОГДА ЕСТЬNULL(втПлощадиПомещений.Площадь, 0) * втРазмерыДолейЛС.Доля
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОбщаяПлощадь,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втПлощадиПомещений.ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ЖилаяПлощадь)
	|				ТОГДА ЕСТЬNULL(втПлощадиПомещений.Площадь, 0) * втРазмерыДолейЛС.Доля
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ЖилаяПлощадь,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втПлощадиПомещений.ВидПлощади = &ВидОтапливаемойПлощади
	|				ТОГДА ЕСТЬNULL(втПлощадиПомещений.Площадь, 0) * втРазмерыДолейЛС.Доля
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ОтапливаемаяПлощадь
	|ПОМЕСТИТЬ втДанныеОПлощадях
	|ИЗ
	|	втРазмерыДолейЛС КАК втРазмерыДолейЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПлощадиПомещений КАК втПлощадиПомещений
	|		ПО втРазмерыДолейЛС.Объект = втПлощадиПомещений.Объект
	|
	|СГРУППИРОВАТЬ ПО
	|	втРазмерыДолейЛС.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛицевыеСчета.ЛицевойСчет,
	|	втЛицевыеСчета.Помещение,
	|	втЛицевыеСчета.Здание,
	|	втЛицевыеСчета.ПомещениеКоличествоКомнат,
	|	ЕСТЬNULL(втДанныеОПлощадях.ОбщаяПлощадь, 0) КАК ОбщаяПлощадь,
	|	ЕСТЬNULL(втДанныеОПлощадях.ЖилаяПлощадь, 0) КАК ЖилаяПлощадь,
	|	ЕСТЬNULL(втДанныеОПлощадях.ОтапливаемаяПлощадь, 0) КАК ОтапливаемаяПлощадь,
	|	втЛицевыеСчета.КоличествоЗарегистрированных,
	|	втЛицевыеСчета.КоличествоПроживающих
	|ПОМЕСТИТЬ втДанныеСПлощадями
	|ИЗ
	|	втЛицевыеСчета КАК втЛицевыеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеОПлощадях КАК втДанныеОПлощадях
	|		ПО втЛицевыеСчета.ЛицевойСчет = втДанныеОПлощадях.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втДанныеСПлощадями.ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_Помещения.Ссылка) КАК Доля
	|ПОМЕСТИТЬ втДанныеИзСправочника
	|ИЗ
	|	втДанныеСПлощадями КАК втДанныеСПлощадями
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
	|		ПО втДанныеСПлощадями.Помещение = УПЖКХ_Помещения.Родитель
	|ГДЕ
	|	НЕ УПЖКХ_Помещения.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	втДанныеСПлощадями.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втДанныеСПлощадями.ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.Комната) КАК Доля
	|ПОМЕСТИТЬ втДанныеИзСведений
	|ИЗ
	|	втДанныеСПлощадями КАК втДанныеСПлощадями
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ПривязанныеКЛицевомуСчетуКомнаты.СрезПоследних(
	|				&ДатаКонца,
	|				ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втДанныеСПлощадями.ЛицевойСчет
	|					ИЗ
	|						втДанныеСПлощадями КАК втДанныеСПлощадями)) КАК УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних
	|		ПО втДанныеСПлощадями.ЛицевойСчет = УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.ЛицевойСчет
	|ГДЕ
	|	УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.Привязка
	|
	|СГРУППИРОВАТЬ ПО
	|	втДанныеСПлощадями.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеСПлощадями.ЛицевойСчет,
	|	втДанныеСПлощадями.Помещение,
	|	втДанныеСПлощадями.Здание,
	|	втДанныеСПлощадями.ОбщаяПлощадь,
	|	втДанныеСПлощадями.ЖилаяПлощадь,
	|	втДанныеСПлощадями.ОтапливаемаяПлощадь,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НЕ втДанныеИзСведений.Доля = 0
	|				ТОГДА втДанныеИзСведений.Доля
	|			КОГДА НЕ втДанныеИзСправочника.Доля = 0
	|				ТОГДА втДанныеИзСправочника.Доля
	|			ИНАЧЕ втДанныеСПлощадями.ПомещениеКоличествоКомнат
	|		КОНЕЦ, -1) КАК КоличествоКомнат,
	|	втДанныеСПлощадями.КоличествоЗарегистрированных,
	|	втДанныеСПлощадями.КоличествоПроживающих
	|ПОМЕСТИТЬ втДанныеСКомнатами
	|ИЗ
	|	втДанныеСПлощадями КАК втДанныеСПлощадями
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеИзСправочника КАК втДанныеИзСправочника
	|		ПО втДанныеСПлощадями.ЛицевойСчет = втДанныеИзСправочника.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеИзСведений КАК втДанныеИзСведений
	|		ПО втДанныеСПлощадями.ЛицевойСчет = втДанныеИзСведений.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втЛицевыеСчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втДанныеОПлощадях
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втРазмерыДолейЛС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втПлощадиПомещений";
	
	Запрос.Выполнить();
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА КВП_БлагоустройствоОбъектов.ВидБлагоустройства = ЗНАЧЕНИЕ(Справочник.КВП_ВидыБлагоустройстваОбъектов.Плита)
	|				ТОГДА ВЫБОР
	|						КОГДА КВП_БлагоустройствоОбъектов.Значение = ЗНАЧЕНИЕ(Перечисление.КВП_Плита.Электрическая)
	|							ТОГДА 1
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НаличиеЭлектроплиты,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА КВП_БлагоустройствоОбъектов.ВидБлагоустройства = ЗНАЧЕНИЕ(Справочник.КВП_ВидыБлагоустройстваОбъектов.ГорячееВодоснабжение)
	|				ТОГДА ВЫБОР
	|						КОГДА КВП_БлагоустройствоОбъектов.Значение = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипыГорячегоВодоснабжения.Водонагреватель)
	|							ТОГДА 1
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК НаличиеЭлектроВодоНагревателя,
	|	КВП_БлагоустройствоОбъектов.Объект КАК Помещение
	|ПОМЕСТИТЬ втСвойстваПомещений
	|ИЗ
	|	РегистрСведений.КВП_БлагоустройствоОбъектов КАК КВП_БлагоустройствоОбъектов
	|ГДЕ
	|	КВП_БлагоустройствоОбъектов.Объект В
	|			(ВЫБРАТЬ
	|				втДанныеСКомнатами.Помещение
	|			ИЗ
	|				втДанныеСКомнатами КАК втДанныеСКомнатами)
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_БлагоустройствоОбъектов.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеСКомнатами.ЛицевойСчет,
	|	втДанныеСКомнатами.Помещение,
	|	втДанныеСКомнатами.Здание,
	|	втДанныеСКомнатами.ОбщаяПлощадь,
	|	втДанныеСКомнатами.ЖилаяПлощадь,
	|	втДанныеСКомнатами.ОтапливаемаяПлощадь,
	|	втДанныеСКомнатами.КоличествоКомнат,
	|	втДанныеСКомнатами.КоличествоЗарегистрированных,
	|	втДанныеСКомнатами.КоличествоПроживающих,
	|	ЕСТЬNULL(втСвойстваПомещений.НаличиеЭлектроплиты, 0) КАК НаличиеЭлектроплиты,
	|	ЕСТЬNULL(втСвойстваПомещений.НаличиеЭлектроВодоНагревателя, 0) КАК НаличиеЭлектроВодоНагревателя
	|ПОМЕСТИТЬ втДанныеСоСвойствамиПомещений
	|ИЗ
	|	втДанныеСКомнатами КАК втДанныеСКомнатами
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСвойстваПомещений КАК втСвойстваПомещений
	|		ПО втДанныеСКомнатами.Помещение = втСвойстваПомещений.Помещение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втДанныеСКомнатами
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втСвойстваПомещений";
	
	Запрос.Выполнить();
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга,
	|	МИНИМУМ(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.МесяцНачисления) КАК МесяцНачисления
	|ПОМЕСТИТЬ втПервыеМесяцыЗадолженности
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&ДатаКонца,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втДанныеСоСвойствамиПомещений.ЛицевойСчет
	|					ИЗ
	|						втДанныеСоСвойствамиПомещений КАК втДанныеСоСвойствамиПомещений)
	|				И Услуга В
	|					(ВЫБРАТЬ
	|						втУслуги.УслугаВБазе
	|					ИЗ
	|						втУслуги КАК втУслуги)
	|				И НЕ МесяцНачисления = &ТекущийМесяц) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|ГДЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга,
	|	СУММА(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток) КАК Задолженность
	|ПОМЕСТИТЬ втСуммыЗадолженности
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&ДатаНачала,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втДанныеСоСвойствамиПомещений.ЛицевойСчет
	|					ИЗ
	|						втДанныеСоСвойствамиПомещений КАК втДанныеСоСвойствамиПомещений)
	|				И Услуга В
	|					(ВЫБРАТЬ
	|						втУслуги.УслугаВБазе
	|					ИЗ
	|						втУслуги КАК втУслуги)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|ГДЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.Тариф КАК ТарифНаЖКУ,
	|	ВЫБОР
	|		КОГДА НЕ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|			ТОГДА ВЫБОР
	|					КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|							И УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот < 0
	|						ТОГДА -УПЖКХ_НачисленияОбороты.Количество
	|					ИНАЧЕ УПЖКХ_НачисленияОбороты.Количество
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОбъемУслугиИПУ,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|			ТОГДА УПЖКХ_НачисленияОбороты.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОбъемУслугиОПУ,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу))
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОбъемУслугиОпределенПо,
	|	ВЫБОР
	|		КОГДА НЕ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|			ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НачисленоИПУ,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|			ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НачисленоОПУ,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|			ТОГДА ""1""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ПризнакПерерасчета,
	|	УПЖКХ_НачисленияОбороты.ДнейНачисленоОборот,
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет.Адрес КАК Помещение,
	|	УПЖКХ_НачисленияОбороты.Услуга.ВидУслуги.ЕдиницаИзмерения.Наименование КАК UNIT
	|ПОМЕСТИТЬ втНачисления
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНачала,
	|			&ДатаКонца,
	|			Запись,
	|			ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втДанныеСоСвойствамиПомещений.ЛицевойСчет
	|					ИЗ
	|						втДанныеСоСвойствамиПомещений КАК втДанныеСоСвойствамиПомещений)
	|				И Услуга В
	|					(ВЫБРАТЬ
	|						втУслуги.УслугаВБазе
	|					ИЗ
	|						втУслуги КАК втУслуги)
	|				И Организация = &Организация
	|				И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
	|				И НЕ РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени))) КАК УПЖКХ_НачисленияОбороты
	|ГДЕ
	|	ВЫБОР
	|			КОГДА УПЖКХ_НачисленияОбороты.Регистратор ССЫЛКА Документ.КВП_РегистрацияОплаты
	|				ТОГДА НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Рассрочка)
	|						И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Комиссия))
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачисления.ЛицевойСчет,
	|	втНачисления.Помещение,
	|	втНачисления.Услуга,
	|	втНачисления.UNIT,
	|	втНачисления.ТарифНаЖКУ,
	|	втНачисления.ОбъемУслугиИПУ,
	|	втНачисления.ОбъемУслугиОПУ,
	|	втНачисления.ОбъемУслугиОпределенПо,
	|	втНачисления.НачисленоИПУ,
	|	втНачисления.НачисленоОПУ,
	|	втНачисления.ПризнакПерерасчета,
	|	втНачисления.ДнейНачисленоОборот,
	|	втУслуги.КодУслугиВОСЗН,
	|	втУслуги.УслугаВОСЗН,
	|	втУслуги.УслугаОДН,
	|	втУслуги.УслугаТолькоПоИПУ
	|ПОМЕСТИТЬ втНачисленияСУслугамиОСЗН
	|ИЗ
	|	втНачисления КАК втНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втУслуги КАК втУслуги
	|		ПО втНачисления.Услуга = втУслуги.УслугаВБазе
	|			И (ВЫБОР
	|				КОГДА втУслуги.УслугаОДН
	|					ТОГДА НЕ втНачисления.НачисленоОПУ = 0
	|				ИНАЧЕ ВЫБОР
	|						КОГДА втУслуги.УслугаТолькоПоИПУ
	|							ТОГДА ИСТИНА
	|						ИНАЧЕ НЕ втНачисления.НачисленоИПУ = 0
	|					КОНЕЦ
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления
	|ПОМЕСТИТЬ втНормыПотребления
	|ИЗ
	|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(
	|			&ДатаКонца,
	|			(ЛицевойСчет, Услуга) В
	|				(ВЫБРАТЬ
	|					втНачисленияСУслугамиОСЗН.ЛицевойСчет,
	|					втНачисленияСУслугамиОСЗН.Услуга
	|				ИЗ
	|					втНачисленияСУслугамиОСЗН КАК втНачисленияСУслугамиОСЗН)) КАК КВП_НормыПотребленияУслугЛССрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет КАК Здание,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления
	|ПОМЕСТИТЬ втНормыПотребленияЗданий
	|ИЗ
	|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(
	|			&ДатаКонца,
	|			(ЛицевойСчет, Услуга) В
	|				(ВЫБРАТЬ
	|					втНачисленияСУслугамиОСЗН.Помещение.Владелец,
	|					втНачисленияСУслугамиОСЗН.Услуга
	|				ИЗ
	|					втНачисленияСУслугамиОСЗН КАК втНачисленияСУслугамиОСЗН)) КАК КВП_НормыПотребленияУслугЛССрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачисленияСУслугамиОСЗН.ЛицевойСчет,
	|	втНачисленияСУслугамиОСЗН.Помещение,
	|	втНачисленияСУслугамиОСЗН.Услуга,
	|	втНачисленияСУслугамиОСЗН.UNIT,
	|	втНачисленияСУслугамиОСЗН.ТарифНаЖКУ,
	|	втНачисленияСУслугамиОСЗН.ОбъемУслугиИПУ,
	|	втНачисленияСУслугамиОСЗН.ОбъемУслугиОПУ,
	|	втНачисленияСУслугамиОСЗН.ОбъемУслугиОпределенПо,
	|	втНачисленияСУслугамиОСЗН.НачисленоИПУ,
	|	втНачисленияСУслугамиОСЗН.НачисленоОПУ,
	|	втНачисленияСУслугамиОСЗН.ПризнакПерерасчета,
	|	втНачисленияСУслугамиОСЗН.ДнейНачисленоОборот,
	|	втНачисленияСУслугамиОСЗН.КодУслугиВОСЗН,
	|	втНачисленияСУслугамиОСЗН.УслугаВОСЗН,
	|	втНачисленияСУслугамиОСЗН.УслугаОДН,
	|	втНачисленияСУслугамиОСЗН.УслугаТолькоПоИПУ,
	|	ЕСТЬNULL(втНормыПотребления.НормаПотребления, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)) КАК НормаПотребления,
	|	ЕСТЬNULL(втНормыПотребленияЗданий.НормаПотребления, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)) КАК НормаПотребленияЗдания
	|ПОМЕСТИТЬ втДанныеДляОтбораНачисленийБезГруппировки
	|ИЗ
	|	втНачисленияСУслугамиОСЗН КАК втНачисленияСУслугамиОСЗН
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНормыПотребления КАК втНормыПотребления
	|		ПО втНачисленияСУслугамиОСЗН.ЛицевойСчет = втНормыПотребления.ЛицевойСчет
	|			И втНачисленияСУслугамиОСЗН.Услуга = втНормыПотребления.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНормыПотребленияЗданий КАК втНормыПотребленияЗданий
	|		ПО втНачисленияСУслугамиОСЗН.Помещение.Владелец = втНормыПотребленияЗданий.Здание
	|			И втНачисленияСУслугамиОСЗН.Услуга = втНормыПотребленияЗданий.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект КАК Объект,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги КАК Услуга
	|ПОМЕСТИТЬ втЗакрепленныеСчетчики
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&ДатаКонца,
	|			Счетчик.ВидУслуги В
	|					(ВЫБРАТЬ
	|						втДанныеДляОтбораНачисленийБезГруппировки.Услуга
	|					ИЗ
	|						втДанныеДляОтбораНачисленийБезГруппировки КАК втДанныеДляОтбораНачисленийБезГруппировки)
	|				И (Объект В
	|						(ВЫБРАТЬ
	|							втДанныеДляОтбораНачисленийБезГруппировки.ЛицевойСчет
	|						ИЗ
	|							втДанныеДляОтбораНачисленийБезГруппировки КАК втДанныеДляОтбораНачисленийБезГруппировки)
	|					ИЛИ Объект В
	|						(ВЫБРАТЬ
	|							втДанныеДляОтбораНачисленийБезГруппировки.Помещение
	|						ИЗ
	|							втДанныеДляОтбораНачисленийБезГруппировки КАК втДанныеДляОтбораНачисленийБезГруппировки))
	|				И ДатаИзменения <= &ДатаКонца) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеДляОтбораНачисленийБезГруппировки.ЛицевойСчет,
	|	втДанныеДляОтбораНачисленийБезГруппировки.Помещение,
	|	втДанныеДляОтбораНачисленийБезГруппировки.Услуга,
	|	втДанныеДляОтбораНачисленийБезГруппировки.UNIT,
	|	втДанныеДляОтбораНачисленийБезГруппировки.ТарифНаЖКУ,
	|	втДанныеДляОтбораНачисленийБезГруппировки.ОбъемУслугиИПУ,
	|	втДанныеДляОтбораНачисленийБезГруппировки.ОбъемУслугиОПУ,
	|	втДанныеДляОтбораНачисленийБезГруппировки.ОбъемУслугиОпределенПо,
	|	втДанныеДляОтбораНачисленийБезГруппировки.НачисленоИПУ,
	|	втДанныеДляОтбораНачисленийБезГруппировки.НачисленоОПУ,
	|	втДанныеДляОтбораНачисленийБезГруппировки.ПризнакПерерасчета,
	|	втДанныеДляОтбораНачисленийБезГруппировки.ДнейНачисленоОборот,
	|	втДанныеДляОтбораНачисленийБезГруппировки.КодУслугиВОСЗН,
	|	втДанныеДляОтбораНачисленийБезГруппировки.УслугаВОСЗН,
	|	втДанныеДляОтбораНачисленийБезГруппировки.УслугаОДН,
	|	втДанныеДляОтбораНачисленийБезГруппировки.УслугаТолькоПоИПУ,
	|	втДанныеДляОтбораНачисленийБезГруппировки.НормаПотребления,
	|	втДанныеДляОтбораНачисленийБезГруппировки.НормаПотребленияЗдания,
	|	ВЫБОР
	|		КОГДА втЗакрепленныеСчетчики.Услуга ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ПризнакИПУ,
	|	ЕСТЬNULL(втПервыеМесяцыЗадолженности.МесяцНачисления, ДАТАВРЕМЯ(1, 1, 1)) КАК ПервыйМесяцЗадолженности,
	|	ЕСТЬNULL(втСуммыЗадолженности.Задолженность, 0) КАК Задолженность
	|ПОМЕСТИТЬ втДанныеДляОтбораНачисленийСИПУБезГруппировкиДоЗаполненияТарифов
	|ИЗ
	|	втДанныеДляОтбораНачисленийБезГруппировки КАК втДанныеДляОтбораНачисленийБезГруппировки
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПервыеМесяцыЗадолженности КАК втПервыеМесяцыЗадолженности
	|		ПО втДанныеДляОтбораНачисленийБезГруппировки.ЛицевойСчет = втПервыеМесяцыЗадолженности.ЛицевойСчет
	|			И втДанныеДляОтбораНачисленийБезГруппировки.Услуга = втПервыеМесяцыЗадолженности.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСуммыЗадолженности КАК втСуммыЗадолженности
	|		ПО втДанныеДляОтбораНачисленийБезГруппировки.ЛицевойСчет = втСуммыЗадолженности.ЛицевойСчет
	|			И втДанныеДляОтбораНачисленийБезГруппировки.Услуга = втСуммыЗадолженности.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЗакрепленныеСчетчики КАК втЗакрепленныеСчетчики
	|		ПО втДанныеДляОтбораНачисленийБезГруппировки.Услуга = втЗакрепленныеСчетчики.Услуга
	|			И (втДанныеДляОтбораНачисленийБезГруппировки.ЛицевойСчет = втЗакрепленныеСчетчики.Объект
	|				ИЛИ втДанныеДляОтбораНачисленийБезГруппировки.Помещение = втЗакрепленныеСчетчики.Объект)";
	
	Запрос.Выполнить();
	
	ЗапросПоТарифам = Новый Запрос;
	ЗапросПоТарифам.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросПоТарифам.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втДанныеДляОтбораНачисленийСИПУБезГруппировки.ЛицевойСчет,
	|	втДанныеДляОтбораНачисленийСИПУБезГруппировки.Услуга,
	|	втДанныеДляОтбораНачисленийСИПУБезГруппировки.ТарифНаЖКУ,
	|	втДанныеДляОтбораНачисленийСИПУБезГруппировки.КодУслугиВОСЗН
	|ИЗ
	|	втДанныеДляОтбораНачисленийСИПУБезГруппировкиДоЗаполненияТарифов КАК втДанныеДляОтбораНачисленийСИПУБезГруппировки
	|ГДЕ
	|	втДанныеДляОтбораНачисленийСИПУБезГруппировки.ТарифНаЖКУ = 0";
	
	СтрокиСНеЗаполненнымиТарифами = ЗапросПоТарифам.Выполнить().Выгрузить();
	
	Для Каждого СтрокаСНеЗаполненнымиТарифами ИЗ СтрокиСНеЗаполненнымиТарифами Цикл
		СтрокаСНеЗаполненнымиТарифами.ТарифНаЖКУ = ПолучитьТарифПоЛицевомуСчету(КонецМесяца(Период), Организация, СтрокаСНеЗаполненнымиТарифами.Услуга, СтрокаСНеЗаполненнымиТарифами.ЛицевойСчет);
	КонецЦикла;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	| *
	|ПОМЕСТИТЬ втДанныеДляОтбораНачисленийСИПУБезГруппировкиСЗаполненнымиНаСторонеТарифами
	|ИЗ
	|	&ЗаполненныеТарифы КАК ЗаполненныеТарифы";
	
	Запрос.УстановитьПараметр("ЗаполненныеТарифы", СтрокиСНеЗаполненнымиТарифами);
	
	Запрос.Выполнить();
	
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	Запрос.Текст =
	"ВЫБРАТЬ
	|	втДанныеДляОтбораНачисленийСИПУБезГруппировкиДоЗаполненияТарифов.ЛицевойСчет,
	|	втДанныеДляОтбораНачисленийСИПУБезГруппировкиДоЗаполненияТарифов.Помещение,
	|	втДанныеДляОтбораНачисленийСИПУБезГруппировкиДоЗаполненияТарифов.Услуга,
	|	втДанныеДляОтбораНачисленийСИПУБезГруппировкиДоЗаполненияТарифов.UNIT,
	|	ВЫБОР
	|		КОГДА втДанныеДляОтбораНачисленийСИПУБезГруппировкиДоЗаполненияТарифов.ТарифНаЖКУ = 0
	|			ТОГДА ЕСТЬNULL(втДанныеДляОтбораНачисленийСИПУБезГруппировкиСЗаполненнымиНаСторонеТарифами.ТарифНаЖКУ, 0)
	|		ИНАЧЕ втДанныеДляОтбораНачисленийСИПУБезГруппировкиДоЗаполненияТарифов.ТарифНаЖКУ
	|	КОНЕЦ КАК ТарифНаЖКУ,
	|	втДанныеДляОтбораНачисленийСИПУБезГруппировкиДоЗаполненияТарифов.ОбъемУслугиИПУ,
	|	втДанныеДляОтбораНачисленийСИПУБезГруппировкиДоЗаполненияТарифов.ОбъемУслугиОПУ,
	|	втДанныеДляОтбораНачисленийСИПУБезГруппировкиДоЗаполненияТарифов.ОбъемУслугиОпределенПо,
	|	втДанныеДляОтбораНачисленийСИПУБезГруппировкиДоЗаполненияТарифов.НачисленоИПУ,
	|	втДанныеДляОтбораНачисленийСИПУБезГруппировкиДоЗаполненияТарифов.НачисленоОПУ,
	|	втДанныеДляОтбораНачисленийСИПУБезГруппировкиДоЗаполненияТарифов.ПризнакПерерасчета,
	|	втДанныеДляОтбораНачисленийСИПУБезГруппировкиДоЗаполненияТарифов.ДнейНачисленоОборот,
	|	втДанныеДляОтбораНачисленийСИПУБезГруппировкиДоЗаполненияТарифов.КодУслугиВОСЗН,
	|	втДанныеДляОтбораНачисленийСИПУБезГруппировкиДоЗаполненияТарифов.УслугаВОСЗН,
	|	втДанныеДляОтбораНачисленийСИПУБезГруппировкиДоЗаполненияТарифов.УслугаОДН,
	|	втДанныеДляОтбораНачисленийСИПУБезГруппировкиДоЗаполненияТарифов.УслугаТолькоПоИПУ,
	|	втДанныеДляОтбораНачисленийСИПУБезГруппировкиДоЗаполненияТарифов.НормаПотребления,
	|	втДанныеДляОтбораНачисленийСИПУБезГруппировкиДоЗаполненияТарифов.НормаПотребленияЗдания,
	|	втДанныеДляОтбораНачисленийСИПУБезГруппировкиДоЗаполненияТарифов.ПризнакИПУ,
	|	втДанныеДляОтбораНачисленийСИПУБезГруппировкиДоЗаполненияТарифов.ПервыйМесяцЗадолженности,
	|	втДанныеДляОтбораНачисленийСИПУБезГруппировкиДоЗаполненияТарифов.Задолженность
	|ПОМЕСТИТЬ втДанныеДляОтбораНачисленийСИПУБезГруппировки
	|ИЗ
	|	втДанныеДляОтбораНачисленийСИПУБезГруппировкиДоЗаполненияТарифов КАК втДанныеДляОтбораНачисленийСИПУБезГруппировкиДоЗаполненияТарифов
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеДляОтбораНачисленийСИПУБезГруппировкиСЗаполненнымиНаСторонеТарифами КАК втДанныеДляОтбораНачисленийСИПУБезГруппировкиСЗаполненнымиНаСторонеТарифами
	|		ПО втДанныеДляОтбораНачисленийСИПУБезГруппировкиДоЗаполненияТарифов.ЛицевойСчет = втДанныеДляОтбораНачисленийСИПУБезГруппировкиСЗаполненнымиНаСторонеТарифами.ЛицевойСчет
	|			И втДанныеДляОтбораНачисленийСИПУБезГруппировкиДоЗаполненияТарифов.Услуга = втДанныеДляОтбораНачисленийСИПУБезГруппировкиСЗаполненнымиНаСторонеТарифами.Услуга
	|			И втДанныеДляОтбораНачисленийСИПУБезГруппировкиДоЗаполненияТарифов.КодУслугиВОСЗН = втДанныеДляОтбораНачисленийСИПУБезГруппировкиСЗаполненнымиНаСторонеТарифами.КодУслугиВОСЗН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеДляОтбораНачисленийСИПУБезГруппировки.ЛицевойСчет,
	|	втДанныеДляОтбораНачисленийСИПУБезГруппировки.КодУслугиВОСЗН,
	|	втДанныеДляОтбораНачисленийСИПУБезГруппировки.УслугаОДН,
	|	втДанныеДляОтбораНачисленийСИПУБезГруппировки.УслугаТолькоПоИПУ,
	|	МАКСИМУМ(втДанныеДляОтбораНачисленийСИПУБезГруппировки.UNIT) КАК UNIT,
	|	СУММА(втДанныеДляОтбораНачисленийСИПУБезГруппировки.ОбъемУслугиИПУ) КАК ОбъемУслугиИПУ,
	|	СУММА(втДанныеДляОтбораНачисленийСИПУБезГруппировки.ОбъемУслугиОПУ) КАК ОбъемУслугиОПУ,
	|	МАКСИМУМ(втДанныеДляОтбораНачисленийСИПУБезГруппировки.ОбъемУслугиОпределенПо) КАК ОбъемУслугиОпределенПо,
	|	СУММА(втДанныеДляОтбораНачисленийСИПУБезГруппировки.НачисленоИПУ) КАК НачисленоИПУ,
	|	СУММА(втДанныеДляОтбораНачисленийСИПУБезГруппировки.НачисленоОПУ) КАК НачисленоОПУ,
	|	МАКСИМУМ(втДанныеДляОтбораНачисленийСИПУБезГруппировки.ПризнакПерерасчета) КАК ПризнакПерерасчета,
	|	МАКСИМУМ(втДанныеДляОтбораНачисленийСИПУБезГруппировки.ДнейНачисленоОборот) КАК ДнейНачисленоОборот,
	|	МАКСИМУМ(втДанныеДляОтбораНачисленийСИПУБезГруппировки.НормаПотребления) КАК НормаПотребления,
	|	МАКСИМУМ(втДанныеДляОтбораНачисленийСИПУБезГруппировки.НормаПотребленияЗдания) КАК НормаПотребленияЗдания,
	|	МАКСИМУМ(втДанныеДляОтбораНачисленийСИПУБезГруппировки.ПризнакИПУ) КАК ПризнакИПУ,
	|	МИНИМУМ(втДанныеДляОтбораНачисленийСИПУБезГруппировки.ПервыйМесяцЗадолженности) КАК ПервыйМесяцЗадолженности,
	|	СУММА(втДанныеДляОтбораНачисленийСИПУБезГруппировки.Задолженность) КАК Задолженность
	|ПОМЕСТИТЬ втНачисленияСГруппировкойБезТарифа
	|ИЗ
	|	втДанныеДляОтбораНачисленийСИПУБезГруппировки КАК втДанныеДляОтбораНачисленийСИПУБезГруппировки
	|
	|СГРУППИРОВАТЬ ПО
	|	втДанныеДляОтбораНачисленийСИПУБезГруппировки.ЛицевойСчет,
	|	втДанныеДляОтбораНачисленийСИПУБезГруппировки.КодУслугиВОСЗН,
	|	втДанныеДляОтбораНачисленийСИПУБезГруппировки.УслугаОДН,
	|	втДанныеДляОтбораНачисленийСИПУБезГруппировки.УслугаТолькоПоИПУ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеДляОтбораНачисленийСИПУБезГруппировки.ЛицевойСчет,
	|	втДанныеДляОтбораНачисленийСИПУБезГруппировки.КодУслугиВОСЗН,
	|	втДанныеДляОтбораНачисленийСИПУБезГруппировки.УслугаОДН,
	|	СРЕДНЕЕ(втДанныеДляОтбораНачисленийСИПУБезГруппировки.ТарифНаЖКУ) КАК ТарифНаЖКУ
	|ПОМЕСТИТЬ втСредниеТарифы
	|ИЗ
	|	втДанныеДляОтбораНачисленийСИПУБезГруппировки КАК втДанныеДляОтбораНачисленийСИПУБезГруппировки
	|ГДЕ
	|	НЕ втДанныеДляОтбораНачисленийСИПУБезГруппировки.ТарифНаЖКУ = 0
	|
	|СГРУППИРОВАТЬ ПО
	|	втДанныеДляОтбораНачисленийСИПУБезГруппировки.ЛицевойСчет,
	|	втДанныеДляОтбораНачисленийСИПУБезГруппировки.КодУслугиВОСЗН,
	|	втДанныеДляОтбораНачисленийСИПУБезГруппировки.УслугаОДН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачисленияСГруппировкойБезТарифа.ЛицевойСчет,
	|	втНачисленияСГруппировкойБезТарифа.КодУслугиВОСЗН,
	|	втНачисленияСГруппировкойБезТарифа.UNIT,
	|	втНачисленияСГруппировкойБезТарифа.УслугаОДН,
	|	втНачисленияСГруппировкойБезТарифа.УслугаТолькоПоИПУ,
	|	ЕСТЬNULL(втСредниеТарифы.ТарифНаЖКУ, 0) КАК ТарифНаЖКУ,
	|	втНачисленияСГруппировкойБезТарифа.ОбъемУслугиИПУ,
	|	втНачисленияСГруппировкойБезТарифа.ОбъемУслугиОПУ,
	|	втНачисленияСГруппировкойБезТарифа.ОбъемУслугиОпределенПо,
	|	втНачисленияСГруппировкойБезТарифа.НачисленоИПУ,
	|	втНачисленияСГруппировкойБезТарифа.НачисленоОПУ,
	|	втНачисленияСГруппировкойБезТарифа.ПризнакПерерасчета,
	|	втНачисленияСГруппировкойБезТарифа.ДнейНачисленоОборот,
	|	втНачисленияСГруппировкойБезТарифа.НормаПотребления,
	|	втНачисленияСГруппировкойБезТарифа.НормаПотребленияЗдания,
	|	втНачисленияСГруппировкойБезТарифа.ПризнакИПУ,
	|	втНачисленияСГруппировкойБезТарифа.ПервыйМесяцЗадолженности,
	|	втНачисленияСГруппировкойБезТарифа.Задолженность
	|ПОМЕСТИТЬ втДанныеДляОтбораНачисленийСГруппировкой
	|ИЗ
	|	втНачисленияСГруппировкойБезТарифа КАК втНачисленияСГруппировкойБезТарифа
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСредниеТарифы КАК втСредниеТарифы
	|		ПО втНачисленияСГруппировкойБезТарифа.ЛицевойСчет = втСредниеТарифы.ЛицевойСчет
	|			И втНачисленияСГруппировкойБезТарифа.КодУслугиВОСЗН = втСредниеТарифы.КодУслугиВОСЗН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеСоСвойствамиПомещений.ЛицевойСчет,
	|	ЕСТЬNULL(втДанныеДляОтбораНачисленийСГруппировкой.КодУслугиВОСЗН, """") КАК КодУслугиВОСЗН,
	|	ЕСТЬNULL(втДанныеДляОтбораНачисленийСГруппировкой.УслугаОДН, ЛОЖЬ) КАК УслугаОДН,
	|	ЕСТЬNULL(втДанныеДляОтбораНачисленийСГруппировкой.ТарифНаЖКУ, 0) КАК TARIF,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втДанныеДляОтбораНачисленийСГруппировкой.УслугаОДН, ЛОЖЬ) = ИСТИНА
	|			ТОГДА ЕСТЬNULL(втДанныеДляОтбораНачисленийСГруппировкой.ОбъемУслугиОПУ, 0)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЕСТЬNULL(втДанныеДляОтбораНачисленийСГруппировкой.УслугаТолькоПоИПУ, ЛОЖЬ) = ИСТИНА
	|					ТОГДА ЕСТЬNULL(втДанныеДляОтбораНачисленийСГруппировкой.ОбъемУслугиОПУ, 0) + ЕСТЬNULL(втДанныеДляОтбораНачисленийСГруппировкой.ОбъемУслугиИПУ, 0)
	|				ИНАЧЕ ЕСТЬNULL(втДанныеДляОтбораНачисленийСГруппировкой.ОбъемУслугиИПУ, 0)
	|			КОНЕЦ
	|	КОНЕЦ КАК VOLUME,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втДанныеДляОтбораНачисленийСГруппировкой.ОбъемУслугиОпределенПо, 0) = 1
	|			ТОГДА ""N""
	|		ИНАЧЕ ""F""
	|	КОНЕЦ КАК CHTYPE,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втДанныеДляОтбораНачисленийСГруппировкой.УслугаОДН, ЛОЖЬ) = ИСТИНА
	|			ТОГДА ЕСТЬNULL(втДанныеДляОтбораНачисленийСГруппировкой.НачисленоОПУ, 0)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЕСТЬNULL(втДанныеДляОтбораНачисленийСГруппировкой.УслугаТолькоПоИПУ, ЛОЖЬ) = ИСТИНА
	|					ТОГДА ЕСТЬNULL(втДанныеДляОтбораНачисленийСГруппировкой.НачисленоОПУ, 0) + ЕСТЬNULL(втДанныеДляОтбораНачисленийСГруппировкой.НачисленоИПУ, 0)
	|				ИНАЧЕ ЕСТЬNULL(втДанныеДляОтбораНачисленийСГруппировкой.НачисленоИПУ, 0)
	|			КОНЕЦ
	|	КОНЕЦ КАК SUMN,
	|	ЕСТЬNULL(втДанныеДляОтбораНачисленийСГруппировкой.ПризнакПерерасчета, """") КАК PER,
	|	ЕСТЬNULL(втДанныеДляОтбораНачисленийСГруппировкой.ДнейНачисленоОборот, 0) КАК DAYS,
	|	ЕСТЬNULL(втДанныеДляОтбораНачисленийСГруппировкой.НормаПотребления, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)) КАК НормаПотребления,
	|	ЕСТЬNULL(втДанныеДляОтбораНачисленийСГруппировкой.НормаПотребленияЗдания, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)) КАК НормаПотребленияЗдания,
	|	ЕСТЬNULL(втДанныеДляОтбораНачисленийСГруппировкой.ПервыйМесяцЗадолженности, ДАТАВРЕМЯ(1, 1, 1)) КАК ПервыйМесяцЗадолженности,
	|	ЕСТЬNULL(втДанныеДляОтбораНачисленийСГруппировкой.Задолженность, 0) КАК DOLG,
	|	ЕСТЬNULL(втДанныеДляОтбораНачисленийСГруппировкой.ПризнакИПУ, 0) КАК METERS,
	|	ЕСТЬNULL(втДанныеДляОтбораНачисленийСГруппировкой.UNIT, """") КАК UNIT,
	|	втДанныеСоСвойствамиПомещений.Помещение,
	|	втДанныеСоСвойствамиПомещений.Здание,
	|	втДанныеСоСвойствамиПомещений.ОбщаяПлощадь КАК O_PL,
	|	втДанныеСоСвойствамиПомещений.ЖилаяПлощадь КАК G_PL,
	|	втДанныеСоСвойствамиПомещений.ОтапливаемаяПлощадь КАК H_PL,
	|	втДанныеСоСвойствамиПомещений.КоличествоКомнат КАК ROOMS,
	|	втДанныеСоСвойствамиПомещений.КоличествоЗарегистрированных КАК KOLZR,
	|	втДанныеСоСвойствамиПомещений.КоличествоПроживающих КАК KOLPR,
	|	втДанныеСоСвойствамиПомещений.НаличиеЭлектроплиты КАК EL_PL,
	|	втДанныеСоСвойствамиПомещений.НаличиеЭлектроВодоНагревателя КАК EL_VN
	|ПОМЕСТИТЬ втИтоговыеДанные
	|ИЗ
	|	втДанныеСоСвойствамиПомещений КАК втДанныеСоСвойствамиПомещений
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеДляОтбораНачисленийСГруппировкой КАК втДанныеДляОтбораНачисленийСГруппировкой
	|		ПО втДанныеСоСвойствамиПомещений.ЛицевойСчет = втДанныеДляОтбораНачисленийСГруппировкой.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИдентифицированныеЖильцы.ЛицевойСчет,
	|	втТаблицаДанныхИзФайла.NPD,
	|	втТаблицаДанныхИзФайла.FAM,
	|	втТаблицаДанныхИзФайла.IM,
	|	втТаблицаДанныхИзФайла.OT,
	|	втТаблицаДанныхИзФайла.PIN,
	|	втТаблицаДанныхИзФайла.RG,
	|	втТаблицаДанныхИзФайла.NSP,
	|	втТаблицаДанныхИзФайла.ULC,
	|	втТаблицаДанныхИзФайла.DOM,
	|	втТаблицаДанныхИзФайла.KOR,
	|	втТаблицаДанныхИзФайла.KVR,
	|	втТаблицаДанныхИзФайла.SERIES,
	|	втТаблицаДанныхИзФайла.NDOC,
	|	втТаблицаДанныхИзФайла.ACCOUNT,
	|	втТаблицаДанныхИзФайла.OKS,
	|	втТаблицаДанныхИзФайла.KOLIG,
	|	втТаблицаДанныхИзФайла.KOLLGTP,
	|	втТаблицаДанныхИзФайла.KODK,
	|	втТаблицаДанныхИзФайла.SUM,
	|	втТаблицаДанныхИзФайла.KMS,
	|	втТаблицаДанныхИзФайла.GOD
	|ПОМЕСТИТЬ втТаблицаДанныхФайлаСЛС
	|ИЗ
	|	втИдентифицированныеЖильцы КАК втИдентифицированныеЖильцы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаДанныхИзФайла КАК втТаблицаДанныхИзФайла
	|		ПО втИдентифицированныеЖильцы.ИдентификаторЛС = втТаблицаДанныхИзФайла.ACCOUNT
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаДанныхФайлаСЛС.ЛицевойСчет,
	|	втТаблицаДанныхФайлаСЛС.NPD,
	|	втТаблицаДанныхФайлаСЛС.FAM,
	|	втТаблицаДанныхФайлаСЛС.IM,
	|	втТаблицаДанныхФайлаСЛС.OT,
	|	втТаблицаДанныхФайлаСЛС.PIN,
	|	втТаблицаДанныхФайлаСЛС.RG,
	|	втТаблицаДанныхФайлаСЛС.NSP,
	|	втТаблицаДанныхФайлаСЛС.ULC,
	|	втТаблицаДанныхФайлаСЛС.DOM,
	|	втТаблицаДанныхФайлаСЛС.KOR,
	|	втТаблицаДанныхФайлаСЛС.KVR,
	|	втТаблицаДанныхФайлаСЛС.SERIES,
	|	втТаблицаДанныхФайлаСЛС.NDOC,
	|	втТаблицаДанныхФайлаСЛС.ACCOUNT,
	|	втТаблицаДанныхФайлаСЛС.OKS,
	|	втТаблицаДанныхФайлаСЛС.KOLIG,
	|	втТаблицаДанныхФайлаСЛС.KOLLGTP,
	|	ЕСТЬNULL(втИтоговыеДанные.КодУслугиВОСЗН, """") КАК КодУслугиВОСЗН,
	|	ЕСТЬNULL(втИтоговыеДанные.УслугаОДН, ЛОЖЬ) КАК УслугаОДН,
	|	ЕСТЬNULL(втИтоговыеДанные.KOLZR, 0) КАК KOLZR,
	|	ЕСТЬNULL(втИтоговыеДанные.KOLPR, 0) КАК KOLPR,
	|	ЕСТЬNULL(втИтоговыеДанные.TARIF, 0) КАК TARIF,
	|	ЕСТЬNULL(втИтоговыеДанные.НормаПотребления, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)) КАК НормаПотребления,
	|	ЕСТЬNULL(втИтоговыеДанные.НормаПотребленияЗдания, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)) КАК НормаПотребленияЗдания,
	|	ЕСТЬNULL(втИтоговыеДанные.ПервыйМесяцЗадолженности, ДАТАВРЕМЯ(1, 1, 1)) КАК ПервыйМесяцЗадолженности,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втИтоговыеДанные.КодУслугиВОСЗН, """") = &КодУслугиОтопления
	|			ТОГДА ЕСТЬNULL(втИтоговыеДанные.H_PL, 0)
	|		ИНАЧЕ ЕСТЬNULL(втИтоговыеДанные.VOLUME, 0)
	|	КОНЕЦ КАК VOLUME,
	|	втТаблицаДанныхФайлаСЛС.KODK,
	|	ЕСТЬNULL(втИтоговыеДанные.G_PL, 0) КАК G_PL,
	|	ЕСТЬNULL(втИтоговыеДанные.O_PL, 0) КАК O_PL,
	|	ЕСТЬNULL(втИтоговыеДанные.H_PL, 0) КАК H_PL,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втИтоговыеДанные.ROOMS, 0) = 0
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ ЕСТЬNULL(втИтоговыеДанные.O_PL, 0) > 33
	|						ТОГДА 1
	|					КОГДА ЕСТЬNULL(втИтоговыеДанные.O_PL, 0) > 33
	|							И НЕ ЕСТЬNULL(втИтоговыеДанные.O_PL, 0) > 46
	|						ТОГДА 2
	|					КОГДА ЕСТЬNULL(втИтоговыеДанные.O_PL, 0) > 46
	|							И НЕ ЕСТЬNULL(втИтоговыеДанные.O_PL, 0) > 60
	|						ТОГДА 3
	|					ИНАЧЕ 4
	|				КОНЕЦ
	|		ИНАЧЕ ЕСТЬNULL(втИтоговыеДанные.ROOMS, 0)
	|	КОНЕЦ КАК ROOMS,
	|	ЕСТЬNULL(втИтоговыеДанные.EL_PL, 0) КАК EL_PL,
	|	ЕСТЬNULL(втИтоговыеДанные.EL_VN, 0) КАК EL_VN,
	|	ЕСТЬNULL(втИтоговыеДанные.DOLG, 0) КАК DOLG,
	|	ЕСТЬNULL(втИтоговыеДанные.CHTYPE, """") КАК CHTYPE,
	|	ЕСТЬNULL(втИтоговыеДанные.METERS, 0) КАК METERS,
	|	ЕСТЬNULL(втИтоговыеДанные.UNIT, """") КАК UNIT,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втЛьготныеКатегории.ОтноситсяКМногодетнымСемьям, ЛОЖЬ) = ИСТИНА
	|			ТОГДА 30
	|		ИНАЧЕ 50
	|	КОНЕЦ КАК PERCENT,
	|	ЕСТЬNULL(втИтоговыеДанные.SUMN, 0) КАК SUMN,
	|	втТаблицаДанныхФайлаСЛС.SUM,
	|	втТаблицаДанныхФайлаСЛС.KMS,
	|	втТаблицаДанныхФайлаСЛС.GOD,
	|	ЕСТЬNULL(втИтоговыеДанные.PER, """") КАК PER,
	|	ЕСТЬNULL(втИтоговыеДанные.DAYS, 0) КАК DAYS,
	|	0 КАК NORM,
	|	0 КАК OPLPOMES,
	|	"""" КАК OPLPOGOD
	|ИЗ
	|	втТаблицаДанныхФайлаСЛС КАК втТаблицаДанныхФайлаСЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ втИтоговыеДанные КАК втИтоговыеДанные
	|		ПО втТаблицаДанныхФайлаСЛС.ЛицевойСчет = втИтоговыеДанные.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЛьготныеКатегории КАК втЛьготныеКатегории
	|		ПО втТаблицаДанныхФайлаСЛС.KODK = втЛьготныеКатегории.КодКатегории";
	
	ТаблицаДанныхФайла = Запрос.Выполнить().Выгрузить();
	
	ТаблицаЛСиУслуг = ТаблицаДанныхФайла.Скопировать(, "ЛицевойСчет, КодУслугиВОСЗН");
	
	// Определим нормы для зависимых услуг.
	ТаблицаНормДляЗависимыхУслуг = ПолучитьТаблицуНормДляЗависимыхУслуг(ТаблицаЛСиУслуг);
	
	Для Каждого СтрокаРезультата ИЗ ТаблицаДанныхФайла Цикл
		Если НЕ СтрокаРезультата.УслугаОДН Тогда
			Если ЗначениеЗаполнено(СтрокаРезультата.НормаПотребления) Тогда
				Если НЕ СтрокаРезультата.НормаПотребления.ВариантНастройки = ПредопределенноеЗначение("Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой") Тогда
					СтрокаРезультата.NORM = ПолучитьРазмерНормыПотребления(СтрокаРезультата.ЛицевойСчет, КонецМесяца(Период), СтрокаРезультата.НормаПотребления, Организация);
				Иначе
					СтрокаРезультата.NORM = СтрокаРезультата.НормаПотребления.Размер;
				КонецЕсли;
			Иначе
				НайденныеСтрокиКодов = ТамбовскаяОбласть_КодыУслугДляРасчетаНорматива.НайтиСтроки(Новый Структура("КодУслугиВОСЗН", СтрокаРезультата.КодУслугиВОСЗН));
				Если НайденныеСтрокиКодов.Количество() > 0 И СтрокаРезультата.KOLZR > 0 Тогда
					Если СтрокаРезультата.KOLZR = 1 Тогда
						СтрокаРезультата.NORM = 33;
					ИначеЕсли СтрокаРезультата.KOLZR = 2 Тогда
						СтрокаРезультата.NORM = 21;
					ИначеЕсли НЕ СтрокаРезультата.KOLZR < 3 Тогда
						СтрокаРезультата.NORM = 18;
					КонецЕсли;
				Иначе
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("ЛицевойСчет",    СтрокаРезультата.ЛицевойСчет);
					СтруктураПоиска.Вставить("КодУслугиВОСЗН", СтрокаРезультата.КодУслугиВОСЗН);
					НайденныеСтроки = ТаблицаНормДляЗависимыхУслуг.НайтиСтроки(СтруктураПоиска);
					Если НайденныеСтроки.Количество() > 0 Тогда
						СтрокаРезультата.NORM = НайденныеСтроки[0].РазмерНормы;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаРезультата.УслугаОДН Тогда
			Если ЗначениеЗаполнено(СтрокаРезультата.НормаПотребленияЗдания) Тогда
				Если НЕ СтрокаРезультата.НормаПотребленияЗдания.ВариантНастройки = ПредопределенноеЗначение("Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой") Тогда
					СтрокаРезультата.NORM = ПолучитьРазмерНормыПотребления(СтрокаРезультата.ЛицевойСчет.Адрес.Владелец, КонецМесяца(Период), СтрокаРезультата.НормаПотребленияЗдания, Организация);
				Иначе
					СтрокаРезультата.NORM = СтрокаРезультата.НормаПотребленияЗдания.Размер;
				КонецЕсли;
			Иначе
				НайденныеСтрокиКодов = ТамбовскаяОбласть_КодыУслугДляРасчетаНорматива.НайтиСтроки(Новый Структура("КодУслугиВОСЗН", СтрокаРезультата.КодУслугиВОСЗН));
				Если НайденныеСтрокиКодов.Количество() > 0 И СтрокаРезультата.KOLZR > 0 Тогда
					Если СтрокаРезультата.KOLZR = 1 Тогда
						СтрокаРезультата.NORM = 33;
					ИначеЕсли СтрокаРезультата.KOLZR = 2 Тогда
						СтрокаРезультата.NORM = 21;
					ИначеЕсли НЕ СтрокаРезультата.KOLZR < 3 Тогда
						СтрокаРезультата.NORM = 18;
					КонецЕсли;
				Иначе
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("ЛицевойСчет",    СтрокаРезультата.ЛицевойСчет);
					СтруктураПоиска.Вставить("КодУслугиВОСЗН", СтрокаРезультата.КодУслугиВОСЗН);
					НайденныеСтроки = ТаблицаНормДляЗависимыхУслуг.НайтиСтроки(СтруктураПоиска);
					Если НайденныеСтроки.Количество() > 0 Тогда
						СтрокаРезультата.NORM = НайденныеСтроки[0].РазмерНормы;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаРезультата.ПервыйМесяцЗадолженности > НачалоДня(КонецМесяца(НачалоГода(Период))) Тогда
			СтрокаРезультата.OPLPOGOD = Формат(Период, "ДФ=yyyy");
			СтрокаРезультата.OPLPOMES = Число(Формат(ДобавитьМесяц(СтрокаРезультата.ПервыйМесяцЗадолженности, -1), "ДФ=М"));
		КонецЕсли;
		
		Если СтрокаРезультата.VOLUME = 0 Тогда
			СтрокаРезультата.VOLUME = 1;
		КонецЕсли;
		
		Если СтрокаРезультата.DAYS = 0 Тогда
			СтрокаРезультата.DAYS = Число(Формат(КонецМесяца(Период), "ДФ=d"));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Получает таблицу жильцов идентифицированных с записями из файла-запроса.
//
Функция ПолучитьТаблицуИдентифицированныхЖильцовТамбов(ТаблицаДанныхФайла, ТаблицаАдресов, ТаблицаФИО)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИзФайла.ACCOUNT КАК ИдентификаторЛицевогоСчета,
	|	ТаблицаИзФайла.NSP КАК Город,
	|	ТаблицаИзФайла.ULC КАК Улица,
	|	ТаблицаИзФайла.DOM КАК Дом,
	|	ТаблицаИзФайла.KOR КАК Корпус,
	|	ТаблицаИзФайла.KVR КАК Квартира
	|ПОМЕСТИТЬ втТаблицаДанныхИзФайла
	|ИЗ
	|	&ТаблицаИзФайла КАК ТаблицаИзФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаФИО.ФизическоеЛицо,
	|	ТаблицаФИО.Фамилия,
	|	ТаблицаФИО.Имя,
	|	ТаблицаФИО.Отчество
	|ПОМЕСТИТЬ втФИОФизЛиц
	|ИЗ
	|	&ТаблицаФИО КАК ТаблицаФИО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Жильцы.Ссылка КАК Проживающий,
	|	УПЖКХ_Жильцы.ФизЛицо,
	|	УПЖКХ_Жильцы.Владелец.Адрес.Владелец КАК Здание,
	|	УПЖКХ_Жильцы.Владелец.Адрес.Код КАК Квартира,
	|	УПЖКХ_Жильцы.Владелец КАК ЛицевойСчет,
	|	УПЖКХ_Жильцы.Владелец.Идентификатор КАК ИдентификаторЛС
	|ПОМЕСТИТЬ втЖильцы
	|ИЗ
	|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
	|ГДЕ
	|	НЕ УПЖКХ_Жильцы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцы.Проживающий,
	|	ЕСТЬNULL(втФИОФизЛиц.Фамилия, """") КАК Фамилия,
	|	ЕСТЬNULL(втФИОФизЛиц.Имя, """") КАК Имя,
	|	ЕСТЬNULL(втФИОФизЛиц.Отчество, """") КАК Отчество,
	|	втЖильцы.Здание,
	|	втЖильцы.Квартира,
	|	втЖильцы.ЛицевойСчет,
	|	втЖильцы.ИдентификаторЛС
	|ПОМЕСТИТЬ втЖильцыСФИО
	|ИЗ
	|	втЖильцы КАК втЖильцы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втФИОФизЛиц КАК втФИОФизЛиц
	|		ПО втЖильцы.ФизЛицо = втФИОФизЛиц.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаАдресов.Здание,
	|	ТаблицаАдресов.НаселенныйПункт,
	|	ТаблицаАдресов.Улица,
	|	ТаблицаАдресов.Дом,
	|	ТаблицаАдресов.Корпус
	|ПОМЕСТИТЬ втАдреса
	|ИЗ
	|	&ТаблицаАдресов КАК ТаблицаАдресов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцыСФИО.Проживающий,
	|	втЖильцыСФИО.Фамилия,
	|	втЖильцыСФИО.Имя,
	|	втЖильцыСФИО.Отчество,
	|	ЕСТЬNULL(втАдреса.НаселенныйПункт, """") КАК НаселенныйПункт,
	|	ЕСТЬNULL(втАдреса.Улица, """") КАК Улица,
	|	ЕСТЬNULL(втАдреса.Дом, """") КАК Дом,
	|	ЕСТЬNULL(втАдреса.Корпус, """") КАК Корпус,
	|	втЖильцыСФИО.Квартира,
	|	втЖильцыСФИО.ЛицевойСчет,
	|	втЖильцыСФИО.ИдентификаторЛС
	|ПОМЕСТИТЬ втЖильцыСАдресами
	|ИЗ
	|	втЖильцыСФИО КАК втЖильцыСФИО
	|		ЛЕВОЕ СОЕДИНЕНИЕ втАдреса КАК втАдреса
	|		ПО втЖильцыСФИО.Здание = втАдреса.Здание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцыСАдресами.НаселенныйПункт,
	|	втЖильцыСАдресами.Улица,
	|	втЖильцыСАдресами.Дом,
	|	втЖильцыСАдресами.Корпус,
	|	втЖильцыСАдресами.Квартира,
	|	втЖильцыСАдресами.ЛицевойСчет,
	|	втЖильцыСАдресами.ИдентификаторЛС
	|ИЗ
	|	втТаблицаДанныхИзФайла КАК втТаблицаДанныхИзФайла
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЖильцыСАдресами КАК втЖильцыСАдресами
	|			ПО втТаблицаДанныхИзФайла.ИдентификаторЛицевогоСчета = втЖильцыСАдресами.ИдентификаторЛС
	|
	|СГРУППИРОВАТЬ ПО
	|	втЖильцыСАдресами.ЛицевойСчет,
	|	втЖильцыСАдресами.ИдентификаторЛС,
	|	втЖильцыСАдресами.НаселенныйПункт,
	|	втЖильцыСАдресами.Улица,
	|	втЖильцыСАдресами.Дом,
	|	втЖильцыСАдресами.Корпус,
	|	втЖильцыСАдресами.Квартира";
	
	Запрос.УстановитьПараметр("ТаблицаИзФайла", ТаблицаДанныхФайла);
	Запрос.УстановитьПараметр("ДатаКонца",      КонецМесяца(Период));
	Запрос.УстановитьПараметр("ТаблицаАдресов", ТаблицаАдресов);
	Запрос.УстановитьПараметр("ТаблицаФИО",     ТаблицаФИО);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции // ПолучитьТаблицуИдентифицированныхЖильцов()

// Возвращает таблицу норм для зависимых услуг.
//
Функция ПолучитьТаблицуНормДляЗависимыхУслуг(ТаблицаЛСиУслуг)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЛСиУслуг.ЛицевойСчет,
	|	ТаблицаЛСиУслуг.КодУслугиВОСЗН
	|ПОМЕСТИТЬ втЛСиУслуг
	|ИЗ
	|	&ТаблицаЛСиУслуг КАК ТаблицаЛСиУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУслуг.КодУслугиВОСЗН,
	|	ТаблицаУслуг.УслугаВБазе,
	|	ТаблицаУслуг.УслугаОДН
	|ПОМЕСТИТЬ втУслуги
	|ИЗ
	|	&ЖКУ_ВБазе КАК ТаблицаУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛСиУслуг.ЛицевойСчет,
	|	втЛСиУслуг.КодУслугиВОСЗН,
	|	ЕСТЬNULL(втУслуги.УслугаВБазе, ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)) КАК УслугаВБазе,
	|	ЕСТЬNULL(втУслуги.УслугаОДН, ЛОЖЬ) КАК УслугаОДН
	|ПОМЕСТИТЬ втЛсиУслугиИзБазы
	|ИЗ
	|	втЛСиУслуг КАК втЛСиУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУслуги КАК втУслуги
	|		ПО втЛСиУслуг.КодУслугиВОСЗН = втУслуги.КодУслугиВОСЗН
	|
	|СГРУППИРОВАТЬ ПО
	|	втЛСиУслуг.ЛицевойСчет,
	|	втЛСиУслуг.КодУслугиВОСЗН,
	|	ЕСТЬNULL(втУслуги.УслугаВБазе, ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)),
	|	ЕСТЬNULL(втУслуги.УслугаОДН, ЛОЖЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НазначенныеНачисленияСрезПоследних.Объект КАК ЛицевойСчет,
	|	КВП_НазначенныеНачисленияСрезПоследних.Услуга
	|ПОМЕСТИТЬ втНазначенныеУслуги
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления.СрезПоследних(
	|			&ДатаКонца,
	|			Объект В
	|					(ВЫБРАТЬ
	|						втЛсиУслугиИзБазы.ЛицевойСчет
	|					ИЗ
	|						втЛсиУслугиИзБазы КАК втЛсиУслугиИзБазы)
	|				И Организация = &Организация
	|				И ДатаИзменения <= &ДатаКонца) КАК КВП_НазначенныеНачисленияСрезПоследних
	|ГДЕ
	|	КВП_НазначенныеНачисленияСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ЗависимостиУслугСрезПоследних.Услуга,
	|	КВП_ЗависимостиУслугСрезПоследних.УслугаОснование,
	|	ВЫБОР
	|		КОГДА КВП_ЗависимостиУслугСрезПоследних.Значение = 0
	|			ТОГДА 0
	|		ИНАЧЕ КВП_ЗависимостиУслугСрезПоследних.ЗначениеОснование / КВП_ЗависимостиУслугСрезПоследних.Значение
	|	КОНЕЦ КАК НормировочныйКоэффициент,
	|	КВП_ЗависимостиУслугСрезПоследних.Объект
	|ПОМЕСТИТЬ втЗависимостиУслугДляНормы
	|ИЗ
	|	РегистрСведений.КВП_ЗависимостиУслуг.СрезПоследних(
	|			&ДатаКонца,
	|			Организация = &ОрганизацияЗависимыхУслуг
	|				И (Объект В
	|						(ВЫБРАТЬ
	|							втЛсиУслугиИзБазы.ЛицевойСчет.Адрес.Владелец
	|						ИЗ
	|							втЛсиУслугиИзБазы КАК втЛсиУслугиИзБазы)
	|					ИЛИ Объект = ЗНАЧЕНИЕ(Справочник.КВП_Здания.ПустаяСсылка))
	|				И Услуга В
	|					(ВЫБРАТЬ
	|						втЛсиУслугиИзБазы.УслугаВБазе
	|					ИЗ
	|						втЛсиУслугиИзБазы КАК втЛсиУслугиИзБазы)) КАК КВП_ЗависимостиУслугСрезПоследних
	|ГДЕ
	|	КВП_ЗависимостиУслугСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛсиУслугиИзБазы.ЛицевойСчет,
	|	втЛсиУслугиИзБазы.КодУслугиВОСЗН,
	|	втЛсиУслугиИзБазы.УслугаВБазе,
	|	втЗависимостиУслугДляНормы.УслугаОснование,
	|	втЗависимостиУслугДляНормы.НормировочныйКоэффициент,
	|	втЗависимостиУслугДляНормы.Объект,
	|	втЛсиУслугиИзБазы.УслугаОДН
	|ПОМЕСТИТЬ втЛсИЗависимыеУслугиВсе
	|ИЗ
	|	втЗависимостиУслугДляНормы КАК втЗависимостиУслугДляНормы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЛсиУслугиИзБазы КАК втЛсиУслугиИзБазы
	|		ПО втЗависимостиУслугДляНормы.Услуга = втЛсиУслугиИзБазы.УслугаВБазе
	|			И (ВЫБОР
	|				КОГДА втЗависимостиУслугДляНормы.Объект = ЗНАЧЕНИЕ(Справочник.КВП_Здания.ПустаяСсылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ втЗависимостиУслугДляНормы.Объект = втЛсиУслугиИзБазы.ЛицевойСчет.Адрес.Владелец
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛсИЗависимыеУслугиВсе.ЛицевойСчет,
	|	втЛсИЗависимыеУслугиВсе.КодУслугиВОСЗН,
	|	втЛсИЗависимыеУслугиВсе.УслугаВБазе,
	|	втЛсИЗависимыеУслугиВсе.УслугаОснование,
	|	втЛсИЗависимыеУслугиВсе.НормировочныйКоэффициент,
	|	втЛсИЗависимыеУслугиВсе.Объект,
	|	втЛсИЗависимыеУслугиВсе.УслугаОДН
	|ПОМЕСТИТЬ втЛсИЗависимыеУслуги
	|ИЗ
	|	втЛсИЗависимыеУслугиВсе КАК втЛсИЗависимыеУслугиВсе
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНазначенныеУслуги КАК втНазначенныеУслуги
	|		ПО втЛсИЗависимыеУслугиВсе.ЛицевойСчет = втНазначенныеУслуги.ЛицевойСчет
	|			И втЛсИЗависимыеУслугиВсе.УслугаОснование = втНазначенныеУслуги.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления
	|ПОМЕСТИТЬ втНормыПотребления
	|ИЗ
	|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(
	|			&ДатаКонца,
	|			(ЛицевойСчет, Услуга) В
	|				(ВЫБРАТЬ
	|					втЛсИЗависимыеУслуги.ЛицевойСчет,
	|					втЛсИЗависимыеУслуги.УслугаОснование
	|				ИЗ
	|					втЛсИЗависимыеУслуги КАК втЛсИЗависимыеУслуги
	|				ГДЕ
	|					НЕ втЛсИЗависимыеУслуги.УслугаОДН)) КАК КВП_НормыПотребленияУслугЛССрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет КАК Здание,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.Услуга,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления
	|ПОМЕСТИТЬ втНормыПотребленияЗданий
	|ИЗ
	|	РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(
	|			&ДатаКонца,
	|			(ЛицевойСчет, Услуга) В
	|				(ВЫБРАТЬ
	|					втЛсИЗависимыеУслуги.ЛицевойСчет.Адрес.Владелец,
	|					втЛсИЗависимыеУслуги.УслугаОснование
	|				ИЗ
	|					втЛсИЗависимыеУслуги КАК втЛсИЗависимыеУслуги
	|				ГДЕ
	|					втЛсИЗависимыеУслуги.УслугаОДН)) КАК КВП_НормыПотребленияУслугЛССрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛсИЗависимыеУслуги.ЛицевойСчет,
	|	втЛсИЗависимыеУслуги.КодУслугиВОСЗН,
	|	втЛсИЗависимыеУслуги.УслугаВБазе,
	|	втЛсИЗависимыеУслуги.УслугаОснование,
	|	втЛсИЗависимыеУслуги.НормировочныйКоэффициент,
	|	втЛсИЗависимыеУслуги.Объект,
	|	втЛсИЗависимыеУслуги.УслугаОДН,
	|	ЕСТЬNULL(втНормыПотребления.НормаПотребления, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)) КАК НормаПотребления,
	|	ЕСТЬNULL(втНормыПотребленияЗданий.НормаПотребления, ЗНАЧЕНИЕ(Справочник.КВП_НормыПотребленияУслуг.ПустаяСсылка)) КАК НормаПотребленияЗдания,
	|	0 КАК РазмерНормы
	|ПОМЕСТИТЬ втИтоговыеДанные
	|ИЗ
	|	втЛсИЗависимыеУслуги КАК втЛсИЗависимыеУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНормыПотребления КАК втНормыПотребления
	|		ПО втЛсИЗависимыеУслуги.ЛицевойСчет = втНормыПотребления.ЛицевойСчет
	|			И втЛсИЗависимыеУслуги.УслугаОснование = втНормыПотребления.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНормыПотребленияЗданий КАК втНормыПотребленияЗданий
	|		ПО втЛсИЗависимыеУслуги.ЛицевойСчет.Адрес.Владелец = втНормыПотребленияЗданий.Здание
	|			И втЛсИЗависимыеУслуги.УслугаОснование = втНормыПотребленияЗданий.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговыеДанные.ЛицевойСчет,
	|	втИтоговыеДанные.КодУслугиВОСЗН,
	|	втИтоговыеДанные.УслугаВБазе,
	|	втИтоговыеДанные.УслугаОснование,
	|	втИтоговыеДанные.НормировочныйКоэффициент,
	|	втИтоговыеДанные.Объект,
	|	втИтоговыеДанные.УслугаОДН,
	|	МАКСИМУМ(втИтоговыеДанные.НормаПотребления) КАК НормаПотребления,
	|	МАКСИМУМ(втИтоговыеДанные.НормаПотребленияЗдания) КАК НормаПотребленияЗдания,
	|	СУММА(втИтоговыеДанные.РазмерНормы) КАК РазмерНормы
	|ИЗ
	|	втИтоговыеДанные КАК втИтоговыеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	втИтоговыеДанные.ЛицевойСчет,
	|	втИтоговыеДанные.КодУслугиВОСЗН,
	|	втИтоговыеДанные.УслугаВБазе,
	|	втИтоговыеДанные.УслугаОснование,
	|	втИтоговыеДанные.НормировочныйКоэффициент,
	|	втИтоговыеДанные.Объект,
	|	втИтоговыеДанные.УслугаОДН";
	
	Запрос.УстановитьПараметр("ЖКУ_ВБазе",                 ТамбовскаяОбласть_ЖКУ_ВБазе.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаЛСиУслуг",           ТаблицаЛСиУслуг);
	Запрос.УстановитьПараметр("ДатаКонца",                 КонецМесяца(Период));
	Запрос.УстановитьПараметр("ОрганизацияЗависимыхУслуг", ?(Константы.УПЖКХ_НачислениеЗависимыхУслугВРазрезеОрганизаций.Получить(), Организация, Справочники.Организации.ПустаяСсылка()));
	Запрос.УстановитьПараметр("Организация",               Организация);
	
	ТаблицаНормДляЗависимыхУслуг = Запрос.Выполнить().Выгрузить();
	
	ТаблицаНормПоЛС = ТаблицаНормДляЗависимыхУслуг.Скопировать(, "ЛицевойСчет, КодУслугиВОСЗН, УслугаОДН, РазмерНормы");
	ТаблицаНормПоЛС.Свернуть("ЛицевойСчет, КодУслугиВОСЗН, УслугаОДН, РазмерНормы");
	
	Для Каждого СтрокаЛС ИЗ ТаблицаНормПоЛС Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ЛицевойСчет",    СтрокаЛС.ЛицевойСчет);
		СтруктураПоиска.Вставить("КодУслугиВОСЗН", СтрокаЛС.КодУслугиВОСЗН);
		СтруктураПоиска.Вставить("УслугаОДН",      СтрокаЛС.УслугаОДН);
		
		НайденныеСтроки = ТаблицаНормДляЗависимыхУслуг.НайтиСтроки(СтруктураПоиска);
		РазмерНормы = 0;
		
		Для Каждого СтрокаЛССНормой ИЗ НайденныеСтроки Цикл
			
			ТекРазмерНормы = 0;
			
			Если НЕ СтрокаЛССНормой.УслугаОДН Тогда
				
				Если ЗначениеЗаполнено(СтрокаЛССНормой.НормаПотребления) Тогда
					Если НЕ СтрокаЛССНормой.НормаПотребления.ВариантНастройки = ПредопределенноеЗначение("Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой") Тогда
						ТекРазмерНормы = ПолучитьРазмерНормыПотребления(СтрокаЛССНормой.ЛицевойСчет, КонецМесяца(Период), СтрокаЛССНормой.НормаПотребления, Организация);
					Иначе
						ТекРазмерНормы = СтрокаЛССНормой.НормаПотребления.Размер;
					КонецЕсли;
				КонецЕсли;
				
			Иначе
				
				Если ЗначениеЗаполнено(СтрокаЛССНормой.НормаПотребленияЗдания) Тогда
					Если НЕ СтрокаЛССНормой.НормаПотребленияЗдания.ВариантНастройки = ПредопределенноеЗначение("Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой") Тогда
						ТекРазмерНормы = ПолучитьРазмерНормыПотребления(СтрокаЛССНормой.ЛицевойСчет.Адрес.Владелец, КонецМесяца(Период), СтрокаЛССНормой.НормаПотребленияЗдания, Организация);
					Иначе
						ТекРазмерНормы = СтрокаЛССНормой.НормаПотребленияЗдания.Размер;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
			РазмерНормы = РазмерНормы + ТекРазмерНормы * СтрокаЛССНормой.НормировочныйКоэффициент;
			
		КонецЦикла;
		
		СтрокаЛС.РазмерНормы = РазмерНормы;
		
	КонецЦикла;
	
	Возврат ТаблицаНормПоЛС;
	
КонецФункции

// Формирует таблицу загрузки льгот.
//
Процедура СформироватьТаблицуЛьготТамбовскаяОбласть(ТаблицаДанныхЛьгот, ПараметрыВыгрузки) Экспорт
	
	ТаблицаДанныхЛьгот.Очистить();
	
	Для Каждого ФайлЗагрузки Из ПараметрыВыгрузки.СписокФайлов Цикл
		
		// Загрузка.
		ФайлДБФ = Новый XBase;
		ФайлДБФ.Кодировка = КодировкаXBase.OEM;
		ФайлДБФ.ОткрытьФайл(ФайлЗагрузки.Значение, , Истина);
		Если ФайлДБФ.Открыта() = Истина Тогда
			
			Если ФайлДБФ.КоличествоЗаписей() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Пока НЕ ФайлДБФ.ВКонце() Цикл
				
				НоваяСтрокаЗагрузки = ТаблицаДанныхЛьгот.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаЗагрузки, ФайлДБФ);
				Попытка
					НоваяСтрокаЗагрузки.KVR = Число(СокрЛП(ФайлДБФ.KVR));
				Исключение
					// Установим номер квартиры 1, т.к. в данном случае могут быть загружены частные дома из файлы ОСЗН.
					НоваяСтрокаЗагрузки.KVR = 1;
				КонецПопытки;
				НоваяСтрокаЗагрузки.ACCOUNT = СокрЛП(ФайлДБФ.ACCOUNT);
				
				НачалоСтрокиКодаУслуги = СтрНайти(ФайлЗагрузки.Ключ, "VIDU");
				КодУслуги = Сред(ФайлЗагрузки.Ключ, НачалоСтрокиКодаУслуги + 5, 8);
				НоваяСтрокаЗагрузки.КодУслугиВОСЗН = КодУслуги;
				
				ФайлДБФ.Следующая();
			КонецЦикла;
			
		КонецЕсли;
		
		ФайлДБФ.ЗакрытьФайл();
		
	КонецЦикла;
	
	ТаблицаАдресов = ПолучитьАдресаВсехЗданийТамбовскаяОбласть();
	ТаблицаФИО     = ПолучитьФИОФизЛиц();
	ПолучитьТаблицуЛьготТамбов(ТаблицаДанныхЛьгот, ТаблицаАдресов, ТаблицаФИО, ПараметрыВыгрузки);
	
КонецПроцедуры

// Получает таблицу данных со льготами.
//
Процедура ПолучитьТаблицуЛьготТамбов(ТаблицаДанныхЛьгот, ТаблицаАдресов, ТаблицаФИО, ПараметрыВыгрузки)
	
	ТаблицаИдентифицированныхЖильцов = ПолучитьТаблицуИдентифицированныхЖильцовТамбов(ТаблицаДанныхЛьгот, ТаблицаАдресов, ТаблицаФИО);
	
	Запрос = Новый Запрос;
	
	МенеджерВТ                     = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	// Параметры.
	
	Запрос.УстановитьПараметр("ДатаКонца",              КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",            Организация);
	Запрос.УстановитьПараметр("ТаблицаИзФайла",         ТаблицаДанныхЛьгот);
	Запрос.УстановитьПараметр("ТаблицаИдентифЖильцов",  ТаблицаИдентифицированныхЖильцов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИзФайла.NSP,
	|	ТаблицаИзФайла.ULC,
	|	ТаблицаИзФайла.DOM,
	|	ТаблицаИзФайла.KOR,
	|	ТаблицаИзФайла.KVR,
	|	ТаблицаИзФайла.ACCOUNT,
	|	ТаблицаИзФайла.KODK,
	|	ТаблицаИзФайла.SUM,
	|	ТаблицаИзФайла.КодУслугиВОСЗН
	|ПОМЕСТИТЬ втТаблицаДанныхИзФайла
	|ИЗ
	|	&ТаблицаИзФайла КАК ТаблицаИзФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаИдентифЖильцов.ЛицевойСчет,
	|	ТаблицаИдентифЖильцов.ИдентификаторЛС,
	|	ТаблицаИдентифЖильцов.НаселенныйПункт КАК Город,
	|	ТаблицаИдентифЖильцов.Улица,
	|	ТаблицаИдентифЖильцов.Дом,
	|	ТаблицаИдентифЖильцов.Корпус,
	|	ТаблицаИдентифЖильцов.Квартира
	|ПОМЕСТИТЬ втИдентифицированныеЖильцы
	|ИЗ
	|	&ТаблицаИдентифЖильцов КАК ТаблицаИдентифЖильцов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец
	|ПОМЕСТИТЬ втОтветственныеСобственники
	|ИЗ
	|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втИдентифицированныеЖильцы.ЛицевойСчет
	|					ИЗ
	|						втИдентифицированныеЖильцы КАК втИдентифицированныеЖильцы)
	|				И ОтветственныйВладелец ССЫЛКА Справочник.УПЖКХ_Жильцы) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИдентифицированныеЖильцы.ЛицевойСчет,
	|	втИдентифицированныеЖильцы.ИдентификаторЛС,
	|	втИдентифицированныеЖильцы.Город,
	|	втИдентифицированныеЖильцы.Улица,
	|	втИдентифицированныеЖильцы.Дом,
	|	втИдентифицированныеЖильцы.Корпус,
	|	втИдентифицированныеЖильцы.Квартира,
	|	ЕСТЬNULL(втОтветственныеСобственники.ОтветственныйВладелец, ЗНАЧЕНИЕ(Справочник.УПЖКХ_Жильцы.ПустаяСсылка)) КАК Льготник
	|ПОМЕСТИТЬ втЛССОтветственнымиСобственниками
	|ИЗ
	|	втИдентифицированныеЖильцы КАК втИдентифицированныеЖильцы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОтветственныеСобственники КАК втОтветственныеСобственники
	|		ПО втИдентифицированныеЖильцы.ЛицевойСчет = втОтветственныеСобственники.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛССОтветственнымиСобственниками.ЛицевойСчет,
	|	втТаблицаДанныхИзФайла.ULC,
	|	втТаблицаДанныхИзФайла.DOM,
	|	втТаблицаДанныхИзФайла.KOR,
	|	втТаблицаДанныхИзФайла.KVR,
	|	втТаблицаДанныхИзФайла.ACCOUNT,
	|	втТаблицаДанныхИзФайла.KODK,
	|	втТаблицаДанныхИзФайла.КодУслугиВОСЗН,
	|	СУММА(втТаблицаДанныхИзФайла.SUM) КАК SUM,
	|	втЛССОтветственнымиСобственниками.Льготник
	|ПОМЕСТИТЬ втДанныеБезДоговоров
	|ИЗ
	|	втЛССОтветственнымиСобственниками КАК втЛССОтветственнымиСобственниками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТаблицаДанныхИзФайла КАК втТаблицаДанныхИзФайла
	|		ПО втЛССОтветственнымиСобственниками.ИдентификаторЛС = втТаблицаДанныхИзФайла.ACCOUNT
	|
	|СГРУППИРОВАТЬ ПО
	|	втЛССОтветственнымиСобственниками.ЛицевойСчет,
	|	втТаблицаДанныхИзФайла.ULC,
	|	втТаблицаДанныхИзФайла.DOM,
	|	втТаблицаДанныхИзФайла.KOR,
	|	втТаблицаДанныхИзФайла.KVR,
	|	втТаблицаДанныхИзФайла.ACCOUNT,
	|	втТаблицаДанныхИзФайла.KODK,
	|	втТаблицаДанныхИзФайла.КодУслугиВОСЗН,
	|	втЛССОтветственнымиСобственниками.Льготник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Договор КАК ДоговорКонтрагента
	|ПОМЕСТИТЬ втОсновнойДоговорЛС
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втДанныеБезДоговоров.ЛицевойСчет
	|					ИЗ
	|						втДанныеБезДоговоров КАК втДанныеБезДоговоров)
	|				И Организация = &Организация) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеБезДоговоров.ЛицевойСчет КАК ЛицевойСчет,
	|	втДанныеБезДоговоров.ULC,
	|	втДанныеБезДоговоров.DOM,
	|	втДанныеБезДоговоров.KOR,
	|	втДанныеБезДоговоров.KVR,
	|	втДанныеБезДоговоров.ACCOUNT,
	|	втДанныеБезДоговоров.KODK,
	|	втДанныеБезДоговоров.КодУслугиВОСЗН,
	|	ЕСТЬNULL(втОсновнойДоговорЛС.ДоговорКонтрагента, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК ДоговорКонтрагента,
	|	втДанныеБезДоговоров.Льготник,
	|	втДанныеБезДоговоров.SUM
	|ИЗ
	|	втДанныеБезДоговоров КАК втДанныеБезДоговоров
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОсновнойДоговорЛС КАК втОсновнойДоговорЛС
	|		ПО втДанныеБезДоговоров.ЛицевойСчет = втОсновнойДоговорЛС.ЛицевойСчет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЛицевойСчет";
	
	ТаблицаДанныхЛьгот = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ВЫГРУЗКИ ДЛЯ ВЛАДИМИРСКОЙ ОБЛАСТИ

#Область ВладимирскаяОбласть

Процедура СформироватьТаблицуДанныхВладимирскаяОбласть(ТаблицаДанныхФайла) Экспорт
	
	ТаблицаАдресов = ПолучитьАдресаВсехЗданийВладимир();
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Дата",                         КонецМесяца(Период));
	Запрос.УстановитьПараметр("ДатаНачало",                   НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ДатаОпределенияЗадолженности", ДатаСрокОплаты());
	Запрос.УстановитьПараметр("Организация",                  Организация);
	Запрос.УстановитьПараметр("ТаблицаДанных",                ТаблицаДанныхФайла);
	Запрос.УстановитьПараметр("ТаблицаАдресов",               ТаблицаАдресов);
	Запрос.УстановитьПараметр("НаселенныеПункты",             ВладимирскаяОбласть_НастройкиНаселенныхПунктов.Выгрузить());
	Запрос.УстановитьПараметр("Улицы",                        ВладимирскаяОбласть_НастройкиУлиц.Выгрузить());
	Запрос.УстановитьПараметр("Услуги",                       ВладимирскаяОбласть_УслугиВБазе.Выгрузить());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДанных.L_ORG,
	|	ТаблицаДанных.L_SHET,
	|	ТаблицаДанных.L_SHET_ORG,
	|	ТаблицаДанных.NSP,
	|	ТаблицаДанных.ULC,
	|	ТаблицаДанных.DOM,
	|	ТаблицаДанных.KOR,
	|	ТаблицаДанных.KVR,
	|	ТаблицаДанных.KODORG,
	|	ТаблицаДанных.KODUSL,
	|	ТаблицаДанных.VIDUSL,
	|	ТаблицаДанных.S_TOTAL,
	|	ТаблицаДанных.GIL_FOND,
	|	ТаблицаДанных.PRIVAT,
	|	ТаблицаДанных.N_VSEGO,
	|	ТаблицаДанных.N_FAKT,
	|	ТаблицаДанных.ED_TAR,
	|	ТаблицаДанных.ED_IZM,
	|	ТаблицаДанных.TAR,
	|	ТаблицаДанных.DATE_S,
	|	ТаблицаДанных.PRIM
	|ПОМЕСТИТЬ втТаблицаДанныхИзФайла
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НаселенныеПункты.Код,
	|	НаселенныеПункты.НаселенныйПунктВСправочнике
	|ПОМЕСТИТЬ втНаселенныеПунктыИзСправочника
	|ИЗ
	|	&НаселенныеПункты КАК НаселенныеПункты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Улицы.КодНаселенногоПункта,
	|	Улицы.КодУлицы,
	|	Улицы.УлицаВСправочнике
	|ПОМЕСТИТЬ втУлицыИзСправочника
	|ИЗ
	|	&Улицы КАК Улицы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Услуги.Код,
	|	Услуги.УслугаВСправочнике,
	|	Услуги.УслугаВБазе
	|ПОМЕСТИТЬ втУслугиИзФайла
	|ИЗ
	|	&Услуги КАК Услуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаДанныхИзФайла.L_ORG,
	|	втТаблицаДанныхИзФайла.L_SHET,
	|	втТаблицаДанныхИзФайла.L_SHET_ORG,
	|	втТаблицаДанныхИзФайла.NSP,
	|	втТаблицаДанныхИзФайла.ULC,
	|	втТаблицаДанныхИзФайла.DOM,
	|	втТаблицаДанныхИзФайла.KOR,
	|	втТаблицаДанныхИзФайла.KVR,
	|	втТаблицаДанныхИзФайла.KODORG,
	|	втТаблицаДанныхИзФайла.KODUSL,
	|	втТаблицаДанныхИзФайла.VIDUSL,
	|	втТаблицаДанныхИзФайла.S_TOTAL,
	|	втТаблицаДанныхИзФайла.GIL_FOND,
	|	втТаблицаДанныхИзФайла.PRIVAT,
	|	втТаблицаДанныхИзФайла.N_VSEGO,
	|	втТаблицаДанныхИзФайла.N_FAKT,
	|	втТаблицаДанныхИзФайла.ED_TAR,
	|	втТаблицаДанныхИзФайла.ED_IZM,
	|	втТаблицаДанныхИзФайла.TAR,
	|	втТаблицаДанныхИзФайла.DATE_S,
	|	втТаблицаДанныхИзФайла.PRIM,
	|	ЕСТЬNULL(втНаселенныеПунктыИзСправочника.НаселенныйПунктВСправочнике, """") КАК НаселенныйПункт
	|ПОМЕСТИТЬ втТДИзФайлаСНаселеннымиПунктами
	|ИЗ
	|	втТаблицаДанныхИзФайла КАК втТаблицаДанныхИзФайла
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНаселенныеПунктыИзСправочника КАК втНаселенныеПунктыИзСправочника
	|		ПО втТаблицаДанныхИзФайла.NSP = втНаселенныеПунктыИзСправочника.Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТДИзФайлаСНаселеннымиПунктами.L_ORG,
	|	втТДИзФайлаСНаселеннымиПунктами.L_SHET,
	|	втТДИзФайлаСНаселеннымиПунктами.L_SHET_ORG,
	|	втТДИзФайлаСНаселеннымиПунктами.NSP,
	|	втТДИзФайлаСНаселеннымиПунктами.ULC,
	|	втТДИзФайлаСНаселеннымиПунктами.DOM,
	|	втТДИзФайлаСНаселеннымиПунктами.KOR,
	|	втТДИзФайлаСНаселеннымиПунктами.KVR,
	|	втТДИзФайлаСНаселеннымиПунктами.KODORG,
	|	втТДИзФайлаСНаселеннымиПунктами.KODUSL,
	|	втТДИзФайлаСНаселеннымиПунктами.VIDUSL,
	|	втТДИзФайлаСНаселеннымиПунктами.S_TOTAL,
	|	втТДИзФайлаСНаселеннымиПунктами.GIL_FOND,
	|	втТДИзФайлаСНаселеннымиПунктами.PRIVAT,
	|	втТДИзФайлаСНаселеннымиПунктами.N_VSEGO,
	|	втТДИзФайлаСНаселеннымиПунктами.N_FAKT,
	|	втТДИзФайлаСНаселеннымиПунктами.ED_TAR,
	|	втТДИзФайлаСНаселеннымиПунктами.ED_IZM,
	|	втТДИзФайлаСНаселеннымиПунктами.TAR,
	|	втТДИзФайлаСНаселеннымиПунктами.DATE_S,
	|	втТДИзФайлаСНаселеннымиПунктами.PRIM,
	|	втТДИзФайлаСНаселеннымиПунктами.НаселенныйПункт,
	|	ЕСТЬNULL(втУлицыИзСправочника.УлицаВСправочнике, """") КАК Улица
	|ПОМЕСТИТЬ втТДИзФайлаСАдресом
	|ИЗ
	|	втТДИзФайлаСНаселеннымиПунктами КАК втТДИзФайлаСНаселеннымиПунктами
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУлицыИзСправочника КАК втУлицыИзСправочника
	|		ПО втТДИзФайлаСНаселеннымиПунктами.NSP = втУлицыИзСправочника.КодНаселенногоПункта
	|			И втТДИзФайлаСНаселеннымиПунктами.ULC = втУлицыИзСправочника.КодУлицы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Адрес.Код КАК НомерПомещения,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Владелец КАК Здание
	|ПОМЕСТИТЬ втЛицевыеСчета
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&Дата, Объект.ВидПомещения.ЭтоЖилойФонд) КАК КВП_ЛицевыеСчетаСрезПоследних
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаАдресов.Здание,
	|	ТаблицаАдресов.НаселенныйПункт,
	|	ТаблицаАдресов.Улица,
	|	ТаблицаАдресов.Дом,
	|	ТаблицаАдресов.Корпус
	|ПОМЕСТИТЬ втАдреса
	|ИЗ
	|	&ТаблицаАдресов КАК ТаблицаАдресов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛицевыеСчета.ЛицевойСчет,
	|	ЕСТЬNULL(втАдреса.НаселенныйПункт, """") КАК НаселенныйПункт,
	|	ЕСТЬNULL(втАдреса.Улица, """") КАК Улица,
	|	ЕСТЬNULL(втАдреса.Дом, """") КАК Дом,
	|	ЕСТЬNULL(втАдреса.Корпус, """") КАК Корпус,
	|	втЛицевыеСчета.НомерПомещения КАК Квартира
	|ПОМЕСТИТЬ втЛССАдресами
	|ИЗ
	|	втЛицевыеСчета КАК втЛицевыеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ втАдреса КАК втАдреса
	|		ПО втЛицевыеСчета.Здание = втАдреса.Здание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТДИзФайлаСАдресом.L_ORG,
	|	втТДИзФайлаСАдресом.L_SHET,
	|	ЕСТЬNULL(" + ?(ВыводРеквизитаЛицевогоСчета = 0, "втЛССАдресами.ЛицевойСчет.Код", ?(ВыводРеквизитаЛицевогоСчета = 1, "втЛССАдресами.ЛицевойСчет.Наименование", "втЛССАдресами.ЛицевойСчет.Идентификатор")) + ", """") КАК L_SHET_ORG,
	|	втТДИзФайлаСАдресом.NSP,
	|	втТДИзФайлаСАдресом.ULC,
	|	втТДИзФайлаСАдресом.DOM,
	|	втТДИзФайлаСАдресом.KOR,
	|	втТДИзФайлаСАдресом.KVR,
	|	втТДИзФайлаСАдресом.KODORG,
	|	втТДИзФайлаСАдресом.KODUSL,
	|	втТДИзФайлаСАдресом.VIDUSL,
	|	ВЫБОР
	|		КОГДА втЛССАдресами.ЛицевойСчет ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК PRIZN_OBR,
	|	втТДИзФайлаСАдресом.S_TOTAL,
	|	втТДИзФайлаСАдресом.GIL_FOND,
	|	втТДИзФайлаСАдресом.PRIVAT,
	|	втТДИзФайлаСАдресом.N_VSEGO,
	|	втТДИзФайлаСАдресом.N_FAKT,
	|	втТДИзФайлаСАдресом.ED_TAR,
	|	втТДИзФайлаСАдресом.ED_IZM,
	|	втТДИзФайлаСАдресом.TAR,
	|	втТДИзФайлаСАдресом.DATE_S,
	|	втТДИзФайлаСАдресом.PRIM,
	|	ЕСТЬNULL(втЛССАдресами.ЛицевойСчет, ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)) КАК ЛицевойСчет
	|ПОМЕСТИТЬ втЛСБезУслуг
	|ИЗ
	|	втТДИзФайлаСАдресом КАК втТДИзФайлаСАдресом
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЛССАдресами КАК втЛССАдресами
	|		ПО втТДИзФайлаСАдресом.KVR = втЛССАдресами.Квартира
	|			И втТДИзФайлаСАдресом.DOM = втЛССАдресами.Дом
	|			И втТДИзФайлаСАдресом.KOR = втЛССАдресами.Корпус
	|			И втТДИзФайлаСАдресом.НаселенныйПункт = втЛССАдресами.НаселенныйПункт
	|			И втТДИзФайлаСАдресом.Улица = втЛССАдресами.Улица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛСБезУслуг.L_ORG,
	|	втЛСБезУслуг.L_SHET,
	|	втЛСБезУслуг.L_SHET_ORG,
	|	втЛСБезУслуг.NSP,
	|	втЛСБезУслуг.ULC,
	|	втЛСБезУслуг.DOM,
	|	втЛСБезУслуг.KOR,
	|	втЛСБезУслуг.KVR,
	|	втЛСБезУслуг.KODORG,
	|	втЛСБезУслуг.KODUSL,
	|	втЛСБезУслуг.VIDUSL,
	|	втЛСБезУслуг.S_TOTAL,
	|	втЛСБезУслуг.GIL_FOND,
	|	втЛСБезУслуг.PRIVAT,
	|	втЛСБезУслуг.N_VSEGO,
	|	втЛСБезУслуг.N_FAKT,
	|	втЛСБезУслуг.ED_TAR,
	|	втЛСБезУслуг.ED_IZM,
	|	втЛСБезУслуг.TAR,
	|	втЛСБезУслуг.DATE_S,
	|	втЛСБезУслуг.PRIM,
	|	втЛСБезУслуг.ЛицевойСчет,
	|	ЕСТЬNULL(втУслугиИзФайла.УслугаВСправочнике, """") КАК УслугаВСправочнике,
	|	ЕСТЬNULL(втУслугиИзФайла.УслугаВБазе, ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)) КАК УслугаВБазе,
	|	втЛСБезУслуг.PRIZN_OBR
	|ПОМЕСТИТЬ втЛСБезНачислений
	|ИЗ
	|	втЛСБезУслуг КАК втЛСБезУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУслугиИзФайла КАК втУслугиИзФайла
	|		ПО втЛСБезУслуг.KODUSL = втУслугиИзФайла.Код
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
	|ПОМЕСТИТЬ втНачисления
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНачало,
	|			&Дата,
	|			,
	|			Организация = &Организация
	|				И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ВводНачальногоСальдо))
	|				И НЕ РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени))
	|				И (ЛицевойСчет, Услуга) В
	|					(ВЫБРАТЬ
	|						втЛСБезНачислений.ЛицевойСчет,
	|						втЛСБезНачислений.УслугаВБазе КАК Услуга
	|					ИЗ
	|						втЛСБезНачислений КАК втЛСБезНачислений)) КАК УПЖКХ_НачисленияОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток КАК СуммаЗадолженностиЗаЖКУ
	|ПОМЕСТИТЬ втСуммыЗадолженности
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&ДатаНачало,
	|			Организация = &Организация
	|				И (ЛицевойСчет, Услуга) В
	|					(ВЫБРАТЬ
	|						втЛСБезНачислений.ЛицевойСчет,
	|						втЛСБезНачислений.УслугаВБазе
	|					ИЗ
	|						втЛСБезНачислений КАК втЛСБезНачислений)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|ГДЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Услуга,
	|	МАКСИМУМ(КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период) КАК Период
	|ПОМЕСТИТЬ втПериодыЗадолженности
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(
	|			,
	|			&ДатаОпределенияЗадолженности,
	|			Регистратор,
	|			Движения,
	|			Организация = &Организация
	|				И (ЛицевойСчет, Услуга) В
	|					(ВЫБРАТЬ
	|						втСуммыЗадолженности.ЛицевойСчет,
	|						втСуммыЗадолженности.Услуга
	|					ИЗ
	|						втСуммыЗадолженности КАК втСуммыЗадолженности)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты
	|ГДЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период < &ДатаОпределенияЗадолженности
	|	И КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияКонечныйОстаток <= 0
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Услуга,
	|	МИНИМУМ(КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период) КАК Период
	|ПОМЕСТИТЬ втПериодыНачалаНачислений
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(
	|			,
	|			&ДатаНачало,
	|			Регистратор,
	|			Движения,
	|			Организация = &Организация
	|				И (ЛицевойСчет, Услуга) В
	|					(ВЫБРАТЬ
	|						втСуммыЗадолженности.ЛицевойСчет,
	|						втСуммыЗадолженности.Услуга
	|					ИЗ
	|						втСуммыЗадолженности КАК втСуммыЗадолженности)
	|				И НЕ (ЛицевойСчет, Услуга) В
	|						(ВЫБРАТЬ
	|							втПериодыЗадолженности.ЛицевойСчет,
	|							втПериодыЗадолженности.Услуга
	|						ИЗ
	|							втПериодыЗадолженности КАК втПериодыЗадолженности)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты
	|ГДЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Период < &ДатаНачало
	|	И КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.СуммаНачисленияКонечныйОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстаткиИОбороты.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСуммыЗадолженности.ЛицевойСчет,
	|	втСуммыЗадолженности.Услуга,
	|	втСуммыЗадолженности.СуммаЗадолженностиЗаЖКУ,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втПериодыЗадолженности.Период, ЕСТЬNULL(втПериодыНачалаНачислений.Период, ДАТАВРЕМЯ(1, 1, 1))) = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА втПериодыЗадолженности.Период ЕСТЬ NULL
	|					ТОГДА РАЗНОСТЬДАТ(втПериодыНачалаНачислений.Период, &ДатаНачало, МЕСЯЦ)
	|				ИНАЧЕ ВЫБОР
	|						КОГДА втПериодыЗадолженности.Период > &ДатаНачало
	|							ТОГДА 0
	|						ИНАЧЕ РАЗНОСТЬДАТ(втПериодыЗадолженности.Период, &ДатаНачало, МЕСЯЦ)
	|					КОНЕЦ
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоМесяцевЗадолженностиЗаЖКУ
	|ПОМЕСТИТЬ втЗадолженностьСМесяцами
	|ИЗ
	|	втСуммыЗадолженности КАК втСуммыЗадолженности
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПериодыЗадолженности КАК втПериодыЗадолженности
	|		ПО втСуммыЗадолженности.ЛицевойСчет = втПериодыЗадолженности.ЛицевойСчет
	|			И втСуммыЗадолженности.Услуга = втПериодыЗадолженности.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПериодыНачалаНачислений КАК втПериодыНачалаНачислений
	|		ПО втСуммыЗадолженности.ЛицевойСчет = втПериодыНачалаНачислений.ЛицевойСчет
	|			И втСуммыЗадолженности.Услуга = втПериодыНачалаНачислений.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛСБезНачислений.L_ORG,
	|	втЛСБезНачислений.L_SHET,
	|	втЛСБезНачислений.L_SHET_ORG,
	|	втЛСБезНачислений.NSP,
	|	втЛСБезНачислений.ULC,
	|	втЛСБезНачислений.DOM,
	|	втЛСБезНачислений.KOR,
	|	втЛСБезНачислений.KVR,
	|	втЛСБезНачислений.KODORG,
	|	втЛСБезНачислений.KODUSL,
	|	втЛСБезНачислений.VIDUSL,
	|	ЕСТЬNULL(втНачисления.СуммаНачисленияОборот, 0) КАК USL_OPL,
	|	втЛСБезНачислений.PRIZN_OBR,
	|	втЛСБезНачислений.S_TOTAL,
	|	втЛСБезНачислений.GIL_FOND,
	|	втЛСБезНачислений.PRIVAT,
	|	втЛСБезНачислений.N_VSEGO,
	|	втЛСБезНачислений.N_FAKT,
	|	втЛСБезНачислений.ED_TAR,
	|	втЛСБезНачислений.ED_IZM,
	|	втЛСБезНачислений.TAR,
	|	втЛСБезНачислений.DATE_S,
	|	втЛСБезНачислений.PRIM,
	|	ЕСТЬNULL(втЗадолженностьСМесяцами.СуммаЗадолженностиЗаЖКУ, 0) КАК DOLG_S,
	|	втЛСБезНачислений.ЛицевойСчет,
	|	втЛСБезНачислений.УслугаВСправочнике,
	|	втЛСБезНачислений.УслугаВБазе
	|ПОМЕСТИТЬ втЛСИтоговая
	|ИЗ
	|	втЛСБезНачислений КАК втЛСБезНачислений
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНачисления КАК втНачисления
	|		ПО втЛСБезНачислений.ЛицевойСчет = втНачисления.ЛицевойСчет
	|			И втЛСБезНачислений.УслугаВБазе = втНачисления.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЗадолженностьСМесяцами КАК втЗадолженностьСМесяцами
	|		ПО втЛСБезНачислений.ЛицевойСчет = втЗадолженностьСМесяцами.ЛицевойСчет
	|			И втЛСБезНачислений.УслугаВБазе = втЗадолженностьСМесяцами.Услуга
	|			И (втЗадолженностьСМесяцами.КоличествоМесяцевЗадолженностиЗаЖКУ > 2)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛСИтоговая.L_ORG,
	|	втЛСИтоговая.L_SHET,
	|	втЛСИтоговая.L_SHET_ORG,
	|	втЛСИтоговая.NSP,
	|	втЛСИтоговая.ULC,
	|	втЛСИтоговая.DOM,
	|	втЛСИтоговая.KOR,
	|	втЛСИтоговая.KVR,
	|	втЛСИтоговая.KODORG,
	|	втЛСИтоговая.KODUSL,
	|	втЛСИтоговая.VIDUSL,
	|	СУММА(втЛСИтоговая.USL_OPL) КАК USL_OPL,
	|	втЛСИтоговая.PRIZN_OBR,
	|	втЛСИтоговая.S_TOTAL,
	|	втЛСИтоговая.GIL_FOND,
	|	втЛСИтоговая.PRIVAT,
	|	втЛСИтоговая.N_VSEGO,
	|	втЛСИтоговая.N_FAKT,
	|	втЛСИтоговая.ED_TAR,
	|	втЛСИтоговая.ED_IZM,
	|	втЛСИтоговая.TAR,
	|	втЛСИтоговая.DATE_S,
	|	втЛСИтоговая.PRIM,
	|	СУММА(втЛСИтоговая.DOLG_S) КАК DOLG_S,
	|	втЛСИтоговая.ЛицевойСчет,
	|	втЛСИтоговая.УслугаВСправочнике
	|ИЗ
	|	втЛСИтоговая КАК втЛСИтоговая
	|
	|СГРУППИРОВАТЬ ПО
	|	втЛСИтоговая.NSP,
	|	втЛСИтоговая.KOR,
	|	втЛСИтоговая.L_SHET,
	|	втЛСИтоговая.L_ORG,
	|	втЛСИтоговая.L_SHET_ORG,
	|	втЛСИтоговая.DOM,
	|	втЛСИтоговая.ULC,
	|	втЛСИтоговая.PRIZN_OBR,
	|	втЛСИтоговая.S_TOTAL,
	|	втЛСИтоговая.GIL_FOND,
	|	втЛСИтоговая.PRIVAT,
	|	втЛСИтоговая.N_VSEGO,
	|	втЛСИтоговая.N_FAKT,
	|	втЛСИтоговая.ED_TAR,
	|	втЛСИтоговая.ED_IZM,
	|	втЛСИтоговая.TAR,
	|	втЛСИтоговая.DATE_S,
	|	втЛСИтоговая.PRIM,
	|	втЛСИтоговая.VIDUSL,
	|	втЛСИтоговая.KODUSL,
	|	втЛСИтоговая.KODORG,
	|	втЛСИтоговая.KVR,
	|	втЛСИтоговая.ЛицевойСчет,
	|	втЛСИтоговая.УслугаВСправочнике";
	
	ТаблицаДанныхФайла = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Получает таблицу значений с адресами зданий.
//
Функция ПолучитьАдресаВсехЗданийВладимир()
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	втКонтактнаяИнформация.Объект КАК Здание,
	|	ВЫБОР
	|		КОГДА НЕ втКонтактнаяИнформация.НаселенныйПункт = """"
	|			ТОГДА втКонтактнаяИнформация.НаселенныйПункт
	|		КОГДА НЕ втКонтактнаяИнформация.Город = """"
	|			ТОГДА втКонтактнаяИнформация.Город
	|		ИНАЧЕ втКонтактнаяИнформация.Регион
	|	КОНЕЦ КАК НаселенныйПункт,
	|	втКонтактнаяИнформация.Улица,
	|	втКонтактнаяИнформация.Дом,
	|	втКонтактнаяИнформация.Корпус
	|ИЗ
	|	втКонтактнаяИнформация КАК втКонтактнаяИнформация";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	МассивСокрНасПункт = СформироватьМассивСокращениеДляВладимирскойОблПоВиду(4);
	МассивСокрУлицы    = СформироватьМассивСокращениеДляВладимирскойОблПоВиду(5);
	
	Для Каждого СтрокаЗдания ИЗ Результат Цикл
		СтрокаЗдания.НаселенныйПункт = ВРег(НормализацияПолейАдресаОбласти(СтрокаЗдания.НаселенныйПункт, МассивСокрНасПункт));
		СтрокаЗдания.Улица           = ВРег(НормализацияПолейАдресаОбласти(СтрокаЗдания.Улица, МассивСокрУлицы));
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьАдресаВсехЗданийВладимир()

// Формирует массив сокращений для Томской области для выбранного вида сокращения.
//
Функция СформироватьМассивСокращениеДляВладимирскойОблПоВиду(ВидСокращение)
	
	МассивСокращений = Новый Массив;
	// Для регионов.
	Если ВидСокращение = 1 Тогда
		МассивСокращений.Добавить("обл");
		// Для районов.
	ИначеЕсли ВидСокращение = 2 Тогда
		МассивСокращений.Добавить("р-н");
		МассивСокращений.Добавить("район");
		// Для городов.
	ИначеЕсли ВидСокращение = 3 Тогда
		МассивСокращений.Добавить("г");
		// Для нас.пунктов.
	ИначеЕсли ВидСокращение = 4 Тогда
		МассивСокращений.Добавить("рп");
		МассивСокращений.Добавить("п");
		МассивСокращений.Добавить("с");
		МассивСокращений.Добавить("д");
		МассивСокращений.Добавить("х");
		МассивСокращений.Добавить("ст");
		МассивСокращений.Добавить("пгт");
		МассивСокращений.Добавить("дп");
		МассивСокращений.Добавить("рзд");
		МассивСокращений.Добавить("мкр");
		МассивСокращений.Добавить("нп");
		МассивСокращений.Добавить("тер");
		МассивСокращений.Добавить("п/ст");
		МассивСокращений.Добавить("промзона");
		МассивСокращений.Добавить("снт");
		МассивСокращений.Добавить("п/о");
		МассивСокращений.Добавить("городок");
		МассивСокращений.Добавить("заимка");
		МассивСокращений.Добавить("кп");
		МассивСокращений.Добавить("ж/д_казарм");
		МассивСокращений.Добавить("г");
		МассивСокращений.Добавить("обл");
		МассивСокращений.Добавить("дер");
		МассивСокращений.Добавить("рп.");
		МассивСокращений.Добавить("п.");
		МассивСокращений.Добавить("с.");
		МассивСокращений.Добавить("д.");
		МассивСокращений.Добавить("х.");
		МассивСокращений.Добавить("ст.");
		МассивСокращений.Добавить("пгт.");
		МассивСокращений.Добавить("дп.");
		МассивСокращений.Добавить("рзд.");
		МассивСокращений.Добавить("мкр.");
		МассивСокращений.Добавить("нп.");
		МассивСокращений.Добавить("тер.");
		МассивСокращений.Добавить("п/ст.");
		МассивСокращений.Добавить("промзона.");
		МассивСокращений.Добавить("снт.");
		МассивСокращений.Добавить("п/о.");
		МассивСокращений.Добавить("городок.");
		МассивСокращений.Добавить("заимка.");
		МассивСокращений.Добавить("кп.");
		МассивСокращений.Добавить("ж/д_казарм.");
		МассивСокращений.Добавить("г.");
		МассивСокращений.Добавить("обл.");
		МассивСокращений.Добавить("дер.");
		// Для улиц.
	ИначеЕсли ВидСокращение = 5 Тогда
		МассивСокращений.Добавить("ул");
		МассивСокращений.Добавить("тер");
		МассивСокращений.Добавить("пл");
		МассивСокращений.Добавить("пер");
		МассивСокращений.Добавить("снт");
		МассивСокращений.Добавить("проезд");
		МассивСокращений.Добавить("б-р");
		МассивСокращений.Добавить("туп");
		МассивСокращений.Добавить("п");
		МассивСокращений.Добавить("ш");
		МассивСокращений.Добавить("пр-кт");
		МассивСокращений.Добавить("тракт");
		МассивСокращений.Добавить("сквер");
		МассивСокращений.Добавить("ст");
		МассивСокращений.Добавить("наб");
		МассивСокращений.Добавить("км");
		МассивСокращений.Добавить("ж/д_ст");
		МассивСокращений.Добавить("сад");
		МассивСокращений.Добавить("парк");
		МассивСокращений.Добавить("уч-к");
		МассивСокращений.Добавить("мкр");
		МассивСокращений.Добавить("городок");
		МассивСокращений.Добавить("кв-л");
		МассивСокращений.Добавить("нп");
		МассивСокращений.Добавить("остров");
		МассивСокращений.Добавить("гск");
		МассивСокращений.Добавить("линия");
		МассивСокращений.Добавить("рзд");
		МассивСокращений.Добавить("стр");
		МассивСокращений.Добавить("аллея");
		МассивСокращений.Добавить("казарма");
		МассивСокращений.Добавить("ж/д_рзд");
		МассивСокращений.Добавить("д");
		МассивСокращений.Добавить("ж/д_казарм");
		МассивСокращений.Добавить("ж/д_будка");
		МассивСокращений.Добавить("высел");
		МассивСокращений.Добавить("ул.");
		МассивСокращений.Добавить("тер.");
		МассивСокращений.Добавить("пл.");
		МассивСокращений.Добавить("пер.");
		МассивСокращений.Добавить("снт.");
		МассивСокращений.Добавить("проезд.");
		МассивСокращений.Добавить("б-р.");
		МассивСокращений.Добавить("туп.");
		МассивСокращений.Добавить("п.");
		МассивСокращений.Добавить("ш.");
		МассивСокращений.Добавить("пр-кт.");
		МассивСокращений.Добавить("тракт.");
		МассивСокращений.Добавить("сквер.");
		МассивСокращений.Добавить("ст.");
		МассивСокращений.Добавить("наб.");
		МассивСокращений.Добавить("км.");
		МассивСокращений.Добавить("ж/д_ст.");
		МассивСокращений.Добавить("сад.");
		МассивСокращений.Добавить("парк.");
		МассивСокращений.Добавить("уч-к.");
		МассивСокращений.Добавить("мкр.");
		МассивСокращений.Добавить("городок.");
		МассивСокращений.Добавить("кв-л.");
		МассивСокращений.Добавить("нп.");
		МассивСокращений.Добавить("остров.");
		МассивСокращений.Добавить("гск.");
		МассивСокращений.Добавить("линия.");
		МассивСокращений.Добавить("рзд.");
		МассивСокращений.Добавить("стр.");
		МассивСокращений.Добавить("аллея.");
		МассивСокращений.Добавить("казарма.");
		МассивСокращений.Добавить("ж/д_рзд.");
		МассивСокращений.Добавить("д.");
		МассивСокращений.Добавить("ж/д_казарм.");
		МассивСокращений.Добавить("ж/д_будка.");
		МассивСокращений.Добавить("высел.");
	КонецЕсли;
	
	Возврат МассивСокращений;
	
КонецФункции // СформироватьМассивСокращениеДляСвердловскойОблПоВиду()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ВЫГРУЗКИ ДЛЯ КИРОВСКОЙ ОБЛАСТИ

#Область КировскаяОбласть

// Получает необходимые данные по льготникам и загружает их в основную таблицу выгрузки.
//
Процедура СформироватьТаблицуДанныхКировскаяОбласть(ТаблицаДанныхФайла, ВидБюджета, Услуги) Экспорт
	
	Запрос = Новый Запрос();
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, , Ложь);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаЛК.ЛьготнаяКатегорияВБазе КАК ЛьготнаяКатегорияВБазе,
	|	ТаблицаЛК.КодЛьготнойКатегорииВОСЗН КАК КодЛьготнойКатегорииВОСЗН,
	|	ТаблицаЛК.ВидБюджета КАК ВидБюджета
	|ПОМЕСТИТЬ втЛьготныеКатегорииБезОтбора
	|ИЗ
	|	&ЛьготныеКатегории КАК ТаблицаЛК
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛьготныеКатегорииБезОтбора.ЛьготнаяКатегорияВБазе КАК ЛьготнаяКатегорияВБазе,
	|	втЛьготныеКатегорииБезОтбора.КодЛьготнойКатегорииВОСЗН КАК КодЛьготнойКатегорииВОСЗН
	|ПОМЕСТИТЬ втЛьготныеКатегории
	|ИЗ
	|	втЛьготныеКатегорииБезОтбора КАК втЛьготныеКатегорииБезОтбора
	|ГДЕ
	|	втЛьготныеКатегорииБезОтбора.ВидБюджета = &ВидБюджета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУслуг.Услуга КАК Услуга,
	|	ТаблицаУслуг.КодОСЗН КАК КодОСЗН
	|ПОМЕСТИТЬ втУслугиБезОтбора
	|ИЗ
	|	&Услуги КАК ТаблицаУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втУслугиБезОтбора.Услуга КАК Услуга,
	|	втУслугиБезОтбора.КодОСЗН КАК КодОСЗН
	|ПОМЕСТИТЬ втУслуги
	|ИЗ
	|	втУслугиБезОтбора КАК втУслугиБезОтбора
	|ГДЕ
	|	&ДопУсловие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Ссылка,
	|	Организации.НаименованиеСокращенное КАК НаименованиеСокращенное,
	|	Организации.ОГРН КАК ОГРН
	|ПОМЕСТИТЬ втОрганизации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий КАК Проживающий,
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий.ФизЛицо.ДатаРождения КАК ДатаРождения,
	|	КВП_НазначенныеЛьготыСрезПоследних.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий.Владелец КАК ЛицевойСчет,
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий.Владелец.Адрес КАК Помещение,
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий.Владелец.Адрес.Владелец КАК Здание,
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий.Владелец.Адрес.Владелец.КодДомаПоФИАС КАК КодДомаПоФИАС
	|ПОМЕСТИТЬ втЛьготники
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(
	|			&ДатаКон,
	|			ДатаИзменения <= &ДатаКон
	|				И ЛьготнаяКатегория В
	|					(ВЫБРАТЬ
	|						втЛьготныеКатегории.ЛьготнаяКатегорияВБазе КАК ЛьготнаяКатегорияВБазе
	|					ИЗ
	|						втЛьготныеКатегории КАК втЛьготныеКатегории)) КАК КВП_НазначенныеЛьготыСрезПоследних
	|ГДЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.Действие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НазначенныеНачисленияСрезПоследних.Объект КАК ЛицевойСчет,
	|	КВП_НазначенныеНачисленияСрезПоследних.Услуга КАК Услуга,
	|	КВП_НазначенныеНачисленияСрезПоследних.Организация КАК Организация
	|ПОМЕСТИТЬ втНазначенныеУслуги
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления.СрезПоследних(
	|			&ДатаКон,
	|			ДатаИзменения <= &ДатаКон
	|				И Организация = &Организация
	|				И Объект В
	|					(ВЫБРАТЬ
	|						втЛьготники.ЛицевойСчет КАК ЛицевойСчет
	|					ИЗ
	|						втЛьготники КАК втЛьготники)
	|				И Услуга В
	|					(ВЫБРАТЬ
	|						втУслуги.Услуга КАК Услуга
	|					ИЗ
	|						втУслуги КАК втУслуги)) КАК КВП_НазначенныеНачисленияСрезПоследних
	|ГДЕ
	|	КВП_НазначенныеНачисленияСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНазначенныеУслуги.ЛицевойСчет КАК ЛицевойСчет,
	|	втНазначенныеУслуги.Услуга КАК Услуга,
	|	втНазначенныеУслуги.Организация КАК Организация,
	|	втУслуги.КодОСЗН КАК КодОСЗН,
	|	втОрганизации.НаименованиеСокращенное КАК НаименованиеСокращенное,
	|	втОрганизации.ОГРН КАК ОГРН
	|ПОМЕСТИТЬ втОбъектыСУслугамиИКодами
	|ИЗ
	|	втНазначенныеУслуги КАК втНазначенныеУслуги
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУслуги КАК втУслуги
	|		ПО втНазначенныеУслуги.Услуга = втУслуги.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОрганизации КАК втОрганизации
	|		ПО втНазначенныеУслуги.Организация = втОрганизации.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга КАК Услуга,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток КАК СуммаДолга
	|ПОМЕСТИТЬ втТаблицаДолговСОтбором
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&ДатаСГраницей,
	|			Организация = &Организация
	|				И (ЛицевойСчет, Услуга) В
	|					(ВЫБРАТЬ
	|						втОбъектыСУслугамиИКодами.ЛицевойСчет,
	|						втОбъектыСУслугамиИКодами.Услуга
	|					ИЗ
	|						втОбъектыСУслугамиИКодами КАК втОбъектыСУслугамиИКодами)
	|				И НЕ МесяцНачисления В (&СписокНеУчитываемыхМесяцев)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОбъектыСУслугамиИКодами.ЛицевойСчет КАК ЛицевойСчет,
	|	втОбъектыСУслугамиИКодами.Услуга КАК Услуга
	|ПОМЕСТИТЬ втЛицевыеСчетаБезЗадолженности
	|ИЗ
	|	втОбъектыСУслугамиИКодами КАК втОбъектыСУслугамиИКодами
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаДолговСОтбором КАК втТаблицаДолговСОтбором
	|		ПО втОбъектыСУслугамиИКодами.ЛицевойСчет = втТаблицаДолговСОтбором.Услуга
	|ГДЕ
	|	втТаблицаДолговСОтбором.ЛицевойСчет ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга КАК Услуга,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.МесяцНачисления КАК МесяцНачисления
	|ПОМЕСТИТЬ втМесяцыПогашеннойЗадолженности
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&КонецМесяцаПредшествМесяцуВыгрузки,
	|			Организация = &Организация
	|				И (ЛицевойСчет, Услуга) В
	|					(ВЫБРАТЬ
	|						втЛицевыеСчетаБезЗадолженности.ЛицевойСчет,
	|						втЛицевыеСчетаБезЗадолженности.Услуга
	|					ИЗ
	|						втЛицевыеСчетаБезЗадолженности КАК втЛицевыеСчетаБезЗадолженности)
	|				И НЕ МесяцНачисления = &МесяцПредшествующийМесяцуВыгрузки) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втМесяцыПогашеннойЗадолженности.ЛицевойСчет КАК ЛицевойСчет,
	|	втМесяцыПогашеннойЗадолженности.Услуга КАК Услуга,
	|	МИНИМУМ(втМесяцыПогашеннойЗадолженности.МесяцНачисления) КАК МесяцНачисления
	|ПОМЕСТИТЬ втСамыеРанниеМесяцыПогашеннойЗадолженности
	|ИЗ
	|	втМесяцыПогашеннойЗадолженности КАК втМесяцыПогашеннойЗадолженности
	|
	|СГРУППИРОВАТЬ ПО
	|	втМесяцыПогашеннойЗадолженности.ЛицевойСчет,
	|	втМесяцыПогашеннойЗадолженности.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга КАК Услуга,
	|	МИНИМУМ(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.МесяцНачисления) КАК МесяцНачисления
	|ПОМЕСТИТЬ СамыеРанниеНепогашенныеМесяцыНачисления
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&ДатаСГраницей,
	|			Организация = &Организация
	|				И (ЛицевойСчет, Услуга) В
	|					(ВЫБРАТЬ
	|						втТаблицаДолговСОтбором.ЛицевойСчет,
	|						втТаблицаДолговСОтбором.Услуга
	|					ИЗ
	|						втТаблицаДолговСОтбором КАК втТаблицаДолговСОтбором)
	|				И НЕ МесяцНачисления В (&СписокНеУчитываемыхМесяцев)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|ГДЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_ИсторияРаботыСДолжникамиСрезПоследних.Регистратор КАК СудебноеСоглашение,
	|	УПЖКХ_ИсторияРаботыСДолжникамиСрезПоследних.Должник КАК ЛицевойСчет
	|ПОМЕСТИТЬ втСудебныеСоглашения
	|ИЗ
	|	РегистрСведений.УПЖКХ_ИсторияРаботыСДолжниками.СрезПоследних(
	|			&ДатаКон,
	|			Организация = &Организация
	|				И Должник В
	|					(ВЫБРАТЬ
	|						втТаблицаДолговСОтбором.ЛицевойСчет
	|					ИЗ
	|						втТаблицаДолговСОтбором КАК втТаблицаДолговСОтбором)) КАК УПЖКХ_ИсторияРаботыСДолжникамиСрезПоследних
	|ГДЕ
	|	ДОБАВИТЬКДАТЕ(УПЖКХ_ИсторияРаботыСДолжникамиСрезПоследних.Регистратор.ДатаНачалаПлатежей, МЕСЯЦ, УПЖКХ_ИсторияРаботыСДолжникамиСрезПоследних.Регистратор.МесяцевПоСоглашению) > &ДатаКон
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСудебныеСоглашения.ЛицевойСчет КАК ЛицевойСчет,
	|	втСудебныеСоглашения.СудебноеСоглашение КАК СудебноеСоглашение,
	|	ЕСТЬNULL(УПЖКХ_Иск.НаименованиеСудебногоОргана, """") КАК НаименованиеСудебногоОргана,
	|	ЕСТЬNULL(УПЖКХ_Иск.ДатаСуда, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаСуда,
	|	ЕСТЬNULL(УПЖКХ_Иск.НомерПостановления, """") КАК НомерПостановления
	|ПОМЕСТИТЬ втИскиИСудебныеСоглашения
	|ИЗ
	|	втСудебныеСоглашения КАК втСудебныеСоглашения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.УПЖКХ_Иск КАК УПЖКХ_Иск
	|		ПО втСудебныеСоглашения.СудебноеСоглашение = УПЖКХ_Иск.СудебноеСоглашение
	|			И втСудебныеСоглашения.ЛицевойСчет = УПЖКХ_Иск.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОбъектыСУслугамиИКодами.ЛицевойСчет КАК ЛицевойСчет,
	|	втОбъектыСУслугамиИКодами.Услуга КАК Услуга,
	|	втОбъектыСУслугамиИКодами.Организация КАК Организация,
	|	втОбъектыСУслугамиИКодами.КодОСЗН КАК КодОСЗН,
	|	втОбъектыСУслугамиИКодами.НаименованиеСокращенное КАК НаименованиеСокращенное,
	|	втОбъектыСУслугамиИКодами.ОГРН КАК ОГРН,
	|	ЕСТЬNULL(втТаблицаДолговСОтбором.СуммаДолга, 0) КАК СуммаДолга,
	|	ЕСТЬNULL(НАЧАЛОПЕРИОДА(СамыеРанниеНепогашенныеМесяцыНачисления.МесяцНачисления, МЕСЯЦ), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаНачалаПериодаДолга,
	|	ЕСТЬNULL(НАЧАЛОПЕРИОДА(втСамыеРанниеМесяцыПогашеннойЗадолженности.МесяцНачисления, МЕСЯЦ), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаНачалаПериодаПогашенногоДолга,
	|	втИскиИСудебныеСоглашения.НомерПостановления КАК НомерПостановления
	|ПОМЕСТИТЬ втДанныеОЗадолженностиСОбъектами
	|ИЗ
	|	втОбъектыСУслугамиИКодами КАК втОбъектыСУслугамиИКодами
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаДолговСОтбором КАК втТаблицаДолговСОтбором
	|		ПО втОбъектыСУслугамиИКодами.ЛицевойСчет = втТаблицаДолговСОтбором.ЛицевойСчет
	|			И втОбъектыСУслугамиИКодами.Услуга = втТаблицаДолговСОтбором.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ СамыеРанниеНепогашенныеМесяцыНачисления КАК СамыеРанниеНепогашенныеМесяцыНачисления
	|		ПО втОбъектыСУслугамиИКодами.ЛицевойСчет = СамыеРанниеНепогашенныеМесяцыНачисления.ЛицевойСчет
	|			И втОбъектыСУслугамиИКодами.Услуга = СамыеРанниеНепогашенныеМесяцыНачисления.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСамыеРанниеМесяцыПогашеннойЗадолженности КАК втСамыеРанниеМесяцыПогашеннойЗадолженности
	|		ПО втОбъектыСУслугамиИКодами.ЛицевойСчет = втСамыеРанниеМесяцыПогашеннойЗадолженности.ЛицевойСчет
	|			И втОбъектыСУслугамиИКодами.Услуга = втСамыеРанниеМесяцыПогашеннойЗадолженности.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втИскиИСудебныеСоглашения КАК втИскиИСудебныеСоглашения
	|		ПО втОбъектыСУслугамиИКодами.ЛицевойСчет = втИскиИСудебныеСоглашения.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_ДоговорыУправленияДомами.УправляемыйОбъект КАК Здание,
	|	МАКСИМУМ(УПЖКХ_ДоговорыУправленияДомами.ДатаЗаключенияДоговора) КАК ДатаЗаключенияДоговора
	|ПОМЕСТИТЬ втДатыУправленияДомами
	|ИЗ
	|	Справочник.УПЖКХ_ДоговорыУправленияДомами КАК УПЖКХ_ДоговорыУправленияДомами
	|ГДЕ
	|	УПЖКХ_ДоговорыУправленияДомами.УправляющаяОрганизация = &Организация
	|	И УПЖКХ_ДоговорыУправленияДомами.УправляемыйОбъект В
	|			(ВЫБРАТЬ
	|				втЛьготники.Здание КАК Здание
	|			ИЗ
	|				втЛьготники КАК втЛьготники)
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_ДоговорыУправленияДомами.УправляемыйОбъект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втЛьготники.Проживающий КАК Проживающий,
	|	втЛьготники.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
	|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия, """") КАК Фамилия,
	|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Имя, """") КАК Имя,
	|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Отчество, """") КАК Отчество,
	|	втЛьготники.ДатаРождения КАК ДатаРождения,
	|	втЛьготники.ЛицевойСчет КАК ЛицевойСчет,
	|	втЛьготники.Помещение КАК Помещение,
	|	втЛьготники.Здание КАК Здание,
	|	втЛьготники.КодДомаПоФИАС КАК КодДомаПоФИАС
	|ПОМЕСТИТЬ втЛьготникиБезАдреса
	|ИЗ
	|	втЛьготники КАК втЛьготники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(
	|				&ДатаКон,
	|				ФизическоеЛицо В
	|					(ВЫБРАТЬ
	|						втЛьготники.Проживающий.ФизЛицо
	|					ИЗ
	|						втЛьготники КАК втЛьготники)) КАК ФИОФизЛицСрезПоследних
	|		ПО втЛьготники.Проживающий.ФизЛицо = ФИОФизЛицСрезПоследних.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛьготникиБезАдреса.Проживающий КАК Проживающий,
	|	втЛьготникиБезАдреса.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
	|	втЛьготникиБезАдреса.Фамилия КАК Фамилия,
	|	втЛьготникиБезАдреса.Имя КАК Имя,
	|	втЛьготникиБезАдреса.Отчество КАК Отчество,
	|	втЛьготникиБезАдреса.ДатаРождения КАК ДатаРождения,
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(втКонтактнаяИнформация.НаселенныйПункт, """") = """"
	|			ТОГДА ЕСТЬNULL(втКонтактнаяИнформация.НаселенныйПункт, """")
	|		КОГДА НЕ ЕСТЬNULL(втКонтактнаяИнформация.Город, """") = """"
	|			ТОГДА ЕСТЬNULL(втКонтактнаяИнформация.Город, """")
	|		ИНАЧЕ ЕСТЬNULL(втКонтактнаяИнформация.Регион, """")
	|	КОНЕЦ КАК НаселенныйПункт,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Улица, """") КАК Улица,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Дом, """") КАК Дом,
	|	ЕСТЬNULL(втКонтактнаяИнформация.Корпус, """") КАК Корпус,
	|	втЛьготникиБезАдреса.Помещение.Код КАК Квартира,
	|	втЛьготникиБезАдреса.Помещение.Суффикс КАК Суффикс,
	|	втЛьготникиБезАдреса.ЛицевойСчет КАК ЛицевойСчет,
	|	втЛьготникиБезАдреса.Помещение КАК Помещение,
	|	втЛьготникиБезАдреса.Здание КАК Здание,
	|	втЛьготникиБезАдреса.КодДомаПоФИАС КАК КодДомаПоФИАС
	|ПОМЕСТИТЬ втЛьготникиБезСуммы
	|ИЗ
	|	втЛьготникиБезАдреса КАК втЛьготникиБезАдреса
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК втКонтактнаяИнформация
	|		ПО втЛьготникиБезАдреса.Здание = втКонтактнаяИнформация.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_НачисленныеЛьготыОбороты.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
	|	КВП_НачисленныеЛьготыОбороты.Услуга КАК Услуга,
	|	КВП_НачисленныеЛьготыОбороты.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_НачисленныеЛьготыОбороты.Проживающий КАК Проживающий,
	|	КВП_НачисленныеЛьготыОбороты.СуммаНачисленияОборот КАК СуммаНачисленияОборот
	|ПОМЕСТИТЬ втНачисленныеЛьготы
	|ИЗ
	|	РегистрНакопления.КВП_НачисленныеЛьготы.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Организация = &Организация
	|				И (Проживающий, ЛьготнаяКатегория) В
	|					(ВЫБРАТЬ
	|						втЛьготникиБезСуммы.Проживающий,
	|						втЛьготникиБезСуммы.ЛьготнаяКатегория
	|					ИЗ
	|						втЛьготникиБезСуммы КАК втЛьготникиБезСуммы)) КАК КВП_НачисленныеЛьготыОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель, 0) = 0
	|				ТОГДА 0
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель, 0) = 0
	|						ТОГДА 0
	|					ИНАЧЕ КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель / КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель * ЕСТЬNULL(КВП_ПлощадьПомещенияСрезПоследних.Площадь, 0)
	|				КОНЕЦ
	|		КОНЕЦ) КАК ОбщаяПлощадь
	|ПОМЕСТИТЬ втДанныеОПлощадях
	|ИЗ
	|	РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втЛьготникиБезСуммы.ЛицевойСчет
	|				ИЗ
	|					втЛьготникиБезСуммы КАК втЛьготникиБезСуммы)) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|				&ДатаКон,
	|				Объект В
	|						(ВЫБРАТЬ
	|							втЛьготникиБезСуммы.Помещение
	|						ИЗ
	|							втЛьготникиБезСуммы КАК втЛьготникиБезСуммы)
	|					И ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)) КАК КВП_ПлощадьПомещенияСрезПоследних
	|		ПО (КВП_ПлощадьПомещенияСрезПоследних.Объект = КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.Объект)
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.КоличествоЗарегистрированных КАК Количество
	|ПОМЕСТИТЬ втУчетКоличестваЖильцов
	|ИЗ
	|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втЛьготникиБезСуммы.ЛицевойСчет
	|				ИЗ
	|					втЛьготникиБезСуммы КАК втЛьготникиБезСуммы)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец) КАК Количество,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ КоличествоИзСведений
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втЛьготникиБезСуммы.ЛицевойСчет
	|					ИЗ
	|						втЛьготникиБезСуммы КАК втЛьготникиБезСуммы)
	|				И ДатаИзменения <= &ДатаКон) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛьготникиБезСуммы.Проживающий КАК Проживающий,
	|	втЛьготникиБезСуммы.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
	|	втЛьготникиБезСуммы.Фамилия КАК Фамилия,
	|	втЛьготникиБезСуммы.Имя КАК Имя,
	|	втЛьготникиБезСуммы.Отчество КАК Отчество,
	|	втЛьготникиБезСуммы.ДатаРождения КАК ДатаРождения,
	|	втЛьготникиБезСуммы.НаселенныйПункт КАК НаселенныйПункт,
	|	втЛьготникиБезСуммы.Улица КАК Улица,
	|	втЛьготникиБезСуммы.Дом КАК Дом,
	|	втЛьготникиБезСуммы.Корпус КАК Корпус,
	|	втЛьготникиБезСуммы.Квартира КАК Квартира,
	|	втЛьготникиБезСуммы.Суффикс КАК Суффикс,
	|	втЛьготникиБезСуммы.ЛицевойСчет КАК ЛицевойСчет,
	|	втЛьготникиБезСуммы.КодДомаПоФИАС КАК КодДомаПоФИАС,
	|	ЕСТЬNULL(втДанныеОПлощадях.ОбщаяПлощадь, 0) КАК ОбщаяПлощадь,
	|	ВЫБОР
	|		КОГДА &УказыватьКоличествоПрожИЗарегЧислами
	|			ТОГДА ЕСТЬNULL(втУчетКоличестваЖильцов.Количество, 0)
	|		ИНАЧЕ ЕСТЬNULL(КоличествоИзСведений.Количество, 0)
	|	КОНЕЦ КАК КоличествоЗарегистрированных,
	|	ЕСТЬNULL(втЛьготныеКатегории.КодЛьготнойКатегорииВОСЗН, """") КАК КодУчета,
	|	ЕСТЬNULL(втДатыУправленияДомами.ДатаЗаключенияДоговора, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаЗаключенияДоговора,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ДатаОкончанияДоговора
	|ПОМЕСТИТЬ втЛьготникиСДаннымиБезУслуг
	|ИЗ
	|	втЛьготникиБезСуммы КАК втЛьготникиБезСуммы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеОПлощадях КАК втДанныеОПлощадях
	|		ПО втЛьготникиБезСуммы.ЛицевойСчет = втДанныеОПлощадях.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУчетКоличестваЖильцов КАК втУчетКоличестваЖильцов
	|		ПО втЛьготникиБезСуммы.ЛицевойСчет = втУчетКоличестваЖильцов.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоИзСведений КАК КоличествоИзСведений
	|		ПО втЛьготникиБезСуммы.ЛицевойСчет = КоличествоИзСведений.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЛьготныеКатегории КАК втЛьготныеКатегории
	|		ПО втЛьготникиБезСуммы.ЛьготнаяКатегория = втЛьготныеКатегории.ЛьготнаяКатегорияВБазе
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДатыУправленияДомами КАК втДатыУправленияДомами
	|		ПО втЛьготникиБезСуммы.Здание = втДатыУправленияДомами.Здание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛьготникиСДаннымиБезУслуг.Проживающий КАК Проживающий,
	|	втЛьготникиСДаннымиБезУслуг.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
	|	втЛьготникиСДаннымиБезУслуг.Фамилия КАК Фамилия,
	|	втЛьготникиСДаннымиБезУслуг.Имя КАК Имя,
	|	втЛьготникиСДаннымиБезУслуг.Отчество КАК Отчество,
	|	втЛьготникиСДаннымиБезУслуг.ДатаРождения КАК ДатаРождения,
	|	втЛьготникиСДаннымиБезУслуг.НаселенныйПункт КАК НаселенныйПункт,
	|	втЛьготникиСДаннымиБезУслуг.Улица КАК Улица,
	|	втЛьготникиСДаннымиБезУслуг.Дом КАК Дом,
	|	втЛьготникиСДаннымиБезУслуг.Корпус КАК Корпус,
	|	втЛьготникиСДаннымиБезУслуг.Квартира КАК Квартира,
	|	втЛьготникиСДаннымиБезУслуг.Суффикс КАК Суффикс,
	|	втЛьготникиСДаннымиБезУслуг.ЛицевойСчет КАК ЛицевойСчет,
	|	втЛьготникиСДаннымиБезУслуг.КодДомаПоФИАС КАК КодДомаПоФИАС,
	|	втЛьготникиСДаннымиБезУслуг.ОбщаяПлощадь КАК ОбщаяПлощадь,
	|	втЛьготникиСДаннымиБезУслуг.КоличествоЗарегистрированных КАК КоличествоЗарегистрированных,
	|	втЛьготникиСДаннымиБезУслуг.КодУчета КАК КодУчета,
	|	втЛьготникиСДаннымиБезУслуг.ДатаЗаключенияДоговора КАК ДатаЗаключенияДоговора,
	|	втЛьготникиСДаннымиБезУслуг.ДатаОкончанияДоговора КАК ДатаОкончанияДоговора,
	|	ЕСТЬNULL(втДанныеОЗадолженностиСОбъектами.Услуга, ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)) КАК Услуга,
	|	ЕСТЬNULL(втДанныеОЗадолженностиСОбъектами.КодОСЗН, 0) КАК КодОСЗН,
	|	ЕСТЬNULL(втДанныеОЗадолженностиСОбъектами.НаименованиеСокращенное, """") КАК НаименованиеОрганизации,
	|	ЕСТЬNULL(втДанныеОЗадолженностиСОбъектами.ОГРН, """") КАК ОГРН,
	|	ЕСТЬNULL(втДанныеОЗадолженностиСОбъектами.СуммаДолга, 0) КАК СуммаДолга,
	|	ЕСТЬNULL(втДанныеОЗадолженностиСОбъектами.ДатаНачалаПериодаДолга, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаНачалаПериодаДолга,
	|	ЕСТЬNULL(втДанныеОЗадолженностиСОбъектами.ДатаНачалаПериодаПогашенногоДолга, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаНачалаПериодаПогашенногоДолга,
	|	ЕСТЬNULL(втДанныеОЗадолженностиСОбъектами.НомерПостановления, """") КАК АктОВзыскании
	|ПОМЕСТИТЬ втДанныеБезСуммыДолга
	|ИЗ
	|	втЛьготникиСДаннымиБезУслуг КАК втЛьготникиСДаннымиБезУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеОЗадолженностиСОбъектами КАК втДанныеОЗадолженностиСОбъектами
	|		ПО втЛьготникиСДаннымиБезУслуг.ЛицевойСчет = втДанныеОЗадолженностиСОбъектами.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеБезСуммыДолга.ЛицевойСчет КАК ЛицевойСчет,
	|	втДанныеБезСуммыДолга.Проживающий КАК Проживающий,
	|	втДанныеБезСуммыДолга.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
	|	втДанныеБезСуммыДолга.Услуга КАК Услуга,
	|	втДанныеБезСуммыДолга.Фамилия КАК FAMIL,
	|	втДанныеБезСуммыДолга.Имя КАК IMJA,
	|	втДанныеБезСуммыДолга.Отчество КАК OTCH,
	|	втДанныеБезСуммыДолга.ДатаРождения КАК DROG,
	|	втДанныеБезСуммыДолга.НаселенныйПункт КАК NNASP,
	|	втДанныеБезСуммыДолга.Улица КАК NYLIC,
	|	втДанныеБезСуммыДолга.Дом КАК NDOM,
	|	втДанныеБезСуммыДолга.Корпус КАК NKORP,
	|	втДанныеБезСуммыДолга.Квартира КАК NKW,
	|	втДанныеБезСуммыДолга.КодУчета КАК KODU,
	|	ЕСТЬNULL(втНачисленныеЛьготы.СуммаНачисленияОборот, 0) КАК SUML1,
	|	втДанныеБезСуммыДолга.ОбщаяПлощадь КАК SOB,
	|	втДанныеБезСуммыДолга.КоличествоЗарегистрированных КАК KOLZ,
	|	втДанныеБезСуммыДолга.ДатаНачалаПериодаДолга КАК ZADOLJ_C,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК ZADOLJ_PO,
	|	втДанныеБезСуммыДолга.АктОВзыскании КАК AKT,
	|	втДанныеБезСуммыДолга.ОГРН КАК OGRN,
	|	втДанныеБезСуммыДолга.НаименованиеОрганизации КАК SHORTNAME,
	|	втДанныеБезСуммыДолга.ДатаЗаключенияДоговора КАК DATUPR_C,
	|	втДанныеБезСуммыДолга.ДатаОкончанияДоговора КАК DATUPR_PO,
	|	втДанныеБезСуммыДолга.СуммаДолга КАК SUM_ZADOLJ,
	|	втДанныеБезСуммыДолга.КодОСЗН КАК KOD_USLUGI,
	|	втДанныеБезСуммыДолга.КодДомаПоФИАС КАК КодДомаПоФИАС,
	|	втДанныеБезСуммыДолга.ДатаНачалаПериодаПогашенногоДолга КАК ДатаНачалаПериодаПогашенногоДолга
	|ПОМЕСТИТЬ втИтоговыеДанные
	|ИЗ
	|	втДанныеБезСуммыДолга КАК втДанныеБезСуммыДолга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНачисленныеЛьготы КАК втНачисленныеЛьготы
	|		ПО втДанныеБезСуммыДолга.Проживающий = втНачисленныеЛьготы.Проживающий
	|			И втДанныеБезСуммыДолга.ЛицевойСчет = втНачисленныеЛьготы.ЛицевойСчет
	|			И втДанныеБезСуммыДолга.Услуга = втНачисленныеЛьготы.Услуга
	|			И втДанныеБезСуммыДолга.ЛьготнаяКатегория = втНачисленныеЛьготы.ЛьготнаяКатегория
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговыеДанные.Проживающий КАК Проживающий,
	|	втИтоговыеДанные.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
	|	втИтоговыеДанные.Услуга КАК Услуга,
	|	втИтоговыеДанные.FAMIL КАК FAMIL,
	|	втИтоговыеДанные.IMJA КАК IMJA,
	|	втИтоговыеДанные.OTCH КАК OTCH,
	|	втИтоговыеДанные.DROG КАК DROG,
	|	втИтоговыеДанные.NNASP КАК NNASP,
	|	втИтоговыеДанные.NYLIC КАК NYLIC,
	|	втИтоговыеДанные.NDOM КАК NDOM,
	|	втИтоговыеДанные.NKORP КАК NKORP,
	|	втИтоговыеДанные.NKW КАК NKW,
	|	втИтоговыеДанные.KODU КАК KODU,
	|	ВЫБОР
	|		КОГДА втИтоговыеДанные.SUM_ZADOLJ > 0
	|			ТОГДА 0
	|		ИНАЧЕ втИтоговыеДанные.SUML1
	|	КОНЕЦ КАК SUML1,
	|	втИтоговыеДанные.SOB КАК SOB,
	|	втИтоговыеДанные.KOLZ КАК KOLZ,
	|	ВЫБОР
	|		КОГДА втИтоговыеДанные.SUM_ZADOLJ > 0
	|			ТОГДА 2
	|		ИНАЧЕ ВЫБОР
	|				КОГДА НЕ втИтоговыеДанные.ДатаНачалаПериодаПогашенногоДолга = ДАТАВРЕМЯ(1, 1, 1)
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК ZADOLJ,
	|	втИтоговыеДанные.ZADOLJ_C КАК ZADOLJ_C,
	|	втИтоговыеДанные.ZADOLJ_PO КАК ZADOLJ_PO,
	|	втИтоговыеДанные.AKT КАК AKT,
	|	втИтоговыеДанные.OGRN КАК OGRN,
	|	втИтоговыеДанные.SHORTNAME КАК SHORTNAME,
	|	втИтоговыеДанные.DATUPR_C КАК DATUPR_C,
	|	втИтоговыеДанные.DATUPR_PO КАК DATUPR_PO,
	|	втИтоговыеДанные.SUM_ZADOLJ КАК SUM_ZADOLJ,
	|	втИтоговыеДанные.KOD_USLUGI КАК KOD_USLUGI,
	|	втИтоговыеДанные.ЛицевойСчет КАК LS,
	|	втИтоговыеДанные.КодДомаПоФИАС КАК FIAS_ID,
	|	&ПериодВыгрузки КАК LGMYLIST,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК NEP_MES_C,
	|	ДАТАВРЕМЯ(1, 1, 1) КАК NEP_MES_PO,
	|	втИтоговыеДанные.ДатаНачалаПериодаПогашенногоДолга КАК ДатаНачалаПериодаПогашенногоДолга
	|ИЗ
	|	втИтоговыеДанные КАК втИтоговыеДанные";
	
	Запрос.УстановитьПараметр("ДатаНач",                              НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ДатаКон",                              КонецМесяца(Период));
	Запрос.УстановитьПараметр("ДатаСГраницей",                        Новый Граница(КонецДня(КонецМесяца(Период)), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ЛьготныеКатегории",                    КировскаяОбласть_СоответствиеЛьготныхКатегорий.Выгрузить());
	Запрос.УстановитьПараметр("Услуги",                               КировскаяОбласть_ТаблицаКодовУслуг.Выгрузить());
	Запрос.УстановитьПараметр("Организация",                          Организация);
	Запрос.УстановитьПараметр("УказыватьКоличествоПрожИЗарегЧислами", Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Получить());
	Запрос.УстановитьПараметр("ПериодВыгрузки",                       Формат(Период, "ДФ=ММ.гггг"));
	Запрос.УстановитьПараметр("МесяцПредшествующийМесяцуВыгрузки",    НачалоДня(КонецМесяца(ДобавитьМесяц(Период, -1))));
	Запрос.УстановитьПараметр("КонецМесяцаПредшествМесяцуВыгрузки",   Новый Граница(КонецДня(КонецМесяца(ДобавитьМесяц(Период, -1))), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВидБюджета",                           ВидБюджета);
	
	СписокМесяцевНеУчитываемыхПриОпределенииПросроченнойЗадолженности = Новый СписокЗначений;
	СписокМесяцевНеУчитываемыхПриОпределенииПросроченнойЗадолженности.Добавить(НачалоДня(КонецМесяца(Период)));
	
	Запрос.УстановитьПараметр("СписокНеУчитываемыхМесяцев", СписокМесяцевНеУчитываемыхПриОпределенииПросроченнойЗадолженности);
	
	ТекстЗамены = "ИСТИНА";
	
	// Получение настроек учета кап. ремонта.
	СтруктураНастроекКапРемонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Организация, Истина);
	Если СтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет Тогда
		
		Если Услуги = "УслугиКромеКапитальногоРемонта" Тогда
			ТекстЗамены = "НЕ втУслугиБезОтбора.Услуга В(&СписокУслугКапремонта)";
			Запрос.УстановитьПараметр("СписокУслугКапремонта", СтруктураНастроекКапРемонта.СписокУслуг);
		ИначеЕсли Услуги = "УслугиКапитальногоРемонта" Тогда
			ТекстЗамены = "втУслугиБезОтбора.Услуга В(&СписокУслугКапремонта)";
			Запрос.УстановитьПараметр("СписокУслугКапремонта", СтруктураНастроекКапРемонта.СписокУслуг);
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДопУсловие", ТекстЗамены);
	
	ТаблицаДанныхФайла = Запрос.Выполнить().Выгрузить();
	
	// Для лицевых счетов, которые погасили задолженность, нужно дополнить сумму компенсации
	// за период выгрузки суммами компенсации за месяцы оплаченной задолженности.
	Отбор = Новый Структура("ZADOLJ", 1);
	СтрокиСПогашеннойЗадолженностью = ТаблицаДанныхФайла.НайтиСтроки(Отбор);
	
	Для Каждого Строка Из СтрокиСПогашеннойЗадолженностью Цикл
		
		// Льготы начисляются следующим месяцем за месяцем начисления, поэтому
		// в качестве первого месяца, за который нужно находить начисленные льготы,
		// возьмем следующий за первым месяцем оплаченной задолженности.
		НачалоПериодаОбороты = НачалоМесяца(ДобавитьМесяц(Строка.ДатаНачалаПериодаПогашенногоДолга, 1));
		КонецПериодаОбороты  = КонецМесяца(ДобавитьМесяц(Период, -1));
		ОтборОбороты = Новый Структура("Организация, ЛьготнаяКатегория, Услуга, ЛицевойСчет, Проживающий", Организация, Строка.ЛьготнаяКатегория, Строка.Услуга, Строка.LS, Строка.Проживающий);
		
		ОборотыЗаПериод = РегистрыНакопления.КВП_НачисленныеЛьготы.Обороты(НачалоПериодаОбороты, КонецПериодаОбороты, ОтборОбороты, "ЛьготнаяКатегория, Услуга, ЛицевойСчет, Проживающий", "СуммаНачисления");
		
		Если ОборотыЗаПериод.Количество() > 0 Тогда
			Строка.SUML1 = Строка.SUML1 + ОборотыЗаПериод[0].СуммаНачисления;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДанныхФайла.Проживающий КАК Проживающий,
	|	ТаблицаДанныхФайла.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
	|	ТаблицаДанныхФайла.Услуга КАК Услуга,
	|	ТаблицаДанныхФайла.FAMIL КАК FAMIL,
	|	ТаблицаДанныхФайла.IMJA КАК IMJA,
	|	ТаблицаДанныхФайла.OTCH КАК OTCH,
	|	ТаблицаДанныхФайла.DROG КАК DROG,
	|	ТаблицаДанныхФайла.NNASP КАК NNASP,
	|	ТаблицаДанныхФайла.NYLIC КАК NYLIC,
	|	ТаблицаДанныхФайла.NDOM КАК NDOM,
	|	ТаблицаДанныхФайла.NKORP КАК NKORP,
	|	ТаблицаДанныхФайла.NKW КАК NKW,
	|	ТаблицаДанныхФайла.KODU КАК KODU,
	|	ТаблицаДанныхФайла.SUML1 КАК SUML1,
	|	ТаблицаДанныхФайла.SOB КАК SOB,
	|	ТаблицаДанныхФайла.KOLZ КАК KOLZ,
	|	ТаблицаДанныхФайла.ZADOLJ КАК ZADOLJ,
	|	ТаблицаДанныхФайла.ZADOLJ_C КАК ZADOLJ_C,
	|	ТаблицаДанныхФайла.ZADOLJ_PO КАК ZADOLJ_PO,
	|	ТаблицаДанныхФайла.AKT КАК AKT,
	|	ТаблицаДанныхФайла.OGRN КАК OGRN,
	|	ТаблицаДанныхФайла.SHORTNAME КАК SHORTNAME,
	|	ТаблицаДанныхФайла.DATUPR_C КАК DATUPR_C,
	|	ТаблицаДанныхФайла.DATUPR_PO КАК DATUPR_PO,
	|	ТаблицаДанныхФайла.SUM_ZADOLJ КАК SUM_ZADOLJ,
	|	ТаблицаДанныхФайла.KOD_USLUGI КАК KOD_USLUGI,
	|	ТаблицаДанныхФайла.LS КАК LS,
	|	ТаблицаДанныхФайла.FIAS_ID КАК FIAS_ID,
	|	ТаблицаДанныхФайла.LGMYLIST КАК LGMYLIST,
	|	ТаблицаДанныхФайла.NEP_MES_C КАК NEP_MES_C,
	|	ТаблицаДанныхФайла.NEP_MES_PO КАК NEP_MES_PO,
	|	ТаблицаДанныхФайла.ДатаНачалаПериодаПогашенногоДолга КАК ДатаНачалаПериодаПогашенногоДолга
	|ПОМЕСТИТЬ втТаблицаДанныхФайла
	|ИЗ
	|	&ТаблицаДанныхФайла КАК ТаблицаДанныхФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(втТаблицаДанныхФайла.ZADOLJ_C) КАК ZADOLJ_C,
	|	втТаблицаДанныхФайла.KOD_USLUGI КАК KOD_USLUGI,
	|	втТаблицаДанныхФайла.LS КАК LS
	|ПОМЕСТИТЬ втДатыНачалаЗадолженностиГруппировка
	|ИЗ
	|	втТаблицаДанныхФайла КАК втТаблицаДанныхФайла
	|ГДЕ
	|	втТаблицаДанныхФайла.ZADOLJ = 2
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаДанныхФайла.KOD_USLUGI,
	|	втТаблицаДанныхФайла.LS
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаДанныхФайла.Проживающий КАК Проживающий,
	|	втТаблицаДанныхФайла.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
	|	МАКСИМУМ(втТаблицаДанныхФайла.Услуга) КАК Услуга,
	|	втТаблицаДанныхФайла.FAMIL КАК FAMIL,
	|	втТаблицаДанныхФайла.IMJA КАК IMJA,
	|	втТаблицаДанныхФайла.OTCH КАК OTCH,
	|	втТаблицаДанныхФайла.DROG КАК DROG,
	|	втТаблицаДанныхФайла.NNASP КАК NNASP,
	|	втТаблицаДанныхФайла.NYLIC КАК NYLIC,
	|	втТаблицаДанныхФайла.NDOM КАК NDOM,
	|	втТаблицаДанныхФайла.NKORP КАК NKORP,
	|	втТаблицаДанныхФайла.NKW КАК NKW,
	|	втТаблицаДанныхФайла.KODU КАК KODU,
	|	СУММА(втТаблицаДанныхФайла.SUML1) КАК SUML1,
	|	втТаблицаДанныхФайла.SOB КАК SOB,
	|	втТаблицаДанныхФайла.KOLZ КАК KOLZ,
	|	МАКСИМУМ(втТаблицаДанныхФайла.ZADOLJ) КАК ZADOLJ,
	|	МИНИМУМ(втТаблицаДанныхФайла.ZADOLJ_C) КАК ZADOLJ_C,
	|	МАКСИМУМ(втТаблицаДанныхФайла.ZADOLJ_PO) КАК ZADOLJ_PO,
	|	втТаблицаДанныхФайла.AKT КАК AKT,
	|	втТаблицаДанныхФайла.OGRN КАК OGRN,
	|	втТаблицаДанныхФайла.SHORTNAME КАК SHORTNAME,
	|	втТаблицаДанныхФайла.DATUPR_C КАК DATUPR_C,
	|	втТаблицаДанныхФайла.DATUPR_PO КАК DATUPR_PO,
	|	СУММА(втТаблицаДанныхФайла.SUM_ZADOLJ) КАК SUM_ZADOLJ,
	|	втТаблицаДанныхФайла.KOD_USLUGI КАК KOD_USLUGI,
	|	втТаблицаДанныхФайла.LS КАК LS,
	|	втТаблицаДанныхФайла.FIAS_ID КАК FIAS_ID,
	|	втТаблицаДанныхФайла.LGMYLIST КАК LGMYLIST,
	|	втТаблицаДанныхФайла.NEP_MES_C КАК NEP_MES_C,
	|	втТаблицаДанныхФайла.NEP_MES_PO КАК NEP_MES_PO,
	|	СУММА(1) КАК КоличествоУслуг
	|ПОМЕСТИТЬ втТаблицаДанныхФайлаГруппировка
	|ИЗ
	|	втТаблицаДанныхФайла КАК втТаблицаДанныхФайла
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаДанныхФайла.Проживающий,
	|	втТаблицаДанныхФайла.ЛьготнаяКатегория,
	|	втТаблицаДанныхФайла.FAMIL,
	|	втТаблицаДанныхФайла.IMJA,
	|	втТаблицаДанныхФайла.OTCH,
	|	втТаблицаДанныхФайла.DROG,
	|	втТаблицаДанныхФайла.NNASP,
	|	втТаблицаДанныхФайла.NYLIC,
	|	втТаблицаДанныхФайла.NDOM,
	|	втТаблицаДанныхФайла.NKORP,
	|	втТаблицаДанныхФайла.NKW,
	|	втТаблицаДанныхФайла.KODU,
	|	втТаблицаДанныхФайла.SOB,
	|	втТаблицаДанныхФайла.KOLZ,
	|	втТаблицаДанныхФайла.AKT,
	|	втТаблицаДанныхФайла.OGRN,
	|	втТаблицаДанныхФайла.SHORTNAME,
	|	втТаблицаДанныхФайла.DATUPR_C,
	|	втТаблицаДанныхФайла.DATUPR_PO,
	|	втТаблицаДанныхФайла.KOD_USLUGI,
	|	втТаблицаДанныхФайла.LS,
	|	втТаблицаДанныхФайла.FIAS_ID,
	|	втТаблицаДанныхФайла.LGMYLIST,
	|	втТаблицаДанныхФайла.NEP_MES_C,
	|	втТаблицаДанныхФайла.NEP_MES_PO
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаДанныхФайлаГруппировка.Проживающий КАК Проживающий,
	|	втТаблицаДанныхФайлаГруппировка.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
	|	ВЫБОР
	|		КОГДА втТаблицаДанныхФайлаГруппировка.КоличествоУслуг = 1
	|			ТОГДА втТаблицаДанныхФайлаГруппировка.Услуга
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)
	|	КОНЕЦ КАК Услуга,
	|	втТаблицаДанныхФайлаГруппировка.FAMIL КАК FAMIL,
	|	втТаблицаДанныхФайлаГруппировка.IMJA КАК IMJA,
	|	втТаблицаДанныхФайлаГруппировка.OTCH КАК OTCH,
	|	втТаблицаДанныхФайлаГруппировка.DROG КАК DROG,
	|	втТаблицаДанныхФайлаГруппировка.NNASP КАК NNASP,
	|	втТаблицаДанныхФайлаГруппировка.NYLIC КАК NYLIC,
	|	втТаблицаДанныхФайлаГруппировка.NDOM КАК NDOM,
	|	втТаблицаДанныхФайлаГруппировка.NKORP КАК NKORP,
	|	втТаблицаДанныхФайлаГруппировка.NKW КАК NKW,
	|	втТаблицаДанныхФайлаГруппировка.KODU КАК KODU,
	|	ВЫБОР
	|		КОГДА втТаблицаДанныхФайлаГруппировка.ZADOLJ = 2
	|			ТОГДА 0
	|		ИНАЧЕ втТаблицаДанныхФайлаГруппировка.SUML1
	|	КОНЕЦ КАК SUML1,
	|	втТаблицаДанныхФайлаГруппировка.SOB КАК SOB,
	|	втТаблицаДанныхФайлаГруппировка.KOLZ КАК KOLZ,
	|	ВЫБОР
	|		КОГДА втТаблицаДанныхФайлаГруппировка.ZADOLJ = 2
	|			ТОГДА ""v""
	|		ИНАЧЕ ВЫБОР
	|				КОГДА втТаблицаДанныхФайлаГруппировка.ZADOLJ = 1
	|					ТОГДА ""-""
	|				ИНАЧЕ """"
	|			КОНЕЦ
	|	КОНЕЦ КАК ZADOLJ,
	|	ЕСТЬNULL(втДатыНачалаЗадолженностиГруппировка.ZADOLJ_C, втТаблицаДанныхФайлаГруппировка.ZADOLJ_C) КАК ZADOLJ_C,
	|	втТаблицаДанныхФайлаГруппировка.ZADOLJ_PO КАК ZADOLJ_PO,
	|	втТаблицаДанныхФайлаГруппировка.AKT КАК AKT,
	|	втТаблицаДанныхФайлаГруппировка.OGRN КАК OGRN,
	|	втТаблицаДанныхФайлаГруппировка.SHORTNAME КАК SHORTNAME,
	|	втТаблицаДанныхФайлаГруппировка.DATUPR_C КАК DATUPR_C,
	|	втТаблицаДанныхФайлаГруппировка.DATUPR_PO КАК DATUPR_PO,
	|	втТаблицаДанныхФайлаГруппировка.SUM_ZADOLJ КАК SUM_ZADOLJ,
	|	втТаблицаДанныхФайлаГруппировка.KOD_USLUGI КАК KOD_USLUGI,
	|	втТаблицаДанныхФайлаГруппировка.LS КАК LS,
	|	втТаблицаДанныхФайлаГруппировка.FIAS_ID КАК FIAS_ID,
	|	втТаблицаДанныхФайлаГруппировка.LGMYLIST КАК LGMYLIST,
	|	втТаблицаДанныхФайлаГруппировка.NEP_MES_C КАК NEP_MES_C,
	|	втТаблицаДанныхФайлаГруппировка.NEP_MES_PO КАК NEP_MES_PO
	|ИЗ
	|	втТаблицаДанныхФайлаГруппировка КАК втТаблицаДанныхФайлаГруппировка
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДатыНачалаЗадолженностиГруппировка КАК втДатыНачалаЗадолженностиГруппировка
	|		ПО втТаблицаДанныхФайлаГруппировка.LS = втДатыНачалаЗадолженностиГруппировка.LS
	|			И втТаблицаДанныхФайлаГруппировка.KOD_USLUGI = втДатыНачалаЗадолженностиГруппировка.KOD_USLUGI";
	
	Запрос.УстановитьПараметр("ТаблицаДанныхФайла", ТаблицаДанныхФайла);
	
	ТаблицаДанныхФайла = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры // СформироватьТаблицуДанныхКировскаяОбласть

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ МЕТОДЫ

#Область ОбщиеПроцедурыИФункции

// Функция сокращает название города или улицы: убирает сокращения,
// определяющие тип данного элемента адреса: "г.", "ул." и так далее.
//
// Параметры:
//  Ресурс       - Строка - элемент адреса.
//
// Возвращаемое значение:
//  Строка - элемент адреса в сокращенном виде.
//
Функция НормализацияПолейАдресаОбласти(Ресурс, Массив)
	
	Найден = Истина;
	
	Для Каждого Элемент Из Массив Цикл
		
		Если Прав(СокрЛП(Ресурс), СтрДлина(Элемент)) = Элемент Тогда
			ПредСимвол = Сред(СокрЛП(Ресурс), СтрДлина(СокрЛП(Ресурс)) - СтрДлина(Элемент), 1);
			
			Если ПредСимвол = " " Тогда
				Возврат СокрЛП(Лев(СокрЛП(Ресурс), СтрДлина(СокрЛП(Ресурс)) - СтрДлина(Элемент)));
			КонецЕсли;
		ИначеЕсли Лев(СокрЛП(Ресурс), СтрДлина(Элемент)) = Элемент Тогда
			СледСимвол = Сред(СокрЛП(Ресурс), СтрДлина(Элемент) + 1, 1);
			
			Если СледСимвол = " " Тогда
				Возврат СокрЛП(Сред(СокрЛП(Ресурс), СтрДлина(Элемент) + 1));
			КонецЕсли;
		Иначе
			
			Найден = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Найден = Ложь Тогда
		Возврат Ресурс;
	КонецЕсли;
	
КонецФункции

// Убирает из наименования лицевого счета не цифровые символы.
//
Функция ПодготовитьНомерЛСДляВывода(ЛицевойСчет) Экспорт
	
	НаименованиеЛС = СокрЛП(ЛицевойСчет);
	СтрокаДляВозврата = "";
	Пока СтрДлина(НаименованиеЛС) > 0 Цикл
		
		СимволЛС = Лев(НаименованиеЛС, 1);
		Если КодСимвола(СимволЛС) > 47 И КодСимвола(СимволЛС) < 58 Тогда
			СтрокаДляВозврата = СтрокаДляВозврата + СимволЛС;
		КонецЕсли;
		
		НаименованиеЛС = Прав(НаименованиеЛС, СтрДлина(НаименованиеЛС) - 1);
	КонецЦикла;
	
	Возврат СтрокаДляВозврата;
	
КонецФункции // ПодготовитьНомерЛСДляВывода()

// Убирает из строки не цифровые символы.
//
// Параметры:
//  Строка            - Строка - строка, из которой выбираются цифры;
//  СтрокаДляВозврата - Строка - начальная строка для взврата (цифровые символы из Строки конкатенируют справа).
//
// Возвращаемое значение:
//  СтрокаДляВозврата - Строка - строка, состоящая из цифр, выбранных из Строки.
//
Функция ПолучитьЦифровыеСимволыИзСтроки(Знач Строка, СтрокаДляВозврата = "", ИсключатьЛидирующиеНули = Ложь) Экспорт
	
	// Таблица кодов цифровых символов в кодировке Unicode.
	// КодСимвола("0") = 48;
	// КодСимвола("1") = 49;
	// КодСимвола("2") = 50;
	// КодСимвола("3") = 51;
	// КодСимвола("4") = 52;
	// КодСимвола("5") = 53;
	// КодСимвола("6") = 54;
	// КодСимвола("7") = 55;
	// КодСимвола("8") = 56;
	// КодСимвола("9") = 57.
	
	Пока СтрДлина(Строка) > 0 Цикл
		
		СимволЛС = Лев(Строка, 1);
		Если КодСимвола(СимволЛС) > 47 И КодСимвола(СимволЛС) < 58 Тогда
			СтрокаДляВозврата = СтрокаДляВозврата + СимволЛС;
		КонецЕсли;
		
		Строка = Прав(Строка, СтрДлина(Строка) - 1);
		
	КонецЦикла;
	
	Если ИсключатьЛидирующиеНули Тогда
		
		Пока КодСимвола(Лев(СтрокаДляВозврата, 1)) = 48 Цикл
			
			СтрокаДляВозврата = Прав(СтрокаДляВозврата, СтрДлина(СтрокаДляВозврата) - 1);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтрокаДляВозврата;
	
КонецФункции // ПолучитьЦифровыеСимволыИзСтроки()

// Убирает из строки не цифровые символы и конвертирует полученное значение в число.
//
// Параметры:
//  Строка - приводимая к числу строка.
//
// Возвращаемое значение:
//  Число - полученное из строки число. По умолчанию 0.
//
Функция ПолучитьЧислоИзСтроки(Знач Строка) Экспорт
	
	// По умолчанию 0. Если цифровые символы в строке есть, то это будет лидирующий ноль в числе,
	// если цифровых символов нет - гарантированно возвращаемый 0.
	СтрокаДляВозврата = ПолучитьЦифровыеСимволыИзСтроки(Строка, "0");
	
	Возврат Число(СтрокаДляВозврата);
	
КонецФункции // ПолучитьЧислоИзСтроки()

// Получает таблицу значений с ФИО физических лиц.
//
Функция ПолучитьФИОФизЛиц()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо,
	|	ФИОФизическихЛицСрезПоследних.Фамилия,
	|	ФИОФизическихЛицСрезПоследних.Имя,
	|	ФИОФизическихЛицСрезПоследних.Отчество
	|ИЗ
	|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&Дата, ) КАК ФИОФизическихЛицСрезПоследних";
	
	Запрос.УстановитьПараметр("Дата", КонецМесяца(Период));
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаФизЛица ИЗ Результат Цикл
		СтрокаФизЛица.Фамилия  = ВРег(СтрокаФизЛица.Фамилия);
		СтрокаФизЛица.Имя      = ВРег(СтрокаФизЛица.Имя);
		СтрокаФизЛица.Отчество = ВРег(СтрокаФизЛица.Отчество);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьФИОФизЛиц()

#КонецОбласти

#Область МосковскаяОбластьЖуковский

/////////////////////
// Услуги.

// Заполняет таблицу видов услуг в ОСЗН по умолчанию.
//
Процедура ЗаполнитьТаблицуВидовУслугЖуковский() Экспорт
	
	Макет = ПолучитьМакет("МосковскаяОбластьГородЖуковский_Макет");
	
	МосковскаяОбластьЖуковский_ВидыУслуг.Очистить();
	
	// Для услуг из "СпискаУслуг1" будет произеден поиск данных о тарифах и начислениях.
	ДобавитьСтрокиТаблицыВидовУслугСогласноСпискуЖуковский(Макет, "СписокВидовУслуг1", 1);
	
	// Для услуг из "СпискаУслуг2" будет произеден поиск данных о тарифах,
	// начислениях, наличии счетчиков и нормах потребления.
	ДобавитьСтрокиТаблицыВидовУслугСогласноСпискуЖуковский(Макет, "СписокВидовУслуг2", 2);
	
	// Для услуг из "СпискаУслуг3" будет произеден поиск данных о тарифах,
	// начислениях, нормах потребления и количество л/с, на которые распределяется показания счетчиков.
	//ДобавитьСтрокиТаблицыВидовУслугСогласноСпискуЖуковский(Макет, "СписокВидовУслуг3", 3);
	
КонецПроцедуры // ЗаполнитьТаблицуВидовУслуг()

// Добавляет в таблицу видов услуг в ОСЗН строки соглано текущему списку видов услуг.
// 
// Параметры:
//  ТекущийСписокВидовУслуг - СписокЗначений - один из списков значений видов услуг,
//                                             определенных как глобальные переменные данного модуля;
//  ТекущийВидОперации      - Число          - вид операции, согласно нумерации текущего списка видов услуг.
//
Процедура ДобавитьСтрокиТаблицыВидовУслугСогласноСпискуЖуковский(Макет, ИмяСписка, ТекущийВидОперации)
	
	СписокВидовУслуг = Макет.ПолучитьОбласть(ИмяСписка);
	
	Для НомерСтроки = 1 По СписокВидовУслуг.ВысотаТаблицы Цикл
		
		НоваяУслуга                = МосковскаяОбластьЖуковский_ВидыУслуг.Добавить();
		НоваяУслуга.ВидОперации    = ТекущийВидОперации;
		НоваяУслуга.Суффикс        = СписокВидовУслуг.Область(НомерСтроки, 1).Текст;
		НоваяУслуга.ВидУслугиВОСЗН = СписокВидовУслуг.Область(НомерСтроки, 2).Текст;
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьСтрокиТаблицыВидовУслугСогласноСписку()

/////////////////////
// Благоустройства.

// Заполняет таблицу благоустройств по умолчанию.
//
Процедура ЗаполнитьТаблицуБлагоустройствЖуковский() Экспорт
	
	Макет = ПолучитьМакет("МосковскаяОбластьГородЖуковский_Макет");
	
	ОбластьСписокВидовБлагоустройств = Макет.ПолучитьОбласть("СписокВидовБлагоустройств");
	
	Для КодУслуги = 1 По ОбластьСписокВидовБлагоустройств.ВысотаТаблицы Цикл
		
		НоваяСтрока                         = МосковскаяОбластьЖуковский_СоответствиеВидовБлагоустройств.Добавить();
		НоваяСтрока.Суффикс                 = СокрЛП(ОбластьСписокВидовБлагоустройств.Область(КодУслуги, 1).Текст);
		НоваяСтрока.ВидБлагоустройстваВОСЗН = СокрЛП(ОбластьСписокВидовБлагоустройств.Область(КодУслуги, 2).Текст);
		НоваяСтрока.ВидБлагоустройстваВБазе = ?(НоваяСтрока.Суффикс = "KODPLITA", Справочники.КВП_ВидыБлагоустройстваОбъектов.Плита, ?(НоваяСтрока.Суффикс = "KODGV", Справочники.КВП_ВидыБлагоустройстваОбъектов.ГорячееВодоснабжение, 0));
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблицуВидовУслуг()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ВЫГРУЗКИ ДЛЯ РЕСПУБЛИКИ МОРДОВИЯ

#Область РеспубликаМордовия

// Формирует таблицу всех выгружаемых данных.
//
Процедура СформироватьТаблицуДанныхРеспубликаМордовия(ТаблицаДанныхФайла, ФорматВыгрузки) Экспорт
	
	ТаблицаАдресов = ПолучитьАдресаВсехЗданийРеспубликаМордовия();
	ТаблицаФИО     = ПолучитьФИОФизЛиц();
	ПолучитьТаблицуНачисленийМордовия(ТаблицаДанныхФайла, ТаблицаАдресов, ТаблицаФИО, ФорматВыгрузки);
	
КонецПроцедуры

// Получает таблицу данных с начислениями и необходимыми данными.
//
Процедура ПолучитьТаблицуНачисленийМордовия(ТаблицаДанныхФайла, ТаблицаАдресов, ТаблицаФИО, ФорматВыгрузки)
	
	ТаблицаИдентифицированныхЖильцов = ПолучитьТаблицуИдентифицированныхЖильцовМордовия(ТаблицаДанныхФайла, ТаблицаАдресов, ТаблицаФИО);
	
	Запрос = Новый Запрос;
	
	МенеджерВТ                     = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	// Параметры.
	
	Запрос.УстановитьПараметр("ДатаНачала",            НачалоМесяца(Период));
	Запрос.УстановитьПараметр("ДатаКонца",             КонецМесяца(Период));
	Запрос.УстановитьПараметр("Организация",           Организация);
	Запрос.УстановитьПараметр("ТаблицаИдентифЖильцов", ТаблицаИдентифицированныхЖильцов);
	Запрос.УстановитьПараметр("ТаблицаДанныхФайла",    ТаблицаДанныхФайла);
	Запрос.УстановитьПараметр("ЖКУ_ВБазе",             РеспубликаМордовия_ТаблицаУслугДляВыгрузки.Выгрузить());
	
	Запрос.УстановитьПараметр("УказыватьКоличествоПрожИЗарегЧислами", Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Получить());
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИзФайла.A_SPUNID,
	|	ТаблицаИзФайла.A_SPUN,
	|	ТаблицаИзФайла.FM,
	|	ТаблицаИзФайла.IM,
	|	ТаблицаИзФайла.OT,
	|	ТаблицаИзФайла.FMВрег,
	|	ТаблицаИзФайла.IMВрег,
	|	ТаблицаИзФайла.OTВрег,
	|	ТаблицаИзФайла.GORODВрег,
	|	ТаблицаИзФайла.ULВрег,
	|	ТаблицаИзФайла.DROG,
	|	ТаблицаИзФайла.SERP,
	|	ТаблицаИзФайла.NOMP,
	|	ТаблицаИзФайла.GOROD,
	|	ТаблицаИзФайла.UL,
	|	ТаблицаИзФайла.DM,
	|	ТаблицаИзФайла.KORP,
	|	ТаблицаИзФайла.KV,
	|	ТаблицаИзФайла.DATS,
	|	ТаблицаИзФайла.DATPO,
	|	ТаблицаИзФайла.SUB,
	|	ТаблицаИзФайла.DATPR,
	|	ТаблицаИзФайла.KHLS,
	|	ТаблицаИзФайла.A_MD5,
	|	ТаблицаИзФайла.DATS1,
	|	ТаблицаИзФайла.DATPO1,
	|	ТаблицаИзФайла.DATS2,
	|	ТаблицаИзФайла.DATPO2,
	|	ТаблицаИзФайла.DATS3,
	|	ТаблицаИзФайла.DATPO3,
	|	ТаблицаИзФайла.DATS4,
	|	ТаблицаИзФайла.DATPO4,
	|	ТаблицаИзФайла.KAT,
	|	ТаблицаИзФайла.LGOTA,
	|	ТаблицаИзФайла.KHLS1,
	|	ТаблицаИзФайла.KHLS2,
	|	ТаблицаИзФайла.KHLS3,
	|	ТаблицаИзФайла.KHLS4
	|ПОМЕСТИТЬ втТаблицаДанныхИзФайла
	|ИЗ
	|	&ТаблицаДанныхФайла КАК ТаблицаИзФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУслуг.Идентификатор,
	|	ТаблицаУслуг.УслугаВБазе
	|ПОМЕСТИТЬ втУслуги
	|ИЗ
	|	&ЖКУ_ВБазе КАК ТаблицаУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаИдентифЖильцов.ПризнакЗадвоения,
	|	ТаблицаИдентифЖильцов.Проживающий,
	|	ТаблицаИдентифЖильцов.ЛицевойСчет,
	|	ТаблицаИдентифЖильцов.Помещение,
	|	ТаблицаИдентифЖильцов.Фамилия,
	|	ТаблицаИдентифЖильцов.Имя,
	|	ТаблицаИдентифЖильцов.ДатаРождения,
	|	ТаблицаИдентифЖильцов.Отчество,
	|	ТаблицаИдентифЖильцов.Город,
	|	ТаблицаИдентифЖильцов.Улица,
	|	ТаблицаИдентифЖильцов.Дом,
	|	ТаблицаИдентифЖильцов.Корпус,
	|	ТаблицаИдентифЖильцов.Квартира,
	|	ТаблицаИдентифЖильцов.КвартираИзАдресаЗдания
	|ПОМЕСТИТЬ втИдентифицированныеЖильцы
	|ИЗ
	|	&ТаблицаИдентифЖильцов КАК ТаблицаИдентифЖильцов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.ЛицевойСчет,
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.КоличествоЗарегистрированных КАК Количество
	|ПОМЕСТИТЬ втУчетКоличестваЖильцов
	|ИЗ
	|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втИдентифицированныеЖильцы.ЛицевойСчет
	|				ИЗ
	|					втИдентифицированныеЖильцы КАК втИдентифицированныеЖильцы)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец) КАК Количество,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет
	|ПОМЕСТИТЬ КоличествоИзСведений
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втИдентифицированныеЖильцы.ЛицевойСчет
	|					ИЗ
	|						втИдентифицированныеЖильцы КАК втИдентифицированныеЖильцы)
	|				И ДатаИзменения <= &ДатаКонца) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втИдентифицированныеЖильцы.ПризнакЗадвоения,
	|	втИдентифицированныеЖильцы.Проживающий,
	|	втИдентифицированныеЖильцы.ЛицевойСчет,
	|	втИдентифицированныеЖильцы.Помещение,
	|	втИдентифицированныеЖильцы.Фамилия,
	|	втИдентифицированныеЖильцы.Имя,
	|	втИдентифицированныеЖильцы.Отчество,
	|	втИдентифицированныеЖильцы.ДатаРождения,
	|	втИдентифицированныеЖильцы.Город,
	|	втИдентифицированныеЖильцы.Улица,
	|	втИдентифицированныеЖильцы.Дом,
	|	втИдентифицированныеЖильцы.Корпус,
	|	втИдентифицированныеЖильцы.Квартира,
	|	втИдентифицированныеЖильцы.КвартираИзАдресаЗдания,
	|	ВЫБОР
	|		КОГДА &УказыватьКоличествоПрожИЗарегЧислами
	|			ТОГДА ЕСТЬNULL(втУчетКоличестваЖильцов.Количество, 0)
	|		ИНАЧЕ ЕСТЬNULL(КоличествоИзСведений.Количество, 0)
	|	КОНЕЦ КАК КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втЖильцыИЗарегистрированные
	|ИЗ
	|	втИдентифицированныеЖильцы КАК втИдентифицированныеЖильцы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУчетКоличестваЖильцов КАК втУчетКоличестваЖильцов
	|		ПО втИдентифицированныеЖильцы.ЛицевойСчет = втУчетКоличестваЖильцов.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ КоличествоИзСведений КАК КоличествоИзСведений
	|		ПО втИдентифицированныеЖильцы.ЛицевойСчет = КоличествоИзСведений.ЛицевойСчет";
	
	Запрос.Выполнить();
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект,
	|	КВП_ПлощадьПомещенияСрезПоследних.Площадь
	|ПОМЕСТИТЬ втПлощадиПомещений
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|			&ДатаКонца,
	|			Объект В
	|					(ВЫБРАТЬ
	|						втЖильцыИЗарегистрированные.Помещение
	|					ИЗ
	|						втЖильцыИЗарегистрированные КАК втЖильцыИЗарегистрированные)
	|				И ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)) КАК КВП_ПлощадьПомещенияСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.Объект,
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет,
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель,
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель,
	|	ВЫБОР
	|		КОГДА КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель = 0
	|			ТОГДА 0
	|		ИНАЧЕ КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель / КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель
	|	КОНЕЦ КАК Доля
	|ПОМЕСТИТЬ втРазмерыДолейЛС
	|ИЗ
	|	РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(
	|			&ДатаКонца,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втЖильцыИЗарегистрированные.ЛицевойСчет
	|				ИЗ
	|					втЖильцыИЗарегистрированные КАК втЖильцыИЗарегистрированные)) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втРазмерыДолейЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	МАКСИМУМ(ЕСТЬNULL(втПлощадиПомещений.Площадь, 0) * втРазмерыДолейЛС.Доля) КАК ОбщаяПлощадь
	|ПОМЕСТИТЬ втДанныеОПлощадях
	|ИЗ
	|	втРазмерыДолейЛС КАК втРазмерыДолейЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПлощадиПомещений КАК втПлощадиПомещений
	|		ПО втРазмерыДолейЛС.Объект = втПлощадиПомещений.Объект
	|
	|СГРУППИРОВАТЬ ПО
	|	втРазмерыДолейЛС.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцыИЗарегистрированные.ПризнакЗадвоения,
	|	втЖильцыИЗарегистрированные.Проживающий,
	|	втЖильцыИЗарегистрированные.ЛицевойСчет,
	|	втЖильцыИЗарегистрированные.Помещение,
	|	втЖильцыИЗарегистрированные.Фамилия,
	|	втЖильцыИЗарегистрированные.Имя,
	|	втЖильцыИЗарегистрированные.Отчество,
	|	втЖильцыИЗарегистрированные.ДатаРождения,
	|	втЖильцыИЗарегистрированные.Город,
	|	втЖильцыИЗарегистрированные.Улица,
	|	втЖильцыИЗарегистрированные.Дом,
	|	втЖильцыИЗарегистрированные.Корпус,
	|	втЖильцыИЗарегистрированные.Квартира,
	|	втЖильцыИЗарегистрированные.КвартираИзАдресаЗдания,
	|	втЖильцыИЗарегистрированные.КоличествоЗарегистрированных,
	|	ЕСТЬNULL(втДанныеОПлощадях.ОбщаяПлощадь, 0) КАК ОбщаяПлощадь
	|ПОМЕСТИТЬ втДанныеСПлощадямиБезКомнат
	|ИЗ
	|	втЖильцыИЗарегистрированные КАК втЖильцыИЗарегистрированные
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеОПлощадях КАК втДанныеОПлощадях
	|		ПО втЖильцыИЗарегистрированные.ЛицевойСчет = втДанныеОПлощадях.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втДанныеСПлощадямиБезКомнат.ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.Комната) КАК Доля
	|ПОМЕСТИТЬ втЛСКомнатыИзРегистра
	|ИЗ
	|	втДанныеСПлощадямиБезКомнат КАК втДанныеСПлощадямиБезКомнат
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ПривязанныеКЛицевомуСчетуКомнаты.СрезПоследних(
	|				&ДатаКонца,
	|				ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втДанныеСПлощадямиБезКомнат.ЛицевойСчет
	|					ИЗ
	|						втДанныеСПлощадямиБезКомнат КАК втДанныеСПлощадямиБезКомнат)) КАК УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних
	|		ПО втДанныеСПлощадямиБезКомнат.ЛицевойСчет = УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.ЛицевойСчет
	|			И втДанныеСПлощадямиБезКомнат.Помещение = УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.Комната.Родитель
	|ГДЕ
	|	УПЖКХ_ПривязанныеКЛицевомуСчетуКомнатыСрезПоследних.Привязка
	|
	|СГРУППИРОВАТЬ ПО
	|	втДанныеСПлощадямиБезКомнат.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втДанныеСПлощадямиБезКомнат.ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_Помещения.Ссылка) КАК Доля
	|ПОМЕСТИТЬ втКомнатыИзСправочника
	|ИЗ
	|	втДанныеСПлощадямиБезКомнат КАК втДанныеСПлощадямиБезКомнат
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
	|		ПО втДанныеСПлощадямиБезКомнат.Помещение = УПЖКХ_Помещения.Родитель
	|ГДЕ
	|	НЕ УПЖКХ_Помещения.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	втДанныеСПлощадямиБезКомнат.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеСПлощадямиБезКомнат.ПризнакЗадвоения,
	|	втДанныеСПлощадямиБезКомнат.Проживающий,
	|	втДанныеСПлощадямиБезКомнат.ЛицевойСчет,
	|	" + ?(ВыводРеквизитаЛицевогоСчета = 0, "втДанныеСПлощадямиБезКомнат.ЛицевойСчет.Код", ?(ВыводРеквизитаЛицевогоСчета = 1, "втДанныеСПлощадямиБезКомнат.ЛицевойСчет.Наименование", "втДанныеСПлощадямиБезКомнат.ЛицевойСчет.Идентификатор")) + " КАК ЛицевойСчетВОрганизации,
	|	втДанныеСПлощадямиБезКомнат.Помещение,
	|	втДанныеСПлощадямиБезКомнат.Фамилия,
	|	втДанныеСПлощадямиБезКомнат.Имя,
	|	втДанныеСПлощадямиБезКомнат.Отчество,
	|	втДанныеСПлощадямиБезКомнат.ДатаРождения,
	|	втДанныеСПлощадямиБезКомнат.Город,
	|	втДанныеСПлощадямиБезКомнат.Улица,
	|	втДанныеСПлощадямиБезКомнат.Дом,
	|	втДанныеСПлощадямиБезКомнат.Корпус,
	|	втДанныеСПлощадямиБезКомнат.Квартира,
	|	втДанныеСПлощадямиБезКомнат.КвартираИзАдресаЗдания,
	|	втДанныеСПлощадямиБезКомнат.КоличествоЗарегистрированных,
	|	втДанныеСПлощадямиБезКомнат.ОбщаяПлощадь,
	|	ВЫБОР
	|		КОГДА НЕ втЛСКомнатыИзРегистра.Доля = 0
	|			ТОГДА втЛСКомнатыИзРегистра.Доля
	|		КОГДА НЕ втКомнатыИзСправочника.Доля = 0
	|			ТОГДА втКомнатыИзСправочника.Доля
	|		ИНАЧЕ втДанныеСПлощадямиБезКомнат.Помещение.КоличествоКомнат
	|	КОНЕЦ КАК КоличествоКомнат
	|ПОМЕСТИТЬ втДанныеСПлощадями
	|ИЗ
	|	втДанныеСПлощадямиБезКомнат КАК втДанныеСПлощадямиБезКомнат
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЛСКомнатыИзРегистра КАК втЛСКомнатыИзРегистра
	|		ПО втДанныеСПлощадямиБезКомнат.ЛицевойСчет = втЛСКомнатыИзРегистра.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКомнатыИзСправочника КАК втКомнатыИзСправочника
	|		ПО втДанныеСПлощадямиБезКомнат.ЛицевойСчет = втКомнатыИзСправочника.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втЖильцыИЗарегистрированные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втДанныеОПлощадях
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втРазмерыДолейЛС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втПлощадиПомещений";
	
	Запрос.Выполнить();
	//|;
	//|
	//|////////////////////////////////////////////////////////////////////////////////
	
	Если ФорматВыгрузки = 1 Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
		|	УПЖКХ_НачисленияОбороты.Услуга,
		|	СУММА(УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот) КАК СуммаНачисления
		|ПОМЕСТИТЬ втНачисления
		|ИЗ
		|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
		|			&ДатаНачала,
		|			&ДатаКонца,
		|			Запись,
		|			Организация = &Организация
		|				И ЛицевойСчет В
		|					(ВЫБРАТЬ
		|						втДанныеСПлощадями.ЛицевойСчет
		|					ИЗ
		|						втДанныеСПлощадями КАК втДанныеСПлощадями)
		|				И Услуга В
		|					(ВЫБРАТЬ
		|						втУслуги.УслугаВБазе
		|					ИЗ
		|						втУслуги КАК втУслуги)
		|				И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
		|				И НЕ РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)) КАК УПЖКХ_НачисленияОбороты
		|ГДЕ
		|	ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.Регистратор ССЫЛКА Документ.КВП_РегистрацияОплаты
		|				ТОГДА НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Рассрочка)
		|						И НЕ УПЖКХ_НачисленияОбороты.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Комиссия))
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
		|	УПЖКХ_НачисленияОбороты.Услуга
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втНачисления.ЛицевойСчет,
		|	втНачисления.Услуга,
		|	ЕСТЬNULL(втУслуги.Идентификатор, """") КАК ИдентификаторУслуги,
		|	втНачисления.СуммаНачисления
		|ПОМЕСТИТЬ втНачисленияСИдентификаторамиУслуг
		|ИЗ
		|	втНачисления КАК втНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ втУслуги КАК втУслуги
		|		ПО втНачисления.Услуга = втУслуги.УслугаВБазе
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втНачисленияСИдентификаторамиУслуг.ЛицевойСчет";
		
		СтрокаПодЗапроса = "";
		Для Каждого ТекУслуга ИЗ РеспубликаМордовия_ТаблицаУслуг Цикл
			СтрокаПодЗапроса = СтрокаПодЗапроса + ",
			|	СУММА(ВЫБОР
			|			КОГДА втНачисленияСИдентификаторамиУслуг.ИдентификаторУслуги = " + ТекУслуга.Идентификатор + "
			|				ТОГДА втНачисленияСИдентификаторамиУслуг.СуммаНачисления
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК SUMUSL" + ТекУслуга.Идентификатор;
		КонецЦикла;
		
		Запрос.Текст = Запрос.Текст + СтрокаПодЗапроса;
		
		Запрос.Текст = Запрос.Текст + "
		|ПОМЕСТИТЬ втИтоговыеНачисленияПоУслугам
		|ИЗ
		|	втНачисленияСИдентификаторамиУслуг КАК втНачисленияСИдентификаторамиУслуг
		|
		|СГРУППИРОВАТЬ ПО
		|	втНачисленияСИдентификаторамиУслуг.ЛицевойСчет";
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_НачисленныеЛьготыОбороты.ЛицевойСчет КАК ЛицевойСчет,
		|	КВП_НачисленныеЛьготыОбороты.Проживающий КАК Проживающий,
		|	КВП_НачисленныеЛьготыОбороты.Услуга КАК Услуга,
		|	СУММА(КВП_НачисленныеЛьготыОбороты.СуммаНачисленияОборот) КАК СуммаНачисления
		|ПОМЕСТИТЬ втНачисления
		|ИЗ
		|	РегистрНакопления.КВП_НачисленныеЛьготы.Обороты(
		|			&ДатаНачала,
		|			&ДатаКонца,
		|			,
		|			Организация = &Организация
		|				И (Проживающий, ЛицевойСчет) В
		|					(ВЫБРАТЬ
		|						втДанныеСПлощадями.Проживающий,
		|						втДанныеСПлощадями.ЛицевойСчет
		|					ИЗ
		|						втДанныеСПлощадями КАК втДанныеСПлощадями)
		|				И Услуга В
		|					(ВЫБРАТЬ
		|						втУслуги.УслугаВБазе
		|					ИЗ
		|						втУслуги КАК втУслуги)) КАК КВП_НачисленныеЛьготыОбороты
		|
		|СГРУППИРОВАТЬ ПО
		|	КВП_НачисленныеЛьготыОбороты.ЛицевойСчет,
		|	КВП_НачисленныеЛьготыОбороты.Проживающий,
		|	КВП_НачисленныеЛьготыОбороты.Услуга
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втНачисления.ЛицевойСчет КАК ЛицевойСчет,
		|	втНачисления.Проживающий КАК Проживающий,
		|	втНачисления.Услуга КАК Услуга,
		|	ЕСТЬNULL(втУслуги.Идентификатор, """") КАК ИдентификаторУслуги,
		|	втНачисления.СуммаНачисления КАК СуммаНачисления
		|ПОМЕСТИТЬ втНачисленияСИдентификаторамиУслуг
		|ИЗ
		|	втНачисления КАК втНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ втУслуги КАК втУслуги
		|		ПО втНачисления.Услуга = втУслуги.УслугаВБазе
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втНачисленияСИдентификаторамиУслуг.ЛицевойСчет,
		|	втНачисленияСИдентификаторамиУслуг.Проживающий";
		
		СтрокаПодЗапроса = "";
		Для Каждого ТекУслуга ИЗ РеспубликаМордовия_ТаблицаУслуг Цикл
			СтрокаПодЗапроса = СтрокаПодЗапроса + ",
			|	СУММА(ВЫБОР
			|			КОГДА втНачисленияСИдентификаторамиУслуг.ИдентификаторУслуги = " + ТекУслуга.Идентификатор + "
			|				ТОГДА втНачисленияСИдентификаторамиУслуг.СуммаНачисления
			|			ИНАЧЕ 0
			|		КОНЕЦ) КАК SUM" + ТекУслуга.Идентификатор;
		КонецЦикла;
		
		Запрос.Текст = Запрос.Текст + СтрокаПодЗапроса;
		
		Запрос.Текст = Запрос.Текст + "
		|ПОМЕСТИТЬ втИтоговыеНачисленияПоУслугам
		|ИЗ
		|	втНачисленияСИдентификаторамиУслуг КАК втНачисленияСИдентификаторамиУслуг
		|
		|СГРУППИРОВАТЬ ПО
		|	втНачисленияСИдентификаторамиУслуг.ЛицевойСчет,
		|	втНачисленияСИдентификаторамиУслуг.Проживающий";
		
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеСПлощадями.ПризнакЗадвоения,
	|	втДанныеСПлощадями.Проживающий,
	|	втДанныеСПлощадями.ЛицевойСчет,
	|	втДанныеСПлощадями.Помещение,
	|	втДанныеСПлощадями.Фамилия,
	|	втДанныеСПлощадями.Имя,
	|	втДанныеСПлощадями.Отчество,
	|	втДанныеСПлощадями.ДатаРождения,
	|	втДанныеСПлощадями.Город,
	|	втДанныеСПлощадями.Улица,
	|	втДанныеСПлощадями.Дом,
	|	втДанныеСПлощадями.Корпус,
	|	втДанныеСПлощадями.Квартира,
	|	втДанныеСПлощадями.КвартираИзАдресаЗдания,
	|	втДанныеСПлощадями.ЛицевойСчетВОрганизации КАК LCHET,
	|	втДанныеСПлощадями.КоличествоЗарегистрированных КАК KREG,
	|	втДанныеСПлощадями.ОбщаяПлощадь КАК OPL,
	|	втДанныеСПлощадями.КоличествоКомнат КАК KOM";
	
	СтрокаПодЗапроса = "";
	Для Каждого ТекУслуга ИЗ РеспубликаМордовия_ТаблицаУслуг Цикл
		СтрокаПодЗапроса = СтрокаПодЗапроса + ",
		|	ЕСТЬNULL(втИтоговыеНачисленияПоУслугам." + ?(ФорматВыгрузки = 1, "SUMUSL", "SUM") + ТекУслуга.Идентификатор + ", 0) КАК " + ?(ФорматВыгрузки = 1, "SUMUSL", "SUM") + ТекУслуга.Идентификатор;
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + СтрокаПодЗапроса;
	
	Запрос.Текст = Запрос.Текст + "
	|ПОМЕСТИТЬ втПолученныеДанныеДляВыгрузки
	|ИЗ
	|	втДанныеСПлощадями КАК втДанныеСПлощадями
	|		ЛЕВОЕ СОЕДИНЕНИЕ втИтоговыеНачисленияПоУслугам КАК втИтоговыеНачисленияПоУслугам
	|		ПО втДанныеСПлощадями.ЛицевойСчет = втИтоговыеНачисленияПоУслугам.ЛицевойСчет";
	
	СтрокаПодЗапроса = "";
	Если НЕ ФорматВыгрузки = 1 Тогда
		СтрокаПодЗапроса = "
		|			И втДанныеСПлощадями.Проживающий = втИтоговыеНачисленияПоУслугам.Проживающий";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + СтрокаПодЗапроса;
	
	Запрос.Текст = Запрос.Текст + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаДанныхИзФайла.A_SPUNID,
	|	втТаблицаДанныхИзФайла.A_SPUN,
	|	втТаблицаДанныхИзФайла.FM,
	|	втТаблицаДанныхИзФайла.IM,
	|	втТаблицаДанныхИзФайла.OT,
	|	втТаблицаДанныхИзФайла.FMВрег,
	|	втТаблицаДанныхИзФайла.IMВрег,
	|	втТаблицаДанныхИзФайла.OTВрег,
	|	втТаблицаДанныхИзФайла.GORODВрег,
	|	втТаблицаДанныхИзФайла.ULВрег,
	|	втТаблицаДанныхИзФайла.DROG,
	|	втТаблицаДанныхИзФайла.SERP,
	|	втТаблицаДанныхИзФайла.NOMP,
	|	втТаблицаДанныхИзФайла.GOROD,
	|	втТаблицаДанныхИзФайла.UL,
	|	втТаблицаДанныхИзФайла.DM,
	|	втТаблицаДанныхИзФайла.KORP,
	|	втТаблицаДанныхИзФайла.KV,
	|	втТаблицаДанныхИзФайла.DATS,
	|	втТаблицаДанныхИзФайла.DATPO,
	|	втТаблицаДанныхИзФайла.SUB,
	|	втТаблицаДанныхИзФайла.DATPR,
	|	втТаблицаДанныхИзФайла.KHLS,
	|	втТаблицаДанныхИзФайла.A_MD5,
	|	втТаблицаДанныхИзФайла.DATS1,
	|	втТаблицаДанныхИзФайла.DATPO1,
	|	втТаблицаДанныхИзФайла.DATS2,
	|	втТаблицаДанныхИзФайла.DATPO2,
	|	втТаблицаДанныхИзФайла.DATS3,
	|	втТаблицаДанныхИзФайла.DATPO3,
	|	втТаблицаДанныхИзФайла.DATS4,
	|	втТаблицаДанныхИзФайла.DATPO4,
	|	втТаблицаДанныхИзФайла.KAT,
	|	втТаблицаДанныхИзФайла.LGOTA,
	|	втТаблицаДанныхИзФайла.KHLS1,
	|	втТаблицаДанныхИзФайла.KHLS2,
	|	втТаблицаДанныхИзФайла.KHLS3,
	|	втТаблицаДанныхИзФайла.KHLS4,";
	
	СтрокаПодЗапроса = "";
	Для Каждого ТекУслуга ИЗ РеспубликаМордовия_ТаблицаУслуг Цикл
		СтрокаПодЗапроса = СтрокаПодЗапроса + "
		|	ЕСТЬNULL(втПолученныеДанныеДляВыгрузки." + ?(ФорматВыгрузки = 1, "SUMUSL", "SUM") + ТекУслуга.Идентификатор + ", 0) КАК " + ?(ФорматВыгрузки = 1, "SUMUSL", "SUM") + ТекУслуга.Идентификатор + ",";
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + СтрокаПодЗапроса;
	
	Запрос.Текст = Запрос.Текст + "
	|	ЕСТЬNULL(втПолученныеДанныеДляВыгрузки.LCHET, """") КАК LCHET,
	|	ЕСТЬNULL(втПолученныеДанныеДляВыгрузки.KREG, 0) КАК KREG,
	|	ЕСТЬNULL(втПолученныеДанныеДляВыгрузки.OPL, 0) КАК OPL,
	|	ЕСТЬNULL(втПолученныеДанныеДляВыгрузки.KOM, 0) КАК KOM,
	|	ЕСТЬNULL(втПолученныеДанныеДляВыгрузки.Проживающий, ЗНАЧЕНИЕ(Справочник.УПЖКХ_Жильцы.ПустаяСсылка)) КАК Проживающий,
	|	ЕСТЬNULL(втПолученныеДанныеДляВыгрузки.ЛицевойСчет, ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)) КАК ЛицевойСчет,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втПолученныеДанныеДляВыгрузки.ПризнакЗадвоения, 0) > 1
	|			ТОГДА -1
	|		ИНАЧЕ ЕСТЬNULL(втПолученныеДанныеДляВыгрузки.ПризнакЗадвоения, 0)
	|	КОНЕЦ КАК ПризнакЗадвоения
	|ПОМЕСТИТЬ втОсновныеИтоговыеДанные
	|ИЗ
	|	втТаблицаДанныхИзФайла КАК втТаблицаДанныхИзФайла
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПолученныеДанныеДляВыгрузки КАК втПолученныеДанныеДляВыгрузки
	|		ПО втТаблицаДанныхИзФайла.FMВрег = втПолученныеДанныеДляВыгрузки.Фамилия
	|			И втТаблицаДанныхИзФайла.IMВрег = втПолученныеДанныеДляВыгрузки.Имя
	|			И втТаблицаДанныхИзФайла.OTВрег = втПолученныеДанныеДляВыгрузки.Отчество
	|			И втТаблицаДанныхИзФайла.GORODВрег = втПолученныеДанныеДляВыгрузки.Город
	|			И втТаблицаДанныхИзФайла.ULВрег = втПолученныеДанныеДляВыгрузки.Улица
	|			И втТаблицаДанныхИзФайла.DM = втПолученныеДанныеДляВыгрузки.Дом
	|			И втТаблицаДанныхИзФайла.KORP = втПолученныеДанныеДляВыгрузки.Корпус
	|			И (втТаблицаДанныхИзФайла.KV = втПолученныеДанныеДляВыгрузки.Квартира
	|				ИЛИ втТаблицаДанныхИзФайла.KV = втПолученныеДанныеДляВыгрузки.КвартираИзАдресаЗдания)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОсновныеИтоговыеДанные.A_SPUNID,
	|	втОсновныеИтоговыеДанные.A_SPUN,
	|	втОсновныеИтоговыеДанные.FM,
	|	втОсновныеИтоговыеДанные.IM,
	|	втОсновныеИтоговыеДанные.OT,
	|	втОсновныеИтоговыеДанные.FMВрег,
	|	втОсновныеИтоговыеДанные.IMВрег,
	|	втОсновныеИтоговыеДанные.OTВрег,
	|	втОсновныеИтоговыеДанные.GORODВрег,
	|	втОсновныеИтоговыеДанные.ULВрег,
	|	втОсновныеИтоговыеДанные.DROG,
	|	втОсновныеИтоговыеДанные.SERP,
	|	втОсновныеИтоговыеДанные.NOMP,
	|	втОсновныеИтоговыеДанные.GOROD,
	|	втОсновныеИтоговыеДанные.UL,
	|	втОсновныеИтоговыеДанные.DM,
	|	втОсновныеИтоговыеДанные.KORP,
	|	втОсновныеИтоговыеДанные.KV,
	|	втОсновныеИтоговыеДанные.DATS,
	|	втОсновныеИтоговыеДанные.DATPO,
	|	втОсновныеИтоговыеДанные.SUB,
	|	втОсновныеИтоговыеДанные.DATPR,
	|	втОсновныеИтоговыеДанные.KHLS,
	|	втОсновныеИтоговыеДанные.A_MD5,
	|	втОсновныеИтоговыеДанные.DATS1,
	|	втОсновныеИтоговыеДанные.DATPO1,
	|	втОсновныеИтоговыеДанные.DATS2,
	|	втОсновныеИтоговыеДанные.DATPO2,
	|	втОсновныеИтоговыеДанные.DATS3,
	|	втОсновныеИтоговыеДанные.DATPO3,
	|	втОсновныеИтоговыеДанные.DATS4,
	|	втОсновныеИтоговыеДанные.DATPO4,
	|	втОсновныеИтоговыеДанные.KAT,
	|	втОсновныеИтоговыеДанные.LGOTA,
	|	втОсновныеИтоговыеДанные.KHLS1,
	|	втОсновныеИтоговыеДанные.KHLS2,
	|	втОсновныеИтоговыеДанные.KHLS3,
	|	втОсновныеИтоговыеДанные.KHLS4,";
	
	СтрокаПодЗапроса = "";
	Для Каждого ТекУслуга ИЗ РеспубликаМордовия_ТаблицаУслуг Цикл
		СтрокаПодЗапроса = СтрокаПодЗапроса + "
		|	втОсновныеИтоговыеДанные." + ?(ФорматВыгрузки = 1, "SUMUSL", "SUM") + ТекУслуга.Идентификатор + " КАК " + ?(ФорматВыгрузки = 1, "SUMUSL", "SUM") + ТекУслуга.Идентификатор + ",";
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + СтрокаПодЗапроса;
	
	Запрос.Текст = Запрос.Текст + "
	|	втОсновныеИтоговыеДанные.LCHET,
	|	втОсновныеИтоговыеДанные.KREG,
	|	втОсновныеИтоговыеДанные.OPL,
	|	втОсновныеИтоговыеДанные.KOM,
	|	втОсновныеИтоговыеДанные.Проживающий,
	|	втОсновныеИтоговыеДанные.ЛицевойСчет,
	|	втОсновныеИтоговыеДанные.ПризнакЗадвоения
	|ПОМЕСТИТЬ втНеИдентифДанные
	|ИЗ
	|	втОсновныеИтоговыеДанные КАК втОсновныеИтоговыеДанные
	|
	|ГДЕ
	|	втОсновныеИтоговыеДанные.ЛицевойСчет = ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНеИдентифДанные.A_SPUNID,
	|	втНеИдентифДанные.A_SPUN,
	|	втНеИдентифДанные.FM,
	|	втНеИдентифДанные.IM,
	|	втНеИдентифДанные.OT,
	|	втНеИдентифДанные.FMВрег,
	|	втНеИдентифДанные.IMВрег,
	|	втНеИдентифДанные.OTВрег,
	|	втНеИдентифДанные.GORODВрег,
	|	втНеИдентифДанные.ULВрег,
	|	втНеИдентифДанные.DROG,
	|	втНеИдентифДанные.SERP,
	|	втНеИдентифДанные.NOMP,
	|	втНеИдентифДанные.GOROD,
	|	втНеИдентифДанные.UL,
	|	втНеИдентифДанные.DM,
	|	втНеИдентифДанные.KORP,
	|	втНеИдентифДанные.KV,
	|	втНеИдентифДанные.DATS,
	|	втНеИдентифДанные.DATPO,
	|	втНеИдентифДанные.SUB,
	|	втНеИдентифДанные.DATPR,
	|	втНеИдентифДанные.KHLS,
	|	втНеИдентифДанные.A_MD5,
	|	втНеИдентифДанные.DATS1,
	|	втНеИдентифДанные.DATPO1,
	|	втНеИдентифДанные.DATS2,
	|	втНеИдентифДанные.DATPO2,
	|	втНеИдентифДанные.DATS3,
	|	втНеИдентифДанные.DATPO3,
	|	втНеИдентифДанные.DATS4,
	|	втНеИдентифДанные.DATPO4,
	|	втНеИдентифДанные.KAT,
	|	втНеИдентифДанные.LGOTA,
	|	втНеИдентифДанные.KHLS1,
	|	втНеИдентифДанные.KHLS2,
	|	втНеИдентифДанные.KHLS3,
	|	втНеИдентифДанные.KHLS4,";
	
	СтрокаПодЗапроса = "";
	Для Каждого ТекУслуга ИЗ РеспубликаМордовия_ТаблицаУслуг Цикл
		СтрокаПодЗапроса = СтрокаПодЗапроса + "
		|	ЕСТЬNULL(втПолученныеДанныеДляВыгрузки." + ?(ФорматВыгрузки = 1, "SUMUSL", "SUM") + ТекУслуга.Идентификатор + ", 0) КАК " + ?(ФорматВыгрузки = 1, "SUMUSL", "SUM") + ТекУслуга.Идентификатор + ",";
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + СтрокаПодЗапроса;
	
	Запрос.Текст = Запрос.Текст + "
	|	ЕСТЬNULL(втПолученныеДанныеДляВыгрузки.LCHET, """") КАК LCHET,
	|	ЕСТЬNULL(втПолученныеДанныеДляВыгрузки.KREG, 0) КАК KREG,
	|	ЕСТЬNULL(втПолученныеДанныеДляВыгрузки.OPL, 0) КАК OPL,
	|	ЕСТЬNULL(втПолученныеДанныеДляВыгрузки.KOM, 0) КАК KOM,
	|	ЕСТЬNULL(втПолученныеДанныеДляВыгрузки.Проживающий, ЗНАЧЕНИЕ(Справочник.УПЖКХ_Жильцы.ПустаяСсылка)) КАК Проживающий,
	|	ЕСТЬNULL(втПолученныеДанныеДляВыгрузки.ЛицевойСчет, ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)) КАК ЛицевойСчет,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втПолученныеДанныеДляВыгрузки.ПризнакЗадвоения, 0) > 1
	|			ТОГДА -1
	|		ИНАЧЕ ЕСТЬNULL(втПолученныеДанныеДляВыгрузки.ПризнакЗадвоения, 0)
	|	КОНЕЦ КАК ПризнакЗадвоения
	|ПОМЕСТИТЬ втДопИтоговыеДанные
	|ИЗ
	|	втНеИдентифДанные КАК втНеИдентифДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПолученныеДанныеДляВыгрузки КАК втПолученныеДанныеДляВыгрузки
	|		ПО втНеИдентифДанные.FMВрег = втПолученныеДанныеДляВыгрузки.Фамилия
	|			И втНеИдентифДанные.IMВрег = втПолученныеДанныеДляВыгрузки.Имя
	|			И втНеИдентифДанные.OTВрег = втПолученныеДанныеДляВыгрузки.Отчество
	|			И втНеИдентифДанные.DROG = втПолученныеДанныеДляВыгрузки.ДатаРождения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОсновныеИтоговыеДанные.A_SPUNID,
	|	втОсновныеИтоговыеДанные.A_SPUN,
	|	втОсновныеИтоговыеДанные.FM,
	|	втОсновныеИтоговыеДанные.IM,
	|	втОсновныеИтоговыеДанные.OT,
	|	втОсновныеИтоговыеДанные.FMВрег,
	|	втОсновныеИтоговыеДанные.IMВрег,
	|	втОсновныеИтоговыеДанные.OTВрег,
	|	втОсновныеИтоговыеДанные.GORODВрег,
	|	втОсновныеИтоговыеДанные.ULВрег,
	|	втОсновныеИтоговыеДанные.DROG,
	|	втОсновныеИтоговыеДанные.SERP,
	|	втОсновныеИтоговыеДанные.NOMP,
	|	втОсновныеИтоговыеДанные.GOROD,
	|	втОсновныеИтоговыеДанные.UL,
	|	втОсновныеИтоговыеДанные.DM,
	|	втОсновныеИтоговыеДанные.KORP,
	|	втОсновныеИтоговыеДанные.KV,
	|	втОсновныеИтоговыеДанные.DATS,
	|	втОсновныеИтоговыеДанные.DATPO,
	|	втОсновныеИтоговыеДанные.SUB,
	|	втОсновныеИтоговыеДанные.DATPR,
	|	втОсновныеИтоговыеДанные.KHLS,
	|	втОсновныеИтоговыеДанные.A_MD5,
	|	втОсновныеИтоговыеДанные.DATS1,
	|	втОсновныеИтоговыеДанные.DATPO1,
	|	втОсновныеИтоговыеДанные.DATS2,
	|	втОсновныеИтоговыеДанные.DATPO2,
	|	втОсновныеИтоговыеДанные.DATS3,
	|	втОсновныеИтоговыеДанные.DATPO3,
	|	втОсновныеИтоговыеДанные.DATS4,
	|	втОсновныеИтоговыеДанные.DATPO4,
	|	втОсновныеИтоговыеДанные.KAT,
	|	втОсновныеИтоговыеДанные.LGOTA,
	|	втОсновныеИтоговыеДанные.KHLS1,
	|	втОсновныеИтоговыеДанные.KHLS2,
	|	втОсновныеИтоговыеДанные.KHLS3,
	|	втОсновныеИтоговыеДанные.KHLS4,";
	
	СтрокаПодЗапроса = "";
	Для Каждого ТекУслуга ИЗ РеспубликаМордовия_ТаблицаУслуг Цикл
		СтрокаПодЗапроса = СтрокаПодЗапроса + "
		|	втОсновныеИтоговыеДанные." + ?(ФорматВыгрузки = 1, "SUMUSL", "SUM") + ТекУслуга.Идентификатор + " КАК " + ?(ФорматВыгрузки = 1, "SUMUSL", "SUM") + ТекУслуга.Идентификатор + ",";
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + СтрокаПодЗапроса;
	
	Запрос.Текст = Запрос.Текст + "
	|	втОсновныеИтоговыеДанные.LCHET,
	|	втОсновныеИтоговыеДанные.KREG,
	|	втОсновныеИтоговыеДанные.OPL,
	|	втОсновныеИтоговыеДанные.KOM,
	|	втОсновныеИтоговыеДанные.Проживающий,
	|	втОсновныеИтоговыеДанные.ЛицевойСчет,
	|	втОсновныеИтоговыеДанные.ПризнакЗадвоения
	|ИЗ
	|	втОсновныеИтоговыеДанные КАК втОсновныеИтоговыеДанные
	|
	|ГДЕ
	|	НЕ втОсновныеИтоговыеДанные.ЛицевойСчет = ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втДопИтоговыеДанные.A_SPUNID,
	|	втДопИтоговыеДанные.A_SPUN,
	|	втДопИтоговыеДанные.FM,
	|	втДопИтоговыеДанные.IM,
	|	втДопИтоговыеДанные.OT,
	|	втДопИтоговыеДанные.FMВрег,
	|	втДопИтоговыеДанные.IMВрег,
	|	втДопИтоговыеДанные.OTВрег,
	|	втДопИтоговыеДанные.GORODВрег,
	|	втДопИтоговыеДанные.ULВрег,
	|	втДопИтоговыеДанные.DROG,
	|	втДопИтоговыеДанные.SERP,
	|	втДопИтоговыеДанные.NOMP,
	|	втДопИтоговыеДанные.GOROD,
	|	втДопИтоговыеДанные.UL,
	|	втДопИтоговыеДанные.DM,
	|	втДопИтоговыеДанные.KORP,
	|	втДопИтоговыеДанные.KV,
	|	втДопИтоговыеДанные.DATS,
	|	втДопИтоговыеДанные.DATPO,
	|	втДопИтоговыеДанные.SUB,
	|	втДопИтоговыеДанные.DATPR,
	|	втДопИтоговыеДанные.KHLS,
	|	втДопИтоговыеДанные.A_MD5,
	|	втДопИтоговыеДанные.DATS1,
	|	втДопИтоговыеДанные.DATPO1,
	|	втДопИтоговыеДанные.DATS2,
	|	втДопИтоговыеДанные.DATPO2,
	|	втДопИтоговыеДанные.DATS3,
	|	втДопИтоговыеДанные.DATPO3,
	|	втДопИтоговыеДанные.DATS4,
	|	втДопИтоговыеДанные.DATPO4,
	|	втДопИтоговыеДанные.KAT,
	|	втДопИтоговыеДанные.LGOTA,
	|	втДопИтоговыеДанные.KHLS1,
	|	втДопИтоговыеДанные.KHLS2,
	|	втДопИтоговыеДанные.KHLS3,
	|	втДопИтоговыеДанные.KHLS4,";
	
	СтрокаПодЗапроса = "";
	Для Каждого ТекУслуга ИЗ РеспубликаМордовия_ТаблицаУслуг Цикл
		СтрокаПодЗапроса = СтрокаПодЗапроса + "
		|	втДопИтоговыеДанные." + ?(ФорматВыгрузки = 1, "SUMUSL", "SUM") + ТекУслуга.Идентификатор + " КАК " + ?(ФорматВыгрузки = 1, "SUMUSL", "SUM") + ТекУслуга.Идентификатор + ",";
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст + СтрокаПодЗапроса;
	
	Запрос.Текст = Запрос.Текст + "
	|	втДопИтоговыеДанные.LCHET,
	|	втДопИтоговыеДанные.KREG,
	|	втДопИтоговыеДанные.OPL,
	|	втДопИтоговыеДанные.KOM,
	|	втДопИтоговыеДанные.Проживающий,
	|	втДопИтоговыеДанные.ЛицевойСчет,
	|	втДопИтоговыеДанные.ПризнакЗадвоения
	|ИЗ
	|	втДопИтоговыеДанные КАК втДопИтоговыеДанные";
	
	ТаблицаДанныхФайла = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

// Получает таблицу жильцов идентифицированных с записями из файла-запроса.
//
Функция ПолучитьТаблицуИдентифицированныхЖильцовМордовия(ТаблицаДанныхФайла, ТаблицаАдресов, ТаблицаФИО)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИзФайла.A_SPUNID КАК A_SPUNID,
	|	ТаблицаИзФайла.FMВрег КАК Фамилия,
	|	ТаблицаИзФайла.IMВрег КАК Имя,
	|	ТаблицаИзФайла.OTВрег КАК Отчество,
	|	ТаблицаИзФайла.DROG КАК ДатаРождения,
	|	ТаблицаИзФайла.GORODВрег КАК Город,
	|	ТаблицаИзФайла.ULВрег КАК Улица,
	|	ТаблицаИзФайла.DM КАК Дом,
	|	ТаблицаИзФайла.KORP КАК Корпус,
	|	ТаблицаИзФайла.KV КАК Квартира
	|ПОМЕСТИТЬ втТаблицаДанныхИзФайла
	|ИЗ
	|	&ТаблицаИзФайла КАК ТаблицаИзФайла
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаФИО.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ТаблицаФИО.Фамилия КАК Фамилия,
	|	ТаблицаФИО.Имя КАК Имя,
	|	ТаблицаФИО.Отчество КАК Отчество
	|ПОМЕСТИТЬ втФИОФизЛиц
	|ИЗ
	|	&ТаблицаФИО КАК ТаблицаФИО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Жильцы.Ссылка КАК Проживающий,
	|	УПЖКХ_Жильцы.ФизЛицо КАК ФизЛицо,
	|	УПЖКХ_Жильцы.ФизЛицо.ДатаРождения КАК ДатаРождения,
	|	УПЖКХ_Жильцы.Владелец.Адрес.Владелец КАК Здание,
	|	УПЖКХ_Жильцы.Владелец.Адрес.Код КАК Квартира,
	|	УПЖКХ_Жильцы.Владелец КАК ЛицевойСчет,
	|	УПЖКХ_Жильцы.Владелец.Адрес КАК Помещение
	|ПОМЕСТИТЬ втЖильцы
	|ИЗ
	|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
	|ГДЕ
	|	НЕ УПЖКХ_Жильцы.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцы.Проживающий КАК Проживающий,
	|	ЕСТЬNULL(втФИОФизЛиц.Фамилия, """") КАК Фамилия,
	|	ЕСТЬNULL(втФИОФизЛиц.Имя, """") КАК Имя,
	|	ЕСТЬNULL(втФИОФизЛиц.Отчество, """") КАК Отчество,
	|	втЖильцы.ДатаРождения КАК ДатаРождения,
	|	втЖильцы.Здание КАК Здание,
	|	втЖильцы.Квартира КАК Квартира,
	|	втЖильцы.ЛицевойСчет КАК ЛицевойСчет,
	|	втЖильцы.Помещение КАК Помещение
	|ПОМЕСТИТЬ втЖильцыСФИО
	|ИЗ
	|	втЖильцы КАК втЖильцы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втФИОФизЛиц КАК втФИОФизЛиц
	|		ПО втЖильцы.ФизЛицо = втФИОФизЛиц.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаАдресов.Здание КАК Здание,
	|	ТаблицаАдресов.НаселенныйПункт КАК НаселенныйПункт,
	|	ТаблицаАдресов.Улица КАК Улица,
	|	ТаблицаАдресов.Дом КАК Дом,
	|	ТаблицаАдресов.Корпус КАК Корпус,
	|	ТаблицаАдресов.КвартираИзАдресаЗдания КАК КвартираИзАдресаЗдания
	|ПОМЕСТИТЬ втАдреса
	|ИЗ
	|	&ТаблицаАдресов КАК ТаблицаАдресов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцыСФИО.Проживающий КАК Проживающий,
	|	втЖильцыСФИО.Фамилия КАК Фамилия,
	|	втЖильцыСФИО.Имя КАК Имя,
	|	втЖильцыСФИО.Отчество КАК Отчество,
	|	втЖильцыСФИО.ДатаРождения КАК ДатаРождения,
	|	ЕСТЬNULL(втАдреса.НаселенныйПункт, """") КАК НаселенныйПункт,
	|	ЕСТЬNULL(втАдреса.Улица, """") КАК Улица,
	|	ЕСТЬNULL(втАдреса.Дом, """") КАК Дом,
	|	ЕСТЬNULL(втАдреса.Корпус, """") КАК Корпус,
	|	ЕСТЬNULL(втАдреса.КвартираИзАдресаЗдания, """") КАК КвартираИзАдресаЗдания,
	|	втЖильцыСФИО.Квартира КАК Квартира,
	|	втЖильцыСФИО.ЛицевойСчет КАК ЛицевойСчет,
	|	втЖильцыСФИО.Помещение КАК Помещение
	|ПОМЕСТИТЬ втЖильцыСАдресами
	|ИЗ
	|	втЖильцыСФИО КАК втЖильцыСФИО
	|		ЛЕВОЕ СОЕДИНЕНИЕ втАдреса КАК втАдреса
	|		ПО втЖильцыСФИО.Здание = втАдреса.Здание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаДанныхИзФайла.A_SPUNID КАК A_SPUNID,
	|	втЖильцыСАдресами.Проживающий КАК Проживающий,
	|	втЖильцыСАдресами.Фамилия КАК Фамилия,
	|	втЖильцыСАдресами.Имя КАК Имя,
	|	втЖильцыСАдресами.Отчество КАК Отчество,
	|	втЖильцыСАдресами.ДатаРождения КАК ДатаРождения,
	|	втЖильцыСАдресами.НаселенныйПункт КАК Город,
	|	втЖильцыСАдресами.Улица КАК Улица,
	|	втЖильцыСАдресами.Дом КАК Дом,
	|	втЖильцыСАдресами.Корпус КАК Корпус,
	|	втЖильцыСАдресами.КвартираИзАдресаЗдания КАК КвартираИзАдресаЗдания,
	|	втЖильцыСАдресами.Квартира КАК Квартира,
	|	втЖильцыСАдресами.ЛицевойСчет КАК ЛицевойСчет,
	|	втЖильцыСАдресами.Помещение КАК Помещение
	|ПОМЕСТИТЬ втОсновныеИдентифЖильцы
	|ИЗ
	|	втТаблицаДанныхИзФайла КАК втТаблицаДанныхИзФайла
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЖильцыСАдресами КАК втЖильцыСАдресами
	|		ПО втТаблицаДанныхИзФайла.Фамилия = втЖильцыСАдресами.Фамилия
	|			И втТаблицаДанныхИзФайла.Имя = втЖильцыСАдресами.Имя
	|			И втТаблицаДанныхИзФайла.Отчество = втЖильцыСАдресами.Отчество
	|			И втТаблицаДанныхИзФайла.Город = втЖильцыСАдресами.НаселенныйПункт
	|			И втТаблицаДанныхИзФайла.Улица = втЖильцыСАдресами.Улица
	|			И втТаблицаДанныхИзФайла.Дом = втЖильцыСАдресами.Дом
	|			И втТаблицаДанныхИзФайла.Корпус = втЖильцыСАдресами.Корпус
	|			И (втТаблицаДанныхИзФайла.Квартира = втЖильцыСАдресами.Квартира
	|				ИЛИ втТаблицаДанныхИзФайла.Квартира = втЖильцыСАдресами.КвартираИзАдресаЗдания)
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаДанныхИзФайла.A_SPUNID,
	|	втЖильцыСАдресами.ЛицевойСчет,
	|	втЖильцыСАдресами.Помещение,
	|	втЖильцыСАдресами.Проживающий,
	|	втЖильцыСАдресами.Фамилия,
	|	втЖильцыСАдресами.Имя,
	|	втЖильцыСАдресами.Отчество,
	|	втЖильцыСАдресами.НаселенныйПункт,
	|	втЖильцыСАдресами.Улица,
	|	втЖильцыСАдресами.Дом,
	|	втЖильцыСАдресами.Корпус,
	|	втЖильцыСАдресами.КвартираИзАдресаЗдания,
	|	втЖильцыСАдресами.Квартира,
	|	втЖильцыСАдресами.ДатаРождения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаДанныхИзФайла.A_SPUNID КАК A_SPUNID,
	|	втТаблицаДанныхИзФайла.Фамилия КАК Фамилия,
	|	втТаблицаДанныхИзФайла.Имя КАК Имя,
	|	втТаблицаДанныхИзФайла.Отчество КАК Отчество,
	|	втТаблицаДанныхИзФайла.ДатаРождения КАК ДатаРождения,
	|	втТаблицаДанныхИзФайла.Город КАК Город,
	|	втТаблицаДанныхИзФайла.Улица КАК Улица,
	|	втТаблицаДанныхИзФайла.Дом КАК Дом,
	|	втТаблицаДанныхИзФайла.Корпус КАК Корпус,
	|	втТаблицаДанныхИзФайла.Квартира КАК Квартира
	|ПОМЕСТИТЬ втЖильцыНеИдентиф
	|ИЗ
	|	втТаблицаДанныхИзФайла КАК втТаблицаДанныхИзФайла
	|ГДЕ
	|	НЕ (втТаблицаДанныхИзФайла.A_SPUNID, втТаблицаДанныхИзФайла.Фамилия, втТаблицаДанныхИзФайла.Имя, втТаблицаДанныхИзФайла.Отчество, втТаблицаДанныхИзФайла.ДатаРождения, втТаблицаДанныхИзФайла.Город, втТаблицаДанныхИзФайла.Улица, втТаблицаДанныхИзФайла.Дом, втТаблицаДанныхИзФайла.Корпус) В
	|				(ВЫБРАТЬ
	|					втОсновныеИдентифЖильцы.A_SPUNID КАК A_SPUNID,
	|					втОсновныеИдентифЖильцы.Фамилия КАК Фамилия,
	|					втОсновныеИдентифЖильцы.Имя КАК Имя,
	|					втОсновныеИдентифЖильцы.Отчество КАК Отчество,
	|					втОсновныеИдентифЖильцы.ДатаРождения КАК ДатаРождения,
	|					втОсновныеИдентифЖильцы.Город КАК Город,
	|					втОсновныеИдентифЖильцы.Улица КАК Улица,
	|					втОсновныеИдентифЖильцы.Дом КАК Дом,
	|					втОсновныеИдентифЖильцы.Корпус КАК Корпус
	|				ИЗ
	|					втОсновныеИдентифЖильцы КАК втОсновныеИдентифЖильцы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЖильцыНеИдентиф.A_SPUNID КАК A_SPUNID,
	|	втЖильцыСАдресами.Проживающий КАК Проживающий,
	|	втЖильцыСАдресами.Фамилия КАК Фамилия,
	|	втЖильцыСАдресами.Имя КАК Имя,
	|	втЖильцыСАдресами.Отчество КАК Отчество,
	|	втЖильцыСАдресами.ДатаРождения КАК ДатаРождения,
	|	втЖильцыСАдресами.НаселенныйПункт КАК Город,
	|	втЖильцыСАдресами.Улица КАК Улица,
	|	втЖильцыСАдресами.Дом КАК Дом,
	|	втЖильцыСАдресами.Корпус КАК Корпус,
	|	втЖильцыСАдресами.КвартираИзАдресаЗдания КАК КвартираИзАдресаЗдания,
	|	втЖильцыСАдресами.Квартира КАК Квартира,
	|	втЖильцыСАдресами.ЛицевойСчет КАК ЛицевойСчет,
	|	втЖильцыСАдресами.Помещение КАК Помещение
	|ПОМЕСТИТЬ втДопИдентифЖильцы
	|ИЗ
	|	втЖильцыНеИдентиф КАК втЖильцыНеИдентиф
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЖильцыСАдресами КАК втЖильцыСАдресами
	|		ПО втЖильцыНеИдентиф.Фамилия = втЖильцыСАдресами.Фамилия
	|			И втЖильцыНеИдентиф.Имя = втЖильцыСАдресами.Имя
	|			И втЖильцыНеИдентиф.Отчество = втЖильцыСАдресами.Отчество
	|			И втЖильцыНеИдентиф.ДатаРождения = втЖильцыСАдресами.ДатаРождения
	|
	|СГРУППИРОВАТЬ ПО
	|	втЖильцыНеИдентиф.A_SPUNID,
	|	втЖильцыСАдресами.ЛицевойСчет,
	|	втЖильцыСАдресами.Помещение,
	|	втЖильцыСАдресами.Проживающий,
	|	втЖильцыСАдресами.Фамилия,
	|	втЖильцыСАдресами.Имя,
	|	втЖильцыСАдресами.Отчество,
	|	втЖильцыСАдресами.НаселенныйПункт,
	|	втЖильцыСАдресами.Улица,
	|	втЖильцыСАдресами.Дом,
	|	втЖильцыСАдресами.Корпус,
	|	втЖильцыСАдресами.КвартираИзАдресаЗдания,
	|	втЖильцыСАдресами.Квартира,
	|	втЖильцыСАдресами.ДатаРождения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОсновныеИдентифЖильцы.A_SPUNID КАК A_SPUNID,
	|	втОсновныеИдентифЖильцы.Проживающий КАК Проживающий,
	|	втОсновныеИдентифЖильцы.Фамилия КАК Фамилия,
	|	втОсновныеИдентифЖильцы.Имя КАК Имя,
	|	втОсновныеИдентифЖильцы.Отчество КАК Отчество,
	|	втОсновныеИдентифЖильцы.ДатаРождения КАК ДатаРождения,
	|	втОсновныеИдентифЖильцы.Город КАК Город,
	|	втОсновныеИдентифЖильцы.Улица КАК Улица,
	|	втОсновныеИдентифЖильцы.Дом КАК Дом,
	|	втОсновныеИдентифЖильцы.Корпус КАК Корпус,
	|	втОсновныеИдентифЖильцы.КвартираИзАдресаЗдания КАК КвартираИзАдресаЗдания,
	|	втОсновныеИдентифЖильцы.Квартира КАК Квартира,
	|	втОсновныеИдентифЖильцы.ЛицевойСчет КАК ЛицевойСчет,
	|	втОсновныеИдентифЖильцы.Помещение КАК Помещение
	|ПОМЕСТИТЬ втИтоговыеДанные
	|ИЗ
	|	втОсновныеИдентифЖильцы КАК втОсновныеИдентифЖильцы
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втДопИдентифЖильцы.A_SPUNID,
	|	втДопИдентифЖильцы.Проживающий,
	|	втДопИдентифЖильцы.Фамилия,
	|	втДопИдентифЖильцы.Имя,
	|	втДопИдентифЖильцы.Отчество,
	|	втДопИдентифЖильцы.ДатаРождения,
	|	втДопИдентифЖильцы.Город,
	|	втДопИдентифЖильцы.Улица,
	|	втДопИдентифЖильцы.Дом,
	|	втДопИдентифЖильцы.Корпус,
	|	втДопИдентифЖильцы.КвартираИзАдресаЗдания,
	|	втДопИдентифЖильцы.Квартира,
	|	втДопИдентифЖильцы.ЛицевойСчет,
	|	втДопИдентифЖильцы.Помещение
	|ИЗ
	|	втДопИдентифЖильцы КАК втДопИдентифЖильцы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговыеДанные.A_SPUNID КАК A_SPUNID,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ втИтоговыеДанные.Проживающий) КАК КоличествоЗадвоений
	|ПОМЕСТИТЬ втЗадвоенныеЖильцы
	|ИЗ
	|	втИтоговыеДанные КАК втИтоговыеДанные
	|
	|СГРУППИРОВАТЬ ПО
	|	втИтоговыеДанные.A_SPUNID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговыеДанные.A_SPUNID КАК A_SPUNID,
	|	втИтоговыеДанные.Проживающий КАК Проживающий,
	|	втИтоговыеДанные.Фамилия КАК Фамилия,
	|	втИтоговыеДанные.Имя КАК Имя,
	|	втИтоговыеДанные.Отчество КАК Отчество,
	|	втИтоговыеДанные.ДатаРождения КАК ДатаРождения,
	|	втИтоговыеДанные.Город КАК Город,
	|	втИтоговыеДанные.Улица КАК Улица,
	|	втИтоговыеДанные.Дом КАК Дом,
	|	втИтоговыеДанные.Корпус КАК Корпус,
	|	втИтоговыеДанные.КвартираИзАдресаЗдания КАК КвартираИзАдресаЗдания,
	|	втИтоговыеДанные.Квартира КАК Квартира,
	|	втИтоговыеДанные.ЛицевойСчет КАК ЛицевойСчет,
	|	втИтоговыеДанные.Помещение КАК Помещение,
	|	ЕСТЬNULL(втЗадвоенныеЖильцы.КоличествоЗадвоений, 0) КАК ПризнакЗадвоения
	|ИЗ
	|	втИтоговыеДанные КАК втИтоговыеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЗадвоенныеЖильцы КАК втЗадвоенныеЖильцы
	|		ПО втИтоговыеДанные.A_SPUNID = втЗадвоенныеЖильцы.A_SPUNID
	|
	|СГРУППИРОВАТЬ ПО
	|	втИтоговыеДанные.Дом,
	|	втИтоговыеДанные.Отчество,
	|	втИтоговыеДанные.Город,
	|	втИтоговыеДанные.Корпус,
	|	втИтоговыеДанные.Улица,
	|	втИтоговыеДанные.Имя,
	|	втИтоговыеДанные.Помещение,
	|	втИтоговыеДанные.Проживающий,
	|	втИтоговыеДанные.ДатаРождения,
	|	втИтоговыеДанные.КвартираИзАдресаЗдания,
	|	втИтоговыеДанные.Фамилия,
	|	втИтоговыеДанные.ЛицевойСчет,
	|	втИтоговыеДанные.A_SPUNID,
	|	втИтоговыеДанные.Квартира,
	|	ЕСТЬNULL(втЗадвоенныеЖильцы.КоличествоЗадвоений, 0)";
	
	Запрос.УстановитьПараметр("ТаблицаИзФайла", ТаблицаДанныхФайла);
	Запрос.УстановитьПараметр("ДатаКонца",      КонецМесяца(Период));
	Запрос.УстановитьПараметр("ТаблицаАдресов", ТаблицаАдресов);
	Запрос.УстановитьПараметр("ТаблицаФИО",     ТаблицаФИО);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции // ПолучитьТаблицуИдентифицированныхЖильцов()

// Получает таблицу значений с адресами зданий.
//
Функция ПолучитьАдресаВсехЗданийРеспубликаМордовия()
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	втКонтактнаяИнформация.Объект КАК Здание,
	|	ВЫБОР
	|		КОГДА НЕ втКонтактнаяИнформация.НаселенныйПункт = """"
	|			ТОГДА втКонтактнаяИнформация.НаселенныйПункт
	|		КОГДА НЕ втКонтактнаяИнформация.Город = """"
	|			ТОГДА втКонтактнаяИнформация.Город
	|		ИНАЧЕ втКонтактнаяИнформация.Регион
	|	КОНЕЦ КАК НаселенныйПункт,
	|	втКонтактнаяИнформация.Улица,
	|	втКонтактнаяИнформация.Дом,
	|	втКонтактнаяИнформация.Корпус,
	|	втКонтактнаяИнформация.Квартира,
	|	0 КАК КвартираИзАдресаЗдания
	|ИЗ
	|	втКонтактнаяИнформация КАК втКонтактнаяИнформация";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	МассивСокрНасПункт = СформироватьМассивСокращениеДляРеспМордовияПоВиду(4);
	МассивСокрУлицы    = СформироватьМассивСокращениеДляРеспМордовияПоВиду(5);
	
	Для Каждого СтрокаЗдания ИЗ Результат Цикл
		СтрокаЗдания.НаселенныйПункт = ВРег(НормализацияПолейАдресаОбласти(СтрокаЗдания.НаселенныйПункт, МассивСокрНасПункт));
		СтрокаЗдания.Улица           = ВРег(НормализацияПолейАдресаОбласти(СтрокаЗдания.Улица, МассивСокрУлицы));
		Попытка
			СтрокаЗдания.КвартираИзАдресаЗдания = Число(СтрокаЗдания.Квартира);
		Исключение
		КонецПопытки;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьАдресаВсехЗданийРеспубликаМордовия()

// Формирует массив сокращений для Томской области для выбранного вида сокращения.
//
Функция СформироватьМассивСокращениеДляРеспМордовияПоВиду(ВидСокращение)
	
	МассивСокращений = Новый Массив;
	// Для регионов.
	Если ВидСокращение = 1 Тогда
		МассивСокращений.Добавить("обл");
		// Для районов.
	ИначеЕсли ВидСокращение = 2 Тогда
		МассивСокращений.Добавить("р-н");
		МассивСокращений.Добавить("р-н.");
		// Для городов.
	ИначеЕсли ВидСокращение = 3 Тогда
		МассивСокращений.Добавить("г");
		МассивСокращений.Добавить("г.");
		// Для нас.пунктов.
	ИначеЕсли ВидСокращение = 4 Тогда
		МассивСокращений.Добавить("рп");
		МассивСокращений.Добавить("п");
		МассивСокращений.Добавить("с");
		МассивСокращений.Добавить("д");
		МассивСокращений.Добавить("х");
		МассивСокращений.Добавить("ст");
		МассивСокращений.Добавить("пгт");
		МассивСокращений.Добавить("дп");
		МассивСокращений.Добавить("рзд");
		МассивСокращений.Добавить("мкр");
		МассивСокращений.Добавить("нп");
		МассивСокращений.Добавить("тер");
		МассивСокращений.Добавить("п/ст");
		МассивСокращений.Добавить("промзона");
		МассивСокращений.Добавить("снт");
		МассивСокращений.Добавить("п/о");
		МассивСокращений.Добавить("городок");
		МассивСокращений.Добавить("заимка");
		МассивСокращений.Добавить("кп");
		МассивСокращений.Добавить("ж/д_казарм");
		МассивСокращений.Добавить("г");
		МассивСокращений.Добавить("обл");
		МассивСокращений.Добавить("рп.");
		МассивСокращений.Добавить("п.");
		МассивСокращений.Добавить("с.");
		МассивСокращений.Добавить("д.");
		МассивСокращений.Добавить("х.");
		МассивСокращений.Добавить("ст.");
		МассивСокращений.Добавить("пгт.");
		МассивСокращений.Добавить("дп.");
		МассивСокращений.Добавить("рзд.");
		МассивСокращений.Добавить("мкр.");
		МассивСокращений.Добавить("нп.");
		МассивСокращений.Добавить("тер.");
		МассивСокращений.Добавить("п/ст.");
		МассивСокращений.Добавить("промзона.");
		МассивСокращений.Добавить("снт.");
		МассивСокращений.Добавить("п/о.");
		МассивСокращений.Добавить("городок.");
		МассивСокращений.Добавить("заимка.");
		МассивСокращений.Добавить("кп.");
		МассивСокращений.Добавить("ж/д_казарм.");
		МассивСокращений.Добавить("г.");
		МассивСокращений.Добавить("обл.");
		// Для улиц.
	ИначеЕсли ВидСокращение = 5 Тогда
		МассивСокращений.Добавить("ул");
		МассивСокращений.Добавить("тер");
		МассивСокращений.Добавить("пл");
		МассивСокращений.Добавить("пер");
		МассивСокращений.Добавить("снт");
		МассивСокращений.Добавить("проезд");
		МассивСокращений.Добавить("б-р");
		МассивСокращений.Добавить("туп");
		МассивСокращений.Добавить("п");
		МассивСокращений.Добавить("ш");
		МассивСокращений.Добавить("пр-кт");
		МассивСокращений.Добавить("тракт");
		МассивСокращений.Добавить("сквер");
		МассивСокращений.Добавить("ст");
		МассивСокращений.Добавить("наб");
		МассивСокращений.Добавить("км");
		МассивСокращений.Добавить("ж/д_ст");
		МассивСокращений.Добавить("сад");
		МассивСокращений.Добавить("парк");
		МассивСокращений.Добавить("уч-к");
		МассивСокращений.Добавить("мкр");
		МассивСокращений.Добавить("городок");
		МассивСокращений.Добавить("кв-л");
		МассивСокращений.Добавить("нп");
		МассивСокращений.Добавить("остров");
		МассивСокращений.Добавить("гск");
		МассивСокращений.Добавить("линия");
		МассивСокращений.Добавить("рзд");
		МассивСокращений.Добавить("стр");
		МассивСокращений.Добавить("аллея");
		МассивСокращений.Добавить("казарма");
		МассивСокращений.Добавить("ж/д_рзд");
		МассивСокращений.Добавить("д");
		МассивСокращений.Добавить("ж/д_казарм");
		МассивСокращений.Добавить("ж/д_будка");
		МассивСокращений.Добавить("высел");
		МассивСокращений.Добавить("ул.");
		МассивСокращений.Добавить("тер.");
		МассивСокращений.Добавить("пл.");
		МассивСокращений.Добавить("пер.");
		МассивСокращений.Добавить("снт.");
		МассивСокращений.Добавить("проезд.");
		МассивСокращений.Добавить("б-р.");
		МассивСокращений.Добавить("туп.");
		МассивСокращений.Добавить("п.");
		МассивСокращений.Добавить("ш.");
		МассивСокращений.Добавить("пр-кт.");
		МассивСокращений.Добавить("тракт.");
		МассивСокращений.Добавить("сквер.");
		МассивСокращений.Добавить("ст.");
		МассивСокращений.Добавить("наб.");
		МассивСокращений.Добавить("км.");
		МассивСокращений.Добавить("ж/д_ст.");
		МассивСокращений.Добавить("сад.");
		МассивСокращений.Добавить("парк.");
		МассивСокращений.Добавить("уч-к.");
		МассивСокращений.Добавить("мкр.");
		МассивСокращений.Добавить("городок.");
		МассивСокращений.Добавить("кв-л.");
		МассивСокращений.Добавить("нп.");
		МассивСокращений.Добавить("остров.");
		МассивСокращений.Добавить("гск.");
		МассивСокращений.Добавить("линия.");
		МассивСокращений.Добавить("рзд.");
		МассивСокращений.Добавить("стр.");
		МассивСокращений.Добавить("аллея.");
		МассивСокращений.Добавить("казарма.");
		МассивСокращений.Добавить("ж/д_рзд.");
		МассивСокращений.Добавить("д.");
		МассивСокращений.Добавить("ж/д_казарм.");
		МассивСокращений.Добавить("ж/д_будка.");
		МассивСокращений.Добавить("высел.");
	КонецЕсли;
	
	Возврат МассивСокращений;
	
КонецФункции // СформироватьМассивСокращениеДляСвердловскойОблПоВиду()

#КонецОбласти

//////////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ВЫГРУЗКИ ДЛЯ РЯЗАНСКОЙ ОБЛАСТИ

#Область РязанскаяОбласть

// Формирует таблицу всех выгружаемых данных.
//
Процедура СформироватьТаблицуДанныхРязанскаяОбласть(ТаблицаДанныхФайла, ОтапливаемаяПлощадь) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	СтруктураСПериодомВыгрузки = ОбработатьПериодыВыгрузкиДанных(НачалоПериода, КонецПериода);
	
	Запрос.УстановитьПараметр("ДатаНач",             СтруктураСПериодомВыгрузки.НачалоПериода);
	Запрос.УстановитьПараметр("ДатаКон",             СтруктураСПериодомВыгрузки.КонецПериода);
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("ОтапливаемаяПлощадь", ОтапливаемаяПлощадь);
	Запрос.УстановитьПараметр("ТаблицаУслуг",        РязанскаяОбласть_УслугиВБазе.Выгрузить());
	Запрос.УстановитьПараметр("ДатаОпределнияДолга", СтруктураСПериодомВыгрузки.КонецПериода + 1);
	
	Запрос.УстановитьПараметр("УказыватьКоличествоПрожИЗарегЧислами", Константы.УПЖКХ_УказыватьКоличествоПрожИЗарегЧислами.Получить());
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект КАК Помещение,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет,
	|	КВП_ЛицевыеСчетаСрезПоследних.Объект.Владелец КАК Здание
	|ПОМЕСТИТЬ втЛС
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&ДатаКон, ) КАК КВП_ЛицевыеСчетаСрезПоследних
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец) КАК КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втКоличествоИзРегистра
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втЛС.ЛицевойСчет
	|					ИЗ
	|						втЛС КАК втЛС)
	|				И ДатаИзменения <= &ДатаКон) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|ГДЕ
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.ЛицевойСчет,
	|	КВП_УчетКоличестваЖильцовПоЛицевымСчетам.КоличествоЗарегистрированных КАК КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втУчетКоличестваЖильцов
	|ИЗ
	|	РегистрСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втЛС.ЛицевойСчет
	|				ИЗ
	|					втЛС КАК втЛС)) КАК КВП_УчетКоличестваЖильцовПоЛицевымСчетам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛС.ЛицевойСчет,
	|	втЛС.Помещение,
	|	втЛС.Здание,
	|	ВЫБОР
	|		КОГДА &УказыватьКоличествоПрожИЗарегЧислами = ИСТИНА
	|			ТОГДА ЕСТЬNULL(втУчетКоличестваЖильцов.КоличествоЗарегистрированных, 0)
	|		ИНАЧЕ ЕСТЬNULL(втКоличествоИзРегистра.КоличествоЗарегистрированных, 0)
	|	КОНЕЦ КАК КоличествоЗарегистрированных
	|ПОМЕСТИТЬ втКоличестваЗарегистрированных
	|ИЗ
	|	втЛС КАК втЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКоличествоИзРегистра КАК втКоличествоИзРегистра
	|		ПО втЛС.ЛицевойСчет = втКоличествоИзРегистра.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУчетКоличестваЖильцов КАК втУчетКоличестваЖильцов
	|		ПО втЛС.ЛицевойСчет = втУчетКоличестваЖильцов.ЛицевойСчет";
	
	Запрос.Выполнить();
	
	ЗапросПоЗданиям = Новый Запрос;
	ЗапросПоЗданиям.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
	ЗапросПоЗданиям.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втКоличестваЗарегистрированных.Здание КАК Объект
	|ИЗ
	|	втКоличестваЗарегистрированных КАК втКоличестваЗарегистрированных
	|
	|СГРУППИРОВАТЬ ПО
	|	втКоличестваЗарегистрированных.Здание";
	
	МассивОбъектов = ЗапросПоЗданиям.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
	
	МассивВидовКонтактнойИнформации = Новый Массив;
	МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
	
	// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
	УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(Запрос.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов);
	
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втКоличестваЗарегистрированных.Помещение,
	|	втКоличестваЗарегистрированных.ЛицевойСчет,
	|	втКоличестваЗарегистрированных.Здание,
	|	втКоличестваЗарегистрированных.КоличествоЗарегистрированных,
	|	ВЫБОР
	|		КОГДА НЕ втКонтактнаяИнформация.НаселенныйПункт = """"
	|			ТОГДА втКонтактнаяИнформация.НаселенныйПункт
	|		КОГДА НЕ втКонтактнаяИнформация.Город = """"
	|			ТОГДА втКонтактнаяИнформация.Город
	|		ИНАЧЕ втКонтактнаяИнформация.Регион
	|	КОНЕЦ КАК НаселенныйПункт,
	|	втКонтактнаяИнформация.Улица,
	|	втКонтактнаяИнформация.Дом,
	|	втКонтактнаяИнформация.Корпус КАК Корпус,
	|	втКоличестваЗарегистрированных.Помещение.Код КАК Квартира
	|ПОМЕСТИТЬ втЛССАдресами
	|ИЗ
	|	втКоличестваЗарегистрированных КАК втКоличестваЗарегистрированных
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКонтактнаяИнформация КАК втКонтактнаяИнформация
	|		ПО втКоличестваЗарегистрированных.Здание = втКонтактнаяИнформация.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель, 0) = 0
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ ЕСТЬNULL(КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель, 0) = 0
	|						ТОГДА КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЧислитель / КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ДоляЗнаменатель
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДоляЛС,
	|	КВП_РазмерыДолейЛицевыхСчетовСрезПоследних.ЛицевойСчет
	|ПОМЕСТИТЬ втДоли
	|ИЗ
	|	РегистрСведений.КВП_РазмерыДолейЛицевыхСчетов.СрезПоследних(
	|			&ДатаКон,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					втЛССАдресами.ЛицевойСчет
	|				ИЗ
	|					втЛССАдресами КАК втЛССАдресами)) КАК КВП_РазмерыДолейЛицевыхСчетовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект,
	|	КВП_ПлощадьПомещенияСрезПоследних.Площадь
	|ПОМЕСТИТЬ втОбщиеПлощади
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|			&ДатаКон,
	|			Объект В
	|					(ВЫБРАТЬ
	|						втЛССАдресами.Помещение
	|					ИЗ
	|						втЛССАдресами КАК втЛССАдресами)
	|				И ВидПлощади = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь)) КАК КВП_ПлощадьПомещенияСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ПлощадьПомещенияСрезПоследних.Объект,
	|	КВП_ПлощадьПомещенияСрезПоследних.Площадь
	|ПОМЕСТИТЬ втОтапливаемыеПлощади
	|ИЗ
	|	РегистрСведений.КВП_ПлощадьПомещения.СрезПоследних(
	|			&ДатаКон,
	|			Объект В
	|					(ВЫБРАТЬ
	|						втЛССАдресами.Помещение
	|					ИЗ
	|						втЛССАдресами КАК втЛССАдресами)
	|				И ВидПлощади = &ОтапливаемаяПлощадь) КАК КВП_ПлощадьПомещенияСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛССАдресами.Помещение,
	|	втЛССАдресами.ЛицевойСчет,
	|	втЛССАдресами.Здание,
	|	втЛССАдресами.КоличествоЗарегистрированных,
	|	втЛССАдресами.Квартира,
	|	ЕСТЬNULL(втДоли.ДоляЛС, 0) * ЕСТЬNULL(втОбщиеПлощади.Площадь, 0) КАК ОбщаяПлощадь,
	|	ЕСТЬNULL(втДоли.ДоляЛС, 0) * ЕСТЬNULL(втОтапливаемыеПлощади.Площадь, 0) КАК ОтапливаемаяПлощадь,
	|	втЛССАдресами.НаселенныйПункт,
	|	втЛССАдресами.Улица,
	|	втЛССАдресами.Дом,
	|	втЛССАдресами.Корпус
	|ПОМЕСТИТЬ втЛССПлощадями
	|ИЗ
	|	втЛССАдресами КАК втЛССАдресами
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДоли КАК втДоли
	|		ПО втЛССАдресами.ЛицевойСчет = втДоли.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОбщиеПлощади КАК втОбщиеПлощади
	|		ПО втЛССАдресами.Помещение = втОбщиеПлощади.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОтапливаемыеПлощади КАК втОтапливаемыеПлощади
	|		ПО втЛССАдресами.Помещение = втОтапливаемыеПлощади.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втЛССПлощадями.Помещение,
	|	втЛССПлощадями.ЛицевойСчет,
	|	втЛССПлощадями.Здание,
	|	втЛССПлощадями.КоличествоЗарегистрированных,
	|	втЛССПлощадями.ОбщаяПлощадь,
	|	втЛССПлощадями.ОтапливаемаяПлощадь,
	|	втЛССПлощадями.НаселенныйПункт,
	|	втЛССПлощадями.Улица,
	|	втЛССПлощадями.Дом,
	|	втЛССПлощадями.Корпус,
	|	втЛССПлощадями.Квартира,
	|	ЕСТЬNULL(УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец, ЗНАЧЕНИЕ(Справочник.УПЖКХ_Жильцы.ПустаяСсылка)) КАК ОтветственныйВладелец
	|ПОМЕСТИТЬ втОтветственныеЛица
	|ИЗ
	|	втЛССПлощадями КАК втЛССПлощадями
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(
	|				&ДатаКон,
	|				ЛицевойСчет В
	|						(ВЫБРАТЬ
	|							втЛССПлощадями.ЛицевойСчет
	|						ИЗ
	|							втЛССПлощадями КАК втЛССПлощадями)
	|					И ОтветственныйВладелец ССЫЛКА Справочник.УПЖКХ_Жильцы) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
	|		ПО втЛССПлощадями.ЛицевойСчет = УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФИОФизическихЛицСрезПоследних.ФизическоеЛицо,
	|	ФИОФизическихЛицСрезПоследних.Фамилия,
	|	ФИОФизическихЛицСрезПоследних.Имя,
	|	ФИОФизическихЛицСрезПоследних.Отчество
	|ПОМЕСТИТЬ втФИОФизЛиц
	|ИЗ
	|	РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ДатаКон, ) КАК ФИОФизическихЛицСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОтветственныеЛица.ЛицевойСчет,
	|	втОтветственныеЛица.Помещение,
	|	втОтветственныеЛица.Здание,
	|	втОтветственныеЛица.КоличествоЗарегистрированных,
	|	втОтветственныеЛица.ОбщаяПлощадь,
	|	втОтветственныеЛица.ОтапливаемаяПлощадь,
	|	втОтветственныеЛица.НаселенныйПункт,
	|	втОтветственныеЛица.Улица,
	|	втОтветственныеЛица.Дом,
	|	втОтветственныеЛица.Корпус,
	|	втОтветственныеЛица.Квартира,
	|	ЕСТЬNULL(втФИОФизЛиц.Фамилия, """") КАК Фамилия,
	|	ЕСТЬNULL(втФИОФизЛиц.Имя, """") КАК Имя,
	|	ЕСТЬNULL(втФИОФизЛиц.Отчество, """") КАК Отчество,
	|	ЕСТЬNULL(втОтветственныеЛица.ОтветственныйВладелец.ФизЛицо.ДатаРождения, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаРождения
	|ПОМЕСТИТЬ втФИО
	|ИЗ
	|	втОтветственныеЛица КАК втОтветственныеЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ втФИОФизЛиц КАК втФИОФизЛиц
	|		ПО втОтветственныеЛица.ОтветственныйВладелец.ФизЛицо = втФИОФизЛиц.ФизическоеЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_БлагоустройствоОбъектов.Объект КАК Здание,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА КВП_БлагоустройствоОбъектов.ВидБлагоустройства = ЗНАЧЕНИЕ(Справочник.КВП_ВидыБлагоустройстваОбъектов.Лифт)
	|				ТОГДА ВЫБОР
	|						КОГДА КВП_БлагоустройствоОбъектов.Значение В (ИСТИНА, ""да"", ""имеется"", ""присутсвует"", ""есть"")
	|							ТОГДА 1
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Лифт
	|ПОМЕСТИТЬ втСвойстваЗданий
	|ИЗ
	|	РегистрСведений.КВП_БлагоустройствоОбъектов КАК КВП_БлагоустройствоОбъектов
	|ГДЕ
	|	КВП_БлагоустройствоОбъектов.Объект В
	|			(ВЫБРАТЬ
	|				втФИО.Здание
	|			ИЗ
	|				втФИО КАК втФИО)
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_БлагоустройствоОбъектов.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаУслуг.УслугаВБазе,
	|	ТаблицаУслуг.УслугаВОСЗН
	|ПОМЕСТИТЬ втУслуги
	|ИЗ
	|	&ТаблицаУслуг КАК ТаблицаУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втФИО.ЛицевойСчет,
	|	втФИО.Помещение,
	|	втФИО.Здание,
	|	втФИО.КоличествоЗарегистрированных,
	|	втФИО.ОбщаяПлощадь,
	|	втФИО.ОтапливаемаяПлощадь,
	|	втФИО.НаселенныйПункт,
	|	втФИО.Улица,
	|	втФИО.Дом,
	|	втФИО.Корпус,
	|	втФИО.Квартира,
	|	втФИО.Фамилия,
	|	втФИО.Имя,
	|	втФИО.Отчество,
	|	втФИО.ДатаРождения,
	|	ЕСТЬNULL(втСвойстваЗданий.Лифт, 0) КАК НаличиеЛифта
	|ПОМЕСТИТЬ втДанныеПоЛицевымСчетамБезУслуг
	|ИЗ
	|	втФИО КАК втФИО
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСвойстваЗданий КАК втСвойстваЗданий
	|		ПО втФИО.Здание = втСвойстваЗданий.Здание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеПоЛицевымСчетамБезУслуг.ЛицевойСчет,
	|	втДанныеПоЛицевымСчетамБезУслуг.Помещение,
	|	втДанныеПоЛицевымСчетамБезУслуг.Здание,
	|	втДанныеПоЛицевымСчетамБезУслуг.КоличествоЗарегистрированных,
	|	втДанныеПоЛицевымСчетамБезУслуг.ОбщаяПлощадь,
	|	втДанныеПоЛицевымСчетамБезУслуг.ОтапливаемаяПлощадь,
	|	втДанныеПоЛицевымСчетамБезУслуг.НаселенныйПункт,
	|	втДанныеПоЛицевымСчетамБезУслуг.Улица,
	|	втДанныеПоЛицевымСчетамБезУслуг.Дом,
	|	втДанныеПоЛицевымСчетамБезУслуг.Корпус,
	|	втДанныеПоЛицевымСчетамБезУслуг.Квартира,
	|	втДанныеПоЛицевымСчетамБезУслуг.Фамилия,
	|	втДанныеПоЛицевымСчетамБезУслуг.Имя,
	|	втДанныеПоЛицевымСчетамБезУслуг.Отчество,
	|	втДанныеПоЛицевымСчетамБезУслуг.ДатаРождения,
	|	втДанныеПоЛицевымСчетамБезУслуг.НаличиеЛифта,
	|	втУслуги.УслугаВОСЗН,
	|	втУслуги.УслугаВБазе
	|ПОМЕСТИТЬ втДанныеПоЛицевымСчетам
	|ИЗ
	|	втДанныеПоЛицевымСчетамБезУслуг КАК втДанныеПоЛицевымСчетамБезУслуг,
	|	втУслуги КАК втУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеПоЛицевымСчетам.ЛицевойСчет,
	|	втДанныеПоЛицевымСчетам.Помещение,
	|	втДанныеПоЛицевымСчетам.Здание,
	|	втДанныеПоЛицевымСчетам.КоличествоЗарегистрированных,
	|	втДанныеПоЛицевымСчетам.ОбщаяПлощадь,
	|	втДанныеПоЛицевымСчетам.ОтапливаемаяПлощадь,
	|	втДанныеПоЛицевымСчетам.НаселенныйПункт,
	|	втДанныеПоЛицевымСчетам.Улица,
	|	втДанныеПоЛицевымСчетам.Дом,
	|	втДанныеПоЛицевымСчетам.Корпус,
	|	втДанныеПоЛицевымСчетам.Квартира,
	|	втДанныеПоЛицевымСчетам.Фамилия,
	|	втДанныеПоЛицевымСчетам.Имя,
	|	втДанныеПоЛицевымСчетам.Отчество,
	|	втДанныеПоЛицевымСчетам.ДатаРождения,
	|	втДанныеПоЛицевымСчетам.НаличиеЛифта,
	|	втДанныеПоЛицевымСчетам.УслугаВОСЗН
	|ПОМЕСТИТЬ втДанныеПоЛицевымСчетамСГруппойУслугВОСЗН
	|ИЗ
	|	втДанныеПоЛицевымСчетам КАК втДанныеПоЛицевымСчетам
	|
	|СГРУППИРОВАТЬ ПО
	|	втДанныеПоЛицевымСчетам.Имя,
	|	втДанныеПоЛицевымСчетам.Дом,
	|	втДанныеПоЛицевымСчетам.ЛицевойСчет,
	|	втДанныеПоЛицевымСчетам.НаселенныйПункт,
	|	втДанныеПоЛицевымСчетам.УслугаВОСЗН,
	|	втДанныеПоЛицевымСчетам.Помещение,
	|	втДанныеПоЛицевымСчетам.КоличествоЗарегистрированных,
	|	втДанныеПоЛицевымСчетам.Здание,
	|	втДанныеПоЛицевымСчетам.Корпус,
	|	втДанныеПоЛицевымСчетам.Квартира,
	|	втДанныеПоЛицевымСчетам.Фамилия,
	|	втДанныеПоЛицевымСчетам.Отчество,
	|	втДанныеПоЛицевымСчетам.ДатаРождения,
	|	втДанныеПоЛицевымСчетам.Улица,
	|	втДанныеПоЛицевымСчетам.ОбщаяПлощадь,
	|	втДанныеПоЛицевымСчетам.ОтапливаемаяПлощадь,
	|	втДанныеПоЛицевымСчетам.НаличиеЛифта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот КАК СуммаНачисления,
	|	УПЖКХ_НачисленияОбороты.Количество,
	|	УПЖКХ_НачисленияОбороты.ВидНачисления,
	|	УПЖКХ_НачисленияОбороты.РазделУчета,
	|	УПЖКХ_НачисленияОбороты.Тариф
	|ПОМЕСТИТЬ втВсеНачисленияБезНастройкиВыгрузки
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Организация = &Организация
	|				И (ЛицевойСчет, Услуга) В
	|					(ВЫБРАТЬ
	|						втДанныеПоЛицевымСчетам.ЛицевойСчет,
	|						втДанныеПоЛицевымСчетам.УслугаВБазе
	|					ИЗ
	|						втДанныеПоЛицевымСчетам КАК втДанныеПоЛицевымСчетам)
	|				И НЕ РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени))
	|				И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))) КАК УПЖКХ_НачисленияОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот КАК СуммаНачисления
	|ПОМЕСТИТЬ втВсеОплаты
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			,
	|			Организация = &Организация
	|				И (ЛицевойСчет, Услуга) В
	|					(ВЫБРАТЬ
	|						втДанныеПоЛицевымСчетам.ЛицевойСчет,
	|						втДанныеПоЛицевымСчетам.УслугаВБазе
	|					ИЗ
	|						втДанныеПоЛицевымСчетам КАК втДанныеПоЛицевымСчетам)
	|				И НЕ РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени))
	|				И ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))) КАК УПЖКХ_НачисленияОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВсеНачисленияБезНастройкиВыгрузки.ЛицевойСчет,
	|	втВсеНачисленияБезНастройкиВыгрузки.Услуга,
	|	втВсеНачисленияБезНастройкиВыгрузки.Тариф,
	|	СУММА(втВсеНачисленияБезНастройкиВыгрузки.Количество) КАК ФактическийОбъем
	|ПОМЕСТИТЬ втОбъемыНачислений
	|ИЗ
	|	втВсеНачисленияБезНастройкиВыгрузки КАК втВсеНачисленияБезНастройкиВыгрузки
	|ГДЕ
	|	втВсеНачисленияБезНастройкиВыгрузки.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ))
	|	И втВсеНачисленияБезНастройкиВыгрузки.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ)
	|
	|СГРУППИРОВАТЬ ПО
	|	втВсеНачисленияБезНастройкиВыгрузки.ЛицевойСчет,
	|	втВсеНачисленияБезНастройкиВыгрузки.Услуга,
	|	втВсеНачисленияБезНастройкиВыгрузки.Тариф
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВсеНачисленияБезНастройкиВыгрузки.ЛицевойСчет,
	|	втВсеНачисленияБезНастройкиВыгрузки.Услуга,
	|	втВсеНачисленияБезНастройкиВыгрузки.Тариф,
	|	СУММА(втВсеНачисленияБезНастройкиВыгрузки.СуммаНачисления) КАК СуммаНачислений
	|ПОМЕСТИТЬ втСуммыНачислений
	|ИЗ
	|	втВсеНачисленияБезНастройкиВыгрузки КАК втВсеНачисленияБезНастройкиВыгрузки
	|ГДЕ
	|	НЕ втВсеНачисленияБезНастройкиВыгрузки.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|
	|СГРУППИРОВАТЬ ПО
	|	втВсеНачисленияБезНастройкиВыгрузки.ЛицевойСчет,
	|	втВсеНачисленияБезНастройкиВыгрузки.Услуга,
	|	втВсеНачисленияБезНастройкиВыгрузки.Тариф
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВсеОплаты.ЛицевойСчет,
	|	втВсеОплаты.Услуга,
	|	СУММА(-втВсеОплаты.СуммаНачисления) КАК СуммаОплат
	|ПОМЕСТИТЬ втОплаты
	|ИЗ
	|	втВсеОплаты КАК втВсеОплаты
	|
	|СГРУППИРОВАТЬ ПО
	|	втВсеОплаты.ЛицевойСчет,
	|	втВсеОплаты.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВсеНачисленияБезНастройкиВыгрузки.ЛицевойСчет,
	|	втВсеНачисленияБезНастройкиВыгрузки.Услуга,
	|	втВсеНачисленияБезНастройкиВыгрузки.Тариф,
	|	СУММА(ЕСТЬNULL(втОбъемыНачислений.ФактическийОбъем, 0)) КАК ФактическийОбъем,
	|	СУММА(ЕСТЬNULL(втОплаты.СуммаОплат, 0)) КАК СуммаОплат,
	|	СУММА(ЕСТЬNULL(втСуммыНачислений.СуммаНачислений, 0)) КАК СуммаНачислений
	|ПОМЕСТИТЬ втВсеНачисленияИОплаты
	|ИЗ
	|	втВсеНачисленияБезНастройкиВыгрузки КАК втВсеНачисленияБезНастройкиВыгрузки
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОбъемыНачислений КАК втОбъемыНачислений
	|		ПО втВсеНачисленияБезНастройкиВыгрузки.ЛицевойСчет = втОбъемыНачислений.ЛицевойСчет
	|			И втВсеНачисленияБезНастройкиВыгрузки.Услуга = втОбъемыНачислений.Услуга
	|			И втВсеНачисленияБезНастройкиВыгрузки.Тариф = втОбъемыНачислений.Тариф
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСуммыНачислений КАК втСуммыНачислений
	|		ПО втВсеНачисленияБезНастройкиВыгрузки.ЛицевойСчет = втСуммыНачислений.ЛицевойСчет
	|			И втВсеНачисленияБезНастройкиВыгрузки.Услуга = втСуммыНачислений.Услуга
	|			И втВсеНачисленияБезНастройкиВыгрузки.Тариф = втСуммыНачислений.Тариф
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОплаты КАК втОплаты
	|		ПО втВсеНачисленияБезНастройкиВыгрузки.ЛицевойСчет = втОплаты.ЛицевойСчет
	|			И втВсеНачисленияБезНастройкиВыгрузки.Услуга = втОплаты.Услуга
	|
	|СГРУППИРОВАТЬ ПО
	|	втВсеНачисленияБезНастройкиВыгрузки.ЛицевойСчет,
	|	втВсеНачисленияБезНастройкиВыгрузки.Услуга,
	|	втВсеНачисленияБезНастройкиВыгрузки.Тариф
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	МАКСИМУМ(УПЖКХ_НачисленияОбороты.Период) КАК ДатаОплаты
	|ПОМЕСТИТЬ втДатыПоследнихОплат
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНач,
	|			&ДатаКон,
	|			Регистратор,
	|			Организация = &Организация
	|				И (ЛицевойСчет, Услуга) В
	|					(ВЫБРАТЬ
	|						втДанныеПоЛицевымСчетам.ЛицевойСчет,
	|						втДанныеПоЛицевымСчетам.УслугаВБазе
	|					ИЗ
	|						втДанныеПоЛицевымСчетам КАК втДанныеПоЛицевымСчетам)
	|				И ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))) КАК УПЖКХ_НачисленияОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга,
	|	СУММА(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток) КАК СуммаДолга
	|ПОМЕСТИТЬ втСуммыДолга
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&ДатаОпределнияДолга,
	|			Организация = &Организация
	|				И (ЛицевойСчет, Услуга) В
	|					(ВЫБРАТЬ
	|						втДанныеПоЛицевымСчетам.ЛицевойСчет,
	|						втДанныеПоЛицевымСчетам.УслугаВБазе
	|					ИЗ
	|						втДанныеПоЛицевымСчетам КАК втДанныеПоЛицевымСчетам)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
	|ГДЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет,
	|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВсеНачисленияИОплаты.ЛицевойСчет,
	|	втУслуги.УслугаВОСЗН,
	|	МАКСИМУМ(втВсеНачисленияИОплаты.Тариф) КАК Тариф,
	|	СУММА(втВсеНачисленияИОплаты.ФактическийОбъем) КАК ФактическийОбъем,
	|	СУММА(втВсеНачисленияИОплаты.СуммаОплат) КАК СуммаОплат,
	|	СУММА(втВсеНачисленияИОплаты.СуммаНачислений) КАК СуммаНачислений,
	|	МАКСИМУМ(втДатыПоследнихОплат.ДатаОплаты) КАК ДатаОплаты,
	|	СУММА(втСуммыДолга.СуммаДолга) КАК СуммаДолга
	|ПОМЕСТИТЬ втДанныеОНачисленияхИДолгах
	|ИЗ
	|	втВсеНачисленияИОплаты КАК втВсеНачисленияИОплаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДатыПоследнихОплат КАК втДатыПоследнихОплат
	|		ПО втВсеНачисленияИОплаты.ЛицевойСчет = втДатыПоследнихОплат.ЛицевойСчет
	|			И втВсеНачисленияИОплаты.Услуга = втДатыПоследнихОплат.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСуммыДолга КАК втСуммыДолга
	|		ПО втВсеНачисленияИОплаты.ЛицевойСчет = втСуммыДолга.ЛицевойСчет
	|			И втВсеНачисленияИОплаты.Услуга = втСуммыДолга.Услуга
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУслуги КАК втУслуги
	|		ПО втВсеНачисленияИОплаты.Услуга = втУслуги.УслугаВБазе
	|
	|СГРУППИРОВАТЬ ПО
	|	втВсеНачисленияИОплаты.ЛицевойСчет,
	|	втУслуги.УслугаВОСЗН
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеПоЛицевымСчетамСГруппойУслугВОСЗН.ЛицевойСчет КАК ЛицевойСчет,
	|	" + ?(ВыводРеквизитаЛицевогоСчета = 0, "втДанныеПоЛицевымСчетамСГруппойУслугВОСЗН.ЛицевойСчет.Код", ?(ВыводРеквизитаЛицевогоСчета = 1 ИЛИ ВыводРеквизитаЛицевогоСчета = 3, "втДанныеПоЛицевымСчетамСГруппойУслугВОСЗН.ЛицевойСчет.Наименование", "втДанныеПоЛицевымСчетамСГруппойУслугВОСЗН.ЛицевойСчет.Идентификатор")) + " КАК ILCHET,
	|	втДанныеПоЛицевымСчетамСГруппойУслугВОСЗН.Помещение,
	|	втДанныеПоЛицевымСчетамСГруппойУслугВОСЗН.Здание,
	|	втДанныеПоЛицевымСчетамСГруппойУслугВОСЗН.Фамилия КАК FAMIL,
	|	втДанныеПоЛицевымСчетамСГруппойУслугВОСЗН.Имя КАК IMJA,
	|	втДанныеПоЛицевымСчетамСГруппойУслугВОСЗН.Отчество КАК OTCH,
	|	втДанныеПоЛицевымСчетамСГруппойУслугВОСЗН.ДатаРождения КАК DROG,
	|	втДанныеПоЛицевымСчетамСГруппойУслугВОСЗН.НаселенныйПункт КАК NASP,
	|	втДанныеПоЛицевымСчетамСГруппойУслугВОСЗН.Улица КАК YLIC,
	|	втДанныеПоЛицевымСчетамСГруппойУслугВОСЗН.Дом КАК NDOM,
	|	втДанныеПоЛицевымСчетамСГруппойУслугВОСЗН.Корпус КАК NKORP,
	|	втДанныеПоЛицевымСчетамСГруппойУслугВОСЗН.Квартира КАК NKW,
	|	втДанныеПоЛицевымСчетамСГруппойУслугВОСЗН.НаличиеЛифта КАК LIFT,
	|	втДанныеПоЛицевымСчетамСГруппойУслугВОСЗН.ОбщаяПлощадь КАК OPL,
	|	втДанныеПоЛицевымСчетамСГруппойУслугВОСЗН.ОтапливаемаяПлощадь КАК OTPL,
	|	втДанныеПоЛицевымСчетамСГруппойУслугВОСЗН.КоличествоЗарегистрированных КАК KOLZR,
	|	втДанныеПоЛицевымСчетамСГруппойУслугВОСЗН.УслугаВОСЗН КАК GKU,
	|	&Организация КАК ORG,
	|	1 КАК VIDTAR,
	|	1 КАК KOEF,
	|	ЕСТЬNULL(втДанныеОНачисленияхИДолгах.Тариф, 0) КАК TARIF,
	|	ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(втДанныеОНачисленияхИДолгах.СуммаОплат, 0) = 0
	|			ТОГДА ВЫБОР
	|					КОГДА НЕ ЕСТЬNULL(втДанныеОНачисленияхИДолгах.Тариф, 0) = 0
	|						ТОГДА ЕСТЬNULL(втДанныеОНачисленияхИДолгах.СуммаОплат, 0) / ЕСТЬNULL(втДанныеОНачисленияхИДолгах.Тариф, 0)
	|					ИНАЧЕ 0
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК FAKT,
	|	ЕСТЬNULL(втДанныеОНачисленияхИДолгах.СуммаНачислений, 0) КАК SUMTAR,
	|	ЕСТЬNULL(втДанныеОНачисленияхИДолгах.СуммаДолга, 0) КАК SUMDOLG,
	|	ЕСТЬNULL(втДанныеОНачисленияхИДолгах.СуммаОплат, 0) КАК OPLDOLG,
	|	ЕСТЬNULL(втДанныеОНачисленияхИДолгах.ДатаОплаты, ДАТАВРЕМЯ(1, 1, 1)) КАК DATDOLG
	|ИЗ
	|	втДанныеПоЛицевымСчетамСГруппойУслугВОСЗН КАК втДанныеПоЛицевымСчетамСГруппойУслугВОСЗН
	|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеОНачисленияхИДолгах КАК втДанныеОНачисленияхИДолгах
	|		ПО втДанныеПоЛицевымСчетамСГруппойУслугВОСЗН.ЛицевойСчет = втДанныеОНачисленияхИДолгах.ЛицевойСчет
	|			И втДанныеПоЛицевымСчетамСГруппойУслугВОСЗН.УслугаВОСЗН = втДанныеОНачисленияхИДолгах.УслугаВОСЗН
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЛицевойСчет,
	|	GKU";
	
	ТаблицаДанныхФайла = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры // СформироватьТаблицуДанныхРязанскаяОбласть()

// Подготавливаем периоды для выгрузки данных.
//
Функция ОбработатьПериодыВыгрузкиДанных(ДатаНачала, ДатаОкончания)
	
	СтруктураСПериодомВыгрузки = Новый Структура("НачалоПериода, КонецПериода");
	
	Если НЕ ЗначениеЗаполнено(ДатаНачала) И НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
		// Если период формирования не заполнен, то отчет формируем за все время существования базы.
		НачалоПериода = '00010101';
		КонецПериода  = '39991230';
	Иначе
		Если НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
			// Если заполнена только дата начала периода, то берем все данные от даты начала.
			НачалоПериода = НачалоДня(ДатаНачала);
			КонецПериода  = '39991230';
		ИначеЕсли НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
			// Если заполнена только дата окончания периода, то берем все данные до даты окончания.
			НачалоПериода = '00010101';
			КонецПериода  = КонецДня(ДатаОкончания);
		Иначе
			// Введены корректные дата начала и дата окончания.
			НачалоПериода = НачалоДня(ДатаНачала);
			КонецПериода  = КонецДня(ДатаОкончания);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураСПериодомВыгрузки.НачалоПериода = НачалоПериода;
	СтруктураСПериодомВыгрузки.КонецПериода  = КонецПериода;
	
	Возврат СтруктураСПериодомВыгрузки;
	
КонецФункции // ОбработатьПериодыВыгрузкиДанных()

#КонецОбласти

#КонецЕсли