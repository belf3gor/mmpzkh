
#Область ОбъявлениеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("Организация",      Объект.Организация);
	Параметры.Свойство("ПериодСобытия",    Объект.Период);
	Параметры.Свойство("КонтекстныйВызов", КонтекстныйВызов);
	Параметры.Свойство("ИсточникВызова",   ИсточникВызова);
	
	МожноСоздаватьДекларацию      = ПравоДоступа("Изменение", Метаданные.Документы.РегламентированныйОтчет);
	МожноРассчитыватьНалог        = ПравоДоступа("Изменение", Метаданные.Документы.ФормированиеЗаписейКнигиПокупок);
	МожноСоздаватьДокументыУплаты = ПравоДоступа("Изменение", Метаданные.Документы.ПлатежноеПоручение);
	
	Если Параметры.КонтекстныйВызов Тогда
		ПредставлениеПериода = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
			НачалоКвартала(Объект.Период), КонецКвартала(Объект.Период), Истина);
		Заголовок = СтрШаблон(НСтр("ru = 'Отчетность по НДС за %1'"), ПредставлениеПериода);
		Элементы.ПредставлениеПериода.Видимость = Ложь;
		// Скрываем поле ввода, оставляем гиперссылку
		Элементы.Организация.Видимость = Ложь;
		Элементы.ОрганизацияПредставление.Видимость = Справочники.Организации.ИспользуетсяНесколькоОрганизаций();
	Иначе
		Заголовок = НСтр("ru = 'Отчетность по НДС'");
		Элементы.ПредставлениеПериода.Видимость = Истина;
		Если Не ЗначениеЗаполнено(Объект.Период) Тогда
			Объект.Период = ДобавитьМесяц(ОбщегоНазначения.ТекущаяДатаПользователя(), -3);
			ПредставлениеПериода = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
				НачалоКвартала(Объект.Период), КонецКвартала(Объект.Период), Истина);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		КонецЕсли;
		// Скрываем гиперссылку в зависимости от ФО
		Элементы.ОрганизацияПредставление.Видимость = Не Справочники.Организации.ИспользуетсяНесколькоОрганизаций();
		Элементы.Организация.Видимость = Справочники.Организации.ИспользуетсяНесколькоОрганизаций();
	КонецЕсли;
	
	Объект.Период = НачалоКвартала(Объект.Период);
	
	ПодготовитьФормуНаСервере();
	ПроверитьСтатусРасчетаНалога();
	
	УстановитьТекущуюСтраницу(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Для сбора статистики
	Если ЗначениеЗаполнено(ИсточникВызова) Тогда
		КлючеваяОперация = ИсточникВызова;
		ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		
		Элементы.СтраницыПомощник.ТекущаяСтраница = Элементы.СтраницаПустая;
		ПолучитьПоказателиДляРасчетаНалога();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_РегламентированныйОтчет" Тогда
		
		Если ТипЗнч(Параметр) = Тип("Структура")
			И Параметр.Свойство("Организация") И Параметр.Организация = Объект.Организация
			И Параметр.Свойство("Ссылка") И ЭтоРегламентированныйОтчетНДС(Параметр.Ссылка) Тогда 
			ПроверитьСтатусРасчетаНалога();
			ПолучитьПоказателиДляРасчетаНалога();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "СостояниеРегламентнойОперации" Тогда 
		
		ПроверитьСтатусРасчетаНалога();
		ПолучитьПоказателиДляРасчетаНалога();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	РассчитыватьНалогАвтоматическиПоУмолчанию();
	ПриИзмененииУсловийРасчета();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитыватьНалогАвтоматическиПриИзменении(Элемент)
	
	ПриИзмененииУсловийРасчета();
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеОбОшибкеОбработкаНавигационнойСсылки(
	Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОписаниеОповещенияОЗакрытии = 
		Новый ОписаниеОповещения("СообщениеОбОшибкеОбработкаНавигационнойСсылкиЗавершение", ЭтотОбъект);
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "УчетнаяПолитикаОрганизации" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		КлючЗаписиУчетнойПолитики =  КлючЗаписиУчетнойПолитики(Объект.Организация, Объект.Период);
		
		Если КлючЗаписиУчетнойПолитики <> Неопределено Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Ключ", КлючЗаписиУчетнойПолитики);
			
			ОткрытьФорму("РегистрСведений.НастройкиСистемыНалогообложения.ФормаЗаписи",
				ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		Иначе
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец", Объект.Организация));
			
			ОткрытьФорму("РегистрСведений.НастройкиСистемыНалогообложения.ФормаСписка",
				ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			
		КонецЕсли;

	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "РеквизитыОрганизацииДляОтчетности" Тогда

		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ",        Объект.Организация);
		ПараметрыФормы.Вставить("Назначение",  "ДляОтчетности");
		ПараметрыФормы.Вставить("Контекст",    Новый Структура);
		ПараметрыФормы.Вставить("ПроверяемыеРеквизиты",   ПроверяемыеРеквизитыОрганизации(Объект.Организация));
		ПараметрыФормы.Контекст.Вставить("Период",        Объект.Период);
		ПараметрыФормы.Контекст.Вставить("ИмяРеглОтчета", "РегламентированныйОтчетНДС");
	
		ОткрытьФорму("Справочник.Организации.ФормаОбъекта", ПараметрыФормы,
			 ЭтотОбъект, УникальныйИдентификатор,,,ОписаниеОповещенияОЗакрытии, 
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "РегламентныеОперации" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьРегламентныеОперации();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РучныеКорректировкиСписокДокументовНажатие(Элемент)
	
	СформироватьОтчетПоДокументамФункциональности(
		"Обработки.ПомощникРасчетаНДС.СформироватьСписокОбъектовРучныеКорректировки",
		НСтр("ru='Ручные корректировки'"),
		"СформироватьСписокОбъектовРучныеКорректировки");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбособленныеПодразделенияНажатие(Элемент)
	
	СформироватьОтчетПоДокументамФункциональности(
		"Обработки.ПомощникРасчетаНДС.СформироватьСписокОбъектовОбособленныеПодразделения",
		НСтр("ru='Обособленные подразделения'"),
		"СформироватьСписокОбъектовОбособленныеПодразделения");

КонецПроцедуры

&НаКлиенте
Процедура ВедетсяРаздельныйУчетНДСНажатие(Элемент)
	
	ОткрытьНастройкиУчетаНДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ОсвобождениеОтНДСНажатие(Элемент)
	
	ОткрытьНастройкиУчетаНДС();
	
КонецПроцедуры

&НаКлиенте
Процедура ВвозТоваровИзЕАЭСНажатие(Элемент)
	
	СформироватьОтчетПоДокументамФункциональности(
		"Обработки.ПомощникРасчетаНДС.СформироватьСписокОбъектовВвозТоваровИзЕАЭС",
		НСтр("ru='Ввоз товаров из стран ЕАЭС'"),
		"СформироватьСписокОбъектовВвозТоваровИзЕАЭС");
	
КонецПроцедуры

&НаКлиенте
Процедура ИмпортТоваровНажатие(Элемент)
	
	СформироватьОтчетПоДокументамФункциональности(
		"Обработки.ПомощникРасчетаНДС.СформироватьСписокОбъектовИмпортТоваров",
		НСтр("ru='Импорт товаров'"),
		"СформироватьСписокОбъектовИмпортТоваров");
	
КонецПроцедуры

&НаКлиенте
Процедура ЭкспортТоваровНажатие(Элемент)
	
	СформироватьОтчетПоДокументамФункциональности(
		"Обработки.ПомощникРасчетаНДС.СформироватьСписокОбъектовЭкспортТоваров",
		НСтр("ru='Экспорт товаров'"),
		"СформироватьСписокОбъектовЭкспортТоваров");
	
КонецПроцедуры

&НаКлиенте
Процедура НачислениеНДСпоСМРНажатие(Элемент)
	
	СформироватьОтчетПоДокументамФункциональности(
		"Обработки.ПомощникРасчетаНДС.СформироватьСписокОбъектовНачислениеНДСпоСМР",
		НСтр("ru='Начисление НДС по СМР'"),
		"СформироватьСписокОбъектовНачислениеНДСпоСМР");
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговыйАгентНажатие(Элемент)
	
	СформироватьОтчетПоДокументамФункциональности(
		"Обработки.ПомощникРасчетаНДС.СформироватьСписокОбъектовНалоговыйАгентПоНДС",
		НСтр("ru='Налоговый агент'"),
		"СформироватьСписокОбъектовНалоговыйАгентПоНДС");
	
КонецПроцедуры

&НаКлиенте
Процедура КомиссияПродажаНажатие(Элемент)
	
	СформироватьОтчетПоДокументамФункциональности(
		"Обработки.ПомощникРасчетаНДС.СформироватьСписокКомиссияПоПродаже",
		НСтр("ru='Продажа товаров или услуг комитентов (принципалов)'"),
		"СформироватьСписокКомиссияПоПродаже");
	
КонецПроцедуры

&НаКлиенте
Процедура КомиссияЗакупкаНажатие(Элемент)
	
	СформироватьОтчетПоДокументамФункциональности(
		"Обработки.ПомощникРасчетаНДС.СформироватьСписокКомиссияПоЗакупке",
		НСтр("ru='Приобретение товаров или услуг для комитентов (принципалов)'"),
		"СформироватьСписокКомиссияПоЗакупке");

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьДекларацию(Команда)
	
	ТекстОшибки = "";
	ОписаниеДействияДекларация = ОписаниеДействияДекларация(Объект.Организация, Объект.Период, ТекстОшибки);
	
	Если ОписаниеДействияДекларация <> Неопределено Тогда
		ВыполнениеЗадачБухгалтераКлиент.ВыполнитьДействие(ОписаниеДействияДекларация);
	ИначеЕсли Не ПустаяСтрока(ТекстОшибки) Тогда
		ПоказатьПредупреждение(, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробнееНаИТС(Команда)
	
	АдресНаИТС = ЗадачиБухгалтераКлиентСервер.СсылкаНаИТС(Срок);
	ПерейтиПоНавигационнойСсылке(АдресНаИТС);
	
КонецПроцедуры

&НаКлиенте
Процедура Оплатить(Команда)
	
	КлючеваяОперация = "ОплатаИзПомощникаНДС";
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, КлючеваяОперация);

	ОповещениеУплаты = Новый ОписаниеОповещения("ОбработатьУплату", ЭтотОбъект);
	ПараметрыФормыПлатежногоДокумента = ПараметрыФормыПлатежногоДокументаПоСтроке(ИндексОчередногоПлатежа);
	ОткрытьФорму("Документ.ПлатежноеПоручение.ФормаОбъекта",
		ПараметрыФормыПлатежногоДокумента, ЭтаФорма,,,,ОповещениеУплаты);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСверку(Команда)
	
	ОповещениеВыполнениеСверки = Новый ОписаниеОповещения("ОбработатьВыполнениеСверки", ЭтотОбъект);
	ОткрытьФорму(ОписаниеДействияСверка.ИмяФормы,
		ОписаниеДействияСверка.ПараметрыФормы, ЭтаФорма,,,,ОповещениеВыполнениеСверки);
	
КонецПроцедуры

&НаКлиенте
Процедура РеализацияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьРасшифровкуОтчета("РасшифровкаНачислениеРеализация");
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыПолученныеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьРасшифровкуОтчета("РасшифровкаНачислениеАвансыПолученныеУпрощенныйУчетНДС");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗачетАвансовВыданныхНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьРасшифровкуОтчета("РасшифровкаНачислениеВосстановлениеСАвансовВыданныхУпрощенныйУчетНДС");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриобретенныеЦенностиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьРасшифровкуОтчета("РасшифровкаВычетПриобретенныеЦенности", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура АвансыВыданныеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьРасшифровкуОтчета("РасшифровкаВычетАвансыВыданныеУпрощенныйУчетНДС", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗачетАвансовПолученныхНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьРасшифровкуОтчета("РасшифровкаВычетСАвансовПолученныхУпрощенныйУчетНДС", Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренесенныеВычетыПриобретенныеЦенностиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьРасшифровкуОтчета("РасшифровкаВычетПриобретенныеЦенности",, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренесенныеВычетыЗачетАвансовПолученныхНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьРасшифровкуОтчета("РасшифровкаВычетСАвансовПолученныхУпрощенныйУчетНДС",, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПорядокРасчетаОбработкаНавигационнойСсылки(
	Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьРегламентныеОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеТребуетсяИсправитьОшибкиОбработкаНавигационнойСсылки(
	Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	РегистрироватьДоступностьФормы(Истина);
	СтандартнаяОбработка = Ложь;

		СписокПроверок = ПолучитьСписокПроверок();
	
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Организация", Объект.Организация);
		ПараметрыФормы.Вставить("НачалоПериода", НачалоКвартала(Объект.Период));
		ПараметрыФормы.Вставить("КонецПериода", КонецКвартала(Объект.Период));
	
		ПараметрыОтчета  = Новый Структура();
		ПараметрыОтчета.Вставить("ПараметрыФормы", ПараметрыФормы);
		ПараметрыОтчета.Вставить("СписокПроверок", СписокПроверок);
		ПараметрыОтчета.Вставить("СформироватьПриОткрытии", Истина);
		ПараметрыОтчета.Вставить("ПоказыватьТолькоОшибки", Истина);
		ПараметрыОтчета.Вставить("РежимРасшифровки", Истина);
		
		ОповещениеЭкспрессПроверкиОЗакрытии = Новый ОписаниеОповещения("ОбработатьЭкспрессПроверкаЗавершение", ЭтотОбъект);
		
		ОткрытьФорму("Отчет.ЭкспрессПроверкаВеденияУчета.Форма", ПараметрыОтчета, ЭтотОбъект, УникальныйИдентификатор,,,
			ОповещениеЭкспрессПроверкиОЗакрытии, РежимОткрытияОкнаФормы.Независимый);

КонецПроцедуры

&НаКлиенте
Процедура РегламентнаяОперацияНажатие(Элемент)
	
	ОбработкаНажатияСсылки(Элемент.Имя);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОткрытьНастройкиУчетаНДС()
	
	Перем КлючЗаписи, ПараметрыОткрытия;
	
	КлючЗаписи = ПолучитьДанныеУчетнойПолитики(Объект.Организация, КонецКвартала(Объект.Период));
	
	Если КлючЗаписи <> Неопределено Тогда
		ПараметрыОткрытия = Новый Структура("Ключ", КлючЗаписи);
		ОткрытьФорму("РегистрСведений.НастройкиУчетаНДС.ФормаЗаписи", ПараметрыОткрытия, ЭтаФорма, "");
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеУчетнойПолитики(Организация, Период)

	Выборка = РегистрыСведений.НастройкиУчетаНДС.Выбрать(, Период,
		Новый Структура("Организация", Организация), "Убыв");
	Если Выборка.Следующий() Тогда
		Отбор = Новый Структура("Период, Организация", Выборка.Период, Выборка.Организация);
		Возврат РегистрыСведений.НастройкиУчетаНДС.СоздатьКлючЗаписи(Отбор)
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура СформироватьОтчетПоДокументамФункциональности(ИмяМетода, ЗаголовокМетода, ИмяОпции)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",    Объект.Организация);
	ПараметрыФормы.Вставить("Период",         Объект.Период);
	ПараметрыФормы.Вставить("ИмяМетода",      ИмяМетода);
	ПараметрыФормы.Вставить("ЗаголовокФормы", ЗаголовокМетода);
	ПараметрыФормы.Вставить("ИмяОпции",       ИмяОпции);
	
	НаименованиеФоновогоЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Формирование списка объектов, относящихся к функциональности ""%1""'"),
		ЗаголовокМетода);
	
	ПараметрыФормы.Вставить("НаименованиеФоновогоЗадания", НаименованиеФоновогоЗадания);
	
	ОткрытьФорму(
		"Обработка.ФункциональностьПрограммы.Форма.ФормаОтчетаПоДокументам",
		ПараметрыФормы,
		ЭтотОбъект,
		Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииУсловийРасчета()
	
	ОтменитьФоновыеЗаданияНаКлиенте();
	
	ПоказателиПолучены = Ложь;
	
	ПриИзмененииУсловийРасчетаНаСервере();
	
	УстановитьТекущуюСтраницу(ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		ПолучитьПоказателиДляРасчетаНалога();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииУсловийРасчетаНаСервере()
	
	Обработки.ПомощникРасчетаНДС.ЗапомнитьПорядокРасчетаНДС(Объект.Организация, РассчитыватьНалогАвтоматически);
	ПроверитьСтатусРасчетаНалога();
	
КонецПроцедуры

&НаКлиенте
Функция ОтменитьФоновыеЗаданияНаКлиенте()
	
	ОтменитьФоновыеЗаданияНаСервере();
	ОбновитьСтатусФоновогоЗадания();
	
КонецФункции

&НаСервере
Функция ОтменитьФоновыеЗаданияНаСервере()

	Обработки.ПомощникРасчетаНДС.ОтменитьФоновоеЗаданиеНаСервере(ИдентификаторЗаданияПерепроведение);
	ИдентификаторЗаданияПерепроведение = Неопределено;
	
	Обработки.ПомощникРасчетаНДС.ОтменитьФоновоеЗаданиеНаСервере(ИдентификаторЗаданияРасчетНалога);
	ИдентификаторЗаданияРасчетНалога = Неопределено;
	
	Обработки.ПомощникРасчетаНДС.ОтменитьФоновоеЗаданиеНаСервере(ИдентификаторЗаданияПолучениеПоказателей);
	ИдентификаторЗаданияПолучениеПоказателей = Неопределено;
	
КонецФункции

&НаКлиенте
Процедура РегистрироватьДоступностьФормы(ВключитьОбрабочикОжидания)
	
	Если НЕ ДоступенАвтоматическийРасчетНДС Тогда
		Возврат;
	КонецЕсли;
	
	Если ВключитьОбрабочикОжидания Тогда
	
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьИзменениеРегламентыхОперацийНДС", 3);
		
	Иначе
	
		ОтключитьОбработчикОжидания("Подключаемый_ПроверитьИзменениеРегламентыхОперацийНДС");
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРегламентныеОперации()
	
	ПараметрыОтбор = Новый Структура;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда 
		ПараметрыОтбор.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПараметрыОтбораСписка", ПараметрыОтбор);
	Если ЗначениеЗаполнено(Объект.Период) Тогда 
		ПараметрыФормы.Вставить("ДатаБольшеИлиРавно", НачалоКвартала(Объект.Период));
		ПараметрыФормы.Вставить("ДатаМеньшеИлиРавно", КонецКвартала(КонецДня(Объект.Период)));
	КонецЕсли;
	
	ОткрытьФорму("ЖурналДокументов.РегламентныеОперацииНДС.ФормаСписка", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ПроверкаАктуальностиРегламентныхОперацийПоНДС(Организация, Период)
	
	РасчетВыполнен = РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.ВыполненАвтоматическийРасчет(
		Организация, Период);
		
	Возврат РасчетВыполнен;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьЭкспрессПроверкаЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	РегистрироватьДоступностьФормы(Ложь);

	Если (НЕ РасчетВыполнен И НЕ ОшибкиПоДаннымНДС) Тогда
		Возврат;
	КонецЕсли;

	РасчетВыполнен = ПроверкаАктуальностиРегламентныхОперацийПоНДС(
		Объект.Организация, КонецКвартала(Объект.Период));
	
	ПоказателиПолучены = Ложь;
	БылСеансНедоступностиФормы = Ложь;
	ПроверитьСтатусРасчетаНалога();
		
	УстановитьТекущуюСтраницу(ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		ПолучитьПоказателиДляРасчетаНалога();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеОбОшибкеОбработкаНавигационнойСсылкиЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	ПоказателиПолучены = Ложь;
	
	ПроверитьСтатусРасчетаНалога();
	
	УстановитьТекущуюСтраницу(ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		ПолучитьПоказателиДляРасчетаНалога();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокПроверок()

	СписокПроверок = Новый Массив();
	СписокПроверок.Добавить("РазделКнигаПродаж");
	СписокПроверок.Добавить("ПолнотаСФПоРеализации");
	СписокПроверок.Добавить("Соответствие90_НДС_БУ");
	СписокПроверок.Добавить("Соответствие91_НДС_БУ");
	СписокПроверок.Добавить("Соответствие90и91_НДС_НУ");
	СписокПроверок.Добавить("НачислениеНДСсАвансов");
	
	СписокПроверок.Добавить("РазделКнигаПокупок");
	СписокПроверок.Добавить("ПолнотаСФПолученных");
	СписокПроверок.Добавить("НетОтрицательногоНДСПредъявленного");
	СписокПроверок.Добавить("ОстаткиНДСПредъявленного_БУ_НУ");

	Возврат СписокПроверок;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроверяемыеРеквизитыОрганизации(Организация)
	
	ЭтоЮрлицо = ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация);

	Если ЭтоЮрлицо Тогда
		СтрокаРеквизиты = "НаименованиеСокращенное,НаименованиеПолное,ИНН,"
			+ "КПП,КодПоОКТМО,КодНалоговогоОргана,КодОКВЭД2,РуководительФамилия,РуководительИмя";
	Иначе
		СтрокаРеквизиты = "ФамилияИП,ИмяИП,ИНН,КодПоОКТМО,КодНалоговогоОргана,КодОКВЭД2";
	КонецЕсли;

	Возврат СтрРазделить(СтрокаРеквизиты, ",", Ложь);
	
КонецФункции

&НаКлиенте
Процедура ЗапуститьПерепроведение()
	
	Результат = ЗапуститьАвтоПерепроведение();
	
	Если Результат.ЗаданиеВыполнено Тогда
		ЗагрузитьРезультатВыполненияПерепроведения();
		Если Не ТребуетсяПерепроведение Тогда 
			ВыполнитьРасчет();
		Иначе
			// В случае неудачного перепроведения все равно обновим показатели расчета.
			Если ТребуетсяПерепроведение Тогда
				ОбщегоНазначенияБПКлиент.ОткрытьФормуОшибокПерепроведения(ЭтотОбъект, АдресХранилищаСОшибками);
			КонецЕсли;
			ПолучитьПоказателиДляРасчетаНалога();
		КонецЕсли;
	Иначе
		ИдентификаторЗаданияПерепроведение = Результат.ИдентификаторЗадания;
		АдресХранилищаПерепроведение       = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания(
			"Подключаемый_ПроверитьВыполнениеЗаданияПерепроведение", 
			ПараметрыОбработчикаОжидания.ТекущийИнтервал,
			Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияПерепроведение()
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗаданияПерепроведение) Тогда
		ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияПерепроведение");
		Возврат;
	КонецЕсли;
	
	Если ЗаданиеВыполнено(ИдентификаторЗаданияПерепроведение) Тогда
		ЗагрузитьРезультатВыполненияПерепроведения();
		Если Не ТребуетсяПерепроведение Тогда 
			ВыполнитьРасчет();
		Иначе
			// В случае неудачного перепроведения все равно обновим показатели расчета.
			Если ТребуетсяПерепроведение Тогда
				ОбщегоНазначенияБПКлиент.ОткрытьФормуОшибокПерепроведения(ЭтотОбъект, АдресХранилищаСОшибками);
			КонецЕсли;
			ПолучитьПоказателиДляРасчетаНалога();
		КонецЕсли;
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания(
			"Подключаемый_ПроверитьВыполнениеЗаданияПерепроведение", 
			ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
			Истина);
	КонецЕсли;
	
	ОбновитьСтатусФоновогоЗадания();
	
КонецПроцедуры

&НаКлиенте 
Процедура Подключаемый_ПроверитьИзменениеРегламентыхОперацийНДС()
	
	Если НЕ ДоступенАвтоматическийРасчетНДС Тогда
		ОтключитьОбработчикОжидания("Подключаемый_ПроверитьИзменениеРегламентыхОперацийНДС");
		Возврат;
	КонецЕсли;

	Если (НЕ РасчетВыполнен И НЕ ОшибкиПоДаннымНДС) Тогда
		Возврат;
	КонецЕсли;
	
	ФормаАктивна = ВводДоступен();
	
	Если НЕ ФормаАктивна И НЕ БылСеансНедоступностиФормы Тогда
	
		БылСеансНедоступностиФормы = Истина;
		
	ИначеЕсли ФормаАктивна И БылСеансНедоступностиФормы Тогда
		
		РасчетВыполнен = ПроверкаАктуальностиРегламентныхОперацийПоНДС(
			Объект.Организация, КонецКвартала(Объект.Период));
	
		ПоказателиПолучены = Ложь;
		БылСеансНедоступностиФормы = Ложь;
		ПроверитьСтатусРасчетаНалога();
		
		УстановитьТекущуюСтраницу(ЭтотОбъект);
	
		Если НЕ ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
			ПолучитьПоказателиДляРасчетаНалога();
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ЗапуститьАвтоПерепроведение()
	
	ПараметрыПерепроведения = Обработки.ГрупповоеПерепроведениеДокументов.ПараметрыПерепроведения();
	ПараметрыПерепроведения.Организация   = Объект.Организация;
	ПараметрыПерепроведения.МоментНачала  = ГраницаАктуальности;
	ПараметрыПерепроведения.ДатаОкончания = КонецКвартала(Объект.Период);
	ПараметрыПерепроведения.ЭтоПомощникПоУчетуНДС = Истина; // необходимо для определения порядка перепроведения
	ПараметрыПерепроведения.СообщатьПрогрессВыполнения = Истина;
	ПараметрыПерепроведения.УникальныйИдентификаторФормы = УникальныйИдентификатор;
	
	РезультатПерепроведения = Обработки.ГрупповоеПерепроведениеДокументов.ЗапуститьПерепроведение(ПараметрыПерепроведения);
	
	АдресХранилищаПерепроведение = РезультатПерепроведения.АдресХранилища;
	
	Возврат РезультатПерепроведения;
	
КонецФункции

&НаКлиенте
Процедура ПолучитьПоказателиДляРасчетаНалога()

	АвтоматическийПомощник = ДоступенАвтоматическийРасчетНДС И РассчитыватьНалогАвтоматически;
	
	СоставРазделов = Новый Структура("Операции, Расчет, Уплата, Сверка",
		НЕ АвтоматическийПомощник, АвтоматическийПомощник, Истина, Истина);
		
	Результат = ПолучитьПоказателиДляРасчетаНалогаНаСервере(СоставРазделов);
		
	Если Результат.Статус = "Выполнено" Тогда
		ПоказателиПолучены = Истина;
		ЗагрузитьРезультатПоказателиРасчета();
	Иначе
		ИдентификаторЗаданияПолучениеПоказателей = Результат.ИдентификаторЗадания;
		АдресХранилищаПоказатели                 = Результат.АдресРезультата;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания(
			"Подключаемый_ПроверитьВыполнениеЗаданияПолучениеПоказателей", 
			ПараметрыОбработчикаОжидания.ТекущийИнтервал,
			Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьРасчет()
	
	Результат = ВыполнитьРасчетНаСервере();
	
	Если Результат.Статус = "Выполнено" Тогда
		ЗагрузитьРезультатВыполненияРасчета();
		Если РасчетВыполнен Тогда 
			Оповестить("ВыполненРасчетНДС");
		КонецЕсли;
		ПолучитьПоказателиДляРасчетаНалога();
	Иначе
		ИдентификаторЗаданияРасчетНалога = Результат.ИдентификаторЗадания;
		АдресХранилищаРасчет       = Результат.АдресРезультата;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания(
			"Подключаемый_ПроверитьВыполнениеЗаданияРасчет", 
			ПараметрыОбработчикаОжидания.ТекущийИнтервал,
			Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьРасчетНаСервере()
	
	ПараметрыЗадачи = Новый Структура;
	ПараметрыЗадачи.Вставить("Организация", Объект.Организация);
	ПараметрыЗадачи.Вставить("Период", КонецКвартала(Объект.Период));
	ПараметрыЗадачи.Вставить("Декларация", Декларация);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	
	Результат = ДлительныеОперации.ВыполнитьВФоне("Обработки.ПомощникРасчетаНДС.РассчитатьНалог", 
		ПараметрыЗадачи, ПараметрыВыполнения);
	
	АдресХранилищаРасчет = Результат.АдресРезультата;
	
	Если Результат.Статус = "Выполнено" Тогда
		ЗагрузитьРезультатВыполненияРасчета();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияРасчет()
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗаданияРасчетНалога) Тогда
		ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияРасчет");
		Возврат;
	КонецЕсли;
	
	Если ЗаданиеВыполнено(ИдентификаторЗаданияРасчетНалога) Тогда
		ЗагрузитьРезультатВыполненияРасчета();
		Если РасчетВыполнен Тогда 
			Оповестить("ВыполненРасчетНДС");
		КонецЕсли;
		ПолучитьПоказателиДляРасчетаНалога();
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания(
			"Подключаемый_ПроверитьВыполнениеЗаданияРасчет", 
			ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
			Истина);
	КонецЕсли;
	
	ОбновитьСтатусФоновогоЗадания();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРасшифровкуОтчета(ИмяРасшифровки, ТолькоВключенные = Ложь, ТолькоПеренесенные = Ложь)
	
	ЗаполняемыеНастройки = Новый Структура("Показатели, Группировка, Отбор, ВыводимыеДанные", Ложь, Ложь, Ложь, Ложь);
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("РежимРасшифровки",                  Истина);
	ДополнительныеСвойства.Вставить("Организация",                       Объект.Организация);
	ДополнительныеСвойства.Вставить("ВключатьОбособленныеПодразделения", Ложь); // не поддерживается
	ДополнительныеСвойства.Вставить("НачалоПериода",                     НачалоРасширенногоНалоговогоПериода);
	ДополнительныеСвойства.Вставить("КонецПериода",                      КонецКвартала(Объект.Период));
	ДополнительныеСвойства.Вставить("ВыводитьЗаголовок",                 Истина);
	ДополнительныеСвойства.Вставить("КлючВарианта",                      ИмяРасшифровки);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ВидРасшифровки", 2);
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("ИДРасшифровки", ИмяРасшифровки);
	ПараметрыФормы.Вставить("ЗаполняемыеНастройки", ЗаполняемыеНастройки);
	ПараметрыФормы.Вставить("ЭтоРасшифровкаДекларации", Ложь);
	ПараметрыФормы.Вставить("ТолькоВключенные", ТолькоВключенные);
	ПараметрыФормы.Вставить("ТолькоПеренесенные", ТолькоПеренесенные);
	
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	
	ОткрытьФорму("Отчет.РасшифровкаПоказателейНДС.Форма.ФормаОтчета", ПараметрыФормы,, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияПолучениеПоказателей()
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗаданияПолучениеПоказателей) Тогда
		ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияПолучениеПоказателей");
		Возврат;
	КонецЕсли;

	Если ЗаданиеВыполнено(ИдентификаторЗаданияПолучениеПоказателей) Тогда
		ПоказателиПолучены = Истина;
		ЗагрузитьРезультатПоказателиРасчета();
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания(
			"Подключаемый_ПроверитьВыполнениеЗаданияПолучениеПоказателей", 
			ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
			Истина);
	КонецЕсли;
	
	ОбновитьСтатусФоновогоЗадания();
	
КонецПроцедуры

&НаКлиенте
Функция ОбновитьСтатусФоновогоЗадания()
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияПерепроведение) Тогда
		
		Процент = 0;
		Прогресс = ЗакрытиеМесяцаВызовСервера.ПрочитатьПрогресс(ИдентификаторЗаданияПерепроведение);
		Если ТипЗнч(Прогресс) = Тип("Структура") 
			И Прогресс.Свойство("ДополнительныеПараметры") Тогда
			
			ТекущаяДата = Прогресс.ДополнительныеПараметры.ДостигнутоеЗначение;
			Числитель   = (НачалоДня(ТекущаяДата) - НачалоДня(МоментНарушенияПоследовательности)) / 86400 + 1;
			Знаменатель = (НачалоДня(КонецКвартала(Объект.Период)) - НачалоДня(МоментНарушенияПоследовательности)) / 86400 + 1;
			
			Если Знаменатель <> 0 Тогда
				ПроцентРасчет = Макс(Мин(Цел(Числитель / Знаменатель * 100), 100), 0);
				Процент = Формат(ПроцентРасчет, "ЧДЦ=; ЧН=0") + "%";
			КонецЕсли;
		ИначеЕсли Прав(СтатусФоновогоЗадания, 1) = "%" Тогда
			Процент = Прав(СтатусФоновогоЗадания, 3);
		Иначе
			Процент = "";
		КонецЕсли;
		
		СтатусФоновогоЗадания = НСтр("ru = 'Выполняется перепроведение документов...'") + Процент;
		
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗаданияРасчетНалога) Тогда
		
		Процент = 0;
		Прогресс = ЗакрытиеМесяцаВызовСервера.ПрочитатьПрогресс(ИдентификаторЗаданияРасчетНалога);
		Если ТипЗнч(Прогресс) = Тип("Структура")
			И Прогресс.Свойство("Процент") Тогда
			Процент = Формат(Прогресс.Процент, "ЧДЦ=; ЧН=0") + "%";
		ИначеЕсли Прав(СтатусФоновогоЗадания, 1) = "%" Тогда
			Процент = Прав(СтатусФоновогоЗадания, 3);
		Иначе
			Процент = "";
		КонецЕсли;
		
		СтатусФоновогоЗадания = НСтр("ru = 'Выполняется расчет налога...'") + Процент;
		
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗаданияПолучениеПоказателей) Тогда
		
		// По заданию "Получение показателей" не показываем процент выполнения, т.к. считаем операцию относительно быстрой.
		СтатусФоновогоЗадания = НСтр("ru = 'Выполняется получение показателей...'");
		
	Иначе
		
		СтатусФоновогоЗадания = "";
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьПоказателиДляРасчетаНалогаНаСервере(СоставРазделов)
	
	ПараметрыЗадачи = Обработки.ПомощникРасчетаНДС.НовыеПараметрыЗадачи();
	ПараметрыЗадачи.Организация   = Объект.Организация;
	ПараметрыЗадачи.ПериодСобытия = Объект.Период;
	ПараметрыЗадачи.НачалоПериода = НачалоРасширенногоНалоговогоПериода;
	ПараметрыЗадачи.КонецПериода  = КонецКвартала(Объект.Период);
	ПараметрыЗадачи.Декларация    = Декларация;
	ПараметрыЗадачи.ВключатьОбособленныеПодразделения = Ложь; // не поддерживается
	ПараметрыЗадачи.Правило = Правило; // для сверки
	ПараметрыЗадачи.Срок    = Срок;    // для сверки
	ЗаполнитьЗначенияСвойств(ПараметрыЗадачи.СоставРазделов, СоставРазделов);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	
	Результат = ДлительныеОперации.ВыполнитьВФоне("Обработки.ПомощникРасчетаНДС.ПоказателиДляРасчета", 
		ПараметрыЗадачи, ПараметрыВыполнения);
		
	АдресХранилищаПоказатели = Результат.АдресРезультата;
	
	Если Результат.Статус = "Выполнено" Тогда
		ПоказателиПолучены = Истина;
		ЗагрузитьРезультатПоказателиРасчета();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьРезультатПоказателиРасчета()
	
	ПомощникРасчетаНДС.ЗагрузитьРезультат(ЭтотОбъект, АдресХранилищаПоказатели);
	
	БыстраяПроверкаДанныхНДС();
	
	УправлениеФормой();
	
	ИдентификаторЗаданияПолучениеПоказателей = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатВыполненияРасчета()
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилищаРасчет);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат,"РасчетВыполнен, Декларация");
	
	ИдентификаторЗаданияРасчетНалога = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатВыполненияПерепроведения()
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилищаПерепроведение);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяПерепроведение = Результат.НеУдалосьПровести <> 0
		ИЛИ Результат.НеУдалосьАктуализировать <> 0;
					
	Если Результат.Свойство("АдресХранилищаСОшибками") Тогда 
		АдресХранилищаСОшибками = Результат.АдресХранилищаСОшибками;
	КонецЕсли;

	УправлениеФормой();
	
	ИдентификаторЗаданияПерепроведение = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()
	
	ПредставлениеПериода = ВыборПериодаКлиентСервер.ПолучитьПредставлениеПериодаОтчета(
		ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал"),
		НачалоКвартала(Объект.Период),
		КонецКвартала(Объект.Период));
		
	УстановитьТекущуюСтраницу(ЭтотОбъект);
		
	Если ДоступенАвтоматическийРасчетНДС И РассчитыватьНалогАвтоматически Тогда
		
		// Автоматический помощник
		
		НастроитьБлокРасчет();
		
		Элементы.АвтоматическийРасчет.Видимость         = Истина;
		Элементы.ПошаговыйРасчет.Видимость              = Ложь;
		Элементы.ЖурналУчетаСчетовФактур.Видимость      = Ложь;
		Элементы.РеестрКРазделу7Декларации.Видимость    = Ложь;
		Элементы.ДекорацияСсылкаНаДекларацию.Видимость  = ЗначениеЗаполнено(Декларация);
		Элементы.СформироватьДекларациюСсылка.Видимость = НЕ ЗначениеЗаполнено(Декларация);
		Элементы.ГруппаСформироватьДекларацию.Видимость = Ложь;
		Элементы.ОтчетныеФормы.Видимость = Истина;
		Элементы.ОплатаНалога.Видимость  = Истина;
		Элементы.СверкаСФНС.Видимость    = Истина;
		
	Иначе
		
		// Пошаговый помощник
		
		ОбновитьЭлементыРегламентныхОпераций();
		
		Элементы.АвтоматическийРасчет.Видимость = Ложь;
		Элементы.ПошаговыйРасчет.Видимость      = Истина;
		
		ЭтоОбособленноеПодразделение = Объект.Организация <> ГоловнаяОрганизация;
		
		Элементы.ОтчетныеФормы.Видимость = НЕ ЭтоОбособленноеПодразделение;
		Элементы.ОплатаНалога.Видимость  = НЕ ЭтоОбособленноеПодразделение;
		Элементы.СверкаСФНС.Видимость    = НЕ ЭтоОбособленноеПодразделение;
		
		Элементы.ЖурналУчетаСчетовФактур.Видимость      =
			(Объект.Период < '20150101')
			ИЛИ ПолучитьФункциональнуюОпцию("ОсуществляетсяЗакупкаТоваровУслугДляКомитентов")
			ИЛИ ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугКомитентов");
		Элементы.РеестрКРазделу7Декларации.Видимость    =
			Объект.Период >= '20170401'
			И ПолучитьФункциональнуюОпцию("ИспользуетсяРаздельныйУчетНДС");
		Элементы.ДекорацияСсылкаНаДекларацию.Видимость  = ЗначениеЗаполнено(Декларация);
		Элементы.СформироватьДекларациюСсылка.Видимость = Ложь;
		Элементы.ГруппаСформироватьДекларацию.Видимость = НЕ ЗначениеЗаполнено(Декларация);
		
	КонецЕсли;
	
	НадписьОтчетность();
	
	ПомощникРасчетаНДС.НастроитьБлокОплата(ЭтотОбъект);
	
	Если СверкаВыполнена Тогда
		Элементы.ВыполнитьСверкуСсылка.Заголовок = ЗапросНаСверкуНаименование;
		Элементы.ВыполнитьСверкуСсылка.Видимость = Истина;
		Элементы.ВыполнитьСверку.Видимость       = Ложь;
	Иначе
		Элементы.ВыполнитьСверкуСсылка.Видимость = Ложь;
		Элементы.ВыполнитьСверку.Видимость       = Истина;
	КонецЕсли;
	ДоступнаСверка = ЗначениеЗаполнено(Срок)
		И ЗначениеЗаполнено(Правило);
	Элементы.ВыполнитьСверку.Доступность = ДоступнаСверка;
	
	Элементы.ПодробнееНаИТС.Видимость = ЗначениеЗаполнено(Объект.Период);
	
	УстановитьПодсветкуТекущегоБлока();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекущуюСтраницу(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.СообщениеОбОшибке.РасширеннаяПодсказка.Заголовок = Форма.РасширеннаяПодсказка;
	
	Если ЗначениеЗаполнено(Форма.СообщениеОбОшибке) Тогда
		Элементы.СтраницыПомощник.ТекущаяСтраница = Элементы.СтраницаРасчетНедоступен;
	ИначеЕсли Форма.РассчитыватьНалогАвтоматически И НЕ Форма.ДоступенАвтоматическийРасчетНДС Тогда
		Элементы.СтраницыПомощник.ТекущаяСтраница = Элементы.СтраницаАвтоматическийРасчетНедоступен;
	ИначеЕсли НЕ Форма.ПоказателиПолучены Тогда 
		Элементы.СтраницыПомощник.ТекущаяСтраница = Элементы.СтраницаПустая;
	Иначе
		Элементы.СтраницыПомощник.ТекущаяСтраница  =  Элементы.СтраницаРабочая;
		Элементы.СообщениеТребуетсяИсправитьОшибки.Видимость = Форма.ОшибкиПоДаннымНДС;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НадписьОтчетность()
	
	Элементы.ДекорацияОтчетность.ЦветФона = Новый Цвет;
	
	Если Объект.Организация <> ГоловнаяОрганизация Тогда 
		ТекстПорядокСдачиОтчета = НСтр("ru = 'Декларация сдается головной организацией.'");
	ИначеЕсли ДоступенАвтоматическийРасчетНДС 
		И РассчитыватьНалогАвтоматически
		И ДекларацияСдана
		И (Не РасчетВыполнен
		ИЛИ ТребуетсяПерепроведение) Тогда
		
		ТекстПорядокСдачиОтчета = Новый ФорматированнаяСтрока(
			НСтр("ru= 'После сдачи декларации данные были изменены.
			|'"), 
			Новый ФорматированнаяСтрока(НСтр("ru='Как подготовить уточненную декларацию'"),,,,
			"https://its.1c.ru/db/declnds#content:1734:hdoc"));
			
		Элементы.ДекорацияОтчетность.ЦветФона = ЦветаСтиля.ЦветФонаНекорректногоКонтрагента;
		
	Иначе
		ШаблонТекста = НСтр("ru = 'Подать декларацию требуется не позднее %1.
			|Декларация по НДС сдается только в электронном виде'");
		ТекстПорядокСдачиОтчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста,
			Формат(Платежи[0].Дата, "ДФ='дд ММММ'"));
	КонецЕсли;
	
	Элементы.ДекорацияОтчетность.Заголовок = ТекстПорядокСдачиОтчета;
	Элементы.ДекорацияСсылкаНаДекларацию.Заголовок = ПредставлениеДекларации;
	Элементы.СформироватьДекларацию.Доступность = МожноСоздаватьДекларацию;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьБлокРасчет()
	
	Если НалогКУплате > 0 ИЛИ ВсегоВычеты = ВсегоНачисления Тогда
		
		НалогКВозмещению = 0;
		
		ТекстФормулы =  Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(НСтр("ru='Налог к уплате'"), Новый Шрифт(,,Истина)),
			Новый ФорматированнаяСтрока(НСтр("ru = ' = НДС начисленный - НДС к вычету'")));
		ТекстРасчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("(%1 - %2)", 
			Формат(ВсегоНачисления, "ЧДЦ=; ЧН=0"), 
			Формат(ВсегоВычеты, "ЧДЦ=; ЧН=0"));
			
	Иначе
			
		НалогКВозмещению = ВсегоВычеты - ВсегоНачисления;
		
		ТекстФормулы =  Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(НСтр("ru='Налог к возмещению'"), Новый Шрифт(,,Истина)),
			Новый ФорматированнаяСтрока(НСтр("ru = ' = НДС к вычету - НДС начисленный'")));
		ТекстРасчета = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("(%1 - %2)", 
			Формат(ВсегоВычеты, "ЧДЦ=; ЧН=0"), 
			Формат(ВсегоНачисления, "ЧДЦ=; ЧН=0"));
			
	КонецЕсли;
	
	Элементы.ФормулаРасчета.Заголовок = ТекстФормулы;
	Элементы.Расчет.Заголовок = ТекстРасчета;
	
	ВыполняетсяРасчет = ЗначениеЗаполнено(ИдентификаторЗаданияРасчетНалога)
		ИЛИ ЗначениеЗаполнено(ИдентификаторЗаданияПерепроведение);
		
	Элементы.ВыполняетсяРасчет.Видимость = ВыполняетсяРасчет;
	// Отображаем показатели, которые могут быть окончательными или предварительными.
	Элементы.ПоказателиДляРасчетаНалога.Видимость = ПоказателиПолучены;
	
	Если Не ДекларацияСдана
		И (Не РасчетВыполнен 
		ИЛИ ТребуетсяПерепроведение) Тогда
		
		Элементы.ТребуетсяРасчет.Видимость = Не ВыполняетсяРасчет 
			И МожноРассчитыватьНалог;
			
		// Снимаем доступность кнопки "Рассчитать" если период закрыт для редактирования.
		Элементы.Рассчитать.Доступность = МожноРедактироватьОперациюНДС;
		
		ШаблонСообщениеДекларация = ?(ЗначениеЗаполнено(Декларация), 
			НСтр("ru = 'и перезаполнена декларация'"), 
			НСтр("ru = 'и заполнена декларация'"));
		Если ЗначениеЗаполнено(МоментНарушенияПоследовательности) Тогда 
			// Значит сбита последовательность.
			ШаблонСообщениеРасчет = НСтр("ru = 'Для расчета налога будут перепроведены документы с %1,
				|выполнены регламентные операции НДС %2'");
			
			СообщениеРасчет = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщениеРасчет,
				Формат(МоментНарушенияПоследовательности, "ДФ='дд.ММ.гггг'"),
				ШаблонСообщениеДекларация);
				
		Иначе
			// Значит требуется только расчет налога.
			ШаблонСообщениеРасчет = НСтр("ru = 'Для расчета налога будут выполнены регламентные операции НДС %1'");
			СообщениеРасчет = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщениеРасчет,
				ШаблонСообщениеДекларация);
			
		КонецЕсли;
		
		Элементы.ДекорацияПояснениеРасчета.Заголовок  = СообщениеРасчет;
	Иначе
		Элементы.ТребуетсяРасчет.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.Реализация.Видимость                               = Реализация <> 0;
	Элементы.АвансыПолученные.Видимость                         = АвансыПолученные <> 0;
	Элементы.ЗачетАвансовВыданных.Видимость                     = ЗачетАвансовВыданных <> 0;
	Элементы.ПриобретенныеЦенности.Видимость                    = ПриобретенныеЦенности <> 0;
	Элементы.АвансыВыданные.Видимость                           = АвансыВыданные <> 0;
	Элементы.ЗачетАвансовПолученных.Видимость                   = ЗачетАвансовПолученных <> 0;
	Элементы.НалогКУплате.Видимость                             = НалогКУплате > 0 ИЛИ ВсегоВычеты = ВсегоНачисления;
	Элементы.НалогКВозмещению.Видимость                         = НалогКВозмещению > 0;
	Элементы.ГруппаПеренесенныеВычетыВсего.Видимость            = ВсегоПеренесенныеВычеты <> 0;
	Элементы.ПеренесенныеВычетыПриобретенныеЦенности.Видимость  = ПеренесенныеВычетыПриобретенныеЦенности <> 0;
	Элементы.ПеренесенныеВычетыЗачетАвансовПолученных.Видимость = ПеренесенныеВычетыЗачетАвансовПолученных <> 0;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПодсветкуТекущегоБлока()
	
	Если ДоступенАвтоматическийРасчетНДС И РассчитыватьНалогАвтоматически Тогда
	
		Если НЕ ДекларацияСдана
			И (НЕ РасчетВыполнен ИЛИ ТребуетсяПерепроведение) Тогда
			Элементы.ТребуетсяРасчет.ЦветФона = ЦветаСтиля.БыстрыеОтборыФонГруппы;
			Элементы.ГруппаОплатить.ЦветФона  = Новый Цвет;
		Иначе
			Элементы.ТребуетсяРасчет.ЦветФона = Новый Цвет;
			Элементы.ГруппаОплатить.ЦветФона  = ЦветаСтиля.БыстрыеОтборыФонГруппы;
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(Декларация) Тогда
			Элементы.ГруппаОплатить.ЦветФона               = ЦветаСтиля.БыстрыеОтборыФонГруппы;
			Элементы.ГруппаСформироватьДекларацию.ЦветФона = Новый Цвет;
		Иначе
			Элементы.ГруппаОплатить.ЦветФона               = Новый Цвет;
			Элементы.ГруппаСформироватьДекларацию.ЦветФона = ЦветаСтиля.БыстрыеОтборыФонГруппы;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыВыбора = Новый Структура;
	ПараметрыВыбора.Вставить("НачалоПериода", НачалоКвартала(Объект.Период));
	ПараметрыВыбора.Вставить("КонецПериода",  КонецКвартала(Объект.Период));
	ПараметрыВыбора.Вставить("ВидПериода",    ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПериодЗавершениеВыбора", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаКвартал", 
		ПараметрыВыбора, Элементы.Представлениепериода, , , , ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодЗавершениеВыбора(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора <> Неопределено Тогда
		Объект.Период = НачалоКвартала(РезультатВыбора.НачалоПериода);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		НачалоПериода = ВыбранноеЗначение.НачалоПериода;
		КонецПериода = ВыбранноеЗначение.КонецПериода;
	Иначе
		НачалоПериода = ВыбранноеЗначение;
		КонецПериода = ВыбранноеЗначение;
	КонецЕсли;
	
	ВыборПериодаКлиент.ПериодОбработкаВыбора(
		Элемент,
		НачалоПериода,
		СтандартнаяОбработка,
		ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал"),
		ПредставлениеПериода,
		Объект.Период,
		КонецПериода);
		
	РассчитыватьНалогАвтоматическиПоУмолчанию();
	ПриИзмененииУсловийРасчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыполнениеСверки(РезультатЗакрытия = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	СоставРазделов = Новый Структура("Операции, Расчет, Уплата, Сверка", Ложь, Ложь, Ложь, Истина);
	Результат = ПолучитьПоказателиДляРасчетаНалогаНаСервере(СоставРазделов);
	
	Если Результат.Статус = "Выполнено" Тогда
		ЗагрузитьРезультатПоказателиРасчета();
	Иначе
		ИдентификаторЗаданияПолучениеПоказателей = Результат.ИдентификаторЗадания;
		АдресХранилищаПоказатели                 = Результат.АдресРезультата;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания(
			"Подключаемый_ПроверитьВыполнениеЗаданияПолучениеПоказателей",
			ПараметрыОбработчикаОжидания.ТекущийИнтервал,
			Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура ДекорацияСсылкаНаДекларациюНажатие(Элемент)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьЗначение(, Декларация);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПлатеж1Нажатие(Элемент)
	
	ОткрытьПлатежныйДокумент(0);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПлатеж2Нажатие(Элемент)
	
	ОткрытьПлатежныйДокумент(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПлатеж3Нажатие(Элемент)
	
	ОткрытьПлатежныйДокумент(2);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПлатежныйДокумент(Идентификатор)
	
	ОповещениеУплаты = Новый ОписаниеОповещения("ОбработатьУплату", ЭтотОбъект);
	
	Если ТипЗнч(Платежи[Идентификатор].ПлатежныеПоручения) = Тип("Массив")
		И Платежи[Идентификатор].ПлатежныеПоручения.Количество() > 1 Тогда
		
		СписокДокументов = Новый СписокЗначений;
		СписокДокументов.ЗагрузитьЗначения(Платежи[Идентификатор].ПлатежныеПоручения);
		СписокВыделения = Новый Структура("Ссылка", СписокДокументов);
		
		Отбор = Новый Структура;
		Отбор.Вставить("Организация", Объект.Организация);
		
		ПервыйДокумент = Платежи[Идентификатор].ПлатежныеПоручения[0];
		
		ИмяФормыСписка = "Документ.ПлатежноеПоручение.ФормаСписка";
		ОткрытьФорму(ИмяФормыСписка, Новый Структура("Отбор, ТекущаяСтрока, СписокВыделения",
			Отбор, ПервыйДокумент, СписокВыделения), ЭтотОбъект, Истина,,,ОповещениеУплаты);
		
	Иначе
		ИмяФормыПлатежногоДокумента = "Документ.ПлатежноеПоручение.ФормаОбъекта";
		ПараметрыФормыПлатежногоДокумента = ПараметрыФормыПлатежногоДокументаПоСтроке(Идентификатор);
		
		ОткрытьФорму(ИмяФормыПлатежногоДокумента, ПараметрыФормыПлатежногоДокумента, ЭтаФорма,,,,ОповещениеУплаты);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьУплату(РезультатЗакрытия = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	СоставРазделов = Новый Структура("Операции,Расчет, Уплата, Сверка", Ложь, Ложь, Истина, Ложь);
	Результат = ПолучитьПоказателиДляРасчетаНалогаНаСервере(СоставРазделов);
	
	Если Результат.Статус = "Выполнено" Тогда
		ЗагрузитьРезультатПоказателиРасчета();
	Иначе
		ИдентификаторЗаданияПолучениеПоказателей = Результат.ИдентификаторЗадания;
		АдресХранилищаПоказатели                 = Результат.АдресРезультата;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания(
			"Подключаемый_ПроверитьВыполнениеЗаданияПолучениеПоказателей",
			ПараметрыОбработчикаОжидания.ТекущийИнтервал,
			Истина);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПараметрыФормыПлатежногоДокументаПоСтроке(Идентификатор)
	
	Возврат ПомощникРасчетаНДС.ПараметрыФормыПлатежногоДокументаПоСтроке(ЭтотОбъект, Идентификатор);
	
КонецФункции

&НаКлиенте
Процедура Рассчитать(Команда)
	
	Элементы.ТребуетсяРасчет.Видимость = Ложь;
	Элементы.ВыполняетсяРасчет.Видимость = Истина;
	
	Если ТребуетсяПерепроведение Тогда
		ЗапуститьПерепроведение();
	ИначеЕсли Не РасчетВыполнен Тогда
		ВыполнитьРасчет();
	Иначе
		ПолучитьПоказателиДляРасчетаНалога();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСтатусРасчетаНалога()
	
	ДоступенАвтоматическийРасчетНДС =
		ПомощникРасчетаНДС.ДоступенАвтоматическийРасчетНДС(Объект.Организация, Объект.Период);
	
	МожноРедактироватьОперациюНДС =
		Обработки.ЗакрытиеМесяца.МожноРедактироватьОперациюНДС(Объект.Период, Объект.Организация);
	
	ГоловнаяОрганизация           = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Объект.Организация);
	ЕстьОбособленныеПодразделения =
		(ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(ГоловнаяОрганизация).Количество() > 1);
	
	// Установим дату с которой рассчитывается налог.
	БлижайшийНалоговыйПериод = ИнтерфейсыВзаимодействияБРО.БлижайшийНалоговыйПериод(
			Объект.Организация,
			Объект.Период,
			Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВПоследние10ДнейКвартала,
			Перечисления.Периодичность.Квартал);
	НачалоРасширенногоНалоговогоПериода = БлижайшийНалоговыйПериод.Начало;
	
	// Если выполнение невозможно, то есть сообщение об ошибке.
	ПроверитьВозможностьВыполненияЗадачи(БлижайшийНалоговыйПериод); 
	Если ЗначениеЗаполнено(СообщениеОбОшибке) Тогда
		Возврат;
	КонецЕсли;
	
	АвтоматическийПомощник = ДоступенАвтоматическийРасчетНДС И РассчитыватьНалогАвтоматически;
	
	// Прочие проверки необходимы только для "Простого" помощника.
	Если Не АвтоматическийПомощник Тогда 
		Возврат;
	КонецЕсли;
	
	// Найдем декларацию по задаче и ее статус, (ожидаем первичную декларацию, 
	// т.к. простой помощник не поддерживает наличие корректировочных).
	// От наличия декларации и ее статуса зависит поведение помощника:
	// - для декларации со статусом "Сдано" не даем выполнять расчет, отображаем только сведения из декларации;
	// - если декларации нет или она не сдана, то отображаем кнопку "Рассчитать" при необходимости.
	ПолучитьСведенияОДекларации();
	
	РасчетВыполнен = РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.ВыполненАвтоматическийРасчет(
		Объект.Организация, Объект.Период);
	
	ГраницаАктуальности = РаботаСПоследовательностями.МоментНачалаПерепроведения(
		Объект.Организация, КонецКвартала(Объект.Период));
		
	Если ГраницаАктуальности <> Неопределено Тогда 
		МоментНарушенияПоследовательности = ГраницаАктуальности.Дата;
		ТребуетсяПерепроведение = Истина;
	Иначе
		МоментНарушенияПоследовательности = Неопределено;
		ТребуетсяПерепроведение           = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСведенияОДекларации()
	
	// Очистим сведения по деклараци
	Декларация = Неопределено;
	ДекларацияСдана = Ложь;
	
	СведенияОДекларации = Обработки.ПомощникРасчетаНДС.СведенияОДекларации(Объект.Организация, Объект.Период);
	
	Декларация = СведенияОДекларации.Декларация;
	ДекларацияСдана = СведенияОДекларации.ДекларацияСдана;
	
КонецПроцедуры

&НаСервере
Процедура БыстраяПроверкаДанныхНДС()

	СообщениеТребуетсяИсправитьОшибки = СтрокаСообщенияНеЗаполненыДанныеДляОтчетности(Объект.Организация, ОшибкиПоДаннымНДС);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтрокаСообщенияНеЗаполненыДанныеДляОтчетности(Организация, ОшибкиПоДаннымНДС) Экспорт
	
	Если НЕ ОшибкиПоДаннымНДС Тогда
		Возврат Неопределено;
	КонецЕсли;

	Если Не ЗначениеЗаполнено(Организация) Тогда
		ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	Иначе
		ЮридическоеФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо");
	КонецЕсли;
	
	Если ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		ТекстОписанияСведений = НСтр("ru = 'сведения о себе'");
	Иначе
		ТекстОписанияСведений = НСтр("ru = 'сведения об организации'");
	КонецЕсли;
	
	ГиперссылкаОшибкиВДанныхНДС = Новый ФорматированнаяСтрока("ошибки",,,,"ПроверитьДанныеНДС");
	
	ЭлементыСообщенияОбОшибке = Новый Массив;
	
	ЭлементыСообщенияОбОшибке.Добавить("Исправьте");
	ЭлементыСообщенияОбОшибке.Добавить(" ");
	ЭлементыСообщенияОбОшибке.Добавить(ГиперссылкаОшибкиВДанныхНДС);
	ЭлементыСообщенияОбОшибке.Добавить(" ");
	ЭлементыСообщенияОбОшибке.Добавить("в учетных данных");
	
	Возврат Новый ФорматированнаяСтрока(ЭлементыСообщенияОбОшибке);
	
КонецФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	РассчитыватьНалогАвтоматическиПоУмолчанию();
	
	ЗаполнитьТаблицуОперацийПошаговогоПомощника();
	
КонецПроцедуры

&НаСервере
Процедура РассчитыватьНалогАвтоматическиПоУмолчанию()
	
	РассчитыватьНалогАвтоматически = ПомощникРасчетаНДС.ДоступенАвтоматическийРасчетНДС(Объект.Организация, Объект.Период)
		И НЕ ПомощникРасчетаНДС.ЕстьРегламентныеДокументыСозданныеВручную(Объект.Организация, Объект.Период);
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуОперацийПошаговогоПомощника()
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ПустаяСсылка();
	СтрокаТаблицы.ИмяОперации = "ПерепроведениеДокументов";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ОбработкаНомеровСчетовФактур;
	СтрокаТаблицы.ИмяОперации = "ОбработкаНомеровСчетовФактур";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ПереходНаРаздельныйУчетНДСНаСчете19;
	СтрокаТаблицы.ИмяОперации = "ПереходНаРаздельныйУчетНДСНаСчете19";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ОтключениеРаздельногоУчетаНДС;
	СтрокаТаблицы.ИмяОперации = "ОтключениеРаздельногоУчетаНДС";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.ИмяОперации = "НачислениеНДСпоСМРхозспособом";
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.НачислениеНДСпоСМРхозспособом;
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.РаспределениеНДС;
	СтрокаТаблицы.ИмяОперации = "РаспределениеНДС";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ВосстановлениеНДС;
	СтрокаТаблицы.ИмяОперации = "ВосстановлениеНДС";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок;
	СтрокаТаблицы.ИмяОперации = "ФормированиеЗаписейКнигиПокупок";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок0;
	СтрокаТаблицы.ИмяОперации = "ФормированиеЗаписейКнигиПокупок0";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаАванс;
	СтрокаТаблицы.ИмяОперации = "РегистрацияСчетовФактурНаАванс";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНалоговогоАгента;
	СтрокаТаблицы.ИмяОперации = "РегистрацияСчетовФактурНалоговогоАгента";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ПодтверждениеНулевойСтавкиНДС;
	СтрокаТаблицы.ИмяОперации = "ПодтверждениеНулевойСтавкиНДС";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ПодтверждениеОплатыНДСВБюджет;
	СтрокаТаблицы.ИмяОперации = "ПодтверждениеОплатыНДСВБюджет";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ВосстановлениеНДСПоОбъектамНедвижимости;
	СтрокаТаблицы.ИмяОперации = "ВосстановлениеНДСПоОбъектамНедвижимости";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ФормированиеСводнойСправки;
	СтрокаТаблицы.ИмяОперации = "ФормированиеСводнойСправки";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж;
	СтрокаТаблицы.ИмяОперации = "ФормированиеЗаписейКнигиПродаж";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаСуммовыеРазницы;
	СтрокаТаблицы.ИмяОперации = "РегистрацияСчетовФактурНаСуммовыеРазницы";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж0;
	СтрокаТаблицы.ИмяОперации = "ФормированиеЗаписейКнигиПродаж0";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ФормированиеЗаписейРаздела7ДекларацииНДС;
	СтрокаТаблицы.ИмяОперации = "ФормированиеЗаписейРаздела7ДекларацииНДС";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ПустаяСсылка();
	СтрокаТаблицы.ИмяОперации = "КнигаПокупок";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ПустаяСсылка();
	СтрокаТаблицы.ИмяОперации = "КнигаПродаж";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ПустаяСсылка();
	СтрокаТаблицы.ИмяОперации = "ЖурналУчетаСчетовФактур";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ПустаяСсылка();
	СтрокаТаблицы.ИмяОперации = "РеестрКРазделу7Декларации";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ПустаяСсылка();
	СтрокаТаблицы.ИмяОперации = "ЭкспрессПроверкаВеденияУчета";

КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыРегламентныхОпераций()
	
	Элементы.ПерепроведениеДокументов.Картинка = 
		?(ТребуетсяПерепроведение, БиблиотекаКартинок.Пустая, БиблиотекаКартинок.ОтметитьЗадачуКакВыполненную);
	
	Для Каждого СтрокаУзла ИЗ ПолноеДеревоОпераций Цикл
		
		РегламентнаяОперация = СтрокаУзла.Узел;
		НайденныеСтроки = ТаблицаОпераций.НайтиСтроки(Новый Структура("РегламентнаяОперация", РегламентнаяОперация));
		Если НЕ НайденныеСтроки.Количество() > 0 Тогда
			Продолжить; 
		КонецЕсли;
		
		ТекущаяСтрока = НайденныеСтроки[0];
		Если Объект.Период >= '20120101' Тогда
			Если РегламентнаяОперация = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаСуммовыеРазницы
			 ИЛИ РегламентнаяОперация = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж0 Тогда
				Элементы[ТекущаяСтрока.ИмяОперации].Видимость = Ложь;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ОтобразитьРегламентнуюОперацию(
			РегламентнаяОперация, ТекущаяСтрока.ИмяОперации, СтрокаУзла.Контроль, СтрокаУзла.Выполнена, СтрокаУзла.Актуальна);
		
		// Установка расшифровки для выполнения действия по умолчанию
		Если РегламентнаяОперация = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаАванс
		 ИЛИ РегламентнаяОперация = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНалоговогоАгента
		 ИЛИ РегламентнаяОперация = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаСуммовыеРазницы Тогда 
			ТекущаяСтрока.Действие = "ДокументВвести";
		ИначеЕсли РегламентнаяОперация = Перечисления.РегламентныеОперации.ПереходНаРаздельныйУчетНДСНаСчете19
			  ИЛИ РегламентнаяОперация = Перечисления.РегламентныеОперации.ОтключениеРаздельногоУчетаНДС
			  ИЛИ РегламентнаяОперация = Перечисления.РегламентныеОперации.ОбработкаНомеровСчетовФактур Тогда
			Если СтрокаУзла.Выполнена Тогда
				ТекущаяСтрока.Действие = "ОткрытьСписокДокументов";
			Иначе
				ТекущаяСтрока.Действие = "ДокументВвести";
			КонецЕсли; 
		Иначе
			Если СтрокаУзла.Выполнена Тогда
				Если СтрокаУзла.СостояниеОпераций.Количество() > 1 Тогда
					ТекущаяСтрока.Действие = "ОткрытьСписокДокументов";
				ИначеЕсли ЗначениеЗаполнено(СтрокаУзла.СостояниеОпераций[0].Регистратор) Тогда
					ТекущаяСтрока.Действие = "ДокументОткрыть";
				Иначе
					ТекущаяСтрока.Действие = "ДокументВвести";
				КонецЕсли;
			Иначе
				ТекущаяСтрока.Действие = "ДокументВвести";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьРегламентнуюОперацию(
	РегламентнаяОперация, ИмяОперации, КонтролироватьОперацию, ОперацияВыполнена, ОперацияАктуальна)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		
		Элементы[ИмяОперации].Видимость = Истина;
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ОперацияВыполнена Тогда
		Если КонтролироватьОперацию Тогда
			
			Элементы[ИмяОперации].Видимость = Истина;
			Элементы[ИмяОперации].Картинка = БиблиотекаКартинок.Пустая;
			
		Иначе
			
			Элементы[ИмяОперации].Видимость = Ложь;
			
		КонецЕсли;
	ИначеЕсли ОперацияАктуальна Тогда
		
		Элементы[ИмяОперации].Видимость = Истина;
		Элементы[ИмяОперации].Картинка = БиблиотекаКартинок.ОтметитьЗадачуКакВыполненную;
		
	Иначе
		
		Элементы[ИмяОперации].Видимость = Истина;
		Элементы[ИмяОперации].Картинка = БиблиотекаКартинок.Пустая;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПоследовательность()

	МоментНарушения =
		РаботаСПоследовательностями.МоментНачалаПерепроведения(Объект.Организация, КонецКвартала(Объект.Период));
	Если МоментНарушения = Неопределено Тогда
		Элементы.ПерепроведениеДокументов.Картинка = БиблиотекаКартинок.ОтметитьЗадачуКакВыполненную;
	Иначе
		Элементы.ПерепроведениеДокументов.Картинка = БиблиотекаКартинок.Пустая;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНажатияСсылки(ИмяОперации)
	
	НайденныеСтроки = ТаблицаОпераций.НайтиСтроки(Новый Структура("ИмяОперации", ИмяОперации));
	
	Если НЕ НайденныеСтроки.Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = НайденныеСтроки[0];
	
	Если ТекущаяСтрока.ИмяОперации = "КнигаПокупок" 
	 ИЛИ ТекущаяСтрока.ИмяОперации = "КнигаПродаж" 
	 ИЛИ ТекущаяСтрока.ИмяОперации = "РеестрКРазделу7Декларации"
	 ИЛИ ТекущаяСтрока.ИмяОперации = "ЖурналУчетаСчетовФактур"
	 ИЛИ ТекущаяСтрока.ИмяОперации = "ЭкспрессПроверкаВеденияУчета" Тогда
		
		ОбработкаВыбранногоДействия("ОткрытьОтчет", ТекущаяСтрока.ИмяОперации, Неопределено);
		Возврат;
		
	КонецЕсли;
	
	Если ТекущаяСтрока.ИмяОперации = "ПерепроведениеДокументов" Тогда
	
		ОбработкаВыбранногоДействияПерепроведениеДокументов();
		Возврат;
		
	КонецЕсли;
	
	Если ТекущаяСтрока.ИмяОперации = "ПереходНаРаздельныйУчетНДСНаСчете19" Тогда
	
		ОбработкаВыбранногоДействияПереходНаРаздельныйУчетНДСНаСчете19();
		Возврат;
		
	КонецЕсли;
	
	Если ТекущаяСтрока.ИмяОперации = "ОтключениеРаздельногоУчетаНДС" Тогда
	
		ОбработкаВыбранногоДействияОтключениеРаздельногоУчетаНДС();
		Возврат;
		
	КонецЕсли;

	
	Если ТекущаяСтрока.ИмяОперации = "ОбработкаНомеровСчетовФактур" Тогда
	
		ОбработкаВыбранногоДействияОбработкаНомеровСчетовФактур();
		Возврат;
		
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.РегламентнаяОперация) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Действие) Тогда
		
		НайденныеСтроки = ПолноеДеревоОпераций.НайтиСтроки(Новый Структура("Узел", ТекущаяСтрока.РегламентнаяОперация));
		ДокументОперации = Неопределено;
		Если НайденныеСтроки.Количество() > 0
			И ЗначениеЗаполнено(НайденныеСтроки[0].СостояниеОпераций)
			И НайденныеСтроки[0].СостояниеОпераций.Количество() > 0 Тогда
			ДокументОперации = НайденныеСтроки[0].СостояниеОпераций[0].Регистратор;
		КонецЕсли;
		
		ОбработкаВыбранногоДействия(ТекущаяСтрока.Действие, ТекущаяСтрока.ИмяОперации, ТекущаяСтрока.РегламентнаяОперация,
			ДокументОперации, Истина);
		
	Иначе
		
		МенюРасшифровки = Новый СписокЗначений();
		ЕстьЗаписиОВыполнении = Ложь;
		
		Если ТекущаяСтрока.ИмяОперации = "РегистрацияСчетовФактурНаАванс"
			ИЛИ ТекущаяСтрока.ИмяОперации = "РегистрацияСчетовФактурНалоговогоАгента"
			ИЛИ ТекущаяСтрока.ИмяОперации = "РегистрацияСчетовФактурНаСуммовыеРазницы" Тогда
			
			ОбработкаВыбранногоДействия("ДокументВвести", ТекущаяСтрока.ИмяОперации, Неопределено, Ложь);
			
		Иначе
			
			ОбработкаВыбранногоДействия("ОткрытьСписокДокументов", 
				ТекущаяСтрока.ИмяОперации, ТекущаяСтрока.РегламентнаяОперация,
				?(НайденныеСтроки.Количество() = 0, Неопределено, НайденныеСтроки[0].Регистратор));
				
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбранногоДействия(
	ВыбранноеДействие, ИмяОперации, ОперацияСсылка, ДокументСсылка = Неопределено, ОпределитьНаличиеДокументов = Ложь)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",   Объект.Организация);
	ПараметрыФормы.Вставить("КонецПериода",  КонецКвартала(Объект.Период));
	ПараметрыФормы.Вставить("НачалоПериода",
		?(ЗначениеЗаполнено(НачалоРасширенногоНалоговогоПериода), НачалоРасширенногоНалоговогоПериода, Объект.Период));
	
	Если ВыбранноеДействие = "ДокументВвести" Тогда
		
		ВвестиДокумент(ОперацияСсылка, ИмяОперации, ОпределитьНаличиеДокументов, ПараметрыФормы);
		Возврат;
		
	ИначеЕсли ВыбранноеДействие = "ДокументОткрыть" И НЕ ДокументСсылка = Неопределено Тогда
		
		Если ИмяОперации = "ФормированиеСводнойСправки" Тогда 
			ПолноеИмяФормы = "Документ.СчетФактураВыданный.ФормаОбъекта";
		Иначе
			ПолноеИмяФормы = "Документ." + СтрЗаменить(ИмяОперации, "0", "") + ".ФормаОбъекта";
		КонецЕсли;
		ПараметрыЗаполнения = Новый Структура("Ключ", ДокументСсылка);
		
	ИначеЕсли ВыбранноеДействие = "ОткрытьОтчет" тогда
		
		Если ИмяОперации = "КнигаПокупок" Тогда
			ПолноеИмяФормы      = "Отчет.КнигаПокупок.Форма.ФормаОтчета";
			ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
			ПараметрыЗаполнения = ПараметрыФормы;
		ИначеЕсли ИмяОперации = "КнигаПродаж" Тогда
			ПолноеИмяФормы      = "Отчет.КнигаПродаж.Форма.ФормаОтчета";
			ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
			ПараметрыЗаполнения = ПараметрыФормы;
		ИначеЕсли ИмяОперации = "ЖурналУчетаСчетовФактур" Тогда
			ПолноеИмяФормы      = "Отчет.ЖурналУчетаСчетовФактур.Форма.ФормаОтчета";
			ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
			ПараметрыЗаполнения = ПараметрыФормы;
		ИначеЕсли ИмяОперации = "РеестрКРазделу7Декларации" Тогда
			ПолноеИмяФормы      = "Отчет.РеестрДокументовПодтверждающихНалоговуюЛьготуПоНДС.Форма.ФормаОтчета";
			ПараметрыФормы.Вставить("РежимРасшифровки", Истина);
			ПараметрыЗаполнения = ПараметрыФормы;
		ИначеЕсли ИмяОперации = "ЭкспрессПроверкаВеденияУчета" Тогда
			ПолноеИмяФормы      = "Отчет.ЭкспрессПроверкаВеденияУчета.Форма.ФормаОтчета";
			ПараметрыЗаполнения = Новый Структура;
			ПараметрыЗаполнения.Вставить("ПараметрыФормы", ПараметрыФормы);
			ПараметрыЗаполнения.Вставить("СписокПроверок", СписокПроверок());
			ПараметрыЗаполнения.Вставить("РежимРасшифровки", Истина);
			ПараметрыЗаполнения.Вставить("СформироватьПриОткрытии", Истина);
		КонецЕсли;
		
	Иначе
		
		Если ВыбранноеДействие = "ОткрытьСписокСчетовФактур" тогда
			
			Если ИмяОперации = "КнигаПокупок" Тогда
				ПолноеИмяФормы = "Документ.СчетФактураПолученный.ФормаСписка";
			ИначеЕсли ИмяОперации = "КнигаПродаж" Тогда
				ПолноеИмяФормы = "Документ.СчетФактураВыданный.ФормаСписка";
			КонецЕсли;
			
		ИначеЕсли ВыбранноеДействие = "ОткрытьСписокДокументов" Тогда
			
			Если ИмяОперации = "ФормированиеЗаписейКнигиПокупок0" Тогда
				
				ПараметрыФормы.Вставить("ПредъявленНДСКВычету0", Истина); 
				ПолноеИмяФормы = "Документ.ФормированиеЗаписейКнигиПокупок.ФормаСписка";
				
			ИначеЕсли ИмяОперации = "ФормированиеЗаписейКнигиПокупок" Тогда
				
				ПараметрыФормы.Вставить("ПредъявленНДСКВычету0", Ложь); 
				ПолноеИмяФормы = "Документ.ФормированиеЗаписейКнигиПокупок.ФормаСписка";
				
			ИначеЕсли ИмяОперации = "ФормированиеЗаписейКнигиПродаж0" Тогда
				
				ПараметрыФормы.Вставить("Реализация0", Истина); 
				ПолноеИмяФормы = "Документ.ФормированиеЗаписейКнигиПродаж.ФормаСписка";
				
			ИначеЕсли ИмяОперации = "ФормированиеЗаписейКнигиПродаж" Тогда
				
				ПараметрыФормы.Вставить("Реализация0", Ложь); 
				ПолноеИмяФормы = "Документ.ФормированиеЗаписейКнигиПродаж.ФормаСписка";
				
			ИначеЕсли ИмяОперации = "РегистрацияСчетовФактурНаАванс" Тогда
				
				ПараметрыФормы.Вставить("ВидСчетаФактуры",
					ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.НаАванс"));
				ПолноеИмяФормы = "Документ.СчетФактураВыданный.ФормаСписка";
				
			ИначеЕсли ИмяОперации = "РегистрацияСчетовФактурНалоговогоАгента" Тогда
				
				ПараметрыФормы.Вставить("ВидСчетаФактуры", 
					ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.НалоговыйАгент")); 
				ПолноеИмяФормы = "Документ.СчетФактураВыданный.ФормаСписка";
				
			ИначеЕсли ИмяОперации = "РегистрацияСчетовФактурНаСуммовыеРазницы" Тогда
				
				ПараметрыФормы.Вставить("ВидСчетаФактуры",
					ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу")); 
				ПолноеИмяФормы = "Документ.СчетФактураВыданный.ФормаСписка";
				
			ИначеЕсли ИмяОперации = "ФормированиеСводнойСправки" Тогда
				
				ПараметрыФормы.Вставить("ВидСчетаФактуры",
					ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.СводнаяСправка")); 
				ПолноеИмяФормы = "Документ.СчетФактураВыданный.ФормаСписка";
				
			Иначе
				ПолноеИмяФормы = "Документ."+ИмяОперации + ".ФормаСписка";
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыЗаполнения = Новый Структура("Отбор", ПараметрыФормы);
		
	КонецЕсли; 
	
	ОткрытьФорму(ПолноеИмяФормы, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиДокумент(РегламентнаяОперация, ИмяОперации, ОпределитьНаличиеДокументов, ПараметрыФормы)
	
	Если НЕ ЗначениеЗаполнено(РегламентнаяОперация) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяОперации = "РегистрацияСчетовФактурНаАванс" 
		ИЛИ ИмяОперации = "РегистрацияСчетовФактурНалоговогоАгента" 
		ИЛИ ИмяОперации = "РегистрацияСчетовФактурНаСуммовыеРазницы" Тогда
		ПараметрыЗаполнения = Новый Структура("ПараметрыЗаполненияФормы", ПараметрыФормы);
		ПолноеИмяФормы = "Обработка."+ИмяОперации+".Форма";
	Иначе
		
		Если ОпределитьНаличиеДокументов Тогда
			ДокументыПоОперацииЗаПериод = ПолучитьДокументыПоКодуОперации(
				Объект.Организация, Объект.Период, РегламентнаяОперация, ИмяОперации);
			Если ДокументыПоОперацииЗаПериод.Количество() > 0 Тогда
				Если ДокументыПоОперацииЗаПериод.Количество() = 1 Тогда
					Если ИмяОперации = "ФормированиеСводнойСправки" Тогда
						ОбработкаВыбранногоДействия("ДокументОткрыть",
							"СчетФактураВыданный", РегламентнаяОперация,ДокументыПоОперацииЗаПериод[0]);
					Иначе
						ОбработкаВыбранногоДействия("ДокументОткрыть", ИмяОперации, РегламентнаяОперация,ДокументыПоОперацииЗаПериод[0]);
					КонецЕсли;
					Возврат;
				Иначе 
					ОбработкаВыбранногоДействия("ОткрытьСписокДокументов", ИмяОперации, РегламентнаяОперация);
					Возврат;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
		
		ПараметрыФормы.Вставить("Дата",КонецКвартала(Объект.Период));
		
		Если ИмяОперации = "РаспределениеНДС" Тогда
			ПараметрыФормы.Вставить("НачалоПериода",Объект.Период); 
		ИначеЕсли ИмяОперации = "ВосстановлениеНДС" Тогда
			ПараметрыФормы.Вставить("ОтразитьВКнигеПродаж",Объект.Период>='20070101');
		КонецЕсли;
		
		Если ИмяОперации = "ФормированиеЗаписейКнигиПокупок0" Тогда
			ПолноеИмяФормы = "Документ.ФормированиеЗаписейКнигиПокупок.ФормаОбъекта";
			ПараметрыФормы.Вставить("ПредъявленНДСКВычету0",Истина);
			ПараметрыЗаполнения	= Новый Структура("ПараметрыЗаполненияФормы", ПараметрыФормы);
		ИначеЕсли ИмяОперации = "ФормированиеЗаписейКнигиПродаж0" Тогда
			ПолноеИмяФормы = "Документ.ФормированиеЗаписейКнигиПродаж.ФормаОбъекта";
			ПараметрыФормы.Вставить("Реализация0",Истина);
			ПараметрыЗаполнения	= Новый Структура("ПараметрыЗаполненияФормы", ПараметрыФормы);
		ИначеЕсли ИмяОперации = "ФормированиеСводнойСправки" Тогда
			ПолноеИмяФормы = "Документ.СчетФактураВыданный.Форма.ФормаДокументаСводнаяСправка";
			ПараметрыФормы.Вставить("ВидСчетаФактуры", 
				ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.СводнаяСправка"));
			ПараметрыЗаполнения= Новый Структура("ПараметрыЗаполненияФормы", ПараметрыФормы);
		Иначе
			ПараметрыЗаполнения	= Новый Структура("ПараметрыЗаполненияФормы", ПараметрыФормы);
			ПолноеИмяФормы = "Документ."+ИмяОперации+".ФормаОбъекта";
		КонецЕсли; 
		
	КонецЕсли;
	
	ОткрытьФорму(ПолноеИмяФормы, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДокументыПоКодуОперации(Организация, ПериодРегистрации, ОперацияСсылка, ИмяТекущейОперации)
	
	Если НЕ (ОперацияСсылка = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаАванс
		ИЛИ ОперацияСсылка = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНалоговогоАгента
		ИЛИ ОперацияСсылка = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаСуммовыеРазницы) Тогда
		
		// Проверим наличие непроведенных документов за период
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Документы.Ссылка,
		|	Документы.Проведен КАК Проведен,
		|	Документы.ПометкаУдаления КАК ПометкаУдаления,
		|	Документы.Представление
		|ИЗ
		|	Документ.ФормированиеЗаписейКнигиПокупок КАК Документы
		|ГДЕ
		|	Документы.Организация = &Организация
		|	И Документы.Дата >= &НачалоПериода
		|	И Документы.Дата <= &КонецПериода
		|	И НЕ Документы.ПометкаУдаления
		| 	И &ДополнительноеУсловие
		|
		|УПОРЯДОЧИТЬ ПО
		|	Проведен УБЫВ,
		|	ПометкаУдаления,
		|	Документы.Дата";
		
		
		Если ОперацияСсылка = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок0 Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительноеУсловие", "Документы.ПредъявленНДСКВычету0");
		ИначеЕсли ОперацияСсылка = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительноеУсловие", "НЕ Документы.ПредъявленНДСКВычету0");
		ИначеЕсли ОперацияСсылка = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж0 Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ФормированиеЗаписейКнигиПокупок","ФормированиеЗаписейКнигиПродаж");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительноеУсловие", "Документы.Реализация0");
		ИначеЕсли ОперацияСсылка = Перечисления.РегламентныеОперации.ФормированиеСводнойСправки Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ФормированиеЗаписейКнигиПокупок","СчетФактураВыданный");
			Запрос.Текст = СтрЗаменить(
				Запрос.Текст, "&ДополнительноеУсловие",
				"Документы.ВидСчетаФактуры = Значение(Перечисление.ВидСчетаФактурыВыставленного.СводнаяСправка)");
		ИначеЕсли ОперацияСсылка = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ФормированиеЗаписейКнигиПокупок","ФормированиеЗаписейКнигиПродаж");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительноеУсловие", "НЕ Документы.Реализация0");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ФормированиеЗаписейКнигиПокупок",ИмяТекущейОперации);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительноеУсловие", "Истина"); 
		КонецЕсли; 
		
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("НачалоПериода", ПериодРегистрации);
		Запрос.УстановитьПараметр("КонецПериода", КонецКвартала(ПериодРегистрации));
		
		ДокументыПоОперацииЗаПериодРезультат = Запрос.Выполнить().Выгрузить();
		ДокументыПоОперацииЗаПериодРезультат.Колонки.Добавить("Использован", Новый ОписаниеТипов("Булево"));
	Иначе
		ДокументыПоОперацииЗаПериодРезультат = Новый ТаблицаЗначений();
		ДокументыПоОперацииЗаПериодРезультат.Колонки.Добавить("Ссылка");
	КонецЕсли;
	
	Возврат ДокументыПоОперацииЗаПериодРезультат.ВыгрузитьКолонку("Ссылка");
	
КонецФункции // ПолучитьДокументыПоКодуОперации()

&НаСервереБезКонтекста
Функция ОписаниеДействияДекларация(Знач Организация, Знач Период, ТекстОшибки = "")
	
	ОписаниеДействияДекларация = Обработки.ПомощникРасчетаНДС.ОписаниеДействияДекларация(
		Организация, Период, ТекстОшибки);
	
	Возврат ОписаниеДействияДекларация;
	
КонецФункции

&НаКлиенте
Функция СписокПроверок()
	
	СписокПроверок = Новый Массив;
	
	СписокПроверок.Добавить("РазделУчПолитики");
	СписокПроверок.Добавить("НаличиеСложногоНДС");
	СписокПроверок.Добавить("РазделКнигаПродаж");
	СписокПроверок.Добавить("ПолнотаСФПоРеализации");
	СписокПроверок.Добавить("СвоевременностьСФПоРеализации");
	СписокПроверок.Добавить("Соответствие90_НДС_БУ");
	СписокПроверок.Добавить("Соответствие91_НДС_БУ");
	СписокПроверок.Добавить("Соответствие90и91_НДС_НУ");
	СписокПроверок.Добавить("ЕстьЗаписиКнигиПродаж2012");
	СписокПроверок.Добавить("НачислениеНДСсАвансов");
	СписокПроверок.Добавить("НДСсАвансовБУ_НУ");
	СписокПроверок.Добавить("ПолнотаНДСАгенты");
	СписокПроверок.Добавить("НДСсСМРхозспособомВКнигеПродаж");
	СписокПроверок.Добавить("НумерацияСФ");
	СписокПроверок.Добавить("РазделКнигаПокупок");
	СписокПроверок.Добавить("ПолнотаСФПолученных");
	СписокПроверок.Добавить("ЕстьРаспределениеКосвРасходов");
	СписокПроверок.Добавить("ЕстьЗаписиКнигиПокупок");
	СписокПроверок.Добавить("НетОтрицательногоНДСПредъявленного");
	СписокПроверок.Добавить("ОстаткиНДСПредъявленного_БУ_НУ");
	СписокПроверок.Добавить("ЕстьВычетНДСсАвансов");
	СписокПроверок.Добавить("ВычетНДСсАвансов_БУ_НУ");
	
	Возврат СписокПроверок;
	
КонецФункции

&НаСервере
Процедура ПроверитьВозможностьВыполненияЗадачи(БлижайшийНалоговыйПериод)
	
	СообщениеОбОшибке = "";
	РасширеннаяПодсказка = "";
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация)
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Период) Тогда
		СообщениеОбОшибке = Новый ФорматированнаяСтрока(НСтр("ru = 'Не заполнены реквизиты для расчета.'"));
	ИначеЕсли НЕ УчетнаяПолитика.ПлательщикНДС(Объект.Организация, Объект.Период) Тогда
		СообщениеОбОшибке = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Организация не является плательщиком НДС.'"),
			" ",
			НСтр("ru = 'Измените настройки'"),
			" ",
			Новый ФорматированнаяСтрока(НСтр("ru = 'системы налогообложения'"), , , , "УчетнаяПолитикаОрганизации"), ".");
	ИначеЕсли НачалоКвартала(БлижайшийНалоговыйПериод.Конец) > НачалоКвартала(Объект.Период) Тогда
		КварталРегистрации = Формат(Объект.Период, "ДФ='к ''квартал'' гггг ''года'''");
		ШаблонСообщения = НСтр("ru='Отчетность по НДС за %1 сдавать не нужно.'");
		СообщениеОбОшибке = Новый ФорматированнаяСтрока(СтрШаблон(ШаблонСообщения, КварталРегистрации));
		РасширеннаяПодсказка = НСтр("ru='У организаций и ИП, зарегистрированных в последние 10 рабочих дней квартала, '") + 
			НСтр("ru='первый налоговый период по НДС длится с даты регистрации до конца следующего квартала '") +
			НСтр("ru='(п.3.1 ст. 55 НК РФ). Вычеты и начисления НДС за последние 10 рабочих дней квартала регистрации '") +
			НСтр("ru='включаются в отчетность за следующий квартал.'");
			
	ИначеЕсли Объект.Организация = ГоловнаяОрганизация // для обособленных подразделений отчетность не формируем
			И НЕ ПроверитьРеквизитыОрганизацииДляОтчетности() Тогда
			
		СообщениеОбОшибке =
			ПроверкаРеквизитовОрганизации.СтрокаСообщенияНеЗаполненыРеквизитыДляОтчетности(Объект.Организация);
			
	ИначеЕсли Не ДоступенАвтоматическийРасчетНДС И РассчитыватьНалогАвтоматически Тогда
		ОтобразитьПричиныНедоступностиАвтоматическогоРасчета();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьПричиныНедоступностиАвтоматическогоРасчета()
	
	ПричиныНедоступности = ПомощникРасчетаНДС.ПричиныНедоступностиАвтоматическогоРасчета(
		Объект.Организация, Объект.Период);
	
	Элементы.НеПоддерживаетсяРанее4кв2018.Видимость        = Ложь;
	Элементы.ЗаписиДопЛистов.Видимость                     = Ложь;
	Элементы.РучныеКорректировкиСписокДокументов.Видимость = Ложь;
	Элементы.ОбособленныеПодразделения.Видимость           = Ложь;
	Элементы.ВедетсяРаздельныйУчетНДС.Видимость            = Ложь;
	Элементы.ОсвобождениеОтНДС.Видимость                   = Ложь;
	Элементы.ВвозТоваровИзЕАЭС.Видимость                   = Ложь;
	Элементы.ИмпортТоваров.Видимость                       = Ложь;
	Элементы.ЭкспортТоваров.Видимость                      = Ложь;
	Элементы.НачислениеНДСпоСМР.Видимость                  = Ложь;
	Элементы.КомиссияПродажа.Видимость                     = Ложь;
	Элементы.КомиссияЗакупка.Видимость                     = Ложь;
	Элементы.НалоговыйАгент.Видимость                      = Ложь;
	
	Если ПричиныНедоступности.Найти("Период") <> Неопределено Тогда
		Элементы.НеПоддерживаетсяРанее4кв2018.Видимость = Истина;
		
	ИначеЕсли ПричиныНедоступности.Найти("КорректировочнаяДекларация") <> Неопределено Тогда
		Элементы.ЗаписиДопЛистов.Видимость = Истина;
		
	ИначеЕсли ПричиныНедоступности.Найти("РучныеКорректировки") <> Неопределено Тогда
		Элементы.РучныеКорректировкиСписокДокументов.Видимость = Истина;
		
	Иначе
		Элементы.ОбособленныеПодразделения.Видимость = ПричиныНедоступности.Найти("Подразделения") <> Неопределено;
		Элементы.ВедетсяРаздельныйУчетНДС.Видимость  = ПричиныНедоступности.Найти("РаздельныйУчетНДС") <> Неопределено;
		Элементы.ОсвобождениеОтНДС.Видимость         = ПричиныНедоступности.Найти("ОсвобождениеОтНДС") <> Неопределено;
		Элементы.ВвозТоваровИзЕАЭС.Видимость         = ПричиныНедоступности.Найти("ВвозИзЕАЭС") <> Неопределено;
		Элементы.ИмпортТоваров.Видимость             = ПричиныНедоступности.Найти("ИмпортТоваров") <> Неопределено;
		Элементы.ЭкспортТоваров.Видимость            = ПричиныНедоступности.Найти("Экспорт") <> Неопределено;
		Элементы.НачислениеНДСпоСМР.Видимость        = ПричиныНедоступности.Найти("СМРХозспособом") <> Неопределено;
		Элементы.КомиссияПродажа.Видимость           = ПричиныНедоступности.Найти("КомиссияПродажа") <> Неопределено;
		Элементы.КомиссияЗакупка.Видимость           = ПричиныНедоступности.Найти("КомиссияЗакупка") <> Неопределено;
		Элементы.НалоговыйАгент.Видимость            = ПричиныНедоступности.Найти("НалоговыйАгент") <> Неопределено;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПроверитьРеквизитыОрганизацииДляОтчетности()
	
	РезультатПроверки = ПомощникРасчетаНДС.ПроверитьДанныеНДС("РеквизитыОрганизации",
							Объект.Организация, Объект.Период, Неопределено);
	
	Возврат РезультатПроверки.ПроверкаПройдена;
	
КонецФункции

&НаСервереБезКонтекста
Функция КлючЗаписиУчетнойПолитики(Знач Организация, Знач Период)
	
	Возврат НастройкиУчета.КлючЗаписиДействующейУчетнойПолитики("НастройкиСистемыНалогообложения", Организация, Период);
	
КонецФункции

#Область ПерепроведениеДокументов

&НаКлиенте
Процедура ОбработкаВыбранногоДействияПерепроведениеДокументов()
	
	МоментНарушения = СведенияОНарушенииПоследовательности(Объект.Организация, КонецКвартала(Объект.Период), Ложь);
	Если МоментНарушения.Ссылка = Неопределено Тогда
		
		ПоказатьПредупреждение( , НСтр("ru = 'Перепроведение документов не требуется'"), , НСтр("ru = 'Закрытие месяца'"));
		Возврат;
		
	КонецЕсли;
	
	ПараметрыПерепроведения = Новый Структура;
	ПараметрыПерепроведения.Вставить("КлючНазначенияИспользования",         "ПомощникРасчетаНДС");
	ПараметрыПерепроведения.Вставить("Организация",                         Объект.Организация);
	ПараметрыПерепроведения.Вставить("ПериодРегистрации",                   КонецКвартала(Объект.Период));
	ПараметрыПерепроведения.Вставить("ЕстьОбособленныеПодразделения",       ЕстьОбособленныеПодразделения);
	ПараметрыПерепроведения.Вставить("ДокументНарушенияПоследовательности", МоментНарушения.Ссылка);
	ПараметрыПерепроведения.Вставить("ДатаНарушенияПоследовательности",     МоментНарушения.Дата);
		
	ОповещениеОВосстановлении = Новый ОписаниеОповещения("ПерепроведениеДокументовЗавершение", ЭтотОбъект);
		
	ОткрытьФорму("Обработка.ЗакрытиеМесяца.Форма.ПерепроведениеДокументов",
		ПараметрыПерепроведения, ЭтотОбъект, , ,
		"e1cib/app/Обработка.ПомощникРасчетаНДС",
		ОповещениеОВосстановлении,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Возврат;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СведенияОНарушенииПоследовательности(
	Знач Организация, Знач ПериодРегистрации, Знач ОценитьКоличествоДокументов)

	Результат = Новый Структура();
	Результат.Вставить("Ссылка", 				Неопределено);
	Результат.Вставить("Дата", 					Неопределено);
	Результат.Вставить("КоличествоДокументовДляПерепроведения", 0);
	Результат.Вставить("ЕстьПропущенныеДокументы", Ложь);
	
	МоментНарушения = РаботаСПоследовательностями.МоментНачалаПерепроведения(
						Организация, КонецМесяца(ПериодРегистрации));

	Если МоментНарушения <> Неопределено Тогда
		
		Результат.Ссылка = МоментНарушения.Ссылка;
		Результат.Дата   = МоментНарушения.Дата;
	
		Если ОценитьКоличествоДокументов 
			И МоментНарушения.Дата <= КонецМесяца(ПериодРегистрации) Тогда
			
			Результат.КоличествоДокументовДляПерепроведения =  
				РаботаСПоследовательностями.ОценкаКоличестваДокументовДляПерепроведения(
					Организация, 
					НачалоМесяца(ПериодРегистрации), 
					КонецМесяца(ПериодРегистрации), 
					МоментНарушения);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Результат.ЕстьПропущенныеДокументы = РаботаСПоследовательностями.ЕстьДокументыСПропущеннымПерепроведением(
											Организация, ПериодРегистрации, МоментНарушения);
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ПерепроведениеДокументовЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт

	Если Не ЗначениеЗаполнено(РезультатЗакрытия)
	 Или РезультатЗакрытия = КодВозвратаДиалога.Отмена Тогда
		ПроверитьПоследовательность();
		Возврат;
	КонецЕсли;
	
	Если РезультатЗакрытия.ВариантВосстановления = "ПеренестиГраницу" Тогда
		// Сдвинуть границу последовательности на конец текущего квартала.
		ПеренестиГраницу(КонецКвартала(Объект.Период), Истина);
		
	ИначеЕсли РезультатЗакрытия.ВариантВосстановления = "ПерепровестиКвартал" Тогда
		// Сдвинуть границу на конец предыдущего квартала и начать перепроведение текущего квартала.
		ПеренестиГраницу(НачалоКвартала(Объект.Период), Ложь);
		
	ИначеЕсли РезультатЗакрытия.ВариантВосстановления = "ПерепровестиДокументы" Тогда
		// Начать перепроведение.
		ПерепровестиДокументы(КонецКвартала(Объект.Период), РезультатЗакрытия.ДатаНарушенияПоследовательности);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПерепровестиДокументы(ТекущийМесяц, ДатаНачалаПерепроведения)
	
	Результат = ЗапуститьПерепроведениеДокументов(ТекущийМесяц);
	
	Если Не Результат.ЗаданиеВыполняется Тогда
		// Результат получен и уже обработан на стороне сервера
		ОбработатьЗавершениеДлительнойОперацииНаКлиенте(Результат);
		
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗаданияПерепроведение) Тогда
		
		// Результата еще нет, но есть шансы дождаться
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьЗавершениеДлительнойОперации", 1, Истина);
		
		// Если вызывается после переноса границы или актуализации, то форма может уже быть на экране.
		Если ТипЗнч(ФормаДлительнойОперации) <> Тип("УправляемаяФорма")
		 Или Не ФормаДлительнойОперации.Открыта() Тогда
		 
			ОписаниеПроцесса = ЗакрытиеМесяцаКлиент.ОписаниеПроцессаДлительнойОперации();
			ОписаниеПроцесса.ИспользоватьПерепроведениеДокументов = Истина;
			ОписаниеПроцесса.ИспользоватьАктуализациюРасчетовСКонтрагентами = Результат.АктуализироватьРасчетыСКонтрагентами;
			ОписаниеПроцесса.Организация = Объект.Организация;
			ОписаниеПроцесса.КоличествоОрганизаций = 1;
			ОписаниеПроцесса.Месяц = НачалоМесяца(ДатаНачалаПерепроведения);
			Если НачалоМесяца(ДатаНачалаПерепроведения) = ТекущийМесяц Тогда
				ОписаниеПроцесса.КоличествоМесяцев = 1;
			Иначе
				НачальныйМесяц = Месяц(ДатаНачалаПерепроведения);
				КонечныйМесяц  = Месяц(ТекущийМесяц);
				НачальныйГод   = Год(ДатаНачалаПерепроведения);
				КонечныйГод    = Год(ТекущийМесяц);
				
				// Рассчитаем количество полных месяцев между двумя датами (включая месяцы обоих дат).
				Если НачальныйМесяц > КонечныйМесяц Тогда
					ОписаниеПроцесса.КоличествоМесяцев =
						(КонечныйГод - НачальныйГод - 1) * 12 + (12 - НачальныйМесяц + КонечныйМесяц) + 1;
				Иначе
					ОписаниеПроцесса.КоличествоМесяцев = (КонечныйГод - НачальныйГод) * 12 + (КонечныйМесяц - НачальныйМесяц) + 1;
				КонецЕсли;

			КонецЕсли;
		
			ФормаДлительнойОперации =
				ЗакрытиеМесяцаКлиент.ОткрытьФормуДлительнойОперации(
					ЭтотОбъект, ИдентификаторЗаданияПерепроведение, ОписаниеПроцесса);
			
		Иначе // форма открыта, нужно лишь отработать запуск нового фонового задания 
			
			ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗаданияПерепроведение;
			ФормаДлительнойОперации.ИспользоватьПереносГраницы = Ложь;
			
			ПараметрыФормыИндикации = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыСообщенийПрогресса();
			ПараметрыФормыИндикации.КонтрольРанееЗапущенных = Истина;
			ФормаДлительнойОперации.ОбновитьСостояниеВыполнения(ПараметрыФормыИндикации, "");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьПерепроведениеДокументов(ТекущийМесяц)

	// Обязательно возвращаем признак активности задания и список дат перепроведения.
	// Ниже Результат может дополняться иной информацией о выполненных действиях.
	Результат = Новый Структура;
	Результат.Вставить("ЗаданиеВыполняется", Ложь);
	Результат.Вставить("АктуализироватьРасчетыСКонтрагентами", Ложь);
	
	// Возможно, что фоновое задание было запущено раньше, 
	// пользователь дал команду его отменить, однако задание не отменено.
	// В таком случае не следует запускать задание повторно - следует дождаться его выполнения.
	// Мы можем отследить ситуацию только, если все это происходит в одной форме.
	// Потому что подсистема ДлительныеОперации не умеет устанавливать ключ фонового задания.
	Если ЗакрытиеМесяца.ЗаданиеЕщеВыполняется(ИдентификаторЗаданияПерепроведение) Тогда
		Результат.ЗаданиеВыполняется = Истина; // Надо ждать
		Возврат Результат;
	КонецЕсли;

	ИдентификаторЗаданияПерепроведение = Неопределено;

	МоментНарушения = РаботаСПоследовательностями.МоментНарушенияПоследовательности(
		Объект.Организация, КонецМесяца(ТекущийМесяц));
	
	МоментАктуальностиОтложенныхРасчетов = УчетВзаиморасчетовОтложенноеПроведение.МоментАктуальностиОтложенныхРасчетов(
		Объект.Организация,
		КонецМесяца(ТекущийМесяц));

	// Передадим на клиент, что требуется актуализация расчетов с контрагентами.
	Результат.АктуализироватьРасчетыСКонтрагентами = МоментАктуальностиОтложенныхРасчетов <> Неопределено;
		
	Если Не ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Объект.Организация, ТекущийМесяц) Тогда
		// В текущем месяце отложенное проведение по организации не используется,
		// если из-за использования в прошлых месяцах остались неактуализированные расчеты, то начинаем с них.
		Если МоментНарушения = Неопределено И МоментАктуальностиОтложенныхРасчетов <> Неопределено Тогда
			МоментНарушения = МоментАктуальностиОтложенныхРасчетов;
		КонецЕсли;
	КонецЕсли;

	Если МоментНарушения = Неопределено И МоментАктуальностиОтложенныхРасчетов = Неопределено Тогда
		// Последовательность не нарушена. Восстанавливать ее не требуется.
		Результат.Вставить("ПоследовательностьВосстановлена", Истина);
		
		// Обозначим состояние последовательности на форме как ненарушенное.
		ПроверитьПоследовательность();
		
		Возврат Результат;
	КонецЕсли;
	
	// Подготовка параметров для группового перепроведения
	ПараметрыПерепроведения                              = 
		Обработки.ГрупповоеПерепроведениеДокументов.ПараметрыПерепроведения();
	ПараметрыПерепроведения.Организация                  = Объект.Организация;
	ПараметрыПерепроведения.УникальныйИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыПерепроведения.МоментНачала                 = МоментНарушения;
	ПараметрыПерепроведения.ДатаОкончания                = КонецМесяца(ТекущийМесяц);
	ПараметрыПерепроведения.ЭтоПомощникПоУчетуНДС        = Истина;
	ПараметрыПерепроведения.СообщатьПрогрессВыполнения   = Истина;
	ПараметрыПерепроведения.МоментНачалаАктуализацииРасчетовСКонтрагентами = МоментАктуальностиОтложенныхРасчетов;
	
	РезультатПерепроведения =
		Обработки.ГрупповоеПерепроведениеДокументов.ЗапуститьПерепроведение(ПараметрыПерепроведения);
	
	Если РезультатПерепроведения = Неопределено Тогда
		Результат.Вставить("ПоказатьПредупреждение",
			НСтр("ru = 'Перепроведение уже выполняется другим пользователем либо открыта для редактирования форма организации.'"));
		Возврат Результат;
	Иначе
		Для каждого ЭлементРезультата Из РезультатПерепроведения Цикл
			Результат.Вставить(ЭлементРезультата.Ключ, ЭлементРезультата.Значение);
		КонецЦикла;
	КонецЕсли;
		
	АдресХранилища = Результат.АдресХранилища;
	ИдентификаторЗаданияПерепроведение = Результат.ИдентификаторЗадания;
		
	Если Не Результат.ЗаданиеВыполнено Тогда
		Результат.ЗаданиеВыполняется = Истина; // Надо ждать
		Возврат Результат;
	Иначе
		// Задание выполнено.
		// Результат выполнения возвращен через хранилище значения.
		// Загрузим его в форму и передадим данные на клиент.
		РезультатПерепроведения = ОбновитьДанныеПоРезультатуДлительнойОперации();
		Для каждого ЭлементРезультата Из РезультатПерепроведения Цикл
			Результат.Вставить(ЭлементРезультата.Ключ, ЭлементРезультата.Значение);
		КонецЦикла;
		Возврат Результат;
	
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПеренестиГраницу(ТекущийМесяц, СамостоятельнаяОперация)
	
	Результат = ЗапуститьПереносГраницыАктуальности(ТекущийМесяц, СамостоятельнаяОперация);
	
	Если ЗначениеЗаполнено(Результат) И Результат.ЗаданиеВыполнено Тогда
		// Результат получен и уже обработан на стороне сервера.
		ОбработатьЗавершениеДлительнойОперацииНаКлиенте(Результат);
		
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗаданияПерепроведение) Тогда
		
		// Результата еще нет, но есть шансы дождаться
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		Если СамостоятельнаяОперация Тогда
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьЗавершениеПереносаГраницы", 1, Истина);
		Иначе
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьЗавершениеПереносаГраницыВРамкахПроведения", 1, Истина);
		КонецЕсли;
		
		ОписаниеПроцесса = ЗакрытиеМесяцаКлиент.ОписаниеПроцессаДлительнойОперации();
		ОписаниеПроцесса.Месяц 						          = ТекущийМесяц;
		ОписаниеПроцесса.Организация 				          = Объект.Организация;
		ОписаниеПроцесса.ИспользоватьПереносГраницы           = Истина;
		ОписаниеПроцесса.ИспользоватьПерепроведениеДокументов = Не СамостоятельнаяОперация;
		ОписаниеПроцесса.ИспользоватьАктуализациюРасчетовСКонтрагентами
			= Не СамостоятельнаяОперация И Результат.АктуализироватьРасчетыСКонтрагентами;

		ФормаДлительнойОперации = 
			ЗакрытиеМесяцаКлиент.ОткрытьФормуДлительнойОперации(
				ЭтотОбъект,
				ИдентификаторЗаданияПерепроведение,
				ОписаниеПроцесса);

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьПереносГраницыАктуальности(ТекущийМесяц, СамостоятельнаяОперация)
	
	Результат = Новый Структура;
	Результат.Вставить("ЗаданиеВыполнено", Ложь);
	Результат.Вставить("АктуализироватьРасчетыСКонтрагентами", Истина);
	
	// Возможно, что фоновое задание было запущено раньше,
	// пользователь дал команду его отменить, однако задание не отменено.
	// В таком случае не следует запускать задание повторно - 
	// следует дождаться его выполнения. Мы можем отследить ситуацию
	// только, если все это происходит в одной форме.
	// Потому что подсистема ДлительныеОперации не умеет устанавливать ключ
	// фонового задания.
	Если ЗакрытиеМесяца.ЗаданиеЕщеВыполняется(ИдентификаторЗаданияПерепроведение) Тогда
		Возврат Результат; // надо ждать
	КонецЕсли;
	ИдентификаторЗаданияПерепроведение = Неопределено;
	
	АктуализироватьРасчетыСКонтрагентами = Ложь;
	Если Не СамостоятельнаяОперация Тогда // определим необходимость показа отложенных расчетов

		МоментАктуальностиОтложенныхРасчетов = УчетВзаиморасчетовОтложенноеПроведение.МоментАктуальностиОтложенныхРасчетов(
			Объект.Организация, КонецМесяца(ТекущийМесяц));
		АктуализироватьРасчетыСКонтрагентами = МоментАктуальностиОтложенныхРасчетов <> Неопределено;
		
	КонецЕсли;
	
	// Вспомогательная информация, передаваемая в алгоритм переноса границы,
	// которая будет возвращена алгоритмом после завершения в исходном виде.
	// Используется для возможности автоматического запуска следующей операции группового перепроведения.
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("СамостоятельнаяОперация", СамостоятельнаяОперация);
	ДополнительныеПараметры.Вставить("ТекущийМесяц",            ТекущийМесяц);
	ДополнительныеПараметры.Вставить("ВидОперации",
		"ПереносГраницыАктуальности" + ?(СамостоятельнаяОперация, "", "ПерепровестиДокументы"));
	
	ПараметрыПереноса = Новый Структура;
	ПараметрыПереноса.Вставить("Период",
		?(СамостоятельнаяОперация, ТекущийМесяц, ДобавитьМесяц(ТекущийМесяц, -1)));
	ПараметрыПереноса.Вставить("Организация", Объект.Организация);
	ПараметрыПереноса.Вставить("АдресХранилищаСОшибками",
		ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор));
	ПараметрыПереноса.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
	
	НаименованиеЗадания = ЗакрытиеМесяцаКлиентСервер.ИмяФоновогоЗаданияПереносаГраницы();
	Результат = ЗакрытиеМесяца.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Обработки.ЗакрытиеМесяца.ПеренестиГраницуАктуальности",
		ПараметрыПереноса,
		НаименованиеЗадания);
		
	АдресХранилища = Результат.АдресХранилища;
	ИдентификаторЗаданияПерепроведение = Результат.ИдентификаторЗадания;
	
	Если Не Результат.ЗаданиеВыполнено Тогда
		Результат.Вставить("АктуализироватьРасчетыСКонтрагентами", АктуализироватьРасчетыСКонтрагентами);
		Возврат Результат; // надо ждать
	КонецЕсли;
	
	// Задание выполнено.
	// Результат выполнения возвращен через хранилище значения.
	// Загрузим его в форму и передадим данные на клиент.
	Результат = ОбновитьДанныеПоРезультатуДлительнойОперации();
	Если ЗначениеЗаполнено(Результат) Тогда
		Результат.Вставить("АктуализироватьРасчетыСКонтрагентами", АктуализироватьРасчетыСКонтрагентами);
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьЗавершениеДлительнойОперации()

	ПроверитьЗавершениеДлительнойОперации("Подключаемый_ПроверитьЗавершениеДлительнойОперации", Истина);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьЗавершениеПереносаГраницы()

	ПроверитьЗавершениеДлительнойОперации("Подключаемый_ПроверитьЗавершениеПереносаГраницы", Истина);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьЗавершениеПереносаГраницыВРамкахПроведения()

	ПроверитьЗавершениеДлительнойОперации("Подключаемый_ПроверитьЗавершениеПереносаГраницыВРамкахПроведения", Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗавершениеДлительнойОперации(ИмяОбработчикаОжидания, ЗакрытьФормуДлительнойОперации)
	
	Попытка
		ЕстьПрогрессОперации = ЗакрытиеМесяцаКлиент.ВыполненШагДлительнойОперации(ФормаДлительнойОперации);
		Если ЕстьПрогрессОперации = Неопределено Тогда
			
			Если ЗакрытьФормуДлительнойОперации Тогда
				ЗакрытиеМесяцаКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			КонецЕсли;
			
			Результат = ОбновитьДанныеПоРезультатуДлительнойОперации();
			ОбработатьЗавершениеДлительнойОперацииНаКлиенте(Результат);
			
		Иначе
			
			Если ЕстьПрогрессОперации Тогда
				ЗакрытиеМесяцаКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			КонецЕсли;
			
			ПодключитьОбработчикОжидания(ИмяОбработчикаОжидания, ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);

		КонецЕсли;
	Исключение
		ЗакрытиеМесяцаКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьДанныеПоРезультатуДлительнойОперации()
	
	// Результат закрытия подготовлен в 
	// Обработки.ГрупповоеПерепроведениеДокументов.ПерепроведениеДокументов()
	// Сообщения об ошибках могут храниться в фоновом задании
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатДляКлиента = Новый Структура;
	
	Если Результат.Свойство("ПоследовательностьВосстановлена")  Тогда
	
		РезультатДляКлиента.Вставить("ПоследовательностьВосстановлена", Результат.ПоследовательностьВосстановлена);
		
		Если Результат.Свойство("ВывестиИнформациюУведомлений") Тогда
			РезультатДляКлиента.Вставить("ВывестиИнформациюУведомлений", Результат.ВывестиИнформациюУведомлений);
		КонецЕсли;
		
		Если Результат.Свойство("АдресХранилищаСОшибками") Тогда
			РезультатДляКлиента.Вставить("АдресХранилищаСОшибками", Результат.АдресХранилищаСОшибками);
		КонецЕсли;
		
		Если Результат.Свойство("ДополнительныеПараметры") И ЗначениеЗаполнено(Результат.ДополнительныеПараметры) Тогда
			РезультатДляКлиента.Вставить("ДополнительныеПараметры", Результат.ДополнительныеПараметры);
		Иначе
			РезультатДляКлиента.Вставить("ДополнительныеПараметры", Новый Структура);
		КонецЕсли;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ОбновитьСостоянияИЭлементыРегламентныхОпераций();
	
	Возврат РезультатДляКлиента;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьЗавершениеДлительнойОперацииНаКлиенте(Результат)
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// "Результат" - структура, содержит ключи
	// - ПоследовательностьВосстановлена     - (опционально)
	// - ПоказатьПредупреждение - (опционально) - текст предупреждения

	Если Результат.Свойство("ПоследовательностьВосстановлена") Тогда
		ОбработатьРезультатПерепроведенияДокументовНаКлиенте(Результат);
	КонецЕсли;

	Если Результат.Свойство("ПоказатьПредупреждение") Тогда
		ПоказатьПредупреждение(, Результат.ПоказатьПредупреждение);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатПерепроведенияДокументовНаКлиенте(РезультатПерепроведения)

	// Если выполняется в рамках общего закрытия месяца, то запустим следующие операции.
	ПоследовательностьВосстановлена	= Ложь;
	ВывестиИнформациюУведомлений    = Ложь;
	АдресХранилищаСОшибками 		= "";
	СамостоятельнаяОперация 		= Истина;
	ВидОперации                     = Неопределено;
	ТекущийМесяц                    = '00010101';
	
	Если ТипЗнч(РезультатПерепроведения) = Тип("Структура") Тогда
		
		Если РезультатПерепроведения.Свойство("ПоследовательностьВосстановлена") Тогда
			ПоследовательностьВосстановлена = РезультатПерепроведения.ПоследовательностьВосстановлена;
		КонецЕсли;

		Если РезультатПерепроведения.Свойство("ВывестиИнформациюУведомлений") Тогда
			ВывестиИнформациюУведомлений = РезультатПерепроведения.ВывестиИнформациюУведомлений;
		КонецЕсли;
		
		Если РезультатПерепроведения.Свойство("АдресХранилищаСОшибками") Тогда
			АдресХранилищаСОшибками = РезультатПерепроведения.АдресХранилищаСОшибками;
		КонецЕсли;
		
		Если РезультатПерепроведения.Свойство("ДополнительныеПараметры") Тогда
		
			Если РезультатПерепроведения.ДополнительныеПараметры.Свойство("СамостоятельнаяОперация") Тогда
				СамостоятельнаяОперация = РезультатПерепроведения.ДополнительныеПараметры.СамостоятельнаяОперация;
			КонецЕсли;
				
			Если РезультатПерепроведения.ДополнительныеПараметры.Свойство("ВидОперации") Тогда
				ВидОперации = РезультатПерепроведения.ДополнительныеПараметры.ВидОперации;
			КонецЕсли;
			
			Если РезультатПерепроведения.ДополнительныеПараметры.Свойство("ТекущийМесяц") Тогда
				ТекущийМесяц = РезультатПерепроведения.ДополнительныеПараметры.ТекущийМесяц;
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;

	Если ПоследовательностьВосстановлена И НЕ СамостоятельнаяОперация Тогда
		
		Если СтрНачинаетсяС(ВидОперации, "ПереносГраницыАктуальности") Тогда // запускаем перепроведение текущего месяца

			ПерепровестиДокументы(КонецКвартала(Объект.Период), НачалоКвартала(Объект.Период));
			
		КонецЕсли;
		
	Иначе
		
		// Закром форму длительной операции, она больше не требуется.
		ЗакрытиеМесяцаКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		
		// Отображаем отчет с ошибками перепроведения.
		Если ВывестиИнформациюУведомлений Или НЕ ПоследовательностьВосстановлена Тогда
			ОбщегоНазначенияБПКлиент.ОткрытьФормуОшибокПерепроведения(ЭтотОбъект, АдресХранилищаСОшибками);
		КонецЕсли;
		
	КонецЕсли;
	
	ИдентификаторЗаданияПерепроведение = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостоянияИЭлементыРегламентныхОпераций()
	
	РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.ОпределитьНеобходимостьКонтроляОпераций(
		Объект.Организация, Объект.Период, ПолноеДеревоОпераций);
	ТребуетсяПерепроведение = (РаботаСПоследовательностями.МоментНачалаПерепроведения(
		Объект.Организация, КонецКвартала(Объект.Период)) <> Неопределено);
	ОбновитьЭлементыРегламентныхОпераций();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоРегламентированныйОтчетНДС(Знач Ссылка)
	
	Если Не ЗначениеЗаполнено(Ссылка) Или ТипЗнч(Ссылка) <> Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИсточникОтчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ИсточникОтчета");
	
	Возврат ИсточникОтчета = "РегламентированныйОтчетНДС";
	
КонецФункции

#КонецОбласти

#Область ПереходНаРаздельныйУчетНДСНаСчете19

&НаКлиенте
Процедура ОбработкаВыбранногоДействияПереходНаРаздельныйУчетНДСНаСчете19()
	
	СписокКоманд = Новый СписокЗначений;
	СписокКоманд.Добавить("ВыполнитьОперацию", НСтр("ru = 'Выполнить операцию'"),, БиблиотекаКартинок.Провести);
	СписокКоманд.Добавить("ОтменитьОперацию",  НСтр("ru = 'Отменить операцию'"),, БиблиотекаКартинок.ОтменаПроведения);
	
	ОповещениеВыбораИзМеню =
		Новый ОписаниеОповещения("ДействияПоПереходуНаРаздельныйУчетНДСНаСчете19Завершение", ЭтотОбъект);
	ПоказатьВыборИзМеню(ОповещениеВыбораИзМеню, СписокКоманд, Элементы.ПереходНаРаздельныйУчетНДСНаСчете19);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПоПереходуНаРаздельныйУчетНДСНаСчете19Завершение(Команда, Параметры) Экспорт
	
	Если Команда <> Неопределено Тогда
		
		Если Команда.Значение = "ВыполнитьОперацию" Тогда
			
			// Создание документов по переходу
			ВыполнитьДействияПоПереходуНаРаздельныйУчетНДСНаСчете19НаСервере();
			
		Иначе
			// Удаление документов по переходу
			ОтменитьДействияПоПереходуНаРаздельныйУчетНДСНаСчете19НаСервере();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьДействияПоПереходуНаРаздельныйУчетНДСНаСчете19НаСервере()
	
	СообщенияОбОшибках = Неопределено;
	Обработки.ПомощникРасчетаНДС.ОтменитьДействияПоПереходуНаРаздельныйУчетНДСНаСчете19(
		Объект.Организация, Объект.Период, СообщенияОбОшибках);
	Если СообщенияОбОшибках <> Неопределено Тогда
		Для каждого СообщениеОбОшибке Из СообщенияОбОшибках Цикл
			СообщениеОбОшибке.ПутьКДанным = "Объект";
			СообщениеОбОшибке.Сообщить();
		КонецЦикла;
	Иначе
		Обработки.ПомощникРасчетаНДС.ВыполнитьДействияПоПереходуНаРаздельныйУчетНДСНаСчете19(
			Объект.Организация, Объект.Период);
	КонецЕсли;
	
	ОбновитьСостоянияИЭлементыРегламентныхОпераций();

КонецПроцедуры

&НаСервере
Процедура ОтменитьДействияПоПереходуНаРаздельныйУчетНДСНаСчете19НаСервере()
	
	СообщенияОбОшибках = Неопределено;
	Обработки.ПомощникРасчетаНДС.ОтменитьДействияПоПереходуНаРаздельныйУчетНДСНаСчете19(
		Объект.Организация, Объект.Период, СообщенияОбОшибках);
	Если СообщенияОбОшибках <> Неопределено Тогда
		Для каждого СообщениеОбОшибке Из СообщенияОбОшибках Цикл
			СообщениеОбОшибке.ПутьКДанным = "Объект";
			СообщениеОбОшибке.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьСостоянияИЭлементыРегламентныхОпераций();
	
КонецПроцедуры

#КонецОбласти

#Область ОтключениеРаздельногоУчетаНДС

&НаКлиенте
Процедура ОбработкаВыбранногоДействияОтключениеРаздельногоУчетаНДС()
	
	СписокКоманд = Новый СписокЗначений;
	СписокКоманд.Добавить("ВыполнитьОперацию", НСтр("ru = 'Выполнить операцию'"),, БиблиотекаКартинок.Провести);
	СписокКоманд.Добавить("ОтменитьОперацию",  НСтр("ru = 'Отменить операцию'"),, БиблиотекаКартинок.ОтменаПроведения);
	
	ОповещениеВыбораИзМеню = Новый ОписаниеОповещения("ДействияПоОтключениюРаздельногоУчетаНДСЗавершение", ЭтотОбъект);
	ПоказатьВыборИзМеню(ОповещениеВыбораИзМеню, СписокКоманд, Элементы.ОтключениеРаздельногоУчетаНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПоОтключениюРаздельногоУчетаНДСЗавершение(Команда, Параметры) Экспорт
	
	Если Команда <> Неопределено Тогда
		Если Команда.Значение = "ВыполнитьОперацию" Тогда
			// Создание документов для списания остатков
			ВыполнитьДействияПоОтключениюРаздельногоУчетаНДСНаСервере();
		Иначе
			// Удаление документов по списанию остатков
			ОтменитьДействияПоОтключениюРаздельногоУчетаНДСНаСервере();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьДействияПоОтключениюРаздельногоУчетаНДСНаСервере()
	
	СообщенияОбОшибках = Неопределено;
	Обработки.ПомощникРасчетаНДС.ОтменитьДействияПоОтключениюРаздельногоУчетаНДС(
		Объект.Организация, Объект.Период, СообщенияОбОшибках);
	Если СообщенияОбОшибках <> Неопределено Тогда
		Для каждого СообщениеОбОшибке Из СообщенияОбОшибках Цикл
			СообщениеОбОшибке.ПутьКДанным = "Объект";
			СообщениеОбОшибке.Сообщить();
		КонецЦикла;
	Иначе
		Обработки.ПомощникРасчетаНДС.ВыполнитьДействияПоОтключениюРаздельногоУчетаНДС(
			Объект.Организация, Объект.Период);
	КонецЕсли;
		
	ОбновитьСостоянияИЭлементыРегламентныхОпераций();
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьДействияПоОтключениюРаздельногоУчетаНДСНаСервере()
	
	СообщенияОбОшибках = Неопределено;
	Обработки.ПомощникРасчетаНДС.ОтменитьДействияПоОтключениюРаздельногоУчетаНДС(
		Объект.Организация, Объект.Период, СообщенияОбОшибках);
	Если СообщенияОбОшибках <> Неопределено Тогда
		Для каждого СообщениеОбОшибке Из СообщенияОбОшибках Цикл
			СообщениеОбОшибке.ПутьКДанным = "Объект";
			СообщениеОбОшибке.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьСостоянияИЭлементыРегламентныхОпераций();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаНомеровСчетовФактур

&НаКлиенте
Процедура ОбработкаВыбранногоДействияОбработкаНомеровСчетовФактур()
	
	СписокКоманд = Новый СписокЗначений;
	СписокКоманд.Добавить("ВыполнитьОперацию", НСтр("ru = 'Выполнить операцию'"),, БиблиотекаКартинок.Провести);
	СписокКоманд.Добавить("ПометитьКакВыполненную", НСтр("ru = 'Пометить операцию как выполненную'"),,
		БиблиотекаКартинок.Провести);
	
	ОповещениеВыбораИзМеню =
		Новый ОписаниеОповещения("ОбработкаВыбранногоДействияОбработкаНомеровСчетовФактурЗавершение", ЭтотОбъект);
	ПоказатьВыборИзМеню(ОповещениеВыбораИзМеню, СписокКоманд, Элементы.ОбработкаНомеровСчетовФактур);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбранногоДействияОбработкаНомеровСчетовФактурЗавершение(Команда, Параметры) Экспорт
	
	Если Команда <> Неопределено Тогда
		ВыполнитьОбработкуНомеровСчетовФактур(Команда.Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОбработкуНомеровСчетовФактур(Значение)
	
	Если Значение = "ВыполнитьОперацию" Тогда
		Обработки.ПомощникРасчетаНДС.ВыполнитьОбработкуНомеровСчетовФактур(Объект.Организация, Объект.Период);
	КонецЕсли;
	
	РегламентнаяОперация = Перечисления.РегламентныеОперации.ОбработкаНомеровСчетовФактур;
	РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.ЗафиксироватьФактВыполненияРегламентнойОперации(
		Объект.Период, Объект.Организация, Неопределено, РегламентнаяОперация, Истина);
		
	ОбновитьСостоянияИЭлементыРегламентныхОпераций();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ОтменитьФоновыеЗаданияНаСервере();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
