
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПроцедурыИФункцииОбщегоНазначения

// Получает настройки графиков либо определяет их значением по умолчанию.
Процедура Графики_ПриСозданииНаСервере(ИмяОбъекта, ВыводитьГрафики) Экспорт
	
	НастройкиГрафиков = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить(ИмяОбъекта , "НастройкиГрафиков");
	
	НеобходимоОпределитьНастройкиПоУмолчанию = Истина;
	
	// Проверяем, есть ли в структуре настроек не пустой список типов диаграмм. Если список пустой, переопределяем настройки
	// графиков настройками по умолчанию. Это позволит избежать ошибочных ситуаций, когда настройки были определены
	// пустой структурой.
	Если ТипЗнч(НастройкиГрафиков) = Тип("Структура") 
		И НастройкиГрафиков.Свойство("СписокТиповДиаграмм")
		И НастройкиГрафиков.СписокТиповДиаграмм.Количество() > 0 Тогда
			НеобходимоОпределитьНастройкиПоУмолчанию = Ложь;
	КонецЕсли;
	
	Если НеобходимоОпределитьНастройкиПоУмолчанию Тогда
		
		ВыводитьГрафики = Истина;
		
		СписокТиповДиаграмм = Новый СписокЗначений;
		СписокТиповДиаграмм.Добавить("Гистограмма",                      "Гистограмма", Истина); // Пометка соответствует значению по умолчанию.
		СписокТиповДиаграмм.Добавить("ГистограммаГоризонтальная",        "Гистограмма горизонтальная");
		СписокТиповДиаграмм.Добавить("ГистограммаНормированная",         "Гистограмма нормированная");
		СписокТиповДиаграмм.Добавить("ГистограммаОбъемная",              "Гистограмма объемная");
		СписокТиповДиаграмм.Добавить("ГистограммаСНакоплением",          "Гистограмма с накоплением");
		СписокТиповДиаграмм.Добавить("ГистограммаСНакоплениемОбъемная",  "Гистограмма с накоплением объемная");
		СписокТиповДиаграмм.Добавить("ГистограммаНормированнаяОбъемная", "Гистограмма нормированная объемная");
		СписокТиповДиаграмм.Добавить("График",                           "График");
		СписокТиповДиаграмм.Добавить("ГрафикСОбластями",                 "График с областями");
		СписокТиповДиаграмм.Добавить("ГрафикСОбластямиИНакоплением",     "График с областями и накоплением");
		СписокТиповДиаграмм.Добавить("ГрафикСОбластямиНормированный",    "График с областями нормированный");
		СписокТиповДиаграмм.Добавить("Круговая",                         "Круговая диаграмма");
		СписокТиповДиаграмм.Добавить("КруговаяОбъемная",                 "Круговая объемная диаграмма");
		
		// Типы диаграмм графиков по умолчанию.
		СоответствиеТиповДиаграмм = Новый СписокЗначений;
		СоответствиеТиповДиаграмм.Добавить("НачисленияИОплаты",          "Гистограмма");
		СоответствиеТиповДиаграмм.Добавить("НачисленияИОплатыПени",      "Гистограмма");
		СоответствиеТиповДиаграмм.Добавить("ПроцентСобираемости",        "Гистограмма");
		СоответствиеТиповДиаграмм.Добавить("ПроцентСобираемостиПоПени",  "Гистограмма");
		СоответствиеТиповДиаграмм.Добавить("НачисленияПоЛьготам",        "Гистограмма");
		СоответствиеТиповДиаграмм.Добавить("ЗадолженностьПоМесяцам",     "Гистограмма");
		СоответствиеТиповДиаграмм.Добавить("РасходПоПУ",                 "Гистограмма");
		
		// Структура настроек графиков.
		
		НастройкиГрафиков = Новый Структура;
		
		НастройкиГрафиков.Вставить("СоответствиеТиповДиаграмм",           СоответствиеТиповДиаграмм);
		НастройкиГрафиков.Вставить("СписокТиповДиаграмм",                 СписокТиповДиаграмм);
		НастройкиГрафиков.Вставить("ВыводитьГрафики",                     ВыводитьГрафики);
		НастройкиГрафиков.Вставить("УслугаПУ",                            ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка"));
		НастройкиГрафиков.Вставить("МетодВыводаУслугВДиаграммах",         0);
		
		УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить(ИмяОбъекта , "НастройкиГрафиков", НастройкиГрафиков);
		
	Иначе
		
		НастройкиГрафиков.Свойство("ВыводитьГрафики", ВыводитьГрафики);
		
	КонецЕсли;
	
КонецПроцедуры // Графики_ПриСозданииНаСервере()

// Заполняет табличный документ, получаемый из временного хранилища.
Процедура Графики_ОбновитьГрафикиНаСервере(ТабличныйДокумент, ВходящиеПараметры, АдресВоВремХранилище = Неопределено) Экспорт
	
	НастройкиГрафиков = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить(ВходящиеПараметры.ИмяОбъекта , "НастройкиГрафиков");
	
	Если ТипЗнч(НастройкиГрафиков) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Графики_ДополнитьНастройки(НастройкиГрафиков, ВходящиеПараметры);
	
	Макет = Обработки.УПЖКХ_ФормированиеАналитическихГрафиковПоДаннымУчета.ПолучитьМакет("Макет_Графики");
	
	// Область основного заголовка.
	ОбластьШапка = Макет.ПолучитьОбласть("ОбластьШапка");
	ОбластьШапка.Параметры.Заполнить(НастройкиГрафиков);
	Если ВходящиеПараметры.ИмяОбластиВыводаГрафика = "ГруппаГрафикРасходПоПУ" Тогда
		ОбластьШапка.Области.ОбластьШапка.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	КонецЕсли;
	ТабличныйДокумент.Вывести(ОбластьШапка);
	
	Если НЕ ВходящиеПараметры.ИмяОбластиВыводаГрафика = "СтрКарточкаРасчетов"
	   И НЕ ВходящиеПараметры.ИмяОбластиВыводаГрафика = "Счетчики" Тогда
		Область = ТабличныйДокумент.Область(1, 1, 1, 18);
		Область.Объединить();
	КонецЕсли;
	
	ТаблицаИсполняемыхМетодов = ПолучитьТаблицуИсполняемыхМетодов(ВходящиеПараметры.ИмяОбластиВыводаГрафика);
	
	Для Каждого СтрокаМетода Из ТаблицаИсполняемыхМетодов Цикл
		
		Попытка
			Выполнить(СтрокаМетода.ИмяМетода + "(ТабличныйДокумент, Макет, НастройкиГрафиков, """ + СтрокаМетода.ИмяПараметра + """)");
		Исключение
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры // Графики_ОбновитьГрафикиНаСервере()

// Возвращает значение параметра "МетодВыводаУслугВДиаграммах" из настроек графиков.
Функция Графики_ПолучитьЗначениеМетодаВыводаУслугВДиаграммах(ИмяОбъекта) Экспорт
	
	НастройкиГрафиков = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить(ИмяОбъекта , "НастройкиГрафиков");
	
	Если ТипЗнч(НастройкиГрафиков) = Тип("Структура") Тогда
		Возврат НастройкиГрафиков.МетодВыводаУслугВДиаграммах;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции // Графики_ПолучитьЗначниеМетодаВыводаУслугВДиаграммах()

// Процедура по имени страницы определяет таблицу методов и параметров, которые необходимо выполнить для текущего
// графика.
//
Функция ПолучитьТаблицуИсполняемыхМетодов(ИмяОбластиВыводаГрафика)
	
	// Задаем массивы параметров, выполняемых для конкретного вида страницы.
	МассивИменПараметровВзаиморасчеты = Новый Массив;
	МассивИменПараметровВзаиморасчеты.Добавить("НачисленияИОплаты");
	МассивИменПараметровВзаиморасчеты.Добавить("ПроцентСобираемости");
	МассивИменПараметровВзаиморасчеты.Добавить("НачисленияИОплатыПени");
	МассивИменПараметровВзаиморасчеты.Добавить("ПроцентСобираемостиПоПени");
	МассивИменПараметровВзаиморасчеты.Добавить("ЗадолженностьПоМесяцам");
	
	МассивИменПараметровПриборыУчета = Новый Массив;
	МассивИменПараметровПриборыУчета.Добавить("РасходПоПУ");
	
	МассивИменПараметровЛьготы = Новый Массив;
	МассивИменПараметровЛьготы.Добавить("НачисленияПоЛьготам");
	
	// Задаем соответствия имен областей вывода графиков и массивов параметров.
	СоответствиеПараметровИИменОбластей = Новый Соответствие;
	
	СоответствиеПараметровИИменОбластей.Вставить("СтраницаВзаиморасчеты", МассивИменПараметровВзаиморасчеты);
	СоответствиеПараметровИИменОбластей.Вставить("ОбщаяИнформация",       МассивИменПараметровВзаиморасчеты);
	СоответствиеПараметровИИменОбластей.Вставить("СтрКарточкаРасчетов",   МассивИменПараметровВзаиморасчеты);
	
	СоответствиеПараметровИИменОбластей.Вставить("СтраницаСчетчики",       МассивИменПараметровПриборыУчета);
	СоответствиеПараметровИИменОбластей.Вставить("Счетчики",               МассивИменПараметровПриборыУчета);
	СоответствиеПараметровИИменОбластей.Вставить("ГруппаГрафикРасходПоПУ", МассивИменПараметровПриборыУчета);
	
	СоответствиеПараметровИИменОбластей.Вставить("стрЛьготники",          МассивИменПараметровЛьготы);
	
	// Задаем соответствие имен процедур и имен областей вывода графико.
	СоответствиеМетодовИИменОбластей = Новый Соответствие;
	
	СоответствиеМетодовИИменОбластей.Вставить("СтраницаВзаиморасчеты", "Графики_ЗаполнитьОбластьДиаграммы");
	СоответствиеМетодовИИменОбластей.Вставить("ОбщаяИнформация",       "Графики_ЗаполнитьОбластьДиаграммы");
	СоответствиеМетодовИИменОбластей.Вставить("СтрКарточкаРасчетов",   "Графики_ЗаполнитьОбластьДиаграммы");
	
	СоответствиеМетодовИИменОбластей.Вставить("СтраницаСчетчики",       "Графики_ЗаполнитьОбластьДиаграммыРасходПоПУ");
	СоответствиеМетодовИИменОбластей.Вставить("Счетчики",               "Графики_ЗаполнитьОбластьДиаграммыРасходПоПУ");
	СоответствиеМетодовИИменОбластей.Вставить("ГруппаГрафикРасходПоПУ", "Графики_ЗаполнитьОбластьДиаграммыРасходПоПУ");
	
	СоответствиеМетодовИИменОбластей.Вставить("стрЛьготники",          "Графики_ЗаполнитьОбластьДиаграммыНачисленияПоЛьготам");
	
	// В зависимости от имени области вывода графика формируем таблицу значений.
	ТаблицаИсполняемыхМетодов = Новый ТаблицаЗначений;
	ТаблицаИсполняемыхМетодов.Колонки.Добавить("ИмяМетода",    УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(100));
	ТаблицаИсполняемыхМетодов.Колонки.Добавить("ИмяПараметра", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьОписаниеТиповСтроки(100));
	
	ТекМетод = СоответствиеМетодовИИменОбластей.Получить(ИмяОбластиВыводаГрафика);
	ТекМассивИменПараметров = СоответствиеПараметровИИменОбластей.Получить(ИмяОбластиВыводаГрафика);
	
	Для Каждого Элемент Из ТекМассивИменПараметров Цикл
		НоваяСтрока              = ТаблицаИсполняемыхМетодов.Добавить();
		НоваяСтрока.ИмяМетода    = ТекМетод;
		НоваяСтрока.ИмяПараметра = Элемент;
	КонецЦикла;
	
	Возврат ТаблицаИсполняемыхМетодов;
	
КонецФункции // ПолучитьТаблицуИсполняемыхМетодов()

// Процедура дополняет настройки графиков дополнительными параметрами.
Процедура Графики_ДополнитьНастройки(НастройкиГрафиков, ВходящиеПараметры)
	
	СтруктураПараметров = Графики_ПолучитьПараметрыЗапроса(ВходящиеПараметры, НастройкиГрафиков.УслугаПУ);
	НастройкиГрафиков.Вставить("СтруктураПараметров", СтруктураПараметров);
	
	СтруктураРезультатов = Графики_ПолучитьСтруктуруРезультатовЗапроса(НастройкиГрафиков, ВходящиеПараметры);
	НастройкиГрафиков.Вставить("СтруктураРезультатов", СтруктураРезультатов);
	
	// Текст в шапке отчета.
	Если ТипЗнч(ВходящиеПараметры.ОбъектОтчета) = Тип("СправочникСсылка.КВП_Здания") Тогда
		
		Если ВходящиеПараметры.ОбъектОтчета.ЭтоГруппа Тогда
			ШапкаТекст = "группе зданий """;
		Иначе
			ШапкаТекст = "зданию """;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВходящиеПараметры.ОбъектОтчета) = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
		
		Если ВходящиеПараметры.ОбъектОтчета.ЭтоГруппа Тогда
			ШапкаТекст = "группе лицевых счетов """;
		Иначе
			ШапкаТекст = "лицевому счету """;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВходящиеПараметры.ОбъектОтчета) = Тип("СправочникСсылка.КВП_Счетчики") Тогда
		
		ШапкаТекст = "счетчику """;
		Если ВходящиеПараметры.ОбъектОтчета.ЭтоГруппа Тогда
			ШапкаТекст = "группе счетчиков """;
		Иначе
			ШапкаТекст = "счетчику """;
		КонецЕсли;
		
	КонецЕсли;
	
	ФорматнаяСтрокаМесяц    = "ДФ=MMMM; ДП=Январь";
	ФорматнаяСтрокаГодМесяц = "ДФ='MMMM yyyy'; ДП='Январь 0001'";
	
	Если Год(СтруктураПараметров.Графики_НачалоПериодаДата) = Год(СтруктураПараметров.Графики_КонецПериодаДата) Тогда
		
		ФорматнаяСтрока      = "ДФ=MMMM";
		НачалоПериодаСтрокой = Формат(СтруктураПараметров.Графики_НачалоПериодаДата, ФорматнаяСтрокаМесяц);
		КонецПериодаСтрокой  = Формат(СтруктураПараметров.Графики_КонецПериодаДата, ФорматнаяСтрокаМесяц);
		
		Если НачалоПериодаСтрокой = КонецПериодаСтрокой Тогда
			врПериодСтрокой = Формат(СтруктураПараметров.Графики_НачалоПериодаДата, ФорматнаяСтрокаГодМесяц)
							+ " года.";
		Иначе
			врПериодСтрокой = НачалоПериодаСтрокой
							+ " - "
							+ Формат(СтруктураПараметров.Графики_КонецПериодаДата, ФорматнаяСтрокаГодМесяц)
							+ " года.";
		КонецЕсли;
	Иначе
		врПериодСтрокой = Формат(СтруктураПараметров.Графики_НачалоПериодаДата, ФорматнаяСтрокаГодМесяц)
						+ " - "
						+ Формат(СтруктураПараметров.Графики_КонецПериодаДата, ФорматнаяСтрокаГодМесяц);
	КонецЕсли;
	
	ШапкаТекст = ШапкаТекст + Строка(ВходящиеПараметры.ОбъектОтчета) + """ за " + врПериодСтрокой;
	
	Если ВходящиеПараметры.ИмяОбластиВыводаГрафика = "СтрКарточкаРасчетов" Тогда
		ШапкаТекст = ШапкаТекст + Символы.ПС + "(выводятся без учета отбора по разделу учета и виду начисления)"
	КонецЕсли;
	
	НастройкиГрафиков.Вставить("ШапкаТекст", ШапкаТекст);
	
	// Заготовки бледных цветов.
	мЦвета = Новый Массив;
	мЦвета.Добавить(Новый Цвет(255, 255, 0));
	мЦвета.Добавить(Новый Цвет(2, 154, 77));
	мЦвета.Добавить(Новый Цвет(255, 102, 102));
	мЦвета.Добавить(Новый Цвет(40, 99, 170));
	мЦвета.Добавить(Новый Цвет(153, 102, 153));
	мЦвета.Добавить(Новый Цвет(255, 153, 102));
	мЦвета.Добавить(Новый Цвет(131, 205, 37));
	мЦвета.Добавить(Новый Цвет(0, 204, 255));
	мЦвета.Добавить(Новый Цвет(196, 83, 49));
	мЦвета.Добавить(Новый Цвет(204, 204, 204));
	
	НастройкиГрафиков.Вставить("мЦвета", мЦвета);
	
КонецПроцедуры // Графики_ДополнитьНастройки()

// Формирует параметры для запросов.
Функция Графики_ПолучитьПараметрыЗапроса(ВходящиеПараметры, УслугаПУ)
	
	СтруктураПараметров = Новый Структура;
	
	Если ВходящиеПараметры.Свойство("ФормируетсяСПомощьюОбработки") Тогда
		
		СтруктураПараметров.Вставить("Графики_НачалоПериодаДата", НачалоМесяца(ВходящиеПараметры.ДатаНачала));
		СтруктураПараметров.Вставить("Графики_КонецПериодаДата",  КонецМесяца(ВходящиеПараметры.ДатаОкончания));
		
	ИначеЕсли ВходящиеПараметры.ИмяОбластиВыводаГрафика = "СтраницаВзаиморасчеты" 
		Или ВходящиеПараметры.ИмяОбластиВыводаГрафика = "СтрКарточкаРасчетов" Тогда
		
		СтруктураПараметров.Вставить("Графики_НачалоПериодаДата", НачалоМесяца(ВходящиеПараметры.ДатаНачала));
		СтруктураПараметров.Вставить("Графики_КонецПериодаДата",  КонецМесяца(ВходящиеПараметры.ДатаОкончания));
		
	ИначеЕсли ВходящиеПараметры.ИмяОбластиВыводаГрафика = "СтраницаСчетчики" 
		Или ВходящиеПараметры.ИмяОбластиВыводаГрафика = "Счетчики" 
		Или ВходящиеПараметры.ИмяОбластиВыводаГрафика = "ГруппаГрафикРасходПоПУ"
		Или ВходящиеПараметры.ИмяОбластиВыводаГрафика = "стрЛьготники" Тогда
		
		врРабочаяДата = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
		
		СтруктураПараметров.Вставить("Графики_НачалоПериодаДата", НачалоМесяца(ДобавитьМесяц(врРабочаяДата, -5)));
		СтруктураПараметров.Вставить("Графики_КонецПериодаДата",  КонецМесяца(врРабочаяДата));
		
	ИначеЕсли ВходящиеПараметры.ИмяОбластиВыводаГрафика = "ОбщаяИнформация" Тогда
		
		СтруктураПараметров.Вставить("Графики_НачалоПериодаДата", НачалоМесяца(ДобавитьМесяц(ВходящиеПараметры.МесяцВзаиморасчетов, -1)));
		СтруктураПараметров.Вставить("Графики_КонецПериодаДата",  КонецМесяца(ВходящиеПараметры.МесяцВзаиморасчетов));
		
	КонецЕсли;
	
	СтруктураПараметров.Вставить("ТекущаяУслугаТаблицыГрафиков", УслугаПУ);
	
	Если ВходящиеПараметры.Свойство("ИсключатьУслугиВЗапросе") Тогда
		СтруктураПараметров.Вставить("ИсключатьУслугиВЗапросе", ВходящиеПараметры.ИсключатьУслугиВЗапросе);
	Иначе
		СтруктураПараметров.Вставить("ИсключатьУслугиВЗапросе", Неопределено);
	КонецЕсли;
	
	Если ВходящиеПараметры.Свойство("СписокУслуг") Тогда
		СтруктураПараметров.Вставить("СписокУслуг", ВходящиеПараметры.СписокУслуг);
	Иначе
		СтруктураПараметров.Вставить("СписокУслуг", Новый СписокЗначений);
	КонецЕсли;
	
	СписокЛС = Новый СписокЗначений;
	Если ВходящиеПараметры.ИмяОбъекта = "КВП_ЛицевыеСчета" Тогда
		СписокЛС.Добавить(ВходящиеПараметры.ОбъектОтчета);
		Если ВходящиеПараметры.ОбъектОтчета.ЭтоГруппа Тогда
			СписокЛС = КВП_ПолучитьСписокЛицевыхСчетовПоГруппам(СписокЛС,
																СтруктураПараметров.Графики_НачалоПериодаДата,
																СтруктураПараметров.Графики_КонецПериодаДата);
		КонецЕсли;
	ИначеЕсли ВходящиеПараметры.ИмяОбъекта = "КВП_Здания" Тогда
		СписокЛС.Добавить(ВходящиеПараметры.ОбъектОтчета);
		СписокЛС = КВП_ПолучитьСписокЛицевыхСчетовПоЗданиям(СписокЛС,
															СтруктураПараметров.Графики_НачалоПериодаДата, 
															СтруктураПараметров.Графики_КонецПериодаДата);
	КонецЕсли;
	СтруктураПараметров.Вставить("СписокЛС", СписокЛС);
	
	Если ВходящиеПараметры.ИмяОбъекта = "КВП_Здания" Тогда
		СписокЗданийДляРасходаПоПУ = Новый СписокЗначений;
		СписокЗданийДляРасходаПоПУ.Добавить(ВходящиеПараметры.ОбъектОтчета);
		СтруктураПараметров.Вставить("СписокЗданийДляРасходаПоПУ", СписокЗданийДляРасходаПоПУ);
	КонецЕсли;
	
	Если ВходящиеПараметры.ИмяОбъекта = "КВП_Счетчики" Тогда
		СтруктураПараметров.Вставить("Счетчик", ВходящиеПараметры.ОбъектОтчета);
	КонецЕсли;
	
	// Таблица периодов
	НачальныйПериод = КонецМесяца(ДобавитьМесяц(СтруктураПараметров.Графики_КонецПериодаДата, -11));
	Если КонецМесяца(СтруктураПараметров.Графики_НачалоПериодаДата) < НачальныйПериод Тогда
		врНачальныйПериод = НачальныйПериод;
	Иначе
		врНачальныйПериод = КонецМесяца(СтруктураПараметров.Графики_НачалоПериодаДата);
	КонецЕсли;
	
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("КонецПериода", Новый ОписаниеТипов("Дата"));
	
	Пока врНачальныйПериод <= СтруктураПараметров.Графики_КонецПериодаДата Цикл
		НоваяСтрока              = ТаблицаПериодов.Добавить();
		НоваяСтрока.КонецПериода = врНачальныйПериод;
		врНачальныйПериод        = КонецМесяца(ДобавитьМесяц(врНачальныйПериод, 1));
	КонецЦикла;
	ТаблицаПериодов.Сортировать("КонецПериода Возр");
	СтруктураПараметров.Вставить("ТаблицаПериодов", ТаблицаПериодов);
	
	Возврат СтруктураПараметров;
	
КонецФункции // Графики_ПолучитьПараметрыЗапроса()

// Заполняет область диаграммы для "Начисления и оплаты" и "Процент собираемости". 
Процедура Графики_ЗаполнитьОбластьДиаграммы(ТабличныйДокумент, Знач Макет, Знач НастройкиГрафиков, Знач ИмяДиаграммы)
	
	СписокТиповДиаграмм = НастройкиГрафиков.СписокТиповДиаграмм;
	ТекущийТипДиаграммы = Графики_ПолучитьТипДиаграммы(НастройкиГрафиков, ИмяДиаграммы);
	РезультатЗапроса    = Графики_ПолучитьРезультатЗапроса(НастройкиГрафиков, ИмяДиаграммы, ТекущийТипДиаграммы);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Область = Макет.ПолучитьОбласть("Диаграмма");
	
	// Установим имя диаграммы в табличном документе.
	Область.Рисунки[0].Имя = ИмяДиаграммы;
	
	// Получим объект диаграммы для настройки и заполнения.
	Диаграмма = Область.Рисунки[ИмяДиаграммы].Объект;
	
	// Установим тип диаграммы в зависимости от метода настройки типа диаграммы (индивидуально или сводно).
	Диаграмма.ТипДиаграммы = ТекущийТипДиаграммы;
	
	Диаграмма.ОбластьПостроения.ОтображатьТаблицуДанных = Ложь;
	
	// Устанавливаем заголовок диаграммы.
	Диаграмма.ОбластьЗаголовка.Текст = Графики_СформироватьЗаголовокДиаграммы(ИмяДиаграммы, ТекущийТипДиаграммы, НастройкиГрафиков);
	Диаграмма.АвтоРаздвижениеСерий   = АвтоРаздвижениеСерий.Минимум;
	
	// Обходим результат запроса по группировкам следующим образом:
	// 1. Вначале обходим по полям результата выборки, которые представляют собой серии диаграммы.
	// 2. Затем обходим по периодам, которые представляют собой значения на оси x.
	// 3. При обходе по периодам устанавливаем точки на графике вдоль оси y, значение на которой 
	//    определяем в поле запроса с именем, равным названию параметра (серии).
	//    Т.е. для серии со значением "Начисления" значение точки в выборке хранится в 
	//    поле "Выборка[Начисления]".И для серии "Оплаты" значение точки в поле "Выборка[Оплаты]". 
	
	ВыборкаПоПараметрам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЦветНачислений = Новый Цвет(255, 163, 132);
	ЦветОплат      = Новый Цвет(192, 255, 202);
	
	Пока ВыборкаПоПараметрам.Следующий() Цикл
		
		// Устанавливаем значение серии по имени поля.
		ЗначениеСерии = ВыборкаПоПараметрам.Параметр;
		Серия         = Диаграмма.УстановитьСерию(ЗначениеСерии);
		
		// Устанавливаем текст серии для вывода в диаграмме.
		Если ЗначениеСерии = "ПроцентСобираемости" ИЛИ ЗначениеСерии = "ПроцентСобираемостиПоПени" Тогда
			Серия.Текст = "Процент собираемости";
			Серия.Цвет = ЦветОплат;
		ИначеЕсли ЗначениеСерии = "НачисленоПени" Тогда
			Серия.Текст = "Начислено пени";
			Серия.Цвет = ЦветНачислений;
		ИначеЕсли ЗначениеСерии = "ОплаченоПени" Тогда
			Серия.Текст = "Оплачено пени";
			Серия.Цвет = ЦветОплат;
		ИначеЕсли ЗначениеСерии = "Начислено" Тогда
			Серия.Текст = "Начислено";
			Серия.Цвет = ЦветНачислений;
		ИначеЕсли ЗначениеСерии = "Оплачено" Тогда
			Серия.Текст = "Оплачено";
			Серия.Цвет = ЦветОплат;
		ИначеЕсли ЗначениеСерии = "Задолженность" Тогда
			Серия.Текст = "Задолженность";
			Серия.Цвет = ЦветНачислений;
		Иначе
			Серия.Текст = Строка(ЗначениеСерии);
		КонецЕсли;
		
		ВыборкаПериод = ВыборкаПоПараметрам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПериод.Следующий() Цикл
			
			ТочкаВыборки = Диаграмма.УстановитьТочку(ВыборкаПериод.Период);
			
			// Устанавливаем текст точки на оси x (период в формате "Янв.15" - соответствует "Январь 2015").
			Текст          = Формат(ВыборкаПериод.Период,"ДФ='MMMM yy'");
			ПозицияПробела = Найти(Текст, " ");
			Текст          = "" + Лев(Текст, 3) + "." + СокрЛП(Прав(Текст, СтрДлина(Текст) - ПозицияПробела));
			
			ТочкаВыборки.Текст = Текст;
			
			// Устанавливаем значение точки вдоль оси y (сумма начислений или оплат).
			ИмяПоляВыборки = Строка(ВыборкаПоПараметрам.Параметр);
			Диаграмма.УстановитьЗначение(ТочкаВыборки, Серия, Формат(ВыборкаПериод[ИмяПоляВыборки], "ЧДЦ=2"));
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Прочие настройки диаграммы.
	Диаграмма.Обновление           = Истина;
	//Диаграмма.АвтоТранспонирование = Истина;
	Диаграмма.Анимация             = АнимацияДиаграммы.Использовать;
	
	Если ИмяДиаграммы = "НачисленияИОплаты"
	 ИЛИ ИмяДиаграммы = "ЗадолженностьПоМесяцам"
	 ИЛИ ИмяДиаграммы = "НачисленияИОплатыПени" Тогда
		
		ТабличныйДокумент.Вывести(Область);
		
	ИначеЕсли ИмяДиаграммы = "ПроцентСобираемости"
		  ИЛИ ИмяДиаграммы = "ПроцентСобираемостиПоПени" Тогда
		
		ТабличныйДокумент.Присоединить(Область);
		
	КонецЕсли;
	
КонецПроцедуры // Графики_ЗаполнитьОбластьДиаграммы()

// Заполняет область диаграмм по расходу по счетчиккам.
Процедура Графики_ЗаполнитьОбластьДиаграммыРасходПоПУ(ТабличныйДокумент, Знач Макет, Знач НастройкиГрафиков, Знач ИмяДиаграммы)
	
	СписокТиповДиаграмм = НастройкиГрафиков.СписокТиповДиаграмм;
	ТекущийТипДиаграммы = Графики_ПолучитьТипДиаграммы(НастройкиГрафиков, ИмяДиаграммы);
	РезультатЗапроса    = Графики_ПолучитьРезультатЗапроса(НастройкиГрафиков, ИмяДиаграммы, ТекущийТипДиаграммы);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Если НастройкиГрафиков.МетодВыводаУслугВДиаграммах = 0 Тогда // Графики отдельно по каждой услуге.
		
		ВыборкаПоУслугам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		СчУслуга         = 0;
		
		Пока ВыборкаПоУслугам.Следующий() Цикл
			
			СчУслуга = СчУслуга + 1;
			Область  = Макет.ПолучитьОбласть("Диаграмма");
			
			// Заполним параметры диаграммы.
			ИмяДиаграммы = "Услуга" + СчУслуга;
			Область.Рисунки[0].Имя = ИмяДиаграммы;
			
			Диаграмма = Область.Рисунки[ИмяДиаграммы].Объект;
			
			Диаграмма.ОбластьПостроения.ОтображатьТаблицуДанных = Ложь;
			
			// Устанавливаем значение серии по имени поля (начислено, оплачено или процент собираемости).
			ЗначениеСерии = ВыборкаПоУслугам["Услуга"];
			Серия         = Диаграмма.УстановитьСерию(ЗначениеСерии);
			Серия.Текст   = Строка(ЗначениеСерии);
			
			// Цвет серии.
			Серия.Цвет = Новый Цвет(255, 163, 132);
			
			Диаграмма.ОбластьЗаголовка.Текст = "Расход по услуге """ + Серия.Текст + """ (в " + ВыборкаПоУслугам.ЕдиницаИзмерения + ")";
			Диаграмма.АвтоРаздвижениеСерий   = АвтоРаздвижениеСерий.Минимум;
			Диаграмма.ТипДиаграммы           = ТекущийТипДиаграммы;
			
			// Устанавливаем текст серии для вывода в диаграмме.
			ВыборкаПериод = ВыборкаПоУслугам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Пока ВыборкаПериод.Следующий() Цикл
				
				ТочкаПоказание = Диаграмма.УстановитьТочку(ВыборкаПериод.Период);
				
				// Устанавливаем текст точки на оси x (период в формате "Янв.15" - соответствует "Январь 2015").
				Текст          = Формат(ВыборкаПериод.Период,"ДФ='MMMM yy'");
				ПозицияПробела = Найти(Текст, " ");
				Текст          = "" + Лев(Текст, 3) + "." + СокрЛП(Прав(Текст, СтрДлина(Текст) - ПозицияПробела));
				
				ТочкаПоказание.Текст = Текст;
				
				// Устанавливаем значение точки вдоль оси y (сумма начислений или оплат).
				Диаграмма.УстановитьЗначение(ТочкаПоказание, Серия, Формат(ВыборкаПериод["Показание"], "ЧДЦ=2"));
				
			КонецЦикла;
			
			ТабличныйДокумент.Вывести(Область);
			
		КонецЦикла;
		
	ИначеЕсли НастройкиГрафиков.МетодВыводаУслугВДиаграммах = 1 Тогда		// Услуги одной единицы измерения в одном графике.
		
		ТаблицаУслуг = РезультатЗапроса.Выгрузить().Скопировать(, "Услуга");
		ТаблицаУслуг.Свернуть("Услуга");
		ТаблицаЦветовПоУслугам = Графики_ПолучитьТаблицуЦветовПоУслугам(ТаблицаУслуг.ВыгрузитьКолонку("Услуга"), НастройкиГрафиков.мЦвета);
		
		ВыборкаПоЕдИзм = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		СчЕдИзм        = 0;
		
		Пока ВыборкаПоЕдИзм.Следующий() Цикл
			
			СчЕдИзм = СчЕдИзм + 1;
			Область = Макет.ПолучитьОбласть("Диаграмма");
			
			// Заполним параметры диаграммы.
			ИмяДиаграммы = "ЕдиницаИзмерения" + СчЕдИзм;
			Область.Рисунки[0].Имя = ИмяДиаграммы;
			
			Диаграмма = Область.Рисунки[ИмяДиаграммы].Объект;
			
			Диаграмма.ОбластьПостроения.ОтображатьТаблицуДанных = Ложь;
			
			Диаграмма.ОбластьЗаголовка.Текст = "Расход по услугам (в " + ВыборкаПоЕдИзм.ЕдиницаИзмерения + ")";
			Диаграмма.АвтоРаздвижениеСерий   = АвтоРаздвижениеСерий.Минимум;
			Диаграмма.ТипДиаграммы           = ТекущийТипДиаграммы;
			
			СтруктураОтбора = Новый Структура("ЕдиницаИзмерения", ВыборкаПоЕдИзм.ЕдиницаИзмерения);
			врТаблица = РезультатЗапроса.Выгрузить().Скопировать(СтруктураОтбора);
			врТаблица.Свернуть("Услуга, ЕдиницаИзмерения");
			НайденнаяСтрока = врТаблица.Найти(Null, "Услуга");
			Если НайденнаяСтрока <> Неопределено Тогда
				врТаблица.Удалить(НайденнаяСтрока);
			КонецЕсли;
			КоличествоУникальныхСтрок = врТаблица.Количество();
			
			ВыборкаПоУслугам = ВыборкаПоЕдИзм.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоУслугам.Следующий() Цикл
				
				// Устанавливаем значение серии по имени поля (начислено, оплачено или процент собираемости).
				ЗначениеСерии = ВыборкаПоУслугам["Услуга"];
				Серия         = Диаграмма.УстановитьСерию(ЗначениеСерии);
				Серия.Текст   = Строка(ЗначениеСерии);
				
				// Цвет серии.
				Если КоличествоУникальныхСтрок = 1 Тогда
					Серия.Цвет = Новый Цвет(255, 163, 132);
				Иначе
					НайденнаяСтрока = ТаблицаЦветовПоУслугам.Найти(ЗначениеСерии, "Услуга");
					Если НайденнаяСтрока <> Неопределено Тогда
						Серия.Цвет = НайденнаяСтрока.Цвет;
					КонецЕсли;
				КонецЕсли;
				
				// Устанавливаем текст серии для вывода в диаграмме.
				ВыборкаПериод = ВыборкаПоУслугам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПериод.Следующий() Цикл
					
					Точка = Диаграмма.УстановитьТочку(ВыборкаПериод.Период);
					
					// Устанавливаем текст точки на оси x (период в формате "Янв.15" - соответствует "Январь 2015").
					Текст          = Формат(ВыборкаПериод.Период,"ДФ='MMMM yy'");
					ПозицияПробела = Найти(Текст, " ");
					Текст          = "" + Лев(Текст, 3) + "." + СокрЛП(Прав(Текст, СтрДлина(Текст) - ПозицияПробела));
					Точка.Текст    = Текст;
					
					// Устанавливаем значение точки вдоль оси y (сумма начислений или оплат).
					Диаграмма.УстановитьЗначение(Точка, Серия, Формат(ВыборкаПериод["Показание"], "ЧДЦ=2"));
					
				КонецЦикла;
				
			КонецЦикла;
			
			ТабличныйДокумент.Вывести(Область);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // Графики_ЗаполнитьОбластьДиаграммыРасходПоПУ()

// Заполняет область диаграмм по льготам.
Процедура Графики_ЗаполнитьОбластьДиаграммыНачисленияПоЛьготам(ТабличныйДокумент, Знач Макет, Знач НастройкиГрафиков, Знач ИмяДиаграммы)
	
	СписокТиповДиаграмм = НастройкиГрафиков.СписокТиповДиаграмм;
	ТекущийТипДиаграммы = Графики_ПолучитьТипДиаграммы(НастройкиГрафиков, ИмяДиаграммы);
	РезультатЗапроса    = Графики_ПолучитьРезультатЗапроса(НастройкиГрафиков, ИмяДиаграммы, ТекущийТипДиаграммы);
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаПоУслугам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СчУслуга = 0;
	
	ЦветНачислений = Новый Цвет(255, 163, 132);
	ЦветЛьгота     = Новый Цвет(192, 255, 202);
	
	Пока ВыборкаПоУслугам.Следующий() Цикл
		
		СчУслуга = СчУслуга + 1;
		Область  = Макет.ПолучитьОбласть("Диаграмма");
		
		// Заполним параметры диаграммы.
		ИмяДиаграммы = "Услуга" + СчУслуга;
		Область.Рисунки[0].Имя = ИмяДиаграммы;
		
		Диаграмма = Область.Рисунки[ИмяДиаграммы].Объект;
		
		Диаграмма.ОбластьПостроения.ОтображатьТаблицуДанных = Ложь;
		
		Диаграмма.ОбластьЗаголовка.Текст = "Начисления и льготы по услуге """ + ВыборкаПоУслугам["Услуга"] + """ (в руб.)";
		Диаграмма.АвтоРаздвижениеСерий   = АвтоРаздвижениеСерий.Минимум;
		Диаграмма.ТипДиаграммы           = ТекущийТипДиаграммы;
		
		// Устанавливаем текст серии для вывода в диаграмме.
		ВыборкаПериод = ВыборкаПоУслугам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПериод.Следующий() Цикл
			
			// Устанавливаем значение серии по имени поля (начислено, оплачено или процент собираемости).
			Серия         = Диаграмма.УстановитьСерию("Начислено");
			Серия.Текст   = "Начислено";
			Серия.Цвет    = ЦветНачислений;
			
			ТочкаНачислено = Диаграмма.УстановитьТочку(ВыборкаПериод.Период);
			
			// Устанавливаем текст точки на оси x (период в формате "Янв.15" - соответствует "Январь 2015").
			Текст          = Формат(ВыборкаПериод.Период,"ДФ='MMMM yy'");
			ПозицияПробела = Найти(Текст, " ");
			Текст          = "" + Лев(Текст, 3) + "." + СокрЛП(Прав(Текст, СтрДлина(Текст) - ПозицияПробела));
			
			ТочкаНачислено.Текст = Текст;
			
			// Устанавливаем значение точки вдоль оси y (сумма начислений или оплат).
			Диаграмма.УстановитьЗначение(ТочкаНачислено, Серия, Формат(ВыборкаПериод["Начислено"], "ЧДЦ=2"));
			
			// Устанавливаем значение серии по имени поля (начислено, оплачено или процент собираемости).
			Серия         = Диаграмма.УстановитьСерию("Льгота");
			Серия.Текст   = "Льгота";
			Серия.Цвет    = ЦветЛьгота;
			
			ТочкаЛьгота = Диаграмма.УстановитьТочку(ВыборкаПериод.Период);
			
			// Устанавливаем текст точки на оси x (период в формате "Янв.15" - соответствует "Январь 2015").
			ТочкаЛьгота.Текст = ТочкаНачислено.Текст;
			
			// Устанавливаем значение точки вдоль оси y (сумма начислений или оплат).
			Диаграмма.УстановитьЗначение(ТочкаЛьгота, Серия, Формат(ВыборкаПериод["Льгота"], "ЧДЦ=2"));
			
		КонецЦикла;
		
		Если СчУслуга % 2 = 0 Тогда
			ТабличныйДокумент.Присоединить(Область);
		Иначе
			ТабличныйДокумент.Вывести(Область);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // Графики_ЗаполнитьОбластьДиаграммыНачисленияПоЛьготам()

// Возвращает тип текущей диаграммы.
Функция Графики_ПолучитьТипДиаграммы(Знач НастройкиГрафиков, ИмяДиаграммы)
	
	Попытка
		ИмяТипаДиаграммыИзСоответствия = НастройкиГрафиков.СоответствиеТиповДиаграмм.НайтиПоЗначению(ИмяДиаграммы).Представление;
		ТипТекущейДиаграммы            = ТипДиаграммы[ИмяТипаДиаграммыИзСоответствия];
	Исключение
		ТипТекущейДиаграммы = ТипДиаграммы.Гистограмма;
	КонецПопытки;
	
	Возврат ТипТекущейДиаграммы;
	
КонецФункции // Графики_ПолучитьТипДиаграммы()

// Функция возвращает структуру с результатами запросов.
Функция Графики_ПолучитьРезультатЗапроса(НастройкиГрафиков, ИмяДиаграммы, ТекущийТипДиаграммы)
	
	СтруктураРезультатов = НастройкиГрафиков.СтруктураРезультатов;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Подготовим запросы по имени диаграммы.
	
	Если ИмяДиаграммы = "НачисленияИОплаты"                 // Для диаграмм с данными именами
	 ИЛИ ИмяДиаграммы = "НачисленияИОплатыПени"             // используем таблицы "Начисления"
	 ИЛИ ИмяДиаграммы = "ПроцентСобираемости"               // и "Оплаты" из структуры результатов.
	 ИЛИ ИмяДиаграммы = "ПроцентСобираемостиПоПени" Тогда
		
		Запрос.УстановитьПараметр("Начисления", СтруктураРезультатов.Начисления);
		Запрос.УстановитьПараметр("Оплаты",     СтруктураРезультатов.Оплаты);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Начисления.Период,
		|	Начисления.Начислено,
		|	Начисления.НачисленоПени,
		|	""Начислено"" КАК Параметр
		|ПОМЕСТИТЬ втНачисления
		|ИЗ
		|	&Начисления КАК Начисления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Оплаты.Период,
		|	Оплаты.Оплачено,
		|	Оплаты.ОплаченоПени,
		|	""Оплачено"" КАК Параметр
		|ПОМЕСТИТЬ втОплаты
		|ИЗ
		|	&Оплаты КАК Оплаты";
		
		Запрос.Выполнить();
		
		Если ТекущийТипДиаграммы = ТипДиаграммы.Круговая
		 ИЛИ ТекущийТипДиаграммы = ТипДиаграммы.КруговаяОбъемная Тогда
			Запрос.Текст =
			"ВЫБРАТЬ
			|	МАКСИМУМ(втМаксимальныеПериоды.Период) КАК Период
			|ПОМЕСТИТЬ втМаксимальныйПериод
			|ИЗ
			|	(ВЫБРАТЬ
			|		МАКСИМУМ(втНачисления.Период) КАК Период
			|	ИЗ
			|		втНачисления КАК втНачисления
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		МАКСИМУМ(втОплаты.Период)
			|	ИЗ
			|		втОплаты КАК втОплаты) КАК втМаксимальныеПериоды";
			Запрос.Выполнить();
		КонецЕсли;
		
	ИначеЕсли ИмяДиаграммы = "ЗадолженностьПоМесяцам" Тогда
		
		Если ТекущийТипДиаграммы = ТипДиаграммы.Круговая
		 ИЛИ ТекущийТипДиаграммы = ТипДиаграммы.КруговаяОбъемная Тогда
			
			Запрос.УстановитьПараметр("Задолженность", СтруктураРезультатов.ЗадолженностьНаКонецПериода);
			
		Иначе
			Запрос.УстановитьПараметр("Задолженность", СтруктураРезультатов.ЗадолженностьПоМесяцам);
			
		КонецЕсли;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	втЗадолженности.Период,
		|	""Задолженность"" КАК Параметр,
		|	втЗадолженности.Задолженность
		|ПОМЕСТИТЬ втЗадолженность
		|ИЗ
		|	&Задолженность КАК втЗадолженности";
		
		Запрос.Выполнить();
		
	ИначеЕсли ИмяДиаграммы = "РасходПоПУ" Тогда
		
		Запрос.УстановитьПараметр("ТаблицаРасхода", СтруктураРезультатов.РасходПоПоказаниям);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаРасхода.Услуга,
		|	ТаблицаРасхода.ЕдиницаИзмерения,
		|	ТаблицаРасхода.Период,
		|	ТаблицаРасхода.Показание,
		|	ТаблицаРасхода.Порядок
		|ПОМЕСТИТЬ врРасходПоПоказаниямПУ
		|ИЗ
		|	&ТаблицаРасхода КАК ТаблицаРасхода";
		
		Запрос.Выполнить();
		
		Если ТекущийТипДиаграммы = ТипДиаграммы.Круговая
		 ИЛИ ТекущийТипДиаграммы = ТипДиаграммы.КруговаяОбъемная Тогда
			Запрос.Текст =
			"ВЫБРАТЬ
			|	МАКСИМУМ(врРасходПоПоказаниямПУ.Период) КАК Период
			|ПОМЕСТИТЬ втМаксимальныйПериод
			|ИЗ
			|	врРасходПоПоказаниямПУ КАК врРасходПоПоказаниямПУ";
			Запрос.Выполнить();
		КонецЕсли;
		
	ИначеЕсли ИмяДиаграммы = "НачисленияПоЛьготам" Тогда
		
		Запрос.УстановитьПараметр("НачисленияПоЛьготам", СтруктураРезультатов.НачисленияПоЛьготам);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	НачисленияПоЛьготам.Услуга,
		|	НачисленияПоЛьготам.Период,
		|	НачисленияПоЛьготам.Льгота,
		|	НачисленияПоЛьготам.Начислено
		|ПОМЕСТИТЬ врНачисленияПоЛьготам
		|ИЗ
		|	&НачисленияПоЛьготам КАК НачисленияПоЛьготам";
		
		Запрос.Выполнить();
		
		Если ТекущийТипДиаграммы = ТипДиаграммы.Круговая
		 ИЛИ ТекущийТипДиаграммы = ТипДиаграммы.КруговаяОбъемная Тогда
			Запрос.Текст =
			"ВЫБРАТЬ
			|	МАКСИМУМ(врНачисленияПоЛьготам.Период) КАК Период
			|ПОМЕСТИТЬ втМаксимальныйПериод
			|ИЗ
			|	врНачисленияПоЛьготам КАК врНачисленияПоЛьготам";
			Запрос.Выполнить();
		КонецЕсли;
		
	КонецЕсли;
	
	// Получим результат запроса по типу диаграммы.
	Если ИмяДиаграммы = "НачисленияПоЛьготам" Тогда
		
		Если ТекущийТипДиаграммы = ТипДиаграммы.Круговая
			 ИЛИ ТекущийТипДиаграммы = ТипДиаграммы.КруговаяОбъемная Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	врНачисленияПоЛьготам.Услуга КАК Услуга,
			|	СУММА(врНачисленияПоЛьготам.Льгота) КАК Льгота,
			|	СУММА(врНачисленияПоЛьготам.Начислено) КАК Начислено,
			|	втМаксимальныйПериод.Период КАК Период
			|ИЗ
			|	врНачисленияПоЛьготам КАК врНачисленияПоЛьготам,
			|	втМаксимальныйПериод КАК втМаксимальныйПериод
			|
			|СГРУППИРОВАТЬ ПО
			|	врНачисленияПоЛьготам.Услуга,
			|	втМаксимальныйПериод.Период
			|
			|УПОРЯДОЧИТЬ ПО
			|	Услуга
			|ИТОГИ
			|	СУММА(Льгота),
			|	СУММА(Начислено)
			|ПО
			|	Услуга,
			|	Период";
			
		Иначе
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	врНачисленияПоЛьготам.Услуга КАК Услуга,
			|	врНачисленияПоЛьготам.Период КАК Период,
			|	СУММА(врНачисленияПоЛьготам.Льгота) КАК Льгота,
			|	СУММА(врНачисленияПоЛьготам.Начислено) КАК Начислено
			|ИЗ
			|	врНачисленияПоЛьготам КАК врНачисленияПоЛьготам
			|
			|СГРУППИРОВАТЬ ПО
			|	врНачисленияПоЛьготам.Период,
			|	врНачисленияПоЛьготам.Услуга
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период,
			|	Услуга
			|ИТОГИ
			|	СУММА(Льгота),
			|	СУММА(Начислено)
			|ПО
			|	Услуга,
			|	Период";
			
		КонецЕсли;
		
		РезультатЗапроса = Запрос.Выполнить();
		
	ИначеЕсли ИмяДиаграммы = "НачисленияИОплаты" Тогда
		Если ТекущийТипДиаграммы = ТипДиаграммы.Круговая
		 ИЛИ ТекущийТипДиаграммы = ТипДиаграммы.КруговаяОбъемная Тогда
			
			// Для круговой диаграммы берем итоги за весь период в разрезе начислений и оплат.
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СУММА(НачисленияИОплаты.Начислено) КАК Начислено,
			|	НачисленияИОплаты.Параметр КАК Параметр,
			|	НачисленияИОплаты.Порядок КАК Порядок,
			|	СУММА(НачисленияИОплаты.Оплачено) КАК Оплачено,
			|	втМаксимальныйПериод.Период КАК Период
			|ИЗ
			|	(ВЫБРАТЬ
			|		втНачисления.Начислено КАК Начислено,
			|		""Начислено"" КАК Параметр,
			|		1 КАК Порядок,
			|		NULL КАК Оплачено
			|	ИЗ
			|		втНачисления КАК втНачисления
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ
			|		NULL,
			|		""Оплачено"",
			|		2,
			|		втОплаты.Оплачено
			|	ИЗ
			|		втОплаты КАК втОплаты) КАК НачисленияИОплаты,
			|	втМаксимальныйПериод КАК втМаксимальныйПериод
			|
			|СГРУППИРОВАТЬ ПО
			|	НачисленияИОплаты.Параметр,
			|	НачисленияИОплаты.Порядок,
			|	втМаксимальныйПериод.Период
			|
			|УПОРЯДОЧИТЬ ПО
			|	Порядок
			|ИТОГИ
			|	СУММА(Начислено),
			|	СУММА(Оплачено)
			|ПО
			|	Параметр,
			|	Период";
			
		Иначе
			
			// Для остальных типов диаграмм берем итоги по периодам (месяцам) в разрезе начислений и оплат.
			Запрос.Текст =
			"ВЫБРАТЬ
			|	НачисленияИОплаты.Период КАК Период,
			|	СУММА(НачисленияИОплаты.Начислено) КАК Начислено,
			|	НачисленияИОплаты.Параметр КАК Параметр,
			|	НачисленияИОплаты.Порядок КАК Порядок,
			|	СУММА(НачисленияИОплаты.Оплачено) КАК Оплачено
			|ИЗ
			|	(ВЫБРАТЬ
			|		втНачисления.Период КАК Период,
			|		втНачисления.Начислено КАК Начислено,
			|		""Начислено"" КАК Параметр,
			|		1 КАК Порядок,
			|		NULL КАК Оплачено
			|	ИЗ
			|		втНачисления КАК втНачисления
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ
			|		втОплаты.Период,
			|		NULL,
			|		""Оплачено"",
			|		2,
			|		втОплаты.Оплачено
			|	ИЗ
			|		втОплаты КАК втОплаты) КАК НачисленияИОплаты
			|
			|СГРУППИРОВАТЬ ПО
			|	НачисленияИОплаты.Период,
			|	НачисленияИОплаты.Параметр,
			|	НачисленияИОплаты.Порядок
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период,
			|	Порядок
			|ИТОГИ
			|	СУММА(Начислено),
			|	СУММА(Оплачено)
			|ПО
			|	Параметр,
			|	Период";
			
		КонецЕсли;
		
		РезультатЗапроса = Запрос.Выполнить();
		
	ИначеЕсли ИмяДиаграммы = "НачисленияИОплатыПени" Тогда
		
		Если ТекущийТипДиаграммы = ТипДиаграммы.Круговая
		 ИЛИ ТекущийТипДиаграммы = ТипДиаграммы.КруговаяОбъемная Тогда
		
			// Для круговой диаграммы берем итоги за весь период в разрезе начислений и оплат по пени.
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СУММА(НачисленияИОплаты.НачисленоПени) КАК НачисленоПени,
			|	НачисленияИОплаты.Параметр КАК Параметр,
			|	НачисленияИОплаты.Порядок КАК Порядок,
			|	СУММА(НачисленияИОплаты.ОплаченоПени) КАК ОплаченоПени,
			|	втМаксимальныйПериод.Период КАК Период
			|ИЗ
			|	(ВЫБРАТЬ
			|		втНачисления.НачисленоПени КАК НачисленоПени,
			|		""НачисленоПени"" КАК Параметр,
			|		1 КАК Порядок,
			|		NULL КАК ОплаченоПени
			|	ИЗ
			|		втНачисления КАК втНачисления
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ
			|		NULL,
			|		""ОплаченоПени"",
			|		2,
			|		втОплаты.ОплаченоПени
			|	ИЗ
			|		втОплаты КАК втОплаты) КАК НачисленияИОплаты,
			|	втМаксимальныйПериод КАК втМаксимальныйПериод
			|
			|СГРУППИРОВАТЬ ПО
			|	НачисленияИОплаты.Параметр,
			|	НачисленияИОплаты.Порядок,
			|	втМаксимальныйПериод.Период
			|
			|УПОРЯДОЧИТЬ ПО
			|	Порядок
			|ИТОГИ
			|	СУММА(НачисленоПени),
			|	СУММА(ОплаченоПени)
			|ПО
			|	Параметр,
			|	Период";
			
		Иначе
			// Для остальных типов диаграмм берем итоги по периодам (месяцам) в разрезе начислений и оплат по пени.
			Запрос.Текст =
			"ВЫБРАТЬ
			|	НачисленияИОплаты.Период КАК Период,
			|	СУММА(НачисленияИОплаты.НачисленоПени) КАК НачисленоПени,
			|	НачисленияИОплаты.Параметр КАК Параметр,
			|	НачисленияИОплаты.Порядок КАК Порядок,
			|	СУММА(НачисленияИОплаты.ОплаченоПени) КАК ОплаченоПени
			|ИЗ
			|	(ВЫБРАТЬ
			|		втНачисления.Период КАК Период,
			|		втНачисления.НачисленоПени КАК НачисленоПени,
			|		""НачисленоПени"" КАК Параметр,
			|		1 КАК Порядок,
			|		NULL КАК ОплаченоПени
			|	ИЗ
			|		втНачисления КАК втНачисления
			|	
			|	ОБЪЕДИНИТЬ
			|	
			|	ВЫБРАТЬ
			|		втОплаты.Период,
			|		NULL,
			|		""ОплаченоПени"",
			|		2 КАК Порядок,
			|		втОплаты.ОплаченоПени
			|	ИЗ
			|		втОплаты КАК втОплаты) КАК НачисленияИОплаты
			|
			|СГРУППИРОВАТЬ ПО
			|	НачисленияИОплаты.Период,
			|	НачисленияИОплаты.Параметр,
			|	НачисленияИОплаты.Порядок
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период,
			|	Порядок
			|ИТОГИ
			|	СУММА(НачисленоПени),
			|	СУММА(ОплаченоПени)
			|ПО
			|	Параметр,
			|	Период";
			
		КонецЕсли;
		
		РезультатЗапроса = Запрос.Выполнить();
		
	ИначеЕсли ИмяДиаграммы = "ПроцентСобираемости" Тогда
		
		Если ТекущийТипДиаграммы = ТипДиаграммы.Круговая
		 ИЛИ ТекущийТипДиаграммы = ТипДиаграммы.КруговаяОбъемная Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СУММА(втОплаты.Оплачено) КАК Оплачено,
			|	СУММА(втНачисления.Начислено) КАК Начислено
			|ПОМЕСТИТЬ втНачисленияИОплатыВсего
			|ИЗ
			|	втОплаты КАК втОплаты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНачисления КАК втНачисления
			|		ПО втОплаты.Период = втНачисления.Период
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СУММА(ВЫБОР
			|			КОГДА НЕ ЕСТЬNULL(втНачисленияИОплатыВсего.Начислено, 0) = 0
			|				ТОГДА втНачисленияИОплатыВсего.Оплачено / втНачисленияИОплатыВсего.Начислено * 100
			|		КОНЕЦ) КАК ПроцентСобираемости,
			|	""ПроцентСобираемости"" КАК Параметр,
			|	втМаксимальныйПериод.Период КАК Период
			|ИЗ
			|	втНачисленияИОплатыВсего КАК втНачисленияИОплатыВсего,
			|	втМаксимальныйПериод КАК втМаксимальныйПериод
			|
			|СГРУППИРОВАТЬ ПО
			|	втМаксимальныйПериод.Период
			|ИТОГИ
			|	СУММА(ПроцентСобираемости)
			|ПО
			|	Параметр,
			|	Период";
			
		Иначе
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	втОплаты.Период КАК Период,
			|	СУММА(ВЫБОР
			|			КОГДА НЕ ЕСТЬNULL(втНачисления.Начислено, 0) = 0
			|				ТОГДА втОплаты.Оплачено / втНачисления.Начислено * 100
			|		КОНЕЦ) КАК ПроцентСобираемости,
			|	""ПроцентСобираемости"" КАК Параметр
			|ИЗ
			|	(ВЫБРАТЬ
			|		втОплаты.Период КАК Период,
			|		СУММА(втОплаты.Оплачено) КАК Оплачено
			|	ИЗ
			|		втОплаты КАК втОплаты
			|	
			|	СГРУППИРОВАТЬ ПО
			|		втОплаты.Период) КАК втОплаты
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			втНачисления.Период КАК Период,
			|			СУММА(втНачисления.Начислено) КАК Начислено
			|		ИЗ
			|			втНачисления КАК втНачисления
			|		
			|		СГРУППИРОВАТЬ ПО
			|			втНачисления.Период) КАК втНачисления
			|		ПО втОплаты.Период = втНачисления.Период
			|
			|СГРУППИРОВАТЬ ПО
			|	втОплаты.Период
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период
			|ИТОГИ
			|	СУММА(ПроцентСобираемости)
			|ПО
			|	Параметр,
			|	Период";
			
		КонецЕсли;
		
		РезультатЗапроса = Запрос.Выполнить();
		
	ИначеЕсли ИмяДиаграммы = "ПроцентСобираемостиПоПени" Тогда
		
		Если ТекущийТипДиаграммы = ТипДиаграммы.Круговая
		 ИЛИ ТекущийТипДиаграммы = ТипДиаграммы.КруговаяОбъемная Тогда
			// За весь период
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СУММА(втОплаты.ОплаченоПени) КАК ОплаченоПени,
			|	СУММА(втНачисления.НачисленоПени) КАК НачисленоПени
			|ПОМЕСТИТЬ втНачисленияИОплатыПениВсего
			|ИЗ
			|	втОплаты КАК втОплаты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНачисления КАК втНачисления
			|		ПО втОплаты.Период = втНачисления.Период
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	СУММА(ВЫБОР
			|			КОГДА НЕ ЕСТЬNULL(втНачисленияИОплатыПениВсего.НачисленоПени, 0) = 0
			|				ТОГДА втНачисленияИОплатыПениВсего.ОплаченоПени / втНачисленияИОплатыПениВсего.НачисленоПени * 100
			|		КОНЕЦ) КАК ПроцентСобираемостиПоПени,
			|	""ПроцентСобираемостиПоПени"" КАК Параметр,
			|	втМаксимальныйПериод.Период КАК Период
			|ИЗ
			|	втНачисленияИОплатыПениВсего КАК втНачисленияИОплатыПениВсего,
			|	втМаксимальныйПериод КАК втМаксимальныйПериод
			|
			|СГРУППИРОВАТЬ ПО
			|	втМаксимальныйПериод.Период
			|ИТОГИ
			|	СУММА(ПроцентСобираемостиПоПени)
			|ПО
			|	Параметр,
			|	Период";
			
		Иначе
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	втОплаты.Период КАК Период,
			|	СУММА(ВЫБОР
			|			КОГДА НЕ ЕСТЬNULL(втНачисления.НачисленоПени, 0) = 0
			|				ТОГДА втОплаты.ОплаченоПени / втНачисления.НачисленоПени * 100
			|		КОНЕЦ) КАК ПроцентСобираемостиПоПени,
			|	""ПроцентСобираемостиПоПени"" КАК Параметр
			|ИЗ
			|	(ВЫБРАТЬ
			|		втОплаты.Период КАК Период,
			|		СУММА(втОплаты.ОплаченоПени) КАК ОплаченоПени
			|	ИЗ
			|		втОплаты КАК втОплаты
			|	
			|	СГРУППИРОВАТЬ ПО
			|		втОплаты.Период) КАК втОплаты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			втНачисления.Период КАК Период,
			|			СУММА(втНачисления.НачисленоПени) КАК НачисленоПени
			|		ИЗ
			|			втНачисления КАК втНачисления
			|		
			|		СГРУППИРОВАТЬ ПО
			|			втНачисления.Период) КАК втНачисления
			|		ПО втОплаты.Период = втНачисления.Период
			|
			|СГРУППИРОВАТЬ ПО
			|	втОплаты.Период
			|
			|УПОРЯДОЧИТЬ ПО
			|	Период
			|ИТОГИ
			|	СУММА(ПроцентСобираемостиПоПени)
			|ПО
			|	Параметр,
			|	Период";
			
		КонецЕсли;
		
		РезультатЗапроса = Запрос.Выполнить();
		
	ИначеЕсли ИмяДиаграммы = "ЗадолженностьПоМесяцам" Тогда
		
		Если ТекущийТипДиаграммы = ТипДиаграммы.Круговая
		 ИЛИ ТекущийТипДиаграммы = ТипДиаграммы.КруговаяОбъемная Тогда
			
			// За весь период
			Запрос.Текст =
			"ВЫБРАТЬ
			|	втЗадолженность.Параметр КАК Параметр,
			|	СУММА(ЕСТЬNULL(втЗадолженность.Задолженность, 0)) КАК Задолженность,
			|	втЗадолженность.Период КАК Период
			|ИЗ
			|	втЗадолженность КАК втЗадолженность
			|
			|СГРУППИРОВАТЬ ПО
			|	втЗадолженность.Параметр,
			|	втЗадолженность.Период
			|ИТОГИ
			|	СУММА(Задолженность)
			|ПО
			|	Параметр,
			|	Период";
			
		Иначе
			
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 12
			|	втЗадолженность.Период КАК Период,
			|	втЗадолженность.Параметр КАК Параметр,
			|	СУММА(ЕСТЬNULL(втЗадолженность.Задолженность, 0)) КАК Задолженность
			|ИЗ
			|	втЗадолженность КАК втЗадолженность
			|
			|СГРУППИРОВАТЬ ПО
			|	втЗадолженность.Период,
			|	втЗадолженность.Параметр
			|
			|УПОРЯДОЧИТЬ ПО
			|	втЗадолженность.Период
			|ИТОГИ
			|	СУММА(Задолженность)
			|ПО
			|	Параметр,
			|	Период";
			
		КонецЕсли;
		
		РезультатЗапроса = Запрос.Выполнить();
		
	ИначеЕсли ИмяДиаграммы = "РасходПоПУ" Тогда
		
		Если НастройкиГрафиков.МетодВыводаУслугВДиаграммах = 0 Тогда		// Графики отдельно по каждой услуге.
			
			Если ТекущийТипДиаграммы = ТипДиаграммы.Круговая
			 ИЛИ ТекущийТипДиаграммы = ТипДиаграммы.КруговаяОбъемная Тогда
				
				Запрос.Текст =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	врРасходПоПоказаниямПУ.Услуга КАК Услуга,
				|	врРасходПоПоказаниямПУ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
				|	СУММА(врРасходПоПоказаниямПУ.Показание) КАК Показание,
				|	втМаксимальныйПериод.Период КАК Период,
				|	врРасходПоПоказаниямПУ.Порядок КАК Порядок
				|ИЗ
				|	врРасходПоПоказаниямПУ КАК врРасходПоПоказаниямПУ,
				|	втМаксимальныйПериод КАК втМаксимальныйПериод
				|
				|СГРУППИРОВАТЬ ПО
				|	врРасходПоПоказаниямПУ.Услуга,
				|	врРасходПоПоказаниямПУ.ЕдиницаИзмерения,
				|	втМаксимальныйПериод.Период,
				|	врРасходПоПоказаниямПУ.Порядок
				|
				|УПОРЯДОЧИТЬ ПО
				|	Порядок,
				|	Услуга
				|ИТОГИ
				|	МАКСИМУМ(ЕдиницаИзмерения),
				|	СУММА(Показание),
				|	МАКСИМУМ(Порядок)
				|ПО
				|	Услуга,
				|	Период";
				
			Иначе
				
				Запрос.Текст =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	врРасходПоПоказаниямПУ.Услуга КАК Услуга,
				|	врРасходПоПоказаниямПУ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
				|	врРасходПоПоказаниямПУ.Период КАК Период,
				|	СУММА(врРасходПоПоказаниямПУ.Показание) КАК Показание,
				|	врРасходПоПоказаниямПУ.Порядок КАК Порядок
				|ИЗ
				|	врРасходПоПоказаниямПУ КАК врРасходПоПоказаниямПУ
				|
				|СГРУППИРОВАТЬ ПО
				|	врРасходПоПоказаниямПУ.Период,
				|	врРасходПоПоказаниямПУ.Услуга,
				|	врРасходПоПоказаниямПУ.ЕдиницаИзмерения,
				|	врРасходПоПоказаниямПУ.Порядок
				|
				|УПОРЯДОЧИТЬ ПО
				|	Порядок,
				|	Период,
				|	Услуга
				|ИТОГИ
				|	МАКСИМУМ(ЕдиницаИзмерения),
				|	СУММА(Показание),
				|	МАКСИМУМ(Порядок)
				|ПО
				|	Услуга,
				|	Период";
				
			КонецЕсли;
			
		ИначеЕсли НастройкиГрафиков.МетодВыводаУслугВДиаграммах = 1 Тогда
			
			Если ТекущийТипДиаграммы = ТипДиаграммы.Круговая
			 ИЛИ ТекущийТипДиаграммы = ТипДиаграммы.КруговаяОбъемная Тогда
				
				Запрос.Текст =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	врРасходПоПоказаниямПУ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
				|	врРасходПоПоказаниямПУ.Услуга КАК Услуга,
				|	СУММА(врРасходПоПоказаниямПУ.Показание) КАК Показание,
				|	втМаксимальныйПериод.Период КАК Период
				|ИЗ
				|	врРасходПоПоказаниямПУ КАК врРасходПоПоказаниямПУ,
				|	втМаксимальныйПериод КАК втМаксимальныйПериод
				|
				|СГРУППИРОВАТЬ ПО
				|	врРасходПоПоказаниямПУ.Услуга,
				|	врРасходПоПоказаниямПУ.ЕдиницаИзмерения,
				|	втМаксимальныйПериод.Период
				|
				|УПОРЯДОЧИТЬ ПО
				|	врРасходПоПоказаниямПУ.ЕдиницаИзмерения,
				|	врРасходПоПоказаниямПУ.Услуга
				|ИТОГИ
				|	СУММА(Показание)
				|ПО
				|	ЕдиницаИзмерения,
				|	Услуга,
				|	Период";
				
			Иначе
				
				Запрос.Текст =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	врРасходПоПоказаниямПУ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
				|	врРасходПоПоказаниямПУ.Услуга КАК Услуга,
				|	врРасходПоПоказаниямПУ.Период КАК Период,
				|	СУММА(врРасходПоПоказаниямПУ.Показание) КАК Показание
				|ИЗ
				|	врРасходПоПоказаниямПУ КАК врРасходПоПоказаниямПУ
				|
				|СГРУППИРОВАТЬ ПО
				|	врРасходПоПоказаниямПУ.Период,
				|	врРасходПоПоказаниямПУ.Услуга,
				|	врРасходПоПоказаниямПУ.ЕдиницаИзмерения
				|
				|УПОРЯДОЧИТЬ ПО
				|	врРасходПоПоказаниямПУ.Период,
				|	врРасходПоПоказаниямПУ.ЕдиницаИзмерения,
				|	врРасходПоПоказаниямПУ.Услуга
				|ИТОГИ
				|	СУММА(Показание)
				|ПО
				|	ЕдиницаИзмерения,
				|	Услуга,
				|	Период";
				
			КонецЕсли;
			
		КонецЕсли;
		
		РезультатЗапроса = Запрос.Выполнить();
		
	КонецЕсли;
	
	Возврат РезультатЗапроса;
	
КонецФункции // Графики_ПолучитьРезультатЗапроса()

// Подготавливает структуру параметров: заполняет структуру результатами запросов.
Функция Графики_ПолучитьСтруктуруРезультатовЗапроса(НастройкиГрафиков, ВходящиеПараметры)
	
	СтруктураПараметров = НастройкиГрафиков.СтруктураПараметров;
	
	Если ВходящиеПараметры.ИмяОбластиВыводаГрафика = "ОбщаяИнформация"
	 ИЛИ ВходящиеПараметры.ИмяОбластиВыводаГрафика = "Взаиморасчеты"
	 ИЛИ ВходящиеПараметры.ИмяОбластиВыводаГрафика = "СтраницаВзаиморасчеты"
	 ИЛИ ВходящиеПараметры.ИмяОбластиВыводаГрафика = "СтрКарточкаРасчетов" Тогда
		СтруктураРезультатов = Новый Структура("Начисления, Оплаты, ЗадолженностьПоМесяцам, ЗадолженностьНаКонецПериода");
	ИначеЕсли ВходящиеПараметры.ИмяОбластиВыводаГрафика = "Счетчики"
	 ИЛИ ВходящиеПараметры.ИмяОбластиВыводаГрафика = "ГруппаГрафикРасходПоПУ"
	 ИЛИ ВходящиеПараметры.ИмяОбластиВыводаГрафика = "СтраницаСчетчики" Тогда
		СтруктураРезультатов = Новый Структура("РасходПоПоказаниям");
	ИначеЕсли ВходящиеПараметры.ИмяОбластиВыводаГрафика = "стрЛьготники" Тогда
		СтруктураРезультатов = Новый Структура("НачисленияПоЛьготам");
	Иначе
		СтруктураРезультатов = Новый Структура;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если ВходящиеПараметры.Свойство("Организация") Тогда
		Запрос.УстановитьПараметр("Организация", ВходящиеПараметры.Организация);
	Иначе
		Запрос.УстановитьПараметр("Организация", УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация"));
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПериодНачало",    СтруктураПараметров.Графики_НачалоПериодаДата);
	Запрос.УстановитьПараметр("ПериодКонец",     СтруктураПараметров.Графики_КонецПериодаДата);
	Запрос.УстановитьПараметр("СписокЛС",        СтруктураПараметров.СписокЛС);
	Запрос.УстановитьПараметр("СписокУслуг",     СтруктураПараметров.СписокУслуг);
	Запрос.УстановитьПараметр("ТаблицаПериодов", СтруктураПараметров.ТаблицаПериодов);
	Если ВходящиеПараметры.ИмяОбъекта = "КВП_Здания" Тогда
		Запрос.УстановитьПараметр("СписокОбъектовДляОтбораПУ", СтруктураПараметров.СписокЗданийДляРасходаПоПУ);
	Иначе
		Запрос.УстановитьПараметр("СписокОбъектовДляОтбораПУ", СтруктураПараметров.СписокЛС);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПериодов.КонецПериода КАК Период
	|ПОМЕСТИТЬ врТаблицаПериодов
	|ИЗ
	|	&ТаблицаПериодов КАК ТаблицаПериодов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организация
	|ПОМЕСТИТЬ втОрганизации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ Организации.Ссылка = &Организация
	|		КОНЕЦ
	|	И НЕ Организации.ПометкаУдаления";
	
	Запрос.Выполнить();
	
#Область Начисления_Из_Регистра
	
	Если СтруктураРезультатов.Свойство("Начисления") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОНЕЦПЕРИОДА(УПЖКХ_НачисленияОбороты.Период, МЕСЯЦ) КАК Период,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
		|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления)
		|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка)
		|				ТОГДА 0
		|			ИНАЧЕ УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|		КОНЕЦ) КАК Начислено,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
		|				ТОГДА УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НачисленоПени
		|ПОМЕСТИТЬ втНачисленияИзРегистра
		|ИЗ
		|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
		|			&ПериодНачало,
		|			&ПериодКонец,
		|			РЕГИСТРАТОР,
		|			Организация В
		|					(ВЫБРАТЬ
		|						втОрганизации.Организация
		|					ИЗ
		|						втОрганизации КАК втОрганизации)
		|				И ЛицевойСчет В (&СписокЛС)
		|				И &УсловиеОтбораУслуг
		|				И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))) КАК УПЖКХ_НачисленияОбороты
		|ГДЕ
		|	ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.Регистратор ССЫЛКА Документ.КВП_РегистрацияОплаты
		|				ТОГДА НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Рассрочка)
		|						И НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	КОНЕЦПЕРИОДА(УПЖКХ_НачисленияОбороты.Период, МЕСЯЦ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	врТаблицаПериодов.Период,
		|	ЕСТЬNULL(втНачисленияИзРегистра.Начислено, 0) КАК Начислено,
		|	ЕСТЬNULL(втНачисленияИзРегистра.НачисленоПени, 0) КАК НачисленоПени
		|ИЗ
		|	врТаблицаПериодов КАК врТаблицаПериодов
		|		ЛЕВОЕ СОЕДИНЕНИЕ втНачисленияИзРегистра КАК втНачисленияИзРегистра
		|		ПО врТаблицаПериодов.Период = втНачисленияИзРегистра.Период";
		
		Если СтруктураПараметров.ИсключатьУслугиВЗапросе = Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбораУслуг", "ИСТИНА");
		ИначеЕсли СтруктураПараметров.ИсключатьУслугиВЗапросе = Истина Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбораУслуг", "НЕ Услуга В (&СписокУслуг)");
		ИначеЕсли СтруктураПараметров.ИсключатьУслугиВЗапросе = Ложь Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбораУслуг", "Услуга В (&СписокУслуг)");
		КонецЕсли;
		
		СтруктураРезультатов.Начисления = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
#КонецОбласти // Начисления_Из_Регистра
	
#Область Оплаты_Из_Регистра
	
	Если СтруктураРезультатов.Свойство("Оплаты") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОНЕЦПЕРИОДА(УПЖКХ_НачисленияОбороты.Период, МЕСЯЦ) КАК Период,
		|	СУММА(ВЫБОР
		|			КОГДА НЕ(УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Рассрочка)
		|							И УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление))
		|					ИЛИ НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
		|				ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Оплачено,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
		|				ТОГДА -УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ОплаченоПени
		|ПОМЕСТИТЬ втОплатыИзРегистра
		|ИЗ
		|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
		|			&ПериодНачало,
		|			&ПериодКонец,
		|			РЕГИСТРАТОР,
		|			Организация В
		|					(ВЫБРАТЬ
		|						втОрганизации.Организация
		|					ИЗ
		|						втОрганизации КАК втОрганизации)
		|				И ЛицевойСчет В (&СписокЛС)
		|				И &УсловиеОтбораУслуг
		|				И ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)) КАК УПЖКХ_НачисленияОбороты
		|ГДЕ
		|	УПЖКХ_НачисленияОбороты.Регистратор ССЫЛКА Документ.КВП_РегистрацияОплаты
		|
		|СГРУППИРОВАТЬ ПО
		|	КОНЕЦПЕРИОДА(УПЖКХ_НачисленияОбороты.Период, МЕСЯЦ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	врТаблицаПериодов.Период КАК Период,
		|	ЕСТЬNULL(втОплатыИзРегистра.Оплачено, 0) КАК Оплачено,
		|	ЕСТЬNULL(втОплатыИзРегистра.ОплаченоПени, 0) КАК ОплаченоПени
		|ИЗ
		|	врТаблицаПериодов КАК врТаблицаПериодов
		|		ЛЕВОЕ СОЕДИНЕНИЕ втОплатыИзРегистра КАК втОплатыИзРегистра
		|		ПО врТаблицаПериодов.Период = втОплатыИзРегистра.Период";
		
		Если СтруктураПараметров.ИсключатьУслугиВЗапросе = Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбораУслуг", "ИСТИНА");
		ИначеЕсли СтруктураПараметров.ИсключатьУслугиВЗапросе = Истина Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбораУслуг", "НЕ Услуга В (&СписокУслуг)");
		ИначеЕсли СтруктураПараметров.ИсключатьУслугиВЗапросе = Ложь Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбораУслуг", "Услуга В (&СписокУслуг)");
		КонецЕсли;
		
		СтруктураРезультатов.Оплаты = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
#КонецОбласти // Оплаты_Из_Регистра
	
#Область Задолженность_По_Месяцам
	
	Если СтруктураРезультатов.Свойство("ЗадолженностьПоМесяцам") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	КОНЕЦПЕРИОДА(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Период, МЕСЯЦ) КАК Период,
		|	СУММА(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияКонечныйОстаток) КАК Задолженность
		|ПОМЕСТИТЬ втЗадолженности
		|ИЗ
		|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.ОстаткиИОбороты(
		|			&ПериодНачало,
		|			&ПериодКонец,
		|			МЕСЯЦ,
		|			,
		|			Организация В
		|					(ВЫБРАТЬ
		|						втОрганизации.Организация
		|					ИЗ
		|						втОрганизации КАК втОрганизации)
		|				И &УсловиеОтбораУслуг
		|				И ЛицевойСчет В (&СписокЛС)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	КОНЕЦПЕРИОДА(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Период, МЕСЯЦ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 12
		|	врТаблицаПериодов.Период КАК Период,
		|	ЕСТЬNULL(втЗадолженности.Задолженность, NULL) КАК Задолженность
		|ПОМЕСТИТЬ врОсновная
		|ИЗ
		|	врТаблицаПериодов КАК врТаблицаПериодов
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЗадолженности КАК втЗадолженности
		|		ПО врТаблицаПериодов.Период = втЗадолженности.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	врОсновная.Период КАК Период,
		|	ЕСТЬNULL(врОсновная.Задолженность, врОсновная1.Задолженность) КАК Задолженность
		|ИЗ
		|	врОсновная КАК врОсновная
		|		ЛЕВОЕ СОЕДИНЕНИЕ врОсновная КАК врОсновная1
		|		ПО (ВЫБОР
		|				КОГДА врОсновная.Задолженность ЕСТЬ NULL
		|					ТОГДА врОсновная.Период < врОсновная1.Период
		|				ИНАЧЕ врОсновная.Период = врОсновная1.Период
		|			КОНЕЦ)
		|ГДЕ
		|	НЕ врОсновная1.Задолженность ЕСТЬ NULL";
		
		Если СтруктураПараметров.ИсключатьУслугиВЗапросе = Неопределено Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбораУслуг", "ИСТИНА");
		ИначеЕсли СтруктураПараметров.ИсключатьУслугиВЗапросе = Истина Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбораУслуг", "НЕ Услуга В (&СписокУслуг)");
		ИначеЕсли СтруктураПараметров.ИсключатьУслугиВЗапросе = Ложь Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеОтбораУслуг", "Услуга В (&СписокУслуг)");
		КонецЕсли;
		
		ЗадолженностьПоМесяцам = Запрос.Выполнить().Выгрузить();
		СтруктураРезультатов.ЗадолженностьПоМесяцам = ЗадолженностьПоМесяцам;
	КонецЕсли;
	
#КонецОбласти // Задолженность_По_Месяцам
	
#Область Задолженность_На_Конец_Периода
	
	Если СтруктураРезультатов.Свойство("ЗадолженностьНаКонецПериода") Тогда
		Если ЗадолженностьПоМесяцам.Количество() = 0 Тогда
			СтруктураРезультатов.ЗадолженностьНаКонецПериода = ЗадолженностьПоМесяцам.СкопироватьКолонки();
		Иначе
			ПоследнийИндекс = ЗадолженностьПоМесяцам.Количество() - 1;
			МассивСтрок = Новый Массив;
			МассивСтрок.Добавить(ЗадолженностьПоМесяцам[ПоследнийИндекс]);
			
			СтруктураРезультатов.ЗадолженностьНаКонецПериода = ЗадолженностьПоМесяцам.Скопировать(МассивСтрок);
		КонецЕсли;
	КонецЕсли;
	
#КонецОбласти // Задолженность_На_Конец_Периода
	
#Область Расход_По_ПУ
	
	Если СтруктураРезультатов.Свойство("РасходПоПоказаниям") Тогда
		Если Не СтруктураПараметров.Свойство("Счетчик") Тогда
			
			// Текст запроса для формирования графика из справочников "Здания" и "Лицевые счета" - отбор по объекту и услуге.
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги КАК УслугаСчетчика
			|ПОМЕСТИТЬ втУслугиЗакрепленныхПУ
			|ИЗ
			|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
			|			&ПериодКонец,
			|			Объект В (&СписокОбъектовДляОтбораПУ)
			|				И ДатаИзменения <= &ПериодКонец
			|				И &ОтборПоУслуге1) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
			|ГДЕ
			|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	КВП_ЗакрепленныеСчетчики.Счетчик.ВидУслуги
			|ИЗ
			|	РегистрСведений.КВП_ЗакрепленныеСчетчики КАК КВП_ЗакрепленныеСчетчики
			|ГДЕ
			|	КВП_ЗакрепленныеСчетчики.Объект В(&СписокОбъектовДляОтбораПУ)
			|	И КВП_ЗакрепленныеСчетчики.ДатаИзменения МЕЖДУ &ПериодНачало И &ПериодКонец
			|	И КВП_ЗакрепленныеСчетчики.Действует
			|	И &ОтборПоУслуге2
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КОНЕЦПЕРИОДА(УПЖКХ_РасчетПриборовУчетаОбороты.Период, МЕСЯЦ) КАК Период,
			|	УПЖКХ_РасчетПриборовУчетаОбороты.Услуга,
			|	СУММА(УПЖКХ_РасчетПриборовУчетаОбороты.ПоказаниеПриход) КАК Показание
			|ПОМЕСТИТЬ втПоказания
			|ИЗ
			|	РегистрНакопления.УПЖКХ_РасчетПриборовУчета.Обороты(
			|			&ПериодНачало,
			|			&ПериодКонец,
			|			Регистратор,
			|			Объект В (&СписокОбъектовДляОтбораПУ)
			|				И Услуга В
			|					(ВЫБРАТЬ
			|						УслугиЗакрепленныхПУ.УслугаСчетчика
			|					ИЗ
			|						втУслугиЗакрепленныхПУ КАК УслугиЗакрепленныхПУ)) КАК УПЖКХ_РасчетПриборовУчетаОбороты
			|
			|СГРУППИРОВАТЬ ПО
			|	КОНЕЦПЕРИОДА(УПЖКХ_РасчетПриборовУчетаОбороты.Период, МЕСЯЦ),
			|	УПЖКХ_РасчетПриборовУчетаОбороты.Услуга
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	врТаблицаПериодов.Период,
			|	втУслугиЗакрепленныхПУ.УслугаСчетчика КАК Услуга
			|ПОМЕСТИТЬ врВсеУслугиИПериоды
			|ИЗ
			|	врТаблицаПериодов КАК врТаблицаПериодов,
			|	втУслугиЗакрепленныхПУ КАК втУслугиЗакрепленныхПУ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	врВсеУслугиИПериоды.Период КАК Период,
			|	врВсеУслугиИПериоды.Услуга,
			|	врВсеУслугиИПериоды.Услуга.ВидУслуги.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ЕСТЬNULL(втПоказания.Показание, 0) КАК Показание,
			|	ВЫБОР
			|		КОГДА НЕ &ТекущаяУслугаТаблицыГрафиков = ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)
			|				И &ТекущаяУслугаТаблицыГрафиков = врВсеУслугиИПериоды.Услуга
			|			ТОГДА 1
			|		ИНАЧЕ 2
			|	КОНЕЦ КАК Порядок
			|ИЗ
			|	врВсеУслугиИПериоды КАК врВсеУслугиИПериоды
			|		ПОЛНОЕ СОЕДИНЕНИЕ втПоказания КАК втПоказания
			|		ПО врВсеУслугиИПериоды.Период = втПоказания.Период
			|			И врВсеУслугиИПериоды.Услуга = втПоказания.Услуга
			|
			|УПОРЯДОЧИТЬ ПО
			|	Порядок,
			|	Период";
			
			Если НастройкиГрафиков.УслугаПУ.Пустая() Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ОтборПоУслуге1", "");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &ОтборПоУслуге2", "");
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоУслуге1", "Счетчик.ВидУслуги В (&СписокУслуг)");
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборПоУслуге2", "КВП_ЗакрепленныеСчетчики.Счетчик.ВидУслуги В (&СписокУслуг)");
				СписокУслуг  = Новый СписокЗначений;
				СписокУслуг.Добавить(НастройкиГрафиков.УслугаПУ);
				Запрос.УстановитьПараметр("СписокУслуг", СписокУслуг);
			КонецЕсли;
			
			Запрос.УстановитьПараметр("ТекущаяУслугаТаблицыГрафиков", НастройкиГрафиков.УслугаПУ);
			
		Иначе
			
			// Текст запроса для формирования графика из справочника "Счетчики" - отбор только по счетчику.
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги КАК УслугаСчетчика
			|ПОМЕСТИТЬ втУслугиЗакрепленныхПУ
			|ИЗ
			|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(&ПериодКонец, Счетчик В (&Счетчики) И ДатаИзменения <= &ПериодКонец) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	КВП_ЗакрепленныеСчетчики.Счетчик.ВидУслуги
			|ИЗ
			|	РегистрСведений.КВП_ЗакрепленныеСчетчики КАК КВП_ЗакрепленныеСчетчики
			|ГДЕ
			|	КВП_ЗакрепленныеСчетчики.ДатаИзменения МЕЖДУ &ПериодНачало И &ПериодКонец
			|	И КВП_ЗакрепленныеСчетчики.Счетчик В(&Счетчики)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КОНЕЦПЕРИОДА(УПЖКХ_РасчетПриборовУчетаОбороты.Период, МЕСЯЦ) КАК Период,
			|	УПЖКХ_РасчетПриборовУчетаОбороты.Услуга,
			|	СУММА(УПЖКХ_РасчетПриборовУчетаОбороты.ПоказаниеПриход) КАК Показание
			|ПОМЕСТИТЬ втПоказания
			|ИЗ
			|	РегистрНакопления.УПЖКХ_РасчетПриборовУчета.Обороты(&ПериодНачало, &ПериодКонец, Регистратор, Счетчик В (&Счетчики)) КАК УПЖКХ_РасчетПриборовУчетаОбороты
			|
			|СГРУППИРОВАТЬ ПО
			|	КОНЕЦПЕРИОДА(УПЖКХ_РасчетПриборовУчетаОбороты.Период, МЕСЯЦ),
			|	УПЖКХ_РасчетПриборовУчетаОбороты.Услуга
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	врТаблицаПериодов.Период,
			|	втУслугиЗакрепленныхПУ.УслугаСчетчика КАК Услуга
			|ПОМЕСТИТЬ врВсеУслугиИПериоды
			|ИЗ
			|	врТаблицаПериодов КАК врТаблицаПериодов,
			|	втУслугиЗакрепленныхПУ КАК втУслугиЗакрепленныхПУ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	врВсеУслугиИПериоды.Период КАК Период,
			|	врВсеУслугиИПериоды.Услуга,
			|	врВсеУслугиИПериоды.Услуга.ВидУслуги.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ЕСТЬNULL(втПоказания.Показание, 0) КАК Показание,
			|	1 КАК Порядок
			|ИЗ
			|	врВсеУслугиИПериоды КАК врВсеУслугиИПериоды
			|		ПОЛНОЕ СОЕДИНЕНИЕ втПоказания КАК втПоказания
			|		ПО врВсеУслугиИПериоды.Период = втПоказания.Период
			|			И врВсеУслугиИПериоды.Услуга = втПоказания.Услуга
			|
			|УПОРЯДОЧИТЬ ПО
			|	Порядок,
			|	Период";
			
			МассивСчетчиков = Новый Массив;
			МассивСчетчиков.Добавить(СтруктураПараметров.Счетчик);
			// В качестве параметра может быть передан как счетчик, так и целая группа счетчиков.
			Если СтруктураПараметров.Счетчик.ЭтоГруппа Тогда
				
				ЗапросСчетчиковВнутриГруппы = Новый Запрос;
				ЗапросСчетчиковВнутриГруппы.Текст =
				"ВЫБРАТЬ
				|	КВП_Счетчики.Ссылка
				|ИЗ
				|	Справочник.КВП_Счетчики КАК КВП_Счетчики
				|ГДЕ
				|	КВП_Счетчики.Родитель В ИЕРАРХИИ(&ГруппаСчетчиков)
				|	И НЕ КВП_Счетчики.ЭтоГруппа
				|	И НЕ КВП_Счетчики.ПометкаУдаления";
				ЗапросСчетчиковВнутриГруппы.УстановитьПараметр("ГруппаСчетчиков", СтруктураПараметров.Счетчик);
				ВыборкаСчетчиков = ЗапросСчетчиковВнутриГруппы.Выполнить().Выбрать();
				Пока ВыборкаСчетчиков.Следующий() Цикл
					МассивСчетчиков.Добавить(ВыборкаСчетчиков.Ссылка);
				КонецЦикла;
				
			КонецЕсли;
			
			Запрос.УстановитьПараметр("Счетчики", МассивСчетчиков);
			
		КонецЕсли;
		
		СтруктураРезультатов.РасходПоПоказаниям = Запрос.Выполнить().Выгрузить();
		
	КонецЕсли;
	
#КонецОбласти // Расход_По_ПУ

#Область Начисления_ПоЛьготам
	
	Если СтруктураРезультатов.Свойство("НачисленияПоЛьготам") Тогда
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОНЕЦПЕРИОДА(УПЖКХ_НачисленияОбороты.Период, МЕСЯЦ) КАК Период,
		|	УПЖКХ_НачисленияОбороты.Услуга,
		|	СУММА(ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
		|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления)
		|					ИЛИ УПЖКХ_НачисленияОбороты.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Корректировка)
		|				ТОГДА 0
		|			ИНАЧЕ УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот
		|		КОНЕЦ) КАК Начислено
		|ПОМЕСТИТЬ втНачисленияБезЛьготы
		|ИЗ
		|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
		|			&ПериодНачало,
		|			&ПериодКонец,
		|			РЕГИСТРАТОР,
		|			Организация В
		|					(ВЫБРАТЬ
		|						втОрганизации.Организация
		|					ИЗ
		|						втОрганизации КАК втОрганизации)
		|				И ЛицевойСчет В (&СписокЛС)
		|				И НЕ ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат))
		|				И НЕ РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)) КАК УПЖКХ_НачисленияОбороты
		|ГДЕ
		|	ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.Регистратор ССЫЛКА Документ.КВП_РегистрацияОплаты
		|				ТОГДА НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Рассрочка)
		|						И НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	КОНЕЦПЕРИОДА(УПЖКХ_НачисленияОбороты.Период, МЕСЯЦ),
		|	УПЖКХ_НачисленияОбороты.Услуга
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КОНЕЦПЕРИОДА(УПЖКХ_НачисленияОбороты.Период, МЕСЯЦ) КАК Период,
		|	УПЖКХ_НачисленияОбороты.Услуга,
		|	СУММА(-УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот) КАК Льгота
		|ПОМЕСТИТЬ втНачисленияЛьготы
		|ИЗ
		|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
		|			&ПериодНачало,
		|			&ПериодКонец,
		|			РЕГИСТРАТОР,
		|			Организация В
		|					(ВЫБРАТЬ
		|						втОрганизации.Организация
		|					ИЗ
		|						втОрганизации КАК втОрганизации)
		|				И ЛицевойСчет В (&СписокЛС)
		|				И РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)) КАК УПЖКХ_НачисленияОбороты
		|ГДЕ
		|	ВЫБОР
		|			КОГДА УПЖКХ_НачисленияОбороты.Регистратор ССЫЛКА Документ.КВП_РегистрацияОплаты
		|				ТОГДА НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Рассрочка)
		|						И НЕ УПЖКХ_НачисленияОбороты.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление)
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|
		|СГРУППИРОВАТЬ ПО
		|	КОНЕЦПЕРИОДА(УПЖКХ_НачисленияОбороты.Период, МЕСЯЦ),
		|	УПЖКХ_НачисленияОбороты.Услуга
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втНачисленияЛьготы.Период,
		|	втНачисленияЛьготы.Услуга,
		|	втНачисленияЛьготы.Льгота,
		|	ЕСТЬNULL(втНачисленияБезЛьготы.Начислено, 0) КАК Начислено
		|ПОМЕСТИТЬ втНачисленияОсновная
		|ИЗ
		|	втНачисленияЛьготы КАК втНачисленияЛьготы
		|		ЛЕВОЕ СОЕДИНЕНИЕ втНачисленияБезЛьготы КАК втНачисленияБезЛьготы
		|		ПО втНачисленияЛьготы.Услуга = втНачисленияБезЛьготы.Услуга
		|			И втНачисленияЛьготы.Период = втНачисленияБезЛьготы.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	врТаблицаПериодов.Период,
		|	втНачисленияОсновная.Услуга
		|ПОМЕСТИТЬ врВсеУслугиИПериодыПоЛьготам
		|ИЗ
		|	врТаблицаПериодов КАК врТаблицаПериодов,
		|	втНачисленияОсновная КАК втНачисленияОсновная
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	врВсеУслугиИПериодыПоЛьготам.Период,
		|	врВсеУслугиИПериодыПоЛьготам.Услуга,
		|	врВсеУслугиИПериодыПоЛьготам.Услуга.ВидУслуги.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЕСТЬNULL(втНачисленияОсновная.Льгота, 0) КАК Льгота,
		|	ЕСТЬNULL(втНачисленияОсновная.Начислено, 0) КАК Начислено
		|ИЗ
		|	врВсеУслугиИПериодыПоЛьготам КАК врВсеУслугиИПериодыПоЛьготам
		|		ПОЛНОЕ СОЕДИНЕНИЕ втНачисленияОсновная КАК втНачисленияОсновная
		|		ПО врВсеУслугиИПериодыПоЛьготам.Период = втНачисленияОсновная.Период
		|			И врВсеУслугиИПериодыПоЛьготам.Услуга = втНачисленияОсновная.Услуга";
		
		СтруктураРезультатов.НачисленияПоЛьготам = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
#КонецОбласти // Начисления_ПоЛьготам
	
	Возврат СтруктураРезультатов;
	
КонецФункции // Графики_ПолучитьСтруктуруРезультатовЗапроса()

// Формирует и возвращает текст заголовка диаграммы.
Функция Графики_СформироватьЗаголовокДиаграммы(ИмяДиаграммы, ТекущийТипДиаграммы, НастройкиГрафиков)
	
	СтруктураРезультатов = НастройкиГрафиков.СтруктураРезультатов;
	ЗаголовокДиаграммы   = "";
	
	Если ИмяДиаграммы = "НачисленияИОплаты" Тогда
		
		ЗаголовокДиаграммы = "Начисления и оплаты";
		
	ИначеЕсли ИмяДиаграммы = "ПроцентСобираемости" Тогда
		
		ЗаголовокДиаграммы = "Процент собираемости оплат";
		
	ИначеЕсли ИмяДиаграммы = "НачисленияИОплатыПени" Тогда
		
		ЗаголовокДиаграммы = "Начисления и оплаты пени";
		
	ИначеЕсли ИмяДиаграммы = "ПроцентСобираемостиПоПени" Тогда
		
		ЗаголовокДиаграммы = "Процент собираемости оплат по пени";
		
	ИначеЕсли ИмяДиаграммы = "НачисленияПоЛьготам" Тогда
		
		ЗаголовокДиаграммы = "Начисления по льготам";
		
	ИначеЕсли ИмяДиаграммы = "ЗадолженностьПоМесяцам" Тогда
		
		Если ТекущийТипДиаграммы = ТипДиаграммы.Круговая
		 ИЛИ ТекущийТипДиаграммы = ТипДиаграммы.КруговаяОбъемная Тогда
			ЗаголовокДиаграммы = "Задолженность на конец месяца """
								+ Формат(НастройкиГрафиков.СтруктураПараметров.Графики_КонецПериодаДата, "ДФ='MMMM yyyy'")
								+ """";
		Иначе
			ЗаголовокДиаграммы = "Задолженность по месяцам";
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяДиаграммы = "НачисленияИОплаты"
	 ИЛИ ИмяДиаграммы = "НачисленияИОплатыПени"
	 ИЛИ ИмяДиаграммы = "ЗадолженностьПоМесяцам"
	 ИЛИ ИмяДиаграммы = "НачисленияПоЛьготам" Тогда
		
		ЗаголовокДиаграммы = ЗаголовокДиаграммы + " (в руб.)";
		
	ИначеЕсли ИмяДиаграммы = "ПроцентСобираемости"
		  ИЛИ ИмяДиаграммы = "ПроцентСобираемостиПоПени" Тогда
		
		ЗаголовокДиаграммы = ЗаголовокДиаграммы + " (в %)";
		
	КонецЕсли;
	
	Возврат ЗаголовокДиаграммы;
	
КонецФункции // Графики_СформироватьЗаголовокДиаграммы()

// Подготавливает таблицу цветов.
Функция Графики_ПолучитьТаблицуЦветовПоУслугам(МассивУслуг, мЦвета)
	
	ТаблицаЦветовПоУслугам = Новый ТаблицаЗначений;
	ТаблицаЦветовПоУслугам.Колонки.Добавить("Услуга", Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
	ТаблицаЦветовПоУслугам.Колонки.Добавить("Цвет", Новый ОписаниеТипов("Цвет"));
	
	Сч = 0;
	Для Каждого ТекущаяУслуга Из МассивУслуг Цикл
		Если ТипЗнч(ТекущаяУслуга) = Тип("СправочникСсылка.КВП_Услуги")
		   И НЕ ТекущаяУслуга.Пустая() Тогда
			//
			НоваяСтрока = ТаблицаЦветовПоУслугам.Добавить();
			НоваяСтрока.Услуга = ТекущаяУслуга;
			НоваяСтрока.Цвет   = мЦвета[Сч];
			
			Сч = Сч + 1;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаЦветовПоУслугам;
	
КонецФункции // ТаблицаЦветовПоУслугам()

#КонецОбласти

#КонецЕсли