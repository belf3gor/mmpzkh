
#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура-обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ИмяОбъекта", ИмяОбъекта);
	Параметры.Свойство("ВидГрафика", ВидГрафика);
	
	МассивСпособовРасчета = Новый Массив();
	МассивСпособовРасчета.Добавить(Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчика);
	МассивСпособовРасчета.Добавить(Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме);
	
	МассивПараметров = Новый Массив();
	МассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.СпособРасчета", МассивСпособовРасчета));
	ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметров);
	
	Элементы.УслугаПУ.ПараметрыВыбора = ПараметрыВыбора;
	
	НастройкиГрафиков = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить(ИмяОбъекта , "НастройкиГрафиков");
	
	Если ТипЗнч(НастройкиГрафиков) = Тип("Структура") Тогда
		
		НастройкиГрафиков.Свойство("ВыводитьГрафики",                         ВыводитьГрафики);
		НастройкиГрафиков.Свойство("УслугаПУ",                                УслугаПУ);
		НастройкиГрафиков.Свойство("МетодВыводаУслугВДиаграммах",             МетодВыводаУслугВДиаграммах);
		НастройкиГрафиков.Свойство("СоответствиеТиповДиаграмм",               СоответствиеТиповДиаграмм);
		НастройкиГрафиков.Свойство("СписокТиповДиаграмм",                     СписокТиповДиаграмм);
		
		Для каждого ТипДиаграмм из СписокТиповДиаграмм Цикл
			Элементы.ТипДиаграммыЗадолженностьПоМесяцам.СписокВыбора.Добавить(ТипДиаграмм.Значение,ТипДиаграмм.Представление);
			Элементы.ТипДиаграммыНачисленияИОплаты.СписокВыбора.Добавить(ТипДиаграмм.Значение,ТипДиаграмм.Представление);
			Элементы.ТипДиаграммыНачисленияИОплатыПени.СписокВыбора.Добавить(ТипДиаграмм.Значение,ТипДиаграмм.Представление);
			Элементы.ТипДиаграммыНачисленияПоЛьготам.СписокВыбора.Добавить(ТипДиаграмм.Значение,ТипДиаграмм.Представление);
			Элементы.ТипДиаграммыПроцентСобираемости.СписокВыбора.Добавить(ТипДиаграмм.Значение,ТипДиаграмм.Представление);
			Элементы.ТипДиаграммыПроцентСобираемостиПоПени.СписокВыбора.Добавить(ТипДиаграмм.Значение,ТипДиаграмм.Представление);
			Элементы.ТипДиаграммыРасходПоПоказаниямСчетчиков.СписокВыбора.Добавить(ТипДиаграмм.Значение,ТипДиаграмм.Представление);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Процедура-обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	УправлениеФормой();
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Процедура-обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьНастройкиНаСервере();
	
КонецПроцедуры // ПередЗакрытием()

&НаКлиенте
// Процедура-обработчик команды "СохранитьИЗакрыть".
Процедура СохранитьИЗакрыть(Команда)
	
	Закрыть(Новый Структура("ВыводитьГрафики", ВыводитьГрафики));
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийФормы

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Процедура-обработчик события "ПриИзменении" поля "УслугаПУ".
Процедура УслугаПУПриИзменении(Элемент)
	
	Если НЕ УслугаПУ.Пустая() Тогда
		Элементы.ГруппаГруппировки.Видимость = Ложь;
	Иначе 
		Элементы.ГруппаГруппировки.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры // УслугаПУПриИзменении()

&НаКлиенте
// Процедура-обработчик события "ПриИзменении" поля "ВыводитьГрафики".
Процедура ВыводитьГрафикиПриИзменении(Элемент)
	
	УправлениеФормой();
	
КонецПроцедуры // ВыводитьГрафикиПриИзменении()

// Обработчик события "ОбработкаВыбора" полей "ТипДиаграммыНачисленияИОплаты", "ТипДиаграммыПроцентСобираемости",
// "ТипДиаграммыНачисленияИОплатыПени", "ТипДиаграммыПроцентСобираемостиПоПени", "ТипДиаграммыЗадолженностьПоМесяцам",
// "ТипДиаграммыЗадолженностьПоМесяцам", "ТипДиаграммыНачисленияПоЛьготам".
&НаКлиенте
Процедура ТипДиаграммыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОбработатьРезультатВыбора(ВыбранноеЗначение, Элемент.Имя);
	
КонецПроцедуры

// Обработчик события "Очистка" поля "УслугаПУ".
&НаКлиенте
Процедура УслугаПУОчистка(Элемент, СтандартнаяОбработка)
	
	Элементы.Группагруппировки.Видимость = Истина;
	
КонецПроцедуры

#КонецОбласти // ОбработчикиСобытийЭлементовФормы

#Область ВспомогательныеПроцедурыИФункции

&НаКлиенте
// Процедура устанавливает видимость элементов формы.
Процедура УправлениеФормой()
	
	Элементы.ГруппаНастроекГрафиков.Видимость = ВыводитьГрафики;
	
	// Данная группа будет видима при открытии настроек из вкладки «Взаиморасчеты» формы списка справочника «Здания»
	// и из вкладок "Взаиморасчеты" и "Карточка расчетов" формы списка справочника «Лицевые счета».
	Элементы.ГруппаНастроекТиповГрафиков.Видимость = (ВидГрафика ="Взаиморасчеты" ИЛИ ВидГрафика ="Карточка расчетов");
	
	// Данная группа будет видима при открытии настроек из формы списка справочника «Счетчики» и закладки «Счетчики»
	// форм списов справочников «Здания, сооружения» и «Лицевые счета».
	Элементы.ГруппаУслугаПУ.Видимость = (ВидГрафика ="Счетчики");
	
	// Данная группа будет видима при открытии настроек из вкладки «Счетчики»
	// форм списка справочников «Здания» и «Лицевые счета».
	// Не будет невидима при открытии настроек из формы списка справочника «Счетчики» и при при открытии настроек из
	// формы обработки «Формирование аналитических графиков по данным учета», когда в поле "Объект" выбран Счетчик.
	Элементы.ГруппаПараметров.Видимость = (ВидГрафика ="Счетчики" И НЕ ИмяОбъекта= "КВП_Счетчики");
	
	// Данная группа будет видима при открытии настроек из вкладки «Льготники» формы списка справочника «Лицевые счета».
	Элементы.ГруппаЛьготники.Видимость = (ВидГрафика ="Льготники");
	
	Если НЕ УслугаПУ.Пустая() Тогда
		Элементы.ГруппаГруппировки.Видимость = Ложь;
	КонецЕсли;
	
	Если ВыводитьГрафики Тогда
		
		ОбновитьЗначениеТипаДиаграммыПоУмолчанию();
		ОбновитьНаименованияТиповДиаграмм();
		
	КонецЕсли;
	
КонецПроцедуры // УправлениеФормой()

&НаКлиенте
// Обработчик результата выбора из списка.
Процедура ОбработатьРезультатВыбора(ВыбранныйЭлемент, ИмяГрафика)
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Вычислить(ИмяГрафика) <> ВыбранныйЭлемент Тогда
		
		Попытка
			
			Выполнить(ИмяГрафика + " = ВыбранныйЭлемент");
			
			Если ИмяГрафика = "ТипДиаграммыНачисленияИОплаты" Тогда
				ИмяДиаграммы = "НачисленияИОплаты";
			ИначеЕсли ИмяГрафика = "ТипДиаграммыНачисленияИОплатыПени" Тогда
				ИмяДиаграммы = "НачисленияИОплатыПени";
			ИначеЕсли ИмяГрафика = "ТипДиаграммыПроцентСобираемости" Тогда
				ИмяДиаграммы = "ПроцентСобираемости";
			ИначеЕсли ИмяГрафика = "ТипДиаграммыПроцентСобираемостиПоПени" Тогда
				ИмяДиаграммы = "ПроцентСобираемостиПоПени";
			ИначеЕсли ИмяГрафика = "ТипДиаграммыНачисленияПоЛьготам" Тогда
				ИмяДиаграммы = "НачисленияПоЛьготам";
			ИначеЕсли ИмяГрафика = "ТипДиаграммыЗадолженностьПоМесяцам" Тогда
				ИмяДиаграммы = "ЗадолженностьПоМесяцам"
			ИначеЕсли ИмяГрафика = "ТипДиаграммыРасходПоПоказаниямСчетчиков" Тогда
				ИмяДиаграммы = "РасходПоПУ";
			КонецЕсли;
			
			СоответствиеТиповДиаграмм.НайтиПоЗначению(ИмяДиаграммы).Представление = ВыбранныйЭлемент;
			
		Исключение КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВыбора

&НаКлиенте
// Возвращает тип диаграммы по умолчанию.
Процедура ОбновитьЗначениеТипаДиаграммыПоУмолчанию()
	
	ТипДиаграммыПоУмолчаниюНайден = Ложь;
	
	Для Каждого ТекТип Из СписокТиповДиаграмм Цикл
		Если ТекТип.Пометка Тогда
			ЭлементПоУмолчанию            = ТекТип;
			ТипДиаграммыПоУмолчаниюНайден = Истина;
			
			// Обновляем пометки остальных элементов в ЛОЖЬ в случае непредвиденных ситуаций:
			Для Каждого ТекЭлемент Из СписокТиповДиаграмм Цикл
				Если ТекЭлемент <> ЭлементПоУмолчанию И ТекЭлемент.Пометка Тогда
					ТекЭлемент.Пометка = Ложь;
				КонецЕсли;
			КонецЦикла;
			
			// Если значение по умолчанию уже найдено, то прерываем обход списка:
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ТипДиаграммыПоУмолчаниюНайден Тогда
		
		ИмяТипаДиаграммыПоУмолчанию           = ЭлементПоУмолчанию.Значение;
		ПредставлениеТипаДиаграммыПоУмолчанию = ЭлементПоУмолчанию.Представление;
		
	Иначе
		
		// Если тип диаграммы по умолчанию не найден, то назначаем первый элемент списка
		// типов диаграмм значением по умолчанию:
		ЭлементПоУмолчанию = СписокТиповДиаграмм[0];
		
		// Установим пометку для определения типа диаграммы по умолчанию
		// в дальнейшем:
		ЭлементПоУмолчанию.Пометка = Истина;
		
		// Определять тип диаграммы по умолчанию будем по значению следующих реквизитов формы:
		ИмяТипаДиаграммыПоУмолчанию           = ЭлементПоУмолчанию.Значение;
		ПредставлениеТипаДиаграммыПоУмолчанию = ЭлементПоУмолчанию.Представление;
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьЗначениеТипаДиаграммыПоУмолчанию()

&НаКлиенте
// Обновляет текст типов графиков на форме.
Процедура ОбновитьНаименованияТиповДиаграмм()
	
	ИмяТипаДиаграммыНачисленияИОплаты = СоответствиеТиповДиаграмм.НайтиПоЗначению("НачисленияИОплаты").Представление;
	ТипДиаграммыНачисленияИОплаты     = СписокТиповДиаграмм.НайтиПоЗначению(ИмяТипаДиаграммыНачисленияИОплаты).Значение;
	
	ИмяТипаДиаграммыПроцентСобираемости = СоответствиеТиповДиаграмм.НайтиПоЗначению("ПроцентСобираемости").Представление;
	ТипДиаграммыПроцентСобираемости     = СписокТиповДиаграмм.НайтиПоЗначению(ИмяТипаДиаграммыПроцентСобираемости).Значение;
	
	ИмяТипаДиаграммыНачисленияИОплатыПени = СоответствиеТиповДиаграмм.НайтиПоЗначению("НачисленияИОплатыПени").Представление;
	ТипДиаграммыНачисленияИОплатыПени     = СписокТиповДиаграмм.НайтиПоЗначению(ИмяТипаДиаграммыНачисленияИОплатыПени).Значение;
	
	Если ИмяОбъекта = "КВП_ЛицевыеСчета" Тогда
		ИмяТипаДиаграммыНачисленияПоЛьготам = СоответствиеТиповДиаграмм.НайтиПоЗначению("НачисленияПоЛьготам").Представление;
		ТипДиаграммыНачисленияПоЛьготам     = СписокТиповДиаграмм.НайтиПоЗначению(ИмяТипаДиаграммыНачисленияПоЛьготам).Значение;
	КонецЕсли;
	
	ИмяТипаДиаграммыПроцентСобираемостиПоПени = СоответствиеТиповДиаграмм.НайтиПоЗначению("ПроцентСобираемостиПоПени").Представление;
	ТипДиаграммыПроцентСобираемостиПоПени     = СписокТиповДиаграмм.НайтиПоЗначению(ИмяТипаДиаграммыПроцентСобираемостиПоПени).Значение;
	
	ИмяТипаДиаграммыЗадолженностьПоМесяцам = СоответствиеТиповДиаграмм.НайтиПоЗначению("ЗадолженностьПоМесяцам").Представление;
	ТипДиаграммыЗадолженностьПоМесяцам     = СписокТиповДиаграмм.НайтиПоЗначению(ИмяТипаДиаграммыЗадолженностьПоМесяцам).Значение;
	
	ИмяТипаДиаграммыРасходПоПоказаниямСчетчиков = СоответствиеТиповДиаграмм.НайтиПоЗначению("РасходПоПУ").Представление;
	ТипДиаграммыРасходПоПоказаниямСчетчиков     = СписокТиповДиаграмм.НайтиПоЗначению(ИмяТипаДиаграммыРасходПоПоказаниямСчетчиков).Значение;
	
КонецПроцедуры // ОбновитьНаименованияТиповДиаграмм()

&НаСервере
// Сохраняет настройки графиков на сервере.
Процедура СохранитьНастройкиНаСервере()
	
	НастройкиГрафиков = Новый Структура;
	
	НастройкиГрафиков.Вставить("ВыводитьГрафики",                         ВыводитьГрафики);
	НастройкиГрафиков.Вставить("ТипДиаграммыНачисленияИОплаты",           ТипДиаграммыНачисленияИОплаты);
	НастройкиГрафиков.Вставить("ТипДиаграммыПроцентСобираемости",         ТипДиаграммыПроцентСобираемости);
	НастройкиГрафиков.Вставить("ТипДиаграммыНачисленияИОплатыПени",       ТипДиаграммыНачисленияИОплатыПени);
	НастройкиГрафиков.Вставить("ТипДиаграммыПроцентСобираемостиПоПени",   ТипДиаграммыПроцентСобираемостиПоПени);
	НастройкиГрафиков.Вставить("ТипДиаграммыЗадолженностьПоМесяцам",      ТипДиаграммыЗадолженностьПоМесяцам);
	НастройкиГрафиков.Вставить("ТипДиаграммыРасходПоПоказаниямСчетчиков", ТипДиаграммыРасходПоПоказаниямСчетчиков);
	НастройкиГрафиков.Вставить("УслугаПУ",                                УслугаПУ);
	НастройкиГрафиков.Вставить("МетодВыводаУслугВДиаграммах",             МетодВыводаУслугВДиаграммах);
	НастройкиГрафиков.Вставить("СоответствиеТиповДиаграмм",               СоответствиеТиповДиаграмм);
	НастройкиГрафиков.Вставить("СписокТиповДиаграмм",                     СписокТиповДиаграмм);
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить(ИмяОбъекта , "НастройкиГрафиков", НастройкиГрафиков);
	
КонецПроцедуры // СохранитьНастройкиНаСервере()

#КонецОбласти // ВспомогательныеПроцедурыИФункции
