
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Организация            = Параметры.Организация;
	ДатаНачалаДеятельности = КалендарьБухгалтера.ДатаНачалаДеятельности(Организация);
	
	Правило                 = Параметры.Правило;
	ПериодичностьОтчетности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Правило, "ФинансовыйПериод");
	
	ТекущийОтчетныйПериод = ?(ЗначениеЗаполнено(Параметры.ОтчетныйПериод),
		Параметры.ОтчетныйПериод,
		ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(ПериодичностьОтчетности, ОбщегоНазначения.ТекущаяДатаПользователя()));
	
	ТекущийВопросТеста = ?(ЗначениеЗаполнено(Параметры.НачальныйВопрос), Параметры.НачальныйВопрос, ПервыйВопросТеста());
	ОбщееКоличествоВопросов = КоличествоВопросовТеста(ТекущийВопросТеста);
	
	ВходныеДанные = НоваяТаблицаПериодов();
	
	Если ЭтоАдресВременногоХранилища(Параметры.АдресВходныхДанных) Тогда
		
		ДанныеПараметраФормы = ПолучитьИзВременногоХранилища(Параметры.АдресВходныхДанных);
		
		Для Каждого СтрокаТаблицы Из ДанныеПараметраФормы Цикл
			СтрокаВходныхДанных = ВходныеДанные.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаВходныхДанных, СтрокаТаблицы);
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьОтчетныеПериоды(ВходныеДанные);
	
	НачатьТест();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ТекущийВопросТеста = ИмяВопрос32() И В32_МогуУказатьПериод = "Год" Тогда
		
		ПроверяемыеРеквизиты.Добавить("В32_ПериодОбращенияВФНС");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// Заполним выбранный ответ в соответствии с загруженным из настроек значением переключателя.
	Если ТекущийВопросТеста = ИмяВопрос1() Тогда
		ИнициализироватьПереключатель(ЭтотОбъект, "В1_Ответ");
	ИначеЕсли ТекущийВопросТеста = ИмяВопрос2() Тогда
		ИнициализироватьПереключатель(ЭтотОбъект, "В2_Ответ");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОтветПереключательПриИзменении(Элемент)
	
	ВыбранныйОтвет = ЭтотОбъект[Элемент.Имя];
	
КонецПроцедуры

&НаКлиенте
Процедура НеМогуУказатьПериодПриИзменении(Элемент)
	
	УстановитьДоступностьПериодаОбращенияВФНС(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура МогуУказатьГодПриИзменении(Элемент)
	
	УстановитьДоступностьПериодаОбращенияВФНС(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КнопкаДалее(Команда)
	
	ПерейтиДалее();
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаНазад(Команда)
	
	ПерейтиНазад();
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаГотово(Команда)
	
	ЗавершитьТест();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НачатьТест()
	
	// Сначала сбросим видимость всех групп теста и кнопок.
	УстановитьВидимостьПодчиненныхЭлементов("ГруппаТест", Ложь);
	ОтключитьВидимостьКнопок();
	
	НомерТекущегоВопроса = 0;
	
	ШагВперед(ТекущийВопросТеста, "");
	
	// Далее отобразим только группу текущего вопроса и нужные кнопки.
	ОтобразитьВопрос(ТекущийВопросТеста);
	
КонецПроцедуры

&НаСервере
Процедура ПерейтиДалее()
	
	СкрытьВопрос(ТекущийВопросТеста);
	
	ШагВперед(ВыбранныйОтвет, ТекущийВопросТеста);
	
	ОтобразитьВопрос(ТекущийВопросТеста);
	
КонецПроцедуры

&НаСервере
Процедура ПерейтиНазад()
	
	СкрытьВопрос(ТекущийВопросТеста);
	
	ШагНазад(ТекущийВопросТеста);
	
	ОтобразитьВопрос(ТекущийВопросТеста);
	
КонецПроцедуры

&НаСервере
Процедура СкрытьВопрос(ИмяВопроса)
	
	Элементы[ИмяВопроса].Видимость = Ложь;
	ОтключитьВидимостьКнопок();
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьВопрос(ИмяВопроса)
	
	Если НЕ ЗначениеЗаполнено(ИмяВопроса) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяВопроса = ИмяВопрос1() Тогда
		ПодготовитьТест1();
	ИначеЕсли ИмяВопроса = ИмяВопрос2() Тогда
		ПодготовитьТест2();
	ИначеЕсли ИмяВопроса = ИмяВопрос31() Тогда
		ПодготовитьТест31();
	ИначеЕсли ИмяВопроса = ИмяВопрос32() Тогда
		ПодготовитьТест32();
	ИначеЕсли ИмяВопроса = ИмяВопрос33() Тогда
		ПодготовитьТест33();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьТест1()
	
	ГруппаТеста = ИмяВопрос1();
	
	Элементы[ГруппаТеста].Видимость = Истина;
	
	ЭтотОбъект.Заголовок = НСтр("ru = 'Вопрос 1'");
	Элементы.НадписьВопрос1.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Сдали ли Вы отчеты за периоды ранее %1?'"),
		ОтчетныйПериодВРодительномПадеже(ТекущийОтчетныйПериод, ПериодичностьОтчетности));
	
	ИнициализироватьПереключатель(ЭтотОбъект, "В1_Ответ");
	
	Элементы.КнопкаДалее.Видимость = Истина;
	Элементы.КнопкаДалее.КнопкаПоУмолчанию = Истина;
	Элементы.КнопкаНазад.Видимость = ЕстьПредыдущийВопрос(ГруппаТеста);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьТест2()
	
	ГруппаТеста = ИмяВопрос2();
	
	ЭтотОбъект.Заголовок = ТекстНомерВопроса(НомерТекущегоВопроса, ОбщееКоличествоВопросов);
	
	Элементы[ГруппаТеста].Видимость = Истина;
	
	ИнициализироватьПереключатель(ЭтотОбъект, "В2_Ответ");
	
	Элементы.КнопкаДалее.Видимость = Истина;
	Элементы.КнопкаДалее.КнопкаПоУмолчанию = Истина;
	Элементы.КнопкаНазад.Видимость = ЕстьПредыдущийВопрос(ГруппаТеста);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьТест31()
	
	ГруппаТеста = ИмяВопрос31();
	
	ЭтотОбъект.Заголовок = ТекстНомерВопроса(НомерТекущегоВопроса, ОбщееКоличествоВопросов);
	
	Элементы[ГруппаТеста].Видимость = Истина;
	
	Элементы.КнопкаГотово.Видимость         = Истина;
	Элементы.КнопкаГотово.КнопкаПоУмолчанию = Истина;
	Элементы.КнопкаНазад.Видимость = ЕстьПредыдущийВопрос(ГруппаТеста);
	
	// Флаги периодов.
	Для НомерЭлемента = 1 По 3 Цикл
		
		Элемент = Элементы["В31_ПометкаПрошедшийПериод" + НомерЭлемента];
		
		СтрокаПериода = ОтчетныеПериоды.НайтиПоИдентификатору(НомерЭлемента - 1);
		
		Если СтрокаПериода = Неопределено Тогда
			// Отчетного периода нет, скроем флаг.
			Элемент.Видимость = Ложь;
			ЭтотОбъект["В31_ПометкаПрошедшийПериод" + НомерЭлемента] = Ложь;
			ЭтотОбъект["В31_ПрошедшийПериод" + НомерЭлемента]        = 0;
		Иначе
			// Добавим флаг для прошлого периода
			Если СтрокаПериода.Период = ТекущийОтчетныйПериод Тогда
				// Текущий год не добавляем
				Прервать;
			КонецЕсли;
			
			ЗначениеГода = Год(СтрокаПериода.Период);
			
			ЭтотОбъект["В31_ПометкаПрошедшийПериод" + НомерЭлемента] = СтрокаПериода.Требуется;
			ЭтотОбъект["В31_ПрошедшийПериод" + НомерЭлемента]        = ЗначениеГода;
			
			Элемент.Видимость = Истина;
			Элемент.Заголовок = Формат(ЗначениеГода, "ЧН=0; ЧГ=0") + " " + НСтр("ru = 'год'")
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьТест32()
	
	ГруппаТеста = ИмяВопрос32();
	
	ЭтотОбъект.Заголовок = ТекстНомерВопроса(НомерТекущегоВопроса, ОбщееКоличествоВопросов);
	
	Элементы[ГруппаТеста].Видимость = Истина;
	
	Элементы.КнопкаГотово.Видимость = Истина;
	Элементы.КнопкаГотово.КнопкаПоУмолчанию = Истина;
	Элементы.КнопкаНазад.Видимость = ЕстьПредыдущийВопрос(ГруппаТеста);
	
	Если НЕ ЗначениеЗаполнено(В32_МогуУказатьПериод) Тогда
		В32_МогуУказатьПериод = "Год";
	КонецЕсли;
	
	ГодПервогоВизита = 2999; // Далекое будущее.
	
	Элементы.В32_ПериодОбращенияВФНС.СписокВыбора.Очистить();
	Для Каждого СтрокаПериода Из ОтчетныеПериоды Цикл
		
		ОтчетныйГод = Год(СтрокаПериода.Период);
		ГодВизита   = ОтчетныйГод + 1; // Отчетность сдается по завершении отчетного года.
		
		Элементы.В32_ПериодОбращенияВФНС.СписокВыбора.Добавить(ГодВизита, Формат(ГодВизита, "ЧГ=0"));
		
		Если СтрокаПериода.Требуется И ГодВизита < ГодПервогоВизита Тогда
			ГодПервогоВизита = ОтчетныйГод;
		КонецЕсли;
		
	КонецЦикла;
	
	СписокВыбораПериода = Элементы.В32_ПериодОбращенияВФНС.СписокВыбора;
	Если СписокВыбораПериода.НайтиПоЗначению(ГодПервогоВизита) <> Неопределено Тогда
		В32_ПериодОбращенияВФНС = ГодПервогоВизита;
	Иначе
		// Тест проходится в первый раз, либо результат предыдущего теста устарел из-за смены настроек организации.
		// Задаем текущий год.
		В32_ПериодОбращенияВФНС = СписокВыбораПериода[СписокВыбораПериода.Количество() - 1].Значение;
	КонецЕсли;
	
	ЧастиДополнения = Новый Массив;
	ЧастиДополнения.Добавить(НСтр("ru = 'Ваша отчетность будет дополнена декларациями за периоды, начиная с года последнего обращения в инспекцию.'"));
	ЧастиДополнения.Добавить(" ");
	
	Если ОтчетныеПериоды.Количество() < 3 Тогда
		ЧастиДополнения.Добавить(НСтр("ru = 'Если год обращения неизвестен, будут сформированы отчеты за все периоды с даты регистрации.'"));
	Иначе
		ЧастиДополнения.Добавить(НСтр("ru = 'Если год обращения неизвестен, будут сформированы отчеты за 3 последних года.'"));
	КонецЕсли;
	
	Элементы.НадписьДополнение322.Заголовок = Новый ФорматированнаяСтрока(ЧастиДополнения);
	
	УстановитьДоступностьПериодаОбращенияВФНС(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьТест33()
	
	ГруппаТеста = ИмяВопрос33();
	
	ЭтотОбъект.Заголовок = НСтр("ru = 'Сейчас не требуется сдавать отчетность'");
	
	Элементы[ГруппаТеста].Видимость = Истина;
	
	Элементы.НадписьСледующийОтчет.Заголовок = ТекстСледующийОтчет();
	
	Элементы.КнопкаГотово.Видимость = Истина;
	Элементы.КнопкаГотово.КнопкаПоУмолчанию = Истина;
	Элементы.КнопкаНазад.Видимость = ЕстьПредыдущийВопрос(ГруппаТеста);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьТест()
	
	Результат = ЗавершитьТестНаСервере();
	
	Если НЕ Результат.Выполнено Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить("ОтчетыПрошлыхПериодов_ПроверкаЗавершена",, Организация);
	
	Если Результат.ДобавленыПрошлыеПериоды Тогда
		
		ИмяФормыПомощника = "Обработка.ПодготовкаНулевойОтчетности.Форма.Форма";
		
		Если ВладелецФормы <> Неопределено
			И ВладелецФормы.ИмяФормы = ИмяФормыПомощника
			И ВладелецФормы.Открыта() Тогда
			
			ВладелецФормы.Активизировать();
			
		Иначе
			
			ПараметрыФормыПомощника = Новый Структура("Организация", Организация);
			
			ОткрытьФорму(ИмяФормыПомощника, ПараметрыФормыПомощника);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Функция ЗавершитьТестНаСервере()
	
	ПараметрыЗавершения = Новый Структура;
	ПараметрыЗавершения.Вставить("ДобавленыПрошлыеПериоды", Ложь);
	ПараметрыЗавершения.Вставить("Выполнено", Ложь);
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат ПараметрыЗавершения;
	КонецЕсли;
	
	Если ТекущийВопросТеста = ИмяВопрос31() Тогда
		ЗавершитьТест31();
	ИначеЕсли ТекущийВопросТеста = ИмяВопрос32() Тогда
		ЗавершитьТест32();
	ИначеЕсли ТекущийВопросТеста = ИмяВопрос33() Тогда
		ЗавершитьТест33();
	КонецЕсли;
	
	РезультатТеста = ПолучитьВыходныеДанные();
	
	ПараметрыЗавершения.Выполнено =
		РегистрыСведений.РезультатыПроверкиНалоговОтчетовПрошлыхПериодов.ЗарегистрироватьИзменения(РезультатТеста);
	ПараметрыЗавершения.ДобавленыПрошлыеПериоды = РезультатТеста.ДобавленыПрошлыеПериоды;
	
	Возврат ПараметрыЗавершения;
	
КонецФункции

&НаСервере
Процедура ЗавершитьТест31()
	
	Для НомерЭлемента = 1 По 3 Цикл
		
		Элемент  = Элементы["В31_ПометкаПрошедшийПериод" + НомерЭлемента];
		Отметка  = ЭтотОбъект["В31_ПометкаПрошедшийПериод" + НомерЭлемента];
		Значение = ЭтотОбъект["В31_ПрошедшийПериод" + НомерЭлемента];
		
		Если Элемент.Видимость Тогда
			ОтметитьОтчетныйПериод(Дата(Значение, 1, 1), Отметка);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьТест32()
	
	Если В32_МогуУказатьПериод = "Год" Тогда
		
		// Пользователь указал год последнего обращения в ФНС. Чаще всего при этом сдается отчет за прошлый год.
		// Следовательно, отчетность не сдана начиная с года последнего обращения. Его и задаем как минимальный из требуемых.
		Для Каждого СтрокаПериода Из ОтчетныеПериоды Цикл
			СтрокаПериода.Требуется = Год(СтрокаПериода.Период) >= В32_ПериодОбращенияВФНС;
		КонецЦикла;
		
	Иначе
		
		// Пользователь не помнит дату посещения налоговой, отмечаем все периоды нужными.
		Для Каждого СтрокаПериода Из ОтчетныеПериоды Цикл
			СтрокаПериода.Требуется = Истина;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьТест33()
	
	// Пользователь указал, что у него все сдано, отмечаем все периоды как ненужные.
	Для Каждого СтрокаПериода Из ОтчетныеПериоды Цикл
		СтрокаПериода.Требуется = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВыходныеДанные()
	
	ВыбранныеПериоды = НоваяТаблицаПериодов();
	
	ДобавленыПрошлыеПериоды = Ложь;
	
	Для Каждого СтрокаПериода Из ОтчетныеПериоды Цикл
		
		Если НЕ СтрокаПериода.Требуется И ВыбранныеПериоды.Количество() = 0 Тогда
			// Не добавляем ненужные периоды раньше, чем добавили самый ранний выбранный.
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ВыбранныеПериоды.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПериода);
		
		ДобавленыПрошлыеПериоды = ДобавленыПрошлыеПериоды ИЛИ СтрокаПериода.Требуется;
		
	КонецЦикла;
	
	Результат = Новый Структура;
	
	Результат.Вставить("Организация", Организация);
	Результат.Вставить("Правило", Правило);
	Результат.Вставить("ДобавленыПрошлыеПериоды", ДобавленыПрошлыеПериоды);
	Результат.Вставить("АдресТаблицыПериодов", ПоместитьВоВременноеХранилище(ВыбранныеПериоды, УникальныйИдентификатор));
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИнициализироватьПереключатель(Форма, ИмяЭлемента)
	
	Элементы = Форма.Элементы;
	
	Если НЕ ЗначениеЗаполнено(Форма[ИмяЭлемента]) Тогда // Не было сохранено в настройках
		Форма[ИмяЭлемента] = Элементы[ИмяЭлемента].СписокВыбора[0].Значение;
	КонецЕсли;
	
	Форма.ВыбранныйОтвет = Форма[ИмяЭлемента];
	
КонецПроцедуры

&НаСервере
Процедура ШагВперед(НовыйВопрос, ПредыдущийВопрос)
	
	Если НЕ ЗначениеЗаполнено(ПройденныйМаршрут) Тогда
		ПройденныйМаршрут = Новый Структура;
	КонецЕсли;
	
	ПройденныйМаршрут.Вставить(НовыйВопрос, ПредыдущийВопрос);
	
	ТекущийВопросТеста   = НовыйВопрос;
	НомерТекущегоВопроса = НомерТекущегоВопроса + 1;
	
КонецПроцедуры

&НаСервере
Процедура ШагНазад(ТекущийВопрос)
	
	ПредыдущийВопрос = ПредыдущийВопросТеста(ТекущийВопрос);
	
	ПройденныйМаршрут.Удалить(ТекущийВопрос);
	
	ТекущийВопросТеста   = ПредыдущийВопрос;
	НомерТекущегоВопроса = НомерТекущегоВопроса - 1;
	
КонецПроцедуры

&НаСервере
Функция ЕстьПредыдущийВопрос(ТекущийВопрос)
	
	Возврат ЗначениеЗаполнено(ПредыдущийВопросТеста(ТекущийВопрос));
	
КонецФункции

&НаСервере
Функция ПредыдущийВопросТеста(ТекущийВопрос)
	
	ПредыдущийВопрос = Неопределено;
	Если ЗначениеЗаполнено(ПройденныйМаршрут) Тогда
		ПройденныйМаршрут.Свойство(ТекущийВопрос, ПредыдущийВопрос);
	КонецЕсли;
	
	Возврат ПредыдущийВопрос;
	
КонецФункции

&НаСервереБезКонтекста
Функция КоличествоВопросовТеста(НачальныйВопрос)
	
	Возврат ПредельноеКоличествоВопросов() - СмещениеВопроса(НачальныйВопрос);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредельноеКоличествоВопросов()
	
	Возврат 3;
	
КонецФункции

&НаСервереБезКонтекста
Функция СмещениеВопроса(ВопросТеста)
	
	Смещение = 0;
	
	Если СтрНачинаетсяС(ВопросТеста, "ГруппаТест") Тогда
		
		СтрокаНомерВопроса = Сред(ВопросТеста, СтрДлина("ГруппаТест") + 1, 1);
		
		Если СтрНайти("0123456789", СтрокаНомерВопроса) > 0 Тогда
			Смещение = Число(СтрокаНомерВопроса) - 1;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Смещение;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПервыйВопросТеста()
	
	Возврат ИмяВопрос1();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьПериодаОбращенияВФНС(Форма)
	
	Элементы = Форма.Элементы;
	
	УказаниеПериодаДоступно = (Форма.В32_МогуУказатьПериод = "Год");
	
	Элементы.В32_ПериодОбращенияВФНС.Доступность = УказаниеПериодаДоступно;
	Элементы.В32_ПериодОбращенияВФНС.АвтоОтметкаНезаполненного = УказаниеПериодаДоступно;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПодчиненныхЭлементов(ИмяГруппы, Видимость)
	
	Для Каждого ПодчиненныйЭлемент Из Элементы[ИмяГруппы].ПодчиненныеЭлементы Цикл
		ПодчиненныйЭлемент.Видимость = Видимость;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтключитьВидимостьКнопок()
	
	Элементы.КнопкаНазад.Видимость = Ложь;
	Элементы.КнопкаДалее.Видимость = Ложь;
	Элементы.КнопкаГотово.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОтметитьОтчетныйПериод(ОтчетныйПериод, Требуется)
	
	Отбор = Новый Структура("Период", ОтчетныйПериод);
	СтрокиПериода = ОтчетныеПериоды.НайтиСтроки(Отбор);
	
	Для Каждого СтрокаТаблицы Из СтрокиПериода Цикл
		СтрокаТаблицы.Требуется = Требуется;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОтчетныйПериодВРодительномПадеже(Период, Периодичность)
	
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Периодичность, Период);
	КонецПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Периодичность, Период);
	
	ПредставлениеПериода = ПредставлениеПериода(НачалоПериода, КонецПериода, "ФП = Истина");
	ПредставлениеПериода = СтрЗаменить(ПредставлениеПериода, "г.", "год");
	ПредставлениеПериода = НРег(ПредставлениеПериода);
	
	// Доступность сервиса склонения не гарантирована, поэтому склоняем простой заменой.
	
	ПредставлениеПериода = СтрЗаменить(ПредставлениеПериода, "год", "года");
	ПредставлениеПериода = СтрЗаменить(ПредставлениеПериода, "квартал", "квартала");
	ПредставлениеПериода = СтрЗаменить(ПредставлениеПериода, "полугодие", "полугодия");
	
	ПредставлениеПериода = СтрЗаменить(ПредставлениеПериода, "январь",   "января");
	ПредставлениеПериода = СтрЗаменить(ПредставлениеПериода, "февраль",  "февраля");
	ПредставлениеПериода = СтрЗаменить(ПредставлениеПериода, "март",     "марта");
	ПредставлениеПериода = СтрЗаменить(ПредставлениеПериода, "апрель",   "апреля");
	ПредставлениеПериода = СтрЗаменить(ПредставлениеПериода, "май",      "мая");
	ПредставлениеПериода = СтрЗаменить(ПредставлениеПериода, "июнь",     "июня");
	ПредставлениеПериода = СтрЗаменить(ПредставлениеПериода, "июль",     "июля");
	ПредставлениеПериода = СтрЗаменить(ПредставлениеПериода, "август",   "августа");
	ПредставлениеПериода = СтрЗаменить(ПредставлениеПериода, "сентябрь", "сентября");
	ПредставлениеПериода = СтрЗаменить(ПредставлениеПериода, "октябрь",  "октября");
	ПредставлениеПериода = СтрЗаменить(ПредставлениеПериода, "ноябрь",   "ноября");
	ПредставлениеПериода = СтрЗаменить(ПредставлениеПериода, "декабрь",  "декабря");
	
	Возврат ПредставлениеПериода;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстНомерВопроса(НомерВопроса, ВсегоВопросов)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Вопрос %1 из %2'"),
			Формат(НомерВопроса, "ЧН=0; ЧГ=0"),
			Формат(ВсегоВопросов, "ЧН=0; ЧГ=0"));
	
КонецФункции

&НаСервере
Функция ТекстСледующийОтчет()
	
	СледующийОтчетныйПериод = ИнтерфейсыВзаимодействияБРОКлиентСервер.ДобавитьПериод(
		ТекущийОтчетныйПериод, ПериодичностьОтчетности, 1);
	
	ОписаниеСледующегоОтчета = Обработки.ПодготовкаНулевойОтчетности.ОписаниеОтчета(
		Правило, СледующийОтчетныйПериод, Организация, ДатаНачалаДеятельности);
	
	Возврат ОписаниеСледующегоОтчета.ПредставлениеОтчета;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьОтчетныеПериоды(ВходныеДанные)
	
	// Срок давности по налоговым правонарушениям - 3 года со дня совершения.
	// Для не сданных вовремя деклараций считаем днем совершения крайний срок подачи.
	// Обстоятельства, влияющие на увеличение срока (воспрепятствование проверке, предыдущие акты и т.п.) не учитываем,
	// поскольку нет возможности получить о них достоверные сведения.
	// Таким образом, под ответственность с неистекшим сроком давности подпадает 3 отчетных периода, предшествующих текущему.
	
	МинимальныйПериодПоСрокуДавности = ДобавитьМесяц(ТекущийОтчетныйПериод, -3 * 12);
	
	МинимальныйПериодПоНачалуДеятельности = ДатаНачалаДеятельности;
	
	Если ЗначениеЗаполнено(Правило) Тогда
		ТипРасширенногоПериода = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Правило, "РасширенныйПервыйНалоговыйПериод");
		Если ЗначениеЗаполнено(ТипРасширенногоПериода) Тогда
			ПервыйНалоговыйПериод = ИнтерфейсыВзаимодействияБРО.БлижайшийНалоговыйПериод(Организация,
				ДатаНачалаДеятельности, ТипРасширенногоПериода,, ДатаНачалаДеятельности);
			
			МинимальныйПериодПоНачалуДеятельности = ПервыйНалоговыйПериод.Период;
		КонецЕсли;
	КонецЕсли;
	
	МинимальныйОтчетныйПериод = Макс(МинимальныйПериодПоНачалуДеятельности, МинимальныйПериодПоСрокуДавности);
	
	НачалоМинимальногоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(
		ПериодичностьОтчетности, МинимальныйОтчетныйПериод);
	
	КонецПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(ПериодичностьОтчетности, ТекущийОтчетныйПериод) - 1; // Окончание предыдущего отчетного периода
	
	Периоды = КалендарьБухгалтера.Периоды(НачалоМинимальногоПериода, КонецПериода, ПериодичностьОтчетности);
	
	Для Каждого ОтчетныйПериод Из Периоды Цикл
		
		НоваяСтрока         = ОтчетныеПериоды.Добавить();
		НоваяСтрока.Период  = ОтчетныйПериод;
		
		// Проверим, есть ли отчетный период во входящем списке.
		Отбор = Новый Структура("Период", ОтчетныйПериод);
		НайденныеСтроки = ВходныеДанные.НайтиСтроки(Отбор);
		
		НоваяСтрока.Требуется = (НайденныеСтроки.Количество() > 0 И НайденныеСтроки[0].Требуется);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НоваяТаблицаПериодов()
	
	ТаблицаПериодов = Новый ТаблицаЗначений;
	
	ТаблицаПериодов.Колонки.Добавить("Период", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаПериодов.Колонки.Добавить("Требуется", Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаПериодов;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяВопрос1()
	
	Возврат "ГруппаТест1";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяВопрос2()
	
	Возврат "ГруппаТест2";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяВопрос31()
	
	Возврат "ГруппаТест31";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяВопрос32()
	
	Возврат "ГруппаТест32";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмяВопрос33()
	
	Возврат "ГруппаТест33";
	
КонецФункции

#КонецОбласти