#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ЗаполнитьОтчеты(Параметры, АдресРезультата) Экспорт
	
	ТаблицаОтчетов = ТаблицаОтчетныхЗадач(
		Параметры.Организация,
		Параметры.НачалоОбзора,
		Параметры.КонецОбзора,
		Параметры.ТекущийДень,
		Параметры.ДатаНачалаДеятельности);
	
	ОбновитьСведенияОбОтчетах(ТаблицаОтчетов);
	
	ПоместитьВоВременноеХранилище(ТаблицаОтчетов, АдресРезультата);
	
КонецПроцедуры

Процедура СформироватьОтчеты(Параметры, АдресРезультата) Экспорт
	
	Организация     = Параметры.Организация;
	Период          = Параметры.Период;
	ТребуемыеОтчеты = Параметры.ТребуемыеОтчеты;
	
	Для Каждого ТребуемыйОтчет Из ТребуемыеОтчеты Цикл
		
		ПараметрыФормирования = ПараметрыФормированияРегламентированногоОтчета(ТребуемыйОтчет, Организация);
		
		СформированныйОтчет = ИнтерфейсыВзаимодействияБРО.СформироватьАвтоматическиРеглОтчет(
			ТребуемыйОтчет.ИсточникОтчета,
			Организация,
			ТребуемыйОтчет.НачалоПериода,
			ТребуемыйОтчет.КонецПериода,
			Ложь,
			ТребуемыйОтчет.ВыбраннаяФорма,
			ПараметрыФормирования);
		
		Если ПараметрыФормирования.Ошибки.Количество() = 0 Тогда
			
			ТребуемыйОтчет.РегламентированныйОтчет = СформированныйОтчет;
			ТребуемыйОтчет.Обновить = Ложь;
			
		Иначе
			
			ТребуемыйОтчет.ОшибкиФормирования = ПараметрыФормирования.Ошибки;
			ТребуемыйОтчет.Обновить = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ТребуемыеОтчеты, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция СведенияОбОрганизации(Организация, Период) Экспорт
	
	Сведения = НовыйСведенияОбОрганизации();
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сведения.ОписаниеОрганизации = НСтр("ru = 'Укажите организацию'");
		Возврат Сведения;
	КонецЕсли;
	
	Сведения.ДатаНачалаДеятельности = КалендарьБухгалтера.ДатаНачалаДеятельности(Организация);
	
	ДатаНачалаИспользованияЭДО = ИнтерфейсыВзаимодействияБРОВызовСервера.ДатаПодключения1СОтчетности(Организация);
	Сведения.ЭлектронныйДокументооборотДоступен
		= ЗначениеЗаполнено(ДатаНачалаИспользованияЭДО) И ДатаНачалаИспользованияЭДО <= Период;
	
	Сведения.ПомощникДоступен = НулеваяОтчетность.ДоступноУпрощенноеФормирование(Организация, Период);
	
	Сведения.ОтчетыАктуальны = РегистрыСведений.АктуальностьКомплектаНулевойОтчетности.ОтчетыАктуальны(Организация);
	
	ЗаполнитьЗначенияСвойств(Сведения, ДанныеГосударственныхОрганов.РеквизитыНалоговогоОрганаПоОрганизации(Организация));
	
	Сведения.ОписаниеОрганизации = Справочники.Организации.ОписаниеОрганизацииДляПомощников(Организация, Период);
	
	Возврат Сведения;
	
КонецФункции

// Выявляет и возвращает самый актуальный отчетный период организации на указанную дату.
//
// Параметры:
//  Организация     - СправочникСсылка.Организации - проверяемая организация
//  ТекущийПериод   - Дата - дата проверки
//  Расписание - ТаблицаЗначений:
//   * ПериодСобытия      - Дата - дата отчетного периода, любая в интервале
//   * Правило            - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов - правило отчета
//   * Периодичность      - ПеречислениеСсылка.Периодичность - периодичность предоставления отчета
//   * НачалоВыполнения   - Дата - дата начала выполнения задачи (сдачи отчета)
//   * Срок               - Дата - крайний срок задачи (сдачи отчета)
//
// Возвращаемое значение:
//  Структура   - включает свойства:
//   * Период          - Дата - дата отчетного периода
//   * Периодичность   - ПеречислениеСсылка.Периодичность - периодичность предоставления отчета
//   * Правило         - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов - правило актуального отчета
//
Функция РелевантныйОтчетныйПериод(Организация, ТекущийПериод, Расписание) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Период", '00010101');
	Результат.Вставить("Периодичность", Перечисления.Периодичность.ПустаяСсылка());
	Результат.Вставить("Правило", Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПустаяСсылка());
	
	ТекущиеПериоды = Расписание.СкопироватьКолонки();
	
	// Для получения периода с наименьшей периодичностью.
	ТекущиеПериоды.Колонки.Добавить("ПериодичностьПорядок",
		ОбщегоНазначения.ОписаниеТипаЧисло(2, 0, ДопустимыйЗнак.Неотрицательный));
	
	Для Каждого ЗадачаОтчет Из Расписание Цикл
		Если ЗадачаОтчет.Срок >= ТекущийПериод Тогда // Текущая или предстоящая задача
			
			НоваяСтрока = ТекущиеПериоды.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ЗадачаОтчет);
			
			НоваяСтрока.ПериодичностьПорядок = Перечисления.Периодичность.Индекс(ЗадачаОтчет.Периодичность);
			
		КонецЕсли;
	КонецЦикла;
	
	Если ТекущиеПериоды.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	ТекущиеПериоды.Сортировать("ПериодичностьПорядок, Срок, НачалоВыполнения", Новый СравнениеЗначений);
	
	Результат.Период        = ТекущиеПериоды[0].ПериодСобытия;
	Результат.Периодичность = ТекущиеПериоды[0].Периодичность;
	Результат.Правило       = ТекущиеПериоды[0].Правило;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТаблицаОтчетныхЗадач(Организация, НачалоОбзора, КонецОбзора, ТекущийДень, ДатаРегистрации)
	
	ОтчетныеЗадачи = НоваяТаблицаОтчетныхЗадач();
	
	РасписаниеПоОтчетам = РабочееРасписаниеПоОтчетам(Организация, НачалоОбзора, КонецОбзора, ТекущийДень);
	
	СвойстваЗадачи = Новый Структура("ИдентификаторЗадачи, ФинансовыйПериод, РасширенныйПервыйНалоговыйПериод");
	
	Для Каждого СтрокаРасписания Из РасписаниеПоОтчетам Цикл
		
		НоваяСтрока = ОтчетныеЗадачи.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасписания);
		
		// Дополнительные сведения о задаче
		НоваяСтрока.НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(
			НоваяСтрока.Периодичность, НоваяСтрока.ПериодСобытия);
		НоваяСтрока.КонецПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(
			НоваяСтрока.Периодичность, НоваяСтрока.ПериодСобытия);
		
		НоваяСтрока.Предстоящая = НоваяСтрока.НачалоВыполнения > ТекущийДень;
		
		ЗаполнитьЗначенияСвойств(СвойстваЗадачи, СтрокаРасписания);
		
		Если ПомощникиПоУплатеНалоговИВзносов.ЭтоПервыйОтчетныйПериод(Организация, НоваяСтрока.ПериодСобытия, СвойстваЗадачи, ДатаРегистрации) Тогда
			
			ПропущенныйПериод = ИнтерфейсыВзаимодействияБРО.ПропущенныйНалоговыйПериод(
				СвойстваЗадачи.РасширенныйПервыйНалоговыйПериод,
				Организация,
				ДатаРегистрации);
			
			Если ЗначениеЗаполнено(ПропущенныйПериод) Тогда
				// Дополним наименование задачи особенностями расширенного отчетного периода.
				МесяцРегистрации = НРег(Формат(ДатаРегистрации, "Л=ru; ДФ='MMMM yyyy ''г.'''"));
				ДополнениеНаименования = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '(включая %1)'"), МесяцРегистрации);
				
				НоваяСтрока.Наименование = НоваяСтрока.Наименование + " " + ДополнениеНаименования;
				
				НоваяСтрока.РасширенныйПериодПодсказка = ПомощникиПоУплатеНалоговИВзносов.ТекстПодсказкиПоРасширенномуПервомуОтчетномуПериоду(
					СвойстваЗадачи.ИдентификаторЗадачи);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Самые актуальные задачи должны оказаться в начале - отчеты в списке показываем "по убыванию".
	ОтчетныеЗадачи.Сортировать("Правило, ПериодСобытия Убыв", Новый СравнениеЗначений);
	
	Возврат ОтчетныеЗадачи;
	
КонецФункции

Функция РабочееРасписаниеПоОтчетам(Организация, НачалоОбзора, КонецОбзора, ТекущийДень)
	
	// Сначала обновим список задач.
	КалендарьБухгалтера.ОбновитьЗадачи(Организация);
	
	ОтборДействие = Новый Структура("Действие", Перечисления.ВидыДействийКалендаряБухгалтера.Отчет);
	
	Расписание = РегистрыСведений.ЗадачиБухгалтера.РасписаниеПоНалогамОтчетамЗаПериод(Организация,
		НачалоОбзора, КонецОбзора, ОтборДействие);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",         Организация);
	Запрос.УстановитьПараметр("Расписание",          Расписание);
	Запрос.УстановитьПараметр("ТекущийДень",         ТекущийДень);
	Запрос.УстановитьПараметр("КодыЗадачИсключений", КодыЗадачИсключений());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Расписание.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	Расписание.Правило КАК Правило,
	|	Расписание.ПериодСобытия КАК ПериодСобытия,
	|	Расписание.Периодичность КАК Периодичность,
	|	Расписание.Срок КАК Срок,
	|	Расписание.НачалоВыполнения КАК НачалоВыполнения,
	|	Расписание.Наименование КАК Наименование
	|ПОМЕСТИТЬ ВТ_РасписаниеОрганизации
	|ИЗ
	|	&Расписание КАК Расписание
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаИсключения.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПравилаИсключения
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаИсключения
	|ГДЕ
	|	ПравилаИсключения.Владелец.Код В(&КодыЗадачИсключений)
	|	И ПравилаИсключения.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Отчет)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВТ_РасписаниеОрганизации.Правило КАК Правило,
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Код КАК ИдентификаторЗадачи,
	|	ПравилаПредставленияОтчетовУплатыНалогов.РасширенныйПервыйНалоговыйПериод КАК РасширенныйПервыйНалоговыйПериод,
	|	ПравилаПредставленияОтчетовУплатыНалогов.ФинансовыйПериод КАК ФинансовыйПериод
	|ПОМЕСТИТЬ СвойстваОтчетныхПравил
	|ИЗ
	|	ВТ_РасписаниеОрганизации КАК ВТ_РасписаниеОрганизации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|		ПО ВТ_РасписаниеОрганизации.Правило = ПравилаПредставленияОтчетовУплатыНалогов.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Правило
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Организация КАК Организация,
	|	РасписаниеОрганизации.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	РасписаниеОрганизации.Правило КАК Правило,
	|	ЕСТЬNULL(СвойстваОтчетныхПравил.ИдентификаторЗадачи, """") КАК ИдентификаторЗадачи,
	|	ЕСТЬNULL(СвойстваОтчетныхПравил.ФинансовыйПериод, ЗНАЧЕНИЕ(Перечисление.Периодичность.ПустаяСсылка)) КАК ФинансовыйПериод,
	|	ЕСТЬNULL(СвойстваОтчетныхПравил.РасширенныйПервыйНалоговыйПериод, ЗНАЧЕНИЕ(Перечисление.ВариантыРасширенногоПервогоНалоговогоПериода.ПустаяСсылка)) КАК РасширенныйПервыйНалоговыйПериод,
	|	РасписаниеОрганизации.ПериодСобытия КАК ПериодСобытия,
	|	РасписаниеОрганизации.Периодичность КАК Периодичность,
	|	РасписаниеОрганизации.Срок КАК Срок,
	|	РасписаниеОрганизации.НачалоВыполнения КАК НачалоВыполнения,
	|	РасписаниеОрганизации.Наименование КАК Наименование
	|ИЗ
	|	ВТ_РасписаниеОрганизации КАК РасписаниеОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПравилаИсключения КАК ПравилаИсключения
	|		ПО РасписаниеОрганизации.Правило = ПравилаИсключения.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ПО РасписаниеОрганизации.РегистрацияВНалоговомОргане = ЗадачиБухгалтера.РегистрацияВНалоговомОргане
	|			И РасписаниеОрганизации.Правило = ЗадачиБухгалтера.Правило
	|			И РасписаниеОрганизации.ПериодСобытия = ЗадачиБухгалтера.ПериодСобытия
	|			И (ЗадачиБухгалтера.Организация = &Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваОтчетныхПравил КАК СвойстваОтчетныхПравил
	|		ПО РасписаниеОрганизации.Правило = СвойстваОтчетныхПравил.Правило
	|ГДЕ
	|	ПравилаИсключения.Ссылка ЕСТЬ NULL
	|	И ЕСТЬNULL(ЗадачиБухгалтера.ВАрхиве, ЛОЖЬ) <> ИСТИНА
	|	И ВЫБОР
	|			КОГДА РасписаниеОрганизации.НачалоВыполнения <= &ТекущийДень
	|				ТОГДА НЕ ЗадачиБухгалтера.ВАрхиве ЕСТЬ NULL
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ"
	;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Процедура ОбновитьСведенияОбОтчетах(ТаблицаОтчетов)
	
	ЗадачиПоОтчетам = ТаблицаОтчетов.Скопировать(, КлючУникальностиЗадач());
	ВыполнениеЗадач = ВыполнениеЗадачБухгалтера.ВыполнениеЗадачПоПодготовкеОтчетов(ЗадачиПоОтчетам, Истина);
	
	АдминистраторыОтчетов = Новый Соответствие; // Кэш государственных органов.
	
	// Из ТаблицаОтчетов удаляем отчеты, подготовка которых не автоматизирована.
	// У таких задач не заполнен ИсточникОтчета, либо в источнике указан объект метаданных, отсутствующий в коллекции "Отчеты".
	НеобслуживаемыеОтчеты = Новый Массив;
	
	Для Каждого ОтчетнаяЗадача Из ТаблицаОтчетов Цикл
		
		Отбор = Новый Структура(КлючУникальностиЗадач());
		ЗаполнитьЗначенияСвойств(Отбор, ОтчетнаяЗадача);
		
		НайденныеСтроки  = ВыполнениеЗадач.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() = 0 Тогда
			НеобслуживаемыеОтчеты.Добавить(ОтчетнаяЗадача);
			Продолжить;
		КонецЕсли;
		
		СведенияОбОтчете = НайденныеСтроки[0];
		
		Если Метаданные.Отчеты.Найти(СведенияОбОтчете.ИсточникОтчета) = Неопределено Тогда
			НеобслуживаемыеОтчеты.Добавить(ОтчетнаяЗадача);
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ОтчетнаяЗадача, СведенияОбОтчете);
		
		Если СведенияОбОтчете.Документы.Количество() > 0 Тогда
			
			// Созданные отчеты отсортированы по убыванию даты подписи, нам нужен самый последний
			ОтчетнаяЗадача.РегламентированныйОтчет = СведенияОбОтчете.Документы[0].Ссылка;
			ОтчетнаяЗадача.Статус                  = СведенияОбОтчете.Документы[0].Статус;
			ОтчетнаяЗадача.СостояниеСдачиОтчета    = СведенияОбОтчете.Документы[0].СостояниеСдачиОтчетности;
			
		Иначе
			// Отчет будет создан позже, при обработке задач в форме.
		КонецЕсли;
		
		ОтчетнаяЗадача.ГосударственныйОрган =
			ГосорганАдминистраторОтчета(ОтчетнаяЗадача.ИсточникОтчета, АдминистраторыОтчетов);
		
		// Отчеты, для которых не поддерживается заполнение на сервере,
		// нужно будет создавать на клиенте с получением контекста формы отчета.
		ОперацииСОтчетом = РегламентированнаяОтчетностьКлиентСервер.ОперацииСРегламентированнымОтчетом(
			ОтчетнаяЗадача.ИсточникОтчета, ОтчетнаяЗадача.ВыбраннаяФорма);
		
		ОтчетнаяЗадача.ФормироватьНаКлиенте = (ОперацииСОтчетом.АвтоФормированиеНаСервере <> Истина);
		
	КонецЦикла;
	
	Для Каждого ОтчетнаяЗадача Из НеобслуживаемыеОтчеты Цикл
		ТаблицаОтчетов.Удалить(ОтчетнаяЗадача);
	КонецЦикла;
	
КонецПроцедуры

Функция ПараметрыФормированияРегламентированногоОтчета(ТребуемыйОтчет, Организация)
	
	ПараметрыАвтоформирования = ИнтерфейсыВзаимодействияБРО.НовыйПараметрыАвтоформированияОтчета();
	ЗаполнитьЗначенияСвойств(ПараметрыАвтоформирования, ТребуемыйОтчет);
	
	ПараметрыАвтоформирования.Организация    = Организация;
	ПараметрыАвтоформирования.ИмяФормыОтчета = ТребуемыйОтчет.ВыбраннаяФорма;
	ПараметрыАвтоформирования.ДатаНачала     = ТребуемыйОтчет.НачалоПериода;
	ПараметрыАвтоформирования.ДатаОкончания  = ТребуемыйОтчет.КонецПериода;
	
	Если ЗначениеЗаполнено(ТребуемыйОтчет.РегламентированныйОтчет) Тогда
		ПараметрыАвтоформирования.СсылкаНаСохрРеглОтчет = ТребуемыйОтчет.РегламентированныйОтчет;
	КонецЕсли;
	
	Возврат ПараметрыАвтоформирования;
	
КонецФункции

Функция КодыЗадачИсключений()
	
	Идентификаторы = Новый Массив;
	Идентификаторы.Добавить("СтатистическаяОтчетность"); // В текущей версии не поддерживаем статистическую отчетность.
	
	Возврат Идентификаторы;
	
КонецФункции

Функция ГосорганАдминистраторОтчета(ИсточникОтчета, АдминистраторыОтчетов)
	
	Госорган = АдминистраторыОтчетов.Получить(ИсточникОтчета);
	
	Если НЕ ЗначениеЗаполнено(Госорган) Тогда
		
		Госорган = ИнтерфейсыВзаимодействияБРО.ВидКонтролирующегоОргана(ИсточникОтчета);
		АдминистраторыОтчетов.Вставить(ИсточникОтчета, Госорган);
		
	КонецЕсли;
	
	Возврат Госорган;
	
КонецФункции

Функция НоваяТаблицаОтчетныхЗадач()
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	
	// Сведения, описывающие задачу.
	ТаблицаРезультат.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаРезультат.Колонки.Добавить("РегистрацияВНалоговомОргане",
		Новый ОписаниеТипов("СправочникСсылка.РегистрацииВНалоговомОргане"));
	ТаблицаРезультат.Колонки.Добавить("Правило",
		Новый ОписаниеТипов("СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов"));
	ТаблицаРезультат.Колонки.Добавить("ПериодСобытия", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаРезультат.Колонки.Добавить("Периодичность", Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность"));
	ТаблицаРезультат.Колонки.Добавить("НачалоПериода", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаРезультат.Колонки.Добавить("КонецПериода", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаРезультат.Колонки.Добавить("Срок", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаРезультат.Колонки.Добавить("НачалоВыполнения", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ТаблицаРезультат.Колонки.Добавить("Предстоящая", Новый ОписаниеТипов("Булево"));
	ТаблицаРезультат.Колонки.Добавить("РасширенныйПериодПодсказка", Новый ОписаниеТипов("Строка"));
	
	// Сведения, описывающие исполнение задачи.
	ТаблицаРезультат.Колонки.Добавить("ИсточникОтчета", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	ТаблицаРезультат.Колонки.Добавить("ВыбраннаяФорма", ОбщегоНазначения.ОписаниеТипаСтрока(255));
	ТаблицаРезультат.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	ТаблицаРезультат.Колонки.Добавить("ГосударственныйОрган",
		Новый ОписаниеТипов("ПеречислениеСсылка.ТипыКонтролирующихОрганов"));
	ТаблицаРезультат.Колонки.Добавить("РегламентированныйОтчет",
		Новый ОписаниеТипов("ДокументСсылка.РегламентированныйОтчет"));
	ТаблицаРезультат.Колонки.Добавить("Статус", Новый ОписаниеТипов("Строка"));
	ТаблицаРезультат.Колонки.Добавить("СостояниеСдачиОтчета",
		Новый ОписаниеТипов("ПеречислениеСсылка.СостояниеСдачиОтчетности"));
	
	ТаблицаРезультат.Колонки.Добавить("ФормироватьНаКлиенте", Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаРезультат;
	
КонецФункции

Функция КлючУникальностиЗадач()
	
	Возврат "Организация, ПериодСобытия, Правило, Периодичность, РегистрацияВНалоговомОргане";
	
КонецФункции

Функция НовыйСведенияОбОрганизации()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ДатаНачалаДеятельности", '00010101');
	Результат.Вставить("ОписаниеОрганизации", "");
	Результат.Вставить("ПомощникДоступен", Ложь);
	Результат.Вставить("ЭлектронныйДокументооборотДоступен", Ложь);
	Результат.Вставить("ОтчетыАктуальны", Ложь);
	
	Результат.Вставить("ФНС_Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	Результат.Вставить("ФНС_Наименование", "");
	Результат.Вставить("ФНС_Адрес", "");
	Результат.Вставить("ФНС_Телефоны", "");
	Результат.Вставить("ФНС_СведенияОПолучателеКонверта", Неопределено);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли