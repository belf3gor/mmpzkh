
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ИнтервалЗапросаМарокПоСправке2  = 6;
	Объект.ИнтервалОжиданияМарокПоСправке2 = 7;
	Объект.ИнтервалОбменаУТМ = 120;
	Объект.МаксимумМарокКПроверкеВУТМ      = 5000;
	
	ОпределитьТранспортныйМодуль();
	
	Если Не ЗначениеЗаполнено(Объект.ОрганизацияЕГАИС) Тогда
		ВызватьИсключение НСтр("ru='Отсутствуют доступные транспортные модули'");
	КонецЕсли;
	
	Если Элементы.ОрганизацияЕГАИС.СписокВыбора.НайтиПоЗначению(Параметры.ОрганизацияЕГАИС)<>Неопределено Тогда 
		Объект.ОрганизацияЕГАИС = Параметры.ОрганизацияЕГАИС;
	КонецЕсли;
	
	ИнициализироватьПомощник();
	
	ОрганизацияЕГАИСПриИзмененииНаСервере();
	
	СобытияФормЕГАИСПереопределяемый.УстановитьПараметрыВыбораНоменклатуры(ЭтотОбъект, "ОстаткиНоменклатура");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(
		ЭтотОбъект,
		"ОстаткиХарактеристика",
		"Элементы.Остатки.ТекущиеДанные.Номенклатура");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(
		ЭтотОбъект, 
		"ОстаткиСерия",
		"Элементы.Остатки.ТекущиеДанные.Номенклатура");
	
	СобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьПорядковыйНомерПерехода(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы
		ИЛИ ЗакрытьФормуБезусловно Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.ПанельНавигации.ТекущаяСтраница = Элементы.СтраницаНавигацииОкончание Тогда
		
		Если ЕстьМаркиВПромежуточномСтатусе(Объект.ОрганизацияЕГАИС) Тогда
			
			Отказ = Истина;
			ТекстВопроса = НСтр("ru = 'Остались марки в промежуточном статусе.'");
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(КодВозвратаДиалога.Да,  НСтр("ru='Завершить корректировку (без обновления данных в ЕГАИС)'"));
			Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Закрыть (корректировать расхождения позже)'"));
			Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена'"));
			
			ПоказатьВопрос(
				Новый ОписаниеОповещения("ЗакрытиеФормы_ЕстьНеобработанныеРасхожденияМарок_Подтверждение", ЭтотОбъект),
				ТекстВопроса,
				Кнопки);
		
		Иначе
			
			Возврат;
			
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.СозданныеДокументы.Количество() > 0 Тогда
		
		Отказ = Истина;
		
		ТекстВопроса = НСтр("ru = 'Перед завершением работы помощника требуется удалить созданные документы'");
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Удалить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена'"));
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ЗакрытиеФормы_Подтверждение", ЭтотОбъект),
			ТекстВопроса,
			Кнопки);
		
	ИначеЕсли Элементы.ПанельНавигации.ТекущаяСтраница = Элементы.СтраницаНавигацииПросмотрОстатков
		ИЛИ Элементы.ПанельНавигации.ТекущаяСтраница = Элементы.СтраницаНавигацииСозданиеДокументов Тогда
		
		Отказ = Истина;
		
		ТекстВопроса = НСтр("ru = 'Завершить работу помощника без сохранения изменений?'");
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Завершить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена'"));
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ЗакрытиеФормы_Подтверждение", ЭтотОбъект),
			ТекстВопроса,
			Кнопки);
		
	ИначеЕсли Модифицированность И  Элементы.ПанельНавигации.ТекущаяСтраница = Элементы.СтраницаНавигацииПроверкаМарок Тогда
		
		Отказ = Истина;
		
		ТекстВопроса = НСтр("ru = 'Есть несохраненные результаты сканирования.'");
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Сохранить и закрыть'"));
		Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Закрыть без сохранения'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена'"));
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ЗакрытиеФормы_Марки_Подтверждение", ЭтотОбъект),
			ТекстВопроса,
			Кнопки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Действие = ВРег(НавигационнаяСсылкаФорматированнойСтроки);

//#Область Шаг2_ПроверкаДанных

	Если Действие = ВРег("ПоказатьНезагруженныеДокументы") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		УТМ = АдресИПортУТМ(Объект.ОрганизацияЕГАИС);
		ФайловаяСистемаКлиент.ОткрытьНавигационнуюСсылку(
			"http://" + УТМ.АдресУТМ + ":" + Формат(УТМ.ПортУТМ, "ЧГ=0") + "/opt/out");
		
	ИначеЕсли СтрНайти(Действие, ВРег("НеподтвержденныеДокументы")) <> 0
		ИЛИ СтрНайти(Действие, ВРег("НеоформленныеДокументы")) <> 0 Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ИмяДокумента = Сред(НавигационнаяСсылкаФорматированнойСтроки, СтрНайти(НавигационнаяСсылкаФорматированнойСтроки, "_") + 1);
		
		ТипЗначения = ПредопределенноеЗначение("Документ." + ИмяДокумента + ".ПустаяСсылка");
		
		Если СтрНайти(ВРег(НавигационнаяСсылкаФорматированнойСтроки), ВРег("НеподтвержденныеДокументы")) <> 0 Тогда
			МассивСтрок = НеподтвержденныеДокументы.НайтиСтроки(Новый Структура("ТипЗначения", ТипЗначения));
		Иначе
			МассивСтрок = НеоформленныеДокументы.НайтиСтроки(Новый Структура("ТипЗначения", ТипЗначения));
		КонецЕсли;
		
		МассивСсылок = Новый Массив;
		Для Каждого СтрокаТЧ Из МассивСтрок Цикл
			МассивСсылок.Добавить(СтрокаТЧ.ДокументСсылка);
		КонецЦикла;
		
		Отбор = Новый Структура;
		Отбор.Вставить("Ссылка", МассивСсылок);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Отбор", Отбор);
		
		ОткрытьФорму("Документ." + ИмяДокумента + ".Форма.ФормаСпискаДокументов", ПараметрыФормы, ЭтотОбъект);
		
	ИначеЕсли Действие = ВРег("ЗапроситьОстаткиЕГАИС") Тогда
		
		СтандартнаяОбработка = Ложь;
		ЗапроситьОстаткиЕГАИС();
		
	ИначеЕсли СтрНачинаетсяС(Действие, ВРег("СоздатьПриказ")) Тогда
		
		СтандартнаяОбработка = Ложь;
		КорректировкаОстатковЕГАИСКлиентПереопределяемый.СоздатьПриказНаПроведениеИнвентаризации(ЭтотОбъект, ТорговыйОбъект);
		
	ИначеЕсли Действие = ВРег("ОткрытьСписокИнвентаризаций") Тогда
		
		СтандартнаяОбработка = Ложь;
		КорректировкаОстатковЕГАИСКлиентПереопределяемый.ОткрытьСписокИнвентаризаций(ЭтотОбъект, ТорговыйОбъект);
		
	ИначеЕсли Действие = ВРег("ВыполнитьОбмен") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ИнтеграцияЕГАИСКлиент.ВыполнитьОбмен(
			Новый ОписаниеОповещения("ПриЗавершенииВыполненияОбмена", ЭтотОбъект),
			Объект.ОрганизацияЕГАИС);
		
	ИначеЕсли СтрНачинаетсяС(Действие, ВРег("СформироватьОтчетПоИзлишкамНедостачам")) Тогда
		
		СтандартнаяОбработка = Ложь;
		КорректировкаОстатковЕГАИСКлиентПереопределяемый.СформироватьОтчетПоИзлишкамНедостачам(ЭтотОбъект, ТорговыйОбъект);

//#КонецОбласти

//#Область Шаг3_Марки

	ИначеЕсли Действие = ВРег("МаркиОткрытьФормуПроверкиПодбора") Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуСканированияАлкогольнойПродукции();
		
	ИначеЕсли СтрНачинаетсяС(Действие, ВРег("МаркиЗавершитьПроверкуСтроки")) Тогда
		
		СтандартнаяОбработка = Ложь;
		ЗавершитьПроверкуСтрокиМарок(Элементы.ПомарочныеОстатки.ТекущиеДанные.ПолучитьИдентификатор());
		
	ИначеЕсли СтрНачинаетсяС(Действие, ВРег("МаркиФильтр")) Тогда
		
		СтандартнаяОбработка = Ложь;
		ПомарочныеОстаткиТекущийФильтр = Число(Прав(НавигационнаяСсылкаФорматированнойСтроки, 1));
		МаркиУстановитьФильтр(ЭтотОбъект);
		
	ИначеЕсли СтрНачинаетсяС(Действие, ВРег("МаркиРасшифровка")) Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуРасшифровкиМарок();
		
	ИначеЕсли СтрНачинаетсяС(Действие, ВРег("МаркиВыбратьСправки")) Тогда
		
		СтандартнаяОбработка = Ложь;
		МаркиКВыборуСправок = ЗаполнитьМассивВыбораСправок(Элементы.ПомарочныеОстатки.ТекущиеДанные.АлкогольнаяПродукция);
		ОткрытьФорму("Обработка.ПомощникКорректировкиОстатковЕГАИС.Форма.ВыборСправки2", МаркиКВыборуСправок, ЭтаФорма);

//#КонецОбласти

//#Область Шаг4_Остатки

	ИначеЕсли Действие = ВРег("ОстаткиПроверитьЗаново") Тогда
		
		СтандартнаяОбработка = Ложь;
		ОстаткиВозобновлениеПроверки();
		
	ИначеЕсли Действие = ВРег("ОстаткиСопоставить") Тогда
		
		СтандартнаяОбработка = Ложь;
		Сопоставить();
		
	ИначеЕсли Действие = ВРег("ОстаткиПередатьВРегистр2") Тогда
		
		СтандартнаяОбработка = Ложь;
		ПередатьВРегистр2();
		
	ИначеЕсли Действие = ВРег("ОстаткиЗапроситьМарки") Тогда
		
		СтандартнаяОбработка = Ложь;
		ОстаткиЗапросМарок(Истина);
		
	ИначеЕсли Действие = ВРег("ОстаткиПодтвердитьРасхождения") Тогда
		
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.Остатки.ТекущиеДанные;
		ТекущиеДанные.Проверена = Истина;
		Если ТекущиеДанные.Остаток Тогда
			ТекущиеДанные.Излишки = Истина;
			ОстаткиПодтвержденоИзлишки = ОстаткиПодтвержденоИзлишки + 1;
		Иначе
			ТекущиеДанные.Недостача = Истина;
			ОстаткиПодтвержденоНедостача = ОстаткиПодтвержденоНедостача + 1;
		КонецЕсли;
		Если НЕ ТекущиеДанные.Сопоставлено Тогда
			ОстаткиСопоставитьНоменклатуру = ОстаткиСопоставитьНоменклатуру - 1;
		КонецЕсли;
		ОстаткиРаспределитьОстатки = ОстаткиРаспределитьОстатки - 1;
		ОстаткиПроверитьТекущийФильтр(ЭтотОбъект, ОстаткиТекущийФильтр);
		ОстаткиОбновитьФильтр(ЭтотОбъект);
		
		ОстаткиУстановитьОписаниеСтроки();
		
	ИначеЕсли Действие = ВРег("ОткрытьФормуСопоставленияНоменклатуры") Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФормуСопоставленияНоменклатуры();
		
	ИначеЕсли СтрНачинаетсяС(Действие, ВРег("ОстаткиФильтр")) Тогда
		
		СтандартнаяОбработка = Ложь;
		ОстаткиТекущийФильтр = Число(Прав(НавигационнаяСсылкаФорматированнойСтроки, 1));
		ОстаткиОбновитьФильтр(ЭтотОбъект);

//#КонецОбласти

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма")
		И ВыбранноеЗначение <> Неопределено Тогда
		Если ИсточникВыбора.ИмяФормы = "Обработка.ПомощникКорректировкиОстатковЕГАИС.Форма.СопоставлениеСтроки" Тогда
		
			ОбработатьРезультатСопоставления(ВыбранноеЗначение);
		
		ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПомощникКорректировкиОстатковЕГАИС.Форма.ВыборСправки2" Тогда
		
			ОбработатьРезультатУказанияСправок2(ВыбранноеЗначение);
			МаркиУстановитьОписаниеДействий();
		
		ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПомощникКорректировкиОстатковЕГАИС.Форма.РасшифровкаМарок" Тогда
		
			ОбработатьРезультатВыбораМарок(ВыбранноеЗначение);
		
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
Процедура ПерейтиНазад(Команда)
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВперед(Команда)
	
	ИзменитьПорядковыйНомерПерехода(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторитьПроверку(Команда)
	
	ВыполнитьПредварительнуюПроверкуДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуКорректировки(Команда)
	
	РассчитатьКоличествоКорректировки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьКоличество(Команда)
	
	Для Каждого ИдентификаторСтроки Из Элементы.Корректировки.ВыделенныеСтроки Цикл
		ДанныеСтроки = Элементы.Корректировки.ДанныеСтроки(ИдентификаторСтроки);
		ДанныеСтроки.ПередатьВРегистр2 = 0;
		ДанныеСтроки.Приходовать = 0;
		ДанныеСтроки.ВнешнийПересорт = 0;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВЕГАИС(Команда)
	
	МассивСсылок = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из Объект.СозданныеДокументы Цикл
		МассивСсылок.Добавить(СтрокаТаблицы.ДокументСсылка);
	КонецЦикла;
	
	Если Не НайтиПодготовитьПроведенныеДокументыДляВыгрузки(МассивСсылок) Тогда
		Возврат;
	КонецЕсли;
	
	ИнтеграцияЕГАИСКлиент.ВыполнитьОбмен(Объект.ОрганизацияЕГАИС,
		Новый ОписаниеОповещения("ВыгрузкаВЕГАИС_ЗавершениеОбмена", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВНачало(Команда)
	
	ИнициализироватьПомощник();
	// Позиционируемся на первом шаге помощника
	УстановитьПорядковыйНомерПерехода(1);
	
КонецПроцедуры

&НаКлиенте
Процедура Готово(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура СозданныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		ПоказатьЗначение(
			Новый ОписаниеОповещения("ПросмотрДокумента_Завершение", ЭтотОбъект),
			Элемент.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПереходаСтраницПомощника

&НаКлиенте
Процедура СтраницаНачальныеДанные_ПриПереходеДалее(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.ОрганизацияЕГАИС) Тогда
		ТекстСообщения = НСтр("ru = 'Не выбрана организация ЕГАИС.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ОрганизацияЕГАИС",, Отказ);
	Иначе
		Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
			ТекстСообщения = НСтр("ru = 'Организация ЕГАИС не сопоставлена с собственной организацией.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ОрганизацияЕГАИС",, Отказ);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТорговыйОбъект) Тогда
			ТекстСообщения = НСтр("ru = 'Организация ЕГАИС не сопоставлена с торговым объектом.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ОрганизацияЕГАИС",, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ВариантКорректировки = 0 Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ОстаткиВРегистре1) Тогда
			ТекстСообщения = НСтр("ru = 'Не выбран документ запроса остатков по регистру №1.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ОстаткиВРегистре1",, Отказ);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.ОстаткиВРегистре2) Тогда
			ТекстСообщения = НСтр("ru = 'Не выбран документ запроса остатков по регистру №2.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.ОстаткиВРегистре2",, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СтраницаПроверкаДанных_ПриОткрытии(ПропуститьСтраницу, ЭтоПереходДалее)
	
	Если ВариантКорректировки = 0 Тогда
		ПропуститьСтраницу = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	Если ЭтоПереходДалее Тогда
		Если ВыполнитьПредварительнуюПроверкуДанных Тогда
			ВыполнитьПредварительнуюПроверкуДанных();
		КонецЕсли;
		
		Если Элементы.ПанельНеПодтвержденныеДокументы.ТекущаяСтраница = Элементы.СтраницаНеПодтвержденныеДокументы_НетДокументов
			И Элементы.ПанельНеЗагруженныеДокументы.ТекущаяСтраница = Элементы.СтраницаНеЗагруженныеДокументы_НетДокументов
			И (Объект.ОстаткиВРегистре1.Пустая() ИЛИ Объект.ОстаткиВРегистре2.Пустая()) Тогда
			ЗапроситьОстаткиЕГАИС();
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СтраницаПроверкаДанных_ПриПереходеДалее(Отказ)
	
	МаркиЗаполнитьТаблицу();
	МаркиПроверитьСтатусУТМ(, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаПроверкаМарок_ПриОткрытии(ПропуститьСтраницу, ЭтоПереходДалее)
	
	Если ПомарочныеОстатки.Количество() = 0 Тогда
		ПропуститьСтраницу = Истина;
	КонецЕсли;
	ТекущийЭлемент = Элементы.ПомарочныеОстатки;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаПроверкаМарок_ПриПереходеДалее(Отказ)
	
	СохранитьРезультатПомарочнойИнвентаризацииНаСервере();
	ЗаполнитьТаблицуОстатков();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаПросмотрОстатков_ПриОткрытии(ПропуститьСтраницу, ЭтоПереходДалее)
	
	ТекущийЭлемент = Элементы.Остатки;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаПросмотрОстатков_ПриПереходеДалее(Отказ)
	
	РассчитатьКоличествоКорректировки();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаСозданиеДокументов_ПриПереходеДалее(Отказ)
	
	Если НЕ ПроверитьКоличествоПересорт() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ СозданиеДокументовЗавершено Тогда
		СоздатьДокументыКорректировкиОстатков();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаОкончание_ПриОткрытии(ПропуститьСтраницу, ЭтоПереходДалее)
	
	Объект.СозданныеДокументы.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура СтраницаОкончание_ПриПереходеНазад(Отказ)
	
	Если Объект.СозданныеДокументы.Количество() > 0 Тогда
		Отказ = Истина;
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Продолжить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена'"));
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("УдалениеДокументов_Подтверждение", ЭтотОбъект),
			НСтр("ru='Созданные документы будут удалены'"),
			Кнопки);
	Иначе
		СозданиеДокументовЗавершено = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Шаг1_НачальныеДанные

#Область Шаг1_ОбработчикиСобытийИКоманд

&НаКлиенте
Процедура ОрганизацияЕГАИСПриИзменении(Элемент)
	
	ОрганизацияЕГАИСПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантКорректировкиПриИзменении(Элемент)
	
	УстановитьТекущуюСтраницуОписания(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиВРегистре1ПриИзменении(Элемент)
	
	УстановитьПредставлениеДатыОстатковЕГАИС();
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиВРегистре2ПриИзменении(Элемент)
	
	УстановитьПредставлениеДатыОстатковЕГАИС();
	
КонецПроцедуры

#КонецОбласти

#Область Шаг1_Прочее

&НаСервере
Процедура ОрганизацияЕГАИСПриИзмененииНаСервере()
	
	ОчиститьСлужебныеРеквизиты();
	ЗаполнитьРеквизитыОрганизацииВФорме();
	ЗаполнитьДокументыЗапросаОстатковНаСервере();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьТекущуюСтраницуОписания(Форма)
	
	Если Форма.ВариантКорректировки = 1 Тогда
		Форма.Элементы.ПанельВариантКорректировки.ТекущаяСтраница = Форма.Элементы.СтраницаКорректировкаНаТекущуюДату;
	Иначе
		Форма.Элементы.ПанельВариантКорректировки.ТекущаяСтраница = Форма.Элементы.СтраницаКорректировкаНаДатуОстатковЕГАИС;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьПомощник()
	
	ЦветГиперссылкиГосИС             = ЦветаСтиля.ЦветГиперссылкиГосИС;
	ЦветТекстаПроблемаГосИС          = ЦветаСтиля.ЦветТекстаПроблемаГосИС;
	ЦветТекстаНеТребуетВниманияГосИС = ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС;
	ВариантКорректировки = 1;
	УстановитьТекущуюСтраницуОписания(ЭтотОбъект);
	
	СценарийКорректировкиОстатковЕГАИС();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставлениеДатыОстатковЕГАИС()
	
	ПредставлениеЭлемента = НСтр("ru='На дату получения остатков из ЕГАИС (%1).'");
	
	ДатаОстатковЕГАИС = ДатаОстатковЕГАИС();
	
	Если НЕ ЗначениеЗаполнено(ДатаОстатковЕГАИС) Тогда
		ПредставлениеЭлемента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеЭлемента, НСтр("ru='не определена'"));
	Иначе
		ПредставлениеЭлемента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеЭлемента, ДатаОстатковЕГАИС);
	КонецЕсли;
	
	ЭлементСписка = Элементы.ВариантКорректировки.СписокВыбора.НайтиПоЗначению(0);
	Если ЭлементСписка <> Неопределено Тогда
		ЭлементСписка.Представление = ПредставлениеЭлемента;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДатаОстатковЕГАИС()
	
	ДатаОстатков = Дата(1,1,1);
	
	МассивСсылок = Новый Массив;
	МассивСсылок.Добавить(Объект.ОстаткиВРегистре1);
	МассивСсылок.Добавить(Объект.ОстаткиВРегистре2);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	МАКСИМУМ(Дата) КАК Дата
	|ИЗ
	|	Документ.ОстаткиЕГАИС
	|ГДЕ
	|	Ссылка В (&Ссылка)");
	Запрос.УстановитьПараметр("Ссылка", МассивСсылок);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДатаОстатков = Выборка.Дата;
	КонецЕсли;
	
	Возврат ДатаОстатков;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьДокументыЗапросаОстатковНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", Объект.ОрганизацияЕГАИС);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ОстаткиЕГАИС.Дата) КАК Дата,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДокументовЕГАИС.ЗапросОстатковВРегистре1) КАК ВидДокумента
	|ПОМЕСТИТЬ ДокументыЗапросаОстатков
	|ИЗ
	|	Документ.ОстаткиЕГАИС КАК ОстаткиЕГАИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО ОстаткиЕГАИС.Ссылка = СтатусыДокументовЕГАИС.Документ
	|ГДЕ
	|	ОстаткиЕГАИС.ОрганизацияЕГАИС = &ОрганизацияЕГАИС
	|	И ОстаткиЕГАИС.Проведен
	|	И СтатусыДокументовЕГАИС.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиОстатковЕГАИС.ПолученыОстатки)
	|	И ОстаткиЕГАИС.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.ВидыДокументовЕГАИС.ЗапросОстатковВРегистре1)
	|СГРУППИРОВАТЬ ПО
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДокументовЕГАИС.ЗапросОстатковВРегистре1)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	МАКСИМУМ(ОстаткиЕГАИС.Дата),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДокументовЕГАИС.ЗапросОстатковВРегистре2)
	|ИЗ
	|	Документ.ОстаткиЕГАИС КАК ОстаткиЕГАИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО ОстаткиЕГАИС.Ссылка = СтатусыДокументовЕГАИС.Документ
	|ГДЕ
	|	ОстаткиЕГАИС.ОрганизацияЕГАИС = &ОрганизацияЕГАИС
	|	И ОстаткиЕГАИС.Проведен
	|	И СтатусыДокументовЕГАИС.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиОстатковЕГАИС.ПолученыОстатки)
	|	И ОстаткиЕГАИС.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.ВидыДокументовЕГАИС.ЗапросОстатковВРегистре2)
	|СГРУППИРОВАТЬ ПО
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДокументовЕГАИС.ЗапросОстатковВРегистре2)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОстаткиЕГАИС.ВидДокумента,
	|	ОстаткиЕГАИС.Ссылка
	|ИЗ
	|	ДокументыЗапросаОстатков КАК ДокументыЗапросаОстатков
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОстаткиЕГАИС КАК ОстаткиЕГАИС
	|		ПО ОстаткиЕГАИС.Проведен
	|		И ОстаткиЕГАИС.ОрганизацияЕГАИС = &ОрганизацияЕГАИС
	|		И ОстаткиЕГАИС.Дата = ДокументыЗапросаОстатков.Дата
	|		И ОстаткиЕГАИС.ВидДокумента = ДокументыЗапросаОстатков.ВидДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО ОстаткиЕГАИС.Ссылка = СтатусыДокументовЕГАИС.Документ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ВидДокумента = Перечисления.ВидыДокументовЕГАИС.ЗапросОстатковВРегистре1 Тогда
			Объект.ОстаткиВРегистре1 = Выборка.Ссылка;
		Иначе
			Объект.ОстаткиВРегистре2 = Выборка.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьПредставлениеДатыОстатковЕГАИС();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Шаг2_ПроверкаДанных

#Область Шаг2_ПолучениеОстатковЕГАИС

&НаКлиенте
Процедура ПриЗавершенииВыполненияОбмена(Результат, ДополнительныеПараметры) Экспорт
	
	ВыполнитьПредварительнуюПроверкуДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьОстаткиЕГАИС()
	
	Если Элементы.ПанельНеподтвержденныеДокументы.ТекущаяСтраница <> Элементы.СтраницаНеподтвержденныеДокументы_НетДокументов
		ИЛИ Элементы.ПанельНезагруженныеДокументы.ТекущаяСтраница <> Элементы.СтраницаНезагруженныеДокументы_НетДокументов Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Запросить остатки'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена'"));
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ЗапросОстатковЕГАИС_Подтверждение", ЭтотОбъект),
			НСтр("ru='Обнаружены ошибки в ходе предварительной проверки данных ЕГАИС'"), Кнопки);
		
	Иначе
		
		ЗапросОстатковЕГАИС_Подтверждение(КодВозвратаДиалога.Да, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапросОстатковЕГАИС_Подтверждение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ПанельОстаткиЕГАИС.ТекущаяСтраница = Элементы.СтраницаОстаткиЕГАИС_ОжиданиеПолученияОстатков;
	Элементы.ПерейтиНазадПроверкаДанных.Доступность = Ложь;
	
	Объект.ОстаткиВРегистре1 = ПредопределенноеЗначение("Документ.ОстаткиЕГАИС.ПустаяСсылка");
	Объект.ОстаткиВРегистре2 = ПредопределенноеЗначение("Документ.ОстаткиЕГАИС.ПустаяСсылка");
	
	СоздатьПодготовитьКПередачеДокументыЗапросаОстатков();
	ПодключитьОбработчикОжидания("Подключаемый_ОбменПроверкаПолученияОстатковЕГАИС", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбменПроверкаПолученияОстатковЕГАИС()

	ИнтеграцияЕГАИСКлиент.ВыполнитьОбмен(
		Объект.ОрганизацияЕГАИС,
		Новый ОписаниеОповещения("ПроверкаПолученияОстатковЕГАИС",ЭтотОбъект),
		ЭтотОбъект.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПолученияОстатковЕГАИС(Результат, ДополнительныеПараметры) Экспорт
	
	ПолученыОстаткиПоРегистру1 = Ложь;
	ПолученыОстаткиПоРегистру2 = Ложь;
	
	Если ПустаяСтрока(ТекстОшибкиПолученияОстатковЕГАИС) Тогда
		
		РезультатПолученияОстатков = РезультатПолученияОстатков(Объект.ОстаткиВРегистре1,Объект.ОстаткиВРегистре2);
		Если НЕ Объект.ОстаткиВРегистре1.Пустая() Тогда
			СтатусОбработки = РезультатПолученияОстатков.Регистр1;
			
			Если СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОстатковЕГАИС.ОшибкаПередачи") Тогда
				ТекстОшибкиПолученияОстатковЕГАИС = ТекстПоследнейОшибкиОбмена(Объект.ОстаткиВРегистре1);
				Если ПустаяСтрока(ТекстОшибкиПолученияОстатковЕГАИС) Тогда
					ТекстОшибкиПолученияОстатковЕГАИС = НСтр("ru='Ошибка получения остатков из ЕГАИС.'");
				Иначе
					ТекстОшибкиПолученияОстатковЕГАИС = НСтр("ru='Ошибка получения остатков из ЕГАИС:'") + Символы.ПС + ТекстОшибкиПолученияОстатковЕГАИС;
				КонецЕсли;
			ИначеЕсли СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОстатковЕГАИС.ПолученыОстатки") Тогда
				ПолученыОстаткиПоРегистру1 = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ Объект.ОстаткиВРегистре2.Пустая() Тогда
			СтатусОбработки = РезультатПолученияОстатков.Регистр2;
			
			Если СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОстатковЕГАИС.ОшибкаПередачи") Тогда
				ТекстОшибкиПолученияОстатковЕГАИС = ТекстПоследнейОшибкиОбмена(Объект.ОстаткиВРегистре2);
				Если ПустаяСтрока(ТекстОшибкиПолученияОстатковЕГАИС) Тогда
					ТекстОшибкиПолученияОстатковЕГАИС = НСтр("ru='Ошибка получения остатков из ЕГАИС.'");
				Иначе
					ТекстОшибкиПолученияОстатковЕГАИС = НСтр("ru='Ошибка получения остатков из ЕГАИС:'") + Символы.ПС + ТекстОшибкиПолученияОстатковЕГАИС;
				КонецЕсли;
			ИначеЕсли СтатусОбработки = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОстатковЕГАИС.ПолученыОстатки") Тогда
				ПолученыОстаткиПоРегистру2 = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПолученыОстаткиПоРегистру1 И ПолученыОстаткиПоРегистру2 Тогда
		Элементы.ПанельОстаткиЕГАИС.ТекущаяСтраница = Элементы.СтраницаОстаткиЕГАИС_ОстаткиПолучены;
		Элементы.ПерейтиНазадПроверкаДанных.Доступность = Истина;
		КорректироватьРегистрНакопленияОстаткиЕГАИС(Объект.ОстаткиВРегистре1, Объект.ОстаткиВРегистре2);
	ИначеЕсли НЕ ПустаяСтрока(ТекстОшибкиПолученияОстатковЕГАИС) Тогда
		Элементы.ПанельОстаткиЕГАИС.ТекущаяСтраница = Элементы.СтраницаОстаткиЕГАИС_ОшибкаПолученияОстатков;
		Элементы.ПерейтиНазадПроверкаДанных.Доступность = Истина;
	КонецЕсли;
	
	Если (НЕ ПолученыОстаткиПоРегистру1 ИЛИ НЕ ПолученыОстаткиПоРегистру2) И ПустаяСтрока(ТекстОшибкиПолученияОстатковЕГАИС) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОбменПроверкаПолученияОстатковЕГАИС", 30, Истина);
		
	КонецЕсли;
	
	ПроверкаДанных_ДоступностьКомандыДалее();
	
КонецПроцедуры

&НаСервере
Процедура СоздатьПодготовитьКПередачеДокументыЗапросаОстатков()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	Если Объект.ОстаткиВРегистре1.Пустая() Тогда
		ОбработкаОбъект.СоздатьПодготовитьКПередачеДокументЗапросаОстатков(Перечисления.ВидыДокументовЕГАИС.ЗапросОстатковВРегистре1);
	КонецЕсли;
	
	Если Объект.ОстаткиВРегистре2.Пустая() Тогда
		ОбработкаОбъект.СоздатьПодготовитьКПередачеДокументЗапросаОстатков(Перечисления.ВидыДокументовЕГАИС.ЗапросОстатковВРегистре2);
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТекстПоследнейОшибкиОбмена(ДокументСсылка)
	
	Возврат ИнтеграцияЕГАИСВызовСервера.ТекстОшибкиИзПротокола(ДокументСсылка);
	
КонецФункции

#КонецОбласти

#Область Шаг2_ПроверкаДокументовИнформационнойБазы

&НаКлиенте
Процедура ВыполнитьПредварительнуюПроверкуДанных()
	
	ВыполнитьПредварительнуюПроверкуДанныхНаСервере();
	
	Если Элементы.ПанельНеПодтвержденныеДокументы.ТекущаяСтраница = Элементы.СтраницаНеПодтвержденныеДокументы_НетДокументов Тогда
		Элементы.ПанельНеЗагруженныеДокументы.ТекущаяСтраница = Элементы.СтраницаНеЗагруженныеДокументы_НетДокументов;
		Элементы.НадписьОстаткиЕГАИС_ЗапроситьОстатки.Доступность = Истина;
		
		ПроверкаДанных_ПослеПроверкиНезагруженныхДокументов(Неопределено, Неопределено);
	Иначе
		ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПроверкаДанных_ПослеПроверкиНезагруженныхДокументов", ЭтотОбъект);
		ПроверитьНезагруженныеДокументы(ОповещениеПриЗавершении);
	КонецЕсли;
	
	ВыполнитьПредварительнуюПроверкуДанных = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПредварительнуюПроверкуДанныхНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПроверитьНаличиеИнвентаризации();
	НайтиДокументыТребующиеОформления();
	НайтиДокументыОжидающиеПодтверждения();
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаличиеИнвентаризации()
	
	Если ВариантКорректировки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОшибкиСклад = "";
	ТекстОшибкиТорговыйЗал = "";
	ОтчетПоРасхождениямСклад = Ложь;
	ОтчетПоРасхождениямТорговыйЗал = Ложь;
	
	КорректировкаОстатковЕГАИСПереопределяемый.ПриПроверкеИнвентаризации(
		Контрагент,
		ТорговыйОбъект,
		ТекстОшибкиСклад,
		ТекстОшибкиТорговыйЗал,
		ОтчетПоРасхождениямСклад,
		ОтчетПоРасхождениямТорговыйЗал);
		
	Если НЕ ПустаяСтрока(ТекстОшибкиСклад) Тогда
		Элементы.ПанельПроверкаИнвентаризацииНаСкладе.ТекущаяСтраница = Элементы.СтраницаПроверкаИнвентаризацииНаСкладе_Предупреждение;
		Если ТипЗнч(ТекстОшибкиСклад) = Тип("ФорматированнаяСтрока") Тогда
			ТекстОшибкиПроверкиИнвентаризацииНаСкладе = ТекстОшибкиСклад;
		Иначе
			ТекстОшибкиПроверкиИнвентаризацииНаСкладе = Новый ФорматированнаяСтрока(ТекстОшибкиСклад);
		КонецЕсли;
	Иначе
		Если ОтчетПоРасхождениямСклад Тогда
			Элементы.ПанельПроверкаИнвентаризацииНаСкладе.ТекущаяСтраница = Элементы.СтраницаПроверкаИнвентаризацииНаСкладе_Успешно;
		Иначе
			Элементы.ПанельПроверкаИнвентаризацииНаСкладе.ТекущаяСтраница = Элементы.СтраницаПроверкаИнвентаризацииНаСкладе_УспешноБезОтчета;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстОшибкиТорговыйЗал) Тогда
		Элементы.ПанельПроверкаИнвентаризацииВТорговомЗале.ТекущаяСтраница = Элементы.СтраницаПроверкаИнвентаризацииВТорговомЗале_Предупреждение;
		Если ТипЗнч(ТекстОшибкиТорговыйЗал) = Тип("ФорматированнаяСтрока") Тогда
			ТекстОшибкиПроверкиИнвентаризацииВТорговомЗале = ТекстОшибкиТорговыйЗал;
		Иначе
			ТекстОшибкиПроверкиИнвентаризацииВТорговомЗале = Новый ФорматированнаяСтрока(ТекстОшибкиТорговыйЗал);
		КонецЕсли;
	Иначе
		Если ОтчетПоРасхождениямТорговыйЗал Тогда
			Элементы.ПанельПроверкаИнвентаризацииВТорговомЗале.ТекущаяСтраница = Элементы.СтраницаПроверкаИнвентаризацииВТорговомЗале_Успешно;
		Иначе
			Элементы.ПанельПроверкаИнвентаризацииВТорговомЗале.ТекущаяСтраница = Элементы.СтраницаПроверкаИнвентаризацииВТорговомЗале_УспешноБезОтчета;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НайтиДокументыТребующиеОформления()
	
	НеоформленныеДокументы.Очистить();
	
	СписокСтатусов = Новый Массив;
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПринятИзЕГАИС);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаКПередаче);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаОбрабатываетсяЕГАИС);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаОшибка);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаПереданВУТМ);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", Объект.ОрганизацияЕГАИС);
	Запрос.УстановитьПараметр("СписокСтатусов", СписокСтатусов);
	Запрос.УстановитьПараметр("НеОформлен", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ОснованиеСтатусыОформленияДокументовЕГАИС"));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТТНВходящая.Ссылка КАК ДокументСсылка
	|ИЗ
	|	Документ.ТТНВходящаяЕГАИС КАК ТТНВходящая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО ТТНВходящая.Ссылка = СтатусыДокументовЕГАИС.Документ
	|		И (СтатусыДокументовЕГАИС.Статус В (&СписокСтатусов))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОформленияДокументовЕГАИС КАК СтатусыОформленияДокументовЕГАИС
	|		ПО СтатусыОформленияДокументовЕГАИС.Основание = ТТНВходящая.Ссылка
	|ГДЕ
	|	ТТНВходящая.Проведен
	|	И ТТНВходящая.Грузополучатель = &ОрганизацияЕГАИС
	|	И СтатусыОформленияДокументовЕГАИС.Документ В (&НеОформлен)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = НеоформленныеДокументы.Добавить();
		СтрокаТаблицы.ДокументСсылка = Выборка.ДокументСсылка;
		СтрокаТаблицы.ТипЗначения = Документы.ТТНВходящаяЕГАИС.ПустаяСсылка();
	КонецЦикла;
	
	Если НеоформленныеДокументы.Количество() = 0 Тогда
		Элементы.ПанельНеоформленныеДокументы.ТекущаяСтраница = Элементы.СтраницаНеоформленныеДокументы_НетДокументов;
	Иначе
		Элементы.ПанельНеоформленныеДокументы.ТекущаяСтраница = Элементы.СтраницаНеоформленныеДокументы_ЕстьДокументы;
		
		ТекстОшибкиНеоформленныеДокументы = СформироватьТекстОшибкиИзТаблицыДокументов(НеоформленныеДокументы, "НеоформленныеДокументы");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НайтиДокументыОжидающиеПодтверждения()
	
	НеподтвержденныеДокументы.Очистить();
	
	СписокСтатусов = Новый Массив;
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ПереданВУТМ);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ЗапросНаОтменуПроведенияПереданВУТМ);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ЗапросНаОтменуПроведенияОбрабатываетсяЕГАИС);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.ОбрабатываетсяЕГАИС);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ОбрабатываетсяЕГАИС);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ПереданВУТМ);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ЗапросНаОтменуПроведенияПереданВУТМ);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.ЗапросНаОтменуПроведенияОбрабатываетсяЕГАИС);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиВозвратаИзРегистра2ЕГАИС.ПереданВУТМ);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиВозвратаИзРегистра2ЕГАИС.ОбрабатываетсяЕГАИС);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиПередачиВРегистр2ЕГАИС.ПереданВУТМ);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиПередачиВРегистр2ЕГАИС.ОбрабатываетсяЕГАИС);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ПереданВУТМ);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.ОбрабатываетсяЕГАИС);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктОтказаПереданВУТМ);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктОтказаКПередаче);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктОтказаОбрабатываетсяЕГАИС);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктОтказаОшибка);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийОтказОбрабатываетсяЕГАИС);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийОтказПереданВУТМ);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийПодтверждениеОбрабатываетсяЕГАИС);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийПодтверждениеПереданВУТМ);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНИсходящейЕГАИС.АктРасхожденийПринят);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ПринятИзЕГАИС);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаОбрабатываетсяЕГАИС);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.АктОтказаПереданВУТМ);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.АктПодтвержденияОбрабатываетсяЕГАИС);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.АктПодтвержденияПереданВУТМ);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.АктРасхожденийОбрабатываетсяЕГАИС);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.АктРасхожденийПереданВУТМ);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ЗапросНаОтменуАктаОтказаОбрабатываетсяЕГАИС);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ЗапросНаОтменуАктаОтказаПереданВУТМ);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ЗапросНаОтменуПроведенияОбрабатываетсяЕГАИС);
	СписокСтатусов.Добавить(Перечисления.СтатусыОбработкиТТНВходящейЕГАИС.ЗапросНаОтменуПроведенияПереданВУТМ);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", Объект.ОрганизацияЕГАИС);
	Запрос.УстановитьПараметр("СписокСтатусов", СписокСтатусов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Документ КАК ДокументСсылка,
	|	ТИПЗНАЧЕНИЯ(Документ) КАК ТипЗначения
	|ИЗ
	|	РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|ГДЕ
	|	Документ.Проведен
	|	И СтатусыДокументовЕГАИС.Статус В (&СписокСтатусов)
	|	И ВЫБОР
	|		КОГДА Документ ССЫЛКА Документ.ТТНИсходящаяЕГАИС
	|			ТОГДА Документ.Грузоотправитель = &ОрганизацияЕГАИС
	|		КОГДА Документ ССЫЛКА Документ.ТТНВходящаяЕГАИС
	|			ТОГДА Документ.Грузополучатель = &ОрганизацияЕГАИС
	|		ИНАЧЕ Документ.ОрганизацияЕГАИС = &ОрганизацияЕГАИС
	|	КОНЕЦ";
	
	ТаблицаДокументов = НеподтвержденныеДокументы.Выгрузить();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Типы = Новый Соответствие;
	Типы.Вставить(Тип("ДокументСсылка.АктПостановкиНаБалансЕГАИС"),Документы.АктПостановкиНаБалансЕГАИС.ПустаяСсылка());
	Типы.Вставить(Тип("ДокументСсылка.АктСписанияЕГАИС"),Документы.АктСписанияЕГАИС.ПустаяСсылка());
	Типы.Вставить(Тип("ДокументСсылка.ВозвратИзРегистра2ЕГАИС"),Документы.ВозвратИзРегистра2ЕГАИС.ПустаяСсылка());
	Типы.Вставить(Тип("ДокументСсылка.ПередачаВРегистр2ЕГАИС"),Документы.ПередачаВРегистр2ЕГАИС.ПустаяСсылка());
	Типы.Вставить(Тип("ДокументСсылка.ТТНИсходящаяЕГАИС"),Документы.ТТНИсходящаяЕГАИС.ПустаяСсылка());
	Типы.Вставить(Тип("ДокументСсылка.ТТНВходящаяЕГАИС"),Документы.ТТНВходящаяЕГАИС.ПустаяСсылка());
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаДокументов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
		СтрокаТаблицы.ТипЗначения = Типы.Получить(Выборка.ТипЗначения);
	КонецЦикла;
	
	НеПодтвержденныеДокументы.Загрузить(ТаблицаДокументов);
	
	Если НеПодтвержденныеДокументы.Количество() = 0 Тогда
		Элементы.ПанельНеПодтвержденныеДокументы.ТекущаяСтраница = Элементы.СтраницаНеПодтвержденныеДокументы_НетДокументов;
	Иначе
		Элементы.ПанельНеПодтвержденныеДокументы.ТекущаяСтраница = Элементы.СтраницаНеПодтвержденныеДокументы_ЕстьДокументы;
		
		ТекстОшибкиНеподтвержденныеДокументы = СформироватьТекстОшибкиИзТаблицыДокументов(НеподтвержденныеДокументы, "НеподтвержденныеДокументы");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьТекстОшибкиИзТаблицыДокументов(ТаблицаДокументов, ИмяТаблицы)
	
	ТипыДокументов = Новый Массив;
	ТипыДокументов.Добавить(Метаданные.Документы.АктПостановкиНаБалансЕГАИС);
	ТипыДокументов.Добавить(Метаданные.Документы.АктСписанияЕГАИС);
	ТипыДокументов.Добавить(Метаданные.Документы.ВозвратИзРегистра2ЕГАИС);
	ТипыДокументов.Добавить(Метаданные.Документы.ПередачаВРегистр2ЕГАИС);
	ТипыДокументов.Добавить(Метаданные.Документы.ТТНВходящаяЕГАИС);
	ТипыДокументов.Добавить(Метаданные.Документы.ТТНИсходящаяЕГАИС);
	
	ВидыДокументов = Новый Массив;
	
	Для Каждого ТипДокумента Из ТипыДокументов Цикл
		МассивСтрок = ТаблицаДокументов.НайтиСтроки(Новый Структура("ТипЗначения", Документы[ТипДокумента.Имя].ПустаяСсылка()));
		Если МассивСтрок.Количество() > 0 Тогда
			Если ВидыДокументов.Количество() > 0 Тогда
				ВидыДокументов.Добавить(", ");
			КонецЕсли;
			ВидыДокументов.Добавить(
			Новый ФорматированнаяСтрока(ТипДокумента.ПредставлениеСписка + " (" + МассивСтрок.Количество() + ")",,,,
			ИмяТаблицы + "_" + ТипДокумента.Имя));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый ФорматированнаяСтрока(ВидыДокументов);
	
КонецФункции

&НаКлиенте
Процедура ПроверитьНезагруженныеДокументы(ОповещениеПриЗавершении)
	
	ИнтеграцияЕГАИСКлиент.ПроверитьВходящиеДокументы(ОповещениеПриЗавершении, Объект.ОрганизацияЕГАИС);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаДанных_ПослеПроверкиНезагруженныхДокументов(Результат, ДополнительныеПараметры) Экспорт
	
	ПроверкаДанных_ДоступностьКомандыДалее();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаДанных_ДоступностьКомандыДалее()
	
	Элементы.ПерейтиВпередПроверкаДанных.Доступность = 
		Элементы.ПанельНезагруженныеДокументы.ТекущаяСтраница <> Элементы.СтраницаНезагруженныеДокументы_Ошибка
		И Элементы.ПанельОстаткиЕГАИС.ТекущаяСтраница = Элементы.СтраницаОстаткиЕГАИС_ОстаткиПолучены;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Шаг3_ПроверкаМарок

#Область Шаг3_ОбработчикиСобытийИКоманд

&НаКлиенте
Процедура ЗапроситьСтатусМарокПоРегистру3(Команда)
	МаркиПроверитьСтатусУТМ();
КонецПроцедуры

&НаКлиенте
Процедура ПомарочныеОстаткиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПомарочныеОстатки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ПомарочныеОстаткиРегистр3
		ИЛИ Поле = Элементы.ПомарочныеОстаткиОстаток
		ИЛИ Поле = Элементы.ПомарочныеОстаткиФакт Тогда
		
		ОткрытьФормуРасшифровкиМарок();
		
	КонецЕсли;
	
	Если Поле = Элементы.ПомарочныеОстаткиНоменклатура Тогда
		ПоказатьЗначение(, ТекущиеДанные.Номенклатура);
	ИначеЕсли Поле = Элементы.ПомарочныеОстаткиХарактеристика Тогда
		ПоказатьЗначение(, ТекущиеДанные.Характеристика);
	ИначеЕсли Поле = Элементы.ПомарочныеОстаткиСерия Тогда
		ПоказатьЗначение(, ТекущиеДанные.Серия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПомарочныеОстаткиПриАктивизацииСтроки(Элемент)
	
	МаркиУстановитьОписаниеДействий();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьРезультатПомарочнойИнвентаризации(Команда)
	
	СохранитьРезультатПомарочнойИнвентаризацииНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область Шаг3_Интерфейс

&НаКлиенте
Процедура МаркиУстановитьОписаниеДействий()
	
	ТекущиеДанные = Элементы.ПомарочныеОстатки.ТекущиеДанные;
	
	СтрокаОтсканируйтеМарки = Новый ФорматированнаяСтрока(
		НСтр("ru = 'Отсканируйте марки'"),,
		ЦветГиперссылкиГосИС,,
		"МаркиОткрытьФормуПроверкиПодбора");
	
	ОписаниеСтрокиИДействий = Новый Массив;
	
	Если ТекущиеДанные = Неопределено Тогда
		// Выводим пустую строку
	ИначеЕсли ТекущиеДанные.Проверено = 2 Тогда
		
		ОписаниеСтрокиИДействий.Добавить(
			НСтр("ru = 'По данным ЕГАИС обнаружены остатки поштучной алкогольной продукции, соответствующие номенклатуре выбранной строки.
			           |В регистре №3 (по данным информационной базы) остатков нет. При сканировании таких акцизных марок
			           |будут возникать ошибки проверки статуса.'"));
		ОписаниеСтрокиИДействий.Добавить(" ");
		ОписаниеСтрокиИДействий.Добавить(СтрокаОтсканируйтеМарки);
		
		ОписаниеСтрокиИДействий.Добавить(Символы.ПС);
		ОписаниеСтрокиИДействий.Добавить(
			НСтр("ru = 'или если акцизные марки являются партионными (PDF-417)
			           |и не требуют поштучного учета, то'"));
		ОписаниеСтрокиИДействий.Добавить(" ");
		ОписаниеСтрокиИДействий.Добавить(Новый ФорматированнаяСтрока(
			НСтр("ru = 'завершите проверку строки'"),,
			ЦветГиперссылкиГосИС,,
			"МаркиЗавершитьПроверкуСтроки"));
		ОписаниеСтрокиИДействий.Добавить(". ");
		
	ИначеЕсли ТекущиеДанные.Проверено = 1 Тогда
		
		ОписаниеСтрокиИДействий.Добавить(
			НСтр("ru = 'Проверено бутылок:'"));
		ОписаниеСтрокиИДействий.Добавить(" ");
		ОписаниеСтрокиИДействий.Добавить(
			Новый ФорматированнаяСтрока(
				СтрШаблон(НСтр("ru = '%1 из %2'"), ТекущиеДанные.Факт, ТекущиеДанные.Остаток),,
				ЦветГиперссылкиГосИС,,
				"МаркиРасшифровка"));
		
		ОписаниеСтрокиИДействий.Добавить(". ");
		ОписаниеСтрокиИДействий.Добавить(СтрокаОтсканируйтеМарки);
		ОписаниеСтрокиИДействий.Добавить(" ");
		ОписаниеСтрокиИДействий.Добавить(НСтр("ru = 'или'"));
		ОписаниеСтрокиИДействий.Добавить(" ");
		ОписаниеСтрокиИДействий.Добавить(Новый ФорматированнаяСтрока(
			НСтр("ru = 'завершите проверку строки'"),,
			ЦветГиперссылкиГосИС,,
			"МаркиЗавершитьПроверкуСтроки"));
		ОписаниеСтрокиИДействий.Добавить(" ");
		ОписаниеСтрокиИДействий.Добавить(
			НСтр("ru = 'если остальные
			           |акцизные марки партионные (PDF-417) и не требуют поштучного учета.'"));
		
	ИначеЕсли ТекущиеДанные.Проверено = 0 Тогда
		
		ОписаниеСтрокиИДействий.Добавить(
			НСтр("ru = 'Проверено бутылок:'"));
		ОписаниеСтрокиИДействий.Добавить(" ");
		Если ТекущиеДанные.Регистр3 Тогда
			ОписаниеСтрокиИДействий.Добавить(
				Новый ФорматированнаяСтрока(
					СтрШаблон(НСтр("ru = '%1 из %2'"), ТекущиеДанные.Факт, ТекущиеДанные.Остаток),,
					ЦветГиперссылкиГосИС,,
					"МаркиРасшифровка"));
		Иначе
			ОписаниеСтрокиИДействий.Добавить(
				Новый ФорматированнаяСтрока(
					СтрШаблон(НСтр("ru = '%1 (все партионные)'"), ТекущиеДанные.Остаток),,
					ЦветГиперссылкиГосИС));
		КонецЕсли;
		ОписаниеСтрокиИДействий.Добавить(". ");
		
	КонецЕсли;
	
	СтатусТекущейСтрокиПомарочныеОстатки = Новый ФорматированнаяСтрока(ОписаниеСтрокиИДействий);
	
КонецПроцедуры

&НаСервере
Процедура МаркиЗаполнитьОписаниеИФильтры(ТекущийФильтр)
	
	ПомарочныеОстаткиКПроверкеНоменклатуры = ПомарочныеОстатки.НайтиСтроки(Новый Структура("Проверено", 2)).Количество();
	ПомарочныеОстаткиСтрок                 = ПомарочныеОстатки.Количество();
	ПомарочныеОстаткиРасхожденияСтрок      = ПомарочныеОстатки.НайтиСтроки(Новый Структура("Проверено", 1)).Количество();
	
	ПомарочныеОстаткиТекущийФильтр = ТекущийФильтр;
	МаркиУстановитьОписаниеСтраницы(ЭтотОбъект);
	МаркиУстановитьФильтр(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МаркиУстановитьОписаниеСтраницы(Форма)
	
	Форма.Элементы.ПомарочныеОстаткиОписание.Видимость = Форма.Объект.МаксимумМарокКПроверкеВУТМ = 0;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура МаркиУстановитьФильтр(Форма)
	
	ПодстрокиФильтра = Новый Массив;
	
	Проверенные = Форма.ПомарочныеОстаткиСтрок - Форма.ПомарочныеОстаткиКПроверкеНоменклатуры - Форма.ПомарочныеОстаткиРасхожденияСтрок;
	
	Если Форма.ПомарочныеОстаткиРасхожденияСтрок = 0 И Форма.ПомарочныеОстаткиТекущийФильтр = 2 Тогда
		Форма.ПомарочныеОстаткиТекущийФильтр = 1;
	КонецЕсли;
	
	Если Проверенные = 0 И Форма.ПомарочныеОстаткиТекущийФильтр = 1 Тогда
		Форма.ПомарочныеОстаткиТекущийФильтр = 0;
	КонецЕсли;
	
	Если Форма.ПомарочныеОстаткиКПроверкеНоменклатуры = 0 И Форма.ПомарочныеОстаткиТекущийФильтр = 3 Тогда
		Форма.ПомарочныеОстаткиТекущийФильтр = 0;
	КонецЕсли;
	
	Если Форма.ПомарочныеОстаткиРасхожденияСтрок > 0 Тогда
		
		ОписаниеСтроки = СтрШаблон( НСтр("ru = 'Отсканируйте (%1)'"), Форма.ПомарочныеОстаткиРасхожденияСтрок);
		Если (Форма.ПомарочныеОстаткиТекущийФильтр = 2) Тогда
			Форма.Элементы.ПомарочныеОстатки.ОтборСтрок = Новый ФиксированнаяСтруктура("Проверено", 1);
			ПодстрокиФильтра.Добавить(ОписаниеСтроки);
		Иначе
			ПодстрокиФильтра.Добавить(Новый ФорматированнаяСтрока(ОписаниеСтроки,,Форма.ЦветГиперссылкиГосИС,,"МаркиФильтр2"));
		КонецЕсли;
		ПодстрокиФильтра.Добавить("; ");
	
	КонецЕсли;
	
	Если Проверенные > 0 Тогда
		
		ОписаниеСтроки = СтрШаблон(НСтр("ru = 'Проверенные (%1)'"), Проверенные);
		Если (Форма.ПомарочныеОстаткиТекущийФильтр = 1) Тогда
			Форма.Элементы.ПомарочныеОстатки.ОтборСтрок = Новый ФиксированнаяСтруктура("Проверено", 0);
			ПодстрокиФильтра.Добавить(ОписаниеСтроки);
		Иначе
			ПодстрокиФильтра.Добавить(Новый ФорматированнаяСтрока(ОписаниеСтроки,,Форма.ЦветГиперссылкиГосИС,,"МаркиФильтр1"));
		КонецЕсли;
		ПодстрокиФильтра.Добавить("; ");

	КонецЕсли;
	
	ОписаниеСтроки = СтрШаблон(НСтр("ru = 'Все (%1)'"), Форма.ПомарочныеОстаткиСтрок);
	Если (Форма.ПомарочныеОстаткиТекущийФильтр = 0) Тогда
		Форма.Элементы.ПомарочныеОстатки.ОтборСтрок = Неопределено;
		ПодстрокиФильтра.Добавить(ОписаниеСтроки);
	Иначе
		ПодстрокиФильтра.Добавить(Новый ФорматированнаяСтрока(ОписаниеСтроки,,Форма.ЦветГиперссылкиГосИС,,"МаркиФильтр0"));
	КонецЕсли;
	
	Если Форма.ПомарочныеОстаткиКПроверкеНоменклатуры > 0 Тогда
		
		ПодстрокиФильтра.Добавить("; ");
		ОписаниеСтроки = СтрШаблон(НСтр("ru = 'Без марок (%1)'"), Форма.ПомарочныеОстаткиКПроверкеНоменклатуры);
		Если (Форма.ПомарочныеОстаткиТекущийФильтр = 3) Тогда
			Форма.Элементы.ПомарочныеОстатки.ОтборСтрок = Новый ФиксированнаяСтруктура("Проверено", 2);
			ПодстрокиФильтра.Добавить(ОписаниеСтроки);
		Иначе
			ПодстрокиФильтра.Добавить(Новый ФорматированнаяСтрока(ОписаниеСтроки,,Форма.ЦветГиперссылкиГосИС,,"МаркиФильтр3"));
		КонецЕсли;
		
	КонецЕсли;
	
	Форма.ПомарочныеОстаткиОписаниеФильтра = Новый ФорматированнаяСтрока(ПодстрокиФильтра);
	
КонецПроцедуры

#КонецОбласти

#Область Шаг3_ПроверкаИПодборАлкогольнойПродукции

&НаКлиенте
Процедура ОткрытьФормуСканированияАлкогольнойПродукции()

	ОчиститьСообщения();
	
	ПараметрыОткрытия = ИнтеграцияЕГАИСКлиент.ПараметрыПроверкиИПодбораАлкогольнойПродукции(Объект.ОрганизацияЕГАИС);
	
	ОписаниеОповещенияОкончаниеПроверки = Новый ОписаниеОповещения("СканированиеАлкогольнойПродукцииПослеЗакрытия", ЭтотОбъект);
	ОткрытьФорму("Обработка.ПроверкаИПодборАлкогольнойПродукцииЕГАИС.Форма.ПроверкаИПодбор", ПараметрыОткрытия, ЭтаФорма, УникальныйИдентификатор,,
	             ,ОписаниеОповещенияОкончаниеПроверки, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СканированиеАлкогольнойПродукцииПослеЗакрытия(Результат,ДополнительныеПараметры) Экспорт
	
	Если Не ЭтоАдресВременногоХранилища(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	НовыеМаркиВТаблице = СканированиеПродукцииПослеЗакрытияНаСервере(Результат);
	МаркиПроверитьСтатусУТМ(НовыеМаркиВТаблице.МаркиКПроверкеСтатусаУТМ);
	МаркиОткрытьФормуУказанияСправок2(НовыеМаркиВТаблице.МаркиКВыборуСправок2);
	МаркиУстановитьОписаниеДействий();
	
КонецПроцедуры

&НаСервере
Функция СканированиеПродукцииПослеЗакрытияНаСервере(АдресВременногоХранилища)
	
	РезультатПроверки = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	
	ДеревоУпаковок = РезультатПроверки.ДеревоМаркируемойПродукции;
	
	ШтрихкодыУпаковок = ШтрихкодированиеИС.ШтрихкодыУпаковок(
		ИнтеграцияЕГАИС.ЗначенияШтрихкодовИзДереваУпаковок(ДеревоУпаковок));
	
	НачатьТранзакцию();
	
	Попытка
		
		Справочники.ШтрихкодыУпаковокТоваров.СоздатьШтрихкодыУпаковок(
			ДеревоУпаковок,
			ШтрихкодыУпаковок);
		
	Исключение
		ОтменитьТранзакцию();
		
		ИнтеграцияЕГАИСВызовСервера.ИнформироватьОбОшибкеВДокументе(
			"ru = 'Не удалось сохранить результаты сканирования и проверки в документе: %1 по причине: %2'",
			Объект.Ссылка,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
	КонецПопытки;
	
	Возврат ЗаполнитьТоварыИАкцизныеМарки(ДеревоУпаковок);
	
КонецФункции

&НаСервере
Функция ЗаполнитьТоварыИАкцизныеМарки(ДеревоУпаковок) Экспорт
	
	МаркиКПроверкеСтатусаУТМ = Новый Массив;
	МаркиКВыборуСправок2     = Новый Массив;
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если Не СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
			ДанныеУпаковки = ЗаполнитьТоварыИАкцизныеМарки(СтрокаДерева);
			Для Каждого Марка Из ДанныеУпаковки.МаркиКПроверкеСтатусаУТМ Цикл
				МаркиКПроверкеСтатусаУТМ.Добавить(Марка);
			КонецЦикла;
			Для Каждого Марка Из ДанныеУпаковки.МаркиКВыборуСправок2 Цикл
				МаркиКВыборуСправок2.Добавить(Марка);
			КонецЦикла;
			
			Продолжить;
			
		КонецЕсли;
		
		Марка = Объект.АкцизныеМарки.НайтиСтроки(Новый Структура("АкцизнаяМарка", СтрокаДерева.ШтрихкодУпаковки));
		ЕстьМарка = Марка.Количество();
		Если ЕстьМарка Тогда
			Марка = Марка[0];
			Если Марка.Факт Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Модифицированность = Истина;;
			Марка = Объект.АкцизныеМарки.Добавить();
			ЗаполнитьЗначенияСвойств(Марка, СтрокаДерева);
			Марка.АкцизнаяМарка = СтрокаДерева.ШтрихкодУпаковки;
			Если НЕ ЗначениеЗаполнено(Марка.Справка2) Тогда
				МаркиКВыборуСправок2.Добавить(Марка.ПолучитьИдентификатор());
			КонецЕсли;
			МаркиКПроверкеСтатусаУТМ.Добавить(Марка.ПолучитьИдентификатор());
		КонецЕсли;
		Марка.Факт = Истина;
		
		Поиск = Новый Структура;
		Поиск.Вставить("Номенклатура",   СтрокаДерева.Номенклатура);
		Поиск.Вставить("Характеристика", СтрокаДерева.Характеристика);
		Поиск.Вставить("Серия",          СтрокаДерева.Серия);
		
		Остаток = ПомарочныеОстатки.НайтиСтроки(Поиск);
		ЕстьОстаток = Остаток.Количество() > 0;
		Если ЕстьОстаток Тогда
			
			Остаток = Остаток[0];
			
			Остаток.Факт = Остаток.Факт + 1;
			
			Если НЕ ЕстьМарка Тогда
				Остаток.Регистр3 = Остаток.Регистр3 + 1;
				Если Остаток.Проверено = 2 Тогда
					Остаток.Проверено = 1;
					Остаток.РекомендуетсяСканировать = 2;
				КонецЕсли;
			КонецЕсли;
			Если Остаток.Факт = Остаток.Остаток Тогда
				Остаток.Проверено = 0;
				Остаток.РекомендуетсяСканировать = 1;
			КонецЕсли;
			
		Иначе
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрШаблон(
					НСтр("ru = 'По %1 количество отсканированных марок превысило учетный остаток. Проведите инвентаризацию перед корректировкой остатков.'"),
					ИнтеграцияИС.ПредставлениеНоменклатуры(
						СтрокаДерева.Номенклатура,
						СтрокаДерева.Характеристика,,
						СтрокаДерева.Серия)));
				
		КонецЕсли;
		
	КонецЦикла;
	
	МаркиЗаполнитьОписаниеИФильтры(ПомарочныеОстаткиТекущийФильтр);
	
	Возврат Новый Структура("МаркиКПроверкеСтатусаУТМ, МаркиКВыборуСправок2", МаркиКПроверкеСтатусаУТМ, МаркиКВыборуСправок2);
	
КонецФункции

#КонецОбласти

#Область Шаг3_МаркиВУТМ

&НаКлиенте
Процедура МаркиПроверитьСтатусУТМ(КПроверке = Неопределено, ПервоначальнаяПроверка = Ложь)
	
	Если Объект.МаксимумМарокКПроверкеВУТМ = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если КПроверке = Неопределено Тогда
		МассивСтрокМарок = Объект.АкцизныеМарки;
	Иначе
		МассивСтрокМарок = Новый Массив;
		Для Каждого ИдентификаторСтроки Из КПроверке Цикл
			МассивСтрокМарок.Добавить(Объект.АкцизныеМарки.НайтиПоИдентификатору(ИдентификаторСтроки));
		КонецЦикла;
	КонецЕсли;
	
	ЭлементовВЗапросе = 0;
	МассивМарок = Новый Массив;
	Для Каждого МаркаТаблицы Из МассивСтрокМарок Цикл
		Если МаркаТаблицы.ПровереноУТМ Тогда
			Продолжить;
		КонецЕсли;
		МассивМарок.Добавить(МаркаТаблицы.АкцизнаяМарка);
		ЭлементовВЗапросе = ЭлементовВЗапросе + 1;
		Если ЭлементовВЗапросе = Объект.МаксимумМарокКПроверкеВУТМ Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементовВЗапросе Тогда
		ПроверитьСтатусУТМ(МассивМарок, ПервоначальнаяПроверка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ШтрихкодыМарок(МассивМарок)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъектов(МассивМарок, "ЗначениеШтрихкода");
КонецФункции

&НаКлиенте
Процедура ПроверитьСтатусУТМ(МассивМарок, ПервоначальнаяПроверка)

	Штрихкоды = ШтрихкодыМарок(МассивМарок);
	МассивЗначенийШтрихкодов = Новый Массив;
	Для Каждого КлючИЗначение Из Штрихкоды Цикл
		МассивЗначенийШтрихкодов.Добавить(КлючИЗначение.Значение);
	КонецЦикла;
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Штрихкоды", Штрихкоды);
	ДополнительныеПараметры.Вставить("ПервоначальнаяПроверка", ПервоначальнаяПроверка);
	
	ИнтеграцияЕГАИСКлиент.ПодготовитьЗапросПроверкиАкцизныхМарокНаОстаткахОрганизацииКПередаче(
		Новый ОписаниеОповещения("ПослеПроверкиАкцизныхМарокУТМ", ЭтотОбъект, ДополнительныеПараметры),
			Объект.ОрганизацияЕГАИС,
			МассивЗначенийШтрихкодов,
			ЭтотОбъект.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеПроверкиАкцизныхМарокУТМ(Результат, ДополнительныеПараметры) Экспорт
	
	ОтветОбработан = Ложь;
	
	Для Каждого ЭлементОтвета Из Результат Цикл
		
		Если ЭлементОтвета.Свойство("Операция")
			И ЭлементОтвета.Операция = ПредопределенноеЗначение("Перечисление.ВидыДокументовЕГАИС.ЗапросПроверкиАкцизныхМарокНаОстаткахОрганизации") Тогда
			
			Если ЗначениеЗаполнено(ЭлементОтвета.ВходящееСообщение) Тогда
				
				ОтветОбработан = Истина;
				РазобратьОтветПроверкиАкцизныхМарокУТМ(ЭлементОтвета, ДополнительныеПараметры);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ОтветОбработан Тогда
		
		Объект.МаксимумМарокКПроверкеВУТМ = Объект.МаксимумМарокКПроверкеВУТМ - 1000;
		Если Объект.МаксимумМарокКПроверкеВУТМ = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'УТМ не отвечает на запрос статуса марок.'"));
			МаркиЗаполнитьОписаниеИФильтры(ПомарочныеОстаткиТекущийФильтр);
			Возврат;
		КонецЕсли;
		
		ИнтеграцияЕГАИСКлиент.ВыполнитьОбмен(
			Объект.ОрганизацияЕГАИС,
			Новый ОписаниеОповещения("ПослеПроверкиАкцизныхМарокУТМ",ЭтотОбъект, ДополнительныеПараметры),
			ЭтотОбъект.УникальныйИдентификатор);
		
	КонецЕсли;
	
	МаркиПроверитьСтатусУТМ(, ДополнительныеПараметры.ПервоначальнаяПроверка);
	
КонецПроцедуры

&НаСервере
Процедура РазобратьОтветПроверкиАкцизныхМарокУТМ(ЭлементОтвета, ДополнительныеПараметры)
	
	ТекстСообщенияXML = ИнтеграцияИС.ТекстСообщенияXMLИзПротокола(ЭлементОтвета.ВходящееСообщение);
	РезультатОбработки = ИнтеграцияЕГАИС.ПрочитатьОтветНаЗапросПроверкиАкцизныхМарокНаОстаткахОрганизации(
		ТекстСообщенияXML, Объект.ОрганизацияЕГАИС);
	
	Если СтрНайти(РезультатОбработки.Описание, "Отсутствует фильтр") Тогда
		Объект.МаксимумМарокКПроверкеВУТМ = 0;
		МаркиЗаполнитьОписаниеИФильтры(ПомарочныеОстаткиТекущийФильтр);
		Возврат;
	КонецЕсли;
	
	ОтсутствуютВУТМ = РезультатОбработки.ОтсутствующиеАкцизныеМарки;
	Если ОтсутствуютВУТМ = Неопределено Тогда
		ОтсутствуютВУТМ = Новый Массив;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ДополнительныеПараметры.Штрихкоды Цикл
		СтрокаМарки = Объект.АкцизныеМарки.НайтиСтроки(Новый Структура("АкцизнаяМарка", КлючИЗначение.Ключ))[0];
		СтрокаМарки.ПровереноУТМ = Истина;
		Если ОтсутствуютВУТМ.Найти(КлючИЗначение.Значение) = Неопределено Тогда
			СтрокаМарки.УТМ = Истина;
			Если СтрокаМарки.Статус = Перечисления.СтатусыАкцизныхМарок.КОприходованию Тогда
				ЗафиксироватьМаркиВПромежуточномСтатусе(Объект.ОрганизацияЕГАИС, КлючИЗначение.Ключ);
			КонецЕсли;
		Иначе
			СтрокаМарки.УТМ = Ложь;
			
			Если СтрокаМарки.Статус = Перечисления.СтатусыАкцизныхМарок.КСписанию Тогда
				ЗафиксироватьМаркиВПромежуточномСтатусе(Объект.ОрганизацияЕГАИС, КлючИЗначение.Ключ);
				Объект.АкцизныеМарки.Удалить(СтрокаМарки);
			Иначе
				Если ДополнительныеПараметры.ПервоначальнаяПроверка Тогда
					Если (СтрокаМарки.Статус <> Перечисления.СтатусыАкцизныхМарок.КОприходованию) Тогда
						Если СтрокаМарки.Факт Тогда
							Поиск = Новый Структура("Номенклатура, Характеристика, Серия");
							ЗаполнитьЗначенияСвойств(Поиск, СтрокаМарки);
							КПерепроверке = Объект.АкцизныеМарки.НайтиСтроки(Поиск);
							Для Каждого СброситьПризнакПроверки Из КПерепроверке Цикл
								СброситьПризнакПроверки.Факт = Ложь;
							КонецЦикла;
							СтрокаОстатков = ПомарочныеОстатки.НайтиСтроки(Поиск)[0];
							СтрокаОстатков.Факт = 0;
							СтрокаОстатков.РекомендуетсяСканировать = 2;
							СтрокаОстатков.Проверено = 1;
						КонецЕсли;
					КонецЕсли;
					СтрокаМарки.Статус = Перечисления.СтатусыАкцизныхМарок.КОприходованию;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	МаркиЗаполнитьОписаниеИФильтры(ПомарочныеОстаткиТекущийФильтр);
	
КонецПроцедуры

#КонецОбласти

#Область Шаг3_ВыборСправок2

&НаКлиенте
Процедура МаркиОткрытьФормуУказанияСправок2(Марки = Неопределено)
	
	Если НЕ(Марки = Неопределено) И Марки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МаркиКВыборуСправок = ЗаполнитьМассивВыбораСправок(Марки);
	ОткрытьФорму("Обработка.ПомощникКорректировкиОстатковЕГАИС.Форма.ВыборСправки2", МаркиКВыборуСправок, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьМассивВыбораСправок(Идентификаторы)
	
	Если (Идентификаторы = Неопределено) Тогда
		Марки = Объект.АкцизныеМарки.НайтиСтроки(Новый Структура("Справка2", ПредопределенноеЗначение("Справочник.Справки2ЕГАИС.ПустаяСсылка")));
	ИначеЕсли ТипЗнч(Идентификаторы) = Тип("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС") Тогда
		Марки = Объект.АкцизныеМарки.НайтиСтроки(Новый Структура("АлкогольнаяПродукция, Справка2", Идентификаторы, ПредопределенноеЗначение("Справочник.Справки2ЕГАИС.ПустаяСсылка")));
	Иначе
		Марки = Новый Массив;
		Для Каждого ИдентификаторСтроки Из Идентификаторы Цикл
			Марки.Добавить(Объект.АкцизныеМарки.НайтиПоИдентификатору(ИдентификаторСтроки));
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыОткрытияФормы = Новый Структура;
	
	ДанныеМарок = Новый Массив;
	Для Каждого Марка Из Марки Цикл
		ДанныеМарки = Новый Структура;
		ДанныеМарки.Вставить("АлкогольнаяПродукция", Марка.АлкогольнаяПродукция);
		ДанныеМарки.Вставить("АкцизнаяМарка", Марка.АкцизнаяМарка);
		ДанныеМарки.Вставить("ДоступныеСправки", Новый СписокЗначений);
		ДанныеМарок.Добавить(ДанныеМарки);
	КонецЦикла;
	
	ПараметрыОткрытияФормы.Вставить("НайденныеМарки", ДанныеМарок);
	Возврат ПараметрыОткрытияФормы;
	
КонецФункции

&НаСервере
Процедура ОбработатьРезультатУказанияСправок2(РезультатВыбора)
	
	Для Каждого ЭлементМассива Из РезультатВыбора Цикл
		
		Если НЕ ЗначениеЗаполнено(ЭлементМассива.Справка2) Тогда
			Продолжить;
		КонецЕсли;
		
		//Обновить строку марки
		СтрокаМарки = Объект.АкцизныеМарки.НайтиСтроки(Новый Структура("АкцизнаяМарка", ЭлементМассива.АкцизнаяМарка))[0];
		СтрокаМарки.Справка2 = ЭлементМассива.Справка2;
		
		//Запомнить выбор в регистре
		ЭлементМассива.Вставить("ОрганизацияЕГАИС", Объект.ОрганизацияЕГАИС);
		ЭлементМассива.Вставить("АлкогольнаяПродукция", СтрокаМарки.АлкогольнаяПродукция);
		Если СтрокаМарки.УТМ Тогда
			ЭлементМассива.Вставить("Статус", Перечисления.СтатусыАкцизныхМарок.ВНаличии);
		Иначе
			ЭлементМассива.Вставить("Статус", Перечисления.СтатусыАкцизныхМарок.КОприходованию);
		КонецЕсли;
		РегистрыСведений.АкцизныеМаркиЕГАИС.ВыполнитьЗаписьВРегистр(ЭлементМассива);
		
	КонецЦикла;
	МаркиЗаполнитьОписаниеИФильтры(ПомарочныеОстаткиТекущийФильтр);
	
КонецПроцедуры

#КонецОбласти

#Область Шаг3_Прочее

&НаКлиенте
Процедура ОткрытьФормуРасшифровкиМарок()

		ТекущиеДанные = Элементы.ПомарочныеОстатки.ТекущиеДанные;
		Поиск = Новый Структура("Номенклатура, Характеристика, Серия");
		ЗаполнитьЗначенияСвойств(Поиск, ТекущиеДанные);
		Марки = Новый Массив;
		Для Каждого МаркаСтроки Из Объект.АкцизныеМарки.НайтиСтроки(Поиск) Цикл
			ПоляМарок = Новый Структура("Справка2, АкцизнаяМарка, УТМ, Факт, Регистр3, Статус");
			ЗаполнитьЗначенияСвойств(ПоляМарок, МаркаСтроки);
			Марки.Добавить(ПоляМарок);
		КонецЦикла;
		
		ПараметрыРасшифровкиСтроки = Новый Структура;
		ПараметрыРасшифровкиСтроки.Вставить("ПроверялосьУТМ", Объект.МаксимумМарокКПроверкеВУТМ > 0);
		ПараметрыРасшифровкиСтроки.Вставить("Остаток"       , ТекущиеДанные.Остаток);
		ПараметрыРасшифровкиСтроки.Вставить("Марки"         , Марки);
		
		ОткрытьФорму("Обработка.ПомощникКорректировкиОстатковЕГАИС.Форма.РасшифровкаМарок",
			ПараметрыРасшифровкиСтроки,
			ЭтаФорма);

КонецПроцедуры
&НаКлиенте
Процедура ОбработатьРезультатВыбораМарок(РезультатПроверки)
	
	ОбработатьРезультатВыбораМарокСервер(РезультатПроверки);
	МаркиУстановитьОписаниеДействий();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьРезультатВыбораМарокСервер(РезультатПроверки)
	
	Поиск = Новый Структура("Номенклатура, Характеристика, Серия");
	Разница = 0;
	Для Каждого ЭлементМассива Из РезультатПроверки Цикл
		
		СтрокаМарка = Объект.АкцизныеМарки.НайтиСтроки(Новый Структура("АкцизнаяМарка", ЭлементМассива.АкцизнаяМарка))[0];
		Если СтрокаМарка.Факт <> ЭлементМассива.Факт Тогда
			ЗаполнитьЗначенияСвойств(Поиск, СтрокаМарка);
			СтрокаМарка.Факт = ЭлементМассива.Факт;
			Если ЭлементМассива.Факт Тогда
				Разница = Разница + 1;
			Иначе
				Разница = Разница - 1;
			КонецЕсли;
			
			Если Объект.МаксимумМарокКПроверкеВУТМ > 0
				И СтрокаМарка.Факт = СтрокаМарка.УТМ
				И СтрокаМарка.Факт <> СтрокаМарка.Регистр3 Тогда
				Модифицированность = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Разница<> 0 Тогда
		
		СтрокаТаблицы = ПомарочныеОстатки.НайтиСтроки(Поиск)[0];
		СтрокаТаблицы.Факт = СтрокаТаблицы.Факт + Разница;
		Если СтрокаТаблицы.Факт = СтрокаТаблицы.Остаток Тогда
			СтрокаТаблицы.Проверено = 0;
			СтрокаТаблицы.РекомендуетсяСканировать = 1;
		Иначе
			СтрокаТаблицы.Проверено = 1;
			СтрокаТаблицы.РекомендуетсяСканировать = 2;
		КонецЕсли;
		
		МаркиЗаполнитьОписаниеИФильтры(ПомарочныеОстаткиТекущийФильтр);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПроверкуСтрокиМарок(ИдентификаторСтроки)
	
	УдалитьМарок = 0;
	
	Если Объект.МаксимумМарокКПроверкеВУТМ = 0 Тогда
	Иначе
		ТекущиеДанные = ПомарочныеОстатки.НайтиПоИдентификатору(ИдентификаторСтроки);
		Поиск = Новый Структура("Номенклатура, Характеристика, Серия, Факт, Регистр3, УТМ");
		ЗаполнитьЗначенияСвойств(Поиск, ТекущиеДанные);
		Поиск.Факт     = Ложь;
		Поиск.Регистр3 = Истина;
		Поиск.УТМ      = Ложь;
		УдалитьМарок = Объект.АкцизныеМарки.НайтиСтроки(Поиск).Количество();
	КонецЕсли;
	
	Если УдалитьМарок Тогда
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да,  НСтр("ru='Удалить марки'"));
		Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Продолжить проверку'"));
		
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ЗавершитьПроверкуУточнитьУдалениеМарок", ЭтотОбъект, ДополнительныеПараметры),
			СтрШаблон(НСтр("ru = '%1 акцизных марок отсутствуют и в УТМ ЕГАИС и на складе.
				                 |Подтвердите их удаление из Регистра №3'"), УдалитьМарок),
			Кнопки);
	Иначе
		ЗавершитьПроверкуСтрокиМарокСервер(ИдентификаторСтроки);
		МаркиУстановитьОписаниеДействий();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПроверкуУточнитьУдалениеМарок(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗавершитьПроверкуСтрокиМарокСервер(ДополнительныеПараметры.ИдентификаторСтроки);
		МаркиУстановитьОписаниеДействий();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗавершитьПроверкуСтрокиМарокСервер(ИдентификаторСтроки)
	
	ТекущиеДанные = ПомарочныеОстатки.НайтиПоИдентификатору(ИдентификаторСтроки);
	ПомарочныеОстаткиРасхожденияСтрок  = ПомарочныеОстаткиРасхожденияСтрок - 1;
	
	ТекущиеДанные.Проверено = 0;
	ТекущиеДанные.РекомендуетсяСканировать = 1;
	
	//Обновим запись в регистре, в случае если факт=УТМ<>данные регистра
	ДанныеЗаписи = Новый Структура;
	ДанныеЗаписи.Вставить("ОрганизацияЕГАИС", Объект.ОрганизацияЕГАИС);
	ДанныеЗаписи.Вставить("АкцизнаяМарка");
	ДанныеЗаписи.Вставить("АлкогольнаяПродукция");
	ДанныеЗаписи.Вставить("Справка2");
	
	Поиск = Новый Структура("Номенклатура, Характеристика, Серия, Факт, Регистр3");
	ЗаполнитьЗначенияСвойств(Поиск, ТекущиеДанные);
	Поиск.Факт     = Ложь;
	Поиск.Регистр3 = Истина;
	Если Объект.АкцизныеМарки.НайтиСтроки(Поиск).Количество() Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	Поиск = Новый Структура("Номенклатура, Характеристика, Серия, Факт, Регистр3, УТМ");
	ЗаполнитьЗначенияСвойств(Поиск, ТекущиеДанные);
	
	Если Объект.МаксимумМарокКПроверкеВУТМ > 0 Тогда
		
		ДанныеЗаписи.Вставить("Статус", Перечисления.СтатусыАкцизныхМарок.Отсутствует);
		Поиск.Факт     = Ложь;
		Поиск.Регистр3 = Истина;
		Поиск.УТМ      = Ложь;
		Для Каждого МаркаНеНайдена Из Объект.АкцизныеМарки.НайтиСтроки(Поиск) Цикл
			ЗаполнитьЗначенияСвойств(ДанныеЗаписи, МаркаНеНайдена, "АкцизнаяМарка, АлкогольнаяПродукция, Справка2");
			РегистрыСведений.АкцизныеМаркиЕГАИС.ВыполнитьЗаписьВРегистр(ДанныеЗаписи);
			Объект.АкцизныеМарки.Удалить(МаркаНеНайдена);
			ТекущиеДанные.Регистр3 = ТекущиеДанные.Регистр3 - 1;
		КонецЦикла;
		
		ДанныеЗаписи.Вставить("Статус", Перечисления.СтатусыАкцизныхМарок.ВНаличии);
		Поиск.Факт     = Истина;
		Поиск.Регистр3 = Ложь;
		Поиск.УТМ      = Истина;
		Для Каждого МаркаВНаличии Из Объект.АкцизныеМарки.НайтиСтроки(Поиск) Цикл
			ЗаполнитьЗначенияСвойств(ДанныеЗаписи, МаркаВНаличии, "АкцизнаяМарка, АлкогольнаяПродукция, Справка2");
			РегистрыСведений.АкцизныеМаркиЕГАИС.ВыполнитьЗаписьВРегистр(ДанныеЗаписи);
		КонецЦикла;
	
	КонецЕсли;
	
	МаркиУстановитьОписаниеСтраницы(ЭтаФорма);
	МаркиУстановитьФильтр(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьРезультатПомарочнойИнвентаризацииНаСервере()
	
	ПоляПоискаМарок = "Номенклатура,Характеристика,Серия";
	
	АкцизныеМарки = Объект.АкцизныеМарки.Выгрузить();
	АкцизныеМарки.Индексы.Добавить(ПоляПоискаМарок);
	
	ПоляПоиска = Новый Структура(ПоляПоискаМарок);
	
	ДанныеЗаписи = Новый Структура;
	ДанныеЗаписи.Вставить("ОрганизацияЕГАИС", Объект.ОрганизацияЕГАИС);
	ДанныеЗаписи.Вставить("АкцизнаяМарка");
	ДанныеЗаписи.Вставить("АлкогольнаяПродукция");
	ДанныеЗаписи.Вставить("Справка2");
	
	Для Каждого СтрокаТаблицы Из ПомарочныеОстатки.НайтиСтроки(Новый Структура("Проверено", 0)) Цикл
		
		ЗаполнитьЗначенияСвойств(ПоляПоиска, СтрокаТаблицы);
		МаркиСтроки = АкцизныеМарки.НайтиСтроки(ПоляПоиска);
		Для Каждого Марка Из МаркиСтроки Цикл
			Если Марка.Факт <> Марка.Регистр3 Тогда
				ЗаполнитьЗначенияСвойств(ДанныеЗаписи, Марка);
				ДанныеЗаписи.Вставить("Статус",
					?(Марка.Факт, Перечисления.СтатусыАкцизныхМарок.КОприходованию,Перечисления.СтатусыАкцизныхМарок.КСписанию));
				РегистрыСведений.АкцизныеМаркиЕГАИС.ВыполнитьЗаписьВРегистр(ДанныеЗаписи);
				Марка.Регистр3 = Марка.Факт;
				Марка.Статус   = ДанныеЗаписи.Статус;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ПомарочныеОстатки.НайтиСтроки(Новый Структура("Проверено, Факт, Регистр3", 1, Истина, Ложь)) Цикл
		
		ЗаполнитьЗначенияСвойств(ПоляПоиска, СтрокаТаблицы);
		МаркиСтроки = АкцизныеМарки.НайтиСтроки(ПоляПоиска);
		Для Каждого Марка Из МаркиСтроки Цикл
			Если Марка.Факт <> Марка.Регистр3 Тогда
				ЗаполнитьЗначенияСвойств(ДанныеЗаписи, Марка);
				ДанныеЗаписи.Вставить("Статус", Перечисления.СтатусыАкцизныхМарок.КОприходованию);
				РегистрыСведений.АкцизныеМаркиЕГАИС.ВыполнитьЗаписьВРегистр(ДанныеЗаписи);
				Марка.Регистр3 = Марка.Факт;
				Марка.Статус   = ДанныеЗаписи.Статус;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Объект.АкцизныеМарки.Загрузить(АкцизныеМарки);
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура МаркиЗаполнитьТаблицу()
	
	СтатусыМарокВНаличии = Новый Массив;
	СтатусыМарокВНаличии.Добавить(Перечисления.СтатусыАкцизныхМарок.ВНаличии);
	СтатусыМарокВНаличии.Добавить(Перечисления.СтатусыАкцизныхМарок.ВРезерве);
	СтатусыМарокВНаличии.Добавить(Перечисления.СтатусыАкцизныхМарок.КОприходованию);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтатусыМарокВНаличии", СтатусыМарокВНаличии);
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", Объект.ОрганизацияЕГАИС);
	Запрос.УстановитьПараметр("ОстаткиЕГАИС", Объект.ОстаткиВРегистре1);
	
	Обработки.ПомощникКорректировкиОстатковЕГАИС.УстановитьЗапросУчетныхОстатков(Запрос, Объект.ОрганизацияЕГАИС);
	
	Запрос.Текст = Запрос.Текст + 
	"ВЫБРАТЬ
	|	ОстаткиЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ОстаткиЕГАИС.Справка2 КАК Справка2
	|ПОМЕСТИТЬ ПоштучныеОстаткиЕГАИС
	|ИЗ
	|	Документ.ОстаткиЕГАИС.ОстаткиПоДаннымЕГАИС КАК ОстаткиЕГАИС
	|ГДЕ
	|	ОстаткиЕГАИС.Ссылка = &ОстаткиЕГАИС
	|	И ОстаткиЕГАИС.Справка2.Поштучная
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АлкогольнаяПродукция,
	|	Справка2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(СоответствиеПоСправке.Номенклатура, Соответствие.Номенклатура) КАК Номенклатура,
	|	ЕСТЬNULL(СоответствиеПоСправке.Характеристика, Соответствие.Характеристика) КАК Характеристика,
	|	ЕСТЬNULL(СоответствиеПоСправке.Серия, Соответствие.Серия) КАК Серия
	|ПОМЕСТИТЬ ВероятноПоштучнаяНоменклатура
	|ИЗ
	|	ПоштучныеОстаткиЕГАИС КАК Поштучные
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК СоответствиеПоСправке
	|		ПО СоответствиеПоСправке.АлкогольнаяПродукция = Поштучные.АлкогольнаяПродукция
	|		И СоответствиеПоСправке.Справка2 = Поштучные.Справка2
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК Соответствие
	|		ПО Соответствие.АлкогольнаяПродукция = Поштучные.АлкогольнаяПродукция
	|		И Соответствие.Справка2 = ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)
	|ГДЕ НЕ (СоответствиеПоСправке.Номенклатура ЕСТЬ NULL И Соответствие.Номенклатура ЕСТЬ NULL)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	АкцизныеМарки.Справка2 КАК Справка2,
	|	АкцизныеМарки.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	АкцизныеМарки.АкцизнаяМарка КАК АкцизнаяМарка,
	|	ИСТИНА КАК Регистр3,
	|	Штрихкоды.Номенклатура КАК Номенклатура,
	|	Штрихкоды.Характеристика КАК Характеристика,
	|	Штрихкоды.Серия КАК Серия,
	|	АкцизныеМарки.Статус КАК Статус
	|ПОМЕСТИТЬ Регистр3ТекущиеДанные
	|ИЗ
	|	РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМарки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК Штрихкоды
	|		ПО АкцизныеМарки.АкцизнаяМарка = Штрихкоды.Ссылка
	|ГДЕ
	|	АкцизныеМарки.ОрганизацияЕГАИС = &ОрганизацияЕГАИС
	|	И АкцизныеМарки.Статус В (&СтатусыМарокВНаличии)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	Характеристика,
	|	Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Регистр3ТекущиеДанные.Номенклатура,
	|	Регистр3ТекущиеДанные.Характеристика,
	|	Регистр3ТекущиеДанные.Серия,
	|	КОЛИЧЕСТВО(Регистр3ТекущиеДанные.АкцизнаяМарка) КАК Регистр3
	|ПОМЕСТИТЬ ПомарочныеОстатки
	|ИЗ
	|	Регистр3ТекущиеДанные КАК Регистр3ТекущиеДанные
	|СГРУППИРОВАТЬ ПО
	|	Регистр3ТекущиеДанные.Номенклатура,
	|	Регистр3ТекущиеДанные.Характеристика,
	|	Регистр3ТекущиеДанные.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПомарочныеОстатки.Номенклатура,
	|	ПомарочныеОстатки.Характеристика,
	|	ПомарочныеОстатки.Серия,
	|	ЕСТЬNULL(Остатки.Остаток, 0) КАК Остаток,
	|	ПомарочныеОстатки.Регистр3 КАК Регистр3
	|ПОМЕСТИТЬ ОстаткиСРасхождениями
	|ИЗ
	|	ПомарочныеОстатки КАК ПомарочныеОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Остатки КАК Остатки
	|		ПО ПомарочныеОстатки.Номенклатура = Остатки.Номенклатура
	|		И ПомарочныеОстатки.Характеристика = Остатки.Характеристика
	|		И ПомарочныеОстатки.Серия = Остатки.Серия
	|ГДЕ
	|	ЕСТЬNULL(Остатки.Остаток, 0) <> ПомарочныеОстатки.Регистр3
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Регистр3ТекущиеДанные.Номенклатура КАК Номенклатура,
	|	Регистр3ТекущиеДанные.Характеристика КАК Характеристика,
	|	Регистр3ТекущиеДанные.Серия КАК Серия,
	|	МАКСИМУМ(Регистр3ТекущиеДанные.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.КСписанию)) КАК СтрокаПроверена,
	|	СУММА(ВЫБОР
	|		КОГДА Регистр3ТекущиеДанные.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.КОприходованию)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК СтрокаПроверенаЧастично,
	|	КОЛИЧЕСТВО(Регистр3ТекущиеДанные.Номенклатура) КАК Марок
	|ПОМЕСТИТЬ ПродолжениеРаботы
	|ИЗ
	|	Регистр3ТекущиеДанные КАК Регистр3ТекущиеДанные
	|СГРУППИРОВАТЬ ПО
	|	Регистр3ТекущиеДанные.Номенклатура,
	|	Регистр3ТекущиеДанные.Характеристика,
	|	Регистр3ТекущиеДанные.Серия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Регистр3ТекущиеДанные.Справка2 КАК Справка2,
	|	Регистр3ТекущиеДанные.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Регистр3ТекущиеДанные.АкцизнаяМарка КАК АкцизнаяМарка,
	|	Регистр3ТекущиеДанные.Регистр3 КАК Регистр3,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПродолжениеРаботы.СтрокаПроверена, ЛОЖЬ)
	|			ТОГДА ИСТИНА
	|		КОГДА Регистр3ТекущиеДанные.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.КОприходованию)
	|			ТОГДА ИСТИНА
	|		КОГДА Расхождения.Номенклатура ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Факт,
	|	Регистр3ТекущиеДанные.Номенклатура КАК Номенклатура,
	|	Регистр3ТекущиеДанные.Характеристика КАК Характеристика,
	|	Регистр3ТекущиеДанные.Серия КАК Серия,
	|	Регистр3ТекущиеДанные.Статус КАК Статус
	|ИЗ
	|	Регистр3ТекущиеДанные КАК Регистр3ТекущиеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиСРасхождениями КАК Расхождения
	|		ПО Расхождения.Номенклатура = Регистр3ТекущиеДанные.Номенклатура
	|		И Расхождения.Характеристика = Регистр3ТекущиеДанные.Характеристика
	|		И Расхождения.Серия = Регистр3ТекущиеДанные.Серия
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПродолжениеРаботы КАК ПродолжениеРаботы
	|		ПО ПродолжениеРаботы.Номенклатура = Регистр3ТекущиеДанные.Номенклатура
	|		И ПродолжениеРаботы.Характеристика = Регистр3ТекущиеДанные.Характеристика
	|		И ПродолжениеРаботы.Серия = Регистр3ТекущиеДанные.Серия
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	АкцизныеМарки.Справка2,
	|	АкцизныеМарки.АлкогольнаяПродукция,
	|	АкцизныеМарки.АкцизнаяМарка,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	Штрихкоды.Номенклатура,
	|	Штрихкоды.Характеристика,
	|	Штрихкоды.Серия,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.КСписанию)
	|ИЗ
	|	РегистрСведений.АкцизныеМаркиЕГАИС КАК АкцизныеМарки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК Штрихкоды
	|		ПО АкцизныеМарки.АкцизнаяМарка = Штрихкоды.Ссылка
	|ГДЕ
	|	АкцизныеМарки.ОрганизацияЕГАИС = &ОрганизацияЕГАИС
	|	И АкцизныеМарки.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.КСписанию)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Расхождения.Номенклатура КАК Номенклатура,
	|	Расхождения.Характеристика КАК Характеристика,
	|	Расхождения.Серия КАК Серия,
	|	Расхождения.Регистр3 КАК Регистр3,
	|	Расхождения.Остаток КАК Остаток,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПродолжениеРаботы.СтрокаПроверена, ЛОЖЬ) = ИСТИНА
	|			ТОГДА ПродолжениеРаботы.Марок
	|		ИНАЧЕ ЕСТЬNULL(ПродолжениеРаботы.СтрокаПроверенаЧастично, 0)
	|	КОНЕЦ КАК Факт,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ПродолжениеРаботы.СтрокаПроверена, ЛОЖЬ) = ИСТИНА
	|			ТОГДА Расхождения.Остаток - ПродолжениеРаботы.Марок
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Партионных,
	|	2 КАК РекомендуетсяСканировать,
	|	1 КАК Проверено
	|ИЗ
	|	ОстаткиСРасхождениями КАК Расхождения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПродолжениеРаботы КАК ПродолжениеРаботы
	|		ПО ПродолжениеРаботы.Номенклатура = Расхождения.Номенклатура
	|		И ПродолжениеРаботы.Характеристика = Расхождения.Характеристика
	|		И ПродолжениеРаботы.Серия = Расхождения.Серия
	|ГДЕ
	|	Расхождения.Остаток <> 0
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Регистр3ТекущиеДанные.Номенклатура,
	|	Регистр3ТекущиеДанные.Характеристика,
	|	Регистр3ТекущиеДанные.Серия,
	|	КОЛИЧЕСТВО(Регистр3ТекущиеДанные.Регистр3),
	|	КОЛИЧЕСТВО(Регистр3ТекущиеДанные.Регистр3),
	|	КОЛИЧЕСТВО(Регистр3ТекущиеДанные.Регистр3),
	|	0,
	|	1,
	|	0
	|ИЗ
	|	Регистр3ТекущиеДанные КАК Регистр3ТекущиеДанные
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиСРасхождениями КАК Расхождения
	|		ПО Расхождения.Номенклатура = Регистр3ТекущиеДанные.Номенклатура
	|		И Расхождения.Характеристика = Регистр3ТекущиеДанные.Характеристика
	|		И Расхождения.Серия = Регистр3ТекущиеДанные.Серия
	|ГДЕ
	|	Расхождения.Номенклатура ЕСТЬ NULL
	|СГРУППИРОВАТЬ ПО
	|	Регистр3ТекущиеДанные.Номенклатура,
	|	Регистр3ТекущиеДанные.Характеристика,
	|	Регистр3ТекущиеДанные.Серия
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Расхождения.Номенклатура,
	|	Расхождения.Характеристика,
	|	Расхождения.Серия,
	|	0,
	|	Расхождения.Остаток,
	|	0,
	|	0,
	|	0,
	|	2
	|ИЗ
	|	Остатки КАК Расхождения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВероятноПоштучнаяНоменклатура КАК ВероятноПоштучнаяНоменклатура
	|		ПО Расхождения.Номенклатура = ВероятноПоштучнаяНоменклатура.Номенклатура
	|		И Расхождения.Характеристика = ВероятноПоштучнаяНоменклатура.Характеристика
	|		И Расхождения.Серия = ВероятноПоштучнаяНоменклатура.Серия
	|		ЛЕВОЕ СОЕДИНЕНИЕ Регистр3ТекущиеДанные КАК Регистр3ТекущиеДанные
	|		ПО Расхождения.Номенклатура = Регистр3ТекущиеДанные.Номенклатура
	|		И Расхождения.Характеристика = Регистр3ТекущиеДанные.Характеристика
	|		И Расхождения.Серия = Регистр3ТекущиеДанные.Серия
	|ГДЕ
	|	Регистр3ТекущиеДанные.Номенклатура ЕСТЬ NULL";
	
	Пакет = Запрос.ВыполнитьПакет();
	
	Объект.АкцизныеМарки.Загрузить(Пакет[Пакет.Количество()-2].Выгрузить());
	ПомарочныеОстатки.Загрузить(Пакет[Пакет.Количество()-1].Выгрузить());
	
	МаркиЗаполнитьОписаниеИФильтры(2);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Шаг4_ПросмотрСопоставлениеОстатков

#Область Шаг4_ОбработчикиСобытийИКоманд

&НаКлиенте
Процедура ОбновитьДанныеТаблицыОстатков(Команда)
	
	ОстаткиЗаполнитьНесопоставленнуюПродукцию();
	УстановитьОтборТаблицыОстатков(ЭтотОбъект);
	ОстаткиУстановитьОписаниеСтроки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.Остатки.ТекущиеДанные;
	
	Элементы.ЗапроситьМарки.Доступность = (ТекущиеДанные<>Неопределено)
		И ЗначениеЗаполнено(ТекущиеДанные.Справка2)
		И ЗначениеЗаполнено(ТекущиеДанные.Номенклатура)
		И ТекущиеДанные.Расхождения = 2;
	
	ПодключитьОбработчикОжидания("ОстаткиУстановитьОписаниеСтроки", 0.6, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Остатки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если    Поле = Элементы.ОстаткиНоменклатура
		ИЛИ Поле = Элементы.ОстаткиХарактеристика
		ИЛИ Поле = Элементы.ОстаткиСерия Тогда
		
			СтандартнаяОбработка = Ложь;
			ИнтеграцияЕГАИСКлиент.ОткрытьФормуСопоставленияАлкогольнойПродукции(
				ТекущиеДанные.АлкогольнаяПродукция,
				ЭтотОбъект);
			Возврат;
		
	КонецЕсли;
	
	Если Поле = Элементы.ОстаткиСправка2 И ЗначениеЗаполнено(ТекущиеДанные.Справка2) Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(,ТекущиеДанные.Справка2);
		Возврат;
		
	КонецЕсли;
	
	Если Поле = Элементы.ОстаткиАлкогольнаяПродукция Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(,ТекущиеДанные.АлкогольнаяПродукция);
		Возврат;
		
	КонецЕсли;
	
	Если    Поле = Элементы.ОстаткиЕГАИС
		ИЛИ Поле = Элементы.ОстаткиОстаток Тогда
		
		Если ТекущиеДанные.Расхождения <> 1 Тогда
			Возврат;
		ИначеЕсли ТекущиеДанные.Проверена Тогда
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		Сопоставить();
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьКлассификаторы(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Товары", ПоместитьНесопоставленныеТоварыВоВремененноеХранилище());
	ПараметрыОткрытияФормы.Вставить("РазрешитьМенятьСопоставление", Истина);
	
	СобытияФормЕГАИСКлиент.ОткрытьФормуСопоставленияКлассификаторовЕГАИС(
		ЭтотОбъект,
		Новый ОписаниеОповещения("ПриЗавершенииСопоставленияКлассификаторов", ЭтотОбъект),
		ПараметрыОткрытияФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьМарки(Команда)
	
	ОстаткиЗапросМарок(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область Шаг4_Марки

&НаКлиенте
Процедура ОстаткиЗапросМарок(ПоТекущейСтроке)
	
	ЗапроситьОстаткиПоСправкам = Новый Соответствие;
	Если ПоТекущейСтроке Тогда
		ДанныеСтроки = Элементы.Остатки.ТекущиеДанные;
		Если ЗначениеЗаполнено(ДанныеСтроки.Справка2)
			И ДанныеСтроки.Расхождения = 2 Тогда
				ПоляСоответствия = Новый Структура("АлкогольнаяПродукция, Номенклатура, Характеристика,Серия");
				ЗаполнитьЗначенияСвойств(ПоляСоответствия, ДанныеСтроки);
				ЗапроситьОстаткиПоСправкам.Вставить(ДанныеСтроки.Справка2, ПоляСоответствия);
				ДанныеСтроки.Расхождения = 3;
				ОстаткиУстановитьОписаниеСтроки();
		КонецЕсли;
	Иначе
		Для Каждого ДанныеСтроки Из Объект.Остатки.НайтиСтроки(Новый Структура("Расхождения", 2)) Цикл
			ПоляСоответствия = Новый Структура("АлкогольнаяПродукция, Номенклатура, Характеристика,Серия");
			ЗаполнитьЗначенияСвойств(ПоляСоответствия, ДанныеСтроки);
			ЗапроситьОстаткиПоСправкам.Вставить(ДанныеСтроки.Справка2, ПоляСоответствия);
			ДанныеСтроки.Расхождения = 3;
		КонецЦикла;
	КонецЕсли;
	Если ЗапроситьОстаткиПоСправкам.Количество() Тогда
		Если СоздатьПодготовитьКПередачеЗапросОстатковПоСправкам(ЗапроситьОстаткиПоСправкам) Тогда
			ИнтервальныйЗапросМарокПоСправке2();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьПодготовитьКПередачеЗапросОстатковПоСправкам(МассивСправок)
	
	ОбработчикиДобавлены = Ложь;
	
	Для Каждого СправкаИАлкогольнаяПродукция Из МассивСправок Цикл
		Если ОтчетОстаткиПоСправкам.НайтиСтроки(Новый Структура("Справка2",СправкаИАлкогольнаяПродукция.Ключ)).Количество() = 0 Тогда 
			
			ОбработчикиДобавлены = Истина;
			
			СоответствиеПоСправке2 = РегистрыСведений.СоответствиеНоменклатурыЕГАИС.СоздатьМенеджерЗаписи();
			СоответствиеПоСправке2.Номенклатура         = СправкаИАлкогольнаяПродукция.Значение.Номенклатура;
			СоответствиеПоСправке2.Характеристика       = СправкаИАлкогольнаяПродукция.Значение.Характеристика;
			СоответствиеПоСправке2.Серия                = СправкаИАлкогольнаяПродукция.Значение.Серия;
			СоответствиеПоСправке2.АлкогольнаяПродукция = СправкаИАлкогольнаяПродукция.Значение.АлкогольнаяПродукция;
			СоответствиеПоСправке2.Справка2             = СправкаИАлкогольнаяПродукция.Ключ;
			СоответствиеПоСправке2.Записать();
			
			НоваяСтрокаТаблицы = ОтчетОстаткиПоСправкам.Добавить();
			НоваяСтрокаТаблицы.Справка2 = СправкаИАлкогольнаяПродукция.Ключ;
			НоваяСтрокаТаблицы.АлкогольнаяПродукция = СправкаИАлкогольнаяПродукция.Значение.АлкогольнаяПродукция;
			НоваяСтрокаТаблицы.ДокументОтчет = Неопределено;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ОбработчикиДобавлены Тогда
		ПодготовитьКПередачеЗапросОстатковПоСправке2();
	КонецЕсли;
	
	Возврат ОбработчикиДобавлены;
	
КонецФункции

&НаСервере
Процедура ПодготовитьКПередачеЗапросОстатковПоСправке2()
	
	Если ОтчетОстаткиПоСправкам.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДляЗапроса = ОтчетОстаткиПоСправкам[0];
	Если ЗначениеЗаполнено(СтрокаДляЗапроса.ДокументОтчет) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТаймерЗапросов > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТаймерЗапросов = Объект.ИнтервалОжиданияМарокПоСправке2 + 1;
	
	ЗапросОстатков = Документы.ОтчетЕГАИС.СоздатьДокумент();
	
	ДанныеЗаполнения = Новый Структура;
	ДанныеЗаполнения.Вставить("ОрганизацияЕГАИС"    , Объект.ОрганизацияЕГАИС);
	ДанныеЗаполнения.Вставить("ВидДокумента"        , Перечисления.ВидыДокументовЕГАИС.ЗапросОтчетаОстаткиВРегистре3);
	ДанныеЗаполнения.Вставить("Справка2"            , СтрокаДляЗапроса.Справка2);
	ДанныеЗаполнения.Вставить("АлкогольнаяПродукция", СтрокаДляЗапроса.АлкогольнаяПродукция);
	ДанныеЗаполнения.Вставить("ДокументОснование"   , Объект.ОстаткиВРегистре1);
	
	ЗапросОстатков.Заполнить(ДанныеЗаполнения);
	ЗапросОстатков.Записать(РежимЗаписиДокумента.Проведение);
	ИнтеграцияЕГАИСВызовСервера.ПодготовитьКПередаче(
		ЗапросОстатков.Ссылка, Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ЗапроситеОтчет);
	СтрокаДляЗапроса.ДокументОтчет = ЗапросОстатков.Ссылка;
	
	Элементы.ЗапроситьМарки.Заголовок = НСтр("ru = 'Выполняется запрос марок по Справке №2'");
	Элементы.ЗапроситьМарки.Доступность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапросОстатковПоСправкамОбработчикОжидания()
	
	ИнтеграцияЕГАИСКлиент.ВыполнитьОбмен(
		Объект.ОрганизацияЕГАИС,
		Новый ОписаниеОповещения("ПроверкаПолученияОтчетаЕГАИС",ЭтотОбъект),
		ЭтотОбъект.УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнтервальныйЗапросМарокПоСправке2()
	
	Если ОтчетОстаткиПоСправкам.Количество() Тогда
		Если ЗначениеЗаполнено(ОтчетОстаткиПоСправкам[0].ДокументОтчет) Тогда
			//14 минут на получение ответа от ЕГАИС, двухминутными интервалами
			ТаймерЗапросов = ТаймерЗапросов - 1;
			Если ТаймерЗапросов = 0 Тогда
				ОтчетОстаткиПоСправкам[0].ДокументОтчет = Неопределено;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СтрШаблон(НСтр("ru = 'Повторный запрос марок по справке №2 %1'"),ОтчетОстаткиПоСправкам[0].Справка2));
				ПодготовитьКПередачеЗапросОстатковПоСправке2();
			КонецЕсли;
			ЗапросОстатковПоСправкамОбработчикОжидания();
		ИначеЕсли ТаймерЗапросов > 0 Тогда
			//12 минут после получения ответа до отправки очередного запроса, двухминутными интервалами
			Элементы.ЗапроситьМарки.Заголовок = СтрШаблон(НСтр("ru = 'Ожидание %1 минут до запроса марок по очередной Справке №2'"), ТаймерЗапросов);
			Элементы.ЗапроситьМарки.Доступность = Ложь;
			ТаймерЗапросов = ТаймерЗапросов - 1;
		Иначе
			ПодготовитьКПередачеЗапросОстатковПоСправке2();
		КонецЕсли;
		ПодключитьОбработчикОжидания("ИнтервальныйЗапросМарокПоСправке2", Объект.ИнтервалОбменаУТМ, Истина);
	Иначе
		Элементы.ЗапроситьМарки.Доступность = Истина;
		Элементы.ЗапроситьМарки.Заголовок = НСтр("ru = 'Запросить марки из Регистра №3 ЕГАИС'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РезультатПолученияОтчетов(Знач КоллекцияЗапросов)
	
	Результат = Новый Соответствие;
	МассивКЗапросуСтатусов = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из КоллекцияЗапросов Цикл 
		Если НЕ СтрокаТаблицы.ПолученОтвет Тогда
			МассивКЗапросуСтатусов.Добавить(СтрокаТаблицы.ДокументОтчет);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документы", МассивКЗапросуСтатусов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыДокументовЕГАИС.Документ КАК Документ,
	|	СтатусыДокументовЕГАИС.Документ.Справка2 КАК Справка2,
	|	ВЫБОР 
	|		КОГДА СтатусыДокументовЕГАИС.ДальнейшееДействие1 = ЗНАЧЕНИЕ(Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтработайтеРасхождения)
	|			ТОГДА СтатусыДокументовЕГАИС.ДальнейшееДействие1
	|		ИНАЧЕ
	|			СтатусыДокументовЕГАИС.Статус КОНЕЦ КАК Статус
	|ИЗ
	|	РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|ГДЕ
	|	СтатусыДокументовЕГАИС.Документ В (&Документы)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ИзменитьМарки = Неопределено;
		Если Выборка.Статус = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтработайтеРасхождения Тогда
			
			ПараметрыОбновленияСтатуса = ИнтеграцияЕГАИС.ПараметрыОбновленияСтатуса();
			ПараметрыОбновленияСтатуса.ОбновлятьДвижения = Ложь;
			
			ИзменитьМарки = Документы.ОтчетЕГАИС.ОтработатьРасхожденияЗапросОтчетаОстаткиВРегистре3(Выборка.Документ,,Ложь);
			
			Документы.ОтчетЕГАИС.ОбновитьСтатусПослеПолученияДанных(
				Выборка.Документ,
				Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаОстаткиВРегистре3,
				ПараметрыОбновленияСтатуса);
			
		КонецЕсли;
		
		Результат.Вставить(Выборка.Документ, Новый Структура("Статус, ИзменитьМарки", Выборка.Статус, ИзменитьМарки));
		
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПроверкаПолученияОтчетаЕГАИС(Результат, ДополнительныеПараметры) Экспорт
	
	ЕстьНеобработанные = Ложь;
	ЕстьОтработанные = Ложь;
	Статусы = РезультатПолученияОтчетов(ОтчетОстаткиПоСправкам);
	Для Каждого КлючИЗначение Из Статусы Цикл 
		СтрокаТЧ = ОтчетОстаткиПоСправкам.НайтиСтроки(Новый Структура("ДокументОтчет",КлючИЗначение.Ключ))[0];
		Если КлючИЗначение.Значение.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОтчетаЕГАИС.ПолученОтчет") Тогда
			ЕстьОтработанные = Истина;
			СтрокаТЧ.ПолученОтвет = Истина;
			СтрокаСправки2 = Объект.Остатки.НайтиСтроки(Новый Структура("Справка2, Расхождения", СтрокаТЧ.Справка2, 3))[0];
			СтрокаСправки2.Проверена = Истина;
			Если СтрокаСправки2.Расхождения = 3 Тогда
				СтрокаСправки2.Расхождения = ?(СтрокаСправки2.Излишки ИЛИ СтрокаСправки2.Недостача, 1, 0);
				ОстаткиЗапроситьМарки = ОстаткиЗапроситьМарки - 1;
				ОстаткиОбновитьФильтр(ЭтотОбъект);
			КонецЕсли;
		ИначеЕсли КлючИЗначение.Значение.Статус = ПредопределенноеЗначение("Перечисление.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтработайтеРасхождения") Тогда
			
			ОбновитьМаркиПоСправке(КлючИЗначение);
			ЕстьОтработанные = Истина;
		ИначеЕсли КлючИЗначение.Значение.Статус = ПредопределенноеЗначение("Перечисление.СтатусыОбработкиОтчетаЕГАИС.ОшибкаПередачи") Тогда
			ЕстьОтработанные = Истина;
			ТекстОшибки = ТекстПоследнейОшибкиОбмена(КлючИЗначение.Ключ);
			Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
				ТекстОшибки = Символы.ПС + ТекстОшибки;
			КонецЕсли;
			ТекстОшибки = СтрШаблон(НСтр("ru='Ошибка получения марок по Справке2 %1 из Регистра3 ЕГАИС'"),СтрокаТЧ.Справка2) + ТекстОшибки;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			СтрокаТЧ.ПолученОтвет = Истина;
			СтрокаСправки2 = Объект.Остатки.НайтиСтроки(Новый Структура("Справка2", СтрокаТЧ.Справка2))[0];
			СтрокаСправки2.Расхождения = 2;
		Иначе 
			ЕстьНеобработанные = Истина;
		КонецЕсли;
	КонецЦикла;
	
	МассивОтработанных = ОтчетОстаткиПоСправкам.НайтиСтроки(Новый Структура("ПолученОтвет", Истина));
	Для Каждого УдалитьОтработанный Из МассивОтработанных Цикл
		ОтчетОстаткиПоСправкам.Удалить(УдалитьОтработанный);
	КонецЦикла;
	
	Если ЕстьОтработанные Тогда
		ПодключитьОбработчикОжидания("ОстаткиУстановитьОписаниеСтроки", 0.6, Истина);
		
		Если ЕстьНеобработанные Тогда
			
			ТаймерЗапросов = Объект.ИнтервалЗапросаМарокПоСправке2;
			ИнтервальныйЗапросМарокПоСправке2();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьМаркиПоСправке(РезультатЗапросаОстатков)

	СтрокаТЧ = ОтчетОстаткиПоСправкам.НайтиСтроки(Новый Структура("ДокументОтчет",РезультатЗапросаОстатков.Ключ))[0];
	
	СтрокаТЧ.ПолученОтвет = Истина;
	СтрокаСправки2 = Объект.Остатки.НайтиСтроки(Новый Структура("Справка2, Расхождения", СтрокаТЧ.Справка2, 3))[0];
	
	СтрокаСправки2.Расхождения = 0;
	ОстаткиЗапроситьМарки = ОстаткиЗапроситьМарки - 1;
	СтрокаСправки2.Проверена = Истина;
	
	ИзменитьМарки = РезультатЗапросаОстатков.Значение.ИзменитьМарки;
	
	Для Каждого АкцизнаяМарка Из ИзменитьМарки.ВНаличииЕГАИС Цикл
		Если ТипЗнч(АкцизнаяМарка)=Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
		СтрокиМарки = Объект.АкцизныеМарки.НайтиСтроки(Новый Структура("АкцизнаяМарка", АкцизнаяМарка));
		Если СтрокиМарки.Количество() Тогда
			СтрокиМарки[0].Регистр3 = Истина;
		Иначе
			НоваяСтрокаМарка = Объект.АкцизныеМарки.Добавить();
			НоваяСтрокаМарка.АкцизнаяМарка = АкцизнаяМарка;
			НоваяСтрокаМарка.АлкогольнаяПродукция = СтрокаСправки2.АлкогольнаяПродукция;
			НоваяСтрокаМарка.Справка2 = СтрокаТЧ.Справка2;
			НоваяСтрокаМарка.Регистр3 = Истина;
			НоваяСтрокаМарка.УТМ = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого АкцизнаяМарка Из ИзменитьМарки.ОтсутствуютЕГАИС Цикл
		СтрокиМарки = Объект.АкцизныеМарки.НайтиСтроки(Новый Структура("АкцизнаяМарка", АкцизнаяМарка));
		СтрокиМарки[0].Регистр3 = Ложь;
	КонецЦикла;
	
	Для Каждого АкцизнаяМарка Из ИзменитьМарки.Оприходовать Цикл
		СтрокиМарки = Объект.АкцизныеМарки.НайтиСтроки(Новый Структура("АкцизнаяМарка", АкцизнаяМарка));
		СтрокиМарки[0].Регистр3 = Истина;
		СтрокиМарки[0].УТМ = Истина;
	КонецЦикла;
	
	Для Каждого АкцизнаяМарка Из ИзменитьМарки.Списать Цикл
		СтрокиМарки = Объект.АкцизныеМарки.НайтиСтроки(Новый Структура("АкцизнаяМарка", АкцизнаяМарка));
		Объект.АкцизныеМарки.Удалить(СтрокиМарки[0]);
	КонецЦикла;
	
	РазбитьСтрокуПриПолученииМарок(СтрокаСправки2);
	
	ОстаткиОбновитьФильтр(ЭтотОбъект);
	
КонецПроцедуры


&НаСервере
Процедура РазбитьСтрокуПриПолученииМарок(СтрокаСправки2)
	
	Было = 0;
	Оприходовать = 0;
	Списать = 0;
	Для Каждого СтрокаМарки Из Объект.АкцизныеМарки.НайтиСтроки(Новый Структура("Справка2", СтрокаСправки2.Справка2)) Цикл
		Если СтрокаМарки.Факт И СтрокаМарки.Регистр3 Тогда
			Было = Было + 1;
		ИначеЕсли СтрокаМарки.Факт Тогда
			Оприходовать = Оприходовать + 1;
		Иначе
			Списать = Списать + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если Оприходовать>0 Тогда
		НоваяСтрока = Объект.Остатки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСправки2);
		НоваяСтрока.Остаток = Оприходовать;
		НоваяСтрока.ЕГАИС = 0;
		НоваяСтрока.Излишки = Истина;
		НоваяСтрока.Расхождения = 1;
		ОстаткиПодтвержденоИзлишки = ОстаткиПодтвержденоИзлишки + 1;
	КонецЕсли;
	
	Если Списать>0 Тогда
		НоваяСтрока = Объект.Остатки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСправки2);
		НоваяСтрока.Остаток = 0;
		НоваяСтрока.ЕГАИС = Списать;
		НоваяСтрока.Недостача = Истина;
		НоваяСтрока.Расхождения = 1;
		ОстаткиПодтвержденоНедостача = ОстаткиПодтвержденоНедостача + 1;
	КонецЕсли;
	
	Если Было>0 Тогда
		СтрокаСправки2.Остаток = Было;
		СтрокаСправки2.ЕГАИС = Было;
	Иначе
		Объект.Остатки.Удалить(СтрокаСправки2);
	КонецЕсли;
КонецПроцедуры


#КонецОбласти

#Область Шаг4_СопоставлениеНоменклатуры

&НаСервере
Процедура ОстаткиЗаполнитьНесопоставленнуюПродукцию()
	
	ПустаяНоменклатура = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура");
	ТаблицаПродукции = Объект.Остатки.Выгрузить(Новый Структура("Номенклатура", ПустаяНоменклатура));
	ИнтеграцияЕГАИС.ЗаполнитьСопоставленнуюПродукцию(ТаблицаПродукции);
	
	ЗапросКоэффициентовПересчета = Новый Запрос;
	ЗапросКоэффициентовПересчета.УстановитьПараметр("ТаблицаНесопоставленнойПродукции", ТаблицаПродукции);
	ЗапросКоэффициентовПересчета.Текст = 
	"ВЫБРАТЬ
	|	ТЗ.Номенклатура КАК Номенклатура
	|ПОМЕСТИТЬ ТЗ
	|ИЗ
	|	&ТаблицаНесопоставленнойПродукции КАК ТЗ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЗ.Номенклатура КАК Номенклатура,
	|	&ОбъемДАЛ КАК ОбъемДАЛ
	|ИЗ
	|	ТЗ";
	
	ИнтеграцияЕГАИСПереопределяемый.ОпределитьКоэффициентПересчетаНеупакованнойПродукции(
		ЗапросКоэффициентовПересчета.Текст,
		"ТЗ.Номенклатура",
		"&ОбъемДАЛ");
	КоэффициентыПересчета = ЗапросКоэффициентовПересчета.Выполнить().Выгрузить();
	КоэффициентыПересчета.Индексы.Добавить("Номенклатура");
	
	Для Каждого СтрокаСопоставления Из ТаблицаПродукции Цикл
		
		СтруктураПоискаОстатков = Новый Структура;
		СтруктураПоискаОстатков.Вставить("АлкогольнаяПродукция",СтрокаСопоставления.АлкогольнаяПродукция);
		СтруктураПоискаОстатков.Вставить("Справка2",СтрокаСопоставления.Справка2);
		СтруктураПоискаОстатков.Вставить("Номенклатура",ПустаяНоменклатура);
		
		СтрокиОстатков = Объект.Остатки.НайтиСтроки(СтруктураПоискаОстатков);
		
		Если СтрокаСопоставления.Сопоставлено Тогда
			
			Если СтрокаСопоставления.ПродаетсяВРозлив Тогда
				ОбъемДАЛ = КоэффициентыПересчета.НайтиСтроки(Новый Структура("Номенклатура", СтрокаСопоставления.Номенклатура))[0].ОбъемДАЛ;
			Иначе
				ОбъемДАЛ = 1;
			КонецЕсли;
			
			Для Каждого СтрокаОстатка Из СтрокиОстатков Цикл
				ЗаполнитьЗначенияСвойств(СтрокаОстатка, СтрокаСопоставления, "Номенклатура, Характеристика, Серия, СопоставлениеНоменклатура, Сопоставлено");
				СтрокаОстатка.ОбъемДАЛ = ОбъемДАЛ;
			КонецЦикла;
			
		Иначе
			
			Для Каждого СтрокаОстатка Из СтрокиОстатков Цикл
				ЗаполнитьЗначенияСвойств(СтрокаОстатка, СтрокаСопоставления, "СопоставлениеНоменклатура, Сопоставлено");
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	ОстаткиЗаполнитьОписаниеИФильтры(ОстаткиТекущийФильтр);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСопоставленияНоменклатуры()
	
	ТекущаяСтрока = Элементы.Остатки.ТекущиеДанные;
	Если Не ЗначениеЗаполнено(ТекущаяСтрока.АлкогольнаяПродукция) Тогда
		СопоставитьКлассификаторы(Неопределено);
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Товары", ПоместитьДляСопоставления(
		ТекущаяСтрока.Номенклатура,
		ТекущаяСтрока.Характеристика,
		ТекущаяСтрока.АлкогольнаяПродукция,
		УникальныйИдентификатор));
	ПараметрыОткрытияФормы.Вставить("РазрешитьМенятьСопоставление", Истина);
	
	СобытияФормЕГАИСКлиент.ОткрытьФормуСопоставленияКлассификаторовЕГАИС(
		ЭтотОбъект,
		Новый ОписаниеОповещения("ПриЗавершенииСопоставленияКлассификаторов", ЭтотОбъект),
		ПараметрыОткрытияФормы);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПоместитьДляСопоставления(Номенклатура, Характеристика, АлкогольнаяПродукция, УникальныйИдентификатор)
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("Номенклатура", Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	Таблица.Колонки.Добавить("Характеристика", Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	Таблица.Колонки.Добавить("АлкогольнаяПродукция", Новый ОписаниеТипов("СправочникСсылка.КлассификаторАлкогольнойПродукцииЕГАИС"));
	Таблица.Колонки.Добавить("Серия", Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	Таблица.Колонки.Добавить("ИдентификаторУпаковки",Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(50)));
	
	СтрокаТаблицы = Таблица.Добавить();
	СтрокаТаблицы.Номенклатура = Номенклатура;
	СтрокаТаблицы.Характеристика = Характеристика;
	СтрокаТаблицы.АлкогольнаяПродукция = АлкогольнаяПродукция;
	
	Возврат ПоместитьВоВременноеХранилище(Таблица, УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Функция ПоместитьНесопоставленныеТоварыВоВремененноеХранилище()
	
	Товары = Объект.Остатки.Выгрузить(,"АлкогольнаяПродукция,Номенклатура,Характеристика,Серия");
	Товары.Колонки.Добавить("ИдентификаторУпаковки",Новый ОписаниеТипов("Строка", ,Новый КвалификаторыСтроки(50)));
	
	Для Каждого СтрокаБезАлкогольнойПродукции Из Товары.НайтиСтроки(Новый Структура("АлкогольнаяПродукция", Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка())) Цикл
		Товары.Удалить(СтрокаБезАлкогольнойПродукции);
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(Товары, УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура ПриЗавершенииСопоставленияКлассификаторов(Результат, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьТаблицуОстатковПослеСопоставленияКлассификаторов();
	ОстаткиУстановитьОписаниеСтроки();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуОстатковПослеСопоставленияКлассификаторов()
	
	ОстаткиЗаполнитьНесопоставленнуюПродукцию();
	
КонецПроцедуры

#КонецОбласти

#Область Шаг4_Партии

&НаКлиенте
Процедура ОстаткиВозобновлениеПроверки()
	
	ТекущиеДанные = Элементы.Остатки.ТекущиеДанные;
	
	ТекущиеДанные.Расхождения = 1;
	ТекущиеДанные.Проверена   = Ложь;
	ТекущиеДанные.ТекстОшибки = НСтр("ru = 'Требуется повторная проверка'");
	
	Если ТекущиеДанные.Остаток = ТекущиеДанные.ЕГАИС Тогда
		
		НоваяСтрока = Объект.Остатки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Элементы.Остатки.ТекущиеДанные,,"ЕГАИС, АлкогольнаяПродукция, Справка2");
		
		ТекущиеДанные.Остаток = 0;
		ТекущиеДанные.Номенклатура = Неопределено;
		ТекущиеДанные.Характеристика = Неопределено;
		ТекущиеДанные.Серия = Неопределено;
		ТекущиеДанные.СопоставлениеНоменклатура = НСтр("ru = 'Не выбрано'");
		ОстаткиРаспределитьОстатки = ОстаткиРаспределитьОстатки + 2;
		
	ИначеЕсли ТекущиеДанные.Излишки Тогда
		
		ТекущиеДанные.Излишки = Ложь;
		ОстаткиПодтвержденоИзлишки = ОстаткиПодтвержденоИзлишки - 1;
		ОстаткиРаспределитьОстатки = ОстаткиРаспределитьОстатки + 1;
		
	ИначеЕсли ТекущиеДанные.Недостача Тогда
		
		ТекущиеДанные.Недостача = Ложь;
		ОстаткиПодтвержденоНедостача = ОстаткиПодтвержденоНедостача - 1;
		ОстаткиРаспределитьОстатки = ОстаткиРаспределитьОстатки + 1;
		Если НЕ (ТекущиеДанные.Сопоставлено) Тогда
			ОстаткиСопоставитьНоменклатуру = ОстаткиСопоставитьНоменклатуру + 1;
		КонецЕсли;
		
	ИначеЕсли ТекущиеДанные.Передача Тогда
		
		ТекущиеДанные.Передача = Ложь;
		Поиск = Новый Структура("АлкогольнаяПродукция, ЕГАИС, Передача", ТекущиеДанные.АлкогольнаяПродукция, -ТекущиеДанные.ЕГАИС, Истина);
		СтрокаКорреспондент = Объект.Остатки.НайтиСтроки(Поиск)[0];
		СтрокаКорреспондент.Передача = Ложь;
		ОстаткиРаспределитьОстатки = ОстаткиРаспределитьОстатки + 2;
		
	КонецЕсли;
	
	ОстаткиПроверитьТекущийФильтр(ЭтотОбъект, ОстаткиТекущийФильтр);
	ОстаткиОбновитьФильтр(ЭтотОбъект);
	
	ОстаткиУстановитьОписаниеСтроки();
	
КонецПроцедуры

&НаСервере
Функция УточнитьНаличиеОстатковСервер(ИдентификаторСтроки)
	
	ТекущиеДанные = Объект.Остатки.НайтиПоИдентификатору(ИдентификаторСтроки);

	Если ТекущиеДанные.Остаток Тогда
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", ТекущиеДанные.Характеристика);
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекущиеДанные);
		Если ЗначениеЗаполнено(ТекущиеДанные.Серия) Тогда
			СтруктураПоиска.Вставить("Серия", ТекущиеДанные.Серия);
		КонецЕсли;
	Иначе
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("АлкогольнаяПродукция",ТекущиеДанные.АлкогольнаяПродукция);
		Если ЗначениеЗаполнено(ТекущиеДанные.Справка2) Тогда
			СтруктураПоиска.Вставить("Справка2", ТекущиеДанные.Справка2);
		КонецЕсли;
	КонецЕсли;
	
	ДоступныеСопоставления = ПолучитьДоступныеСоответствия(СтруктураПоиска);
	
	СтруктураПоиска = Новый Структура;
	Если ТекущиеДанные.Остаток Тогда
		СтруктураПоиска.Вставить("Остаток", 0);
	Иначе
		СтруктураПоиска.Вставить("ЕГАИС", 0);
	КонецЕсли;
	СтруктураПоиска.Вставить("Расхождения", 1);
	
	НеобходимоПроверитьОстатки = Ложь;
	
	Для Каждого СтруктураСопоставления Из ДоступныеСопоставления Цикл
		
		Если ТекущиеДанные.Остаток Тогда
			СтруктураПоиска.Вставить("АлкогольнаяПродукция",СтруктураСопоставления.АлкогольнаяПродукция);
		Иначе
			СтруктураПоиска.Вставить("Номенклатура",СтруктураСопоставления.Номенклатура);
			СтруктураПоиска.Вставить("Характеристика",СтруктураСопоставления.Характеристика);
			Если ЗначениеЗаполнено(СтруктураСопоставления.Серия) Тогда
				СтруктураПоиска.Вставить("Серия",СтруктураСопоставления.Серия);
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.Остатки.НайтиСтроки(СтруктураПоиска).Количество() Тогда
			НеобходимоПроверитьОстатки = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НеобходимоПроверитьОстатки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДоступныеСоответствия(СтруктураПоиска)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Т.Номенклатура         КАК Номенклатура,
	|	Т.Характеристика       КАК Характеристика,
	|	Т.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	Т.Серия                КАК Серия
	|ИЗ
	|	РегистрСведений.СоответствиеНоменклатурыЕГАИС КАК Т
	|ГДЕ
	|	ИСТИНА");
	Для Каждого КлючИЗначение Из СтруктураПоиска Цикл
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИСТИНА", СтрШаблон("Т.%1=&%1 И ИСТИНА",КлючИЗначение.Ключ));
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Если СтруктураПоиска.Свойство("Справка2") Тогда
			СтруктураПоиска.Удалить("Справка2");
			Возврат ПолучитьДоступныеСоответствия(СтруктураПоиска);
		КонецЕсли;
		Если СтруктураПоиска.Свойство("Серия") Тогда
			СтруктураПоиска.Удалить("Серия");
			Возврат ПолучитьДоступныеСоответствия(СтруктураПоиска);
		КонецЕсли;
	КонецЕсли;
	
	Результат = Новый Массив;
	Пока Выборка.Следующий() Цикл
		СтрокаРезультата = Новый Структура("Номенклатура, Характеристика, АлкогольнаяПродукция, Серия");
		ЗаполнитьЗначенияСвойств(СтрокаРезультата, Выборка);
		Результат.Добавить(СтрокаРезультата);
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПараметрыОткрытияФормыСопоставления(ТекущаяСтрока)
	
	Результат = Новый Структура;
	Результат.Вставить("Номенклатура",           ТекущаяСтрока.Номенклатура);
	Результат.Вставить("Характеристика",         ТекущаяСтрока.Характеристика);
	Результат.Вставить("Серия",                  ТекущаяСтрока.Серия);
	Результат.Вставить("АлкогольнаяПродукция",   ТекущаяСтрока.АлкогольнаяПродукция);
	Результат.Вставить("Справка2",               ТекущаяСтрока.Справка2);
	Результат.Вставить("ЕдиницаИзмерения", 
		?(ТекущаяСтрока.ПродаетсяВРозлив, "ДАЛ", ТекущаяСтрока.ЕдиницаИзмерения));
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Сопоставить()
	
	ТекущиеДанные = Элементы.Остатки.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли ТекущиеДанные.Расхождения <> 1 Тогда
		Возврат;
	ИначеЕсли ТекущиеДанные.Поштучная Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоСтрокаУчетныхДанных = Ложь;
	ЭтоСтрокаДанныхЕГАИС = Ложь;
	Количество = 0;
	
	Если ТекущиеДанные.ЕГАИС <> 0 Тогда
		ЭтоСтрокаДанныхЕГАИС = Истина;
		Количество = ТекущиеДанные.ЕГАИС;
	КонецЕсли;
	
	Если ТекущиеДанные.Остаток <> 0 Тогда
		ЭтоСтрокаУчетныхДанных = Истина;
		Количество = ТекущиеДанные.Остаток;
	КонецЕсли;
	
	Если (ЭтоСтрокаДанныхЕГАИС = ЭтоСтрокаУчетныхДанных) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытияФормыСопоставления = ПараметрыОткрытияФормыСопоставления(ТекущиеДанные);
	ПараметрыОткрытияФормыСопоставления.Вставить("ЭтоСтрокаУчетныхДанных", ЭтоСтрокаУчетныхДанных);
	ПараметрыОткрытияФормыСопоставления.Вставить("Количество",             Количество);
	
	Если ЭтоСтрокаУчетныхДанных Тогда
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", ТекущиеДанные.Номенклатура);
		СтруктураПоиска.Вставить("Характеристика", ТекущиеДанные.Характеристика);
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекущиеДанные);
		Если ЗначениеЗаполнено(ТекущиеДанные.Серия) Тогда
			СтруктураПоиска.Вставить("Серия", ТекущиеДанные.Серия);
		КонецЕсли;
	Иначе
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("АлкогольнаяПродукция",ТекущиеДанные.АлкогольнаяПродукция);
		Если ЗначениеЗаполнено(ТекущиеДанные.Справка2) Тогда
			СтруктураПоиска.Вставить("Справка2", ТекущиеДанные.Справка2);
		КонецЕсли;
	КонецЕсли;
	ДоступныеСопоставления = ПолучитьДоступныеСоответствия(СтруктураПоиска);
	
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, АлкогольнаяПродукция, Проверена, Поштучная");
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекущиеДанные);
	Если ЭтоСтрокаУчетныхДанных Тогда
		СтруктураПоиска.Вставить("Остаток", 0);
		СтруктураПоиска.Вставить("Серия", ТекущиеДанные.Серия);
	Иначе
		СтруктураПоиска.Вставить("ЕГАИС", 0);
		СтруктураПоиска.Вставить("Справка2", ТекущиеДанные.Справка2);
	КонецЕсли;
	
	МассивСоответствий = Новый Массив;
	КешированныеДанныеДляСопоставления = Новый Соответствие;
	//1. Прямое сопоставление уже имеющееся в таблице.
	Для Каждого СтрокаТаблицыОстатков Из Объект.Остатки.НайтиСтроки(СтруктураПоиска) Цикл
		Если СтрокаТаблицыОстатков = Объект.Остатки.НайтиПоИдентификатору(ТекущиеДанные.ПолучитьИдентификатор()) Тогда
			Продолжить;
		КонецЕсли;
		ДопустимоеСоответствие = Новый Структура("Номенклатура, Характеристика, Серия, АлкогольнаяПродукция, Справка2");
		ЗаполнитьЗначенияСвойств(ДопустимоеСоответствие, СтрокаТаблицыОстатков);
		ДопустимоеСоответствие.Вставить("ИдентификаторСтроки",Объект.Остатки.Индекс(СтрокаТаблицыОстатков));
		ДопустимоеСоответствие.Вставить("ДопустимоеКоличество",
			?(ЭтоСтрокаУчетныхДанных,СтрокаТаблицыОстатков.ЕГАИС, СтрокаТаблицыОстатков.Остаток));
		МассивСоответствий.Добавить(ДопустимоеСоответствие);
		Сопоставление = Новый Структура("Номенклатура, Характеристика, Серия, АлкогольнаяПродукция, Справка2");
		ЗаполнитьЗначенияСвойств(Сопоставление, СтрокаТаблицыОстатков);
		КешированныеДанныеДляСопоставления.Вставить(ДопустимоеСоответствие.ИдентификаторСтроки, Сопоставление);
	КонецЦикла;
	
	//2. Доступное сопоставление в режиме N:M
	Для Каждого Сопоставление Из ДоступныеСопоставления Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Сопоставление);
		СтрокиТЧ = Объект.Остатки.НайтиСтроки(СтруктураПоиска);
		Если СтрокиТЧ.Количество()=0 Тогда
			Если ЭтоСтрокаУчетныхДанных Тогда
				ДопустимоеСоответствие = Новый Структура("Номенклатура, Характеристика, Серия, АлкогольнаяПродукция, Справка2");
				ЗаполнитьЗначенияСвойств(ДопустимоеСоответствие, Сопоставление);
				ДопустимоеСоответствие.Вставить("ИдентификаторСтроки", Новый УникальныйИдентификатор);
				МассивСоответствий.Добавить(ДопустимоеСоответствие);
				КешированныеДанныеДляСопоставления.Вставить(ДопустимоеСоответствие.ИдентификаторСтроки, Сопоставление);
			КонецЕсли;
		Иначе
			Для Каждого СтрокаТаблицыОстатков Из СтрокиТЧ Цикл
				Если (КешированныеДанныеДляСопоставления.Получить(Объект.Остатки.Индекс(СтрокаТаблицыОстатков))<>Неопределено) Тогда
					Продолжить;
				КонецЕсли;
				ДопустимоеСоответствие = Новый Структура("Номенклатура, Характеристика, Серия, АлкогольнаяПродукция, Справка2");
				ЗаполнитьЗначенияСвойств(ДопустимоеСоответствие, СтрокаТаблицыОстатков);
				ДопустимоеСоответствие.Вставить("ИдентификаторСтроки",Объект.Остатки.Индекс(СтрокаТаблицыОстатков));
				ДопустимоеСоответствие.Вставить("ДопустимоеКоличество",
					?(ЭтоСтрокаУчетныхДанных,СтрокаТаблицыОстатков.ЕГАИС, СтрокаТаблицыОстатков.Остаток));
				МассивСоответствий.Вставить(0, ДопустимоеСоответствие);
				КешированныеДанныеДляСопоставления.Вставить(ДопустимоеСоответствие.ИдентификаторСтроки, ДопустимоеСоответствие);
			КонецЦикла;
		КонецЕсли;
		
		Если ЭтоСтрокаУчетныхДанных Тогда
			СтруктураПоискаБезСвязанныхДанных = Новый Структура("АлкогольнаяПродукция, Остаток, Проверена, Поштучная");
		Иначе
			СтруктураПоискаБезСвязанныхДанных = Новый Структура("Номенклатура, Характеристика, ЕГАИС, Проверена, Поштучная");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтруктураПоискаБезСвязанныхДанных, СтруктураПоиска);
		СтрокиТЧ = Объект.Остатки.НайтиСтроки(СтруктураПоискаБезСвязанныхДанных);
		Для Каждого СтрокаТаблицыОстатков Из СтрокиТЧ Цикл
			Если (КешированныеДанныеДляСопоставления.Получить(Объект.Остатки.Индекс(СтрокаТаблицыОстатков))<>Неопределено) Тогда
				Продолжить;
			КонецЕсли;
			ДопустимоеСоответствие = Новый Структура("Номенклатура, Характеристика, Серия, АлкогольнаяПродукция, Справка2");
			ЗаполнитьЗначенияСвойств(ДопустимоеСоответствие, СтрокаТаблицыОстатков);
			ДопустимоеСоответствие.Вставить("ИдентификаторСтроки",Объект.Остатки.Индекс(СтрокаТаблицыОстатков));
			ДопустимоеСоответствие.Вставить("ДопустимоеКоличество",
				?(ЭтоСтрокаУчетныхДанных,СтрокаТаблицыОстатков.ЕГАИС, СтрокаТаблицыОстатков.Остаток));
			МассивСоответствий.Вставить(0, ДопустимоеСоответствие);
			КешированныеДанныеДляСопоставления.Вставить(ДопустимоеСоответствие.ИдентификаторСтроки, Сопоставление);
		КонецЦикла;
		
	КонецЦикла;
	
	КешСопоставления = Новый ФиксированноеСоответствие(КешированныеДанныеДляСопоставления);
	ПараметрыОткрытияФормыСопоставления.Вставить("ДопустимыеСтрокиСопоставления", МассивСоответствий);
	Если МассивСоответствий.Количество() Тогда
		ОткрытьФорму(
			"Обработка.ПомощникКорректировкиОстатковЕГАИС.Форма.СопоставлениеСтроки",
			ПараметрыОткрытияФормыСопоставления,
			ЭтотОбъект);
	Иначе
		ОчиститьСообщения();
		Если ТекущиеДанные.Сопоставлено Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Отсутствуют учетные остатки для сопоставления. Выполните дополнительное сопоставление номенклатуры с алкогольной продукцией или отметьте излишки/недостачу.'"),,
				СтрШаблон("Объект.Остатки[%1].Номенклатура", Объект.Остатки.Индекс(ТекущиеДанные)));
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Для сопоставления остатков сначала требуется выполнить сопоставление номенклатуры с алкогольной продукцией'"),,
				СтрШаблон("Объект.Остатки[%1].Номенклатура", Объект.Остатки.Индекс(ТекущиеДанные)));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередатьВРегистр2()
	
	ТекущиеДанные = Элементы.Остатки.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли ТекущиеДанные.ЕГАИС >= 0 Тогда
		Возврат;
	ИначеЕсли ТекущиеДанные.Расхождения <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытияФормыСопоставления = ПараметрыОткрытияФормыСопоставления(ТекущиеДанные);
	
	ПараметрыОткрытияФормыСопоставления.Вставить("Количество", -ТекущиеДанные.ЕГАИС);
	
	СтруктураПоиска = Новый Структура("Номенклатура, Характеристика, Серия, АлкогольнаяПродукция");
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекущиеДанные);
	СтруктураПоиска.Вставить("Остаток",     0);
	СтруктураПоиска.Вставить("Расхождения", 1);
	СтруктураПоиска.Вставить("Поштучная", Ложь);
	
	МассивСоответствий = Новый Массив;
	КешированныеДанныеДляСопоставления = Новый Соответствие;
	КешированныеДанныеДляСопоставления.Вставить("ПередачаВРегистр2", Истина);
	//Только сопоставление уже имеющееся в таблице.
	Для Каждого СтрокаТаблицыОстатков Из Объект.Остатки.НайтиСтроки(СтруктураПоиска) Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицыОстатков.Справка2) Тогда
			ДопустимоеСоответствие = Новый Структура;
			ДопустимоеСоответствие.Вставить("Справка2", СтрокаТаблицыОстатков.Справка2);
			ДопустимоеСоответствие.Вставить("ИдентификаторСтроки",Объект.Остатки.Индекс(СтрокаТаблицыОстатков));
			ДопустимоеСоответствие.Вставить("ДопустимоеКоличество",СтрокаТаблицыОстатков.ЕГАИС);
			МассивСоответствий.Добавить(ДопустимоеСоответствие);
			КешированныеДанныеДляСопоставления.Вставить(ДопустимоеСоответствие.ИдентификаторСтроки, СтрокаТаблицыОстатков.Справка2);
		КонецЕсли;
	КонецЦикла;
	
	КешСопоставления = Новый ФиксированноеСоответствие(КешированныеДанныеДляСопоставления);
	ПараметрыОткрытияФормыСопоставления.Вставить("ДопустимыеСтрокиСопоставления", МассивСоответствий);
		ОткрытьФорму(
			"Обработка.ПомощникКорректировкиОстатковЕГАИС.Форма.СопоставлениеСтроки",
			ПараметрыОткрытияФормыСопоставления,
			ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатСопоставления(ВыбранноеЗначение)
	
	Если КешСопоставления.Получить("ПередачаВРегистр2") = Истина Тогда
		ОбработатьПередачуВРегистр2(ВыбранноеЗначение);
	Иначе
		ОбработатьСопоставлениеСОстатками(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСопоставлениеСОстатками(ВыбранноеЗначение)
	
	ТекущиеДанные = Элементы.Остатки.ТекущиеДанные;
	
	ЭтоСтрокаУчетныхДанных = ТекущиеДанные.Остаток <> 0;
	Если ЭтоСтрокаУчетныхДанных Тогда
		ТекущиеДанные.Остаток = ВыбранноеЗначение.Остаток;
		ЗаполнитьКолонкиПриРаспределении = "ОбъемДАЛ, ЕдиницаИзмерения, ТипНоменклатуры, ХарактеристикиИспользуются, Сопоставлено";
	Иначе
		ТекущиеДанные.ЕГАИС = ВыбранноеЗначение.Остаток;
		ЗаполнитьКолонкиПриРаспределении = "Сопоставлено, Маркируемый, СопоставлениеНоменклатура";
	КонецЕсли;
	
	Для Каждого ЭлементРаспределения Из ВыбранноеЗначение.РезультатСопоставления Цикл
		
		ИдентификаторСтроки = ЭлементРаспределения.ИдентификаторСтроки;
		Количество = ЭлементРаспределения.Количество;
		
		Если ЭлементРаспределения.ДобавитьСтроку Тогда
			Распределили = Объект.Остатки.Добавить();
			ЗаполнитьЗначенияСвойств(Распределили, ТекущиеДанные,,"Остаток, ЕГАИС");
		Иначе
			Распределили = Объект.Остатки[ИдентификаторСтроки];
			ЗаполнитьЗначенияСвойств(Распределили, ТекущиеДанные, ЗаполнитьКолонкиПриРаспределении);
			ОстаткиРаспределитьОстатки = ОстаткиРаспределитьОстатки - 1;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Распределили, КешСопоставления.Получить(ИдентификаторСтроки));
		Распределили.Расхождения = 0;
		Распределили.Проверена = Истина;
		
		Если ЭтоСтрокаУчетныхДанных Тогда
			Распределили.Остаток = Количество;
		Иначе
			Распределили.ЕГАИС = Количество;
		КонецЕсли;
		
		Если ЭлементРаспределения.ДобавитьСтроку И ТипЗнч(ИдентификаторСтроки)=Тип("Число") Тогда
			Редактировали = Объект.Остатки[ИдентификаторСтроки];
			Если Редактировали.Остаток <> 0 Тогда
				Редактировали.Остаток = Редактировали.Остаток - Количество;
				Распределили.Остаток = Распределили.Остаток + Количество;
			ИначеЕсли Редактировали.ЕГАИС <> 0 Тогда
				Редактировали.ЕГАИС = Редактировали.ЕГАИС - Количество;
				Распределили.ЕГАИС  = Распределили.ЕГАИС + Количество;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Серия) Тогда
			Распределили.Серия = ТекущиеДанные.Серия;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущиеДанные.Справка2) Тогда
			Распределили.Справка2 = ТекущиеДанные.Справка2;
		КонецЕсли;

	КонецЦикла;
	
	Если ВыбранноеЗначение.Остаток = 0 Тогда
		Объект.Остатки.Удалить(ТекущиеДанные);
		ОстаткиРаспределитьОстатки = ОстаткиРаспределитьОстатки - 1;
	Иначе
		ОстаткиУстановитьОписаниеСтроки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПередачуВРегистр2(ВыбранноеЗначение)
	
	ТекущиеДанные = Элементы.Остатки.ТекущиеДанные;
	
	Проверили = Объект.Остатки.Добавить();
	ЗаполнитьЗначенияСвойств(Проверили, ТекущиеДанные);
	Проверили.ЕГАИС = Проверили.ЕГАИС + ВыбранноеЗначение.Остаток;
	Проверили.Расхождения = 0;
	Проверили.Проверена   = Истина;
	Проверили.Передача    = Истина;
	
	ТекущиеДанные.ЕГАИС = - ВыбранноеЗначение.Остаток;
	
	Для Каждого ЭлементРаспределения Из ВыбранноеЗначение.РезультатСопоставления Цикл
		
		ИдентификаторСтроки = ЭлементРаспределения.ИдентификаторСтроки;
		Количество = ЭлементРаспределения.Количество;
		Редактировали = Объект.Остатки[ИдентификаторСтроки];
		
		Если ЭлементРаспределения.ДобавитьСтроку Тогда
			Распределили = Объект.Остатки.Добавить();
			ЗаполнитьЗначенияСвойств(Распределили, Редактировали);
			Редактировали.ЕГАИС = Редактировали.ЕГАИС - Количество;
		Иначе
			Распределили = Объект.Остатки[ИдентификаторСтроки];
			ОстаткиРаспределитьОстатки = ОстаткиРаспределитьОстатки - 1;
		КонецЕсли;
		
		Распределили.ЕГАИС       = Количество;
		Распределили.Расхождения = 0;
		Распределили.Проверена   = Истина;
		Распределили.Передача    = Истина;
		
	КонецЦикла;
	
	Если ВыбранноеЗначение.Остаток = 0 Тогда
		Объект.Остатки.Удалить(ТекущиеДанные);
		ОстаткиРаспределитьОстатки = ОстаткиРаспределитьОстатки - 1;
	Иначе
		ОстаткиУстановитьОписаниеСтроки();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Шаг4_Интерфейс

&НаСервере
Процедура ОстаткиЗаполнитьОписаниеИФильтры(ТекущийФильтр = Неопределено)
	
	ОстаткиЗапроситьМарки          = Объект.Остатки.НайтиСтроки(Новый Структура("Проверена, Поштучная", Ложь, Истина)).Количество();
	ОстаткиСопоставитьНоменклатуру = Объект.Остатки.НайтиСтроки(Новый Структура("Проверена, Сопоставлено", Ложь, Ложь)).Количество();
	ОстаткиРаспределитьОстатки     = Объект.Остатки.НайтиСтроки(Новый Структура("Проверена, Расхождения", Ложь, 1)).Количество();
	ОстаткиПодтвержденоИзлишки     = Объект.Остатки.НайтиСтроки(Новый Структура("Проверена, Излишки", Истина, Истина)).Количество();
	ОстаткиПодтвержденоНедостача   = Объект.Остатки.НайтиСтроки(Новый Структура("Проверена, Недостача", Истина, Истина)).Количество();
	
	ОстаткиПроверитьТекущийФильтр(ЭтотОбъект, ТекущийФильтр);
	
	ОстаткиОбновитьФильтр(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОстаткиПроверитьТекущийФильтр(Форма, ТекущийФильтр)
	
	Если ТекущийФильтр = Неопределено И Форма.ОстаткиЗапроситьМарки Тогда
		ТекущийФильтр = 1;
	ИначеЕсли ТекущийФильтр = 1 И НЕ Форма.ОстаткиЗапроситьМарки Тогда
		ТекущийФильтр = Неопределено;
	КонецЕсли;
	
	Если ТекущийФильтр = Неопределено И Форма.ОстаткиСопоставитьНоменклатуру Тогда
		ТекущийФильтр = 2;
	ИначеЕсли ТекущийФильтр = 2 И НЕ Форма.ОстаткиСопоставитьНоменклатуру Тогда
		ТекущийФильтр = Неопределено;
	КонецЕсли;
	
	Если ТекущийФильтр = Неопределено И Форма.ОстаткиРаспределитьОстатки Тогда
		ТекущийФильтр = 3;
	ИначеЕсли ТекущийФильтр = 3 И НЕ Форма.ОстаткиРаспределитьОстатки Тогда
		ТекущийФильтр = Неопределено;
	КонецЕсли;
	
	Если ТекущийФильтр = 4 И НЕ Форма.ОстаткиПодтвержденоИзлишки Тогда
		ТекущийФильтр = Неопределено;
	КонецЕсли;
	
	Если ТекущийФильтр = 5 И НЕ Форма.ОстаткиПодтвержденоНедостача Тогда
		ТекущийФильтр = Неопределено;
	КонецЕсли;
	
	Если ТекущийФильтр = Неопределено Тогда
		ТекущийФильтр = 0;
	КонецЕсли;
	
	Форма.ОстаткиТекущийФильтр = ТекущийФильтр;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОстаткиОбновитьФильтр(Форма)
	
	ОписаниеФильтра = Новый Массив;
	
	Если Форма.ОстаткиЗапроситьМарки Тогда
		СтрокаОписание = СтрШаблон(НСтр("ru = 'Запросить марки (%1)'"), Форма.ОстаткиЗапроситьМарки);
		Если Форма.ОстаткиТекущийФильтр = 1 Тогда
			ОписаниеФильтра.Добавить(СтрокаОписание);
		Иначе
			ОписаниеФильтра.Добавить(Новый ФорматированнаяСтрока(СтрокаОписание,,Форма.ЦветГиперссылкиГосИС,,"ОстаткиФильтр1"));
		КонецЕсли;
		ОписаниеФильтра.Добавить("  ");
	КонецЕсли;
	
	Если Форма.ОстаткиСопоставитьНоменклатуру Тогда
		СтрокаОписание = СтрШаблон(НСтр("ru = 'Сопоставить (%1)'"), Форма.ОстаткиСопоставитьНоменклатуру);
		Если Форма.ОстаткиТекущийФильтр = 2 Тогда
			ОписаниеФильтра.Добавить(СтрокаОписание);
		Иначе
			ОписаниеФильтра.Добавить(Новый ФорматированнаяСтрока(СтрокаОписание,,Форма.ЦветГиперссылкиГосИС,,"ОстаткиФильтр2"));
		КонецЕсли;
		ОписаниеФильтра.Добавить("  ");
	КонецЕсли;
	
	Если Форма.ОстаткиРаспределитьОстатки Тогда
		СтрокаОписание = СтрШаблон(НСтр("ru = 'Распределить (%1)'"), Форма.ОстаткиРаспределитьОстатки);
		Если Форма.ОстаткиТекущийФильтр = 3 Тогда
			ОписаниеФильтра.Добавить(СтрокаОписание);
		Иначе
			ОписаниеФильтра.Добавить(Новый ФорматированнаяСтрока(СтрокаОписание,,Форма.ЦветГиперссылкиГосИС,,"ОстаткиФильтр3"));
		КонецЕсли;
		ОписаниеФильтра.Добавить("  ");
	КонецЕсли;
	
	Если Форма.ОстаткиПодтвержденоИзлишки Тогда
		СтрокаОписание = СтрШаблон(НСтр("ru = 'Излишки (%1)'"), Форма.ОстаткиПодтвержденоИзлишки);
		Если Форма.ОстаткиТекущийФильтр = 4 Тогда
			ОписаниеФильтра.Добавить(СтрокаОписание);
		Иначе
			ОписаниеФильтра.Добавить(Новый ФорматированнаяСтрока(СтрокаОписание,,Форма.ЦветГиперссылкиГосИС,,"ОстаткиФильтр4"));
		КонецЕсли;
		ОписаниеФильтра.Добавить("  ");
	КонецЕсли;
	
	Если Форма.ОстаткиПодтвержденоНедостача Тогда
		СтрокаОписание = СтрШаблон(НСтр("ru = 'Недостачи (%1)'"), Форма.ОстаткиПодтвержденоНедостача);
		Если Форма.ОстаткиТекущийФильтр = 5 Тогда
			ОписаниеФильтра.Добавить(СтрокаОписание);
		Иначе
			ОписаниеФильтра.Добавить(Новый ФорматированнаяСтрока(СтрокаОписание,,Форма.ЦветГиперссылкиГосИС,,"ОстаткиФильтр5"));
		КонецЕсли;
		ОписаниеФильтра.Добавить("  ");
	КонецЕсли;
	
	СтрокаОписание = СтрШаблон(НСтр("ru = 'Все (%1)'"), Форма.Объект.Остатки.Количество());
	Если Форма.ОстаткиТекущийФильтр = 0 Тогда
		ОписаниеФильтра.Добавить(СтрокаОписание);
	Иначе
		ОписаниеФильтра.Добавить(Новый ФорматированнаяСтрока(СтрокаОписание,,Форма.ЦветГиперссылкиГосИС,,"ОстаткиФильтр0"));
	КонецЕсли;
	
	Форма.ОстаткиОписаниеФильтра = Новый ФорматированнаяСтрока(ОписаниеФильтра);
	УстановитьОтборТаблицыОстатков(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтборТаблицыОстатков(Форма)
	
	Форма.Элементы.ЗапроситьМарки.Видимость = Ложь;
	Форма.Элементы.СопоставитьКлассификаторы.Видимость = Ложь;;
	
	Если (Форма.ОстаткиТекущийФильтр = 0) Тогда
		Форма.Элементы.Остатки.ОтборСтрок = Неопределено;
	ИначеЕсли (Форма.ОстаткиТекущийФильтр = 1) Тогда
		Форма.Элементы.Остатки.ОтборСтрок = Новый ФиксированнаяСтруктура("Проверена, Поштучная", Ложь, Истина);
		Форма.Элементы.ЗапроситьМарки.Видимость = Истина;
	ИначеЕсли (Форма.ОстаткиТекущийФильтр = 2) Тогда
		Форма.Элементы.Остатки.ОтборСтрок = Новый ФиксированнаяСтруктура("Проверена, Сопоставлено", Ложь, Ложь);
		Форма.Элементы.СопоставитьКлассификаторы.Видимость = Истина;
	ИначеЕсли (Форма.ОстаткиТекущийФильтр = 3) Тогда
		Форма.Элементы.Остатки.ОтборСтрок = Новый ФиксированнаяСтруктура("Проверена, Расхождения", Ложь, 1);
	ИначеЕсли (Форма.ОстаткиТекущийФильтр = 4) Тогда
		Форма.Элементы.Остатки.ОтборСтрок = Новый ФиксированнаяСтруктура("Проверена, Излишки", Истина, Истина);
	ИначеЕсли (Форма.ОстаткиТекущийФильтр = 5) Тогда
		Форма.Элементы.Остатки.ОтборСтрок = Новый ФиксированнаяСтруктура("Проверена, Недостача", Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОстаткиУстановитьОписаниеСтроки()
	
	ОписаниеДействий = Новый Массив;
	
	ТекущиеДанные = Элементы.Остатки.ТекущиеДанные;
	Элементы.КартинкаИнформация_ПолучениеОстатков.Видимость = Ложь;
	
	Если ТекущиеДанные = Неопределено Тогда
		
	ИначеЕсли ТекущиеДанные.Проверена Тогда
		
		Если ТекущиеДанные.Излишки Тогда
			ОписаниеДействий.Добавить(НСтр("ru = 'Излишек. Будет создан акт постановки на баланс ЕГАИС.'"));
		ИначеЕсли ТекущиеДанные.Недостача Тогда
			ОписаниеДействий.Добавить(НСтр("ru = 'Недостача. Будет создан акт списания ЕГАИС.'"));
		Иначе
			ОписаниеДействий.Добавить(НСтр("ru = 'Остаток по данным ЕГАИС сопоставлен с остатком учетной системы.'"));
		КонецЕсли;
		
		ОписаниеДействий.Добавить(" ");
		Если НЕ ТекущиеДанные.Поштучная Тогда
			ОписаниеДействий.Добавить(
				Новый ФорматированнаяСтрока(
					НСтр("ru = 'Проверить заново'"),,
					ЦветГиперссылкиГосИС,,
					"ОстаткиПроверитьЗаново"));
			ОписаниеДействий.Добавить(".");
		Иначе
			ОписаниеДействий.Добавить(
				НСтр("ru = 'При необходимости проверить акцизные марки заново вернитесь на шаг 3.'"));
		КонецЕсли;
		
	ИначеЕсли ТекущиеДанные.Расхождения = 3 Тогда
		
		Элементы.КартинкаИнформация_ПолучениеОстатков.Видимость = Истина;
		ОписаниеДействий.Добавить(НСтр("ru = 'Ожидается получение ответа на запрос акцизных марок по справке №2 из ЕГАИС.'"));
		
	ИначеЕсли ТекущиеДанные.Расхождения = 2 Тогда
		
		ОписаниеДействий.Добавить(
			НСтр("ru = 'Остаток в Регистре №1 для поштучной справки №2 отличается от количества акцизных марок в Регистре №3.
				       |Для определения неизвестных акцизных марок и подготовки документа Акт списания ЕГАИС'"));
		ОписаниеДействий.Добавить(" ");
		ОписаниеДействий.Добавить(Новый ФорматированнаяСтрока(
			НСтр("ru = 'Запросите акцизные марки по справке №2'"),,
			ЦветГиперссылкиГосИС,, "ОстаткиЗапроситьМарки"));
		ОписаниеДействий.Добавить(".");
		
		Если ОтчетОстаткиПоСправкам.Количество() > 0 Или ТаймерЗапросов > 0 Тогда
			ОписаниеДействий.Добавить(Символы.ПС);
			ОписаниеДействий.Добавить(НСтр("ru = 'Запрос будет добавлен в очередь (Разрешено отправлять в ЕГАИС не чаще чем 1 раз в 12 минут).'"));
		КонецЕсли;
		
	Иначе
		
		НесколькоДействий = Истина;
		
		Если НЕ ТекущиеДанные.Сопоставлено Тогда
		
			ОписаниеДействий.Добавить(НСтр("ru = 'Алкогольная продукция не сопоставлена с номенклатурой предприятия.'"));
			ОписаниеДействий.Добавить(" ");
			ОписаниеДействий.Добавить(Новый ФорматированнаяСтрока(
				НСтр("ru = 'Сопоставьте алкогольную продукцию'"),,
				ЦветГиперссылкиГосИС,, "ОткрытьФормуСопоставленияНоменклатуры"));
			
		ИначеЕсли ТекущиеДанные.ЕГАИС < 0 Тогда
			
			ОписаниеДействий.Добавить(НСтр("ru = 'Обнаружен отрицательный остаток по Регистру №2 ЕГАИС.'"));
			ОписаниеДействий.Добавить(" ");
			ОписаниеДействий.Добавить(Новый ФорматированнаяСтрока(
				НСтр("ru = 'Распределите'"),,
				ЦветГиперссылкиГосИС,, "ОстаткиПередатьВРегистр2"));
			ОписаниеДействий.Добавить(" ");
			ОписаниеДействий.Добавить(
				НСтр("ru = 'на него остатки партий по справкам №2 из Регистра №1
					       |для подготовки документа Передача в регистр №2 ЕГАИС'"));
			
		ИначеЕсли УточнитьНаличиеОстатковСервер(ТекущиеДанные.ПолучитьИдентификатор()) Тогда
			
			ОписаниеДействий.Добавить(НСтр("ru = 'Остаток на складе не совпадает с остатком по данным ЕГАИС.'"));
			ОписаниеДействий.Добавить(Символы.ПС);
			ОписаниеДействий.Добавить(
				Новый ФорматированнаяСтрока(
					НСтр("ru = 'Распределите остатки'"),,
					ЦветГиперссылкиГосИС,, "ОстаткиСопоставить"));
			ОписаниеДействий.Добавить(" ");
			Если ЗначениеЗаполнено(ТекущиеДанные.Остаток) Тогда
				ОписаниеДействий.Добавить(НСтр("ru = 'склада по справкам №2 из Регистра №1 и остаткам Регистра №2'"));
			Иначе
				ОписаниеДействий.Добавить(НСтр("ru = 'ЕГАИС по учетным остаткам'"));
			КонецЕсли;
			
		Иначе
			
			ОписаниеДействий.Добавить(НСтр("ru = 'Доступные для распределения сопоставленные остатки по строке не обнаружены.'"));
			НесколькоДействий = Ложь;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.АлкогольнаяПродукция) И ТекущиеДанные.ЕГАИС >= 0 Тогда
			
			Если НесколькоДействий Тогда
				ОписаниеДействий.Добавить(" ");
				ОписаниеДействий.Добавить(НСтр("ru = 'или'"));
			КонецЕсли;
			ОписаниеДействий.Добавить(" ");
			
			ЗаголовокРасхождений = ?(ТекущиеДанные.Остаток = 0, НСтр("ru = 'Подтвердите недостачу'"), НСтр("ru = 'Подтвердите излишек'"));
			ОписаниеДействий.Добавить(
				Новый ФорматированнаяСтрока(
					ЗаголовокРасхождений,,
					ЦветГиперссылкиГосИС,,
					"ОстаткиПодтвердитьРасхождения"));
			
			ОписаниеДействий.Добавить(".");
		
		ИначеЕсли НесколькоДействий Тогда
			
			ОписаниеДействий.Добавить(".");
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОстаткиОписаниеСтроки = Новый ФорматированнаяСтрока(ОписаниеДействий);
	
КонецПроцедуры

#КонецОбласти

#Область Шаг4_Прочее

&НаКлиенте
Процедура ЗаполнитьТаблицуОстатков()
	
	Если ЗаполнитьТаблицуОстатковНаСервере() Тогда
		ТаймерЗапросов = Объект.ИнтервалОжиданияМарокПоСправке2 + 1;
		ИнтервальныйЗапросМарокПоСправке2();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьТаблицуОстатковНаСервере()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗаполнитьТаблицуОстатков();
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	НуженОбработчикОбмена = ЗагрузитьПолученныеРанееОтчетыОстаткиМарок();
	
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей();
	
	ОстаткиЗаполнитьОписаниеИФильтры();
	
	Возврат НуженОбработчикОбмена;
	
КонецФункции

&НаСервере
Функция ЗагрузитьПолученныеРанееОтчетыОстаткиМарок()
	
	ЕстьТекущийЗапрос = Ложь;
	СправкиПроверить = Объект.Остатки.Выгрузить().Скопировать(Новый Структура("Проверена, Расхождения", Ложь, 2),"Справка2").ВыгрузитьКолонку("Справка2");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДокументОснование"   , Объект.ОстаткиВРегистре1);
	Запрос.УстановитьПараметр("Справка2"            , СправкиПроверить);
	Запрос.УстановитьПараметр("ВсеТребующиеОжидания", Документы.ОтчетЕГАИС.ВсеТребующиеОжидания(Истина));
	Запрос.УстановитьПараметр("ТребуетОтработки"    , Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтработайтеРасхождения);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтчетЕГАИС.Ссылка                                                    КАК Ссылка,
	|	ОтчетЕГАИС.Справка2                                                  КАК Справка2,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие1 В (&ВсеТребующиеОжидания) КАК ТекущийЗапрос,
	|	СтатусыДокументовЕГАИС.ДальнейшееДействие1 = &ТребуетОтработки       КАК ТребуетОтработки
	|
	|ИЗ
	|	Документ.ОтчетЕГАИС КАК ОтчетЕГАИС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|		ПО (СтатусыДокументовЕГАИС.Документ = ОтчетЕГАИС.Ссылка)
	|ГДЕ
	|	ОтчетЕГАИС.Проведен
	|	И ОтчетЕГАИС.ДокументОснование = &ДокументОснование
	|	И ОтчетЕГАИС.Справка2 В (&Справка2)
	|	И СтатусыДокументовЕГАИС.Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыОбработкиОтчетаЕГАИС.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаОстатки = Объект.Остатки.НайтиСтроки(Новый Структура("Справка2, Расхождения", Выборка.Справка2, 2))[0];
		Если (Выборка.ТекущийЗапрос) Тогда
			
			ЕстьТекущийЗапрос = Истина;
			СтрокаОстатки.Расхождения = 3;
			НоваяСтрокаТаблицы = ОтчетОстаткиПоСправкам.Добавить();
			НоваяСтрокаТаблицы.Справка2 = СтрокаОстатки.Справка2;
			НоваяСтрокаТаблицы.АлкогольнаяПродукция = СтрокаОстатки.АлкогольнаяПродукция;
			НоваяСтрокаТаблицы.ДокументОтчет = Выборка.Ссылка;
			
		Иначе
			
			Если Выборка.ТребуетОтработки Тогда
				
				ПараметрыОбновленияСтатуса = ИнтеграцияЕГАИС.ПараметрыОбновленияСтатуса();
				ПараметрыОбновленияСтатуса.ОбновлятьДвижения = Ложь;
				
				ИзменитьМарки = Документы.ОтчетЕГАИС.ОтработатьРасхожденияЗапросОтчетаОстаткиВРегистре3(Выборка.Ссылка,,Ложь);
			
				Документы.ОтчетЕГАИС.ОбновитьСтатусПослеПолученияДанных(
					Выборка.Ссылка,
					Перечисления.ВидыДокументовЕГАИС.ОтветНаЗапросОтчетаОстаткиВРегистре3,
					ПараметрыОбновленияСтатуса);
				
				Соответствие = Новый Соответствие;
				Соответствие.Вставить(Выборка.Ссылка, Новый Структура("Статус, ИзменитьМарки", Выборка.Статус, ИзменитьМарки));
				ОбновитьМаркиПоСправке(Соответствие);
				
			Иначе
				
				СтрокаОстатки.Расхождения = 1;
				СтрокаОстатки.Проверена   = Истина;
				СтрокаОстатки.Недостача   = Истина;
				
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ЕстьТекущийЗапрос;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область Шаг5_СозданиеДокументов

&НаСервере
Процедура РассчитатьКоличествоКорректировки()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаОстатков.Номенклатура КАК Номенклатура,
	|	ТаблицаОстатков.Характеристика КАК Характеристика,
	|	ТаблицаОстатков.Серия КАК Серия,
	|	ТаблицаОстатков.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТаблицаОстатков.Справка2 КАК Справка2,
	|	ТаблицаОстатков.Остаток КАК Остаток,
	|	ТаблицаОстатков.ЕГАИС КАК ЕГАИС,
	|	ТаблицаОстатков.Поштучная КАК Поштучная,
	|	ТаблицаОстатков.ПродаетсяВРозлив КАК ПродаетсяВРозлив,
	|	ТаблицаОстатков.Маркируемый КАК Маркируемый,
	|	ТаблицаОстатков.ЕГАИС <> 0 И ТаблицаОстатков.Справка2 = ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка) КАК ОперацияСРегистром2,
	|	ТаблицаОстатков.Передача КАК Передача,
	|	ТаблицаОстатков.Остаток = 0 КАК Недостача,
	|	ТаблицаОстатков.ЕГАИС = 0 КАК Излишки
	|ПОМЕСТИТЬ ТаблицаОстатковПредварительная
	|ИЗ
	|	&ТаблицаОстатков КАК ТаблицаОстатков
	|ГДЕ
	|	ТаблицаОстатков.АлкогольнаяПродукция <> ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)
	|	И ТаблицаОстатков.Проверена
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатков.Номенклатура КАК Номенклатура,
	|	ТаблицаОстатков.Характеристика КАК Характеристика,
	|	ТаблицаОстатков.Серия КАК Серия,
	|	ТаблицаОстатков.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТаблицаОстатков.Справка2 КАК Справка2,
	|	МАКСИМУМ(ТаблицаОстатков.Поштучная) КАК Поштучная,
	|	МАКСИМУМ(ТаблицаОстатков.ПродаетсяВРозлив) КАК ПродаетсяВРозлив,
	|	МАКСИМУМ(ТаблицаОстатков.Маркируемый) КАК Маркируемый,
	|	МАКСИМУМ(ТаблицаОстатков.ОперацияСРегистром2) КАК ОперацияСРегистром2,
	|	СУММА(ТаблицаОстатков.Остаток) КАК Остаток,
	|	СУММА(ТаблицаОстатков.ЕГАИС) КАК ЕГАИС,
	|	СУММА(
	|		ВЫБОР
	|			КОГДА ТаблицаОстатков.Передача
	|				ТОГДА 0
	|			КОГДА ТаблицаОстатков.Излишки
	|				ТОГДА ТаблицаОстатков.Остаток
	|			ИНАЧЕ 0 КОНЕЦ) КАК Приходовать,
	|	СУММА(
	|		ВЫБОР
	|			КОГДА ТаблицаОстатков.Передача
	|				ТОГДА 0
	|			КОГДА ТаблицаОстатков.Недостача
	|				ТОГДА ТаблицаОстатков.ЕГАИС
	|			ИНАЧЕ 0 КОНЕЦ) КАК Списать,
	|	СУММА(
	|		ВЫБОР
	|			КОГДА ТаблицаОстатков.Передача
	|				И ТаблицаОстатков.Справка2 <> ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)
	|				ТОГДА ТаблицаОстатков.ЕГАИС
	|			КОГДА ТаблицаОстатков.Излишки
	|				ТОГДА 0
	|			КОГДА ТаблицаОстатков.Недостача
	|				ТОГДА 0
	|			КОГДА НЕ &ЭтоТорговыйЗал
	|				И ТаблицаОстатков.ОперацияСРегистром2
	|				ТОГДА -ТаблицаОстатков.ЕГАИС
	|			КОГДА &ЭтоТорговыйЗал
	|				И НЕ ТаблицаОстатков.Поштучная
	|				И НЕ ТаблицаОстатков.ОперацияСРегистром2
	|				ТОГДА ТаблицаОстатков.ЕГАИС
	|			ИНАЧЕ 0 КОНЕЦ) КАК Передать
	|ПОМЕСТИТЬ ТаблицаОстатков
	|ИЗ
	|	ТаблицаОстатковПредварительная КАК ТаблицаОстатков
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОстатков.Номенклатура,
	|	ТаблицаОстатков.Характеристика,
	|	ТаблицаОстатков.Серия,
	|	ТаблицаОстатков.АлкогольнаяПродукция,
	|	ТаблицаОстатков.Справка2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОстатков.Номенклатура,
	|	ТаблицаОстатков.Характеристика,
	|	ТаблицаОстатков.Серия,
	|	ТаблицаОстатков.АлкогольнаяПродукция,
	|	ТаблицаОстатков.Справка2,
	|	ТаблицаОстатков.ПродаетсяВРозлив КАК ПродаетсяВРозлив,
	|	ТаблицаОстатков.Остаток КАК Остаток,
	|	ТаблицаОстатков.ЕГАИС КАК ЕГАИС,
	|	ТаблицаОстатков.Поштучная КАК Поштучная,
	|	ТаблицаОстатков.Приходовать - ТаблицаОстатков.Списать КАК Приходовать,
	|	ТаблицаОстатков.Передать КАК ПередатьВРегистр2,
	|	ВЫБОР
	|		КОГДА НЕ ТаблицаОстатков.Поштучная
	|			ТОГДА 0
	|		КОГДА ТаблицаОстатков.Приходовать < ТаблицаОстатков.Списать
	|			ТОГДА ТаблицаОстатков.Приходовать
	|		ИНАЧЕ ТаблицаОстатков.Списать КОНЕЦ КАК ВнутреннийПересорт,
	|	ВЫБОР
	|		КОГДА ТаблицаОстатков.ПродаетсяВРозлив
	|			ТОГДА &Коэффициент
	|		ИНАЧЕ 1 КОНЕЦ КАК ОбъемДАЛ
	|ИЗ
	|	ТаблицаОстатков КАК ТаблицаОстатков
	|ГДЕ
	|	ТаблицаОстатков.Приходовать > 0
	|	ИЛИ ТаблицаОстатков.Списать > 0
	|	ИЛИ ТаблицаОстатков.Передать <> 0
	|УПОРЯДОЧИТЬ ПО
	|	ПродаетсяВРозлив УБЫВ,
	|	Номенклатура
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	ИнтеграцияЕГАИСПереопределяемый.ОпределитьКоэффициентПересчетаНеупакованнойПродукции(
		ТекстЗапроса,
		"ТаблицаОстатков.Номенклатура",
		"&Коэффициент");
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ТаблицаОстатков", Объект.Остатки.Выгрузить());
	Запрос.УстановитьПараметр("ЭтоТорговыйЗал", Объект.ЭтоТорговыйЗал);
	
	Объект.Корректировки.Очистить();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.Корректировки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
	ТаблицаКорректировки = Запрос.Выполнить().Выгрузить();
	Объект.Корректировки.Загрузить(ТаблицаКорректировки);
	
	ЗаполнитьКоличествоПоОперацииПересорт(ЭтотОбъект);
	ЗаполнитьКоличествоПоОперациямСРегистром3();
	
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКоличествоПоОперациямСРегистром3()
	
	Если Объект.МаксимумМарокКПроверкеВУТМ = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КешСправок = Новый Соответствие;
	КешСправок.Вставить(Справочники.Справки2ЕГАИС.ПустаяСсылка(), Истина);
	
	Для Каждого МаркаДляПостановкиНаБалансРегистр3 Из Объект.АкцизныеМарки.НайтиСтроки(Новый Структура("Факт, УТМ", Истина, Ложь)) Цикл
		
		Справка2 = МаркаДляПостановкиНаБалансРегистр3.Справка2;
		Если КешСправок.Получить(Справка2) = Неопределено Тогда
			КешСправок.Вставить(Справка2, Истина);
		Иначе
			Продолжить;
		КонецЕсли;
		
		МаркиСправки = Объект.АкцизныеМарки.НайтиСтроки(Новый Структура("Факт, УТМ, Справка2", Истина, Ложь, Справка2)).Количество();
		
		СтрокаТаблицыКорректировки = Объект.Корректировки.НайтиСтроки(Новый Структура("Справка2", Справка2));
		Если СтрокаТаблицыКорректировки.Количество() = 0 Тогда
			СтрокаТаблицыКорректировки = Объект.Корректировки.Добавить();
			ЗаполнитьЗначенияСвойств(
				СтрокаТаблицыКорректировки,
				МаркаДляПостановкиНаБалансРегистр3,
				"Номенклатура, Характеристика, Серия, АлкогольнаяПродукция, Справка2");
		Иначе
			СтрокаТаблицыКорректировки = СтрокаТаблицыКорректировки[0];
		КонецЕсли;
		
		МарокЗадействованоРанее = СтрокаТаблицыКорректировки.ВнутреннийПересорт + Макс(СтрокаТаблицыКорректировки.Приходовать, 0);
		Если МарокЗадействованоРанее < МаркиСправки Тогда
			СтрокаТаблицыКорректировки.ПриходоватьРегистр3 = МаркиСправки - МарокЗадействованоРанее;
		КонецЕсли;
		
	КонецЦикла;
	
	КешСправок = Новый Соответствие;
	КешСправок.Вставить(Справочники.Справки2ЕГАИС.ПустаяСсылка(), Истина);
	
	Для Каждого МаркаДляСписанияИзРегистра3 Из Объект.АкцизныеМарки.НайтиСтроки(Новый Структура("Факт, УТМ", Ложь, Истина)) Цикл
		
		Справка2 = МаркаДляСписанияИзРегистра3.Справка2;
		Если КешСправок.Получить(Справка2) = Неопределено Тогда
			КешСправок.Вставить(Справка2, Истина);
		Иначе
			Продолжить;
		КонецЕсли;
		
		МаркиСправки = Объект.АкцизныеМарки.НайтиСтроки(Новый Структура("Факт, УТМ, Справка2", Ложь, Истина, Справка2)).Количество();
		
		СтрокаТаблицыКорректировки = Объект.Корректировки.НайтиСтроки(Новый Структура("Справка2", Справка2));
		Если СтрокаТаблицыКорректировки.Количество() = 0 Тогда
			СтрокаТаблицыКорректировки = Объект.Корректировки.Добавить();
			ЗаполнитьЗначенияСвойств(
				СтрокаТаблицыКорректировки,
				МаркаДляСписанияИзРегистра3,
				"Номенклатура, Характеристика, Серия, АлкогольнаяПродукция, Справка2");
		Иначе
			СтрокаТаблицыКорректировки = СтрокаТаблицыКорректировки[0];
		КонецЕсли;
		
		МарокЗадействованоРанее = СтрокаТаблицыКорректировки.ВнутреннийПересорт + Макс(-СтрокаТаблицыКорректировки.Приходовать, 0);
		Если МарокЗадействованоРанее < МаркиСправки Тогда
			СтрокаТаблицыКорректировки.ПриходоватьРегистр3 = МарокЗадействованоРанее - МаркиСправки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьКоличествоПоОперацииПересорт(Форма)
	
	ПроверенныеСтроки = Новый Соответствие;
	
	СтруктураПоиска = Новый Структура("Номенклатура,Характеристика,Серия");
	Регистр1 = Форма.Объект.ЭтоСклад;
	
	Для Каждого СтрокаВозможенПересорт Из Форма.Объект.Корректировки Цикл
		
		ТребуетсяПроверка = Ложь;
		
		Если ПроверенныеСтроки.Получить(СтрокаВозможенПересорт.Номенклатура) = Неопределено Тогда
			ТребуетсяПроверка = Истина;
			ПроверенныеСтроки.Вставить(СтрокаВозможенПересорт.Номенклатура, Новый Соответствие);
		КонецЕсли;
		ПроверенныеСтрокиНоменклатура = ПроверенныеСтроки.Получить(СтрокаВозможенПересорт.Номенклатура);
		
		Если ПроверенныеСтрокиНоменклатура.Получить(СтрокаВозможенПересорт.Характеристика) = Неопределено Тогда
			ТребуетсяПроверка = Истина;
			ПроверенныеСтрокиНоменклатура.Вставить(СтрокаВозможенПересорт.Характеристика, Новый Соответствие);
		КонецЕсли;
		ПроверенныеСтрокиХарактеристика = ПроверенныеСтрокиНоменклатура.Получить(СтрокаВозможенПересорт.Характеристика);
	
		Если ПроверенныеСтрокиХарактеристика.Получить(СтрокаВозможенПересорт.Серия) = Неопределено Тогда
			ТребуетсяПроверка = Истина;
			ПроверенныеСтрокиХарактеристика.Вставить(СтрокаВозможенПересорт.Серия, Новый Соответствие);
		КонецЕсли;

		Если НЕ ТребуетсяПроверка Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаВозможенПересорт);
		Свертка = Форма.Объект.Корректировки.НайтиСтроки(СтруктураПоиска);
		Если Свертка.Количество() > 1 Тогда
			
			СписатьРегистр1 = 0;
			СписатьРегистр2 = 0;
			ПриходоватьРегистр1 = 0;
			ПриходоватьРегистр2 = 0;
			
			Для Каждого Пересорт Из Свертка Цикл
				
				ЕстьСправка2 = ЗначениеЗаполнено(Пересорт.Справка2);
				
				Если Пересорт.Приходовать > 0 Тогда
					Если Регистр1 ИЛИ ЕстьСправка2 ИЛИ Пересорт.Поштучная Тогда
						ПриходоватьРегистр1 = ПриходоватьРегистр1 + Пересорт.Приходовать;
					Иначе
						ПриходоватьРегистр2 = ПриходоватьРегистр2 + Пересорт.Приходовать;
					КонецЕсли;
				ИначеЕсли Пересорт.Приходовать < 0  Тогда
					Если ЕстьСправка2 Тогда
						СписатьРегистр1 = СписатьРегистр1 - Пересорт.Приходовать;
					Иначе
						СписатьРегистр2 = СписатьРегистр2 - Пересорт.Приходовать;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			ПриходоватьРегистр1 = Мин(ПриходоватьРегистр1, СписатьРегистр1);
			ПриходоватьРегистр2 = Мин(ПриходоватьРегистр2, СписатьРегистр2);
			СписатьРегистр1 = -ПриходоватьРегистр1;
			СписатьРегистр2 = -ПриходоватьРегистр2;
			
			Для Каждого Пересорт Из Свертка Цикл
				
				ЕстьСправка2 = ЗначениеЗаполнено(Пересорт.Справка2);
				
				Если Пересорт.Приходовать > 0 Тогда
					Если Регистр1 ИЛИ ЕстьСправка2 ИЛИ Пересорт.Поштучная Тогда
						Пересорт.ВнешнийПересорт = Мин(Пересорт.Приходовать, ПриходоватьРегистр1);
						ПриходоватьРегистр1 = ПриходоватьРегистр1 - Пересорт.ВнешнийПересорт;
					Иначе
						Пересорт.ВнешнийПересорт = Мин(Пересорт.Приходовать, ПриходоватьРегистр2);
						ПриходоватьРегистр2 = ПриходоватьРегистр2 - Пересорт.ВнешнийПересорт;
					КонецЕсли;
				ИначеЕсли Пересорт.Приходовать < 0  Тогда
					Если ЕстьСправка2 Тогда
						Пересорт.ВнешнийПересорт = Макс(Пересорт.Приходовать, СписатьРегистр1);
						СписатьРегистр1 = СписатьРегистр1 - Пересорт.ВнешнийПересорт;
					Иначе
						Пересорт.ВнешнийПересорт = Макс(Пересорт.Приходовать, СписатьРегистр2);
						СписатьРегистр2 = СписатьРегистр2 - Пересорт.ВнешнийПересорт;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПересорт(Команда)
	ЗаполнитьКоличествоПоОперацииПересорт(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Функция ПроверитьКоличествоПересорт()
	
	Отказ = Ложь;
	
	Итог = 0;
	Для Каждого СтрокаПересорт Из Объект.Корректировки Цикл
		Итог = Итог + СтрокаПересорт.ВнешнийПересорт;
		Если СтрокаПересорт.ВнешнийПересорт * СтрокаПересорт.Приходовать < 
			СтрокаПересорт.ВнешнийПересорт * СтрокаПересорт.ВнешнийПересорт Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Количество для пересорта превышает общее количество по строке'"),,
					СтрШаблон("Объект.Корректировки[%1].ВнешнийПересорт",Объект.Корректировки.Индекс(СтрокаПересорт)),,
					Отказ);
		КонецЕсли;
	КонецЦикла;
	
	Если Итог<>0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Общий пересорт не совпадает по количеству'"),,,,Отказ);
	КонецЕсли;
	
	Возврат НЕ Отказ;
	
КонецФункции

&НаКлиенте
Процедура УдалениеДокументов_Подтверждение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	УдалитьДокументыКорректировкиОстатков();
	
	Если Объект.СозданныеДокументы.Количество() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Не все созданные документы удалось удалить автоматически. В случае необходимости удалите их самостоятельно'"));
		Объект.СозданныеДокументы.Очистить();
	КонецЕсли;
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументыКорректировкиОстатков()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Результат = ОбработкаОбъект.СоздатьДокументыКорректировкиОстатков();
	
	Для Каждого СозданныйДокумент Из Результат Цикл
		Объект.СозданныеДокументы.Добавить().ДокументСсылка = СозданныйДокумент;
	КонецЦикла;
	
	ЗаполнитьСлужебныеРеквизитыТабличныхЧастей();
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		СозданныеДокументы,
		"СписокДокументов",
		Объект.СозданныеДокументы.Выгрузить().ВыгрузитьКолонку("ДокументСсылка"),
		Истина);
		
	СозданиеДокументовЗавершено = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДокументыКорректировкиОстатков()
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтатусыНовыхДокументов = Новый Массив;
	СтатусыНовыхДокументов.Добавить(Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.Черновик);
	СтатусыНовыхДокументов.Добавить(Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.Черновик);
	СтатусыНовыхДокументов.Добавить(Перечисления.СтатусыОбработкиВозвратаИзРегистра2ЕГАИС.Черновик);
	СтатусыНовыхДокументов.Добавить(Перечисления.СтатусыОбработкиПередачиВРегистр2ЕГАИС.Черновик);
	
	НеУдаляемыеДокументы = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из Объект.СозданныеДокументы Цикл
		СтатусОбработки = РегистрыСведений.СтатусыДокументовЕГАИС.ТекущееСостояние(СтрокаТаблицы.ДокументСсылка).Статус;
		Если СтатусыНовыхДокументов.Найти(СтатусОбработки) = Неопределено Тогда
			НеУдаляемыеДокументы.Добавить(СтрокаТаблицы.ДокументСсылка);
			Продолжить;
		КонецЕсли;
		
		Попытка
			Док = СтрокаТаблицы.ДокументСсылка.ПолучитьОбъект();
			Док.Заблокировать();
			Док.Удалить();
		Исключение
			НеУдаляемыеДокументы.Добавить(СтрокаТаблицы.ДокументСсылка);
		КонецПопытки;
		
	КонецЦикла;
	
	Объект.СозданныеДокументы.Очистить();
	Для Каждого ОставшийсяДокумент Из НеУдаляемыеДокументы Цикл
		Объект.СозданныеДокументы.Добавить().ДокументСсылка = ОставшийсяДокумент;
	КонецЦикла;
	
	СозданиеДокументовЗавершено = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПросмотрДокумента_Завершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Элементы.СозданныеДокументы.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузкаВЕГАИС_ЗавершениеОбмена(Результат, ДополнительныеПараметры) Экспорт
	
	ИзменитьПорядковыйНомерПерехода(1);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиПодготовитьПроведенныеДокументыДляВыгрузки(МассивДокументов)
	
	Результат = Ложь;
	
	Для Каждого ДокументСсылка Из МассивДокументов Цикл
		
		Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "Проведен") Тогда
			
			Результат = Истина;
			
			СтатусОбработки = РегистрыСведений.СтатусыДокументовЕГАИС.ТекущееСостояние(ДокументСсылка).Статус;
			Если СтатусОбработки = Перечисления.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС.Черновик
				ИЛИ СтатусОбработки = Перечисления.СтатусыОбработкиАктаСписанияЕГАИС.Черновик
				ИЛИ СтатусОбработки = Перечисления.СтатусыОбработкиВозвратаИзРегистра2ЕГАИС.Черновик
				ИЛИ СтатусОбработки = Перечисления.СтатусыОбработкиПередачиВРегистр2ЕГАИС.Черновик Тогда
				
				ИнтеграцияЕГАИСВызовСервера.ПодготовитьКПередаче(ДокументСсылка, Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область РегистрАкцизныеМарки

&НаСервереБезКонтекста
Функция ЕстьМаркиВПромежуточномСтатусе(ОрганизацияЕГАИС)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	АкцизнаяМарка
	|Из
	|	РегистрСведений.АкцизныеМаркиЕГАИС
	|ГДЕ
	|	ОрганизацияЕГАИС = &ОрганизацияЕГАИС
	|	И (Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.КСписанию)
	|	ИЛИ Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.КОприходованию))";
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗафиксироватьМаркиВПромежуточномСтатусе(ОрганизацияЕГАИС, АкцизнаяМарка = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	Запрос.УстановитьПараметр("АкцизнаяМарка", АкцизнаяМарка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	АкцизнаяМарка,
	|	ОрганизацияЕГАИС,
	|	ВЫБОР
	|		КОГДА Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.КСписанию)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.Отсутствует)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.ВНаличии)
	|	КОНЕЦ КАК Статус,
	|	Справка2,
	|	АлкогольнаяПродукция,
	|	Основание
	|Из
	|	РегистрСведений.АкцизныеМаркиЕГАИС
	|ГДЕ
	|	ОрганизацияЕГАИС = &ОрганизацияЕГАИС
	|	И (&АкцизнаяМарка = Неопределено
	|	ИЛИ АкцизнаяМарка = &АкцизнаяМарка)
	|	И (Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.КСписанию)
	|	ИЛИ Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыАкцизныхМарок.КОприходованию))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.АкцизныеМаркиЕГАИС.ВыполнитьЗаписьВРегистр(Выборка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция АдресИПортУТМ(ОрганизацияЕГАИС)
	
	ВозвращаемоеЗначение = Неопределено;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НастройкиОбменаЕГАИС.АдресУТМ КАК АдресУТМ,
	|	НастройкиОбменаЕГАИС.ПортУТМ КАК ПортУТМ
	|ИЗ
	|	РегистрСведений.НастройкиОбменаЕГАИС КАК НастройкиОбменаЕГАИС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
	|		ПО НастройкиОбменаЕГАИС.ИдентификаторФСРАР = КлассификаторОрганизацийЕГАИС.Код
	|		И КлассификаторОрганизацийЕГАИС.Ссылка = &ОрганизацияЕГАИС
	|ГДЕ
	|	НастройкиОбменаЕГАИС.РабочееМесто = &РабочееМесто
	|	ИЛИ НастройкиОбменаЕГАИС.РабочееМесто = ЗНАЧЕНИЕ(Справочник.РабочиеМеста.ПустаяСсылка)");
	
	Запрос.УстановитьПараметр("РабочееМесто",     МенеджерОборудованияВызовСервера.ПолучитьРабочееМестоКлиента());
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС", ОрганизацияЕГАИС);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ВозвращаемоеЗначение = Новый Структура;
		ВозвращаемоеЗначение.Вставить("АдресУТМ", Выборка.АдресУТМ);
		ВозвращаемоеЗначение.Вставить("ПортУТМ",  Выборка.ПортУТМ);
		
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

#Область МеханизмПомощникаКорректировкиОстатков

&НаСервере
Процедура СценарийКорректировкиОстатковЕГАИС()
	
	ТаблицаПереходов.Очистить();
	
	// 1. Исходные данные.
	ТаблицаПереходовНоваяСтрока(
		1,                                           // Порядковый номер перехода.
		"СтраницаНачальныеДанные",                   // Основная страница.
		"СтраницаНавигацииНачало",                   // Страница панели навигации.
		,                                            // Обработчик, вызываемый при открытии страницы.
		"СтраницаНачальныеДанные_ПриПереходеДалее"); // Обработчик, вызываемый перед переходом на следующую страницу.
		
		
	// 2. Проверка данных.
	ТаблицаПереходовНоваяСтрока(
		2,                                          // Порядковый номер перехода.
		"СтраницаПроверкаДанных",                   // Основная страница.
		"СтраницаНавигацииПроверкаДанных",          // Страница панели навигации.
		"СтраницаПроверкаДанных_ПриОткрытии",       // Обработчик, вызываемый при открытии страницы.
		"СтраницаПроверкаДанных_ПриПереходеДалее"); // Обработчик, вызываемый перед переходом на следующую страницу.
		
	// 3. Проверка марок.
	ТаблицаПереходовНоваяСтрока(
		3,                                          // Порядковый номер перехода.
		"СтраницаПроверкаМарок",                   // Основная страница.
		"СтраницаНавигацииПроверкаМарок",          // Страница панели навигации.
		"СтраницаПроверкаМарок_ПриОткрытии",       // Обработчик, вызываемый при открытии страницы.
		"СтраницаПроверкаМарок_ПриПереходеДалее"); // Обработчик, вызываемый перед переходом на следующую страницу.
		
		
	// 4. Просмотр остатков.
	ТаблицаПереходовНоваяСтрока(
		4,                                            // Порядковый номер перехода.
		"СтраницаПросмотрОстатков",                   // Основная страница.
		"СтраницаНавигацииПросмотрОстатков",          // Страница панели навигации.
		"СтраницаПросмотрОстатков_ПриОткрытии",       // Обработчик, вызываемый при открытии страницы.
		"СтраницаПросмотрОстатков_ПриПереходеДалее"); // Обработчик, вызываемый перед переходом на следующую страницу.
		
		
	// 5. Создание корректировочных документов.
	ТаблицаПереходовНоваяСтрока(
		5,                                              // Порядковый номер перехода.
		"СтраницаСозданиеДокументов",                   // Основная страница.
		"СтраницаНавигацииСозданиеДокументов",          // Страница панели навигации.
		"",                                             // Обработчик, вызываемый при открытии страницы.
		"СтраницаСозданиеДокументов_ПриПереходеДалее"); // Обработчик, вызываемый перед переходом на следующую страницу.
		
	// 6. Выгрузка созданных документов.
	ТаблицаПереходовНоваяСтрока(
		6,                                     // Порядковый номер перехода.
		"СтраницаОкончание",                   // Основная страница.
		"СтраницаНавигацииВыгрузкаДокументов", // Страница панели навигации.
		,                                      // Обработчик, вызываемый при открытии страницы.
		,                                      // Обработчик, вызываемый перед переходом на следующую страницу.
		"СтраницаОкончание_ПриПереходеНазад"); // Обработчик, вызываемый перед переходом на предыдущую страницу.
		
	// 7. Просмотр результатов.
	ТаблицаПереходовНоваяСтрока(
		7,                                     // Порядковый номер перехода.
		"СтраницаОкончание",                   // Основная страница.
		"СтраницаНавигацииОкончание",          // Страница панели навигации.
		"СтраницаОкончание_ПриОткрытии");      // Обработчик, вызываемый при открытии страницы.
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаПереходовНоваяСтрока(ПорядковыйНомерПерехода,
									ИмяОсновнойСтраницы,
									ИмяСтраницыНавигации,
									ИмяОбработчикаПриОткрытии = "",
									ИмяОбработчикаПриПереходеДалее = "",
									ИмяОбработчикаПриПереходеНазад = "")
	НоваяСтрока = ТаблицаПереходов.Добавить();
	
	НоваяСтрока.ПорядковыйНомерПерехода = ПорядковыйНомерПерехода;
	НоваяСтрока.ИмяОсновнойСтраницы     = ИмяОсновнойСтраницы;
	НоваяСтрока.ИмяСтраницыНавигации    = ИмяСтраницыНавигации;
	
	НоваяСтрока.ИмяОбработчикаПриПереходеДалее = ИмяОбработчикаПриПереходеДалее;
	НоваяСтрока.ИмяОбработчикаПриПереходеНазад = ИмяОбработчикаПриПереходеНазад;
	НоваяСтрока.ИмяОбработчикаПриОткрытии      = ИмяОбработчикаПриОткрытии;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	
	ОчиститьСообщения();
	
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение, ОтказПерехода = Ложь)
	
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	
	ПорядковыйНомерПерехода = Значение;
	
	Если ПорядковыйНомерПерехода < 0 Тогда
		
		ПорядковыйНомерПерехода = 0;
		
	КонецЕсли;
	
	Если НЕ ОтказПерехода Тогда
		ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Выполняем обработчики событий перехода
	ВыполнитьОбработчикиСобытийПерехода(ЭтоПереходДалее);
	
	// Устанавливаем отображение страниц
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	Элементы.ПанельНавигации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыНавигации];
	
	// Устанавливаем текущую кнопку по умолчанию
	ИменаКоманд = Новый Массив;
	ИменаКоманд.Добавить("ПерейтиВперед");
	ИменаКоманд.Добавить("ВыгрузитьВЕГАИС");
	ИменаКоманд.Добавить("Готово");
	
	Для Каждого ИмяКоманды Из ИменаКоманд Цикл
		Кнопка = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, ИмяКоманды);
		
		Если Кнопка <> Неопределено Тогда
			Кнопка.КнопкаПоУмолчанию = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикПриПереходеДалее(НомерПерехода, Отказ)
	
	Если НомерПерехода = 1 Тогда
		СтраницаНачальныеДанные_ПриПереходеДалее(Отказ);
	ИначеЕсли НомерПерехода = 2 Тогда
		СтраницаПроверкаДанных_ПриПереходеДалее(Отказ);
	ИначеЕсли НомерПерехода = 3 Тогда
		СтраницаПроверкаМарок_ПриПереходеДалее(Отказ);
	ИначеЕсли НомерПерехода = 4 Тогда
		СтраницаПросмотрОстатков_ПриПереходеДалее(Отказ)
	ИначеЕсли НомерПерехода = 5 Тогда
		СтраницаСозданиеДокументов_ПриПереходеДалее(Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикПриПереходеНазад(НомерПерехода, Отказ)
	
	Если НомерПерехода = 6 Тогда
		СтраницаОкончание_ПриПереходеНазад(Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикПриОткрытии(НомерПерехода, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Если НомерПерехода = 2 Тогда
		СтраницаПроверкаДанных_ПриОткрытии(ПропуститьСтраницу, ЭтоПереходДалее);
	ИначеЕсли НомерПерехода = 3 Тогда
		СтраницаПроверкаМарок_ПриОткрытии(ПропуститьСтраницу, ЭтоПереходДалее);
	ИначеЕсли НомерПерехода = 4 Тогда
		СтраницаПросмотрОстатков_ПриОткрытии(ПропуститьСтраницу, ЭтоПереходДалее);
	ИначеЕсли НомерПерехода = 7 Тогда
		СтраницаОкончание_ПриОткрытии(ПропуститьСтраницу, ЭтоПереходДалее);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикиСобытийПерехода(Знач ЭтоПереходДалее)
	
	// Обработчики событий переходов
	Если ЭтоПереходДалее Тогда
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода - 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеДалее
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее) Тогда
			
			Отказ = Ложь;
			ВыполнитьОбработчикПриПереходеДалее(ПорядковыйНомерПерехода-1, Отказ);
			
			Если Отказ Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1, Истина);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода + 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеНазад
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад) Тогда
			
			Отказ = Ложь;
			ВыполнитьОбработчикПриПереходеНазад(ПорядковыйНомерПерехода + 1, Отказ);
			
			Если Отказ Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1, Истина);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		
		ПропуститьСтраницу = Ложь;
		ВыполнитьОбработчикПриОткрытии(ПорядковыйНомерПерехода, ПропуститьСтраницу, ЭтоПереходДалее);
		
		Если ПропуститьСтраницу Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + ?(ЭтоПереходДалее,1,-1));
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКнопкуФормыПоИмениКоманды(ЭлементФормы, ИмяКоманды)
	
	Для Каждого Элемент Из ЭлементФормы.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			
			ЭлементФормыПоИмениКоманды = ПолучитьКнопкуФормыПоИмениКоманды(Элемент, ИмяКоманды);
			
			Если ЭлементФормыПоИмениКоманды <> Неопределено Тогда
				
				Возврат ЭлементФормыПоИмениКоманды;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("КнопкаФормы")
			И СтрНайти(Элемент.ИмяКоманды, ИмяКоманды) > 0 Тогда
			
			Возврат Элемент;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура ЗаполнитьРеквизитыОрганизацииВФорме()
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, 
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.ОрганизацияЕГАИС, "Контрагент,ТорговыйОбъект"));
	Объект.ЭтоСклад = Ложь;
	Объект.ЭтоТорговыйЗал = Ложь;
	КорректировкаОстатковЕГАИСПереопределяемый.ПриОпределенииТипаТорговогоОбъекта(
		Объект.ОрганизацияЕГАИС, Объект.ЭтоСклад, Объект.ЭтоТорговыйЗал);
	УстановитьВидимостьПриИзмененииТорговогоОбъекта();
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьТранспортныйМодуль()
	
	ОрганизацияЕГАИС = Неопределено;
	Если НЕ Объект.ОрганизацияЕГАИС.Пустая() Тогда
		ОрганизацияЕГАИС = Объект.ОрганизацияЕГАИС;
	КонецЕсли;
	
	ДоступныеМодули = ИнтеграцияЕГАИСВызовСервера.НастройкиОбменаЕГАИС(ОрганизацияЕГАИС);
	Если ДоступныеМодули.ОбменНаСервере.Количество()+ ДоступныеМодули.ОбменНаКлиенте.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокВыбора = Элементы.ОрганизацияЕГАИС.СписокВыбора;
	Для Каждого ДоступныйМодуль Из ДоступныеМодули.ОбменНаСервере Цикл
		СписокВыбора.Добавить(ДоступныйМодуль.Ключ);
	КонецЦикла;
	Для Каждого ДоступныйМодуль Из ДоступныеМодули.ОбменНаКлиенте Цикл
		СписокВыбора.Добавить(ДоступныйМодуль.Ключ);
	КонецЦикла;
	
	Объект.ОрганизацияЕГАИС = СписокВыбора[0].Значение;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьПриИзмененииТорговогоОбъекта()
	
	ЗаголовокУчетныхОстатков = НСтр("ru='Остаток на складе'");
	Если Объект.ЭтоСклад Тогда
		Элементы.ПанельПроверкаИнвентаризацииНаСкладе.Видимость = Истина;
		ЗаголовокУчетныхОстатков = НСтр("ru = 'Остаток на складе'");
	Иначе
		Элементы.ПанельПроверкаИнвентаризацииНаСкладе.Видимость = Ложь;
	КонецЕсли;
	Если Объект.ЭтоТорговыйЗал Тогда
		Элементы.ПанельПроверкаИнвентаризацииВТорговомЗале.Видимость = Истина;
		ЗаголовокУчетныхОстатков = НСтр("ru='Остаток в торговом зале'");
	Иначе
		Элементы.ПанельПроверкаИнвентаризацииВТорговомЗале.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ОстаткиОстаток.Заголовок = ЗаголовокУчетныхОстатков;
	Элементы.ПомарочныеОстаткиОстаток.Заголовок = ЗаголовокУчетныхОстатков;
	Элементы.КорректировкиОстаток.Заголовок = ЗаголовокУчетныхОстатков;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Видимость колонок Характеристика, Серия таблиц
	Если НЕ ИнтеграцияИС.ХарактеристикиИспользуются() Тогда
		Элементы.ПомарочныеОстаткиХарактеристика.Видимость = Ложь;
		Элементы.ОстаткиХарактеристика.Видимость           = Ложь;
		Элементы.КорректировкиХарактеристика.Видимость     = Ложь;
	КонецЕсли;
	
	Если НЕ ИнтеграцияИС.СерииИспользуются() Тогда
		Элементы.ПомарочныеОстаткиСерия.Видимость = Ложь;
		Элементы.ОстаткиСерия.Видимость           = Ложь;
		Элементы.КорректировкиСерия.Видимость     = Ложь;
	КонецЕсли;
	
	// Таблица ПомарочныеОстатки
	СобытияФормЕГАИСПереопределяемый.ДобавитьСлужебныеРеквизиты(ЭтотОбъект, "ПомарочныеОстатки");
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтотОбъект,
		"ПомарочныеОстаткиХарактеристика",
		"ПомарочныеОстатки.ХарактеристикиИспользуются");
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Остаток на складе>'"));
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ПомарочныеОстаткиАлкогольнаяПродукция");
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементОформления.Отбор,
		"ПомарочныеОстатки.АлкогольнаяПродукция",
		Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка(),
		ВидСравненияКомпоновкиДанных.Равно,,
		Истина);
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтотОбъект,
		"КорректировкиХарактеристика",
		"Объект.Корректировки.ХарактеристикиИспользуются");
	
	// Несопоставленная номенклатура
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("Объект.Остатки.СопоставлениеНоменклатура"));
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаГосИС);
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ОстаткиНоменклатура");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементОформления.Отбор,
		"Объект.Остатки.Номенклатура",
		ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"),
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина);
	
	// Несопоставленная алкогольная продукция
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<не проверено>'"));
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаГосИС);
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ОстаткиАлкогольнаяПродукция");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементОформления.Отбор,
		"Объект.Остатки.АлкогольнаяПродукция",
		Справочники.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка(),
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина);
	
	// Описание строки (остаток или Регистр №2) при пустой справке №2
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Регистр №2>'"));
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
	ЭлементОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ОстаткиСправка2");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементОформления.Отбор,
		"Объект.Остатки.Справка2",
		Справочники.Справки2ЕГАИС.ПустаяСсылка(),
		ВидСравненияКомпоновкиДанных.Равно,,
		Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементОформления.Отбор,
		"Объект.Остатки.ЕГАИС",
		0,
		ВидСравненияКомпоновкиДанных.НеРавно,,
		Истина);
	
	// Описание строки (остаток или Регистр №2) при пустой справке №2
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='<Учетный остаток>'"));
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
	ЭлементОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("ОстаткиСправка2");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементОформления.Отбор,
		"Объект.Остатки.Справка2",
		Справочники.Справки2ЕГАИС.ПустаяСсылка(),
		ВидСравненияКомпоновкиДанных.Равно,,
		Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементОформления.Отбор,
		"Объект.Остатки.ЕГАИС",
		0,
		ВидСравненияКомпоновкиДанных.Равно,,
		Истина);
	
	//Целое количество для всех кроме продающихся в розлив
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ЧДЦ=0;");
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ОстаткиЕГАИС");
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ОстаткиОстаток");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементОформления.Отбор,
		"Объект.Остатки.ПродаетсяВРозлив",
		Истина,
		ВидСравненияКомпоновкиДанных.Равно,,
		Ложь);
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ЧДЦ=3;");
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ОстаткиЕГАИС");
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ОстаткиОстаток");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементОформления.Отбор,
		"Объект.Остатки.ПродаетсяВРозлив",
		Истина,
		ВидСравненияКомпоновкиДанных.Равно,,
		Истина);
	
	//Целое количество для помарочных
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Формат", "ЧДЦ=0;");
	
	ЭлементОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("КорректировкиЕГАИС");
	ЭлементОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("КорректировкиОстаток");
	ЭлементОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("КорректировкиПриходовать");
	ЭлементОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("КорректировкиПередатьВРегистр2");
	ЭлементОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("КорректировкиВнешнийПересорт");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементОформления.Отбор,
		"Объект.Корректировки.ПродаетсяВРозлив",
		Истина,
		ВидСравненияКомпоновкиДанных.Равно,,
		Ложь);
	
	// Единица измерения в таблице сопоставления.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='ДАЛ'"));
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ОстаткиЕдиницаИзмерения");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементОформления.Отбор,
		"Объект.Остатки.ПродаетсяВРозлив",
		Истина,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина);
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='шт'"));
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ОстаткиЕдиницаИзмерения");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементОформления.Отбор,
		"Объект.Остатки.ПродаетсяВРозлив",
		Ложь,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина);
	
	// Единица измерения в таблице корректировки.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='ДАЛ'"));
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("КорректировкиНоменклатураЕдиницаИзмерения");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементОформления.Отбор,
		"Объект.Корректировки.ПродаетсяВРозлив",
		Истина,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина);
		
	// Единица измерения в таблице корректировки.
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='шт'"));
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
	ПолеЭлемента = ЭлементОформления.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("КорректировкиНоменклатураЕдиницаИзмерения");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементОформления.Отбор,
		"Объект.Корректировки.ПродаетсяВРозлив",
		Ложь,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		Истина);
		
	// Надпись Торговый зал для партионной продукции в торговом зале
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Использование = Истина;
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru='Торговый зал'"));
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
	ЭлементОформления.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных("КорректировкиСправка2");
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементОформления.Отбор,
		"Объект.Корректировки.Справка2",
		Справочники.Справки2ЕГАИС.ПустаяСсылка(),
		ВидСравненияКомпоновкиДанных.Равно,,
		Истина);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
		ЭлементОформления.Отбор,
		"Объект.Корректировки.ЕГАИС",
		0,
		ВидСравненияКомпоновкиДанных.НеРавно,,
		Истина);
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "СозданныеДокументы", "СозданныеДокументыДата");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РезультатПолученияОстатков(ЗапросОстатков1,ЗапросОстатков2)
	
	Результат = Новый Структура("Регистр1,Регистр2");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистр1", ЗапросОстатков1);
	Запрос.УстановитьПараметр("Регистр2", ЗапросОстатков2);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыДокументовЕГАИС.Документ КАК Документ,
	|	СтатусыДокументовЕГАИС.Статус КАК Статус
	|ИЗ
	|	РегистрСведений.СтатусыДокументовЕГАИС КАК СтатусыДокументовЕГАИС
	|ГДЕ
	|	СтатусыДокументовЕГАИС.Документ = &Регистр1
	|	ИЛИ СтатусыДокументовЕГАИС.Документ = &Регистр2";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Документ=ЗапросОстатков1 Тогда
			Результат.Регистр1 = Выборка.Статус;
		Иначе
			Результат.Регистр2 = Выборка.Статус;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Процедура КорректироватьРегистрНакопленияОстаткиЕГАИС(ЗапросОстатков1, ЗапросОстатков2)
	
	ДокументОстаткиЕГАИС = ЗапросОстатков1.ПолучитьОбъект();
	ДокументОстаткиЕГАИС.ЗаполнитьПоРасхождениям();
	ДокументОстаткиЕГАИС.Записать(РежимЗаписиДокумента.Проведение);
	
	ДокументОстаткиЕГАИС = ЗапросОстатков2.ПолучитьОбъект();
	ДокументОстаткиЕГАИС.ЗаполнитьПоРасхождениям();
	ДокументОстаткиЕГАИС.Записать(РежимЗаписиДокумента.Проведение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеФормы_Подтверждение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.СозданныеДокументы.Количество() > 0 Тогда
		УдалитьДокументыКорректировкиОстатков();
	КонецЕсли;
	
	ЗакрытьФормуБезусловно = Истина;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеФормы_Марки_Подтверждение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да
		И Результат <> КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СохранитьРезультатПомарочнойИнвентаризацииНаСервере();
	КонецЕсли;
	
	ЗакрытьФормуБезусловно = Истина;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеФормы_ЕстьНеобработанныеРасхожденияМарок_Подтверждение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗафиксироватьМаркиВПромежуточномСтатусе(Объект.ОрганизацияЕГАИС);
		ЗакрытьФормуБезусловно = Истина;
		Закрыть();
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ЗакрытьФормуБезусловно = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСлужебныеРеквизитыТабличныхЧастей()
	
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Корректировки);
	ИнтеграцияИСПереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, Объект.Остатки);
	ИнтеграцияЕГАИС.ЗаполнитьСопоставленнуюПродукцию(Объект.Остатки);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьСлужебныеРеквизиты()
	
	Объект.Остатки.Очистить();
	Объект.Корректировки.Очистить();
	Объект.СозданныеДокументы.Очистить();
	
	Объект.ОстаткиВРегистре1 = ПредопределенноеЗначение("Документ.ОстаткиЕГАИС.ПустаяСсылка");
	Объект.ОстаткиВРегистре2 = ПредопределенноеЗначение("Документ.ОстаткиЕГАИС.ПустаяСсылка");
	
	ТекстОшибкиПолученияОстатковЕГАИС = "";
	Элементы.ПанельОстаткиЕГАИС.ТекущаяСтраница = Элементы.СтраницаОстаткиЕГАИС_ЗапроситьОстатки;
	ВыполнитьПредварительнуюПроверкуДанных = Истина;
	
КонецПроцедуры

#КонецОбласти
