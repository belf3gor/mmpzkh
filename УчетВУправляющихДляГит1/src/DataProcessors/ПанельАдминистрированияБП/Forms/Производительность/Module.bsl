// Текущая форма не предназначена для "тонкой" настройки различных параметров отдельных
// сервисных механизмов, для этого есть специализированные панели администрирования.
//
// В текущей форме отображаются только флажки "верхнего уровня", включающие или отключающие механизмы в целом,
// которые позволяют (в первую очередь, в "коробочных" файловых версиях) быстро отключить ресурсоемкие механизмы, 
// если они не используются в конкретной базе.
// При этом от пользователей не требуются специальные знания по администрированию.
//	
// Поэтому в текущей форме в модели сервиса не даем редактировать настройки,
// которые доступны только администратору системы, при необходимости их надо менять в "родной" панели администрирования.

#Область ОписаниеПеременных

&НаКлиенте
Перем ОбновитьИнтерфейс;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	// Инициализация реквизитов и данных формы.
	
	// Определим режим программы, от него зависят доступные настройки.
	ОбщееОписаниеРежимаРаботы = ОбщегоНазначенияПовтИсп.РежимРаботыПрограммы();
	
	Если НЕ (ОбщееОписаниеРежимаРаботы.ЭтоАдминистраторПрограммы ИЛИ ОбщееОписаниеРежимаРаботы.ЭтоАдминистраторСистемы) Тогда
		ВызватьИсключение НСтр("ru = 'Изменение настроек, связанных с производительность работы программы, доступно только администратору.'");
	КонецЕсли;
	
	// Добавим дополнительные ключи в собственную копию структуры, чтобы не изменять результат работы ПовтИсп-функции.
	ПолноеОписаниеРежимаРаботы = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(ОбщееОписаниеРежимаРаботы);
	
	ПолноеОписаниеРежимаРаботы.Вставить("ЭтоПодчиненныйУзелРИБ", ОбщегоНазначения.ЭтоПодчиненныйУзелРИБ());
	
	РежимРаботы = Новый ФиксированнаяСтруктура(ПолноеОписаниеРежимаРаботы);

	ПроверитьМедленныйРежимРаботы();

	ИмяТекущегоПользователяИБ = ПользователиИнформационнойБазы.ТекущийПользователь().Имя;

	// Определим настройки, которые можно менять в текущем режиме работы.
	НедоступныеНастройки = Новый Структура();
	ОпределитьНедоступныеНастройки();

	ЗаполнитьТаблицуНастроек();

	НастройкиНачальнойСтраницыПользователей = ОбщегоНазначенияБП.НастройкиНачальнойСтраницыПользователей();
	ПодсчитатьПользователейСНачальнойСтраницей(НастройкиНачальнойСтраницыПользователей);

	// Настройки регламентных заданий.
	РегламентныеЗаданияПрочитать("ОбновлениеЗадачБухгалтера");
	РегламентныеЗаданияПрочитать("ОбновлениеПроверокКонтролирующимиОрганами");
	РегламентныеЗаданияПрочитать("УдалениеПомеченных");

	УстановитьДоступность();
	
	УстановитьПодсказки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Оповестим форму ожидания открытия о том, что текущая форма уже открылась и можно ей закрываться.
	ПодключитьОбработчикОжидания("Подключаемый_ОповеститьФормуОжиданияПослеОткрытия", 0.5, Истина);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область Интерфейс

#Область НачальнаяСтраница

&НаКлиенте
Процедура ПоказыватьНачальнуюСтраницуПриИзменении(Элемент)
	
	РезультатОбработки = НовыйРезультатОбработки();

	Если ПоказыватьНачальнуюСтраницу Тогда
		// Включим всем отображение начальной страницы.
		ВосстановитьНачальнуюСтраницуДляВсехПользователей(РезультатОбработки);
	Иначе
		ОтключитьНачальнуюСтраницуДляВсехПользователей(РезультатОбработки, Истина);
	КонецЕсли;
	
	ОбработатьИзменениеНастроекНаКлиенте(РезультатОбработки, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура НадписьНачальнаяСтраницаПользователиНажатие(Элемент)

	СписокПользователей = СписокПользователейСНачальнойСтраницей();

	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("СписокПользователей", СписокПользователей);
	
	ОписаниеОповещения = Новый ОписаниеОповещения(
		"ВыборПользователейСНачальнойСтраницейЗавершение",
		ЭтотОбъект,
		СписокПользователей); // Передаем исходный список, чтобы потом можно было вычислить, что изменилось.
	
	ОткрытьФорму(
		"Обработка.ПанельАдминистрированияБП.Форма.ВыборПользователей",
		ПараметрыФормы,
		ЭтотОбъект,
		,
		,
		,
		ОписаниеОповещения);

КонецПроцедуры

&НаКлиенте
Процедура ВыборПользователейСНачальнойСтраницейЗавершение(НовыйСписокПользователей, ИсходныйСписокПользователей) Экспорт

	Если ТипЗнч(НовыйСписокПользователей) <> Тип("СписокЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	РезультатОбработки = НовыйРезультатОбработки();
	
	ИзменитьНастройкиНачальнойСтраницыПользователей(
		НовыйСписокПользователей,
		ИсходныйСписокПользователей,
		РезультатОбработки);
		
	ОбработатьИзменениеНастроекНаКлиенте(РезультатОбработки);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ИспользоватьТабличныеФормыБанковскихДокументовПриИзменении(Элемент)
	ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьДополнительныеКолонкиВСпискахПриИзменении(Элемент)
	ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

#КонецОбласти

#Область Сервисы

#Область ЗадачиБухгалтера

&НаКлиенте
Процедура ОбновлениеЗадачБухгалтераИспользованиеПриИзменении(Элемент)

	ОбновлениеЗадачБухгалтераИспользованиеПриИзмененииНаСервере();

	НачатьОбновлениеИнтерфейсаПрограммы();

КонецПроцедуры

&НаКлиенте
Процедура ПредупреждатьОПроверкахКонтролирующимиОрганамиПриИзменении(Элемент)

	РегламентныеЗаданияИспользованиеПриИзменении("ОбновлениеПроверокКонтролирующимиОрганами", Ложь);

КонецПроцедуры

#КонецОбласти

#Область Новости

&НаКлиенте
Процедура РазрешенаРаботаСНовостямиПриИзменении(Элемент)
	ПриИзмененииРеквизита(Элемент, Истина); // Обновить интерфейс
КонецПроцедуры

&НаКлиенте
Процедура РазрешенаРаботаСНовостямиРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьПанельАдминистрированияИнтернетПоддержка();

КонецПроцедуры

#КонецОбласти

#Область ПроверкаКонтрагентов

&НаКлиенте
Процедура ИспользоватьПроверкуКонтрагентовПриИзменении(Элемент)
	ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПроверкуКонтрагентовРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьПанельАдминистрированияИнтернетПоддержка();	

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПоддержкаИОбслуживание

#Область Версионирование

&НаКлиенте
Процедура ИспользоватьВерсионированиеОбъектовПриИзменении(Элемент)
	ПриИзмененииРеквизита(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьВерсионированиеОбъектовРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьПанельАдминистрированияБСПОбщиеНастройки();

КонецПроцедуры

#КонецОбласти

#Область ПолнотекстовыйПоиск

&НаКлиенте
Процедура ИспользоватьПолнотекстовыйПоискПриИзменении(Элемент)
	
	Если ИспользоватьПолнотекстовыйПоиск = 0 Тогда // Предыдущее значение - 2 (3й режим).
		ИспользоватьПолнотекстовыйПоиск = 1;
	ИначеЕсли ИспользоватьПолнотекстовыйПоиск = 2 Тогда // Предыдущее значение - 1 (Истина).
		ИспользоватьПолнотекстовыйПоиск = 0;
	КонецЕсли;
	
	ПриИзмененииРежимаПолнотекстовогоПоиска(Элемент, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПолнотекстовыйПоискРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ОткрытьПанельАдминистрированияБСПОбщиеНастройки();

КонецПроцедуры

#КонецОбласти

#Область УдалениеПомеченных

&НаКлиенте
Процедура УдалениеПомеченныхИспользованиеПриИзменении(Элемент)

	РегламентныеЗаданияИспользованиеПриИзменении("УдалениеПомеченных", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалениеПомеченныхИспользованиеРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьФорму("Обработка.УдалениеПомеченныхОбъектов.Форма");

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтключитьНастройки(Команда)

	РезультатОбработки = ОтключитьНастройкиНаСервере();
	
	ОбработатьИзменениеНастроекНаКлиенте(РезультатОбработки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбщиеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Функция НовыйРезультатОбработки()

	Результат = Новый Структура();
	Результат.Вставить("ЕстьИзменения",                Ложь);
	Результат.Вставить("НеобходимоОбновлятьИнтерфейс", Ложь);
	Результат.Вставить("Сообщения",                    Новый Массив);
	Результат.Вставить("ИзмененныеКонстанты",          Новый Массив);
	
	Возврат Результат;

КонецФункции

&НаСервере
Функция ОтключитьНастройкиНаСервере()

	РезультатОбработки = НовыйРезультатОбработки();

	ОтключитьНачальнуюСтраницуДляВсехПользователей(РезультатОбработки, Ложь);
	
	ОтключитьРегламентныеЗадания(РезультатОбработки);

	ОтключитьПрочиеНастройки(РезультатОбработки);
	
	Возврат РезультатОбработки;

КонецФункции

&НаКлиенте
Процедура ПриИзмененииРеквизита(Элемент, НеобходимоОбновлятьИнтерфейс = Истина)
	
	ИмяКонстанты = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	РезультатОбработки = НовыйРезультатОбработки();
	
	РезультатОбработки.НеобходимоОбновлятьИнтерфейс = НеобходимоОбновлятьИнтерфейс;
	Если НЕ ПустаяСтрока(ИмяКонстанты) Тогда
		РезультатОбработки.ЕстьИзменения = Истина;
		РезультатОбработки.ИзмененныеКонстанты.Добавить(ИмяКонстанты);
	КонецЕсли;
	
	ОбработатьИзменениеНастроекНаКлиенте(РезультатОбработки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииРежимаПолнотекстовогоПоиска(Элемент, ОбновлятьИнтерфейс = Истина)
	
	КонстантаИмя = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	Если КонстантаИмя = "НеУдалосьУстановитьРежимПолнотекстовогоПоиска" Тогда
		// Выдача предупреждающего сообщения.
		ТекстВопроса = ТекстСообщенияНеУдалосьУстановитьРежимПолнотекстовогоПоиска();
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить("АктивныеПользователи", НСтр("ru = 'Активные пользователи'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		Обработчик = Новый ОписаниеОповещения("ПриИзмененииРеквизитаПослеОтветаНаВопрос", ЭтотОбъект);
		ПоказатьВопрос(Обработчик, ТекстВопроса, Кнопки, , "АктивныеПользователи");
		Возврат;
	КонецЕсли;
	
	Если ОбновлятьИнтерфейс Тогда
		НачатьОбновлениеИнтерфейсаПрограммы();
	КонецЕсли;
	
	Если КонстантаИмя <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, КонстантаИмя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекстСообщенияНеУдалосьУстановитьРежимПолнотекстовогоПоиска()

	Возврат НСтр("ru = 'Для изменения режима полнотекстового поиска требуется завершение сеансов всех пользователей, кроме текущего.'");

КонецФункции

&НаКлиенте
Процедура ПриИзмененииРеквизитаПослеОтветаНаВопрос(Ответ, ПараметрыВыполнения) Экспорт

	Если Ответ = "АктивныеПользователи" Тогда
		СтандартныеПодсистемыКлиент.ОткрытьСписокАктивныхПользователей();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	
	КонстантаИмя = СохранитьЗначениеРеквизита(РеквизитПутьКДанным);
	
	УстановитьДоступность(РеквизитПутьКДанным);
	
	// После ручного редактирования сбрасываем выделение,
	// которое могло быть установлено в результате автоматического отключения.
	УстановитьФонГруппы("Группа" + ИмяЭлемента, Ложь);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат КонстантаИмя;
	
КонецФункции

&НаСервере
Функция СохранитьЗначениеРеквизита(РеквизитПутьКДанным)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую.
	Если РеквизитПутьКДанным = "" Тогда
		Возврат "";
	КонецЕсли;
	
	// Определение имени константы.
	КонстантаИмя = "";
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(РеквизитПутьКДанным, 15);
	Иначе
		// Определение имени и запись значения реквизита в соответствующей константе из "НаборКонстант".
		// Используется для тех реквизитов формы, которые связаны с константами напрямую (в отношении один-к-одному).
		Если РеквизитПутьКДанным = "ИспользоватьПолнотекстовыйПоиск" Тогда
			Попытка
				Если ИспользоватьПолнотекстовыйПоиск Тогда
					ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
				Иначе
					ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Запретить);
				КонецЕсли;
			Исключение
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Полнотекстовый поиск'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					,
					,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Возврат "НеУдалосьУстановитьРежимПолнотекстовогоПоиска";
			КонецПопытки;
			КонстантаИмя = "ИспользоватьПолнотекстовыйПоиск";
			НаборКонстант.ИспользоватьПолнотекстовыйПоиск = ИспользоватьПолнотекстовыйПоиск;
			// Включение/отключение зависимых регламентных заданий.
			Изменения = Новый Структура("Использование", НаборКонстант.ИспользоватьПолнотекстовыйПоиск);
			Задание = РегламентныеЗаданияНайтиПредопределенное("ОбновлениеИндексаППД");
			Если Задание <> Неопределено Тогда
				РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, Изменения);
			КонецЕсли;
			Задание = РегламентныеЗаданияНайтиПредопределенное("СлияниеИндексаППД");
			Если Задание <> Неопределено Тогда
				РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, Изменения);
			КонецЕсли;
			Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ФайловыеФункции") Тогда
				Изменения.Использование = Изменения.Использование И НаборКонстант.ИзвлекатьТекстыФайловНаСервере;
				Задание = РегламентныеЗаданияНайтиПредопределенное("ИзвлечениеТекста");
				Если Задание <> Неопределено Тогда
					РегламентныеЗаданияСервер.ИзменитьЗадание(Задание, Изменения);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Сохранения значения константы.
	Если НРег(Лев(РеквизитПутьКДанным, 14)) = НРег("НаборКонстант.") Или РеквизитПутьКДанным = "ИспользоватьПолнотекстовыйПоиск" Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			
			Если КонстантаИмя = "ИспользоватьПроверкуКонтрагентов" Тогда
				ВключитьПроверку = КонстантаЗначение = 1;
				ПроверкаКонтрагентовВызовСервера.ПриВключенииВыключенииПроверки(ВключитьПроверку);
			Иначе
				КонстантаМенеджер.Установить(КонстантаЗначение);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат КонстантаИмя;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступность(РеквизитПутьКДанным = "")

	// Проверка контролирующими органами зависит от включенности задач бухгалтера.
	Если (РеквизитПутьКДанным = "ОбновлениеЗадачБухгалтераИспользование"
		ИЛИ РеквизитПутьКДанным = "") Тогда
		Элементы.ОбновлениеПроверокКонтролирующимиОрганамиИспользование.Доступность = ОбновлениеЗадачБухгалтераИспользование;
	КонецЕсли;

	// Полнотекстовый поиск.
	Если (РеквизитПутьКДанным = "ИспользоватьПолнотекстовыйПоиск"
		ИЛИ РеквизитПутьКДанным = "") Тогда
		ОперацииРазрешены = ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Разрешить;
		Если НаборКонстант.ИспользоватьПолнотекстовыйПоиск <> ОперацииРазрешены Тогда
			ИспользоватьПолнотекстовыйПоиск = 2;
		Иначе
			ИспользоватьПолнотекстовыйПоиск = НаборКонстант.ИспользоватьПолнотекстовыйПоиск;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеНастроекНаКлиенте(РезультатОбработки, СообщатьПриОтсутствииИзменений = Истина)

	ЧтоТоИзменено = Ложь;

	Если РезультатОбработки.Сообщения.Количество() > 0 Тогда
		ЧтоТоИзменено = Истина;
		РезультатОбработки.Сообщения.Вставить(0, НСтр("ru = 'Удалось изменить не все возможные настройки.'"));
		ТекстСообщения = СтрСоединить(РезультатОбработки.Сообщения, Символы.ПС);
		ПоказатьПредупреждение(, ТекстСообщения);
	КонецЕсли;
	
	Если РезультатОбработки.НеобходимоОбновлятьИнтерфейс Тогда
		ЧтоТоИзменено = Истина;
		НачатьОбновлениеИнтерфейсаПрограммы();
	КонецЕсли;

	Если РезультатОбработки.ЕстьИзменения Тогда
		ЧтоТоИзменено = Истина;
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;

	// Оповестим об изменении константы.
	Для каждого ИмяКонстанты Из РезультатОбработки.ИзмененныеКонстанты Цикл
		Оповестить("Запись_НаборКонстант", Новый Структура, ИмяКонстанты);
	КонецЦикла;

	Если Не ЧтоТоИзменено И СообщатьПриОтсутствииИзменений Тогда
		// Ничего не удалось отключить.
		ПоказатьПредупреждение(, НСтр("ru = 'В программе уже отключены функции, которые могут оказывать влияние на быстродействие.'"));
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НачатьОбновлениеИнтерфейсаПрограммы()

	ОбновитьИнтерфейс = Истина;
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИнтерфейсПрограммы", 2, Истина);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьИнтерфейсПрограммы()
	
	Если ОбновитьИнтерфейс Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбщегоНазначенияКлиент.ОбновитьИнтерфейсПрограммы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НастройкаУспешноИзменена(РезультатСохранения, РезультатОбработки)

	Успех = Истина;

	Если РезультатСохранения = "НеУдалосьУстановитьРежимПолнотекстовогоПоиска" Тогда
		Успех = Ложь;
		РезультатОбработки.Сообщения.Добавить(ТекстСообщенияНеУдалосьУстановитьРежимПолнотекстовогоПоиска());
	КонецЕсли;
	
	Возврат Успех;

КонецФункции

#КонецОбласти

#Область ПроверкаИспользованияМеханизмов

&НаСервере
Функция НастройкуМожноПредложитьОтключить(ИмяНастройки)

	Если НедоступныеНастройки.Свойство(ИмяНастройки) Тогда
		// Изменение настройки недоступно в принципе.
		Возврат Ложь;
	КонецЕсли;

	Если НЕ ЭтоМедленныйРежимРаботы Тогда
		// Характеристики компьютера удовлетворяют минимальным требованиям,
		// предлагать что-то отключить автоматически не будем, 
		// пользователь может выбрать сам, что он не использует и может отключить.
		Возврат Ложь;
	КонецЕсли;

	Если ИмяНастройки = "ИспользоватьПроверкуКонтрагентов" Тогда
		Возврат Не ИспользуетсяПроверкаКонтрагентов();

	ИначеЕсли ИмяНастройки = "ИспользоватьВерсионированиеОбъектов" Тогда
		Возврат Не ИспользуетсяВерсионированиеОбъектов();

	КонецЕсли;
	
	// Для всех остальных считаем, что механизм можно предложить отключить.
	Возврат Истина;

КонецФункции

&НаСервере
Функция ИспользуетсяПроверкаКонтрагентов()

	// Если текущая база является узлом РИБ, то, вероятно, что в центральном узле используется более производительные сервера,
	// а т.к. константа передается по РИБ, то не предлагаем отключить ее в периферийном узле.
	Если РежимРаботы.ЭтоПодчиненныйУзелРИБ Тогда
		Возврат Истина;
	КонецЕсли;

	// Если в базе есть хотя бы одна организация-плательщик НДС 
	// либо выписывающая счета-фактуры в роли комиссионера (агента),
	// то проверка контрагентов позволяет контролировать данные в книгах покупок, продаж и журнала учета счетов-фактур,
	// ее не будет предлагать отключать.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиСистемыНалогообложения.Организация
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК НастройкиСистемыНалогообложения
	|ГДЕ
	|	НастройкиСистемыНалогообложения.ПлательщикНДС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЖурналУчетаСчетовФактур.Организация
	|ИЗ
	|	РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактур
	|ГДЕ
	|	ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреКомиссия <> 0";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат Не РезультатЗапроса.Пустой();

КонецФункции

&НаСервере
Функция ИспользуетсяВерсионированиеОбъектов()

	// Если текущая база является узлом РИБ, то, вероятно, что в центральном узле используется более производительные сервера,
	// а т.к. константа передается по РИБ, то не предлагаем отключить ее в периферийном узле.
	
	Если РежимРаботы.ЭтоПодчиненныйУзелРИБ Тогда
		Возврат Истина;
	КонецЕсли;
	
	// На медленных компьютерах лучше отключать версионирование объектов.
	Возврат Ложь;

КонецФункции

#КонецОбласти

#Область НачальнаяСтраница

&НаСервере
Процедура ПодсчитатьПользователейСНачальнойСтраницей(НастройкиПользователей)

	КоличествоПользователейВсего = НастройкиПользователей.Количество();
	КоличествоПользователейСНачальнойСтраницей = 0;

	ИмяПользователяСНачальнойСтраницей = "";
	
	Для Каждого КлючИЗначение Из НастройкиПользователей Цикл
	
		Настройки = КлючИЗначение.Значение;

		ЕстьНачальнаяСтраница = Истина;
		Если ТипЗнч(Настройки) = Тип("НастройкиНачальнойСтраницы") Тогда
			СоставФорм = Настройки.ПолучитьСоставФорм();
			Если СоставФорм.ЛеваяКолонка.Количество() = 0
				И СоставФорм.ПраваяКолонка.Количество() = 0 Тогда
				ЕстьНачальнаяСтраница = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ЕстьНачальнаяСтраница Тогда
			КоличествоПользователейСНачальнойСтраницей = КоличествоПользователейСНачальнойСтраницей + 1;
			ИмяПользователяСНачальнойСтраницей = КлючИЗначение.Ключ;
		КонецЕсли;
	
	КонецЦикла;

	ОбновитьНадписьПользователиСНачальнойСтраницей(ИмяПользователяСНачальнойСтраницей);

КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписьПользователиСНачальнойСтраницей(Знач ИмяПользователяСНачальнойСтраницей)

	КомуПоказывать = "";

	Если КоличествоПользователейВсего <= 1 Тогда
		// Единственный пользователь в базе или вообще не введен ни один, показываем только флажок без гиперссылки.
		КомуПоказывать = "";

	ИначеЕсли КоличествоПользователейСНачальнойСтраницей = 0 Тогда
		// Ни для кого из пользователей не показывается начальная страница.
		КомуПоказывать = "";

	ИначеЕсли КоличествоПользователейВсего = КоличествоПользователейСНачальнойСтраницей Тогда
		КомуПоказывать = НСтр("ru = 'всем пользователям'");

	ИначеЕсли КоличествоПользователейСНачальнойСтраницей = 1 Тогда
		
		КомуПоказывать = ИмяПользователяСНачальнойСтраницей;
		
	Иначе
		// Выводим общее количество пользователей с начальной страницей.
		КомуПоказывать = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
			КоличествоПользователейСНачальнойСтраницей, НСтр("ru = 'пользователю, пользователям, пользователям'"));
	КонецЕсли;

	Элементы.НадписьНачальнаяСтраницаПользователи.Заголовок = КомуПоказывать;

	ПоказыватьНачальнуюСтраницу = КоличествоПользователейСНачальнойСтраницей <> 0 ИЛИ КоличествоПользователейВсего = 0;

КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокПользователейСНачальнойСтраницей()

	// Возвращает список пользователей с их настройками начальной страницы для выбора в форме.
	Результат = Новый СписокЗначений;
	
	НастройкиНачальнойСтраницыПользователей = ОбщегоНазначенияБП.НастройкиНачальнойСтраницыПользователей();
	
	Для каждого КлючИЗначение Из НастройкиНачальнойСтраницыПользователей Цикл
		ИмяПользователя = КлючИЗначение.Ключ;
		ПредставлениеПользователя = ИмяПользователя;
		
		ЕстьНачальнаяСтраница = Истина;
		Настройка = КлючИЗначение.Значение;
		Если ТипЗнч(Настройка) = Тип("НастройкиНачальнойСтраницы") Тогда
			СоставФорм = Настройка.ПолучитьСоставФорм();
			Если СоставФорм.ЛеваяКолонка.Количество() = 0 
				И СоставФорм.ПраваяКолонка.Количество() = 0 Тогда
				// Начальная страница у пользователя отключена.
				ЕстьНачальнаяСтраница = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Результат.Добавить(ИмяПользователя, ПредставлениеПользователя, ЕстьНачальнаяСтраница);
	КонецЦикла;
	
	Результат.СортироватьПоПредставлению();
	
	Возврат Результат;

КонецФункции

&НаСервере
Процедура ИзменитьНастройкиНачальнойСтраницыПользователей(Знач НовыйСписокПользователей, Знач ИсходныйСписокПользователей, РезультатОбработки)

	// Определим изменения. 
	КоличествоИзмененных = 0;
	КоличествоПользователейВсего = НовыйСписокПользователей.Количество();
	КоличествоПользователейСНачальнойСтраницей = 0;
	ИмяПользователяСНачальнойСтраницей = "";
	
	Для Индекс = 0 По НовыйСписокПользователей.Количество() - 1 Цикл
		
		ЭлементНовогоСписка = НовыйСписокПользователей[Индекс];
		ЭлементИсходногоСписка = ИсходныйСписокПользователей[Индекс];
	    ЕстьИзменения = Ложь;
		
		// Состав и порядок элементов в списке пользователей не меняется, поэтому сопоставляем списки по индексам.
		Если ЭлементНовогоСписка.Пометка И НЕ ЭлементИсходногоСписка.Пометка Тогда
			// Чтобы показать пользователю формы на начальной странице, необходимо в хранилище настроек удалить 
			// для него индивидуальные настройки, тогда будут применены настройки по умолчанию.
			ХранилищеСистемныхНастроек.Удалить("Общее/НастройкиНачальнойСтраницы", , ЭлементНовогоСписка.Значение);
			ЕстьИзменения = Истина;

		ИначеЕсли НЕ ЭлементНовогоСписка.Пометка И ЭлементИсходногоСписка.Пометка Тогда
			ОбщегоНазначенияБП.ОтключитьНачальнуюСтраницуПользователя(ЭлементНовогоСписка.Значение);
			ЕстьИзменения = Истина;

		КонецЕсли;
	
		Если ЭлементНовогоСписка.Пометка Тогда
			ИмяПользователяСНачальнойСтраницей = ЭлементНовогоСписка.Представление;
			КоличествоПользователейСНачальнойСтраницей = КоличествоПользователейСНачальнойСтраницей + 1;
		КонецЕсли;
		
		Если ЕстьИзменения Тогда
			КоличествоИзмененных = КоличествоИзмененных + 1;
			Если (ЭлементНовогоСписка.Значение = ИмяТекущегоПользователяИБ) ИЛИ ПустаяСтрока(ИмяТекущегоПользователяИБ) Тогда
				// Изменились настройки у текущего пользователя, потребуется обновить интерфейс.
				РезультатОбработки.НеобходимоОбновлятьИнтерфейс = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если КоличествоИзмененных = 0 Тогда
		Возврат;
	КонецЕсли;
	
	РезультатОбработки.ЕстьИзменения = Истина;
	
	ОбновитьНадписьПользователиСНачальнойСтраницей(ИмяПользователяСНачальнойСтраницей);
	
	// Если пользователь менял настройки вручную, то сбросим выделение группы из-за автоизменения.
	УстановитьФонГруппы(Элементы.ГруппаНачальнаяСтраница, Ложь);

КонецПроцедуры

&НаСервере
Процедура ОтключитьНачальнуюСтраницуДляВсехПользователей(РезультатОбработки, ЯвноеИзменениеПользователем)

	Если НЕ ЯвноеИзменениеПользователем И НЕ ЭтоМедленныйРежимРаботы Тогда
		// Характеристики компьютера удовлетворяют минимальным требованиям,
		// предлагать что-то отключить автоматически не будем, 
		// пользователь может выбрать сам, что он не использует и может отключить.
		Возврат;
	КонецЕсли;

	ИсходныйСписокПользователей = СписокПользователейСНачальнойСтраницей();
	Если ИсходныйСписокПользователей.Количество() = 0 Тогда
		// Нет ни одного пользователя ИБ, добавляем виртуального пользователя текущего сеанса.
		ИсходныйСписокПользователей.Добавить("", "", Истина);
	КонецЕсли;
	
	// Снимем отметки у всех пользователей в списке.
	НовыйСписокПользователей = ОбщегоНазначенияКлиентСервер.СкопироватьСписокЗначений(ИсходныйСписокПользователей);
	НовыйСписокПользователей.ЗаполнитьПометки(Ложь);
	
	// Отследим наличие изменений именно по текущей настройке, чтобы в зависимости от их наличия менять цвет фона группы.
	РезультатИзмененияНачальнойСтраницы = НовыйРезультатОбработки();
	
	ИзменитьНастройкиНачальнойСтраницыПользователей(
		НовыйСписокПользователей,
		ИсходныйСписокПользователей,
		РезультатИзмененияНачальнойСтраницы);
	
	РезультатОбработки.ЕстьИзменения = РезультатОбработки.ЕстьИзменения
		ИЛИ РезультатИзмененияНачальнойСтраницы.ЕстьИзменения;

	РезультатОбработки.НеобходимоОбновлятьИнтерфейс = РезультатОбработки.НеобходимоОбновлятьИнтерфейс
		ИЛИ РезультатИзмененияНачальнойСтраницы.НеобходимоОбновлятьИнтерфейс;
	
	// Отразим изменения на форме.
	Если РезультатИзмененияНачальнойСтраницы.ЕстьИзменения И Не ЯвноеИзменениеПользователем Тогда
		УстановитьФонГруппы(Элементы.ГруппаНачальнаяСтраница, Истина);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВосстановитьНачальнуюСтраницуДляВсехПользователей(РезультатОбработки)

	ИсходныйСписокПользователей = СписокПользователейСНачальнойСтраницей();

	Если ИсходныйСписокПользователей.Количество() = 0 Тогда
		// Нет ни одного пользователя ИБ, добавляем виртуального пользователя текущего сеанса.
		ИсходныйСписокПользователей.Добавить("", "", Ложь);
	КонецЕсли;
	
	// Отменим всех пользователей в списке.
	НовыйСписокПользователей = ОбщегоНазначенияКлиентСервер.СкопироватьСписокЗначений(ИсходныйСписокПользователей);
	НовыйСписокПользователей.ЗаполнитьПометки(Истина);

	ИзменитьНастройкиНачальнойСтраницыПользователей(НовыйСписокПользователей, ИсходныйСписокПользователей, РезультатОбработки);

КонецПроцедуры

#КонецОбласти

#Область РегламентныеЗадания

&НаКлиентеНаСервереБезКонтекста
Функция ИменаРегламентныхЗаданий()

	Результат = Новый Массив();
	Результат.Добавить("ОбновлениеЗадачБухгалтера");
	Результат.Добавить("ОбновлениеПроверокКонтролирующимиОрганами");
	Результат.Добавить("УдалениеПомеченных");
	
	Возврат Результат;

КонецФункции

&НаСервере
Процедура ОбновлениеЗадачБухгалтераИспользованиеПриИзмененииНаСервере()

	// При отключении задач бухгалтера одновременно отключаем проверку контролирующими органами.
	РегламентныеЗаданияИспользованиеПриИзменении("ОбновлениеЗадачБухгалтера", Ложь);
	Если НЕ ОбновлениеЗадачБухгалтераИспользование Тогда
		ОбновлениеПроверокКонтролирующимиОрганамиИспользование = Ложь;
		РегламентныеЗаданияИспользованиеПриИзменении("ОбновлениеПроверокКонтролирующимиОрганами", Ложь);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура РегламентныеЗаданияИспользованиеПриИзменении(ПрефиксРеквизитов, ВыделитьФонГруппы)

	ИмяРеквизитаИспользование = ПрефиксРеквизитов + "Использование";
	Идентификатор = ЭтотОбъект[ПрефиксРеквизитов + "Идентификатор"];
	Изменения = Новый Структура("Использование", ЭтотОбъект[ИмяРеквизитаИспользование]);
	
	РегламентныеЗаданияСервер.ИзменитьЗадание(Идентификатор, Изменения);
	УстановитьДоступность(ИмяРеквизитаИспользование);
	
	// Изменим выделение у группы с флажком рег.задания.
	УстановитьФонГруппы("Группа" + ПрефиксРеквизитов, ВыделитьФонГруппы);
	
КонецПроцедуры

&НаСервере
Функция РегламентныеЗаданияНайтиПредопределенное(ИмяПредопределенного)

	Фильтр = Новый Структура("Метаданные", ИмяПредопределенного);
	Найденные = РегламентныеЗаданияСервер.НайтиЗадания(Фильтр);
	Задание = ?(Найденные.Количество() = 0, Неопределено, Найденные[0]);
	Если ТипЗнч(Задание) = Тип("СтрокаТаблицыЗначений")
		И Задание.Владелец().Колонки.Найти("УникальныйИдентификатор") = Неопределено Тогда
		Задание.Владелец().Колонки.Идентификатор.Имя = "УникальныйИдентификатор";
	КонецЕсли;
	Возврат Задание;

КонецФункции

&НаСервере
Процедура РегламентныеЗаданияПрочитать(ИмяПредопределенного)

	Если НедоступныеНастройки.Свойство(ИмяПредопределенного) Тогда
		Возврат;
	КонецЕсли;

	Задание = РегламентныеЗаданияНайтиПредопределенное(ИмяПредопределенного);
	Если Задание <> Неопределено Тогда
		// Запомним в реквизитах формы параметры рег.задания.
		ЭтотОбъект[ИмяПредопределенного + "Использование"] = Задание.Использование;
		ЭтотОбъект[ИмяПредопределенного + "Идентификатор"] = Задание.УникальныйИдентификатор;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОтключитьРегламентныеЗадания(РезультатОбработки)

	ИменаЗаданий = ИменаРегламентныхЗаданий();

	Для каждого ИмяЗадания Из ИменаЗаданий Цикл
	
		Если Не НастройкуМожноПредложитьОтключить(ИмяЗадания) Тогда
			Продолжить;
		Конецесли;
	
		Если ЭтотОбъект[ИмяЗадания + "Использование"] Тогда
			
			ЭтотОбъект[ИмяЗадания + "Использование"] = Ложь;
			РегламентныеЗаданияИспользованиеПриИзменении(ИмяЗадания, Истина);
			
			РезультатОбработки.ЕстьИзменения = Истина;
			
			Если ИмяЗадания = "ОбновлениеЗадачБухгалтера" Тогда
				РезультатОбработки.НеобходимоОбновлятьИнтерфейс = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	

КонецПроцедуры

#КонецОбласти

#Область ПрочиеНастройки

&НаСервере
Процедура ЗаполнитьТаблицуНастроек()

	// Заполняет настроки, которые не связаны напрямую с признаком Использование
	// регламентных заданий и для которых существуют отдельные константы.
	
	ЛожьВМассиве = Новый ФиксированныйМассив(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Ложь));
	НольВМассиве = Новый ФиксированныйМассив(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(0));
	
	НоваяСтрока = ТаблицаНастроек.Добавить();
	НоваяСтрока.ИмяНастройки          = "ИспользоватьТабличныеФормыБанковскихДокументов";
	НоваяСтрока.ЧтениеЗаписьКонстанты = Истина;
	НоваяСтрока.ОтключенныеЗначения   = ЛожьВМассиве;

	НоваяСтрока = ТаблицаНастроек.Добавить();
	НоваяСтрока.ИмяНастройки          = "ОтображатьДополнительныеКолонкиВСписках";
	НоваяСтрока.ЧтениеЗаписьКонстанты = Истина;
	НоваяСтрока.ОтключенныеЗначения   = ЛожьВМассиве;

	НоваяСтрока = ТаблицаНастроек.Добавить();
	НоваяСтрока.ИмяНастройки          = "РазрешенаРаботаСНовостями";
	НоваяСтрока.ЧтениеЗаписьКонстанты = Истина;
	НоваяСтрока.ОтключенныеЗначения   = ЛожьВМассиве;

	НоваяСтрока = ТаблицаНастроек.Добавить();
	НоваяСтрока.ИмяНастройки          = "ИспользоватьВерсионированиеОбъектов";
	НоваяСтрока.ЧтениеЗаписьКонстанты = Истина;
	НоваяСтрока.ОтключенныеЗначения   = ЛожьВМассиве;

	// Проверка контрагентов в отключенном виде имеет несколько статусов, зададим массив отключенных значений.
	НоваяСтрока = ТаблицаНастроек.Добавить();
	НоваяСтрока.ИмяНастройки          = "ИспользоватьПроверкуКонтрагентов";
	НоваяСтрока.ЧтениеЗаписьКонстанты = Истина;
	
	ОтключенныеЗначения = Новый Массив;
	ОтключенныеЗначения.Добавить(0); // Признак того, что настройка отключена, но пользователю будет предложено включить ее при первом удобном случае.
	ОтключенныеЗначения.Добавить(2); // Признак того, что принудительно отключили. В этом случае больше не показывается предложение на подключение.
	НоваяСтрока.ОтключенныеЗначения   = Новый ФиксированныйМассив(ОтключенныеЗначения);
	
	НоваяСтрока = ТаблицаНастроек.Добавить();
	НоваяСтрока.ИмяНастройки          = "ИспользоватьПолнотекстовыйПоиск";
	НоваяСтрока.ЧтениеЗаписьКонстанты = Ложь;
	НоваяСтрока.ОтключенныеЗначения   = НольВМассиве;

КонецПроцедуры

&НаСервере
Процедура ОтключитьПрочиеНастройки(РезультатОбработки)

	Для каждого СтрокаНастройки Из ТаблицаНастроек Цикл
	
		Если Не НастройкуМожноПредложитьОтключить(СтрокаНастройки.ИмяНастройки) Тогда
			Продолжить;
		Конецесли;
	
		Если СтрокаНастройки.ЧтениеЗаписьКонстанты Тогда
			// Настройка является константой.
			ТекущееЗначениеНастройки = НаборКонстант[СтрокаНастройки.ИмяНастройки];
			РеквизитПутьКДанным = "НаборКонстант." + СтрокаНастройки.ИмяНастройки;
		Иначе
			// Настройка является реквизитом формы с особым поведением.
			ТекущееЗначениеНастройки = ЭтотОбъект[СтрокаНастройки.ИмяНастройки];
			РеквизитПутьКДанным = СтрокаНастройки.ИмяНастройки;
		КонецЕсли;

		Если СтрокаНастройки.ОтключенныеЗначения[0] = ТекущееЗначениеНастройки Тогда
			// Настройка уже отключена и ее значение соответствует значению по умолчанию, менять не требуется.
			Продолжить;
		КонецЕсли;
		
		Если СтрокаНастройки.ЧтениеЗаписьКонстанты Тогда
			НаборКонстант[СтрокаНастройки.ИмяНастройки] = СтрокаНастройки.ОтключенныеЗначения[0];
		Иначе
			ЭтотОбъект[СтрокаНастройки.ИмяНастройки]    = СтрокаНастройки.ОтключенныеЗначения[0];
		КонецЕсли;
		РезультатСохранения = СохранитьЗначениеРеквизита(РеквизитПутьКДанным);
		
		Если Не НастройкаУспешноИзменена(РезультатСохранения, РезультатОбработки) Тогда
			// Вернем назад прежнее значение настройки в реквизитах формы, если не удалось его записать в базу.
			Если СтрокаНастройки.ЧтениеЗаписьКонстанты Тогда
				НаборКонстант[СтрокаНастройки.ИмяНастройки] = ТекущееЗначениеНастройки;
			Иначе
				ЭтотОбъект[СтрокаНастройки.ИмяНастройки]    = ТекущееЗначениеНастройки;
			КонецЕсли;
			Продолжить;
		КонецЕсли;
		
		УстановитьДоступность(РеквизитПутьКДанным);

		// Подсветим группу формы с измененным флажком, если ранее он был включена.
		Если СтрокаНастройки.ОтключенныеЗначения.Найти(ТекущееЗначениеНастройки) = Неопределено Тогда
			УстановитьФонГруппы("Группа" + СтрокаНастройки.ИмяНастройки, Истина);
		КонецЕсли;
		
		РезультатОбработки.ЕстьИзменения = Истина;
		Если НаборКонстант.Свойство(СтрокаНастройки.ИмяНастройки) Тогда
			// Запомним, что значение константы было изменено, чтобы об этом разосласть оповещение другим формам.
			РезультатОбработки.ИзмененныеКонстанты.Добавить(СтрокаНастройки.ИмяНастройки);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ВнешнийВидФормы

&НаКлиенте
Процедура Подключаемый_ОповеститьФормуОжиданияПослеОткрытия()

	Оповестить("Производительность_ОповещениеПослеОткрытия");

КонецПроцедуры

&НаСервере
Процедура ПроверитьМедленныйРежимРаботы()

	ОбщиеПараметры = ОбщегоНазначения.ОбщиеПараметрыБазовойФункциональности();
	РекомендуемыйОбъем = ОбщиеПараметры.РекомендуемыйОбъемОперативнойПамяти;

	СистемнаяИнформация = Новый СистемнаяИнформация;
	ДоступныйОбъем = Окр(СистемнаяИнформация.ОперативнаяПамять / 1024, 1);
	
	ЭтоМедленныйРежимРаботы = РежимРаботы.Файловый И ДоступныйОбъем < РекомендуемыйОбъем;

	Элементы.ГруппаМедленныйКомпьютер.Видимость = ЭтоМедленныйРежимРаботы;
	Элементы.ГруппаЗаголовок.Видимость = НЕ ЭтоМедленныйРежимРаботы;

	Элементы.НадписьРекомендация.Заголовок = СтрШаблон(
		Элементы.НадписьРекомендация.Заголовок,
		ДоступныйОбъем,
		РекомендуемыйОбъем);

КонецПроцедуры

&НаСервере
Процедура ОпределитьНедоступныеНастройки()

	Если РежимРаботы.МодельСервиса Тогда // Разделение включено
		НедоступныеНастройки.Вставить("ОбновлениеЗадачБухгалтера");
		НедоступныеНастройки.Вставить("ОбновлениеПроверокКонтролирующимиОрганами");
		НедоступныеНастройки.Вставить("РазрешенаРаботаСНовостями");
		НедоступныеНастройки.Вставить("ИспользоватьПолнотекстовыйПоиск");
	КонецЕсли;
	
	Если РежимРаботы.МодельСервиса Или РежимРаботы.Автономный Тогда // Разделение включено или АРМ
		НедоступныеНастройки.Вставить("ИспользоватьПроверкуКонтрагентов");
	КонецЕсли;
	
	// Скроем с формы группы, в которых расположены недоступные настройки.
	Для каждого КлючИЗначение Из НедоступныеНастройки Цикл
		Элементы["Группа" + КлючИЗначение.Ключ].Видимость = Ложь;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьФонГруппы(Знач ГруппаФормы, ВыделитьФонГруппы)

	Если ТипЗнч(ГруппаФормы) = Тип("Строка") Тогда
		ГруппаФормы = Элементы.Найти(ГруппаФормы);
	КонецЕсли;
	
	Если ТипЗнч(ГруппаФормы) <> Тип("ГруппаФормы") Тогда
		Возврат;
	КонецЕсли;

	Если ВыделитьФонГруппы Тогда
		ГруппаФормы.ЦветФона = ЦветаСтиля.ЦветФонаБлоковИнформационнойПанели;
	Иначе
		ГруппаФормы.ЦветФона = Новый Цвет();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьПодсказки()

	Если РежимРаботы.ЭтоПодчиненныйУзелРИБ Тогда
		Если РежимРаботы.Автономный Тогда
			Элементы.ИспользоватьВерсионированиеОбъектовРасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
				НСтр("ru = 'Рекомендуется изменять настройку в приложении в Интернете'"),
				Символы.ПС,
				Элементы.ИспользоватьВерсионированиеОбъектовРасширеннаяПодсказка.Заголовок);
		Иначе
			Элементы.ИспользоватьВерсионированиеОбъектовРасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
				НСтр("ru = 'Рекомендуется изменять настройку в центральном узле РИБ'"),
				Символы.ПС,
				Элементы.ИспользоватьВерсионированиеОбъектовРасширеннаяПодсказка.Заголовок);
		КонецЕсли;
		
		Элементы.ИспользоватьПроверкуКонтрагентовРасширеннаяПодсказка.Заголовок = Новый ФорматированнаяСтрока(
			"Позволяет проверить декларацию НДС перед отправкой в ФНС.
			|На медленных компьютерах вместо автоматической проверки рекомендуется использовать ручную (запуск из подменю «Ещё» в форме контрагента).
			|Рекомендуется изменять настройку в центральном узле РИБ.
			|",
			Новый ФорматированнаяСтрока("Подробнее", , , , "ПроверкаКонтрагентовПодробнее"));

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПанельАдминистрированияИнтернетПоддержка()

	ОткрытьФорму("Обработка.ПанельАдминистрированияБСП.Форма.ИнтернетПоддержкаИСервисы");

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПанельАдминистрированияБСПОбщиеНастройки()

	ОткрытьФорму("Обработка.ПанельАдминистрированияБСП.Форма.ОбщиеНастройки");

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Инициализация

	ОбновитьИнтерфейс = Ложь;

#КонецОбласти