#Область ОписаниеПеременных

&НаКлиенте
Перем ОбновитьИнтерфейс;

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;

	Элементы.ОтключитьКонтрольОтрицательныхОстатков.ТолькоПросмотр = 
		НЕ ПравоДоступа("Изменение", Метаданные.Константы.ОтключитьКонтрольОтрицательныхОстатков);
		
	Элементы.ПроверятьАктуальностьДанныхУчета.ТолькоПросмотр = 
		НЕ ПравоДоступа("Изменение", Метаданные.Константы.ПроверятьАктуальностьДанныхУчета);
		
	Если ВариантыПриложений.ЭтоВерсияКОРП() Тогда
		Элементы.ПошаговоеВыполнениеРегламентныхОпераций.ТолькоПросмотр = 
			НЕ ПравоДоступа("Изменение", Метаданные.Константы.ПошаговоеВыполнениеРегламентныхОпераций);
	Иначе
		// Настройка "Пошаговое выполнение регламентных операций" доступна только в КОРП-версии конфигурации.
		Элементы.ПошаговоеВыполнениеРегламентныхОпераций.Видимость = Ложь;
	КонецЕсли;
		
	Элементы.ВремяДокументовУстанавливатьАвтоматически.ТолькоПросмотр =
		НЕ ПравоДоступа("Изменение", Метаданные.Константы.ФиксированноеВремяВДокументах);
		
	ЕстьПравоИзменения = ПравоДоступа("Изменение", Метаданные.Константы.ИспользоватьОтложенноеПроведение);

	ПрочитатьИспользоватьОтложенноеПроведение();

	ОбновитьПодсказкуИспользоватьОтложенноеПроведение();

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	ОбновитьИнтерфейсПрограммы();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеУчетнойПолитики"
		ИЛИ ИмяСобытия = "Запись_НастройкиСистемыНалогообложения"
		ИЛИ ИмяСобытия = "Запись_НастройкиУчетаНДС" Тогда
		ОбновитьПодсказкуИспользоватьОтложенноеПроведение();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьОтложенноеПроведениеПриИзменении(Элемент)

	ИспользоватьОтложенноеПроведениеПриИзмененииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура НадписьОтложенноеПроведениеПояснениеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ОткрытьФорму("Обработка.ПанельАдминистрированияБП.Форма.ОрганизацииНеИспользующиеОтложенноеПроведение", , ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОтключитьКонтрольОтрицательныхОстатковПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПроверятьАктуальностьДанныхУчетаПриИзменении(Элемент)
	
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
	
	Если НЕ НаборКонстант.ПроверятьАктуальностьДанныхУчета Тогда 
		ПроверятьАктуальностьДанныхУчетаПриИзмененииНаСервере();
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПроверятьАктуальностьДанныхУчетаПриИзмененииНаСервере()
	
	// При выключении проверки проведения документов одновременно выключается константа 
	// ПошаговоеВыполнениеРегламентныхОпераций, поэтому перечитаем на форме ее значение
	НаборКонстант.ПошаговоеВыполнениеРегламентныхОпераций = Константы.ПошаговоеВыполнениеРегламентныхОпераций.Получить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПошаговоеВыполнениеРегламентныхОперацийПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ФиксированноеВремяВДокументахПриИзменении(Элемент)
	Подключаемый_ПриИзмененииРеквизита(Элемент, Ложь);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПереключитьОтложенноеПроведение(Команда)

	Если ИспользоватьОтложенноеПроведениеПриОткрытии = 0 И ИспользоватьОтложенноеПроведение = 1 Тогда
		ВключитьОтложенноеПроведение();
	ИначеЕсли ИспользоватьОтложенноеПроведениеПриОткрытии = 1 И ИспользоватьОтложенноеПроведение = 0 Тогда
		ОтключитьОтложенноеПроведение();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура Подключаемый_ПриИзмененииРеквизита(Элемент, НеобходимоОбновлятьИнтерфейс = Истина)
	
	КонстантаИмя = ПриИзмененииРеквизитаСервер(Элемент.Имя);
	
	Если НеобходимоОбновлятьИнтерфейс Тогда
		ОбновитьИнтерфейс = Истина;
		ПодключитьОбработчикОжидания("ОбновитьИнтерфейсПрограммы", 2, Истина);
	КонецЕсли;
	
	Если КонстантаИмя <> "" Тогда
		Оповестить("Запись_НаборКонстант", Новый Структура, КонстантаИмя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнтерфейсПрограммы()
	
	#Если НЕ ВебКлиент Тогда
	Если ОбновитьИнтерфейс = Истина Тогда
		ОбновитьИнтерфейс = Ложь;
		ОбновитьИнтерфейс();
	КонецЕсли;
	#КонецЕсли
	
КонецПроцедуры

&НаСервере
Функция ПриИзмененииРеквизитаСервер(ИмяЭлемента)
	
	РеквизитПутьКДанным = Элементы[ИмяЭлемента].ПутьКДанным;
	
	КонстантаИмя = СохранитьЗначениеРеквизита(РеквизитПутьКДанным);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
	Возврат КонстантаИмя;
	
КонецФункции

&НаСервере
Функция СохранитьЗначениеРеквизита(РеквизитПутьКДанным)
	
	// Сохранение значений реквизитов, не связанных с константами напрямую.
	Если РеквизитПутьКДанным = "" Тогда
		Возврат "";
	КонецЕсли;
	
	// Определение имени константы.
	КонстантаИмя = РеквизитПутьКДанным;
	Если НРег(Лев(КонстантаИмя, 14)) = НРег("НаборКонстант.") Тогда
		// Если путь к данным реквизита указан через "НаборКонстант".
		КонстантаИмя = Сред(КонстантаИмя, 15);
	КонецЕсли;
	
	// Сохранения значения константы.
	Если ЗначениеЗаполнено(КонстантаИмя) Тогда
		КонстантаМенеджер = Константы[КонстантаИмя];
		КонстантаЗначение = НаборКонстант[КонстантаИмя];
		
		Если КонстантаМенеджер.Получить() <> КонстантаЗначение Тогда
			
			КонстантаМенеджер.Установить(КонстантаЗначение);
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат КонстантаИмя;
	
КонецФункции

&НаСервере
Процедура ИспользоватьОтложенноеПроведениеПриИзмененииНаСервере()

	ОбновитьПодсказкуИспользоватьОтложенноеПроведение();
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ПрочитатьИспользоватьОтложенноеПроведение()

	// Читаем из константы, а не из ФО, чтобы не показывать вне зависимости от обновленности кеша повторных значений.
	ИспользоватьОтложенноеПроведение = ?(Константы.ИспользоватьОтложенноеПроведение.Получить(), 1, 0);
	ИспользоватьОтложенноеПроведениеПриОткрытии = ИспользоватьОтложенноеПроведение;

	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаСервере
Процедура ОбновитьПодсказкуИспользоватьОтложенноеПроведение()

	Элементы.ИспользоватьОтложенноеПроведение.ТолькоПросмотр = НЕ ЕстьПравоИзменения;

	ТекстПодсказки = "";

	Если ИспользоватьОтложенноеПроведение = 1 Тогда

		ТаблицаОрганизаций = ПроведениеСервер.ПричиныНепримененияОтложенногоПроведения();
	
		Если ТаблицаОрганизаций.Количество() > 0 Тогда
		
			МассивСтрок = Новый Массив;
		
			Если Справочники.Организации.ИспользуетсяНесколькоОрганизаций() Тогда
				// Показываем гиперссылку на форму с причинами.
				
				МассивСтрок.Добавить(НСтр("ru = 'Расчеты всегда выполняются при проведении документов для '"));
				
				ТекстГиперссылки = "";
				Если ТаблицаОрганизаций.Количество() = 1 Тогда
					ТекстГиперссылки = Строка(ТаблицаОрганизаций[0].Организация);
				Иначе
					ТекстГиперссылки = СтрШаблон(НСтр("ru = '%1 организаций'"), ТаблицаОрганизаций.Количество());
				Конецесли;
				
				МассивСтрок.Добавить(Новый ФорматированнаяСтрока(ТекстГиперссылки, , , , "ОрганизацииИсключения"));
				МассивСтрок.Добавить(".");
				
				ТекстПодсказки = Новый ФорматированнаяСтрока(МассивСтрок);
				
			Иначе
				// Показываем причину сразу в надписи.
				СтрокаТаблицы = ТаблицаОрганизаций[0];

				Если СтрокаТаблицы.ЕстьПериодыИспользованияОтложенногоПроведения Тогда
					// Если есть периоды примененения отложенного проведения, то их даты описаны в тексте причины.
					МассивСтрок.Добавить(СтрокаТаблицы.Причина);
					МассивСтрок.Добавить(Символы.ПС);
					МассивСтрок.Добавить(НСтр("ru = 'расчеты выполняются при проведении документов.'"));
				Иначе
					МассивСтрок.Добавить(НСтр("ru = 'Расчеты всегда выполняются при проведении документов по причине:'"));
					МассивСтрок.Добавить(Символы.ПС);
					МассивСтрок.Добавить(СтрокаТаблицы.Причина);
				КонецЕсли;
				
				ТекстПодсказки = СтрСоединить(МассивСтрок);
				
				// Заблокируем возможность установки переключателя, если он ранее не был установлен и его нельзя установить.
				Если ИспользоватьОтложенноеПроведение = 0 И НЕ СтрокаТаблицы.ЕстьПериодыИспользованияОтложенногоПроведения Тогда
					Элементы.ИспользоватьОтложенноеПроведение.ТолькоПросмотр = Истина;
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;

	Элементы.НадписьОрганизацииНеИспользующиеОтложенноеПроведение.Видимость = ЗначениеЗаполнено(ТекстПодсказки);
	Элементы.НадписьОрганизацииНеИспользующиеОтложенноеПроведение.Заголовок = ТекстПодсказки;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Элементы = Форма.Элементы;
	
	// Если произведено переключение настройки после открытия формы, то показываем кнопку "Применить".
	Если Форма.ИспользоватьОтложенноеПроведение <> Форма.ИспользоватьОтложенноеПроведениеПриОткрытии Тогда
		Элементы.ГруппаОтложенноеПроведениеКнопка.Видимость = Истина;
		
		// Переключение из режима неотложенного проведения в режим отложенного может занять длительное время.
		ТекстЗаголовок = Элементы.НадписьПрименитьОтложенноеПроведение.Заголовок;
		Если Форма.ИспользоватьОтложенноеПроведение = 1 Тогда
			ТекстЗаголовок = НСтр("ru = 'Для изменения режима расчетов необходимо применить эту настройку
				|(может занять длительное время).'");
		Иначе
			ТекстЗаголовок = НСтр("ru = 'Для изменения режима расчетов необходимо применить эту настройку.'");
		КонецЕсли;
		Элементы.НадписьПрименитьОтложенноеПроведение.Заголовок = ТекстЗаголовок;
	Иначе
		Элементы.ГруппаОтложенноеПроведениеКнопка.Видимость = Ложь;
	КонецЕсли;

	// Если используется отложенное проведение, то принудительно устанавливаем флажок
	// и показываем вместо него картинку с флажком для обозначения того, что нельзя снять. 
	Элементы.ПроверятьАктуальностьДанныхУчета.Видимость = Форма.ИспользоватьОтложенноеПроведение = 0;
	Элементы.ГруппаПроверятьАктуальностьДанныхУчетаВсегда.Видимость = Форма.ИспользоватьОтложенноеПроведение = 1;
	Элементы.ПошаговоеВыполнениеРегламентныхОпераций.Доступность = Форма.НаборКонстант.ПроверятьАктуальностьДанныхУчета;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(Знач ИдентификаторЗадания) 

	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);

КонецФункции

&НаКлиенте
Процедура ВключитьОтложенноеПроведение()

	// Возможно, что фоновое задание было запущено раньше, 
	// пользователь дал команду его отменить, однако задание не отменено.
	// В таком случае не следует запускать задание повторно - следует дождаться его выполнения.
	Если НЕ ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
		Возврат;
	КонецЕсли;

	ОчиститьСообщения();
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияПереключениеОтложенноеПроведение");

	РезультатВыполнения = ВключитьОтложенноеПроведениеНаСервере();

	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ОповеститьОбИзмененииОтложенногоПроведения();
	Иначе
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияПереключениеОтложенноеПроведение", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ВключитьОтложенноеПроведениеНаСервере()

	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;

	ПараметрыЗадания = Новый Структура();
	ПараметрыЗадания.Вставить("ВключитьДляОрганизаций");
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"ПроведениеСервер.ПереключитьОтложенноеПроведениеВФоне",
		ПараметрыЗадания,
		НСтр("ru = 'Включение отложенного проведения'"));
		
	АдресХранилища   		= РезультатВыполнения.АдресХранилища;
	ИдентификаторЗадания	= РезультатВыполнения.ИдентификаторЗадания;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат РезультатВыполнения;

КонецФункции

&НаКлиенте
Процедура ОтключитьОтложенноеПроведение()

	// Возможно, что фоновое задание было запущено раньше, 
	// пользователь дал команду его отменить, однако задание не отменено.
	// В таком случае не следует запускать задание повторно - следует дождаться его выполнения.
	Если НЕ ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
		Возврат;
	КонецЕсли;

	ОчиститьСообщения();
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияПереключениеОтложенноеПроведение");

	РезультатВыполнения = ОтключитьОтложенноеПроведениеНаСервере();

	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ОповеститьОбИзмененииОтложенногоПроведения();
	Иначе
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияПереключениеОтложенноеПроведение", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ОтключитьОтложенноеПроведениеНаСервере()

	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;

	ПараметрыЗадания = Новый Структура();
	ПараметрыЗадания.Вставить("ОтключитьДляОрганизаций");
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"ПроведениеСервер.ПереключитьОтложенноеПроведениеВФоне",
		ПараметрыЗадания,
		НСтр("ru = 'Отключение отложенного проведения'"));
		
	АдресХранилища       = РезультатВыполнения.АдресХранилища;
	ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	КонецЕсли;
	
	Возврат РезультатВыполнения;

КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияПереключениеОтложенноеПроведение()

	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			ЗагрузитьПодготовленныеДанные();
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			ОповеститьОбИзмененииОтложенногоПроведения();
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗаданияПереключениеОтложенноеПроведение", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()

	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(РезультатВыполнения) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	// Значение константы кешируется внутри функциональной опции, сбросим кеши после изменения настройки.
	ОбновитьПовторноИспользуемыеЗначения();

	ИспользоватьОтложенноеПроведение = ?(Константы.ИспользоватьОтложенноеПроведение.Получить(), 1, 0);
	
	Если РезультатВыполнения.Свойство("Успешно")
		И РезультатВыполнения.Успешно Тогда
		ИспользоватьОтложенноеПроведениеПриОткрытии = ИспользоватьОтложенноеПроведение;
		
		// При включении отложенного проведения одновременно устанавливается константа 
		// ПроверятьАктуальностьДанныхУчета, поэтому перечитаем на форме ее значение
		Если ИспользоватьОтложенноеПроведение = 1 Тогда
			НаборКонстант.ПроверятьАктуальностьДанныхУчета = Константы.ПроверятьАктуальностьДанныхУчета.Получить();
		КонецЕсли;
		
	Иначе
		// Покажем сообщения, которые были выведены внутри фонового задания.
		СообщенияПользователю = ОбщегоНазначенияБП.ПолучитьСообщенияПользователюБезСлужебных(Истина, ИдентификаторЗадания);
		Для Каждого СообщениеПользователю Из СообщенияПользователю Цикл
			СообщениеПользователю.Сообщить();
		КонецЦикла;
	КонецЕсли;

	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОбИзмененииОтложенногоПроведения()

	ОбновитьПовторноИспользуемыеЗначения();
	Оповестить("Запись_НаборКонстант", Новый Структура, "ИспользоватьОтложенноеПроведение");

КонецПроцедуры

#КонецОбласти
