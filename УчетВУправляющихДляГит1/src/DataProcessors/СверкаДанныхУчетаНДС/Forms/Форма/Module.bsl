
&НаКлиенте
Перем ПараметрыОбработчикаОжиданияРаботаСПочтой;

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Перезаполним из параметров те значения, которые переданы.
	ЗаполнитьЗначенияСвойств(Объект, Параметры);
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация 		= БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.НалоговыйПериод) Тогда
		Объект.НалоговыйПериод 	= НачалоКвартала(НачалоДня(ТекущаяДатаСеанса()) - 25 * 24 * 60 * 60);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
		ТаблицаУчетныхЗаписей = РаботаСПочтовымиСообщениями.ДоступныеУчетныеЗаписи(Истина, Истина, Истина);	
		Если ТаблицаУчетныхЗаписей.Количество() = 1 Тогда
			Объект.УчетнаяЗапись = ТаблицаУчетныхЗаписей[0].Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	ИзменитьПериод(Объект.НалоговыйПериод);
	
	ГлубинаПоиска = 90; // По умолчанию поиск за квартал
	АвтоматическиЗапускатьЧтениеПочты = Истина;
	
	// Инициализируем цвета
	ЦветАктивнойКнопки   = ЦветаСтиля.ДосьеТекущийРазделЦвет;
	ЦветНеактивнойКнопки = Элементы.ГруппаСсылокРазделы.ЦветФона;
	ЦветТекстаКнопки     = ЦветаСтиля.ЦветТекстаФормы;
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаСверка;
	ТекущийРаздел = Элементы["Гиперссылка" + СтрЗаменить(Элементы.ГруппаСтраницы.ТекущаяСтраница.Имя, "Страница", "")];
	ОформитьКнопку(ТекущийРаздел, ТекущийРаздел);
	
	Элементы.СтраницыЗапросыПоставщикамСтадии.ТекущаяСтраница 	= Элементы.СтраницаЗапросыПоставщикамТаблица;
	Элементы.СтраницыОтветыПоставщиковСтадии.ТекущаяСтраница 	= Элементы.СтраницаОтветыПоставщиковТаблица;
	Элементы.СтраницыЗапросыПокупателейСтадии.ТекущаяСтраница 	= Элементы.СтраницаЗапросыПокупателейТаблица;
	
	ОтборЗапросыПоставщикам = "Все";
	ОтборОтветыПоставщиков 	= "Незагруженные";
	ОтборЗапросыПокупателей = "Неотвеченные";
	
	УстановитьОтборОрганизация();
	
	УстановитьОтборЗапросыПоставщикам();
	
	УстановитьОтборОтветыПоставщиков();
	
	ПереключитьСтраницуРазделаОтветыПоставщиков(ЭтотОбъект);
	
	УстановитьОтборЗапросыПокупателей();

	УстановитьВидимостьГлубиныПоиска();

	ВывестиНужнуюПанельРезультатовСверки();

	// Скроем элементы, которые не нужны, если нет прав
	ЕстьПравоВывод = ПравоДоступа("Вывод", Метаданные)
		И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.СтатусыЗапросовРеестровСчетовФактур);

	Если НЕ ЕстьПравоВывод Тогда
		Элементы.ЗапросыПоставщикам.ТолькоПросмотр = Истина;
	
		МассивЭлементов = Новый Массив();
		
		// Закладка Сверка
		МассивЭлементов.Добавить(Элементы.ПечатьСразу);
		МассивЭлементов.Добавить(Элементы.ПечатьСразуЕще);
		МассивЭлементов.Добавить(Элементы.ОтправитьПоЭлектроннойПочте);
		МассивЭлементов.Добавить(Элементы.ОтправитьПоЭлектроннойПочтеЕще);
		МассивЭлементов.Добавить(Элементы.СохранитьКакЕще);
		МассивЭлементов.Добавить(Элементы.Актуализировать);
		
		// Закладка ЗапросыПоставщикам
		МассивЭлементов.Добавить(Элементы.ЗапроситьРеестры);
		МассивЭлементов.Добавить(Элементы.ЗапроситьРеестрыЕще);
		МассивЭлементов.Добавить(Элементы.УстановитьФлажкиЗапросыПоставщикам);
		МассивЭлементов.Добавить(Элементы.УстановитьФлажкиЗапросыПоставщикамЕще);
		МассивЭлементов.Добавить(Элементы.СнятьФлажкиЗапросыПоставщикам);
		МассивЭлементов.Добавить(Элементы.СнятьФлажкиЗапросыПоставщикамЕще);
		МассивЭлементов.Добавить(Элементы.ЗапросыПоставщикамОтправлять);
		
		// Закладка ОтветыПоставщиков
		МассивЭлементов.Добавить(Элементы.ЗагрузитьРеестры);
		МассивЭлементов.Добавить(Элементы.ЗагрузитьРеестрыЕще);
		МассивЭлементов.Добавить(Элементы.ПрочитатьПочтуОтветыПоставщиков);
		МассивЭлементов.Добавить(Элементы.ПрочитатьПочтуОтветыПоставщиковЕще);
		МассивЭлементов.Добавить(Элементы.УстановитьФлажкиОтветыПоставщиков);
		МассивЭлементов.Добавить(Элементы.УстановитьФлажкиОтветыПоставщиковЕще);
		МассивЭлементов.Добавить(Элементы.СнятьФлажкиОтветыПоставщиков);
		МассивЭлементов.Добавить(Элементы.СнятьФлажкиОтветыПоставщиковЕще);
		МассивЭлементов.Добавить(Элементы.ИгнорироватьОтветыПоставщиковЕще);
		МассивЭлементов.Добавить(Элементы.ЗагрузитьРеестрИзФайлаЕще);
		МассивЭлементов.Добавить(Элементы.СписокОтветыПоставщиковОтметка);
		
		// Закладка ЗапросыПокупателей
		МассивЭлементов.Добавить(Элементы.ОтправитьРеестры);
		МассивЭлементов.Добавить(Элементы.ОтправитьРеестрыЕще);
		МассивЭлементов.Добавить(Элементы.ПрочитатьПочтуЗапросыПокупателей);
		МассивЭлементов.Добавить(Элементы.ПрочитатьПочтуЗапросыПокупателейЕще);
		МассивЭлементов.Добавить(Элементы.ИгнорироватьЗапросыПокупателейЕще);
		МассивЭлементов.Добавить(Элементы.УстановитьФлажкиЗапросыПокупателей);
		МассивЭлементов.Добавить(Элементы.УстановитьФлажкиЗапросыПокупателейЕще);
		МассивЭлементов.Добавить(Элементы.СнятьФлажкиЗапросыПокупателей);
		МассивЭлементов.Добавить(Элементы.СнятьФлажкиЗапросыПокупателейЕще);
		МассивЭлементов.Добавить(Элементы.СписокЗапросыПокупателейОтметка);
		
		// Закладка Настройка - отключаем целиком, т.к. все элементы на ней требуются при наличии прав.
		МассивЭлементов.Добавить(Элементы.ГиперссылкаНастройки);
		
		Для Каждого Элемент Из МассивЭлементов Цикл
			Элемент.Видимость = Ложь;
		КонецЦикла;
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Отчет.СверкаДанныхУчетаНДС",
		"Форма",
		НСтр("ru='Новости: Сверка данных учета НДС'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	МассивИдентификаторовЗаданий = Новый Массив;
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		МассивИдентификаторовЗаданий.Добавить(ИдентификаторЗадания);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияРаботаСПочтой) Тогда
		МассивИдентификаторовЗаданий.Добавить(ИдентификаторЗаданияРаботаСПочтой);
	КонецЕсли;
	
	Если МассивИдентификаторовЗаданий.Количество() > 0 Тогда
		ОтменитьВыполнениеЗаданий(МассивИдентификаторовЗаданий);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_РеестрСчетовФактурПоставщика" 
		И Параметр.РежимСверки
		И Параметр.ИдентификаторВладельца = Строка(УникальныйИдентификатор)
		И Параметр.Контрагент = Объект.Контрагент
		И Параметр.Организация = Объект.Организация
		И Параметр.НалоговыйПериод = Объект.НалоговыйПериод Тогда
		ПодключитьОбработчикОжидания("Подключаемый_СформироватьОтчет", 0.5, Истина);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)

	// При работе с почтой необходимо указание учетной записи.
	Если НазначениеПроверкиЗаполнения = "ЗапросРеестров"
		ИЛИ НазначениеПроверкиЗаполнения = "ЧтениеПочты"
		ИЛИ НазначениеПроверкиЗаполнения = "ОтправкаРеестров" Тогда
		
		Если ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
		
			РеквизитыУчетнойЗаписи = РеквизитыУчетнойЗаписи(Объект.УчетнаяЗапись);
			
			ТекстСообщения = "";
			Если НазначениеПроверкиЗаполнения = "ЗапросРеестров"
				ИЛИ НазначениеПроверкиЗаполнения = "ОтправкаРеестров" Тогда
				
				// Учетная запись должна использоваться для отправки
				Если НЕ РеквизитыУчетнойЗаписи.ИспользоватьДляОтправки Тогда
					ТекстСообщения = СтрШаблон(
						НСтр("ru = 'В настройках учетной записи ""%1"" не указано, что она может использоваться для отправки почтовых сообщений'"),
						Объект.УчетнаяЗапись);
				КонецЕсли;
				
			Иначе
			
				// Учетная запись должна использоваться для получения
				Если НЕ РеквизитыУчетнойЗаписи.ИспользоватьДляПолучения Тогда
					ТекстСообщения = СтрШаблон(
						НСтр("ru = 'В настройках учетной записи ""%1"" не указано, что она может использоваться для получения почтовых сообщений'"),
						Объект.УчетнаяЗапись);
				КонецЕсли;

			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "УчетнаяЗапись", , Отказ);
			КонецЕсли;
		
		Иначе
			ТекстСообщения = СтрШаблон(НСтр("ru = '%1 %2'"),
				ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения( , ,НСтр("ru = 'Учетная запись'")),
				НСтр("ru = 'в настройках'"));
				
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "УчетнаяЗапись", , Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если НазначениеПроверкиЗаполнения = "ЗапросРеестров" Тогда

		// Проверяем заполнение электронной почты в ТЧ ЗапросыПоставщикам
		Для Каждого СтрокаТаблицы Из Объект.ЗапросыПоставщикам Цикл
		
			Если НЕ СтрокаТаблицы.Отправлять Тогда
				Продолжить;
			КонецЕсли;

			НомерСтроки = Объект.ЗапросыПоставщикам.Индекс(СтрокаТаблицы) + 1;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.ЭлектроннаяПочта) Тогда
				ПутьКСтрокеТабличнойЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти(
					"ЗапросыПоставщикам", НомерСтроки, "ЭлектроннаяПочта");

				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
					"Колонка", "Заполнение", НСтр("ru = 'Электронная почта'"), НомерСтроки, НСтр("ru = 'Запросы поставщикам'"));

				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ПутьКСтрокеТабличнойЧасти, "Объект", Отказ);
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	// Не загружаем из настроек те значения, которые переданы в параметрах формы.
	Если ЗначениеЗаполнено(Параметры.Организация) Тогда
		Настройки.Удалить("Объект.Организация");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.НалоговыйПериод) Тогда
		Настройки.Удалить("Объект.НалоговыйПериод");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Контрагент) Тогда
		Настройки.Удалить("Объект.Контрагент");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	// В настройках сохраняются значения выбранных отборов, 
	// обновляем списки по ним.

	УстановитьОтборОрганизация();

	ИзменитьПериод(Объект.НалоговыйПериод);

	ПереключитьСтраницуРазделаОтветыПоставщиков(ЭтотОбъект);

	УстановитьОтборЗапросыПоставщикам();

	УстановитьОтборЗапросыПокупателей();

	УстановитьВидимостьГлубиныПоиска();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГиперссылкаСтраницаНажатие(Элемент)
	
	ВыделитьТекущийРаздел(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаЗапросыПоставщикамНажатие(Элемент)
	
	ОтобразитьРазделЗапросыПоставщикамНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаОтветыПоставщиковНажатие(Элемент)
	
	ОтобразитьРазделОтветыПоставщиковНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаЗапросыПокупателейНажатие(Элемент)
	
	ОтобразитьРазделЗапросыПокупателейНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода", 
		НачалоКвартала(Объект.НалоговыйПериод), КонецКвартала(Объект.НалоговыйПериод));
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаКвартал", ПараметрыВыбора, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИзменитьПериод(ВыбранноеЗначение.НачалоПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииЗапросыПоставщикамОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИзменитьПериод(ВыбранноеЗначение.НачалоПериода);

	ПодключитьОбработчикОжидания("Подключаемый_НачатьЗаполнениеПоставщиков", 0.5, Истина);	

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;

	ПриИзмененииОрганизацииНаСервере();

КонецПроцедуры

&НаКлиенте
Процедура ПолеОрганизацияЗапросыПоставщикамПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииОрганизацииНаСервере();
	
	ПодключитьОбработчикОжидания("Подключаемый_НачатьЗаполнениеПоставщиков", 0.5, Истина);

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)

	УстановитьСостояниеПоляТабличногоДокументаНеАктуальность(Элементы.Результат);

КонецПроцедуры

&НаКлиенте
Процедура ОтборЗапросыПоставщикамПриИзменении(Элемент)

	УстановитьОтборЗапросыПоставщикам();	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОтветыПоставщикамПриИзменении(Элемент)

	ПереключитьСтраницуРазделаОтветыПоставщиков(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ОтборЗапросыПокупателейПриИзменении(Элемент)

	УстановитьОтборЗапросыПокупателей();	
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПриНеобходимостиАктуализацииНажатие(Элемент)
	
	Элементы.ТребуетсяАктуализация.Видимость = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийСтраницыСверка

&НаКлиенте
Процедура ПоказатьВсеРезультатыПриИзменении(Элемент)
	
	ПоказатьРезультатСверки();

КонецПроцедуры

&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)
	
	Если ТипЗнч(Результат.ВыделенныеОбласти) = Тип("ВыделенныеОбластиТабличногоДокумента") Тогда
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
		ПодключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый", ИнтервалОжидания, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапросыПоставщикам

&НаКлиенте
Процедура ЗапросыПоставщикамВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ЗапросыПоставщикамЭлектроннаяПочта" Тогда
		// Электронную почту можно редактировать.
		Возврат;
	КонецЕсли;

	ТекущиеДанные = Элементы.ЗапросыПоставщикам.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Контрагент) Тогда
		ПоказатьЗначение(, ТекущиеДанные.Контрагент);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗапросыПоставщикамПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ЗапросыПоставщикамОтправлятьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЗапросыПоставщикам.ТекущиеДанные;
	Если ТекущиеДанные.Отправлять Тогда

		ТекстПредупреждения = "";

		Если ТекущиеДанные.СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыРеестровСчетовФактур.ОжидаетЗагрузки") Тогда
			ТекущиеДанные.Отправлять = Ложь;
			
			ТекстПредупреждения = СтрШаблон(
				НСтр("ru = 'Реестр счетов-фактур от %1 уже получен и ожидает загрузки, повторная отправка запроса не требуется'"),
				ТекущиеДанные.Контрагент);
			
		ИначеЕсли НЕ ПустаяСтрока(ТекущиеДанные.ОписаниеОшибки) Тогда
			ТекущиеДанные.Отправлять = Ложь;
			
			ТекстПредупреждения = СтрШаблон(
				НСтр("ru = 'Обнаружены ошибки в данных %1: %2'"), ТекущиеДанные.Контрагент, ТекущиеДанные.ОписаниеОшибки);

		КонецЕсли;

		Если НЕ ПустаяСтрока(ТекстПредупреждения) Тогда
			ПоказатьПредупреждение(, ТекстПредупреждения);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтветыПоставщиков

&НаКлиенте
Процедура ТекстЕстьОшибкиОтветыПоставщиковОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОбработатьНажатиеНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыОтветыПоставщиков

&НаКлиенте
Процедура СписокОтветыПоставщиковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// Вместо стандартной формы записи регистра открываем форму контрагента либо меняем флажок в колонке Отметка.
	СтандартнаяОбработка = Ложь;

	Если Поле.Имя = "СписокОтветыПоставщиковОтметка" Тогда
	
		ИзменитьОтметкуЗаписиСтатусыЗапросовРеестровСчетовФактур(ВыбраннаяСтрока, "СписокОтветыПоставщиков");
	
	Иначе
		
		ВыбранныйКонтрагент = КонтрагентКлючаЗаписи(ВыбраннаяСтрока);
		ПоказатьЗначение(, ВыбранныйКонтрагент);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокОтветыПоставщиковПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапросыПокупателей

&НаКлиенте
Процедура ТекстЕстьОшибкиЗапросыПокупателейОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ОбработатьНажатиеНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗапросыПокупателей

&НаКлиенте
Процедура СписокЗапросыПокупателейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	// Вместо стандартной формы записи регистра открываем форму контрагента либо меняем флажок в колонке Отметка.
	СтандартнаяОбработка = Ложь;
	
	Если Поле.Имя = "СписокЗапросыПокупателейОтметка" Тогда
	
		ИзменитьОтметкуЗаписиСтатусыЗапросовРеестровСчетовФактур(ВыбраннаяСтрока, "СписокЗапросыПокупателей");
	
	Иначе

		ВыбранныйКонтрагент = КонтрагентКлючаЗаписи(ВыбраннаяСтрока);
		ПоказатьЗначение(, ВыбранныйКонтрагент);
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокЗапросыПокупателейПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовСтраницыНастройка

&НаКлиенте
Процедура УчетнаяЗаписьПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыУчетнойЗаписи = РеквизитыУчетнойЗаписи(Объект.УчетнаяЗапись);
	
	Если НЕ РеквизитыУчетнойЗаписи.ИспользоватьДляОтправки
		ИЛИ НЕ РеквизитыУчетнойЗаписи.ИспользоватьДляПолучения Тогда
		Объект.УчетнаяЗапись = Неопределено;
		ТекстСообщения = НСтр("ru = 'Необходимо указать учетную запись, которая может быть использована для отправки и для получения писем.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	УстановитьВидимостьГлубиныПоиска(РеквизитыУчетнойЗаписи);
	
	// Установим признак необходимости чтения почты при первом переключении на соответствующую закладку.
	АвтоматическиЗапускатьЧтениеПочты = Истина;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочте(Команда)
	
	ОтправкаПочтовыхСообщенийКлиент.ОтправитьОтчет(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВРазделЗапроситьРеестры(Команда)
	
	ОтобразитьРазделЗапросыПоставщикамНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиЗапросыПоставщикам(Команда)

	ИзменитьФлажкиЗапросыПоставщикам(Истина);

КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажкиЗапросыПоставщикам(Команда)

	ИзменитьФлажкиЗапросыПоставщикам(Ложь);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиОтветыПоставщиков(Команда)

	НовыеЗначения = Новый Структура();
	НовыеЗначения.Вставить("Отметка", Истина);

	ИзменитьЗаписиРегистраСтатусыЗапросовРеестровНаСервере("СписокОтветыПоставщиков", НовыеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажкиОтветыПоставщиков(Команда)

	НовыеЗначения = Новый Структура();
	НовыеЗначения.Вставить("Отметка", Ложь);

	ИзменитьЗаписиРегистраСтатусыЗапросовРеестровНаСервере("СписокОтветыПоставщиков", НовыеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажкиЗапросыПокупателей(Команда)

	НовыеЗначения = Новый Структура();
	НовыеЗначения.Вставить("Отметка", Истина);

	ИзменитьЗаписиРегистраСтатусыЗапросовРеестровНаСервере("СписокЗапросыПокупателей", НовыеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажкиЗапросыПокупателей(Команда)

	НовыеЗначения = Новый Структура();
	НовыеЗначения.Вставить("Отметка", Ложь);

	ИзменитьЗаписиРегистраСтатусыЗапросовРеестровНаСервере("СписокЗапросыПокупателей", НовыеЗначения);

КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьРеестры(Команда)

	НачатьЗапросРеестровНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗапросыПоставщикам(Команда)
	
	НачатьЗаполнениеПоставщиковНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьПочту(Команда)
	
	НачатьЧтениеПочтыНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРеестры(Команда)

	Отбор = Новый Структура();
	Отбор.Вставить("Отметка", Истина);

	НаличиеЗаписей = ПроверитьНаличиеЗаписейРегистраСтатусыЗапросов(
		"СписокОтветыПоставщиков", Объект.Организация, Объект.НалоговыйПериод, Отбор);
		
	Если НаличиеЗаписей = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Необходимо отметить поставщиков, от которых требуется загрузить реестры.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;

	НачатьЗагрузкаРеестровНаКлиенте();	
	
КонецПроцедуры

&НаКлиенте
Процедура ИгнорироватьОтветыПоставщиков(Команда)
	
	ИмяДинамическогоСписка = "СписокОтветыПоставщиков";	

	НовыеЗначения = Новый Структура();
	НовыеЗначения.Вставить("СтатусЗапроса", ПредопределенноеЗначение("Перечисление.СтатусыРеестровСчетовФактур.Игнорируется"));
	НовыеЗначения.Вставить("Отметка", Ложь);
	
	Отбор = Новый Структура();
	Отбор.Вставить("Отметка", Истина);
	
	КоличествоЗаписей = КоличествоЗаписейРегистраСтатусыЗапросов(
		ИмяДинамическогоСписка, Объект.Организация, Объект.НалоговыйПериод, Отбор);
	
	Если КоличествоЗаписей = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Необходимо отметить поставщиков, реестры от которых требуется игнорировать.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = СтрШаблон(НСтр("ru = 'Игнорировать %1 поставщиков?'"),
		СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоЗаписей, НСтр("ru = 'реестр, реестра, реестров'")));
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИмяДинамическогоСписка", ИмяДинамическогоСписка);
	ДополнительныеПараметры.Вставить("НовыеЗначения", НовыеЗначения);
	ДополнительныеПараметры.Вставить("Отбор", Отбор);
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ИгнорироватьОтветыПоставщиковЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

КонецПроцедуры

&НаКлиенте
Процедура ИгнорироватьОтветыПоставщиковЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ИгнорироватьОтветыПоставщиковНаКлиенте(
			ДополнительныеПараметры.ИмяДинамическогоСписка,
			ДополнительныеПараметры.НовыеЗначения,
			ДополнительныеПараметры.Отбор);
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРеестрИзФайла(Команда)

	ОткрытьФормуЗагрузкиРеестраИзФайла();

КонецПроцедуры

&НаКлиенте
Процедура Сверить(Команда)
	
	ТекущиеДанные = Элементы.СписокРеестрСчетовФактурПоставщика.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	
	// Отображаем закладку с отчетом и запускаем его формирование.
	Объект.Контрагент = ТекущиеДанные.Контрагент;
	ВыделитьТекущийРаздел("ГиперссылкаСверка");
	ПодключитьОбработчикОжидания("Подключаемый_СформироватьОтчет", 0.5, Истина);

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьРеестры(Команда)

	Отбор = Новый Структура();
	Отбор.Вставить("Отметка", Истина);

	НаличиеЗаписей = ПроверитьНаличиеЗаписейРегистраСтатусыЗапросов(
		"СписокЗапросыПокупателей", Объект.Организация, Объект.НалоговыйПериод, Отбор);
	
	Если НаличиеЗаписей = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Необходимо отметить покупателей для отправки реестров.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	НачатьОтправкаРеестровНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ИгнорироватьЗапросыПокупателей(Команда)
	
	ИмяДинамическогоСписка = "СписокЗапросыПокупателей";	

	НовыеЗначения = Новый Структура();
	НовыеЗначения.Вставить("СтатусЗапроса", ПредопределенноеЗначение("Перечисление.СтатусыРеестровСчетовФактур.Игнорируется"));
	НовыеЗначения.Вставить("Отметка", Ложь);
	
	Отбор = Новый Структура();
	Отбор.Вставить("Отметка", Истина);
	
	КоличествоЗаписей = КоличествоЗаписейРегистраСтатусыЗапросов(
		ИмяДинамическогоСписка, Объект.Организация, Объект.НалоговыйПериод, Отбор);
	
	Если КоличествоЗаписей = 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'Необходимо отметить покупателей, запросы которых требуется игнорировать.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Если КоличествоЗаписей = 1 Тогда
		ТекстВопроса = НСтр("ru = 'Игнорировать запрос покупателя?'");
	Иначе
		ТекстВопроса = СтрШаблон(НСтр("ru = 'Игнорировать %1 покупателей?'"),
			СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоЗаписей, НСтр("ru = 'запрос, запроса, запросов'")));
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИмяДинамическогоСписка", ИмяДинамическогоСписка);
	ДополнительныеПараметры.Вставить("НовыеЗначения", НовыеЗначения);
	ДополнительныеПараметры.Вставить("Отбор", Отбор);
		
	ОписаниеОповещения = Новый ОписаниеОповещения("ИгнорироватьЗапросыПокупателейЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

КонецПроцедуры

&НаКлиенте
Процедура ИгнорироватьЗапросыПокупателейЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ИгнорироватьЗапросыПокупателейНаКлиенте(
			ДополнительныеПараметры.ИмяДинамическогоСписка,
			ДополнительныеПараметры.НовыеЗначения,
			ДополнительныеПараметры.Отбор);
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УменьшитьПериод(Команда)
	
	ИзменитьПериод(НачалоКвартала(Объект.НалоговыйПериод - 1));
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшитьПериодЗапросыПоставщикам(Команда)

	ИзменитьПериод(НачалоКвартала(Объект.НалоговыйПериод - 1));
	
	ПодключитьОбработчикОжидания("Подключаемый_НачатьЗаполнениеПоставщиков", 0.5, Истина);

КонецПроцедуры

&НаКлиенте
Процедура УвеличитьПериод(Команда)
	
	ИзменитьПериод(КонецКвартала(Объект.НалоговыйПериод) + 1);
	
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьПериодЗапросыПоставщикам(Команда)

	ИзменитьПериод(КонецКвартала(Объект.НалоговыйПериод) + 1);
	
	ПодключитьОбработчикОжидания("Подключаемый_НачатьЗаполнениеПоставщиков", 0.5, Истина);

КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет(Команда)

	СформироватьОтчетНаКлиенте();	
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаЗаполненияПоставщиков(Команда)
	
	ОтменитьЗаданиеЗаполнениеПоставщиков();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаЗапросРеестров(Команда)
	
	ОтменитьЗаданиеЗапросРеестров();

КонецПроцедуры

&НаКлиенте
Процедура ОтменаЧтениеПочты(Команда)
	
	ОтменитьЗаданиеЧтениеПочты();

КонецПроцедуры

&НаКлиенте
Процедура ОтменаЗагрузкаРеестров(Команда)
	
	ОтменитьЗаданиеЗагрузкаРеестров();

КонецПроцедуры

&НаКлиенте
Процедура ОтменаОтправкаРеестров(Команда)
	
	ОтменитьЗаданиеОтправкаРеестров();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВнешнийВидФормы

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТекстЗаголовка(Форма)
	
	Объект = Форма.Объект;
	
	Форма.Заголовок = СтрШаблон(НСтр("ru='Сверка данных учета НДС%1'"),
		БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
			НачалоКвартала(Объект.НалоговыйПериод), 
			КонецКвартала(Объект.НалоговыйПериод)));
	
КонецПроцедуры

&НаСервере
Процедура ВыделитьТекущийРаздел(Знач ИмяГиперссылкиНовогоРаздела)
	
	ГиперссылкаНовогоРаздела = Элементы[ИмяГиперссылкиНовогоРаздела];

	МассивГиперссылокРазделов = Новый Массив;
	МассивГиперссылокРазделов.Добавить(Элементы.ГиперссылкаСверка);
	МассивГиперссылокРазделов.Добавить(Элементы.ГиперссылкаЗапросыПоставщикам);
	МассивГиперссылокРазделов.Добавить(Элементы.ГиперссылкаОтветыПоставщиков);
	МассивГиперссылокРазделов.Добавить(Элементы.ГиперссылкаЗапросыПокупателей);
	МассивГиперссылокРазделов.Добавить(Элементы.ГиперссылкаНастройки);
	
	// Делаем текущий раздел желтым
	Для каждого ГиперссылкаРаздела Из МассивГиперссылокРазделов Цикл
		
		ОформитьКнопку(ГиперссылкаРаздела, ГиперссылкаНовогоРаздела);
		
	КонецЦикла;

	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы["Страница" + СтрЗаменить(ИмяГиперссылкиНовогоРаздела, "Гиперссылка", "")];
	
КонецПроцедуры

&НаСервере
Процедура ОформитьКнопку(ГиперссылкаРаздела, ГиперссылкаНовогоРаздела)
	
	АктивнаяКнопка = (ГиперссылкаРаздела = ГиперссылкаНовогоРаздела);
	
	ГиперссылкаРаздела.ЦветФона    = ?(АктивнаяКнопка, ЦветАктивнойКнопки, ЦветНеактивнойКнопки);
	ГиперссылкаРаздела.Гиперссылка = ?(АктивнаяКнопка, Ложь, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПериод(НовыйПериод)

	// Очищаем данные, относящиеся к предыдущему периоду.
	Объект.ЗапросыПоставщикам.Очистить();
	
	УстановитьСостояниеПоляТабличногоДокументаНеАктуальность(Элементы.Результат);

	Объект.НалоговыйПериод = НовыйПериод;

	ПредставлениеПериодаРегистрации = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
		НачалоКвартала(Объект.НалоговыйПериод),
		КонецКвартала(Объект.НалоговыйПериод),
		Истина);
	
	ОбновитьТекстЗаголовка(ЭтотОбъект);
	
	УстановитьОтборНалоговыйПериод();
	
КонецПроцедуры 

&НаСервере
Процедура ПриИзмененииОрганизацииНаСервере()

	// Очищаем данные, относящиеся к предыдущей организации.
	Объект.ЗапросыПоставщикам.Очистить();
	
	УстановитьСостояниеПоляТабличногоДокументаНеАктуальность(Элементы.Результат);
	
	УстановитьОтборОрганизация();

КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьРазделОтветыПоставщиковНаКлиенте()
	
	ОтобразитьРазделОтветыПоставщиковНаСервере();

	Если АвтоматическиЗапускатьЧтениеПочты
		И ЕстьПравоВывод
		И ЗначениеЗаполнено(Объект.Организация)
		И ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_НачатьЧтениеПочты", 0.5, Истина);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОтобразитьРазделОтветыПоставщиковНаСервере()
	
	ВыделитьТекущийРаздел("ГиперссылкаОтветыПоставщиков");

	Если АвтоматическиЗапускатьЧтениеПочты
		И ЕстьПравоВывод
		И ЗначениеЗаполнено(Объект.Организация)
		И ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
		// Отображаем сразу элементы ожидания при чтении почты.
		ОтобразитьЭлементыОжиданиеЧтениеПочты();
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПереключитьСтраницуРазделаОтветыПоставщиков(Форма)

	Элементы = Форма.Элементы;
	
	Если Форма.ОтборОтветыПоставщиков = "Незагруженные" Тогда
		Элементы.СтраницыСпискиОтветыПоставщиков.ТекущаяСтраница = Элементы.СтраницаНезагруженныеОтветыПоставщиков;
	Иначе
		Элементы.СтраницыСпискиОтветыПоставщиков.ТекущаяСтраница = Элементы.СтраницаЗагруженныеОтветыПоставщиков;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьРазделЗапросыПокупателейНаКлиенте()
	
	ОтобразитьРазделЗапросыПокупателейНаСервере();
	
	Если АвтоматическиЗапускатьЧтениеПочты
		И ЕстьПравоВывод 
		И ЗначениеЗаполнено(Объект.Организация)
		И ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_НачатьЧтениеПочты", 0.5, Истина);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОтобразитьРазделЗапросыПокупателейНаСервере()
	
	ВыделитьТекущийРаздел("ГиперссылкаЗапросыПокупателей");
	
	Если АвтоматическиЗапускатьЧтениеПочты
		И ЕстьПравоВывод 
		И ЗначениеЗаполнено(Объект.Организация)
		И ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
		// Отображаем сразу элементы ожидания при чтении почты.
		ОтобразитьЭлементыОжиданиеЧтениеПочты();
	КонецЕсли;

КонецПроцедуры

// Блокирует либо разблокирует поля организации и налогового периода
// в шапке формы при старте и завершении фоновых заданий.
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементовШапки(Форма, Доступно)

	Элементы = Форма.Элементы;
	
	ТолькоПросмотр = НЕ Доступно;

	// Закладка Сверка
	Элементы.УменьшитьПериод.Доступность 					= Доступно;
	Элементы.ПредставлениеПериодаРегистрации.ТолькоПросмотр	= ТолькоПросмотр;
	Элементы.УвеличитьПериод.Доступность					= Доступно;
	Элементы.ПолеОрганизация.ТолькоПросмотр					= ТолькоПросмотр;
	
	// Закладка ЗапросыПоставщикам
	Элементы.УменьшитьПериодЗапросыПоставщикам.Доступность						= Доступно;
	Элементы.ПредставлениеПериодаРегистрацииЗапросыПоставщикам.ТолькоПросмотр	= ТолькоПросмотр;
	Элементы.УвеличитьПериодЗапросыПоставщикам.Доступность						= Доступно;
	Элементы.ПолеОрганизацияЗапросыПоставщикам.ТолькоПросмотр 					= ТолькоПросмотр;
	
	// Закладка ОтветыПоставщиков
	Элементы.УменьшитьПериодОтветыПоставщиков.Доступность					= Доступно;
	Элементы.ПредставлениеПериодаРегистрацииОтветыПоставщиков.ТолькоПросмотр= ТолькоПросмотр;
	Элементы.УвеличитьПериодОтветыПоставщиков.Доступность					= Доступно;
	Элементы.ПолеОрганизацияОтветыПоставщиков.ТолькоПросмотр 				= ТолькоПросмотр;
	
	// Закладка ЗапросыПокупателей
	Элементы.ПолеОрганизацияЗапросыПокупателей.ТолькоПросмотр	= ТолькоПросмотр;

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьГлубиныПоиска(РеквизитыУчетнойЗаписи = Неопределено)
	
	Если РеквизитыУчетнойЗаписи = Неопределено Тогда
		РеквизитыУчетнойЗаписи = РеквизитыУчетнойЗаписи(Объект.УчетнаяЗапись);
	КонецЕсли;
	
	Элементы.ГлубинаПоиска.Видимость = ВРег(РеквизитыУчетнойЗаписи.ПротоколВходящейПочты) = "IMAP";

КонецПроцедуры

#КонецОбласти

#Область ОбработкаСписков

&НаСервере
Процедура УстановитьОтборНалоговыйПериод()

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокОтветыПоставщиков,
		"НалоговыйПериод",
		Объект.НалоговыйПериод);

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокРеестрСчетовФактурПоставщика,
		"НалоговыйПериод",
		Объект.НалоговыйПериод);

КонецПроцедуры

&НаСервере
Процедура УстановитьОтборОрганизация()

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокОтветыПоставщиков,
		"Организация",
		Объект.Организация);

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокРеестрСчетовФактурПоставщика,
		"Организация",
		Объект.Организация);

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокЗапросыПокупателей,
		"Организация",
		Объект.Организация);

КонецПроцедуры

&НаСервере
Процедура УстановитьОтборЗапросыПоставщикам()

	ЗначениеОтбора = 0;
	
	Если ОтборЗапросыПоставщикам = "ТребующиеВнимания" Тогда
		ЗначениеОтбора = 1;

	ИначеЕсли ОтборЗапросыПоставщикам = "Запрошенные" Тогда
		ЗначениеОтбора = 2;

	КонецЕсли;	

	Если ЗначениеОтбора <> 0 Тогда
		ОтборСтрок = Новый Структура;
		ОтборСтрок.Вставить("ОтборЗапросаПоставщикам", ЗначениеОтбора);
		Элементы.ЗапросыПоставщикам.ОтборСтрок = Новый ФиксированнаяСтруктура(ОтборСтрок);
	Иначе
		Элементы.ЗапросыПоставщикам.ОтборСтрок = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьОтборОтветыПоставщиков()

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокОтветыПоставщиков,
		"ТипЗапроса",
		Перечисления.ТипыЗапросовРеестровСчетовФактур.ЗапросПоставщику);

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокОтветыПоставщиков,
		"СтатусЗапроса",
		Перечисления.СтатусыРеестровСчетовФактур.ОжидаетЗагрузки);

КонецПроцедуры

&НаСервере
Процедура УстановитьОтборЗапросыПокупателей()

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		СписокЗапросыПокупателей,
		"ТипЗапроса",
		Перечисления.ТипыЗапросовРеестровСчетовФактур.ЗапросПокупателя);
		
	Если ОтборЗапросыПокупателей = "Неотвеченные" Тогда
		ВидимостьКнопок = Истина;
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			СписокЗапросыПокупателей,
			"СтатусЗапроса",
			Перечисления.СтатусыРеестровСчетовФактур.НеОтвечено);
	Иначе
		ВидимостьКнопок = Ложь;
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбораДинамическогоСписка(
			СписокЗапросыПокупателей,
			"СтатусЗапроса");
			
	КонецЕсли;

	// Видимость кнопок на командной панели зависит от режима отображения списка.
	Элементы.ИгнорироватьЗапросыПокупателейЕще.Видимость = ВидимостьКнопок И ЕстьПравоВывод;
	
	Элементы.УстановитьФлажкиЗапросыПокупателей.Видимость 	 = ВидимостьКнопок И ЕстьПравоВывод;
	Элементы.УстановитьФлажкиЗапросыПокупателейЕще.Видимость = ВидимостьКнопок И ЕстьПравоВывод;
	
	Элементы.СнятьФлажкиЗапросыПокупателей.Видимость 	= ВидимостьКнопок И ЕстьПравоВывод;
	Элементы.СнятьФлажкиЗапросыПокупателейЕще.Видимость = ВидимостьКнопок И ЕстьПравоВывод;

КонецПроцедуры

&НаСервере
Процедура ИзменитьФлажкиЗапросыПоставщикам(Знач НовоеЗначение)

	Для Каждого СтрокаТаблицы Из Объект.ЗапросыПоставщикам Цикл
	
		// Для ожидающих загрузки строк повторно не отправляем запросы.
		Если НовоеЗначение Тогда
			Если СтрокаТаблицы.СтатусЗапроса = Перечисления.СтатусыРеестровСчетовФактур.ОжидаетЗагрузки Тогда
				Продолжить;
			ИначеЕсли НЕ ПустаяСтрока(СтрокаТаблицы.ОписаниеОшибки) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаТаблицы.Отправлять = НовоеЗначение;
	
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодготовитьЗапросКРегиструСтатусыЗапросов(Знач ИмяДинамическогоСписка, Знач Организация, Знач НалоговыйПериод, Знач Отбор = Неопределено)

	МассивСтатусов = Новый Массив;

	Если ИмяДинамическогоСписка = "СписокОтветыПоставщиков" Тогда
		ТипЗапроса 		= Перечисления.ТипыЗапросовРеестровСчетовФактур.ЗапросПоставщику;
		МассивСтатусов.Добавить(Перечисления.СтатусыРеестровСчетовФактур.ОжидаетЗагрузки);
		ЕстьОтборПоНалоговомуПериоду = Истина;
	Иначе
		ТипЗапроса 		= Перечисления.ТипыЗапросовРеестровСчетовФактур.ЗапросПокупателя;
		МассивСтатусов.Добавить(Перечисления.СтатусыРеестровСчетовФактур.НеОтвечено);
		МассивСтатусов.Добавить(Перечисления.СтатусыРеестровСчетовФактур.Игнорируется);
		ЕстьОтборПоНалоговомуПериоду = Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("НалоговыйПериод", 	НалоговыйПериод);
	Запрос.УстановитьПараметр("ТипЗапроса", 		ТипЗапроса);
	Запрос.УстановитьПараметр("МассивСтатусов", 	МассивСтатусов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыЗапросовРеестровСчетовФактур.Контрагент,
	|	СтатусыЗапросовРеестровСчетовФактур.ИдентификаторЗапроса
	|ИЗ
	|	РегистрСведений.СтатусыЗапросовРеестровСчетовФактур КАК СтатусыЗапросовРеестровСчетовФактур
	|ГДЕ
	|	СтатусыЗапросовРеестровСчетовФактур.Организация = &Организация
	|	И СтатусыЗапросовРеестровСчетовФактур.ТипЗапроса = &ТипЗапроса
	|	И СтатусыЗапросовРеестровСчетовФактур.СтатусЗапроса В (&МассивСтатусов)";

	Если ЕстьОтборПоНалоговомуПериоду Тогда
	Запрос.Текст = Запрос.Текст + "
	|	И СтатусыЗапросовРеестровСчетовФактур.НалоговыйПериод = &НалоговыйПериод";
	КонецЕсли;
	
	Если ТипЗнч(Отбор) = Тип("Структура") Тогда
		НомерПараметра = 0;
		Для Каждого КлючИЗначение Из Отбор Цикл
			НомерПараметра 	= НомерПараметра + 1;
			ИмяПараметра 	= КлючИЗначение.Ключ + Формат(НомерПараметра, "ЧГ=");
			Запрос.Текст 	= Запрос.Текст + "
			|	И СтатусыЗапросовРеестровСчетовФактур." + КлючИЗначение.Ключ + " = &" + ИмяПараметра;
			Запрос.УстановитьПараметр(ИмяПараметра, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Запрос;

КонецФункции

&НаСервереБезКонтекста
Функция КоличествоЗаписейРегистраСтатусыЗапросов(Знач ИмяДинамическогоСписка, Знач Организация, Знач НалоговыйПериод, Знач Отбор = Неопределено)

	Запрос = ПодготовитьЗапросКРегиструСтатусыЗапросов(ИмяДинамическогоСписка, Организация, НалоговыйПериод, Отбор);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК КоличествоЗаписей
	|ИЗ
	|	(" + Запрос.Текст + ") КАК Данные";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.КоличествоЗаписей;
	Иначе
		Результат = 0;
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьНаличиеЗаписейРегистраСтатусыЗапросов(Знач ИмяДинамическогоСписка, Знач Организация, Знач НалоговыйПериод, Знач Отбор = Неопределено)

	Запрос = ПодготовитьЗапросКРегиструСтатусыЗапросов(ИмяДинамическогоСписка, Организация, НалоговыйПериод, Отбор);
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВЫБРАТЬ", "ВЫБРАТЬ ПЕРВЫЕ 1");
	
	Выборка = Запрос.Выполнить().Выбрать();

	Возврат Выборка.Количество();

КонецФункции

// Изменяет значения в записях регистра сведений СтатусыЗапросовРеестровСчетовФактур
// значения ресурсов на новые значения.
//
// Параметры:
//	ИмяДинамическогоСписка - Строка - Имя реквизита динамического списка на форме.
//	НовыеЗначения - Структура - Ключ структуры содержит имя ресурса регистра, значение - новое значение.
//
// Возвращаемое значение:
//	Число - количество измененных записей.
//
&НаСервере
Функция ИзменитьЗаписиРегистраСтатусыЗапросовРеестровНаСервере(Знач ИмяДинамическогоСписка, Знач НовыеЗначения, Знач Отбор = Неопределено)

	КоличествоЗаписей = 0;

	Запрос = ПодготовитьЗапросКРегиструСтатусыЗапросов(ИмяДинамическогоСписка, Объект.Организация, Объект.НалоговыйПериод, Отбор);

	Выборка = Запрос.Выполнить().Выбрать();
	
	МенеджерЗаписи = РегистрыСведений.СтатусыЗапросовРеестровСчетовФактур.СоздатьМенеджерЗаписи();
	
	Пока Выборка.Следующий() Цикл
	
		МенеджерЗаписи.Организация 	= Объект.Организация;
		МенеджерЗаписи.Контрагент 	= Выборка.Контрагент;
		МенеджерЗаписи.НалоговыйПериод 		= Объект.НалоговыйПериод;
		МенеджерЗаписи.ИдентификаторЗапроса = Выборка.ИдентификаторЗапроса;
		
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
		
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, НовыеЗначения);
			
			МенеджерЗаписи.Записать(Истина);
					
			КоличествоЗаписей = КоличествоЗаписей + 1;
			
		КонецЕсли;
	
	КонецЦикла;
	
	// Обновляем содержимое списка
	Элементы[ИмяДинамическогоСписка].Обновить();
	
	Возврат КоличествоЗаписей;
	
КонецФункции

&НаСервере
Процедура ИзменитьОтметкуЗаписиСтатусыЗапросовРеестровСчетовФактур(Знач КлючЗаписи, Знач ИмяЭлементаСпискаФормы)

	МенеджерЗаписи = РегистрыСведений.СтатусыЗапросовРеестровСчетовФактур.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Организация 			= КлючЗаписи.Организация;
	МенеджерЗаписи.Контрагент 			= КлючЗаписи.Контрагент;
	МенеджерЗаписи.НалоговыйПериод 		= КлючЗаписи.НалоговыйПериод;
	МенеджерЗаписи.ИдентификаторЗапроса = КлючЗаписи.ИдентификаторЗапроса;
	
	МенеджерЗаписи.Прочитать();
	
	МенеджерЗаписи.Отметка = НЕ МенеджерЗаписи.Отметка;
	
	МенеджерЗаписи.Записать(Истина);

	Элементы[ИмяЭлементаСпискаФормы].Обновить();

КонецПроцедуры

&НаКлиенте
Процедура ИгнорироватьОтветыПоставщиковНаКлиенте(ИмяДинамическогоСписка, НовыеЗначения, Отбор)
	
	КоличествоЗаписей = ИзменитьЗаписиРегистраСтатусыЗапросовРеестровНаСервере(
		ИмяДинамическогоСписка, НовыеЗначения, Отбор);
	
	Если КоличествоЗаписей = 0 Тогда
		Возврат;
	ИначеЕсли КоличествоЗаписей = 1 Тогда
		ТекстСообщения = НСтр("ru = 'Отмечен как игнорируемый 1 реестр поставщика'");
	Иначе
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Отмечены как игнорируемые %1 поставщиков'"),
			СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоЗаписей, НСтр("ru = 'реестр, реестра, реестров'")));
	КонецЕсли;
		
	ПоказатьОповещениеПользователя(, , ТекстСообщения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаКлиенте
Процедура ИгнорироватьЗапросыПокупателейНаКлиенте(ИмяДинамическогоСписка, НовыеЗначения, Отбор)
	
	КоличествоЗаписей = ИзменитьЗаписиРегистраСтатусыЗапросовРеестровНаСервере(
		ИмяДинамическогоСписка, НовыеЗначения, Отбор);
	
	Если КоличествоЗаписей = 0 Тогда
		Возврат;
	ИначеЕсли КоличествоЗаписей = 1 Тогда
		ТекстСообщения = НСтр("ru = 'Отмечен как игнорируемый 1 запрос покупателя'");
	Иначе
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Отмечены как игнорируемые %1 покупателей'"),
			СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(КоличествоЗаписей, НСтр("ru = 'запрос, запроса, запросов'")));
	КонецЕсли;
		
	ПоказатьОповещениеПользователя(, , ТекстСообщения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

#КонецОбласти 

#Область Отчет

&НаКлиенте
Процедура СформироватьОтчетНаКлиенте()

	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		// Возможно, что фоновое задание было запущено раньше.
		Если НЕ ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ОчиститьСообщения();
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияОтчет");
	
	РезультатВыполнения = СформироватьОтчетНаСервере();
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ОбработатьРезультатВыполненияОтчетНаКлиенте(РезультатВыполнения);
	Иначе
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияОтчет", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	КонецЕсли;

КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияОтчет()

	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			РезультатВыполнения = ЗагрузитьПодготовленныеДанныеОтчет();
			ОбработатьРезультатВыполненияОтчетНаКлиенте(РезультатВыполнения);
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗаданияОтчет", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыОтчета()
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("НалоговыйПериод", Объект.НалоговыйПериод);
	ПараметрыОтчета.Вставить("Организация",     Объект.Организация);
	ПараметрыОтчета.Вставить("Контрагент",      Объект.Контрагент);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаСервере
Функция СформироватьОтчетНаСервере()

	НазначениеПроверкиЗаполнения = "Отчет";
	Отказ = НЕ ПроверитьЗаполнение();
	НазначениеПроверкиЗаполнения = "";

	Если Отказ Тогда
		РезультатВыполнения = Новый Структура();
		РезультатВыполнения.Вставить("ЗаданиеВыполнено", 		Истина);
		РезультатВыполнения.Вставить("ОтказПроверкиЗаполнения", Истина);
		Возврат РезультатВыполнения;
	КонецЕсли;

	ПоказатьВсеРезультаты = 1;

	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;

	ПараметрыЗадания = ПодготовитьПараметрыОтчета();
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор, 
		"СверкаДанныхУчетаНДС.СформироватьСверкуСчетовФактур", 
		ПараметрыЗадания,
		БухгалтерскиеОтчетыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтотОбъект));
		
	АдресХранилища			= РезультатВыполнения.АдресХранилища;
	ИдентификаторЗадания	= РезультатВыполнения.ИдентификаторЗадания;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		РезультатВыполнения = ЗагрузитьПодготовленныеДанныеОтчет();
	Иначе
		ОтобразитьЭлементыОжиданиеОтчет();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Функция ЗагрузитьПодготовленныеДанныеОтчет()

	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(РезультатВыполнения) <> Тип("Структура") Тогда
		РезультатВыполнения = Новый Структура();
	КонецЕсли;
	
	РезультатВыполнения.Вставить("ЗаданиеВыполнено", Истина);
	
	СверкаВыполнена     = НЕ РезультатВыполнения.Свойство("ОписаниеОшибки");
	
	Если СверкаВыполнена Тогда
		ЕстьРасхождения       		= РезультатВыполнения.ЕстьРасхождения;
		ЕстьПоставщикиБезРеестров 	= РезультатВыполнения.ЕстьПоставщикиБезРеестров;
		ПоказатьВсеРезультаты 		= 1;
		ТабличныйДокументСверка     = РезультатВыполнения.Сверка;
		ТабличныйДокументРасхождения= РезультатВыполнения.Расхождения;
		// Задаем имена файлов по умолчанию
		ПериодОтчета = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
			НачалоКвартала(Объект.НалоговыйПериод), 
			КонецКвартала(Объект.НалоговыйПериод));
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			ИмяФайлаСверка = СтрШаблон(НСтр("ru='Сверка%1 между %2 и %3'"),
				ПериодОтчета,
				Объект.Контрагент,
				Объект.Организация);
			ИмяФайлаРасхождения = СтрШаблон(НСтр("ru='Расхождения по сверке%1 между %2 и %3'"),
				ПериодОтчета,
				Объект.Контрагент,
				Объект.Организация);
		Иначе
			ИмяФайлаСверка = СтрШаблон(НСтр("ru='Сверка%1 по %2'"),
				ПериодОтчета,
				Объект.Организация);
			ИмяФайлаРасхождения = СтрШаблон(НСтр("ru='Расхождения по сверке%1 по %2'"),
				ПериодОтчета,
				Объект.Организация);
		КонецЕсли;
		ТабличныйДокументСверка.ИспользуемоеИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
			СтрЗаменить(ИмяФайлаСверка, ".", " "));
		ТабличныйДокументРасхождения.ИспользуемоеИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(
			СтрЗаменить(ИмяФайлаРасхождения, ".", " "));

	ИначеЕсли ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		СведенияОСтатусеПоследнегоЗапроса = СведенияОСтатусеПоследнегоЗапросаРеестровСчетовФактур(
			Объект.Организация, Объект.Контрагент, Объект.НалоговыйПериод);
		
		РезультатВыполнения.Вставить("СтатусЗапроса", 	СведенияОСтатусеПоследнегоЗапроса.СтатусЗапроса);
		РезультатВыполнения.Вставить("ДатаЗаписи", 		СведенияОСтатусеПоследнегоЗапроса.ДатаЗаписи);
		РезультатВыполнения.Вставить("ДатаЗапроса",		СведенияОСтатусеПоследнегоЗапроса.ДатаЗапроса);
			
	КонецЕсли;
	
	ПоказатьРезультатСверки();
	
	// Удалим из результата выполнения поля, не требующиеся на клиенте
	Если РезультатВыполнения.Свойство("Сверка") Тогда
		РезультатВыполнения.Удалить("Сверка");
	КонецЕсли;
	Если РезультатВыполнения.Свойство("Расхождения") Тогда
		РезультатВыполнения.Удалить("Расхождения");
	КонецЕсли;

	ИдентификаторЗадания = Неопределено;
	УдалитьИзВременногоХранилища(АдресХранилища);
	АдресХранилища = "";
	
	СкрытьЭлементыОжиданиеОтчет();
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьРезультатВыполненияОтчетНаКлиенте(РезультатВыполнения)

	Если РезультатВыполнения.Свойство("ОписаниеОшибки")
		И ЗначениеЗаполнено(РезультатВыполнения.ОписаниеОшибки) Тогда

		УстановитьСостояниеПоляТабличногоДокументаНеАктуальность(Элементы.Результат);

		ОписаниеОшибки = РезультатВыполнения.ОписаниеОшибки;

		Если ОписаниеОшибки = "РеестрНеЗагружен" Тогда
			Если ЕстьПравоВывод Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru='За %1 реестр от ""%2"" еще не загружен.'"),
					ПредставлениеПериодаРегистрации,
					Объект.Контрагент);
				ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьРеестрЗавершение", ЭтотОбъект);
				ВариантыОтветов = Новый СписокЗначений;
				
				// Если есть ранее полученный ответ от поставщика, то предложим его загрузить.
				ДобавитьВариантЗапросить = Истина;
				Если РезультатВыполнения.Свойство("СтатусЗапроса") Тогда
					Если РезультатВыполнения.СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыРеестровСчетовФактур.ОжидаетЗагрузки") Тогда
						ДобавитьВариантЗапросить = Ложь;
						ДатаРеестраСтрокой = Формат(РезультатВыполнения.ДатаЗаписи, "ДЛФ=Д");

						ТекстСообщения = СтрШаблон(НСтр("ru='За %1 реестр от ""%2"" получен %3 и еще не загружен.'"),
							ПредставлениеПериодаРегистрации,
							Объект.Контрагент,
							ДатаРеестраСтрокой);
						
						ВариантыОтветов.Добавить("ЗагрузитьРеестр", 
							СтрШаблон(НСтр("ru='Загрузить реестр от %1'"), ДатаРеестраСтрокой));

					ИначеЕсли РезультатВыполнения.СтатусЗапроса = ПредопределенноеЗначение("Перечисление.СтатусыРеестровСчетовФактур.Запрошен") Тогда
						ДобавитьВариантЗапросить = Ложь;
						ТекстСообщения = ТекстСообщения + " "
							+ СтрШаблон(НСтр("ru = 'Запрос был отправлен %1.'"), Формат(РезультатВыполнения.ДатаЗапроса, "ДЛФ=Д"));
							
						ВариантыОтветов.Добавить("ОтправитьЗапросПоставщику", НСтр("ru = 'Повторить запрос'"));

					КонецЕсли;
				КонецЕсли;
				
				Если ДобавитьВариантЗапросить Тогда
					ВариантыОтветов.Добавить("ОтправитьЗапросПоставщику", НСтр("ru = 'Отправить запрос'"))
				КонецЕсли;
				
				ВариантыОтветов.Добавить("Файл"  , НСтр("ru='Загрузить из файла'"));
				ВариантыОтветов.Добавить("Отмена", НСтр("ru='Отмена'"));
				ПоказатьВопрос(ОписаниеОповещения, ТекстСообщения, ВариантыОтветов);
				Возврат;
			Иначе
				ОписаниеОшибки = СтрШаблон(НСтр("ru='За %1 реестр от ""%2"" еще не загружен.'"),
					ПредставлениеПериодаРегистрации,
					Объект.Контрагент);
			КонецЕсли;
		КонецЕсли;
		ПоказатьПредупреждение(, ОписаниеОшибки);
	КонецЕсли;

	Если СверкаВыполнена Тогда
		ТекущийЭлемент = Элементы.Результат;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОтобразитьЭлементыОжиданиеОтчет()
	
	УстановитьДоступностьЭлементовШапки(ЭтотОбъект, Ложь);
	Элементы.Контрагент.ТолькоПросмотр = Истина;

	// Запретим другие команды, связанные с запуском фонового задания, кроме почты.
	
	// Закладка ЗапросыПоставщикам
	Элементы.ОбновитьЗапросыПоставщикам.Доступность		= Ложь;
	Элементы.ОбновитьЗапросыПоставщикамЕще.Доступность 	= Ложь;
	
	// Закладка ОтветыПоставщиков
	Элементы.ЗагрузитьРеестры.Доступность	= Ложь;
	Элементы.ЗагрузитьРеестрыЕще.Доступность= Ложь;

КонецПроцедуры

&НаСервере
Процедура СкрытьЭлементыОжиданиеОтчет()
	
	УстановитьДоступностьЭлементовШапки(ЭтотОбъект, Истина);
	Элементы.Контрагент.ТолькоПросмотр = Ложь;

	// Разрешим другие команды, связанные с запуском фонового задания, кроме почты.
	
	// Закладка ЗапросыПоставщикам
	Элементы.ОбновитьЗапросыПоставщикам.Доступность		= Истина;
	Элементы.ОбновитьЗапросыПоставщикамЕще.Доступность 	= Истина;
	
	// Закладка ОтветыПоставщиков
	Элементы.ЗагрузитьРеестры.Доступность	= Истина;
	Элементы.ЗагрузитьРеестрыЕще.Доступность= Истина;

КонецПроцедуры

&НаСервере
Процедура ПоказатьРезультатСверки()

	Результат.Очистить();
	
	Если СверкаВыполнена Тогда
		Если НЕ ЕстьРасхождения
			ИЛИ ПоказатьВсеРезультаты = 1 Тогда
			Результат.Вывести(ТабличныйДокументСверка);
			Элементы.Результат.ИспользуемоеИмяФайла = ТабличныйДокументСверка.ИспользуемоеИмяФайла;
		Иначе
			Результат.Вывести(ТабличныйДокументРасхождения);
			Элементы.Результат.ИспользуемоеИмяФайла = ТабличныйДокументРасхождения.ИспользуемоеИмяФайла;
		КонецЕсли;
		Результат.АвтоМасштаб = Истина;
		Результат.ОриентацияСтраницы   = ОриентацияСтраницы.Ландшафт;
		Результат.ЧерноБелаяПечать     = Истина;
		Результат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СверкаСчетовФактур";
	
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		
	КонецЕсли;
	
	ВывестиНужнуюПанельРезультатовСверки();

КонецПроцедуры

&НаСервере
Процедура ВывестиНужнуюПанельРезультатовСверки()
	
	Если СверкаВыполнена Тогда
		Если ЕстьРасхождения Тогда
			Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
				Элементы.ТекстЕстьРасхождения.Заголовок = 
					НСтр("ru='Обнаружены расхождения данных поставщика с нашими данными.'");
			Иначе
				Элементы.ТекстЕстьРасхождения.Заголовок = 
					НСтр("ru='Обнаружены расхождения данных поставщиков с нашими данными.'");
			КонецЕсли;
		Иначе
			Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
				Элементы.ТекстДанныеСовпадают.Заголовок = 
					НСтр("ru='Расхождений данных поставщика с нашими данными не обнаружено.'");
			Иначе
				Элементы.ТекстДанныеСовпадают.Заголовок = 
					НСтр("ru='Расхождений данных поставщиков с нашими данными не обнаружено.'");
			КонецЕсли;
		КонецЕсли;
		Элементы.ТребуетсяАктуализация.Видимость = ЕстьПоставщикиБезРеестров;
	КонецЕсли;
	
	Элементы.РезультатЕстьРасхождения.Видимость      = ЕстьРасхождения И СверкаВыполнена;
	Элементы.РезультатДанныеСовпадают.Видимость      = НЕ ЕстьРасхождения И СверкаВыполнена;
	Элементы.ГруппаУсловияПолученияСервиса.Видимость = НЕ СверкаВыполнена;
	
КонецПроцедуры

&НаСервере
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере()
	
	ПолеСумма = БухгалтерскиеОтчетыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		Результат, КэшВыделеннойОбласти);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииОбластиПодключаемый()
	
	НеобходимоВычислятьНаСервере = Ложь;
	БухгалтерскиеОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		ПолеСумма, Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере);
	
	Если НеобходимоВычислятьНаСервере Тогда
		ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере();
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРеестрЗавершение(Ответ, ДополнительныеПараметры) Экспорт
	
	Если Ответ = "Файл" Тогда
		ОткрытьФормуЗагрузкиРеестраИзФайла();
		
	ИначеЕсли Ответ = "ОтправитьЗапросПоставщику" Тогда
	
		// Переходим на закладку "Запросы поставщикам" и запускаем заполнение и запрос реестра.
		Если ОтобразитьРазделЗапросыПоставщикамИОтметитьСтрокуПоставщика(Объект.Контрагент) Тогда
			ПодключитьОбработчикОжидания("Подключаемый_НачатьЗапросРеестров", 0.5, Истина);
		Иначе
			ЦельЗапускаЗадания = "ЗапросРеестраПоставщика";
			ПодключитьОбработчикОжидания("Подключаемый_НачатьЗаполнениеПоставщиков", 0.5, Истина);
		КонецЕсли;

	ИначеЕсли Ответ = "ЗагрузитьРеестр" Тогда
		НачатьЗагрузкаРеестровНаКлиенте(Объект.Контрагент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСостояниеПоляТабличногоДокументаНеАктуальность(ПолеТабличногоДокумента)

	ОтображениеСостояния = ПолеТабличногоДокумента.ОтображениеСостояния;
	ОтображениеСостояния.Видимость = Истина;
	ОтображениеСостояния.Картинка  = Новый Картинка;
	ОтображениеСостояния.Текст     = НСтр("ru = 'Отчет не сформирован. Нажмите ""Сверить"" для получения отчета.'");
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;

КонецПроцедуры 

#КонецОбласти

#Область ЗаполнениеПоставщиков

&НаКлиенте
Процедура НачатьЗаполнениеПоставщиковНаКлиенте()

	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		// Возможно, что фоновое задание было запущено раньше.
		Если НЕ ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияЗаполнениеПоставщиков");
	
	РезультатВыполнения = НачатьЗаполнениеПоставщиковНаСервере();

	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ОбработатьРезультатВыполненияЗаполнениеПоставщиковНаКлиенте(РезультатВыполнения);
	Иначе
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияЗаполнениеПоставщиков", 1, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияЗаполнениеПоставщиков()

	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			РезультатВыполнения = ЗагрузитьПодготовленныеДанныеЗаполнениеПоставщиков();
			ОбработатьРезультатВыполненияЗаполнениеПоставщиковНаКлиенте(РезультатВыполнения);
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗаданияЗаполнениеПоставщиков", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыЗаполнениеПоставщиков()
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Организация", 		Объект.Организация);
	ПараметрыЗадания.Вставить("НалоговыйПериод", 	Объект.НалоговыйПериод);
	
	Возврат ПараметрыЗадания;
	
КонецФункции

&НаСервере
Функция НачатьЗаполнениеПоставщиковНаСервере()

	Объект.ЗапросыПоставщикам.Очистить();

	НазначениеПроверкиЗаполнения = "ЗаполнениеПоставщиков";
	Отказ = Не ПроверитьЗаполнение();
	НазначениеПроверкиЗаполнения = "";

	Если Отказ Тогда
		Возврат Новый Структура("ЗаданиеВыполнено, ОтказПроверкиЗаполнения", Истина, Истина);
	КонецЕсли;

	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;

	ПараметрыЗадания = ПодготовитьПараметрыЗаполнениеПоставщиков();
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Обработки.СверкаДанныхУчетаНДС.ЗаполнитьПоставщиков",
		ПараметрыЗадания,
		НСтр("ru = 'Сверка данных учета НДС: заполнение поставщиков'"));
		
	АдресХранилища   		= РезультатВыполнения.АдресХранилища;
	ИдентификаторЗадания	= РезультатВыполнения.ИдентификаторЗадания;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		РезультатВыполнения = ЗагрузитьПодготовленныеДанныеЗаполнениеПоставщиков();
	Иначе
		ОтобразитьЭлементыОжиданияЗапросыПоставщикам();
	КонецЕсли;
	
	Возврат РезультатВыполнения;

КонецФункции

&НаСервере
Функция ЗагрузитьПодготовленныеДанныеЗаполнениеПоставщиков()

	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(РезультатВыполнения) = Тип("ТаблицаЗначений") Тогда
		Объект.ЗапросыПоставщикам.Загрузить(РезультатВыполнения);
	КонецЕсли;
	
	РезультатВыполнения = Новый Структура();
	РезультатВыполнения.Вставить("ЗаданиеВыполнено", Истина);
	
	// При вызове задания в режиме автоматической отправки запроса контрагенту перейдем на него и установим пометку.
	Если ЦельЗапускаЗадания = "ЗапросРеестраПоставщика" Тогда
		// Сбросим отметку в остальных строках
		Для Каждого СтрокаТаблицы Из Объект.ЗапросыПоставщикам Цикл
			СтрокаТаблицы.Отправлять = Ложь;
		КонецЦикла;
	
		СтруктураОтбор = Новый Структура();
		СтруктураОтбор.Вставить("Контрагент", Объект.Контрагент);
		
		НайденныеСтроки = Объект.ЗапросыПоставщикам.НайтиСтроки(СтруктураОтбор);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Элементы.ЗапросыПоставщикам.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
			НайденныеСтроки[0].Отправлять = Истина;
		Иначе
			РезультатВыполнения.Вставить("ОшибкаНетСчетовФактурПоКонтрагенту", Истина);
		КонецЕсли;
	КонецЕсли;

	ИдентификаторЗадания = Неопределено;
	УдалитьИзВременногоХранилища(АдресХранилища);
	АдресХранилища = "";
	
	СкрытьЭлементыОжиданияЗапросыПоставщикам(ЭтотОбъект);

	Возврат РезультатВыполнения;

КонецФункции

&НаКлиенте
Процедура ОбработатьРезультатВыполненияЗаполнениеПоставщиковНаКлиенте(РезультатВыполнения)

	Если ЦельЗапускаЗадания = "ЗапросРеестраПоставщика" Тогда
		ЦельЗапускаЗадания = "";
		Если РезультатВыполнения.Свойство("ОшибкаНетСчетовФактурПоКонтрагенту")
			И РезультатВыполнения.ОшибкаНетСчетовФактурПоКонтрагенту Тогда
			ТекстПредупреждения = СтрШаблон(НСтр("ru = 'От ""%1"" не зарегистрированы полученные счета-фактуры за %2.'"),
				Объект.Контрагент, ПредставлениеПериодаРегистрации);
			ПоказатьПредупреждение(, ТекстПредупреждения);
		Иначе
			ПодключитьОбработчикОжидания("Подключаемый_НачатьЗапросРеестров", 0.5, Истина);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗаданиеЗаполнениеПоставщиков()

	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияЗаполнениеПоставщиков");

	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
	
		МассивИдентификаторов = Новый Массив();
		МассивИдентификаторов.Добавить(ИдентификаторЗадания);
		ОтменитьВыполнениеЗаданий(МассивИдентификаторов);
		
	КонецЕсли;

	ИдентификаторЗадания = Неопределено;
	
	СкрытьЭлементыОжиданияЗапросыПоставщикам(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьЭлементыОжиданияЗапросыПоставщикам()

	Элементы.СтраницыЗапросыПоставщикамСтадии.ТекущаяСтраница = Элементы.СтраницаЗапросыПоставщикамОжидание;
	Элементы.ОтборЗапросыПоставщикам.Доступность = Ложь;
	
	Если Элементы.КартинкаОжиданиеЗаполнениеЗапросыПоставщикам.Картинка.Вид = ВидКартинки.Пустая Тогда
		// Картинку загружаем по необходимости при первом включении ожидания.
		Элементы.КартинкаОжиданиеЗаполнениеЗапросыПоставщикам.Картинка = БиблиотекаКартинок.ДлительнаяОперация48;
	КонецЕсли;

	УстановитьДоступностьЭлементовШапки(ЭтотОбъект, Ложь);

	// Запретим другие команды, связанные с запуском фонового задания, кроме почты.
	
	// Закладка Сверка
	Элементы.Сформировать.Доступность	= Ложь;
	Элементы.СформироватьЕще.Доступность= Ложь;
	
	// Закладка ОтветыПоставщиков
	Элементы.ЗагрузитьРеестры.Доступность	= Ложь;
	Элементы.ЗагрузитьРеестрыЕще.Доступность= Ложь;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СкрытьЭлементыОжиданияЗапросыПоставщикам(Форма)

	Элементы = Форма.Элементы;

	Элементы.СтраницыЗапросыПоставщикамСтадии.ТекущаяСтраница = Элементы.СтраницаЗапросыПоставщикамТаблица;
	Элементы.ОтборЗапросыПоставщикам.Доступность = Истина;

	УстановитьДоступностьЭлементовШапки(Форма, Истина);

	// Разрешим другие команды, связанные с запуском фонового задания, кроме почты.
	
	// Закладка Сверка
	Элементы.Сформировать.Доступность	= Истина;
	Элементы.СформироватьЕще.Доступность= Истина;
	
	// Закладка ОтветыПоставщиков
	Элементы.ЗагрузитьРеестры.Доступность	= Истина;
	Элементы.ЗагрузитьРеестрыЕще.Доступность= Истина;

КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьРазделЗапросыПоставщикамНаКлиенте()

	ОтобразитьРазделЗапросыПоставщикамНаСервере();
	
	Если Объект.ЗапросыПоставщикам.Количество() = 0
		И ЗначениеЗаполнено(Объект.Организация) Тогда
		// Автоматически запускаем заполнение табличной части
		ПодключитьОбработчикОжидания("Подключаемый_НачатьЗаполнениеПоставщиков", 0.5, Истина);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОтобразитьРазделЗапросыПоставщикамНаСервере()

	ВыделитьТекущийРаздел("ГиперссылкаЗапросыПоставщикам");
	
	Если Объект.ЗапросыПоставщикам.Количество() = 0
		И ЗначениеЗаполнено(Объект.Организация) Тогда
		// Отобразим операцию ожидания, т.к. надо будет запустить обновление содержимого табличной части.
		ОтобразитьЭлементыОжиданияЗапросыПоставщикам();
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ЗапросРеестров

&НаКлиенте
Процедура НачатьЗапросРеестровНаКлиенте()

	Если ЗначениеЗаполнено(ИдентификаторЗаданияРаботаСПочтой) Тогда
		// Возможно, что фоновое задание было запущено раньше.
		Если НЕ ЗаданиеВыполнено(ИдентификаторЗаданияРаботаСПочтой) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияЗапросРеестров");
	
	РезультатВыполнения = НачатьЗапросРеестровНаСервере();

	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ОбработатьРезультатВыполненияЗапросРеестровНаКлиенте(РезультатВыполнения);
	Иначе
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияРаботаСПочтой);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияЗапросРеестров", 1, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияЗапросРеестров()

	Попытка
		РезультатВыполнения = ПроверитьВыполнениеИПрогрессЗадания(ИдентификаторЗаданияРаботаСПочтой);
		Если РезультатВыполнения.ЗаданиеВыполнено Тогда 
			РезультатВыполнения = ЗагрузитьПодготовленныеДанныеЗапросРеестров();
			ОбработатьРезультатВыполненияЗапросРеестровНаКлиенте(РезультатВыполнения);
		Иначе
			ПрогрессВыполненияЗадания = Мин(Макс(ПрогрессВыполненияЗадания + 1, РезультатВыполнения.Процент), 99);
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияРаботаСПочтой);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗаданияЗапросРеестров", 
				ПараметрыОбработчикаОжиданияРаботаСПочтой.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыЗапросРеестров()
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Организация", 	Объект.Организация);
	ПараметрыЗадания.Вставить("УчетнаяЗапись", 	Объект.УчетнаяЗапись);
	ПараметрыЗадания.Вставить("НалоговыйПериод",Объект.НалоговыйПериод);
	
	ПолучателиЗапросов = Обработки.СверкаДанныхУчетаНДС.НоваяТаблицаПоставщиков();
	Для Каждого СтрокаТаблицы Из Объект.ЗапросыПоставщикам Цикл
		
		Если НЕ СтрокаТаблицы.Отправлять Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ПолучателиЗапросов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.ИдентификаторСтроки = СтрокаТаблицы.ПолучитьИдентификатор();
	
	КонецЦикла;

	ПараметрыЗадания.Вставить("ПолучателиЗапросов", ПолучателиЗапросов);;
	
	Возврат ПараметрыЗадания;
	
КонецФункции

&НаСервере
Функция НачатьЗапросРеестровНаСервере()

	НазначениеПроверкиЗаполнения = "ЗапросРеестров";
	Отказ = НЕ ПроверитьЗаполнение();
	НазначениеПроверкиЗаполнения = "";
	Если Отказ Тогда
		РезультатВыполнения = Новый Структура();
		РезультатВыполнения.Вставить("ЗаданиеВыполнено", 		Истина);
		РезультатВыполнения.Вставить("ОтказПроверкиЗаполнения", Истина);
		Возврат РезультатВыполнения;
	КонецЕсли;

	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗаданияРаботаСПочтой);
	
	ИдентификаторЗаданияРаботаСПочтой = Неопределено;

	ПараметрыЗадания = ПодготовитьПараметрыЗапросРеестров();
	
	Если ПараметрыЗадания.ПолучателиЗапросов.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Необходимо отметить поставщиков для отправки запросов.'");
		
		РезультатВыполнения = Новый Структура();
		РезультатВыполнения.Вставить("ЗаданиеВыполнено", 		Истина);
		РезультатВыполнения.Вставить("ОтказПроверкиЗаполнения", Истина);
		РезультатВыполнения.Вставить("ТекстСообщения", 			ТекстСообщения);
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Обработки.СверкаДанныхУчетаНДС.ОтправитьЗапросыПоставщикам",
		ПараметрыЗадания,
		НСтр("ru = 'Сверка данных учета НДС: отправка запросов поставщикам'"));
		
	АдресХранилищаРаботаСПочтой   		= РезультатВыполнения.АдресХранилища;
	ИдентификаторЗаданияРаботаСПочтой	= РезультатВыполнения.ИдентификаторЗадания;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		РезультатВыполнения = ЗагрузитьПодготовленныеДанныеЗапросРеестров();
	Иначе
		ОтобразитьЭлементыПрогрессЗапросРеестров();
	КонецЕсли;
	
	Возврат РезультатВыполнения;

КонецФункции

&НаСервере
Функция ЗагрузитьПодготовленныеДанныеЗапросРеестров()

	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилищаРаботаСПочтой);
	
	Если ТипЗнч(РезультатВыполнения) <> Тип("Структура") Тогда
		РезультатВыполнения = Новый Структура();
	КонецЕсли;
	
	РезультатВыполнения.Вставить("ЗаданиеВыполнено", Истина);
	
	Если РезультатВыполнения.Свойство("ЗапросыПоставщикам") Тогда
	
		// Обновляем статусы запросов в табличной части на форме.
		Для Каждого СтрокаТаблицы Из РезультатВыполнения.ЗапросыПоставщикам Цикл
			
			ДанныеСтроки = Объект.ЗапросыПоставщикам.НайтиПоИдентификатору(СтрокаТаблицы.ИдентификаторСтроки);
			Если ДанныеСтроки <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТаблицы);
			КонецЕсли;
		
		КонецЦикла;
		
		// Таблицу дальше не возвращаем, удалим ее из результата выполнения фонового задания.
		РезультатВыполнения.Удалить("ЗапросыПоставщикам");
	КонецЕсли;

	ИдентификаторЗаданияРаботаСПочтой = Неопределено;
	УдалитьИзВременногоХранилища(АдресХранилищаРаботаСПочтой);
	АдресХранилищаРаботаСПочтой = "";
	
	СкрытьЭлементыПрогрессЗапросРеестров(ЭтотОбъект);
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьРезультатВыполненияЗапросРеестровНаКлиенте(РезультатВыполнения)

	ЗаголовокСообщения = НСтр("ru = 'Отправка запросов поставщикам'");

	Если РезультатВыполнения.Свойство("ОтказПроверкиЗаполнения") Тогда
		Если РезультатВыполнения.Свойство("ТекстСообщения") Тогда
			ПоказатьПредупреждение(, РезультатВыполнения.ТекстСообщения, , ЗаголовокСообщения);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если РезультатВыполнения.Свойство("ВсегоЗаписей")
		И РезультатВыполнения.Свойство("Обработано")
		И РезультатВыполнения.Свойство("СОшибками") Тогда
		
		ТекстСообщения = "";

		Если РезультатВыполнения.СОшибками = 0 Тогда
			Если РезультатВыполнения.Обработано = 1 Тогда
				ТекстСообщения = НСтр("ru = 'Запрос отправлен поставщику'");
			Иначе
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Отправлено %1 поставщикам'"),
					СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
						РезультатВыполнения.Обработано, НСтр("ru = 'запрос, запроса, запросов'")));
			КонецЕсли;
		Иначе
			ТекстСообщения = СтрШаблон(НСтр("ru = 'При отправке %1 возникли ошибки'"), 
				СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
					РезультатВыполнения.СОшибками, НСтр("ru = 'запроса, запросов, запросов'")));
		КонецЕсли;
		ПоказатьПредупреждение(, ТекстСообщения, , ЗаголовокСообщения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗаданиеЗапросРеестров()

	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияЗапросРеестров");

	Если ЗначениеЗаполнено(ИдентификаторЗаданияРаботаСПочтой) Тогда
	
		МассивИдентификаторов = Новый Массив();
		МассивИдентификаторов.Добавить(ИдентификаторЗаданияРаботаСПочтой);
		ОтменитьВыполнениеЗаданий(МассивИдентификаторов);
		
	КонецЕсли;

	ИдентификаторЗаданияРаботаСПочтой = Неопределено;
	
	СкрытьЭлементыПрогрессЗапросРеестров(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьЭлементыПрогрессЗапросРеестров()

	ПрогрессВыполненияЗадания = 5;
	Элементы.СтраницыЗапросыПоставщикамСтадии.ТекущаяСтраница = Элементы.СтраницаЗапросыПоставщикамПрогресс;
	Элементы.ОтборЗапросыПоставщикам.Доступность = Ложь;
	
	УстановитьДоступностьЭлементовШапки(ЭтотОбъект, Ложь);

	// Запретим другие команды, связанные с работой с почтой
	
	// Закладка ОтветыПоставщиков
	Элементы.ПрочитатьПочтуОтветыПоставщиков.Доступность 	= Ложь;
	Элементы.ПрочитатьПочтуОтветыПоставщиковЕще.Доступность = Ложь;

	// Закладка ЗапросыПокупателей
	Элементы.ОтправитьРеестры.Доступность 					= Ложь;
	Элементы.ПрочитатьПочтуЗапросыПокупателей.Доступность 	= Ложь;
	
	Элементы.ОтправитьРеестрыЕще.Доступность 				= Ложь;
	Элементы.ПрочитатьПочтуЗапросыПокупателейЕще.Доступность= Ложь;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СкрытьЭлементыПрогрессЗапросРеестров(Форма)

	Элементы = Форма.Элементы;

	Элементы.СтраницыЗапросыПоставщикамСтадии.ТекущаяСтраница = Элементы.СтраницаЗапросыПоставщикамТаблица;
	Элементы.ОтборЗапросыПоставщикам.Доступность = Истина;

	УстановитьДоступностьЭлементовШапки(Форма, Истина);

	// Разрешим другие команды, связанные с работой с почтой
	
	// Закладка ОтветыПоставщиков
	Элементы.ПрочитатьПочтуОтветыПоставщиков.Доступность 	= Истина;
	Элементы.ПрочитатьПочтуОтветыПоставщиковЕще.Доступность = Истина;

	// Закладка ЗапросыПокупателей
	Элементы.ОтправитьРеестры.Доступность 					= Истина;
	Элементы.ПрочитатьПочтуЗапросыПокупателей.Доступность 	= Истина;
	
	Элементы.ОтправитьРеестрыЕще.Доступность 				= Истина;
	Элементы.ПрочитатьПочтуЗапросыПокупателейЕще.Доступность= Истина;

КонецПроцедуры

#КонецОбласти

#Область ЧтениеПочты

&НаКлиенте
Процедура НачатьЧтениеПочтыНаКлиенте()

	АвтоматическиЗапускатьЧтениеПочты = Ложь;

	Если ЗначениеЗаполнено(ИдентификаторЗаданияРаботаСПочтой) Тогда
		// Возможно, что фоновое задание было запущено раньше.
		Если НЕ ЗаданиеВыполнено(ИдентификаторЗаданияРаботаСПочтой) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияЧтениеПочты");
	
	РезультатВыполнения = НачатьЧтениеПочтыНаСервере();

	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ОбработатьРезультатВыполненияЧтениеПочтыНаКлиенте(РезультатВыполнения);
	Иначе
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияРаботаСПочтой);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияЧтениеПочты", 1, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияЧтениеПочты()

	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗаданияРаботаСПочтой) Тогда 
			РезультатВыполнения = ЗагрузитьПодготовленныеДанныеЧтениеПочты();
			ОбработатьРезультатВыполненияЧтениеПочтыНаКлиенте(РезультатВыполнения);
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияРаботаСПочтой);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗаданияЧтениеПочты", 
				ПараметрыОбработчикаОжиданияРаботаСПочтой.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыЧтениеПочты()
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("УчетнаяЗапись",	Объект.УчетнаяЗапись);
	ПараметрыЗадания.Вставить("ГлубинаПоиска",	ГлубинаПоиска);
	
	Возврат ПараметрыЗадания;
	
КонецФункции

&НаСервере
Функция НачатьЧтениеПочтыНаСервере()
	
	НазначениеПроверкиЗаполнения = "ЧтениеПочты";
	Отказ = НЕ ПроверитьЗаполнение();
	НазначениеПроверкиЗаполнения = "";
	
	Если Отказ Тогда
		РезультатВыполнения = Новый Структура();
		РезультатВыполнения.Вставить("ЗаданиеВыполнено", 		Истина);
		РезультатВыполнения.Вставить("ОтказПроверкиЗаполнения", Истина);
		Возврат РезультатВыполнения;
	КонецЕсли;
	
	Элементы.ГруппаОтветыПоставщиковОшибки.Видимость  = Ложь;
	Элементы.ГруппаЗапросыПокупателейОшибки.Видимость = Ложь;
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗаданияРаботаСПочтой);
	
	ИдентификаторЗаданияРаботаСПочтой = Неопределено;
	
	ПараметрыЗадания = ПодготовитьПараметрыЧтениеПочты();
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Обработки.СверкаДанныхУчетаНДС.ПрочитатьДанныеИзЭлектроннойПочты",
		ПараметрыЗадания,
		НСтр("ru = 'Сверка данных учета НДС: чтение почтовых сообщений'"));
		
	АдресХранилищаРаботаСПочтой       = РезультатВыполнения.АдресХранилища;
	ИдентификаторЗаданияРаботаСПочтой = РезультатВыполнения.ИдентификаторЗадания;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		РезультатВыполнения = ЗагрузитьПодготовленныеДанныеЧтениеПочты();
	Иначе
		ОтобразитьЭлементыОжиданиеЧтениеПочты();
	КонецЕсли;
	
	Возврат РезультатВыполнения;

КонецФункции

&НаСервере
Функция ЗагрузитьПодготовленныеДанныеЧтениеПочты()

	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилищаРаботаСПочтой);
	
	Если ТипЗнч(РезультатВыполнения) <> Тип("Структура") Тогда
		РезультатВыполнения = Новый Структура();
	КонецЕсли;
	
	РезультатВыполнения.Вставить("ЗаданиеВыполнено", Истина);
	
	ИдентификаторЗаданияРаботаСПочтой = Неопределено;
	УдалитьИзВременногоХранилища(АдресХранилищаРаботаСПочтой);
	АдресХранилищаРаботаСПочтой = "";
	
	СкрытьЭлементыОжиданиеЧтениеПочты();
	
	// Обновляем динамические списки на форме
	Элементы.СписокОтветыПоставщиков.Обновить();
	Элементы.СписокЗапросыПокупателей.Обновить();
	
	// Очистим ранее сделанные запросы поставщикам, чтобы они обновились при следующем первом переключении на них.
	Объект.ЗапросыПоставщикам.Очистить();

	// Покажем гиперссылку перехода к списку ошибок, если они были.
	Если РезультатВыполнения.Свойство("ЕстьОшибки") И РезультатВыполнения.ЕстьОшибки Тогда
		
		ВсяТаблицаОшибок = РезультатВыполнения.ОписаниеОшибок;
		ОтборОшибкиРеестров = Новый Структура("Контекст", Перечисления.ТипыЗапросовРеестровСчетовФактур.ЗапросПоставщику);
		ОтборОшибкиЗапросов = Новый Структура("Контекст", Перечисления.ТипыЗапросовРеестровСчетовФактур.ЗапросПокупателя);
		
		КоличествоОшибокРеестров = ВсяТаблицаОшибок.Скопировать(ОтборОшибкиРеестров, "Контекст").Количество();
		КоличествоОшибокЗапросов = ВсяТаблицаОшибок.Скопировать(ОтборОшибкиЗапросов, "Контекст").Количество();
		
		Если КоличествоОшибокРеестров > 0 Тогда
			Элементы.ГруппаОтветыПоставщиковОшибки.Видимость = Истина;
			ТекстОшибки = ФорматированныйТекстОшибкиПриЗагрузке(
				КоличествоОшибокРеестров,
				Перечисления.ТипыЗапросовРеестровСчетовФактур.ЗапросПоставщику);
				
			Элементы.ТекстЕстьОшибкиОтветыПоставщиков.Заголовок = ТекстОшибки;
		КонецЕсли;
		
		Если КоличествоОшибокЗапросов > 0 Тогда
			Элементы.ГруппаЗапросыПокупателейОшибки.Видимость = Истина;
			ТекстОшибки = ФорматированныйТекстОшибкиПриЗагрузке(
				КоличествоОшибокЗапросов,
				Перечисления.ТипыЗапросовРеестровСчетовФактур.ЗапросПокупателя);
				
			Элементы.ТекстЕстьОшибкиЗапросыПокупателей.Заголовок = ТекстОшибки;
		КонецЕсли;
		
	КонецЕсли;
	
	Если РезультатВыполнения.Свойство("ОписаниеОшибок") Тогда
		// Сохраним таблицу ошибок во временное хранилище для показа в отдельной форме.
		Если ЭтоАдресВременногоХранилища(АдресХранилищаОписаниеОшибок) Тогда
			УдалитьИзВременногоХранилища(АдресХранилищаОписаниеОшибок);
		КонецЕсли;
		
		АдресХранилищаОписаниеОшибок = ПоместитьВоВременноеХранилище(РезультатВыполнения.ОписаниеОшибок, УникальныйИдентификатор);
		
		// Исключим таблицу ошибок из результата, который возвращается на клиента.
		РезультатВыполнения.Удалить("ОписаниеОшибок");
	Иначе
		Если ЭтоАдресВременногоХранилища(АдресХранилищаОписаниеОшибок) Тогда
			УдалитьИзВременногоХранилища(АдресХранилищаОписаниеОшибок);
		КонецЕсли;
		АдресХранилищаОписаниеОшибок = "";
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Функция ФорматированныйТекстОшибкиПриЗагрузке(КолвоОшибок, Контекст)
	
	РезультатЗагрузки = Новый Массив();
	
	Если Контекст = Перечисления.ТипыЗапросовРеестровСчетовФактур.ЗапросПокупателя Тогда
		ОкончаниеТекстаОшибки = НСтр("ru='при получении запросов от покупателей.'");
		НавигационнаяСсылка   = "ПоказатьОшибкиЗагрузкиЗапросов";
		
	ИначеЕсли Контекст = Перечисления.ТипыЗапросовРеестровСчетовФактур.ЗапросПоставщику Тогда
		ОкончаниеТекстаОшибки = НСтр("ru='при загрузке реестров поставщиков.'");
		НавигационнаяСсылка   = "ПоказатьОшибкиЗагрузкиРеестров";
		
	КонецЕсли;
	
	Если Прав(Строка(КолвоОшибок), 1) = "1" И НЕ КолвоОшибок = 11 Тогда
		РезультатЗагрузки.Добавить(НСтр("ru='Обнаружена'"));
		Гиперссылка = Новый ФорматированнаяСтрока(Строка(КолвоОшибок) + " " + НСтр("ru='ошибка'"), , , , НавигационнаяСсылка);
		
	ИначеЕсли (Прав(Строка(КолвоОшибок), 1) = "2" ИЛИ Прав(Строка(КолвоОшибок), 1) = "3" ИЛИ Прав(Строка(КолвоОшибок), 1) = "4")
		И НЕ КолвоОшибок = 12 И НЕ КолвоОшибок = 13 И НЕ КолвоОшибок = 14 Тогда
		
		РезультатЗагрузки.Добавить(НСтр("ru='Обнаружено'"));
		Гиперссылка = Новый ФорматированнаяСтрока(Строка(КолвоОшибок) + " " + НСтр("ru='ошибки'"), , , , НавигационнаяСсылка);
		
	Иначе
		РезультатЗагрузки.Добавить(НСтр("ru='Обнаружено'"));
		Гиперссылка = Новый ФорматированнаяСтрока(Строка(КолвоОшибок) + " " + НСтр("ru='ошибок'"), , , , НавигационнаяСсылка);
		
	КонецЕсли;
	
	РезультатЗагрузки.Добавить(" ");
	РезультатЗагрузки.Добавить(Гиперссылка);
	РезультатЗагрузки.Добавить(" ");
	РезультатЗагрузки.Добавить(ОкончаниеТекстаОшибки);
	
	Возврат Новый ФорматированнаяСтрока(РезультатЗагрузки);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьРезультатВыполненияЧтениеПочтыНаКлиенте(РезультатВыполнения)
	
	ЗаголовокСообщения = НСтр("ru = 'Почтовые сообщения прочитаны'");
	
	Если РезультатВыполнения.Свойство("ОтказПроверкиЗаполнения") Тогда
		Если РезультатВыполнения.Свойство("ТекстСообщения") Тогда
			ПоказатьПредупреждение(, РезультатВыполнения.ТекстСообщения, , ЗаголовокСообщения);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если РезультатВыполнения.Свойство("ОбработаноРеестров")
		И РезультатВыполнения.Свойство("ОбработаноЗапросов")
		И РезультатВыполнения.Свойство("СОшибками") Тогда
		
		ТекстСообщения = "";
		Если РезультатВыполнения.ОбработаноРеестров > 0 Тогда
			Если РезультатВыполнения.ОбработаноРеестров = 1 Тогда
				ТекстСообщения = НСтр("ru = 'Получен реестр от поставщика.'");
			Иначе
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Получено %1 от поставщиков.'"),
					СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
						РезультатВыполнения.ОбработаноРеестров, НСтр("ru = 'реестр, реестра, реестров'")));
			КонецЕсли;
			
		КонецЕсли;
		
		Если РезультатВыполнения.ОбработаноЗапросов > 0 Тогда
			Если ЗначениеЗаполнено(ТекстСообщения) Тогда
				ТекстСообщения = ТекстСообщения + Символы.ПС;
			КонецЕсли;
		
			Если РезультатВыполнения.ОбработаноЗапросов = 1 Тогда
				ТекстСообщения = ТекстСообщения + НСтр("ru = 'Поступил запрос от покупателя.'");
			Иначе
				ТекстСообщения = ТекстСообщения + СтрШаблон(НСтр("ru = 'Поступило %1 от покупателей'"),
					СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
						РезультатВыполнения.ОбработаноЗапросов,
						НСтр("ru = 'запрос, запроса, запросов'")));
					
			КонецЕсли;
		КонецЕсли;
		
		Если РезультатВыполнения.СОшибками > 0 Тогда
			Если ЗначениеЗаполнено(ТекстСообщения) Тогда
				ТекстСообщения = ТекстСообщения + Символы.ПС;
			КонецЕсли;
		
			Если РезультатВыполнения.СОшибками = 1 Тогда
				ТекстСообщения = ТекстСообщения + Символы.ПС
					+ НСтр("ru = 'При получении одного сообщения возникла ошибка.'");
			Иначе
				ТекстСообщения = ТекстСообщения + Символы.ПС
					+ СтрШаблон(НСтр("ru = 'При получении %1 возникли ошибки.'"),
						СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
							РезультатВыполнения.СОшибками, НСтр("ru = 'сообщения, сообщений, сообщений'")));
			КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(ТекстСообщения) Тогда
			ТекстСообщения = НСтр("ru = 'Новых сообщений нет.'");
		КонецЕсли;
		
		ПоказатьПредупреждение(, ТекстСообщения, , ЗаголовокСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗаданиеЧтениеПочты()

	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияЧтениеПочты");

	Если ЗначениеЗаполнено(ИдентификаторЗаданияРаботаСПочтой) Тогда
	
		МассивИдентификаторов = Новый Массив();
		МассивИдентификаторов.Добавить(ИдентификаторЗаданияРаботаСПочтой);
		ОтменитьВыполнениеЗаданий(МассивИдентификаторов);
		
	КонецЕсли;

	ИдентификаторЗаданияРаботаСПочтой = Неопределено;
	
	СкрытьЭлементыОжиданиеЧтениеПочты();
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьЭлементыОжиданиеЧтениеПочты()

	Элементы.СтраницыОтветыПоставщиковСтадии.ТекущаяСтраница = Элементы.СтраницаОтветыПоставщиковОжидание;
	Элементы.ОтборОтветыПоставщикам.Доступность = Ложь;
	
	Если Элементы.КартинкаОжиданиеОтветыПоставщиков.Картинка.Вид = ВидКартинки.Пустая Тогда
		// Картинку загружаем по необходимости при первом включении ожидания.
		Элементы.КартинкаОжиданиеОтветыПоставщиков.Картинка = БиблиотекаКартинок.ДлительнаяОперация48;
	КонецЕсли;
	
	Элементы.СтраницыЗапросыПокупателейСтадии.ТекущаяСтраница = Элементы.СтраницаЗапросыПокупателейОжидание;
	Элементы.ОтборЗапросыПокупателей.Доступность = Ложь;

	Если Элементы.КартинкаОжиданиеЗапросыПокупателей.Картинка.Вид = ВидКартинки.Пустая Тогда
		// Картинку загружаем по необходимости при первом включении ожидания.
		Элементы.КартинкаОжиданиеЗапросыПокупателей.Картинка = БиблиотекаКартинок.ДлительнаяОперация48;
	КонецЕсли;

	УстановитьДоступностьЭлементовШапки(ЭтотОбъект, Ложь);

	// Запретим другие команды, связанные с работой с почтой
	
	// Закладка ЗапросыПоставщикам
	Элементы.ЗапроситьРеестры.Доступность 		= Ложь;
	Элементы.ЗапроситьРеестрыЕще.Доступность 	= Ложь;

КонецПроцедуры

&НаСервере
Процедура СкрытьЭлементыОжиданиеЧтениеПочты()

	Элементы.СтраницыОтветыПоставщиковСтадии.ТекущаяСтраница = Элементы.СтраницаОтветыПоставщиковТаблица;
	Элементы.ОтборОтветыПоставщикам.Доступность = Истина;
	
	Элементы.СтраницыЗапросыПокупателейСтадии.ТекущаяСтраница = Элементы.СтраницаЗапросыПокупателейТаблица;
	Элементы.ОтборЗапросыПокупателей.Доступность = Истина;

	УстановитьДоступностьЭлементовШапки(ЭтотОбъект, Истина);

	// Разрешим другие команды, связанные с работой с почтой
	
	// Закладка ЗапросыПоставщикам
	Элементы.ЗапроситьРеестры.Доступность 		= Истина;
	Элементы.ЗапроситьРеестрыЕще.Доступность 	= Истина;

КонецПроцедуры

#КонецОбласти

#Область ОтправкаРеестров

&НаКлиенте
Процедура НачатьОтправкаРеестровНаКлиенте()

	Если ЗначениеЗаполнено(ИдентификаторЗаданияРаботаСПочтой) Тогда
		// Возможно, что фоновое задание было запущено раньше.
		Если НЕ ЗаданиеВыполнено(ИдентификаторЗаданияРаботаСПочтой) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияОтправкаРеестров");
	
	РезультатВыполнения = НачатьОтправкаРеестровНаСервере();

	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ОбработатьРезультатВыполненияОтправкаРеестровНаКлиенте(РезультатВыполнения);
	Иначе
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияРаботаСПочтой);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияОтправкаРеестров", 1, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияОтправкаРеестров()

	Попытка
		РезультатВыполнения = ПроверитьВыполнениеИПрогрессЗадания(ИдентификаторЗаданияРаботаСПочтой);
		Если РезультатВыполнения.ЗаданиеВыполнено Тогда 
			РезультатВыполнения = ЗагрузитьПодготовленныеДанныеОтправкаРеестров();
			ОбработатьРезультатВыполненияОтправкаРеестровНаКлиенте(РезультатВыполнения);
		Иначе
			ПрогрессВыполненияЗадания = Мин(Макс(ПрогрессВыполненияЗадания + 1, РезультатВыполнения.Процент), 99);
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияРаботаСПочтой);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗаданияОтправкаРеестров", 
				ПараметрыОбработчикаОжиданияРаботаСПочтой.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыОтправкаРеестров()
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("УчетнаяЗапись",	Объект.УчетнаяЗапись);
	ПараметрыЗадания.Вставить("Организация",	Объект.Организация);
	
	Возврат ПараметрыЗадания;
	
КонецФункции

&НаСервере
Функция НачатьОтправкаРеестровНаСервере()

	НазначениеПроверкиЗаполнения = "ОтправкаРеестров";
	Отказ = НЕ ПроверитьЗаполнение();
	НазначениеПроверкиЗаполнения = "";

	Если Отказ Тогда
		РезультатВыполнения = Новый Структура();
		РезультатВыполнения.Вставить("ЗаданиеВыполнено", 		Истина);
		РезультатВыполнения.Вставить("ОтказПроверкиЗаполнения", Истина);
		Возврат РезультатВыполнения;
	КонецЕсли;

	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗаданияРаботаСПочтой);
	
	ИдентификаторЗаданияРаботаСПочтой = Неопределено;

	ПараметрыЗадания = ПодготовитьПараметрыОтправкаРеестров();
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Обработки.СверкаДанныхУчетаНДС.ОтветитьНаЗапросыПокупателей",
		ПараметрыЗадания,
		НСтр("ru = 'Сверка данных учета НДС: отправка реестров покупателям'"));
		
	АдресХранилищаРаботаСПочтой			= РезультатВыполнения.АдресХранилища;
	ИдентификаторЗаданияРаботаСПочтой	= РезультатВыполнения.ИдентификаторЗадания;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		РезультатВыполнения = ЗагрузитьПодготовленныеДанныеОтправкаРеестров();
	Иначе
		ОтобразитьЭлементыОжиданиеОтправкаРеестров();
	КонецЕсли;
	
	Возврат РезультатВыполнения;

КонецФункции

&НаСервере
Функция ЗагрузитьПодготовленныеДанныеОтправкаРеестров()

	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилищаРаботаСПочтой);
	
	Если ТипЗнч(РезультатВыполнения) <> Тип("Структура") Тогда
		РезультатВыполнения = Новый Структура();
	КонецЕсли;
	
	РезультатВыполнения.Вставить("ЗаданиеВыполнено", Истина);
	
	ИдентификаторЗаданияРаботаСПочтой = Неопределено;
	УдалитьИзВременногоХранилища(АдресХранилищаРаботаСПочтой);
	АдресХранилищаРаботаСПочтой = "";
	
	СкрытьЭлементыОжиданиеОтправкаРеестров();
	
	// Обновляем динамические списки на форме
	Элементы.СписокЗапросыПокупателей.Обновить();
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьРезультатВыполненияОтправкаРеестровНаКлиенте(РезультатВыполнения)

	ЗаголовокСообщения = НСтр("ru = 'Отправка реестров покупателям'");

	Если РезультатВыполнения.Свойство("ВсегоЗаписей")
		И РезультатВыполнения.Свойство("Обработано")
		И РезультатВыполнения.Свойство("СОшибками") Тогда

		Если РезультатВыполнения.ВсегоЗаписей = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Необходимо отметить покупателей для отправки реестров'");
			ПоказатьПредупреждение(, ТекстСообщения, , ЗаголовокСообщения);
			Возврат;
		КонецЕсли;

		ТекстСообщения = "";
		Если РезультатВыполнения.СОшибками = 0 Тогда
			Если РезультатВыполнения.Обработано = 1 Тогда
				ТекстСообщения = НСтр("ru = 'Реестр счетов-фактур отправлен покупателю'");
			Иначе
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Отправлены %1 покупателям'"),
					СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
						РезультатВыполнения.Обработано, НСтр("ru = 'реестр, реестра, реестров'")));
			КонецЕсли;
		Иначе
			ТекстСообщения = СтрШаблон(НСтр("ru = 'При отправке %1 возникли ошибки'"),
				СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
					РезультатВыполнения.СОшибками, НСтр("ru = 'реестра, реестров, реестров'")));
		КонецЕсли;
		ПоказатьПредупреждение(, ТекстСообщения, , ЗаголовокСообщения);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗаданиеОтправкаРеестров()

	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияОтправкаРеестров");

	Если ЗначениеЗаполнено(ИдентификаторЗаданияРаботаСПочтой) Тогда
	
		МассивИдентификаторов = Новый Массив();
		МассивИдентификаторов.Добавить(ИдентификаторЗаданияРаботаСПочтой);
		ОтменитьВыполнениеЗаданий(МассивИдентификаторов);
		
	КонецЕсли;

	ИдентификаторЗаданияРаботаСПочтой = Неопределено;

	СкрытьЭлементыОжиданиеОтправкаРеестров();
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьЭлементыОжиданиеОтправкаРеестров()

	Элементы.СтраницыЗапросыПокупателейСтадии.ТекущаяСтраница = Элементы.СтраницаЗапросыПокупателямПрогресс;
	Элементы.ОтборЗапросыПокупателей.Доступность = Ложь;

	УстановитьДоступностьЭлементовШапки(ЭтотОбъект, Ложь);

	// Запретим другие команды, связанные с работой с почтой
	
	// Закладка ЗапросыПоставщикам
	Элементы.ЗапроситьРеестры.Доступность 		= Ложь;
	Элементы.ЗапроситьРеестрыЕще.Доступность 	= Ложь;

	// Закладка ОтветыПоставщиков
	Элементы.ПрочитатьПочтуОтветыПоставщиков.Доступность	= Ложь;
	Элементы.ПрочитатьПочтуОтветыПоставщиковЕще.Доступность	= Ложь;

КонецПроцедуры

&НаСервере
Процедура СкрытьЭлементыОжиданиеОтправкаРеестров()

	Элементы.СтраницыЗапросыПокупателейСтадии.ТекущаяСтраница = Элементы.СтраницаЗапросыПокупателейТаблица;
	Элементы.ОтборЗапросыПокупателей.Доступность = Истина;

	УстановитьДоступностьЭлементовШапки(ЭтотОбъект, Истина);

	// Разрешим другие команды, связанные с работой с почтой
	
	// Закладка ЗапросыПоставщикам
	Элементы.ЗапроситьРеестры.Доступность 		= Истина;
	Элементы.ЗапроситьРеестрыЕще.Доступность 	= Истина;

	// Закладка ОтветыПоставщиков
	Элементы.ПрочитатьПочтуОтветыПоставщиков.Доступность	= Истина;
	Элементы.ПрочитатьПочтуОтветыПоставщиковЕще.Доступность	= Истина;

КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаРеестров

&НаКлиенте
Процедура НачатьЗагрузкаРеестровНаКлиенте(КонтрагентДляОтбора = Неопределено)

	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		// Возможно, что фоновое задание было запущено раньше.
		Если НЕ ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПоКонтрагенту = ЗначениеЗаполнено(КонтрагентДляОтбора);
	ОчиститьСообщения();
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияЗагрузкаРеестров");
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияЗагрузкаРеестровПоКонтрагенту");
	
	РезультатВыполнения = НачатьЗагрузкаРеестровНаСервере(КонтрагентДляОтбора);

	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ОбработатьРезультатВыполненияЗагрузкаРеестровНаКлиенте(РезультатВыполнения, ПоКонтрагенту);
	Иначе
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		Если ПоКонтрагенту Тогда
			ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияЗагрузкаРеестровПоКонтрагенту", 1, Истина);
		Иначе
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияЗагрузкаРеестров", 1, Истина);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияЗагрузкаРеестров()

	Попытка
		РезультатВыполнения = ПроверитьВыполнениеИПрогрессЗадания(ИдентификаторЗадания);
		Если РезультатВыполнения.ЗаданиеВыполнено Тогда 
			РезультатВыполнения = ЗагрузитьПодготовленныеДанныеЗагрузкаРеестров();
			ОбработатьРезультатВыполненияЗагрузкаРеестровНаКлиенте(РезультатВыполнения, Ложь);
		Иначе
			ПрогрессВыполненияЗадания = Мин(Макс(ПрогрессВыполненияЗадания + 1, РезультатВыполнения.Процент), 99);
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗаданияЗагрузкаРеестров", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияЗагрузкаРеестровПоКонтрагенту()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			РезультатВыполнения = ЗагрузитьПодготовленныеДанныеЗагрузкаРеестров();
			ОбработатьРезультатВыполненияЗагрузкаРеестровНаКлиенте(РезультатВыполнения, Истина);
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗаданияЗагрузкаРеестровПоКонтрагенту",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыЗагрузкаРеестров(КонтрагентДляОтбора = Неопределено)
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Организация", 		Объект.Организация);
	ПараметрыЗадания.Вставить("НалоговыйПериод", 	Объект.НалоговыйПериод);
	
	Если ЗначениеЗаполнено(КонтрагентДляОтбора) Тогда
		ПараметрыЗадания.Вставить("Контрагент", 	КонтрагентДляОтбора);
	КонецЕсли;
	
	Возврат ПараметрыЗадания;
	
КонецФункции

&НаСервере
Функция НачатьЗагрузкаРеестровНаСервере(КонтрагентДляОтбора = Неопределено)

	Объект.ЗапросыПоставщикам.Очистить();

	НазначениеПроверкиЗаполнения = "ЗагрузкаРеестров";
	Отказ = Не ПроверитьЗаполнение();
	НазначениеПроверкиЗаполнения = "";

	Если Отказ Тогда
		Возврат Новый Структура("ЗаданиеВыполнено, ОтказПроверкиЗаполнения", Истина, Истина);
	КонецЕсли;

	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;

	ПараметрыЗадания = ПодготовитьПараметрыЗагрузкаРеестров(КонтрагентДляОтбора);
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Обработки.СверкаДанныхУчетаНДС.ЗагрузитьРеестрыПоставщиков",
		ПараметрыЗадания,
		НСтр("ru = 'Сверка данных учета НДС: загрузка реестров поставщиков'"));
		
	АдресХранилища   		= РезультатВыполнения.АдресХранилища;
	ИдентификаторЗадания	= РезультатВыполнения.ИдентификаторЗадания;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		РезультатВыполнения = ЗагрузитьПодготовленныеДанныеЗагрузкаРеестров();
	Иначе
		ОтобразитьЭлементыПрогрессЗагрузкаРеестров();
	КонецЕсли;
	
	Возврат РезультатВыполнения;

КонецФункции

&НаСервере
Функция ЗагрузитьПодготовленныеДанныеЗагрузкаРеестров()

	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(РезультатВыполнения) <> Тип("Структура") Тогда
		РезультатВыполнения = Новый Структура();
	КонецЕсли;
	
	РезультатВыполнения.Вставить("ЗаданиеВыполнено", Истина);
	
	ИдентификаторЗадания = Неопределено;
	УдалитьИзВременногоХранилища(АдресХранилища);
	АдресХранилища = "";
	
	СкрытьЭлементыПрогрессЗагрузкаРеестров(ЭтотОбъект);
	
	Элементы.СписокОтветыПоставщиков.Обновить();
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьРезультатВыполненияЗагрузкаРеестровНаКлиенте(РезультатВыполнения, ПоКонтрагенту)

	ЗаголовокСообщения = НСтр("ru = 'Загрузка реестров счетов-фактур'");

	Если РезультатВыполнения.Свойство("ВсегоЗаписей")
		И РезультатВыполнения.Свойство("Обработано")
		И РезультатВыполнения.Свойство("СОшибками") Тогда

		Если РезультатВыполнения.ВсегоЗаписей = 0 Тогда
			Если ПоКонтрагенту Тогда
				ТекстСообщения = СтрШаблон(НСтр("ru = 'От ""%1"" не были получены реестры счетов-фактур для загрузки.'"),
					Объект.Контрагент);
			Иначе
				ТекстСообщения = НСтр("ru = 'Необходимо отметить поставщиков для загрузки реестров'");
			КонецЕсли;
			ПоказатьПредупреждение(, ТекстСообщения, , ЗаголовокСообщения);
			Возврат;
		КонецЕсли;

		ТекстСообщения = "";
		Если РезультатВыполнения.Обработано > 0 Тогда
			Если РезультатВыполнения.Обработано = 1 Тогда
				ТекстСообщения = НСтр("ru = 'Загружен реестр от поставщика.'");
			Иначе
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Загружены %1 от поставщиков.'"),
					СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
						РезультатВыполнения.Обработано, НСтр("ru = 'реестр, реестра, реестров'")));
			КонецЕсли;
			
		КонецЕсли;
		
		Если РезультатВыполнения.СОшибками > 0 Тогда
		
			Если ЗначениеЗаполнено(ТекстСообщения) Тогда
				ТекстСообщения = ТекстСообщения + Символы.ПС;
			КонецЕсли;
		
			Если РезультатВыполнения.СОшибками = 1 Тогда
				ТекстСообщения = ТекстСообщения + Символы.ПС
					+ НСтр("ru = 'При загрузке одного реестра возникла ошибка.'");
			Иначе
				ТекстСообщения = ТекстСообщения + Символы.ПС
					+ СтрШаблон(НСтр("ru = 'При загрузке %1 возникли ошибки.'"),
						СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(
							РезультатВыполнения.СОшибками, НСтр("ru = 'реестра, реестров, реестров'")));
			КонецЕсли;
		КонецЕсли;

		Если ПоКонтрагенту И РезультатВыполнения.СОшибками = 0 Тогда
			// Запускаем формирование отчета по выбранному контрагенту.
			СформироватьОтчетНаКлиенте();
		Иначе
			ПоказатьПредупреждение(, ТекстСообщения, , ЗаголовокСообщения);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗаданиеЗагрузкаРеестров()

	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияЗагрузкаРеестров");
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияЗагрузкаРеестровПоКонтрагенту");

	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
	
		МассивИдентификаторов = Новый Массив();
		МассивИдентификаторов.Добавить(ИдентификаторЗадания);
		ОтменитьВыполнениеЗаданий(МассивИдентификаторов);
		
	КонецЕсли;

	ИдентификаторЗадания = Неопределено;
	
	СкрытьЭлементыПрогрессЗагрузкаРеестров(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьЭлементыПрогрессЗагрузкаРеестров()

	ПрогрессВыполненияЗадания = 5;
	Элементы.СтраницыОтветыПоставщиковСтадии.ТекущаяСтраница = Элементы.СтраницаОтветыПоставщиковПрогресс;
	Элементы.ОтборОтветыПоставщикам.Доступность = Ложь;

	УстановитьДоступностьЭлементовШапки(ЭтотОбъект, Ложь);

	// Запретим другие команды, связанные с запуском фонового задания, кроме почты.
	
	// Закладка Сверка
	Элементы.Сформировать.Доступность	= Ложь;
	Элементы.СформироватьЕще.Доступность= Ложь;
	
	// Закладка ЗапросыПоставщика
	Элементы.ЗапроситьРеестры.Доступность	= Ложь;
	Элементы.ЗапроситьРеестрыЕще.Доступность= Ложь;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СкрытьЭлементыПрогрессЗагрузкаРеестров(Форма)

	Элементы = Форма.Элементы;

	Элементы.СтраницыОтветыПоставщиковСтадии.ТекущаяСтраница = Элементы.СтраницаОтветыПоставщиковТаблица;
	Элементы.ОтборОтветыПоставщикам.Доступность = Истина;

	УстановитьДоступностьЭлементовШапки(Форма, Истина);

	// Разрешить другие команды, связанные с запуском фонового задания, кроме почты.
	
	// Закладка Сверка
	Элементы.Сформировать.Доступность	= Истина;
	Элементы.СформироватьЕще.Доступность= Истина;
	
	// Закладка ЗапросыПоставщика
	Элементы.ЗапроситьРеестры.Доступность	= Истина;
	Элементы.ЗапроситьРеестрыЕще.Доступность= Истина;

КонецПроцедуры

#КонецОбласти

#Область УчетнаяЗапись

&НаСервереБезКонтекста
Функция РеквизитыУчетнойЗаписи(Знач УчетнаяЗапись)

	Результат = Новый Структура();
	Результат.Вставить("ИспользоватьДляОтправки", 	Ложь);
	Результат.Вставить("ИспользоватьДляПолучения", 	Ложь);
	Результат.Вставить("ПротоколВходящейПочты", 	"");
	
	Если ЗначениеЗаполнено(УчетнаяЗапись)
		И ПравоДоступа("Чтение", Метаданные.Справочники.УчетныеЗаписиЭлектроннойПочты) Тогда
		
		Результат = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			УчетнаяЗапись, "ИспользоватьДляОтправки, ИспользоватьДляПолучения, ПротоколВходящейПочты");
		
	КонецЕсли; 

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область РаботаСФоновымиЗаданиями

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(Знач ИдентификаторЗадания) 

	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);

КонецФункции

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗаданий(Знач МассивИдентификаторовЗаданий)

	Для Каждого ИдентификаторЗадания Из МассивИдентификаторовЗаданий Цикл
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьВыполнениеИПрогрессЗадания(Знач ИдентификаторЗадания) 

	РезультатВыполнения = Новый Структура();
	РезультатВыполнения.Вставить("ЗаданиеВыполнено",	Ложь);
	РезультатВыполнения.Вставить("Процент", 			0);

	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		РезультатВыполнения.ЗаданиеВыполнено 	= Истина;
		РезультатВыполнения.Процент 			= 100;
	Иначе
		Если ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			РезультатВыполнения.ЗаданиеВыполнено= Истина;
			РезультатВыполнения.Процент 		= 100;
		Иначе
			ПередаваемоеЗначение = ДлительныеОперации.ПрочитатьПрогресс(ИдентификаторЗадания);
			Если ТипЗнч(ПередаваемоеЗначение) = Тип("Структура")
				И ПередаваемоеЗначение.Свойство("Процент") Тогда
				РезультатВыполнения.Процент	 = ПередаваемоеЗначение.Процент;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатВыполнения;

КонецФункции

#КонецОбласти

#Область ПрочиеВспомогательныеПроцедуры

&НаСервереБезКонтекста
Функция КонтрагентКлючаЗаписи(Знач КлючЗаписи)

	Возврат КлючЗаписи.Контрагент;

КонецФункции

&НаСервереБезКонтекста
Функция СведенияОСтатусеПоследнегоЗапросаРеестровСчетовФактур(Знач Организация, Знач Контрагент, Знач НалоговыйПериод)

	Результат = Новый Структура();
	Результат.Вставить("СтатусЗапроса", Перечисления.СтатусыРеестровСчетовФактур.ПустаяСсылка());
	Результат.Вставить("ДатаЗаписи", 	'0001-01-01');
	Результат.Вставить("ДатаЗапроса", 	'0001-01-01');
	Результат.Вставить("ИдентификаторЗапроса", 	"");

	// Найдем, есть ли полученный от поставщика, но еще не загруженный реестр
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("Контрагент", 	Контрагент);
	Запрос.УстановитьПараметр("НалоговыйПериод",НалоговыйПериод);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(СтатусыЗапросовРеестровСчетовФактур.ДатаЗаписи) КАК ДатаЗаписи
	|ПОМЕСТИТЬ ВТ_ДатаЗаписиПоследнегоЗапроса
	|ИЗ
	|	РегистрСведений.СтатусыЗапросовРеестровСчетовФактур КАК СтатусыЗапросовРеестровСчетовФактур
	|ГДЕ
	|	СтатусыЗапросовРеестровСчетовФактур.Организация = &Организация
	|	И СтатусыЗапросовРеестровСчетовФактур.Контрагент = &Контрагент
	|	И СтатусыЗапросовРеестровСчетовФактур.НалоговыйПериод = &НалоговыйПериод
	|	И СтатусыЗапросовРеестровСчетовФактур.СтатусЗапроса <> ЗНАЧЕНИЕ(Перечисление.СтатусыРеестровСчетовФактур.Игнорируется)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтатусыЗапросовРеестровСчетовФактур.ДатаЗаписи,
	|	СтатусыЗапросовРеестровСчетовФактур.ДатаЗапроса,
	|	СтатусыЗапросовРеестровСчетовФактур.СтатусЗапроса,
	|	СтатусыЗапросовРеестровСчетовФактур.ИдентификаторЗапроса
	|ИЗ
	|	РегистрСведений.СтатусыЗапросовРеестровСчетовФактур КАК СтатусыЗапросовРеестровСчетовФактур
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ДатаЗаписиПоследнегоЗапроса КАК ВТ_ДатаЗаписиПоследнегоЗапроса
	|		ПО (СтатусыЗапросовРеестровСчетовФактур.Организация = &Организация)
	|			И (СтатусыЗапросовРеестровСчетовФактур.Контрагент = &Контрагент)
	|			И (СтатусыЗапросовРеестровСчетовФактур.НалоговыйПериод = &НалоговыйПериод)
	|			И (СтатусыЗапросовРеестровСчетовФактур.СтатусЗапроса <> ЗНАЧЕНИЕ(Перечисление.СтатусыРеестровСчетовФактур.Игнорируется))
	|			И СтатусыЗапросовРеестровСчетовФактур.ДатаЗаписи = ВТ_ДатаЗаписиПоследнегоЗапроса.ДатаЗаписи";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ОткрытьФормуЗагрузкиРеестраИзФайла()
	
	ПараметрыФормы = Новый Структура("РежимСверки,ИдентификаторВладельца", Истина, Строка(УникальныйИдентификатор));
	ОткрытьФорму("Документ.РеестрСчетовФактурПоставщика.Форма.ЗагрузкаИзФайла", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ОтобразитьРазделЗапросыПоставщикамИОтметитьСтрокуПоставщика(Знач Контрагент)

	Успешно = Ложь;

	ВыделитьТекущийРаздел("ГиперссылкаЗапросыПоставщикам");
	
	Для Каждого СтрокаТаблицы Из Объект.ЗапросыПоставщикам Цикл
	
		Если СтрокаТаблицы.Контрагент = Контрагент Тогда
			СтрокаТаблицы.Отправлять = Истина;
			Элементы.ЗапросыПоставщикам.ТекущаяСтрока = СтрокаТаблицы.ПолучитьИдентификатор();
			Успешно = Истина;
		Иначе
			СтрокаТаблицы.Отправлять = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Успешно;

КонецФункции

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()
	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СформироватьОтчет()

	СформироватьОтчетНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачатьЗаполнениеПоставщиков()

	НачатьЗаполнениеПоставщиковНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачатьЗапросРеестров()

	НачатьЗапросРеестровНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачатьЧтениеПочты()
	
	НачатьЧтениеПочтыНаКлиенте();

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНажатиеНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьОшибкиЗагрузкиЗапросов" Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("АдресХранилищаОписаниеОшибок", АдресХранилищаОписаниеОшибок);
		ПараметрыФормы.Вставить("Контекст", ПредопределенноеЗначение("Перечисление.ТипыЗапросовРеестровСчетовФактур.ЗапросПокупателя"));
		
		ОткрытьФорму("Обработка.СверкаДанныхУчетаНДС.Форма.ОписаниеОшибок", ПараметрыФормы, ЭтотОбъект);
	
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ПоказатьОшибкиЗагрузкиРеестров" Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("АдресХранилищаОписаниеОшибок", АдресХранилищаОписаниеОшибок);
		ПараметрыФормы.Вставить("Контекст", ПредопределенноеЗначение("Перечисление.ТипыЗапросовРеестровСчетовФактур.ЗапросПоставщику"));
		
		ОткрытьФорму("Обработка.СверкаДанныхУчетаНДС.Форма.ОписаниеОшибок", ПараметрыФормы, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
