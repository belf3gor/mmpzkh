#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Определяет, может ли иметь смысл сверка данных учета НДС -
// есть ли какие-либо данные, которые может понадобиться сверить.
// См. также ВозможнаСверкаНДСЗаПериод()
//
// Возвращаемое значение:
//  Булево - Истина, если сверка может иметь смысл.
//
Функция ВозможнаСверкаНДС() Экспорт
	
	Если Не ПравоДоступа("Просмотр", Метаданные.Документы.СчетФактураВыданный) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СчетФактураВыданный.Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.Проведен";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Определяет, может ли иметь смысл сверка данных учета НДС за конкретный период и по конкретной организации -
// есть ли какие-либо данные, которые может понадобиться сверить.
// См. также ВозможнаСверкаНДС()
//
// Параметры:
//  НачалоПериода	 - Дата - начало периода, за который проверяется наличие данных
//  КонецПериода	 - Дата	- конец периода, за который проверяется наличие данных
//  Организация		 - СправочникСсылка.Организации	- организация, по которой проверяется наличие данных
// 
// Возвращаемое значение:
//  Булево - Истина, если сверка может иметь смысл.
//
Функция ВозможнаСверкаНДСЗаПериод(НачалоПериода, КонецПериода, Организация) Экспорт
	
	Если Не ПравоДоступа("Просмотр", Метаданные.Документы.СчетФактураВыданный) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",  КонецПериода);
	Запрос.УстановитьПараметр("Организация",   Организация);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СчетФактураВыданный.Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.Проведен
	|	И СчетФактураВыданный.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И СчетФактураВыданный.Организация = &Организация";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции

// Подготавливает таблицу, содержащую поставщиков и состояние их реестров счетов-фактур в переданном налоговом периоде.
//
// Параметры:
//  Параметры - Структура - структура параметров фонового задания. Ключи структуры:
//    * НалоговыйПериод - Дата - Налоговый период, начало квартала.
//    * Организация - СправочникСсылка.Организации - покупатель товаров/услуг с НДС.
//  АдресХранилища- Строка - адрес временного хранилища, в которое помещается таблица поставщиков.
//                    Состав колонок таблицы см. НоваяТаблицаПоставщиков().
//
Процедура ЗаполнитьПоставщиков(Параметры, АдресХранилища) Экспорт
	
	Поставщики = ПодготовитьТаблицуПоставщиков(Параметры.НалоговыйПериод, Параметры.Организация);
	
	ПоместитьВоВременноеХранилище(Поставщики, АдресХранилища);
	
КонецПроцедуры

// Подготавливает запросы поставщикам на предоставление реестров счетов-фактур и отправляет их
// по электронной почте.
//
// Параметры:
//  Параметры - Структура - структура параметров фонового задания. Ключи структуры:
//    * ПолучателиЗапросов - ТаблицаЗначений - Таблица поставщиков которым будут отправлены запросы.
//                            Состав колонок таблицы см. НоваяТаблицаПоставщиков().
//    * Организация - СправочникСсылка.Организации - организация, от имени которой отправляются запросы.
//    * УчетнаяЗапись - СправочникСсылка.УчетныйЗаписиЭлектроннойПочты - учетная запись для отправки почтовых сообщений.
//    * НалоговыйПериод - Дата - период за который запрашиваются реестры, начало квартала.
//  АдресХранилища- Строка - адрес временного хранилища, в которое помещается результат работы фонового задания.
//                   Описание ключей структуры с результатом работы см. НовыйРезультатРаботыФоновогоЗадания().
//
Процедура ОтправитьЗапросыПоставщикам(Параметры, АдресХранилища) Экспорт
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ВремяНачалаОперации = ОценкаПроизводительности.НачатьЗамерВремени();
	
	ПолучателиЗапросов = Параметры.ПолучателиЗапросов;
	Организация        = Параметры.Организация;
	УчетнаяЗапись      = Параметры.УчетнаяЗапись;
	АдресДляОтвета     = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(УчетнаяЗапись, "АдресЭлектроннойПочты");
	
	Параметры.Удалить("ПолучателиЗапросов");
	
	Результат = НовыйРезультатРаботыФоновогоЗадания();
	
	Соединение = ОтправкаПочтовыхСообщений.УстановитьСоединениеССервером(УчетнаяЗапись);
	Если Соединение = Неопределено Тогда
		ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
		Возврат;
	КонецЕсли;
	
	ТекущийПрогресс = 0;
	Отправлено      = 0;
	ВсегоЗаписей    = ПолучателиЗапросов.Количество();
	
	РеквизитыПокупателя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ИНН, КПП, НаименованиеСокращенное");
	ЮридическийАдресПокупателя = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Организация,
		Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	РеквизитыПокупателя.Вставить("ЮридическийАдрес", ЮридическийАдресПокупателя);
	ОтветственныеЛица = ОтветственныеЛицаБП.ОтветственныеЛица(Организация, ТекущаяДатаСеанса());
	РеквизитыПокупателя.Вставить("ОтветственныеЛица", ОтветственныеЛица);
	
	Поставщики = ПолучателиЗапросов.ВыгрузитьКолонку("Контрагент");
	РеквизитыПоставщиков = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Поставщики, "ИНН, КПП, НаименованиеПолное");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторыЗапросов", ПолучателиЗапросов.ВыгрузитьКолонку("ИдентификаторЗапроса"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатусыЗапросовРеестровСчетовФактур.ИдентификаторЗапроса
	|ИЗ
	|	РегистрСведений.СтатусыЗапросовРеестровСчетовФактур КАК СтатусыЗапросовРеестровСчетовФактур
	|ГДЕ
	|	СтатусыЗапросовРеестровСчетовФактур.ИдентификаторЗапроса В (&ИдентификаторыЗапросов)";
	ОтправленныеЗапросы = Запрос.Выполнить().Выгрузить();
	
	ШаблонТекстаЗапроса = ПолучитьМакет("ШаблонТекстаЗапроса").ПолучитьТекст();
	
	Для Каждого ПолучательЗапроса Из ПолучателиЗапросов Цикл
		
		ПараметрыЗапросаРеестра = ПараметрыЗапросаРеестра(Параметры, ПолучательЗапроса, РеквизитыПокупателя,
			РеквизитыПоставщиков, АдресДляОтвета, ОтправленныеЗапросы);
		ЗапросРеестра = ПодготовитьЗапросРеестра(
			ПараметрыЗапросаРеестра, ШаблонТекстаЗапроса, РеквизитыПокупателя, РеквизитыПоставщиков, Соединение);
		
		ИдентификаторСообщения = РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗапись, ЗапросРеестра);
		
		Если ЗначениеЗаполнено(ИдентификаторСообщения) Тогда
			РегистрыСведений.СтатусыЗапросовРеестровСчетовФактур.СоздатьЗаписьПослеОтправкиЗапроса(ПараметрыЗапросаРеестра);
			Отправлено = Отправлено + 1;
			ПолучательЗапроса.ДатаЗапроса = ПараметрыЗапросаРеестра.ДатаЗапроса;
			ШаблонСтатусаРеестра = НСтр("ru='Запрошен %1'");
			ПолучательЗапроса.Реестр = СтрШаблон(
				ШаблонСтатусаРеестра,
				Формат(ПараметрыЗапросаРеестра.ДатаЗапроса, "ДЛФ=D"));
			ПолучательЗапроса.СтатусЗапроса = ПараметрыЗапросаРеестра.СтатусЗапроса;
			ПолучательЗапроса.Отправлять = Ложь;
			ПолучательЗапроса.ОтборЗапросаПоставщикам = 2;
			ПолучательЗапроса.ИдентификаторЗапроса = ПараметрыЗапросаРеестра.ИдентификаторЗапроса;
		КонецЕсли;
		
		ТекущийПрогресс = ТекущийПрогресс + 1;
		Выполнено = Окр(ТекущийПрогресс / ВсегоЗаписей * 100);
		
		ДлительныеОперации.СообщитьПрогресс(Выполнено, НСтр("ru='Отправка запросов поставщикам'"));
		
	КонецЦикла;
	
	Соединение.Отключиться();
	
	Результат = НовыйРезультатРаботыФоновогоЗадания();
	Результат.ВсегоЗаписей = ВсегоЗаписей;
	Результат.Обработано   = Отправлено;
	Результат.СОшибками    = ВсегоЗаписей - Отправлено;
	Результат.ЕстьОшибки   = Результат.СОшибками > 0;
	Результат.Вставить("ЗапросыПоставщикам", ПолучателиЗапросов);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
	Если ВсегоЗаписей < 11 Тогда
		КлючеваяОперация = НСтр("ru='ОтправкаЗапросовПоставщикам_1_10'");
	ИначеЕсли ВсегоЗаписей > 25 Тогда
		КлючеваяОперация = НСтр("ru='ОтправкаЗапросовПоставщикам_26'");
	Иначе
		КлючеваяОперация = НСтр("ru='ОтправкаЗапросовПоставщикам_11_25'");
	КонецЕсли;
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачалаОперации);
	
КонецПроцедуры

// Читает письма из указанной учетной записи электронной почты и создает на основании найденных XML вложений записи регистра
// СтатусыЗапросовРеестровСчетовФактур.
//
// Параметры:
//  Параметры - Структура - структура параметров фонового задания. Ключи структуры:
//    * УчетнаяЗапись - СправочникСсылка.УчетныйЗаписиЭлектроннойПочты - учетная запись для загрузки почтовых сообщений.
//    * ГлубинаПоиска - Число - глубина просмотра почтовых сообщений от текущей даты, в днях.
//  АдресХранилища- Строка - адрес временного хранилища, в которое помещается результат работы фонового задания.
//                   Описание ключей структуры с результатом работы см. НовыйРезультатРаботыФоновогоЗадания().
//
Процедура ПрочитатьДанныеИзЭлектроннойПочты(Параметры, АдресХранилища) Экспорт
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ВремяНачалаОперации = ОценкаПроизводительности.НачатьЗамерВремени();
	
	// Загрузка почтовых сообщений производится по всем организациям использующим выбранную учетную запись.
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = НовыйРезультатРаботыФоновогоЗадания();
	
	ДлительныеОперации.СообщитьПрогресс(5, НСтр("ru='Загрузка почтовых сообщений'"));
	Письма = ПрочитатьПисьма(Параметры);
	Если Письма = Неопределено Тогда
		ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
		Возврат;
	КонецЕсли;
	
	ДанныеПочтовыхВложений = ПрочитатьДанныеПочтовыхВложений(Письма);
	
	ДлительныеОперации.СообщитьПрогресс(95, НСтр("ru='Обновление данных информационной базы'"));
	ОбработаноЗапросов = РегистрыСведений.СтатусыЗапросовРеестровСчетовФактур.ОбновитьЗаписиЗапросовРеестровПослеЗагрузкиПочты(
		ДанныеПочтовыхВложений.ТаблицаЗапросовРеестров);
	ОбработаноРеестров = РегистрыСведений.СтатусыЗапросовРеестровСчетовФактур.ОбновитьЗаписиРеестровПослеЗагрузкиПочты(
		ДанныеПочтовыхВложений.ТаблицаРеестров);
	
	Результат.Обработано     = ОбработаноРеестров + ОбработаноЗапросов;
	Результат.СОшибками      = ДанныеПочтовыхВложений.ОписаниеОшибок.Количество();
	Результат.ВсегоЗаписей   = Результат.Обработано + Результат.СОшибками;
	Результат.ЕстьОшибки     = Результат.СОшибками > 0;
	Результат.ОписаниеОшибок = ДанныеПочтовыхВложений.ОписаниеОшибок;
	Результат.Вставить("ОбработаноРеестров", ОбработаноРеестров);
	Результат.Вставить("ОбработаноЗапросов", ОбработаноЗапросов);
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
	Если Результат.ВсегоЗаписей < 11 Тогда
		КлючеваяОперация = НСтр("ru='ЗагрузкаСообщений_1_10'");
	ИначеЕсли Результат.ВсегоЗаписей > 25 Тогда
		КлючеваяОперация = НСтр("ru='ЗагрузкаСообщений_26'");
	Иначе
		КлючеваяОперация = НСтр("ru='ЗагрузкаСообщений_11_25'");
	КонецЕсли;
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачалаОперации);
	
КонецПроцедуры

// Отправляет реестры счетов-фактур выданных в ответ на входящий запрос покупателя.
//
// Параметры:
//  Параметры - Структура - структура параметров фонового задания. Ключи структуры:
//    * Организация - СправочникСсылка.Организации - организация, от имени которой отправляются запросы.
//    * УчетнаяЗапись - СправочникСсылка.УчетныйЗаписиЭлектроннойПочты - учетная запись для отправки почтовых сообщений.
//  АдресХранилища- Строка - адрес временного хранилища, в которое помещается результат работы фонового задания.
//                   Описание ключей структуры с результатом работы см. НовыйРезультатРаботыФоновогоЗадания().
//
Процедура ОтветитьНаЗапросыПокупателей(Параметры, АдресХранилища) Экспорт
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ВремяНачалаОперации = ОценкаПроизводительности.НачатьЗамерВремени();
	
	Организация = Параметры.Организация;
	УчетнаяЗапись = Параметры.УчетнаяЗапись;
	
	СтатусыЗапроса = Новый Массив;
	СтатусыЗапроса.Добавить(Перечисления.СтатусыРеестровСчетовФактур.Неотвечено);
	СтатусыЗапроса.Добавить(Перечисления.СтатусыРеестровСчетовФактур.Игнорируется);
	
	Параметры.Вставить("ТипЗапроса"    , Перечисления.ТипыЗапросовРеестровСчетовФактур.ЗапросПокупателя);
	Параметры.Вставить("СтатусыЗапроса", СтатусыЗапроса);
	
	Результат = НовыйРезультатРаботыФоновогоЗадания();
	НеотвеченныеЗапросы = ПрочитатьЗаписиРегистра(Параметры);
	
	Если НеотвеченныеЗапросы.Количество() = 0 Тогда
		ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
		Возврат;
	КонецЕсли;
	
	Соединение = ОтправкаПочтовыхСообщений.УстановитьСоединениеССервером(УчетнаяЗапись);
	Если Соединение = Неопределено Тогда
		ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
		Возврат;
	КонецЕсли;
	
	ТекущийПрогресс = 0;
	Отправлено      = 0;
	ВсегоЗаписей    = НеотвеченныеЗапросы.Количество();
	
	РеквизитыПоставщика = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, "ИНН, КПП, НаименованиеСокращенное");
	
	Покупатели = НеотвеченныеЗапросы.ВыгрузитьКолонку("Контрагент");
	РеквизитыПокупателей = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(Покупатели, "ИНН, КПП, НаименованиеПолное");
	
	Для Каждого НеотвеченныйЗапрос Из НеотвеченныеЗапросы Цикл
		
		ПараметрыРеестра = ПараметрыРеестра(Параметры, НеотвеченныйЗапрос, РеквизитыПокупателей, РеквизитыПоставщика);
		РеестрСчетовФактур = ПодготовитьРеестр(ПараметрыРеестра, Соединение);
		
		ИдентификаторСообщения = РаботаСПочтовымиСообщениями.ОтправитьПочтовоеСообщение(УчетнаяЗапись, РеестрСчетовФактур);
		
		Если ЗначениеЗаполнено(ИдентификаторСообщения) Тогда
			НеотвеченныйЗапрос.СтатусЗапроса = Перечисления.СтатусыРеестровСчетовФактур.Отвечено;
			НеотвеченныйЗапрос.ДатаЗаписи    = ТекущаяДатаСеанса();
			НеотвеченныйЗапрос.Отметка       = Ложь;
			РегистрыСведений.СтатусыЗапросовРеестровСчетовФактур.ОбновитьЗаписьПослеОтправкиРеестра(НеотвеченныйЗапрос);
			Отправлено = Отправлено + 1;
		КонецЕсли;
		
		ТекущийПрогресс = ТекущийПрогресс + 1;
		Выполнено = Окр(ТекущийПрогресс / ВсегоЗаписей * 100);
		
		ДлительныеОперации.СообщитьПрогресс(Выполнено, НСтр("ru='Отправка реестров счетов-фактур покупателям'"));
		
	КонецЦикла;
	
	Соединение.Отключиться();
	
	Результат.ВсегоЗаписей = ВсегоЗаписей;
	Результат.Обработано   = Отправлено;
	Результат.СОшибками    = ВсегоЗаписей - Отправлено;
	Результат.ЕстьОшибки   = Результат.СОшибками > 0;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
	Если ВсегоЗаписей < 11 Тогда
		КлючеваяОперация = НСтр("ru='ОтправкаРеестров_1_10'");
	ИначеЕсли ВсегоЗаписей > 25 Тогда
		КлючеваяОперация = НСтр("ru='ОтправкаРеестров_26'");
	Иначе
		КлючеваяОперация = НСтр("ru='ОтправкаРеестров_11_25'");
	КонецЕсли;
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачалаОперации);
	
КонецПроцедуры

// Загружает реестры счетов-фактур поставщиков в ДокументОбъект.РеестрыСчетовФактурПоставщиков.
//
// Параметры:
//  Параметры - Структура - структура параметров фонового задания. Ключи структуры:
//    * Организация - СправочникСсылка.Организации - организация, от имени которой отправляются запросы.
//    * НалоговыйПериод - Дата - период за который запрашиваются реестры, начало квартала.
//    * Контрагент - СправочникСсылка.Контрагенты - Поставщик, реестр счетов-фактур будет загружен. Если не указан
//         то загружаются реестры всех поставщиков.
//  АдресХранилища- Строка - адрес временного хранилища, в которое помещается результат работы фонового задания.
//                   Описание ключей структуры с результатом работы см. НовыйРезультатРаботыФоновогоЗадания().
//
Процедура ЗагрузитьРеестрыПоставщиков(Параметры, АдресХранилища) Экспорт
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ВремяНачалаОперации = ОценкаПроизводительности.НачатьЗамерВремени();
	
	Результат = НовыйРезультатРаботыФоновогоЗадания();
	
	СтатусыЗапроса = Новый Массив;
	СтатусыЗапроса.Добавить(Перечисления.СтатусыРеестровСчетовФактур.ОжидаетЗагрузки);
	
	Параметры.Вставить("ТипЗапроса"    , Перечисления.ТипыЗапросовРеестровСчетовФактур.ЗапросПоставщику);
	Параметры.Вставить("СтатусыЗапроса", СтатусыЗапроса);
	
	Реестры = ПрочитатьЗаписиРегистра(Параметры);
	Если Реестры.Количество() = 0 Тогда
		ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
		Возврат;
	КонецЕсли;
	
	РезультатЗагрузкиРеестров = СверкаДанныхУчетаНДС.ЗагрузитьРеестрыСчетовФактурПоставщика(Реестры);
	
	ЗагруженоРеестров = РезультатЗагрузкиРеестров.ЗагруженныеРеестры.Количество();
	
	РегистрыСведений.СтатусыЗапросовРеестровСчетовФактур.ОбновитьЗаписиПослеЗагрузкиРеестров(Реестры);
	
	Результат.ВсегоЗаписей   = ЗагруженоРеестров;
	Результат.Обработано     = ЗагруженоРеестров;
	
	ПоместитьВоВременноеХранилище(Результат, АдресХранилища);
	
	Если ЗагруженоРеестров < 11 Тогда
		КлючеваяОперация = НСтр("ru='ЗагрузкаРеестров_1_10'");
	ИначеЕсли ЗагруженоРеестров > 25 Тогда
		КлючеваяОперация = НСтр("ru='ЗагрузкаРеестров_26'");
	Иначе
		КлючеваяОперация = НСтр("ru='ЗагрузкаРеестров_11_25'");
	КонецЕсли;
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительности.ЗакончитьЗамерВремени(КлючеваяОперация, ВремяНачалаОперации);
	
КонецПроцедуры

#Область СлужебныйПрограммныйИнтерфейс

// Позволяет отметить загруженные в информационную базу письма по заголовкам почтовых сообщений.
// Заголовки писем с установленным свойством ПисьмоЗагружено = Истина не будут получены с почтового сервера.
//
// Параметры:
//  ЗаголовкиПисем - ТаблицаЗначений - состав колонок таблицы значений см. ЗагрузкаПочтовыхСообщений.СоздатьАдаптированноеОписаниеПисьма().
//
Процедура ОтметитьЗаголовкиЗагруженныхПисем(ЗаголовкиПисем) Экспорт
	
	ТаблицаИдентификаторов = Новый ТаблицаЗначений;
	ТаблицаИдентификаторов.Колонки.Добавить("ИндексСтроки"          , ОбщегоНазначения.ОписаниеТипаЧисло(10));
	ТаблицаИдентификаторов.Колонки.Добавить("ИдентификаторСообщения", ОбщегоНазначения.ОписаниеТипаСтрока(100));
	
	Для Каждого СтрокаЗаголовка Из ЗаголовкиПисем Цикл
	
		Если СтрокаЗаголовка.ПисьмоЗагружено Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ТаблицаИдентификаторов.Добавить();
		НоваяСтрока.ИндексСтроки           = ЗаголовкиПисем.Индекс(СтрокаЗаголовка);
		НоваяСтрока.ИдентификаторСообщения = СтрокаЗаголовка.ИдентификаторСообщения;
	
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаИдентификаторов", ТаблицаИдентификаторов);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаИдентификаторов.ИндексСтроки КАК ИндексСтроки,
	|	ТаблицаИдентификаторов.ИдентификаторСообщения КАК ИдентификаторСообщения
	|ПОМЕСТИТЬ ВТ_ТаблицаИдентификаторов
	|ИЗ
	|	&ТаблицаИдентификаторов КАК ТаблицаИдентификаторов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторСообщения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ТаблицаИдентификаторов.ИндексСтроки
	|ИЗ
	|	ВТ_ТаблицаИдентификаторов КАК ВТ_ТаблицаИдентификаторов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗапросовРеестровСчетовФактур КАК СтатусыЗапросовРеестровСчетовФактур
	|		ПО ВТ_ТаблицаИдентификаторов.ИдентификаторСообщения = СтатусыЗапросовРеестровСчетовФактур.ИдентификаторПочтовогоСообщения";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаголовкиПисем[Выборка.ИндексСтроки].ПисьмоЗагружено = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Создает новую таблицу с данными поставщиков.
//
// Возвращаемое значение:
//  ТаблицаЗначений.
//
Функция НоваяТаблицаПоставщиков() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Отправлять", Новый ОписаниеТипов("Булево"));
	Результат.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	Результат.Колонки.Добавить("Реестр", Новый ОписаниеТипов("Строка", ,
		Новый КвалификаторыСтроки(50, ДопустимаяДлина.Переменная)));
	Результат.Колонки.Добавить("ЭлектроннаяПочта", Новый ОписаниеТипов("Строка", ,
		Новый КвалификаторыСтроки(100, ДопустимаяДлина.Переменная)));
	Результат.Колонки.Добавить("ИдентификаторЗапроса", Новый ОписаниеТипов("Строка", ,
		Новый КвалификаторыСтроки(36, ДопустимаяДлина.Переменная)));
	Результат.Колонки.Добавить("ИдентификаторСтроки", Новый ОписаниеТипов("Строка", ,
		Новый КвалификаторыСтроки(36, ДопустимаяДлина.Переменная)));
	Результат.Колонки.Добавить("ДатаЗапроса", Новый ОписаниеТипов("Дата", , ,
		Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	Результат.Колонки.Добавить("СтатусЗапроса", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыРеестровСчетовФактур"));
	Результат.Колонки.Добавить("ОписаниеОшибки", Новый ОписаниеТипов("Строка", ,
		Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	Результат.Колонки.Добавить("ОтборЗапросаПоставщикам", Новый ОписаниеТипов("Число",
		Новый КвалификаторыЧисла(1, 0, ДопустимыйЗнак.Неотрицательный)));
	Результат.Колонки.Добавить("Сумма",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	Результат.Колонки.Добавить("СуммаНДС",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПодготовитьТаблицуПоставщиков(НалоговыйПериод, Организация)
	
	СтатусыЗакрытыхЗапросов = Новый Массив;
	СтатусыЗакрытыхЗапросов.Добавить(Перечисления.СтатусыРеестровСчетовФактур.ГотовКСверке);
	СтатусыЗакрытыхЗапросов.Добавить(Перечисления.СтатусыРеестровСчетовФактур.Игнорируется);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВсяОрганизация"          , ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(Организация));
	Запрос.УстановитьПараметр("Организация"             , Организация);
	Запрос.УстановитьПараметр("ЧастьЖурнала"            , Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры);
	Запрос.УстановитьПараметр("НачалоКвартала"          , НачалоКвартала(НалоговыйПериод));
	Запрос.УстановитьПараметр("КонецКвартала"           , КонецКвартала(НалоговыйПериод));
	Запрос.УстановитьПараметр("СтатусыЗакрытыхЗапросов" , СтатусыЗакрытыхЗапросов);
	Запрос.УстановитьПараметр("ТекущаяДата"             , ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("EMAILКонтрагента"        , БухгалтерскийУчетПереопределяемый.ВидКонтактнойИнформацииEMAILКонтрагента());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ОшибочныеРеквизитыКонтрагентов.Период) КАК Период,
	|	ОшибочныеРеквизитыКонтрагентов.ИсходныйСчетФактура КАК ИсходныйСчетФактура,
	|	ОшибочныеРеквизитыКонтрагентов.Контрагент КАК Контрагент,
	|	ОшибочныеРеквизитыКонтрагентов.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_ДатаКрайнегоСФНаИСО
	|ИЗ
	|	РегистрСведений.ОшибочныеРеквизитыКонтрагентов КАК ОшибочныеРеквизитыКонтрагентов
	|ГДЕ
	|	ОшибочныеРеквизитыКонтрагентов.Организация В(&ВсяОрганизация)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОшибочныеРеквизитыКонтрагентов.ИсходныйСчетФактура,
	|	ОшибочныеРеквизитыКонтрагентов.Контрагент,
	|	ОшибочныеРеквизитыКонтрагентов.Организация
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	Организация,
	|	ИсходныйСчетФактура,
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ОшибочныеРеквизитыКонтрагентов.Регистратор) КАК СчетФактура,
	|	ОшибочныеРеквизитыКонтрагентов.Контрагент КАК Контрагент,
	|	ОшибочныеРеквизитыКонтрагентов.Организация КАК Организация,
	|	ОшибочныеРеквизитыКонтрагентов.ИсходныйСчетФактура КАК ИсходныйСчетФактура
	|ПОМЕСТИТЬ ВТ_КрайнийСчетФактураНаИСО
	|ИЗ
	|	РегистрСведений.ОшибочныеРеквизитыКонтрагентов КАК ОшибочныеРеквизитыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДатаКрайнегоСФНаИСО КАК ВТ_ДатаКрайнегоСФНаИСО
	|		ПО (ОшибочныеРеквизитыКонтрагентов.Период = ВТ_ДатаКрайнегоСФНаИСО.Период)
	|			И (ОшибочныеРеквизитыКонтрагентов.Организация = ВТ_ДатаКрайнегоСФНаИСО.Организация)
	|			И (ОшибочныеРеквизитыКонтрагентов.ИсходныйСчетФактура = ВТ_ДатаКрайнегоСФНаИСО.ИсходныйСчетФактура)
	|			И (ОшибочныеРеквизитыКонтрагентов.Контрагент = ВТ_ДатаКрайнегоСФНаИСО.Контрагент)
	|ГДЕ
	|	НЕ ВТ_ДатаКрайнегоСФНаИСО.Организация ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ОшибочныеРеквизитыКонтрагентов.Организация,
	|	ОшибочныеРеквизитыКонтрагентов.ИсходныйСчетФактура,
	|	ОшибочныеРеквизитыКонтрагентов.Контрагент
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент,
	|	Организация,
	|	ИсходныйСчетФактура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОшибочныеРеквизитыКонтрагентов.СчетФактура КАК СчетФактура,
	|	ОшибочныеРеквизитыКонтрагентов.Организация КАК Организация,
	|	ОшибочныеРеквизитыКонтрагентов.Контрагент КАК Контрагент,
	|	ВТ_КрайнийСчетФактураНаИСО.СчетФактура КАК КрайнийСчетФактура
	|ПОМЕСТИТЬ ВТ_СведенияОКрайнихСФнаИСО
	|ИЗ
	|	РегистрСведений.ОшибочныеРеквизитыКонтрагентов КАК ОшибочныеРеквизитыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КрайнийСчетФактураНаИСО КАК ВТ_КрайнийСчетФактураНаИСО
	|		ПО (ОшибочныеРеквизитыКонтрагентов.Организация = ВТ_КрайнийСчетФактураНаИСО.Организация)
	|			И (ОшибочныеРеквизитыКонтрагентов.Контрагент = ВТ_КрайнийСчетФактураНаИСО.Контрагент)
	|			И (ОшибочныеРеквизитыКонтрагентов.ИсходныйСчетФактура = ВТ_КрайнийСчетФактураНаИСО.ИсходныйСчетФактура)
	|ГДЕ
	|	НЕ ВТ_КрайнийСчетФактураНаИСО.Организация ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура,
	|	Организация,
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЖурналУчетаСчетовФактур.Контрагент.ГоловнойКонтрагент КАК Контрагент,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры
	|			КОГДА ЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры
	|			КОГДА ЖурналУчетаСчетовФактур.ДатаИсправления <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ЖурналУчетаСчетовФактур.ДатаИсправления
	|			ИНАЧЕ ЖурналУчетаСчетовФактур.ДатаСчетаФактуры
	|		КОНЕЦ) КАК ДатаСчетаФактуры,
	|	СУММА(ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуре - ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУменьшение + ЖурналУчетаСчетовФактур.СуммаПоСчетуФактуреРазницаУвеличение) КАК Сумма,
	|	СУММА(ЖурналУчетаСчетовФактур.СуммаНДС - ЖурналУчетаСчетовФактур.СуммаНДСРазницаУменьшение + ЖурналУчетаСчетовФактур.СуммаНДСРазницаУвеличение) КАК СуммаНДС
	|ПОМЕСТИТЬ ЖурналСчетовФактур
	|ИЗ
	|	РегистрСведений.ЖурналУчетаСчетовФактур КАК ЖурналУчетаСчетовФактур
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СведенияОКрайнихСФнаИСО КАК ВТ_СведенияОКрайнихСФнаИСО
	|		ПО ЖурналУчетаСчетовФактур.Организация = ВТ_СведенияОКрайнихСФнаИСО.Организация
	|			И ЖурналУчетаСчетовФактур.Контрагент = ВТ_СведенияОКрайнихСФнаИСО.Контрагент
	|			И ЖурналУчетаСчетовФактур.СчетФактура = ВТ_СведенияОКрайнихСФнаИСО.СчетФактура
	|ГДЕ
	|	ЖурналУчетаСчетовФактур.Организация В(&ВсяОрганизация)
	|	И ЖурналУчетаСчетовФактур.ЧастьЖурнала = &ЧастьЖурнала
	|	И ЖурналУчетаСчетовФактур.ДатаВыставленияПолучения <> ДАТАВРЕМЯ(1, 1, 1)
	|	И ЖурналУчетаСчетовФактур.Период >= &НачалоКвартала
	|	И ВЫБОР
	|			КОГДА ЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ЖурналУчетаСчетовФактур.ДатаИсправленияКорректировочногоСчетаФактуры
	|			КОГДА ЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ЖурналУчетаСчетовФактур.ДатаКорректировочногоСчетаФактуры
	|			КОГДА ЖурналУчетаСчетовФактур.ДатаИсправления <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА ЖурналУчетаСчетовФактур.ДатаИсправления
	|			ИНАЧЕ ЖурналУчетаСчетовФактур.ДатаСчетаФактуры
	|		КОНЕЦ МЕЖДУ &НачалоКвартала И &КонецКвартала
	|	И (ВТ_СведенияОКрайнихСФнаИСО.КрайнийСчетФактура ЕСТЬ NULL 
	|			ИЛИ ВТ_СведенияОКрайнихСФнаИСО.КрайнийСчетФактура = ЖурналУчетаСчетовФактур.СчетФактура)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЖурналУчетаСчетовФактур.Контрагент.ГоловнойКонтрагент
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеестрСчетовФактурПоставщика.Ссылка КАК РеестрПоставщика,
	|	РеестрСчетовФактурПоставщика.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ РеестрыПоставщиков
	|ИЗ
	|	Документ.РеестрСчетовФактурПоставщика КАК РеестрСчетовФактурПоставщика
	|ГДЕ
	|	НЕ РеестрСчетовФактурПоставщика.ПометкаУдаления
	|	И РеестрСчетовФактурПоставщика.Организация = &Организация
	|	И РеестрСчетовФактурПоставщика.Контрагент В
	|			(ВЫБРАТЬ
	|				ЖурналСчетовФактур.Контрагент
	|			ИЗ
	|				ЖурналСчетовФактур КАК ЖурналСчетовФактур)
	|	И РеестрСчетовФактурПоставщика.НалоговыйПериод = &НачалоКвартала
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	РеестрПоставщика,
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА РеестрСчетовФактурПоставщикаСчетаФактуры.ДатаИсправленияКорректировочногоСчетаФактуры <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА РеестрСчетовФактурПоставщикаСчетаФактуры.ДатаИсправленияКорректировочногоСчетаФактуры
	|			КОГДА РеестрСчетовФактурПоставщикаСчетаФактуры.ДатаКорректировочногоСчетаФактуры <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА РеестрСчетовФактурПоставщикаСчетаФактуры.ДатаКорректировочногоСчетаФактуры
	|			КОГДА РеестрСчетовФактурПоставщикаСчетаФактуры.ДатаИсправления <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА РеестрСчетовФактурПоставщикаСчетаФактуры.ДатаИсправления
	|			ИНАЧЕ РеестрСчетовФактурПоставщикаСчетаФактуры.ДатаСчетаФактуры
	|		КОНЕЦ) КАК ДатаСчетаФактурыПоставщика,
	|	РеестрСчетовФактурПоставщикаСчетаФактуры.Ссылка.Контрагент КАК Контрагент
	|ПОМЕСТИТЬ ДатаАктуальностиРеестровПоставщиков
	|ИЗ
	|	Документ.РеестрСчетовФактурПоставщика.СчетаФактуры КАК РеестрСчетовФактурПоставщикаСчетаФактуры
	|ГДЕ
	|	РеестрСчетовФактурПоставщикаСчетаФактуры.Ссылка В
	|			(ВЫБРАТЬ
	|				РеестрыПоставщиков.РеестрПоставщика
	|			ИЗ
	|				РеестрыПоставщиков КАК РеестрыПоставщиков)
	|
	|СГРУППИРОВАТЬ ПО
	|	РеестрСчетовФактурПоставщикаСчетаФактуры.Ссылка.Контрагент
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусыЗапросовРеестровСчетовФактур.Контрагент КАК Контрагент,
	|	МАКСИМУМ(СтатусыЗапросовРеестровСчетовФактур.ДатаЗаписи) КАК ДатаЗаписи
	|ПОМЕСТИТЬ ДатаПоследнейЗаписи
	|ИЗ
	|	РегистрСведений.СтатусыЗапросовРеестровСчетовФактур КАК СтатусыЗапросовРеестровСчетовФактур
	|ГДЕ
	|	СтатусыЗапросовРеестровСчетовФактур.ТипЗапроса = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовРеестровСчетовФактур.ЗапросПоставщику)
	|	И СтатусыЗапросовРеестровСчетовФактур.Организация = &Организация
	|	И СтатусыЗапросовРеестровСчетовФактур.Контрагент В
	|			(ВЫБРАТЬ
	|				ЖурналСчетовФактур.Контрагент
	|			ИЗ
	|				ЖурналСчетовФактур КАК ЖурналСчетовФактур)
	|
	|СГРУППИРОВАТЬ ПО
	|	СтатусыЗапросовРеестровСчетовФактур.Контрагент
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатаПоследнейЗаписи.Контрагент КАК Контрагент,
	|	СтатусыЗапросовРеестровСчетовФактур.ЭлектроннаяПочта
	|ПОМЕСТИТЬ АдресаОтправленныхЗапросов
	|ИЗ
	|	ДатаПоследнейЗаписи КАК ДатаПоследнейЗаписи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыЗапросовРеестровСчетовФактур КАК СтатусыЗапросовРеестровСчетовФактур
	|		ПО ДатаПоследнейЗаписи.Контрагент = СтатусыЗапросовРеестровСчетовФактур.Контрагент
	|			И ДатаПоследнейЗаписи.ДатаЗаписи = СтатусыЗапросовРеестровСчетовФактур.ДатаЗаписи
	|			И (СтатусыЗапросовРеестровСчетовФактур.ТипЗапроса = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовРеестровСчетовФактур.ЗапросПоставщику))
	|			И (СтатусыЗапросовРеестровСчетовФактур.Организация = &Организация)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЖурналСчетовФактур.Контрагент КАК Контрагент,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА АдресаОтправленныхЗапросов.ЭлектроннаяПочта ЕСТЬ NULL 
	|				ТОГДА КонтрагентыКонтактнаяИнформация.АдресЭП
	|			КОГДА АдресаОтправленныхЗапросов.ЭлектроннаяПочта = """"
	|				ТОГДА КонтрагентыКонтактнаяИнформация.АдресЭП
	|			ИНАЧЕ АдресаОтправленныхЗапросов.ЭлектроннаяПочта
	|		КОНЕЦ) КАК ЭлектроннаяПочта
	|ПОМЕСТИТЬ АдресаЭлектроннойПочты
	|ИЗ
	|	ЖурналСчетовФактур КАК ЖурналСчетовФактур
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.КонтактнаяИнформация КАК КонтрагентыКонтактнаяИнформация
	|		ПО ЖурналСчетовФактур.Контрагент = КонтрагентыКонтактнаяИнформация.Ссылка
	|			И (КонтрагентыКонтактнаяИнформация.Вид = &EmailКонтрагента)
	|		ЛЕВОЕ СОЕДИНЕНИЕ АдресаОтправленныхЗапросов КАК АдресаОтправленныхЗапросов
	|		ПО ЖурналСчетовФактур.Контрагент = АдресаОтправленныхЗапросов.Контрагент
	|
	|СГРУППИРОВАТЬ ПО
	|	ЖурналСчетовФактур.Контрагент
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусыЗапросовРеестровСчетовФактур.ДатаЗаписи КАК ДатаЗапроса,
	|	СтатусыЗапросовРеестровСчетовФактур.Контрагент КАК Контрагент,
	|	СтатусыЗапросовРеестровСчетовФактур.ИдентификаторЗапроса,
	|	СтатусыЗапросовРеестровСчетовФактур.СтатусЗапроса КАК СтатусЗапроса
	|ПОМЕСТИТЬ ДатыЗапросовРеестров
	|ИЗ
	|	РегистрСведений.СтатусыЗапросовРеестровСчетовФактур КАК СтатусыЗапросовРеестровСчетовФактур
	|ГДЕ
	|	СтатусыЗапросовРеестровСчетовФактур.Организация = &Организация
	|	И СтатусыЗапросовРеестровСчетовФактур.Контрагент В
	|			(ВЫБРАТЬ
	|				ЖурналСчетовФактур.Контрагент
	|			ИЗ
	|				ЖурналСчетовФактур КАК ЖурналСчетовФактур)
	|	И СтатусыЗапросовРеестровСчетовФактур.НалоговыйПериод = &НачалоКвартала
	|	И СтатусыЗапросовРеестровСчетовФактур.ТипЗапроса = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовРеестровСчетовФактур.ЗапросПоставщику)
	|	И НЕ СтатусыЗапросовРеестровСчетовФактур.СтатусЗапроса В (&СтатусыЗакрытыхЗапросов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЖурналСчетовФактур.Контрагент,
	|	ЖурналСчетовФактур.СуммаНДС КАК СуммаНДС,
	|	ЖурналСчетовФактур.Сумма,
	|	ВЫБОР
	|		КОГДА НЕ ДатыЗапросовРеестров.ДатаЗапроса ЕСТЬ NULL 
	|			ТОГДА ДатыЗапросовРеестров.ДатаЗапроса
	|		КОГДА НЕ ДатаАктуальностиРеестровПоставщиков.ДатаСчетаФактурыПоставщика ЕСТЬ NULL 
	|			ТОГДА ДатаАктуальностиРеестровПоставщиков.ДатаСчетаФактурыПоставщика
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаЗапроса,
	|	ВЫБОР
	|		КОГДА ДатыЗапросовРеестров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыРеестровСчетовФактур.ОжидаетЗагрузки)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыРеестровСчетовФактур.ОжидаетЗагрузки)
	|		КОГДА ДатыЗапросовРеестров.СтатусЗапроса = ЗНАЧЕНИЕ(Перечисление.СтатусыРеестровСчетовФактур.Запрошен)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыРеестровСчетовФактур.Запрошен)
	|		КОГДА РеестрыПоставщиков.РеестрПоставщика ЕСТЬ NULL 
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыРеестровСчетовФактур.НеЗапрошен)
	|		КОГДА ЖурналСчетовФактур.ДатаСчетаФактуры > ДатаАктуальностиРеестровПоставщиков.ДатаСчетаФактурыПоставщика
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СтатусыРеестровСчетовФактур.Устарел)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СтатусыРеестровСчетовФактур.ГотовКСверке)
	|	КОНЕЦ КАК СтатусЗапроса,
	|	ЕСТЬNULL(ДатыЗапросовРеестров.ИдентификаторЗапроса, """") КАК ИдентификаторЗапроса,
	|	ЖурналСчетовФактур.Контрагент.ИНН КАК ИНН,
	|	ЖурналСчетовФактур.Контрагент.КПП КАК КПП,
	|	ЖурналСчетовФактур.Контрагент.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,
	|	АдресаЭлектроннойПочты.ЭлектроннаяПочта
	|ИЗ
	|	ЖурналСчетовФактур КАК ЖурналСчетовФактур
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДатаАктуальностиРеестровПоставщиков КАК ДатаАктуальностиРеестровПоставщиков
	|		ПО ЖурналСчетовФактур.Контрагент = ДатаАктуальностиРеестровПоставщиков.Контрагент
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДатыЗапросовРеестров КАК ДатыЗапросовРеестров
	|		ПО ЖурналСчетовФактур.Контрагент = ДатыЗапросовРеестров.Контрагент
	|		ЛЕВОЕ СОЕДИНЕНИЕ АдресаЭлектроннойПочты КАК АдресаЭлектроннойПочты
	|		ПО ЖурналСчетовФактур.Контрагент = АдресаЭлектроннойПочты.Контрагент
	|		ЛЕВОЕ СОЕДИНЕНИЕ РеестрыПоставщиков КАК РеестрыПоставщиков
	|		ПО ЖурналСчетовФактур.Контрагент = РеестрыПоставщиков.Контрагент
	|
	|УПОРЯДОЧИТЬ ПО
	|	СуммаНДС УБЫВ";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаПоставщиков = НоваяТаблицаПоставщиков();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат ТаблицаПоставщиков;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаПоставщиков.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если Выборка.СтатусЗапроса = Перечисления.СтатусыРеестровСчетовФактур.НеЗапрошен
			ИЛИ Выборка.СтатусЗапроса = Перечисления.СтатусыРеестровСчетовФактур.ОжидаетЗагрузки
			ИЛИ Выборка.СтатусЗапроса = Перечисления.СтатусыРеестровСчетовФактур.ГотовКСверке Тогда
			Реестр = Строка(Выборка.СтатусЗапроса);
			
		Иначе
			Реестр = НСтр("ru='%1 %2'");
			Реестр = СтрШаблон(Реестр,
				Строка(Выборка.СтатусЗапроса),
				Формат(Выборка.ДатаЗапроса, "ДЛФ=D"));
			
		КонецЕсли;
		НоваяСтрока.Реестр = Реестр;
		
		Если Выборка.СтатусЗапроса = Перечисления.СтатусыРеестровСчетовФактур.НеЗапрошен
			ИЛИ Выборка.СтатусЗапроса = Перечисления.СтатусыРеестровСчетовФактур.Устарел Тогда
			НоваяСтрока.ОтборЗапросаПоставщикам = 1;
		
		ИначеЕсли Выборка.СтатусЗапроса = Перечисления.СтатусыРеестровСчетовФактур.Запрошен
			ИЛИ Выборка.СтатусЗапроса = Перечисления.СтатусыРеестровСчетовФактур.ОжидаетЗагрузки Тогда
			НоваяСтрока.ОтборЗапросаПоставщикам = 2;
		
		Иначе
			НоваяСтрока.ОтборЗапросаПоставщикам = 3;
			
		КонецЕсли;
		
		Если Выборка.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			Если СтрДлина(Выборка.ИНН) <> 10 Тогда
				НоваяСтрока.ОписаниеОшибки = НоваяСтрока.ОписаниеОшибки
					+ НСтр("ru='ИНН юридического лица должен состоять из 10 символов.'") + " ";
			КонецЕсли;
			Если СтрДлина(Выборка.КПП) <> 9 Тогда
				НоваяСтрока.ОписаниеОшибки = НоваяСтрока.ОписаниеОшибки + НСтр("ru='КПП юридического лица должен состоять из 9 символов'");
			КонецЕсли;
			
		Иначе
			Если СтрДлина(Выборка.ИНН) <> 12 Тогда
				НоваяСтрока.ОписаниеОшибки = НоваяСтрока.ОписаниеОшибки
					+ НСтр("ru='ИНН физического лица должен состоять из 12 символов.'");
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяСтрока.Отправлять = (Выборка.СтатусЗапроса = Перечисления.СтатусыРеестровСчетовФактур.НеЗапрошен
			ИЛИ Выборка.СтатусЗапроса = Перечисления.СтатусыРеестровСчетовФактур.Устарел)
			И НЕ ЗначениеЗаполнено(НоваяСтрока.ОписаниеОшибки);
		
	КонецЦикла;
	
	Возврат ТаблицаПоставщиков;
	
КонецФункции

Функция ПараметрыЗапросаРеестра(ПараметрыЗадания, ПолучательЗапроса, РеквизитыПокупателя, РеквизитыПоставщиков, АдресДляОтвета, ОтправленныеЗапросы)
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("Организация"            , ПараметрыЗадания.Организация);
	Параметры.Вставить("НалоговыйПериод"        , ПараметрыЗадания.НалоговыйПериод);
	Параметры.Вставить("ИННПокупателя"          , СокрЛП(РеквизитыПокупателя.ИНН));
	Параметры.Вставить("КПППокупателя"          , СокрЛП(РеквизитыПокупателя.КПП));
	Параметры.Вставить("Контрагент"             , ПолучательЗапроса.Контрагент);
	Параметры.Вставить("ИННПоставщика"          , СокрЛП(РеквизитыПоставщиков[ПолучательЗапроса.Контрагент].ИНН));
	Параметры.Вставить("КПППоставщика"          , СокрЛП(РеквизитыПоставщиков[ПолучательЗапроса.Контрагент].КПП));
	Параметры.Вставить("АдресДляОтвета"         , АдресДляОтвета);
	Параметры.Вставить("ЭлектроннаяПочта"       , СокрЛП(ПолучательЗапроса.ЭлектроннаяПочта));
	Параметры.Вставить("ДатаЗапроса"            , ТекущаяДатаСеанса());
	Параметры.Вставить("ДатаЗаписи"             , ТекущаяДатаСеанса());
	Параметры.Вставить("ТипЗапроса"             , Перечисления.ТипыЗапросовРеестровСчетовФактур.ЗапросПоставщику);
	Параметры.Вставить("СтатусЗапроса"          , Перечисления.СтатусыРеестровСчетовФактур.Запрошен);
	Параметры.Вставить("Сумма"                  , ПолучательЗапроса.Сумма);
	Параметры.Вставить("СуммаНДС"               , ПолучательЗапроса.СуммаНДС);
	
	ИдентификаторЗапроса = Строка(Новый УникальныйИдентификатор);
	ИдентификаторОтправленногоЗапроса = "";
	Если ЗначениеЗаполнено(ПолучательЗапроса.ИдентификаторЗапроса)
		И ОтправленныеЗапросы.Найти(ПолучательЗапроса.ИдентификаторЗапроса, "ИдентификаторЗапроса") = Неопределено Тогда
		ИдентификаторЗапроса = ПолучательЗапроса.ИдентификаторЗапроса;
	Иначе
		ИдентификаторОтправленногоЗапроса = ПолучательЗапроса.ИдентификаторЗапроса;
	КонецЕсли;
	
	Параметры.Вставить("ИдентификаторЗапроса"             , ИдентификаторЗапроса);
	Параметры.Вставить("ИдентификаторОтправленногоЗапроса", ИдентификаторОтправленногоЗапроса);
	
	Возврат Параметры;
	
КонецФункции

Функция ПодготовитьЗапросРеестра(Параметры, ШаблонТекстаЗапроса, РеквизитыПокупателя, РеквизитыПоставщиков, Соединение)
	
	ЗапросРеестра = Новый Структура;
	
	ЗапросРеестра.Вставить("Кому", Параметры.ЭлектроннаяПочта);
	ШаблонТемыПисьма = НСтр("ru='Запрос на предоставление реестра счетов-фактур за %1 для %2 от %3'");
	ПредставлениеПериода = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
		НачалоКвартала(Параметры.НалоговыйПериод),
		КонецКвартала(Параметры.НалоговыйПериод),
		Истина);
	ПредставлениеПокупателя = РеквизитыПокупателя.НаименованиеСокращенное;
	ПредставлениеПоставщика = РеквизитыПоставщиков[Параметры.Контрагент].НаименованиеПолное;
	ТемаПисьма = СтрШаблон(ШаблонТемыПисьма,
		ПредставлениеПериода,
		ПредставлениеПоставщика,
		ПредставлениеПокупателя);
	ЗапросРеестра.Вставить("Тема", ТемаПисьма);
	
	ИННПоставщика = НСтр("ru='Не заполнено'");
	Если ЗначениеЗаполнено(Параметры.ИННПоставщика) Тогда
		ИННПоставщика = НСтр("ru='ИНН'") + " " + Параметры.ИННПоставщика;
	КонецЕсли;
	
	ИННПокупателя = НСтр("ru='Не заполнено'");
	
	Подпись = ОтправкаПочтовыхСообщенийПереопределяемый.ПодписьПисьма();
	Если СтрДлина(Параметры.ИННПокупателя) = 10 Тогда
		ИННПокупателя = НСтр("ru='ИНН'") + " " + Параметры.ИННПокупателя;
		Если НЕ ЗначениеЗаполнено(Подпись)
			И ЗначениеЗаполнено(РеквизитыПокупателя.ОтветственныеЛица.Руководитель) Тогда
			Подпись = НСтр("ru='С уважением'") + ", " + НРег(РеквизитыПокупателя.ОтветственныеЛица.РуководительДолжностьПредставление)
				+ " " + ПредставлениеПокупателя + " " + РеквизитыПокупателя.ОтветственныеЛица.РуководительПредставление;
		КонецЕсли;
		
	ИначеЕсли СтрДлина(Параметры.ИННПокупателя) = 12 Тогда
		ИННПокупателя = НСтр("ru='ИНН'") + " " + Параметры.ИННПокупателя;
		Если НЕ ЗначениеЗаполнено(Подпись)
			И ЗначениеЗаполнено(РеквизитыПокупателя.ОтветственныеЛица.Руководитель) Тогда
			Подпись = НСтр("ru='С уважением, индивидуальный предприниматель'")
				+ " " + РеквизитыПокупателя.ОтветственныеЛица.РуководительПредставление;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстПисьма = СтрШаблон(ШаблонТекстаЗапроса,
		ПредставлениеПериода,
		ПредставлениеПокупателя,
		ИННПокупателя,
		ПредставлениеПоставщика,
		ИННПоставщика,
		Подпись);
	
	ЗапросРеестра.Вставить("Тело",          ТекстПисьма);
	ЗапросРеестра.Вставить("Вложения",      СверкаДанныхУчетаНДС.ЗапросРеестраСчетовФактур(Параметры));
	ЗапросРеестра.Вставить("УдалятьФайлыПослеОтправки", Истина);
	ЗапросРеестра.Вставить("ТипТекста",     Перечисления.ТипыТекстовЭлектронныхПисем.HTML);
	ЗапросРеестра.Вставить("ПротоколПочты", "");
	ЗапросРеестра.Вставить("Соединение",    Соединение);
	
	Возврат ЗапросРеестра;
	
КонецФункции

Функция ПодготовитьРеестр(Параметры, Соединение)
	
	Реестр = Новый Структура;
	
	Реестр.Вставить("Кому", Параметры.ЭлектроннаяПочта);
	ШаблонТемыПисьма = НСтр("ru='Реестр счетов-фактур за %1 для %2 от %3'");
	ПредставлениеПериода = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
		НачалоКвартала(Параметры.НалоговыйПериод),
		КонецКвартала(Параметры.НалоговыйПериод));
	ТемаПисьма = СтрШаблон(ШаблонТемыПисьма,
		ПредставлениеПериода,
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Контрагент, "НаименованиеПолное"),
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Организация, "НаименованиеСокращенное"));
	Реестр.Вставить("Тема", ТемаПисьма);
	
	ДвоичныеДанные = СверкаДанныхУчетаНДС.РеестрСчетовФактурВXML(Параметры);
	
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ЗаменитьНедопустимыеСимволыВИмениФайла(ТемаПисьма);
	Если Прав(ИмяФайла, 1) = "." Тогда
		ИмяФайла = ИмяФайла + "xml";
	Иначе
		ИмяФайла = ИмяФайла + ".xml";
	КонецЕсли;
	
	ОписаниеФайла = Новый Соответствие;
	ОписаниеФайла.Вставить(ИмяФайла, ДвоичныеДанные);
	
	Реестр.Вставить("Тело", ОтправкаПочтовыхСообщений.ОписьВложенийПисьма(ОписаниеФайла));
	
	Реестр.Вставить("Вложения",                  ОписаниеФайла);
	Реестр.Вставить("УдалятьФайлыПослеОтправки", Истина);
	Реестр.Вставить("ТипТекста",                 Перечисления.ТипыТекстовЭлектронныхПисем.HTML);
	Реестр.Вставить("ПротоколПочты",             "");
	Реестр.Вставить("Соединение",                Соединение);
	
	Возврат Реестр;
	
КонецФункции

Функция ПараметрыРеестра(ПараметрыЗадания, НеотвеченныйЗапрос, РеквизитыПокупателей, РеквизитыПоставщика)
	
	Параметры = Новый Структура;
	
	Параметры.Вставить("ЧастьЖурнала"        , Перечисления.ЧастиЖурналаУчетаСчетовФактур.ВыставленныеСчетаФактуры);
	Параметры.Вставить("Организация"         , ПараметрыЗадания.Организация);
	Параметры.Вставить("Контрагент"          , НеотвеченныйЗапрос.Контрагент);
	Параметры.Вставить("НалоговыйПериод"     , НеотвеченныйЗапрос.НалоговыйПериод);
	Параметры.Вставить("ИННПокупателя"       , РеквизитыПокупателей[НеотвеченныйЗапрос.Контрагент].ИНН);
	Параметры.Вставить("КПППокупателя"       , РеквизитыПокупателей[НеотвеченныйЗапрос.Контрагент].КПП);
	Параметры.Вставить("ИННПоставщика"       , РеквизитыПоставщика.ИНН);
	Параметры.Вставить("КПППоставщика"       , РеквизитыПоставщика.КПП);
	Параметры.Вставить("ЭлектроннаяПочта"    , НеотвеченныйЗапрос.ЭлектроннаяПочта);
	Параметры.Вставить("ИдентификаторЗапроса", НеотвеченныйЗапрос.ИдентификаторЗапроса);
	
	Возврат Параметры;
	
КонецФункции

Функция НовыйРезультатРаботыФоновогоЗадания()
	
	Результат = Новый Структура;
	Результат.Вставить("ВсегоЗаписей"  , 0);
	Результат.Вставить("Обработано"    , 0);
	Результат.Вставить("СОшибками"     , 0);
	Результат.Вставить("ЕстьОшибки"    , Ложь);
	Результат.Вставить("ОписаниеОшибок", "");
	
	Возврат Результат;
	
КонецФункции

Функция ПрочитатьПисьма(Параметры)
	
	Параметры.Вставить("ВидОперации", "ЗагрузкаРеестровСчетовФактур");
	Письма = ЗагрузкаПочтовыхСообщений.ПрочитатьПисьма(Параметры);
	
	Если Письма = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Письма.Колонки.Добавить("ДанныеXML");
	
	ПисьмаБезВложений = Новый Массив;
	
	Для Каждого Письмо ИЗ Письма Цикл
		
		Для Каждого Вложение ИЗ Письмо.Вложения Цикл
			Если НЕ ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(Вложение.Ключ) = "xml" Тогда
				Продолжить;
			КонецЕсли;
			Письмо.ДанныеXML = Вложение.Значение;
			
		КонецЦикла;
		
		Если Письмо.ДанныеXML = Неопределено Тогда
			ПисьмаБезВложений.Добавить(Письмо);
		КонецЕсли;
		
	КонецЦикла;
	
	Письма.Колонки.Удалить("Вложения");
	
	Для Каждого ПисьмоБезВложения Из ПисьмаБезВложений Цикл
		Письма.Удалить(ПисьмоБезВложения);
	КонецЦикла;
	
	Возврат Письма;
	
КонецФункции

Функция ПрочитатьДанныеПочтовыхВложений(Письма)
	
	ТаблицыДанныхРеестров = СверкаДанныхУчетаНДС.ТаблицыДанныхРеестров(Письма);
	
	Возврат ТаблицыДанныхРеестров;
	
КонецФункции

// Возвращает записи регистра сведений, прочитанные с установленными отборами, в таблице значений.
//
// Параметры:
//  Параметры - Структура - Параметры отбора записей
//    * Организация   - СправочникСсылка.Организации - Организация.
//    * Контрагент - СправочникСсылка.Контрагенты - Контрагент. Если не указан - будут возвращены записи по всем контрагентам.
//    * ТипЗапроса - ПеречислениеСсылка.ТипыЗапросовРеестровСчетовФактур - Тип запроса.
//    * НалоговыйПериод - Дата - Налоговый период, начало квартала.
//    * СтатусЗапроса - ПеречислениеСсылка.СтатусыРеестровСчетовФактур - Статус запроса.
//
// Возвращаемое значение:
//  ТаблицаЗначений - Состав колонок таблицы значений смотри в запросе.
//
Функция ПрочитатьЗаписиРегистра(Параметры)
	
	НалоговыйПериод = '00010101';
	Если Параметры.Свойство("НалоговыйПериод") Тогда
		НалоговыйПериод = Параметры.НалоговыйПериод;
	КонецЕсли;
	
	Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	ПоВсемКонтрагентам = Истина;
	Если Параметры.Свойство("Контрагент") Тогда
		Контрагент = Параметры.Контрагент;
		ПоВсемКонтрагентам = Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация"       , ОбщегоНазначенияБПВызовСервераПовтИсп.ВсяОрганизация(Параметры.Организация));
	Запрос.УстановитьПараметр("ТипЗапроса"        , Параметры.ТипЗапроса);
	Запрос.УстановитьПараметр("СтатусыЗапроса"    , Параметры.СтатусыЗапроса);
	Запрос.УстановитьПараметр("НалоговыйПериод"   , НалоговыйПериод);
	Запрос.УстановитьПараметр("Контрагент"        , Контрагент);
	Запрос.УстановитьПараметр("ПоВсемКонтрагентам", ПоВсемКонтрагентам);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СтатусыЗапросовРеестровСчетовФактур.Организация,
	|	СтатусыЗапросовРеестровСчетовФактур.Контрагент,
	|	СтатусыЗапросовРеестровСчетовФактур.НалоговыйПериод,
	|	СтатусыЗапросовРеестровСчетовФактур.ИдентификаторЗапроса,
	|	СтатусыЗапросовРеестровСчетовФактур.ДатаЗаписи,
	|	СтатусыЗапросовРеестровСчетовФактур.ДатаЗапроса,
	|	СтатусыЗапросовРеестровСчетовФактур.ЭлектроннаяПочта,
	|	СтатусыЗапросовРеестровСчетовФактур.ТипЗапроса,
	|	СтатусыЗапросовРеестровСчетовФактур.СтатусЗапроса,
	|	СтатусыЗапросовРеестровСчетовФактур.Сумма,
	|	СтатусыЗапросовРеестровСчетовФактур.СуммаНДС,
	|	СтатусыЗапросовРеестровСчетовФактур.Отметка,
	|	СтатусыЗапросовРеестровСчетовФактур.ИдентификаторПочтовогоСообщения,
	|	СтатусыЗапросовРеестровСчетовФактур.ДанныеРеестра
	|ИЗ
	|	РегистрСведений.СтатусыЗапросовРеестровСчетовФактур КАК СтатусыЗапросовРеестровСчетовФактур
	|ГДЕ
	|	ВЫБОР &ПоВсемКонтрагентам
	|			КОГДА ИСТИНА
	|				ТОГДА СтатусыЗапросовРеестровСчетовФактур.Отметка
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И ВЫБОР &ПоВсемКонтрагентам
	|			КОГДА ЛОЖЬ
	|				ТОГДА СтатусыЗапросовРеестровСчетовФактур.Контрагент = &Контрагент
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И СтатусыЗапросовРеестровСчетовФактур.ТипЗапроса = &ТипЗапроса
	|	И СтатусыЗапросовРеестровСчетовФактур.СтатусЗапроса В (&СтатусыЗапроса)
	|	И СтатусыЗапросовРеестровСчетовФактур.Организация В(&Организация)
	|	И ВЫБОР
	|			КОГДА &НалоговыйПериод <> ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА СтатусыЗапросовРеестровСчетовФактур.НалоговыйПериод = &НалоговыйПериод
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат  Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

#КонецЕсли
