
////////////////////////////////////////////////////////////////////////////////
// ОСНОВНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ОсновныеПроцедурыМодуляФормы

&НаКлиентеНаСервереБезКонтекста
// Устанавливает видимость элементов формы.
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если НЕ Объект.ПриостановкаДействияУслуги Тогда
		Элементы.ПанельУслуги.Видимость        = Ложь;
	Иначе
		Элементы.ПанельУслуги.Видимость        = Истина;
		Элементы.ГруппаОтборПоУслуге.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ТипОбъекта.Доступность = НЕ Форма.ЗаблокироватьТипОбъекта;
	
	Если      Объект.ТипОбъекта = "Здания" Тогда
		Элементы.ДляЗданий.Видимость          = Истина;
		Элементы.ДляПодъездов.Видимость       = Ложь;
		Элементы.ДляКвартир.Видимость         = Ложь;
		Элементы.ДляЛицевыхСчетов.Видимость   = Ложь;
		Элементы.ДляПаркингов.Видимость       = Ложь;
		Элементы.ДляПарковочныхМест.Видимость = Ложь;
	ИначеЕсли Объект.ТипОбъекта = "Подъезды" Тогда
		Элементы.ДляЗданий.Видимость          = Ложь;
		Элементы.ДляПодъездов.Видимость       = Истина;
		Элементы.ДляКвартир.Видимость         = Ложь;
		Элементы.ДляЛицевыхСчетов.Видимость   = Ложь;
		Элементы.ДляПаркингов.Видимость       = Ложь;
		Элементы.ДляПарковочныхМест.Видимость = Ложь;
	ИначеЕсли Объект.ТипОбъекта = "Квартиры" Тогда
		Элементы.ДляЗданий.Видимость          = Ложь;
		Элементы.ДляПодъездов.Видимость       = Ложь;
		Элементы.ДляКвартир.Видимость         = Истина;
		Элементы.ДляЛицевыхСчетов.Видимость   = Ложь;
		Элементы.ДляПаркингов.Видимость       = Ложь;
		Элементы.ДляПарковочныхМест.Видимость = Ложь;
	ИначеЕсли Объект.ТипОбъекта = "ЛицевыеСчета" Тогда
		Элементы.ДляЗданий.Видимость          = Ложь;
		Элементы.ДляПодъездов.Видимость       = Ложь;
		Элементы.ДляКвартир.Видимость         = Ложь;
		Элементы.ДляЛицевыхСчетов.Видимость   = Истина;
		Элементы.ДляПаркингов.Видимость       = Ложь;
		Элементы.ДляПарковочныхМест.Видимость = Ложь;
		Если НЕ ЗначениеЗаполнено(Форма.КонПериодЛС) Тогда
			КонПериодЛС = КонецМесяца(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Форма.НачПериодЛС) Тогда
			НачПериодЛС = НачалоМесяца(Форма.КонПериодЛС);
		КонецЕсли;
	ИначеЕсли Объект.ТипОбъекта = "Паркинги" Тогда
		Элементы.ДляЗданий.Видимость          = Ложь;
		Элементы.ДляПодъездов.Видимость       = Ложь;
		Элементы.ДляКвартир.Видимость         = Ложь;
		Элементы.ДляЛицевыхСчетов.Видимость   = Ложь;
		Элементы.ДляПаркингов.Видимость       = Истина;
		Элементы.ДляПарковочныхМест.Видимость = Ложь;
	ИначеЕсли Объект.ТипОбъекта = "ПарковочныеМеста" Тогда
		Элементы.ДляЗданий.Видимость          = Ложь;
		Элементы.ДляПодъездов.Видимость       = Ложь;
		Элементы.ДляКвартир.Видимость         = Ложь;
		Элементы.ДляЛицевыхСчетов.Видимость   = Ложь;
		Элементы.ДляПаркингов.Видимость       = Ложь;
		Элементы.ДляПарковочныхМест.Видимость = Истина;
	Иначе
		Элементы.ДляЗданий.Видимость          = Ложь;
		Элементы.ДляПодъездов.Видимость       = Ложь;
		Элементы.ДляКвартир.Видимость         = Истина;
		Элементы.ДляЛицевыхСчетов.Видимость   = Ложь;
		Элементы.ДляПаркингов.Видимость       = Ложь;
		Элементы.ДляПарковочныхМест.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ТипОбъекта = "ЛицевыеСчета" Тогда
		Элементы.ОтборВладелец.Видимость = Истина;
		Элементы.ОтборКвартира.Видимость = Истина;
	Иначе
		Элементы.ОтборВладелец.Видимость = Ложь;
		Элементы.ОтборКвартира.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.Организация.Видимость = Не Объект.Организация.Пустая();
	
	// Управление основным периодом.
	Форма.Период = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьПредставлениеПериодаОтчета(
		Форма.ВидПериода, Объект.ДатаНач, Объект.ДатаКон);
	
	// Управление периодом лицевого счета.
	Форма.ПериодЛС = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьПредставлениеПериодаОтчета(
		Форма.ВидПериодаЛС, Форма.НачПериодЛС, Форма.КонПериодЛС);
	
	ПараметрыСтраниц = Новый Структура;
	ПараметрыСтраниц.Вставить("ПроизвольныйПериод", "ГруппаПроизвольныйПериодЛС");
	ПараметрыСтраниц.Вставить("ПериодПоВидам"     , "ГруппаПериодПоВидамЛС");
	ПараметрыСтраниц.Вставить("День"              , "ГруппаДеньЛС");
	УПЖКХ_ТиповыеМетодыКлиентСервер.ПереключитьТекущуюСтраницуВыбораПериода(Форма.ВидПериодаЛС,
																			Элементы.ГруппаПоляВводаПериодаЛС, ПараметрыСтраниц);
	
КонецПроцедуры // УстановитьВидимостьЭлементов()

&НаСервереБезКонтекста
// Функция возвращает список доп. сведений свойств здания.
Функция ПолучитьСписокДополнительныхСвойствЗдания()
	
	СписокСвойств = Новый СписокЗначений;
	
	СписокСвойств.ЗагрузитьЗначения(Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_КВП_Здания.ДополнительныеСведения.ВыгрузитьКолонку("Свойство"));
	
	Возврат СписокСвойств;
	
КонецФункции

&НаСервере
// Процедура предназначена для заполнения табличной части.
Процедура ЗаполнениеТаблицы()

	Запрос = Новый Запрос();

	Если Объект.ТипОбъекта = "Здания" Тогда
		
		ЗапросСОтбором = Новый Запрос;
		ЗапросСОтбором.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		МассивВидовКонтактнойИнформации = Новый Массив;
		МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания);
		
		МассивОбъектов = Неопределено;
		Если ЗначениеЗаполнено(ГруппаЗданий) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КВП_Здания.Ссылка
			|ИЗ
			|	Справочник.КВП_Здания КАК КВП_Здания
			|ГДЕ
			|	КВП_Здания.Ссылка В ИЕРАРХИИ(&ГруппаЗданий)";
			Запрос.УстановитьПараметр("ГруппаЗданий", ГруппаЗданий);
			ТЗЗданий = Запрос.Выполнить().Выгрузить();
			МассивОбъектов = ТЗЗданий.ВыгрузитьКолонку("Ссылка");
		КонецЕсли;
		
		// Помещает в менеджер временных таблиц запроса таблицу контактной информации "втКонтактнаяИнформация".
		УПЖКХ_ТиповыеМетодыСервер.СформироватьТаблицуКонтактнойИнформацииОбъектов(ЗапросСОтбором.МенеджерВременныхТаблиц, МассивВидовКонтактнойИнформации, МассивОбъектов);
		
		ЗапросСОтбором.Текст =
		"ВЫБРАТЬ
		|	втКонтактнаяИнформация.Объект,
		|	втКонтактнаяИнформация.Регион,
		|	втКонтактнаяИнформация.Город,
		|	втКонтактнаяИнформация.НаселенныйПункт,
		|	втКонтактнаяИнформация.Улица
		|ПОМЕСТИТЬ втКонтактнаяИнформацияСОтбором
		|ИЗ
		|	втКонтактнаяИнформация КАК втКонтактнаяИнформация";
		
		// Фильтр по адресу.
		ТекстФильтраАдреса = "";
		ЕстьЗаполненныеПоля = Не (ПустаяСтрока(Регион) И ПустаяСтрока(Город) И ПустаяСтрока(НаселенныйПункт) И ПустаяСтрока(Улица));
		
		Если ЕстьЗаполненныеПоля Тогда
			ТекстФильтраАдреса = Символы.ПС + "ГДЕ";
			
			Если Не ПустаяСтрока(Регион) Тогда
				ТекстФильтраАдреса = ТекстФильтраАдреса + " втКонтактнаяИнформация.Регион ПОДОБНО ""%" + СокрЛП(Регион) + "% "" И";
			КонецЕсли;
			Если Не ПустаяСтрока(Город) Тогда
				ТекстФильтраАдреса = ТекстФильтраАдреса + " втКонтактнаяИнформация.Город ПОДОБНО ""%" + СокрЛП(Город) + "%"" И";
			КонецЕсли;
			Если Не ПустаяСтрока(НаселенныйПункт) Тогда
				ТекстФильтраАдреса = ТекстФильтраАдреса + " втКонтактнаяИнформация.НаселенныйПункт ПОДОБНО ""%" + СокрЛП(НаселенныйПункт) + "%"" И";
			КонецЕсли;
			Если Не ПустаяСтрока(Улица) Тогда
				ТекстФильтраАдреса = ТекстФильтраАдреса + " втКонтактнаяИнформация.Улица ПОДОБНО ""%" + СокрЛП(Улица) + "%""";
			КонецЕсли;
			
			Если Прав(ТекстФильтраАдреса, 1) = "И" Тогда
				ТекстФильтраАдреса = Лев(ТекстФильтраАдреса, СтрДлина(ТекстФильтраАдреса) - 2);
			КонецЕсли;
		КонецЕсли;
		
		ЗапросСОтбором.Текст = ЗапросСОтбором.Текст + ТекстФильтраАдреса;
		
		ЗапросСОтбором.Выполнить();
		
		Запрос.МенеджерВременныхТаблиц = ЗапросСОтбором.МенеджерВременныхТаблиц;
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИСТИНА КАК Использовать,
		|	втКонтактнаяИнформацияСОтбором.Объект КАК Объект
		|ИЗ
		|	Справочник.КВП_Здания КАК КВП_Здания
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКонтактнаяИнформацияСОтбором КАК втКонтактнаяИнформацияСОтбором
		|		ПО КВП_Здания.Ссылка = втКонтактнаяИнформацияСОтбором.Объект";
		
		// Фильтр по ответственным лицам.
		Если ЗначениеЗаполнено(ВидМастера) И ЗначениеЗаполнено(Мастер) Тогда
			Запрос.Текст = Запрос.Текст + "
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ОбслуживающиеМастера.СрезПоследних(
			|											, 
			|											ВидМастера = &ВидМастера И Мастер = &Мастер) КАК КВП_ОбслуживающиеМастераСрезПоследних
			|		ПО КВП_Здания.Ссылка = КВП_ОбслуживающиеМастераСрезПоследних.Объект";
			Запрос.УстановитьПараметр("ВидМастера", ВидМастера);
			Запрос.УстановитьПараметр("Мастер",     Мастер);
		КонецЕсли;

		// Фильтр по характеристикам.
		ТекСтрока = 1;
		Для Каждого СтрокаХарактеристики Из ТаблицаХарактеристик Цикл
			НомерСтроки = Формат(ТекСтрока, "ЧГ=0");
			Запрос.Текст = Запрос.Текст + "
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения" + НомерСтроки + "
			|		ПО КВП_Здания.Ссылка = ДополнительныеСведения" + НомерСтроки + ".Объект
			|			И ДополнительныеСведения" + НомерСтроки + ".Свойство = &Свойство" + НомерСтроки + "
			|			И ДополнительныеСведения" + НомерСтроки + ".Значение = &Значение" + НомерСтроки;
			Запрос.УстановитьПараметр("Свойство" + НомерСтроки, СтрокаХарактеристики.Свойство);
			Запрос.УстановитьПараметр("Значение" + НомерСтроки, СтрокаХарактеристики.Значение);
			ТекСтрока = ТекСтрока + 1;
		КонецЦикла;

		Запрос.Текст = Запрос.Текст + "
		|
		|ГДЕ
		|		НЕ КВП_Здания.ПометкаУдаления
		|		И НЕ КВП_Здания.ТипСооружения = &ТипСооружения
		|		И НЕ КВП_Здания.ЭтоГруппа" + ?(ГруппаЗданий.Пустая(), "", "
		|		И Ссылка В ИЕРАРХИИ (&ГруппаЗданий)");

		Запрос.УстановитьПараметр("ГруппаЗданий", ГруппаЗданий);
		Запрос.УстановитьПараметр("ТипСооружения", Перечисления.УПЖКХ_ТипСооружения.Паркинг);

	ИначеЕсли Объект.ТипОбъекта = "Подъезды" Тогда

		ПоискПервКв = НомерПервойКвартиры;
		ПоискПослКв = НомерПоследнейКвартиры;

		ТекстФильтра = "ИСТИНА";
		Если Не ЗданиеПодъезда.Пустая() Тогда
			ТекстФильтра = ТекстФильтра + " И Владелец В ИЕРАРХИИ (&Владелец)";
		КонецЕсли;
		Если ЗначениеЗаполнено(ПоискПервКв) Тогда
			ТекстФильтра = ТекстФильтра + " И НомерПервойКвартиры = &НомерПервКв";
		КонецЕсли;
		Если ЗначениеЗаполнено(ПоискПослКв) Тогда
			ТекстФильтра = ТекстФильтра + " И НомерПоследнейКвартиры = &НомерПослКв";
		КонецЕсли;

		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИСТИНА КАК Использовать,
		|	Ссылка КАК Объект
		|ИЗ
		|	Справочник.КВП_Подъезды
		|ГДЕ
		|	" + ТекстФильтра + "";

		Запрос.УстановитьПараметр("Владелец",    ПолучитьЭлементыСправочникаПоГруппе(ЗданиеПодъезда));
		Запрос.УстановитьПараметр("НомерПервКв", ПоискПервКв);
		Запрос.УстановитьПараметр("НомерПослКв", ПоискПослКв);

	ИначеЕсли Объект.ТипОбъекта = "Квартиры" Тогда

		ПоискКоличество = КоличествоКомнат;
		ПоискЭтаж       = Этаж;

		ТекстФильтра = "ИСТИНА";
		Если Не ЗданияКвартиры.Пустая() Тогда
			ТекстФильтра = ТекстФильтра + " И Квартиры.Владелец В ИЕРАРХИИ (&Владелец)";
		КонецЕсли;
		Если ЗначениеЗаполнено(ТипПомещенияКвартиры) Тогда
			ТекстФильтра = ТекстФильтра + " И Квартиры.ВидПомещения.ТипПомещения = &ТипПомещения";
		КонецЕсли;
		Если ЗначениеЗаполнено(ПоискКоличество) Тогда
			ТекстФильтра = ТекстФильтра + " И Квартиры.КоличествоКомнат = &КоличествоКомнат";
		КонецЕсли;
		Если ЗначениеЗаполнено(ПоискЭтаж) Тогда
			ТекстФильтра = ТекстФильтра + " И Квартиры.Этаж " + ?(ПустаяСтрока(ВидСравнения), "=", ВидСравнения) + " &Этаж";
		КонецЕсли;

		ФильтрПоПриватизации = Ложь;
		Если      Приватизация = 1 Тогда
			ФильтрПоПриватизации = Истина;
			ТекстФильтра = ТекстФильтра + " И УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности = &Приватизация";
		ИначеЕсли Приватизация = 2 Тогда
			ФильтрПоПриватизации = Истина;
			ТекстФильтра = ТекстФильтра + " И УПЖКХ_СобственностьНаПомещенияСрезПоследних.ВидСобственности <> &Приватизация";
		КонецЕсли;

		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИСТИНА КАК Использовать,
		|	Квартиры.Ссылка КАК Объект
		|ИЗ
		|	Справочник.УПЖКХ_Помещения КАК Квартиры" + ?(ФильтрПоПриватизации, "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СобственностьНаПомещения.СрезПоследних(&Дата,) 
		|			КАК УПЖКХ_СобственностьНаПомещенияСрезПоследних
		|		ПО Квартиры.Ссылка = УПЖКХ_СобственностьНаПомещенияСрезПоследних.Помещение", "") + "
		|ГДЕ
		|	" + ТекстФильтра + "";
		
		Запрос.УстановитьПараметр("Дата",             УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
		Запрос.УстановитьПараметр("Владелец",         ПолучитьЭлементыСправочникаПоГруппе(ЗданияКвартиры));
		Запрос.УстановитьПараметр("ТипПомещения",     ТипПомещенияКвартиры);
		Запрос.УстановитьПараметр("КоличествоКомнат", ПоискКоличество);
		Запрос.УстановитьПараметр("Этаж",             ПоискЭтаж);
		Запрос.УстановитьПараметр("Приватизация",     Перечисления.УПЖКХ_ВидыСобственности.Частная);

	ИначеЕсли Объект.ТипОбъекта = "ЛицевыеСчета" Тогда
		
		ФильтрЛС1 = "ИСТИНА";
		Если ЗначениеЗаполнено(ОбъектЛС) Тогда
			Если ТипЗнч(ОбъектЛС) = Тип("СправочникСсылка.КВП_Здания") Тогда
				ФильтрЛС1 = ФильтрЛС1 + " И ЛицевойСчет.Адрес.Владелец В ИЕРАРХИИ (&Здание)";
			ИначеЕсли ТипЗнч(ОбъектЛС) = Тип("СправочникСсылка.КВП_Подъезды") Тогда
				ФильтрЛС1 = ФильтрЛС1 + " И ЛицевойСчет.Адрес.Владелец = &Здание 
				                        | И ЛицевойСчет.Адрес.Код МЕЖДУ &НомерПервКв И &НомерПослКв";
			ИначеЕсли ТипЗнч(ОбъектЛС) = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
				ФильтрЛС1 = ФильтрЛС1 + " И ЛицевойСчет В ИЕРАРХИИ (&ГрупаЛС)";
			КонецЕсли;
		КонецЕсли;
		
		ФильтрЛС2 = "ИСТИНА";
		Если ЗначениеЗаполнено(ОбъектЛС) Тогда
			Если ТипЗнч(ОбъектЛС) = Тип("СправочникСсылка.КВП_Здания") Тогда
				ФильтрЛС2 = ФильтрЛС2 + " И КВП_ЛицевыеСчета.ЛицевойСчет.Адрес.Владелец В ИЕРАРХИИ (&Здание)";
			ИначеЕсли ТипЗнч(ОбъектЛС) = Тип("СправочникСсылка.КВП_Подъезды") Тогда
				ФильтрЛС2 = ФильтрЛС2 + " И КВП_ЛицевыеСчета.ЛицевойСчет.Адрес.Владелец = &Здание 
				                        | И КВП_ЛицевыеСчета.ЛицевойСчет.Адрес.Код МЕЖДУ &НомерПервКв И &НомерПослКв";
			ИначеЕсли ТипЗнч(ОбъектЛС) = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
				ФильтрЛС2 = ФильтрЛС2 + " И КВП_ЛицевыеСчета.ЛицевойСчет В ИЕРАРХИИ (&ГрупаЛС)";
			КонецЕсли;
		КонецЕсли;
		
		// 1. Определение основного запроса.
		// Отбираем список действующих лицевых счетов на период и помещаем его во временную таблицу.
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТаблицаДействующихЛС.ЛицевойСчет КАК ЛицевойСчет,
		|	ТаблицаДействующихЛС.ЛицевойСчет.Адрес КАК Квартира
		|ПОМЕСТИТЬ врТаблицаДействующихЛС
		|ИЗ
		|	(ВЫБРАТЬ
		|		КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет
		|	ИЗ
		|		РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&ДатаНач, &ФильтрЛС1) КАК КВП_ЛицевыеСчетаСрезПоследних
		|	ГДЕ
		|		КВП_ЛицевыеСчетаСрезПоследних.Действует = ИСТИНА
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		КВП_ЛицевыеСчета.ЛицевойСчет
		|	ИЗ
		|		РегистрСведений.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
		|	ГДЕ
		|		&ФильтрЛС2
		|		И КВП_ЛицевыеСчета.Период > &ДатаНач
		|		И КВП_ЛицевыеСчета.Период < &ДатаКон
		|		И КВП_ЛицевыеСчета.Действует = ИСТИНА) КАК ТаблицаДействующихЛС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИСТИНА КАК Использовать,
		|	ТаблицаДействующихЛС.ЛицевойСчет КАК Объект,
		|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец КАК Владелец,
		|	ТаблицаДействующихЛС.Квартира
		|ИЗ
		|	врТаблицаДействующихЛС КАК ТаблицаДействующихЛС
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(
		|				,
		|				ЛицевойСчет В
		|					(ВЫБРАТЬ
		|						врТаблицаДействующихЛС.ЛицевойСчет
		|					ИЗ
		|						врТаблицаДействующихЛС КАК врТаблицаДействующихЛС)) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
		|		ПО (УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет = ТаблицаДействующихЛС.ЛицевойСчет)";
		
		// 2. В случае, если заполнена таблица "КонтрагентыЛС", добавляем отбор по контрагентам:
		// соединяем полученные данные со срезом регистра сведений УПЖКХ_СведенияДляВзаиморасчетовПоЛС по лицевому счету.
		Если КонтрагентыЛС.Количество() > 0 Тогда
			
			Запрос.Текст = Запрос.Текст + "
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(
			|				&ДатаКон,
			|				ЛицевойСчет В
			|						(ВЫБРАТЬ
			|							ТаблицаДействующихЛС.ЛицевойСчет
			|						ИЗ
			|							врТаблицаДействующихЛС КАК ТаблицаДействующихЛС)
			|					И Контрагент В ИЕРАРХИИ (&СпКонтрагентов) И Организация = &Организация) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛС
			|		ПО ТаблицаДействующихЛС.ЛицевойСчет = УПЖКХ_СведенияДляВзаиморасчетовПоЛС.ЛицевойСчет";
			
		КонецЕсли;
		
		// 3. В случае, если заполнено поле "УслугаЛС", добавляем отбор по услуге:
		// соединяем полученные данные со срезом регистра сведений КВП_НазначенныеНачисления и,
		// в зависимости от выбора пользователя, выбираем лицевые счета, к которым привязана,
		// или не привязана указанная услуга.
		Если ЗначениеЗаполнено(УслугаЛС) Тогда
			
			Запрос.Текст = Запрос.Текст + 
			"		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|				врТаблицаДействующихЛС.ЛицевойСчет КАК Объект
			|			ИЗ
			|				врТаблицаДействующихЛС КАК врТаблицаДействующихЛС
			|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_НазначенныеНачисления.СрезПоследних(
			|						&ДатаКон,
			|						Объект В
			|								(ВЫБРАТЬ
			|									ТаблицаДействующихЛС.ЛицевойСчет
			|								ИЗ
			|									врТаблицаДействующихЛС КАК ТаблицаДействующихЛС)
			|							И Услуга В (&УслугаЛС)) КАК КВП_НазначенныеНачисленияСрезПоследних
			|				ПО врТаблицаДействующихЛС.ЛицевойСчет = КВП_НазначенныеНачисленияСрезПоследних.Объект
			|			ГДЕ
			|				ВЫБОР
			|					КОГДА &ОтборПоДействующимУслугамДляЛС
			|						ТОГДА КВП_НазначенныеНачисленияСрезПоследних.Действует
			|					ИНАЧЕ НЕ КВП_НазначенныеНачисленияСрезПоследних.Действует
			|							ИЛИ КВП_НазначенныеНачисленияСрезПоследних.Действует ЕСТЬ NULL 
			|				КОНЕЦ) КАК КВП_НазначенныеНачисленияСрезПоследних
			|		ПО ТаблицаДействующихЛС.ЛицевойСчет = КВП_НазначенныеНачисленияСрезПоследних.Объект";
			
			Запрос.УстановитьПараметр("УслугаЛС",                       УслугаЛС);
			Запрос.УстановитьПараметр("ОтборПоДействующимУслугамДляЛС", ?(ОтбиратьЛСГдеУслугаДействует = 1, Истина, Ложь));
			
		КонецЕсли;
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ФильтрЛС1", ФильтрЛС1);
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ФильтрЛС2", ФильтрЛС2);
		
		Объект.ДатаКон = ?(ЗначениеЗаполнено(КонПериодЛС), КонПериодЛС, КонецДня(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату()));
		Объект.ДатаНач = ?(ЗначениеЗаполнено(НачПериодЛС), НачПериодЛС, НачалоМесяца(Объект.ДатаКон));
		
		Запрос.УстановитьПараметр("ДатаНач",     Объект.ДатаНач);
		Запрос.УстановитьПараметр("ДатаКон",     Объект.ДатаКон);
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		
		Если ТипЗнч(ОбъектЛС) = Тип("СправочникСсылка.КВП_Здания") Тогда
			
			Запрос.УстановитьПараметр("Здание",      ОбъектЛС);
			
		ИначеЕсли ТипЗнч(ОбъектЛС) = Тип("СправочникСсылка.КВП_Подъезды") Тогда
			
			Запрос.УстановитьПараметр("Здание",      ОбъектЛС.Владелец);
			Запрос.УстановитьПараметр("НомерПервКв", ОбъектЛС.НомерПервойКвартиры);
			Запрос.УстановитьПараметр("НомерПослКв", ОбъектЛС.НомерПоследнейКвартиры);
			
		ИначеЕсли ТипЗнч(ОбъектЛС) = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
			
			Запрос.УстановитьПараметр("ГрупаЛС",      ОбъектЛС);
			
		КонецЕсли;
		
		СпКонтрагентов = КонтрагентыЛС.Выгрузить().ВыгрузитьКолонку("Контрагент");
		Запрос.УстановитьПараметр("СпКонтрагентов", СпКонтрагентов);
		
	ИначеЕсли Объект.ТипОбъекта = "Паркинги" Тогда

		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИСТИНА КАК Использовать,
		|	Паркинг.Ссылка КАК Объект
		|ИЗ
		|	Справочник.КВП_Здания КАК Паркинг
		|ГДЕ
		|	Паркинг.ЭтоГруппа = ЛОЖЬ
		|	И Паркинг.ТипСооружения = &ТипСооружения
		|	И Паркинг.ПометкаУдаления = ЛОЖЬ" + ?(ГруппаПаркингов.Пустая(), "", "
		|	И Ссылка В ИЕРАРХИИ (&ГруппаПаркингов)");
		
		Запрос.УстановитьПараметр("ГруппаПаркингов", ГруппаПаркингов);
		Запрос.УстановитьПараметр("ТипСооружения", Перечисления.УПЖКХ_ТипСооружения.Паркинг);
		
	ИначеЕсли Объект.ТипОбъекта = "ПарковочныеМеста" Тогда

		ТекстФильтра = "ИСТИНА";
		ТекстФильтраКонтрагент = "ИСТИНА";
		Если ЗначениеЗаполнено(ВладелецПарковочногоМеста) Тогда
			ТекстФильтра = ТекстФильтра + " И ПарковочныеМеста.Владелец В ИЕРАРХИИ (&Владелец)";
		КонецЕсли;
		Если КонтрагентыПарковочныхМест.Количество() > 0 Тогда
			ТекстФильтраКонтрагент = ТекстФильтраКонтрагент
										+ " И УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Контрагент В ИЕРАРХИИ (&СпКонтрагентов)";
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПарковочныеМеста.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ втПарковочныхМест
		|ИЗ
		|	Справочник.УПЖКХ_Помещения КАК ПарковочныеМеста
		|ГДЕ
		|	" + ТекстФильтра + "
		|	И (НЕ ПарковочныеМеста.ПометкаУдаления)
		|	И ПарковочныеМеста.ВидПомещения.ТипПомещения = &ТипПомещения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ИСТИНА КАК Использовать,
		|	ПарковочныеМеста.Ссылка КАК Объект,
		|	УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Контрагент
		|ИЗ
		|	втПарковочныхМест КАК ПарковочныеМеста
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&ДатаКон, ) КАК ЛицевыеСчетаСрезПоследних
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(&ДатаКон, Организация = &Организация) 
		|				КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛС
		|			ПО ЛицевыеСчетаСрезПоследних.ЛицевойСчет = УПЖКХ_СведенияДляВзаиморасчетовПоЛС.ЛицевойСчет
		|		ПО (ЛицевыеСчетаСрезПоследних.Объект = ПарковочныеМеста.Ссылка)
		|ГДЕ " + ТекстФильтраКонтрагент;
		
		Запрос.УстановитьПараметр("ДатаКон", ?(ЗначениеЗаполнено(Объект.ДатаКон),
											   Объект.ДатаКон, 
											   КонецДня(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату())));
		Запрос.УстановитьПараметр("Владелец", ВладелецПарковочногоМеста);
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
		Запрос.УстановитьПараметр("ТипПомещения", Перечисления.КВП_ТипыПомещений.Автоместо);
		СпКонтрагентов = КонтрагентыПарковочныхМест.Выгрузить().ВыгрузитьКолонку("Контрагент");
		Запрос.УстановитьПараметр("СпКонтрагентов", СпКонтрагентов);
		
	Иначе
		
		Запрос.Текст = "";
		
	КонецЕсли;

	Если ПустаяСтрока(Запрос.Текст) Тогда
		Возврат;
	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();
	ПредварительныйОтбор = РезультатЗапроса.Выгрузить();

	Если НЕ Объект.ПриостановкаДействияУслуги Тогда
		Объект.Отбор.Загрузить(ПредварительныйОтбор);
	Иначе
		Для Каждого ТекОбъект Из ПредварительныйОтбор Цикл
			
			ФлагНаличияУслуги = Ложь;
			Для Каждого ТекСтрока Из Объект.Услуга Цикл
				Если УслугаДействуетДляОбъекта(ТекОбъект.Объект, ТекСтрока.Значение, Объект.Организация, Объект.ДатаНач,
												Объект.ДатаКон) Тогда
					ФлагНаличияУслуги = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НЕ ФлагНаличияУслуги Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = Объект.Отбор.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекОбъект);
			
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ЗаполнениеТаблицы()

&НаСервереБезКонтекста
// Процедура получает дополнительные данные по лицевым счетам.
//
Функция ПолучитьСтруктуруДопДанныхЛС(ЛицевойСчет)
	
	ЗапросДанныхЛС = Новый Запрос;
	ЗапросДанныхЛС.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчета.Ссылка КАК ЛицевойСчет,
	|	КВП_ЛицевыеСчета.Адрес КАК Помещение
	|ПОМЕСТИТЬ втТаблицаЛицевыхСчетов
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	КВП_ЛицевыеСчета.Ссылка В(&ЛицевойСчет)
	|	И (НЕ КВП_ЛицевыеСчета.ЭтоГруппа)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаЛицевыхСчетов.ЛицевойСчет,
	|	ТаблицаЛицевыхСчетов.Помещение,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец КАК ВладелецОбъекта,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец.Наименование КАК Владелец
	|ИЗ
	|	втТаблицаЛицевыхСчетов КАК ТаблицаЛицевыхСчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(, 
	|							ЛицевойСчет В (&ЛицевойСчет)) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
	|		ПО (УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет = ТаблицаЛицевыхСчетов.ЛицевойСчет)";
	
	СписокЛС = Новый СписокЗначений();
	СписокЛС.Добавить(ЛицевойСчет);
	
	ЗапросДанныхЛС.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
	Выборка = ЗапросДанныхЛС.Выполнить().Выбрать();
	
	СтруктураДанных = Новый Структура("ЛицевойСчет, Помещение, ВладелецОбъекта, Владелец");
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураДанных, Выборка);
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции // ПолучитьСтруктуруДопДанныхЛС()

&НаСервере
// Получает таблицу объектов нужного типа значения.
//
// Параметры
//  ТаблицаДляПередачи - сформированная таблица объектов.
//
Процедура ПолучитьТаблицуОбъектовДляПередачи(ТаблицаДляПередачи)

	СписокОбъектов = Новый СписокЗначений;
	СписокОбъектов.ЗагрузитьЗначения(ТаблицаДляПередачи.ВыгрузитьКолонку("Объект"));
	
	СписокПолученныхОбъектов = Новый СписокЗначений;
	
	Для Каждого ТекТипЗначОбъекта Из Объект.ТипЗначОбъекта Цикл
		
		тмТипЗначОбъекта = ТекТипЗначОбъекта.Значение;
		
		Если тмТипЗначОбъекта = "ЛицевыеСчета" Тогда
			Если Объект.ТипОбъекта = "Здания" Тогда
				СписокПолученныхОбъектов = КВП_ПолучитьСписокЛицевыхСчетовПоЗданиям(СписокОбъектов, 
																					НачПериодЛС, 
																					КонецДня(КонПериодЛС));
			ИначеЕсли Объект.ТипОбъекта = "Подъезды" Тогда
				СписокПолученныхОбъектов = КВП_ПолучитьСписокЛицевыхСчетовПоПодъездам(СписокОбъектов, 
																					  НачПериодЛС,
																					  КонецДня(КонПериодЛС));
			ИначеЕсли Объект.ТипОбъекта = "Квартиры" Тогда
				СписокПолученныхОбъектов = КВП_ПолучитьСписокЛицевыхСчетовПоПомещениям(СписокОбъектов, 
																					   НачПериодЛС, 
																					   КонецДня(КонПериодЛС));
			КонецЕсли;
		ИначеЕсли тмТипЗначОбъекта = "Здания" Тогда
			Если Объект.ТипОбъекта = "Подъезды" Тогда
				СписокПолученныхОбъектов = КВП_ПолучитьСписокЗданийПоПодъездам(СписокОбъектов);
			ИначеЕсли Объект.ТипОбъекта = "ЛицевыеСчета" Тогда
				СписокПолученныхОбъектов = КВП_ПолучитьСписокЗданийПоЛицевымСчетам(СписокОбъектов);
			КонецЕсли;
		ИначеЕсли тмТипЗначОбъекта = "Подъезды" Тогда
			Если Объект.ТипОбъекта = "Здания" Тогда
				СписокПолученныхОбъектов = КВП_ПолучитьСписокПодъездовПоЗданиям(СписокОбъектов);
			ИначеЕсли Объект.ТипОбъекта = "ЛицевыеСчета" Тогда
				СписокПолученныхОбъектов = КВП_ПолучитьСписокПодъездовПоЛицевымСчетам(СписокОбъектов);
			КонецЕсли;
		ИначеЕсли тмТипЗначОбъекта = "Квартиры" Тогда
			Если Объект.ТипОбъекта = "Здания" Тогда
				СписокПолученныхОбъектов = КВП_ПолучитьСписокПомещенийПоЗданиям(СписокОбъектов);
			ИначеЕсли Объект.ТипОбъекта = "Подъезды" Тогда
				СписокПолученныхОбъектов = КВП_ПолучитьСписокПомещенийПоПодъездам(СписокОбъектов);
			ИначеЕсли Объект.ТипОбъекта = "ЛицевыеСчета" Тогда
				СписокПолученныхОбъектов = КВП_ПолучитьСписокПомещенийПоЛицевымСчетам(СписокОбъектов);
			КонецЕсли;
		КонецЕсли;
		
		Если СписокПолученныхОбъектов.Количество() > 0 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаДляПередачи.Очистить();
	Для Каждого ТекОбъект Из СписокПолученныхОбъектов Цикл
		СтрТаб = ТаблицаДляПередачи.Добавить();
		СтрТаб.Объект = ТекОбъект.Значение;
	КонецЦикла;
	
КонецПроцедуры // ПолучитьТаблицуОбъектовДляПередачи()

&НаСервере
// Функция предназначена для заполнения и передачи данных
// из табличной части в документ, откуда была вызвана обработка.
Функция ВернутьТаблицуВДокумент()
	
	ТаблицаДляПередачи = Новый ТаблицаЗначений;
	ТаблицаДляПередачи.Колонки.Добавить("Объект");
	
	СтрокиОтбора = Объект.Отбор.НайтиСтроки(Новый Структура("Использовать", Истина));
	Для Каждого ТекСтрока Из СтрокиОтбора Цикл
		СтрТаб = ТаблицаДляПередачи.Добавить();
		СтрТаб.Объект = ТекСтрока.Объект;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Объект.ТипЗначОбъекта)
	  И Объект.ТипЗначОбъекта.НайтиПоЗначению(Объект.ТипОбъекта) = Неопределено Тогда
		ПолучитьТаблицуОбъектовДляПередачи(ТаблицаДляПередачи);
	КонецЕсли;
	
	СписокОбъектов = Новый СписокЗначений;
	СписокОбъектов.ЗагрузитьЗначения(ТаблицаДляПередачи.ВыгрузитьКолонку("Объект"));
	
	Возврат СписокОбъектов;
	
КонецФункции

&НаСервере
// Процедура сохраняет настройки пользователя
Процедура СохранитьНастройки()
	
	ХранилищеОбщихНастроек.Сохранить("Обработка.КВП_ЗаполнениеПолучателямиУслуг", "ОтбиратьЛСГдеУслугаДействует", ОтбиратьЛСГдеУслугаДействует);
	
КонецПроцедуры 

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("Организация",                Объект.Организация);
	Параметры.Свойство("Услуга",                     Объект.Услуга);
	Параметры.Свойство("ПриостановкаДействияУслуги", Объект.ПриостановкаДействияУслуги);
	Параметры.Свойство("ДатаНач",                    Объект.ДатаНач);
	Параметры.Свойство("ДатаКон",                    Объект.ДатаКон);
	Параметры.Свойство("ТипОбъекта",                 Объект.ТипОбъекта);
	Параметры.Свойство("ЗаблокироватьТипОбъекта",    ЗаблокироватьТипОбъекта);
	
	Если Параметры.Свойство("ЗаголовокФормы") И НЕ ПустаяСтрока(Параметры.ЗаголовокФормы) Тогда
		ЭтаФорма.АвтоЗаголовок = Ложь;
		ЭтаФорма.Заголовок     = Параметры.ЗаголовокФормы;
	КонецЕсли;
	
	Если Параметры.Свойство("ТипЗначОбъекта") И ЗначениеЗаполнено(Параметры.ТипЗначОбъекта) Тогда
		
		Если ТипЗнч(Параметры.ТипЗначОбъекта) = Тип("СписокЗначений") Тогда
			Объект.ТипЗначОбъекта = Параметры.ТипЗначОбъекта;
		Иначе
			Объект.ТипЗначОбъекта.Добавить(Параметры.ТипЗначОбъекта);
		КонецЕсли;
		
	КонецЕсли;
	
	Параметры.Свойство("НачПериодЛС",                     НачПериодЛС);
	Параметры.Свойство("КонПериодЛС",                     КонПериодЛС);
	Параметры.Свойство("ОбъектЛС",                        ОбъектЛС);
	Параметры.Свойство("ЗданияКвартиры",                  ЗданияКвартиры);
	Параметры.Свойство("ВладелецПарковочногоМеста",       ВладелецПарковочногоМеста);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьСписокВыбораВидПериода(
			Перечисления.ДоступныеПериодыОтчета.День,
			Элементы.ВидПериода.СписокВыбора, ВидПериода);
	
	УПЖКХ_ТиповыеМетодыКлиентСервер.ЗаполнитьСписокВыбораВидПериода(
			Перечисления.ДоступныеПериодыОтчета.День,
			Элементы.ВидПериодаЛС.СписокВыбора, ВидПериодаЛС);
	
	Если Объект.Организация.Пустая() Тогда
		Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьОсновнуюОрганизацию();
	КонецЕсли;
	
	// Установим значение реквизита "ОтбиратьЛСГдеУслугаДействует" в соответствии с последним значением.
	// Если настройки не сохранены, тогда устанавливается как "Истина".
	ОтбиратьЛСГдеУслугаДействуетНастройка = ХранилищеОбщихНастроек.Загрузить("Обработка.КВП_ЗаполнениеПолучателямиУслуг", "ОтбиратьЛСГдеУслугаДействует");
	
	Если ОтбиратьЛСГдеУслугаДействуетНастройка = Неопределено Тогда
		ОтбиратьЛСГдеУслугаДействует = 1;
	Иначе
		ОтбиратьЛСГдеУслугаДействует = ОтбиратьЛСГдеУслугаДействуетНастройка;
	КонецЕсли; 
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПрередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ ЗавершениеРаботы Тогда
		СохранитьНастройки();
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Вызывается при выборе типа объекта.
Процедура ТипОбъектаПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
	Объект.Отбор.Очистить();
	
КонецПроцедуры

//////////////////////////////////
// Таблица характеристик

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода свойство таблицы характеристик.
Процедура ТаблицаХарактеристикСвойствоПриИзменении(Элемент)
	
	ТекДанные = Элементы.ТаблицаХарактеристик.ТекущиеДанные;
	Если ТекДанные.Свойство.Пустая() Тогда
		ТекДанные.Значение = Неопределено;
		Возврат;
	КонецЕсли;

	ТипСвойства = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекДанные.Свойство, "ТипЗначения");
	ТипЗначения = ТипЗнч(ТекДанные.Значение);
	Если ТипСвойства.Типы().Количество() = 1 Тогда
		ТекДанные.Значение = ТипСвойства.ПривестиЗначение(ТекДанные.Значение);
	Иначе
		Если Не ТипСвойства.СодержитТип(ТипЗначения) Тогда
			ТекДанные.Значение = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля ввода свойство таблицы характеристик.
Процедура ТаблицаХарактеристикСвойствоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокСвойств = ПолучитьСписокДополнительныхСвойствЗдания();
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = ПолучитьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаВыбора", , Элемент);
	УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(ФормаВыбора.Список.Отбор, "Ссылка", СписокСвойств,
															ВидСравненияКомпоновкиДанных.ВСписке);
	ФормаВыбора.Открыть();
	
КонецПроцедуры

//////////////////////////////////
// Основной период

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля "ВидПериода".
Процедура ВидПериодаПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВидПериодаПриИзменении(Элемент, ВидПериода, Объект.ДатаНач, Объект.ДатаКон, Период);
	
	ПараметрыСтраниц = Новый Структура;
	ПараметрыСтраниц.Вставить("ПроизвольныйПериод", "ГруппаПроизвольныйПериод");
	ПараметрыСтраниц.Вставить("ПериодПоВидам"     , "ГруппаПериодПоВидам");
	ПараметрыСтраниц.Вставить("День"              , "ГруппаДень");
	УПЖКХ_ТиповыеМетодыКлиентСервер.ПереключитьТекущуюСтраницуВыбораПериода(ВидПериода, Элементы.ГруппаПоляВводаПериода,
																			ПараметрыСтраниц);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля "Период".
Процедура ПериодПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодПриИзменении(Элемент, Период, Объект.ДатаНач, Объект.ДатаКон);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "НачалоВыбора" поля "Период".
Процедура ПериодНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПериодНачалоВыбораЗавершение", ЭтотОбъект);
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка, 
		ВидПериода, Объект.ДатаНач, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Процедура окончания асинхроного выбора периода.
Процедура ПериодНачалоВыбораЗавершение(СтруктураПериода, ДополнительныеПараметры) Экспорт
	
	// Установим полученный период
	Если СтруктураПериода <> Неопределено Тогда
		ВидПериода = СтруктураПериода.ВидПериода;
		Период = СтруктураПериода.Период;
		Объект.ДатаНач = СтруктураПериода.НачалоПериода;
		Объект.ДатаКон = СтруктураПериода.КонецПериода;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ОбработкаВыбора" поля "Период".
Процедура ПериодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодОбработкаВыбора(
		Элемент, ВыбранноеЗначение, СтандартнаяОбработка,
		ВидПериода, Период, Объект.ДатаНач, Объект.ДатаКон);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "АвтоПодбор" поля "Период".
Процедура ПериодАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка,
		ВидПериода, Период, Объект.ДатаНач, Объект.ДатаКон);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ОкончаниеВводаТекста" поля "Период".
Процедура ПериодОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка,
		ВидПериода, Период, Объект.ДатаНач, Объект.ДатаКон);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля "НачалоПериодаДень".
Процедура НачалоПериодаДеньПриИзменении(Элемент)
	
	Объект.ДатаКон = КонецДня(Объект.ДатаНач);
	
КонецПроцедуры

//////////////////////////////////
// Период лицевого счета

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля "ВидПериодаЛС".
Процедура ВидПериодаЛСПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ВидПериодаПриИзменении(Элемент, ВидПериодаЛС, НачПериодЛС, КонПериодЛС, ПериодЛС);
	
	ПараметрыСтраниц = Новый Структура;
	ПараметрыСтраниц.Вставить("ПроизвольныйПериод", "ГруппаПроизвольныйПериодЛС");
	ПараметрыСтраниц.Вставить("ПериодПоВидам"     , "ГруппаПериодПоВидамЛС");
	ПараметрыСтраниц.Вставить("День"              , "ГруппаДеньЛС");
	УПЖКХ_ТиповыеМетодыКлиентСервер.ПереключитьТекущуюСтраницуВыбораПериода(ВидПериодаЛС,
																			Элементы.ГруппаПоляВводаПериодаЛС, ПараметрыСтраниц);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля "ПериодЛС".
Процедура ПериодЛСПриИзменении(Элемент)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодПриИзменении(Элемент, ПериодЛС, НачПериодЛС, КонПериодЛС);
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодЛСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПериодНачалоВыбораЗавершениеЛС", ЭтотОбъект);
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодНачалоВыбора(ЭтаФорма, Элемент, СтандартнаяОбработка, 
		ВидПериодаЛС, НачПериодЛС, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Процедура окончания асинхроного выбора периода.
Процедура ПериодНачалоВыбораЗавершениеЛС(СтруктураПериода, ДополнительныеПараметры) Экспорт
	
	// Установим полученный период
	Если СтруктураПериода <> Неопределено Тогда
		ВидПериодаЛС = СтруктураПериода.ВидПериода;
		ПериодЛС = СтруктураПериода.Период;
		НачПериодЛС = СтруктураПериода.НачалоПериода;
		КонПериодЛС = СтруктураПериода.КонецПериода;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ОбработкаВыбора" поля "ПериодЛС".
Процедура ПериодЛСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодОбработкаВыбора(
		Элемент, ВыбранноеЗначение, СтандартнаяОбработка,
		ВидПериодаЛС, ПериодЛС, НачПериодЛС, КонПериодЛС);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "АвтоПодбор" поля "ПериодЛС".
Процедура ПериодЛСАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодАвтоПодбор(
		Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка,
		ВидПериодаЛС, ПериодЛС, НачПериодЛС, КонПериодЛС);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ОкончаниеВводаТекста" поля "ПериодЛС".
Процедура ПериодЛСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	УПЖКХ_ТиповыеМетодыКлиент.ПериодОкончаниеВводаТекста(
		Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка,
		ВидПериодаЛС, ПериодЛС, НачПериодЛС, КонПериодЛС);
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриИзменении" поля "НачалоПериодаДень".
Процедура НачалоПериодаДеньЛСПриИзменении(Элемент)
	
	КонПериодЛС = КонецДня(НачПериодЛС);
	
КонецПроцедуры

//////////////////////////////////
// Обработчики таблицы "Отбор"

&НаКлиенте
// Процедура - обработчик события "ОбработкаВыбора" поля "ОбъектЛС".
Процедура ОбъектЛСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
		СтандартнаяОбработка = Ложь;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьВыборГруппыЛицевыхСчетов", ЭтаФорма);
		ОткрытьФорму("Справочник.КВП_ЛицевыеСчета.ФормаВыбораГруппы", , ЭтаФорма,,,,ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик результата выбора значения в поле "ОтборЛС".
Процедура ОбработатьВыборГруппыЛицевыхСчетов(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбъектЛС = РезультатЗакрытия;
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПередОкончаниемРедактирования" поля "Отбор".
Процедура ОтборПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Объект.ТипОбъекта = "ЛицевыеСчета" Тогда
		
		ДанныеСтроки = Элементы.Отбор.ТекущиеДанные;
		
		Если Не ДанныеСтроки = Неопределено Тогда
			
			ТекущийЛС = ДанныеСтроки.Объект;
			
			СтруктураДопДанныхЛС = ПолучитьСтруктуруДопДанныхЛС(ТекущийЛС);
			
			ДанныеСтроки.Квартира = СтруктураДопДанныхЛС.Помещение;
			ДанныеСтроки.Владелец = СтруктураДопДанныхЛС.Владелец;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "УстановитьФлажки".
Процедура УстановитьФлажки(Команда)
	
	Для Каждого Строка Из Объект.Отбор Цикл
		Строка.Использовать = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "СнятьФлажки".
Процедура СнятьФлажки(Команда)
	
	Для Каждого Строка Из Объект.Отбор Цикл
		Строка.Использовать = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "Заполнить".
Процедура Заполнить(Команда)
	
	Объект.Отбор.Очистить();
	ЗаполнениеТаблицы();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "Добавить".
Процедура Добавить(Команда)
	
	СписокОбъектов = ВернутьТаблицуВДокумент();
	
	Закрыть(СписокОбъектов);
	
КонецПроцедуры

#КонецОбласти
