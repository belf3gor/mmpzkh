&НаКлиенте
Перем НомерПопыткиПолученияИнформацииОбУчредителяхИКодахОКВЭД;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	ЭтоНачалоРаботы = ПолучитьФункциональнуюОпцию("НачалоРаботы");
	ИспользоватьНесколькоОрганизаций = Справочники.Организации.ИспользуетсяНесколькоОрганизаций();
	
	Если ЭтоНачалоРаботы Тогда
		// Реквизит ПоискИННЗапрос сохраняется в данных формы автоматически
		Организация = Справочники.Организации.ПустаяСсылка();
	Иначе
		ПоискИННЗапрос = "";
		Организация = Параметры.Организация;
		СоздатьПриОткрытии = Параметры.СоздатьПриОткрытии;
	КонецЕсли;
	
	ШрифтИзмененныхРеквизитов = Новый Шрифт(ШрифтыСтиля.ОбычныйШрифтТекста, , , , , , Истина); // Зачеркнутый
	
	Элементы.УзнатьИНН.Видимость = Обработки.РегистрацияОрганизации.СервисУзнатьИННДоступен();
	УзнатьИНН = НСтр("ru = 'Узнать ИНН'");
	
	РегистрирующийОрганАдресНаКарте        = УправлениеКонтактнойИнформациейБП.СтрокаСсылкиПоказатьНаКарте();
	РегистрирующийОрганПрежнийАдресНаКарте = УправлениеКонтактнойИнформациейБП.СтрокаСсылкиПоказатьНаКарте();
	МФЦАдресНаКарте = УправлениеКонтактнойИнформациейБП.СтрокаСсылкиПоказатьНаКарте();
	
	Элементы.УплатаГоспошлиныЗаголовокДекорация.Заголовок = СтрШаблон(НСтр("ru = 'Оплатите госпошлину %1 руб.'"),
		Обработки.РегистрацияОрганизации.СуммаПошлиныЗаВнесениеИзмененийВУчредительныеДокументы());
	
	ИзменитьЭтап("ВнесениеИзмененийЕГР_СписокИзменений");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЭтоНачалоРаботы Тогда
		// Оповестим другие формы сервиса регистрации, чтобы они закрылись.
		РегистрацияОрганизацииКлиент.ОповеститьОбОткрытии(ЭтотОбъект,
			РегистрацияОрганизацииКлиентСервер.ИмяПомощникаВнесенияИзменений(),
			НавигацияНомерШага);
	КонецЕсли;
	
	Если ЭтоНачалоРаботы Тогда
		Если Не ПустаяСтрока(ПоискИННЗапрос) Тогда
			ПоказатьИндикаторОжидания();
			ПодключитьОбработчикОжидания("Подключаемый_ЗаполнитьРеквизитыОрганизацииПоИННПриОткрытии", 0.1, Истина);
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Организация) Тогда
		Если Не ПустаяСтрока(ИННОрганизации(Организация)) Тогда
			ПоказатьИндикаторОжидания();
			ПодключитьОбработчикОжидания("Подключаемый_ЗаполнитьРеквизитыОрганизацииПоИННПриОткрытии", 0.1, Истина);
		ИначеЕсли Не ИспользоватьНесколькоОрганизаций Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Не указан ИНН организации'"));
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если НЕ Модифицированность ИЛИ ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект);
	ПоказатьВопрос(
		ОписаниеОповещения,
		НСтр("ru='Данные были изменены. Сохранить изменения?'"),
		РежимДиалогаВопрос.ДаНетОтмена,
		,
		КодВозвратаДиалога.Да);
	
	Отказ = Истина;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма") Тогда
		
		Если ИсточникВыбора.ИмяФормы = ИмяФормыИзмененияНаименования() Тогда
			ОбработатьИзменениеНаименования(ВыбранноеЗначение);
		ИначеЕсли ИсточникВыбора.ИмяФормы = ИмяФормыИзмененияРуководителя() Тогда
			ОбработатьИзменениеРуководителя(ВыбранноеЗначение);
		ИначеЕсли ИсточникВыбора.ИмяФормы = ИмяФормыИзмененияУчредителей() Тогда
			ОбработатьИзменениеУчредителей(ВыбранноеЗначение);
		ИначеЕсли ИсточникВыбора.ИмяФормы = ИмяФормыИзмененияВидовДеятельности() Тогда
			ОбработатьИзменениеВидовДеятельности(ВыбранноеЗначение);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = ЭтотОбъект Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменитьПараметрНавигации" Тогда
		
		ИзменитьЭтап(Параметр);
		
	ИначеЕсли ИмяСобытия = "ОткрытШагПомощника_РегистрацияОрганизации" Тогда
		
		ИмяЭтогоПомощника = РегистрацияОрганизацииКлиентСервер.ИмяПомощникаВнесенияИзменений();
		Если ЭтоНачалоРаботы И (Параметр = Неопределено Или Параметр.ИмяПомощника <> ИмяЭтогоПомощника) Тогда
			// Пользователь открыл другую форму помощника регистрации
			Закрыть();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ЗакрытьПомощникВнесенияИзмененийЕГР"
		И (Параметр = ЗаявлениеОВнесенииИзмененийУчредительныеДокументы
			Или Параметр = ЗаявлениеОВнесенииИзмененийЕГР) Тогда
		
		// Пользователь изменил заявление вручную в форме регл. уведомления - закрываем помощник.
		Закрыть();
		
	ИначеЕсли ИмяСобытия = "ЗавершенаРаботаПомощникаНачалаРаботы" Тогда
		
		// Работа помощника начала работы может быть завершена в другом окне (например, из окна БыстрыйСтарт).
		// В этом случае нужно закрыть окно помощника регистрации. Но пользователь мог начать изменять значение какого-нибудь
		// текстового поля и при закрытии окна сработает обработчик "ПриИзменении" и форма станет Модифицированной и не сможет
		// закрыться без вопроса. Для этого изменяем текущий элемент и снимаем модифицированность.
		ЭтотОбъект.ТекущийЭлемент = Элементы.СформироватьДокументы;
		ЭтотОбъект.Модифицированность = Ложь;
		Если ЭтотОбъект.Открыта() Тогда
			ЭтотОбъект.Закрыть();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ЗавершеноВнесениеИзмененийЕГР" И Параметр = Организация Тогда
		
		// Внесение изменений в ЕГР завершено, открываем первый шаг помощника и сбрасываем изменения реквизитов.
		ЗаполнитьРеквизитыОрганизацииПоИНН(ИННОрганизации(Организация), Ложь);
		
	ИначеЕсли ИмяСобытия = "ИзменениеУчетнойПолитики" Тогда
		
		Если Параметр = Объект.Ссылка
			Или Параметр = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Объект.Ссылка) Тогда
			УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("Организация", Объект.Ссылка));
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_ФизическиеЛица" Тогда
		
		Если Источник = Заявитель.Ссылка Тогда
			ПрочитатьДанныеЗаявителя();
		КонецЕсли;
		
		НайденныеУчредители = Учредители.НайтиСтроки(Новый Структура("Ссылка", Источник));
		Для Каждого Учредитель Из НайденныеУчредители Цикл
			ЗаполнитьДобавленныеКолонкиВСтрокеТаблицыУчредители(Учредитель, Заявитель.Ссылка);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ТекущийЭтап = "ВнесениеИзмененийЕГР_СписокИзменений" Тогда
		
		ПроверитьЗаполнениеСпискаИзменений(Отказ);
		
	ИначеЕсли ТекущийЭтап = "ВнесениеИзмененийЕГР_Заявление" Тогда
		
		Если ЭтоЮрЛицо(ЭтотОбъект) И Не ИзмененРуководитель(ЭтотОбъект) Тогда
			ПроверитьЗаполнениеПаспортныхДанныхЗаявителя(Отказ);
		КонецЕсли;
		
		ПроверитьЗаполнениеЗаявления(Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигацияПомощниковКлиент.ЭтоНавигационнаяСсылкаШага(НавигационнаяСсылкаФорматированнойСтроки) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		// Для корректной работы навигации необходимо передавать ключевые параметры формы.
		СтруктураНавигации = СтруктураНавигации();
		СтруктураШага = СтруктураНавигации[НавигационнаяСсылкаФорматированнойСтроки];
		Если СтруктураШага <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтруктураШага.СтруктураПараметровФормы, Параметры);
		КонецЕсли;
		
		НавигацияПомощниковКлиент.ОбработатьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки, СтруктураНавигации);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область СписокИзменений

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Организация) И Организация <> Объект.Ссылка Тогда
		ОрганизацияПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеПоискаИННПриИзменении(Элемент)
	
	Если Не ПустаяСтрока(ПоискИННЗапрос) Тогда
		ПоискИННОтвет = ОрганизацииФормыДляОтчетностиВызовСервера.ЗапроситьДанныеЕГР(НовыйЗапросДанныхЕГР(ПоискИННЗапрос));
		
		// Пользователь сразу после изменения поля мог нажать команду "Заполнить".
		// Дадим возможность выполниться обработчику команды заполнения.
		// Поэтому фактическую обработку результата выполняем после обработчика изменения поля.
		ПодключитьОбработчикОжидания("Подключаемый_ОбработатьРезультатПоискаИНН", 0.2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНаименованиеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	Если Не ПустаяСтрока(НаименованиеПолноеНовое) И ПустаяСтрока(НаименованиеСокращенноеНовое) Тогда
		ПараметрыФормы.Вставить("НаименованиеСокращенное", НаименованиеСокращенное);
	Иначе
		ПараметрыФормы.Вставить("НаименованиеСокращенное", НаименованиеСокращенноеНовое);
	КонецЕсли;
	Если Не ПустаяСтрока(НаименованиеСокращенноеНовое) И ПустаяСтрока(НаименованиеПолноеНовое) Тогда
		ПараметрыФормы.Вставить("НаименованиеПолное", НаименованиеПолное);
	Иначе
		ПараметрыФормы.Вставить("НаименованиеПолное", НаименованиеПолноеНовое);
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормыИзмененияНаименования(), ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЮридическийАдресНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации", ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации"));
	ПараметрыОткрытия.Вставить("ЗначенияПолей", ЮридическийАдресНовыйЗначениеJSON);
	ПараметрыОткрытия.Вставить("Представление", ЮридическийАдресНовый);
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Новый юридический адрес'"));
	ПараметрыОткрытия.Вставить("ТолькоПросмотр", ТолькоПросмотр);
	
	Оповещение = Новый ОписаниеОповещения("ОбработкаЗакрытияФормыИзмененияЮридическогоАдреса", ЭтотОбъект);
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, Элемент, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРуководителяНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Новый руководитель'"));
	ПараметрыФормы.Вставить("ФормаБлокируетОкноВладельца", Истина);
	ПараметрыФормы.Вставить("ИспользоватьДолжность", Истина);
	
	Если ЗначениеЗаполнено(ОтветственныеЛицаНовые.ФизическоеЛицо) Тогда
		ПараметрыФормы.Вставить("Ключ",      ОтветственныеЛицаНовые.ФизическоеЛицо);
		ПараметрыФормы.Вставить("Должность", ОтветственныеЛицаНовые.Должность);
		ПараметрыФормы.Вставить("СрокПолномочий", ОтветственныеЛицаНовые.СрокПолномочий);
	Иначе
		ПараметрыФормы.Вставить("Должность", РуководительДолжность);
		ПараметрыФормы.Вставить("СрокПолномочий", 5);
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормыИзмененияРуководителя(), ПараметрыФормы, ЭтотОбъект, , , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьУчредителейНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяИзменяемойТаблицы = ?(ИзмененыУчредители(ЭтотОбъект), "УчредителиНовые", "Учредители");
	ИзменяемыйУставныйКапитал = ?(ИзмененУставныйКапитал(ЭтотОбъект), УставныйКапиталНовый, УставныйКапитал);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("АдресХранилища",            СохранитьТаблицуВоВременноеХранилище(ИмяИзменяемойТаблицы));
	ПараметрыФормы.Вставить("АдресХранилищаДоИзменения", СохранитьТаблицуВоВременноеХранилище("Учредители"));
	ПараметрыФормы.Вставить("УставныйКапитал",            ИзменяемыйУставныйКапитал);
	ПараметрыФормы.Вставить("УставныйКапиталДоИзменения", УставныйКапитал);
	
	ОткрытьФорму(ИмяФормыИзмененияУчредителей(), ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВидыДеятельностиНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИмяИзменяемойТаблицы = ?(ИзмененыВидыДеятельности(ЭтотОбъект), "ВидыДеятельностиНовые", "ВидыДеятельности");
	ИзменяемыйОсновнойКод = ?(ИзмененОсновнойВидДеятельности(ЭтотОбъект), КодОКВЭД2Новый, КодОКВЭД2);
	
	ИзменяемаяТаблица = ЭтотОбъект[ИмяИзменяемойТаблицы];
	Если ИзменяемаяТаблица.Количество() > 0 Тогда
		Если ПустаяСтрока(ИзменяемаяТаблица[0].Наименование) Тогда
			// Отложеное заполнение
			ЗаполнитьНаименованияВидовДеятельности();
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЮридическоеФизическоеЛицо", Объект.ЮридическоеФизическоеЛицо);
	ПараметрыФормы.Вставить("АдресХранилища", СохранитьТаблицуВоВременноеХранилище(ИмяИзменяемойТаблицы));
	ПараметрыФормы.Вставить("ОсновнойКод", ИзменяемыйОсновнойКод);
	ПараметрыФормы.Вставить("ОсновнойКодЕГР", КодОКВЭД2);
	
	ОткрытьФорму(ИмяФормыИзмененияВидовДеятельности(), ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область Заявление

&НаКлиенте
Процедура ОтчествоЗаявителяПриИзменении(Элемент)
	
	ОрганизацииФормыКлиентСервер.ОпределитьПолПоОтчеству(Заявитель.Пол, Заявитель.Отчество);
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьРуководителяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСДолжностямиБПКлиент.ДолжностьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьРуководителяАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСДолжностямиБПКлиент.ДолжностьАвтоПодбор(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьРуководителяОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСДолжностямиБПКлиент.ДолжностьОкончаниеВводаТекста(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИННЗаявителяПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УзнатьИНННажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	ПроверитьЗаполнениеПаспортныхДанныхЗаявителя(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ДанныеФизическогоЛица", ДанныеЗаявителя());
	
	ОткрытьФорму("Обработка.РегистрацияОрганизации.Форма.УзнатьИНН", ПараметрыФормы, Элементы.ИННЗаявителя);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявительАдресПропискиПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Данные для редактирования
	ПараметрыКонтактнойИнформации = ПараметрыПолученияКонтактнойИнформацииЗаявителя(ЭтотОбъект);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Заголовок", НСтр("ru = 'Адрес по прописке'"));
	ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации", ПараметрыКонтактнойИнформации.АдресПрописки);
	ПараметрыОткрытия.Вставить("ЗначенияПолей", ЗаявительАдресПропискиЗначениеJSON);
	
	ТекстПустогоАдреса = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки();
	Если ЗаявительАдресПропискиПредставление <> ТекстПустогоАдреса Тогда
		ПараметрыОткрытия.Вставить("Представление", ЗаявительАдресПропискиПредставление);
	Иначе
		ПараметрыОткрытия.Вставить("Представление", "");
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗаявительАдресПропискиПослеВводаАдреса", ЭтотОбъект);
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, Элемент, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявительТелефонПредставлениеПриИзменении(Элемент)
	
	Текст = Элемент.ТекстРедактирования;
	Если ПустаяСтрока(Текст) Тогда
		// Очистка данных, сбрасываем как представления, так и внутренние значения полей.
		ЗаявительТелефонПредставление = "";
		ЗаявительТелефонЗначениеJSON = "";
		Возврат;
	КонецЕсли;
	
	ПараметрыКонтактнойИнформации = ПараметрыПолученияКонтактнойИнформацииЗаявителя(ЭтотОбъект);
	
	// Формируем внутренние значения полей по тексту и параметрам формирования
	Телефон = ОрганизацииФормыКлиентСервер.ТелефонДляЗаявления(Текст);
	ЗаявительТелефонПредставление = Телефон;
	ЗаявительТелефонЗначениеJSON = КонтактнаяИнформацияПоПредставлению(Телефон, ПараметрыКонтактнойИнформации.Телефон);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявительТелефонПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыКонтактнойИнформации = ПараметрыПолученияКонтактнойИнформацииЗаявителя(ЭтотОбъект);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации", ПараметрыКонтактнойИнформации.Телефон);
	ПараметрыОткрытия.Вставить("ЗначенияПолей", ЗаявительТелефонЗначениеJSON);
	ПараметрыОткрытия.Вставить("Представление", ЗаявительТелефонПредставление);
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявительТелефонПредставлениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		// Отказ от выбора, данные неизменны
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ЗаявительТелефонЗначениеJSON = ВыбранноеЗначение.Значение;
	ЗаявительТелефонПредставление = ВыбранноеЗначение.Представление;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявительEMailПредставлениеПриИзменении(Элемент)
	
	ЗаявительEMailПредставление = СокрЛП(ЗаявительEMailПредставление);
	Если ПустаяСтрока(ЗаявительEMailПредставление) Тогда
		// Очистка данных, сбрасываем как представления, так и внутренние значения полей.
		ЗаявительEMailЗначениеJSON = "";
		Возврат;
	КонецЕсли;
	
	ПараметрыКонтактнойИнформации = ПараметрыПолученияКонтактнойИнформацииЗаявителя(ЭтотОбъект);
	
	// Формируем внутренние значения полей по тексту и параметрам формирования
	ЗаявительEMailЗначениеJSON =
		КонтактнаяИнформацияПоПредставлению(ЗаявительEMailПредставление, ПараметрыКонтактнойИнформации.Email);
	
КонецПроцедуры

#КонецОбласти

#Область Документы

&НаКлиенте
Процедура ЗаявлениеОВнесенииИзмененийЕГРИПДекорацияНажатие(Элемент)
	
	ОткрытьЗаявлениеОРегистрацииИзменений("ЗаявлениеОВнесенииИзмененийЕГР", Элемент.Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявлениеОВнесенииИзмененийЕГРЮЛДекорацияНажатие(Элемент)
	
	ОткрытьЗаявлениеОРегистрацииИзменений("ЗаявлениеОВнесенииИзмененийЕГР", Элемент.Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявлениеОРегистрацииИзмененийВУставеДекорацияНажатие(Элемент)
	
	ОткрытьЗаявлениеОРегистрацииИзменений("ЗаявлениеОВнесенииИзмененийУчредительныеДокументы", Элемент.Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура УплатаГоспошлиныОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОрганизацииФормыКлиент.ПерейтиКСервисуСкачатьКвитанциюНаОплатуГоспошлиныПриРегистрации();
	
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыУплатыГоспошлиныНажатие(Элемент)
	
	ПлатежныеРеквизиты = Новый Структура;
	ПлатежныеРеквизиты.Вставить("Получатель", ПлатежныеРеквизитыНаименованиеПолучателя);
	ПлатежныеРеквизиты.Вставить("ИНН", ПлатежныеРеквизитыИНН);
	ПлатежныеРеквизиты.Вставить("КПП", ПлатежныеРеквизитыКПП);
	ПлатежныеРеквизиты.Вставить("НомерСчета", ПлатежныеРеквизитыНомерСчета);
	ПлатежныеРеквизиты.Вставить("БанкПолучателя", ПлатежныеРеквизитыНаименованиеБанка);
	ПлатежныеРеквизиты.Вставить("БИК", ПлатежныеРеквизитыБИК);
	ПлатежныеРеквизиты.Вставить("КБК", ПлатежныеРеквизитыКБК);
	ПлатежныеРеквизиты.Вставить("Сумма", ПлатежныеРеквизитыСумма);
	
	ОткрытьФорму("Обработка.РегистрацияОрганизации.Форма.РеквизитыОплатыГоспошлины", ПлатежныеРеквизиты, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КвитанцияНаОплатуГоспошлиныНажатие(Элемент)
	
	ОткрытьПрисоединенныйКЗаявлениюФайл("КвитанцияНаОплатуГоспошлины");
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрирующийОрганАдресНаКартеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформациейКлиентБП.ПоказатьНаКартеНажатие(ЭтотОбъект, Элемент, РегистрирующийОрганАдрес);
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрирующийОрганПрежнийАдресНаКартеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформациейКлиентБП.ПоказатьНаКартеНажатие(ЭтотОбъект, Элемент, РегистрирующийОрганПрежнийАдрес);
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаНаАдресИФНСНаКартеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформациейКлиентБП.ПоказатьНаКартеНажатие(ЭтотОбъект, Элемент, РегистрирующийОрганАдрес);
	
КонецПроцедуры

&НаКлиенте
Процедура МФЦАдресНаКартеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьНаКартеБлижайшийМФЦ(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаИнструкцияЕГРИПОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьПрисоединенныйКЗаявлениюФайл("ИнструкцияПоВнесениюИзмененийВЕГРИП");
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаИнструкцияЕГРЮЛОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОткрытьПрисоединенныйКЗаявлениюФайл("ИнструкцияПоВнесениюИзмененийВЕГРЮЛ");
	
КонецПроцедуры

&НаКлиенте
Процедура УставОООНажатие(Элемент)
	
	ОткрытьПрисоединенныйКЗаявлениюФайл("Устав");
	
КонецПроцедуры

&НаКлиенте
Процедура РешениеЕдинственногоУчредителяОООНажатие(Элемент)
	
	ОткрытьПрисоединенныйКЗаявлениюФайл("РешениеЕдинственногоУчредителя");
	
КонецПроцедуры

&НаКлиенте
Процедура ПротоколСобранияУчредителейОООНажатие(Элемент)
	
	ОткрытьПрисоединенныйКЗаявлениюФайл("ПротоколСобранияУчредителей");
	
КонецПроцедуры

&НаКлиенте
Процедура ПротоколСобранияУчредителейЕдинственногоУчредителяОООНажатие(Элемент)
	
	ОткрытьПрисоединенныйКЗаявлениюФайл("ПротоколСобранияУчредителейЕдинственногоУчредителя");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУчредители

&НаКлиенте
Процедура УчредителиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "УчредителиНаименование" Тогда
		СтандартнаяОбработка = Ложь;
		ТекущиеДанные = Элементы.Учредители.ТекущиеДанные;
		Если ТекущиеДанные.Ссылка = Заявитель.Ссылка И Модифицированность Тогда
			ЗаписатьЗаявителя();
			ОповеститьОбИзменении(Заявитель.Ссылка);
		КонецЕсли;
		РегистрацияОрганизацииКлиент.ОткрытьФормуУчредителя(Элемент, ТекущиеДанные);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область СписокИзменений

&НаКлиенте
Процедура ЗаполнитьРеквизитыПоПолюПоискаИНН(Команда)
	
	Если ПустаяСтрока(ПоискИННЗапрос) Тогда
		ТекстСообщения = НСтр("ru = 'Не указан ИНН организации'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ПолеИсточникИНН(ЭтоНачалоРаботы));
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРеквизитыОрганизацииПоИНН(ПоискИННЗапрос, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыВыбраннойОрганизации(Команда)
	
	Перем ИННОрганизации;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
			"Поле", "Заполнение", Элементы.Организация.Заголовок);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ПолеИсточникИНН(ЭтоНачалоРаботы));
		Возврат;
	КонецЕсли;
	
	ИННОрганизации = ИННОрганизации(Организация);
	Если Не ЗначениеЗаполнено(ИННОрганизации) Тогда
		ТекстСообщения = НСтр("ru = 'Не указан ИНН организации'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ПолеИсточникИНН(ЭтоНачалоРаботы));
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРеквизитыОрганизацииПоИНН(ИННОрганизации, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаявление(Команда)
	
	СоздатьЗаявлениеНаКлиенте(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область Заявление

&НаКлиенте
Процедура ИзменитьСписокИзменений(Команда)
	
	ИзменитьЭтап("ВнесениеИзмененийЕГР_СписокИзменений");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаявление(Команда)
	
	ЗаполнитьЗаявлениеНаКлиенте(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область Документы

&НаКлиенте
Процедура ХочуКонсультацию(Команда)
	
	ОткрытьФорму("Обработка.РегистрацияОрганизации.Форма.ФормаХочуКонсультацию");
	
КонецПроцедуры

&НаКлиенте
Процедура АдресИРеквизитыВашейИнспекции(Команда)
	
	ОрганизацииФормыКлиент.ПерейтиКСервисуОпределитьРеквизитыИФНС();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьРаботу(Команда)
	
	ПоказатьИндикаторОжидания();
	
	ПредупреждениеОбОшибке = Новый Структура;
	Если Не ПодготовитьНачалоРаботы(ПредупреждениеОбОшибке) Тогда
		ВызватьИсключение ПредупреждениеОбОшибке;
	КонецЕсли;
	
	ОбщегоНазначенияБПКлиент.УстановитьОсновнуюОрганизацию(Объект.Ссылка, Ложь);
	
	ОбновитьИнтерфейс();
	
	Оповестить("ЗавершенаРаботаПомощникаНачалаРаботы", ЭтотОбъект.ИмяФормы, ЭтотОбъект);
	
	ОткрытьФорму("Обработка.НачалоРаботы.Форма.НачалоРаботыВСервисе");
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗаявление(Команда)
	
	Модифицированность = Ложь;
	ИзменитьЭтап("ВнесениеИзмененийЕГР_Заявление");
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБлижайшийМФЦ(Команда)
	
	ЭтоЮрЛицо = ЭтоЮрЛицо(ЭтотОбъект);
	Если ЭтоЮрЛицо Тогда
		Изменено = СтруктураИзменений(ЭтотОбъект);
		ЮрАдресИПропискаГлавногоСовпадают = Изменено.Местоположение
			И ЮрАдресИПропискаГлавногоСовпадают(ЗаявительАдресПропискиЗначениеJSON, ЮридическийАдресНовыйЗначениеJSON, Учредители);
		ИзмененияВносятсяВУчредительныеДокументы = ИзмененияВносятсяВУчредительныеДокументы(
			ЭтоЮрЛицо, Изменено, АдресВУставеПолный(АдресВУставе), КодыОКВЭДпротиворечатУставу(ВидыДеятельностиВУставе));
		ИзмененияТребуютУведомления = ИзмененияТребуютУведомления(ЭтоЮрЛицо, Изменено, ЮрАдресИПропискаГлавногоСовпадают);
		
		АдресДляПоискаЗначениеJSON = ?(ИзмененияТребуютУведомления, ЮридическийАдресНовыйЗначениеJSON, ЮридическийАдресЗначениеJSON);
	Иначе
		АдресДляПоискаЗначениеJSON = ЗаявительАдресПропискиЗначениеJSON;
	КонецЕсли;
	
	ПредставлениеАдреса = РегистрацияОрганизацииВызовСервера.ПредставлениеАдресаДляПоискаМФЦ(АдресДляПоискаЗначениеJSON);
	ДополнениеАдреса = НСтр("ru = 'МФЦ Мои документы'");
	
	УправлениеКонтактнойИнформациейКлиентБП.ПоказатьНаКартеНажатие(
		ЭтотОбъект, Элементы.ПоказатьБлижайшийМФЦ, ПредставлениеАдреса, ДополнениеАдреса);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБлижайшийМФЦУведомление(Команда)
	
	ПоказатьНаКартеБлижайшийМФЦ(Элементы.ПоказатьБлижайшийМФЦУведомление);
	
КонецПроцедуры

&НаКлиенте
Процедура Готово(Команда)
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		// Если нажали кнопку "Отмена", то ничего не делаем.
		Возврат;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ТекущийЭтап = "ВнесениеИзмененийЕГР_СписокИзменений" Тогда
			СоздатьЗаявлениеНаКлиенте(Истина);
		Иначе
			ЗаполнитьЗаявлениеНаКлиенте(Истина);
		КонецЕсли;
	Иначе
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьИндикаторОжидания()
	
	// Устанавливаем видимость страницы
	УстановитьВидимостьСтраницы(ЭтотОбъект, "Ожидание");
	
	// Запускаем индикатор с задержкой, достаточной для загрузки в веб-кленте
	ЗапуститьИндикаторОжидания();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьИндикаторОжидания()
	
	ИндикаторОжидания = Элементы.ДлительнаяОперацияКартинка;
	
	Если ИндикаторОжидания.Видимость Тогда
		ИндикаторОжидания.Видимость = Ложь;
		ПодключитьОбработчикОжидания("ЗапуститьИндикаторОжидания", 0.5, Истина);
	Иначе
		ИндикаторОжидания.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СпособРегистрации(СпособПодачиДокументов)
	
	Возврат РегистрацияОрганизацииКлиентСервер.СпособРегистрацииПоСпособуПодачиДокументов(СпособПодачиДокументов);
	
КонецФункции

&НаКлиенте
Процедура ПоказатьНаКартеБлижайшийМФЦ(Элемент)
	
	Если ЭтоЮрЛицо(ЭтотОбъект) Тогда
		АдресДляПоискаЗначениеJSON = ЮридическийАдресЗначениеJSON;
	Иначе
		АдресДляПоискаЗначениеJSON = ЗаявительАдресПропискиЗначениеJSON;
	КонецЕсли;
	
	ПредставлениеАдреса = РегистрацияОрганизацииВызовСервера.ПредставлениеАдресаДляПоискаМФЦ(АдресДляПоискаЗначениеJSON);
	ДополнениеАдреса = НСтр("ru = 'МФЦ Мои документы'");
	
	УправлениеКонтактнойИнформациейКлиентБП.ПоказатьНаКартеНажатие(ЭтотОбъект, Элемент, ПредставлениеАдреса, ДополнениеАдреса);
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеФормой

&НаСервереБезКонтекста
Функция ЗаголовокФормы(ЮридическоеФизическоеЛицо = Неопределено)
	
	Если ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		Заголовок = НСтр("ru = 'Внесение изменений в ЕГРЮЛ'")
	ИначеЕсли ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		Заголовок = НСтр("ru = 'Внесение изменений в ЕГРИП'")
	Иначе
		Заголовок = НСтр("ru = 'Внесение изменений в ЕГРЮЛ (ЕГРИП)'")
	КонецЕсли;
	
	Возврат Заголовок;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Если Форма.ТекущийЭтап = "ВнесениеИзмененийЕГР_СписокИзменений" Тогда
		
		УправлениеЗакладкойИзменения(Форма);
		
	ИначеЕсли Форма.ТекущийЭтап = "ВнесениеИзмененийЕГР_Заявление" Тогда
		
		УправлениеЗакладкойЗаявление(Форма);
		
	ИначеЕсли Форма.ТекущийЭтап = "ВнесениеИзмененийЕГР_Документы" Тогда
		
		УправлениеЗакладкойДокументы(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЗакладкойИзменения(Форма)
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ОбъектЗаполнен = ОбъектЗаполнен(Объект);
	
	Элементы.ПоискПоОрганизации.Видимость = Не Форма.ЭтоНачалоРаботы И Форма.ИспользоватьНесколькоОрганизаций;
	Элементы.ПоискПоИНН.Видимость = Форма.ЭтоНачалоРаботы;
	
	ЭтоЮрЛицо = ЭтоЮрЛицо(Форма);
	
	Изменено = СтруктураИзменений(Форма);
	
	Элементы.ПредставлениеОрганизации.Видимость = ОбъектЗаполнен;
	Элементы.РеквизитыОрганизации.Видимость = ОбъектЗаполнен И ЭтоЮрЛицо;
	Элементы.ПодсказкаНеобходимостьИзмененийИП.Видимость = НЕ ЭтоЮрЛицо;
	
	ШрифтПоУмолчанию = Новый Шрифт;
	
	Если ЭтоЮрЛицо Тогда
		
		// Наименование организации
		
		Если Изменено.ПолноеНаименование И Не Изменено.СокращенноеНаименование Тогда
			Элементы.НаименованиеСокращенное.Видимость = Ложь;
			Элементы.НаименованиеПолное.Видимость = Истина;
			Элементы.НаименованиеПолное.Шрифт = ?(Изменено.ПолноеНаименование, Форма.ШрифтИзмененныхРеквизитов, ШрифтПоУмолчанию);
		Иначе
			Элементы.НаименованиеСокращенное.Видимость = Истина;
			Элементы.НаименованиеСокращенное.Шрифт = ?(Изменено.СокращенноеНаименование, Форма.ШрифтИзмененныхРеквизитов, ШрифтПоУмолчанию);
			Элементы.НаименованиеПолное.Видимость = Ложь;
		КонецЕсли;
		
		Форма.ИзменитьНаименование = ТекстГиперссылкиИзменитьНаименование(Форма);
		
		// Юридический адрес
		
		Элементы.ЮридическийАдрес.Шрифт =
			?(Изменено.ЮридическийАдрес, Форма.ШрифтИзмененныхРеквизитов, ШрифтПоУмолчанию);
		
		Форма.ИзменитьЮридическийАдрес = ТекстГиперссылкиИзменитьЮридическийАдрес(Форма);
		
		// Уточнять как указан адрес в уставе имеет смысл только, если другие изменения не вносятся в устав
		Элементы.АдресВУставе.Видимость = СпрашиватьКакУказанАдресВУставе(Форма);
		
		// Руководитель организации
		
		ЕстьСведенияОРуководителе = ЕстьСведенияОРуководителе(Форма);
		Элементы.Руководитель.Доступность = ЕстьСведенияОРуководителе;
		
		Элементы.РуководительНаименование.Заголовок =
			?(ЗначениеЗаполнено(Форма.РуководительДолжность),
			НСтр("ru = 'Руководитель'"),
			Строка(Форма.РуководительДолжность));
		
		Элементы.РуководительНаименование.Шрифт = ?(Изменено.Руководитель, Форма.ШрифтИзмененныхРеквизитов, ШрифтПоУмолчанию);
		
		Элементы.ИзменитьРуководителя.Видимость = ЕстьСведенияОРуководителе;
		Форма.ИзменитьРуководителя = ТекстГиперссылкиИзменитьРуководителя(Форма);
		
	КонецЕсли;
	
	// Виды деятельности
	Элементы.СписокВидовДеятельности.Видимость = ОбъектЗаполнен;
	
	Элементы.ВидыДеятельностиВУставе.Видимость = ЭтоЮрЛицо И СпрашиватьКакУказаныВидыДеятельностиВУставе(Форма);
	
	// Командная панель
	Элементы.СоздатьЗаявление.Видимость = ОбъектЗаполнен;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЗакладкойЗаявление(Форма)
	
	Элементы = Форма.Элементы;
	Заявитель = Форма.Заявитель;
	
	Изменено = СтруктураИзменений(Форма);
	
	ЭтоЮрЛицо = ЭтоЮрЛицо(Форма);
	
	Элементы.ДатаРешения.Видимость = ЭтоЮрЛицо;
	
	Элементы.Заявитель.ОтображатьЗаголовок = ЭтоЮрЛицо;
	Если ЕстьСведенияОРуководителе(Форма) Тогда
		Элементы.Заявитель.Заголовок = НСтр("ru = 'Руководитель'");
	Иначе
		// Исполнительным органом является управляющая компания
		Элементы.Заявитель.Заголовок = НСтр("ru = 'Заявитель'");
	КонецЕсли;
	
	// Если изменен руководитель организации, заявителелем является новый руководитель,
	// данные по которому введены на первом этапе.
	Элементы.Заявитель.Видимость = Не (ЭтоЮрЛицо И Изменено.Руководитель);
	
	Элементы.ЗаявительИП.Видимость = Не ЭтоЮрЛицо;
	Элементы.ЗаявительООО.Видимость = ЭтоЮрЛицо;
	
	// Паспортные данные и ИНН
	Элементы.ПаспортныеДанныеЗаявителя.ОтображатьЗаголовок = ЭтоЮрЛицо;
	Элементы.ПаспортныеДанные.Видимость = ЭтоЮрЛицо;
	
	// ИНН индивидуального предпринимателя вводится на этапе "Изменения"
	Элементы.ИННФизическогоЛица.Видимость = ЭтоЮрЛицо;
	Если ЭтоЮрЛицо Тогда
		Форма.НадписьОшибкаИННЗаявителя = СообщениеОбОшибкеИНН(Заявитель.ИНН);
		Элементы.НадписьОшибкаИННЗаявителя.Видимость = Не ПустаяСтрока(Форма.НадписьОшибкаИННЗаявителя);
	КонецЕсли;
	
	// Контактная информация
	Элементы.КонтактнаяИнформация.ОтображатьЗаголовок = ЭтоЮрЛицо;
	
	Элементы.ГруппаУчредители.Видимость = ЭтоЮрЛицо И Не ЕдинственныйУчредительРуководитель(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЗакладкойДокументы(Форма)
	
	Элементы = Форма.Элементы;
	
	ЭтоЮрЛицо = ЭтоЮрЛицо(Форма);
	
	Изменено = СтруктураИзменений(Форма);
	ЮрАдресИПропискаГлавногоСовпадают = Изменено.Местоположение
		И ЮрАдресИПропискаГлавногоСовпадают(Форма.ЗаявительАдресПропискиЗначениеJSON, Форма.ЮридическийАдресНовыйЗначениеJSON, Форма.Учредители);
	ИзмененияВносятсяВУчредительныеДокументы = ИзмененияВносятсяВУчредительныеДокументы(
		ЭтоЮрЛицо, Изменено, АдресВУставеПолный(Форма.АдресВУставе), КодыОКВЭДпротиворечатУставу(Форма.ВидыДеятельностиВУставе));
	ИзмененияТребуютУведомления = ИзмененияТребуютУведомления(ЭтоЮрЛицо, Изменено, ЮрАдресИПропискаГлавногоСовпадают);
	
	РегистрацияЧерезМФЦ = (Форма.СпособПодачиДокументов = РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов().МФЦлично);
	
	// Пакет документов
	Элементы.ЗаявлениеОВнесенииИзмененийЕГРИП.Видимость = Не ЭтоЮрЛицо;
	Элементы.ЗаявлениеОВнесенииИзмененийЕГРЮЛ.Видимость = ЭтоЮрЛицо
		И (Не ИзмененияВносятсяВУчредительныеДокументы Или ИзмененияТребуютУведомления Или Изменено.Руководитель);
	Элементы.ЗаявлениеОРегистрацииИзмененийВУставе.Видимость = (ЭтоЮрЛицо И ИзмененияВносятсяВУчредительныеДокументы);
	Элементы.Устав.Видимость = (ЭтоЮрЛицо И ИзмененияВносятсяВУчредительныеДокументы);
	
	Если ЭтоЮрЛицо Тогда
		
		УчредителиПоТипам = УчредителиПоТипам(Форма);
		
		КоличествоЮридическихЛиц = УчредителиПоТипам.ЮридическиеЛица.Количество();
		КоличествоФизическихЛиц  = УчредителиПоТипам.ФизическиеЛица.Количество();
		ЕдинственныйУчредительЮридическоеЛицо = (КоличествоЮридическихЛиц = 1) И (КоличествоФизическихЛиц = 0);
		ЕдинственныйУчредительФизическоеЛицо = (КоличествоЮридическихЛиц = 0) И (КоличествоФизическихЛиц = 1);
		НесколькоУчредителей = (Не ЕдинственныйУчредительЮридическоеЛицо И Не ЕдинственныйУчредительФизическоеЛицо);
		
		Элементы.РешениеЕдинственногоУчредителя.Видимость = ЕдинственныйУчредительФизическоеЛицо;
		Элементы.ПротоколСобранияУчредителей.Видимость= НесколькоУчредителей;
		
		Элементы.ПротоколСобранияУчредителейЕдинственногоУчредителя.Видимость = ЕдинственныйУчредительЮридическоеЛицо;
		Если ЕдинственныйУчредительЮридическоеЛицо Тогда
			Элементы.ПротоколСобранияУчредителейЕдинственногоУчредителяДекорация.Заголовок =
				СтрШаблон(НСтр("ru = 'Образец протокола собрания учредителей %1'"), УчредителиПоТипам.ЮридическиеЛица[0].Наименование);
		КонецЕсли;
		
	Иначе
		Элементы.ПротоколСобранияУчредителейЕдинственногоУчредителя.Видимость = Ложь;
		Элементы.РешениеЕдинственногоУчредителя.Видимость = Ложь;
		Элементы.ПротоколСобранияУчредителей.Видимость    = Ложь;
	КонецЕсли;
	
	Элементы.СсылкаИнструкцияЕГРИП.Видимость = Не ЭтоЮрЛицо;
	Элементы.СсылкаИнструкцияЕГРЮЛ.Видимость = ЭтоЮрЛицо;
	
	Элементы.УслугаКонсультации.Видимость = ОказываютсяУслугиКонсультации();
	
	// Уведомление
	Элементы.Уведомление.Видимость = ИзмененияТребуютУведомления;
	
	ОпределенПрежнийРегистрирующийОрган = Не ПустаяСтрока(Форма.РегистрирующийОрганПрежнийНаименование);
	Элементы.РегистрирующаяНалоговаяПрежняя.Видимость = ОпределенПрежнийРегистрирующийОрган И Не РегистрацияЧерезМФЦ;
	Элементы.РегистрирующийОрганПрежнийИнформация.Видимость = Не ПустаяСтрока(Форма.РегистрирующийОрганПрежнийИнформация);
	Элементы.АдресИРеквизитыВашейИнспекцииУведомление.Видимость = Не ОпределенПрежнийРегистрирующийОрган И Не РегистрацияЧерезМФЦ;
	Элементы.ПоказатьБлижайшийМФЦУведомление.Видимость = РегистрацияЧерезМФЦ;

	// Уплата госпошлины
	Элементы.УплатаГоспошлины.Видимость = ИзмененияВносятсяВУчредительныеДокументы;
	НомерЭтапаУплатыГоспошлины = НомерЭтапаУплатыГоспошлины(ИзмененияТребуютУведомления);
	Элементы.УплатаГоспошлиныЗаголовокКартинка2.Видимость = (НомерЭтапаУплатыГоспошлины = 2);
	Элементы.УплатаГоспошлиныЗаголовокКартинка3.Видимость = (НомерЭтапаУплатыГоспошлины = 3);
	Элементы.ГруппаИнструкцииПоОплатеГоспошлиныБезКвитанции.Видимость = ПустаяСтрока(Форма.ПлатежныеРеквизитыНаименованиеПолучателя);
	Элементы.ГруппаИнструкцииПоОплатеГоспошлиныСКвитанцией.Видимость = Не ПустаяСтрока(Форма.ПлатежныеРеквизитыНаименованиеПолучателя);
	Элементы.РеквизитыУплатыГоспошлины.Видимость = Не ПустаяСтрока(Форма.ПлатежныеРеквизитыНаименованиеПолучателя);
	
	Элементы.ИнструкцияУплатаГоспошлиныИФНС.Видимость = Не РегистрацияЧерезМФЦ;
	Элементы.ИнструкцияУплатаГоспошлиныМФЦ.Видимость = РегистрацияЧерезМФЦ;
	
	Элементы.ИнструкцияУплатаГоспошлиныСКвитанциейИФНС.Видимость = Не РегистрацияЧерезМФЦ;
	Элементы.ИнструкцияУплатаГоспошлиныСКвитанциейМФЦ.Видимость = РегистрацияЧерезМФЦ;
	
	// Регистрация изменений
	НомерЭтапаРегистрацииИзменений = НомерЭтапаРегистрацииИзменений(ИзмененияТребуютУведомления, ИзмененияВносятсяВУчредительныеДокументы);
	Элементы.РегистрацияИзмененийЗаголовокКартинка2.Видимость = (НомерЭтапаРегистрацииИзменений = 2);
	Элементы.РегистрацияИзмененийЗаголовокКартинка3.Видимость = (НомерЭтапаРегистрацииИзменений = 3);
	Элементы.РегистрацияИзмененийЗаголовокКартинка4.Видимость = (НомерЭтапаРегистрацииИзменений = 4);
	
	Если ИзмененияТребуютУведомления Тогда
		Элементы.Переместить(Элементы.Инструкция, Элементы.СписокДокументов, Элементы.УслугаКонсультации);
	Иначе
		Элементы.Переместить(Элементы.Инструкция, Элементы.ПодачаДокументов, Элементы.РегистрирующаяНалоговая);
	КонецЕсли;
	
	Элементы.ПредупреждениеПриРегистрацииИзмененийМестаНахождения.Видимость = Изменено.Местоположение И ИзмененияТребуютУведомления;
	
	ОпределенРегистрирующийОрган = Не ПустаяСтрока(Форма.РегистрирующийОрганНаименование);
	Элементы.РегистрирующаяНалоговая.Видимость = ОпределенРегистрирующийОрган И Не РегистрацияЧерезМФЦ;
	Элементы.РегистрирующийОрганИнформация.Видимость = Не ПустаяСтрока(Форма.РегистрирующийОрганИнформация) И Не РегистрацияЧерезМФЦ;
	Элементы.АдресИРеквизитыВашейИнспекции.Видимость = Не ОпределенРегистрирующийОрган И Не РегистрацияЧерезМФЦ;
	
	Элементы.ПоказатьБлижайшийМФЦ.Видимость = РегистрацияЧерезМФЦ;
	
	Элементы.РегистрацияИзмененийЗаголовокДекорацияИФНС.Видимость = Не РегистрацияЧерезМФЦ;
	Элементы.РегистрацияИзмененийЗаголовокДекорацияМФЦ.Видимость = РегистрацияЧерезМФЦ;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОказываютсяУслугиКонсультации()
	
	Возврат Обработки.РегистрацияОрганизации.ОказываютсяУслугиКонсультации();
	
КонецФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Адрес по прописке
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗаявительАдресПропискиПредставление");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ЗаявительАдресПропискиПредставление",
		ВидСравненияКомпоновкиДанных.Равно,
		УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки());
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);
	
	// Представитель учредителя - юридического лица, должность и основание полномочий.
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УчредителиПредставительУчредителя");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УчредителиНадписьПредставитель");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УчредителиНадписьДолжность");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УчредителиДолжностьПредставителя");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УчредителиНадписьНаОсновании");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УчредителиПредставительНаОсновании");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Учредители.ТипУчредителя",
		ВидСравненияКомпоновкиДанных.НеРавно,
		ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// Заполненность учредителя
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "УчредителиНаименование");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Учредители.ОтметкаНезаполненного",
		ВидСравненияКомпоновкиДанных.Равно,
		Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблицыУчредители()
	
	Для Каждого Учредитель Из Учредители Цикл
		ЗаполнитьДобавленныеКолонкиВСтрокеТаблицыУчредители(Учредитель, Заявитель.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДобавленныеКолонкиВСтрокеТаблицыУчредители(СтрокаТаблицы, Знач Заявитель)
	
	СтрокаТаблицы.НадписьПредставитель = НСтр("ru = 'Представитель:'");
	СтрокаТаблицы.НадписьДолжность     = НСтр("ru = 'Должность:'");
	СтрокаТаблицы.НадписьНаОсновании   = НСтр("ru = 'На основании:'");
	
	Если СтрокаТаблицы.Ссылка = Заявитель Тогда
		СтрокаТаблицы.ОтметкаНезаполненного = Ложь;
	Иначе
		СтрокаТаблицы.ОтметкаНезаполненного = Не РеквизитыУчредителяЗаполнены(СтрокаТаблицы.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РеквизитыУчредителяЗаполнены(Знач Учредитель)
	Возврат Обработки.РегистрацияОрганизации.РеквизитыУчредителяЗаполнены(Учредитель)
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НомерЭтапаРегистрацииИзменений(ИзмененияТребуютУведомления, ИзмененияВносятсяВУчредительныеДокументы)
	
	Если ИзмененияТребуютУведомления И ИзмененияВносятсяВУчредительныеДокументы Тогда
		Возврат 4;
	ИначеЕсли ИзмененияТребуютУведомления Или ИзмененияВносятсяВУчредительныеДокументы Тогда
		Возврат 3;
	Иначе
		Возврат 2;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НомерЭтапаУплатыГоспошлины(ИзмененияТребуютУведомления)
	
	Если ИзмененияТребуютУведомления Тогда
		Возврат 3;
	Иначе
		Возврат 2;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстГиперссылкиИзменитьНаименование(Форма)
	
	ИзмененоСокращенноеНаименование = ИзмененоСокращенноеНаименование(Форма);
	ИзмененоПолноеНаименование      = ИзмененоПолноеНаименование(Форма);
	
	Если ИзмененоПолноеНаименование И Не ИзмененоСокращенноеНаименование Тогда
		Возврат Форма.НаименованиеПолноеНовое;
	ИначеЕсли ИзмененоСокращенноеНаименование Тогда
		Возврат Форма.НаименованиеСокращенноеНовое;
	Иначе
		Возврат НСтр("ru = 'Изменить'");
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстГиперссылкиИзменитьРуководителя(Форма)
	
	Если ИзмененРуководитель(Форма) Тогда
		Возврат Строка(Форма.ОтветственныеЛицаНовые.ФизическоеЛицо);
	Иначе
		Возврат НСтр("ru = 'Изменить'");
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстГиперссылкиИзменитьЮридическийАдрес(Форма)
	
	Если ИзмененЮридическийАдрес(Форма) Тогда
		Возврат Строка(Форма.ЮридическийАдресНовый);
	Иначе
		Возврат НСтр("ru = 'Изменить'");
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ОтобразитьУчредителей()
	
	// Признаки изменений
	ВыходУчастника      = 1;
	СтараяДоляУчастия   = 2;
	НоваяДоляУчастия    = 3;
	ВходНовогоУчастника = 4;
	
	ТаблицаУчредителей = Учредители.Выгрузить();
	ТаблицаУчредителей.Колонки.Добавить("Изменение", ОбщегоНазначения.ОписаниеТипаЧисло(1, 0));
	
	НовыхУчастников = 0;
	ВышлоУчастников = 0;
	Если УчредителиНовые.Количество() > 0 Тогда
		
		ТаблицаУчредителей.Колонки.Добавить("ПорядокВРеестре", ОбщегоНазначения.ОписаниеТипаЧисло(1, 0));
		ТаблицаУчредителей.Индексы.Добавить("ИНН");
		
		ТаблицаНовыхУчредителей = УчредителиНовые.Выгрузить();
		ТаблицаНовыхУчредителей.Индексы.Добавить("ИНН");
		
		ПорядокВРеестре = 0;
		
		// Определяем вид изменения для существующих участников общества
		
		Для Каждого Учредитель Из ТаблицаУчредителей Цикл
			
			НайденаяСтрока = ТаблицаНовыхУчредителей.Найти(Учредитель.ИНН, "ИНН");
			Если НайденаяСтрока = Неопределено Тогда
				Учредитель.Изменение = ВыходУчастника;
				ВышлоУчастников = ВышлоУчастников + 1;
			ИначеЕсли НайденаяСтрока.СуммаВзноса <> Учредитель.СуммаВзноса Или НайденаяСтрока.ДоляУчастия <> Учредитель.ДоляУчастия Тогда
				Учредитель.Изменение = СтараяДоляУчастия;
			КонецЕсли;
			
			Учредитель.ПорядокВРеестре = ПорядокВРеестре;
			ПорядокВРеестре = ПорядокВРеестре + 1;
			
		КонецЦикла;
		
		// Добавляем в таблицу новых участников общества
		
		Для Каждого НовыйУчредитель Из ТаблицаНовыхУчредителей Цикл
			
			НайденаяСтрока = ТаблицаУчредителей.Найти(НовыйУчредитель.ИНН, "ИНН");
			
			Если НайденаяСтрока = Неопределено Тогда
				
				Учредитель = ТаблицаУчредителей.Добавить();
				ЗаполнитьЗначенияСвойств(Учредитель, НовыйУчредитель);
				Учредитель.Изменение = ВходНовогоУчастника;
				НовыхУчастников = НовыхУчастников + 1;
				
				Учредитель.ПорядокВРеестре = ПорядокВРеестре;
				ПорядокВРеестре = ПорядокВРеестре + 1;
				
			ИначеЕсли НайденаяСтрока.СуммаВзноса <> НовыйУчредитель.СуммаВзноса Или НайденаяСтрока.ДоляУчастия <> НовыйУчредитель.ДоляУчастия Тогда
				
				Учредитель = ТаблицаУчредителей.Добавить();
				ЗаполнитьЗначенияСвойств(Учредитель, НовыйУчредитель);
				Учредитель.Изменение = НоваяДоляУчастия;
				
				Учредитель.ПорядокВРеестре = ПорядокВРеестре;
				ПорядокВРеестре = ПорядокВРеестре + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаУчредителей.Сортировать("Изменение, ПорядокВРеестре");
		ТаблицаУчредителей.Колонки.Удалить("ПорядокВРеестре");
		
	КонецЕсли;
	
	ЕстьСведенияОбУчредителях = (ТаблицаУчредителей.Количество() > 0);
	Если Не ЕстьСведенияОбУчредителях Тогда
		Учредитель = ТаблицаУчредителей.Добавить();
		Учредитель.Наименование = НСтр("ru = 'В реестре отсутствуют данные об учредителях'");
	КонецЕсли;
	
	// Выводим сформированную таблицу на форму
	
	ШрифтПоУмолчанию = Новый Шрифт;
	
	КоличествоПредопределенных = КоличествоПредопределенныхЭлементов("Учредитель");
	КоличествоУчредителей = ТаблицаУчредителей.Количество();
	
	// Добавляем недостающие элементы формы
	Для Индекс = КоличествоПредопределенных По КоличествоУчредителей - 1 Цикл
		ДобавитьПредставлениеУчредителя(Индекс);
	КонецЦикла;
	
	Для Индекс = 0 По КоличествоУчредителей - 1 Цикл
		
		Учредитель = ТаблицаУчредителей[Индекс];
		
		ЭлементФормы = Элементы[ИмяЭлементаПоИндексу(Индекс, "Учредитель")];
		ЭлементФормы.Видимость = Истина;
		ЭлементФормы.Доступность = ЕстьСведенияОбУчредителях;
		
		Шрифт = ?(Учредитель.Изменение = ВыходУчастника Или Учредитель.Изменение = СтараяДоляУчастия, ШрифтИзмененныхРеквизитов, ШрифтПоУмолчанию);
		
		ЭлементФормы = Элементы[ИмяЭлементаПоИндексу(Индекс, "НаименованиеУчредителя")];
		ЭлементФормы.Заголовок = Учредитель.Наименование;
		ЭлементФормы.Шрифт = Шрифт;
		
		ЭлементФормы = Элементы[ИмяЭлементаПоИндексу(Индекс, "ДоляУчастияУчредителя")];
		ЭлементФормы.Заголовок = ?(Учредитель.ДоляУчастия <> 0, Формат(Учредитель.ДоляУчастия, "ЧН=") + "%", "");
		ЭлементФормы.Шрифт = Шрифт;
		
		ЭлементФормы = Элементы[ИмяЭлементаПоИндексу(Индекс, "СуммаВзносаУчредителя")];
		ЭлементФормы.Заголовок = ?(Учредитель.СуммаВзноса <> 0, СтрШаблон(НСтр("ru = '%1 руб.'"), Учредитель.СуммаВзноса), "");
		ЭлементФормы.Шрифт = Шрифт;
		
	КонецЦикла;
	
	Для Индекс = КоличествоУчредителей По КоличествоПредопределенных - 1 Цикл
		ЭлементФормы = Элементы[ИмяЭлементаПоИндексу(Индекс, "Учредитель")];
		ЭлементФормы.Видимость = Ложь;
	КонецЦикла;
	
	ИзменитьУчредителей = ТекстГиперссылкиИзменитьУчредителей(НовыхУчастников, ВышлоУчастников);
	
	Элементы.ИзменитьУчредителей.Видимость = ЕстьСведенияОбУчредителях;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПредставлениеУчредителя(Индекс)
	
	ГруппаУчредитель = Элементы.Добавить(
		ИмяЭлементаПоИндексу(Индекс, "Учредитель"),
		Тип("ГруппаФормы"),
		Элементы.УчредителиПредставление);
	ГруппаУчредитель.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаУчредитель.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаУчредитель.Заголовок = СтрШаблон("Учредитель[%1]", Индекс);
	ГруппаУчредитель.ОтображатьЗаголовок = Ложь;
	ГруппаУчредитель.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	ГруппаУчредитель.Объединенная = Ложь;
	
	ЗаголовокУчредителя = Элементы.Добавить(
		ИмяЭлементаПоИндексу(Индекс, "ЗаголовокУчредителя"),
		Тип("ДекорацияФормы"),
		ГруппаУчредитель);
	ЗаголовокУчредителя.Заголовок = НСтр("ru = 'Учредители'");
	ЗаголовокУчредителя.Ширина = Элементы[ИмяЭлементаПоИндексу(0, "ЗаголовокУчредителя")].Ширина;
	ЗаголовокУчредителя.РастягиватьПоГоризонтали = Ложь;
	ЗаголовокУчредителя.ЦветТекста = ЦветаСтиля.ЦветФонаФормы;
	
	Элементы.Добавить(
		ИмяЭлементаПоИндексу(Индекс, "НаименованиеУчредителя"),
		Тип("ДекорацияФормы"),
		ГруппаУчредитель);
	
	ДоляУчастияУчредителя = Элементы.Добавить(
		ИмяЭлементаПоИндексу(Индекс, "ДоляУчастияУчредителя"),
		Тип("ДекорацияФормы"),
		ГруппаУчредитель);
	ДоляУчастияУчредителя.ГоризонтальноеПоложение = Элементы[ИмяЭлементаПоИндексу(0, "ДоляУчастияУчредителя")].ГоризонтальноеПоложение;
	
	СуммаВзносаУчредителя = Элементы.Добавить(
		ИмяЭлементаПоИндексу(Индекс, "СуммаВзносаУчредителя"),
		Тип("ДекорацияФормы"),
		ГруппаУчредитель);
	СуммаВзносаУчредителя.ГоризонтальноеПоложение = Элементы[ИмяЭлементаПоИндексу(0, "СуммаВзносаУчредителя")].ГоризонтальноеПоложение;
	
КонецПроцедуры

&НаСервере
Функция ТекстГиперссылкиИзменитьУчредителей(НовыхУчастников, ВышлоУчастников)
	
	МассивИзменений = Новый Массив;
	
	Если НовыхУчастников = 0 И ВышлоУчастников = 0 Тогда
		Если ИзмененУставныйКапитал(ЭтотОбъект) Тогда
			МассивИзменений.Добавить(НСтр("ru = 'Изменен размер уставного капитала общества'"));
		КонецЕсли;
	ИначеЕсли НовыхУчастников = 1 И ВышлоУчастников = 1 И Не ИзмененУставныйКапитал(ЭтотОбъект) Тогда
		МассивИзменений.Добавить(НСтр("ru = 'Отражена продажа доли участника общества'"));
	ИначеЕсли НовыхУчастников = ВышлоУчастников И Не ИзмененУставныйКапитал(ЭтотОбъект) Тогда
		МассивИзменений.Добавить(НСтр("ru = 'Отражена продажа долей участников общества'"));
	Иначе
		Если НовыхУчастников <> 0 Тогда
			НовыхУчастниковЦифрамиИПрописью = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
				НСтр("ru = ';%1 новый участник общества;;%1 новых участника общества;%1 новых участников общества;'"),
				НовыхУчастников,
				,
				"ЧДЦ=0");
			МассивИзменений.Добавить(НовыхУчастниковЦифрамиИПрописью);
		КонецЕсли;
		Если ВышлоУчастников <> 0 Тогда
			ВышлоУчастниковЦифрамиИПрописью = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
				НСтр("ru = ';%1 участник вышел из общества;;%1 участника вышло из общества;%1 участников вышло из общества;'"),
				ВышлоУчастников,
				,
				"ЧДЦ=0");
			МассивИзменений.Добавить(ВышлоУчастниковЦифрамиИПрописью);
		КонецЕсли;
	КонецЕсли;
	
	Если МассивИзменений.Количество() > 0 Тогда
		ТекстГиперссылки = СтрСоединить(МассивИзменений, ", ");
	Иначе
		ТекстГиперссылки = НСтр("ru = 'Изменить'");
	КонецЕсли;
	
	Возврат ТекстГиперссылки;
	
КонецФункции

&НаСервере
Процедура ОтобразитьВидыДеятельности()
	
	// Признаки изменений
	ИсключениеКода = 1;
	ДобавлениеКода = 2;
	
	ТаблицаВидовДеятельности = ВидыДеятельности.Выгрузить();
	ТаблицаВидовДеятельности.Колонки.Добавить("Изменение", ОбщегоНазначения.ОписаниеТипаЧисло(1, 0));
	ТаблицаВидовДеятельности.Колонки.Добавить("ПорядокВРеестре", ОбщегоНазначения.ОписаниеТипаЧисло(10, 0));
	
	НовыхКодов   = 0;
	УдаленоКодов = 0;
	
	Если ИзмененыВидыДеятельности(ЭтотОбъект) Тогда
		
		ТаблицаВидовДеятельности.Индексы.Добавить("Код");
		
		ТаблицаНовыхВидовДеятельности = ВидыДеятельностиНовые.Выгрузить();
		ТаблицаНовыхВидовДеятельности.Индексы.Добавить("Код");
		
		ПорядокВРеестре = 0;
		
		// Определяем вид изменения
		
		Для Каждого ВидДеятельности Из ТаблицаВидовДеятельности Цикл
			
			ВидДеятельностиУдален = (ТаблицаНовыхВидовДеятельности.Найти(ВидДеятельности.Код, "Код") = Неопределено);
			Если ВидДеятельностиУдален Тогда
				ВидДеятельности.Изменение = ИсключениеКода;
				УдаленоКодов = УдаленоКодов + 1;
			КонецЕсли;
			
			ВидДеятельности.ПорядокВРеестре = ПорядокВРеестре;
			ПорядокВРеестре = ПорядокВРеестре + 1;
			
		КонецЦикла;
		
		Для Каждого НовыйВидДеятельности Из ТаблицаНовыхВидовДеятельности Цикл
			
			ВидДеятельностиДобавлен = (ТаблицаВидовДеятельности.Найти(НовыйВидДеятельности.Код, "Код") = Неопределено);
			Если ВидДеятельностиДобавлен Тогда
				
				ВидДеятельности = ТаблицаВидовДеятельности.Добавить();
				ЗаполнитьЗначенияСвойств(ВидДеятельности, НовыйВидДеятельности);
				ВидДеятельности.Изменение = ДобавлениеКода;
				НовыхКодов = НовыхКодов + 1;
				
				ВидДеятельности.ПорядокВРеестре = ПорядокВРеестре;
				ПорядокВРеестре = ПорядокВРеестре + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НовыхКодов = 0 И УдаленоКодов = 0 Тогда
		ВидыДеятельностиНовые.Очистить();
	Иначе
		ТаблицаВидовДеятельности.Сортировать("Изменение, ПорядокВРеестре");
		ТаблицаВидовДеятельности.Колонки.Удалить("ПорядокВРеестре");
	КонецЕсли;
	
	// Основной код ОКВЭД
	ЗначениеОсновногоКода = ?(ИзмененОсновнойВидДеятельности(ЭтотОбъект), КодОКВЭД2Новый, КодОКВЭД2);
	НайденаяСтрока = ТаблицаВидовДеятельности.Найти(ЗначениеОсновногоКода, "Код");
	Если НайденаяСтрока <> Неопределено Тогда
		ТаблицаВидовДеятельности.Удалить(НайденаяСтрока);
	КонецЕсли;
	
	ЕстьОсновнойКодОКВЭД = Не ПустаяСтрока(ЗначениеОсновногоКода);
	ЕстьПрочиеКодыОКВЭД = (ТаблицаВидовДеятельности.Количество() > 0);
	
	Если ЕстьОсновнойКодОКВЭД Тогда
		ПредставлениеКодаОКВЭД2 = СтрШаблон(НСтр("ru = '%1 (основной)'"), ЗначениеОсновногоКода);
		СообщениеОбОшибке = "";
		Если ОрганизацииФормыКлиентСервер.ОКВЭДСоответствуетТребованиям(СообщениеОбОшибке, КодОКВЭД2) Тогда
			ОсновнойКодОКВЭД = Новый ФорматированнаяСтрока(ПредставлениеКодаОКВЭД2);
		Иначе
			ОсновнойКодОКВЭД = Новый ФорматированнаяСтрока(
				ПредставлениеКодаОКВЭД2,
				" ",
				Новый ФорматированнаяСтрока(СообщениеОбОшибке, , ЦветаСтиля.ЦветТекстаНекорректногоКонтрагента));
		КонецЕсли;
	ИначеЕсли ЕстьПрочиеКодыОКВЭД Тогда
		СообщениеОбОшибке = НСтр("ru = 'В реестре не указан основной код ОКВЭД'");
		ОсновнойКодОКВЭД = Новый ФорматированнаяСтрока(СообщениеОбОшибке, , ЦветаСтиля.ЦветТекстаНекорректногоКонтрагента);
	Иначе
		СообщениеОбОшибке = НСтр("ru = 'В реестре не указаны коды ОКВЭД'");
		ОсновнойКодОКВЭД = Новый ФорматированнаяСтрока(СообщениеОбОшибке);
	КонецЕсли;
	
	Элементы.ОсновнойКодОКВЭД.Доступность = ЕстьОсновнойКодОКВЭД Или ЕстьПрочиеКодыОКВЭД;
	
	// Выводим сформированную таблицу на форму
	
	КоличествоПредопределенныхСтрок = КоличествоПредопределенныхЭлементов("ВидДеятельности");
	
	ЭлементыСтрокиКодовОКВЭД = Новый Массив;
	МаксКоличествоКодовОКВЭДвСтроке = МаксКоличествоКодовОКВЭДвСтроке(ТаблицаВидовДеятельности.Количество());
	
	Если ТаблицаВидовДеятельности.Количество() > 0 Тогда
		ИзменениеТекущйСтроки = ТаблицаВидовДеятельности[0].Изменение;
		// Спецкостыль для выравнивания декораций
		ЭлементФормы = Элементы[ИмяЭлементаПоИндексу(0, "ЗаголовокВидаДеятельности")];
		ЭлементФормы.Заголовок = ?(ЭтоЮрЛицо(ЭтотОбъект), НСтр("ru = 'Юридический адрес'"), НСтр("ru = 'Коды ОКВЭД'"));
	КонецЕсли;
	
	ИндексСтроки = 0;
	Для Каждого ВидДеятельности Из ТаблицаВидовДеятельности Цикл
		
		Если ЭлементыСтрокиКодовОКВЭД.Количество() = МаксКоличествоКодовОКВЭДвСтроке
			Или ВидДеятельности.Изменение <> ИзменениеТекущйСтроки Тогда
			
			Если ИндексСтроки = КоличествоПредопределенныхСтрок Тогда
				ДобавитьПредставлениеВидаДеятельности(ИндексСтроки);
				КоличествоПредопределенныхСтрок = КоличествоПредопределенныхСтрок + 1;
			КонецЕсли;
			
			ОтобразитьСтрокуКодовОКВЭД(ИндексСтроки, ЭлементыСтрокиКодовОКВЭД, ИзменениеТекущйСтроки);
			ЭлементыСтрокиКодовОКВЭД.Очистить();
			
			ИндексСтроки = ИндексСтроки + 1;
			
		КонецЕсли;
		
		ЭлементыСтрокиКодовОКВЭД.Добавить(ВидДеятельности.Код);
		
		ИзменениеТекущйСтроки = ВидДеятельности.Изменение;
		
	КонецЦикла;
	
	Если ЭлементыСтрокиКодовОКВЭД.Количество() > 0 Тогда
		
		Если ИндексСтроки = КоличествоПредопределенныхСтрок Тогда
			ДобавитьПредставлениеВидаДеятельности(ИндексСтроки);
			КоличествоПредопределенныхСтрок = КоличествоПредопределенныхСтрок + 1;
		КонецЕсли;
			
		ОтобразитьСтрокуКодовОКВЭД(ИндексСтроки, ЭлементыСтрокиКодовОКВЭД, ИзменениеТекущйСтроки);
		ЭлементыСтрокиКодовОКВЭД.Очистить();
		
		ИндексСтроки = ИндексСтроки + 1;
		
	КонецЕсли;
	
	КоличествоСтрокВидовДеятельности = ИндексСтроки;
	
	Для Индекс = КоличествоСтрокВидовДеятельности По КоличествоПредопределенныхСтрок - 1 Цикл
		ЭлементФормы = Элементы[ИмяЭлементаПоИндексу(Индекс, "ВидДеятельности")];
		ЭлементФормы.Видимость = Ложь;
	КонецЦикла;
	
	ИзменитьВидыДеятельности = ТекстГиперссылкиВидыДеятельности(НовыхКодов, УдаленоКодов);
	
	Элементы.ИзменитьВидыДеятельности.Видимость = ЕстьОсновнойКодОКВЭД Или ЕстьПрочиеКодыОКВЭД;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьСтрокуКодовОКВЭД(Индекс, ЭлементыСтрокиКодовОКВЭД, Изменение)
	
	ЭлементФормы = Элементы[ИмяЭлементаПоИндексу(Индекс, "ВидДеятельности")];
	ЭлементФормы.Видимость = Истина;
	
	Шрифт = ?(Изменение = 1, ШрифтИзмененныхРеквизитов, Новый Шрифт);
	
	ЭлементФормы = Элементы[ИмяЭлементаПоИндексу(Индекс, "СтрокаКодовОКВЭД")];
	ЭлементФормы.Заголовок = СтрСоединить(ЭлементыСтрокиКодовОКВЭД, "; ");
	ЭлементФормы.Шрифт = Шрифт;
	
КонецПроцедуры

// Добавляет новую строку кодов ОКВЭД на форму
//
&НаСервере
Процедура ДобавитьПредставлениеВидаДеятельности(Индекс)
	
	ГруппаВидДеятельности = Элементы.Добавить(
		ИмяЭлементаПоИндексу(Индекс, "ВидДеятельности"),
		Тип("ГруппаФормы"),
		Элементы.ВидыДеятельности);
	ГруппаВидДеятельности.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаВидДеятельности.Отображение = ОтображениеОбычнойГруппы.Нет;
	ГруппаВидДеятельности.Заголовок = СтрШаблон("ВидДеятельности[%1]", Индекс);
	ГруппаВидДеятельности.ОтображатьЗаголовок = Ложь;
	ГруппаВидДеятельности.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	ГруппаВидДеятельности.Объединенная = Ложь;
	
	ЗаголовокВидаДеятельности = Элементы.Добавить(
		ИмяЭлементаПоИндексу(Индекс, "ЗаголовокВидаДеятельности"),
		Тип("ДекорацияФормы"),
		ГруппаВидДеятельности);
	ЗаголовокВидаДеятельности.Заголовок = НСтр("ru = 'КодыОКВЭД'");
	ЗаголовокВидаДеятельности.Ширина = Элементы[ИмяЭлементаПоИндексу(0, "ЗаголовокВидаДеятельности")].Ширина;
	ЗаголовокВидаДеятельности.РастягиватьПоГоризонтали = Ложь;
	ЗаголовокВидаДеятельности.ЦветТекста = ЦветаСтиля.ЦветФонаФормы;
	
	СтрокаКодовОКВЭД = Элементы.Добавить(
		ИмяЭлементаПоИндексу(Индекс, "СтрокаКодовОКВЭД"),
		Тип("ДекорацияФормы"),
		ГруппаВидДеятельности);
	СтрокаКодовОКВЭД.АвтоМаксимальнаяШирина = Ложь;
	
КонецПроцедуры

// Возвращает число кодов ОКВЭД в строке формы
//
&НаСервереБезКонтекста
Функция МаксКоличествоКодовОКВЭДвСтроке(КоличествоВидовДеятельности)
	
	ПредопределенноеЗначение = 10;
	Если КоличествоВидовДеятельности < ПредопределенноеЗначение Тогда
		Возврат ПредопределенноеЗначение; // Не имеет значения
	КонецЕсли;
	
	КоличествоВПоследнейСтроке = КоличествоВидовДеятельности
		- (ПредопределенноеЗначение * Цел(КоличествоВидовДеятельности / ПредопределенноеЗначение));
	Если КоличествоВПоследнейСтроке = 1 Тогда
		Возврат ПредопределенноеЗначение + 1; // Избегаем переноса ради одного кода
	Иначе
		Возврат ПредопределенноеЗначение;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ТекстГиперссылкиВидыДеятельности(НовыхКодов, УдаленоКодов)
	
	МассивИзменений = Новый Массив;
	
	Если ИзмененОсновнойВидДеятельности(ЭтотОбъект) Тогда
		МассивИзменений.Добавить(НСтр("ru = 'Основной код изменен'"));
	КонецЕсли;
	
	Если УдаленоКодов <> 0 Тогда
		УдаленоЦифрамиИПрописью = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru = ';%1 код удален;;%1 кода удалено;%1 кодов удалено;'"),
			УдаленоКодов,
			,
			"ЧДЦ=0");
		МассивИзменений.Добавить(УдаленоЦифрамиИПрописью);
	КонецЕсли;
	
	Если НовыхКодов <> 0 Тогда
		ДобавленоЦифрамиИПрописью = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru = ';%1 код добавлен;;%1 кода добавлено;%1 кодов добавлено;'"),
			НовыхКодов,
			,
			"ЧДЦ=0");
		МассивИзменений.Добавить(ДобавленоЦифрамиИПрописью);
	КонецЕсли;
	
	Если МассивИзменений.Количество() > 0 Тогда
		ТекстГиперссылки = СтрСоединить(МассивИзменений, ", ");
	Иначе
		ТекстГиперссылки = НСтр("ru = 'Изменить'");
	КонецЕсли;
	
	Возврат ТекстГиперссылки;
	
КонецФункции

// Возвращает число элементов на форме с именем ПрефиксИмени1, ПрефиксИмени2 и т.д.
//
&НаСервере
Функция КоличествоПредопределенныхЭлементов(ПрефиксИмени)
	
	Перем Количество;
	
	Количество = 0;
	Пока Истина Цикл
		Если Элементы.Найти(ИмяЭлементаПоИндексу(Количество, ПрефиксИмени)) <> Неопределено Тогда
			Количество = Количество + 1;
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Количество;
	
КонецФункции

// Возвращает имя элемента формы
//
&НаСервереБезКонтекста
Функция ИмяЭлементаПоИндексу(Индекс, ПрефиксИмени)
	
	Возврат СтрШаблон(ПрефиксИмени + "%1", Индекс);
	
КонецФункции

#КонецОбласти

#Область Навигация

&НаСервере
Процедура ИзменитьЭтап(Идентификатор)
	
	Если Идентификатор = "ВнесениеИзмененийЕГР_СписокИзменений" Тогда
		
		Если ОбъектЗаполнен(Объект) Тогда
			Элементы.СоздатьЗаявление.КнопкаПоУмолчанию = Истина;
		ИначеЕсли ЭтоНачалоРаботы Тогда
			Элементы.ЗаполнитьРеквизитыПоДаннымЕГР.КнопкаПоУмолчанию = Истина;
		Иначе
			Элементы.ЗаполнитьРеквизитыВыбраннойОрганизации.КнопкаПоУмолчанию = Истина;
		КонецЕсли;
		
		УстановитьВидимостьСтраницы(ЭтотОбъект, "СписокИзменений");
		
	ИначеЕсли Идентификатор = "ВнесениеИзмененийЕГР_Заявление" Тогда
		
		Если ЭтоЮрЛицо(ЭтотОбъект) И Не ЗначениеЗаполнено(ДатаРешения) Тогда
			ДатаРешения = ТекущаяДатаСеанса();
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СпособПодачиДокументов) Тогда
			СпособПодачиДокументов = РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов().ИФНСлично;
		КонецЕсли;
		
		ПрочитатьОтветственныеЛица();
		ПрочитатьЗаявителя();
		ЗаполнитьОтветственныеЛица();
		
		ЗаполнитьДобавленныеКолонкиТаблицыУчредители();
		
		Элементы.ЗаполнитьЗаявление.КнопкаПоУмолчанию = Истина;
		
		УстановитьВидимостьСтраницы(ЭтотОбъект, "Заявление");
		
	ИначеЕсли Идентификатор = "ВнесениеИзмененийЕГР_Документы" Тогда
		
		Если ИзмененоМестоположение(ЭтотОбъект) Тогда
			Элементы.АдресИРеквизитыВашейИнспекции.Заголовок = НСтр("ru = 'Адрес и реквизиты инспекции по новому адресу'");
		Иначе
			Элементы.АдресИРеквизитыВашейИнспекции.Заголовок = НСтр("ru = 'Адрес и реквизиты вашей инспекции'");
		КонецЕсли;
		
		УстановитьВидимостьБаннераНачалоРаботы();
		
		УстановитьВидимостьСтраницы(ЭтотОбъект, "Документы");
		
	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	ТекущийЭтап = Идентификатор;
	
	НавигацияПомощников.РазместитьНавигацию(
		ЭтотОбъект,
		СтруктураНавигации(),
		Новый Структура("НавигацияПараметрФормы", Идентификатор));
	
	Если Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Организация) Тогда
		ЮридическоеФизическоеЛицо = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ЮридическоеФизическоеЛицо");
	Иначе
		ЮридическоеФизическоеЛицо = Объект.ЮридическоеФизическоеЛицо;
	КонецЕсли;
	
	Заголовок = ЗаголовокФормы(ЮридическоеФизическоеЛицо);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьСтраницы(Форма, ИмяСтраницы)
	
	Элементы = Форма.Элементы;
	
	Для Каждого Страница ИЗ ИменаСтраницПомощника() Цикл
		Элементы[Страница].Видимость = (Страница = ИмяСтраницы);
	КонецЦикла;
	
	Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы[ИмяСтраницы];
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИменаСтраницПомощника()
	
	ИменаСтраницПомощника = Новый Массив;
	ИменаСтраницПомощника.Добавить("СписокИзменений");
	ИменаСтраницПомощника.Добавить("Заявление");
	ИменаСтраницПомощника.Добавить("Документы");
	ИменаСтраницПомощника.Добавить("Ожидание");
	
	Возврат ИменаСтраницПомощника;
	
КонецФункции

&НаСервереБезКонтекста
Функция СтруктураНавигации()
	
	Возврат Обработки.РегистрацияОрганизации.СтруктураНавигацииПомощникаИзмененийЕГР().Структура;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИдентификаторЭтапаПоСостояниюЗаявления(Состояние)
	
	Состояние = СостояниеЗаявления(Состояние);
	
	Если Состояние.Статус = ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусВРаботеСтрокой() Тогда
		ИдентификаторЭтапа = "ВнесениеИзмененийЕГР_Заявление";
	ИначеЕсли Состояние.Статус = ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусПодготовленоСтрокой()
		Или Состояние.Статус = ИнтерфейсыВзаимодействияБРОКлиентСервер.СтатусСданоСтрокой() Тогда
		ИдентификаторЭтапа = "ВнесениеИзмененийЕГР_Документы";
	Иначе
		ИдентификаторЭтапа = "ВнесениеИзмененийЕГР_СписокИзменений";
	КонецЕсли;
	
	Возврат ИдентификаторЭтапа;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеДаннымиЕГР

&НаКлиенте
Процедура Подключаемый_ЗаполнитьРеквизитыОрганизацииПоИННПриОткрытии()
	
	Если ЭтоНачалоРаботы И Не ПустаяСтрока(ПоискИННЗапрос) Тогда
		// Если ИНН был сохранен в данных формы, заполним реквизиты из ЕГР
		ЗаполнитьРеквизитыОрганизацииПоИНН(ПоискИННЗапрос, Ложь);
	ИначеЕсли ЗначениеЗаполнено(Организация) Тогда
		// Если организация задана в параметрах формы, заполним реквизиты из ЕГР
		ЗаполнитьРеквизитыОрганизацииПоИНН(ИННОрганизации(Организация), Ложь, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРеквизитыОрганизацииПоИНН(ИННОрганизации, АктивныйДиалогСПользователем, ВосстановитьТекущийЭтап = Ложь)
	
	ПоискИННОтвет = ОрганизацииФормыДляОтчетностиВызовСервера.ЗапроситьДанныеЕГР(
		НовыйЗапросДанныхЕГР(ИННОрганизации));
	
	Если Не ПустаяСтрока(ПоискИННОтвет.Ошибка.Код) Или Не ПустаяСтрока(ПоискИННОтвет.Ошибка.Описание) Тогда
		// Вызов завершился ошибкой, описание оповещения ОписаниеОповещенияЗакончитьЗаполнениеДаннымиЕГР() вызвано не будет.
		ПослеЗаполненияДанныхЕГР();
	КонецЕсли;
	
	Если АктивныйДиалогСПользователем Тогда
		ОрганизацииФормыДляОтчетностиКлиент.ЗаполнитьРеквизитыПоПолюПоискаИНН(
			НовыйЗапросДанныхЕГР(ИННОрганизации),
			ПоискИННОтвет,
			ОписаниеОповещенияЗакончитьЗаполнениеДаннымиЕГР(),
			ТекущийЭлемент,
			ПолеИсточникИНН(ЭтоНачалоРаботы));
	Иначе
		ОрганизацииФормыДляОтчетностиКлиент.ОбработатьРезультатПоискаИННПриИзмененииПоляПоиска(
			ПоискИННОтвет,
			ОписаниеОповещенияЗакончитьЗаполнениеДаннымиЕГР(ВосстановитьТекущийЭтап), Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	СброситьИзмененияРеквизитов();
	ЗначениеВРеквизитФормы(Справочники.Организации.СоздатьЭлемент(), "Объект");
	Модифицированность = Ложь;
	
	ИзменитьЭтап("ВнесениеИзмененийЕГР_СписокИзменений");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИННОрганизации(Знач Организация)
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ИНН");
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолеИсточникИНН(ЭтоНачалоРаботы)
	
	Возврат ?(ЭтоНачалоРаботы, "ПоискИННЗапрос", "Организация");
	
КонецФункции

&НаКлиенте
Функция НовыйЗапросДанныхЕГР(ИНН)
	
	Запрос = ОрганизацииФормыДляОтчетностиКлиентСервер.НовыйЗапросДанныхЕГР();
	Запрос.ИНН = ИНН;
	Запрос.ЮридическоеФизическоеЛицо = Объект.ЮридическоеФизическоеЛицо;
	Запрос.Ссылка = Объект.Ссылка;
	Запрос.ОбъектЗаполнен = ОбъектЗаполнен(Объект);
	Запрос.ОтборОПФ = РегистрацияОрганизацииКлиентСервер.ПоддерживаемыеПравовыеФормы();
	
	Возврат Запрос;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОбработатьРезультатПоискаИНН()
	
	ОрганизацииФормыДляОтчетностиКлиент.ОбработатьРезультатПоискаИННПриИзмененииПоляПоиска(
		ПоискИННОтвет,
		ОписаниеОповещенияЗакончитьЗаполнениеДаннымиЕГР());
	
КонецПроцедуры

&НаКлиенте
Функция ОписаниеОповещенияЗакончитьЗаполнениеДаннымиЕГР(ВосстановитьТекущийЭтап = Ложь)
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("ВосстановитьТекущийЭтап", ВосстановитьТекущийЭтап);
	
	// Параметр оповещения может быть модифицирован - см. НачатьЗаполнениеДаннымиЕГР()
	Возврат Новый ОписаниеОповещения("ЗакончитьЗаполнениеДаннымиЕГР", ЭтотОбъект, ПараметрыЗаполнения);
	
КонецФункции

&НаКлиенте
Процедура ЗакончитьЗаполнениеДаннымиЕГР(Ответ, ПараметрыЗаполнения) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да И ПараметрыЗаполнения.Свойство("ПоискИННОтвет") Тогда
		ПоказатьИндикаторОжидания();
		УправлениеФормой(ЭтотОбъект);
		ЗаполнитьДаннымиЕГР(ПараметрыЗаполнения.ПоискИННОтвет, ПараметрыЗаполнения.ВосстановитьТекущийЭтап);
		НомерПопыткиПолученияИнформацииОбУчредителяхИКодахОКВЭД = 0;
		ПолучитьИнформациюОбУчредителяхИКодахОКВЭД();
	ИначеЕсли Ответ = Ложь Тогда // Отказались от подключения тестового периода 1С:Контрагент
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДаннымиЕГР(Знач ПоискИННОтвет, ВосстановитьТекущийЭтап = Ложь)
	
	СброситьИзмененияРеквизитов();
	
	Обработки.РегистрацияОрганизации.ЗаполнитьДаннымиЕГР(ПоискИННОтвет, ЭтотОбъект);
	
	Если СоздатьПриОткрытии Тогда
		// Помощник открыт командой "Создать",
		// пропускаем поиск существующих заявлений и открываем первый этап помощника.
		СоздатьПриОткрытии = Ложь;
		ВосстановитьТекущийЭтап = Ложь;
	Иначе
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, НайтиАктуальныеЗаявления(Объект.Ссылка));
		ПрочитатьЗаявление();
	КонецЕсли;
	
	Модифицированность = Ложь;
	
	Если ВосстановитьТекущийЭтап Тогда
		Если ЗначениеЗаполнено(ЗаявлениеОВнесенииИзмененийУчредительныеДокументы) Тогда
			ИдентификаторЭтапа = ИдентификаторЭтапаПоСостояниюЗаявления(ЗаявлениеОВнесенииИзмененийУчредительныеДокументыСостояниеОтправки);
		ИначеЕсли ЗначениеЗаполнено(ЗаявлениеОВнесенииИзмененийЕГР) Тогда
			ИдентификаторЭтапа = ИдентификаторЭтапаПоСостояниюЗаявления(ЗаявлениеОВнесенииИзмененийЕГРСостояниеОтправки);
		Иначе
			ИдентификаторЭтапа = "ВнесениеИзмененийЕГР_СписокИзменений";
		КонецЕсли;
		
		// Если работа помощника была закончена на втором этапе,
		// то при повторном открытии нужно установить Модифицированность для заполнения заявления.
		Если ИдентификаторЭтапа = "ВнесениеИзмененийЕГР_Заявление" Тогда
			Модифицированность = Истина;
		КонецЕсли;
		
		ТекущийЭтап = ИдентификаторЭтапа;
	Иначе
		ТекущийЭтап = "ВнесениеИзмененийЕГР_СписокИзменений"
	КонецЕсли;
	
	Заголовок = ЗаголовокФормы(Объект.ЮридическоеФизическоеЛицо);
	
	ОтобразитьУчредителей();
	ОтобразитьВидыДеятельности();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НачатьПолучениеИнформацииОбУчредителяхИКодахОКВЭД(Знач ИННЗапрос, Знач УникальныйИдентификатор)
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Получение информации о связях по данным ЕГР'");
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.РегистрацияОрганизации.ПолучитьИнформациюОбУчредителяхИКодахОКВЭДВФоне",
		ИННЗапрос,
		НастройкиЗапуска);
		
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПослеПолученияИнформацииОбУчредителяхИКодахОКВЭД(ДлительнаяОперация, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		НомерПопыткиПолученияИнформацииОбУчредителяхИКодахОКВЭД = 0;
		Возврат; // Отменено
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		ОжиданиеОтвета = Ложь;
		ОписаниеОшибки = "";
		
		ПослеПолученияИнформацииОбУчредителяхИКодахОКВЭДНаСервере(ДлительнаяОперация.АдресРезультата, ОжиданиеОтвета, ОписаниеОшибки);
		
		Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			Если ПовторятьПопыткуПолученияИнформацииОбУчредителяхИКодахОКВЭДПриОшибкеСервиса() Тогда
				ПодключитьОбработчикОжидания("ПолучитьИнформациюОбУчредителяхИКодахОКВЭД",
					ТаймаутПопытокПолученияИнформацииОбУчредителяхИКодахОКВЭД(), Истина);
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибкиПолученияИнформацииОбУчредителяхИКодахОКВЭД(ОписаниеОшибки), , ,
					ПолеИсточникИНН(ЭтоНачалоРаботы));
			КонецЕсли;
		ИначеЕсли ОжиданиеОтвета Тогда
			ПодключитьОбработчикОжидания("ПолучитьИнформациюОбУчредителяхИКодахОКВЭД",
				ТаймаутПопытокПолученияИнформацииОбУчредителяхИКодахОКВЭД(), Истина);
		КонецЕсли;
		
	Иначе
		Если ПовторятьПопыткуПолученияИнформацииОбУчредителяхИКодахОКВЭДПриОшибкеСервиса() Тогда
			ПодключитьОбработчикОжидания("ПолучитьИнформациюОбУчредителяхИКодахОКВЭД",
				ТаймаутПопытокПолученияИнформацииОбУчредителяхИКодахОКВЭД(), Истина);
		Иначе
			ВызватьИсключение ТекстОшибкиПолученияИнформацииОбУчредителяхИКодахОКВЭД(ДлительнаяОперация.КраткоеПредставлениеОшибки);
			ПослеЗаполненияДанныхЕГР();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеПолученияИнформацииОбУчредителяхИКодахОКВЭДНаСервере(АдресРезультата, ОжиданиеОтвета, ОписаниеОшибки = "")
	
	ИнформацияОСвязях = ПолучитьИзВременногоХранилища(АдресРезультата);
	ОжиданиеОтвета = ИнформацияОСвязях.ОжиданиеОтвета;
	
	Если ЗначениеЗаполнено(ИнформацияОСвязях.ОписаниеОшибки) Тогда
		ОписаниеОшибки = ИнформацияОСвязях.ОписаниеОшибки;
	КонецЕсли;
	
	Если Не ИнформацияОСвязях.ОжиданиеОтвета Тогда
		Обработки.РегистрацияОрганизации.ЗаполнитьИнформацияОСвязях(ИнформацияОСвязях, ЭтотОбъект);
		ПослеЗаполненияДанныхЕГР();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИнформациюОбУчредителяхИКодахОКВЭД()
	
	Если НомерПопыткиПолученияИнформацииОбУчредителяхИКодахОКВЭД = Неопределено Тогда
		НомерПопыткиПолученияИнформацииОбУчредителяхИКодахОКВЭД = 1;
	Иначе
		НомерПопыткиПолученияИнформацииОбУчредителяхИКодахОКВЭД = НомерПопыткиПолученияИнформацииОбУчредителяхИКодахОКВЭД + 1;
	КонецЕсли;
	
	ДлительнаяОперация = НачатьПолучениеИнформацииОбУчредителяхИКодахОКВЭД(Объект.ИНН, УникальныйИдентификатор);
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		Если ПовторятьПопыткуПолученияИнформацииОбУчредителяхИКодахОКВЭДПриОшибкеСервиса() Тогда
			ПодключитьОбработчикОжидания("ПолучитьИнформациюОбУчредителяхИКодахОКВЭД",
				ТаймаутПопытокПолученияИнформацииОбУчредителяхИКодахОКВЭД(), Истина);
		Иначе
			ВызватьИсключение ТекстОшибкиПолученияИнформацииОбУчредителяхИКодахОКВЭД(ДлительнаяОперация.КраткоеПредставлениеОшибки);
			ПослеЗаполненияДанныхЕГР();
		КонецЕсли;
	Иначе
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(
			ДлительнаяОперация,
			Новый ОписаниеОповещения("Подключаемый_ПослеПолученияИнформацииОбУчредителяхИКодахОКВЭД", ЭтотОбъект),
			НастройкиОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПовторятьПопыткуПолученияИнформацииОбУчредителяхИКодахОКВЭДПриОшибкеСервиса()
	
	Если НомерПопыткиПолученияИнформацииОбУчредителяхИКодахОКВЭД = Неопределено Тогда
		Возврат Истина;
	Иначе
		Возврат НомерПопыткиПолученияИнформацииОбУчредителяхИКодахОКВЭД <= 3;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ТаймаутПопытокПолученияИнформацииОбУчредителяхИКодахОКВЭД()
	
	Возврат 3;
	
КонецФункции

&НаКлиенте
Функция ТекстОшибкиПолученияИнформацииОбУчредителяхИКодахОКВЭД(ОписаниеОшибки)
	
	Возврат НСтр("ru = 'Ошибка при получении информации об учредителях и кодах ОКВЭД:'") + Символы.ПС + ОписаниеОшибки;
	
КонецФункции

&НаСервере
Процедура ПослеЗаполненияДанныхЕГР()
	
	Обработки.РегистрацияОрганизации.ЗаполнитьДополнительныеРеквизитыПоДаннымЕГР(ЭтотОбъект);
	
	Если ПустаяСтрока(РуководительНаименование) Тогда
		РуководительНаименование = НСтр("ru = 'В реестре не указаны данные о руководителе'");
	КонецЕсли;
	
	ОтобразитьУчредителей();
	ОтобразитьВидыДеятельности();
	
	// Этап меняем для выключения страницы "Ожидание" и управления элементами формы,
	// поэтому в параметре передаем ТекущийЭтап.
	ИзменитьЭтап(ТекущийЭтап);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыРегистрирующихОрганов(ДанныеЗаполнения)
	
	РеквизитыРегистрирующегоОргана = Неопределено;
	Если ДанныеЗаполнения.Свойство("РеквизитыРегистрирующегоОргана", РеквизитыРегистрирующегоОргана) Тогда
		РегистрирующийОрганНаименование = РеквизитыРегистрирующегоОргана.Наименование;
		РегистрирующийОрганТелефон = РеквизитыРегистрирующегоОргана.Телефон;
		РегистрирующийОрганАдрес = РеквизитыРегистрирующегоОргана.Адрес;
		РегистрирующийОрганИнформация = РеквизитыРегистрирующегоОргана.Информация;
	КонецЕсли;
	
	РеквизитыПрежнегоРегистрирующегоОргана = Неопределено;
	Если ДанныеЗаполнения.Свойство("РеквизитыПрежнегоРегистрирующегоОргана", РеквизитыПрежнегоРегистрирующегоОргана) Тогда
		РегистрирующийОрганПрежнийНаименование = РеквизитыПрежнегоРегистрирующегоОргана.Наименование;
		РегистрирующийОрганПрежнийТелефон = РеквизитыПрежнегоРегистрирующегоОргана.Телефон;
		РегистрирующийОрганПрежнийАдрес = РеквизитыПрежнегоРегистрирующегоОргана.Адрес;
		РегистрирующийОрганПрежнийИнформация = РеквизитыПрежнегоРегистрирующегоОргана.Информация;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПлатежныеРеквизитыОплатаГоспошлины(ДанныеЗаполнения)
	
	Если Не ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	ПлатежныеРеквизитыОКТМО = ДанныеЗаполнения.ОКТМО;
	ПлатежныеРеквизитыИНН = ДанныеЗаполнения.ИНН;
	ПлатежныеРеквизитыКПП = ДанныеЗаполнения.КПП;
	ПлатежныеРеквизитыНаименованиеПолучателя = ДанныеЗаполнения.НаименованиеПолучателя;
	ПлатежныеРеквизитыБИК = ДанныеЗаполнения.БИК;
	ПлатежныеРеквизитыНомерСчета = ДанныеЗаполнения.НомерСчета;
	ПлатежныеРеквизитыКоррСчет = ДанныеЗаполнения.КоррСчет;
	ПлатежныеРеквизитыНаименованиеБанка = ДанныеЗаполнения.НаименованиеБанка;
	ПлатежныеРеквизитыКБК = ДанныеЗаполнения.КБК;
	ПлатежныеРеквизитыСумма = ДанныеЗаполнения.Сумма;
	
КонецПроцедуры

#Область ФормированиеДокументовВФоне

&НаКлиенте
Процедура СоздатьЗаявлениеНаКлиенте(ЗакрытьФормуПослеВыполнения = Ложь)
	
	Если Не ЗакрытьФормуПослеВыполнения И Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		
		ДлительнаяОперация = СоздатьЗаявлениеВФоне();
		Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
			ПоказатьИндикаторОжидания();
			УправлениеФормой(ЭтотОбъект);
			
			ПараметрыОповещения = Новый Структура("ЗакрытьФормуПослеВыполнения", ЗакрытьФормуПослеВыполнения);
			ОповещениеОЗавершении = Новый ОписаниеОповещения("Подключаемый_ПослеСозданияЗаявления", ЭтотОбъект, ПараметрыОповещения);
			
			НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
			НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
			
			ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, НастройкиОжидания);
		Иначе
			ПоказатьОшибкуСозданияЗаполненияЗаявления(ДлительнаяОперация);
		КонецЕсли;
		
	Иначе
		ИзменитьЭтап("ВнесениеИзмененийЕГР_Заявление");
	КонецЕсли;
	
КонецПроцедуры

// Создает черновик заявления в фоне
// 
// Возвращаемое значение:
//  Структура - см. ДлительныеОперации.ВыполнитьВФоне()
//
&НаСервере
Функция СоздатьЗаявлениеВФоне()
	
	ИмяПроцедуры = "Обработки.РегистрацияОрганизации.СоздатьЗаявлениеОВнесенииИзмененийЕГР";
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ЗаявлениеОВнесенииИзмененийЕГР", ЗаявлениеОВнесенииИзмененийЕГР);
	ПараметрыПроцедуры.Вставить("ЗаявлениеОВнесенииИзмененийУчредительныеДокументы", ЗаявлениеОВнесенииИзмененийУчредительныеДокументы);
	ПараметрыПроцедуры.Вставить("ДанныеПомощникаЗаполнения", ДанныеПомощникаЗаполнения());
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Подготовка документов для внесения изменений в ЕГР'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПослеСозданияЗаявления(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат; // Отменено
	КонецЕсли;
	
	ЗакрытьФорму = (ДлительнаяОперация.Статус = "Выполнено") И ДополнительныеПараметры.ЗакрытьФормуПослеВыполнения;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		СсылкиНаИзмененныеОбъекты = ОбработатьРезультатСозданияЗаполненияЗаявления(ДлительнаяОперация.АдресРезультата);
		Если СсылкиНаИзмененныеОбъекты <> Неопределено Тогда
			Для Каждого ИзмененныйОбъект Из СсылкиНаИзмененныеОбъекты Цикл
				ОповеститьОбИзменении(ИзмененныйОбъект);
			КонецЦикла;
			Если Не ЗакрытьФорму Тогда
				ИзменитьЭтап("ВнесениеИзмененийЕГР_Заявление");
			КонецЕсли;
			Оповестить("ВнесениеИзмененийЕГРнеЗавершено", Объект.Ссылка);
		КонецЕсли;
	Иначе
		ПоказатьОшибкуСозданияЗаполненияЗаявления(ДлительнаяОперация);
		ИзменитьЭтап("ВнесениеИзмененийЕГР_СписокИзменений");
	КонецЕсли;
	
	Если ЗакрытьФорму Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаявлениеНаКлиенте(ЗакрытьФормуПослеВыполнения = Ложь)
	
	Если Не ЗакрытьФормуПослеВыполнения И Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	// Если форма закрывается на этапе "Заявление", то у заявления нужно установить статус "В работе".
	ЗаявлениеВРаботе = ЗакрытьФормуПослеВыполнения;
	
	ДлительнаяОперация = ЗаполнитьЗаявлениеВФоне(ЗаявлениеВРаботе);
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		ПоказатьИндикаторОжидания();
		УправлениеФормой(ЭтотОбъект);
		
		ПараметрыОповещения = Новый Структура("ЗакрытьФормуПослеВыполнения", ЗакрытьФормуПослеВыполнения);
		ОповещениеОЗавершении = Новый ОписаниеОповещения("Подключаемый_ПослеЗаполненияЗаявления", ЭтотОбъект, ПараметрыОповещения);
		
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, НастройкиОжидания);
	Иначе
		ПоказатьОшибкуСозданияЗаполненияЗаявления(ДлительнаяОперация);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет созданное ранее заявление с учетом сведений,
// указанных на закладке Заявление
// 
// Параметры:
//  ЗаявлениеВРаботе - Булево - признак того, что заполнение заявления еще не завершено
//                              и еще рано устанавливать статус на "Подготовлено".
//
// Возвращаемое значение:
//  Структура - см. ДлительныеОперации.ВыполнитьВФоне()
//
&НаСервере
Функция ЗаполнитьЗаявлениеВФоне(ЗаявлениеВРаботе)
	
	ИмяПроцедуры = "Обработки.РегистрацияОрганизации.ЗаполнитьЗаявлениеОВнесенииИзмененийЕГР";
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Модифицированность", Модифицированность);
	ПараметрыПроцедуры.Вставить("ЗаявлениеОВнесенииИзмененийЕГР", ЗаявлениеОВнесенииИзмененийЕГР);
	ПараметрыПроцедуры.Вставить("ЗаявлениеОВнесенииИзмененийУчредительныеДокументы", ЗаявлениеОВнесенииИзмененийУчредительныеДокументы);
	ПараметрыПроцедуры.Вставить("ДанныеПомощникаЗаполнения", ДанныеПомощникаЗаполнения());
	ПараметрыПроцедуры.Вставить("ЗаявлениеВРаботе", ЗаявлениеВРаботе);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Формирование документов для внесения изменений в ЕГР'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПослеЗаполненияЗаявления(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат; // Отменено
	КонецЕсли;
	
	ЗакрытьФорму = (ДлительнаяОперация.Статус = "Выполнено") И ДополнительныеПараметры.ЗакрытьФормуПослеВыполнения;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		СсылкиНаИзмененныеОбъекты = ОбработатьРезультатСозданияЗаполненияЗаявления(ДлительнаяОперация.АдресРезультата);
		Если СсылкиНаИзмененныеОбъекты <> Неопределено Тогда
			Для Каждого ИзмененныйОбъект Из СсылкиНаИзмененныеОбъекты Цикл
				ОповеститьОбИзменении(ИзмененныйОбъект);
			КонецЦикла;
			Если Не ЗакрытьФорму Тогда
				ИзменитьЭтап("ВнесениеИзмененийЕГР_Документы");
				Оповестить("ПредложитьСохранитьИзмененияЕГР", Объект.Ссылка);
			Иначе
				Оповестить("ВнесениеИзмененийЕГРнеЗавершено", Объект.Ссылка);
			КонецЕсли;
		КонецЕсли;
		Модифицированность = Ложь;
	Иначе
		ПоказатьОшибкуСозданияЗаполненияЗаявления(ДлительнаяОперация);
		ИзменитьЭтап("ВнесениеИзмененийЕГР_Заявление");
	КонецЕсли;
	
	Если ЗакрытьФорму Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОбработатьРезультатСозданияЗаполненияЗаявления(АдресРезультата)
	
	СсылкиНаИзмененныеОбъекты = Новый Массив;
	
	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресРезультата);
	Если РезультатВыполнения = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если РезультатВыполнения.Свойство("Организация") Тогда
		ОрганизацияОбъект = РезультатВыполнения.Организация.ПолучитьОбъект();
		ЗначениеВРеквизитФормы(ОрганизацияОбъект, "Объект");
		СсылкиНаИзмененныеОбъекты.Добавить(Объект.Ссылка);
	КонецЕсли;
	
	Если РезультатВыполнения.Свойство("Учредители") Тогда
		Учредители.Загрузить(РезультатВыполнения.Учредители);
		Для Каждого Учредитель Из Учредители Цикл
			СсылкиНаИзмененныеОбъекты.Добавить(Учредитель.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
	Если РезультатВыполнения.Свойство("Заявитель") Тогда
		// В результате заполнения был записан Заявитель
		ЗаявительОбъект = РезультатВыполнения.Заявитель.ПолучитьОбъект();
		ЗначениеВРеквизитФормы(ЗаявительОбъект, "Заявитель");
		СсылкиНаИзмененныеОбъекты.Добавить(ЗаявительОбъект.Ссылка);
	КонецЕсли;
	
	Если РезультатВыполнения.Свойство("ПлатежныеРеквизитыОплатаГоспошлины") Тогда
		ЗаполнитьПлатежныеРеквизитыОплатаГоспошлины(РезультатВыполнения.ПлатежныеРеквизитыОплатаГоспошлины)
	КонецЕсли;
	
	ЗаполнитьРеквизитыРегистрирующихОрганов(РезультатВыполнения);
	
	Если РезультатВыполнения.Свойство("ЗаявлениеОВнесенииИзмененийЕГР") Тогда
		ЗаявлениеОВнесенииИзмененийЕГР = РезультатВыполнения.ЗаявлениеОВнесенииИзмененийЕГР;
		ЗаявлениеОВнесенииИзмененийЕГРСостояниеОтправки = ИнтерфейсыВзаимодействияБРО.СостояниеДокумента(
			ЗаявлениеОВнесенииИзмененийЕГР);
		СсылкиНаИзмененныеОбъекты.Добавить(ЗаявлениеОВнесенииИзмененийЕГР);
	КонецЕсли;
	
	Если РезультатВыполнения.Свойство("ЗаявлениеОВнесенииИзмененийУчредительныеДокументы") Тогда
		ЗаявлениеОВнесенииИзмененийУчредительныеДокументы = РезультатВыполнения.ЗаявлениеОВнесенииИзмененийУчредительныеДокументы;
		ЗаявлениеОВнесенииИзмененийУчредительныеДокументыСостояниеОтправки = ИнтерфейсыВзаимодействияБРО.СостояниеДокумента(
			ЗаявлениеОВнесенииИзмененийУчредительныеДокументы);
		СсылкиНаИзмененныеОбъекты.Добавить(ЗаявлениеОВнесенииИзмененийУчредительныеДокументы);
	КонецЕсли;
	
	Возврат СсылкиНаИзмененныеОбъекты;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьОшибкуСозданияЗаполненияЗаявления(ДлительнаяОперация)
	
	Текст = НСтр("ru = 'Ошибка при создании пакета документов:'");
	Текст = Текст + Символы.ПС + ДлительнаяОперация.КраткоеПредставлениеОшибки;
	ВызватьИсключение Текст;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьЗаявителя()
	
	Попытка
		РезультатВыполнения = Обработки.РегистрацияОрганизации.ЗаписатьЗаявителя(ДанныеЗаявителя());
	Исключение
		ЗаписьЖурналаРегистрации(
			Обработки.РегистрацияОрганизации.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Справочники.ФизическиеЛица,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	ЗначениеВРеквизитФормы(РезультатВыполнения.Заявитель.ПолучитьОбъект(), "Заявитель");
	
КонецПроцедуры

&НаСервере
Функция ДанныеПомощникаЗаполнения()
	
	ЭтоЮрЛицо = ЭтоЮрЛицо(ЭтотОбъект);
	
	// Все реквизиты, которые выведены на форму необходимо
	// перенести в структуру для передачи в фоновое задание.
	
	Изменено = СтруктураИзменений(ЭтотОбъект);
	ЮрАдресИПропискаГлавногоСовпадают = Изменено.Местоположение
		И ЮрАдресИПропискаГлавногоСовпадают(ЗаявительАдресПропискиЗначениеJSON, ЮридическийАдресНовыйЗначениеJSON, Учредители);
	
	ДанныеПомощникаЗаполнения = Новый Структура;
	
	КолонкиТаблицыУчредители = "Ссылка, Наименование, ИНН, ДоляУчастия, СуммаВзноса, ТипУчредителя, ПредставительУчредителя, ДолжностьПредставителя, ПредставительНаОсновании";
	
	// Данные организации
	Если ЭтоЮрЛицо(ЭтотОбъект) Тогда
		ДанныеПомощникаЗаполнения.Вставить("ДанныеОрганизации", ДанныеЮридическогоЛица());
	Иначе
		ДанныеПомощникаЗаполнения.Вставить("ДанныеОрганизации", ДанныеИндивидуальногоПредпринимателя());
	КонецЕсли;
	
	// Изменения
	ДанныеПомощникаЗаполнения.Вставить("Изменено", Изменено);
	ДанныеПомощникаЗаполнения.Вставить("ИзмененияВносятсяВУчредительныеДокументы",
		ИзмененияВносятсяВУчредительныеДокументы(ЭтоЮрЛицо, Изменено, АдресВУставеПолный(АдресВУставе), КодыОКВЭДпротиворечатУставу(ВидыДеятельностиВУставе)));
	ДанныеПомощникаЗаполнения.Вставить("ИзмененияТребуютУведомления", ИзмененияТребуютУведомления(ЭтоЮрЛицо, Изменено, ЮрАдресИПропискаГлавногоСовпадают));
	
	Если Изменено.ПолноеНаименование Или Изменено.СокращенноеНаименование Тогда
		ДанныеПомощникаЗаполнения.Вставить("НаименованиеПолноеНовое",      НаименованиеПолноеНовое);
		ДанныеПомощникаЗаполнения.Вставить("НаименованиеСокращенноеНовое", НаименованиеСокращенноеНовое);
	КонецЕсли;
	
	Если Изменено.ЮридическийАдрес Или Изменено.Местоположение Тогда
		ДанныеПомощникаЗаполнения.Вставить("ЮридическийАдресНовый", ЮридическийАдресНовый);
		ДанныеПомощникаЗаполнения.Вставить("ЮридическийАдресНовыйЗначениеJSON", ЮридическийАдресНовыйЗначениеJSON);
		ДанныеПомощникаЗаполнения.Вставить("АдресВУставе", АдресВУставе);
	КонецЕсли;
	
	Если Изменено.Руководитель Тогда
		ДанныеПомощникаЗаполнения.Вставить("ДанныеНовогоРуководителя", ДанныеРуководителя(Истина));
		ДанныеПомощникаЗаполнения.Вставить("ДанныеОДолжностиНовогоРуководителя", ДанныеОДолжностиРуководителя(Истина));
	КонецЕсли;
	
	Если Изменено.Учредители Или Изменено.УставныйКапитал Тогда
		ДанныеПомощникаЗаполнения.Вставить("УчредителиНовые", УчредителиНовые.Выгрузить(, КолонкиТаблицыУчредители));
		ДанныеПомощникаЗаполнения.Вставить("УставныйКапиталНовый", УставныйКапиталНовый);
	КонецЕсли;
	
	Если Изменено.ОсновнойВидДеятельности Тогда
		ДанныеПомощникаЗаполнения.Вставить("КодОКВЭД2Новый", КодОКВЭД2Новый);
		ДанныеПомощникаЗаполнения.Вставить("НаименованиеОКВЭД2Новое", НаименованиеОКВЭД2Новое);
	КонецЕсли;
	
	Если Изменено.ВидыДеятельности Тогда
		ДанныеПомощникаЗаполнения.Вставить("ВидыДеятельностиНовые", ВидыДеятельностиНовые.Выгрузить());
		ДанныеПомощникаЗаполнения.Вставить("ВидыДеятельностиВУставе", ВидыДеятельностиВУставе);
		ДанныеПомощникаЗаполнения.Вставить("ДополнительныеКодыОКВЭД2Новые",
			ДополнительныеКодыОКВЭД2(ВидыДеятельностиНовые, ?(ИзмененОсновнойВидДеятельности(ЭтотОбъект), КодОКВЭД2Новый, КодОКВЭД2)));
	КонецЕсли;
	
	// Данные заявления
	ДанныеПомощникаЗаполнения.Вставить("ДатаРешения", ДатаРешения);
	ДанныеПомощникаЗаполнения.Вставить("ДанныеЗаявителя", ДанныеЗаявителя());
	
	ДанныеПомощникаЗаполнения.Вставить("СпособРегистрации", СпособРегистрации(СпособПодачиДокументов));
	ДанныеПомощникаЗаполнения.Вставить("СпособПодачиДокументов", СпособПодачиДокументов);
	
	Возврат ДанныеПомощникаЗаполнения;
	
КонецФункции

&НаСервере
Функция ДанныеЮридическогоЛица()
	
	ДанныеОрганизации = Обработки.РегистрацияОрганизации.НовыеДанныеЮридическогоЛица();
	ЗаполнитьЗначенияСвойств(ДанныеОрганизации, Объект);
	Если ДанныеОрганизации.Ссылка.Пустая() Тогда
		ДанныеОрганизации.Ссылка = Организация;
	КонецЕсли;
	ДанныеОрганизации.НаименованиеСокращенное = НаименованиеСокращенное;
	ДанныеОрганизации.НаименованиеПолное = НаименованиеПолное;
	
	ДанныеОрганизации.ЮридическийАдрес = ЮридическийАдрес;
	ДанныеОрганизации.ЮридическийАдресЗначениеJSON = ЮридическийАдресЗначениеJSON;
	
	ДанныеОрганизации.КодОКВЭД2 = КодОКВЭД2;
	
	ДанныеОрганизации.ДополнительныеКодыОКВЭД2 = ДополнительныеКодыОКВЭД2(ВидыДеятельности, ДанныеОрганизации.КодОКВЭД2);
	
	ДанныеОрганизации.ДанныеРегистрацииВНалоговомОргане = ДанныеРегистрацииВНалоговомОргане();
	
	ДанныеОрганизации.ДанныеРуководителя = ДанныеРуководителя(Ложь);
	ДанныеОрганизации.ДанныеОДолжностиРуководителя = ДанныеОДолжностиРуководителя(Ложь);
	ДанныеОрганизации.УставныйКапитал = УставныйКапитал;
	
	ДанныеОрганизации.Учредители.Очистить();
	Для Каждого СтрокаТаблицы Из Учредители Цикл
		ЗаполнитьЗначенияСвойств(ДанныеОрганизации.Учредители.Добавить(), СтрокаТаблицы);
	КонецЦикла;
	
	Возврат ДанныеОрганизации;
	
КонецФункции

&НаСервере
Функция ДанныеИндивидуальногоПредпринимателя()
	
	ДанныеОрганизации = Новый Структура();
	ДанныеОрганизации.Вставить("Ссылка", ?(Объект.Ссылка.Пустая(), Организация, Объект.Ссылка));
	ДанныеОрганизации.Вставить("ЮридическоеФизическоеЛицо", Объект.ЮридическоеФизическоеЛицо);
	ДанныеОрганизации.Вставить("Наименование", Объект.Наименование);
	ДанныеОрганизации.Вставить("ИНН", Объект.ИНН);
	ДанныеОрганизации.Вставить("ОГРН", Объект.ОГРН);
	
	ДанныеОрганизации.Вставить("ДатаРегистрации", Объект.ДатаРегистрации);
	ДанныеОрганизации.Вставить("СвидетельствоСерияНомер", Объект.СвидетельствоСерияНомер);
	ДанныеОрганизации.Вставить("СвидетельствоДатаВыдачи", Объект.СвидетельствоДатаВыдачи);
	
	ДанныеОрганизации.Вставить("КодНалоговогоОргана", "");
	
	ДанныеОрганизации.Вставить("ИПРегистрационныйНомерПФР", Объект.ИПРегистрационныйНомерПФР);
	ДанныеОрганизации.Вставить("РегистрационныйНомерПФР", Объект.РегистрационныйНомерПФР);
	ДанныеОрганизации.Вставить("КодОрганаПФР", Объект.КодОрганаПФР);
	ДанныеОрганизации.Вставить("НаименованиеТерриториальногоОрганаПФР", Объект.НаименованиеТерриториальногоОрганаПФР);
	
	ДанныеОрганизации.Вставить("ИПРегистрационныйНомерФСС", Объект.ИПРегистрационныйНомерФСС);
	ДанныеОрганизации.Вставить("РегистрационныйНомерФСС", Объект.РегистрационныйНомерФСС);
	ДанныеОрганизации.Вставить("КодПодчиненностиФСС", Объект.КодПодчиненностиФСС);
	ДанныеОрганизации.Вставить("НаименованиеТерриториальногоОрганаФСС", Объект.НаименованиеТерриториальногоОрганаФСС);
	
	ДанныеОрганизации.Вставить("КодОКВЭД2", КодОКВЭД2);
	ДанныеОрганизации.Вставить("НаименованиеОКВЭД2", Объект.НаименованиеОКВЭД2);
	ДанныеОрганизации.Вставить("ДополнительныеКодыОКВЭД2",
		ДополнительныеКодыОКВЭД2(ВидыДеятельности, ДанныеОрганизации.КодОКВЭД2));
	
	ДанныеОрганизации.Вставить("ДанныеРегистрацииВНалоговомОргане", ДанныеРегистрацииВНалоговомОргане());
	
	ДанныеИндивидуальногоПредпринимателя = Обработки.РегистрацияОрганизации.НовыеДанныеФизическогоЛица();
	ДанныеИндивидуальногоПредпринимателя.Ссылка = Заявитель.Ссылка;
	ДанныеИндивидуальногоПредпринимателя.Фамилия = Объект.ФамилияИП;
	ДанныеИндивидуальногоПредпринимателя.Имя = Объект.ИмяИП;
	ДанныеИндивидуальногоПредпринимателя.Отчество = Объект.ОтчествоИП;
	ДанныеИндивидуальногоПредпринимателя.Пол = Заявитель.Пол;
	ДанныеИндивидуальногоПредпринимателя.ИНН = Объект.ИНН;
	ДанныеИндивидуальногоПредпринимателя.ДатаРождения = Заявитель.ДатаРождения;
	ДанныеИндивидуальногоПредпринимателя.МестоРожденияПредставление = Заявитель.МестоРожденияПредставление;
	
	ДанныеИндивидуальногоПредпринимателя.АдресПропискиЗначениеJSON = ЗаявительАдресПропискиЗначениеJSON;
	ДанныеИндивидуальногоПредпринимателя.ТелефонРабочийЗначениеJSON = ЗаявительТелефонЗначениеJSON;
	ДанныеИндивидуальногоПредпринимателя.EMailЗначениеJSON = ЗаявительEMailЗначениеJSON;
	
	СерияИНомерПаспорта = ОрганизацииФормы.СерияНомерПаспортаРаздельно(ПаспортСерияНомер);
	
	ДанныеИндивидуальногоПредпринимателя.ПаспортныеДанные.Серия            = СерияИНомерПаспорта.Серия;
	ДанныеИндивидуальногоПредпринимателя.ПаспортныеДанные.Номер            = СерияИНомерПаспорта.Номер;
	ДанныеИндивидуальногоПредпринимателя.ПаспортныеДанные.КемВыдан         = ПаспортныеДанныеЗаявителя.КемВыдан;
	ДанныеИндивидуальногоПредпринимателя.ПаспортныеДанные.ДатаВыдачи       = ПаспортныеДанныеЗаявителя.ДатаВыдачи;
	ДанныеИндивидуальногоПредпринимателя.ПаспортныеДанные.КодПодразделения = ПаспортныеДанныеЗаявителя.КодПодразделения;
	
	ДанныеОрганизации.Вставить("ИндивидуальныйПредприниматель", ДанныеИндивидуальногоПредпринимателя);
	
	Возврат ДанныеОрганизации;
	
КонецФункции

&НаСервере
Функция ДанныеЗаявителя()
	
	ДанныеЗаявителя = Обработки.РегистрацияОрганизации.НовыеДанныеФизическогоЛица();
	ЗаполнитьЗначенияСвойств(ДанныеЗаявителя, Заявитель);
	
	Если ЭтоЮрЛицо(ЭтотОбъект) Тогда
		ЗаполнитьЗначенияСвойств(ДанныеЗаявителя.ПаспортныеДанные, ПаспортныеДанныеЗаявителя);
		СерияИНомерПаспорта = ОрганизацииФормы.СерияНомерПаспортаРаздельно(ПаспортСерияНомер);
		ДанныеЗаявителя.ПаспортныеДанные.Серия = СерияИНомерПаспорта.Серия;
		ДанныеЗаявителя.ПаспортныеДанные.Номер = СерияИНомерПаспорта.Номер;
	Иначе
		// Паспортные данные для ИП в заявлении не заполняются
		ДанныеЗаявителя.Удалить("ПаспортныеДанные");
	КонецЕсли;
	
	ДанныеЗаявителя.АдресПрописки = ЗаявительАдресПропискиПредставление;
	ДанныеЗаявителя.АдресПропискиЗначениеJSON = ЗаявительАдресПропискиЗначениеJSON;
	ДанныеЗаявителя.ТелефонРабочий = ЗаявительТелефонПредставление;
	ДанныеЗаявителя.ТелефонРабочийЗначениеJSON = ЗаявительТелефонЗначениеJSON;
	ДанныеЗаявителя.EMail = ЗаявительEMailПредставление;
	ДанныеЗаявителя.EMailЗначениеJSON = ЗаявительEMailЗначениеJSON;
	
	Возврат ДанныеЗаявителя;
	
КонецФункции

&НаСервере
Функция ДанныеРуководителя(НовыйРуководитель = Ложь)
	
	Если НовыйРуководитель Тогда
		Возврат ДанныеЗаявителя();
	КонецЕсли;
	
	ДанныеРуководителя = Обработки.РегистрацияОрганизации.НовыеДанныеРуководителя();
	
	Если ЗначениеЗаполнено(ОтветственныеЛица.ФизическоеЛицо) Тогда
		ЗаполнитьЗначенияСвойств(ДанныеРуководителя,
			ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
				ОтветственныеЛица.ФизическоеЛицо, "Ссылка, Фамилия, Имя, Отчество, ИНН, Пол"));
	Иначе
		ДанныеРуководителя.Фамилия  = РуководительФамилия;
		ДанныеРуководителя.Имя      = РуководительИмя;
		ДанныеРуководителя.Отчество = РуководительОтчество;
		ДанныеРуководителя.ИНН      = РуководительИНН;
		ОрганизацииФормыКлиентСервер.ОпределитьПолПоОтчеству(ДанныеРуководителя.Пол, РуководительОтчество);
	КонецЕсли;
	
	Возврат ДанныеРуководителя;
	
КонецФункции

&НаСервере
Функция ДанныеОДолжностиРуководителя(НовыйРуководитель = Ложь)
	
	ИмяМенеджера = ?(НовыйРуководитель, "ОтветственныеЛицаНовые", "ОтветственныеЛица");
	
	ДанныеОДолжностиРуководителя = Обработки.РегистрацияОрганизации.НовыеДанныеДолжности();
	ДанныеОДолжностиРуководителя.ДатаНазначения = ЭтотОбъект[ИмяМенеджера].Период;
	ДанныеОДолжностиРуководителя.Должность      = ЭтотОбъект[ИмяМенеджера].Должность;
	ДанныеОДолжностиРуководителя.СрокПолномочий = ЭтотОбъект[ИмяМенеджера].СрокПолномочий;
	
	Если Не ЗначениеЗаполнено(ДанныеОДолжностиРуководителя.ДатаНазначения) Тогда
		Если НовыйРуководитель Тогда
			ДанныеОДолжностиРуководителя.ДатаНазначения = ДатаРешения;
		Иначе
			Если ЗначениеЗаполнено(Объект.ДатаРегистрации) Тогда
				ДанныеОДолжностиРуководителя.ДатаНазначения = Объект.ДатаРегистрации;
			Иначе
				ДанныеОДолжностиРуководителя.ДатаНазначения = Дата(1899, 12, 31);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДанныеОДолжностиРуководителя.Должность) Тогда
		ДанныеОДолжностиРуководителя.Должность = РуководительДолжность;
	КонецЕсли;
	
	Возврат ДанныеОДолжностиРуководителя;
	
КонецФункции

&НаСервере
Функция ДанныеРегистрацииВНалоговомОргане()
	
	ДанныеРегистрацииВНалоговомОргане = Обработки.РегистрацияОрганизации.НовыеДанныеРегистрацииВНалоговомОргане();
	
	Если ЭтоЮрЛицо(ЭтотОбъект) Тогда
		ЗначениеJSONАдреса = ЮридическийАдресЗначениеJSON;
	Иначе
		ЗначениеJSONАдреса = ЗаявительАдресПропискиЗначениеJSON;
	КонецЕсли;
	
	СведенияОНалоговомОргане = СведенияОНалоговомОрганеПоАдресу(ЗначениеJSONАдреса);
	Если СведенияОНалоговомОргане <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ДанныеРегистрацииВНалоговомОргане, СведенияОНалоговомОргане);
	КонецЕсли;
	
	Возврат ДанныеРегистрацииВНалоговомОргане;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЭтоЮрЛицо(Форма)
	
	Возврат (Форма.Объект.ЮридическоеФизическоеЛицо <> ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо"));
	
КонецФункции

&НаСервереБезКонтекста
Функция ДополнительныеКодыОКВЭД2(ТаблицаВидовДеятельности, ОсновнойКод)
	
	ДополнительныеКоды = Новый Массив;
	Для Каждого ВидДеятельности Из ТаблицаВидовДеятельности Цикл
		Если ВидДеятельности.ЭтоОКВЭД2 И ВидДеятельности.Код <> ОсновнойКод Тогда
			ДополнительныеКоды.Добавить(ВидДеятельности.Код);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СтрСоединить(ДополнительныеКоды, ";");
	
КонецФункции

#КонецОбласти

#Область СписокИзменений

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьСведенияОРуководителе(Форма)
	
	Возврат Не ПустаяСтрока(Форма.РуководительФамилия)
		Или Не ПустаяСтрока(Форма.РуководительИмя)
		Или Не ПустаяСтрока(Форма.РуководительОтчество);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИзмененияВносятсяВУчредительныеДокументы(ЭтоЮрЛицо, Изменено, АдресВУставеПолный, КодыОКВЭДпротиворечатУставу)
	
	Если ЭтоЮрЛицо Тогда
		ИзмененияВносятсяВУчредительныеДокументы = РегистрацияОрганизацииКлиентСервер.ИзмененияВносятсяВУчредительныеДокументы(
			Изменено,
			АдресВУставеПолный,
			КодыОКВЭДпротиворечатУставу);
	Иначе
		ИзмененияВносятсяВУчредительныеДокументы = Ложь;
	КонецЕсли;
	
	Возврат ИзмененияВносятсяВУчредительныеДокументы;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИзмененияТребуютУведомления(ЭтоЮрЛицо, Изменено, ЮрАдресИПропискаГлавногоСовпадают)
	
	Если ЭтоЮрЛицо Тогда
		ИзмененияТребуютУведомления = РегистрацияОрганизацииКлиентСервер.ИзмененияТребуютУведомления(Изменено, ЮрАдресИПропискаГлавногоСовпадают);
	Иначе
		ИзмененияТребуютУведомления = Ложь;
	КонецЕсли;
	
	Возврат ИзмененияТребуютУведомления;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураИзменений(Форма)
	
	Изменено = РегистрацияОрганизацииКлиентСервер.НоваяСтруктураИзменений();
	Изменено.СокращенноеНаименование = ИзмененоСокращенноеНаименование(Форма);
	Изменено.ПолноеНаименование      = ИзмененоПолноеНаименование(Форма);
	Изменено.ЮридическийАдрес        = ИзмененЮридическийАдрес(Форма);
	Изменено.Местоположение          = ИзмененоМестоположение(Форма);
	Изменено.Руководитель            = ИзмененРуководитель(Форма);
	Изменено.Учредители              = ИзмененыУчредители(Форма);
	Изменено.УставныйКапитал         = ИзмененУставныйКапитал(Форма);
	Изменено.ОсновнойВидДеятельности = ИзмененОсновнойВидДеятельности(Форма);
	Изменено.ВидыДеятельности        = ИзмененыВидыДеятельности(Форма);
	
	Возврат Изменено;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИзмененоСокращенноеНаименование(Форма)
	
	Возврат Не ПустаяСтрока(Форма.НаименованиеСокращенноеНовое);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИзмененоПолноеНаименование(Форма)
	
	Возврат Не ПустаяСтрока(Форма.НаименованиеПолноеНовое);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИзмененЮридическийАдрес(Форма)
	
	Возврат Не ПустаяСтрока(Форма.ЮридическийАдресНовый);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СпрашиватьКакУказанАдресВУставе(Форма)
	
	Если Не ЭтоЮрЛицо(Форма) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Изменено = СтруктураИзменений(Форма);
	
	Возврат Изменено.ЮридическийАдрес
		И Не РегистрацияОрганизацииКлиентСервер.ИзмененияВносятсяВУчредительныеДокументы(Изменено);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СпрашиватьКакУказаныВидыДеятельностиВУставе(Форма)
	
	Если Не ЭтоЮрЛицо(Форма) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Изменено = СтруктураИзменений(Форма);
	
	Возврат Изменено.ВидыДеятельности
		И Не РегистрацияОрганизацииКлиентСервер.ИзмененияВносятсяВУчредительныеДокументы(Изменено);
	
КонецФункции

// Преобразует числовое значение переключателя в булево
//
&НаКлиентеНаСервереБезКонтекста
Функция АдресВУставеПолный(АдресВУставе)
	
	Если АдресВУставе = 2 Тогда
		Возврат Истина;
	ИначеЕсли АдресВУставе = 1 Тогда
		Возврат Ложь;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Преобразует числовое значение переключателя в булево
//
&НаКлиентеНаСервереБезКонтекста
Функция КодыОКВЭДпротиворечатУставу(ВидыДеятельностиВУставе)
	
	Если ВидыДеятельностиВУставе = 2 Тогда
		Возврат Истина;
	ИначеЕсли ВидыДеятельностиВУставе = 1 Тогда
		Возврат Ложь;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИзмененоМестоположение(Форма)
	
	Если Не ИзмененЮридическийАдрес(Форма) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Не РегистрацияОрганизацииВызовСервера.СравнитьНаселенныеПункты(
		Форма.ЮридическийАдресЗначениеJSON, Форма.ЮридическийАдресНовыйЗначениеJSON);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЮрАдресИПропискаГлавногоСовпадают(Знач АдресРуководителяЗначениеJSON, Знач ЮридическийАдресНовыйЗначениеJSON, Знач Учредители)
	
	ЮрАдресИПропискаРуководителяСовпадают =
		УправлениеКонтактнойИнформациейБП.СравнитьАдреса(АдресРуководителяЗначениеJSON, ЮридическийАдресНовыйЗначениеJSON);
	
	Если ЮрАдресИПропискаРуководителяСовпадают Тогда
		// Новый адрес является адресом места жительства лица, наделенного правом действовать от имени общества без доверенности.
		Возврат Истина;
	КонецЕсли;
	
	ЮрАдресИПропискаГлавногоУчредителяСовпадают = Ложь;
	Для каждого Учредитель Из Учредители Цикл
		Если Учредитель.ДоляУчастия >= 50 И ТипЗнч(Учредитель.Ссылка) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			АдресПоПропискеУчредителя = АдресПоПропискеУчредителя(Учредитель.Ссылка);
			Если АдресПоПропискеУчредителя <> Неопределено И Не ПустаяСтрока(АдресПоПропискеУчредителя.ЗначениеJSON) Тогда
				ЮрАдресИПропискаГлавногоУчредителяСовпадают = УправлениеКонтактнойИнформациейБП.СравнитьАдреса(
					АдресПоПропискеУчредителя.ЗначениеJSON, ЮридическийАдресНовыйЗначениеJSON);
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЮрАдресИПропискаГлавногоУчредителяСовпадают Тогда
		// Новый адрес является адресом места жительства одного из участников ООО,
		// владеющего не менее 50% голосов от общего количества голосов всех учредителей.
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция АдресПоПропискеУчредителя(Учредитель)
	
	Если Не ЗначениеЗаполнено(Учредитель) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВидКонтактнойИнформации =
		ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица");
	
	КонтактнаяИнформацияУчредителя = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		Учредитель, ВидКонтактнойИнформации, , Ложь);
	
	Возврат ЗначениеJSONКонтактнойИнформации(КонтактнаяИнформацияУчредителя, ВидКонтактнойИнформации);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИзмененРуководитель(Форма)
	
	Возврат ЗначениеЗаполнено(Форма.ОтветственныеЛицаНовые.ФизическоеЛицо);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИзмененУставныйКапитал(Форма)
	
	Возврат Форма.УставныйКапиталНовый <> 0;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИзмененыУчредители(Форма)
	
	Возврат Форма.УчредителиНовые.Количество() <> 0;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИзмененОсновнойВидДеятельности(Форма)
	
	Возврат Не ПустаяСтрока(Форма.КодОКВЭД2Новый) И Форма.КодОКВЭД2Новый <> Форма.КодОКВЭД2;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИзмененыВидыДеятельности(Форма)
	
	Возврат Форма.ВидыДеятельностиНовые.Количество() <> 0;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьИзменениеНаименования(РезультатВыбора)
	
	Если ТипЗнч(РезультатВыбора) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если РезультатВыбора.Свойство("НаименованиеСокращенное") Тогда
		Если ВРег(НаименованиеСокращенное) <> ВРег(РезультатВыбора.НаименованиеСокращенное) Тогда
			НаименованиеСокращенноеНовое = РезультатВыбора.НаименованиеСокращенное;
		Иначе
			НаименованиеСокращенноеНовое = "";
		КонецЕсли;
	КонецЕсли;
	
	Если РезультатВыбора.Свойство("НаименованиеПолное") Тогда
		Если ВРег(НаименованиеПолное) <> ВРег(РезультатВыбора.НаименованиеПолное) Тогда
			НаименованиеПолноеНовое = РезультатВыбора.НаименованиеПолное;
		Иначе
			НаименованиеПолноеНовое = "";
		КонецЕсли;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗакрытияФормыИзмененияЮридическогоАдреса(Знач РезультатЗакрытия, Знач ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ЮридическийАдресНовыйЗначениеJSON = РезультатЗакрытия.Значение;
	ЮридическийАдресНовый = РезультатЗакрытия.Представление;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзменениеРуководителя(РезультатВыбора)
	
	Если ТипЗнч(РезультатВыбора) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ЗаполнитьЗначенияСвойств(ОтветственныеЛицаНовые, РезультатВыбора);
	
	ПрочитатьЗаявителя();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеУчредителей(РезультатВыбора)
	
	Если ТипЗнч(РезультатВыбора) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если УставныйКапитал <> РезультатВыбора.УставныйКапитал Тогда
		УставныйКапиталНовый = РезультатВыбора.УставныйКапитал;
	Иначе
		УставныйКапиталНовый = 0;
	КонецЕсли;
	
	ЗагрузитьТаблицуИзВременногоХранилища("УчредителиНовые", РезультатВыбора.АдресХранилища);
	ОтобразитьУчредителей();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеВидовДеятельности(РезультатВыбора)
	
	Если ТипЗнч(РезультатВыбора) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если СокрЛП(РезультатВыбора.ОсновнойКод) <> СокрЛП(КодОКВЭД2) Тогда
		КодОКВЭД2Новый = РезультатВыбора.ОсновнойКод;
		НаименованиеОКВЭД2Новое = РезультатВыбора.ОсновнойКодНаименование;
	Иначе
		КодОКВЭД2Новый = "";
		НаименованиеОКВЭД2Новое = "";
	КонецЕсли;
	
	ЗагрузитьТаблицуИзВременногоХранилища("ВидыДеятельностиНовые", РезультатВыбора.АдресХранилища);
	ОтобразитьВидыДеятельности();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

// Заполняет наименования в коллекции ВидыДеятельности из ОКВЭД
//
&НаСервере
Процедура ЗаполнитьНаименованияВидовДеятельности()
	
	Обработки.РегистрацияОрганизации.ЗаполнитьНаименованияВидовДеятельности(ВидыДеятельности);
	
КонецПроцедуры

&НаСервере
Функция СохранитьТаблицуВоВременноеХранилище(ИмяТаблицы)
	
	Возврат ПоместитьВоВременноеХранилище(ЭтотОбъект[ИмяТаблицы].Выгрузить(), УникальныйИдентификатор);
	
КонецФункции

&НаСервере
Процедура ЗагрузитьТаблицуИзВременногоХранилища(ИмяТаблицы, АдресТаблицы)
	
	ЭтотОбъект[ИмяТаблицы].Загрузить(ПолучитьИзВременногоХранилища(АдресТаблицы));
	
КонецПроцедуры

&НаКлиенте
Функция ИмяФормыИзмененияНаименования()
	
	Возврат "Обработка.РегистрацияОрганизации.Форма.ИзменениеНаименования";
	
КонецФункции

&НаКлиенте
Функция ИмяФормыИзмененияРуководителя()
	
	Возврат "Обработка.РегистрацияОрганизации.Форма.ФормаФизическогоЛица";
	
КонецФункции

&НаКлиенте
Функция ИмяФормыИзмененияУчредителей()
	
	Возврат "Обработка.РегистрацияОрганизации.Форма.ИзменениеУчредителей";
	
КонецФункции

&НаКлиенте
Функция ИмяФормыИзмененияВидовДеятельности()
	
	Возврат "Обработка.РегистрацияОрганизации.Форма.ИзменениеВидовДеятельности";
	
КонецФункции

&НаСервере
Процедура СброситьИзмененияРеквизитов()
	
	// Данные закладки "Изменения"
	
	НаименованиеСокращенноеНовое = "";
	НаименованиеПолноеНовое = "";
	
	НаименованиеСокращенное = "";
	НаименованиеПолное = "";
	
	ЮридическийАдресНовыйЗначениеJSON = "";
	ЮридическийАдресНовый = УправлениеКонтактнойИнформацией.ПредставлениеКонтактнойИнформации(ЮридическийАдресНовыйЗначениеJSON);
	АдресВУставе = 0;
	
	ЗначениеВРеквизитФормы(РегистрыСведений.ОтветственныеЛицаОрганизаций.СоздатьМенеджерЗаписи(), "ОтветственныеЛицаНовые");
	
	УставныйКапиталНовый = 0;
	УчредителиНовые.Очистить();
	
	КодОКВЭД2 = "";
	КодОКВЭД2Новый = "";
	ВидыДеятельностиНовые.Очистить();
	ВидыДеятельностиВУставе = 0;
	
	// Данные закладки "Заявление"
	
	ДатаРешения = ТекущаяДатаСеанса();
	
	ЗначениеВРеквизитФормы(Справочники.ФизическиеЛица.СоздатьЭлемент(), "Заявитель");
	
КонецПроцедуры

#КонецОбласти

#Область Заявление

&НаСервереБезКонтекста
Функция НайтиФизическоеЛицо(Знач Фамилия, Знач Имя, Знач Отчество = "", Знач ИНН = "")
	
	Возврат Справочники.Организации.ФизическоеЛицо(Фамилия, Имя, Отчество, ИНН);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СообщениеОбОшибкеИНН(Знач ИНН)
	
	ТекстСообщения = "";
	Если НЕ ПустаяСтрока(ИНН) Тогда
		ЦифрыИНН = ОрганизацииФормыКлиентСервер.ТолькоЦифры(ИНН);
		РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ЦифрыИНН, Ложь, ТекстСообщения);
	КонецЕсли;
	Возврат ТекстСообщения;

КонецФункции

&НаСервере
Процедура ПроверитьЗаполнениеСпискаИзменений(Отказ)
	
	ЭтоЮрЛицо = ЭтоЮрЛицо(ЭтотОбъект);
	
	Если ЭтоЮрЛицо И Учредители.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'В реестре не найдены сведения об учредителях организации'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ПолеИсточникИНН(ЭтоНачалоРаботы), , Отказ);
	КонецЕсли;
	
	Изменено = СтруктураИзменений(ЭтотОбъект);
	
	ЕстьИзменения = Ложь;
	Для Каждого КлючИЗначение Из Изменено Цикл
		Если КлючИЗначение.Значение Тогда
			ЕстьИзменения = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьИзменения Тогда
		Если ЭтоЮрЛицо Тогда
			ТекстСообщения = НСтр("ru = 'Укажите изменения в сведениях о юридическом лице, содержащихся в ЕГРЮЛ'");
			ПолеФормы = "ИзменитьНаименование";
		Иначе
			ТекстСообщения = НСтр("ru = 'Укажите изменения в сведениях об индивидуальном предпринимателе, содержащихся в ЕГРИП'");
			ПолеФормы = "ИзменитьВидыДеятельности";
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ПолеФормы, , Отказ);
	КонецЕсли;
	
	ДопустимоВНаименованииКромеКириллицы = "!""№()+-., 0123456789";
	
	Если Изменено.СокращенноеНаименование Тогда
		Префикс = НСтр("ru='ООО'");
		Если Не СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(НаименованиеСокращенноеНовое, Истина, ДопустимоВНаименованииКромеКириллицы) Тогда
			ТекстСообщения = НСтр("ru = 'Сокращенное наименование заполняется на русском языке'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ИзменитьНаименование", , Отказ);
		ИначеЕсли СтрНайти(НаименованиеСокращенноеНовое, Префикс) <> 1 Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Сокращенное наименование должно начинаться с ""%1""'"), Префикс);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ИзменитьНаименование", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Изменено.ПолноеНаименование Тогда
		Префикс = НСтр("ru = 'Общество с ограниченной ответственностью'");
		Если Не СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(НаименованиеПолноеНовое, Истина, ДопустимоВНаименованииКромеКириллицы) Тогда
			ТекстСообщения = НСтр("ru = 'Полное наименование заполняется на русском языке'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ИзменитьНаименование", , Отказ);
		ИначеЕсли СтрНайти(НаименованиеПолноеНовое, Префикс) <> 1 Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Полное наименование должно начинаться со слов ""%1""'"), Префикс);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ИзменитьНаименование", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(АдресВУставе) И СпрашиватьКакУказанАдресВУставе(ЭтотОбъект) Тогда
		ТекстСообщения = НСтр("ru = 'Уточните как указан адрес общества в уставе'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "АдресВУставе", , Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидыДеятельностиВУставе) И СпрашиватьКакУказаныВидыДеятельностиВУставе(ЭтотОбъект) Тогда
		ТекстСообщения = НСтр("ru = 'Уточните нужно ли вносить изменения в устав'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ВидыДеятельностиВУставе", , Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеЗаявления(Отказ)
	
	ЭтоЮрЛицо = ЭтоЮрЛицо(ЭтотОбъект);
	
	// Дата решения
	Если ЭтоЮрЛицо Тогда
		Если Не ЗначениеЗаполнено(ДатаРешения) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Заполнение", НСтр("ru = 'Дата решения'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ДатаРешения", , Отказ);
		Иначе
			КорректныйПериод = ОбщегоНазначенияБПСобытия.КорректныйПериодВводаДокументов();
			Если ДатаРешения < КорректныйПериод.НачалоКорректногоПериода 
				Или ДатаРешения > КорректныйПериод.КонецКорректногоПериода Тогда
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", "Корректность", НСтр("ru = 'Дата решения'"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ДатаРешения", , Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Должность заявителя
	// Проверяем, если руководитель не изменился, иначе проверка выполняется в форме физ. лица
	Если ЭтоЮрЛицо И Не ИзмененРуководитель(ЭтотОбъект) Тогда
		Если Не ЗначениеЗаполнено(ОтветственныеЛица.Должность) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Должность руководителя'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ОтветственныеЛица.Должность", , Отказ);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ОтветственныеЛица.СрокПолномочий) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Назначен на срок'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ОтветственныеЛица.СрокПолномочий", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Контактные данные руководителя проверяем только в том случае, если руководитель не изменился,
	// т.к. в этом случае проверка выполняется в форме физ. лица.
	Если Не ЭтоЮрЛицо Или Не ИзмененРуководитель(ЭтотОбъект) Тогда
		
		// Адрес заявителя
		ПредставлениеПустогоАдреса = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки();
		Если ЗаявительАдресПропискиПредставление = ПредставлениеПустогоАдреса Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Адрес по прописке'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
				, "ЗаявительАдресПропискиПредставление", , Отказ);
		КонецЕсли;
		
		// Телефон заявителя
		Если Не ЗначениеЗаполнено(ЗаявительТелефонПредставление) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				, , НСтр("ru = 'Контактный телефон'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
				, "ЗаявительТелефонПредставление", , Отказ);
		ИначеЕсли Не ОрганизацииФормыКлиентСервер.ТелефонСоответствуетТребованиям(ЗаявительТелефонПредставление) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(
				, "Корректность", НСтр("ru = 'Контактный телефон'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
				, "ЗаявительТелефонПредставление", , Отказ);
		КонецЕсли;
		
		// Электронная почта заявителя
		Если Не ЗначениеЗаполнено(ЗаявительEMailПредставление) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения( , , НСтр("ru = 'Email'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
				, "ЗаявительEMailПредставление", , Отказ);
		ИначеЕсли Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(ЗаявительEMailПредставление) Тогда
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Корректность", НСтр("ru = 'Email'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
				, "ЗаявительEMailПредставление", , Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	// Учредители
	Если ЭтоЮрЛицо И Не ЕдинственныйУчредительРуководитель(ЭтотОбъект) Тогда
		Для Индекс = 0 По Учредители.Количество() - 1 Цикл
			
			Учредитель = Учредители[Индекс];
			Если Учредитель.Ссылка <> Заявитель.Ссылка
				И Не Обработки.РегистрацияОрганизации.РеквизитыУчредителяЗаполнены(Учредитель.Ссылка) Тогда
				ПутьКСтроке = "Учредители[" + Формат(Индекс, "ЧГ=") + "].";
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Не заполнены обязательные данные учредителя %1'"), Учредитель.Наименование);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
					, ПутьКСтроке + "Ссылка", , Отказ);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Способ подачи документов
	Если Не ЗначениеЗаполнено(СпособПодачиДокументов) Тогда
		ТекстСообщения = НСтр("ru = 'Не выбран способ подачи документов'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "СпособПодачиДокументов", , Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеПаспортныхДанныхЗаявителя(Отказ)
	
	// Серия и номер паспорта заявителя
	Если НЕ ЗначениеЗаполнено(ПаспортСерияНомер) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Серия и номер паспорта'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПаспортСерияНомер", , Отказ);
	Иначе
		ЦифрыСерииНомераПаспорта = ОрганизацииФормыКлиентСервер.ТолькоЦифры(СокрЛП(ПаспортСерияНомер));
		Если СтрДлина(ЦифрыСерииНомераПаспорта) <> 10 Тогда
			ТекстСообщения = НСтр("ru = 'Серия и номер паспорта должны состоять из 10 цифр'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПаспортСерияНомер", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Кем выдан паспорта заявителя
	Если НЕ ЗначениеЗаполнено(ПаспортныеДанныеЗаявителя.КемВыдан) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Кем выдан паспорт'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
			, "ПаспортныеДанныеЗаявителя.КемВыдан", , Отказ);
	КонецЕсли;
	
	// Дата выдачи паспорта заявителя
	Если НЕ ЗначениеЗаполнено(ПаспортныеДанныеЗаявителя.ДатаВыдачи) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Дата выдачи паспорта'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
			, "ПаспортныеДанныеЗаявителя.ДатаВыдачи", , Отказ);
	Иначе
		ПричинаОшибки = "";
		Если Не Обработки.РегистрацияОрганизации.ПаспортДействителен(ПаспортныеДанныеЗаявителя.ДатаВыдачи, Заявитель.ДатаРождения, ПричинаОшибки) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Паспорт недействителен: %1'"), ПричинаОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПаспортныеДанныеЗаявителя.ДатаВыдачи", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Код подразделения паспорта заявителя
	Если НЕ ЗначениеЗаполнено(ПаспортныеДанныеЗаявителя.КодПодразделения) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Код подразделения'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
			, "ПаспортныеДанныеЗаявителя.КодПодразделения", , Отказ);
	Иначе
		ЦифрыКодаПодразделения = ОрганизацииФормыКлиентСервер.ТолькоЦифры(ПаспортныеДанныеЗаявителя.КодПодразделения);
		Если СтрДлина(ЦифрыКодаПодразделения) <> 6 Тогда
			ТекстСообщения = НСтр("ru = 'Код подразделения должен состоять из 6 цифр'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
				, "ПаспортныеДанныеЗаявителя.КодПодразделения", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Дата рождения заявителя
	Если НЕ ЗначениеЗаполнено(Заявитель.ДатаРождения) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Дата рождения'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Заявитель.ДатаРождения", , Отказ);
	ИначеЕсли Заявитель.ДатаРождения > ТекущаяДатаСеанса() Тогда
		ТекстСообщения = НСтр("ru = 'Дата рождения должна быть раньше текущей даты'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Заявитель.ДатаРождения", , Отказ);
	КонецЕсли;
	
	// Место рождения заявителя
	Если НЕ ЗначениеЗаполнено(Заявитель.МестоРожденияПредставление) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Место рождения'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
			, "Заявитель.МестоРожденияПредставление", , Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЕдинственныйУчредительРуководитель(Форма)
	
	Возврат (Форма.Учредители.Количество() = 1) И (Форма.Учредители[0].Ссылка = Форма.Заявитель.Ссылка);
	
КонецФункции

&НаКлиенте
Процедура ЗаявительАдресПропискиПослеВводаАдреса(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		// Отказ от выбора, данные неизменны
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ЗаявительАдресПропискиЗначениеJSON = Результат.Значение;
	ЗаявительАдресПропискиПредставление = Результат.Представление;
	
	Если Не ЭтоЮрЛицо(ЭтотОбъект) Тогда
		ЗаявительАдресПропискиПриИзмененииНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаявительАдресПропискиПриИзмененииНаСервере()
	
	СведенияОНалоговомОргане = СведенияОНалоговомОрганеПоАдресу(ЗаявительАдресПропискиЗначениеJSON);
	Если СведенияОНалоговомОргане <> Неопределено Тогда
		КодНалоговогоОргана = СведенияОНалоговомОргане.КодНалоговогоОргана;
	Иначе
		КодНалоговогоОргана = "";
	КонецЕсли;
	
	РеквизитыРегистрирующегоОргана =
		Обработки.РегистрацияОрганизации.РеквизитыРегистрирующегоОргана(КодНалоговогоОргана, Истина);
	
	РегистрирующийОрганНаименование = РеквизитыРегистрирующегоОргана.Наименование;
	РегистрирующийОрганАдрес = РеквизитыРегистрирующегоОргана.Адрес;
	РегистрирующийОрганТелефон = РеквизитыРегистрирующегоОргана.Телефон;
	РегистрирующийОрганИнформация = РеквизитыРегистрирующегоОргана.Информация;
	
КонецПроцедуры

#КонецОбласти

#Область Документы

&НаКлиенте
Процедура ОткрытьЗаявлениеОРегистрацииИзменений(ИмяЗаявления, ПредставлениеЗаявления)
	
	Заявление = ЭтотОбъект[ИмяЗаявления];
	Если ЗначениеЗаполнено(Заявление) Тогда
		РеквизитыЗаявления = РеквизитыЗаявления(Заявление);
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", Заявление);
		ПараметрыФормы.Вставить("Организация", РеквизитыЗаявления.Организация);
		ФормаОтчета = ПолучитьФорму(РеквизитыЗаявления.ПолноеИмяФормы, ПараметрыФормы, ЭтотОбъект, Объект.Ссылка);
		РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФормуУведомленияОСпецрежимах(ФормаОтчета);
	Иначе
		ТекстСообщения = СтрШаблон(НСтр("ru = '%1 не создано'"), ПредставлениеЗаявления);
		ПоказатьПредупреждение(, ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РеквизитыЗаявления(Знач Заявление)
	
	РеквизитыЗаявления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Заявление, "Организация, ИмяОтчета, ИмяФормы");
	РеквизитыЗаявления.Вставить("ПолноеИмяФормы",
		СтрШаблон("Отчет.%1.Форма.%2", РеквизитыЗаявления.ИмяОтчета, РеквизитыЗаявления.ИмяФормы));
	
	Возврат РеквизитыЗаявления;
	
КонецФункции

&НаСервереБезКонтекста
Функция СведенияОНалоговомОрганеПоАдресу(Знач Адрес)
	
	Если Не ЗначениеЗаполнено(Адрес) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СведенияОНалоговомОрганеПоАдресу = АдресныйКлассификатор.КодыАдреса(Адрес, "Сервис1С");
	
	КодНалоговогоОрганаПоАдресу = Формат(СведенияОНалоговомОрганеПоАдресу.КодИФНСЮЛ, "ЧЦ=4; ЧДЦ=; ЧВН=; ЧГ=0");
	
	Если ЗначениеЗаполнено(КодНалоговогоОрганаПоАдресу) Тогда
		
		Сведения = Новый Структура();
		Сведения.Вставить("КодНалоговогоОргана", КодНалоговогоОрганаПоАдресу);
		Сведения.Вставить("КодПоОКТМО", Формат(СведенияОНалоговомОрганеПоАдресу.ОКТМО, "ЧДЦ=; ЧГ=0"));
		Сведения.Вставить("КодПоОКАТО", Формат(СведенияОНалоговомОрганеПоАдресу.ОКАТО, "ЧДЦ=; ЧГ=0"));
		
		Возврат Сведения;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ПодготовитьНачалоРаботы(ПредупреждениеОбОшибке)
	
	НачатьТранзакцию();
	
	Попытка
		
		Константы.НачалоРаботы.Установить(Ложь);
		Константы.ИзмененияЕГРЗавершены.Установить(Истина); // Для показа инструкции по началу работы предпринимателя в сервисе.
		
		ОбщегоНазначенияБПВызовСервера.УстановитьСтандартныйИнтерфейс();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Текст = НСтр("ru = 'Ошибка при начале работы:'");
		СведенияОбОшибке = ИнформацияОбОшибке();
		ПредупреждениеОбОшибке.Вставить("Текст",    Текст + Символы.ПС + КраткоеПредставлениеОшибки(СведенияОбОшибке));
		ПредупреждениеОбОшибке.Вставить("Подробно", ПодробноеПредставлениеОшибки(СведенияОбОшибке));
		
		УстановитьВидимостьСтраницы(ЭтотОбъект, "Документы");
		
		Возврат Ложь;
		
	КонецПопытки;
	
	УстановитьВидимостьБаннераНачалоРаботы();
	
	Обработки.РегистрацияОрганизации.ОчиститьСлужебныеДанныеПослеРегистрации();
	
	УправлениеФормой(ЭтотОбъект);
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьБаннераНачалоРаботы()
	
	Элементы.НачалоРаботы.Видимость = ЭтоНачалоРаботы;
	Элементы.НачатьРаботу.КнопкаПоУмолчанию = ЭтоНачалоРаботы;
	
	Элементы.Готово.Видимость = Не ЭтоНачалоРаботы;
	Элементы.Готово.КнопкаПоУмолчанию = Не ЭтоНачалоРаботы;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПрисоединенныйКЗаявлениюФайл(Идентификатор)
	
	Заявление = ВладелецПрисоединенныхФайлов();
	Если Не ЗначениеЗаполнено(Заявление) Тогда
		ВызватьИсключение НСтр("ru = 'Заявление не заполнено'");
	КонецЕсли;
	
	Документ = ДокументПоИдентификатору(Заявление, Идентификатор, УникальныйИдентификатор);
	
	Если Документ <> Неопределено Тогда
		ПолучитьФайл(Документ.АдресХранилища, Документ.ИмяФайла, Истина);
	Иначе
		ВызватьИсключение НСтр("ru = 'Файл не найден'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДокументПоИдентификатору(Знач Заявление, Знач Идентификатор, Знач УникальныйИдентификатор)
	
	Перем ИмяФайла;
	
	Если Обработки.РегистрацияОрганизации.ИменаФайлов().Свойство(Идентификатор, ИмяФайла) Тогда
		Файл = Обработки.РегистрацияОрганизации.ПрисоединенныйФайлЗаявленияПоИмени(Заявление, ИмяФайла);
	КонецЕсли;
	
	Если Файл = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СвойстваФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Файл, "Наименование, Расширение");
	
	Документ = Новый Структура;
	Документ.Вставить("АдресХранилища", ПоместитьВоВременноеХранилище(РаботаСФайлами.ДвоичныеДанныеФайла(Файл), УникальныйИдентификатор));
	Документ.Вставить("ИмяФайла", СтрШаблон("%1.%2", СвойстваФайла.Наименование, СвойстваФайла.Расширение));
	
	Возврат Документ;
	
КонецФункции

&НаКлиенте
Функция ВладелецПрисоединенныхФайлов()
	
	ИзмененияВносятсяВУчредительныеДокументы = ИзмененияВносятсяВУчредительныеДокументы(
		ЭтоЮрЛицо(ЭтотОбъект),
		СтруктураИзменений(ЭтотОбъект),
		АдресВУставеПолный(АдресВУставе),
		КодыОКВЭДпротиворечатУставу(ЭтотОбъект.ВидыДеятельностиВУставе));
	
	Возврат ?(ИзмененияВносятсяВУчредительныеДокументы, ЗаявлениеОВнесенииИзмененийУчредительныеДокументы, ЗаявлениеОВнесенииИзмененийЕГР);
	
КонецФункции

#КонецОбласти

#Область КонтактнаяИнформация

&НаСервереБезКонтекста
Функция ЗначениеJSONКонтактнойИнформации(КонтактнаяИнформацияОбъекта, ВидКонтактнойИнформации)
	
	Результат = Новый Структура("ЗначениеJSON, Представление", "", "");
	
	Отбор = Новый Структура("Вид", ВидКонтактнойИнформации);
	
	КонтактнаяИнформацияПоВиду = КонтактнаяИнформацияОбъекта.Скопировать(Отбор);
	Если КонтактнаяИнформацияПоВиду.Количество() > 0 Тогда
		КонтактнаяИнформацияПоВиду.Сортировать("Дата УБЫВ");
		Результат.ЗначениеJSON = КонтактнаяИнформацияПоВиду[0].Значение;
		Результат.Представление = КонтактнаяИнформацияПоВиду[0].Представление;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция КонтактнаяИнформацияПоПредставлению(Знач Представление, Знач ВидКонтактнойИнформации)
	
	// Создаем новый экземпляр по представлению.
	Результат = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(Представление, ВидКонтактнойИнформации);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ЧтениеДанныхПомощника

// Находит актуальные заявления по выбранной организации и возвращает в структуре
//
// Параметры:
//  Организация - СправочникСсылка.Организации
// 
// Возвращаемое значение:
//  Структура - содержит ссылки на документы и состояние их отправки
//
&НаСервереБезКонтекста
Функция НайтиАктуальныеЗаявления(Организация)
	
	Возврат Обработки.РегистрацияОрганизации.НайтиАктуальныеЗаявленияОВнесенииИзмененийЕГР(Организация);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СостояниеЗаявления(СостояниеОтправки)
	
	Если СостояниеОтправки = Неопределено Тогда
		
		Возврат ИнтерфейсыВзаимодействияБРОКлиентСервер.НовыйСостояниеДокумента();
		
	КонецЕсли;
	
	Возврат СостояниеОтправки;
	
КонецФункции

// Заполняет реквизиты формы данными, сохраненными в заявлениях
//
&НаСервере
Процедура ПрочитатьЗаявление()
	Перем Изменено;
	Перем ДанныеНовогоРуководителя, ДанныеЗаявителя;
	
	ДанныеПомощникаЗаполнения = Новый Структура();
	Если ЗначениеЗаполнено(ЗаявлениеОВнесенииИзмененийЕГР) Тогда
		ДанныеПомощникаЗаполнения = Обработки.РегистрацияОрганизации.ДанныеПомощникаВнесенияИзмененийЕГР(ЗаявлениеОВнесенииИзмененийЕГР);
	КонецЕсли;
	Если ДанныеПомощникаЗаполнения.Количество() = 0 И ЗначениеЗаполнено(ЗаявлениеОВнесенииИзмененийУчредительныеДокументы) Тогда
		ДанныеПомощникаЗаполнения = Обработки.РегистрацияОрганизации.ДанныеПомощникаВнесенияИзмененийЕГР(ЗаявлениеОВнесенииИзмененийУчредительныеДокументы);
	КонецЕсли;
	
	// Читаем из сохраненного заявления данные помощника - см. ДанныеПомощникаЗаполнения()
	
	Если Не ДанныеПомощникаЗаполнения.Свойство("Изменено", Изменено) Тогда
		Возврат;
	КонецЕсли;
	
	// Контактная информация могла быть сохранена в старом формате, приведем поля контактной информации к новому формату.
	КонвертироватьКонтактнуюИнформациюПомощникаЗаполнения(ДанныеПомощникаЗаполнения);
	
	// Изменения
	
	Если Изменено.ПолноеНаименование Или Изменено.СокращенноеНаименование Тогда
		ДанныеПомощникаЗаполнения.Свойство("НаименованиеПолноеНовое", НаименованиеПолноеНовое);
		ДанныеПомощникаЗаполнения.Свойство("НаименованиеСокращенноеНовое", НаименованиеСокращенноеНовое);
	КонецЕсли;
	
	Если Изменено.ЮридическийАдрес Или Изменено.Местоположение Тогда
		ДанныеПомощникаЗаполнения.Свойство("ЮридическийАдресНовый", ЮридическийАдресНовый);
		ДанныеПомощникаЗаполнения.Свойство("ЮридическийАдресНовыйЗначениеJSON", ЮридическийАдресНовыйЗначениеJSON);
		ДанныеПомощникаЗаполнения.Свойство("АдресВУставе", АдресВУставе);
	КонецЕсли;
	
	Если Изменено.Руководитель Тогда
		Если ДанныеПомощникаЗаполнения.Свойство("ДанныеНовогоРуководителя", ДанныеНовогоРуководителя) Тогда
			Если ОбщегоНазначения.СсылкаСуществует(ДанныеНовогоРуководителя.Ссылка) Тогда
				ОтветственныеЛицаНовые.ФизическоеЛицо = ДанныеНовогоРуководителя.Ссылка;
			КонецЕсли;
		КонецЕсли;
		Если ДанныеПомощникаЗаполнения.Свойство("ДанныеОДолжностиНовогоРуководителя") Тогда
			ДанныеОДолжностиНовогоРуководителя = ДанныеПомощникаЗаполнения.ДанныеОДолжностиНовогоРуководителя;
			ОтветственныеЛицаНовые.Период = ДанныеОДолжностиНовогоРуководителя.ДатаНазначения;
			ОтветственныеЛицаНовые.Должность = ДанныеОДолжностиНовогоРуководителя.Должность;
			ОтветственныеЛицаНовые.СрокПолномочий = ДанныеОДолжностиНовогоРуководителя.СрокПолномочий;
		КонецЕсли;
	КонецЕсли;
	
	Если Изменено.Учредители Тогда
		Если ДанныеПомощникаЗаполнения.Свойство("УчредителиНовые") Тогда
			УчредителиНовые.Загрузить(ДанныеПомощникаЗаполнения.УчредителиНовые);
		КонецЕсли;
	КонецЕсли;
	
	Если Изменено.УставныйКапитал Тогда
		ДанныеПомощникаЗаполнения.Свойство("УставныйКапиталНовый", УставныйКапиталНовый);
	КонецЕсли;
	
	Если Изменено.ОсновнойВидДеятельности Тогда
		ДанныеПомощникаЗаполнения.Свойство("КодОКВЭД2Новый", КодОКВЭД2Новый);
	КонецЕсли;
	
	Если Изменено.ВидыДеятельности Тогда
		Если ДанныеПомощникаЗаполнения.Свойство("ВидыДеятельностиНовые") Тогда
			ВидыДеятельностиНовые.Загрузить(ДанныеПомощникаЗаполнения.ВидыДеятельностиНовые);
		КонецЕсли;
		ДанныеПомощникаЗаполнения.Свойство("ВидыДеятельностиВУставе", ВидыДеятельностиВУставе);
	КонецЕсли;
	
	// Данные заявления
	
	ДанныеПомощникаЗаполнения.Свойство("СпособПодачиДокументов", СпособПодачиДокументов);
	Если Не ЗначениеЗаполнено(СпособПодачиДокументов) Тогда
		СпособРегистрации = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеПомощникаЗаполнения, "СпособРегистрации", 1);
		СпособПодачиДокументов = СпособПодачиДокументовПоСпособуРегистрации(СпособРегистрации);
	КонецЕсли;
	
	ДанныеПомощникаЗаполнения.Свойство("ДатаРешения", ДатаРешения);
	
	Если ДанныеПомощникаЗаполнения.Свойство("ДанныеЗаявителя", ДанныеЗаявителя) Тогда
		Если ЗначениеЗаполнено(ДанныеЗаявителя.Ссылка) И ОбщегоНазначения.СсылкаСуществует(ДанныеЗаявителя.Ссылка) Тогда
			ЗаявительОбъект = ДанныеЗаявителя.Ссылка.ПолучитьОбъект();
			ЗначениеВРеквизитФормы(ЗаявительОбъект, "Заявитель");
			ПрочитатьДанныеЗаявителя();
		Иначе
			ЗаявительОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
			ЗаявительОбъект.Заполнить(Неопределено);
			ЗаполнитьЗначенияСвойств(ЗаявительОбъект, ДанныеЗаявителя);
			ЗначениеВРеквизитФормы(ЗаявительОбъект, "Заявитель");
			Если ДанныеЗаявителя.Свойство("ПаспортныеДанные") Тогда
				ДокументыФизическихЛицМенеджер = РегистрыСведений.ДокументыФизическихЛиц.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(ДокументыФизическихЛицМенеджер, ДанныеЗаявителя.ПаспортныеДанные);
				ЗначениеВРеквизитФормы(ДокументыФизическихЛицМенеджер, "ПаспортныеДанныеЗаявителя");
				ПаспортСерияНомер = СокрЛП(СтрШаблон("%1 %2", ДанныеЗаявителя.ПаспортныеДанные.Серия, ДанныеЗаявителя.ПаспортныеДанные.Номер));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Заполним сведения о налоговых органах
	РегистрирующиеОрганы = Обработки.РегистрацияОрганизации.ОпределитьРегистрирующийОрган(ДанныеПомощникаЗаполнения);
	ЗаполнитьРеквизитыРегистрирующихОрганов(РегистрирующиеОрганы);
	
	// Если изменены учредительные документы, надо платить госпошлину.
	ИзмененияВносятсяВУчредительныеДокументы = ИзмененияВносятсяВУчредительныеДокументы(
		ЭтоЮрЛицо(ЭтотОбъект), Изменено, АдресВУставеПолный(АдресВУставе), КодыОКВЭДпротиворечатУставу(ВидыДеятельностиВУставе));
	
	Если ИзмененияВносятсяВУчредительныеДокументы Тогда
		АдресРегистрации = ?(Изменено.Местоположение, ЮридическийАдресНовыйЗначениеJSON, ЮридическийАдресЗначениеJSON);
		СуммаПошлины = Обработки.РегистрацияОрганизации.СуммаПошлиныЗаВнесениеИзмененийВУчредительныеДокументы();
		КБК = Обработки.РегистрацияОрганизации.КБКНалогаПоСпособуПодачиДокументов(СпособПодачиДокументов);
		
		Если Обработки.РегистрацияОрганизации.СервисКвитанцияНаОплатуГоспошлиныДоступен() Тогда
			ПлатежныеРеквизиты = ДанныеСервисаРегистрации.ПлатежныеРеквизитыОплатаГоспошлины(
				ДанныеЗаявителя(), АдресРегистрации, КБК, СуммаПошлины);
			ЗаполнитьПлатежныеРеквизитыОплатаГоспошлины(ПлатежныеРеквизиты);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СпособПодачиДокументовПоСпособуРегистрации(СпособРегистрации)
	
	СпособыПодачиДокументов = РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов();
	Если СпособРегистрации = 3 Тогда
		Возврат СпособыПодачиДокументов.Почта;
	ИначеЕсли СпособРегистрации = 2 Тогда
		Возврат СпособыПодачиДокументов.ИФНСпредставитель;
	Иначе
		Возврат СпособыПодачиДокументов.ИФНСлично;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Процедура КонвертироватьКонтактнуюИнформациюПомощникаЗаполнения(ДанныеПомощникаЗаполнения)
	
	Обработки.РегистрацияОрганизации.КонвертироватьКонтактнуюИнформациюПомощникаРегистрацииИзменений(ДанныеПомощникаЗаполнения);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьЗаявителя()
	
	Перем ЗаявительОбъект, НайденноеФизическоеЛицо;
	
	Если ЭтоЮрЛицо(ЭтотОбъект) Тогда
		Если ИзмененРуководитель(ЭтотОбъект) Тогда
			// Заявителем является новый руководитель организации
			ЗаявительОбъект = ОтветственныеЛицаНовые.ФизическоеЛицо.ПолучитьОбъект();
		Иначе
			Если Не ОтветственныеЛица.ФизическоеЛицо.Пустая() Тогда
				ЗаявительОбъект = ОтветственныеЛица.ФизическоеЛицо.ПолучитьОбъект();
			Иначе
				// Заявителем является руководитель организации
				НайденноеФизическоеЛицо = НайтиФизическоеЛицо(РуководительФамилия, РуководительИмя, РуководительОтчество, РуководительИНН);
				Если ЗначениеЗаполнено(НайденноеФизическоеЛицо) Тогда
					ЗаявительОбъект = НайденноеФизическоеЛицо.ПолучитьОбъект();
				Иначе
					ЗаявительОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
					ЗаявительОбъект.Заполнить(Неопределено);
					ЗаявительОбъект.Фамилия  = РуководительФамилия;
					ЗаявительОбъект.Имя      = РуководительИмя;
					ЗаявительОбъект.Отчество = РуководительОтчество;
					ЗаявительОбъект.ИНН      = РуководительИНН;
					ОрганизацииФормыКлиентСервер.ОпределитьПолПоОтчеству(ЗаявительОбъект.Пол, ЗаявительОбъект.Отчество);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Заявителем является индивидуальный предприниматель
		Если Не Объект.ИндивидуальныйПредприниматель.Пустая() Тогда
			ЗаявительОбъект = Объект.ИндивидуальныйПредприниматель.ПолучитьОбъект();
		Иначе
			НайденноеФизическоеЛицо = НайтиФизическоеЛицо(Объект.ФамилияИП, Объект.ИмяИП, Объект.ОтчествоИП, Объект.ИНН);
			Если ЗначениеЗаполнено(НайденноеФизическоеЛицо) Тогда
				ЗаявительОбъект = НайденноеФизическоеЛицо.ПолучитьОбъект();
			Иначе
				ЗаявительОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
				ЗаявительОбъект.Заполнить(Неопределено);
				ЗаявительОбъект.Фамилия  = Объект.ФамилияИП;
				ЗаявительОбъект.Имя      = Объект.ИмяИП;
				ЗаявительОбъект.Отчество = Объект.ОтчествоИП;
				ЗаявительОбъект.ИНН      = Объект.ИНН;
				ОрганизацииФормыКлиентСервер.ОпределитьПолПоОтчеству(ЗаявительОбъект.Пол, ЗаявительОбъект.Отчество);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(ЗаявительОбъект, "Заявитель");
	ПрочитатьДанныеЗаявителя();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеЗаявителя()
	
	ИменаРеквизитов = Новый Структура;
	ИменаРеквизитов.Вставить("ФизическоеЛицо", "Заявитель");
	ИменаРеквизитов.Вставить("ПаспортныеДанные", "ПаспортныеДанныеЗаявителя");
	ИменаРеквизитов.Вставить("СерияНомерПаспорта", "ПаспортСерияНомер");
	
	ОрганизацииФормы.ПрочитатьДанныеФизическогоЛица(ЭтотОбъект, Заявитель.Ссылка, ИменаРеквизитов);
	
	ПараметрыКонтактнойИнформации = ПараметрыПолученияКонтактнойИнформацииЗаявителя(ЭтотОбъект);
	
	КонтактнаяИнформацияОбъекта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		ПараметрыКонтактнойИнформации.Владелец, , , Ложь);
	
	// Адрес по прописке
	АдресПрописки = ЗначениеJSONКонтактнойИнформации(КонтактнаяИнформацияОбъекта, ПараметрыКонтактнойИнформации.АдресПрописки);
	ЗаявительАдресПропискиЗначениеJSON = АдресПрописки.ЗначениеJSON;
	ЗаявительАдресПропискиПредставление = АдресПрописки.Представление;
	
	Если ПустаяСтрока(ЗаявительАдресПропискиПредставление) Тогда
		ЗаявительАдресПропискиЗначениеJSON = "";
		ЗаявительАдресПропискиПредставление = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки();
	КонецЕсли;
	
	// Телефон
	ТелефонЗаявителя = ЗначениеJSONКонтактнойИнформации(КонтактнаяИнформацияОбъекта, ПараметрыКонтактнойИнформации.Телефон);
	ЗаявительТелефонЗначениеJSON = ТелефонЗаявителя.ЗначениеJSON;
	ЗаявительТелефонПредставление = ТелефонЗаявителя.Представление;
	
	// E-mail
	EMailЗаявителя = ЗначениеJSONКонтактнойИнформации(КонтактнаяИнформацияОбъекта, ПараметрыКонтактнойИнформации.Email);
	ЗаявительEMailЗначениеJSON = EMailЗаявителя.ЗначениеJSON;
	ЗаявительEMailПредставление = EMailЗаявителя.Представление;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыПолученияКонтактнойИнформацииЗаявителя(Форма)
	
	Параметры = Новый Структура;
	Параметры.Вставить("Владелец", Неопределено);
	Параметры.Вставить("EMail", Неопределено);
	Параметры.Вставить("АдресПрописки", Неопределено);
	Параметры.Вставить("Телефон", Неопределено);
	
	Если Не ЭтоЮрЛицо(Форма) Тогда
		Параметры.Владелец = Форма.Объект.Ссылка;
		Параметры.Email =
			ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.EmailОрганизации");
		Параметры.АдресПрописки =
			ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации");
		Параметры.Телефон =
			ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации");
	Иначе
		Параметры.Владелец = Форма.Заявитель.Ссылка;
		Параметры.Email =
			ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.EMailФизическиеЛица");
		Параметры.АдресПрописки =
			ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица");
		Параметры.Телефон =
			ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица");
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

&НаСервере
Процедура ПрочитатьОтветственныеЛица()
	
	Если Не ЭтоЮрЛицо(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписиОтветственныхЛиц = РегистрыСведений.ОтветственныеЛицаОрганизаций.СоздатьМенеджерЗаписи();
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОтборОтветственныхЛиц = Новый Структура;
		ОтборОтветственныхЛиц.Вставить("СтруктурнаяЕдиница", Объект.Ссылка);
		ОтборОтветственныхЛиц.Вставить("ОтветственноеЛицо", Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
		СрезПоследнихОтветственных = РегистрыСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(ДатаРешения, ОтборОтветственныхЛиц);
		Если СрезПоследнихОтветственных.Количество() <> 0 Тогда
			ЗаполнитьЗначенияСвойств(МенеджерЗаписиОтветственныхЛиц, СрезПоследнихОтветственных[0]);
		Иначе
			ЗаполнитьЗначенияСвойств(МенеджерЗаписиОтветственныхЛиц, ОтборОтветственныхЛиц);
		КонецЕсли;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(МенеджерЗаписиОтветственныхЛиц, "ОтветственныеЛица");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОтветственныеЛица()
	
	Если Не ЭтоЮрЛицо(ЭтотОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОтветственныеЛица.Период) Тогда
		ОтветственныеЛица.Период = Объект.ДатаРегистрации;
	КонецЕсли;
	
	Если Не ИзмененРуководитель(ЭтотОбъект) Тогда
		Если Не ЗначениеЗаполнено(ОтветственныеЛица.ФизическоеЛицо) Тогда
			ОтветственныеЛица.ФизическоеЛицо = Заявитель.Ссылка;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ОтветственныеЛица.Должность) Тогда
			ОтветственныеЛица.Должность = РуководительДолжность;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОтветственныеЛица.СрокПолномочий) Тогда
		ОтветственныеЛица.СрокПолномочий = 5;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ОбъектЗаполнен(Объект)
	
	Возврат ЗначениеЗаполнено(Объект.ИНН);
	
КонецФункции

&НаСервереБезКонтекста
Функция УчредителиПоТипам(Форма)
	
	Учредители = Обработки.РегистрацияОрганизации.НоваяТаблицаУчредителей();
	Для Каждого СтрокаТаблицы Из Форма.Учредители Цикл
		ЗаполнитьЗначенияСвойств(Учредители.Добавить(), СтрокаТаблицы);
	КонецЦикла;
	
	Возврат Обработки.РегистрацияОрганизации.УчредителиПоТипам(Учредители);
	
КонецФункции

#КонецОбласти

#КонецОбласти