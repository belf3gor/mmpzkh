#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	ФормаБлокируетОкноВладельца = Параметры.ФормаБлокируетОкноВладельца;
	Если ФормаБлокируетОкноВладельца Тогда
		ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Нет;
		Элементы.КоманднаяПанельНижняя.Видимость = Истина;
		Элементы.ОК.КнопкаПоУмолчанию = Истина;
	Иначе
		ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиФормы.Авто;
		Элементы.КоманднаяПанельНижняя.Видимость = Ложь;
	КонецЕсли;
	
	ИспользоватьДолжность = Параметры.ИспользоватьДолжность;
	Элементы.Должность.Видимость      = ИспользоватьДолжность;
	Элементы.СрокПолномочий.Видимость = ИспользоватьДолжность;
	Если ИспользоватьДолжность Тогда
		Должность = Параметры.Должность;
		СрокПолномочий = Параметры.СрокПолномочий;
	КонецЕсли;
	
	// Проверяем заполнение электронной почты для должностных лиц
	ПроверятьЗаполнениеEMail = ИспользоватьДолжность;
	
	ЗаголовокФормы = ?(Параметры.Свойство("Заголовок"), Параметры.Заголовок, НСтр("ru='Учредитель'"));
	УстановитьЗаголовокФормы();
	
	Элементы.УзнатьИНН.Видимость = Обработки.РегистрацияОрганизации.СервисУзнатьИННДоступен();
	УзнатьИНН = НСтр("ru = 'Узнать ИНН'");
	
	Если Параметры.Ключ.Пустая() Тогда
		
		Если НЕ ПустаяСтрока(Параметры.ТекстЗаполнения) 
			И СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Параметры.ТекстЗаполнения, Истина, "-. ") Тогда
			
			ЧастиФИО = СтрРазделить(Параметры.ТекстЗаполнения, " .", Ложь);
			Если ЧастиФИО.Количество() > 0 Тогда
				ФизическоеЛицо.Фамилия = ТРег(ЧастиФИО[0]);
				Если ЧастиФИО.Количество() > 1 Тогда
					ФизическоеЛицо.Имя = ТРег(ЧастиФИО[1]);
					Если ЧастиФИО.Количество() > 2 Тогда
						ФизическоеЛицо.Отчество = ТРег(ЧастиФИО[2]);
						ОрганизацииФормыКлиентСервер.ОпределитьПолПоОтчеству(ФизическоеЛицо.Пол, ФизическоеЛицо.Отчество);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Параметры.ТекстЗаполнения = "";
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	ИсключаемыеВиды = Новый Массив();
	ИсключаемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.АдресПоПропискеФизическиеЛица);
	ИсключаемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица);
	ИсключаемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица);
	
	ПараметрыРазмещенияКонтактнойИнформации = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();
	ПараметрыРазмещенияКонтактнойИнформации.ИмяЭлементаДляРазмещения = "ГруппаКонтактнаяИнформация";
	ПараметрыРазмещенияКонтактнойИнформации.ИсключаемыеВиды = ИсключаемыеВиды;
	ПараметрыРазмещенияКонтактнойИнформации.ОтложеннаяИнициализация = Истина;
	
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, ФизическоеЛицо, ПараметрыРазмещенияКонтактнойИнформации);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ОрганизацииФормы.ПрочитатьДанныеФизическогоЛица(ЭтотОбъект, ТекущийОбъект.Ссылка, ИменаРеквизитовФизическогоЛица());
	
	НадписьОшибкаИННРуководителя = СообщениеОбОшибкеИНН(ТекущийОбъект.ИНН);
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект, "ГруппаКонтактнаяИнформация");
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Очистить();
	
	ПроверитьЗаполнениеПаспортныхДанных(Отказ);
	
	// Должность
	Если ИспользоватьДолжность И Не ЗначениеЗаполнено(Должность) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Должность'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Должность", , Отказ);
	КонецЕсли;
	
	// Срок полномочий
	Если ИспользоватьДолжность И Не ЗначениеЗаполнено(СрокПолномочий) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Назначается на срок'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "СрокПолномочий", , Отказ);
	КонецЕсли;
	
	// ИНН
	ТекстСообщения = СообщениеОбОшибкеИНН(ФизическоеЛицо.ИНН);
	Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ФизическоеЛицо.ИНН", , Отказ);
	КонецЕсли;
	
	// Адрес
	Если КонтактнаяИнформацияПолеАдресПоПропискеФизическиеЛица = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки() Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Адрес по прописке'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "КонтактнаяИнформацияПолеАдресПоПропискеФизическиеЛица", , Отказ);
	КонецЕсли;
	
	// Телефон
	Если НЕ ЗначениеЗаполнено(КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛица) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Контактный телефон'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛица", , Отказ);
	ИначеЕсли НЕ ОрганизацииФормыКлиентСервер.ТелефонСоответствуетТребованиям(КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛица) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Корректность", НСтр("ru = 'Контактный телефон'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛица", , Отказ);
	КонецЕсли;
	
	// Электронная почта
	Если Не ЗначениеЗаполнено(КонтактнаяИнформацияПолеEMailФизическиеЛица) Тогда
		Если ПроверятьЗаполнениеEMail Тогда
			// Проверяем заполнение электронной почты только для должностных лиц
			ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения( , , НСтр("ru = 'Email'"));
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,
				, "КонтактнаяИнформацияПолеEMailФизическиеЛица", , Отказ);
		КонецЕсли;
	ИначеЕсли Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(КонтактнаяИнформацияПолеEMailФизическиеЛица) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Корректность", НСтр("ru = 'Email'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "КонтактнаяИнформацияПолеEMailФизическиеЛица", , Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПараметрыЗаписи.Вставить("ИменаРеквизитов", ИменаРеквизитовФизическогоЛица());
	ОрганизацииФормы.ПодготовитьДанныеФизическогоЛицаПередЗаписью(
		ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ОрганизацииФормы.ЗаписатьДанныеФизическогоЛица(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	УстановитьЗаголовокФормы();
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ФамилияПриИзменении(Элемент)
	
	ФИОПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяПриИзменении(Элемент)
	
	ФИОПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчествоПриИзменении(Элемент)
	
	ФИОПриИзменении();
	ОрганизацииФормыКлиентСервер.ОпределитьПолПоОтчеству(ФизическоеЛицо.Пол, ФизическоеЛицо.Отчество);
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	РаботаСДолжностямиБПКлиент.ДолжностьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	РаботаСДолжностямиБПКлиент.ДолжностьАвтоПодбор(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДолжностьОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	РаботаСДолжностямиБПКлиент.ДолжностьОкончаниеВводаТекста(ЭтотОбъект, Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	
	НадписьОшибкаИННРуководителя = СообщениеОбОшибкеИНН(ФизическоеЛицо.ИНН);
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеАдресПоПропискеФизическогоЛицаНажатие(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура УзнатьИНННажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	ПроверитьЗаполнениеПаспортныхДанных(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ДанныеФизическогоЛица", ДанныеФизическогоЛица());
	
	ОткрытьФорму("Обработка.РегистрацияОрганизации.Форма.УзнатьИНН", ПараметрыФормы, Элементы.ИНН);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛицаПриИзменении(Элемент)
	
	ОрганизацииФормыКлиентСервер.ТелефонПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛицаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеEmailФизическиеЛицаПриИзменении(Элемент)
	
	КонтактнаяИнформацияПолеEMailФизическиеЛица = СокрЛП(КонтактнаяИнформацияПолеEMailФизическиеЛица);
	УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеEmailФизическиеЛицаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	ОповеститьОВыбореИЗакрыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОповеститьОВыбореИЗакрыть()
	
	Если Не Записать() Тогда
		Возврат;
	КонецЕсли;
	
	РезультатВыбора = Новый Структура;
	РезультатВыбора.Вставить("ФизическоеЛицо", ФизическоеЛицо.Ссылка);
	Если ИспользоватьДолжность Тогда
		РезультатВыбора.Вставить("Должность", Должность);
		РезультатВыбора.Вставить("СрокПолномочий", СрокПолномочий);
	КонецЕсли;
	
	ОповеститьОВыборе(РезультатВыбора);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	// Адрес по прописке
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, 
		"КонтактнаяИнформацияПолеАдресПоПропискеФизическиеЛица");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"КонтактнаяИнформацияПолеАдресПоПропискеФизическиеЛица",
		ВидСравненияКомпоновкиДанных.Равно,
		УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки());
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);
	
	// Электронная почта
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля,
		"КонтактнаяИнформацияПолеEMailФизическиеЛица");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПроверятьЗаполнениеEMail", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокФормы()
	
	Если ФормаБлокируетОкноВладельца Тогда
		Заголовок = ЗаголовокФормы;
	ИначеЕсли ЗначениеЗаполнено(ФизическоеЛицо.Ссылка) Тогда
		Заголовок = СтрШаблон(НСтр("ru='%1 (%2)'"), ФизическоеЛицо.Наименование, ЗаголовокФормы);
	Иначе
		Заголовок = СтрШаблон(НСтр("ru='%1 (создание)'"), ЗаголовокФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ФизическиеЛица", , ФизическоеЛицо.Ссылка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИменаРеквизитовФизическогоЛица()

	ИменаРеквизитовФизическогоЛица = Новый Структура;
	ИменаРеквизитовФизическогоЛица.Вставить("ПаспортныеДанные",   "ПаспортныеДанные");
	ИменаРеквизитовФизическогоЛица.Вставить("СерияНомерПаспорта", "ПаспортСерияНомер");
	Возврат ИменаРеквизитовФизическогоЛица;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СообщениеОбОшибкеИНН(Знач ИНН)
	
	ТекстСообщения = "";
	Если НЕ ПустаяСтрока(ИНН) Тогда
		ЦифрыИНН = ОрганизацииФормыКлиентСервер.ТолькоЦифры(ИНН);
		РегламентированныеДанныеКлиентСервер.ИННСоответствуетТребованиям(ЦифрыИНН, Ложь, ТекстСообщения);
	КонецЕсли;
	Возврат ТекстСообщения;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.НадписьОшибкаИННРуководителя.Видимость = НЕ ПустаяСтрока(Форма.НадписьОшибкаИННРуководителя);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат)
	
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, ФизическоеЛицо, Результат);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеПаспортныхДанных(Отказ)
	
	ДопустимоВФИОКромеКириллицы = "-. 0123456789";
	
	// Фамилия
	Если НЕ ЗначениеЗаполнено(ФизическоеЛицо.Фамилия) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Фамилия'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ФизическоеЛицо.Фамилия", , Отказ);
	ИначеЕсли НЕ СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(ФизическоеЛицо.Фамилия, Истина, ДопустимоВФИОКромеКириллицы) Тогда
		ТекстСообщения = НСтр("ru = 'Фамилия заполняется на русском языке'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ФизическоеЛицо.Фамилия", , Отказ);
	КонецЕсли;
	
	// Имя
	Если НЕ ЗначениеЗаполнено(ФизическоеЛицо.Имя) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Имя'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ФизическоеЛицо.Имя", , Отказ);
	ИначеЕсли НЕ СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(ФизическоеЛицо.Имя, Истина, ДопустимоВФИОКромеКириллицы) Тогда
		ТекстСообщения = НСтр("ru = 'Имя заполняется на русском языке'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ФизическоеЛицо.Имя", , Отказ);
	КонецЕсли;
	
	// Отчество
	Если НЕ СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(ФизическоеЛицо.Отчество, Истина, ДопустимоВФИОКромеКириллицы) Тогда
		ТекстСообщения = НСтр("ru = 'Отчество заполняется на русском языке'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ФизическоеЛицо.Отчество", , Отказ);
	КонецЕсли;
	
	// Пол
	Если НЕ ЗначениеЗаполнено(ФизическоеЛицо.Пол) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Пол'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ФизическоеЛицо.Пол", , Отказ);
	КонецЕсли;
	
	// Серия и номер паспорта
	Если НЕ ЗначениеЗаполнено(ПаспортСерияНомер) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Серия и номер паспорта'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПаспортСерияНомер", , Отказ);
	Иначе
		ЦифрыСерииНомераПаспорта = ОрганизацииФормыКлиентСервер.ТолькоЦифры(СокрЛП(ПаспортСерияНомер));
		Если СтрДлина(ЦифрыСерииНомераПаспорта) <> 10 Тогда
			ТекстСообщения = НСтр("ru = 'Серия и номер паспорта должны состоять из 10 цифр'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПаспортСерияНомер", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Кем выдан паспорт
	Если НЕ ЗначениеЗаполнено(ПаспортныеДанные.КемВыдан) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Кем выдан паспорт'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПаспортныеДанные.КемВыдан", , Отказ);
	КонецЕсли;
	
	// Дата выдачи паспорта
	Если НЕ ЗначениеЗаполнено(ПаспортныеДанные.ДатаВыдачи) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Дата выдачи паспорта'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПаспортныеДанные.ДатаВыдачи", , Отказ);
	Иначе
		ПричинаОшибки = "";
		Если Не Обработки.РегистрацияОрганизации.ПаспортДействителен(ПаспортныеДанные.ДатаВыдачи, ФизическоеЛицо.ДатаРождения, ПричинаОшибки) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Паспорт недействителен: %1'"), ПричинаОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПаспортныеДанные.ДатаВыдачи", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Код подразделения паспорта
	Если НЕ ЗначениеЗаполнено(ПаспортныеДанные.КодПодразделения) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Код подразделения'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПаспортныеДанные.КодПодразделения", , Отказ);
	Иначе
		ЦифрыКодаПодразделения = ОрганизацииФормыКлиентСервер.ТолькоЦифры(СокрЛП(ПаспортныеДанные.КодПодразделения));
		Если СтрДлина(ЦифрыКодаПодразделения) <> 6 Тогда
			ТекстСообщения = НСтр("ru = 'Код подразделения должен состоять из 6 цифр'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПаспортныеДанные.КодПодразделения", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Дата рождения
	Если НЕ ЗначениеЗаполнено(ФизическоеЛицо.ДатаРождения) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Дата рождения'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ФизическоеЛицо.ДатаРождения", , Отказ);
	ИначеЕсли ФизическоеЛицо.ДатаРождения > ТекущаяДатаСеанса() Тогда
		ТекстСообщения = НСтр("ru = 'Дата рождения должна быть раньше текущей даты'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ФизическоеЛицо.ДатаРождения", , Отказ);
	КонецЕсли;
	
	// Место рождения
	Если НЕ ЗначениеЗаполнено(ФизическоеЛицо.МестоРожденияПредставление) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Место рождения'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ФизическоеЛицо.МестоРожденияПредставление", , Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеФизическогоЛица()
	
	ДанныеФизическогоЛица = Обработки.РегистрацияОрганизации.НовыеДанныеФизическогоЛица();
	ДанныеФизическогоЛица.Ссылка                     = ФизическоеЛицо.Ссылка;
	ДанныеФизическогоЛица.Фамилия                    = ФизическоеЛицо.Фамилия;
	ДанныеФизическогоЛица.Имя                        = ФизическоеЛицо.Имя;
	ДанныеФизическогоЛица.Отчество                   = ФизическоеЛицо.Отчество;
	ДанныеФизическогоЛица.Пол                        = ФизическоеЛицо.Пол;
	ДанныеФизическогоЛица.ИНН                        = ФизическоеЛицо.ИНН;
	ДанныеФизическогоЛица.ДатаРождения               = ФизическоеЛицо.ДатаРождения;
	ДанныеФизическогоЛица.МестоРожденияПредставление = ФизическоеЛицо.МестоРожденияПредставление;
	
	СерияИНомерПаспорта = ОрганизацииФормы.СерияНомерПаспортаРаздельно(ПаспортСерияНомер);
	ДанныеФизическогоЛица.ПаспортныеДанные.Серия            = СерияИНомерПаспорта.Серия;
	ДанныеФизическогоЛица.ПаспортныеДанные.Номер            = СерияИНомерПаспорта.Номер;
	ДанныеФизическогоЛица.ПаспортныеДанные.КемВыдан         = ПаспортныеДанные.КемВыдан;
	ДанныеФизическогоЛица.ПаспортныеДанные.ДатаВыдачи       = ПаспортныеДанные.ДатаВыдачи;
	ДанныеФизическогоЛица.ПаспортныеДанные.КодПодразделения = ПаспортныеДанные.КодПодразделения;
	
	ДанныеФизическогоЛица.АдресПропискиЗначениеJSON  =
			ЗначениеJSONКонтактнойИнформации(Элементы.КонтактнаяИнформацияПолеАдресПоПропискеФизическиеЛица);
	ДанныеФизическогоЛица.ТелефонРабочийЗначениеJSON =
			ЗначениеJSONКонтактнойИнформации(Элементы.КонтактнаяИнформацияПолеТелефонРабочийФизическиеЛица);
	ДанныеФизическогоЛица.EMailЗначениеJSON          =
			ЗначениеJSONКонтактнойИнформации(Элементы.КонтактнаяИнформацияПолеEMailФизическиеЛица);
	
	Возврат ДанныеФизическогоЛица;
	
КонецФункции

&НаСервере
Функция ЗначениеJSONКонтактнойИнформации(Элемент)
	
	Отбор = Новый Структура("ИмяРеквизита");
	Отбор.ИмяРеквизита = Элемент.Имя;
	ДанныеИсточника = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	Если ДанныеИсточника.Количество() > 0 Тогда
		Возврат ДанныеИсточника[0].Значение;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаКлиенте
Процедура ФИОПриИзменении()
	
	Если Не ФизическоеЛицо.Ссылка.Пустая() Тогда
		// Изменяется существующий элемент справочника
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ФизическоеЛицо.Фамилия) Или ПустаяСтрока(ФизическоеЛицо.Имя) Тогда
		// Искать физическое лицо рано
		Возврат;
	КонецЕсли;
	
	НайденноеФизическоеЛицо = НайтиФизическоеЛицо(ФизическоеЛицо.Фамилия, ФизическоеЛицо.Имя, ФизическоеЛицо.Отчество, ФизическоеЛицо.ИНН);
	Если ЗначениеЗаполнено(НайденноеФизическоеЛицо) Тогда
		ПрочитатьФизическоеЛицо(НайденноеФизическоеЛицо);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФизическоеЛицо(НовоеФизическоеЛицо)
	
	Объект = НовоеФизическоеЛицо.ПолучитьОбъект();
	ЗначениеВРеквизитФормы(Объект, "ФизическоеЛицо");
	ПриЧтенииНаСервере(Объект);
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиФизическоеЛицо(Знач Фамилия, Знач Имя, Знач Отчество = "", Знач ИНН = "")
	
	Возврат Справочники.Организации.ФизическоеЛицо(Фамилия, Имя, Отчество, ИНН);
	
КонецФункции

#КонецОбласти

