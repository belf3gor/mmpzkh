#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не Обработки.РегистрацияОрганизации.ИспользуетсяСервисРегистрации() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Сервис регистрации недоступен'"), , , , Отказ);
		Возврат;
	КонецЕсли;
	
	Обработки.РегистрацияОрганизации.РазместитьНавигацию(ЭтотОбъект, Параметры);
	
	УстановитьЗначенияПоУмолчанию();
	ПодготовитьФормуНаСервере();
	
	УстановитьУсловноеОформление();
	
	ВидОрганизации = "ИндивидуальныйПредприниматель";
	СсылкаДляПереходаНаКарту = УправлениеКонтактнойИнформациейБП.СтрокаСсылкиПоказатьНаКарте();
	НалоговаяИнспекцияАдресНаКарте = УправлениеКонтактнойИнформациейБП.СтрокаСсылкиПоказатьНаКарте();
	СсылкаАдресМФЦНаКарте = УправлениеКонтактнойИнформациейБП.СтрокаСсылкиПоказатьНаКарте();
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	ИсключаемыеВиды = Новый Массив();
	ИсключаемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации);
	ИсключаемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонОрганизации);
	ИсключаемыеВиды.Добавить(Справочники.ВидыКонтактнойИнформации.EmailОрганизации);
	
	ПараметрыРазмещенияКонтактнойИнформации = УправлениеКонтактнойИнформацией.ПараметрыКонтактнойИнформации();
	ПараметрыРазмещенияКонтактнойИнформации.ИмяЭлементаДляРазмещения = "КонтактныеДанные";
	ПараметрыРазмещенияКонтактнойИнформации.ИсключаемыеВиды = ИсключаемыеВиды;
	ПараметрыРазмещенияКонтактнойИнформации.ОтложеннаяИнициализация = Истина;
	
	УправлениеКонтактнойИнформацией.ПриСозданииНаСервере(ЭтотОбъект, Организация, ПараметрыРазмещенияКонтактнойИнформации);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	Если НавигацияПараметрФормы = "Документы" Тогда
		ИзменитьЭтап(3);
	Иначе
		ИзменитьЭтап(1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РегистрацияОрганизацииКлиент.ОповеститьОбОткрытии(ЭтотОбъект,
		РегистрацияОрганизацииКлиентСервер.ИмяПомощникаРегистрации(),
		НавигацияНомерШага);
	ПроверитьСоответствиеТребованиямИНН();
	// Восстановим признак модифицированности формы
	// для того, чтобы была выполнена запись объекта при переходе к следующему шагу.
	Если ДанныеМодифицированы Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// Все данные сохраняются в настройках формы и при последующем открытии восстанавливаются.
	// Поэтому сохраним модифицированность формы, чтобы при следующем открытии помощника восстановить форму.
	// В базу данные запишутся, после того как пользователь двинется дальше по помощнику.
	ДанныеМодифицированы = Модифицированность;
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма")
		И ИсточникВыбора.ИмяФормы = "Справочник.РегистрацииВНалоговомОргане.Форма.ФормаПредставителя"
		И ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Модифицированность = Истина;
		ЗаполнитьЗначенияСвойств(РегистрацияВНалоговомОргане, ВыбранноеЗначение);
		ПредставлениеПредставителя = ВыбранноеЗначение.Представитель;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = ЭтотОбъект Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменитьПараметрНавигации" Тогда
		
		Если Параметр = "Заявление" Тогда
			ИзменитьЭтап(1);
		ИначеЕсли Параметр = "Документы" Тогда
			ИзменитьЭтап(3);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ОткрытШагПомощника_РегистрацияОрганизации" Тогда
		
		Если Параметр = Неопределено
			Или Параметр.ИмяПомощника <> РегистрацияОрганизацииКлиентСервер.ИмяПомощникаРегистрации()
			Или Параметр.НомерШага <> НавигацияНомерШага Тогда
			Закрыть();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ЗавершенаРаботаПомощникаНачалаРаботы" Тогда
		
		// Работа помощника начала работы может быть завершена в другом окне (например, из окна БыстрыйСтарт).
		// В этом случае нужно закрыть окно помощника регистрации. Но пользователь мог начать изменять значение какого-нибудь
		// текстового поля и при закрытии окна сработает обработчик "ПриИзменении" и форма станет Модифицированной и не сможет
		// закрыться без вопроса. Для этого изменяем текущий элемент и снимаем модифицированность.
		ЭтотОбъект.ТекущийЭлемент = Элементы.СформироватьДокументы;
		ЭтотОбъект.Модифицированность = Ложь;
		Если ЭтотОбъект.Открыта() Тогда
			ЭтотОбъект.Закрыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// Персональные данные
	
	ПроверитьЗаполнениеПаспортныхДанных(Отказ);
	
	Если КонтактнаяИнформацияПолеЮрАдресОрганизации = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки() Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Адрес по прописке'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "КонтактнаяИнформацияПолеЮрАдресОрганизации", , Отказ);
	КонецЕсли;
	
	// ИНН
	
	РезультатПроверкиИНН = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямИНН(Организация.ИНН, Ложь);
	Если ЗначениеЗаполнено(РезультатПроверкиИНН.ОписаниеОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверкиИНН.ОписаниеОшибки, , "Организация.ИНН", , Отказ);
	КонецЕсли;
	
	// Контактные данные
	
	Если Не ЗначениеЗаполнено(КонтактнаяИнформацияПолеТелефонОрганизации) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Контактный телефон'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "КонтактнаяИнформацияПолеТелефонОрганизации", , Отказ);
	ИначеЕсли Не ОрганизацииФормыКлиентСервер.ТелефонСоответствуетТребованиям(КонтактнаяИнформацияПолеТелефонОрганизации) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Корректность", НСтр("ru = 'Контактный телефон'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "КонтактнаяИнформацияПолеТелефонОрганизации", , Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КонтактнаяИнформацияПолеEmailОрганизации) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения( , , НСтр("ru = 'Email'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "КонтактнаяИнформацияПолеEmailОрганизации", , Отказ);
	ИначеЕсли Не ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(КонтактнаяИнформацияПолеEmailОрганизации) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Корректность", НСтр("ru = 'Email'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "КонтактнаяИнформацияПолеEmailОрганизации", , Отказ);
	КонецЕсли;
	
	// СтандартныеПодсистемы.КонтактнаяИнформация
	УправлениеКонтактнойИнформацией.ОбработкаПроверкиЗаполненияНаСервере(ЭтотОбъект, Организация, Отказ);
	// Конец СтандартныеПодсистемы.КонтактнаяИнформация
	
	// Способ подачи документов
	Если Не ЗначениеЗаполнено(СпособПодачиДокументов) Тогда
		ТекстСообщения = НСтр("ru = 'Не выбран способ подачи документов'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "СпособПодачиДокументов", , Отказ);
	КонецЕсли;
	
	Если СпособПодачиДокументов = "ИФНСпредставитель" 
		И Не ЗначениеЗаполнено(РегистрацияВНалоговомОргане.Представитель) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Представитель не заполнен!'"),, "ПредставлениеПредставителя", , Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	РегистрацияОрганизацииКлиент.ОбработатьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если НавигацияПараметрФормы = "Документы" Тогда
		ИзменитьЭтап(3);
	Иначе
		ИзменитьЭтап(1);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ФамилияИППриИзменении(Элемент)
	
	ФИОПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяИППриИзменении(Элемент)
	
	ФИОПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчествоИППриИзменении(Элемент)
	
	ФИОПриИзменении();
	ОрганизацииФормыКлиентСервер.ОпределитьПолПоОтчеству(ФизическоеЛицо.Пол, Организация.ОтчествоИП);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеЮрАдресОрганизацииНажатие(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(
		ЭтотОбъект,
		Элемент,
		Модифицированность,
		СтандартнаяОбработка,
		Новый Структура("Заголовок", НСтр("ru = 'Адрес по прописке'")));
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеТелефонОрганизацииПриИзменении(Элемент)
	
	ОрганизацииФормыКлиентСервер.ТелефонПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеТелефонОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеEmailОрганизацииПриИзменении(Элемент)
	
	КонтактнаяИнформацияПолеEmailОрганизации = СокрЛП(КонтактнаяИнформацияПолеEmailОрганизации);
	Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияПолеEmailОрганизацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, Модифицированность, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактнаяИнформацияРасширеннаяПодсказкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ОбразецЗаявленияОРегистрацииИПЛистБ" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Обработка.РегистрацияОрганизации.Форма.ОбразецЗаявленияОРегистрацииИПЛистБ", , ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СерияНомерПаспортаПриИзменении(Элемент)
	
	МассивПодстрок = СтрРазделить(СерияНомерПаспорта, " ", Истина);
	
	Если МассивПодстрок.Количество() = 3 Тогда
		ПаспортныеДанные.Номер = МассивПодстрок[2];
		МассивПодстрок.Удалить(2);
	Иначе
		ПаспортныеДанные.Номер = "";
	КонецЕсли;
	
	ПаспортныеДанные.Серия = СтрСоединить(МассивПодстрок, " ");
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументыФизическихЛицДатаВыдачиПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ПаспортныеДанные.Период) И ЗначениеЗаполнено(ПаспортныеДанные.ДатаВыдачи) Тогда
		ПаспортныеДанные.Период = ПаспортныеДанные.ДатаВыдачи;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИННПриИзменении(Элемент)
	
	Организация.ИНН = СокрЛП(Организация.ИНН);
	
	ФизическоеЛицо.ИНН = Организация.ИНН;
	
	ИННОбработатьИзменение();
	
КонецПроцедуры

&НаКлиенте
Процедура УзнатьИНННажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОчиститьСообщения();
	
	Отказ = Ложь;
	ПроверитьЗаполнениеПаспортныхДанных(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ДанныеФизическогоЛица", ДанныеИндивидуальногоПредпринимателя());
	
	ОткрытьФорму("Обработка.РегистрацияОрганизации.Форма.УзнатьИНН", ПараметрыФормы, Элементы.ИНН);
	
КонецПроцедуры

&НаКлиенте
Процедура РегистрирующийОрганАдресПереходНаКартуНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформациейКлиентБП.ПоказатьНаКартеНажатие(ЭтотОбъект, Элемент, РегистрирующийОрганАдрес);
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяИнспекцияАдресНаКартеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформациейКлиентБП.ПоказатьНаКартеНажатие(ЭтотОбъект, Элемент, НалоговаяИнспекцияАдрес);
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаНаАдресИФНСНаКартеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформациейКлиентБП.ПоказатьНаКартеНажатие(ЭтотОбъект, Элемент, РегистрирующийОрганАдрес);
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаАдресМФЦНаКартеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьНаКартеБлижайшийМФЦ(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура УплатаГоспошлиныОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОрганизацииФормыКлиент.ПерейтиКСервисуСкачатьКвитанциюНаОплатуГоспошлиныПриРегистрации();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЗаявлениеОРегистрацииИПНажатие(Элемент)
	
	ЗаявлениеРегистрацияИП();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаУведомлениеОПереходеНаУСННажатие(Элемент)
	
	УведомлениеОПереходенНаУСН();
	
КонецПроцедуры

&НаКлиенте
Процедура КартинкаЗаявлениеНаПолучениеПатентаНажатие(Элемент)
	
	ЗаявлениеПолучениеПатента();
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаИнструкцияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ИнструкцияРегистрацияИП();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособПодачиДокументовПриИзменении(Элемент)
	
	Элементы.ПредставлениеПредставителя.Видимость = СпособПодачиДокументов = "ИФНСпредставитель";
	
	Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане.Представитель) Тогда
		Для Каждого ТекРеквизит Из РеквизитыПредставителя Цикл
			РегистрацияВНалоговомОргане[ТекРеквизит.Значение] = Неопределено;
		КонецЦикла;
	КонецЕсли;
	
	ПредставлениеПредставителя = НСтр("ru = 'Заполнить'");
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПредставителяНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗначенияЗаполнения = Новый Структура(
		"Владелец,Представитель,УполномоченноеЛицоПредставителя,ДокументПредставителя,Доверенность");
	
	ЗаполнитьЗначенияСвойств(ЗначенияЗаполнения, РегистрацияВНалоговомОргане);
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ПараметрыФормы.Вставить("СкрытьДоверенностьЭДО", Истина);
	ПараметрыФормы.Вставить("ИмяФормы", "Справочник.РегистрацииВНалоговомОргане.Форма.ФормаПредставителяСервисеРегистрации");
	ОткрытьФорму("Справочник.РегистрацииВНалоговомОргане.Форма.ФормаПредставителя",
		ПараметрыФормы, ЭтотОбъект, КлючУникальности);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьДокументы(Команда)
	
	Если Организация.Ссылка.Пустая() Или Модифицированность Тогда
		
		ДлительнаяОперация = ЗаписатьДанныеВФоне();
		
		Если ДлительнаяОперация = Неопределено Тогда
			// Ошибка проверки заполнения.
			Возврат;
		КонецЕсли;
		
		Если ДлительнаяОперация.Статус = "Ошибка" Тогда
			
			ПоказатьОшибкуФормированияДокументов(ДлительнаяОперация);
			
		Иначе
			
			ИзменитьЭтап(2);
			
			НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
			НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
			
			Обработчик = Новый ОписаниеОповещения("ПослеЗавершенияФоновогоЗаданияФормированияДокументов", ЭтотОбъект);
			
			ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
			
		КонецЕсли;
		
	Иначе
		ИзменитьЭтап(3);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьДанныеВФоне()
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Формирование документов для регистрации организации'");
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	
	ПараметрыФормированияДокументов = ПараметрыФормированияДокументов();
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("Обработки.РегистрацияОрганизации.СформироватьДокументыИПВФоне", ПараметрыФормированияДокументов, НастройкиЗапуска);
	
КонецФункции

&НаСервере
Функция ПараметрыФормированияДокументов()
	// Все реквизиты, которые выведены на форму необходимо
	// перенести в структуру для передачи в фоновое задание.
	
	ПараметрыФормированияДокументов = Новый Структура;
	
	// Организация
	ДанныеОрганизации = Новый Структура();
	ДанныеОрганизации.Вставить("Ссылка",                        Организация.Ссылка);
	ДанныеОрганизации.Вставить("ЮридическоеФизическоеЛицо",     Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	ДанныеОрганизации.Вставить("ИндивидуальныйПредприниматель", ДанныеИндивидуальногоПредпринимателя());
	ДанныеОрганизации.Вставить("КодОКВЭД2",                     Организация.КодОКВЭД2);
	ДанныеОрганизации.Вставить("НаименованиеОКВЭД2",            Организация.НаименованиеОКВЭД2);
	ДанныеОрганизации.Вставить("ДополнительныеКодыОКВЭД2",      Организация.ДополнительныеКодыОКВЭД2);
	
	ДанныеОрганизации.Вставить("УчетнаяПолитика",           ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(СтруктураУчетнойПолитики));
	
	ДанныеОрганизации.Вставить("ДанныеРегистрацииВНалоговомОргане", ДанныеРегистрацииВНалоговомОргане());
	
	ПараметрыФормированияДокументов.Вставить("ДанныеОрганизации", ДанныеОрганизации);
	ПараметрыФормированияДокументов.Вставить("СпособРегистрации", СпособРегистрации(СпособПодачиДокументов));
	ПараметрыФормированияДокументов.Вставить("СпособПодачиДокументов", СпособПодачиДокументов);
	ПараметрыФормированияДокументов.Вставить("ДатаСоставления", ДатаСозданияЗаявления);
	ПараметрыФормированияДокументов.Вставить("Представитель", РегистрацияВНалоговомОргане.Представитель);
	ПараметрыФормированияДокументов.Вставить("ДокументПредставителя", РегистрацияВНалоговомОргане.ДокументПредставителя);
	ПараметрыФормированияДокументов.Вставить("ЗаявлениеПатент", ПодаетсяЗаявлениеНаПолучениеПатента(СтруктураУчетнойПолитики));
	
	Возврат ПараметрыФормированияДокументов;
	
КонецФункции

&НаСервере
Функция ДанныеИндивидуальногоПредпринимателя()
	
	ДанныеИндивидуальногоПредпринимателя = Обработки.РегистрацияОрганизации.НовыеДанныеФизическогоЛица();
	ДанныеИндивидуальногоПредпринимателя.Ссылка                     = ФизическоеЛицо.Ссылка;
	ДанныеИндивидуальногоПредпринимателя.Фамилия                    = Организация.ФамилияИП;
	ДанныеИндивидуальногоПредпринимателя.Имя                        = Организация.ИмяИП;
	ДанныеИндивидуальногоПредпринимателя.Отчество                   = Организация.ОтчествоИП;
	ДанныеИндивидуальногоПредпринимателя.Пол                        = ФизическоеЛицо.Пол;
	ДанныеИндивидуальногоПредпринимателя.ИНН                        = Организация.ИНН;
	ДанныеИндивидуальногоПредпринимателя.ДатаРождения               = ФизическоеЛицо.ДатаРождения;
	ДанныеИндивидуальногоПредпринимателя.МестоРожденияПредставление = ФизическоеЛицо.МестоРожденияПредставление;
	
	ДанныеИндивидуальногоПредпринимателя.АдресПропискиЗначениеJSON  =
		ЗначениеJSONКонтактнойИнформации(ЭтотОбъект, Элементы.КонтактнаяИнформацияПолеЮрАдресОрганизации);
	ДанныеИндивидуальногоПредпринимателя.ТелефонРабочийЗначениеJSON =
		ЗначениеJSONКонтактнойИнформации(ЭтотОбъект, Элементы.КонтактнаяИнформацияПолеТелефонОрганизации);
	ДанныеИндивидуальногоПредпринимателя.EMailЗначениеJSON          = 
		ЗначениеJSONКонтактнойИнформации(ЭтотОбъект, Элементы.КонтактнаяИнформацияПолеEmailОрганизации);
		
	СерияИНомерПаспорта = ОрганизацииФормы.СерияНомерПаспортаРаздельно(СерияНомерПаспорта);
	
	ДанныеИндивидуальногоПредпринимателя.ПаспортныеДанные.Серия            = СерияИНомерПаспорта.Серия;
	ДанныеИндивидуальногоПредпринимателя.ПаспортныеДанные.Номер            = СерияИНомерПаспорта.Номер;
	ДанныеИндивидуальногоПредпринимателя.ПаспортныеДанные.КемВыдан         = ПаспортныеДанные.КемВыдан;
	ДанныеИндивидуальногоПредпринимателя.ПаспортныеДанные.ДатаВыдачи       = ПаспортныеДанные.ДатаВыдачи;
	ДанныеИндивидуальногоПредпринимателя.ПаспортныеДанные.КодПодразделения = ПаспортныеДанные.КодПодразделения;
	
	Возврат ДанныеИндивидуальногоПредпринимателя;
	
КонецФункции

&НаСервере
Функция ДанныеРегистрацииВНалоговомОргане()
	
	ДанныеРегистрацииВНалоговомОргане = Обработки.РегистрацияОрганизации.НовыеДанныеРегистрацииВНалоговомОргане();
	АдресПропискиЗначениеПолей = ЗначениеJSONКонтактнойИнформации(ЭтотОбъект, Элементы.КонтактнаяИнформацияПолеЮрАдресОрганизации);
	
	СведенияОНалоговомОргане = СведенияОНалоговомОрганеПоАдресу(АдресПропискиЗначениеПолей);
	Если СведенияОНалоговомОргане <> Неопределено И ЗначениеЗаполнено(СведенияОНалоговомОргане.КодНалоговогоОргана) Тогда
		ДанныеРегистрацииВНалоговомОргане.КодНалоговогоОргана = СведенияОНалоговомОргане.КодНалоговогоОргана;
		ДанныеРегистрацииВНалоговомОргане.КодПоОКТМО          = СведенияОНалоговомОргане.КодПоОКТМО;
		ДанныеРегистрацииВНалоговомОргане.КодПоОКАТО          = СведенияОНалоговомОргане.КодПоОКАТО;
	КонецЕсли;
	
	Для Каждого ТекРеквизит Из РеквизитыПредставителя Цикл
		ДанныеРегистрацииВНалоговомОргане.Вставить(ТекРеквизит.Значение, РегистрацияВНалоговомОргане[ТекРеквизит.Значение]);
	КонецЦикла;
	
	Возврат ДанныеРегистрацииВНалоговомОргане;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьРеквизитыОрганизации(Команда)
	
	ИзменитьЭтап(1);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьРаботу(Команда)
	
	ПодготовитьНачалоРаботы();
	ОбновитьИнтерфейс();
	ОповеститьОЗавершенииПомощникаНачалаРаботы();
	
	ОткрытьФормуНачалаРаботы();
	
КонецПроцедуры

&НаКлиенте
Процедура АдресИРеквизитыВашейИнспекции(Команда)
	
	ОрганизацииФормыКлиент.ПерейтиКСервисуОпределитьРеквизитыИФНС();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявлениеОРегистрацииИП(Команда)
	
	ЗаявлениеРегистрацияИП();
	
КонецПроцедуры

&НаКлиенте
Процедура УведомлениеУСН(Команда)
	
	УведомлениеОПереходенНаУСН();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявлениеНаПолучениеПатента(Команда)
	
	ЗаявлениеПолучениеПатента();
	
КонецПроцедуры

&НаКлиенте
Процедура КвитанцияНаОплатуГоспошлиныНажатие(Элемент)
	
	АдресХранилища = КвитанцияНаОплатуГоспошлины(Организация.Ссылка);
	
	ИмяФайла = НСтр("ru='Квитанция на оплату госпошлины.pdf'");
	
	Если АдресХранилища <> Неопределено Тогда
		ПолучитьФайл(АдресХранилища, ИмяФайла, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьБлижайшийМФЦ(Команда)
	
	ПоказатьНаКартеБлижайшийМФЦ(Элементы.ПоказатьБлижайшийМФЦ);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	РегистрацияОрганизацииКлиент.ОткрытьЭтап(НавигацияНомерШага - 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ХочуКонсультацию(Команда)
	
	ОткрытьФорму("Обработка.РегистрацияОрганизации.Форма.ФормаХочуКонсультацию");
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	ЕстьУведомлениеУСН = ПодаетсяУведомлениеОПереходеНаУСН(Форма.СтруктураУчетнойПолитики);
	ЕстьПатент = ПодаетсяЗаявлениеНаПолучениеПатента(Форма.СтруктураУчетнойПолитики);
	
	РегистрацияЧерезМФЦ = (Форма.СпособПодачиДокументов = РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов().МФЦлично);
	РегистрацияЧерезМФЦСпецрежим = РегистрацияЧерезМФЦ И (ЕстьУведомлениеУСН Или ЕстьПатент);
	
	ОпределенРегистрирующийОрган = ЗначениеЗаполнено(Форма.РегистрирующийОрганНаименование);
	
	Элементы.РегистрирующаяНалоговая.Видимость = ОпределенРегистрирующийОрган И Не РегистрацияЧерезМФЦ;
	Элементы.АдресИРеквизитыВашейИнспекции.Видимость = Не ОпределенРегистрирующийОрган И Не РегистрацияЧерезМФЦ;
	Элементы.ПоказатьБлижайшийМФЦ.Видимость = РегистрацияЧерезМФЦ;
	
	Элементы.РегистрирующийОрганИнформация.Видимость   = Не ПустаяСтрока(Форма.РегистрирующийОрганИнформация);
	
	Элементы.ГруппаУведомлениеОПереходеНаУСН.Видимость   = ЕстьУведомлениеУСН;
	
	Если ЕстьУведомлениеУСН Тогда
		ТекстПодсказкиМФЦлично = НСтр("ru = 'Заявление о регистрации подается лично в МФЦ.
			|После регистрации в течение 30 дней нужно подать уведомление о переходе на УСН в Налоговую инспекцию.'");
	Иначе
		ТекстПодсказкиМФЦлично = НСтр("ru = 'Документы подаются лично в МФЦ'");
	КонецЕсли;
	Элементы.ГруппаМФЦлично.Подсказка = ТекстПодсказкиМФЦлично;
	
	Элементы.УслугаКонсультации.Видимость = ОказываютсяУслугиКонсультации();
	
	Элементы.ИнструкцияУплатаГоспошлиныСКвитанциейИФНС.Видимость = Не РегистрацияЧерезМФЦ;
	Элементы.ИнструкцияУплатаГоспошлиныСКвитанциейМФЦ.Видимость = РегистрацияЧерезМФЦ;
	Элементы.ИнструкцияУплатаГоспошлиныИФНС.Видимость = Не РегистрацияЧерезМФЦ;
	Элементы.ИнструкцияУплатаГоспошлиныМФЦ.Видимость = РегистрацияЧерезМФЦ;
	Элементы.ЗаголовокПодачаДокументовИФНС.Видимость = Не РегистрацияЧерезМФЦ;
	Элементы.ЗаголовокПодачаДокументовМФЦ.Видимость = РегистрацияЧерезМФЦ;
	
	Элементы.Инструкция.Видимость = Не РегистрацияЧерезМФЦСпецрежим;
	Элементы.ИнструкцияСпецрежимМФЦ.Видимость = РегистрацияЧерезМФЦСпецрежим;
	Элементы.ГруппаПодачаУведомлений.Видимость = РегистрацияЧерезМФЦСпецрежим;
	Элементы.ПодачаДокументовСпецрежимМФЦ.Видимость = РегистрацияЧерезМФЦСпецрежим;
	Элементы.ПодачаУведомленияУСН.Видимость = Не ЕстьПатент;
	Элементы.ПодачаУведомленияУСНПатент.Видимость = ЕстьПатент;
	Элементы.НалоговаяИнспекция.Видимость = ЗначениеЗаполнено(Форма.НалоговаяИнспекцияНаименование);
	Элементы.ПодачаУведомленийАдресИРеквизитыВашейИнспекции.Видимость =
		Не ЗначениеЗаполнено(Форма.НалоговаяИнспекцияНаименование);
	
	УведомлениеОСпецРежимеНалогообложения = НайтиЗаявлениеПолучениеПатента(
		Форма.Организация.Ссылка, Форма.СтруктураУчетнойПолитики);
		
	Форма.Элементы.ГруппаЗаявлениеНаПолучениеПатента.Видимость = УведомлениеОСпецРежимеНалогообложения <> Неопределено
		И ЗначениеЗаполнено(УведомлениеОСпецРежимеНалогообложения.Ссылка);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОказываютсяУслугиКонсультации()
	
	Возврат Обработки.РегистрацияОрганизации.ОказываютсяУслугиКонсультации();
	
КонецФункции

&НаКлиенте
Процедура ЗаявлениеРегистрацияИП()
	
	ЗаявлениеОРегистрации = НайтиЗаявлениеОРегистрации(Организация.Ссылка);
	
	Если ЗаявлениеОРегистрации<> Неопределено И ЗначениеЗаполнено(ЗаявлениеОРегистрации.Ссылка) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", ЗаявлениеОРегистрации.Ссылка);
		ПараметрыФормы.Вставить("Организация", Организация.Ссылка);
		
		ФормаОтчета = ПолучитьФорму(ЗаявлениеОРегистрации.ИмяФормы, ПараметрыФормы, ЭтотОбъект, Организация.Ссылка);
		РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФормуУведомленияОСпецрежимах(ФормаОтчета);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Заявление о регистрации не создано.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИнструкцияРегистрацияИП()
	
	ДанныеРегистрирующегоОргана = Новый Структура;
	ДанныеРегистрирующегоОргана.Вставить("НаименованиеФНС", РегистрирующийОрганНаименование);
	ДанныеРегистрирующегоОргана.Вставить("АдресФНС",        РегистрирующийОрганАдрес);
	ДанныеРегистрирующегоОргана.Вставить("ТелефонФНС",      РегистрирующийОрганТелефон);
	
	ДанныеНалоговойИнспекции = Новый Структура;
	ДанныеНалоговойИнспекции.Вставить("НаименованиеФНС", НалоговаяИнспекцияНаименование);
	ДанныеНалоговойИнспекции.Вставить("АдресФНС",        НалоговаяИнспекцияАдрес);
	ДанныеНалоговойИнспекции.Вставить("ТелефонФНС",      НалоговаяИнспекцияТелефон);
	
	Инструкция = ИнструкцияРегистрацияИПНаСервере(СпособПодачиДокументов, ДанныеРегистрирующегоОргана, ДанныеНалоговойИнспекции, СтруктураУчетнойПолитики);
	
	ВывестиИнструкцию(Инструкция);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПоместитьИнструкциюВоВременноеХранилищеНаСервере(Инструкция)
	
	АдресХранилища = Неопределено;
	ИмяФайла       = ПолучитьИмяВременногоФайла("pdf");
	
	Попытка
		Инструкция.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.PDF);
		АдресХранилища = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайла));
		УдалитьФайлы(ИмяФайла);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Запись инструкции по регистрации во временный файл'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат АдресХранилища;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИнструкцияРегистрацияИПНаСервере(СпособПодачиДокументов, ДанныеРегистрирующегоОргана, ДанныеНалоговойИнспекции, СтруктураУчетнойПолитики)
	
	ВыборСпецрежимаНалогообложения = Новый Структура;
	ВыборСпецрежимаНалогообложения.Вставить("УСН",    ПодаетсяУведомлениеОПереходеНаУСН(СтруктураУчетнойПолитики));
	ВыборСпецрежимаНалогообложения.Вставить("Патент", ПодаетсяЗаявлениеНаПолучениеПатента(СтруктураУчетнойПолитики));
	
	Возврат Обработки.РегистрацияОрганизации.ИнструкцияРегистрацияИП(
		СпособПодачиДокументов, ВыборСпецрежимаНалогообложения, ДанныеРегистрирующегоОргана, ДанныеНалоговойИнспекции);
	
КонецФункции

&НаКлиенте
Процедура УведомлениеОПереходенНаУСН()
	
	УведомлениеОСпецРежимеНалогообложения = НайтиУведомлениеОПереходеНаУСН(Организация.Ссылка, СтруктураУчетнойПолитики);
	Если УведомлениеОСпецРежимеНалогообложения = Неопределено Тогда
		// Не требуется
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УведомлениеОСпецРежимеНалогообложения.Ссылка) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", УведомлениеОСпецРежимеНалогообложения.Ссылка);
		ПараметрыФормы.Вставить("Организация", Организация.Ссылка);
		
		ФормаОтчета = ПолучитьФорму(УведомлениеОСпецРежимеНалогообложения.ИмяФормы, ПараметрыФормы, ЭтотОбъект, Организация.Ссылка);
		РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФормуУведомленияОСпецрежимах(ФормаОтчета);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Уведомление о переходе на УСН не создано'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Уведомление");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция КвитанцияНаОплатуГоспошлины(Знач ОрганизацияСсылка)
	
	Возврат Обработки.РегистрацияОрганизации.КвитанцияНаОплатуГоспошлины(ОрганизацияСсылка);
	
КонецФункции

&НаКлиенте
Процедура ЗаявлениеПолучениеПатента()
	
	УведомлениеОСпецРежимеНалогообложения = НайтиЗаявлениеПолучениеПатента(Организация.Ссылка, СтруктураУчетнойПолитики);
	Если УведомлениеОСпецРежимеНалогообложения = Неопределено Тогда
		// Не требуется
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УведомлениеОСпецРежимеНалогообложения.Ссылка) Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", УведомлениеОСпецРежимеНалогообложения.Ссылка);
		ПараметрыФормы.Вставить("Организация", Организация.Ссылка);
		
		ФормаОтчета = ПолучитьФорму(УведомлениеОСпецРежимеНалогообложения.ИмяФормы,
			ПараметрыФормы, ЭтотОбъект, Организация.Ссылка);
		РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФормуУведомленияОСпецрежимах(ФормаОтчета);
		Возврат;
		
	КонецЕсли;
	
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Организация", Организация.Ссылка);
	Если СпособПодачиДокументов = РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов().ИФНСпредставитель Тогда
		ПараметрыЗаполнения.Вставить("ПризнакПодписанта", "2");
	Иначе
		ПараметрыЗаполнения.Вставить("ПризнакПодписанта", "1");
		ПараметрыЗаполнения.Вставить("НомерТелефонаПодписанта", КонтактнаяИнформацияПолеТелефонОрганизации);
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", УведомлениеОСпецРежимеНалогообложения.Ссылка);
	ПараметрыФормы.Вставить("Организация", Организация.Ссылка);
	ПараметрыФормы.Вставить("СформироватьФормуОтчетаАвтоматически", Истина);
	ПараметрыФормы.Вставить("ПараметрыЗаполнения", ПараметрыЗаполнения);
	
	ОткрытьФорму(УведомлениеОСпецРежимеНалогообложения.ИмяФормы, ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере()
	
	ДанныеПомощникаРегистрации = Обработки.РегистрацияОрганизации.ДанныеПомощникаРегистрации();
	
	// Восстановим ссылку на организацию
	ОрганизацияСсылка = ДанныеПомощникаРегистрации.Заявление.Ссылка;
	ПрочитатьДанныеОрганизации(ОрганизацияСсылка);
	// Если на предыдущих этапах, что-то было изменено, то установим модифицированность у формы.
	Если ЗначениеЗаполнено(ОрганизацияСсылка) И ДанныеПомощникаРегистрации.Модифицированность Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	Элементы.УзнатьИНН.Видимость = Обработки.РегистрацияОрганизации.СервисУзнатьИННДоступен();
	УзнатьИНН = НСтр("ru = 'Узнать ИНН'");
	
	// Установим данные ОКВЭД
	ВидДеятельности = ДанныеПомощникаРегистрации.ВидДеятельности;
	Если Организация.КодОКВЭД2 <> ВидДеятельности.ОсновнойКод Тогда
		Организация.КодОКВЭД2 = ВидДеятельности.ОсновнойКод;
	КонецЕсли;
	Если Организация.НаименованиеОКВЭД2 <> ВидДеятельности.ОсновноеНаименование Тогда
		Организация.НаименованиеОКВЭД2 = ВидДеятельности.ОсновноеНаименование;
	КонецЕсли;
	Если Организация.ДополнительныеКодыОКВЭД2 <> ВидДеятельности.ДополнительныеКоды Тогда
		Организация.ДополнительныеКодыОКВЭД2 = ВидДеятельности.ДополнительныеКоды;
	КонецЕсли;
	
	// Установим учетную политику
	ОрганизацииФормы.ПрочитатьУчетнуюПолитику(ЭтотОбъект, Организация.Ссылка);
	СохраненнаяСтруктураУчетнойПолитики = ДанныеПомощникаРегистрации.Налоги.СтруктураУчетнойПолитики;
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураУчетнойПолитики, СохраненнаяСтруктураУчетнойПолитики, Истина);
	
	ПрочитатьДанныеЗаявления();
	ПрочитатьФизическоеЛицо();
	
	ИнициализироватьРеквизитыПредставителя();
	Если ДатаСозданияЗаявления = '00010101' Тогда
		ДатаСозданияЗаявления = ТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеОрганизации(ОрганизацияСсылка)
	
	Если ТипЗнч(ОрганизацияСсылка) = Тип("СправочникСсылка.Организации")
		И ОбщегоНазначения.СсылкаСуществует(ОрганизацияСсылка) Тогда
		ОрганизацияОбъект = ОрганизацияСсылка.ПолучитьОбъект();
		// СтандартныеПодсистемы.КонтактнаяИнформация
		УправлениеКонтактнойИнформацией.ПриЧтенииНаСервере(ЭтотОбъект, ОрганизацияОбъект);
		// Конец СтандартныеПодсистемы.КонтактнаяИнформация
		ЗначениеВРеквизитФормы(ОрганизацияОбъект, "Организация");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьЭтап(НомерЭтапа)
	
	Если НомерЭтапа = 1 Тогда
		
		Если Не ЗначениеЗаполнено(Организация.КодНалоговогоОргана) Тогда
			ОпределитьКодНалоговогоОргана();
		КонецЕсли;
		ОпределитьРегистрирующийОрган();
		
		Если Не ЗначениеЗаполнено(КонтактнаяИнформацияПолеEmailОрганизации)
			И Не ЗначениеЗаполнено(КонтактнаяИнформацияПолеТелефонОрганизации) Тогда
			ПрочитатьКонтактнуюИнформациюПользователя();
		КонецЕсли;
		
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаВводДанных;
		Элементы.СформироватьДокументы.КнопкаПоУмолчанию = Истина;
		
		ОбновитьПредставлениеПредставителя();
		
	ИначеЕсли НомерЭтапа = 2 Тогда
		
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаОжидание;
		
	ИначеЕсли НомерЭтапа = 3 Тогда
		
		ОпределитьРегистрирующийОрган();
		ОпределитьТерриториальнуюНалоговуюИнспекцию();
		
		КвитанцияОбОплатеГоспошлины = 
			Обработки.РегистрацияОрганизации.ПрисоединенныйФайлКвитанцииНаОплатуГоспошлиныОрганизации(Организация.Ссылка);
		КвитанцияОбОплатеГоспошлиныПолучена = КвитанцияОбОплатеГоспошлины <> Неопределено
							И НЕ ОбщегоНазначения.ЗначениеРеквизитаОбъекта(КвитанцияОбОплатеГоспошлины, "ПометкаУдаления");
		
		Элементы.ГруппаИнструкцииПоОплатеГоспошлиныБезКвитанции.Видимость = Не КвитанцияОбОплатеГоспошлиныПолучена;
		Элементы.ГруппаИнструкцииПоОплатеГоспошлиныСКвитанцией.Видимость  = КвитанцияОбОплатеГоспошлиныПолучена;
		
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницаРегистрация;
		Элементы.НачатьРаботу.КнопкаПоУмолчанию = Истина;
		
		УстановитьВидимостьБаннераНачалоРаботы();
		
		ТекущийЭлемент = Элементы.ХочуКонсультацию;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
	ТекущийЭтап = НомерЭтапа;
	
	РазместитьНавигациюНаСервере();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодаетсяУведомлениеОПереходеНаУСН(СтруктураУчетнойПолитики)
	
	Возврат Обработки.РегистрацияОрганизации.ПодаетсяУведомлениеОПереходеНаУСН(СтруктураУчетнойПолитики);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПодаетсяЗаявлениеНаПолучениеПатента(СтруктураУчетнойПолитики)
	
	Если СтруктураУчетнойПолитики <> Неопределено
		И СтруктураУчетнойПолитики.Свойство("ПрименяетсяУСНПатент")
		И СтруктураУчетнойПолитики.ПрименяетсяУСНПатент Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьЗначенияПоУмолчанию()
	
	Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	СпособПодачиДокументов = РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов().ИФНСлично;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КонтактнаяИнформацияПолеЮрАдресОрганизации");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"КонтактнаяИнформацияПолеЮрАдресОрганизации",
		ВидСравненияКомпоновкиДанных.Равно,
		УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки());
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненныйРеквизит);
	
КонецПроцедуры

&НаКлиенте
Процедура ФИОПриИзменении()
	
	ОрганизацииФормыКлиент.ФИОПриИзменении(Организация);
	
	Если Не Организация.ИндивидуальныйПредприниматель.Пустая() Тогда
		// Изменяется существующий элемент справочника
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Организация.ФамилияИП) Или ПустаяСтрока(Организация.ИмяИП) Тогда
		// Искать физическое лицо рано
		Возврат;
	КонецЕсли;
	
	Фамилия = Организация.ФамилияИП;
	Имя = Организация.ИмяИП;
	Отчество = Организация.ОтчествоИП;
	
	ИндивидуальныйПредприниматель = НайтиФизическоеЛицо(Фамилия, Имя, Отчество, Организация.ИНН);
	
	Если ЗначениеЗаполнено(ИндивидуальныйПредприниматель) Тогда
		
		Организация.ИндивидуальныйПредприниматель = ИндивидуальныйПредприниматель;
		ПрочитатьФизическоеЛицо();
		
		Если ПустаяСтрока(Организация.ИНН) Тогда
			
			Организация.ИНН = ФизическоеЛицо.ИНН;
			ИННОбработатьИзменение();
			
			// Восстановим ФИО, если различаются
			Организация.ФамилияИП = Фамилия;
			Организация.ИмяИП = Имя;
			Организация.ОтчествоИП = Отчество;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИННОбработатьИзменение()
	
	ПроверитьСоответствиеТребованиямИНН();
	
	Если Не Организация.Ссылка.Пустая() Тогда
		// Изменяется существующий элемент справочника
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Организация.ИНН) Тогда
		Возврат;
	КонецЕсли;
	
	ОрганизацияСсылка = НайтиОрганизацию(Организация.ИНН);
	Если ЗначениеЗаполнено(ОрганизацияСсылка) Тогда
		УстановитьОрганизацию(ОрганизацияСсылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСоответствиеТребованиямИНН()
	
	РезультатПроверки = ИдентификационныеНомераНалогоплательщиков.ПроверитьСоответствиеТребованиямИНН(Организация.ИНН, Ложь);
	
	Если ЗначениеЗаполнено(РезультатПроверки.ОписаниеОшибки) Тогда
		ЦветВыделенияНекорректногоЗначения = ОбщегоНазначенияКлиент.ЦветСтиля("ЦветВыделенияКонтрагентаСОшибкой");
		НадписьПоясненияНекорректногоИНН   = Новый ФорматированнаяСтрока(РезультатПроверки.ОписаниеОшибки, , ЦветВыделенияНекорректногоЗначения);
	Иначе
		НадписьПоясненияНекорректногоИНН  = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиФизическоеЛицо(Знач Фамилия, Знач Имя, Знач Отчество = "", Знач ИНН = "")
	
	Возврат Справочники.Организации.ФизическоеЛицо(Фамилия, Имя, Отчество, ИНН);
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиОрганизацию(Знач ИНН = "")
	
	Если ПустаяСтрока(ИНН) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИНН", ИНН);
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ИНН = &ИНН
	|	И НЕ Организации.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьОрганизацию(ОрганизацияСсылка)
	
	ДанныеПомощникаРегистрации = Обработки.РегистрацияОрганизации.ДанныеПомощникаРегистрации();
	ДанныеПомощникаРегистрации.Заявление.Ссылка = ОрганизацияСсылка;
	
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьКонтактнуюИнформациюПользователя()
	
	// Получим контактные данные пользователя
	
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	Если ЗначениеЗаполнено(ТекущийПользователь) Тогда
		
		МассивПользователей = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТекущийПользователь);
		МассивВидовКИ = Новый Массив;
		МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.EmailПользователя);
		МассивВидовКИ.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонПользователя);
		ТаблицаКонтактнойИнформации = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъектов(МассивПользователей, , МассивВидовКИ);
		Для Каждого СтрокаКонтактнойИнформции Из ТаблицаКонтактнойИнформации Цикл
			
			Если СтрокаКонтактнойИнформции.Вид = Справочники.ВидыКонтактнойИнформации.EmailПользователя
				И Не ЗначениеЗаполнено(КонтактнаяИнформацияПолеEmailОрганизации) Тогда
				
				КонтактнаяИнформацияПолеEmailОрганизации = СтрокаКонтактнойИнформции.Представление;
				НайденныеСтроки = КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(
					Новый Структура("ИмяРеквизита", "КонтактнаяИнформацияПолеEmailОрганизации"));
				Если НайденныеСтроки <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(НайденныеСтроки[0], СтрокаКонтактнойИнформции, "Представление, Значение");
				КонецЕсли;
				
			ИначеЕсли СтрокаКонтактнойИнформции.Вид = Справочники.ВидыКонтактнойИнформации.ТелефонПользователя
				И Не ЗначениеЗаполнено(КонтактнаяИнформацияПолеТелефонОрганизации) Тогда
				
				КонтактнаяИнформацияПолеТелефонОрганизации = СтрокаКонтактнойИнформции.Представление;
				ОрганизацииФормыКлиентСервер.ТелефонПриИзменении(ЭтотОбъект, Элементы.КонтактнаяИнформацияПолеТелефонОрганизации);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьНачалоРаботы()
	
	// Установить стандартный интерфейс.
	
	Константы.НачалоРаботы.Установить(Ложь);
	
	Константы.РегистрацияНеЗавершена.Установить(Истина);
	
	УстановитьВидимостьБаннераНачалоРаботы();
	
	ОбщегоНазначенияБПВызовСервера.УстановитьСтандартныйИнтерфейс();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьБаннераНачалоРаботы()
	
	ВидимостьБаннераНачалоРаботы = Константы.НачалоРаботы.Получить();
	
	Элементы.НачалоРаботы.Видимость = ВидимостьБаннераНачалоРаботы;
	Элементы.НачатьРаботу.КнопкаПоУмолчанию = ВидимостьБаннераНачалоРаботы;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНачалаРаботы()
	
	ОткрытьФорму("Обработка.НачалоРаботы.Форма.НачалоРаботыВСервисе");
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОЗавершенииПомощникаНачалаРаботы()
	Оповестить("ЗавершенаРаботаПомощникаНачалаРаботы", ЭтотОбъект.ИмяФормы, ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПрочитатьФизическоеЛицо()
	
	Если НЕ ЗначениеЗаполнено(Организация.ИндивидуальныйПредприниматель) Тогда
		Возврат;
	КонецЕсли;
	
	ФизическоеЛицоОбъект = Организация.ИндивидуальныйПредприниматель.ПолучитьОбъект();
	ЗначениеВРеквизитФормы(ФизическоеЛицоОбъект, "ФизическоеЛицо");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо",      Организация.ИндивидуальныйПредприниматель);
	Запрос.УстановитьПараметр("ВидДокумента", Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументыФизическихЛиц.Период КАК Период,
	|	ДокументыФизическихЛиц.ФизЛицо КАК ФизЛицо,
	|	ДокументыФизическихЛиц.ВидДокумента КАК ВидДокумента,
	|	ДокументыФизическихЛиц.Серия КАК Серия,
	|	ДокументыФизическихЛиц.Номер КАК Номер,
	|	ДокументыФизическихЛиц.ДатаВыдачи КАК ДатаВыдачи,
	|	ДокументыФизическихЛиц.СрокДействия КАК СрокДействия,
	|	ДокументыФизическихЛиц.КемВыдан КАК КемВыдан,
	|	ДокументыФизическихЛиц.КодПодразделения,
	|	ДокументыФизическихЛиц.ЯвляетсяДокументомУдостоверяющимЛичность КАК ЯвляетсяДокументомУдостоверяющимЛичность,
	|	ДокументыФизическихЛиц.Представление КАК Представление
	|ИЗ
	|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
	|			,
	|			Физлицо = &ФизЛицо
	|				И ВидДокумента = &ВидДокумента) КАК ДокументыФизическихЛиц";
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ПаспортныеДанные, Выборка);
		СерияНомерПаспорта = Выборка.Серия + " " + Выборка.Номер;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьДанныеЗаявления()
	
	ЗаявлениеОРегистрации = НайтиЗаявлениеОРегистрации(Организация.Ссылка);
	
	Если ЗаявлениеОРегистрации <> Неопределено И ЗначениеЗаполнено(ЗаявлениеОРегистрации.Ссылка) Тогда
		ДанныеУведомления = Отчеты.РегламентированноеУведомлениеФормаР21001.ДанныеУведомления(ЗаявлениеОРегистрации.Ссылка);
		ДанныеУведомления.Свойство("СпособРегистрации", СпособРегистрации);
		ДатаСозданияЗаявления = ЗаявлениеОРегистрации.Дата;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьКодНалоговогоОргана()
	
	ДанныеРегистрацииВНалоговомОргане = ДанныеРегистрацииВНалоговомОргане();
	Организация.КодНалоговогоОргана = ДанныеРегистрацииВНалоговомОргане.КодНалоговогоОргана;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьРегистрирующийОрган()
	
	РеквизитыРегистрирующегоОргана = Обработки.РегистрацияОрганизации.РеквизитыРегистрирующегоОргана(
		Организация.КодНалоговогоОргана, Ложь);
	Если РеквизитыРегистрирующегоОргана <> Неопределено Тогда
		РегистрирующийОрганНаименование = РеквизитыРегистрирующегоОргана.Наименование;
		РегистрирующийОрганТелефон      = РеквизитыРегистрирующегоОргана.Телефон;
		РегистрирующийОрганАдрес        = РеквизитыРегистрирующегоОргана.Адрес;
		РегистрирующийОрганИнформация   = РеквизитыРегистрирующегоОргана.Информация;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьТерриториальнуюНалоговуюИнспекцию()
	
	Если СпособПодачиДокументов <> РегистрацияОрганизацииКлиентСервер.СпособыПодачиДокументов().МФЦлично Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыНалоговойИнспекции =
		Обработки.РегистрацияОрганизации.РеквизитыНалоговойИнспекции(Организация.КодНалоговогоОргана);
	Если РеквизитыНалоговойИнспекции <> Неопределено Тогда
		НалоговаяИнспекцияНаименование = РеквизитыНалоговойИнспекции.Наименование;
		НалоговаяИнспекцияТелефон      = РеквизитыНалоговойИнспекции.Телефон;
		НалоговаяИнспекцияАдрес        = РеквизитыНалоговойИнспекции.Адрес;
		НалоговаяИнспекцияИнформация   = РеквизитыНалоговойИнспекции.Информация;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СведенияОНалоговомОрганеПоАдресу(Адрес)
	
	Если Не ЗначениеЗаполнено(Адрес) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СведенияОНалоговомОрганеПоАдресу = АдресныйКлассификатор.КодыАдреса(Адрес, "Сервис1С");
	
	КодНалоговогоОрганаПоАдресу = Формат(СведенияОНалоговомОрганеПоАдресу.КодИФНСФЛ, "ЧЦ=4; ЧДЦ=; ЧВН=; ЧГ=0");
	
	Если ЗначениеЗаполнено(КодНалоговогоОрганаПоАдресу) Тогда
		
		Сведения = Новый Структура();
		Сведения.Вставить("КодНалоговогоОргана", КодНалоговогоОрганаПоАдресу);
		Сведения.Вставить("КодПоОКТМО", Формат(СведенияОНалоговомОрганеПоАдресу.ОКТМО, "ЧДЦ=; ЧГ=0"));
		Сведения.Вставить("КодПоОКАТО", Формат(СведенияОНалоговомОрганеПоАдресу.ОКАТО, "ЧДЦ=; ЧГ=0"));
		
		Возврат Сведения;
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ПослеЗавершенияФоновогоЗаданияФормированияДокументов(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат; // Отменено
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ОбработатьРезультатВыполненияФоновогоЗаданияФормированияДокументов(ДлительнаяОперация.АдресРезультата);
		
		ОповеститьОбИзменении(Организация.Ссылка);
		ОповеститьОбИзменении(Организация.ИндивидуальныйПредприниматель);
		
	Иначе
		ПоказатьОшибкуФормированияДокументов(ДлительнаяОперация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ДанныеЗаявления()
	
	СпособРегистрации = СпособРегистрации(СпособПодачиДокументов);
	
	ДанныеЗаявления = Обработки.РегистрацияОрганизации.НовыйДанныеЗаявления();
	ДанныеЗаявления.Фамилия           = Организация.ФамилияИП;
	ДанныеЗаявления.Имя               = Организация.ИмяИП;
	ДанныеЗаявления.Отчество          = Организация.ОтчествоИП;
	ДанныеЗаявления.Пол               = Строка(ФизическоеЛицо.Пол);
	ДанныеЗаявления.ИНН               = Организация.ИНН;
	ДанныеЗаявления.Телефон           = КонтактнаяИнформацияПолеТелефонОрганизации;
	ДанныеЗаявления.Email             = КонтактнаяИнформацияПолеEmailОрганизации;
	ДанныеЗаявления.СпособРегистрации = Обработки.РегистрацияОрганизации.НазваниеСпособаРегистрации(СпособРегистрации);
	
	ДанныеЗаявления.АдресXML = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(
		ЗначениеJSONКонтактнойИнформации(ЭтотОбъект, Элементы.КонтактнаяИнформацияПолеЮрАдресОрганизации),
		,
		Перечисления.ТипыКонтактнойИнформации.Адрес);
	
	Возврат ДанныеЗаявления;
	
КонецФункции

&НаСервере
Процедура ОбработатьРезультатВыполненияФоновогоЗаданияФормированияДокументов(АдресРезультата)
	
	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	ДанныеЗаявления = ДанныеЗаявления();
	ДанныеЗаявления.Ссылка = РезультатВыполнения.Организация;
	Обработки.РегистрацияОрганизации.СохранитьДанныеЗаявления(ДанныеЗаявления);
	
	ПодготовитьФормуНаСервере();
	
	Модифицированность = Ложь;
	
	ИзменитьЭтап(3);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибкуФормированияДокументов(ДлительнаяОперация)
	
	// Если при создании документов прозошла ошибка,
	// то нужно вернуться на этап заполнения данных и вывести сообщение об ошибке.
	ИзменитьЭтап(1);
	
	Текст = НСтр("ru = 'Ошибка при формировании документов:'");
	Текст = Текст + Символы.ПС + ДлительнаяОперация.КраткоеПредставлениеОшибки;
	ВызватьИсключение Текст;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиЗаявлениеОРегистрации(Знач ОрганизацияСсылка)
	
	Возврат Обработки.РегистрацияОрганизации.НайтиЗаявлениеОРегистрации(ОрганизацияСсылка, "Р21001");
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиУведомлениеОПереходеНаУСН(Знач ОрганизацияСсылка, Знач СтруктураУчетнойПолитики)
	
	Если Не ПодаетсяУведомлениеОПереходеНаУСН(СтруктураУчетнойПолитики) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.УведомлениеОПереходеНаУСН;
	ИмяФормыПоУмолчанию = Отчеты.РегламентированноеУведомлениеПереходНаУСН.ПолучитьФормуПоУмолчанию();
	
	УведомлениеОСпецРежимеНалогообложения = Обработки.РегистрацияОрганизации.НайтиУведомлениеОСпецРежимеНалогообложения(
																	ОрганизацияСсылка, ВидУведомления, ИмяФормыПоУмолчанию);
	
	Возврат УведомлениеОСпецРежимеНалогообложения;
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиЗаявлениеПолучениеПатента(Знач ОрганизацияСсылка, Знач СтруктураУчетнойПолитики)
	
	Если Не ПодаетсяЗаявлениеНаПолучениеПатента(СтруктураУчетнойПолитики) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ВидУведомления = Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеНаПолучениеПатентаРекомендованнаяФорма;
	ИмяФормыПоУмолчанию = УчетПСНВызовСервера.ИмяФормыЗаявления(ВидУведомления);
	
	УведомлениеОСпецРежимеНалогообложения = Обработки.РегистрацияОрганизации.НайтиУведомлениеОСпецРежимеНалогообложения(
																	ОрганизацияСсылка, ВидУведомления, ИмяФормыПоУмолчанию);
	
	Возврат УведомлениеОСпецРежимеНалогообложения;
	
КонецФункции

&НаКлиенте
Процедура ВывестиИнструкцию(Инструкция)
	
	АдресХранилища = ПоместитьИнструкциюВоВременноеХранилищеНаСервере(Инструкция);
	
	ИмяФайла = "Инструкция по регистрации ИП.pdf";
	
	Попытка
		ПолучитьФайл(АдресХранилища, ИмяФайла, Истина);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось записать файл.'"));
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура РазместитьНавигациюНаСервере()
	
	Если ТекущийЭтап = 1 Тогда
		СтруктураПараметров = Новый Структура("НавигацияПараметрФормы", "Заявление");
		Обработки.РегистрацияОрганизации.РазместитьНавигацию(ЭтотОбъект, СтруктураПараметров);
		Элементы.ГруппаНавигация.Доступность = Истина;
	Иначе
		СтруктураПараметров = Новый Структура("НавигацияПараметрФормы", "Документы");
		Обработки.РегистрацияОрганизации.РазместитьНавигацию(ЭтотОбъект, СтруктураПараметров);
		Элементы.ГруппаНавигация.Доступность = (ТекущийЭтап <> 2);
	КонецЕсли;
	
КонецПроцедуры

#Область КонтактнаяИнформация

&НаКлиентеНаСервереБезКонтекста
Функция ЗначениеJSONКонтактнойИнформации(Форма, Элемент)
	
	Отбор = Новый Структура("ИмяРеквизита");
	Отбор.ИмяРеквизита = Элемент.Имя;
	ДанныеИсточника = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.НайтиСтроки(Отбор);
	Если ДанныеИсточника.Количество() > 0 Тогда
		Возврат ДанныеИсточника[0].Значение;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформациейКлиент.ПриИзменении(ЭтотОбъект, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыОткрытия = Новый Структура("Страна", Организация.СтранаРегистрации);
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент, , СтандартнаяОбработка, ПараметрыОткрытия);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияПриНажатии(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.НачалоВыбора(ЭтотОбъект, Элемент,, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОчистка(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.Очистка(ЭтотОбъект, Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияВыполнитьКоманду(Команда)
	
	УправлениеКонтактнойИнформациейКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда.Имя);
	
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ОбновитьКонтактнуюИнформацию(Результат)
	
	УправлениеКонтактнойИнформацией.ОбновитьКонтактнуюИнформацию(ЭтотОбъект, Организация, Результат);
	ПослеИзмененияКонтактнойИнформации(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.АвтоПодбор(Текст, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КонтактнаяИнформацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформациейКлиент.ОбработкаВыбора(ЭтотОбъект, ВыбранноеЗначение, Элемент.Имя, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ПослеИзмененияКонтактнойИнформации(Результат)
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Свойство("ИмяРеквизита")
		И Результат.ИмяРеквизита = "КонтактнаяИнформацияПолеЮрАдресОрганизации" Тогда
		
		ОпределитьКодНалоговогоОргана();
		ОпределитьРегистрирующийОрган();
		
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьЗаполнениеПаспортныхДанных(Отказ)
	
	ДопустимоВФИОКромеКириллицы = "-. 0123456789";
	
	Если НЕ ЗначениеЗаполнено(Организация.ФамилияИП) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Фамилия'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Организация.ФамилияИП", , Отказ);
	ИначеЕсли Не СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Организация.ФамилияИП, Истина, ДопустимоВФИОКромеКириллицы) Тогда
		ТекстСообщения = НСтр("ru = 'Фамилия заполняется на русском языке'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Организация.ФамилияИП", , Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация.ИмяИП) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Имя'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Организация.ИмяИП", , Отказ);
	ИначеЕсли Не СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Организация.ИмяИП, Истина, ДопустимоВФИОКромеКириллицы) Тогда
		ТекстСообщения = НСтр("ru = 'Имя заполняется на русском языке'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Организация.ИмяИП", , Отказ);
	КонецЕсли;
	
	Если Не СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Организация.ОтчествоИП, Истина, ДопустимоВФИОКромеКириллицы) Тогда
		ТекстСообщения = НСтр("ru = 'Отчество заполняется на русском языке'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Организация.ОтчествоИП", , Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ФизическоеЛицо.Пол) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Пол'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ФизическоеЛицо.Пол", , Отказ);
	КонецЕсли;
	
	// Паспортные данные
	
	Если Не ЗначениеЗаполнено(СерияНомерПаспорта) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Серия и номер'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "СерияНомерПаспорта", , Отказ);
	Иначе
		ЦифрыСерииНомераПаспорта = ОрганизацииФормыКлиентСервер.ТолькоЦифры(СокрЛП(СерияНомерПаспорта));
		Если СтрДлина(ЦифрыСерииНомераПаспорта) <> 10 Тогда
			ТекстСообщения = НСтр("ru = 'Серия и номер паспорта должны состоять из 10 цифр'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "СерияНомерПаспорта", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПаспортныеДанные.КемВыдан) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Кем выдан'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПаспортныеДанные.КемВыдан", , Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПаспортныеДанные.ДатаВыдачи) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Дата выдачи'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПаспортныеДанные.ДатаВыдачи", , Отказ);
	Иначе
		ПричинаОшибки = "";
		Если Не Обработки.РегистрацияОрганизации.ПаспортДействителен(ПаспортныеДанные.ДатаВыдачи, ФизическоеЛицо.ДатаРождения, ПричинаОшибки) Тогда
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Паспорт недействителен: %1'"), ПричинаОшибки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПаспортныеДанные.ДатаВыдачи", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПаспортныеДанные.КодПодразделения) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Код подразделения'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПаспортныеДанные.КодПодразделения", , Отказ);
	Иначе
		ЦифрыКодаПодразделения = ОрганизацииФормыКлиентСервер.ТолькоЦифры(СокрЛП(ПаспортныеДанные.КодПодразделения));
		Если СтрДлина(ЦифрыКодаПодразделения) <> 6 Тогда
			ТекстСообщения = НСтр("ru = 'Код подразделения должен состоять из 6 цифр'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ПаспортныеДанные.КодПодразделения", , Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ФизическоеЛицо.ДатаРождения) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Дата рождения'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ФизическоеЛицо.ДатаРождения", , Отказ);
	ИначеЕсли ФизическоеЛицо.ДатаРождения > ТекущаяДатаСеанса() Тогда
		ТекстСообщения = НСтр("ru = 'Дата рождения должна быть раньше текущей даты'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ФизическоеЛицо.ДатаРождения", , Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ФизическоеЛицо.МестоРожденияПредставление) Тогда
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, , НСтр("ru = 'Место рождения'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ФизическоеЛицо.МестоРожденияПредставление", , Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Функция СпособРегистрации(СпособПодачиДокументов)
	
	Возврат РегистрацияОрганизацииКлиентСервер.СпособРегистрацииПоСпособуПодачиДокументов(СпособПодачиДокументов);
	
КонецФункции

&НаКлиенте
Процедура ПоказатьНаКартеБлижайшийМФЦ(Элемент)
	
	АдресДляПоискаЗначениеJSON = ЗначениеJSONКонтактнойИнформации(ЭтотОбъект, Элементы.КонтактнаяИнформацияПолеЮрАдресОрганизации);
	
	ПредставлениеАдреса = РегистрацияОрганизацииВызовСервера.ПредставлениеАдресаДляПоискаМФЦ(АдресДляПоискаЗначениеJSON);
	ДополнениеАдреса = НСтр("ru = 'МФЦ Мои документы'");
	
	УправлениеКонтактнойИнформациейКлиентБП.ПоказатьНаКартеНажатие(ЭтотОбъект, Элемент, ПредставлениеАдреса, ДополнениеАдреса);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПредставлениеПредставителя()
	
	Если Не Организация.РегистрацияВНалоговомОргане.Пустая() Тогда
		
		РегистрацияНУОбъект = Организация.РегистрацияВНалоговомОргане.ПолучитьОбъект();
		ЗначениеВРеквизитФормы(РегистрацияНУОбъект, "РегистрацияВНалоговомОргане");
		ПредставлениеПредставителя  = РегистрацияВНалоговомОргане.Представитель;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(РегистрацияВНалоговомОргане.Представитель) Тогда
		ПредставлениеПредставителя  = НСтр("ru = 'Заполнить'");
	КонецЕсли;
	
	Элементы.ПредставлениеПредставителя.Видимость = СпособПодачиДокументов = "ИФНСпредставитель";
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьРеквизитыПредставителя()

	РеквизитыПредставителя.Добавить("Представитель");
	РеквизитыПредставителя.Добавить("ДокументПредставителя");
	РеквизитыПредставителя.Добавить("УполномоченноеЛицоПредставителя");
	РеквизитыПредставителя.Добавить("Доверенность");
	
КонецПроцедуры

#КонецОбласти
