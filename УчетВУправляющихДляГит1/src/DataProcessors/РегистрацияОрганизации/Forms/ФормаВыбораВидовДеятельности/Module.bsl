#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Не Обработки.РегистрацияОрганизации.ИспользуетсяСервисРегистрации() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Сервис регистрации недоступен'"), , , , Отказ);
		Возврат;
	КонецЕсли;
	
	Обработки.РегистрацияОрганизации.РазместитьНавигацию(ЭтотОбъект, Параметры);
	
	ВосстановитьДанныеПомощникаРегистрации();
	
	Выбранные.Сортировать("Код");
	
	ЗаполнитьРазделы();
	
	РазделыТекущаяСтрока = -1;
	Элементы.Разделы.ТекущаяСтрока = ?(Выбранные.Количество() = 0, 1, 0);
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РегистрацияОрганизацииКлиент.ОповеститьОбОткрытии(ЭтотОбъект,
		РегистрацияОрганизацииКлиентСервер.ИмяПомощникаРегистрации(),
		НавигацияНомерШага);
	
	Если Элементы.Разделы.ТекущаяСтрока <> 1 Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОбработчикРазделыПриАктивизацииСтроки", 0.1, Истина);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_НачатьЗаполнениеКлассификатора", 0.5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = ЭтотОбъект Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "ОткрытШагПомощника_РегистрацияОрганизации" Тогда
		
		Если Параметр = Неопределено
			Или Параметр.ИмяПомощника <> РегистрацияОрганизацииКлиентСервер.ИмяПомощникаРегистрации()
			Или Параметр.НомерШага <> НавигацияНомерШага Тогда
			Закрыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СохранитьДанныеПомощникаРегистрации();
	РегистрацияОрганизацииКлиент.ОбработатьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	ОтобразитьНайденные();
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойКодПриИзменении(Элемент)
	
	СохранитьДанныеПомощникаРегистрации();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыРазделы

&НаКлиенте
Процедура РазделыПриАктивизацииСтроки(Элемент)
	
	Если РазделыТекущаяСтрока <> Элементы.Разделы.ТекущаяСтрока Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОбработчикРазделыПриАктивизацииСтроки", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыВыбранные

&НаКлиенте
Процедура ВыбранныеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеПередУдалением(Элемент, Отказ)
	
	Для Каждого ВыделеннаяСтрока Из Элементы.Выбранные.ВыделенныеСтроки Цикл
		
		УдаляемыйЭлемент = Выбранные.НайтиПоИдентификатору(ВыделеннаяСтрока);
		ЗаполнитьЗначенияСвойств(ВыбранныеДляУдаления.Добавить(), УдаляемыйЭлемент);
		
		НайденныйЭлементСписка = Элементы.ОсновнойКод.СписокВыбора.НайтиПоЗначению(УдаляемыйЭлемент.Код);
		Если НайденныйЭлементСписка <> Неопределено Тогда
			Элементы.ОсновнойКод.СписокВыбора.Удалить(НайденныйЭлементСписка);
		КонецЕсли;
		Если ОсновнойКод = УдаляемыйЭлемент.Код Тогда
			ОсновнойКод = "";
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицыСинхронизированы = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныеПослеУдаления(Элемент)
	
	ОбновитьНадписьВыбранные(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыКлассификатор

&НаКлиенте
Процедура КлассификаторВыбранПриИзменении(Элемент)
	
	Данные = Элементы.Классификатор.ТекущиеДанные;
	
	ИзменитьВыбранные(ЭтотОбъект, Данные.Код, Данные.Наименование, Данные.Выбран);
	ПодготовитьСписокВыбораОсновногоКода(ОсновнойКод, Элементы.ОсновнойКод, Выбранные, ВыбранныеДляУдаления);
	
	ОбновитьНадписьВыбранные(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПодготовитьСписокВыбораОсновногоКода(ОсновнойКод, ЭлементОсновнойКод, Знач Выбранные, Знач ВыбранныеДляУдаления)
	
	// Работаем с копией списка значений, 
	// чтобы в веб-клиенте не терялся контекст между клиентом и сервером.
	СписокЗначений = ЭлементОсновнойКод.СписокВыбора.Скопировать();
	
	Для Каждого Выбранный Из ВыбранныеДляУдаления Цикл
		
		НайденныйЭлементСписка = СписокЗначений.НайтиПоЗначению(Выбранный.Код);
		Если НайденныйЭлементСписка = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СписокЗначений.Удалить(НайденныйЭлементСписка);
		Если Выбранный.Код = ОсновнойКод Тогда
			ОсновнойКод = "";
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Выбранный Из Выбранные Цикл
		
		Если СписокЗначений.НайтиПоЗначению(Выбранный.Код) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СписокЗначений.Добавить(Выбранный.Код, Выбранный.Код + " " + Выбранный.Наименование);
		
	КонецЦикла;
	
	// Загрузим новые значения списка выбора.
	ЭлементОсновнойКод.СписокВыбора.Очистить();
	Для Каждого ВыбранноеЗначение Из СписокЗначений Цикл
		ЭлементСпискаВыбора = ЭлементОсновнойКод.СписокВыбора.Добавить();
		ЗаполнитьЗначенияСвойств(ЭлементСпискаВыбора, ВыбранноеЗначение);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыКлассификаторПоиск

&НаКлиенте
Процедура КлассификаторПоискВыбранПриИзменении(Элемент)
	
	Данные = Элементы.КлассификаторПоиск.ТекущиеДанные;
	
	ИзменитьВыбранные(ЭтотОбъект, Данные.Код, Данные.Наименование, Данные.Выбран);
	ПодготовитьСписокВыбораОсновногоКода(ОсновнойКод, Элементы.ОсновнойКод, Выбранные, ВыбранныеДляУдаления);
	
	ОбновитьНадписьВыбранные(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыКатегорииЭлементы

&НаКлиенте
Процедура КатегорииЭлементыВыбранПриИзменении(Элемент)
	
	Данные = Элементы.ЭлементыКатегорий.ТекущиеДанные;
	
	ИзменитьВыбранные(ЭтотОбъект, Данные.Код, Данные.Наименование, Данные.Выбран);
	ПодготовитьСписокВыбораОсновногоКода(ОсновнойКод, Элементы.ОсновнойКод, Выбранные, ВыбранныеДляУдаления);

	ОбновитьНадписьВыбранные(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	
	УстановитьСнятьФлажки(Элементы.Разделы.ТекущиеДанные.Наименование, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	
	УстановитьСнятьФлажки(Элементы.Разделы.ТекущиеДанные.Наименование, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	Если НЕ ЗначениеЗаполнено(ОсновнойКод) Тогда
		ТекстСообщения = НСтр("ru = 'Не выбран основной вид деятельности'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ОсновнойКод");
		Возврат;
	КонецЕсли;
	
	Если НЕ ТаблицыСинхронизированы Тогда
		СохранитьДанныеПомощникаРегистрации();
	КонецЕсли;
	
	РегистрацияОрганизацииКлиент.ОткрытьЭтап(НавигацияНомерШага + 1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	Если НЕ ТаблицыСинхронизированы Тогда
		СохранитьДанныеПомощникаРегистрации();
	КонецЕсли;
	
	РегистрацияОрганизацииКлиент.ОткрытьЭтап(НавигацияНомерШага - 1);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВосстановитьДанныеПомощникаРегистрации()
	
	Если НЕ ЗначениеЗаполнено(НавигацияПараметрФормы) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПомощникаРегистрации = Обработки.РегистрацияОрганизации.ДанныеПомощникаРегистрации();
	ВидДеятельности = ДанныеПомощникаРегистрации.ВидДеятельности;
	ОКВЭД2 = ОбщегоНазначенияБПВызовСервера.ПолучитьКлассификатор("ОКВЭД2");
	
	Если ЗначениеЗаполнено(ВидДеятельности.ОсновнойКод) Тогда
		Элементы.ОсновнойКод.СписокВыбора.Добавить(
			ВидДеятельности.ОсновнойКод, ВидДеятельности.ОсновнойКод + " " + ОКВЭД2.Получить(ВидДеятельности.ОсновнойКод));
		ОсновнойКод = ВидДеятельности.ОсновнойКод;
		ВыбранныйКод = Выбранные.Добавить();
		ВыбранныйКод.Код          = ВидДеятельности.ОсновнойКод;
		ВыбранныйКод.Наименование = ОКВЭД2.Получить(ВидДеятельности.ОсновнойКод);
	КонецЕсли;
	
	Для Каждого Код Из СтрРазделить(ВидДеятельности.ДополнительныеКоды, ";", Ложь) Цикл
		ВыбранныйКод = Выбранные.Добавить();
		ВыбранныйКод.Код          = Код;
		ВыбранныйКод.Наименование = ОКВЭД2.Получить(Код);
		Элементы.ОсновнойКод.СписокВыбора.Добавить(
			ВыбранныйКод.Код, ВыбранныйКод.Код + " " + ВыбранныйКод.Наименование);
	КонецЦикла;
	
	Если НавигацияНомерШага <> 1 Тогда
		ЮридическоеФизическоеЛицо = ДанныеПомощникаРегистрации.ФормаБизнеса.ЮридическоеФизическоеЛицо;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеПомощникаРегистрации()
	
	Если НЕ ЗначениеЗаполнено(НавигацияПараметрФормы) Тогда
		Возврат;
	КонецЕсли;
	
	ОКВЭД2 = ОбщегоНазначенияБПВызовСервера.ПолучитьКлассификатор("ОКВЭД2");
	
	ДанныеОКВЭД = Новый Структура;
	ДанныеОКВЭД.Вставить("ОсновнойКод",          ОсновнойКод);
	ДанныеОКВЭД.Вставить("ОсновноеНаименование", ОКВЭД2.Получить(ДанныеОКВЭД.ОсновнойКод));
	ДанныеОКВЭД.Вставить("ДополнительныеКоды",   Новый Массив);
	
	Для Каждого Выбранный Из Выбранные Цикл
		Если Выбранный.Код <> ОсновнойКод Тогда
			ДанныеОКВЭД.ДополнительныеКоды.Добавить(Выбранный.Код);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеОКВЭД.ДополнительныеКоды = СтрСоединить(ДанныеОКВЭД.ДополнительныеКоды, ";");
	
	Обработки.РегистрацияОрганизации.СохранитьДанныеОКВЭД(ДанныеОКВЭД);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_НачатьЗаполнениеКлассификатора()
	
	НачатьЗаполнениеКлассификатораНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьЗаполнениеКлассификатораНаКлиенте()
	
	ОчиститьСообщения();
	
	ДлительнаяОперация = ЗаполнитьКлассификаторВФоне();
	
	ПараметрыФормы = ДлительныеОперацииКлиент.ПараметрыОжидания(Неопределено);
	ПараметрыФормы.ВыводитьОкноОжидания = Ложь;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершитьЗаполнениеКлассификатораВФоне", ЭтотОбъект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗаполнениеКлассификатораВФоне(Задание, ДополнительныеПараметры) Экспорт
	
	Если Задание = Неопределено Тогда
		Возврат; // Отменено
	КонецЕсли;
	
	Если Задание.Статус <> "Ошибка" Тогда
		ЗагрузитьКлассификаторНаСервере(Задание.АдресРезультата);
	Иначе
		Текст = НСтр("ru = 'Ошибка при заполнении классификатора:'");
		Текст = Текст + Символы.ПС + Задание.КраткоеПредставлениеОшибки;
		ВызватьИсключение Текст;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьКлассификаторВФоне()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = Нстр("ru = 'Регистрация организации: заполнение дерева ОКВЭД.'");
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("Выбранные",          РеквизитФормыВЗначение("Выбранные"));
	ПараметрыПроцедуры.Вставить("Классификатор",      РеквизитФормыВЗначение("Классификатор"));
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.РегистрацияОрганизации.ЗаполнитьКлассификаторВФормеВыбораОКВЭД", ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаСервере
Процедура ЗагрузитьКлассификаторНаСервере(АдресХранилищаРезультата)
	
	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилищаРезультата);
	
	ЗначениеВРеквизитФормы(РезультатВыполнения.Классификатор, "Классификатор");
	АдресХранилищаКлассификатораПоиска = ПоместитьВоВременноеХранилище(
		РезультатВыполнения.КлассификаторДляПоиска, Новый УникальныйИдентификатор);
	
	ТаблицыСинхронизированы = Ложь;
	
	СкрытьЭлементыОжиданияЗаполнениеКлассификатора(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СкрытьЭлементыОжиданияЗаполнениеКлассификатора(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.Классификатор.Видимость = НЕ ЗначениеЗаполнено(Форма.СтрокаПоиска);
	Элементы.КлассификаторПоиск.Видимость = ЗначениеЗаполнено(Форма.СтрокаПоиска);
	Элементы.СтрокаПоиска.Доступность = Истина;
	Элементы.ОжиданиеЗаполненияКлассификатора.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	// Не отображать недоступные коды
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(Элемент.Поля, "КлассификаторВыбран");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		Элемент.Отбор, "Классификатор.ДоступенДляВыбора", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьВыбранные(Форма, Код, Наименование, Выбран)
	
	Элементы = Форма.Элементы;
	
	// Изменить таблицу выбранных
	Если Выбран Тогда
		
		// Добавим в выбранные.
		Элемент = Форма.Выбранные.Добавить();
		
		Элемент.Код                  = Код;
		Элемент.Наименование         = Наименование;
		
		// Исключим из удаляемых, если элемент выбран повторно.
		Для Каждого Элемент Из Форма.ВыбранныеДляУдаления.НайтиСтроки(Новый Структура("Код", Код)) Цикл
			Форма.ВыбранныеДляУдаления.Удалить(Элемент);
		КонецЦикла;
		
	Иначе
		
		// Сбросим основной код, если он удален.
		Если Код = Форма.ОсновнойКод Тогда
			ОсновнойКод = "";
		КонецЕсли;
		
		// Добавим в удаленные.
		ЭлементДляУдаления = Форма.ВыбранныеДляУдаления.Добавить();
		
		ЭлементДляУдаления.Код                  = Код;
		ЭлементДляУдаления.Наименование         = Наименование;
		
		// Исключим из выбранных, если элемент удален.
		Для Каждого Элемент Из Форма.Выбранные.НайтиСтроки(Новый Структура("Код", Код)) Цикл
			Форма.Выбранные.Удалить(Элемент);
		КонецЦикла;
		
	КонецЕсли;
	
	Форма.ТаблицыСинхронизированы = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикРазделыПриАктивизацииСтроки()
	
	ОбработатьАктивизациюСтрокиРазделыНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьАктивизациюСтрокиРазделыНаСервере()
	
	СинхронизироватьТаблицы();
	
	РазделыТекущаяСтрока = Элементы.Разделы.ТекущаяСтрока;
	
	РазделыТекущиеДанные = Разделы.НайтиПоИдентификатору(РазделыТекущаяСтрока);
	
	ОтобразитьВыбранные         = РазделыТекущиеДанные.ЭтоВыбранные;
	ОтобразитьКлассификатор     = РазделыТекущиеДанные.ЭтоКлассификатор;
	ОтобразитьЭлементыКатегорий = НЕ ОтобразитьВыбранные И НЕ ОтобразитьКлассификатор;
	
	Если ОтобразитьВыбранные Тогда
		ТекущаяСтраница = Элементы.СтраницаВыбранные;
	ИначеЕсли ОтобразитьКлассификатор Тогда
		ТекущаяСтраница = Элементы.СтраницаКлассификатор;
	Иначе
		ТекущаяСтраница = Элементы.СтраницаЭлементыКатегорий;
	КонецЕсли;
	
	Если Элементы.СтраницыРазделы.ТекущаяСтраница <> ТекущаяСтраница Тогда
		Элементы.СтраницыРазделы.ТекущаяСтраница = ТекущаяСтраница;
	КонецЕсли;
	
	Если НЕ ОтобразитьКлассификатор Тогда
		// Сброс поиска, если выбран не классификатор
		СтрокаПоиска = "";
		Если КлассификаторПоиск.Количество() <> 0 Тогда
			Элементы.КлассификаторПоиск.Видимость = Ложь;
			Элементы.Классификатор.Видимость      = Истина;
		КонецЕсли;
	КонецЕсли;
	
	
	Если ОтобразитьЭлементыКатегорий Тогда
		Элементы.ЭлементыКатегорий.ОтборСтрок = Новый ФиксированнаяСтруктура("Категория", РазделыТекущиеДанные.Наименование);
	КонецЕсли;
	
	Элементы.ВыбранныеУдалить.Видимость = ОтобразитьВыбранные;
	Элементы.УстановитьФлажки.Видимость = ОтобразитьЭлементыКатегорий;
	Элементы.СнятьФлажки.Видимость      = ОтобразитьЭлементыКатегорий;
	
КонецПроцедуры

&НаСервере
Процедура СинхронизироватьТаблицы()
	
	Если ТаблицыСинхронизированы Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ВыбранныйЭлемент Из Выбранные Цикл
		ОбновитьСтатусВТаблицах(ВыбранныйЭлемент.Код, Истина);
	КонецЦикла;
	
	Для каждого УдаленныйЭлемент Из ВыбранныеДляУдаления Цикл
		ОбновитьСтатусВТаблицах(УдаленныйЭлемент.Код, Ложь);
	КонецЦикла;
	
	ВыбранныеДляУдаления.Очистить();
	
	СохранитьДанныеПомощникаРегистрации();
	
	ТаблицыСинхронизированы = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусВТаблицах(Код, Выбран)

	// Изменить элементы категорий
	СтрокиЭлементовКатегорий = ЭлементыКатегорий.НайтиСтроки(Новый Структура("Код", Код));
	Для каждого Элемент Из СтрокиЭлементовКатегорий Цикл
		Элемент.Выбран = Выбран;
	КонецЦикла;
	
	// Изменить поиск по классификатору
	СтрокиКлассификатора = КлассификаторПоиск.НайтиСтроки(Новый Структура("Код", Код));
	Для Каждого Элемент Из СтрокиКлассификатора Цикл
		Элемент.Выбран = Выбран;
	КонецЦикла;
	
	ИдентификаторВДереве = Неопределено;
	ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(
			"Код", ИдентификаторВДереве, Классификатор.ПолучитьЭлементы(), Код, Ложь);
	
	// Изменить классификатор
	Если ИдентификаторВДереве <> Неопределено Тогда
		Элемент = Классификатор.НайтиПоИдентификатору(ИдентификаторВДереве);
		Если Элемент <> Неопределено Тогда
			Элемент.Выбран = Выбран;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСнятьФлажки(Категория, Выбран)
	
	Для Каждого Элемент Из ЭлементыКатегорий.НайтиСтроки(Новый Структура("Категория", Категория)) Цикл
		
		Если Элемент.Выбран <> Выбран Тогда
			ИзменитьВыбранные(ЭтотОбъект, Элемент.Код, Элемент.Наименование, Выбран);
		КонецЕсли;
		
	КонецЦикла;
	
	ПодготовитьСписокВыбораОсновногоКода(ОсновнойКод, Элементы.ОсновнойКод, Выбранные, ВыбранныеДляУдаления);
	
	СинхронизироватьТаблицы();
	
	ОбновитьНадписьВыбранные(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРазделы()
	
	Раздел = Разделы.Добавить();
	
	Раздел.ЭтоВыбранные = Истина;
	Раздел.Иконка       = БиблиотекаКартинок.ВыборОКВЭДВыбранные;
	
	Если Выбранные.Количество() = 0 Тогда
		Раздел.Наименование = НСтр("ru = 'Выбранные'");
	Иначе
		Раздел.Наименование = СтрШаблон(НСтр("ru = 'Выбранные (%1)'"), Выбранные.Количество());
	КонецЕсли;
	
	Раздел = Разделы.Добавить();
	
	Раздел.ЭтоКлассификатор = Истина;
	Раздел.Наименование = НСтр("ru = 'Все виды деятельности'");
	Раздел.Иконка       = БиблиотекаКартинок.ВыборОКВЭДВсе;
	
	ЗаполнитьПопулярныеКодыВЭД();
	
	Разделы.Сортировать("Порядок");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПопулярныеКодыВЭД()
	
	МакетыСКатегориями = Новый Массив;
	
	Если Не ЗначениеЗаполнено(ЮридическоеФизическоеЛицо)
			ИЛИ ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		МакетыСКатегориями.Добавить(ПолучитьОбщийМакет("КатегорииОКВЭД_ИП"));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЮридическоеФизическоеЛицо)
			ИЛИ ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		МакетыСКатегориями.Добавить(ПолучитьОбщийМакет("КатегорииОКВЭД_ООО"));
	КонецЕсли;
	
	Для Каждого Макет Из МакетыСКатегориями Цикл
		
		Для Каждого ОбластьКатегория Из Макет.Области Цикл
			
			Верх = ОбластьКатегория.Верх;
			Низ  = ОбластьКатегория.Низ;
			
			НаименованиеКатегории = СокрП(Макет.Область(Верх, 2).Текст);
			
			Если Разделы.НайтиСтроки(Новый Структура("Наименование", НаименованиеКатегории)).Количество() <> 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Категория = Разделы.Добавить();
			
			Категория.Иконка       = ИконкаКатегории(ОбластьКатегория.Имя);
			Категория.Порядок      = Число(Макет.Область(Верх, 1).Текст);
			Категория.Наименование = НаименованиеКатегории;
			
			Для НомерСтр = Верх+1 По Низ Цикл
				
				Элемент = ЭлементыКатегорий.Добавить();
				
				Элемент.Категория    = Категория.Наименование;
				Элемент.Код          = СокрП(Макет.Область(НомерСтр, 1).Текст);
				Элемент.Наименование = СокрП(Макет.Область(НомерСтр, 2).Текст);
				Элемент.Выбран       = Выбранные.НайтиСтроки(Новый Структура("Код", Элемент.Код)).Количество() <> 0;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ИконкаКатегории(Наименование)
	
	Иконка = Неопределено;
	
	Если Метаданные.ОбщиеКартинки.Найти("ВыборОКВЭД" + Наименование) <> Неопределено Тогда
		Иконка = БиблиотекаКартинок["ВыборОКВЭД" + Наименование];
	КонецЕсли;
	
	Возврат Иконка;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНадписьВыбранные(Форма)
	
	Если Форма.Выбранные.Количество() = 0 Тогда
		Форма.Разделы[0].Наименование = НСтр("ru = 'Выбранные'");
	Иначе
		Форма.Разделы[0].Наименование = СтрШаблон(НСтр("ru = 'Выбранные (%1)'"), Форма.Выбранные.Количество());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьНайденные()
	
	ОтобразитьНайденные = ЗначениеЗаполнено(СтрокаПоиска);
	
	Если ОтобразитьНайденные Тогда
		
		ТаблицаОКВЭД = ПолучитьИзВременногоХранилища(АдресХранилищаКлассификатораПоиска);
		
		СписокВыбранныхКодов = Новый СписокЗначений;
		Для Каждого Выбранный Из Выбранные Цикл
			СписокВыбранныхКодов.Добавить(Выбранный.Код);
		КонецЦикла;
		
		КлассификаторСОтбором = Справочники.Организации.НайтиВКлассификатореОКВЭД2(
			СтрокаПоиска, СписокВыбранныхКодов, ТаблицаОКВЭД);
		
		КлассификаторПоиск.Загрузить(КлассификаторСОтбором);
		
	КонецЕсли;
	
	Элементы.КлассификаторПоиск.Видимость = ОтобразитьНайденные;
	Элементы.Классификатор.Видимость      = НЕ ОтобразитьНайденные;
	
	Элементы.Разделы.ТекущаяСтрока = 1;
	
КонецПроцедуры

#КонецОбласти
