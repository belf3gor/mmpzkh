&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьЗначенияСвойств(Объект, Параметры);
	
	Элементы.БухОстаткиСуммаПредоплата.Видимость = ПравоДоступа("Просмотр", Метаданные.Документы.СчетНаОплатуПокупателю); // колонка "По счету"
	Элементы.БухОстаткиСуммаДолг.Видимость       = ПравоДоступа("Просмотр", Метаданные.Документы.РеализацияТоваровУслуг); // колонка "По акту, накладной"
	
	Если Не ПравоДоступа("Просмотр", Метаданные.ПланыСчетов.Хозрасчетный) Тогда
		Элементы.НастройкаСчетовУчетаРасчетов.Видимость = Ложь;
	КонецЕсли;
	
	ПравоРедактированияСрокаОплаты = СрокиОплатыДокументов.ПравоРедактирования();
	
	Элементы.БухОстаткиСрокОплаты.ТолькоПросмотр                   = НЕ ПравоРедактированияСрокаОплаты;
	Элементы.ИзменитьСрокОплаты.Видимость                          = ПравоРедактированияСрокаОплаты;
	Элементы.БухОстаткиКонтекстноеМенюИзменитьСрокОплаты.Видимость = ПравоРедактированияСрокаОплаты;
	
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаОстатков) Тогда
		Объект.ДатаОстатков = ОбщегоНазначения.ТекущаяДатаПользователя();
	КонецЕсли;

	ИспользуетсяОтложенноеПроведение = ПолучитьФункциональнуюОпцию("ИспользоватьОтложенноеПроведение");
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Отобразим операцию ожидания, т.к. надо будет запустить обновление содержимого табличной части.
	ОтобразитьЭлементыОжиданияОстатки();
	
	// Автоматически запускаем заполнение остатков
	ПодключитьОбработчикОжидания("Подключаемый_НачатьЗаполнениеОстатков", 0.5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбновленияДляСобытий = Новый Массив;
	ОбновленияДляСобытий.Добавить("Запись_РеализацияТоваровУслуг");
	ОбновленияДляСобытий.Добавить("Запись_АктОбОказанииПроизводственныхУслуг");
	ОбновленияДляСобытий.Добавить("Запись_ПередачаНМА");
	ОбновленияДляСобытий.Добавить("Запись_ПередачаОС");
	ОбновленияДляСобытий.Добавить("Запись_СчетНаОплатуПокупателю");
	
	Если ОбновленияДляСобытий.Найти(ИмяСобытия) <> Неопределено
		И ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("СрокОплаты") Тогда
		
		ОбновитьСрокОплатыДокументаНаСервере(Параметр.СрокОплаты, Источник);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
	// Автоматически запускаем заполнение остатков
	ПодключитьОбработчикОжидания("Подключаемый_НачатьЗаполнениеОстатков", 0.5, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыБухОстатки

&НаКлиенте
Процедура БухОстаткиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ИзменяемыеПоля = Новый Массив;
	ИзменяемыеПоля.Добавить("БухОстаткиСрокОплаты");
	
	Если ИзменяемыеПоля.Найти(Поле.Имя) <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле.Имя = "БухОстаткиЭлектроннаяПочта" Тогда
		
		СформироватьПисьмоСНапоминанием(ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ВыбраннаяСтрока));
		
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуДокументаРасчетов(ВыбраннаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура БухОстаткиСрокОплатыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.БухОстатки.ТекущиеДанные;
	
	Если ТекущиеДанные.СуммаПредоплата > 0 Тогда
		Документ = ТекущиеДанные.СчетНаОплату;
	Иначе
		Документ = ТекущиеДанные.ДокументРасчетов;
	КонецЕсли;
	
	ТекущиеДанные.ОсталосьДней = ЗаписатьСрокОплатыДокументаНаСервере(
		ТекущиеДанные.СрокОплаты, Документ, Объект.Организация);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьДокумент(Команда)
	
	Если Элементы.БухОстатки.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуДокументаРасчетов(Элементы.БухОстатки.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонтрагента(Команда)
	
	Если Элементы.БухОстатки.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуКонтрагента(Элементы.БухОстатки.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура БухОстаткиЗаполнить(Команда)
	
	// Отобразим операцию ожидания, т.к. надо будет запустить обновление содержимого табличной части.
	ОтобразитьЭлементыОжиданияОстатки();
	
	// Автоматически запускаем заполнение остатков
	ПодключитьОбработчикОжидания("Подключаемый_НачатьЗаполнениеОстатков", 0.5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСрокОплаты(Команда)
	
	Если Элементы.БухОстатки.ВыделенныеСтроки.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не выбраны задолженности для изменения срока оплаты'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.БухОстатки");
		Возврат;
	КонецЕсли;
	
	СрокОплаты = '00010101';
	МассивВыделенныхДокументов = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.БухОстатки.ВыделенныеСтроки Цикл
		
		ДанныеВыделеннойСтроки = Элементы.БухОстатки.ДанныеСтроки(ВыделеннаяСтрока);
		
		СрокОплаты = Макс(ДанныеВыделеннойСтроки.СрокОплаты, СрокОплаты);
		
		Если ЗначениеЗаполнено(ДанныеВыделеннойСтроки.СчетНаОплату) Тогда
			МассивВыделенныхДокументов.Добавить(ДанныеВыделеннойСтроки.СчетНаОплату);
		Иначе
			МассивВыделенныхДокументов.Добавить(ДанныеВыделеннойСтроки.ДокументРасчетов);
		КонецЕсли;
		
	КонецЦикла;
	
	ОповещениеВводДаты = Новый ОписаниеОповещения("ВводНовогоСрокаОплаты", ЭтаФорма, МассивВыделенныхДокументов);
	
	ПоказатьВводДаты(ОповещениеВводДаты, СрокОплаты, "Изменить срок оплаты", ЧастиДаты.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСчетовУчетаРасчетовНажатие(Элемент)
	
	БухгалтерскиеОтчетыКлиент.РедактироватьСписокСчетовИсключаемыхИзРасчетаЗадолженности(ЭтаФорма, 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Напомнить(Команда)
	
	СформироватьПисьмоСНапоминанием(Элементы.БухОстатки.ВыделенныеСтроки);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеОстатков

&НаКлиенте
Процедура Подключаемый_НачатьЗаполнениеОстатков()
	
	НачатьЗаполнениеОстатковНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияЗаполнениеОстатков()

	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			РезультатВыполнения = ЗагрузитьПодготовленныеДанныеЗаполнениеОстатков();
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗаданияЗаполнениеОстатков", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура НачатьЗаполнениеОстатковНаКлиенте()
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		// Возможно, что фоновое задание было запущено раньше.
		Если НЕ ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияЗаполнениеОстатков");
	
	РезультатВыполнения = НачатьЗаполнениеОстатковНаСервере();
	
	Если НЕ РезультатВыполнения.ЗаданиеВыполнено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияЗаполнениеОстатков", 0.5, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыЗаполнениеОстатков()
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Организация",  Объект.Организация);
	ПараметрыЗадания.Вставить("ДатаОстатков", Объект.ДатаОстатков);
	
	Возврат ПараметрыЗадания;
	
КонецФункции

&НаСервере
Функция НачатьЗаполнениеОстатковНаСервере()
	
	Объект.БухОстатки.Очистить();
	ИтогоОплатить = 0;
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	ПараметрыЗадания = ПодготовитьПараметрыЗаполнениеОстатков();
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Обработки.ОжидаемаяОплатаОтПокупателей.ЗаполнитьПланируемыеПлатежи",
		ПараметрыЗадания,
		НСтр("ru = 'Оплата от покупателей: заполнение остатков'"));
	
	АдресХранилища       = РезультатВыполнения.АдресХранилища;
	ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		РезультатВыполнения = ЗагрузитьПодготовленныеДанныеЗаполнениеОстатков();
	Иначе
		ОтобразитьЭлементыОжиданияОстатки();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СкрытьЭлементыОжиданияЗаполнениеОстатков(Форма)

	Элементы = Форма.Элементы;
	
	Элементы.ОстаткиТаблица.Видимость  = Истина;
	Элементы.ОстаткиОжидание.Видимость = Ложь;
	
	УстановитьДоступностьЭлементовШапки(Форма, Истина);
	УстановитьДоступностьКоманд(Форма, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьЭлементыОжиданияОстатки()
	
	Элементы.ОстаткиТаблица.Видимость  = Ложь;
	Элементы.ОстаткиОжидание.Видимость = Истина;
	
	Если Элементы.КартинкаОжиданиеЗаполнениеОстатки.Картинка.Вид = ВидКартинки.Пустая Тогда
		// Картинку загружаем по необходимости при первом включении ожидания.
		Элементы.КартинкаОжиданиеЗаполнениеОстатки.Картинка = БиблиотекаКартинок.ДлительнаяОперация48;
	КонецЕсли;
	
	УстановитьДоступностьЭлементовШапки(ЭтотОбъект, Ложь);
	УстановитьДоступностьКоманд(ЭтотОбъект, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаЗаполненияОстатков(Команда)
	
	ОтменитьЗаданиеЗаполнениеОстатков();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗаданиеЗаполнениеОстатков()
	
	ОтменитьВыполнениеЗаданий();
	
	СкрытьЭлементыОжиданияЗаполнениеОстатков(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьПодготовленныеДанныеЗаполнениеОстатков()

	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(РезультатВыполнения) = Тип("ТаблицаЗначений") И РезультатВыполнения.Количество() <> 0 Тогда
		
		Объект.БухОстатки.Загрузить(РезультатВыполнения);
		
		Элементы.БухОстатки.ТекущаяСтрока = ПолучитьИдентификаторПервойНепросроченнойОплаты();
		
		Если Элементы.БухОстатки.ТекущийЭлемент = Неопределено Тогда
			Элементы.БухОстатки.ТекущийЭлемент = Элементы.БухОстаткиКонтрагент;
		КонецЕсли;
		
	КонецЕсли;
	
	РезультатВыполнения = Новый Структура();
	РезультатВыполнения.Вставить("ЗаданиеВыполнено", Истина);

	ИдентификаторЗадания = Неопределено;
	УдалитьИзВременногоХранилища(АдресХранилища);
	АдресХранилища = "";
	
	СкрытьЭлементыОжиданияЗаполнениеОстатков(ЭтотОбъект);

	ОпределитьМоментАктуальностиОтложенныхРасчетов(Ложь);
	
	Возврат РезультатВыполнения;

КонецФункции

#КонецОбласти

#Область РаботаСФоновымиЗаданиями

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(Знач ИдентификаторЗадания) 

	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);

КонецФункции

&НаКлиенте
Процедура ОтменитьВыполнениеЗаданий()

	МассивИдентификаторовЗаданий = Новый Массив;
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияЗаполнениеОстатков");
		МассивИдентификаторовЗаданий.Добавить(ИдентификаторЗадания);
	КонецЕсли;
	Если ЗначениеЗаполнено(ИдентификаторЗаданияОтложенныеРасчеты) Тогда
		ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеОтложенныхРасчетов");
		МассивИдентификаторовЗаданий.Добавить(ИдентификаторЗаданияОтложенныеРасчеты);
	КонецЕсли;
	Если МассивИдентификаторовЗаданий.Количество() > 0 Тогда
		ОтменитьВыполнениеЗаданийНаСервере(МассивИдентификаторовЗаданий);
		ИдентификаторЗадания = Неопределено;
		ИдентификаторЗаданияОтложенныеРасчеты = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗаданийНаСервере(Знач МассивИдентификаторовЗаданий)

	Для Каждого ИдентификаторЗадания Из МассивИдентификаторовЗаданий Цикл
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область УсловноеОформление

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ДобавитьЭлементУсловногоОформления(Неопределено, -1, НСтр("ru = 'Просрочено'"), ЦветаСтиля.ВажноеСобытие);
	
	ДобавитьЭлементУсловногоОформления(0, 0, НСтр("ru = 'Сегодня'"), ЦветаСтиля.ВажноеСобытие);
	ДобавитьЭлементУсловногоОформления(1, 1, НСтр("ru = 'Завтра'"), ЦветаСтиля.ПриближающеесяСобытие);
	
	Шаблон = НСтр("ru = 'Осталось %1'");
	
	Для РазностьДат = 2 По 6 Цикл
		СтрокаРазностьДат = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(РазностьДат, НСтр("ru = 'день,дня,дней'"));
		ДобавитьЭлементУсловногоОформления(РазностьДат, РазностьДат, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, СтрокаРазностьДат));
	КонецЦикла;
	
	ДобавитьЭлементУсловногоОформления( 7, 13, НСтр("ru = 'Осталась неделя'"));
	ДобавитьЭлементУсловногоОформления(14, 18, НСтр("ru = 'Осталось 2 недели'"));
	ДобавитьЭлементУсловногоОформления(19, 22, НСтр("ru = 'Осталось 3 недели'"));
	ДобавитьЭлементУсловногоОформления(23, 34, НСтр("ru = 'Остался месяц'"));
	
	// Используем пробел в качестве представления пустой строки, т.к. пустая строка в условном оформлении игнорируется.
	ДобавитьЭлементУсловногоОформления(35, Неопределено, "Больше месяца");
	
	ДобавитьУсловноеОформлениеСчетовБезСрокаОплаты();
	
	ДобавитьУсловноеОформлениеОтметок();
	
	ПутьКДаннымПоля = "Объект.БухОстатки.НапоминаниеОтправлено";
	ПутьКДаннымПоляОформления = "БухОстаткиЭлектроннаяПочта";
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ИспользованнаяГиперссылкаТабличнойЧасти);
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Использование = Истина;
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоляОформления);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУсловноеОформлениеОтметок()
	
	ПутьКДаннымПоля = "Объект.БухОстатки.ЭлектроннаяПочта";
	ПутьКДаннымПоляОформления = "БухОстаткиОтметка";
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = "";
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Использование = Истина;
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоляОформления);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУсловноеОформлениеСчетовБезСрокаОплаты()
	
	ПутьКДаннымПоля = "Объект.БухОстатки.СрокОплаты";
	ПутьКДаннымПоляОформления = "БухОстаткиСрокОплаты";
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не установлен'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ДосьеВторостепеннаяНадписьЦвет);
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Дата(1,1,1);
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Использование = Истина;
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоляОформления);
	
	ПутьКДаннымПоля = "Объект.БухОстатки.СрокОплаты";
	ПутьКДаннымПоляОформления = "БухОстаткиОсталосьДней";
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", " ");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Дата(1,1,1);
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Использование = Истина;
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоляОформления);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементУсловногоОформления(НижняяГраница, ВерхняяГраница, Текст, ЦветТекста = Неопределено)
	
	ПутьКДаннымПоля = "Объект.БухОстатки.ОсталосьДней";
	ПутьКДаннымПоляОформления = "БухОстаткиОсталосьДней";
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", Текст);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекста);
	
	Если НижняяГраница = Неопределено Тогда
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		ЭлементОтбора.ПравоеЗначение = ВерхняяГраница;
		
	ИначеЕсли ВерхняяГраница = Неопределено Тогда
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ЭлементОтбора.ПравоеЗначение = НижняяГраница;
		
	ИначеЕсли НижняяГраница = ВерхняяГраница Тогда
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = НижняяГраница;
		
	Иначе
		
		ГруппаЭлементовОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаЭлементовОтбора.Использование = Истина;
		ГруппаЭлементовОтбора.ТипГруппы     = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ЭлементОтбора.ПравоеЗначение = НижняяГраница;
		
		ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		ЭлементОтбора.ПравоеЗначение = ВерхняяГраница;
		
	КонецЕсли;
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Использование = Истина;
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоляОформления);
	
КонецПроцедуры

#КонецОбласти

#Область ОтправкаНапоминания

&НаКлиенте
Процедура СформироватьПисьмоСНапоминанием(Знач ВыбранныеСтроки)
	
	ПараметрыПисьма = ПодготовитьПараметрыЭлектронногоПисьма(ВыбранныеСтроки);
	
	Если ЗначениеЗаполнено(ПараметрыПисьма) Тогда
		РаботаСПочтовымиСообщениямиКлиент.СоздатьНовоеПисьмо(ПараметрыПисьма);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыЭлектронногоПисьма(ВыбранныеСтроки)
	
	ТаблицаПлатежей = ТаблицаПлатежейПоВыбраннымСтрокам(ВыбранныеСтроки);
	
	ПечатныеФормы = ПечатныеФормыДокументов(ТаблицаПлатежей);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("УпаковатьВАрхив",   Ложь);
	ДополнительныеПараметры.Вставить("ФорматыСохранения", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(ТипФайлаТабличногоДокумента.PDF));
	
	ПараметрыПисьма = ОтправкаПочтовыхСообщений.ПараметрыЭлектронногоПисьма(ПечатныеФормы, "", ДополнительныеПараметры);
	
	ПараметрыПисьма.Тема = НСтр("ru='Напоминание об оплате'") + Сред(ПараметрыПисьма.Тема, 10);
	ПараметрыПисьма.Текст = ТекстЭлектронногоПисьма(ТаблицаПлатежей);
	
	ПолучитьСообщенияПользователю(Истина); // удалим сообщения сформированные при проверке документов
	
	Возврат ПараметрыПисьма;
	
КонецФункции

&НаСервере
Функция ТекстЭлектронногоПисьма(ТаблицаПлатежей)
	
	ТекстПисьма = "";
	
	КоличествоСчетовНаОплату = ТаблицаПлатежей.НайтиСтроки(Новый Структура("ТипДокумента", "СчетНаОплату")).Количество();
	ЕстьНеоплаченныеСчета    = (КоличествоСчетовНаОплату <> 0);
	ЕстьЗадолженность        = (КоличествоСчетовНаОплату <> ТаблицаПлатежей.Количество());
	
	Если ЕстьНеоплаченныеСчета И ЕстьЗадолженность Тогда
		ТекстНапоминания = НСтр("ru='Напоминаем, что у Вас есть неоплаченные счета и задолженность по приложенным документам:'");
	ИначеЕсли ЕстьЗадолженность Тогда
		ТекстНапоминания = НСтр("ru='Напоминаем, что у Вас есть задолженность по приложенным документам:'");
	ИначеЕсли ЕстьНеоплаченныеСчета Тогда
		ТекстНапоминания = НСтр("ru='Напоминаем, что у Вас есть неоплаченные счета:'");
	КонецЕсли;
	
	ТекстПисьма = НСтр("ru='Уважаемый покупатель!'") + Символы.ПС + ТекстНапоминания;
	
	// 1 - наименование документа, 2 - сумма документа, 3 - валюта документа
	ШаблонДляДокумента = НСтр("ru=' – %1 на сумму %2 %3'");
	ШаблонЧастичноОплаченногоСчета = НСтр("ru = ' – %1 на сумму %2 %3 (оплачено %4 %5, ожидается оплата %6 %7)'");
	Для Каждого СтрокаПлатеж Из ТаблицаПлатежей Цикл
		
		ЗаголовокДокумента = ОбщегоНазначенияБПВызовСервера.СформироватьЗаголовокДокумента(
			СтрокаПлатеж.Документ, СтрокаПлатеж.НаименованиеДокумента);
		
		Если СтрокаПлатеж.ТипДокумента = "СчетНаОплату"
			И СтрокаПлатеж.СуммаСчета <> СтрокаПлатеж.Сумма // отсекаем полностью не оплаченные счета
			И СтрокаПлатеж.СуммаСчета <> 0 Тогда
			Оплачено = Макс(0, СтрокаПлатеж.СуммаСчета - СтрокаПлатеж.Сумма);
			ПредставлениеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонЧастичноОплаченногоСчета, ЗаголовокДокумента,
				Формат(СтрокаПлатеж.СуммаСчета, "ЧЦ=15; ЧДЦ=2; ЧН=0"), СтрокаПлатеж.Валюта,
				Формат(Оплачено, "ЧЦ=15; ЧДЦ=2; ЧН=0"), СтрокаПлатеж.Валюта,
				Формат(СтрокаПлатеж.Сумма, "ЧЦ=15; ЧДЦ=2; ЧН=0"), СтрокаПлатеж.Валюта);
		Иначе
			ПредставлениеДокумента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонДляДокумента, ЗаголовокДокумента, СтрокаПлатеж.Сумма, СтрокаПлатеж.Валюта);
		КонецЕсли;
		
		ТекстПисьма = ТекстПисьма + Символы.ПС + ПредставлениеДокумента;
	КонецЦикла;
	
	Возврат ОтправкаПочтовыхСообщений.ПодготовитьТекстПисьма(ТекстПисьма);
	
КонецФункции

&НаСервере
Функция ПечатныеФормыДокументов(ТаблицаПлатежей)
	
	ПечатныеФормы = Новый Массив;
	
	// Счет поставщика
	МенеджерПечати = "Обработка.ПечатьСчетаНаОплату";
	
	ДокументыСчетНаОплатуПокупателю = 
		ТаблицаПлатежей.Скопировать(Новый Структура("ТипДокумента", "СчетНаОплату")).ВыгрузитьКолонку("Документ");
	
	Если ДокументыСчетНаОплатуПокупателю.Количество() <> 0 Тогда
		ПечатныеФормы.Добавить(
			СформировтьПечатныеФормыДляВидаДокументов(МенеджерПечати, "СчетЗаказ", ДокументыСчетНаОплатуПокупателю));
	КонецЕсли;
	
	// Реализация товаров и услуг
	МенеджерПечати = "Документ.РеализацияТоваровУслуг";
	
	ДокументыРеализацияТовары = 
		ТаблицаПлатежей.Скопировать(Новый Структура("ТипДокумента", "РеализацияТовары")).ВыгрузитьКолонку("Документ");
	
	Если ДокументыРеализацияТовары.Количество() <> 0 Тогда
		ПечатныеФормы.Добавить(
			СформировтьПечатныеФормыДляВидаДокументов(МенеджерПечати, "ТОРГ12_БезУслуг", ДокументыРеализацияТовары));
	КонецЕсли;
	
	ДокументыРеализацияУслуги = 
		ТаблицаПлатежей.Скопировать(Новый Структура("ТипДокумента", "РеализацияУслуги")).ВыгрузитьКолонку("Документ");
	
	Если ДокументыРеализацияУслуги.Количество() <> 0 Тогда
		ПечатныеФормы.Добавить(
			СформировтьПечатныеФормыДляВидаДокументов(МенеджерПечати, "Акт", ДокументыРеализацияУслуги));
	КонецЕсли;
	
	ДокументыРеализацияТоварыУслуги = 
		ТаблицаПлатежей.Скопировать(Новый Структура("ТипДокумента", "РеализацияТоварыУслуги")).ВыгрузитьКолонку("Документ");
	
	Если ДокументыРеализацияТоварыУслуги.Количество() <> 0 Тогда
		ПечатныеФормы.Добавить(
			СформировтьПечатныеФормыДляВидаДокументов(МенеджерПечати, "ТОРГ12", ДокументыРеализацияТоварыУслуги));
	КонецЕсли;
	
	// Оказание производственных услуг
	МенеджерПечати = "Документ.АктОбОказанииПроизводственныхУслуг";
	
	ДокументыОказаниеПроизводственныхУслуг = 
		ТаблицаПлатежей.Скопировать(Новый Структура("ТипДокумента", "ОказаниеПроизводственныхУслуг")).ВыгрузитьКолонку("Документ");
	
	Если ДокументыОказаниеПроизводственныхУслуг.Количество() <> 0 Тогда
		ПечатныеФормы.Добавить(
			СформировтьПечатныеФормыДляВидаДокументов(МенеджерПечати, "Акт", ДокументыОказаниеПроизводственныхУслуг));
	КонецЕсли;
	
	Возврат ПечатныеФормы;
	
КонецФункции

&НаСервере
Функция СформировтьПечатныеФормыДляВидаДокументов(МенеджерПечати, ИмяМакета, МассивДокументов)
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ФормироватьСтандартноеОписаниеПисьма", Ложь);
	
	Возврат УправлениеПечатью.СформироватьПечатныеФормыДляБыстройПечати(
				МенеджерПечати, ИмяМакета, МассивДокументов, ДополнительныеПараметры);
КонецФункции

&НаСервере
Функция ТаблицаПлатежейПоВыбраннымСтрокам(ВыбранныеСтроки)
	
	МассивТипов = Обработки.ОжидаемаяОплатаОтПокупателей.ТипыДокументовРасчетов();
	МассивТипов.Добавить(Тип("ДокументСсылка.СчетНаОплатуПокупателю"));
	
	ОписаниеТиповДокументов = Новый ОписаниеТипов(МассивТипов);
	
	ТаблицаПлатежей = Новый ТаблицаЗначений;
	
	ТаблицаПлатежей.Колонки.Добавить("Организация",           Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ТаблицаПлатежей.Колонки.Добавить("Контрагент",            Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаПлатежей.Колонки.Добавить("Документ",              ОписаниеТиповДокументов);
	ТаблицаПлатежей.Колонки.Добавить("Сумма",                 ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	ТаблицаПлатежей.Колонки.Добавить("Валюта",                Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаПлатежей.Колонки.Добавить("ТипДокумента",          ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаПлатежей.Колонки.Добавить("НаименованиеДокумента", ОбщегоНазначения.ОписаниеТипаСтрока(50));
	ТаблицаПлатежей.Колонки.Добавить("СуммаСчета",            ОбщегоНазначения.ОписаниеТипаЧисло(15,2));
	
	Для Каждого ВыбраннаяСтрока Из ВыбранныеСтроки Цикл
		
		ДанныеСтроки = Объект.БухОстатки.НайтиПоИдентификатору(ВыбраннаяСтрока);
		
		ПлатежПлан = ТаблицаПлатежей.Добавить();
		
		ЗаполнитьЗначенияСвойств(ПлатежПлан, ДанныеСтроки);
		
		Если ДанныеСтроки.СуммаПредоплата > 0 Тогда
			
			ПлатежПлан.Документ = ДанныеСтроки.СчетНаОплату;
			ПлатежПлан.Сумма    = ДанныеСтроки.СуммаПредоплата;
			
			ПлатежПлан.НаименованиеДокумента = НСтр("ru = 'Счет на оплату'");
			ПлатежПлан.ТипДокумента = "СчетНаОплату";
			
		Иначе
			
			ПлатежПлан.Документ = ДанныеСтроки.ДокументРасчетов;
			ПлатежПлан.Сумма    = ДанныеСтроки.СуммаДолг;
			
			ТипДокументаРасчетов = ТипЗнч(ДанныеСтроки.ДокументРасчетов);
			
			Если ТипДокументаРасчетов = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
				
				Если ДанныеСтроки.ДокументРасчетов.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Товары Тогда
					
					ПлатежПлан.НаименованиеДокумента = НСтр("ru = 'ТОРГ-12 (Товарная накладная)'");
					ПлатежПлан.ТипДокумента          = "РеализацияТовары";
					
				ИначеЕсли ДанныеСтроки.ДокументРасчетов.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.Услуги Тогда
					
					ПлатежПлан.НаименованиеДокумента = НСтр("ru = 'Акт об оказании услуг'");
					ПлатежПлан.ТипДокумента          = "РеализацияУслуги";
					
				Иначе
					
					ПлатежПлан.НаименованиеДокумента = НСтр("ru = 'ТОРГ-12 (Товарная накладная с услугами)'");
					ПлатежПлан.ТипДокумента          = "РеализацияТоварыУслуги";
					
				КонецЕсли;
				
			ИначеЕсли ТипДокументаРасчетов = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
				
				ПлатежПлан.НаименованиеДокумента = НСтр("ru = 'Акт об оказании услуг'");
				ПлатежПлан.ТипДокумента          = "ОказаниеПроизводственныхУслуг";
				
			ИначеЕсли ТипДокументаРасчетов = Тип("ДокументСсылка.ПередачаНМА") Тогда
				
				ПлатежПлан.НаименованиеДокумента = НСтр("ru = 'Передача НМА'");
				ПлатежПлан.ТипДокумента          = "ПередачаНМА";
				
			КонецЕсли;
			
		КонецЕсли;
		
		ДанныеСтроки.НапоминаниеОтправлено = Истина; // Использованная гиперссылка
	КонецЦикла;
	
	Возврат ТаблицаПлатежей;
	
КонецФункции

#КонецОбласти

#Область ПрочиеВспомогательныеПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	// Отобразим операцию ожидания, т.к. надо будет запустить обновление содержимого табличной части.
	ОтобразитьЭлементыОжиданияОстатки();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСрокОплатыДокументаНаСервере(НовыйСрокОплаты, Документ)
	
	ДлинаСуток = 86400;
	ДатаОстатков = ОбщегоНазначения.ТекущаяДатаПользователя();
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		ПараметрыОтбора = Новый Структура("СчетНаОплату", Документ);
	Иначе
		ПараметрыОтбора = Новый Структура("ДокументРасчетов", Документ);
	КонецЕсли;
	
	Найденные = Объект.БухОстатки.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаТаблицы Из Найденные Цикл
		СтрокаТаблицы.СрокОплаты   = НовыйСрокОплаты;
		СтрокаТаблицы.ОсталосьДней = (НовыйСрокОплаты - ДатаОстатков)/ДлинаСуток;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНовогоСрокаОплаты(Результат, МассивВыделенныхДокументов) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьСрокОплатыВыделенныхСтрокНаСервере(Результат, МассивВыделенныхДокументов);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСрокОплатыВыделенныхСтрокНаСервере(НовыйСрокОплаты, МассивДокументов)
	
	ДлинаСуток = 86400;
	ДатаОстатков = ОбщегоНазначения.ТекущаяДатаПользователя();
	
	Для Каждого ВыделеннаяСтрока Из Элементы.БухОстатки.ВыделенныеСтроки Цикл
		
		ДанныеВыделеннойСтроки = Объект.БухОстатки.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		ДанныеВыделеннойСтроки.СрокОплаты = НовыйСрокОплаты;
		ДанныеВыделеннойСтроки.ОсталосьДней = (НовыйСрокОплаты - ДатаОстатков)/ДлинаСуток;
		
	КонецЦикла;
	
	СрокиОплатыДокументов.ЗаписатьСрокОплатыДокументов(МассивДокументов, НовыйСрокОплаты);
	
КонецПроцедуры

// Записывает срок в базу и возвращает количество дней до нового срока оплаты
//
&НаСервереБезКонтекста
Функция ЗаписатьСрокОплатыДокументаНаСервере(НовыйСрокОплаты, Ссылка, Организация)
	
	СрокиОплатыДокументов.ЗаписатьСрокОплатыДокумента(Ссылка, НовыйСрокОплаты);
	
	ДлинаСуток = 86400;
	ДатаОстатков = ОбщегоНазначения.ТекущаяДатаПользователя();
	
	Возврат (НовыйСрокОплаты - ДатаОстатков)/ДлинаСуток;
	
КонецФункции

&НаСервере
Функция ПолучитьИдентификаторПервойНепросроченнойОплаты()
	
	Для Каждого СтрокаТаблицы Из Объект.БухОстатки Цикл
		Если СтрокаТаблицы.ОсталосьДней >= 0 Тогда
			Возврат СтрокаТаблицы.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

// Блокирует либо разблокирует организацию в шапке формы при старте и завершении фоновых заданий.
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементовШапки(Форма, Доступно)

	Элементы = Форма.Элементы;
	
	Элементы.Организация.Доступность = Доступно;
	
КонецПроцедуры

// Блокирует либо разблокирует команды при старте и завершении фоновых заданий.
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКоманд(Форма, Доступно)
	
	Элементы = Форма.Элементы;
	
	Элементы.ИзменитьСрокОплаты.Доступность   = Доступно И Форма.ПравоРедактированияСрокаОплаты;
	Элементы.ГруппаКомандыТаблицы.Доступность = Доступно;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДокументаРасчетов(ВыбранноеЗначение)

	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Элементы.БухОстатки.ДанныеСтроки(ВыбранноеЗначение);
	
	ДокументСсылка = ?(ЗначениеЗаполнено(ДанныеСтроки.СчетНаОплату), ДанныеСтроки.СчетНаОплату, ДанныеСтроки.ДокументРасчетов);
	
	ПоказатьЗначение(, ДокументСсылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуКонтрагента(ВыбранноеЗначение)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Элементы.БухОстатки.ДанныеСтроки(ВыбранноеЗначение);
	
	ПоказатьЗначение(, ДанныеСтроки.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура Актуализировать(Команда)
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияОтложенныеРасчеты)
		И НЕ ЗаданиеВыполнено(ИдентификаторЗаданияОтложенныеРасчеты) Тогда
		// Задание запущено и еще не завершилось, продолжаем ожидание.
		Возврат;
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеОтложенныхРасчетов");
	
	Элементы.ФормаНапомнить.Доступность = Ложь;
	
	ЗаданиеВыполнено = ЗапуститьОтложенныеРасчетыНаСервере();
	Если ЗаданиеВыполнено Тогда
		ПоказатьРезультатОтложенногоРасчета();
	Иначе
		ОжидатьВыполнениеОтложенныхРасчетов();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьАктуализацию(Команда)
	
	ОтменитьВыполнениеЗаданий();
	
	Элементы.ФормаНапомнить.Доступность = Истина;
	
	ОпределитьМоментАктуальностиОтложенныхРасчетов(Истина);

КонецПроцедуры

&НаКлиенте
Процедура СкрытьПриНеобходимостиАктуализацииНажатие(Элемент)

	// Пользователь хочет скрыть данные по актуализации, сбрасываем соответствующие признаки.
	МоментАктуальностиОтложенныхРасчетов = Неопределено;
	УстановитьВидимостьЭлементовОжиданияОтложенныеРасчеты(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьНажатие(Элемент)
	
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализации(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОтложенныеРасчеты

&НаСервере
Процедура ОпределитьМоментАктуальностиОтложенныхРасчетов(БылаПопыткаАктуализации)

	УчетВзаиморасчетовОтложенноеПроведение.ОпределитьМоментАктуальностиОтложенныхРасчетов(
		ЭтотОбъект, Объект.Организация, КонецДня(Объект.ДатаОстатков), БылаПопыткаАктуализации);

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовОжиданияОтложенныеРасчеты(БылаПопыткаАктуализации)

	УчетВзаиморасчетовОтложенноеПроведение.УстановитьВидимостьЭлементовОжиданияОтложенныеРасчеты(
		ЭтотОбъект, КонецДня(Объект.ДатаОстатков), БылаПопыткаАктуализации);

КонецПроцедуры

&НаСервере
Функция ЗапуститьОтложенныеРасчетыНаСервере()

	ЗаданиеВыполнено = УчетВзаиморасчетовОтложенноеПроведение.ЗапуститьОтложенныеРасчетыИзФормы(
		ЭтотОбъект,
		Объект.Организация,
		КонецДня(Объект.ДатаОстатков));
	
	Возврат ЗаданиеВыполнено;

КонецФункции

&НаКлиенте
Процедура ОжидатьВыполнениеОтложенныхРасчетов()

	ПрогрессорАктуализации = "0%.";
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеОтложенныхРасчетов", 1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеОтложенныхРасчетов()

	Попытка
		Если ЗначениеЗаполнено(ИдентификаторЗаданияОтложенныеРасчеты)
			И ЗаданиеВыполнено(ИдентификаторЗаданияОтложенныеРасчеты) Тогда 

			ЗагрузитьДанныеПослеОтложенногоРасчета();
			ПоказатьРезультатОтложенногоРасчета();
		
		Иначе
			
			ЗакрытиеМесяцаКлиент.ОбновитьПроцентПрогресса(ЭтотОбъект, ИдентификаторЗаданияОтложенныеРасчеты);
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеОтложенныхРасчетов", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
				
		КонецЕсли;
	Исключение
		ИдентификаторЗаданияОтложенныеРасчеты = Неопределено;
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРезультатОтложенногоРасчета()

	Если ЭтоАдресВременногоХранилища(АдресХранилищаСОшибками) Тогда
		ОбщегоНазначенияБПКлиент.ОткрытьФормуОшибокПерепроведения(ЭтотОбъект, АдресХранилищаСОшибками);
	КонецЕсли;
	
	Элементы.ФормаНапомнить.Доступность = Истина;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеПослеОтложенногоРасчета()
	
	УчетВзаиморасчетовОтложенноеПроведение.ЗагрузитьДанныеПослеОтложенногоРасчета(
		ЭтотОбъект,
		Объект.Организация,
		КонецДня(Объект.ДатаОстатков));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
