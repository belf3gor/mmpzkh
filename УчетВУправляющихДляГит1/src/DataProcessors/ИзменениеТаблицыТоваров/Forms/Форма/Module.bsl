#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Параметры.АдресХранилищаТовары) Тогда
		ТекстСообщения = НСтр("ru='Непосредственное открытие обработки изменения таблицы товаров не предусмотрено.
				|Для открытия обработки можно воспользоваться командой ""Изменить"" в формах документов'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	//заполним реквизиты формы из переданных параметров
	СписокСвойств = "АдресХранилищаТовары, ЗаполнятьЦеныПоПокупке, ДокументСсылка, ДокументДата, ДокументОрганизация, ПоказыватьСкидку,
		|ДокументВалюта, ДокументКурс, ДокументКратность, ДокументБезНДС, НДСНеВыделять, ДокументСуммаВключаетНДС, ДокументТипЦен, ДокументСклад, ИсключатьРеквизиты";
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры, СписокСвойств);
	Если Не ПравоДоступа("Просмотр", Метаданные.Справочники.ТипыЦенНоменклатуры) Тогда
		ДокументТипЦен = Неопределено;
	КонецЕсли;
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(Параметры.АдресХранилищаТовары);
	Объект.Товары.Загрузить(ТаблицаТоваров);
	
	//Установим пометку и заполним номер строки документа
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		СтрокаТабличнойЧасти.Пометка 					= Истина;
		СтрокаТабличнойЧасти.НомерСтрокиДокумента 		= СтрокаТабличнойЧасти.НомерСтроки;
		СтрокаТабличнойЧасти.НоменклатураДоИзменения 	= СтрокаТабличнойЧасти.Номенклатура;
	КонецЦикла;
	
	Если Параметры.Свойство("ИмяТаблицы") Тогда
		ИмяТаблицы = Параметры.ИмяТаблицы;
	Иначе
		ИмяТаблицы = "Товары";
	КонецЕсли;
	
	Если Параметры.Свойство("ИменаТаблицИсточников") Тогда
		ИменаТаблицИсточников = Параметры.ИменаТаблицИсточников;
	Иначе
		ИменаТаблицИсточников.Добавить("Товары");
	КонецЕсли;
	
	Если ИменаТаблицИсточников.НайтиПоЗначению("Товары") <> Неопределено Тогда
		ИменаТаблицИсточников.Добавить("Продукция");
	КонецЕсли; 
	
	Если Параметры.Свойство("РазрешитьУслуги") Тогда
		РазрешитьУслуги = Параметры.РазрешитьУслуги;
	КонецЕсли;
	
	ПодготовитьФормуНаСервере();
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Модифицированность И Объект.Товары.Количество() > 0 Тогда
		
		Отказ = Истина;
		
		Если ЗавершениеРаботы Тогда
			Возврат;
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ВопросПеренестиИзмененияЗавершение", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'Перенести изменения в документ?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПеренестиИзмененияЗавершение(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		Модифицированность = Ложь;
		ПеренестиИзмененияВДокумент();
	ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ОбработкаВыбораНаСервере(ВыбранноеЗначение);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТекущееДействиеПриИзменении(Элемент)
	
	СохранитьТекущееДействие(ТекущееДействие, ДокументСсылка);
	
	УстановитьВариантыЗначенийПоУмолчанию(ЭтотОбъект);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)

	Модифицированность = Истина;
	ОбновитьИтоги(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		ОбновитьИтоги(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		Элементы.Товары.ТекущиеДанные.Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ПараметрыСтроки = Новый Структура("Номенклатура, Количество, Цена, Сумма, СтавкаНДС, СпособУчетаНДС, СуммаНДС,
		|НомерГТД, СтранаПроисхождения, КоличествоМест, ЕдиницаИзмерения, Коэффициент, 
		|СчетУчета, СчетДоходов, ЭтоУслуга");
	ЗаполнитьЗначенияСвойств(ПараметрыСтроки, СтрокаТабличнойЧасти);
	
	НоменклатураПриИзмененииНаСервере(ПараметрыСтроки);
	
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ПараметрыСтроки);
	
	РассчитатьСуммыСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПоказыватьСуммуНДС, ДокументСуммаВключаетНДС);
	
	//очистим номер строки документа при изменении номенклатуры, чтобы при переносе в документ сработали обработчики заполнения документа
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.НомерСтрокиДокумента) И 
		СтрокаТабличнойЧасти.НоменклатураДоИзменения <> СтрокаТабличнойЧасти.Номенклатура Тогда
		СтрокаТабличнойЧасти.НомерСтрокиДокумента = 0;
	КонецЕсли;
	СтрокаТабличнойЧасти.НоменклатураДоИзменения = СтрокаТабличнойЧасти.Номенклатура;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСодержаниеПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Товары.ТекущиеДанные;
	РаботаСНоменклатуройКлиент.СодержаниеПриИзменении(ТекущиеДанные, ДокументДата);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.Коэффициент = 1;

КонецПроцедуры  

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)

	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммыСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПоказыватьСуммуНДС, ДокументСуммаВключаетНДС);
	
	Если ПоказыватьСуммуВРознице И ПоказыватьКоличество Тогда
		СтрокаТабличнойЧасти.СуммаВРознице = СтрокаТабличнойЧасти.ЦенаВРознице * СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммыСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПоказыватьСуммуНДС, ДокументСуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПроцентСкидкиПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.СуммаСкидки = СтрокаТабличнойЧасти.Сумма * СтрокаТабличнойЧасти.ПроцентСкидки / 100;
	
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументСуммаВключаетНДС);
	ПересчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ДокументСуммаВключаетНДС);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаСкидкиПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.ПроцентСкидки = СтрокаТабличнойЧасти.СуммаСкидки / СтрокаТабличнойЧасти.Сумма * 100;
	
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументСуммаВключаетНДС);
	ПересчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ДокументСуммаВключаетНДС);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаВРозницеПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	Если ПоказыватьСуммуВРознице И ПоказыватьКоличество Тогда
		СтрокаТабличнойЧасти.СуммаВРознице = СтрокаТабличнойЧасти.ЦенаВРознице * СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти);
	
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументСуммаВключаетНДС);
	ПересчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ДокументСуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаВРозницеПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	Если ПоказыватьКоличество И СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.ЦенаВРознице = СтрокаТабличнойЧасти.СуммаВРознице / СтрокаТабличнойЧасти.Количество;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументСуммаВключаетНДС);
	ПересчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ДокументСуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ПересчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ДокументСуммаВключаетНДС);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	
	Модифицированность = Ложь;
	ПеренестиИзмененияВДокумент();
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьБезПереноса(Команда)
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействие(Команда)

	Если ТекущееДействие = "УстановитьЦеныПоТипу" Тогда
		
		Если НЕ ЗначениеЗаполнено(ВариантЗначенияТипЦенНоменклатуры) Тогда
			ТекстСообщения = НСтр("ru = 'Не указан тип цен номенклатуры'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ВариантЗначенияТипЦенНоменклатуры");
			Возврат;
		КонецЕсли;
		
		УстановитьЦеныПоТипу(ВариантЗначенияТипЦенНоменклатуры);
		
	ИначеЕсли ТекущееДействие = "УстановитьЦеныВРозницеПоТипу" Тогда
		
		Если НЕ ЗначениеЗаполнено(ВариантЗначенияТипЦенНоменклатуры) Тогда
			ТекстСообщения = НСтр("ru = 'Не указан тип цен номенклатуры'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ВариантЗначенияТипЦенНоменклатуры");
			Возврат;
		КонецЕсли;
		
		УстановитьЦеныВРозницеПоТипу(ВариантЗначенияТипЦенНоменклатуры);

	ИначеЕсли ТекущееДействие = "РаспределитьСуммуПоСуммам" Тогда
	
		Если НЕ ЗначениеЗаполнено(ВариантЗначенияЧислоСумма) Тогда
			ТекстСообщения = НСтр("ru = 'Не указана сумма распределения! Распределение невозможно'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ВариантЗначенияЧислоСумма");
			Возврат;
		КонецЕсли;
		
		РаспределитьСуммуПоКолонке("Сумма", ВариантЗначенияЧислоСумма);
		
	ИначеЕсли ТекущееДействие = "РаспределитьСуммуПоКоличеству" Тогда
		
		Если НЕ ЗначениеЗаполнено(ВариантЗначенияЧислоСумма) Тогда
			ТекстСообщения = НСтр("ru = 'Не указана сумма распределения! Распределение невозможно'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ВариантЗначенияЧислоСумма");
			Возврат;
		КонецЕсли;
		
		РаспределитьСуммуПоКолонке("Количество", ВариантЗначенияЧислоСумма);
		
	ИначеЕсли ТекущееДействие = "ИзменитьЦеныНаПроцент" Тогда
		
		Если НЕ ЗначениеЗаполнено(ВариантЗначенияЧислоПроцент) Тогда
			ТекстСообщения = НСтр("ru = 'Не указан процент'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ВариантЗначенияЧислоПроцент");
			Возврат;
		КонецЕсли;
		
		ИзменитьЦенуНаПроцент(ВариантЗначенияЧислоПроцент);
		
	ИначеЕсли ТекущееДействие = "ИзменитьЦеныВРозницеНаПроцент" Тогда
		
		Если НЕ ЗначениеЗаполнено(ВариантЗначенияЧислоПроцент) Тогда
			ТекстСообщения = НСтр("ru = 'Не указан процент'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ВариантЗначенияЧислоПроцент");
			Возврат;
		КонецЕсли;
		
		ИзменитьЦенуВРозницеНаПроцент(ВариантЗначенияЧислоПроцент);
		
	ИначеЕсли ТекущееДействие = "УстановитьПроцентСкидки" Тогда
		
		Если НЕ ЗначениеЗаполнено(ВариантЗначенияЧислоПроцент) Тогда
			ТекстСообщения = НСтр("ru = 'Не указан процент'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ВариантЗначенияЧислоПроцент");
			Возврат;
		КонецЕсли;
		
		УстановитьПроцентСкидки(ВариантЗначенияЧислоПроцент);
		
	ИначеЕсли ТекущееДействие = "ОкруглитьЦеныДо" Тогда
		
		Если НЕ ЗначениеЗаполнено(ВариантЗначенияПорядокОкругления) Тогда
			ТекстСообщения = НСтр("ru = 'Не указан порядок округления'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ВариантЗначенияПорядокОкругления");
			Возврат;
		КонецЕсли;
		
		ОкруглитьЦену(ВариантЗначенияПорядокОкругления);
			
	ИначеЕсли ТекущееДействие = "ОкруглитьЦеныВРозницеДо" Тогда
		
		Если НЕ ЗначениеЗаполнено(ВариантЗначенияПорядокОкругления) Тогда
			ТекстСообщения = НСтр("ru = 'Не указан порядок округления'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ВариантЗначенияПорядокОкругления");
			Возврат;
		КонецЕсли;
		
		ОкруглитьЦенуВРознице(ВариантЗначенияПорядокОкругления);
		
	ИначеЕсли ТекущееДействие = "УстановитьСтавкуНДС" Тогда
		
		Если НЕ ЗначениеЗаполнено(ВариантЗначенияСтавкаНДС) Тогда
			ТекстСообщения = НСтр("ru = 'Не указана ставка НДС'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ВариантЗначенияСтавкаНДС");
			Возврат;
		КонецЕсли;
		
		УстановитьСтавкуНДС(ВариантЗначенияСтавкаНДС);
		
	ИначеЕсли ТекущееДействие = "УстановитьСпособУчетаНДС" Тогда
		
		Если НЕ ЗначениеЗаполнено(ВариантЗначенияСпособУчетаНДС) Тогда
			ТекстСообщения = НСтр("ru = 'Не указан способ учета НДС'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ВариантЗначенияСпособУчетаНДС");
			Возврат;
		КонецЕсли;
		
		УстановитьСпособУчетаНДС(ВариантЗначенияСпособУчетаНДС);
		
	ИначеЕсли ТекущееДействие = "УстановитьНомерГТД" Тогда
		
		Если НЕ ЗначениеЗаполнено(ВариантЗначенияНомерГТД) Тогда
			ТекстСообщения = НСтр("ru = 'Не указан номер ГТД'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ВариантЗначенияНомерГТД");
			Возврат;
		КонецЕсли;
		
		УстановитьНомерГТД(ВариантЗначенияНомерГТД);
		
	ИначеЕсли ТекущееДействие = "УстановитьСтрануПроисхождения" Тогда
		
		Если НЕ ЗначениеЗаполнено(ВариантЗначенияСтранаПроисхождения) Тогда
			ТекстСообщения = НСтр("ru = 'Не указана страна происхождения'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ВариантЗначенияСтранаПроисхождения");
			Возврат;
		КонецЕсли;
		
		УстановитьСтрануПроисхождения(ВариантЗначенияСтранаПроисхождения);
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ТекущееДействие) Тогда
		
		ТекстСообщения = НСтр("ru = 'Не указано действие'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ТекущееДействие");
		Возврат;
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'Действие указано не верно!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ТекущееДействие");
		Возврат;
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлажки(Команда)

	УстановитьПометкуВСтрокахТабличнойЧасти(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)

	УстановитьПометкуВСтрокахТабличнойЧасти(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзДокумента(Команда)
	
	Если ТипыДокументовДляВыбора.Количество() = 0 Тогда
		
		ЗаполнитьТипыДокументовДляВыбора(ТипыДокументовДляВыбора, ИменаТаблицИсточников);
	
	КонецЕсли; 
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьИзДокументаЗавершение", ЭтотОбъект);
	
	ТипыДокументовДляВыбора.ПоказатьВыборЭлемента(ОписаниеОповещения, НСтр("ru='Выбор типа данных'"));
	
КонецПроцедуры
 
 #КонецОбласти 

#Область СлужебныеПроцедурыИФункции

///////////////////////////////////////////////////////////////////////////////
// Операции с формой и элементами формы

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// Содержание
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСодержание");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Товары.ЭтоУслуга", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСодержание");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПоказыватьСодержание", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	// ТоварыСуммаНДС, ТоварыВсего

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаНДС");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВсего");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПоказыватьСуммуНДС", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыЦена

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыЦена");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПоказыватьЦену", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыНомерГТД

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыНомерГТД");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПоказыватьНомерГТД", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыСтранаПроисхождения

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтранаПроисхождения");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПоказыватьСтрануПроисхождения", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыСтавкаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСтавкаНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПоказыватьСтавкуНДС", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыЦенаВРознице

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыЦенаВРознице");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПоказыватьЦенуВРознице", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыСумма

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСумма");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПоказыватьСумму", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// ТоварыСуммаСкидки

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаСкидки");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыПроцентСкидки");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПоказыватьСкидку", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыВалюта

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыВалюта");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПоказыватьВалюту", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыСуммаВРознице

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСуммаВРознице");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПоказыватьСуммуВРознице", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыКоличество

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыКоличество");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПоказыватьКоличество", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ТоварыСпособУчетаНДС

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТоварыСпособУчетаНДС");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПоказыватьСпособУчетаНДС", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяВариантаЗначения(Знач ВариантыЗначений, Знач Действие)
	
	НайденныеСтроки = ВариантыЗначений.НайтиСтроки(Новый Структура("Действие", Действие));
	Если НайденныеСтроки.Количество() <> 0 Тогда
		ИмяВариантаЗначения = НайденныеСтроки[0].ИмяВариантаЗначения;
	Иначе
		ИмяВариантаЗначения = "";
	КонецЕсли;
	
	Возврат ИмяВариантаЗначения;
	
КонецФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	ИнициализироватьРеквизитыФормы();
	СформироватьСписокДействий(Элементы.ТекущееДействие.СписокВыбора);

	//загрузим текущее действие из сохраненных настроек
	ВидДокумента = ДокументСсылка.Метаданные().Имя;
	ТекущееДействие = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ОбработкаТабличнойЧастиТекущееДействие", ВидДокумента);
	Если Элементы.ТекущееДействие.СписокВыбора.НайтиПоЗначению(ТекущееДействие) = Неопределено И Элементы.ТекущееДействие.СписокВыбора.Количество() > 0 Тогда
		ТекущееДействие = Элементы.ТекущееДействие.СписокВыбора[0].Значение;
	КонецЕсли;
	
	ЗаполнитьДобавленныеКолонкиТаблиц();
	
	СформироватьНадписьЦеныИВалюта(ЭтаФорма);
	
	ВариантыЗначений.Загрузить(ВариантыЗначений());
	
	УстановитьВариантыЗначенийПоУмолчанию(ЭтотОбъект);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВариантыЗначенийПоУмолчанию(Форма)
	
	Форма.ВариантЗначенияЧислоСумма = 0;
	Форма.ВариантЗначенияЧислоПроцент = 0;
	Форма.ВариантЗначенияТипЦенНоменклатуры = Форма.ДокументТипЦен;
	Форма.ВариантЗначенияТипЦенНоменклатуры = Форма.ДокументТипЦенРозничнойТорговли;
	Форма.ВариантЗначенияПорядокОкругления = Форма.ПорядокОругленияПоУмолчанию;
	Форма.ВариантЗначенияПорядокОкругления = Форма.ПорядокОругленияПоУмолчаниюВРознице;
	Форма.ВариантЗначенияСтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(Форма.ДокументДата);
	Форма.ВариантЗначенияСпособУчетаНДС = ПредопределенноеЗначение("Перечисление.СпособыУчетаНДС.ПринимаетсяКВычету");
	Форма.ВариантЗначенияНомерГТД = ПредопределенноеЗначение("Справочник.НомераГТД.ПустаяСсылка");
	Форма.ВариантЗначенияСтранаПроисхождения = ПредопределенноеЗначение("Справочник.СтраныМира.ПустаяСсылка");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВариантыЗначений()
	
	ВариантыЗначений = Новый ТаблицаЗначений;
	ВариантыЗначений.Колонки.Добавить("Действие", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	ВариантыЗначений.Колонки.Добавить("ИмяВариантаЗначения", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	ДобавитьВариантЗначения(ВариантыЗначений, "УстановитьЦеныПоТипу", "ТипЦенНоменклатуры");
	ДобавитьВариантЗначения(ВариантыЗначений, "УстановитьЦеныВРозницеПоТипу", "ТипЦенНоменклатуры");
	ДобавитьВариантЗначения(ВариантыЗначений, "РаспределитьСуммуПоСуммам", "ЧислоСумма");
	ДобавитьВариантЗначения(ВариантыЗначений, "РаспределитьСуммуПоКоличеству", "ЧислоСумма");
	ДобавитьВариантЗначения(ВариантыЗначений, "ИзменитьЦеныНаПроцент", "ЧислоПроцент");
	ДобавитьВариантЗначения(ВариантыЗначений, "ИзменитьЦеныВРозницеНаПроцент", "ЧислоПроцент");
	ДобавитьВариантЗначения(ВариантыЗначений, "УстановитьПроцентСкидки", "ЧислоПроцент");
	ДобавитьВариантЗначения(ВариантыЗначений, "ОкруглитьЦеныДо", "ПорядокОкругления");
	ДобавитьВариантЗначения(ВариантыЗначений, "ОкруглитьЦеныВРозницеДо", "ПорядокОкругления");
	ДобавитьВариантЗначения(ВариантыЗначений, "УстановитьСтавкуНДС", "СтавкаНДС");
	ДобавитьВариантЗначения(ВариантыЗначений, "УстановитьСпособУчетаНДС", "СпособУчетаНДС");
	ДобавитьВариантЗначения(ВариантыЗначений, "УстановитьНомерГТД", "НомерГТД");
	ДобавитьВариантЗначения(ВариантыЗначений, "УстановитьСтрануПроисхождения", "СтранаПроисхождения");
	
	Возврат ВариантыЗначений;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДобавитьВариантЗначения(ВариантыЗначений, Действие, ИмяВариантаЗначения)
	
	НоваяСтрока = ВариантыЗначений.Добавить();
	НоваяСтрока.Действие = Действие;
	НоваяСтрока.ИмяВариантаЗначения = ИмяВариантаЗначения;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	ИмяВарианта = ИмяВариантаЗначения(Форма.ВариантыЗначений, Форма.ТекущееДействие);
	ИмяПоляВводаТекущегоДействия = СтрШаблон("ВариантЗначения%1", ИмяВарианта);
	
	Для Каждого ПолеВводаВариантаЗначения Из Элементы.ВариантЗначения.ПодчиненныеЭлементы Цикл
		ПолеВводаВариантаЗначения.Видимость = (ПолеВводаВариантаЗначения.Имя = ИмяПоляВводаТекущегоДействия);
	КонецЦикла;
	
	Элементы.Шапка.Видимость = Элементы.ТекущееДействие.СписокВыбора.Количество() > 0;
	Элементы.ИтогиСкидка.Видимость = Форма.ПоказыватьСкидку;
	Элементы.ИтогиВсегоНДС.Видимость = Форма.ПоказыватьСуммуНДС;
	
	ОбновитьИтоги(Форма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьТипыДокументовДляВыбора(СписокНужныхТипов, ИменаТаблицИсточников)

	// В случае добавления из документа должны выбираться только документы с таб. частью "Товары",
	// в которой есть реквизиты "Номенклатура", "Количество" доступные по функциональным опциям.
	
	СписокНужныхТипов.Очистить();
	
	Для Каждого Документ Из Метаданные.Документы Цикл
		
		Если Не ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(Документ) Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПравоДоступа("Просмотр", Документ) Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ИмяТаблицыИсточника Из ИменаТаблицИсточников Цикл
			
			Если Документ.ТабличныеЧасти.Найти(ИмяТаблицыИсточника) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("Номенклатура", Документ, ИмяТаблицыИсточника)
				И ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("Количество",  Документ, ИмяТаблицыИсточника) Тогда
				
				СписокНужныхТипов.Добавить(Документ.Имя, Документ.Представление());
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьРеквизитыФормы()
	
	Если ЗначениеЗаполнено(ИсключатьРеквизиты) Тогда
	
		Исключения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИсключатьРеквизиты, ",",,Истина);
	
	Иначе
	
		Исключения = Новый Массив;
	
	КонецЕсли; 

	ДокументМетаданные = ДокументСсылка.Метаданные();
	
	ВалютаРегламентированногоУчета 	= ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ПорядокОругленияПоУмолчанию         = Перечисления.ПорядкиОкругления.Окр0_01;
	ПорядокОругленияПоУмолчаниюВРознице = Перечисления.ПорядкиОкругления.Окр0_01;
		
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьТипыЦенНоменклатуры") Тогда
		ОбрабатыватьПоТипуЦен = Ложь;
	Иначе
	
		ПравоПросмотраЦен = ПравоДоступа("Просмотр", Метаданные.Справочники.ТипыЦенНоменклатуры);
	
		ОбрабатыватьПоТипуЦен = ПравоПросмотраЦен И ОбщегоНазначения.ЕстьРеквизитОбъекта("ТипЦен", ДокументМетаданные);
		
		Если ПравоПросмотраЦен Тогда
			Если ЗначениеЗаполнено(ДокументСклад) Тогда
				ДокументТипЦенРозничнойТорговли = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСклад, "ТипЦенРозничнойТорговли");
			КонецЕсли;
			Если ЗначениеЗаполнено(ДокументТипЦен) Тогда
				ПорядокОругленияПоУмолчанию = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументТипЦен, "ПорядокОкругления");	
			КонецЕсли;
			Если ЗначениеЗаполнено(ДокументТипЦенРозничнойТорговли) Тогда
				ПорядокОругленияПоУмолчаниюВРознице = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
					ДокументТипЦенРозничнойТорговли, 
					"ПорядокОкругления");	
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПоказыватьКоличество 			= ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("Количество", 
													ДокументМетаданные, ИмяТаблицы);
	ПоказыватьЦену 					= ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("Цена", 
													ДокументМетаданные, ИмяТаблицы) И Исключения.Найти("Цена") = Неопределено;
	ПоказыватьСумму 				= ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("Сумма", 
													ДокументМетаданные, ИмяТаблицы)  И Исключения.Найти("Сумма") = Неопределено;;
	ПоказыватьСтавкуНДС 			= ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("СтавкаНДС", 
													ДокументМетаданные, ИмяТаблицы) И НЕ ДокументБезНДС И НЕ НДСНеВыделять;
	ПоказыватьСуммуНДС 				= ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("СуммаНДС", 
													ДокументМетаданные, ИмяТаблицы) И НЕ ДокументБезНДС И НЕ НДСНеВыделять;
	ПоказыватьЦенуВРознице			= ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("ЦенаВРознице", 
													ДокументМетаданные, ИмяТаблицы);
	ПоказыватьСуммуВРознице			= ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("СуммаВРознице", 
													ДокументМетаданные, ИмяТаблицы);
	ПоказыватьВалюту 				= ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("Валюта", 
													ДокументМетаданные, ИмяТаблицы);
	ПоказыватьНомерГТД 				= ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("НомерГТД", 
													ДокументМетаданные, ИмяТаблицы) И ПолучитьФункциональнуюОпцию("ВедетсяУчетИмпортныхТоваров");
	ПоказыватьСтрануПроисхождения	= ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("СтранаПроисхождения", 
													ДокументМетаданные, ИмяТаблицы) И ПолучитьФункциональнуюОпцию("ВедетсяУчетИмпортныхТоваров");
	ПоказыватьСодержание			= ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента("Содержание", 
													ДокументМетаданные, ИмяТаблицы);
	
	Если ЗначениеЗаполнено(ДокументСклад) Тогда
		ТипСклада = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСклад, "ТипСклада");
		ОбрабатыватьЦеныСуммыВРознице = (ТипСклада = Перечисления.ТипыСкладов.НеавтоматизированнаяТорговаяТочка);
	Иначе
		ОбрабатыватьЦеныСуммыВРознице = Ложь;
	КонецЕсли;
	
	ПоказыватьЦенуВРознице  = ПоказыватьЦенуВРознице И ОбрабатыватьЦеныСуммыВРознице;
	ПоказыватьСуммуВРознице = ПоказыватьСуммуВРознице И ОбрабатыватьЦеныСуммыВРознице;
	
	Если ЗначениеЗаполнено(ДокументОрганизация) Тогда
		РаздельныйУчетНДСНаСчете19 = УчетнаяПолитика.РаздельныйУчетНДСНаСчете19(ДокументОрганизация, ДокументДата);
		ПоказыватьСпособУчетаНДС = РаздельныйУчетНДСНаСчете19 И ОбщегоНазначенияБП.ЕстьРеквизитТабЧастиДокумента(
									"СпособУчетаНДС", ДокументМетаданные, ИмяТаблицы);
	Иначе
		ПоказыватьСпособУчетаНДС = Ложь;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики действий обработки

&НаСервере
Процедура ДобавитьДанныеИзДокумента(ДокументИсточник, ИмяТаблицыИсточника)

	Если НЕ ЗначениеЗаполнено(ДокументИсточник) Тогда
		Возврат;
	КонецЕсли; 
	
	МетаданныеДокументаИсточника 	= ДокументИсточник.Метаданные();
	
	Если МетаданныеДокументаИсточника.ТабличныеЧасти.Найти(ИмяТаблицыИсточника) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// получим валюту документа-источника
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВалютаДокумента", МетаданныеДокументаИсточника) Тогда 
		ВалютаДокументаИсточника 	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументИсточник, "ВалютаДокумента");
		Если ОбщегоНазначения.ЕстьРеквизитОбъекта("КурсДокумента", МетаданныеДокументаИсточника) Тогда
			КурсДокументаИсточника		= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументИсточник, "КурсДокумента");
			КратностьДокументаИсточника	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументИсточник, "КратностьДокумента");
		ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("КурсВзаиморасчетов", МетаданныеДокументаИсточника) Тогда
			КурсДокументаИсточника		= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументИсточник, "КурсВзаиморасчетов");
			КратностьДокументаИсточника	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументИсточник, "КратностьВзаиморасчетов");
		Иначе
			КурсДокументаИсточника		= 0;
			КратностьДокументаИсточника	= 1;
		КонецЕсли;
	Иначе
		ВалютаДокументаИсточника 	= ВалютаРегламентированногоУчета; 
		КурсДокументаИсточника		= 1;
		КратностьДокументаИсточника	= 1;
	КонецЕсли;
	
	// получим пометку СуммаВключаетНДС документа-источника
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("СуммаВключаетНДС", МетаданныеДокументаИсточника) Тогда 
		СуммаВключаетНДСИсточника	= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументИсточник, "СуммаВключаетНДС");
	Иначе
		СуммаВключаетНДСИсточника 	= Ложь;	
	КонецЕсли;
	
	// получим табличную часть "Товары" документа-источника
	ТекстПолей = "";
	РеквизитыТоваровИсточника = МетаданныеДокументаИсточника.ТабличныеЧасти.Найти(ИмяТаблицыИсточника).Реквизиты;
	СтруктураРеквизитов = ПолучитьСтруктуруОбрабатываемыхРеквизитовТабличнойЧасти(РеквизитыТоваровИсточника); 
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение), СокрЛП(КлючИЗначение.Значение), СокрЛП(КлючИЗначение.Ключ));
		Псевдоним = СокрЛП(КлючИЗначение.Ключ);
		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
			|	" + ИмяПоля + " КАК " + Псевдоним;
	КонецЦикла;
 	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&ТекстПолей
	|ИЗ
	|	&ТабличнаяЧастьТоварыДокументаИсточника КАК ПсевдонимТовары
	|ГДЕ
	|	ПсевдонимТовары.Ссылка = &Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТекстПолей", ТекстПолей);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ТабличнаяЧастьТоварыДокументаИсточника", 
													МетаданныеДокументаИсточника.ПолноеИмя() + "." + ИмяТаблицыИсточника);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументИсточник);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаТоваровДокумента = РезультатЗапроса.Выгрузить();

	// добавим полученную таблицу в табличную часть обработки
	Для Каждого СтрокаТовара ИЗ ТаблицаТоваровДокумента Цикл
		
		// Ищем добавляемую позицию в существующей таблице по номенклатуре и по цене, в случае, когда цена видима.
		// Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора = Новый Структура("Номенклатура");
		СтруктураОтбора.Номенклатура  = СтрокаТовара.Номенклатура;
		
		Если СтруктураРеквизитов.Свойство("НомерГТД") Тогда
			СтруктураОтбора.Вставить("НомерГТД", СтрокаТовара.НомерГТД);
		КонецЕсли;
		
		Если СтруктураРеквизитов.Свойство("СтранаПроисхождения") Тогда
			СтруктураОтбора.Вставить("СтранаПроисхождения", СтрокаТовара.СтранаПроисхождения);
		КонецЕсли;
		
		// пересчитаем цену строки документа-источника под параметры обработки для корректности отбора
		// высчитанное значение и будет значением цены в случае добавления новой строки обработки 
		НоваяЦенаСтроки = 0;
		Если СтруктураРеквизитов.Свойство("Цена") И ПоказыватьЦену Тогда
			
			Если ПоказыватьВалюту И СтруктураРеквизитов.Свойство("Валюта") И ЗначениеЗаполнено(СтрокаТовара.Валюта) Тогда
				ВалютаПересчета 	= СтрокаТовара.Валюта;
				КурсПересчета		= 0;
				КратностьПересчета 	= 1;
			ИначеЕсли ЗначениеЗаполнено(ДокументВалюта) Тогда
				ВалютаПересчета 	= ДокументВалюта;	
				КурсПересчета		= ДокументКурс;
				КратностьПересчета 	= ДокументКратность;
			Иначе
				ВалютаПересчета 	= ВалютаРегламентированногоУчета;
				КурсПересчета		= 1;
				КратностьПересчета 	= 1;
			КонецЕсли;
			
			Если СтруктураРеквизитов.Свойство("Валюта") И ЗначениеЗаполнено(СтрокаТовара.Валюта) Тогда
				ВалютаЦены			= СтрокаТовара.Валюта;
				КурсЦены			= 0;
				КратностьЦены 		= 1;
			ИначеЕсли ЗначениеЗаполнено(ВалютаДокументаИсточника) Тогда
				ВалютаЦены 			= ВалютаДокументаИсточника;
				КурсЦены			= КурсДокументаИсточника;
				КратностьЦены 		= КратностьДокументаИсточника;
			Иначе
				ВалютаЦены 			= ВалютаРегламентированногоУчета;
				КурсЦены			= 1;
				КратностьЦены 		= 1;
			КонецЕсли;
			
			Цена = ПолучитьЦенуПослеПересчета(СтрокаТовара.Цена, ВалютаЦены, ВалютаПересчета, ДокументДата, 
					КурсЦены, КурсПересчета, КратностьЦены, КратностьПересчета);
					
			Если СтруктураРеквизитов.Свойство("СтавкаНДС") Тогда
						
				НоваяЦенаСтроки = УчетНДСКлиентСервер.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
						СуммаВключаетНДСИсточника,
						ДокументСуммаВключаетНДС,
						УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДС(СтрокаТовара.СтавкаНДС));
						
			Иначе
				
				НоваяЦенаСтроки = Цена;
						
			КонецЕсли;
					
			НоваяЦенаСтроки = Окр(НоваяЦенаСтроки, 2);					

			СтруктураОтбора.Вставить("Цена", НоваяЦенаСтроки);	
			
		КонецЕсли;
		
		// производим поиск строк по структуре отбора
		СтрокаТабличнойЧасти = ОбработкаТабличныхЧастейКлиентСервер.НайтиСтрокуТабЧасти(Объект, "Товары", СтруктураОтбора);
		Если НЕ СтрокаТабличнойЧасти = Неопределено Тогда
			
			// Нашли, увеличиваем количество в первой найденной строке
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + СтрокаТовара.Количество;
			
			// Рассчитаем связанные реквизиты табличной части.
			РассчитатьСуммыСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПоказыватьСуммуНДС, ДокументСуммаВключаетНДС);
			
			Если ПоказыватьСуммуВРознице И ПоказыватьКоличество Тогда
				СтрокаТабличнойЧасти.СуммаВРознице = СтрокаТабличнойЧасти.ЦенаВРознице * СтрокаТабличнойЧасти.Количество;
			КонецЕсли;
			
		Иначе
			
			ЭтоУслуга = ?(ЗначениеЗаполнено(СтрокаТовара.Номенклатура), 
							ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтрокаТовара.Номенклатура, "Услуга"), 
							Истина);
				
			Если НЕ РазрешитьУслуги И ЭтоУслуга Тогда
				Продолжить;
			КонецЕсли;
			
			// добавляем новую строку.
			НоваяСтрока = Объект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТовара);
			
			// новые строки будут по умолчанию помечены.
			НоваяСтрока.Пометка = Истина;
			
			НоваяСтрока.ЭтоУслуга = ЭтоУслуга;
			
			Если ПоказыватьСодержание И ЭтоУслуга 
				И ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
				
				РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(НоваяСтрока.Номенклатура,
					"Наименование, НаименованиеПолное, ПериодичностьУслуги");
				Если ПустаяСтрока(РеквизитыНоменклатуры.НаименованиеПолное) Тогда
					Содержание = РеквизитыНоменклатуры.Наименование;
				Иначе
					Содержание = РеквизитыНоменклатуры.НаименованиеПолное;
				КонецЕсли;
				
				НоваяСтрока.Содержание = РаботаСНоменклатуройКлиентСервер.СодержаниеУслуги(
					Содержание,
					РеквизитыНоменклатуры.ПериодичностьУслуги,
					ДокументДата);
			КонецЕсли;
			
			// пересчитаем связанные реквизиты табличной части.
			
			Если ПоказыватьКоличество Тогда
				
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.ЕдиницаИзмерения) Тогда
					НоваяСтрока.ЕдиницаИзмерения = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НоваяСтрока.Номенклатура, "ЕдиницаИзмерения"); 
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.Коэффициент) Тогда
					НоваяСтрока.Коэффициент = 1;	
				КонецЕсли;
				
			КонецЕсли;
			
			МетаданныеДокумента = ДокументСсылка.Метаданные();
			
			Если ПоказыватьНомерГТД ИЛИ ПоказыватьСтрануПроисхождения Тогда
				
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.НомерГТД) И НЕ ЗначениеЗаполнено(НоваяСтрока.СтранаПроисхождения) Тогда 
					ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(НоваяСтрока, ИмяТаблицы, МетаданныеДокумента);
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЭтаФорма.НДСНеВыделять Тогда
				НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			Иначе
				ПараметрыОбъекта = Новый Структура("Дата, Организация", ДокументДата, ДокументОрганизация);
				ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(НоваяСтрока, ПараметрыОбъекта, ИмяТаблицы, МетаданныеДокумента);
			КонецЕсли;
						
			Если ПоказыватьВалюту Тогда
				
				Если СтруктураРеквизитов.Свойство("Валюта") И ЗначениеЗаполнено(СтрокаТовара.Валюта) Тогда
					НоваяСтрока.Валюта = СтрокаТовара.Валюта;
				ИначеЕсли ЗначениеЗаполнено(ВалютаДокументаИсточника) Тогда
					НоваяСтрока.Валюта = ВалютаДокументаИсточника;	
				Иначе
					НоваяСтрока.Валюта = ВалютаРегламентированногоУчета;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ПоказыватьЦену Тогда
				
				НоваяСтрока.Цена = НоваяЦенаСтроки;
				
			КонецЕсли;
			
			РассчитатьСуммыСтрокиТабличнойЧасти(НоваяСтрока, ПоказыватьСуммуНДС, ДокументСуммаВключаетНДС);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьЦеныПоТипу(УстанавливаемыйТипЦен)

	Если НЕ ЗначениеЗаполнено(УстанавливаемыйТипЦен) Тогда
		Возврат;
	КонецЕсли; 
	
	//	Получим цены нужного типа
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивНоменклатуры", 	Объект.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("ТипЦен", 				УстанавливаемыйТипЦен);
	Запрос.УстановитьПараметр("ДатаЦен", 				ДокументДата);
	Запрос.УстановитьПараметр("ВалютаЦенПоУмолчанию", 	ВалютаРегламентированногоУчета);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СправочникНоменклатура.Ссылка КАК Номенклатура,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Валюта, &ВалютаЦенПоУмолчанию) КАК Валюта,
	|	ЕСТЬNULL(ЦеныНоменклатурыСрезПоследних.Цена, 0) КАК Цена
	|ИЗ
	|	Справочник.Номенклатура КАК СправочникНоменклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|				&ДатаЦен,
	|				Номенклатура В (&МассивНоменклатуры)
	|					И ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних
	|		ПО (ЦеныНоменклатурыСрезПоследних.Номенклатура = СправочникНоменклатура.Ссылка)
	|ГДЕ
	|	СправочникНоменклатура.Ссылка В(&МассивНоменклатуры)";

	ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();

	// Найдем у данной номенклатуры значение цены выбранного типа.
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		
		Если СтрокаТабличнойЧасти.Пометка Тогда

			// Сбросим выборку для последующего поиска.
			ВыборкаИзЗапроса.Сбросить();
			
			// Ищем в выборке номенклатуру.
			Если ВыборкаИзЗапроса.НайтиСледующий(СтрокаТабличнойЧасти.Номенклатура, "Номенклатура")  Тогда
				
				Если ПоказыватьВалюту И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Валюта) Тогда
					ВалютаПересчета 	= СтрокаТабличнойЧасти.Валюта;
					КурсПересчета		= 0;
					КратностьПересчета 	= 1;
				ИначеЕсли ЗначениеЗаполнено(ДокументВалюта) Тогда
					ВалютаПересчета 	= ДокументВалюта;
					КурсПересчета		= ДокументКурс;
					КратностьПересчета 	= ДокументКратность;
				Иначе
					ВалютаПересчета = ВалютаРегламентированногоУчета;
					КурсПересчета		= 1;
					КратностьПересчета 	= 1;
				КонецЕсли;
				
				ЦенаБазовая = ПолучитьЦенуПослеПересчета(ВыборкаИзЗапроса.Цена, ВыборкаИзЗапроса.Валюта, 
										ВалютаПересчета, ДокументДата, , КурсПересчета, , КратностьПересчета);
				
			Иначе
				ЦенаБазовая = 0;
			КонецЕсли;

			СтрокаТабличнойЧасти.Цена = ЦенаБазовая;

			// пересчитаем связанные реквизиты
			РассчитатьСуммыСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПоказыватьСуммуНДС, ДокументСуммаВключаетНДС);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры  

&НаСервере
Процедура УстановитьЦеныВРозницеПоТипу(УстанавливаемыйТипЦенВРознице)

	Если НЕ ЗначениеЗаполнено(УстанавливаемыйТипЦенВРознице) Тогда
		Возврат;
	КонецЕсли; 
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(УстанавливаемыйТипЦенВРознице, 
				"ПорядокОкругления, ОкруглятьВБольшуюСторону"); 
	ПорядокОкругленияТипаЦен			= ЗначенияРеквизитов.ПорядокОкругления;
	ОкруглятьВБольшуюСторонуТипаЦен		= ЗначенияРеквизитов.ОкруглятьВБольшуюСторону;
	
	//	Получим цены нужного типа
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивНоменклатуры", 	Объект.Товары.Выгрузить().ВыгрузитьКолонку("Номенклатура"));
	Запрос.УстановитьПараметр("ТипЦен", 				УстанавливаемыйТипЦенВРознице);
	Запрос.УстановитьПараметр("ДатаЦен", 				ДокументДата);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЦеныНоменклатурыСрезПоследних.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатурыСрезПоследних.Валюта КАК Валюта,
	|	ЦеныНоменклатурыСрезПоследних.Цена КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&ДатаЦен,
	|			Номенклатура В (&МассивНоменклатуры)
	|				И ТипЦен = &ТипЦен) КАК ЦеныНоменклатурыСрезПоследних";
	
	ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();
	
	// Найдем у данной номенклатуры значение цены выбранного типа.
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		
		Если СтрокаТабличнойЧасти.Пометка Тогда
			
			// Сбросим выборку для последующего поиска.
			ВыборкаИзЗапроса.Сбросить();
			
			// Ищем в выборке номенклатуру.
			Если ВыборкаИзЗапроса.НайтиСледующий(СтрокаТабличнойЧасти.Номенклатура,"Номенклатура")  Тогда
	
				 // Нашли базовую цену. Пересчитываем ее в рубли
	            ЦенаБазовая = ПолучитьЦенуПослеПересчета(ВыборкаИзЗапроса.Цена, ВыборкаИзЗапроса.Валюта, 
														ВалютаРегламентированногоУчета, ДокументДата);
														
			Иначе
				ЦенаБазовая = 0;
			КонецЕсли; 
	
			// Не забудем округлить.
			СтрокаТабличнойЧасти.ЦенаВРознице = Обработки.ИзменениеТаблицыТоваров.ОкруглитьЦену(ЦенаБазовая, 
								ПорядокОкругленияТипаЦен, ОкруглятьВБольшуюСторонуТипаЦен); 

			//// пересчитаем связанные реквизиты.
			Если ПоказыватьСуммуВРознице И ПоказыватьКоличество Тогда
				СтрокаТабличнойЧасти.СуммаВРознице = СтрокаТабличнойЧасти.ЦенаВРознице * СтрокаТабличнойЧасти.Количество;
			КонецЕсли;
		
		КонецЕсли; 
		
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура ОкруглитьЦену(ПорядокОкругленияЦены)

	Если НЕ ЗначениеЗаполнено(ПорядокОкругленияЦены) Тогда
		Возврат;
	КонецЕсли; 

	Если ЗначениеЗаполнено(ДокументТипЦен) Тогда
		ОкруглятьВБольшуюСторону = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументТипЦен, "ОкруглятьВБольшуюСторону");
	Иначе
		ОкруглятьВБольшуюСторону = Истина;
	КонецЕсли;

	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		
		Если СтрокаТабличнойЧасти.Пометка Тогда
			
			СтрокаТабличнойЧасти.Цена = Обработки.ИзменениеТаблицыТоваров.ОкруглитьЦену(СтрокаТабличнойЧасти.Цена, 
														ПорядокОкругленияЦены, ОкруглятьВБольшуюСторону); 
			
			//// пересчитаем связанные реквизиты.
			РассчитатьСуммыСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПоказыватьСуммуНДС, ДокументСуммаВключаетНДС);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОкруглитьЦенуВРознице(ПорядокОкругленияЦены)

	Если НЕ ЗначениеЗаполнено(ПорядокОкругленияЦены) Тогда
		Возврат;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ДокументТипЦенРозничнойТорговли) Тогда
		ОкруглятьВБольшуюСторону = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументТипЦенРозничнойТорговли, 
																							"ОкруглятьВБольшуюСторону");
	Иначе
		ОкруглятьВБольшуюСторону = Истина;
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		
		Если СтрокаТабличнойЧасти.Пометка Тогда

			СтрокаТабличнойЧасти.ЦенаВРознице = Обработки.ИзменениеТаблицыТоваров.ОкруглитьЦену(СтрокаТабличнойЧасти.ЦенаВРознице, 
														ПорядокОкругленияЦены, ОкруглятьВБольшуюСторону); 
														
			//// пересчитаем связанные реквизиты.
			Если ПоказыватьСуммуВРознице И ПоказыватьКоличество Тогда
				СтрокаТабличнойЧасти.СуммаВРознице = СтрокаТабличнойЧасти.ЦенаВРознице * СтрокаТабличнойЧасти.Количество;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры 

&НаСервере
Процедура ИзменитьЦенуНаПроцент(ПроцентИзменения)

	Если НЕ ЗначениеЗаполнено(ПроцентИзменения) Тогда
		Возврат;
	КонецЕсли; 

	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		
		Если СтрокаТабличнойЧасти.Пометка Тогда
			
			СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * (100 + ПроцентИзменения) / 100;
			
			// пересчитаем связанные реквизиты.
			РассчитатьСуммыСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПоказыватьСуммуНДС, ДокументСуммаВключаетНДС);
			
		КонецЕсли;
		
	КонецЦикла; 

КонецПроцедуры 

&НаСервере
Процедура ИзменитьЦенуВРозницеНаПроцент(ПроцентИзменения)

	Если НЕ ЗначениеЗаполнено(ПроцентИзменения) Тогда
		Возврат;
	КонецЕсли; 

	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		
		Если СтрокаТабличнойЧасти.Пометка Тогда
			
			СтрокаТабличнойЧасти.ЦенаВРознице = СтрокаТабличнойЧасти.ЦенаВРознице * (100 + ПроцентИзменения) / 100;
			
			// пересчитаем связанные реквизиты.
			Если ПоказыватьСуммуВРознице И ПоказыватьКоличество Тогда
				СтрокаТабличнойЧасти.СуммаВРознице = СтрокаТабличнойЧасти.ЦенаВРознице * СтрокаТабличнойЧасти.Количество;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла; 

КонецПроцедуры 

&НаСервере
Процедура УстановитьПроцентСкидки(ПроцентСкидки)

	Если НЕ ЗначениеЗаполнено(ПроцентСкидки) Тогда
		Возврат;
	КонецЕсли; 

	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		
		Если СтрокаТабличнойЧасти.Пометка Тогда
			
			СтрокаТабличнойЧасти.ПроцентСкидки = ПроцентСкидки;
			СтрокаТабличнойЧасти.СуммаСкидки = СтрокаТабличнойЧасти.Сумма  * ПроцентСкидки / 100;
			
			// пересчитаем связанные реквизиты.
			// Пересчитываем связанные реквизиты.
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументСуммаВключаетНДС);
			ПересчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ДокументСуммаВключаетНДС);
			
		КонецЕсли;
		
	КонецЦикла; 
	

КонецПроцедуры

&НаСервере
Процедура РаспределитьСуммуПоКолонке(ИмяКолонки, СуммаРаспределения)
	
	Если НЕ ЗначениеЗаполнено(СуммаРаспределения) Тогда
		Возврат;
	КонецЕсли; 
	
	Если НЕ (ИмяКолонки = "Количество" ИЛИ ИмяКолонки = "Сумма") Тогда
		Возврат;
	КонецЕсли; 
	
	// Посчитаем общую сумму помеченных позиций
	ОбщаяСумма = 0;
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		Если СтрокаТабличнойЧасти.Пометка Тогда
			ОбщаяСумма = ОбщаяСумма + СтрокаТабличнойЧасти[ИмяКолонки];
		КонецЕсли; 
	КонецЦикла; 
	
	Если ОбщаяСумма = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Общая сумма помеченных строк нулевая! 
																	|Распределение невозможно'"));
		Возврат;
	КонецЕсли; 
		
	// Распределение
	СтрокаМаксимальнойСуммы = Неопределено;  // На эту строку будем относить остаток после распределения (ошибки округления)
	МаксимальнаяСумма       = 0; 			 // Значение максимальной суммы.
	НепогашеннаяСумма       = СуммаРаспределения;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		
		Если СтрокаТабличнойЧасти.Пометка Тогда

			Дельта = СуммаРаспределения * СтрокаТабличнойЧасти[ИмяКолонки] / ОбщаяСумма;
			
			// Если Дельта по модулю оказалась больше, чем осталось погасить
			Если Дельта < 0 Тогда
				Дельта = Макс(НепогашеннаяСумма, Дельта)
			Иначе
				Дельта = Мин(НепогашеннаяСумма, Дельта)
			КонецЕсли; 

			// Проверим текущую сумму на максимум.
			Если СтрокаТабличнойЧасти.Сумма > МаксимальнаяСумма  Тогда
				МаксимальнаяСумма       = СтрокаТабличнойЧасти.Сумма;
				СтрокаМаксимальнойСуммы = СтрокаТабличнойЧасти;
			КонецЕсли;

			// Увеличиваем значение и запоминаем старое.
			ТекущаяСумма             	= СтрокаТабличнойЧасти.Сумма;
			СтрокаТабличнойЧасти.Сумма 	= СтрокаТабличнойЧасти.Сумма + Дельта;
			
			// Остаток нераспределенной суммы надо уменьшать на значение реального изменения
			НепогашеннаяСумма = НепогашеннаяСумма - (СтрокаТабличнойЧасти.Сумма - ТекущаяСумма);

			// Пересчитываем связанные реквизиты.
			ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти);
			//Если ПоказыватьСуммуНДС Тогда
				РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументСуммаВключаетНДС);
				ПересчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ДокументСуммаВключаетНДС);
			//КонецЕсли;
			
		КонецЕсли; 
		
	КонецЦикла;  
		
	// Если что-то осталось, относим на строку с максимальной суммой.
	Если НепогашеннаяСумма > 0 И СтрокаМаксимальнойСуммы <> Неопределено Тогда

		СтрокаМаксимальнойСуммы.Сумма = СтрокаМаксимальнойСуммы.Сумма + НепогашеннаяСумма;
		ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСуммыТабЧасти(СтрокаМаксимальнойСуммы);
		//Если ПоказыватьСуммуНДС Тогда
			РассчитатьСуммуНДСТабЧасти(СтрокаМаксимальнойСуммы, ДокументСуммаВключаетНДС);
			ПересчитатьВсегоСтрокиТабличнойЧасти(СтрокаМаксимальнойСуммы, ДокументСуммаВключаетНДС);
		//КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтавкуНДС(НоваяСтавкаНДС)

	Если НЕ ЗначениеЗаполнено(НоваяСтавкаНДС) Тогда
		Возврат;
	КонецЕсли; 

	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		
		Если СтрокаТабличнойЧасти.Пометка Тогда
			
			СтрокаТабличнойЧасти.СтавкаНДС = НоваяСтавкаНДС;
			
			// Пересчитываем связанные реквизиты.
			РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументСуммаВключаетНДС);
			ПересчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ДокументСуммаВключаетНДС);
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьСпособУчетаНДС(НовыйСпособУчетаНДС)

	Если НЕ ЗначениеЗаполнено(НовыйСпособУчетаНДС) Тогда
		Возврат;
	КонецЕсли; 

	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		
		Если СтрокаТабличнойЧасти.Пометка Тогда
			СтрокаТабличнойЧасти.СпособУчетаНДС = НовыйСпособУчетаНДС;
		КонецЕсли;
		
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура УстановитьНомерГТД(НовыйНомерГТД)

	Если НЕ ЗначениеЗаполнено(НовыйНомерГТД) Тогда
		Возврат;
	КонецЕсли; 

	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		
		Если СтрокаТабличнойЧасти.Пометка Тогда
			СтрокаТабличнойЧасти.НомерГТД = НовыйНомерГТД;
		КонецЕсли;
		
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура УстановитьСтрануПроисхождения(НоваяСтранаПроисхождения)

	Если НЕ ЗначениеЗаполнено(НоваяСтранаПроисхождения) Тогда
		Возврат;
	КонецЕсли; 

	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		
		Если СтрокаТабличнойЧасти.Пометка Тогда
			СтрокаТабличнойЧасти.СтранаПроисхождения = НоваяСтранаПроисхождения;
		КонецЕсли;
		
	КонецЦикла; 

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Прочие операции

&НаСервере
Процедура СформироватьСписокДействий(СписокДействий)

	// Заполним список возможных действий с табличной частью.
	СписокДействий.Очистить();

	ПравоПросмотраЦен = ПравоДоступа("Просмотр", Метаданные.Справочники.ТипыЦенНоменклатуры);
	
	Если ПравоПросмотраЦен И ПоказыватьЦену И ОбрабатыватьПоТипуЦен Тогда
		СписокДействий.Добавить("УстановитьЦеныПоТипу", 				НСтр("ru = 'Установить цены по типу'"));
	КонецЕсли;
	
	Если ПравоПросмотраЦен И ПоказыватьЦенуВРознице  Тогда
		СписокДействий.Добавить("УстановитьЦеныВРозницеПоТипу", 		НСтр("ru = 'Установить цены в рознице по типу'"));
	КонецЕсли;
	
	Если ПоказыватьСтавкуНДС Тогда
		СписокДействий.Добавить("УстановитьСтавкуНДС", 					НСтр("ru = 'Установить ставку НДС'"));
	КонецЕсли;
	
	Если ПоказыватьСпособУчетаНДС Тогда
		СписокДействий.Добавить("УстановитьСпособУчетаНДС",				НСтр("ru = 'Установить способ учета НДС'"));
	КонецЕсли;
	
	Если ПоказыватьНомерГТД Тогда
		СписокДействий.Добавить("УстановитьНомерГТД", 					НСтр("ru = 'Установить номер ГТД'"));
	КонецЕсли;
	
	Если ПоказыватьСтрануПроисхождения Тогда
		СписокДействий.Добавить("УстановитьСтрануПроисхождения", 		НСтр("ru = 'Установить страну происхождения'"));
	КонецЕсли;
	
	Если ПоказыватьЦену Тогда
		СписокДействий.Добавить("ИзменитьЦеныНаПроцент",				НСтр("ru = 'Изменить цены на процент'"));
	КонецЕсли;
	
	Если ПоказыватьСкидку Тогда
		СписокДействий.Добавить("УстановитьПроцентСкидки",					НСтр("ru = 'Установить процент скидки'"));
	КонецЕсли;
	
	Если ПоказыватьЦенуВРознице Тогда
		СписокДействий.Добавить("ИзменитьЦеныВРозницеНаПроцент",		НСтр("ru = 'Изменить цены в рознице на процент'"));
	КонецЕсли;
	
	Если ПоказыватьЦену И ОбрабатыватьПоТипуЦен Тогда
		СписокДействий.Добавить("ОкруглитьЦеныДо", 						НСтр("ru = 'Округлить цены до'"));
	КонецЕсли;
	
	Если ПоказыватьЦенуВРознице Тогда
		СписокДействий.Добавить("ОкруглитьЦеныВРозницеДо",				НСтр("ru = 'Округлить цены в рознице до'"));	
	КонецЕсли;
	
	Если ПоказыватьСумму Тогда
		
		СписокДействий.Добавить("РаспределитьСуммуПоКоличеству", 		НСтр("ru = 'Распределить сумму по количеству'"));
		
		Если ПоказыватьСуммуНДС Тогда
			Если ДокументСуммаВключаетНДС Тогда 
				СписокДействий.Добавить("РаспределитьСуммуПоСуммам", 	НСтр("ru = 'Распределить сумму по сумме с НДС'"));
			Иначе
				СписокДействий.Добавить("РаспределитьСуммуПоСуммам", 	НСтр("ru = 'Распределить сумму по сумме без НДС'"));
			КонецЕсли;
		Иначе
			СписокДействий.Добавить("РаспределитьСуммуПоСуммам", 		НСтр("ru = 'Распределить сумму по сумме'"));
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммыСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, ПоказыватьСуммуНДС, СуммаВключаетНДС)

	ЗначениеПустогоКоличества = ?(СтрокаТабличнойЧасти.ЭтоУслуга, 1, 0);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЗначениеПустогоКоличества);
	
	РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, СуммаВключаетНДС);
	ПересчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, СуммаВключаетНДС);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ДокументСуммаВключаетНДС)
	
	ДанныеСтроки = Новый Структура("Сумма, СуммаСкидки, СтавкаНДС, СуммаНДС");
	
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастейКлиентСервер.РассчитатьСуммуНДСТабЧасти(ДанныеСтроки, ДокументСуммаВключаетНДС);
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеСтроки);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьВсегоСтрокиТабличнойЧасти(СтрокаТабличнойЧасти, СуммаВключаетНДС)

	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС) - СтрокаТабличнойЧасти.СуммаСкидки;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЦенуПослеПересчета(Знач Цена, Знач ВалютаНач, Знач ВалютаКон, Знач ДатаПересчета, 
	Знач КурсНач = Неопределено, Знач КурсКон = Неопределено, Знач КратностьНач = Неопределено, Знач КратностьКон = Неопределено)
	
	Если НЕ ЗначениеЗаполнено(КурсНач) Тогда 		
		КурсКратностьНач 	= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаНач, ДатаПересчета);
		КурсНач 			= КурсКратностьНач.Курс;
		КратностьНач 		= КурсКратностьНач.Кратность;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(КурсКон) Тогда
		КурсКратностьКон 	= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаКон, ДатаПересчета);
		КурсКон 			= КурсКратностьКон.Курс;
		КратностьКон		= КурсКратностьКон.Кратность;
	КонецЕсли;
	
	Возврат РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Цена, ВалютаНач, ВалютаКон,
		КурсНач, КурсКон, КратностьНач, КратностьКон);
	
КонецФункции

&НаСервере
Функция ПолучитьСтруктуруОбрабатываемыхРеквизитовТабличнойЧасти(РеквизитыТабличнойЧасти)

	//ключ - псевдоним в запросе, значение - имя реквизита
	СтруктураРеквизитов = Новый Структура;
	
	СтруктураРеквизитов.Вставить("Номенклатура", 	"Номенклатура");
	СтруктураРеквизитов.Вставить("Количество", 		"Количество");
	
	Если РеквизитыТабличнойЧасти.Найти("КоличествоМест") <> Неопределено Тогда
		СтруктураРеквизитов.Вставить("КоличествоМест", "КоличествоМест");
	КонецЕсли;

	Если РеквизитыТабличнойЧасти.Найти("ЕдиницаИзмерения") <> Неопределено Тогда
		СтруктураРеквизитов.Вставить("ЕдиницаИзмерения", "ЕдиницаИзмерения");
	КонецЕсли;
	
	Если РеквизитыТабличнойЧасти.Найти("Коэффициент") <> Неопределено Тогда
		СтруктураРеквизитов.Вставить("Коэффициент", "Коэффициент");
	КонецЕсли;
	
	Если РеквизитыТабличнойЧасти.Найти("Цена") <> Неопределено Тогда
		СтруктураРеквизитов.Вставить("Цена", "Цена");
	КонецЕсли;
	
	Если РеквизитыТабличнойЧасти.Найти("ЦенаВРознице")  <> Неопределено И ПоказыватьЦенуВРознице Тогда
		СтруктураРеквизитов.Вставить("ЦенаВРознице", "ЦенаВРознице");
	КонецЕсли;
	
	Если РеквизитыТабличнойЧасти.Найти("Сумма")  <> Неопределено И ПоказыватьСумму Тогда
		СтруктураРеквизитов.Вставить("Сумма", "Сумма");
	КонецЕсли;
	
	Если РеквизитыТабличнойЧасти.Найти("СуммаВРознице")  <> Неопределено И ПоказыватьСуммуВРознице Тогда
		СтруктураРеквизитов.Вставить("СуммаВРознице", "СуммаВРознице");
	КонецЕсли;
	
	Если РеквизитыТабличнойЧасти.Найти("СтавкаНДС")  <> Неопределено И ПоказыватьСтавкуНДС Тогда
		СтруктураРеквизитов.Вставить("СтавкаНДС", "СтавкаНДС");
	КонецЕсли;
	
	Если РеквизитыТабличнойЧасти.Найти("СпособУчетаНДС")  <> Неопределено И ПоказыватьСпособУчетаНДС Тогда
		СтруктураРеквизитов.Вставить("СпособУчетаНДС", "СпособУчетаНДС");
	КонецЕсли;
	
	Если РеквизитыТабличнойЧасти.Найти("СуммаНДС")  <> Неопределено И ПоказыватьСуммуНДС Тогда
		СтруктураРеквизитов.Вставить("СуммаНДС", "СуммаНДС");
	КонецЕсли;
	
	Если РеквизитыТабличнойЧасти.Найти("СтранаПроисхождения")  <> Неопределено И ПоказыватьСтрануПроисхождения Тогда
		СтруктураРеквизитов.Вставить("СтранаПроисхождения", "СтранаПроисхождения");
	КонецЕсли;
	
	Если РеквизитыТабличнойЧасти.Найти("НомерГТД")  <> Неопределено И ПоказыватьНомерГТД Тогда
		СтруктураРеквизитов.Вставить("НомерГТД", "НомерГТД");
	КонецЕсли;
	
	Если РеквизитыТабличнойЧасти.Найти("Валюта")  <> Неопределено И ПоказыватьВалюту Тогда
		СтруктураРеквизитов.Вставить("Валюта", "Валюта");
	КонецЕсли;
	
	Если РеквизитыТабличнойЧасти.Найти("Содержание")  <> Неопределено И ПоказыватьСодержание Тогда
		СтруктураРеквизитов.Вставить("Содержание", "Содержание");
	КонецЕсли;
	
	Возврат СтруктураРеквизитов;

КонецФункции 

&НаКлиенте
Процедура УстановитьПометкуВСтрокахТабличнойЧасти(НоваяПометка)

	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		СтрокаТабличнойЧасти.Пометка = НоваяПометка;
	КонецЦикла; 

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДобавленныеКолонкиТаблиц()
	
	ДанныеОбъекта = Новый Структура("Дата, Организация", ДокументДата, ДокументОрганизация);
	СоответствиеСведенийОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОСпискеНоменклатуры(
					ОбщегоНазначения.ВыгрузитьКолонку(Объект.Товары, "Номенклатура", Истина), ДанныеОбъекта, Ложь, Ложь);
	
	// Заполнение колонок "Всего" в табличных частях
	Для каждого СтрокаТаблицы Из Объект.Товары Цикл
		ПересчитатьВсегоСтрокиТабличнойЧасти(СтрокаТаблицы, ДокументСуммаВключаетНДС);
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
			СтрокаТаблицы.ЭтоУслуга = Истина;
		Иначе
			СведенияОНоменклатуре = СоответствиеСведенийОНоменклатуре.Получить(СтрокаТаблицы.Номенклатура);
			Если СведенияОНоменклатуре <> Неопределено Тогда
				СтрокаТаблицы.ЭтоУслуга = СведенияОНоменклатуре.Услуга;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	Форма.ИтогиВсего = Форма.Объект.Товары.Итог("Всего");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьНадписьЦеныИВалюта(Форма)
	
	СтруктураНадписи = Новый Структура(
		"ВалютаДокумента, Курс, Кратность, ДокументБезНДС, НДСНеВыделять, СуммаВключаетНДС, ВалютаРегламентированногоУчета",
		Форма.ДокументВалюта,
		Форма.ДокументКурс,
		Форма.ДокументКратность,
		Форма.ДокументБезНДС,
		Форма.НДСНеВыделять,
		Форма.ДокументСуммаВключаетНДС,
		Форма.ВалютаРегламентированногоУчета);
	Форма.ЦеныИВалюта = ОбщегоНазначенияБПКлиентСервер.СформироватьНадписьЦеныИВалюта(СтруктураНадписи);

КонецПроцедуры

&НаСервере
Процедура НоменклатураПриИзмененииНаСервере(ПараметрыСтроки)

	МетаданныеДокумента = ДокументСсылка.Метаданные();

	ПараметрыОбъекта = Новый Структура("Дата, Организация", ДокументДата, ДокументОрганизация);
	Если ЭтаФорма.НДСНеВыделять Тогда
		ПараметрыСтроки.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
	Иначе
		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(ПараметрыСтроки, ПараметрыОбъекта, ИмяТаблицы, МетаданныеДокумента);
	КонецЕсли;
	
	Если ПоказыватьСодержание Тогда
		
		Если НЕ ЗначениеЗаполнено(ПараметрыСтроки.Номенклатура) Тогда
			ПараметрыСтроки.Вставить("Содержание", "");
			ПараметрыСтроки.ЭтоУслуга = Истина;
		Иначе
			РеквизитыНоменклатуры = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыСтроки.Номенклатура,
				"Наименование, НаименованиеПолное, Услуга, ПериодичностьУслуги");
			Если НЕ РеквизитыНоменклатуры.Услуга Тогда
				Содержание = "";
			ИначеЕсли ПустаяСтрока(РеквизитыНоменклатуры.НаименованиеПолное) Тогда
				Содержание = РеквизитыНоменклатуры.Наименование;
			Иначе
				Содержание = РеквизитыНоменклатуры.НаименованиеПолное;
			КонецЕсли;
			
			Содержание = РаботаСНоменклатуройКлиентСервер.СодержаниеУслуги(
				Содержание,
				РеквизитыНоменклатуры.ПериодичностьУслуги,
				ПараметрыОбъекта.Дата);
			
			ПараметрыСтроки.Вставить("Содержание", Содержание);
			ПараметрыСтроки.ЭтоУслуга = РеквизитыНоменклатуры.Услуга;
		КонецЕсли;
		
	КонецЕсли;

	Если ПоказыватьЦену И ПравоДоступа("Просмотр", Метаданные.Справочники.ТипыЦенНоменклатуры) Тогда
		
		ПараметрыОбъекта = Новый Структура;
		ПараметрыОбъекта.Вставить("Ссылка",	 			ДокументСсылка);
		ПараметрыОбъекта.Вставить("Дата",	 			ДокументДата);
		ПараметрыОбъекта.Вставить("Организация", 		ДокументОрганизация);
		ПараметрыОбъекта.Вставить("ВалютаДокумента", 	ДокументВалюта);
		ПараметрыОбъекта.Вставить("ТипЦен", 			ДокументТипЦен);
		ПараметрыОбъекта.Вставить("СуммаВключаетНДС",   ДокументСуммаВключаетНДС);
		
		Если ЗаполнятьЦеныПоПокупке Тогда
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(ПараметрыСтроки, ПараметрыОбъекта, ИмяТаблицы,
						МетаданныеДокумента);
		Иначе
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(ПараметрыСтроки, ПараметрыОбъекта, ИмяТаблицы,
						МетаданныеДокумента);
		КонецЕсли;
					
	КонецЕсли;

	Если ПоказыватьНомерГТД ИЛИ ПоказыватьСтрануПроисхождения Тогда
		ОбработкаТабличныхЧастей.ЗаполнитьНомерГТДИСтрануПроисхождения(ПараметрыСтроки, ИмяТаблицы, МетаданныеДокумента);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура СохранитьТекущееДействие(ТекущееДействие, ДокументСсылка)
	
	ВидДокумента = ДокументСсылка.Метаданные().Имя;
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ОбработкаТабличнойЧастиТекущееДействие", ВидДокумента, ТекущееДействие);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиИзмененияВДокумент()
	
	ПоместитьТаблицуВоВременноеХранилище();
	
	ПараметрОповещения = Новый Структура;
	ПараметрОповещения.Вставить("ИмяТаблицы",                                      ИмяТаблицы);
	ПараметрОповещения.Вставить("ИдентификаторВызывающейФормы",                    ВладелецФормы.УникальныйИдентификатор);
	ПараметрОповещения.Вставить("АдресОбработаннойТабличнойЧастиТоварыВХранилище", АдресХранилищаТовары);
	
	Оповестить("ОбработанаТабличнаяЧастьТовары", ПараметрОповещения, ВладелецФормы);
	
КонецПроцедуры

&НаСервере
Процедура ПоместитьТаблицуВоВременноеХранилище()
	
	ТаблицаТовары = СформироватьТаблицуДляПереносаВДокумент();
	ПоместитьВоВременноеХранилище(ТаблицаТовары, АдресХранилищаТовары);
	
КонецПроцедуры

&НаСервере
Функция СформироватьТаблицуДляПереносаВДокумент()

	ТаблицаОбработки = Объект.Товары.Выгрузить();
	
	ТаблицаДокумента = ПолучитьИзВременногоХранилища(АдресХранилищаТовары);
		
	// Создадим структуру, которая будет содержать имена колонок присутствующих в 
	// документе, но не присутствующих в ТЧ обработки. 
	СтруктураНовыхКолонок = Новый Структура;
	
	Для Каждого КолонкаТаблицыДокумента Из ТаблицаДокумента.Колонки Цикл
		
		// Если колонка есть в таблице документа, но ее нет в таблице, выгруженной
		// из обработки и нет в структуре новых колонок, тогда добавим ее в таблицу
		// и в структуру
		Если ТаблицаОбработки.Колонки.Найти(КолонкаТаблицыДокумента.Имя) = Неопределено
			И НЕ СтруктураНовыхКолонок.Свойство(КолонкаТаблицыДокумента.Имя) Тогда
			ТаблицаОбработки.Колонки.Добавить(КолонкаТаблицыДокумента.Имя);
			СтруктураНовыхКолонок.Вставить(КолонкаТаблицыДокумента.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
	// Идем по строкам табличной части и обрабатываем строки, в которых заполнен
	// реквизит НомерДокумента. Эти строки были выгружены из документа.
	Для каждого СтрокаТаблицы Из ТаблицаОбработки Цикл
		
		Если ЗначениеЗаполнено(СтрокаТаблицы.НомерСтрокиДокумента) Тогда
			
			// Если номер строки заполнен, находим соответствующую строку в табличной 
			// части документа
			СтрокаТаблицыДокумента = ТаблицаДокумента[СтрокаТаблицы.НомерСтрокиДокумента - 1];

			// Во избежание проблем с подчиненными реквизитами, строка ТЧ обработки 
			// считается соответствующей строке ТЧ документа, только в том случае,если
			// номенклатура не изменилась. Если номенклатура в строке изменилась, 
			// считается, что это новая строка.
			Если СтрокаТаблицыДокумента.Номенклатура = СтрокаТаблицы.Номенклатура Тогда
				
				// Теперь пройдем по колонкам структуры новых колонок
				Для Каждого НоваяКолонкаТаблицы Из СтруктураНовыхКолонок Цикл
					СтрокаТаблицы[НоваяКолонкаТаблицы.Ключ] = СтрокаТаблицыДокумента[НоваяКолонкаТаблицы.Ключ];
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаОбработки;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьИзДокументаЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ОтборФормыВыбора = Новый Структура;
	Если ЗначениеЗаполнено(ДокументОрганизация) Тогда
		ОтборФормыВыбора.Вставить("Организация", ДокументОрганизация);
	КонецЕсли;
	
	СтруктураПараметров	= Новый Структура;
	СтруктураПараметров.Вставить("Отбор",              ОтборФормыВыбора);
	СтруктураПараметров.Вставить("РежимВыбора",        Истина);
	СтруктураПараметров.Вставить("МножественныйВыбор", Истина);
	
	ОткрытьФорму("Документ."+ВыбранноеЗначение.Значение+".ФормаВыбора", СтруктураПараметров, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение)
	
	Если ТипыДокументовДляВыбора.Количество() = 0 Тогда
		ЗаполнитьТипыДокументовДляВыбора(ТипыДокументовДляВыбора, ИменаТаблицИсточников); 
	КонецЕсли; 
	
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Для каждого Документ Из ВыбранноеЗначение Цикл
			Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Документ))
				И ТипыДокументовДляВыбора.НайтиПоЗначению(Документ.Метаданные().Имя) <> Неопределено Тогда
				
				Для Каждого ИмяТаблицыИсточника Из ИменаТаблицИсточников Цикл
					ДобавитьДанныеИзДокумента(Документ, ИмяТаблицыИсточника);
				КонецЦикла;
			
			КонецЕсли; 
			
		КонецЦикла; 
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ВыбранноеЗначение))
		И ТипыДокументовДляВыбора.НайтиПоЗначению(ВыбранноеЗначение.Метаданные().Имя) <> Неопределено Тогда
		
		Для Каждого ИмяТаблицыИсточника Из ИменаТаблицИсточников Цикл
			ДобавитьДанныеИзДокумента(ВыбранноеЗначение, ИмяТаблицыИсточника);
		КонецЦикла;	
		
	КонецЕсли;
	
	Модифицированность = Истина;
	
	УправлениеФормой(ЭтаФорма);

КонецПроцедуры

#КонецОбласти