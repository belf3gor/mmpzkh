#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
    
// Округляет число по заданному порядку. Если задано (=Истина) "ОкруглятьВБольшуюСторону",
// то число 123.37 при порядке округление 0.5 превратиться в 123.50, а число 0.1 
// при порядке округления 5 станет равным 5.
//
// Параметры:
//  Число                    - исходное число
//  ПорядокОкругления        - элемент перечисления Порядки округления: 
//                             "шаг" округления (0.01 (арифметическое), 0.01, 0.05, 0.1, 0.5, 1, 5, 10, 50, 100)
//  ОкруглятьВБольшуюСторону - булево, определяет способ округления: если Истина, 
//                             то при порядке округления "5" 0.01 будет округлена до 5, 
//                             Ложь - округление по арифметическим правилам
//
// Возвращаемое значение:
//  Округленное по заданному порядку значение
//
Функция ОкруглитьЦену(Число, ПорядокОкругления, ОкруглятьВБольшуюСторону) Экспорт

	Перем Результат;

	// Преобразуем порядок округления числа.
	// Если передали пустое значение порядка, то округлим до копеек. 
	Если НЕ ЗначениеЗаполнено(ПорядокОкругления) Тогда
		ПорядокОкругления = Перечисления.ПорядкиОкругления.Окр0_01; 
	КонецЕсли;

	Порядок = Число(Строка(ПорядокОкругления));

	// вычислим количество интервалов, входящих в число
	КоличествоИнтервал = Число / Порядок;

	// вычислим целое количество интервалов.
	КоличествоЦелыхИнтервалов = Цел(КоличествоИнтервал);

	Если КоличествоИнтервал = КоличествоЦелыхИнтервалов Тогда
		
		// Числа поделились нацело. Округлять не нужно.
		Результат = Число;
	Иначе
		Если ОкруглятьВБольшуюСторону Тогда

			// При порядке округления "0.05" 0.371 должно округлиться до 0.4
			Результат = Порядок * (КоличествоЦелыхИнтервалов + 1);
		Иначе

			// При порядке округления "0.05" 0.371 должно округлиться до 0.35,
			// а 0.376 до 0.4
			Результат = Порядок * Окр(КоличествоИнтервал,0,РежимОкругления.Окр15как20);
		КонецЕсли;

	КонецЕсли;

	Возврат Результат;

КонецФункции // ОкруглитьЦену()

// Загружает результат обработки в данные формы.
// Результат обработки получает из временного хранилища.
//
// Возвращаемое значение:
//  коллекция строк, требующих дополнительной обработки - т.е. которые были добавлены в этой обработке 
//  или в которых была изменена номенклатура.
//  - ДанныеФормыКоллекция - вся табличная часть ДанныеФормыТабличнаяЧасть, если она вся требует дополнительной обработки
//  - Массив - содержит отдельные строки этой табличной части
//
Функция ЗагрузитьТабличнуюЧастьВДанныеФормы(ТабличнаяЧастьДанныеФормы, Параметры) Экспорт
	
	ТабличнаяЧастьТаблицаЗначений = ПолучитьИзВременногоХранилища(Параметры.АдресОбработаннойТабличнойЧастиТоварыВХранилище);
	ТабличнаяЧастьДанныеФормы.Загрузить(ТабличнаяЧастьТаблицаЗначений);
	
	// Некоторые строки - новые и с измененной номенклатурой - могут требовать дополнительной обработки.
	// Например, в них может понадобиться заполнить счета учета.
	// Найдем такие строки в ДанныеФормыТабличнаяЧасть
	
	Отбор = Новый Структура("НомерСтрокиДокумента", 0);
	СтрокиДляДополнительнойОбработкиВТаблицеЗначений = ТабличнаяЧастьТаблицаЗначений.НайтиСтроки(Отбор);
	
	Если СтрокиДляДополнительнойОбработкиВТаблицеЗначений.Количество() = ТабличнаяЧастьТаблицаЗначений.Количество() Тогда
		
		СтрокиДляДополнительнойОбработки = ТабличнаяЧастьДанныеФормы;
		
	Иначе
		
		СтрокиДляДополнительнойОбработки = Новый Массив;
		
		Для Каждого СтрокаТаблицыЗначений Из СтрокиДляДополнительнойОбработкиВТаблицеЗначений Цикл
			Индекс = ТабличнаяЧастьТаблицаЗначений.Индекс(СтрокаТаблицыЗначений);
			ЭлементДанныхФормы = ТабличнаяЧастьДанныеФормы[Индекс];
			СтрокиДляДополнительнойОбработки.Добавить(ЭлементДанныхФормы);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтрокиДляДополнительнойОбработки;
	
КонецФункции

#КонецЕсли