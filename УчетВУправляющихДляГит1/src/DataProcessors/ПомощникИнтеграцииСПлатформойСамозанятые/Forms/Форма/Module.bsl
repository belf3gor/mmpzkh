
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РежимСправки = Параметры.РежимСправки;
	
	Если НЕ РежимСправки Тогда
		НастройкаИнтеграцииДоступна = 
			ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.СостоянияИнтеграцииСПлатформойСамозанятые);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.ДанныеБаннера) Тогда
		Объект.Организация = Параметры.ДанныеБаннера.ДанныеСобытия.Организация;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = Параметры.Организация;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ОсновнаяОрганизация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		Если ЗначениеЗаполнено(ОсновнаяОрганизация) Тогда
			Если НЕ ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(ОсновнаяОрганизация) Тогда
				Объект.Организация = ОсновнаяОрганизация;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Для подготовки справок.
	НачалоПериода = НачалоМесяца(ТекущаяДатаСеанса());
	КонецПериода  = КонецМесяца(ТекущаяДатаСеанса());
	
	Элементы.ГруппаШаги.ТекущаяСтраница = Элементы.ГруппаПустая;
	
	ПолучитьДанныеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Управление формой нужно вызвать на клиенте, а не при создании на сервере,
	// чтобы обойти ошибку платформы с залипанием страниц в веб-клиенте.
	УправлениеФормой(ЭтотОбъект);
	
	Если Элементы.ГруппаШаги.ТекущаяСтраница = Элементы.ГруппаОжидание Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПолучитьСостояниеИнтеграции", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеУчетнойПолитики"
		И Параметр = Объект.Организация
		И НЕ ПрименяетсяНалогНаПрофессиональныйДоход Тогда
		ПолучитьДанныеНаСервере();
	ИначеЕсли ИмяСобытия = "ИзмененоСостояниеИнтеграцииСПлатформойСамозанятые"
		И Параметр = Объект.Организация Тогда
		ОпросПлатформы = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ РежимСправки Тогда
		Оповестить("ИзмененоСостояниеИнтеграцииСПлатформойСамозанятые", Объект.Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если Элементы.ГруппаШаги.ТекущаяСтраница = Элементы.ГруппаАвторизация Тогда
		// Номер телефона обязателен для авторизации
		Если Не КодПодтвержденияЗапрошен(ЭтотОбъект) Тогда
			Если ЗначениеЗаполнено(Объект.НомерТелефонаПредставление) Тогда
				Если Не ОрганизацииФормыКлиентСервер.ТелефонСоответствуетТребованиям(Объект.НомерТелефонаПредставление) Тогда
					ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Корректность", НСтр("ru = 'Номер телефона'"));
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "НомерТелефонаПредставление", "Объект", Отказ);
				КонецЕсли;
			Иначе
				ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Заполнение", НСтр("ru = 'Номер телефона'"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "НомерТелефонаПредставление", "Объект", Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Элементы.ГруппаШаги.ТекущаяСтраница <> Элементы.ГруппаАвторизация Или Не КодПодтвержденияЗапрошен(ЭтотОбъект) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("КодПодтверждения");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "СтраницаАвторизацииНПД" Тогда
		СтандартнаяОбработка = Ложь;
		АдресСтраницы = ИнтеграцияСПлатформойСамозанятыеКлиентСервер.АдресСтраницыАутентификацииСервиса();
		ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку(АдресСтраницы);
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "СтраницаНастройкиНПД" Тогда
		СтандартнаяОбработка = Ложь;
		АдресСтраницы = ИнтеграцияСПлатформойСамозанятыеКлиентСервер.АдресСтраницыНастройкиСервиса();
		ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку(АдресСтраницы);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Элементы.ГруппаШаги.ТекущаяСтраница = Элементы.ГруппаПустая;
	ПолучитьДанныеНаСервере();
	Если Элементы.ГруппаШаги.ТекущаяСтраница = Элементы.ГруппаОжидание Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПолучитьСостояниеИнтеграции", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СистемаНалогообложенияПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыОткрытия = ОбщегоНазначенияБПКлиентСервер.ПараметрыОткрытияФормыСОжиданием();
	ПараметрыОткрытия.Заголовок    = НСтр("ru = 'Настройки налогов и отчетов'");
	ПараметрыОткрытия.ИмяФормы     = "ОбщаяФорма.НалогиИОтчеты";
	ПараметрыОткрытия.Владелец     = ЭтотОбъект;
	ПараметрыОткрытия.Уникальность = УникальныйИдентификатор;
	
	ПараметрыФормы.Вставить("Организация",      Объект.Организация);
	ПараметрыФормы.Вставить("РежимНастройки",   Истина);
	ПараметрыФормы.Вставить("КонтекстныйВызов", Истина);
	
	ОбщегоНазначенияБПКлиент.ОткрытьФормуСОжиданием(ПараметрыОткрытия, ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПроверкаПодключенияОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьСостояниеИнтеграцииСПлатформойСамозанятые", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПлатформаСамозанятыеПодтверждениеНажатие(Элемент)
	
	ОбщегоНазначенияКлиент.ОткрытьНавигационнуюСсылку(
		ИнтеграцияСПлатформойСамозанятыеКлиентСервер.АдресСтраницыНастройкиСервиса());
	ПодключитьОбработчикОжидания("Подключаемый_ОбновитьСостояниеИнтеграцииСПлатформойСамозанятые", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСправкаОПостановкеНаУчетНажатие(Элемент)
	
	ИмяМетодаВзаимодействия = "СправкаОПостановкеНаУчет";
	ВыводитьОкноОжидания    = Истина;
	ВыполнитьМетодВзаимодействияВФоне();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСправкаОДоходахНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура("НачалоПериода, КонецПериода, Кратность",
		НачалоПериода,
		КонецПериода,
		ПредопределенноеЗначение("Перечисление.Периодичность.Месяц"));
	ОписаниеОповещения = Новый ОписаниеОповещения("СправкаОДоходахВыборПериодаЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериода",
		ПараметрыФормы,
		Элементы.ДекорацияСправкаДоходы,
		,
		,
		,
		ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерТелефонаПриИзменении(Элемент)
	
	Если Не ПустаяСтрока(Элемент.ТекстРедактирования) Тогда
		Объект.НомерТелефонаПредставление = ОрганизацииФормыКлиентСервер.ТелефонДляЗаявления(Элемент.ТекстРедактирования);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ЗаполнитьЗначенияПолейНомераТелефона", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерТелефонаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыКонтактнойИнформации = ПараметрыПолученияКонтактнойИнформации(ЭтотОбъект);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации", ПараметрыКонтактнойИнформации.Телефон);
	ПараметрыОткрытия.Вставить("ЗначенияПолей", Объект.НомерТелефонаЗначенияПолей);
	ПараметрыОткрытия.Вставить("Представление", Объект.НомерТелефонаПредставление);
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыОткрытия, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НомерТелефонаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Объект.НомерТелефонаЗначенияПолей = ВыбранноеЗначение.Значение;
		Объект.НомерТелефонаПредставление = ВыбранноеЗначение.Представление;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НомерТелефонаПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СброситьКодПодтверждения();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подключить(Команда)
	
	ОчиститьСообщения();
	Если ПроверитьЗаполнение() Тогда
		ЗапроситьSMSсКодом();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подтвердить(Команда)
	
	ОчиститьСообщения();
	Если ПроверитьЗаполнение() Тогда
		ОтключитьОбработчикОжидания_ОбновитьСтатусКодаПодтверждения();
		Элементы.ГруппаШаги.ТекущаяСтраница = Элементы.ГруппаОжидание;
		ПодключитьОбработчикОжидания("Подключаемый_ОтправитьЗапросНаПривязку", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отключить(Команда)
	
	Переподключение = Ложь;
	Элементы.ГруппаШаги.ТекущаяСтраница = Элементы.ГруппаОжидание;
	Элементы.ГруппаНадписиОжидание.ТекущаяСтраница = Элементы.ГруппаОтключение;
	ПодключитьОбработчикОжидания("Подключаемый_ОтправитьЗапросНаОтвязку", 1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Повторить(Команда)
	
	Ошибка          = Ложь;
	ОпросПлатформы  = Ложь;
	
	УправлениеФормой(ЭтотОбъект);
	
	Если Элементы.ГруппаШаги.ТекущаяСтраница = Элементы.ГруппаАвторизация Тогда
		КодПодтверждения = "";
		ОбновитьСтатусКодаПодтверждения();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Переподключить(Команда)
	
	РежимСправки         = Ложь;
	ВыводитьОкноОжидания = Ложь;
	ПолучитьДанныеНаСервере();
	Если Элементы.ГруппаШаги.ТекущаяСтраница = Элементы.ГруппаОжидание Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПолучитьСостояниеИнтеграции", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПовторноЗапроситьSMSсКодом(Команда)
	
	ОтключитьОбработчикОжидания_ОбновитьСтатусКодаПодтверждения();
	ЗапроситьSMSсКодом();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ПолучитьДанныеНаСервере()
	
	ДанныеОбновлены = Ложь;
	
	Если РежимСправки Тогда
		Заголовок = НСтр("ru = 'Справки по налогу на профессиональный доход'");
	Иначе
		Заголовок = НСтр("ru = 'Подключение к сервису Мой налог'");
	КонецЕсли;
	
	СтатусыЗапросов = ИнтеграцияСПлатформойСамозанятыеКлиентСервер.СтатусыЗапросов();
	
	ПараметрыКонтактнойИнформации = ПараметрыПолученияКонтактнойИнформации(ЭтотОбъект);
	КонтактнаяИнформацияОбъекта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
		ПараметрыКонтактнойИнформации.Владелец, , , Ложь);
	ТелефонОрганизации = ЗначениеКонтактнойИнформации(КонтактнаяИнформацияОбъекта, ПараметрыКонтактнойИнформации.Телефон);
	Объект.НомерТелефонаЗначенияПолей = ТелефонОрганизации.ЗначенияПолей;
	Объект.НомерТелефонаПредставление = ТелефонОрганизации.Представление;
	
	СистемаНалогообложенияПредставление     = 
		ОрганизацииФормыКлиентСервер.ПредставлениеСистемыНалогообложения(Объект.Организация);
	ПрименяетсяНалогНаПрофессиональныйДоход = 
		УчетнаяПолитика.ПрименяетсяНалогНаПрофессиональныйДоход(Объект.Организация, ТекущаяДатаСеанса());
	СостояниеПодключения                    = ПолучитьСостояниеПодключения(Объект.Организация);
	ИдентификаторЗаявки                     = ПолучитьИдентификаторЗаявки(Объект.Организация);
	
	Если НЕ РежимСправки Тогда // В этом режиме сразу показываем страницу со справками.
		Переподключение = СостояниеПодключения = Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.Отключено;
		Если СостояниеПодключения <> Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.Отключено
			И СостояниеПодключения <> Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.Отсутствует
			И СостояниеПодключения <> Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.Ошибка Тогда
			СостояниеПодключения = Перечисления.СостоянияИнтеграцииСПлатформойСамозанятые.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#Область КонтактнаяИнформация

&НаСервереБезКонтекста
Функция ЗначениеКонтактнойИнформации(КонтактнаяИнформацияОбъекта, ВидКонтактнойИнформации)
	
	Результат = Новый Структура("ЗначенияПолей, Представление", "", "");
	
	Отбор = Новый Структура("Вид", ВидКонтактнойИнформации);
	
	КонтактнаяИнформацияПоВиду = КонтактнаяИнформацияОбъекта.Скопировать(Отбор);
	Если КонтактнаяИнформацияПоВиду.Количество() > 0 Тогда
		КонтактнаяИнформацияПоВиду.Сортировать("Дата УБЫВ");
		Результат.ЗначенияПолей = КонтактнаяИнформацияПоВиду[0].Значение;
		Результат.Представление = КонтактнаяИнформацияПоВиду[0].Представление;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция КонтактнаяИнформацияПоПредставлению(Знач Представление, Знач ВидКонтактнойИнформации)
	
	Возврат УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПоПредставлению(Представление, ВидКонтактнойИнформации);
	
КонецФункции

#КонецОбласти

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	Если ЗапросВыполняется(Форма) Тогда
		Элементы.ГруппаШаги.ТекущаяСтраница = Элементы.ГруппаОжидание;
		Если Форма.ИмяМетодаВзаимодействия = "ЗапросНаОтвязку" Тогда
			Элементы.ГруппаНадписиОжидание.ТекущаяСтраница = Элементы.ГруппаОтключение;
		Иначе
			Элементы.ГруппаНадписиОжидание.ТекущаяСтраница = Элементы.ГруппаПодключение;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Форма.Ошибка Тогда
		// В процессе обработки запроса возникла ошибка
		// на стороне приложения, сервера или платформы.
		Элементы.ГруппаШаги.ТекущаяСтраница = Элементы.ГруппаОшибка;
		Элементы.ПредставлениеОшибки.Высота = СтрЧислоСтрок(Форма.ПредставлениеОшибки);
		
	ИначеЕсли Форма.СостояниеПодключения = ПредопределенноеЗначение("Перечисление.СостоянияИнтеграцииСПлатформойСамозанятые.Подключено") Тогда
		// Приложение подключено к платформе.
		Если Форма.РежимСправки Тогда
			Элементы.ГруппаШаги.ТекущаяСтраница = Элементы.ГруппаСправки;
		Иначе
			Элементы.ГруппаШаги.ТекущаяСтраница = Элементы.ГруппаВыполнено;
		КонецЕсли;
		
	ИначеЕсли НЕ Форма.ПрименяетсяНалогНаПрофессиональныйДоход Тогда
		// В шапке указали организацию, которая не является плательщиком НПД.
		Элементы.ГруппаШаги.ТекущаяСтраница = Элементы.ГруппаУчетнаяПолитика;
		
	ИначеЕсли Форма.СостояниеПодключения = ПредопределенноеЗначение("Перечисление.СостоянияИнтеграцииСПлатформойСамозанятые.Отсутствует")
		ИЛИ Форма.СостояниеПодключения = ПредопределенноеЗначение("Перечисление.СостоянияИнтеграцииСПлатформойСамозанятые.Ошибка") Тогда
		// Приложение никогда не подключалось, или были неуспешные попытки подключить,
		// или приложение было отключено ранее. Надо снова авторизовать его на платформе.
		Если Форма.РежимСправки
			ИЛИ НЕ Форма.НастройкаИнтеграцииДоступна Тогда
			Элементы.ГруппаШаги.ТекущаяСтраница = Элементы.ГруппаНеПодключено;
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"Переподключить",
				"КнопкапоУмолчанию",
				Истина);
			
		Иначе
			Элементы.ГруппаШаги.ТекущаяСтраница = Элементы.ГруппаАвторизация;
		КонецЕсли;
		
	ИначеЕсли Форма.СостояниеПодключения = ПредопределенноеЗначение("Перечисление.СостоянияИнтеграцииСПлатформойСамозанятые.НеПривязано")
		ИЛИ Форма.СостояниеПодключения = ПредопределенноеЗначение("Перечисление.СостоянияИнтеграцииСПлатформойСамозанятые.НеНастроено")
		И Форма.ДанныеОбновлены Тогда
		// Уже обработан запрос к платформе по результатам которого понятно, что
		// на стороне платформы еще не принята заявка на подключение или сброшены разрешения.
		Если Форма.РежимСправки
			ИЛИ НЕ Форма.НастройкаИнтеграцииДоступна Тогда
			Элементы.ГруппаШаги.ТекущаяСтраница = Элементы.ГруппаНеПодключено;
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"Переподключить",
				"КнопкапоУмолчанию",
				Истина);
			
		Иначе
			Элементы.ГруппаШаги.ТекущаяСтраница = Элементы.ГруппаПроверкаПодключения;
		КонецЕсли;
		
	ИначеЕсли Форма.СостояниеПодключения = ПредопределенноеЗначение("Перечисление.СостоянияИнтеграцииСПлатформойСамозанятые.Отключено") Тогда
		// Результат выполнения команды "Отключить" - констатация факта отключения.
		Если Форма.РежимСправки
			ИЛИ НЕ Форма.НастройкаИнтеграцииДоступна Тогда
			Элементы.ГруппаШаги.ТекущаяСтраница = Элементы.ГруппаНеПодключено;
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
				Элементы,
				"Переподключить",
				"КнопкапоУмолчанию",
				Истина);
			
		ИначеЕсли Форма.Переподключение Тогда
			Элементы.ГруппаШаги.ТекущаяСтраница = Элементы.ГруппаАвторизация;
		Иначе
			Элементы.ГруппаШаги.ТекущаяСтраница = Элементы.ГруппаОтключено;
		КонецЕсли;
		
	ИначеЕсли НЕ Форма.ДанныеОбновлены Тогда
		// Надо отправить запрос к платформе, чтобы выяснить состояние подключения.
		// Закладка "длительной" операции.
		Элементы.ГруппаШаги.ТекущаяСтраница = Элементы.ГруппаОжидание;
		
	КонецЕсли;
	
	Элементы.ГруппаНеПодключеноПодсказка.Видимость = НЕ Форма.НастройкаИнтеграцииДоступна;
	
	Если Элементы.ГруппаШаги.ТекущаяСтраница = Элементы.ГруппаАвторизация Тогда
		
		УправлениеЭлементамиКодаПодтверждения(Форма);
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Элементы,
			?(КодПодтвержденияЗапрошен(Форма), "Подтвердить", "Подключить"),
			"КнопкапоУмолчанию",
			Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЗапросВыполняется(Форма)
	
	СтатусыЗапросов =  ИнтеграцияСПлатформойСамозанятыеКлиентСервер.СтатусыЗапросов();
	
	ЗапросВыполняется = (Форма.СтатусЗапроса = СтатусыЗапросов.Выполняется)
		И ЭтоАдресВременногоХранилища(Форма.АдресЗапроса);
	
	Возврат ЗапросВыполняется;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьОписаниеСохраняемогоФайла(Ответ, ИдентификаторФормы)
	
	Если Ответ.Результат = Неопределено
		ИЛИ ТипЗнч(Ответ.Результат) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не Ответ.Результат.Свойство("АдресВременногоХранилища") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ЭтоАдресВременногоХранилища(Ответ.Результат.АдресВременногоХранилища) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = ПолучитьИзВременногоХранилища(Ответ.Результат.АдресВременногоХранилища);
	
	Если Не Результат.Свойство("Base64Строка") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеФайла = ПолучитьДвоичныеДанныеИзBase64Строки(Результат.Base64Строка);
	
	ОписаниеФайла = Новый Структура;
	ОписаниеФайла.Вставить("Имя", Результат.ИмяФайла);
	ОписаниеФайла.Вставить("Хранение", ПоместитьВоВременноеХранилище(ДанныеФайла, ИдентификаторФормы));
	
	Возврат ОписаниеФайла;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ЗаполнитьЗначенияПолейНомераТелефона()
	
	Если Не ПустаяСтрока(Объект.НомерТелефонаПредставление) Тогда
		ПараметрыКонтактнойИнформации = ПараметрыПолученияКонтактнойИнформации(ЭтотОбъект);
		Объект.НомерТелефонаЗначенияПолей = КонтактнаяИнформацияПоПредставлению(Объект.НомерТелефонаПредставление, ПараметрыКонтактнойИнформации.Телефон);
	Иначе
		Объект.НомерТелефонаЗначенияПолей = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПараметрыПолученияКонтактнойИнформации(Форма)
	
	Параметры = Новый Структура;
	Параметры.Вставить("Владелец", Форма.Объект.Организация);
	Параметры.Вставить("Телефон", ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.ВидыКонтактнойИнформации.ТелефонОрганизации"));
	
	Возврат Параметры;
	
КонецФункции

#КонецОбласти

#Область РаботаСПлатформой

&НаКлиенте
Процедура Подключаемый_ПолучитьСостояниеИнтеграции()
	
	ИмяМетодаВзаимодействия = "СписокРазрешений";
	ВыполнитьМетодВзаимодействияВФоне();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьSMSсКодом()
	
	Элементы.ГруппаШаги.ТекущаяСтраница = Элементы.ГруппаОжидание;
	ПодключитьОбработчикОжидания("Подключаемый_КодПодтверждения", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_КодПодтверждения()
	
	ИмяМетодаВзаимодействия = "КодПодтверждения";
	ВыполнитьМетодВзаимодействияВФоне();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтправитьЗапросНаПривязку()
	
	ИмяМетодаВзаимодействия = "ЗапросНаПривязку";
	ВыполнитьМетодВзаимодействияВФоне();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтправитьЗапросНаОтвязку()
	
	ИмяМетодаВзаимодействия = "ЗапросНаОтвязку";
	ВыполнитьМетодВзаимодействияВФоне();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьСостояниеИнтеграцииСПлатформойСамозанятые()
	
	Если СостояниеПодключения = ПредопределенноеЗначение("Перечисление.СостоянияИнтеграцииСПлатформойСамозанятые.Подключено") Тогда
		Возврат;
	КонецЕсли;
	
	ОпросПлатформы = Истина;
	Если СостояниеПодключения = ПредопределенноеЗначение("Перечисление.СостоянияИнтеграцииСПлатформойСамозанятые.НеПривязано") Тогда
		ИмяМетодаВзаимодействия = "СтатусЗапросаНаПривязку";
	Иначе
		ИмяМетодаВзаимодействия = "СписокРазрешений";
	КонецЕсли;
	
	ДлительнаяОперация = ВыполнитьМетодВзаимодействияВФонеНаСервере(
		ПараметрыМетодаВзаимодействия(),
		УникальныйИдентификатор);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		Если СтатусЗапроса <> СтатусыЗапросов.Выполнено Тогда
			СтатусЗапроса = СтатусыЗапросов.Выполняется;
		КонецЕсли;
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ТекстСообщения = НСтр("ru = 'Проверка подключения к сервису Мой налог'");
		НастройкиОжидания.ВыводитьОкноОжидания = ВыводитьОкноОжидания;
		Обработчик = Новый ОписаниеОповещения("ОбработкаВыполненияМетодаВзаимодействия", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
	Иначе
		СтатусЗапроса = СтатусыЗапросов.Ошибка;
		ЗаписатьОшибкуВыполненияМетодаВзаимодействия(ДлительнаяОперация.КраткоеПредставлениеОшибки,
			ДлительнаяОперация.ПодробноеПредставлениеОшибки);
		ДанныеОбновлены = Истина;
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СправкаОДоходахВыборПериодаЗавершение(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НачалоПериода = РезультатВыбора.НачалоПериода;
	КонецПериода  = РезультатВыбора.КонецПериода;
	
	ИмяМетодаВзаимодействия = "СправкаОДоходах";
	ВыводитьОкноОжидания    = Истина;
	ВыполнитьМетодВзаимодействияВФоне();
	
КонецПроцедуры

#Область ВыполнитьМетодВзаимодействия

&НаКлиенте
Функция ПараметрыМетодаВзаимодействия()
	
	ПараметрыМетода =
		ИнтеграцияСПлатформойСамозанятыеКлиентСервер.НовыеПараметрыМетодаВзаимодействия(ИмяМетодаВзаимодействия);
	ПараметрыМетода.Организация = Объект.Организация;
	Если ПараметрыМетода.Свойство("НомерТелефона") Тогда
		ПараметрыМетода.НомерТелефона = Объект.НомерТелефонаПредставление;
	КонецЕсли;
	Если ИмяМетодаВзаимодействия = "ЗапросНаПривязку" Тогда
		ПараметрыМетода.НомерТелефона = Объект.НомерТелефонаПредставление;
		ПараметрыМетода.ИдентификаторКодаПодтверждения = ИдентификаторКодаПодтверждения;
		ПараметрыМетода.КодПодтверждения = КодПодтверждения;
	КонецЕсли;
	Если ПараметрыМетода.Свойство("Идентификатор") Тогда
		ПараметрыМетода.Идентификатор = ИдентификаторЗаявки;
	КонецЕсли;
	Если ПараметрыМетода.Свойство("НачалоПериода") Тогда
		ПараметрыМетода.НачалоПериода =  НачалоПериода;
	КонецЕсли;
	Если ПараметрыМетода.Свойство("КонецПериода") Тогда
		ПараметрыМетода.КонецПериода = КонецПериода;
	КонецЕсли;
	
	Возврат ПараметрыМетода;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьМетодВзаимодействияВФоне()
	
	Ошибка = Ложь;
	ПредставлениеОшибки = "";
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = ВыполнитьМетодВзаимодействияВФонеНаСервере(
		ПараметрыМетодаВзаимодействия(),
		УникальныйИдентификатор);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		СтатусЗапроса = СтатусыЗапросов.Выполняется;
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания = ВыводитьОкноОжидания;
		Обработчик = Новый ОписаниеОповещения("ОбработкаВыполненияМетодаВзаимодействия", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
	Иначе
		СтатусЗапроса = СтатусыЗапросов.Ошибка;
		ЗаписатьОшибкуВыполненияМетодаВзаимодействия(ДлительнаяОперация.КраткоеПредставлениеОшибки,
			ДлительнаяОперация.ПодробноеПредставлениеОшибки);
		ДанныеОбновлены = Истина;
		СостояниеПодключения = ПолучитьСостояниеПодключения(Объект.Организация);
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВыполнитьМетодВзаимодействияВФонеНаСервере(Знач ПараметрыМетода, Знач ИдентификаторФормы)
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = 
		СтрШаблон(НСтр("ru = 'Интеграция с платформой Самозанятые: выполнение метода взаимодействия платформы (%1)'"),
			ПараметрыМетода.МетодВзаимодействия);
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
		"ИнтеграцияСПлатформойСамозанятые.ВыполнитьМетодВзаимодействияВФоне",
		ПараметрыМетода,
		НастройкиЗапуска);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаВыполненияМетодаВзаимодействия(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" И ЭтоАдресВременногоХранилища(ДлительнаяОперация.АдресРезультата) Тогда
		Если СтатусЗапроса <> СтатусыЗапросов.Выполнено Тогда
			СтатусЗапроса = СтатусыЗапросов.Выполняется;
		КонецЕсли;
		Запрос = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		АдресЗапроса = ПоместитьВоВременноеХранилище(Запрос, УникальныйИдентификатор);
	Иначе
		СтатусЗапроса = СтатусыЗапросов.Ошибка;
		Запрос = Неопределено;
		ЗаписатьОшибкуВыполненияМетодаВзаимодействия(ДлительнаяОперация.КраткоеПредставлениеОшибки,
			ДлительнаяОперация.ПодробноеПредставлениеОшибки);
	КонецЕсли;
	
	Если Запрос <> Неопределено И Запрос.Ошибка Тогда
		СтатусЗапроса = СтатусыЗапросов.Ошибка;
		ЗаписатьОшибкуВыполненияМетодаВзаимодействия(Запрос.Сообщение);
	КонецЕсли;
	
	Если СтатусЗапроса <> СтатусыЗапросов.Ошибка Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПолучитьРезультатВыполненияВФоне", Запрос.ВремяОжидания, Истина);
	КонецЕсли;
	
	Если ОпросПлатформы Тогда
		Если СтатусЗапроса = СтатусыЗапросов.Ошибка Тогда
			ПодключитьОбработчикОжидания("Подключаемый_ОбновитьСостояниеИнтеграцииСПлатформойСамозанятые", 1, Истина);
		ИначеЕсли СтатусЗапроса = СтатусыЗапросов.Выполнено Тогда
			СостояниеПодключения = ПолучитьСостояниеПодключения(Объект.Организация);
			Если СостояниеПодключения <> ПредопределенноеЗначение("Перечисление.СостоянияИнтеграцииСПлатформойСамозанятые.Подключено") Тогда
				ПодключитьОбработчикОжидания("Подключаемый_ОбновитьСостояниеИнтеграцииСПлатформойСамозанятые", 1, Истина);
			Иначе
				ДанныеОбновлены  = Истина;
				УправлениеФормой(ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если СтатусЗапроса = СтатусыЗапросов.Ошибка
			ИЛИ СтатусЗапроса = СтатусыЗапросов.Выполнено Тогда
			ДанныеОбновлены = Истина;
			СостояниеПодключения = ПолучитьСостояниеПодключения(Объект.Организация);
			УправлениеФормой(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолучитьРезультатВыполненияВФоне()
	
	ДлительнаяОперация = ПолучитьРезультатВыполненияВФонеНаСервере(
		АдресЗапроса,
		УникальныйИдентификатор);
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус <> "Ошибка" Тогда
		СтатусЗапроса = СтатусыЗапросов.Выполняется;
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ТекстСообщения = НСтр("ru = 'Получение ответа от сервиса Мой налог'");
		НастройкиОжидания.ВыводитьОкноОжидания = ВыводитьОкноОжидания;
		Обработчик = Новый ОписаниеОповещения("ОбработкаРезультатаВыполненияМетода", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
	Иначе
		СтатусЗапроса = СтатусыЗапросов.Ошибка;
		ЗаписатьОшибкуВыполненияМетодаВзаимодействия(ДлительнаяОперация.КраткоеПредставлениеОшибки,
			ДлительнаяОперация.ПодробноеПредставлениеОшибки);
		ДанныеОбновлены = Истина;
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРезультатаВыполненияМетода(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		ЗаписатьОшибкуВыполненияМетодаВзаимодействия(ДлительнаяОперация.КраткоеПредставлениеОшибки,
			ДлительнаяОперация.ПодробноеПредставлениеОшибки);
		УправлениеФормой(ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	Если ЭтоАдресВременногоХранилища(ДлительнаяОперация.АдресРезультата) Тогда
		Ответ = ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
		УдалитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата);
	КонецЕсли;
	
	Если Ответ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяМетодаВзаимодействия = "КодПодтверждения" Тогда
		ОбработкаОтветаМетода_КодПодтверждения(Ответ);
	ИначеЕсли СтрНачинаетсяС(ИмяМетодаВзаимодействия, "Справка") Тогда
		ОбработкаОтветаМетода_Справка(Ответ);
	Иначе
		ОбработкаОтветаМетода(Ответ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветаМетода(Ответ)
	
	СтатусЗапроса = Ответ.Статус;
	
	Если СтатусЗапроса = СтатусыЗапросов.Выполнено Тогда
		
		ДанныеОбновлены = Истина;
		ЗаписатьСостояниеИнтеграцииСПлатформойСамозанятые(Ответ);
		СостояниеПодключения = ПолучитьСостояниеПодключения(Объект.Организация);
		Если ОпросПлатформы Тогда
			Если СостояниеПодключения <> ПредопределенноеЗначение("Перечисление.СостоянияИнтеграцииСПлатформойСамозанятые.Подключено") Тогда
				ПодключитьОбработчикОжидания("Подключаемый_ОбновитьСостояниеИнтеграцииСПлатформойСамозанятые", 1, Истина);
			Иначе
				ДанныеОбновлены  = Истина;
				УправлениеФормой(ЭтотОбъект);
				Оповестить("ИзмененоСостояниеИнтеграцииСПлатформойСамозанятые", Объект.Организация);
			КонецЕсли;
		Иначе
			УправлениеФормой(ЭтотОбъект);
			Оповестить("ИзмененоСостояниеИнтеграцииСПлатформойСамозанятые", Объект.Организация);
		КонецЕсли;
		
		Если ЭтоАдресВременногоХранилища(АдресЗапроса) Тогда
			УдалитьИзВременногоХранилища(АдресЗапроса);
		КонецЕсли;
		
	ИначеЕсли СтатусЗапроса = СтатусыЗапросов.Выполняется Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПолучитьРезультатВыполненияВФоне", Ответ.ВремяОжидания, Истина);
	ИначеЕсли СтатусЗапроса = СтатусыЗапросов.Ошибка Тогда
		
		ЗаписатьОшибкуВыполненияМетодаВзаимодействия(Ответ.Сообщение);
		
		Если ОпросПлатформы Тогда
			Если ИмяМетодаВзаимодействия = "СтатусЗапросаНаПривязку"
					И ТипЗнч(Ответ.Результат) = Тип("Структура") Тогда
					ЗаписатьСостояниеИнтеграцииСПлатформойСамозанятые(Ответ);
					СостояниеПодключения = ПолучитьСостояниеПодключения(Объект.Организация);
					Ошибка = Истина;
					Возврат;
			КонецЕсли;
			ПодключитьОбработчикОжидания("Подключаемый_ОбновитьСостояниеИнтеграцииСПлатформойСамозанятые", 1, Истина);
		Иначе
			Если ИмяМетодаВзаимодействия = "СписокРазрешений"
				ИЛИ ИмяМетодаВзаимодействия = "ЗапросНаПривязку" Тогда
				
				ЗаписатьСостояниеИнтеграцииСПлатформойСамозанятые(Ответ);
				СостояниеПодключения = ПолучитьСостояниеПодключения(Объект.Организация);
				
				Если ИмяМетодаВзаимодействия = "СписокРазрешений" Тогда
					Ошибка = Ложь;
				ИначеЕсли ИмяМетодаВзаимодействия = "ЗапросНаПривязку"
					И ТипЗнч(Ответ.Результат) = Тип("Структура")
					И Ответ.Результат.Свойство("Код") Тогда
					
					Если Ответ.Результат.Код = "НалогоплательщикУжеПривязан" Тогда
						// Уже привязан - проверим список разрешений.
						Ошибка = Ложь;
						ПодключитьОбработчикОжидания("Подключаемый_ПолучитьСостояниеИнтеграции", 0.1, Истина);
						Возврат;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			ДанныеОбновлены = Истина;
			УправлениеФормой(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветаМетода_КодПодтверждения(Ответ)
	Перем КодОшибки;
	
	СтатусЗапроса = Ответ.Статус;
	
	Если СтатусЗапроса = СтатусыЗапросов.Выполнено Тогда
		
		Если ТипЗнч(Ответ.Результат) = Тип("Структура") Тогда
			Ответ.Результат.Свойство("ИдентификаторКодаПодтверждения",     ЭтотОбъект.ИдентификаторКодаПодтверждения);
			Ответ.Результат.Свойство("ДатаСозданияКодаПодтверждения",      ЭтотОбъект.ДатаСозданияКодаПодтверждения);
			Ответ.Результат.Свойство("ДатаОбновленияКодаПодтверждения",    ЭтотОбъект.ДатаОбновленияКодаПодтверждения);
			Ответ.Результат.Свойство("ДатаСрокаДействияКодаПодтверждения", ЭтотОбъект.ДатаСрокаДействияКодаПодтверждения);
		КонецЕсли;
		
		ЗаписатьСостояниеИнтеграцииСПлатформойСамозанятые(Ответ);
		ЭтотОбъект.СостояниеПодключения = ПолучитьСостояниеПодключения(Объект.Организация);
		
		Если ЭтоАдресВременногоХранилища(АдресЗапроса) Тогда
			УдалитьИзВременногоХранилища(АдресЗапроса);
		КонецЕсли;
		
		ОбновитьСтатусКодаПодтверждения();
		
	ИначеЕсли СтатусЗапроса = СтатусыЗапросов.Выполняется Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПолучитьРезультатВыполненияВФоне", Ответ.ВремяОжидания, Истина);
	ИначеЕсли СтатусЗапроса = СтатусыЗапросов.Ошибка Тогда
		ЗаписатьОшибкуВыполненияМетодаВзаимодействия(Ответ.Сообщение);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветаМетода_Справка(Ответ)
	
	СтатусЗапроса = Ответ.Статус;
	
	Если СтатусЗапроса = СтатусыЗапросов.Выполнено Тогда
		
		ОписаниеСохраняемыхФайлов = ПолучитьОписаниеСохраняемогоФайла(Ответ, УникальныйИдентификатор);
		Если ОписаниеСохраняемыхФайлов <> Неопределено Тогда
			ПолучитьФайл(ОписаниеСохраняемыхФайлов.Хранение, ОписаниеСохраняемыхФайлов.Имя);
		КонецЕсли;
		
		Если ЭтоАдресВременногоХранилища(АдресЗапроса) Тогда
			УдалитьИзВременногоХранилища(АдресЗапроса);
		КонецЕсли;
		
	ИначеЕсли СтатусЗапроса = СтатусыЗапросов.Выполняется Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ПолучитьРезультатВыполненияВФоне", Ответ.ВремяОжидания, Истина);
	ИначеЕсли СтатусЗапроса = СтатусыЗапросов.Ошибка Тогда
		ЗаписатьОшибкуВыполненияМетодаВзаимодействия(Ответ.Сообщение);
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область РезультатВыполнения

&НаСервереБезКонтекста
Функция ПолучитьРезультатВыполненияВФонеНаСервере(Знач АдресЗапроса, Знач ИдентификаторФормы)
	
	Запрос = ПолучитьИзВременногоХранилища(АдресЗапроса);
	Если Запрос = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = 
		СтрШаблон(НСтр("ru = 'Интеграция с платформой Самозанятые: выполнение метода взаимодействия платформы (%1)'"),
			Запрос.МетодВзаимодействия);
	НастройкиЗапуска.ДополнительныйРезультат = Запрос.ДополнительныйРезультат;
	
	Результат = ДлительныеОперации.ВыполнитьВФоне(
		"ИнтеграцияСПлатформойСамозанятые.ПолучитьРезультатВыполненияВФоне",
		Запрос,
		НастройкиЗапуска);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаписатьОшибкуВыполненияМетодаВзаимодействия(КраткоеПредставлениеОшибки, ПодробноеПредставлениеОшибки = Неопределено)
	
	Ошибка = Истина;
	ПредставлениеОшибки = КраткоеПредставлениеОшибки;
	
	ЗаписьЖурналаРегистрации(
		ИнтеграцияСПлатформойСамозанятыеКлиентСервер.ИмяСобытияЖурналаРегистрации(),
		УровеньЖурналаРегистрации.Ошибка,
		,
		,
		?(ПодробноеПредставлениеОшибки <> Неопределено, ПодробноеПредставлениеОшибки, КраткоеПредставлениеОшибки));
	
КонецПроцедуры

#КонецОбласти

#Область РаботаССостояниями

&НаСервере
Процедура ЗаписатьСостояниеИнтеграцииСПлатформойСамозанятые(Ответ)
	
	РегистрыСведений.СостоянияИнтеграцииСПлатформойСамозанятые.ЗаписатьСостояниеИнтеграцииСПлатформойСамозанятые(
		Объект.Организация,
		Ответ);
	ИдентификаторЗаявки = ПолучитьИдентификаторЗаявки(Объект.Организация);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСостояниеПодключения(Организация)
	
	Возврат РегистрыСведений.СостоянияИнтеграцииСПлатформойСамозанятые.ПолучитьСостояниеПодключения(Организация);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИдентификаторЗаявки(Организация)
	
	Возврат РегистрыСведений.СостоянияИнтеграцииСПлатформойСамозанятые.ПолучитьИдентификаторЗаявки(Организация);
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область КодПодтверждения

&НаКлиенте
Процедура ОбновитьСтатусКодаПодтверждения()
	
	Если КодПодтвержденияАктуален(ЭтотОбъект) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьСтатусКодаПодтверждения", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьСтатусКодаПодтверждения()
	
	КодПодтвержденияЗапрошен = КодПодтвержденияЗапрошен(ЭтотОбъект);
	КодПодтвержденияАктуален = КодПодтвержденияАктуален(ЭтотОбъект);
	МожноЗапроситьКодПодтверждения = МожноЗапроситьКодПодтверждения(ЭтотОбъект);
	
	Если КодПодтвержденияЗапрошен И Не КодПодтвержденияАктуален Тогда
		СброситьКодПодтверждения();
		Возврат;
	КонецЕсли;
	
	ОсталосьСекунд = ?(КодПодтвержденияЗапрошен И Не МожноЗапроситьКодПодтверждения, ДатаОбновленияКодаПодтверждения - ТекущаяДата(), 0);
	Если ОсталосьСекунд > 0 Тогда
		ДатаОбновленияКодаПодтвержденияПредставление = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
			НСтр("ru=';Повторно запросить SMS с кодом можно через %1 секунду;;Повторно запросить SMS с кодом можно через %1 секунды;Повторно запросить SMS с кодом можно через %1 секунд;Повторно запросить SMS с кодом можно через %1 секунды'"),
			ОсталосьСекунд);
	Иначе
		ДатаОбновленияКодаПодтвержденияПредставление = "";
	КонецЕсли;
	
	УправлениеЭлементамиКодаПодтверждения(ЭтотОбъект);
	
	ОбновитьСтатусКодаПодтверждения();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЭлементамиКодаПодтверждения(Форма)
	
	Элементы = Форма.Элементы;
	
	КодПодтвержденияЗапрошен = КодПодтвержденияЗапрошен(Форма);
	МожноЗапроситьКодПодтверждения = МожноЗапроситьКодПодтверждения(Форма);
	
	Элементы.ГруппаНомерТелефона.Видимость = Не КодПодтвержденияЗапрошен;
	Элементы.НомерТелефонаПредставление.Видимость = КодПодтвержденияЗапрошен;
	Элементы.ГруппаКодПодтверждения.Видимость = КодПодтвержденияЗапрошен;
	Элементы.ДатаОбновленияКодаПодтвержденияПредставление.Видимость = КодПодтвержденияЗапрошен И Не МожноЗапроситьКодПодтверждения;
	Элементы.ПовторноЗапроситьSMSсКодом.Видимость = КодПодтвержденияЗапрошен И МожноЗапроситьКодПодтверждения;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтключитьОбработчикОжидания_ОбновитьСтатусКодаПодтверждения()
	
	ДатаОбновленияКодаПодтвержденияПредставление = "";
	ОтключитьОбработчикОжидания("Подключаемый_ОбновитьСтатусКодаПодтверждения");
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьКодПодтверждения()
	
	// Код просрочен, очищаем свойства кода подтверждения
	Для Каждого ИмяСвойства Из ИменаСвойствКодаПодтверждения() Цикл
		ЭтотОбъект[ИмяСвойства] = Неопределено;
	КонецЦикла;
	
	КодПодтверждения = "";
	ДатаОбновленияКодаПодтвержденияПредставление = "";
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КодПодтвержденияЗапрошен(Форма)
	
	Возврат ЗначениеЗаполнено(Форма.ДатаСозданияКодаПодтверждения);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МожноЗапроситьКодПодтверждения(Форма)
	
	Если Не ЗначениеЗаполнено(Форма.ДатаОбновленияКодаПодтверждения) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Форма.ДатаОбновленияКодаПодтверждения < ТекущаяДата();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция КодПодтвержденияАктуален(Форма)
	
	Если Не ЗначениеЗаполнено(Форма.ДатаСрокаДействияКодаПодтверждения) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ТекущаяДата() <= Форма.ДатаСрокаДействияКодаПодтверждения;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИменаСвойствКодаПодтверждения()
	
	Возврат СтрРазделить("ДатаСозданияКодаПодтверждения,ДатаОбновленияКодаПодтверждения,ДатаСрокаДействияКодаПодтверждения", ",");
	
КонецФункции

#КонецОбласти

