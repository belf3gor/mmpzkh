
&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ПараметрыОбработчикаОжиданияАктуализации Экспорт;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнформационнаяБазаФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	НаДату = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
	ГоризонтПланирования = ГоризонтПланирования(Объект.ДнейПланирования, НаДату);
	
	Если Параметры.Организация = Неопределено Тогда
		Объект.Организация = Справочники.Организации.ОрганизацияПоУмолчанию();
	Иначе
		Объект.Организация = Параметры.Организация;
	КонецЕсли;
	
	ТипДокументаПланирования = Метаданные.РегистрыСведений.СрокиОплатыДокументов.Измерения.Документ.Тип;
	
	МожноМенятьДатуОплаты = СрокиОплатыДокументов.ПравоРедактирования();
	
	Элементы.ПеренестиНаДругуюДату.Доступность                         = МожноМенятьДатуОплаты;
	Элементы.РезультатКонтекстноеМенюПеренестиНаДругуюДату.Доступность = МожноМенятьДатуОплаты;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Объект.ДнейПланирования = 0 Тогда
		Объект.ДнейПланирования = 7;
	КонецЕсли;
	
	Если НЕ ИнформационнаяБазаФайловая Тогда
		
		Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
		Иначе
			ПодключитьОбработчикОжидания("Подключаемый_СформироватьПриОткрытии", БухгалтерскиеОтчетыКлиент.ИнтервалЗапускаФормированияОтчетаПриОткрытии(), Истина);
		КонецЕсли;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	БухгалтерскийУчетКлиентПереопределяемый.ОбработкаОповещенияАктуализации(
		ЭтотОбъект, Объект.Организация, ГоризонтПланирования, ИмяСобытия, Параметр, Источник);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если НЕ ИнформационнаяБазаФайловая Тогда
		
		Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
		Иначе
			НачатьЗаполнениеКалендаряНаКлиенте();
		КонецЕсли;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		
	КонецЕсли;
	
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализацииАвтоматически(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДнейПланированияПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализацииАвтоматически(ЭтотОбъект);
	
	ГоризонтПланирования = ГоризонтПланирования(Объект.ДнейПланирования, НаДату);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	НачатьЗаполнениеКалендаряНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиНаДругуюДату(Команда)
	
	Если ПлатежиПоДокументамДляИзмененияДаты.Количество() = 0 Тогда
		
		ТекстСообщения = НСтр("ru = 'Не выбраны платежи (выделите область, содержащую информацию о платеже).
			|Перенос доступен для платежей поставщикам и оплаты от покупателей.'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	КонецЕсли;
	
	НоваяДатаПлатежа = '00010101';
	
	Для Каждого Платеж Из ПлатежиПоДокументамДляИзмененияДаты.ВыгрузитьЗначения() Цикл
		СтрокиПоиск = Платежи.НайтиСтроки(Новый Структура("Документ", Платеж));
		Для Каждого СтрокаПлатеж Из СтрокиПоиск Цикл
			НоваяДатаПлатежа = Макс(СтрокаПлатеж.ДатаПлатежа, НоваяДатаПлатежа);
		КонецЦикла;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура("НачалоПериода, КонецПериода", НоваяДатаПлатежа, НоваяДатаПлатежа);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВводНовойДатыПлатежаЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаДень", ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийПоляРезультат

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	
	Если Расшифровка = "Просрочено: Оплата от покупателей" Тогда
		
		ОткрытьФорму("Обработка.ОжидаемаяОплатаОтПокупателей.Форма", ПараметрыФормы);
		
	ИначеЕсли Расшифровка = "Просрочено: Платежи поставщикам" Тогда
		
		ОткрытьФорму("Обработка.ОплатаПоставщикам.Форма", ПараметрыФормы);
		
	ИначеЕсли Расшифровка = "Просрочено: Налоги и взносы" Тогда
		
		ПараметрыФормы.Вставить("ТипЗадачи", "Уплата налога");
		ОткрытьФорму("ОбщаяФорма.СписокЗадач", ПараметрыФормы);
		
	ИначеЕсли Расшифровка = "Просрочено: Периодические платежи" Тогда
		
		ПараметрыФормы.Вставить("ТипЗадачи", "Регулярный платеж");
		ОткрытьФорму("ОбщаяФорма.СписокЗадач", ПараметрыФормы);
		
	ИначеЕсли Расшифровка = "Просрочено: Зарплата" Тогда
		
		ПараметрыФормы.Вставить("ТипЗадачи", "Зарплата");
		ОткрытьФорму("ОбщаяФорма.СписокЗадач", ПараметрыФормы);
		
	ИначеЕсли Расшифровка = "Остатки денег" Тогда
		
		РасшифроватьОстаткиДенежныхСредств();
		
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("Структура") Тогда // Это задача бухгалтера
		
		РасшифроватьЗадачу(Расшифровка);
		
	ИначеЕсли ТипЗнч(Расшифровка) = Тип("СписокЗначений") Тогда // Это список документов
		
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("ВыборДокументаЗавершение", ЭтотОбъект);
		ПоказатьВыборИзМеню(ОписаниеОповещенияОЗавершении, Расшифровка);
		
	Иначе
		
		СтандартнаяОбработка = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДокументаЗавершение(ЭлементСписка, ДополнительныеПараметры) Экспорт
	
	Если ЭлементСписка <> Неопределено Тогда
		ПоказатьЗначение(,ЭлементСписка.Значение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)
	
	Если МожноМенятьДатуОплаты Тогда 
		ЗаполнитьПлатежиДляИзмененияДаты();
		
		Элементы.РезультатКонтекстноеМенюПеренестиНаДругуюДату.Доступность = ПлатежиПоДокументамДляИзмененияДаты.Количество() <> 0;
	КонецЕсли;
	
	Если ТипЗнч(Результат.ВыделенныеОбласти) = Тип("ВыделенныеОбластиТабличногоДокумента") Тогда
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
		ПодключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый", ИнтервалОжидания, Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеКалендаря

&НаКлиенте
Процедура Подключаемый_СформироватьПриОткрытии()
	
	НачатьЗаполнениеКалендаряНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()

	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			ЗагрузитьПодготовленныеДанныеНаСервере();
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		КонецЕсли;
	Исключение
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура НачатьЗаполнениеКалендаряНаКлиенте()
	
	ОчиститьСообщения();
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	
	РезультатВыполнения = НачатьЗаполнениеКалендаряНаСервере();
	Если НЕ РезультатВыполнения.ЗаданиеВыполнено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	КонецЕсли;
	
	БухгалтерскийУчетКлиентПереопределяемый.ПослеФормированияОтчета(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыЗаполненияКалендаря()
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Организация",      Объект.Организация);
	ПараметрыЗадания.Вставить("ДнейПланирования", Объект.ДнейПланирования);
	
	Возврат ПараметрыЗадания;
	
КонецФункции

&НаСервере
Функция НачатьЗаполнениеКалендаряНаСервере()
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	ПараметрыЗадания = ПодготовитьПараметрыЗаполненияКалендаря();
	
	Если ИнформационнаяБазаФайловая Тогда
		
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Обработки.ПлатежныйКалендарь.ЗаполнитьКалендарь(ПараметрыЗадания, АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
		
	Иначе
		
		РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Обработки.ПлатежныйКалендарь.ЗаполнитьКалендарь",
			ПараметрыЗадания,
			НСтр("ru = 'Платежный календарь: Формирование'"));
		
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
		
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанныеНаСервере();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанныеНаСервере()
	
	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(РезультатВыполнения) = Тип("Структура") Тогда
		
		Результат = РезультатВыполнения.Календарь;
		Платежи.Загрузить(РезультатВыполнения.Платежи);
		
	КонецЕсли;
	
	ИдентификаторЗадания = Неопределено;
	УдалитьИзВременногоХранилища(АдресХранилища);
	АдресХранилища = "";
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
КонецПроцедуры

#КонецОбласти

#Область КомандыРасшифровки

&НаКлиенте
Процедура РасшифроватьОстаткиДенежныхСредств()
	
	ГруппировкаПоВидуДенежныхСредств = Новый Структура;
	ГруппировкаПоВидуДенежныхСредств.Вставить("Поле",          "ВидДенежныхСредств");
	ГруппировкаПоВидуДенежныхСредств.Вставить("Представление",  НСтр("ru = 'Вид денежных средств'"));
	ГруппировкаПоВидуДенежныхСредств.Вставить("Использование",  Истина);
	ГруппировкаПоВидуДенежныхСредств.Вставить("ТипГруппировки", 0);
	
	ГруппировкаПоРазмещению = Новый Структура;
	ГруппировкаПоРазмещению.Вставить("Поле",           "Размещение");
	ГруппировкаПоРазмещению.Вставить("Представление",  НСтр("ru = 'Размещение'"));
	ГруппировкаПоРазмещению.Вставить("Использование",  Истина);
	ГруппировкаПоРазмещению.Вставить("ТипГруппировки", 0);
	
	ГруппировкиОтчета = Новый Массив;
	ГруппировкиОтчета.Добавить(ГруппировкаПоВидуДенежныхСредств);
	ГруппировкиОтчета.Добавить(ГруппировкаПоРазмещению);
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("РежимРасшифровки", Истина);
	ДополнительныеСвойства.Вставить("Организация",      Объект.Организация);
	ДополнительныеСвойства.Вставить("Период",           НаДату);
	ДополнительныеСвойства.Вставить("Группировка",      ГруппировкиОтчета);
	
	НастройкаОтбора = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	НастройкаОтбора.ИдентификаторПользовательскойНастройки = "Отбор";
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(НастройкаОтбора,
		"ВидДенежныхСредств", "Деньги у подотчетных лиц", ВидСравненияКомпоновкиДанных.НеРавно);
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("ВидРасшифровки",            2);
	ПараметрыОтчета.Вставить("РежимРасшифровки",          Истина);
	ПараметрыОтчета.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	
	ОткрытьФорму("Отчет.ОстаткиДенежныхСредств.Форма", ПараметрыОтчета, ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифроватьЗадачу(ПараметрыКоманды)
	
	ОписаниеДействия = ЗадачиБухгалтераКлиентСервер.ОписаниеДействия(ПараметрыКоманды);
	ВыполнениеЗадачБухгалтераКлиент.ВыполнитьДействие(ОписаниеДействия);
	
КонецПроцедуры

#КонецОбласти

#Область ПрочиеВспомогательныеПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ГоризонтПланирования(ДнейПланирования, ИсходнаяДата)
	
	Возврат КонецДня(ИсходнаяДата + (ДнейПланирования - 1) * 86400);
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПлатежиДляИзмененияДаты()
	
	ПлатежиПоДокументамДляИзмененияДаты.Очистить();
	
	Для Каждого ВыделеннаяОбласть Из Результат.ВыделенныеОбласти Цикл
		
		Если ТипЗнч(ВыделеннаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Продолжить;
		КонецЕсли;
		
		Для ИндексСтрока = ВыделеннаяОбласть.Верх По ВыделеннаяОбласть.Низ Цикл
			Для ИндексКолонка = ВыделеннаяОбласть.Лево По ВыделеннаяОбласть.Право Цикл
				
				Попытка
					
					Ячейка = Результат.Область(ИндексСтрока, ИндексКолонка, ИндексСтрока, ИндексКолонка);
					
					Если Ячейка.Видимость И ЗначениеЗаполнено(Ячейка.Расшифровка) Тогда
						
						Если ТипДокументаПланирования.СодержитТип(ТипЗнч(Ячейка.Расшифровка)) Тогда
							
							ПлатежиПоДокументамДляИзмененияДаты.Добавить(Ячейка.Расшифровка);
							
						ИначеЕсли ТипЗнч(Ячейка.Расшифровка) = Тип("СписокЗначений") Тогда 
							
							ДокументыДляИзмененияДаты = ПлатежиПоДокументамДляИзмененияДаты.ВыгрузитьЗначения();
							ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ДокументыДляИзмененияДаты, Ячейка.Расшифровка.ВыгрузитьЗначения());
							ПлатежиПоДокументамДляИзмененияДаты.ЗагрузитьЗначения(ДокументыДляИзмененияДаты);
							
						КонецЕсли;
					КонецЕсли;
					
				Исключение
				КонецПопытки;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииОбластиПодключаемый()
	
	НеобходимоВычислятьНаСервере = Ложь;
	БухгалтерскиеОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		ПолеСумма, Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере);
	
	Если НеобходимоВычислятьНаСервере Тогда
		ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере();
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый");
	
КонецПроцедуры

&НаСервере
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере()
	
	ПолеСумма = БухгалтерскиеОтчетыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
		Результат, КэшВыделеннойОбласти);
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНовойДатыПлатежаЗавершение(Результат, МассивВыделенныхДокументов) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьНовуюДатуВыделенныхПлатежейПоДокументам(Результат.НачалоПериода,
		ПлатежиПоДокументамДляИзмененияДаты.ВыгрузитьЗначения());
	
	Если НЕ ИнформационнаяБазаФайловая Тогда
		
		Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
		Иначе
			НачатьЗаполнениеКалендаряНаКлиенте();
		КонецЕсли;
		
	Иначе
		
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьНовуюДатуВыделенныхПлатежейПоДокументам(НоваяДатаПлатежа, МассивДокументов)
	СрокиОплатыДокументов.ЗаписатьСрокОплатыДокументов(МассивДокументов, НоваяДатаПлатежа);
КонецПроцедуры

#КонецОбласти

#Область РаботаСФоновымиЗаданиями

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(Знач ИдентификаторЗадания) 

	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);

КонецФункции

#КонецОбласти

#Область Актуализация

&НаКлиенте
Процедура Подключаемый_ПроверитьАктуальность()
	
	БухгалтерскийУчетКлиентПереопределяемый.ПроверитьАктуальность(ЭтотОбъект, Объект.Организация, ГоризонтПланирования);
	
КонецПроцедуры

&НаКлиенте
Процедура Актуализировать(Команда)
	
	БухгалтерскийУчетКлиентПереопределяемый.Актуализировать(ЭтотОбъект, Объект.Организация, ГоризонтПланирования);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеАктуализации()
	
	БухгалтерскийУчетКлиентПереопределяемый.ПроверитьВыполнениеАктуализацииОтчета(ЭтотОбъект, Объект.Организация, ГоризонтПланирования);

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьАктуализацию(Команда)
	
	БухгалтерскийУчетКлиентПереопределяемый.ОтменитьАктуализацию(ЭтотОбъект, Объект.Организация, ГоризонтПланирования);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПриНеобходимостиАктуализацииОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПараметрыАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыйПараметрыАктуализацииОтчета();
	ПараметрыАктуализации.Организация = Объект.Организация;
	ПараметрыАктуализации.ДатаАктуальности = ДатаАктуальности;
	ПараметрыАктуализации.ДатаОкончанияАктуализации = ГоризонтПланирования;
	
	ЗакрытиеМесяцаКлиент.ТекстПриНеобходимостиАктуализацииОбработкаНавигационнойСсылки(
		НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка, ЭтотОбъект, ПараметрыАктуализации);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеМесяцаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = "СформироватьОтчет" Тогда
		
		БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализации(ЭтотОбъект);
		Активизировать();
		СформироватьОтчет("");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьНажатие(Элемент)
	
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализации(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьЗавершениеАктуализации()
	
	БухгалтерскийУчетКлиентПереопределяемый.ПроверитьЗавершениеАктуализации(ЭтотОбъект, Объект.Организация, ГоризонтПланирования);
	
КонецПроцедуры

#КонецОбласти
