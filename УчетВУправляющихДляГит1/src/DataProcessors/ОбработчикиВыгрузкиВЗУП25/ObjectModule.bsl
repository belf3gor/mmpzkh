#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда



////////////////////////////////////////////////////////////////////////////////
//
// Данный модуль содержит экспортные процедуры обработчиков событий конвертации 
// и предназначен для отладки правил обмена. 
// После отладки рекомендуется внести соответствующие исправления обработчиков
// в базе «Конвертация данных 2.0» и заново сформировать файл правил.
//
////////////////////////////////////////////////////////////////////////////////
// ИСПОЛЬЗУЕМЫЕ СОКРАЩЕНИЯ ИМЕН ПЕРЕМЕННЫХ (АББРЕВИАТУРЫ)
//
//  ПКО  - правило конвертации объектов
//  ПКС  - правило конвертации свойств объектов
//  ПКГС - правило конвертации группы свойств объектов
//  ПКЗ  - правило конвертации значений объектов
//  ПВД  - правило выгрузки данных
//  ПОД  - правило очистки данных


////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБРАБОТКИ


////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПЕРЕМЕННЫЕ МОДУЛЯ ДЛЯ НАПИСАНИЯ АЛГОРИТМОВ (ОБЩИЕ ДЛЯ ВЫГРУЗКИ И ЗАГРУЗКИ)

Перем Параметры;
Перем Правила;
Перем Алгоритмы;
Перем Запросы;
Перем ТаблицаПравилВыгрузки;
Перем ТаблицаНастройкиПараметров;
Перем УзелДляОбмена; // только для on-line обмена
Перем ОбщиеПроцедурыФункции;
Перем ДатаНачала;
Перем ДатаОкончания;
Перем ДатаВыгрузкиДанных; // только для on-line обмена
Перем КомментарийПриВыгрузкеДанных;
Перем КомментарийПриЗагрузкеДанных;


////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ ОБРАБОТОК ОБМЕНА (ОБЩИЕ ДЛЯ ВЫГРУЗКИ И ЗАГРУЗКИ)

Перем одТипСтрока;                // Тип("Строка")
Перем одТипБулево;                // Тип("Булево")
Перем одТипЧисло;                 // Тип("Число")
Перем одТипДата;                  // Тип("Дата")
Перем одТипХранилищеЗначения;     // Тип("ХранилищеЗначения")
Перем одТипДвоичныеДанные;        // Тип("ДвоичныеДанные")
Перем одТипВидДвиженияНакопления; // Тип("ВидДвиженияНакопления")
Перем одТипУдалениеОбъекта;       // Тип("УдалениеОбъекта")
Перем одТипВидСчета;			  // Тип("ВидСчета")
Перем одТипТип;			  		  // Тип("Тип")
Перем одТипСоответствие;		  // Тип("Соответствие")

Перем одТипУзлаXML_КонецЭлемента;
Перем одТипУзлаXML_НачалоЭлемента;
Перем одТипУзлаXML_Текст;

Перем ЗначениеПустаяДата;


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОНВЕРТАЦИИ (ГЛОБАЛЬНЫЕ)


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ВЫГРУЗКИ ДАННЫХ

Процедура ПВД_ПередВыгрузкой_Хозрасчетный(ФайлОбмена, Отказ, ИмяПКО, Правило, ВходящиеДанные, ИсходящиеДанные, 
                                           Объект) Экспорт

	Если Объект.ПометкаУдаления Тогда
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПВД_ПередОбработкой_ПрибылиИУбытки(Отказ, ИмяПКО, Правило, ИсходящиеДанные, ВыборкаДанных) Экспорт

	 КоличествоЗначенийПеречисления = Перечисления.ПрибылиИУбытки.Количество();
	 Для НомерЗначения = 0 По КоличествоЗначенийПеречисления-1 Цикл
		 ВходящиеДанные = Новый Структура("Наименование");
		 ВходящиеДанные.Наименование = Строка(Перечисления.ПрибылиИУбытки.Получить(НомерЗначения));	 
		 ВыгрузитьПоПравилу(,, ВходящиеДанные,, "ПрибылиИУбытки");
	 КонецЦикла;

КонецПроцедуры

Процедура ПВД_ПередОбработкой_УчетнаяПолитикаОрганизаций(Отказ, ИмяПКО, Правило, ИсходящиеДанные, ВыборкаДанных) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонецТекущегоГода", КонецГода(ТекущаяДатаСеанса()));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Рег.Период КАК Период,
	|	Рег.Организация КАК Организация,
	|	Рег.ПлательщикЕНВД КАК ПлательщикЕНВД,
	|	Рег.ОбъектНалогообложенияУСН КАК ОбъектНалогообложенияУСН,
	|	ВЫБОР
	|		КОГДА ВТ_СоответствиеПериодов.ПериодСледующий ЕСТЬ NULL 
	|				И Рег.Период <= &КонецТекущегоГода
	|			ТОГДА &КонецТекущегоГода
	|		КОГДА ВТ_СоответствиеПериодов.ПериодСледующий ЕСТЬ NULL 
	|				И Рег.Период > &КонецТекущегоГода
	|			ТОГДА КОНЕЦПЕРИОДА(Рег.Период, ГОД)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВТ_СоответствиеПериодов.ПериодСледующий, ДЕНЬ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ПериодПо,
	|	Рег.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация
	|ПОМЕСТИТЬ ВТ_СистемаНалогообложения
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК Рег
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РегУПО1.Период КАК ПериодТекущий,
	|			РегУПО1.Организация КАК Организация,
	|			МИНИМУМ(РегУПО2.Период) КАК ПериодСледующий
	|		ИЗ
	|			РегистрСведений.НастройкиСистемыНалогообложения КАК РегУПО1
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСистемыНалогообложения КАК РегУПО2
	|				ПО РегУПО1.Организация = РегУПО2.Организация
	|					И РегУПО1.Период < РегУПО2.Период
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РегУПО1.Период,
	|			РегУПО1.Организация) КАК ВТ_СоответствиеПериодов
	|		ПО Рег.Организация = ВТ_СоответствиеПериодов.Организация
	|			И Рег.Период = ВТ_СоответствиеПериодов.ПериодТекущий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Рег.Период КАК Период,
	|	Рег.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|	Рег.ВидТарифа КАК ВидТарифа,
	|	ВЫБОР
	|		КОГДА ВТ_СоответствиеПериодов.ПериодСледующий ЕСТЬ NULL 
	|				И Рег.Период <= &КонецТекущегоГода
	|			ТОГДА &КонецТекущегоГода
	|		КОГДА ВТ_СоответствиеПериодов.ПериодСледующий ЕСТЬ NULL 
	|				И Рег.Период > &КонецТекущегоГода
	|			ТОГДА КОНЕЦПЕРИОДА(Рег.Период, ГОД)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВТ_СоответствиеПериодов.ПериодСледующий, ДЕНЬ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ПериодПо
	|ПОМЕСТИТЬ ВТ_ТарифВзносов
	|ИЗ
	|	РегистрСведений.ПрименяемыеТарифыСтраховыхВзносов КАК Рег
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РегУПО1.Период КАК ПериодТекущий,
	|			РегУПО1.ГоловнаяОрганизация КАК ГоловнаяОрганизация,
	|			МИНИМУМ(РегУПО2.Период) КАК ПериодСледующий
	|		ИЗ
	|			РегистрСведений.ПрименяемыеТарифыСтраховыхВзносов КАК РегУПО1
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПрименяемыеТарифыСтраховыхВзносов КАК РегУПО2
	|				ПО РегУПО1.ГоловнаяОрганизация = РегУПО2.ГоловнаяОрганизация
	|					И РегУПО1.Период < РегУПО2.Период
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РегУПО1.Период,
	|			РегУПО1.ГоловнаяОрганизация) КАК ВТ_СоответствиеПериодов
	|		ПО Рег.ГоловнаяОрганизация = ВТ_СоответствиеПериодов.ГоловнаяОрганизация
	|			И Рег.Период = ВТ_СоответствиеПериодов.ПериодТекущий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Рег.Период КАК Период,
	|	Рег.Организация КАК Организация,
	|	Рег.УплачиватьДобровольныеВзносыВФСС КАК УплачиватьДобровольныеВзносыВФСС,
	|	ВЫБОР
	|		КОГДА ВТ_СоответствиеПериодов.ПериодСледующий ЕСТЬ NULL 
	|				И Рег.Период <= &КонецТекущегоГода
	|			ТОГДА &КонецТекущегоГода
	|		КОГДА ВТ_СоответствиеПериодов.ПериодСледующий ЕСТЬ NULL 
	|				И Рег.Период > &КонецТекущегоГода
	|			ТОГДА КОНЕЦПЕРИОДА(Рег.Период, ГОД)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ВТ_СоответствиеПериодов.ПериодСледующий, ДЕНЬ), СЕКУНДА, -1)
	|	КОНЕЦ КАК ПериодПо
	|ПОМЕСТИТЬ ВТ_ДобровольныеВзносы
	|ИЗ
	|	РегистрСведений.НастройкиУчетаСтраховыхВзносовИП КАК Рег
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			РегУПО1.Период КАК ПериодТекущий,
	|			РегУПО1.Организация КАК Организация,
	|			МИНИМУМ(РегУПО2.Период) КАК ПериодСледующий
	|		ИЗ
	|			РегистрСведений.НастройкиУчетаСтраховыхВзносовИП КАК РегУПО1
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетаСтраховыхВзносовИП КАК РегУПО2
	|				ПО РегУПО1.Организация = РегУПО2.Организация
	|					И РегУПО1.Период < РегУПО2.Период
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РегУПО1.Период,
	|			РегУПО1.Организация) КАК ВТ_СоответствиеПериодов
	|		ПО Рег.Организация = ВТ_СоответствиеПериодов.Организация
	|			И Рег.Период = ВТ_СоответствиеПериодов.ПериодТекущий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ВТ_СистемаНалогообложения.Период < ВТ_ТарифВзносов.Период
	|			ТОГДА ВТ_ТарифВзносов.Период
	|		ИНАЧЕ ВТ_СистемаНалогообложения.Период
	|	КОНЕЦ КАК Период,
	|	ВТ_СистемаНалогообложения.Организация КАК Организация,
	|	ВТ_СистемаНалогообложения.ПлательщикЕНВД КАК ПлательщикЕНВД,
	|	ВТ_СистемаНалогообложения.ОбъектНалогообложенияУСН КАК ОбъектНалогообложенияУСН,
	|	ЕСТЬNULL(ВТ_ТарифВзносов.ВидТарифа, НЕОПРЕДЕЛЕНО) КАК ВидТарифа,
	|	ВЫБОР
	|		КОГДА ВТ_СистемаНалогообложения.ПериодПо > ВТ_ТарифВзносов.ПериодПо
	|			ТОГДА ВТ_ТарифВзносов.ПериодПо
	|		ИНАЧЕ ВТ_СистемаНалогообложения.ПериодПо
	|	КОНЕЦ КАК ПериодПо
	|ПОМЕСТИТЬ ВТ_Промежуточная
	|ИЗ
	|	ВТ_СистемаНалогообложения КАК ВТ_СистемаНалогообложения
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ТарифВзносов КАК ВТ_ТарифВзносов
	|		ПО ВТ_СистемаНалогообложения.Организация = ВТ_ТарифВзносов.ГоловнаяОрганизация
	|			И (ВТ_СистемаНалогообложения.Период = ВТ_ТарифВзносов.Период
	|				ИЛИ ВТ_СистемаНалогообложения.Период > ВТ_ТарифВзносов.Период
	|					И ВТ_СистемаНалогообложения.ПериодПо >= ВТ_ТарифВзносов.ПериодПо
	|				ИЛИ ВТ_СистемаНалогообложения.Период < ВТ_ТарифВзносов.Период
	|					И ВТ_СистемаНалогообложения.ПериодПо < ВТ_ТарифВзносов.ПериодПо
	|					И ВТ_СистемаНалогообложения.ПериодПо > ВТ_ТарифВзносов.Период
	|				ИЛИ ВТ_СистемаНалогообложения.Период > ВТ_ТарифВзносов.Период
	|					И ВТ_СистемаНалогообложения.ПериодПо < ВТ_ТарифВзносов.ПериодПо
	|				ИЛИ ВТ_СистемаНалогообложения.Период <= ВТ_ТарифВзносов.Период
	|					И ВТ_СистемаНалогообложения.ПериодПо >= ВТ_ТарифВзносов.ПериодПо)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|   Истина КАК Активность,
	|	ВЫБОР
	|		КОГДА ВТ_Промежуточная.Период < ВТ_ДобровольныеВзносы.Период
	|			ТОГДА ВТ_ДобровольныеВзносы.Период
	|		ИНАЧЕ ВТ_Промежуточная.Период
	|	КОНЕЦ КАК Период,
	|	ВТ_Промежуточная.Организация КАК Организация,
	|	ВТ_Промежуточная.ПлательщикЕНВД КАК ОрганизацияЯвляетсяПлательщикомЕНВД,
	|	ВТ_Промежуточная.ОбъектНалогообложенияУСН КАК ОбъектНалогообложенияУСН,
	|	ВТ_Промежуточная.ВидТарифа КАК ВидТарифаСтраховыхВзносов,
	|	ЕСТЬNULL(ВТ_ДобровольныеВзносы.УплачиватьДобровольныеВзносыВФСС, ЛОЖЬ) КАК УплачиватьДобровольныеВзносыВФСС
	|ИЗ
	|	ВТ_Промежуточная КАК ВТ_Промежуточная
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДобровольныеВзносы КАК ВТ_ДобровольныеВзносы
	|		ПО ВТ_Промежуточная.Организация = ВТ_ДобровольныеВзносы.Организация
	|			И (ВТ_Промежуточная.Период = ВТ_ДобровольныеВзносы.Период
	|				ИЛИ ВТ_Промежуточная.Период > ВТ_ДобровольныеВзносы.Период
	|					И ВТ_Промежуточная.ПериодПо >= ВТ_ДобровольныеВзносы.ПериодПо
	|				ИЛИ ВТ_Промежуточная.Период < ВТ_ДобровольныеВзносы.Период
	|					И ВТ_Промежуточная.ПериодПо < ВТ_ДобровольныеВзносы.ПериодПо
	|					И ВТ_Промежуточная.ПериодПо > ВТ_ДобровольныеВзносы.Период
	|				ИЛИ ВТ_Промежуточная.Период > ВТ_ДобровольныеВзносы.Период
	|					И ВТ_Промежуточная.ПериодПо < ВТ_ДобровольныеВзносы.ПериодПо
	|				ИЛИ ВТ_Промежуточная.Период <= ВТ_ДобровольныеВзносы.Период
	|					И ВТ_Промежуточная.ПериодПо >= ВТ_ДобровольныеВзносы.ПериодПо)";
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Отказ = Истина;
	Иначе
		ВходящиеДанные = Новый Структура("Активность, ОбъектНалогообложенияУСН, Организация, ОрганизацияЯвляетсяПлательщикомЕНВД, Период, УплачиватьДобровольныеВзносыВФСС, ВидТарифаСтраховыхВзносов");
		
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(ВходящиеДанные, Выборка);
			
			Если НЕ ЗначениеЗаполнено(Выборка.ВидТарифаСтраховыхВзносов) Тогда
				Значение = "ОбщийНалоговыйРежим";
			Иначе
				Значение = Справочники.ВидыТарифовСтраховыхВзносов.ПолучитьИмяПредопределенного(Выборка.ВидТарифаСтраховыхВзносов);
				Если НЕ ЗначениеЗаполнено(Значение) Тогда
					Значение = "ОбщийНалоговыйРежим";
				КонецЕсли;
			КонецЕсли;
			ВходящиеДанные.ВидТарифаСтраховыхВзносов = Значение;
			ВыгрузитьПоПравилу(,, ВходящиеДанные,, "УчетнаяПолитикаНалоговыйУчет");
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры

Процедура ПВД_ПередОбработкой_БанковскиеСчетаОрганизаций(Отказ, ИмяПКО, Правило, ИсходящиеДанные, ВыборкаДанных) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	 "ВЫБРАТЬ
	 |	БанковскиеСчета.Ссылка,
	 |	БанковскиеСчета.ПометкаУдаления,
	 |	БанковскиеСчета.Предопределенный,
	 |	БанковскиеСчета.Код,
	 |	БанковскиеСчета.Наименование,
	 |	БанковскиеСчета.НомерСчета,
	 |	БанковскиеСчета.Банк,
	 |	БанковскиеСчета.БанкДляРасчетов,
	 |	БанковскиеСчета.ТекстКорреспондента,
	 |	БанковскиеСчета.ТекстНазначения,
	 |	БанковскиеСчета.ВидСчета,
	 |	БанковскиеСчета.ВалютаДенежныхСредств,
	 |	БанковскиеСчета.НомерИДатаРазрешения,
	 |	БанковскиеСчета.ДатаОткрытия,
	 |	БанковскиеСчета.ДатаЗакрытия,
	 |	БанковскиеСчета.МесяцПрописью,
	 |	БанковскиеСчета.СуммаБезКопеек,
	 |	БанковскиеСчета.ВсегдаУказыватьКПП,
	 |	БанковскиеСчета.Владелец КАК Владелец
	 |ИЗ
	 |	Справочник.БанковскиеСчета КАК БанковскиеСчета";
	
	ЗапросПоСчетам = Запрос.Выполнить().Выбрать();
	
	Пока ЗапросПоСчетам.Следующий() Цикл
		Если ТипЗнч(ЗапросПоСчетам.Владелец) <> Тип("СправочникСсылка.Организации") Тогда
			Продолжить;
		КонецЕсли;
		ВходящиеДанные = Новый Структура("ПометкаУдаления, Код, Наименование, Владелец, НомерСчета, Банк, БанкДляРасчетов, ТекстКорреспондента, ТекстНазначения, ВидСчета, ВалютаДенежныхСредств, НомерИДатаРазрешения, ДатаОткрытия, ДатаЗакрытия, МесяцПрописью, СуммаБезКопеек");
		ВходящиеДанные.ПометкаУдаления			= ЗапросПоСчетам.ПометкаУдаления;
		ВходящиеДанные.Код						= ЗапросПоСчетам.Код;
		ВходящиеДанные.Наименование				= ЗапросПоСчетам.Наименование;
		ВходящиеДанные.Владелец					= ЗапросПоСчетам.Владелец;
		ВходящиеДанные.НомерСчета				= ЗапросПоСчетам.НомерСчета;
		ВходящиеДанные.Банк						= ЗапросПоСчетам.Банк;
		ВходящиеДанные.БанкДляРасчетов			= ЗапросПоСчетам.БанкДляРасчетов;
		ВходящиеДанные.ТекстКорреспондента		= ЗапросПоСчетам.ТекстКорреспондента;
		ВходящиеДанные.ТекстНазначения			= ЗапросПоСчетам.ТекстНазначения;
		ВходящиеДанные.ВидСчета					= ЗапросПоСчетам.ВидСчета;
		ВходящиеДанные.ВалютаДенежныхСредств	= ЗапросПоСчетам.ВалютаДенежныхСредств;
		ВходящиеДанные.НомерИДатаРазрешения		= ЗапросПоСчетам.НомерИДатаРазрешения;
		ВходящиеДанные.ДатаОткрытия				= ЗапросПоСчетам.ДатаОткрытия;
		ВходящиеДанные.ДатаЗакрытия				= ЗапросПоСчетам.ДатаЗакрытия;
		ВходящиеДанные.МесяцПрописью			= ЗапросПоСчетам.МесяцПрописью;
		ВходящиеДанные.СуммаБезКопеек			= ЗапросПоСчетам.СуммаБезКопеек;
		Объект									= ЗапросПоСчетам.Ссылка;
		ВыгрузитьПоПравилу(Объект,, ВходящиеДанные,, "БанковскиеСчета");	
	КонецЦикла;

КонецПроцедуры

Процедура ПВД_ПередОбработкой_НастройкиПараметровУчета(Отказ, ИмяПКО, Правило, ИсходящиеДанные, ВыборкаДанных) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(УчетСтраховыхВзносовНастройкиОрганизаций.ИспользуетсяТрудФармацевтов) КАК ИспользуетсяТрудФармацевтов,
	|	МАКСИМУМ(УчетСтраховыхВзносовНастройкиОрганизаций.ИспользуетсяТрудЧленовЛетныхЭкипажей) КАК ИспользуетсяТрудЧленовЛетныхЭкипажей,
	|	МАКСИМУМ(УчетСтраховыхВзносовНастройкиОрганизаций.ИспользуетсяТрудЧленовЭкипажейМорскихСудов) КАК ИспользуетсяТрудЧленовЭкипажейМорскихСудов,
	|	МАКСИМУМ(УчетСтраховыхВзносовНастройкиОрганизаций.ИспользуетсяТрудШахтеров) КАК ИспользуетсяТрудШахтеров,
	|	МАКСИМУМ(УчетСтраховыхВзносовНастройкиОрганизаций.ИспользуютсяРаботыСДосрочнойПенсией) КАК ИспользуютсяРаботыСДосрочнойПенсией,
	|	МАКСИМУМ(УчетСтраховыхВзносовНастройкиОрганизаций.ПрименяютсяРезультатыСпециальнойОценкиУсловийТруда) КАК ПрименятьРезультатыСпециальнойОценкиУсловийТруда
	|ИЗ
	|	РегистрСведений.НастройкиУчетаСтраховыхВзносов КАК УчетСтраховыхВзносовНастройкиОрганизаций";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ВходящиеДанные = Новый Структура("ИспользуетсяТрудФармацевтов,ИспользуетсяТрудЧленовЛетныхЭкипажей,ИспользуетсяТрудЧленовЭкипажейМорскихСудов,ИспользуетсяТрудШахтеров, ИспользуютсяРаботыСДосрочнойПенсией, ПрименятьРезультатыСпециальнойОценкиУсловийТруда", Выборка.ИспользуетсяТрудФармацевтов, Выборка.ИспользуетсяТрудЧленовЛетныхЭкипажей, Выборка.ИспользуетсяТрудЧленовЭкипажейМорскихСудов, Выборка.ИспользуетсяТрудШахтеров, Выборка.ИспользуютсяРаботыСДосрочнойПенсией, Выборка.ПрименятьРезультатыСпециальнойОценкиУсловийТруда);
		ВыгрузитьПоПравилу(,, ВходящиеДанные,, "КонстантыНабор");	
	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОНВЕРТАЦИИ ОБЪЕКТОВ

Процедура ПКО_ПослеВыгрузки_Хозрасчетный(ФайлОбмена, Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, 
                                           ПКО, ВыгруженныеОбъекты, КлючВыгружаемыхДанных, Отказ, Приемник, 
                                           УзелСсылки) Экспорт

	Если Источник.УчетПоПодразделениям Тогда
		ВходящиеДанные = Новый Структура("Счет");
		ВходящиеДанные.Счет = Источник;	
		ВыгрузитьПоПравилу(,, ВходящиеДанные,, "СчетаУчетаПоПодразделениям");
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПослеВыгрузки_ФизическиеЛица(ФайлОбмена, Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, 
                                           ПКО, ВыгруженныеОбъекты, КлючВыгружаемыхДанных, Отказ, Приемник, 
                                           УзелСсылки) Экспорт

		Если НЕ Источник.ЭтоГруппа Тогда
			Для Каждого Значение ИЗ Источник.КонтактнаяИнформация Цикл
				
				Если Значение.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон ИЛИ
					Значение.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
					
					ВходящиеДанные = Новый Структура("Вид, Тип, Представление, ЗначениеПоУмолчанию, Поле1, Поле10, Поле2, Поле3, Поле4, Поле5, Поле6, Поле7, Поле8, Поле9, ТипДома, ТипКорпуса, ТипКвартиры, Комментарий");
					ВходящиеДанные.Вид                 = Значение.Вид;
					ВходящиеДанные.Тип                 = Значение.Тип;
					ВходящиеДанные.Представление       = Значение.Представление;
					ВходящиеДанные.ЗначениеПоУмолчанию = Ложь;
								
					КонтакнаяИнформация = УправлениеКонтактнойИнформацией.ПредыдущаяСтруктураКонтактнойИнформацииXML(Значение.ЗначенияПолей);
					
					Если ТипЗнч(КонтакнаяИнформация) <> Тип("Структура") Тогда
						Продолжить;
					КонецЕсли;
					
					Если Значение.Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
						КонтакнаяИнформация.Свойство("КодСтраны",     ВходящиеДанные.Поле1); // код страны
						КонтакнаяИнформация.Свойство("КодГорода",     ВходящиеДанные.Поле2); // код города
						КонтакнаяИнформация.Свойство("НомерТелефона", ВходящиеДанные.Поле3); // номер телефона
						КонтакнаяИнформация.Свойство("Добавочный",    ВходящиеДанные.Поле4); // добавочный номер
						ВходящиеДанные.Поле5               = "";
						ВходящиеДанные.Поле6               = "";
						ВходящиеДанные.Поле7               = "";
						ВходящиеДанные.Поле8               = "";
						ВходящиеДанные.Поле9               = "";
						ВходящиеДанные.Поле10              = "";
						ВходящиеДанные.ТипДома             = "";
						ВходящиеДанные.ТипКорпуса          = "";
						ВходящиеДанные.ТипКвартиры         = "";
						
					ИначеЕсли Значение.Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
						Если Значение.Вид <> Справочники.ВидыКонтактнойИнформации.АдресЗаПределамиРФФизическиеЛица Тогда
							// российский
							КонтакнаяИнформация.Свойство("Индекс",          ВходящиеДанные.Поле1); // Индекс
							КонтакнаяИнформация.Свойство("Регион",          ВходящиеДанные.Поле2); // Регион
							КонтакнаяИнформация.Свойство("Район",           ВходящиеДанные.Поле3); // Район
							КонтакнаяИнформация.Свойство("Город",           ВходящиеДанные.Поле4); // Город
							КонтакнаяИнформация.Свойство("НаселенныйПункт", ВходящиеДанные.Поле5); // Населенный пункт
							КонтакнаяИнформация.Свойство("Улица",           ВходящиеДанные.Поле6); // Улица						
							КонтакнаяИнформация.Свойство("Дом",             ВходящиеДанные.Поле7); // Дом
							КонтакнаяИнформация.Свойство("Корпус",          ВходящиеДанные.Поле8); // Корпус
							КонтакнаяИнформация.Свойство("Квартира",        ВходящиеДанные.Поле9); // Квартира
							ВходящиеДанные.Поле10              = "";
							КонтакнаяИнформация.Свойство("ТипДома",         ВходящиеДанные.ТипДома);
							КонтакнаяИнформация.Свойство("ТипКорпуса",      ВходящиеДанные.ТипКорпуса);
							
							ВходящиеДанные.ТипКвартиры         = "Квартира";
							
							Если ЗначениеЗаполнено(ВходящиеДанные.ТипКорпуса) Тогда
								Если ВходящиеДанные.ТипКорпуса <> "Корпус" 
									И ВходящиеДанные.ТипКорпуса <> "Строение" Тогда
									ВходящиеДанные.ТипКорпуса = "Корпус"
								КонецЕсли;
							КонецЕсли;
							
							Если ЗначениеЗаполнено(ВходящиеДанные.ТипДома) Тогда
								Если ВходящиеДанные.ТипДома <> "Дом" 
									И ВходящиеДанные.ТипДома <> "Владение" Тогда
									ВходящиеДанные.ТипДома = "Дом"
								КонецЕсли;
							КонецЕсли;
							
							ТекущееПредставление = "";
							
							Дополнение = ВходящиеДанные.Поле1;
							Если Дополнение <> "" Тогда
								ТекущееПредставление = ТекущееПредставление + ", " + Дополнение;
							КонецЕсли;
							Дополнение = ВходящиеДанные.Поле2;
							Если Дополнение <> "" Тогда
								ТекущееПредставление = ТекущееПредставление + ", " + Дополнение;
							КонецЕсли;
							Дополнение = ВходящиеДанные.Поле3;
							Если Дополнение <> "" Тогда
								ТекущееПредставление = ТекущееПредставление + ", " + Дополнение;
							КонецЕсли;
							Дополнение = ВходящиеДанные.Поле4;
							Если Дополнение <> "" Тогда
								ТекущееПредставление = ТекущееПредставление + ", " + Дополнение;
							КонецЕсли;
							Дополнение = ВходящиеДанные.Поле5;
							Если Дополнение <> "" Тогда
								ТекущееПредставление = ТекущееПредставление + ", " + Дополнение;
							КонецЕсли;
							Дополнение = ВходящиеДанные.Поле6;
							Если Дополнение <> "" Тогда
								ТекущееПредставление = ТекущееПредставление + ", " + Дополнение;
							КонецЕсли;
							Дополнение = ВходящиеДанные.Поле7;
							Если Дополнение <> "" Тогда
								ТекущееПредставление = ТекущееПредставление + ", " + ?(ЗначениеЗаполнено(ВходящиеДанные.ТипДома), НРег(Строка(ВходящиеДанные.ТипДома)), "дом") + " № " + Дополнение;
							КонецЕсли;
							Дополнение = ВходящиеДанные.Поле8;
							Если Дополнение <> "" Тогда
								ТекущееПредставление = ТекущееПредставление + ", " + ?(ЗначениеЗаполнено(ВходящиеДанные.ТипКорпуса), НРег(Строка(ВходящиеДанные.ТипКорпуса)), "корпус") + " " + Дополнение;
							КонецЕсли;
							Дополнение = ВходящиеДанные.Поле9;
							Если Дополнение <> "" Тогда
								ТекущееПредставление = ТекущееПредставление + ", " + "кв." + "" + Дополнение;
							КонецЕсли;
							
							Если СтрДлина(ТекущееПредставление) > 2 Тогда
								ТекущееПредставление = Сред(ТекущееПредставление, 3);
							КонецЕсли; 
							
							ВходящиеДанные.Представление = ТекущееПредставление;
								
						Иначе
							//иностранный
							КонтакнаяИнформация.Свойство("Страна",          ВходящиеДанные.Поле1);// Страна
							ВходящиеДанные.Поле2               = "";
							ВходящиеДанные.Поле3               = "";
							ВходящиеДанные.Поле4               = "";
							ВходящиеДанные.Поле5               = "";
							ВходящиеДанные.Поле6               = "";
							ВходящиеДанные.Поле7               = "";
							ВходящиеДанные.Поле8               = "";
							ВходящиеДанные.Поле9               = "";
							ВходящиеДанные.Поле10              = "";
							ВходящиеДанные.ТипДома             = "Дом";
							ВходящиеДанные.ТипКорпуса          = "Корпус";
							ВходящиеДанные.ТипКвартиры         = "Квартира";
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
				
				ВыгрузитьПоПравилу(Источник,, ВходящиеДанные,, "КонтактнаяИнформация");
				
			КонецЦикла;
		КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПередВыгрузкой_ПрочиеДоходыИРасходы(ФайлОбмена, Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, 
                                           ПКО, ВыгруженныеОбъекты, Отказ, КлючВыгружаемыхДанных, ЗапоминатьВыгруженные, 
                                           НеЗамещатьОбъектПриЗагрузке, ВсеОбъектыВыгружены, ТолькоПолучитьУзелСсылки, 
                                           Приемник, РежимЗаписи, РежимПроведения, НеСоздаватьЕслиНеНайден) Экспорт

	Если Не Источник.ЭтоГруппа Тогда
		ВидРасходов = Источник.ВидПрочихДоходовИРасходов;
		ПКВидаРасходов = НайтиПравило(ВидРасходов);
		
		Если ПКВидаРасходов = Неопределено Тогда
			Отказ = Истина;
			
		ИначеЕсли (ПКВидаРасходов.Значения[ВидРасходов] = Неопределено) ИЛИ (НЕ ЗначениеЗаполнено(Источник.ВидДеятельностиДляНалоговогоУчетаЗатрат)) Тогда
			Отказ = Истина;
			
		ИначеЕсли Источник.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты Тогда
			Отказ = Истина;
		
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПередВыгрузкой_СтатьиЗатрат(ФайлОбмена, Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, 
                                           ПКО, ВыгруженныеОбъекты, Отказ, КлючВыгружаемыхДанных, ЗапоминатьВыгруженные, 
                                           НеЗамещатьОбъектПриЗагрузке, ВсеОбъектыВыгружены, ТолькоПолучитьУзелСсылки, 
                                           Приемник, РежимЗаписи, РежимПроведения, НеСоздаватьЕслиНеНайден) Экспорт

	Если НЕ Источник.ЭтоГруппа Тогда
		
		ВидРасходов = Источник.ВидРасходовНУ;
		ПКВидаРасходов = НайтиПравило(ВидРасходов);
		
		Если НЕ ЗначениеЗаполнено(ВидРасходов) И Источник.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения Тогда
			Отказ = Ложь;
			
		ИначеЕсли ПКВидаРасходов = Неопределено Тогда
			
			Отказ = Истина;
			
		ИначеЕсли (ПКВидаРасходов.Значения[ВидРасходов] = Неопределено) ИЛИ (НЕ ЗначениеЗаполнено(Источник.ВидДеятельностиДляНалоговогоУчетаЗатрат)) Тогда
			Отказ = Истина;
			
		ИначеЕсли Источник.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.РаспределяемыеЗатраты Тогда
			Отказ = Истина;
		КонецЕсли;
			
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПередВыгрузкой_СотрудникиОрганизаций(ФайлОбмена, Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, 
                                           ПКО, ВыгруженныеОбъекты, Отказ, КлючВыгружаемыхДанных, ЗапоминатьВыгруженные, 
                                           НеЗамещатьОбъектПриЗагрузке, ВсеОбъектыВыгружены, ТолькоПолучитьУзелСсылки, 
                                           Приемник, РежимЗаписи, РежимПроведения, НеСоздаватьЕслиНеНайден) Экспорт

	Если НЕ Источник.ЭтоГруппа Тогда
		СписокКадровыхДанных = "Должность, Подразделение, ТарифнаяСтавка, Организация, ДатаПриема, ВидЗанятости";
		КадровыеДанныеСотрудников = КадровыйУчет.КадровыеДанныеСотрудников(Истина, Источник, СписокКадровыхДанных, ТекущаяДата()); 
		ВходящиеДанные = Новый Структура;
		ВходящиеДанные.Вставить("Должность", КадровыеДанныеСотрудников[0].Должность);
		ВходящиеДанные.Вставить("ПодразделениеОрганизации", КадровыеДанныеСотрудников[0].Подразделение);
		ВходящиеДанные.Вставить("ТарифнаяСтавка", КадровыеДанныеСотрудников[0].ТарифнаяСтавка);
		ВходящиеДанные.Вставить("ОбособленноеПодразделение", КадровыеДанныеСотрудников[0].Организация);
		ВходящиеДанные.Вставить("ДатаПриемаНаРаботу", КадровыеДанныеСотрудников[0].ДатаПриема);	
		ВходящиеДанные.Вставить("ВидЗанятости", КадровыеДанныеСотрудников[0].ВидЗанятости);	
	КонецЕсли;

КонецПроцедуры

Процедура ПКО_ПередВыгрузкой_ФИОФизЛиц(ФайлОбмена, Источник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО, 
                                           ПКО, ВыгруженныеОбъекты, Отказ, КлючВыгружаемыхДанных, ЗапоминатьВыгруженные, 
                                           НеЗамещатьОбъектПриЗагрузке, ВсеОбъектыВыгружены, ТолькоПолучитьУзелСсылки, 
                                           Приемник, РежимЗаписи, РежимПроведения, НеСоздаватьЕслиНеНайден) Экспорт

	Если ТипЗнч(Источник.ФизическоеЛицо) <> Тип("СправочникСсылка.ФизическиеЛица") Тогда Отказ = Истина КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОНВЕРТАЦИИ СВОЙСТВ И ГРУПП СВОЙСТВ ОБЪЕКТОВ

Процедура ПКС_ПередВыгрузкой_Хозрасчетный__5(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, 
                                           ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО, 
                                           ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, 
                                           НеЗамещать) Экспорт

	Значение = Строка(Источник.Вид);

КонецПроцедуры

Процедура ПКС_ПередВыгрузкой_Хозрасчетный__6(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, 
                                           ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО, 
                                           ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, 
                                           НеЗамещать) Экспорт

	Значение = Строка(Источник.Родитель);

КонецПроцедуры

Процедура ПКС_ПередВыгрузкой_Хозрасчетный__7(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, 
                                           ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО, 
                                           ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, 
                                           НеЗамещать) Экспорт

	Значение = Строка(Источник.Забалансовый);

КонецПроцедуры

Процедура ПКС_ПередВыгрузкой_Хозрасчетный__8(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, 
                                           ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО, 
                                           ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, 
                                           НеЗамещать) Экспорт

	Если Источник.ВидыСубконто.Количество() < 1 Тогда
		Значение = "";
	Иначе
		Значение = Источник.ВидыСубконто[0].ВидСубконто;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПередВыгрузкой_Хозрасчетный__9(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, 
                                           ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО, 
                                           ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, 
                                           НеЗамещать) Экспорт

	Если Источник.ВидыСубконто.Количество() < 1 Тогда
		Значение = "";
	Иначе
		Значение = Источник.ВидыСубконто[0].ТолькоОбороты;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПередВыгрузкой_Хозрасчетный__10(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, 
                                           ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО, 
                                           ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, 
                                           НеЗамещать) Экспорт

	Если Источник.ВидыСубконто.Количество() < 2 Тогда
		Значение = "";
	Иначе
		Значение = Источник.ВидыСубконто[1].ВидСубконто;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПередВыгрузкой_Хозрасчетный__11(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, 
                                           ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО, 
                                           ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, 
                                           НеЗамещать) Экспорт

	Если Источник.ВидыСубконто.Количество() < 2 Тогда
		Значение = "";
	Иначе
		Значение = Источник.ВидыСубконто[1].ТолькоОбороты;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПередВыгрузкой_Хозрасчетный__12(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, 
                                           ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО, 
                                           ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, 
                                           НеЗамещать) Экспорт

	Если Источник.ВидыСубконто.Количество() < 3 Тогда
		Значение = "";
	Иначе
		Значение = Источник.ВидыСубконто[2].ВидСубконто;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПередВыгрузкой_Хозрасчетный__13(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, 
                                           ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО, 
                                           ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, 
                                           НеЗамещать) Экспорт

	Если Источник.ВидыСубконто.Количество() < 3 Тогда
		Значение = "";
	Иначе
		Значение = Источник.ВидыСубконто[2].ТолькоОбороты;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПередВыгрузкой_СчетаУчетаПоПодразделениям_ПрограммаБухгалтерскогоУчета_Измерение1(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, 
                                           ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО, 
                                           ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, 
                                           НеЗамещать) Экспорт

	Если РегламентированнаяОтчетностьПереопределяемый.ИДКонфигурации() = "БПКОРП" Тогда
		Значение = "БухгалтерияПредприятияКОРП30";
	Иначе
		Значение = "БухгалтерияПредприятия30";
	КонецЕсли;

КонецПроцедуры

Процедура ПКГС_ПередОбработкойВыгрузки_ДоговорыКонтрагентов__8(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, 
                                           ПКО, ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, 
                                           НеОчищать) Экспорт

	Если Источник.ЭтоГруппа Тогда Отказ = Истина КонецЕсли;

КонецПроцедуры

Процедура ПКГС_ПередОбработкойВыгрузки_Контрагенты__11(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, 
                                           ПКО, ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, 
                                           НеОчищать) Экспорт

	Если Источник.ЭтоГруппа Тогда Отказ = Истина КонецЕсли;

КонецПроцедуры

Процедура ПКГС_ПередОбработкойВыгрузки_НематериальныеАктивы__7(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, 
                                           ПКО, ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, 
                                           НеОчищать) Экспорт

	Если Источник.ЭтоГруппа Тогда Отказ = Истина КонецЕсли;

КонецПроцедуры

Процедура ПКГС_ПередОбработкойВыгрузки_ФизическиеЛица__13(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, 
                                           ПКО, ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, 
                                           НеОчищать) Экспорт

	Если Источник.ЭтоГруппа Тогда Отказ = Истина КонецЕсли;

КонецПроцедуры

Процедура ПКГС_ПередОбработкойВыгрузки_ПрочиеДоходыИРасходы__8(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, 
                                           ПКО, ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, 
                                           НеОчищать) Экспорт

	Если Источник.ЭтоГруппа Тогда Отказ = Истина КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПередВыгрузкой_ПрочиеДоходыИРасходы_ОтнесениеРасходовКДеятельностиЕНВД_Реквизит9(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, 
                                           ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО, 
                                           ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, 
                                           НеЗамещать) Экспорт

	Если Источник.ВидДеятельностиДляНалоговогоУчетаЗатрат = Перечисления.ВидыДеятельностиДляНалоговогоУчетаЗатрат.ОсобыйПорядокНалогообложения Тогда
		Значение = "РасходыОтносятсяКЕНВД";
	Иначе
		Значение = "РасходыОтносятсяКнеЕНВД";
	КонецЕсли;

КонецПроцедуры

Процедура ПКГС_ПередОбработкойВыгрузки_СтатьиЗатрат__8(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, 
                                           ПКО, ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, 
                                           НеОчищать) Экспорт

	Если Источник.ЭтоГруппа Тогда Отказ = Истина КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПередВыгрузкой_СтатьиЗатрат_ВидРасходовНУ_Реквизит6(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, 
                                           ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО, 
                                           ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, 
                                           НеЗамещать) Экспорт

	ПКВидаРасходов = НайтиПравило(Источник.ВидРасходовНУ);
	Если ПКВидаРасходов = Неопределено Тогда
		Значение = Перечисления.ВидыРасходовНУ.ПустаяСсылка();
		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПередВыгрузкой_ПодразделенияОрганизаций_КодПоОКАТО_Реквизит6(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, 
                                           ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО, 
                                           ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, 
                                           НеЗамещать) Экспорт

	Если Найти(ВРег(Метаданные.Имя), "КОРП") = 0 Тогда
		Отказ = Истина;	
	Иначе
		Если Источник.ОбособленноеПодразделение Тогда
			Если ЗначениеЗаполнено(Источник.РегистрацияВНалоговомОргане) Тогда
				Значение = Источник.РегистрацияВНалоговомОргане.КодПоОКАТО;
			Иначе
				Отказ = Истина;	
			КонецЕсли;	
			
		Иначе
			Отказ = Истина;	
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПередВыгрузкой_ПодразделенияОрганизаций_КодПоОКТМО_Реквизит8(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, 
                                           ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО, 
                                           ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, 
                                           НеЗамещать) Экспорт

	Если Найти(ВРег(Метаданные.Имя), "КОРП") = 0 Тогда
		Отказ = Истина;	
	Иначе
		Если Источник.ОбособленноеПодразделение Тогда
			Если ЗначениеЗаполнено(Источник.РегистрацияВНалоговомОргане) Тогда
				Значение = Источник.РегистрацияВНалоговомОргане.КодПоОКТМО;
			Иначе
				Отказ = Истина;	
			КонецЕсли;	
			
		Иначе
			Отказ = Истина;	
		КонецЕсли;	
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПередВыгрузкой_ПодразделенияОрганизаций_КПП_Реквизит7(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, 
                                           ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО, 
                                           ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, 
                                           НеЗамещать) Экспорт

	Если Найти(ВРег(Метаданные.Имя), "КОРП") = 0 Тогда
		Отказ = Истина;	
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПередВыгрузкой_ПрибылиИУбытки__1(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, 
                                           ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО, 
                                           ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, 
                                           НеЗамещать) Экспорт

	Значение = "ПрибылиИУбытки";

КонецПроцедуры

Процедура ПКС_ПередВыгрузкой_НаправленияИспользованияПрибыли__1(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, 
                                           ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО, 
                                           ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, 
                                           НеЗамещать) Экспорт

	Значение = "НаправленияИспользованияПрибыли";

КонецПроцедуры

Процедура ПКС_ПередВыгрузкой_Организации_КодПоОКАТО_Реквизит11(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, 
                                           ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО, 
                                           ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, 
                                           НеЗамещать) Экспорт

	Если ЗначениеЗаполнено(Источник.РегистрацияВНалоговомОргане) Тогда
		Значение = Источник.РегистрацияВНалоговомОргане.КодПоОКАТО;
	Иначе
		Отказ = Истина;	
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПередВыгрузкой_Организации_КодПоОКТМО_Реквизит39(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, 
                                           ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО, 
                                           ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, 
                                           НеЗамещать) Экспорт

		Если ЗначениеЗаполнено(Источник.РегистрацияВНалоговомОргане) Тогда
			Значение = Источник.РегистрацияВНалоговомОргане.КодПоОКТМО;
		Иначе
			Отказ = Истина;	
		КонецЕсли;

КонецПроцедуры

Процедура ПКГС_ПередОбработкойВыгрузки_Банки__10(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, 
                                           ПКО, ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, 
                                           НеОчищать) Экспорт

	Если Источник.ЭтоГруппа Тогда Отказ = Истина КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПередВыгрузкой_СотрудникиОрганизаций_Организация_Реквизит5(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, 
                                           ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО, 
                                           ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, 
                                           НеЗамещать) Экспорт

	Если Источник.ЭтоГруппа тогда
		Отказ = истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПередВыгрузкой_СотрудникиОрганизаций_Физлицо_Реквизит9(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, 
                                           ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО, 
                                           ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, 
                                           НеЗамещать) Экспорт

	Если Источник.ЭтоГруппа тогда
		Отказ = истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПередВыгрузкой_СотрудникиОрганизаций_Актуальность_Реквизит1(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, 
                                           ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО, 
                                           ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, 
                                           НеЗамещать) Экспорт

	Значение = НЕ Источник.ВАрхиве;

КонецПроцедуры

Процедура ПКГС_ПередОбработкойВыгрузки_СотрудникиОрганизаций__20(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, 
                                           ПКО, ПКГС, Отказ, КоллекцияОбъектов, НеЗамещать, УзелКоллекцииСвойств, 
                                           НеОчищать) Экспорт

	Если Источник.ЭтоГруппа тогда
		Отказ = истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПКС_ПередВыгрузкой_СотрудникиОрганизаций_ЗанимаемыхСтавок_Реквизит17(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, 
                                           ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО, 
                                           ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, 
                                           НеЗамещать) Экспорт

	Значение = 1;

КонецПроцедуры

Процедура ПКС_ПередВыгрузкой_СтатусФизЛицКакНалогоплательщиковНДФЛ_Статус_Ресурс5(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, 
                                           ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО, 
                                           ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, 
                                           НеЗамещать) Экспорт

	Значение = Справочники.СтатусыНалогоплательщиковПоНДФЛ.ПолучитьИмяПредопределенного(Источник.Статус);

КонецПроцедуры

Процедура ПКС_ПередВыгрузкой_КонтактнаяИнформация_Активность_Свойство1(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, 
                                           ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО, 
                                           ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, 
                                           НеЗамещать) Экспорт

	Значение = Истина;

КонецПроцедуры

Процедура ПКС_ПередВыгрузкой_КонтактнаяИнформация_Объект_Измерение2(ФайлОбмена, Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, 
                                           ПКС, ПКО, ОбъектКоллекции, Отказ, Значение, ТипПриемника, ИмяПКО, 
                                           ИмяПКОВидСубконто, Пусто, Выражение, УзелКоллекцииСвойств, 
                                           НеЗамещать) Экспорт

	Значение = Источник;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
//                             ВНИМАНИЕ 
//            ИЗМЕНЯТЬ КОД В ЭТОМ БЛОКЕ (НИЖЕ) ЗАПРЕЩЕНО!
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
// ВЫЗОВ ОБЩИХ ПРОЦЕДУР И ФУНКЦИЙ


// Производит выгрузку объекта в соответствии с указанным правилом конвертации
//
// Параметры:
//  Источник				 - произвольный источник данных
//  Приемник				 - xml-узел объекта приемника
//  ВходящиеДанные			 - произвольные вспомогательные данные, передаваемые правилу
//                             для выполнения конвертации
//  ИсходящиеДанные			 - произвольные вспомогательные данные, передаваемые правилам
//                             конвертации свойств
//  ИмяПКО					 - имя правила конвертации, согласно которому осуществляется выгрузка
//  УзелСсылки				 - xml-узел ссылки объекта приемника
//  ТолькоПолучитьУзелСсылки - если Истина, то выгрузка объекта не производится, только формируется
//                             xml-узел ссылки
//  ПКО                      - ссылка на правило конвертации
//
// Возвращаемое значение:
//  xml-узел ссылки или значение приемника
//
Функция ВыгрузитьПоПравилу(Источник					= Неопределено,
						   Приемник					= Неопределено,
						   ВходящиеДанные			= Неопределено,
						   ИсходящиеДанные			= Неопределено,
						   ИмяПКО					= "") Экспорт
						   
	Возврат ОбщиеПроцедурыФункции.ВыгрузитьПоПравилу(Источник, Приемник, ВходящиеДанные, ИсходящиеДанные, ИмяПКО);
	
КонецФункции

// Создает новый xml-узел
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
//
// Параметры: 
//  Имя            - Имя узла
//
// Возвращаемое значение:
//  Объект нового xml-узла
//
Функция СоздатьУзел(Имя) Экспорт

	Возврат ОбщиеПроцедурыФункции.СоздатьУзел(Имя); 

КонецФункции

// Добавляет новый xml-узел к указанному узлу-родителю
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры: 
//  УзелРодитель   - xml-узел-родитель
//  Имя            - имя добавляемого узла
//
// Возвращаемое значение:
//  Новый xml-узел, добавленный к указанному узлу-родителю
//
Функция ДобавитьУзел(УзелРодитель, Имя) Экспорт

	Возврат ОбщиеПроцедурыФункции.ДобавитьУзел(УзелРодитель, Имя); 

КонецФункции

// Копирует указанный xml-узел
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры: 
//  Узел           - копируемый узел
//
// Возвращаемое значение:
//  Новый xml - копия указанного узла
//
Функция КопироватьУзел(Узел) Экспорт

	Возврат ОбщиеПроцедурыФункции.КопироватьУзел(Узел); 
	
КонецФункции 

// Устанавливает значение параметра "Загрузка" для свойства объекта "ОбменДанными".
//
// Параметры:
//  Объект   - объект, для которого устанавливается свойство
//  Значение - значение устанавливаемого свойства "Загрузка"
// 
Процедура УстановитьОбменДаннымиЗагрузка(Объект, Значение = Истина) Экспорт

	ОбщиеПроцедурыФункции.УстановитьОбменДаннымиЗагрузка(Объект, Значение);
	
КонецПроцедуры

// Устанавливает атрибут указанного xml-узла
//
// Параметры: 
//  Узел           - xml-узел
//  Имя            - имя атрибута
//  Значение       - устанавливаемое значение
//
Процедура УстановитьАтрибут(Узел, Имя, Значение) Экспорт
	
	ОбщиеПроцедурыФункции.УстановитьАтрибут(Узел, Имя, Значение);
	
КонецПроцедуры

// Подчиняет xml-узел указанному узлу-родителю
//
// Параметры: 
//  УзелРодитель   - xml-узел-родитель
//  Узел           - подчиняемый узел 
//
Процедура ДобавитьПодчиненный(УзелРодитель, Узел) Экспорт

	ОбщиеПроцедурыФункции.ДобавитьПодчиненный(УзелРодитель, Узел);
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ОБЪЕКТОМ XMLЧтение

// Осуществляет запись элемента и его значения в указанный объект
//
// Параметры:
//  Объект         - объект типа XMLЗапись
//  Имя            - Строка. Имя элемента
//  Значение       - Значение элемента
// 
Процедура одЗаписатьЭлемент(Объект, Имя, Значение="") Экспорт

	ОбщиеПроцедурыФункции.одЗаписатьЭлемент(Объект, Имя, Значение);
	
КонецПроцедуры

// Читает значение атрибута по имени из указанного объекта, приводит значение
// к указанному примитивному типу
//
// Параметры:
//  Объект      - объект типа XMLЧтение, спозиционированный на начале элемента,
//                атрибут которого требуется получить
//  Тип         - Значение типа Тип. Тип атрибута
//  Имя         - Строка. Имя атрибута
//
// Возвращаемое значение:
//  Значение атрибута полученное по имени и приведенное к указанному типу
// 
Функция одАтрибут(Объект, Тип, Имя) Экспорт
	
	Возврат ОбщиеПроцедурыФункции.одАтрибут(Объект, Тип, Имя);
		
КонецФункции
 
// Пропускает узлы xml до конца указанного элемента (по умолчанию текущего)
//
// Параметры:
//  Объект   - объект типа XMLЧтение
//  Имя      - имя узла, до конца которого пропускаем элементы
// 
Процедура одПропустить(Объект, Имя = "") Экспорт
	
	ОбщиеПроцедурыФункции.одПропустить(Объект, Имя);
	
КонецПроцедуры

// Читает текст элемента и приводит значение к указанному типу
//
// Параметры:
//  Объект           - объект типа XMLЧтение, из которого осуществляется чтение
//  Тип              - тип получаемого значения
//  ИскатьПоСвойству - для ссылочных типов может быть указано свойство, по которому
//                     следует искать объект: "Код", "Наименование", <ИмяРеквизита>, "Имя" (предопределенного значения)
//
// Возвращаемое значение:
//  Значение xml-элемента, приведенное к соответствующему типу
//
Функция одЗначениеЭлемента(Объект, Тип, ИскатьПоСвойству = "", ОбрезатьСтрокуСправа = Истина) Экспорт

	Возврат ОбщиеПроцедурыФункции.одЗначениеЭлемента(Объект, Тип, ИскатьПоСвойству, ОбрезатьСтрокуСправа);

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ДАННЫМИ

// Возвращает строку - имя переданного значения перечисления.
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры:
//	Значение - значение перечисления
//
// Возвращаемое значение:
//	Строка - имя переданного значения перечисления.
//
Функция одИмяЗначенияПеречисления(Значение) Экспорт
	
	Возврат ОбщиеПроцедурыФункции.одИмяЗначенияПеречисления(Значение);
	
КонецФункции

// Определяет заполнено ли переданное значение
//
// Параметры:
//	Значение - значение, заполнение которого надо проверить
//
// Возвращаемое значение:
//	Истина - значение не заполнено, ложь - иначе.
//
Функция одПустое(Значение, ЭтоNULL=Ложь) Экспорт
	
	Возврат ОбщиеПроцедурыФункции.одПустое(Значение, ЭтоNULL);
	
КонецФункции

// Возвращает объект ОписаниеТипов, содержащий указанный тип.
//
// Параметры:
//	ЗначениеТипа - строка с именем типа или значение типа Тип.
//
// Возвращаемое значение:
//	ОписаниеТипов
//
Функция одОписаниеТипа(ЗначениеТипа) Экспорт
	
	Возврат ОбщиеПроцедурыФункции.одОписаниеТипа(ЗначениеТипа);
	
КонецФункции

// Возвращает пустое (дефолтное) значение указанного типа
//
// Параметры:
//	Тип - строка с именем типа или значение типа Тип.
//
// Возвращаемое значение:
//	Пустое значение указанного типа.
// 
Функция одПолучитьПустоеЗначение(Тип) Экспорт
	
	Возврат ОбщиеПроцедурыФункции.одПолучитьПустоеЗначение(Тип);
	
КонецФункции

// Осуществляет простой поиск объекта информационной базы по указанному свойству.
//
// Параметры:
//  Менеджер       - менеджер искомого объекта;
//  Свойство       - свойство, по которому осуществляем поиск: Имя, Код, 
//                   Наименование или Имя индексируемого реквизита;
//  Значение       - значение свойства, по которому ищем объект.
//
// Возвращаемое значение:
//  Найденный объект информационной базы.
//
Функция одНайтиОбъектПоСвойству(Менеджер, Свойство, Значение,
	НайденныйОбъектПоУникальномуИдентификатору = Неопределено,
	ОбщаяСтруктураСвойств = Неопределено, ОбщиеСвойстваПоиска = Неопределено,
	РежимПоискаОсновногоОбъекта = Истина,
	СтрокаЗапросаПоискаПоУникальномуИдентификатору = "") Экспорт
	
	Возврат ОбщиеПроцедурыФункции.одНайтиОбъектПоСвойству(Менеджер, Свойство, Значение,
		НайденныйОбъектПоУникальномуИдентификатору,
		ОбщаяСтруктураСвойств, ОбщиеСвойстваПоиска,
		РежимПоискаОсновногоОбъекта, СтрокаЗапросаПоискаПоУникальномуИдентификатору);
	
КонецФункции

// Осуществляет простой поиск объекта информационной базы по указанному свойству.
//
// Параметры:
//	Стр - Строка - значение свойства, по которому осуществляется поиск объекта;
//	Тип - тип искомого объекта;
//	Свойство - Строка - имя свойства, по-которому ищем объект.
//
// Возвращаемое значение:
//	Найденный объект информационной базы
//
Функция одПолучитьЗначениеПоСтроке(Стр, Тип, Свойство = "") Экспорт
	
	Возврат ОбщиеПроцедурыФункции.одПолучитьЗначениеПоСтроке(Стр, Тип, Свойство);
	
КонецФункции

// Возвращает строковое представление типа значения 
//
// Параметры: 
//  ЗначениеИлиТип - произвольное значение или значение типа тип
//
// Возвращаемое значение:
//  Строка - строковое представление типа значения
//
Функция одТипЗначенияСтрокой(ЗначениеИлиТип) Экспорт
	
	Возврат ОбщиеПроцедурыФункции.одТипЗначенияСтрокой(ЗначениеИлиТип);
	
КонецФункции

// Возвращает XML представление объекта ОписаниеТипов
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры:
//  ОписаниеТипов  - объект ОписаниеТипов, XML представление которого требуется получить
//
// Возвращаемое значение:
//  Строка - XML представление переданного объекта ОписаниеТипов
//
Функция одПолучитьXMLПредставлениеОписанияТипов(ОписаниеТипов) Экспорт
	
	Возврат ОбщиеПроцедурыФункции.одПолучитьXMLПредставлениеОписанияТипов(ОписаниеТипов);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// РАБОТА СО СТРОКАМИ

// Разбирает строку на две части: до подстроки разделителя и после.
//
// Параметры:
//	Стр          - разбираемая строка;
//	Разделитель  - подстрока-разделитель:
//  Режим        - 0 - разделитель в возвращаемые подстроки не включается;
//                 1 - разделитель включается в левую подстроку;
//                 2 - разделитель включается в правую подстроку.
//
// Возвращаемое значение:
//	Правая часть строки - до символа-разделителя.
// 
Функция ОтделитьРазделителем(Стр, Знач Разделитель, Режим=0) Экспорт
	
	Возврат ОбщиеПроцедурыФункции.ОтделитьРазделителем(Стр, Разделитель, Режим);
	
КонецФункции

// Преобразует значения из строки в массив, используя указанный разделитель
//
// Параметры:
//	Стр            - Разбираемая строка
//	Разделитель    - подстрока разделитель
//
// Возвращаемое значение:
//	Массив значений
// 
Функция МассивИзСтроки(Знач Стр, Разделитель=",") Экспорт

	Возврат ОбщиеПроцедурыФункции.МассивИзСтроки(Стр, Разделитель);

КонецФункции

// Возвращает строку номера без символьных префиксов
// Например:
//	ПолучитьСтроковыйНомерБезПрефиксов("УТ0000001234") = "0000001234"
//
// Параметры:
//	Номер - Строка - номер, из которого необходимо вычислить результат функции
// 
// Возвращаемое значение:
//	Строка номера без символьных префиксов
//
Функция ПолучитьСтроковыйНомерБезПрефиксов(Номер) Экспорт
	
	Возврат ОбщиеПроцедурыФункции.ПолучитьСтроковыйНомерБезПрефиксов(Номер);
	
КонецФункции

// Разбирает строку, выделяя из нее префикс и числовую часть.
//
// Параметры:
//  Стр            - Строка. Разбираемая строка;
//  ЧисловаяЧасть  - Число. Переменная, в которую возвратится числовая часть строки;
//  Режим          - Строка. Если "Число", то возвратит числовую часть, иначе - префикс.
//
// Возвращаемое значение:
//  Префикс строки
//
Функция ПолучитьПрефиксЧислоНомера(Знач Стр, ЧисловаяЧасть = "", Режим = "") Экспорт
	
	Возврат ОбщиеПроцедурыФункции.ПолучитьПрефиксЧислоНомера(Стр, ЧисловаяЧасть, Режим);
	
КонецФункции

// Приводит номер (код) к требуемой длине. При этом выделяется префикс
// и числовая часть номера, остальное пространство между префиксом и
// номером заполняется нулями.
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры:
//  Стр          - преобразовываемая строка;
//  Длина        - требуемая длина строки.
//
// Возвращаемое значение:
//  Строка       - код или номер, приведенная к требуемой длине.
// 
Функция ПривестиНомерКДлине(Знач Стр, Длина, ДобавлятьНулиЕслиДлинаНеМеньшеТекущейДлиныНомера = Истина,
	Префикс = "") Экспорт
	
	Возврат ОбщиеПроцедурыФункции.ПривестиНомерКДлине(Стр, Длина,
		ДобавлятьНулиЕслиДлинаНеМеньшеТекущейДлиныНомера, Префикс);
	
КонецФункции

// Добавляет к префиксу номера или кода подстроку
// Функция может быть использована в обработчиках событий, программный код 
// которых хранится в правила обмена данными. Вызывается методом Выполнить()
// Сообщение "Не обнаружено ссылок на функцию" при проверке конфигурации 
// не является ошибкой проверки конфигурации
//
// Параметры:
//  Стр          - Строка. Номер или код;
//  Добавок      - добавляемая к префиксу подстрока;
//  Длина        - требуемая результирующая длина строки;
//  Режим        - "Слева" - подстрока добавляется слева к префиксу, иначе - справа.
//
// Возвращаемое значение:
//  Строка       - номер или код, к префиксу которого добавлена указанная подстрока.
//
Функция ДобавитьКПрефиксу(Знач Стр, Добавок = "", Длина = "", Режим = "Слева") Экспорт

	Возврат ОбщиеПроцедурыФункции.ДобавитьКПрефиксу(Стр, Добавок, Длина, Режим); 

КонецФункции

// Дополняет строку указанным символом до указанной длины.
//
// Параметры: 
//  Стр          - дополняемая строка;
//  Длина        - требуемая длина результирующей строки;
//  Чем          - символ, которым дополняется строка.
//
// Возвращаемое значение:
//  Строка, дополненная указанным символом до указанной длины.
//
Функция одДополнитьСтроку(Стр, Длина, Чем = " ") Экспорт
	
	Возврат ОбщиеПроцедурыФункции.одДополнитьСтроку(Стр, Длина, Чем);

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФАЙЛОМ ОБМЕНА

// Сохраняет в файл указанный xml-узел
//
// Параметры:
//  Узел           - xml-узел, сохраняемый в файл
//
Процедура ЗаписатьВФайл(Узел) Экспорт

	ОбщиеПроцедурыФункции.ЗаписатьВФайл(Узел);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПРАВИЛАМИ ОБМЕНА

// Осуществляет поиск правила конвертации по имени или в соответствии с типом
// переданного объекта
//
// Параметры:
//  Объект         - Объект-источник, для которого ищем правило конвертации
//  ИмяПравила     - имя правила конвертации
//
// Возвращаемое значение:
//  Ссылка на правило конвертации (строка в таблице правил)
// 
Функция НайтиПравило(Объект, ИмяПравила="") Экспорт

	Возврат ОбщиеПроцедурыФункции.НайтиПравило(Объект, ИмяПравила);

КонецФункции

////////////////////////////////////////////////////////////////////////////////
//

// Выполняет передачу строки данных для загрузки в базе-приемнике
//
// Параметры:
//	ИнформацияДляЗаписиВФайл - Строка (текст XML) - строка с данными
//	СтрокаОшибкиВБазеПриемнике - Строка - содержит описание ошибки при загрузке в базе-приемнике
// 
Процедура ПередатьИнформациюОЗаписиВПриемник(ИнформацияДляЗаписиВФайл, СтрокаОшибкиВБазеПриемнике = "") Экспорт
	
	ОбщиеПроцедурыФункции.ПередатьИнформациюОЗаписиВПриемник(ИнформацияДляЗаписиВФайл, СтрокаОшибкиВБазеПриемнике);
	
КонецПроцедуры

// Выполняет запись имени, типа и значения параметра в файл сообщения обмена для передачи в базу-приемник
//
Процедура ПередатьОдинПараметрВПриемник(Имя, ИсходноеЗначениеПараметра, ПравилоКонвертации = "") Экспорт
	
	ОбщиеПроцедурыФункции.ПередатьОдинПараметрВПриемник(Имя, ИсходноеЗначениеПараметра, ПравилоКонвертации);
	
КонецПроцедуры

// Передает все дополнительные параметры в приемник
//
Процедура ПередатьДополнительныеПараметрыВПриемник() Экспорт
	
	ОбщиеПроцедурыФункции.ПередатьДополнительныеПараметрыВПриемник();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// КОНСТРУКТОР И ДЕСТРУКТОР ОБРАБОТКИ

Процедура Конструктор(Владелец) Экспорт

	ОбщиеПроцедурыФункции      = Владелец;
	Параметры                  = Владелец.Параметры;
	Запросы                    = Владелец.Запросы;
	Правила                    = Владелец.Правила;
	ТаблицаПравилВыгрузки      = Владелец.ТаблицаПравилВыгрузки;
	ТаблицаНастройкиПараметров = Владелец.ТаблицаНастройкиПараметров;
	
	КомментарийПриВыгрузкеДанных = Владелец.КомментарийПриВыгрузкеДанных;
	КомментарийПриЗагрузкеДанных = Владелец.КомментарийПриЗагрузкеДанных;
	
	
	//переменная для универсального обмена
	Попытка
		ДатаНачала = Владелец.ДатаНачала;
	Исключение
	КонецПопытки;
	
	//переменная для универсального обмена
	Попытка
		ДатаОкончания = Владелец.ДатаОкончания;
	Исключение
	КонецПопытки;
	
	//переменная для on-line обмена
	Попытка
		ДатаВыгрузкиДанных = Владелец.ДатаВыгрузкиДанных;
	Исключение
	КонецПопытки;
	
	//переменная для on-line обмена
	Попытка
		УзелДляОбмена = Владелец.УзелДляОбмена;
	Исключение
	КонецПопытки;
	
	// Типы
	одТипСтрока                = Тип("Строка");
	одТипБулево                = Тип("Булево");
	одТипЧисло                 = Тип("Число");
	одТипДата                  = Тип("Дата");
	одТипХранилищеЗначения     = Тип("ХранилищеЗначения");
	одТипДвоичныеДанные        = Тип("ДвоичныеДанные");
	одТипВидДвиженияНакопления = Тип("ВидДвиженияНакопления");
	одТипУдалениеОбъекта       = Тип("УдалениеОбъекта");
	одТипВидСчета			   = Тип("ВидСчета");
	одТипТип                   = Тип("Тип");
	одТипСоответствие          = Тип("Соответствие");
	
	ЗначениеПустаяДата		   = Дата('00010101');
	
	// Типы узлов xml
	одТипУзлаXML_КонецЭлемента  = ТипУзлаXML.КонецЭлемента;
	одТипУзлаXML_НачалоЭлемента = ТипУзлаXML.НачалоЭлемента;
	одТипУзлаXML_Текст          = ТипУзлаXML.Текст;
	
	Алгоритмы = Новый Структура;
	

КонецПроцедуры


Процедура Деструктор() Экспорт
	
	ОбщиеПроцедурыФункции = Неопределено;
	
КонецПроцедуры

#КонецЕсли