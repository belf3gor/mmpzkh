
&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	РеквизитыОрганизацииСсылка = ПроверкаРеквизитовОрганизации.СтрокаСообщенияНеЗаполненБанковскийСчет();
	
	ЗаполнитьЗначенияСвойств(Объект, Параметры);
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ИспользоватьНесколькоБанковскихСчетовОрганизации =
			Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация);
	Иначе
		ИспользоватьНесколькоБанковскихСчетовОрганизации = Истина;
	КонецЕсли;
	
	ОсновнойБанковскийСчетОрганизацииЗаполнен = ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(Объект.Организация);
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаОстатков) Тогда
		Объект.ДатаОстатков = ОбщегоНазначения.ТекущаяДатаПользователя();
	КонецЕсли;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	Если НЕ ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
		УчетДенежныхСредствБП.УстановитьБанковскийСчет(Объект.СчетОрганизации, Объект.Организация, ВалютаРегламентированногоУчета);
	КонецЕсли;
	
	УстановитьПараметрыВыбораБанковскихСчетов();
	
	ЗаполнитьОстатокДенегНаРасчетныхСчетах();

	ИспользуетсяОтложенноеПроведение = ПолучитьФункциональнуюОпцию("ИспользоватьОтложенноеПроведение");
	
	УправлениеФормой(ЭтотОбъект);
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Отобразим операцию ожидания, т.к. надо будет запустить обновление содержимого табличной части.
	ОтобразитьЭлементыОжиданияОстатки();
	
	// Автоматически запускаем заполнение остатков
	ПодключитьОбработчикОжидания("Подключаемый_НачатьЗаполнениеОстатков", 0.5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ОбновленияДляСобытий = Новый Массив;
	ОбновленияДляСобытий.Добавить("Запись_ПоступлениеТоваровУслуг");
	ОбновленияДляСобытий.Добавить("Запись_ПоступлениеДопРасходов");
	ОбновленияДляСобытий.Добавить("Запись_ПоступлениеНМА");
	ОбновленияДляСобытий.Добавить("Запись_СчетНаОплатуПоставщика");
	
	Если ОбновленияДляСобытий.Найти(ИмяСобытия) <> Неопределено
		И ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("СрокОплаты") Тогда
		
		ОбновитьСрокОплатыДокументаНаСервере(Параметр.СрокОплаты, Источник);
	ИначеЕсли ИмяСобытия = "Запись_Организации" Тогда
		Если Источник = Объект.Организация Тогда
			ОбработатьИзмененияВОрганизацииНаСервере();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
	ОтобразитьЭлементыОжиданияОстатки();
	
	// Автоматически запускаем заполнение остатков
	ПодключитьОбработчикОжидания("Подключаемый_НачатьЗаполнениеОстатков", 0.5, Истина);
	
	ЗаполнитьОстатокДенегНаРасчетныхСчетах();
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетПриИзменении(Элемент)
	БанковскийСчетПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыОрганизацииСсылкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ПроверкаРеквизитовОрганизацииКлиент.РеквизитыОрганизацииСсылкаОбработкаНавигационнойСсылки(Объект.Организация, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыБухОстатки

&НаКлиенте
Процедура БухОстаткиОплатитьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.БухОстатки.ТекущиеДанные;
	
	Знак = ?(ТекущиеДанные.Оплатить, 1, -1);
	
	Если ТекущиеДанные.СуммаПредоплата = 0 Тогда
		СуммаКОплате = СуммаКОплате + ТекущиеДанные.СуммаДолг*Знак;
	Иначе
		СуммаКОплате = СуммаКОплате + ТекущиеДанные.СуммаПредоплата*Знак;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БухОстаткиСуммаПриИзменении(Элемент)
	
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура БухОстаткиВалютнаяСуммаПриИзменении(Элемент)
	
	БухОстаткиВалютнаяСуммаПриИзмененииНаСервере(Элементы.БухОстатки.ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура БухОстаткиСуммаПредоплатыПриИзменении(Элемент)
	
	ОбновитьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура БухОстаткиВалютнаяСуммаПредоплатаПриИзменении(Элемент)
	
	БухОстаткиВалютнаяСуммаПредоплатаПриИзмененииНаСервере(Элементы.БухОстатки.ТекущиеДанные.ПолучитьИдентификатор());
	
КонецПроцедуры

&НаКлиенте
Процедура БухОстаткиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ИзменяемыеПоля = Новый Массив;
	ИзменяемыеПоля.Добавить("БухОстаткиОплатить");
	ИзменяемыеПоля.Добавить("БухОстаткиСрокОплаты");
	ИзменяемыеПоля.Добавить("БухОстаткиСуммаОплатить");
	ИзменяемыеПоля.Добавить("БухОстаткиСуммаДолг");
	ИзменяемыеПоля.Добавить("БухОстаткиСуммаПредоплата");
	ИзменяемыеПоля.Добавить("БухОстаткиВалютнаяСуммаДолг");
	ИзменяемыеПоля.Добавить("БухОстаткиВалютнаяСуммаПредоплата");
	ИзменяемыеПоля.Добавить("БухОстаткиСуммаОплачено");
	
	Если ИзменяемыеПоля.Найти(Поле.Имя) = Неопределено Тогда
		ОткрытьФормуДокументаРасчетов(ВыбраннаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БухОстаткиСрокОплатыПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.БухОстатки.ТекущиеДанные;
	
	Если ТекущиеДанные.СуммаПредоплата > 0 Тогда
		Документ = ТекущиеДанные.СчетНаОплату;
	Иначе
		Документ = ТекущиеДанные.ДокументРасчетов;
	КонецЕсли;
	
	ТекущиеДанные.ОсталосьДней = ЗаписатьСрокОплатыДокументаНаСервере(
									ТекущиеДанные.СрокОплаты, Документ, Объект.Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура ОстатокДенегНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ГруппировкаВидДС = Новый Структура;
	ГруппировкаВидДС.Вставить("Использование",  Истина);
	ГруппировкаВидДС.Вставить("Поле",           "ВидДенежныхСредств");
	ГруппировкаВидДС.Вставить("Представление",  "Вид денежных средств");
	ГруппировкаВидДС.Вставить("ТипГруппировки", 0);
	
	ГруппировкаРазмещение = Новый Структура;
	ГруппировкаРазмещение.Вставить("Использование",  Истина);
	ГруппировкаРазмещение.Вставить("Поле",           "Размещение");
	ГруппировкаРазмещение.Вставить("Представление",  "Размещение");
	ГруппировкаРазмещение.Вставить("ТипГруппировки", 0);
	
	ГруппировкаОтчета = Новый Массив;
	
	ГруппировкаОтчета.Добавить(ГруппировкаВидДС);
	ГруппировкаОтчета.Добавить(ГруппировкаРазмещение);
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	ДополнительныеСвойства.Вставить("РежимРасшифровки", Истина);
	ДополнительныеСвойства.Вставить("Организация",      Объект.Организация);
	ДополнительныеСвойства.Вставить("Период",           Объект.ДатаОстатков);
	
	ДополнительныеСвойства = ПользовательскиеНастройки.ДополнительныеСвойства;
	
	ДополнительныеСвойства.Вставить("Группировка", ГруппировкаОтчета);
	
	НастройкаОтбора = ПользовательскиеНастройки.Элементы.Добавить(Тип("ОтборКомпоновкиДанных"));
	НастройкаОтбора.ИдентификаторПользовательскойНастройки = "Отбор";
	
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(НастройкаОтбора, "ВидДенежныхСредств", "Деньги на расчетных счетах", ВидСравненияКомпоновкиДанных.Равно);
	
	Если ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(НастройкаОтбора, "Размещение", Объект.СчетОрганизации, ВидСравненияКомпоновкиДанных.Содержит);
	КонецЕсли;
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("РежимРасшифровки",          Истина);
	ПараметрыОтчета.Вставить("ВидРасшифровки",            2);
	ПараметрыОтчета.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	
	ОткрытьФорму("Отчет.ОстаткиДенежныхСредств.Форма.ФормаОтчета", ПараметрыОтчета, ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПлатежныеДокументы(Команда)
	
	Если СуммаКОплате = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Нет задолженностей, отмеченных для оплаты'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.БухОстатки");
		Возврат;
	КонецЕсли;
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	СозданныеДокументы = СоздатьПлатежныеДокументыНаСервере();
	
	Если СозданныеДокументы <> Неопределено Тогда
		ОткрытьСозданныеДокументы(СозданныеДокументы);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокумент(Команда)
	
	Если Элементы.БухОстатки.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуДокументаРасчетов(Элементы.БухОстатки.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура БухОстаткиЗаполнить(Команда)
	
	// Отобразим операцию ожидания, т.к. надо будет запустить обновление содержимого табличной части.
	ОтобразитьЭлементыОжиданияОстатки();
	
	// Автоматически запускаем заполнение остатков
	ПодключитьОбработчикОжидания("Подключаемый_НачатьЗаполнениеОстатков", 0.5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура БухОстаткиОтметитьВсе(Команда)
	
	УстановитьОплатуСтрокТаблицы(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура БухОстаткиСнятьВсе(Команда)
	
	УстановитьОплатуСтрокТаблицы(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСрокОплаты(Команда)
	
	Если Объект.БухОстатки.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не выбраны задолженности для изменения срока оплаты'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "Объект.БухОстатки");
		Возврат;
	КонецЕсли;
	
	СрокОплаты = '00010101';
	МассивВыделенныхДокументов = Новый Массив;
	
	Для Каждого ВыделеннаяСтрока Из Элементы.БухОстатки.ВыделенныеСтроки Цикл
		
		ДанныеВыделеннойСтроки = Элементы.БухОстатки.ДанныеСтроки(ВыделеннаяСтрока);
		
		СрокОплаты = Макс(ДанныеВыделеннойСтроки.СрокОплаты, СрокОплаты);
		
		Если ДанныеВыделеннойСтроки.СуммаПредоплата > 0 Тогда
			МассивВыделенныхДокументов.Добавить(ДанныеВыделеннойСтроки.СчетНаОплату);
		Иначе
			МассивВыделенныхДокументов.Добавить(ДанныеВыделеннойСтроки.ДокументРасчетов);
		КонецЕсли;
		
	КонецЦикла;
	
	ОповещениеВводДаты = Новый ОписаниеОповещения("ВводНовогоСрокаОплаты", ЭтаФорма, МассивВыделенныхДокументов);
	
	ПоказатьВводДаты(ОповещениеВводДаты, СрокОплаты, "Изменить срок оплаты", ЧастиДаты.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаСчетовУчетаРасчетовНажатие(Элемент)
	
	БухгалтерскиеОтчетыКлиент.РедактироватьСписокСчетовИсключаемыхИзРасчетаЗадолженности(ЭтаФорма, 2, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполнениеОстатков

&НаКлиенте
Процедура Подключаемый_НачатьЗаполнениеОстатков()
	
	НачатьЗаполнениеОстатковНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияЗаполнениеОстатков()

	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			РезультатВыполнения = ЗагрузитьПодготовленныеДанныеЗаполнениеОстатков();
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗаданияЗаполнениеОстатков", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
		КонецЕсли;
	Исключение
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура НачатьЗаполнениеОстатковНаКлиенте()
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		// Возможно, что фоновое задание было запущено раньше.
		Если НЕ ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОчиститьСообщения();
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияЗаполнениеОстатков");
	
	РезультатВыполнения = НачатьЗаполнениеОстатковНаСервере();
	
	Если НЕ РезультатВыполнения.ЗаданиеВыполнено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияЗаполнениеОстатков", 0.5, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыЗаполнениеОстатков()
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Организация",  Объект.Организация);
	ПараметрыЗадания.Вставить("ДатаОстатков", Объект.ДатаОстатков);
	
	Возврат ПараметрыЗадания;
	
КонецФункции

&НаСервере
Функция НачатьЗаполнениеОстатковНаСервере()
	
	Объект.БухОстатки.Очистить();
	ИтогоОплатить = 0;
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	ПараметрыЗадания = ПодготовитьПараметрыЗаполнениеОстатков();
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Обработки.ОплатаПоставщикам.ЗаполнитьПланируемыеПлатежи",
		ПараметрыЗадания,
		НСтр("ru = 'Оплата поставщикам: заполнение остатков'"));
	
	АдресХранилища   		= РезультатВыполнения.АдресХранилища;
	ИдентификаторЗадания	= РезультатВыполнения.ИдентификаторЗадания;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		РезультатВыполнения = ЗагрузитьПодготовленныеДанныеЗаполнениеОстатков();
	Иначе
		ОтобразитьЭлементыОжиданияОстатки();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СкрытьЭлементыОжиданияЗаполнениеОстатков(Форма)

	Элементы = Форма.Элементы;
	
	Элементы.ОстаткиТаблица.Видимость  = Истина;
	Элементы.ОстаткиОжидание.Видимость = Ложь;
	
	УстановитьДоступностьЭлементовШапки(Форма, Истина);
	УстановитьДоступностьКоманд(Форма, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьЭлементыОжиданияОстатки()
	
	Элементы.ОстаткиТаблица.Видимость  = Ложь;
	Элементы.ОстаткиОжидание.Видимость = Истина;
	
	Если Элементы.КартинкаОжиданиеЗаполнениеОстатки.Картинка.Вид = ВидКартинки.Пустая Тогда
		// Картинку загружаем по необходимости при первом включении ожидания.
		Элементы.КартинкаОжиданиеЗаполнениеОстатки.Картинка = БиблиотекаКартинок.ДлительнаяОперация48;
	КонецЕсли;
	
	УстановитьДоступностьЭлементовШапки(ЭтотОбъект, Ложь);
	УстановитьДоступностьКоманд(ЭтотОбъект, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменаЗаполненияОстатков(Команда)
	
	ОтменитьЗаданиеЗаполнениеОстатков();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьЗаданиеЗаполнениеОстатков()
	
	ОтменитьВыполнениеЗаданий();
	
	СкрытьЭлементыОжиданияЗаполнениеОстатков(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ЗагрузитьПодготовленныеДанныеЗаполнениеОстатков()

	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(РезультатВыполнения) = Тип("ТаблицаЗначений") И РезультатВыполнения.Количество() <> 0 Тогда
		
		Объект.БухОстатки.Загрузить(РезультатВыполнения);
		
		ОбновитьИтоги();
		
		Элементы.БухОстатки.ТекущаяСтрока = ПолучитьИдентификаторПервойНепросроченнойОплаты();
		
		Если Элементы.БухОстатки.ТекущийЭлемент = Неопределено Тогда
			Элементы.БухОстатки.ТекущийЭлемент = Элементы.БухОстаткиКонтрагент;
		КонецЕсли;
		
	Иначе
		
		Объект.БухОстатки.Очистить();
		СуммаКОплате = 0;
		
	КонецЕсли;
	
	РезультатВыполнения = Новый Структура();
	РезультатВыполнения.Вставить("ЗаданиеВыполнено", Истина);

	ИдентификаторЗадания = Неопределено;
	УдалитьИзВременногоХранилища(АдресХранилища);
	АдресХранилища = "";
	
	СкрытьЭлементыОжиданияЗаполнениеОстатков(ЭтотОбъект);

	ОпределитьМоментАктуальностиОтложенныхРасчетов(Ложь);

	Возврат РезультатВыполнения;

КонецФункции

#КонецОбласти

#Область РаботаСФоновымиЗаданиями

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(Знач ИдентификаторЗадания) 

	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);

КонецФункции

&НаКлиенте
Процедура ОтменитьВыполнениеЗаданий()

	МассивИдентификаторовЗаданий = Новый Массив;
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияЗаполнениеОстатков");
		МассивИдентификаторовЗаданий.Добавить(ИдентификаторЗадания);
	КонецЕсли;
	Если ЗначениеЗаполнено(ИдентификаторЗаданияОтложенныеРасчеты) Тогда
		ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеОтложенныхРасчетов");
		МассивИдентификаторовЗаданий.Добавить(ИдентификаторЗаданияОтложенныеРасчеты);
	КонецЕсли;
	Если МассивИдентификаторовЗаданий.Количество() > 0 Тогда
		ОтменитьВыполнениеЗаданийНаСервере(МассивИдентификаторовЗаданий);
		ИдентификаторЗадания = Неопределено;
		ИдентификаторЗаданияОтложенныеРасчеты = Неопределено;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗаданийНаСервере(Знач МассивИдентификаторовЗаданий)

	Для Каждого ИдентификаторЗадания Из МассивИдентификаторовЗаданий Цикл
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область УсловноеОформление

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	ДобавитьЭлементУсловногоОформления(Неопределено, -1, НСтр("ru = 'Просрочено'"), ЦветаСтиля.ВажноеСобытие);
	
	ДобавитьЭлементУсловногоОформления(0, 0, НСтр("ru = 'Сегодня'"), ЦветаСтиля.ВажноеСобытие);
	ДобавитьЭлементУсловногоОформления(1, 1, НСтр("ru = 'Завтра'"), ЦветаСтиля.ПриближающеесяСобытие);
	
	Шаблон = НСтр("ru = 'Осталось %1'");
	
	Для РазностьДат = 2 По 6 Цикл
		СтрокаРазностьДат = СтроковыеФункцииКлиентСервер.ЧислоЦифрамиПредметИсчисленияПрописью(РазностьДат, НСтр("ru = 'день,дня,дней'"));
		ДобавитьЭлементУсловногоОформления(РазностьДат, РазностьДат, СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Шаблон, СтрокаРазностьДат));
	КонецЦикла;
	
	ДобавитьЭлементУсловногоОформления( 7, 13, НСтр("ru = 'Осталась неделя'"));
	ДобавитьЭлементУсловногоОформления(14, 18, НСтр("ru = 'Осталось 2 недели'"));
	ДобавитьЭлементУсловногоОформления(19, 22, НСтр("ru = 'Осталось 3 недели'"));
	ДобавитьЭлементУсловногоОформления(23, 34, НСтр("ru = 'Остался месяц'"));
	
	// Используем пробел в качестве представления пустой строки, т.к. пустая строка в условном оформлении игнорируется
	ДобавитьЭлементУсловногоОформления(35, Неопределено, "Больше месяца");
	
	ДобавитьУсловноеОформлениеСчетовБезСрокаОплаты();
	
	ДобавитьУсловноеОформлениеСумм();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУсловноеОформлениеСчетовБезСрокаОплаты()
	
	ПутьКДаннымПоля = "Объект.БухОстатки.СрокОплаты";
	ПутьКДаннымПоляОформления = "БухОстаткиСрокОплаты";
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Не установлен'"));
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ДосьеВторостепеннаяНадписьЦвет);
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Дата(1,1,1);
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Использование = Истина;
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоляОформления);
	
	ПутьКДаннымПоля = "Объект.БухОстатки.СрокОплаты";
	ПутьКДаннымПоляОформления = "БухОстаткиОсталосьДней";
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", " ");
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Дата(1,1,1);
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Использование = Истина;
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоляОформления);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьУсловноеОформлениеСумм()
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	ПутьКДаннымПоляВалюта          = "Объект.БухОстатки.Валюта";
	ПутьКДаннымПоляСуммаДолг       = "Объект.БухОстатки.СуммаДолг";
	ПутьКДаннымПоляСуммаПредоплата = "Объект.БухОстатки.СуммаПредоплата";
	
	ПутьКДаннымПоляОформленияСуммаДолг         = "БухОстаткиСуммаДолг";
	ПутьКДаннымПоляОформленияВалютнаяСуммаДолг = "БухОстаткиВалютнаяСуммаДолг";
	
	ПутьКДаннымПоляОформленияСуммаПредоплата         = "БухОстаткиСуммаПредоплата";
	ПутьКДаннымПоляОформленияВалютнаяСуммаПредоплата = "БухОстаткиВалютнаяСуммаПредоплата";
	
	// Видимость колонок долг и предоплата (не в валюте)
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоляВалюта);
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.ПравоеЗначение = ВалютаРегламентированногоУчета;
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Использование = Истина;
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоляОформленияСуммаДолг);
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Использование = Истина;
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоляОформленияСуммаПредоплата);
	
	// Видимость колонок долг и предоплата (в валюте)
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоляВалюта);
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = ВалютаРегламентированногоУчета;
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Использование = Истина;
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоляОформленияВалютнаяСуммаДолг);
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Использование = Истина;
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоляОформленияВалютнаяСуммаПредоплата);
	
	// Доступность колонок долг и предоплата
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоляСуммаПредоплата);
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = 0;
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Использование = Истина;
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоляОформленияСуммаПредоплата);
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Использование = Истина;
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоляОформленияВалютнаяСуммаПредоплата);
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЗаголовкиСтрокЦветТекста);
	
	ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование  = Истина;
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоляСуммаПредоплата);
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.ПравоеЗначение = 0;
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Использование = Истина;
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоляОформленияСуммаДолг);
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Использование = Истина;
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоляОформленияВалютнаяСуммаДолг);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементУсловногоОформления(НижняяГраница, ВерхняяГраница, Текст, ЦветТекста = Неопределено)
	
	ПутьКДаннымПоля = "Объект.БухОстатки.ОсталосьДней";
	ПутьКДаннымПоляОформления = "БухОстаткиОсталосьДней";
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", Текст);
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекста);
	
	Если НижняяГраница = Неопределено Тогда
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		ЭлементОтбора.ПравоеЗначение = ВерхняяГраница;
		
	ИначеЕсли ВерхняяГраница = Неопределено Тогда
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ЭлементОтбора.ПравоеЗначение = НижняяГраница;
		
	ИначеЕсли НижняяГраница = ВерхняяГраница Тогда
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = НижняяГраница;
		
	Иначе
		
		ГруппаЭлементовОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаЭлементовОтбора.Использование = Истина;
		ГруппаЭлементовОтбора.ТипГруппы     = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ЭлементОтбора.ПравоеЗначение = НижняяГраница;
		
		ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.Использование  = Истина;
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		ЭлементОтбора.ПравоеЗначение = ВерхняяГраница;
		
	КонецЕсли;
	
	ЭлементПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементПоля.Использование = Истина;
	ЭлементПоля.Поле = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоляОформления);
	
КонецПроцедуры

#КонецОбласти

#Область СозданиеОплаты

&НаКлиенте
Процедура ОткрытьСозданныеДокументы(СозданныеДокументы)
	
	Если СозданныеДокументы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПервыйДокумент = СозданныеДокументы[0];
	ТипСозданныхДокументов = ТипЗнч(ПервыйДокумент);
	
	ОповеститьОбИзменении(ТипСозданныхДокументов);
	
	Если СозданныеДокументы.Количество() = 1 Тогда
		
		ПоказатьЗначение(, ПервыйДокумент);
		
	Иначе
		
		Отбор = Новый Структура;
		Отбор.Вставить("Организация", Объект.Организация);
		Отбор.Вставить("СчетОрганизации", Объект.СчетОрганизации);
		
		ИмяФормыСписка = "Документ.ПлатежноеПоручение.ФормаСписка";
		
		СписокДокументов = Новый СписокЗначений;
		СписокДокументов.ЗагрузитьЗначения(СозданныеДокументы);
		СписокВыделения = Новый Структура("Ссылка", СписокДокументов);
		
		ПараметрыФормы = Новый Структура;
		
		ПараметрыФормы.Вставить("Отбор",           Отбор);
		ПараметрыФормы.Вставить("ТекущаяСтрока",   ПервыйДокумент);
		ПараметрыФормы.Вставить("СписокВыделения", СписокВыделения);
		
		ОткрытьФорму(ИмяФормыСписка, ПараметрыФормы, ЭтотОбъект, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьПлатежныеДокументыНаСервере()
	
	Отбор = Новый Структура("Оплатить", Истина);
	
	АдресХранилищаПлатежей = ПоместитьВоВременноеХранилище(Объект.БухОстатки.Выгрузить(Отбор));
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СчетОрганизации", Объект.СчетОрганизации);
	СтруктураПараметров.Вставить("Платежи",         АдресХранилищаПлатежей);
	
	Возврат Обработки.ОплатаПоставщикам.СоздатьПлатежныеДокументы(СтруктураПараметров);
	
КонецФункции

#КонецОбласти

#Область ПрочиеВспомогательныеПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.ПредупреждениеОЗаполненииРеквизитовСчета.Видимость = ПроверкаРеквизитовОрганизацииКлиентСервер.ПоказатьПредупреждениеОРеквизитахСчета(Форма, Объект.Организация);
	
	Элементы.БанковскийСчет.Доступность = ЗначениеЗаполнено(Объект.Организация);
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрОрганизацияФункциональныхОпцийФормы(Форма, Объект.Организация);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОстатокДенегНаРасчетныхСчетах()
	
	ОстатокДенег = Обработки.ОплатаПоставщикам.ОстаткиДенегНаРасчетныхСчетах(Объект.ДатаОстатков, Объект.Организация, Объект.СчетОрганизации);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораБанковскихСчетов()
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	НовыйМассивПараметров = Новый Массив;
	НовыйМассивПараметров.Добавить(Новый ПараметрВыбора("Отбор.ВалютаДенежныхСредств", ВалютаРегламентированногоУчета));
	Элементы.БанковскийСчет.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассивПараметров);
	
КонецПроцедуры

&НаСервере
Процедура БухОстаткиВалютнаяСуммаПриИзмененииНаСервере(ИдентификаторСтроки)
	
	ТекущиеДанные = Объект.БухОстатки.НайтиПоИдентификатору(ИдентификаторСтроки);
	ТекущаяДата   = ОбщегоНазначения.ТекущаяДатаПользователя();
	
	ТекущиеДанные.СуммаДолг = РаботаСКурсамиВалют.ПересчитатьВВалюту(
		ТекущиеДанные.ВалютнаяСуммаДолг,
		ТекущиеДанные.Валюта,
		ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(),
		ТекущаяДата);
	
	ОбновитьИтоги();
	
КонецПроцедуры

&НаСервере
Процедура БухОстаткиВалютнаяСуммаПредоплатаПриИзмененииНаСервере(ИдентификаторСтроки)
	
	ТекущиеДанные = Объект.БухОстатки.НайтиПоИдентификатору(ИдентификаторСтроки);
	ТекущаяДата   = ОбщегоНазначения.ТекущаяДатаПользователя();
	
	ТекущиеДанные.СуммаПредоплата = РаботаСКурсамиВалют.ПересчитатьВВалюту(
		ТекущиеДанные.ВалютнаяСуммаПредоплата,
		ТекущиеДанные.Валюта,
		ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета(),
		ТекущаяДата);
	
	ОбновитьИтоги();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСрокОплатыДокументаНаСервере(НовыйСрокОплаты, Документ)
	
	ДлинаСуток = 86400;
	ДатаОстатков = ОбщегоНазначения.ТекущаяДатаПользователя();
	
	Если Тип("ДокументСсылка.СчетНаОплатуПоставщика") = ТипЗнч(Документ) Тогда
		ПараметрыОтбора = Новый Структура("СчетНаОплату", Документ);
	Иначе
		ПараметрыОтбора = Новый Структура("ДокументРасчетов", Документ);
	КонецЕсли;
	
	Найденные = Объект.БухОстатки.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого СтрокаТаблицы Из Найденные Цикл
		СтрокаТаблицы.СрокОплаты   = НовыйСрокОплаты;
		СтрокаТаблицы.ОсталосьДней = (НовыйСрокОплаты - ДатаОстатков)/ДлинаСуток;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВводНовогоСрокаОплаты(Результат, МассивВыделенныхДокументов) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьСрокОплатыВыделенныхСтрокНаСервере(Результат, МассивВыделенныхДокументов);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСрокОплатыВыделенныхСтрокНаСервере(НовыйСрокОплаты, МассивДокументов)
	
	ДлинаСуток = 86400;
	ДатаОстатков = ОбщегоНазначения.ТекущаяДатаПользователя();
	
	Для Каждого ВыделеннаяСтрока Из Элементы.БухОстатки.ВыделенныеСтроки Цикл
		
		ДанныеВыделеннойСтроки = Объект.БухОстатки.НайтиПоИдентификатору(ВыделеннаяСтрока);
		
		ДанныеВыделеннойСтроки.СрокОплаты = НовыйСрокОплаты;
		ДанныеВыделеннойСтроки.ОсталосьДней = (НовыйСрокОплаты - ДатаОстатков)/ДлинаСуток;
		
	КонецЦикла;
	
	СрокиОплатыДокументов.ЗаписатьСрокОплатыДокументов(МассивДокументов, НовыйСрокОплаты);
	
КонецПроцедуры

// Записывает срок в базу и возвращает количество дней до нового срока оплаты
//
&НаСервереБезКонтекста
Функция ЗаписатьСрокОплатыДокументаНаСервере(НовыйСрокОплаты, Ссылка, Организация)
	
	СрокиОплатыДокументов.ЗаписатьСрокОплатыДокумента(Ссылка, НовыйСрокОплаты);
	
	ДлинаСуток = 86400;
	ДатаОстатков = ОбщегоНазначения.ТекущаяДатаПользователя();
	
	Возврат (НовыйСрокОплаты - ДатаОстатков)/ДлинаСуток;
	
КонецФункции

&НаСервере
Процедура УстановитьОплатуСтрокТаблицы(ЗначениеОтметки)
	
	Для Каждого СтрокаТаблицы Из Объект.БухОстатки Цикл
		СтрокаТаблицы.Оплатить = ЗначениеОтметки;
	КонецЦикла;
	
	ОбновитьИтоги();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИтоги()
	
	СуммаКОплате = 0;
	Для Каждого СтрокаТаблицы Из Объект.БухОстатки Цикл
		Если СтрокаТаблицы.Оплатить Тогда
			СуммаКОплате = СуммаКОплате + СтрокаТаблицы.СуммаДолг + СтрокаТаблицы.СуммаПредоплата;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИдентификаторПервойНепросроченнойОплаты()
	
	Для Каждого СтрокаТаблицы Из Объект.БухОстатки Цикл
		Если СтрокаТаблицы.ОсталосьДней >= 0 Тогда
			Возврат СтрокаТаблицы.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

// Блокирует либо разблокирует в шапке формы при старте и завершении фоновых заданий.
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьЭлементовШапки(Форма, Доступно)

	Элементы = Форма.Элементы;
	
	Элементы.Организация.Доступность    = Доступно;
	Элементы.БанковскийСчет.Доступность = Доступно;
	
КонецПроцедуры

// Блокирует либо разблокирует команды старте и завершении фоновых заданий.
//
&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКоманд(Форма, Доступно)
	
	Элементы = Форма.Элементы;
	
	Элементы.СоздатьПлатежныеДокументы.Доступность = Доступно;
	Элементы.ИзменитьСрокОплаты.Доступность        = Доступно;
	Элементы.ГруппаФлажки.Доступность              = Доступно;
	Элементы.ГруппаКомандыТаблицы.Доступность      = Доступно;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуДокументаРасчетов(ВыбранноеЗначение)

	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Элементы.БухОстатки.ДанныеСтроки(ВыбранноеЗначение);
	
	Если ДанныеСтроки.СуммаПредоплата > 0 Тогда
		Ключ = ДанныеСтроки.СчетНаОплату;
	Иначе
		Ключ = ДанныеСтроки.ДокументРасчетов;
	КонецЕсли;
	
	ТипДокумента = ТипЗнч(Ключ);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", Ключ);
	
	Если ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
		ИмяФормыДокумента = "Документ.ПоступлениеТоваровУслуг.ФормаОбъекта";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеДопРасходов") Тогда
		ИмяФормыДокумента = "Документ.ПоступлениеДопРасходов.ФормаОбъекта";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.ПоступлениеНМА") Тогда
		ИмяФормыДокумента = "Документ.ПоступлениеНМА.ФормаОбъекта";
	ИначеЕсли ТипДокумента = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		ИмяФормыДокумента = "Документ.СчетНаОплатуПоставщика.ФормаОбъекта";
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормыДокумента, ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	
	УчетДенежныхСредствБП.УстановитьБанковскийСчет(Объект.СчетОрганизации, Объект.Организация, ВалютаРегламентированногоУчета);

	ИспользоватьНесколькоБанковскихСчетовОрганизации =
		Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация);
	
	ОсновнойБанковскийСчетОрганизацииЗаполнен = ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(Объект.Организация);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура БанковскийСчетПриИзмененииНаСервере()
	ЗаполнитьОстатокДенегНаРасчетныхСчетах();
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзмененияВОрганизацииНаСервере()
	
	ИспользоватьНесколькоБанковскихСчетовОрганизации =
		Справочники.БанковскиеСчета.ИспользуетсяНесколькоБанковскихСчетовОрганизации(Объект.Организация);
	
	ОсновнойБанковскийСчетОрганизацииЗаполнен =
		ПроверкаРеквизитовОрганизации.ОсновнойБанковскийСчетОрганизацииЗаполнен(Объект.Организация);
	
	Элементы.ПредупреждениеОЗаполненииРеквизитовСчета.Видимость =
		ПроверкаРеквизитовОрганизацииКлиентСервер.ПоказатьПредупреждениеОРеквизитахСчета(ЭтотОбъект, Объект.Организация);
		
	Если НЕ ИспользоватьНесколькоБанковскихСчетовОрганизации И ОсновнойБанковскийСчетОрганизацииЗаполнен И Не ЗначениеЗаполнено(Объект.СчетОрганизации) Тогда
		Объект.СчетОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ОсновнойБанковскийСчет");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПриНеобходимостиАктуализацииНажатие(Элемент)

	// Пользователь хочет скрыть данные по актуализации, сбрасываем соответствующие признаки.
	МоментАктуальностиОтложенныхРасчетов = Неопределено;
	УстановитьВидимостьЭлементовОжиданияОтложенныеРасчеты(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьНажатие(Элемент)
	
	БухгалтерскийУчетКлиентПереопределяемый.СкрытьПанельАктуализации(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Актуализировать(Команда)
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияОтложенныеРасчеты)
		И НЕ ЗаданиеВыполнено(ИдентификаторЗаданияОтложенныеРасчеты) Тогда
		// Задание запущено и еще не завершилось, продолжаем ожидание.
		Возврат;
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеОтложенныхРасчетов");
	
	Элементы.СоздатьПлатежныеДокументы.Доступность = Ложь;
	
	ЗаданиеВыполнено = ЗапуститьОтложенныеРасчетыНаСервере();
	Если ЗаданиеВыполнено Тогда
		ПоказатьРезультатОтложенногоРасчета();
	Иначе
		ОжидатьВыполнениеОтложенныхРасчетов();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтменитьАктуализацию(Команда)
	
	ОтменитьВыполнениеЗаданий();
	
	Элементы.СоздатьПлатежныеДокументы.Доступность = Истина;
	
	ОпределитьМоментАктуальностиОтложенныхРасчетов(Истина);

КонецПроцедуры

#КонецОбласти

#Область ОтложенныеРасчеты

&НаСервере
Процедура ОпределитьМоментАктуальностиОтложенныхРасчетов(БылаПопыткаАктуализации)
	
	УчетВзаиморасчетовОтложенноеПроведение.ОпределитьМоментАктуальностиОтложенныхРасчетов(
		ЭтотОбъект, Объект.Организация, КонецДня(Объект.ДатаОстатков), БылаПопыткаАктуализации);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьЭлементовОжиданияОтложенныеРасчеты(БылаПопыткаАктуализации)

	УчетВзаиморасчетовОтложенноеПроведение.УстановитьВидимостьЭлементовОжиданияОтложенныеРасчеты(
		ЭтотОбъект, КонецДня(Объект.ДатаОстатков), БылаПопыткаАктуализации);

КонецПроцедуры

&НаСервере
Функция ЗапуститьОтложенныеРасчетыНаСервере()

	ЗаданиеВыполнено = УчетВзаиморасчетовОтложенноеПроведение.ЗапуститьОтложенныеРасчетыИзФормы(
		ЭтотОбъект,
		Объект.Организация,
		КонецДня(Объект.ДатаОстатков));
	
	Возврат ЗаданиеВыполнено;

КонецФункции

&НаКлиенте
Процедура ОжидатьВыполнениеОтложенныхРасчетов()

	ПрогрессорАктуализации = "0%.";
	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеОтложенныхРасчетов", 1, Истина);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеОтложенныхРасчетов()

	Попытка
		Если ЗначениеЗаполнено(ИдентификаторЗаданияОтложенныеРасчеты)
			И ЗаданиеВыполнено(ИдентификаторЗаданияОтложенныеРасчеты) Тогда 

			ЗагрузитьДанныеПослеОтложенногоРасчета();
			ПоказатьРезультатОтложенногоРасчета();
		
		Иначе
			
			ЗакрытиеМесяцаКлиент.ОбновитьПроцентПрогресса(ЭтотОбъект, ИдентификаторЗаданияОтложенныеРасчеты);
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеОтложенныхРасчетов", 
				ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
				Истина);
				
		КонецЕсли;
	Исключение
		ИдентификаторЗаданияОтложенныеРасчеты = Неопределено;
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьРезультатОтложенногоРасчета()

	Если ЭтоАдресВременногоХранилища(АдресХранилищаСОшибками) Тогда
		ОбщегоНазначенияБПКлиент.ОткрытьФормуОшибокПерепроведения(ЭтотОбъект, АдресХранилищаСОшибками);
	КонецЕсли;
	
	Элементы.СоздатьПлатежныеДокументы.Доступность = Истина;

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеПослеОтложенногоРасчета()
	
	УчетВзаиморасчетовОтложенноеПроведение.ЗагрузитьДанныеПослеОтложенногоРасчета(
		ЭтотОбъект,
		Объект.Организация,
		КонецДня(Объект.ДатаОстатков));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
