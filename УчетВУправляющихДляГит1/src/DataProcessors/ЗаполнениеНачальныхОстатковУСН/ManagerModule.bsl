#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Функция ЗаполнитьНачальныеОстаткиУСН(ПараметрыДляОстатков, АдресХранилища) Экспорт  
	
	Отказ = Ложь;
	
	// для случаев перехода не с начала года
	ДатаОстатков = НачалоКвартала(ПараметрыДляОстатков.ДатаПерехода);
	ДатаОкончанияПредыдущегоРежима = ДатаОстатков-1;
	
	// определяем параметры учета
	ПараметрыУчета = ОбщегоНазначенияБП.ОпределитьПараметрыУчета();
	ПараметрыУчета.Вставить("ВедетсяРозничнаяТорговля", ПолучитьФункциональнуюОпцию("ВедетсяРозничнаяТорговля"));
	
	// определяем параметры учетной политики ДО перехода
	УчетнаяПолитикаДоПерехода = Новый Структура;
	УчетнаяПолитикаДоПерехода.Вставить("ОбщийРежимНалогообложенияЮрлицо", УчетнаяПолитика.ПлательщикНалогаНаПрибыль(ПараметрыДляОстатков.Организация, ДатаОкончанияПредыдущегоРежима));
	УчетнаяПолитикаДоПерехода.Вставить("ОбщийРежимНалогообложенияИП", УчетнаяПолитика.ПлательщикНДФЛ(ПараметрыДляОстатков.Организация, ДатаОкончанияПредыдущегоРежима));
	УчетнаяПолитикаДоПерехода.Вставить("ПлательщикНДС", УчетнаяПолитика.ПлательщикНДС(ПараметрыДляОстатков.Организация, ДатаОкончанияПредыдущегоРежима));
	УчетнаяПолитикаДоПерехода.Вставить("ПлательщикЕНВД", УчетнаяПолитика.ПлательщикЕНВД(ПараметрыДляОстатков.Организация, ДатаОкончанияПредыдущегоРежима));
	УчетнаяПолитикаДоПерехода.Вставить("СложныйУчетНДС", УчетнаяПолитика.РаздельныйУчетНДС(ПараметрыДляОстатков.Организация, ДатаОкончанияПредыдущегоРежима));
	УчетнаяПолитикаДоПерехода.Вставить("УпрощенныйУчетНДС", УчетнаяПолитика.УпрощенныйУчетНДС(ПараметрыДляОстатков.Организация, ДатаОкончанияПредыдущегоРежима));
	УчетнаяПолитикаДоПерехода.Вставить("РозничнаяТорговляОблагаетсяЕНВД", УчетнаяПолитика.РозничнаяТорговляОблагаетсяЕНВД(ПараметрыДляОстатков.Организация, ДатаОкончанияПредыдущегоРежима));	
	УчетнаяПолитикаДоПерехода.Вставить("СпособОценкиТоваровВРознице", УчетнаяПолитика.СпособОценкиТоваровВРознице(ПараметрыДляОстатков.Организация, ДатаОкончанияПредыдущегоРежима));
	УчетнаяПолитикаДоПерехода.Вставить("СпособОценкиМПЗ", УчетнаяПолитика.СпособОценкиМПЗ(ПараметрыДляОстатков.Организация, ДатаОкончанияПредыдущегоРежима));
	
	// определяем параметры учетной политики ПОСЛЕ перехода
	УчетнаяПолитикаПослеПерехода = Новый Структура;
	УчетнаяПолитикаПослеПерехода.Вставить("ПрименяетсяУСН", УчетнаяПолитика.ПрименяетсяУСН(ПараметрыДляОстатков.Организация, ДатаОстатков));
	УчетнаяПолитикаПослеПерехода.Вставить("ПрименяетсяУСНДоходы", УчетнаяПолитика.ПрименяетсяУСНДоходы(ПараметрыДляОстатков.Организация, ДатаОстатков));
	УчетнаяПолитикаПослеПерехода.Вставить("ПрименяетсяУСНДоходыМинусРасходы", УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(ПараметрыДляОстатков.Организация, ДатаОстатков));
	УчетнаяПолитикаПослеПерехода.Вставить("ПорядокПризнанияРасходовПоТоварам", УчетнаяПолитика.ПорядокПризнанияРасходовПоТоварам(ПараметрыДляОстатков.Организация, ДатаОстатков));
	УчетнаяПолитикаПослеПерехода.Вставить("ПорядокПризнанияМатериальныхРасходов", УчетнаяПолитика.ПорядокПризнанияМатериальныхРасходов(ПараметрыДляОстатков.Организация, ДатаОстатков));
	УчетнаяПолитикаПослеПерехода.Вставить("ПорядокПризнанияРасходовПоНДС", УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС(ПараметрыДляОстатков.Организация, ДатаОстатков));
	
	// структура параметров для передачи в исполняемые процедуры
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация", ПараметрыДляОстатков.Организация);
	СтруктураПараметров.Вставить("ЭтоИндивидуальныйПредприниматель", СтруктураПараметров.Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
	СтруктураПараметров.Вставить("ДатаПерехода", ПараметрыДляОстатков.ДатаПерехода);
	СтруктураПараметров.Вставить("ВидОперации", ПараметрыДляОстатков.ВидОперации);
	СтруктураПараметров.Вставить("ДатаОстатков", ДатаОстатков);
	СтруктураПараметров.Вставить("ДатаОкончанияПредыдущегоРежима", ДатаОкончанияПредыдущегоРежима);
	СтруктураПараметров.Вставить("ВалютаРеглУчета", ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	СтруктураПараметров.Вставить("ПараметрыУчета", ПараметрыУчета);
	СтруктураПараметров.Вставить("УчетнаяПолитикаДоПерехода", УчетнаяПолитикаДоПерехода);
	СтруктураПараметров.Вставить("УчетнаяПолитикаПослеПерехода", УчетнаяПолитикаПослеПерехода);
	
	// получаем таблицы остатков
	ТаблицыДляДокументов = ЗаполнитьТаблицыДляОстатков(СтруктураПараметров);
	
	// формируем документы
	СоздатьДокументыВводаОстатков(ТаблицыДляДокументов, СтруктураПараметров, Отказ);
	
	// приводим остатки по партиям БУ в соответствие с остатками по Расходам УСН
	Если НЕ Отказ Тогда
		Если УчетнаяПолитикаДоПерехода.СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней И СтруктураПараметров.Свойство("ПартияДляОстатков") Тогда			
			Если ЗначениеЗаполнено(СтруктураПараметров.ПартияДляОстатков) Тогда				
				
				ПараметрыУстановкиПартии = Новый Структура;
				ПараметрыУстановкиПартии.Вставить("Организация", СтруктураПараметров.Организация);
				ПараметрыУстановкиПартии.Вставить("ДатаНачалаПартионногоУчета", ДатаОстатков);
				ПараметрыУстановкиПартии.Вставить("СоздаватьСлужебнуюПартию", Ложь);
				ПараметрыУстановкиПартии.Вставить("СлужебныйДокументПартии", СтруктураПараметров.ПартияДляОстатков);
				
				Обработки.УстановкаСубконтоПартииПриПереходеНаПартионныйУчетБУ.ЗаполнитьСубконтоПартииВОстатках(ПараметрыУстановкиПартии, Отказ);
				
				Если ПараметрыУстановкиПартии.Свойство("ДокументыОперации") Тогда					
					СозданныеДокументы = ПараметрыУстановкиПартии.ДокументыОперации;
					Если СозданныеДокументы.Количество() > 0 Тогда
						Для каждого СозданныйДокумент Из СозданныеДокументы Цикл
							СтруктураПараметров.СозданныеДокументы.Добавить(СозданныйДокумент);													
						КонецЦикла; 						
					КонецЕсли; 
				КонецЕсли; 
				
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли; 

	ВозвращаемыеПараметры = Новый Структура();
	ВозвращаемыеПараметры.Вставить("ВыполняемаяОперация", ПараметрыДляОстатков.ВидОперации);
	ВозвращаемыеПараметры.Вставить("ДокументыОперации", СтруктураПараметров.СозданныеДокументы);
	ВозвращаемыеПараметры.Вставить("УспешноВыполнено", НЕ Отказ);
	
	Если ЭтоАдресВременногоХранилища(АдресХранилища) Тогда		
		ПоместитьВоВременноеХранилище(ВозвращаемыеПараметры, АдресХранилища);
	КонецЕсли; 	
	
КонецФункции // ЗаполнитьНачальныеОстаткиУСН()


Функция ЗаполнитьТаблицыДляОстатков(СтруктураПараметров)
	
	ОбщиеПараметрыЗапроса = СоздатьСтруктуруОбщихПараметровЗапроса(СтруктураПараметров);
	СтруктураПараметров.Вставить("ОбщиеПараметрыЗапроса", ОбщиеПараметрыЗапроса);
	
	// Дополнительные параметры запроса, которые могут понадобиться в зависимости от сформированного текста запроса
	ДополнительныеПараметрыЗапроса = Новый Структура;
	
	// Хоронилище всех формируемых таблиц
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	
	// Массив имен вспомогательных временных таблиц, подлежащих уничтожению
	ВременныеТаблицыДляУничтожения = Новый Массив;
	
	// ------
	// ЭТАП 1: Подготовка таблиц остатков активов, которые могут быть приняты к расходам,
	//         а также остатков взаиморасчетов по документам и при необходимости по "номенклатуре" 
	// ------
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	УстановитьПараметрыЗапроса(Запрос, ОбщиеПараметрыЗапроса);
	
	Запрос.Текст = ТекстЗапросаПоВзаиморасчетам(СтруктураПараметров, ДополнительныеПараметрыЗапроса, ВременныеТаблицыДляУничтожения)
		+ ТекстЗапросаПоОстаткамМПЗ(СтруктураПараметров, ДополнительныеПараметрыЗапроса, ВременныеТаблицыДляУничтожения)
		+ ТекстЗапросаПоТорговойНаценкеАТТ(СтруктураПараметров, ДополнительныеПараметрыЗапроса, ВременныеТаблицыДляУничтожения)
		+ ТекстЗапросаПоОС(СтруктураПараметров, ДополнительныеПараметрыЗапроса, ВременныеТаблицыДляУничтожения)
		+ ТекстЗапросаПоНМА(СтруктураПараметров, ДополнительныеПараметрыЗапроса, ВременныеТаблицыДляУничтожения)
		+ ТекстЗапросаПоНалогамИСборам(СтруктураПараметров, ДополнительныеПараметрыЗапроса, ВременныеТаблицыДляУничтожения)
		+ ТекстЗапросаПоРасчетамСПерсоналом(СтруктураПараметров, ДополнительныеПараметрыЗапроса, ВременныеТаблицыДляУничтожения)
		+ ТекстЗапросаПоРасчетамСПодотчетниками(СтруктураПараметров, ДополнительныеПараметрыЗапроса, ВременныеТаблицыДляУничтожения)
		+ ТекстЗапросаПоРБП(СтруктураПараметров, ДополнительныеПараметрыЗапроса, ВременныеТаблицыДляУничтожения);
			
	// получение взаиморасчетов "по номенклатуре"
	Запрос.Текст = Запрос.Текст 
		+ ТекстЗапросаВзаиморасчетыПоНоменклатуре(СтруктураПараметров, ДополнительныеПараметрыЗапроса, ВременныеТаблицыДляУничтожения); 
	
	//устанавливаем дополнительные параметры
	УстановитьПараметрыЗапроса(Запрос, ДополнительныеПараметрыЗапроса);
	
	Запрос.Выполнить();
	
	УничтожитьВспомогательныеВременныеТаблицы(МенеджерВТ, ВременныеТаблицыДляУничтожения);
	
	// ------
	// ЭТАП 2: Распределение остатков расходов по кредиторской задолженности
	// ------
	
	// Распределяем остатки расходов УСН по неоплаченным расчетным документам
	РаспределитьОстаткиМПЗПоДокументамРасчетов(СтруктураПараметров, МенеджерВТ);
	РаспределитьОстаткиРБППоДокументамРасчетов(СтруктураПараметров, МенеджерВТ);
	
	// ------
	// ЭТАП 3: Подготовка таблиц для загрузки в документы ввода начальных остатков
	// ------
	
	НомераТаблиц = Новый Структура;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	УстановитьПараметрыЗапроса(Запрос, ОбщиеПараметрыЗапроса);
	
	Запрос.Текст = ТекстЗапроса_ТаблицыВДокумент_ОС(НомераТаблиц)
			+ ТекстЗапроса_ТаблицыВДокумент_НМА(НомераТаблиц)
			+ ТекстЗапроса_ТаблицыВДокумент_НалогиИСборы(НомераТаблиц)
			+ ТекстЗапроса_ТаблицыВДокумент_РасчетыСПерсоналом(НомераТаблиц)
			+ ТекстЗапроса_ТаблицыВДокумент_РБП(НомераТаблиц)
			+ ТекстЗапроса_ТаблицыВДокумент_РасчетыСПодотчетниками(НомераТаблиц)
			+ ТекстЗапроса_ТаблицыВДокумент_МатериалыНаСкладах(НомераТаблиц)
			+ ТекстЗапроса_ТаблицыВДокумент_МатериалыВПереработке(НомераТаблиц)
			+ ТекстЗапроса_ТаблицыВДокумент_ТоварыНаСкладах(НомераТаблиц)
			+ ТекстЗапроса_ТаблицыВДокумент_ТоварыОтгруженные(НомераТаблиц)
			+ ТекстЗапроса_ТаблицыВДокумент_ТоварыАТТ(НомераТаблиц)
			+ ТекстЗапроса_ТаблицыВДокумент_ДопРасходы(НомераТаблиц); 
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицыВводаОстатков = Новый ТаблицаЗначений;
	ТаблицыВводаОстатков.Колонки.Добавить("РазделУчетаДляВводаОстатков");
	ТаблицыВводаОстатков.Колонки.Добавить("ИмяТабличнойЧасти");
	ТаблицыВводаОстатков.Колонки.Добавить("ТаблицаДанных");
	
	Для каждого НомерТаблицы Из НомераТаблиц Цикл
		
		Если СтрНайти(НомерТаблицы.Ключ, "Уничтожение") > 0 Тогда			
			Продолжить;
		КонецЕсли; 
		
		ПозРазделителя = СтрНайти(НомерТаблицы.Ключ, "__");
		ИмяРазделаУчета = Лев(НомерТаблицы.Ключ, ПозРазделителя - 1);
		РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков[ИмяРазделаУчета];
		ИмяТЧ = Сред(НомерТаблицы.Ключ, ПозРазделителя+2);
		
		ТаблицаДанныхПоРазделу = Результат[НомерТаблицы.Значение].Выгрузить();
		
		Если ТаблицаДанныхПоРазделу.Количество() > 0 Тогда			
			СтрокаОстатков = ТаблицыВводаОстатков.Добавить();
			СтрокаОстатков.РазделУчетаДляВводаОстатков = РазделУчета;
			СтрокаОстатков.ИмяТабличнойЧасти = ИмяТЧ;
			СтрокаОстатков.ТаблицаДанных = ТаблицаДанныхПоРазделу;			
		КонецЕсли; 
		
	КонецЦикла; 
	
	Возврат ТаблицыВводаОстатков;
	
КонецФункции // ЗаполнитьТаблицыДляОстатков()


// Запросы к данным ИБ для извлечения остатков

Функция ТекстЗапросаПоВзаиморасчетам(СтруктураПараметров, ДополнительныеПараметрыЗапроса, ВременныеТаблицыДляУничтожения)
	
	// Остатки взаиморасчетов выбираем только положительные, и только по непустым документам расчетов
	// Ситуацию, когда по какому-либо документу расчетов сальдо отрицательное (не восстановлена последовательность расчетов),
	// считаем ошибочной и не обрабатываем
	// 
	// Отбор по Счету Дт при поиске оборотов по расчетным документам не делаем - при корректном ведении учета кредитовый оборот по счетам взаиморасчетов
	// равен сумме возникшей по документу задолженности, "задвоения" оборотов при зачете аванса и при корректировках долга быть не должно
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК СчетРасчетов,
	|	ХозрасчетныйОстатки.Субконто1 КАК Контрагент,
	|	ХозрасчетныйОстатки.Субконто2 КАК ДоговорКонтрагента,
	|	ХозрасчетныйОстатки.Субконто3 КАК ДокументРасчетов,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Валютный
	|			ТОГДА ХозрасчетныйОстатки.Валюта
	|		ИНАЧЕ &ВалютаРеглУчета
	|	КОНЕЦ КАК Валюта,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК Сумма,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Валютный
	|			ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт
	|		ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокКт
	|	КОНЕЦ КАК ВалютнаяСумма
	|ПОМЕСТИТЬ ВзаиморасчетыКЗ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаОстатков,
	|			Счет В (&СчетаРасчетовСПоставщиками),
	|			&ВидыСубконтоВзаиморасчеты,
	|			Организация = &Организация
	|				И НЕ ЕСТЬNULL(Субконто3, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстатокКт > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВзаиморасчетыКЗ.Контрагент,
	|	ВзаиморасчетыКЗ.ДоговорКонтрагента,
	|	ВзаиморасчетыКЗ.ДокументРасчетов,
	|	ВзаиморасчетыКЗ.Валюта,
	|	ВзаиморасчетыКЗ.Сумма,
	|	ВзаиморасчетыКЗ.ВалютнаяСумма,
	|	ХозрасчетныйОборотыДтКт.СуммаОборот КАК СуммаРегистр,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОборотыДтКт.СчетКт.Валютный
	|			ТОГДА ХозрасчетныйОборотыДтКт.ВалютнаяСуммаОборотКт
	|		ИНАЧЕ ХозрасчетныйОборотыДтКт.СуммаОборот
	|	КОНЕЦ КАК ВалютнаяСуммаРегистр,
	|	ВзаиморасчетыКЗ.ВалютнаяСумма / ВЫБОР
	|		КОГДА ХозрасчетныйОборотыДтКт.СчетКт.Валютный
	|			ТОГДА ХозрасчетныйОборотыДтКт.ВалютнаяСуммаОборотКт
	|		ИНАЧЕ ХозрасчетныйОборотыДтКт.СуммаОборот
	|	КОНЕЦ КАК КоэффЗадолженности
	|ПОМЕСТИТЬ ОплатаДокументовКЗ_Коэффициенты
	|ИЗ
	|	ВзаиморасчетыКЗ КАК ВзаиморасчетыКЗ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ОборотыДтКт(, &ГраницаОборотов, , , , СчетКТ В (&СчетаРасчетовСПоставщиками), &ВидыСубконтоВзаиморасчеты, Организация = &Организация) КАК ХозрасчетныйОборотыДтКт
	|		ПО ВзаиморасчетыКЗ.СчетРасчетов = ХозрасчетныйОборотыДтКт.СчетКт
	|			И ВзаиморасчетыКЗ.Контрагент = ХозрасчетныйОборотыДтКт.СубконтоКт1
	|			И ВзаиморасчетыКЗ.ДоговорКонтрагента = ХозрасчетныйОборотыДтКт.СубконтоКт2
	|			И ВзаиморасчетыКЗ.ДокументРасчетов = ХозрасчетныйОборотыДтКт.СубконтоКт3
	|			И (ВЫБОР
	|				КОГДА ВзаиморасчетыКЗ.СчетРасчетов.Валютный
	|					ТОГДА ВзаиморасчетыКЗ.Валюта = ХозрасчетныйОборотыДтКт.ВалютаКт
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)"
	;
	
	ВременныеТаблицыДляУничтожения.Добавить("ВзаиморасчетыКЗ");
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции // ТекстЗапросаПоВзаиморасчетам()


Функция ТекстЗапросаВзаиморасчетыПоНоменклатуре(СтруктураПараметров, ДополнительныеПараметрыЗапроса, ВременныеТаблицыДляУничтожения)
		
	УчетнаяПолитикаДоПерехода = СтруктураПараметров.УчетнаяПолитикаДоПерехода;
	
	Если НЕ УчетнаяПолитикаДоПерехода.СложныйУчетНДС И УчетнаяПолитикаДоПерехода.СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней Тогда // требуются взаиморасчеты за МПЗ и РБП
		КорСчетаВзаиморасчетов = Новый Массив;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КорСчетаВзаиморасчетов, СтруктураПараметров.ОбщиеПараметрыЗапроса.СчетаУчетаМПЗ_БезГрупп);
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КорСчетаВзаиморасчетов, СтруктураПараметров.ОбщиеПараметрыЗапроса.СчетаУчетаРБП);
		ДополнительныеПараметрыЗапроса.Вставить("СчетаДетализацииВзаиморасчетов", КорСчетаВзаиморасчетов);
	Иначе // требуются взаиморасчеты только за РБП
		ДополнительныеПараметрыЗапроса.Вставить("СчетаДетализацииВзаиморасчетов", СтруктураПараметров.ОбщиеПараметрыЗапроса.СчетаУчетаРБП);
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОплатаДокументовКЗ_Коэффициенты.Контрагент,
	|	ОплатаДокументовКЗ_Коэффициенты.ДоговорКонтрагента,
	|	ОплатаДокументовКЗ_Коэффициенты.ДокументРасчетов,
	|	ДанныеПервичныхДокументов.ДатаРегистратора КАК ДокументРасчетовДата,
	|	ОплатаДокументовКЗ_Коэффициенты.КоэффЗадолженности,
	|	ОплатаДокументовКЗ_Коэффициенты.Валюта
	|ПОМЕСТИТЬ ТаблицаДокументовЗадолженности
	|ИЗ
	|	ОплатаДокументовКЗ_Коэффициенты КАК ОплатаДокументовКЗ_Коэффициенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
	|		ПО ОплатаДокументовКЗ_Коэффициенты.ДокументРасчетов = ДанныеПервичныхДокументов.Документ
	|			И (ДанныеПервичныхДокументов.Организация = &Организация)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.КорСчет КАК СчетУчета,
	|	ХозрасчетныйОбороты.КорСубконто1 КАК СубконтоДт1,
	|	ХозрасчетныйОбороты.КорСубконто2 КАК СубконтоДт2,
	|	ХозрасчетныйОбороты.КорСубконто3 КАК СубконтоДт3,
	|	ТаблицаДокументовЗадолженности.Контрагент,
	|	ТаблицаДокументовЗадолженности.ДоговорКонтрагента,
	|	ТаблицаДокументовЗадолженности.ДокументРасчетов,
	|	ТаблицаДокументовЗадолженности.ДокументРасчетовДата,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.КорСчет.Количественный
	|				ТОГДА ХозрасчетныйОбороты.КоличествоКорОборотКт
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Количество,
	|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт) КАК Сумма,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Счет.Валютный
	|			ТОГДА ХозрасчетныйОбороты.Валюта
	|		ИНАЧЕ &ВалютаРеглУчета
	|	КОНЕЦ КАК Валюта,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОбороты.Счет.Валютный
	|				ТОГДА ХозрасчетныйОбороты.ВалютнаяСуммаОборотКт
	|			ИНАЧЕ ХозрасчетныйОбороты.СуммаОборотКт
	|		КОНЕЦ) КАК ВалютнаяСумма,
	|	СУММА(0) КАК СуммаНДС,
	|	СУММА(0) КАК ВалютнаяСуммаНДС,
	|	ТаблицаДокументовЗадолженности.КоэффЗадолженности
	|ПОМЕСТИТЬ ТабОборотыПоНоменклатуреДтКт
	|ИЗ
	|	ТаблицаДокументовЗадолженности КАК ТаблицаДокументовЗадолженности
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Обороты(, &ГраницаОборотов, , Счет В (&СчетаРасчетовСПоставщиками), &ВидыСубконтоВзаиморасчеты, , КорСчет В (&СчетаДетализацииВзаиморасчетов), ) КАК ХозрасчетныйОбороты
	|		ПО ТаблицаДокументовЗадолженности.Контрагент = ХозрасчетныйОбороты.Субконто1
	|			И ТаблицаДокументовЗадолженности.ДоговорКонтрагента = ХозрасчетныйОбороты.Субконто2
	|			И ТаблицаДокументовЗадолженности.ДокументРасчетов = ХозрасчетныйОбороты.Субконто3
	|			И (ВЫБОР
	|				КОГДА ХозрасчетныйОбороты.Счет.Валютный
	|					ТОГДА ХозрасчетныйОбороты.Валюта = ТаблицаДокументовЗадолженности.Валюта
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокументовЗадолженности.Контрагент,
	|	ТаблицаДокументовЗадолженности.ДокументРасчетовДата,
	|	ТаблицаДокументовЗадолженности.ДокументРасчетов,
	|	ТаблицаДокументовЗадолженности.ДоговорКонтрагента,
	|	ТаблицаДокументовЗадолженности.КоэффЗадолженности,
	|	ХозрасчетныйОбороты.КорСчет,
	|	ХозрасчетныйОбороты.КорСубконто1,
	|	ХозрасчетныйОбороты.КорСубконто2,
	|	ХозрасчетныйОбороты.КорСубконто3,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОбороты.Счет.Валютный
	|			ТОГДА ХозрасчетныйОбороты.Валюта
	|		ИНАЧЕ &ВалютаРеглУчета
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабОборотыПоНоменклатуреДтКт.СчетУчета,
	|	ТабОборотыПоНоменклатуреДтКт.СубконтоДт1 КАК Номенклатура,
	|	ВЫРАЗИТЬ(ТабОборотыПоНоменклатуреДтКт.СубконтоДт1 КАК Справочник.Номенклатура).Наименование КАК НоменклатураНаименование,
	|	ТабОборотыПоНоменклатуреДтКт.Контрагент КАК Поставщик,
	|	ТабОборотыПоНоменклатуреДтКт.ДоговорКонтрагента КАК ДоговорПоставщика,
	|	ТабОборотыПоНоменклатуреДтКт.ДокументРасчетов,
	|	ТабОборотыПоНоменклатуреДтКт.ДокументРасчетовДата,
	|	ТабОборотыПоНоменклатуреДтКт.Валюта,
	|	ТабОборотыПоНоменклатуреДтКт.Количество КАК КоличествоПоступило,
	|	ТабОборотыПоНоменклатуреДтКт.Сумма КАК СуммаПоступило,
	|	ТабОборотыПоНоменклатуреДтКт.ВалютнаяСумма КАК ВалютнаяСуммаПоступило,
	|	ТабОборотыПоНоменклатуреДтКт.СуммаНДС КАК СуммаНДСПоступило,
	|	ТабОборотыПоНоменклатуреДтКт.ВалютнаяСуммаНДС КАК ВалютнаяСуммаНДСПоступило,
	|	ТабОборотыПоНоменклатуреДтКт.КоэффЗадолженности,
	|	ТабОборотыПоНоменклатуреДтКт.Количество * ТабОборотыПоНоменклатуреДтКт.КоэффЗадолженности КАК Количество,
	|	ТабОборотыПоНоменклатуреДтКт.Сумма * ТабОборотыПоНоменклатуреДтКт.КоэффЗадолженности КАК Сумма,
	|	ТабОборотыПоНоменклатуреДтКт.ВалютнаяСумма * ТабОборотыПоНоменклатуреДтКт.КоэффЗадолженности КАК ВалютнаяСумма,
	|	ТабОборотыПоНоменклатуреДтКт.СуммаНДС * ТабОборотыПоНоменклатуреДтКт.КоэффЗадолженности КАК СуммаНДС,
	|	ТабОборотыПоНоменклатуреДтКт.ВалютнаяСуммаНДС * ТабОборотыПоНоменклатуреДтКт.КоэффЗадолженности КАК ВалютнаяСуммаНДС
	|ПОМЕСТИТЬ ВзаиморасчетыЗаМПЗ
	|ИЗ
	|	ТабОборотыПоНоменклатуреДтКт КАК ТабОборотыПоНоменклатуреДтКт
	|ГДЕ
	|	ТабОборотыПоНоменклатуреДтКт.СчетУчета В(&СчетаУчетаМПЗ_БезГрупп)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабОборотыПоНоменклатуреДтКт.СчетУчета,
	|	ВЫБОР
	|		КОГДА ТабОборотыПоНоменклатуреДтКт.СубконтоДт1 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ТабОборотыПоНоменклатуреДтКт.СубконтоДт1
	|		КОГДА ТабОборотыПоНоменклатуреДтКт.СубконтоДт2 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ТабОборотыПоНоменклатуреДтКт.СубконтоДт2
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.РасходыБудущихПериодов.ПустаяСсылка)
	|	КОНЕЦ КАК ЭлементРБП,
	|	ТабОборотыПоНоменклатуреДтКт.Контрагент КАК Контрагент,
	|	ТабОборотыПоНоменклатуреДтКт.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТабОборотыПоНоменклатуреДтКт.ДокументРасчетов,
	|	ТабОборотыПоНоменклатуреДтКт.ДокументРасчетовДата,
	|	ТабОборотыПоНоменклатуреДтКт.Валюта,
	|	ТабОборотыПоНоменклатуреДтКт.Количество КАК КоличествоПоступило,
	|	ТабОборотыПоНоменклатуреДтКт.Сумма КАК СуммаПоступило,
	|	ТабОборотыПоНоменклатуреДтКт.ВалютнаяСумма КАК ВалютнаяСуммаПоступило,
	|	ТабОборотыПоНоменклатуреДтКт.СуммаНДС КАК СуммаНДСПоступило,
	|	ТабОборотыПоНоменклатуреДтКт.ВалютнаяСуммаНДС КАК ВалютнаяСуммаНДСПоступило,
	|	ТабОборотыПоНоменклатуреДтКт.КоэффЗадолженности,
	|	ТабОборотыПоНоменклатуреДтКт.Количество * ТабОборотыПоНоменклатуреДтКт.КоэффЗадолженности КАК Количество,
	|	ТабОборотыПоНоменклатуреДтКт.Сумма * ТабОборотыПоНоменклатуреДтКт.КоэффЗадолженности КАК Сумма,
	|	ТабОборотыПоНоменклатуреДтКт.ВалютнаяСумма * ТабОборотыПоНоменклатуреДтКт.КоэффЗадолженности КАК ВалютнаяСумма,
	|	ТабОборотыПоНоменклатуреДтКт.СуммаНДС * ТабОборотыПоНоменклатуреДтКт.КоэффЗадолженности КАК СуммаНДС,
	|	ТабОборотыПоНоменклатуреДтКт.ВалютнаяСуммаНДС * ТабОборотыПоНоменклатуреДтКт.КоэффЗадолженности КАК ВалютнаяСуммаНДС
	|ПОМЕСТИТЬ ВзаиморасчетыЗаРБП
	|ИЗ
	|	ТабОборотыПоНоменклатуреДтКт КАК ТабОборотыПоНоменклатуреДтКт
	|ГДЕ
	|	ТабОборотыПоНоменклатуреДтКт.СчетУчета В(&СчетаУчетаРБП)"
	;
	
	ВременныеТаблицыДляУничтожения.Добавить("ТаблицаДокументовЗадолженности");
	ВременныеТаблицыДляУничтожения.Добавить("ТабОборотыПоНоменклатуреДтКт");
	
	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции // ТекстЗапросаВзаиморасчетыПоНоменклатуре()


Функция ТекстЗапросаПоОстаткамМПЗ(СтруктураПараметров, ДополнительныеПараметрыЗапроса, ВременныеТаблицыДляУничтожения)
	
	УчетнаяПолитикаДоПерехода = СтруктураПараметров.УчетнаяПолитикаДоПерехода;
	
	ТекстЗапроса = "";
	
	Если УчетнаяПолитикаДоПерехода.СложныйУчетНДС Тогда // остатки из регистра НДСпоПриобретеннымЦенностям - легко и "прямо"
		
		УчетЗапасовПоСредней = (СтруктураПараметров.УчетнаяПолитикаДоПерехода.СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней);
		ДополнительныеПараметрыЗапроса.Вставить("УчетЗапасовПоСредней", УчетЗапасовПоСредней);
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	НДСПоПриобретеннымЦенностямОстатки.Номенклатура,
		|	НДСПоПриобретеннымЦенностямОстатки.Номенклатура.Наименование,
		|	НДСПоПриобретеннымЦенностямОстатки.СчетУчета,
		|	ВЫБОР
		|		КОГДА &УчетЗапасовПоСредней
		|			ТОГДА ЗНАЧЕНИЕ(Документ.ДокументРасчетовСКонтрагентом.ПустаяСсылка)
		|		ИНАЧЕ НДСПоПриобретеннымЦенностямОстатки.Партия
		|	КОНЕЦ КАК Партия,
		|	НДСПоПриобретеннымЦенностямОстатки.СчетФактура КАК ДокументРасчетов,
		|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
		|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК ДоговорКонтрагента,
		|	СУММА(НДСПоПриобретеннымЦенностямОстатки.КоличествоОстаток) КАК Количество,
		|	СУММА(НДСПоПриобретеннымЦенностямОстатки.СтоимостьОстаток - ВЫБОР
		|			КОГДА НДСПоПриобретеннымЦенностямОстатки.НДСВключенВСтоимость
		|				ТОГДА 0
		|			ИНАЧЕ НДСПоПриобретеннымЦенностямОстатки.НДСОстаток
		|		КОНЕЦ) КАК Сумма,
		|	СУММА(0) КАК СуммаНДС
		|ПОМЕСТИТЬ ПартииМПЗиНДС
		|ИЗ
		|	РегистрНакопления.НДСПоПриобретеннымЦенностям.Остатки(
		|			&ДатаОстатков,
		|			Организация = &Организация
		|				И ВидЦенности В (&ВидыЦенностейМПЗ)
		|				И СчетУчета В (&СчетаУчетаМПЗ_БезГрупп)) КАК НДСПоПриобретеннымЦенностямОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	НДСПоПриобретеннымЦенностямОстатки.СчетФактура,
		|	НДСПоПриобретеннымЦенностямОстатки.СчетУчета,
		|	НДСПоПриобретеннымЦенностямОстатки.Номенклатура,
		|	НДСПоПриобретеннымЦенностямОстатки.Номенклатура.Наименование,
		|	ВЫБОР
		|		КОГДА &УчетЗапасовПоСредней
		|			ТОГДА ЗНАЧЕНИЕ(Документ.ДокументРасчетовСКонтрагентом.ПустаяСсылка)
		|		ИНАЧЕ НДСПоПриобретеннымЦенностямОстатки.Партия
		|	КОНЕЦ"
		;
		
	Иначе
			
		СчетаУчетаМПЗ_БезГрупп = СтруктураПараметров.ОбщиеПараметрыЗапроса.СчетаУчетаМПЗ_БезГрупп;
		
		ТекстЗапроса = ТекстЗапросаПоОстаткамМПЗИзБУ(СтруктураПараметров, ДополнительныеПараметрыЗапроса, СчетаУчетаМПЗ_БезГрупп);
				
	КонецЕсли; 

	Возврат ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции // ТекстЗапросаПоОстаткамМПЗ()


Функция ТекстЗапросаПоОстаткамМПЗИзБУ(СтруктураПараметров, ДопПараметрыЗапроса, МассивСчетовУчета)
	
	// Получаем остатки номенклатуры

	// Сортировка счетов учета
	СчетаУчетаН   = Новый Массив; // счета с суммовым учетом только по номенклатуре
	СчетаУчетаНС  = Новый Массив; // счета с суммовым учетом по номенклатуре и складам
	СчетаУчетаНП  = Новый Массив; // счета с суммовым учетом по номенклатуре и партиям
	СчетаУчетаНСП = Новый Массив; // счета с суммовым учетом по номенклатуре, складам и партиям
	СчетаУчетаКН  = Новый Массив; // счета с суммовым учетом по контрагентам, и номенклатуре
	СчетаУчетаКНП = Новый Массив; // счета с суммовым учетом по контрагентам, номенклатуре и партиям
	СчетаУчетаКНС = Новый Массив; // счета с суммовым учетом по контрагентам, номенклатуре и складам

	СчетаУчетаН_Склад  = Новый Массив; // счета с суммовым учетом только по номенклатуре и количественным по складу
	СчетаУчетаНП_Склад = Новый Массив; // счета с суммовым учетом по номенклатуре и партиям и количественным по складу
	СчетаУчетаНК_Склад = Новый Массив; // счета с суммовым учетом по номенклатуре и контрагентам и количественным по складу

	УчетТоваров.СортировкаСчетовУчета(МассивСчетовУчета,
	                      СчетаУчетаН,
	                      СчетаУчетаНС,
	                      СчетаУчетаНП,
	                      СчетаУчетаНСП,
	                      СчетаУчетаКН,
	                      СчетаУчетаКНП,
	                      СчетаУчетаКНС,
	                      СчетаУчетаН_Склад,
	                      СчетаУчетаНП_Склад,
	                      СчетаУчетаНК_Склад);

	ВидыСубконтоН = Новый Массив;
	ВидысубконтоН.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);

	ВидыСубконтоНС = Новый Массив;
	ВидысубконтоНС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидысубконтоНС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);

	ВидыСубконтоНП = Новый Массив;
	ВидысубконтоНП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидысубконтоНП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);

	ВидыСубконтоНСП = Новый Массив;
	ВидысубконтоНСП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидысубконтоНСП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	ВидысубконтоНСП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);

	ВидыСубконтоКН = Новый Массив;
	ВидыСубконтоКН.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоКН.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);

	ВидыСубконтоКНП = Новый Массив;
	ВидыСубконтоКНП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоКНП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	ВидыСубконтоКНП.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);

	ВидыСубконтоКНС = Новый Массив;
	ВидыСубконтоКНС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ВидыСубконтоКНС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоКНС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);

	ДопПараметрыЗапроса.Вставить("СчетаУчетаН",          СчетаУчетаН);
	ДопПараметрыЗапроса.Вставить("СчетаУчетаНС",         СчетаУчетаНС);
	ДопПараметрыЗапроса.Вставить("СчетаУчетаНП",         СчетаУчетаНП);
	ДопПараметрыЗапроса.Вставить("СчетаУчетаНСП",        СчетаУчетаНСП);
	ДопПараметрыЗапроса.Вставить("СчетаУчетаКН",         СчетаУчетаКН);
	ДопПараметрыЗапроса.Вставить("СчетаУчетаКНП",        СчетаУчетаКНП);
	ДопПараметрыЗапроса.Вставить("СчетаУчетаКНС",        СчетаУчетаКНС);
	ДопПараметрыЗапроса.Вставить("СчетаУчетаН_Склад",    СчетаУчетаН_Склад);
	ДопПараметрыЗапроса.Вставить("СчетаУчетаНП_Склад",   СчетаУчетаНП_Склад);
	ДопПараметрыЗапроса.Вставить("СчетаУчетаНК_Склад",   СчетаУчетаНК_Склад);
	ДопПараметрыЗапроса.Вставить("ВидысубконтоН",        ВидысубконтоН);
	ДопПараметрыЗапроса.Вставить("ВидысубконтоНС",       ВидысубконтоНС);
	ДопПараметрыЗапроса.Вставить("ВидысубконтоНП",       ВидысубконтоНП);
	ДопПараметрыЗапроса.Вставить("ВидысубконтоНСП",      ВидысубконтоНСП);
	ДопПараметрыЗапроса.Вставить("ВидысубконтоКН",       ВидысубконтоКН);
	ДопПараметрыЗапроса.Вставить("ВидыСубконтоКНП",      ВидыСубконтоКНП);
	ДопПараметрыЗапроса.Вставить("ВидыСубконтоКНС",      ВидыСубконтоКНС);
	ДопПараметрыЗапроса.Вставить("ПустаяДата",           Дата(1,1,1));
	ДопПараметрыЗапроса.Вставить("ПустаяПартия",         Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка());
	ДопПараметрыЗапроса.Вставить("ПустойДокументРасчетов",Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка());
	ДопПараметрыЗапроса.Вставить("ПустойКонтрагент",     Справочники.Контрагенты.ПустаяСсылка());
	ДопПараметрыЗапроса.Вставить("ПустойДоговор",        Справочники.ДоговорыКонтрагентов.ПустаяСсылка());

	Текст = "";
	
	// Структура таблицы остатков:
	
	// Номенклатура
	// Счет учета
	// Партия
	// Документ расчетов
	// Контрагент
	// Договор контрагента
	// Количество
	// Сумма
	// НДС
		
	Если СчетаУчетаН.Количество() > 0 Тогда

		Текст = Текст + "
		|ВЫБРАТЬ
		|	Остатки.Субконто1 КАК Номенклатура,
		|	Остатки.Субконто1.Наименование КАК НоменклатураНаименование,
		|	Остатки.Счет КАК СчетУчета,
		|	&ПустаяПартия КАК Партия,
		|	&ПустойДокументРасчетов КАК ДокументРасчетов,
		|	&ПустойКонтрагент КАК Контрагент,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Сумма,
		|	СУММА(0) КАК СуммаНДС
		|" + ?(Текст = "", "ПОМЕСТИТЬ ПартииМПЗиНДС
		|", "") + "
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В (&СчетаУчетаН), &ВидыСубконтоН, Организация = &Организация) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Субконто1";

	КонецЕсли;

	Если СчетаУчетаНС.Количество() > 0 Тогда

		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + "ВЫБРАТЬ
		|	Остатки.Субконто1 КАК Номенклатура,
		|	Остатки.Субконто1.Наименование КАК НоменклатураНаименование,
		|	Остатки.Счет КАК СчетУчета,
		|	&ПустаяПартия КАК Партия,
		|	&ПустойДокументРасчетов КАК ДокументРасчетов,
		|	&ПустойКонтрагент КАК Контрагент,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Сумма,
		|	СУММА(0) КАК СуммаНДС
		|" + ?(Текст = "", "ПОМЕСТИТЬ ПартииМПЗиНДС
		|", "") + "
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В (&СчетаУчетаНС), &ВидыСубконтоН, Организация = &Организация) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Субконто1"
		;

	КонецЕсли;

	Если СчетаУчетаНП.Количество() > 0 Тогда

		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + "ВЫБРАТЬ
		|	Остатки.Субконто1 КАК Номенклатура,
		|	Остатки.Субконто1.Наименование КАК НоменклатураНаименование,
		|	Остатки.Счет КАК СчетУчета,
		|	ВЫБОР 
		|		КОГДА Остатки.Субконто2 = НЕОПРЕДЕЛЕНО 
		|			ТОГДА &ПустаяПартия
		|		ИНАЧЕ Остатки.Субконто2 
		|	КОНЕЦ КАК Партия,
		|	ВЫБОР 
		|		КОГДА Остатки.Субконто2 = НЕОПРЕДЕЛЕНО 
		|			ТОГДА &ПустойДокументРасчетов
		|		ИНАЧЕ Остатки.Субконто2 
		|	КОНЕЦ КАК ДокументРасчетов,
		|	&ПустойКонтрагент КАК Контрагент,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Сумма,
		|	СУММА(0) КАК СуммаНДС
		|" + ?(Текст = "", "ПОМЕСТИТЬ ПартииМПЗиНДС
		|", "") + "
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В (&СчетаУчетаНП), &ВидыСубконтоНП, Организация = &Организация) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Субконто1,
		|	Остатки.Субконто2"
		;

	КонецЕсли;

	Если СчетаУчетаНСП.Количество() > 0 Тогда

		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + "ВЫБРАТЬ
		|	Остатки.Субконто1 КАК Номенклатура,
		|	Остатки.Субконто1.Наименование КАК НоменклатураНаименование,
		|	Остатки.Счет КАК СчетУчета,
		|	ВЫБОР 
		|		КОГДА Остатки.Субконто2 = НЕОПРЕДЕЛЕНО 
		|			ТОГДА &ПустаяПартия
		|		ИНАЧЕ Остатки.Субконто2 
		|	КОНЕЦ КАК Партия,
		|	ВЫБОР 
		|		КОГДА Остатки.Субконто2 = НЕОПРЕДЕЛЕНО 
		|			ТОГДА &ПустойДокументРасчетов
		|		ИНАЧЕ Остатки.Субконто2 
		|	КОНЕЦ КАК ДокументРасчетов,
		|	&ПустойКонтрагент КАК Контрагент,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Сумма,
		|	СУММА(0) КАК СуммаНДС
		|" + ?(Текст = "", "ПОМЕСТИТЬ ПартииМПЗиНДС
		|", "") + "
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В (&СчетаУчетаНСП), &ВидысубконтоНП, Организация = &Организация) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Субконто1,
		|	Остатки.Субконто2"
		;

	КонецЕсли;

	Если СчетаУчетаКН.Количество() > 0 Тогда // отгруженные

		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + "ВЫБРАТЬ
		|	Остатки.Субконто1 КАК Номенклатура,
		|	Остатки.Субконто1.Наименование КАК НоменклатураНаименование,
		|	Остатки.Счет КАК СчетУчета,
		|	&ПустаяПартия КАК Партия,
		|	&ПустойДокументРасчетов КАК ДокументРасчетов,
		|	Остатки.Субконто2 КАК Контрагент,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Сумма,
		|	СУММА(0) КАК СуммаНДС
		|" + ?(Текст = "", "ПОМЕСТИТЬ ПартииМПЗиНДС
		|", "") + "
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В (&СчетаУчетаКН), &ВидыСубконтоКН, Организация = &Организация) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Субконто1,
		|	Остатки.Субконто2 "
		;

	КонецЕсли;

	Если СчетаУчетаКНП.Количество() > 0 Тогда // отгруженные

		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + "ВЫБРАТЬ
		|	Остатки.Субконто1 КАК Номенклатура,
		|	Остатки.Субконто1.Наименование КАК НоменклатураНаименование,
		|	Остатки.Счет КАК СчетУчета,
		|	ВЫБОР 
		|		КОГДА Остатки.Субконто2 = НЕОПРЕДЕЛЕНО 
		|			ТОГДА &ПустаяПартия
		|		ИНАЧЕ Остатки.Субконто2 
		|	КОНЕЦ КАК Партия,
		|	ВЫБОР 
		|		КОГДА Остатки.Субконто2 = НЕОПРЕДЕЛЕНО 
		|			ТОГДА &ПустойДокументРасчетов
		|		ИНАЧЕ Остатки.Субконто2 
		|	КОНЕЦ КАК ДокументРасчетов,
		|	Остатки.Субконто3 КАК Контрагент,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Сумма,
		|	СУММА(0) КАК СуммаНДС
		|" + ?(Текст = "", "ПОМЕСТИТЬ ПартииМПЗиНДС
		|", "") + "
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В (&СчетаУчетаКНП), &ВидыСубконтоКНП, Организация = &Организация) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Субконто1,
		|	Остатки.Субконто2,
		|	Остатки.Субконто3"
		;

	КонецЕсли;

	Если СчетаУчетаКНС.Количество() > 0 Тогда // дав. сырье

		Если Текст <> "" Тогда
			Текст = Текст + "
			|
			| ОБЪЕДИНИТЬ ВСЕ
			|
			|";
		КонецЕсли;

		Текст = Текст + "ВЫБРАТЬ
		|	Остатки.Субконто1 КАК Номенклатура,
		|	Остатки.Субконто1.Наименование КАК НоменклатураНаименование,
		|	Остатки.Счет КАК СчетУчета,
		|	&ПустаяПартия КАК Партия,
		|	&ПустойДокументРасчетов КАК ДокументРасчетов,
		|	Остатки.Субконто2 КАК Контрагент,
		|	СУММА(ЕСТЬNULL(Остатки.КоличествоОстатокДт, 0)) КАК Количество,
		|	СУММА(ЕСТЬNULL(Остатки.СуммаОстатокДт, 0)) КАК Сумма,
		|	СУММА(0) КАК СуммаНДС
		|" + ?(Текст = "", "ПОМЕСТИТЬ ПартииМПЗиНДС
		|", "") + "
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В (&СчетаУчетаКНС), &ВидыСубконтоКН, Организация = &Организация) КАК Остатки
		|
		|СГРУППИРОВАТЬ ПО
		|	Остатки.Счет,
		|	Остатки.Субконто1,
		|	Остатки.Субконто2"
		;

	КонецЕсли;
	
	Возврат Текст ;	

КонецФункции 


Функция ТекстЗапросаПоТорговойНаценкеАТТ(СтруктураПараметров, ДопПараметрыЗапроса, ВременныеТаблицыДляУничтожения)

	ТекстЗапроса = "";
	
	РозницаВЦенахПродажи = СтруктураПараметров.ПараметрыУчета.ВедетсяРозничнаяТорговля 
	И СтруктураПараметров.УчетнаяПолитикаДоПерехода.СпособОценкиТоваровВРознице = Перечисления.СпособыОценкиТоваровВРознице.ПоПродажнойСтоимости;
	СложныйУчетНДС       = СтруктураПараметров.УчетнаяПолитикаДоПерехода.СложныйУчетНДС;
	СпособОценкиМПЗ      = СтруктураПараметров.УчетнаяПолитикаДоПерехода.СпособОценкиМПЗ;
	
	Если РозницаВЦенахПродажи И НЕ СложныйУчетНДС Тогда
		
		// получим остатки торговой наценки
		
		ИмяПоляСубконто2 = "ЗНАЧЕНИЕ(Документ.ДокументРасчетовСКонтрагентом.ПустаяСсылка)";
		
		ВидыСубконтоТорговаяНаценка = Новый Массив;
		ВидыСубконтоТорговаяНаценка.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
		Если НЕ СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней Тогда
			ВидыСубконтоТорговаяНаценка.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
			ИмяПоляСубконто2 = "	ВЫБОР
								|		КОГДА ЕСТЬNULL(ХозрасчетныйОстатки.Субконто2, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
								|			ТОГДА ЗНАЧЕНИЕ(Документ.ДокументРасчетовСКонтрагентом.ПустаяСсылка)
								|		ИНАЧЕ ХозрасчетныйОстатки.Субконто2
								|	КОНЕЦ"
								;
		КонецЕсли; 
		
		ДопПараметрыЗапроса.Вставить("ВидыСубконтоТорговаяНаценка", ВидыСубконтоТорговаяНаценка);
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Субконто1 КАК Номенклатура,
		|	" + ИмяПоляСубконто2 + " КАК Партия,
		|	СУММА(ХозрасчетныйОстатки.СуммаОстатокКт) КАК ТорговаяНаценка
		|ПОМЕСТИТЬ ТорговаяНаценкаАТТ
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В (&СчетаУчетаТорговойНаценкиАТТ), &ВидыСубконтоТорговаяНаценка, Организация = &Организация) КАК ХозрасчетныйОстатки
		|
		|СГРУППИРОВАТЬ ПО
		|	ХозрасчетныйОстатки.Субконто1,
		|	"+ИмяПоляСубконто2+""
		;
		
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		
		// сформируем данные остатков номенклатуры по себестоимости для заполнения табличной части "ТоварыВРозничнойТорговлеАТТ"
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ПартииМПЗиНДС.Номенклатура,
		|	ПартииМПЗиНДС.Партия,
		|	СУММА(ПартииМПЗиНДС.Количество) КАК Количество,
		|	СУММА(ПартииМПЗиНДС.Сумма - ЕСТЬNULL(ТорговаяНаценкаАТТ.ТорговаяНаценка, 0)) КАК Сумма,
		|	СУММА(ЕСТЬNULL(ТорговаяНаценкаАТТ.ТорговаяНаценка, 0)) КАК ТорговаяНаценка
		|ПОМЕСТИТЬ ОстаткиТоваровИНаценкиАТТ
		|ИЗ
		|	ПартииМПЗиНДС КАК ПартииМПЗиНДС
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТорговаяНаценкаАТТ КАК ТорговаяНаценкаАТТ
		|		ПО ПартииМПЗиНДС.Номенклатура = ТорговаяНаценкаАТТ.Номенклатура
		|			И ПартииМПЗиНДС.Партия = ТорговаяНаценкаАТТ.Партия
		|ГДЕ
		|	ПартииМПЗиНДС.СчетУчета В(&СчетаУчетаТоваровАТТ)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПартииМПЗиНДС.Номенклатура,
		|	ПартииМПЗиНДС.Партия"
		;
		
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		
		ТекстЗапроса = ТекстЗапроса +
		"ВЫБРАТЬ
		|	ПартииМПЗиНДС.Номенклатура,
		|	ПартииМПЗиНДС.НоменклатураНаименование,
		|	ПартииМПЗиНДС.СчетУчета,
		|	ПартииМПЗиНДС.Партия,
		|	ПартииМПЗиНДС.ДокументРасчетов,
		|	ПартииМПЗиНДС.Контрагент,
		|	ПартииМПЗиНДС.Количество,
		|	ПартииМПЗиНДС.Сумма,
		|	ПартииМПЗиНДС.СуммаНДС
		|ПОМЕСТИТЬ ОстаткиМПЗБезАТТ
		|ИЗ
		|	ПартииМПЗиНДС КАК ПартииМПЗиНДС
		|ГДЕ
		|	НЕ ПартииМПЗиНДС.СчетУчета В (&СчетаУчетаТоваровАТТ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПартииМПЗиНДС.Номенклатура,
		|	ПартииМПЗиНДС.НоменклатураНаименование,
		|	ПартииМПЗиНДС.СчетУчета,
		|	ПартииМПЗиНДС.Партия,
		|	ПартииМПЗиНДС.ДокументРасчетов,
		|	ПартииМПЗиНДС.Контрагент,
		|	ПартииМПЗиНДС.Количество,
		|	ПартииМПЗиНДС.Сумма - ВЫБОР
		|		КОГДА НЕ ОстаткиТоваровИНаценкиАТТ.Сумма + ОстаткиТоваровИНаценкиАТТ.ТорговаяНаценка = 0
		|			ТОГДА ОстаткиТоваровИНаценкиАТТ.ТорговаяНаценка * ПартииМПЗиНДС.Сумма / (ОстаткиТоваровИНаценкиАТТ.Сумма + ОстаткиТоваровИНаценкиАТТ.ТорговаяНаценка)
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК Сумма,
		|	ПартииМПЗиНДС.СуммаНДС
		|ПОМЕСТИТЬ ОстаткиМПЗвАТТПоСебестоимости
		|ИЗ
		|	ПартииМПЗиНДС КАК ПартииМПЗиНДС
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиТоваровИНаценкиАТТ КАК ОстаткиТоваровИНаценкиАТТ
		|		ПО ПартииМПЗиНДС.Номенклатура = ОстаткиТоваровИНаценкиАТТ.Номенклатура
		|			И ПартииМПЗиНДС.Партия = ОстаткиТоваровИНаценкиАТТ.Партия
		|ГДЕ
		|	ПартииМПЗиНДС.СчетУчета В(&СчетаУчетаТоваровАТТ)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ПартииМПЗиНДС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОстаткиМПЗБезАТТ.Номенклатура,
		|	ОстаткиМПЗБезАТТ.НоменклатураНаименование,
		|	ОстаткиМПЗБезАТТ.СчетУчета,
		|	ОстаткиМПЗБезАТТ.Партия,
		|	ОстаткиМПЗБезАТТ.ДокументРасчетов,
		|	ОстаткиМПЗБезАТТ.Контрагент,
		|	ОстаткиМПЗБезАТТ.Количество,
		|	ОстаткиМПЗБезАТТ.Сумма,
		|	ОстаткиМПЗБезАТТ.СуммаНДС
		|ПОМЕСТИТЬ ПартииМПЗиНДС
		|ИЗ
		|	ОстаткиМПЗБезАТТ КАК ОстаткиМПЗБезАТТ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОстаткиМПЗвАТТПоСебестоимости.Номенклатура,
		|	ОстаткиМПЗвАТТПоСебестоимости.НоменклатураНаименование,
		|	ОстаткиМПЗвАТТПоСебестоимости.СчетУчета,
		|	ОстаткиМПЗвАТТПоСебестоимости.Партия,
		|	ОстаткиМПЗвАТТПоСебестоимости.ДокументРасчетов,
		|	ОстаткиМПЗвАТТПоСебестоимости.Контрагент,
		|	ОстаткиМПЗвАТТПоСебестоимости.Количество,
		|	ОстаткиМПЗвАТТПоСебестоимости.Сумма,
		|	ОстаткиМПЗвАТТПоСебестоимости.СуммаНДС
		|ИЗ
		|	ОстаткиМПЗвАТТПоСебестоимости КАК ОстаткиМПЗвАТТПоСебестоимости"
		;
		
		ТекстЗапроса = ТекстЗапроса + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		
		ВременныеТаблицыДляУничтожения.Добавить("ТорговаяНаценкаАТТ");
		ВременныеТаблицыДляУничтожения.Добавить("ОстаткиТоваровИНаценкиАТТ");
		ВременныеТаблицыДляУничтожения.Добавить("ОстаткиМПЗБезАТТ");
		ВременныеТаблицыДляУничтожения.Добавить("ОстаткиМПЗвАТТПоСебестоимости");	
		
	КонецЕсли; 
	
	Возврат ТекстЗапроса;

КонецФункции // ТекстЗапросаПоТорговойНаценкеАТТ()


Функция ТекстЗапросаПоОС(СтруктураПараметров, ДополнительныеПараметрыЗапроса, ВременныеТаблицыДляУничтожения)
	
	ТекстПолейПервоначальныеСведенияНУ = "";
	ТекстСоединенийПоРегистрамНУ = "";
	ТекстПолейДанныеОСНУ = "";
	ТекстПолейРеквизитыУСН = "";
	ВидУчетаДляУСН = "";
	
	// для юридических лиц и для ИП источники данных по ОС разные: для юрлиц - из НУ, для ИП - из БУ
	Если СтруктураПараметров.ЭтоИндивидуальныйПредприниматель Тогда
		
		ТекстПолейПервоначальныеСведенияНУ = "";
		ТекстСоединенийПоРегистрамНУ = "";
		ТекстПолейДанныеОСНУ = "";
		
		ТекстПолейРеквизитыУСН = "ДанныеОСиОстаточнаяСтоимость.ТекущаяСтоимостьБУ КАК ПервоначальнаяСтоимостьУСН,
		|	ВЫБОР
		|		КОГДА ДанныеОСиОстаточнаяСтоимость.ПорядокПогашенияСтоимостиБУ В (ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеАмортизации), ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзноса),ЗНАЧЕНИЕ(Перечисление.ПорядокПогашенияСтоимостиОС.НачислениеИзносаПоЕНАОФ))
		|				И ДанныеОСиОстаточнаяСтоимость.НачислятьАмортизациюБУ
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН.ВключитьВСоставАмортизируемогоИмущества)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН.НеВключатьВСоставРасходов)
		|	КОНЕЦ КАК ПорядокВключенияСтоимостиВСоставРасходовУСН,
		|	ДанныеОСиОстаточнаяСтоимость.СрокПолезногоИспользованияБУ КАК СрокПолезногоИспользованияУСН,
		|	ДанныеОСиОстаточнаяСтоимость.НакопленнаяАмортизацияБУ КАК СуммаНачисленнойАмортизацииУСН,"
		;
		
		ВидУчетаДляУСН = "БУ";
		
	Иначе
		ТекстПолейПервоначальныеСведенияНУ = "НачислениеАмортизацииОСНалоговыйУчетСрезПоследних.НачислятьАмортизацию КАК НачислятьАмортизациюНУ,
		|	ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.СрокПолезногоИспользования КАК СрокПолезногоИспользованияНУ,
		|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ПервоначальнаяСтоимостьНУ,
		|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ПорядокВключенияСтоимостиВСоставРасходов КАК ПорядокВключенияСтоимостиВСоставРасходовНУ,"
		;
		
		ТекстСоединенийПоРегистрамНУ = "ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(&ДатаОстатков, Организация = &Организация) КАК ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних
		|		ПО СостоянияОСОрганизацийСрезПоследних.ОсновноеСредство = ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСНалоговыйУчет.СрезПоследних(&ДатаОстатков, Организация = &Организация) КАК ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних
		|		ПО СостоянияОСОрганизацийСрезПоследних.ОсновноеСредство = ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизацииОСНалоговыйУчет.СрезПоследних(&ДатаОстатков, Организация = &Организация) КАК НачислениеАмортизацииОСНалоговыйУчетСрезПоследних
		|		ПО СостоянияОСОрганизацийСрезПоследних.ОсновноеСредство = НачислениеАмортизацииОСНалоговыйУчетСрезПоследних.ОсновноеСредство"
		;						 
		
		ТекстПолейДанныеОСНУ = "	ЕСТЬNULL(БалансоваяСтоимость.СуммаНУОстатокДт, 0) КАК ТекущаяСтоимостьНУ,
		|	ЕСТЬNULL(НакопленнаяАмортизация.СуммаНУОстатокКт, 0) КАК НакопленнаяАмортизацияНУ,
		|	ТаблицаДанныхОС.ПервоначальнаяСтоимостьНУ,
		|	ТаблицаДанныхОС.СрокПолезногоИспользованияНУ,
		|	ТаблицаДанныхОС.ПорядокВключенияСтоимостиВСоставРасходовНУ,
		|	ТаблицаДанныхОС.НачислятьАмортизациюНУ,"
		;
		
		ТекстПолейРеквизитыУСН = "ДанныеОСиОстаточнаяСтоимость.ТекущаяСтоимостьНУ КАК ПервоначальнаяСтоимостьУСН,
		|	ВЫБОР
		|		КОГДА ДанныеОСиОстаточнаяСтоимость.ПорядокВключенияСтоимостиВСоставРасходовНУ = ЗНАЧЕНИЕ(Перечисление.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации)
		|				И ДанныеОСиОстаточнаяСтоимость.НачислятьАмортизациюНУ
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН.ВключитьВСоставАмортизируемогоИмущества)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН.НеВключатьВСоставРасходов)
		|	КОНЕЦ КАК ПорядокВключенияСтоимостиВСоставРасходовУСН,
		|	ДанныеОСиОстаточнаяСтоимость.СрокПолезногоИспользованияНУ КАК СрокПолезногоИспользованияУСН,
		|	ДанныеОСиОстаточнаяСтоимость.НакопленнаяАмортизацияНУ КАК СуммаНачисленнойАмортизацииУСН,"
		;
		
		ВидУчетаДляУСН = "НУ";	
		
	КонецЕсли; 
	
	
	Текст = 
	"ВЫБРАТЬ
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер КАК ИнвентарныйНомерРегл,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимостьБУ,
	|	СостоянияОСОрганизацийСрезПоследних.ОсновноеСредство КАК ОсновноеСредство,
	|	СостоянияОСОрганизацийСрезПоследних.ДатаСостояния КАК ДатаПринятияКУчетуРегл,
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета КАК СчетУчетаБУ,
	|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетНачисленияАмортизации КАК СчетАмортизацииБУ,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРабот КАК ОбъемПродукцииРаботБУ,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования КАК СрокПолезногоИспользованияБУ,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокИспользованияДляВычисленияАмортизации КАК СрокИспользованияДляВычисленияАмортизацииБУ,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СтоимостьДляВычисленияАмортизации КАК СтоимостьДляВычисленияАмортизацииБУ,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации КАК ОбъемПродукцииРаботДляВычисленияАмортизацииБУ,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации КАК КоэффициентАмортизацииБУ,
	|	ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентУскорения КАК КоэффициентУскоренияБУ,
	|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.МОЛ КАК МОЛРегл,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации КАК СпособНачисленияАмортизацииБУ,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СпособПоступления КАК СпособПоступленияРегл,
	|	ВЫРАЗИТЬ(СобытияОСОрганизацийСрезПоследних.НазваниеДокумента КАК СТРОКА(100)) КАК НазваниеДокументаПринятияКУчетуРегл,
	|	СобытияОСОрганизацийСрезПоследних.НомерДокумента КАК НомерДокументаПринятияКУчетуРегл,
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПорядокПогашенияСтоимости КАК ПорядокПогашенияСтоимостиБУ,
	|	СобытияОСОрганизацийСрезПоследних.Событие КАК СостояниеПринятияКУчетуРегл,
	|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособыОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизации,
	|	НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию КАК НачислятьАмортизациюБУ,
	|	"+ ТекстПолейПервоначальныеСведенияНУ + "
	|	СостоянияОСОрганизацийСрезПоследних.ОсновноеСредство.Наименование
	|ПОМЕСТИТЬ ТаблицаДанныхОС
	|ИЗ
	|	РегистрСведений.СостоянияОСОрганизаций.СрезПоследних(
	|			&ДатаОстатков,
	|			Организация = &Организация
	|				И Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОС.ПринятоКУчету)) КАК СостоянияОСОрганизацийСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&ДатаОстатков, Организация = &Организация) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|		ПО СостоянияОСОрганизацийСрезПоследних.ОсновноеСредство = ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(&ДатаОстатков, Организация = &Организация) КАК СчетаБухгалтерскогоУчетаОССрезПоследних
	|		ПО СостоянияОСОрганизацийСрезПоследних.ОсновноеСредство = СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(&ДатаОстатков, Организация = &Организация) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ПО СостоянияОСОрганизацийСрезПоследних.ОсновноеСредство = ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(&ДатаОстатков, Организация = &Организация) КАК НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ПО СостоянияОСОрганизацийСрезПоследних.ОсновноеСредство = НачислениеАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(&ДатаОстатков, Организация = &Организация) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
	|		ПО СостоянияОСОрганизацийСрезПоследних.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СобытияОСОрганизаций.СрезПоследних(
	|				&ДатаОстатков,
	|				Организация = &Организация
	|					И Событие.ВидСобытияОС В (ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.ПринятиеКУчетуСВводомВЭксплуатацию), ЗНАЧЕНИЕ(Перечисление.ВидыСобытийОС.ПринятиеКУчету))) КАК СобытияОСОрганизацийСрезПоследних
	|		ПО СостоянияОСОрганизацийСрезПоследних.ОсновноеСредство = СобытияОСОрганизацийСрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(&ДатаОстатков, Организация = &Организация) КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
	|		ПО СостоянияОСОрганизацийСрезПоследних.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
	|		" + ТекстСоединенийПоРегистрамНУ + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанныхОС.ИнвентарныйНомерРегл,
	|	ТаблицаДанныхОС.ПервоначальнаяСтоимостьБУ,
	|	ТаблицаДанныхОС.ОсновноеСредство,
	|	ТаблицаДанныхОС.ОсновноеСредствоНаименование,
	|	ТаблицаДанныхОС.СчетУчетаБУ,
	|	ТаблицаДанныхОС.СчетАмортизацииБУ,
	|	ТаблицаДанныхОС.ОбъемПродукцииРаботБУ,
	|	ТаблицаДанныхОС.СрокПолезногоИспользованияБУ,
	|	ТаблицаДанныхОС.СрокИспользованияДляВычисленияАмортизацииБУ,
	|	ТаблицаДанныхОС.СтоимостьДляВычисленияАмортизацииБУ,
	|	ТаблицаДанныхОС.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ,
	|	ТаблицаДанныхОС.КоэффициентАмортизацииБУ,
	|	ТаблицаДанныхОС.КоэффициентУскоренияБУ,
	|	ТаблицаДанныхОС.МОЛРегл,
	|	ТаблицаДанныхОС.СпособНачисленияАмортизацииБУ,
	|	ТаблицаДанныхОС.ДатаПринятияКУчетуРегл,
	|	ТаблицаДанныхОС.СпособПоступленияРегл,
	|	ТаблицаДанныхОС.НазваниеДокументаПринятияКУчетуРегл,
	|	ТаблицаДанныхОС.НомерДокументаПринятияКУчетуРегл,
	|	ТаблицаДанныхОС.ПорядокПогашенияСтоимостиБУ,
	|	ТаблицаДанныхОС.СостояниеПринятияКУчетуРегл,
	|	ТаблицаДанныхОС.СпособОтраженияРасходовПоАмортизации,
	|	ЕСТЬNULL(БалансоваяСтоимость.СуммаОстатокДт, 0) КАК ТекущаяСтоимостьБУ,
	|	ЕСТЬNULL(НакопленнаяАмортизация.СуммаОстатокКт, 0) КАК НакопленнаяАмортизацияБУ,
	|	" + ТекстПолейДанныеОСНУ + "
	|	ТаблицаДанныхОС.НачислятьАмортизациюБУ
	|ПОМЕСТИТЬ ДанныеОСиОстаточнаяСтоимость
	|ИЗ
	|	ТаблицаДанныхОС КАК ТаблицаДанныхОС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, , ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), Организация = &Организация) КАК БалансоваяСтоимость
	|		ПО ТаблицаДанныхОС.ОсновноеСредство = БалансоваяСтоимость.Субконто1
	|			И ТаблицаДанныхОС.СчетУчетаБУ = БалансоваяСтоимость.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, , ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства), Организация = &Организация) КАК НакопленнаяАмортизация
	|		ПО ТаблицаДанныхОС.ОсновноеСредство = НакопленнаяАмортизация.Субконто1
	|			И ТаблицаДанныхОС.СчетАмортизацииБУ = НакопленнаяАмортизация.Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеОСиОстаточнаяСтоимость.ОсновноеСредство,
	|	ДанныеОСиОстаточнаяСтоимость.ОсновноеСредствоНаименование,
	|	ДанныеОСиОстаточнаяСтоимость.СчетУчетаБУ,
	|	ДанныеОСиОстаточнаяСтоимость.СчетАмортизацииБУ,
	|	ДанныеОСиОстаточнаяСтоимость.ИнвентарныйНомерРегл,
	|	ДанныеОСиОстаточнаяСтоимость.МОЛРегл,
	|	ДанныеОСиОстаточнаяСтоимость.СпособПоступленияРегл,
	|	ДанныеОСиОстаточнаяСтоимость.ДатаПринятияКУчетуРегл,
	|	ДанныеОСиОстаточнаяСтоимость.НазваниеДокументаПринятияКУчетуРегл,
	|	ДанныеОСиОстаточнаяСтоимость.НомерДокументаПринятияКУчетуРегл,
	|	ДанныеОСиОстаточнаяСтоимость.СостояниеПринятияКУчетуРегл,
	|	ДанныеОСиОстаточнаяСтоимость.ПервоначальнаяСтоимостьБУ,
	|	ДанныеОСиОстаточнаяСтоимость.СтоимостьДляВычисленияАмортизацииБУ,
	|	ДанныеОСиОстаточнаяСтоимость.НачислятьАмортизациюБУ,
	|	ДанныеОСиОстаточнаяСтоимость.СрокПолезногоИспользованияБУ,
	|	ДанныеОСиОстаточнаяСтоимость.СпособНачисленияАмортизацииБУ,
	|	ДанныеОСиОстаточнаяСтоимость.СрокИспользованияДляВычисленияАмортизацииБУ,
	|	ДанныеОСиОстаточнаяСтоимость.ОбъемПродукцииРаботБУ,
	|	ДанныеОСиОстаточнаяСтоимость.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ,
	|	ДанныеОСиОстаточнаяСтоимость.КоэффициентАмортизацииБУ,
	|	ДанныеОСиОстаточнаяСтоимость.КоэффициентУскоренияБУ,
	|	ДанныеОСиОстаточнаяСтоимость.ПорядокПогашенияСтоимостиБУ,
	|	ДанныеОСиОстаточнаяСтоимость.СпособОтраженияРасходовПоАмортизации,
	|	ДанныеОСиОстаточнаяСтоимость.ТекущаяСтоимостьБУ,
	|	ДанныеОСиОстаточнаяСтоимость.НакопленнаяАмортизацияБУ,
	|	" + ТекстПолейРеквизитыУСН + "
	|	ДанныеОСиОстаточнаяСтоимость.ДатаПринятияКУчетуРегл КАК ДатаПриобретенияУСН
	|ПОМЕСТИТЬ ОстаткиОС
	|ИЗ
	|	ДанныеОСиОстаточнаяСтоимость КАК ДанныеОСиОстаточнаяСтоимость
	|ГДЕ
	|	ДанныеОСиОстаточнаяСтоимость.ТекущаяСтоимость" + ВидУчетаДляУСН + " - ДанныеОСиОстаточнаяСтоимость.НакопленнаяАмортизация" + ВидУчетаДляУСН + " > 0
	|	И ДанныеОСиОстаточнаяСтоимость.СрокПолезногоИспользования" + ВидУчетаДляУСН + " > 0"
	;
	
	ВременныеТаблицыДляУничтожения.Добавить("ТаблицаДанныхОС");
	ВременныеТаблицыДляУничтожения.Добавить("ДанныеОСиОстаточнаяСтоимость");
	
	Возврат Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции // ТекстЗапросаПоОС()


Функция ТекстЗапросаПоНМА(СтруктураПараметров, ДополнительныеПараметрыЗапроса, ВременныеТаблицыДляУничтожения)
	
	ТекстПолейПервоначальныеСведенияНУ = "";
	ТекстСоединенийПоРегистрамНУ = "";
	ТекстПолейДанныеНУ = "";
	ВидУчетаДляУСН = "";
	
	// для юридических лиц и для ИП источники данных по НМА разные: для юрлиц - из НУ, для ИП - из БУ
	Если СтруктураПараметров.ЭтоИндивидуальныйПредприниматель Тогда
		
		ТекстПолейПервоначальныеСведенияНУ = "";
		ТекстСоединенийПоРегистрамНУ = "";
		ТекстПолейДанныеНУ = "";
		ВидУчетаДляУСН = "БУ";
		
	Иначе
		
		ТекстПолейПервоначальныеСведенияНУ = "ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.ПервоначальнаяСтоимостьНУ,
		|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НачислятьАмортизацию КАК НачислятьАмортизациюНУ,
		|	ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.СрокПолезногоИспользования КАК СрокПолезногоИспользованияНУ,"
		;
		
		ТекстСоединенийПоРегистрамНУ = "ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМАНалоговыйУчет.СрезПоследних(&ДатаОстатков, Организация = &Организация) КАК ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних
		|		ПО СостоянияНМАОрганизацийСрезПоследних.НематериальныйАктив = ПервоначальныеСведенияНМАНалоговыйУчетСрезПоследних.НематериальныйАктив"
		;
		
		ТекстПолейДанныеНУ = "ЕСТЬNULL(ОстаткиАмортизацияНМА.СуммаНУОстатокКт, 0) КАК НакопленнаяАмортизацияНУ,
		|	ТаблицаДанныхНМА.ПервоначальнаяСтоимостьНУ,
		|	ТаблицаДанныхНМА.СрокПолезногоИспользованияНУ,
		|	ТаблицаДанныхНМА.НачислятьАмортизациюНУ,"
		;
		
		ВидУчетаДляУСН = "НУ";
		
	КонецЕсли;
	
	Текст = 
	"ВЫБРАТЬ
	|	СостоянияНМАОрганизацийСрезПоследних.НематериальныйАктив,
	|	СостоянияНМАОрганизацийСрезПоследних.НематериальныйАктив.Наименование КАК НематериальныйАктивНаименование,
	|	СостоянияНМАОрганизацийСрезПоследних.НематериальныйАктив.ВидОбъектаУчета КАК ВидОбъектаУчета,
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетУчета КАК СчетУчетаБУ,
	|	СчетаБухгалтерскогоУчетаНМАСрезПоследних.СчетНачисленияАмортизации КАК СчетНачисленияАмортизацииБУ,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.ПервоначальнаяСтоимость КАК ПервоначальнаяСтоимостьБУ,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СпособПоступления,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НачислятьАмортизацию КАК НачислятьАмортизациюБУ,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации КАК СпособНачисленияАмортизацииБУ,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования КАК СрокПолезногоИспользованияБУ,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.Коэффициент КАК КоэффициентБУ,
	|	СостоянияНМАОрганизацийСрезПоследних.Период КАК ДатаПринятияКУчетуРегл,
	|	СостоянияНМАОрганизацийСрезПоследних.Период КАК ДатаПриобретения,
	|	" + ТекстПолейПервоначальныеСведенияНУ + "
	|	СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.СпособОтраженияРасходов
	|ПОМЕСТИТЬ ТаблицаДанныхНМА
	|ИЗ
	|	РегистрСведений.СостоянияНМАОрганизаций.СрезПоследних(
	|			&ДатаОстатков,
	|			Организация = &Организация
	|				И Состояние = ЗНАЧЕНИЕ(Перечисление.ВидыСостоянийНМА.ПринятКУчету)) КАК СостоянияНМАОрганизацийСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(&ДатаОстатков, Организация = &Организация) КАК СчетаБухгалтерскогоУчетаНМАСрезПоследних
	|		ПО СостоянияНМАОрганизацийСрезПоследних.НематериальныйАктив = СчетаБухгалтерскогоУчетаНМАСрезПоследних.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(&ДатаОстатков, Организация = &Организация) КАК ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних
	|		ПО СостоянияНМАОрганизацийСрезПоследних.НематериальныйАктив = ПервоначальныеСведенияНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.СрезПоследних(&ДатаОстатков, Организация = &Организация) КАК СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних
	|		ПО СостоянияНМАОрганизацийСрезПоследних.НематериальныйАктив = СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчетСрезПоследних.НематериальныйАктив
	|		" + ТекстСоединенийПоРегистрамНУ + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДанныхНМА.НематериальныйАктив,
	|	ТаблицаДанныхНМА.НематериальныйАктивНаименование,
	|	ТаблицаДанныхНМА.ВидОбъектаУчета,
	|	ТаблицаДанныхНМА.СчетУчетаБУ,
	|	ТаблицаДанныхНМА.СчетНачисленияАмортизацииБУ,
	|	ТаблицаДанныхНМА.ПервоначальнаяСтоимостьБУ,
	|	ТаблицаДанныхНМА.СпособПоступления,
	|	ТаблицаДанныхНМА.НачислятьАмортизациюБУ,
	|	ТаблицаДанныхНМА.СпособНачисленияАмортизацииБУ,
	|	ТаблицаДанныхНМА.СрокПолезногоИспользованияБУ,
	|	ТаблицаДанныхНМА.ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ТаблицаДанныхНМА.КоэффициентБУ,
	|	ТаблицаДанныхНМА.СпособОтраженияРасходов,
	|	ЕСТЬNULL(ОстаткиСтоимостьНМА.СуммаОстатокДт, 0) КАК ТекущаяСтоимостьБУ,
	|	ЕСТЬNULL(ОстаткиАмортизацияНМА.СуммаОстатокКт, 0) КАК НакопленнаяАмортизацияБУ,
	|	" + ТекстПолейДанныеНУ + "
	|	ТаблицаДанныхНМА.ДатаПринятияКУчетуРегл,
	|	ТаблицаДанныхНМА.ДатаПриобретения
	|ПОМЕСТИТЬ ДанныеНМАОстаточнаяСтоимость
	|ИЗ
	|	ТаблицаДанныхНМА КАК ТаблицаДанныхНМА
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, , ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.НематериальныеАктивы), Организация = &Организация) КАК ОстаткиСтоимостьНМА
	|		ПО ТаблицаДанныхНМА.НематериальныйАктив = ОстаткиСтоимостьНМА.Субконто1
	|			И ТаблицаДанныхНМА.СчетУчетаБУ = ОстаткиСтоимостьНМА.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки КАК ОстаткиАмортизацияНМА
	|		ПО ТаблицаДанныхНМА.НематериальныйАктив = ОстаткиАмортизацияНМА.Субконто1
	|			И ТаблицаДанныхНМА.СчетНачисленияАмортизацииБУ = ОстаткиАмортизацияНМА.Счет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДанныеНМАОстаточнаяСтоимость.НематериальныйАктив,
	|	ДанныеНМАОстаточнаяСтоимость.НематериальныйАктивНаименование,
	|	ДанныеНМАОстаточнаяСтоимость.ВидОбъектаУчета,
	|	ДанныеНМАОстаточнаяСтоимость.СчетУчетаБУ,
	|	ДанныеНМАОстаточнаяСтоимость.СчетНачисленияАмортизацииБУ,
	|	ДанныеНМАОстаточнаяСтоимость.ПервоначальнаяСтоимостьБУ,
	|	ДанныеНМАОстаточнаяСтоимость.СпособПоступления,
	|	ДанныеНМАОстаточнаяСтоимость.НачислятьАмортизациюБУ,
	|	ДанныеНМАОстаточнаяСтоимость.СпособНачисленияАмортизацииБУ,
	|	ДанныеНМАОстаточнаяСтоимость.СрокПолезногоИспользованияБУ,
	|	ДанныеНМАОстаточнаяСтоимость.ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ДанныеНМАОстаточнаяСтоимость.КоэффициентБУ,
	|	ДанныеНМАОстаточнаяСтоимость.ДатаПринятияКУчетуРегл,
	|	ДанныеНМАОстаточнаяСтоимость.ДатаПриобретения,
	|	ДанныеНМАОстаточнаяСтоимость.СпособОтраженияРасходов,
	|	ДанныеНМАОстаточнаяСтоимость.ТекущаяСтоимостьБУ,
	|	ДанныеНМАОстаточнаяСтоимость.НакопленнаяАмортизацияБУ,
	|	ДанныеНМАОстаточнаяСтоимость.ПервоначальнаяСтоимость" + ВидУчетаДляУСН + " КАК ПервоначальнаяСтоимостьУСН,
	|	ДанныеНМАОстаточнаяСтоимость.НакопленнаяАмортизация" + ВидУчетаДляУСН + " КАК НакопленнаяАмортизацияУСН,
	|	ДанныеНМАОстаточнаяСтоимость.СрокПолезногоИспользования" + ВидУчетаДляУСН + " КАК СрокПолезногоИспользованияУСН,
	|	ЗНАЧЕНИЕ(Перечисление.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН.ВключитьВСоставАмортизируемогоИмущества) КАК ПорядокВключенияСтоимостиВСоставРасходовУСН
	|ПОМЕСТИТЬ ОстаткиНМА
	|ИЗ
	|	ДанныеНМАОстаточнаяСтоимость КАК ДанныеНМАОстаточнаяСтоимость
	|ГДЕ
	|	ДанныеНМАОстаточнаяСтоимость.ПервоначальнаяСтоимость" + ВидУчетаДляУСН + " - ДанныеНМАОстаточнаяСтоимость.НакопленнаяАмортизация" + ВидУчетаДляУСН + " > 0
	|	И ДанныеНМАОстаточнаяСтоимость.НачислятьАмортизацию" + ВидУчетаДляУСН
	;

	ВременныеТаблицыДляУничтожения.Добавить("ТаблицаДанныхНМА");
	ВременныеТаблицыДляУничтожения.Добавить("ДанныеНМАОстаточнаяСтоимость");
	
	Возврат Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции // ТекстЗапросаПоНМА()


Функция ТекстЗапросаПоНалогамИСборам(СтруктураПараметров, ДополнительныеПараметрыЗапроса, ВременныеТаблицыДляУничтожения)
	
	Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК СчетУчета,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Субконто1, НЕОПРЕДЕЛЕНО) КАК ВидПлатежаВБюджет,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Субконто2 ССЫЛКА Перечисление.УровниБюджетов
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА ХозрасчетныйОстатки.Субконто3 ССЫЛКА Перечисление.УровниБюджетов
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК УровеньБюджета,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Субконто2 ССЫЛКА Справочник.РегистрацииВНалоговомОргане
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА ХозрасчетныйОстатки.Субконто3 ССЫЛКА Справочник.РегистрацииВНалоговомОргане
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК РегистрацияВНалоговомОргане,
	|	ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.НеПринимаются) КАК ОтражениеВУСН,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.СуммаОстаток >= 0
	|				ТОГДА ХозрасчетныйОстатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Сумма,
	|	СУММА(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.СуммаОстаток < 0
	|				ТОГДА -ХозрасчетныйОстатки.СуммаОстаток
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК СуммаКт
	|ПОМЕСТИТЬ ОстаткиНалогиИСборы
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В (&СчетаУчетаНалогов), , Организация = &Организация) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Субконто2 ССЫЛКА Справочник.РегистрацииВНалоговомОргане
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА ХозрасчетныйОстатки.Субконто3 ССЫЛКА Справочник.РегистрацииВНалоговомОргане
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ХозрасчетныйОстатки.Счет,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Субконто2 ССЫЛКА Перечисление.УровниБюджетов
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		КОГДА ХозрасчетныйОстатки.Субконто3 ССЫЛКА Перечисление.УровниБюджетов
	|			ТОГДА ХозрасчетныйОстатки.Субконто3
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Субконто1, НЕОПРЕДЕЛЕНО)"
	;

	Возврат Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции


Функция ТекстЗапросаПоРасчетамСПерсоналом(СтруктураПараметров, ДополнительныеПараметрыЗапроса, ВременныеТаблицыДляУничтожения)
	
	ВедетсяУчетЗарплатыВоВнешнейПрограмме = СтруктураПараметров.ПараметрыУчета.УчетЗарплатыИКадровВоВнешнейПрограмме;
	
	Текст = "";
	Если НЕ ВедетсяУчетЗарплатыВоВнешнейПрограмме Тогда
		
		Текст = 
		"ВЫБРАТЬ
		|	ЗарплатаКВыплатеОстатки.Сотрудник,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда) КАК СчетУчета,
		|	ЗарплатаКВыплатеОстатки.ПериодВзаиморасчетов КАК ПериодРегистрации,
		|	ВЫБОР
		|		КОГДА ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.НомерЛицевогоСчета ЕСТЬ NULL 
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезКассу)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыВыплатыЗарплаты.ЧерезБанк)
		|	КОНЕЦ КАК СпособВыплаты,
		|	ЗарплатаКВыплатеОстатки.СуммаКВыплатеОстаток КАК Сумма
		|ПОМЕСТИТЬ НеВыплаченоБезВедомостей
		|ИЗ
		|	РегистрНакопления.ЗарплатаКВыплате.Остатки(&ДатаОстатков, Организация = &Организация) КАК ЗарплатаКВыплатеОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам КАК ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам
		|		ПО ЗарплатаКВыплатеОстатки.Организация = ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.Организация
		|			И ЗарплатаКВыплатеОстатки.ФизическоеЛицо = ЛицевыеСчетаСотрудниковПоЗарплатнымПроектам.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ТекущиеКадровыеДанныеСотрудников.Сотрудник, ВзаиморасчетыСДепонентамиОстатки.ФизическоеЛицо) КАК Сотрудник,
		|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыПоДепонированнымСуммам) КАК СчетУчета,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ПериодРегистрации,
		|	НЕОПРЕДЕЛЕНО КАК СпособВыплаты,
		|	ВзаиморасчетыСДепонентамиОстатки.СуммаОстаток КАК Сумма
		|ПОМЕСТИТЬ ДепонированныеСуммы
		|ИЗ
		|	РегистрНакопления.ВзаиморасчетыСДепонентами.Остатки(&ДатаОстатков, Организация = &Организация) КАК ВзаиморасчетыСДепонентамиОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ТекущиеКадровыеДанныеСотрудников КАК ТекущиеКадровыеДанныеСотрудников
		|		ПО ВзаиморасчетыСДепонентамиОстатки.Организация = ТекущиеКадровыеДанныеСотрудников.ТекущаяОрганизация
		|			И ВзаиморасчетыСДепонентамиОстатки.ФизическоеЛицо = ТекущиеКадровыеДанныеСотрудников.ФизическоеЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПоОстаткам.Сотрудник КАК Сотрудник,
		|	ДанныеПоОстаткам.СчетУчета КАК СчетУчета,
		|	ДанныеПоОстаткам.ПериодРегистрации КАК ПериодРегистрации,
		|	ДанныеПоОстаткам.СпособВыплаты КАК СпособВыплаты,
		|	ДанныеПоОстаткам.Сумма КАК Сумма,
		|	ВЫБОР
		|		КОГДА ДанныеПоОстаткам.СчетУчета = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда)
		|				И ДанныеПоОстаткам.Сумма < 0
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.Принимаются)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.НеПринимаются)
		|	КОНЕЦ КАК ОтражениеВУСН
		|ПОМЕСТИТЬ ОстаткиРасчетовСПерсоналом
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВложенныйЗапросОбъединениеТаблиц.Сотрудник КАК Сотрудник,
		|		ВложенныйЗапросОбъединениеТаблиц.ПериодРегистрации КАК ПериодРегистрации,
		|		СУММА(ВложенныйЗапросОбъединениеТаблиц.Сумма) КАК Сумма,
		|		ВложенныйЗапросОбъединениеТаблиц.СпособВыплаты КАК СпособВыплаты,
		|		ВложенныйЗапросОбъединениеТаблиц.СчетУчета КАК СчетУчета
		|	ИЗ
		|		(ВЫБРАТЬ
		|			НеВыплаченоБезВедомостей.Сотрудник КАК Сотрудник,
		|			НеВыплаченоБезВедомостей.СчетУчета КАК СчетУчета,
		|			НеВыплаченоБезВедомостей.ПериодРегистрации КАК ПериодРегистрации,
		|			НеВыплаченоБезВедомостей.СпособВыплаты КАК СпособВыплаты,
		|			НеВыплаченоБезВедомостей.Сумма КАК Сумма
		|		ИЗ
		|			НеВыплаченоБезВедомостей КАК НеВыплаченоБезВедомостей
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ДепонированныеСуммы.Сотрудник,
		|			ДепонированныеСуммы.СчетУчета,
		|			ДепонированныеСуммы.ПериодРегистрации,
		|			ДепонированныеСуммы.СпособВыплаты,
		|			ДепонированныеСуммы.Сумма
		|		ИЗ
		|			ДепонированныеСуммы КАК ДепонированныеСуммы) КАК ВложенныйЗапросОбъединениеТаблиц
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВложенныйЗапросОбъединениеТаблиц.СчетУчета,
		|		ВложенныйЗапросОбъединениеТаблиц.ПериодРегистрации,
		|		ВложенныйЗапросОбъединениеТаблиц.СпособВыплаты,
		|		ВложенныйЗапросОбъединениеТаблиц.Сотрудник) КАК ДанныеПоОстаткам"
		;
		
		ВременныеТаблицыДляУничтожения.Добавить("НеВыплаченоБезВедомостей");
		ВременныеТаблицыДляУничтожения.Добавить("ДепонированныеСуммы");
		
	Иначе
		Текст = 
		"ВЫБРАТЬ
		|	ЛОЖЬ КАК Сотрудник,
		|	ЛОЖЬ КАК СчетУчета,
		|	ЛОЖЬ КАК ПериодРегистрации,
		|	ЛОЖЬ КАК СпособВыплаты,
		|	ЛОЖЬ КАК Сумма,
		|	ЛОЖЬ КАК ОтражениеВУСН
		|ПОМЕСТИТЬ ОстаткиРасчетовСПерсоналом
		|ГДЕ
		|	ЛОЖЬ"
		;
	КонецЕсли;
	
	Возврат Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
		
КонецФункции


Функция ТекстЗапросаПоРасчетамСПодотчетниками(СтруктураПараметров, ДополнительныеПараметрыЗапроса, ВременныеТаблицыДляУничтожения)
	
	Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК СчетУчета,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Субконто1, НЕОПРЕДЕЛЕНО) КАК РаботникОрганизации,
	|	НЕОПРЕДЕЛЕНО КАК РасчетныйДокумент,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.СуммаОстаток > 0
	|			ТОГДА ХозрасчетныйОстатки.СуммаОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.СуммаОстаток < 0
	|			ТОГДА -ХозрасчетныйОстатки.СуммаОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаКт,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Валюта, &ВалютаРеглУчета) КАК Валюта,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток ЕСТЬ NULL 
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток < 0
	|					ТОГДА -ХозрасчетныйОстатки.ВалютнаяСуммаОстаток
	|				ИНАЧЕ ХозрасчетныйОстатки.ВалютнаяСуммаОстаток
	|			КОНЕЦ
	|	КОНЕЦ КАК ВалютнаяСумма
	|ПОМЕСТИТЬ ОстаткиПоПодотчетникам
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В (&СчетаУчетаРасчетовСПодотчетниками), , Организация = &Организация) КАК ХозрасчетныйОстатки"
	;

	Возврат Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции


Функция ТекстЗапросаПоРБП(СтруктураПараметров, ДополнительныеПараметрыЗапроса, ВременныеТаблицыДляУничтожения)
	
	Текст = 
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК СчетУчета,
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.Субконто3,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Субконто1 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА ХозрасчетныйОстатки.Субконто2 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.РасходыБудущихПериодов.ПустаяСсылка)
	|	КОНЕЦ КАК ЭлементРБП,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Субконто1 ССЫЛКА Справочник.Контрагенты
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК Контрагент,
	|	СУММА(ХозрасчетныйОстатки.СуммаНУОстаток) КАК Сумма,
	|	СУММА(0) КАК СуммаНДС
	|ПОМЕСТИТЬ НачальныеДанныеРБП
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&ДатаОстатков, Счет В (&СчетаУчетаРБП), , Организация = &Организация) КАК ХозрасчетныйОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Субконто1 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ХозрасчетныйОстатки.Субконто1
	|		КОГДА ХозрасчетныйОстатки.Субконто2 ССЫЛКА Справочник.РасходыБудущихПериодов
	|			ТОГДА ХозрасчетныйОстатки.Субконто2
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.РасходыБудущихПериодов.ПустаяСсылка)
	|	КОНЕЦ,
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.Субконто3"
	;
	
	Возврат Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции


// Процедуры распределения остатков расходов по оплатам


Процедура РаспределитьОстаткиМПЗПоДокументамРасчетов(СтруктураПараметров, МенеджерВТ)
	
	УчетнаяПолитикаДоПерехода = СтруктураПараметров.УчетнаяПолитикаДоПерехода;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	УстановитьПараметрыЗапроса(Запрос, СтруктураПараметров.ОбщиеПараметрыЗапроса);
	
	Если НЕ УчетнаяПолитикаДоПерехода.СложныйУчетНДС И УчетнаяПолитикаДоПерехода.СпособОценкиМПЗ = Перечисления.СпособыОценки.ПоСредней Тогда
		
		// Распределение остатков МПЗ по неоплаченным расчетным документам производим в 4 этапа:
		// Сначала получим таблицы МПЗ (что распределяем) и остатков взаиморасчетов (на что распределяем)
		// Затем распределим по документам расчетов остатки МПЗ на складах (считаем, что в первую очередь не оплачены они)
		// Потом распределим по оставшимся "нераспределенным" взаиморасчетам остатки МПЗ переданных
		// И поместим полученные результаты в новые временные таблицы партий и взаиморасчетов
		
		
		// 1. Получим таблицы МПЗ на складах, МПЗ отгруженных (переданных) и таблицы взаиморасчетов
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПартииМПЗиНДС.Номенклатура,
		|	ПартииМПЗиНДС.НоменклатураНаименование КАК НоменклатураНаименование,
		|	ПартииМПЗиНДС.СчетУчета КАК СчетУчета,
		|	ПартииМПЗиНДС.Партия,
		|	ПартииМПЗиНДС.ДокументРасчетов КАК ДокументРасчетов,
		|	СУММА(ПартииМПЗиНДС.Количество) КАК Количество,
		|	СУММА(ПартииМПЗиНДС.Сумма) КАК Сумма,
		|	СУММА(ПартииМПЗиНДС.СуммаНДС) КАК СуммаНДС
		|ИЗ
		|	ПартииМПЗиНДС КАК ПартииМПЗиНДС
		|ГДЕ
		|	ПартииМПЗиНДС.СчетУчета В(&СчетаУчетаМПЗ_НаСкладах)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПартииМПЗиНДС.Номенклатура,
		|	ПартииМПЗиНДС.СчетУчета,
		|	ПартииМПЗиНДС.Партия,
		|	ПартииМПЗиНДС.ДокументРасчетов,
		|	ПартииМПЗиНДС.НоменклатураНаименование
		|
		|УПОРЯДОЧИТЬ ПО
		|	НоменклатураНаименование,
		|	СчетУчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПартииМПЗиНДС.Номенклатура,
		|	ПартииМПЗиНДС.НоменклатураНаименование КАК НоменклатураНаименование,
		|	ПартииМПЗиНДС.СчетУчета КАК СчетУчета,
		|	ПартииМПЗиНДС.Партия,
		|	ПартииМПЗиНДС.ДокументРасчетов КАК ДокументРасчетов,
		|	СУММА(ПартииМПЗиНДС.Количество) КАК Количество,
		|	СУММА(ПартииМПЗиНДС.Сумма) КАК Сумма,
		|	СУММА(ПартииМПЗиНДС.СуммаНДС) КАК СуммаНДС
		|ИЗ
		|	ПартииМПЗиНДС КАК ПартииМПЗиНДС
		|ГДЕ
		|	ПартииМПЗиНДС.СчетУчета В(&СчетаУчетаМПЗ_Переданные)
		|
		|СГРУППИРОВАТЬ ПО
		|	ПартииМПЗиНДС.Номенклатура,
		|	ПартииМПЗиНДС.СчетУчета,
		|	ПартииМПЗиНДС.Партия,
		|	ПартииМПЗиНДС.ДокументРасчетов,
		|	ПартииМПЗиНДС.НоменклатураНаименование
		|
		|УПОРЯДОЧИТЬ ПО
		|	НоменклатураНаименование,
		|	СчетУчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВзаиморасчетыЗаМПЗ.ДокументРасчетов КАК ДокументРасчетов,
		|	ВзаиморасчетыЗаМПЗ.ДокументРасчетовДата КАК ДокументРасчетовДата,
		|	ВзаиморасчетыЗаМПЗ.Валюта,
		|	ВзаиморасчетыЗаМПЗ.Номенклатура,
		|	ВзаиморасчетыЗаМПЗ.СчетУчета КАК СчетУчета,
		|	ВзаиморасчетыЗаМПЗ.КоэффЗадолженности КАК КоэффЗадолженности,
		|	ВзаиморасчетыЗаМПЗ.Количество,
		|	ВзаиморасчетыЗаМПЗ.Сумма,
		|	ВзаиморасчетыЗаМПЗ.ВалютнаяСумма,
		|	ВзаиморасчетыЗаМПЗ.СуммаНДС,
		|	ВзаиморасчетыЗаМПЗ.ВалютнаяСуммаНДС,
		|	ВзаиморасчетыЗаМПЗ.НоменклатураНаименование КАК НоменклатураНаименование
		|ИЗ
		|	ВзаиморасчетыЗаМПЗ КАК ВзаиморасчетыЗаМПЗ
		|
		|УПОРЯДОЧИТЬ ПО
		|	НоменклатураНаименование,
		|	ДокументРасчетовДата УБЫВ,
		|	ДокументРасчетов УБЫВ"
		;
		
		Результат = Запрос.ВыполнитьПакет();
		
		ЗапасыНаСкладах = Результат[0].Выгрузить();
		ЗапасыОтгруженные = Результат[1].Выгрузить();
		ВзаиморасчетыПоНоменклатуре = Результат[2].Выгрузить();
		
		ВзаиморасчетыПоНоменклатуре.Индексы.Добавить("Номенклатура");
		
		// 2. Распределим остатки МПЗ на складах по взаиморасчетам
		
		// Таблица для распределенных партий
		ЗапасыНаСкладах_ПоПартиям = ЗапасыНаСкладах.СкопироватьКолонки(); 
		ЗапасыНаСкладах_ПоПартиям.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		ЗапасыНаСкладах_ПоПартиям.Колонки.Добавить("ВалютнаяСумма", ОбщегоНазначения.ОписаниеТипаЧисло(17,2));
		ЗапасыНаСкладах_ПоПартиям.Колонки.Добавить("ВалютнаяСуммаНДС", ОбщегоНазначения.ОписаниеТипаЧисло(17,2));
		ЗапасыНаСкладах_ПоПартиям.Колонки.Добавить("СтатусыОплатыРасходовУСН", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыРасходовУСН"));
		// типизация колонок для корректного заполнения и передачи в ВТ
		ЗапасыНаСкладах_ПоПартиям.Колонки.Удалить("Партия");
		ЗапасыНаСкладах_ПоПартиям.Колонки.Удалить("ДокументРасчетов");
		ЗапасыНаСкладах_ПоПартиям.Колонки.Добавить("Партия", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами.ТипЗначения);
		ЗапасыНаСкладах_ПоПартиям.Колонки.Добавить("ДокументРасчетов", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами.ТипЗначения);
		
		Для каждого СтрокаПоНоменклатуре Из ЗапасыНаСкладах Цикл				
			
			// Строки полностью распределенных взаиморасчетов, для удаления перед распределением по следующей номенклатуре
			СтрокиРаспределенныхВзаиморасчетов = Новый Массив;
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Номенклатура", СтрокаПоНоменклатуре.Номенклатура);
			
			СтрокиВзаиморасчетов = ВзаиморасчетыПоНоменклатуре.НайтиСтроки(СтруктураОтбора);
			
			КоличествоРаспределить = СтрокаПоНоменклатуре.Количество;
			СуммаРаспределить      = СтрокаПоНоменклатуре.Сумма;
			СуммаНДСРаспределить   = СтрокаПоНоменклатуре.СуммаНДС;
			
			Для каждого СтрокаВзаиморасчетов Из СтрокиВзаиморасчетов Цикл
				
				Если КоличествоРаспределить + СуммаРаспределить + СуммаНДСРаспределить = 0 Тогда
					Прервать;							
				КонецЕсли; 
				
				КоличествоРаспределено = Мин(СтрокаВзаиморасчетов.Количество, КоличествоРаспределить);
				СуммаРаспределена = Мин(СтрокаВзаиморасчетов.Сумма, СуммаРаспределить);
				СуммаНДСРаспределена = Мин(СтрокаВзаиморасчетов.СуммаНДС, СуммаНДСРаспределить);
				
				// для валютных сумм
				К = ?(СтрокаВзаиморасчетов.Сумма = 0, 0, СуммаРаспределена / СтрокаВзаиморасчетов.Сумма);
				
				ВалютнаяСуммаРаспределена    = Окр(К * СтрокаВзаиморасчетов.ВалютнаяСумма, 2, РежимОкругления.Окр15как20);
				ВалютнаяСуммаНДСРаспределена = Окр(К * СтрокаВзаиморасчетов.ВалютнаяСуммаНДС, 2, РежимОкругления.Окр15как20);
				
				// Создание новой строки распределенной партии
				СтрокаПартии = ЗапасыНаСкладах_ПоПартиям.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПартии, СтрокаПоНоменклатуре);
				
				СтрокаПартии.Партия           = Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка(); // Будет заполнена при установке субконто "Партия" в остатках БУ
				СтрокаПартии.ДокументРасчетов = СтрокаВзаиморасчетов.ДокументРасчетов;
				СтрокаПартии.Количество       = КоличествоРаспределено;
				СтрокаПартии.Сумма            = СуммаРаспределена;
				СтрокаПартии.СуммаНДС         = СуммаНДСРаспределена;
				СтрокаПартии.Валюта           = СтрокаВзаиморасчетов.Валюта;
				СтрокаПартии.ВалютнаяСумма    = ВалютнаяСуммаРаспределена;
				СтрокаПартии.ВалютнаяСуммаНДС = ВалютнаяСуммаНДСРаспределена;
				
				СтрокаПартии.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено;
				
				// Взаиморасчеты минус
				СтрокаВзаиморасчетов.Количество       = СтрокаВзаиморасчетов.Количество - КоличествоРаспределено;
				СтрокаВзаиморасчетов.Сумма            = СтрокаВзаиморасчетов.Сумма - СуммаРаспределена;
				СтрокаВзаиморасчетов.СуммаНДС         = СтрокаВзаиморасчетов.СуммаНДС - СуммаНДСРаспределена;
				СтрокаВзаиморасчетов.ВалютнаяСумма    = СтрокаВзаиморасчетов.ВалютнаяСумма - ВалютнаяСуммаРаспределена;
				СтрокаВзаиморасчетов.ВалютнаяСуммаНДС = СтрокаВзаиморасчетов.ВалютнаяСуммаНДС - ВалютнаяСуммаНДСРаспределена;
				Если СтрокаВзаиморасчетов.Сумма = 0 Тогда // строка взаиморасчетов полностью распределена на остаток запасов
					СтрокиРаспределенныхВзаиморасчетов.Добавить(СтрокаВзаиморасчетов);
				КонецЕсли; 
				
				// итераторы минус)
				КоличествоРаспределить = КоличествоРаспределить - КоличествоРаспределено;
				СуммаРаспределить      = СуммаРаспределить - СуммаРаспределена;
				СуммаНДСРаспределить   = СуммаНДСРаспределить - СуммаНДСРаспределена;
				
			КонецЦикла; 
			
			// Нераспределенную сумму - считаем оплаченной, это будет остаток со статусом "Не списано"
			// Добавляем партию без документа расчетов, документ будет создан при заполнении "Ввода остатков"
			Если КоличествоРаспределить + СуммаРаспределить + СуммаНДСРаспределить > 0 Тогда		
				
				СтрокаПартии = ЗапасыНаСкладах_ПоПартиям.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПартии, СтрокаПоНоменклатуре);
				
				СтрокаПартии.Партия           = Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка();
				СтрокаПартии.ДокументРасчетов = Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка();
				СтрокаПартии.Количество       = КоличествоРаспределить;
				СтрокаПартии.Сумма            = СуммаРаспределить;
				СтрокаПартии.СуммаНДС         = СуммаНДСРаспределить;
				СтрокаПартии.Валюта           = СтруктураПараметров.ВалютаРеглУчета;
				СтрокаПартии.ВалютнаяСумма    = СуммаРаспределить;
				СтрокаПартии.ВалютнаяСуммаНДС = СуммаНДСРаспределить;
				
				СтрокаПартии.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписано;
				
			КонецЕсли; 
			
			// Удаляем "использованные" полностью взаиморасчеты, они больше не нужны
			КоличествоСтрок = СтрокиРаспределенныхВзаиморасчетов.Количество();
			Для Инд = 1 По КоличествоСтрок Цикл
				ВзаиморасчетыПоНоменклатуре.Удалить(СтрокиРаспределенныхВзаиморасчетов[КоличествоСтрок - Инд]);
			КонецЦикла;
			
		КонецЦикла;  
		
		// 3. Распределяем остатки МПЗ переданных по взаиморасчетам
		ВзаиморасчетыПоНоменклатуре.Сортировать("Номенклатура, ДокументРасчетовДата УБЫВ, ДокументРасчетов УБЫВ");
		
		// Таблица для распределенных партий
		ЗапасыОтгруженные_ПоПартиям = ЗапасыОтгруженные.СкопироватьКолонки();
		ЗапасыОтгруженные_ПоПартиям.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
		ЗапасыОтгруженные_ПоПартиям.Колонки.Добавить("ВалютнаяСумма", ОбщегоНазначения.ОписаниеТипаЧисло(17,2));
		ЗапасыОтгруженные_ПоПартиям.Колонки.Добавить("ВалютнаяСуммаНДС", ОбщегоНазначения.ОписаниеТипаЧисло(17,2));
		ЗапасыОтгруженные_ПоПартиям.Колонки.Добавить("СтатусыОплатыРасходовУСН", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыРасходовУСН"));
		// типизация колонок для корректного заполнения и передачи в ВТ
		ЗапасыОтгруженные_ПоПартиям.Колонки.Удалить("Партия");
		ЗапасыОтгруженные_ПоПартиям.Колонки.Удалить("ДокументРасчетов");
		ЗапасыОтгруженные_ПоПартиям.Колонки.Добавить("Партия", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами.ТипЗначения);
		ЗапасыОтгруженные_ПоПартиям.Колонки.Добавить("ДокументРасчетов", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами.ТипЗначения);
		
		Для каждого СтрокаПоНоменклатуре Из ЗапасыОтгруженные Цикл				
			
			// Строки полностью распределенных взаиморасчетов, для удаления перед распределением по следующей номенклатуре
			СтрокиРаспределенныхВзаиморасчетов = Новый Массив;
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Номенклатура", СтрокаПоНоменклатуре.Номенклатура);
			
			СтрокиВзаиморасчетов = ВзаиморасчетыПоНоменклатуре.НайтиСтроки(СтруктураОтбора);
			
			КоличествоРаспределить = СтрокаПоНоменклатуре.Количество;
			СуммаРаспределить      = СтрокаПоНоменклатуре.Сумма;
			СуммаНДСРаспределить   = СтрокаПоНоменклатуре.СуммаНДС;
			
			Для каждого СтрокаВзаиморасчетов Из СтрокиВзаиморасчетов Цикл
				
				Если КоличествоРаспределить + СуммаРаспределить + СуммаНДСРаспределить = 0 Тогда
					Прервать;							
				КонецЕсли; 
				
				КоличествоРаспределено = Мин(СтрокаВзаиморасчетов.Количество, КоличествоРаспределить);
				СуммаРаспределена = Мин(СтрокаВзаиморасчетов.Сумма, СуммаРаспределить);
				СуммаНДСРаспределена = Мин(СтрокаВзаиморасчетов.СуммаНДС, СуммаНДСРаспределить);
				
				// для валютных сумм
				К = ?(СтрокаВзаиморасчетов.Сумма = 0, 0, СуммаРаспределена / СтрокаВзаиморасчетов.Сумма);
				
				ВалютнаяСуммаРаспределена    = Окр(К * СтрокаВзаиморасчетов.ВалютнаяСумма, 2, РежимОкругления.Окр15как20);
				ВалютнаяСуммаНДСРаспределена = Окр(К * СтрокаВзаиморасчетов.ВалютнаяСуммаНДС, 2, РежимОкругления.Окр15как20);
				
				// Создание новой строки распределенной партии
				СтрокаПартии = ЗапасыОтгруженные_ПоПартиям.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПартии, СтрокаПоНоменклатуре);
				
				СтрокаПартии.Партия           = Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка(); // Будет заполнена при установке субконто "Партия" в остатках БУ
				СтрокаПартии.ДокументРасчетов = СтрокаВзаиморасчетов.ДокументРасчетов;
				СтрокаПартии.Количество       = КоличествоРаспределено;
				СтрокаПартии.Сумма            = СуммаРаспределена;
				СтрокаПартии.СуммаНДС         = СуммаНДСРаспределена;
				СтрокаПартии.Валюта           = СтрокаВзаиморасчетов.Валюта;
				СтрокаПартии.ВалютнаяСумма    = ВалютнаяСуммаРаспределена;
				СтрокаПартии.ВалютнаяСуммаНДС = ВалютнаяСуммаНДСРаспределена;
				
				СтрокаПартии.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено;
				
				// Взаиморасчеты минус
				СтрокаВзаиморасчетов.Количество       = СтрокаВзаиморасчетов.Количество - КоличествоРаспределено;
				СтрокаВзаиморасчетов.Сумма            = СтрокаВзаиморасчетов.Сумма - СуммаРаспределена;
				СтрокаВзаиморасчетов.СуммаНДС         = СтрокаВзаиморасчетов.СуммаНДС - СуммаНДСРаспределена;
				СтрокаВзаиморасчетов.ВалютнаяСумма    = СтрокаВзаиморасчетов.ВалютнаяСумма - ВалютнаяСуммаРаспределена;
				СтрокаВзаиморасчетов.ВалютнаяСуммаНДС = СтрокаВзаиморасчетов.ВалютнаяСуммаНДС - ВалютнаяСуммаНДСРаспределена;
				Если СтрокаВзаиморасчетов.Сумма = 0 Тогда // строка взаиморасчетов полностью распределена на остаток запасов
					СтрокиРаспределенныхВзаиморасчетов.Добавить(СтрокаВзаиморасчетов);
				КонецЕсли; 
				
				// итераторы минус)
				КоличествоРаспределить = КоличествоРаспределить - КоличествоРаспределено;
				СуммаРаспределить      = СуммаРаспределить - СуммаРаспределена;
				СуммаНДСРаспределить   = СуммаНДСРаспределить - СуммаНДСРаспределена;
				
			КонецЦикла; 
			
			// Нераспределенную сумму - считаем оплаченной, это будет остаток со статусом "Не списано"
			// Добавляем партию без документа расчетов, документ будет создан при заполнении "Ввода остатков"
			Если КоличествоРаспределить + СуммаРаспределить + СуммаНДСРаспределить > 0 Тогда		
				
				СтрокаПартии = ЗапасыОтгруженные_ПоПартиям.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаПартии, СтрокаПоНоменклатуре);
				
				СтрокаПартии.Партия           = Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка();
				СтрокаПартии.ДокументРасчетов = Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка();
				СтрокаПартии.Количество       = КоличествоРаспределить;
				СтрокаПартии.Сумма            = СуммаРаспределить;
				СтрокаПартии.СуммаНДС         = СуммаНДСРаспределить;
				СтрокаПартии.Валюта           = СтруктураПараметров.ВалютаРеглУчета;
				СтрокаПартии.ВалютнаяСумма    = СуммаРаспределить;
				СтрокаПартии.СуммаНДС         = СуммаНДСРаспределить;
				СтрокаПартии.ВалютнаяСуммаНДС = СуммаНДСРаспределить;
				
				СтрокаПартии.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписано;
				
			КонецЕсли; 
			
			// Удаляем "использованные" полностью взаиморасчеты, они больше не нужны
			КоличествоСтрок = СтрокиРаспределенныхВзаиморасчетов.Количество();
			Для Инд = 1 По КоличествоСтрок Цикл
				ВзаиморасчетыПоНоменклатуре.Удалить(СтрокиРаспределенныхВзаиморасчетов[КоличествоСтрок - Инд]);
			КонецЦикла;
			
		КонецЦикла; 
		
		// 4. Полученные результаты передаем во временные таблицы
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Текст = 
		"УНИЧТОЖИТЬ ПартииМПЗиНДС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ВзаиморасчетыЗаМПЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВзаиморасчетыЗаМПЗ.ДокументРасчетов,
		|	ВзаиморасчетыЗаМПЗ.ДокументРасчетовДата,
		|	ВзаиморасчетыЗаМПЗ.Валюта,
		|	ВзаиморасчетыЗаМПЗ.Номенклатура,
		|	ВзаиморасчетыЗаМПЗ.СчетУчета,
		|	ВзаиморасчетыЗаМПЗ.КоэффЗадолженности,
		|	ВзаиморасчетыЗаМПЗ.Количество,
		|	ВзаиморасчетыЗаМПЗ.Сумма,
		|	ВзаиморасчетыЗаМПЗ.ВалютнаяСумма,
		|	ВзаиморасчетыЗаМПЗ.СуммаНДС,
		|	ВзаиморасчетыЗаМПЗ.ВалютнаяСуммаНДС
		|ПОМЕСТИТЬ ВзаиморасчетыЗаМПЗ
		|ИЗ
		|	&КредиторскаяЗадолженностьПоНоменклатуре КАК ВзаиморасчетыЗаМПЗ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗапасыНаСкладах_ПоПартиям.Номенклатура,
		|	ЗапасыНаСкладах_ПоПартиям.НоменклатураНаименование,
		|	ЗапасыНаСкладах_ПоПартиям.СчетУчета,
		|	ЗапасыНаСкладах_ПоПартиям.Партия,
		|	ЗапасыНаСкладах_ПоПартиям.ДокументРасчетов,
		|	ЗапасыНаСкладах_ПоПартиям.Количество,
		|	ЗапасыНаСкладах_ПоПартиям.Сумма,
		|	ЗапасыНаСкладах_ПоПартиям.СуммаНДС,
		|	ЗапасыНаСкладах_ПоПартиям.Валюта,
		|	ЗапасыНаСкладах_ПоПартиям.ВалютнаяСумма,
		|	ЗапасыНаСкладах_ПоПартиям.ВалютнаяСуммаНДС,
		|	ЗапасыНаСкладах_ПоПартиям.СтатусыОплатыРасходовУСН
		|ПОМЕСТИТЬ ПартииНаСкладах
		|ИЗ
		|	&ЗапасыНаСкладах_ПоПартиям КАК ЗапасыНаСкладах_ПоПартиям
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЗапасыОтгруженные_ПоПартиям.Номенклатура,
		|	ЗапасыОтгруженные_ПоПартиям.НоменклатураНаименование,
		|	ЗапасыОтгруженные_ПоПартиям.СчетУчета,
		|	ЗапасыОтгруженные_ПоПартиям.Партия,
		|	ЗапасыОтгруженные_ПоПартиям.ДокументРасчетов,
		|	ЗапасыОтгруженные_ПоПартиям.Количество,
		|	ЗапасыОтгруженные_ПоПартиям.Сумма,
		|	ЗапасыОтгруженные_ПоПартиям.СуммаНДС,
		|	ЗапасыОтгруженные_ПоПартиям.Валюта,
		|	ЗапасыОтгруженные_ПоПартиям.ВалютнаяСумма,
		|	ЗапасыОтгруженные_ПоПартиям.ВалютнаяСуммаНДС,
		|	ЗапасыОтгруженные_ПоПартиям.СтатусыОплатыРасходовУСН
		|ПОМЕСТИТЬ ПартииПереданные
		|ИЗ
		|	&ЗапасыОтгруженные_ПоПартиям КАК ЗапасыОтгруженные_ПоПартиям
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПартииНаСкладах.Номенклатура,
		|	ПартииНаСкладах.НоменклатураНаименование,
		|	ПартииНаСкладах.СчетУчета,
		|	ПартииНаСкладах.Партия,
		|	ПартииНаСкладах.ДокументРасчетов,
		|	ПартииНаСкладах.Количество,
		|	ПартииНаСкладах.Сумма + ПартииНаСкладах.СуммаНДС КАК Сумма,
		|	ПартииНаСкладах.СуммаНДС КАК НДС,
		|	ПартииНаСкладах.Валюта,
		|	ПартииНаСкладах.ВалютнаяСумма + ПартииНаСкладах.ВалютнаяСуммаНДС КАК ВалютнаяСумма,
		|	ПартииНаСкладах.ВалютнаяСуммаНДС КАК ВалютныйНДС,
		|	ПартииНаСкладах.СтатусыОплатыРасходовУСН
		|ПОМЕСТИТЬ ПартииМПЗиНДС
		|ИЗ
		|	ПартииНаСкладах КАК ПартииНаСкладах
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПартииПереданные.Номенклатура,
		|	ПартииПереданные.НоменклатураНаименование,
		|	ПартииПереданные.СчетУчета,
		|	ПартииПереданные.Партия,
		|	ПартииПереданные.ДокументРасчетов,
		|	ПартииПереданные.Количество,
		|	ПартииПереданные.Сумма + ПартииПереданные.СуммаНДС,
		|	ПартииПереданные.СуммаНДС,
		|	ПартииПереданные.Валюта,
		|	ПартииПереданные.ВалютнаяСумма + ПартииПереданные.ВалютнаяСуммаНДС,
		|	ПартииПереданные.ВалютнаяСуммаНДС,
		|	ПартииПереданные.СтатусыОплатыРасходовУСН
		|ИЗ
		|	ПартииПереданные КАК ПартииПереданные
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ПартииНаСкладах
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ПартииПереданные"
		;
		
		Запрос.УстановитьПараметр("КредиторскаяЗадолженностьПоНоменклатуре", ВзаиморасчетыПоНоменклатуре);
		Запрос.УстановитьПараметр("ЗапасыНаСкладах_ПоПартиям", ЗапасыНаСкладах_ПоПартиям);
		Запрос.УстановитьПараметр("ЗапасыОтгруженные_ПоПартиям", ЗапасыОтгруженные_ПоПартиям);
		
	Иначе
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПартииМПЗиНДС.СчетУчета,
		|	ПартииМПЗиНДС.Номенклатура,
		|	ПартииМПЗиНДС.НоменклатураНаименование,
		|	ПартииМПЗиНДС.Партия,
		|	ПартииМПЗиНДС.ДокументРасчетов,
		|	ЕСТЬNULL(ОплатаДокументовКЗ_Коэффициенты.Валюта, &ВалютаРеглУчета) КАК Валюта,
		|	ВЫРАЗИТЬ(ПартииМПЗиНДС.Количество * ЕСТЬNULL(ОплатаДокументовКЗ_Коэффициенты.КоэффЗадолженности, 0) КАК ЧИСЛО(18, 3)) КАК КоличествоНеОплачено,
		|	ВЫРАЗИТЬ(ПартииМПЗиНДС.Сумма * ЕСТЬNULL(ОплатаДокументовКЗ_Коэффициенты.КоэффЗадолженности, 0) КАК ЧИСЛО(17, 2)) КАК СуммаНеОплачено,
		|	ВЫРАЗИТЬ(ПартииМПЗиНДС.СуммаНДС * ЕСТЬNULL(ОплатаДокументовКЗ_Коэффициенты.КоэффЗадолженности, 0) КАК ЧИСЛО(17, 2)) КАК СуммаНДСНеОплачено,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ОплатаДокументовКЗ_Коэффициенты.КоэффЗадолженности, 0) * ВЫБОР
		|			КОГДА ЕСТЬNULL(ОплатаДокументовКЗ_Коэффициенты.Валюта, &ВалютаРеглУчета) = &ВалютаРеглУчета
		|				ТОГДА ПартииМПЗиНДС.Сумма
		|			КОГДА ЕСТЬNULL(ОплатаДокументовКЗ_Коэффициенты.ВалютнаяСуммаРегистр, 0) = 0
		|				ТОГДА ПартииМПЗиНДС.Сумма
		|			ИНАЧЕ ПартииМПЗиНДС.Сумма / (ОплатаДокументовКЗ_Коэффициенты.СуммаРегистр / ОплатаДокументовКЗ_Коэффициенты.ВалютнаяСуммаРегистр)
		|		КОНЕЦ КАК ЧИСЛО(17, 2)) КАК ВалютнаяСуммаНеОплачено,
		|	ВЫРАЗИТЬ(ЕСТЬNULL(ОплатаДокументовКЗ_Коэффициенты.КоэффЗадолженности, 0) * ВЫБОР
		|			КОГДА ЕСТЬNULL(ОплатаДокументовКЗ_Коэффициенты.Валюта, &ВалютаРеглУчета) = &ВалютаРеглУчета
		|				ТОГДА ПартииМПЗиНДС.СуммаНДС
		|			КОГДА ЕСТЬNULL(ОплатаДокументовКЗ_Коэффициенты.ВалютнаяСуммаРегистр, 0) = 0
		|				ТОГДА ПартииМПЗиНДС.СуммаНДС
		|			ИНАЧЕ ПартииМПЗиНДС.СуммаНДС / (ОплатаДокументовКЗ_Коэффициенты.СуммаРегистр / ОплатаДокументовКЗ_Коэффициенты.ВалютнаяСуммаРегистр)
		|		КОНЕЦ КАК ЧИСЛО(17, 2)) КАК ВалютнаяСуммаНДСНеОплачено
		|ПОМЕСТИТЬ ТаблицаНеоплаченныхПартий
		|ИЗ
		|	ПартииМПЗиНДС КАК ПартииМПЗиНДС
		|		ЛЕВОЕ СОЕДИНЕНИЕ ОплатаДокументовКЗ_Коэффициенты КАК ОплатаДокументовКЗ_Коэффициенты
		|		ПО ПартииМПЗиНДС.ДокументРасчетов = ОплатаДокументовКЗ_Коэффициенты.ДокументРасчетов
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПартииМПЗиНДС.СчетУчета,
		|	ПартииМПЗиНДС.Номенклатура,
		|	ПартииМПЗиНДС.НоменклатураНаименование,
		|	ПартииМПЗиНДС.Партия,
		|	ПартииМПЗиНДС.ДокументРасчетов,
		|	ПартииМПЗиНДС.Количество,
		|	&ВалютаРеглУчета КАК Валюта,
		|	СУММА(ПартииМПЗиНДС.Количество - ЕСТЬNULL(ТаблицаНеоплаченныхПартий.КоличествоНеОплачено, 0)) КАК КоличествоОплачено,
		|	СУММА(ПартииМПЗиНДС.Сумма - ЕСТЬNULL(ТаблицаНеоплаченныхПартий.СуммаНеОплачено, 0)) КАК СуммаОплачено,
		|	СУММА(ПартииМПЗиНДС.СуммаНДС - ЕСТЬNULL(ТаблицаНеоплаченныхПартий.СуммаНДСНеОплачено, 0)) КАК СуммаНДСОплачено,
		|	СУММА(ПартииМПЗиНДС.Сумма - ЕСТЬNULL(ТаблицаНеоплаченныхПартий.СуммаНеОплачено, 0)) КАК ВалютнаяСуммаОплачено,
		|	СУММА(ПартииМПЗиНДС.СуммаНДС - ЕСТЬNULL(ТаблицаНеоплаченныхПартий.СуммаНДСНеОплачено, 0)) КАК ВалютнаяСуммаНДСОплачено
		|ПОМЕСТИТЬ ТаблицаОплаченныхПартий
		|ИЗ
		|	ПартииМПЗиНДС КАК ПартииМПЗиНДС
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаНеоплаченныхПартий КАК ТаблицаНеоплаченныхПартий
		|		ПО ПартииМПЗиНДС.СчетУчета = ТаблицаНеоплаченныхПартий.СчетУчета
		|			И ПартииМПЗиНДС.Номенклатура = ТаблицаНеоплаченныхПартий.Номенклатура
		|			И ПартииМПЗиНДС.НоменклатураНаименование = ТаблицаНеоплаченныхПартий.НоменклатураНаименование
		|			И ПартииМПЗиНДС.НоменклатураНаименование = ТаблицаНеоплаченныхПартий.НоменклатураНаименование
		|			И ПартииМПЗиНДС.Партия = ТаблицаНеоплаченныхПартий.Партия
		|			И ПартииМПЗиНДС.ДокументРасчетов = ТаблицаНеоплаченныхПартий.ДокументРасчетов
		|
		|СГРУППИРОВАТЬ ПО
		|	ПартииМПЗиНДС.СчетУчета,
		|	ПартииМПЗиНДС.Номенклатура,
		|	ПартииМПЗиНДС.НоменклатураНаименование,
		|	ПартииМПЗиНДС.Партия,
		|	ПартииМПЗиНДС.ДокументРасчетов,
		|	ПартииМПЗиНДС.Количество
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|УНИЧТОЖИТЬ ПартииМПЗиНДС
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаНеоплаченныхПартий.СчетУчета,
		|	ТаблицаНеоплаченныхПартий.Номенклатура,
		|	ТаблицаНеоплаченныхПартий.НоменклатураНаименование,
		|	ТаблицаНеоплаченныхПартий.Партия КАК Партия,
		|	ТаблицаНеоплаченныхПартий.ДокументРасчетов КАК ДокументРасчетов,
		|	ТаблицаНеоплаченныхПартий.КоличествоНеОплачено КАК Количество,
		|	ТаблицаНеоплаченныхПартий.СуммаНеОплачено + ТаблицаНеоплаченныхПартий.СуммаНДСНеОплачено КАК Сумма,
		|	ТаблицаНеоплаченныхПартий.СуммаНДСНеОплачено КАК НДС,
		|	ТаблицаНеоплаченныхПартий.Валюта,
		|	ТаблицаНеоплаченныхПартий.ВалютнаяСуммаНеОплачено + ТаблицаНеоплаченныхПартий.ВалютнаяСуммаНДСНеОплачено КАК ВалютнаяСумма,
		|	ТаблицаНеоплаченныхПартий.ВалютнаяСуммаНДСНеОплачено КАК ВалютныйНДС,
		|	ЗНАЧЕНИЕ(Перечисление.СтатусыРасходовУСН.НеСписаноНеОплачено) КАК СтатусыОплатыРасходовУСН
		|ПОМЕСТИТЬ ПартииМПЗиНДС
		|ИЗ
		|	ТаблицаНеоплаченныхПартий КАК ТаблицаНеоплаченныхПартий
		|ГДЕ
		|	НЕ ТаблицаНеоплаченныхПартий.СуммаНеОплачено + ТаблицаНеоплаченныхПартий.СуммаНДСНеОплачено = 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаОплаченныхПартий.СчетУчета,
		|	ТаблицаОплаченныхПартий.Номенклатура,
		|	ТаблицаОплаченныхПартий.НоменклатураНаименование,
		|	ТаблицаОплаченныхПартий.Партия,
		|	ТаблицаОплаченныхПартий.ДокументРасчетов,
		|	ТаблицаОплаченныхПартий.КоличествоОплачено,
		|	ТаблицаОплаченныхПартий.СуммаОплачено + ТаблицаОплаченныхПартий.СуммаНДСОплачено,
		|	ТаблицаОплаченныхПартий.СуммаНДСОплачено,
		|	ТаблицаОплаченныхПартий.Валюта,
		|	ТаблицаОплаченныхПартий.ВалютнаяСуммаОплачено + ТаблицаОплаченныхПартий.ВалютнаяСуммаНДСОплачено,
		|	ТаблицаОплаченныхПартий.ВалютнаяСуммаНДСОплачено,
		|	ЗНАЧЕНИЕ(Перечисление.СтатусыРасходовУСН.НеСписано)
		|ИЗ
		|	ТаблицаОплаченныхПартий КАК ТаблицаОплаченныхПартий
		|ГДЕ
		|	НЕ ТаблицаОплаченныхПартий.СуммаОплачено + ТаблицаОплаченныхПартий.СуммаНДСОплачено = 0"
		;
		
	КонецЕсли;
	
	Запрос.Выполнить();
	
КонецПроцедуры // РаспределитьОстаткиМПЗПоДокументамРасчетов()


Процедура РаспределитьОстаткиРБППоДокументамРасчетов(СтруктураПараметров, МенеджерВТ)

	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	
	УстановитьПараметрыЗапроса(Запрос, СтруктураПараметров.ОбщиеПараметрыЗапроса);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НачальныеДанныеРБП.СчетУчета,
	|	НачальныеДанныеРБП.Субконто1,
	|	НачальныеДанныеРБП.Субконто2,
	|	НачальныеДанныеРБП.Субконто3,
	|	НачальныеДанныеРБП.ЭлементРБП,
	|	НачальныеДанныеРБП.Контрагент,
	|	НачальныеДанныеРБП.Сумма,
	|	НачальныеДанныеРБП.СуммаНДС
	|ИЗ
	|	НачальныеДанныеРБП КАК НачальныеДанныеРБП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВзаиморасчетыЗаРБП.СчетУчета,
	|	ВзаиморасчетыЗаРБП.ЭлементРБП,
	|	ВзаиморасчетыЗаРБП.Контрагент,
	|	ВзаиморасчетыЗаРБП.ДоговорКонтрагента,
	|	ВзаиморасчетыЗаРБП.ДокументРасчетов,
	|	ВзаиморасчетыЗаРБП.ДокументРасчетовДата,
	|	ВзаиморасчетыЗаРБП.Валюта,
	|	ВзаиморасчетыЗаРБП.СуммаПоступило,
	|	ВзаиморасчетыЗаРБП.ВалютнаяСуммаПоступило,
	|	ВзаиморасчетыЗаРБП.СуммаНДСПоступило,
	|	ВзаиморасчетыЗаРБП.ВалютнаяСуммаНДСПоступило,
	|	ВзаиморасчетыЗаРБП.КоэффЗадолженности,
	|	ВзаиморасчетыЗаРБП.Количество,
	|	ВзаиморасчетыЗаРБП.Сумма,
	|	ВзаиморасчетыЗаРБП.ВалютнаяСумма,
	|	ВзаиморасчетыЗаРБП.СуммаНДС,
	|	ВзаиморасчетыЗаРБП.ВалютнаяСуммаНДС
	|ИЗ
	|	ВзаиморасчетыЗаРБП КАК ВзаиморасчетыЗаРБП
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВзаиморасчетыЗаРБП.ДокументРасчетовДата УБЫВ,
	|	ВзаиморасчетыЗаРБП.ДокументРасчетов УБЫВ"
	;
	
	Результат = Запрос.ВыполнитьПакет();
		
	ОстаткиРБП = Результат[0].Выгрузить();
	ВзаиморасчетыЗаРБП = Результат[1].Выгрузить();
	
	ВзаиморасчетыЗаРБП.Индексы.Добавить("СчетУчета, ЭлементРБП");
	
	// Таблица для распределенных РБП
    ТаблицаОплатРБП = ОстаткиРБП.СкопироватьКолонки();
	// типизированные колонки для передачи в ВТ
	КолонкиВзаиморасчетов = ВзаиморасчетыЗаРБП.Колонки;
	ТаблицаОплатРБП.Колонки.Добавить("ДоговорКонтрагента", КолонкиВзаиморасчетов.ДоговорКонтрагента.ТипЗначения);
	ТаблицаОплатРБП.Колонки.Добавить("ДокументРасчетов", КолонкиВзаиморасчетов.ДокументРасчетов.ТипЗначения);
	// колонки сумм
	ТаблицаОплатРБП.Колонки.Добавить("Валюта", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	ТаблицаОплатРБП.Колонки.Добавить("ВалютнаяСумма", ОбщегоНазначения.ОписаниеТипаЧисло(18,5));
	ТаблицаОплатРБП.Колонки.Добавить("ВалютнаяСуммаНДС", ОбщегоНазначения.ОписаниеТипаЧисло(18,5));
	ТаблицаОплатРБП.Колонки.Добавить("СтатусыОплатыРасходовУСН", Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыРасходовУСН"));	
	
	Для каждого СтрокаРБП Из ОстаткиРБП Цикл				
		
		// Строки полностью распределенных взаиморасчетов, для удаления перед распределением по следующему элементу РБП
		СтрокиРаспределенныхВзаиморасчетов = Новый Массив;
		
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("СчетУчета", СтрокаРБП.СчетУчета);
		СтруктураОтбора.Вставить("ЭлементРБП", СтрокаРБП.ЭлементРБП);
		Если ЗначениеЗаполнено(СтрокаРБП.Контрагент) Тогда
			СтруктураОтбора.Вставить("Контрагент", СтрокаРБП.Контрагент);
		КонецЕсли; 
		
		СтрокиВзаиморасчетов = ВзаиморасчетыЗаРБП.НайтиСтроки(СтруктураОтбора);
		
		СуммаРаспределить      = СтрокаРБП.Сумма;
		СуммаНДСРаспределить   = СтрокаРБП.СуммаНДС;
		
		Для каждого СтрокаВзаиморасчетов Из СтрокиВзаиморасчетов Цикл
			
			Если СуммаРаспределить + СуммаНДСРаспределить = 0 Тогда
				Прервать;							
			КонецЕсли; 
			
			СуммаРаспределена = Мин(СтрокаВзаиморасчетов.Сумма, СуммаРаспределить);
			СуммаНДСРаспределена = Мин(СтрокаВзаиморасчетов.СуммаНДС, СуммаНДСРаспределить);
			
			// для валютных сумм
			К = ?(СтрокаВзаиморасчетов.Сумма = 0, 0, СуммаРаспределена / СтрокаВзаиморасчетов.Сумма);
			
			ВалютнаяСуммаРаспределена    = Окр(К * СтрокаВзаиморасчетов.ВалютнаяСумма, 2, РежимОкругления.Окр15как20);
			ВалютнаяСуммаНДСРаспределена = Окр(К * СтрокаВзаиморасчетов.ВалютнаяСуммаНДС, 2, РежимОкругления.Окр15как20);
			
			// Создание новой строки распределенного расхода
			СтрокаРасходаРБП = ТаблицаОплатРБП.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРасходаРБП, СтрокаРБП);
			
			СтрокаРасходаРБП.Контрагент         = СтрокаВзаиморасчетов.Контрагент;
			СтрокаРасходаРБП.ДоговорКонтрагента = СтрокаВзаиморасчетов.ДоговорКонтрагента;
			СтрокаРасходаРБП.ДокументРасчетов   = СтрокаВзаиморасчетов.ДокументРасчетов;
			СтрокаРасходаРБП.Сумма              = СуммаРаспределена;
			СтрокаРасходаРБП.СуммаНДС           = СуммаНДСРаспределена;
			СтрокаРасходаРБП.Валюта             = СтрокаВзаиморасчетов.Валюта;
			СтрокаРасходаРБП.ВалютнаяСумма      = ВалютнаяСуммаРаспределена;
			СтрокаРасходаРБП.ВалютнаяСуммаНДС   = ВалютнаяСуммаНДСРаспределена;
			
			СтрокаРасходаРБП.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено;
			
			// Взаиморасчеты минус
			СтрокаВзаиморасчетов.Сумма            = СтрокаВзаиморасчетов.Сумма - СуммаРаспределена;
			СтрокаВзаиморасчетов.СуммаНДС         = СтрокаВзаиморасчетов.СуммаНДС - СуммаНДСРаспределена;
			СтрокаВзаиморасчетов.ВалютнаяСумма    = СтрокаВзаиморасчетов.ВалютнаяСумма - ВалютнаяСуммаРаспределена;
			СтрокаВзаиморасчетов.ВалютнаяСуммаНДС = СтрокаВзаиморасчетов.ВалютнаяСуммаНДС - ВалютнаяСуммаНДСРаспределена;
			Если СтрокаВзаиморасчетов.Сумма = 0 Тогда // строка взаиморасчетов полностью распределена на остаток РБП
				СтрокиРаспределенныхВзаиморасчетов.Добавить(СтрокаВзаиморасчетов);
			КонецЕсли; 
			
			// итераторы минус)
			СуммаРаспределить      = СуммаРаспределить - СуммаРаспределена;
			СуммаНДСРаспределить   = СуммаНДСРаспределить - СуммаНДСРаспределена;
			
		КонецЦикла; 
		
		// Нераспределенную сумму - считаем оплаченной, это будет остаток со статусом "Не списано"
		// Добавляем строку расхода без документа, документ будет создан при заполнении "Ввода остатков"
		Если СуммаРаспределить + СуммаНДСРаспределить > 0 Тогда		
			
			СтрокаРасходаРБП = ТаблицаОплатРБП.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаРасходаРБП, СтрокаРБП);
			
			СтрокаРасходаРБП.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			СтрокаРасходаРБП.ДокументРасчетов   = Документы.ДокументРасчетовСКонтрагентом.ПустаяСсылка();
			СтрокаРасходаРБП.Сумма              = СуммаРаспределить;
			СтрокаРасходаРБП.СуммаНДС           = СуммаНДСРаспределить;
			СтрокаРасходаРБП.Валюта             = СтруктураПараметров.ВалютаРеглУчета;
			СтрокаРасходаРБП.ВалютнаяСумма      = СуммаРаспределить;
			СтрокаРасходаРБП.ВалютнаяСуммаНДС   = СуммаНДСРаспределить;
			
			СтрокаРасходаРБП.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписано;
			
		КонецЕсли; 
		
		// Удаляем "выбранные" полностью взаиморасчеты, они больше не нужны
		КоличествоСтрок = СтрокиРаспределенныхВзаиморасчетов.Количество();
		Для Инд = 1 По КоличествоСтрок Цикл
			ВзаиморасчетыЗаРБП.Удалить(СтрокиРаспределенныхВзаиморасчетов[КоличествоСтрок - Инд]);
		КонецЦикла;
		
	КонецЦикла;
	
	Запрос.Текст = 
	"УНИЧТОЖИТЬ НачальныеДанныеРБП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОплатРБП.СчетУчета,
	|	ТаблицаОплатРБП.ЭлементРБП,
	|	ТаблицаОплатРБП.Субконто1,
	|	ТаблицаОплатРБП.Субконто2,
	|	ТаблицаОплатРБП.Субконто3,
	|	ТаблицаОплатРБП.Контрагент,
	|	ТаблицаОплатРБП.ДоговорКонтрагента,
	|	ТаблицаОплатРБП.ДокументРасчетов,
	|	ТаблицаОплатРБП.СтатусыОплатыРасходовУСН,
	|	ТаблицаОплатРБП.Валюта,
	|	ТаблицаОплатРБП.Сумма,
	|	ТаблицаОплатРБП.ВалютнаяСумма,
	|	ТаблицаОплатРБП.СуммаНДС,
	|	ТаблицаОплатРБП.ВалютнаяСуммаНДС
	|ПОМЕСТИТЬ ОстаткиРБП
	|ИЗ
	|	&ТаблицаОплатРБП КАК ТаблицаОплатРБП"
	;
	
	Запрос.УстановитьПараметр("ТаблицаОплатРБП", ТаблицаОплатРБП);
	
	Запрос.Выполнить();
	
КонецПроцедуры // РаспределитьОстаткиРБППоДокументамРасчетов()


// запросы для формирования таблиц для загрузки в создаваемые документы "ВводНачальныхОстатков"


Функция ТекстЗапроса_ТаблицыВДокумент_ОС(НомераТаблиц)

	НомераТаблиц.Вставить("ОсновныеСредства__ОС", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожение__ОстаткиОС", НомераТаблиц.Количество());
	
	Текст = 
	"ВЫБРАТЬ
	|	ОстаткиОС.ОсновноеСредство,
	|	ОстаткиОС.ОсновноеСредствоНаименование,
	|	ОстаткиОС.СчетУчетаБУ,
	|	ОстаткиОС.СчетАмортизацииБУ,
	|	ОстаткиОС.ИнвентарныйНомерРегл,
	|	ОстаткиОС.МОЛРегл,
	|	ОстаткиОС.СпособПоступленияРегл,
	|	ОстаткиОС.ДатаПринятияКУчетуРегл,
	|	ОстаткиОС.НазваниеДокументаПринятияКУчетуРегл,
	|	ОстаткиОС.НомерДокументаПринятияКУчетуРегл,
	|	ОстаткиОС.СостояниеПринятияКУчетуРегл,
	|	ОстаткиОС.ПервоначальнаяСтоимостьБУ,
	|	ОстаткиОС.СтоимостьДляВычисленияАмортизацииБУ,
	|	ОстаткиОС.НачислятьАмортизациюБУ,
	|	ОстаткиОС.СрокПолезногоИспользованияБУ,
	|	ОстаткиОС.СпособНачисленияАмортизацииБУ,
	|	ОстаткиОС.СрокИспользованияДляВычисленияАмортизацииБУ,
	|	ОстаткиОС.ОбъемПродукцииРаботБУ,
	|	ОстаткиОС.ОбъемПродукцииРаботДляВычисленияАмортизацииБУ,
	|	ОстаткиОС.КоэффициентАмортизацииБУ,
	|	ОстаткиОС.КоэффициентУскоренияБУ,
	|	ОстаткиОС.ПорядокПогашенияСтоимостиБУ,
	|	ОстаткиОС.СпособОтраженияРасходовПоАмортизации,
	|	ОстаткиОС.ТекущаяСтоимостьБУ,
	|	ОстаткиОС.НакопленнаяАмортизацияБУ,
	|	ОстаткиОС.ДатаПриобретенияУСН,
	|	ОстаткиОС.ПервоначальнаяСтоимостьУСН,
	|	ОстаткиОС.ПорядокВключенияСтоимостиВСоставРасходовУСН,
	|	ОстаткиОС.СрокПолезногоИспользованияУСН,
	|	ОстаткиОС.СуммаНачисленнойАмортизацииУСН
	|ИЗ
	|	ОстаткиОС КАК ОстаткиОС
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОсновноеСредствоНаименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОстаткиОС"
	;

	Возврат Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции // ТекстЗапроса_ТаблицыВДокумент_ОС()


Функция ТекстЗапроса_ТаблицыВДокумент_НМА(НомераТаблиц)

	НомераТаблиц.Вставить("НематериальныеАктивыИНИОКР__НМА", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожение__ОстаткиНМА", НомераТаблиц.Количество());
	
	Текст = 
	"ВЫБРАТЬ
	|	ОстаткиНМА.НематериальныйАктив,
	|	ОстаткиНМА.НематериальныйАктивНаименование,
	|	ОстаткиНМА.ВидОбъектаУчета,
	|	ОстаткиНМА.СчетУчетаБУ,
	|	ОстаткиНМА.СчетНачисленияАмортизацииБУ,
	|	ОстаткиНМА.ПервоначальнаяСтоимостьБУ,
	|	ОстаткиНМА.СпособПоступления,
	|	ОстаткиНМА.НачислятьАмортизациюБУ,
	|	ОстаткиНМА.СпособНачисленияАмортизацииБУ,
	|	ОстаткиНМА.СрокПолезногоИспользованияБУ,
	|	ОстаткиНМА.ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	ОстаткиНМА.КоэффициентБУ,
	|	ОстаткиНМА.ДатаПринятияКУчетуРегл,
	|	ОстаткиНМА.ДатаПриобретения,
	|	ОстаткиНМА.СпособОтраженияРасходов,
	|	ОстаткиНМА.ТекущаяСтоимостьБУ,
	|	ОстаткиНМА.НакопленнаяАмортизацияБУ,
	|	ОстаткиНМА.ПервоначальнаяСтоимостьУСН,
	|	ОстаткиНМА.НакопленнаяАмортизацияУСН,
	|	ОстаткиНМА.СрокПолезногоИспользованияУСН,
	|	ОстаткиНМА.ПорядокВключенияСтоимостиВСоставРасходовУСН
	|ИЗ
	|	ОстаткиНМА КАК ОстаткиНМА
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОстаткиНМА.НематериальныйАктивНаименование
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОстаткиНМА"
	;

	Возврат Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции // ТекстЗапроса_ТаблицыВДокумент_НМА()


Функция ТекстЗапроса_ТаблицыВДокумент_НалогиИСборы(НомераТаблиц)

	НомераТаблиц.Вставить("РасчетыПоНалогамИСборам__РасчетыПоНалогамИСборам", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожение__ОстаткиНалогиИСборы", НомераТаблиц.Количество());
	
	Текст = 
	"ВЫБРАТЬ
	|	ОстаткиНалогиИСборы.СчетУчета,
	|	ОстаткиНалогиИСборы.ВидПлатежаВБюджет,
	|	ОстаткиНалогиИСборы.УровеньБюджета,
	|	ОстаткиНалогиИСборы.РегистрацияВНалоговомОргане,
	|	ОстаткиНалогиИСборы.ОтражениеВУСН,
	|	ОстаткиНалогиИСборы.Сумма,
	|	ОстаткиНалогиИСборы.СуммаКт
	|ИЗ
	|	ОстаткиНалогиИСборы КАК ОстаткиНалогиИСборы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОстаткиНалогиИСборы"
	;

	Возврат Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции // ТекстЗапроса_ТаблицыВДокумент_НалогиИСборы()


Функция ТекстЗапроса_ТаблицыВДокумент_РасчетыСПерсоналом(НомераТаблиц)

	НомераТаблиц.Вставить("РасчетыСПерсоналомПоОплатеТрудаИДепонентам__РасчетыПоЗаработнойПлате", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожение__ОстаткиРасчетовСПерсоналом", НомераТаблиц.Количество());
	
	Текст = 
	"ВЫБРАТЬ
	|	ОстаткиРасчетовСПерсоналом.Сотрудник КАК Сотрудник,
	|	ОстаткиРасчетовСПерсоналом.СчетУчета,
	|	ОстаткиРасчетовСПерсоналом.ПериодРегистрации КАК ПериодРегистрации,
	|	ОстаткиРасчетовСПерсоналом.СпособВыплаты,
	|	ОстаткиРасчетовСПерсоналом.Сумма,
	|	ОстаткиРасчетовСПерсоналом.ОтражениеВУСН
	|ИЗ
	|	ОстаткиРасчетовСПерсоналом КАК ОстаткиРасчетовСПерсоналом
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	ПериодРегистрации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОстаткиРасчетовСПерсоналом"
	;

	Возврат Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции // ТекстЗапроса_ТаблицыВДокумент_РасчетыСПерсоналом()


Функция ТекстЗапроса_ТаблицыВДокумент_РасчетыСПодотчетниками(НомераТаблиц)

	НомераТаблиц.Вставить("РасчетыСПодотчетнымиЛицами__РасчетыСПодотчетнымиЛицами", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожение__ОстаткиРасчетовСПодотчетниками", НомераТаблиц.Количество());
	
	Текст = 
	"ВЫБРАТЬ
	|	ОстаткиПоПодотчетникам.СчетУчета,
	|	ОстаткиПоПодотчетникам.РаботникОрганизации,
	|	ОстаткиПоПодотчетникам.РасчетныйДокумент,
	|	ОстаткиПоПодотчетникам.Сумма,
	|	ОстаткиПоПодотчетникам.СуммаКт,
	|	ОстаткиПоПодотчетникам.Валюта,
	|	ОстаткиПоПодотчетникам.ВалютнаяСумма
	|ИЗ
	|	ОстаткиПоПодотчетникам КАК ОстаткиПоПодотчетникам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОстаткиПоПодотчетникам"
	;

	Возврат Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции // ТекстЗапроса_ТаблицыВДокумент_РасчетыСПодотчетниками()


Функция ТекстЗапроса_ТаблицыВДокумент_РБП(НомераТаблиц)
	
	НомераТаблиц.Вставить("РасходыБудущихПериодов__РасходыБудущихПериодов", НомераТаблиц.Количество());
	НомераТаблиц.Вставить("Уничтожение__РБП", НомераТаблиц.Количество());
	
	Текст = 
	"ВЫБРАТЬ
	|	ОстаткиРБП.СчетУчета,
	|	ОстаткиРБП.Субконто1,
	|	ОстаткиРБП.Субконто2,
	|	ОстаткиРБП.Субконто3,
	|	ОстаткиРБП.Контрагент,
	|	ОстаткиРБП.ДоговорКонтрагента,
	|	ОстаткиРБП.Сумма,
	|	ОстаткиРБП.Валюта,
	|	ОстаткиРБП.ВалютнаяСумма,
	|	ОстаткиРБП.СтатусыОплатыРасходовУСН,
	|	ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.Принимаются) КАК ОтражениеВУСН,
	|	ОстаткиРБП.СуммаНДС КАК НДС,
	|	ОстаткиРБП.ВалютнаяСуммаНДС КАК ВалютныйНДС,
	|	ОстаткиРБП.ДокументРасчетов КАК РасчетныйДокумент
	|ИЗ
	|	ОстаткиРБП КАК ОстаткиРБП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ОстаткиРБП"
	;

	Возврат Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции // ТекстЗапроса_ТаблицыВДокумент_РБП()
 


Функция ТекстЗапроса_ТаблицыВДокумент_МатериалыНаСкладах(НомераТаблиц)

	НомераТаблиц.Вставить("Материалы__НоменклатураНаСкладе", НомераТаблиц.Количество());
	
	Текст = 
	"ВЫБРАТЬ
	|	ПартииМПЗиНДС.СчетУчета КАК СчетУчета,
	|	ПартииМПЗиНДС.Номенклатура,
	|	ПартииМПЗиНДС.Партия КАК Партия,
	|	ПартииМПЗиНДС.ДокументРасчетов КАК РасчетныйДокумент,
	|	ПартииМПЗиНДС.Количество,
	|	ПартииМПЗиНДС.Сумма,
	|	ПартииМПЗиНДС.Валюта,
	|	ПартииМПЗиНДС.НДС,
	|	ПартииМПЗиНДС.ВалютнаяСумма,
	|	ПартииМПЗиНДС.ВалютныйНДС,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыПартийУСН.Купленные) КАК СтатусыПартийУСН,
	|	ПартииМПЗиНДС.СтатусыОплатыРасходовУСН КАК СтатусыОплатыРасходовУСН,
	|	ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.Принимаются) КАК ОтражениеВУСН
	|ИЗ
	|	ПартииМПЗиНДС КАК ПартииМПЗиНДС
	|ГДЕ
	|	ПартииМПЗиНДС.СчетУчета В(&СчетаУчетаМПЗ_НаСкладах)
	|	И ПартииМПЗиНДС.СчетУчета В (&СчетаУчетаМатериалов)
	|	И НЕ ПартииМПЗиНДС.ДокументРасчетов ССЫЛКА Документ.ПоступлениеДопРасходов
	|	И НЕ ПартииМПЗиНДС.ДокументРасчетов ССЫЛКА Документ.ГТДИмпорт
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПартииМПЗиНДС.НоменклатураНаименование,
	|	СчетУчета"
	;	

	Возврат Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции 
 

Функция ТекстЗапроса_ТаблицыВДокумент_МатериалыВПереработке(НомераТаблиц)

	НомераТаблиц.Вставить("Материалы__МатериалыПереданныеВПереработку", НомераТаблиц.Количество());
	
	Текст = 
	"ВЫБРАТЬ
	|	ПартииМПЗиНДС.СчетУчета КАК СчетУчета,
	|	ПартииМПЗиНДС.Номенклатура,
	|	ПартииМПЗиНДС.Партия КАК Партия,
	|	ПартииМПЗиНДС.ДокументРасчетов КАК РасчетныйДокумент,
	|	ПартииМПЗиНДС.Количество,
	|	ПартииМПЗиНДС.Сумма,
	|	ПартииМПЗиНДС.Валюта,
	|	ПартииМПЗиНДС.НДС,
	|	ПартииМПЗиНДС.ВалютнаяСумма,
	|	ПартииМПЗиНДС.ВалютныйНДС,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыПартийУСН.ВПереработке) КАК СтатусыПартийУСН,
	|	ПартииМПЗиНДС.СтатусыОплатыРасходовУСН КАК СтатусыОплатыРасходовУСН,
	|	ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.Принимаются) КАК ОтражениеВУСН
	|ИЗ
	|	ПартииМПЗиНДС КАК ПартииМПЗиНДС
	|ГДЕ
	|	ПартииМПЗиНДС.СчетУчета В(&СчетаУчетаМПЗ_Переданные)
	|	И ПартииМПЗиНДС.СчетУчета В (&СчетаУчетаМатериалов)
	|	И НЕ ПартииМПЗиНДС.ДокументРасчетов ССЫЛКА Документ.ПоступлениеДопРасходов
	|	И НЕ ПартииМПЗиНДС.ДокументРасчетов ССЫЛКА Документ.ГТДИмпорт
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПартииМПЗиНДС.НоменклатураНаименование,
	|	СчетУчета"
	;	

	Возврат Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции


Функция ТекстЗапроса_ТаблицыВДокумент_ТоварыНаСкладах(НомераТаблиц)

	НомераТаблиц.Вставить("Товары__НоменклатураНаСкладе", НомераТаблиц.Количество());
	
	Текст = 
	"ВЫБРАТЬ
	|	ПартииМПЗиНДС.СчетУчета КАК СчетУчета,
	|	ПартииМПЗиНДС.Номенклатура,
	|	ПартииМПЗиНДС.Партия КАК Партия,
	|	ПартииМПЗиНДС.ДокументРасчетов КАК РасчетныйДокумент,
	|	ПартииМПЗиНДС.Количество,
	|	ПартииМПЗиНДС.Сумма,
	|	ПартииМПЗиНДС.Валюта,
	|	ПартииМПЗиНДС.НДС,
	|	ПартииМПЗиНДС.ВалютнаяСумма,
	|	ПартииМПЗиНДС.ВалютныйНДС,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыПартийУСН.Купленные) КАК СтатусыПартийУСН,
	|	ПартииМПЗиНДС.СтатусыОплатыРасходовУСН КАК СтатусыОплатыРасходовУСН,
	|	ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.Принимаются) КАК ОтражениеВУСН
	|ИЗ
	|	ПартииМПЗиНДС КАК ПартииМПЗиНДС
	|ГДЕ
	|	ПартииМПЗиНДС.СчетУчета В (&СчетаУчетаТоваровНаСкладе)
	|	И НЕ ПартииМПЗиНДС.ДокументРасчетов ССЫЛКА Документ.ПоступлениеДопРасходов
	|	И НЕ ПартииМПЗиНДС.ДокументРасчетов ССЫЛКА Документ.ГТДИмпорт
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПартииМПЗиНДС.НоменклатураНаименование,
	|	СчетУчета"
	;	

	Возврат Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
	
КонецФункции


Функция ТекстЗапроса_ТаблицыВДокумент_ТоварыОтгруженные(НомераТаблиц)

	НомераТаблиц.Вставить("ТоварыОтгруженные__МПЗОтгруженные", НомераТаблиц.Количество());
	
	// выбираем без расчетного документа - такая информация для ввода нач. остатков не нужна
	
	Текст = 
	"ВЫБРАТЬ
	|	ПартииМПЗиНДС.СчетУчета КАК СчетУчета,
	|	ПартииМПЗиНДС.Номенклатура,
	|	ПартииМПЗиНДС.Партия КАК Партия,
	|	ПартииМПЗиНДС.Количество,
	|	ПартииМПЗиНДС.Сумма,
	|	ПартииМПЗиНДС.Валюта,
	|	ПартииМПЗиНДС.НДС,
	|	ПартииМПЗиНДС.ВалютнаяСумма,
	|	ПартииМПЗиНДС.ВалютныйНДС,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыПартийУСН.Купленные) КАК СтатусыПартийУСН,
	|	ПартииМПЗиНДС.СтатусыОплатыРасходовУСН КАК СтатусыОплатыРасходовУСН,
	|	ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.Принимаются) КАК ОтражениеВУСН
	|ИЗ
	|	ПартииМПЗиНДС КАК ПартииМПЗиНДС
	|ГДЕ
	|	ПартииМПЗиНДС.СчетУчета В (&СчетаУчетаТоваровОтгруженных)
	|	И НЕ ПартииМПЗиНДС.ДокументРасчетов ССЫЛКА Документ.ПоступлениеДопРасходов
	|	И НЕ ПартииМПЗиНДС.ДокументРасчетов ССЫЛКА Документ.ГТДИмпорт
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПартииМПЗиНДС.НоменклатураНаименование,
	|	СчетУчета"
	;	

	Возврат Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции // ТекстЗапроса_ТаблицыВДокумент_ТоварыОтгруженные()


Функция ТекстЗапроса_ТаблицыВДокумент_ТоварыАТТ(НомераТаблиц)

	НомераТаблиц.Вставить("Товары__ТоварыВРозничнойТорговлеАТТ", НомераТаблиц.Количество());
	
	Текст = 
	"ВЫБРАТЬ
	|	ПартииМПЗиНДС.СчетУчета КАК СчетУчета,
	|	ПартииМПЗиНДС.Номенклатура,
	|	ПартииМПЗиНДС.Партия КАК Партия,
	|	ПартииМПЗиНДС.ДокументРасчетов КАК РасчетныйДокумент,
	|	ПартииМПЗиНДС.Количество,
	|	ПартииМПЗиНДС.Сумма,
	|	ПартииМПЗиНДС.Валюта,
	|	ПартииМПЗиНДС.НДС,
	|	ПартииМПЗиНДС.ВалютнаяСумма,
	|	ПартииМПЗиНДС.ВалютныйНДС,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыПартийУСН.Купленные) КАК СтатусыПартийУСН,
	|	ПартииМПЗиНДС.СтатусыОплатыРасходовУСН КАК СтатусыОплатыРасходовУСН,
	|	ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.Принимаются) КАК ОтражениеВУСН
	|ИЗ
	|	ПартииМПЗиНДС КАК ПартииМПЗиНДС
	|ГДЕ
	|	ПартииМПЗиНДС.СчетУчета В(&СчетаУчетаТоваровАТТ)
	|	И НЕ ПартииМПЗиНДС.ДокументРасчетов ССЫЛКА Документ.ПоступлениеДопРасходов
	|	И НЕ ПартииМПЗиНДС.ДокументРасчетов ССЫЛКА Документ.ГТДИмпорт
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПартииМПЗиНДС.НоменклатураНаименование,
	|	СчетУчета"
	;	

	Возврат Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции // ТекстЗапроса_ТаблицыВДокумент_ТоварыАТТ()
 


Функция ТекстЗапроса_ТаблицыВДокумент_ДопРасходы(НомераТаблиц)

	НомераТаблиц.Вставить("ПрочиеРасходыНалоговогоУчетаУСНиИП__ДопРасходыУСН", НомераТаблиц.Количество());
	
	Текст = 
	"ВЫБРАТЬ
	|	ПартииМПЗиНДС.Партия КАК ДокументОприходования,
	|	ПартииМПЗиНДС.ДокументРасчетов КАК РасчетныйДокумент,
	|	ПартииМПЗиНДС.Валюта,
	|	ПартииМПЗиНДС.ВалютнаяСумма КАК Сумма,
	|	ПартииМПЗиНДС.ВалютныйНДС КАК НДС,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыРасходовУСН.НеСписаноНеОплачено) КАК СтатусыОплатыРасходовУСН,
	|	ЗНАЧЕНИЕ(Перечисление.ОтражениеВУСН.Принимаются) КАК ОтражениеВУСН,
	|	ВЫБОР
	|		КОГДА ПартииМПЗиНДС.ДокументРасчетов ССЫЛКА Документ.ПоступлениеДопРасходов
	|			ТОГДА ВЫРАЗИТЬ(ПартииМПЗиНДС.ДокументРасчетов КАК Документ.ПоступлениеДопРасходов).СпособРаспределения
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыРаспределенияДопРасходов.ПоСумме)
	|	КОНЕЦ КАК СпособРаспределения,
	|	ВЫБОР
	|		КОГДА ПартииМПЗиНДС.ДокументРасчетов ССЫЛКА Документ.ПоступлениеДопРасходов
	|			ТОГДА ВЫРАЗИТЬ(ПартииМПЗиНДС.ДокументРасчетов КАК Документ.ПоступлениеДопРасходов).Контрагент
	|		КОГДА ПартииМПЗиНДС.ДокументРасчетов ССЫЛКА Документ.ГТДИмпорт
	|			ТОГДА ВЫРАЗИТЬ(ПартииМПЗиНДС.ДокументРасчетов КАК Документ.ГТДИмпорт).Контрагент
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ПартииМПЗиНДС.ДокументРасчетов ССЫЛКА Документ.ПоступлениеДопРасходов
	|			ТОГДА ВЫРАЗИТЬ(ПартииМПЗиНДС.ДокументРасчетов КАК Документ.ПоступлениеДопРасходов).ДоговорКонтрагента
	|		КОГДА ПартииМПЗиНДС.ДокументРасчетов ССЫЛКА Документ.ГТДИмпорт
	|			ТОГДА ВЫБОР
	|					КОГДА ПартииМПЗиНДС.Валюта = &ВалютаРеглУчета
	|						ТОГДА ВЫРАЗИТЬ(ПартииМПЗиНДС.ДокументРасчетов КАК Документ.ГТДИмпорт).ДоговорКонтрагентаРегл
	|					ИНАЧЕ ВЫРАЗИТЬ(ПартииМПЗиНДС.ДокументРасчетов КАК Документ.ГТДИмпорт).ДоговорКонтрагента
	|				КОНЕЦ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДоговорКонтрагента
	|ИЗ
	|	ПартииМПЗиНДС КАК ПартииМПЗиНДС
	|ГДЕ
	|	ПартииМПЗиНДС.СчетУчета В (&СчетаВсехРасходовУСН)
	|	И (ПартииМПЗиНДС.ДокументРасчетов ССЫЛКА Документ.ПоступлениеДопРасходов
	|			ИЛИ ПартииМПЗиНДС.ДокументРасчетов ССЫЛКА Документ.ГТДИмпорт)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПартииМПЗиНДС.НоменклатураНаименование"
	;	

	Возврат Текст + ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();

КонецФункции // ТекстЗапроса_ТаблицыВДокумент_ДопРасходы()


// Процедуры и функции по созданию документов ввода остатков и служебных данных

Процедура СоздатьДокументыВводаОстатков(ТаблицыДляДокументов, СтруктураПараметров, Отказ)

	Перем ДокСлужебнаяПартия; // служебная партия - в случае учета "по средней" до перехода одна для всех видов ТМЦ и разделов учета
	
	МассивСозданныхДокументов = Новый Массив;
	СлужебнаяПартияСоздана = Ложь;
	
	НачатьТранзакцию();
	
	Попытка
		
		РанееСозданныеДокументыОстатков = НайтиРанееСозданныеДокументыВводаОстатков(СтруктураПараметров);
		
		Для каждого ДокументДляУдаления Из РанееСозданныеДокументыОстатков Цикл
			УдалитьДокументВводаОстатков(ДокументДляУдаления);
		КонецЦикла;
		
		ОбщиеРеквизитыВводаОстатков = СоздатьСтруктуруОбщихРеквизитовВводаОстатков(СтруктураПараметров);
		
		// Объект-"заготовка" для регистрации оплаты ОС и НМА
		ДокРегистрацияОплат = Документы.РегистрацияОплатыОсновныхСредствДляУСН.СоздатьДокумент();
		ЗаполнитьЗначенияСвойств(ДокРегистрацияОплат, ОбщиеРеквизитыВводаОстатков);
		ДокРегистрацияОплат.Дата = НачалоДня(СтруктураПараметров.ДатаПерехода); // оплаты регистрируем первым днем применения УСН
		
		// "Заготовка" для служебного документа партии
		ДокСлужебнаяПартия = Неопределено;
		
		// Создаем документы ввода начальных остатков для требующихся разделов учета
		РазделыУчета = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицыДляДокументов, "РазделУчетаДляВводаОстатков", Истина);
		
		Для каждого РазделУчета Из РазделыУчета Цикл
			
			ДокВводОстатков = Документы.ВводНачальныхОстатков.СоздатьДокумент();
			
			// Документы ввода остатков не должны сдвигать последовательность на последний день периода перед переходом,
			// иначе "Закрытие месяца" за прошлый месяц станет неактуальным и сдвинет актуальность операций перехода назад
			ДокВводОстатков.ДополнительныеСвойства.Вставить("ПроведенВХронологическойПоследовательности", Истина);
			
			ЗаполнитьЗначенияСвойств(ДокВводОстатков, ОбщиеРеквизитыВводаОстатков);
			ДокВводОстатков.РазделУчета = РазделУчета;
			
			ОтборРазделы = Новый Структура("РазделУчетаДляВводаОстатков", РазделУчета);
			СтрокиДанныхДляРаздела = ТаблицыДляДокументов.НайтиСтроки(ОтборРазделы);
			
			Для каждого СтрокаДанных Из СтрокиДанныхДляРаздела Цикл
				
				ЕстьРасчетныйДокумент     = НЕ (СтрокаДанных.ТаблицаДанных.Колонки.Найти("РасчетныйДокумент") = Неопределено);
				ЕстьПартия                = НЕ (СтрокаДанных.ТаблицаДанных.Колонки.Найти("Партия") = Неопределено);
				ЕстьДокументОприходования = НЕ (СтрокаДанных.ТаблицаДанных.Колонки.Найти("ДокументОприходования") = Неопределено);
				
				Если ЕстьРасчетныйДокумент ИЛИ ЕстьПартия ИЛИ ЕстьДокументОприходования Тогда
					
					ОбщийДокументРасчетов = СоздатьСлужебныйДокументРасчетов(СтруктураПараметров);
					МассивСозданныхДокументов.Добавить(ОбщийДокументРасчетов); 
					
					ИмяТЧ = СтрокаДанных.ИмяТабличнойЧасти;
					
					Для каждого СтрокаТаблицыДанных Из СтрокаДанных.ТаблицаДанных Цикл
						
						НоваяСтрокаВводаОстатков = ДокВводОстатков[ИмяТЧ].Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрокаВводаОстатков, СтрокаТаблицыДанных);
						
						Если ЕстьРасчетныйДокумент Тогда						
							Если НЕ ЗначениеЗаполнено(НоваяСтрокаВводаОстатков.РасчетныйДокумент) Тогда							
								НоваяСтрокаВводаОстатков.РасчетныйДокумент = ОбщийДокументРасчетов;
							КонецЕсли; 
						КонецЕсли;
						
						Если ЕстьПартия Тогда						
							Если НЕ ЗначениеЗаполнено(НоваяСтрокаВводаОстатков.Партия) Тогда
								// Если еще не создана партия - создадим
								Если НЕ СлужебнаяПартияСоздана Тогда						
									ДокСлужебнаяПартия = СоздатьСлужебныйДокументПартии(СтруктураПараметров);
									МассивСозданныхДокументов.Добавить(ДокСлужебнаяПартия);
									СлужебнаяПартияСоздана = Истина;
								КонецЕсли;
								НоваяСтрокаВводаОстатков.Партия = ДокСлужебнаяПартия;
							КонецЕсли; 
						КонецЕсли;
						
						Если ЕстьДокументОприходования Тогда						
							Если НЕ ЗначениеЗаполнено(НоваяСтрокаВводаОстатков.ДокументОприходования) Тогда
								// Если еще не создана партия - создадим
								Если НЕ СлужебнаяПартияСоздана Тогда						
									ДокСлужебнаяПартия = СоздатьСлужебныйДокументПартии(СтруктураПараметров);
									МассивСозданныхДокументов.Добавить(ДокСлужебнаяПартия);
									СлужебнаяПартияСоздана = Истина;
								КонецЕсли;
								НоваяСтрокаВводаОстатков.ДокументОприходования = ДокСлужебнаяПартия;
							КонецЕсли; 
						КонецЕсли;
						
					КонецЦикла; 
					
				Иначе
					ДокВводОстатков[СтрокаДанных.ИмяТабличнойЧасти].Загрузить(СтрокаДанных.ТаблицаДанных);
				КонецЕсли; 
				
			КонецЦикла; 
			
			ДокВводОстатков.Записать(РежимЗаписиДокумента.Проведение);
			
			МассивСозданныхДокументов.Добавить(ДокВводОстатков.Ссылка);
			
			// Создадим документы "Регистрация оплат ОС и НМА для УСН"
			Если РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ОсновныеСредства ИЛИ РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.НематериальныеАктивыИНИОКР Тогда
				
				ТабЧасть = ?(РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ОсновныеСредства, ДокРегистрацияОплат.Оплата, ДокРегистрацияОплат.ОплатаНМА);
				
				Для каждого СтрокаОС Из СтрокаДанных.ТаблицаДанных Цикл
					
					// Датой оплаты считаем дату принятия к учету
					// Сумма оплаты равна первоначальной стоимости для целей УСН, при неоплаченности ОС или НМА пользователю необходимо будет скорректировать строку вручную после завершения ввода остатков
					НоваяСтрокаОплат = ТабЧасть.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаОплат, СтрокаОС);
					НоваяСтрокаОплат.ДатаОплаты  = СтрокаОС.ДатаПринятияКУчетуРегл;
					НоваяСтрокаОплат.СуммаОплаты = СтрокаОС.ПервоначальнаяСтоимостьУСН;
				
				КонецЦикла; 	
			
			КонецЕсли; 
			
		КонецЦикла; 
		
		// если есть ОС или НМА - вводим регистрацию оплат
		Если ДокРегистрацияОплат.Оплата.Количество() + ДокРегистрацияОплат.ОплатаНМА.Количество() > 0 Тогда			
			
			ДокРегистрацияОплат.Записать(РежимЗаписиДокумента.Проведение);
			
			МассивСозданныхДокументов.Добавить(ДокРегистрацияОплат.Ссылка);
			
		КонецЕсли; 
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		СтрОшибки = ОписаниеОшибки();
		ТекстСообщения = НСтр("ru = 'Создание документов ввода начальных остатков не выполнено по причине: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, СтрОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , , , Отказ);
		
	КонецПопытки; 
	
	СтруктураПараметров.Вставить("СозданныеДокументы", МассивСозданныхДокументов);
	СтруктураПараметров.Вставить("ПартияДляОстатков",  ДокСлужебнаяПартия);
	
КонецПроцедуры // СоздатьДокументыВводаОстатков()

Функция СоздатьСтруктуруОбщихРеквизитовВводаОстатков(СтруктураПараметров)

	Реквизиты = Новый Структура;
	
	Реквизиты.Вставить("Дата", СтруктураПараметров.ДатаОкончанияПредыдущегоРежима);
	Реквизиты.Вставить("Организация", СтруктураПараметров.Организация);
	Реквизиты.Вставить("Ответственный", Пользователи.ТекущийПользователь());
	Реквизиты.Вставить("ОтражатьВБухгалтерскомУчете", Ложь);
	Реквизиты.Вставить("ОтражатьВНалоговомУчете", Истина);
	Реквизиты.Вставить("ОтражатьПоСпециальнымРегистрам", Ложь);
	
	ТекстКомментария = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Нстр("ru = '#Создан автоматически обработкой ""Заполнение начальных остатков для УСН"", дата создания - %1'"), 
		ТекущаяДатаСеанса());
	Реквизиты.Вставить("Комментарий", ТекстКомментария);
	
	Возврат Реквизиты;

КонецФункции // СоздатьСтруктуруОбщихРеквизитовВводаОстатков()


Функция СоздатьСлужебныйДокументРасчетов(СтруктураПараметров)

	ДокРасчетов = Документы.ДокументРасчетовСКонтрагентом.СоздатьДокумент();
	
	ДокРасчетов.Дата = СтруктураПараметров.ДатаОкончанияПредыдущегоРежима;
	ДокРасчетов.Организация = СтруктураПараметров.Организация;
	ТекстКомментария = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Нстр("ru = '#Создан автоматически обработкой ""Заполнение начальных остатков"", дата создания - %1'"),
		ТекущаяДатаСеанса());
    ДокРасчетов.Комментарий = ТекстКомментария;
	
	ДокРасчетов.Записать(РежимЗаписиДокумента.Запись);
	
	Возврат ДокРасчетов.Ссылка;
	
КонецФункции // СоздатьСлужебныйДокументРасчетов()

Функция СоздатьСлужебныйДокументПартии(СтруктураПараметров)

	ДокПартия = Документы.ДокументРасчетовСКонтрагентом.СоздатьДокумент();
	
	ДокПартия.Дата = СтруктураПараметров.ДатаОкончанияПредыдущегоРежима;
	ДокПартия.Организация = СтруктураПараметров.Организация;
	ТекстКомментария = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		Нстр("ru = '#Служебная партия, для ввода остатков. Создана автоматически обработкой ""Заполнение начальных остатков для УСН"", дата создания - %1'"), 
		ТекущаяДатаСеанса());
    ДокПартия.Комментарий = ТекстКомментария;
	
	ДокПартия.Записать(РежимЗаписиДокумента.Запись);
	
	Возврат ДокПартия.Ссылка;

КонецФункции // СоздатьСлужебныйДокументПартии()

Функция НайтиРанееСозданныеДокументыВводаОстатков(СтруктураПараметров)

	РанееСозданныеДокументы = Новый Массив;
	
		
	Запрос = Новый Запрос;
	
	Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДокументыОперацийИзмененияНалоговогоРежима.ДокументОперации
	|ИЗ
	|	РегистрСведений.ДокументыОперацийИзмененияНалоговогоРежима КАК ДокументыОперацийИзмененияНалоговогоРежима
	|ГДЕ
	|	ДокументыОперацийИзмененияНалоговогоРежима.Организация = &Организация
	|	И ДокументыОперацийИзмененияНалоговогоРежима.НаправлениеПерехода = ЗНАЧЕНИЕ(Перечисление.НаправленияИзмененийНалоговыхРежимов.ОСНнаУСН)
	|	И НАЧАЛОПЕРИОДА(ДокументыОперацийИзмененияНалоговогоРежима.ДатаПерехода, ДЕНЬ) = НАЧАЛОПЕРИОДА(&ДатаПерехода, ДЕНЬ)
	|	И ДокументыОперацийИзмененияНалоговогоРежима.ВидОперации = &ВидОперации"	
	;
	
	Запрос.Текст = Текст;
	
	Запрос.УстановитьПараметр("ДатаПерехода", СтруктураПараметров.ДатаПерехода);
	Запрос.УстановитьПараметр("Организация",  СтруктураПараметров.Организация);
	Запрос.УстановитьПараметр("ВидОперации",  СтруктураПараметров.ВидОперации);
	
	РанееСозданныеДокументы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДокументОперации");
	
	Возврат РанееСозданныеДокументы;

КонецФункции // НайтиРанееСозданныеДокументыВводаОстатков()

Процедура УдалитьДокументВводаОстатков(ДокументДляУдаления)

	ДокОбъект = ДокументДляУдаления.ПолучитьОбъект();
	
	// очистим регистрацию в последовательности,
	// чтобы не сбросилась актуальность выполненных регламентных операций месяца перед переходом
	НаборЗаписейПоследовательности = ДокОбъект.ПринадлежностьПоследовательностям.Найти("ДокументыОрганизаций");
	Если НаборЗаписейПоследовательности <> Неопределено Тогда
		
		НаборЗаписейПоследовательности.Очистить();
		НаборЗаписейПоследовательности.Записать();
		
		ДокОбъект.ДополнительныеСвойства.Вставить("НеИзменятьРегистрациюВПоследовательности", Истина);
		
	КонецЕсли;
	
	ДокОбъект.УстановитьПометкуУдаления(Истина);

КонецПроцедуры

// Вспомогательные процедуры и функции


Процедура УстановитьПараметрыЗапроса(Запрос, СтруктураПараметров)

	Для каждого КлючСтруктуры Из СтруктураПараметров Цикл		
		Запрос.УстановитьПараметр(КлючСтруктуры.Ключ, КлючСтруктуры.Значение);
	КонецЦикла; 

КонецПроцедуры // УстановитьПараметрыЗапроса()
 

Функция СоздатьСтруктуруОбщихПараметровЗапроса(СтруктураПараметров)
	
	ПараметрыЗапроса = Новый Структура;
	
	ПараметрыЗапроса.Вставить("ДатаОстатков", НачалоДня(СтруктураПараметров.ДатаОстатков));
	ПараметрыЗапроса.Вставить("ГраницаОборотов", Новый Граница(СтруктураПараметров.ДатаОкончанияПредыдущегоРежима, ВидГраницы.Включая));
	ПараметрыЗапроса.Вставить("Организация", СтруктураПараметров.Организация);	
	ПараметрыЗапроса.Вставить("ВалютаРеглУчета", СтруктураПараметров.ВалютаРеглУчета);	
	
	ВидыСубконтоВзаиморасчеты = Новый Массив;
	ВидыСубконтоВзаиморасчеты.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
	ВидыСубконтоВзаиморасчеты.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Договоры);
	ВидыСубконтоВзаиморасчеты.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами);
	
	ПараметрыЗапроса.Вставить("ВидыСубконтоВзаиморасчеты", ВидыСубконтоВзаиморасчеты);
	
	
	// получим все субсчета 60 и 76 счетов, не являющиеся группами, по которым необходимо извлекать остатки взаиморасчетов
	// обработаем возможную ситуацию, когда на 60-е и 76-е счета пользователи добавили свои субсчета
	// также исключим счета учета авансов - по ним остатков кредиторской задолженности не бывает
	ЗапросСчетаВзаиморасчетов = Новый Запрос;
	
	СчетаРасчетовПоставщики = Новый Массив;
	СчетаРасчетовПоставщики.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиИПодрядчиками);         // 60 счет - группа
	СчетаРасчетовПоставщики.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками); // 76.05 прочие поставщики, в руб.
	СчетаРасчетовПоставщики.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал); // 76.25 прочие поставщики, в валюте
	СчетаРасчетовПоставщики.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиУЕ); // 76.35 прочие поставщики, в у.е.
	
	ЗапросСчетаВзаиморасчетов.УстановитьПараметр("СчетаРасчетовПоставщики", СчетаРасчетовПоставщики);
	ЗапросСчетаВзаиморасчетов.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХозрасчетныйВидыСубконто.Ссылка КАК СчетВзаиморасчетов
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	НЕ ХозрасчетныйВидыСубконто.Ссылка.Забалансовый
	|	И НЕ ХозрасчетныйВидыСубконто.Ссылка.ЗапретитьИспользоватьВПроводках
	|	И ВЫБОР
	|			КОГДА ХозрасчетныйВидыСубконто.НомерСтроки = 3
	|				ТОГДА ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ДокументыРасчетовСКонтрагентами)
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	И ХозрасчетныйВидыСубконто.Ссылка В ИЕРАРХИИ (&СчетаРасчетовПоставщики)
	|	И НЕ ХозрасчетныйВидыСубконто.Ссылка.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)"
	;
		
	ПараметрыЗапроса.Вставить("СчетаРасчетовСПоставщиками", ЗапросСчетаВзаиморасчетов.Выполнить().Выгрузить().ВыгрузитьКолонку("СчетВзаиморасчетов"));

	// счета всех расходов УСН без групп
	СчетаВсехРасходовУСН = Новый Массив;
	СчетаВсехРасходовУСН.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);
	СчетаВсехРасходовУСН.Добавить(ПланыСчетов.Хозрасчетный.ВложенияВоВнеоборотныеАктивы);
	СчетаВсехРасходовУСН.Добавить(ПланыСчетов.Хозрасчетный.Материалы);
	СчетаВсехРасходовУСН.Добавить(ПланыСчетов.Хозрасчетный.Товары);
	СчетаВсехРасходовУСН.Добавить(ПланыСчетов.Хозрасчетный.ТоварыОтгруженные);
	СчетаВсехРасходовУСН.Добавить(ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов);
	
	УсловияОтбораСубсчетов = БухгалтерскийУчет.НовыеУсловияОтбораСубсчетов();
	УсловияОтбораСубсчетов.ИспользоватьВПроводках = Истина;
	СчетаВсехРасходовУСН = БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(СчетаВсехРасходовУСН, УсловияОтбораСубсчетов);
	
	ПараметрыЗапроса.Вставить("СчетаВсехРасходовУСН", СчетаВсехРасходовУСН);
	
	СчетаГруппыУчетаМПЗДляРасходовУСН = Новый Массив;
	СчетаГруппыУчетаМПЗДляРасходовУСН.Добавить(ПланыСчетов.Хозрасчетный.Материалы);
	СчетаГруппыУчетаМПЗДляРасходовУСН.Добавить(ПланыСчетов.Хозрасчетный.Товары);
	СчетаГруппыУчетаМПЗДляРасходовУСН.Добавить(ПланыСчетов.Хозрасчетный.ТоварыОтгруженные);	
	
	// получим счета учета собственных, переданных МПЗ, и материалов в эскплуатации
	ЗапросСчетаУчетаМПЗ = Новый Запрос;
	ЗапросСчетаУчетаМПЗ.УстановитьПараметр("СчетаМПЗ", СчетаГруппыУчетаМПЗДляРасходовУСН);
	
	ЗапросСчетаУчетаМПЗ.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХозрасчетныйВидыСубконто.Ссылка КАК СчетМПЗ
	|ПОМЕСТИТЬ СчетаУчетаМПЗ
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	НЕ ХозрасчетныйВидыСубконто.Ссылка.Забалансовый
	|	И НЕ ХозрасчетныйВидыСубконто.Ссылка.ЗапретитьИспользоватьВПроводках
	|	И НЕ ХозрасчетныйВидыСубконто.ТолькоОбороты
	|	И ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура)
	|	И ХозрасчетныйВидыСубконто.Ссылка В ИЕРАРХИИ(&СчетаМПЗ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаУчетаМПЗ.СчетМПЗ КАК СчетМПЗ_Переданные
	|ПОМЕСТИТЬ СчетаМПЗПереданные
	|ИЗ
	|	СчетаУчетаМПЗ КАК СчетаУчетаМПЗ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|		ПО СчетаУчетаМПЗ.СчетМПЗ = ХозрасчетныйВидыСубконто.Ссылка
	|			И (ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаУчетаМПЗ.СчетМПЗ КАК СчетМПЗ_МатериалыВЭксплуатации
	|ПОМЕСТИТЬ СчетаМПЗМатериалыВЭксплуатации
	|ИЗ
	|	СчетаУчетаМПЗ КАК СчетаУчетаМПЗ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|		ПО СчетаУчетаМПЗ.СчетМПЗ = ХозрасчетныйВидыСубконто.Ссылка
	|			И (ХозрасчетныйВидыСубконто.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПартииМатериаловВЭксплуатации))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаУчетаМПЗ.СчетМПЗ КАК СчетМПЗ_НаСкладах
	|ИЗ
	|	СчетаУчетаМПЗ КАК СчетаУчетаМПЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаМПЗПереданные КАК СчетаМПЗПереданные
	|		ПО СчетаУчетаМПЗ.СчетМПЗ = СчетаМПЗПереданные.СчетМПЗ_Переданные
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаМПЗМатериалыВЭксплуатации КАК СчетаМПЗМатериалыВЭксплуатации
	|		ПО СчетаУчетаМПЗ.СчетМПЗ = СчетаМПЗМатериалыВЭксплуатации.СчетМПЗ_МатериалыВЭксплуатации
	|ГДЕ
	|	СчетаМПЗПереданные.СчетМПЗ_Переданные ЕСТЬ NULL 
	|	И СчетаМПЗМатериалыВЭксплуатации.СчетМПЗ_МатериалыВЭксплуатации ЕСТЬ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаМПЗПереданные.СчетМПЗ_Переданные
	|ИЗ
	|	СчетаМПЗПереданные КАК СчетаМПЗПереданные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаМПЗМатериалыВЭксплуатации.СчетМПЗ_МатериалыВЭксплуатации
	|ИЗ
	|	СчетаМПЗМатериалыВЭксплуатации КАК СчетаМПЗМатериалыВЭксплуатации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаУчетаМПЗ.СчетМПЗ
	|ИЗ
	|	СчетаУчетаМПЗ КАК СчетаУчетаМПЗ
	|		ЛЕВОЕ СОЕДИНЕНИЕ СчетаМПЗМатериалыВЭксплуатации КАК СчетаМПЗМатериалыВЭксплуатации
	|		ПО СчетаУчетаМПЗ.СчетМПЗ = СчетаМПЗМатериалыВЭксплуатации.СчетМПЗ_МатериалыВЭксплуатации
	|ГДЕ
	|	СчетаМПЗМатериалыВЭксплуатации.СчетМПЗ_МатериалыВЭксплуатации ЕСТЬ NULL "
	;
	
	РезультатСчета = ЗапросСчетаУчетаМПЗ.ВыполнитьПакет();
	СчетаУчетаМПЗ_НаСкладах = РезультатСчета[3].Выгрузить().ВыгрузитьКолонку("СчетМПЗ_НаСкладах");
	СчетаУчетаМПЗ_Переданные  = РезультатСчета[4].Выгрузить().ВыгрузитьКолонку("СчетМПЗ_Переданные");
	СчетаУчетаМПЗ_МатериалыВЭксплуатации = РезультатСчета[5].Выгрузить().ВыгрузитьКолонку("СчетМПЗ_МатериалыВЭксплуатации");
	СчетаУчетаМПЗ_БезГрупп = РезультатСчета[6].Выгрузить().ВыгрузитьКолонку("СчетМПЗ");
		
	ПараметрыЗапроса.Вставить("СчетаУчетаМПЗ_НаСкладах", СчетаУчетаМПЗ_НаСкладах);
	ПараметрыЗапроса.Вставить("СчетаУчетаМПЗ_Переданные", СчетаУчетаМПЗ_Переданные);
	ПараметрыЗапроса.Вставить("СчетаУчетаМПЗ_МатериалыВЭксплуатации", СчетаУчетаМПЗ_МатериалыВЭксплуатации);
	ПараметрыЗапроса.Вставить("СчетаУчетаМПЗ_БезГрупп", СчетаУчетаМПЗ_БезГрупп);
	
	УсловияОтбораСубсчетов = БухгалтерскийУчет.НовыеУсловияОтбораСубсчетов();
	УсловияОтбораСубсчетов.ИспользоватьВПроводках = Истина;
	
	// Счета учета материалов
	СчетУчетаМатериалов = Новый Массив;
	СчетУчетаМатериалов.Добавить(ПланыСчетов.Хозрасчетный.Материалы);
	УсловияОтбораСубсчетов.СчетаИсключения = СчетаУчетаМПЗ_МатериалыВЭксплуатации;
	ПараметрыЗапроса.Вставить("СчетаУчетаМатериалов", БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(СчетУчетаМатериалов, УсловияОтбораСубсчетов));
	
	// Счет учета товаров в АТТ
	СчетаУчетаТоваровАТТ = Новый Массив;
	СчетаУчетаТоваровАТТ.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
	ПараметрыЗапроса.Вставить("СчетаУчетаТоваровАТТ", СчетаУчетаТоваровАТТ);
	
	// Счет учета торговой наценки в АТТ
	СчетаУчетаТорговойНаценкиАТТ = Новый Массив;
	СчетаУчетаТорговойНаценкиАТТ.Добавить(ПланыСчетов.Хозрасчетный.ТорговаяНаценкаАТТ);
	ПараметрыЗапроса.Вставить("СчетаУчетаТорговойНаценкиАТТ", СчетаУчетаТорговойНаценкиАТТ);
	
	// Счета учета товаров на складе
	СчетУчетаТоваровНаСкладе = Новый Массив;
	СчетУчетаТоваровНаСкладе.Добавить(ПланыСчетов.Хозрасчетный.Товары);
	УсловияОтбораСубсчетов.СчетаИсключения = Новый Массив;
	УсловияОтбораСубсчетов.СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахАТТ);
	УсловияОтбораСубсчетов.СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ТоварыВРозничнойТорговлеВПродажныхЦенахНТТ);
	ПараметрыЗапроса.Вставить("СчетаУчетаТоваровНаСкладе", БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(СчетУчетаТоваровНаСкладе, УсловияОтбораСубсчетов));
	
	// Счета учета товаров отгруженных 
	СчетУчетаТоваровОтгруженных = Новый Массив;
	СчетУчетаТоваровОтгруженных.Добавить(ПланыСчетов.Хозрасчетный.ТоварыОтгруженные);
	УсловияОтбораСубсчетов.СчетаИсключения = Новый Массив;
	УсловияОтбораСубсчетов.СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ГотоваяПродукцияОтгруженная);
	УсловияОтбораСубсчетов.СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.ПереданныеОбъектыНедвижимости);
	ПараметрыЗапроса.Вставить("СчетаУчетаТоваровОтгруженных", БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(СчетУчетаТоваровОтгруженных, УсловияОтбораСубсчетов));
	
	// Счета приобретения ОС
	СчетаПриобретенияОС = Новый Массив;
	СчетаПриобретенияОС.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеКомпонентовОсновныхСредств); // 08.04.1
	ПараметрыЗапроса.Вставить("СчетаПриобретенияОС", СчетаПриобретенияОС);
	
	// Счета приобретения НМА
	СчетаПриобретенияНМА = Новый Массив;
	СчетаПриобретенияНМА.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов); // 08.05
	ПараметрыЗапроса.Вставить("СчетаПриобретенияНМА", СчетаПриобретенияНМА);
	
	СчетаУчетаРБП = Новый Массив;
	СчетаУчетаРБП.Добавить(ПланыСчетов.Хозрасчетный.ПлатежиПоДобровольномуСтрахованиюРаботников); // 76.01.2
	СчетаУчетаРБП.Добавить(ПланыСчетов.Хозрасчетный.ПлатежиПоПрочимВидамСтрахования); // 76.01.9
	СчетаУчетаРБП.Добавить(ПланыСчетов.Хозрасчетный.РасходыБудущихПериодовНаДобровольноеСтрахованиеРаботников); // 97.02
	СчетаУчетаРБП.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасходыБудущихПериодов); // 97.21
	ПараметрыЗапроса.Вставить("СчетаУчетаРБП", СчетаУчетаРБП);
	
	// Счета учета налогов
	СчетаГруппыУчетаНалогов = Новый Массив;
	СчетаГруппыУчетаНалогов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоНалогам); 
	СчетаГруппыУчетаНалогов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию);
	
	УсловияОтбораСубсчетов.СчетаИсключения = Новый Массив;
	УсловияОтбораСубсчетов.СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.НДСпоЭкспортуКВозмещению);
	УсловияОтбораСубсчетов.СчетаИсключения.Добавить(ПланыСчетов.Хозрасчетный.НДСНалоговогоАгента);
	СчетаУчетаНалогов = БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(СчетаГруппыУчетаНалогов, УсловияОтбораСубсчетов);
	ПараметрыЗапроса.Вставить("СчетаУчетаНалогов", СчетаУчетаНалогов);
	
	// Счета учета расчетов с персоналом
	СчетаРасчетовСПерсоналом = Новый Массив;
	СчетаРасчетовСПерсоналом.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда);
	СчетаРасчетовСПерсоналом.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоДепонированнымСуммам);
	
	ПараметрыЗапроса.Вставить("СчетаУчетаРасчетовСПерсоналом", СчетаРасчетовСПерсоналом);
	
	// Счета расчетов с подотчетниками
	СчетаРасчетовСПодотчетниками = Новый Массив;
	СчетаРасчетовСПодотчетниками.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицами);
	СчетаРасчетовСПодотчетниками.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПодотчетнымиЛицамиВал);
	
	ПараметрыЗапроса.Вставить("СчетаУчетаРасчетовСПодотчетниками", СчетаРасчетовСПодотчетниками);
	
	// Виды ценностей для случая сложного учета НДС и запроса к регистру НДСПоПриобретеннымЦенностям
	ВидыЦенностейНДС_МПЗ = Новый Массив;
	ВидыЦенностейНДС_МПЗ.Добавить(Перечисления.ВидыЦенностей.Материалы);
	ВидыЦенностейНДС_МПЗ.Добавить(Перечисления.ВидыЦенностей.Оборудование);
	ВидыЦенностейНДС_МПЗ.Добавить(Перечисления.ВидыЦенностей.Товары);
	ВидыЦенностейНДС_МПЗ.Добавить(Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги); // для доп. расходов
	
	ПараметрыЗапроса.Вставить("ВидыЦенностейМПЗ", ВидыЦенностейНДС_МПЗ);

	Возврат ПараметрыЗапроса;
	
КонецФункции // СоздатьСтруктуруОбщихПараметровЗапроса()


Процедура УничтожитьВспомогательныеВременныеТаблицы(МенеджерВТ, ИменаТаблиц)

	Если ТипЗнч(ИменаТаблиц) = Тип("Массив") Тогда
	
		Если ИменаТаблиц.Количество()>0 Тогда
	
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
			
			ТекстЗапроса = "";
			
			Для каждого ИмяТаблицы Из ИменаТаблиц Цикл
			
				ТекстЗапроса = ТекстЗапроса + "
				|	УНИЧТОЖИТЬ " + ИмяТаблицы
				+ ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета();
			
			КонецЦикла; 
			
			Запрос.Текст = ТекстЗапроса;
			Запрос.Выполнить();
			
		КонецЕсли;
	
	КонецЕсли;  

КонецПроцедуры // УничтожитьВспомогательныеВременныеТаблицы()
 

#КонецЕсли
