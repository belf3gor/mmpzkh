
#Область ПояснениеКОбластямКода

// Текущая обработка является шаблонной. При внедрении обмена с новым производителем ПУ необходимо создать ее копию
// и поправить ряд механизмов.
//
// Все процедуры и функции разделены на 2 блока:
// 1. ПредположительноНеизменяемыеПроцедурыИФункции - при внедрении обмена с новым производителем ПУ механизмы,
// предположительно, не требуется изменять. Но лучше всё-таки еще раз перепроверить. Хотя бы бегло, т.к. могут быть
// нюансы, связанные с уникальностью механизмов обмена с тем или иным производителем.
//
// 2. ПроцедурыИФункцииКоторыеТребуетсяДорабатывать - процедуры и функции из этого блока требуется дорабатывать.

#КонецОбласти

#Область ПредположительноНеизменяемыеПроцедурыИФункции

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// временное скрытие функционала интеграции.
	Отказ = Истина;
	
	ЗаполнитьНастройки();
	
	ВыполнитьПереходПоСтраницам();
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма, Элементы.ГруппаЧастоЗадаваемыеВопросы);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Процедура - обработчик события "Нажатие" надписей формы.
//
Процедура НажатиеНаСведенияОбОрганизации(Элемент)
	
	КодОрганизации = Сред(Элемент.Подсказка, 28, СтрДлина(Элемент.Подсказка) - 28);
	
	СтрокиОрганизации = СведенияОбИНН.НайтиСтроки(Новый Структура("КодОрганизации", КодОрганизации));
	Если СтрокиОрганизации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаОрганизацию = СтрокиОрганизации.Получить(0).ОрганизацияСсылка;
	
	ПоказатьЗначение(,СсылкаНаОрганизацию);
	
КонецПроцедуры

&НаКлиенте
// Обработчик нажатия кнопки "Далее".
//
Процедура КомандаДалее(Команда)
	
	СведенияОбОшибке = "";
	
	Если ПереходВпередВозможен(СведенияОбОшибке) Тогда
		ВыполнитьПереходПоСтраницам("Вперед");
	КонецЕсли;
	
	ОбработатьСообщенияОбОшибках(СведенияОбОшибке);
	
КонецПроцедуры

&НаКлиенте
// Обработчик нажатия кнопки "Назад".
//
Процедура КомандаНазад(Команда)
	
	ВыполнитьПереходПоСтраницам("Назад");
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Нажатие" надписи с результатами проверки заводских номеров в справочнике "Счетчики".
Процедура СведенияОЗаводскихНомерахСчетчиковНажатие(Элемент)
	
	ФормаСписка = ПолучитьФорму("Справочник.КВП_Счетчики.ФормаСписка", , ЭтотОбъект);
	
	Если Не ВсегоСчетчиковБезЗаводскихНомеров = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.УстановитьЭлементОтбора(ФормаСписка.Список.КомпоновщикНастроек.Настройки.Отбор, "Ссылка", СчетчикиБезЗаводскихНомеров,
																ВидСравненияКомпоновкиДанных.ВСписке, , Истина, РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	КонецЕсли;
	
	ФормаСписка.Открыть();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" вида расписания обмена по регламентному заданию.
Процедура ВидНастройкиРасписанияОбменаПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементовРасписания();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Нажатие" на расписание регламентного задания.
Процедура РасписаниеРегламентногоЗаданияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(ПолучитьРасписаниеОбмена());
	Диалог.Показать(Новый ОписаниеОповещения("РасписаниеРегламентногоЗаданияНажатиеЗавершение", ЭтаФорма, Новый Структура("Диалог", Диалог)));
	
КонецПроцедуры

&НаКлиенте
// Обрабатывает оповещения об изменении расписания выгрузок.
//
Процедура РасписаниеРегламентногоЗаданияНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	
	Если ТипЗнч(Результат) = Тип("РасписаниеРегламентногоЗадания") Тогда
		УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.УстановитьРасписание(РегламентноеЗаданиеОбмена, Диалог.Расписание);
		РасписаниеРегламентногоЗадания = ПолучитьРасписаниеРегламентногоЗадания(РегламентноеЗаданиеОбмена, ВыполнятьОбменПоРасписанию);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик "ПриИзменении" тумблера "ПолеНовыйИлиИмеющийсяАккаунт".
//
Процедура ПолеНовыйИлиИмеющийсяАккаунтПриИзменении(Элемент)
	
	Если НовыйИлиИмеющийсяАккаунт = 0 Тогда
		Элементы.СтраницыРегистрацияНовогоАккаунта.ТекущаяСтраница = Элементы.ГруппаНовыйАккаунт;
	ИначеЕсли НовыйИлиИмеющийсяАккаунт = 1 Тогда
		Элементы.СтраницыРегистрацияНовогоАккаунта.ТекущаяСтраница = Элементы.ГруппаИмеющийсяАккаунт;
	КонецЕсли;
	
	Элементы.КнопкаДалее.Доступность = СогласиеНаРегистрацию;
	
КонецПроцедуры

&НаКлиенте
// Обработчик "ПриИзменении" флага "СогласиеНаРегистрацию".
Процедура СогласиеНаРегистрациюПриИзменении(Элемент)
	
	Элементы.КнопкаДалее.Доступность = СогласиеНаРегистрацию;
	
КонецПроцедуры

#КонецОбласти

#Область МеханизмыВзаимодействияСВебСервисом

&НаСервере
// Выполняет попытку регистрации или верификации аккаунта.
//
Функция ВыполнитьРегистрациюАккаунта(СведенияОбОшибке)
	
	Если НовыйИлиИмеющийсяАккаунт = 0 Тогда
		// Если регистрируем новый аккаунт.
		Возврат ВыполнитьОтправкуПараметровДоступаДляРегистрацииНаСервере(СведенияОбОшибке);
	ИначеЕсли НовыйИлиИмеющийсяАккаунт = 1 Тогда
		// Если подключаемся к действующему аккаунт.
		Возврат ВыполнитьВерификациюИмеющихсяПараметровДоступа(СведенияОбОшибке);
	КонецЕсли;
	
КонецФункции

&НаСервере
// Выполняет верификацию указанных параметров доступа.
//
Функция ВыполнитьВерификациюИмеющихсяПараметровДоступа(СведенияОбОшибке)
	
	Если ПроверитьПравильностьПараметровДоступаВерификация() Тогда
		СтруктураВерификации        = УПЖКХ_ВзаимодействиеССервисамиРарус.ПодготовитьСтруктуруРегистрации(ЛогинСуществующийАккаунт, ПарольСуществующийАккаунт, АдресЭлектроннойПочтыСуществующийАккаунт);
		ВерификацияВыполненаУспешно = УПЖКХ_ВзаимодействиеССервисамиРарус.ПровестиВерификациюАккаунта(СтруктураВерификации, СведенияОбОшибке);
		
		Возврат ВерификацияВыполненаУспешно;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
// Выполняет отправку кодового слова на сервис.
//
Функция ВыполнитьОтправкуКодовогоСловаДляОкончанияРегистрацииНаСервере(СведенияОбОшибке)
	
	СведенияОбОшибке = "";
	ВыполненоУспешно = Ложь;
	
	Если ПроверитьЗаполнениеКодовогоСлова() Тогда
		ВыполненоУспешно = УПЖКХ_ВзаимодействиеССервисамиРарус.ОтправитьКодовоеСловоНаСервер(КодовоеСловоДляРегистрации, СведенияОбОшибке);
	КонецЕсли;
	
	Возврат ВыполненоУспешно;
	
КонецФункции

&НаСервере
// Выполняет отправку параметров доступа для регистрации на сервисе.
//
Функция ВыполнитьОтправкуПараметровДоступаДляРегистрацииНаСервере(СведенияОбОшибке)
	
	Если ПроверитьПравильностьПараметровДоступа() Тогда
		СтруктураРегистрации = УПЖКХ_ВзаимодействиеССервисамиРарус.ПодготовитьСтруктуруРегистрации(Логин, Пароль, АдресЭлектроннойПочты, Телефон);
		
		Возврат УПЖКХ_ВзаимодействиеССервисамиРарус.ЗарегистрироватьсяНаСервисе(СтруктураРегистрации, СведенияОбОшибке);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

#Область РаботаСРегламентнымЗаданием

&НаКлиентеНаСервереБезКонтекста
// Управляет элементами страницы настройки расписаний.
//
Процедура УправлениеСтраницейНастройкиРасписанияАвтоматическогоОбмена(Форма)
	
	Элементы = Форма.Элементы;
	
	ВидНастройкиРасписанияОбмена = Форма.ВидНастройкиРасписанияОбмена;
	Элементы.РасписаниеРегламентногоЗадания.Доступность = ?(ВидНастройкиРасписанияОбмена = 1, Ложь, Истина);
	Элементы.РасписаниеРегламентногоЗадания.Видимость   = НЕ ВидНастройкиРасписанияОбмена = 0;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Формирует текстовое представление расписания регламентного задания.
Функция ПолучитьРасписаниеРегламентногоЗадания(ИдентификаторРегламентногоЗадания, ВыполнятьОбменПоРасписанию)
	
	Возврат УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.ПолучитьРасписаниеРегламентногоЗадания(ИдентификаторРегламентногоЗадания, ВыполнятьОбменПоРасписанию);
	
КонецФункции

#КонецОбласти

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервере
// Выполняет проверку корректности введенных параметров доступа для верификации.
//
Функция ПроверитьПравильностьПараметровДоступаВерификация()
	
	ПараметрыДоступаКорректны = Истина;
	
	Если ЛогинСуществующийАккаунт = "" Тогда
		Элементы.НадписьКорректностьЛогинаСуществующийАккаунт.Видимость = Истина;
		ПараметрыДоступаКорректны = Ложь;
	Иначе
		Элементы.НадписьКорректностьЛогинаСуществующийАккаунт.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(АдресЭлектроннойПочтыСуществующийАккаунт) Тогда
		Элементы.НадписьКорректностьЭлектроннойПочтыСуществующийАккаунт.Видимость = Ложь;
	Иначе
		Элементы.НадписьКорректностьЭлектроннойПочтыСуществующийАккаунт.Видимость = Истина;
		ПараметрыДоступаКорректны = Ложь;
	КонецЕсли;
	
	Если ПарольСуществующийАккаунт = "" Тогда
		Элементы.НадписьКорректностьПароляСуществующийАккаунт.Видимость = Истина;
		ПараметрыДоступаКорректны = Ложь;
	Иначе
		Элементы.НадписьКорректностьПароляСуществующийАккаунт.Видимость = Ложь;
	КонецЕсли;
	
	Возврат ПараметрыДоступаКорректны;
	
КонецФункции

&НаСервере
// Выполняет проверку корректности введенных параметров доступа.
//
Функция ПроверитьПравильностьПараметровДоступа()
	
	ПараметрыДоступаКорректны = Истина;
	
	Если Логин = "" Тогда
		Элементы.НадписьКорректностьЛогина.Видимость = Истина;
		ПараметрыДоступаКорректны = Ложь;
	Иначе
		Элементы.НадписьКорректностьЛогина.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(АдресЭлектроннойПочты) Тогда
		Элементы.НадписьКорректностьЭлектроннойПочты.Видимость = Ложь;
	Иначе
		Элементы.НадписьКорректностьЭлектроннойПочты.Видимость = Истина;
		ПараметрыДоступаКорректны = Ложь;
	КонецЕсли;
	
	Если Пароль = "" Тогда
		Элементы.НадписьКорректностьПароля.Видимость = Истина;
		ПараметрыДоступаКорректны = Ложь;
	Иначе
		Элементы.НадписьКорректностьПароля.Видимость = Ложь;
	КонецЕсли;
	
	Если НЕ Пароль = "" И (ПодтверждениеПароля = "" ИЛИ НЕ Пароль = ПодтверждениеПароля) Тогда
		Элементы.НадписьКорректностьПодтвержденногоПароля.Видимость = Истина;
		ПараметрыДоступаКорректны = Ложь;
	Иначе
		Элементы.НадписьКорректностьПодтвержденногоПароля.Видимость = Ложь;
	КонецЕсли;
	
	Возврат ПараметрыДоступаКорректны;
	
КонецФункции

&НаСервере
// Выполняет проверку заполнения кодового слова.
//
Функция ПроверитьЗаполнениеКодовогоСлова()
	
	Если КодовоеСловоДляРегистрации = "" Тогда
		Элементы.НадписьКорректностьКодовогоСлова.Видимость = Истина;
		
		Возврат Ложь;
	КонецЕсли;
	
	Элементы.НадписьКорректностьКодовогоСлова.Видимость = Ложь;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
// Выполняет переход на новую страницу помощника.
Процедура ВыполнитьПереходПоСтраницам(НаправлениеДвижения = "")
	
	// По умолчанию оставляем текущую страницу.
	// Это нужно для перехода на нужную страницу при открытии формы.
	СледующаяСтраница = ТекущаяСтраница;
	
	// Определяем страницу для переходя исходя из направления.
	Если НаправлениеДвижения = "Вперед" Тогда
		Если ТекущаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииССервисомСбораПоказанийСчетчиков.ГлавнаяСтраница Тогда
			СледующаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииССервисомСбораПоказанийСчетчиков.Регистрация;
		ИначеЕсли ТекущаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииССервисомСбораПоказанийСчетчиков.Регистрация Тогда
			// Сразу переходим на страницу проверки сведений в следующих случаях:
			// а) Если подключаемся к действующему аккаунту
			// б) Если в БД уже есть сведения об аккаунте (пользователь уже регистрировался в одном из наших сервисов)
			Если НовыйИлиИмеющийсяАккаунт = 1 Или ПользовательУжеИмеетАккаунт Тогда
				СледующаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииССервисомСбораПоказанийСчетчиков.ПроверкаСведений;
			Иначе
				СледующаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииССервисомСбораПоказанийСчетчиков.ПодтверждениеРегистрации;
			КонецЕсли;
		ИначеЕсли ТекущаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииССервисомСбораПоказанийСчетчиков.ПодтверждениеРегистрации Тогда
			СледующаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииССервисомСбораПоказанийСчетчиков.ПроверкаСведений;
		ИначеЕсли ТекущаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииССервисомСбораПоказанийСчетчиков.ПроверкаСведений Тогда
			СледующаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииССервисомСбораПоказанийСчетчиков.НастройкаРасписания;
		ИначеЕсли ТекущаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииССервисомСбораПоказанийСчетчиков.НастройкаРасписания Тогда
			СледующаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииССервисомСбораПоказанийСчетчиков.ЗавершениеНастройки;
		ИначеЕсли ТекущаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииССервисомСбораПоказанийСчетчиков.ЗавершениеНастройки Тогда
			СледующаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииССервисомСбораПоказанийСчетчиков.УправлениеОбменами;
		КонецЕсли;
		
	ИначеЕсли НаправлениеДвижения = "Назад" Тогда
		Если ТекущаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииССервисомСбораПоказанийСчетчиков.Регистрация Тогда
			СледующаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииССервисомСбораПоказанийСчетчиков.ГлавнаяСтраница;
		ИначеЕсли ТекущаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииССервисомСбораПоказанийСчетчиков.НастройкаРасписания Тогда
			СледующаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииССервисомСбораПоказанийСчетчиков.ПроверкаСведений;
		ИначеЕсли ТекущаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииССервисомСбораПоказанийСчетчиков.ЗавершениеНастройки Тогда
			СледующаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииССервисомСбораПоказанийСчетчиков.НастройкаРасписания;
		КонецЕсли;
	КонецЕсли;
	
	// Выполняем переход.
	Если СледующаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииССервисомСбораПоказанийСчетчиков.ГлавнаяСтраница Тогда
		ПерейтиНаГлавнуюСтраницу();
	ИначеЕсли СледующаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииССервисомСбораПоказанийСчетчиков.Регистрация Тогда
		ПерейтиНаСтраницуРегистрации();
	ИначеЕсли СледующаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииССервисомСбораПоказанийСчетчиков.ПодтверждениеРегистрации Тогда
		ПерейтиНаСтраницуПодтвержденияРегистрации();
	ИначеЕсли СледующаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииССервисомСбораПоказанийСчетчиков.ПроверкаСведений Тогда
		ПерейтиНаСтраницуПроверкиСведений();
	ИначеЕсли СледующаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииССервисомСбораПоказанийСчетчиков.НастройкаРасписания Тогда
		ПерейтиНаСтраницуНастройкиРасписания();
	ИначеЕсли СледующаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииССервисомСбораПоказанийСчетчиков.ЗавершениеНастройки Тогда
		ПерейтиНаСтраницуЗавершенияНастройки();
	ИначеЕсли СледующаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииССервисомСбораПоказанийСчетчиков.УправлениеОбменами Тогда
		ПерейтиНаСтраницуУправленияОбменом();
	КонецЕсли;
	
	ТекущаяСтраница = СледующаяСтраница;
	
	// Сохраняем текущее состояние.
	СохранитьНастройкиИнтеграции();
	
КонецПроцедуры

&НаСервере
// Выполняет переход на стартовую страницу.
Процедура ПерейтиНаГлавнуюСтраницу()
	
	Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтартоваяСтраница;
	
	Элементы.ПанельПодвал.Видимость = Истина;
	
	Элементы.КнопкаНазад.Видимость  = Ложь;
	Элементы.КнопкаДалее.Видимость  = Истина;
	Элементы.КнопкаОтмена.Видимость = Истина;
	
	Элементы.КнопкаДалее.Доступность = Истина;
	
	Элементы.КнопкаОтмена.Заголовок = "Отмена";
	Элементы.КнопкаДалее.Заголовок  = "Далее >>";
	
	Элементы.НадписьПодвалДалее.Видимость      = Истина;
	Элементы.НадписьПодвалЗавершение.Видимость = Ложь;
	
	ВыделитьЗаголовокТекущейСтраницы();
	
КонецПроцедуры

&НаСервере
// Выполняет переход на страницу регистрации.
Процедура ПерейтиНаСтраницуРегистрации()
	
	Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаРегистрации;
	
	Элементы.ПанельПодвал.Видимость = Истина;
	Элементы.КнопкаНазад.Видимость  = Истина;
	Элементы.КнопкаДалее.Видимость  = Истина;
	Элементы.КнопкаОтмена.Видимость = Истина;
	
	Элементы.КнопкаОтмена.Заголовок = "Отмена";
	Элементы.КнопкаДалее.Заголовок  = "Далее >>";
	
	Элементы.НадписьПодвалДалее.Видимость      = Истина;
	Элементы.НадписьПодвалЗавершение.Видимость = Ложь;
	
	Элементы.КнопкаДалее.Доступность = СогласиеНаРегистрацию;
	
	// Если в БД уже есть сведения об аккаунте пользователя (пользователь уже регистрировался в одном из наших сервисов), пропускаем шаг регистрации.
	ИмеющиесяПараметры = УПЖКХ_ВзаимодействиеССервисамиРарус.ПараметрыДоступаБазыКСервисамРарус();
	Если (ИмеющиесяПараметры.Свойство("Логин") И Не ПустаяСтрока(ИмеющиесяПараметры.Логин)) И (ИмеющиесяПараметры.Свойство("Email") И Не ПустаяСтрока(ИмеющиесяПараметры.Email)) Тогда
		Элементы.ГруппаРегистрация.Видимость                = Ложь;
		Элементы.ГруппаПредупреждениеОРегистрации.Видимость = Истина;
		
		Элементы.СохраненныйЛогин.Заголовок                 = "Логин: " + ИмеющиесяПараметры.Логин;
		Элементы.СохраненныйАдресЭлектроннойПочты.Заголовок = "Адрес электронной почты: " + ИмеющиесяПараметры.Email;
		
		ПользовательУжеИмеетАккаунт = Истина;
	Иначе
		Элементы.ГруппаРегистрация.Видимость                = Истина;
		Элементы.ГруппаПредупреждениеОРегистрации.Видимость = Ложь;
		
		ПользовательУжеИмеетАккаунт = Ложь;
	КонецЕсли;
	
	ВыделитьЗаголовокТекущейСтраницы();
	
КонецПроцедуры

&НаСервере
// Выполняет переход на страницу подтверждения регистрации.
Процедура ПерейтиНаСтраницуПодтвержденияРегистрации()
	
	Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаПодтверждениеРегистрации;
	
	Элементы.ПанельПодвал.Видимость = Истина;
	
	Элементы.КнопкаНазад.Видимость  = Ложь;
	Элементы.КнопкаДалее.Видимость  = Истина;
	Элементы.КнопкаОтмена.Видимость = Истина;
	
	Элементы.КнопкаОтмена.Заголовок = "Отмена";
	Элементы.КнопкаДалее.Заголовок  = "Далее >>";
	
	Элементы.НадписьПодвалДалее.Видимость      = Истина;
	Элементы.НадписьПодвалЗавершение.Видимость = Ложь;
	
	ВыделитьЗаголовокТекущейСтраницы();
	
КонецПроцедуры

&НаСервере
// Выполняет переход на страницу проверки сведений, необходимых для обмена.
Процедура ПерейтиНаСтраницуПроверкиСведений()
	
	УПЖКХ_ИнтеграцияССервисамиСбораПоказанийСчетчиковВзаимодействиеСБазойДанных.ЗаполнитьСведенияОбОрганизациях(СведенияОбИНН);
	УПЖКХ_ИнтеграцияССервисамиСбораПоказанийСчетчиковВзаимодействиеСБазойДанных.ЗаполнитьСведенияОСчетчиках(ВсегоСчетчиков, СчетчикиБезЗаводскихНомеров, ВсегоСчетчиковБезЗаводскихНомеров);
	
	// Проверка наличия ИНН в справочнике "Организации".
	ДобавитьНаФормуСведенияОПроверкеОрганизаций();
	
	// Проверка наличия заводских номеров в справочнике "Счетчики".
	Элементы.СведенияОЗаводскихНомерахСчетчиков.Заголовок = "Всего счетчиков: " + ВсегоСчетчиков + ". В том числе счетчиков без заводских номеров: " + ВсегоСчетчиковБезЗаводскихНомеров + ".";
	Элементы.СведенияОЗаводскихНомерахСчетчиков.ЦветТекста = ?(ВсегоСчетчиковБезЗаводскихНомеров = 0, ЦветаСтиля.УПЖКХ_ТекстСообщенияИнформации, ЦветаСтиля.УПЖКХ_ТекстСообщенияОПроблемах);
	
	Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаПроверкиСведенияВБД;
	
	Элементы.ПанельПодвал.Видимость = Истина;
	
	Элементы.КнопкаНазад.Видимость  = Ложь;
	Элементы.КнопкаДалее.Видимость  = Истина;
	Элементы.КнопкаОтмена.Видимость = Истина;
	
	Элементы.КнопкаОтмена.Заголовок = "Отмена";
	Элементы.КнопкаДалее.Заголовок  = "Далее >>";
	
	Элементы.НадписьПодвалДалее.Видимость      = Истина;
	Элементы.НадписьПодвалЗавершение.Видимость = Ложь;
	
	ВыделитьЗаголовокТекущейСтраницы();
	
КонецПроцедуры

&НаСервере
// Выполняет переход на страницу настройки расписания регламентного задания.
Процедура ПерейтиНаСтраницуНастройкиРасписания()
	
	Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаНастройкиРасписания;
	
	Элементы.КнопкаНазад.Видимость  = Истина;
	Элементы.КнопкаДалее.Видимость  = Истина;
	Элементы.КнопкаОтмена.Видимость = Истина;
	
	Элементы.КнопкаОтмена.Заголовок = "Отмена";
	Элементы.КнопкаДалее.Заголовок  = "Далее >>";
	
	Элементы.НадписьПодвалДалее.Видимость      = Истина;
	Элементы.НадписьПодвалЗавершение.Видимость = Ложь;
	
	ИнициализироватьНастройкиРегламентногоЗадания();
	
	СохранитьНастройкиИнтеграции();
	
	ВыделитьЗаголовокТекущейСтраницы();
	
КонецПроцедуры

&НаСервере
// Выполняет переход на страницу завершения настройки.
Процедура ПерейтиНаСтраницуЗавершенияНастройки()
	
	КонтактнаяИнформацияДокумент = УПЖКХ_ВзаимодействиеССервисамиРарус.ПолучитьФорматированныйДокументСНашимиКонтактнымиДанными();
	
	Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаЗавершенияНастройки;
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Элементы.НадписьЗавершениеНастройки.Заголовок, "#");
	
	Если МассивПодстрок.Количество() >= 5 Тогда
		
		Элементы.НадписьЗавершениеНастройки.Заголовок = Новый ФорматированнаяСтрока(Новый ФорматированнаяСтрока(МассивПодстрок[0],,),
																					Новый ФорматированнаяСтрока(Строка(УПЖКХ_ОбщегоНазначенияСервер.ПолучитьКоличествоЛСВБазе()) + " " + МассивПодстрок[1], Новый Шрифт( , , Истина), Новый Цвет(0, 128, 0)),
																					Новый ФорматированнаяСтрока(МассивПодстрок[2], ,),
																					Новый ФорматированнаяСтрока(МассивПодстрок[3], , , , "https://vgkh.ru/jsk/jkh/mercury"),
																					Новый ФорматированнаяСтрока(МассивПодстрок[4], ,));
		
	КонецЕсли;
	
	Элементы.ПанельПодвал.Видимость = Истина;
	
	Элементы.КнопкаНазад.Видимость = Истина;
	Элементы.КнопкаДалее.Видимость = Истина;
	
	Элементы.КнопкаОтмена.Заголовок = "Отмена";
	Элементы.КнопкаДалее.Заголовок  = "Завершить настройку";
	
	Элементы.НадписьПодвалДалее.Видимость      = Ложь;
	Элементы.НадписьПодвалЗавершение.Видимость = Истина;
	
	ВыделитьЗаголовокТекущейСтраницы();
	
КонецПроцедуры

&НаСервере
// Выполняет переход на финальную страницу.
Процедура ПерейтиНаСтраницуУправленияОбменом()
	
	Элементы.ГруппаПолосаПрогресса.Видимость = Ложь;
	
	Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаУправленияИнтеграцией;
	
	Элементы.ПанельПодвал.Видимость = Ложь;
	
	Элементы.КнопкаНазад.Видимость = Ложь;
	Элементы.КнопкаДалее.Видимость = Ложь;
	
	Элементы.КнопкаОтмена.Заголовок = "Закрыть";
	
	СведенияОПодписке = УПЖКХ_ВзаимодействиеССервисамиРарус.ПолучитьСведенияОПодписке();
	
	ВывестиНаФормуСведенияОПодписке(СведенияОПодписке);
	
КонецПроцедуры

&НаСервере
// Выполняет выделение заголовка текущей страницы и смещение полосы индикатора.
//
Процедура ВыделитьЗаголовокТекущейСтраницы()
	
	// Обнуляем форматирование всех надписей.
	Элементы.НадписьНачало.Шрифт      = Новый Шрифт(,12,Ложь);
	Элементы.НадписьРегистрация.Шрифт = Новый Шрифт(,12,Ложь);
	Элементы.НадписьНастройка.Шрифт   = Новый Шрифт(,12,Ложь);
	Элементы.НадписьПроверкаБД.Шрифт  = Новый Шрифт(,12,Ложь);
	Элементы.НадписьЗавершение.Шрифт  = Новый Шрифт(,12,Ложь);
	
	Элементы.НадписьНачало.ЦветТекста      = ЦветаСтиля.ЦветТекстаФормы;
	Элементы.НадписьРегистрация.ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
	Элементы.НадписьНастройка.ЦветТекста   = ЦветаСтиля.ЦветТекстаФормы;
	Элементы.НадписьПроверкаБД.ЦветТекста  = ЦветаСтиля.ЦветТекстаФормы;
	Элементы.НадписьЗавершение.ЦветТекста  = ЦветаСтиля.ЦветТекстаФормы;
	
	// Изменяем форматирование нужной страницы.
	Если СледующаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииССервисомСбораПоказанийСчетчиков.ГлавнаяСтраница Тогда
		
		ЗначениеПолосыПрогресса = 16;
		
		Элементы.НадписьНачало.Шрифт = Новый Шрифт(,12,Истина);
		Элементы.НадписьНачало.ЦветТекста = Новый Цвет(0, 150, 70);
		
	ИначеЕсли СледующаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииССервисомСбораПоказанийСчетчиков.Регистрация Тогда
		
		ЗначениеПолосыПрогресса = 26;
		
		Элементы.НадписьРегистрация.Шрифт = Новый Шрифт(,12,Истина);
		Элементы.НадписьРегистрация.ЦветТекста = Новый Цвет(0, 150, 70);
		
	ИначеЕсли СледующаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииССервисомСбораПоказанийСчетчиков.ПодтверждениеРегистрации Тогда
		
		ЗначениеПолосыПрогресса = 36;
		
		Элементы.НадписьРегистрация.Шрифт = Новый Шрифт(,12,Истина);
		Элементы.НадписьРегистрация.ЦветТекста = Новый Цвет(0, 150, 70);
		
	ИначеЕсли СледующаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииССервисомСбораПоказанийСчетчиков.ПроверкаСведений Тогда
		
		ЗначениеПолосыПрогресса = 57;
		
		Элементы.НадписьПроверкаБД.Шрифт = Новый Шрифт(,12,Истина);
		Элементы.НадписьПроверкаБД.ЦветТекста = Новый Цвет(0, 150, 70);
		
	ИначеЕсли СледующаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииССервисомСбораПоказанийСчетчиков.НастройкаРасписания Тогда
		
		ЗначениеПолосыПрогресса = 79;
		
		Элементы.НадписьНастройка.Шрифт = Новый Шрифт(,12,Истина);
		Элементы.НадписьНастройка.ЦветТекста = Новый Цвет(0, 150, 70);
		
	ИначеЕсли СледующаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииССервисомСбораПоказанийСчетчиков.ЗавершениеНастройки Тогда
		
		ЗначениеПолосыПрогресса = 100;
		
		Элементы.НадписьЗавершение.Шрифт = Новый Шрифт(,12,Истина);
		Элементы.НадписьЗавершение.ЦветТекста = Новый Цвет(0, 150, 70);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Выводит на форму управления обменом сведения о текущем статусе подписки.
Процедура ВывестиНаФормуСведенияОПодписке(СведенияОПодписке)
	
	Если СведенияОПодписке.УдалосьПолучитьСведенияОПодписке Тогда
		Если СведенияОПодписке.ПодпискаОформлена Тогда
			ТипПодписки = ?(ПустаяСтрока(СведенияОПодписке.ТипЛицензии), "", " " + СведенияОПодписке.ТипЛицензии + ".");
			
			// Если срок действия подписки скоро истекает, предупреждаем об этом пользователя.
			Если ПодпискаЗакончитсяРаньшеЧемЧерезМесяц(СведенияОПодписке.СрокОкончанияДействияПодписки) Тогда
				Элементы.ГруппаНеУдалосьПолучитьСведенияОПодписке.Видимость = Ложь;
				Элементы.ГруппаПодпискаНеОформлена.Видимость                = Ложь;
				Элементы.ГруппаПодискаСкороЗакончится.Видимость             = Истина;
				Элементы.ГруппаПодпискаОформлена.Видимость                  = Ложь;
				
				Элементы.НадписьСведенияОПодпискеСкороЗакончится.Заголовок = СтрЗаменить(Элементы.НадписьСведенияОПодпискеСкороЗакончится.Заголовок, "[Дата]", 
																						 Формат(СведенияОПодписке.СрокОкончанияДействияПодписки, "ДФ='dd.MM.yyyy ""г""'"));
				Элементы.НадписьСведенияОПодпискеСкороЗакончится.Заголовок = СтрЗаменить(Элементы.НадписьСведенияОПодпискеСкороЗакончится.Заголовок, "[ТипПодписки]", ТипПодписки);
				
			Иначе
				// Если всё в порядке, выводим дату окончания действия подписки.
				Элементы.ГруппаНеУдалосьПолучитьСведенияОПодписке.Видимость = Ложь;
				Элементы.ГруппаПодпискаНеОформлена.Видимость                = Ложь;
				Элементы.ГруппаПодискаСкороЗакончится.Видимость             = Ложь;
				Элементы.ГруппаПодпискаОформлена.Видимость                  = Истина;
				
				Элементы.НадписьСведенияОПодпискеОформлена.Заголовок = СтрЗаменить(Элементы.НадписьСведенияОПодпискеОформлена.Заголовок, "[Дата]", 
																				   Формат(СведенияОПодписке.СрокОкончанияДействияПодписки, "ДФ='dd.MM.yyyy ""г""'"));
				Элементы.НадписьСведенияОПодпискеОформлена.Заголовок = СтрЗаменить(Элементы.НадписьСведенияОПодпискеОформлена.Заголовок, "[ТипПодписки]", ТипПодписки);
			КонецЕсли;
			
		Иначе
			// Если подписка не оформлена или истек срок действия.
			Элементы.ГруппаНеУдалосьПолучитьСведенияОПодписке.Видимость = Ложь;
			Элементы.ГруппаПодпискаНеОформлена.Видимость                = Истина;
			Элементы.ГруппаПодискаСкороЗакончится.Видимость             = Ложь;
			Элементы.ГруппаПодпискаОформлена.Видимость                  = Ложь;
		КонецЕсли;
		
	Иначе
		// Если не смогли получить сведения о подписке (напр., в силу проблем на сервисе)
		Элементы.ГруппаНеУдалосьПолучитьСведенияОПодписке.Видимость = Истина;
		Элементы.ГруппаПодпискаНеОформлена.Видимость                = Ложь;
		Элементы.ГруппаПодискаСкороЗакончится.Видимость             = Ложь;
		Элементы.ГруппаПодпискаОформлена.Видимость                  = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Проверяет срок окончания действия подписки.
Функция ПодпискаЗакончитсяРаньшеЧемЧерезМесяц(СрокОкончанияДействияПодписки)
	
	ОставшеесяВремяВСекундах = СрокОкончанияДействияПодписки - ТекущаяДата();
	ОставшеесяВремяВДнях     = ОставшеесяВремяВСекундах/(60 * 60 * 24);
	
	Возврат ОставшеесяВремяВДнях < 30;
	
КонецФункции

&НаСервере
// Выводит на форму элементы с результатами проверки ИНН в организациях.
Процедура ДобавитьНаФормуСведенияОПроверкеОрганизаций()
	
	Для Каждого ТекущаяОрганизация Из СведенияОбИНН Цикл
		НазваниеЭлемента = "Организация" + СтрЗаменить(ТекущаяОрганизация.КодОрганизации, "-", "");
		Элемент = Элементы.Найти(НазваниеЭлемента);
		Если Не Элемент = Неопределено Тогда
			Элементы.Удалить(Элемент);
		КонецЕсли;
		
		Надпись = Элементы.Добавить(НазваниеЭлемента, Тип("ДекорацияФормы"), Элементы.ГруппаПроверкаИНН);
		Надпись.Вид = ВидДекорацииФормы.Надпись;
		Надпись.Гиперссылка = Истина;
		надпись.Подсказка   = "Перейти к организации (код " + ТекущаяОрганизация.КодОрганизации + ")";
		Надпись.Заголовок   = ТекущаяОрганизация.ОрганизацияНаименование + ": ИНН " + ?(ТекущаяОрганизация.ИННЗаполнен, "указан", "не указан") + ".";
		Надпись.ЦветТекста  = ?(ТекущаяОрганизация.ИННЗаполнен, ЦветаСтиля.УПЖКХ_ТекстСообщенияИнформации, ЦветаСтиля.УПЖКХ_ТекстСообщенияОПроблемах);
		Надпись.УстановитьДействие("Нажатие", "НажатиеНаСведенияОбОрганизации");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Обрабатывает сообщения об ошибках.
//
Процедура ОбработатьСообщенияОбОшибках(ОписаниеОшибок)
	
	Если ТипЗнч(ОписаниеОшибок) = Тип("Строка") Тогда
		
		Если НЕ ОписаниеОшибок = "" Тогда
			ВывестиСообщениеОбОшибке(ОписаниеОшибок);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ОписаниеОшибок) = Тип("Массив") Тогда
		
		Для каждого ТекСтрока из ОписаниеОшибок Цикл
			Если ТипЗнч(ТекСтрока) = Тип("Строка") Тогда
				ВывестиСообщениеОбОшибке(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Выводит диалоговое окно предупреждения с описанием ошибки.
//
Процедура ВывестиСообщениеОбОшибке(ТекстСообщения)
	
	ПоказатьПредупреждение(, ТекстСообщения);
	
КонецПроцедуры

&НаСервере
// Проверяет возможность перехода на следующую страницу.
//
Функция ПереходВпередВозможен(СведенияОбОшибке)
	
	Если ТекущаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииССервисомСбораПоказанийСчетчиков.Регистрация И Не ПользовательУжеИмеетАккаунт Тогда
		Возврат ВыполнитьРегистрациюАккаунта(СведенияОбОшибке);
		
	ИначеЕсли ТекущаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииССервисомСбораПоказанийСчетчиков.ПодтверждениеРегистрации Тогда
		Возврат ВыполнитьОтправкуКодовогоСловаДляОкончанияРегистрацииНаСервере(СведенияОбОшибке);
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
// Открывает страницу условий пользования сервисом моб. приложения.
//
Процедура КомандаУсловияПользованияСервисом(Команда)
	
	ПараметрыДляПередачи = Новый Структура("ЗаголовокФормы, АдресСтраницы", "Условия пользования сервисом", УПЖКХ_ВзаимодействиеССервисамиРарус.ПолучитьАдресСтраницыСУсловиямиПользованияСервисами());
	
	ОткрытьФорму("Обработка.УПЖКХ_ИнтеграцияСМобильнымПриложением.Форма.ФормаОткрытияHtmlСтраниц", ПараметрыДляПередачи, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Отправляет кодовое слово на тот же email повторно.
//
Процедура КомандаОтправитьКодовоеСловоПовторно(Команда)
	
	СведенияОбОшибке = "";
	
	УПЖКХ_ВзаимодействиеССервисамиРарус.ОтправитьКодовоеСловоПовторно(СведенияОбОшибке);
	
	ОбработатьСообщенияОбОшибках(СведенияОбОшибке);
	
КонецПроцедуры

&НаКлиенте
// Открывает меню изменения email'a пользователя.
//
Процедура КомандаУказатьДругойEmail(Команда)
	
	Элементы.ГруппаПодтверждениеРегистрации.Видимость       = Ложь;
	Элементы.ГруппаПовторнаяОтправкаКодовогоСлова.Видимость = Ложь;
	Элементы.ГруппаИзменениеЭлектроннойПочты.Видимость      = Истина;
	Элементы.КнопкаДалее.Доступность                        = Ложь;
	Элементы.НадписьКорректностьИзменяемойПочты.Видимость   = Ложь;
	Элементы.НадписьКорректностьКодовогоСлова.Видимость     = Ложь;
	
	ПараметрыДоступа = УПЖКХ_ВзаимодействиеССервисамиРарус.ПараметрыДоступаБазыКСервисамРарус();
	Если ТипЗнч(ПараметрыДоступа) = Тип("Структура") И ПараметрыДоступа.Свойство("Email") Тогда
		АдресЭлектроннойПочтыДляИзменения = ПараметрыДоступа.Email;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Отправляет новый email на сервис. Кодовое слово будет отправлено автоматически.
//
Процедура КомандаОтправитьНовыйEmail(Команда)
	
	Если НЕ ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(АдресЭлектроннойПочтыДляИзменения) Тогда
		Элементы.НадписьКорректностьИзменяемойПочты.Видимость = Истина;
		
	Иначе
		СведенияОбОшибке = "";
		
		Элементы.НадписьКорректностьИзменяемойПочты.Видимость = Ложь;
		
		УПЖКХ_ВзаимодействиеССервисамиРарус.ИзменитьEmailИОтправитьКодовоеСловоПовторно(АдресЭлектроннойПочтыДляИзменения, СведенияОбОшибке);
		
		ОбработатьСообщенияОбОшибках(СведенияОбОшибке);
		
		Элементы.ГруппаПодтверждениеРегистрации.Видимость       = Истина;
		Элементы.ГруппаПовторнаяОтправкаКодовогоСлова.Видимость = Истина;
		Элементы.ГруппаИзменениеЭлектроннойПочты.Видимость      = Ложь;
		Элементы.КнопкаДалее.Доступность                        = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик нажатия кнопки "Отмена", предназначенной для выхода из меню изменения email'а без его отправки.
//
Процедура КомандаОтменаИзмененияEmail(Команда)
	
	Элементы.ГруппаПодтверждениеРегистрации.Видимость       = Истина;
	Элементы.ГруппаПовторнаяОтправкаКодовогоСлова.Видимость = Истина;
	Элементы.ГруппаИзменениеЭлектроннойПочты.Видимость      = Ложь;
	Элементы.КнопкаДалее.Доступность                        = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ПроцедурыИФункцииКоторыеТребуетсяДорабатывать

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервере
// Заполняет настройки помощника.
Процедура ЗаполнитьНастройки()
	
	Объект.СистемаСбораПоказанийСчетчиков = Перечисления.УПЖКХ_СистемыСбораПоказанийСчетчиков.Меркурий;
	
	СохраненныеНастройки = УПЖКХ_ИнтеграцияССервисамиСбораПоказанийСчетчиковВзаимодействиеСБазойДанных.ПолучитьНастройкиИнтеграцииССервисамиСбораПоказанийСчетчиков(Объект.СистемаСбораПоказанийСчетчиков);
	
	ТекущаяСтраница           = СохраненныеНастройки.ТекущаяСтраница;
	РегламентноеЗаданиеОбмена = СохраненныеНастройки.РегламентноеЗаданиеОбмена;
	
КонецПроцедуры


&НаСервере
// Заполняет настройки помощника.
Процедура СохранитьНастройкиИнтеграции()
	
	СтруктураНастроек = Новый Структура("ТекущаяСтраница, РегламентноеЗаданиеОбмена", ТекущаяСтраница, РегламентноеЗаданиеОбмена);
	
	УПЖКХ_ИнтеграцияССервисамиСбораПоказанийСчетчиковВзаимодействиеСБазойДанных.УстановитьНастройкиИнтеграцииCСервисамиОбменаПоказанийСчетчиков(СтруктураНастроек, Объект.СистемаСбораПоказанийСчетчиков);
	
КонецПроцедуры

#КонецОбласти

#Область РаботаСРегламентнымЗаданием

&НаСервере
// Устанавливает настройки регламентного задания.
Процедура ИнициализироватьНастройкиРегламентногоЗадания()
	
	УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.ОпределитьРасписаниеРегламентногоЗаданияПоУмолчанию(РасписаниеРегламентногоЗаданияПоУмолчанию);
	
	РасписаниеРегламентногоЗадания = ПолучитьРасписаниеРегламентногоЗадания(РегламентноеЗаданиеОбмена, ВыполнятьОбменПоРасписанию);
	
	УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.ОпределитьВидНастройкиРасписания(РегламентноеЗаданиеОбмена, РасписаниеРегламентногоЗаданияПоУмолчанию, ВидНастройкиРасписанияОбмена);
	
	УправлениеСтраницейНастройкиРасписанияАвтоматическогоОбмена(ЭтаФорма);
	
	УстановитьВидимостьЭлементовРасписания();
	
	УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.УстановитьПараметрыРегламентногоЗаданияПроизводителиСчетчиков(РегламентноеЗаданиеОбмена, 
																											 УПЖКХ_ИнтеграцияССервисамиСбораПоказанийСчетчиковВзаимодействиеСБазойДанных.ПолучитьСтроковоеПредставлениеТекущейСистемыДляРегламентныхЗаданий(Объект.СистемаСбораПоказанийСчетчиков));
	
КонецПроцедуры

&НаСервере
// Установка видимости элементов страницы настройки расписаний обменов.
//
Процедура УстановитьВидимостьЭлементовРасписания()
	
	Попытка
		РегламентныеЗаданияСлужебный.ВызватьИсключениеЕслиНетПраваАдминистрирования();
		УстановитьПривилегированныйРежим(Истина);
		
		ВыполнятьОбменПоРасписанию = (НЕ ВидНастройкиРасписанияОбмена = 0);
		
		УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.ПодготовитьРегламентноеЗаданиеПроизводителиСчетчиков(РегламентноеЗаданиеОбмена, ВыполнятьОбменПоРасписанию, Объект.СистемаСбораПоказанийСчетчиков);
		
		Если ВидНастройкиРасписанияОбмена = 0 Тогда
			Элементы.РасписаниеРегламентногоЗадания.Видимость = Ложь;
		Иначе
			Элементы.РасписаниеРегламентногоЗадания.Видимость = истина;
			Если ВидНастройкиРасписанияОбмена = 1 Тогда
				РасписаниеРегламентногоЗадания = УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.УстановитьРасписаниеРегламентногоЗаданияПоУмолчанию(РегламентноеЗаданиеОбмена,
																																						 ВыполнятьОбменПоРасписанию,
																																						 РасписаниеРегламентногоЗаданияПоУмолчанию);
				Элементы.РасписаниеРегламентногоЗадания.Доступность = Ложь;
			Иначе
				Элементы.РасписаниеРегламентногоЗадания.Доступность = Истина;
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		
		Элементы.ВидНастройкиРасписанияОбмена.Доступность   = Ложь;
		Элементы.РасписаниеРегламентногоЗадания.Доступность = Ложь;
		
		Элементы.РасписаниеРегламентногоЗадания.Видимость = Истина;
		
		РасписаниеРегламентногоЗадания = "<Настройка регламентных заданий недоступна для текущего пользователя>";
		
	КонецПопытки;
		
КонецПроцедуры

&НаСервере
// Функция возвращает расписание регламентного задания.
//
Функция ПолучитьРасписаниеОбмена()
	
	Возврат УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.ПолучитьРасписаниеПроизводителиСчетчиков(РегламентноеЗаданиеОбмена, Объект.СистемаСбораПоказанийСчетчиков);
	
КонецФункции // ПолучитьРасписание()

&НаКлиенте
// Обработчик команды "ИзменитьРасписаниеОбмена".
Процедура КомандаИзменитьРасписаниеОбмена(Команда)
	
	ПараметрыФормы = Новый Структура("СистемаСбораПоказанийСчетчиков", Объект.СистемаСбораПоказанийСчетчиков);
	
	ОткрытьФорму("Обработка.УПЖКХ_ИнтеграцияССервисомСбораПоказанийСчетчиковМеркурийЭнергоучет.Форма.ФормаНастройкиРасписанияОбмена", ПараметрыФормы, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область МеханизмыВзаимодействияСВебСервисом

&НаКлиенте
// Обработчик команды "ВыполнитьРазовыйОбменДанными".
Процедура КомандаВыполнитьРазовыйОбменДанными(Команда)
	
	НазваниеСистемы = УПЖКХ_ИнтеграцияССервисамиСбораПоказанийСчетчиковВзаимодействиеСБазойДанных.ПолучитьСтроковоеПредставлениеТекущейСистемыДляРегламентныхЗаданий(Объект.СистемаСбораПоказанийСчетчиков);
	
	УПЖКХ_ИнтеграцияССервисамиСбораПоказанийСчетчиковВзаимодействиеССервисами.ОбменССервисомСбораПоказанийСчетчиков(НазваниеСистемы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКоманд

&НаКлиенте
// Обработчик команды "ОткрытьЖурналОбмена".
Процедура КомандаОткрытьЖурналОбмена(Команда)
	
	ОткрытьФорму("Обработка.УПЖКХ_ИнтеграцияССервисомСбораПоказанийСчетчиковМеркурийЭнергоучет.Форма.ФормаИсторииОбменов" ,, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ОткрытьСтраницуСОписанием".
Процедура КомандаОткрытьСтраницуСОписанием(Команда)
	
	ЗапуститьПриложение("https://vgkh.ru/jsk/jkh/mercury/");
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ОткрытьФАК".
Процедура КомандаОткрытьФАК(Команда)
	
	ЗапуститьПриложение("https://vgkh.ru/faq-1s-zhkh/rabota_s_priborami_ucheta_3_0/integraciya-mercury/");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

