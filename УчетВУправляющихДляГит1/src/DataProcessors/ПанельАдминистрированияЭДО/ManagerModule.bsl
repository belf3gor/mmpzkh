
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

#Область ПроверкаНастроекРегламентныхЗаданий

// Запускает проверку настроек в фоне
//
Функция НачатьПроверкуНастроекРегламентныхЗаданий(ИдентификаторФормы, ИнициировалПользователь = Ложь, Операция = "ПоУмолчанию") Экспорт
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ИдентификаторФормы);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ИнициировалПользователь", ИнициировалПользователь);
	ПараметрыПроцедуры.Вставить("Операция",                Операция);
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"Обработки.ПанельАдминистрированияЭДО.ПроверитьНастройкиРегламентныхЗаданийЭДО", ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

Функция РезультатЗапросаСертификатов(ПрофильНастроек = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Профили.Ссылка КАК Профиль,
	|	ЕСТЬNULL(Сертификаты.Сертификат,
	|		ЗНАЧЕНИЕ(Справочник.СертификатыКлючейЭлектроннойПодписиИШифрования.ПустаяСсылка)) КАК Сертификат,
	|	ЕСТЬNULL(Сертификаты.Сертификат.Отпечаток, """") КАК Отпечаток
	|ИЗ
	|	Справочник.УдалитьПрофилиНастроекЭДО КАК Профили
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УдалитьПрофилиНастроекЭДО.СертификатыПодписейОрганизации КАК Сертификаты
	|		ПО Профили.Ссылка = Сертификаты.Ссылка
	|			И (НЕ Сертификаты.Сертификат.Отозван)
	|			И (Сертификаты.Сертификат.ДействителенДо > &ТекущаяДата)
	|			И (Сертификаты.Сертификат.Отпечаток В (&ОтпечаткиСервера))
	|ГДЕ
	|	#УсловиеПрофильНастроек#
	|	НЕ Профили.ПометкаУдаления
	|ИТОГИ ПО
	|	Профиль");
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "#УсловиеПрофильНастроек#",
		?(ЗначениеЗаполнено(ПрофильНастроек), "Профили.Ссылка = &Профиль И", ""));
	
	ОтпечаткиСертификатовСервера = ЭлектронноеВзаимодействиеСлужебныйВызовСервера.МассивОтпечатковСертификатов(Ложь);
	
	Запрос.УстановитьПараметр("Профиль",          ПрофильНастроек);
	Запрос.УстановитьПараметр("ТекущаяДата",      ТекущаяУниверсальнаяДата());
	Запрос.УстановитьПараметр("ОтпечаткиСервера", ОтпечаткиСертификатовСервера);
	
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ПарольСертификатаСохраненДляВсех(Сертификат) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Данные = ОбщегоНазначения.ПрочитатьДанныеИзБезопасногоХранилища(Сертификат, "ПаролиСертификатов");
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Данные <> Неопределено
		И ЗначениеЗаполнено(Данные[Справочники.Пользователи.ПустаяСсылка()]);
	
КонецФункции

// Проверяет выполнение необходимых условий для работы регламентных заданий
// по отправке и получению электронных документов.
Процедура ПроверитьНастройкиРегламентныхЗаданийЭДО(Параметры, АдресРезультата) Экспорт
	
	// Коды состояний.
	// 0 - Блокирующая ошибка.
	// 1 - Неблокирующая ошибка.
	// 2 - Ошибок нет.
	
	РежимРаботы         = 0; // режим работы только "клиент - сервер"
	ЕстьКриптоПровайдер = 0; // криптопровайдер установлен на сервере
	ЕстьСертификаты     = 0; // есть сертификаты на сервере и они подвязаны к профилям
	ПаролиСохранены     = 0; // по каждому профилю есть хотя бы один сертификат с сохраненным для всех паролем
	ПроверкаПодписи     = 0; // подписи проверяются на сервере
	СозданиеПодписи     = 0; // подписи создаются на сервере
	
	// 1) Режим работы только клиент-сервер
	Если Не ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		РежимРаботы = 2;
	КонецЕсли;
	
	Если РежимРаботы Тогда // остальные проверки актуальны только для клиент-серверной базы
		
		// 2) Криптопровайдер установлен на сервере.
		Отказ = Ложь;
		МенеджерКриптографии = ЭлектронноеВзаимодействиеСлужебный.МенеджерКриптографии(Отказ, Ложь);
		
		Если Не Отказ Тогда
			ЕстьКриптоПровайдер = 2;
		КонецЕсли;
		
		// Совмещаем проверки.
		// 3) Есть сертификаты на сервере для всех профилей.
		// 4) Пароли сертификатов сохранены.
		
		ВсеСертификатыНаСервере = Истина;
		ВсеПаролиСохранены      = Истина;
		
		ХотяБыОдинСертификатНаСервере = Ложь;
		ХотяБыОдинПарольСохранен      = Ложь;
		
		РезультатЗапроса = РезультатЗапросаСертификатов();
		
		Если РезультатЗапроса.Пустой() Тогда
			
			ВсеСертификатыНаСервере = Ложь;
			ВсеПаролиСохранены      = Ложь;
			
		Иначе
			
			ВыборкаПрофиль = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПрофиль.Следующий() Цикл
				
				// Определяем в разрезе профиля.
				ЕстьСертификатНаСервере = Ложь;
				ЕстьСохраненныйПароль   = Ложь;
				
				ВыборкаСертификат = ВыборкаПрофиль.Выбрать();
				Пока ВыборкаСертификат.Следующий() Цикл
					
					Если ЗначениеЗаполнено(ВыборкаСертификат.Сертификат) Тогда
						ЕстьСертификатНаСервере = Истина;
						Если ПарольСертификатаСохраненДляВсех(ВыборкаСертификат.Сертификат) Тогда
							ЕстьСохраненныйПароль = Истина;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
				Если ЕстьСертификатНаСервере Тогда
					
					ХотяБыОдинСертификатНаСервере = Истина;
					
					Если ЕстьСохраненныйПароль Тогда
						ХотяБыОдинПарольСохранен = Истина;
					Иначе
						ВсеПаролиСохранены = Ложь;
					КонецЕсли;
					
				Иначе
					ВсеСертификатыНаСервере = Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не ХотяБыОдинПарольСохранен Тогда
				ВсеПаролиСохранены = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		// Есть сертификаты на сервере для всех профилей.
		Если ВсеСертификатыНаСервере Тогда
			ЕстьСертификаты = 2;
		ИначеЕсли ХотяБыОдинСертификатНаСервере Тогда
			ЕстьСертификаты = 1;
		КонецЕсли;
		
		// Пароли сертификатов сохранены.
		Если ВсеПаролиСохранены Тогда
			ПаролиСохранены = 2;
		ИначеЕсли ХотяБыОдинПарольСохранен Тогда
			ПаролиСохранены = 1;
		КонецЕсли;
		
		// 5) Проверка подписей и сертификатов происходит на сервере.
		Если ЭлектроннаяПодпись.ПроверятьЭлектронныеПодписиНаСервере() Тогда
			ПроверкаПодписи = 2;
		КонецЕсли;
		
		// 6) Подпись и шифрование происходит на сервере.
		Если ЭлектроннаяПодпись.СоздаватьЭлектронныеПодписиНаСервере() Тогда
			СозданиеПодписи = 2;
		КонецЕсли;
		
	КонецЕсли;
	
	// Итог проверки.
	Успех = РежимРаботы
		И ЕстьКриптоПровайдер
		И ЕстьСертификаты
		И ПаролиСохранены
		И ПроверкаПодписи
		И СозданиеПодписи;
	
	Результат = Новый Структура;
	Результат.Вставить("ИнициировалПользователь", Параметры.ИнициировалПользователь);
	Результат.Вставить("Операция",                Параметры.Операция);
	Результат.Вставить("РежимРаботы",             РежимРаботы);
	Результат.Вставить("ЕстьКриптоПровайдер",     ЕстьКриптоПровайдер);
	Результат.Вставить("ЕстьСертификаты",         ЕстьСертификаты);
	Результат.Вставить("ПаролиСохранены",         ПаролиСохранены);
	Результат.Вставить("ПроверкаПодписи",         ПроверкаПодписи);
	Результат.Вставить("СозданиеПодписи",         СозданиеПодписи);
	Результат.Вставить("Успех",                   Успех);
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли