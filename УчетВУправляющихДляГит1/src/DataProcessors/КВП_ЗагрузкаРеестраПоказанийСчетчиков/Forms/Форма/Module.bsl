
#Область ОписаниеПеременных

Перем ТаблицаДанныхФайла;

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЕСПЕЧЕНИЯ ЗАГРУЗКИ РЕЕСТРА

#Область ПроцедурыОбеспеченияЗагрузкиРеестра

&НаСервере
// Определяет значение параметров.
//
// Параметры:
//  Нет
// 
Процедура ИнициализацияРеквизитов()
	
	ОбновитьВариантНастройкиФорматаРеестра();
	
	Если Объект.ФорматФайлаЗагрузки.Кодировка = СтруктураЗначенийПолей.СпКодировки[0].Значение Тогда // "DOS"
		Кодировка = КодировкаТекста.OEM;
	Иначе
		Кодировка = КодировкаТекста.ANSI;
	КонецЕсли;
	
	Объект.НастройкиПолей.Загрузить(Объект.ФорматФайлаЗагрузки.НастройкиСоответствияПолей.Выгрузить());
	
	УдалитьСтрокиСПустымиКолонкамиВНастройкахПолей();
	
	Объект.ПолеИдентификацииЛС = Null;
	СтрокиПараметраЛицевойСчет = Объект.НастройкиПолей.НайтиСтроки(Новый Структура("Параметр", Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.ЛицевойСчет));
	
	Если СтрокиПараметраЛицевойСчет.Количество() = 0 Тогда
		Объект.ПолеИдентификацииЛС = Неопределено;
	Иначе
		СтрокаПараметраЛицевойСчет = СтрокиПараметраЛицевойСчет[0];
		
		СпИдентификацияЛС = СтруктураЗначенийПолей.СпИдентификацияЛС;
		ИдентификацияЛС   = СтрокаПараметраЛицевойСчет.ИдентификацияЛС;
		
		Если ИдентификацияЛС = СпИдентификацияЛС[0].Значение Тогда // "наименование"
			Объект.ПолеИдентификацииЛС = "НаименованиеЛС";
		ИначеЕсли ИдентификацияЛС = СпИдентификацияЛС[1].Значение Тогда // "код"
			Объект.ПолеИдентификацииЛС = "КодЛС";
		ИначеЕсли ИдентификацияЛС = СпИдентификацияЛС[2].Значение Тогда // "идентификатор"
			Объект.ПолеИдентификацииЛС = "ИдентификаторЛС";
		ИначеЕсли ИдентификацияЛС = СпИдентификацияЛС[3].Значение Тогда // "штрихкод"
			Объект.ОпределятьЛСИзШтрихкода = Истина;
			Объект.ПолеИдентификацииЛС     = ОпределитьПолеИдентификацииЛицевогоСчетаИзУчетнойПолитикиЖКХ();
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ПолеИдентификацииЛС = Null Тогда
		ВызватьИсключение("Не указан способ идентификации лицевого счета.");
	КонецЕсли;
	
	НастройкиПолей = Объект.НастройкиПолей.Выгрузить();
	
	// Находим строки с параметром ПУ.
	ПараметрПоиска = Новый Структура("Параметр", Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.НомерСчетчика);
	мСтрокиПУ      = НастройкиПолей.НайтиСтроки(ПараметрПоиска);
	КоличествоПУ   = мСтрокиПУ.Количество();
	
	СпСпособыОпределенияПУ     = СтруктураЗначенийПолей.СпСпособыОпределенияПУ;
	СпИдентификацияПУ          = СтруктураЗначенийПолей.СпИдентификацияПУ;
	СпИдентификацияУслуги      = СтруктураЗначенийПолей.СпИдентификацияУслуги;
	СпСпособыОпределенияУслуги = СтруктураЗначенийПолей.СпСпособыОпределенияУслуги;
	
	Если КоличествоПУ > 0 Тогда
		
		// Получаем таблицу с ПУ и заполняем списки идентификации.
		врТаблицаНастроекПриборовУчета = НастройкиПолей.Скопировать(мСтрокиПУ);
		Для Каждого ТекНастройка Из врТаблицаНастроекПриборовУчета Цикл
			
			Если ТекНастройка.СпособОпределенияПУ = СпСпособыОпределенияПУ[0].Значение Тогда // "по значению поля реестра"
				// список идентификаций ПУ:
				ЗначениеИдентификацииПУ = ТекНастройка.ИдентификацияПУ;
				
				Если ЗначениеИдентификацииПУ = СпИдентификацияПУ[0].Значение Тогда // "код"
					ПредставлениеИдентификацииПУ = "КодСчетчика";
				ИначеЕсли ЗначениеИдентификацииПУ = СпИдентификацияПУ[1].Значение Тогда // "наименование"
					ПредставлениеИдентификацииПУ = "НаименованиеСчетчика";
				ИначеЕсли ЗначениеИдентификацииПУ = СпИдентификацияПУ[2].Значение Тогда // "идентификатор"
					ПредставлениеИдентификацииПУ = "ИдентификаторСчетчика";
				ИначеЕсли ЗначениеИдентификацииПУ = СпИдентификацияПУ[3].Значение Тогда // "заводской номер"
					ПредставлениеИдентификацииПУ = "ЗаводскойНомерСчетчика";
				ИначеЕсли ЗначениеИдентификацииПУ = СпИдентификацияПУ[4].Значение Тогда // "номер в ГИС ЖКХ"
					ПредставлениеИдентификацииПУ = "НомерВГИСЖКХ";
				КонецЕсли;
				
				ЗаполнитьСписокИдентификации(спПоляИдентификацииСчетчика, ЗначениеИдентификацииПУ, ПредставлениеИдентификацииПУ);
				
			ИначеЕсли ТекНастройка.СпособОпределенияПУ = СпСпособыОпределенияПУ[1].Значение Тогда // "по услуге"
				
				ЗначениеСпособОпределенияУслуги = ТекНастройка.СпособОпределенияУслуги;
				
				// список идентификаций услуги:
				Если ЗначениеСпособОпределенияУслуги = СпСпособыОпределенияУслуги[0].Значение Тогда // "по значению поля реестра"
					
					ЗначениеИдентификацииУслуги = ТекНастройка.ИдентификацияУслуги;
					
					Если ЗначениеИдентификацииУслуги = СпИдентификацияУслуги[0].Значение Тогда // "по наименованию"
						ПредставлениеИдентификацииУслуги = "НаименованиеУслугиСчетчика";
					ИначеЕсли ЗначениеИдентификацииУслуги = СпИдентификацияУслуги[1].Значение Тогда // "по коду"
						ПредставлениеИдентификацииУслуги = "КодУслугиСчетчика";
					КонецЕсли;
					
				ИначеЕсли ЗначениеСпособОпределенияУслуги = СпСпособыОпределенияУслуги[1].Значение Тогда // "по ссылке на услугу"
					ПредставлениеИдентификацииУслуги = "ПоСсылкеНаУслугу";
				КонецЕсли;
				
				ЗаполнитьСписокИдентификации(спПоляИдентификацииУслуг, ЗначениеИдентификацииУслуги, ПредставлениеИдентификацииУслуги);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ИнициализацияРеквизитов()

&НаСервере
// Возвращает значение параметра идентификации л/с.
Функция ОпределитьПолеИдентификацииЛицевогоСчетаИзУчетнойПолитикиЖКХ()
	
	ЗначениеИдентификацииЛС = "";
	
	ОтборСтрок = Новый Структура("Параметр", ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ЛицевойСчет"));
	НайденныйПараметрЛС = Объект.НастройкиПолей.НайтиСтроки(ОтборСтрок);
	
	Если НайденныйПараметрЛС.Количество() = 0 Тогда
		Возврат Null;
	КонецЕсли;
	
	Отказ = Ложь;
	мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(НачалоМесяца(ТекущаяДата()),
	Объект.Организация,
	Отказ);
	Если Отказ Тогда
		Возврат Null;
	КонецЕсли;
	
	Если мНастройкиУчетнойПолитикиТСЖ.ВидШтрихкода = ПредопределенноеЗначение("Перечисление.КВП_ВидыШтрихкодовДляКвитанций.QR") Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Необходимо выбрать вид штрихкода ""Одномерный"" в учетной политике ЖКХ для определения лицевого счета.");
		Возврат "";
	КонецЕсли;
	
	Возврат ?(мНастройкиУчетнойПолитикиТСЖ.ИдентификаторЛСШтрихкода, "ИдентификаторЛС", "КодЛС");
	
КонецФункции // ОпределитьПолеИдентификацииЛицевогоСчетаИзУчетнойПолитикиЖКХ()

&НаСервере
// Заполняет список идентификации Счетчика или услуги.
Процедура ЗаполнитьСписокИдентификации(СписокИдентификаций, Значение, Представление)
	
	Если СписокИдентификаций.НайтиПоЗначению(Значение) = Неопределено Тогда
		СписокИдентификаций.Добавить(Значение, Представление);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Возвращает таблицу значений "НастройкиСоответствияПолей".
Процедура УдалитьСтрокиСПустымиКолонкамиВНастройкахПолей()
	
	Если Объект.ФорматФайлаЗагрузки.ВариантНастройкиФорматаРеестраПоказанийПриборовУчета
		= Перечисления.УПЖКХ_ВариантыНастройкиФорматаРеестраПоказанийПриборовУчета.Вручную Тогда
		
		// Удаляем из таблицы значений все пустые строки.
		Если ФорматФайла = СтруктураЗначенийПолей.СпФорматовФайла[3].Значение Тогда // "XML"
			
			МассивСтрокДляУдаления = Новый Массив;
			Для Каждого ТекущаяСтрока Из Объект.НастройкиПолей Цикл
				Если СчетчикОпределяетсяПоСсылкеНаУслугу(ТекущаяСтрока) Тогда
					// Пропускаем строку параметра "НомерСчетчика", т.к. если ПУ определяется по ссылке на услугу, то не
					// важно, заполнен или нет ИмяАтридута или ИмяУзла.
					Продолжить;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ИмяАтрибута) ИЛИ НЕ ЗначениеЗаполнено(ТекущаяСтрока.ИмяУзла) Тогда
					МассивСтрокДляУдаления.Добавить(ТекущаяСтрока);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого СтрокаУдаления Из МассивСтрокДляУдаления Цикл
				Объект.НастройкиПолей.Удалить(СтрокаУдаления);
			КонецЦикла;
			
		Иначе
			НайденныеСтроки = Объект.НастройкиПолей.НайтиСтроки(Новый Структура("НомерКолонки", 0));
			
			Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
				Если СчетчикОпределяетсяПоСсылкеНаУслугу(ТекущаяСтрока) Тогда
					// Пропускаем строку параметра "НомерСчетчика", т.к. если ПУ определяется по ссылке на услугу, то не
					// важно, заполнен или нет НомерКолонки.
					Продолжить;
				КонецЕсли;
				Объект.НастройкиПолей.Удалить(ТекущаяСтрока);
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		
		Если Объект.ФорматФайлаЗагрузки.ШаблонРеестраПоказанийПриборовУчета
			= Перечисления.УПЖКХ_ШаблонРеестраПоказанийПриборовУчета.ПоФорматуВыгрузкиВСистемуГородВариант8 Тогда
			
			НайденныеСтроки = Объект.НастройкиПолей.НайтиСтроки(Новый Структура("НомерКолонки", 0));
			Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
				Если ТекущаяСтрока.Параметр = Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.ЛицевойСчет
					ИЛИ ТекущаяСтрока.Параметр = Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.Дата Тогда
					Объект.НастройкиПолей.Удалить(ТекущаяСтрока);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УдалитьСтрокиСПустымиКолонкамиВНастройкахПолей()

&НаСервере
// Функция возвращает ИСТИНА, если счетчик определяется по ссылке на услугу.
Функция СчетчикОпределяетсяПоСсылкеНаУслугу(ТекущаяСтрока)
	
	Если ТекущаяСтрока.Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.НомерСчетчика")
	   И ТекущаяСтрока.СпособОпределенияПУ = СтруктураЗначенийПолей.СпСпособыОпределенияПУ[1].Значение // "по услуге"
	   И ТекущаяСтрока.СпособОпределенияУслуги = СтруктураЗначенийПолей.СпСпособыОпределенияУслуги[1].Значение Тогда // "по ссылке на услугу"
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // СчетчикОпределяетсяПоСсылкеНаУслугу()

&НаСервере
// Определяет значение поля соответствующего типа.
//
// Параметры:
//  НомерСтроки  - номер строки файла загрузки.
//  ТипКолонки   - значение колонки реестра.
//  ЗначениеПоля - значение поля файла загрузки.
//
// Возвращаемое значение:
//  Значение поля реестра.
//
Функция ПолучитьЗначениеПоляРеестра(Знач НомерСтроки, Знач ТипКолонки, Знач ЗначениеПоля, ПолеНастройки)
	
	Если ТипКолонки = "Лицевойсчет" Тогда
		
		Если ТипЗнч(ЗначениеПоля) = Тип("Строка") Тогда
			Если Объект.ОпределятьЛСИзШтрихкода Тогда
				
				ПараметрыЛС = Неопределено;
				ТекстОшибки = "Неизвестный формат штрих-кода в строке файла № : " + НомерСтроки + ".";
				
				Отказ = Ложь;
				
				Если УПЖКХ_ПечатьКвитанцийСервер.ОбработатьИРазобратьШтрихКод(ЗначениеПоля, мНастройкиУчетнойПолитикиТСЖ, ПараметрыЛС) Тогда
					Если ТипЗнч(ПараметрыЛС.КодЛС) = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
						
						ЛицевойСчет = ПараметрыЛС.КодЛС;
						
						Если ЛицевойСчет = Справочники.КВП_ЛицевыеСчета.ПустаяСсылка() Тогда
							Отказ = Истина;
						Иначе
							Если Объект.ПолеИдентификацииЛС = "КодЛС" Тогда
								Возврат УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ЛицевойСчет, "Код");
							ИначеЕсли Объект.ПолеИдентификацииЛС = "ИдентификаторЛС" Тогда
								Возврат УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ЛицевойСчет, "Идентификатор");
							Иначе
								Возврат ЗначениеПоля;
							КонецЕсли;
						КонецЕсли;
						
					Иначе
						Отказ = Истина;
					КонецЕсли;
				Иначе
					Отказ = Истина;
				КонецЕсли;
				
				Если Отказ Тогда
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ТекстОшибки);
					Возврат ЗначениеПоля;
				КонецЕсли;
				
			Иначе
				
				ЗначениеПоля = СокрЛП(СтрЗаменить(ЗначениеПоля, Символы.НПП, ""));
				
				Если ПустаяСтрока(ЗначениеПоля) Тогда
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Строка " + НомерСтроки + " файла: не определен лицевой счет.");
					Возврат Null;
				Иначе
					Возврат ЗначениеПоля;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипКолонки = "Номерсчетчика" Тогда
		
		Если ТипЗнч(ЗначениеПоля) = Тип("Строка") Тогда
			
			СтруктураПУ = Новый Структура;
			
			СпСпособыОпределенияПУ     = СтруктураЗначенийПолей.СпСпособыОпределенияПУ;
			СпСпособыОпределенияУслуги = СтруктураЗначенийПолей.СпСпособыОпределенияУслуги;
			
			ЗначениеПоля = СтрЗаменить(ЗначениеПоля, Символы.НПП, "");
			ЗначениеПоля = СокрЛП(ЗначениеПоля);
			Если ПустаяСтрока(ЗначениеПоля)
				И НЕ (ПолеНастройки.СпособОпределенияПУ = СпСпособыОпределенияПУ[1].Значение // "по услуге"
				И ПолеНастройки.СпособОпределенияУслуги = СпСпособыОпределенияУслуги[1].Значение) Тогда // "по ссылке на услугу"
				Возврат СтруктураПУ;
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура;
			Если ПолеНастройки.СпособОпределенияПУ = СпСпособыОпределенияПУ[0].Значение Тогда // "по значению поля реестра"
				
				ПризнакПУ = спПоляИдентификацииСчетчика.НайтиПоЗначению(ПолеНастройки.ИдентификацияПУ).Представление;
				
			ИначеЕсли ПолеНастройки.СпособОпределенияПУ = СпСпособыОпределенияПУ[1].Значение Тогда // "по услуге"
				
				Если ПолеНастройки.СпособОпределенияУслуги = СпСпособыОпределенияУслуги[0].Значение Тогда // "по значению поля реестра"
					ПризнакПУ = спПоляИдентификацииУслуг.НайтиПоЗначению(ПолеНастройки.ИдентификацияУслуги).Представление;
				ИначеЕсли ПолеНастройки.СпособОпределенияУслуги = СпСпособыОпределенияУслуги[1].Значение Тогда // "по ссылке на услугу"
					ПризнакПУ = "ПоСсылкеНаУслугу";
				КонецЕсли;
				
			КонецЕсли;
			
			СтруктураПУ.Вставить("Услуга",                              ПолеНастройки.Услуга);
			СтруктураПУ.Вставить("Счетчик",                             ЗначениеПоля);
			СтруктураПУ.Вставить("ПризнакПУ",                           ПризнакПУ);
			СтруктураПУ.Вставить("ПорядковыйНомерПУВСоставеПараметров", ПолеНастройки.ПорядковыйНомерПУВСоставеПараметров);
			СтруктураПУ.Вставить("ПорядковыйНомерПУВБазе",              ПолеНастройки.ПорядковыйНомерПУВБазе);
			
			Возврат СтруктураПУ;
			
		КонецЕсли;
		
	ИначеЕсли ТипКолонки = "Дата" Тогда
		
		Если ТипЗнч(ЗначениеПоля) = Тип("Дата") Тогда
			
			Если ЗначениеПоля = Дата(1,1,1) Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Строка " + НомерСтроки + " файла: не определено значение даты.");
				Возврат Null;
			КонецЕсли;
			
			Возврат ЗначениеПоля;
			
		ИначеЕсли ТипЗнч(ЗначениеПоля) = Тип("Строка") Тогда
			
			ЗначениеПоля = СокрЛП(ЗначениеПоля);
			ЗначениеПоля = СтрЗаменить(ЗначениеПоля, Символы.НПП, "");
			Если ПустаяСтрока(ЗначениеПоля) Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Строка " + НомерСтроки + " файла: не определено значение даты.");
				Возврат Null;
			КонецЕсли;
			
			СтрокаЗначениеПоля = ЗначениеПоля;
			СпПараметровДаты   = Новый СписокЗначений;
			
			РазделительДаты = ПолеНастройки.СимволРазделительПериода;
			
			Если РазделительДаты = СтруктураЗначенийПолей.СпРазделителиПериода[5].Значение Тогда // "Без разделителя"
				
				КолЗнаковДень  = 2;
				КолЗнаковМесяц = 2;
				Если СтрДлина(ЗначениеПоля) = 6 Тогда
					КолЗнаковГод = 2;
				ИначеЕсли СтрДлина(ЗначениеПоля) = 8 Тогда
					КолЗнаковГод = 4;
				Иначе
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Строка " + НомерСтроки + " файла: не определено значение даты.");
					Возврат Null;
				КонецЕсли;
				
				ПараметрДень  = "";
				ПараметрМесяц = "";
				ПараметрГод   = "";
				
				спФорматДаты = Новый СписокЗначений;
				спФорматДаты.Добавить("День",  ПолеНастройки.ПорядокДень);
				спФорматДаты.Добавить("Месяц", ПолеНастройки.ПорядокМесяц);
				спФорматДаты.Добавить("Год",   ПолеНастройки.ПорядокГод);
				спФорматДаты.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
				
				Для Каждого ФорматДаты ИЗ спФорматДаты Цикл
					ПараметрДаты      = ФорматДаты.Значение;
					ДлинаЗначенияПоля = СтрДлина(ЗначениеПоля);
					
					Если ПараметрДаты = "День" Тогда
						ПараметрДень = Сред(ЗначениеПоля, 1, КолЗнаковДень);
						ЗначениеПоля = Сред(ЗначениеПоля, КолЗнаковДень + 1, ДлинаЗначенияПоля - КолЗнаковДень);
					ИначеЕсли ПараметрДаты = "Месяц" Тогда
						ПараметрМесяц = Сред(ЗначениеПоля, 1, КолЗнаковМесяц);
						ЗначениеПоля  = Сред(ЗначениеПоля, КолЗнаковМесяц + 1, ДлинаЗначенияПоля - КолЗнаковМесяц);
					ИначеЕсли ПараметрДаты = "Год" Тогда
						ПараметрГод  = Сред(ЗначениеПоля, 1, КолЗнаковГод);
						ЗначениеПоля = Сред(ЗначениеПоля, КолЗнаковГод + 1, ДлинаЗначенияПоля - КолЗнаковГод);
					КонецЕсли;
					
				КонецЦикла;
				
				Если СтрДлина(ПараметрГод) = 2 Тогда
					ПараметрГод = "20" + ПараметрГод;
				КонецЕсли;
				
			Иначе
				
				Попытка
					Возврат Дата(ЗначениеПоля);
				Исключение
				КонецПопытки;
				
				Для Индекс = 1 По 3 Цикл
					Позиция      = Найти(СтрокаЗначениеПоля, РазделительДаты);
					Если Позиция = 0 Тогда
						ПозицияПробела = Найти(СтрокаЗначениеПоля, " ");
						Если ПозицияПробела = 0 Тогда
							Позиция = СтрДлина(СтрокаЗначениеПоля) + 1;
						Иначе
							Позиция = ПозицияПробела;
						КонецЕсли;
					КонецЕсли;
					ПараметрДаты = Сред(СтрокаЗначениеПоля, 1, Позиция - 1);
					Если ПараметрДаты = "" Тогда
						УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Строка " + НомерСтроки + " файла: не определено значение даты.");
						Возврат Null;
					Иначе
						СпПараметровДаты.Добавить(ПараметрДаты);
					КонецЕсли;
					СтрокаЗначениеПоля = Прав(СтрокаЗначениеПоля, СтрДлина(СтрокаЗначениеПоля) - Позиция);
				КонецЦикла;
				
				ПараметрДень  = СпПараметровДаты[ПолеНастройки.ПорядокДень - 1].Значение;
				ПараметрМесяц = СпПараметровДаты[ПолеНастройки.ПорядокМесяц - 1].Значение;
				ПараметрГод   = СпПараметровДаты[ПолеНастройки.ПорядокГод - 1].Значение;
				
				Если СтрДлина(ПараметрГод) = 2 Тогда
					ПараметрГод = "20" + ПараметрГод;
				КонецЕсли;
				
			КонецЕсли;
			
			Попытка
				Возврат Дата(Число(ПараметрГод), Число(ПараметрМесяц), Число(ПараметрДень));
			Исключение
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Строка " + НомерСтроки + " файла: не определено значение даты.");
				Возврат Null;
			КонецПопытки;
			
		КонецЕсли;
		
	ИначеЕсли ТипКолонки = "Показаниедневное" 
		ИЛИ ТипКолонки = "Показаниеночное" 
		ИЛИ ТипКолонки = "Показаниепиковое" Тогда
		
		СпВариантЗагрузкиНулевыхПоказаний = СтруктураЗначенийПолей.СпВариантЗагрузкиНулевыхПоказаний;
		
		Если ТипЗнч(ЗначениеПоля) = Тип("Число") Тогда
			
			Если ЗначениеПоля = 0 Тогда
				Если Объект.ФорматФайлаЗагрузки.ВариантЗагрузкиНулевыхПоказаний = СпВариантЗагрузкиНулевыхПоказаний[1].Значение Тогда // "Загружать нулевые как ""Не введено"""
					Возврат Неопределено;
				Иначе // "Загружать нулевые как 0"
					Возврат ЗначениеПоля;
				КонецЕсли;
			Иначе
				Возврат ЗначениеПоля;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ЗначениеПоля) = Тип("Строка") Тогда
			
			ЗначениеПоля = СокрЛП(ЗначениеПоля);
			Если ПустаяСтрока(ЗначениеПоля) Тогда
				Возврат Неопределено;
			КонецЕсли;
			
			Попытка
				ЗначениеПоля = Число(ЗначениеПоля);
				Если ЗначениеПоля = 0 Тогда
					Если Объект.ФорматФайлаЗагрузки.ВариантЗагрузкиНулевыхПоказаний = СпВариантЗагрузкиНулевыхПоказаний[1].Значение Тогда // "Загружать нулевые как ""Не введено"""
						Возврат Неопределено;
					Иначе // "Загружать нулевые как 0"
						Возврат ЗначениеПоля;
					КонецЕсли;
				Иначе
					Возврат ЗначениеПоля;
				КонецЕсли;
			Исключение
			КонецПопытки;
			
			// Для определения чисел больше 1000.
			ЗначениеПоля = СтрЗаменить(ЗначениеПоля, " ", "");
			
			СимволРазделительДробнойЧастиТочка = СтруктураЗначенийПолей.СпРазделителейДробнойЧасти[1].Значение; // "."
			
			Если НЕ ПолеНастройки.СимволРазделительДробнойЧасти = СимволРазделительДробнойЧастиТочка Тогда
				ЗначениеПоля = СтрЗаменить(ЗначениеПоля, ПолеНастройки.СимволРазделительДробнойЧасти, СимволРазделительДробнойЧастиТочка);
			КонецЕсли;
			
			Попытка
				Возврат Число(ЗначениеПоля);
			Исключение
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Строка " + НомерСтроки + " файла: не определено значение показания - " + ЗначениеПоля);
				Возврат Null;
			КонецПопытки;
			
		КонецЕсли;
		
	Иначе
		
		Если ТипЗнч(ЗначениеПоля) = Тип("Строка") Тогда
			ЗначениеПоля = СокрЛП(ЗначениеПоля);
			Если ПустаяСтрока(ЗначениеПоля) Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Строка " + НомерСтроки + " файла: не определено значение поля.");
				Возврат Null;
			КонецЕсли;
		КонецЕсли;
		
		Возврат ЗначениеПоля;
		
	КонецЕсли;
	
КонецФункции // ПолучитьЗначениеПоляРеестра()

&НаСервере
// Обход узлов XML-файла
Процедура РекурсияПоУзлам(Узел, СтруктураПараметров, ПервыйОбход = Истина)
	
	Если НЕ Объект.ФорматФайлаЗагрузки.НастройкиСоответствияПолей.Найти(Узел.ИмяУзла, "ИмяУзла") = Неопределено Тогда
		
		СтруктураПараметров.Вставить("Ошибка", Ложь);
		
		Отбор = Новый Структура;
		Отбор.Вставить("ИмяУзла", Узел.ИмяУзла);
		СтрокиУзла = Объект.ФорматФайлаЗагрузки.НастройкиСоответствияПолей.НайтиСтроки(Отбор);
		ОшибочнаяСтрока = Ложь;
		
		Для Каждого ТекСтрока Из СтрокиУзла Цикл
			
			ПорядковыйНомерПУВСоставеПараметров = ТекСтрока.ПорядковыйНомерПУВСоставеПараметров;
			
			// Получим значение атрибута.
			Если Узел.ЕстьАтрибут(ТекСтрока.ИмяАтрибута) Тогда
				
				ЗначениеАтрибута = Узел.ПолучитьАтрибут(ТекСтрока.ИмяАтрибута);
				
				Если НЕ ЗначениеАтрибута = Неопределено Тогда
					
					Если ПервыйОбход Тогда
						ПервыйЭлементXML = ТекСтрока.ИмяАтрибута;
						ПервыйОбход = Ложь;
					КонецЕсли;
					
					ТипКолонки = ОпределитьИмяКолонки(Строка(ТекСтрока.Параметр));
					
					ОшибочнаяСтрока = Ложь;
					АдресПоля = ТекСтрока.ИмяУзла + ":" + ТекСтрока.ИмяАтрибута;
					
					ЗначениеПоляРеестра = ПолучитьЗначениеПоляРеестра(АдресПоля, ТипКолонки, ЗначениеАтрибута, ТекСтрока);
					
					Если ЗначениеПоляРеестра = Null Тогда//значение не определено
						
					ИначеЕсли ЭтоПараметрЛС(ТекСтрока.Параметр) Тогда
						
						СтруктураПараметров.Вставить(ТипКолонки, ЗначениеПоляРеестра);
					ИначеЕсли ЭтоПараметрПУ(ТекСтрока.Параметр) И ТипЗнч(ЗначениеПоляРеестра) = Тип("Структура") Тогда
						
						Если ЗначениеПоляРеестра.Количество() > 0 Тогда
							Если НЕ СтруктураПараметров.Свойство("МассивПУ") Тогда
								СтруктураПараметров.Вставить("МассивПУ", Новый Массив);
							КонецЕсли;
							
							СтруктураПараметров.МассивПУ.Добавить(ЗначениеПоляРеестра);
							
						КонецЕсли;
						
					ИначеЕсли ЭтоПараметрПоказаний(ТекСтрока.Параметр) Тогда
						
						// Добавляем данные о показании
						СтруктураПараметров.МассивПУ[ПорядковыйНомерПУВСоставеПараметров - 1].Вставить(ТипКолонки, ЗначениеПоляРеестра);
						
					ИначеЕсли ЭтоПараметрДата(ТекСтрока.Параметр) Тогда
						
						СтруктураПараметров.МассивПУ[ПорядковыйНомерПУВСоставеПараметров - 1].Вставить(ТипКолонки, ЗначениеПоляРеестра);
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		ДобавитьСтрокуВТаблицуЗначений(СтруктураПараметров);
		
	КонецЕсли;
	
	Если Узел.ЕстьДочерниеУзлы() Тогда
		Для каждого ТекУзел Из Узел.ДочерниеУзлы Цикл
			РекурсияПоУзлам(ТекУзел, СтруктураПараметров, Истина);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // РекурсияПоУзлам()

&НаСервере
// Обход вложенных узлов XML-файла.
Процедура РекурсияПоВложеннымУзлам(Узел, СтруктураПараметров, ПервыйОбход = Истина)
	
	Если НЕ Объект.ФорматФайлаЗагрузки.НастройкиСоответствияПолей.Найти(Узел.ИмяУзла, "ИмяУзла") = Неопределено Тогда
		
		СтруктураПараметров.Вставить("Ошибка", Ложь);
		
		// найдем строки с текущим узлом в настройках
		Отбор = Новый Структура;
		Отбор.Вставить("ИмяУзла", Узел.ИмяУзла);
		СтрокиУзла = Объект.ФорматФайлаЗагрузки.НастройкиСоответствияПолей.НайтиСтроки(Отбор);
		ОшибочнаяСтрока = Ложь;
		
		// обход настроек
		Для Каждого ТекСтрока Из СтрокиУзла Цикл
			
			ПорядковыйНомерПУВСоставеПараметров = ТекСтрока.ПорядковыйНомерПУВСоставеПараметров;
			
			// обход дочерних узлов текущего узла
			Для Каждого ВложенныйУзел Из Узел.ДочерниеУзлы Цикл
				
				// если имена вложенных узлов совпадают, добавим значение
				Если ВложенныйУзел.ИмяУзла = ТекСтрока.ИмяАтрибута Тогда
					
					ТипКолонки = ОпределитьИмяКолонки(Строка(ТекСтрока.Параметр)); // получим имя колонки
					ЗначениеПоляРеестра = ПолучитьЗначениеПоляРеестра(ТекСтрока.НомерСтроки, ТипКолонки, ВложенныйУзел.ТекстовоеСодержимое, ТекСтрока);
					
					Если ЗначениеПоляРеестра = Null Тогда
						
						ОшибочнаяСтрока = Истина;
						
					ИначеЕсли ЭтоПараметрЛС(ТекСтрока.Параметр) Тогда
						
						СтруктураПараметров.Вставить(ТипКолонки, ЗначениеПоляРеестра);
						
					ИначеЕсли ЭтоПараметрПУ(ТекСтрока.Параметр) И ТипЗнч(ЗначениеПоляРеестра) = Тип("Структура") Тогда
						
						Если ЗначениеПоляРеестра.Количество() > 0 Тогда
							Если НЕ СтруктураПараметров.Свойство("МассивПУ") Тогда
								СтруктураПараметров.Вставить("МассивПУ", Новый Массив);
							КонецЕсли;
							
							СтруктураПараметров.МассивПУ.Добавить(ЗначениеПоляРеестра);
							
						КонецЕсли;
						
					ИначеЕсли ЭтоПараметрПоказаний(ТекСтрока.Параметр) Тогда
						
						// Добавляем данные о показании
						СтруктураПараметров.МассивПУ[ПорядковыйНомерПУВСоставеПараметров - 1].Вставить(ТипКолонки, ЗначениеПоляРеестра);
						
					ИначеЕсли ЭтоПараметрДата(ТекСтрока.Параметр) Тогда
						
						СтруктураПараметров.МассивПУ[ПорядковыйНомерПУВСоставеПараметров - 1].Вставить(ТипКолонки, ЗначениеПоляРеестра);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		ДобавитьСтрокуВТаблицуЗначений(СтруктураПараметров);
		
	КонецЕсли;
	
	Если Узел.ЕстьДочерниеУзлы() Тогда
		Для Каждого ТекУзел Из Узел.ДочерниеУзлы Цикл
			РекурсияПоВложеннымУзлам(ТекУзел, СтруктураПараметров, ПервыйОбход);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // РекурсияПоВложеннымУзлам()

&НаСервере
// Добавляет строку таблицы значений
Процедура ДобавитьСтрокуВТаблицуЗначений(СтруктураПараметров, НомерСтроки = 0);
	
	Если НЕ СтруктураПараметров.Ошибка Тогда
		
		ТекОбъект = Неопределено;
		СтруктураПараметров.Свойство("ЛицевойСчет", ТекОбъект);
		
		МассивПУ = Неопределено;
		СтруктураПараметров.Свойство("МассивПУ", МассивПУ);
		
		Если МассивПУ = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого ПараметрыПУ Из МассивПУ Цикл
			СтрокаРеестра = ТаблицаДанныхФайла.Добавить();
			
			СтрокаРеестра.НомерСтроки  = НомерСтроки;
			СтрокаРеестра.Объект       = ТекОбъект;
			
			ПараметрыПУ.Свойство("Счетчик",                             СтрокаРеестра.Счетчик);
			ПараметрыПУ.Свойство("Дата",                                СтрокаРеестра.ДатаПоказания);
			ПараметрыПУ.Свойство("ПоказаниеДневное",                    СтрокаРеестра.ДневноеПоказание);
			ПараметрыПУ.Свойство("ПоказаниеНочное",                     СтрокаРеестра.НочноеПоказание);
			ПараметрыПУ.Свойство("ПоказаниеПиковое",                    СтрокаРеестра.ПиковоеПоказание);
			ПараметрыПУ.Свойство("ПорядковыйНомерПУВСоставеПараметров", СтрокаРеестра.ПорядковыйНомерПУВСоставеПараметров);
			ПараметрыПУ.Свойство("ПризнакПУ",                           СтрокаРеестра.ПризнакПУ);
			ПараметрыПУ.Свойство("Услуга",                              СтрокаРеестра.Услуга);
			ПараметрыПУ.Свойство("ПорядковыйНомерПУВБазе",              СтрокаРеестра.ПорядковыйНомерПУВБазе);
			ПараметрыПУ.Свойство("ЭтоПустоеДневноеПоказание",           СтрокаРеестра.ЭтоПустоеДневноеПоказание);
			ПараметрыПУ.Свойство("ЭтоПустоеНочноеПоказание",            СтрокаРеестра.ЭтоПустоеНочноеПоказание);
			ПараметрыПУ.Свойство("ЭтоПустоеПиковоеПоказание",           СтрокаРеестра.ЭтоПустоеПиковоеПоказание);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Если производится чтение из файла XML, то необходимо принудительно очищать массив ПУ,
	// чтобы для следующего узла заполнять массив заново. Ранее возникала ошибка,
	// когда массив ПУ не очищался и рос с арифметической прогрессией при чтении каждого следующего узла.
	// В массиве должны быть сведения о ПУ только по текущей порции данных любом случае,
	// т.е. получили порцию данных ПУ, сбросили данные о них в таблицу, очистили массив.
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") И СтруктураПараметров.Свойство("МассивПУ") Тогда
		СтруктураПараметров.Вставить("МассивПУ", Новый Массив);
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтрокуВТаблицуЗначений()

&НаКлиентеНаСервереБезКонтекста
// Функция возвращает имя колонки.
Функция ОпределитьИмяКолонки(Параметр)
	
	Возврат СтрЗаменить(СокрЛП(Параметр), " ", "");
	
КонецФункции

&НаКлиенте
// Процедура выполняет загрузку реестра из файла.
Процедура ЗагрузитьРеестр()
	
	НачатьПомещениеФайла(Новый ОписаниеОповещения("ОбработатьРезультатПомещенияФайла", ЭтаФорма),
	"", Объект.ИмяФайлаЗагрузки, Ложь);
	
	ОбработчикЗавершения = Новый ОписаниеОповещения("ОбработатьРезультатПомещенияФайла", ЭтаФорма);
	ИмяФайла=Объект.ИмяФайлаЗагрузки;
	Если РасширениеПодключено И ЗначениеЗаполнено(ИмяФайла) Тогда
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Чтение данных из файла реестра """ + Объект.ИмяФайлаЗагрузки + """:");
		
		СоответствиеИменФайловИАдресов = Новый Соответствие;
		СоответствиеИменФайловИАдресов.Вставить(ИмяФайла, ПоместитьВоВременноеХранилище(ИмяФайла, Новый УникальныйИдентификатор));
		МассивЗагружаемыхФайлов = УПЖКХ_РаботаСФайламиСервер.ПолучитьМассивПередаваемыхФайлов(СоответствиеИменФайловИАдресов);
		УПЖКХ_РаботаСФайламиКлиент.ЗагрузитьФайл(РасширениеПодключено,ОбработчикЗавершения, МассивЗагружаемыхФайлов);
		
	Иначе
		СоответствиеИменФайловИАдресов = Новый Соответствие;
		СоответствиеИменФайловИАдресов.Вставить("", ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор));
		МассивЗагружаемыхФайлов = УПЖКХ_РаботаСФайламиСервер.ПолучитьМассивПередаваемыхФайлов(СоответствиеИменФайловИАдресов);
		
		УПЖКХ_РаботаСФайламиКлиент.ЗагрузитьФайл(РасширениеПодключено,ОбработчикЗавершения, МассивЗагружаемыхФайлов);
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьРеестр()

&НаКлиенте
// Обработчик результата помещения файла, вызванного в процедуре "ЗагрузитьРеестр()".
Процедура ОбработатьРезультатПомещенияФайла(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ЗагрузитьРеестрВДерево(Адрес);
		
		ОбновитьНомераСтрок();
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатПомещенияФайла()

&НаСервере
// Загружает в дерево данные из файла.
Процедура ЗагрузитьРеестрВДерево(Источник)
	
	ЗаполнитьТаблицуДанныхИзФайла(Источник);
	
	Если ТаблицаДанныхФайла.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось получить данные из файла реестра.");
		Возврат;
	КонецЕсли;
	
	// Заполним служебный номер строки числовым значением по порядку.
	СлужебныйНомерСтроки = 1;
	Для Каждого ТекСтрока Из ТаблицаДанныхФайла Цикл
		ТекСтрока.СлужебныйНомерСтроки = СлужебныйНомерСтроки;
		СлужебныйНомерСтроки = СлужебныйНомерСтроки + 1;
	КонецЦикла;
	
	Если Объект.ПолеИдентификацииЛС = "" Тогда
		врПолеИдентификацииЛС = Неопределено;
	Иначе
		врПолеИдентификацииЛС = Объект.ПолеИдентификацииЛС;
	КонецЕсли;
	
	// Получаем максимальные значения дат и показаний, подготавливаем данные для вывода.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПолеИдентификацииЛС", врПолеИдентификацииЛС);
	Запрос.УстановитьПараметр("ТаблицаДанныхФайла",  ТаблицаДанныхФайла);
	Запрос.УстановитьПараметр("ТекущаяДата",         ТекущаяДата());
	
	Запрос.Текст = ПолучитьТекстЗапросаПоДаннымРеестра();
	
	Попытка
		ТаблицаДанныхРеестра = Запрос.Выполнить().Выгрузить();
	Исключение
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Произошла ошибка при соответствии данных файла реестра с данными в базе данных.
		|Необходимо проверить корректное заполнение настроек загрузки и данных в файле реестра.");
		Возврат;
	КонецПопытки;
	
	Если ТаблицаДанныхРеестра.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Приборы учета не найдены в базе. Возможно неверно установлено соответствие в формате файла загрузки
		|или неверно заполнен файл реестра.");
		Возврат;
	КонецЕсли;
	
	// Если счетчик определяется по услуге, то тогда нужно отобрать счетчики,
	// соответствующие порядковым номерам счетчиков, закрепленных на объект.
	// Например, если на л/с установлено 2 ПУ, а в строке таблица из настроек установлено, что это именно второй ПУ,
	// то для данной строки реестра принудительно устанавливается второй ПУ в порядке сортировки имен ПУ из списка ПУ,
	// действующих на л/с. При этом данная проверка выполняется не только здесь при чтении реестра,
	// она выполняется еще и при проверке корректности таблицы реестра перед формированием документов.
	// В будущем проверку перед формированием документов нужно будет переработать, более подробное
	// описание есть в функции "ВыполнитьПроверкуКорректностиЗаполненияДереваРеестра".
	ИсключитьСтрокиПоПорядковомуНомеру(ТаблицаДанныхРеестра, "Счетчик");
	
	ТаблицаДанныхРеестра.Сортировать("НомерСтрокиВФайле Возр");
	
	ИмяРеквизитаЛС = "";
	
	Если Объект.ОпределятьЛСИзШтрихкода Тогда
		ИмяРеквизитаЛС = "штрихкоду";
	ИначеЕсли Объект.ПолеИдентификацииЛС = "КодЛС" Тогда
		ИмяРеквизитаЛС = "коду";
	ИначеЕсли Объект.ПолеИдентификацииЛС = "НаименованиеЛС" Тогда
		ИмяРеквизитаЛС = "наименованию";
	ИначеЕсли Объект.ПолеИдентификацииЛС = "ИдентификаторЛС" Тогда
		ИмяРеквизитаЛС = "идентификатору";
	КонецЕсли;
	
	РеестрПоказаний = РеквизитФормыВЗначение("ДеревоПоказаний", Тип("ДеревоЗначений"));
	
	// Заполнение дерева реестра показаний.
	Счетчики = ТаблицаДанныхРеестра.Скопировать(, "НомерСтрокиВФайле");
	Счетчики.Свернуть("НомерСтрокиВФайле");
	
	СтруктураПоиска = Новый Структура("НомерСтрокиВФайле");
	
	НомерСтроки = 0;
	
	ТекстСообщения = "В файле реестра";
	
	Если ФорматФайла = СтруктураЗначенийПолей.СпФорматовФайла[3].Значение Тогда // "XML"
		Разделитель = Символы.ПС + Символы.Таб;
	Иначе
		Разделитель = ", ";
	КонецЕсли;
	
	Для каждого ТекСчетчик из Счетчики Цикл
		
		// Увеличиваем номер строки.
		НомерСтроки = НомерСтроки + 1;
		
		СтруктураПоиска.НомерСтрокиВФайле = ТекСчетчик.НомерСтрокиВФайле;
		ИсходныеСтрокиСчетчика = ТаблицаДанныхРеестра.НайтиСтроки(СтруктураПоиска);
		
		ВыводитьСообщениеПоЛС     = Истина;
		ВыводитьСообщениеПоУслуге = Истина;
		
		ТекстСообщенияПоСтроке = "";
		Для Каждого ТекСтрока из ИсходныеСтрокиСчетчика Цикл
			
			УстановитьИспользование = Истина;
			
			Если ТекСтрока.Счетчик.Пустая() Тогда
				Если ТекСтрока.Объект = Неопределено И врПолеИдентификацииЛС <> Неопределено Тогда
					УстановитьИспользование = Ложь;
					Если ВыводитьСообщениеПоЛС Тогда
						ВыводитьСообщениеПоЛС   = Ложь;
						ТекстСообщенияПоСтроке = ТекстСообщенияПоСтроке
						+ ?(ПустаяСтрока(ТекстСообщенияПоСтроке), "", Разделитель)
						+ "не определен лицевой счет по "
						+ ИмяРеквизитаЛС
						+ ": """
						+ СокрЛП(ТекСтрока.ОбъектВФайле)
						+ """";
					КонецЕсли;
				КонецЕсли;
				Если ТекСтрока.ОпределятьПУПоСсылкеНаУслугу Тогда
					Если ТекСтрока.Услуга.Пустая() И ВыводитьСообщениеПоУслуге Тогда
						УстановитьИспользование   = Ложь;
						ВыводитьСообщениеПоУслуге = Ложь;
						ТекстСообщенияПоСтроке = ТекстСообщенияПоСтроке
						+ ?(ПустаяСтрока(ТекстСообщенияПоСтроке), "", Разделитель)
						+ "не указана услуга для определения счетчика.";
					КонецЕсли;
				Иначе
					УстановитьИспользование   = Ложь;
					ВыводитьСообщениеПоУслуге = Ложь;
					ТекстСообщенияПоСтроке = ТекстСообщенияПоСтроке
					+ ?(ПустаяСтрока(ТекстСообщенияПоСтроке), "", Разделитель)
					+ "не определен счетчик по ";
					Если ЗначениеЗаполнено(ТекСтрока.Объект) Тогда
						ТекстСообщенияПоСтроке = ТекстСообщенияПоСтроке + "лицевому счету """ + ТекСтрока.Объект + """ и ";
					ИначеЕсли ЗначениеЗаполнено(ТекСтрока.ОбъектВФайле) Тогда
						ТекстСообщенияПоСтроке = ТекстСообщенияПоСтроке + "лицевому счету """ + ТекСтрока.ОбъектВФайле + """ и ";
					КонецЕсли;
					ТекстСообщенияПоСтроке = ТекстСообщенияПоСтроке
					+ ТекСтрока.ПризнакИдентификацииПУ
					+ ": """
					+ СокрЛП(ТекСтрока.НомерСчетчикаВФайле)
					+ """";
				КонецЕсли;
			Иначе
				// Если нет показаний в файле, то флаг использования для загрузки снимаем.
				Если ТекСтрока.ТарифностьСчетчика = Перечисления.КВП_ТарифностьСчетчиков.Однотарифный
					И ТекСтрока.ДневноеПоказание = Неопределено
					И ТекСтрока.ЭтоПустоеДневноеПоказание Тогда
					УстановитьИспользование = Ложь;
				ИначеЕсли ТекСтрока.ТарифностьСчетчика = Перечисления.КВП_ТарифностьСчетчиков.Двухтарифный
					И ТекСтрока.ДневноеПоказание = Неопределено И ТекСтрока.НочноеПоказание = Неопределено
					И ТекСтрока.ЭтоПустоеНочноеПоказание Тогда
					УстановитьИспользование = Ложь;
				ИначеЕсли ТекСтрока.ТарифностьСчетчика = Перечисления.КВП_ТарифностьСчетчиков.Трехтарифный
					И ТекСтрока.ДневноеПоказание = Неопределено И ТекСтрока.НочноеПоказание = Неопределено И ТекСтрока.ПиковоеПоказание = Неопределено
					И ТекСтрока.ЭтоПустоеПиковоеПоказани Тогда
					УстановитьИспользование = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока = РеестрПоказаний.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.Номер = НомерСтроки;
			
			Если УстановитьИспользование Тогда
				НоваяСтрока.Использовать = Истина;
			КонецЕсли;
			
			// Заполнение расхода по счетчику.
			ОбщаяСтруктураПоказаний = Новый Структура;
			УПЖКХ_ВводПоказанийПриборовУчетаСервер.ЗаполнитьОбщуюСтруктуруПоказаний(ОбщаяСтруктураПоказаний, ТекСтрока);
			
			Если Не НоваяСтрока.ДневноеПоказание = Неопределено Тогда
				НоваяСтрока.ДневноеПоказаниеРасход = УПЖКХ_ВводПоказанийПриборовУчетаКлиентСервер.ПолучитьРасходПоСтрокеСчетчика(ОбщаяСтруктураПоказаний, "ДневноеПоказание");
				НоваяСтрока.ПустоеДневноеПоказание = Ложь;
			Иначе
				НоваяСтрока.ПустоеДневноеПоказание = Истина;
			КонецЕсли;
			
			Если Не НоваяСтрока.НочноеПоказание = Неопределено Тогда
				НоваяСтрока.НочноеПоказаниеРасход = УПЖКХ_ВводПоказанийПриборовУчетаКлиентСервер.ПолучитьРасходПоСтрокеСчетчика(ОбщаяСтруктураПоказаний, "НочноеПоказание");
				НоваяСтрока.ПустоеНочноеПоказание = Ложь;
			Иначе
				НоваяСтрока.ПустоеНочноеПоказание = Истина;
			КонецЕсли;
			
			Если Не НоваяСтрока.ПиковоеПоказание = Неопределено Тогда
				НоваяСтрока.ПиковоеПоказаниеРасход = УПЖКХ_ВводПоказанийПриборовУчетаКлиентСервер.ПолучитьРасходПоСтрокеСчетчика(ОбщаяСтруктураПоказаний, "ПиковоеПоказание");
				НоваяСтрока.ПустоеПиковоеПоказание = Ложь;
			Иначе
				НоваяСтрока.ПустоеПиковоеПоказание = Истина;
			КонецЕсли;
			
			// Определение среднего расхода.
			СтруктураСреднихРасходов = ПолучитьСреднийРасход(ТекСтрока.Счетчик, ТекСтрока.ДатаПоказания);// Структура: "Дневной", "Ночной", "Пиковый".
			
			НоваяСтрока.СреднийРасходДневной = СтруктураСреднихРасходов.Дневной;
			НоваяСтрока.СреднийРасходНочной  = СтруктураСреднихРасходов.Ночной;
			НоваяСтрока.СреднийРасходПиковый = СтруктураСреднихРасходов.Пиковый;
			
		КонецЦикла;
		
		Если НЕ ПустаяСтрока(ТекстСообщенияПоСтроке) Тогда
			ВывестиНачальноеСообщениеXML = Истина;
			Если ФорматФайла = СтруктураЗначенийПолей.СпФорматовФайла[3].Значение Тогда // "XML"
				Если ВывестиНачальноеСообщениеXML Тогда
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ТекстСообщения + ": " + Символы.Таб);
					ВывестиНачальноеСообщениеXML = Ложь;
				КонецЕсли;
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(Символы.Таб + ТекстСообщенияПоСтроке);
			Иначе
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ТекстСообщения + " строка № " + ТекСчетчик.НомерСтрокиВФайле + ": " + ТекстСообщенияПоСтроке);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	РеестрПоказаний.Строки.Сортировать("ПорядковыйНомерПУВСоставеПараметров");
	
	ЗначениеВРеквизитФормы(РеестрПоказаний, "ДеревоПоказаний");
	
КонецПроцедуры // ЗагрузитьРеестрВДерево()

&НаСервере
// Функция возвращает текст запроса к базе по данным файла реестра.
Функция ПолучитьТекстЗапросаПоДаннымРеестра()
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаИсходныхДанных.Объект КАК ОбъектВФайле,
	|	ТаблицаИсходныхДанных.Услуга КАК Услуга,
	|	ТаблицаИсходныхДанных.ДатаПоказания КАК ДатаПоказания,
	|	ВЫРАЗИТЬ(ТаблицаИсходныхДанных.Счетчик КАК СТРОКА(150)) КАК НомерСчетчикаВФайле,
	|	ТаблицаИсходныхДанных.ДневноеПоказание КАК ДневноеПоказание,
	|	ТаблицаИсходныхДанных.НочноеПоказание КАК НочноеПоказание,
	|	ТаблицаИсходныхДанных.ПиковоеПоказание КАК ПиковоеПоказание,
	|	ТаблицаИсходныхДанных.ПризнакПУ КАК ПризнакПУ,
	|	ВЫБОР
	|		КОГДА ТаблицаИсходныхДанных.ПризнакПУ = ""ПоСсылкеНаУслугу""
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОпределятьПУПоСсылкеНаУслугу,
	|	ТаблицаИсходныхДанных.НомерСтроки КАК НомерСтрокиВФайле,
	|	ТаблицаИсходныхДанных.ПорядковыйНомерПУВБазе КАК ПорядковыйНомерПУВБазе,
	|	ТаблицаИсходныхДанных.СлужебныйНомерСтроки КАК СлужебныйНомерСтроки,
	|	ВЫБОР
	|		КОГДА ТаблицаИсходныхДанных.ПризнакПУ = ""КодСчетчика""
	|			ТОГДА ""коду""
	|		КОГДА ТаблицаИсходныхДанных.ПризнакПУ = ""НаименованиеСчетчика""
	|			ТОГДА ""наименованию""
	|		КОГДА ТаблицаИсходныхДанных.ПризнакПУ = ""ИдентификаторСчетчика""
	|			ТОГДА ""идентификатору""
	|		КОГДА ТаблицаИсходныхДанных.ПризнакПУ = ""ЗаводскойНомерСчетчика""
	|			ТОГДА ""заводскому номеру""
	|		КОГДА ТаблицаИсходныхДанных.ПризнакПУ = ""НомерВГИСЖКХ""
	|			ТОГДА ""номеру в ГИС ЖКХ""
	|		КОГДА ТаблицаИсходныхДанных.ПризнакПУ = ""НаименованиеУслугиСчетчика""
	|			ТОГДА ""наименованию услуги""
	|		КОГДА ТаблицаИсходныхДанных.ПризнакПУ = ""КодУслугиСчетчика""
	|			ТОГДА ""коду услуги""
	|		КОГДА ТаблицаИсходныхДанных.ПризнакПУ = ""ПоСсылкеНаУслугу""
	|			ТОГДА ""ссылке на услугу""
	|	КОНЕЦ КАК ПризнакИдентификацииПУ,
	|	ТаблицаИсходныхДанных.ПорядковыйНомерПУВСоставеПараметров КАК ПорядковыйНомерПУВСоставеПараметров,
	|	ТаблицаИсходныхДанных.ЭтоПустоеДневноеПоказание КАК ЭтоПустоеДневноеПоказание,
	|	ТаблицаИсходныхДанных.ЭтоПустоеНочноеПоказание КАК ЭтоПустоеНочноеПоказание,
	|	ТаблицаИсходныхДанных.ЭтоПустоеПиковоеПоказание КАК ЭтоПустоеПиковоеПоказание
	|ПОМЕСТИТЬ втДанныеРеестра
	|ИЗ
	|	&ТаблицаДанныхФайла КАК ТаблицаИсходныхДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует КАК Действует,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик КАК Счетчик,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.Тарифность КАК ТарифностьСчетчика,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.Код КАК КодСчетчика,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.Наименование КАК НаименованиеСчетчика,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.Идентификатор КАК ИдентификаторСчетчика,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ЗаводскойНомер КАК ЗаводскойНомерСчетчика,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги КАК ВидУслуги,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги.Код КАК КодВидаУслуги,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.ВидУслуги.Наименование КАК НаименованиеВидаУслуги,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект КАК Объект,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект.Код КАК КодОбъекта,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект.Наименование КАК НаименованиеОбъекта,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект.Идентификатор КАК ИдентификаторОбъекта,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.НомерВГИСЖКХ КАК НомерВГИСЖКХ
	|ПОМЕСТИТЬ врЗакрепленныеСчетчики
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(&ТекущаяДата, ДатаИзменения <= &ТекущаяДата) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втДанныеРеестра.СлужебныйНомерСтроки КАК СлужебныйНомерСтроки,
	|	врЗакрепленныеСчетчики.Счетчик КАК Счетчик,
	|	врЗакрепленныеСчетчики.ТарифностьСчетчика КАК ТарифностьСчетчика,
	|	врЗакрепленныеСчетчики.ВидУслуги КАК ВидУслуги,
	|	врЗакрепленныеСчетчики.Объект КАК Объект,
	|	врЗакрепленныеСчетчики.Действует КАК Действует
	|ПОМЕСТИТЬ врНайденныеЗакрепленныеСчетчики
	|ИЗ
	|	втДанныеРеестра КАК втДанныеРеестра
	|		ЛЕВОЕ СОЕДИНЕНИЕ врЗакрепленныеСчетчики КАК врЗакрепленныеСчетчики
	|		ПО (ВЫБОР
	|				КОГДА втДанныеРеестра.ПризнакПУ = ""КодСчетчика""
	|					ТОГДА втДанныеРеестра.НомерСчетчикаВФайле = врЗакрепленныеСчетчики.КодСчетчика
	|				КОГДА втДанныеРеестра.ПризнакПУ = ""НаименованиеСчетчика""
	|					ТОГДА втДанныеРеестра.НомерСчетчикаВФайле = врЗакрепленныеСчетчики.НаименованиеСчетчика
	|				КОГДА втДанныеРеестра.ПризнакПУ = ""ИдентификаторСчетчика""
	|					ТОГДА втДанныеРеестра.НомерСчетчикаВФайле = врЗакрепленныеСчетчики.ИдентификаторСчетчика
	|				КОГДА втДанныеРеестра.ПризнакПУ = ""ЗаводскойНомерСчетчика""
	|					ТОГДА втДанныеРеестра.НомерСчетчикаВФайле = врЗакрепленныеСчетчики.ЗаводскойНомерСчетчика
	|				КОГДА втДанныеРеестра.ПризнакПУ = ""НомерВГИСЖКХ""
	|					ТОГДА втДанныеРеестра.НомерСчетчикаВФайле = врЗакрепленныеСчетчики.НомерВГИСЖКХ
	|				КОГДА втДанныеРеестра.ПризнакПУ = ""НаименованиеУслугиСчетчика""
	|					ТОГДА втДанныеРеестра.НомерСчетчикаВФайле = врЗакрепленныеСчетчики.НаименованиеВидаУслуги
	|				КОГДА втДанныеРеестра.ПризнакПУ = ""КодУслугиСчетчика""
	|					ТОГДА втДанныеРеестра.НомерСчетчикаВФайле = врЗакрепленныеСчетчики.КодВидаУслуги
	|				КОГДА втДанныеРеестра.ПризнакПУ = ""ПоСсылкеНаУслугу""
	|					ТОГДА втДанныеРеестра.Услуга = врЗакрепленныеСчетчики.ВидУслуги
	|			КОНЕЦ)
	|			И (ВЫБОР
	|				КОГДА &ПолеИдентификацииЛС = НЕОПРЕДЕЛЕНО
	|					ТОГДА ИСТИНА
	|				КОГДА &ПолеИдентификацииЛС = ""КодЛС""
	|					ТОГДА втДанныеРеестра.ОбъектВФайле = врЗакрепленныеСчетчики.КодОбъекта
	|				КОГДА &ПолеИдентификацииЛС = ""НаименованиеЛС""
	|					ТОГДА втДанныеРеестра.ОбъектВФайле = врЗакрепленныеСчетчики.НаименованиеОбъекта
	|							ИЛИ ""л/с №"" + (ВЫРАЗИТЬ(втДанныеРеестра.ОбъектВФайле КАК СТРОКА(95))) = (ВЫРАЗИТЬ(врЗакрепленныеСчетчики.НаименованиеОбъекта КАК СТРОКА(100)))
	|				КОГДА &ПолеИдентификацииЛС = ""ИдентификаторЛС""
	|					ТОГДА втДанныеРеестра.ОбъектВФайле = врЗакрепленныеСчетчики.ИдентификаторОбъекта
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врНайденныеЗакрепленныеСчетчики.СлужебныйНомерСтроки КАК СлужебныйНомерСтроки,
	|	врНайденныеЗакрепленныеСчетчики.Счетчик КАК Счетчик,
	|	врНайденныеЗакрепленныеСчетчики.ТарифностьСчетчика КАК ТарифностьСчетчика,
	|	врНайденныеЗакрепленныеСчетчики.ВидУслуги КАК ВидУслуги,
	|	врНайденныеЗакрепленныеСчетчики.Объект КАК Объект,
	|	врНайденныеЗакрепленныеСчетчики.Действует КАК Действует,
	|	КВП_ПоказанияСчетчиковСрезПоследних.Период КАК ДатаПредыдущегоПоказания,
	|	КВП_ПоказанияСчетчиковСрезПоследних.НачальноеПоказание КАК ПредыдущееПоказаниеНачальное,
	|	ВЫБОР
	|		КОГДА врНайденныеЗакрепленныеСчетчики.Счетчик.СпособРегистрацииПоказаний = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРегистрацииПоказанийСчетчиков.НарастающимИтогом)
	|			ТОГДА ЕСТЬNULL(КВП_ПоказанияСчетчиковСрезПоследних.ДневноеПоказание, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДневноеПоказаниеПредыдущее,
	|	ВЫБОР
	|		КОГДА врНайденныеЗакрепленныеСчетчики.Счетчик.СпособРегистрацииПоказаний = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРегистрацииПоказанийСчетчиков.НарастающимИтогом)
	|			ТОГДА ЕСТЬNULL(КВП_ПоказанияСчетчиковСрезПоследних.НочноеПоказание, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НочноеПоказаниеПредыдущее,
	|	ВЫБОР
	|		КОГДА врНайденныеЗакрепленныеСчетчики.Счетчик.СпособРегистрацииПоказаний = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРегистрацииПоказанийСчетчиков.НарастающимИтогом)
	|			ТОГДА ЕСТЬNULL(КВП_ПоказанияСчетчиковСрезПоследних.ПиковоеПоказание, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПиковоеПоказаниеПредыдущее
	|ПОМЕСТИТЬ врНайденныеЗакрепленныеСчетчикиСПоказаниями
	|ИЗ
	|	врНайденныеЗакрепленныеСчетчики КАК врНайденныеЗакрепленныеСчетчики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПоказанияСчетчиков.СрезПоследних(&ТекущаяДата, ) КАК КВП_ПоказанияСчетчиковСрезПоследних
	|		ПО врНайденныеЗакрепленныеСчетчики.Счетчик = КВП_ПоказанияСчетчиковСрезПоследних.Счетчик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует КАК Действует,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Код КАК Код,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Наименование КАК Наименование,
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ врЛицевыеСчета
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(&ТекущаяДата, ) КАК КВП_ЛицевыеСчетаСрезПоследних
	|ГДЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеРеестра.СлужебныйНомерСтроки КАК СлужебныйНомерСтроки,
	|	врЛицевыеСчета.ЛицевойСчет КАК ЛицевойСчет,
	|	врЛицевыеСчета.Действует КАК Действует
	|ПОМЕСТИТЬ врНайденныеЛицевыеСчета
	|ИЗ
	|	втДанныеРеестра КАК втДанныеРеестра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врЛицевыеСчета КАК врЛицевыеСчета
	|		ПО (ВЫБОР
	|				КОГДА &ПолеИдентификацииЛС = НЕОПРЕДЕЛЕНО
	|					ТОГДА ЛОЖЬ
	|				КОГДА &ПолеИдентификацииЛС = ""КодЛС""
	|					ТОГДА втДанныеРеестра.ОбъектВФайле = врЛицевыеСчета.Код
	|				КОГДА &ПолеИдентификацииЛС = ""НаименованиеЛС""
	|					ТОГДА втДанныеРеестра.ОбъектВФайле = врЛицевыеСчета.Наименование
	|							ИЛИ ""л/с №"" + (ВЫРАЗИТЬ(втДанныеРеестра.ОбъектВФайле КАК СТРОКА(95))) = (ВЫРАЗИТЬ(врЛицевыеСчета.Наименование КАК СТРОКА(100)))
	|				КОГДА &ПолеИдентификацииЛС = ""ИдентификаторЛС""
	|					ТОГДА втДанныеРеестра.ОбъектВФайле = врЛицевыеСчета.Идентификатор
	|			КОНЕЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеРеестра.НомерСтрокиВФайле КАК НомерСтрокиВФайле,
	|	втДанныеРеестра.ОбъектВФайле КАК ОбъектВФайле,
	|	втДанныеРеестра.НомерСчетчикаВФайле КАК НомерСчетчикаВФайле,
	|	втДанныеРеестра.ДатаПоказания КАК ДатаПоказания,
	|	втДанныеРеестра.ДневноеПоказание КАК ДневноеПоказание,
	|	втДанныеРеестра.НочноеПоказание КАК НочноеПоказание,
	|	втДанныеРеестра.ПиковоеПоказание КАК ПиковоеПоказание,
	|	втДанныеРеестра.ПризнакПУ КАК ПризнакПУ,
	|	втДанныеРеестра.ОпределятьПУПоСсылкеНаУслугу КАК ОпределятьПУПоСсылкеНаУслугу,
	|	втДанныеРеестра.ПорядковыйНомерПУВБазе КАК ПорядковыйНомерПУВБазе,
	|	втДанныеРеестра.ПризнакИдентификацииПУ КАК ПризнакИдентификацииПУ,
	|	втДанныеРеестра.ПорядковыйНомерПУВСоставеПараметров КАК ПорядковыйНомерПУВСоставеПараметров,
	|	ИСТИНА КАК ЭтоДанныеФайлаРеестра,
	|	ЕСТЬNULL(врНайденныеЗакрепленныеСчетчикиСПоказаниями.Счетчик, ЗНАЧЕНИЕ(Справочник.КВП_Счетчики.ПустаяСсылка)) КАК Счетчик,
	|	ЕСТЬNULL(врНайденныеЗакрепленныеСчетчикиСПоказаниями.Счетчик.СпособРегистрацииПоказаний, ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРегистрацииПоказанийСчетчиков.ПустаяСсылка)) КАК СпособРегистрацииПоказаний,
	|	ЕСТЬNULL(врНайденныеЗакрепленныеСчетчикиСПоказаниями.Счетчик.Разрядность, 6) КАК Разрядность,
	|	ЕСТЬNULL(врНайденныеЗакрепленныеСчетчикиСПоказаниями.ТарифностьСчетчика, ЗНАЧЕНИЕ(Перечисление.КВП_ТарифностьСчетчиков.ПустаяСсылка)) КАК Тарифность,
	|	ЕСТЬNULL(врНайденныеЗакрепленныеСчетчикиСПоказаниями.ТарифностьСчетчика, ЗНАЧЕНИЕ(Перечисление.КВП_ТарифностьСчетчиков.ПустаяСсылка)) КАК ТарифностьСчетчика,
	|	ВЫБОР
	|		КОГДА втДанныеРеестра.ПризнакПУ = ""ПоСсылкеНаУслугу""
	|			ТОГДА втДанныеРеестра.Услуга
	|		ИНАЧЕ ЕСТЬNULL(врНайденныеЗакрепленныеСчетчикиСПоказаниями.ВидУслуги, ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка))
	|	КОНЕЦ КАК Услуга,
	|	ЕСТЬNULL(врНайденныеЛицевыеСчета.ЛицевойСчет, ЕСТЬNULL(врНайденныеЗакрепленныеСчетчикиСПоказаниями.Объект, НЕОПРЕДЕЛЕНО)) КАК Объект,
	|	ЕСТЬNULL(врНайденныеЗакрепленныеСчетчикиСПоказаниями.ДатаПредыдущегоПоказания, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПредыдущегоПоказания,
	|	ЕСТЬNULL(врНайденныеЗакрепленныеСчетчикиСПоказаниями.ПредыдущееПоказаниеНачальное, ИСТИНА) КАК ПредыдущееПоказаниеНачальное,
	|	ЕСТЬNULL(врНайденныеЗакрепленныеСчетчикиСПоказаниями.ДневноеПоказаниеПредыдущее, 0) КАК ДневноеПоказаниеПредыдущее,
	|	ЕСТЬNULL(врНайденныеЗакрепленныеСчетчикиСПоказаниями.НочноеПоказаниеПредыдущее, 0) КАК НочноеПоказаниеПредыдущее,
	|	ЕСТЬNULL(врНайденныеЗакрепленныеСчетчикиСПоказаниями.ПиковоеПоказаниеПредыдущее, 0) КАК ПиковоеПоказаниеПредыдущее,
	|	втДанныеРеестра.ЭтоПустоеДневноеПоказание КАК ЭтоПустоеДневноеПоказание,
	|	втДанныеРеестра.ЭтоПустоеНочноеПоказание КАК ЭтоПустоеНочноеПоказание,
	|	втДанныеРеестра.ЭтоПустоеПиковоеПоказание КАК ЭтоПустоеПиковоеПоказание
	|ИЗ
	|	втДанныеРеестра КАК втДанныеРеестра
	|		ЛЕВОЕ СОЕДИНЕНИЕ врНайденныеЛицевыеСчета КАК врНайденныеЛицевыеСчета
	|		ПО втДанныеРеестра.СлужебныйНомерСтроки = врНайденныеЛицевыеСчета.СлужебныйНомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ врНайденныеЗакрепленныеСчетчикиСПоказаниями КАК врНайденныеЗакрепленныеСчетчикиСПоказаниями
	|		ПО втДанныеРеестра.СлужебныйНомерСтроки = врНайденныеЗакрепленныеСчетчикиСПоказаниями.СлужебныйНомерСтроки";
	
	Возврат ТекстЗапроса;
	
КонецФункции // ПолучитьТекстЗапросаПоДаннымРеестра()

&НаСервере
// Процедура заполняет табличную часть "Таблица реестра" на основании табличного поля "ДеревоПоказаний".
Процедура ЗаполнитьТаблицуРеестраИзДерева()
	
	Объект.ТаблицаРеестра.Очистить();
	
	СтрокиДерева = ДанныеФормыВЗначение(ДеревоПоказаний, Тип("ДеревоЗначений"));
	
	Для каждого ТекСтрокаДерева из СтрокиДерева.Строки Цикл
		Если ТекСтрокаДерева.Использовать Тогда
			НоваяСтрока = Объект.ТаблицаРеестра.Добавить();
			НоваяСтрока.Использовать                        = ТекСтрокаДерева.Использовать;
			НоваяСтрока.Объект                              = ТекСтрокаДерева.Объект;
			НоваяСтрока.Счетчик                             = ТекСтрокаДерева.Счетчик;
			НоваяСтрока.Услуга                              = ТекСтрокаДерева.Услуга;
			НоваяСтрока.НомерСтрокиДерева                   = ТекСтрокаДерева.Номер;
			НоваяСтрока.ДатаПоказания                       = ТекСтрокаДерева.ДатаПоказания;
			НоваяСтрока.ДневноеПоказание                    = ТекСтрокаДерева.ДневноеПоказание;
			НоваяСтрока.НочноеПоказание                     = ТекСтрокаДерева.НочноеПоказание;
			НоваяСтрока.ПиковоеПоказание                    = ТекСтрокаДерева.ПиковоеПоказание;
			НоваяСтрока.ПорядковыйНомерПУВБазе              = ТекСтрокаДерева.ПорядковыйНомерПУВБазе;
			НоваяСтрока.ОпределятьПУПоСсылкеНаУслугу        = ТекСтрокаДерева.ОпределятьПУПоСсылкеНаУслугу;
			НоваяСтрока.ПризнакПУ                           = ТекСтрокаДерева.ПризнакПУ;
			НоваяСтрока.ПорядковыйНомерПУВСоставеПараметров = ТекСтрокаДерева.ПорядковыйНомерПУВСоставеПараметров;
			НоваяСтрока.ТипОшибкиДневной                    = ТекСтрокаДерева.ТипОшибкиДневной;
			НоваяСтрока.ТипОшибкиНочной                     = ТекСтрокаДерева.ТипОшибкиНочной;
			НоваяСтрока.ТипОшибкиПиковый                    = ТекСтрокаДерева.ТипОшибкиПиковый;
			НоваяСтрока.ПоказанияКорректны                  = ТекСтрокаДерева.ПоказанияКорректны;
			НоваяСтрока.СреднийРасходДневной                = ТекСтрокаДерева.СреднийРасходДневной;
			НоваяСтрока.СреднийРасходНочной                 = ТекСтрокаДерева.СреднийРасходНочной;
			НоваяСтрока.СреднийРасходПиковый                = ТекСтрокаДерева.СреднийРасходПиковый;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблицуРеестраИзДерева()

&НаСервере
// Функция возвращает таблицу номеров строк табличного поля "ДеревоПоказаний",
// содержащих ошибочные сведения об объектах счетчиков.
Функция ВыполнитьПроверкуКорректностиЗаполненияДереваРеестра(РеестрДерево)
	
	// ПРОВЕРКА КОРРЕКТНОСТИ РЕЕСТРА ТРЕБУЕТ ПЕРЕРАБОТКИ, а именно:
	// 1. Проверка настроек загрузки должна выполняться при чтении реестра,
	// а не при формировании документов, если это возможно. А сейчас настройка определения ПУ по услуге
	// мигрирует через ТЧ обработки и используется при формировании документов ("ОпределятьПУПоСсылкеНаУслугу", "ПорядковыйНомерПУВБазе", "ПорядковыйНомерПУВСоставеПараметров").
	// 2. Проверка параметров счетчиков также по возможности должна выполняться при чтении реестра,
	// а не перед формированием документов. Если пользователь изменил счетчик, то его и нужно указывать в документе.
	// 3. Если пользователь изменил таблицу уже прочитаного реестра, то заново нужно проверять только те параметры,
	// которые могут измениться из-за правок пользователя.
	// 4. Проблему влияния поля "Дата" показаний на проверку данных перед формированием документов можно решить так:
	//    - если в реестре есть дата, то запрещать редактировать ее, а если и разрешать, то больше не проверять;
	//    - если в реестре нет даты, то дату вводить в шапке обработки, а при ее изменении принудительно очищать таблицу,
	//      чтобы реестр был прочитан заново.
	
	// СЕЙЧАС МЕХАНИЗМ ПРОВЕРКИ РАБОТАЕТ ТАК:
	// 1. Отдельными запросами получаются данные по ПУ, которые определяются по услуге (в соответствии с настройками загрузки),
	// и по остальным ПУ.
	// 2. Далее происходит переопределение (подстановка в строки реестра) нового ПУ в соответствии с настройками
	// определения ПУ по услуге. Т.е. заново проверяется, тот ли ПУ указан, если нет, то он подменяется на нужный.
	// 3. В конце происходит проверка основных параметров всех ПУ, в т.ч. тарифности, действия ПУ, действия л/с.
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаИзДерева", Объект.ТаблицаРеестра.Выгрузить());
	
	// Получим таблицу строк реестра с заполненной датой, далее будем их проверять.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаИзДерева.НомерСтрокиДерева КАК НомерСтроки,
	|	ТаблицаИзДерева.Объект,
	|	ТаблицаИзДерева.Счетчик,
	|	ТаблицаИзДерева.ДатаПоказания,
	|	ТаблицаИзДерева.ДневноеПоказание,
	|	ТаблицаИзДерева.НочноеПоказание,
	|	ТаблицаИзДерева.ПиковоеПоказание,
	|	ТаблицаИзДерева.ПорядковыйНомерПУВБазе,
	|	ТаблицаИзДерева.ОпределятьПУПоСсылкеНаУслугу,
	|	ТаблицаИзДерева.Услуга,
	|	ТаблицаИзДерева.ПризнакПУ,
	|	ТаблицаИзДерева.ПорядковыйНомерПУВСоставеПараметров,
	|	ТаблицаИзДерева.НомерСтрокиВФайле
	|ПОМЕСТИТЬ втТаблицаИзДерева
	|ИЗ
	|	&ТаблицаИзДерева КАК ТаблицаИзДерева
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаИзДерева.НомерСтроки,
	|	ТаблицаИзДерева.Объект,
	|	ТаблицаИзДерева.Счетчик,
	|	ТаблицаИзДерева.ДатаПоказания,
	|	ТаблицаИзДерева.ДневноеПоказание,
	|	ТаблицаИзДерева.НочноеПоказание,
	|	ТаблицаИзДерева.ПиковоеПоказание,
	|	ТаблицаИзДерева.ПорядковыйНомерПУВБазе,
	|	ТаблицаИзДерева.ОпределятьПУПоСсылкеНаУслугу,
	|	ТаблицаИзДерева.Услуга,
	|	ТаблицаИзДерева.ПризнакПУ,
	|	ТаблицаИзДерева.ПорядковыйНомерПУВСоставеПараметров,
	|	ТаблицаИзДерева.НомерСтрокиВФайле
	|ПОМЕСТИТЬ втТаблицаСоответствий
	|ИЗ
	|	втТаблицаИзДерева КАК ТаблицаИзДерева
	|ГДЕ
	|	НЕ ТаблицаИзДерева.ДатаПоказания = ДАТАВРЕМЯ(1, 1, 1)";
	Запрос.Выполнить();
	
	// Получаем строки реестра, в которых ПУ определяется по услуге.
	// Для них заново (сначала это делается при чтении реестра) получается список действующих счетчиков,
	// закрепленных на объектах по услуге. Т.е. получаются все счетчики по услуги и лицевому счету,
	// а не тот, который уже указан в реестре. Далее среди полученных счетчиков будет выбран тот,
	// который соответствует номеру счетчика по настройке загрузки.
	// Также получаются сведения о тарифности ПУ и прочие параметры счетчиков, которые далее будут проверены.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	втТаблицаСоответствий.НомерСтроки КАК НомерСтроки,
	|	втТаблицаСоответствий.Объект КАК ОбъектВТаблице,
	|	втТаблицаСоответствий.Счетчик КАК Счетчик,
	|	втТаблицаСоответствий.ДатаПоказания КАК ДатаПоказания,
	|	втТаблицаСоответствий.ДневноеПоказание КАК ДневноеПоказание,
	|	втТаблицаСоответствий.НочноеПоказание КАК НочноеПоказание,
	|	втТаблицаСоответствий.ПиковоеПоказание КАК ПиковоеПоказание,
	|	втТаблицаСоответствий.ПорядковыйНомерПУВБазе КАК ПорядковыйНомерПУВБазе,
	|	втТаблицаСоответствий.ОпределятьПУПоСсылкеНаУслугу КАК ОпределятьПУПоСсылкеНаУслугу,
	|	втТаблицаСоответствий.Услуга КАК Услуга,
	|	втТаблицаСоответствий.ПризнакПУ КАК ПризнакПУ,
	|	втТаблицаСоответствий.ПорядковыйНомерПУВСоставеПараметров КАК ПорядковыйНомерПУВСоставеПараметров,
	|	втТаблицаСоответствий.НомерСтрокиВФайле КАК НомерСтрокиВФайле
	|ПОМЕСТИТЬ втСчетчикиПоСсылкеНаУслугу
	|ИЗ
	|	втТаблицаСоответствий КАК втТаблицаСоответствий
	|ГДЕ
	|	втТаблицаСоответствий.ОпределятьПУПоСсылкеНаУслугу
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСчетчикиПоСсылкеНаУслугу.НомерСтроки КАК НомерСтроки,
	|	втСчетчикиПоСсылкеНаУслугу.ОбъектВТаблице КАК ОбъектВТаблице,
	|	втСчетчикиПоСсылкеНаУслугу.ДатаПоказания КАК ДатаПоказания,
	|	втСчетчикиПоСсылкеНаУслугу.ДневноеПоказание КАК ДневноеПоказание,
	|	втСчетчикиПоСсылкеНаУслугу.НочноеПоказание КАК НочноеПоказание,
	|	втСчетчикиПоСсылкеНаУслугу.ПиковоеПоказание КАК ПиковоеПоказание,
	|	втСчетчикиПоСсылкеНаУслугу.ПорядковыйНомерПУВБазе КАК ПорядковыйНомерПУВБазе,
	|	втСчетчикиПоСсылкеНаУслугу.Услуга КАК Услуга,
	|	ЕСТЬNULL(КВП_ЗакрепленныеСчетчики.ДатаИзменения, ДАТАВРЕМЯ(1, 1, 1)) КАК Период,
	|	ЕСТЬNULL(КВП_ЗакрепленныеСчетчики.Объект, НЕОПРЕДЕЛЕНО) КАК Объект,
	|	ЕСТЬNULL(КВП_ЗакрепленныеСчетчики.Счетчик, ЗНАЧЕНИЕ(Справочник.КВП_Счетчики.ПустаяСсылка)) КАК Счетчик,
	|	ЕСТЬNULL(КВП_ЗакрепленныеСчетчики.Действует, ЛОЖЬ) КАК ДействиеПУ,
	|	ЕСТЬNULL(КВП_ЗакрепленныеСчетчики.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ПериодРегистратора,
	|	втСчетчикиПоСсылкеНаУслугу.ОпределятьПУПоСсылкеНаУслугу КАК ОпределятьПУПоСсылкеНаУслугу,
	|	втСчетчикиПоСсылкеНаУслугу.ПризнакПУ КАК ПризнакПУ,
	|	втСчетчикиПоСсылкеНаУслугу.ПорядковыйНомерПУВСоставеПараметров КАК ПорядковыйНомерПУВСоставеПараметров,
	|	втСчетчикиПоСсылкеНаУслугу.НомерСтрокиВФайле КАК НомерСтрокиВФайле
	|ПОМЕСТИТЬ втТаблицаСчетчикиПоСсылкеНаУслугу
	|ИЗ
	|	втСчетчикиПоСсылкеНаУслугу КАК втСчетчикиПоСсылкеНаУслугу
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ЗакрепленныеСчетчики КАК КВП_ЗакрепленныеСчетчики
	|		ПО втСчетчикиПоСсылкеНаУслугу.ДатаПоказания >= КВП_ЗакрепленныеСчетчики.ДатаИзменения
	|			И втСчетчикиПоСсылкеНаУслугу.Услуга = КВП_ЗакрепленныеСчетчики.Счетчик.ВидУслуги
	|			И (втСчетчикиПоСсылкеНаУслугу.ОбъектВТаблице = КВП_ЗакрепленныеСчетчики.Объект
	|				ИЛИ &УсловиеСоединенияПУ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втТаблицаСчетчикиПоСсылкеНаУслугу.НомерСтроки КАК НомерСтроки,
	|	МАКСИМУМ(втТаблицаСчетчикиПоСсылкеНаУслугу.Период) КАК Период,
	|	втТаблицаСчетчикиПоСсылкеНаУслугу.Счетчик КАК Счетчик,
	|	втТаблицаСчетчикиПоСсылкеНаУслугу.Объект КАК Объект,
	|	втТаблицаСчетчикиПоСсылкеНаУслугу.НомерСтрокиВФайле КАК НомерСтрокиВФайле
	|ПОМЕСТИТЬ втПериодыДействияПУПоСсылкеНаУслугуПоПоследнимДатамИзменения
	|ИЗ
	|	втТаблицаСчетчикиПоСсылкеНаУслугу КАК втТаблицаСчетчикиПоСсылкеНаУслугу
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаСчетчикиПоСсылкеНаУслугу.НомерСтроки,
	|	втТаблицаСчетчикиПоСсылкеНаУслугу.Счетчик,
	|	втТаблицаСчетчикиПоСсылкеНаУслугу.Объект,
	|	втТаблицаСчетчикиПоСсылкеНаУслугу.НомерСтрокиВФайле
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втПериодыДействияПУПоСсылкеНаУслугуПоПоследнимДатамИзменения.НомерСтроки КАК НомерСтроки,
	|	втПериодыДействияПУПоСсылкеНаУслугуПоПоследнимДатамИзменения.Объект КАК Объект,
	|	втПериодыДействияПУПоСсылкеНаУслугуПоПоследнимДатамИзменения.Счетчик КАК Счетчик,
	|	втПериодыДействияПУПоСсылкеНаУслугуПоПоследнимДатамИзменения.Период КАК Период,
	|	втПериодыДействияПУПоСсылкеНаУслугуПоПоследнимДатамИзменения.НомерСтрокиВФайле КАК НомерСтрокиВФайле,
	|	МАКСИМУМ(втТаблицаСчетчикиПоСсылкеНаУслугу.ПериодРегистратора) КАК ПериодРегистратора
	|ПОМЕСТИТЬ втПериодыДействияПУПоСсылкеНаУслугу
	|ИЗ
	|	втПериодыДействияПУПоСсылкеНаУслугуПоПоследнимДатамИзменения КАК втПериодыДействияПУПоСсылкеНаУслугуПоПоследнимДатамИзменения
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаСчетчикиПоСсылкеНаУслугу КАК втТаблицаСчетчикиПоСсылкеНаУслугу
	|		ПО втПериодыДействияПУПоСсылкеНаУслугуПоПоследнимДатамИзменения.НомерСтроки = втТаблицаСчетчикиПоСсылкеНаУслугу.НомерСтроки
	|			И втПериодыДействияПУПоСсылкеНаУслугуПоПоследнимДатамИзменения.Объект = втТаблицаСчетчикиПоСсылкеНаУслугу.Объект
	|			И втПериодыДействияПУПоСсылкеНаУслугуПоПоследнимДатамИзменения.Счетчик = втТаблицаСчетчикиПоСсылкеНаУслугу.Счетчик
	|			И втПериодыДействияПУПоСсылкеНаУслугуПоПоследнимДатамИзменения.НомерСтрокиВФайле = втТаблицаСчетчикиПоСсылкеНаУслугу.НомерСтрокиВФайле
	|			И втПериодыДействияПУПоСсылкеНаУслугуПоПоследнимДатамИзменения.Период = втТаблицаСчетчикиПоСсылкеНаУслугу.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	втПериодыДействияПУПоСсылкеНаУслугуПоПоследнимДатамИзменения.НомерСтроки,
	|	втПериодыДействияПУПоСсылкеНаУслугуПоПоследнимДатамИзменения.Объект,
	|	втПериодыДействияПУПоСсылкеНаУслугуПоПоследнимДатамИзменения.Счетчик,
	|	втПериодыДействияПУПоСсылкеНаУслугуПоПоследнимДатамИзменения.Период,
	|	втПериодыДействияПУПоСсылкеНаУслугуПоПоследнимДатамИзменения.НомерСтрокиВФайле
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПериодыДействияПУПоСсылкеНаУслугу.НомерСтроки КАК НомерСтроки,
	|	втПериодыДействияПУПоСсылкеНаУслугу.Счетчик КАК Счетчик,
	|	втПериодыДействияПУПоСсылкеНаУслугу.Объект КАК Объект,
	|	ЕСТЬNULL(втТаблицаСчетчикиПоСсылкеНаУслугу.ОбъектВТаблице, """") КАК ОбъектВТаблице,
	|	ЕСТЬNULL(втТаблицаСчетчикиПоСсылкеНаУслугу.ДатаПоказания, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПоказания,
	|	ЕСТЬNULL(втТаблицаСчетчикиПоСсылкеНаУслугу.ПорядковыйНомерПУВБазе, 1) КАК ПорядковыйНомерПУВБазе,
	|	ЕСТЬNULL(втТаблицаСчетчикиПоСсылкеНаУслугу.ДействиеПУ, ЛОЖЬ) КАК ДействиеПУ,
	|	ЕСТЬNULL(втТаблицаСчетчикиПоСсылкеНаУслугу.Услуга, ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)) КАК Услуга,
	|	втПериодыДействияПУПоСсылкеНаУслугу.Счетчик.Тарифность КАК ТарифностьСчетчика,
	|	ВЫБОР
	|		КОГДА втПериодыДействияПУПоСсылкеНаУслугу.Счетчик.Тарифность = ЗНАЧЕНИЕ(Перечисление.КВП_ТарифностьСчетчиков.Однотарифный)
	|					И (НЕ ЕСТЬNULL(втТаблицаСчетчикиПоСсылкеНаУслугу.НочноеПоказание, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
	|						ИЛИ НЕ ЕСТЬNULL(втТаблицаСчетчикиПоСсылкеНаУслугу.ПиковоеПоказание, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО)
	|				ИЛИ втПериодыДействияПУПоСсылкеНаУслугу.Счетчик.Тарифность = ЗНАЧЕНИЕ(Перечисление.КВП_ТарифностьСчетчиков.Двухтарифный)
	|					И НЕ ЕСТЬNULL(втТаблицаСчетчикиПоСсылкеНаУслугу.ПиковоеПоказание, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НесоответствиеТарифности,
	|	ЕСТЬNULL(втТаблицаСчетчикиПоСсылкеНаУслугу.ОпределятьПУПоСсылкеНаУслугу, ЛОЖЬ) КАК ОпределятьПУПоСсылкеНаУслугу,
	|	ЕСТЬNULL(втТаблицаСчетчикиПоСсылкеНаУслугу.ПризнакПУ, """") КАК ПризнакПУ,
	|	ЕСТЬNULL(втТаблицаСчетчикиПоСсылкеНаУслугу.ПорядковыйНомерПУВСоставеПараметров, 0) КАК ПорядковыйНомерПУВСоставеПараметров,
	|	втПериодыДействияПУПоСсылкеНаУслугу.НомерСтрокиВФайле КАК НомерСтрокиВФайле
	|ПОМЕСТИТЬ ТаблицаПУПоСсылкеНаУслугу
	|ИЗ
	|	втПериодыДействияПУПоСсылкеНаУслугу КАК втПериодыДействияПУПоСсылкеНаУслугу
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаСчетчикиПоСсылкеНаУслугу КАК втТаблицаСчетчикиПоСсылкеНаУслугу
	|		ПО втПериодыДействияПУПоСсылкеНаУслугу.НомерСтроки = втТаблицаСчетчикиПоСсылкеНаУслугу.НомерСтроки
	|			И втПериодыДействияПУПоСсылкеНаУслугу.Период = втТаблицаСчетчикиПоСсылкеНаУслугу.Период
	|			И втПериодыДействияПУПоСсылкеНаУслугу.Счетчик = втТаблицаСчетчикиПоСсылкеНаУслугу.Счетчик
	|			И втПериодыДействияПУПоСсылкеНаУслугу.Объект = втТаблицаСчетчикиПоСсылкеНаУслугу.Объект
	|			И втПериодыДействияПУПоСсылкеНаУслугу.НомерСтрокиВФайле = втТаблицаСчетчикиПоСсылкеНаУслугу.НомерСтрокиВФайле
	|			И втПериодыДействияПУПоСсылкеНаУслугу.ПериодРегистратора = втТаблицаСчетчикиПоСсылкеНаУслугу.ПериодРегистратора
	|ГДЕ
	|	ЕСТЬNULL(втТаблицаСчетчикиПоСсылкеНаУслугу.ДействиеПУ, ЛОЖЬ) = ИСТИНА";
	
	// Пока решили, что реестры загружаются именно по лицевым счетам,
	// а по зданиям и подъездам они скорее всего не загружаются.
	// В связи с этим для оптимизации анализируем только счетчики,
	// закрепленные на лицевые счета и их помещения.
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеСоединенияПУ", "втСчетчикиПоСсылкеНаУслугу.ОбъектВТаблице.Адрес = КВП_ЗакрепленныеСчетчики.Объект"); 
	//|ИЛИ втСчетчикиПоСсылкеНаУслугу.ОбъектВТаблице.Адрес.Владелец = КВП_ЗакрепленныеСчетчики.Объект 
	//|ИЛИ втСчетчикиПоСсылкеНаУслугу.ОбъектВТаблице.Адрес.Подъезд = КВП_ЗакрепленныеСчетчики.Объект");
	Запрос.Выполнить();
	
	// Получаем строки реестра по остальным ПУ, причем анализируются только те ПУ, которые указаны в таблице.
	// По ним получаем данные о тарифности ПУ и прочие сведения, которые далее будут проверены.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	втТаблицаСоответствий.НомерСтроки КАК НомерСтроки,
	|	втТаблицаСоответствий.Объект КАК ОбъектВТаблице,
	|	втТаблицаСоответствий.Счетчик КАК Счетчик,
	|	втТаблицаСоответствий.ДатаПоказания КАК ДатаПоказания,
	|	втТаблицаСоответствий.ДневноеПоказание КАК ДневноеПоказание,
	|	втТаблицаСоответствий.НочноеПоказание КАК НочноеПоказание,
	|	втТаблицаСоответствий.ПиковоеПоказание КАК ПиковоеПоказание,
	|	втТаблицаСоответствий.ПорядковыйНомерПУВБазе КАК ПорядковыйНомерПУВБазе,
	|	втТаблицаСоответствий.ОпределятьПУПоСсылкеНаУслугу КАК ОпределятьПУПоСсылкеНаУслугу,
	|	втТаблицаСоответствий.ПризнакПУ КАК ПризнакПУ,
	|	втТаблицаСоответствий.ПорядковыйНомерПУВСоставеПараметров КАК ПорядковыйНомерПУВСоставеПараметров,
	|	втТаблицаСоответствий.Услуга КАК Услуга,
	|	втТаблицаСоответствий.НомерСтрокиВФайле КАК НомерСтрокиВФайле
	|ПОМЕСТИТЬ втОстальныеСчетчики
	|ИЗ
	|	втТаблицаСоответствий КАК втТаблицаСоответствий
	|ГДЕ
	|	НЕ втТаблицаСоответствий.ОпределятьПУПоСсылкеНаУслугу
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОстальныеСчетчики.НомерСтроки КАК НомерСтроки,
	|	втОстальныеСчетчики.ОбъектВТаблице КАК ОбъектВТаблице,
	|	втОстальныеСчетчики.ДатаПоказания КАК ДатаПоказания,
	|	втОстальныеСчетчики.ДневноеПоказание КАК ДневноеПоказание,
	|	втОстальныеСчетчики.НочноеПоказание КАК НочноеПоказание,
	|	втОстальныеСчетчики.ПиковоеПоказание КАК ПиковоеПоказание,
	|	втОстальныеСчетчики.ПорядковыйНомерПУВБазе КАК ПорядковыйНомерПУВБазе,
	|	ЕСТЬNULL(КВП_ЗакрепленныеСчетчики.ДатаИзменения, ДАТАВРЕМЯ(1, 1, 1)) КАК Период,
	|	ЕСТЬNULL(КВП_ЗакрепленныеСчетчики.Объект, НЕОПРЕДЕЛЕНО) КАК Объект,
	|	ЕСТЬNULL(КВП_ЗакрепленныеСчетчики.Счетчик, ЗНАЧЕНИЕ(Справочник.КВП_Счетчики.ПустаяСсылка)) КАК Счетчик,
	|	ЕСТЬNULL(КВП_ЗакрепленныеСчетчики.Действует, ЛОЖЬ) КАК ДействиеПУ,
	|	ЕСТЬNULL(КВП_ЗакрепленныеСчетчики.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК ПериодРегистратора,
	|	втОстальныеСчетчики.Услуга КАК Услуга,
	|	втОстальныеСчетчики.ОпределятьПУПоСсылкеНаУслугу КАК ОпределятьПУПоСсылкеНаУслугу,
	|	втОстальныеСчетчики.ПризнакПУ КАК ПризнакПУ,
	|	втОстальныеСчетчики.ПорядковыйНомерПУВСоставеПараметров КАК ПорядковыйНомерПУВСоставеПараметров,
	|	втОстальныеСчетчики.НомерСтрокиВФайле КАК НомерСтрокиВФайле
	|ПОМЕСТИТЬ втТаблицаСчетчикиОстальные
	|ИЗ
	|	втОстальныеСчетчики КАК втОстальныеСчетчики
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ЗакрепленныеСчетчики КАК КВП_ЗакрепленныеСчетчики
	|		ПО втОстальныеСчетчики.ДатаПоказания >= КВП_ЗакрепленныеСчетчики.ДатаИзменения
	|			И втОстальныеСчетчики.Счетчик = КВП_ЗакрепленныеСчетчики.Счетчик
	|			И втОстальныеСчетчики.ОбъектВТаблице = КВП_ЗакрепленныеСчетчики.Объект
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втТаблицаСчетчикиОстальные.НомерСтроки КАК НомерСтроки,
	|	втТаблицаСчетчикиОстальные.Объект КАК Объект,
	|	втТаблицаСчетчикиОстальные.Счетчик КАК Счетчик,
	|	МАКСИМУМ(втТаблицаСчетчикиОстальные.Период) КАК Период,
	|	втТаблицаСчетчикиОстальные.НомерСтрокиВФайле КАК НомерСтрокиВФайле
	|ПОМЕСТИТЬ втПериодыДействияПоОстальнымСчетчикамПоПоследнимДатамИзменения
	|ИЗ
	|	втТаблицаСчетчикиОстальные КАК втТаблицаСчетчикиОстальные
	|
	|СГРУППИРОВАТЬ ПО
	|	втТаблицаСчетчикиОстальные.НомерСтроки,
	|	втТаблицаСчетчикиОстальные.Объект,
	|	втТаблицаСчетчикиОстальные.Счетчик,
	|	втТаблицаСчетчикиОстальные.НомерСтрокиВФайле
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втПериодыДействияПоОстальнымСчетчикамПоПоследнимДатамИзменения.НомерСтроки КАК НомерСтроки,
	|	втПериодыДействияПоОстальнымСчетчикамПоПоследнимДатамИзменения.Объект КАК Объект,
	|	втПериодыДействияПоОстальнымСчетчикамПоПоследнимДатамИзменения.Счетчик КАК Счетчик,
	|	втПериодыДействияПоОстальнымСчетчикамПоПоследнимДатамИзменения.Период КАК Период,
	|	втПериодыДействияПоОстальнымСчетчикамПоПоследнимДатамИзменения.НомерСтрокиВФайле КАК НомерСтрокиВФайле,
	|	МАКСИМУМ(втТаблицаСчетчикиОстальные.ПериодРегистратора) КАК ПериодРегистратора
	|ПОМЕСТИТЬ втПериодыДействияПоОстальнымСчетчикам
	|ИЗ
	|	втПериодыДействияПоОстальнымСчетчикамПоПоследнимДатамИзменения КАК втПериодыДействияПоОстальнымСчетчикамПоПоследнимДатамИзменения
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаСчетчикиОстальные КАК втТаблицаСчетчикиОстальные
	|		ПО втПериодыДействияПоОстальнымСчетчикамПоПоследнимДатамИзменения.НомерСтроки = втТаблицаСчетчикиОстальные.НомерСтроки
	|			И втПериодыДействияПоОстальнымСчетчикамПоПоследнимДатамИзменения.Объект = втТаблицаСчетчикиОстальные.Объект
	|			И втПериодыДействияПоОстальнымСчетчикамПоПоследнимДатамИзменения.Счетчик = втТаблицаСчетчикиОстальные.Счетчик
	|			И втПериодыДействияПоОстальнымСчетчикамПоПоследнимДатамИзменения.НомерСтрокиВФайле = втТаблицаСчетчикиОстальные.НомерСтрокиВФайле
	|			И втПериодыДействияПоОстальнымСчетчикамПоПоследнимДатамИзменения.Период = втТаблицаСчетчикиОстальные.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	втПериодыДействияПоОстальнымСчетчикамПоПоследнимДатамИзменения.НомерСтроки,
	|	втПериодыДействияПоОстальнымСчетчикамПоПоследнимДатамИзменения.Объект,
	|	втПериодыДействияПоОстальнымСчетчикамПоПоследнимДатамИзменения.Счетчик,
	|	втПериодыДействияПоОстальнымСчетчикамПоПоследнимДатамИзменения.Период,
	|	втПериодыДействияПоОстальнымСчетчикамПоПоследнимДатамИзменения.НомерСтрокиВФайле
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПериодыДействияПоОстальнымСчетчикам.НомерСтроки КАК НомерСтроки,
	|	втПериодыДействияПоОстальнымСчетчикам.Объект КАК Объект,
	|	втПериодыДействияПоОстальнымСчетчикам.Счетчик КАК Счетчик,
	|	ЕСТЬNULL(втТаблицаСчетчикиОстальные.ОбъектВТаблице, """") КАК ОбъектВТаблице,
	|	ЕСТЬNULL(втТаблицаСчетчикиОстальные.ДатаПоказания, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПоказания,
	|	ЕСТЬNULL(втТаблицаСчетчикиОстальные.ПорядковыйНомерПУВБазе, 1) КАК ПорядковыйНомерПУВБазе,
	|	ЕСТЬNULL(втТаблицаСчетчикиОстальные.ДействиеПУ, ЛОЖЬ) КАК ДействиеПУ,
	|	ЕСТЬNULL(втТаблицаСчетчикиОстальные.Услуга, ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)) КАК Услуга,
	|	втПериодыДействияПоОстальнымСчетчикам.Счетчик.Тарифность КАК ТарифностьСчетчика,
	|	ВЫБОР
	|		КОГДА втПериодыДействияПоОстальнымСчетчикам.Счетчик.Тарифность = ЗНАЧЕНИЕ(Перечисление.КВП_ТарифностьСчетчиков.Однотарифный)
	|					И (НЕ ЕСТЬNULL(втТаблицаСчетчикиОстальные.НочноеПоказание, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
	|						ИЛИ НЕ ЕСТЬNULL(втТаблицаСчетчикиОстальные.ПиковоеПоказание, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО)
	|				ИЛИ втПериодыДействияПоОстальнымСчетчикам.Счетчик.Тарифность = ЗНАЧЕНИЕ(Перечисление.КВП_ТарифностьСчетчиков.Двухтарифный)
	|					И НЕ ЕСТЬNULL(втТаблицаСчетчикиОстальные.ПиковоеПоказание, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НесоответствиеТарифности,
	|	ЕСТЬNULL(втТаблицаСчетчикиОстальные.ОпределятьПУПоСсылкеНаУслугу, ЛОЖЬ) КАК ОпределятьПУПоСсылкеНаУслугу,
	|	ЕСТЬNULL(втТаблицаСчетчикиОстальные.ПризнакПУ, """") КАК ПризнакПУ,
	|	ЕСТЬNULL(втТаблицаСчетчикиОстальные.ПорядковыйНомерПУВСоставеПараметров, 0) КАК ПорядковыйНомерПУВСоставеПараметров,
	|	втПериодыДействияПоОстальнымСчетчикам.НомерСтрокиВФайле КАК НомерСтрокиВФайле
	|ПОМЕСТИТЬ ТаблицаПУОстальные
	|ИЗ
	|	втПериодыДействияПоОстальнымСчетчикам КАК втПериодыДействияПоОстальнымСчетчикам
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаСчетчикиОстальные КАК втТаблицаСчетчикиОстальные
	|		ПО втПериодыДействияПоОстальнымСчетчикам.НомерСтроки = втТаблицаСчетчикиОстальные.НомерСтроки
	|			И втПериодыДействияПоОстальнымСчетчикам.Объект = втТаблицаСчетчикиОстальные.Объект
	|			И втПериодыДействияПоОстальнымСчетчикам.Счетчик = втТаблицаСчетчикиОстальные.Счетчик
	|			И втПериодыДействияПоОстальнымСчетчикам.Период = втТаблицаСчетчикиОстальные.Период
	|			И втПериодыДействияПоОстальнымСчетчикам.НомерСтрокиВФайле = втТаблицаСчетчикиОстальные.НомерСтрокиВФайле
	|			И втПериодыДействияПоОстальнымСчетчикам.ПериодРегистратора = втТаблицаСчетчикиОстальные.ПериодРегистратора";
	
	Запрос.Выполнить();
	
	// Получаем сводные данные по всем строкам реестра, дополняем их сведениями о действии л/с с помощью псевдосреза.
	// На выходе имеем таблицу строк реестра с информацией по тому, корректны ли счетчики, действуют ли они,
	// соответствует ли тарифность введенным показаниям, действуют ли л/с, и т.д.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПУПоСсылкеНаУслугу.НомерСтроки,
	|	ТаблицаПУПоСсылкеНаУслугу.Объект,
	|	ТаблицаПУПоСсылкеНаУслугу.Счетчик,
	|	ТаблицаПУПоСсылкеНаУслугу.ТарифностьСчетчика,
	|	ТаблицаПУПоСсылкеНаУслугу.ОбъектВТаблице,
	|	ТаблицаПУПоСсылкеНаУслугу.ДатаПоказания,
	|	ТаблицаПУПоСсылкеНаУслугу.ПорядковыйНомерПУВБазе,
	|	ТаблицаПУПоСсылкеНаУслугу.ДействиеПУ,
	|	ТаблицаПУПоСсылкеНаУслугу.НесоответствиеТарифности,
	|	ТаблицаПУПоСсылкеНаУслугу.Услуга,
	|	ТаблицаПУПоСсылкеНаУслугу.ОпределятьПУПоСсылкеНаУслугу,
	|	ТаблицаПУПоСсылкеНаУслугу.ПризнакПУ,
	|	ТаблицаПУПоСсылкеНаУслугу.ПорядковыйНомерПУВСоставеПараметров,
	|	ТаблицаПУПоСсылкеНаУслугу.НомерСтрокиВФайле
	|ПОМЕСТИТЬ втТаблицаСчетчики
	|ИЗ
	|	ТаблицаПУПоСсылкеНаУслугу КАК ТаблицаПУПоСсылкеНаУслугу
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаПУОстальные.НомерСтроки,
	|	ТаблицаПУОстальные.Объект,
	|	ТаблицаПУОстальные.Счетчик,
	|	ТаблицаПУОстальные.ТарифностьСчетчика,
	|	ТаблицаПУОстальные.ОбъектВТаблице,
	|	ТаблицаПУОстальные.ДатаПоказания,
	|	ТаблицаПУОстальные.ПорядковыйНомерПУВБазе,
	|	ТаблицаПУОстальные.ДействиеПУ,
	|	ТаблицаПУОстальные.НесоответствиеТарифности,
	|	ТаблицаПУОстальные.Услуга,
	|	ТаблицаПУОстальные.ОпределятьПУПоСсылкеНаУслугу,
	|	ТаблицаПУОстальные.ПризнакПУ,
	|	ТаблицаПУОстальные.ПорядковыйНомерПУВСоставеПараметров,
	|	ТаблицаПУОстальные.НомерСтрокиВФайле
	|ИЗ
	|	ТаблицаПУОстальные КАК ТаблицаПУОстальные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втТаблицаСчетчики.НомерСтроки,
	|	втТаблицаСчетчики.Объект,
	|	втТаблицаСчетчики.Счетчик,
	|	втТаблицаСчетчики.ТарифностьСчетчика,
	|	втТаблицаСчетчики.ОбъектВТаблице,
	|	втТаблицаСчетчики.ДатаПоказания,
	|	втТаблицаСчетчики.ПорядковыйНомерПУВБазе,
	|	втТаблицаСчетчики.ДействиеПУ,
	|	втТаблицаСчетчики.НесоответствиеТарифности,
	|	втТаблицаСчетчики.Услуга,
	|	втТаблицаСчетчики.ОпределятьПУПоСсылкеНаУслугу,
	|	втТаблицаСчетчики.ПризнакПУ,
	|	втТаблицаСчетчики.ПорядковыйНомерПУВСоставеПараметров,
	|	втТаблицаСчетчики.НомерСтрокиВФайле
	|ПОМЕСТИТЬ втИтоговаяПУ
	|ИЗ
	|	втТаблицаСчетчики КАК втТаблицаСчетчики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговаяПУ.НомерСтроки,
	|	втИтоговаяПУ.Объект,
	|	втИтоговаяПУ.ОбъектВТаблице,
	|	втИтоговаяПУ.Счетчик,
	|	втИтоговаяПУ.ТарифностьСчетчика,
	|	втИтоговаяПУ.ДатаПоказания,
	|	втИтоговаяПУ.ПорядковыйНомерПУВБазе,
	|	втИтоговаяПУ.ДействиеПУ,
	|	втИтоговаяПУ.НесоответствиеТарифности,
	|	втИтоговаяПУ.ОпределятьПУПоСсылкеНаУслугу,
	|	втИтоговаяПУ.ПризнакПУ,
	|	втИтоговаяПУ.ПорядковыйНомерПУВСоставеПараметров,
	|	ЕСТЬNULL(КВП_ЛицевыеСчета.Период, ДАТАВРЕМЯ(1, 1, 1)) КАК Период,
	|	ЕСТЬNULL(КВП_ЛицевыеСчета.ЛицевойСчет, ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)) КАК ЛицевойСчет,
	|	ЕСТЬNULL(КВП_ЛицевыеСчета.Действует, ЛОЖЬ) КАК Действует,
	|	втИтоговаяПУ.НомерСтрокиВФайле
	|ПОМЕСТИТЬ втЛСРегистр
	|ИЗ
	|	втИтоговаяПУ КАК втИтоговаяПУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|		ПО втИтоговаяПУ.ДатаПоказания >= КВП_ЛицевыеСчета.Период
	|			И (втИтоговаяПУ.Объект = КВП_ЛицевыеСчета.Объект
	|				ИЛИ втИтоговаяПУ.Объект = КВП_ЛицевыеСчета.ЛицевойСчет)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втЛСРегистр.НомерСтроки,
	|	втЛСРегистр.Объект,
	|	втЛСРегистр.ЛицевойСчет,
	|	МАКСИМУМ(втЛСРегистр.Период) КАК Период,
	|	втЛСРегистр.НомерСтрокиВФайле
	|ПОМЕСТИТЬ втПериодыЛС
	|ИЗ
	|	втЛСРегистр КАК втЛСРегистр
	|
	|СГРУППИРОВАТЬ ПО
	|	втЛСРегистр.НомерСтроки,
	|	втЛСРегистр.Объект,
	|	втЛСРегистр.ЛицевойСчет,
	|	втЛСРегистр.НомерСтрокиВФайле
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втПериодыЛС.НомерСтроки,
	|	втПериодыЛС.Объект,
	|	ЕСТЬNULL(втЛСРегистр.ОбъектВТаблице, ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)) КАК ОбъектВТаблице,
	|	ЕСТЬNULL(втЛСРегистр.Счетчик, ЗНАЧЕНИЕ(Справочник.КВП_Счетчики.ПустаяСсылка)) КАК Счетчик,
	|	ЕСТЬNULL(втЛСРегистр.ТарифностьСчетчика, 0) КАК ТарифностьСчетчика,
	|	ЕСТЬNULL(втЛСРегистр.ДатаПоказания, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаПоказания,
	|	ЕСТЬNULL(втЛСРегистр.ПорядковыйНомерПУВБазе, 1) КАК ПорядковыйНомерПУВБазе,
	|	ЕСТЬNULL(втЛСРегистр.ДействиеПУ, ЛОЖЬ) КАК ДействиеПУ,
	|	ЕСТЬNULL(втЛСРегистр.Действует, ЛОЖЬ) КАК ДействиеЛС,
	|	ЕСТЬNULL(втЛСРегистр.НесоответствиеТарифности, ЛОЖЬ) КАК НесоответствиеТарифности,
	|	ЕСТЬNULL(втЛСРегистр.ЛицевойСчет, ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)) КАК ЛицевойСчет,
	|	ЕСТЬNULL(втЛСРегистр.ОпределятьПУПоСсылкеНаУслугу, ЛОЖЬ) КАК ОпределятьПУПоСсылкеНаУслугу,
	|	ЕСТЬNULL(втЛСРегистр.ПризнакПУ, """") КАК ПризнакПУ,
	|	ЕСТЬNULL(втЛСРегистр.ПорядковыйНомерПУВСоставеПараметров, 0) КАК ПорядковыйНомерПУВСоставеПараметров,
	|	втПериодыЛС.НомерСтрокиВФайле
	|ПОМЕСТИТЬ втИтоговаяЛС
	|ИЗ
	|	втПериодыЛС КАК втПериодыЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЛСРегистр КАК втЛСРегистр
	|		ПО втПериодыЛС.Период = втЛСРегистр.Период
	|			И втПериодыЛС.НомерСтроки = втЛСРегистр.НомерСтроки
	|			И втПериодыЛС.Объект = втЛСРегистр.Объект
	|			И втПериодыЛС.ЛицевойСчет = втЛСРегистр.ЛицевойСчет
	|			И втПериодыЛС.НомерСтрокиВФайле = втЛСРегистр.НомерСтрокиВФайле
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговаяЛС.НомерСтроки,
	|	втИтоговаяЛС.ОбъектВТаблице,
	|	втИтоговаяЛС.Объект,
	|	втИтоговаяЛС.Счетчик,
	|	втИтоговаяЛС.ТарифностьСчетчика,
	|	втИтоговаяЛС.ДатаПоказания,
	|	втИтоговаяЛС.ПорядковыйНомерПУВБазе,
	|	втИтоговаяЛС.ДействиеЛС,
	|	втИтоговаяЛС.ДействиеПУ,
	|	втИтоговаяЛС.НесоответствиеТарифности,
	|	ВЫБОР
	|		КОГДА НЕ втИтоговаяЛС.ДействиеЛС
	|				ИЛИ НЕ втИтоговаяЛС.ДействиеПУ
	|				ИЛИ втИтоговаяЛС.НесоответствиеТарифности
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Использовать,
	|	втИтоговаяЛС.ЛицевойСчет,
	|	втИтоговаяЛС.ОпределятьПУПоСсылкеНаУслугу,
	|	втИтоговаяЛС.ПризнакПУ,
	|	втИтоговаяЛС.ПорядковыйНомерПУВСоставеПараметров,
	|	втИтоговаяЛС.НомерСтрокиВФайле
	|ИЗ
	|	втИтоговаяЛС КАК втИтоговаяЛС";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	ТаблицаСтрокСОшибками = Новый ТаблицаЗначений;
	ТаблицаСтрокСОшибками.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаСтрокСОшибками.Колонки.Добавить("ТекстОшибки", Новый ОписаниеТипов("Строка"));
	
	// Если счетчик определяется по услуге, то тогда нужно отобрать счетчики,
	// соответствующие порядковым номерам счетчиков, закрепленных на объект.
	// Например, если на л/с установлено 2 ПУ, а в строке таблица из настроек установлено, что это именно второй ПУ,
	// то для данной строки реестра принудительно устанавливается второй ПУ в порядке сортировки имен ПУ из списка ПУ,
	// действующих на л/с. При этом здесь проверяются все счетчики, вновь полученные из БД, и при необходимости происходит подмена ПУ,
	// что не очевидно для пользователей.
	ИсключитьСтрокиПоПорядковомуНомеру(Результат, "Счетчик");
	
	// Проверка заполнения поля "Объект" в строках реестра.
	ОбработатьСтрокиСНеопределеннымОбъектамИСчетчикам(Результат, РеестрДерево, ТаблицаСтрокСОшибками);
	
	// Выполняется проверка основных параметров ПУ, добавление информации об ошибках в соответствующую таблицу.
	ОбработатьОстальныеСтрокиСОпределеннымОбъектамИСчетчикам(Результат, РеестрДерево, ТаблицаСтрокСОшибками);
	
	ЗначениеВДанныеФормы(РеестрДерево, ДеревоПоказаний);
	
	// Вывод информации о найденных ошибках.
	ВывестиТекстыОшибокПоСтрокамТаблицы(ТаблицаСтрокСОшибками);
	
	ТаблицаСтрокСОшибками.Свернуть("НомерСтроки");
	
	Возврат ТаблицаСтрокСОшибками.ВыгрузитьКолонку("НомерСтроки");
	
КонецФункции // ВыполнитьПроверкуКорректностиЗаполненияДереваРеестра()

&НаСервере
// В случае, если ПУ определяется по услуге (в соответствии с настройкой загрузки),
// процедура производит подмену счетчика в строке реестра на тот,
// который соответствует порядковому номеру ПУ из настроек загрузки.
//
Процедура ИсключитьСтрокиПоПорядковомуНомеру(Результат, ИмяПоляПУДляСортировки)
	
	// В строки таблицы реестра сразу при чтении реестра добавляются значения настроек,
	// в т.ч. номер ПУ и порядковый номер ПУ из настроек загрузки.
	// Т.е. попросту часть настроек мигрирует через табличную часть реестра,
	// чтобы их можно было использовать при формировании документов ввода показаний.
	
	Если Объект.ПолеИдентификацииЛС = "" Тогда
		врТаблицаДанныхРеестра = Результат.Скопировать(, "НомерСтрокиВФайле, ПорядковыйНомерПУВСоставеПараметров, ПорядковыйНомерПУВБазе, ПризнакПУ");
		Отбор                  = Новый Структура("НомерСтрокиВФайле, ПорядковыйНомерПУВСоставеПараметров, ПорядковыйНомерПУВБазе");
	Иначе
		врТаблицаДанныхРеестра = Результат.Скопировать(, "НомерСтрокиВФайле, ПорядковыйНомерПУВСоставеПараметров, Объект, ПорядковыйНомерПУВБазе, ПризнакПУ");
		Отбор                  = Новый Структура("НомерСтрокиВФайле, ПорядковыйНомерПУВСоставеПараметров, Объект, ПорядковыйНомерПУВБазе");
	КонецЕсли;
	
	// Удаляем строки, в которых счетчик не определяется по порядковому номеру.
	// Т.е. не нужно проверять строки, которые определяются не по ссылке на услугу.
	ПараметрыДляУдаления = Новый Массив;
	ПараметрыДляУдаления.Добавить("НаименованиеУслугиСчетчика");
	ПараметрыДляУдаления.Добавить("КодУслугиСчетчика");
	ПараметрыДляУдаления.Добавить("ПоСсылкеНаУслугу");
	
	МассивСтрокДляУдаления = Новый Массив;
	Для Каждого ТекСтрока Из врТаблицаДанныхРеестра Цикл
		Если ПараметрыДляУдаления.Найти(ТекСтрока.ПризнакПУ) = Неопределено Тогда
			МассивСтрокДляУдаления.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекСтрокаУдаление Из МассивСтрокДляУдаления Цикл
		врТаблицаДанныхРеестра.Удалить(ТекСтрокаУдаление);
	КонецЦикла;
	
	// Если в реестре нет данных по л/с, то проверка выполняется без разреза по л/с.
	Если Объект.ПолеИдентификацииЛС = "" Тогда
		врТаблицаДанныхРеестра.Свернуть("НомерСтрокиВФайле, ПорядковыйНомерПУВСоставеПараметров, ПорядковыйНомерПУВБазе");
	Иначе
		врТаблицаДанныхРеестра.Свернуть("НомерСтрокиВФайле, ПорядковыйНомерПУВСоставеПараметров, Объект, ПорядковыйНомерПУВБазе");
	КонецЕсли;
	
	// Сортируем строки в порядке проверки данных: номер строки реестра, настройка порядка, сам порядковый номер ПУ.
	врТаблицаДанныхРеестра.Сортировать("НомерСтрокиВФайле, ПорядковыйНомерПУВСоставеПараметров, ПорядковыйНомерПУВБазе");
	Результат.Сортировать("НомерСтрокиВФайле, " + ИмяПоляПУДляСортировки + " , ПорядковыйНомерПУВСоставеПараметров, ПорядковыйНомерПУВБазе");
	
	// Удаляем строки, не соответствующие порядковому номеру, заданному в настройке загрузки.
	МассивСтрокДляУдаления = Новый Массив;
	
	Для Каждого ТекущаяСтрока Из врТаблицаДанныхРеестра Цикл
		
		Если НЕ Объект.ПолеИдентификацииЛС = "" И ТекущаяСтрока.Объект = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПорядковыйНомерПУВБазе = ТекущаяСтрока.ПорядковыйНомерПУВБазе;
		ИндексПорядка          = ПорядковыйНомерПУВБазе - 1;
		
		ЗаполнитьЗначенияСвойств(Отбор, ТекущаяСтрока);
		
		мСтроки = Результат.НайтиСтроки(Отбор);
		
		КоличествоСтрок = мСтроки.Количество();
		
		// Если счетчик только один, то не обрабатываем его.
		Если КоличествоСтрок < 2 Тогда
			Продолжить;
		КонецЕсли;
		
		МаксИндексМассива = мСтроки.ВГраница();
		
		Для Сч = 0 ПО МаксИндексМассива Цикл
			Если НЕ Сч = ИндексПорядка И МассивСтрокДляУдаления.Найти(мСтроки[Сч]) = Неопределено Тогда
				МассивСтрокДляУдаления.Добавить(мСтроки[Сч]);
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого СтрокаУдаления Из МассивСтрокДляУдаления Цикл
		Результат.Удалить(СтрокаУдаления);
	КонецЦикла;
	
КонецПроцедуры // ИсключитьСтрокиПоПорядковомуНомеру()

&НаСервере
// Процедура выводит сообщение об ошибках в строках таблицы.
Процедура ВывестиТекстыОшибокПоСтрокамТаблицы(ТаблицаСтрокСОшибками)
	
	ТаблицаСтрокСОшибками.Сортировать("НомерСтроки Возр");
	врТаблица = ТаблицаСтрокСОшибками.Скопировать(,"НомерСтроки");
	врТаблица.Свернуть("НомерСтроки");
	
	Для Каждого ТекСтрокаНомера Из врТаблица Цикл
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Строка таблицы №" + ТекСтрокаНомера.НомерСтроки + ":");
		
		ОшибкиПоСтроке = ТаблицаСтрокСОшибками.НайтиСтроки(Новый Структура("НомерСтроки", ТекСтрокаНомера.НомерСтроки));
		
		Для Каждого ТекСтрокаОшибки Из ОшибкиПоСтроке Цикл
			Если НЕ ПустаяСтрока(ТекСтрокаОшибки.ТекстОшибки) Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(Символы.Таб + ТекСтрокаОшибки.ТекстОшибки);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // ВывестиТекстыОшибокПоСтрокамТаблицы()

&НаСервере
// Процедура корректирует значение использования в строках таблицы с неопределенными объектами и счетчиками.
Процедура ОбработатьСтрокиСНеопределеннымОбъектамИСчетчикам(Результат, РеестрДерево, ТаблицаСтрокСОшибками)
	
	ОтборСтрок = Новый Структура("Объект", Неопределено);
	НайденныеСтроки = Результат.НайтиСтроки(ОтборСтрок);
	
	Для Каждого ТекСтрока Из НайденныеСтроки Цикл
		
		ДатаПоказанияСтрокой = Формат(ТекСтрока.ДатаПоказания, "ДФ=dd.MM.yyyy");
		
		НоваяСтрока = ТаблицаСтрокСОшибками.Добавить();
		НоваяСтрока.НомерСтроки = ТекСтрока.НомерСтроки;
		Если ТекСтрока.Счетчик.Пустая() Тогда
			НоваяСтрока.ТекстОшибки = "не определены счетчик и объект его установки на дату ввода показания " + ДатаПоказанияСтрокой + ".";
		Иначе
			НоваяСтрока.ТекстОшибки = "не определен объект установки счетчика на дату ввода показания " + ДатаПоказанияСтрокой + ".";
		КонецЕсли;
		
		СтрокаДерева = РеестрДерево.Строки.Найти(ТекСтрока.НомерСтроки, "Номер");
		
		СтрокаДерева.Использовать = Ложь;
		
	КонецЦикла;
	
	Для Каждого ТекСтрока Из ТаблицаСтрокСОшибками Цикл
		НайденнаяСтрока = Результат.Найти(ТекСтрока.НомерСтроки, "НомерСтроки");
		Если НЕ НайденнаяСтрока = Неопределено Тогда
			Результат.Удалить(НайденнаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОбработатьСтрокиСНеопределеннымОбъектамИСчетчикам()

&НаСервере
// Процедура корректирует значение использования в строках таблицы с определенными объектами и счетчиками.
Процедура ОбработатьОстальныеСтрокиСОпределеннымОбъектамИСчетчикам(Результат, ДеревоПоказаний, ТаблицаСтрокСОшибками)
	
	// Находим дубли строк.
	втТаблицаСчетчики = Результат.Скопировать(, "НомерСтроки, Объект, Счетчик, ДатаПоказания, ЛицевойСчет, ТарифностьСчетчика");
	втТаблицаСчетчики.Свернуть("Объект, Счетчик, ДатаПоказания, ЛицевойСчет, ТарифностьСчетчика");
	
	Для Каждого ТекСтрокаПУ ИЗ втТаблицаСчетчики Цикл
		НайденныеСтроки = ДеревоПоказаний.Строки.НайтиСтроки(Новый Структура("Объект, Счетчик, ДатаПоказания, Использовать", ТекСтрокаПУ.Объект, ТекСтрокаПУ.Счетчик, ТекСтрокаПУ.ДатаПоказания, Истина));
		Если НайденныеСтроки.Количество() > 1 Тогда
			МассивСтрокСПоказаниями = Новый Массив;
			Для Каждого ТекущаяСтрока Из НайденныеСтроки Цикл
				Если ТекСтрокаПУ.ТарифностьСчетчика = Перечисления.КВП_ТарифностьСчетчиков.Однотарифный Тогда
					Если ТекущаяСтрока.ДневноеПоказание <> 0 Тогда
						МассивСтрокСПоказаниями.Добавить(ТекущаяСтрока);
					Иначе
						ТекущаяСтрока.Использовать = Ложь;
					КонецЕсли;
				ИначеЕсли ТекСтрокаПУ.ТарифностьСчетчика = Перечисления.КВП_ТарифностьСчетчиков.Двухтарифный Тогда
					Если (ТекущаяСтрока.ДневноеПоказание <> 0 ИЛИ ТекущаяСтрока.НочноеПоказание <> 0) Тогда
						МассивСтрокСПоказаниями.Добавить(ТекущаяСтрока);
					Иначе
						ТекущаяСтрока.Использовать = Ложь;
					КонецЕсли;
				ИначеЕсли ТекСтрокаПУ.ТарифностьСчетчика = Перечисления.КВП_ТарифностьСчетчиков.Трехтарифный Тогда
					Если (ТекущаяСтрока.ДневноеПоказание <> 0 ИЛИ ТекущаяСтрока.НочноеПоказание <> 0 ИЛИ ТекущаяСтрока.ПиковоеПоказание <> 0) Тогда
						МассивСтрокСПоказаниями.Добавить(ТекущаяСтрока);
					Иначе
						ТекущаяСтрока.Использовать = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТекСтрокаДубль Из МассивСтрокСПоказаниями Цикл
				Если НЕ ТекСтрокаДубль.Номер = МассивСтрокСПоказаниями[0].Номер Тогда
					ТекСтрокаДубль.Использовать = Ложь;
					НоваяСтрока = ТаблицаСтрокСОшибками.Добавить();
					НоваяСтрока.НомерСтроки = ТекСтрокаДубль.Номер;
					НоваяСтрока.ТекстОшибки = "показания счетчика """ + ТекСтрокаДубль.Счетчик + """ уже имеются в строке " + МассивСтрокСПоказаниями[0].Номер + ".";
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	втРезультат = Результат.Скопировать(,"НомерСтроки");
	втРезультат.Свернуть("НомерСтроки");
	
	Для Каждого СтрокаРезультата из втРезультат Цикл
		
		ОтборСтрок = Новый Структура("НомерСтроки", СтрокаРезультата.НомерСтроки);
		СтрокиОбъекта = Результат.НайтиСтроки(ОтборСтрок);
		
		КоличествоСтрок = СтрокиОбъекта.Количество();
		
		втТаблица = Результат.Скопировать(СтрокиОбъекта);
		
		втТаблицаНомераСтрок = втТаблица.Скопировать(, "НомерСтроки");
		втТаблицаНомераСтрок.Свернуть("НомерСтроки");
		
		Если КоличествоСтрок > 1 И втТаблица[0].ОпределятьПУПоСсылкеНаУслугу И КоличествоСтрок >= втТаблица[0].ПорядковыйНомерПУВБазе Тогда
			ПорядковыйНомерПУВБазе = втТаблица[0].ПорядковыйНомерПУВБазе;
			Для Сч = 1 По КоличествоСтрок Цикл
				Если НЕ Сч = ПорядковыйНомерПУВБазе Тогда
					втТаблица.Удалить(Сч - 1);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		КоличествоСтрок = втТаблица.Количество();
		
		Для Каждого ТекСтрока Из втТаблица Цикл
			
			СтрокаДерева = ДеревоПоказаний.Строки.Найти(ТекСтрока.НомерСтроки, "Номер");
			
			СтрокаДерева.Объект  = ТекСтрока.Объект;
			СтрокаДерева.Счетчик = ТекСтрока.Счетчик;
			
			Если КоличествоСтрок > 1 Тогда
				Если втТаблицаНомераСтрок.Количество() = 1 Тогда
					СтрокаДерева.Объект        = Неопределено;
					
					Если СтрокаДерева.Строки.Найти(ТекСтрока.Объект, "Объект") = Неопределено Тогда
						НоваяСтрока = СтрокаДерева.Строки.Добавить();
						НоваяСтрока.Объект      = ТекСтрока.Объект;
					КонецЕсли;
				Иначе
					СтрокаДерева.Объект = ТекСтрока.Объект;
				КонецЕсли;
				
			КонецЕсли;
			
			СтрокиТаблицы = Объект.ТаблицаРеестра.НайтиСтроки(Новый Структура("НомерСтрокиДерева", ТекСтрока.НомерСтроки));
			СтрокаТаблицы = СтрокиТаблицы[0];
			
			СтрокаТаблицы.Объект  = ТекСтрока.Объект;
			СтрокаТаблицы.Счетчик = ТекСтрока.Счетчик;
			
			Если втТаблица.Индекс(ТекСтрока) = 0 Тогда
				
				ДатаПоказания = Формат(ТекСтрока.ДатаПоказания, "ДФ=dd.MM.yyyy");
				
				Если НЕ ТекСтрока.ДействиеЛС И ТипЗнч(ТекСтрока.Объект) = Тип("СправочникСсылка.КВП_ЛицевыеСчета")  Тогда
					НоваяСтрока = ТаблицаСтрокСОшибками.Добавить();
					НоваяСтрока.НомерСтроки = ТекСтрока.НомерСтроки;
					НоваяСтрока.ТекстОшибки = "лицевой счет """ + ТекСтрока.Объект + """ закрыт на дату ввода показания " + ДатаПоказания + ".";
				КонецЕсли;
				
				Если НЕ ТекСтрока.ДействиеПУ Тогда
					НоваяСтрока = ТаблицаСтрокСОшибками.Добавить();
					НоваяСтрока.НомерСтроки = ТекСтрока.НомерСтроки;
					НоваяСтрока.ТекстОшибки = "счетчик """ + ТекСтрока.Счетчик + """ не действует на дату ввода показания " + ДатаПоказания + ".";
				КонецЕсли;
				
				Если ТекСтрока.НесоответствиеТарифности Тогда
					НоваяСтрока = ТаблицаСтрокСОшибками.Добавить();
					НоваяСтрока.НомерСтроки = ТекСтрока.НомерСтроки;
					НоваяСтрока.ТекстОшибки = "показания счетчика """ + ТекСтрока.Счетчик + """ не соответствуют тарифности.";
				КонецЕсли;
				
				Если НЕ ТекСтрока.Использовать Тогда
					ДеревоПоказаний.Строки.Найти(ТекСтрока.НомерСтроки, "Номер").Использовать = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ОбработатьОстальныеСтрокиСОпределеннымОбъектамИСчетчикам()

&НаСервере
// Возвращает значение поля реестра.
Функция ПолучитьЗначениеПоля(СтруктураПараметров, Знач НомерСтроки, Знач ИсточникДанных, РазделительКолонок = Неопределено, Знач ТекПоле)
	
	// Ищем значение параметра в строке файла по указанному номеру колонки.
	ИмяПараметра = Строка(ТекПоле.Параметр);
	ТипКолонки   = ОпределитьИмяКолонки(ИмяПараметра);
	
	Если Найти("CSV,TXT", ФорматФайла) Тогда
		// Ищем позицию разделителя по номеру колонки для файлов формата TXT или CSV.
		врСтрокаФайла = ИсточникДанных;
		Если ЭтоПараметрПУ(ТекПоле.Параметр)
			И ТекПоле.СпособОпределенияПУ = СтруктураЗначенийПолей.СпСпособыОпределенияПУ[1].Значение // "по услуге"
			И ТекПоле.СпособОпределенияУслуги = СтруктураЗначенийПолей.СпСпособыОпределенияУслуги[1].Значение Тогда // "по ссылке на услугу"
			ПозицияРазделителя = -1;
		Иначе
			ПозицияРазделителя = ПолучитьПозициюРазделителяВСтроке(РазделительКолонок, врСтрокаФайла, ТекПоле.НомерКолонки);
		КонецЕсли;
	ИначеЕсли Найти("XLS,DBF", ФорматФайла) Тогда
		// Для файлов формата XLS, DBF позиция разделителя нас не интересует, т.к. мы можем обратиться непосредственно к номеру колонки.
		ПозицияРазделителя = -1;
	КонецЕсли;
	
	Если ПозицияРазделителя = 0 Тогда
		
		// Если параметр не найден в файле загрузки - пропускаем его.
		ЗначениеПоляРеестра = Null;
		
	Иначе
		
		// Если параметр найден в файле загрузки прочитаем значение параметра из файла.
		Если ПозицияРазделителя > 0 Тогда
			ЗначениеПоляФайла = СокрЛП(Сред(врСтрокаФайла, 1, ПозицияРазделителя - 1));
		Иначе
			Если ЭтоПараметрПУ(ТекПоле.Параметр)
				И ТекПоле.СпособОпределенияПУ = СтруктураЗначенийПолей.СпСпособыОпределенияПУ[1].Значение // "по услуге"
				И ТекПоле.СпособОпределенияУслуги = СтруктураЗначенийПолей.СпСпособыОпределенияУслуги[1].Значение Тогда // "по ссылке на услугу"
				ЗначениеПоляФайла = "";
			ИначеЕсли ФорматФайла = СтруктураЗначенийПолей.СпФорматовФайла[4].Значение Тогда // "DBF"
				ЗначениеПоляФайла = ИсточникДанных.ПолучитьЗначениеПоля(ТекПоле.НомерКолонки - 1);
			ИначеЕсли ФорматФайла = СтруктураЗначенийПолей.СпФорматовФайла[1].Значение Тогда // "XLS"
				ЗначениеПоляФайла = СокрЛП(ИсточникДанных[НомерСтроки - 1][ТекПоле.НомерКолонки - 1]);
			КонецЕсли;
		КонецЕсли;
		
		ЗначениеПоляФайла = СокрЛП(Строка(ЗначениеПоляФайла));
		ЗначениеПоляРеестра = ПолучитьЗначениеПоляРеестра(НомерСтроки, ТипКолонки, ЗначениеПоляФайла, ТекПоле);
		
	КонецЕсли;
	
	Возврат ЗначениеПоляРеестра;
	
КонецФункции // ПолучитьЗначениеПоля()

&НаСервере
// Определяет тип параметра "Лицевой счет".
Функция ЭтоПараметрЛС(Параметр)
	
	Возврат (Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.ЛицевойСчет"));
	
КонецФункции // ЭтоПараметрЛС()

&НаСервере
// Определяет тип параметра "Дата".
Функция ЭтоПараметрДата(Параметр)
	
	Возврат (Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.Дата"));
	
КонецФункции // ЭтоПараметрДата()

&НаСервере
// Определяет тип параметра "Номер счетчика".
Функция ЭтоПараметрПУ(Параметр)
	
	Возврат (Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.НомерСчетчика"));
	
КонецФункции // ЭтоПараметрПУ()

&НаСервере
Функция ЭтоПараметрПоказаний(Параметр)
	
	Возврат (Параметр = Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеДневное
	ИЛИ Параметр = Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеНочное
	ИЛИ Параметр = Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеПиковое);
	
КонецФункции

&НаСервере
// Загружает данные текущей строки файла для форматов .TXT, CSV и XLS.
Процедура ЗагрузитьДанныеСтрокиИзФайла(НастройкиПолей, СтруктураПараметров, НомерСтроки, ИсточникДанных, РазделительКолонок = Неопределено)
	
	СтрокаЛС = НастройкиПолей.Найти(Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.ЛицевойСчет, "Параметр");
	Если Не СтрокаЛС = Неопределено Тогда
		ЗначениеПоляРеестра = ПолучитьЗначениеПоля(СтруктураПараметров, НомерСтроки, ИсточникДанных, РазделительКолонок, СтрокаЛС);
		ТипКолонки          = ОпределитьИмяКолонки(Строка(СтрокаЛС.Параметр));
		ЗаполнитьСтруктуруПараметров(НастройкиПолей, СтруктураПараметров, ЗначениеПоляРеестра, СтрокаЛС, ТипКолонки, ИсточникДанных, НомерСтроки, РазделительКолонок);
		
		Если СтруктураПараметров.Ошибка Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Ошибка загрузки строки №" + НомерСтроки + " файла реестра: лицевой счет не определен. Строка не загружена.");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Параметры счетчиков.
	Отбор = Новый Структура("Параметр", Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.НомерСчетчика);
	НайденныеСтроки = НастройкиПолей.НайтиСтроки(Отбор);
	Для Каждого ТекПоле Из НайденныеСтроки Цикл
		Если СтруктураПараметров.Ошибка Тогда
			Продолжить;
		КонецЕсли;
		ЗначениеПоляРеестра = ПолучитьЗначениеПоля(СтруктураПараметров, НомерСтроки, ИсточникДанных, РазделительКолонок, ТекПоле);
		ТипКолонки          = ОпределитьИмяКолонки(Строка(ТекПоле.Параметр));
		ЗаполнитьСтруктуруПараметров(НастройкиПолей, СтруктураПараметров, ЗначениеПоляРеестра, ТекПоле, ТипКолонки, ИсточникДанных, НомерСтроки, РазделительКолонок);
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьДанныеСтрокиИзФайла()

&НаСервере
// Заполняет структуру показаний реестра.
Процедура ЗаполнитьСтруктуруПараметров(НастройкиПолей, СтруктураПараметров, ЗначениеПоляРеестра, ТекПоле, ТипКолонки, ИсточникДанных, НомерСтроки, РазделительКолонок)
	
	Если ЗначениеПоляРеестра = Null Тогда
		// Значение поля реестра не определено - не обрабатываем.
		Возврат;
	Иначе
		
		// Параметр "Лицевой счет".
		Если ЭтоПараметрЛС(ТекПоле.Параметр) Тогда
			
			СтруктураПараметров.Вставить(ТипКолонки, ЗначениеПоляРеестра);
			
			// Параметр "Номер счетчика".
		ИначеЕсли ЭтоПараметрПУ(ТекПоле.Параметр) Тогда
			
			ИндексПУ = ТекПоле.ПорядковыйНомерПУВСоставеПараметров;
			Если ТипЗнч(ЗначениеПоляРеестра) = Тип("Структура") Тогда
				
				Если ЗначениеПоляРеестра.Количество() > 0 Тогда
					Если НЕ СтруктураПараметров.Свойство("МассивПУ") Тогда
						СтруктураПараметров.Вставить("МассивПУ", Новый Массив);
					КонецЕсли;
					
					СтруктураПараметров.МассивПУ.Добавить(ЗначениеПоляРеестра);
					
					ПолучитьЗначенияПоказанийПУ(НастройкиПолей, ИндексПУ, ИсточникДанных, РазделительКолонок, НомерСтроки, СтруктураПараметров);
				КонецЕсли;
				
			Иначе
				СтруктураПараметров.Ошибка = Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтруктуруПараметров()

&НаСервере
// Получает значения всех показаний для текущего счетчика и записывает их в структуру параметров.
Процедура ПолучитьЗначенияПоказанийПУ(НастройкиПолей, ПорядковыйНомерПУВСоставеПараметров, ИсточникДанных, РазделительКолонок, НомерСтроки, СтруктураПараметров)
	
	СпФорматовФайла = СтруктураЗначенийПолей.СпФорматовФайла;
	
	СтруктураОтбора = Новый Структура("ПорядковыйНомерПУВСоставеПараметров", ПорядковыйНомерПУВСоставеПараметров);
	НайденныеСтроки = НастройкиПолей.НайтиСтроки(СтруктураОтбора);
	
	// Добавляем все показания, связанные с добавленным счетчиком.
	Если НайденныеСтроки.Количество() > 0 Тогда
		Для Каждого СтрокаПараметра Из НайденныеСтроки Цикл
			
			Параметр = СтрокаПараметра.Параметр;
			
			Если ЭтоПараметрПоказаний(Параметр)
				ИЛИ ЭтоПараметрДата(Параметр) Тогда
				
				ИмяПараметра = Строка(Параметр);
				ТипКолонки = ОпределитьИмяКолонки(ИмяПараметра);
				
				Если ФорматФайла = СпФорматовФайла[0].Значение // "TXT"
				 ИЛИ ФорматФайла = СпФорматовФайла[2].Значение Тогда // "CSV"
					врСтрокаФайла = ИсточникДанных;
					ПозицияРазделителя = ПолучитьПозициюРазделителяВСтроке(РазделительКолонок, врСтрокаФайла, СтрокаПараметра.НомерКолонки);
					ЗначениеПоляФайла = Сред(врСтрокаФайла, 1, ПозицияРазделителя - 1);
				ИначеЕсли ФорматФайла = СпФорматовФайла[1].Значение Тогда // "XLS"
					Если СтрокаПараметра.НомерКолонки > ИсточникДанных.Колонки.Количество() Тогда
						ЗначениеПоляФайла = "";
					Иначе
						ЗначениеПоляФайла = ИсточникДанных[НомерСтроки - 1][СтрокаПараметра.НомерКолонки - 1];
					КонецЕсли;
				ИначеЕсли ФорматФайла = СпФорматовФайла[4].Значение Тогда // "DBF"
					ЗначениеПоляФайла = ИсточникДанных.ПолучитьЗначениеПоля(СтрокаПараметра.НомерКолонки - 1);
				КонецЕсли;
				ЗначениеПоляФайла   = СокрЛП(ЗначениеПоляФайла);
				ЗначениеПоляРеестра = ПолучитьЗначениеПоляРеестра(НомерСтроки, ТипКолонки, ЗначениеПоляФайла, СтрокаПараметра);
				
				Если ЗначениеПоляРеестра = Null Тогда
					// Значение поля реестра не определено - выводим сообщение об ошибке.
					СтруктураПараметров.Вставить("Ошибка", Истина);
				Иначе
					
					Для Каждого ТекПУ Из СтруктураПараметров.МассивПУ Цикл
						Если ТекПУ.ПорядковыйНомерПУВСоставеПараметров = ПорядковыйНомерПУВСоставеПараметров Тогда
							Если ЭтоПараметрПоказаний(Параметр) Тогда
								
								// Добавляем данные о показании
								ТекПУ.Вставить(ТипКолонки, ЗначениеПоляРеестра);
								
								Если ПустаяСтрока(ЗначениеПоляФайла) Тогда
									Если ТипКолонки = "Показаниедневное" Тогда
										ТекПУ.Вставить("ЭтоПустоеДневноеПоказание", Истина);
									ИначеЕсли ТипКолонки = "Показаниеночное" Тогда
										ТекПУ.Вставить("ЭтоПустоеНочноеПоказание", Истина);
									ИначеЕсли ТипКолонки = "Показаниепиковое" Тогда
										ТекПУ.Вставить("ЭтоПустоеПиковоеПоказание", Истина);
									КонецЕсли;
								КонецЕсли;
								
							ИначеЕсли ЭтоПараметрДата(Параметр) Тогда
								
								ТекПУ.Вставить(ТипКолонки, ЗначениеПоляРеестра);
								
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьЗначенияПоказанийПУ()

&НаСервереБезКонтекста
// Ищет позицию разделителя в строке файла, следующую сразу за искомой колонкой.
// Параметры:
//  РазделительКолонок - разделитель колонок в файле загрузки.
//  СтрокаФайла        - текущая строка файла загрузки.
//  НомерКолонки       - номер колонки параметра таблицы значений "НастройкаПолей" в файле загрузки.
//
// Возвращаемое значение:
//  Позиция разделителя.
//
Функция ПолучитьПозициюРазделителяВСтроке(РазделительКолонок, врСтрокаФайла, НомерКолонки)
	
	// Ищем значение параметра в строке файла по указанному номеру колонки.
	ИндексРазделителя = 1;
	Пока Истина Цикл
		
		ПозицияРазделителя = Найти(врСтрокаФайла, РазделительКолонок);
		Если ПозицияРазделителя = 0 Тогда
			// Если ПозицияРазделителя = 0 и переменная врСтрокаФайла пустая, значит искомый параметр не найден в строке файла.
			Если СтрДлина(врСтрокаФайла) > 0 И (ИндексРазделителя) = НомерКолонки Тогда
				ПозицияРазделителя = СтрДлина(врСтрокаФайла) + 1;
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
		
		Если ИндексРазделителя = НомерКолонки Тогда
			// Если индекс разделителя равен номеру колонки текущего параметра,
			// значит мы нашли значение текущего параметра в строке файла (выходим из бесконечного цикла).
			Прервать;
		КонецЕсли;
		
		ИндексРазделителя = ИндексРазделителя + 1;
		врСтрокаФайла = Прав(врСтрокаФайла, СтрДлина(врСтрокаФайла) - ПозицияРазделителя);
	КонецЦикла;
	
	Возврат ПозицияРазделителя;
	
КонецФункции

&НаСервере
// Формирует таблицу для заполнения данными из файла реестра.
Процедура СформироватьТаблицуДанных()
	
	// Типы данных
	МассивТиповОбъекта = Новый Массив;
	МассивТиповОбъекта.Добавить(Тип("СправочникСсылка.КВП_Подъезды"));
	МассивТиповОбъекта.Добавить(Тип("СправочникСсылка.КВП_ЛицевыеСчета"));
	МассивТиповОбъекта.Добавить(Тип("СправочникСсылка.КВП_Здания"));
	МассивТиповОбъекта.Добавить(Тип("СправочникСсылка.УПЖКХ_Помещения"));
	МассивТиповОбъекта.Добавить(Тип("Строка"));
	МассивТиповОбъекта.Добавить(Тип("Число"));
	
	МассивТиповПУ = Новый Массив;
	МассивТиповПУ.Добавить(Тип("Строка"));
	МассивТиповПУ.Добавить(Тип("Число"));
	
	МассивТиповПризнакПУ = Новый Массив;
	МассивТиповПризнакПУ.Добавить(Тип("Строка"));
	МассивТиповПризнакПУ.Добавить(Тип("Число"));
	
	ТаблицаДанныхФайла = Новый ТаблицаЗначений;
	ТаблицаДанныхФайла.Колонки.Добавить("НомерСтроки",                         Новый ОписаниеТипов("Число"));
	ТаблицаДанныхФайла.Колонки.Добавить("Объект",                              Новый ОписаниеТипов(МассивТиповОбъекта, , Новый КвалификаторыСтроки(100), Новый КвалификаторыЧисла(15)));
	ТаблицаДанныхФайла.Колонки.Добавить("Услуга",                              Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
	ТаблицаДанныхФайла.Колонки.Добавить("ДатаПоказания",                       Новый ОписаниеТипов("Дата"));
	ТаблицаДанныхФайла.Колонки.Добавить("Счетчик",                             Новый ОписаниеТипов(МассивТиповПУ));
	ТаблицаДанныхФайла.Колонки.Добавить("ДневноеПоказание",                    Новый ОписаниеТипов("Число, Строка"));
	ТаблицаДанныхФайла.Колонки.Добавить("НочноеПоказание",                     Новый ОписаниеТипов("Число, Строка"));
	ТаблицаДанныхФайла.Колонки.Добавить("ПиковоеПоказание",                    Новый ОписаниеТипов("Число, Строка"));
	ТаблицаДанныхФайла.Колонки.Добавить("ЭтоПустоеДневноеПоказание",           Новый ОписаниеТипов("Булево"));
	ТаблицаДанныхФайла.Колонки.Добавить("ЭтоПустоеНочноеПоказание",            Новый ОписаниеТипов("Булево"));
	ТаблицаДанныхФайла.Колонки.Добавить("ЭтоПустоеПиковоеПоказание",           Новый ОписаниеТипов("Булево"));
	ТаблицаДанныхФайла.Колонки.Добавить("ПорядковыйНомерПУВСоставеПараметров", Новый ОписаниеТипов("Число"));
	ТаблицаДанныхФайла.Колонки.Добавить("ПризнакПУ",                           Новый ОписаниеТипов(МассивТиповПризнакПУ, , Новый КвалификаторыСтроки(150), Новый КвалификаторыЧисла(15)));
	ТаблицаДанныхФайла.Колонки.Добавить("ПорядковыйНомерПУВБазе",              Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(2)));
	
	// Поле предназначено для идентификации строк таблицы данных
	// при выполнении запроса получения сведений по счетчикам.
	ТаблицаДанныхФайла.Колонки.Добавить("СлужебныйНомерСтроки", Новый ОписаниеТипов("Число"));
	
КонецПроцедуры // СформироватьТаблицуДанных()

&НаСервере
// Формирует и заполняет таблицу данных из файла
Процедура ЗаполнитьТаблицуДанныхИзФайла(Источник)
	
	// Таблица для заполнения данными о показаниях.
	СформироватьТаблицуДанных();
	
	// Запись временных данных во временный файл.
	врДанныеФайла = ПолучитьИзВременногоХранилища(Источник);
	
	Если ФорматФайла = СтруктураЗначенийПолей.СпФорматовФайла[1].Значение Тогда // "XLS"
		ФайлКлиента = Новый Файл(Объект.ИмяФайлаЗагрузки);
		ВременныйФайл = ПолучитьИмяВременногоФайла(Сред(ФайлКлиента.Расширение, 2));
	Иначе
		ВременныйФайл = ПолучитьИмяВременногоФайла(ФорматФайла);
	КонецЕсли;
	
	// Для чтения DBF формата урежем имя временного файла до 8 символов.
	Если ФорматФайла = СтруктураЗначенийПолей.СпФорматовФайла[4].Значение Тогда // "DBF"
		ФайлДБФ = Новый Файл(ВременныйФайл);
		СтароеИмяФайла = ФайлДБФ.ИмяБезРасширения + ".DBF";
		НовоеИмяФайла = Лев(ФайлДБФ.ИмяБезРасширения, 8) + ".DBF";
		ВременныйФайл = СтрЗаменить(ФайлДБФ.ПолноеИмя, СтароеИмяФайла, НовоеИмяФайла);
	КонецЕсли;
	
	врДанныеФайла.Записать(ВременныйФайл);
	
	СпФорматовФайла = СтруктураЗначенийПолей.СпФорматовФайла;
	
	// Чтение данных временного файла.
	ДанныеФайла = Неопределено;
	
	Если ФорматФайла = СпФорматовФайла[0].Значение // "TXT"
	 ИЛИ ФорматФайла = СпФорматовФайла[2].Значение Тогда // "CSV"
		
		ЗагрузитьДанныеИзТХТФайла(ВременныйФайл);
		
	ИначеЕсли ФорматФайла = СпФорматовФайла[1].Значение Тогда // "XLS"
		
		ЗагрузитьДанныеИзXLSФайла(ВременныйФайл);
		
	ИначеЕсли ФорматФайла = СпФорматовФайла[3].Значение Тогда // "XML"
		
		ЗагрузитьДанныеИзXMLФайла(ВременныйФайл);
		
	ИначеЕсли ФорматФайла = СпФорматовФайла[4].Значение Тогда // "DBF"
		
		ЗагрузитьДанныеИзDBFФайла(ВременныйФайл);
		
	КонецЕсли;
	
	// Удалим созданный временный файл.
	Если Не ВременныйФайл = Неопределено Тогда
		Попытка
			УдалитьФайлы(ВременныйФайл);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТаблицуДанныхИзФайла()

&НаСервере
// Процедура производит чтение данных из ТХТ файла-источника.
//
// Параметры:
//  ТаблицаДанныхФайла  - таблица, со структурой колонок как у файла-источника.
//  Кодировка   - кодировка файла.
//
Процедура ЗагрузитьДанныеИзТХТФайла(ВременныйФайл)
	
	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать(ВременныйФайл, Кодировка);
	
	КоличествоСтрок   = Текст.КоличествоСтрок();
	НомерСтрокиЧтения = Объект.ФорматФайлаЗагрузки.НомерСтроки;
	
	Если НомерСтрокиЧтения > КоличествоСтрок Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Чтение данных не возможно, так как номер строки чтения файла превышает количество строк в файле.");
		Возврат;
	КонецЕсли;
	
	ПризнакИтоговойСтроки = "";
	Если ЗначениеЗаполнено(Объект.ФорматФайлаЗагрузки.ПризнакИтоговойСтроки) Тогда
		ПризнакИтСтрокиНомер = Ложь;
		Попытка
			ПризнакИтоговойСтроки = Число(Объект.ФорматФайлаЗагрузки.ПризнакИтоговойСтроки);
			ПризнакИтСтрокиНомер = Истина;
		Исключение
			ПризнакИтоговойСтроки = Объект.ФорматФайлаЗагрузки.ПризнакИтоговойСтроки;
		КонецПопытки;
	КонецЕсли;
	
	РазделительКолонок = СокрЛП(Объект.ФорматФайлаЗагрузки.РазделительКолонок);
	Если РазделительКолонок = "" Тогда
		РазделительКолонок = Объект.ФорматФайлаЗагрузки.РазделительКолонок;
	ИначеЕсли РазделительКолонок = "Таб" Тогда
		РазделительКолонок = Символы.Таб;
	ИначеЕсли РазделительКолонок = "Пробел" Тогда
		РазделительКолонок = Символ(32);
	КонецЕсли;
	
	НастройкиПолей = Объект.НастройкиПолей.Выгрузить();
	
	Для НомерСтроки = НомерСтрокиЧтения По КоличествоСтрок Цикл
		
		СтрокаФайла = Текст.ПолучитьСтроку(НомерСтроки);
		
		Если СтрДлина(СтрокаФайла) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПризнакИтоговойСтроки = "" Тогда
			Если ПризнакИтСтрокиНомер Тогда
				Если НомерСтроки = ПризнакИтоговойСтроки Тогда
					Прервать;
				КонецЕсли;
			Иначе
				Если Найти(СтрокаФайла, ПризнакИтоговойСтроки) > 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрДлина(СтрокаФайла) = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПараметров = Новый Структура("Ошибка", Ложь);
		
		Если ШаблонРеестра = Перечисления.УПЖКХ_ШаблонРеестраПоказанийПриборовУчета.ПоФорматуВыгрузкиВСистемуГородВариант8 Тогда
			
			// Сформируем новую строку с показаниями и новые настройки полей по строке в файле с данными.
			// При этом, если в настройках загрузки обработки есть параметр "Дата показания", то новая строка с показаниями начинается с даты.
			// Значение каждого параметра в новой строке с показаниями будут разделены символом-разделителем колонок, указанный в настройках загрузки.
			// В новых настройках полей установим правила чтения сведений о показаниях согласно положению данных в области показаний ПУ в строке реестра,
			// так как в данном шаблоне реестра показаний положение данных не фиксировано.
			
			МассивЭлементовСтрокиПоказаний = СтрРазделить(СтрокаФайла, РазделительКолонок, Истина);
			
			СтрокаПараметраЛС = НастройкиПолей.Найти(Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.ЛицевойСчет, "Параметр");
			Если СтрокаПараметраЛС <> Неопределено Тогда
				ПозицияЛС = СтрокаПараметраЛС.НомерКолонки - 1;
				Если ПозицияЛС >=0 И ПозицияЛС <= МассивЭлементовСтрокиПоказаний.ВГраница() Тогда
					ЗначениеПараметраЛС = МассивЭлементовСтрокиПоказаний[ПозицияЛС];
				Иначе
					ЗначениеПараметраЛС = "";
				КонецЕсли;
			Иначе
				ЗначениеПараметраЛС = "";
			КонецЕсли;
			
			НовыйИсточникДанных = "";
			
			ПараметрДата        = Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.Дата;
			СтрокаПараметраДата = НастройкиПолей.Найти(ПараметрДата, "Параметр");
			Если СтрокаПараметраДата <> Неопределено Тогда
				ПозицияДаты = СтрокаПараметраДата.НомерКолонки - 1;
				Если ПозицияДаты >=0 И ПозицияДаты <= МассивЭлементовСтрокиПоказаний.ВГраница() Тогда
					ЗначениеПараметраДата = МассивЭлементовСтрокиПоказаний[ПозицияДаты];
				Иначе
					ЗначениеПараметраДата = "";
				КонецЕсли;
			Иначе
				ЗначениеПараметраДата = "";
			КонецЕсли;
			
			ПараметрНомерСчетчика    = Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.НомерСчетчика;
			СтрокаПараметраПоказания = НастройкиПолей.Найти(ПараметрНомерСчетчика, "Параметр");
			Если СтрокаПараметраПоказания <> Неопределено Тогда
				
				// Инициализируем общие переменные для повторного использования.
				ПараметрПоказаниеДневное = Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеДневное;
				ПараметрПоказаниеНочное  = Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеНочное;
				ПараметрПоказаниеПиковое = Перечисления.КВП_ПараметрыСистемыЗагрузкиПоказаний.ПоказаниеПиковое;
				
				СтрокаПараметраПоказаниеДневное = НастройкиПолей.Найти(ПараметрПоказаниеДневное, "Параметр");
				СтрокаПараметраПоказаниеНочное  = НастройкиПолей.Найти(ПараметрПоказаниеНочное, "Параметр");
				СтрокаПараметраПоказаниеПиковое = НастройкиПолей.Найти(ПараметрПоказаниеПиковое, "Параметр");
				
				ПозицияПоказаний = СтрокаПараметраПоказания.НомерКолонки - 1;
				Если ПозицияПоказаний >=0 И ПозицияПоказаний <= МассивЭлементовСтрокиПоказаний.ВГраница() Тогда
					ЗначениеПоляПоказаний = МассивЭлементовСтрокиПоказаний[ПозицияПоказаний];
				Иначе
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Строка реестра №" + НомерСтроки + " не содержит сведений о показаниях счетчиков.");
					Продолжить;
				КонецЕсли;
				ТипКолонки = ОпределитьИмяКолонки(Строка(СтрокаПараметраПоказания.Параметр));
				
				// Новые настройки полей.
				врНастройкиПолейДляПоказанийПУ = НастройкиПолей.СкопироватьКолонки();
				
				// Временная таблица с данными о показаниях ПУ. В каждой строке таблицы будут храниться данные о показаниях для 
				// каждого прибора учета лицевого счета из строки файла реестра показаний.
				
				ТаблицаПоказаний = Новый ТаблицаЗначений;
				ТаблицаПоказаний.Колонки.Добавить("ПриборУчета",                         Новый ОписаниеТипов("Строка",,,, Новый КвалификаторыСтроки(100)));
				ТаблицаПоказаний.Колонки.Добавить("ПорядковыйНомерПУВСоставеПараметров", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15)));
				ТаблицаПоказаний.Колонки.Добавить("ПоказаниеДневное",                    Новый ОписаниеТипов("Строка"));
				ТаблицаПоказаний.Колонки.Добавить("ПоказаниеНочное",                     Новый ОписаниеТипов("Строка"));
				ТаблицаПоказаний.Колонки.Добавить("ПоказаниеПиковое",                    Новый ОписаниеТипов("Строка"));
				
				// В данном шаблоне реестра показаний значения параметров разделены символом ":".
				// Получим массив значений параметров, при этом пропускаем пустые значения
				МассивЭлементов = СтрРазделить(ЗначениеПоляПоказаний, ":", Ложь);
				
				// Начнем обход значений параметров из строки файла реестра, в которой идентификатор ПУ и показаний ПУ разделены
				// значением типа ПУ ("ГВС" или "ХВС" или "Э/ЭН"). Поэтому в цикле будем искать только значения типов ПУ. При этом
				// идентификатор ПУ - элемент массива "слева", а показаний ПУ - "справа".
				
				ИндексПоследнегоЭлементаМассива = МассивЭлементов.ВГраница() - 1;	// Уменьшаем на 1, так как последний элемент массива
				// хранит только значение показания ПУ.
				// Начинаем обход со второго элемента массива, так как первый элемент не хранит значение типа ПУ.
				Для Индекс = 1 По ИндексПоследнегоЭлементаМассива Цикл
					ТекущееЗначениеПараметра = МассивЭлементов[Индекс];
					
					Если СтрНайти(Лев(ТекущееЗначениеПараметра, 3), "ГВС")
					 ИЛИ СтрНайти(Лев(ТекущееЗначениеПараметра, 3), "ХВС")
					 ИЛИ СтрНайти(Лев(ТекущееЗначениеПараметра, 4), "Э/ЭН")
					 ИЛИ СтрНайти(Лев(ТекущееЗначениеПараметра, 3), "ГАЗ")
					 ИЛИ СтрНайти(Лев(ТекущееЗначениеПараметра, 5), "ОТОПЛ") Тогда
						
						ПриборУчета = Строка(СокрЛП(МассивЭлементов[Индекс - 1]));
						
						// Если данные текущего ПУ еще не обрабатывались, то запоминаем его в таблице показаний и создадим для данного ПУ новые настройки полей.
						СтрокаПоказанийПУ = ТаблицаПоказаний.Найти(ПриборУчета, "ПриборУчета");
						Если СтрокаПоказанийПУ = Неопределено Тогда
							СтрокаПоказанийПУ = ТаблицаПоказаний.Добавить();
							СтрокаПоказанийПУ.ПриборУчета = ПриборУчета;
							СтрокаПоказанийПУ.ПорядковыйНомерПУВСоставеПараметров   = ТаблицаПоказаний.Количество();
						КонецЕсли;
						
						Показание = МассивЭлементов[Индекс + 1]; // Значение показания ПУ.
						
						Если Показание = "0" тогда
							Продолжить;
						КонецЕсли;
						
						// Установим номер колонки для каждого показания ПУ.
						Если СтрНайти(ТекущееЗначениеПараметра, "(НЧ)") Тогда
							СтрокаПоказанийПУ.ПоказаниеНочное = Показание;
						ИначеЕсли СтрНайти(ТекущееЗначениеПараметра, "(ПК)") Тогда
							СтрокаПоказанийПУ.ПоказаниеПиковое = Показание;
						Иначе // "(ДН)"
							СтрокаПоказанийПУ.ПоказаниеДневное = Показание;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				// Заполним новый источник данных.
				НомерКолонкиПараметра = 0;
				
				Если СтрокаПараметраЛС <> Неопределено Тогда
					НовыйИсточникДанных        = НовыйИсточникДанных + ЗначениеПараметраЛС + РазделительКолонок;
					НомерКолонкиПараметра   = НомерКолонкиПараметра + 1;
					НомерКолонкиПараметраЛС = НомерКолонкиПараметра;
				КонецЕсли;
				
				Если СтрокаПараметраДата <> Неопределено Тогда
					НовыйИсточникДанных       = НовыйИсточникДанных + ЗначениеПараметраДата + РазделительКолонок;
					НомерКолонкиПараметра     = НомерКолонкиПараметра + 1;
					НомерКолонкиПараметраДата = НомерКолонкиПараметра;
				КонецЕсли;
				
				Для Каждого ТекущаяСтрока Из ТаблицаПоказаний Цикл
					ПорядковыйНомерПУВСоставеПараметров = ТекущаяСтрока.ПорядковыйНомерПУВСоставеПараметров;
					
					// Новая настройка параметра "Лицевой счет".
					Если СтрокаПараметраЛС <> Неопределено Тогда
						НастройкиЛС = врНастройкиПолейДляПоказанийПУ.Добавить();
						НастройкиЛС.НомерКолонки = НомерКолонкиПараметраЛС;
						ЗаполнитьЗначенияСвойств(НастройкиЛС, СтрокаПараметраЛС, "Параметр");
					КонецЕсли;
					
					// Новая настройка параметра "Показания приборов учета".
					НовыйИсточникДанных      = НовыйИсточникДанных + ТекущаяСтрока.ПриборУчета + РазделительКолонок;
					НомерКолонкиПараметра = НомерКолонкиПараметра + 1;
					
					НастройкиПУ = врНастройкиПолейДляПоказанийПУ.Добавить();
					ЗаполнитьЗначенияСвойств(НастройкиПУ, Новый Структура("ПорядковыйНомерПУВСоставеПараметров, НомерКолонки", ПорядковыйНомерПУВСоставеПараметров, НомерКолонкиПараметра));
					ЗаполнитьЗначенияСвойств(НастройкиПУ, СтрокаПараметраПоказания, "Параметр, СпособОпределенияПУ, ИдентификацияПУ");
					
					// Новая настройка параметра "Дата".
					Если СтрокаПараметраДата <> Неопределено Тогда
						НастройкиДата = врНастройкиПолейДляПоказанийПУ.Добавить();
						ЗаполнитьЗначенияСвойств(НастройкиДата, Новый Структура("ПорядковыйНомерПУВСоставеПараметров, НомерКолонки", ПорядковыйНомерПУВСоставеПараметров, НомерКолонкиПараметраДата));
						ЗаполнитьЗначенияСвойств(НастройкиДата, СтрокаПараметраДата, "Параметр, СимволРазделительПериода, ПорядокДень, ПорядокМесяц, ПорядокГод");
					КонецЕсли;
					
					// Новая настройка параметра "ПоказаниеДневное".
					НовыйИсточникДанных      = НовыйИсточникДанных + ТекущаяСтрока.ПоказаниеДневное + РазделительКолонок;
					НомерКолонкиПараметра = НомерКолонкиПараметра + 1;
					
					НастройкиПоказаниеДневное = врНастройкиПолейДляПоказанийПУ.Добавить();
					ЗаполнитьЗначенияСвойств(НастройкиПоказаниеДневное, Новый Структура("Параметр, ПорядковыйНомерПУВСоставеПараметров, НомерКолонки, СимволРазделительДробнойЧасти",
					ПараметрПоказаниеДневное, ПорядковыйНомерПУВСоставеПараметров, НомерКолонкиПараметра, СтрокаПараметраПоказаниеДневное.СимволРазделительДробнойЧасти));
					
					// Новая настройка параметра "ПоказаниеНочное".
					НовыйИсточникДанных      = НовыйИсточникДанных + ТекущаяСтрока.ПоказаниеНочное + РазделительКолонок;
					НомерКолонкиПараметра = НомерКолонкиПараметра + 1;
					
					НастройкиПоказаниеНочное = врНастройкиПолейДляПоказанийПУ.Добавить();
					ЗаполнитьЗначенияСвойств(НастройкиПоказаниеНочное, Новый Структура("Параметр, ПорядковыйНомерПУВСоставеПараметров, НомерКолонки, СимволРазделительДробнойЧасти",
					ПараметрПоказаниеНочное, ПорядковыйНомерПУВСоставеПараметров, НомерКолонкиПараметра, СтрокаПараметраПоказаниеНочное.СимволРазделительДробнойЧасти));
					
					// Новая настройка параметра "ПоказаниеПиковое".
					НовыйИсточникДанных      = НовыйИсточникДанных + ТекущаяСтрока.ПоказаниеПиковое + РазделительКолонок;
					НомерКолонкиПараметра = НомерКолонкиПараметра + 1;
					
					НастройкиПоказаниеПиковое = врНастройкиПолейДляПоказанийПУ.Добавить();
					ЗаполнитьЗначенияСвойств(НастройкиПоказаниеПиковое, Новый Структура("Параметр, ПорядковыйНомерПУВСоставеПараметров, НомерКолонки, СимволРазделительДробнойЧасти",
					ПараметрПоказаниеПиковое, ПорядковыйНомерПУВСоставеПараметров, НомерКолонкиПараметра, СтрокаПараметраПоказаниеПиковое.СимволРазделительДробнойЧасти));
				КонецЦикла;
				
				ЗагрузитьДанныеСтрокиИзФайла(врНастройкиПолейДляПоказанийПУ, СтруктураПараметров, НомерСтроки, НовыйИсточникДанных, РазделительКолонок);
				
			КонецЕсли;
			
		Иначе
			
			ЗагрузитьДанныеСтрокиИзФайла(НастройкиПолей, СтруктураПараметров, НомерСтроки, СтрокаФайла, РазделительКолонок);
			
		КонецЕсли;
		
		Если СтруктураПараметров.Ошибка Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Строка реестра №" + НомерСтроки + " не загружена.");
		КонецЕсли;
		
		ДобавитьСтрокуВТаблицуЗначений(СтруктураПараметров, НомерСтроки);
		
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьДанныеИзТХТФайла()

&НаСервере
// Процедура производит чтение данных из DBF файла-источника.
//
//  ТаблицаДанныхФайла  - таблица, со структурой колонок как у файла-источника.
//  Кодировка   - кодировка файла.
//
Процедура ЗагрузитьДанныеИзDBFФайла(ВременныйФайл)
	
	ФайлДБФ = Новый XBase;
	ФайлДБФ.Кодировка = Кодировка;
	
	ФайлДБФ.ОткрытьФайл(ВременныйФайл,,Истина);
	
	//загрузка
	Если ФайлДБФ.Открыта() = Истина Тогда
		
		Для Каждого ТекПоле Из Объект.НастройкиПолей Цикл
			Попытка
				Если ТекПоле.ПорядковыйНомерПУВСоставеПараметров = 0 Тогда
					Приставка = "";
				Иначе
					Приставка = ТекПоле.ПорядковыйНомерПУВСоставеПараметров;
				КонецЕсли;
				Если ТекПоле.Параметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПоказаний.НомерСчетчика")
					И ТекПоле.СпособОпределенияПУ = СтруктураЗначенийПолей.СпСпособыОпределенияПУ[1].Значение // "по услуге"
					И ТекПоле.СпособОпределенияУслуги = СтруктураЗначенийПолей.СпСпособыОпределенияУслуги[1].Значение Тогда // "по ссылке на услугу"
					Продолжить;
				КонецЕсли;
			Исключение
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Некорректно настроены соответствия полей", , , , Ложь);
				Возврат;
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;
	
	ФайлДБФ.Перейти(Объект.ФорматФайлаЗагрузки.НомерСтроки);
	
	НастройкиПолей = Объект.НастройкиПолей.Выгрузить();
	
	Пока НЕ ФайлДБФ.ВКонце() Цикл
		
		СтруктураПараметров = Новый Структура;
		
		СтруктураПараметров.Вставить("Ошибка", Ложь);
		
		НомерСтроки = ФайлДБФ.НомерЗаписи();
		
		ЗагрузитьДанныеСтрокиИзФайла(НастройкиПолей, СтруктураПараметров, НомерСтроки, ФайлДБФ);
		
		Если СтруктураПараметров.Ошибка Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Строка реестра № " + НомерСтроки + " не загружена.");
		КонецЕсли;
		
		ДобавитьСтрокуВТаблицуЗначений(СтруктураПараметров, НомерСтроки);
		
		ФайлДБФ.Следующая();
	КонецЦикла;
	
	ФайлДБФ.ЗакрытьФайл();
	
КонецПроцедуры

&НаСервере
// Процедура производит чтение данных из XLS файла-источника.
//
// Параметры:
//  ТаблицаДанныхФайла  - таблица, со структурой колонок как у файла-источника.
//
Процедура ЗагрузитьДанныеИзXLSФайла(ВременныйФайл)
	
	ТаблицаДляЗагрузки = Новый ТабличныйДокумент;
	ТаблицаДляЗагрузки.Прочитать(ВременныйФайл, СпособЧтенияЗначенийТабличногоДокумента.Текст);
	
	// Получим номер строки, с которой нужно загружать данные
	// из настройки формата файла загрузки.
	НомерСтрокиЧтения = Объект.ФорматФайлаЗагрузки.НомерСтроки;
	
	ПоследняяСтрока   = ТаблицаДляЗагрузки.ВысотаТаблицы;
	КоличествоКолонок = ТаблицаДляЗагрузки.ШиринаТаблицы;
	
	Если ПоследняяСтрока = 0 ИЛИ КоличествоКолонок = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Загрузка невозможна - файл не содержит данных!");
		Возврат;
	КонецЕсли;
	
	Если НомерСтрокиЧтения > ПоследняяСтрока Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Чтение данных не возможно, так как номер строки чтения файла превышает количество строк в файле.");
		Возврат;
	КонецЕсли;
	
	МассивДанныхФайла = ТаблицаДляЗагрузки.ПолучитьОбласть(НомерСтрокиЧтения, 1, ПоследняяСтрока, КоличествоКолонок);
	
	// Переопределим номер последней строки, так как он изменится,
	// если номер строки, с которой нужно загружать данные отличен от 1.
	ПоследняяСтрока = МассивДанныхФайла.ВысотаТаблицы;
	
	// Таблица значений, заполняемая данными из файла.
	врТаблицаДанныхФайла = Новый ТаблицаЗначений;
	
	// Добавляем колонки для заполнения.
	Для ТекИндекс = 1 По КоличествоКолонок Цикл
		врТаблицаДанныхФайла.Колонки.Добавить("Колонка" + ТекИндекс);
	КонецЦикла;
	
	// Добавляем пустые строки.
	Для ТекИндекс = 1 По ПоследняяСтрока Цикл
		врТаблицаДанныхФайла.Добавить();
	КонецЦикла;
	
	// Загружаем массивы данных в колонки таблицы данных.
	Для ТекИндексСтроки = 1 по ПоследняяСтрока Цикл
		Для ТекИндексКолонки = 1 По КоличествоКолонок Цикл
			Ячейка = МассивДанныхФайла.Область(ТекИндексСтроки, ТекИндексКолонки, ТекИндексСтроки, ТекИндексКолонки);
			врТаблицаДанныхФайла[ТекИндексСтроки - 1][ТекИндексКолонки - 1] = Ячейка.Текст;
		КонецЦикла;
	КонецЦикла;
	
	НастройкаПолей = ПолучитьНастройкуПолей(КоличествоКолонок);
	
	КонецФайла = Ложь;
	НомерСтроки = 1;
	
	Пока НЕ КонецФайла Цикл
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Ошибка", Ложь);
		
		// Получаем следующую по индексу строку. Если этого сделать не удалось, то достигнут конец файла.
		Попытка
			ЗначениеПоляФайла = врТаблицаДанныхФайла[НомерСтроки];
		Исключение
			КонецФайла = Истина;
		КонецПопытки;
		
		// Проверим, достигли ли конца файла (полностью пустая строка).
		ЕстьЗаполненныеПоля = Ложь;
		
		Для Каждого ТекПоле Из НастройкаПолей Цикл
			
			Попытка
				ПУОпределятьПоСсылкеНаУслугу = (ТекПоле.СпособОпределенияПУ = СтруктураЗначенийПолей.СпСпособыОпределенияПУ[1].Значение // "по услуге"
											  И ТекПоле.СпособОпределенияУслуги = СтруктураЗначенийПолей.СпСпособыОпределенияУслуги[1].Значение); // "по ссылке на услугу"
				Если НЕ ПУОпределятьПоСсылкеНаУслугу Тогда
					ЗначениеПоляФайла = врТаблицаДанныхФайла[НомерСтроки - 1][ТекПоле.НомерКолонки - 1];
					Если НЕ ПустаяСтрока(ЗначениеПоляФайла) Тогда
						ЕстьЗаполненныеПоля = Истина;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			Исключение
				Прервать;
			КонецПопытки;
			
		КонецЦикла;
		
		КонецФайла = Не ЕстьЗаполненныеПоля;
		
		Если КонецФайла Тогда
			Прервать;
		КонецЕсли;
		
		ЗагрузитьДанныеСтрокиИзФайла(НастройкаПолей, СтруктураПараметров, НомерСтроки, врТаблицаДанныхФайла);
		
		Если СтруктураПараметров.Ошибка Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Строка реестра № " + НомерСтроки + " не загружена.");
			Возврат;
		КонецЕсли;
		
		ДобавитьСтрокуВТаблицуЗначений(СтруктураПараметров, НомерСтроки);
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Объект.ТаблицаРеестра.Загрузить(ТаблицаДанныхФайла);
	
КонецПроцедуры

&НаСервере
// Процедура производит чтение данных из XML файла-источника.
//
// Параметры:
//  ТаблицаДанныхФайла  - таблица, со структурой колонок как у файла-источника.
//
Процедура ЗагрузитьДанныеИзXMLФайла(ВременныйФайл)
	
	ЧтениеXML = Новый ЧтениеXML();
	ЧтениеXML.ОткрытьФайл(ВременныйФайл);
	
	СтруктураПараметров = Новый Структура;
	
	ПостроительDOM = Новый ПостроительDOM();
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	
	ЧтениеXML.Закрыть();
	
	КорневойЭлемент = ДокументDOM.ЭлементДокумента;
	
	Если Объект.ФорматФайлаЗагрузки.ВложенныеУзлы Тогда
		РекурсияПоВложеннымУзлам(КорневойЭлемент, СтруктураПараметров);
	Иначе
		РекурсияПоУзлам(КорневойЭлемент, СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Область ПроцедурыИФункцииОбщегоНазначения

&НаКлиенте
// Процедура-обработчик результата закрытия формы "НастройкиЗагрузкиВыгрузки".
Процедура ОбработатьЗакрытиеФормыСправочникаНастройкиЗагрузкиВыгрузки(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	УправлениеФормой();
	
	ОбновитьВариантНастройкиФорматаРеестра();
	
КонецПроцедуры

&НаСервере
// Процедура обновляет параеметр варианта настройки формата реестра.
Процедура ОбновитьВариантНастройкиФорматаРеестра()
	
	Если НЕ Объект.ФорматФайлаЗагрузки.Пустая()
	   И Объект.ФорматФайлаЗагрузки.ВариантНастройкиФорматаРеестраПоказанийПриборовУчета
							= Перечисления.УПЖКХ_ВариантыНастройкиФорматаРеестраПоказанийПриборовУчета.ПоШаблону Тогда
		РучнаяНастройкаФайлаРеестра = Ложь;
		ШаблонРеестра               = Объект.ФорматФайлаЗагрузки.ШаблонРеестраПоказанийПриборовУчета;
	Иначе
		РучнаяНастройкаФайлаРеестра = Истина;
		ШаблонРеестра               = Перечисления.УПЖКХ_ВариантыНастройкиФорматаРеестраПоказанийПриборовУчета.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Устанавливает видимость элементов.
Процедура УправлениеФормой()
	
	Если ЗначениеЗаполнено(Объект.ФорматФайлаЗагрузки) Тогда
		
		Элементы.ДеревоПоказанийИспользовать.Видимость   = Истина;
		Элементы.ДеревоПоказанийГруппаДокумент.Видимость = Ложь;
		
		Для Каждого ВыбрДок Из Объект.НастройкаЗаполнения Цикл
			Если ВыбрДок.Документ = "Ввод показаний счетчика" И ВыбрДок.Пометка Тогда
				Элементы.ДеревоПоказанийГруппаДокумент.Видимость = Истина;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		Элементы.ДеревоПоказанийИспользовать.Видимость   = Ложь;
		Элементы.ДеревоПоказанийГруппаДокумент.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ИмяФайлаЗагрузки.Видимость = РасширениеПодключено;
	
КонецПроцедуры //УстановитьВидимость()

&НаСервере
// Заполняет настройки загрузки файла.
Функция ЗаполнитьНастройкиЗагрузкиФайла()
	
	НастройкиЗагрузки = ПолучитьНастройкиЗагрузкиФайлаНаСервере();
	
	Если НастройкиЗагрузки.Выбран() Тогда
		Объект.ФорматФайлаЗагрузки = НастройкиЗагрузки.ФорматФайлаЗагрузки;
		Объект.ИмяФайлаЗагрузки    = НастройкиЗагрузки.ИмяФайлаЗагрузки;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции //ЗаполнитьНастройкиЗагрузкиФайла()

&НаСервере
// Функция возвращает результат запроса по табличной части "ТаблицаРеестра".
Функция ЗапросПоТабличнойЧасти(РеестрДерево)
	
	НомераСтрокСОшибками = ВыполнитьПроверкуКорректностиЗаполненияДереваРеестра(РеестрДерево);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаПоказаний.НомерСтрокиДерева КАК НомерСтрокиДерева,
	|	ТаблицаПоказаний.Использовать КАК Использовать,
	|	ТаблицаПоказаний.ДатаПоказания КАК ДатаПоказания,
	|	ТаблицаПоказаний.Объект КАК Объект,
	|	ТаблицаПоказаний.Услуга КАК Услуга,
	|	ТаблицаПоказаний.Счетчик КАК Счетчик,
	|	ТаблицаПоказаний.ДневноеПоказание КАК ДневноеПоказание,
	|	ТаблицаПоказаний.НочноеПоказание КАК НочноеПоказание,
	|	ТаблицаПоказаний.ПиковоеПоказание КАК ПиковоеПоказание,
	|	ТаблицаПоказаний.Документ КАК Документ,
	|	ТаблицаПоказаний.ПоказанияКорректны КАК ПоказанияКорректны,
	|	ТаблицаПоказаний.ТипОшибкиДневной КАК ТипОшибкиДневной,
	|	ТаблицаПоказаний.ТипОшибкиНочной КАК ТипОшибкиНочной,
	|	ТаблицаПоказаний.ТипОшибкиПиковый КАК ТипОшибкиПиковый,
	|	ТаблицаПоказаний.СреднийРасходДневной КАК СреднийРасходДневной,
	|	ТаблицаПоказаний.СреднийРасходНочной КАК СреднийРасходНочной,
	|	ТаблицаПоказаний.СреднийРасходПиковый КАК СреднийРасходПиковый
	|ПОМЕСТИТЬ втТаблицаПоказаний
	|ИЗ
	|	&ТаблицаРеестра КАК ТаблицаПоказаний
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаПоказаний.НомерСтрокиДерева КАК НомерСтроки,
	|	втТаблицаПоказаний.Использовать КАК Использовать,
	|	втТаблицаПоказаний.ДатаПоказания КАК ДатаПоказания,
	|	втТаблицаПоказаний.Объект КАК Объект,
	|	втТаблицаПоказаний.Услуга КАК Услуга,
	|	втТаблицаПоказаний.Счетчик КАК Счетчик,
	|	ЕСТЬNULL(КВП_Счетчики.Тарифность, ЗНАЧЕНИЕ(Перечисление.КВП_ТарифностьСчетчиков.ПустаяСсылка)) КАК Тарифность,
	|	втТаблицаПоказаний.ДневноеПоказание КАК ДневноеПоказание,
	|	втТаблицаПоказаний.НочноеПоказание КАК НочноеПоказание,
	|	втТаблицаПоказаний.ПиковоеПоказание КАК ПиковоеПоказание,
	|	втТаблицаПоказаний.Документ КАК Документ,
	|	втТаблицаПоказаний.ПоказанияКорректны КАК ПоказанияКорректны,
	|	втТаблицаПоказаний.ТипОшибкиДневной КАК ТипОшибкиДневной,
	|	втТаблицаПоказаний.ТипОшибкиНочной КАК ТипОшибкиНочной,
	|	втТаблицаПоказаний.ТипОшибкиПиковый КАК ТипОшибкиПиковый,
	|	втТаблицаПоказаний.СреднийРасходДневной КАК СреднийРасходДневной,
	|	втТаблицаПоказаний.СреднийРасходНочной КАК СреднийРасходНочной,
	|	втТаблицаПоказаний.СреднийРасходПиковый КАК СреднийРасходПиковый
	|ПОМЕСТИТЬ ТаблицаПоказаний
	|ИЗ
	|	втТаблицаПоказаний КАК втТаблицаПоказаний
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КВП_Счетчики КАК КВП_Счетчики
	|		ПО втТаблицаПоказаний.Счетчик = КВП_Счетчики.Ссылка
	|ГДЕ
	|	НЕ втТаблицаПоказаний.НомерСтрокиДерева В (&НомераСтрокСОшибками)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаПоказаний.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПоказаний.Счетчик КАК Счетчик,
	|	ТаблицаПоказаний.ДатаПоказания КАК ДатаПоказания
	|ПОМЕСТИТЬ втТаблицаСчетчиков
	|ИЗ
	|	ТаблицаПоказаний КАК ТаблицаПоказаний
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втТаблицаСчетчиков.НомерСтроки КАК НомерСтроки,
	|	втТаблицаСчетчиков.Счетчик КАК Счетчик,
	|	втТаблицаСчетчиков.ДатаПоказания КАК ДатаПоказания,
	|	КВП_ПоказанияСчетчиковСрезПоследних.Регистратор КАК Регистратор,
	|	ВЫБОР
	|		КОГДА втТаблицаСчетчиков.ДатаПоказания < КВП_ПоказанияСчетчиковСрезПоследних.Период
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьПоказанияНаБолееПозднююДату,
	|	ВЫБОР
	|		КОГДА втТаблицаСчетчиков.ДатаПоказания = КВП_ПоказанияСчетчиковСрезПоследних.Период
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьПоказанияНаТуЖеДату,
	|	ВЫБОР
	|		КОГДА втТаблицаСчетчиков.ДатаПоказания > КВП_ПоказанияСчетчиковСрезПоследних.Период
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьПоказанияНаБолееРаннююДату,
	|	ЕСТЬNULL(КВП_ПоказанияСчетчиковСрезПоследних.ДневноеПоказание, 0) КАК ДневноеПоказание,
	|	ЕСТЬNULL(КВП_ПоказанияСчетчиковСрезПоследних.НочноеПоказание, 0) КАК НочноеПоказание,
	|	ЕСТЬNULL(КВП_ПоказанияСчетчиковСрезПоследних.ПиковоеПоказание, 0) КАК ПиковоеПоказание
	|ПОМЕСТИТЬ втПоказанияИзБазы
	|ИЗ
	|	втТаблицаСчетчиков КАК втТаблицаСчетчиков
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_ПоказанияСчетчиков.СрезПоследних(
	|				,
	|				Счетчик В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						втТаблицаСчетчиков.Счетчик
	|					ИЗ
	|						втТаблицаСчетчиков)) КАК КВП_ПоказанияСчетчиковСрезПоследних
	|		ПО втТаблицаСчетчиков.Счетчик = КВП_ПоказанияСчетчиковСрезПоследних.Счетчик
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПоказаний.НомерСтроки КАК НомерСтроки,
	|	ТаблицаПоказаний.ДатаПоказания КАК ДатаПоказания,
	|	ТаблицаПоказаний.Объект КАК Объект,
	|	ТаблицаПоказаний.Услуга КАК Услуга,
	|	втПоказанияИзБазы.Регистратор КАК Регистратор,
	|	ТаблицаПоказаний.Счетчик КАК Счетчик,
	|	ТаблицаПоказаний.ДневноеПоказание КАК ДневноеПоказание,
	|	ТаблицаПоказаний.НочноеПоказание КАК НочноеПоказание,
	|	ТаблицаПоказаний.ПиковоеПоказание КАК ПиковоеПоказание,
	|	ВЫБОР
	|		КОГДА ТаблицаПоказаний.Тарифность = ЗНАЧЕНИЕ(Перечисление.КВП_ТарифностьСчетчиков.Однотарифный)
	|				И ТаблицаПоказаний.ДневноеПоказание = ЕСТЬNULL(втПоказанияИзБазы.ДневноеПоказание, 0)
	|			ТОГДА ИСТИНА
	|		КОГДА ТаблицаПоказаний.Тарифность = ЗНАЧЕНИЕ(Перечисление.КВП_ТарифностьСчетчиков.Двухтарифный)
	|				И ТаблицаПоказаний.ДневноеПоказание = ЕСТЬNULL(втПоказанияИзБазы.ДневноеПоказание, 0)
	|				И ТаблицаПоказаний.НочноеПоказание = ЕСТЬNULL(втПоказанияИзБазы.НочноеПоказание, 0)
	|			ТОГДА ИСТИНА
	|		КОГДА ТаблицаПоказаний.Тарифность = ЗНАЧЕНИЕ(Перечисление.КВП_ТарифностьСчетчиков.Трехтарифный)
	|				И ТаблицаПоказаний.ДневноеПоказание = ЕСТЬNULL(втПоказанияИзБазы.ДневноеПоказание, 0)
	|				И ТаблицаПоказаний.НочноеПоказание = ЕСТЬNULL(втПоказанияИзБазы.НочноеПоказание, 0)
	|				И ТаблицаПоказаний.ПиковоеПоказание = ЕСТЬNULL(втПоказанияИзБазы.ПиковоеПоказание, 0)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПоказанияСовпадают,
	|	ВЫБОР
	|		КОГДА ТаблицаПоказаний.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанииСчетчикаНаЛицевойСчет)
	|		КОГДА ТаблицаПоказаний.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанииСчетчикаНаПомещение)
	|		КОГДА ТаблицаПоказаний.Объект ССЫЛКА Справочник.КВП_Здания
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанийСчетчикаНаЗдание)
	|		КОГДА ТаблицаПоказаний.Объект ССЫЛКА Справочник.КВП_Подъезды
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанийСчетчикаНаПодъезд)
	|	КОНЕЦ КАК ВидОперации,
	|	втПоказанияИзБазы.ЕстьПоказанияНаБолееПозднююДату КАК ЕстьПоказанияНаБолееПозднююДату,
	|	втПоказанияИзБазы.ЕстьПоказанияНаТуЖеДату КАК ЕстьПоказанияНаТуЖеДату,
	|	ТаблицаПоказаний.ПоказанияКорректны КАК ПоказанияКорректны,
	|	ТаблицаПоказаний.ТипОшибкиДневной КАК ТипОшибкиДневной,
	|	ТаблицаПоказаний.ТипОшибкиНочной КАК ТипОшибкиНочной,
	|	ТаблицаПоказаний.ТипОшибкиПиковый КАК ТипОшибкиПиковый,
	|	ТаблицаПоказаний.СреднийРасходДневной КАК СреднийРасходДневной,
	|	ТаблицаПоказаний.СреднийРасходНочной КАК СреднийРасходНочной,
	|	ТаблицаПоказаний.СреднийРасходПиковый КАК СреднийРасходПиковый
	|ИЗ
	|	ТаблицаПоказаний КАК ТаблицаПоказаний
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПоказанияИзБазы КАК втПоказанияИзБазы
	|		ПО ТаблицаПоказаний.НомерСтроки = втПоказанияИзБазы.НомерСтроки
	|			И ТаблицаПоказаний.Счетчик = втПоказанияИзБазы.Счетчик
	|			И ТаблицаПоказаний.ДатаПоказания = втПоказанияИзБазы.ДатаПоказания
	|ГДЕ
	|	ТаблицаПоказаний.Использовать = ИСТИНА
	|	И ТаблицаПоказаний.Документ = ЗНАЧЕНИЕ(Документ.УПЖКХ_ВводПоказанийСчетчика.ПустаяСсылка)
	|ИТОГИ ПО
	|	ВидОперации";
	
	ТаблицаРеестра = Объект.ТаблицаРеестра.Выгрузить();
	
	Запрос.УстановитьПараметр("ТаблицаРеестра",       ТаблицаРеестра);
	Запрос.УстановитьПараметр("НомераСтрокСОшибками", НомераСтрокСОшибками);
	
	Возврат Запрос.Выполнить();
	
КонецФункции // ЗапросПоТабличнойЧасти()

&НаСервере
// Процедура формирования документов.
Процедура СформироватьДокументыВводаПоказаний(МассивСсылокДокументовДляСозданияКорректировки)
	
	РеестрДерево = РеквизитФормыВЗначение("ДеревоПоказаний", Тип("ДеревоЗначений"));
	
	НайденныеСтроки = РеестрДерево.Строки.НайтиСтроки(Новый Структура("ДатаПоказания, Использовать", Дата(1,1,1), Истина));
	Если Не НайденныеСтроки.Количество() = 0 Тогда
		Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
			"В строке №" + ТекСтрока.НомерСтроки + " не заполнена дата показаний счетчика. Документы не сформированы.");
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	МассивНомеровСтрок = Новый Массив;
	Дата = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	
	РезультатЗапроса = ЗапросПоТабличнойЧасти(РеестрДерево);
	
	// Структура документа
	СтруктураДокумента = Новый Структура("ЗагружатьНулевыеПоказания, ВидОперации, Комментарий, ВводНачальныхПоказаний, ТаблицаПоказаний");
	
	Если Объект.ФорматФайлаЗагрузки.ВариантЗагрузкиНулевыхПоказаний = "Загружать нулевые как 0" Тогда
		СтруктураДокумента.ЗагружатьНулевыеПоказания = Истина;
	ИначеЕсли Объект.ФорматФайлаЗагрузки.ВариантЗагрузкиНулевыхПоказаний = "Загружать нулевые как ""Не введено""" Тогда
		СтруктураДокумента.ЗагружатьНулевыеПоказания = Ложь;
	Иначе
		СтруктураДокумента.ЗагружатьНулевыеПоказания = Истина;
	КонецЕсли;
	
	// Таблица показаний
	СтруктураДокумента.ТаблицаПоказаний = Новый ТаблицаЗначений;
	СтруктураДокумента.ТаблицаПоказаний.Колонки.Добавить("Услуга");
	СтруктураДокумента.ТаблицаПоказаний.Колонки.Добавить("Счетчик");
	СтруктураДокумента.ТаблицаПоказаний.Колонки.Добавить("Объект");
	СтруктураДокумента.ТаблицаПоказаний.Колонки.Добавить("ДатаПоказания");
	СтруктураДокумента.ТаблицаПоказаний.Колонки.Добавить("ДневноеПоказание");
	СтруктураДокумента.ТаблицаПоказаний.Колонки.Добавить("НочноеПоказание");
	СтруктураДокумента.ТаблицаПоказаний.Колонки.Добавить("ПиковоеПоказание");
	СтруктураДокумента.ТаблицаПоказаний.Колонки.Добавить("ПоказанияКорректны");
	СтруктураДокумента.ТаблицаПоказаний.Колонки.Добавить("СреднийРасходДневной");
	СтруктураДокумента.ТаблицаПоказаний.Колонки.Добавить("СреднийРасходНочной");
	СтруктураДокумента.ТаблицаПоказаний.Колонки.Добавить("СреднийРасходПиковый");
	
	ВидОперации = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Если настройка контроля показаний включена, тогда перед формированием
	// документов осуществим проверку на корректность введенных показаний.
	Если ИспользуетсяКонтрольПоказанийПриборовУчета Тогда
		
		Пока ВидОперации.Следующий() Цикл
			
			СтрокаСчетчика = ВидОперации.Выбрать();
			
			Пока СтрокаСчетчика.Следующий() Цикл
				
				// Если заполнен тип ошибки хотя бы по одному виду тарифа, то ошибки есть.
				ЕстьОшибкиВСтроке = Не ПустаяСтрока(СтрокаСчетчика.ТипОшибкиДневной)
				Или Не ПустаяСтрока(СтрокаСчетчика.ТипОшибкиНочной)
				Или Не ПустаяСтрока(СтрокаСчетчика.ТипОшибкиПиковый);
				
				// Если есть ошибки в строке, и они не подтверждены пользователем,
				// то прекращаем проверку, информируем пользователя и документы не формируем.
				Если ЕстьОшибкиВСтроке И Не СтрокаСчетчика.ПоказанияКорректны Тогда
					
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Обнаружены строки с некорректными показаниями! Содание документов ""Ввод показаний счетчика"" невозможно." + Символы.ПС
					+ "Укажите корректные показания либо подтвердите их корректность установкой флажка в соответствующей строке.");
					
					Возврат;
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ВидОперации.Сбросить();
	
	Пока ВидОперации.Следующий() Цикл
		
		МассивНомеровСтрок.Очистить();
		СтруктураДокумента.ТаблицаПоказаний.Очистить();
		
		ЕстьОтрицательныйРасход = Ложь;
		
		// Заполняем структуру документа.
		СтруктураДокумента.Комментарий   = "#загружен автоматически";
		СтруктураДокумента.ВидОперации   = ВидОперации.ВидОперации;
		СтруктураДокумента.ВводНачальныхПоказаний = Ложь;
		
		ЛС = ВидОперации.Выбрать();
		
		Пока ЛС.Следующий() Цикл
			
			// Проверяем, вводились ли уже в базу такие же показания на ту же дату.
			Если ЛС["ЕстьПоказанияНаТуЖеДату"] И ЛС["ПоказанияСовпадают"] Тогда
				
				СтрокаТЧ = СтруктураДокумента.ТаблицаПоказаний.Добавить();
				
				СтрокаТЧ.ДневноеПоказание = Неопределено;
				СтрокаТЧ.НочноеПоказание  = Неопределено;
				СтрокаТЧ.ПиковоеПоказание = Неопределено;
				
				СтрокаТЧ.СреднийРасходДневной = 0;
				СтрокаТЧ.СреднийРасходНочной  = 0;
				СтрокаТЧ.СреднийРасходПиковый = 0;
				
				// Проверяем, не были ли уже введены показания данного прибора учета на более позднюю дату.
			ИначеЕсли ЛС["ЕстьПоказанияНаБолееПозднююДату"] ИЛИ ЛС["ЕстьПоказанияНаТуЖеДату"] Тогда
				
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Строка номер """ + ЛС["НомерСтроки"] + """: Показания по счетчику """ + ЛС["Счетчик"] + """ уже введены за более позднюю дату документом """ + ЛС["Регистратор"] + """.");
				
				Продолжить;
				
				// Если показания и их дата отличаются от имеющихся в базе, 
				// добавляем данные показания в документ ввода показаний.
			Иначе
				
				СтрокаТЧ = СтруктураДокумента.ТаблицаПоказаний.Добавить();
				
				СтрокаТЧ.ДневноеПоказание = ЛС["ДневноеПоказание"];
				СтрокаТЧ.НочноеПоказание  = ЛС["НочноеПоказание"];
				СтрокаТЧ.ПиковоеПоказание = ЛС["ПиковоеПоказание"];
				
				СтрокаТЧ.СреднийРасходДневной = ЛС["СреднийРасходДневной"];
				СтрокаТЧ.СреднийРасходНочной  = ЛС["СреднийРасходНочной"];
				СтрокаТЧ.СреднийРасходПиковый = ЛС["СреднийРасходПиковый"];
				
			КонецЕсли;
			
			// Заполнение ТЧ.
			СтрокаТЧ.Услуга             = ЛС["Услуга"];
			СтрокаТЧ.Объект             = ЛС["Объект"];
			СтрокаТЧ.Счетчик            = ЛС["Счетчик"];
			СтрокаТЧ.ДатаПоказания      = ЛС["ДатаПоказания"];
			СтрокаТЧ.ПоказанияКорректны = ЛС["ПоказанияКорректны"];
			
			// Признак наличия в строке отрицательного расхода.
			Если ЛС["ТипОшибкиДневной"] = "Отрицательный расход"
				Или ЛС["ТипОшибкиНочной"] = "Отрицательный расход"
				Или ЛС["ТипОшибкиПиковый"] = "Отрицательный расход" Тогда
				
				ЕстьОтрицательныйРасход = Истина;
				
			КонецЕсли;
			
			МассивНомеровСтрок.Добавить(ЛС.НомерСтроки);
		КонецЦикла;
		
		Если СтруктураДокумента.ТаблицаПоказаний.Количество() = 0 Тогда
			Продолжить;
		Иначе
			СтруктураДокумента.ТаблицаПоказаний.Свернуть("ДатаПоказания,
			|ДневноеПоказание,
			|НочноеПоказание,
			|Объект,
			|ПиковоеПоказание,
			|Счетчик,
			|Услуга,
			|ПоказанияКорректны,
			|СреднийРасходДневной,
			|СреднийРасходНочной,
			|СреднийРасходПиковый");
		КонецЕсли;
		
		// Создание, заполнение и проведение документа.
		ДокументПоказаний = Документы.УПЖКХ_ВводПоказанийСчетчика.СоздатьДокумент();
		
		ДокументПоказаний.Заполнить(СтруктураДокумента);
		
		// Не проводим документы, если табличная часть не заполнена.
		Если НЕ ДокументПоказаний.Главная.Количество() = 0 Тогда
			Если НЕ КВП_ЗаписатьОбъект(ДокументПоказаний, РежимЗаписиДокумента.Проведение) Тогда
				
				КВП_ЗаписатьОбъект(ДокументПоказаний, РежимЗаписиДокумента.Запись);
				
			Иначе
				
				// Запомним документы, в которых имеется отрицательный расход по счетчикам установленным на помещение или лицевой счет,
				// чтобы в дальнейшем иметь возможность сформировать по ним документы корректировок.
				Если ИспользуетсяКонтрольПоказанийПриборовУчета
					И (ВидОперации.ВидОперации = Перечисления.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанииСчетчикаНаЛицевойСчет
					ИЛИ ВидОперации.ВидОперации = Перечисления.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанииСчетчикаНаПомещение)
					И ЕстьОтрицательныйРасход Тогда
					
					МассивСсылокДокументовДляСозданияКорректировки.Добавить(ДокументПоказаний.Ссылка);
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ДокументПоказаний.Ссылка.Пустая() Тогда
			
			СтрокиДерева = ДеревоПоказаний.ПолучитьЭлементы();
			
			Для Каждого ТекНомер Из МассивНомеровСтрок Цикл
				СтрокаДерева = СтрокиДерева.Получить(ТекНомер - 1);
				Если НЕ СтрокаДерева = Неопределено Тогда
					СтрокаДерева.Документ = ДокументПоказаний.Ссылка;
					СтрокаДерева.ДокументПроведен = СтрокаДерева.Документ.Проведен;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьДокументыВводаПоказаний()

&НаСервере
// Процедура сохраняет настройки на сервере.
Процедура СохранитьНастройкиНаСервере()
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("КВП_ЗагрузкаРеестраПоказанийСчетчиковСтрокаНастроек", ,
	Объект.НастройкаЗаполнения.Выгрузить());
	
КонецПроцедуры

&НаСервере
// Процедура получает настройки из хранилища.
Процедура ОбновитьНастройкуЗаполненияНаСервере(Адрес)
	
	НастройкаИзХранилища = ПолучитьИзВременногоХранилища(Адрес);
	Если ТипЗнч(НастройкаИзХранилища) = Тип("ТаблицаЗначений") Тогда
		Объект.НастройкаЗаполнения.Загрузить(НастройкаИзХранилища);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Возвращает таблицу значений "НастройкаПолей".
//
// Параметры:
//  КоличествоКолонок - Число - количество колонок в файле загрузки.
//
// Возвращаемое значение:
//  НастройкаПолей - ТаблицаЗначение - содержит структурированные настройки загрузки данных из файла.
//
Функция ПолучитьНастройкуПолей(КоличествоКолонок)
	
	НастройкаПолей = Объект.ФорматФайлаЗагрузки.НастройкиСоответствияПолей.Выгрузить();
	
	МассивСтрокНаУдаление = Новый Массив;
	
	// Из таблицы настроек удаляются все настройки с пустым номером строки, а также
	// настройки, у которых номер колонки превышает количество колонок в обрабатываемом реестре.
	Для Каждого Настройка Из НастройкаПолей Цикл
		// Пропускаем строку параметра "НомерСчетчика", т.к. если ПУ определяется
		// по ссылке на услугу, то не важно, заполнен или нет НомерКолонки.
		Если (Настройка.НомерКолонки = 0 И Не СчетчикОпределяетсяПоСсылкеНаУслугу(Настройка))
		  ИЛИ Настройка.НомерКолонки > КоличествоКолонок Тогда
			МассивСтрокНаУдаление.Добавить(Настройка);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаНаУдаление Из МассивСтрокНаУдаление Цикл
		НастройкаПолей.Удалить(СтрокаНаУдаление);
	КонецЦикла;
	
	НастройкаПолей.Сортировать("НомерКолонки");
	
	Возврат НастройкаПолей;
	
КонецФункции

&НаКлиенте
// Процедура, обновляет номера строк в табличном поле "Реестр показаний дерево"
//
Процедура ОбновитьНомераСтрок()
	
	Номер = 0;
	
	СтрокиВерхнегоУровня = ДеревоПоказаний.ПолучитьЭлементы();
	
	Для каждого ТекСтрока из СтрокиВерхнегоУровня Цикл
		
		Номер = Номер + 1;
		
		ТекСтрока.Номер = Номер;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Заполняет поле "Объект" выбранным помещением.
//
Процедура ОбработатьВыборПомещения(РезультатВыбора, ДопПараметры) Экспорт
	
	Если Не РезультатВыбора = Неопределено Тогда
		Элементы.ДеревоПоказаний.ТекущиеДанные.Объект = РезультатВыбора;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВыборПомещения()

&НаКлиенте
// Обработчик результата ввода даты, вызванного в процедуре "УстановитьДату()".
Процедура ОбработатьВводДаты(Значение, ДопПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Значение) Тогда
		СтрокиВерхнегоУровня = ДеревоПоказаний.ПолучитьЭлементы();
		
		Для Каждого СтрокаТабличнойЧасти Из СтрокиВерхнегоУровня Цикл
			СтрокаТабличнойЧасти.ДатаПоказания = Значение;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВводДаты()

&НаКлиенте
// Обработчик результата вопроса об очистке документа.
//
Процедура ОбработатьРезультатВопросаОчисткаДокумента(Ответ, Идентификатор) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ТекущиеДанные = ДеревоПоказаний.НайтиПоИдентификатору(Идентификатор);
		
		Если НЕ ТекущиеДанные = Неопределено Тогда
			ДокументСсылка = ТекущиеДанные.Документ;
			
			ПометитьНаУдалениеДокументПоСсылкеНаСервере(ДокументСсылка);
			
			КоллекцияДерево = ДеревоПоказаний.ПолучитьЭлементы();
			Для Каждого ТекСтрока Из КоллекцияДерево Цикл
				Если ДокументСсылка = ТекСтрока.Документ Тогда
					ТекСтрока.Документ         = ПредопределенноеЗначение("Документ.УПЖКХ_ВводПоказанийСчетчика.ПустаяСсылка");
					ТекСтрока.ДокументПроведен = Ложь;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	Иначе
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура пометки документов на удаление.
//
Процедура ПометитьНаУдалениеДокументПоСсылкеНаСервере(ДокументСсылка)
	
	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	ДокументОбъект.УстановитьПометкуУдаления(Истина);
	ДокументОбъект.Записать();
	
КонецПроцедуры // ПометитьНаУдалениеДокументПоСсылкеНаСервере()

&НаКлиенте
// Процедура устанавливает в качестве текущей строки дерева первую строку
// с ошибкой. Используется в случае, если в дереве отобраны только строки с ошибками.
//
Процедура СпозиционироватьКурсорНаПервуюСтрокуСОшибкойПоказаний()
	
	УПЖКХ_ВводПоказанийПриборовУчетаКлиент.СпозиционироватьКурсорНаПервуюСтрокуСОшибкойПоказаний(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
// Функция получает и возвращает структуру среднего расход за указанный период для счетчика.
// 
// Возвращаемое значение:
//  Структура - структура среднего расхода вида "Дневной, Ночной, Пиковый";
//
Функция ПолучитьСреднийРасход(Счетчик, ДатаПоказания, КоличествоМесяцевДляПолученияСреднего = 6)
	
	Возврат УПЖКХ_ВводПоказанийПриборовУчетаСервер.ПолучитьСреднийРасход(Счетчик, ДатаПоказания, КоличествоМесяцевДляПолученияСреднего);
	
КонецФункции

&НаСервере
// Функция возвращает предыдущие показания счетчика.
//
// Параметры:
//  Счетчик       - СправочникСсылка.КВП_Счетчики - Счетчик, для которого нужно получить предыдущие показания.
//  ДатаПоказания - Дата - Дата, на которую нужно получать предыдущие показания.
//
// Возвращаемое значение:
//  Структура - Предыдущие показания счетчика (дневное, ночное, пиковое).
//
Функция ПолучитьПредыдущиеПоказанияСчетчика(Счетчик, ДатаПоказания)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КВП_ПоказанияСчетчиковСрезПоследних.Счетчик.СпособРегистрацииПоказаний = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРегистрацииПоказанийСчетчиков.НарастающимИтогом)
	|			ТОГДА КВП_ПоказанияСчетчиковСрезПоследних.ДневноеПоказание
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДневноеПоказание,
	|	ВЫБОР
	|		КОГДА КВП_ПоказанияСчетчиковСрезПоследних.Счетчик.СпособРегистрацииПоказаний = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРегистрацииПоказанийСчетчиков.НарастающимИтогом)
	|			ТОГДА КВП_ПоказанияСчетчиковСрезПоследних.НочноеПоказание
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НочноеПоказание,
	|	ВЫБОР
	|		КОГДА КВП_ПоказанияСчетчиковСрезПоследних.Счетчик.СпособРегистрацииПоказаний = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРегистрацииПоказанийСчетчиков.НарастающимИтогом)
	|			ТОГДА КВП_ПоказанияСчетчиковСрезПоследних.ПиковоеПоказание
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПиковоеПоказание,
	|	КВП_ПоказанияСчетчиковСрезПоследних.Период КАК ДатаПредыдущегоПоказания,
	|	КВП_ПоказанияСчетчиковСрезПоследних.НачальноеПоказание КАК ПредыдущееПоказаниеНачальное,
	|	КВП_ПоказанияСчетчиковСрезПоследних.Счетчик.Тарифность КАК Тарифность,
	|	КВП_ПоказанияСчетчиковСрезПоследних.Счетчик.СпособРегистрацииПоказаний КАК СпособРегистрацииПоказаний,
	|	КВП_ПоказанияСчетчиковСрезПоследних.Счетчик.Разрядность КАК Разрядность
	|ИЗ
	|	РегистрСведений.КВП_ПоказанияСчетчиков.СрезПоследних(&ДатаПоказания, Счетчик = &Счетчик) КАК КВП_ПоказанияСчетчиковСрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаПоказания", ДатаПоказания);
	Запрос.УстановитьПараметр("Счетчик",       Счетчик);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	// В случае если результат запроса будет пустым, вернем нулевые показания.
	ПоказанияСчетчика = Новый Структура("ДневноеПоказаниеПредыдущее, НочноеПоказаниеПредыдущее, ПиковоеПоказаниеПредыдущее", 0, 0, 0);
	
	Если РезультатЗапроса.Следующий() Тогда
		
		ПоказанияСчетчика.Вставить("ДневноеПоказаниеПредыдущее",   РезультатЗапроса.ДневноеПоказание);
		ПоказанияСчетчика.Вставить("НочноеПоказаниеПредыдущее",    РезультатЗапроса.НочноеПоказание);
		ПоказанияСчетчика.Вставить("ПиковоеПоказаниеПредыдущее",   РезультатЗапроса.ПиковоеПоказание);
		ПоказанияСчетчика.Вставить("ДатаПредыдущегоПоказания",     РезультатЗапроса.ДатаПредыдущегоПоказания);
		ПоказанияСчетчика.Вставить("ПредыдущееПоказаниеНачальное", РезультатЗапроса.ПредыдущееПоказаниеНачальное);
		ПоказанияСчетчика.Вставить("Тарифность",                   РезультатЗапроса.Тарифность);
		ПоказанияСчетчика.Вставить("СпособРегистрацииПоказаний",   РезультатЗапроса.СпособРегистрацииПоказаний);
		ПоказанияСчетчика.Вставить("Разрядность",                  РезультатЗапроса.Разрядность);
		
	КонецЕсли;
	
	Возврат ПоказанияСчетчика;
	
КонецФункции

&НаСервере
// Процедура формирования документа "Корректировка начислений" по отрицательным показаниям приборов учета.
//
// Параметры:
//  МассивСсылокНаДокументы - Массив - Массив со ссылками на документы "Ввод показаний счетчика".
//
Процедура СформироватьДокументКорректировкиНаСервере(МассивСсылокНаДокументы)
	
	// Для документов "Ввод показаний счетчика" с видом операции "Ввод показаний счетчика на лицевой счет" и
	// "Ввод показаний счетчика на помещение", имеющих строки с отрицательным расходом сформируем документы корректировки.
	Для Каждого ДокументСсылка Из МассивСсылокНаДокументы Цикл
		
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		
		// При успешном формировании документа корректировки в данную
		// переменную будет записана ссылка на документ корректировки.
		ДокументКорректировкиСсылка = Неопределено;
		
		Если Не ДокументОбъект = Неопределено Тогда
			
			ДокументОбъект.СформироватьДокументКорректировки(ДокументКорректировкиСсылка);
			
			// Проинформируем пользователя об успешно сформировнном документе корректировки.
			Если Не ДокументКорректировкиСсылка = Неопределено Тогда
				
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Сформирован документ """ + ДокументКорректировкиСсылка + """");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Процедура записывает в строку со счетчиком предыдущие показания и данные по среднему расходу.
//
// Параметры:
//  ТекущиеДанные - ДанныеФормыЭлементДерева - Данные текущей строки дерева показаний.
//
Процедура ОбновитьПоказанияСчетчика(ТекущиеДанные)
	
	ПоказанияСчетчика = ПолучитьПредыдущиеПоказанияСчетчика(ТекущиеДанные.Счетчик, ТекущиеДанные.ДатаПоказания);
	
	ТекущиеДанные.ДневноеПоказаниеПредыдущее   = ПоказанияСчетчика.ДневноеПоказаниеПредыдущее;
	ТекущиеДанные.НочноеПоказаниеПредыдущее    = ПоказанияСчетчика.НочноеПоказаниеПредыдущее;
	ТекущиеДанные.ПиковоеПоказаниеПредыдущее   = ПоказанияСчетчика.ПиковоеПоказаниеПредыдущее;
	ТекущиеДанные.ДатаПредыдущегоПоказания     = ПоказанияСчетчика.ДатаПредыдущегоПоказания;
	ТекущиеДанные.ПредыдущееПоказаниеНачальное = ПоказанияСчетчика.ПредыдущееПоказаниеНачальное;
	ТекущиеДанные.Тарифность                   = ПоказанияСчетчика.Тарифность;
	ТекущиеДанные.СпособРегистрацииПоказаний   = ПоказанияСчетчика.СпособРегистрацииПоказаний;
	ТекущиеДанные.Разрядность                  = ПоказанияСчетчика.Разрядность;
	
	ТекущиеДанные.ДневноеПоказаниеРасход = УПЖКХ_ВводПоказанийПриборовУчетаКлиентСервер.ПолучитьРасходПоСтрокеСчетчика(ТекущиеДанные, "ДневноеПоказание");
	ТекущиеДанные.НочноеПоказаниеРасход  = УПЖКХ_ВводПоказанийПриборовУчетаКлиентСервер.ПолучитьРасходПоСтрокеСчетчика(ТекущиеДанные, "НочноеПоказание");
	ТекущиеДанные.ПиковоеПоказаниеРасход = УПЖКХ_ВводПоказанийПриборовУчетаКлиентСервер.ПолучитьРасходПоСтрокеСчетчика(ТекущиеДанные, "ПиковоеПоказание");
	
	СтруктураСреднихРасходов = ПолучитьСреднийРасход(ТекущиеДанные.Счетчик, ТекущиеДанные.ДатаПоказания);// Структура: "Дневной", "Ночной", "Пиковый".
	
	ТекущиеДанные.СреднийРасходДневной = СтруктураСреднихРасходов.Дневной;
	ТекущиеДанные.СреднийРасходНочной  = СтруктураСреднихРасходов.Ночной;
	ТекущиеДанные.СреднийРасходПиковый = СтруктураСреднихРасходов.Пиковый;
	ТекущиеДанные.ПоказанияКорректны   = Ложь;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С МЕТОДАМИ МОДУЛЯ ОБЪЕКТА

#Область РаботаСМетодамиМодуляОбработки

&НаСервере
// Функция возвращает настройки загрузки файла.
Функция ПолучитьНастройкиЗагрузкиФайлаНаСервере()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Возврат ОбработкаОбъект.ПолучитьНастройкиЗагрузкиФайла(Объект.Организация);
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтруктураЗначенийПолей = Справочники.КВП_НастройкиЗагрузкиВыгрузки.ПодговитьСтруктуруЗначенийПолей();
	
	// Получение параметра использования контроля введенных показаний ПУ.
	ИспользуетсяКонтрольПоказанийПриборовУчета = УПЖКХ_ПараметрыУчетаСервер.ИспользоватьКонтрольПоказанийПриборовУчета();
	
	Если Объект.Организация.Пустая() Тогда
		Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьОсновнуюОрганизацию();
	КонецЕсли;
	
	Попытка
		ВременнаяТаб = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("КВП_ЗагрузкаРеестраПоказанийСчетчиковСтрокаНастроек");
		Если ВременнаяТаб.Количество() = 0 ИЛИ ВременнаяТаб.Количество() <> 2 Тогда
			СтрокаТабл = Объект.НастройкаЗаполнения.Добавить();
			СтрокаТабл.Документ = "Ввод показаний счетчика";
			СтрокаТабл.Пометка = Истина;
			УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("КВП_ЗагрузкаРеестраПоказанийСчетчиковСтрокаНастроек", ,
			Объект.НастройкаЗаполнения.Выгрузить());
		Иначе
			Объект.НастройкаЗаполнения.Загрузить(ВременнаяТаб);
		КонецЕсли;
	Исключение
		СтрокаТабл = Объект.НастройкаЗаполнения.Добавить();
		СтрокаТабл.Документ = "Ввод показаний счетчика";
		СтрокаТабл.Пометка  = Истина;
	КонецПопытки;
	
	ЗаполнитьНастройкиЗагрузкиФайла();
	
	ОбновитьВариантНастройкиФорматаРеестра();
	
	// Установка условного оформления формы, вместо настройки оформления через свойства формы.
	// Это реализовано для обслуживания условного оформления.
	УПЖКХ_ВводПоказанийПриборовУчетаСервер.УстановитьУсловноеОформление(ЭтаФорма);
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиенте();
	
	// Управление элементами контроля показаний.
	ПриОткрытииФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	Файл = ДополнительныеПараметры.Файл;
	
	ОчиститьПоле = Ложь;
	
	Если НЕ Существует Тогда
		ОчиститьПоле = Истина;
	Иначе
		ПараметрыОповещения = Новый Структура("Файл, ОчиститьПоле", Файл, ОчиститьПоле);
		Файл.НачатьПроверкуЭтоКаталог(Новый ОписаниеОповещения("ПроверкаНаКаталогЗавершение", ЭтотОбъект, ПараметрыОповещения));
		Возврат;
	КонецЕсли;
	
	Если ОчиститьПоле Тогда
		Объект.ИмяФайлаЗагрузки = "";
	КонецЕсли;
	
	ПриОткрытииФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытииФрагмент()
	
	УПЖКХ_ВводПоказанийПриборовУчетаКлиент.УправлениеЭлементамиКонтроляПоказаний(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаНаКаталогЗавершение(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Файл = ДополнительныеПараметры.Файл;
	ОчиститьПоле = ДополнительныеПараметры.ОчиститьПоле;
	
	Если ЭтоКаталог Тогда
		ОчиститьПоле = Истина;
	ИначеЕсли Нрег(СтрЗаменить(Файл.Расширение, ".", "")) <> Нрег(УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.ФорматФайлаЗагрузки, "ФорматФайла")) Тогда
		ОчиститьПоле = Истина;
	КонецЕсли;
	
	Если ОчиститьПоле Тогда
		Объект.ИмяФайлаЗагрузки = "";
	КонецЕсли;
	
	ПриОткрытииФрагмент();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "НастройкиЗагрузки_Обновить" Тогда
		
		Если Не ЗаполнитьНастройкиЗагрузкиФайла() Тогда
			ТекстВопроса = "Для организации " + Объект.Организация
			+ " не настроены параметры загрузки файла."
			+ Символы.ПС
			+ "Настроить?";
			ДопПараметры = Новый Структура("Параметр", Параметр);
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаОбработкаОповещения", ЭтаФорма, ДопПараметры),
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;
		
		ОбработкаОповещенияФрагмент(Параметр);
		
	ИначеЕсли ИмяСобытия = "ОбновленыНастройкиЗагрузкиВыгрузки"
			И Источник = ЭтаФорма
			И Параметр.Свойство("Ключ") Тогда
		
		Объект.ФорматФайлаЗагрузки = Параметр.Ключ;
		ОбновитьОтображениеДанных(Элементы.ПолеФорматФайла);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

&НаКлиенте
// Процедура вызывает обновление настроек.
Процедура ОбработкаОповещенияФрагмент(Параметр)
	
	Если ЗначениеЗаполнено(Параметр) Тогда
		ОбновитьНастройкуЗаполненияНаСервере(Параметр);
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещенияФрагмент()

&НаКлиенте
// Обработка результата вопроса, вызванного в процедуре "ОбработкаОповещения()".
Процедура ОбработатьРезультатВопросаОбработкаОповещения(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ФормаНастройки = ПолучитьФорму("Обработка.КВП_ЗагрузкаРеестраПоказанийСчетчиков.Форма.ФормаНастройкиЗаполнения",
		Новый Структура("ДанныеОбъекта", Объект),
		ЭтаФорма);
		ФормаНастройки.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОбработатьРезультатЗакрытияФормыНастройкиОбработкаОповещения", ЭтаФорма);
		ФормаНастройки.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		ФормаНастройки.Открыть();
		Возврат;
	Иначе
		Объект.ФорматФайлаЗагрузки = "";
		Объект.ИмяФайлаЗагрузки    = "";
	КонецЕсли;
	
	ОбработкаОповещенияФрагмент(ДопПараметры.Параметр);
	
КонецПроцедуры // ОбработатьРезультатВопросаОбработкаОповещения()

&НаКлиенте
// Обработчик результата закрытия формы настройки, вызванной в процедуре "ОбработатьРезультатВопросаОбработкаОповещения()".
Процедура ОбработатьРезультатЗакрытияФормыНастройкиОбработкаОповещения(Результат, ДопПараметры) Экспорт
	
	ОбработкаОповещенияФрагмент(ДопПараметры.Параметр);
	
КонецПроцедуры // ОбработатьРезультатЗакрытияФормыНастройкиОбработкаОповещения()

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьНастройкиНаСервере();
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Организация".
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Не ЗаполнитьНастройкиЗагрузкиФайла() Тогда
		
		ТекстВопроса = "Для организации " + Объект.Организация + " не настроены параметры загрузки файла."
		+ Символы.ПС + "Настроить?";
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаОрганизацияПриИзменении", ЭтаФорма),
		ТекстВопроса,
		РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ОрганизацияПриИзмененииПродолжение();
	
КонецПроцедуры // ОрганизацияПриИзменении()

&НаКлиенте
// Обработчик результата выопроса, вызванного в процедуре "ОрганизацияПриИзменении()".
Процедура ОбработатьРезультатВопросаОрганизацияПриИзменении(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОткрытьФорму("Обработка.КВП_ЗагрузкаРеестраПоказанийСчетчиков.Форма.ФормаНастройкиЗаполнения",
		Новый Структура("ДанныеОбъекта", Объект),
		ЭтаФорма,,,,
		Новый ОписаниеОповещения("ОбработатьРезультатЗакрытияФормыНастройки", ЭтаФорма),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		Объект.ФорматФайлаЗагрузки = "";
		Объект.ИмяФайлаЗагрузки    = "";
		ОрганизацияПриИзмененииПродолжение();
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаОрганизацияПриИзменении()

&НаКлиенте
// Обработчик результата закрытия формы настройки, вызваного в
// процедуре "ОбработатьРезультатВопросаОрганизацияПриИзменении()".
Процедура ОбработатьРезультатЗакрытияФормыНастройки(Результат, ДопПараметры) Экспорт
	
	ОрганизацияПриИзмененииПродолжение();
	
КонецПроцедуры // ОбработатьРезультатЗакрытияФормыНастройки()

&НаКлиенте
// Продолжение процедуры "ОрганизацияПриИзменении()".
Процедура ОрганизацияПриИзмененииПродолжение()
	
	СтрокиДерева = ДеревоПоказаний.ПолучитьЭлементы();
	
	Если СтрокиДерева.Количество() = 0 Тогда
		УправлениеФормой();
	КонецЕсли;
	
КонецПроцедуры // ОрганизацияПриИзмененииПродолжение()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ФорматФайлаЗагрузки".
Процедура ФорматФайлаЗагрузкиПриИзменении(Элемент)
	
	УправлениеФормой();
	
	ОбновитьВариантНастройкиФорматаРеестра();
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматФайлаЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения   = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыСправочникаНастройкиЗагрузкиВыгрузки", ЭтаФорма);
	СтруктураПараметров  = Новый Структура("Ключ, ТипОбъектаОткрытияФормы", Объект.ФорматФайлаЗагрузки, ТипЗнч(Объект));
	
	ОткрытьФорму("Справочник.КВП_НастройкиЗагрузкиВыгрузки.Форма.ФормаЭлемента", СтруктураПараметров, ЭтаФорма,,,, ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматФайлаЗагрузкиСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения   = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыСправочникаНастройкиЗагрузкиВыгрузки", ЭтаФорма);
	ЗначенияЗаполнения   = Новый Структура("ВидОперации", ПредопределенноеЗначение("Перечисление.КВП_ВидыНастроекЗагрузкиИзАС.ЗагрузкаИзСистемСбораПоказанийПриборовУчета"));
	
	СтруктураПараметров  = Новый Структура;
	СтруктураПараметров.Вставить("Ключ",                    Неопределено);
	СтруктураПараметров.Вставить("ЗначенияЗаполнения",      ЗначенияЗаполнения);
	СтруктураПараметров.Вставить("ТипОбъектаОткрытияФормы", ТипЗнч(Объект));
	
	ОткрытьФорму("Справочник.КВП_НастройкиЗагрузкиВыгрузки.Форма.ФормаЭлемента", СтруктураПараметров, ЭтаФорма,,,, ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ФорматФайлаЗагрузки".
Процедура ФорматФайлаЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачЗначениеФорматФайлаЗагрузки = Объект.ФорматФайлаЗагрузки;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("ВидОперации", ПредопределенноеЗначение("Перечисление.КВП_ВидыНастроекЗагрузкиИзАС.ЗагрузкаИзСистемСбораПоказанийПриборовУчета"));
	
	ФормаВыбораФормата = ПолучитьФорму(	"Справочник.КВП_НастройкиЗагрузкиВыгрузки.ФормаВыбора",
										Новый Структура("Отбор, ТекущаяСтрока", СтруктураОтбора, Объект.ФорматФайлаЗагрузки), Элемент);
	
	ФормаВыбораФормата.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения(	"ОбработатьРезультатВыбораНастройкиЗагрузки",
																				ЭтаФорма,
																				НачЗначениеФорматФайлаЗагрузки);
	ФормаВыбораФормата.Открыть();
	
КонецПроцедуры // ФорматФайлаЗагрузкиНачалоВыбора()

&НаКлиенте
// Обработчик результата закрытия формы выбора справочника "Настройки загрузки",
// вызванного в процедуре "Настр_ФорматФайлаЗагрузкиНачалоВыбора()".
Процедура ОбработатьРезультатВыбораНастройкиЗагрузки(ВыбранноеЗначение, ДопПараметры) Экспорт
	
	Если НЕ ВыбранноеЗначение = Неопределено
		И НЕ ВыбранноеЗначение.Пустая() Тогда
		
		Объект.ФорматФайлаЗагрузки = ВыбранноеЗначение;
		
		НачЗначениеФорматФайлаЗагрузки = ДопПараметры;
		
		Объект.ФорматФайлаЗагрузки = ВыбранноеЗначение;
		
		Если УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "ФорматФайла") <> 
			УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(НачЗначениеФорматФайлаЗагрузки, "ФорматФайла") Тогда
			Объект.ИмяФайлаЗагрузки = "";
		КонецЕсли;
		
		ОбновитьВариантНастройкиФорматаРеестра();
		
		СтрокиДерева = ДеревоПоказаний.ПолучитьЭлементы();
		Если СтрокиДерева.Количество() = 0 Тогда
			УправлениеФормой();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВыбораНастройкиЗагрузки()

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ИмяФайлаЗагрузки".
Процедура ИмяФайлаЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.ФорматФайлаЗагрузки.Пустая() Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не выбран формат файла загрузки.");
		Возврат;
	КонецЕсли;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ФорматФайла     = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.ФорматФайлаЗагрузки, "ФорматФайла");
	СпФорматовФайла = СтруктураЗначенийПолей.СпФорматовФайла;
	
	Если ФорматФайла = СпФорматовФайла[0].Значение Тогда // "TXT"
		ДиалогВыбораФайла.Фильтр		= "Файл данных (*.txt)|*.txt";
		ДиалогВыбораФайла.Расширение	= "txt";
	ИначеЕсли ФорматФайла = СпФорматовФайла[1].Значение Тогда // "XLS"
		ДиалогВыбораФайла.Фильтр		= "Файл данных (*.xls, *.xlsx)|*.xls;*.xlsx";
		ДиалогВыбораФайла.Расширение	= "xls";
	ИначеЕсли ФорматФайла = СпФорматовФайла[2].Значение Тогда // "CSV"
		ДиалогВыбораФайла.Фильтр		= "Файл данных (*.csv)|*.csv";
		ДиалогВыбораФайла.Расширение	= "csv";
	ИначеЕсли ФорматФайла = СпФорматовФайла[3].Значение Тогда // "XML"
		ДиалогВыбораФайла.Фильтр		= "Файл данных (*.xml)|*.xml";
		ДиалогВыбораФайла.Расширение	= "xml";
	ИначеЕсли ФорматФайла = СпФорматовФайла[4].Значение Тогда // "DBF"
		ДиалогВыбораФайла.Фильтр		= "Файл данных (*.dbf)|*.dbf";
		ДиалогВыбораФайла.Расширение	= "dbf";
	КонецЕсли;
	
	ДиалогВыбораФайла.Заголовок						= "Выберите файл";
	ДиалогВыбораФайла.ПредварительныйПросмотр		= Ложь;
	ДиалогВыбораФайла.ИндексФильтра					= 0;
	ДиалогВыбораФайла.ПолноеИмяФайла				= Объект.ИмяФайлаЗагрузки;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ИмяФайлаЗагрузкиНачалоВыбораЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаЗагрузкиНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		Объект.ИмяФайлаЗагрузки = ВыбранныеФайлы[0];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередУдалением" табличного поля "ДеревоПоказаний".
Процедура ДеревоПоказанийПередУдалением(Элемент, Отказ)
	
	ТекущаяСтрока  = Элемент.ТекущиеДанные;
	РодительСтроки = ТекущаяСтрока.ПолучитьРодителя();
	
	Если НЕ РодительСтроки = Неопределено Тогда
		СтрокиДетализации = РодительСтроки.ПолучитьЭлементы();
		КоличествоСтрок   = СтрокиДетализации.Количество();
		
		Если КоличествоСтрок < 3 Тогда
			Для каждого ТекСтрока из СтрокиДетализации Цикл
				Если НЕ ТекСтрока = ТекущаяСтрока Тогда
					РодительСтроки.Объект         = ТекСтрока.Объект;
					РодительСтроки.ИмеетПодстроки = Ложь;
					СтрокиДетализации.Удалить(ТекСтрока);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если РодительСтроки = Неопределено Тогда
		
		// Если в текущей строке были ошибки, то после ее удаления
		// количество строк с ошибками уменьшится на одну.
		Если Не ПустаяСтрока(ТекущаяСтрока.ТипОшибкиДневной)
			Или Не ПустаяСтрока(ТекущаяСтрока.ТипОшибкиНочной)
			Или Не ПустаяСтрока(ТекущаяСтрока.ТипОшибкиПиковый) Тогда
			КоличествоСтрокСОшибками = КоличествоСтрокСОшибками - 1;
		КонецЕсли;
		
		Если (ТекущаяСтрока.ПереходЧерезНольДневное Или ТекущаяСтрока.ПереходЧерезНольНочное Или ТекущаяСтрока.ПереходЧерезНольПиковое) Тогда
			КоличествоСтрокПереходаЧерезНоль = КоличествоСтрокПереходаЧерезНоль - 1;
		КонецЕсли;
		
		Если ТекущаяСтрока.ТипОшибкиДневной = "Отрицательный расход" ИЛИ ТекущаяСтрока.ТипОшибкиНочной = "Отрицательный расход"
			ИЛИ ТекущаяСтрока.ТипОшибкиПиковый = "Отрицательный расход" Тогда
			КоличествоСтрокСОтрицательнымРасходом = КоличествоСтрокСОтрицательнымРасходом - 1;
		КонецЕсли;
		
	КонецЕсли;
	
	// После удаления нужно будет спозиционироваться на следующей строке с ошибкой или первой, если следующей нет.
	Если ОтображатьТолькоСтрокиСОшибками Тогда
		АдресХранилищаИдентификатораИсходнойСтрокиДляОтбораСтрокСОшибками = ПоместитьВоВременноеХранилище(ТекущаяСтрока.ПолучитьИдентификатор(), Новый УникальныйИдентификатор);
	КонецЕсли;
	
	// Управление элементами контроля показаний.
	УПЖКХ_ВводПоказанийПриборовУчетаКлиент.УправлениеЭлементамиКонтроляПоказаний(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПоказанийПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	УПЖКХ_ВводПоказанийПриборовУчетаКлиент.ПоместитьДанныеОТекущейСтрокеВХранилище(Элемент.ТекущиеДанные, АдресХранилищаДанныхСтроки);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОкончанииРедактирования" табличного поля "ДеревоПоказаний".
Процедура ДеревоПоказанийПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УПЖКХ_ВводПоказанийПриборовУчетаКлиент.ОбработатьОкончаниеРедактированияДерева(Элемент.ТекущиеДанные, НоваяСтрока, АдресХранилищаДанныхСтроки);
	
	НеобходимоПереместитьКурсор = Ложь;
	
	УПЖКХ_ВводПоказанийПриборовУчетаКлиент.ПроверитьПоказания(ЭтаФорма, НеобходимоПереместитьКурсор, Истина);
	
	Если НеобходимоПереместитьКурсор Тогда
		ПодключитьОбработчикОжидания("СпозиционироватьКурсорНаПервуюСтрокуСОшибкойПоказаний", 0.1, Истина);
	КонецЕсли;
	
	// Управление элементами контроля показаний.
	УПЖКХ_ВводПоказанийПриборовУчетаКлиент.УправлениеЭлементамиКонтроляПоказаний(ЭтаФорма, , Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПослеУдаления" формы.
Процедура ДеревоПоказанийПослеУдаления(Элемент)
	
	СпозиционироватьКурсорНаПервуюСтрокуСОшибкойПоказаний();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" поля "ДеревоПоказанийДокумент".
//
Процедура ДеревоПоказанийДокументОчистка(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоПоказаний.ТекущиеДанные;
	
	ТекущийДокументСсылка = ТекущиеДанные.Документ;
	
	Если НЕ ТекущийДокументСсылка.Пустая()
		И НЕ УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекущийДокументСсылка, "ПометкаУдаления") Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьВопрос(	Новый ОписаниеОповещения("ОбработатьРезультатВопросаОчисткаДокумента", ЭтаФорма, Элементы.ДеревоПоказаний.ТекущаяСтрока),
		"Пометить документ на удаление и очистить остальные поля с данным документом?",
		РежимДиалогаВопрос.ДаНет,,
		КодВозвратаДиалога.Нет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" табличного поля "ДеревоПоказаний".
Процедура ДеревоПоказанийПриИзменении(Элемент)
	
	ОбновитьНомераСтрок();
	
	ТекущаяСтрока = Элементы.ДеревоПоказаний.ТекущаяСтрока;
	
	Если НЕ ТекущаяСтрока = Неопределено Тогда
		ДанныеСтрокиДерева = ДеревоПоказаний.НайтиПоИдентификатору(ТекущаяСтрока);
		
		Если НЕ ДанныеСтрокиДерева.Документ.Пустая() Тогда
			ДанныеСтрокиДерева.ДокументПроведен = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ДанныеСтрокиДерева.Документ, "Проведен");
		Иначе
			ДанныеСтрокиДерева.ДокументПроведен = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДеревоПоказанийПриИзменении()

&НаКлиенте
// Обработчик события "ПриАктивизацииСтроки" табличного поля "ДеревоПоказаний".
Процедура ДеревоПоказанийПриАктивизацииСтроки(Элемент)
	
	// Управление элементами контроля показаний.
	УПЖКХ_ВводПоказанийПриборовУчетаКлиент.УправлениеЭлементамиКонтроляПоказаний(ЭтаФорма, , Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" табличного поля "ДеревоПоказаний".
Процедура ДеревоПоказанийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ТекущаяСтрока  = Элемент.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		РодительСтроки = Неопределено;
	Иначе
		РодительСтроки = ТекущаяСтрока.ПолучитьРодителя();
	КонецЕсли;
	
	Если Копирование Тогда
		Если РодительСтроки = Неопределено Тогда
			ПодСтроки = ТекущаяСтрока.ПолучитьЭлементы();
			
			НоваяСтрока = ПодСтроки.Добавить();
			НоваяСтрока.Объект             = ТекущаяСтрока.Объект;
			НоваяСтрока.ЯвляетсяПодстрокой = Истина;
			НоваяСтрока.ИмеетПодстроки     = Ложь;
			
			НоваяСтрока = ПодСтроки.Добавить();
			НоваяСтрока.Объект             = ТекущаяСтрока.Объект;
			НоваяСтрока.ИмеетПодстроки     = Ложь;
			
			ТекущаяСтрока.Объект             = Неопределено;
			ТекущаяСтрока.ЯвляетсяПодстрокой = Ложь;
			ТекущаяСтрока.ИмеетПодстроки     = Истина;
		Иначе
			ПодСтроки = РодительСтроки.ПолучитьЭлементы();
			
			НоваяСтрока = ПодСтроки.Добавить();
			НоваяСтрока.Объект             = ТекущаяСтрока.Объект;
			НоваяСтрока.ЯвляетсяПодстрокой = Истина;
			НоваяСтрока.ИмеетПодстроки     = Ложь;
		КонецЕсли;
	Иначе
		Если РодительСтроки = Неопределено Тогда
			ЭлементыВерхнегоУровня    = ДеревоПоказаний.ПолучитьЭлементы();
			НоваяСтрокаВерхнегоУровня = ЭлементыВерхнегоУровня.Добавить();
			НоваяСтрокаВерхнегоУровня.ЯвляетсяПодстрокой = Ложь;
			НоваяСтрокаВерхнегоУровня.ИмеетПодстроки     = Ложь;
		Иначе
			ПодСтроки   = РодительСтроки.ПолучитьЭлементы();
			НоваяСтрока = ПодСтроки.Добавить();
			НоваяСтрока.ЯвляетсяПодстрокой = Истина;
			НоваяСтрока.ИмеетПодстроки     = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьНомераСтрок();
	
КонецПроцедуры // ДеревоПоказанийПередНачаломДобавления()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Счетчик" табличного поля "ДеревоПоказаний".
Процедура ДеревоПоказанийСчетчикПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоПоказаний.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные.Счетчик.Пустая() Тогда
		
		ТекущиеДанные.Услуга = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ТекущиеДанные.Счетчик, "ВидУслуги");
		
		// Обновим предыдущие показания счетчика, а также данные по расходу.
		ОбновитьПоказанияСчетчика(ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "Объект" табличного поля "ДеревоПоказаний".
//
Процедура ДеревоПоказанийОбъектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоПоказаний.ТекущиеДанные;
	Если ТипЗнч(ТекущиеДанные.Объект) = Тип("СправочникСсылка.УПЖКХ_Помещения") Тогда
		СтандартнаяОбработка = Ложь;
		
		ОповещениеОВыбореПомещения = Новый ОписаниеОповещения("ОбработатьВыборПомещения", ЭтотОбъект);
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ПараметрОтборТипПомещения", ПредопределенноеЗначение("Перечисление.КВП_ТипыПомещений.Автоместо"));
		
		ОткрытьФорму("Справочник.УПЖКХ_Помещения.Форма.ФормаВыбора", ПараметрыОткрытия,,,,,ОповещениеОВыбореПомещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ДневноеПоказание" табличного поля "ДеревоПоказаний".
//
Процедура ДеревоПоказанийДневноеПоказаниеПриИзменении(Элемент)
	
	УПЖКХ_ВводПоказанийПриборовУчетаКлиент.ОбработатьИзменениеДневногоПоказания(АдресХранилищаДанныхСтроки, Элементы.ДеревоПоказаний.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" полей показаний дерева показаний.
//
Процедура ДеревоПоказанийДневноеПоказаниеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УПЖКХ_ВводПоказанийПриборовУчетаКлиент.ОбработатьОчисткуДневногоПоказания(Элементы.ДеревоПоказаний.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "НочноеПоказание" табличного поля "ДеревоПоказаний".
//
Процедура ДеревоПоказанийНочноеПоказаниеПриИзменении(Элемент)
	
	УПЖКХ_ВводПоказанийПриборовУчетаКлиент.ОбработатьИзменениеНочногоПоказания(АдресХранилищаДанныхСтроки, Элементы.ДеревоПоказаний.ТекущиеДанные);
	
	//ТекДанные = Элементы.ДеревоПоказаний.ТекущиеДанные;
	//
	//СтруктураПоказаний = Новый Структура("НомерСтроки, Счетчик, НочноеПоказание, НочноеПоказаниеПредыдущее",
	//									  ТекДанные.НомерСтроки, ТекДанные.Счетчик, ТекДанные.НочноеПоказание, ТекДанные.НочноеПоказаниеПредыдущее);
	//
	//Если Не УПЖКХ_ВводПоказанийПриборовУчетаСервер.ПроверитьКорректностьПоказанийСчетчика(СтруктураПоказаний) Тогда
	//	ТекДанные.НочноеПоказание = 0;
	//КонецЕсли;
	//
	//ТекДанные.НочноеПоказаниеРасход = УПЖКХ_ВводПоказанийПриборовУчетаСервер.ПолучитьРасходПоСтрокеСчетчика(СтруктураПоказаний, "НочноеПоказание");
	//
	// СтруктураСреднихРасходов = ПолучитьСреднийРасход(ТекДанные.Счетчик, ТекДанные.ДатаПоказания);// Структура: "Дневной", "Ночной", "Пиковый".
	//
	//ТекДанные.СреднийРасходНочной = СтруктураСреднихРасходов.Ночной;
	//ТекДанные.ПоказанияКорректны   = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" полей показаний дерева показаний.
//
Процедура ДеревоПоказанийНочноеПоказаниеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УПЖКХ_ВводПоказанийПриборовУчетаКлиент.ОбработатьОчисткуНочногоПоказания(Элементы.ДеревоПоказаний.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПиковоеПоказание" табличного поля "ДеревоПоказаний".
//
Процедура ДеревоПоказанийПиковоеПоказаниеПриИзменении(Элемент)
	
	УПЖКХ_ВводПоказанийПриборовУчетаКлиент.ОбработатьИзменениеПиковогоПоказания(АдресХранилищаДанныхСтроки, Элементы.ДеревоПоказаний.ТекущиеДанные);
	
	//ТекДанные = Элементы.ДеревоПоказаний.ТекущиеДанные;
	//
	//СтруктураПоказаний = Новый Структура("НомерСтроки, Счетчик, ПиковоеПоказание, ПиковоеПоказаниеПредыдущее",
	//									  ТекДанные.НомерСтроки, ТекДанные.Счетчик, ТекДанные.ПиковоеПоказание, ТекДанные.ПиковоеПоказаниеПредыдущее);
	//
	//Если Не УПЖКХ_ВводПоказанийПриборовУчетаСервер.ПроверитьКорректностьПоказанийСчетчика(СтруктураПоказаний) Тогда
	//	ТекДанные.ПиковоеПоказание = 0;
	//КонецЕсли;
	//
	//ТекДанные.ПиковоеПоказаниеРасход = УПЖКХ_ВводПоказанийПриборовУчетаСервер.ПолучитьРасходПоСтрокеСчетчика(СтруктураПоказаний, "ПиковоеПоказание");
	//
	// СтруктураСреднихРасходов = ПолучитьСреднийРасход(ТекДанные.Счетчик, ТекДанные.ДатаПоказания);// Структура: "Дневной", "Ночной", "Пиковый".
	//
	//ТекДанные.СреднийРасходПиковый = СтруктураСреднихРасходов.Пиковый;
	//ТекДанные.ПоказанияКорректны   = Ложь;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" полей показаний дерева показаний.
//
Процедура ДеревоПоказанийПиковоеПоказаниеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УПЖКХ_ВводПоказанийПриборовУчетаКлиент.ОбработатьОчисткуПиковогоПоказания(Элементы.ДеревоПоказаний.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ДатаПоказания" табличного поля "ДеревоПоказаний".
//
Процедура ДеревоПоказанийДатаПоказанияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоПоказаний.ТекущиеДанные;
	
	Если НЕ ТекущиеДанные.Счетчик.Пустая() Тогда
		
		// Обновим предыдущие показания счетчика, а также данные по расходу.
		ОбновитьПоказанияСчетчика(ТекущиеДанные);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "Настройка".
Процедура Настройка(Команда)
	
	Если Объект.Организация.Пустая() Тогда
		ПоказатьПредупреждение(Неопределено, "Не указана организация.");
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Обработка.КВП_ЗагрузкаРеестраПоказанийСчетчиков.Форма.ФормаНастройкиЗаполнения",
	
	Новый Структура("ДанныеОбъекта, РасширениеПодключено", Объект, РасширениеПодключено),
		ЭтаФорма,,,,
	Новый ОписаниеОповещения("ОбработатьРезультатзакрытияФормыНастройка", ЭтаФорма),
	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // Настройка()

&НаКлиенте
// Обработчик результата закрытия формы настройки, вызванного в процедуре "Настройка()".
Процедура ОбработатьРезультатзакрытияФормыНастройка(Результат, ДопПараметры) Экспорт
	
	УправлениеФормой();
	
КонецПроцедуры // ОбработатьРезультатзакрытияФормыНастройка()

&НаКлиенте
// Обработчик команды "ЗагрузитьРеестр".
Процедура КомандаЗагрузитьРеестр(Команда)
	
	Если Объект.ФорматФайлаЗагрузки.Пустая() Тогда
		Настройка(ЭтаФорма.Команды.Найти("Настройка"));
		ПоказатьПредупреждение(Неопределено, "Не выбран формат файла загрузки!");
		Возврат;
	КонецЕсли;
	
	Если РасширениеПодключено Тогда
		ФайлНаДиске = Новый Файл(Объект.ИмяФайлаЗагрузки);
		ФайлНаДиске.НачатьПроверкуСуществования(Новый ОписаниеОповещения("КомандаЗагрузитьРеестрЗавершение", ЭтотОбъект, Новый Структура("ФайлНаДиске", ФайлНаДиске)));
	Иначе 
		ЗадатьВопросОбочисткеТабличнойЧасти();
		КомандаЗагрузитьРеестрПродолжение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Вызывает диалог с вопросом об очистке табличной части.
//
Процедура ЗадатьВопросОбочисткеТабличнойЧасти() Экспорт
	
	ТаблицаРеестра = ДеревоПоказаний.ПолучитьЭлементы();
	Если ТаблицаРеестра.Количество() > 0 Тогда
		ДопПараметры = Новый Структура("ТаблицаРеестра", ТаблицаРеестра);
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаОчиститьТЧКомандаЗагрузитьРеестр", ЭтаФорма, ДопПараметры),
		"Табличная часть будет очищена. Продолжить?",
		РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
// Продолжение процедуры "КомандаЗагрузитьРеестр()".
//
Процедура КомандаЗагрузитьРеестрЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	ФайлНаДиске = ДополнительныеПараметры.ФайлНаДиске;
	
	Если Не Существует Тогда
		ПоказатьПредупреждение(Неопределено, "Файл реестра не найден!");
		Возврат;
	КонецЕсли;
	
	ФорматФайла = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.ФорматФайлаЗагрузки, "ФорматФайла");
	
	РасширениеФайлаРеестра = НРег(СтрЗаменить(ФайлНаДиске.Расширение, ".", ""));
	
	Отказ = Ложь;
	Если ФорматФайла = СтруктураЗначенийПолей.СпФорматовФайла[1].Значение Тогда // "XLS"
		Если РасширениеФайлаРеестра <> "xlsx" И РасширениеФайлаРеестра <> "xls" Тогда
			Отказ = Истина;
		КонецЕсли;
	ИначеЕсли РасширениеФайлаРеестра <> НРег(ФорматФайла) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Формат файла загрузки не соответствует формату файла реестра.");
		Возврат;
	КонецЕсли;
	
	ЗадатьВопросОбочисткеТабличнойЧасти();
	
	КомандаЗагрузитьРеестрПродолжение();
	
КонецПроцедуры // КомандаЗагрузитьРеестр()

&НаКлиенте
// Обработка результата вопроса, вызваного в процедуре "КомандаЗагрузитьРеестр()".
Процедура ОбработатьРезультатВопросаОчиститьТЧКомандаЗагрузитьРеестр(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ДопПараметры.ТаблицаРеестра.Очистить();
	
	КомандаЗагрузитьРеестрПродолжение();
	
КонецПроцедуры // ОбработатьРезультатВопросаОчиститьТЧКомандаЗагрузитьРеестр()

&НаКлиенте
// Продолжение процедуры "КомандаЗагрузитьРеестр()".
Процедура КомандаЗагрузитьРеестрПродолжение()
	
	ИнициализацияРеквизитов();
	УправлениеФормой();
	ЗагрузитьРеестр();
	
	УПЖКХ_ВводПоказанийПриборовУчетаКлиент.ПроверитьПоказания(ЭтаФорма);
	
	// Управление элементами контроля показаний.
	УПЖКХ_ВводПоказанийПриборовУчетаКлиент.УправлениеЭлементамиКонтроляПоказаний(ЭтаФорма);
	
		
КонецПроцедуры // КомандаЗагрузитьРеестрПродолжение()

&НаКлиенте
// Обработчик команды "УстановитьФлажки".
Процедура УстановитьФлажки(Команда)
	
	СтрокиВерхнегоУровня = ДеревоПоказаний.ПолучитьЭлементы();
	
	Для Каждого Строка Из СтрокиВерхнегоУровня Цикл
		Строка.Использовать = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "СнятьФлажки".
Процедура СнятьФлажки(Команда)
	
	СтрокиВерхнегоУровня = ДеревоПоказаний.ПолучитьЭлементы();
	
	Для Каждого Строка Из СтрокиВерхнегоУровня Цикл
		Строка.Использовать = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "УстановитьДату".
Процедура УстановитьДату(Команда)
	
	тмДатаПоказаний = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ОбработатьВводДаты", ЭтаФорма),
	тмДатаПоказаний,
	"Укажите дату показаний");
	
КонецПроцедуры // УстановитьДату()

&НаКлиенте
// Обработчик команды "Сформировать документы".
Процедура СформироватьДокументы(Команда)
	
	СтрокиРеестра = ДеревоПоказаний.ПолучитьЭлементы();
	
	Если СтрокиРеестра.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.НастройкаЗаполнения.Количество() = 0 
		ИЛИ Объект.НастройкаЗаполнения[0].Пометка = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение ТЧ
	ЗаполнитьТаблицуРеестраИзДерева();
	
	// В массиве будут храниться ссылки на документы корректировки.
	МассивСсылокДокументовДляСозданияКорректировки = Новый Массив;
	
	СформироватьДокументыВводаПоказаний(МассивСсылокДокументовДляСозданияКорректировки);
	
	// Уточним у пользователя нужно ли для документов "Ввод показаний счетчика"
	// с видом операции "Ввод показаний счетчика на лицевой счет" и "Ввод показаний счетчика на помещение",
	// имеющих строки с отрицательным расходом, формировать документы корректировки.
	Если МассивСсылокДокументовДляСозданияКорректировки.Количество() > 0 Тогда
		
		ТекстВопроса = "В сформированных документах обнаружены строки с отрицательным расходом.
		|Сформировать документы ""Корректировка начислений""?";
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьОтветНаВопросОФормированииКорректировки", ЭтотОбъект, МассивСсылокДокументовДляСозданияКорректировки);
		ПоказатьВопрос(ОповещениеОЗакрытии, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьДокументы()

&НаКлиенте
// В процедуре обрабатывается ответ пользователя о необходимости формирования документа корректировки.
//
Процедура ОбработатьОтветНаВопросОФормированииКорректировки(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		СформироватьДокументКорректировкиНаСервере(ДопПараметры);
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьДокументы()

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

&НаКлиенте
// Обработчик команды "ОтображатьТолькоСтрокиСОшибками".
Процедура ОтображатьТолькоСтрокиСОшибками(Команда)
	
	// Изменим признак отбора строк с ошибками.
	// Непосредственное управление отбором осуществляется с помощью условного оформления,
	// так как дерево значений не поддерживает платформенные методы отбора строк.
	ОтображатьТолькоСтрокиСОшибками = Не ОтображатьТолькоСтрокиСОшибками;
	
	// Управление пометкой кнопки отбора только строк с ошибками.
	Элементы.ДеревоПоказанийКомандаОтображатьТолькоСтрокиСОшибками.Пометка = ОтображатьТолькоСтрокиСОшибками;
	
	// Для того, чтобы всегда корректно отображалась шапка дерева,
	// нужно в качестве текущей строки установить первую строку с ошибкой.
	Если ОтображатьТолькоСтрокиСОшибками Тогда
		
		СпозиционироватьКурсорНаПервуюСтрокуСОшибкойПоказаний();
		
	КонецЕсли;
	
КонецПроцедуры

// СхемыУчета
&НаКлиенте
// Подключаемый обработчик команды перехода к схеме учета.
Процедура Подключаемый_ОткрытьСхемуУчета(Команда)
	
	ОТР_СхемыУчетаКлиент.Подключаемый_ОткрытьСхемуУчета(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РАБОТЫ С ФАЙЛАМИ

#Область СлужебныеПроцедурыРаботыСФайлами

&НаКлиенте
// Определяет подключено ли расширение для работы с файлами.
Процедура ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиенте()
	
	ОповещениеЗавершения = Новый ОписаниеОповещения("ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиентеЗавершение", ЭтотОбъект);
	
	УПЖКХ_РаботаСФайламиКлиент.ОпределитьВидВзаимодействияСФайловойСистемой(ОповещениеЗавершения);
	
КонецПроцедуры // ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиентеЗавершение()

&НаКлиенте
// Обработчик процедуры определяющей подключено расширение работы с файлами или нет.
Процедура ОпределитьПодключеноЛиРасширениеДляРаботыСФайламиВВебКлиентеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат Тогда
		РасширениеПодключено = Результат;
		
		Если НЕ ПустаяСтрока(Объект.ИмяФайлаЗагрузки) Тогда
			Файл = Новый Файл(Объект.ИмяФайлаЗагрузки);
			Файл.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ПриОткрытииЗавершение", ЭтотОбъект, Новый Структура("Файл", Файл)));
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры

#КонецОбласти
