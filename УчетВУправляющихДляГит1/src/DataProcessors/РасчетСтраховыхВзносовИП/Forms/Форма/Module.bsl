
&НаКлиенте
Перем ПараметрыОбработчикаОжиданияАктуализации;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЦветПодсветки = ЦветаСтиля.ВыборСтандартногоПериодаФонКнопки;
	
	ТекущийПериод = ?(ЗначениеЗаполнено(Параметры.ПериодСобытия), Параметры.ПериодСобытия, КонецКвартала(ОбщегоНазначения.ТекущаяДатаПользователя()));
	
	// Помощник открыт по публикуемой навигационной ссылке. Период передан в параметре "КонецПериода".
	Если ЗначениеЗаполнено(Параметры.КонецПериода) И Параметры.КонтекстныйВызов Тогда
		ТекущийПериод = КонецКвартала(Параметры.КонецПериода);
	КонецЕсли;
	
	Объект.Период = ТекущийПериод;
	
	ДатаСеанса = ТекущаяДатаСеанса();
	
	КонтекстныйВызов = Параметры.КонтекстныйВызов;
	
	Объект.Организация = Параметры.Организация;
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		
		ОсновнаяОрганизация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		
		Если ЗначениеЗаполнено(ОсновнаяОрганизация) И Не ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(ОсновнаяОрганизация) Тогда
			Объект.Организация = ОсновнаяОрганизация;
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверка реквизитов для отчетности
	ТекстДействия = НСтр("ru='уплатить фиксированные страховые взносы'");
	СообщениеТребуютсяРеквизиты = 
		ПроверкаРеквизитовОрганизации.СтрокаСообщенияНеЗаполненыРеквизитыДляОтчетности(Объект.Организация, ТекстДействия);
	ПроверитьРеквизитыОрганизацииДляОтчетности();
	
	ВыполнениеЗадачиКалендаря = ЗначениеЗаполнено(Параметры.Правило);
	Если ВыполнениеЗадачиКалендаря Тогда
		Правило = Параметры.Правило;
		Срок    = Параметры.Срок;
	Иначе
		ПорядокУплаты = ВыполнениеЗадачБухгалтера.ПорядокУплатыНалога(Объект.Организация, КонецКвартала(Объект.Период),
			Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть);
		Правило = ПорядокУплаты.Правило;
		Срок    = ПорядокУплаты.Срок;
	КонецЕсли;
	
	Если Не ПустаяСтрока(Параметры.Заголовок) Тогда
		Заголовок = Параметры.Заголовок;
	КонецЕсли;
	
	ИнтерфейсИнтеграцииСБанками = ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком();
	ПоказыватьКомандыОплаты = ПомощникиПоУплатеНалоговИВзносов.ПоказыватьКомандыОплаты();
	
	ОрганизацияПредставление = Объект.Организация;
	
	СчетОрганизации = БанковскийСчетОрганизации(Объект.Организация);
	
	НастроенПрямойОбменСБанком = НастроенПрямойОбменСБанком(Объект.Организация, СчетОрганизации);
	
	ПредупрежденияЗагрузкиВыписки = 
		НайтиПредупрежденияПриЗагрузкеВыписки(Объект.Организация, НачалоГода(Объект.Период), КонецКвартала(Объект.Период));
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПредупрежденияЗагрузкиВыписки);
	
	УстановитьФункциональныеОпцииФормы();
	
	ПолучитьСведенияОСверке();
	
	РассчитатьСтраховыеВзносыКУплате();
	
	УправлениеФормойНаСервере();
	
	ТекущийЭлемент = Элементы.ОплатитьСБанковскогоСчета;
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Обработка.РасчетСтраховыхВзносовИП",
		"Форма",
		НСтр("ru='Новости: Уплата фиксированных страховых взносов'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ПередНачаломДлительнойОперации();
	
	ЗапуститьОбновлениеБаннераСостоянияОтправки();
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеВыписки" Тогда
		
		ОбработкаОповещенияИзменениеВыписки();
		ЗапуститьОбновлениеБаннераСостоянияОтправки();
		
	ИначеЕсли ИмяСобытия = "Запись_Организации"
		И Объект.Организация = Источник Тогда
		
		ПроверитьРеквизитыОрганизацииДляОтчетности();
		
	ИначеЕсли ИмяСобытия = "Запись_ПлатежныйДокумент_УплатаНалогов" Тогда
		
		Налог = Неопределено;
		
		Если ТипЗнч(Параметр) = Тип("Структура")
			И Параметр.Свойство("Организация") И Параметр.Организация = Объект.Организация
			И Параметр.Свойство("Налог", Налог) И ЗначениеЗаполнено(Налог)
			И ЭтоФиксированныеВзносы(Налог) Тогда
			
			НайтиПлатежиСвязанныеСЗадачей();
			РассчитатьСтраховыеВзносыКУплате();
			ЗапуститьОбновлениеБаннераСостоянияОтправки();
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "УдалитьДокументУплаты" Тогда
		
		УдалитьДокументУплаты(Параметр);
		ЗапуститьОбновлениеБаннераСостоянияОтправки();
		
	ИначеЕсли ИмяСобытия = "ИзмененоПредупреждениеПриЗагрузкеВыписки" И ИнтерфейсИнтеграцииСБанками Тогда
		
		ПредупрежденияЗагрузкиВыписки = 
			НайтиПредупрежденияПриЗагрузкеВыписки(Объект.Организация, НачалоГода(Объект.Период), КонецКвартала(Объект.Период));
		
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПредупрежденияЗагрузкиВыписки);
		
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ВыбранноеЗначение);
		УправлениеФормой(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// См. также ПроверитьЗаполнениеНаКлиенте()
	
	Если НЕ РеквизитыОрганизацииЗаполнены Тогда
		НезаполненныеРеквизиты = ПолучитьИзВременногоХранилища(АдресХранилищаНезаполненныхРеквизитов);
		ПроверкаРеквизитовОрганизации.СообщитьОбОшибкеЗаполненияРеквизитовДляОтчетности(
			Объект.Организация,
			НезаполненныеРеквизиты,
			"СообщениеТребуютсяРеквизиты",
			Отказ,
			Обработки.РасчетСтраховыхВзносовИП.ТекстОписанияОбъектаПроверкиРеквизитовДляОтчетности())
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПериодПриИзменении(Элемент)
	
	ПериодПриИзмененииНаСервере();
	
	ЗапуститьОбновлениеБаннераСостоянияОтправки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
	ЗапуститьОбновлениеБаннераСостоянияОтправки();
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьДеньРегистрацииПриРасчетеСтраховыхВзносовИППриИзменении(Элемент)
	
	ПодключитьОбработчикОжидания(
		"Подключаемый_СохранитьУчитыватьДеньРегистрацииПриРасчетеСтраховыхВзносовИП", 0.1, Истина)
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СохранитьУчитыватьДеньРегистрацииПриРасчетеСтраховыхВзносовИП()
	
	СохранитьУчитыватьДеньРегистрацииПриРасчетеСтраховыхВзносовИП();
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаУчитыватьДеньРегистрацииПриРасчетеСтраховыхВзносовИПНажатие(Элемент)
	
	ПерейтиПоНавигационнойСсылке("http://its.1c.ru/bmk/bp30/ip_vzn_dategreg");
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаВзносаПФРНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Период", Объект.Период);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ИмяВзноса", Элемент.Имя);
	ПараметрыФормы.Вставить("ВидВзноса", "ПФР");
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Взнос в ПФР фиксированный'"));
	ПараметрыФормы.Вставить("Всего", СуммаВзносаПФРВсего);
	ПараметрыФормы.Вставить("Начислено", СуммаВзносаПФРНачислено);
	ПараметрыФормы.Вставить("Уплачено", СуммаВзносаПФРУплачено);
	ПараметрыФормы.Вставить("Переплата", СуммаВзносаПФРПереплата);
	ПараметрыФормы.Вставить("Сумма", Объект.СуммаВзносаПФР);
	ПараметрыФормы.Вставить("АдресТаблицыПлатежей", АдресТаблицыПлатежей("ПФР"));
	
	ОткрытьФорму("Обработка.РасчетСтраховыхВзносовИП.Форма.РасчетСуммыВзноса", ПараметрыФормы, ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаВзносаПФРсДоходовНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяВзноса", Элемент.Имя);
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Взнос в ПФР с доходов'"));
	ПараметрыФормы.Вставить("Всего",     СуммаВзносаПФРсДоходовВсего);
	ПараметрыФормы.Вставить("Уплачено",  СуммаВзносаПФРсДоходовУплачено);
	ПараметрыФормы.Вставить("Сумма",     Объект.СуммаВзносаПФРсДоходов);
	
	ПараметрыФормы.Вставить("Период", Объект.Период);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("СтруктураДоходов", СтруктураДоходов);
	ПараметрыФормы.Вставить("ПредельнаяСуммаВзноса", ПредельнаяСуммаВзноса);
	
	ПараметрыФормы.Вставить("АдресТаблицыПлатежей", АдресТаблицыПлатежей("ПФРсДоходов"));
	
	ОткрытьФорму("Обработка.РасчетСтраховыхВзносовИП.Форма.РасчетСуммыВзносаСДоходов", ПараметрыФормы, ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаВзносаФФОМСНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Период", Объект.Период);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ИмяВзноса", Элемент.Имя);
	ПараметрыФормы.Вставить("ВидВзноса", "ФФОМС");
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Взнос в ФФОМС'"));
	ПараметрыФормы.Вставить("Всего", СуммаВзносаФФОМСВсего);
	ПараметрыФормы.Вставить("Начислено", СуммаВзносаФФОМСНачислено);
	ПараметрыФормы.Вставить("Уплачено", СуммаВзносаФФОМСУплачено);
	ПараметрыФормы.Вставить("Переплата", СуммаВзносаФФОМСПереплата);
	ПараметрыФормы.Вставить("Сумма", Объект.СуммаВзносаФФОМС);
	ПараметрыФормы.Вставить("АдресТаблицыПлатежей", АдресТаблицыПлатежей("ФФОМС"));
	
	ОткрытьФорму("Обработка.РасчетСтраховыхВзносовИП.Форма.РасчетСуммыВзноса", ПараметрыФормы, ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаВзносаФССНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Период", Объект.Период);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ИмяВзноса", Элемент.Имя);
	ПараметрыФормы.Вставить("ВидВзноса", "ФСС");
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Взнос в ФСС'"));
	ПараметрыФормы.Вставить("Всего", СуммаВзносаФССВсего);
	ПараметрыФормы.Вставить("Начислено", СуммаВзносаФССНачислено);
	ПараметрыФормы.Вставить("Уплачено", СуммаВзносаФССУплачено);
	ПараметрыФормы.Вставить("Сумма", Объект.СуммаВзносаФСС);
	ПараметрыФормы.Вставить("АдресТаблицыПлатежей", АдресТаблицыПлатежей("ФСС"));
	
	ОткрытьФорму("Обработка.РасчетСтраховыхВзносовИП.Форма.РасчетСуммыВзноса", ПараметрыФормы, ЭтотОбъект, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПлатежПФРсДоходовОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПлатежныхДокументов = ПомощникиПоУплатеНалоговИВзносовКлиент.ПараметрыОбработкиПлатежныхДокументов(
		ПлатежиПФРсДоходов, "ПлатежПФРсДоходов", ОповещениеУдаленияПлатежногоДокумента());
	
	ПомощникиПоУплатеНалоговИВзносовКлиент.ОбработкаНавигационнойСсылкиПлатежногоДокумента(Элемент, НавигационнаяСсылкаФорматированнойСтроки, ПараметрыПлатежныхДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПлатежПФРОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПлатежныхДокументов = ПомощникиПоУплатеНалоговИВзносовКлиент.ПараметрыОбработкиПлатежныхДокументов(
		ПлатежиПФР, "ПлатежПФР", ОповещениеУдаленияПлатежногоДокумента());
	
	ПомощникиПоУплатеНалоговИВзносовКлиент.ОбработкаНавигационнойСсылкиПлатежногоДокумента(Элемент, НавигационнаяСсылкаФорматированнойСтроки, ПараметрыПлатежныхДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПлатежФФОМСОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПлатежныхДокументов = ПомощникиПоУплатеНалоговИВзносовКлиент.ПараметрыОбработкиПлатежныхДокументов(
		ПлатежиФФОМС, "ПлатежФФОМС", ОповещениеУдаленияПлатежногоДокумента());
	
	ПомощникиПоУплатеНалоговИВзносовКлиент.ОбработкаНавигационнойСсылкиПлатежногоДокумента(Элемент, НавигационнаяСсылкаФорматированнойСтроки, ПараметрыПлатежныхДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПлатежФССОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыПлатежныхДокументов = ПомощникиПоУплатеНалоговИВзносовКлиент.ПараметрыОбработкиПлатежныхДокументов(
		ПлатежиФСС, "ПлатежФСС", ОповещениеУдаленияПлатежногоДокумента());
	
	ПомощникиПоУплатеНалоговИВзносовКлиент.ОбработкаНавигационнойСсылкиПлатежногоДокумента(Элемент, НавигационнаяСсылкаФорматированнойСтроки, ПараметрыПлатежныхДокументов);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапросНаСверкуНаименованиеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеВыполнениеСверки = Новый ОписаниеОповещения("ОбработатьВыполнениеСверки", ЭтотОбъект);
	ОткрытьФорму(ОписаниеДействияСверка.ИмяФормы, ОписаниеДействияСверка.ПараметрыФормы, ЭтотОбъект,,,,ОповещениеВыполнениеСверки);
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеТребуютсяРеквизитыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",                 Объект.Организация);
	ПараметрыФормы.Вставить("Назначение",           "ДляОтчетности");
	ПараметрыФормы.Вставить("ПроверяемыеРеквизиты", ПроверяемыеРеквизитыДляОтчетности());
	
	ОткрытьФорму("Справочник.Организации.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстОшибкиЗагрузкиВыпискиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если Не ИнтерфейсИнтеграцииСБанками Тогда
		ВызватьИсключение НСтр("ru = 'Функциональная опция ""Интеграция с банком"" отключена'");
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",   Объект.Организация);
	ПараметрыФормы.Вставить("НачалоПериода", НачалоГода(Объект.Период));
	ПараметрыФормы.Вставить("КонецПериода",  КонецКвартала(Объект.Период));
	ПараметрыФормы.Вставить("ПоказатьПредупреждения", Истина);
	
	ОткрытьФорму("Обработка.ПомощникРасчетаНалогаУСН.Форма.РасшифровкаДоходовИнтеграцияСБанком", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОплатитьСБанковскогоСчета(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	СозданныеДокументы = СоздатьПлатежныеДокументыНаСервере(ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.БанковскийПеревод"));
	Если СозданныеДокументы <> Неопределено Тогда;
		ОповеститьОСозданныхДокументах(СозданныеДокументы);
		ЗапуститьОбновлениеБаннераСостоянияОтправки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьНаличнымиПоКвитанции(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	СозданныеДокументы = СоздатьПлатежныеДокументыНаСервере(ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.НаличнымиПоКвитанции"));
	Если СозданныеДокументы <> Неопределено Тогда;
		ОповеститьОСозданныхДокументах(СозданныеДокументы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСверку(Команда)
	
	Если Не ПроверитьЗаполнениеНаКлиенте() Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеВыполнениеСверки = Новый ОписаниеОповещения("ОбработатьВыполнениеСверки", ЭтотОбъект);
	ОткрытьФорму(ОписаниеДействияСверка.ИмяФормы, ОписаниеДействияСверка.ПараметрыФормы, ЭтотОбъект,,,,ОповещениеВыполнениеСверки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

&НаКлиенте
Процедура ТекстСостояниеЗагрузкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	ИнтеграцияСБанкамиФормыКлиент.ОбработкаНавигационнойСсылкиБаннера(
		ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ПроверитьЗаполнениеНаКлиенте()
	
	// На клиенте проверяется только заполненность реквизитов формы.
	// В тех случаях, когда требуется дополнительно проверить и полноту заполнения реквизитов организации,
	// следует использовать ПроверитьЗаполнение()
	
	Отказ = Ложь;
	
	ПроверяемыеПоля = Новый Структура;
	ПроверяемыеПоля.Вставить("Организация", НСтр("ru = 'Организация'"));
	ПроверяемыеПоля.Вставить("Период",      НСтр("ru = 'Период'"));
	
	Для Каждого ОписаниеПоля Из ПроверяемыеПоля Цикл
	
		Если ЗначениеЗаполнено(Объект[ОписаниеПоля.Ключ]) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстСообщения = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения(, "Заполнение", ОписаниеПоля.Значение);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , ОписаниеПоля.Ключ, , Отказ);
		
	КонецЦикла;
	
	Возврат Не Отказ;
	
КонецФункции

&НаСервере
Процедура УстановитьФункциональныеОпцииФормы()
	
	Периодичность = УчетСтраховыхВзносовИП.ПериодичностьУплатыФиксированныхСтраховыхВзносов(Объект.Организация, Объект.Период);
	
	УплачиватьДобровольныеВзносыВФСС = УчетнаяПолитика.УплачиватьДобровольныеВзносыВФСС(Объект.Организация, Объект.Период);
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ДатаРегистрации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ДатаРегистрации");
	КонецЕсли;
	
	УчитыватьДеньРегистрацииПриРасчетеСтраховыхВзносовИП = УчетСтраховыхВзносовИП.УчитыватьДеньРегистрацииПриРасчетеСтраховыхВзносовИП(Объект.Период);
	
	Используется1СОтчетность = РегламентированнаяОтчетностьБП.Используется1СОтчетность();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеФормойНаСервере()
	
	ДоступенВыборОрганизации = НЕ ЗначениеЗаполнено(Объект.Организация)
		Или (Справочники.Организации.ИспользуетсяНесколькоОрганизаций() И Не КонтекстныйВызов);
	
	Элементы.Организация.Видимость              = ДоступенВыборОрганизации;
	Элементы.ОрганизацияПредставление.Видимость = Не ДоступенВыборОрганизации;
	Элементы.Период.Видимость                   = (НЕ ВыполнениеЗадачиКалендаря Или НЕ ЗначениеЗаполнено(Объект.Период)) И НЕ КонтекстныйВызов;
	
	// Список выбора периода
	Элементы.Период.СписокВыбора.Очистить();
	
	ПрошлыйГод = КонецГода(ДобавитьМесяц(ТекущийПериод, -12));
	Если ПрошлыйГод >= УчетСтраховыхВзносовИП.ДатаНачалаУчетаСтраховыхВзносовИП()
		И (Не ЗначениеЗаполнено(ДатаРегистрации) Или ДатаРегистрации <= НачалоДня(ПрошлыйГод - 86400)) Тогда
		// Добавляем прошлый год, если не знаем дату регистрации ИП или он зарегистрировался до 31 декабря
		Элементы.Период.СписокВыбора.Добавить(НачалоДня(ПрошлыйГод), БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
			НачалоГода(ПрошлыйГод), КонецГода(ПрошлыйГод), Истина));
	КонецЕсли;
	
	// Приводим текущий период к установленной периодичности
	Если Периодичность = Перечисления.Периодичность.Год Тогда
		
		ТекущийПериод = КонецГода(ТекущийПериод);
		Объект.Период = КонецГода(Объект.Период);
		
		Элементы.Период.СписокВыбора.Добавить(НачалоДня(ТекущийПериод), БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
			НачалоГода(ТекущийПериод), КонецГода(ТекущийПериод), Истина));
	Иначе
		
		ТекущийПериод = КонецКвартала(ТекущийПериод);
		Объект.Период = КонецКвартала(Объект.Период);
		
		Для НомерКвартала = 1 По 4 Цикл
			Квартал = КонецКвартала(ДобавитьМесяц(НачалоГода(ТекущийПериод), 3*(НомерКвартала - 1)));
			Если Не ЗначениеЗаполнено(ДатаРегистрации) Или ДатаРегистрации <= НачалоДня(Квартал - 86400) Тогда
				// Добавляем квартал, если ИП зарегистрировался ранее последнего дня квартала
				Элементы.Период.СписокВыбора.Добавить(НачалоДня(Квартал), БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(
					НачалоГода(Квартал), КонецКвартала(Квартал), Истина));
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	// Показываем настройку в год регистрации предпринимателя до отмены 212-ФЗ.
	Элементы.ГруппаУчитыватьДеньРегистрацииПриРасчетеСтраховыхВзносовИП.Видимость = 
		Год(Объект.Период) = Год(ДатаРегистрации)
		И УчетСтраховыхВзносовИП.ПроверятьНастройкуУчетаДняРегистрации(Объект.Период);
	
	НайтиПлатежиСвязанныеСЗадачей();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура НайтиПлатежиСвязанныеСЗадачей()
	
	ОчиститьТаблицыПлатежей();
	
	ЗаполнитьТаблицыПлатежей();
	
	ВывестиПлатежиИБаннерСостоянияОтправкиНаФорму();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТаблицыПлатежей()
	
	ВидыПлатежей = ВидыПлатежей();
	
	Для Каждого ВидПлатежа Из ВидыПлатежей Цикл
		ЭтотОбъект[ВидПлатежа.Ключ].Очистить();
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицыПлатежей()
	
	ВсеПлатежи = Обработки.РасчетСтраховыхВзносовИП.ПлатежныеДокументы(Объект.Организация, Объект.Период);
	
	Если ВсеПлатежи <> Неопределено Тогда
		ПлатежиПоВидамВзносов = Обработки.РасчетСтраховыхВзносовИП.РазделитьПлатежиПоВидамВзносов(ВсеПлатежи);
		
		ПлатежиПФР.Загрузить(ПлатежиПоВидамВзносов.ПлатежиПФР);
		ПлатежиПФРсДоходов.Загрузить(ПлатежиПоВидамВзносов.ПлатежиПФРсДоходов);
		ПлатежиФФОМС.Загрузить(ПлатежиПоВидамВзносов.ПлатежиФФОМС);
		ПлатежиФСС.Загрузить(ПлатежиПоВидамВзносов.ПлатежиФСС);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиПлатежиИБаннерСостоянияОтправкиНаФорму()
	
	ВидыПлатежей = ВидыПлатежей();
	
	СостоянияИнтеграцииДокументов = РегистрыСведений.ДокументыИнтеграцииСБанком.СостоянияИнтеграцииДокументов(
		ДокументыОплаты(ЭтотОбъект));
	
	Для Каждого ВидПлатежа Из ВидыПлатежей Цикл
		ПлатежиДляОтображения = ПомощникиПоУплатеНалоговИВзносов.ПлатежиДляОтображения(
			ЭтотОбъект[ВидПлатежа.Ключ], СостоянияИнтеграцииДокументов);
		ПомощникиПоУплатеНалоговИВзносов.ОтобразитьПлатежи(ЭтотОбъект, ПлатежиДляОтображения, ВидПлатежа.Значение);
	КонецЦикла;
	
	ИнтеграцияСБанкамиФормы.ПолучитьДанныеИПоказатьБаннерСостоянияОтправки(ЭтотОбъект, СостоянияИнтеграцииДокументов);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ХэшДанныхБаннера(Знач ДокументыОплаты)
	
	Возврат ИнтеграцияСБанкамиФормы.ХэшДанныхБаннера(ДокументыОплаты);
	
КонецФункции

&НаКлиенте
Процедура ЗапуститьОбновлениеБаннераСостоянияОтправки()
	Если ИнтервалПроверкиСостоянияИнтеграцииСБанком > 0 Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ЗапуститьОбновлениеБаннераСостояниеОтправки", ИнтервалПроверкиСостоянияИнтеграцииСБанком, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗапуститьОбновлениеБаннераСостояниеОтправки() Экспорт
	
	Если ХэшДанныхБаннера(ДокументыОплаты(ЭтотОбъект)) <> ХешДанныхБаннера Тогда
		НайтиПлатежиСвязанныеСЗадачей();
	КонецЕсли;
	ЗапуститьОбновлениеБаннераСостоянияОтправки();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДокументыОплаты(Форма)
	
	ДокументыОплаты = Новый Массив;
	
	ВидыПлатежей = ВидыПлатежей();
	
	Для Каждого ВидПлатежа Из ВидыПлатежей Цикл
		Для Каждого Платеж Из Форма[ВидПлатежа.Ключ] Цикл
			ДокументыОплаты.Добавить(Платеж.Ссылка);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДокументыОплаты;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВидыПлатежей()
	
	Соответствие = Новый Соответствие;
	Соответствие.Вставить("ПлатежиПФР", "ПлатежПФР");
	Соответствие.Вставить("ПлатежиПФРсДоходов", "ПлатежПФРсДоходов");
	Соответствие.Вставить("ПлатежиФФОМС", "ПлатежФФОМС");
	Соответствие.Вставить("ПлатежиФСС", "ПлатежФСС");
	Возврат Соответствие;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Форма.ВсегоВзносов = Объект.СуммаВзносаПФР + Объект.СуммаВзносаПФРсДоходов + Объект.СуммаВзносаФФОМС + Объект.СуммаВзносаФСС;
	
	Элементы.ГруппаСтраховыеВзносыФСС.Видимость = Форма.УплачиватьДобровольныеВзносыВФСС;
	
	Элементы.ГруппаПредупреждениеОбОшибкахЗагрузки.Видимость = Форма.ИнтерфейсИнтеграцииСБанками
		И ЗначениеЗаполнено(Объект.Организация) И Форма.ЕстьОшибкиЗагрузкиВыписки;
	
	ВзносыОплачены = ВзносыОплачены(Форма);
	Элементы.ОплатитьСБанковскогоСчета.Доступность       = Не ВзносыОплачены;
	Элементы.ОплатитьНаличнымиПоКвитанции.Доступность    = Не ВзносыОплачены;
	Элементы.ОплатитьСБанковскогоСчета.КнопкаПоУмолчанию = Не ВзносыОплачены;
	УстановитьВидПоУмолчаниюОформлением(Форма, Элементы.ОплатитьСБанковскогоСчета,    Не ВзносыОплачены);
	УстановитьВидПоУмолчаниюОформлением(Форма, Элементы.ОплатитьНаличнымиПоКвитанции, Не ВзносыОплачены);
	
	Если  ПлатежиВБюджетКлиентСервер.ДействуетПриказ2017_90н(Форма.ДатаСеанса) Тогда
		ЗаголовокСверки                    = НСтр("ru = 'Запросить сверку с ФНС'");
		ЗаголовокГруппаСверка              = НСтр("ru = 'Сверка с ФНС'");
		ЗаголовокДекорацияИнформацияСверка = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Рекомендуется провести сверку, чтобы убедиться в правильности расчетов с бюджетом 
				|Обычно ответ на запрос сверки приходит в течение 3-6 рабочих дней'"), НовыйШрифтКурсив());
	Иначе
		ЗаголовокСверки                    = НСтр("ru = 'Запросить сверку с ПФР'");
		ЗаголовокГруппаСверка              = НСтр("ru = 'Сверка с ПФР'");
		ЗаголовокДекорацияИнформацияСверка = Новый ФорматированнаяСтрока(
			НСтр("ru = 'Рекомендуется провести сверку, чтобы убедиться в правильности расчетов с фондом 
				|Обычно ответ на запрос сверки приходит в течение 3-6 рабочих дней'"), НовыйШрифтКурсив());
	КонецЕсли;
	
	Если Форма.Используется1СОтчетность Тогда
		Элементы.ГруппаСверка.Видимость = Истина;
		Элементы.ГруппаСверка.Заголовок               = ЗаголовокГруппаСверка;
		Элементы.ВыполнитьСверку.Заголовок            = ЗаголовокСверки;
		Элементы.ДекорацияИнформацияСверка.Заголовок  = ЗаголовокДекорацияИнформацияСверка;
		Элементы.ВыполнитьСверку.Видимость            = Не Форма.СверкаВыполнена;
		Элементы.ЗапросНаСверкуНаименование.Видимость = Форма.СверкаВыполнена;
	Иначе
		Элементы.ГруппаСверка.Видимость = Ложь;
	КонецЕсли;
	
	Если Форма.ПоказыватьКомандыОплаты Тогда
		Элементы.ГруппаОплата.Видимость = Истина;
		ЕстьДокументыОплатыПоКассе = ЕстьДокументыОплатыПоКассе(Форма);
		Элементы.ДляЧегоНужнаКвитанцияЧтоДелатьДальше.Видимость = 
			НЕ Форма.ИнтерфейсИнтеграцииСБанками И ЕстьДокументыОплатыПоКассе;
		
		ЕстьДокументыОплатыПоБанку = ЕстьДокументыОплатыПоБанку(Форма);
		Элементы.КакОплатитьСБанковскогоСчетаДиректБанк.Видимость = 
			Форма.НастроенПрямойОбменСБанком И ЕстьДокументыОплатыПоБанку;
		Элементы.КакОплатитьСБанковскогоСчета.Видимость = Не ЗначениеЗаполнено(Форма.СчетОрганизации);
	Иначе
		Элементы.ГруппаОплата.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидПоУмолчаниюОформлением(Форма, Элемент, КнопкаПоУмолчанию)
	
	ЖирныйШрифт = КнопкаПоУмолчанию;
	Шрифт = Новый Шрифт(Элемент.Шрифт, , , ЖирныйШрифт);
	
	Элемент.Шрифт    = Шрифт;
	Элемент.ЦветФона = ?(КнопкаПоУмолчанию, Форма.ЦветПодсветки, Новый Цвет);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВзносыОплачены(Форма)
	
	Объект = Форма.Объект;
	
	ВзносПФРОплачен         = СуммаКУплате(Объект.СуммаВзносаПФР, Форма.ПлатежиПФР) = 0;
	ВзносПФРсДоходовОплачен = СуммаКУплате(Объект.СуммаВзносаПФРсДоходов, Форма.ПлатежиПФРсДоходов) = 0;
	ВзносФФОМСОплачен       = СуммаКУплате(Объект.СуммаВзносаФФОМС, Форма.ПлатежиФФОМС) = 0;
	ВзносФССОплачен         = СуммаКУплате(Объект.СуммаВзносаФСС, Форма.ПлатежиФСС) = 0;
	
	Возврат ВзносПФРОплачен И ВзносПФРсДоходовОплачен И ВзносФФОМСОплачен И ВзносФССОплачен;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьДокументыОплатыПоБанку(Форма)
	
	Возврат ЕстьДокументОплаты(Форма, Тип("ДокументСсылка.ПлатежноеПоручение"));
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьДокументыОплатыПоКассе(Форма)
	
	Возврат ЕстьДокументОплаты(Форма, Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьДокументОплаты(Форма, ТипДокумента)
	
	ВидыПлатежей = ВидыПлатежей();
	
	Для Каждого ВидПлатежа Из ВидыПлатежей Цикл
		
		Для Каждого СтрокаОплаты Из Форма[ВидПлатежа.Ключ] Цикл
			Если ТипЗнч(СтрокаОплаты.Ссылка) = ТипДокумента Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция НастроенПрямойОбменСБанком(Организация, СчетОрганизации)
	
	Если ЗначениеЗаполнено(СчетОрганизации) Тогда
		Банк = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СчетОрганизации, "Банк");
		Если ЗначениеЗаполнено(Банк) Тогда
			НастройкаОбмена = ОбменСБанками.НастройкаОбмена(Организация, Банк);
			Возврат ЗначениеЗаполнено(НастройкаОбмена);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура ПериодПриИзмененииНаСервере()
	
	Если Не ВыполнениеЗадачиКалендаря Тогда
		ПорядокУплаты = ВыполнениеЗадачБухгалтера.ПорядокУплатыНалога(Объект.Организация, КонецКвартала(Объект.Период),
			Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть);
		Правило = ПорядокУплаты.Правило;
		Срок    = ПорядокУплаты.Срок;
	КонецЕсли;
	
	УстановитьФункциональныеОпцииФормы();
	
	ПолучитьСведенияОСверке();
	
	РассчитатьСтраховыеВзносыКУплате();
	
	УправлениеФормойНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	Если Не ВыполнениеЗадачиКалендаря Тогда
		ПорядокУплаты = ВыполнениеЗадачБухгалтера.ПорядокУплатыНалога(Объект.Организация, КонецКвартала(Объект.Период),
			Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть);
		Правило = ПорядокУплаты.Правило;
		Срок    = ПорядокУплаты.Срок;
	КонецЕсли;
	
	СчетОрганизации = БанковскийСчетОрганизации(Объект.Организация);
	
	УстановитьФункциональныеОпцииФормы();
	
	ПолучитьСведенияОСверке();
	
	РассчитатьСтраховыеВзносыКУплате();
	
	ПроверитьРеквизитыОрганизацииДляОтчетности();
	
	УправлениеФормойНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьУчитыватьДеньРегистрацииПриРасчетеСтраховыхВзносовИП()
	
	Константы.УчитыватьДеньРегистрацииПриРасчетеСтраховыхВзносовИП.Установить(УчитыватьДеньРегистрацииПриРасчетеСтраховыхВзносовИП);
	
	РассчитатьСтраховыеВзносыКУплате();
	
КонецПроцедуры

// Помещает часть таблицы СтраховыеВзносыУплаченные с отбором по ключу во временное хранилище
//
&НаСервере
Функция АдресТаблицыПлатежей(Ключ)
	
	ПараметрыОтбора = Новый Структура("Ключ", Ключ);
	
	ТаблицаПлатежей = СтраховыеВзносыУплаченные.Выгрузить(СтраховыеВзносыУплаченные.НайтиСтроки(ПараметрыОтбора));
	ТаблицаПлатежей.Сортировать("Дата, Ссылка", Новый СравнениеЗначений);
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаПлатежей, УникальныйИдентификатор);
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоФиксированныеВзносы(Знач Налог)
	
	Возврат Обработки.РасчетСтраховыхВзносовИП.ЭтоФиксированныеВзносы(Налог);
	
КонецФункции

// Серверная обработка оповещения ИзменениеВыписки
//
&НаСервере
Процедура ОбработкаОповещенияИзменениеВыписки()
	
	РассчитатьСтраховыеВзносыКУплате();
	
	УправлениеФормойНаСервере();
	
КонецПроцедуры

#Область РасчетСуммыВзносов

&НаСервере
Процедура РассчитатьСтраховыеВзносыКУплате()
	
	СтраховыеВзносыКУплате = СтраховыеВзносыКУплате(Объект.Организация, Объект.Период, Периодичность);
	ЗаполнитьЗначенияСвойств(Объект, СтраховыеВзносыКУплате, СвойстваВзносыКУплате());
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтраховыеВзносыКУплате, СвойстваВзносыНачисленоУплачено());
	
	СтраховыеВзносыУплаченные.Очистить();
	
	СчетаУчетаСтраховыхВзносов = УчетСтраховыхВзносовИП.СчетаУчетаСтраховыхВзносов();
	Если СтраховыеВзносыКУплате.ФиксированныеСтраховыеВзносыУплаченные <> Неопределено Тогда
		СтраховыеВзносыКУплате.ФиксированныеСтраховыеВзносыУплаченные.Колонки.ДокументОплаты.Имя = "Ссылка";
		СтраховыеВзносыКУплате.ФиксированныеСтраховыеВзносыУплаченные.Колонки.НомерДокументаОплаты.Имя = "Номер";
		СтраховыеВзносыКУплате.ФиксированныеСтраховыеВзносыУплаченные.Колонки.ДатаДокументаОплаты.Имя = "Дата";
		Для Каждого СтрокаТаблицы Из СтраховыеВзносыКУплате.ФиксированныеСтраховыеВзносыУплаченные Цикл
			НоваяСтрока = СтраховыеВзносыУплаченные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			Если СтрокаТаблицы.СчетУчета = СчетаУчетаСтраховыхВзносов.ПФР Тогда
				НоваяСтрока.Ключ = "ПФР";
			ИначеЕсли СтрокаТаблицы.СчетУчета = СчетаУчетаСтраховыхВзносов.ФФОМС Тогда
				НоваяСтрока.Ключ = "ФФОМС";
			ИначеЕсли СтрокаТаблицы.СчетУчета = СчетаУчетаСтраховыхВзносов.ФСС Тогда
				НоваяСтрока.Ключ = "ФСС";
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СтраховыеВзносыКУплате.СтраховыеВзносыСДоходовУплаченные <> Неопределено Тогда
		СтраховыеВзносыКУплате.СтраховыеВзносыСДоходовУплаченные.Колонки.ДокументОплаты.Имя = "Ссылка";
		СтраховыеВзносыКУплате.СтраховыеВзносыСДоходовУплаченные.Колонки.НомерДокументаОплаты.Имя = "Номер";
		СтраховыеВзносыКУплате.СтраховыеВзносыСДоходовУплаченные.Колонки.ДатаДокументаОплаты.Имя = "Дата";
		Для Каждого СтрокаТаблицы Из СтраховыеВзносыКУплате.СтраховыеВзносыСДоходовУплаченные Цикл
			НоваяСтрока = СтраховыеВзносыУплаченные.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
			НоваяСтрока.Ключ = "ПФРсДоходов";
		КонецЦикла;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтраховыеВзносыКУплате(Знач Организация, Знач Период, Знач Периодичность)
	
	Возврат Обработки.РасчетСтраховыхВзносовИП.СтраховыеВзносыКУплате(Организация, Период, Периодичность);
	
КонецФункции

&НаСервереБезКонтекста
Функция СвойстваВзносыКУплате()
	
	Возврат Обработки.РасчетСтраховыхВзносовИП.СвойстваВзносыКУплате();
	
КонецФункции

&НаСервереБезКонтекста
Функция СвойстваВзносыНачисленоУплачено()
	
	Возврат Обработки.РасчетСтраховыхВзносовИП.СвойстваВзносыНачисленоУплачено();
	
КонецФункции

&НаКлиенте
Функция ОповещениеУдаленияПлатежногоДокумента()
	Возврат Новый ОписаниеОповещения("УдалитьДокументУплатыНаКлиентеЗавершение", ЭтотОбъект);
КонецФункции

&НаКлиенте
Процедура УдалитьДокументУплатыНаКлиентеЗавершение(ДокументУплатыДляУдаления, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ДокументУплатыДляУдаления) Тогда
		УдалитьДокументУплаты(ДокументУплатыДляУдаления);
		ЗапуститьОбновлениеБаннераСостоянияОтправки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьДокументУплаты(ДокументУплатыДляУдаления)
	
	ДокументУплатыОбъект = ДокументУплатыДляУдаления.ПолучитьОбъект();
	ДокументУплатыОбъект.УстановитьПометкуУдаления(Истина);
	
	РассчитатьСтраховыеВзносыКУплате();
	
	УправлениеФормойНаСервере();
	
КонецПроцедуры

#КонецОбласти

#Область ВыполнениеКоманд

// Создает Платежные поручения или Выплаты наличными в зависимости от выбранного способа оплаты
// 
// Параметры:
//   СпособОплаты - ПеречислениеСсылка.СпособыОплаты
// 
// Возвращаемое значение:
//   Массив - созданные документы
//
&НаСервере
Функция СоздатьПлатежныеДокументыНаСервере(СпособОплаты)
	
	Если СпособОплаты = Перечисления.СпособыУплатыНалогов.БанковскийПеревод Тогда
		
		СчетОрганизации = БанковскийСчетОрганизации(Объект.Организация);
		Если Не ЗначениеЗаполнено(СчетОрганизации) Тогда
			ТекстСообщения = НСтр("ru = 'Укажите банковский счет в реквизитах организации'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Организация);
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормойНаСервере();
	
	СуммыКУплате = Новый Структура(СвойстваВзносыКУплате());
	СуммыКУплате.СуммаВзносаПФР         = СуммаКУплате(Объект.СуммаВзносаПФР, ПлатежиПФР);
	СуммыКУплате.СуммаВзносаПФРсДоходов = СуммаКУплате(Объект.СуммаВзносаПФРсДоходов, ПлатежиПФРсДоходов);
	СуммыКУплате.СуммаВзносаФФОМС       = СуммаКУплате(Объект.СуммаВзносаФФОМС, ПлатежиФФОМС);
	СуммыКУплате.СуммаВзносаФСС         = СуммаКУплате(Объект.СуммаВзносаФСС, ПлатежиФСС);
	
	ТаблицаПлатежей = Обработки.РасчетСтраховыхВзносовИП.ТаблицаПлатежейДляФормированияПлатежныхПоручений(
		Объект.Организация, Объект.Период, СуммыКУплате);
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Правило",         Правило);
	СтруктураПараметров.Вставить("ПериодСобытия",   Объект.Период);
	СтруктураПараметров.Вставить("Организация",     Объект.Организация);
	СтруктураПараметров.Вставить("НалоговыйПериод", НачалоГода(Объект.Период));
	СтруктураПараметров.Вставить("Платежи",         ПоместитьВоВременноеХранилище(ТаблицаПлатежей));
	СтруктураПараметров.Вставить("СпособОплаты",    СпособОплаты);
	СтруктураПараметров.Вставить("СчетОрганизации", СчетОрганизации);
	
	СозданныеДокументы = Обработки.ФормированиеПлатежныхПорученийНаУплатуНалогов.СоздатьПлатежныеДокументы(СтруктураПараметров);
	
	РассчитатьСтраховыеВзносыКУплате();
	
	УправлениеФормойНаСервере();
	
	Возврат СозданныеДокументы;
	
КонецФункции

&НаСервереБезКонтекста
Функция БанковскийСчетОрганизации(Знач Организация)
	
	СчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
	
	УчетДенежныхСредствБП.УстановитьБанковскийСчет(
		СчетОрганизации,
		Организация,
		ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	Возврат СчетОрганизации;
	
КонецФункции

&НаКлиенте
Процедура ОповеститьОСозданныхДокументах(СозданныеДокументы)
	
	Если СозданныеДокументы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПервыйДокумент = СозданныеДокументы[0];
	ТипСозданныхДокументов = ТипЗнч(ПервыйДокумент);
	
	ОповеститьОбИзменении(ТипСозданныхДокументов);
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ЗадачиБухгалтера"));
	
	Оповестить("ИзменилосьСостояниеДокументаИнтеграцииСБанком", Неопределено, СозданныеДокументы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СуммаКУплате(Сумма, КоллекцияПлатежей)
	
	// Рассчитанная сумма взноса уменьшается только на сумму созданных, но не оплаченных платежей.
	// Оплаченные платежи уже отражены в учете и учтены при расчете взноса к уплате в составе ранее уплаченных сумм.
	
	СуммаПодготовленныхПлатежей = 0;
	
	Для Каждого Платеж Из КоллекцияПлатежей Цикл
		Если Платеж.Оплачено Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаПодготовленныхПлатежей = СуммаПодготовленныхПлатежей + Платеж.Сумма;
	КонецЦикла;
	
	Возврат Макс(0, Сумма - СуммаПодготовленныхПлатежей);
	
КонецФункции

#КонецОбласти

#Область Сверка

&НаКлиенте
Процедура ОбработатьВыполнениеСверки(РезультатЗакрытия = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ПолучитьСведенияОСверке();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСведенияОСверке()
	
	Если Не ЗначениеЗаполнено(Объект.Организация)
		Или Не ЗначениеЗаполнено(Правило) 
		Или Не ЗначениеЗаполнено(Срок) Тогда
		УправлениеФормой(ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	ПараметрыДляСверки       = ПараметрыДляСверки();
	СтруктураСведенийОСверке = ВыполнениеЗадачБухгалтера.СведенияОСверке(ПараметрыДляСверки);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураСведенийОСверке,
		"СверкаВыполнена, ОписаниеДействияСверка, ЗапросНаСверкуНаименование");
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыДляСверки()
	
	ПараметрыДляСверки = ВыполнениеЗадачБухгалтера.НовыйПараметрыЗадачиДляСверки();
	ПараметрыДляСверки.Организация = Объект.Организация;
	ПараметрыДляСверки.Правило = Правило;
	ПараметрыДляСверки.ИдентификаторЗадачи = Правило.Владелец.Код;
	ПараметрыДляСверки.ПериодСобытия = Объект.Период;
	ПараметрыДляСверки.Срок = Срок;
	
	Возврат ПараметрыДляСверки;
	
КонецФункции

#КонецОбласти

#Область ПроверкаРеквизитовДляОтчетности

&НаСервере
Процедура ПроверитьРеквизитыОрганизацииДляОтчетности()
	
	Если ЭтоАдресВременногоХранилища(АдресХранилищаНезаполненныхРеквизитов) Тогда
		УдалитьИзВременногоХранилища(АдресХранилищаНезаполненныхРеквизитов);
		АдресХранилищаНезаполненныхРеквизитов = "";
	КонецЕсли;
	
	НезаполненныеРеквизиты = Неопределено;
	РеквизитыОрганизацииЗаполнены =
		Обработки.РасчетСтраховыхВзносовИП.РеквизитыДляОтчетностиЗаполнены(Объект.Организация, НезаполненныеРеквизиты);
	
	Если НЕ РеквизитыОрганизацииЗаполнены Тогда
		АдресХранилищаНезаполненныхРеквизитов = ПоместитьВоВременноеХранилище(НезаполненныеРеквизиты, УникальныйИдентификатор);
	КонецЕсли;
	
	Элементы.СообщениеТребуютсяРеквизиты.Видимость =
		(ЗначениеЗаполнено(Объект.Организация) И НЕ РеквизитыОрганизацииЗаполнены);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверяемыеРеквизитыДляОтчетности()
	
	Возврат Обработки.РасчетСтраховыхВзносовИП.ПроверяемыеРеквизитыДляОтчетности();
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()
	
	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НовыйШрифтКурсив()
	
	Возврат Новый Шрифт(,,,Истина);
	
КонецФункции

&НаСервереБезКонтекста
Функция НайтиПредупрежденияПриЗагрузкеВыписки(Организация, НачалоПериода, КонецПериода)
	
	Возврат Обработки.РасчетСтраховыхВзносовИП.ПредупрежденияПриЗагрузкеВыписки(Организация, НачалоПериода, КонецПериода);
	
КонецФункции

#КонецОбласти

#Область ПроверкаАктуальностиДанных

&НаКлиенте
Процедура ПередНачаломДлительнойОперации()
	
	Если ИнтерфейсИнтеграцииСБанками Тогда
		АктуализацияДляРасчетаНалога = Истина;
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьАктуальностьДанных", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьАктуальностьДанных()
	
	Если Не ИнтерфейсИнтеграцииСБанками Тогда
		Возврат;
	КонецЕсли;
	
	ЗаданиеАктуализации = ЗакрытиеМесяцаВызовСервера.НайтиФоновоеЗаданиеАктуализацииПоОрганизации(Объект.Организация, УникальныйИдентификатор);
	
	Если ЗаданиеАктуализации = Неопределено Или Не ЗначениеЗаполнено(ЗаданиеАктуализации.УникальныйИдентификатор) Тогда
		ПроверитьАктуальностьДанных();
	Иначе
		
		ДанныеУчетаАктуальны = Ложь;
		АктуализацияДляРасчетаНалога = Истина;
		
		Если ИдентификаторЗаданияАктуализации <> ЗаданиеАктуализации.УникальныйИдентификатор Тогда
			// Задание запущено в другой форме
			ЗаданиеЗапущеноВДругойФорме = Истина;
			ИдентификаторЗаданияАктуализации = ЗаданиеАктуализации.УникальныйИдентификатор;
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации",
				ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);
		Иначе
			ЗаданиеЗапущеноВДругойФорме = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьАктуальностьДанных()
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	
	ИдентификаторЗаданияАктуализации = Неопределено;
	
	УИДЗамера = ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Ложь, "АктуализацияДанныхТребуетсяАктуализацияЗаПериод");
	
	ПараметрыПроверки = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыПроверкиАктуальности();
	ПараметрыПроверки.Организация                  = Объект.Организация;
	ПараметрыПроверки.Период                       = КонецКвартала(Объект.Период);
	ПараметрыПроверки.УникальныйИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыПроверки.УИДЗамера                    = УИДЗамера;
	ПараметрыПроверки.АктуализироватьВесьПериод    = Истина;
	
	РезультатВыполнения = ЗакрытиеМесяцаВызовСервера.ПроверитьАктуальность(ПараметрыПроверки);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ОбработатьРезультатПроверкиАктуальности", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатВыполнения, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатПроверкиАктуальности(Результат, ДополнительныеПараметры) Экспорт
	
	ИдентификаторЗаданияПроверкиАктуализации = Неопределено;
	
	Если Результат = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	РезультатПроверки = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Если РезультатПроверки.УИДЗамера <> Неопределено Тогда
		ОценкаПроизводительностиКлиент.ЗавершитьЗамерВремени(РезультатПроверки.УИДЗамера);
	КонецЕсли;
	
	ДанныеУчетаАктуальны = Не РезультатПроверки.ТребуетсяАктуализация;
	
	Если АктуализацияДляРасчетаНалога
	   И Не ЗаданиеЗапущеноВДругойФорме
	   И ЗначениеЗаполнено(Объект.Организация)
	   И ЗначениеЗаполнено(Объект.Период) Тогда
	   
		АктуализироватьДанные();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область АктуализацияДанных

&НаКлиенте
Процедура АктуализироватьДанные()
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеПроверкиАктуальности");
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации");
	
	ИдентификаторЗаданияПроверкиАктуализации = Неопределено;
	ИдентификаторЗаданияАктуализации = Неопределено;
	
	ПараметрыАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыАктуализации();
	ПараметрыАктуализации.Организация                  = Объект.Организация;
	ПараметрыАктуализации.Период                       = КонецКвартала(Объект.Период);
	ПараметрыАктуализации.ИдентификаторЗадания         = ИдентификаторЗаданияАктуализации;
	ПараметрыАктуализации.УникальныйИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыАктуализации.АктуализацияДляРасчетаНалога = АктуализацияДляРасчетаНалога;
	ПараметрыАктуализации.АктуализироватьВесьПериод    = Истина;
	
	РезультатВыполнения = ЗакрытиеМесяцаВызовСервера.АктуализироватьДанные(ПараметрыАктуализации);
	
	АдресХранилищаАктуализации = РезультатВыполнения.АдресХранилища;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ИдентификаторЗаданияАктуализации = Неопределено;
		ОбработатьРезультатАктуализации();
	Иначе
		ИдентификаторЗаданияАктуализации = РезультатВыполнения.ИдентификаторЗадания;
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации",
			ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеАктуализации()
	
	Если ЗакрытиеМесяцаВызовСервера.ЗаданиеВыполнено(ИдентификаторЗаданияАктуализации) Тогда
		ИдентификаторЗаданияАктуализации = Неопределено;
		ОбработатьРезультатАктуализации();
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияАктуализации);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеАктуализации",
			ПараметрыОбработчикаОжиданияАктуализации.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатАктуализации()
	
	Если ЗаданиеЗапущеноВДругойФорме Тогда
		ПроверитьАктуальностьДанных();
		Возврат;
	КонецЕсли;
	
	РезультатАктуализации = ПолучитьИзВременногоХранилища(АдресХранилищаАктуализации);
	
	Если ТипЗнч(РезультатАктуализации) <> Тип("Структура")
	 Или Не РезультатАктуализации.Свойство("Выполнено") Тогда
		ПроведенАнализВариантаАктуализации = Ложь;
		РезультатАктуализации = ЗакрытиеМесяцаКлиентСервер.НовыйРезультатАктуализации();
	Иначе
		ПроведенАнализВариантаАктуализации = АктуализацияДляРасчетаНалога
			И Не РезультатАктуализации.АктуализацияДляРасчетаНалога;
		АктуализацияДляРасчетаНалога = РезультатАктуализации.АктуализацияДляРасчетаНалога;
	КонецЕсли;
	
	ДанныеУчетаАктуальны = РезультатАктуализации.Выполнено;
	
	Если ДанныеУчетаАктуальны Тогда
		
		Оповестить("АктуализацияЗавершенаУспешно", Новый Структура("Организация", Объект.Организация));
		
	Иначе
		
		Если Не ПроведенАнализВариантаАктуализации Тогда
			// При запуске актуализации мы уже знали, полная она или частичная.
			ЗакрытиеМесяцаКлиент.ПоказатьОшибкиАктуализации(ЭтотОбъект, РезультатАктуализации);
		КонецЕсли;
		
		Оповестить("АктуализацияОтменена", Новый Структура("Организация", Объект.Организация));
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
