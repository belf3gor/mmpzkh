
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	АдресСведенийОбОрганизации = Параметры.АдресСведенийОбОрганизации;
	СведенияОбОрганизации = ПолучитьИзВременногоХранилища(АдресСведенийОбОрганизации);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СведенияОбОрганизации);
	
	СчетОрганизации = БанковскийСчетОрганизации(Организация);
	Период          = ОбщегоНазначения.ТекущаяДатаПользователя();
	
	ПометкаПрошлыеГоды = Истина;
	ПометкаТекущийГод  = Истина;
	
	// Проверка реквизитов для отчетности
	ТекстДействия = НСтр("ru='уплатить фиксированные страховые взносы'");
	СообщениеТребуютсяРеквизиты = 
		ПроверкаРеквизитовОрганизации.СтрокаСообщенияНеЗаполненыРеквизитыДляОтчетности(Организация, ТекстДействия);
	ПроверитьРеквизитыОрганизацииДляОтчетности();
	
	ПодготовитьФормуНаСервере(Параметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если СостояниеИзменилось Тогда
		
		Оповестить("ПомощникОплатыВзносовИП_ИзменениеСостояния");
		СостояниеИзменилось = Ложь;
		
	КонецЕсли;
	
	НачислитьВзносыЗаПрошлыеГоды();
	
	Подключаемый_ОжиданиеСправкиИзФНС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// Начисляем взносы, если сумму изменяли в текущей форме.
	Если НачислитьВзносыЗаПрошлыеГоды Тогда
		НачислитьВзносыЗаПрошлыеГоды(Истина);
		НачислитьВзносыЗаПрошлыеГоды = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьФорму" И ТипЗнч(Источник) = Тип("ДокументСсылка.СписаниеСРасчетногоСчета") Тогда
		ПодготовитьФормуНаСервере();
	ИначеЕсли ИмяСобытия = "Запись_Организации" И Организация = Источник Тогда
		
		ПроверитьРеквизитыОрганизацииДляОтчетности();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ РеквизитыОрганизацииЗаполнены Тогда
		НезаполненныеРеквизиты = ПолучитьИзВременногоХранилища(АдресХранилищаНезаполненныхРеквизитов);
		ТекстОписанияОбъектаПроверки = НСтр("ru='уплаты фиксированных страховых взносов'");
		ПроверкаРеквизитовОрганизации.СообщитьОбОшибкеЗаполненияРеквизитовДляОтчетности(
			Организация,
			НезаполненныеРеквизиты,
			"СообщениеТребуютсяРеквизиты",
			Отказ,
			ТекстОписанияОбъектаПроверки)
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ДекорацияПроверитьЕщеРазНажатие(Элемент)
	
	ПроверитьЕщеРаз();
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийГодИтогоНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.ГруппаПрошлыеГодыРасшифровка.Видимость = Ложь;
	Элементы.ГруппаТекущийГодРасшифровка.Видимость  = Не Элементы.ГруппаТекущийГодРасшифровка.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрошлыеГодыИтогоНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.ГруппаПрошлыеГодыРасшифровка.Видимость = Не Элементы.ГруппаПрошлыеГодыРасшифровка.Видимость;
	Элементы.ГруппаТекущийГодРасшифровка.Видимость  = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура УказатьЗадолженность(Команда)
	
	ПроверитьЕщеРаз(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийГодДолгПСПриИзменении(Элемент)
	
	ПересчитатьИтогПоВзносам(ЭтотОбъект);
	НачислитьВзносыЗаПрошлыеГоды = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекущийГодДолгМСПриИзменении(Элемент)
	
	ПересчитатьИтогПоВзносам(ЭтотОбъект);
	НачислитьВзносыЗаПрошлыеГоды = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрошлыеГодыДолгПСПриИзменении(Элемент)
	
	ПересчитатьИтогПоВзносам(ЭтотОбъект);
	НачислитьВзносыЗаПрошлыеГоды = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрошлыеГодыДолгМСПриИзменении(Элемент)
	
	ПересчитатьИтогПоВзносам(ЭтотОбъект);
	НачислитьВзносыЗаПрошлыеГоды = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрошлыеГодыПеняПСПриИзменении(Элемент)
	
	ПересчитатьИтогПоВзносам(ЭтотОбъект);
	НачислитьВзносыЗаПрошлыеГоды = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрошлыеГодыПеняМСПриИзменении(Элемент)
	
	ПересчитатьИтогПоВзносам(ЭтотОбъект);
	НачислитьВзносыЗаПрошлыеГоды = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ШтрафПрошлыеГодыПСПриИзменении(Элемент)
	
	ПересчитатьИтогПоВзносам(ЭтотОбъект);
	НачислитьВзносыЗаПрошлыеГоды = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ШтрафПрошлыеГодыМСПриИзменении(Элемент)
	
	ПересчитатьИтогПоВзносам(ЭтотОбъект);
	НачислитьВзносыЗаПрошлыеГоды = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПометкаПрошлыеГодыПриИзменении(Элемент)
	
	ПересчитатьИтогПоВзносам(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометкаТекущийГодПриИзменении(Элемент)
	
	ПересчитатьИтогПоВзносам(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗаявлениеНажатие(Элемент)
	
	ПодготовитьЗаявление();
	
КонецПроцедуры

&НаКлиенте
Процедура ФНС_АдресНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформациейКлиентБП.ПоказатьНаКартеНажатие(ЭтотОбъект, Элемент, ФНС_Адрес);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСправкаНажатие(Элемент)
	
	РезультатЗапроса = ПолучитьОтветИОН(ЗапросСправки);
	Шаблон = НСтр("ru='Справка о состоянии расчетов с бюджетом.%1'");
	ИмяФайла = СтрШаблон(Шаблон, РасширениеСправки);
	Если ЗначениеЗаполнено(РезультатЗапроса.АдресФайла) Тогда
		ПолучитьФайл(РезультатЗапроса.АдресФайла, ИмяФайла, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПерейтиКДокументамОплатыНажатие(Элемент)
	
	ПерейтиПоНавигационнойСсылке("e1cib/command/ЖурналДокументов.Деньги.Команда.Деньги");
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеТребуютсяРеквизитыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",                 Организация);
	ПараметрыФормы.Вставить("Назначение",           "ДляОтчетности");
	ПараметрыФормы.Вставить("ПроверяемыеРеквизиты", ПроверяемыеРеквизитыДляОтчетности());
	
	ОткрытьФорму("Справочник.Организации.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОплатитьНаличными(Команда)
	
	Оплатить(ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.НаличнымиПоКвитанции"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОплатитьСБанковскогоСчета(Команда)
	
	Оплатить(ПредопределенноеЗначение("Перечисление.СпособыУплатыНалогов.БанковскийПеревод"));
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	// По умолчанию расшифровки строк скрыты.
	Элементы.ГруппаПрошлыеГодыРасшифровка.Видимость = Ложь;
	Элементы.ГруппаТекущийГодРасшифровка.Видимость  = Ложь;
	
	// Если текущий год оплачен, скрываем элементы.
	ТекущийГодОплачен = (Форма.ТекущийГодИтого = 0);
	Элементы.ГруппаТекущийГод.Видимость = Не ТекущийГодОплачен;
	Элементы.ДекорацияЛиния3.Видимость  = Не ТекущийГодОплачен;
	
	Элементы.ГруппаПроверкаПрошлыхГодов.Видимость   = Ложь;
	Элементы.ДекорацияЛиния1.Видимость              = Ложь;
	Элементы.ГруппаПрошлыеГоды.Видимость            = Ложь;
	Элементы.ПометкаТекущийГод.Видимость            = Ложь;
	Элементы.НадписьТекущийГод.Видимость            = Ложь;
	Элементы.ДекорацияСуммаКОплате.Видимость        = Ложь;
	Элементы.ГруппаЗадолженностьПоВзносам.Видимость = Ложь;
	Элементы.ГруппаПодвал.Видимость                 = Ложь;
	Элементы.ГруппаПодготовленоЗаявление.Видимость  = Ложь;
	Элементы.ГруппаОжиданиеСправки.Видимость        = Ложь;
	Элементы.ДекорацияПроверитьЕщеРаз.Видимость     = Ложь;
	Элементы.ГруппаПолученаСправка.Видимость        = Ложь;
	Элементы.ГруппаВзносыОплачены.Видимость         = Ложь;
	Элементы.ГруппаЗакрыть.Видимость                = Ложь;
	
	Форма.ОплатитьТекущийГод  = Ложь;
	Форма.ОплатитьПрошлыеГоды = Ложь;
	
	Если Форма.РегистрацияВЭтомГоду Тогда
		
		Элементы.НадписьТекущийГод.Видимость            = Истина;
		Элементы.ГруппаЗадолженностьПоВзносам.Видимость = Истина;
		Элементы.ГруппаПодвал.Видимость                 = Истина;
		Элементы.ДекорацияПроверитьЕщеРаз.Видимость     = Истина;
		
		Шаблон = НСтр("ru = 'Взносы за %1 год, оплатить до 31 декабря'");
		Элементы.НадписьТекущийГод.Заголовок = СтрШаблон(Шаблон, Формат(Форма.ГодТекущий, "ЧГ=0"));
		
		Форма.ОплатитьТекущийГод  = Истина;
		Форма.ОплатитьПрошлыеГоды = Ложь;
		
	ИначеЕсли Форма.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияПомощникаОплатыСтраховыхВзносовИП.ДолговЗаПрошлыеГодыНет") Тогда
		
		Элементы.НадписьТекущийГод.Видимость            = Истина;
		Элементы.ГруппаЗадолженностьПоВзносам.Видимость = Истина;
		Элементы.ГруппаПодвал.Видимость                 = Истина;
		Элементы.ГруппаПроверкаПрошлыхГодов.Видимость   = Истина;
		Элементы.ДекорацияПроверитьЕщеРаз.Видимость     = Истина;
		
		Шаблон = НСтр("ru = 'Взносы за %1 год, оплатить до 31 декабря'");
		Элементы.НадписьТекущийГод.Заголовок = СтрШаблон(Шаблон, Формат(Форма.ГодТекущий, "ЧГ=0"));
		
		Если Форма.РегистрацияВПрошломГоду Тогда
			Элементы.ДекорацияДопИнформация.Заголовок = НСтр("ru = 'Судя по вашим ответам у вас нет долгов за прошлый год.'");
		Иначе
			Элементы.ДекорацияДопИнформация.Заголовок = НСтр("ru = 'Судя по вашим ответам у вас нет долгов за прошлые годы.'");
		КонецЕсли;
		
		Форма.ОплатитьТекущийГод  = Истина;
		Форма.ОплатитьПрошлыеГоды = Ложь;
		
	ИначеЕсли Форма.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияПомощникаОплатыСтраховыхВзносовИП.ВсеВзносыОплачены") Тогда
		
		Элементы.ГруппаВзносыОплачены.Видимость           = Истина;
		Элементы.ГруппаЗакрыть.Видимость                  = Истина;
		
	ИначеЕсли Форма.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияПомощникаОплатыСтраховыхВзносовИП.ДолгиЗаПрошлыеГодыОплачены") Тогда
		
		Элементы.НадписьТекущийГод.Видимость            = Истина;
		Элементы.ГруппаЗадолженностьПоВзносам.Видимость = Истина;
		Элементы.ГруппаПодвал.Видимость                 = Истина;
		
		Шаблон = НСтр("ru = 'Взносы за %1 год, оплатить до 31 декабря'");
		Элементы.НадписьТекущийГод.Заголовок = СтрШаблон(Шаблон, Формат(Форма.ГодТекущий, "ЧГ=0"));
		
		Форма.ОплатитьТекущийГод  = Истина;
		Форма.ОплатитьПрошлыеГоды = Ложь;
		
	ИначеЕсли Форма.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияПомощникаОплатыСтраховыхВзносовИП.ОпределеныДолгиЗаПрошлыеГоды") Тогда
		
		Элементы.ДекорацияЛиния1.Видимость              = Истина;
		Элементы.ГруппаПрошлыеГоды.Видимость            = Истина;
		Элементы.ПометкаТекущийГод.Видимость            = Истина;
		Элементы.ДекорацияСуммаКОплате.Видимость        = Не ТекущийГодОплачен;
		Элементы.ГруппаЗадолженностьПоВзносам.Видимость = Истина;
		Элементы.ГруппаПодвал.Видимость                 = Истина;
		Элементы.ГруппаПроверкаПрошлыхГодов.Видимость   = Истина;
		Элементы.ДекорацияПроверитьЕщеРаз.Видимость     = Истина;
		
		Шаблон = НСтр("ru = 'Взносы за %1 год, оплатить до 31 декабря'");
		Элементы.ПометкаТекущийГод.Заголовок = СтрШаблон(Шаблон, Формат(Форма.ГодТекущий, "ЧГ=0"));
		
		Если Форма.РегистрацияВПрошломГоду Тогда
			ЗаголовокСтроки = НСтр("ru = 'Задолженность за прошлый год'");
			Элементы.ДекорацияДопИнформация.Заголовок = НСтр("ru = 'По вашим ответам определены суммы взносов за прошлый год.'");
		Иначе
			ЗаголовокСтроки = НСтр("ru = 'Задолженность за прошлые годы'");
			Элементы.ДекорацияДопИнформация.Заголовок = НСтр("ru = 'По вашим ответам определены суммы взносов за прошлые годы.'");
		КонецЕсли;
		Элементы.ПометкаПрошлыеГоды.Заголовок = ЗаголовокСтроки;
		Элементы.НадписьПрошлыеГоды.Заголовок = ЗаголовокСтроки;
		Элементы.ПометкаПрошлыеГоды.Видимость = Не ТекущийГодОплачен;
		Элементы.НадписьПрошлыеГоды.Видимость = ТекущийГодОплачен;
		
		Форма.ОплатитьТекущийГод  = Форма.ПометкаТекущийГод;
		Форма.ОплатитьПрошлыеГоды = Форма.ПометкаПрошлыеГоды ИЛИ ТекущийГодОплачен;
		
	ИначеЕсли Форма.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияПомощникаОплатыСтраховыхВзносовИП.ПодготовленоЗаявлениеВНалоговую") Тогда
		
		Элементы.ГруппаПодготовленоЗаявление.Видимость  = Истина;
		Элементы.ГруппаПроверкаПрошлыхГодов.Видимость   = Истина;
		Элементы.ДекорацияПроверитьЕщеРаз.Видимость     = Истина;
		Элементы.ДекорацияДопИнформация.Заголовок = НСтр("ru = 'Подготовлено заявление для обращения в налоговую инспекцию.'");
		
	ИначеЕсли Форма.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияПомощникаОплатыСтраховыхВзносовИП.ЗапрошенаСправкаОСостоянииРасчетов") Тогда
		
		Элементы.ГруппаОжиданиеСправки.Видимость        = Истина;
		Элементы.ГруппаПроверкаПрошлыхГодов.Видимость   = Истина;
		Элементы.ГруппаЗакрыть.Видимость                = Истина;
		
		Элементы.ДекорацияДопИнформация.Заголовок = НСтр("ru = 'Отправлен запрос на получение справки о состоянии расчетов.
			|Будет готова через 1-3 дня.'");
		
	ИначеЕсли Форма.Состояние = ПредопределенноеЗначение("Перечисление.СостоянияПомощникаОплатыСтраховыхВзносовИП.ПолученаСправкаОСостоянииРасчетов") Тогда
		
		Элементы.ГруппаПолученаСправка.Видимость        = Истина;
		Элементы.ГруппаПроверкаПрошлыхГодов.Видимость   = Истина;
		Элементы.ДекорацияПроверитьЕщеРаз.Видимость     = Истина;
		
		Элементы.ДекорацияДопИнформация.Заголовок = НСтр("ru = 'Получена справка о состоянии расчетов с бюджетом.'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЕщеРаз(ВводЗадолженности = Ложь)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатыТестирования", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("АдресСведенийОбОрганизации", АдресСведенийОбОрганизации);
	ПараметрыФормы.Вставить("Правило", Правило);
	ПараметрыФормы.Вставить("ВводЗадолженности", ВводЗадолженности);
	
	ОткрытьФорму("Обработка.МониторНалоговИОтчетности.Форма.ФормаТестПоВзносамЗаПрошлыеПериоды",
		ПараметрыФормы, ЭтотОбъект,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатыТестирования(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(РезультатЗакрытия) Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьФормуНаСервере(РезультатЗакрытия);
	
	Если СостояниеИзменилось Тогда
		
		Оповестить("ПомощникОплатыВзносовИП_ИзменениеСостояния");
		СостояниеИзменилось = Ложь;
		
	КонецЕсли;
	
	НачислитьВзносыЗаПрошлыеГоды();
	УдалитьВзносыЗаПрошлыеГоды();
	Подключаемый_ОжиданиеСправкиИзФНС();
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьФормуНаСервере(ВходныеПараметры = Неопределено)
	
	РезультатТестирования = "";
	Если ВходныеПараметры <> Неопределено Тогда
		РезультатТестирования   = ВходныеПараметры.РезультатТестирования;
		ОплаченныеГоды          = ВходныеПараметры.ОплаченныеГоды;
	КонецЕсли;
	
	РассчитатьВзносы();
	
	// Расчет фиксированных страховых взносов за прошлые годы.
	Если Не РегистрацияВЭтомГоду Тогда
		
		Если ЗначениеЗаполнено(РезультатТестирования) Тогда
			
			Если РезультатТестирования = РезультатЕстьДолги() Тогда
			
				ПрошлыеГодыДолгПС = 0;
				ПрошлыеГодыДолгМС = 0;
				Для Каждого ЭлементСписка Из ОплаченныеГоды Цикл
					
					Если ЭлементСписка.Пометка Тогда
						Продолжить;
					КонецЕсли;
					ПериодОплаты = Дата(ЭлементСписка.Значение, 1, 1);
					ФиксированныеСтраховыеВзносыКУплате = УчетСтраховыхВзносовИП.ФиксированныеСтраховыеВзносыКУплате(
						Организация, ПериодОплаты, Перечисления.Периодичность.Год);
					ПрошлыеГодыДолгПС = ПрошлыеГодыДолгПС + ФиксированныеСтраховыеВзносыКУплате.СуммаВзносаПФР;
					ПрошлыеГодыДолгМС = ПрошлыеГодыДолгМС + ФиксированныеСтраховыеВзносыКУплате.СуммаВзносаФФОМС;
					
				КонецЦикла;
				
				Состояние = Перечисления.СостоянияПомощникаОплатыСтраховыхВзносовИП.ОпределеныДолгиЗаПрошлыеГоды;
				
			// Пользователь отказался от посещения налоговой.
			ИначеЕсли РезультатТестирования = РезультатВНалоговуюНеПойду() Тогда
				
				Если РегистрацияБолее3Лет Тогда
					// Рассчитываем взносы за последние 3 года, если с момента регистрации прошло более 3 лет.
					ГодНачало = ГодТекущий - 3;
					ГодКонец  = ГодТекущий -1;
				Иначе
					// Рассчитываем с даты начала деятельности.
					ГодНачало = ГодНачалаДеятельности;
					ГодКонец  = ГодТекущий - 1;
				КонецЕсли;
				
				ПрошлыеГодыДолгПС = 0;
				ПрошлыеГодыДолгМС = 0;
				Для Год = ГодНачало По ГодКонец Цикл
					
					ПериодОплаты = Дата(Год, 1, 1);
					ФиксированныеСтраховыеВзносыКУплате = УчетСтраховыхВзносовИП.ФиксированныеСтраховыеВзносыКУплате(
						Организация, ПериодОплаты, Перечисления.Периодичность.Год);
					ПрошлыеГодыДолгПС = ПрошлыеГодыДолгПС + ФиксированныеСтраховыеВзносыКУплате.СуммаВзносаПФР;
					ПрошлыеГодыДолгМС = ПрошлыеГодыДолгМС + ФиксированныеСтраховыеВзносыКУплате.СуммаВзносаФФОМС;
					
				КонецЦикла;
				
				Состояние = Перечисления.СостоянияПомощникаОплатыСтраховыхВзносовИП.ОпределеныДолгиЗаПрошлыеГоды;
				
			ИначеЕсли РезультатТестирования = РезультатВведенаЗадолженность() Тогда
				
				ПрошлыеГодыДолгПС = ВходныеПараметры.ДолгПС;
				ПрошлыеГодыПеняПС = ВходныеПараметры.ПеняПС;
				ПрошлыеГодыШтрафПС = ВходныеПараметры.ШтрафПС;
				ПрошлыеГодыДолгМС = ВходныеПараметры.ДолгМС;
				ПрошлыеГодыПеняМС = ВходныеПараметры.ПеняМС;
				ПрошлыеГодыШтрафМС = ВходныеПараметры.ШтрафМС;
				
				Состояние = Перечисления.СостоянияПомощникаОплатыСтраховыхВзносовИП.ОпределеныДолгиЗаПрошлыеГоды;
				
			ИначеЕсли РезультатТестирования = РезультатПрошлыеГодыОплачены() Тогда
				Состояние = Перечисления.СостоянияПомощникаОплатыСтраховыхВзносовИП.ДолговЗаПрошлыеГодыНет;
			ИначеЕсли РезультатТестирования = РезультатПодготовитьЗаявление() Тогда
				Состояние = Перечисления.СостоянияПомощникаОплатыСтраховыхВзносовИП.ПодготовленоЗаявлениеВНалоговую;
			ИначеЕсли РезультатТестирования = РезультатПолучитьСправку() Тогда
				Состояние = Перечисления.СостоянияПомощникаОплатыСтраховыхВзносовИП.ЗапрошенаСправкаОСостоянииРасчетов
			КонецЕсли;
			
			// Если перепроверили еще раз и новое состояние отличается от предыдущего.
			Если РегистрыСведений.СостоянияПомощникаОплатыСтраховыхВзносовИП.ПолучитьСостояниеПомощника(Организация).Состояние
				= Перечисления.СостоянияПомощникаОплатыСтраховыхВзносовИП.ОпределеныДолгиЗаПрошлыеГоды
				И Состояние <> Перечисления.СостоянияПомощникаОплатыСтраховыхВзносовИП.ОпределеныДолгиЗаПрошлыеГоды Тогда
				
				УдалитьНачислениеВзносовЗаПрошлыеГоды = Истина;
			КонецЕсли;
			
			СостояниеИзменилось = Истина;
			
			НачислитьВзносыЗаПрошлыеГоды = (
				Состояние = Перечисления.СостоянияПомощникаОплатыСтраховыхВзносовИП.ОпределеныДолгиЗаПрошлыеГоды);
				
		Иначе
			
			ПолучитьСостояниеПомощника();
			Если Состояние = Перечисления.СостоянияПомощникаОплатыСтраховыхВзносовИП.ПолученаСправкаОСостоянииРасчетов Тогда
				
				Если Не ЗначениеЗаполнено(РасширениеСправки) Тогда
					РезультатЗапроса = ПолучитьОтветИОН(ЗапросСправки);
					Если ЗначениеЗаполнено(РезультатЗапроса) Тогда
						РасширениеСправки = РезультатЗапроса.РасширениеФайла;
					КонецЕсли;
				КонецЕсли;
				
				КартинкиРасширений = СтандартныеПодсистемыСервер.НастройкиФорматовСохраненияТабличногоДокумента();
				Строка = КартинкиРасширений.Найти(РасширениеСправки, "Расширение");
				Если Строка <> Неопределено Тогда
					Элементы.ДекорацияКартинкаСправки.Картинка = Строка.Картинка;
				КонецЕсли;
				
			ИначеЕсли Состояние = Перечисления.СостоянияПомощникаОплатыСтраховыхВзносовИП.ДолговЗаПрошлыеГодыНет
				ИЛИ Состояние = Перечисления.СостоянияПомощникаОплатыСтраховыхВзносовИП.ДолгиЗаПрошлыеГодыОплачены Тогда
				
				СостояниеОплаты = УстановитьСостояниеПослеОплаты();
				Если СостояниеОплаты.ОсталосьТекущихВзносовИП = 0 И СостояниеОплаты.КУплатеДолг = 0 Тогда
					Состояние = Перечисления.СостоянияПомощникаОплатыСтраховыхВзносовИП.ВсеВзносыОплачены;
					СостояниеИзменилось = Истина;
				КонецЕсли;
				
				Если СостояниеОплаты.КУплатеДолг > 0 Тогда
					Состояние = Перечисления.СостоянияПомощникаОплатыСтраховыхВзносовИП.ОпределеныДолгиЗаПрошлыеГоды;
					СостояниеИзменилось = Истина;
				КонецЕсли;
				
			// Если были удалены документы оплаты.
			ИначеЕсли Состояние = Перечисления.СостоянияПомощникаОплатыСтраховыхВзносовИП.ВсеВзносыОплачены Тогда
				
				СостояниеОплаты = УстановитьСостояниеПослеОплаты();
				Если СостояниеОплаты.ОсталосьТекущихВзносовИП > 0 Тогда
					Состояние = Перечисления.СостоянияПомощникаОплатыСтраховыхВзносовИП.ДолгиЗаПрошлыеГодыОплачены;
					СостояниеИзменилось = Истина;
				КонецЕсли;
				
				Если СостояниеОплаты.КУплатеДолг > 0 Тогда
					Состояние = Перечисления.СостоянияПомощникаОплатыСтраховыхВзносовИП.ОпределеныДолгиЗаПрошлыеГоды;
					СостояниеИзменилось = Истина;
				КонецЕсли;
				
			ИначеЕсли Состояние = Перечисления.СостоянияПомощникаОплатыСтраховыхВзносовИП.ОпределеныДолгиЗаПрошлыеГоды Тогда
				
				СостояниеОплаты = УстановитьСостояниеПослеОплаты();
				
				Если СостояниеОплаты.КУплатеДолг = 0 Тогда
					Состояние = Перечисления.СостоянияПомощникаОплатыСтраховыхВзносовИП.ДолгиЗаПрошлыеГодыОплачены;
					СостояниеИзменилось = Истина;
				КонецЕсли;
				
				Если СостояниеОплаты.ОсталосьТекущихВзносовИП = 0 И СостояниеОплаты.КУплатеДолг = 0 Тогда
					Состояние = Перечисления.СостоянияПомощникаОплатыСтраховыхВзносовИП.ВсеВзносыОплачены;
					СостояниеИзменилось = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СостояниеИзменилось Тогда
		СохранитьСостояниеПомощника(Организация, Состояние, СсылкаНаОперацию, ЗапросСправки);
	КонецЕсли;
	
	ПересчитатьИтогПоВзносам(ЭтотОбъект);
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьВзносы()
	
	ПрошлыеГодыДолгПС  = 0;
	ПрошлыеГодыПеняПС  = 0;
	ПрошлыеГодыШтрафПС = 0;
	ПрошлыеГодыДолгМС  = 0;
	ПрошлыеГодыПеняМС  = 0;
	ПрошлыеГодыШтрафМС = 0;
	
	ТекущийГодДолгПС = 0;
	ТекущийГодДолгМС = 0;
	
	// Расчет фиксированных страховых взносов за текущий год.
	ФиксированныеСтраховыеВзносыКУплате = УчетСтраховыхВзносовИП.ФиксированныеСтраховыеВзносыКУплате(
		Организация, Период, Перечисления.Периодичность.Год);
	ТекущийГодДолгПС = ФиксированныеСтраховыеВзносыКУплате.СуммаВзносаПФР;
	ТекущийГодДолгМС = ФиксированныеСтраховыеВзносыКУплате.СуммаВзносаФФОМС;
	
	// Получение рассчитанных взносов за прошлые годы.
	ТаблицаДолговПоВзносам = Обработки.РасчетСтраховыхВзносовИП.ДолгиПоВзносам(
		Организация, НачалоГода(Период) - 1);
	Для Каждого СтрокаДолга Из ТаблицаДолговПоВзносам Цикл
		
		СуммаОстаток = - СтрокаДолга.СуммаОстаток;
		Если СтрокаДолга.ВидПлатежа = Перечисления.ВидыПлатежейВГосБюджет.Налог Тогда
			
			Если СтрокаДолга.Счет = ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП Тогда
				ПрошлыеГодыДолгПС = СуммаОстаток;
			Иначе
				ПрошлыеГодыДолгМС = СуммаОстаток;
			КонецЕсли;
			
		ИначеЕсли СтрокаДолга.ВидПлатежа = Перечисления.ВидыПлатежейВГосБюджет.ПениАкт Тогда
			
			Если СтрокаДолга.Счет = ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП Тогда
				ПрошлыеГодыПеняПС = СуммаОстаток;
			Иначе
				ПрошлыеГодыПеняМС = СуммаОстаток;
			КонецЕсли;
			
		ИначеЕсли СтрокаДолга.ВидПлатежа = Перечисления.ВидыПлатежейВГосБюджет.Штраф Тогда
			
			Если СтрокаДолга.Счет = ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП Тогда
				ПрошлыеГодыШтрафПС = СуммаОстаток;
			Иначе
				ПрошлыеГодыШтрафМС = СуммаОстаток;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьЗаявление()
	
	АдресХранилища = ПодготовитьЗаявлениеНаСервере(Организация, Период, ФНС_Наименование);
	ИмяФайла = НСтр("ru='Заявление на получение справки о состоянии расчетов.pdf'");
	Если АдресХранилища <> Неопределено Тогда
		ПолучитьФайл(АдресХранилища, ИмяФайла, Истина);
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПодготовитьЗаявлениеНаСервере(Знач Организация, Знач Период, Знач ФНС_Наименование)
	
	ТабДокумент = Новый ТабличныйДокумент;
	Макет = Обработки.РасчетСтраховыхВзносовИП.ПолучитьМакет("ЗаявлениеНаСправкуОСостоянииРасчетов");
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(Организация, Период);
	Макет.Параметры.Заполнить(СведенияОбОрганизации);
	ФИОФизЛица = СклонениеПредставленийОбъектов.ПросклонятьПредставление(
		СведенияОбОрганизации.ФИОФизлица,
		2, // родительный падеж
		СведенияОбОрганизации.ИндивидуальныйПредприниматель);
	Макет.Параметры.ФИОФизлица = ФИОФизЛица;
	
	Макет.Параметры.ФНС_Наименование = ФНС_Наименование;
	Макет.Параметры.Период = Формат(Период, "ДЛФ=D");
	
	ИНН = СведенияОбОрганизации.ИНН;
	Для НомерСимвола = 1 По СтрДлина(ИНН) Цикл
		Макет.Параметры["ИНН" + НомерСимвола] = Сред(ИНН, НомерСимвола, 1);
	КонецЦикла;
	
	ТабДокумент.Вывести(Макет);
	ТабДокумент.ОтображатьЗаголовки = Ложь;
	ТабДокумент.ОтображатьСетку = Ложь;
	ТабДокумент.АвтоМасштаб = Истина;
	
	ИмяФайлаЗаявления = ПолучитьИмяВременногоФайла();
	ТабДокумент.Записать(ИмяФайлаЗаявления, ТипФайлаТабличногоДокумента.PDF);
	ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайлаЗаявления);
	УдалитьФайлы(ИмяФайлаЗаявления);
	
	Возврат ПоместитьВоВременноеХранилище(ДвоичныеДанные);
	
КонецФункции

&НаСервереБезКонтекста
Процедура СохранитьСостояниеПомощника(Знач Организация, Знач Состояние, Знач СсылкаНаОперацию, Знач ЗапросСправки)
	
	ДанныеРегистра = Новый Структура;
	ДанныеРегистра.Вставить("Организация",       Организация);
	ДанныеРегистра.Вставить("Состояние",         Состояние);
	ДанныеРегистра.Вставить("НачислениеВзносов", СсылкаНаОперацию);
	ДанныеРегистра.Вставить("ЗапросСправки",     ЗапросСправки);
	
	РегистрыСведений.СостоянияПомощникаОплатыСтраховыхВзносовИП.СохранитьСостояниеПомощника(ДанныеРегистра);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьСостояниеПомощника()
	
	Данные = РегистрыСведений.СостоянияПомощникаОплатыСтраховыхВзносовИП.ПолучитьСостояниеПомощника(Организация);
	
	// Проверка наличия данных в регистре.
	Если Не ЗначениеЗаполнено(Данные.Состояние) Тогда
		Возврат;
	КонецЕсли;
	
	Состояние        = Данные.Состояние;
	СсылкаНаОперацию = Данные.НачислениеВзносов;
	ЗапросСправки    = Данные.ЗапросСправки;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьИтогПоВзносам(Форма)
	
	Элементы = Форма.Элементы;
	Форма.ТекущийГодИтого  = Форма.ТекущийГодДолгПС + Форма.ТекущийГодДолгМС;
	Форма.ПрошлыеГодыИтого = Форма.ПрошлыеГодыДолгПС + Форма.ПрошлыеГодыПеняПС + Форма.ПрошлыеГодыШтрафПС
		+ Форма.ПрошлыеГодыДолгМС + Форма.ПрошлыеГодыПеняМС + Форма.ПрошлыеГодыШтрафМС;
	
	СуммаКОплате = ?(Форма.ПометкаПрошлыеГоды, Форма.ПрошлыеГодыИтого, 0)
		+ ?(Форма.ПометкаТекущийГод, Форма.ТекущийГодИтого, 0);
	Шаблон = НСтр("ru = 'Оплатить %1'");
	Элементы.ДекорацияСуммаКОплате.Заголовок = СтрШаблон(Шаблон, Формат(СуммаКОплате, "ЧДЦ=2; ЧН=0,00"));
	
	Форма.ОплатитьТекущийГод  = Форма.ПометкаТекущийГод;
	Форма.ОплатитьПрошлыеГоды = Форма.ПометкаПрошлыеГоды;
	
КонецПроцедуры

&НаСервере
Функция СоздатьПлатежныеДокументыНаСервере(СпособОплаты)

	Если СпособОплаты = Перечисления.СпособыУплатыНалогов.БанковскийПеревод Тогда
		
		СчетОрганизации = БанковскийСчетОрганизации(Организация);
		Если Не ЗначениеЗаполнено(СчетОрганизации) Тогда
			ТекстСообщения = НСтр("ru = 'Укажите банковский счет в реквизитах организации'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Организация);
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	СозданныеДокументы = Новый Массив;
	Если ОплатитьПрошлыеГоды Тогда
		
		ТаблицаПлатежей = ПодготовитьТаблицуПлатежейПрошлыхГодов();
		
		СтруктураПараметров = Новый Структура;
		
		СтруктураПараметров.Вставить("Организация",     Организация);
		СтруктураПараметров.Вставить("НалоговыйПериод", Дата(ГодТекущий - 1, 1, 1));
		СтруктураПараметров.Вставить("ПериодСобытия",   КонецГода(Дата(ГодТекущий - 1, 1, 1)));
		СтруктураПараметров.Вставить("Платежи",         ПоместитьВоВременноеХранилище(ТаблицаПлатежей));
		СтруктураПараметров.Вставить("СпособОплаты",    СпособОплаты);
		СтруктураПараметров.Вставить("СчетОрганизации", СчетОрганизации);
		
		НачатьТранзакцию();
		МассивПлатежейПрошлогоГода = Обработки.ФормированиеПлатежныхПорученийНаУплатуНалогов.СоздатьПлатежныеДокументы(СтруктураПараметров);
		НалоговыйПериодИКБКПлатежейПрошлогоГода(МассивПлатежейПрошлогоГода, ГодТекущий);
		ЗафиксироватьТранзакцию();
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СозданныеДокументы, МассивПлатежейПрошлогоГода);
			
	КонецЕсли;
	
	Если ОплатитьТекущийГод Тогда
		
		ТаблицаПлатежей = ПодготовитьТаблицуТекущегоГода();
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Правило",         Правило);
		СтруктураПараметров.Вставить("ПериодСобытия",   Период);
		СтруктураПараметров.Вставить("Организация",     Организация);
		СтруктураПараметров.Вставить("НалоговыйПериод", Дата(ГодТекущий, 1, 1));
		СтруктураПараметров.Вставить("Платежи",         ПоместитьВоВременноеХранилище(ТаблицаПлатежей));
		СтруктураПараметров.Вставить("СпособОплаты",    СпособОплаты);
		СтруктураПараметров.Вставить("СчетОрганизации", СчетОрганизации);
		
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(СозданныеДокументы,
			Обработки.ФормированиеПлатежныхПорученийНаУплатуНалогов.СоздатьПлатежныеДокументы(СтруктураПараметров));
		
	КонецЕсли;
	
	ПодготовитьФормуНаСервере();
	
	Возврат СозданныеДокументы;
	
КонецФункции

&НаСервереБезКонтекста
Процедура НалоговыйПериодИКБКПлатежейПрошлогоГода(МассивДокументов, ГодТекущий)
	
	Для Каждого ЭлементМассива Из МассивДокументов Цикл
		
		ДокументОбъект = ЭлементМассива.ПолучитьОбъект();
		ГодПрошлый = ГодТекущий - 1;
		Период = Дата(ГодПрошлый, 1, 1);
		ДокументОбъект.ПоказательПериода = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(
			Период,
			ПлатежиВБюджетКлиентСервер.ПериодичностьГод(),
			ГодПрошлый);
			
		Если ГодПрошлый = 2016 Тогда // устанавливаем КБК, применяемый до 2017 года
			
			ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументОбъект.Налог, "ВидНалога");
			ШаблонКБК = ПлатежиВБюджетКлиентСервер.КодГлавногоАдминистратора(ДокументОбъект.КодБК) + ПлатежиВБюджетКлиентСервер.ШаблонКБК(ДокументОбъект.КодБК, Истина);
			ДокументОбъект.КодБК = Справочники.ВидыНалоговИПлатежейВБюджет.КБКПоВидуНалоговогоОбязательства(
				ШаблонКБК, ВидНалога, ДокументОбъект.ВидНалоговогоОбязательства, ДокументОбъект.Дата, Дата(ГодПрошлый, 1, 1));
				
		КонецЕсли;
			
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция УстановитьСостояниеПослеОплаты()

	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.КассаОрганизации); // 50.01
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетныеСчета);   // 51
	СчетаУчетаДС = БухгалтерскийУчет.СформироватьМассивСубсчетовПоОтбору(МассивСчетов);
	
	СчетаВзносовИП = Новый Массив;
	СчетаВзносовИП.Добавить(ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП);        // 69.06.5
	СчетаВзносовИП.Добавить(ПланыСчетов.Хозрасчетный.ФОМС_СтраховойГод); // 69.06.3
	
	ВидыНалоговыхПлатежей = Перечисления.ВидыПлатежейВГосБюджет.ВидыНалоговыхПлатежей();
	ВидыНалоговыхПлатежей.Добавить(Перечисления.ВидыПлатежейВГосБюджет.ПениАкт);
	ВидыНалоговыхПлатежей.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Штраф);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстаток,
	|	0 КАК СуммаУплачено
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Период,
	|			Счет В (&СчетаВзносовИП),
	|			,
	|			Организация = &Организация
	|				И Субконто1 В (&ВидыНалоговыхПлатежей)) КАК ХозрасчетныйОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	ЕСТЬNULL(ХозрасчетныйОбороты.СуммаОборотДт, 0)
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоВыполнения,
	|			,
	|			,
	|			Счет В (&СчетаВзносовИП),
	|			&ВидыСубконто,
	|			Организация = &Организация
	|				И Субконто1 В (&ВидыНалоговыхПлатежей),
	|			КорСчет В (&СчетаУчетаДС),
	|			) КАК ХозрасчетныйОбороты");
	Запрос.УстановитьПараметр("Период", Новый Граница(НачалоГода(Период) - 1, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("НачалоВыполнения", НачалоГода(Период));
	Запрос.УстановитьПараметр("СчетаВзносовИП", СчетаВзносовИП);
	Запрос.УстановитьПараметр("СчетаУчетаДС", СчетаУчетаДС);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидыНалоговыхПлатежей", ВидыНалоговыхПлатежей);
	Запрос.УстановитьПараметр("ВидыСубконто", ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	
	СуммаОстаток = 0;
	СуммаУплачено = 0;
	Выборка = Запрос.Выполнить().Выбрать();
	// Отрицательная сумма означает задолженность по налогу, положительная сумма означает переплату.
	Пока Выборка.Следующий() Цикл
		СуммаОстаток = СуммаОстаток + Выборка.СуммаОстаток;
		СуммаУплачено = СуммаУплачено + Выборка.СуммаУплачено;
	КонецЦикла;
	
	ВзносыИП = УчетСтраховыхВзносовИП.ФиксированныеСтраховыеВзносыКУплате(
		Организация, Период, Перечисления.Периодичность.Год);
	
	ОсталосьТекущихВзносовИП = ВзносыИП.СуммаВзносаПФР + ВзносыИП.СуммаВзносаФСС + ВзносыИП.СуммаВзносаФФОМС;
	
	ТекущиеВзносыИПУплачено = ВзносыИП.СуммаВзносаПФРУплачено + ВзносыИП.СуммаВзносаФССУплачено
		+ ВзносыИП.СуммаВзносаФФОМСУплачено;
		
	ОстатокЗаВычетомТекущейУплаты = СуммаОстаток + СуммаУплачено - ТекущиеВзносыИПУплачено;
	КУплатеДолг = ?(ОстатокЗаВычетомТекущейУплаты < 0, -ОстатокЗаВычетомТекущейУплаты, 0);
	
	Возврат Новый Структура("КУплатеДолг, ОсталосьТекущихВзносовИП", КУплатеДолг, ОсталосьТекущихВзносовИП);
	
КонецФункции

&НаКлиенте
Процедура Оплатить(СпособОплаты)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	// Начисляем взносы, если сумму изменяли в текущей форме.
	Если НачислитьВзносыЗаПрошлыеГоды Тогда
		НачислитьВзносыЗаПрошлыеГоды(Истина);
		НачислитьВзносыЗаПрошлыеГоды = Ложь;
	КонецЕсли;
	
	СозданныеДокументы = СоздатьПлатежныеДокументыНаСервере(СпособОплаты);
	Если СозданныеДокументы <> Неопределено Тогда;
		ОткрытьСозданныеДокументы(СозданныеДокументы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьТаблицуПлатежейПрошлыхГодов() Экспорт
	
	ТаблицаПлатежей = Обработки.ФормированиеПлатежныхПорученийНаУплатуНалогов.НоваяТаблицаПлатежей();
		
	// ПФР 69.06.5
	// Налог
	Если ПрошлыеГодыДолгПС <> 0 Тогда
		НоваяСтрока = ТаблицаПлатежей.Добавить();
		НоваяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП;
		НоваяСтрока.Субконто1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		НоваяСтрока.Сумма     = ПрошлыеГодыДолгПС;
	КонецЕсли;
	
	// Пеня
	Если ПрошлыеГодыПеняПС <> 0 Тогда
		НоваяСтрока = ТаблицаПлатежей.Добавить();
		НоваяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП;
		НоваяСтрока.Субконто1 = Перечисления.ВидыПлатежейВГосБюджет.ПениАкт;
		НоваяСтрока.Сумма     = ПрошлыеГодыПеняПС;
	КонецЕсли;
	
	// Штраф
	Если ПрошлыеГодыШтрафПС <> 0 Тогда
		НоваяСтрока = ТаблицаПлатежей.Добавить();
		НоваяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП;
		НоваяСтрока.Субконто1 = Перечисления.ВидыПлатежейВГосБюджет.Штраф;
		НоваяСтрока.Сумма     = ПрошлыеГодыШтрафПС;
	КонецЕсли;
	
	// ФФОМС 69.06.3
	// Налог
	Если ПрошлыеГодыДолгМС <> 0 Тогда
		НоваяСтрока = ТаблицаПлатежей.Добавить();
		НоваяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.ФОМС_СтраховойГод;
		НоваяСтрока.Субконто1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		НоваяСтрока.Сумма     = ПрошлыеГодыДолгМС;
	КонецЕсли;
	
	// Пеня
	Если ПрошлыеГодыПеняМС <> 0 Тогда
		НоваяСтрока = ТаблицаПлатежей.Добавить();
		НоваяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.ФОМС_СтраховойГод;
		НоваяСтрока.Субконто1 = Перечисления.ВидыПлатежейВГосБюджет.ПениАкт;
		НоваяСтрока.Сумма     = ПрошлыеГодыПеняМС;
	КонецЕсли;
	
	// Штраф
	Если ПрошлыеГодыШтрафМС <> 0 Тогда
		НоваяСтрока = ТаблицаПлатежей.Добавить();
		НоваяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.ФОМС_СтраховойГод;
		НоваяСтрока.Субконто1 = Перечисления.ВидыПлатежейВГосБюджет.Штраф;
		НоваяСтрока.Сумма     = ПрошлыеГодыШтрафМС;
	КонецЕсли;
	
	Обработки.ФормированиеПлатежныхПорученийНаУплатуНалогов.ЗаполнитьВидыНалогов(
		ТаблицаПлатежей, Организация, Дата(ГодТекущий - 1, 1, 1));
	
	Возврат ТаблицаПлатежей;
	
КонецФункции

&НаСервере
Функция ПодготовитьТаблицуТекущегоГода() Экспорт
	
	ТаблицаПлатежей = Обработки.ФормированиеПлатежныхПорученийНаУплатуНалогов.НоваяТаблицаПлатежей();
	
	// ПФР 69.06.5 Налог
	Если ТекущийГодДолгПС <> 0 Тогда
		НоваяСтрока = ТаблицаПлатежей.Добавить();
		НоваяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП;
		НоваяСтрока.Субконто1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		НоваяСтрока.Сумма     = ТекущийГодДолгПС;
	КонецЕсли;
	
	// ФФОМС 69.06.3 Налог
	Если ТекущийГодДолгМС <> 0 Тогда
		НоваяСтрока = ТаблицаПлатежей.Добавить();
		НоваяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.ФОМС_СтраховойГод;
		НоваяСтрока.Субконто1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		НоваяСтрока.Сумма     = ТекущийГодДолгМС;
	КонецЕсли;
	
	Обработки.ФормированиеПлатежныхПорученийНаУплатуНалогов.ЗаполнитьВидыНалогов(
		ТаблицаПлатежей, Организация, Дата(ГодТекущий, 1, 1));
	
	Возврат ТаблицаПлатежей;
	
КонецФункции

&НаСервереБезКонтекста
Функция БанковскийСчетОрганизации(Знач Организация)
	
	СчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
	
	УчетДенежныхСредствБП.УстановитьБанковскийСчет(
		СчетОрганизации,
		Организация,
		ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	
	Возврат СчетОрганизации;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьСозданныеДокументы(СозданныеДокументы)
	
	Если СозданныеДокументы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПервыйДокумент = СозданныеДокументы[0];
	ТипСозданныхДокументов = ТипЗнч(ПервыйДокумент);
	
	ОповеститьОбИзменении(ТипСозданныхДокументов);
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ЗадачиБухгалтера"));
	
	Если СозданныеДокументы.Количество() = 1 Тогда
		
		ПоказатьЗначение(, ПервыйДокумент);
		
	Иначе
		
		Отбор = Новый Структура;
		Отбор.Вставить("Организация", Организация);
		
		Если ТипСозданныхДокументов = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
			ИмяФормыСписка = "Документ.ПлатежноеПоручение.ФормаСписка";
		ИначеЕсли ТипСозданныхДокументов = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
			ИмяФормыСписка = "Документ.РасходныйКассовыйОрдер.ФормаСписка";
		Иначе
			Возврат;
		КонецЕсли;
		
		СписокДокументов = Новый СписокЗначений;
		СписокДокументов.ЗагрузитьЗначения(СозданныеДокументы);
		СписокВыделения = Новый Структура("Ссылка", СписокДокументов);
		
		ОткрытьФорму(ИмяФормыСписка, Новый Структура("Отбор, ТекущаяСтрока, СписокВыделения", Отбор, ПервыйДокумент, СписокВыделения), ЭтотОбъект, Истина);
		
	КонецЕсли;
	
	Оповестить("ПомощникОплатыВзносовИП_ИзменениеСостояния");
	
КонецПроцедуры

&НаКлиенте
Процедура НачислитьВзносыЗаПрошлыеГоды(ЗапуститьНеВФоне = Ложь)
	
	Если Не НачислитьВзносыЗаПрошлыеГоды Тогда
		Возврат;
	КонецЕсли;
	НачислитьВзносыЗаПрошлыеГоды = Ложь;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("Организация",             Организация);
	ПараметрыЗадания.Вставить("Период",                  НачалоГода(Период) - 1);
	ПараметрыЗадания.Вставить("ДолгПС",                  ПрошлыеГодыДолгПС);
	ПараметрыЗадания.Вставить("ПеняПС",                  ПрошлыеГодыПеняПС);
	ПараметрыЗадания.Вставить("ШтрафПС",                 ПрошлыеГодыШтрафПС);
	ПараметрыЗадания.Вставить("ДолгМС",                  ПрошлыеГодыДолгМС);
	ПараметрыЗадания.Вставить("ПеняМС",                  ПрошлыеГодыПеняМС);
	ПараметрыЗадания.Вставить("ШтрафМС",                 ПрошлыеГодыШтрафМС);
	ПараметрыЗадания.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыЗадания.Вставить("СсылкаНаОперацию",        СсылкаНаОперацию);
	ПараметрыЗадания.Вставить("ЗапуститьНеВФоне",        ЗапуститьНеВФоне);
	ПараметрыЗадания.Вставить("Состояние",               Состояние);
	ПараметрыЗадания.Вставить("ЗапросСправки",           ЗапросСправки);
	
	Результат = НачислитьВзносыЗаПрошлыеГодыВФоне(ПараметрыЗадания);

	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершениеНачисленияВзносовЗаПрошлыеГоды", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НачислитьВзносыЗаПрошлыеГодыВФоне(Знач ПараметрыЗадания)
	
	СтраховыеВзносы = Новый ТаблицаЗначений;
	СтраховыеВзносы.Колонки.Добавить("СчетДт");
	СтраховыеВзносы.Колонки.Добавить("ИмяСубконтоДт");
	СтраховыеВзносы.Колонки.Добавить("ЗначениеСубконтоДт");
	СтраховыеВзносы.Колонки.Добавить("СчетКт");
	СтраховыеВзносы.Колонки.Добавить("ИмяСубконтоКт");
	СтраховыеВзносы.Колонки.Добавить("ЗначениеСубконтоКт");
	СтраховыеВзносы.Колонки.Добавить("Сумма");
	СтраховыеВзносы.Колонки.Добавить("Содержание");
	
	Если ПараметрыЗадания.ДолгПС > 0 Тогда
		
		СтрокаСтраховыеВзносы = СтраховыеВзносы.Добавить();
		СтрокаСтраховыеВзносы.СчетДт             = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
		СтрокаСтраховыеВзносы.ИмяСубконтоДт      = "ПрочиеДоходыИРасходы";
		СтрокаСтраховыеВзносы.ЗначениеСубконтоДт = Справочники.ПрочиеДоходыИРасходы.РасходыПоУплатеСтраховыхВзносовИП;
		СтрокаСтраховыеВзносы.СчетКт             = ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП;
		СтрокаСтраховыеВзносы.ИмяСубконтоКт      = "ВидыПлатежейВГосБюджет";
		СтрокаСтраховыеВзносы.ЗначениеСубконтоКт = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		СтрокаСтраховыеВзносы.Сумма              = ПараметрыЗадания.ДолгПС;
		СтрокаСтраховыеВзносы.Содержание         = НСтр("ru = 'Начислены страховые взносы за прошлые годы'");
		
	КонецЕсли;
	
	Если ПараметрыЗадания.ПеняПС > 0 Тогда
		
		СтрокаСтраховыеВзносы = СтраховыеВзносы.Добавить();
		СтрокаСтраховыеВзносы.СчетДт             = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
		СтрокаСтраховыеВзносы.ИмяСубконтоДт      = "ПрочиеДоходыИРасходы";
		СтрокаСтраховыеВзносы.ЗначениеСубконтоДт = Справочники.ПрочиеДоходыИРасходы.РасходыПоУплатеСтраховыхВзносовИП;
		СтрокаСтраховыеВзносы.СчетКт             = ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП;
		СтрокаСтраховыеВзносы.ИмяСубконтоКт      = "ВидыПлатежейВГосБюджет";
		СтрокаСтраховыеВзносы.ЗначениеСубконтоКт = Перечисления.ВидыПлатежейВГосБюджет.ПениАкт;
		СтрокаСтраховыеВзносы.Сумма              = ПараметрыЗадания.ПеняПС;
		СтрокаСтраховыеВзносы.Содержание         = НСтр("ru = 'Начислена пеня по страховым взносам за прошлые годы'");
		
	КонецЕсли;
	
	Если ПараметрыЗадания.ШтрафПС > 0 Тогда
		
		СтрокаСтраховыеВзносы = СтраховыеВзносы.Добавить();
		СтрокаСтраховыеВзносы.СчетДт             = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
		СтрокаСтраховыеВзносы.ИмяСубконтоДт      = "ПрочиеДоходыИРасходы";
		СтрокаСтраховыеВзносы.ЗначениеСубконтоДт = Справочники.ПрочиеДоходыИРасходы.РасходыПоУплатеСтраховыхВзносовИП;
		СтрокаСтраховыеВзносы.СчетКт             = ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП;
		СтрокаСтраховыеВзносы.ИмяСубконтоКт      = "ВидыПлатежейВГосБюджет";
		СтрокаСтраховыеВзносы.ЗначениеСубконтоКт = Перечисления.ВидыПлатежейВГосБюджет.Штраф;
		СтрокаСтраховыеВзносы.Сумма              = ПараметрыЗадания.ШтрафПС;
		СтрокаСтраховыеВзносы.Содержание         = НСтр("ru = 'Начислен штраф по страховым взносам за прошлые годы'");
		
	КонецЕсли;
	
	Если ПараметрыЗадания.ДолгМС > 0 Тогда
		
		СтрокаСтраховыеВзносы = СтраховыеВзносы.Добавить();
		СтрокаСтраховыеВзносы.СчетДт             = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
		СтрокаСтраховыеВзносы.ИмяСубконтоДт      = "ПрочиеДоходыИРасходы";
		СтрокаСтраховыеВзносы.ЗначениеСубконтоДт = Справочники.ПрочиеДоходыИРасходы.РасходыПоУплатеСтраховыхВзносовИП;
		СтрокаСтраховыеВзносы.СчетКт             = ПланыСчетов.Хозрасчетный.ФОМС_СтраховойГод;
		СтрокаСтраховыеВзносы.ИмяСубконтоКт      = "ВидыПлатежейВГосБюджет";
		СтрокаСтраховыеВзносы.ЗначениеСубконтоКт = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		СтрокаСтраховыеВзносы.Сумма              = ПараметрыЗадания.ДолгМС;
		СтрокаСтраховыеВзносы.Содержание         = НСтр("ru = 'Начислены страховые взносы за прошлые годы'");
		
	КонецЕсли;
	
	Если ПараметрыЗадания.ПеняМС > 0 Тогда
		
		СтрокаСтраховыеВзносы = СтраховыеВзносы.Добавить();
		СтрокаСтраховыеВзносы.СчетДт             = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
		СтрокаСтраховыеВзносы.ИмяСубконтоДт      = "ПрочиеДоходыИРасходы";
		СтрокаСтраховыеВзносы.ЗначениеСубконтоДт = Справочники.ПрочиеДоходыИРасходы.РасходыПоУплатеСтраховыхВзносовИП;
		СтрокаСтраховыеВзносы.СчетКт             = ПланыСчетов.Хозрасчетный.ФОМС_СтраховойГод;
		СтрокаСтраховыеВзносы.ИмяСубконтоКт      = "ВидыПлатежейВГосБюджет";
		СтрокаСтраховыеВзносы.ЗначениеСубконтоКт = Перечисления.ВидыПлатежейВГосБюджет.ПениАкт;
		СтрокаСтраховыеВзносы.Сумма              = ПараметрыЗадания.ПеняМС;
		СтрокаСтраховыеВзносы.Содержание         = НСтр("ru = 'Начислена пеня по страховым взносам за прошлые годы'");
		
	КонецЕсли;
	
	Если ПараметрыЗадания.ШтрафМС > 0 Тогда
		
		СтрокаСтраховыеВзносы = СтраховыеВзносы.Добавить();
		СтрокаСтраховыеВзносы.СчетДт             = ПланыСчетов.Хозрасчетный.ПрочиеРасходы;
		СтрокаСтраховыеВзносы.ИмяСубконтоДт      = "ПрочиеДоходыИРасходы";
		СтрокаСтраховыеВзносы.ЗначениеСубконтоДт = Справочники.ПрочиеДоходыИРасходы.РасходыПоУплатеСтраховыхВзносовИП;
		СтрокаСтраховыеВзносы.СчетКт             = ПланыСчетов.Хозрасчетный.ФОМС_СтраховойГод;
		СтрокаСтраховыеВзносы.ИмяСубконтоКт      = "ВидыПлатежейВГосБюджет";
		СтрокаСтраховыеВзносы.ЗначениеСубконтоКт = Перечисления.ВидыПлатежейВГосБюджет.Штраф;
		СтрокаСтраховыеВзносы.Сумма              = ПараметрыЗадания.ШтрафМС;
		СтрокаСтраховыеВзносы.Содержание         = НСтр("ru = 'Начислен штраф по страховым взносам за прошлые годы'");
		
	КонецЕсли;
	
	ПараметрыЗадания.Вставить("СтраховыеВзносы", СтраховыеВзносы);
	ПараметрыЗадания.Вставить("Пользователь",    Пользователи.ТекущийПользователь());
	
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(ПараметрыЗадания.УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.ОжидатьЗавершение = 0;
	ПараметрыВыполненияВФоне.ЗапуститьНеВФоне  = ПараметрыЗадания.ЗапуститьНеВФоне;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("Обработки.РасчетСтраховыхВзносовИП.НачислитьВзносыЗаПрошлыеГодыВФоне", 
		ПараметрыЗадания, ПараметрыВыполненияВФоне);
	
КонецФункции

&НаКлиенте
Процедура ЗавершениеНачисленияВзносовЗаПрошлыеГоды(Результат, ДополнительныеПараметры) Экспорт
	
	Оповестить("ПомощникОплатыВзносовИП_ИзменениеСостояния");
	
	Если Не (ЗначениеЗаполнено(Результат) И Результат.Статус = "Выполнено") Тогда
		Возврат;
	КонецЕсли;
	
	СсылкаНаОперацию = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
	
	Оповестить("ПомощникОплатыВзносовИП_ИзменениеСостояния");
	
	СохранитьСостояниеПомощника(Организация, Состояние, СсылкаНаОперацию, ЗапросСправки);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВзносыЗаПрошлыеГоды()
	
	Если Не УдалитьНачислениеВзносовЗаПрошлыеГоды Тогда
		Возврат;
	КонецЕсли;
	УдалитьНачислениеВзносовЗаПрошлыеГоды = Ложь;
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	ПараметрыЗадания.Вставить("СсылкаНаОперацию",        СсылкаНаОперацию);
	ПараметрыЗадания.Вставить("Организация",             Организация);
	ПараметрыЗадания.Вставить("Состояние",               Состояние);
	ПараметрыЗадания.Вставить("ЗапросСправки",           ЗапросСправки);
	
	Результат = УдалитьВзносыЗаПрошлыеГодыВФоне(ПараметрыЗадания);

	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершениеУдалениеВзносовЗаПрошлыеГоды", ЭтотОбъект);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(Результат, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УдалитьВзносыЗаПрошлыеГодыВФоне(Знач ПараметрыЗадания)
		
	ПараметрыВыполненияВФоне = ДлительныеОперации.ПараметрыВыполненияВФоне(ПараметрыЗадания.УникальныйИдентификатор);
	ПараметрыВыполненияВФоне.ОжидатьЗавершение = 0;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("Обработки.РасчетСтраховыхВзносовИП.УдалитьВзносыЗаПрошлыеГодыВФоне", 
		ПараметрыЗадания, ПараметрыВыполненияВФоне);
	
КонецФункции

&НаКлиенте
Процедура ЗавершениеУдалениеВзносовЗаПрошлыеГоды(Результат, ДополнительныеПараметры) Экспорт
	
	СсылкаНаОперацию = Неопределено;
	Оповестить("ПомощникОплатыВзносовИП_ИзменениеСостояния");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РезультатПолучитьСправку()
	
	Возврат "ПолучитьСправку";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РезультатПрошлыеГодыОплачены()
	
	Возврат "ПрошлыеГодыОплачены";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РезультатЕстьДолги()
	
	Возврат "ЕстьДолги";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РезультатПодготовитьЗаявление()
	
	Возврат "ПодготовитьЗаявление";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РезультатВНалоговуюНеПойду()
	
	Возврат "ВНалоговуюНеПойду";
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РезультатВведенаЗадолженность()
	
	Возврат "ВведенаЗадолженность";
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ОжиданиеСправкиИзФНС()
	
	Если Состояние <> ПредопределенноеЗначение("Перечисление.СостоянияПомощникаОплатыСтраховыхВзносовИП.ЗапрошенаСправкаОСостоянииРасчетов") Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = ПолучитьОтветИОН(ЗапросСправки);
	Если Не ЗначениеЗаполнено(РезультатЗапроса) Тогда
		ПодключитьОбработчикОжидания("Подключаемый_ОжиданиеСправкиИзФНС", 10, Истина);
	Иначе
		ПолученаСправкаИзИнтернет(РезультатЗапроса);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолученаСправкаИзИнтернет(РезультатЗапроса)
	
	РасширениеСправки = РезультатЗапроса.РасширениеФайла;
	Состояние = Перечисления.СостоянияПомощникаОплатыСтраховыхВзносовИП.ПолученаСправкаОСостоянииРасчетов;
	СохранитьСостояниеПомощника(Организация, Состояние, СсылкаНаОперацию, ЗапросСправки);
	ПодготовитьФормуНаСервере();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОтветИОН(ЗапросИОН)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗапросИОН", ЗапросИОН);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ОтветыНаЗапросыИОН.ИмяФайла КАК ИмяФайла,
	|	ОтветыНаЗапросыИОН.Данные КАК Данные
	|ИЗ
	|	РегистрСведений.ОтветыНаЗапросыИОН КАК ОтветыНаЗапросыИОН
	|ГДЕ
	|	ОтветыНаЗапросыИОН.Запрос = &ЗапросИОН";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий()
		И СтрНайти(Выборка.ИмяФайла, "IU_SPKR") > 0 Тогда
			
		Результат = Новый Структура;
		РасширениеФайла = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(Выборка.ИмяФайла);
		ДвоичныеДанные = Выборка.Данные.Получить();
		Возврат Новый Структура("РасширениеФайла, АдресФайла",
			РасширениеФайла, ПоместитьВоВременноеХранилище(ДвоичныеДанные));
		
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

#Область ПроверкаРеквизитовДляОтчетности

&НаСервере
Процедура ПроверитьРеквизитыОрганизацииДляОтчетности()
	
	Если ЭтоАдресВременногоХранилища(АдресХранилищаНезаполненныхРеквизитов) Тогда
		УдалитьИзВременногоХранилища(АдресХранилищаНезаполненныхРеквизитов);
		АдресХранилищаНезаполненныхРеквизитов = "";
	КонецЕсли;
	
	НезаполненныеРеквизиты = Неопределено;
	РеквизитыОрганизацииЗаполнены = РеквизитыДляОтчетностиЗаполнены(Организация, НезаполненныеРеквизиты);
	
	Если НЕ РеквизитыОрганизацииЗаполнены Тогда
		АдресХранилищаНезаполненныхРеквизитов = ПоместитьВоВременноеХранилище(НезаполненныеРеквизиты, УникальныйИдентификатор);
	КонецЕсли;
	
	Элементы.СообщениеТребуютсяРеквизиты.Видимость =
		(ЗначениеЗаполнено(Организация) И НЕ РеквизитыОрганизацииЗаполнены);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПроверяемыеРеквизитыДляОтчетности()
	
	СтрокаРеквизиты = "ИНН,ФамилияИП,ИмяИП,Адрес,ИПРегистрационныйНомерПФР,КодПоОКТМО,КодОрганаПФР";
	СтрокаРеквизиты = СтрЗаменить(СтрокаРеквизиты, " ", "");
	Возврат СтрРазделить(СтрокаРеквизиты, ",", Ложь);
	
КонецФункции 

&НаСервере
Функция РеквизитыДляОтчетностиЗаполнены(Организация, НезаполненныеРеквизиты)
	
	Возврат ОрганизацииФормыДляОтчетности.РеквизитыЗаполнены(
		Организация,
		ПроверяемыеРеквизитыДляОтчетности(),
		НезаполненныеРеквизиты);
	
КонецФункции

#КонецОбласти

#КонецОбласти