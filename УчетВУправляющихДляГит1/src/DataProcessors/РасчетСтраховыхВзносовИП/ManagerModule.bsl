#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Конструктор таблицы, описывающей параметры задач, необходимые для расчета статуса задачи.
//
Функция НовыеПараметрыЗадач() Экспорт
	
	ПараметрыЗадач = РегистрыСведений.ЗадачиБухгалтера.КлючиЗадач();
	
	ПараметрыЗадач.Колонки.Добавить("Статус", РегистрыСведений.ЗадачиБухгалтера.ТипСтатуса());
	ПараметрыЗадач.Колонки.Добавить("ИдентификаторПравила",
		ОбщегоНазначения.ОписаниеТипаСтрока(Метаданные.Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ДлинаНаименования));
	
	Возврат ПараметрыЗадач;
	
КонецФункции

// Заполняет в переданной таблице ПараметрыЗадач колонку Статус.
//
// Параметры:
//  ПараметрыЗадач - ТаблицаЗначений - Состав колонок см. НовыеПараметрыЗадачи()
//
Процедура ЗаполнитьСтатусыЗадач(ПараметрыЗадач) Экспорт
	
	Для Каждого ПараметрыЗадачи Из ПараметрыЗадач Цикл
		
		ПараметрыЗадачи.Статус = СтатусУплатыВзносов(ПараметрыЗадачи);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает массив видов налогов, которые соответствуют страховым взносам для организации.
//
// Параметры:
//  Организация	 - СправочникСсылка.Организация - Организация, для которой нужно определить виды налогов.
//  Период		 - Дата - Период, на который нужно определить виды налогов.
// 
// Возвращаемое значение:
//   - Массив значений Перечисления.ВидыНалогов - список видов налогов, который соответствует страховым взносам.
//
Функция ВидыНалоговПоСтраховымВзносам(Организация, Период) Экспорт
	
	ВидыНалогов = Новый Массив;
	ВидыНалогов.Добавить(Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть);
	ВидыНалогов.Добавить(Перечисления.ВидыНалогов.ФиксированныеВзносы_ФФОМС);
	Если УчетнаяПолитика.УплачиватьДобровольныеВзносыВФСС(Организация, Период) Тогда
		ВидыНалогов.Добавить(Перечисления.ВидыНалогов.ФиксированныеВзносы_ФСС);
	КонецЕсли;
	
	Возврат ВидыНалогов;
	
КонецФункции

// Проверяет, относится ли переданный налог к фиксированным страховым взносам ИП.
//
// Параметры:
//  Налог  - СправочникСсылка.ВидыНалоговИПлатежейВБюджет - проверяемый налог.
//
// Возвращаемое значение:
//   Булево  - если Истина, налог относится к фиксированным страховым взносам ИП.
//
Функция ЭтоФиксированныеВзносы(Налог) Экспорт
	
	Если Не ЗначениеЗаполнено(Налог) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВидНалога = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Налог, "ВидНалога");
	
	Возврат ПлатежиВБюджетКлиентСерверПереопределяемый.ЭтоФиксированныеВзносы(ВидНалога);
	
КонецФункции

Функция СведенияОбОрганизации(Организация, Период) Экспорт
	
	Сведения = Новый Структура;
	
	Сведения.Вставить("Организация",             Организация);
	Сведения.Вставить("ДатаНачалаДеятельности",  КалендарьБухгалтера.ДатаНачалаДеятельности(Организация));
	Сведения.Вставить("ГодНачалаДеятельности",   Год(Сведения.ДатаНачалаДеятельности));
	Сведения.Вставить("ГодТекущий",              Год(Период));
	Сведения.Вставить("РегистрацияВЭтомГоду",    Ложь);
	Сведения.Вставить("РегистрацияВПрошломГоду", Ложь);
	Сведения.Вставить("РегистрацияДо3Лет",       Ложь);
	Сведения.Вставить("РегистрацияБолее3Лет",    Ложь);
	Сведения.Вставить("ФНС_Наименование",        "");
	Сведения.Вставить("ФНС_Телефоны",            "");
	Сведения.Вставить("ФНС_Адрес",               "");
	
	УстановитьПривилегированныйРежим(Истина);
	ДатаНачалаИспользованияЭДО = ИнтерфейсыВзаимодействияБРОВызовСервера.ДатаПодключения1СОтчетности(Организация);
	УстановитьПривилегированныйРежим(Ложь);
	Сведения.Вставить("Подключена1СОтчетность", ЗначениеЗаполнено(ДатаНачалаИспользованияЭДО)
		И ДатаНачалаИспользованияЭДО <= Период);
	
	Сведения.Вставить("СостояниеПомощника",
		РегистрыСведений.СостоянияПомощникаОплатыСтраховыхВзносовИП.ПолучитьСостояниеПомощника(Организация).Состояние);
	
	ПрошлоЛетСРегистрации = Сведения.ГодТекущий - Сведения.ГодНачалаДеятельности;
	
	Если ПрошлоЛетСРегистрации = 0 Тогда
		Сведения.РегистрацияВЭтомГоду = Истина;
	ИначеЕсли ПрошлоЛетСРегистрации = 1 Тогда
		Сведения.РегистрацияВПрошломГоду = Истина;
	ИначеЕсли (ПрошлоЛетСРегистрации > 1 И ПрошлоЛетСРегистрации <= 3) Тогда
		Сведения.РегистрацияДо3Лет = Истина;
	Иначе
		Сведения.РегистрацияБолее3Лет = Истина;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Сведения, ДанныеГосударственныхОрганов.РеквизитыНалоговогоОрганаПоОрганизации(Организация));
	
	Возврат Сведения;
	
КонецФункции

Процедура НачислитьВзносыЗаПрошлыеГодыВФоне(Параметры, АдресРезультата) Экспорт
	
	Период           = Параметры.Период;
	Организация      = Параметры.Организация;
	Пользователь     = Параметры.Пользователь;
	СсылкаНаОперацию = Параметры.СсылкаНаОперацию;
	СтраховыеВзносы  = Параметры.СтраховыеВзносы;
	
	ТекстСодержания = НСтр("ru = 'Начисление страховых взносов ИП за прошлые годы'");
	
	Если ЗначениеЗаполнено(СсылкаНаОперацию) Тогда
		ОперацияБУ = СсылкаНаОперацию.ПолучитьОбъект();
	Иначе
		ОперацияБУ = Документы.ОперацияБух.СоздатьДокумент();
	КонецЕсли;
	
	ОперацияБУ.Дата          = Период;
	ОперацияБУ.Организация   = Организация;
	ОперацияБУ.Ответственный = Пользователь;
	
	ТекстСодержания = НСтр("ru = 'Начисление страховых взносов ИП за прошлые годы'");
	ОперацияБУ.Содержание = ТекстСодержания;
	
	ТекстКомментария = СтрШаблон(
		Нстр("ru = '#Создан автоматически обработкой ""Уплата фиксированных страховых взносов"", дата создания - %1'"), 
		ТекущаяДатаСеанса());
	ОперацияБУ.Комментарий = ТекстКомментария;
	
	ОперацияБУ.ДополнительныеСвойства.Вставить("НеИзменятьРегистрациюВПоследовательности", Истина);
	ОперацияБУ.ДополнительныеСвойства.Вставить("НеПроверятьОграничения", Истина);
	ОперацияБУ.Записать(РежимЗаписиДокумента.Запись);
	
	Набор = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	Набор.Отбор.Регистратор.Установить(ОперацияБУ.Ссылка, Истина);
	Для Каждого СтрокаСтраховыеВзносы Из СтраховыеВзносы Цикл
		
		Проводка = Набор.Добавить();
		
		Проводка.Активность  = Истина;
		Проводка.Организация = Организация;
		Проводка.Период      = Период;
		Проводка.СчетДт      = СтрокаСтраховыеВзносы.СчетДт;
		Проводка.СчетКт      = СтрокаСтраховыеВзносы.СчетКт;
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетДт,
			Проводка.СубконтоДт,
			СтрокаСтраховыеВзносы.ИмяСубконтоДт,
			СтрокаСтраховыеВзносы.ЗначениеСубконтоДт);
		БухгалтерскийУчет.УстановитьСубконто(
			Проводка.СчетКт,
			Проводка.СубконтоКт,
			СтрокаСтраховыеВзносы.ИмяСубконтоКт,
			СтрокаСтраховыеВзносы.ЗначениеСубконтоКт);
		Проводка.Сумма       = СтрокаСтраховыеВзносы.Сумма;
		Проводка.Содержание  = СтрокаСтраховыеВзносы.Содержание;
		
	КонецЦикла;
	
	Набор.Записать(Истина);
	
	ПоместитьВоВременноеХранилище(ОперацияБУ.Ссылка, АдресРезультата);
	
	СохранитьСостоянияПомощника(Параметры);
	
КонецПроцедуры

Процедура УдалитьВзносыЗаПрошлыеГодыВФоне(Параметры, АдресРезультата) Экспорт
	
	СсылкаНаОперацию = Параметры.СсылкаНаОперацию;
	
	ТекстСодержания = НСтр("ru = 'Начисление страховых взносов ИП за прошлые годы'");
	
	Если Не ЗначениеЗаполнено(СсылкаНаОперацию) Тогда
		Возврат;
	КонецЕсли;
		
	ОперацияБУ = СсылкаНаОперацию.ПолучитьОбъект();
	ОперацияБУ.УстановитьПометкуУдаления(Истина);
	Набор = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
	Набор.Отбор.Регистратор.Установить(ОперацияБУ.Ссылка, Истина);
	Набор.Записать(Истина);
	
	Параметры.СсылкаНаОперацию = Неопределено;
	СохранитьСостоянияПомощника(Параметры);
	
КонецПроцедуры

Функция ДолгиПоВзносам(Организация, Период) Экспорт
	
	ВидыНалоговыхПлатежей = Новый Массив;
	ВидыНалоговыхПлатежей.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
	ВидыНалоговыхПлатежей.Добавить(Перечисления.ВидыПлатежейВГосБюджет.ПениАкт);
	ВидыНалоговыхПлатежей.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Штраф);
	
	СчетаВзносовИП = Новый Массив;
	СчетаВзносовИП.Добавить(ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП);
	СчетаВзносовИП.Добавить(ПланыСчетов.Хозрасчетный.ФОМС_СтраховойГод);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.Субконто1 КАК ВидПлатежа,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Период,
	|			Счет В (&СчетаВзносовИП),
	|			,
	|			Организация = &Организация
	|				И Субконто1 В (&ВидыНалоговыхПлатежей)) КАК ХозрасчетныйОстатки");
	Запрос.УстановитьПараметр("Период", Новый Граница(Период, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("СчетаВзносовИП", СчетаВзносовИП);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидыНалоговыхПлатежей", ВидыНалоговыхПлатежей);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#Область ПубликацияДанных

// Заполняет перечень доступных возвращаемых данных.
//
// Параметры:
//  ДоступныеВозвращаемыеДанные - Соответствие - данные, доступные для получения через API
//    * Ключ - Строка - Идентификатор данных
//    * Значение - Структура - см. АсинхронноеПолучениеДанных.НовыйОписаниеВозвращаемыхДанных().
//
Процедура УстановитьДоступныеВозвращаемыеДанные(ДоступныеВозвращаемыеДанные) Экспорт
	
	ОписаниеВозвращаемыхДанных = АсинхронноеПолучениеДанных.НовыйОписаниеВозвращаемыхДанных();
	ОписаниеВозвращаемыхДанных.Наименование = НСтр("ru = 'Уплата фиксированных страховых взносов'");
	ОписаниеВозвращаемыхДанных.Описание = НСтр("ru = 'Уплата фиксированных страховых взносов.'"); 
	ОписаниеВозвращаемыхДанных.МодульМенеджер = Обработки.РасчетСтраховыхВзносовИП;
	ОписаниеВозвращаемыхДанных.ТипыРезультата.Добавить(АсинхронноеПолучениеДанныхСловарь.ТипJSON());
	
	ДоступныеВозвращаемыеДанные.Вставить(ПубликуемыйИдентификатор(), ОписаниеВозвращаемыхДанных);
	
КонецПроцедуры

// Возвращает данные по идентификатору данных и переданным параметрам.
//
// Параметры:
//  ИдентификаторДанных - Строка - идентификатор данных. Может быть переопределено при обработке.
//               Указывается в качестве имени файла, возвращаемом в результате.
//   Параметры - ДвоичныеДанные - переданные параметры получения данных.
//   КодВозврата - Строка - код возврата обработчика получения данных (по умолчанию - 10200).
//   Ошибка - Булево - признак завершения выполнения метода с ошибкой.
//   СообщениеОбОшибке - Строка - текст сообщения об ошибке.
// 
// Возвращаемое значение:
//   ДвоичныеДанные - возвращаемые данные.
//
Функция ВозвращаемыеДанные(ИдентификаторДанных, Параметры, КодВозврата, Ошибка, СообщениеОбОшибке) Экспорт
	
	Если ВРег(ИдентификаторДанных) <> ВРег(ПубликуемыйИдентификатор()) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеОтчета = ПубликуемыеДанныеПомощника(Параметры, КодВозврата, Ошибка, СообщениеОбОшибке);
	ИдентификаторДанных = СтрШаблон("%1.%2", ПубликуемыйИдентификатор(), "json");
	Если ДанныеОтчета <> Неопределено Тогда
		Возврат ПолучитьДвоичныеДанныеИзСтроки(ДанныеОтчета);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Возвращает идентификатор помощника для вызова через внешний программный интерфейс.
//
// Возвращаемое значение:
//   Строка - идентификатор помощника.
//
Функция ПубликуемыйИдентификатор() Экспорт
	
	Возврат "self_insurance_payments";
	
КонецФункции

// Формирует структуру входящих настроек в формате параметров, запрашиваемых при подготовке публикуемых данных.
//
// Параметры:
//  Организация  - СправочникСсылка.Организации - организация, по которой требуются публикуемые данные помощника.
//  Период -Дата - дата в квартале, за который требуются публикуемые данные.
//
// Возвращаемое значение:
//   Структура - структура настроек для параметризации внешней ссылки.
//
Функция ВходящиеНастройкиПубликуемыхДанных(Организация, Период) Экспорт
	
	Настройки = Новый Структура;
	
	Псевдонимы = Новый Структура;
	Псевдонимы.Вставить("inn", "ИНН");
	Псевдонимы.Вставить("kpp", "КПП");
	
	РеквизитыОрганизации = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация, Псевдонимы);
	
	Настройки.Вставить("organization", РеквизитыОрганизации);
	Настройки.Вставить("date", Период);
	
	Возврат Настройки;
	
КонецФункции

// Рассчитывает сумму взноса к уплате при запросе реквизитов платежа в бюджет через внешний программный интерфейс.
//
// Параметры:
//   ПараметрыРасчета - Структура - параметры для расчета суммы налога к уплате,
//                      состав см. ПлатежиВБюджетПереопределяемый.НовыеПараметрыРасчетаНалогаКУплате().
//
// Возвращаемое значение:
//   Число - сумма взноса к уплате.
//
Функция СуммаНалогаКУплате(ПараметрыРасчета) Экспорт
	
	Организация                = ПараметрыРасчета.Организация;
	НалоговыйПериод            = ПараметрыРасчета.НалоговыйПериод;
	ВидНалога                  = ПараметрыРасчета.ВидНалога;
	ВидНалоговогоОбязательства = ПараметрыРасчета.ВидНалоговогоОбязательства;
	
	ПоддерживаемыеВидыНалогов = ВидыНалоговПоСтраховымВзносам(Организация, НалоговыйПериод);
	Если ПоддерживаемыеВидыНалогов.Найти(ВидНалога) = Неопределено Тогда
		Возврат 0;
	КонецЕсли;
	
	Периодичность = УчетСтраховыхВзносовИП.ПериодичностьУплатыФиксированныхСтраховыхВзносов(Организация, НалоговыйПериод);
	СтраховыеВзносыКУплате = СтраховыеВзносыКУплате(Организация, НалоговыйПериод, Периодичность);
	
	Если ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть
		И ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела Тогда
		Возврат СтраховыеВзносыКУплате.СуммаВзносаПФРсДоходов;
	ИначеЕсли ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть Тогда
		Возврат СтраховыеВзносыКУплате.СуммаВзносаПФР;
	ИначеЕсли ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_ФФОМС Тогда
		Возврат СтраховыеВзносыКУплате.СуммаВзносаФФОМС;
	ИначеЕсли ВидНалога = Перечисления.ВидыНалогов.ФиксированныеВзносы_ФФОМС Тогда
		Возврат СтраховыеВзносыКУплате.СуммаВзносаФСС;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Формирует таблицу для вызова обработки формирования платежных поручений
//
Функция ТаблицаПлатежейДляФормированияПлатежныхПоручений(Организация, Период, СуммыКУплате) Экспорт
	
	ТаблицаПлатежей = Обработки.ФормированиеПлатежныхПорученийНаУплатуНалогов.НоваяТаблицаПлатежей();
	
	// 69.06.5, ФиксированныеСтраховыеВзносы
	Если СуммыКУплате.СуммаВзносаПФР <> 0 Тогда
		НоваяСтрока = ТаблицаПлатежей.Добавить();
		НоваяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП;
		НоваяСтрока.Субконто1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		НоваяСтрока.Сумма     = СуммыКУплате.СуммаВзносаПФР;
	КонецЕсли;
	
	// 69.06.5, СтраховыеВзносыСДоходов
	Если СуммыКУплате.СуммаВзносаПФРсДоходов <> 0 Тогда
		НоваяСтрока = ТаблицаПлатежей.Добавить();
		НоваяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.ПФР_ОПС_ИП;
		НоваяСтрока.Субконто1 = Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела;
		НоваяСтрока.Сумма     = СуммыКУплате.СуммаВзносаПФРсДоходов;
	КонецЕсли;
	
	// 69.06.3
	Если СуммыКУплате.СуммаВзносаФФОМС <> 0 Тогда
		НоваяСтрока = ТаблицаПлатежей.Добавить();
		НоваяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.ФОМС_СтраховойГод;
		НоваяСтрока.Субконто1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		НоваяСтрока.Сумма     = СуммыКУплате.СуммаВзносаФФОМС;
	КонецЕсли;
	
	// 69.06.4
	Если СуммыКУплате.СуммаВзносаФСС <> 0 Тогда
		НоваяСтрока = ТаблицаПлатежей.Добавить();
		НоваяСтрока.СчетУчета = ПланыСчетов.Хозрасчетный.ФСС_СтраховойГод;
		НоваяСтрока.Субконто1 = Перечисления.ВидыПлатежейВГосБюджет.Налог;
		НоваяСтрока.Сумма     = СуммыКУплате.СуммаВзносаФСС;
	КонецЕсли;
	
	Обработки.ФормированиеПлатежныхПорученийНаУплатуНалогов.ЗаполнитьВидыНалогов(
		ТаблицаПлатежей, Организация, Период);
	
	Возврат ТаблицаПлатежей;
	
КонецФункции

// Возвращает список документов на уплату взносов, отображаемых в помощнике
//
// Параметры:
//   Организация - СправочникСсылка.Организации
//   Период - Дата - период уплаты
//
// Возвращаемое значение:
//   ТаблицаЗначений, Неопределено
//
Функция ПлатежныеДокументы(Организация, Период) Экспорт
	
	Если ОбщегоНазначенияБПВызовСервераПовтИсп.ЭтоЮрЛицо(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыУплатыНалогов = ПомощникиПоУплатеНалоговИВзносов.НовыеПараметрыУплатыНалогов();
	
	ПараметрыУплатыНалогов.КодыЗадач.Добавить(ЗадачиБухгалтераКлиентСервер.КодЗадачиСтраховыеВзносыИП());
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ПараметрыУплатыНалогов.ВидыНалогов, ВидыНалоговПоСтраховымВзносам(Организация, Период), Истина);
	
	ПараметрыУплатыНалогов.ВидыНалоговыхОбязательств.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
	ПараметрыУплатыНалогов.ВидыНалоговыхОбязательств.Добавить(Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ПараметрыУплатыНалогов.ТипыДокументов, ПоддерживаемыеТипыПлатежныхДокументов());
	
	Периодичность = УчетСтраховыхВзносовИП.ПериодичностьУплатыФиксированныхСтраховыхВзносов(Организация, Период);
	
	Если Периодичность = Перечисления.Периодичность.Квартал Тогда
		НачалоПериода = НачалоКвартала(Период);
	Иначе
		НачалоПериода = НачалоГода(Период);
	КонецЕсли;
	КонецПериода = КонецДня(Период);
	
	Возврат ПомощникиПоУплатеНалоговИВзносов.ДокументыУплатыНалогов(Организация, НачалоПериода, КонецПериода, ПараметрыУплатыНалогов);
	
КонецФункции

Функция ПоддерживаемыеТипыПлатежныхДокументов()
	
	ПоддерживаемыеТипы = Новый Массив;
	
	ПоддерживаемыеТипы.Добавить(Тип("ДокументСсылка.ПлатежноеПоручение"));
	ПоддерживаемыеТипы.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	
	Возврат ПоддерживаемыеТипы;
	
КонецФункции

Процедура СохранитьСостоянияПомощника(Параметры)
	
	ДанныеРегистра = Новый Структура;
	ДанныеРегистра.Вставить("Организация",       Параметры.Организация);
	ДанныеРегистра.Вставить("Состояние",         Параметры.Состояние);
	ДанныеРегистра.Вставить("НачислениеВзносов", Параметры.СсылкаНаОперацию);
	ДанныеРегистра.Вставить("ЗапросСправки",     Параметры.ЗапросСправки);
	
	РегистрыСведений.СостоянияПомощникаОплатыСтраховыхВзносовИП.СохранитьСостояниеПомощника(ДанныеРегистра);
	
КонецПроцедуры

Функция СтатусУплатыВзносов(ПараметрыЗадачи)
	
	Статус = "";
	
	Организация          = ПараметрыЗадачи.Организация;
	ПериодСобытия        = ПараметрыЗадачи.ПериодСобытия;
	ИдентификаторПравила = ПараметрыЗадачи.ИдентификаторПравила;
	
	НачалоПериода = НачалоГода(ПериодСобытия);
	КонецПериода  = КонецКвартала(ПериодСобытия);
	
	УчитыватьВзносыСДоходов = (ИдентификаторПравила = ВыполнениеЗадачБухгалтера.ИдентификаторПравилаСтраховыеВзносыИПСДоходов());
	
	// Платежи
	
	ПараметрыУплатыНалогов = ПомощникиПоУплатеНалоговИВзносов.НовыеПараметрыУплатыНалогов();
	
	ПараметрыУплатыНалогов.КодыЗадач.Добавить(ЗадачиБухгалтераКлиентСервер.КодЗадачиСтраховыеВзносыИП());
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(
		ПараметрыУплатыНалогов.ВидыНалогов, ВидыНалоговПоСтраховымВзносам(Организация, ПериодСобытия), Истина);
	
	ПараметрыУплатыНалогов.ВидыНалоговыхОбязательств.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
	Если УчитыватьВзносыСДоходов Тогда
		ПараметрыУплатыНалогов.ВидыНалоговыхОбязательств.Добавить(Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела);
	КонецЕсли;
	
	Платежи = ПомощникиПоУплатеНалоговИВзносов.ДокументыУплатыНалогов(Организация, НачалоПериода, КонецПериода, ПараметрыУплатыНалогов);
	
	ПлатежиПоВзносам = РазделитьПлатежиПоВидамВзносов(Платежи);
	
	// Расчетные суммы "постоянных" фиксированных взносов
	
	ФиксированныеВзносы = УчетСтраховыхВзносовИП.РассчитатьФиксированныеСтраховыеВзносы(КонецПериода, Организация);
	
	ОстаткиРасчетовПоВзносам = УчетСтраховыхВзносовИП.ОстатокРасчетовПоВзносамЗаПредыдущиеСтраховыеПериодыИнтеграцияСБанком(
		Организация,
		НачалоПериода);
	
	// Состояние оплаты "постоянных" фиксированных взносов
	
	ВсегоКУплате = 0;
	
	Для Каждого КлючИЗначение Из ВсеФиксированныеВзносы() Цикл
		
		ВидВзноса = КлючИЗначение.Ключ;
		
		Начислено = ФиксированныеВзносы[ВидВзноса];
		Переплата = Макс(0, ОстаткиРасчетовПоВзносам[ВидВзноса]);
		Оплачено  = ПомощникиПоУплатеНалоговИВзносов.СуммаОплаты(ПлатежиПоВзносам["Платежи" + ВидВзноса]);
		КУплате   = Макс(0, Начислено - Переплата - Оплачено);
		
		ВсегоКУплате = ВсегоКУплате + КУплате;
		
	КонецЦикла;
	
	// Статус годовой задачи по взносам с доходов определяется исходя из уплаты всех взносов -
	// и "постоянной" части, и взносов с доходов.
	// При этом, если определили, что постоянная часть взносов не оплачена,
	// то состояние оплаты взносов с доходов на статус уже не повлияет.
	
	Если УчитыватьВзносыСДоходов И ВсегоКУплате = 0 Тогда
		
		СтруктураДоходов = УчетСтраховыхВзносовИП.СтруктураДоходовПоВидамДеятельности(
			Организация, НачалоПериода, КонецПериода);
		
		СтраховыеВзносыСДоходовКУплате = УчетСтраховыхВзносовИП.СтраховыеВзносыСДоходовКУплате(
			Организация, КонецПериода, СтруктураДоходов, Ложь);
		
		Начислено = СтраховыеВзносыСДоходовКУплате.СуммаВзносаПФРсДоходовВсего;
		Оплачено  = ПомощникиПоУплатеНалоговИВзносов.СуммаОплаты(ПлатежиПоВзносам.ПлатежиПФРсДоходов);
		КУплате   = Макс(0, Начислено - Оплачено);
		
		ВсегоКУплате = ВсегоКУплате + КУплате;
		
	КонецЕсли;
	
	Если ВсегоКУплате = 0 Тогда
		Статус = "Оплачено";
	КонецЕсли;
	
	Возврат Статус;
	
КонецФункции

Функция РазделитьПлатежиПоВидамВзносов(Платежи) Экспорт
	
	Результат = Новый Структура("ПлатежиПФР, ПлатежиПФРсДоходов, ПлатежиФФОМС, ПлатежиФСС");
	
	Если ТипЗнч(Платежи) <> Тип("ТаблицаЗначений") Тогда
		Возврат Результат;
	КонецЕсли;
	
	Отбор = ПараметрыОтбораПлатежейПоВзносам();
	
	Результат.ПлатежиПФР         = Платежи.Скопировать(Отбор.ПФР);
	Результат.ПлатежиПФРсДоходов = Платежи.Скопировать(Отбор.ПФРсДоходов);
	Результат.ПлатежиФФОМС       = Платежи.Скопировать(Отбор.ФФОМС);
	Результат.ПлатежиФСС         = Платежи.Скопировать(Отбор.ФСС);
	
	Возврат Результат;
	
КонецФункции

Функция ПараметрыОтбораПлатежейПоВзносам()
	
	Результат = Новый Структура;
	
	// ПФР
	Свойства = Новый Структура;
	Свойства.Вставить("ВидНалога", Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть);
	Свойства.Вставить("ВидНалоговогоОбязательства", Перечисления.ВидыПлатежейВГосБюджет.Налог);
	
	Результат.Вставить("ПФР", Свойства);
	
	// ПФР с доходов
	Свойства = Новый Структура;
	Свойства.Вставить("ВидНалога", Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть);
	Свойства.Вставить("ВидНалоговогоОбязательства", Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела);
	
	Результат.Вставить("ПФРсДоходов", Свойства);
	
	// ФФОМС
	Свойства = Новый Структура;
	Свойства.Вставить("ВидНалога", Перечисления.ВидыНалогов.ФиксированныеВзносы_ФФОМС);
	Свойства.Вставить("ВидНалоговогоОбязательства", Перечисления.ВидыПлатежейВГосБюджет.Налог);
	
	Результат.Вставить("ФФОМС", Свойства);
	
	// ФСС
	Свойства = Новый Структура;
	Свойства.Вставить("ВидНалога", Перечисления.ВидыНалогов.ФиксированныеВзносы_ФСС);
	Свойства.Вставить("ВидНалоговогоОбязательства", Перечисления.ВидыПлатежейВГосБюджет.Налог);
	
	Результат.Вставить("ФСС", Свойства);
	
	Возврат Результат;
	
КонецФункции

Функция СтраховыеВзносыКУплате(Знач Организация, Знач НалоговыйПериод, Знач Периодичность) Экспорт
	
	СтраховыеВзносы = Новый Структура(СвойстваВзносыКУплате() + ", " + СвойстваВзносыНачисленоУплачено());
	
	// Доходы по видам деятельности
	СтруктураДоходов = УчетСтраховыхВзносовИП.СтруктураДоходовПоВидамДеятельности(
		Организация, НачалоГода(НалоговыйПериод), КонецКвартала(НалоговыйПериод));
	
	СтраховыеВзносы.Вставить("СтруктураДоходов", СтруктураДоходов);
	
	// Фиксированная часть страховых взносов
	ФиксированныеСтраховыеВзносыКУплате = УчетСтраховыхВзносовИП.ФиксированныеСтраховыеВзносыКУплате(
		Организация, НалоговыйПериод, Периодичность);
	
	ЗаполнитьЗначенияСвойств(СтраховыеВзносы, ФиксированныеСтраховыеВзносыКУплате);
	
	СтраховыеВзносы.Вставить("ФиксированныеСтраховыеВзносыУплаченные", ФиксированныеСтраховыеВзносыКУплате.СтраховыеВзносыУплаченные);
	
	// Страховые взносы, исчисленные с суммы доходов
	СтраховыеВзносыСДоходовКУплате = УчетСтраховыхВзносовИП.СтраховыеВзносыСДоходовКУплате(
		Организация, НалоговыйПериод, СтруктураДоходов, Ложь);
	
	ЗаполнитьЗначенияСвойств(СтраховыеВзносы, СтраховыеВзносыСДоходовКУплате);
	
	СтраховыеВзносы.Вставить("СтраховыеВзносыСДоходовУплаченные", СтраховыеВзносыСДоходовКУплате.СтраховыеВзносыУплаченные);
	
	Возврат СтраховыеВзносы;
	
КонецФункции

Функция СвойстваВзносыКУплате() Экспорт
	
	Возврат "СуммаВзносаПФР, СуммаВзносаПФРсДоходов, СуммаВзносаФФОМС, СуммаВзносаФСС";
	
КонецФункции

Функция СвойстваВзносыНачисленоУплачено() Экспорт
	
	Возврат "СтруктураДоходов, ПредельнаяСуммаВзноса,
		|СуммаВзносаПФРПереплата, СуммаВзносаФФОМСПереплата,
		|СуммаВзносаПФРВсего, СуммаВзносаПФРсДоходовВсего, СуммаВзносаФФОМСВсего, СуммаВзносаФССВсего,
		|СуммаВзносаПФРНачислено, СуммаВзносаФФОМСНачислено, СуммаВзносаФССНачислено,
		|СуммаВзносаПФРУплачено, СуммаВзносаПФРсДоходовУплачено, СуммаВзносаФФОМСУплачено, СуммаВзносаФССУплачено";
	
КонецФункции

Функция ФормулаРасчетаВзносовСДоходов(Организация, Период) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Пояснение", "");
	Результат.Вставить("Формула", "");
	Результат.Вставить("ЕстьФиксированнаяЧастьВзносов", Ложь);
	
	НачалоПериода = НачалоГода(Период);
	КонецПериода = КонецКвартала(Период);
	
	ПлательщикНДФЛ = УчетнаяПолитика.ПлательщикНДФЛЗаПериод(Организация, НачалоПериода, КонецПериода);
	
	// Доходы по видам деятельности
	СтруктураДоходов = УчетСтраховыхВзносовИП.СтруктураДоходовПоВидамДеятельности(Организация, НачалоПериода, КонецПериода);
	
	ВсегоДоходов = СтруктураДоходов.СуммаДоходаИП
		+ СтруктураДоходов.СуммаДоходаУСН
		+ СтруктураДоходов.ВмененныйДоход
		+ СтруктураДоходов.ПотенциальноВозможныйДоход;
	
	ДанныеДляРасчета = УчетСтраховыхВзносовИП.ДанныеДляРасчетаСтраховыхВзносовСДоходов(Период, Организация);
	
	ТекстПорогДоходов = Формат(ДанныеДляРасчета.ПорогДоходов, "Л=ru; ЧЦ=8; ЧДЦ=2; ЧН=0,00");
	ТекстПроцентВзносов = Формат(ДанныеДляРасчета.ПроцентВзносов, "ЧЦ=3; ЧДЦ=; ЧН=0");
	
	Результат.Пояснение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Рассчитывается как %1% от дохода свыше %2 рублей'"),
		Формат(ДанныеДляРасчета.ПроцентВзносов, "ЧЦ=1; ЧДЦ=; ЧН=0"),
		Формат(ДанныеДляРасчета.ПорогДоходов, "Л=ru; ЧЦ=8; ЧДЦ=; ЧН=0"));
	
	Если ПлательщикНДФЛ
		И Период >= УчетСтраховыхВзносовИП.ДатаНачалаУчетаРасходовПриРасчетеСтраховыхВзносовИП()
		И Год(Период) = Год(ОбщегоНазначения.ТекущаяДатаПользователя()) Тогда
		
		РасходыНаУплатуСтраховыхВзносовЗаТекущийПериод = УчетДоходовИРасходовПредпринимателя.РасходыНаУплатуСтраховыхВзносовЗаТекущийПериод(Организация, Период);
		ВсегоДоходов = ВсегоДоходов + РасходыНаУплатуСтраховыхВзносовЗаТекущийПериод;
		ФиксированнаяЧастьВзносов = ДанныеДляРасчета.ФиксированнаяЧастьПФР + ДанныеДляРасчета.ФиксированнаяЧастьФФОМС;
		
		Результат.Формула = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("( %1 - %2 - %3 ) x %4",
			Формат(ВсегоДоходов, "Л=ru; ЧЦ=15; ЧДЦ=2; ЧН=0,00"),
			Формат(ФиксированнаяЧастьВзносов, "Л=ru; ЧЦ=7; ЧДЦ=2; ЧН=0,00"),
			Формат(ДанныеДляРасчета.ПорогДоходов, "Л=ru; ЧЦ=8; ЧДЦ=2; ЧН=0,00"),
			Формат(ДанныеДляРасчета.ПроцентВзносов, "ЧЦ=3; ЧДЦ=; ЧН=0") + "/" + Формат(100 + ДанныеДляРасчета.ПроцентВзносов, "ЧЦ=3; ЧДЦ=; ЧН=0"));
			
		Результат.ЕстьФиксированнаяЧастьВзносов = Истина;
	Иначе
		Результат.Формула = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("( %1 - %2 ) x %3",
			Формат(ВсегоДоходов, "Л=ru; ЧЦ=15; ЧДЦ=2; ЧН=0,00"),
			Формат(ДанныеДляРасчета.ПорогДоходов, "Л=ru; ЧЦ=8; ЧДЦ=2; ЧН=0,00"),
			Формат(ДанныеДляРасчета.ПроцентВзносов, "ЧЦ=1; ЧДЦ=; ЧН=0") + "%");
		Результат.ЕстьФиксированнаяЧастьВзносов = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция РеквизитыДляОтчетностиЗаполнены(Знач Организация, НезаполненныеРеквизиты) Экспорт
	
	Возврат ОрганизацииФормыДляОтчетности.РеквизитыЗаполнены(
		Организация,
		ПроверяемыеРеквизитыДляОтчетности(),
		НезаполненныеРеквизиты);
	
КонецФункции

Функция ПроверяемыеРеквизитыДляОтчетности() Экспорт
	
	Реквизиты = Новый Массив;
	Реквизиты.Добавить("ИНН");
	Реквизиты.Добавить("ФамилияИП");
	Реквизиты.Добавить("ИмяИП");
	Реквизиты.Добавить("Адрес");
	Реквизиты.Добавить("КодПоОКТМО");
	Реквизиты.Добавить("КодНалоговогоОргана");
	Реквизиты.Добавить("НаименованиеНалоговогоОргана");
	
	Возврат Реквизиты;
	
КонецФункции

Функция ТекстОписанияОбъектаПроверкиРеквизитовДляОтчетности() Экспорт
	
	Возврат НСтр("ru='уплаты фиксированных страховых взносов'");
	
КонецФункции

Функция ВсеРассчитываемыеВзносы()
	
	ВсеВзносы = Новый Структура;
	ВсеВзносы.Вставить("ПФР", "ПФР");
	ВсеВзносы.Вставить("ПФРсДоходов", "ПФРсДоходов");
	ВсеВзносы.Вставить("ФФОМС", "ФФОМС");
	ВсеВзносы.Вставить("ФСС", "ФСС");
	
	Возврат ВсеВзносы;
	
КонецФункции

Функция ВсеФиксированныеВзносы()
	
	ФиксированныеВзносы = Новый Структура;
	ФиксированныеВзносы.Вставить("ПФР", "ПФР");
	ФиксированныеВзносы.Вставить("ФФОМС", "ФФОМС");
	ФиксированныеВзносы.Вставить("ФСС", "ФСС");
	
	Возврат ФиксированныеВзносы;
	
КонецФункции

Функция ПредупрежденияПриЗагрузкеВыписки(Организация, НачалоПериода, КонецПериода) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ЕстьОшибкиЗагрузкиВыписки", Ложь);
	Результат.Вставить("ТекстОшибкиЗагрузкиВыписки", "");
	
	Если Не ЗначениеЗаполнено(Организация) Или Не ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПараметрыОтбораПредупреждений = РегистрыСведений.ПредупрежденияПриЗагрузкеВыписки.НовыеПараметрыОтбораПредупреждений();
	ПараметрыОтбораПредупреждений.Организация = Организация;
	ПараметрыОтбораПредупреждений.НачалоПериода = НачалоПериода;
	ПараметрыОтбораПредупреждений.КонецПериода = КонецПериода;
	ПараметрыОтбораПредупреждений.ТипДокументов = "ПоступлениеНаРасчетныйСчет";
	
	Результат.ЕстьОшибкиЗагрузкиВыписки =
		РегистрыСведений.ПредупрежденияПриЗагрузкеВыписки.ЕстьПредупрежденияВСписке(ПараметрыОтбораПредупреждений);
	
	Результат.ТекстОшибкиЗагрузкиВыписки = ТекстПредупрежденияПриЗагрузкеВыписки();
	
	Возврат Результат;
	
КонецФункции

Функция ТекстПредупрежденияПриЗагрузкеВыписки()
	
	ТекстПредупреждения = НСтр("ru = 'Проверьте загрузку <a href = ""ОткрытьДоходы"">доходов</a> из банка'");
	
	Возврат СтроковыеФункцииКлиентСервер.ФорматированнаяСтрока(ТекстПредупреждения);
	
КонецФункции

#Область ПубликацияДанных

Функция ПубликуемыеДанныеПомощника(Настройки, КодВозврата, Ошибка, СообщениеОбОшибке)
	
	Перем ОрганизацияИНН, ОрганизацияКПП;
	
	Словарь = АсинхронноеПолучениеДанныхСловарь;
	
	// Читаем настройки
	НастройкиСтруктурой = ПрочитатьНастройки(Настройки, СообщениеОбОшибке);
	Если Не ПустаяСтрока(СообщениеОбОшибке) Тогда
		КодВозврата = Словарь.КодВозвратаОшибкаДанных();
		Ошибка = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	Если НастройкиСтруктурой.Свойство("organization") Тогда
		НастройкиСтруктурой.organization.Свойство("inn", ОрганизацияИНН);
		НастройкиСтруктурой.organization.Свойство("kpp", ОрганизацияКПП);
		
		Организация = Справочники.Организации.НайтиОрганизацию(ОрганизацияИНН, ОрганизацияКПП, Ложь);
	Иначе
		Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		КодВозврата = Словарь.КодВозвратаОшибкаДанных();
		Ошибка = Истина;
		СообщениеОбОшибке = НСтр("ru = 'Не удалось найти организацию по переданным настройкам.'");
		Возврат Неопределено;
	КонецЕсли;
	
	НалоговыйПериод = НастройкиСтруктурой.date;
	
	Если НалоговыйПериод < УчетСтраховыхВзносовИП.ДатаНачалаУчетаСтраховыхВзносовИП() Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Расчет страховых взносов за %1 год не поддерживается'"), Формат(НалоговыйПериод, "ДФ=yyyy"));
	КонецЕсли;
	
	// Очистим стек сообщений пользователю, чтобы не записать в результат лишние.
	ПолучитьСообщенияПользователю(Истина);
	
	// Предварительно актуализируем данные.
	Если НЕ ИнтеграцияСБанками.ОбеспечитьАктуальностьПубликуемыхДанных(Организация, НалоговыйПериод, СообщениеОбОшибке) Тогда
		КодВозврата = Словарь.КодВозвратаВнутренняяОшибка();
		Ошибка = Истина;
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеПомощника = Новый Структура;
	
	СловарьПолейJSON = СловарьПолейJSON();
	
	ДанныеПомощника.Вставить(СловарьПолейJSON.Ссылки, ПубликуемыеСсылки(Организация, НалоговыйПериод));
	
	Периодичность = УчетСтраховыхВзносовИП.ПериодичностьУплатыФиксированныхСтраховыхВзносов(Организация, НалоговыйПериод);
	СтраховыеВзносыКУплате = СтраховыеВзносыКУплате(Организация, НалоговыйПериод, Периодичность);
	
	СуммыКУплате = Новый Структура(СвойстваВзносыКУплате());
	ЗаполнитьЗначенияСвойств(СуммыКУплате, СтраховыеВзносыКУплате);
	
	// Заполняем массив с описанием сумм к уплате.
	ПубликуемыеВзносы = ПубликуемыеВзносы(Организация, НалоговыйПериод);
	ОписаниеВзносов = Новый Массив;
	Для Каждого ТипВзноса Из ПубликуемыеВзносы Цикл
		ОписаниеВзносов.Добавить(
			ОписаниеБлокаРасчетаСуммыВзносов(Организация, НалоговыйПериод, СуммыКУплате, ТипВзноса.Значение));
	КонецЦикла;
	
	ДанныеПомощника.Вставить(СловарьПолейJSON.Платежи, ОписаниеВзносов);
	
	ВсегоВзносов = 0;
	Для Каждого СуммаВзноса Из СуммыКУплате Цикл
		ВсегоВзносов = ВсегоВзносов + СуммаВзноса.Значение;
	КонецЦикла;
	
	ДанныеПомощника.Вставить(СловарьПолейJSON.Всего, ВсегоВзносов);
	
	// Предупреждения
	МассивПредупреждений = Новый Массив;
	
	// Предупреждение об ошибках загрузки выписки.
	Если ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком() Тогда
		ПредупрежденияПриЗагрузкеВыписки =
			ПредупрежденияПриЗагрузкеВыписки(Организация, НачалоГода(НалоговыйПериод), КонецКвартала(НалоговыйПериод));
		
		Если ПредупрежденияПриЗагрузкеВыписки.ЕстьОшибкиЗагрузкиВыписки Тогда
			МассивПредупреждений.Добавить(Строка(ПредупрежденияПриЗагрузкеВыписки.ТекстОшибкиЗагрузкиВыписки));
		КонецЕсли;
	КонецЕсли;
	
	// Предупреждение, если не заполнены важные реквизиты организации.
	НезаполненныеРеквизиты = Неопределено;
	Если Не РеквизитыДляОтчетностиЗаполнены(Организация, НезаполненныеРеквизиты) Тогда
		ТекстОшибки = ПроверкаРеквизитовОрганизации.ТекстОшибкиЗаполненияРеквизитов(
			Организация,
			НезаполненныеРеквизиты,
			ТекстОписанияОбъектаПроверкиРеквизитовДляОтчетности(),
			Истина);
		// Возвращаем результат с предупреждением.
		МассивПредупреждений.Добавить(ТекстОшибки);
	КонецЕсли;
	
	Если МассивПредупреждений.Количество() > 0 Тогда
		// Возвращаем результат с предупреждением.
		КодВозврата = Словарь.КодВозвратаВыполненоСПредупреждениями();
		СообщениеОбОшибке = СтрСоединить(МассивПредупреждений, Символы.ПС);
	КонецЕсли;
	
	Возврат РаботаВМоделиСервисаБТС.СтрокаИзСтруктурыJSON(ДанныеПомощника);
	
КонецФункции

Функция ПрочитатьНастройки(Настройки, СообщениеОбОшибке)
	
	Перем ДанныеОрганизации;
	
	Если Настройки = Неопределено Тогда
		СообщениеОбОшибке = НСтр("ru = 'Настройки не заданы.'");
		Возврат Неопределено;
	КонецЕсли;
	
	НастройкиСтрокой = ПолучитьСтрокуИзДвоичныхДанных(Настройки);
	Если ПустаяСтрока(НастройкиСтрокой) Тогда
		СообщениеОбОшибке = НСтр("ru = 'Переданы некорректные настройки. Ожидается структура JSON.'");
		Возврат Неопределено;
	КонецЕсли;
	
	НастройкиСтруктурой = РаботаВМоделиСервисаБТС.СтруктураИзСтрокиJSON(НастройкиСтрокой, "date");
	Если ТипЗнч(НастройкиСтруктурой) <> Тип("Структура") Тогда
		СообщениеОбОшибке = НСтр("ru = 'Переданы некорректные настройки. Ожидается структура JSON.'");
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не НастройкиСтруктурой.Свойство("date") Тогда
		СообщениеОбОшибке = НСтр("ru = 'В структуре JSON отсутствует обязательное поле date'");
		Возврат Неопределено;
	КонецЕсли;
	
	// Организация может отсутствовать во входящих настройках.
	// В этом случае ошибку не возвращаем - для формирования будет использована основная организацийя.
	Если НастройкиСтруктурой.Свойство("organization", ДанныеОрганизации) Тогда
		Если Не ДанныеОрганизации.Свойство("inn") Тогда
			СообщениеОбОшибке = НСтр("ru = 'В структуре organization отсутствует обязательное поле inn'");
			Возврат Неопределено;
		КонецЕсли;
		
		Если Не ДанныеОрганизации.Свойство("kpp") И ДанныеОрганизации.Свойство("inn")
			И СтрДлина(ДанныеОрганизации.inn) = 10 Тогда
			СообщениеОбОшибке = НСтр("ru = 'В структуре organization для юридического лица отсутствует обязательное поле kpp'");
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	// Переданы корректные настройки, ошибок нет.
	Возврат НастройкиСтруктурой;
	
КонецФункции

Функция ПубликуемыеВзносы(Организация, НалоговыйПериод)
	
	ПубликуемыеВзносы = ВсеРассчитываемыеВзносы();
	
	Если Не УчетнаяПолитика.УплачиватьДобровольныеВзносыВФСС(Организация, НалоговыйПериод) Тогда
		ПубликуемыеВзносы.Удалить("ФСС");
	КонецЕсли;
	
	Возврат ПубликуемыеВзносы;
	
КонецФункции

Функция ОписаниеБлокаРасчетаСуммыВзносов(Организация, НалоговыйПериод, СуммыВзносов, ТипВзноса)
	
	ВсеВзносы = ВсеРассчитываемыеВзносы();
	СловарьПолейJSON = СловарьПолейJSON();
	
	ОписаниеБлока = Новый Структура;
	ОписаниеБлока.Вставить(СловарьПолейJSON.Тип, ТипВзноса);
	
	Если ТипВзноса = ВсеВзносы.ПФР Тогда
		ОписаниеБлока.Вставить(СловарьПолейJSON.Заголовок, НСтр("ru = 'ПФР фиксированный'"));
	ИначеЕсли ТипВзноса = ВсеВзносы.ФФОМС Тогда
		ОписаниеБлока.Вставить(СловарьПолейJSON.Заголовок, НСтр("ru = 'ФФОМС'"));
	ИначеЕсли ТипВзноса = ВсеВзносы.ФСС Тогда
		ОписаниеБлока.Вставить(СловарьПолейJSON.Заголовок, НСтр("ru = 'ФСС'"));
	ИначеЕсли ТипВзноса = ВсеВзносы.ПФРсДоходов Тогда
		ОписаниеБлока.Вставить(СловарьПолейJSON.Заголовок, НСтр("ru = 'ПФР с доходов'"));
		
		ФормулаРасчета = ФормулаРасчетаВзносовСДоходов(Организация, НалоговыйПериод);
		ОписаниеБлока.Вставить(СловарьПолейJSON.Описание, ФормулаРасчета.Пояснение + " " + ФормулаРасчета.Формула);
	КонецЕсли;
	
	ИмяПоляСуммы = "СуммаВзноса" + ТипВзноса;
	ОписаниеБлока.Вставить(СловарьПолейJSON.Сумма, СуммыВзносов[ИмяПоляСуммы]);
	
	ОписаниеБлока.Вставить(СловарьПолейJSON.Ссылка,
		ПубликуемаяСсылкаОплатыВзносов(ТипВзноса, Организация, НалоговыйПериод));
	
	Возврат ОписаниеБлока;
	
КонецФункции

Функция ПубликуемыеСсылки(Организация, НалоговыйПериод)
	
	ПубликуемыеСсылки = Новый Массив;
	
	// 1. Ссылка для перехода в 1С
	ОписаниеСсылкиПереход = ИнтеграцияСБанками.ОписаниеПубликуемойНавигационнойСсылки("goto1C",
		НСтр("ru = 'Проверить расчет в 1С'"),
		НавигационнаяСсылкаДляПубликации(Организация, НалоговыйПериод));
	
	ПубликуемыеСсылки.Добавить(ОписаниеСсылкиПереход);
	
	// 2. Ссылка для выполнения задачи бухгалтера
	ПравилоУплаты = РегистрыСведений.ЗадачиБухгалтера.ПорядокУплатыНалогаЗаПериод(
		Организация, Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть, НалоговыйПериод);
	
	Если ПравилоУплаты <> Неопределено Тогда
		ПравилоУплаты.Организация = Организация; // Из функции возвращается пустой
		
		ХешЗадачи = РегистрыСведений.ЗадачиБухгалтера.СохраненнаяХешСуммаЗадачи(ПравилоУплаты);
		ОписаниеСсылкиВыполнениеЗадачи =
			ВнешнийПрограммныйИнтерфейс.ОписаниеПубликуемойСсылкиВыполнениеЗадачи(ХешЗадачи, Истина);
		
		Если ОписаниеСсылкиВыполнениеЗадачи <> Неопределено Тогда
			ОписаниеСсылкиЗадача = ИнтеграцияСБанками.ОписаниеПубликуемойСсылкиНаСервис(
				ОписаниеСсылкиВыполнениеЗадачи.Идентификатор,
				ОписаниеСсылкиВыполнениеЗадачи.Представление,
				ОписаниеСсылкиВыполнениеЗадачи.АдресСервиса,
				ОписаниеСсылкиВыполнениеЗадачи.Параметры);
			
			ПубликуемыеСсылки.Добавить(ОписаниеСсылкиЗадача);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПубликуемыеСсылки;
	
КонецФункции

Функция НавигационнаяСсылкаДляПубликации(Организация, НалоговыйПериод)
	
	ПараметрыПубликации = РегистрыСведений.ПубликуемыеНавигационныеСсылки.ПараметрыПубликации();
	
	ПараметрыПубликации.ИмяФормы      = "Обработка.РасчетСтраховыхВзносовИП.Форма";
	ПараметрыПубликации.Организация   = Организация;
	ПараметрыПубликации.НачалоПериода = НачалоГода(НалоговыйПериод);
	ПараметрыПубликации.КонецПериода  = КонецКвартала(НалоговыйПериод);
	
	Возврат РегистрыСведений.ПубликуемыеНавигационныеСсылки.ПолучитьСсылку(ПараметрыПубликации);
	
КонецФункции

Функция ПубликуемаяСсылкаОплатыВзносов(ТипВзноса, Организация, НалоговыйПериод)
	
	ПараметрыПубликацииСсылки = ПараметрыПубликацииСсылкиОплаты(ТипВзноса);
	
	Если ПараметрыПубликацииСсылки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИдентификаторСсылок = АсинхронноеПолучениеДанныхБППлатежиВБюджет.ПубликуемыйИдентификатор();
	АдресСервисаОплаты = АсинхронноеПолучениеДанныхБППлатежиВБюджет.АдресСервиса();
	
	ПубликуемыеНастройки = АсинхронноеПолучениеДанныхБППлатежиВБюджет.ВходящиеНастройкиПубликуемыхДанных(
		Организация,
		КонецКвартала(НалоговыйПериод),
		ПараметрыПубликацииСсылки.ВидНалога,
		ПараметрыПубликацииСсылки.ВидНалоговогоОбязательства);
	
	ОписаниеСсылки = ИнтеграцияСБанками.ОписаниеПубликуемойСсылкиНаСервис(
		ИдентификаторСсылок,
		ПараметрыПубликацииСсылки.Представление,
		АдресСервисаОплаты,
		ПубликуемыеНастройки);
	
	Возврат ОписаниеСсылки;
	
КонецФункции

Функция ПараметрыПубликацииСсылкиОплаты(ТипВзноса)
	
	ВсеВзносы = ВсеРассчитываемыеВзносы();
	
	ОписаниеПараметра = Неопределено;
	
	Если ТипВзноса = ВсеВзносы.ПФР Тогда
		ОписаниеПараметра = ОписаниеПубликуемойСсылкиОплаты(
			НСтр("ru = 'Оплатить взнос ПФР'"),
			Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть,
			Перечисления.ВидыПлатежейВГосБюджет.Налог);
		
	ИначеЕсли ТипВзноса = ВсеВзносы.ПФРсДоходов Тогда
		ОписаниеПараметра = ОписаниеПубликуемойСсылкиОплаты(
			НСтр("ru = 'Оплатить взнос ПФР с доходов'"),
			Перечисления.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть,
			Перечисления.ВидыПлатежейВГосБюджет.ВзносыСвышеПредела);
		
	ИначеЕсли ТипВзноса = ВсеВзносы.ФФОМС Тогда
		ОписаниеПараметра = ОписаниеПубликуемойСсылкиОплаты(
			НСтр("ru = 'Оплатить взнос ФФОМС'"),
			Перечисления.ВидыНалогов.ФиксированныеВзносы_ФФОМС,
			Перечисления.ВидыПлатежейВГосБюджет.Налог);
		
	ИначеЕсли ТипВзноса = ВсеВзносы.ФСС Тогда
		ОписаниеПараметра = ОписаниеПубликуемойСсылкиОплаты(
			НСтр("ru = 'Оплатить взнос ФСС'"),
			Перечисления.ВидыНалогов.ФиксированныеВзносы_ФСС,
			Перечисления.ВидыПлатежейВГосБюджет.Налог);
		
	КонецЕсли;
	
	Возврат ОписаниеПараметра;
	
КонецФункции

Функция ОписаниеПубликуемойСсылкиОплаты(Представление, ВидНалога, ВидНалоговогоОбязательства)
	
	ОписаниеПубликации = Новый Структура;
	ОписаниеПубликации.Вставить("Представление", Представление);
	ОписаниеПубликации.Вставить("ВидНалога", ВидНалога);
	ОписаниеПубликации.Вставить("ВидНалоговогоОбязательства", ВидНалоговогоОбязательства);
	
	Возврат ОписаниеПубликации;
	
КонецФункции

Функция СловарьПолейJSON()
	
	Словарь = Новый Структура;
	Словарь.Вставить("Ссылки",    "links");
	Словарь.Вставить("Ссылка",    "link");
	Словарь.Вставить("Тип",       "type");
	Словарь.Вставить("Заголовок", "title");
	Словарь.Вставить("Описание",  "description");
	Словарь.Вставить("Сумма",     "sum");
	Словарь.Вставить("Платежи",   "payments");
	Словарь.Вставить("Всего",     "total");
	
	Возврат Словарь;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиОбновления

// Обработчик обновления на версию 3.0.72: дополняет данные о зарегистрированных платежах
// сведениями об уплатах с банковского счета, отраженных без платежного поручения,
// и обновляет статусы задач за страховые периоды вновь зарегистрированных платежей.
//
Процедура ОбновитьСвязанныеПлатежиИЗадачи() Экспорт
	
	// Обновление задач и документов помощника имеет смысл только за период,
	// доступный для выбора в помощнике на момент обработчика.
	ТекущийПериод = ТекущаяДатаСеанса();
	НачалоОбновляемогоПериода = НачалоГода(ДобавитьМесяц(ТекущийПериод, -12));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоОбновляемогоПериода", НачалоОбновляемогоПериода);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_Предприниматели
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И Организации.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыНалоговИПлатежейВБюджет.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТ_ЭлементыНалоговВзносыИП
	|ИЗ
	|	Справочник.ВидыНалоговИПлатежейВБюджет КАК ВидыНалоговИПлатежейВБюджет
	|ГДЕ
	|	ВидыНалоговИПлатежейВБюджет.ВидНалога В (ЗНАЧЕНИЕ(Перечисление.ВидыНалогов.ФиксированныеВзносы_ПФР_СтраховаяЧасть), ЗНАЧЕНИЕ(Перечисление.ВидыНалогов.ФиксированныеВзносы_ФФОМС), ЗНАЧЕНИЕ(Перечисление.ВидыНалогов.ФиксированныеВзносы_ФСС))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписаниеСРасчетногоСчета.Ссылка КАК Ссылка,
	|	СписаниеСРасчетногоСчета.Дата КАК Дата,
	|	СписаниеСРасчетногоСчета.Организация КАК Организация,
	|	СписаниеСРасчетногоСчета.Налог.ВидНалога КАК ВидНалога,
	|	СписаниеСРасчетногоСчета.НалоговыйПериод КАК НалоговыйПериод
	|ИЗ
	|	Документ.СписаниеСРасчетногоСчета КАК СписаниеСРасчетногоСчета
	|ГДЕ
	|	СписаниеСРасчетногоСчета.Проведен
	|	И СписаниеСРасчетногоСчета.Дата >= &НачалоОбновляемогоПериода
	|	И СписаниеСРасчетногоСчета.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийСписаниеДенежныхСредств.ПеречислениеНалога)
	|	И СписаниеСРасчетногоСчета.Организация В
	|			(ВЫБРАТЬ
	|				ВТ_Предприниматели.Ссылка КАК Ссылка
	|			ИЗ
	|				ВТ_Предприниматели КАК ВТ_Предприниматели)
	|	И СписаниеСРасчетногоСчета.Налог В
	|			(ВЫБРАТЬ
	|				ВТ_ЭлементыНалоговВзносыИП.Ссылка КАК Ссылка
	|			ИЗ
	|				ВТ_ЭлементыНалоговВзносыИП КАК ВТ_ЭлементыНалоговВзносыИП)
	|	И (СписаниеСРасчетногоСчета.ДокументОснование = НЕОПРЕДЕЛЕНО
	|			ИЛИ ТИПЗНАЧЕНИЯ(СписаниеСРасчетногоСчета.ДокументОснование) <> ТИП(Документ.ПлатежноеПоручение)
	|			ИЛИ СписаниеСРасчетногоСчета.ДокументОснование = ЗНАЧЕНИЕ(Документ.ПлатежноеПоручение.ПустаяСсылка))";
	
	ПравилаПериодыЗадач = Новый ТаблицаЗначений;
	ПравилаПериодыЗадач.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	ПравилаПериодыЗадач.Колонки.Добавить("СтраховойГод", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ПравилаПериодыЗадач.Колонки.Добавить("Правило", Новый ОписаниеТипов("СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов"));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СвойстваЗадачи = СвойстваЗадачиПлатежа(Выборка, ПравилаПериодыЗадач);
		
		Если Не ЗначениеЗаполнено(СвойстваЗадачи.Правило) Тогда
			// Отсутствует расписание по фиксированным взносам за указанный в документе страховой год.
			Продолжить;
		КонецЕсли;
		
		РегистрыСведений.ЗадачиБухгалтераНалоговыеПлатежи.ДобавитьЗаписьПравила(
			Выборка.Организация, Выборка.Ссылка, СвойстваЗадачи.Правило, СвойстваЗадачи.ПериодСобытия);
		
	КонецЦикла;
	
	// Обновим статусы задач
	
	Если ПравилаПериодыЗадач.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ПравилаПериодыЗадач", ПравилаПериодыЗадач);
	Запрос.УстановитьПараметр("КодЗадачи", ЗадачиБухгалтераКлиентСервер.КодЗадачиСтраховыеВзносыИП());
	Запрос.УстановитьПараметр("СтатусыВыполненныхЗадач", ВыполнениеЗадачБухгалтера.СтатусыВыполненныхЗадач());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПравилаПериодыЗадач.Организация КАК Организация,
	|	ПравилаПериодыЗадач.СтраховойГод КАК СтраховойГод
	|ПОМЕСТИТЬ ОрганизацииПериодыЗадач
	|ИЗ
	|	&ПравилаПериодыЗадач КАК ПравилаПериодыЗадач
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОрганизацииПериодыЗадач.Организация КАК Организация,
	|	МИНИМУМ(НАЧАЛОПЕРИОДА(ОрганизацииПериодыЗадач.СтраховойГод, ГОД)) КАК НачалоПериодаСобытий,
	|	МАКСИМУМ(КОНЕЦПЕРИОДА(ОрганизацииПериодыЗадач.СтраховойГод, ГОД)) КАК КонецПериодаСобытий
	|ПОМЕСТИТЬ ОрганизацииГраницыПериодовЗадач
	|ИЗ
	|	ОрганизацииПериодыЗадач КАК ОрганизацииПериодыЗадач
	|
	|СГРУППИРОВАТЬ ПО
	|	ОрганизацииПериодыЗадач.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ПравилаЗадач
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|ГДЕ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Код = &КодЗадачи
	|	И ПравилаПредставленияОтчетовУплатыНалогов.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.УплатаНалога)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиБухгалтера.Организация КАК Организация,
	|	ЗадачиБухгалтера.Правило КАК Правило,
	|	ЗадачиБухгалтера.ПериодСобытия КАК ПериодСобытия,
	|	ЗадачиБухгалтера.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
	|	ЗадачиБухгалтера.Периодичность КАК Периодичность,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.УплатаНалога) КАК Действие
	|ИЗ
	|	ОрганизацииГраницыПериодовЗадач КАК ОрганизацииГраницыПериодовЗадач
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗадачиБухгалтера КАК ЗадачиБухгалтера
	|		ПО ОрганизацииГраницыПериодовЗадач.Организация = ЗадачиБухгалтера.Организация
	|			И ОрганизацииГраницыПериодовЗадач.НачалоПериодаСобытий <= ЗадачиБухгалтера.ПериодСобытия
	|			И ОрганизацииГраницыПериодовЗадач.КонецПериодаСобытий >= ЗадачиБухгалтера.ПериодСобытия
	|			И (ЗадачиБухгалтера.Правило В
	|				(ВЫБРАТЬ
	|					ПравилаЗадач.Ссылка КАК Ссылка
	|				ИЗ
	|					ПравилаЗадач КАК ПравилаЗадач))
	|			И (НЕ ЗадачиБухгалтера.Статус В (&СтатусыВыполненныхЗадач))
	|			И (НЕ ЗадачиБухгалтера.ВАрхиве)";
	
	ТаблицаЗадач = Запрос.Выполнить().Выгрузить();
	
	ВыполнениеЗадачБухгалтера.ДобавитьСтатусыЗадач(ТаблицаЗадач);
	
	// Запишем новые статусы
	Для Каждого Задача Из ТаблицаЗадач Цикл
		МенеджерЗаписи = РегистрыСведений.ЗадачиБухгалтера.СоздатьМенеджерЗаписи();
		
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Задача);
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Статус = Задача.Статус;
			МенеджерЗаписи.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СвойстваЗадачиПлатежа(РеквизитыПлатежа, ПравилаПериодыЗадач)
	
	СвойстваЗадачи = Новый Структура("ПериодСобытия, Правило",
		'00010101',
		Справочники.ПравилаПредставленияОтчетовУплатыНалогов.ПустаяСсылка());
	
	СтраховойГод = НачалоГода(РеквизитыПлатежа.НалоговыйПериод);
	
	ПериодичностьУплаты = УчетСтраховыхВзносовИП.ПериодичностьУплатыФиксированныхСтраховыхВзносов(
		РеквизитыПлатежа.Организация, СтраховойГод);
	
	Отбор = Новый Структура;
	Отбор.Вставить("Организация", РеквизитыПлатежа.Организация);
	Отбор.Вставить("СтраховойГод", СтраховойГод);
	
	НайденныеСтроки = ПравилаПериодыЗадач.НайтиСтроки(Отбор);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		// Правило для данного года уже найдено.
		СвойстваЗадачи.Правило = НайденныеСтроки[0].Правило;
		
		ДатаСобытия = Мин(КонецГода(СтраховойГод), КонецКвартала(РеквизитыПлатежа.Дата));
		СвойстваЗадачи.ПериодСобытия = РегистрыСведений.ЗадачиБухгалтера.ПериодСобытияПоНалогамИСборам(
			ПериодичностьУплаты, ДатаСобытия);
	Иначе
		ПорядокУплаты = РегистрыСведений.ЗадачиБухгалтера.ПорядокУплатыНалогаЗаПериод(
			РеквизитыПлатежа.Организация, РеквизитыПлатежа.ВидНалога, КонецГода(РеквизитыПлатежа.НалоговыйПериод));
		
		Если ПорядокУплаты <> Неопределено И ЗначениеЗаполнено(ПорядокУплаты.Правило) Тогда
			СвойстваЗадачи.Правило = ПорядокУплаты.Правило;
			
			ДатаСобытия = Мин(КонецГода(ПорядокУплаты.ПериодСобытия), КонецКвартала(РеквизитыПлатежа.Дата));
			СвойстваЗадачи.ПериодСобытия = РегистрыСведений.ЗадачиБухгалтера.ПериодСобытияПоНалогамИСборам(
				ПериодичностьУплаты, ДатаСобытия);
			
			// Добавим найденное правило задачи в кэш.
			НоваяСтрока = ПравилаПериодыЗадач.Добавить();
			НоваяСтрока.Организация = РеквизитыПлатежа.Организация;
			НоваяСтрока.СтраховойГод = СтраховойГод;
			НоваяСтрока.Правило = ПорядокУплаты.Правило;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СвойстваЗадачи;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
