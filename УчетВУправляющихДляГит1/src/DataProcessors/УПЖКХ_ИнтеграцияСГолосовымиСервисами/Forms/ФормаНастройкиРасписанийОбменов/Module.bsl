
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнициализацияНастроекРасписанияАвтоматическогоОбмена();
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик "ПриИзменении" тумблера "ВидНастройкиРасписанияВыгрузок".
//
Процедура ВидНастройкиРасписанияВыгрузокПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементовРасписания();
	
КонецПроцедуры

&НаКлиенте
// Обработчик "ПриИзменении" тумблера "ВидНастройкиРасписанияЗагрузок".
//
Процедура ВидНастройкиРасписанияЗагрузокПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементовРасписания();
	
КонецПроцедуры

&НаКлиенте
// Обработчик нажатия кнопки "РасписаниеРегламентногоЗаданияВыгрузок".
//
Процедура РасписаниеРегламентногоЗаданияВыгрузокНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(ПолучитьРасписаниеВыгрузок());
	Диалог.Показать(Новый ОписаниеОповещения("РасписаниеРегламентногоЗаданияВыгрузокНажатиеЗавершение", ЭтаФорма, Новый Структура("Диалог", Диалог)));
	
КонецПроцедуры

&НаКлиенте
// Обработчик нажатия кнопки "РасписаниеРегламентногоЗаданияЗагрузок".
//
Процедура РасписаниеРегламентногоЗаданияЗагрузокНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(ПолучитьРасписаниеЗагрузок());
	Диалог.Показать(Новый ОписаниеОповещения("РасписаниеРегламентногоЗаданияЗагрузокНажатиеЗавершение", ЭтаФорма, Новый Структура("Диалог", Диалог)));
	
КонецПроцедуры

&НаКлиенте
// Обрабатывает оповещения об изменении расписания выгрузок.
//
Процедура РасписаниеРегламентногоЗаданияВыгрузокНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	
	Если ТипЗнч(Результат) = Тип("РасписаниеРегламентногоЗадания") Тогда
		УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.УстановитьРасписание(РегламентноеЗаданиеВыгрузок, Диалог.Расписание);
		РасписаниеРегламентногоЗаданияВыгрузок = ПолучитьРасписаниеРегламентногоЗадания(РегламентноеЗаданиеВыгрузок, ВыполнятьВыгрузкиПоРасписанию);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обрабатывает оповещения об изменении расписания загрузок.
//
Процедура РасписаниеРегламентногоЗаданияЗагрузокНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	
	Если ТипЗнч(Результат) = Тип("РасписаниеРегламентногоЗадания") Тогда
		УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.УстановитьРасписание(РегламентноеЗаданиеЗагрузок, Диалог.Расписание);
		РасписаниеРегламентногоЗаданияЗагрузок = ПолучитьРасписаниеРегламентногоЗадания(РегламентноеЗаданиеЗагрузок, ВыполнятьЗагрузкиПоРасписанию);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик нажатия кнопки "Закончить настройку расписания".
//
Процедура КомандаЗакрыть(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ УПРАВЛЕНИЯ ФОРМОЙ

#Область ПроцедурыУправленияФормой

&НаСервере
// Иницализация и заполнение страницы настройки расписаний обменов.
//
Процедура ИнициализацияНастроекРасписанияАвтоматическогоОбмена()
	
	ПолучитьСохраненныеНастройки();
	
	УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.ОпределитьРасписанияРегламентныхЗаданийПоУмолчанию(РасписаниеРегламентногоЗаданияВыгрузокПоУмолчанию, РасписаниеРегламентногоЗаданияЗагрузокПоУмолчанию);
	
	РасписаниеРегламентногоЗаданияВыгрузок = ПолучитьРасписаниеРегламентногоЗадания(РегламентноеЗаданиеВыгрузок, ВыполнятьВыгрузкиПоРасписанию);
	РасписаниеРегламентногоЗаданияЗагрузок = ПолучитьРасписаниеРегламентногоЗадания(РегламентноеЗаданиеЗагрузок, ВыполнятьЗагрузкиПоРасписанию);
	
	УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.ОпределитьВидНастройкиРасписания(РегламентноеЗаданиеВыгрузок, РасписаниеРегламентногоЗаданияВыгрузокПоУмолчанию, ВидРасписанияВыгрузок);
	УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.ОпределитьВидНастройкиРасписания(РегламентноеЗаданиеЗагрузок, РасписаниеРегламентногоЗаданияЗагрузокПоУмолчанию, ВидРасписанияЗагрузок);
	
	УправлениеСтраницейНастройкиРасписанияАвтоматическогоОбмена(ЭтаФорма);
	
	УстановитьВидимостьЭлементовРасписания();
	
КонецПроцедуры

&НаСервере
// Получает и заполняет сохраненные настройки регламентных заданий.
//
Процедура ПолучитьСохраненныеНастройки()
	
	СохраненныеНастройки = УПЖКХ_ИнтеграцияСГолосовымиСервисамиВзаимодействиеСБазойДанных.ПолучитьНастройкиИнтеграцииСГолосовымиСервисами();
	
	РегламентноеЗаданиеВыгрузок = СохраненныеНастройки.РегламентноеЗаданиеВыгрузок;
	РегламентноеЗаданиеЗагрузок = СохраненныеНастройки.РегламентноеЗаданиеЗагрузок;
	
	Подписка_ВидПодписки = СохраненныеНастройки.Подписка_ВидПодписки;
	
КонецПроцедуры

&НаСервере
// Установка видимости элементов страницы настройки расписаний обменов.
//
Процедура УстановитьВидимостьЭлементовРасписания()
	
	Попытка
		
		РегламентныеЗаданияСлужебный.ВызватьИсключениеЕслиНетПраваАдминистрирования();
		УстановитьПривилегированныйРежим(Истина);
		
		ВыполнятьВыгрузкиПоРасписанию = НЕ ВидРасписанияВыгрузок = 0;
		ВыполнятьЗагрузкиПоРасписанию = НЕ ВидРасписанияЗагрузок = 0;
		
		УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.ПодготовитьРегламентноеЗаданиеMARS(РегламентноеЗаданиеВыгрузок, РегламентноеЗаданиеЗагрузок, ВыполнятьВыгрузкиПоРасписанию, ВыполнятьЗагрузкиПоРасписанию);
		
		// Выгрузки.
		Элементы.ВидНастройкиРасписанияЗагрузок.Доступность = НЕ Подписка_ВидПодписки = Перечисления.УПЖКХ_ВидыПодпискиНаГолосовыеСервисы.Отсутствует;
		
		Если ВидРасписанияВыгрузок = 0 Тогда
			Элементы.РасписаниеРегламентногоЗаданияВыгрузок.Видимость = Ложь;
		Иначе
			Элементы.РасписаниеРегламентногоЗаданияВыгрузок.Видимость = Истина;
			Если ВидРасписанияВыгрузок = 1 Тогда
				РасписаниеРегламентногоЗаданияВыгрузок = УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.УстановитьРасписаниеРегламентногоЗаданияПоУмолчанию(РегламентноеЗаданиеВыгрузок, ВыполнятьВыгрузкиПоРасписанию, РасписаниеРегламентногоЗаданияВыгрузокПоУмолчанию);
				Элементы.РасписаниеРегламентногоЗаданияВыгрузок.Доступность = Ложь;
			Иначе
				Элементы.РасписаниеРегламентногоЗаданияВыгрузок.Доступность = Истина;
			КонецЕсли;
		КонецЕсли;
		
		// Загрузки.
		Элементы.ГруппаЗагрузкаССервера.Видимость = Подписка_ВидПодписки = Перечисления.УПЖКХ_ВидыПодпискиНаГолосовыеСервисы.АвтообзвонДолжниковИПриемПоказаний ИЛИ Подписка_ВидПодписки = Перечисления.УПЖКХ_ВидыПодпискиНаГолосовыеСервисы.ПриемПоказаний;
		
		Если ВидРасписанияЗагрузок = 0 Тогда
			Элементы.РасписаниеРегламентногоЗаданияЗагрузок.Видимость = Ложь;
		Иначе
			Элементы.РасписаниеРегламентногоЗаданияЗагрузок.Видимость = истина;
			Если ВидРасписанияЗагрузок = 1 Тогда
				РасписаниеРегламентногоЗаданияЗагрузок = УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.УстановитьРасписаниеРегламентногоЗаданияПоУмолчанию(РегламентноеЗаданиеЗагрузок, ВыполнятьЗагрузкиПоРасписанию, РасписаниеРегламентногоЗаданияЗагрузокПоУмолчанию);
				Элементы.РасписаниеРегламентногоЗаданияЗагрузок.Доступность = Ложь;
			Иначе
				Элементы.РасписаниеРегламентногоЗаданияЗагрузок.Доступность = Истина;
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		
		Элементы.ВидНастройкиРасписанияВыгрузок.Доступность         = Ложь;
		Элементы.ВидНастройкиРасписанияЗагрузок.Доступность         = Ложь;
		Элементы.РасписаниеРегламентногоЗаданияВыгрузок.Доступность = Ложь;
		Элементы.РасписаниеРегламентногоЗаданияЗагрузок.Доступность = Ложь;
		
		Элементы.РасписаниеРегламентногоЗаданияВыгрузок.Видимость = Истина;
		Элементы.РасписаниеРегламентногоЗаданияЗагрузок.Видимость = Истина;
		
		РасписаниеРегламентногоЗаданияВыгрузок = "<Настройка регламентных заданий недоступна для текущего пользователя>";
		РасписаниеРегламентногоЗаданияЗагрузок = "<Настройка регламентных заданий недоступна для текущего пользователя>";
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
// Управляет отображением элементов формы.
//
Процедура УправлениеСтраницейНастройкиРасписанияАвтоматическогоОбмена(Форма)
	
	Элементы = Форма.Элементы;
	
	ВидНастройкиРасписанияВыгрузок = Форма.ВидРасписанияВыгрузок;
	Элементы.РасписаниеРегламентногоЗаданияВыгрузок.Доступность = ?(ВидНастройкиРасписанияВыгрузок = 1, Ложь, Истина);
	Элементы.РасписаниеРегламентногоЗаданияВыгрузок.Видимость = НЕ ВидНастройкиРасписанияВыгрузок = 0;
	
	ВидНастройкиРасписанияЗагрузок = Форма.ВидРасписанияЗагрузок;
	Элементы.РасписаниеРегламентногоЗаданияЗагрузок.Доступность = ?(ВидНастройкиРасписанияЗагрузок = 1, Ложь, Истина);
	Элементы.РасписаниеРегламентногоЗаданияЗагрузок.Видимость = НЕ ВидНастройкиРасписанияЗагрузок = 0;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С РЕГЛАМЕНТНЫМ ЗАДАНИЕМ

#Область ПроцедурыИФункцииРаботыСРегламентнымЗаданием

&НаСервереБезКонтекста
// Функция формирует текст расписания регламентного задания.
//
Функция ПолучитьРасписаниеРегламентногоЗадания(ИдентификаторРегламентногоЗадания, ВыполнятьОбменПоРасписанию)
	
	Возврат УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.ПолучитьРасписаниеРегламентногоЗадания(ИдентификаторРегламентногоЗадания, ВыполнятьОбменПоРасписанию);
	
КонецФункции // ПолучитьРасписаниеРегламентногоЗадания()

&НаСервере
// Функция возвращает расписание регламентного задания.
//
Функция ПолучитьРасписаниеВыгрузок()
	
	Возврат УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.ПолучитьРасписаниеВыгрузокMARS(РегламентноеЗаданиеВыгрузок, РегламентноеЗаданиеЗагрузок);
	
КонецФункции // ПолучитьРасписание()

&НаСервере
// Функция возвращает расписание регламентного задания.
//
Функция ПолучитьРасписаниеЗагрузок()
	
	Возврат УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.ПолучитьРасписаниеЗагрузокMARS(РегламентноеЗаданиеВыгрузок, РегламентноеЗаданиеЗагрузок);
	
КонецФункции // ПолучитьРасписание()

#КонецОбласти
