
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнициализацияРеквизитов();
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
// Обработчик оповещений формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ЭтаФорма.Активизировать();
	
	// Заполнение ТЧ.
	Если ИмяСобытия = "ПередачаТЗ" Тогда
		
		АдресВХранилище = Параметр;
		МассивЛС        = ПолучитьИзВременногоХранилища(АдресВХранилище);
		
		Для каждого ТекСтрока из МассивЛС Цикл
			
			НоваяСтрока = ЛицевыеСчета.Добавить();
			НоваяСтрока.ЛицевойСчет = ТекСтрока;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик "ПриИзменении" флажка "Выгружать сведения по л/с".
//
Процедура ВыгружатьСведенияПоЛСПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
// Обработчик "ПриИзменении" тумблера "УказатьЛицевыеСчета".
//
Процедура УказатьЛицевыеСчетаПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаВыбора" колонки "ЛицевойСчет" таблицы лицевых счетов.
//
Процедура ТаблицаЛицевыхСчетовЛицевойСчетОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокиДубликаты = ЛицевыеСчета.НайтиСтроки(Новый Структура("ЛицевойСчет", ВыбранноеЗначение));
	
	Если НЕ СтрокиДубликаты.Количество() = 0 Тогда
		СтандартнаяОбработка = Ложь;
		
		УПЖКХ_РаботаССообщениямиСервер.ДобавитьСообщение(Объект.СообщенияДляПользователя, СтрШаблон("Лицевой счет ""%1"" уже выбран.", Строка(ВыбранноеЗначение)));
		УПЖКХ_РаботаССообщениямиКлиент.ВывестиСообщения(Объект.СообщенияДляПользователя);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик "ПриИзменении" тумблера "ВариантОбменаДанными".
//
Процедура ВариантОбменаДаннымиПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
// Обработчик "НачалоВыбора" поля "ПутьККаталогуДляВыгрузки".
//
Процедура ПутьККаталогуДляВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ДиалогВыбораФайла.Заголовок                   = "Выбор каталога выгрузки";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	
	ДопПараметры = Новый Структура("ДиалогВыбораФайла, ПутьКФайлу, НаименованиеПроцедуры",
								   ДиалогВыбораФайла, ПутьККаталогуДляВыгрузки, "ОбработатьВыборКаталогаВыгрузки");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПутьКФайлуЗагрузкиНачалоВыбораКаталогСуществует", ЭтотОбъект, ДопПараметры);
	
	Файл = Новый Файл(ПутьККаталогуДляВыгрузки);
	Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Обработчик "Открытие" поля "ПутьККаталогуДляВыгрузки".
//
Процедура ПутьККаталогуДляВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПутьККаталогуДляВыгрузкиОткрытиеЗапускПриложения", ЭтотОбъект);
	НачатьЗапускПриложения(ОписаниеОповещения, ПутьККаталогуДляВыгрузки);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения запуска приложения.
Процедура ПутьККаталогуДляВыгрузкиОткрытиеЗапускПриложения(КодВозврата, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

&НаКлиенте
// Обработчик "НачалоВыбора" поля "ПутьКФайлуЗагрузки".
//
Процедура ПутьКФайлуЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Заголовок                   = "Выбор файла загрузки";
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	
	ДопПараметры = Новый Структура("ДиалогВыбораФайла, ПутьКФайлу, НаименованиеПроцедуры",
								   ДиалогВыбораФайла, ПутьКФайлуДляЗагрузки, "ОбработатьВыборФайлаЗагрузки");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПутьКФайлуЗагрузкиНачалоВыбораКаталогСуществует", ЭтотОбъект, ДопПараметры);
	
	Файл = Новый Файл(ПутьКФайлуДляЗагрузки);
	Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения проверки существования каталога.
//
Процедура ПутьКФайлуЗагрузкиНачалоВыбораКаталогСуществует(Существует, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если Существует Тогда
		ДиалогВыбораФайла.Каталог = ДополнительныеПараметры.ПутьКФайлу;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения(ДополнительныеПараметры.НаименованиеПроцедуры, ЭтотОбъект);
	ДиалогВыбораФайла.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Обработчик "Открытие" поля "ПутьКФайлуЗагрузки".
//
Процедура ПутьКФайлуЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПутьКФайлуЗагрузкиОткрытиеЗапускПриложения", ЭтотОбъект);
	НачатьЗапускПриложения(ОписаниеОповещения, ПутьКФайлуДляЗагрузки);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения запуска приложения.
Процедура ПутьКФайлуЗагрузкиОткрытиеЗапускПриложения(КодВозврата, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик нажатия кнопки "Выполнить обмен данными".
//
Процедура КомандаВыполнитьОбмен(Команда)
	
	Если ВыбранАвтономныйВариантОбмена() Тогда
		
		Если ВыгружатьСведенияПоЛС Тогда
			
			ДопПараметры = Новый Структура("ПутьККаталогуДляВыгрузки", ПутьККаталогуДляВыгрузки);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("КомандаВыполнитьОбменВыгружатьСведенияПоЛСЗавершение",
														  ЭтотОбъект, ДопПараметры);
			
			Файл = Новый Файл(ПутьККаталогуДляВыгрузки);
			Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
			
		КонецЕсли;
		
		Если ЗагружатьПоказанияСчетчиков Тогда
			
			ДопПараметры = Новый Структура("ПутьКФайлуДляЗагрузки", ПутьКФайлуДляЗагрузки);
			
			ОписаниеОповещения = Новый ОписаниеОповещения("КомандаВыполнитьОбменЗагружатьПоказанияСчетчиковЗавершение",
														  ЭтотОбъект, ДопПараметры);
			
			Файл = Новый Файл(ПутьКФайлуДляЗагрузки);
			Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
			
		КонецЕсли;
		
	Иначе
		ВыполнитьПрямойОбменНаСервере();
	КонецЕсли;
	
	УПЖКХ_РаботаССообщениямиКлиент.ВывестиСообщения(Объект.СообщенияДляПользователя);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения проверки существования каталога.
Процедура КомандаВыполнитьОбменВыгружатьСведенияПоЛСЗавершение(Существует, ДопольнительныеПараметры) Экспорт
	
	Если Существует Тогда
		СформироватьФайлОбменаИВыгрузитьНаДиск();
	Иначе
		
		Если ПустаяСтрока(ДопольнительныеПараметры.ПутьККаталогуДляВыгрузки) Тогда
			ТекстОшибки = "Не удалось выгрузить данные: не указан каталог выгрузки.";
		Иначе
			ТекстОшибки = "Не удалось выгрузить данные: указанный каталог не существует.";
		КонецЕсли;
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения проверки существования каталога.
Процедура КомандаВыполнитьОбменЗагружатьПоказанияСчетчиковЗавершение(Существует, ДопольнительныеПараметры) Экспорт
	
	Если Существует Тогда
		ЗагрузитьДанныеИзФайлаОбменаНаДиске();
	Иначе
		
		Если ПустаяСтрока(ДопольнительныеПараметры.ПутьКФайлуДляЗагрузки) Тогда
			ТекстОшибки = "Не удалось загрузить данные: не указан файл для загрузки.";
		Иначе
			ТекстОшибки = "Не удалось загрузить данные: указанный файл не существует.";
		КонецЕсли;
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обрабатывает нажатие на кнопку "Заполнить с отбором" командной панели таблицы л/с.
//
Процедура КомандаЗаполнитьСОтбором(Команда)
	
	Если ПустаяСтрока(ПутьКФормеПодбора) Тогда
		
		УПЖКХ_РаботаССообщениямиСервер.ДобавитьСообщение(Объект.СообщенияДляПользователя, "Форма подбора не найдена.");
		УПЖКХ_РаботаССообщениямиКлиент.ВывестиСообщения(Объект.СообщенияДляПользователя);
		
		Возврат;
	КонецЕсли;
	
	Если ЛицевыеСчета.Количество() = 0 Тогда
		ОткрытьФорму(ПутьКФормеПодбора);
	Иначе
		ЗадатьВопросЕслиВТаблицеЛСЕстьДанные();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ УПРАВЛЕНИЯ ФОРМОЙ

#Область ПроцедурыУправленияФормой

&НаСервере
// Инициализирует реквизиты.
//
Процедура ИнициализацияРеквизитов()
	
	СохраненныеНастройки = УПЖКХ_ИнтеграцияСГолосовымиСервисамиВзаимодействиеСБазойДанных.ПолучитьНастройкиИнтеграцииСГолосовымиСервисами();
	
	АвтономныйРежимРаботы    = ?(СохраненныеНастройки.АвтономныйРежимРаботы, 1, 0);
	ВариантОбменаДанными     = АвтономныйРежимРаботы;
	ПутьККаталогуДляВыгрузки = СохраненныеНастройки.КаталогСохраненияФайловВыгрузки;
	
	Подписка_ВидПодписки = СохраненныеНастройки.Подписка_ВидПодписки;
	
	ПоказыватьФлагЗагрузкиССервиса = СохраненныеНастройки.АвтономныйРежимРаботы = Истина ИЛИ Подписка_ВидПодписки = Перечисления.УПЖКХ_ВидыПодпискиНаГолосовыеСервисы.АвтообзвонДолжниковИПриемПоказаний ИЛИ Подписка_ВидПодписки = Перечисления.УПЖКХ_ВидыПодпискиНаГолосовыеСервисы.ПриемПоказаний;
	ПоказыватьФлагВыгрузкиНаСервис = ПоказыватьФлагЗагрузкиССервиса;
	
	ПоказыватьНадписьДляПриемаПоказаний             = ПоказыватьФлагВыгрузкиНаСервис И Подписка_ВидПодписки = Перечисления.УПЖКХ_ВидыПодпискиНаГолосовыеСервисы.ПриемПоказаний;
	ПоказыватьНадписьДляАвтообзвона                 = НЕ ПоказыватьФлагВыгрузкиНаСервис;
	ПоказыватьНадписьДляАвтообзвонаИПриемаПоказаний = ПоказыватьФлагВыгрузкиНаСервис И НЕ Подписка_ВидПодписки = Перечисления.УПЖКХ_ВидыПодпискиНаГолосовыеСервисы.ПриемПоказаний;
	
	ВыгружатьСведенияПоЛС       = Истина;
	ЗагружатьПоказанияСчетчиков = ПоказыватьФлагЗагрузкиССервиса;
	
КонецПроцедуры

&НаСервере
// Управляет видимостью элементов формы.
//
Процедура УстановитьВидимость()
	
	УправлениеВидимостьюКнопкиПодбораЛС();
	
	Элементы.НадписьОписаниеВыгрузкиДанныхПоЛСАвтообзвонИПриемПоказаний.Видимость = ПоказыватьНадписьДляАвтообзвонаИПриемаПоказаний;
	Элементы.НадписьОписаниеВыгрузкиДанныхПоЛСАвтообзвон.Видимость                = ПоказыватьНадписьДляАвтообзвона;
	Элементы.НадписьОписаниеВыгрузкиДанныхПоЛСПриемПоказаний.Видимость            = ПоказыватьНадписьДляПриемаПоказаний;
	
	Элементы.НадписьОписаниеЗагрузкиПоказанийПУ.Видимость = ПоказыватьФлагЗагрузкиССервиса;
	Элементы.ЗагружатьПоказанияСчетчиков.Видимость        = ПоказыватьФлагЗагрузкиССервиса;
	Элементы.ВыгружатьСведенияПоЛС.Видимость              = ПоказыватьФлагВыгрузкиНаСервис;
	
	Элементы.УказатьЛицевыеСчета.Видимость  = ВыгружатьСведенияПоЛС;
	Элементы.ТаблицаЛицевыхСчетов.Видимость = ВыгружатьСведенияПоЛС И УказатьЛицевыеСчета = 1;
	
	Если ИспользуетсяАвтономныйРежимРаботы() Тогда
		Элементы.ВариантОбменаДанными.Видимость = Ложь;
	КонецЕсли;
	
	ПоказыватьКаталогиДляВыгрузки = ВыбранАвтономныйВариантОбмена();
	
	Элементы.ПутьККаталогуДляВыгрузки.Видимость = ПоказыватьКаталогиДляВыгрузки;
	Элементы.ПутьКФайлуЗагрузки.Видимость       = ПоказыватьКаталогиДляВыгрузки И ПоказыватьФлагЗагрузкиССервиса;
	
КонецПроцедуры

&НаСервере
// Выполняет проверку использования автономного режима работы.
//
Функция ИспользуетсяАвтономныйРежимРаботы()
	
	Возврат АвтономныйРежимРаботы = 1;
	
КонецФункции

&НаСервере
// Выполняет проверку использования автономного режима работы.
//
Функция ВыбранАвтономныйВариантОбмена()
	
	Возврат ВариантОбменаДанными = 1;
	
КонецФункции

&НаКлиенте
// Функция проверяет, переданы ли параметры на сайт.
//
// Возвращаемое значение:
//  Булево.
//
Процедура ЗадатьВопросЕслиВТаблицеЛСЕстьДанные()
	
	Оповещение = Новый ОписаниеОповещения("ОбработатьВопросОбОчисткеТаблицыЛСПриРазовомОбмене", ЭтаФорма);
	
	ПоказатьВопрос(Оповещение, "Перед заполнением табличная часть будет очищена.
							   |Продолжить?", РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры // ЗадатьВопросЕслиНеВсеДанныеПереданы()

&НаКлиенте
// Обрабатывает результат вопроса об очистке таблицы л/с.
//
Процедура ОбработатьВопросОбОчисткеТаблицыЛСПриРазовомОбмене(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЛицевыеСчета.Очистить();
	Иначе
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(ПутьКФормеПодбора);
	
КонецПроцедуры

&НаСервере
// Анализирует наличие формы подбора объектов в составе конфигурации.
// Если ее нет, не выводить соответствующую кнопку в командной панели таблицы.
//
Процедура УправлениеВидимостьюКнопкиПодбораЛС()
	
	Если НЕ Метаданные.ОбщиеФормы.Найти("УПЖКХ_ПодборОбъектов") = Неопределено Тогда
		ПутьКФормеПодбора = "ОбщаяФорма.УПЖКХ_ПодборОбъектов";
	ИначеЕсли НЕ Метаданные.Обработки.УПЖКХ_ИнтеграцияСМобильнымПриложением.Формы.Найти("ПодборОбъектов") = Неопределено Тогда
		ПутьКФормеПодбора = "Обработка.УПЖКХ_ИнтеграцияСМобильнымПриложением.Форма.ПодборОбъектов";
	Иначе
		ПутьКФормеПодбора = "";
	КонецЕсли;
	
	Если ПустаяСтрока(ПутьКФормеПодбора) Тогда
		Элементы.ТаблицаЛСКнопкаЗаполнитьСОтбором.Видимость = Ложь;
	Иначе
		Элементы.ТаблицаЛСКнопкаЗаполнитьСОтбором.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры // УправлениеВидимостьюКнопкиПодбораЛС()

&НаКлиенте
// Обрабатывает выбор каталога выгрузки.
//
Процедура ОбработатьВыборКаталогаВыгрузки(Каталог, ДополнительныеПараметры) Экспорт
	
	Если НЕ Каталог = Неопределено Тогда
		
		ПутьККаталогуДляВыгрузки = Каталог[0];
		
		УПЖКХ_ИнтеграцияСГолосовымиСервисамиВзаимодействиеСБазойДанных.УстановитьНастройкиИнтеграцииCГолосовымиСервисами(Новый Структура("КаталогСохраненияФайловВыгрузки", ПутьККаталогуДляВыгрузки));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обрабатывает выбор файла загрузки.
//
Процедура ОбработатьВыборФайлаЗагрузки(ФайлЗагрузки, ДополнительныеПараметры) Экспорт
	
	Если НЕ ФайлЗагрузки = Неопределено Тогда
		
		ПутьКФайлуДляЗагрузки = ФайлЗагрузки[0];
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ВЫПОЛНЕНИЯ ОБМЕНОВ

#Область ПроцедурыВыполненияОбменов

////////////////////////////////////
// ОБЩЕЕ

&НаСервере
// Формирует структуру настроек, на основании которой выполняется обмен.
//
Функция ПодготовитьСтруктуруНастроекОбмена()
	
	СтруктураНастроекОбмена = Новый Структура("ВыгрузкаДанныхПоЛС, ВыгружатьТолькоПоВыбраннымЛицевымСчетам, ВыбранныеЛицевыеСчета, ЗагрузкаПоказанийПУ");
	
	СтруктураНастроекОбмена.ВыгрузкаДанныхПоЛС = ВыгружатьСведенияПоЛС;
	
	Если ВыгружатьСведенияПоЛС И УказатьЛицевыеСчета = 1 Тогда
		СтруктураНастроекОбмена.ВыгружатьТолькоПоВыбраннымЛицевымСчетам = Истина;
		СтруктураНастроекОбмена.ВыбранныеЛицевыеСчета = ЛицевыеСчета.Выгрузить();
	Иначе
		СтруктураНастроекОбмена.ВыгружатьТолькоПоВыбраннымЛицевымСчетам = Ложь;
	КонецЕсли;
	
	СтруктураНастроекОбмена.ЗагрузкаПоказанийПУ = ЗагружатьПоказанияСчетчиков;
	
	Возврат СтруктураНастроекОбмена;
	
КонецФункции

////////////////////////////////////
// ПРЯМОЙ ОБМЕН ДАННЫМИ

&НаСервере
// Выполняет обмен на основании указанных на форме настроек.
//
Процедура ВыполнитьПрямойОбменНаСервере()
	
	УПЖКХ_ИнтеграцияСГолосовымиСервисамиВзаимодействиеССервером.ВыполнитьОбменДанными(ПодготовитьСтруктуруНастроекОбмена(), Объект.СообщенияДляПользователя);
	
КонецПроцедуры

////////////////////////////////////
// ВЫГРУЗКА ДАННЫХ В АВТОНОМНОМ РЕЖИМЕ

&НаКлиенте
// Формирует файл выгрузки и сохраняет его на клиентском компьютере.
//
Процедура СформироватьФайлОбменаИВыгрузитьНаДиск()
	
	СведенияОФайлеВыгрузки = СформироватьФайлВыгрузкиДляОбработкиНаСторонеКлиента();
	
	Если ТипЗнч(СведенияОФайлеВыгрузки) = Тип("Структура")
	   И СведенияОФайлеВыгрузки.Свойство("СохраненныйФайл")
	   И НЕ СведенияОФайлеВыгрузки.СохраненныйФайл = Неопределено Тогда
		
		СохраненныйФайл = СведенияОФайлеВыгрузки.СохраненныйФайл;
		РасширениеФайла = СведенияОФайлеВыгрузки.РасширениеФайла;
		
		ИмяФайла = СтрШаблон("данные выгрузки %1.zip", СтрЗаменить(Формат(ТекущаяДата(), "ДЛФ=ДВ"), ":", "."));
		
		Если РасширениеФайла = "zip" Тогда
			
			СохраненныйФайл.Записать(ПутьККаталогуДляВыгрузки + "\" + ИмяФайла);
			
		Иначе
			
			#Если Не ВебКлиент Тогда
				
				ВременныйФайл = ПолучитьИмяВременногоФайла();
				
				СохраненныйФайл.Записать(ВременныйФайл);
				
				ЗаписьZIP = Новый ЗаписьZipФайла(ПутьККаталогуДляВыгрузки + "\" + ИмяФайла);
				ЗаписьZIP.Добавить(ВременныйФайл);
				ЗаписьZIP.Записать();
				
			#КонецЕсли
			
		КонецЕсли;
		
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось выгрузить данные.");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Формирует файл выгрузки для обработки на стороне клиента.
//
Функция СформироватьФайлВыгрузкиДляОбработкиНаСторонеКлиента()
	
	СтруктураОтбора = УПЖКХ_ИнтеграцияСГолосовымиСервисамиВзаимодействиеССервером.СформироватьФайлВыгрузкиБезОтправкиНаСервис(ПодготовитьСтруктуруНастроекОбмена(), Объект.СообщенияДляПользователя);
	
	Возврат РегистрыСведений.УПЖКХ_ЖурналОбменаСГолосовымиСервисами.ПолучитьСведенияОФайлеОбмена(СтруктураОтбора);
	
КонецФункции

////////////////////////////////////
// ЗАГРУЗКА ДАННЫХ В АВТОНОМНОМ РЕЖИМЕ

&НаКлиенте
// Загружает данные из файла с показаниями, расположенного на клиентском компьютере.
//
Процедура ЗагрузитьДанныеИзФайлаОбменаНаДиске()
	
	ОповещениеОПередачеФайла = Новый ОписаниеОповещения("ОбработатьПередачуФайлаЗагрузкиНаСервер", ЭтотОбъект);
	
	НачатьПомещениеФайла(ОповещениеОПередачеФайла,, ПутьКФайлуДляЗагрузки, Ложь, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
// Обрабатывает загруженный на сервер файл с показаниями.
//
Процедура ОбработатьПередачуФайлаЗагрузкиНаСервер(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Адрес) Тогда
		ЗагрузитьДанныеИзФайлаОбменаНаСервере(Адрес);
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось загрузить данные.");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Выполняет загрузку данных из переданного на сервер файла с показаниями.
//
Процедура ЗагрузитьДанныеИзФайлаОбменаНаСервере(АдресВоВременномХранилище)
	
	ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	РасширениеФайла     = ?(СтрЗаканчиваетсяНа(ПутьКФайлуДляЗагрузки, ".zip"), "zip", "txt");
	
	УПЖКХ_ИнтеграцияСГолосовымиСервисамиВзаимодействиеСБазойДанных.ЗагрузитьПоказанияСчетчиковИзФайлаОбмена(ДвоичныеДанныеФайла, РасширениеФайла, Объект.СообщенияДляПользователя, Перечисления.УПЖКХ_ВидыОбменаСГолосовымиСервисами.ЗагрузкаДанныхИзФайла, Истина);
	
КонецПроцедуры

#КонецОбласти
