
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьНастройкиИнтеграции();
	
	ВыполнитьПереходПоСтраницам();
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма, Элементы.ПанельНавигации);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

&НаКлиенте
// Обработчик "ПриОткрытии" формы.
//
Процедура ПриОткрытии(Отказ)
	
	Если ТекущаяСтраницаИнтеграции = ПредопределенноеЗначение("Перечисление.УПЖКХ_СтраницыИнтеграцииСГолосовымиСервисами.УправлениеОбменами") Тогда
		ЗадатьВопросОбУведомленииТекущегоПользователяОВажныхСобытиях();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОтобразитьИзменениеИспользованияУведомленийМАРС" Тогда
		УведомлятьТекущегоПользователяОВажныхСообщениях = УПЖКХ_ИнтеграцияСГолосовымиСервисамиВзаимодействиеСБазойДанных.ПроверитьИспользованиеУведомленийДляПользователя();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С НАСТРОЙКАМИ ИНТЕГРАЦИИ

#Область РаботаСНастройкамиИнтеграции

&НаСервере
// Заполняет настройки интеграции.
//
Процедура ЗаполнитьНастройкиИнтеграции()
	
	СохраненныеНастройки = УПЖКХ_ИнтеграцияСГолосовымиСервисамиВзаимодействиеСБазойДанных.ПолучитьНастройкиИнтеграцииСГолосовымиСервисами();
	
	ПерсональныйURL             = СохраненныеНастройки.ПерсональныйURL;
	Логин                       = СохраненныеНастройки.Логин;
	Пароль                      = СохраненныеНастройки.Пароль;
	ТекущаяСтраницаИнтеграции   = СохраненныеНастройки.ТекущаяСтраницаИнтеграции;
	ИсточникНомераЛицевогоСчета = СохраненныеНастройки.ИсточникНомераЛицевогоСчета;
	
	РегламентноеЗаданиеВыгрузок = СохраненныеНастройки.РегламентноеЗаданиеВыгрузок;
	РегламентноеЗаданиеЗагрузок = СохраненныеНастройки.РегламентноеЗаданиеЗагрузок;
	
	МинимальнаяСуммаДолгаДляАвтообзвона                     = СохраненныеНастройки.МинимальнаяСуммаДолгаДляАвтообзвона;
	МинимальноеКоличествоМесяцевЗадолженностиДляАвтообзвона = СохраненныеНастройки.МинимальноеКоличествоМесяцевЗадолженностиДляАвтообзвона;
	
	Подписка_ВидПодписки = СохраненныеНастройки.Подписка_ВидПодписки;
	Подписка_Оплачена    = СохраненныеНастройки.Подписка_Оплачена;
	
	ОсталосьСекундДляАвтообзвона     = СохраненныеНастройки.ОсталосьСекундДляАвтообзвона;
	ОсталосьСекундДляПриемаПоказаний = СохраненныеНастройки.ОсталосьСекундДляПриемаПоказаний;
	ПорогПредупрежденияОМаломКоличествеОставшегосяВремени = СохраненныеНастройки.ПорогПредупрежденияОМаломКоличествеОставшегосяВремени;
	
	АвтономныйРежимРаботы = ?(СохраненныеНастройки.АвтономныйРежимРаботы, 1, 0);
	
	Если НЕ СохраненныеНастройки.АвтономныйРежимРаботы Тогда
		ОбновитьСведенияОПодписке();
	КонецЕсли;
	
	УведомлятьТекущегоПользователяОВажныхСообщениях = УПЖКХ_ИнтеграцияСГолосовымиСервисамиВзаимодействиеСБазойДанных.ПроверитьИспользованиеУведомленийДляПользователя();
	
КонецПроцедуры

&НаСервере
// Выполняет проверку использования автономного режима работы.
//
Функция ИспользуетсяАвтономныйРежимРаботы()
	
	Возврат АвтономныйРежимРаботы = 1;
	
КонецФункции

&НаСервере
// Заполняет сведения о подписке.
//
Процедура ОбновитьСведенияОПодписке()
	
	// Если заполнены параметры доступа, то пытаемся получить сведения о подписке.
	Если НЕ ПустаяСтрока(ПерсональныйURL) И НЕ ПустаяСтрока(Логин) И НЕ ПустаяСтрока(Пароль) Тогда
		
		СтруктураСоСведениямиОПодписке = УПЖКХ_ИнтеграцияСГолосовымиСервисамиВзаимодействиеССервером.ПолучитьСведенияОбУчетнойЗаписи(ПерсональныйURL, Логин, Пароль);
		
		ОбработатьСведенияОбУчетнойЗаписи(СтруктураСоСведениямиОПодписке)
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Обрабатывает полученные сведения о подписках и определяет, что доступно на основании этих сведений.
//
Процедура ОбработатьСведенияОбУчетнойЗаписи(СтруктураСоСведениямиОПодписке)
	
	// Если сведения о подписке удалось получить, то используем полученные сведения.
	Если СтруктураСоСведениямиОПодписке.ВыполненоУспешно Тогда
		
		Подписка_ВидПодписки = СтруктураСоСведениямиОПодписке.Подписка_ВидПодписки;
		Подписка_Оплачена    = СтруктураСоСведениямиОПодписке.Подписка_Оплачена;
		
		ОсталосьСекундДляАвтообзвона     = СтруктураСоСведениямиОПодписке.ОсталосьСекундДляАвтообзвона;
		ОсталосьСекундДляПриемаПоказаний = СтруктураСоСведениямиОПодписке.ОсталосьСекундДляПриемаПоказаний;
		ПорогПредупрежденияОМаломКоличествеОставшегосяВремени = СтруктураСоСведениямиОПодписке.ПорогПредупрежденияОМаломКоличествеОставшегосяВремени;
		
		ОтображатьНастройкиВыгрузки = НЕ Подписка_ВидПодписки = Перечисления.УПЖКХ_ВидыПодпискиНаГолосовыеСервисы.Отсутствует;
		ОтображатьНастройкиЗагрузки = Подписка_ВидПодписки = Перечисления.УПЖКХ_ВидыПодпискиНаГолосовыеСервисы.ПриемПоказаний ИЛИ Подписка_ВидПодписки = Перечисления.УПЖКХ_ВидыПодпискиНаГолосовыеСервисы.АвтообзвонДолжниковИПриемПоказаний;
		
		ИнициализацияСтраницыНастройкиРасписанияАвтоматическогоОбмена();
		
		Если НЕ ОтображатьНастройкиВыгрузки Тогда
			
			ВыполнятьВыгрузкиПоРасписанию = Ложь;
			
			УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.УстановитьИспользованиеРегламентногоЗадания(РегламентноеЗаданиеВыгрузок, ВыполнятьВыгрузкиПоРасписанию);
			
		КонецЕсли;
		
		Если НЕ ОтображатьНастройкиЗагрузки Тогда
			
			ВыполнятьЗагрузкиПоРасписанию = Ложь;
			
			УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.УстановитьИспользованиеРегламентногоЗадания(РегламентноеЗаданиеЗагрузок, ВыполнятьЗагрузкиПоРасписанию);
			
		КонецЕсли;
		
		// Сохраняем полученные сведения о подписке.
		СохранитьНастройкиИнтеграции();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Сохраняет настройки интеграции.
//
Процедура СохранитьНастройкиИнтеграции()
	
	СтруктураНастроек = Новый Структура("ПерсональныйURL, Логин, Пароль, ТекущаяСтраницаИнтеграции, РегламентноеЗаданиеВыгрузок, РегламентноеЗаданиеЗагрузок, МинимальнаяСуммаДолгаДляАвтообзвона, МинимальноеКоличествоМесяцевЗадолженностиДляАвтообзвона, Подписка_ВидПодписки, Подписка_Оплачена, ОсталосьСекундДляАвтообзвона, ОсталосьСекундДляПриемаПоказаний, ПорогПредупрежденияОМаломКоличествеОставшегосяВремени, АвтономныйРежимРаботы, ИсточникНомераЛицевогоСчета",
										ПерсональныйURL, Логин, Пароль, ТекущаяСтраницаИнтеграции, РегламентноеЗаданиеВыгрузок, РегламентноеЗаданиеЗагрузок, МинимальнаяСуммаДолгаДляАвтообзвона, МинимальноеКоличествоМесяцевЗадолженностиДляАвтообзвона, Подписка_ВидПодписки, Подписка_Оплачена, ОсталосьСекундДляАвтообзвона, ОсталосьСекундДляПриемаПоказаний, ПорогПредупрежденияОМаломКоличествеОставшегосяВремени, ИспользуетсяАвтономныйРежимРаботы(), ИсточникНомераЛицевогоСчета);
	
	УПЖКХ_ИнтеграцияСГолосовымиСервисамиВзаимодействиеСБазойДанных.УстановитьНастройкиИнтеграцииCГолосовымиСервисами(СтруктураНастроек);
	
КонецПроцедуры

&НаКлиенте
// Обновляет сведения о подписке.
//
Процедура ОбновитьИнформациюОПодписке(Результат, Параметры) Экспорт
	
	ЗаполнитьНастройкиИнтеграции();
	
	ПерейтиНаСтраницуУправленияОбменами();
	
КонецПроцедуры

&НаКлиенте
// Открывает форму л/с с нечисловыми символами в номерах
//
Процедура ОткрытьФормуЛССНечисловымиСимволамиВНомере(ИсточникНомераЛС)
	
	Если ИсточникНомераЛС = "Наименование" Тогда
		СписокДляОткрытия = Проверка_СписокЛССНечисловымиСимволамиНаименованиеЛС;
	ИначеЕсли ИсточникНомераЛС = "Идентификатор" Тогда
		СписокДляОткрытия = Проверка_СписокЛССНечисловымиСимволамиИдентификаторЛС;
	Иначе
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытияФормы = Новый Структура("МассивЛССНечисловымиСимволамиВНомере", СписокДляОткрытия.ВыгрузитьЗначения());
	
	ОткрытьФорму("Обработка.УПЖКХ_ИнтеграцияСГолосовымиСервисами.Форма.ФормаЛССНечисловымиСимволамиВНомере", ПараметрыОткрытияФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("ОбновитьИнформациюОЛССНечисловымиСимволамиВНомере", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
// Обновляет информацию о л/с с нечисловыми символами в номере после закрытия
// формы л/с с нечисловыми номерами.
//
Процедура ОбновитьИнформациюОЛССНечисловымиСимволамиВНомере(Результат, Параметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("ИсточникНомераЛицевогоСчета") Тогда
		ИсточникНомераЛицевогоСчета = Результат.ИсточникНомераЛицевогоСчета;
	КонецЕсли;
	
	УстановитьВидимостьИнформацииОВозможныхПроблемах(ТекущаяСтраницаИнтеграции = ПредопределенноеЗначение("Перечисление.УПЖКХ_СтраницыИнтеграцииСГолосовымиСервисами.ПроверкаВозможностиИспользованияСервисов"));
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕРЕХОДА ПО СТРАНИЦАМ

#Область ПроцедурыИФункцииПереходаПоСтраницам

&НаСервере
// Устанавливает видимость информации о возможных проблемах при обмене с сервисами.
//
Процедура УстановитьВидимостьИнформацииОВозможныхПроблемах(ПолучатьСведенияПоВсемВариантамХраненияНомера = Ложь)
	
	ПроверятьНаименованияЛС   = ПолучатьСведенияПоВсемВариантамХраненияНомера ИЛИ ИсточникНомераЛицевогоСчета = "Наименование";
	ПроверятьИдентификаторыЛС = ПолучатьСведенияПоВсемВариантамХраненияНомера ИЛИ ИсточникНомераЛицевогоСчета = "Идентификатор";
	
	СтруктураИнформацииОВозможностиИспользованияСервисов = УПЖКХ_ИнтеграцияСГолосовымиСервисамиВзаимодействиеСБазойДанных.ПолучитьИнформациюОВозможностиИспользованияСервисов(ПроверятьНаименованияЛС, ПроверятьИдентификаторыЛС);
	
	///////////////////////////////////////////////
	// Заполнение данных.
	
	// Наименования л/с.
	ЕстьПроблемыСПриемомПоказанийНаименованиеЛС    = СтруктураИнформацииОВозможностиИспользованияСервисов.ЕстьПроблемыСПриемомПоказанийНаименованиеЛС;
	ОписаниеПроблемСПриемомПоказанийНаименованиеЛС = СтруктураИнформацииОВозможностиИспользованияСервисов.ОписаниеПроблемСПриемомПоказанийНаименованиеЛС;
	
	Проверка_СписокЛССНечисловымиСимволамиНаименованиеЛС.Очистить();
	Проверка_СписокЛССНечисловымиСимволамиНаименованиеЛС.ЗагрузитьЗначения(СтруктураИнформацииОВозможностиИспользованияСервисов.МассивПроблемныхЛСДляПриемаПоказанийНаименованиеЛС);
	
	// Идентификаторы л/с.
	ЕстьПроблемыСПриемомПоказанийИдентификаторЛС    = СтруктураИнформацииОВозможностиИспользованияСервисов.ЕстьПроблемыСПриемомПоказанийИдентификаторЛС;
	ОписаниеПроблемСПриемомПоказанийИдентификаторЛС = СтруктураИнформацииОВозможностиИспользованияСервисов.ОписаниеПроблемСПриемомПоказанийИдентификаторЛС;
	
	Проверка_СписокЛССНечисловымиСимволамиИдентификаторЛС.Очистить();
	Проверка_СписокЛССНечисловымиСимволамиИдентификаторЛС.ЗагрузитьЗначения(СтруктураИнформацииОВозможностиИспользованияСервисов.МассивПроблемныхЛСДляПриемаПоказанийИдентификаторЛС);
	
	///////////////////////////////////////////////
	// Управление видимостью.
	
	Элементы.ГруппаСервисПриемаПоказанийУспешно.Видимость = НЕ ЕстьПроблемыСПриемомПоказанийНаименованиеЛС И НЕ ЕстьПроблемыСПриемомПоказанийИдентификаторЛС;
	
	// Наименования л/с.
	Элементы.ГруппаСервисПриемаПоказанийНеуспешноНаименованиеЛС.Видимость = ЕстьПроблемыСПриемомПоказанийНаименованиеЛС;
	
	// Идентификаторы л/с.
	Элементы.ГруппаСервисПриемаПоказанийНеуспешноИдентификаторЛС.Видимость = ЕстьПроблемыСПриемомПоказанийИдентификаторЛС;
	
	// Страница управления.
	Элементы.ГруппаНастройкиПодключенияСтраницаУправления.Видимость = ЕстьПроблемыСПриемомПоказанийНаименованиеЛС ИЛИ ЕстьПроблемыСПриемомПоказанийИдентификаторЛС;
	
	Если ЕстьПроблемыСПриемомПоказанийНаименованиеЛС Тогда
		Элементы.НадписьВозможныеПроблемыСтраницаУправления.Заголовок = ОписаниеПроблемСПриемомПоказанийНаименованиеЛС;
	ИначеЕсли ЕстьПроблемыСПриемомПоказанийИдентификаторЛС Тогда
		Элементы.НадписьВозможныеПроблемыСтраницаУправления.Заголовок = ОписаниеПроблемСПриемомПоказанийИдентификаторЛС;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Проверяет возможность перехода на следующую страницу.
//
Функция ПроверитьВозможностьПерехода(НаправлениеПерехода)
	
	Если НаправлениеПерехода = "Вперед" Тогда
		
		Если ТекущаяСтраницаИнтеграции = Перечисления.УПЖКХ_СтраницыИнтеграцииСГолосовымиСервисами.НастройкаПодключения Тогда
			
			Возврат ПроверитьЗаполнениеСтраницыПараметровДоступа();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
// Выполняет переход на следующую или предыдущую страницу.
//
Процедура ВыполнитьПереходПоСтраницам(НаправлениеДвижения = "")
	
	// Определяем страницу для перехода.
	
	// По умолчанию оставляем текущую страницу.
	// Это нужно для перехода на нужную страницу при открытии формы.
	СледующаяСтраница = ТекущаяСтраницаИнтеграции;
	
	// Определяем страницу для переходя исходя из направления.
	Если НаправлениеДвижения = "Вперед" Тогда
		
		Если ТекущаяСтраницаИнтеграции = Перечисления.УПЖКХ_СтраницыИнтеграцииСГолосовымиСервисами.ГлавнаяСтраница Тогда
			СледующаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииСГолосовымиСервисами.ПроверкаВозможностиИспользованияСервисов;
		ИначеЕсли ТекущаяСтраницаИнтеграции = Перечисления.УПЖКХ_СтраницыИнтеграцииСГолосовымиСервисами.ПроверкаВозможностиИспользованияСервисов Тогда
			СледующаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииСГолосовымиСервисами.НастройкаПодключения;
		ИначеЕсли ТекущаяСтраницаИнтеграции = Перечисления.УПЖКХ_СтраницыИнтеграцииСГолосовымиСервисами.НастройкаПодключения Тогда
			СледующаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииСГолосовымиСервисами.НастройкаРасписания;
		ИначеЕсли ТекущаяСтраницаИнтеграции = Перечисления.УПЖКХ_СтраницыИнтеграцииСГолосовымиСервисами.НастройкаРасписания Тогда
			СледующаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииСГолосовымиСервисами.ЗавершениеНастройки;
		ИначеЕсли ТекущаяСтраницаИнтеграции = Перечисления.УПЖКХ_СтраницыИнтеграцииСГолосовымиСервисами.ЗавершениеНастройки Тогда
			СледующаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииСГолосовымиСервисами.УправлениеОбменами;
		КонецЕсли;
		
	ИначеЕсли НаправлениеДвижения = "Назад" Тогда
		
		Если ТекущаяСтраницаИнтеграции = Перечисления.УПЖКХ_СтраницыИнтеграцииСГолосовымиСервисами.ПроверкаВозможностиИспользованияСервисов Тогда
			СледующаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииСГолосовымиСервисами.ГлавнаяСтраница;
		ИначеЕсли ТекущаяСтраницаИнтеграции = Перечисления.УПЖКХ_СтраницыИнтеграцииСГолосовымиСервисами.НастройкаПодключения Тогда
			СледующаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииСГолосовымиСервисами.ПроверкаВозможностиИспользованияСервисов;
		ИначеЕсли ТекущаяСтраницаИнтеграции = Перечисления.УПЖКХ_СтраницыИнтеграцииСГолосовымиСервисами.НастройкаРасписания Тогда
			СледующаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииСГолосовымиСервисами.НастройкаПодключения;
		ИначеЕсли ТекущаяСтраницаИнтеграции = Перечисления.УПЖКХ_СтраницыИнтеграцииСГолосовымиСервисами.ЗавершениеНастройки Тогда
			Если Подписка_ВидПодписки = Перечисления.УПЖКХ_ВидыПодпискиНаГолосовыеСервисы.Отсутствует ИЛИ НЕ Подписка_Оплачена Тогда
				СледующаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииСГолосовымиСервисами.НастройкаПодключения;
			Иначе
				СледующаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииСГолосовымиСервисами.НастройкаРасписания;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// Выполняем переход.
	Если СледующаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииСГолосовымиСервисами.ГлавнаяСтраница Тогда
		ПерейтиНаГлавнуюСтраницу();
	ИначеЕсли СледующаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииСГолосовымиСервисами.ПроверкаВозможностиИспользованияСервисов Тогда
		ПерейтиНаСтраницуПроверкиВозможностиИспользованияСервисов();
	ИначеЕсли СледующаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииСГолосовымиСервисами.НастройкаПодключения Тогда
		ПерейтиНаСтраницуНастроекПодключения();
	ИначеЕсли СледующаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииСГолосовымиСервисами.НастройкаРасписания Тогда
		ПерейтиНаСтраницуНастроекРасписания();
	ИначеЕсли СледующаяСтраница = Перечисления.УПЖКХ_СтраницыИнтеграцииСГолосовымиСервисами.ЗавершениеНастройки Тогда
		ПерейтиНаСтраницуЗавершенияНастройки();
	Иначе
		ПерейтиНаСтраницуУправленияОбменами();
	КонецЕсли;
	
	ТекущаяСтраницаИнтеграции = СледующаяСтраница;
	
	// Сохраняем текущее состояние.
	СохранитьНастройкиИнтеграции();
	
КонецПроцедуры

&НаСервере
// Выполняет переход на стартовую страницу.
//
Процедура ПерейтиНаГлавнуюСтраницу()
	
	Элементы.ШапкиФормы.ТекущаяСтраница     = Элементы.ШапкаГлавнаяСтраница;
	Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаСтартовая;
	
	Элементы.ПанельПодвал.Видимость = Истина;
	
	Элементы.КнопкаНазад.Видимость  = Ложь;
	Элементы.КнопкаДалее.Видимость  = Истина;
	Элементы.КнопкаОтмена.Видимость = Истина;
	
	Элементы.КнопкаОтмена.Заголовок = "Отмена";
	
КонецПроцедуры

&НаСервере
// Выполняет переход на страницу проверки возможности использования сервисов.
//
Процедура ПерейтиНаСтраницуПроверкиВозможностиИспользованияСервисов()
	
	Элементы.ШапкиФормы.ТекущаяСтраница     = Элементы.ШапкаПроверкаВозможностиИспользованияСервисов;
	Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаПроверкиВозможностиИспользованияСервисов;
	
	Элементы.ПанельПодвал.Видимость = Истина;
	
	Элементы.КнопкаНазад.Видимость  = Истина;
	Элементы.КнопкаДалее.Видимость  = Истина;
	Элементы.КнопкаОтмена.Видимость = Истина;
	
	Элементы.КнопкаОтмена.Заголовок = "Отмена";
	
	// Определяем наличие л/с с нечисловыми символами и настраиваем видимость связанных с этим элементов формы.
	УстановитьВидимостьИнформацииОВозможныхПроблемах(Истина);
	
КонецПроцедуры

&НаСервере
// Выполняет переход на страницу настройки параметров доступа.
//
Процедура ПерейтиНаСтраницуНастроекПодключения()
	
	Элементы.ШапкиФормы.ТекущаяСтраница     = Элементы.ШапкаНастройкиПодключения;
	Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаНастроекПодключения;
	
	Элементы.ПанельПодвал.Видимость = Истина;
	
	Элементы.КнопкаНазад.Видимость = Истина;
	Элементы.КнопкаДалее.Видимость = Истина;
	
	Элементы.КнопкаДалее.Доступность = Истина;
	
	Элементы.КнопкаОтмена.Заголовок = "Отмена";
	
	Элементы.ГруппаНастройкиПодключенияВерхняяЧасть.Видимость    = НЕ ИспользуетсяАвтономныйРежимРаботы();
	
КонецПроцедуры

&НаСервере
// Выполняет переход на страницу настройки расписаний обменов.
//
Процедура ПерейтиНаСтраницуНастроекРасписания()
	
	Элементы.ШапкиФормы.ТекущаяСтраница     = Элементы.ШапкаРасписанияОбменов;
	Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаНастройкаРасписания;
	
	ИспользоватьПрямойОбменССервисом = НЕ ИспользуетсяАвтономныйРежимРаботы();
	
	Если ИспользоватьПрямойОбменССервисом И (Подписка_ВидПодписки = Перечисления.УПЖКХ_ВидыПодпискиНаГолосовыеСервисы.Отсутствует ИЛИ НЕ Подписка_Оплачена) Тогда
		
		ТекущаяСтраницаИнтеграции = Перечисления.УПЖКХ_СтраницыИнтеграцииСГолосовымиСервисами.НастройкаРасписания;
		
		ИнициализацияСтраницыНастройкиРасписанияАвтоматическогоОбмена();
		
		СохранитьНастройкиИнтеграции();
		
		ВыполнитьПереходПоСтраницам("Вперед");
		
		Возврат;
	КонецЕсли;
	
	ОтображатьНастройкиВыгрузки    = ИспользоватьПрямойОбменССервисом И НЕ Подписка_ВидПодписки = Перечисления.УПЖКХ_ВидыПодпискиНаГолосовыеСервисы.Отсутствует;
	ОтображатьНастройкиЗагрузки    = ИспользоватьПрямойОбменССервисом И (Подписка_ВидПодписки = Перечисления.УПЖКХ_ВидыПодпискиНаГолосовыеСервисы.ПриемПоказаний ИЛИ Подписка_ВидПодписки = Перечисления.УПЖКХ_ВидыПодпискиНаГолосовыеСервисы.АвтообзвонДолжниковИПриемПоказаний);
	ОтображатьНастройкиАвтообзвона = Подписка_ВидПодписки = Перечисления.УПЖКХ_ВидыПодпискиНаГолосовыеСервисы.АвтообзвонДолжников ИЛИ Подписка_ВидПодписки = Перечисления.УПЖКХ_ВидыПодпискиНаГолосовыеСервисы.АвтообзвонДолжниковИПриемПоказаний;
	
	Элементы.ГруппаВыгрузкаНаСервер.Видимость     = ОтображатьНастройкиВыгрузки;
	Элементы.ГруппаЗагрузкаССервера.Видимость     = ОтображатьНастройкиЗагрузки;
	Элементы.ГруппаНастройкиАвтообзвона.Видимость = НЕ ИспользоватьПрямойОбменССервисом ИЛИ ОтображатьНастройкиАвтообзвона;
	
	Элементы.ПанельПодвал.Видимость = Истина;
	
	Элементы.КнопкаНазад.Видимость = Истина;
	Элементы.КнопкаДалее.Видимость = Истина;
	
	Элементы.КнопкаОтмена.Заголовок = "Отмена";
	
	ИнициализацияСтраницыНастройкиРасписанияАвтоматическогоОбмена();
	
	СохранитьНастройкиИнтеграции();
	
КонецПроцедуры

&НаСервере
// Выполняет переход на страницу завершения мастера.
//
Процедура ПерейтиНаСтраницуЗавершенияНастройки()
	
	Элементы.ШапкиФормы.ТекущаяСтраница     = Элементы.ШапкаЗавершениеНастройки;
	Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаЗавершениеНастройки;
	
	Элементы.ГруппаВыгрузкаНаСервер.Видимость = Ложь;
	Элементы.ГруппаЗагрузкаССервера.Видимость = Ложь;
	
	Элементы.ПанельПодвал.Видимость = Истина;
	
	Элементы.КнопкаНазад.Видимость = Истина;
	Элементы.КнопкаДалее.Видимость = Истина;
	
	Элементы.КнопкаОтмена.Заголовок = "Отмена";
	
КонецПроцедуры

&НаСервере
// Выполняет переход на страницу управления интеграцией.
//
Процедура ПерейтиНаСтраницуУправленияОбменами()
	
	ИспользуетсяАвтономныйРежим = ИспользуетсяАвтономныйРежимРаботы();
	СчитатьПодпискуОплаченной   = ИспользуетсяАвтономныйРежим ИЛИ Подписка_Оплачена;
	
	ОтображатьНастройкиВыгрузки    = ИспользуетсяАвтономныйРежим ИЛИ НЕ Подписка_ВидПодписки = Перечисления.УПЖКХ_ВидыПодпискиНаГолосовыеСервисы.Отсутствует;
	ОтображатьНастройкиЗагрузки    = ИспользуетсяАвтономныйРежим ИЛИ Подписка_ВидПодписки = Перечисления.УПЖКХ_ВидыПодпискиНаГолосовыеСервисы.ПриемПоказаний ИЛИ Подписка_ВидПодписки = Перечисления.УПЖКХ_ВидыПодпискиНаГолосовыеСервисы.АвтообзвонДолжниковИПриемПоказаний;
	ОтображатьНастройкиАвтообзвона = ИспользуетсяАвтономныйРежим ИЛИ Подписка_ВидПодписки = Перечисления.УПЖКХ_ВидыПодпискиНаГолосовыеСервисы.АвтообзвонДолжников ИЛИ Подписка_ВидПодписки = Перечисления.УПЖКХ_ВидыПодпискиНаГолосовыеСервисы.АвтообзвонДолжниковИПриемПоказаний;
	
	Если ИспользуетсяАвтономныйРежим Тогда
		
		Элементы.ГруппаЗагрузкаПоказанийСчетчиков.Видимость = Ложь;
		Элементы.ГруппаАвтообзвонДолжников.Видимость        = Ложь;
		
		Элементы.НадписьРазделитель7.Видимость = Элементы.ГруппаНастройкиПодключенияСтраницаУправления.Видимость;
		
	Иначе
		
		Элементы.ГруппаЗагрузкаПоказанийСчетчиков.Видимость = Истина;
		Элементы.ГруппаАвтообзвонДолжников.Видимость        = Истина;
		Элементы.НадписьРазделитель7.Видимость              = Истина;
		
		Если ОтображатьНастройкиЗагрузки Тогда
			Если СчитатьПодпискуОплаченной Тогда
				ПредставлениеОставшегосяВремениПриемПоказаний = ПреобразоватьКоличествоОставшихсяСекундВФорматированнуюСтроку(ОсталосьСекундДляПриемаПоказаний);
				
				Элементы.ПредставлениеОставшегосяВремениПриемПоказаний.Видимость        = Истина;
				Элементы.ИндикаторАктивностиСервисаЗагрузкиПоказанийСчетчиков.ЦветФона  = ПолучитьЗеленыйЦветОформления();
				Элементы.ИндикаторАктивностиСервисаЗагрузкиПоказанийСчетчиков.Заголовок = "Сервис активен";
			Иначе
				Элементы.ИндикаторАктивностиСервисаЗагрузкиПоказанийСчетчиков.ЦветФона  = ПолучитьКрасныйЦветОформления();
				Элементы.ИндикаторАктивностиСервисаЗагрузкиПоказанийСчетчиков.Заголовок = "Сервис не оплачен";
			КонецЕсли;
		Иначе
			Элементы.ИндикаторАктивностиСервисаЗагрузкиПоказанийСчетчиков.ЦветФона  = ПолучитьКрасныйЦветОформления();
			Элементы.ИндикаторАктивностиСервисаЗагрузкиПоказанийСчетчиков.Заголовок = "Сервис не активен";
		КонецЕсли;
		
		Если ОтображатьНастройкиАвтообзвона Тогда
			Если СчитатьПодпискуОплаченной Тогда
				ПредставлениеОставшегосяВремениАвтообзвон = ПреобразоватьКоличествоОставшихсяСекундВФорматированнуюСтроку(ОсталосьСекундДляАвтообзвона);
				
				Элементы.ПредставлениеОставшегосяВремениАвтообзвон.Видимость     = Истина;
				Элементы.ИндикаторАктивностиСервисаАвтообзвонДолжников.ЦветФона  = ПолучитьЗеленыйЦветОформления();
				Элементы.ИндикаторАктивностиСервисаАвтообзвонДолжников.Заголовок = "Сервис активен";
			Иначе
				Элементы.ИндикаторАктивностиСервисаАвтообзвонДолжников.ЦветФона  = ПолучитьКрасныйЦветОформления();
				Элементы.ИндикаторАктивностиСервисаАвтообзвонДолжников.Заголовок = "Сервис не оплачен";
			КонецЕсли;
		Иначе
			Элементы.ИндикаторАктивностиСервисаАвтообзвонДолжников.ЦветФона  = ПолучитьКрасныйЦветОформления();
			Элементы.ИндикаторАктивностиСервисаАвтообзвонДолжников.Заголовок = "Сервис не активен";
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ГиперссылкаНаИнформациюОПодключенииСервисаЗагрузкиПоказанийСчетчиков.Видимость = НЕ ОтображатьНастройкиЗагрузки;
	Элементы.ГиперссылкаНаИнформациюОПодключенииСервисаАвтообзвонаДолжников.Видимость       = НЕ ОтображатьНастройкиАвтообзвона;
	
	Элементы.ШапкиФормы.ТекущаяСтраница     = Элементы.ШапкаУправлениеИнтеграцией;
	Элементы.ПанельОсновная.ТекущаяСтраница = Элементы.СтраницаУправленияИнтеграцией;
	
	Элементы.ГруппаИзменитьРасписаниеОбменов.Видимость             = ОтображатьНастройкиВыгрузки И Не ИспользуетсяАвтономныйРежим;
	Элементы.ГруппаИзменитьНастройкиАвтообзвонаДолжников.Видимость = ОтображатьНастройкиАвтообзвона;
	Элементы.ГруппаРазовыеОбменыДанными.Видимость                  = ОтображатьНастройкиВыгрузки;
	Элементы.ГруппаДополнительно.Видимость                         = ОтображатьНастройкиЗагрузки;
	
	Элементы.КнопкаИзменитьРасписанияОбменов.Доступность     = СчитатьПодпискуОплаченной;
	Элементы.КнопкаНастройкиАвтообзвонаДолжников.Доступность = СчитатьПодпискуОплаченной;
	Элементы.КнопкаРазовыеОбменыДанными.Доступность          = СчитатьПодпискуОплаченной;
	Элементы.КнопкаПечатьЛистовки.Доступность                = СчитатьПодпискуОплаченной;
	
	Элементы.ПанельПодвал.Видимость = Ложь;
	
	Элементы.КнопкаНазад.Видимость = Ложь;
	Элементы.КнопкаДалее.Видимость = Ложь;
	
	Элементы.КнопкаОтмена.Заголовок = "Закрыть";
	
	// Определяем наличие л/с с нечисловыми символами и настраиваем видимость связанных с этим элементов формы.
	УстановитьВидимостьИнформацииОВозможныхПроблемах();
	
КонецПроцедуры

// Преобразовывает количество секунд в форматированную строку для вывода в сведениях о лицензии.
//
Функция ПреобразоватьКоличествоОставшихсяСекундВФорматированнуюСтроку(КоличествоСекундВсего)
	
	ИтоговыйТекст = УПЖКХ_ИнтеграцияСГолосовымиСервисамиВзаимодействиеСБазойДанных.ПреобразоватьКоличествоОставшихсяСекундВСтроку(КоличествоСекундВсего);
	
	// Формируем итоговую строку.
	ОстатокСекундНижеМинимальногоПорога = КоличествоСекундВсего < ПорогПредупрежденияОМаломКоличествеОставшегосяВремени;
	
	СтрокаОстаткаМинут = Новый ФорматированнаяСтрока(Строка(ИтоговыйТекст + "   "), Новый Шрифт("MS Shell Dlg", 10, Истина), ?(ОстатокСекундНижеМинимальногоПорога, ПолучитьКрасныйЦветОформления(), ПолучитьЗеленыйЦветОформления()));
	
	Если ОстатокСекундНижеМинимальногоПорога Тогда
		СтрокаОстаткаМинут = Новый ФорматированнаяСтрока(СтрокаОстаткаМинут, Новый ФорматированнаяСтрока("Приобрести пакет минут.",,,, УПЖКХ_ИнтеграцияСГолосовымиСервисамиВзаимодействиеССервером.ПолучитьАдресСтраницыОбратнойСвязи()));
	КонецЕсли;
	
	Возврат СтрокаОстаткаМинут;
	
КонецФункции

// Возвращает зеленый цвет, используемый в оформлении формы.
//
Функция ПолучитьЗеленыйЦветОформления()
	
	Возврат Новый Цвет(51, 153, 51);
	
КонецФункции

// Возвращает красный цвет, используемый в оформлении формы.
//
Функция ПолучитьКрасныйЦветОформления()
	
	Возврат Новый Цвет(255, 51, 51);
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ПАНЕЛИ НАВИГАЦИИ

#Область ОбработчикиКомандПанелиНавигации

&НаКлиенте
// Обработчик нажатия кнопки "Далее".
//
Процедура КомандаДалее(Команда)
	
	Если ПроверитьВозможностьПерехода("Вперед") Тогда
		
		ВыполнитьПереходПоСтраницам("Вперед");
		
	КонецЕсли;
	
	УПЖКХ_РаботаССообщениямиКлиент.ВывестиСообщения(Объект.СообщенияДляПользователя);
	
КонецПроцедуры

&НаКлиенте
// Обработчик нажатия кнопки "Назад".
//
Процедура КомандаНазад(Команда)
	
	ВыполнитьПереходПоСтраницам("Назад");
	
КонецПроцедуры

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ОТКРЫТИЯ ФОРМ

#Область ОбработчикиКомандОткрытияФорм

&НаКлиенте
// Открывает форму настройки параметров подключения.
//
Процедура КомандаИзменитьНастройкиПодключения(Команда)
	
	ЗаполнитьНастройкиИнтеграции();
	
	ПараметрыОткрытияФормы = Новый Структура("ПерсональныйURL, Логин, Пароль, АвтономныйРежимРаботы", ПерсональныйURL, Логин, Пароль, АвтономныйРежимРаботы);
	
	ОткрытьФорму("Обработка.УПЖКХ_ИнтеграцияСГолосовымиСервисами.Форма.ФормаНастройкиПараметровДоступа", ПараметрыОткрытияФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("ОбновитьИнформациюОПодписке", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
// Открывает форму общих настроек.
//
Процедура КомандаИзменитьОбщиеНастройки(Команда)
	
	ЗаполнитьНастройкиИнтеграции();
	
	ПараметрыОткрытияФормы = Новый Структура("ИсточникНомераЛицевогоСчета", ИсточникНомераЛицевогоСчета);
	
	ОткрытьФорму("Обработка.УПЖКХ_ИнтеграцияСГолосовымиСервисами.Форма.ФормаОбщихНастроек", ПараметрыОткрытияФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("ОбновитьИнформациюОЛССНечисловымиСимволамиВНомере", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
// Открывает форму настройки расписаний.
//
Процедура КомандаИзменитьРасписанияОбменов(Команда)
	
	ОткрытьФорму("Обработка.УПЖКХ_ИнтеграцияСГолосовымиСервисами.Форма.ФормаНастройкиРасписанийОбменов",, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
// Открывает формы настройки автообзвона должников.
//
Процедура КомандаИзменитьНастройкиАвтообзвонаДолжников(Команда)
	
	ОткрытьФорму("Обработка.УПЖКХ_ИнтеграцияСГолосовымиСервисами.Форма.ФормаНастройкиАвтообзвонаДолжников",, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
// Открывает форму разовых обменов данными.
//
Процедура КомандаРазовыеОбменыДанными(Команда)
	
	ОткрытьФорму("Обработка.УПЖКХ_ИнтеграцияСГолосовымиСервисами.Форма.ФормаРазовогоОбмена",, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
// Открывает форму истории обменов.
//
Процедура КомандаОткрытьЖурналОбмена(Команда)
	
	ОткрытьФорму("Обработка.УПЖКХ_ИнтеграцияСГолосовымиСервисами.Форма.ФормаИсторииОбменов",, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
// Открывает в браузере страницу описания возможности сервиса приема показаний.
//
Процедура КомандаОткрытьСтраницуСервисаПриемаПоказаний(Команда)
	
	АдресСтраницыОписанияСервиса = УПЖКХ_ИнтеграцияСГолосовымиСервисамиВзаимодействиеССервером.ПолучитьАдресСтраницыОписанияСервисаЗагрузкаПоказаний();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаОткрытьСтраницуСервисаПриемаПоказанийЗапускПриложения", ЭтотОбъект);
	НачатьЗапускПриложения(ОписаниеОповещения, АдресСтраницыОписанияСервиса);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения запуска приложения.
Процедура КомандаОткрытьСтраницуСервисаПриемаПоказанийЗапускПриложения(КодВозврата, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

&НаКлиенте
// Открывает в браузере страницу описания возможности сервиса автообзвона должников.
//
Процедура КомандаОткрытьСтраницуСервисаАвтообзвонаДолжников(Команда)
	
	АдресСтраницыОписанияСервиса = УПЖКХ_ИнтеграцияСГолосовымиСервисамиВзаимодействиеССервером.ПолучитьАдресСтраницыОписанияСервисаАвтообзвонДолжников();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("КомандаОткрытьСтраницуСервисаАвтообзвонаДолжниковЗапускПриложения", ЭтотОбъект);
	НачатьЗапускПриложения(ОписаниеОповещения, АдресСтраницыОписанияСервиса);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения запуска приложения.
Процедура КомандаОткрытьСтраницуСервисаАвтообзвонаДолжниковЗапускПриложения(КодВозврата, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

&НаКлиенте
// Открывает форму печати листовок.
Процедура КомандаПечатьЛистовки(Команда)
	
	Праметры = Новый Структура("ИмяОбъекта", "Обработка.УПЖКХ_ИнтеграцияСГолосовымиСервисами");
	ОткрытьФорму("ОбщаяФорма.УПЖКХ_ПечатьЛистовокЖКХ", Праметры, ЭтаФорма, Ложь);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

/////////////////////////////////////////////
// Страница определения возможности использования обменов.

#Область ОбработчикиСобытийСтраницыОпределенияВозможностиИспользованияОбменов

&НаКлиенте
// Обработчик "Нажатие" гиперссылки на л/с с нечисловыми символами в номере.
//
Процедура НадписьСервисПриемаПоказанийНеуспешноСсылкаДляПоказаНеподходящихЛСНажатие(Элемент)
	
	ОткрытьФормуЛССНечисловымиСимволамиВНомере("Наименование");
	
КонецПроцедуры

&НаКлиенте
// Обработчик "Нажатие" гиперссылки на л/с с нечисловыми символами в номере.
//
Процедура НадписьСервисПриемаПоказанийНеуспешноСсылкаДляПоказаНеподходящихЛСИдентификаторНажатие(Элемент)
	
	ОткрытьФормуЛССНечисловымиСимволамиВНомере("Идентификатор");
	
КонецПроцедуры

#КонецОбласти

/////////////////////////////////////////////
// Страница настройки подключения.

#Область ОбработчикиСобытийСтраницыНастройкиПодключения

&НаКлиенте
// Обработчик "ПриИзменении" тумблера "АвтономныйРежимРаботы".
//
Процедура АвтономныйРежимРаботыПриИзменении(Элемент)
	
	ПерейтиНаСтраницуНастроекПодключения();
	
КонецПроцедуры

#КонецОбласти

/////////////////////////////////////////////
// Страница настройки расписания автоматического обмена.

#Область ОбработчикиСобытийСтраницыРасписанийОбменов

&НаКлиенте
// Обработчик "ПриИзменении" тумблера "ВидНастройкиРасписанияВыгрузок".
//
Процедура ВидНастройкиРасписанияВыгрузокПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементовРасписания();
	
КонецПроцедуры

// Обработчик "ПриИзменении" тумблера "ВидНастройкиРасписанияЗагрузок".
//
&НаКлиенте
Процедура ВидНастройкиРасписанияЗагрузокПриИзменении(Элемент)
	
	УстановитьВидимостьЭлементовРасписания();
	
КонецПроцедуры

&НаКлиенте
// Обработчик нажатия кнопки "РасписаниеРегламентногоЗаданияВыгрузок".
//
Процедура РасписаниеРегламентногоЗаданияВыгрузокНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(ПолучитьРасписаниеВыгрузок());
	Диалог.Показать(Новый ОписаниеОповещения("РасписаниеРегламентногоЗаданияВыгрузокНажатиеЗавершение", ЭтаФорма, Новый Структура("Диалог", Диалог)));
	
КонецПроцедуры

&НаКлиенте
// Обработчик нажатия кнопки "РасписаниеРегламентногоЗаданияЗагрузок".
//
Процедура РасписаниеРегламентногоЗаданияЗагрузокНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(ПолучитьРасписаниеЗагрузок());
	Диалог.Показать(Новый ОписаниеОповещения("РасписаниеРегламентногоЗаданияЗагрузокНажатиеЗавершение", ЭтаФорма, Новый Структура("Диалог", Диалог)));
	
КонецПроцедуры

&НаКлиенте
// Обрабатывает оповещения об изменении расписания выгрузок.
//
Процедура РасписаниеРегламентногоЗаданияВыгрузокНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	
	Если ТипЗнч(Результат) = Тип("РасписаниеРегламентногоЗадания") Тогда
		УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.УстановитьРасписание(РегламентноеЗаданиеВыгрузок, Диалог.Расписание);
		РасписаниеРегламентногоЗаданияВыгрузок = ПолучитьРасписаниеРегламентногоЗадания(РегламентноеЗаданиеВыгрузок, ВыполнятьВыгрузкиПоРасписанию);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обрабатывает оповещения об изменении расписания загрузок.
//
Процедура РасписаниеРегламентногоЗаданияЗагрузокНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	
	Если ТипЗнч(Результат) = Тип("РасписаниеРегламентногоЗадания") Тогда
		УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.УстановитьРасписание(РегламентноеЗаданиеЗагрузок, Диалог.Расписание);
		РасписаниеРегламентногоЗаданияЗагрузок = ПолучитьРасписаниеРегламентногоЗадания(РегламентноеЗаданиеЗагрузок, ВыполнятьЗагрузкиПоРасписанию);
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////
// Страница настройки расписания автоматического обмена.

&НаКлиенте
// Обработчик события "ПриИзменении" флажка "УведомлятьТекущегоПользователяОВажныхСообщениях".
//
Процедура УведомлятьТекущегоПользователяОВажныхСообщенияхПриИзменении(Элемент)
	
	Если УведомлятьТекущегоПользователяОВажныхСообщениях Тогда
		УПЖКХ_ИнтеграцияСГолосовымиСервисамиВзаимодействиеСБазойДанных.ВключитьПолучениеУведомленийДляТекущегоПользователя();
	Иначе
		УПЖКХ_ИнтеграцияСГолосовымиСервисамиВзаимодействиеСБазойДанных.ОтключитьПолучениеУведомленийДляТекущегоПользователя();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ СТРАНИЦ

/////////////////////////////////////////////
// Страница ввода параметров доступа.

#Область ПроцедурыИФункцииСтраницыВводаПараметровДоступа

&НаСервере
// Проверяет заполнение элементов страницы ввода параметров доступа.
//
Функция ПроверитьЗаполнениеСтраницыПараметровДоступа()
	
	Если ИспользуетсяАвтономныйРежимРаботы() Тогда
		Возврат Истина;
	КонецЕсли;
	
	НеЗаполненURL    = ПустаяСтрока(ПерсональныйURL);
	НеЗаполненЛогин  = ПустаяСтрока(Логин);
	НеЗаполненПароль = ПустаяСтрока(Пароль);
	
	Элементы.НадписьНеЗаполненАдресСайта.Видимость = НеЗаполненURL;
	Элементы.НадписьНеЗаполненЛогин.Видимость      = НеЗаполненЛогин;
	Элементы.НадписьНеЗаполненПароль.Видимость     = НеЗаполненПароль;
	
	Если НеЗаполненURL ИЛИ НеЗаполненЛогин ИЛИ НеЗаполненПароль Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка соединения.
	СтруктураОтветаПробногоПодключения = УПЖКХ_ИнтеграцияСГолосовымиСервисамиВзаимодействиеССервером.ВыполнитьПробноеПодключение(ПерсональныйURL, Логин, Пароль, Объект.СообщенияДляПользователя, Истина);
	
	ОбработатьСведенияОбУчетнойЗаписи(СтруктураОтветаПробногоПодключения);
	
	Возврат СтруктураОтветаПробногоПодключения.ВыполненоУспешно;
	
КонецФункции

#КонецОбласти

/////////////////////////////////////////////
// Страница настройка расписания автоматического обмена.

#Область ПроцедурыИФункцииСтраницыНастройкиРасписанийОбменов

&НаСервере
// Иницализация и заполнение страницы настройки расписаний обменов.
//
Процедура ИнициализацияСтраницыНастройкиРасписанияАвтоматическогоОбмена()
	
	УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.ОпределитьРасписанияРегламентныхЗаданийПоУмолчанию(РасписаниеРегламентногоЗаданияВыгрузокПоУмолчанию, РасписаниеРегламентногоЗаданияЗагрузокПоУмолчанию);
	
	РасписаниеРегламентногоЗаданияВыгрузок = ПолучитьРасписаниеРегламентногоЗадания(РегламентноеЗаданиеВыгрузок, ВыполнятьВыгрузкиПоРасписанию);
	РасписаниеРегламентногоЗаданияЗагрузок = ПолучитьРасписаниеРегламентногоЗадания(РегламентноеЗаданиеЗагрузок, ВыполнятьЗагрузкиПоРасписанию);
	
	УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.ОпределитьВидНастройкиРасписания(РегламентноеЗаданиеВыгрузок, РасписаниеРегламентногоЗаданияВыгрузокПоУмолчанию, ВидРасписанияВыгрузок);
	УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.ОпределитьВидНастройкиРасписания(РегламентноеЗаданиеЗагрузок, РасписаниеРегламентногоЗаданияЗагрузокПоУмолчанию, ВидРасписанияЗагрузок);
	
	УправлениеСтраницейНастройкиРасписанияАвтоматическогоОбмена(ЭтаФорма);
	
	УстановитьВидимостьЭлементовРасписания();
	
КонецПроцедуры

&НаСервере
// Установка видимости элементов страницы настройки расписаний обменов.
//
Процедура УстановитьВидимостьЭлементовРасписания()
	
	Попытка
		
		РегламентныеЗаданияСлужебный.ВызватьИсключениеЕслиНетПраваАдминистрирования();
		УстановитьПривилегированныйРежим(Истина);
		
		ВыполнятьВыгрузкиПоРасписанию = НЕ ВидРасписанияВыгрузок = 0;
		ВыполнятьЗагрузкиПоРасписанию = НЕ ВидРасписанияЗагрузок = 0;
		
		УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.ПодготовитьРегламентноеЗаданиеMARS(РегламентноеЗаданиеВыгрузок, РегламентноеЗаданиеЗагрузок, ВыполнятьВыгрузкиПоРасписанию, ВыполнятьЗагрузкиПоРасписанию);
		
		// Выгрузки.
		Элементы.ВидНастройкиРасписанияВыгрузок.Доступность = НЕ Подписка_ВидПодписки = Перечисления.УПЖКХ_ВидыПодпискиНаГолосовыеСервисы.Отсутствует;
		
		Если ВидРасписанияВыгрузок = 0 Тогда
			Элементы.РасписаниеРегламентногоЗаданияВыгрузок.Видимость = Ложь;
		Иначе
			Элементы.РасписаниеРегламентногоЗаданияВыгрузок.Видимость = истина;
			Если ВидРасписанияВыгрузок = 1 Тогда
				РасписаниеРегламентногоЗаданияВыгрузок = УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.УстановитьРасписаниеРегламентногоЗаданияПоУмолчанию(РегламентноеЗаданиеВыгрузок, ВыполнятьВыгрузкиПоРасписанию, РасписаниеРегламентногоЗаданияВыгрузокПоУмолчанию);
				Элементы.РасписаниеРегламентногоЗаданияВыгрузок.Доступность = Ложь;
			Иначе
				Элементы.РасписаниеРегламентногоЗаданияВыгрузок.Доступность = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Элементы.ВидНастройкиРасписанияЗагрузок.Доступность = Подписка_ВидПодписки = Перечисления.УПЖКХ_ВидыПодпискиНаГолосовыеСервисы.АвтообзвонДолжниковИПриемПоказаний ИЛИ Подписка_ВидПодписки = Перечисления.УПЖКХ_ВидыПодпискиНаГолосовыеСервисы.ПриемПоказаний;
		
		// Загрузки.
		Если ВидРасписанияЗагрузок = 0 Тогда
			Элементы.РасписаниеРегламентногоЗаданияЗагрузок.Видимость = Ложь;
		Иначе
			Элементы.РасписаниеРегламентногоЗаданияЗагрузок.Видимость = Истина;
			Если ВидРасписанияЗагрузок = 1 Тогда
				РасписаниеРегламентногоЗаданияЗагрузок = УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.УстановитьРасписаниеРегламентногоЗаданияПоУмолчанию(РегламентноеЗаданиеЗагрузок, ВыполнятьЗагрузкиПоРасписанию, РасписаниеРегламентногоЗаданияЗагрузокПоУмолчанию);
				Элементы.РасписаниеРегламентногоЗаданияЗагрузок.Доступность = Ложь;
			Иначе
				Элементы.РасписаниеРегламентногоЗаданияЗагрузок.Доступность = Истина;
			КонецЕсли;
		КонецЕсли;
		
	Исключение
		
		Элементы.ВидНастройкиРасписанияВыгрузок.Доступность         = Ложь;
		Элементы.ВидНастройкиРасписанияЗагрузок.Доступность         = Ложь;
		Элементы.РасписаниеРегламентногоЗаданияВыгрузок.Доступность = Ложь;
		Элементы.РасписаниеРегламентногоЗаданияЗагрузок.Доступность = Ложь;
		
		Элементы.РасписаниеРегламентногоЗаданияВыгрузок.Видимость = Истина;
		Элементы.РасписаниеРегламентногоЗаданияЗагрузок.Видимость = Истина;
		
		РасписаниеРегламентногоЗаданияВыгрузок = "<Настройка регламентных заданий недоступна для текущего пользователя>";
		РасписаниеРегламентногоЗаданияЗагрузок = "<Настройка регламентных заданий недоступна для текущего пользователя>";
		
	КонецПопытки;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
// Управляет элементами страницы настройки расписаний.
//
Процедура УправлениеСтраницейНастройкиРасписанияАвтоматическогоОбмена(Форма)
	
	Элементы = Форма.Элементы;
	
	ВидНастройкиРасписанияВыгрузок = Форма.ВидРасписанияВыгрузок;
	Элементы.РасписаниеРегламентногоЗаданияВыгрузок.Доступность = ?(ВидНастройкиРасписанияВыгрузок = 1, Ложь, Истина);
	Элементы.РасписаниеРегламентногоЗаданияВыгрузок.Видимость = НЕ ВидНастройкиРасписанияВыгрузок = 0;
	
	ВидНастройкиРасписанияЗагрузок = Форма.ВидРасписанияЗагрузок;
	Элементы.РасписаниеРегламентногоЗаданияЗагрузок.Доступность = ?(ВидНастройкиРасписанияЗагрузок = 1, Ложь, Истина);
	Элементы.РасписаниеРегламентногоЗаданияЗагрузок.Видимость = НЕ ВидНастройкиРасписанияЗагрузок = 0;
	
КонецПроцедуры

#КонецОбласти

/////////////////////////////////////////////
// Страница управления обменами.

#Область ПроцедурыСтраницыУправленияОбменами

&НаКлиенте
// Обработчик нажатия гиперссылки "Как подключить?" сервиса загрузки показаний.
//
Процедура ГиперссылкаНаИнформациюОПодключенииСервисаЗагрузкиПоказанийСчетчиковНажатие(Элемент)
	
	АдресСтраницыОписанияСервиса = УПЖКХ_ИнтеграцияСГолосовымиСервисамиВзаимодействиеССервером.ПолучитьАдресСтраницыОписанияСервисаЗагрузкаПоказаний();
	
	НачатьЗапускПриложения(Новый ОписаниеОповещения("ГиперссылкаНажатиеЗапускПриложения", ЭтотОбъект), АдресСтраницыОписанияСервиса);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения запуска приложения.
Процедура ГиперссылкаНажатиеЗапускПриложения(КодВозврата, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

&НаКлиенте
// Обработчик нажатия гиперссылки "Как подключить?" сервиса автообзвона должников.
//
Процедура ГиперссылкаНаИнформациюОПодключенииСервисаАвтообзвонаДолжниковНажатие(Элемент)
	
	АдресСтраницыОписанияСервиса = УПЖКХ_ИнтеграцияСГолосовымиСервисамиВзаимодействиеССервером.ПолучитьАдресСтраницыОписанияСервисаАвтообзвонДолжников();
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ГиперссылкаАвтообзвонаДолжниковНажатиеЗапускПриложения", ЭтотОбъект);
	НачатьЗапускПриложения(ОписаниеОповещения, АдресСтраницыОписанияСервиса);
	
КонецПроцедуры

&НаКлиенте
// Обработчик завершения запуска приложения.
Процедура ГиперссылкаАвтообзвонаДолжниковНажатиеЗапускПриложения(КодВозврата, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

&НаКлиенте
// Обработчик нажатия гиперссыки для получения списка л/с с нечисловыми символами в номере.
//
Процедура НадписьВозможныеПроблемыСтраницаУправленияНажатие(Элемент)
	
	ОткрытьФормуЛССНечисловымиСимволамиВНомере(ИсточникНомераЛицевогоСчета);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С РЕГЛАМЕНТНЫМ ЗАДАНИЕМ

#Область ПроцедурыИФункцииРаботыСРегламентнымЗаданием

&НаСервереБезКонтекста
// Функция формирует текст расписания регламентного задания.
//
Функция ПолучитьРасписаниеРегламентногоЗадания(ИдентификаторРегламентногоЗадания, ВыполнятьОбменПоРасписанию)
	
	Возврат УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.ПолучитьРасписаниеРегламентногоЗадания(ИдентификаторРегламентногоЗадания, ВыполнятьОбменПоРасписанию);
	
КонецФункции // ПолучитьРасписаниеРегламентногоЗадания()

&НаСервере
// Функция возвращает расписание регламентного задания.
//
Функция ПолучитьРасписаниеВыгрузок()
	
	Возврат УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.ПолучитьРасписаниеВыгрузокMARS(РегламентноеЗаданиеВыгрузок, РегламентноеЗаданиеЗагрузок);
	
КонецФункции // ПолучитьРасписание()

&НаСервере
// Функция возвращает расписание регламентного задания.
//
Функция ПолучитьРасписаниеЗагрузок()
	
	Возврат УПЖКХ_ОбщиеМеханизмыИнтеграцииСоСтороннимиСистемами.ПолучитьРасписаниеЗагрузокMARS(РегламентноеЗаданиеВыгрузок, РегламентноеЗаданиеЗагрузок);
	
КонецФункции // ПолучитьРасписание()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаКлиенте
// Выводит форму вопроса об уведомлении текущего пользователя о важных событиях.
//
Процедура ЗадатьВопросОбУведомленииТекущегоПользователяОВажныхСобытиях()
	
	ПараметрыФормыПредупреждения = Новый Структура;
	ПараметрыФормыПредупреждения.Вставить("ВладелецМакета",       "Обработки.УПЖКХ_ИнтеграцияСГолосовымиСервисами");
	ПараметрыФормыПредупреждения.Вставить("ИмяМакета",            "ИнформацияОВажныхУведомлениях");
	ПараметрыФормыПредупреждения.Вставить("ВладелецМетода",       "УПЖКХ_ИнтеграцияСГолосовымиСервисамиВзаимодействиеСБазойДанных");
	ПараметрыФормыПредупреждения.Вставить("МетодДляВыполнения",   "ВключитьПолучениеУведомленийДляТекущегоПользователя");
	ПараметрыФормыПредупреждения.Вставить("ИмяОповещения",        "ОтобразитьИзменениеИспользованияУведомленийМАРС");
	ПараметрыФормыПредупреждения.Вставить("Заголовок",            "Напоминания о важных событиях");
	ПараметрыФормыПредупреждения.Вставить("ТекстКнопки",          "Напоминать о важных событиях");
	ПараметрыФормыПредупреждения.Вставить("ИмяХранилищаНастроек", "УПЖКХ_УведомлятьОВажныхОповещенияхМАРС");
	
	ОткрытьФорму("ОбщаяФорма.УПЖКХ_ФормаПредупреждения", ПараметрыФормыПредупреждения, ЭтаФорма, Истина);
	
КонецПроцедуры

#КонецОбласти

