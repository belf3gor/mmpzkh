
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ТипЗнч(Параметры) = Тип("ДанныеФормыСтруктура") И Параметры.Свойство("ИсточникНомераЛицевогоСчета") Тогда
		ИсточникНомераЛицевогоСчета = Параметры.ИсточникНомераЛицевогоСчета;
	КонецЕсли;
	
	ПроверитьВозможностьИспользованияСервисаСТекущимиНастройками();
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандЭлементовФормы

&НаКлиенте
// Обработчик нажатия кнопки "СохранитьИЗакрыть".
//
Процедура КомандаСохранитьИЗакрыть(Команда)
	
	СохранитьНастройки();
	
	СтруктураПараметров = Новый Структура("ИсточникНомераЛицевогоСчета", ИсточникНомераЛицевогоСчета);
	
	Закрыть(СтруктураПараметров);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ИсточникНомераЛицевогоСчета".
//
Процедура ИсточникНомераЛицевогоСчетаПриИзменении(Элемент)
	
	ПроверитьВозможностьИспользованияСервисаСТекущимиНастройками();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Нажатие" поля "НадписьВозможныеПроблемыСтраницаУправления".
//
Процедура НадписьВозможныеПроблемыСтраницаУправленияНажатие(Элемент)
	
	ОткрытьФормуЛССНечисловымиСимволамиВНомере(ИсточникНомераЛицевогоСчета);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОВЕРКА НАЛИЧИЯ Л/С С НЕЧИСЛОВЫМИ НОМЕРАМИ

#Область ПроверкаНаличияЛССНечисловымиНомерами

&НаСервере
// Проверяет возможность использования сервиса с текущими общими настройками.
//
Процедура ПроверитьВозможностьИспользованияСервисаСТекущимиНастройками()
	
	СтруктураИнформацииОВозможностиИспользованияСервисов = УПЖКХ_ИнтеграцияСГолосовымиСервисамиВзаимодействиеСБазойДанных.ПолучитьИнформациюОВозможностиИспользованияСервисов(ИсточникНомераЛицевогоСчета = "Наименование", ИсточникНомераЛицевогоСчета = "Идентификатор");
	
	// Наименования л/с.
	ЕстьПроблемыСПриемомПоказанийНаименованиеЛС    = СтруктураИнформацииОВозможностиИспользованияСервисов.ЕстьПроблемыСПриемомПоказанийНаименованиеЛС;
	ОписаниеПроблемСПриемомПоказанийНаименованиеЛС = СтруктураИнформацииОВозможностиИспользованияСервисов.ОписаниеПроблемСПриемомПоказанийНаименованиеЛС;
	
	Проверка_СписокЛССНечисловымиСимволамиНаименованиеЛС.Очистить();
	Проверка_СписокЛССНечисловымиСимволамиНаименованиеЛС.ЗагрузитьЗначения(СтруктураИнформацииОВозможностиИспользованияСервисов.МассивПроблемныхЛСДляПриемаПоказанийНаименованиеЛС);
	
	// Идентификаторы л/с.
	ЕстьПроблемыСПриемомПоказанийИдентификаторЛС    = СтруктураИнформацииОВозможностиИспользованияСервисов.ЕстьПроблемыСПриемомПоказанийИдентификаторЛС;
	ОписаниеПроблемСПриемомПоказанийИдентификаторЛС = СтруктураИнформацииОВозможностиИспользованияСервисов.ОписаниеПроблемСПриемомПоказанийИдентификаторЛС;
	
	Проверка_СписокЛССНечисловымиСимволамиИдентификаторЛС.Очистить();
	Проверка_СписокЛССНечисловымиСимволамиИдентификаторЛС.ЗагрузитьЗначения(СтруктураИнформацииОВозможностиИспользованияСервисов.МассивПроблемныхЛСДляПриемаПоказанийИдентификаторЛС);
	
	///////////////////////////////////////////////
	// Управление видимостью.
	
	Элементы.НадписьВозможныеПроблемыСтраницаУправления.Видимость = ЕстьПроблемыСПриемомПоказанийНаименованиеЛС ИЛИ ЕстьПроблемыСПриемомПоказанийИдентификаторЛС;
	
	Если ЕстьПроблемыСПриемомПоказанийНаименованиеЛС Тогда
		Элементы.НадписьВозможныеПроблемыСтраницаУправления.Заголовок = ОписаниеПроблемСПриемомПоказанийНаименованиеЛС;
	ИначеЕсли ЕстьПроблемыСПриемомПоказанийИдентификаторЛС Тогда
		Элементы.НадписьВозможныеПроблемыСтраницаУправления.Заголовок = ОписаниеПроблемСПриемомПоказанийИдентификаторЛС;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обновляет информацию о л/с с нечисловыми символами в номере после закрытия
// формы л/с с нечисловыми номерами.
//
Процедура ОбновитьИнформациюОЛССНечисловымиСимволамиВНомере(Результат, Параметры) Экспорт
	
	ПроверитьВозможностьИспользованияСервисаСТекущимиНастройками();
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С НАСТРОЙКАМИ

#Область РаботаСНастройками

&НаСервере
// Сохраняет параметры доступа.
//
Процедура СохранитьНастройки()
	
	СтруктураНастроек = УПЖКХ_ИнтеграцияСГолосовымиСервисамиВзаимодействиеСБазойДанных.ПолучитьНастройкиИнтеграцииСГолосовымиСервисами();
	СтруктураНастроек.ИсточникНомераЛицевогоСчета = ИсточникНомераЛицевогоСчета;
	
	УПЖКХ_ИнтеграцияСГолосовымиСервисамиВзаимодействиеСБазойДанных.УстановитьНастройкиИнтеграцииCГолосовымиСервисами(СтруктураНастроек);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ЛИЦЕВЫМИ СЧЕТАМИ

#Область РаботаСЛицевымиСчетами

&НаКлиенте
// Открывает форму л/с с нечисловыми символами в номерах
//
Процедура ОткрытьФормуЛССНечисловымиСимволамиВНомере(ИсточникНомераЛС)
	
	Если ИсточникНомераЛС = "Наименование" Тогда
		СписокДляОткрытия = Проверка_СписокЛССНечисловымиСимволамиНаименованиеЛС;
	ИначеЕсли ИсточникНомераЛС = "Идентификатор" Тогда
		СписокДляОткрытия = Проверка_СписокЛССНечисловымиСимволамиИдентификаторЛС;
	Иначе
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытияФормы = Новый Структура("МассивЛССНечисловымиСимволамиВНомере", СписокДляОткрытия.ВыгрузитьЗначения());
	
	ОткрытьФорму("Обработка.УПЖКХ_ИнтеграцияСГолосовымиСервисами.Форма.ФормаЛССНечисловымиСимволамиВНомере", ПараметрыОткрытияФормы, ЭтаФорма,,,, Новый ОписаниеОповещения("ОбновитьИнформациюОЛССНечисловымиСимволамиВНомере", ЭтаФорма), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти
