////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Пропускаем инициализацию, чтобы гарантировать получение формы при передаче параметра "АвтоТест".
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторОбращения = Неопределено;
	Если Параметры.Свойство("ИдентификаторОбращения") Тогда 
		ИдентификаторОбращения = Параметры.ИдентификаторОбращения;
	КонецЕсли;
	
	Если Параметры.Свойство("Наименование") Тогда 
		Заголовок = Параметры.Наименование;
	КонецЕсли;
	
	ТекущийНомерСтраницы = 1;
	
	ОбновитьСодержимоеФормы();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ "ТаблицаВзаимодействий"

&НаКлиенте
Процедура ТаблицаВзаимодействийПриАктивизацииСтроки(Элемент)
	
	ОбновитьОтображениеСодержания(Элемент.ТекущиеДанные.Идентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайл(Команда)
	
	Структура = ПолучитьАдресХранилищаФайла(Элементы.ТаблицаВзаимодействийВложения.ТекущиеДанные.Идентификатор);
	Если Структура.Адрес <> Неопределено Тогда 
		ПолучитьФайл(Структура.Адрес, Структура.Имя, Истина);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Предыдущие(Команда)
	
	ОбновитьСодержимоеФормы(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура Следующие(Команда)
	
	ОбновитьСодержимоеФормы(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьСодержимоеФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовоеСообщение(Команда)
	
	ПараметрыСообщения = СформироватьПараметрыСообщения();
	ИнформационныйЦентрКлиент.ОткрытьФормуОтправкиСообщенияВТехподдержку(ПараметрыСообщения);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ОбновитьСодержимоеФормы(СмещениеСтраницы = 0)
	
	ТекущийНомерСтраницы = ТекущийНомерСтраницы + СмещениеСтраницы;
	
	Если ИдентификаторОбращения = Неопределено Тогда 
		ВызватьИсключениеСервисаОтображенияОбращений();
	КонецЕсли;
	
	Результат = ПолучитьСписокИКоличествоСообщенийПоОбращениюПользователя();
	Если Результат = Неопределено Тогда 
		ВызватьИсключениеСервисаОтображенияОбращений();
	КонецЕсли;
	
	ОтобразитьЭлементыШапки(Результат);
	
	ВывестиСписокСообщений(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ВызватьИсключениеСервисаОтображенияОбращений()
	
	Если ИдентификаторОбращения = Неопределено Тогда 
		ВызватьИсключение НСтр("ru = 'Сервис по отображению обращений в техподдержку временно недоступен.
								|Пожалуйста, повторите попытку позже'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокИКоличествоСообщенийПоОбращениюПользователя()
	
	Попытка
		Прокси = ИнформационныйЦентрСервер.ПолучитьПроксиИнформационногоЦентра_1_0_1_2();
		Возврат Прокси.GetMessagesSupportService(ИдентификаторОбращения, ТекущийНомерСтраницы);
	Исключение
		ИмяСобытия = ИнформационныйЦентрСервер.ПолучитьИмяСобытияДляЖурналаРегистрации();
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция ПолучитьАдресХранилищаФайла(ИдентификаторФайла)
	
	Попытка
		Прокси = ИнформационныйЦентрСервер.ПолучитьПроксиИнформационногоЦентра_1_0_1_2();
		Структура = Прокси.GetAttachmaent(ИдентификаторФайла);
		Адрес     =  ПоместитьВоВременноеХранилище(Структура.binData);
		Возврат Новый Структура("Адрес, Имя", Адрес, Структура.name)
	Исключение
		ИмяСобытия = ИнформационныйЦентрСервер.ПолучитьИмяСобытияДляЖурналаРегистрации();
		ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

&НаСервере
Процедура ОтобразитьЭлементыШапки(Результат)
	
	КоличествоСообщений           = Результат.count;
	КоличествоСообщенийНаСтранице = Результат.countOnPage;
	
	Если КоличествоСообщений = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Диапазон = ПолучитьДиапазон(КоличествоСообщенийНаСтранице, КоличествоСообщений);
	Элементы.Диапазон.Заголовок = ПолучитьШаблонДиапазона(Диапазон);
	
	ОтобразитьДоступностьКоманд(КоличествоСообщенийНаСтранице, КоличествоСообщений);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДиапазон(КоличествоСообщенийНаСтранице, КоличествоСообщений)
	
	Начало = (ТекущийНомерСтраницы - 1) * КоличествоСообщенийНаСтранице + 1;
	Конец  = ТекущийНомерСтраницы * КоличествоСообщенийНаСтранице;
	Конец  = ?(Конец > КоличествоСообщений, КоличествоСообщений, Конец);
	
	Возврат Новый Структура("Начало, Конец", Начало, Конец);
	
КонецФункции

&НаСервере
Функция ПолучитьШаблонДиапазона(Диапазон)

	Шаблон = "%1 - %2";
	Шаблон = СтрШаблон(Шаблон, Диапазон.Начало, Диапазон.Конец);
	
	Возврат Шаблон;
	
КонецФункции

&НаСервере
Процедура ОтобразитьДоступностьКоманд(КоличествоОбращенийНаСтранице, КоличествоОбращений)
	
	Элементы.Следующие.Доступность  = ?(ТекущийНомерСтраницы * КоличествоОбращенийНаСтранице < КоличествоОбращений, Истина, Ложь);
	Элементы.Предыдущие.Доступность = ?(ТекущийНомерСтраницы > 1, Истина, Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСписокСообщений(Результат)
	
	Если Результат.messageList.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	СписокВзаимодействий.Очистить();
	
	Для Итерация = 0 По Результат.messageList.Количество() - 1 Цикл
		
		Сообщение = Результат.messageList.Получить(Итерация);
		
		Элемент = СписокВзаимодействий.Добавить();
		
		Элемент.ТекстСообщения        = Сообщение.text;
		Элемент.КартинкаТипаСообщения = ?(Сообщение.ingoing, БиблиотекаКартинок.ВходящееСообщение, БиблиотекаКартинок.ИсходящееСообщение);
		Элемент.ДатаСообщения         = Сообщение.date;
		Элемент.ТекстHTML             = Сообщение.textHTML;
		Элемент.Идентификатор         = Сообщение.ID;
		Элемент.ВложенияHTML.Добавить(ПолучитьСтруктуруФайловКартинок(Сообщение.filesHTML));
		ЗаполнитьСписокВложений(Элемент, Сообщение.attachments);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВложений(СтрокаТаблицы, Вложения)
	
	Для Каждого Вложение Из Вложения Цикл 
		НовыйЭлемент = СтрокаТаблицы.Вложения.Добавить();
		НовыйЭлемент.Имя           = Вложение.name;
		НовыйЭлемент.Идентификатор = Вложение.id;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруФайловКартинок(Файлы)
	
	Структура = Новый Структура;
	
	Для Каждого СтруктураФайла из Файлы Цикл
		Структура.Вставить(СтруктураФайла.name, Новый Картинка(СтруктураФайла.binData));
	КонецЦикла;
	
	Возврат Структура;
	
КонецФункции

&НаСервере
Процедура ОбновитьОтображениеСодержания(Идентификатор)
	
	Фильтр = Новый Структура("Идентификатор", Идентификатор);
	МассивСтрок = СписокВзаимодействий.НайтиСтроки(Фильтр);
	Если МассивСтрок.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = МассивСтрок.Получить(0);
	
	СодержаниеТекущегоСообщения.УстановитьHTML(СтрокаТаблицы.ТекстHTML, СтрокаТаблицы.ВложенияHTML.Получить(0).Значение);
	
КонецПроцедуры

&НаСервере
Функция СформироватьПараметрыСообщения()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДополнительныеПарамтеры = Новый Структура;
	ДополнительныеПарамтеры.Вставить("ИдентификаторОбращения", ИдентификаторОбращения);
	
	ПараметрыСообщения = Новый Структура;
	ПараметрыСообщения.Вставить("ОтКого", ИнформационныйЦентрСервер.ОпределитьАдресЭлектроннойПочтыПользователя());
	ПараметрыСообщения.Вставить("Вложения", ИнформационныйЦентрСервер.СформироватьXMLСТехническимиПараметрами(ДополнительныеПарамтеры));
	ПараметрыСообщения.Вставить("ОтображатьТему", Ложь);
	
	Возврат ПараметрыСообщения;
	
КонецФункции






