#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Обработки.РегистрацияОрганизации.РазместитьНавигацию(ЭтотОбъект, Параметры);
	ПодготовитьДанныеПередОткрытием();
	УправлениеФормойПриСозданииНаСервере();
	УправлениеФормой(ЭтотОбъект);
	УстановитьУсловноеОформление();

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РегистрацияОрганизацииКлиент.ОповеститьОбОткрытии(ЭтотОбъект,
		РегистрацияОрганизацииКлиентСервер.ИмяПомощникаРегистрации(),
		НавигацияНомерШага);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ИсточникВыбора) = Тип("УправляемаяФорма")
		И ИсточникВыбора.ИмяФормы = "Справочник.РегистрацииВНалоговомОргане.Форма.ФормаПредставителя"
		И ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		Модифицированность = Истина;
		ЗаполнитьЗначенияСвойств(РегистрацияВНалоговомОргане, ВыбранноеЗначение);
		ПредставлениеПредставителя = ВыбранноеЗначение.Представитель;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если Источник = ЭтотОбъект Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "ОткрытШагПомощника_РегистрацияОрганизации" Тогда
	
		Если Параметр = Неопределено
			Или Параметр.ИмяПомощника <> РегистрацияОрганизацииКлиентСервер.ИмяПомощникаРегистрации()
			Или Параметр.НомерШага <> НавигацияНомерШага Тогда
			Закрыть();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_Организации" И Организация = Источник Тогда
		
		ПроверитьРеквизитыОрганизации();
		УправлениеФормой(ЭтотОбъект);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ИспользуетсяСервисРегистрации Тогда
		
		НепроверяемыеРеквизиты = Новый Массив;
		НепроверяемыеРеквизиты.Добавить("Организация");
		НепроверяемыеРеквизиты.Добавить("ДатаСоставления");
		НепроверяемыеРеквизиты.Добавить("ДатаНачалаДействияПатента");
		ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
		
	Иначе
		
		Если ДатаНачалаДействияПатента - ДатаСоставления < 10*24*60*60 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Дата начала действия патента не должна быть менее 10 дней от даты подачи заявления!'"),,
				"ДатаНачалаДействияПатента",, Отказ);
		КонецЕсли;
		
		Если СпособПодачиДокументов = 1 И Не ЗначениеЗаполнено(РегистрацияВНалоговомОргане.Представитель) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Представитель не заполнен!'"),, "ПредставлениеПредставителя",, Отказ);
		КонецЕсли;
		
		Если Не РеквизитыОрганизацииЗаполнены Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Заполните недостающие реквизиты!'"),, "СообщениеТребуютсяРеквизиты",, Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПрименитьПониженнуюСтавку И Объект.СтавкаНалога = УчетПСНКлиентСервер.НалоговаяСтавкаПоУмолчанию() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Укажите размер пониженной ставки налога или уберите признак ""Применить пониженную ставку""!'"),,
			"Объект.СтавкаНалога",, Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)

	Если НавигационнаяСсылкаФорматированнойСтроки = "Пример" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Обработка.ПомощникЗаполненияЗаявленияНаПолучениеПатента.Форма.ОбразецЗаполненияВидаДеятельности");
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "АдресИРеквизитыИнспекции" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОрганизацииФормыКлиент.ПерейтиКСервисуОпределитьРеквизитыИФНС();
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "СписокПатентов" Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.Патенты.ФормаСписка");
		
	ИначеЕсли НавигацияПомощниковКлиент.ЭтоНавигационнаяСсылкаШага(НавигационнаяСсылкаФорматированнойСтроки) Тогда
		
		СохранитьДанныеПомощникаРегистрации();
		
	КонецЕсли;

	РегистрацияОрганизацииКлиент.ОбработатьНавигационнуюСсылку(
		НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы И Модифицированность Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И Не ИспользуетсяСервисРегистрации Тогда
		
		СтандартнаяОбработка = Ложь;
		Отказ = Истина;
		
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемФормы", ЭтаФорма);
		
		ПоказатьВопрос(Оповещение, НСтр("ru = 'Данные изменены. Сохранить заявление?'"), Режим);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеТребуютсяРеквизитыОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ",       Организация);
	ПараметрыФормы.Вставить("Контекст",   Новый Структура);
	ПараметрыФормы.Вставить("Назначение", "ДляОтчетности");
	ПараметрыФормы.Вставить("ПроверяемыеРеквизиты",   ПроверяемыеРеквизитыОрганизации());
	ПараметрыФормы.Контекст.Вставить("Период",        ДатаСоставления);
	ПараметрыФормы.Контекст.Вставить("ИмяРеглОтчета", ИмяРеглОтчета());
	
	ОткрытьФорму("Справочник.Организации.Форма.РеквизитыПредпринимателяДляОтчетности", 
		ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДеятельностиПриИзменении(Элемент)
	
	ВидДеятельностиПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КодРегионаПриИзменении(Элемент)
	
	КодРегионаПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КодРегионаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	Количество = 0;
	 
	Для Каждого ЭлементСписка Из Элемент.СписокВыбора Цикл
		
		Если Количество > 20 Тогда
			Прервать;
		КонецЕсли;
		
		ТекстПоиска = СокрЛП(Текст);
		Если Найти(ВРег(ЭлементСписка.Представление), ВРег(ТекстПоиска)) > 0 Тогда
			ДанныеВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
			Количество = Количество + 1;
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеВыбора.Количество() > 0 Тогда
		ДанныеВыбора = ПодсветитьДанныеВыбора(ДанныеВыбора, ТекстПоиска);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерВидаДеятельностиПриИзменении(Элемент)
	
	ПорядковыйНомер = СокрЛП(Объект.ПорядковыйНомерВидаДеятельности);
	Если СтрДлина(ПорядковыйНомер) = 1 Тогда
		Объект.ПорядковыйНомерВидаДеятельности = СтрШаблон(НСтр("ru = '0%1'"), ПорядковыйНомер);
	КонецЕсли;
	
	ИдентификационныйКод = ИдентификационныйКодВидаДеятельности(
		Объект.КодВидаДеятельности, Объект.КодРегиона, Объект.ПорядковыйНомерВидаДеятельности);

КонецПроцедуры

&НаКлиенте
Процедура СрокДействияПатентаПриИзменении(Элемент)
	
	ОбновитьДекорацияСрокДействияПатента(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаДействияПатентаПриИзменении(Элемент)
	
	КоличествоМесяцевСрок = КоличествоМесяцевДействияПатента(ДатаНачалаДействияПатента);
	Элементы.СрокДействияПатента.МаксимальноеЗначение = КоличествоМесяцевСрок;
	Если Объект.СрокДействияПатента > КоличествоМесяцевСрок Тогда
		Объект.СрокДействияПатента = КоличествоМесяцевСрок;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьПониженнуюСтавкуПриИзменении(Элемент)
	
	Если Не ПрименитьПониженнуюСтавку Тогда
		Объект.СтавкаНалога = УчетПСНКлиентСервер.НалоговаяСтавкаПоУмолчанию();
		Объект.НормаЗакона = "";
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура СпособПодачиДокументовПриИзменении(Элемент)
	
	СпособПодачиДокументовПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПредставителяНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЗначенияЗаполнения = Новый Структура(
		"Владелец,Представитель,УполномоченноеЛицоПредставителя,ДокументПредставителя,Доверенность");
	
	ЗаполнитьЗначенияСвойств(ЗначенияЗаполнения, РегистрацияВНалоговомОргане);
	
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Справочник.РегистрацииВНалоговомОргане.Форма.ФормаПредставителя",
		ПараметрыФормы, ЭтотОбъект, КлючУникальности);
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяИнспекцияАдресНаКартеНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформациейКлиентБП.ПоказатьНаКартеНажатие(ЭтотОбъект, Элемент, НалоговаяИнспекцияАдрес);
	
КонецПроцедуры

&НаКлиенте
Процедура КодНалоговогоОрганаПриИзменении(Элемент)
	
	ОбновитьКодНалоговогоОргана();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособСдачиОтчетностиПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛичныйВизитКонтактыГосорганов_ФНС_АдресНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформациейКлиентБП.ПоказатьНаКартеНажатие(ЭтотОбъект, Элемент, НалоговаяИнспекцияАдрес);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаНазад(Команда)

	Если ИспользуетсяСервисРегистрации Тогда
		СохранитьДанныеПомощникаРегистрации();
		РегистрацияОрганизацииКлиент.ОткрытьЭтап(НавигацияНомерШага - 1);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ПропуститьШаг = Ложь;
	
	Если ИспользуетсяСервисРегистрации Тогда

		СохранитьДанныеПомощникаРегистрации();
		РегистрацияОрганизацииКлиент.ОткрытьЭтап(НавигацияНомерШага + 1);
	
	Иначе
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаДополнительно;
		УправлениеФормой(ЭтотОбъект);
		СформироватьЗаявлениеНаПолучениеПатента();
	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПропуститьШаг(Команда)
	
	СохранитьДанныеПомощникаРегистрации(Истина);
	РегистрацияОрганизацииКлиент.ОткрытьЭтап(НавигацияНомерШага + 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявлениеНаПолучениеПатента(Команда)
	
	Если СсылкаНаДокумент.Пустая() Или Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Ключ", СсылкаНаДокумент);
	ПараметрыФормы.Вставить("Организация", Организация);
	
	ФормаОтчета = ПолучитьФорму(ИмяФормыОтчета, ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
	РегламентированнаяОтчетностьКлиент.ВывестиМашиночитаемуюФормуУведомленияОСпецрежимах(ФормаОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключить1СОтчетность(Команда)
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиент.ОткрытьФормуМастераЗаявленияНаПодключение(Организация);
	
КонецПроцедуры

&НаКлиенте
Процедура Открыть1СОтчетность(Команда)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Раздел", ПредопределенноеЗначение("Перечисление.СтраницыЖурналаОтчетность.Отчеты"));
	ПараметрыФормы.Вставить("Организация", Организация);
	
	ОткрытьФорму("ОбщаяФорма.РегламентированнаяОтчетность", ПараметрыФормы, , "1С-Отчетность");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазадДополнительно(Команда)
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.СтраницаОсновное;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГотово(Команда)
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличныхЧастей

#Область Адреса

&НаКлиенте
Процедура АдресаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		АдресНачалоВыбора(Элемент, Элементы.Адреса.ТекущиеДанные, Элементы.АдресаАдрес.Подсказка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АдресОбработкаВыбора(Элемент, Элементы.Адреса.ТекущиеДанные, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресаАдресПриИзменении(Элемент)
	
	АдресСтрокойПриИзменении(Элементы.Адреса.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресаАдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	АдресНачалоВыбора(Элемент, Элементы.Адреса.ТекущиеДанные, Элементы.АдресаАдрес.Подсказка, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ОтменаРедактирования Тогда
		ОбновитьКодНалоговогоОргана();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресаАдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АдресОбработкаВыбора(Элемент, Элементы.Адреса.ТекущиеДанные, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресаПослеУдаления(Элемент)
	
	ОбновитьКодНалоговогоОргана();
	
КонецПроцедуры

#КонецОбласти

#Область Объекты

&НаКлиенте
Процедура ОбъектыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СписокВыбора = Элементы.ОбъектыВидОбъекта.СписокВыбора;
	Если НоваяСтрока И Не Копирование И СписокВыбора.Количество() = 1 Тогда
		Элементы.Объекты.ТекущиеДанные.ВидОбъектаСтрокой = СписокВыбора[0].Значение;
		ЗаполнитьТекущиеДанныеОбъекта();
		АдресНачалоВыбора(Элемент, Элементы.Объекты.ТекущиеДанные, Элементы.ОбъектыАдресСтрокой.Подсказка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АдресОбработкаВыбора(Элемент, Элементы.Объекты.ТекущиеДанные, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыВидОбъектаПриИзменении(Элемент)
	
	ЗаполнитьТекущиеДанныеОбъекта();
	
	ТекущиеДанные = Элементы.Объекты.ТекущиеДанные;
	Если ТекущиеДанные.ПризнакОбъекта = "" Тогда
		ТекущиеДанные.Площадь = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыАдресСтрокойПриИзменении(Элемент)

	АдресСтрокойПриИзменении(Элементы.Объекты.ТекущиеДанные);

КонецПроцедуры

&НаКлиенте
Процедура ОбъектыАдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	АдресНачалоВыбора(Элемент, Элементы.Объекты.ТекущиеДанные,
		Элементы.ОбъектыАдресСтрокой.Подсказка, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьКодНалоговогоОргана();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыАдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	АдресОбработкаВыбора(Элемент, Элементы.Объекты.ТекущиеДанные, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыПослеУдаления(Элемент)
	
	ОбновитьКодНалоговогоОргана();
	
КонецПроцедуры

#КонецОбласти

#Область ТранспортныеСредства

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура АдресСтрокойПриИзменении(ТекущиеДанные)

	Если ТекущиеДанные.АдресСтрокой = "" Тогда
		ТекущиеДанные.Адрес = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресНачалоВыбора(Элемент, ТекущиеДанные, Заголовок, СтандартнаяОбработка = Неопределено)
	
	СтандартнаяОбработка = Ложь;
	
	АдресПоУмолчанию = ?(Не ПустаяСтрока(ТекущиеДанные.Адрес), ТекущиеДанные.АдресСтрокой, "");
	ВидКонтактнойИнформацииАдреса = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресОрганизации");
	
	ПараметрыФормы = УправлениеКонтактнойИнформациейКлиент.ПараметрыФормыКонтактнойИнформации(
		ВидКонтактнойИнформацииАдреса, ТекущиеДанные.Адрес, АдресПоУмолчанию);
	
	ПараметрыФормы.Вставить("Заголовок", Заголовок);
	
	УправлениеКонтактнойИнформациейКлиент.ОткрытьФормуКонтактнойИнформации(ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресОбработкаВыбора(Элемент, ТекущиеДанные, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Если Не ПустаяСтрока(ВыбранноеЗначение.Представление) Тогда
	
		ТекущиеДанные.АдресСтрокой = ВыбранноеЗначение.Представление;
		ТекущиеДанные.Адрес = ВыбранноеЗначение.КонтактнаяИнформация;
	
	Иначе
	
		ТекущиеДанные.АдресСтрокой = УправлениеКонтактнойИнформациейКлиентСервер.ТекстПустогоАдресаВВидеГиперссылки();
		ТекущиеДанные.Адрес = "";
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВидДеятельностиПриИзмененииНаСервере()
	
	ОчиститьНеиспользуемыеРеквизиты();
	ОбновитьЭлементыВидаДеятельности();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьДекорацияСрокДействияПатента(Форма)
	
	Объект = Форма.Объект;
	
	СтрокаПодсказка = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
		НСтр("ru='%1месяцев;%1месяц;;%1месяца;%1месяцев;%1месяца'"), Объект.СрокДействияПатента);
	
	СтрокаПодсказка = СтрЗаменить(СтрокаПодсказка, Объект.СрокДействияПатента, "");
	Форма.Элементы.ДекорацияСрокДействияПатента.Заголовок = СтрокаПодсказка;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыВидаДеятельности()
	
	Если Не ВидДеятельности.Пустая() Тогда
		Объект.КодВидаДеятельности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДеятельности, "Код");
	КонецЕсли;
	
	ИдентификационныйКод = ИдентификационныйКодВидаДеятельности(
		Объект.КодВидаДеятельности, Объект.КодРегиона, Объект.ПорядковыйНомерВидаДеятельности);
		
	ДополнительныеНастройки = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	УказатьОбъекты = ДополнительныеНастройки.КодыВидовДеятельностиОбъекты.Найти(Объект.КодВидаДеятельности) <> Неопределено;
	УказатьТС = ДополнительныеНастройки.КодыВидовДеятельностиТС.Найти(Объект.КодВидаДеятельности) <> Неопределено;
	ПоказыватьСотрудников = ДополнительныеНастройки.КодыВидовДеятельностиПрочиеПоказатели.Найти(
		Объект.КодВидаДеятельности) = Неопределено;
	
	Элементы.ГруппаСведенияОбОбъектах.Видимость = УказатьОбъекты;
	Элементы.ГруппаТранспортныеСредства.Видимость = УказатьТС;
	Элементы.ГруппаКоличествоСотрудников.Видимость= ПоказыватьСотрудников;
	Элементы.ГруппаАдреса.Видимость = Не (УказатьОбъекты Или УказатьТС);
	
	Если УказатьОбъекты Тогда
		ИнициализироватьСписокВыбораОбъекта();
	КонецЕсли;
	
	Если УказатьТС Тогда
		
		ДополнительныеНастройки = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
		Если ДополнительныеНастройки.КодыВодныйТранспорт.Найти(Объект.КодВидаДеятельности) = Неопределено Тогда
			Элементы.ТранспортныеСредстваНомер.Заголовок = "VIN"; 
			Элементы.ТранспортныеСредстваРегистрационныйЗнак.Заголовок = НСтр("ru = 'Регистрационный знак'");
			Элементы.ТранспортныеСредстваРегистрационныйЗнак.ПодсказкаВвода = НСтр("ru = 'X000XX000'");
		Иначе
			Элементы.ТранспортныеСредстваНомер.Заголовок = "IMO";
			Элементы.ТранспортныеСредстваРегистрационныйЗнак.Заголовок = НСтр("ru = 'Регистрационный номер'");
			Элементы.ТранспортныеСредстваРегистрационныйЗнак.ПодсказкаВвода = НСтр("ru = 'AB0001RUS77'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПередЗакрытиемФормы(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ПроверитьЗаполнение() Тогда
			СсылкаНаДокумент = СформироватьЗаявлениеНаПолучениеПатентаНаСервере();
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСохраненныеЗначения()
	
	ДанныеПомощникаРегистрации = Обработки.РегистрацияОрганизации.ДанныеПомощникаРегистрации();
	
	Если ДанныеПомощникаРегистрации.Свойство("Патент") Тогда
		
		Для Каждого ТекРеквизит Из ДанныеПомощникаРегистрации.Патент Цикл
			
			Если ТекРеквизит.Ключ = "ПропуститьШаг" Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(ТекРеквизит.Значение) = Тип("ТаблицаЗначений") И Объект.Свойство(ТекРеквизит.Ключ) Тогда
				Объект[ТекРеквизит.Ключ].Загрузить(ТекРеквизит.Значение);
			Иначе
				Объект[ТекРеквизит.Ключ] = ТекРеквизит.Значение;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
	Если ПустаяСтрока(Объект.КодРегиона) Тогда
		ДанныеПомощникаРегистрации.Налоги.Свойство("КодРегионаРегистрации", Объект.КодРегиона);
	КонецЕсли;
	
	ВидДеятельностиОКВЭД = ДанныеПомощникаРегистрации.ВидДеятельности.ОсновнойКод;
	Если Не ВидДеятельности.Пустая() Тогда
		Объект.КодВидаДеятельности = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДеятельности, "Код");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДанныеДокументаВОбъект(СсылкаНаДокумент)

	СтруктураОбъекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СсылкаНаДокумент,
		"Организация, ДатаПодписи, ДанныеУведомления, ИмяФормы, ИмяОтчета");
	
	Организация = СтруктураОбъекта.Организация;
	ДатаСоставления = СтруктураОбъекта.ДатаПодписи;
	
	ИмяФормыОтчета = СтрШаблон("Отчет.%1.Форма.%2", СтруктураОбъекта.ИмяОтчета, СтруктураОбъекта.ИмяФормы);
	ДанныеУведомления = СтруктураОбъекта.ДанныеУведомления.Получить();
	Если ДанныеУведомления = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПомощникаЗаполнения = Неопределено;
	Если ДанныеУведомления.Свойство("ДанныеПомощникаЗаполнения", ДанныеПомощникаЗаполнения) 
		И ДанныеПомощникаЗаполнения <> Неопределено Тогда
		
		РеквизитыФормы = ПолучитьРеквизиты();
		СписокРеквизитов = Новый Массив;
		Для Каждого ТекРеквизит Из РеквизитыФормы Цикл
			СписокРеквизитов.Добавить(ТекРеквизит.Имя);
		КонецЦикла;
		
		Для Каждого ТекЗначение Из ДанныеПомощникаЗаполнения Цикл
			
			Если ТипЗнч(ТекЗначение.Значение) = Тип("ТаблицаЗначений") Тогда
				
				Для Каждого ТекСтрока Из ТекЗначение.Значение Цикл
					ЗаполнитьЗначенияСвойств(Объект[ТекЗначение.Ключ].Добавить(), ТекСтрока);
				КонецЦикла;
				
			ИначеЕсли Объект.Свойство(ТекЗначение.Ключ) Тогда
				
				Объект[ТекЗначение.Ключ] = ТекЗначение.Значение;
				
			ИначеЕсли РегистрацияВНалоговомОргане.Свойство(ТекЗначение.Ключ) Тогда
				
				РегистрацияВНалоговомОргане[ТекЗначение.Ключ] = ТекЗначение.Значение;
				
			ИначеЕсли СписокРеквизитов.Найти(ТекЗначение.Ключ) <> Неопределено Тогда
				
				ЭтотОбъект[ТекЗначение.Ключ] = ТекЗначение.Значение;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане.Представитель) Тогда
			СпособПодачиДокументов = 1;
		КонецЕсли;
		
	КонецЕсли;
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораРегионов()
	
	КлассификаторСубъектовРФ = АдресныйКлассификатор.СубъектыРФ();
	ШаблонПредставления = НСтр("ru='%1 - %2 %3'"); // например: "77 - Москва г".
	
	Для Каждого Регион Из КлассификаторСубъектовРФ Цикл
		
		Если Регион.ДиапазонПочтовыхИндексов = "0" Тогда //регион был включен в состав другого субъекта
			Продолжить;
		КонецЕсли;
		
		КодРегиона = Формат(Регион.КодСубъектаРФ, "ЧЦ=2; ЧДЦ=0; ЧВН=");
		Представление = СтрШаблон(ШаблонПредставления, КодРегиона, Регион.Наименование, Регион.Сокращение);
		Элементы.КодРегиона.СписокВыбора.Добавить(КодРегиона, Представление);
	
	КонецЦикла;
	
	Элементы.КодРегиона.СписокВыбора.СортироватьПоПредставлению();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТекущиеДанныеОбъекта()
	
	ТекущиеДанные = Элементы.Объекты.ТекущиеДанные;
	СтруктураПоиска = Новый Структура("Код", Объект.КодВидаДеятельности);
	СтруктураПоиска.Вставить("Наименование", ТекущиеДанные.ВидОбъектаСтрокой);
	
	НайденныеЗначения = ЗначенияКодовВидовОбъектов(АдресВоВременномХранилище, СтруктураПоиска);
	Если НайденныеЗначения.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, НайденныеЗначения[0]);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначенияКодовВидовОбъектов(АдресВоВременномХранилище, СтруктураПоиска)
	
	ДополнительныеНастройки = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	НайденныеЗначения = ДополнительныеНастройки.КодыВидыОбъектов.НайтиСтроки(СтруктураПоиска);
	
	Результат = Новый Массив;
	Для Каждого ТекСтрока Из НайденныеЗначения Цикл
		
		СтруктураСтроки = Новый Структура;
		Для Каждого ТекКолонка Из ДополнительныеНастройки.КодыВидыОбъектов.Колонки Цикл
			СтруктураСтроки.Вставить(ТекКолонка.Имя, ТекСтрока[ТекКолонка.Имя]);
		КонецЦикла;
		
		Результат.Добавить(СтруктураСтроки);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьСтатусПроцессаФормированияЗаявления(Форма, ЗаявлениеСформировано = Ложь)
	
	Элементы = Форма.Элементы;
	
	Элементы.КартинкаЗаявлениеНаПолучениеПатента.Видимость = ЗаявлениеСформировано;
	Элементы.КартинкаЗаявлениеФормируется.Видимость = Не ЗаявлениеСформировано;
	Элементы.ЗаявлениеФормируется.Видимость = Не ЗаявлениеСформировано;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИдентификационныйКодВидаДеятельности(КодВидаДеятельности, КодРегиона, ПорядковыйНомер)
	
	ПустойКод = "__";
	
	СтрокаВидДеятельности = ?(ПустаяСтрока(КодВидаДеятельности), ПустойКод, КодВидаДеятельности);
	СтрокаКодРегиона      = ?(ПустаяСтрока(КодРегиона), ПустойКод, КодРегиона);
	СтрокаПорядковыйНомер = ?(ПустаяСтрока(ПорядковыйНомер), ПустойКод, ПорядковыйНомер);
	
	Возврат СтрШаблон(НСтр("ru = 'Код вида деятельности: %1 - %2 - %3'"),
		СтрокаВидДеятельности, СтрокаКодРегиона, СтрокаПорядковыйНомер);
	
КонецФункции

&НаСервере
Процедура ИнициализироватьСписокВыбораОбъекта()
	
	СтруктураПоиска = Новый Структура("Код", Объект.КодВидаДеятельности);
	ДоступныеЗначенияВыбора = ЗначенияКодовВидовОбъектов(АдресВоВременномХранилище, СтруктураПоиска);
	Элементы.ОбъектыВидОбъекта.СписокВыбора.Очистить();
	
	Если ДоступныеЗначенияВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекЗначение Из ДоступныеЗначенияВыбора Цикл
		Элементы.ОбъектыВидОбъекта.СписокВыбора.Добавить(ТекЗначение.Наименование);
	КонецЦикла;
	
	Элементы.ОбъектыВидОбъекта.Видимость = Элементы.ОбъектыВидОбъекта.СписокВыбора.Количество() <> 1;
	Местоположение = ?(Элементы.ОбъектыВидОбъекта.Видимость, Элементы.ОбъектыАдресСтрокой, Неопределено);
	Элементы.Переместить(Элементы.ОбъектыПлощадь, Элементы.Объекты, Местоположение);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ИмяРеглОтчета()
	Возврат "РегламентированноеУведомлениеПолучениеПатента";
КонецФункции

&НаКлиенте
Процедура ОбновитьКодНалоговогоОргана()
	
	ПодключитьОбработчикОжидания("ОбновитьРеквизитыНалоговойИнспекции", 0.2, Истина);
	
КонецПроцедуры

&НаСервере
Процедура КодРегионаПриИзмененииНаСервере()
	
	ИдентификационныйКод = ИдентификационныйКодВидаДеятельности(
		Объект.КодВидаДеятельности, Объект.КодРегиона, Объект.ПорядковыйНомерВидаДеятельности);
		
	Элементы.ПодсказкаОпределитьВидаДеятельности.Заголовок = ТекстПодсказкиВидДеятельности(Объект.КодРегиона);
	Элементы.НормаЗаконаРасширеннаяПодсказка.Заголовок = ТекстПодсказкиНормаЗакона(Объект.КодРегиона);
	
	Если Лев(Объект.КодНалоговогоОргана, 2) <> Объект.КодРегиона Тогда
		Объект.КодНалоговогоОргана = "";
	КонецЕсли;
	
	УстановитьПодсказкуВвода();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КоличествоМесяцевДействияПатента(ДатаНачалаДействия)
	
	ЭтоНачалоМесяца = День(ДатаНачалаДействия) = 1;
	КоличествоМесяцев = 12 - Месяц(ДатаНачалаДействия) + ?(ЭтоНачалоМесяца, 1, 0);
	Возврат КоличествоМесяцев;
	
КонецФункции

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	ОбновитьСведенияОбОрганизации();
	ОбновитьСведенияОПредставителе();
	ОбновитьРеквизитыВидаДеятельности();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСведенияОбОрганизации()
	
	СведенияОрганизация = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Организация,
		"ОГРН, РегистрацияВНалоговомОргане, КодНалоговогоОргана, КодОКВЭД2");
		
	Если ЗначениеЗаполнено(СведенияОрганизация.РегистрацияВНалоговомОргане) Тогда
		
		РегистрацияНУОбъект = СведенияОрганизация.РегистрацияВНалоговомОргане.ПолучитьОбъект();
		ЗначениеВРеквизитФормы(РегистрацияНУОбъект, "РегистрацияВНалоговомОргане");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(РегистрацияВНалоговомОргане.Представитель) Тогда
		СпособПодачиДокументов = 1;
	Иначе
		СпособПодачиДокументов = 0;
	КонецЕсли;
	
	Объект.КодРегиона = СведенияОрганизация.КодНалоговогоОргана;
	Объект.КодНалоговогоОргана = СведенияОрганизация.КодНалоговогоОргана;
	ВидДеятельностиОКВЭД = СведенияОрганизация.КодОКВЭД2;
	
	ПроверитьРеквизитыОрганизации();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСведенияОПредставителе()
	
	Если ИспользуетсяСервисРегистрации Тогда
		Возврат;
	КонецЕсли;
	
	Если СпособПодачиДокументов = 0 Тогда
		ОчиститьРеквизитыПредставителя(РегистрацияВНалоговомОргане, СпособПодачиДокументов);
		ПредставлениеПредставителя = "";
	ИначеЕсли ЗначениеЗаполнено(РегистрацияВНалоговомОргане.Представитель) Тогда
		ПредставлениеПредставителя = РегистрацияВНалоговомОргане.Представитель;
	Иначе
		ПредставлениеПредставителя = НСтр("ru = 'Заполнить'");
	КонецЕсли;
	
	Элементы.ПредставлениеПредставителя.Видимость = СпособПодачиДокументов = 1;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьНеиспользуемыеРеквизиты()
	
	Объект.КодНалоговогоОргана   = "";
	Объект.КоличествоСотрудников = 0;
	Объект.Объекты.Очистить();
	Объект.ТранспортныеСредства.Очистить();
	Объект.Адреса.Очистить();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьРеквизитыПредставителя(РегистрацияВНалоговомОргане, СпособПодачиДокументов)
	
	РеквизитыПредставителя = Новый Массив;
	РеквизитыПредставителя.Добавить("Представитель");
	РеквизитыПредставителя.Добавить("ДокументПредставителя");
	РеквизитыПредставителя.Добавить("УполномоченноеЛицоПредставителя");
	РеквизитыПредставителя.Добавить("Доверенность");

	Для Каждого ТекРеквизит Из РеквизитыПредставителя Цикл
		РегистрацияВНалоговомОргане[ТекРеквизит] = Неопределено;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьДанныеПередОткрытием()
	
	ИспользуетсяСервисРегистрации = Обработки.РегистрацияОрганизации.ИспользуетсяСервисРегистрации()
		И Константы.НачалоРаботы.Получить();
	
	СпособСдачиОтчетности = "Интернет";
	ЗаполнитьСписокВыбораРегионов();
	
	ДополнительныеНастройки = Новый Структура;
	ДополнительныеНастройки.Вставить("КодыВидовДеятельностиОбъекты",
		Справочники.КлассификаторВидовПредпринимательскойДеятельностиПСН.КодыВидовДеятельностиОбъекты());
	ДополнительныеНастройки.Вставить("КодыВидовДеятельностиТС",
		Справочники.КлассификаторВидовПредпринимательскойДеятельностиПСН.КодыВидовДеятельностиТранспортныеСредства());
	ДополнительныеНастройки.Вставить("КодыВидовДеятельностиПрочиеПоказатели",
		Справочники.КлассификаторВидовПредпринимательскойДеятельностиПСН.КодыВидовДеятельностиПрочиеПоказатели());
	ДополнительныеНастройки.Вставить("КодыВодныйТранспорт",
		Справочники.КлассификаторВидовПредпринимательскойДеятельностиПСН.КодыВидовДеятельностиВодныйТранспорт());
	ДополнительныеНастройки.Вставить("КодыВидыОбъектов", 
		Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.СоответствиеКодовИВидовОбъектов());
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДополнительныеНастройки, УникальныйИдентификатор);

	Если ИспользуетсяСервисРегистрации Тогда
		
		ВосстановитьСохраненныеЗначения();
		
	Иначе
		
		Организация = Параметры.Организация;
		СсылкаНаДокумент = Параметры.Ключ;
		СоздатьНовоеЗаявление = Параметры.СоздатьНовоеЗаявление;
		ДатаСоставления = ТекущаяДатаСеанса();
		
		Если Организация.Пустая() И Не СсылкаНаДокумент.Пустая() Тогда
			Организация = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаДокумент, "Организация");
		КонецЕсли;
		
		Если Организация.Пустая() И РегламентированнаяОтчетностьВызовСервера.ИспользуетсяОднаОрганизация() Тогда
			Модуль = ОбщегоНазначения.ОбщийМодуль("Справочники.Организации");
			Организация = Модуль.ОрганизацияПоУмолчанию();
		КонецЕсли;
		
		ОбновитьСведенияОбОрганизации();
		
		Если СсылкаНаДокумент.Пустая() И Не Организация.Пустая() И Не СоздатьНовоеЗаявление Тогда
			
			Заявление = Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.НайтиЗаявлениеНаПолучениеПатента(
				Новый Структура("Организация, СоздатьНовоеЗаявление", Организация, СоздатьНовоеЗаявление));
				
			Если Заявление <> Неопределено Тогда
				СсылкаНаДокумент = Заявление.Ссылка;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не СсылкаНаДокумент.Пустая() Тогда
			ДанныеДокументаВОбъект(СсылкаНаДокумент);
		Иначе
			ИмяФормыОтчета = Отчеты.РегламентированноеУведомлениеПолучениеПатента.ПолучитьФормуПоУмолчанию();
		КонецЕсли;
		
		ОбновитьСведенияОПредставителе();
		
	КонецЕсли;
	
	Если Объект.СрокДействияПатента = 0 Тогда
		Объект.СрокДействияПатента = КоличествоМесяцевДействияПатента(СрокПредставленияОтчета(ТекущаяДатаСеанса())); // Дата составления = текущая дата, патент подаётся за 10 дн. до начала применения ПСН
	КонецЕсли;
	
	Если Объект.НормаЗакона = "" Тогда
		Объект.СтавкаНалога = УчетПСНКлиентСервер.НалоговаяСтавкаПоУмолчанию();
	КонецЕсли;
	
	ПрименитьПониженнуюСтавку = Объект.СтавкаНалога < УчетПСНКлиентСервер.НалоговаяСтавкаПоУмолчанию();
	
	ОбновитьРеквизитыВидаДеятельности();
	ИдентификационныйКод = ИдентификационныйКодВидаДеятельности(
		Объект.КодВидаДеятельности, Объект.КодРегиона, Объект.ПорядковыйНомерВидаДеятельности);
	Элементы.ПодсказкаОпределитьВидаДеятельности.Заголовок = ТекстПодсказкиВидДеятельности(Объект.КодРегиона);
	Элементы.НормаЗаконаРасширеннаяПодсказка.Заголовок = ТекстПодсказкиНормаЗакона(Объект.КодРегиона);
	
	ИнициализироватьСписокВыбораОбъекта();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодсветитьДанныеВыбора(ДанныеВыбора, ТекстПоиска)
	
	РезультатСписок = Новый СписокЗначений;
	
	ЦветПоУмолчанию = ЦветаСтиля.ЦветУспешногоПоиска;
	Для Каждого ТекЗначение Из ДанныеВыбора Цикл
		Представление = ОбщегоНазначенияБП.ПодсветитьСтрокуПоиска(ТекЗначение.Представление, ТекстПоиска, ЦветПоУмолчанию);
		РезультатСписок.Добавить(ТекЗначение.Значение, Представление);
	КонецЦикла;
	
	Возврат РезультатСписок;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПроверяемыеРеквизитыОрганизации()
	
	ПроверяемыеРеквизиты = Новый Массив;
	ПроверяемыеРеквизиты.Добавить("ИНН");
	ПроверяемыеРеквизиты.Добавить("ОГРН");
	ПроверяемыеРеквизиты.Добавить("КодНалоговогоОргана");
	ПроверяемыеРеквизиты.Добавить("Адрес");
	Возврат ПроверяемыеРеквизиты;
	
КонецФункции

&НаСервере
Процедура ОбновитьРеквизитыВидаДеятельности()
	
	КодВидаДеятельности = Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.КодВидаДеятельностиПСН(
		ВидДеятельностиОКВЭД,
		Объект.КодВидаДеятельности);
		
	Если КодВидаДеятельности <> Неопределено И ПустаяСтрока(Объект.КодВидаДеятельности) Тогда
		Объект.КодВидаДеятельности = КодВидаДеятельности;
	КонецЕсли;
	
	ВидДеятельности = Справочники.КлассификаторВидовПредпринимательскойДеятельностиПСН.НайтиПоКоду(
		Объект.КодВидаДеятельности);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРеквизитыНалоговойИнспекции()
	
	Если ИспользуетсяСервисРегистрации Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьРеквизитыНалоговойИнспекцииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРеквизитыНалоговойИнспекцииНаСервере()
	
	Если Объект.Адреса.Количество() > 0 Или Объект.Объекты.Количество() > 0 Тогда
		УстановитьКодНалоговогоОргана();
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.КодНалоговогоОргана) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыНалоговойИнспекции = ДанныеГосударственныхОрганов.РеквизитыНалоговогоОрганаПоКоду(
		Объект.КодНалоговогоОргана);
	
	Если РеквизитыНалоговойИнспекции <> Неопределено Тогда
		
		Если Не ПустаяСтрока(РеквизитыНалоговойИнспекции.Адрес) Тогда
			МассивПодстрок = СтрРазделить(РеквизитыНалоговойИнспекции.Адрес, ",", Ложь);
			РеквизитыНалоговойИнспекции.Адрес = СтрСоединить(МассивПодстрок, ",");
		КонецЕсли;
		
		НалоговаяИнспекцияНаименование = РеквизитыНалоговойИнспекции.Наименование;
		НалоговаяИнспекцияТелефон      = РеквизитыНалоговойИнспекции.Телефон;
		НалоговаяИнспекцияАдрес        = РеквизитыНалоговойИнспекции.Адрес;
		НалоговаяИнспекцияЭлектроннаяПочта = РеквизитыНалоговойИнспекции.ЭлектроннаяПочта;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьОшибкуФормированияЗаявления(ДлительнаяОперация)
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(НСтр("ru = 'Ошибка при формировании заявления на получение патента:'"));
	МассивСтрок.Добавить(ДлительнаяОперация.КраткоеПредставлениеОшибки);
	
	ВызватьИсключение СтрСоединить(МассивСтрок, Символы.ПС);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеСрокаСдачиОтчетности(СрокПредставленияОтчета)
	
	Представление = СтрШаблон(НСтр("ru = 'Сдать заявление следует не позднее %1'"), Формат(СрокПредставленияОтчета, "ДЛФ=DD"));
	Возврат Представление;
	
КонецФункции

&НаСервере
Процедура ПроверитьРеквизитыОрганизации()
	
	НезаполненныеРеквизиты = Неопределено;
	ПроверяемыеРеквизиты   = ПроверяемыеРеквизитыОрганизации();
	
	Если Не ОрганизацииФормыДляОтчетности.РеквизитыЗаполнены(Организация, ПроверяемыеРеквизиты, НезаполненныеРеквизиты) Тогда
		
		РеквизитыОрганизацииЗаполнены = Ложь;
		СообщениеТребуютсяРеквизиты = ПроверкаРеквизитовОрганизации.СтрокаСообщенияНеЗаполненыРеквизитыДляОтчетности(
			Организация, НСтр("ru = 'подготовить заявление'"));
		
	Иначе
		РеквизитыОрганизацииЗаполнены = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьДанныеПомощникаРегистрации(ПропуститьШаг = Ложь)
	
	Структура = Новый Структура();
	
	Если Не ПропуститьШаг Тогда
		
		Реквизиты = Метаданные.Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.Реквизиты;
		Для Каждого ТекРеквизит Из Реквизиты Цикл
			Структура.Вставить(ТекРеквизит.Имя, Объект[ТекРеквизит.Имя]);
		КонецЦикла;
		
		ТабличныеЧасти = Метаданные.Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.ТабличныеЧасти;
		Для Каждого ТекТабличнаяЧасть Из ТабличныеЧасти Цикл
			Структура.Вставить(ТекТабличнаяЧасть.Имя, Объект[ТекТабличнаяЧасть.Имя].Выгрузить());
		КонецЦикла;
		
	КонецЕсли;
	
	Структура.Вставить("ПропуститьШаг", ПропуститьШаг);
	
	Обработки.РегистрацияОрганизации.СохранитьДанныеПатент(Структура);
	
КонецПроцедуры

&НаСервере
Процедура СпособПодачиДокументовПриИзмененииНаСервере()
	
	ОбновитьСведенияОПредставителе();

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СрокПредставленияОтчета(Период, ДоНачалаДействия = Ложь)
	
	Коэффициент = ?(ДоНачалаДействия, -1, 1);
	Возврат Период + Коэффициент*10*24*60*60; // Срок не позднее чем за 10 дней до начала применения ПСН
	
КонецФункции

&НаСервере
Функция СформироватьЗаявлениеНаПолучениеПатентаНаСервере()
	
	ПараметрыЗаявления = Новый Структура;
	
	Реквизиты = Метаданные.Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.Реквизиты;
	Для Каждого ТекРеквизит Из Реквизиты Цикл
		ПараметрыЗаявления.Вставить(ТекРеквизит.Имя, Объект[ТекРеквизит.Имя]);
	КонецЦикла;
	
	ТабличныеЧасти = Метаданные.Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.ТабличныеЧасти;
	Для Каждого ТекТаблица Из ТабличныеЧасти Цикл
		ПараметрыЗаявления.Вставить(ТекТаблица.Имя, Объект[ТекТаблица.Имя].Выгрузить());
	КонецЦикла;
	
	ПараметрыЗаявления.Вставить("Организация",               Организация);
	ПараметрыЗаявления.Вставить("ДатаСоставления",           ДатаСоставления);
	ПараметрыЗаявления.Вставить("Представитель",             РегистрацияВНалоговомОргане.Представитель);
	ПараметрыЗаявления.Вставить("ДокументПредставителя",     РегистрацияВНалоговомОргане.ДокументПредставителя);
	ПараметрыЗаявления.Вставить("ДатаНачалаДействияПатента", ДатаНачалаДействияПатента);
	ПараметрыЗаявления.Вставить("СоздатьНовоеЗаявление",     СоздатьНовоеЗаявление);
	
	Если Не СсылкаНаДокумент.Пустая() Тогда
		ПараметрыЗаявления.Вставить("СсылкаНаДокумент", СсылкаНаДокумент);
		ПараметрыЗаявления.Вставить("ИмяФормы",         ИмяФормыОтчета);
	КонецЕсли;
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Заполнение заявления на получение патента'");
	НастройкиЗапуска.ОжидатьЗавершение = 0;
	
	ИмяМетода = "Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.СформироватьЗаявлениеНаПолучениеПатента";
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяМетода, ПараметрыЗаявления, НастройкиЗапуска);
	
КонецФункции

&НаКлиенте
Процедура СформироватьЗаявлениеНаПолучениеПатента()
	
	СформироватьЗаявлениеПриПереходеНаСледующийШаг();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекстПодсказкиВидДеятельности(КодРегиона)
	
	КодРегионаПоУмолчанию = ?(ПустаяСтрока(КодРегиона), "77", КодРегиона);
	СсылкаНаКлассификатор = СтрШаблон(УчетПСНКлиентСервер.ШаблонСсылкиНаКлассификаторВидовДеятельности(),
		КодРегионаПоУмолчанию);
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить(НСтр("ru = 'Определите наименование и код по '"));
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Классификатору видов деятельности'"),,,, СсылкаНаКлассификатор));
	МассивСтрок.Добавить(".");
	МассивСтрок.Добавить(Символы.ПС);
	МассивСтрок.Добавить(НСтр("ru = 'В разделе 6 найдите строку, соответствующую вашему региону и виду деятельности. '"));
	МассивСтрок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru = 'Пример'"),,,, "Пример"));
	
	ТекстПодсказки = Новый ФорматированнаяСтрока(МассивСтрок);
	
	Возврат ТекстПодсказки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТекстПодсказкиНормаЗакона(КодРегиона)
	
	СсылкаНаЗакон = СтрШаблон(УчетПСНКлиентСервер.ШаблонСсылкиНаЗаконРегиона(), КодРегиона);
	ФормированнаяСсылка = Новый ФорматированнаяСтрока(НСтр("ru = 'закона региона'"),,,, СсылкаНаЗакон);
	
	ТекстПодсказки = Новый ФорматированнаяСтрока(
		НСтр("ru = 'Пункт статьи '"),
		ФормированнаяСсылка,
		НСтр("ru = ', в котором говорится о возможности применения пониженной или нулевой налоговой ставки'"));
	
	Возврат ТекстПодсказки;
	
КонецФункции

&НаСервере
Процедура УправлениеФормойПриСозданииНаСервере()
	
	Если ИспользуетсяСервисРегистрации Тогда
		АвтоЗаголовок = Ложь;
		Заголовок     = НСтр("ru = 'Получение патента'");
		Элементы.ГруппаПодачаДокументов.Видимость      = Ложь;
		Элементы.ГруппаРеквизитыШапки.Видимость        = Ложь;
		Элементы.ДатаНачалаДействияПатента.Видимость   = Ложь;
		Элементы.ФонТребуютсяРеквизиты.Видимость       = Ложь;
	Иначе
		Элементы.ГруппаПропуститьШаг.Видимость         = Ложь;
		Элементы.ГруппаПодачаДокументов.Видимость      = Истина;
		Элементы.ГруппаРеквизитыШапки.Видимость        = Организация.Пустая();
		Элементы.Организация.АвтоОтметкаНезаполненного = Истина;
		Элементы.ДатаНачалаДействияПатента.Видимость   = Истина;
		Элементы.ДатаСоставления.АвтоОтметкаНезаполненного = Истина;
		НалоговаяИнспекцияАдресНаКарте = УправлениеКонтактнойИнформациейБП.СтрокаСсылкиПоказатьНаКарте();
	КонецЕсли;
	
	Элементы.КомандаНазад.Видимость  = ИспользуетсяСервисРегистрации;
	Элементы.ПропуститьШаг.Видимость = ИспользуетсяСервисРегистрации;
	
	ДополнительныеНастройки = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	Для Каждого ТекОбъект Из Объект.Объекты Цикл
		
		СтруктураПоиска = Новый Структура("ВидОбъекта", ТекОбъект.ВидОбъекта);
		СтрокиОтбора = ЗначенияКодовВидовОбъектов(АдресВоВременномХранилище, СтруктураПоиска);
		Если СтрокиОтбора.Количество() > 0 Тогда
			ТекОбъект.ВидОбъектаСтрокой = СтрокиОтбора[0].Наименование;
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьПодсказкуВвода();
	ОбновитьДекорацияСрокДействияПатента(ЭтотОбъект);
	ОбновитьЭлементыВидаДеятельности();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Форма.Элементы.ГруппаОснованиеПониженнаяСтавка.Видимость = Форма.ПрименитьПониженнуюСтавку;
	Форма.Элементы.СтавкаНалога.ТолькоПросмотр = Не Форма.ПрименитьПониженнуюСтавку;
	
	Если Не Форма.ИспользуетсяСервисРегистрации Тогда
		Форма.Элементы.ФонТребуютсяРеквизиты.Видимость = Не Форма.РеквизитыОрганизацииЗаполнены;
		ИзменитьСтатусПроцессаФормированияЗаявления(Форма, Не (Форма.Модифицированность Или Форма.СсылкаНаДокумент.Пустая()));
	КонецЕсли;
	
	Если Форма.Элементы.ГруппаСтраницы.ТекущаяСтраница = Форма.Элементы.СтраницаДополнительно Тогда
	
		Форма.ПредставлениеСрокаСдачиОтчетности = ПредставлениеСрокаСдачиОтчетности(
			СрокПредставленияОтчета(Форма.ДатаНачалаДействияПатента, Истина));
			
		Форма.Элементы.СтраницыДействияСОтчетами.ТекущаяСтраница = Форма.Элементы[Форма.СпособСдачиОтчетности];
		
		Если Форма.Используется1СОтчетность Тогда
			Форма.Элементы.Группа1СОтчетность.Видимость = Истина;
			Форма.Элементы.ЗаголовокПодключить1СОтчетность.Видимость = НЕ Форма.ЭлектронныйДокументооборотДоступен;
			Форма.Элементы.ОписаниеПодключить1СОтчетность.Видимость  = НЕ Форма.ЭлектронныйДокументооборотДоступен;
			Форма.Элементы.Подключить1СОтчетность.Видимость          = НЕ Форма.ЭлектронныйДокументооборотДоступен;
			Форма.Элементы.Открыть1СОтчетность.Видимость             = Форма.ЭлектронныйДокументооборотДоступен;
		Иначе
			Форма.Элементы.Группа1СОтчетность.Видимость = Ложь;
		КонецЕсли;
		Форма.Элементы.Гиперссылка1СОтчетность.Видимость = Не Форма.Используется1СОтчетность;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКодНалоговогоОргана()
	
	КодПоУмолчанию = ?(ПустаяСтрока(Объект.КодНалоговогоОргана),
		РегистрацияВНалоговомОргане.Код, Объект.КодНалоговогоОргана);
		
	ПараметрыВыполнения = Новый Структура;
	ПараметрыВыполнения.Вставить("Адреса",  Объект.Адреса);
	ПараметрыВыполнения.Вставить("Объекты", Объект.Объекты);
	
	Объект.КодНалоговогоОргана = Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.КодНалоговогоОрганаПатента(
		ПараметрыВыполнения, КодПоУмолчанию);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПодсказкуВвода()
	
	Элементы.КодНалоговогоОргана.ПодсказкаВвода = СтрШаблон("%1__", Объект.КодРегиона);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КодНалоговогоОргана");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КодНалоговогоОргана", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "КодНалоговогоОргана");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КодНалоговогоОргана", ВидСравненияКомпоновкиДанных.Заполнено);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	
	Если ИспользуетсяСервисРегистрации Тогда
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДатаНачалаДействияПатента");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"ДатаНачалаДействияПатента", ВидСравненияКомпоновкиДанных.НеЗаполнено);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
		
		ЭлементУО = УсловноеОформление.Элементы.Добавить();
		КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДатаНачалаДействияПатента");
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
			"ДатаНачалаДействияПатента", ВидСравненияКомпоновкиДанных.Заполнено);
		ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	КонецЕсли;
	
	ДополнительныеНастройки = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	ОбъектыБезПлощади = Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.ВидыОбъектовБезПлощади(
		ДополнительныеНастройки.КодыВидыОбъектов);
	
	//Табличная часть "Объекты"
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОбъектыПлощадь");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Объекты.ВидОбъекта", ВидСравненияКомпоновкиДанных.ВСписке, ОбъектыБезПлощади);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОбъектыПлощадь");
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Ложь);
	НоваяГруппа = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(НоваяГруппа,
		"Объект.Объекты.ВидОбъекта", ВидСравненияКомпоновкиДанных.НеВСписке, ОбъектыБезПлощади);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(НоваяГруппа,
		"Объект.Объекты.Площадь", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ОбъектыБезОбязательногоАдреса = Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.ВидыОбъектовБезАдреса();
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОбъектыАдресСтрокой");
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.Объекты.ВидОбъекта", ВидСравненияКомпоновкиДанных.ВСписке, ОбъектыБезОбязательногоАдреса);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОбъектыАдресСтрокой");
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	НоваяГруппа = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(НоваяГруппа,
		"Объект.Объекты.ВидОбъекта", ВидСравненияКомпоновкиДанных.НеВСписке, ОбъектыБезОбязательногоАдреса);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(НоваяГруппа,
		"Объект.Объекты.Адрес", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	//Табличная часть "Транспортные средства"
	
	КодыПеревозкаГрузов = Новый СписокЗначений;
	КодыПеревозкаГрузов.ЗагрузитьЗначения(
		Справочники.КлассификаторВидовПредпринимательскойДеятельностиПСН.КодыВидовДеятельностиПеревозкаГрузов());
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТранспортныеСредстваГрузоподъемность");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КодВидаДеятельности", ВидСравненияКомпоновкиДанных.ВСписке, КодыПеревозкаГрузов);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("МинимальнаяШирина", 14);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТранспортныеСредстваГрузоподъемность");
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	НоваяГруппа = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(НоваяГруппа,
		"Объект.КодВидаДеятельности", ВидСравненияКомпоновкиДанных.ВСписке, КодыПеревозкаГрузов);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(НоваяГруппа,
		"Объект.ТранспортныеСредства.Грузоподъемность", ВидСравненияКомпоновкиДанных.НеЗаполнено);
		
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТранспортныеСредстваКоличество");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КодВидаДеятельности", ВидСравненияКомпоновкиДанных.ВСписке, КодыПеревозкаГрузов);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТранспортныеСредстваГрузоподъемность");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КодВидаДеятельности", ВидСравненияКомпоновкиДанных.НеВСписке, КодыПеревозкаГрузов);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТранспортныеСредстваКоличество");
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КодВидаДеятельности", ВидСравненияКомпоновкиДанных.НеВСписке, КодыПеревозкаГрузов);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("МинимальнаяШирина", 14);
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТранспортныеСредстваКоличество");
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	НоваяГруппа = КомпоновкаДанныхКлиентСервер.ДобавитьГруппуОтбора(ЭлементУО.Отбор.Элементы,
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(НоваяГруппа,
		"Объект.КодВидаДеятельности", ВидСравненияКомпоновкиДанных.НеВСписке, КодыПеревозкаГрузов);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(НоваяГруппа,
		"Объект.ТранспортныеСредства.Количество", ВидСравненияКомпоновкиДанных.Равно, 0);
	
КонецПроцедуры

#Область ДлительныеОперации

&НаКлиенте
Процедура СформироватьЗаявлениеПриПереходеНаСледующийШаг()
	
	ОбновитьРеквизитыНалоговойИнспекцииНаСервере();
	ДлительнаяОперация = СформироватьЗаявлениеНаПолучениеПатентаНаСервере();
	
	Если ДлительнаяОперация.Статус = "Ошибка" Тогда
		
		ПоказатьОшибкуФормированияЗаявления(ДлительнаяОперация);
		УправлениеФормой(ЭтотОбъект);
		
	Иначе
		
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ПолучатьРезультат = Истина;
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		
		Обработчик = Новый ОписаниеОповещения("СформироватьЗаявлениеПослеЗавершенияФоновогоЗадания", ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаявлениеПослеЗавершенияФоновогоЗадания(ДлительнаяОперация, ДополнительныеПараметры) Экспорт
	
	Если ДлительнаяОперация = Неопределено Тогда
		Возврат; // Отменено
	КонецЕсли;
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		
		СформироватьЗаявлениеЗаданиеВыполнено(ДлительнаяОперация.АдресРезультата);
		
	Иначе
		
		ПоказатьОшибкуФормированияЗаявления(ДлительнаяОперация);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьЗаявлениеЗаданиеВыполнено(АдресРезультата) Экспорт
	
	СсылкаНаДокумент = ПолучитьИзВременногоХранилища(АдресРезультата);
	
	Используется1СОтчетность = РегламентированнаяОтчетностьБП.Используется1СОтчетность();
	ЭлектронныйДокументооборотДоступен = ИнтерфейсыВзаимодействияБРО.ПодключенДокументооборотСКонтролирующимОрганом(
		Организация, ПредопределенноеЗначение("Перечисление.ТипыКонтролирующихОрганов.ФНС"));
	
	СоздатьНовоеЗаявление = Ложь;
	Модифицированность    = Ложь;
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
