#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

//Выполняет формирование документа "Уведомление о спецрежимах налогообложения"
//
// Параметры:
//   ПараметрыВыполнения - структура с реквизитами Помощника заполнения заявления на получение патента
//
// Возвращаемое значение:
//  ДокументСсылка.УведомлениеОСпецрежимахНалогообложения
//
Функция СформироватьЗаявлениеНаПолучениеПатента(ПараметрыВыполнения, АдресРезультата = Неопределено) Экспорт
	
	ПараметрыЗаявления = Новый Структура;
	Для Каждого ТекПараметр Из ПараметрыВыполнения Цикл
		Если ТипЗнч(ТекПараметр.Значение) <> Тип("ТаблицаЗначений") Тогда
			ПараметрыЗаявления.Вставить(ТекПараметр.Ключ, ТекПараметр.Значение);
		КонецЕсли;
	КонецЦикла;
	
	СведенияОбОрганизации = СведенияОбИндивидуальномПредпринимателе(
		ПараметрыВыполнения.Организация, ПараметрыВыполнения.ДатаСоставления);
		
	КодНОУчет = СведенияОбОрганизации.КодНО;
	КодНалоговогоОргана = КодНалоговогоОрганаПатента(ПараметрыВыполнения, КодНОУчет);
	
	ПараметрыЗаявления.Вставить("Стр01",  ДанныеЛистаТитульнаяСтраница(ПараметрыВыполнения, СведенияОбОрганизации, КодНалоговогоОргана));
	ПараметрыЗаявления.Вставить("Стр02",  ДанныеЛиста2(ПараметрыВыполнения));
	ПараметрыЗаявления.Вставить("ЛистыА", ДанныеЛистаА(ПараметрыВыполнения, КодНалоговогоОргана));
	ПараметрыЗаявления.Вставить("ЛистыБ", ДанныеЛистаБ(ПараметрыВыполнения, КодНалоговогоОргана, КодНОУчет));
	ПараметрыЗаявления.Вставить("ЛистыВ", ДанныеЛистаВ(ПараметрыВыполнения, КодНалоговогоОргана, КодНОУчет));
	ПараметрыЗаявления.Вставить("РегистрацияВИФНС",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыВыполнения.Организация, "РегистрацияВНалоговомОргане"));
	
	ПредставительУказан = ЗначениеЗаполнено(ПараметрыВыполнения.Представитель);
	Если ПредставительУказан И ТипЗнч(ПараметрыВыполнения.Представитель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ДополнитьСтруктуруФИОПодписанта(ПараметрыВыполнения.Представитель, ПараметрыЗаявления);
	ИначеЕсли ПредставительУказан Тогда
		
		КонтактноеЛицо = Справочники.КонтактныеЛица.КонтактноеЛицоПоУмолчанию(ПараметрыВыполнения.Представитель);
		Если ЗначениеЗаполнено(КонтактноеЛицо) Тогда
			ДополнитьСтруктуруФИОПодписанта(КонтактноеЛицо, ПараметрыЗаявления);
		Иначе
			ДополнитьСтруктуруФИОПодписанта(ПараметрыВыполнения.Представитель, ПараметрыЗаявления);
		КонецЕсли;
		
	Иначе
		ДополнитьСтруктуруФИОПодписанта("", ПараметрыЗаявления);
	КонецЕсли;
	
	ЗаявлениеНаПатент = НайтиЗаявлениеНаПолучениеПатента(ПараметрыВыполнения);
	
	ПараметрыВыполнения.Вставить("ИмяПомощника", Метаданные.Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.Имя);
	ПараметрыЗаявления.Вставить("ДанныеПомощникаЗаполнения", ПараметрыВыполнения);
	
	Если ЗаявлениеНаПатент = Неопределено Или Не ЗначениеЗаполнено(ЗаявлениеНаПатент.Ссылка) Тогда
		ДокументСсылка = Отчеты.РегламентированноеУведомлениеПолучениеПатента.СформироватьНовоеУведомление(
			ЗаявлениеНаПатент.ИмяМакета, ПараметрыЗаявления);
	Иначе
		ОбновитьТекущийДокумент(ЗаявлениеНаПатент.Ссылка, ЗаявлениеНаПатент.ИмяМакета, ПараметрыЗаявления);
		ДокументСсылка = ЗаявлениеНаПатент.Ссылка;
	КонецЕсли;
	
	Если АдресРезультата <> Неопределено Тогда
		ПоместитьВоВременноеХранилище(ДокументСсылка, АдресРезультата);
	КонецЕсли;
	
	Возврат ДокументСсылка;
	
КонецФункции

// Возвращает данные о последнем созданном уведомлении
//
// Параметры:
//   ПараметрыВыполнения - Структура с возможными ключами: Организация, СсылкаНаДокумент, ИмяФормы, СоздатьНовоеУведомление
//
// Возвращаемое значение:
//  Структура, ключи:
//     - Дата      - Дата (Если документ не был ранее создан, тогда пустая дата)
//     - Ссылка    - ДокументСсылка.УведомлениеОСпецрежимахНалогообложения (Если документ не был ранее создан, тогда Неопределено)
//     - ИмяФормы  - Строка (напр., Отчет.РегламентированноеУведомлениеПолучениеПатента.Форма.Форма2017_1)
//     - ИмяМакета - Строка (напр., Форма2017_1)
//
Функция НайтиЗаявлениеНаПолучениеПатента(ПараметрыВыполнения) Экспорт 
	
	Организация = ПараметрыВыполнения.Организация;
	
	Если Не ЗначениеЗаполнено(Организация) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаявлениеПатент = Новый Структура;
	
	СсылкаНаОбъект = Неопределено;
	Если ПараметрыВыполнения.Свойство("СсылкаНаДокумент", СсылкаНаОбъект) Тогда
		ЗаявлениеПатент.Вставить("Ссылка", СсылкаНаОбъект);
		ДобавитьИнформациюОбОтчете(ПараметрыВыполнения.ИмяФормы, ЗаявлениеПатент);
		ЗаявлениеПатент.Вставить("ИмяФормы", ПараметрыВыполнения.ИмяФормы);
		Возврат ЗаявлениеПатент;
	КонецЕсли;
	
	Отбор = Новый Структура("Организация", Организация);
	Отбор.Вставить("ВидУведомления",
		Перечисления.ВидыУведомленийОСпецрежимахНалогообложения.ЗаявлениеНаПолучениеПатентаРекомендованнаяФорма);
	
	ЗаявлениеПатент.Вставить("Дата", Дата(1, 1, 1));
	ЗаявлениеПатент.Вставить("Ссылка", Неопределено);
	ЗаявлениеПатент.Вставить("ИмяФормы", "");
	
	ИмяФормыПоУмолчанию = Отчеты.РегламентированноеУведомлениеПолучениеПатента.ПолучитьФормуПоУмолчанию();
	ИмяОтчета = ДобавитьИнформациюОбОтчете(ИмяФормыПоУмолчанию, ЗаявлениеПатент);
	
	СоздатьНовоеЗаявление = Неопределено;
	Если Не ПараметрыВыполнения.Свойство("СоздатьНовоеЗаявление", СоздатьНовоеЗаявление) 
		Или СоздатьНовоеЗаявление = Ложь Тогда
		
		Уведомления = УведомлениеОСпецрежимахНалогообложения.НайтиУведомления(Отбор);
		Уведомления.Сортировать("Дата Убыв, Ссылка Убыв", Новый СравнениеЗначений);
		Если Уведомления.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(ЗаявлениеПатент, Уведомления[0]);
			ИмяФормы = ИмяОтчета + Уведомления[0].ИмяФормы;
			ЗаявлениеПатент.Вставить("ИмяФормы", ИмяФормы);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПустаяСтрока(ЗаявлениеПатент.ИмяФормы) Тогда
		ЗаявлениеПатент.Вставить("ИмяФормы", ИмяФормыПоУмолчанию);
	КонецЕсли;
	
	Возврат ЗаявлениеПатент;
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает список кодов видов объектов, для которых адрес не является обязательным полем.
// Используется для заполнения Листа В в заявлении на получение патента.
//
// Возвращаемое значение:
//   Массив - значения с типом строка(2).
//
Функция ВидыОбъектовБезАдреса() Экспорт
	
	КодыВидовОбъектов = Новый СписокЗначений;
	
	// 16 – автомобиль; 17 - автолавка; 18 - автомагазин; 19 - тонар; 20 - автоприцеп; 21 - передвижной торговый автомат; 22 – разносная торговля
	Для Индекс = 16 По 22 Цикл
		КодыВидовОбъектов.Добавить(Формат(Индекс, "ЧЦ=2"));
	КонецЦикла;
	КодыВидовОбъектов.Добавить("29"); // объект организации общественного питания, не имеющий зала обслуживания посетителей
	
	Возврат КодыВидовОбъектов;
	
КонецФункции

// Возвращает список кодов видов объектов, для которых не требуется указывать площадь.
// Используется для заполнения Листа В в заявлении на получение патента.
//
// Параметры:
//   КодыВидыОбъектов  - таблица соответствия кодов видов деятельности и видов объектов
//
// Возвращаемое значение:
//   Массив - значения с типом строка(2).
//
Функция ВидыОбъектовБезПлощади(КодыВидыОбъектов = Неопределено) Экспорт
	
	Если КодыВидыОбъектов = Неопределено Тогда
		КодыВидыОбъектов = Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.СоответствиеКодовИВидовОбъектов();
	КонецЕсли;
	
	ОбъектыБезПлощади = Новый СписокЗначений;
	ПустыеПризнаки = КодыВидыОбъектов.НайтиСтроки(Новый Структура("ПризнакОбъекта", ""));
	Для Каждого ТекЗначение Из ПустыеПризнаки Цикл
		Если ОбъектыБезПлощади.НайтиПоЗначению(ТекЗначение.ВидОбъекта) = Неопределено Тогда
			ОбъектыБезПлощади.Добавить(ТекЗначение.ВидОбъекта);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОбъектыБезПлощади;
	
КонецФункции

// Возвращает соответствие между кодом вида деятельности и видом объекта
//
// Возвращаемое значение:
//   Соответствие
//     Ключ     - код вида деятельности, значение с типом строка(2)
//     Значение - Массив, значения тип строка (2)
//
Функция СоответствиеКодовИВидовОбъектов() Экспорт
	
	МакетПСН = Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.ПолучитьМакет("КодыВидовДеятельностиВидаИПризнакаОбъектов");
	СтрокаXML = МакетПСН.ПолучитьТекст();
	ТаблицаРезультат = ОбщегоНазначения.ЗначениеИзСтрокиXML(СтрокаXML);
	
	Возврат ТаблицаРезультат;
	
КонецФункции

// Возвращает код вида деятельности: если указать Код вида деятельности ПСН, тогда выполняется поиск по данному коду,
// иначе - по Коду вида деятельности ОКВЭД2
//
// Параметры:
//   КодВидаДеятельностиОКВЭД2 - Строка(2)
//   КодВидаДеятельностиПСН    - Строка(2)
//
// Возвращаемое значение:
//   Строка (2)
//
Функция КодВидаДеятельностиПСН(КодВидаДеятельностиОКВЭД2 = "", КодВидаДеятельностиПСН = "") Экспорт
	
	ТаблицаРезультат = ТаблицаВидовДеятельностиПСН();
	
	Если Не ПустаяСтрока(КодВидаДеятельностиПСН) Тогда
		
		ТаблицаРезультат.Индексы.Добавить("Код");
		СтрокиОтбора = ТаблицаРезультат.НайтиСтроки(Новый Структура("Код", КодВидаДеятельностиПСН));
		Если СтрокиОтбора.Количество() > 0 Тогда
			Возврат СтрокиОтбора[0].Код;
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаРезультат.Индексы.Добавить("КодОКВЭД2");
	
	//Поиск по полному соответствию кода
	СтрокиОтбора = ТаблицаРезультат.НайтиСтроки(Новый Структура("КодОКВЭД2", КодВидаДеятельностиОКВЭД2));
	Если СтрокиОтбора.Количество() > 1 Тогда
		Возврат Неопределено;
	ИначеЕсли СтрокиОтбора.Количество() > 0 Тогда
		Возврат СтрокиОтбора[0].Код;
	КонецЕсли;
	
	//Поиск по верхнему уровню группы:
	//например: если в качестве вида деятельности указан 68.20.1, то вернет соответствие для кода 68.20
	Если СтрЧислоВхождений(КодВидаДеятельностиОКВЭД2, ".") < 2 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ЧастиКода = СтрРазделить(КодВидаДеятельностиОКВЭД2, ".");
	ЗначениеПоиска = ЧастиКода[0] + "." + ЧастиКода[1];
	
	СтрокиОтбора = ТаблицаРезультат.НайтиСтроки(Новый Структура("КодОКВЭД2", ЗначениеПоиска));
	Если СтрокиОтбора.Количество() > 0 Тогда
		Возврат СтрокиОтбора[0].Код;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает код налоговой инспекции: если заполнены адреса в табличных частях Адреса/Объекты,
// тогда возвращается код первого заполненного адреса, иначе возвращется код по умолчанию.
//
// Параметры:
//   ПараметрыВыполнения - Структура с обязательными ключами: Адреса, Объекты - таблица значений.
//   КодНОПоУмолчанию    - Строка(4)
//
// Возвращаемое значение:
//   Строка (4)
//
Функция КодНалоговогоОрганаПатента(ПараметрыВыполнения, КодНОПоУмолчанию) Экспорт
	
	КодНалоговогоОргана = "";
	
	Если ПараметрыВыполнения.Адреса.Количество() > 0 Тогда
		
		Для Каждого ТекСтрока Из ПараметрыВыполнения.Адреса Цикл
			КодНалоговогоОргана = КодНалоговогоОрганаПоАдресу(ТекСтрока.Адрес);
			Если Не ПустаяСтрока(КодНалоговогоОргана) Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ПараметрыВыполнения.Объекты.Количество() > 0 Тогда
		
		Для Каждого ТекСтрока Из ПараметрыВыполнения.Объекты Цикл
			КодНалоговогоОргана = КодНалоговогоОрганаПоАдресу(ТекСтрока.Адрес);
			Если Не ПустаяСтрока(КодНалоговогоОргана) Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ПараметрыВыполнения.ТранспортныеСредства.Количество() = 0 Тогда
		
		КодНалоговогоОргана = ПараметрыВыполнения.КодНалоговогоОргана;
		
	КонецЕсли;
	
	Если КодНалоговогоОргана = "" Тогда
		КодНалоговогоОргана = КодНОПоУмолчанию;
	КонецЕсли;
	
	Возврат КодНалоговогоОргана;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ДанныеЛистаТитульнаяСтраница(ПараметрыВыполнения, СведенияОбОрганизации, КодНалоговогоОргана)
	
	СтруктураДанных = Новый Структура;
	
	СтруктураДанных.Вставить("ДатаДок", ПараметрыВыполнения.ДатаСоставления);
	СтруктураДанных.Вставить("ИННШапка",СведенияОбОрганизации.ИННФЛ);
	СтруктураДанных.Вставить("Фамилия", СведенияОбОрганизации.ФамилияИП);
	СтруктураДанных.Вставить("Имя",     СведенияОбОрганизации.ИмяИП);
	СтруктураДанных.Вставить("Отчество",СведенияОбОрганизации.ОтчествоИП);
	СтруктураДанных.Вставить("Тлф",     СведенияОбОрганизации.ТелСлуж);
	СтруктураДанных.Вставить("ОГРНИП",  СведенияОбОрганизации.ОГРН);
	СтруктураДанных.Вставить("КолМес",  ПараметрыВыполнения.СрокДействияПатента);
	СтруктураДанных.Вставить("КодНО",   КодНалоговогоОргана);
		
	Если ПараметрыВыполнения.Свойство("ДатаНачалаДействияПатента") Тогда
		СтруктураДанных.Вставить("ДатаНачПат", ПараметрыВыполнения.ДатаНачалаДействияПатента);
	Иначе
		СтруктураДанных.Вставить("ДатаНачПат");
	КонецЕсли;
		
	ДобавитьСведенияОбАдресе(СтруктураДанных, СведенияОбОрганизации.АдрЮР_XML);
	
	Если ЗначениеЗаполнено(ПараметрыВыполнения.Представитель) Тогда
		СтруктураДанных.Вставить("ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ", ПараметрыВыполнения.Представитель);
		СтруктураДанных.Вставить("ПрПодп", "2");
		СтруктураДанных.Вставить("НаимДок", ПараметрыВыполнения.ДокументПредставителя);
	Иначе
		ФИОПредставителя = СтрШаблон("%1 %2 %3",
			СведенияОбОрганизации.ФамилияИП,
			СведенияОбОрганизации.ИмяИП,
			СведенияОбОрганизации.ОтчествоИП);
		СтруктураДанных.Вставить("ФИО_РУКОВОДИТЕЛЯ_ПРЕДСТАВИТЕЛЯ", ФИОПредставителя);
		СтруктураДанных.Вставить("ПрПодп", "1");
		СтруктураДанных.Вставить("НаимДок", "");
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция ДанныеЛиста2(ПараметрыВыполнения)
	
	СтруктураДанных = Новый Структура;
	
	СтруктураДанных.Вставить("НаимВД", ПараметрыВыполнения.НаименованиеВидаДеятельности);
	
	КодСтрокой = СтрШаблон("%1%2%3",
		ПараметрыВыполнения.КодВидаДеятельности,
		ПараметрыВыполнения.КодРегиона,
		Формат(ПараметрыВыполнения.ПорядковыйНомерВидаДеятельности, "ЧЦ=2; ЧДЦ=0; ЧВН="));
		
	СтруктураДанных.Вставить("КодВД", КодСтрокой);
	
	Если ПараметрыВыполнения.КоличествоСотрудников > 0 Тогда
		СтруктураДанных.Вставить("ПрНаемРаб",  1);
		СтруктураДанных.Вставить("ЧислНаемРаб",ПараметрыВыполнения.КоличествоСотрудников);
	Иначе
		СтруктураДанных.Вставить("ПрНаемРаб",  2);
		СтруктураДанных.Вставить("ЧислНаемРаб",0);
	КонецЕсли;
	
	Если ПараметрыВыполнения.СтавкаНалога < УчетПСНКлиентСервер.НалоговаяСтавкаПоУмолчанию() Тогда
		СтруктураДанных.Вставить("НалСтавка",    ПараметрыВыполнения.СтавкаНалога);
		СтруктураДанных.Вставить("ЗакСубРФСтав", ПараметрыВыполнения.НормаЗакона);
		СтруктураДанных.Вставить("ВыводитьНольНаПечать", Истина);
	Иначе
		СтруктураДанных.Вставить("НалСтавка",    "");
		СтруктураДанных.Вставить("ЗакСубРФСтав", "");
		СтруктураДанных.Вставить("ВыводитьНольНаПечать", Ложь);
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

Функция ДанныеЛистаА(ПараметрыВыполнения, КодНалоговоОргана)
	
	ДанныеРезультат = Новый Массив; 
	АдресаНеУказаны = ПараметрыВыполнения.Адреса.Количество() = 0;
	
	Если АдресаНеУказаны И ПараметрыВыполнения.ТранспортныеСредства.Количество() = 0
		И ПараметрыВыполнения.Объекты.Количество() = 0 Тогда
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("КодРегион", Лев(КодНалоговоОргана, 2));
		СтруктураДанных.Вставить("КодНОУчет", КодНалоговоОргана);
		СтруктураДанных.Вставить("КодРегионАддр");
		ДанныеРезультат.Добавить(СтруктураДанных);
		
	ИначеЕсли Не АдресаНеУказаны Тогда
		
		Для Каждого ТекСтрока Из ПараметрыВыполнения.Адреса Цикл
			
			СтруктураДанных = Новый Структура;
			ДобавитьСведенияОбАдресе(СтруктураДанных, ТекСтрока.Адрес);
			СтруктураДанных.Вставить("КодНОУчет", "");
			ДанныеРезультат.Добавить(СтруктураДанных);
			
		КонецЦикла;
		
	Иначе
		
		ДанныеРезультат = Новый ТаблицаЗначений;
		
	КонецЕсли;
	
	Возврат ДанныеРезультат;
	
КонецФункции

Функция ДанныеЛистаБ(ПараметрыВыполнения, КодНалоговоОргана, КодНУ)
	
	Если ПараметрыВыполнения.ТранспортныеСредства.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	КодНОУчет = КодНалоговогоОрганаМестоДеятельности(КодНалоговоОргана, КодНУ);
	ДанныеРезультат = Новый Массив;
	
	КодТипаТС = Справочники.КлассификаторВидовПредпринимательскойДеятельностиПСН.КодТипаТранспортногоСредства(
		ПараметрыВыполнения.КодВидаДеятельности);
	
	Для Каждого ТекСтрока Из ПараметрыВыполнения.ТранспортныеСредства Цикл
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("КодТС",        КодТипаТС);
		СтруктураДанных.Вставить("ИдНомТС",      ТекСтрока.Номер);
		СтруктураДанных.Вставить("МаркаТС",      ТекСтрока.Марка);
		СтруктураДанных.Вставить("РегЗнакТС",    ТекСтрока.РегистрационныйЗнак);
		СтруктураДанных.Вставить("ГрузТС",       ТекСтрока.Грузоподъемность);
		СтруктураДанных.Вставить("КолПосадМест", ТекСтрока.Количество);
		СтруктураДанных.Вставить("КодРегион",    ПараметрыВыполнения.КодРегиона);
		СтруктураДанных.Вставить("КодНОУчет",    КодНОУчет);
		
		ДанныеРезультат.Добавить(СтруктураДанных);
		
	КонецЦикла;
	
	Возврат ДанныеРезультат;
	
КонецФункции

Функция ДанныеЛистаВ(ПараметрыВыполнения, КодНалоговоОргана, КодНУ)
	
	Если ПараметрыВыполнения.Объекты.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	КодНОУчет = КодНалоговогоОрганаМестоДеятельности(КодНалоговоОргана, КодНУ);
	ДанныеРезультат = Новый Массив;
	
	Для Каждого ТекСтрока Из ПараметрыВыполнения.Объекты Цикл
		
		СтруктураДанных = Новый Структура;
		СтруктураДанных.Вставить("КодОбъект",  ТекСтрока.ВидОбъекта);
		СтруктураДанных.Вставить("ПризОбъект", ТекСтрока.ПризнакОбъекта);
		СтруктураДанных.Вставить("ПлощОбъект", ТекСтрока.Площадь);
		ДобавитьСведенияОбАдресе(СтруктураДанных, ТекСтрока.Адрес);
		СтруктураДанных.Вставить("КодРегион",  ПараметрыВыполнения.КодРегиона);
		СтруктураДанных.Вставить("КодНОУчет",  КодНОУчет);
		
		ДанныеРезультат.Добавить(СтруктураДанных);
		
	КонецЦикла;
	
	Возврат ДанныеРезультат;
	
КонецФункции

Процедура ДобавитьЗначениеЛиста(ТекЗначение, ДанныеЗаполнения, ИмяСтраницы, ЛистВДеревере, НомерСтраницы)
	
	ШаблонИмяСтраницы = "Стр. %1";
	УИД = Новый УникальныйИдентификатор;
	ТекЗначение.Вставить("УИД", УИД);
	ДанныеЗаполнения.ДанныеМногостраничныхРазделов[ИмяСтраницы].Добавить(ТекЗначение);
	НоваяСтрока = ЛистВДеревере.Строки.Добавить();
	НоваяСтрока.ИДНаименования = ИмяСтраницы;
	НоваяСтрока.ИмяМакета = ИмяСтраницы;
	НоваяСтрока.ИндексКартинки = 1;
	НоваяСтрока.Многостраничность = Истина;
	НоваяСтрока.Наименование = СтрШаблон(ШаблонИмяСтраницы, НомерСтраницы);
	НоваяСтрока.УИД = УИД;
	
КонецПроцедуры

Функция ДобавитьСведенияОбАдресе(СтруктураДанных, Адрес)
	
	РоссийскийАдрес = Новый Соответствие;
	РоссийскийАдрес.Вставить("Индекс");
	РоссийскийАдрес.Вставить("КодРегиона");
	РоссийскийАдрес.Вставить("Район");
	РоссийскийАдрес.Вставить("Город");
	РоссийскийАдрес.Вставить("НаселенныйПункт");
	РоссийскийАдрес.Вставить("Улица");
	РоссийскийАдрес.Вставить("Дом");
	РоссийскийАдрес.Вставить("Корпус");
	РоссийскийАдрес.Вставить("Квартира");
	
	РегламентированнаяОтчетностьВызовСервера.СформироватьАдрес(Адрес, РоссийскийАдрес);
	
	СтруктураДанных.Вставить("Индекс",        РоссийскийАдрес["Индекс"]);
	СтруктураДанных.Вставить("КодРегионАддр", РоссийскийАдрес["КодРегиона"]);
	СтруктураДанных.Вставить("КодРегион",     Лев(РоссийскийАдрес["КодРегиона"], 2));
	СтруктураДанных.Вставить("Район",         РоссийскийАдрес["Район"]);
	СтруктураДанных.Вставить("Город",         РоссийскийАдрес["Город"]);
	СтруктураДанных.Вставить("НаселПункт",    РоссийскийАдрес["НаселенныйПункт"]);
	СтруктураДанных.Вставить("Улица",         РоссийскийАдрес["Улица"]);
	СтруктураДанных.Вставить("Дом",           РоссийскийАдрес["Дом"]);
	СтруктураДанных.Вставить("Корпус",        РоссийскийАдрес["Корпус"]);
	СтруктураДанных.Вставить("Кварт",         РоссийскийАдрес["Квартира"]);
	СтруктураДанных.Вставить("АдресXML",      Адрес);
	СтруктураДанных.Вставить("Адрес9зпт",     РаботаСАдресами.СведенияОбАдресе(Адрес).Представление);
	
КонецФункции

Функция ДобавитьИнформациюОбОтчете(ИмяФормыПоУмолчанию, СтруктураЗаполнения)
	
	ПозицияПоследнейТочки = СтрНайти(ИмяФормыПоУмолчанию, ".", НаправлениеПоиска.СКонца);
	ИмяОтчета = Лев(ИмяФормыПоУмолчанию, ПозицияПоследнейТочки);
	СтруктураЗаполнения.Вставить("ИмяМакета", Прав(ИмяФормыПоУмолчанию, СтрДлина(ИмяФормыПоУмолчанию) - ПозицияПоследнейТочки));
	Возврат ИмяОтчета;
	
КонецФункции

Процедура ДополнитьСтруктуруФИОПодписанта(Представитель, ПараметрыЗаявления)
	
	Если ТипЗнч(Представитель) = Тип("СправочникСсылка.КонтактныеЛица") Тогда 
		ФИО = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Представитель, "Фамилия, Имя, Отчество");
	ИначеЕсли ЗначениеЗаполнено(Представитель) Тогда
		ФИО = РегламентированнаяОтчетность.РазложитьФИО(Строка(Представитель));
	Иначе
		ФИО = Новый Структура("Фамилия, Имя, Отчество");
	КонецЕсли;
	
	ПараметрыЗаявления.Вставить("ПодписантФамилия", ФИО.Фамилия);
	ПараметрыЗаявления.Вставить("ПодписантИмя", ФИО.Имя);
	ПараметрыЗаявления.Вставить("ПодписантОтчество", ФИО.Отчество);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеЛистаДерева(ИмяСтраницы, ИмяЛиста, ДанныеЗаполнения, ПараметрыЗаполнения)
	
	ДанныеЗаполнения.ДанныеМногостраничныхРазделов[ИмяСтраницы].Очистить();
	ЛистВДеревере = ДанныеЗаполнения.ДеревоСтраниц.Строки.Найти(ИмяЛиста);
	Если ЛистВДеревере <> Неопределено Тогда
		ЛистВДеревере.Строки.Очистить();
	КонецЕсли;
	
	НомерСтраницы = 1;
	
	Если ПараметрыЗаполнения.Количество() = 0 Тогда
		Области = Отчеты.РегламентированноеУведомлениеПолучениеПатента.ПолучитьМакет(ИмяСтраницы).ПолучитьОбласть("ОсновнаяЧасть").Области;
		ПустаяСтруктура = Новый Структура;
		Для Каждого ТекОбласть Из Области Цикл
			ПустаяСтруктура.Вставить(ТекОбласть.Имя);
		КонецЦикла;
		ПустаяСтруктура.Вставить("КодНОУчет");
		ДобавитьЗначениеЛиста(ПустаяСтруктура, ДанныеЗаполнения, ИмяСтраницы, ЛистВДеревере, НомерСтраницы);
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекЗначение Из ПараметрыЗаполнения Цикл
		
		ДобавитьЗначениеЛиста(ТекЗначение, ДанныеЗаполнения, ИмяСтраницы, ЛистВДеревере, НомерСтраницы);
		НомерСтраницы = НомерСтраницы + 1;
		
	КонецЦикла;
	
КонецПроцедуры

Функция КодНалоговогоОрганаМестоДеятельности(НалоговыйОрганМестоДеятельности, НалоговыйОрганПрописка)
	
	Возврат ?(НалоговыйОрганМестоДеятельности = НалоговыйОрганПрописка, Неопределено, НалоговыйОрганМестоДеятельности);
	
КонецФункции

Функция КодНалоговогоОрганаПоАдресу(ТекущийАдрес)
	
	КодНалоговогоОргана = "";
	
	Если Не ПустаяСтрока(ТекущийАдрес) Тогда
		СведенияОбАдресе = АдресныйКлассификатор.КодыАдреса(ТекущийАдрес, "Сервис1С");
		КодНалоговогоОргана = СведенияОбАдресе.КодИФНСФЛ;
	КонецЕсли;
	
	Возврат КодНалоговогоОргана;
	
КонецФункции

// Возвращает наименование страниц с данными для документа "Уведомление о спецрежимах налогообложения"
//
// Параметры:
//   ИмяФормы  - Строка
//
// Возвращаемое значение:
//   Структура - ключи: Титульная, Лист2, ЛистА, ЛистБ, ЛистВ
//
Функция НаименованиеСтраниц(ИмяФормы)
	
	Страницы = Новый Структура;
	
	Страницы.Вставить("Титульная", СтрШаблон("%1_Титульная", ИмяФормы));
	Страницы.Вставить("Лист2", СтрШаблон("%1_Лист2", ИмяФормы));
	Страницы.Вставить("ЛистА", СтрШаблон("%1_ЛистА", ИмяФормы));
	Страницы.Вставить("ЛистБ", СтрШаблон("%1_ЛистБ", ИмяФормы));
	Страницы.Вставить("ЛистВ", СтрШаблон("%1_ЛистВ", ИмяФормы));
	
	Возврат Страницы;
	
КонецФункции

Процедура ОбновитьТекущийДокумент(ДокументСсылка, ИмяФормы, ПараметрыЗаявления)
	
	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	ДанныеЗаполнения = ДокументОбъект.ДанныеУведомления.Получить();
	
	Страницы = НаименованиеСтраниц(ИмяФормы);
	
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения.ДанныеУведомления[Страницы.Титульная], ПараметрыЗаявления.Стр01);
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения.ДанныеУведомления[Страницы.Лист2], ПараметрыЗаявления.Стр02);
	ЗаполнитьДанныеЛистаДерева(Страницы.ЛистА, "Листы А", ДанныеЗаполнения, ПараметрыЗаявления.ЛистыА);
	ЗаполнитьДанныеЛистаДерева(Страницы.ЛистБ, "Листы Б", ДанныеЗаполнения, ПараметрыЗаявления.ЛистыБ);
	ЗаполнитьДанныеЛистаДерева(Страницы.ЛистВ, "Листы В", ДанныеЗаполнения, ПараметрыЗаявления.ЛистыВ);
	ДанныеЗаполнения.Вставить("ДанныеПомощникаЗаполнения",ПараметрыЗаявления.ДанныеПомощникаЗаполнения);
	
	ДокументОбъект.ДанныеУведомления = Новый ХранилищеЗначения(ДанныеЗаполнения);
	ДокументОбъект.ДатаПодписи = ПараметрыЗаявления.ДатаСоставления;
	
	ДокументОбъект.ПодписантФамилия  = ПараметрыЗаявления.ПодписантФамилия;
	ДокументОбъект.ПодписантИмя      = ПараметрыЗаявления.ПодписантИмя;
	ДокументОбъект.ПодписантОтчество = ПараметрыЗаявления.ПодписантОтчество;
	ДокументОбъект.РегистрацияВИФНС  = ПараметрыЗаявления.РегистрацияВИФНС;
	
	ДокументОбъект.Записать();
	
КонецПроцедуры

//Возвращает сведения об индивидуальном предпринимателе.
//
// Параметры:
//   Организация     - СправочникСсылка.Организации
//   ДатаСоставления - Дата
//
// Возвращаемое значение:
//   Структура - ключи:
//    - ИНН
//    - ФИО
//    - ТелСлуж
//    - ФамилияИП
//    - ИмяИП
//    - ОтчествоИП
//    - КодНО
//    - ОГРН
//    - АдрЮР_XML
//
Функция СведенияОбИндивидуальномПредпринимателе(Организация, ДатаСоставления)
	
	СтрокаСведений = "ИННФЛ,ФИО,ТелСлуж,ФамилияИП,ИмяИП,ОтчествоИП,КодНО,ОГРН,АдрЮР_XML";
	Возврат РегламентированнаяОтчетностьВызовСервера.ПолучитьСведенияОбОрганизации(
		Организация, ДатаСоставления, СтрокаСведений);
	
КонецФункции

// Возвращает таблицу видов деятельности, попадающих под патентную систему налогооблажения
//
// Возвращаемое значение:
//   ТаблицаЗначений - ключи: Код, Наименование, КодОКВЭД2.
//
Функция ТаблицаВидовДеятельностиПСН()
	
	МакетПСН = Обработки.ПомощникЗаполненияЗаявленияНаПолучениеПатента.ПолучитьМакет("СоответствиеВидовДеятельностиОКВЭД2иПСН");
	СтрокаXML = МакетПСН.ПолучитьТекст();
	Возврат ОбщегоНазначения.ЗначениеИзСтрокиXML(СтрокаXML);
	
КонецФункции

#КонецОбласти

#КонецЕсли

