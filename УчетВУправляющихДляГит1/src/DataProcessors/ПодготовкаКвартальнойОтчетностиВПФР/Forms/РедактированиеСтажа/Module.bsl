
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	ИменаДополняемыхТаблиц = Новый Массив;
	ИменаДополняемыхТаблиц.Добавить("ЗаписиОСтаже");
	
	ПерсонифицированныйУчетФормы.ДобавитьЗаголовкиКПолямТаблицФормы(ЭтаФорма, ИменаДополняемыхТаблиц, ОписаниеКолонокЗаголовковТаблицФормы());
	
	УстановитьУсловноеОформление();
	
	Организация = Параметры.Организация;
	ОтчетныйПериод = Параметры.ОтчетныйПериод;
	ОтчетныйПериодСтрокой = ПерсонифицированныйУчетКлиентСервер.ПредставлениеОтчетногоПериода(ОтчетныйПериод);
	
	ЗаполнитьСписокДокументовИзПараметраФормы();
	УстановитьРедактируемыйПериодПоУмолчанию();
	
	ЗаполнитьСведенияОСтаже();
	
	УстановитьДоступностьКомандОтменыИсправлений(ЭтаФорма);
		
	ЗарплатаКадрыОтображениеОшибок.ХраненияОшибокВДанныхФормыДополнитьФорму(ЭтотОбъект);
	ЗарплатаКадрыОтображениеОшибок.ИндикацияОшибокДополнитьФорму(ЭтотОбъект, ОписаниеЭлементовСИндикациейОшибок());
	
	ПерсонифицированныйУчетФормы.УстановитьКраткоеОтображениеКатегорииВТаблицах(ЭтотОбъект, "ЗаписиОСтаже.КатегорияЗастрахованныхЛиц", "ЗаписиОСтажеКатегорияЗастрахованныхЛиц");
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьИЗакрыть", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтчетныйПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = Новый СписокЗначений;
	
	Для Каждого КлючЗначение Из ДокументыПоПериодам Цикл
		ДанныеВыбора.Добавить(КлючЗначение.Ключ, ПредставлениеПериодаОтчетности(КлючЗначение.Ключ, ОтчетныйПериод));		
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетныйПериодСтрокойОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение = ТекущийПериод Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийПериод = ВыбранноеЗначение;
	ТекущийПериодСтрокой = ПредставлениеПериодаОтчетности(ТекущийПериод, ОтчетныйПериод);
	
	Если Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		
		Оповещение = Новый ОписаниеОповещения("ОтчетныйПериодСтрокойОбработкаВыбораЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Иначе 
		ОтчетныйПериодСтрокойОбработкаВыбораЗавершение(Неопределено, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетныйПериодСтрокойОбработкаВыбораЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		МодифицированныеДокументы = Новый Массив;
		СохранитьДанные(МодифицированныеДокументы);
	КонецЕсли;
	
	Модифицированность = Ложь;
	
	ЗаполнитьСведенияОСтаже();

КонецПроцедуры

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаписиОСтаже

&НаКлиенте
Процедура ЗаписиОСтажеПриАктивизацииСтроки(Элемент)
	УстановитьДоступностьКомандОтменыИсправлений(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписиОСтажеПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗаписиОСтажеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ДанныеТекущейСтроки = Элементы.ЗаписиОСтаже.ТекущиеДанные;
		
	Если ДанныеТекущейСтроки <> Неопределено
		И ДанныеТекущейСтроки.ТипСтроки <> "Группировка" Тогда
		
		ОткрытьФормуРедактированияЗаписиСтажа(ДанныеТекущейСтроки);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписиОСтажеПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ДанныеТекущейСтроки = Элементы.ЗаписиОСтаже.ТекущиеДанные;
	
	Если ДанныеТекущейСтроки = Неопределено Тогда
		Отказ = Истина;
		ТекстПредупреждения = НСтр("ru = 'В форме редактирования стажа отсутствуют сотрудники. Добавление сотрудников в комплект осуществляется через форму редактирования комплекта.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	Если ДанныеТекущейСтроки.ТипСтроки = "Группировка" Тогда
		Родитель = ДанныеТекущейСтроки;
	Иначе
		Родитель = РодительСтроки(ЗаписиОСтаже, ДанныеТекущейСтроки);
	КонецЕсли;
	
	ОткрытьФормуРедактированияЗаписиСтажа(Родитель);
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписиОСтажеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ЗавершитьРедактированиеСтрокиСтажа(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписиОСтажеПередУдалением(Элемент, Отказ)
	ДанныеТекущейСтроки = Элементы.ЗаписиОСтаже.ТекущиеДанные;
	
	Если ДанныеТекущейСтроки <> Неопределено
		И ДанныеТекущейСтроки.ТипСтроки = "Группировка" Тогда
		ТекстПредупреждения = НСтр("ru = 'Для удаления сотрудника из документа необходимо воспользоваться формой редактирования комплекта. В данной форме можно удалить только записи о стаже.'");
		
		ПоказатьПредупреждение(, ТекстПредупреждения);
		
		Отказ = Истина;	
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Сохранить(Команда)
	ВыбратьИЗакрыть();
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	Модифицированность = Ложь;
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИсправленияПоСотруднику(Команда)
	ОтменитьИсправленияСтажа(Элементы.ЗаписиОСтаже.ТекущиеДанные.Сотрудник);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИсправленияПоВсемСотрудникам(Команда)
	ОтменитьИсправленияСтажа();	
КонецПроцедуры

&НаКлиенте
Процедура Проверить(Команда)
	ПроверитьЗаписиОСтаже();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыбратьИЗакрыть(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	МодифицированныеДокументы = Новый Массив;
	СохранитьДанные(МодифицированныеДокументы);
	
	Оповестить("РедактированиеСтажаКомплекта", МодифицированныеДокументы);
	Модифицированность = Ложь;
	Закрыть();
КонецПроцедуры

#Область ИнициализацияФормы

&НаСервере
Процедура УстановитьУсловноеОформление()
	ОписаниеКолонокЗаголовков = ОписаниеКолонокЗаголовковТаблицыЗаписиОСтаже();
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаШапкиОтчета);
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	ИменаЭлементовПолейСтажа = ИменаЭлементовПолейСтажа();
	
	Для Каждого ЭлементОтображенияСтажа Из ИменаЭлементовПолейСтажа Цикл
		ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ЭлементОтображенияСтажа);
		
		ИмяЭлементаОтображенияЗаголовка = ПерсонифицированныйУчетФормы.ИмяЭлементаОтображенияЗаголовкаПоляТаблицы(ЭлементОтображенияСтажа, ОписаниеКолонокЗаголовков);
		
		Если ИмяЭлементаОтображенияЗаголовка <> Неопределено Тогда
			ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлементаОтображенияЗаголовка);		
		КонецЕсли;
	КонецЦикла;	
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаписиОСтаже.ТипСтроки");
	ЭлементОтбора.ПравоеЗначение = "Группировка";
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	
	ЭлементОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	ИменаЭлементовПолейСтажа = ИменаСкрываемыхЭлементовПолейСтажа();
	
	Для Каждого ЭлементОтображенияСтажа Из ИменаЭлементовПолейСтажа Цикл
		ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ЭлементОтображенияСтажа);
		
		ИмяЭлементаОтображенияЗаголовка = ПерсонифицированныйУчетФормы.ИмяЭлементаОтображенияЗаголовкаПоляТаблицы(ЭлементОтображенияСтажа, ОписаниеКолонокЗаголовков);
		
		Если ИмяЭлементаОтображенияЗаголовка <> Неопределено Тогда
			ОформляемоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяЭлементаОтображенияЗаголовка);		
		КонецЕсли;
	КонецЦикла;	
	
	ЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ЗаписиОСтаже.ТипСтроки");
	ЭлементОтбора.ПравоеЗначение = "Группировка";
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;

КонецПроцедуры	

&НаСервере
Функция ИменаЭлементовПолейСтажа()
	ОформляемыеПоляСтажа = Новый Массив;
	
	ОформляемыеПоляСтажа.Добавить("ЗаписиОСтажеНомерОсновнойЗаписи");
	ОформляемыеПоляСтажа.Добавить("ЗаписиОСтажеНомерДополнительнойЗаписи");
	ОформляемыеПоляСтажа.Добавить("ЗаписиОСтажеДатаНачалаПериода");
	ОформляемыеПоляСтажа.Добавить("ЗаписиОСтажеДатаОкончанияПериода");	
	ОформляемыеПоляСтажа.Добавить("ЗаписиОСтажеТерриториальныеУсловия");
	ОформляемыеПоляСтажа.Добавить("ЗаписиОСтажеПараметрТерриториальныхУсловий");	
	ОформляемыеПоляСтажа.Добавить("ЗаписиОСтажеОсобыеУсловияТруда");
	ОформляемыеПоляСтажа.Добавить("ЗаписиОСтажеКодПозицииСписка");
	ОформляемыеПоляСтажа.Добавить("ЗаписиОСтажеОснованиеИсчисляемогоСтажа");
	ОформляемыеПоляСтажа.Добавить("ЗаписиОСтажеТретийПараметрИсчисляемогоСтажа");
	ОформляемыеПоляСтажа.Добавить("ЗаписиОСтажеОснованиеВыслугиЛет");
	ОформляемыеПоляСтажа.Добавить("ЗаписиОСтажеПервыйПараметрВыслугиЛет");	
	ОформляемыеПоляСтажа.Добавить("ЗаписиОСтажеВторойПараметрВыслугиЛет");
	ОформляемыеПоляСтажа.Добавить("ЗаписиОСтажеТретийПараметрВыслугиЛет");	
	ОформляемыеПоляСтажа.Добавить("ЗаписиОСтажеПервыйПараметрИсчисляемогоСтажа");
	ОформляемыеПоляСтажа.Добавить("ЗаписиОСтажеВторойПараметрИсчисляемогоСтажа");

	Возврат ОформляемыеПоляСтажа;
КонецФункции

&НаСервере
Функция ИменаСкрываемыхЭлементовПолейСтажа()
	ОформляемыеПоляСтажа = Новый Массив;
	
	ОформляемыеПоляСтажа.Добавить("ЗаписиОСтажеНомерОсновнойЗаписи");
	ОформляемыеПоляСтажа.Добавить("ЗаписиОСтажеНомерДополнительнойЗаписи");
	ОформляемыеПоляСтажа.Добавить("ЗаписиОСтажеДатаНачалаПериода");
	ОформляемыеПоляСтажа.Добавить("ЗаписиОСтажеДатаОкончанияПериода");	
	ОформляемыеПоляСтажа.Добавить("ЗаписиОСтажеТерриториальныеУсловия");
	ОформляемыеПоляСтажа.Добавить("ЗаписиОСтажеПараметрТерриториальныхУсловий");	
	ОформляемыеПоляСтажа.Добавить("ЗаписиОСтажеОсобыеУсловияТруда");
	ОформляемыеПоляСтажа.Добавить("ЗаписиОСтажеТретийПараметрИсчисляемогоСтажа");
	ОформляемыеПоляСтажа.Добавить("ЗаписиОСтажеПервыйПараметрВыслугиЛет");	
	ОформляемыеПоляСтажа.Добавить("ЗаписиОСтажеТретийПараметрВыслугиЛет");	
	ОформляемыеПоляСтажа.Добавить("ЗаписиОСтажеВторойПараметрИсчисляемогоСтажа");

	Возврат ОформляемыеПоляСтажа;
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокДокументовИзПараметраФормы()
	Если ТипЗнч(Параметры.ДокументыПоПериодам) = Тип("Соответствие") Тогда
		ДокументыПоПериодам = Новый ФиксированноеСоответствие(Параметры.ДокументыПоПериодам); 
	Иначе
		ДокументыПоПериодам = Новый ФиксированноеСоответствие(Новый Соответствие);
	КонецЕсли;	
КонецПроцедуры	

&НаСервере
Процедура УстановитьРедактируемыйПериодПоУмолчанию()
	Если ДокументыПоПериодам.Получить(ОтчетныйПериод) <> Неопределено
		Или ДокументыПоПериодам.Количество() = 0 Тогда
		
		ТекущийПериод = ОтчетныйПериод;
	Иначе
		Для Каждого КлючЗначение Из ДокументыПоПериодам Цикл
			ТекущийПериод = КлючЗначение.Ключ;
			Прервать;
		КонецЦикла;			
	КонецЕсли;	
	
	ТекущийПериодСтрокой = ПредставлениеПериодаОтчетности(ТекущийПериод, ОтчетныйПериод);
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеПериодаОтчетности(ПериодОтчетности, ПериодИсходныхСведений)
	ПредставлениеПериода = ПерсонифицированныйУчетКлиентСервер.ПредставлениеОтчетногоПериода(ПериодОтчетности, Истина);
	
	Если ПериодОтчетности = ПериодИсходныхСведений Тогда
		Возврат ПредставлениеПериода + "(исх.)";	
	Иначе
		Возврат ПредставлениеПериода + "(корр.)";	
	КонецЕсли;	
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьКомандОтменыИсправлений(Форма)	
	
	Идентификатор = Форма.Элементы.ЗаписиОСтаже.ТекущаяСтрока;
	
	Если Идентификатор = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы, "ЗаписиОСтажеОтменитьИсправленияПоСотруднику", "Доступность", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы, "ЗаписиОСтажеОтменитьИсправленияПоВсемСотрудникам", "Доступность", Ложь);
		Возврат;
	КонецЕсли;	
	
	ДанныеТекущейСтроки = Форма.ЗаписиОСтаже.НайтиПоИдентификатору(Идентификатор);
	
	Если ДанныеТекущейСтроки <> Неопределено И ДанныеТекущейСтроки.ФиксСтаж Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы, "ЗаписиОСтажеОтменитьИсправленияПоСотруднику", "Доступность", Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
			Форма.Элементы, "ЗаписиОСтажеОтменитьИсправленияПоСотруднику", "Доступность", Ложь);
	КонецЕсли;
		
КонецПроцедуры	

&НаСервере
Процедура ПроверитьЗаписиОСтаже()
	ТаблицаСтажа = РеквизитФормыВЗначение("ЗаписиОСтаже", Тип("ТаблицаЗначений"));
	
	ТаблицаСтажа.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТаблицаСтажа.Колонки.Добавить("НомерСтрокиСотрудник", Новый ОписаниеТипов("Число"));
	
	НомерСтроки = 0;
	НомерСтрокиСотрудник = 0;
	Для Каждого СтрокаСтажа Из ТаблицаСтажа Цикл
		НомерСтроки = НомерСтроки + 1;
		Если СтрокаСтажа.ТипСтроки = "Группировка" Тогда
			НомерСтрокиСотрудник = НомерСтрокиСотрудник + 1;			
		КонецЕсли;	
		
		СтрокаСтажа.НомерСтроки = НомерСтроки;
		СтрокаСтажа.НомерСтрокиСотрудник = НомерСтрокиСотрудник;
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаСтажа", ТаблицаСтажа);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСтажа.Сотрудник,
	|	ТаблицаСтажа.НомерСтрокиСотрудник,
	|	ТаблицаСтажа.НомерСтроки,
	|	ТаблицаСтажа.НомерОсновнойЗаписи,
	|	ТаблицаСтажа.НомерДополнительнойЗаписи,
	|	ТаблицаСтажа.ДатаНачалаПериода,
	|	ТаблицаСтажа.ДатаОкончанияПериода,
	|	ТаблицаСтажа.ОсобыеУсловияТруда,
	|	ТаблицаСтажа.КодПозицииСписка,
	|	ТаблицаСтажа.ОснованиеИсчисляемогоСтажа,
	|	ТаблицаСтажа.ПервыйПараметрИсчисляемогоСтажа,
	|	ТаблицаСтажа.ВторойПараметрИсчисляемогоСтажа,
	|	ТаблицаСтажа.ТретийПараметрИсчисляемогоСтажа,
	|	ТаблицаСтажа.ОснованиеВыслугиЛет,
	|	ТаблицаСтажа.ПервыйПараметрВыслугиЛет,
	|	ТаблицаСтажа.ВторойПараметрВыслугиЛет,
	|	ТаблицаСтажа.ТретийПараметрВыслугиЛет,
	|	ТаблицаСтажа.ТерриториальныеУсловия,
	|	ТаблицаСтажа.ПараметрТерриториальныхУсловий,
	|	ТаблицаСтажа.ФиксСтаж,
	|	ТаблицаСтажа.ТипСтроки
	|ПОМЕСТИТЬ ВТТаблицаСтажа
	|ИЗ
	|	&ТаблицаСтажа КАК ТаблицаСтажа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСтажа.Сотрудник,
	|	ТаблицаСтажа.НомерОсновнойЗаписи,
	|	ТаблицаСтажа.НомерДополнительнойЗаписи,
	|	ТаблицаСтажа.ДатаНачалаПериода,
	|	ТаблицаСтажа.ДатаОкончанияПериода,
	|	ТаблицаСтажа.ОсобыеУсловияТруда,
	|	ТаблицаСтажа.КодПозицииСписка,
	|	ТаблицаСтажа.ОснованиеИсчисляемогоСтажа,
	|	ТаблицаСтажа.ПервыйПараметрИсчисляемогоСтажа,
	|	ТаблицаСтажа.ВторойПараметрИсчисляемогоСтажа,
	|	ТаблицаСтажа.ТретийПараметрИсчисляемогоСтажа,
	|	ТаблицаСтажа.ОснованиеВыслугиЛет,
	|	ТаблицаСтажа.ПервыйПараметрВыслугиЛет,
	|	ТаблицаСтажа.ВторойПараметрВыслугиЛет,
	|	ТаблицаСтажа.ТретийПараметрВыслугиЛет,
	|	ТаблицаСтажа.ТерриториальныеУсловия,
	|	ТаблицаСтажа.ПараметрТерриториальныхУсловий,
	|	ТаблицаСтажа.ФиксСтаж,
	|	ТаблицаСтажа.ТипСтроки,
	|	ТаблицаСтажа.НомерСтрокиСотрудник,
	|	ТаблицаСтажа.НомерСтроки
	|ПОМЕСТИТЬ ВТЗаписиОСтаже
	|ИЗ
	|	ВТТаблицаСтажа КАК ТаблицаСтажа
	|ГДЕ
	|	ТаблицаСтажа.ТипСтроки <> ""Группировка""";
	
	Запрос.Выполнить();
	Отказ = Ложь;
	
	Если ТекущийПериод >= '20140101' Тогда
		ПерсонифицированныйУчет.ПроверитьЗаписиОСтаже(Запрос.МенеджерВременныхТаблиц, Справочники.КомплектыОтчетностиПерсучета.ПустаяСсылка(), ТекущийПериод, Отказ, Истина, Истина, Истина); 	
	Иначе
		ПерсонифицированныйУчет.ПроверитьЗаписиОСтаже(Запрос.МенеджерВременныхТаблиц, Справочники.КомплектыОтчетностиПерсучета.ПустаяСсылка(), ТекущийПериод, Отказ, Истина);	
	КонецЕсли;	

	ОписаниеСвязиДанных = ЗарплатаКадрыОтображениеОшибок.ОписаниеСвязиДанных();
	
	ЗарплатаКадрыОтображениеОшибок.ПослеПроверкиЗаполненияВФорме(
		ЭтотОбъект,
		ЭтотОбъект,
		ОписаниеСвязиДанных);
	
КонецПроцедуры	

#КонецОбласти

#Область ОтменаИсправлений

&НаСервере
Процедура СохранитьДанные(МодифицированныеДокументы)
	ТаблицаСтажа = РеквизитФормыВЗначение("ЗаписиОСтаже", Тип("ТаблицаЗначений"));
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаСтажа", ТаблицаСтажа);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаСтажа.Ссылка КАК Ссылка,
	|	ТаблицаСтажа.Сотрудник,
	|	ТаблицаСтажа.КатегорияЗастрахованныхЛиц,
	|	ТаблицаСтажа.ТипДоговора,
	|	ТаблицаСтажа.НомерОсновнойЗаписи,
	|	ТаблицаСтажа.НомерДополнительнойЗаписи,
	|	ТаблицаСтажа.ДатаНачалаПериода,
	|	ТаблицаСтажа.ДатаОкончанияПериода,
	|	ТаблицаСтажа.ОсобыеУсловияТруда,
	|	ТаблицаСтажа.КодПозицииСписка,
	|	ТаблицаСтажа.ОснованиеИсчисляемогоСтажа,
	|	ТаблицаСтажа.ПервыйПараметрИсчисляемогоСтажа,
	|	ТаблицаСтажа.ВторойПараметрИсчисляемогоСтажа,
	|	ТаблицаСтажа.ТретийПараметрИсчисляемогоСтажа,
	|	ТаблицаСтажа.ОснованиеВыслугиЛет,
	|	ТаблицаСтажа.ПервыйПараметрВыслугиЛет,
	|	ТаблицаСтажа.ВторойПараметрВыслугиЛет,
	|	ТаблицаСтажа.ТретийПараметрВыслугиЛет,
	|	ТаблицаСтажа.ТерриториальныеУсловия,
	|	ТаблицаСтажа.ПараметрТерриториальныхУсловий,
	|	ТаблицаСтажа.ФиксСтаж,
	|	ТаблицаСтажа.Модифицированность,
	|	ТаблицаСтажа.ИдентификаторСтрокиРодителя,
	|	ТаблицаСтажа.ИдентификаторСтрокиСтажа,
	|	ТаблицаСтажа.ТипСтроки
	|ПОМЕСТИТЬ ВТЗаписиСтажа
	|ИЗ
	|	&ТаблицаСтажа КАК ТаблицаСтажа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаписиСтажа.Сотрудник,
	|	ЗаписиСтажа.КатегорияЗастрахованныхЛиц,
	|	ЗаписиСтажа.ТипДоговора,
	|	ЗаписиСтажа.Ссылка,
	|	ЗаписиСтажа.ИдентификаторСтрокиСтажа,
	|	ЗаписиСтажа.ФиксСтаж
	|ПОМЕСТИТЬ ВТМодифицированныеЗаписи
	|ИЗ
	|	ВТЗаписиСтажа КАК ЗаписиСтажа
	|ГДЕ
	|	ЗаписиСтажа.Модифицированность
	|	И ЗаписиСтажа.ТипСтроки = ""Группировка""
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МодифицированныеЗаписи.Сотрудник КАК Сотрудник,
	|	МодифицированныеЗаписи.Ссылка КАК Ссылка,
	|	ЗаписиСтажа.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
	|	ЗаписиСтажа.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
	|	ЗаписиСтажа.ДатаНачалаПериода,
	|	ЗаписиСтажа.ДатаОкончанияПериода,
	|	ЗаписиСтажа.ОсобыеУсловияТруда,
	|	ЗаписиСтажа.КодПозицииСписка,
	|	ЗаписиСтажа.ОснованиеИсчисляемогоСтажа,
	|	ЗаписиСтажа.ПервыйПараметрИсчисляемогоСтажа,
	|	ЗаписиСтажа.ВторойПараметрИсчисляемогоСтажа,
	|	ЗаписиСтажа.ТретийПараметрИсчисляемогоСтажа,
	|	ЗаписиСтажа.ОснованиеВыслугиЛет,
	|	ЗаписиСтажа.ПервыйПараметрВыслугиЛет,
	|	ЗаписиСтажа.ВторойПараметрВыслугиЛет,
	|	ЗаписиСтажа.ТретийПараметрВыслугиЛет,
	|	ЗаписиСтажа.ТерриториальныеУсловия,
	|	ЗаписиСтажа.ПараметрТерриториальныхУсловий,
	|	МодифицированныеЗаписи.ФиксСтаж,
	|	ВЫБОР
	|		КОГДА ЗаписиСтажа.Сотрудник ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьДетальныеЗаписи
	|ИЗ
	|	ВТМодифицированныеЗаписи КАК МодифицированныеЗаписи
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаписиСтажа КАК ЗаписиСтажа
	|		ПО МодифицированныеЗаписи.ИдентификаторСтрокиСтажа = ЗаписиСтажа.ИдентификаторСтрокиРодителя
	|			И (ЗаписиСтажа.ТипСтроки <> ""Группировка"")
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	Сотрудник,
	|	НомерОсновнойЗаписи,
	|	НомерДополнительнойЗаписи";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	Пока Выборка.СледующийПоЗначениюПоля("Ссылка") Цикл
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Пока Выборка.СледующийПоЗначениюПоля("Сотрудник") Цикл
			СтруктураПоиска = Новый Структура("Сотрудник", Выборка.Сотрудник);
			ЗаписиСтажаПоСотруднику = ДокументОбъект.ЗаписиОСтаже.НайтиСтроки(СтруктураПоиска);
			
			СтрокаПоСотруднику = ДокументОбъект.Сотрудники.Найти(Выборка.Сотрудник, "Сотрудник");
			
			Если СтрокаПоСотруднику <> Неопределено Тогда
				СтрокаПоСотруднику.ФиксСтаж = Выборка.ФиксСтаж;
			КонецЕсли;	
			
			Для Каждого УдаляемаяСтрока Из ЗаписиСтажаПоСотруднику Цикл
				ДокументОбъект.ЗаписиОСтаже.Удалить(УдаляемаяСтрока);
			КонецЦикла;	
			
			Пока Выборка.Следующий() Цикл
				Если Выборка.ЕстьДетальныеЗаписи Тогда
					НоваяСтрока = ДокументОбъект.ЗаписиОСтаже.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;		
		
		ДокументОбъект.Записать();
		
		МодифицированныеДокументы.Добавить(Выборка.Ссылка);
	КонецЦикла;	
	ЗафиксироватьТранзакцию();
	
	Модифицированность = Ложь;
КонецПроцедуры	

#КонецОбласти

#Область ОтменаИсправлений

&НаСервере
Процедура ОтменитьИсправленияСтажа(Сотрудник = Неопределено)
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ТипСтроки", "Группировка");
	СтруктураПоиска.Вставить("ФиксСтаж", Истина);
	
	Если Сотрудник <> Неопределено Тогда
		СтруктураПоиска.Вставить("Сотрудник", Сотрудник);
	КонецЕсли;	
	
	СтрокиРодителиПоСотрудникам = ЗаписиОСтаже.НайтиСтроки(СтруктураПоиска);
	
	СписокСотрудников = Новый Массив;
	
	Для Каждого Родитель Из СтрокиРодителиПоСотрудникам Цикл
		СписокСотрудников.Добавить(Родитель.Сотрудник);
		
		УдалитьПодчиненныеСтроки(ЗаписиОСтаже, Родитель);
	КонецЦикла;	
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПараметрыПолученияСтажа = ПерсонифицированныйУчет.ПараметрыДляСоздатьВТДанныеСтажаПФР();
	Если ТекущийПериод >= '20140101' Тогда
		ПараметрыПолученияСтажа.ВыделятьСтажПоДоговорамГПХ = Истина;		
	КонецЕсли;	
	
	ПараметрыОтбора = ПерсонифицированныйУчет.СтруктураОтбораДанныхДляКвартальнойОтчетности();
	ПараметрыОтбора.СписокФизическихЛиц = СписокСотрудников;
	
	ПерсонифицированныйУчет.СоздатьВТДанныеСтажаПФР(МенеджерВременныхТаблиц, Организация, ТекущийПериод, ПараметрыПолученияСтажа, ПараметрыОтбора);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокСотрудников", СписокСотрудников);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеСтажаПФР.ФизическоеЛицо КАК Сотрудник,
	|	ДанныеСтажаПФР.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|	ДанныеСтажаПФР.ДатаОкончанияПериода,
	|	ДанныеСтажаПФР.ОсобыеУсловияТруда,
	|	ДанныеСтажаПФР.КодПозицииСписка,
	|	ДанныеСтажаПФР.ОснованиеИсчисляемогоСтажа,
	|	ДанныеСтажаПФР.ПервыйПараметрИсчисляемогоСтажа,
	|	ДанныеСтажаПФР.ВторойПараметрИсчисляемогоСтажа,
	|	ДанныеСтажаПФР.ТретийПараметрИсчисляемогоСтажа,
	|	ДанныеСтажаПФР.ОснованиеВыслугиЛет,
	|	ДанныеСтажаПФР.ПервыйПараметрВыслугиЛет,
	|	ДанныеСтажаПФР.ВторойПараметрВыслугиЛет,
	|	ДанныеСтажаПФР.ТретийПараметрВыслугиЛет,
	|	ДанныеСтажаПФР.ТерриториальныеУсловия,
	|	ДанныеСтажаПФР.ПараметрТерриториальныхУсловий,
	|	ДанныеСтажаПФР.ФиксСтаж,
	|	ДанныеСтажаПФР.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|	ДанныеСтажаПФР.ТипДоговора КАК ТипДоговора,
	|	0 КАК НомерОсновнойЗаписи,
	|	0 КАК НомерДополнительнойЗаписи
	|ИЗ
	|	ВТДанныеСтажаПФР КАК ДанныеСтажаПФР
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДанныеСтажаПФР.ФизическоеЛицо,
	|	КатегорияЗастрахованныхЛиц,
	|	ТипДоговора,
	|	ДатаНачалаПериода";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Для Каждого Родитель Из СтрокиРодителиПоСотрудникам Цикл
		Родитель.ФиксСтаж = Ложь;
		Родитель.Модифицированность = Истина;
		
		Выборка.Сбросить();
		
		СтруктураПоиска = Новый Структура("Сотрудник, КатегорияЗастрахованныхЛиц, ТипДоговора", 
									Родитель.Сотрудник, 
									Родитель.КатегорияЗастрахованныхЛиц, 
									Родитель.ТипДоговора);
									
		ИндексСтрокиРодителя = ЗаписиОСтаже.Индекс(Родитель);
		
		Если ИндексСтрокиРодителя = ЗаписиОСтаже.Количество() - 1 Тогда
			ИндексДобавляемойСтроки = Неопределено;
		Иначе
			ИндексДобавляемойСтроки = ИндексСтрокиРодителя + 1;
		КонецЕсли;	
										
		Если Выборка.НайтиСледующий(СтруктураПоиска) Тогда
			ДобавленныеСтроки = Новый Массив;
			Выборка.СледующийПоЗначениюПоля("Сотрудник");
			Выборка.СледующийПоЗначениюПоля("КатегорияЗастрахованныхЛиц");
			Выборка.СледующийПоЗначениюПоля("ТипДоговора");
			
			Пока Выборка.Следующий() Цикл 
				СтрокаДетальнойЗаписи = ДобавитьСтрокуДетальнойЗаписиПоСтажу(ЗаписиОСтаже, Родитель, Выборка, ИндексДобавляемойСтроки);
				
				Если ИндексДобавляемойСтроки <> Неопределено Тогда
					ИндексДобавляемойСтроки = ИндексДобавляемойСтроки + 1;
				КонецЕсли;	
				
				ДобавленныеСтроки.Добавить(СтрокаДетальнойЗаписи);
				
				ПерсонифицированныйУчетКлиентСервер.УстановитьЗаголовкиВСтрокеТаблицы(ЭтотОбъект, СтрокаДетальнойЗаписи, ОписаниеКолонокЗаголовковТаблицыЗаписиОСтаже());
			КонецЦикла;
			
			ПронумероватьЗаписиСтажа(ДобавленныеСтроки);
		КонецЕсли;	
	КонецЦикла;	
	
	Если Сотрудник <> Неопределено Тогда
		Элементы.ЗаписиОСтаже.ТекущаяСтрока = СтрокиРодителиПоСотрудникам[0].ПолучитьИдентификатор();
	КонецЕсли;	
КонецПроцедуры	

#КонецОбласти

#Область РедактированиеСтрокСтажа

&НаКлиенте
Процедура ОткрытьФормуРедактированияЗаписиСтажа(ДанныеТекущейСтроки)
	Если ДанныеТекущейСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Ложь;
	ПараметрыДляФормыРедактированияЗаписи = ПерсонифицированныйУчетКлиент.ПараметрыСтажаДляОткрытияФормыРедактированияЗаписиСтажа();
	Если ДанныеТекущейСтроки.ТипСтроки = "Группировка" Тогда
		Родитель = ДанныеТекущейСтроки;
		НоваяСтрока = Истина;
		ПараметрыДляФормыРедактированияЗаписи.ИндексСтроки = ЗаписиОСтаже.Индекс(Родитель);
	Иначе 
		Родитель = РодительСтроки(ЗаписиОСтаже, ДанныеТекущейСтроки);
		ПараметрыДляФормыРедактированияЗаписи.ИндексСтроки = ЗаписиОСтаже.Индекс(ДанныеТекущейСтроки);
	КонецЕсли;	
	
	ДанныеТекущейЗаписиСтажа = ДанныеЗаписиСтажаИзСтрокТаблицы(ЗаписиОСтаже, Родитель, ДанныеТекущейСтроки);
		
	ЗаполнитьЗначенияСвойств(ПараметрыДляФормыРедактированияЗаписи, ДанныеТекущейЗаписиСтажа); 
	
	ПараметрыДляФормыРедактированияЗаписи.НоваяСтрока = НоваяСтрока;
	ПараметрыДляФормыРедактированияЗаписи.ФиксСтаж = ПараметрыДляФормыРедактированияЗаписи.ФиксСтаж Или ПараметрыДляФормыРедактированияЗаписи.НоваяСтрока;

	ИндексТекущейСтроки = ЗаписиОСтаже.Индекс(ДанныеТекущейСтроки);
	
	ЗначенияРеквизитовХраненияОшибок = ОшибкиИзДанныхСтроки(ИндексТекущейСтроки);
	
	ПараметрыДляФормыРедактированияЗаписи.ЗначенияРеквизитовХраненияОшибок = ЗначенияРеквизитовХраненияОшибок;

	Если ТекущийПериод >= '20140101' Тогда
		ИспользоватьНовыйКлассификаторПараметровСтажа = Истина;
	Иначе
		ИспользоватьНовыйКлассификаторПараметровСтажа = Ложь;
	КонецЕсли;	
	
	ПерсонифицированныйУчетКлиент.ОткрытьФормуВводаЗаписейОСтаже(
		ПараметрыДляФормыРедактированияЗаписи, 
		ТолькоПросмотр, 
		Элементы.ЗаписиОСтаже, 
		Истина, 
		ИспользоватьНовыйКлассификаторПараметровСтажа);	
		
КонецПроцедуры	
	
&НаСервере
Функция ОшибкиИзДанныхСтроки(ИндексСтроки)
	ПутьКДанным = "ЗаписиОСтаже[" + Формат(ИндексСтроки, "ЧН=0; ЧГ=") + "]"; 
	
	Возврат ЗарплатаКадрыОтображениеОшибок.СообщениеОбОшибкахДляПередачиВФормуРедактированияСтрокиТаблицыФормы(ЭтотОбъект, ПутьКДанным);	
КонецФункции	

&НаКлиенте
Процедура ЗавершитьРедактированиеСтрокиСтажа(РедактируемыеДанные)
	Если РедактируемыеДанные.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если РедактируемыеДанные.НоваяСтрока Тогда
		Родитель = ЗаписиОСтаже[РедактируемыеДанные.ИндексСтроки];
	Иначе 
		Родитель = РодительСтроки(ЗаписиОСтаже, ЗаписиОСтаже[РедактируемыеДанные.ИндексСтроки]);
	КонецЕсли;	
	
	// Если данные стажа ранее не были зафиксированы и при редактировании были изменены,
	// тогда зафиксируем строки стажа в целом по сотруднику.
	ФиксироватьДанныеСтажаВЦеломПоСотруднику = РедактируемыеДанные.ФиксСтаж И Не Родитель.фиксСтаж;
	
	Если РедактируемыеДанные.Модифицированность Тогда
		Родитель.Модифицированность = Истина;
		Модифицированность = Истина;
	КонецЕсли;	
	
	ПодчиненныеСтроки = ПодчиненныеСтроки(ЗаписиОСтаже, Родитель);
	
	Если ЗначениеЗаполнено(РедактируемыеДанные.НомерДополнительнойЗаписи) Тогда
		НовыйИндексСтроки = ИндексСтрокиПоНомеруЗаписи(
								ЗаписиОСтаже, 
								Родитель, 
								ПодчиненныеСтроки,
								РедактируемыеДанные.НомерОсновнойЗаписи, 
								РедактируемыеДанные.НомерДополнительнойЗаписи);	
	Иначе 
		Если ТекущийПериод >= '20140101' Тогда
			ТретийПараметрСтажа = РедактируемыеДанные.ТретийПараметрИсчисляемогоСтажа;
		Иначе
			ТретийПараметрСтажа = Неопределено;
		КонецЕсли;	
		
		НовыйИндексСтроки = ИндексСтрокиПоДате(
								ЗаписиОСтаже, 
								Родитель, 
								ПодчиненныеСтроки,
								РедактируемыеДанные.ДатаНачалаПериода,
								ТретийПараметрСтажа);								
	КонецЕсли;	
	
	Если РедактируемыеДанные.НоваяСтрока Тогда
		СтрокаДетальнойЗаписи = ДобавитьСтрокуДетальнойЗаписиПоСтажу(ЗаписиОСтаже, Родитель, РедактируемыеДанные, НовыйИндексСтроки);
		ПерсонифицированныйУчетКлиентСервер.УстановитьЗаголовкиВСтрокеТаблицы(ЭтотОбъект, СтрокаДетальнойЗаписи, ОписаниеКолонокЗаголовковТаблицыЗаписиОСтаже());
		
		Элементы.ЗаписиОСтаже.ТекущаяСтрока = СтрокаДетальнойЗаписи.ПолучитьИдентификатор();
		
		Если НовыйИндексСтроки = Неопределено Тогда
			НовыйИндексСтроки = ЗаписиОСтаже.Индекс(СтрокаДетальнойЗаписи);	
		КонецЕсли;	

		ПредыдущаяСтрока = ЗаписиОСтаже[НовыйИндексСтроки - 1];
		Если ПредыдущаяСтрока.ТипСтроки = "Группировка" Тогда
			НомерОсновнойЗаписи = 1;
		Иначе 
			НомерОсновнойЗаписи = ПредыдущаяСтрока.НомерОсновнойЗаписи;
		КонецЕсли;		
	Иначе 
		СтрокаДетальнойЗаписи = ЗаписиОСтаже[РедактируемыеДанные.ИндексСтроки];
		НомерОсновнойЗаписи = СтрокаДетальнойЗаписи.НомерОсновнойЗаписи;
		ЗаполнитьСтрокуТаблицы(СтрокаДетальнойЗаписи, РедактируемыеДанные);
	КонецЕсли;		
	
	СдвинутьОсновнуюСтрокуСДополнительными(СтрокаДетальнойЗаписи, НовыйИндексСтроки, ПодчиненныеСтроки, НомерОсновнойЗаписи);
	
	ПодчиненныеСтроки = ПодчиненныеСтроки(ЗаписиОСтаже, Родитель);
	
	ПронумероватьЗаписиСтажа(ПодчиненныеСтроки);
	
	Если ФиксироватьДанныеСтажаВЦеломПоСотруднику Тогда
		ЗафиксироватьСтрокиСтажаПоСотруднику(Родитель.Сотрудник);
	КонецЕсли;	
	
	Модифицированность = РедактируемыеДанные.Модифицированность;
	
	УстановитьДоступностьКомандОтменыИсправлений(ЭтаФорма);
КонецПроцедуры	

&НаКлиенте
Процедура СдвинутьОсновнуюСтрокуСДополнительными(СдвигаемаяСтрока, НовыйИндексСтроки, ПодчиненныеСтроки, НомерОсновнойЗаписи = Неопределено)
	ИндексСдвигаемойСтроки = ЗаписиОСтаже.Индекс(СдвигаемаяСтрока); 
	
	Сдвиг = НовыйИндексСтроки - ИндексСдвигаемойСтроки; 
	Если Сдвиг > 0 Тогда
		Сдвиг = Сдвиг - 1;
	КонецЕсли;	
	
	ЗаписиОСтаже.Сдвинуть(ИндексСдвигаемойСтроки, Сдвиг);
		
	Если НомерОсновнойЗаписи = Неопределено
		Или СдвигаемаяСтрока.НомерДополнительнойЗаписи <> 0 Тогда
		
		Возврат;
	КонецЕсли;
	
	ДопСтроки = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из ПодчиненныеСтроки Цикл
		Если СтрокаТаблицы.НомерОсновнойЗаписи = НомерОсновнойЗаписи
			И ЗначениеЗаполнено(СтрокаТаблицы.НомерДополнительнойЗаписи) Тогда
			
			ДопСтроки.Добавить(СтрокаТаблицы);
		КонецЕсли;	
	КонецЦикла;	
	
	ИндексПоследнейСтроки = ЗаписиОСтаже.Индекс(СдвигаемаяСтрока);
	
	Для Каждого СтрокаДопЗаписи Из ДопСтроки Цикл
		ИндексСдвигаемойСтроки = ЗаписиОСтаже.Индекс(СтрокаДопЗаписи);
		НовыйИндексСтроки = ИндексПоследнейСтроки + 1;
		
		Сдвиг = НовыйИндексСтроки - ИндексСдвигаемойСтроки; 
		Если Сдвиг > 0 Тогда
			Сдвиг = Сдвиг - 1;
		КонецЕсли;	

		ЗаписиОСтаже.Сдвинуть(ИндексСдвигаемойСтроки, Сдвиг);
		
		ИндексПоследнейСтроки = ЗаписиОСтаже.Индекс(СтрокаДопЗаписи);
	КонецЦикла;	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура ПронумероватьЗаписиСтажа(ЗаписиСтажа)
	
	НомерОсновнойЗаписи = 0;
	Для Сч = 0 По ЗаписиСтажа.Количество() - 1 Цикл
		ОбрабатываемаяСтрока = ЗаписиСтажа[Сч];
		Если ОбрабатываемаяСтрока.НомерДополнительнойЗаписи = 0 Тогда
			НомерОсновнойЗаписи = НомерОсновнойЗаписи + 1;
		КонецЕсли;	
		ОбрабатываемаяСтрока.НомерОсновнойЗаписи = НомерОсновнойЗаписи;		
	КонецЦикла;		
КонецПроцедуры	

&НаСервере
Процедура ЗафиксироватьСтрокиСтажаПоСотруднику(Сотрудник)
	СтрокиПоСотруднику = ЗаписиОСтаже.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
	
	Для Каждого СтрокаПоСотруднику Из СтрокиПоСотруднику Цикл
		СтрокаПоСотруднику.ФиксСтаж  = Истина;	
		СтрокаПоСотруднику.Модифицированность = Истина;
	КонецЦикла;	
КонецПроцедуры	

#КонецОбласти

#Область ЗаполнениеДанныхСтажаИзКомплекта

&НаСервере
Процедура ЗаполнитьСведенияОСтаже()
	ЗаписиОСтаже.Очистить();
	
	ЗначенияПолейТекущейГруппировкиСтажа = Новый Структура;
	ЗначенияПолейТекущейГруппировкиСтажа.Вставить("Сотрудник");
	ЗначенияПолейТекущейГруппировкиСтажа.Вставить("КатегорияЗастрахованныхЛиц");
	ЗначенияПолейТекущейГруппировкиСтажа.Вставить("ТипДоговора");
	
	Запрос = ЗапросПоЗаписямСтажа();
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Для Каждого ЗначениеПоляГруппировки Из ЗначенияПолейТекущейГруппировкиСтажа Цикл
			Если ЗначениеПоляГруппировки.Значение <> Выборка[ЗначениеПоляГруппировки.Ключ] Тогда
				ЗаполнитьЗначенияСвойств(ЗначенияПолейТекущейГруппировкиСтажа, Выборка);				
				Родитель = ДобавитьСтрокуГруппировкуСтажа(Выборка);
			КонецЕсли;	
		КонецЦикла;	
		
		Если Выборка.ЕстьДетальныеЗаписи Тогда
			ДобавитьСтрокуДетальнойЗаписиПоСтажу(ЗаписиОСтаже, Родитель, Выборка);
		КонецЕсли;				
	КонецЦикла;	
	
	ПерсонифицированныйУчетКлиентСервер.УстановитьЗаголовкиВТаблице(ЭтотОбъект, ЗаписиОСтаже, ОписаниеКолонокЗаголовковТаблицыЗаписиОСтаже());
КонецПроцедуры	

&НаСервере
Функция ЗапросПоЗаписямСтажа()
	Запрос = Новый Запрос;
	СписокДокументов = ДокументыПоПериодам.Получить(ТекущийПериод);
	Если СписокДокументов = Неопределено Тогда
		СписокДокументов = Новый Массив;
	КонецЕсли;	
	Запрос.УстановитьПараметр("СписокДокументов", СписокДокументов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СотрудникиКомплекта.Сотрудник,
	|	СотрудникиКомплекта.КатегорияЗастрахованныхЛиц,
	|	СотрудникиКомплекта.ТипДоговора,
	|	МАКСИМУМ(СотрудникиКомплекта.ФиксСтаж) КАК ФиксСтаж,
	|	МАКСИМУМ(СотрудникиКомплекта.Ссылка) КАК Ссылка
	|ПОМЕСТИТЬ ВТСотрудникиДокументов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПачкаДокументовСЗВ_6_1Сотрудники.Сотрудник КАК Сотрудник,
	|		ПачкаДокументовСЗВ_6_1Сотрудники.Ссылка.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|		ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ПустаяСсылка) КАК ТипДоговора,
	|		ПачкаДокументовСЗВ_6_1Сотрудники.ФиксСтаж КАК ФиксСтаж,
	|		ПачкаДокументовСЗВ_6_1Сотрудники.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.ПачкаДокументовСЗВ_6_1.Сотрудники КАК ПачкаДокументовСЗВ_6_1Сотрудники
	|	ГДЕ
	|		ПачкаДокументовСЗВ_6_1Сотрудники.Ссылка В(&СписокДокументов)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		РеестрСЗВ_6_2Сотрудники.Сотрудник,
	|		РеестрСЗВ_6_2Сотрудники.Ссылка.КатегорияЗастрахованныхЛиц,
	|		ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ПустаяСсылка),
	|		РеестрСЗВ_6_2Сотрудники.ФиксСтаж,
	|		РеестрСЗВ_6_2Сотрудники.Ссылка
	|	ИЗ
	|		Документ.РеестрСЗВ_6_2.Сотрудники КАК РеестрСЗВ_6_2Сотрудники
	|	ГДЕ
	|		РеестрСЗВ_6_2Сотрудники.Ссылка В(&СписокДокументов)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПачкаДокументовСЗВ_6_4Сотрудники.Сотрудник,
	|		ПачкаДокументовСЗВ_6_4Сотрудники.Ссылка.КатегорияЗастрахованныхЛиц,
	|		ПачкаДокументовСЗВ_6_4Сотрудники.Ссылка.ТипДоговора,
	|		ПачкаДокументовСЗВ_6_4Сотрудники.ФиксСтаж,
	|		ПачкаДокументовСЗВ_6_4Сотрудники.Ссылка
	|	ИЗ
	|		Документ.ПачкаДокументовСЗВ_6_4.Сотрудники КАК ПачкаДокументовСЗВ_6_4Сотрудники
	|	ГДЕ
	|		ПачкаДокументовСЗВ_6_4Сотрудники.Ссылка В(&СписокДокументов)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПачкаРазделов6РасчетаРСВ_1Сотрудники.Сотрудник,
	|		ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ПустаяСсылка),
	|		ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ПустаяСсылка),
	|		ПачкаРазделов6РасчетаРСВ_1Сотрудники.ФиксСтаж,
	|		ПачкаРазделов6РасчетаРСВ_1Сотрудники.Ссылка
	|	ИЗ
	|		Документ.ПачкаРазделов6РасчетаРСВ_1.Сотрудники КАК ПачкаРазделов6РасчетаРСВ_1Сотрудники
	|	ГДЕ
	|		ПачкаРазделов6РасчетаРСВ_1Сотрудники.Ссылка В(&СписокДокументов)) КАК СотрудникиКомплекта
	|
	|СГРУППИРОВАТЬ ПО
	|	СотрудникиКомплекта.Сотрудник,
	|	СотрудникиКомплекта.КатегорияЗастрахованныхЛиц,
	|	СотрудникиКомплекта.ТипДоговора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПачкаДокументовСЗВ_6_1ЗаписиОСтаже.Ссылка,
	|	ПачкаДокументовСЗВ_6_1ЗаписиОСтаже.НомерСтроки КАК НомерСтроки,
	|	ПачкаДокументовСЗВ_6_1ЗаписиОСтаже.Сотрудник КАК Сотрудник,
	|	ПачкаДокументовСЗВ_6_1ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
	|	ПачкаДокументовСЗВ_6_1ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
	|	ПачкаДокументовСЗВ_6_1ЗаписиОСтаже.ДатаНачалаПериода,
	|	ПачкаДокументовСЗВ_6_1ЗаписиОСтаже.ДатаОкончанияПериода,
	|	ПачкаДокументовСЗВ_6_1ЗаписиОСтаже.ОсобыеУсловияТруда,
	|	ПачкаДокументовСЗВ_6_1ЗаписиОСтаже.КодПозицииСписка,
	|	ПачкаДокументовСЗВ_6_1ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа,
	|	ПачкаДокументовСЗВ_6_1ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа,
	|	ПачкаДокументовСЗВ_6_1ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа,
	|	ПачкаДокументовСЗВ_6_1ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа,
	|	ПачкаДокументовСЗВ_6_1ЗаписиОСтаже.ОснованиеВыслугиЛет,
	|	ПачкаДокументовСЗВ_6_1ЗаписиОСтаже.ПервыйПараметрВыслугиЛет,
	|	ПачкаДокументовСЗВ_6_1ЗаписиОСтаже.ВторойПараметрВыслугиЛет,
	|	ПачкаДокументовСЗВ_6_1ЗаписиОСтаже.ТретийПараметрВыслугиЛет,
	|	ПачкаДокументовСЗВ_6_1ЗаписиОСтаже.ТерриториальныеУсловия,
	|	ПачкаДокументовСЗВ_6_1ЗаписиОСтаже.ПараметрТерриториальныхУсловий,
	|	ПачкаДокументовСЗВ_6_1ЗаписиОСтаже.Ссылка.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ПустаяСсылка) КАК ТипДоговора
	|ПОМЕСТИТЬ ВТЗаписиСтажа
	|ИЗ
	|	Документ.ПачкаДокументовСЗВ_6_1.ЗаписиОСтаже КАК ПачкаДокументовСЗВ_6_1ЗаписиОСтаже
	|ГДЕ
	|	ПачкаДокументовСЗВ_6_1ЗаписиОСтаже.Ссылка В(&СписокДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПачкаДокументовСЗВ_6_4ЗаписиОСтаже.Ссылка,
	|	ПачкаДокументовСЗВ_6_4ЗаписиОСтаже.НомерСтроки,
	|	ПачкаДокументовСЗВ_6_4ЗаписиОСтаже.Сотрудник,
	|	ПачкаДокументовСЗВ_6_4ЗаписиОСтаже.НомерОсновнойЗаписи,
	|	ПачкаДокументовСЗВ_6_4ЗаписиОСтаже.НомерДополнительнойЗаписи,
	|	ПачкаДокументовСЗВ_6_4ЗаписиОСтаже.ДатаНачалаПериода,
	|	ПачкаДокументовСЗВ_6_4ЗаписиОСтаже.ДатаОкончанияПериода,
	|	ПачкаДокументовСЗВ_6_4ЗаписиОСтаже.ОсобыеУсловияТруда,
	|	ПачкаДокументовСЗВ_6_4ЗаписиОСтаже.КодПозицииСписка,
	|	ПачкаДокументовСЗВ_6_4ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа,
	|	ПачкаДокументовСЗВ_6_4ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа,
	|	ПачкаДокументовСЗВ_6_4ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа,
	|	ПачкаДокументовСЗВ_6_4ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа,
	|	ПачкаДокументовСЗВ_6_4ЗаписиОСтаже.ОснованиеВыслугиЛет,
	|	ПачкаДокументовСЗВ_6_4ЗаписиОСтаже.ПервыйПараметрВыслугиЛет,
	|	ПачкаДокументовСЗВ_6_4ЗаписиОСтаже.ВторойПараметрВыслугиЛет,
	|	ПачкаДокументовСЗВ_6_4ЗаписиОСтаже.ТретийПараметрВыслугиЛет,
	|	ПачкаДокументовСЗВ_6_4ЗаписиОСтаже.ТерриториальныеУсловия,
	|	ПачкаДокументовСЗВ_6_4ЗаписиОСтаже.ПараметрТерриториальныхУсловий,
	|	ПачкаДокументовСЗВ_6_4ЗаписиОСтаже.Ссылка.КатегорияЗастрахованныхЛиц,
	|	ПачкаДокументовСЗВ_6_4ЗаписиОСтаже.Ссылка.ТипДоговора
	|ИЗ
	|	Документ.ПачкаДокументовСЗВ_6_4.ЗаписиОСтаже КАК ПачкаДокументовСЗВ_6_4ЗаписиОСтаже
	|ГДЕ
	|	ПачкаДокументовСЗВ_6_4ЗаписиОСтаже.Ссылка В(&СписокДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.Ссылка,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.НомерСтроки,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.Сотрудник,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.НомерОсновнойЗаписи,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.НомерДополнительнойЗаписи,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.ДатаНачалаПериода,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.ДатаОкончанияПериода,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.ОсобыеУсловияТруда,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.КодПозицииСписка,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.ОснованиеВыслугиЛет,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.ПервыйПараметрВыслугиЛет,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.ВторойПараметрВыслугиЛет,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.ТретийПараметрВыслугиЛет,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.ТерриториальныеУсловия,
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.ПараметрТерриториальныхУсловий,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицДляПФР.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ПустаяСсылка)
	|ИЗ
	|	Документ.ПачкаРазделов6РасчетаРСВ_1.ЗаписиОСтаже КАК ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже
	|ГДЕ
	|	ПачкаРазделов6РасчетаРСВ_1ЗаписиОСтаже.Ссылка В(&СписокДокументов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РеестрСЗВ_6_2ЗаписиОСтаже.Ссылка,
	|	РеестрСЗВ_6_2ЗаписиОСтаже.НомерСтроки,
	|	РеестрСЗВ_6_2ЗаписиОСтаже.Сотрудник,
	|	0,
	|	0,
	|	РеестрСЗВ_6_2ЗаписиОСтаже.ДатаНачалаПериода,
	|	РеестрСЗВ_6_2ЗаписиОСтаже.ДатаОкончанияПериода,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	РеестрСЗВ_6_2ЗаписиОСтаже.Ссылка.КатегорияЗастрахованныхЛиц,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыДоговоровСЗВ63.ПустаяСсылка)
	|ИЗ
	|	Документ.РеестрСЗВ_6_2.ЗаписиОСтаже КАК РеестрСЗВ_6_2ЗаписиОСтаже
	|ГДЕ
	|	РеестрСЗВ_6_2ЗаписиОСтаже.Ссылка В(&СписокДокументов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиДокументов.Ссылка КАК Ссылка,
	|	СотрудникиДокументов.Сотрудник,
	|	СотрудникиДокументов.КатегорияЗастрахованныхЛиц,
	|	СотрудникиДокументов.ТипДоговора,
	|	ЗаписиСтажа.НомерОсновнойЗаписи,
	|	ЗаписиСтажа.НомерДополнительнойЗаписи,
	|	ЗаписиСтажа.ДатаНачалаПериода,
	|	ЗаписиСтажа.ДатаОкончанияПериода,
	|	ЗаписиСтажа.ОсобыеУсловияТруда,
	|	ЗаписиСтажа.КодПозицииСписка,
	|	ЗаписиСтажа.ОснованиеИсчисляемогоСтажа,
	|	ЗаписиСтажа.ПервыйПараметрИсчисляемогоСтажа,
	|	ЗаписиСтажа.ВторойПараметрИсчисляемогоСтажа,
	|	ЗаписиСтажа.ТретийПараметрИсчисляемогоСтажа,
	|	ЗаписиСтажа.ОснованиеВыслугиЛет,
	|	ЗаписиСтажа.ПервыйПараметрВыслугиЛет,
	|	ЗаписиСтажа.ВторойПараметрВыслугиЛет,
	|	ЗаписиСтажа.ТретийПараметрВыслугиЛет,
	|	ЗаписиСтажа.ТерриториальныеУсловия,
	|	ЗаписиСтажа.ПараметрТерриториальныхУсловий,
	|	СотрудникиДокументов.ФиксСтаж,
	|	ВЫБОР
	|		КОГДА ЗаписиСтажа.НомерОсновнойЗаписи ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьДетальныеЗаписи
	|ИЗ
	|	ВТСотрудникиДокументов КАК СотрудникиДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗаписиСтажа КАК ЗаписиСтажа
	|		ПО СотрудникиДокументов.Сотрудник = ЗаписиСтажа.Сотрудник
	|			И СотрудникиДокументов.КатегорияЗастрахованныхЛиц = ЗаписиСтажа.КатегорияЗастрахованныхЛиц
	|			И СотрудникиДокументов.ТипДоговора = ЗаписиСтажа.ТипДоговора
	|
	|УПОРЯДОЧИТЬ ПО
	|	СотрудникиДокументов.Сотрудник.Наименование,
	|	СотрудникиДокументов.Сотрудник,
	|	СотрудникиДокументов.КатегорияЗастрахованныхЛиц.Порядок,
	|	СотрудникиДокументов.КатегорияЗастрахованныхЛиц,
	|	СотрудникиДокументов.ТипДоговора.Порядок,
	|	СотрудникиДокументов.ТипДоговора,
	|	ЗаписиСтажа.НомерОсновнойЗаписи,
	|	ЗаписиСтажа.НомерДополнительнойЗаписи";
		
	Возврат Запрос;
	
КонецФункции	

#КонецОбласти

#Область РаботаСоСтрокамиЗаписейСтажа

&НаКлиентеНаСервереБезКонтекста
Функция СоответствиеСтрокТаблицПолямЗаписейСтажа(ТипСтроки)
	СоответствиеПолей = Новый Соответствие;
	
	Если ТипСтроки = "Группировка" Тогда 
		СоответствиеПолей.Вставить("Сотрудник", "Сотрудник");
		СоответствиеПолей.Вставить("КатегорияЗастрахованныхЛиц", "КатегорияЗастрахованныхЛиц");
		СоответствиеПолей.Вставить("ТипДоговора", "ТипДоговора");
		СоответствиеПолей.Вставить("Ссылка", "Ссылка");
		СоответствиеПолей.Вставить("ФиксСтаж", "ФиксСтаж");
	ИначеЕсли ТипСтроки = "ДетальнаяЗапись" Тогда 		
		СоответствиеПолей.Вставить("Сотрудник", "Сотрудник");
		СоответствиеПолей.Вставить("НомерОсновнойЗаписи", "НомерОсновнойЗаписи");
		СоответствиеПолей.Вставить("НомерДополнительнойЗаписи", "НомерДополнительнойЗаписи");
		СоответствиеПолей.Вставить("ДатаНачалаПериода", "ДатаНачалаПериода");
		СоответствиеПолей.Вставить("ДатаОкончанияПериода", "ДатаОкончанияПериода");
		СоответствиеПолей.Вставить("ТерриториальныеУсловия", "ТерриториальныеУсловия");
		СоответствиеПолей.Вставить("ПараметрТерриториальныхУсловий", "ПараметрТерриториальныхУсловий");
		СоответствиеПолей.Вставить("ОсобыеУсловияТруда", "ОсобыеУсловияТруда");
		СоответствиеПолей.Вставить("КодПозицииСписка", "КодПозицииСписка");		
		СоответствиеПолей.Вставить("ОснованиеИсчисляемогоСтажа", "ОснованиеИсчисляемогоСтажа");
		СоответствиеПолей.Вставить("ПервыйПараметрИсчисляемогоСтажа", "ПервыйПараметрИсчисляемогоСтажа");
		СоответствиеПолей.Вставить("ВторойПараметрИсчисляемогоСтажа", "ВторойПараметрИсчисляемогоСтажа");
		СоответствиеПолей.Вставить("ТретийПараметрИсчисляемогоСтажа", "ТретийПараметрИсчисляемогоСтажа");
		СоответствиеПолей.Вставить("ОснованиеВыслугиЛет", "ОснованиеВыслугиЛет");
		СоответствиеПолей.Вставить("ПервыйПараметрВыслугиЛет", "ПервыйПараметрВыслугиЛет");
		СоответствиеПолей.Вставить("ВторойПараметрВыслугиЛет", "ВторойПараметрВыслугиЛет");
		СоответствиеПолей.Вставить("ТретийПараметрВыслугиЛет", "ТретийПараметрВыслугиЛет");
	КонецЕсли;	

	Возврат СоответствиеПолей;	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПодчиненныеСтроки(ЗаписиОСтаже, Родитель)
	ПодчиненныеСтроки = Новый Массив;
	
	ИндексТекущейСтроки = ЗаписиОСтаже.Индекс(Родитель);
	КоличествоСтрок = ЗаписиОСтаже.Количество();
	
	Для Индекс = ИндексТекущейСтроки + 1 По КоличествоСтрок - 1 Цикл
		ОбрабатываемаяСтрока = ЗаписиОСтаже[Индекс];
		
		Если ОбрабатываемаяСтрока.ИдентификаторСтрокиРодителя <> Родитель.ИдентификаторСтрокиСтажа Тогда
			Прервать;
		КонецЕсли;	
		
		ПодчиненныеСтроки.Добавить(ОбрабатываемаяСтрока);
	КонецЦикла;	
	
	Возврат ПодчиненныеСтроки;	
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция РодительСтроки(ЗаписиОСтаже, СтрокаТаблицы)
	Если СтрокаТаблицы.ТипСтроки = "Группировка" Тогда
		Возврат СтрокаТаблицы;		
	КонецЕсли;	
	
	ИндексТекущейСтроки = ЗаписиОСтаже.Индекс(СтрокаТаблицы);
	
	Для Сч = 0 По ИндексТекущейСтроки Цикл
		ОбрабатываемаяСтрока = ЗаписиОСтаже[ИндексТекущейСтроки - Сч];
		
		Если ОбрабатываемаяСтрока.ТипСтроки = "Группировка"
			И СтрокаТаблицы.ИдентификаторСтрокиРодителя = ОбрабатываемаяСтрока.ИдентификаторСтрокиСтажа Тогда
			
			Возврат ОбрабатываемаяСтрока;
		КонецЕсли;	
	КонецЦикла;	
КонецФункции	

&НаСервере
Функция ДобавитьСтрокуГруппировкуСтажа(ДанныеСтажа)
	НоваяСтрока = ЗаписиОСтаже.Добавить();
    НоваяСтрока.ТипСтроки = "Группировка";
	НоваяСтрока.ИдентификаторСтрокиСтажа = Строка(Новый УникальныйИдентификатор);
	ЗаполнитьСтрокуТаблицы(НоваяСтрока, ДанныеСтажа);
	
	Возврат НоваяСтрока;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДобавитьСтрокуДетальнойЗаписиПоСтажу(ЗаписиОСтаже, Родитель, ДанныеСтажа, ИндексСтроки = Неопределено)
	ИдентификаторСтрокиСтажа = Строка(Новый УникальныйИдентификатор);
	
	Если ИндексСтроки <> Неопределено Тогда
		СтрокаТаблицы = ЗаписиОСтаже.Вставить(ИндексСтроки);
	Иначе	
		СтрокаТаблицы = ЗаписиОСтаже.Добавить();
	КонецЕсли;
	
	СтрокаТаблицы.ФиксСтаж = Родитель.ФиксСтаж;
	СтрокаТаблицы.ИдентификаторСтрокиРодителя = Родитель.ИдентификаторСтрокиСтажа;
	СтрокаТаблицы.ТипСтроки = "ДетальнаяЗапись";
	СтрокаТаблицы.ИдентификаторСтрокиСтажа = ИдентификаторСтрокиСтажа;
 
	ЗаполнитьСтрокуТаблицы(СтрокаТаблицы, ДанныеСтажа);
	
	Возврат СтрокаТаблицы;
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьПодчиненныеСтроки(ЗаписиОСтаже, Родитель)
	ПодчиненныеСтроки = ПодчиненныеСтроки(ЗаписиОСтаже, Родитель);
	
	Для Каждого УдаляемаяСтрока Из ПодчиненныеСтроки Цикл
		ЗаписиОСтаже.Удалить(ЗаписиОСтаже.Индекс(УдаляемаяСтрока));
	КонецЦикла;	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСтрокуТаблицы(СтрокаТаблицы, ДанныеСтажа)
	СоответствиеПолейСтрокТаблицПолямЗаписейСтажа = СоответствиеСтрокТаблицПолямЗаписейСтажа(СтрокаТаблицы.ТипСтроки);	
	
	Для Каждого КлючЗначение Из СоответствиеПолейСтрокТаблицПолямЗаписейСтажа Цикл
		СтрокаТаблицы[КлючЗначение.Ключ] = ДанныеСтажа[КлючЗначение.Значение];			
	КонецЦикла;	
	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Функция ДанныеЗаписиСтажаИзСтрокТаблицы(ЗаписиОСтаже, Родитель, СтрокаДетальныхЗаписей = Неопределено)
	ДанныеЗаписиСтажа = Новый Структура;
	
	СоответствиеСтрокТаблицПолямЗаписейСтажа = СоответствиеСтрокТаблицПолямЗаписейСтажа(Родитель.ТипСтроки);
	
	Для Каждого КлючЗначение Из СоответствиеСтрокТаблицПолямЗаписейСтажа Цикл
		ДанныеЗаписиСтажа.Вставить(КлючЗначение.Значение, Родитель[КлючЗначение.Ключ]);	
	КонецЦикла;	
	
	Если СтрокаДетальныхЗаписей  = Неопределено Тогда
		Возврат ДанныеЗаписиСтажа;
	КонецЕсли;	
	
	СоответствиеСтрокТаблицПолямЗаписейСтажа = СоответствиеСтрокТаблицПолямЗаписейСтажа(СтрокаДетальныхЗаписей.ТипСтроки);
	
	Для Каждого КлючЗначение Из СоответствиеСтрокТаблицПолямЗаписейСтажа Цикл
		ДанныеЗаписиСтажа.Вставить(КлючЗначение.Значение, СтрокаДетальныхЗаписей[КлючЗначение.Ключ]);	
	КонецЦикла;		
	
	Возврат ДанныеЗаписиСтажа;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИндексСтрокиПоДате(ЗаписиОСтаже, Родитель, ПодчиненныеСтроки, Дата, ТретийПараметрИсчисляемогоСтажа = Неопределено)
	ВидыСтажаГПХ = Новый Массив;
	
	ВидыСтажаГПХ.Добавить(ПредопределенноеЗначение("Справочник.ПараметрыИсчисляемогоСтраховогоСтажа.ДОГОВОР"));
	ВидыСтажаГПХ.Добавить(ПредопределенноеЗначение("Справочник.ПараметрыИсчисляемогоСтраховогоСтажа.НЕОПЛАВТ"));
	ВидыСтажаГПХ.Добавить(ПредопределенноеЗначение("Справочник.ПараметрыИсчисляемогоСтраховогоСтажа.НЕОПЛДОГ"));
	
	КоличествоСтрок = ПодчиненныеСтроки.Количество();
	ИндексПоследнейСтроки = ЗаписиОСтаже.Индекс(Родитель);
	
	Для Сч = 0 По КоличествоСтрок - 1 Цикл
		ОбрабатываемаяСтрока = ПодчиненныеСтроки[Сч];
		
		Если ТретийПараметрИсчисляемогоСтажа <> Неопределено Тогда
			Если ВидыСтажаГПХ.Найти(ОбрабатываемаяСтрока.ТретийПараметрИсчисляемогоСтажа) = Неопределено
				И ВидыСтажаГПХ.Найти(ТретийПараметрИсчисляемогоСтажа) <> Неопределено Тогда
				
				Возврат ЗаписиОСтаже.Индекс(ОбрабатываемаяСтрока);
				
			КонецЕсли;	
					
			Если ВидыСтажаГПХ.Найти(ОбрабатываемаяСтрока.ТретийПараметрИсчисляемогоСтажа) <> Неопределено
				И ВидыСтажаГПХ.Найти(ТретийПараметрИсчисляемогоСтажа) = Неопределено Тогда
				
				ИндексПоследнейСтроки = ЗаписиОСтаже.Индекс(ОбрабатываемаяСтрока);
				
				Продолжить;
				
			КонецЕсли;
		КонецЕсли;	
		
		Если ОбрабатываемаяСтрока.ДатаНачалаПериода >= Дата
			И ЗначениеЗаполнено(ОбрабатываемаяСтрока.ДатаНачалаПериода) Тогда
			
			Возврат ЗаписиОСтаже.Индекс(ОбрабатываемаяСтрока);
		КонецЕсли;	
		
		ИндексПоследнейСтроки = ЗаписиОСтаже.Индекс(ОбрабатываемаяСтрока);	
	КонецЦикла;	
	
	Если ИндексПоследнейСтроки + 1 = ЗаписиОСтаже.Количество() Тогда
		Возврат Неопределено;
	Иначе 
		Возврат ИндексПоследнейСтроки + 1;
	КонецЕсли;		
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция ИндексСтрокиПоНомеруЗаписи(ЗаписиОСтаже, Родитель, ПодчиненныеСтроки, НомерОсновнойЗаписи, НомерДопЗаписи)
	КоличествоСтрок = ПодчиненныеСтроки.Количество();
	ИндексПоследнейСтроки = ЗаписиОСтаже.Индекс(Родитель);
	
	Для Сч = 0 По КоличествоСтрок - 1 Цикл
		ОбрабатываемаяСтрока = ПодчиненныеСтроки[Сч];
		
		Если ОбрабатываемаяСтрока.НомерОсновнойЗаписи > НомерОсновнойЗаписи Тогда
			Возврат ЗаписиОСтаже.Индекс(ОбрабатываемаяСтрока);	
		ИначеЕсли ОбрабатываемаяСтрока.НомерОсновнойЗаписи = НомерОсновнойЗаписи   
			И ОбрабатываемаяСтрока.НомерДополнительнойЗаписи > НомерДопЗаписи
			И ОбрабатываемаяСтрока.НомерДополнительнойЗаписи <> 0 Тогда
			
			Возврат ЗаписиОСтаже.Индекс(ОбрабатываемаяСтрока);	
		КонецЕсли;	
		ИндексПоследнейСтроки = ЗаписиОСтаже.Индекс(ОбрабатываемаяСтрока);
	КонецЦикла;	
			
	Если ИндексПоследнейСтроки + 1 = ЗаписиОСтаже.Количество() Тогда
		Возврат Неопределено;
	Иначе 
		Возврат ИндексПоследнейСтроки + 1;
	КонецЕсли;	
	
КонецФункции	

#КонецОбласти

#Область МеханизмИндикацииОшибок

&НаКлиенте
Процедура ПоказатьОшибки(ИмяПоляИндикацииОшибки, ПоказыватьТекстОшибки) Экспорт
	ПоказыватьТекстОшибки = Истина;	
КонецПроцедуры	

&НаСервере
Функция ОписаниеЭлементовСИндикациейОшибок() Экспорт
	КоллекцияОписанийЭлементов = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементовСИндикациейОшибок();
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы();
	
	ОписаниеЭлемента.ИмяЭлемента = "ЗаписиОСтаже";
	ОписаниеЭлемента.ИмяЭлементаТаблица = "ЗаписиОСтаже";
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "ЗаписиОСтаже";	
	
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	Возврат КоллекцияОписанийЭлементов;
КонецФункции	

#КонецОбласти

#Область ОтображениеКолонокЗаголовков

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеКолонокЗаголовковТаблицФормы()
	ОписаниеКолонокЗаголовковТаблиц = Новый Соответствие;
	
	ОписаниеКолонокЗаголовковТаблиц.Вставить("ЗаписиОСтаже", ОписаниеКолонокЗаголовковТаблицы("ЗаписиОСтаже")); 
	
	Возврат ОписаниеКолонокЗаголовковТаблиц;
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеКолонокЗаголовковТаблицыЗаписиОСтаже()
	ОписаниеЗаголовковКолонок = Новый Массив;
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ЗаписиОСтажеТерриториальныеУсловия";
	ОписаниеЗаголовка.Заголовок = "Код";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ЗаписиОСтажеПараметрТерриториальныхУсловий";
	ОписаниеЗаголовка.Заголовок = "Ставка";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ЗаписиОСтажеОснованиеИсчисляемогоСтажа";
	ОписаниеЗаголовка.Заголовок = "Основание";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ЗаписиОСтажеТретийПараметрИсчисляемогоСтажа";
	ОписаниеЗаголовка.Заголовок = "Параметр";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ЗаписиОСтажеОснованиеВыслугиЛет";
	ОписаниеЗаголовка.Заголовок = "Основание";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ЗаписиОСтажеПервыйПараметрВыслугиЛет";
	ОписаниеЗаголовка.Заголовок = "Месяцы";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ЗаписиОСтажеВторойПараметрВыслугиЛет";
	ОписаниеЗаголовка.Заголовок = "Дни";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ЗаписиОСтажеТретийПараметрВыслугиЛет";
	ОписаниеЗаголовка.Заголовок = "Ставка";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ЗаписиОСтажеПервыйПараметрИсчисляемогоСтажа";
	ОписаниеЗаголовка.Заголовок = "Месяцы";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ЗаписиОСтажеВторойПараметрИсчисляемогоСтажа";
	ОписаниеЗаголовка.Заголовок = "Дни";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	Возврат ОписаниеЗаголовковКолонок;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеКолонокЗаголовковТаблицы(ИмяТаблицы)
	Если ИмяТаблицы = "ЗаписиОСтаже" Тогда
		ОписаниеКолонок = ОписаниеКолонокЗаголовковТаблицыЗаписиОСтаже();
	КонецЕсли;	
		
	Возврат ОписаниеКолонок;
КонецФункции	

#КонецОбласти

#КонецОбласти
