#Область ОписаниеПеременных

&НаКлиенте
Перем НомерТекущейСтрокиЗаписиОСтаже;

&НаКлиенте
Перем СтарыеЗначенияКонтролируемыхПолей;

&НаКлиенте
Перем НомерСтрокиСЗВ;

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка) 
	
	ДополнитьФорму();
	
	ПерсонифицированныйУчетФормы.ДокументыСЗВДобавитьКонтрольИсправлений(КонтролируемыеПоля);
	ПерсонифицированныйУчетФормы.УстановитьКраткоеОтображениеКатегорииВТаблицах(ЭтотОбъект, "Объект.ДокументыКомплекта.КатегорияЗастрахованныхЛиц", "СписокДокументовКатегорияЗастрахованныхЛиц");
	ПерсонифицированныйУчетФормы.УстановитьКраткоеОтображениеКатегорииВТаблицах(ЭтотОбъект, "Объект.ИтогиПоКатегориям.КатегорияЗастрахованныхЛиц", "ИтогиПоКатегориямКатегорияЗастрахованныхЛиц");
		
	Если Параметры.Комплект.Пустая() Тогда
		ЗначенияДляЗаполнения = Новый Структура;
		
		Если ЗначениеЗаполнено(Параметры.ОтчетныйПериод) Тогда
			Объект.ОтчетныйПериод = Параметры.ОтчетныйПериод;
			ОтчетныйПериод = Объект.ОтчетныйПериод;
		Иначе
			ЗначенияДляЗаполнения.Вставить("ПредыдущийКвартал", "ОтчетныйПериод");
		КонецЕсли;	
		
		Если Не Параметры.СпециальныйДокумент2015 Тогда
			Объект.КомплектОбъект.СпециальныйДокумент2015года = ПерсонифицированныйУчет.ПризнакСпециальногоРСВ2015Года(Объект.ОтчетныйПериод, Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ);	
		Иначе
			Объект.КомплектОбъект.СпециальныйДокумент2015года = Истина;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Параметры.Организация) Тогда
			Объект.Организация = Параметры.Организация;
			Организация = Объект.Организация; 
		Иначе
			ЗначенияДляЗаполнения.Вставить("Организация", "Организация");
			Объект.Организация = Организация;
		КонецЕсли;
		
		Если ЗначенияДляЗаполнения.Количество() > 0 Тогда 
			ЗарплатаКадры.ЗаполнитьПервоначальныеЗначенияВФорме(ЭтаФорма, ЗначенияДляЗаполнения);	
			Объект.ОтчетныйПериод = ОтчетныйПериод;
			Объект.Организация = Организация;
		КонецЕсли;	
		
		ФормироватьКомплектПриОткрытии = Параметры.ФормироватьКомплектПриОткрытии;
		ФормироватьКорректирующуюФорму = Параметры.ФормироватьКорректирующуюФорму;
		
		Если ЗначениеЗаполнено(Объект.Организация) 
			И ЗначениеЗаполнено(Объект.ОтчетныйПериод)
			И Не ФормироватьКомплектПриОткрытии Тогда
			
			УстановитьАктивныйКомплектПериода();
		Иначе
			УстановитьСвойстваЭлементовОтображенияКомплекта();			
		КонецЕсли;	
	Иначе 
		РедактируемыйКомплектСсылка = Параметры.Комплект;
		РедактируемыйКомплектПриИзмененииНаСервере();
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Страницы", "ТекущаяСтраница",
		?(Объект.ОтчетныйПериод >= '20170101', Элементы.ФормаУтратилаСилуСтраница, Элементы.КвартальнаяОтчетностьСтраница));
		
	Если Объект.ОтчетныйПериод >= '20170101' Тогда 
		ФормироватьКомплектПриОткрытии = Ложь;
		ФормироватьКорректирующуюФорму = Ложь;
	КонецЕсли;	
		
	ПериодСтрока = ПерсонифицированныйУчетКлиентСервер.ПредставлениеОтчетногоПериода(Объект.ОтчетныйПериод);
	
	ЭлектронныйДокументооборотСКонтролирующимиОрганамиКлиентСервер.ПриИнициализацииФормыРегламентированногоОтчета(ЭтаФорма, "ПФР");
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостей.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Обработка.ПодготовкаКвартальнойОтчетностиВПФР",
		"Форма",
		Неопределено, 
		НСтр("ru='Новости: Подготовка квартальной отчетности в ПФР'"),
		Ложь, 
		Новый Структура("ПолучатьНовостиНаСервере, ХранитьМассивНовостейТолькоНаСервере", Истина, Ложь),
		ИдентификаторыСобытийПриОткрытии 
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере.
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ФормироватьКомплектПриОткрытии
		И ЗначениеЗаполнено(Объект.Организация)
		И ЗначениеЗаполнено(Объект.ОтчетныйПериод) Тогда
		
		ПодключитьОбработчикОжидания("Подключаемый_СформироватьКомплектПослеОткрытияФормы", 0.1, Истина);
		
		ФормироватьКомплектПриОткрытии = Ложь;
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "РедактированиеДанныхСЗВ6ПоСотруднику" Тогда
		ПриИзмененииДанныхДокументаПоСотруднику(Параметр.АдресВоВременномХранилище);
		
	ИначеЕсли ИмяСобытия = "ФормированиеКорректирующихСведенийПФР" Тогда
		Если Источник.ВладелецФормы = ЭтаФорма Тогда
			СформироватьКорректирующиеСведения(Параметр);	
		КонецЕсли;	
	ИначеЕсли ИмяСобытия = "РучноеРедактированииКорректирующихСведенийПФР" Тогда
		Если Источник.ВладелецФормы = ЭтаФорма Тогда
			ПоместитьКорректирующиеДокументыВКомплект(Параметр.КорректируемыйПериод, Параметр.КорректирующиеДокументы);
		КонецЕсли;	
	ИначеЕсли ИмяСобытия = "ИзменениеУплатыВзносовПФР" 
		И Параметр.Организация = Объект.Организация
		И Параметр.ОтчетныйПериод = Объект.ОтчетныйПериод Тогда
		
		ПерераспределитьУплаченныеВзносы();
	ИначеЕсли ИмяСобытия = "ЗаписьДокументовКвартальнойОтчетности" 
		И Параметр.Организация = Объект.Организация
		И Параметр.ОтчетныйПериод = Объект.ОтчетныйПериод Тогда
		
		ПослеЗаписиДокументаКвартальнойОтчетностиВФорме(Параметр);
	ИначеЕсли ИмяСобытия = "РедактированиеСтажаКомплекта" 
		И Параметр.Найти(ТекущийДокументСсылка) <> Неопределено Тогда
		
		ИнициализироватьДокументВФорме(ТекущийДокументСсылка);
		
	ИначеЕсли ИмяСобытия = "ИзменениеСостоянияКомплектаОтчетностиПФР" 
		И Параметр.Комплект = Объект.КомплектОбъект.Ссылка Тогда
		
		ИзменитьСостояниеКомплекта(Параметр.Состояние);
	ИначеЕсли ИмяСобытия = "ВыполненоСохранениеФормыРСВ1" Тогда
		Если ТипЗнч(Объект.СсылкаНаРедактируемыйДокумент) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			ИнициализироватьДокументВФорме(Объект.СсылкаНаРедактируемыйДокумент, Истина);
		Иначе
			ОбновитьДанныеШапкиДокумента(Объект.КомплектОбъект.РСВ_1);
		КонецЕсли;			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Оповещение = Новый ОписаниеОповещения("ЗакрытиеФормыЗавершение", ЭтотОбъект);
	
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы, ТекстПредупреждения); 
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеФормыЗавершение(Отказ, ДополнительныеПараметры) Экспорт 
	СохранитьИзмененияВКомплекте();	
	Закрыть();
КонецПроцедуры	

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КомплектОбъектСостояниеКомплектаПриИзменении(Элемент)
	КомплектОбъектСостояниеКомплектаПриИзмененииНаСервере();
	Оповестить("ЗаписьКомплектаПФР", Объект.Организация);
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокДокументов

&НаКлиенте
Процедура СписокДокументовПриАктивизацииСтроки(Элемент)
	
	ВыполнитьОбработкуАктивизацииСтрокиДокументов(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	
	Если ОтчетныйПериод >= '20140101' Тогда
		Для Каждого ВыделеннаяСтрока Из Элементы.СписокДокументов.ВыделенныеСтроки Цикл
			ДанныеУдаляемойСтроки = Объект.ДокументыКомплекта.НайтиПоИдентификатору(ВыделеннаяСтрока);
			
			Если ТипЗнч(ДанныеУдаляемойСтроки.Ссылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
				ПоказатьПредупреждение(, НСтр("ru = 'Удаление основных разделов формы РСВ-1 не возможно.'"));
				Возврат;
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
	
	УдалитьДокументы(Элементы.СписокДокументов.ВыделенныеСтроки);
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ДанныеТекущейСтроки = Элементы.СписокДокументов.ТекущиеДанные;
	
	Если ДанныеТекущейСтроки <> Неопределено 
		И (Поле = Элементы.СписокДокументовПредставлениеДокумента
		Или Поле = Элементы.СписокДокументовПредставлениеРСВ_1) Тогда
		
		Ссылка = ДанныеТекущейСтроки.Ссылка;
		
		Если Модифицированность Тогда
			СохранитьИзмененияВРедактируемойПачке();
		КонецЕсли;	
		
		ПараметрыОткрытия = Новый Структура("Ключ", Ссылка);
		
		Если ТипЗнч(Ссылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			Если Объект.МодифицированностьКомплекта Тогда
				СохранитьИзмененияВКомплекте();
			КонецЕсли;
			РегламентированнаяОтчетностьКлиент.ОткрытьФормуРеглОтчета(Объект.КомплектОбъект.РСВ_1, Истина);
		ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ОписьПачекСЗВ_6") Тогда
			ОткрытьФорму("Документ.ОписьПачекСЗВ_6.ФормаОбъекта", ПараметрыОткрытия);	
		ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_1") Тогда
			ОткрытьФорму("Документ.ПачкаДокументовСЗВ_6_1.ФормаОбъекта", ПараметрыОткрытия);	
		ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.РеестрСЗВ_6_2") Тогда
			ОткрытьФорму("Документ.РеестрСЗВ_6_2.ФормаОбъекта", ПараметрыОткрытия);
		ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_3") Тогда
			ОткрытьФорму("Документ.ПачкаДокументовСЗВ_6_3.ФормаОбъекта", ПараметрыОткрытия);
		ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_4") Тогда
			ОткрытьФорму("Документ.ПачкаДокументовСЗВ_6_4.ФормаОбъекта", ПараметрыОткрытия);	
		ИначеЕсли ТипЗнч(Ссылка) = Тип("ДокументСсылка.ПачкаРазделов6РасчетаРСВ_1") Тогда
			ОткрытьФорму("Документ.ПачкаРазделов6РасчетаРСВ_1.ФормаОбъекта", ПараметрыОткрытия);		
		КонецЕсли;	
		
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ДобавитьСуществующиеДокументыНаСервере(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовПредставлениеКорректируемогоПериодаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	ПерсонифицированныйУчетКлиент.ОтчетныйПериодРегулирование(
		Элементы.СписокДокументов.ТекущиеДанные.КорректируемыйПериод, 
		Элементы.СписокДокументов.ТекущиеДанные.КорректируемыйПериодСтрокой, 
		Направление);
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовПредставлениеКорректируемогоПериодаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПерсонифицированныйУчетКлиент.ОтчетныйПериодНачалоВыбора(ЭтаФорма, 
		Элементы.СписокДокументов.ТекущиеДанные, 
		"КорректируемыйПериод", 
		"КорректируемыйПериодСтрокой");
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовТипСведенийСЗВПриИзменении(Элемент)
	СписокДокументовТипСведенийСЗВПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовТипСведенийСЗВНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Новый СписокЗначений;
	
	Если ТипЗнч(Элементы.СписокДокументов.ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ"));
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ"));			
	Иначе	
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ"));	
		ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ"));	
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСотрудники

&НаКлиенте
Процедура ПриИзмененииДанныхДокументаПоСотруднику(АдресВоВременномХранилище)
	ДанныеТекущегоДокументаПоСотрудникуВДанныеФормы(АдресВоВременномХранилище);
КонецПроцедуры	

&НаКлиенте
Процедура СотрудникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ДобавитьСотрудников(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ОткрытьФормуРедактированияКарточкиДокумента();
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СотрудникиПередУдалением(Элемент, Отказ)
	СотрудникиПередУдалениемНаСервере();
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Подключаемый_ВыполнитьНазначеннуюКоманду(Команда)
	ПерсонифицированныйУчетКлиент.КвартальнаяОтчетностьПФРВыполнитьНазначеннуюКоманду(ЭтотОбъект, Команда);	
КонецПроцедуры	

&НаКлиенте
Процедура РедактироватьРСВ1(Команда)
	РегламентированнаяОтчетностьКлиент.ОткрытьФормуРеглОтчета(Объект.КомплектОбъект.РСВ_1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьДокументПоСотруднику(Команда)
	ОткрытьФормуРедактированияКарточкиДокумента();	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьИсходныеСведения(Команда)
	Обновить(Ложь, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьБезУчетаИсправлений(Команда)
	
	Обновить(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСУчетомИсправлений(Команда)
	
	Обновить(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерераспределитьВзносы(Команда)	
	ПерераспределитьУплаченныеВзносы();
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКомплект(Команда)
	
	ПроверитьДанныеКомплекта(, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМастерПомощникФормированияКоррСведений(Команда)
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Организация", Объект.Организация);
	ПараметрыОткрытияФормы.Вставить("ОтчетныйПериод", Объект.ОтчетныйПериод);
	ПараметрыОткрытияФормы.Вставить("КорректируемыйПериод", ПерсонифицированныйУчетКлиентСервер.ПредшествующийОтчетныйПериодПерсУчета(Объект.ОтчетныйПериод));
	ПараметрыОткрытияФормы.Вставить("ОписаниеКорректирующихДокументов", ОписаниеКорректирующихДокументовКомплекта());
		
	ОткрытьФорму("Обработка.ПодготовкаКвартальнойОтчетностиВПФР.Форма.ФормированиеКорректирующихСведений", ПараметрыОткрытияФормы, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИсходнуюПачкуСЗВ61(Команда)
	ДобавитьПачкуСЗВ(Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_1"));	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИсходнуюПачкуСЗВ62(Команда)
	ДобавитьПачкуСЗВ(Тип("ДокументСсылка.РеестрСЗВ_6_2"));
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИсходнуюПачкуСЗВ64(Команда)
	ДобавитьПачкуСЗВ(Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_4"));
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИсходнуюПачкуРазделов6(Команда)
	ДобавитьПачкуСЗВ(Тип("ДокументСсылка.ПачкаРазделов6РасчетаРСВ_1"));
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	СохранитьИзмененияВКомплекте();
	
	Если ОтчетныйПериод < '20140101' Тогда 
		МассивОбъектовПечати = Новый Массив;
		
		МассивОбъектовПечати.Добавить(Объект.КомплектОбъект.Ссылка);
		
		Если Не Объект.КомплектОбъект.ОписьПачекСЗВ.Пустая() Тогда
			МассивОбъектовПечати.Добавить(Объект.КомплектОбъект.ОписьПачекСЗВ);
		КонецЕсли;
		
		Если Не Объект.КомплектОбъект.ВедомостьУплатыАДВ11.Пустая() Тогда
			МассивОбъектовПечати.Добавить(Объект.КомплектОбъект.ВедомостьУплатыАДВ11);
		КонецЕсли;	
		
		Для Каждого ПачкаСЗВ63 Из Объект.КомплектОбъект.СписокПачекСЗВ6_3 Цикл
			МассивОбъектовПечати.Добавить(ПачкаСЗВ63.ПачкаДокументов);
		КонецЦикла;	
		
		Для Каждого ПачкаСЗВ Из Объект.КомплектОбъект.СписокПачекСЗВ Цикл
			МассивОбъектовПечати.Добавить(ПачкаСЗВ.ПачкаДокументов);
		КонецЦикла;	
		
		СтрокаНеобходимыхФорм = НеобходимыеФормыПечати();
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Обработка.ПодготовкаКвартальнойОтчетностиВПФР", СтрокаНеобходимыхФорм, МассивОбъектовПечати, ЭтаФорма, Неопределено);
	КонецЕсли;	
		
	Если ЗначениеЗаполнено(Объект.КомплектОбъект.РСВ_1) Тогда
		МассивПечатаемыхОтчетов = Новый СписокЗначений;
		МассивПечатаемыхОтчетов.Добавить(Объект.КомплектОбъект.РСВ_1);
		РегламентированнаяОтчетностьКлиент.НапечататьОтчеты(МассивПечатаемыхОтчетов, "ПоказатьБланк");
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаДиск(Команда)
		
	Оповещение = Новый ОписаниеОповещения("ЗаписатьНаДискПродолжение", ЭтотОбъект);
	ПроверитьКомплектСЗапросомДальнейшегоДействия(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборСотрудников(Команда)
	КадровыйУчетКлиент.ПодобратьФизическихЛицОрганизации(Элементы.Сотрудники, Объект.Организация, АдресСпискаПодобранныхСотрудников(), Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗадолженностьНаНачалоПериода(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", Организация);
	
	Если ОтчетныйПериод < '20140101' Тогда
		ПериодЗадолженности = ОтчетныйПериод;
	Иначе
		ПериодЗадолженности = '00010101';
		
		Для Каждого ПачкаДокументов Из Объект.ДокументыКомплекта Цикл
			Если ЗначениеЗаполнено(ПачкаДокументов.КорректируемыйПериод) 
				И ПачкаДокументов.КорректируемыйПериод < '20140101'
				И ПачкаДокументов.КорректируемыйПериод > ПериодЗадолженности Тогда
				
				ПериодЗадолженности = ПачкаДокументов.КорректируемыйПериод;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
			
	Если ПериодЗадолженности = '00010101' Тогда
		ПериодЗадолженности = '20131001';
	КонецЕсли;	
	
	ПараметрыФормы.Вставить("ОтчетныйПериод", ПериодЗадолженности);

	ОткрытьФорму("Обработка.ПодготовкаКвартальнойОтчетностиВПФР.Форма.СведенияОВзносахИЗадолженностиВПФР", ПараметрыФормы);
КонецПроцедуры

&НаСервере
Процедура ОбновитьОтчетРСВ1(РСВСсылка)
	ИнтерфейсыВзаимодействияБРО.ОбновитьДанныеРеглОтчета("РегламентированныйОтчетРСВ1", 
		Объект.Организация, 
		Объект.ОтчетныйПериод,
		ПерсонифицированныйУчетКлиентСервер.ОкончаниеОтчетногоПериодаПерсУчета(Объект.ОтчетныйПериод),
		Объект.КомплектОбъект.РСВ_1);		
		
	ИнициализироватьДокументВФорме(Объект.КомплектОбъект.РСВ_1);		
КонецПроцедуры	

&НаКлиенте
Процедура ОбновитьРСВ1(Команда)
	ОбновитьОтчетРСВ1(Объект.КомплектОбъект.РСВ_1);
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСтаж(Команда)
	Если Модифицированность Тогда
		СохранитьИзмененияВРедактируемойПачке();
	КонецЕсли;	
	
	ДокументыПоПериодам = Новый Соответствие;
	
	Для Каждого ПачкаСЗВ Из Объект.ДокументыКомплекта Цикл
		Если ПачкаСЗВ.ТипСведенийСЗВ = ПредопределенноеЗначение("Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ") Тогда
			ПериодДокумента = ОтчетныйПериод;
		ИначеЕсли ПачкаСЗВ.ТипСведенийСЗВ = ПредопределенноеЗначение("Перечисление.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ") Тогда	
			ПериодДокумента = ПачкаСЗВ.КорректируемыйПериод;
		Иначе
			Продолжить;
		КонецЕсли;	
		
		ДокументыПериода = ДокументыПоПериодам.Получить(ПериодДокумента);
		
		Если ДокументыПериода = Неопределено Тогда
			ДокументыПериода = Новый Массив;
			ДокументыПоПериодам.Вставить(ПериодДокумента, ДокументыПериода);
		КонецЕсли;
		
		ДокументыПериода.Добавить(ПачкаСЗВ.Ссылка);
	КонецЦикла;
	
	ПараметрыОткрываемойФормы = Новый Структура("ДокументыПоПериодам, Организация, ОтчетныйПериод, ТолькоПросмотр", ДокументыПоПериодам, Организация, ОтчетныйПериод, ТолькоПросмотр);
		
	ОткрытьФорму("Обработка.ПодготовкаКвартальнойОтчетностиВПФР.Форма.РедактированиеСтажа", ПараметрыОткрываемойФормы);
	
КонецПроцедуры

// Стыковка с сервисом отправки через спецпредставителя ...
&НаКлиенте
Процедура ОтправитьВКонтролирующийОрган(Команда)
	
	СохранитьИзмененияВКомплекте();
	
	Оповещение = Новый ОписаниеОповещения("ОтправитьВКонтролирующийОрганЗавершение", ЭтотОбъект);
	ПроверитьКомплектСЗапросомДальнейшегоДействия(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьВКонтролирующийОрганЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	СформироватьФайлыРазделов6();
	ВыгрузитьРСВКомплекта();
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиВКонтролирующийОрган(ЭтаФорма, "ПФР");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВИнтернете(Команда)
	ВыгрузитьРСВКомплекта();
	СформироватьФайлыРазделов6();
	РегламентированнаяОтчетностьКлиент.ПроверитьВИнтернете(ЭтаФорма, "ПФР");	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителя(Команда)
	
	СохранитьИзмененияВКомплекте();
	
	Оповещение = Новый ОписаниеОповещения("ОтправитьЧерезПредставителяЗавершение", ЭтотОбъект);
	ПроверитьКомплектСЗапросомДальнейшегоДействия(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьЧерезПредставителяЗавершение(Результат, ДополнительныеПараметры) Экспорт 
	
	ВыгрузитьРСВКомплекта();
	СформироватьФайлыРазделов6();
	РегламентированнаяОтчетностьКлиент.ПриНажатииНаКнопкуОтправкиЧерезПредставителяВРегламентированномОтчете(ЭтаФорма, "ПФР");
	
КонецПроцедуры

&НаСервере
Функция СсылкаНаОтправляемыйДокумент() Экспорт 
	Возврат Объект.КомплектОбъект.Ссылка;	
КонецФункции

// ... Стыковка с сервисом отправки через спецпредставителя.

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ДополнитьФорму()
	Если Не ФормаДополнена Тогда 
		ЗарплатаКадрыОтображениеОшибок.ПриСозданииНаСервере(ЭтотОбъект, ОписаниеЭлементовСИндикациейОшибок(), ОписаниеПодчиненностиДанных());	
		ИменаДополняемыхТаблиц = Новый Массив;
		ИменаДополняемыхТаблиц.Добавить("Сотрудники");
		ИменаДополняемыхТаблиц.Добавить("ДанныеРСВИтогиПоТарифам");
		ИменаДополняемыхТаблиц.Добавить("ИтогиПоКатегориям");

		ПерсонифицированныйУчетФормы.ДобавитьЗаголовкиКПолямТаблицФормы(ЭтаФорма, ИменаДополняемыхТаблиц, ОписаниеКолонокЗаголовковТаблицФормы());
		
		ФормаДополнена = Истина;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработкуАктивизацииСтрокиДокументов(ЭлементИмя)
	
	ИмяАктивизированногоЭлемента = ЭлементИмя;
	ЗарплатаКадрыКлиент.ПодключитьОбработчикОжиданияОбработкиСобытия(ЭтаФорма, "ОбработатьАктивизациюСтрокиДокументов");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьАктивизациюСтрокиДокументов()
	
	ОписаниеТекущегоДокумента = Элементы.СписокДокументов.ТекущиеДанные;
	
	Если ОписаниеТекущегоДокумента <> Неопределено 
		И ОписаниеТекущегоДокумента.Ссылка <> ТекущийДокументСсылка Тогда
		
		ОценкаПроизводительностиКлиент.ЗамерВремени("ПриАктивизацииСтрокиВФормеКвартальнаяОтчетностьВПФР");
		
		ИнициализироватьДокументВФорме(ОписаниеТекущегоДокумента.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСостояниеКомплекта(Состояние)
	СостояниеКомплекта = Состояние;	
	КомплектОбъектСостояниеКомплектаПриИзмененииНаСервере();
	Оповестить("ЗаписьКомплектаПФР", Объект.Организация);
КонецПроцедуры	

&НаКлиенте
Процедура КомплектОбъектСостояниеКомплектаПриИзмененииНаСервере()
	Объект.МодифицированностьКомплекта = Истина;
	Объект.КомплектОбъект.СостояниеКомплекта = СостояниеКомплекта;
	
	СохранитьИзмененияВКомплектеНаСервере();
КонецПроцедуры

&НаСервере
Процедура СписокДокументовТипСведенийСЗВПриИзмененииНаСервере()
	ДанныеШапкиДокумента = Объект.ДокументыКомплекта.НайтиПоИдентификатору(Элементы.СписокДокументов.ТекущаяСтрока);;
	
	Если ТипЗнч(ДанныеШапкиДокумента.Ссылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		Объект.КомплектОбъект.КорректирующаяФормаРСВ_1 = ДанныеШапкиДокумента.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ;
		Объект.МодифицированностьКомплекта = Истина;
	ИначеЕсли ДанныеШапкиДокумента.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ Тогда
		
		Объект.СведенияОЗаработке.Очистить();
		Объект.ЗаписиОСтаже.Очистить();
		
		Для Каждого СтрокаСотрудник Из Объект.Сотрудники Цикл			
			СтрокаСотрудник.НачисленоСтраховая = 0;
			СтрокаСотрудник.УплаченоСтраховая = 0;
			СтрокаСотрудник.НачисленоНакопительная = 0;
			СтрокаСотрудник.УплаченоНакопительная = 0;
		КонецЦикла;	
	КонецЕсли;	
КонецПроцедуры	

&НаКлиенте
Процедура ОткрытьФормуРедактированияКарточкиДокумента()
	ДанныеТекущейСтроки = Элементы.Сотрудники.ТекущиеДанные;
	
	ДанныеШапкиТекущегоДокумента = Элементы.СписокДокументов.ТекущиеДанные;
	
	Период = Объект.ОтчетныйПериод;
	
	Если ДанныеШапкиТекущегоДокумента <> Неопределено
		И ДанныеШапкиТекущегоДокумента.ТипСведенийСЗВ <> ПредопределенноеЗначение("Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ") Тогда
		
		Период = ДанныеШапкиТекущегоДокумента.КорректируемыйПериод;
	КонецЕсли;	
	
	Если ДанныеТекущейСтроки <> Неопределено Тогда	
		ДанныеТекущегоДокументаПоСотрудникуВоВременноеХранилище();
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("АдресВоВременномХранилище", АдресДанныхТекущегоДокументаВХранилище);
		ПараметрыОткрытияФормы.Вставить("РедактируемыйДокументСсылка", Объект.СсылкаНаРедактируемыйДокумент);
		ПараметрыОткрытияФормы.Вставить("Сотрудник", ДанныеТекущейСтроки.Сотрудник);
		ПараметрыОткрытияФормы.Вставить("ТипСведенийСЗВ", ДанныеШапкиТекущегоДокумента.ТипСведенийСЗВ);
		ПараметрыОткрытияФормы.Вставить("Организация", Организация);
		ПараметрыОткрытияФормы.Вставить("Период", Период);
		ПараметрыОткрытияФормы.Вставить("ИсходныйНомерСтроки", ДанныеТекущейСтроки.ИсходныйНомерСтроки);
		ПараметрыОткрытияФормы.Вставить("ТолькоПросмотр", ТолькоПросмотр);
		ПараметрыОткрытияФормы.Вставить("ОтменаИсправленийДоступна", Истина);
		
		Если ТипЗнч(Объект.СсылкаНаРедактируемыйДокумент) = Тип("ДокументСсылка.ПачкаРазделов6РасчетаРСВ_1") Тогда
			ОткрытьФорму("Обработка.ПодготовкаКвартальнойОтчетностиВПФР.Форма.ФормаРедактированияРаздела6РСВ_1", ПараметрыОткрытияФормы, ЭтаФорма);	
		Иначе	
			ОткрытьФорму("Обработка.ПодготовкаКвартальнойОтчетностиВПФР.Форма.ФормаКарточкиСЗВ6", ПараметрыОткрытияФормы, ЭтаФорма);
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры	

&НаКлиенте
Функция РежимВыбораПериода(ВыбираемыйПериод) Экспорт
	Год = Год(ВыбираемыйПериод);
	Если Год < 2011 Тогда
		Возврат "Полугодие";
	Иначе
		Возврат "Квартал";
	КонецЕсли; 
КонецФункции

&НаСервере
Процедура ДобавитьСотрудников(СписокСотрудников)
	ДанныеШапкиДокумента = ТекущаяСтрокаСпискаДокументов(ЭтаФорма);
	
	СтруктураДанныхДокумента = Новый Структура;
	СтруктураДанныхДокумента.Вставить("Ссылка", Объект.СсылкаНаРедактируемыйДокумент);
	СтруктураДанныхДокумента.Вставить("Организация", Объект.Организация);
	СтруктураДанныхДокумента.Вставить("ОтчетныйПериод", Объект.ОтчетныйПериод);
	СтруктураДанныхДокумента.Вставить("ТипСведенийСЗВ", ДанныеШапкиДокумента.ТипСведенийСЗВ);
	СтруктураДанныхДокумента.Вставить("КатегорияЗастрахованныхЛиц", ДанныеШапкиДокумента.КатегорияЗастрахованныхЛиц);
	СтруктураДанныхДокумента.Вставить("ТипДоговора", ДанныеШапкиДокумента.ТипДоговора);
	СтруктураДанныхДокумента.Вставить("КорректируемыйПериод", ДанныеШапкиДокумента.КорректируемыйПериод);
	СтруктураДанныхДокумента.Вставить("Сотрудники", Объект.Сотрудники);
	СтруктураДанныхДокумента.Вставить("ЗаписиОСтаже", Объект.ЗаписиОСтаже);
	СтруктураДанныхДокумента.Вставить("СведенияОЗаработке", Объект.СведенияОЗаработке);
	СтруктураДанныхДокумента.Вставить("СведенияОЗаработкеНаВредныхИТяжелыхРаботах", Объект.СведенияОЗаработкеНаВредныхИТяжелыхРаботах);
	СтруктураДанныхДокумента.Вставить("КорректирующиеСведения", Объект.КорректирующиеСведения);

	ПерсонифицированныйУчет.ДокументыСЗВОбработкаПодбораНаСервере(СтруктураДанныхДокумента, СписокСотрудников, Истина);	
	Если СписокСотрудников.Количество() > 0 Тогда
		Модифицированность = Истина;
		
		Если Объект.Сотрудники.Количество() > 0  Тогда
			Элементы.Сотрудники.ТекущаяСтрока = Объект.Сотрудники[Объект.Сотрудники.Количество() - 1].ПолучитьИдентификатор();
		КонецЕсли;	
	КонецЕсли;	
	
	Если Объект.Сотрудники.Количество() > 0 Тогда
		ОписаниеЗаголовковТаблицы = ОписаниеКолонокЗаголовковТаблицы("Сотрудники");
		ПерсонифицированныйУчетКлиентСервер.УстановитьЗаголовкиВТаблице(ЭтотОбъект, Объект.Сотрудники, ОписаниеЗаголовковТаблицы);
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьФайлыКомплектаНаДиск()
	Оповещение = Новый ОписаниеОповещения("ЗаписьНаДискПослеПодключенияРасширенияРаботыСФайлами", ЭтотОбъект);	
	
	НачатьПодключениеРасширенияРаботыСФайлами(Оповещение);
КонецПроцедуры

&НаКлиенте 
Процедура ЗаписьНаДискПослеПодключенияРасширенияРаботыСФайлами(Подключено, ДополнительныеПараметры) Экспорт
	СформироватьФайлыРазделов6();
	
	МассивФайлов = ОписаниеФайловКомплекта();
					
	ПолучаемыеФайлы = Новый Массив;
	Для Каждого ОписаниеФайла Из МассивФайлов Цикл
		ПолучаемыйФайл = Новый ОписаниеПередаваемогоФайла(ВРег(ОписаниеФайла.ИмяФайла), ОписаниеФайла.СсылкаНаДвоичныеДанныеФайла);
		ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Объект.КомплектОбъект.РСВ_1) Тогда
		МассивСохраняемыхОтчетов = Новый СписокЗначений;
		МассивСохраняемыхОтчетов.Добавить(Объект.КомплектОбъект.РСВ_1);
		
		ОшибкиОтчета = Новый Массив;
		
		ФайлВыгрузкиВоВременномХранилище = Новый Структура;
		РегламентированнаяОтчетностьКлиент.ВыгрузитьОтчеты(МассивСохраняемыхОтчетов, , ОшибкиОтчета, , Истина, ФайлВыгрузкиВоВременномХранилище);
		
		Если ФайлВыгрузкиВоВременномХранилище.Свойство("АдресФайлаВыгрузкиВоВременномХранилище")
			И ФайлВыгрузкиВоВременномХранилище.Свойство("ИмяФайлаВыгрузки", Объект.КомплектОбъект.ИмяФайлаВыгрузкиРСВ) Тогда
			
			ПолучаемыйФайл = Новый ОписаниеПередаваемогоФайла(ВРег(ФайлВыгрузкиВоВременномХранилище.ИмяФайлаВыгрузки), ФайлВыгрузкиВоВременномХранилище.АдресФайлаВыгрузкиВоВременномХранилище);
			ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);	
		КонецЕсли;	
	КонецЕсли;
	
	Если Подключено Тогда
		ЗаписатьФайлыНаДискКомплектом(ПолучаемыеФайлы);	
	Иначе
		 ЗаписатьФайлыНаДискПоОдному(ПолучаемыеФайлы);	
	КонецЕсли;	
	
	
КонецПроцедуры	

&НаКлиенте 
Процедура ЗаписатьФайлыНаДискКомплектом(ПолучаемыеФайлы)
	ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	ВыборФайла.МножественныйВыбор = Ложь;
	
	Оповещение = Новый ОписаниеОповещения("ПослеПолученияФайловНаДиск", ЭтотОбъект);
	
	НачатьПолучениеФайлов(Оповещение, ПолучаемыеФайлы, ВыборФайла, Истина);		
КонецПроцедуры	

&НаКлиенте 
Процедура ЗаписатьФайлыНаДискПоОдному(ПолучаемыеФайлы)
	Для Каждого ОписаниеФайла Из ПолучаемыеФайлы Цикл
		ПолучитьФайл(ОписаниеФайла.Хранение, ОписаниеФайла.Имя, Истина);
	КонецЦикла;
КонецПроцедуры
	
&НаКлиенте 
Процедура ПослеПолученияФайловНаДиск(ПолученныеФайлы, ДополнительныеПараметры) Экспорт
	ФайлыЗаписаны = ПолученныеФайлы <> Неопределено; 	
КонецПроцедуры	

&НаСервере
Процедура СформироватьФайлыРазделов6()
	СписокДокументов = Новый Массив;
	
	Для Каждого ОписаниеДокумента Из Объект.ДокументыКомплекта Цикл
		СписокДокументов.Добавить(ОписаниеДокумента.Ссылка);
	КонецЦикла;
	
	ДатаПодписи = '00010101';
	Если ЗначениеЗаполнено(Объект.КомплектОбъект.РСВ_1) Тогда
		ДатаПодписи = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.КомплектОбъект.РСВ_1, "ДатаПодписи");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаПодписи) Тогда
		ДатаПодписи = ТекущаяДатаСеанса();
	КонецЕсли;	
		
	Документы.ПачкаРазделов6РасчетаРСВ_1.СформироватьФайлыДокументов(СписокДокументов, ДатаПодписи);
КонецПроцедуры	

&НаСервере
Функция ОписаниеФайловКомплекта()
	СохранитьИзмененияВКомплектеНаСервере();
	
	ОписаниеФайлов = Новый Массив;
	
	Если Не Объект.КомплектОбъект.ОписьПачекСЗВ.Пустая() Тогда
		 ОписаниеФайлов.Добавить(ЗарплатаКадры.ПолучитьДанныеФайла(Объект.КомплектОбъект.ОписьПачекСЗВ, УникальныйИдентификатор, Истина));
	КонецЕсли;	
		
	Для Каждого ОписаниеПачки Из Объект.КомплектОбъект.СписокПачекСЗВ Цикл
		 ОписаниеФайлов.Добавить(ЗарплатаКадры.ПолучитьДанныеФайла(ОписаниеПачки.ПачкаДокументов,УникальныйИдентификатор, Истина));		
	КонецЦикла;	
	
	Для Каждого ОписаниеПачки Из Объект.КомплектОбъект.СписокПачекСЗВ6_3 Цикл
		 ОписаниеФайлов.Добавить(ЗарплатаКадры.ПолучитьДанныеФайла(ОписаниеПачки.ПачкаДокументов,УникальныйИдентификатор, Истина));		
	КонецЦикла;	

	ДополнительныеФайлы = Новый Массив;
	РаботаСФайлами.ЗаполнитьПрисоединенныеФайлыКОбъекту(РедактируемыйКомплектСсылка, ДополнительныеФайлы);
	
	Для Каждого Файл Из ДополнительныеФайлы Цикл  
		Если Не ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл, "ПометкаУдаления") Тогда
			ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
			ПараметрыДанныхФайла.ИдентификаторФормы = УникальныйИдентификатор;
			ПараметрыДанныхФайла.ПолучатьСсылкуНаДвоичныеДанные = Истина;
			ОписаниеФайлов.Добавить(РаботаСФайлами.ДанныеФайла(Файл, ПараметрыДанныхФайла));
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат ОписаниеФайлов;
КонецФункции

&НаКлиенте
Функция НеобходимыеФормыПечати()
	НеобходимыеФормы = "";
	Если Не Объект.КомплектОбъект.ВедомостьУплатыАДВ11.Пустая() Тогда
		НеобходимыеФормы = НеобходимыеФормы + ",ФормаАДВ_11";
	КонецЕсли;	
	
	Если НЕ Объект.КомплектОбъект.ОписьПачекСЗВ.Пустая() Тогда
		НеобходимыеФормы = НеобходимыеФормы + ",ФормаАДВ_6_2";
	КонецЕсли;	
	
	НеобходимаСЗВ6_1 = Ложь;
	НеобходимаСЗВ6_2 = Ложь;
	НеобходимаСЗВ6_3 = Ложь;
	НеобходимаСЗВ6_4 = Ложь;
	НеобходимаРаздел6РСВ_1 = Ложь;
	Для Каждого ОписаниеДокумента Из Объект.ДокументыКомплекта Цикл
		Если ТипЗнч(ОписаниеДокумента.Ссылка) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_1") Тогда
			НеобходимаСЗВ6_1 = Истина;
		ИначеЕсли ТипЗнч(ОписаниеДокумента.Ссылка) = Тип("ДокументСсылка.РеестрСЗВ_6_2") Тогда
			НеобходимаСЗВ6_2 = Истина;
		ИначеЕсли ТипЗнч(ОписаниеДокумента.Ссылка) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_3") Тогда 
			НеобходимаСЗВ6_3 = Истина;
		ИначеЕсли ТипЗнч(ОписаниеДокумента.Ссылка) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_4") Тогда 
			НеобходимаСЗВ6_4 = Истина;
		ИначеЕсли ТипЗнч(ОписаниеДокумента.Ссылка) = Тип("ДокументСсылка.ПачкаРазделов6РасчетаРСВ_1") Тогда 
			НеобходимаРаздел6РСВ_1 = Истина;	
		КонецЕсли;	
	КонецЦикла;		
	
	Если НеобходимаСЗВ6_1 Тогда
		НеобходимыеФормы = НеобходимыеФормы + ",ФормаСЗВ_6_1,СписокЗастрахованныхЛиц,ФормаАДВ_6_3";
	КонецЕсли;
	
	Если НеобходимаСЗВ6_2 Тогда
		НеобходимыеФормы = НеобходимыеФормы + ",ФормаСЗВ_6_2";
	КонецЕсли;
	
	Если НеобходимаСЗВ6_3 Тогда
		НеобходимыеФормы = НеобходимыеФормы + ",ФормаСЗВ_6_3,ФормаАДВ_6_4";
	КонецЕсли;
	
	Если НеобходимаСЗВ6_4 Тогда
		НеобходимыеФормы = НеобходимыеФормы + ",ФормаСЗВ_6_4,ФормаАДВ_6_5";
	КонецЕсли;
		
	Возврат Сред(НеобходимыеФормы, 2);
		
КонецФункции

#Область ОбработчикиСобытийЭлементовШапкиСервернаяЧасть

&НаСервере
Процедура РедактируемыйКомплектПриИзмененииНаСервере()
	ОбработкаОбъект = ДанныеФормыВОбъект(); 
	
	ОбработкаОбъект.ДанныеКомплектаВОбъектПоСсылке(РедактируемыйКомплектСсылка, Истина);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	ПриЧтенииДанныхКомплекта(ОбработкаОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область ФормированиеКомплектаСведений

&НаКлиенте
Процедура Подключаемый_СформироватьКомплектПослеОткрытияФормы()
	Если Открыта() Тогда
		Обновить(Ложь);
		ФормироватьКорректирующуюФорму = Ложь;
	Иначе
		ПодключитьОбработчикОжидания("Подключаемый_СформироватьКомплектПослеОткрытияФормы", 0.1, Истина);
	КонецЕсли;	
КонецПроцедуры	

&НаКлиенте
Процедура Обновить(УчитыватьИсправления, ОбновлятьКорректирующиеСведения = Истина, КорректирующийКомплект = Ложь)
	
	Результат = РезультатОбновленияКомплектаСведенийВДлительнойОперации(УчитыватьИсправления, ОбновлятьКорректирующиеСведения);
	
	Если Результат.ЗаданиеВыполнено Тогда
		ОповеститьОбИзменении(Объект.КомплектОбъект.Ссылка);
	Иначе
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища		 = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияОбновленияКомплектаСведений", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
	
	Оповестить("ЗаписьКомплектаПФР", Объект.Организация);
КонецПроцедуры

&НаКлиенте
Процедура ПерераспределитьУплаченныеВзносы()
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;	
	
	Результат = РезультатПерераспределенияУплаченныхВзносов();
	
	Если Результат.ЗаданиеВыполнено Тогда
		ОповеститьОбИзменении(ТекущийДокументСсылка);
	Иначе
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища		 = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияПерераспределенияУплаченныхВзносов", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РезультатОбновленияКомплектаСведенийВДлительнойОперации(УчитыватьИсправления, ОбновлятьКорректирующиеСведения = Истина)
	
	СохранитьИзмененияВРедактируемойПачке();
	
	СтруктураПараметров = Справочники.КомплектыОтчетностиПерсучета.ПараметрыФормированияСведенийКвартальнойОтчетности();
	
	Если Объект.КомплектОбъект.Ссылка.Пустая() Тогда
		Если ФормироватьКорректирующуюФорму Тогда
			СтруктураПараметров.КорректирующаяФормаРСВ_1 = Истина;
			СтруктураПараметров.ФормироватьИсходныеСведенияВКорректирующейФорме = Ложь;
		Иначе
			СтруктураПараметров.КорректирующаяФормаРСВ_1 = Ложь;
		КонецЕсли;
		
	Иначе
		СтруктураПараметров.КорректирующаяФормаРСВ_1 = Объект.КомплектОбъект.КорректирующаяФормаРСВ_1;
	КонецЕсли;	
	
	СтруктураПараметров.УчитыватьИсправления = УчитыватьИсправления;
	СтруктураПараметров.ОбновлятьКорректирующиеСведения = ОбновлятьКорректирующиеСведения;
		
	Справочники.КомплектыОтчетностиПерсучета.ЗаполнитьПараметрыФормированияКомплектаСведений(
		СтруктураПараметров,
		Объект.Организация,
		Объект.ОтчетныйПериод,
		Объект.КомплектОбъект);
	
	НаименованиеЗадания = НСтр("ru = 'Формирование комплекта сведений квартальной отчетности'");
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Справочники.КомплектыОтчетностиПерсучета.СформироватьСведенияКвартальнойОтчетности",
		СтруктураПараметров,
		НаименованиеЗадания);
	
	АдресХранилища = Результат.АдресХранилища;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ПрочитатьДанныеКомплектаИзВременногоХранилища();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СформироватьКорректирующиеСведения(Параметр)
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;	
	
	Результат = РезультатФормированияКорректирующихДокументовВДлительнойОперации(Параметр);
		
	Если Не Результат.ЗаданиеВыполнено Тогда
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища		 = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияФормированияКорректирующихДокументов", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	КонецЕсли;
КонецПроцедуры	

&НаСервере
Функция РезультатФормированияКорректирующихДокументовВДлительнойОперации(ПараметрыФормированияСведений)
	
	СохранитьИзмененияВРедактируемойПачке();
	
	ОбработкаОбъект = ДанныеФормыВОбъект();
	
	СтруктураПараметров = ОбработкаОбъект.ПараметрыФормированияКорректирующихСведений();
	
	СтруктураПараметров.КорректируемыйПериод = ПараметрыФормированияСведений.КорректируемыйПериод;
	Если ПараметрыФормированияСведений.СписокФизическихЛиц <> Неопределено
		И ПараметрыФормированияСведений.СписокФизическихЛиц.Количество() = 0  Тогда
		
		СтруктураПараметров.СписокФизическихЛиц = Неопределено;	
	Иначе	
		СтруктураПараметров.СписокФизическихЛиц = ПараметрыФормированияСведений.СписокФизическихЛиц;
	КонецЕсли;	
	СтруктураПараметров.ВариантФормирования = ПараметрыФормированияСведений.ВариантФормирования;
	
	Если ПараметрыФормированияСведений.ВариантФормирования <> Перечисления.ВариантыФормированияКорректирующихСведенийВПФР.КорректировкаСтажа
		И ПараметрыФормированияСведений.ВариантФормирования <> Перечисления.ВариантыФормированияКорректирующихСведенийВПФР.РучнойВводДокументов Тогда
		
		СтруктураПараметров.ФормироватьКорректирующуюФормуРСВ = Истина;
	КонецЕсли;	
	
	НаименованиеЗадания = НСтр("ru = 'Формирование корректирующих сведений'");
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Справочники.КомплектыОтчетностиПерсучета.СформироватьКорректирующиеСведения",
		СтруктураПараметров,
		НаименованиеЗадания);
	
	АдресХранилища = Результат.АдресХранилища;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ПрочитатьКорректирующиеСведенияИзВременногоХранилища();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПрочитатьДанныеКомплектаИзВременногоХранилища()
	
	ОбработкаОбъект = ДанныеФормыВОбъект();
	
	ОбработкаОбъект.ЗаполнитьДанныеКомплектаИзВременногоХранилища(АдресХранилища);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	РедактируемыйКомплектСсылка = Объект.КомплектОбъект.Ссылка;
	
	ПриЧтенииДанныхКомплекта(ОбработкаОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьКорректирующиеСведенияИзВременногоХранилища()
	
	ОбработкаОбъект = ДанныеФормыВОбъект();
	
	ОбработкаОбъект.ЗаполнитьКорректирующиеСведенияИзВременногоХранилища(АдресХранилища);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	РедактируемыйКомплектСсылка = Объект.КомплектОбъект.Ссылка;
	
	ПриЧтенииДанныхКомплекта(ОбработкаОбъект, Ложь);
	
КонецПроцедуры

&НаСервере
Функция РезультатПерераспределенияУплаченныхВзносов()
	
	СохранитьИзмененияВРедактируемойПачке();
	
	СтруктураПараметров = Справочники.КомплектыОтчетностиПерсучета.СтруктураПараметровОбновленияВзносов();
	
	СтруктураПараметров.СписокПачекСЗВ = Объект.КомплектОбъект.СписокПачекСЗВ.Выгрузить();
	СтруктураПараметров.Организация = Объект.Организация;
	СтруктураПараметров.ПериодРасчета = Объект.ОтчетныйПериод;
	СтруктураПараметров.РСВ_1 = Объект.КомплектОбъект.РСВ_1;
	
	НаименованиеЗадания = НСтр("ru = 'Перераспределение уплаченных взносов в комплекте сведений квартальной отчетности'");
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Справочники.КомплектыОтчетностиПерсучета.ОбновитьУплаченныеВзносыВКомплекте",
		СтруктураПараметров,
		НаименованиеЗадания);
	
	АдресХранилища = Результат.АдресХранилища;
	
	Если Результат.ЗаданиеВыполнено Тогда
		РезультатПерераспределенияВзносовВДанныеФормы()	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура РезультатПерераспределенияВзносовВДанныеФормы()
	Объект.МодифицированностьОписи = Истина;
	
	ИнициализироватьДокументВФорме(ТекущийДокументСсылка);
	
	ОбновляемыеДокументы = Новый Массив;
	
	Для Каждого СтрокаТаблицы Из Объект.ДокументыКомплекта Цикл
		ОбновляемыеДокументы.Добавить(СтрокаТаблицы.Ссылка);
	КонецЦикла;
	
	ОбновитьДанныеШапкиДокументов(ОбновляемыеДокументы);
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияОбновленияКомплектаСведений()
	
	ПроверитьВыполнениеЗадания(
		"Подключаемый_ПроверитьВыполнениеЗаданияОбновленияКомплектаСведений",
		,
		Объект.КомплектОбъект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияПерераспределенияУплаченныхВзносов()
	
	ПроверитьВыполнениеЗадания(
		"Подключаемый_ПроверитьВыполнениеЗаданияПерераспределенияУплаченныхВзносов",
		,
		ТекущийДокументСсылка);
			
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияПроверкиКомплектаСведений()
	
	ПроверитьВыполнениеЗадания(
		"Подключаемый_ПроверитьВыполнениеЗаданияПроверкиКомплектаСведений",
		,
		Объект.КомплектОбъект.Ссылка);
	
КонецПроцедуры
	
&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияПроверкиКомплектаСведенийСПроверкойСтороннимиПрограммами()
	
	ПроверитьВыполнениеЗадания(
		"Подключаемый_ПроверитьВыполнениеЗаданияПроверкиКомплектаСведенийСПроверкойСтороннимиПрограммами",
		,
		Объект.КомплектОбъект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияОтменыИсправления()
	
	ПроверитьВыполнениеЗадания(
		"Подключаемый_ПроверитьВыполнениеЗаданияОтменыИсправления",
		Новый Структура("ИмяСобытия, Параметр", "ОтмененаИсправления", Новый Структура("АдресХранилища", АдресДанныхТекущегоДокументаВХранилище)));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияФормированияКорректирующихДокументов()
	
	ПроверитьВыполнениеЗадания(
		"Подключаемый_ПроверитьВыполнениеЗаданияФормированияКорректирующихДокументов");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыполнениеЗадания(ИмяОбработчика, СтруктураОповещения = Неопределено, СсылкаОповещения = Неопределено)
	
	Попытка
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
				ВыполнитьДействиеПослеДлительнойОперации(ИмяОбработчика);
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
				Если СтруктураОповещения <> Неопределено Тогда
					Оповестить(СтруктураОповещения.ИмяСобытия, СтруктураОповещения.Параметр, ЭтаФорма);
				КонецЕсли;
				Если СсылкаОповещения <> Неопределено Тогда
					ОповеститьОбИзменении(СсылкаОповещения);
				КонецЕсли;
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания(
					ИмяОбработчика,
					ПараметрыОбработчикаОжидания.ТекущийИнтервал,
					Истина);
			КонецЕсли;
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеПослеДлительнойОперации(ИмяОбработчикаЗадания)
	Если ИмяОбработчикаЗадания = "Подключаемый_ПроверитьВыполнениеЗаданияОбновленияКомплектаСведений" Тогда
		ПрочитатьДанныеКомплектаИзВременногоХранилища();
	ИначеЕсли ИмяОбработчикаЗадания = "Подключаемый_ПроверитьВыполнениеЗаданияПерераспределенияУплаченныхВзносов" Тогда
		РезультатПерераспределенияВзносовВДанныеФормы();
	ИначеЕсли ИмяОбработчикаЗадания = "Подключаемый_ПроверитьВыполнениеЗаданияОтменыИсправления" Тогда
		ИнициализироватьДанныеПослеОтменыИсправлений();
	ИначеЕсли ИмяОбработчикаЗадания = "Подключаемый_ПроверитьВыполнениеЗаданияФормированияКорректирующихДокументов" Тогда	
		ПрочитатьКорректирующиеСведенияИзВременногоХранилища();	
		Оповестить("ЗаписьКомплектаПФР", Организация);
	КонецЕсли;	
КонецПроцедуры	

#КонецОбласти

#Область РедактированиеСпискаДокументов

&НаСервере
Процедура ПоместитьКорректирующиеДокументыВКомплект(КорректируемыйПериод, ОписаниеДокументов)
	Если ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;	
	
	ОбработкаОбъект = ДанныеФормыВОбъект();
	
	ОбработкаОбъект.ЗаполнитьСписокКорректирующихДокументовЗаПериод(КорректируемыйПериод, ОписаниеДокументов);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	РедактируемыйКомплектСсылка = Объект.КомплектОбъект.Ссылка;
	
	ПриЧтенииДанныхКомплекта(ОбработкаОбъект, Ложь);
	
КонецПроцедуры	

&НаСервере
Процедура ДобавитьПачкуСЗВ(ТипДокумента, КорректирующиеСведения = Ложь)
	ОбработкаОбъект = ДанныеФормыВОбъект();
	
	ОбработкаОбъект.ДобавитьПачкуСЗВ(ТипДокумента, КорректирующиеСведения);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	ПриЧтенииДанныхКомплекта(ОбработкаОбъект, Ложь);
	
КонецПроцедуры	

&НаСервере
Процедура ДобавитьСуществующиеДокументыНаСервере(ДобавляемыеДокументы)
	ОбработкаОбъект = ДанныеФормыВОбъект();
	
	ОбработкаОбъект.ДобавитьСуществующиеДокументы(ДобавляемыеДокументы);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	ПриЧтенииДанныхКомплекта(ОбработкаОбъект, Ложь);
КонецПроцедуры	

&НаСервере
Процедура УдалитьДокументы(Знач ВыделенныеСтроки)
	Если ВыделенныеСтроки.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;	
	
	СписокДокументов = Новый Массив;
	
	Для Каждого ИдентификаторСтроки Из ВыделенныеСтроки Цикл
		СтрокаТаблицы = Объект.ДокументыКомплекта.НайтиПоИдентификатору(ИдентификаторСтроки);
		
		СписокДокументов.Добавить(СтрокаТаблицы.Ссылка);
	КонецЦикла;	
			
	ОбработкаОбъект = ДанныеФормыВОбъект();
	
	ОбработкаОбъект.УдалитьДокументы(СписокДокументов);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
		
	ПриЧтенииДанныхКомплекта(ОбработкаОбъект, Ложь);	
КонецПроцедуры	

#КонецОбласти

#Область ОтменаИсправлений

&НаКлиенте
Процедура ОтменитьИсправленияПоВзносам(АдресДанныхТекущегоДокумента, ВладелецФормыДлительнойОперации) Экспорт
	
	ДанныеТекущегоДокументаПоСотрудникуВДанныеФормы(АдресДанныхТекущегоДокумента);
	СохранитьИзмененияВРедактируемойПачке();
	
	Результат = РезультатОтменыИсправленияПоВзносамВДлительнойОперации();
	
	Если Результат.ЗаданиеВыполнено Тогда
		Оповестить("ОтмененаИсправления", Новый Структура("АдресХранилища", АдресДанныхТекущегоДокументаВХранилище));
	Иначе
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища		 = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияОтменыИсправления", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ВладелецФормыДлительнойОперации, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РезультатОтменыИсправленияПоВзносамВДлительнойОперации() Экспорт
	
	СтруктураПараметров  = Справочники.КомплектыОтчетностиПерсучета.ПараметрыОтменыИсправленийПоВзносам();
	СтруктураПараметров.Комплект = Объект.КомплектОбъект.Ссылка;
	СтруктураПараметров.Организация = Объект.Организация;
	СтруктураПараметров.ОтчетныйПериод = Объект.ОтчетныйПериод;
	
	Для Каждого ПачкаСЗВ Из Объект.ДокументыКомплекта Цикл
		СтруктураПараметров.ДокументыКомплекта.Добавить(ПачкаСЗВ.Ссылка);
	КонецЦикла;
	
	ДанныеШапки = СтрокаСпискаДокументовПоСсылке(ЭтаФорма, Объект.СсылкаНаРедактируемыйДокумент);
	
	СтруктураПараметров.КатегорияЗастрахованныхЛиц = ДанныеШапки.КатегорияЗастрахованныхЛиц;
	СтруктураПараметров.ТипСведенийСЗВ = ДанныеШапки.ТипСведенийСЗВ;
	
	Если ДанныеШапки.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ Тогда 
		СтруктураПараметров.ПериодРасчета = Объект.ОтчетныйПериод;
	Иначе
		СтруктураПараметров.ПериодРасчета = ДанныеШапки.КорректируемыйПериод;
	КонецЕсли;
	
	СтруктураПараметров.ТипДоговора = ?(ЗначениеЗаполнено(ДанныеШапки.ТипДоговора), ДанныеШапки.ТипДоговора, Неопределено);
		
	ДанныеТекущейСтрокиСотрудники = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);
	
	СтруктураПараметров.Сотрудник = ДанныеТекущейСтрокиСотрудники.Сотрудник;
	
	НаименованиеЗадания = НСтр("ru = 'Отмена исправлений по взносам'");
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Справочники.КомплектыОтчетностиПерсучета.ОтменитьИсправленияВзносовИЗаработка",
		СтруктураПараметров,
		НаименованиеЗадания);
	
	АдресХранилища = Результат.АдресХранилища;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ИнициализироватьДанныеПослеОтменыИсправлений();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОтменитьИсправленияПоСтажу(АдресДанныхТекущегоДокумента, ВладелецФормыДлительнойОперации) Экспорт
	
	ДанныеТекущегоДокументаПоСотрудникуВДанныеФормы(АдресДанныхТекущегоДокумента);
	СохранитьИзмененияВРедактируемойПачке();
	
	Результат = РезультатОтменыИсправленияПоСтажуВДлительнойОперации();
	
	Если Результат.ЗаданиеВыполнено Тогда
		Оповестить("ОтмененаИсправления", Новый Структура("АдресХранилища", АдресДанныхТекущегоДокументаВХранилище));
	Иначе
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища		 = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияОтменыИсправления", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ВладелецФормыДлительнойОперации, ИдентификаторЗадания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РезультатОтменыИсправленияПоСтажуВДлительнойОперации() Экспорт
	
	СтруктураПараметров  = Справочники.КомплектыОтчетностиПерсучета.ПараметрыОтменыИсправленийПоСтажу();
	СтруктураПараметров.Комплект = Объект.КомплектОбъект.Ссылка;
	СтруктураПараметров.Организация = Объект.Организация;
	СтруктураПараметров.ОтчетныйПериод = Объект.ОтчетныйПериод;
	
	Для Каждого ПачкаСЗВ Из Объект.ДокументыКомплекта Цикл
		СтруктураПараметров.ДокументыКомплекта.Добавить(ПачкаСЗВ.Ссылка);
	КонецЦикла;
	
	ДанныеШапки = СтрокаСпискаДокументовПоСсылке(ЭтаФорма, Объект.СсылкаНаРедактируемыйДокумент);
	
	СтруктураПараметров.ТипСведенийСЗВ = ДанныеШапки.ТипСведенийСЗВ;
	
	Если ДанныеШапки.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ Тогда 
		СтруктураПараметров.ПериодРасчета = Объект.ОтчетныйПериод;
	Иначе
		СтруктураПараметров.ПериодРасчета = ДанныеШапки.КорректируемыйПериод;
	КонецЕсли;
		
	ДанныеТекущейСтрокиСотрудники = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);
	
	СтруктураПараметров.Сотрудник = ДанныеТекущейСтрокиСотрудники.Сотрудник;
	
	НаименованиеЗадания = НСтр("ru = 'Отмена исправлений по взносам'");
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Справочники.КомплектыОтчетностиПерсучета.ОтменитьИсправленияСтажа",
		СтруктураПараметров,
		НаименованиеЗадания);
	
	АдресХранилища = Результат.АдресХранилища;
	
	Если Результат.ЗаданиеВыполнено Тогда
		ИнициализироватьДанныеПослеОтменыИсправлений();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьДанныеПослеОтменыИсправлений()
	
	Модифицированность = Ложь;
	
	Объект.МодифицированностьОписи = Истина;
	
	ИнициализироватьДокументВФорме(Объект.СсылкаНаРедактируемыйДокумент);
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если Результат <> Неопределено Тогда
		СтруктураПоиска = Новый Структура("Сотрудник", Результат.Сотрудник);
		
		СтрокиПоСотруднику = Объект.Сотрудники.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиПоСотруднику.Количество() > 0 Тогда
			Элементы.Сотрудники.ТекущаяСтрока = СтрокиПоСотруднику[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
	ДанныеТекущегоДокументаПоСотрудникуВоВременноеХранилище();
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаЗаполнения

&НаКлиенте
Процедура ПроверитьДанныеКомплекта(Отказ = Ложь, ПроверятьСтороннимиПрограммами = Ложь)
	
	ОшибкиКомплекта = Новый Массив;
	
	ПроверитьРСВВстроеннойПроверкой(ОшибкиКомплекта, Отказ);
	
	ПроверитьДанныеКомплектаНаСервере(ОшибкиКомплекта, Отказ);
	
	Если ПроверятьСтороннимиПрограммами Тогда
		ПроверкаКомплектаСтороннимиПрограммами(Отказ);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКомплектСтороннимиПрограммами()
	
	ВыгрузитьРСВКомплекта(Ложь);
	
	Если Модифицированность
		Или Объект.МодифицированностьОписи Тогда
		
		СохранитьИзмененияВКомплекте();
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	
	ПроверяемыеОбъекты = Новый Массив;
	ПроверяемыеОбъекты.Добавить(Объект.КомплектОбъект.Ссылка);
	
	СформироватьФайлыРазделов6();
	
	ПараметрыОткрытия.Вставить("СсылкиНаПроверяемыеОбъекты", ПроверяемыеОбъекты);
	ПараметрыОткрытия.Вставить("РСВ_1", Объект.КомплектОбъект.РСВ_1);
	ПараметрыОткрытия.Вставить("АдресФайлаВыгрузкиРСВ", АдресФайлаВыгрузкиРСВ);
    ПараметрыОткрытия.Вставить("ИмяФайлаВыгрузкиРСВ", ИмяФайлаВыгрузкиРСВ);
	ПараметрыОткрытия.Вставить("ЕдинаяОтчетностьПФР", ОтчетныйПериод >= '20140101');
	
	ОткрытьФорму("ОбщаяФорма.ПроверкаФайловОтчетностиПерсУчетаПФР", ПараметрыОткрытия, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьРСВКомплекта(ПомещатьАдресВыгрузкиРСВВДанныеКомплекта = Истина)
	Если Не Объект.КомплектОбъект.РСВ_1.Пустая() Тогда
		СписокОтчетов = Новый СписокЗначений;
		СписокОтчетов.Добавить(Объект.КомплектОбъект.РСВ_1);
		
		СообщенияОбОшибкахРСВ = Новый Массив;
		ФайлВыгрузкиВоВременномХранилище = Новый Структура;
		РегламентированнаяОтчетностьКлиент.ВыгрузитьОтчеты(СписокОтчетов, , СообщенияОбОшибкахРСВ, , Истина, ФайлВыгрузкиВоВременномХранилище);
		
		Если ПомещатьАдресВыгрузкиРСВВДанныеКомплекта Тогда
			ФайлВыгрузкиВоВременномХранилище.Свойство("АдресФайлаВыгрузкиВоВременномХранилище", Объект.КомплектОбъект.АдресФайлаВыгрузкиРСВ);
			ФайлВыгрузкиВоВременномХранилище.Свойство("ИмяФайлаВыгрузки", Объект.КомплектОбъект.ИмяФайлаВыгрузкиРСВ);	
			
			Объект.МодифицированностьКомплекта = Истина;
			
			СохранитьИзмененияВКомплекте();
		Иначе
			ФайлВыгрузкиВоВременномХранилище.Свойство("АдресФайлаВыгрузкиВоВременномХранилище", АдресФайлаВыгрузкиРСВ);
			ФайлВыгрузкиВоВременномХранилище.Свойство("ИмяФайлаВыгрузки", ИмяФайлаВыгрузкиРСВ);	
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте 
Процедура ПроверитьРСВВстроеннойПроверкой(ОшибкиКомплекта, Отказ = Ложь)
	
	Если ЗначениеЗаполнено(Объект.КомплектОбъект.РСВ_1) Тогда
		
		ПроверяемыеОтчеты = Новый СписокЗначений;
		ПроверяемыеОтчеты.Добавить(Объект.КомплектОбъект.РСВ_1);
		ОшибкиОтчета = Новый Массив;
		РегламентированнаяОтчетностьКлиент.ПроверитьРегламентированныеОтчеты(ПроверяемыеОтчеты, ОшибкиОтчета);
		
		Для Каждого ОшибкаРСВ Из ОшибкиОтчета Цикл
			ПерсонифицированныйУчетКлиентСервер.ДобавитьОшибкуДанныхРСВ1(
				ОшибкиКомплекта, 
				ОшибкаРСВ.ОтчетДок,
				ОшибкаРСВ.Отчет,
				ОшибкаРСВ.Описание, 
				ОшибкаРСВ.Раздел, 
				ОшибкаРСВ.Графа, 
				ОшибкаРСВ.Строка, 
				ОшибкаРСВ.Страница,
				ОшибкаРСВ.СтрокаПП, 
				ОшибкаРСВ.ИмяЯчейки, 
				Отказ);
		КонецЦикла;
		
		Если ОшибкиОтчета.Количество() > 0 Тогда
			Отказ = Истина;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаКомплектаСтороннимиПрограммами(Отказ)
	
	Если Объект.КомплектОбъект.ОтчетныйПериод = '20150101'
		И Не Объект.КомплектОбъект.СпециальныйДокумент2015года Тогда
		
		Если Отказ Тогда
			ТекстВопроса = НСтр("ru = 'При проверке комплекта встроенной проверкой обнаружены ошибки.'")
		Иначе	
			ТекстВопроса = НСтр("ru = 'При проверке комплекта встроенной проверкой ошибок не обнаружено.'");
		КонецЕсли;

		ПоказатьПредупреждение(, ТекстВопроса);
	Иначе
		Если Отказ Тогда
			ТекстВопроса = НСтр("ru = 'При проверке комплекта встроенной проверкой обнаружены ошибки.
			|Выполнить проверку сторонними программами?'")
		Иначе	
			ТекстВопроса = НСтр("ru = 'При проверке комплекта встроенной проверкой ошибок не обнаружено.
			|Выполнить проверку сторонними программами?'");
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ПроверкаКомплектаСтороннимиПрограммамиЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаКомплектаСтороннимиПрограммамиЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ = КодВозвратаДиалога.Да Тогда 
		ПроверитьКомплектСтороннимиПрограммами();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКомплектСЗапросомДальнейшегоДействия(ОповещениеЗавершения = Неопределено)
	
	Отказ = Ложь;
	ПроверитьДанныеКомплекта(Отказ);	
	
	ДополнительныеПараметры = Новый Структура("ОповещениеЗавершения", ОповещениеЗавершения);
	
	Если Отказ Тогда 
		ТекстВопроса = НСтр("ru = 'В комплекте обнаружены ошибки.
							|Продолжить (не рекомендуется)?'");
							
		Оповещение = Новый ОписаниеОповещения("ПроверитьКомплектСЗапросомДальнейшегоДействияЗавершение", ЭтотОбъект, ДополнительныеПараметры);					
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, НСтр("ru = 'Предупреждение.'"));
	Иначе 
		ПроверитьКомплектСЗапросомДальнейшегоДействияЗавершение(КодВозвратаДиалога.Да, ДополнительныеПараметры);				
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ПроверитьКомплектСЗапросомДальнейшегоДействияЗавершение(Ответ, ДополнительныеПараметры) Экспорт 
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;			
	
	Если ДополнительныеПараметры.ОповещениеЗавершения <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеЗавершения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ИнициализацияКомплектаВФорме

&НаСервере
Функция ДанныеФормыВОбъект()
	УстановитьПривилегированныйРежим(Истина);
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект", Тип("ОбработкаОбъект.ПодготовкаКвартальнойОтчетностиВПФР"));
	ОбработкаОбъект.КомплектОбъект = РеквизитФормыВЗначение("Объект.КомплектОбъект", Тип("СправочникОбъект.КомплектыОтчетностиПерсучета"));	
	
	Возврат ОбработкаОбъект;
КонецФункции	

&НаСервере
Процедура УстановитьАктивныйКомплектПериода()
	ОбработкаОбъект = ДанныеФормыВОбъект();
	
	ОбработкаОбъект.ПоместитьАктивныйКомплектПериодаВОбъект();
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	РедактируемыйКомплектСсылка = Объект.КомплектОбъект.Ссылка;
	
	ПриЧтенииДанныхКомплекта(ОбработкаОбъект);
КонецПроцедуры	

&НаСервере
Процедура ПриЧтенииДанныхКомплекта(ТекущийОбъект, ОчищатьПротоколПроверки = Истина)
	Если ОчищатьПротоколПроверки
		И ЗначениеЗаполнено(АдресОшибокВХранилище) Тогда
		
		ПоместитьВоВременноеХранилище(Неопределено, АдресОшибокВХранилище);
		
		ОшибкиРСВ = Неопределено;
	КонецЕсли;	
	
	ОписаниеТекущегоДокумента = ТекущаяСтрокаСпискаДокументов(ЭтаФорма);
	
	Если ОписаниеТекущегоДокумента = Неопределено
		Или ОписаниеТекущегоДокумента.Ссылка <> Объект.СсылкаНаРедактируемыйДокумент Тогда
		
		СтрокиТаблицы = Объект.ДокументыКомплекта.НайтиСтроки(Новый Структура("Ссылка", Объект.СсылкаНаРедактируемыйДокумент));
		
		Если СтрокиТаблицы.Количество() > 0 Тогда 
			Элементы.СписокДокументов.ТекущаяСтрока = СтрокиТаблицы[0].ПолучитьИдентификатор();
		КонецЕсли;	
		
		ТекущийДокументСсылка = Объект.СсылкаНаРедактируемыйДокумент;
	КонецЕсли;	
	
	ПриЧтенииДанныхДокумента(ТекущийОбъект);	
	
	Организация = Объект.Организация;
	ОтчетныйПериод = Объект.ОтчетныйПериод;
	ЕстьИсходныеСведения = ЕстьИсходныеСведения();
	ПериодСтрока = ПерсонифицированныйУчетКлиентСервер.ПредставлениеОтчетногоПериода(Объект.ОтчетныйПериод);
	
	СостояниеКомплекта = Объект.КомплектОбъект.СостояниеКомплекта;
	
	УстановитьЗаголовокКомплекта();
	
	УстановитьПризнакНаличияФормСЗВ();
	
	УстановитьСвойстваЭлементовОтображенияКомплекта();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПризнакНаличияФормСЗВ()
	ЕстьФормыСЗВ6 = Ложь;
	
	Если ОтчетныйПериод < '20140101' Тогда
		ЕстьФормыСЗВ6 = Истина;
		
		Возврат;
	КонецЕсли;	

	Для Каждого ОписаниеДокумента Из Объект.ДокументыКомплекта Цикл
		Если ТипЗнч(ОписаниеДокумента.Ссылка) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_1")
			Или ТипЗнч(ОписаниеДокумента.Ссылка) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_4")
			Или ТипЗнч(ОписаниеДокумента.Ссылка) = Тип("ДокументСсылка.РеестрСЗВ_6_2") Тогда
			
			ЕстьФормыСЗВ6 = Истина;
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры	

&НаСервере
Процедура УстановитьСвойстваЭлементовОтображенияКомплекта()
	УстановитьСвойстваЭлементовОтображенияКомплектаПоСостоянию();	
	УстановитьСвойстваЭлементовОтображенияКомплектаПоНаличиюФормСЗВ6();
	УстановитьСвойстваЭлементовОтображенияКомплектаПоПериоду();
	УстановитьСвойстваЭлементовОтображенияКомплектаПоНаличиюИсходныхСведений();
КонецПроцедуры 	

&НаСервере
Процедура УстановитьСвойстваЭлементовОтображенияКомплектаПоСостоянию()
	
	ДоступностьКомандИзмененияСоставаКомплекта = Истина;
	
	Если Объект.КомплектОбъект.СостояниеКомплекта = Перечисления.СостояниеКомплектаОтчетностиПерсучета.СведенияНеБудутПередаваться Тогда		
		ТолькоПросмотр = Истина;
		ДоступностьКомандИзмененияСоставаКомплекта = Ложь;
		
		Элементы.ПанельОсновныхКомандСтраницы.ТекущаяСтраница = Элементы.ПанельОсновныхКомандАктивногоКомплекта;
	ИначеЕсли Объект.КомплектОбъект.СостояниеКомплекта = Перечисления.СостояниеКомплектаОтчетностиПерсучета.СведенияОтправлены 
		Или Объект.КомплектОбъект.СостояниеКомплекта = Перечисления.СостояниеКомплектаОтчетностиПерсучета.СведенияСкорректированы Тогда
		
		ТолькоПросмотр = Истина;
		ДоступностьКомандИзмененияСоставаКомплекта = Ложь;
		
		Элементы.ПанельОсновныхКомандСтраницы.ТекущаяСтраница = Элементы.ПанельОсновныхКомандАктивногоКомплекта;
	ИначеЕсли ЕстьИсходныеСведения 
		Или Объект.КомплектОбъект.КорректирующаяФормаРСВ_1 Тогда
		
		ТолькоПросмотр = Ложь;	
		ДоступностьКомандИзмененияСоставаКомплекта = Истина;
		Элементы.ПанельОсновныхКомандСтраницы.ТекущаяСтраница = Элементы.ПанельОсновныхКомандАктивногоКомплекта;
	Иначе
		ТолькоПросмотр = Ложь;	
		Элементы.ПанельОсновныхКомандСтраницы.ТекущаяСтраница = Элементы.ПанельОсновныхКомандКомплектаБезИсходныхСведений;
	КонецЕсли;	
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОбновитьПодменю", "Доступность", ДоступностьКомандИзмененияСоставаКомплекта);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "Обновить", "Доступность", ДоступностьКомандИзмененияСоставаКомплекта);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДобавитьПодменю", "Доступность", ДоступностьКомандИзмененияСоставаКомплекта);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОбщаяКомандаПрисоединенныеФайлыКОбъекту", "Доступность", ДоступностьКомандИзмененияСоставаКомплекта);
	
	Если Объект.КомплектОбъект.ПометкаУдаления Тогда
		Элементы.СостояниеКомплекта.ТолькоПросмотр = Истина;
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьСвойстваЭлементовОтображенияКомплектаПоНаличиюФормСЗВ6()
	Элементы.СписокДокументовКатегорияЗастрахованныхЛиц.Видимость = ЕстьФормыСЗВ6;
	Элементы.СписокДокументовПредставлениеКорректируемогоПериода.Видимость = ЕстьФормыСЗВ6 Или ЕстьКорректирующиеСведенияСведения();
	Элементы.СписокДокументовТипДоговора.Видимость = ЕстьФормыСЗВ6;
	Элементы.СписокДокументовНачисленоНакопительная.Видимость = ЕстьФормыСЗВ6;
	Элементы.СписокДокументовОблагаетсяВзносамиДоПредельнойВеличины.Видимость = Не ЕстьФормыСЗВ6;
	Элементы.СписокДокументовОблагаетсяВзносамиСвышеПредельнойВеличины.Видимость = Не ЕстьФормыСЗВ6;
		
	Если ЕстьФормыСЗВ6 Тогда
		Если ОтчетныйПериод >= '20140101' Тогда
			Элементы.СписокДокументовНачисленоСтраховая.Заголовок = НСТР("ru = 'Нач. ОПС (страховая до 2014 г.)'");	
		Иначе
			Элементы.СписокДокументовНачисленоСтраховая.Заголовок = НСТР("ru = 'Нач. страховая'");		
		КонецЕсли;	
	Иначе
		Элементы.СписокДокументовНачисленоСтраховая.Заголовок = НСТР("ru = 'Нач. ОПС'"); 		
	КонецЕсли;		
				
КонецПроцедуры	

&НаСервере
Процедура УстановитьСвойстваЭлементовОтображенияКомплектаПоПериоду()
	Если ОтчетныйПериод >= '20140101' Тогда
		Элементы.СписокДокументовОблагаетсяВзносамиДоПредельнойВеличины.Видимость = Истина;
		Элементы.СписокДокументовОблагаетсяВзносамиСвышеПредельнойВеличины.Видимость = Истина;	
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДобавитьИсходнуюПачкуРазделов6", "Видимость", Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДобавитьИсходнуюПачкуСЗВ62", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДобавитьИсходнуюПачкуСЗВ61", "Видимость", Ложь);
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДобавитьИсходнуюПачкуСЗВ64", "Видимость", Ложь);
		
		Элементы.ДанныеРСВИтогиПоТарифамНачисленоСтраховаяЗаГод.Видимость = Ложь;		
		Элементы.ДанныеРСВИтогиПоТарифамНачисленоНакопительнаяЗаГод.Видимость = Ложь;
		Элементы.ДанныеРСВИтогиПоТарифамНачисленоСтраховаяЗаОтчетныйПериод.Видимость = Ложь;
		Элементы.ДанныеРСВИтогиПоТарифамНачисленоНакопительнаяЗаОтчетныйПериод.Видимость = Ложь;		
		Элементы.ДанныеРСВИтогиЗаработокРСВ1ИтогиУменьшенныйОбъектОбложенияЗаголовок1.Видимость = Ложь;
		Элементы.РСВ1ИтогиПоТарифамНачисленоСНачалаГода.Видимость = Ложь;
		Элементы.РСВ1ИтогиПоТарифамНачисленоЗаОтчетныйПериод.Видимость = Ложь;
		
		Элементы.ДанныеРСВИтогиПоТарифамОблагаетсяВзносами.Видимость = Истина;

		Элементы.РСВ_1УменьшенныйОбъектОбложения.Видимость = Ложь;
		Элементы.РСВ_1УменьшенныйОбъектОбложенияПоЛьготнымТарифам.Видимость = Ложь;		
		Элементы.ДанныеРСВИтогиЗаработокРСВ1ИтогиДопВзносыЗаголовок.Видимость = Ложь;
		Элементы.ДанныеРСВИтогиДопВзносыБазаЗаголовок.Видимость = Ложь;
		Элементы.ДанныеРСВИтогиДопВзносыТяжРаботыЗаголовок.Видимость = Ложь;		
		Элементы.РСВ_1ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах.Видимость = Ложь;
		Элементы.ДанныеРСВИтогиДопВзносыВредРаботыЗаголовок.Видимость = Ложь;
		Элементы.РСВ_1ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах.Видимость = Ложь;		
		Элементы.ДанныеРСВИтогиЗаПоследние3МесяцаЗаголовокНакопительная.Видимость = Ложь;
		Элементы.РСВ_1НачисленоНакопительная.Видимость = Ложь;
		Элементы.РСВ_1УплаченоСтраховая.Видимость = Ложь;
		Элементы.РСВ_1УплаченоНакопительная.Видимость = Ложь;
		
		Элементы.ДанныеРСВИтоги2014.Видимость = Истина;
		Элементы.ДанныеРСВИтоги2013.Видимость = Ложь;
	Иначе
		Если ОтчетныйПериод >= '20130101' Тогда 
			Элементы.СписокДокументовОблагаетсяВзносамиДоПредельнойВеличины.Видимость = Ложь;
			Элементы.СписокДокументовОблагаетсяВзносамиСвышеПредельнойВеличины.Видимость = Ложь;
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДобавитьИсходнуюПачкуРазделов6", "Видимость", Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДобавитьИсходнуюПачкуСЗВ62", "Видимость", Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДобавитьИсходнуюПачкуСЗВ61", "Видимость", Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДобавитьИсходнуюПачкуСЗВ64", "Видимость", Истина);
			
			Элементы.ИтогиПоКатегориямОблагаетсяВзносами.Видимость = Ложь;
			Элементы.ИтогиПоКатегориямОблагаетсяВзносамиГруппа.Видимость = Истина;
			Элементы.ИтогиПоКатегориямОблагаетсяВзносамиДоПредельнойВеличины.Видимость = Истина;
			Элементы.ИтогиПоКатегориямОблагаетсяВзносамиСвышеПредельнойВеличины.Видимость = Истина;
			
		Иначе
			Элементы.СписокДокументовОблагаетсяВзносамиДоПредельнойВеличины.Видимость = Ложь;
			Элементы.СписокДокументовОблагаетсяВзносамиСвышеПредельнойВеличины.Видимость = Ложь;
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДобавитьИсходнуюПачкуРазделов6", "Видимость", Ложь);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДобавитьИсходнуюПачкуСЗВ62", "Видимость", Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДобавитьИсходнуюПачкуСЗВ61", "Видимость", Истина);
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ДобавитьИсходнуюПачкуСЗВ64", "Видимость", Ложь);
			
			Элементы.ИтогиПоКатегориямОблагаетсяВзносами.Видимость = Истина;
			Элементы.ИтогиПоКатегориямОблагаетсяВзносамиГруппа.Видимость = Ложь;
			Элементы.ИтогиПоКатегориямОблагаетсяВзносамиДоПредельнойВеличины.Видимость = Ложь;
			Элементы.ИтогиПоКатегориямОблагаетсяВзносамиСвышеПредельнойВеличины.Видимость = Ложь;
		КонецЕсли;
		
		Элементы.ДанныеРСВИтогиПоТарифамНачисленоСтраховаяЗаГод.Видимость = Истина;		
		Элементы.ДанныеРСВИтогиПоТарифамНачисленоНакопительнаяЗаГод.Видимость = Истина;
		Элементы.ДанныеРСВИтогиПоТарифамНачисленоСтраховаяЗаОтчетныйПериод.Видимость = Истина;
		Элементы.ДанныеРСВИтогиПоТарифамНачисленоНакопительнаяЗаОтчетныйПериод.Видимость = Истина;		
		Элементы.ДанныеРСВИтогиЗаработокРСВ1ИтогиУменьшенныйОбъектОбложенияЗаголовок1.Видимость = Истина;
		Элементы.РСВ1ИтогиПоТарифамНачисленоСНачалаГода.Видимость = Истина;
		Элементы.РСВ1ИтогиПоТарифамНачисленоЗаОтчетныйПериод.Видимость = Истина;
		
		Элементы.ДанныеРСВИтогиПоТарифамОблагаетсяВзносами.Видимость = Ложь;
	
		Элементы.РСВ_1УменьшенныйОбъектОбложения.Видимость = Истина;
		Элементы.РСВ_1УменьшенныйОбъектОбложенияПоЛьготнымТарифам.Видимость = Истина;		
		Элементы.ДанныеРСВИтогиЗаработокРСВ1ИтогиДопВзносыЗаголовок.Видимость = Истина;
		Элементы.ДанныеРСВИтогиДопВзносыБазаЗаголовок.Видимость = Истина;
		Элементы.ДанныеРСВИтогиДопВзносыТяжРаботыЗаголовок.Видимость = Истина;		
		Элементы.РСВ_1ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах.Видимость = Истина;
		Элементы.ДанныеРСВИтогиДопВзносыВредРаботыЗаголовок.Видимость = Истина;
		Элементы.РСВ_1ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах.Видимость = Истина;		
		Элементы.ДанныеРСВИтогиЗаПоследние3МесяцаЗаголовокНакопительная.Видимость = Истина;
		Элементы.РСВ_1НачисленоНакопительная.Видимость = Истина;
		Элементы.РСВ_1УплаченоСтраховая.Видимость = Истина;
		Элементы.РСВ_1УплаченоНакопительная.Видимость = Истина;
				
		ПерсонифицированныйУчетФормы.УстановитьВидимостьКолонокЗаголовков(ЭтотОбъект, "ДанныеРСВИтогиПоТарифам", ОписаниеКолонокЗаголовковТаблицы("ДанныеРСВИтогиПоТарифам"));
		
		Элементы.ДанныеРСВИтоги2014.Видимость = Ложь;
		Элементы.ДанныеРСВИтоги2013.Видимость = Истина;
	КонецЕсли;	
	
	ПерсонифицированныйУчетФормы.УстановитьВидимостьКолонокЗаголовков(ЭтотОбъект, "ИтогиПоКатегориям", ОписаниеКолонокЗаголовковТаблицы("ИтогиПоКатегориям"));
КонецПроцедуры	

&НаСервере
Процедура УстановитьСвойстваЭлементовОтображенияКомплектаПоНаличиюИсходныхСведений()
	Если Объект.КомплектОбъект.СодержитТолькоКорректирующиеФормы Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СформироватьИсходныеСведения1", "Видимость", Истина);
	Иначе	
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "СформироватьИсходныеСведения1", "Видимость", Ложь);
	КонецЕсли;	
КонецПроцедуры	

&НаСервере
Функция ЕстьИсходныеСведения()
	Если ОтчетныйПериод >= '20140101' 
		И ЗначениеЗаполнено(Объект.КомплектОбъект.РСВ_1) Тогда 
		
		Возврат Истина;
	КонецЕсли;	
	
	Для Каждого ОписаниеДокумента Из Объект.ДокументыКомплекта Цикл
		Если ПерсонифицированныйУчетКлиентСервер.ЭтоДокументСведенийОВзносахИСтаже(ОписаниеДокумента.Ссылка) 
			И ОписаниеДокумента.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ Тогда
			
			Возврат Истина;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Ложь;
КонецФункции	

&НаСервере
Функция ЕстьКорректирующиеСведенияСведения()
		Для Каждого ОписаниеДокумента Из Объект.ДокументыКомплекта Цикл
		Если ПерсонифицированныйУчетКлиентСервер.ЭтоДокументСведенийОВзносахИСтаже(ОписаниеДокумента.Ссылка) 
			И ОписаниеДокумента.ТипСведенийСЗВ <> Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ Тогда
			
			Возврат Истина;
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Ложь;
КонецФункции

&НаСервере
Процедура УстановитьЗаголовокКомплекта()
	Если ЗначениеЗаполнено(Объект.Организация)
		И ЗначениеЗаполнено(Объект.ОтчетныйПериод) Тогда
		
		КраткоеПредставлениеОтчетногоПериода = ПерсонифицированныйУчетКлиентСервер.ПредставлениеОтчетногоПериода(Объект.ОтчетныйПериод, Истина);
		НаименованиеОрганизации = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "Наименование");
		
		Если ОтчетныйПериод = '20150101' 
			И Объект.КомплектОбъект.СпециальныйДокумент2015года Тогда 
			
			ШаблонЗаголовка = НСтр("ru = 'РСВ-1 %1 / %2. Сформирован по формату 2014 г.'");
		ИначеЕсли ОтчетныйПериод >= '20140101' Тогда
			ШаблонЗаголовка = НСтр("ru = 'РСВ-1 %1 / %2'");
		Иначе
			ШаблонЗаголовка = НСтр("ru = 'Комплект %1 / %2'");
		КонецЕсли;	
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ШаблонЗаголовка,
						КраткоеПредставлениеОтчетногоПериода,
						НаименованиеОрганизации);
	Иначе
		Заголовок = НСтр("ru = 'Комплект отчетности в ПФР'");
	КонецЕсли;	
КонецПроцедуры	

// Инициализация данных документа в форме.

&НаСервере
Процедура ИнициализироватьДокументВФорме(Ссылка, ОбновлятьДанныеШапки = Ложь)
	
	ТекущийДокументСсылка = Ссылка;
	
	Если Модифицированность Тогда
		ОшибкиДокумента = ЗарплатаКадрыОтображениеОшибок.СообщенияОбОшибкахИзДанныхФормы(ЭтотОбъект, Объект.СсылкаНаРедактируемыйДокумент);
		ЗарплатаКадрыОтображениеОшибок.СохранитьСообщенияОбОшибкахВоВременномХранилище(ЭтотОбъект, ОшибкиДокумента, Объект.СсылкаНаРедактируемыйДокумент);
	КонецЕсли;
	
	ОбработкаОбъект = ДанныеФормыВОбъект();
	ОбработкаОбъект.ДанныеДокументаВОбъектПоСсылке(Ссылка, Модифицированность, ОбновлятьДанныеШапки);
	Модифицированность = Ложь;
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	ПриЧтенииДанныхДокумента(ОбработкаОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииДанныхДокумента(ТекущийОбъект)
	УстановитьЗаголовокТекущегоДокумента();
	УстановитьСтраницыТекущегоДокумента();
	
	Если Элементы.КарточкаДокументаСтраницы.ТекущаяСтраница = Элементы.КарточкаСЗВ Тогда 	
		УстановитьСвойстваЭлементовТаблицыСотрудники();
	КонецЕсли;
	
	УстановитьЗаголовкиВТаблицеФормы();
	
	Если ТипЗнч(Объект.СсылкаНаРедактируемыйДокумент) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_1") Тогда
		ТипРедактируемогоДокументаСЗВ6 = 1;
	ИначеЕсли ТипЗнч(Объект.СсылкаНаРедактируемыйДокумент) = Тип("ДокументСсылка.РеестрСЗВ_6_2") Тогда
		ТипРедактируемогоДокументаСЗВ6 = 2;	
	ИначеЕсли ТипЗнч(Объект.СсылкаНаРедактируемыйДокумент) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_3") Тогда
		ТипРедактируемогоДокументаСЗВ6 = 3;	
	ИначеЕсли ТипЗнч(Объект.СсылкаНаРедактируемыйДокумент) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_4") Тогда
		ТипРедактируемогоДокументаСЗВ6 = 4;
	ИначеЕсли ТипЗнч(Объект.СсылкаНаРедактируемыйДокумент) = Тип("ДокументСсылка.ПачкаРазделов6РасчетаРСВ_1") Тогда
		ТипРедактируемогоДокументаСЗВ6 = 5;	
	Иначе
		ТипРедактируемогоДокументаСЗВ6 = 0;
	КонецЕсли;	
	
	Если Объект.Сотрудники.Количество() > 0 Тогда
		Элементы.Сотрудники.ТекущаяСтрока = Объект.Сотрудники[0].ПолучитьИдентификатор();
	КонецЕсли;	
	
	ПоместитьОшибкиВДанныеФормы(ТекущийОбъект);
КонецПроцедуры	

&НаСервере
Процедура УстановитьЗаголовкиВТаблицеФормы()
	Если Элементы.КарточкаДокументаСтраницы.ТекущаяСтраница = Элементы.КарточкаСЗВ Тогда 	
		Если Объект.Сотрудники.Количество() > 0 Тогда
			ОписаниеЗаголовковТаблицы = ОписаниеКолонокЗаголовковТаблицы("Сотрудники");
			ПерсонифицированныйУчетКлиентСервер.УстановитьЗаголовкиВТаблице(ЭтаФорма, Объект.Сотрудники, ОписаниеЗаголовковТаблицы);
		КонецЕсли;	
	КонецЕсли;	
	
	Если Объект.ИтогиПоКатегориям.Количество() > 0 Тогда
		ОписаниеЗаголовковТаблицы = ОписаниеКолонокЗаголовковТаблицы("ИтогиПоКатегориям");
		ПерсонифицированныйУчетКлиентСервер.УстановитьЗаголовкиВТаблице(ЭтаФорма, Объект.ИтогиПоКатегориям, ОписаниеЗаголовковТаблицы);	
	КонецЕсли;
	
	Если Объект.РСВ_1ИтогиПоТарифам.Количество() > 0 Тогда
		ОписаниеЗаголовковТаблицы = ОписаниеКолонокЗаголовковТаблицы("ДанныеРСВИтогиПоТарифам");
		ПерсонифицированныйУчетКлиентСервер.УстановитьЗаголовкиВТаблице(ЭтаФорма, Объект.РСВ_1ИтогиПоТарифам, ОписаниеЗаголовковТаблицы);	
	КонецЕсли;
	
КонецПроцедуры	

&НаСервере
Процедура УстановитьЗаголовокТекущегоДокумента()
	Если ТипЗнч(Объект.СсылкаНаРедактируемыйДокумент) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_1") Тогда
		ЗаголовокТекущегоДокумента = НСтр("ru = 'Пачка документов СЗВ-6-1'");
	ИначеЕсли ТипЗнч(Объект.СсылкаНаРедактируемыйДокумент) = Тип("ДокументСсылка.РеестрСЗВ_6_2") Тогда
		ЗаголовокТекущегоДокумента = НСтр("ru = 'Реестр сведений СЗВ-6-2'");	
	ИначеЕсли ТипЗнч(Объект.СсылкаНаРедактируемыйДокумент) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_3") Тогда
		ЗаголовокТекущегоДокумента = НСтр("ru = 'Пачка документов СЗВ-6-3'");	
	ИначеЕсли ТипЗнч(Объект.СсылкаНаРедактируемыйДокумент) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_4") Тогда
		ЗаголовокТекущегоДокумента = НСтр("ru = 'Пачка документов СЗВ-6-4'");
	ИначеЕсли ТипЗнч(Объект.СсылкаНаРедактируемыйДокумент) = Тип("ДокументСсылка.ПачкаРазделов6РасчетаРСВ_1") Тогда
		ЗаголовокТекущегоДокумента = НСтр("ru = 'Пачка документов раздела 6'");	
	ИначеЕсли ТипЗнч(Объект.СсылкаНаРедактируемыйДокумент) = Тип("ДокументСсылка.ОписьПачекСЗВ_6") Тогда
		ЗаголовокТекущегоДокумента = НСтр("ru = 'Опись сведений АДВ-6-2'");
	ИначеЕсли ТипЗнч(Объект.СсылкаНаРедактируемыйДокумент) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		ЗаголовокТекущегоДокумента = НСтр("ru = 'Расчет по страховым взносам (РСВ-1)'");
	КонецЕсли;		
КонецПроцедуры	

&НаСервере
Процедура УстановитьСтраницыТекущегоДокумента()
	Если ТипЗнч(Объект.СсылкаНаРедактируемыйДокумент) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		Элементы.КарточкаДокументаСтраницы.ТекущаяСтраница = Элементы.КарточкаРСВ_1;	
	ИначеЕсли ТипЗнч(Объект.СсылкаНаРедактируемыйДокумент) = Тип("ДокументСсылка.ОписьПачекСЗВ_6") Тогда
		Элементы.КарточкаДокументаСтраницы.ТекущаяСтраница = Элементы.КарточкаАДВ_6_2;	
	ИначеЕсли ТипЗнч(Объект.СсылкаНаРедактируемыйДокумент) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_1")
		Или ТипЗнч(Объект.СсылкаНаРедактируемыйДокумент) = Тип("ДокументСсылка.РеестрСЗВ_6_2")
		Или ТипЗнч(Объект.СсылкаНаРедактируемыйДокумент) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_3")
		Или ТипЗнч(Объект.СсылкаНаРедактируемыйДокумент) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_4") 
		Или ТипЗнч(Объект.СсылкаНаРедактируемыйДокумент) = Тип("ДокументСсылка.ПачкаРазделов6РасчетаРСВ_1") Тогда
		
		Элементы.КарточкаДокументаСтраницы.ТекущаяСтраница = Элементы.КарточкаСЗВ;
	КонецЕсли;	
КонецПроцедуры	

&НаСервере
Процедура УстановитьСвойстваЭлементовТаблицыСотрудники()
	
	Если Элементы.СписокДокументов.ТекущаяСтрока = Неопределено Тогда
		ВидимостьКолонокДоначисленоДоуплачено = Ложь;		
	Иначе	
		ДанныеТекущегоДокумента = Объект.ДокументыКомплекта.НайтиПоИдентификатору(Элементы.СписокДокументов.ТекущаяСтрока);
		
		Если ДанныеТекущегоДокумента = Неопределено Тогда
			ВидимостьКолонокДоначисленоДоуплачено = Ложь;
		Иначе	
			ВидимостьКолонокДоначисленоДоуплачено = ДанныеТекущегоДокумента.ТипСведенийСЗВ <> Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ;
		КонецЕсли;	
	КонецЕсли;	
	
	Если ТипЗнч(Объект.СсылкаНаРедактируемыйДокумент) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_1") 
		Или ТипЗнч(Объект.СсылкаНаРедактируемыйДокумент) = Тип("ДокументСсылка.РеестрСЗВ_6_2") Тогда
		
		Элементы.СотрудникиНачисленоСтраховая.Видимость = Истина;
		Элементы.СотрудникиУплаченоСтраховая.Видимость = Истина;
		Элементы.СотрудникиДоначисленоСтраховая.Видимость = ВидимостьКолонокДоначисленоДоуплачено;
		Элементы.СотрудникиДоУплаченоСтраховая.Видимость = ВидимостьКолонокДоначисленоДоуплачено;
		Элементы.СотрудникиНачисленоНакопительная.Видимость = Истина;
		Элементы.СотрудникиУплаченоНакопительная.Видимость = Истина;
		Элементы.СотрудникиДоначисленоНакопительная.Видимость = ВидимостьКолонокДоначисленоДоуплачено;
		Элементы.СотрудникиДоУплаченоНакопительная.Видимость = ВидимостьКолонокДоначисленоДоуплачено;
		Элементы.СотрудникиЗаработок.Видимость = Ложь;
		Элементы.СотрудникиОблагаетсяВзносами.Видимость = Ложь;
		Элементы.СотрудникиОблагаетсяВзносамиДоПредельнойВеличины.Видимость = Ложь;
		Элементы.СотрудникиОблагаетсяСвышеПредельнойВеличины.Видимость = Ложь;
		Элементы.СотрудникиНачисленоСтраховаяВсего.Видимость = Истина;
		Элементы.СотрудникиНачисленоСтраховаяПоКатегорииЧЭСВсего.Видимость = Истина;
		Элементы.СотрудникиУплаченоСтраховаяВсего.Видимость = Истина;
		Элементы.СотрудникиКоэффициентУплатыСтраховая.Видимость = Истина;
		Элементы.СотрудникиНачисленоНакопительнаяВсего.Видимость = Истина;
		Элементы.СотрудникиНачисленоНакопительнаяПоКатегорииЧЭСВсего.Видимость = Истина;
		Элементы.СотрудникиУплаченоНакопительнаяВсего.Видимость = Истина;
		Элементы.СотрудникиКоэффициентУплатыНакопительная.Видимость = Истина;
		
		Элементы.СотрудникиСтраховаяГруппа.Заголовок = НСтр("ru = 'Страховая'");
	ИначеЕсли ТипЗнч(Объект.СсылкаНаРедактируемыйДокумент) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_3") Тогда
		Элементы.СотрудникиНачисленоСтраховая.Видимость = Ложь;
		Элементы.СотрудникиУплаченоСтраховая.Видимость = Ложь;
		Элементы.СотрудникиДоначисленоСтраховая.Видимость = Ложь;
		Элементы.СотрудникиДоУплаченоСтраховая.Видимость = Ложь;
		Элементы.СотрудникиНачисленоНакопительная.Видимость = Ложь;
		Элементы.СотрудникиУплаченоНакопительная.Видимость = Ложь;
		Элементы.СотрудникиДоначисленоНакопительная.Видимость = Ложь;
		Элементы.СотрудникиДоУплаченоНакопительная.Видимость = Ложь;
		Элементы.СотрудникиЗаработок.Видимость = Истина;
		Элементы.СотрудникиОблагаетсяВзносами.Видимость = Истина;
		Элементы.СотрудникиОблагаетсяВзносамиДоПредельнойВеличины.Видимость = Ложь;
		Элементы.СотрудникиОблагаетсяСвышеПредельнойВеличины.Видимость = Ложь;
		Элементы.СотрудникиНачисленоСтраховаяВсего.Видимость = Ложь;
		Элементы.СотрудникиНачисленоСтраховаяПоКатегорииЧЭСВсего.Видимость = Ложь;
		Элементы.СотрудникиУплаченоСтраховаяВсего.Видимость = Ложь;
		Элементы.СотрудникиКоэффициентУплатыСтраховая.Видимость = Ложь;
		Элементы.СотрудникиНачисленоНакопительнаяВсего.Видимость = Ложь;
		Элементы.СотрудникиНачисленоНакопительнаяПоКатегорииЧЭСВсего.Видимость = Ложь;
		Элементы.СотрудникиУплаченоНакопительнаяВсего.Видимость = Ложь;
		Элементы.СотрудникиКоэффициентУплатыНакопительная.Видимость = Ложь;
		
		Элементы.СотрудникиСтраховаяГруппа.Заголовок = НСтр("ru = 'Страховая'");
	ИначеЕсли ТипЗнч(Объект.СсылкаНаРедактируемыйДокумент) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_4") Тогда	
		Элементы.СотрудникиНачисленоСтраховая.Видимость = Истина;
		Элементы.СотрудникиУплаченоСтраховая.Видимость = Истина;
		Элементы.СотрудникиДоначисленоСтраховая.Видимость = ВидимостьКолонокДоначисленоДоуплачено;
		Элементы.СотрудникиДоУплаченоСтраховая.Видимость = ВидимостьКолонокДоначисленоДоуплачено;
		Элементы.СотрудникиНачисленоНакопительная.Видимость = Истина;
		Элементы.СотрудникиУплаченоНакопительная.Видимость = Истина;
		Элементы.СотрудникиДоначисленоНакопительная.Видимость = ВидимостьКолонокДоначисленоДоуплачено;
		Элементы.СотрудникиДоУплаченоНакопительная.Видимость = ВидимостьКолонокДоначисленоДоуплачено;
		Элементы.СотрудникиЗаработок.Видимость = Истина;
		Элементы.СотрудникиОблагаетсяВзносами.Видимость = Ложь;
		Элементы.СотрудникиОблагаетсяВзносамиДоПредельнойВеличины.Видимость = Истина;
		Элементы.СотрудникиОблагаетсяСвышеПредельнойВеличины.Видимость = Истина;
		Элементы.СотрудникиНачисленоСтраховаяВсего.Видимость = Истина;
		Элементы.СотрудникиНачисленоСтраховаяПоКатегорииЧЭСВсего.Видимость = Истина;
		Элементы.СотрудникиУплаченоСтраховаяВсего.Видимость = Истина;
		Элементы.СотрудникиКоэффициентУплатыСтраховая.Видимость = Истина;
		Элементы.СотрудникиНачисленоНакопительнаяВсего.Видимость = Истина;
		Элементы.СотрудникиНачисленоНакопительнаяПоКатегорииЧЭСВсего.Видимость = Истина;
		Элементы.СотрудникиУплаченоНакопительнаяВсего.Видимость = Истина;
		Элементы.СотрудникиКоэффициентУплатыНакопительная.Видимость = Истина;	
		
		Элементы.СотрудникиСтраховаяГруппа.Заголовок = НСтр("ru = 'Страховая'");
	ИначеЕсли ТипЗнч(Объект.СсылкаНаРедактируемыйДокумент) = Тип("ДокументСсылка.ПачкаРазделов6РасчетаРСВ_1") Тогда		
		Элементы.СотрудникиНачисленоСтраховая.Видимость = Истина;
		Элементы.СотрудникиУплаченоСтраховая.Видимость = Ложь;
		Элементы.СотрудникиДоначисленоСтраховая.Видимость = ВидимостьКолонокДоначисленоДоуплачено;
		Элементы.СотрудникиДоУплаченоСтраховая.Видимость = Ложь;
		Элементы.СотрудникиНачисленоНакопительная.Видимость = Ложь;
		Элементы.СотрудникиУплаченоНакопительная.Видимость = Ложь;
		Элементы.СотрудникиДоначисленоНакопительная.Видимость = Ложь;
		Элементы.СотрудникиДоУплаченоНакопительная.Видимость = Ложь;
		Элементы.СотрудникиЗаработок.Видимость = Истина;
		Элементы.СотрудникиОблагаетсяВзносами.Видимость = Ложь;
		Элементы.СотрудникиОблагаетсяВзносамиДоПредельнойВеличины.Видимость = Истина;
		Элементы.СотрудникиОблагаетсяСвышеПредельнойВеличины.Видимость = Истина;
		Элементы.СотрудникиНачисленоСтраховаяВсего.Видимость = Ложь;
		Элементы.СотрудникиНачисленоСтраховаяПоКатегорииЧЭСВсего.Видимость = Ложь;
		Элементы.СотрудникиУплаченоСтраховаяВсего.Видимость = Ложь;
		Элементы.СотрудникиКоэффициентУплатыСтраховая.Видимость = Ложь;
		Элементы.СотрудникиНачисленоНакопительнаяВсего.Видимость = Ложь;
		Элементы.СотрудникиНачисленоНакопительнаяПоКатегорииЧЭСВсего.Видимость = Ложь;
		Элементы.СотрудникиУплаченоНакопительнаяВсего.Видимость = Ложь;
		Элементы.СотрудникиКоэффициентУплатыНакопительная.Видимость = Ложь;	
		
		Элементы.СотрудникиСтраховаяГруппа.Заголовок = НСтр("ru = 'ОПС'");
	КонецЕсли;	
		
	ПерсонифицированныйУчетФормы.УстановитьВидимостьКолонокЗаголовков(ЭтаФорма, "Сотрудники", ОписаниеКолонокЗаголовковТаблицы("Сотрудники"));
КонецПроцедуры	

&НаСервере
Процедура ОбновитьДанныеШапкиДокументов(ОбновляемыеДокументы)
	ОбработкаОбъект = ДанныеФормыВОбъект();
	ОбработкаОбъект.ОбновитьДанныеШапкиДокументов(ОбновляемыеДокументы);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	УстановитьЗаголовкиВТаблицеФормы();
КонецПроцедуры	

&НаСервере
Процедура ОбновитьДанныеШапкиДокумента(СсылкаНаОбновляемыйДокумент)
	Если Объект.ДокументыКомплекта.НайтиСтроки(Новый Структура("Ссылка", СсылкаНаОбновляемыйДокумент)).Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ОбновляемыеДокументы = Новый Массив;
	ОбновляемыеДокументы.Добавить(СсылкаНаОбновляемыйДокумент);
	
	ОбновитьДанныеШапкиДокументов(ОбновляемыеДокументы);	
	
	Если ТипЗнч(СсылкаНаОбновляемыйДокумент) = Тип("ДокументСсылка.ОписьПачекСЗВ_6")
		Или ТипЗнч(СсылкаНаОбновляемыйДокумент) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_1")
		Или ТипЗнч(СсылкаНаОбновляемыйДокумент) = Тип("ДокументСсылка.РеестрСЗВ_6_2")
		Или ТипЗнч(СсылкаНаОбновляемыйДокумент) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_4") Тогда
		
		ЗаполнитьИтогиПоОписи(ЭтаФорма);
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиДокументаКвартальнойОтчетностиВФорме(СвойстваДокумента)
	Если СвойстваДокумента.Ссылка = ТекущийДокументСсылка Тогда
		ИнициализироватьДокументВФорме(СвойстваДокумента.Ссылка, Истина);
	ИначеЕсли СвойстваДокумента.Организация = Организация
		И СвойстваДокумента.ОтчетныйПериод = ОтчетныйПериод Тогда
		
		ОбновитьДанныеШапкиДокумента(СвойстваДокумента.Ссылка);
	КонецЕсли;	
		
КонецПроцедуры	

#КонецОбласти

#Область ПроцедурыИФункцииДляСохраненияИзменившихсяДанных

&НаКлиенте
Процедура СохранитьИзмененияВКомплекте()	
	СохранитьИзмененияВКомплектеНаСервере();
	Оповестить("ЗаписьКомплектаПФР", Объект.Организация);
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи, РежимПроведения");
	Оповестить("Запись_КомплектыОтчетностиПерсучета", ПараметрыЗаписи, Объект.КомплектОбъект.Ссылка);
КонецПроцедуры	

&НаСервере
Процедура СохранитьИзмененияВКомплектеНаСервере()
	СохранитьИзмененияВРедактируемойПачке();
	Если Объект.МодифицированностьКомплекта 
		Или Объект.МодифицированностьОписи Тогда
		
		ОбработкаОбъект = ДанныеФормыВОбъект();
		ОбработкаОбъект.СохранитьИзмененияВКомплекте();
		ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
		ПриЧтенииДанныхКомплекта(ОбработкаОбъект, Ложь);
	КонецЕсли;	
КонецПроцедуры	

&НаСервере
Процедура СохранитьИзмененияВРедактируемойПачке()
	
	Если Модифицированность Тогда
		ОшибкиДокумента = ЗарплатаКадрыОтображениеОшибок.СообщенияОбОшибкахИзДанныхФормы(ЭтотОбъект, Объект.СсылкаНаРедактируемыйДокумент);
		ЗарплатаКадрыОтображениеОшибок.СохранитьСообщенияОбОшибкахВоВременномХранилище(ЭтотОбъект, ОшибкиДокумента, Объект.СсылкаНаРедактируемыйДокумент);
		
		ОбработкаОбъект = ДанныеФормыВОбъект();
		
		ОбработкаОбъект.СохранитьДанныеТекущегоДокумента();
	КонецЕсли;
	
	Модифицированность = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииДляРаботыСТаблицейСписокДокументов

&НаКлиентеНаСервереБезКонтекста
Функция ТекущаяСтрокаСпискаДокументов(Форма)
	ИдентификаторТекущейСтроки = Форма.Элементы.СписокДокументов.ТекущаяСтрока;
	
	Если ИдентификаторТекущейСтроки <> Неопределено Тогда
		Возврат Форма.Объект.ДокументыКомплекта.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаСпискаДокументовПоСсылке(Форма, Ссылка)
	СтруктураПоиска = Новый Структура("Ссылка", Ссылка);
	
	НайденныеСтроки = Форма.Объект.ДокументыКомплекта.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат НайденныеСтроки[0];
	Иначе 
		Возврат Неопределено;
	КонецЕсли;	
КонецФункции	

&НаСервере
Функция ОписаниеКорректирующихДокументовКомплекта()
	КорректирующиеДокументы = Новый Массив;
	
	Для Каждого ОписаниеДокумента Из Объект.ДокументыКомплекта Цикл
		Если ПерсонифицированныйУчетКлиентСервер.ЭтоДокументСведенийОВзносахИСтаже(ОписаниеДокумента.Ссылка)
			И ОписаниеДокумента.ТипСведенийСЗВ <> Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ Тогда
			СтруктураОписанияДокумента = Новый Структура("Ссылка, ПредставлениеДокумента, КатегорияЗастрахованныхЛиц, ТипДоговора, ТипСведенийСЗВ, КорректируемыйПериод, НомерПачки, РегистрационныйНомерПФРвКорректируемыйПериод");
			
			ЗаполнитьЗначенияСвойств(СтруктураОписанияДокумента, ОписаниеДокумента);
			
			КорректирующиеДокументы.Добавить(СтруктураОписанияДокумента);
		КонецЕсли;
	КонецЦикла;	
	
	Возврат КорректирующиеДокументы;
КонецФункции	

#КонецОбласти

#Область ПроцедурыИФункцииДляРедактированияКарточкиДокумента

&НаСервере
Процедура ДанныеТекущегоДокументаПоСотрудникуВоВременноеХранилище()
	Если Элементы.Сотрудники.ТекущаяСтрока = Неопределено Тогда
		АдресДанныхТекущегоДокументаВХранилище = "";
		Возврат;
	КонецЕсли;	
	
	ДанныеТекущейСтрокиПоСотруднику = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока);
	
	Если ДанныеТекущейСтрокиПоСотруднику = Неопределено Тогда
		АдресДанныхТекущегоДокументаВХранилище = "";
		Возврат;
	КонецЕсли;
	
	ДанныеСотрудника = Новый Структура;
	ДанныеСотрудника.Вставить("Сотрудник", ДанныеТекущейСтрокиПоСотруднику.Сотрудник);
	ДанныеСотрудника.Вставить("СотрудникУволен", ДанныеТекущейСтрокиПоСотруднику.СотрудникУволен);
	ДанныеСотрудника.Вставить("СтраховойНомерПФР", ДанныеТекущейСтрокиПоСотруднику.СтраховойНомерПФР);
	ДанныеСотрудника.Вставить("Фамилия", ДанныеТекущейСтрокиПоСотруднику.Фамилия);
	ДанныеСотрудника.Вставить("Имя", ДанныеТекущейСтрокиПоСотруднику.Имя);
	ДанныеСотрудника.Вставить("Отчество", ДанныеТекущейСтрокиПоСотруднику.Отчество);
	ДанныеСотрудника.Вставить("НачисленоСтраховая", ДанныеТекущейСтрокиПоСотруднику.НачисленоСтраховая);
	ДанныеСотрудника.Вставить("УплаченоСтраховая", ДанныеТекущейСтрокиПоСотруднику.УплаченоСтраховая);
	ДанныеСотрудника.Вставить("НачисленоНакопительная", ДанныеТекущейСтрокиПоСотруднику.НачисленоНакопительная);
	ДанныеСотрудника.Вставить("УплаченоНакопительная", ДанныеТекущейСтрокиПоСотруднику.УплаченоНакопительная);
	ДанныеСотрудника.Вставить("ДоначисленоСтраховая", ДанныеТекущейСтрокиПоСотруднику.ДоначисленоСтраховая);
	ДанныеСотрудника.Вставить("ДоначисленоНакопительная", ДанныеТекущейСтрокиПоСотруднику.ДоначисленоНакопительная);
	ДанныеСотрудника.Вставить("ДоУплаченоНакопительная", ДанныеТекущейСтрокиПоСотруднику.ДоУплаченоНакопительная);
	ДанныеСотрудника.Вставить("ДоУплаченоСтраховая", ДанныеТекущейСтрокиПоСотруднику.ДоУплаченоСтраховая);
	ДанныеСотрудника.Вставить("ФиксНачисленныеВзносы", ДанныеТекущейСтрокиПоСотруднику.ФиксНачисленныеВзносы);
	ДанныеСотрудника.Вставить("ФиксУплаченныеВзносы", ДанныеТекущейСтрокиПоСотруднику.ФиксУплаченныеВзносы);
	ДанныеСотрудника.Вставить("ФиксСтаж", ДанныеТекущейСтрокиПоСотруднику.ФиксСтаж);
	ДанныеСотрудника.Вставить("ФиксЗаработок", ДанныеТекущейСтрокиПоСотруднику.ФиксЗаработок);
	ДанныеСотрудника.Вставить("СведенияОЗаработке", Новый Массив);
	ДанныеСотрудника.Вставить("СведенияОЗаработкеНаВредныхИТяжелыхРаботах", Новый Массив);
    ДанныеСотрудника.Вставить("ЗаписиОСтаже", Новый Массив);
	ДанныеСотрудника.Вставить("КорректирующиеСведения", Новый Массив);
	
	ИндексСтроки = Объект.Сотрудники.Индекс(ДанныеТекущейСтрокиПоСотруднику);
	
	ПутьКДанным = "Объект.Сотрудники[" +  ИндексСтроки + "]";
	
	ОшибкиДанныхСтроки = ЗарплатаКадрыОтображениеОшибок.СообщениеОбОшибкахДляПередачиВФормуРедактированияСтрокиТаблицыФормы(ЭтотОбъект, ПутьКДанным, ОписаниеПодчиненностиДанных());										
	
	ДанныеСотрудника.Вставить("Ошибки", ОшибкиДанныхСтроки);
	
	СтруктураПоиска = Новый Структура("Сотрудник", ДанныеТекущейСтрокиПоСотруднику.Сотрудник);
	
	СтрокиСведенияОЗаработке = Объект.СведенияОЗаработке.НайтиСтроки(СтруктураПоиска);
		
	Для Каждого СтрокаЗаработок Из СтрокиСведенияОЗаработке Цикл
		СтруктураПолейСведенияОЗаработке = СтруктураПолейСведенияОЗаработке();
		ЗаполнитьЗначенияСвойств(СтруктураПолейСведенияОЗаработке, СтрокаЗаработок);								
		
		ДанныеСотрудника.СведенияОЗаработке.Добавить(СтруктураПолейСведенияОЗаработке);
	КонецЦикла;	
	
	СтрокиСведенияОЗаработкеПоКлассамУсловий = Объект.СведенияОЗаработкеНаВредныхИТяжелыхРаботах.НайтиСтроки(СтруктураПоиска);
		
	Для Каждого СтрокаЗаработок Из СтрокиСведенияОЗаработкеПоКлассамУсловий Цикл
		СтруктураПолейСведенияОЗаработке = СтруктураПолейСведенияОЗаработкеНаВредныхИТяжелыхРаботах();
		ЗаполнитьЗначенияСвойств(СтруктураПолейСведенияОЗаработке, СтрокаЗаработок);								
		
		ДанныеСотрудника.СведенияОЗаработкеНаВредныхИТяжелыхРаботах.Добавить(СтруктураПолейСведенияОЗаработке);
	КонецЦикла;	
	
	СтрокиЗаписиОСтаже = Объект.ЗаписиОСтаже.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаСтаж Из СтрокиЗаписиОСтаже Цикл
		СтруктураПолейЗаписиОСтаже = СтруктураПолейЗаписиОСтаже();
		ЗаполнитьЗначенияСвойств(СтруктураПолейЗаписиОСтаже, СтрокаСтаж); 											
		
		ДанныеСотрудника.ЗаписиОСтаже.Добавить(СтруктураПолейЗаписиОСтаже);
	КонецЦикла;	
	
	СтрокиДанныхРаздела66 = Объект.КорректирующиеСведения.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаРаздела66 Из СтрокиДанныхРаздела66 Цикл
		СтруктураПолейРаздела66 = СтруктураПолейРаздела66();
		ЗаполнитьЗначенияСвойств(СтруктураПолейРаздела66, СтрокаРаздела66);											
		
		ДанныеСотрудника.КорректирующиеСведения.Добавить(СтруктураПолейРаздела66);
	КонецЦикла;	

	Если ЗначениеЗаполнено(АдресДанныхТекущегоДокументаВХранилище) Тогда
		ПоместитьВоВременноеХранилище(ДанныеСотрудника, АдресДанныхТекущегоДокументаВХранилище);	
	Иначе	
		АдресДанныхТекущегоДокументаВХранилище = ПоместитьВоВременноеХранилище(ДанныеСотрудника, УникальныйИдентификатор);
	КонецЕсли;	
	
КонецПроцедуры	

&НаСервере
Функция СтруктураПолейСведенияОЗаработке()
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("КатегорияЗастрахованныхЛиц");
	СтруктураПолей.Вставить("Месяц");
	СтруктураПолей.Вставить("Заработок");
	СтруктураПолей.Вставить("ОблагаетсяВзносами");
	СтруктураПолей.Вставить("ОблагаетсяВзносамиДоПредельнойВеличины");
	СтруктураПолей.Вставить("ОблагаетсяВзносамиСвышеПредельнойВеличины");
	СтруктураПолей.Вставить("ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах");
	СтруктураПолей.Вставить("ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах");
	СтруктураПолей.Вставить("ПоДоговорамГПХДоПредельнойВеличины");
	СтруктураПолей.Вставить("ИдентификаторИсходнойСтроки");
	
	Возврат СтруктураПолей;
КонецФункции

&НаСервере
Функция СтруктураПолейСведенияОЗаработкеНаВредныхИТяжелыхРаботах()
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Месяц");
	СтруктураПолей.Вставить("КлассУсловийТруда");
	СтруктураПолей.Вставить("ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах");
	СтруктураПолей.Вставить("ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах");
	СтруктураПолей.Вставить("ИдентификаторИсходнойСтроки");
	
	Возврат СтруктураПолей;
КонецФункции

&НаСервере
Функция СтруктураПолейЗаписиОСтаже()
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("НомерОсновнойЗаписи");
	СтруктураПолей.Вставить("НомерДополнительнойЗаписи");
	СтруктураПолей.Вставить("ДатаНачалаПериода");
	СтруктураПолей.Вставить("ДатаОкончанияПериода");
	СтруктураПолей.Вставить("ОсобыеУсловияТруда");
	СтруктураПолей.Вставить("КодПозицииСписка");
	СтруктураПолей.Вставить("ОснованиеИсчисляемогоСтажа");
	СтруктураПолей.Вставить("ПервыйПараметрИсчисляемогоСтажа");
	СтруктураПолей.Вставить("ВторойПараметрИсчисляемогоСтажа");
	СтруктураПолей.Вставить("ТретийПараметрИсчисляемогоСтажа");
	СтруктураПолей.Вставить("ОснованиеВыслугиЛет");
	СтруктураПолей.Вставить("ПервыйПараметрВыслугиЛет");
	СтруктураПолей.Вставить("ВторойПараметрВыслугиЛет");
	СтруктураПолей.Вставить("ТретийПараметрВыслугиЛет");
	СтруктураПолей.Вставить("ТерриториальныеУсловия");
	СтруктураПолей.Вставить("ПараметрТерриториальныхУсловий");
	СтруктураПолей.Вставить("ИдентификаторИсходнойСтроки");

	Возврат СтруктураПолей;	
КонецФункции

&НаСервере
Функция СтруктураПолейРаздела66()
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("КорректируемыйПериод");
	СтруктураПолей.Вставить("НомерДополнительнойЗаписи");
	СтруктураПолей.Вставить("ДоначисленоСтраховая");
	СтруктураПолей.Вставить("ДоначисленоНакопительная");
	СтруктураПолей.Вставить("ДоначисленоНаОПС");
	
	Возврат СтруктураПолей;	
КонецФункции

&НаСервере
Процедура ДанныеТекущегоДокументаПоСотрудникуВДанныеФормы(АдресВоВременномХранилище)
	
	ДанныеШапкиДокумента = Объект.ДокументыКомплекта.НайтиПоИдентификатору(Элементы.СписокДокументов.ТекущаяСтрока);
	
	ДанныеТекущегоДокумента = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Если ДанныеТекущегоДокумента = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеТекущейСтрокиПоСотруднику = Неопределено;
	Если ДанныеТекущегоДокумента.РедактируемыйДокументСсылка = Объект.СсылкаНаРедактируемыйДокумент Тогда
		НайденныеСтроки = Объект.Сотрудники.НайтиСтроки(Новый Структура("Сотрудник", ДанныеТекущегоДокумента.Сотрудник));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			ДанныеТекущейСтрокиПоСотруднику = НайденныеСтроки[0];
			
			Если ДанныеТекущейСтрокиПоСотруднику.Сотрудник <> ДанныеТекущегоДокумента.Сотрудник Тогда
				ДанныеТекущейСтрокиПоСотруднику = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеТекущейСтрокиПоСотруднику = Неопределено 
		Или ДанныеШапкиДокумента = Неопределено Тогда
		
		ВызватьИсключение НСтр("ru = 'В текущем документе не найдены данные по редактируемому сотруднику.'");
	КонецЕсли;
	
	ДанныеТекущейСтрокиПоСотруднику = Объект.Сотрудники.НайтиПоИдентификатору(Элементы.Сотрудники.ТекущаяСтрока); 
	
	Если ДанныеТекущейСтрокиПоСотруднику.ФиксСтаж = Ложь
		И ДанныеТекущегоДокумента.ФиксСтаж = Истина Тогда
		
		ДанныеТекущейСтрокиПоСотруднику.ФиксироватьСтаж = Истина; 
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДанныеТекущейСтрокиПоСотруднику, ДанныеТекущегоДокумента);
	
	ЗаполнитьИтогиВзносовВСтрокеСотрудника(ДанныеТекущейСтрокиПоСотруднику, ДанныеШапкиДокумента.КатегорияЗастрахованныхЛиц);
	
	СтруктураПоиска = Новый Структура("Сотрудник", ДанныеТекущейСтрокиПоСотруднику.Сотрудник);
	
	СтрокиЗаработка = Объект.СведенияОЗаработке.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаЗаработокСотрудника Из СтрокиЗаработка Цикл
		Объект.СведенияОЗаработке.Удалить(Объект.СведенияОЗаработке.Индекс(СтрокаЗаработокСотрудника));
	КонецЦикла;

	СуществущиеСтрокиЗаработка = Новый Массив;
	
	ДанныеТекущейСтрокиПоСотруднику.Заработок = 0;
	ДанныеТекущейСтрокиПоСотруднику.ОблагаетсяВзносамиДоПредельнойВеличины = 0;
	ДанныеТекущейСтрокиПоСотруднику.ОблагаетсяВзносамиСвышеПредельнойВеличины = 0;
	ДанныеТекущейСтрокиПоСотруднику.ПоДоговорамГПХДоПредельнойВеличины = 0;
	
	Для Каждого СтрокаЗаработок Из ДанныеТекущегоДокумента.СведенияОЗаработке Цикл
		СтрокаЗаработокОбъекта = Объект.СведенияОЗаработке.Добавить();
		СтрокаЗаработокОбъекта.Сотрудник = ДанныеТекущейСтрокиПоСотруднику.Сотрудник;
		
		ЗаполнитьЗначенияСвойств(СтрокаЗаработокОбъекта, СтрокаЗаработок);
		
		Если СтрокаЗаработокОбъекта.Месяц <> 0 Тогда
			ДанныеТекущейСтрокиПоСотруднику.Заработок = ДанныеТекущейСтрокиПоСотруднику.Заработок + СтрокаЗаработок.Заработок;
			ДанныеТекущейСтрокиПоСотруднику.ОблагаетсяВзносамиДоПредельнойВеличины = ДанныеТекущейСтрокиПоСотруднику.ОблагаетсяВзносамиДоПредельнойВеличины + СтрокаЗаработок.ОблагаетсяВзносамиДоПредельнойВеличины;
			ДанныеТекущейСтрокиПоСотруднику.ОблагаетсяВзносамиСвышеПредельнойВеличины = ДанныеТекущейСтрокиПоСотруднику.ОблагаетсяВзносамиСвышеПредельнойВеличины + СтрокаЗаработок.ОблагаетсяВзносамиСвышеПредельнойВеличины;
			ДанныеТекущейСтрокиПоСотруднику.ПоДоговорамГПХДоПредельнойВеличины = ДанныеТекущейСтрокиПоСотруднику.ПоДоговорамГПХДоПредельнойВеличины + СтрокаЗаработок.ПоДоговорамГПХДоПредельнойВеличины;
		КонецЕсли;
	КонецЦикла;
		
	СтрокиСтажа = Объект.ЗаписиОСтаже.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаСтажСотрудника Из СтрокиСтажа Цикл
		Объект.ЗаписиОСтаже.Удалить(Объект.ЗаписиОСтаже.Индекс(СтрокаСтажСотрудника));
	КонецЦикла;
	
	СтрокиСтажаПоСотруднику = Новый Массив;
	Для Каждого СтрокаСтаж Из ДанныеТекущегоДокумента.ЗаписиОСтаже Цикл
		СтрокаСтажОбъекта = Объект.ЗаписиОСтаже.Добавить();
		СтрокаСтажОбъекта.Сотрудник = ДанныеТекущейСтрокиПоСотруднику.Сотрудник;
		
		ЗаполнитьЗначенияСвойств(СтрокаСтажОбъекта, СтрокаСтаж);
		
		СтрокиСтажаПоСотруднику.Добавить(СтрокаСтажОбъекта);
	КонецЦикла;
	
	ПерсонифицированныйУчетКлиентСервер.ВыполнитьНумерациюЗаписейОСтаже(СтрокиСтажаПоСотруднику);
		
	Если ТипЗнч(Объект.СсылкаНаРедактируемыйДокумент) = Тип("ДокументСсылка.ПачкаРазделов6РасчетаРСВ_1") Тогда
		СтрокиВредногоЗаработка = Объект.СведенияОЗаработкеНаВредныхИТяжелыхРаботах.НайтиСтроки(СтруктураПоиска);
	
		Для Каждого СтрокаВредныйЗаработокСотрудника Из СтрокиВредногоЗаработка Цикл
			Объект.СведенияОЗаработкеНаВредныхИТяжелыхРаботах.Удалить(Объект.СведенияОЗаработкеНаВредныхИТяжелыхРаботах.Индекс(СтрокаВредныйЗаработокСотрудника));
		КонецЦикла;
	
		Для Каждого СтрокаВредныйЗаработок Из ДанныеТекущегоДокумента.СведенияОЗаработкеНаВредныхИТяжелыхРаботах Цикл
			СтрокаВредныйЗаработокОбъекта = Объект.СведенияОЗаработкеНаВредныхИТяжелыхРаботах.Добавить();
			СтрокаВредныйЗаработокОбъекта.Сотрудник = ДанныеТекущейСтрокиПоСотруднику.Сотрудник;
			
			ЗаполнитьЗначенияСвойств(СтрокаВредныйЗаработокОбъекта, СтрокаВредныйЗаработок);
		КонецЦикла;
		
		Если ДанныеШапкиДокумента.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ Тогда
			СтрокиДанныхРаздела66 = Объект.КорректирующиеСведения.НайтиСтроки(СтруктураПоиска);
		
			Для Каждого СтрокаРаздела66Объекта Из СтрокиДанныхРаздела66 Цикл
				Объект.КорректирующиеСведения.Удалить(Объект.КорректирующиеСведения.Индекс(СтрокаРаздела66Объекта));
			КонецЦикла;
		
			Для Каждого СтрокаРаздела66 Из ДанныеТекущегоДокумента.КорректирующиеСведения Цикл
				СтрокаРаздела66Объекта = Объект.КорректирующиеСведения.Добавить();
				СтрокаРаздела66Объекта.Сотрудник = ДанныеТекущейСтрокиПоСотруднику.Сотрудник;
				
				ЗаполнитьЗначенияСвойств(СтрокаРаздела66Объекта, СтрокаРаздела66);
			КонецЦикла;
		
		КонецЕсли;	

	КонецЕсли;	
		
	Если ДанныеТекущегоДокумента.Модифицированность Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
	ЗаполнитьИтогиПоПачке(ЭтаФорма);
	
	ИндексСтроки = Объект.Сотрудники.Индекс(ДанныеТекущейСтрокиПоСотруднику);
	
	ПутьКДанным = "Объект.Сотрудники[" +  ИндексСтроки + "]";
	
	СоответствиеПутиКДаннымТаблиц = Новый Соответствие;
	СоответствиеПутиКДаннымТаблиц.Вставить("ЗаписиОСтаже", "Объект.ЗаписиОСтаже");
	СоответствиеПутиКДаннымТаблиц.Вставить("СведенияОЗаработке", "Объект.СведенияОЗаработке");
	СоответствиеПутиКДаннымТаблиц.Вставить("СведенияОЗаработкеНаВредныхИТяжелыхРаботах", "Объект.СведенияОЗаработкеНаВредныхИТяжелыхРаботах");
	СоответствиеПутиКДаннымТаблиц.Вставить("КорректирующиеСведения", "Объект.КорректирующиеСведения");
	
	ЗарплатаКадрыОтображениеОшибокКлиентСервер.УдалитьОшибкиИзДанныхФормыПоПутиКДанным(ЭтотОбъект, ПутьКДанным + ".*"); 
	
	ОписаниеПодчиненностиДанных = ОписаниеПодчиненностиДанных();
	
	Ошибки = Неопределено;
	ДанныеТекущегоДокумента.Свойство("Ошибки", Ошибки);
	
	Если Ошибки <> Неопределено Тогда
		ОшибкиДанныхФормы = ЗарплатаКадрыОтображениеОшибок.ПоместитьСообщенияОбОшибкахИзФормыРедактированияСтрокиТаблицыФормыВОсновнуюФорму(
								ЭтотОбъект, 
								ПутьКДанным,
								ДанныеТекущегоДокумента.Ошибки,
								СоответствиеПутиКДаннымТаблиц,
								ОписаниеПодчиненностиДанных,
								Объект.СсылкаНаРедактируемыйДокумент);
	Иначе
		ОшибкиДанныхФормы = Новый Массив;							
	КонецЕсли;								
							
	ЗарплатаКадрыОтображениеОшибок.ОчиститьФлагНаличияОшибокПоПутиКДанным(
		ЭтотОбъект,
		ПутьКДанным,
		ОписаниеПодчиненностиДанных,
		Истина);
		
	ЗарплатаКадрыОтображениеОшибок.УстановитьФлагиНаличияОшибокПоСообщениямОбОшибках(
		ЭтотОбъект,
		ОшибкиДанныхФормы,
		ОписаниеПодчиненностиДанных);
		
	ОбъектСодержитОшибки = ЗарплатаКадрыОтображениеОшибок.УстановленоОтображениеОшибокВДанных(ЭтотОбъект, "Объект");
	
	ОписаниеДокумента = СтрокаСпискаДокументовПоСсылке(ЭтотОбъект, Объект.СсылкаНаРедактируемыйДокумент);
	
	ОписаниеДокумента.ЕстьОшибки = ОбъектСодержитОшибки;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИтогиВзносовВСтрокеСотрудника(СтрокаПоСотруднику, КатегорияЗастрахованныхЛиц)
	КатегорииЧленовЭкипажейСудов = ПерсонифицированныйУчет.КатегорииЧленовЭкипажаМорскихСудов();
	
	Если КатегорииЧленовЭкипажейСудов.Найти(КатегорияЗастрахованныхЛиц) = Неопределено Тогда 
		СтрокаПоСотруднику.НачисленоСтраховаяВсего = 
			СтрокаПоСотруднику.НачисленоСтраховаяБезУчетаДанныхПачки + СтрокаПоСотруднику.НачисленоСтраховая;
			
		СтрокаПоСотруднику.НачисленоНакопительнаяВсего = 
			СтрокаПоСотруднику.НачисленоНакопительнаяБезУчетаДанныхПачки + СтрокаПоСотруднику.НачисленоНакопительная;
			
		СтрокаПоСотруднику.УплаченоСтраховаяВсего = 
			СтрокаПоСотруднику.УплаченоСтраховаяБезУчетаДанныхПачки + СтрокаПоСотруднику.УплаченоСтраховая;	
			
		СтрокаПоСотруднику.УплаченоНакопительнаяВсего = 
			СтрокаПоСотруднику.УплаченоНакопительнаяБезУчетаДанныхПачки + СтрокаПоСотруднику.УплаченоНакопительная;
			
		Если СтрокаПоСотруднику.НачисленоСтраховаяВсего = 0 Тогда
			СтрокаПоСотруднику.КоэффициентУплатыСтраховая = 0;
		Иначе
			СтрокаПоСотруднику.КоэффициентУплатыСтраховая = СтрокаПоСотруднику.УплаченоСтраховаяВсего / СтрокаПоСотруднику.НачисленоСтраховаяВсего;
		КонецЕсли;	
		
		Если СтрокаПоСотруднику.НачисленоНакопительнаяВсего = 0 Тогда
			СтрокаПоСотруднику.КоэффициентУплатыНакопительная = 0;
		Иначе
			СтрокаПоСотруднику.КоэффициентУплатыНакопительная = СтрокаПоСотруднику.УплаченоНакопительнаяВсего / СтрокаПоСотруднику.НачисленоНакопительнаяВсего;
		КонецЕсли;	
				
	Иначе		
		СтрокаПоСотруднику.НачисленоСтраховаяПоКатегорииЧЭСВсего = 
			СтрокаПоСотруднику.НачисленоСтраховаяПоКатегорииЧЭСБезУчетаДанныхПачки + СтрокаПоСотруднику.НачисленоСтраховая;
			
		СтрокаПоСотруднику.НачисленоНакопительнаяПоКатегорииЧЭСВсего = 
			СтрокаПоСотруднику.НачисленоНакопительнаяПоКатегорииЧЭСБезУчетаДанныхПачки + СтрокаПоСотруднику.НачисленоНакопительная;	
			
	КонецЕсли;	
		
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьИтогиПоПачке(Форма)
	Если ПерсонифицированныйУчетКлиентСервер.ЭтоДокументСведенийОВзносахИСтаже(Форма.Объект.СсылкаНаРедактируемыйДокумент) Тогда
		ОписаниеПачки = СтрокаСпискаДокументовПоСсылке(Форма, Форма.Объект.СсылкаНаРедактируемыйДокумент);	
			
		ОписаниеПачки.НачисленоСтраховая = Форма.Объект.Сотрудники.Итог("НачисленоСтраховая");
		ОписаниеПачки.НачисленоНакопительная = Форма.Объект.Сотрудники.Итог("НачисленоНакопительная");
		ОписаниеПачки.УплаченоСтраховая = Форма.Объект.Сотрудники.Итог("УплаченоСтраховая");
		ОписаниеПачки.УплаченоНакопительная = Форма.Объект.Сотрудники.Итог("УплаченоНакопительная");	
	КонецЕсли;
	
	ЗаполнитьИтогиПоОписи(Форма);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьИтогиПоОписи(Форма)
	ОписаниеОписи = СтрокаСпискаДокументовПоСсылке(Форма, Форма.Объект.КомплектОбъект.ОписьПачекСЗВ);
	
	Если ОписаниеОписи <> Неопределено Тогда
		ОписаниеОписи.НачисленоСтраховая = 0;
	    ОписаниеОписи.НачисленоНакопительная = 0;
		ОписаниеОписи.УплаченоСтраховая = 0;
	    ОписаниеОписи.УплаченоНакопительная = 0;
		
		Для Каждого ОписаниеПачки Из Форма.Объект.ДокументыКомплекта Цикл
			Если ПерсонифицированныйУчетКлиентСервер.ЭтоДокументСведенийОВзносахИСтаже(ОписаниеПачки.Ссылка) 
				И ОписаниеПачки.ТипСведенийСЗВ = ПредопределенноеЗначение("Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ") Тогда 
				
				ОписаниеОписи.НачисленоСтраховая = ОписаниеОписи.НачисленоСтраховая + ОписаниеПачки.НачисленоСтраховая;
			    ОписаниеОписи.НачисленоНакопительная = ОписаниеОписи.НачисленоНакопительная + ОписаниеПачки.НачисленоНакопительная;
				ОписаниеОписи.УплаченоСтраховая = ОписаниеОписи.УплаченоСтраховая + ОписаниеПачки.УплаченоСтраховая;
			    ОписаниеОписи.УплаченоНакопительная = ОписаниеОписи.УплаченоНакопительная + ОписаниеПачки.УплаченоНакопительная;
			КонецЕсли;			
		КонецЦикла;	
	
	КонецЕсли;	
КонецПроцедуры	

&НаСервере
Процедура СотрудникиПередУдалениемНаСервере()
	ИдентификаторыУдаляемыхСтрок = Элементы.Сотрудники.ВыделенныеСтроки;
	
	Для Каждого ИдентификаторТекущейСтроки Из ИдентификаторыУдаляемыхСтрок Цикл
		
		ДанныеТекущейСтроки = Объект.Сотрудники.НайтиПоИдентификатору(ИдентификаторТекущейСтроки);
		
		Если ИдентификаторТекущейСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура("Сотрудник", ДанныеТекущейСтроки.Сотрудник);
		
		УдаляемыеСтрокиСтажа = Объект.ЗаписиОСтаже.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтрокиСтажа Цикл
			Объект.ЗаписиОСтаже.Удалить(Объект.ЗаписиОСтаже.Индекс(УдаляемаяСтрока));
		КонецЦикла;
		
		УдаляемыеСтрокиЗаработка = Объект.СведенияОЗаработке.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтрокиЗаработка Цикл
			Объект.СведенияОЗаработке.Удалить(Объект.СведенияОЗаработке.Индекс(УдаляемаяСтрока));
		КонецЦикла;
		
		УдаляемыеСтрокиЗаработка = Объект.СведенияОЗаработкеНаВредныхИТяжелыхРаботах.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого УдаляемаяСтрока Из УдаляемыеСтрокиЗаработка Цикл
			Объект.СведенияОЗаработкеНаВредныхИТяжелыхРаботах.Удалить(Объект.СведенияОЗаработкеНаВредныхИТяжелыхРаботах.Индекс(УдаляемаяСтрока));
		КонецЦикла;
	КонецЦикла;	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыИФункцииДляОтображенияОшибок

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	СохранитьИзмененияВКомплекте();
		
	РедактируемыйКомплектСсылка = ВыбранноеЗначение;
	
	РедактируемыйКомплектПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Функция АдресСпискаПодобранныхСотрудников()
	
	Возврат ПоместитьВоВременноеХранилище(Объект.Сотрудники.Выгрузить(,"Сотрудник").ВыгрузитьКолонку("Сотрудник"), УникальныйИдентификатор);
	
КонецФункции

// Добавление полей заголовков.

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеКолонокЗаголовковТаблицФормы()
	ОписаниеКолонокЗаголовковТаблиц = Новый Соответствие;
	
	ОписаниеКолонокЗаголовковТаблиц.Вставить("Сотрудники", ОписаниеКолонокЗаголовковТаблицы("Сотрудники")); 
	ОписаниеКолонокЗаголовковТаблиц.Вставить("ДанныеРСВИтогиПоТарифам", ОписаниеКолонокЗаголовковТаблицы("ДанныеРСВИтогиПоТарифам")); 
	ОписаниеКолонокЗаголовковТаблиц.Вставить("ИтогиПоКатегориям", ОписаниеКолонокЗаголовковТаблицы("ИтогиПоКатегориям")); 
	
	Возврат ОписаниеКолонокЗаголовковТаблиц;
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеКолонокЗаголовковТаблицыСотрудники()
	ОписаниеЗаголовковКолонок = Новый Массив;
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "СотрудникиНачисленоСтраховая";
	ОписаниеЗаголовка.Заголовок = "Начислено";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "СотрудникиУплаченоСтраховая";
	ОписаниеЗаголовка.Заголовок = "Уплачено";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "СотрудникиДоначисленоСтраховая";
	ОписаниеЗаголовка.Заголовок = "Доначислено";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "СотрудникиДоУплаченоСтраховая";
	ОписаниеЗаголовка.Заголовок = "Доуплачено";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);

	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "СотрудникиНачисленоНакопительная";
	ОписаниеЗаголовка.Заголовок = "Начислено";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);

	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "СотрудникиУплаченоНакопительная";
	ОписаниеЗаголовка.Заголовок = "Уплачено";       
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);

	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "СотрудникиДоначисленоНакопительная";
	ОписаниеЗаголовка.Заголовок = "Доначислено";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);

	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "СотрудникиДоУплаченоНакопительная";
	ОписаниеЗаголовка.Заголовок = "Доуплачено";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);

	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "СотрудникиОблагаетсяВзносамиДоПредельнойВеличины";
	ОписаниеЗаголовка.Заголовок = "До пред.";
	ОписаниеЗаголовка.Ширина = 8;
		
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);

	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "СотрудникиОблагаетсяСвышеПредельнойВеличины";
	ОписаниеЗаголовка.Заголовок = "Свыше пред.";
	ОписаниеЗаголовка.Ширина = 11;
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);

	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "СотрудникиНачисленоСтраховаяВсего";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);

	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "СотрудникиНачисленоСтраховаяПоКатегорииЧЭСВсего";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);

	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "СотрудникиУплаченоСтраховаяВсего";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);

	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "СотрудникиКоэффициентУплатыСтраховая";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);

	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "СотрудникиНачисленоНакопительнаяВсего";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);

	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "СотрудникиНачисленоНакопительнаяПоКатегорииЧЭСВсего";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);

	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "СотрудникиУплаченоНакопительнаяВсего";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);

	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "СотрудникиКоэффициентУплатыНакопительная";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	Возврат ОписаниеЗаголовковКолонок;
		
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеКолонокЗаголовковТаблицыИтогиПоТарифам()
	ОписаниеЗаголовковКолонок = Новый Массив;
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ДанныеРСВИтогиПоТарифамНачисленоСтраховаяЗаГод";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ДанныеРСВИтогиПоТарифамНачисленоНакопительнаяЗаГод";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ДанныеРСВИтогиПоТарифамНачисленоСтраховаяЗаОтчетныйПериод";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ДанныеРСВИтогиПоТарифамНачисленоНакопительнаяЗаОтчетныйПериод";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ДанныеРСВИтогиПоТарифамОбъектОбложенияРСВ1";
	ОписаниеЗаголовка.Ширина = 7;
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ДанныеРСВИтогиПоТарифамОблагаемаяБазаРСВ1";
	ОписаниеЗаголовка.Ширина = 18;
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ДанныеРСВИтогиПоТарифамБазаСверхПредельнойРСВ1";
	ОписаниеЗаголовка.Ширина = 15;
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	Возврат ОписаниеЗаголовковКолонок;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеКолонокЗаголовковТаблицыИтогиПоКатегориям()
	ОписаниеЗаголовковКолонок = Новый Массив;
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ИтогиПоКатегориямНачисленоСтраховая";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ИтогиПоКатегориямНачисленоНакопительная";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ИтогиПоКатегориямУплаченоСтраховая";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ИтогиПоКатегориямУплаченоНакопительная";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ИтогиПоКатегориямОблагаетсяВзносамиДоПредельнойВеличины";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ИтогиПоКатегориямОблагаетсяВзносамиСвышеПредельнойВеличины";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	Возврат ОписаниеЗаголовковКолонок;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеКолонокЗаголовковТаблицы(ИмяТаблицы)
	Если ИмяТаблицы = "Сотрудники" Тогда
		ОписаниеКолонок = ОписаниеКолонокЗаголовковТаблицыСотрудники();
	ИначеЕсли ИмяТаблицы = "ДанныеРСВИтогиПоТарифам" Тогда
		ОписаниеКолонок = ОписаниеКолонокЗаголовковТаблицыИтогиПоТарифам();
	ИначеЕсли ИмяТаблицы = "ИтогиПоКатегориям" Тогда 
		ОписаниеКолонок = ОписаниеКолонокЗаголовковТаблицыИтогиПоКатегориям()
	КонецЕсли;	
		
	Возврат ОписаниеКолонок;
КонецФункции	

&НаКлиенте
Процедура ЗаписатьНаДискПродолжение(Результат, ДополнительныеПараметры) Экспорт 
	
	ОповещениеВопроса = Новый ОписаниеОповещения("ЗаписатьНаДискЗавершение", ЭтотОбъект);
	ФайловаяСистемаКлиент.ПодключитьРасширениеДляРаботыСФайлами(ОповещениеВопроса);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНаДискЗавершение(Результат, Параметры) Экспорт
	ЗаписатьФайлыКомплектаНаДиск();
КонецПроцедуры

// проверка заполнения данных

&НаСервере
Функция ПроверитьДанныеКомплектаНаСервере(ОшибкиРСВКомплекта, Отказ = Ложь)
	
	СохранитьИзмененияВКомплектеНаСервере();
	
	ЗарплатаКадрыОтображениеОшибок.УдалитьСообщенияОбОшибкахИзВременногоХранилища(ЭтотОбъект);
	
	ОбработкаОбъект = ДанныеФормыВОбъект();
		
	ОбработкаОбъект.ПроверитьДанныеКомплекта(ОшибкиРСВКомплекта, Отказ);
		
	Ошибки = ПолучитьСообщенияПользователю(Истина);
	
	ОшибкиОрганизации = Новый Массив;
	ПроверяемыеПоляОрганизации = ПерсонифицированныйУчет.ПроверяемыеПоляОрганизации();
	
	СообщенияОбОшибкахПоКлючамДанных = Новый Соответствие;
	
	Для Каждого СообщениеОбОшибке Из Ошибки Цикл
		Если ПроверяемыеПоляОрганизации.Найти(СообщениеОбОшибке.Поле) <> Неопределено Тогда
			ОшибкиОрганизации.Добавить(СообщениеОбОшибке);
			Продолжить;
		КонецЕсли;	

		ОшибкиПоКлючуДанных = СообщенияОбОшибкахПоКлючамДанных.Получить(СообщениеОбОшибке.КлючДанных);
		
		Если ОшибкиПоКлючуДанных = Неопределено Тогда
			ОшибкиПоКлючуДанных = Новый Массив;
			СообщенияОбОшибкахПоКлючамДанных.Вставить(СообщениеОбОшибке.КлючДанных, ОшибкиПоКлючуДанных);	
		КонецЕсли;
				
		ОшибкиПоКлючуДанных.Добавить(СообщениеОбОшибке);
	КонецЦикла;	
	
	Для Каждого ОписаниеДокумента Из Объект.ДокументыКомплекта Цикл
		ОшибкиПоКлючуДанных = СообщенияОбОшибкахПоКлючамДанных.Получить(ОписаниеДокумента.Ссылка);
		
		Если ТипЗнч(ОписаниеДокумента.Ссылка) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
			ОписаниеДокумента.ЕстьОшибки = ОшибкиПоКлючуДанных <> Неопределено Или ОшибкиРСВКомплекта.Количество() > 0;
		ИначеЕсли ОшибкиПоКлючуДанных <> Неопределено  Тогда
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОшибкиПоКлючуДанных, ОшибкиОрганизации);
			ОписаниеДокумента.ЕстьОшибки = Истина;
		ИначеЕсли ОшибкиОрганизации.Количество() > 0 Тогда
			ОшибкиПоКлючуДанных = Новый Массив;
			ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ОшибкиПоКлючуДанных, ОшибкиОрганизации);
			
			ОписаниеДокумента.ЕстьОшибки = Истина;	
			СообщенияОбОшибкахПоКлючамДанных.Вставить(ОписаниеДокумента.Ссылка, ОшибкиПоКлючуДанных);
		Иначе
			ОписаниеДокумента.ЕстьОшибки = Ложь;	
		КонецЕсли;	
		
	КонецЦикла;	
	
	ОшибкиРСВ = Новый ФиксированныйМассив(ОшибкиРСВКомплекта);

	ПоместитьОшибкиВДанныеФормы(ОбработкаОбъект, СообщенияОбОшибкахПоКлючамДанных);
КонецФункции

&НаСервере
Процедура ПоместитьОшибкиВДанныеФормы(ОбработкаОбъект, ОшибкиВсехДокументовКомплекта = Неопределено)
	ЗарплатаКадрыОтображениеОшибок.УдалитьОшибкиИзДанныхФормы(ЭтотОбъект);
	ЗарплатаКадрыОтображениеОшибок.ОчиститьФлагиНаличияОшибок(ЭтотОбъект);
	
	Если ОшибкиВсехДокументовКомплекта = Неопределено Тогда
		
		Если Не ПустаяСтрока(АдресОшибокВХранилище) Тогда
			ОшибкиВсехДокументовКомплекта = ПолучитьИзВременногоХранилища(АдресОшибокВХранилище);
		Иначе
			ОшибкиВсехДокументовКомплекта = Новый Соответствие;	
		КонецЕсли;	
	КонецЕсли;

	ОписаниеПодчиненностиДанных = ОписаниеПодчиненностиДанных();
	
	ПоместитьОшибкиОбъектаВДанныеФормы(
		ОбработкаОбъект, 
		Объект.СсылкаНаРедактируемыйДокумент,
		СоответствиеДанныхДокументовДаннымФормы(),
		ОписаниеПодчиненностиДанных, 
		ОшибкиВсехДокументовКомплекта);
		
	ПоместитьОшибкиОбъектаВДанныеФормы(
		ОбработкаОбъект, 
		Объект.КомплектОбъект.Ссылка,
		СоответствиеДанныхКомплектаДаннымФормы(),
		ОписаниеПодчиненностиДанных, 
		ОшибкиВсехДокументовКомплекта);	
	
	Если АдресОшибокВХранилище = "" Тогда
		АдресОшибокВХранилище = ПоместитьВоВременноеХранилище(ОшибкиВсехДокументовКомплекта, УникальныйИдентификатор);
	Иначе
		ПоместитьВоВременноеХранилище(ОшибкиВсехДокументовКомплекта, АдресОшибокВХранилище);
	КонецЕсли;	
КонецПроцедуры	

&НаСервере
Процедура ПоместитьОшибкиОбъектаВДанныеФормы(ОбработкаОбъект, КлючДанных, СоответствиеДанныхОбъектаДаннымФормы, ОписаниеПодчиненностиДанных, ОшибкиВсехДокументовКомплекта)
	ОшибкиОбъекта = ЗарплатаКадрыОтображениеОшибок.СообщенияОбОшибкахИзВременногоХранилища(ЭтотОбъект, КлючДанных);
	
	Если ОшибкиОбъекта = Неопределено 
		И (ЗначениеЗаполнено(АдресОшибокВХранилище)
		Или ОшибкиВсехДокументовКомплекта <> Неопределено) Тогда
		
		Если ОшибкиВсехДокументовКомплекта = Неопределено Тогда
			ОшибкиВсехДокументовКомплекта = ПолучитьИзВременногоХранилища(АдресОшибокВХранилище);
		КонецЕсли;
		
		Если ОшибкиВсехДокументовКомплекта <> Неопределено Тогда 
			ОшибкиОбъекта = ОшибкиВсехДокументовКомплекта.Получить(КлючДанных);
			
			Если ОшибкиОбъекта <> Неопределено Тогда
				ЗарплатаКадрыОтображениеОшибок.ПреобразоватьПутиКДаннымВСообщенияхПользователю(
					ОбработкаОбъект,
					ЭтотОбъект,
					ОшибкиОбъекта,
					СоответствиеДанныхОбъектаДаннымФормы,
					"Объект");
					
				ЗарплатаКадрыОтображениеОшибок.СохранитьСообщенияОбОшибкахВоВременномХранилище(ЭтотОбъект, ОшибкиОбъекта, КлючДанных); 	
				
				ОшибкиВсехДокументовКомплекта.Удалить(КлючДанных);	
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	Если ОшибкиОбъекта = Неопределено Тогда
		ОшибкиОбъекта = Новый Массив;
	КонецЕсли;	
	
	ОписаниеПодчиненностиДанных = ОписаниеПодчиненностиДанных();
	
	ЗарплатаКадрыОтображениеОшибок.ПоместитьСообщенияОбОшибкахВДанныеФормы(ЭтотОбъект, ОшибкиОбъекта, КлючДанных);
	ЗарплатаКадрыОтображениеОшибок.УстановитьФлагиНаличияОшибокПоСообщениямОбОшибках(ЭтотОбъект, ОшибкиОбъекта, ОписаниеПодчиненностиДанных);
	
	Если ТипЗнч(КлючДанных) = Тип("ДокументСсылка.РегламентированныйОтчет")
		И ОшибкиРСВ <> Неопределено
		И ОшибкиРСВ.Количество() > 0 Тогда
		
		ЗарплатаКадрыОтображениеОшибок.УстановитьФлагНаличияОшибокПоПутиКДанным(ЭтотОбъект, "Объект.СсылкаНаРедактируемыйДокумент", ОписаниеПодчиненностиДанных);			
	КонецЕсли;	
	
КонецПроцедуры

// Описание свойств данных формы и элементов формы для механизма отображения ошибок в формах.

&НаСервере
Функция ОписаниеЭлементовСИндикациейОшибок() Экспорт
	КоллекцияОписанийЭлементов = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементовСИндикациейОшибок();
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ОтображатьГиперссылку = Ложь;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "ЗаголовокТекущегоДокумента";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ОтображатьНепривязанныеОшибки = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.СсылкаНаРедактируемыйДокумент";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);		
	
	// Для документов СЗВ-6-1,2,3,4.

	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы();	
	ОписаниеЭлемента.ИмяЭлемента = "Сотрудники";
	ОписаниеЭлемента.ИмяЭлементаТаблица = "Сотрудники";
	ОписаниеЭлемента.ОтображатьГиперссылку = Ложь;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.Сотрудники";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы(КоллекцияОписанийЭлементов, ОписаниеЭлемента);	
		
	// для итогов по АДВ-6-2
			
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы();	
	ОписаниеЭлемента.ИмяЭлемента = "ИтогиПоКатегориям";
	ОписаниеЭлемента.ИмяЭлементаТаблица = "ИтогиПоКатегориям";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.ИтогиПоКатегориям";	
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы(КоллекцияОписанийЭлементов, ОписаниеЭлемента);	

	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "ОписьНачисленоСтраховая";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.ОписьНачисленоСтраховая";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
		
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "ОписьНачисленоНакопительная";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.ОписьНачисленоНакопительная";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
		
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "ОписьУплаченоСтраховая";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.ОписьУплаченоСтраховая";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);

	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "ОписьУплаченоНакопительная";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.ОписьУплаченоНакопительная";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);

	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "ОписьЗаработок";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.ОписьЗаработок";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);

	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "ОписьОблагаетсяВзносами";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.ОписьОблагаетсяВзносами";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);

	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "ОписьЗаработокПоЛьготнымКатегориям";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.ОписьЗаработокПоЛьготнымКатегориям";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);

	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "ОписьОблагаетсяВзносамиПоЛьготнымКатегориям";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.ОписьОблагаетсяВзносамиПоЛьготнымКатегориям";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
			
	// для итогов по РСВ-1
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы();	
	ОписаниеЭлемента.ИмяЭлемента = "ДанныеРСВИтогиПоТарифам";
	ОписаниеЭлемента.ИмяЭлементаТаблица = "ДанныеРСВИтогиПоТарифам";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.РСВ_1ИтогиПоТарифам";	
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "РСВ_1НачисленоСтраховая";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.РСВ_1НачисленоСтраховая";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "РСВ_1НачисленоНакопительная";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.РСВ_1НачисленоНакопительная";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "РСВ_1УплаченоСтраховая";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.РСВ_1УплаченоСтраховая";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);

	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "РСВ_1УплаченоНакопительная";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.РСВ_1УплаченоНакопительная";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);

	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "РСВ_1ОблагаемаяБаза";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.РСВ_1ОблагаемаяБаза";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);

	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "РСВ_1ОблагаемаяБазаПоЛьготнымТарифам";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.РСВ_1ОблагаемаяБазаПоЛьготнымТарифам";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);

	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "РСВ_1ОбъектОбложения";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.РСВ_1ОбъектОбложения";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);

	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "РСВ_1ОбъектОбложенияПоЛьготнымТарифам";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.РСВ_1ОбъектОбложенияПоЛьготнымТарифам";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);

	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "РСВ_1УменьшенныйОбъектОбложения";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.РСВ_1УменьшенныйОбъектОбложения";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);

	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "РСВ_1УменьшенныйОбъектОбложенияПоЛьготнымТарифам";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.РСВ_1УменьшенныйОбъектОбложенияПоЛьготнымТарифам";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);

	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "РСВ_1ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.РСВ_1ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "РСВ_1ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.РСВ_1ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "РСВ_1ОбъектОбложенияЗа1Месяц";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.РСВ_1ОбъектОбложенияЗа1Месяц";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);

	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "РСВ_1ОбъектОбложенияЗа2Месяц";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.РСВ_1ОбъектОбложенияЗа2Месяц";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "РСВ_1ОбъектОбложенияЗа3Месяц";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.РСВ_1ОбъектОбложенияЗа3Месяц";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);

	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "РСВ_1ОблагаемаяБазаЗа1Месяц";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.РСВ_1ОблагаемаяБазаЗа1Месяц";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);

	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "РСВ_1ОблагаемаяБазаЗа2Месяц";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.РСВ_1ОблагаемаяБазаЗа2Месяц";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "РСВ_1ОблагаемаяБазаЗа3Месяц";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.РСВ_1ОблагаемаяБазаЗа3Месяц";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);

	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "РСВ_1БазаСверхПредельнойЗа1Месяц";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.РСВ_1БазаСверхПредельнойЗа1Месяц";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);

	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "РСВ_1БазаСверхПредельнойЗа2Месяц";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.РСВ_1БазаСверхПредельнойЗа2Месяц";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "РСВ_1БазаСверхПредельнойЗа3Месяц";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.РСВ_1БазаСверхПредельнойЗа3Месяц";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);

	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "РСВ_1НачисленоСтраховая2014";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.РСВ_1НачисленоСтраховая";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "РСВ_1КоличествоЗастрахованныхЛиц";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Объект.РСВ_1КоличествоЗастрахованныхЛиц";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
		
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "СостояниеКомплекта";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "СостояниеКомплекта";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
			
	Возврат КоллекцияОписанийЭлементов;
КонецФункции	

&НаСервере
Функция СоответствиеДанныхДокументовДаннымФормы()
	
	ОписаниеСоответствияДанныхОбъектовДаннымФормы = ЗарплатаКадрыОтображениеОшибок.ОписаниеСвязиДанных();
	
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиРеквизитов(
		ОписаниеСоответствияДанныхОбъектовДаннымФормы,  
		"*", 
		"Объект.СсылкаНаРедактируемыйДокумент");		
	
	ЗаполнитьСоответствиеДанныхОбъектаРСВ1ДаннымФормы(ОписаниеСоответствияДанныхОбъектовДаннымФормы);
	
	ЗаполнитьСоответствиеДанныхОбъектаАДВ62ДаннымФормы(ОписаниеСоответствияДанныхОбъектовДаннымФормы);
				
	Возврат ОписаниеСоответствияДанныхОбъектовДаннымФормы;	
КонецФункции	

&НаСервере
Функция СоответствиеДанныхКомплектаДаннымФормы()
	
	ОписаниеСоответствияДанныхОбъектовДаннымФормы = ЗарплатаКадрыОтображениеОшибок.ОписаниеСвязиДанных();
	
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиРеквизитов(
		ОписаниеСоответствияДанныхОбъектовДаннымФормы, 
		"*",
		"СостояниеКомплекта");
			
	Возврат ОписаниеСоответствияДанныхОбъектовДаннымФормы;	
КонецФункции

&НаСервере
Процедура ЗаполнитьСоответствиеДанныхОбъектаРСВ1ДаннымФормы(СоответствиеДанныхОбъектаДаннымФормы)
				
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиРеквизитов(
		СоответствиеДанныхОбъектаДаннымФормы,  
		"РСВ_1УменьшенныйОбъектОбложения", 
		"Объект.РСВ_1УменьшенныйОбъектОбложения");
		
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиРеквизитов(
		СоответствиеДанныхОбъектаДаннымФормы,  
		"РСВ_1ОблагаемаяБаза", 
		"Объект.РСВ_1ОблагаемаяБаза");
		
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиРеквизитов(
		СоответствиеДанныхОбъектаДаннымФормы,  
		"РСВ_1УменьшенныйОбъектОбложенияПоЛьготнымТарифам", 
		"Объект.РСВ_1УменьшенныйОбъектОбложенияПоЛьготнымТарифам");
		
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиРеквизитов(
		СоответствиеДанныхОбъектаДаннымФормы,  
		"РСВ_1ОблагаемаяБазаПоЛьготнымТарифам", 
		"Объект.РСВ_1ОблагаемаяБазаПоЛьготнымТарифам");	
		
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиРеквизитов(
		СоответствиеДанныхОбъектаДаннымФормы,  
		"РСВ_1ОбъектОбложения", 
		"Объект.РСВ_1ОбъектОбложения");	
		
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиРеквизитов(
		СоответствиеДанныхОбъектаДаннымФормы,  
		"РСВ_1НачисленоСтраховая", 
		"Объект.РСВ_1НачисленоСтраховая");
		
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиРеквизитов(
		СоответствиеДанныхОбъектаДаннымФормы,  
		"РСВ_1НачисленоНакопительная", 
		"Объект.РСВ_1НачисленоНакопительная");
		
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиРеквизитов(
		СоответствиеДанныхОбъектаДаннымФормы,  
		"РСВ_1УплаченоСтраховая", 
		"Объект.РСВ_1УплаченоСтраховая");	
		
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиРеквизитов(
		СоответствиеДанныхОбъектаДаннымФормы,  
		"РСВ_1УплаченоНакопительная", 
		"Объект.РСВ_1УплаченоНакопительная");
		
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиРеквизитов(
		СоответствиеДанныхОбъектаДаннымФормы,  
		"РСВ_1ОбъектОбложенияЗа1Месяц", 
		"Объект.РСВ_1ОбъектОбложенияЗа1Месяц");
		
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиРеквизитов(
		СоответствиеДанныхОбъектаДаннымФормы,  
		"РСВ_1ОблагаемаяБазаЗа1Месяц", 
		"Объект.РСВ_1ОблагаемаяБазаЗа1Месяц");
		
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиРеквизитов(
		СоответствиеДанныхОбъектаДаннымФормы,  
		"РСВ_1БазаСверхПредельнойЗа1Месяц", 
		"Объект.РСВ_1БазаСверхПредельнойЗа1Месяц");
		
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиРеквизитов(
		СоответствиеДанныхОбъектаДаннымФормы,  
		"РСВ_1ОбъектОбложенияЗа2Месяц", 
		"Объект.РСВ_1ОбъектОбложенияЗа2Месяц");
		
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиРеквизитов(
		СоответствиеДанныхОбъектаДаннымФормы,  
		"РСВ_1ОблагаемаяБазаЗа2Месяц", 
		"Объект.РСВ_1ОблагаемаяБазаЗа2Месяц");
		
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиРеквизитов(
		СоответствиеДанныхОбъектаДаннымФормы,  
		"РСВ_1БазаСверхПредельнойЗа2Месяц", 
		"Объект.РСВ_1БазаСверхПредельнойЗа2Месяц");
	
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиРеквизитов(
		СоответствиеДанныхОбъектаДаннымФормы,  
		"РСВ_1ОбъектОбложенияЗа3Месяц", 
		"Объект.РСВ_1ОбъектОбложенияЗа3Месяц");
		
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиРеквизитов(
		СоответствиеДанныхОбъектаДаннымФормы,  
		"РСВ_1ОблагаемаяБазаЗа3Месяц", 
		"Объект.РСВ_1ОблагаемаяБазаЗа3Месяц");
		
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиРеквизитов(
		СоответствиеДанныхОбъектаДаннымФормы,  
		"РСВ_1БазаСверхПредельнойЗа3Месяц", 
		"Объект.РСВ_1БазаСверхПредельнойЗа3Месяц");
		
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиРеквизитов(
		СоответствиеДанныхОбъектаДаннымФормы,  
		"РСВ_1КоличествоЗастрахованныхЛиц", 
		"Объект.РСВ_1КоличествоЗастрахованныхЛиц");
		
	КлючСвязиТаблиц = ЗарплатаКадрыОтображениеОшибок.КлючСвязиДанныхСтрокТаблиц();
	
	ЗарплатаКадрыОтображениеОшибок.ДобавитьЭлементКлючаСвязиПоПолямСтрокТаблиц(КлючСвязиТаблиц, "КодТарифа", "КодТарифа");
	
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиДанныхСтрокТаблиц(
		СоответствиеДанныхОбъектаДаннымФормы,
		"РСВ_1ИтогиПоТарифам",
		"*",
		"Объект.РСВ_1ИтогиПоТарифам",
		"",
		КлючСвязиТаблиц);
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоответствиеДанныхОбъектаАДВ62ДаннымФормы(ОписаниеСоответствияДанныхОбъектовДаннымФормы)			
	
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиРеквизитов(
		ОписаниеСоответствияДанныхОбъектовДаннымФормы,  
		"ОписьЗаработок", 
		"Объект.ОписьЗаработок");
		
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиРеквизитов(
		ОписаниеСоответствияДанныхОбъектовДаннымФормы, 
		"ОписьОблагаетсяВзносами", 
		"Объект.ОписьОблагаетсяВзносами");
		
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиРеквизитов(
		ОписаниеСоответствияДанныхОбъектовДаннымФормы, 
		"ОписьЗаработокПоЛьготнымКатегориям", 
		"Объект.ОписьЗаработокПоЛьготнымКатегориям");
		
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиРеквизитов(
		ОписаниеСоответствияДанныхОбъектовДаннымФормы,
		"ОписьОблагаетсяВзносамиПоЛьготнымКатегориям", 
		"Объект.ОписьОблагаетсяВзносамиПоЛьготнымКатегориям");	
		
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиРеквизитов(
		ОписаниеСоответствияДанныхОбъектовДаннымФормы, 
		"ОписьНачисленоСтраховая", 
		"Объект.ОписьНачисленоСтраховая");	
		
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиРеквизитов(
		ОписаниеСоответствияДанныхОбъектовДаннымФормы, 
		"ОписьНачисленоНакопительная", 
		"Объект.ОписьНачисленоНакопительная");	
		
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиРеквизитов(
		ОписаниеСоответствияДанныхОбъектовДаннымФормы,
		"ОписьУплаченоСтраховая", 
		"Объект.ОписьУплаченоСтраховая");	
		
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиРеквизитов(
		ОписаниеСоответствияДанныхОбъектовДаннымФормы, 
		"ОписьУплаченоНакопительная", 
		"Объект.ОписьУплаченоНакопительная");	
		
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиДанныхСтрокТаблиц(
		ОписаниеСоответствияДанныхОбъектовДаннымФормы,
		"ИтогиПоКатегориям",
		"*",
		"Объект.ИтогиПоКатегориям",
		"");	
	
КонецПроцедуры

&НаСервере
Функция ОписаниеПодчиненностиДанных() 
	ОписаниеПодчиненностиДанных = ЗарплатаКадрыОтображениеОшибок.ОписаниеПодчиненностиДанныхФормы();
						
	КлючСвязиТаблицПоСотруднику = ЗарплатаКадрыОтображениеОшибок.КлючСвязиДанныхСтрокТаблиц();
	ЗарплатаКадрыОтображениеОшибок.ДобавитьЭлементКлючаСвязиПоПолямСтрокТаблиц(КлючСвязиТаблицПоСотруднику, "Сотрудник", "Сотрудник");
	
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеПодчиненностиДанныхСтрокиРеквизиту(
		ОписаниеПодчиненностиДанных,
		"Объект",
		"Объект.Сотрудники",
		КлючСвязиТаблицПоСотруднику);
		
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеПодчиненностиРеквизитов(
		ОписаниеПодчиненностиДанных,
		"Объект",
		"Объект.СсылкаНаРедактируемыйДокумент");	
				
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеПодчиненностиДанныхСтрокТаблиц(
		ОписаниеПодчиненностиДанных,
		"Объект.Сотрудники",
		"Объект.ЗаписиОСтаже",
		КлючСвязиТаблицПоСотруднику);
		
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеПодчиненностиДанныхСтрокТаблиц(
		ОписаниеПодчиненностиДанных,
		"Объект.Сотрудники",
		"Объект.СведенияОЗаработке",
		КлючСвязиТаблицПоСотруднику);
		
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеПодчиненностиДанныхСтрокТаблиц(
		ОписаниеПодчиненностиДанных,
		"Объект.Сотрудники",
		"Объект.СведенияОЗаработкеНаВредныхИТяжелыхРаботах",
		КлючСвязиТаблицПоСотруднику);
		
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеПодчиненностиДанныхСтрокТаблиц(
		ОписаниеПодчиненностиДанных,
		"Объект.Сотрудники",
		"Объект.КорректирующиеСведения",
		КлючСвязиТаблицПоСотруднику);	
		
	Возврат ОписаниеПодчиненностиДанных;	
КонецФункции	

&НаКлиенте
Процедура Подключаемый_ЭлементИндикацииОшибкиНажатие(Элемент, СтандартнаяОбработка)
	Если Элемент.Имя = "ЗаголовокТекущегоДокументаЕстьОшибки"
		И ТипЗнч(Объект.СсылкаНаРедактируемыйДокумент) = Тип("ДокументСсылка.РегламентированныйОтчет")
		И ТипЗнч(ОшибкиРСВ) = ТИп("ФиксированныйМассив") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		РегламентированнаяОтчетностьКлиент.ОткрытьФормуНавигацииПоОшибкамВыгрузки(ОшибкиРСВ);
		
		Возврат;
	КонецЕсли;	
	
	ЗарплатаКадрыОтображениеОшибокКлиент.ЭлементИндикацииОшибкиНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);	
КонецПроцедуры	

&НаКлиенте
Процедура Подключаемый_ЭлементИндикацииПриАктивизацииЯчейки(Элемент)
	ЗарплатаКадрыОтображениеОшибокКлиент.ЭлементИндикацииПриАктивизацииЯчейки(ЭтотОбъект, Элемент);	
КонецПроцедуры	

&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии.
	ИдентификаторыСобытийПриОткрытии = Новый Массив;
	ИдентификаторыСобытийПриОткрытии.Добавить("ПриОткрытии");
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии.

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

СтарыеЗначенияКонтролируемыхПолей = Новый Структура;

#КонецОбласти

#КонецОбласти
