#Область ОписаниеПеременных

&НаКлиенте
Перем СтарыеЗначенияКонтролируемыхПолейВзносы;

&НаКлиенте
Перем СтарыеЗначенияКонтролируемыхПолейСтаж;

&НаКлиенте
Перем СтарыеЗначенияКонтролируемыхПолейЗаработок;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗарплатаКадрыОтображениеОшибок.ХраненияОшибокВДанныхФормыДополнитьФорму(ЭтотОбъект);
	ЗарплатаКадрыОтображениеОшибок.ИндикацияОшибокДополнитьФорму(ЭтотОбъект, ОписаниеЭлементовСИндикациейОшибок());
		
	ПерсонифицированныйУчетФормы.ДокументыСЗВДобавитьКонтрольИсправлений(КонтролируемыеПоля);
	ПерсонифицированныйУчетФормы.УстановитьКраткоеОтображениеКатегорииВТаблицах(ЭтотОбъект, "СведенияОЗаработке.КатегорияЗастрахованныхЛиц", "СведенияОЗаработкеКатегорияЗастрахованныхЛиц");
	
	РедактируемыйДокументСсылка = Параметры.РедактируемыйДокументСсылка;
	ТипСведенийСЗВ = Параметры.ТипСведенийСЗВ;
	Организация = Параметры.Организация;
	Период = Параметры.Период;
	Сотрудник = Параметры.Сотрудник;
	ОтменаИсправленийДоступна = Параметры.ОтменаИсправленийДоступна;
	
	ИменаДополняемыхТаблиц = Новый Массив;
	ИменаДополняемыхТаблиц.Добавить("СведенияОЗаработке");
	ИменаДополняемыхТаблиц.Добавить("ЗаписиОСтаже");
	ПерсонифицированныйУчетФормы.ДобавитьЗаголовкиКПолямТаблицФормы(ЭтаФорма, ИменаДополняемыхТаблиц, ОписаниеКолонокЗаголовковТаблицФормы());
	
	ДанныеИзВременногоХранилищаВДанныеФормы(Параметры.АдресВоВременномХранилище);
	
	УстановитьЗаголовокФормы();
	
	УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)	
	СтруктураДанныхПоСотруднику = СтруктураДанныхПоСотруднику(ЭтотОбъект);	
	
	ПерсонифицированныйУчетКлиентСервер.ДокументыСЗВУстановитьЗначенияКонтролируемыхПолей(
		СтруктураДанныхПоСотруднику, 
		КонтролируемыеПоля, 
		СтарыеЗначенияКонтролируемыхПолейВзносы);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОтмененаИсправления" Тогда
		ДанныеИзВременногоХранилищаВДанныеФормы(Параметр.АдресХранилища);
		Активизировать();
	ИначеЕсли ИмяСобытия = "ИзменениеДанныхФизическогоЛица" И Не ТолькоПросмотр Тогда 
		ЗаполнитьИзменившиесяДанныеФизическогоЛица(Параметр);	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьИЗакрыть", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ФамилияПриИзменении(Элемент)
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "Фамилия");
КонецПроцедуры

&НаКлиенте
Процедура ИмяПриИзменении(Элемент)
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "Имя");
КонецПроцедуры

&НаКлиенте
Процедура СтраховойНомерПФРПриИзменении(Элемент)
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "СтраховойНомерПФР");
КонецПроцедуры

&НаКлиенте
Процедура ОтчествоПриИзменении(Элемент)
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "Отчество");
КонецПроцедуры

&НаКлиенте
Процедура НачисленоСтраховаяПриИзменении(Элемент)
	ВзносыПриИзменении();	
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "НачисленоСтраховая");	
КонецПроцедуры

&НаКлиенте
Процедура ДоНачисленоСтраховаяПриИзменении(Элемент)
	ВзносыПриИзменении();
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаписиОСтаже

&НаКлиенте
Процедура ЗаписиОСтажеПриАктивизацииСтроки(Элемент)
	СтруктураДанныхПоСотруднику = СтруктураДанныхПоСотруднику(ЭтотОбъект);
	
	ПерсонифицированныйУчетКлиент.ДокументыСЗВЗаписиОСтажеПриАктивацииСтроки(
		Элементы.ЗаписиОСтаже.ТекущиеДанные, 
		КонтролируемыеПоля, 
		СтарыеЗначенияКонтролируемыхПолейСтаж, 
		СтруктураДанныхПоСотруднику);	
			
КонецПроцедуры

&НаКлиенте
Процедура ЗаписиОСтажеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ПерсонифицированныйУчетКлиентСервер.УстановитьЗаголовкиВСтрокеТаблицы(
			ЭтотОбъект, 
			Элементы.ЗаписиОСтаже.ТекущиеДанные,
			ОписаниеКолонокЗаголовковТаблицыЗаписиОСтаже(),
			Истина);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписиОСтажеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанныхПоСотруднику = СтруктураДанныхПоСотруднику(ЭтотОбъект);
	
	ПерсонифицированныйУчетКлиент.ДокументыСЗВЗаписиОСтажеПриОкончанииРедактирования(
		Элементы.ЗаписиОСтаже.ТекущиеДанные, 
		НоваяСтрока, 
		КонтролируемыеПоля, 
		СтарыеЗначенияКонтролируемыхПолейСтаж, 
		СтруктураДанныхПоСотруднику);
			
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураДанныхПоСотруднику);	
	
	Если НоваяСтрока Тогда
		ПерсонифицированныйУчетКлиентСервер.ВыполнитьНумерациюЗаписейОСтаже(ЗаписиОСтаже);
	КонецЕсли;
	
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриОкончанииРедактированияСтрокиТаблицыСИндикациейОшибок(
		ЭтотОбъект,
		Элемент,
		НоваяСтрока,
		"ЗаписиОСтаже");
КонецПроцедуры
	
&НаКлиенте
Процедура ЗаписиОСтажеПередУдалением(Элемент, Отказ)
	ЗарплатаКадрыОтображениеОшибокКлиент.ПередУдалениемСтрокиТаблицыСИндикациейОшибок(ЭтотОбъект, Элемент, "ЗаписиОСтаже");
КонецПроцедуры	

&НаКлиенте
Процедура ЗаписиОСтажеПослеУдаления(Элемент)
	ФиксСтаж = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСведенияОЗаработке

&НаКлиенте
Процедура СведенияОЗаработкеПриАктивизацииСтроки(Элемент)
	СтруктураДанныхПоСотруднику = СтруктураДанныхПоСотруднику(ЭтотОбъект);
			
	ДанныеТекущейСтроки = Элементы.СведенияОЗаработке.ТекущиеДанные;	
		
	Если ДанныеТекущейСтроки <> Неопределено И КонтролируемыеПоля <> Неопределено Тогда
		ПерсонифицированныйУчетКлиент.ДокументыСЗВКонтрольИсправленийПриАктивацииСтроки(
			ДанныеТекущейСтроки, 
			КонтролируемыеПоля, 
			СтарыеЗначенияКонтролируемыхПолейЗаработок, 
			СтруктураДанныхПоСотруднику);													 
	КонецЕсли;			
КонецПроцедуры

&НаКлиенте
Процедура СведенияОЗаработкеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ПерсонифицированныйУчетКлиентСервер.УстановитьЗаголовкиВСтрокеТаблицы(ЭтаФорма, Элемент.ТекущиеДанные, ОписаниеКолонокЗаголовковТаблицы("СведенияОЗаработке"));
		
		Если ТипСведенийСЗВ = ПредопределенноеЗначение("Перечисление.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ") Тогда
			Элемент.ТекущиеДанные.Месяц = 0;	
			Элемент.ТекущиеДанные.ПериодПредставление = ПредставлениеПериодаСведенийОЗаработке(0, Период)
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СведенияОЗаработкеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанныхПоСотруднику = СтруктураДанныхПоСотруднику(ЭтотОбъект);
		
	ДанныеТекущейСтроки = Элементы.СведенияОЗаработке.ТекущиеДанные;	
	
	ПерсонифицированныйУчетКлиент.ДокументыСЗВКонтрольИсправленийПриОкончанииРедактированияСтроки(
		ДанныеТекущейСтроки, 
		КонтролируемыеПоля, 
		СтарыеЗначенияКонтролируемыхПолейЗаработок,
		СтруктураДанныхПоСотруднику);	
		
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураДанныхПоСотруднику);
	
	СведенияОЗаработкеСпозиционироватьСтроку(СведенияОЗаработке, ДанныеТекущейСтроки, "КатегорияЗастрахованныхЛиц");
	
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриОкончанииРедактированияСтрокиТаблицыСИндикациейОшибок(
		ЭтотОбъект,
		Элемент,
		НоваяСтрока,
		"СведенияОЗаработке");
КонецПроцедуры
	
&НаКлиенте
Процедура СведенияОЗаработкеПередУдалением(Элемент, Отказ)
	ЗарплатаКадрыОтображениеОшибокКлиент.ПередУдалениемСтрокиТаблицыСИндикациейОшибок(ЭтотОбъект, Элемент, "СведенияОЗаработке");
КонецПроцедуры	

&НаКлиенте
Процедура СведенияОЗаработкеМесяцНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = СведенияОЗаработкеПериодСписокВыбора();
КонецПроцедуры

&НаКлиенте
Процедура СведенияОЗаработкеМесяцОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		ДанныеТекущейСтроки = Элементы.СведенияОЗаработке.ТекущиеДанные;	
		ДанныеТекущейСтроки.Месяц = ВыбранноеЗначение;
		ДанныеТекущейСтроки.ПериодПредставление = ПредставлениеПериодаСведенийОЗаработке(ДанныеТекущейСтроки.Месяц, Период);
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСведенияОЗаработкеНаВредныхИТяжелыхРаботах

&НаКлиенте
Процедура СведенияОЗаработкеНаВредныхИТяжелыхРаботахПриАктивизацииСтроки(Элемент)
	СтруктураДанныхПоСотруднику = СтруктураДанныхПоСотруднику(ЭтотОбъект);
			
	ДанныеТекущейСтроки = Элементы.СведенияОЗаработкеНаВредныхИТяжелыхРаботах.ТекущиеДанные;	
		
	Если ДанныеТекущейСтроки <> Неопределено И КонтролируемыеПоля <> Неопределено Тогда
		ПерсонифицированныйУчетКлиент.ДокументыСЗВКонтрольИсправленийПриАктивацииСтроки(
			ДанныеТекущейСтроки, 
			КонтролируемыеПоля, 
			СтарыеЗначенияКонтролируемыхПолейЗаработок, 
			СтруктураДанныхПоСотруднику);													 
	КонецЕсли;		
				
КонецПроцедуры

&НаКлиенте
Процедура СведенияОЗаработкеНаВредныхИТяжелыхРаботахПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	СтруктураДанныхПоСотруднику = СтруктураДанныхПоСотруднику(ЭтотОбъект);
	
	ДанныеТекущейСтроки = Элементы.СведенияОЗаработкеНаВредныхИТяжелыхРаботах.ТекущиеДанные;	
		
	ПерсонифицированныйУчетКлиент.ДокументыСЗВКонтрольИсправленийПриОкончанииРедактированияСтроки(
		ДанныеТекущейСтроки, 
		КонтролируемыеПоля, 
		СтарыеЗначенияКонтролируемыхПолейЗаработок,
		СтруктураДанныхПоСотруднику);	
		
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураДанныхПоСотруднику);

	СведенияОЗаработкеСпозиционироватьСтроку(СведенияОЗаработкеНаВредныхИТяжелыхРаботах, ДанныеТекущейСтроки, "КлассУсловийТруда");
КонецПроцедуры

&НаКлиенте
Процедура СведенияОЗаработкеНаВредныхИТяжелыхРаботахПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриОкончанииРедактированияСтрокиТаблицыСИндикациейОшибок(
		ЭтотОбъект,
		Элемент,
		НоваяСтрока,
		"СведенияОЗаработкеНаВредныхИТяжелыхРаботах");
		
КонецПроцедуры
	
&НаКлиенте
Процедура СведенияОЗаработкеНаВредныхИТяжелыхРаботахПередУдалением(Элемент, Отказ)
	ЗарплатаКадрыОтображениеОшибокКлиент.ПередУдалениемСтрокиТаблицыСИндикациейОшибок(ЭтотОбъект, Элемент, "СведенияОЗаработкеНаВредныхИТяжелыхРаботах");
КонецПроцедуры
	
&НаКлиенте
Процедура СведенияОЗаработкеНаВредныхИТяжелыхРаботахМесяцНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = СведенияОЗаработкеПериодСписокВыбора();
КонецПроцедуры

&НаКлиенте
Процедура СведенияОЗаработкеНаВредныхИТяжелыхРаботахМесяцОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		ДанныеТекущейСтроки = Элементы.СведенияОЗаработкеНаВредныхИТяжелыхРаботах.ТекущиеДанные;
		ДанныеТекущейСтроки.Месяц = ВыбранноеЗначение;
		ДанныеТекущейСтроки.ПериодПредставление = ПредставлениеПериодаСведенийОЗаработке(ДанныеТекущейСтроки.Месяц, Период);
	КонецЕсли;	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыДанныеРаздела66

&НаКлиенте
Процедура ДанныеРаздела66КорректируемыйПериодСтрокойНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ДанныеТекущейСтроки = Элементы.ДанныеРаздела66.ТекущиеДанные;
	Оповещение = Новый ОписаниеОповещения("КорректируемыйПериодСтрокойЗавершениеВыбора", ЭтотОбъект);
	ПерсонифицированныйУчетКлиент.ОтчетныйПериодНачалоВыбора(ЭтаФорма, ДанныеТекущейСтроки, "КорректируемыйПериод", "КорректируемыйПериодСтрокой", '20100101',, Оповещение);	
КонецПроцедуры

&НаКлиенте 
Процедура КорректируемыйПериодСтрокойЗавершениеВыбора(Отказ, ДополнительныеПараметры) Экспорт 
	Элементы.ДанныеРаздела66.ТекущийЭлемент = Элементы.ДанныеРаздела66ДоначисленоНаОПС;	
	ДанныеТекущейСтроки = Элементы.ДанныеРаздела66.ТекущиеДанные;
	Если ДанныеТекущейСтроки.КорректируемыйПериод >= '20140101' Тогда
		ДанныеТекущейСтроки.ДоначисленоСтраховая = 0;
		ДанныеТекущейСтроки.ДоначисленоНакопительная = 0;
	Иначе
		ДанныеТекущейСтроки.ДоначисленоНаОПС = 0;
	КонецЕсли;	
	
КонецПроцедуры	

&НаКлиенте
Процедура ДанныеРаздела66ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриОкончанииРедактированияСтрокиТаблицыСИндикациейОшибок(
		ЭтотОбъект,
		Элемент,
		НоваяСтрока,
		"КорректирующиеСведения");
		
КонецПроцедуры

&НаКлиенте
Процедура ДанныеРаздела66ПередУдалением(Элемент, Отказ)
	ЗарплатаКадрыОтображениеОшибокКлиент.ПередУдалениемСтрокиТаблицыСИндикациейОшибок(ЭтотОбъект, Элемент, "КорректирующиеСведения");
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Ок(Команда)
	ВыбратьИЗакрыть();	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИсправленияПоВзносам(Команда)
	ФиксНачисленныеВзносы = Ложь;
	ФиксУплаченныеВзносы = Ложь;
	ФиксЗаработок = Ложь;
	Модифицированность = Истина;
	
	АдресВоВременномХранилище = ДанныеСотрудникаВоВременноеХранилище();
	ВладелецФормы.ОтменитьИсправленияПоВзносам(АдресВоВременномХранилище, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИсправленияПоСтажу(Команда)
	ФиксСтаж = Ложь;
	ЗаписиОСтаже.Очистить();
	
	Модифицированность = Истина;
	АдресВоВременномХранилище = ДанныеСотрудникаВоВременноеХранилище();
	ВладелецФормы.ОтменитьИсправленияПоСтажу(АдресВоВременномХранилище, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьДанныеФизическогоЛица(Команда)
	ПараметрыФормы = Новый Структура("Ключ, АктивнаяСтраница, РедактируемоеПоле", Сотрудник, "ЛичныеДанные");
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаОбъекта", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура КарточкаУчетаСтраховыхВзносов(Команда)
	ПериодОтчета = Новый СтандартныйПериод;
	
	ПериодОтчета.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
	ПериодОтчета.ДатаНачала = НачалоГода(Период);
	ПериодОтчета.ДатаОкончания = КонецГода(Период);
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("КлючВарианта", "КарточкаУчетаСтраховыхВзносовВЦелом");

	ФизическиеЛицаДляОтчета = Новый Массив;
	ФизическиеЛицаДляОтчета.Добавить(Сотрудник);
	
	ОтборОтчета = Новый Структура;
	ОтборОтчета.Вставить("ФизическоеЛицо", ФизическиеЛицаДляОтчета);
	ОтборОтчета.Вставить("Период", ПериодОтчета);
    ОтборОтчета.Вставить("Организация", Организация);
	ПараметрыОтчета.Вставить("Отбор", ОтборОтчета);
	ПараметрыОтчета.Вставить("СформироватьПриОткрытии", Истина);
		
	ОткрытьФорму("Отчет.КарточкаУчетаПоСтраховымВзносам.Форма", ПараметрыОтчета);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция  СоответствиеДанныхОбъектаДаннымФормы()
	ОписаниеСвязиДанных = ЗарплатаКадрыОтображениеОшибок.ОписаниеСвязиДанных();
	
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиДанныхСтрокТаблиц(
		ОписаниеСвязиДанных,
		"ЗаписиОСтаже",
		"*",
		"ЗаписиОСтаже",
		"");
		
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиДанныхСтрокТаблиц(
		ОписаниеСвязиДанных,
		"СведенияОЗаработке",
		"*",
		"СведенияОЗаработке",
		"");
		
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиДанныхСтрокТаблиц(
		ОписаниеСвязиДанных,
		"СведенияОЗаработкеНаВредныхИТяжелыхРаботах",
		"*",
		"СведенияОЗаработкеНаВредныхИТяжелыхРаботах",
		"");
		
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиДанныхСтрокТаблиц(
		ОписаниеСвязиДанных,
		"КорректирующиеСведения",
		"*",
		"КорректирующиеСведения",
		"");
			
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиРеквизитов(ОписаниеСвязиДанных, "", "Сотрудник");	
	
	Возврат ОписаниеСвязиДанных;
КонецФункции	

&НаКлиенте
Процедура ВыбратьИЗакрыть(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	АдресВоВременномХранилище = ДанныеСотрудникаВоВременноеХранилище();
	
	ПараметрыОповещения = Новый Структура("РедактируемыйДокументСсылка, Сотрудник, АдресВоВременномХранилище");
	ПараметрыОповещения.РедактируемыйДокументСсылка = РедактируемыйДокументСсылка;
	ПараметрыОповещения.Сотрудник = Сотрудник;
	ПараметрыОповещения.АдресВоВременномХранилище = АдресВоВременномХранилище;	
	
	Оповестить("РедактированиеДанныхСЗВ6ПоСотруднику", ПараметрыОповещения);
	
	Модифицированность = Ложь;

	Закрыть();
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовФормы()
	ДоступностьИсправленийВзносов = ФиксНачисленныеВзносы Или ФиксЗаработок;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтменитьИсправленияПоВзносам", "Доступность", ДоступностьИсправленийВзносов);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаписиОСтажеОтменитьИсправленияПоСтажу", "Доступность", ФиксСтаж);
	
	Если ТипЗнч(РедактируемыйДокументСсылка) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_3") Тогда
		Элементы.СведенияОВзносахГруппа.Видимость = Ложь;
		Элементы.ЗаписиОСтажеГруппа.Видимость = Ложь;
		Элементы.СведенияОЗаработкеГруппа.Видимость = Истина;
		Элементы.СведенияОЗаработкеОблагаетсяВзносамиГруппа.Видимость = Ложь;
		Элементы.СведенияОЗаработкеОблагаетсяВзносами.Видимость = Истина;
		
		Элементы.СведенияОЗаработке.РастягиватьПоВертикали = Истина;
	Иначе	
		Элементы.СведенияОВзносахГруппа.Видимость = Истина;
		Элементы.ЗаписиОСтажеГруппа.Видимость = Истина;
				
		Если ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ Тогда			
			Элементы.ДоначисленоСтраховая.Видимость     = Ложь;
					
		ИначеЕсли  ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ Тогда
			Элементы.ЗаписиОСтаже.Доступность = Ложь;
		КонецЕсли;
		
	КонецЕсли;	
	
	Элементы.СведенияОбУвольненииГруппа.Видимость = (Период >= '20150101');
	
	ПерсонифицированныйУчетФормы.УстановитьВидимостьКолонокЗаголовков(ЭтаФорма, "СведенияОЗаработке", ОписаниеКолонокЗаголовковТаблицы("СведенияОЗаработке"));
	
	Если ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ Тогда
		Элементы.Декорация2.Видимость = Ложь;	
	Иначе	
		Если КорректирующиеСведения.Количество() = 0 Тогда
			Элементы.Раздел66Страница.Видимость = Ложь;
		Иначе 	
			Элементы.ДанныеРаздела66.ТолькоПросмотр = Истина;
			Элементы.ДанныеРаздела66.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
		КонецЕсли;	
	КонецЕсли;	
	
	Если Не ОтменаИсправленийДоступна Тогда
		Элементы.ОтменитьИсправленияПоВзносам.Видимость = Ложь;	
		Элементы.ЗаписиОСтажеОтменитьИсправленияПоСтажу.Видимость = Ложь;	
	КонецЕсли;	
	
	Если ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ Тогда
		Элементы.Раздел66Страница.Видимость = Ложь;
		Элементы.Раздел67Страница.Видимость = Ложь;
		Элементы.Раздел68Страница.Видимость = Ложь;
		
		Элементы.СведенияОЗаработкеМесяц.Доступность = Ложь;
		Элементы.СведенияОЗаработкеЗаработок.Доступность = Ложь;
		Элементы.СведенияОЗаработкеОблагаетсяВзносамиДоПредельнойВеличины.Доступность = Ложь;
		Элементы.СведенияОЗаработкеПоДоговорамГПХДоПредельнойВеличины.Доступность = Ложь;
		Элементы.СведенияОЗаработкеОблагаетсяВзносамиСвышеПредельнойВеличины.Доступность = Ложь;
	КонецЕсли;	
КонецПроцедуры	

&НаКлиенте
Процедура ВзносыПриИзменении()
	СтруктураДанныхПоСотруднику = СтруктураДанныхПоСотруднику(ЭтотОбъект);
	
	ПерсонифицированныйУчетКлиент.ДокументыСЗВКонтрольИсправленийПриОкончанииРедактированияСтроки(
	 	СтруктураДанныхПоСотруднику, 
		КонтролируемыеПоля, 
		СтарыеЗначенияКонтролируемыхПолейВзносы, 
		СтруктураДанныхПоСотруднику);	
		
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураДанныхПоСотруднику);	
КонецПроцедуры	

&НаСервере
Процедура УстановитьЗаголовокФормы()
	Заголовок = НСтр("ru = 'Раздел 6 формы РСВ-1'");
	
	ИнфонадписьЗаголовокКарточки = НСтр("ru = 'Данные застрахованного лица'");
КонецПроцедуры	

&НаСервере
Процедура ДанныеИзВременногоХранилищаВДанныеФормы(АдресВоВременномХранилище)
	Модифицированность = Ложь;
	
	ДанныеДокументаПоСотруднику = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Если ДанныеДокументаПоСотруднику = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось получить редактируемые данные.'");	
	КонецЕсли;
	
	Сотрудник = ДанныеДокументаПоСотруднику.Сотрудник;
	Фамилия = ДанныеДокументаПоСотруднику.Фамилия;
	Имя = ДанныеДокументаПоСотруднику.Имя;
	Отчество = ДанныеДокументаПоСотруднику.Отчество;
	СотрудникУволен = ДанныеДокументаПоСотруднику.СотрудникУволен;
	СтраховойНомерПФР = ДанныеДокументаПоСотруднику.СтраховойНомерПФР;
	НачисленоСтраховая = ДанныеДокументаПоСотруднику.НачисленоСтраховая;
	НачисленоНакопительная = ДанныеДокументаПоСотруднику.НачисленоНакопительная;
	УплаченоСтраховая = ДанныеДокументаПоСотруднику.УплаченоСтраховая;
	УплаченоНакопительная = ДанныеДокументаПоСотруднику.УплаченоНакопительная;
	ДоНачисленоСтраховая = ДанныеДокументаПоСотруднику.ДоНачисленоСтраховая;
	ДоНачисленоНакопительная = ДанныеДокументаПоСотруднику.ДоНачисленоНакопительная;
	ДоУплаченоСтраховая = ДанныеДокументаПоСотруднику.ДоУплаченоСтраховая;
	ДоУплаченоНакопительная = ДанныеДокументаПоСотруднику.ДоУплаченоНакопительная;
	ФиксНачисленныеВзносы = ДанныеДокументаПоСотруднику.ФиксНачисленныеВзносы;
	ФиксСтаж = ДанныеДокументаПоСотруднику.ФиксСтаж;
	ФиксЗаработок = ДанныеДокументаПоСотруднику.ФиксЗаработок;
	
	ЗаписиОСтаже.Очистить();
	
	Для Каждого СтрокаТаблицы Из ДанныеДокументаПоСотруднику.ЗаписиОСтаже Цикл
		СтрокаТаблицыФормы = ЗаписиОСтаже.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыФормы, СтрокаТаблицы);
	КонецЦикла;	
	
	КорректирующиеСведения.Очистить();
	
	Для Каждого СтрокаТаблицы Из ДанныеДокументаПоСотруднику.КорректирующиеСведения Цикл
		СтрокаТаблицыФормы = КорректирующиеСведения.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыФормы, СтрокаТаблицы);
		
		СтрокаТаблицыФормы.КорректируемыйПериодСтрокой = ПерсонифицированныйУчетКлиентСервер.ПредставлениеОтчетногоПериода(СтрокаТаблицыФормы.КорректируемыйПериод);
	КонецЦикла;	

	СведенияОЗаработке.Очистить();
	СведенияОЗаработкеНаВредныхИТяжелыхРаботах.Очистить();
	
	ЗаполнитьСведенияОЗаработкеВФорме(ДанныеДокументаПоСотруднику.СведенияОЗаработке, ДанныеДокументаПоСотруднику.СведенияОЗаработкеНаВредныхИТяжелыхРаботах);
	
	ПерсонифицированныйУчетКлиентСервер.УстановитьЗаголовкиВТаблице(ЭтаФорма, СведенияОЗаработке, ОписаниеКолонокЗаголовковТаблицы("СведенияОЗаработке"));
	ПерсонифицированныйУчетКлиентСервер.УстановитьЗаголовкиВТаблице(ЭтаФорма, ЗаписиОСтаже, ОписаниеКолонокЗаголовковТаблицы("ЗаписиОСтаже"));
	
	Ошибки = Неопределено;
	ДанныеДокументаПоСотруднику.Свойство("Ошибки", Ошибки);
	
	Если Ошибки <> Неопределено Тогда 
		ЗарплатаКадрыОтображениеОшибок.ПреобразоватьПутиКДаннымВСообщенияхПользователю(
			ЭтотОбъект,
			ЭтотОбъект,
			Ошибки,
			СоответствиеДанныхОбъектаДаннымФормы());
			
		ЗарплатаКадрыОтображениеОшибок.ПоместитьСообщенияОбОшибкахВДанныеФормы(ЭтотОбъект, Ошибки);	
			
		ЗарплатаКадрыОтображениеОшибок.УстановитьФлагиНаличияОшибокПоСообщениямОбОшибках(ЭтотОбъект, Ошибки, , Истина);	
	КонецЕсли;	
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеПериодаСведенийОЗаработке(НомерМесяца, ОтчетныйПериод)
	Если НомерМесяца = 0 Тогда
		Возврат НСтр("ru = 'Итого с начала года:'");
	Иначе	
		МесяцТекст = Формат(Дата(2010, НомерМесяца, 1), "ДФ=ММММ");
		МесяцПредставление = НРег(Лев(МесяцТекст, 1)) + Сред(МесяцТекст, 2);
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'в т.ч. %1'"), МесяцПредставление);
	КонецЕсли;	
КонецФункции	

&НаСервере
Процедура ЗаполнитьСведенияОЗаработкеВФорме(СведенияОЗаработкеСотрудника, СведенияОЗаработкеНаВредныхИТяжелыхРаботахСотрудника) 
	
	Для Каждого СтрокаЗаработок Из СведенияОЗаработкеСотрудника Цикл
		СтрокаТаблицы = СведенияОЗаработке.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаЗаработок);
			
		СтрокаТаблицы.ПериодПредставление = ПредставлениеПериодаСведенийОЗаработке(СтрокаТаблицы.Месяц, Период);	
		
		СведенияОЗаработкеСпозиционироватьСтроку(СведенияОЗаработке, СтрокаТаблицы, "КатегорияЗастрахованныхЛиц");
	КонецЦикла;	
	
	Для Каждого СтрокаЗаработок Из СведенияОЗаработкеНаВредныхИТяжелыхРаботахСотрудника Цикл
		СтрокаТаблицы = СведенияОЗаработкеНаВредныхИТяжелыхРаботах.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаЗаработок);
		
		СтрокаТаблицы.ПериодПредставление = ПредставлениеПериодаСведенийОЗаработке(СтрокаТаблицы.Месяц, Период);	
		
		СведенияОЗаработкеСпозиционироватьСтроку(СведенияОЗаработкеНаВредныхИТяжелыхРаботах, СтрокаТаблицы, "КлассУсловийТруда");
	КонецЦикла;	

КонецПроцедуры	

&НаСервере 
Функция ДанныеСотрудникаВоВременноеХранилище()	
	ДанныеСотрудника = Новый Структура;
	ДанныеСотрудника.Вставить("Сотрудник", Сотрудник);
	ДанныеСотрудника.Вставить("СтраховойНомерПФР", СтраховойНомерПФР);
	ДанныеСотрудника.Вставить("Фамилия", Фамилия);
	ДанныеСотрудника.Вставить("Имя", Имя);
	ДанныеСотрудника.Вставить("Отчество", Отчество);
	ДанныеСотрудника.Вставить("НачисленоСтраховая", НачисленоСтраховая);
	ДанныеСотрудника.Вставить("ДоначисленоСтраховая", ДоначисленоСтраховая);
	ДанныеСотрудника.Вставить("ФиксНачисленныеВзносы", ФиксНачисленныеВзносы);
	ДанныеСотрудника.Вставить("ФиксСтаж", ФиксСтаж);
	ДанныеСотрудника.Вставить("ФиксЗаработок", ФиксЗаработок);
	ДанныеСотрудника.Вставить("Модифицированность", Модифицированность);
	ДанныеСотрудника.Вставить("ИсходныйНомерСтроки", ИсходныйНомерСтроки);
	ДанныеСотрудника.Вставить("РедактируемыйДокументСсылка", РедактируемыйДокументСсылка);
	ДанныеСотрудника.Вставить("ИзменилисьДанныеФизическогоЛица", ИзменилисьДанныеФизическогоЛица);
	ДанныеСотрудника.Вставить("СотрудникУволен", СотрудникУволен);
	
	СведенияОЗаработкеСотрудника = Новый Массив;
	ДанныеСотрудника.Вставить("СведенияОЗаработке", СведенияОЗаработкеСотрудника);
	
	СведенияОЗаработкеНаВредныхИТяжелыхРаботахСотрудника = Новый Массив;
	ДанныеСотрудника.Вставить("СведенияОЗаработкеНаВредныхИТяжелыхРаботах", СведенияОЗаработкеНаВредныхИТяжелыхРаботахСотрудника);
	
	Для Каждого СтрокаСведенийОЗаработке Из СведенияОЗаработке Цикл
		СтруктураПолейСведенияОЗаработке = СтруктураПолейСведенияОЗаработке();
		ЗаполнитьЗначенияСвойств(СтруктураПолейСведенияОЗаработке, СтрокаСведенийОЗаработке);
		
		СведенияОЗаработкеСотрудника.Добавить(СтруктураПолейСведенияОЗаработке);
	КонецЦикла;	
	
	Для Каждого СтрокаСведенийОЗаработке Из СведенияОЗаработкеНаВредныхИТяжелыхРаботах Цикл
		СтруктураПолейСведенияОЗаработке = СтруктураПолейСведенияОЗаработкеНаВредныхИТяжелыхРаботах();
		ЗаполнитьЗначенияСвойств(СтруктураПолейСведенияОЗаработке, СтрокаСведенийОЗаработке);
		
		СведенияОЗаработкеНаВредныхИТяжелыхРаботахСотрудника.Добавить(СтруктураПолейСведенияОЗаработке);
	КонецЦикла;	
		
	ЗаписиОСтажеСотрудника = Новый Массив;	
	ДанныеСотрудника.Вставить("ЗаписиОСтаже", ЗаписиОСтажеСотрудника);
	
	ПорядокЗаписей = ПорядокЗаписейСтажа();
	
	Для Каждого ЭлементПорядка Из ПорядокЗаписей Цикл
		СтруктураПолейЗаписиОСтаже = СтруктураПолейЗаписиОСтаже();
		СтрокаЗаписиОСтаже = ЗаписиОСтаже[ЭлементПорядка.ИндексСтроки];
		
		ЗаполнитьЗначенияСвойств(СтруктураПолейЗаписиОСтаже, СтрокаЗаписиОСтаже);
		
		ЗаписиОСтажеСотрудника.Добавить(СтруктураПолейЗаписиОСтаже);
	КонецЦикла;	
	
	ДанныеРаздела66Сотрудника = Новый Массив;
	ДанныеСотрудника.Вставить("КорректирующиеСведения", ДанныеРаздела66Сотрудника);
	
	Для Каждого СтрокаДанныхРаздела66 Из КорректирующиеСведения Цикл
		СтруктураПолейРаздела66 = СтруктураПолейРаздела66();
		
		ЗаполнитьЗначенияСвойств(СтруктураПолейРаздела66, СтрокаДанныхРаздела66);
		
		ДанныеРаздела66Сотрудника.Добавить(СтруктураПолейРаздела66);
	КонецЦикла;	
	
	Ошибки = ЗарплатаКадрыОтображениеОшибок.СообщенияОбОшибкахИзДанныхФормы(ЭтотОбъект);
	
	ДанныеСотрудника.Вставить("Ошибки", Ошибки);
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеСотрудника);		
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураПолейСведенияОЗаработке()
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("КатегорияЗастрахованныхЛиц");
	СтруктураПолей.Вставить("Месяц");
	СтруктураПолей.Вставить("Заработок");
	СтруктураПолей.Вставить("ПоДоговорамГПХДоПредельнойВеличины");
	СтруктураПолей.Вставить("ОблагаетсяВзносамиДоПредельнойВеличины");
	СтруктураПолей.Вставить("ОблагаетсяВзносамиСвышеПредельнойВеличины");
	СтруктураПолей.Вставить("ИдентификаторИсходнойСтроки");
	
	Возврат СтруктураПолей;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураПолейСведенияОЗаработкеНаВредныхИТяжелыхРаботах()
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("КлассУсловийТруда");
	СтруктураПолей.Вставить("Месяц");
	СтруктураПолей.Вставить("Заработок");
	СтруктураПолей.Вставить("ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах");
	СтруктураПолей.Вставить("ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах");
	СтруктураПолей.Вставить("ИдентификаторИсходнойСтроки");
	
	Возврат СтруктураПолей;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураПолейЗаписиОСтаже()
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("НомерОсновнойЗаписи");
	СтруктураПолей.Вставить("НомерДополнительнойЗаписи");
	СтруктураПолей.Вставить("ДатаНачалаПериода");
	СтруктураПолей.Вставить("ДатаОкончанияПериода");
	СтруктураПолей.Вставить("ОсобыеУсловияТруда");
	СтруктураПолей.Вставить("КодПозицииСписка");
	СтруктураПолей.Вставить("ОснованиеИсчисляемогоСтажа");
	СтруктураПолей.Вставить("ПервыйПараметрИсчисляемогоСтажа");
	СтруктураПолей.Вставить("ВторойПараметрИсчисляемогоСтажа");
	СтруктураПолей.Вставить("ТретийПараметрИсчисляемогоСтажа");
	СтруктураПолей.Вставить("ОснованиеВыслугиЛет");
	СтруктураПолей.Вставить("ПервыйПараметрВыслугиЛет");
	СтруктураПолей.Вставить("ВторойПараметрВыслугиЛет");
	СтруктураПолей.Вставить("ТретийПараметрВыслугиЛет");
	СтруктураПолей.Вставить("ТерриториальныеУсловия");
	СтруктураПолей.Вставить("ПараметрТерриториальныхУсловий");
	СтруктураПолей.Вставить("ИдентификаторИсходнойСтроки");

	Возврат СтруктураПолей;	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураДанныхПоСотруднику(Форма)
	СтруктураДанныхПоСотруднику = Новый Структура;
	
	СтруктураДанныхПоСотруднику.Вставить("НачисленоСтраховая", Форма.НачисленоСтраховая);
	СтруктураДанныхПоСотруднику.Вставить("НачисленоНакопительная", Форма.НачисленоНакопительная);
	СтруктураДанныхПоСотруднику.Вставить("ДоНачисленоСтраховая", Форма.ДоНачисленоСтраховая);
	СтруктураДанныхПоСотруднику.Вставить("ФиксНачисленныеВзносы", Форма.ФиксНачисленныеВзносы);
	СтруктураДанныхПоСотруднику.Вставить("ФиксСтаж", Форма.ФиксСтаж);
	СтруктураДанныхПоСотруднику.Вставить("ФиксЗаработок", Форма.ФиксЗаработок);

	ЗаполнитьЗначенияСвойств(СтруктураДанныхПоСотруднику, Форма);
	
	Возврат СтруктураДанныхПоСотруднику;
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция СтруктураПолейРаздела66()
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("КорректируемыйПериод");
	СтруктураПолей.Вставить("НомерДополнительнойЗаписи");
	СтруктураПолей.Вставить("ДоначисленоСтраховая");
	СтруктураПолей.Вставить("ДоначисленоНакопительная");
	СтруктураПолей.Вставить("ДоначисленоНаОПС");
	
	Возврат СтруктураПолей;	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьИзменившиесяДанныеФизическогоЛица(ДанныеФизическогоЛица)	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ДанныеФизическогоЛица);
	ИзменилисьДанныеФизическогоЛица = Истина;
КонецПроцедуры	

&НаКлиентеНаСервереБезКонтекста
Процедура СведенияОЗаработкеСпозиционироватьСтроку(СведенияОЗаработке, СтрокаТаблицы, ИмяПоляГруппировкиСтрок)
	СтрокиГруппы = СведенияОЗаработке.НайтиСтроки(Новый Структура(ИмяПоляГруппировкиСтрок, СтрокаТаблицы[ИмяПоляГруппировкиСтрок]));
	
	НовыйИндексСтроки = СведенияОЗаработке.Индекс(СтрокаТаблицы);
	Для Каждого ОбрабатываемаяСтрока Из СтрокиГруппы Цикл
		Если СтрокаТаблицы.Месяц < ОбрабатываемаяСтрока.Месяц
			И НовыйИндексСтроки >  СведенияОЗаработке.Индекс(ОбрабатываемаяСтрока) Тогда
			
			НовыйИндексСтроки = СведенияОЗаработке.Индекс(ОбрабатываемаяСтрока);
		КонецЕсли;			
	КонецЦикла;	
	
	Если НовыйИндексСтроки <> СведенияОЗаработке.Индекс(СтрокаТаблицы) Тогда
		Сдвиг = НовыйИндексСтроки - СведенияОЗаработке.Индекс(СтрокаТаблицы);	
		СведенияОЗаработке.Сдвинуть(СведенияОЗаработке.Индекс(СтрокаТаблицы), Сдвиг);		
	КонецЕсли;	
КонецПроцедуры	

&НаКлиенте
Функция СведенияОЗаработкеПериодСписокВыбора()
	СписокВыбора = Новый СписокЗначений;
	
	СписокВыбора.Добавить(0, ПредставлениеПериодаСведенийОЗаработке(0, Период));			
	
	Для Сч = 0 По 2 Цикл
		СписокВыбора.Добавить(Месяц(Период) + Сч, ПредставлениеПериодаСведенийОЗаработке(Месяц(Период) + Сч, Период));		
	КонецЦикла;	
	
	Возврат СписокВыбора;
КонецФункции	

#Область МеханизмОтображенияОшибок

&НаКлиенте
Процедура ПоказатьОшибки(ИмяПоляИндикацииОшибки, ПоказыватьТекстОшибки) Экспорт
	ПоказыватьТекстОшибки = Истина;	
КонецПроцедуры	

&НаСервере
Функция ОписаниеЭлементовСИндикациейОшибок() Экспорт
	КоллекцияОписанийЭлементов = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементовСИндикациейОшибок();
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "ИнфонадписьЗаголовокКарточки";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ОтображатьНепривязанныеОшибки = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Сотрудник";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
			
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "Фамилия";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Фамилия";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "Имя";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Имя";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
		
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "Отчество";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Отчество";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "СтраховойНомерПФР";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "СтраховойНомерПФР";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);

	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "НачисленоСтраховая";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "НачисленоСтраховая";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы();	
	ОписаниеЭлемента.ИмяЭлемента = "ЗаписиОСтаже";
	ОписаниеЭлемента.ИмяЭлементаТаблица = "ЗаписиОСтаже";	
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "ЗаписиОСтаже";	
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы(КоллекцияОписанийЭлементов, ОписаниеЭлемента);

	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы();	
	ОписаниеЭлемента.ИмяЭлемента = "СведенияОЗаработке";
	ОписаниеЭлемента.ИмяЭлементаТаблица = "СведенияОЗаработке";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "СведенияОЗаработке";	
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы();	
	ОписаниеЭлемента.ИмяЭлемента = "ДанныеРаздела66";
	ОписаниеЭлемента.ИмяЭлементаТаблица = "ДанныеРаздела66";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "КорректирующиеСведения";	
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы();	
	ОписаниеЭлемента.ИмяЭлемента = "СведенияОЗаработкеНаВредныхИТяжелыхРаботах";
	ОписаниеЭлемента.ИмяЭлементаТаблица = "СведенияОЗаработкеНаВредныхИТяжелыхРаботах";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "СведенияОЗаработкеНаВредныхИТяжелыхРаботах";	
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	Возврат КоллекцияОписанийЭлементов;
КонецФункции	

// Добавление полей заголовков.

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеКолонокЗаголовковТаблицФормы()
	ОписаниеКолонокЗаголовковТаблиц = Новый Соответствие;
	
	ОписаниеКолонокЗаголовковТаблиц.Вставить("СведенияОЗаработке", ОписаниеКолонокЗаголовковТаблицы("СведенияОЗаработке")); 
	ОписаниеКолонокЗаголовковТаблиц.Вставить("ЗаписиОСтаже", ОписаниеКолонокЗаголовковТаблицы("ЗаписиОСтаже")); 
	
	Возврат ОписаниеКолонокЗаголовковТаблиц;
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеКолонокЗаголовковТаблицыСведенияОЗаработке()
	ОписаниеЗаголовковКолонок = Новый Массив;
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "СведенияОЗаработкеОблагаетсяВзносамиДоПредельнойВеличины";
	ОписаниеЗаголовка.Заголовок = "";
	ОписаниеЗаголовка.Ширина = 7;
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
		
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "СведенияОЗаработкеПоДоговорамГПХДоПредельнойВеличины";
	ОписаниеЗаголовка.Заголовок = "";
	ОписаниеЗаголовка.Ширина = 18;
		
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	Возврат ОписаниеЗаголовковКолонок;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеКолонокЗаголовковТаблицыЗаписиОСтаже()
	ОписаниеЗаголовковКолонок = Новый Массив;
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ЗаписиОСтажеТерриториальныеУсловия";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ЗаписиОСтажеПараметрТерриториальныхУсловий";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ПачкаСЗВ_6_4ОбъектЗаписиОСтажеОснованиеИсчисляемогоСтажа";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ПачкаСЗВ_6_4ОбъектЗаписиОСтажеТретийПараметрИсчисляемогоСтажа";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ПачкаСЗВ_6_4ОбъектЗаписиОСтажеОснованиеВыслугиЛет";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ПачкаСЗВ_6_4ОбъектЗаписиОСтажеПервыйПараметрВыслугиЛет";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ПачкаСЗВ_6_4ОбъектЗаписиОСтажеВторойПараметрВыслугиЛет";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ПачкаСЗВ_6_4ОбъектЗаписиОСтажеТретийПараметрВыслугиЛет";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ПачкаСЗВ_6_4ОбъектЗаписиОСтажеПервыйПараметрИсчисляемогоСтажа";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ПачкаСЗВ_6_4ОбъектЗаписиОСтажеВторойПараметрИсчисляемогоСтажа";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	Возврат ОписаниеЗаголовковКолонок;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеКолонокЗаголовковТаблицы(ИмяТаблицы)
	Если ИмяТаблицы = "СведенияОЗаработке" Тогда
		ОписаниеКолонок = ОписаниеКолонокЗаголовковТаблицыСведенияОЗаработке();
	ИначеЕсли ИмяТаблицы = "ЗаписиОСтаже" Тогда
		ОписаниеКолонок = ОписаниеКолонокЗаголовковТаблицыЗаписиОСтаже();
	КонецЕсли;	
		
	Возврат ОписаниеКолонок;
КонецФункции	

&НаКлиенте
Процедура Подключаемый_ЭлементИндикацииОшибкиНажатие(Элемент, СтандартнаяОбработка)
	ЗарплатаКадрыОтображениеОшибокКлиент.ЭлементИндикацииОшибкиНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);	
КонецПроцедуры	

&НаКлиенте
Процедура Подключаемый_ЭлементИндикацииПриАктивизацииЯчейки(Элемент)
	ЗарплатаКадрыОтображениеОшибокКлиент.ЭлементИндикацииПриАктивизацииЯчейки(ЭтотОбъект, Элемент);	
КонецПроцедуры	

&НаСервере
Функция ПорядокЗаписейСтажа()
	ВидыСтажаГПХ = Новый Массив;
	
	ВидыСтажаГПХ.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.ДОГОВОР);
	ВидыСтажаГПХ.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.НЕОПЛАВТ);
	ВидыСтажаГПХ.Добавить(Справочники.ПараметрыИсчисляемогоСтраховогоСтажа.НЕОПЛДОГ);
	
	ПорядокЗаписейСтажа = Новый ТаблицаЗначений;
	ПорядокЗаписейСтажа.Колонки.Добавить("ИндексСтроки", Новый ОписаниеТипов("Число"));
	ПорядокЗаписейСтажа.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));
	
	ОбычныеЗаписиСтажа = Новый Массив;
	
	Для Каждого СтрокаСтажа Из ЗаписиОСтаже Цикл
		Если ВидыСтажаГПХ.Найти(СтрокаСтажа.ТретийПараметрИсчисляемогоСтажа) <> Неопределено Тогда
			ЭлементПорядка = ПорядокЗаписейСтажа.Добавить();
			ЭлементПорядка.ДатаНачала = СтрокаСтажа.ДатаНачалаПериода;
			ЭлементПорядка.ИндексСтроки = ЗаписиОСтаже.Индекс(СтрокаСтажа);
		Иначе
			ОбычныеЗаписиСтажа.Добавить(СтрокаСтажа);	
		КонецЕсли;	
	КонецЦикла;	
	
	ПорядокЗаписейСтажа.Сортировать("ДатаНачала");
	
	Для Каждого СтрокаСтажа Из ОбычныеЗаписиСтажа Цикл
		ЭлементПорядка = ПорядокЗаписейСтажа.Добавить();
		ЭлементПорядка.ИндексСтроки = ЗаписиОСтаже.Индекс(СтрокаСтажа);	
	КонецЦикла;
	
	Возврат ПорядокЗаписейСтажа;	
КонецФункции	

&НаКлиенте
Функция РежимВыбораПериода(ВыбираемыйПериод) Экспорт
	Год = Год(ВыбираемыйПериод);
	Если Год < 2011 Тогда
		Возврат "Полугодие";
	Иначе
		Возврат "Квартал";
	КонецЕсли; 
КонецФункции

СтарыеЗначенияКонтролируемыхПолейВзносы = Новый Структура;

СтарыеЗначенияКонтролируемыхПолейСтаж = Новый Структура;

СтарыеЗначенияКонтролируемыхПолейЗаработок = Новый Структура;

#КонецОбласти

#КонецОбласти
