#Область ОписаниеПеременных

&НаКлиенте
Перем СтарыеЗначенияКонтролируемыхПолейВзносы;

&НаКлиенте
Перем СтарыеЗначенияКонтролируемыхПолейСтаж;

&НаКлиенте
Перем СтарыеЗначенияКонтролируемыхПолейЗаработок;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗарплатаКадрыОтображениеОшибок.ХраненияОшибокВДанныхФормыДополнитьФорму(ЭтотОбъект);
	ЗарплатаКадрыОтображениеОшибок.ИндикацияОшибокДополнитьФорму(ЭтотОбъект, ОписаниеЭлементовСИндикациейОшибок());
	
	Если НЕ Параметры.ИспользоватьНовыйКлассификаторПараметровСтажа Тогда
		ПараметрВыбораСтажа = Новый ПараметрВыбора("Отбор.ИспользуетсяС2014Года", Ложь);
		
		МассивПараметровВыбора = Новый Массив;
		МассивПараметровВыбора.Добавить(ПараметрВыбораСтажа);
		
		Элементы.ПачкаСЗВ_6_4ОбъектЗаписиОСтажеТретийПараметрИсчисляемогоСтажа.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	КонецЕсли;	
	
	ОтменаИсправленийДоступна = Параметры.ОтменаИсправленийДоступна;
	
	ПерсонифицированныйУчетФормы.ДокументыСЗВДобавитьКонтрольИсправлений(КонтролируемыеПоля);
	
	РедактируемыйДокументСсылка = Параметры.РедактируемыйДокументСсылка;
	ТипСведенийСЗВ = Параметры.ТипСведенийСЗВ;
	Организация = Параметры.Организация;
	Период = Параметры.Период;
	Сотрудник = Параметры.Сотрудник;
	
	ИменаДополняемыхТаблиц = Новый Массив;
	ИменаДополняемыхТаблиц.Добавить("СведенияОЗаработке");
	ИменаДополняемыхТаблиц.Добавить("ЗаписиОСтаже");
	ПерсонифицированныйУчетФормы.ДобавитьЗаголовкиКПолямТаблицФормы(ЭтаФорма, ИменаДополняемыхТаблиц, ОписаниеКолонокЗаголовковТаблицФормы(ЭтотОбъект));
	
	ДанныеИзВременногоХранилищаВДанныеФормы(Параметры.АдресВоВременномХранилище);
	
	УстановитьЗаголовокФормы();
	
	УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)	
	СтруктураДанныхПоСотруднику = СтруктураДанныхПоСотруднику();	
	
	ПерсонифицированныйУчетКлиентСервер.ДокументыСЗВУстановитьЗначенияКонтролируемыхПолей(
		СтруктураДанныхПоСотруднику, 
		КонтролируемыеПоля, 
		СтарыеЗначенияКонтролируемыхПолейВзносы);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОтмененаИсправления" Тогда
		ДанныеИзВременногоХранилищаВДанныеФормы(Параметр.АдресХранилища);
		Активизировать();
	ИначеЕсли ИмяСобытия = "ИзменениеДанныхФизическогоЛица" И Не ТолькоПросмотр Тогда 
		ЗаполнитьИзменившиесяДанныеФизическогоЛица(Параметр);	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Оповещение = Новый ОписаниеОповещения("ВыбратьИЗакрыть", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НачисленоСтраховаяПриИзменении(Элемент)
	ВзносыПриИзменении();	
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "НачисленоСтраховая");
КонецПроцедуры

&НаКлиенте
Процедура НачисленоНакопительнаяПриИзменении(Элемент)
	ВзносыПриИзменении();
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "НачисленоНакопительная");
КонецПроцедуры

&НаКлиенте
Процедура УплаченоСтраховаяПриИзменении(Элемент)
	ВзносыПриИзменении();	
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "УплаченоСтраховая");
КонецПроцедуры

&НаКлиенте
Процедура УплаченоНакопительнаяПриИзменении(Элемент)
	ВзносыПриИзменении();	
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "УплаченоНакопительная");
КонецПроцедуры

&НаКлиенте
Процедура ДоНачисленоСтраховаяПриИзменении(Элемент)
	ВзносыПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ДоУплаченоСтраховаяПриИзменении(Элемент)
	ВзносыПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ДоНачисленоНакопительнаяПриИзменении(Элемент)
	ВзносыПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ДоУплаченоНакопительнаяПриИзменении(Элемент)
	ВзносыПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ФамилияПриИзменении(Элемент)
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "Фамилия");
КонецПроцедуры

&НаКлиенте
Процедура ИмяПриИзменении(Элемент)
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "Имя");
КонецПроцедуры

&НаКлиенте
Процедура ОтчествоПриИзменении(Элемент)
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "Отчество");
КонецПроцедуры

&НаКлиенте
Процедура СтраховойНомерПФРПриИзменении(Элемент)
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриИзмененииДанныхВЭлементеСФлагомИндикацииОшибок(ЭтотОбъект, Элемент, "СтраховойНомерПФР");
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаписиОСтаже

&НаКлиенте
Процедура ЗаписиОСтажеПриАктивизацииСтроки(Элемент)
	СтруктураДанныхПоСотруднику = СтруктураДанныхПоСотруднику();
	
	ПерсонифицированныйУчетКлиент.ДокументыСЗВЗаписиОСтажеПриАктивацииСтроки(
		Элементы.ЗаписиОСтаже.ТекущиеДанные, 
		КонтролируемыеПоля, 
		СтарыеЗначенияКонтролируемыхПолейСтаж, 
		СтруктураДанныхПоСотруднику);	
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаписиОСтажеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ПерсонифицированныйУчетКлиентСервер.УстановитьЗаголовкиВСтрокеТаблицы(ЭтаФорма, Элемент.ТекущиеДанные, ОписаниеКолонокЗаголовковТаблицы(ЭтотОбъект, "ЗаписиОСтаже"));
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписиОСтажеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанныхПоСотруднику = СтруктураДанныхПоСотруднику();
	
	ПерсонифицированныйУчетКлиент.ДокументыСЗВЗаписиОСтажеПриОкончанииРедактирования(
		Элементы.ЗаписиОСтаже.ТекущиеДанные, 
		НоваяСтрока, 
		КонтролируемыеПоля, 
		СтарыеЗначенияКонтролируемыхПолейСтаж, 
		СтруктураДанныхПоСотруднику);
		
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураДанныхПоСотруднику);	
	
	Если НоваяСтрока Тогда
		ПерсонифицированныйУчетКлиентСервер.ВыполнитьНумерациюЗаписейОСтаже(ЗаписиОСтаже);
	КонецЕсли;
	
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриОкончанииРедактированияСтрокиТаблицыСИндикациейОшибок(
		ЭтотОбъект,
		Элемент,
		НоваяСтрока,
		"ЗаписиОСтаже");
КонецПроцедуры

&НаКлиенте
Процедура ЗаписиОСтажеПередУдалением(Элемент, Отказ)
	ЗарплатаКадрыОтображениеОшибокКлиент.ПередУдалениемСтрокиТаблицыСИндикациейОшибок(
		ЭтотОбъект,
		Элемент,
		"ЗаписиОСтаже");
КонецПроцедуры

&НаКлиенте
Процедура ЗаписиОСтажеПослеУдаления(Элемент)
	ФиксСтаж = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСведенияОЗаработке

&НаКлиенте
Процедура СведенияОЗаработкеПриАктивизацииСтроки(Элемент)
	СтруктураДанныхПоСотруднику = СтруктураДанныхПоСотруднику();
	
	ПерсонифицированныйУчетКлиент.ДокументыСЗВЗаписиОСтажеПриАктивацииСтроки(
		Элементы.СведенияОЗаработке.ТекущиеДанные, 
		КонтролируемыеПоля, 
		СтарыеЗначенияКонтролируемыхПолейЗаработок, 
		СтруктураДанныхПоСотруднику);	
		
КонецПроцедуры
&НаКлиенте
Процедура СведенияОЗаработкеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ПерсонифицированныйУчетКлиентСервер.УстановитьЗаголовкиВСтрокеТаблицы(ЭтаФорма, Элемент.ТекущиеДанные, ОписаниеКолонокЗаголовковТаблицы(ЭтотОбъект, "СведенияОЗаработке"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СведенияОЗаработкеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДанныхПоСотруднику = СтруктураДанныхПоСотруднику();
	
	ПерсонифицированныйУчетКлиент.ДокументыСЗВЗаписиОСтажеПриОкончанииРедактирования(
		Элементы.СведенияОЗаработке.ТекущиеДанные, 
		НоваяСтрока, 
		КонтролируемыеПоля, 
		СтарыеЗначенияКонтролируемыхПолейЗаработок, 
		СтруктураДанныхПоСотруднику);
		
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураДанныхПоСотруднику);
	
	ЗарплатаКадрыОтображениеОшибокКлиент.ПриОкончанииРедактированияСтрокиТаблицыСИндикациейОшибок(
		ЭтотОбъект,
		Элемент,
		НоваяСтрока,
		"СведенияОЗаработке");
КонецПроцедуры

&НаКлиенте
Процедура СведенияОЗаработкеПередУдалением(Элемент, Отказ)
	ЗарплатаКадрыОтображениеОшибокКлиент.ПередУдалениемСтрокиТаблицыСИндикациейОшибок(
		ЭтотОбъект,
		Элемент,
		"СведенияОЗаработке");
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Ок(Команда)
	ВыбратьИЗакрыть();
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИсправленияПоВзносам(Команда)
	ФиксНачисленныеВзносы = Ложь;
	ФиксУплаченныеВзносы = Ложь;
	ФиксЗаработок = Ложь;
	Модифицированность = Истина;
	
	АдресВоВременномХранилище = ДанныеСотрудникаВоВременноеХранилище();
	ВладелецФормы.ОтменитьИсправленияПоВзносам(АдресВоВременномХранилище, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИсправленияПоСтажу(Команда)
	ФиксСтаж = Ложь;
	ЗаписиОСтаже.Очистить();
	
	Модифицированность = Истина;
	АдресВоВременномХранилище = ДанныеСотрудникаВоВременноеХранилище();
	ВладелецФормы.ОтменитьИсправленияПоСтажу(АдресВоВременномХранилище, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьДанныеФизическогоЛица(Команда)
	ПараметрыФормы = Новый Структура("Ключ, АктивнаяСтраница, РедактируемоеПоле", Сотрудник, "ЛичныеДанные");
	ОткрытьФорму("Справочник.ФизическиеЛица.ФормаОбъекта", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура КарточкаУчетаСтраховыхВзносов(Команда)
	ПериодОтчета = Новый СтандартныйПериод;
	
	ПериодОтчета.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
	ПериодОтчета.ДатаНачала = НачалоГода(Период);
	ПериодОтчета.ДатаОкончания = КонецГода(Период);
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("КлючВарианта", "КарточкаУчетаСтраховыхВзносовВЦелом");

	ФизическиеЛицаДляОтчета = Новый Массив;
	ФизическиеЛицаДляОтчета.Добавить(Сотрудник);
	
	ОтборОтчета = Новый Структура;
	ОтборОтчета.Вставить("ФизическоеЛицо", ФизическиеЛицаДляОтчета);
	ОтборОтчета.Вставить("Период", ПериодОтчета);
    ОтборОтчета.Вставить("Организация", Организация);
	ПараметрыОтчета.Вставить("Отбор", ОтборОтчета);
	ПараметрыОтчета.Вставить("СформироватьПриОткрытии", Истина);
		
	ОткрытьФорму("Отчет.КарточкаУчетаПоСтраховымВзносам.Форма", ПараметрыОтчета);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция  СоответствиеДанныхОбъектаДаннымФормы()
	ОписаниеСвязиДанных = ЗарплатаКадрыОтображениеОшибок.ОписаниеСвязиДанных();
	
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиДанныхСтрокТаблиц(
		ОписаниеСвязиДанных,
		"ЗаписиОСтаже",
		"*",
		"ЗаписиОСтаже",
		"");
		
	КлючСвязиСтрок = ЗарплатаКадрыОтображениеОшибок.КлючСвязиДанныхСтрокТаблиц();
	
	ЗарплатаКадрыОтображениеОшибок.ДобавитьЭлементКлючаСвязиПоПолямСтрокТаблиц(КлючСвязиСтрок, "Месяц", "Месяц");
		
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиДанныхСтрокТаблиц(
		ОписаниеСвязиДанных,
		"СведенияОЗаработке",
		"*",
		"СведенияОЗаработке",
		"",
		КлючСвязиСтрок);
					
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеСвязиРеквизитов(ОписаниеСвязиДанных, "", "Сотрудник");	
	
	Возврат ОписаниеСвязиДанных;
КонецФункции	

&НаКлиенте
Процедура ВыбратьИЗакрыть(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	АдресВоВременномХранилище = ДанныеСотрудникаВоВременноеХранилище();
	
	ПараметрыОповещения = Новый Структура("РедактируемыйДокументСсылка, Сотрудник, АдресВоВременномХранилище");
	ПараметрыОповещения.РедактируемыйДокументСсылка = РедактируемыйДокументСсылка;
	ПараметрыОповещения.Сотрудник = Сотрудник;
	ПараметрыОповещения.АдресВоВременномХранилище = АдресВоВременномХранилище;	
	
	Оповестить("РедактированиеДанныхСЗВ6ПоСотруднику", ПараметрыОповещения);
	
	Модифицированность = Ложь;
	Закрыть();
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовФормы()
	ДоступностьИсправленийВзносов = ФиксНачисленныеВзносы Или ФиксУплаченныеВзносы Или ФиксЗаработок;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ОтменитьИсправленияПоВзносам", "Доступность", ДоступностьИсправленийВзносов);
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ЗаписиОСтажеОтменитьИсправленияПоСтажу", "Доступность", ФиксСтаж);
	
	Если ТипЗнч(РедактируемыйДокументСсылка) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_3") Тогда
		Элементы.СведенияОВзносахСтраницы.Видимость = Ложь;
		Элементы.ЗаписиОСтажеГруппа.Видимость = Ложь;
		Элементы.СведенияОЗаработкеГруппа.Видимость = Истина;
		Элементы.СведенияОЗаработкеОблагаетсяВзносамиГруппа.Видимость = Ложь;
		Элементы.СведенияОЗаработкеОблагаетсяВзносами.Видимость = Истина;
		
		Элементы.СведенияОЗаработке.РастягиватьПоВертикали = Истина;
	Иначе	
		Элементы.СведенияОВзносахСтраницы.Видимость = Истина;
		Элементы.ЗаписиОСтажеГруппа.Видимость = Истина;
		
		Элементы.СведенияОЗаработке.РастягиватьПоВертикали = Ложь;
		
		Если ТипЗнч(РедактируемыйДокументСсылка) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_4") Тогда 
			Элементы.СведенияОЗаработкеГруппа.Видимость = Истина;
			
			Элементы.СведенияОЗаработкеОблагаетсяВзносамиГруппа.Видимость = Истина;
			Элементы.СведенияОЗаработкеОблагаетсяВзносами.Видимость = Ложь;
			
			Элементы.ЗаписиОСтаже.ВысотаВСтрокахТаблицы = 2;
		Иначе
			Элементы.СведенияОЗаработкеГруппа.Видимость = Ложь;
			Элементы.ЗаписиОСтаже.РастягиватьПоВертикали = Истина;	
		КонецЕсли;	
		
		Если ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ Тогда			
			Элементы.ДоначисленоНакопительная.Видимость = Ложь;
			Элементы.ДоначисленоСтраховая.Видимость     = Ложь;
			
			Элементы.ДоуплаченоНакопительная.Видимость = Ложь;
			Элементы.ДоуплаченоСтраховая.Видимость     = Ложь;
		
		ИначеЕсли  ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ Тогда
			Элементы.НачисленоСтраховая.Доступность = Ложь;
			Элементы.УплаченоСтраховая.Доступность = Ложь;
			
			Элементы.НачисленоНакопительная.Доступность = Ложь;
			Элементы.УплаченоНакопительная.Доступность = Ложь;
			
			Элементы.ЗаписиОСтаже.Доступность = Ложь;
			Элементы.СведенияОЗаработке.Доступность = Ложь;
		КонецЕсли;
		
		Если ТипЗнч(РедактируемыйДокументСсылка) = Тип("ДокументСсылка.РеестрСЗВ_6_2") Тогда
			Элементы.ЗаписиОСтажеНомера.Видимость = Ложь;
			Элементы.ЗаписиОСтажеТерриториальныеУсловияГруппа.Видимость = Ложь;
			Элементы.ПачкаСЗВ_6_4ОбъектЗаписиОСтажеУсловияТруда.Видимость = Ложь;
			Элементы.ПачкаСЗВ_6_4ОбъектЗаписиОСтажеИсчисляемыйСтаж.Видимость = Ложь;
			Элементы.ПачкаСЗВ_6_4ОбъектЗаписиОСтажеДосрочноеНазначениеПенсии.Видимость = Ложь;
			Элементы.ПачкаСЗВ_6_4ОбъектЗаписиОСтажеФактическиОтработанноеВремя.Видимость = Ложь;
		КонецЕсли;	
		
	КонецЕсли;	
	
	ПерсонифицированныйУчетФормы.УстановитьВидимостьКолонокЗаголовков(ЭтаФорма, "СведенияОЗаработке", ОписаниеКолонокЗаголовковТаблицы(ЭтотОбъект, "СведенияОЗаработке"));
	ПерсонифицированныйУчетФормы.УстановитьВидимостьКолонокЗаголовков(ЭтаФорма, "ЗаписиОСтаже", ОписаниеКолонокЗаголовковТаблицы(ЭтотОбъект, "ЗаписиОСтаже"));
	
	Если Не ОтменаИсправленийДоступна Тогда
		Элементы.ЗаписиОСтажеОтменитьИсправленияПоСтажу.Видимость = Ложь;
		Элементы.ОтменитьИсправленияПоВзносам.Видимость = Ложь;
	КонецЕсли;	
	
	Если ТипЗнч(РедактируемыйДокументСсылка) = Тип("ДокументСсылка.ПачкаДокументовСПВ_2") Тогда
		Элементы.СведенияОВзносахСтраницы.ТекущаяСтраница = Элементы.СведенияОВзносахСПВ2Страница;
	Иначе
		Элементы.СведенияОВзносахСтраницы.ТекущаяСтраница = Элементы.СведенияОВзносахПолныеСтраница;
	КонецЕсли;
	
	Если ТипЗнч(РедактируемыйДокументСсылка) = Тип("ДокументСсылка.ПачкаДокументовСПВ_1")
		Или ТипЗнч(РедактируемыйДокументСсылка) = Тип("ДокументСсылка.ПачкаДокументовСПВ_2") Тогда
		
		Элементы.ДатаСоставления.Видимость = Истина;
	Иначе
		Элементы.ДатаСоставления.Видимость = Ложь;
	КонецЕсли;	
КонецПроцедуры	

&НаКлиенте
Процедура ВзносыПриИзменении()
	СтруктураДанныхПоСотруднику = СтруктураДанныхПоСотруднику();
	
	ПерсонифицированныйУчетКлиент.ДокументыСЗВКонтрольИсправленийПриОкончанииРедактированияСтроки(
	 	СтруктураДанныхПоСотруднику, 
		КонтролируемыеПоля, 
		СтарыеЗначенияКонтролируемыхПолейВзносы, 
		СтруктураДанныхПоСотруднику);	
		
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураДанныхПоСотруднику);	
КонецПроцедуры	

&НаСервере
Процедура УстановитьЗаголовокФормы()
	Если ТипЗнч(РедактируемыйДокументСсылка) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_1") Тогда
		Заголовок = НСтр("ru = 'Сведения о страховых взносах и стаже ЗЛ (СВЗ-6-1)'");
	ИначеЕсли ТипЗнч(РедактируемыйДокументСсылка) = Тип("ДокументСсылка.РеестрСЗВ_6_2") Тогда
		Заголовок = НСтр("ru = 'Сведения о страховых взносах и стаже ЗЛ (СВЗ-6-2)'");
	ИначеЕсли ТипЗнч(РедактируемыйДокументСсылка) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_3") Тогда
		Заголовок = НСтр("ru = 'Сведения о сумме выплат и вознаграждений (СВЗ-6-3)'");	
	ИначеЕсли ТипЗнч(РедактируемыйДокументСсылка) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_4") Тогда
		Заголовок = НСтр("ru = 'Сведения о сумме выплат, страховых взносах и стаже ЗЛ (СЗВ-6-4)'");
	ИначеЕсли ТипЗнч(РедактируемыйДокументСсылка) = Тип("ДокументСсылка.ПачкаДокументовСПВ_1") Тогда
		Заголовок = НСтр("ru = 'Сведения о взносах и страховом стаже, форма СПВ-1'");
	ИначеЕсли ТипЗнч(РедактируемыйДокументСсылка) = Тип("ДокументСсылка.ПачкаДокументовСПВ_2") Тогда
		Заголовок = НСтр("ru = 'Сведения о страховом стаже застрахованного лица СПВ-2'");	
	КонецЕсли;	
	
	ИнфонадписьЗаголовокКарточки = НСтр("ru = 'Данные застрахованного лица'");
КонецПроцедуры	

&НаСервере
Процедура ДанныеИзВременногоХранилищаВДанныеФормы(АдресВоВременномХранилище)
	Модифицированность = Ложь;
	
	ДанныеДокументаПоСотруднику = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	Если ДанныеДокументаПоСотруднику = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось получить редактируемые данные.'");	
	КонецЕсли;
	
	Сотрудник = ДанныеДокументаПоСотруднику.Сотрудник;
	Фамилия = ДанныеДокументаПоСотруднику.Фамилия;
	Имя = ДанныеДокументаПоСотруднику.Имя;
	Отчество = ДанныеДокументаПоСотруднику.Отчество;
	СтраховойНомерПФР = ДанныеДокументаПоСотруднику.СтраховойНомерПФР;
	НачисленоСтраховая = ДанныеДокументаПоСотруднику.НачисленоСтраховая;
	НачисленоНакопительная = ДанныеДокументаПоСотруднику.НачисленоНакопительная;
	УплаченоСтраховая = ДанныеДокументаПоСотруднику.УплаченоСтраховая;
	УплаченоНакопительная = ДанныеДокументаПоСотруднику.УплаченоНакопительная;
	ДоНачисленоСтраховая = ДанныеДокументаПоСотруднику.ДоНачисленоСтраховая;
	ДоНачисленоНакопительная = ДанныеДокументаПоСотруднику.ДоНачисленоНакопительная;
	ДоУплаченоСтраховая = ДанныеДокументаПоСотруднику.ДоУплаченоСтраховая;
	ДоУплаченоНакопительная = ДанныеДокументаПоСотруднику.ДоУплаченоНакопительная;
	ФиксНачисленныеВзносы = ДанныеДокументаПоСотруднику.ФиксНачисленныеВзносы;
	ФиксСтаж = ДанныеДокументаПоСотруднику.ФиксСтаж;
	ФиксЗаработок = ДанныеДокументаПоСотруднику.ФиксЗаработок;
	ФиксУплаченныеВзносы = ДанныеДокументаПоСотруднику.ФиксУплаченныеВзносы;
		
	ЗаписиОСтаже.Очистить();
	
	Для Каждого СтрокаТаблицы Из ДанныеДокументаПоСотруднику.ЗаписиОСтаже Цикл
		СтрокаТаблицыФормы = ЗаписиОСтаже.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыФормы, СтрокаТаблицы);
	КонецЦикла;	
	
	СведенияОЗаработке.Очистить();
	
	ТаблицаЗаработок = СведенияОЗаработке.Выгрузить();
	
	Для Каждого СтрокаЗаработок Из ДанныеДокументаПоСотруднику.СведенияОЗаработке Цикл
		СтрокаТаблицы = ТаблицаЗаработок.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаЗаработок);
	КонецЦикла;	
	
	ДанныеДокументаПоСотруднику.СведенияОЗаработке = ТаблицаЗаработок;
	
	Если ТипЗнч(РедактируемыйДокументСсылка) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_3") Тогда
		ЗаполнитьСведенияОЗаработкеВФорме(ДанныеДокументаПоСотруднику.СведенияОЗаработке, 12);
	ИначеЕсли ТипЗнч(РедактируемыйДокументСсылка) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_4") Тогда
		ЗаполнитьСведенияОЗаработкеВФорме(ДанныеДокументаПоСотруднику.СведенияОЗаработке, 3);
	ИначеЕсли ТипЗнч(РедактируемыйДокументСсылка) = Тип("ДокументСсылка.ПачкаДокументовСПВ_1")
		Или ТипЗнч(РедактируемыйДокументСсылка) = Тип("ДокументСсылка.ПачкаДокументовСПВ_2") Тогда
		
		ДатаСоставления = ДанныеДокументаПоСотруднику.ДатаСоставления;
		
		Если ТипЗнч(РедактируемыйДокументСсылка) = Тип("ДокументСсылка.ПачкаДокументовСПВ_2") Тогда
			НачисленоНаОПС = ДанныеДокументаПоСотруднику.НачисленоНаОПС;
  			НачисленоПоДополнительнымТарифам = ДанныеДокументаПоСотруднику.НачисленоПоДополнительнымТарифам;
		КонецЕсли;	
	
	КонецЕсли;	
	
	ПерсонифицированныйУчетКлиентСервер.УстановитьЗаголовкиВТаблице(ЭтаФорма, СведенияОЗаработке, ОписаниеКолонокЗаголовковТаблицы(ЭтотОбъект, "СведенияОЗаработке"));
	ПерсонифицированныйУчетКлиентСервер.УстановитьЗаголовкиВТаблице(ЭтаФорма, ЗаписиОСтаже, ОписаниеКолонокЗаголовковТаблицы(ЭтотОбъект, "ЗаписиОСтаже"));
	
	Ошибки = Неопределено;
	ДанныеДокументаПоСотруднику.Свойство("Ошибки", Ошибки);
	
	Если Ошибки <> Неопределено Тогда 
		ЗарплатаКадрыОтображениеОшибок.ПреобразоватьПутиКДаннымВСообщенияхПользователю(
			ДанныеДокументаПоСотруднику,
			ЭтотОбъект,
			Ошибки,
			СоответствиеДанныхОбъектаДаннымФормы());
			
		ЗарплатаКадрыОтображениеОшибок.ПоместитьСообщенияОбОшибкахВДанныеФормы(ЭтотОбъект, Ошибки);	
			
		ЗарплатаКадрыОтображениеОшибок.УстановитьФлагиНаличияОшибокПоСообщениямОбОшибках(ЭтотОбъект, Ошибки, , Истина);	
	КонецЕсли;		
КонецПроцедуры	

&НаСервере
Функция ЗаполнитьСведенияОЗаработкеВФорме(СведенияОЗаработкеСотрудника, КоличествоМесяцев) 
	СтрокиЗаработкаПоМесяцам = Новый Соответствие;
	
	Для НомерМесяца = 1 По КоличествоМесяцев Цикл 
		СтрокаТаблицы = СведенияОЗаработке.Добавить();
		СтрокаТаблицы.Месяц = НомерМесяца;
		
		Если ТипЗнч(РедактируемыйДокументСсылка) = Тип("ДокументСсылка.ПачкаДокументовСЗВ_6_3") Тогда
			СтрокаТаблицы.МесяцПредставление = Формат(Дата(Год(ТекущаяДатаСеанса()), НомерМесяца, 1), "ДФ=ММММ");
		Иначе
			СтрокаТаблицы.МесяцПредставление = Формат(Дата(Год(ТекущаяДатаСеанса()), Месяц(Период) + НомерМесяца - 1, 1), "ДФ=ММММ");
		КонецЕсли;	
		
		СтрокиЗаработкаПоМесяцам.Вставить(НомерМесяца, СтрокаТаблицы);
	КонецЦикла;		
	
	Для Каждого СтрокаЗаработок Из СведенияОЗаработкеСотрудника Цикл
		СтрокаТаблицыФорма = СтрокиЗаработкаПоМесяцам.Получить(СтрокаЗаработок.Месяц);
		
		Если СтрокаТаблицыФорма <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыФорма, СтрокаЗаработок,, "МесяцПредставление");
		КонецЕсли;	
	КонецЦикла;	
КонецФункции	

&НаСервере 
Функция ДанныеСотрудникаВоВременноеХранилище()	
	ДанныеСотрудника = Новый Структура;
	ДанныеСотрудника.Вставить("Сотрудник", Сотрудник);
	ДанныеСотрудника.Вставить("СтраховойНомерПФР", СтраховойНомерПФР);
	ДанныеСотрудника.Вставить("Фамилия", Фамилия);
	ДанныеСотрудника.Вставить("Имя", Имя);
	ДанныеСотрудника.Вставить("Отчество", Отчество);
	ДанныеСотрудника.Вставить("НачисленоСтраховая", НачисленоСтраховая);
	ДанныеСотрудника.Вставить("УплаченоСтраховая", УплаченоСтраховая);
	ДанныеСотрудника.Вставить("НачисленоНакопительная", НачисленоНакопительная);
	ДанныеСотрудника.Вставить("УплаченоНакопительная", УплаченоНакопительная);
	ДанныеСотрудника.Вставить("ДоначисленоСтраховая", ДоначисленоСтраховая);
	ДанныеСотрудника.Вставить("ДоначисленоНакопительная", ДоначисленоНакопительная);
	ДанныеСотрудника.Вставить("ДоУплаченоНакопительная", ДоУплаченоНакопительная);
	ДанныеСотрудника.Вставить("ДоУплаченоСтраховая", ДоУплаченоСтраховая);
	ДанныеСотрудника.Вставить("ФиксНачисленныеВзносы", ФиксНачисленныеВзносы);
	ДанныеСотрудника.Вставить("ФиксУплаченныеВзносы", ФиксУплаченныеВзносы);
	ДанныеСотрудника.Вставить("ФиксСтаж", ФиксСтаж);
	ДанныеСотрудника.Вставить("ФиксЗаработок", ФиксЗаработок);
	ДанныеСотрудника.Вставить("Модифицированность", Модифицированность);
	ДанныеСотрудника.Вставить("РедактируемыйДокументСсылка", РедактируемыйДокументСсылка);
	ДанныеСотрудника.Вставить("ИзменилисьДанныеФизическогоЛица", ИзменилисьДанныеФизическогоЛица);
	
	ДанныеСотрудника.Вставить("НачисленоНаОПС", НачисленоНаОПС);
	ДанныеСотрудника.Вставить("НачисленоПоДополнительнымТарифам", НачисленоПоДополнительнымТарифам);
	ДанныеСотрудника.Вставить("ДатаСоставления", ДатаСоставления);
		
	СведенияОЗаработкеСотрудника = Новый Массив;
	ДанныеСотрудника.Вставить("СведенияОЗаработке", СведенияОЗаработкеСотрудника);
	
	УдаляемыеСтрокиЗаработка = Новый Массив;
	
	Для Каждого СтрокаСведенийОЗаработке Из СведенияОЗаработке Цикл
		Если Не СтрокаСведенийОЗаработкеЗаполнена(СтрокаСведенийОЗаработке) Тогда
			УдаляемыеСтрокиЗаработка.Добавить(СтрокаСведенийОЗаработке);		
		КонецЕсли;	
	КонецЦикла;	
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтрокиЗаработка Цикл
		СведенияОЗаработке.Удалить(УдаляемаяСтрока);		
	КонецЦикла;	
	
	Для Каждого СтрокаСведенийОЗаработке Из СведенияОЗаработке Цикл
		СтруктураПолейСведенияОЗаработке = СтруктураПолейСведенияОЗаработке();
		ЗаполнитьЗначенияСвойств(СтруктураПолейСведенияОЗаработке, СтрокаСведенийОЗаработке);
		
		СведенияОЗаработкеСотрудника.Добавить(СтруктураПолейСведенияОЗаработке);
	КонецЦикла;	
		
	ЗаписиОСтажеСотрудника = Новый Массив;	
	ДанныеСотрудника.Вставить("ЗаписиОСтаже", ЗаписиОСтажеСотрудника);
	
	Для Каждого СтрокаЗаписиОСтаже Из ЗаписиОСтаже Цикл
		СтруктураПолейЗаписиОСтаже = СтруктураПолейЗаписиОСтаже();
		ЗаполнитьЗначенияСвойств(СтруктураПолейЗаписиОСтаже, СтрокаЗаписиОСтаже);
		
		ЗаписиОСтажеСотрудника.Добавить(СтруктураПолейЗаписиОСтаже);
	КонецЦикла;	
	
	Ошибки = ЗарплатаКадрыОтображениеОшибок.СообщенияОбОшибкахИзДанныхФормы(ЭтотОбъект);
	
	ДанныеСотрудника.Вставить("Ошибки", Ошибки);
	
	Возврат ПоместитьВоВременноеХранилище(ДанныеСотрудника);		
КонецФункции	

&НаКлиентеНаСервереБезКонтекста 
Функция СтруктураПолейСведенияОЗаработке()
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("Месяц");
	СтруктураПолей.Вставить("Заработок");
	СтруктураПолей.Вставить("ОблагаетсяВзносами");
	СтруктураПолей.Вставить("ОблагаетсяВзносамиДоПредельнойВеличины");
	СтруктураПолей.Вставить("ОблагаетсяВзносамиСвышеПредельнойВеличины");
	СтруктураПолей.Вставить("ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах");
	СтруктураПолей.Вставить("ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах");
	СтруктураПолей.Вставить("ПоДоговорамГПХДоПредельнойВеличины", 0);
	СтруктураПолей.Вставить("ИдентификаторИсходнойСтроки");
	
	Возврат СтруктураПолей;
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция СтруктураПолейЗаписиОСтаже()
	СтруктураПолей = Новый Структура;
	СтруктураПолей.Вставить("НомерОсновнойЗаписи");
	СтруктураПолей.Вставить("НомерДополнительнойЗаписи");
	СтруктураПолей.Вставить("ДатаНачалаПериода");
	СтруктураПолей.Вставить("ДатаОкончанияПериода");
	СтруктураПолей.Вставить("ОсобыеУсловияТруда");
	СтруктураПолей.Вставить("КодПозицииСписка");
	СтруктураПолей.Вставить("ОснованиеИсчисляемогоСтажа");
	СтруктураПолей.Вставить("ПервыйПараметрИсчисляемогоСтажа");
	СтруктураПолей.Вставить("ВторойПараметрИсчисляемогоСтажа");
	СтруктураПолей.Вставить("ТретийПараметрИсчисляемогоСтажа");
	СтруктураПолей.Вставить("ОснованиеВыслугиЛет");
	СтруктураПолей.Вставить("ПервыйПараметрВыслугиЛет");
	СтруктураПолей.Вставить("ВторойПараметрВыслугиЛет");
	СтруктураПолей.Вставить("ТретийПараметрВыслугиЛет");
	СтруктураПолей.Вставить("ТерриториальныеУсловия");
	СтруктураПолей.Вставить("ПараметрТерриториальныхУсловий");
	СтруктураПолей.Вставить("ИдентификаторИсходнойСтроки");

	Возврат СтруктураПолей;	
КонецФункции

&НаКлиентеНаСервереБезКонтекста 
Функция СтрокаСведенийОЗаработкеЗаполнена(СтрокаЗаработок)
	Если СтрокаЗаработок.Заработок <> 0
		Или СтрокаЗаработок.ОблагаетсяВзносами <> 0 
		Или СтрокаЗаработок.ОблагаетсяВзносамиДоПредельнойВеличины <> 0
		Или СтрокаЗаработок.ОблагаетсяВзносамиСвышеПредельнойВеличины <> 0
        Или СтрокаЗаработок.ОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах <> 0
		Или СтрокаЗаработок.ОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах <> 0 Тогда
		
		Возврат Истина;
	КонецЕсли;	

	Возврат Ложь;		
КонецФункции	

&НаКлиенте
Функция СтруктураДанныхПоСотруднику()
	СтруктураДанныхПоСотруднику = Новый Структура;
	
	СтруктураДанныхПоСотруднику.Вставить("НачисленоСтраховая", НачисленоСтраховая);
	СтруктураДанныхПоСотруднику.Вставить("НачисленоНакопительная", НачисленоНакопительная);
	СтруктураДанныхПоСотруднику.Вставить("УплаченоСтраховая", УплаченоСтраховая);
	СтруктураДанныхПоСотруднику.Вставить("УплаченоНакопительная", УплаченоНакопительная);
	СтруктураДанныхПоСотруднику.Вставить("ДоНачисленоСтраховая", ДоНачисленоСтраховая);
	СтруктураДанныхПоСотруднику.Вставить("ДоНачисленоНакопительная", ДоНачисленоНакопительная);
	СтруктураДанныхПоСотруднику.Вставить("ДоУплаченоСтраховая", ДоУплаченоСтраховая);
	СтруктураДанныхПоСотруднику.Вставить("ДоУплаченоНакопительная", ДоУплаченоНакопительная);
	СтруктураДанныхПоСотруднику.Вставить("ФиксНачисленныеВзносы", ФиксНачисленныеВзносы);
	СтруктураДанныхПоСотруднику.Вставить("ФиксУплаченныеВзносы", ФиксУплаченныеВзносы);
	СтруктураДанныхПоСотруднику.Вставить("ФиксСтаж", ФиксСтаж);
	СтруктураДанныхПоСотруднику.Вставить("ФиксЗаработок", ФиксЗаработок);

	ЗаполнитьЗначенияСвойств(СтруктураДанныхПоСотруднику, ЭтаФорма);
	
	Возврат СтруктураДанныхПоСотруднику;
КонецФункции	

&НаКлиенте
Процедура ЗаполнитьИзменившиесяДанныеФизическогоЛица(ДанныеФизическогоЛица)	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ДанныеФизическогоЛица);
	ИзменилисьДанныеФизическогоЛица = Истина;
КонецПроцедуры	

#Область МеханизмОтображенияОшибок

&НаСервере
Функция ОписаниеЭлементовСИндикациейОшибок() Экспорт
	КоллекцияОписанийЭлементов = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементовСИндикациейОшибок();
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "ИнфонадписьЗаголовокКарточки";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ОтображатьНепривязанныеОшибки = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Сотрудник";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "Фамилия";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Фамилия";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "Имя";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Имя";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);

	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "Отчество";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "Отчество";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);

	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "СтраховойНомерПФР";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "СтраховойНомерПФР";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);

	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "НачисленоСтраховая";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "НачисленоСтраховая";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);

	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "НачисленоНакопительная";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "НачисленоНакопительная";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);

	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "УплаченоСтраховая";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "УплаченоСтраховая";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);

	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки();	
	ОписаниеЭлемента.ИмяЭлемента = "УплаченоНакопительная";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "УплаченоНакопительная";
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВРеквизитеШапки(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы();	
	ОписаниеЭлемента.ИмяЭлемента = "ЗаписиОСтаже";
	ОписаниеЭлемента.ИмяЭлементаТаблица = "ЗаписиОСтаже";	
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "ЗаписиОСтаже";	
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы(КоллекцияОписанийЭлементов, ОписаниеЭлемента);

	ОписаниеЭлемента = ЗарплатаКадрыОтображениеОшибок.ОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы();	
	ОписаниеЭлемента.ИмяЭлемента = "СведенияОЗаработке";
	ОписаниеЭлемента.ИмяЭлементаТаблица = "СведенияОЗаработке";
	ОписаниеЭлемента.ОтображатьГиперссылку = Истина;
	ОписаниеЭлемента.ПутьКДаннымФормыСодержащимОшибку = "СведенияОЗаработке";	
	ЗарплатаКадрыОтображениеОшибок.ДобавитьОписаниеЭлементаСИндикациейОшибокВСтрокеТаблицы(КоллекцияОписанийЭлементов, ОписаниеЭлемента);
	
	Возврат КоллекцияОписанийЭлементов;
КонецФункции	

// Добавление полей заголовков.

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеКолонокЗаголовковТаблицФормы(Форма)
	ОписаниеКолонокЗаголовковТаблиц = Новый Соответствие;
	
	ОписаниеКолонокЗаголовковТаблиц.Вставить("СведенияОЗаработке", ОписаниеКолонокЗаголовковТаблицы(Форма, "СведенияОЗаработке")); 
	ОписаниеКолонокЗаголовковТаблиц.Вставить("ЗаписиОСтаже", ОписаниеКолонокЗаголовковТаблицы(Форма, "ЗаписиОСтаже")); 
	
	Возврат ОписаниеКолонокЗаголовковТаблиц;
КонецФункции	

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеКолонокЗаголовковТаблицыСведенияОЗаработке(Форма)
	ОписаниеЗаголовковКолонок = Новый Массив;
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "СведенияОЗаработкеОблагаетсяВзносамиДоПредельнойВеличины";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "СведенияОЗаработкеОблагаетсяВзносамиСвышеПредельнойВеличины";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "СведенияОЗаработкеОблагаетсяВзносамиЗаЗанятыхНаПодземныхИВредныхРаботах";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "СведенияОЗаработкеОблагаетсяВзносамиЗаЗанятыхНаТяжелыхИПрочихРаботах";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	Возврат ОписаниеЗаголовковКолонок;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеКолонокЗаголовковТаблицыЗаписиОСтаже(Форма)
	ОписаниеЗаголовковКолонок = Новый Массив;
	
	Если ТипЗнч(Форма.РедактируемыйДокументСсылка) = Тип("ДокументСсылка.РеестрСЗВ_6_2") Тогда
		ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
		ОписаниеЗаголовка.ПолеТаблицы = "ЗаписиОСтажеДатаНачалаПериода";
		ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
		
		ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
		ОписаниеЗаголовка.ПолеТаблицы = "ЗаписиОСтажеДатаОкончанияПериода";
		ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	КонецЕсли;
		
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ЗаписиОСтажеТерриториальныеУсловия";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ЗаписиОСтажеПараметрТерриториальныхУсловий";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ПачкаСЗВ_6_4ОбъектЗаписиОСтажеОснованиеИсчисляемогоСтажа";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ПачкаСЗВ_6_4ОбъектЗаписиОСтажеТретийПараметрИсчисляемогоСтажа";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ПачкаСЗВ_6_4ОбъектЗаписиОСтажеОснованиеВыслугиЛет";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ПачкаСЗВ_6_4ОбъектЗаписиОСтажеПервыйПараметрВыслугиЛет";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ПачкаСЗВ_6_4ОбъектЗаписиОСтажеВторойПараметрВыслугиЛет";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ПачкаСЗВ_6_4ОбъектЗаписиОСтажеТретийПараметрВыслугиЛет";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ПачкаСЗВ_6_4ОбъектЗаписиОСтажеПервыйПараметрИсчисляемогоСтажа";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	ОписаниеЗаголовка = ПерсонифицированныйУчетКлиентСервер.СтруктураОписанияКолонокЗаголовков();
	ОписаниеЗаголовка.ПолеТаблицы = "ПачкаСЗВ_6_4ОбъектЗаписиОСтажеВторойПараметрИсчисляемогоСтажа";
	ОписаниеЗаголовка.Заголовок = "";
	
	ОписаниеЗаголовковКолонок.Добавить(ОписаниеЗаголовка);
	
	Возврат ОписаниеЗаголовковКолонок;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОписаниеКолонокЗаголовковТаблицы(Форма, ИмяТаблицы)
	Если ИмяТаблицы = "СведенияОЗаработке" Тогда
		ОписаниеКолонок = ОписаниеКолонокЗаголовковТаблицыСведенияОЗаработке(Форма);
	ИначеЕсли ИмяТаблицы = "ЗаписиОСтаже" Тогда
		ОписаниеКолонок = ОписаниеКолонокЗаголовковТаблицыЗаписиОСтаже(Форма);
	КонецЕсли;	
		
	Возврат ОписаниеКолонок;
КонецФункции	

&НаКлиенте
Процедура Подключаемый_ЭлементИндикацииОшибкиНажатие(Элемент, СтандартнаяОбработка)
	ЗарплатаКадрыОтображениеОшибокКлиент.ЭлементИндикацииОшибкиНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);	
КонецПроцедуры	

&НаКлиенте
Процедура Подключаемый_ЭлементИндикацииПриАктивизацииЯчейки(Элемент)
	ЗарплатаКадрыОтображениеОшибокКлиент.ЭлементИндикацииПриАктивизацииЯчейки(ЭтотОбъект, Элемент);	
КонецПроцедуры	

СтарыеЗначенияКонтролируемыхПолейВзносы = Новый Структура;

СтарыеЗначенияКонтролируемыхПолейСтаж = Новый Структура;

СтарыеЗначенияКонтролируемыхПолейЗаработок = Новый Структура;

#КонецОбласти

#КонецОбласти
