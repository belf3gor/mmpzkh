#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает полный путь к файлу данных из пакета электронных документов БЭД.
//
// Параметры:
//  ПапкаДляПоиска - Строка - путь к каталогу.
//
// Возвращаемое значение:
//  Строка - полный путь к файлу данных.
//
Функция ПолучитьИмяФайлаДанных(ПапкаДляПоиска) Экспорт
	
	МассивФайлов = НайтиФайлы(ПапкаДляПоиска, "meta*.xml", Истина);
	Если МассивФайлов.Количество() > 0 Тогда
		ФайлИнформации = МассивФайлов[0];
	Иначе
		Возврат "";
	КонецЕсли;
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ФайлИнформации.ПолноеИмя);
	ТипXDTO = ФабрикаXDTO.Тип("http://api-invoice.taxcom.ru/meta", "ContainerDescription");
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипXDTO);
	
	ИмяФайла = ОбъектXDTO.DocFlow[0].Documents.Document[0].Files.MainImage.Path;
	
	Возврат ПапкаДляПоиска + ИмяФайла;
	
КонецФункции

// Возвращает тип электронного документа по переданной строке.
//
// Параметры:
//  ТипДокумента - Строка - текстовое представление типа документа
//
// Возвращаемое значение:
//  Перечисление.ТипЭД - тип документа.
//
Функция ТипДокументаПоСтрокеТакском(ТипДокумента) Экспорт
	
	ФорматированнаяСтрока = НРег(СокрЛП(ТипДокумента));
	Если ФорматированнаяСтрока = "account" Тогда
		ВозвращаемоеЗначение = Перечисления.ТипыЭД.СчетНаОплату;
	ИначеЕсли ФорматированнаяСтрока = "statement" Тогда
		ВозвращаемоеЗначение = Перечисления.ТипыЭД.АктВыполненныхРабот;
	ИначеЕсли ФорматированнаяСтрока = "consignment" Тогда
		ВозвращаемоеЗначение = Перечисления.ТипыЭД.ТоварнаяНакладная;
	ИначеЕсли ФорматированнаяСтрока = "paymentorder" Тогда
		ВозвращаемоеЗначение = Перечисления.ТипыЭД.ПлатежноеПоручение;
	ИначеЕсли ФорматированнаяСтрока = "contract" Тогда
		ВозвращаемоеЗначение = Перечисления.ТипыЭД.Договор;
	ИначеЕсли ФорматированнаяСтрока = "statementappendix" Тогда
		ВозвращаемоеЗначение = Перечисления.ТипыЭД.ПриложениеКАкту;
	ИначеЕсли ФорматированнаяСтрока = "guaranteeletter" Тогда
		ВозвращаемоеЗначение = Перечисления.ТипыЭД.ГарантийноеПисьмо;
	ИначеЕсли ФорматированнаяСтрока = "formalizedstatementcustomer"
		ИЛИ ФорматированнаяСтрока = "formalizedstatementvendor"
		ИЛИ ФорматированнаяСтрока = "formalizedconsignmentcustomer"
		ИЛИ ФорматированнаяСтрока = "formalizedconsignmentvendor"
		ИЛИ ФорматированнаяСтрока = "invoice"
		ИЛИ ФорматированнаяСтрока = "correctiveinvoice"
		ИЛИ ФорматированнаяСтрока = "receivenotification"
		ИЛИ ФорматированнаяСтрока = "specificationnotice"
		ИЛИ ФорматированнаяСтрока = "sendingtimeconfirmation"
		ИЛИ ФорматированнаяСтрока = "other"
		Тогда
		ВозвращаемоеЗначение = Перечисления.ТипыЭД.Прочее;
	Иначе
		ЗаписьВЖурнал = НСтр("ru = 'Не задано сопоставление типа документа из карточки пакета ЭД ""%1"",
			|с перечислением конфигурации ""Типы ЭД""'");
		ЗаписьВЖурнал = СтрЗаменить(ЗаписьВЖурнал, "%1", ТипДокумента);
		ВидОперации = НСтр("ru = 'Чтение карточки пакета ЭД'");
		ЭлектронноеВзаимодействиеБПВызовСервера.ОбработатьИсключениеПоЭДНаСервере(ВидОперации, ЗаписьВЖурнал);
		ВозвращаемоеЗначение = Перечисления.ТипыЭД.Прочее;
	КонецЕсли;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

// Проверяет состояние фонового задания по переданному идентификатору.
//
// Параметры:
//  ИдентификаторЗадания - УникальныйИдентификатор - идентификатор фонового задания. 
//
// Возвращаемое значение:
//  Булево - состояние выполнения задания.
// 
Функция ЗаданиеВыполнено(Знач ИдентификаторЗадания) Экспорт
	
	Если ТипЗнч(ИдентификаторЗадания) = Тип("Строка") Тогда
		ИдентификаторЗадания = Новый УникальныйИдентификатор(ИдентификаторЗадания);
	КонецЕсли;
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	
	Если Задание <> Неопределено
		И Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОперацияНеВыполнена = Истина;
	ПоказатьПолныйТекстОшибки = Ложь;
	Если Задание = Неопределено Тогда
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Длительные операции.Фоновое задание не найдено'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Предупреждение, , , Строка(ИдентификаторЗадания));
	Иначе
		Если Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
			ОшибкаЗадания = Задание.ИнформацияОбОшибке;
			Если ОшибкаЗадания <> Неопределено Тогда
				ПоказатьПолныйТекстОшибки = Истина;
			КонецЕсли;
		ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Длительные операции.Фоновое задание отменено администратором'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Предупреждение,
				,
				,
				НСтр("ru = 'Выполнение фонового задания прервано администратором.'"));
			Возврат Истина;
		Иначе
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ПоказатьПолныйТекстОшибки Тогда
		ТекстОшибки = КраткоеПредставлениеОшибки(ПолучитьИнформациюОбОшибке(Задание.ИнформацияОбОшибке));
		ВызватьИсключение(ТекстОшибки);
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НоваяКонтактнаяИнформация() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("КонтактнаяИнформация"); // Строка, 0 - XML 
	Результат.Вставить("Представление");        // Строка, 0
	Результат.Вставить("Комментарий");          // Строка, 0
	Возврат Результат;
	
КонецФункции

Функция ПолучитьXMLПредставлениеАдреса(ЗначенияПолей, ВидКИ, Представление = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(ЗначенияПолей) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	АдресXML = "";
	ДопустимыеТипы = "Индекс, Страна, Регион, Район, Город, Улица, Дом, Корпус, Квартира";
	
	Если ТипЗнч(ЗначенияПолей) = Тип("Структура") Тогда
		Для Каждого ТекСв Из ЗначенияПолей Цикл
			Если ТекСв.Ключ = "КодРегион" Тогда
				АдресXML = АдресXML + "КодРегиона" + "=" + ТекСв.Значение + Символы.ПС;
			ИначеЕсли ТекСв.Ключ = "Населенный пункт" Тогда
				АдресXML = АдресXML + "НаселенныйПункт" + "=" + ТекСв.Значение + Символы.ПС;
			ИначеЕсли ТекСв.Ключ = "Кварт" Тогда
				АдресXML = АдресXML + "Квартира" + "=" + ТекСв.Значение + Символы.ПС;
			ИначеЕсли Найти(ДопустимыеТипы, ТекСв.Ключ) >0 ТОгда
				АдресXML = АдресXML + ТекСв.Ключ + "=" + ТекСв.Значение + Символы.ПС;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого ТекСв Из ЗначенияПолей Цикл
			Если ТекСв.Тип = "Почтовый индекс" Тогда
				АдресXML = АдресXML + "Индекс" + "=" + ТекСв.Значение + Символы.ПС;
			ИначеЕсли ТекСв.Тип = "Населенный пункт" Тогда
				АдресXML = АдресXML + "НаселенныйПункт" + "=" + ТекСв.Значение + Символы.ПС;
			ИначеЕсли Найти(ДопустимыеТипы, ТекСв.Тип) >0 ТОгда
				АдресXML = АдресXML + ТекСв.Тип + "=" + ТекСв.Значение + Символы.ПС;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	АдресXML = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияВXML(АдресXML, Представление , ВидКИ);
	
	Возврат АдресXML;
	
КонецФункции

Процедура ПрочитатьКарточки(НастройкиЧтенияПочты, АдресХранилищаРезультата) Экспорт
	
	Письма = ЗагрузкаПочтовыхСообщений.ПрочитатьПисьма(НастройкиЧтенияПочты);
	
	Если Письма = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АдресаXMLФайлов = Новый Массив;
	
	Для Каждого Письмо ИЗ Письма Цикл
		Для Каждого Вложение ИЗ Письмо.Вложения Цикл
			Если НЕ ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(Вложение.Ключ) = "xml" Тогда
				Продолжить;
			КонецЕсли;
			АдресВХранилище = ПоместитьВоВременноеХранилище(Вложение.Значение, Новый УникальныйИдентификатор);
			АдресаXMLФайлов.Добавить(АдресВХранилище);
		КонецЦикла;
	КонецЦикла;
	
	ДанныеКарточек = Справочники.Контрагенты.РазобратьКарточкиКонтрагентовXML(АдресаXMLФайлов);
	ПоместитьВоВременноеХранилище(ДанныеКарточек, АдресХранилищаРезультата);
	
КонецПроцедуры

Процедура ПрочитатьДокументы(НастройкиЧтенияПочты, АдресХранилищаРезультата) Экспорт
	
	ВариантЗагрузкиЭД = НастройкиЧтенияПочты.ВариантЗагрузкиЭД;
	Письма = ЗагрузкаПочтовыхСообщений.ПрочитатьПисьма(НастройкиЧтенияПочты);
	
	Если Письма = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	АдресаXMLФайлов = Новый Массив;
	
	Для Каждого Письмо ИЗ Письма Цикл
		
		Для Каждого Вложение ИЗ Письмо.Вложения Цикл
			
			РасширениеИмениФайла = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(Вложение.Ключ);			
			ФайлОбрабатывать = Ложь;
			Если РасширениеИмениФайла = "xlsx" Или РасширениеИмениФайла = "mxl" Тогда
				
				ПараметрыДанных = Новый Структура;
				ИмяВременногоФайла = ПолучитьИмяВременногоФайла(РасширениеИмениФайла);				
				Вложение.Значение.Записать(ИмяВременногоФайла);
				ПараметрыДанных.Вставить("ИмяВременногоФайла", ИмяВременногоФайла);
				ПараметрыДанных.Вставить("Расширение", РасширениеИмениФайла);				
				АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
				ЭлектронноеВзаимодействиеБП.ПолучитьДанныеВФорматеБЭД(ПараметрыДанных, АдресХранилища);
				ПолученныеДанные = ПолучитьИзВременногоХранилища(АдресХранилища);				
				Если ПолученныеДанные.Свойство("ТекстОшибки") Тогда
					Продолжить;
				КонецЕсли;
				ПолученныеДанные.Вставить("РасширениеФайла", РасширениеИмениФайла);
				ПолученныеДанные.Вставить("ФайлТабличногоДокумента", Вложение.Значение);
				ФайлОбрабатывать = Истина;
				
			ИначеЕсли РасширениеИмениФайла = "zip" Тогда	
				
				ПолученныеДанные = Новый Структура;
				ПолученныеДанные.Вставить("ДвоичныеДанные", Вложение.Значение);
				ПолученныеДанные.Вставить("РасширениеФайла", РасширениеИмениФайла);				
				ФайлОбрабатывать = Истина;
				
			КонецЕсли;			
			Если ФайлОбрабатывать Тогда
				
				АдресВХранилище = ПоместитьВоВременноеХранилище(ПолученныеДанные, Новый УникальныйИдентификатор);
				АдресаXMLФайлов.Добавить(АдресВХранилище);						
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если ВариантЗагрузкиЭД = Перечисления.ВариантыЗагрузкиЭД.СчетНаОплату Тогда
		ДанныеДокументов = Документы.СчетНаОплатуПокупателю.РазобратьСчетаНаОплатуПокупателюXML(АдресаXMLФайлов);
	ИначеЕсли ВариантЗагрузкиЭД = Перечисления.ВариантыЗагрузкиЭД.РеализацияТоваровИУслуг Тогда
		ДанныеДокументов = Документы.РеализацияТоваровУслуг.РазобратьРеализациюТоваровИУслугВXML(АдресаXMLФайлов);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ДанныеДокументов, АдресХранилищаРезультата);
	
КонецПроцедуры

Процедура ДополнитьСтруктуруРеквизитовСчета(СтруктураРеквизитов, ЕстьОшибки) Экспорт
	
	Запрос = Новый Запрос;
	Если ЗначениеЗаполнено(СтруктураРеквизитов.РеквизитыКонтрагента.КПП) Тогда
		КПП = СтруктураРеквизитов.РеквизитыКонтрагента.КПП;
	Иначе
		КПП = "";
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ИНН", СтруктураРеквизитов.РеквизитыКонтрагента.ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ИНН = &ИНН
	|	И Контрагенты.КПП = &КПП";
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	Если РезультатЗапроса.Следующий() Тогда
		СтруктураРеквизитов.Вставить("Контрагент", РезультатЗапроса.Ссылка);
	Иначе
		СоздатьКонтрагента(СтруктураРеквизитов, ЕстьОшибки);
	КонецЕсли;
	
	Если Не ЕстьОшибки Тогда
		БанковскийСчетКонтрагента = Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета",
			СтруктураРеквизитов.РеквизитыКонтрагента.НомерСчета, , СтруктураРеквизитов.Контрагент);
		
		Если ЗначениеЗаполнено(БанковскийСчетКонтрагента) Тогда
			СтруктураРеквизитов.Вставить("СчетКонтрагента", БанковскийСчетКонтрагента);
		Иначе
			СоздатьБанковскийСчетКонтрагента(СтруктураРеквизитов, ЕстьОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЕстьОшибки Тогда
		ЗафиксироватьТранзакцию();
		СтруктураРеквизитов.Вставить("СуммаДокумента"   , СтруктураРеквизитов.ШапкаДокумента.СуммаДокумента);
		СтруктураРеквизитов.Вставить("СуммаНДС"         , СтруктураРеквизитов.ШапкаДокумента.СуммаНДС);
		СтруктураРеквизитов.Вставить("СтавкаНДС"        , СтруктураРеквизитов.ШапкаДокумента.СтавкаНДС);
		СтруктураРеквизитов.Вставить("НазначениеПлатежа", СтруктураРеквизитов.ШапкаДокумента.НазначениеПлатежа);
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;
	
КонецПроцедуры

Процедура СоздатьКонтрагента(СтруктураРеквизитов, ЕстьОшибки)
	
	РеквизитыКонтрагента = СтруктураРеквизитов.РеквизитыКонтрагента;
	РеквизитыКонтрагента.Вставить("ЭтоЭлектронныйДокумент", Истина);
	Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
	Контрагент.Заполнить(РеквизитыКонтрагента);
	
	Попытка
		Контрагент.Записать();
		СтруктураРеквизитов.Вставить("Контрагент", Контрагент.Ссылка);
	Исключение
		ЕстьОшибки = Истина;
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Запись нового элемента справочника Контрагенты'"),
			УровеньЖурналаРегистрации.Ошибка,
			Контрагент.Метаданные(),
			Контрагент,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ТекстОшибки = НСтр("ru = 'Ошибка при записи нового элемента справочника Контрагенты
			|Подробности см. в Журнале регистрации.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

Процедура СоздатьБанковскийСчетКонтрагента(СтруктураРеквизитов, ЕстьОшибки)
	
	Банки = Справочники.Банки.ПолучитьТаблицуБанковПоРеквизитам("Код", СтруктураРеквизитов.РеквизитыКонтрагента.БИК);
	Если Банки.Количество() = 0 Тогда
		ЕстьОшибки = Истина;
		ШаблонСообщения = НСтр("ru='Загрузка прервана. БИК %1 банка контрагента не найден в классификаторе банков РФ.'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения,
			СтруктураРеквизитов.РеквизитыКонтрагента.БИК);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	Иначе
		БанкКонтрагента = Банки[0].Ссылка;
	КонецЕсли;
	
	ДанныеРасчетногоСчета = Новый Структура;
	ДанныеРасчетногоСчета.Вставить("ЭтоЭлектронныйДокумент" , Истина);
	ДанныеРасчетногоСчета.Вставить("НомерСчета"             , СтруктураРеквизитов.РеквизитыКонтрагента.НомерСчета);
	ДанныеРасчетногоСчета.Вставить("Владелец"               , СтруктураРеквизитов.Контрагент);
	ДанныеРасчетногоСчета.Вставить("Банк"                   , БанкКонтрагента);
	ДанныеРасчетногоСчета.Вставить("ВалютаДенежныхСредств",
		ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
		
	БанковскийСчетКонтрагента = Справочники.БанковскиеСчета.СоздатьЭлемент();
	БанковскийСчетКонтрагента.Заполнить(ДанныеРасчетногоСчета);
	
	Попытка
		БанковскийСчетКонтрагента.Записать();
		СтруктураРеквизитов.Вставить("СчетКонтрагента", БанковскийСчетКонтрагента.Ссылка);
	Исключение
		ЕстьОшибки = Истина;
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Запись нового элемента справочника Банковские счета'"),
			УровеньЖурналаРегистрации.Ошибка,
			БанковскийСчетКонтрагента.Метаданные(),
			БанковскийСчетКонтрагента,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ТекстОшибки = НСтр("ru = 'Ошибка при записи нового элемента справочника Банковские счета
			|Подробности см. в Журнале регистрации.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

Функция ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке)
	
	Результат = ИнформацияОбОшибке;
	Если ИнформацияОбОшибке <> Неопределено Тогда
		Если ИнформацияОбОшибке.Причина <> Неопределено Тогда
			Результат = ПолучитьИнформациюОбОшибке(ИнформацияОбОшибке.Причина);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли