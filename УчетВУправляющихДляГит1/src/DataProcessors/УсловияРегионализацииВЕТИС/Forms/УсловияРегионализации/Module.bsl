#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.Документ) Тогда
		ВызватьИсключение НСтр("ru='Предусмотрено открытие обработки только из документов.'");
	КонецЕсли;
	
	Документ = Параметры.Документ;
	АдресХраненияУсловияРегионализации = Параметры.АдресХраненияУсловияРегионализации;
	
	Если ЗначениеЗаполнено(Параметры.ВидПродукцииВЕТИС) Тогда
		ОтборПоВидуПродукцииВЕТИС = Параметры.ВидПродукцииВЕТИС;
	КонецЕсли;
	Если ЗначениеЗаполнено(Параметры.НомерУчасткаМаршрута) Тогда
		ОтборПоНомеруУчасткаМаршрута = Параметры.НомерУчасткаМаршрута;
	КонецЕсли;
	Если ЗначениеЗаполнено(ОтборПоНомеруУчасткаМаршрута) И ЗначениеЗаполнено(ОтборПоВидуПродукцииВЕТИС) Тогда
		ЗаголовокОтбора = НСтр("ru = 'Отбор по: Участок маршрута №%1 / %2'");
		ЗаголовокОтбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокОтбора,
			ОтборПоНомеруУчасткаМаршрута, ОтборПоВидуПродукцииВЕТИС);
	ИначеЕсли ЗначениеЗаполнено(ОтборПоНомеруУчасткаМаршрута) Тогда
		ЗаголовокОтбора = НСтр("ru = 'Отбор по: Участок маршрута №%1'");
		ЗаголовокОтбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокОтбора,
			ОтборПоНомеруУчасткаМаршрута);
	ИначеЕсли ЗначениеЗаполнено(ОтборПоВидуПродукцииВЕТИС) Тогда
		ЗаголовокОтбора = НСтр("ru = 'Отбор по: %1'");
		ЗаголовокОтбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокОтбора,
			ОтборПоВидуПродукцииВЕТИС);
	Иначе
		ЗаголовокОтбора = НСтр("ru = 'Отбор не установлен'");
	КонецЕсли;
	Если Параметры.ТолькоПросмотр Тогда
		Элементы.УсловияРегионализацииВыполняются.ТолькоПросмотр = Истина;
	КонецЕсли;
	Элементы.ДекорацияТекстОтбора.Заголовок = ЗаголовокОтбора;
	
	
	ПеречитатьДеревоНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Для каждого СтрокаДерева Из УсловияРегионализации.ПолучитьЭлементы() Цикл
		Элементы.УсловияРегионализации.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Готово(Команда)
	
	ПараметрыВозврата = Новый Структура;
	ПараметрыВозврата.Вставить("РезультатАдрес", ПоместитьУсловияРегионализацииСервер());
	Закрыть(ПараметрыВозврата);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсе(Команда)
	
	УстановитьФлагиДляВсехСтрокНаСервере(1);
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьВсе(Команда)
	
	УстановитьФлагиДляВсехСтрокНаСервере(0);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУсловияРегионализации

&НаКлиенте
Процедура УсловияРегионализацииПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.УсловияРегионализации.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ТекстТекущейСтроки = "";
	ИначеЕсли ТекущиеДанные.ЭтоГруппа Тогда
		ТекстТекущейСтроки = "";
	Иначе
		ТекстТекущейСтроки = ТекущиеДанные.ТекстСтрокиГруппировки;
	КонецЕсли;
	Элементы.ТекстТекущейСтроки.Видимость = ЗначениеЗаполнено(ТекстТекущейСтроки);
КонецПроцедуры

&НаКлиенте
Процедура УсловияРегионализацииВыполняютсяПриИзменении(Элемент)
	ТекущиеДанные = Элементы.УсловияРегионализации.ТекущиеДанные;
	
	Если ТекущиеДанные.Выполняются = 2 Тогда
		ТекущиеДанные.Выполняются = 0;
	КонецЕсли;
	
	ИдентификаторСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	
	ФлагВыполняютсяПриИзмененииНаСервере(ИдентификаторСтроки);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПоместитьУсловияРегионализацииСервер()
	
	// 1. Для того, чтобы понять, выполняются ли условия регионализации в разрезе вида продукции или маршрута,
	// нужно обходить не строки 2ого и 3его уровня, т.к. из-за наличия вариантов выбора не все условия обязательны,
	// но обходить нужно строки 1ого уровня, считывая флаг "Выполняются" на строгое равенство 1 (2 это частичное выполнение).
	// 2. Необходимость полной версии дерева в случае применения отбора:
	// Например, если пользователь открывает форму с отбором по маршруту 1, а вид продукции 1
	// встречается в маршруте 1 и в маршруте 2, то при установке / снятии флага по условию вида продукции
	// флаг должен быть установлен / снят и по маршруту 2, но т.к. строки маршрута 2 отсутствуют в дереве
	// из-за отбора, то значение установлено не будет. Соответственно флаг выполнения условий для маршрута 2
	// потеряет актуальность.
	// Поэтому, при наличии отборов необходимо сохранить полную копию дерева, в которую необходимо
	// при завершении работы перенести измененные значения и актуализировать значения по группам 
	// методом УстановитьФлагВыполненияВверхПоДереву.
	
	Если ЗначениеЗаполнено(ОтборПоВидуПродукцииВЕТИС)
	 ИЛИ ЗначениеЗаполнено(ОтборПоНомеруУчасткаМаршрута) Тогда
	
		ПолнаяВерсияДерева = ПолучитьИзВременногоХранилища(АдресПолнойВерсииДерева);
		
		ИзменениеУсловий = Новый ТаблицаЗначений;
		ИзменениеУсловий.Колонки.Добавить("ВидПродукции", Новый ОписаниеТипов("СправочникСсылка.ПродукцияВЕТИС"));
		ИзменениеУсловий.Колонки.Добавить("УсловиеРегионализации", Новый ОписаниеТипов("СправочникСсылка.УсловияРегионализацииВЕТИС"));
		ИзменениеУсловий.Колонки.Добавить("УсловиеВыполняется", Новый ОписаниеТипов("Булево"));
		
		Для каждого СтрокаВерхнегоУровня Из УсловияРегионализации.ПолучитьЭлементы() Цикл
			Для каждого СтрокаВторогоУровня Из СтрокаВерхнегоУровня.ПолучитьЭлементы() Цикл
				Если СтрокаВторогоУровня.ЭтоГруппа Тогда
					Для каждого СтрокаНижнегоУровня Из СтрокаВторогоУровня.ПолучитьЭлементы() Цикл
						УсловиеВыполняется = СтрокаНижнегоУровня.Выполняются;
						
						Поиск = Новый Структура("УсловиеРегионализации, ВидПродукции");
						ЗаполнитьЗначенияСвойств(Поиск, СтрокаНижнегоУровня);
						НайденныеСтроки = ИзменениеУсловий.НайтиСтроки(Поиск);
						Если НайденныеСтроки.Количество() = 0 Тогда
							НоваяСтрока = ИзменениеУсловий.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНижнегоУровня);
							НоваяСтрока.УсловиеВыполняется = УсловиеВыполняется;
						Иначе
							НайденныеСтроки[0].УсловиеВыполняется = Мин(УсловиеВыполняется, НайденныеСтроки[0].УсловиеВыполняется);
						КонецЕсли;
					КонецЦикла;
				Иначе
					УсловиеВыполняется = СтрокаВторогоУровня.Выполняются;
					
					Поиск = Новый Структура("УсловиеРегионализации, ВидПродукции");
					ЗаполнитьЗначенияСвойств(Поиск, СтрокаВторогоУровня);
					НайденныеСтроки = ИзменениеУсловий.НайтиСтроки(Поиск);
					Если НайденныеСтроки.Количество() = 0 Тогда
						НоваяСтрока = ИзменениеУсловий.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВторогоУровня);
						НоваяСтрока.УсловиеВыполняется = УсловиеВыполняется;
					Иначе
						НайденныеСтроки[0].УсловиеВыполняется = Мин(УсловиеВыполняется, НайденныеСтроки[0].УсловиеВыполняется);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ИзменениеУсловий.Индексы.Добавить("УсловиеРегионализации, ВидПродукции");
		
		// Строки для пересчета флагов. Ключ - строка группа  дерева, значение - значение флага "Выполняются" для любой подчиненной строки.
		СтрокиПересчетаФлагов = Новый Соответствие;
		
		Для каждого СтрокаВерхнегоУровня Из ПолнаяВерсияДерева.Строки Цикл
			СодержитВарианты = Ложь;
			Для каждого СтрокаВторогоУровня Из СтрокаВерхнегоУровня.Строки Цикл
				Если СтрокаВторогоУровня.ЭтоГруппа Тогда
					Для каждого СтрокаНижнегоУровня Из СтрокаВторогоУровня.Строки Цикл
						Поиск = Новый Структура("УсловиеРегионализации, ВидПродукции");
						ЗаполнитьЗначенияСвойств(Поиск, СтрокаНижнегоУровня);
						НайденныеСтроки = ИзменениеУсловий.НайтиСтроки(Поиск);
						Если НайденныеСтроки.Количество() > 0 Тогда
							СтрокаНижнегоУровня.Выполняются = НайденныеСтроки[0].УсловиеВыполняется;
						КонецЕсли;
					КонецЦикла;
					СодержитВарианты = Истина;
					СтрокиПересчетаФлагов.Вставить(СтрокаВторогоУровня, СтрокаВторогоУровня.Строки[0].Выполняются);
				Иначе
					Поиск = Новый Структура("УсловиеРегионализации, ВидПродукции");
					ЗаполнитьЗначенияСвойств(Поиск, СтрокаВторогоУровня);
					НайденныеСтроки = ИзменениеУсловий.НайтиСтроки(Поиск);
					Если НайденныеСтроки.Количество() > 0 Тогда
						СтрокаВторогоУровня.Выполняются = НайденныеСтроки[0].УсловиеВыполняется;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Если НЕ СодержитВарианты Тогда
				СтрокиПересчетаФлагов.Вставить(СтрокаВерхнегоУровня, СтрокаВерхнегоУровня.Строки[0].Выполняются);
			КонецЕсли;
		КонецЦикла;
		
		Для каждого КлючИЗначение Из СтрокиПересчетаФлагов Цикл
			УстановитьФлагВыполненияВверхПоДереву(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		
	Иначе
		
		ПолнаяВерсияДерева = РеквизитФормыВЗначение("УсловияРегионализации", Тип("ДеревоЗначений"));
		
	КонецЕсли;
	
	Регионализация = Новый ТаблицаЗначений;
	Регионализация.Колонки.Добавить("ВидПродукции", Новый ОписаниеТипов("СправочникСсылка.ПродукцияВЕТИС"));
	Регионализация.Колонки.Добавить("УсловиеРегионализации", Новый ОписаниеТипов("СправочникСсылка.УсловияРегионализацииВЕТИС"));
	Регионализация.Колонки.Добавить("Выполняются", Новый ОписаниеТипов("Булево"));
	
	// Соответствия выполнения условий - заполняются только по строкам первого уровня, т.к. учитывают варианты выполнения условий.
	ВыполнениеУсловийПоВидамПродукции = Новый Соответствие; // Ключ - вид продукции, значение - флаг выполнения всех обязательных условий (учитывая варианты условий).
	ВыполнениеУсловийПоНомерамМаршрутов = Новый Соответствие; // Ключ - номер маршрута, значение - флаг выполнения всех обязательных условий (учитывая варианты условий).
	
	Для каждого СтрокаВерхнегоУровня Из ПолнаяВерсияДерева.Строки Цикл
		// Строгое сравнение на равенство, т.к. 2 - частичное выполнение обязательных условий
		ВсеОбязательныеУсловияВыполнены = (СтрокаВерхнегоУровня.Выполняются = 1);
		
		ПредыдущееЗначениеФлага = ВыполнениеУсловийПоВидамПродукции.Получить(СтрокаВерхнегоУровня.ВидПродукции);
		Если НЕ ПредыдущееЗначениеФлага = Неопределено Тогда
			ЗначениеФлагаУстановить = Мин(ВсеОбязательныеУсловияВыполнены, ПредыдущееЗначениеФлага);
		Иначе
			ЗначениеФлагаУстановить = ВсеОбязательныеУсловияВыполнены;
		КонецЕсли;
		ВыполнениеУсловийПоВидамПродукции.Вставить(СтрокаВерхнегоУровня.ВидПродукции, ЗначениеФлагаУстановить);
		
		Для каждого ЭлементСписка Из СтрокаВерхнегоУровня.НомераУчастковМаршрута Цикл
			НомерМаршрута = ЭлементСписка.Значение;
			
			ПредыдущееЗначениеФлага = ВыполнениеУсловийПоНомерамМаршрутов.Получить(НомерМаршрута);
			Если НЕ ПредыдущееЗначениеФлага = Неопределено Тогда
				ЗначениеФлагаУстановить = Мин(ВсеОбязательныеУсловияВыполнены, ПредыдущееЗначениеФлага);
			Иначе
				ЗначениеФлагаУстановить = ВсеОбязательныеУсловияВыполнены;
			КонецЕсли;
			ВыполнениеУсловийПоНомерамМаршрутов.Вставить(НомерМаршрута, ЗначениеФлагаУстановить);
		КонецЦикла; 
		
		Для каждого СтрокаВторогоУровня Из СтрокаВерхнегоУровня.Строки Цикл
			Если СтрокаВторогоУровня.ЭтоГруппа Тогда
				Для каждого СтрокаНижнегоУровня Из СтрокаВторогоУровня.Строки Цикл
					НоваяСтрока = Регионализация.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаНижнегоУровня);
				КонецЦикла;
			Иначе
				НоваяСтрока = Регионализация.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВторогоУровня);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регионализация", Регионализация);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Регионализация.ВидПродукции КАК ВидПродукции,
	|	Регионализация.УсловиеРегионализации КАК УсловиеРегионализации,
	|	Регионализация.Выполняются КАК УсловиеВыполняется
	|ПОМЕСТИТЬ Регионализация
	|ИЗ
	|	&Регионализация КАК Регионализация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Регионализация.ВидПродукции КАК ВидПродукции,
	|	Регионализация.УсловиеРегионализации КАК УсловиеРегионализации,
	|	МИНИМУМ(Регионализация.УсловиеВыполняется) КАК УсловиеВыполняется
	|ИЗ
	|	Регионализация КАК Регионализация
	|
	|СГРУППИРОВАТЬ ПО
	|	Регионализация.ВидПродукции,
	|	Регионализация.УсловиеРегионализации";
	
	Результат = Новый Структура("Регионализация, ВыполнениеУсловийПоВидамПродукции, ВыполнениеУсловийПоНомерамМаршрутов");
	Результат.Регионализация = Запрос.Выполнить().Выгрузить();
	Результат.ВыполнениеУсловийПоВидамПродукции   = ВыполнениеУсловийПоВидамПродукции;
	Результат.ВыполнениеУсловийПоНомерамМаршрутов = ВыполнениеУсловийПоНомерамМаршрутов;
	
	Возврат ПоместитьВоВременноеХранилище(Результат, АдресХраненияУсловияРегионализации);
КонецФункции

&НаСервере
Процедура ПеречитатьДеревоНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Документ", Документ);
	Запрос.УстановитьПараметр("ТипСообщенияИсходящий", Перечисления.ТипыЗапросовИС.Входящий);
	Запрос.УстановитьПараметр("ОперацияВЕТИС", Перечисления.ВидыОперацийВЕТИС.ОтветНаЗапросВозможностиПеревозкиПартииВРамкахРегионализации);
	Запрос.Текст = "ВЫБРАТЬ
	|	ВЕТИСПрисоединенныеФайлы.Ссылка КАК Ссылка,
	|	ВЕТИСПрисоединенныеФайлы.Документ КАК Документ,
	|	ВЕТИСПрисоединенныеФайлы.ИдентификаторЗапроса КАК ИдентификаторЗапроса,
	|	ВЕТИСПрисоединенныеФайлы.ТипСообщения КАК ТипСообщения,
	|	ВЕТИСПрисоединенныеФайлы.ДатаСоздания КАК ДатаСоздания
	|ИЗ
	|	Справочник.ВЕТИСПрисоединенныеФайлы КАК ВЕТИСПрисоединенныеФайлы
	|ГДЕ
	|	ВЕТИСПрисоединенныеФайлы.Документ = &Документ
	|	И ВЕТИСПрисоединенныеФайлы.ТипСообщения = &ТипСообщенияИсходящий
	|	И ВЕТИСПрисоединенныеФайлы.Операция = &ОперацияВЕТИС
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВЕТИСПрисоединенныеФайлы.ДатаСоздания УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если НЕ Выборка.Следующий() Тогда
		ТекстСообщения = НСтр("ru = 'По выбранному документу нет файла ответа!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	Иначе
		ПрисоединенныйФайлВЕТИС = Выборка.Ссылка;
	КонецЕсли;
	
	ВыполнениеУсловий = ПолучитьИзВременногоХранилища(АдресХраненияУсловияРегионализации);
	ВыполнениеУсловий.Индексы.Добавить("УсловиеРегионализации, ВидПродукции");
	
	ТекстВходящегоСообщенияXML = ИнтеграцияИС.ТекстСообщенияXMLИзПротокола(ПрисоединенныйФайлВЕТИС);
	ПространствоИмен = Метаданные.ПакетыXDTO.ApplicationsВЕТИС.ПространствоИмен;
	ИмяТипа = "checkShipmentRegionalizationResponse";
	
	ВозвращаемоеЗначение = Новый Структура;
	ВозвращаемоеЗначение.Вставить("Результат",         Неопределено);
	ВозвращаемоеЗначение.Вставить("ТекстОшибки",       "");
	ВозвращаемоеЗначение.Вставить("ТекстСообщенияXML", ТекстВходящегоСообщенияXML);
	ВозвращаемоеЗначение.Вставить("СтатусОбработки",   Неопределено);
	
	ПараметрыОбмена = ИнтеграцияВЕТИС.ПараметрыОбмена();
	ТекстВложенногоСообщенияXML = ИнтеграцияВЕТИС.ПолучитьЗначениеИзДокументаDOMПоИмениПоля(
		ТекстВходящегоСообщенияXML, ИмяТипа, ТекстВходящегоСообщенияXML);
	
	ВложенныйОбъектXDTO = ИнтеграцияВЕТИС.ПрочитатьОбъект(
		ТекстВложенногоСообщенияXML,
		ПространствоИмен,
		ИмяТипа, "",
		ВозвращаемоеЗначение);
	
	ПараметрыОбмена.ПараметрыПреобразования = ИнтеграцияВЕТИС.ПараметрыПреобразования();
	РезультатЧтения = ИнтеграцияИС.ОбъектXDTOВСтруктуру(
		ВложенныйОбъектXDTO,
		ПараметрыОбмена.ПараметрыПреобразования);
	
	ИнтеграцияВЕТИС.СсылкиПоИдентификаторам(
		ПараметрыОбмена.ПараметрыПреобразования.Идентификаторы,
		ПараметрыОбмена.ПараметрыПреобразования.НайденныеСсылки);
	
	// Соответствие идентификаторов вариантов условий, где значение - идентификатор варианта группы условий,
	// а ключ - строка идентификаторов условий, входящих в группу, упорядоченных перед конкатенацией строк.
	ИдентификаторыВариантовУсловий = Новый Соответствие; 
	
	Дерево = РеквизитФормыВЗначение("УсловияРегионализации", Тип("ДеревоЗначений"));
	Дерево.Колонки.Добавить("КлючИдентификаторовГрупп", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(0,ДопустимаяДлина.Переменная)));
	Дерево.Колонки.Добавить("ПредставлениеДляСортировки", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(0,ДопустимаяДлина.Переменная)));
	Дерево.Строки.Очистить();
	
	Попытка
		
		r13nRouteSection = РезультатЧтения.r13nRouteSection;
		Если ТипЗнч(r13nRouteSection) = Тип("Массив") Тогда
			Массивr13nRouteSection = r13nRouteSection;
		Иначе
			Массивr13nRouteSection = Новый Массив;
			Массивr13nRouteSection.Добавить(Массивr13nRouteSection);
		КонецЕсли;
		
		Для каждого checkSRR из Массивr13nRouteSection Цикл
			
			НомерМаршрута = checkSRR.sqnId;
			
			Для каждого ДанныеМаршрута Из checkSRR.appliedR13nRule Цикл
			
				СтатусРазрешения = Число(ДанныеМаршрута.decision);
				СтатусРазрешения = ИнтеграцияВЕТИСПовтИсп.РезультатПроверкиПравилРегионализации(СтатусРазрешения);
				
				ВидыПродукцииПоМаршруту = Новый Массив;
				
				Если ТипЗнч(ДанныеМаршрута.cargoType) = Тип("Массив") Тогда
					ДанныеОВидахПродукции = ДанныеМаршрута.cargoType;
				Иначе
					ДанныеОВидахПродукции = Новый Массив;
					ДанныеОВидахПродукции.Добавить(ДанныеМаршрута.cargoType);
				КонецЕсли;
				Для каждого ДанныеВидаПродукции Из ДанныеОВидахПродукции Цикл
					ВидПродукции = ИнтеграцияВЕТИС.Продукция(ДанныеВидаПродукции.guid,, ПараметрыОбмена);
					ВидыПродукцииПоМаршруту.Добавить(ВидПродукции);
				КонецЦикла;
				
				Для каждого ВидПродукции Из ВидыПродукцииПоМаршруту Цикл
				
					Если СтатусРазрешения = Перечисления.РезультатыПроверкиПравилРегионализации.ПеремещениеРазрешено
					 ИЛИ СтатусРазрешения = Перечисления.РезультатыПроверкиПравилРегионализации.ПеремещениеЗапрещено Тогда
						// Для данных статусов заболевания и условия регионализации не указываются
						
						Продолжить; // Выводим только строки с условиям регионализации.
						
					Иначе
						
						Если ТипЗнч(ДанныеМаршрута.requirement) = Тип("ОбъектXDTO") Тогда
							МассивRequirement = Новый Массив;
							МассивRequirement.Добавить(ДанныеМаршрута.requirement);
						Иначе
							МассивRequirement = ДанныеМаршрута.requirement;
						КонецЕсли;
						
						Для каждого requirement Из МассивRequirement Цикл
							
							Заболевание = ИнтеграцияВЕТИС.Заболевание(requirement.relatedDisease.guid, ПараметрыОбмена);
							
							Если ТипЗнч(requirement.conditionGroup) = Тип("ОбъектXDTO") Тогда
								МассивConditionGroup = Новый Массив;
								МассивConditionGroup.Добавить(requirement.conditionGroup);
							Иначе
								МассивConditionGroup = requirement.conditionGroup;
							КонецЕсли;
							
							УпорядоченныеИдентификаторыГрупп = Новый СписокЗначений;
							Для каждого conditionGroup Из МассивConditionGroup Цикл
								
								Если ТипЗнч(conditionGroup.condition) = Тип("ОбъектXDTO") Тогда
									МассивCondition = Новый Массив;
									МассивCondition.Добавить(conditionGroup.condition);
								Иначе
									МассивCondition = conditionGroup.condition;
								КонецЕсли;
								
								// Получаем идентификатор группы по всем условиям, входящим в группу
								ИдентификаторГруппы = ИдентификаторГруппыУсловий(МассивCondition, ИдентификаторыВариантовУсловий);
								УпорядоченныеИдентификаторыГрупп.Добавить(ИдентификаторГруппы, Строка(ИдентификаторГруппы));
								
							КонецЦикла;
							УпорядоченныеИдентификаторыГрупп.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
							КлючИдентификаторовГрупп = СтрСоединить(УпорядоченныеИдентификаторыГрупп.ВыгрузитьЗначения(), "");
							
							СтрокаВерхнегоУровня = СтрокаВерхнегоУровняДерева(Дерево, ВидПродукции, Заболевание, СтатусРазрешения, КлючИдентификаторовГрупп, НомерМаршрута);
							
							
							Для каждого conditionGroup Из МассивConditionGroup Цикл
							
								Если ТипЗнч(conditionGroup.condition) = Тип("ОбъектXDTO") Тогда
									МассивCondition = Новый Массив;
									МассивCondition.Добавить(conditionGroup.condition);
								Иначе
									МассивCondition = conditionGroup.condition;
								КонецЕсли;
								
								СтрокиУсловийДобавленыРанее = Ложь; // Если группа варианта условий добавлена для другого участка маршрута.
								
								Если МассивConditionGroup.Количество() = 1 Тогда
									// Условия регионализации не делятся на варианты и должны быть приняты все сразу
									Родитель = СтрокаВерхнегоУровня;
								Иначе
									// Условия регионализации делятся на варианты. Могут быть приняты условия одного или нескольких вариантов.
									
									// Для вида продукции и заболевания состав условий уникален и не зависит от номера маршрута
									// Но последовательность вариантов условий и условий в них может быть разным в разных маршрутах
									
									
									ИдентификаторГруппы = ИдентификаторГруппыУсловий(МассивCondition, ИдентификаторыВариантовУсловий);
									
									ПоискГруппУсловий = Новый Структура("ИдентификаторВариантаУсловия, ЭтоГруппа", ИдентификаторГруппы, Истина);
									
									Родитель = Неопределено;
									НайденныеСтроки = СтрокаВерхнегоУровня.Строки.НайтиСтроки(ПоискГруппУсловий);
									Если НайденныеСтроки.Количество() > 0 Тогда
										Родитель = НайденныеСтроки[0];
										СтрокиУсловийДобавленыРанее = Истина;
									КонецЕсли;
									
									Если Родитель = Неопределено Тогда
										Родитель = СтрокаВерхнегоУровня.Строки.Добавить();
										ЗаполнитьЗначенияСвойств(Родитель, СтрокаВерхнегоУровня, "Заболевание, ВидПродукции, СтатусРазрешения");
										Родитель.ЭтоГруппа = Истина;
										Родитель.ИндексКартинки = 1;
										Родитель.ИдентификаторВариантаУсловия = ИдентификаторГруппы;
									КонецЕсли;
								КонецЕсли;
								
								Если НЕ СтрокиУсловийДобавленыРанее Тогда
									Для каждого condition из МассивCondition Цикл
										
										Если condition.guid = Неопределено Тогда
											Продолжить;
										КонецЕсли;
										
										ЗаболеванияУсловияРегионализации = Новый Массив;
										Для каждого ЗаболеванияПоУсловию Из condition.relatedDisease Цикл
											ЗаболеваниеУсловия = ИнтеграцияВЕТИС.Заболевание(ЗаболеванияПоУсловию.guid, ПараметрыОбмена);
											ЗаболеванияУсловияРегионализации.Добавить(ЗаболеваниеУсловия);
										КонецЦикла; 
										ОбязательностьУсловия = condition.strict;
										Если ОбязательностьУсловия = Неопределено Тогда
											ОбязательностьУсловия = Истина;
										КонецЕсли;
										УсловиеРегионализации = ИнтеграцияВЕТИС.УсловиеРегионализации(
											condition.guid, ПараметрыОбмена, condition.text, ОбязательностьУсловия, ЗаболеванияУсловияРегионализации);
											
										СтрокаУсловияРегионализации = СтрокаУсловия(Родитель, condition, УсловиеРегионализации);
										
										СтрокаУсловияРегионализации.УсловиеОбязательно = ОбязательностьУсловия;
										
										ПоискВыполненныхУсловий = Новый Структура("УсловиеРегионализации, ВидПродукции", УсловиеРегионализации, ВидПродукции);
										УсловиеВыполняется = Ложь;
										СтрокиВыполненияУсловий = ВыполнениеУсловий.НайтиСтроки(ПоискВыполненныхУсловий);
										Если СтрокиВыполненияУсловий.Количество() > 0 Тогда
											УсловиеВыполняется = СтрокиВыполненияУсловий[0].УсловиеВыполняется;
										КонецЕсли;
										СтрокаУсловияРегионализации.Выполняются = УсловиеВыполняется;
										
									КонецЦикла;
								КонецЕсли;
							
							КонецЦикла; 
							
						КонецЦикла;
						
					КонецЕсли;
				
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка при разборе файла ответа по причине: %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения, ОписаниеОшибки());
			
		КодЯзыка = Метаданные.ОсновнойЯзык.КодЯзыка;
		ЗаписьЖурналаРегистрации(
			НСтр("ru='Регионализация ВетИС'", КодЯзыка),
			УровеньЖурналаРегистрации.Ошибка,
			,, ТекстСообщения);
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		Возврат;
	КонецПопытки;
	
	
	ПредставленияСсылок = ПредставленияНайденныхСсылок(ПараметрыОбмена);
	
	Для каждого СтрокаВерхнегоУровня Из Дерево.Строки Цикл
		СтрокаВерхнегоУровня.НомераУчастковМаршрута.СортироватьПоЗначению();
		
		ТекстСтрокиСортировки = НСтр("ru = '%1 (%2)'");
		Если СтрокаВерхнегоУровня.НомераУчастковМаршрута.Количество() = 1 Тогда
			ТекстСтрокиГруппировки = НСтр("ru = '%1 (пункт %2)'");
		Иначе
			ТекстСтрокиГруппировки = НСтр("ru = '%1 (пункты %2)'");
		КонецЕсли;
		ПродукцияЗаболевание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1, %2'"),
			ПредставленияСсылок.Получить(СтрокаВерхнегоУровня.ВидПродукции),
			ПредставленияСсылок.Получить(СтрокаВерхнегоУровня.Заболевание));
		
		ЧастиСтроки = Новый Массив;
		Для каждого ЭлементСписка Из СтрокаВерхнегоУровня.НомераУчастковМаршрута Цикл
			ЧастиСтроки.Добавить(Формат(ЭлементСписка.Значение, "ЧН=0"));
		КонецЦикла;
		
		СтрокаВерхнегоУровня.ТекстСтрокиГруппировки     = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСтрокиГруппировки,
			ПродукцияЗаболевание,
			СтрСоединить(ЧастиСтроки, ", "));
			
		СтрокаВерхнегоУровня.ПредставлениеДляСортировки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСтрокиСортировки,
			ПродукцияЗаболевание,
			СтрСоединить(ЧастиСтроки, ", "));
			
		НумераторВариантов = 0;
		
		// Обходим строки дерева и устанавливаем флаги выполнения по ранее прочитанным условиям из документа
		Для каждого СтрокаВторогоУровня Из СтрокаВерхнегоУровня.Строки Цикл
			Если СтрокаВторогоУровня.ЭтоГруппа Тогда
				НумераторВариантов = НумераторВариантов + 1;
				СтрокаВторогоУровня.ТекстСтрокиГруппировки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Вариант №%1'"),
					НумераторВариантов);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Дерево.Строки.Сортировать("ПредставлениеДляСортировки");
	
	Если ЗначениеЗаполнено(ОтборПоВидуПродукцииВЕТИС)
	 ИЛИ ЗначениеЗаполнено(ОтборПоНомеруУчасткаМаршрута) Тогда
		// Полное описание назначения полной версии см. в методе ПоместитьУсловияРегионализацииСервер
		ДеревоПолнаяВерсия = Дерево.Скопировать();
		АдресПолнойВерсииДерева = ПоместитьВоВременноеХранилище(ДеревоПолнаяВерсия, УникальныйИдентификатор);
	КонецЕсли;
	
	// Т.к. выполнение условий регионализации хранится в документе в разрезе условий и видов продукции,
	// то отметка выполнения условия, относящегося к одному маршруту, влияет и на другой маршрут.
	// Поэтому отбор по номерам маршрутов выполняется после построения дерева.
	Если ЗначениеЗаполнено(ОтборПоНомеруУчасткаМаршрута)
	 ИЛИ ЗначениеЗаполнено(ОтборПоВидуПродукцииВЕТИС) Тогда
		КоличествоСтрокДерева = Дерево.Строки.Количество();
		Для ТекущийНомерСтрокиДерева = 1 По КоличествоСтрокДерева Цикл
			СтрокаДерева = Дерево.Строки[КоличествоСтрокДерева - ТекущийНомерСтрокиДерева];
			СтрокаСодержитНомерМаршрута = Ложь;
			Если ЗначениеЗаполнено(ОтборПоНомеруУчасткаМаршрута) Тогда
				Для каждого ЭлементСписка Из СтрокаДерева.НомераУчастковМаршрута Цикл
					Если ЭлементСписка.Значение = ОтборПоНомеруУчасткаМаршрута Тогда
						СтрокаСодержитНомерМаршрута = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			Если ЗначениеЗаполнено(ОтборПоНомеруУчасткаМаршрута)
			   И НЕ СтрокаСодержитНомерМаршрута Тогда
				Дерево.Строки.Удалить(СтрокаДерева);
			ИначеЕсли ЗначениеЗаполнено(ОтборПоВидуПродукцииВЕТИС)
				И ОтборПоВидуПродукцииВЕТИС <> СтрокаДерева.ВидПродукции Тогда
				Дерево.Строки.Удалить(СтрокаДерева);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	
	Для каждого СтрокаПервогоУровня Из Дерево.Строки Цикл
		СодержитДетальныеСтроки2Уровня = Ложь;
		Для каждого СтрокаВторогоУровня Из СтрокаПервогоУровня.Строки Цикл
			Если СтрокаВторогоУровня.ЭтоГруппа Тогда
				УстановитьФлагВыполненияВверхПоДереву(СтрокаВторогоУровня, СтрокаВторогоУровня.Строки[0].Выполняются);
			Иначе
				СодержитДетальныеСтроки2Уровня = Истина;
			КонецЕсли;
		КонецЦикла;
		Если СодержитДетальныеСтроки2Уровня Тогда
			УстановитьФлагВыполненияВверхПоДереву(СтрокаПервогоУровня, СтрокаПервогоУровня.Строки[0].Выполняются);
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Дерево, "УсловияРегионализации");
	
	ТаблицаПоискаУсловий = ТаблицаПоискаУсловийПоСтрокамДерева();
	АдресТаблицыПоискаУсловий = ПоместитьВоВременноеХранилище(ТаблицаПоискаУсловий, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция ИдентификаторГруппыУсловий(МассивCondition, ИдентификаторыВариантовУсловий)
	
	УсловияВарианта = Новый СписокЗначений;
	
	Для каждого condition из МассивCondition Цикл
		УсловияВарианта.Добавить(condition.guid, condition.text);
	КонецЦикла;
	УсловияВарианта.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
	КлючГруппыВариантов = СтрСоединить(УсловияВарианта.ВыгрузитьЗначения(), "");
	
	ИдентификаторГруппы = ИдентификаторыВариантовУсловий.Получить(КлючГруппыВариантов);
	Если ИдентификаторГруппы = Неопределено Тогда
		ИдентификаторГруппы = Новый УникальныйИдентификатор;
		ИдентификаторыВариантовУсловий.Вставить(КлючГруппыВариантов, ИдентификаторГруппы);
	КонецЕсли;
	
	Возврат ИдентификаторГруппы;
	
КонецФункции

&НаСервере
Функция КлючПоискаСтрокУсловий()
	Возврат Новый Структура("УсловиеРегионализации, ВидПродукции");
КонецФункции

&НаСервере
Функция ТаблицаПоискаУсловийПоСтрокамДерева()
	
	// Быстрый поиск строк дерева по значениям условие регионализации - вид продукции.
	ТаблицаПоискаУсловий = Новый ТаблицаЗначений;
	ТаблицаПоискаУсловий.Колонки.Добавить("ВидПродукции", Новый ОписаниеТипов("СправочникСсылка.ПродукцияВЕТИС"));
	ТаблицаПоискаУсловий.Колонки.Добавить("УсловиеРегионализации", Новый ОписаниеТипов("СправочникСсылка.УсловияРегионализацииВЕТИС"));
	ТаблицаПоискаУсловий.Колонки.Добавить("НомерСтрокиПервогоУровня", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(5,0,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаПоискаУсловий.Колонки.Добавить("НомерСтрокиВторогоУровня", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(5,0,ДопустимыйЗнак.Неотрицательный)));
	ТаблицаПоискаУсловий.Колонки.Добавить("НомерСтрокиТретьегоУровня", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(5,0,ДопустимыйЗнак.Неотрицательный)));
	
	НомерСтрокиПервогоУровня = 0;
	Для каждого СтрокаПервогоУровня Из УсловияРегионализации.ПолучитьЭлементы() Цикл
		НомерСтрокиПервогоУровня = НомерСтрокиПервогоУровня + 1;
		
		НомерСтрокиВторогоУровня = 0;
		Для каждого СтрокаВторогоУровня Из СтрокаПервогоУровня.ПолучитьЭлементы() Цикл
			НомерСтрокиВторогоУровня = НомерСтрокиВторогоУровня + 1;
			
			Если НЕ СтрокаВторогоУровня.ЭтоГруппа Тогда
				
				НоваяСтрока = ТаблицаПоискаУсловий.Добавить();
				НоваяСтрока.ВидПродукции              = СтрокаВторогоУровня.ВидПродукции;
				НоваяСтрока.УсловиеРегионализации     = СтрокаВторогоУровня.УсловиеРегионализации;
				НоваяСтрока.НомерСтрокиПервогоУровня  = НомерСтрокиПервогоУровня;
				НоваяСтрока.НомерСтрокиВторогоУровня  = НомерСтрокиВторогоУровня;
				НоваяСтрока.НомерСтрокиТретьегоУровня = 0;
				
			Иначе
				
				НомерСтрокиТретьегоУровня = 0;
				Для каждого СтрокаТретьегоУровня Из СтрокаВторогоУровня.ПолучитьЭлементы() Цикл
					НомерСтрокиТретьегоУровня = НомерСтрокиТретьегоУровня + 1;
					
					НоваяСтрока = ТаблицаПоискаУсловий.Добавить();
					НоваяСтрока.ВидПродукции              = СтрокаТретьегоУровня.ВидПродукции;
					НоваяСтрока.УсловиеРегионализации     = СтрокаТретьегоУровня.УсловиеРегионализации;
					НоваяСтрока.НомерСтрокиПервогоУровня  = НомерСтрокиПервогоУровня;
					НоваяСтрока.НомерСтрокиВторогоУровня  = НомерСтрокиВторогоУровня;
					НоваяСтрока.НомерСтрокиТретьегоУровня = НомерСтрокиТретьегоУровня;
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаПоискаУсловий.Индексы.Добавить("УсловиеРегионализации, ВидПродукции");
	
	Возврат ТаблицаПоискаУсловий;
	
КонецФункции

&НаСервере
Функция ПредставленияНайденныхСсылок(ПараметрыОбмена)
	
	// Читаем представления найденных ссылок, формируем строковые представления строк дерева
	ЗапросПоПредставлениямСсылок = Новый Запрос;
	ЗапросПоПредставлениямСсылок.Текст =
	"ВЫБРАТЬ
	|	ПродукцияВЕТИС.Ссылка КАК Ссылка,
	|	ПродукцияВЕТИС.Наименование КАК Представление
	|ИЗ
	|	Справочник.ПродукцияВЕТИС КАК ПродукцияВЕТИС
	|ГДЕ
	|	ПродукцияВЕТИС.Ссылка В(&ПродукцияВЕТИС)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаболеванияВЕТИС.Ссылка,
	|	ЗаболеванияВЕТИС.Наименование
	|ИЗ
	|	Справочник.ЗаболеванияВЕТИС КАК ЗаболеванияВЕТИС
	|ГДЕ
	|	ЗаболеванияВЕТИС.Ссылка В(&ЗаболеванияВЕТИС)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УсловияРегионализацииВЕТИС.Ссылка,
	|	УсловияРегионализацииВЕТИС.НаименованиеПолное
	|ИЗ
	|	Справочник.УсловияРегионализацииВЕТИС КАК УсловияРегионализацииВЕТИС
	|ГДЕ
	|	УсловияРегионализацииВЕТИС.Ссылка В(&УсловияРегионализацииВЕТИС)";
	
	ПродукцияВЕТИССсылки             = Новый Массив;
	ЗаболеванияВЕТИССсылки           = Новый Массив;
	УсловияРегионализацииВЕТИССсылки = Новый Массив;
	
	НайденныеСсылки = ПараметрыОбмена.ПараметрыПреобразования.НайденныеСсылки;
	
	Если НайденныеСсылки.Свойство("ПродукцияВЕТИС") Тогда
		Для каждого КлючИЗначение Из НайденныеСсылки.ПродукцияВЕТИС Цикл
			ПродукцияВЕТИССсылки.Добавить(КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если НайденныеСсылки.Свойство("ЗаболеванияВЕТИС") Тогда
		Для каждого КлючИЗначение Из НайденныеСсылки.ЗаболеванияВЕТИС Цикл
			ЗаболеванияВЕТИССсылки.Добавить(КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Если НайденныеСсылки.Свойство("УсловияРегионализацииВЕТИС") Тогда
		Для каждого КлючИЗначение Из НайденныеСсылки.УсловияРегионализацииВЕТИС Цикл
			УсловияРегионализацииВЕТИССсылки.Добавить(КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ЗапросПоПредставлениямСсылок.УстановитьПараметр("ПродукцияВЕТИС",             ПродукцияВЕТИССсылки);
	ЗапросПоПредставлениямСсылок.УстановитьПараметр("ЗаболеванияВЕТИС",           ЗаболеванияВЕТИССсылки);
	ЗапросПоПредставлениямСсылок.УстановитьПараметр("УсловияРегионализацииВЕТИС", УсловияРегионализацииВЕТИССсылки);
	
	ПредставленияСсылок  = Новый Соответствие;
	ВыборкаПредставлений = ЗапросПоПредставлениямСсылок.Выполнить().Выбрать();
	Пока ВыборкаПредставлений.Следующий() Цикл
		ПредставленияСсылок.Вставить(ВыборкаПредставлений.Ссылка, ВыборкаПредставлений.Представление);
	КонецЦикла;
	
	Возврат ПредставленияСсылок;
	
КонецФункции

&НаСервере
Функция СтрокаВерхнегоУровняДерева(Дерево, ВидПродукции, Заболевание, СтатусРазрешения, КлючИдентификаторовГрупп, НомерМаршрута)
	Поиск = Новый Структура;
	Поиск.Вставить("ВидПродукции",     ВидПродукции);
	Поиск.Вставить("Заболевание",      Заболевание);
	Поиск.Вставить("СтатусРазрешения", СтатусРазрешения);
	Поиск.Вставить("КлючИдентификаторовГрупп", КлючИдентификаторовГрупп);
	
	НайденныеСтроки = Дерево.Строки.НайтиСтроки(Поиск);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		СтрокаДерева = НайденныеСтроки[0];
	Иначе
		СтрокаДерева = Дерево.Строки.Добавить();
		СтрокаДерева.ВидПродукции             = ВидПродукции;
		СтрокаДерева.Заболевание              = Заболевание;
		СтрокаДерева.СтатусРазрешения         = СтатусРазрешения;
		СтрокаДерева.КлючИдентификаторовГрупп = КлючИдентификаторовГрупп;
		СтрокаДерева.ЭтоГруппа                = Истина;
		СтрокаДерева.ИндексКартинки           = 0;
	КонецЕсли;
	Если СтрокаДерева.НомераУчастковМаршрута.НайтиПоЗначению(НомерМаршрута) = Неопределено Тогда
		СтрокаДерева.НомераУчастковМаршрута.Добавить(НомерМаршрута);
	КонецЕсли;
	
	Возврат СтрокаДерева;
КонецФункции

&НаСервере
Функция СтрокаУсловия(Родитель, ЭлементУсловие, УсловиеРегионализации)
	НайденныеСтроки = Родитель.Строки.НайтиСтроки(Новый Структура("УсловиеРегионализации, ЭтоГруппа", УсловиеРегионализации, Ложь));
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		СтрокаУсловия = НайденныеСтроки[0];
	Иначе
		СтрокаУсловия = Родитель.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаУсловия, Родитель, "ВидПродукции, Заболевание, СтатусРазрешения");
		СтрокаУсловия.УсловиеРегионализации = УсловиеРегионализации;
		СтрокаУсловия.ЭтоГруппа = Ложь;
		СтрокаУсловия.ИндексКартинки = 2;
		СтрокаУсловия.ТекстСтрокиГруппировки = ЭлементУсловие.text;
	КонецЕсли;
	
	Возврат СтрокаУсловия;
КонецФункции

&НаСервере
Процедура УстановитьФлагиДляВсехСтрокНаСервере(УстановитьФлаг)
	Для каждого СтрокаПервогоУровня Из УсловияРегионализации.ПолучитьЭлементы() Цикл
		СтрокаПервогоУровня.Выполняются = УстановитьФлаг;
		УстановитьФлагВыполненияВнизПоДереву(СтрокаПервогоУровня, УстановитьФлаг, Неопределено);
	КонецЦикла; 
КонецПроцедуры

&НаСервере
Процедура ФлагВыполняютсяПриИзмененииНаСервере(ИдентификаторСтроки)
	
	ТекущаяСтрокаДерева = УсловияРегионализации.НайтиПоИдентификатору(ИдентификаторСтроки);
	ЗначениеФлага = ТекущаяСтрокаДерева.Выполняются;
	
	ТаблицаПоискаУсловий = ПолучитьИзВременногоХранилища(АдресТаблицыПоискаУсловий);
	
	// Т.к. ищутся подобные строки для строк условий регионализации, и подобным строкам устанавливается тот же флаг,
	// то строк для пересчета вверх по дереву может быть несколько.
	// Для пересчета вверх по дереву достаточно иметь строку-родителя строки с условием регионализации, чтобы избежать
	// множественный пересчет одной и той же родительской строки.
	// В соответствии будем хранить путь к родительской строке
	// СтрокиПересчетаВверхПоДереву - Соответствие, где ключ - строка, путь к строке родителя детальной строки
	// в формате НомерСтроки1Уровень/НомерСтроки2Уровень или НомерСтроки1Уровень - для оптимизации количества получений строк.
	СтрокиПересчетаВверхПоДереву = Новый Соответствие;
	
	ПараметрыКопированияТекущегоЗначения = Новый Структура;
	ПараметрыКопированияТекущегоЗначения.Вставить("СтрокиПересчетаВверхПоДереву", СтрокиПересчетаВверхПоДереву);
	ПараметрыКопированияТекущегоЗначения.Вставить("ТаблицаПоискаУсловий", ТаблицаПоискаУсловий);
	
	// Сначала обходим вниз по дереву, при этом находим строки нижнего уровня, в которых встречаются
	// такие же условия регионализации, не принадлежащие текущей строке.
	УстановитьФлагВыполненияВнизПоДереву(ТекущаяСтрокаДерева, ЗначениеФлага, ПараметрыКопированияТекущегоЗначения);
	
	
	//Потом получаем пути строк родительских строк для пересчета ввер по дереву и пересчитываем
	Для каждого КлючИЗначение Из СтрокиПересчетаВверхПоДереву Цикл
		НомераСтрокПоИерархии = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(КлючИЗначение.Ключ, "/");
		Если НомераСтрокПоИерархии.Количество() = 2 Тогда
			НомерСтрокиПервогоУровня = НомераСтрокПоИерархии[0];
			НомерСтрокиВторогоУровня = НомераСтрокПоИерархии[1];
		Иначе
			НомерСтрокиПервогоУровня = НомераСтрокПоИерархии[0];
			НомерСтрокиВторогоУровня = 0;
		КонецЕсли;
		СтрокаРодителя = СтрокаДерева(НомерСтрокиПервогоУровня, НомерСтрокиВторогоУровня, 0);
		
		УстановитьФлагВыполненияВверхПоДереву(СтрокаРодителя, КлючИЗначение.Значение);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФлагВыполненияВнизПоДереву(ТекущаяСтрока, ЗначениеФлага, ПараметрыКопированияТекущегоЗначения = Неопределено)
	
	Если ТекущаяСтрока.ЭтоГруппа Тогда
		ПодчиненныеСтроки = ТекущаяСтрока.ПолучитьЭлементы();
		Для каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
			ПодчиненнаяСтрока.Выполняются = ЗначениеФлага;
			УстановитьФлагВыполненияВнизПоДереву(ПодчиненнаяСтрока, ЗначениеФлага, ПараметрыКопированияТекущегоЗначения);
		КонецЦикла;
	Иначе
		Если ПараметрыКопированияТекущегоЗначения = Неопределено Тогда
			ТекущаяСтрока.Выполняются = ЗначениеФлага;
		Иначе
			КлючПоиска = КлючПоискаСтрокУсловий();
			ЗаполнитьЗначенияСвойств(КлючПоиска, ТекущаяСтрока);
			НайденныеСтроки = ПараметрыКопированияТекущегоЗначения.ТаблицаПоискаУсловий.НайтиСтроки(КлючПоиска);
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрокаДерева = СтрокаДерева(НайденнаяСтрока.НомерСтрокиПервогоУровня, НайденнаяСтрока.НомерСтрокиВторогоУровня, НайденнаяСтрока.НомерСтрокиТретьегоУровня);
				НайденнаяСтрокаДерева.Выполняются = ЗначениеФлага;
				
				Если НайденнаяСтрока.НомерСтрокиТретьегоУровня = 0 Тогда
					ПутьКРодителюСтроки = Формат(НайденнаяСтрока.НомерСтрокиПервогоУровня, "ЧГ=0");
				Иначе
					ПутьКРодителюСтроки = "%1/%2";
					ПутьКРодителюСтроки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						ПутьКРодителюСтроки,
						Формат(НайденнаяСтрока.НомерСтрокиПервогоУровня, "ЧГ=0"),
						Формат(НайденнаяСтрока.НомерСтрокиВторогоУровня, "ЧГ=0"));
				КонецЕсли;
				ПараметрыКопированияТекущегоЗначения.СтрокиПересчетаВверхПоДереву.Вставить(ПутьКРодителюСтроки, ЗначениеФлага);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФлагВыполненияВверхПоДереву(Родитель, Знач ЗначениеФлага)
	
	Если ТипЗнч(Родитель) = Тип("СтрокаДереваЗначений") Тогда
		ПодчиненныеСтроки = Родитель.Строки;
		ВышестоящаяСтрока = Родитель.Родитель;
	Иначе
		ПодчиненныеСтроки = Родитель.ПолучитьЭлементы();
		ВышестоящаяСтрока = Родитель.ПолучитьРодителя();
	КонецЕсли;
	
	УстановитьФлаг = ЗначениеФлага;
	Если ЗначениеЗаполнено(Родитель.ИдентификаторВариантаУсловия)
	   И ЗначениеФлага <> 2 Тогда
		// Расчет внутри строки варианта.
		Для каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
			Если ПодчиненнаяСтрока.Выполняются <> УстановитьФлаг Тогда
				УстановитьФлаг = 2;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли НЕ ЗначениеЗаполнено(Родитель.ИдентификаторВариантаУсловия) Тогда
		// Расчет внутри строки 1ого уровня
		Для каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
			Если НЕ ПодчиненнаяСтрока.ЭтоГруппа
			   И ПодчиненнаяСтрока.УсловиеОбязательно
			   И ПодчиненнаяСтрока.Выполняются <> УстановитьФлаг Тогда
				УстановитьФлаг = 2;
				Прервать;
			ИначеЕсли ПодчиненнаяСтрока.ЭтоГруппа
				И ПодчиненнаяСтрока.Выполняются = 1 Тогда
				УстановитьФлаг = 1;
			ИначеЕсли ПодчиненнаяСтрока.ЭтоГруппа
				И ПодчиненнаяСтрока.Выполняются <> УстановитьФлаг
				И НЕ УстановитьФлаг = 1 Тогда
				УстановитьФлаг = 2;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Родитель.Выполняются = УстановитьФлаг;
	
	Если НЕ ВышестоящаяСтрока = Неопределено Тогда
		УстановитьФлагВыполненияВверхПоДереву(ВышестоящаяСтрока, УстановитьФлаг);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СтрокаДерева(НомерСтрокиПервогоУровня, НомерСтрокиВторогоУровня, НомерСтрокиТретьегоУровня)
	Если НомерСтрокиВторогоУровня = 0 Тогда
		Строка = УсловияРегионализации.ПолучитьЭлементы()[НомерСтрокиПервогоУровня - 1];
	ИначеЕсли НомерСтрокиТретьегоУровня = 0 Тогда
		Строка = УсловияРегионализации.ПолучитьЭлементы()[НомерСтрокиПервогоУровня - 1].ПолучитьЭлементы()[НомерСтрокиВторогоУровня - 1];
	Иначе
		Строка = УсловияРегионализации.ПолучитьЭлементы()[НомерСтрокиПервогоУровня - 1].ПолучитьЭлементы()[НомерСтрокиВторогоУровня - 1].ПолучитьЭлементы()[НомерСтрокиТретьегоУровня - 1];
	КонецЕсли;
	
	Возврат Строка;
КонецФункции

#КонецОбласти




