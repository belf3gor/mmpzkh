#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Обработки.РегистрацияОрганизации.РазместитьНавигацию(ЭтотОбъект, Параметры);
	
	РезультатСравненияРежимов = НовыйРезультатСравненияРежимов();
	ЗагрузитьПоставляемыеДанные();
	УстановитьПараметрыФормы();
	ПрочитатьСтавкиНалоговИВзносов();
	ПрочитатьПорогиПрименимостиНалоговыхРежимов();
	УправлениеФормойПриСозданииНаСервере();
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	СравнитьРежимыНалогообложения(ЭтотОбъект);
	
	РегистрацияОрганизацииКлиент.ОповеститьОбОткрытии(ЭтотОбъект,
		РегистрацияОрганизацииКлиентСервер.ИмяПомощникаРегистрации(),
		НавигацияНомерШага);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = ЭтотОбъект Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "ОткрытШагПомощника_РегистрацияОрганизации" Тогда
		
		Если Параметр = Неопределено
			Или Параметр.ИмяПомощника <> РегистрацияОрганизацииКлиентСервер.ИмяПомощникаРегистрации()
			Или Параметр.НомерШага <> НавигацияНомерШага Тогда
			Закрыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если ЭтоВыборФормыБизнеса(НавигацияПараметрФормы) ИЛИ ЗначениеЗаполнено(ЮридическоеФизическоеЛицо) Тогда
		Настройки.Удалить("ЮридическоеФизическоеЛицо");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(КодОКВЭД2) И Настройки["КодОКВЭД2"] <> КодОКВЭД2 Тогда
		Настройки.Удалить("КодОКВЭД2");
		Настройки.Удалить("ВидДеятельностиЕНВД");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	СохраненныйРезультат = Настройки["РезультатСравненияРежимов"];
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СохраненныйРезультат);
	
	Для Каждого ИмяСтавки Из СтавкиИзменяемыеПользователем() Цикл
		Если СохраненныйРезультат.Ставки[ИмяСтавки] <> СохраненныйРезультат[ИмяСтавки] Тогда
			РезультатСравненияРежимов[ИмяСтавки] = СохраненныйРезультат[ИмяСтавки];
		КонецЕсли;
	КонецЦикла;
	
	СоотнестиВидДеятельностиОКВЭД2иПСН();
	СоотнестиВидДеятельностиОКВЭД2иЕНВД(Истина);
	СоотнестиВидДеятельностиОКВЭД2иНПД();
	ВидДеятельностиЕНВДПриИзмененииНаСервере(Ложь);
	
	УстановитьПредставлениеВидаДеятельностиОКВЭД2();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНавигационнойСсылки(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигацияПомощниковКлиент.ЭтоНавигационнаяСсылкаШага(НавигационнаяСсылкаФорматированнойСтроки) Тогда
		СохранитьДанныеПомощникаРегистрации();
	КонецЕсли;
	
	РегистрацияОрганизацииКлиент.ОбработатьНавигационнуюСсылку(НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КодРегионаРегистрацииПриИзменении(Элемент)
	
	СравнитьРежимыНалогообложения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеВидаДеятельностиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийКод", КодОКВЭД2);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ВыборВидаДеятельностиОКВЭД2Завершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.ВыборВидаДеятельности", ПараметрыФормы, , , , , ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьПатентаПриИзменении(Элемент)
	
	СравнитьРежимыНалогообложения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьУзнатьСтоимостьПатентаНажатие(Элемент)
	
	ПерейтиПоНавигационнойСсылке("https://patent.nalog.ru/info/");
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДеятельностиЕНВДПриИзменении(Элемент)
	
	ВидДеятельностиЕНВДПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьРегиональныеОсобенностиНалоговОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "УказатьРегиональныеСтавки" Тогда
		СтандартнаяОбработка = Ложь;
		Оповещение = Новый ОписаниеОповещения("УстановкаРегиональныхСтавокЗавершение", ЭтотОбъект);
		ПараметрыФормы = ПараметрыФормыЛьготныеУсловияНалоговыхРежимов();
		ОткрытьФорму("Обработка.СравнениеРежимовНалогообложения.Форма.ФормаСтавкиНалогов",
			ПараметрыФормы, ЭтотОбъект, , , , Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИтогоДоходыПриИзменении(Элемент)
	
	ДоходыОтЮридическихЛиц = ИтогоДоходы;
	ДоходыОтФизическихЛиц = 0;
	
	СравнитьРежимыНалогообложения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоходыОтЮридическихЛицПриИзменении(Элемент)
	
	ИтогоДоходы = ДоходыОтЮридическихЛиц + ДоходыОтФизическихЛиц;
	
	СравнитьРежимыНалогообложения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоходыОтФизическихЛицПриИзменении(Элемент)
	
	ИтогоДоходы = ДоходыОтЮридическихЛиц + ДоходыОтФизическихЛиц;
	
	СравнитьРежимыНалогообложения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыПриИзменении(Элемент)
	
	Если Расходы < ФондОплатыТруда Тогда
		ФондОплатыТруда = Расходы;
	КонецЕсли;
	
	СравнитьРежимыНалогообложения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФондОплатыТрудаПриИзменении(Элемент)
	
	Если ФондОплатыТруда > Расходы Тогда
		ФондОплатыТруда = Расходы;
		ТекстСообщения = НСтр("ru='Зарплата не может превышать расходы'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ФондОплатыТруда");
	КонецЕсли;
	
	СравнитьРежимыНалогообложения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ФизическийПоказательЕНВДПриИзменении(Элемент)
	
	СравнитьРежимыНалогообложения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранРежимОСНОИППриИзменении(Элемент)
	
	ПриИзмененииВыбранногоРежима(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранРежимУСНДоходыИППриИзменении(Элемент)
	
	ПриИзмененииВыбранногоРежима(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранРежимУСНДоходыРасходыИППриИзменении(Элемент)
	
	ПриИзмененииВыбранногоРежима(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранРежимЕНВДИППриИзменении(Элемент)
	
	ПриИзмененииВыбранногоРежима(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныйРежимПСНИППриИзменении(Элемент)
	
	ПриИзмененииВыбранногоРежима(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранныйРежимНПДИППриИзменении(Элемент)
	
	ПриИзмененииВыбранногоРежима(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранРежимОСНООООПриИзменении(Элемент)
	
	ПриИзмененииВыбранногоРежима(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранРежимУСНДоходыОООПриИзменении(Элемент)
	
	ПриИзмененииВыбранногоРежима(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранРежимУСНДоходыРасходыОООПриИзменении(Элемент)
	
	ПриИзмененииВыбранногоРежима(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбранРежимЕНВДОООПриИзменении(Элемент)
	
	ПриИзмененииВыбранногоРежима(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ИтогоКУплатеОСНОИПНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьРасшифровкуРасчетаНалоговойНагрузки("ОСНОИП");
	
КонецПроцедуры

&НаКлиенте
Процедура ИтогоКУплатеУСНДоходыИПНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьРасшифровкуРасчетаНалоговойНагрузки("УСНДоходыИП");
	
КонецПроцедуры

&НаКлиенте
Процедура ИтогоКУплатеУСНДоходыРасходыИПНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьРасшифровкуРасчетаНалоговойНагрузки("УСНДоходыРасходыИП");
	
КонецПроцедуры

&НаКлиенте
Процедура ИтогоКУплатеЕНВДИПНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьРасшифровкуРасчетаНалоговойНагрузки("ЕНВДИП");
	
КонецПроцедуры

&НаКлиенте
Процедура ИтогоКУплатеПСНИПНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьРасшифровкуРасчетаНалоговойНагрузки("ПСНИП");
	
КонецПроцедуры

&НаКлиенте
Процедура ИтогоКУплатеНПДИПНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьРасшифровкуРасчетаНалоговойНагрузки("НПДИП");
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяНагрузкаОСНОИПОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяНагрузкаУСНДоходыИПОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяНагрузкаУСНДоходыРасходыИПОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяНагрузкаЕНВДИПОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяНагрузкаПСНИПОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяНагрузкаНПДИПОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ИтогоКУплатеОСНООООНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьРасшифровкуРасчетаНалоговойНагрузки("ОСНОООО");
	
КонецПроцедуры

&НаКлиенте
Процедура ИтогоКУплатеУСНДоходыОООНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьРасшифровкуРасчетаНалоговойНагрузки("УСНДоходыООО");
	
КонецПроцедуры

&НаКлиенте
Процедура ИтогоКУплатеУСНДоходыРасходыОООНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьРасшифровкуРасчетаНалоговойНагрузки("УСНДоходыРасходыООО");
	
КонецПроцедуры

&НаКлиенте
Процедура ИтогоКУплатеЕНВДОООНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПоказатьРасшифровкуРасчетаНалоговойНагрузки("ЕНВДООО");
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяНагрузкаОСНОООООчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяНагрузкаУСНДоходыООООчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяНагрузкаУСНДоходыРасходыООООчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура НалоговаяНагрузкаЕНВДООООчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьПоДаннымИнформационннойБазы(Команда)
	
	Если КоличествоОрганизацийДанныеКоторыхДоступныПользователю > 1 Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаполнитьДаннымиИнформационнойБазыЗавершение", ЭтотОбъект);
		ОткрытьФорму("Обработка.СравнениеРежимовНалогообложения.Форма.ФормаВыбораДанныхЗаполнения", ,
			ЭтотОбъект, , , , ОписаниеОповещения);
	Иначе
		ЗаполнитьПоДаннымИнформационннойБазыНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	РегистрацияОрганизацииКлиент.ОткрытьЭтап(НавигацияНомерШага - 1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	Если НЕ ЗначениеЗаполнено(ВыбранныйРежим) Тогда
		ТекстСообщения = НСтр("ru = 'Выберите налоговый режим для продолжения регистрации.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ВыбранныйРежим",);
		Возврат;
	КонецЕсли;
	СохранитьДанныеПомощникаРегистрации();
	РегистрацияОрганизацииКлиент.ОткрытьЭтап(НавигацияНомерШага + 1);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗагрузитьПоставляемыеДанные()
	
	КлассификаторСубъектовРФ = АдресныйКлассификатор.СубъектыРФ();
	ШаблонПредставления = НСтр("ru='%1 %2'"); // например: "Москва г".
	ОписаниеТипаСтрока = Новый ОписаниеТипов("Строка");
	Для Каждого Регион Из КлассификаторСубъектовРФ Цикл
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления,
			Регион.Наименование,
			Регион.Сокращение);
		КодРегиона = ОписаниеТипаСтрока.ПривестиЗначение(Регион.КодСубъектаРФ);
		Если СтрДлина(КодРегиона) = 1 Тогда
			КодРегиона = "0" + КодРегиона;
		КонецЕсли;
		Элементы.КодРегионаРегистрации.СписокВыбора.Добавить(КодРегиона, Представление);
	КонецЦикла;
	
	Элементы.КодРегионаРегистрации.СписокВыбора.СортироватьПоПредставлению();
	
	МакетСоответствияВидовДеятельности =
		Обработки.СравнениеРежимовНалогообложения.ПолучитьМакет("СоответствиеВидовДеятельностиОКВЭД2иЕНВД");
	СтрокаXML = МакетСоответствияВидовДеятельности.ПолучитьТекст();
	СоответствиеВидовДеятельности.Загрузить(ОбщегоНазначения.ЗначениеИзСтрокиXML(СтрокаXML));
	
	МакетКодовОграниченийЕНВД = Обработки.СравнениеРежимовНалогообложения.ПолучитьМакет("КодыОграниченийЕНВД");
	СтрокаXML = МакетКодовОграниченийЕНВД.ПолучитьТекст();
	КодыОграниченийЕНВД.Загрузить(ОбщегоНазначения.ЗначениеИзСтрокиXML(СтрокаXML));
	
	МакетПСН = Обработки.СравнениеРежимовНалогообложения.ПолучитьМакет("СоответствиеВидовДеятельностиОКВЭД2иПСН");
	СтрокаXML = МакетПСН.ПолучитьТекст();
	ВидыДеятельностиПопадающиеПодПСН.Загрузить(ОбщегоНазначения.ЗначениеИзСтрокиXML(СтрокаXML));
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыФормы()
	
	КрасныйЦвет             = ЦветаСтиля.СравнениеРежимовНалогообложенияВысокаяНагрузкаЦвет;
	ЖелтыйЦвет              = ЦветаСтиля.СравнениеРежимовНалогообложенияСредняяНагрузкаЦвет;
	ЗеленыйЦвет             = ЦветаСтиля.СравнениеРежимовНалогообложенияНизкаяНагрузкаЦвет;
	СерыйЦвет               = ЦветаСтиля.СравнениеРежимовНалогообложенияНагрузкаНеРасчитанаЦвет;
	ЦветФонаФормы           = ЦветаСтиля.ЦветФонаФормы;
	ЦветФонаВыбраннойГруппы = ЦветаСтиля.ВыделеннаяКнопкаФон;
	
	НалоговыеРежимы = Новый Структура();
	НалоговыеРежимы.Вставить("ОСНОИП");
	НалоговыеРежимы.Вставить("ОСНОООО");
	НалоговыеРежимы.Вставить("УСНДоходыИП");
	НалоговыеРежимы.Вставить("УСНДоходыООО");
	НалоговыеРежимы.Вставить("УСНДоходыРасходыИП");
	НалоговыеРежимы.Вставить("УСНДоходыРасходыООО");
	НалоговыеРежимы.Вставить("ЕНВДИП");
	НалоговыеРежимы.Вставить("ЕНВДООО");
	НалоговыеРежимы.Вставить("ПСНИП");
	НалоговыеРежимы.Вставить("НПДИП");
	
	ТекущаяДатаПользователя = ОбщегоНазначения.ТекущаяДатаПользователя();
	
	Если ЗначениеЗаполнено(Параметры.ВидОрганизации) Тогда
		ЮридическоеФизическоеЛицо = Параметры.ВидОрганизации;
	КонецЕсли;
	
	ВосстановитьДанныеПомощникаРегистрации();
	
	ДоходыОтЮридическихЛиц = 12000000;
	ДоходыОтФизическихЛиц = 0;
	ИтогоДоходы = ДоходыОтЮридическихЛиц + ДоходыОтФизическихЛиц;
	
	Расходы = 6000000;
	ФизическийПоказательЕНВД = 1;
	Если Не ЗначениеЗаполнено(ЮридическоеФизическоеЛицо)
		Или ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		ФондОплатыТруда = 3000000;
	КонецЕсли;
	
	КоличествоОрганизацийДанныеКоторыхДоступныПользователю = 
		УправлениеДоступомБП.ОрганизацииДанныеКоторыхДоступныПользователю("РегистрБухгалтерии.Хозрасчетный").Количество();
	
КонецПроцедуры

&НаСервере
Процедура СоотнестиВидДеятельностиОКВЭД2иЕНВД(ЭтоЗагрузкаДанныхИзНастроек = Ложь)
	
	ВидыДеятельности = НайтиПодходящиеВидыДеятельности("СоответствиеВидовДеятельности");
	
	Если ВидыДеятельности.Количество() = 1 И ЗначениеЗаполнено(ВидыДеятельности[0].КодЕНВД) Тогда
		ВозможноПрименениеЕНВД = Истина;
		ВидДеятельностиЕНВД    = Справочники.КлассификаторВидовПредпринимательскойДеятельностиЕНВД.НайтиПоКоду(
			ВидыДеятельности[0].КодЕНВД);
		Элементы.ВидДеятельностиЕНВД.СписокВыбора.Очистить();
	ИначеЕсли ВидыДеятельности.Количество() > 1 Тогда
		ВозможноПрименениеЕНВД = Истина;
		Если Не ЭтоЗагрузкаДанныхИзНастроек Тогда
			ВидДеятельностиЕНВД = Справочники.КлассификаторВидовПредпринимательскойДеятельностиЕНВД.ПустаяСсылка();
		КонецЕсли;
		УстановитьСписокВыбораВидовДеятельностиЕНВД(ВидыДеятельности);
	Иначе
		ВозможноПрименениеЕНВД = Ложь;
		ВидДеятельностиЕНВД = Справочники.КлассификаторВидовПредпринимательскойДеятельностиЕНВД.ПустаяСсылка();
		Элементы.ВидДеятельностиЕНВД.СписокВыбора.Очистить();
	КонецЕсли;
	
	РезультатСравненияРежимов.ПоВидуДеятельностиОКВЭД2ВозможноПрименениеЕНВД = ВозможноПрименениеЕНВД;
	
КонецПроцедуры

&НаСервере
Процедура СоотнестиВидДеятельностиОКВЭД2иПСН()
	
	ВидыДеятельности = НайтиПодходящиеВидыДеятельности("ВидыДеятельностиПопадающиеПодПСН");
	РезультатСравненияРежимов.ПоВидуДеятельностиОКВЭД2ВозможноПрименениеПСН = ВидыДеятельности.Количество() > 0
		И ЮридическоеФизическоеЛицо <> Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	
КонецПроцедуры

&НаСервере
Процедура СоотнестиВидДеятельностиОКВЭД2иНПД()
	
	РезультатСравненияРежимов.ПоВидуДеятельностиОКВЭД2ВозможноПрименениеНПД = ПоВидуДеятельностиОКВЭД2ВозможноПрименениеНПД(КодОКВЭД2);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПоВидуДеятельностиОКВЭД2ВозможноПрименениеНПД(Знач КодОКВЭД2)
	
	ВозможноПрименениеНПД = Истина;
	
	Если Не ЗначениеЗаполнено(КодОКВЭД2) Тогда
		Возврат ВозможноПрименениеНПД;
	КонецЕсли;
	
	МакетКодыОграниченийНПД = Обработки.СравнениеРежимовНалогообложения.ПолучитьМакет("ОграничениеВидовДеятельностиНПД");
	ТаблицаОграниченийНПД = ОбщегоНазначения.ЗначениеИзСтрокиXML(МакетКодыОграниченийНПД.ПолучитьТекст());
	
	Для Каждого СтрокаТаблицы Из ТаблицаОграниченийНПД Цикл
		Если СтрНачинаетсяС(СокрЛП(КодОКВЭД2), СокрЛП(СтрокаТаблицы.Код)) Тогда
			ВозможноПрименениеНПД = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВозможноПрименениеНПД;
	
КонецФункции

&НаСервере
Функция НайтиПодходящиеВидыДеятельности(ИмяТаблицы)
	
	Результат = Новый Массив;
	
	Если Не ЗначениеЗаполнено(КодОКВЭД2) Тогда
		Возврат Результат;
	КонецЕсли;
	
	КодПоиска = КодОКВЭД2;
	Пока СтрДлина(КодПоиска) > 4 Цикл
		Отбор = Новый Структура("КодОКВЭД2", КодПоиска);
		Результат = ЭтотОбъект[ИмяТаблицы].НайтиСтроки(Отбор);
		Если Результат.Количество() > 0 Тогда
			Прервать;
		КонецЕсли;
		
		КодПоиска = Лев(КодПоиска, СтрДлина(КодПоиска) - 1);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПрочитатьСтавкиНалоговИВзносов()
	
	ПрочитатьСтавкиНалогов();
	ПрочитатьТарифыСтраховыхВзносов();
	РассчитатьФиксированныеВзносыИП();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьСтавкиНалогов()
	
	СтавкиНалоговПоУмолчанию = Новый Структура;
	
	СтавкаНДС = УчетНДСКлиентСервер.СтавкаНДСПоУмолчанию(ТекущаяДатаПользователя);
	ЗначениеСтавкиНДС = УчетНДСПереопределяемый.ПолучитьСтавкуНДС(СтавкаНДС);
	СтавкиНалоговПоУмолчанию.Вставить("СтавкаНДС", ЗначениеСтавкиНДС);
	РасчетнаяСтавкаНДС = Строка(ЗначениеСтавкиНДС) + "/" + Строка(100 + ЗначениеСтавкиНДС);
	СтавкиНалоговПоУмолчанию.Вставить("РасчетнаяСтавкаНДС", РасчетнаяСтавкаНДС);
	
	СтавкаНалогаНаПрибыльФедеральная =
		РегистрыСведений.НастройкиУчетаНалогаНаПрибыль.ЗначениеПоУмолчаниюФедеральныйБюджет(ТекущаяДатаПользователя);
	СтавкиНалоговПоУмолчанию.Вставить("СтавкаНалогаНаПрибыльФедеральная", СтавкаНалогаНаПрибыльФедеральная);
	СтавкаНалогаНаПрибыльРегиональная =
		РегистрыСведений.НастройкиУчетаНалогаНаПрибыль.ЗначениеПоУмолчаниюРегиональныйБюджет(ТекущаяДатаПользователя);
	СтавкиНалоговПоУмолчанию.Вставить("СтавкаНалогаНаПрибыльРегиональная", СтавкаНалогаНаПрибыльРегиональная);
	СтавкаНалогаНаПрибыль = СтавкиНалоговПоУмолчанию.СтавкаНалогаНаПрибыльФедеральная
		+ СтавкиНалоговПоУмолчанию.СтавкаНалогаНаПрибыльРегиональная;
	СтавкиНалоговПоУмолчанию.Вставить("СтавкаНалогаНаПрибыль", СтавкаНалогаНаПрибыль);
	
	СтавкаНДФЛ = УчетДоходовИРасходовПредпринимателя.НалоговаяСтавка(ТекущаяДатаПользователя) * 100;
	СтавкиНалоговПоУмолчанию.Вставить("СтавкаНДФЛ", СтавкаНДФЛ);
	
	СтавкиУСН = УчетУСНКлиентСервер.НалоговыеСтавкиПоУмолчанию(ТекущаяДатаПользователя);
	СтавкиНалоговПоУмолчанию.Вставить("СтавкаУСНДоходы", СтавкиУСН.СтавкаУСНДоходы);
	СтавкиНалоговПоУмолчанию.Вставить("СтавкаУСНДоходыРасходы", СтавкиУСН.СтавкаУСНДоходыМинусРасходы);
	СтавкиНалоговПоУмолчанию.Вставить("СтавкаМинимальногоНалогаУСНДоходыРасходы",
		СтавкиУСН.СтавкаМинимальногоНалогаУСНДоходыМинусРасходы);
	
	СтавкиНалоговПоУмолчанию.Вставить("СтавкаЕНВД", УчетЕНВДКлиентСервер.НалоговаяСтавкаПоУмолчанию());
	СтавкиНалоговПоУмолчанию.Вставить("К1"        , УчетЕНВДКлиентСервер.КоэффициентДефлятор(ТекущаяДатаПользователя));
	СтавкиНалоговПоУмолчанию.Вставить("К2"        , УчетЕНВДКлиентСервер.КорректирующийКоэффициентПоУмолчанию());
	
	СтавкаПСН = УчетУСНКлиентСервер.НалоговаяСтавкаПоПатентнойСистеме(ТекущаяДатаПользователя) * 100;
	СтавкиНалоговПоУмолчанию.Вставить("СтавкаПСН", СтавкаПСН);
	
	СтавкиНПД = НалогНаПрофессиональныйДоходКлиентСервер.НалоговыеСтавки(ТекущаяДатаПользователя);
	СтавкиНалоговПоУмолчанию.Вставить("СтавкаНПД_ДоходыОтФизЛиц", СтавкиНПД.ДоходыОтФизЛиц);
	СтавкиНалоговПоУмолчанию.Вставить("СтавкаНПД_ДоходыОтЮрЛицИП", СтавкиНПД.ДоходыОтЮрЛицИП);
	
	ЗаполнитьЗначенияСвойств(РезультатСравненияРежимов, СтавкиНалоговПоУмолчанию);
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьПорогиПрименимостиНалоговыхРежимов()
	
	ПорогиПрименимостиРежимов = Новый Структура;
	
	ПорогиПрименимостиРежимов.Вставить("УСНГраницаДоходов",
		КонтрольПраваПримененияСпецрежима.ГраницаДоходовОграничивающаяПравоПримененияУСН(ТекущаяДатаПользователя));
	ПорогиПрименимостиРежимов.Вставить("УСНГраницаСтоимостиОС",
		КонтрольПраваПримененияСпецрежима.ГраницаСтоимостиОсновныхСредствОграничивающаяПравоПримененияУСН(ТекущаяДатаПользователя));
	ПорогиПрименимостиРежимов.Вставить("УСНГраницаРаботников",
		КонтрольПраваПримененияСпецрежима.ГраницаСреднесписочнойЧисленностиРаботниковОграничивающаяПравоПримененияУСН());
	ПорогиПрименимостиРежимов.Вставить("ЕНВДГраницаРаботников",
		КонтрольПраваПримененияСпецрежима.ГраницаСреднесписочнойЧисленностиРаботниковОграничивающаяПравоПримененияЕНВД());
	ПорогиПрименимостиРежимов.Вставить("ПСНГраницаДоходов",
		КонтрольПраваПримененияСпецрежима.ГраницаДоходовОграничивающаяПравоПримененияПСН());
	ПорогиПрименимостиРежимов.Вставить("ПСНГраницаРаботников",
		КонтрольПраваПримененияСпецрежима.ГраницаСреднесписочнойЧисленностиРаботниковОграничивающаяПравоПримененияПатент());
	ПорогиПрименимостиРежимов.Вставить("НПДГраницаДоходов",
		НалогНаПрофессиональныйДоходКлиентСервер.ПределДоходов(ТекущаяДатаПользователя));
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьФиксированныеВзносыИП()
	
	ФиксированныеВзносы = УчетСтраховыхВзносовИП.РассчитатьФиксированныеСтраховыеВзносы(ТекущаяДатаПользователя);
	РезультатСравненияРежимов.ФиксированныеВзносыВПФРИП  = ФиксированныеВзносы.ПФРВсего;
	РезультатСравненияРежимов.ФиксированныеВзносыВФОМСИП = ФиксированныеВзносы.ФФОМСВсего;
	
	ДанныеДляРасчетаВзносовСДоходов = УчетСтраховыхВзносовИП.ДанныеДляРасчетаСтраховыхВзносовСДоходов(ТекущаяДатаПользователя);
	РезультатСравненияРежимов.ПроцентВзносовСДоходовВПФРИП       = ДанныеДляРасчетаВзносовСДоходов.ПроцентВзносов;
	РезультатСравненияРежимов.ПорогДоходаДляРасчетаВзносовВПРФИП = ДанныеДляРасчетаВзносовСДоходов.ПорогДоходов;
	РезультатСравненияРежимов.ПредельнаяСуммаВзносовВПФРИП       = ДанныеДляРасчетаВзносовСДоходов.ПредельнаяСуммаВзноса;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьТарифыСтраховыхВзносов()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НаДату", ТекущаяДатаПользователя);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТарифыСтраховыхВзносовОСНО.ПФР КАК ТарифПФРОСНО,
	|	ТарифыСтраховыхВзносовОСНО.ФСС КАК ТарифФССОСНО,
	|	ТарифыСтраховыхВзносовОСНО.ФФОМС КАК ТарифФОМСОСНО,
	|	ТарифыСтраховыхВзносовУСН.ПФР КАК ТарифПФРУСН,
	|	ТарифыСтраховыхВзносовУСН.ФСС КАК ТарифФССУСН,
	|	ТарифыСтраховыхВзносовУСН.ФФОМС КАК ТарифФОМСУСН,
	|	ТарифыСтраховыхВзносовЕНВД.ПФР КАК ТарифПФРЕНВД,
	|	ТарифыСтраховыхВзносовЕНВД.ФСС КАК ТарифФССЕНВД,
	|	ТарифыСтраховыхВзносовЕНВД.ФФОМС КАК ТарифФОМСЕНВД,
	|	ТарифыСтраховыхВзносовПСН.ПФР КАК ЛьготныйТарифПФРПСН,
	|	ТарифыСтраховыхВзносовПСН.ФСС КАК ЛьготныйТарифФССПСН,
	|	ТарифыСтраховыхВзносовПСН.ФФОМС КАК ЛьготныйТарифФФОМСПСН
	|ИЗ
	|	РегистрСведений.ТарифыСтраховыхВзносов.СрезПоследних(&НаДату, ВидТарифа = ЗНАЧЕНИЕ(Справочник.ВидыТарифовСтраховыхВзносов.ОбщийНалоговыйРежим)) КАК ТарифыСтраховыхВзносовОСНО,
	|	РегистрСведений.ТарифыСтраховыхВзносов.СрезПоследних(&НаДату, ВидТарифа = ЗНАЧЕНИЕ(Справочник.ВидыТарифовСтраховыхВзносов.УпрощенныйНалоговыйРежим)) КАК ТарифыСтраховыхВзносовУСН,
	|	РегистрСведений.ТарифыСтраховыхВзносов.СрезПоследних(&НаДату, ВидТарифа = ЗНАЧЕНИЕ(Справочник.ВидыТарифовСтраховыхВзносов.ЕНВД)) КАК ТарифыСтраховыхВзносовЕНВД,
	|	РегистрСведений.ТарифыСтраховыхВзносов.СрезПоследних(&НаДату, ВидТарифа = ЗНАЧЕНИЕ(Справочник.ВидыТарифовСтраховыхВзносов.ИндивидуальныйПредпринимательПрименяющийПатент)) КАК ТарифыСтраховыхВзносовПСН";
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(РезультатСравненияРежимов, РезультатЗапроса);
	КонецЕсли;
	
	РезультатСравненияРежимов.ТарифОССНС = 0.2;
	
КонецПроцедуры

&НаСервере
Процедура ВидДеятельностиЕНВДПриИзмененииНаСервере(СравнитьРежимы = Истина)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ВидДеятельностиЕНВД);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторВидовПредпринимательскойДеятельностиЕНВД.ИмяФизическогоПоказателя,
	|	КлассификаторВидовПредпринимательскойДеятельностиЕНВД.ПодсказкаФизическогоПоказателя,
	|	КлассификаторВидовПредпринимательскойДеятельностиЕНВД.БазоваяДоходность,
	|	КлассификаторВидовПредпринимательскойДеятельностиЕНВД.НаименованиеПолное,
	|	КлассификаторВидовПредпринимательскойДеятельностиЕНВД.Код
	|ИЗ
	|	Справочник.КлассификаторВидовПредпринимательскойДеятельностиЕНВД КАК КлассификаторВидовПредпринимательскойДеятельностиЕНВД
	|ГДЕ
	|	КлассификаторВидовПредпринимательскойДеятельностиЕНВД.Ссылка = &Ссылка";
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(РезультатСравненияРежимов, Результат);
		Если ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
			ИмяФизическогоПоказателя = СтрЗаменить(Результат.ИмяФизическогоПоказателя, НСтр("ru=', включая ИП'"), "");
		Иначе
			ИмяФизическогоПоказателя = Результат.ИмяФизическогоПоказателя;
		КонецЕсли;
		РезультатСравненияРежимов.ИмяФизическогоПоказателя = ИмяФизическогоПоказателя;
		ПодсказкаФизическогоПоказателя                     = Результат.ПодсказкаФизическогоПоказателя;
	КонецЕсли;
	
	Если СравнитьРежимы Тогда
		СравнитьРежимыНалогообложения(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборВидаДеятельностиОКВЭД2Завершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КодОКВЭД2 = РезультатВыбора.Код;
	
	ВыборВидаДеятельностиОКВЭД2ЗавершениеНаСервере();
	
КонецПроцедуры

&НаСервере
Функция УстановитьПредставлениеВидаДеятельностиОКВЭД2()
	
	Если ЗначениеЗаполнено(КодОКВЭД2) Тогда
		Классификатор = ОбщегоНазначенияБПВызовСервера.ПолучитьКлассификатор("ОКВЭД2");
		ПредставлениеВидаДеятельности = Классификатор.Получить(КодОКВЭД2);
	Иначе
		ПредставлениеВидаДеятельности = "";
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ВыборВидаДеятельностиОКВЭД2ЗавершениеНаСервере(СравнитьРежимы = Истина)
	
	УстановитьПредставлениеВидаДеятельностиОКВЭД2();
	
	СоотнестиВидДеятельностиОКВЭД2иПСН();
	СоотнестиВидДеятельностиОКВЭД2иЕНВД();
	СоотнестиВидДеятельностиОКВЭД2иНПД();
	ВидДеятельностиЕНВДПриИзмененииНаСервере(СравнитьРежимы);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСписокВыбораВидовДеятельностиЕНВД(НайденныеЗначения)
	
	КодыВидовДеятельностиЕНВД = Новый Массив;
	
	Для Каждого НайденноеЗначение Из НайденныеЗначения Цикл
		КодыВидовДеятельностиЕНВД.Добавить(НайденноеЗначение.КодЕНВД);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КодыВидовДеятельностиЕНВД", КодыВидовДеятельностиЕНВД);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторВидовПредпринимательскойДеятельностиЕНВД.Ссылка КАК Значение,
	|	КлассификаторВидовПредпринимательскойДеятельностиЕНВД.Наименование КАК Представление
	|ИЗ
	|	Справочник.КлассификаторВидовПредпринимательскойДеятельностиЕНВД КАК КлассификаторВидовПредпринимательскойДеятельностиЕНВД
	|ГДЕ
	|	КлассификаторВидовПредпринимательскойДеятельностиЕНВД.Код В(&КодыВидовДеятельностиЕНВД)";
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	СписокВыбора = Элементы.ВидДеятельностиЕНВД.СписокВыбора;
	СписокВыбора.Очистить();
	Пока РезультатЗапроса.Следующий() Цикл
		СписокВыбора.Добавить(РезультатЗапроса.Значение, РезультатЗапроса.Представление);
	КонецЦикла;
	
	СписокВыбора.Добавить("Прочее",
		НСтр("ru='Прочее'"));
	
КонецПроцедуры

&НаКлиенте
Функция ПараметрыФормыЛьготныеУсловияНалоговыхРежимов()
	
	Результат = Новый Структура;
	
	Результат.Вставить("ВидОрганизации", ЮридическоеФизическоеЛицо);
	
	Результат.Вставить("СтавкаНалогаНаПрибыльРегиональная", РезультатСравненияРежимов.СтавкаНалогаНаПрибыльРегиональная);
	
	Результат.Вставить("СтавкаУСНДоходы"                 , РезультатСравненияРежимов.СтавкаУСНДоходы);
	Результат.Вставить("СтавкаУСНДоходыРасходы"          , РезультатСравненияРежимов.СтавкаУСНДоходыРасходы);
	
	ВозможноПрименениеЕНВД = ВРегионеПрименяетсяЕНВД(ЭтотОбъект)
		И РезультатСравненияРежимов.ПоВидуДеятельностиОКВЭД2ВозможноПрименениеЕНВД;
	Результат.Вставить("УплачиваетсяЕНВД"                 , ВозможноПрименениеЕНВД);
	Результат.Вставить("СтавкаЕНВД"                       , РезультатСравненияРежимов.СтавкаЕНВД);
	Результат.Вставить("К2"                               , РезультатСравненияРежимов.К2);
	
	Результат.Вставить("КодРегиона", КодРегионаРегистрации);
	ЭлементСписка = Элементы.КодРегионаРегистрации.СписокВыбора.НайтиПоЗначению(КодРегионаРегистрации);
	Результат.Вставить("РегионПредставление", ?(ЭлементСписка <> Неопределено, ЭлементСписка.Представление, ""));
	Результат.Вставить("КодОКВЭД", КодОКВЭД2);
	Результат.Вставить("ВидДеятельностиПредставление", ПредставлениеВидаДеятельности);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура УстановкаРегиональныхСтавокЗавершение(СтавкиНалогов, ДопПараметры) Экспорт
	
	Если ТипЗнч(СтавкиНалогов) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	УказаныРегиональныеСтавки = Ложь;
	Для Каждого СтавкаНалога Из СтавкиНалогов Цикл
		Если УказаныРегиональныеСтавки Тогда
			Прервать;
		КонецЕсли;
		Если ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо")
			И СтавкаНалога.Ключ = "СтавкаНалогаНаПрибыльРегиональная" Тогда
			Продолжить;
		КонецЕсли;
		Если СтавкиНалоговПоУмолчанию[СтавкаНалога.Ключ] <> СтавкаНалога.Значение Тогда
			УказаныРегиональныеСтавки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(РезультатСравненияРежимов, СтавкиНалогов);
	РезультатСравненияРежимов.СтавкаНалогаНаПрибыль = СтавкиНалогов.СтавкаНалогаНаПрибыльРегиональная
		+ РезультатСравненияРежимов.СтавкаНалогаНаПрибыльФедеральная;
	СравнитьРежимыНалогообложения(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДаннымиИнформационнойБазыЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена
		Или Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоДаннымИнформационннойБазыНаСервере(Результат);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДаннымИнформационннойБазыНаСервере(Условия = Неопределено)
	
	Если Условия = Неопределено Тогда
		ПараметрыДоступныхОрганизаций = Обработки.СравнениеРежимовНалогообложения.ПараметрыДоступныхОрганизаций();
		Если ПараметрыДоступныхОрганизаций.Количество() = 1 Тогда
			Условия = Новый Структура;
			Условия.Вставить("Организация"           , ПараметрыДоступныхОрганизаций[0].Организация);
			Условия.Вставить("СистемаНалогообложения", ПараметрыДоступныхОрганизаций[0].СистемаНалогообложения);
			Если Условия.СистемаНалогообложения = Перечисления.СистемыНалогообложения.ОсобыйПорядок Тогда
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Организация применяет особый порядок налогообложения.
					|Автоматическое заполнение возможно только по данным организаций, использующих общую или упрощенную систему'"));
				Возврат;
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("НачалоПериода", ДобавитьМесяц(НачалоМесяца(ТекущаяДатаПользователя), - 12));
	Запрос.УстановитьПараметр("КонецПериода" , НачалоМесяца(ТекущаяДатаПользователя) - 1);
	
	Запрос.УстановитьПараметр("Организация", Условия.Организация);
	
	СчетаДоходов = Новый Массив;
	СчетаДоходов.Добавить(ПланыСчетов.Хозрасчетный.ВыручкаНеЕНВД);
	СчетаДоходов.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеДоходы);
	
	СчетаРасходов = Новый Массив;
	СчетаРасходов.Добавить(ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеЕНВД);
	СчетаРасходов.Добавить(ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуНеЕНВД);
	СчетаРасходов.Добавить(ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыНеЕНВД);
	СчетаРасходов.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасходы);
	
	СчетаФОТ = Новый Массив;
	СчетаФОТ.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда);
	
	ВсеСчета = Новый Массив;
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеСчета, СчетаДоходов);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеСчета, СчетаРасходов);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ВсеСчета, СчетаФОТ);
	
	Запрос.УстановитьПараметр("СчетаДоходов" , СчетаДоходов);
	Запрос.УстановитьПараметр("СчетаРасходов", СчетаРасходов);
	Запрос.УстановитьПараметр("СчетаФОТ"     , СчетаФОТ);
	Запрос.УстановитьПараметр("ВсеСчета"     , ВсеСчета);
	Запрос.Текст = ТекстЗапросаДляЗаполненияПоДаннымИнформационнойБазы();
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ПланируемыеПоказатели = РезультатыЗапроса[0].Выбрать();
	ПланируемыеПоказатели.Следующий();
	ДоходыОтЮридическихЛиц = ПланируемыеПоказатели.Доходы;
	ДоходыОтФизическихЛиц  = 0;
	ИтогоДоходы            = ДоходыОтЮридическихЛиц + ДоходыОтФизическихЛиц;
	Расходы                = ПланируемыеПоказатели.Расходы;
	ФондОплатыТруда        = ПланируемыеПоказатели.ФОТ;
	
	ОрганизацияПрименяетОСНО = Условия.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Общая;
	Если ОрганизацияПрименяетОСНО Тогда
		СтавкаВзносовФОТ = (РезультатСравненияРежимов.ТарифПФРОСНО
		+ РезультатСравненияРежимов.ТарифФССОСНО
		+ РезультатСравненияРежимов.ТарифФОМСОСНО
		+ РезультатСравненияРежимов.ТарифОССНС) / 100;
	Иначе
		СтавкаВзносовФОТ = (РезультатСравненияРежимов.ТарифПФРУСН
		+ РезультатСравненияРежимов.ТарифФССУСН
		+ РезультатСравненияРежимов.ТарифФОМСУСН
		+ РезультатСравненияРежимов.ТарифОССНС) / 100;
	КонецЕсли;
	
	Если Расходы > ФондОплатыТруда Тогда
		Расходы = Расходы - СтавкаВзносовФОТ * ФондОплатыТруда;
		Если ОрганизацияПрименяетОСНО Тогда
			//Для общей системы себестоимость продаж без НДС, поэтому его нужно прибавить.
			НДСВходящий = (Расходы - ФондОплатыТруда) * РезультатСравненияРежимов.СтавкаНДС / 100;
			Расходы = Расходы + НДСВходящий;
		КонецЕсли;
	КонецЕсли;
	
	КодОКВЭД2 = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Условия.Организация, "КодОКВЭД2");
	ЗаполнитьРегионРегистрацииПоАдресу(Условия.Организация);
	ВыборВидаДеятельностиОКВЭД2ЗавершениеНаСервере();
	
КонецПроцедуры

&НаСервере
Функция ТекстЗапросаДляЗаполненияПоДаннымИнформационнойБазы()
	
	Результат =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ХозрасчетныйОбороты.Счет В (&СчетаДоходов)
	|					ТОГДА ХозрасчетныйОбороты.СуммаОборотКт
	|			КОНЕЦ), 0) КАК Доходы,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ХозрасчетныйОбороты.Счет В (&СчетаРасходов)
	|					ТОГДА ХозрасчетныйОбороты.СуммаОборотДт
	|			КОНЕЦ), 0) КАК Расходы,
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ХозрасчетныйОбороты.Счет В (&СчетаФОТ)
	|					ТОГДА ХозрасчетныйОбороты.СуммаОборотКт
	|			КОНЕЦ), 0) КАК ФОТ
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(&НачалоПериода, &КонецПериода, , Счет В (&ВсеСчета), , Организация = &Организация, , ) КАК ХозрасчетныйОбороты";
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРегионРегистрацииПоАдресу(Знач Организация)
	
	КонтактнаяИнформацияОбъектов = УправлениеКонтактнойИнформациейБП.КонтактнаяИнформацияОбъектовНаДату(
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Организация), ,
		ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации));
	
	Если КонтактнаяИнформацияОбъектов.Количество() > 0 Тогда
		ЗначениеАдресаJSON = КонтактнаяИнформацияОбъектов[0].Значение;
		СведенияОбАдресе = РаботаСАдресами.СведенияОбАдресе(ЗначениеАдресаJSON);
		КодРегионаРегистрации = СведенияОбАдресе.КодРегиона;
	Иначе
		КодРегионаРегистрации = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеНалогНеРассчитан()
	
	Возврат НСтр("ru='Не рассчитан'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеНалоговыйРежимНеПрименяется()
	
	Возврат НСтр("ru='Не применяется'");
	
КонецФункции

#Область ПомощникРегистрации

&НаСервереБезКонтекста
Функция ЭтоИП(Знач ВыбранныйРежим)
	
	Возврат СтрНайти(ВыбранныйРежим, "ИП");
	
КонецФункции

&НаСервере
Процедура ВосстановитьДанныеПомощникаРегистрации()
	
	Если НЕ ЗначениеЗаполнено(НавигацияПараметрФормы) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПомощникаРегистрации = Обработки.РегистрацияОрганизации.ДанныеПомощникаРегистрации();
	
	// Форма бизнеса
	Если НЕ ЭтоВыборФормыБизнеса(НавигацияПараметрФормы) Тогда
		ЮридическоеФизическоеЛицо = ДанныеПомощникаРегистрации.ФормаБизнеса.ЮридическоеФизическоеЛицо;
	КонецЕсли;
	
	// ОКВЭД
	ВидДеятельности = ДанныеПомощникаРегистрации.ВидДеятельности;
	Если ЗначениеЗаполнено(ВидДеятельности.ОсновнойКод) Тогда
		КодОКВЭД2 = ВидДеятельности.ОсновнойКод;
		ВыборВидаДеятельностиОКВЭД2ЗавершениеНаСервере(Ложь);
	КонецЕсли;
	
	// Налоговый режим
	Налоги = ДанныеПомощникаРегистрации.Налоги;
	ВыбранныйРежим = Налоги.ВыбранныйРежим;
	Если ИзмениласьФормаБизнеса(ВыбранныйРежим, ЮридическоеФизическоеЛицо) Тогда
		ВыбранныйРежим = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИзмениласьФормаБизнеса(ВыбранныйРежим, ЮридическоеФизическоеЛицо)
	
	Если НЕ ЗначениеЗаполнено(ЮридическоеФизическоеЛицо) Тогда
		Возврат Ложь;
	ИначеЕсли ЭтоИП(ВыбранныйРежим) И ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		Возврат Ложь;
	ИначеЕсли НЕ ЭтоИП(ВыбранныйРежим) И ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция СтруктураУчетнойПолитики(Знач ВыбранныйРежим)
	
	Если ЭтоИП(ВыбранныйРежим) Тогда
		ВидОрганизации = "ИндивидуальныйПредприниматель";
	Иначе
		ВидОрганизации = "ЮридическоеЛицо";
	КонецЕсли;
	
	ПлательщикЕНВД = Ложь;
	ПрименяетсяУСНПатент = Ложь;
	Если СтрНайти(ВыбранныйРежим, "УСНДоходыРасходы") Тогда
		СистемаНалогообложения = "УпрощеннаяДоходыМинусРасходы";
	ИначеЕсли СтрНайти(ВыбранныйРежим, "УСНДоходы") Тогда
		СистемаНалогообложения = "УпрощеннаяДоходы";
	ИначеЕсли СтрНайти(ВыбранныйРежим, "ЕНВД") Тогда
		СистемаНалогообложения = "УпрощеннаяДоходы";
		ПлательщикЕНВД = Истина;
	ИначеЕсли СтрНайти(ВыбранныйРежим, "ПСН") Тогда
		СистемаНалогообложения = "УпрощеннаяДоходы";
		ПрименяетсяУСНПатент = Истина;
	ИначеЕсли СтрНайти(ВыбранныйРежим, "НПД") Тогда
		СистемаНалогообложения = "НалогНаПрофессиональныйДоход";
	Иначе
		СистемаНалогообложения = "Общая";
	КонецЕсли;
	
	Возврат РегистрыСведений.НастройкиСистемыНалогообложения.СтруктураУчетнойПолитики(
		ВидОрганизации,
		СистемаНалогообложения,
		ПлательщикЕНВД,
		ПрименяетсяУСНПатент);
	
КонецФункции

&НаСервере
Процедура СохранитьДанныеПомощникаРегистрации()
	
	Если ЭтоВыборФормыБизнеса(НавигацияПараметрФормы) Тогда
		// Форма бизнеса
		Если ЭтоИП(ВыбранныйРежим) Тогда
			ФормаБизнеса = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		Иначе
			ФормаБизнеса = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
		КонецЕсли;
		Обработки.РегистрацияОрганизации.СохранитьДанныеФормаБизнеса(ФормаБизнеса);
		
		// Вид деятельности
		Если ЗначениеЗаполнено(КодОКВЭД2) Тогда
			ОКВЭД = Новый Структура;
			ОКВЭД.Вставить("Код", КодОКВЭД2);
			Классификатор = ОбщегоНазначенияБПВызовСервера.ПолучитьКлассификатор("ОКВЭД2");
			ОКВЭД.Вставить("Наименование", Классификатор.Получить(КодОКВЭД2));
			Обработки.РегистрацияОрганизации.СохранитьОсновнойОКВЭД(ОКВЭД);
		КонецЕсли;
	КонецЕсли;
	
	// Налоги
	Структура = Новый Структура;
	Структура.Вставить("ВыбранныйРежим", ВыбранныйРежим);
	Структура.Вставить("СтруктураУчетнойПолитики", СтруктураУчетнойПолитики(ВыбранныйРежим));
	Структура.Вставить("КодРегионаРегистрации", КодРегионаРегистрации);
	Обработки.РегистрацияОрганизации.СохранитьДанныеНалоги(Структура);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоВыборФормыБизнеса(НавигацияПараметрФормы)

	Возврат НавигацияПараметрФормы = "РежимНалогообложенияИФормаБизнеса";

КонецФункции

#КонецОбласти

#Область Расчет

&НаСервере
Функция НовыйРезультатСравненияРежимов()
	
	Результат = Новый Структура;
	
	// 1. Общие параметры
	Результат.Вставить("ДоходыОтЮридическихЛиц", 0);
	Результат.Вставить("ДоходыОтФизическихЛиц" , 0);
	Результат.Вставить("ИтогоДоходы"           , 0);
	Результат.Вставить("Расходы"               , 0);
	Результат.Вставить("ФондОплатыТруда"       , 0);
	
	// 2. Страховые взносы
	Результат.Вставить("ТарифПФРОСНО"                 , 0);
	Результат.Вставить("СтраховыеВзносыВПФРОСНО"      , 0);
	Результат.Вставить("ТарифФССОСНО"                 , 0);
	Результат.Вставить("СтраховыеВзносыВФССОСНО"      , 0);
	Результат.Вставить("ТарифФОМСОСНО"                , 0);
	Результат.Вставить("СтраховыеВзносыВФОМСОСНО"     , 0);
	Результат.Вставить("СтраховыеВзносыОССНСОСНО"     , 0);
	Результат.Вставить("СтраховыеВзносыКУплатеОСНОИП" , 0);
	Результат.Вставить("СтраховыеВзносыКУплатеОСНОООО", 0);
	
	// Для УСН доходы и УСН доходы минус расходы расчет страховых взносов совпадает.
	Результат.Вставить("ТарифПФРУСН"                 , 0);
	Результат.Вставить("СтраховыеВзносыВПФРУСН"      , 0);
	Результат.Вставить("ТарифФССУСН"                 , 0);
	Результат.Вставить("СтраховыеВзносыВФССУСН"      , 0);
	Результат.Вставить("ТарифФОМСУСН"                , 0);
	Результат.Вставить("СтраховыеВзносыВФОМСУСН"     , 0);
	Результат.Вставить("СтраховыеВзносыОССНСУСН"     , 0);
	Результат.Вставить("СтраховыеВзносыКУплатеУСНИП" , 0);
	Результат.Вставить("СтраховыеВзносыКУплатеУСНООО", 0);
	
	Результат.Вставить("ТарифПФРЕНВД"                 , 0);
	Результат.Вставить("СтраховыеВзносыВПФРЕНВД"      , 0);
	Результат.Вставить("ТарифФССЕНВД"                 , 0);
	Результат.Вставить("СтраховыеВзносыВФССЕНВД"      , 0);
	Результат.Вставить("ТарифФОМСЕНВД"                , 0);
	Результат.Вставить("СтраховыеВзносыВФОМСЕНВД"     , 0);
	Результат.Вставить("СтраховыеВзносыОССНСЕНВД"     , 0);
	Результат.Вставить("СтраховыеВзносыКУплатеЕНВДИП" , 0);
	Результат.Вставить("СтраховыеВзносыКУплатеЕНВДООО", 0);
	
	Результат.Вставить("ТарифПФРПСН"                , 0);
	Результат.Вставить("ЛьготныйТарифПФРПСН"        , 0);
	Результат.Вставить("СтраховыеВзносыВПФРПСН"     , 0);
	Результат.Вставить("ТарифФССПСН"                , 0);
	Результат.Вставить("ЛьготныйТарифФССПСН"        , 0);
	Результат.Вставить("СтраховыеВзносыВФССПСН"     , 0);
	Результат.Вставить("ТарифФОМСПСН"               , 0);
	Результат.Вставить("ЛьготныйТарифФОМСПСН"       , 0);
	Результат.Вставить("СтраховыеВзносыВФОМСПСН"    , 0);
	Результат.Вставить("СтраховыеВзносыОССНСПСН"    , 0);
	Результат.Вставить("СтраховыеВзносыКУплатеПСНИП", 0);
	
	Результат.Вставить("ТарифОССНС", 0);
	
	Результат.Вставить("ФиксированныеВзносыВПФРИП"         , 0);
	Результат.Вставить("ВзносыСДоходовВПФРОСНОИП"          , 0);
	Результат.Вставить("ВзносыСДоходовВПФРУСНИП"           , 0);
	Результат.Вставить("ВзносыСДоходовВПФРЕНВДИП"          , 0);
	Результат.Вставить("ВзносыСДоходовВПФРПСНИП"           , 0);
	Результат.Вставить("ФиксированныеВзносыВФОМСИП"        , 0);
	Результат.Вставить("ПроцентВзносовСДоходовВПФРИП"      , 0);
	Результат.Вставить("ПредельнаяСуммаВзносовВПФРИП"      , 0);
	Результат.Вставить("ПорогДоходаДляРасчетаВзносовВПРФИП", 0);
	
	// 3. ОСНО
	Результат.Вставить("РассчитанОСНОИП"                     , Ложь);
	Результат.Вставить("РассчитанОСНОООО"                    , Ложь);
	Результат.Вставить("СтавкаНДС"                           , 0);
	Результат.Вставить("РасчетнаяСтавкаНДС"                  , "");
	Результат.Вставить("НДСВходящий"                         , 0);
	Результат.Вставить("НДСИсходящий"                        , 0);
	Результат.Вставить("НДСКУплате"                          , 0);
	Результат.Вставить("НалогооблагаемыйДоходОСНОИП"         , 0);
	Результат.Вставить("НалогооблагаемыйРасходОСНОИП"        , 0);
	Результат.Вставить("НалогооблагаемыйДоходОСНОООО"        , 0);
	Результат.Вставить("НалогооблагаемыйРасходОСНОООО"       , 0);
	Результат.Вставить("СтавкаНалогаНаПрибыльФедеральная"    , 0);
	Результат.Вставить("СтавкаНалогаНаПрибыльРегиональная"   , 0);
	Результат.Вставить("СтавкаНалогаНаПрибыль"               , 0);
	Результат.Вставить("СтавкаНДФЛ"                          , 0);
	Результат.Вставить("НачисленоОСНОИП"                     , 0);
	Результат.Вставить("НачисленоОСНОООО"                    , 0);
	Результат.Вставить("ИтогоКУплатеОСНОИП"                  , 0);
	Результат.Вставить("ИтогоКУплатеОСНОООО"                 , 0);
	Результат.Вставить("НалоговаяНагрузкаОСНОИП"             , "");
	Результат.Вставить("НалоговаяНагрузкаОСНОООО"            , "");
	
	// 4. УСН доходы
	Результат.Вставить("РассчитанУСНДоходыИП"             , Ложь);
	Результат.Вставить("РассчитанУСНДоходыООО"            , Ложь);
	Результат.Вставить("ВычетСтраховыхВзносовУСНДоходыИП" , 0);
	Результат.Вставить("ВычетСтраховыхВзносовУСНДоходыООО", 0);
	Результат.Вставить("СтавкаУСНДоходы"                  , 0);
	Результат.Вставить("НачисленоНалогУСНДоходы"          , 0);
	Результат.Вставить("КУПлатеНалогаУСНДоходыИП"         , 0);
	Результат.Вставить("КУПлатеНалогаУСНДоходыООО"        , 0);
	Результат.Вставить("ИтогоКУплатеУСНДоходыИП"          , 0);
	Результат.Вставить("ИтогоКУплатеУСНДоходыООО"         , 0);
	Результат.Вставить("НалоговаяНагрузкаУСНДоходыИП"     , "");
	Результат.Вставить("НалоговаяНагрузкаУСНДоходыООО"    , "");
	
	// 5. УСН доходы минус расходы
	Результат.Вставить("РассчитанУСНДоходыРасходыИП"                          , Ложь);
	Результат.Вставить("РассчитанУСНДоходыРасходыООО"                         , Ложь);
	Результат.Вставить("РасходыПринимаемыеКНалогообложениюУСНДоходыРасходыИП" , 0);
	Результат.Вставить("РасходыПринимаемыеКНалогообложениюУСНДоходыРасходыООО", 0);
	Результат.Вставить("СтавкаМинимальногоНалогаУСНДоходыРасходы"             , 0);
	Результат.Вставить("МинимальныйНалогУСНДоходыРасходы"                     , 0);
	Результат.Вставить("СтавкаУСНДоходыРасходы"                               , 0);
	Результат.Вставить("КУПлатеНалогаУСНДоходыРасходыИП"                      , 0);
	Результат.Вставить("КУПлатеНалогаУСНДоходыРасходыООО"                     , 0);
	Результат.Вставить("ИтогоКУплатеУСНДоходыРасходыИП"                       , 0);
	Результат.Вставить("ИтогоКУплатеУСНДоходыРасходыООО"                      , 0);
	Результат.Вставить("НалоговаяНагрузкаУСНДоходыРасходыИП"                  , "");
	Результат.Вставить("НалоговаяНагрузкаУСНДоходыРасходыООО"                 , "");

	
	// 6. ЕНВД
	Результат.Вставить("РассчитанЕНВДИП"                               , Ложь);
	Результат.Вставить("РассчитанЕНВДООО"                              , Ложь);
	Результат.Вставить("ПоВидуДеятельностиОКВЭД2ВозможноПрименениеЕНВД", Ложь);
	Результат.Вставить("БазоваяДоходность"                             , 0);
	Результат.Вставить("К1"                                            , 0);
	Результат.Вставить("К2"                                            , 0);
	Результат.Вставить("ИмяФизическогоПоказателя"                      , "");
	Результат.Вставить("ЗначениеФизическогоПоказателя"                 , 0);
	Результат.Вставить("СтавкаЕНВД"                                    , 0);
	Результат.Вставить("ВмененныйДоход"                                , 0);
	Результат.Вставить("НачисленоЕНВД"                                 , 0);
	Результат.Вставить("ВычетСтраховыхВзносовЕНВДИП"                   , 0);
	Результат.Вставить("ВычетСтраховыхВзносовЕНВДООО"                  , 0);
	Результат.Вставить("КУПлатеЕдиныйНалогИП"                          , 0);
	Результат.Вставить("КУПлатеЕдиныйНалогООО"                         , 0);
	Результат.Вставить("ИтогоКУплатеЕНВДИП"                            , 0);
	Результат.Вставить("ИтогоКУплатеЕНВДООО"                           , 0);
	Результат.Вставить("НалоговаяНагрузкаЕНВДИП"                       , "");
	Результат.Вставить("НалоговаяНагрузкаЕНВДООО"                      , "");
	
	// 8. ПСН
	Результат.Вставить("РассчитанПСНИП"                               , Ложь);
	Результат.Вставить("ПоВидуДеятельностиОКВЭД2ВозможноПрименениеПСН", Ложь);
	Результат.Вставить("ПотенциальноВозможныйДоход"                   , 0);
	Результат.Вставить("СтавкаПСН"                                    , 0);
	Результат.Вставить("КУПлатеНалогаПСНИП"                           , 0);
	Результат.Вставить("ИтогоКУплатеПСНИП"                            , 0);
	Результат.Вставить("НалоговаяНагрузкаПСНИП"                       , "");
	
	// 9. НПД
	Результат.Вставить("РассчитанНПДИП"                               , Ложь);
	Результат.Вставить("ПоВидуДеятельностиОКВЭД2ВозможноПрименениеНПД", Ложь);
	Результат.Вставить("НалоговыйВычетНПД"                            , 0);
	Результат.Вставить("СтавкаНПД_ДоходыОтФизЛиц"                     , 0);
	Результат.Вставить("СтавкаНПД_ДоходыОтЮрЛицИП"                    , 0);
	Результат.Вставить("СтавкаВычетаНПД_ДоходыОтФизЛиц"               , 0);
	Результат.Вставить("СтавкаВычетаНПД_ДоходыОтЮрЛицИП"              , 0);
	Результат.Вставить("КУПлатеНалогаНПДИП"                           , 0);
	Результат.Вставить("ИтогоКУплатеНПДИП"                            , 0);
	Результат.Вставить("НалоговаяНагрузкаНПДИП"                       , "");
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура СравнитьРежимыНалогообложения(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	
	Для Каждого НалоговыйРежим Из Форма.НалоговыеРежимы Цикл
		Результат["Рассчитан" + НалоговыйРежим.Ключ] = Ложь;
	КонецЦикла;
	
	СписокСвойств = "ДоходыОтЮридическихЛиц, ДоходыОтФизическихЛиц, ИтогоДоходы, Расходы, ФондОплатыТруда";
	ЗаполнитьЗначенияСвойств(Результат, Форма, СписокСвойств);
	
	Результат.ЗначениеФизическогоПоказателя = Форма.ФизическийПоказательЕНВД;
	Результат.КУПлатеНалогаПСНИП            = Форма.СтоимостьПатента;
	
	РассчитатьСтраховыеВзносы(Форма);
	
	РассчитатьНалоговуюНагрузкуОСНОИП(Форма);
	РассчитатьНалоговуюНагрузкуОСНОООО(Форма);
	
	Если МожноПрименятьУСН(Форма) Тогда
		РассчитатьНалоговуюНагрузкуУСНДоходыИП(Форма);
		РассчитатьНалоговуюНагрузкуУСНДоходыООО(Форма);
		РассчитатьНалоговуюНагрузкуУСНДоходыРасходыИП(Форма);
		РассчитатьНалоговуюНагрузкуУСНДоходыРасходыООО(Форма);
	КонецЕсли;
	
	Если МожноПрименятьЕНВД(Форма) Тогда
		РассчитатьНалоговуюНагрузкуЕНВДИП(Форма);
		РассчитатьНалоговуюНагрузкуЕНВДООО(Форма);
	КонецЕсли;
	
	Если МожноПрименятьПСН(Форма) Тогда
		РассчитатьНалоговуюНагрузкуПСНИП(Форма);
	КонецЕсли;
	
	Если МожноПрименятьНПД(Форма) Тогда
		РассчитатьНалоговуюНагрузкуНПДИП(Форма);
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Форма, Результат);
	
	Результат.Вставить("Ставки", Форма.СтавкиНалоговПоУмолчанию);
	
	УправлениеФормой(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСтраховыеВзносы(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	ФОТ       = Результат.ФондОплатыТруда;
	
	Результат.СтраховыеВзносыВПФРОСНО  = Окр(ФОТ * Результат.ТарифПФРОСНО / 100, 2);
	Результат.СтраховыеВзносыВФССОСНО  = Окр(ФОТ * Результат.ТарифФССОСНО / 100, 2);
	Результат.СтраховыеВзносыВФОМСОСНО = Окр(ФОТ * Результат.ТарифФОМСОСНО / 100, 2);
	Результат.СтраховыеВзносыОССНСОСНО = Окр(ФОТ * Результат.ТарифОССНС / 100, 2);
	
	Результат.СтраховыеВзносыВПФРУСН  = Окр(ФОТ * Результат.ТарифПФРУСН / 100, 2);
	Результат.СтраховыеВзносыВФССУСН  = Окр(ФОТ * Результат.ТарифФССУСН / 100, 2);
	Результат.СтраховыеВзносыВФОМСУСН = Окр(ФОТ * Результат.ТарифФОМСУСН / 100, 2);
	Результат.СтраховыеВзносыОССНСУСН = Окр(ФОТ * Результат.ТарифОССНС / 100, 2);
	
	Результат.СтраховыеВзносыВПФРЕНВД  = Окр(ФОТ * Результат.ТарифПФРЕНВД / 100, 2);
	Результат.СтраховыеВзносыВФССЕНВД  = Окр(ФОТ * Результат.ТарифФССЕНВД / 100, 2);
	Результат.СтраховыеВзносыВФОМСЕНВД = Окр(ФОТ * Результат.ТарифФОМСЕНВД / 100, 2);
	Результат.СтраховыеВзносыОССНСЕНВД = Окр(ФОТ * Результат.ТарифОССНС / 100, 2);
	
	КлассОКВЭД2 = Лев(Форма.КодОКВЭД2, 2);
	Если КлассОКВЭД2 = "45" Или КлассОКВЭД2 = "47" Или КлассОКВЭД2 = "56" Или КлассОКВЭД2 = "68" Тогда
		// Для розничной торговли, операций с недвижимостью и оказанием услуг общепита
		// действуют общие тарифы страховых взносов за работников.
		// п. 14 ч. 1 ст. 58 Федерального закона от 24.07.2009 N 212-ФЗ.
		Результат.ТарифПФРПСН  = Результат.ТарифПФРОСНО;
		Результат.ТарифФССПСН  = Результат.ТарифФССОСНО;
		Результат.ТарифФОМСПСН = Результат.ТарифФОМСОСНО;
	Иначе
		Результат.ТарифПФРПСН  = Результат.ЛьготныйТарифПФРПСН;
		Результат.ТарифФССПСН  = Результат.ЛьготныйТарифФССПСН;
		Результат.ТарифФОМСПСН = Результат.ЛьготныйТарифФОМСПСН;
	КонецЕсли;
	
	Результат.СтраховыеВзносыВПФРПСН  = Окр(ФОТ * Результат.ТарифПФРПСН / 100, 2);
	Результат.СтраховыеВзносыВФССПСН  = Окр(ФОТ * Результат.ТарифФССПСН / 100, 2);
	Результат.СтраховыеВзносыВФОМСПСН = Окр(ФОТ * Результат.ТарифФОМСПСН / 100, 2);
	Результат.СтраховыеВзносыОССНСПСН = Окр(ФОТ * Результат.ТарифОССНС / 100, 2);
	
	Результат.СтраховыеВзносыКУплатеОСНОООО = Результат.СтраховыеВзносыВПФРОСНО
		+ Результат.СтраховыеВзносыВФССОСНО
		+ Результат.СтраховыеВзносыВФОМСОСНО
		+ Результат.СтраховыеВзносыОССНСОСНО;
	
	Результат.СтраховыеВзносыКУплатеУСНООО = Результат.СтраховыеВзносыВПФРУСН
		+ Результат.СтраховыеВзносыВФССУСН
		+ Результат.СтраховыеВзносыВФОМСУСН
		+ Результат.СтраховыеВзносыОССНСУСН;
	
	Результат.СтраховыеВзносыКУплатеЕНВДООО = Результат.СтраховыеВзносыВПФРЕНВД
		+ Результат.СтраховыеВзносыВФССЕНВД
		+ Результат.СтраховыеВзносыВФОМСЕНВД
		+ Результат.СтраховыеВзносыОССНСЕНВД;
	
	РассчитатьСтраховыеВзносыИП(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСтраховыеВзносыИП(Форма)
	
	РассчитатьСтраховыеВзносыИПНаОСНО(Форма);
	РассчитатьСтраховыеВзносыИПНаУСН(Форма);
	РассчитатьСтраховыеВзносыИПНаЕНВД(Форма);
	РассчитатьСтраховыеВзносыИПНаПСН(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РассчитатьФиксированныеВзносыИПВПФР(НалоговыйРежим, Форма)
	
	ДанныеДляРасчета = Форма.РезультатСравненияРежимов;
	ФиксированныеВзносыВПФР = ДанныеДляРасчета.ФиксированныеВзносыВПФРИП;
	
	Если НалоговыйРежим = "ОСНО" Тогда
		РассчитатьНДС(Форма);
		НалоговаяБаза = (ДанныеДляРасчета.ИтогоДоходы - ДанныеДляРасчета.НДСИсходящий)
			- (ДанныеДляРасчета.Расходы - ДанныеДляРасчета.НДСВходящий)
			- ДанныеДляРасчета.СтраховыеВзносыКУплатеОСНОООО - ФиксированныеВзносыВПФР - ДанныеДляРасчета.ФиксированныеВзносыВФОМСИП;
		
	ИначеЕсли НалоговыйРежим = "УСН" Тогда
		НалоговаяБаза = ДанныеДляРасчета.ИтогоДоходы;
		
	ИначеЕсли НалоговыйРежим = "ЕНВД" Тогда
		РассчитатьВмененныйДоход(Форма);
		НалоговаяБаза = ДанныеДляРасчета.ВмененныйДоход;
		
	Иначе
		РассчитатьПотенциальноВозможныйДоход(Форма);
		НалоговаяБаза = ДанныеДляРасчета.ПотенциальноВозможныйДоход;
	КонецЕсли;
	
	Если НалоговаяБаза < ДанныеДляРасчета.ПорогДоходаДляРасчетаВзносовВПРФИП Тогда
		ИтогоВзносовВПФР   = ФиксированныеВзносыВПФР;
		ВзносыВПФРСДоходов = 0;
	Иначе
		Если НалоговыйРежим = "ОСНО" Тогда
			ВзносыВПФРСДоходов = (НалоговаяБаза - ДанныеДляРасчета.ПорогДоходаДляРасчетаВзносовВПРФИП)
				* ДанныеДляРасчета.ПроцентВзносовСДоходовВПФРИП / (100 + ДанныеДляРасчета.ПроцентВзносовСДоходовВПФРИП);
		Иначе
			ВзносыВПФРСДоходов = (НалоговаяБаза - ДанныеДляРасчета.ПорогДоходаДляРасчетаВзносовВПРФИП)
				* ДанныеДляРасчета.ПроцентВзносовСДоходовВПФРИП / 100;
		КонецЕсли;
		Если ФиксированныеВзносыВПФР + ВзносыВПФРСДоходов > ДанныеДляРасчета.ПредельнаяСуммаВзносовВПФРИП Тогда
			ИтогоВзносовВПФР   = ДанныеДляРасчета.ПредельнаяСуммаВзносовВПФРИП;
			ВзносыВПФРСДоходов = ИтогоВзносовВПФР - ФиксированныеВзносыВПФР;
		Иначе
			ИтогоВзносовВПФР = ФиксированныеВзносыВПФР + ВзносыВПФРСДоходов;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Структура("ИтогоВзносовВПФР, ВзносыВПФРСДоходов", ИтогоВзносовВПФР, ВзносыВПФРСДоходов);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСтраховыеВзносыИПНаОСНО(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	
	ВзносыВПФР = РассчитатьФиксированныеВзносыИПВПФР("ОСНО", Форма);
	
	Результат.СтраховыеВзносыКУплатеОСНОИП = Результат.СтраховыеВзносыКУплатеОСНОООО
		+ ВзносыВПФР.ИтогоВзносовВПФР
		+ Результат.ФиксированныеВзносыВФОМСИП;
	
	Результат.ВзносыСДоходовВПФРОСНОИП = ВзносыВПФР.ВзносыВПФРСДоходов;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСтраховыеВзносыИПНаУСН(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	
	ВзносыВПФР = РассчитатьФиксированныеВзносыИПВПФР("УСН", Форма);
	
	Результат.СтраховыеВзносыКУплатеУСНИП = Результат.СтраховыеВзносыКУплатеУСНООО
		+ ВзносыВПФР.ИтогоВзносовВПФР
		+ Результат.ФиксированныеВзносыВФОМСИП;
	
	Результат.ВзносыСДоходовВПФРУСНИП = ВзносыВПФР.ВзносыВПФРСДоходов;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСтраховыеВзносыИПНаЕНВД(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	
	ВзносыВПФР = РассчитатьФиксированныеВзносыИПВПФР("ЕНВД", Форма);
	
	Результат.СтраховыеВзносыКУплатеЕНВДИП = Результат.СтраховыеВзносыКУплатеЕНВДООО
		+ ВзносыВПФР.ИтогоВзносовВПФР
		+ Результат.ФиксированныеВзносыВФОМСИП;
	
	Результат.ВзносыСДоходовВПФРЕНВДИП = ВзносыВПФР.ВзносыВПФРСДоходов;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьСтраховыеВзносыИПНаПСН(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	
	ВзносыВПФР = РассчитатьФиксированныеВзносыИПВПФР("ПСН", Форма);
	
	Результат.СтраховыеВзносыКУплатеПСНИП = Результат.СтраховыеВзносыВПФРПСН
		+ Результат.СтраховыеВзносыВФССПСН
		+ Результат.СтраховыеВзносыВФОМСПСН
		+ Результат.СтраховыеВзносыОССНСПСН
		+ ВзносыВПФР.ИтогоВзносовВПФР
		+ Результат.ФиксированныеВзносыВФОМСИП;
	
	Результат.ВзносыСДоходовВПФРПСНИП = ВзносыВПФР.ВзносыВПФРСДоходов;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьНДС(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	
	РасчетнаяСтавкаНДС = Результат.СтавкаНДС / (100 + Результат.СтавкаНДС);
	Результат.НДСИсходящий = Окр(Результат.ИтогоДоходы * РасчетнаяСтавкаНДС, 2);
	
	Если Результат.Расходы > Результат.ФондОплатыТруда Тогда
		Результат.НДСВходящий = (Результат.Расходы - Результат.ФондОплатыТруда) * РасчетнаяСтавкаНДС;
	Иначе
		Результат.НДСВходящий = 0;
	КонецЕсли;
	
	Результат.НДСКУплате = Результат.НДСИсходящий - Результат.НДСВходящий;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РассчитыватьРежим(ВидОрганизации, Форма)
	
	Результат = Ложь;
	
	ЮрФизЛицо = Форма.ЮридическоеФизическоеЛицо;
	ВыбранИП = ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо")
		Или Не ЗначениеЗаполнено(ЮрФизЛицо);
	ВыбраноООО = ЮрФизЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ЮридическоеЛицо")
		Или Не ЗначениеЗаполнено(ЮрФизЛицо);
		
	Если ВидОрганизации = "ИП" И ВыбранИП Тогда
		Результат =  Истина;
	ИначеЕсли ВидОрганизации = "ООО" И ВыбраноООО Тогда
		Результат = Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьНалоговуюНагрузкуОСНОИП(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	
	Если Не РассчитыватьРежим("ИП", Форма) Тогда
		Возврат;
	КонецЕсли;
	
	// 1. НДС.
	РассчитатьНДС(Форма);
	
	// 2. НДФЛ.
	Результат.НалогооблагаемыйДоходОСНОИП  = Результат.ИтогоДоходы - Результат.НДСИсходящий;
	Результат.НалогооблагаемыйРасходОСНОИП = Результат.Расходы - Результат.НДСВходящий + Результат.СтраховыеВзносыКУплатеОСНОИП;
	Ставка = Результат.СтавкаНДФЛ / 100;
	Результат.НачисленоОСНОИП = (Результат.НалогооблагаемыйДоходОСНОИП - Результат.НалогооблагаемыйРасходОСНОИП) * Ставка;
	Если Результат.НачисленоОСНОИП < 0 Тогда
		Результат.НачисленоОСНОИП = 0;
	КонецЕсли;
	
	// 3. Итого к уплате и налоговая нагрузка.
	Результат.ИтогоКУплатеОСНОИП = Результат.НачисленоОСНОИП + Результат.НДСКУплате + Результат.СтраховыеВзносыКУплатеОСНОИП;
	НалоговаяНагрузка = ?(Результат.ИтогоДоходы > 0, Результат.ИтогоКУплатеОСНОИП / Результат.ИтогоДоходы * 100, 0);
	Если НалоговаяНагрузка < 0 Тогда
		НалоговаяНагрузка = 0;
	КонецЕсли;
	Результат.НалоговаяНагрузкаОСНОИП = Формат(НалоговаяНагрузка, ФорматнаяСтрокаНалоговойНагрузки()) + "%";
	Результат.РассчитанОСНОИП = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьНалоговуюНагрузкуОСНОООО(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	Если Не РассчитыватьРежим("ООО", Форма) Тогда
		Возврат;
	КонецЕсли;
	
	// 1. НДС.
	РассчитатьНДС(Форма);
	
	// 2. Налог на прибыль.
	Результат.НалогооблагаемыйДоходОСНОООО  = Результат.ИтогоДоходы - Результат.НДСИсходящий;
	Результат.НалогооблагаемыйРасходОСНОООО = Результат.Расходы - Результат.НДСВходящий + Результат.СтраховыеВзносыКУплатеОСНОООО;
	Ставка = (Результат.СтавкаНалогаНаПрибыльФедеральная + Результат.СтавкаНалогаНаПрибыльРегиональная) / 100;
	Результат.НачисленоОСНОООО = (Результат.НалогооблагаемыйДоходОСНОООО - Результат.НалогооблагаемыйРасходОСНОООО) * Ставка;
	Если Результат.НачисленоОСНОООО < 0 Тогда
		Результат.НачисленоОСНОООО = 0;
	КонецЕсли;
	
	// 3. Итого к уплате и налоговая нагрузка.
	Результат.ИтогоКУплатеОСНОООО = Результат.НачисленоОСНОООО + Результат.НДСКУплате + Результат.СтраховыеВзносыКУплатеОСНОООО;
	НалоговаяНагрузка = ?(Результат.ИтогоДоходы > 0, Результат.ИтогоКУплатеОСНОООО / Результат.ИтогоДоходы * 100, 0);
	Если НалоговаяНагрузка < 0 Тогда
		НалоговаяНагрузка = 0;
	КонецЕсли;
	Результат.НалоговаяНагрузкаОСНОООО = Формат(НалоговаяНагрузка, ФорматнаяСтрокаНалоговойНагрузки()) + "%";
	Результат.РассчитанОСНОООО = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьНалоговуюНагрузкуУСНДоходыИП(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	Если Не РассчитыватьРежим("ИП", Форма) Тогда
		Возврат;
	КонецЕсли;
	
	// 1. Единый налог УСН доходы.
	Результат.НачисленоНалогУСНДоходы = Результат.ИтогоДоходы * Результат.СтавкаУСНДоходы / 100;
	ОграничениеДолиВычетов = ?(Результат.ФондОплатыТруда > 0, 0.5, 1);
	
	Если Результат.СтраховыеВзносыКУплатеУСНИП > Результат.НачисленоНалогУСНДоходы * ОграничениеДолиВычетов Тогда
		Результат.ВычетСтраховыхВзносовУСНДоходыИП = Результат.НачисленоНалогУСНДоходы * ОграничениеДолиВычетов;
	Иначе
		Результат.ВычетСтраховыхВзносовУСНДоходыИП = Результат.СтраховыеВзносыКУплатеУСНИП;
	КонецЕсли;
	
	Результат.КУПлатеНалогаУСНДоходыИП = Результат.НачисленоНалогУСНДоходы - Результат.ВычетСтраховыхВзносовУСНДоходыИП;
	
	// 2. Итого к уплате и налоговая нагрузка.
	Результат.ИтогоКУплатеУСНДоходыИП = Результат.КУПлатеНалогаУСНДоходыИП + Результат.СтраховыеВзносыКУплатеУСНИП;
	НалоговаяНагрузка = ?(Результат.ИтогоДоходы > 0, Результат.ИтогоКУплатеУСНДоходыИП / Результат.ИтогоДоходы * 100, 0);
	Результат.НалоговаяНагрузкаУСНДоходыИП = Формат(НалоговаяНагрузка, ФорматнаяСтрокаНалоговойНагрузки()) + "%";
	Результат.РассчитанУСНДоходыИП = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьНалоговуюНагрузкуУСНДоходыООО(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	Если Не РассчитыватьРежим("ООО", Форма) Тогда
		Возврат;
	КонецЕсли;
	
	// 1. Единый налог УСН доходы.
	Результат.НачисленоНалогУСНДоходы = Результат.ИтогоДоходы * Результат.СтавкаУСНДоходы / 100;
	
	ОграничениеДолиВычетов = 0.5;
	Если Результат.СтраховыеВзносыКУплатеУСНООО > Результат.НачисленоНалогУСНДоходы * ОграничениеДолиВычетов Тогда
		Результат.ВычетСтраховыхВзносовУСНДоходыООО = Результат.НачисленоНалогУСНДоходы * ОграничениеДолиВычетов;
	Иначе
		Результат.ВычетСтраховыхВзносовУСНДоходыООО = Результат.СтраховыеВзносыКУплатеУСНООО;
	КонецЕсли;
	
	Результат.КУПлатеНалогаУСНДоходыООО = Результат.НачисленоНалогУСНДоходы - Результат.ВычетСтраховыхВзносовУСНДоходыООО;
	
	// 2. Итого к уплате и налоговая нагрузка.
	Результат.ИтогоКУплатеУСНДоходыООО = Результат.КУПлатеНалогаУСНДоходыООО + Результат.СтраховыеВзносыКУплатеУСНООО;
	НалоговаяНагрузка = ?(Результат.ИтогоДоходы > 0, Результат.ИтогоКУплатеУСНДоходыООО / Результат.ИтогоДоходы * 100, 0);
	Результат.НалоговаяНагрузкаУСНДоходыООО = Формат(НалоговаяНагрузка, ФорматнаяСтрокаНалоговойНагрузки()) + "%";
	Результат.РассчитанУСНДоходыООО = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьМинимальныйНалогУСНДоходыРасходы(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	
	Если Результат.СтавкаУСНДоходыРасходы = 0 Тогда
		// Налоговые каникулы.
		Результат.СтавкаМинимальногоНалогаУСНДоходыРасходы = 0;
		Результат.МинимальныйНалогУСНДоходыРасходы = 0;
	Иначе
		Результат.СтавкаМинимальногоНалогаУСНДоходыРасходы = Форма.СтавкиНалоговПоУмолчанию.СтавкаМинимальногоНалогаУСНДоходыРасходы;
		Результат.МинимальныйНалогУСНДоходыРасходы = Результат.ИтогоДоходы * Результат.СтавкаМинимальногоНалогаУСНДоходыРасходы / 100;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьНалоговуюНагрузкуУСНДоходыРасходыИП(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	Если Не РассчитыватьРежим("ИП", Форма) Тогда
		Возврат;
	КонецЕсли;
	
	// 1. Единый налог УСН доходы минус расходы.
	РассчитатьМинимальныйНалогУСНДоходыРасходы(Форма);
	
	Результат.РасходыПринимаемыеКНалогообложениюУСНДоходыРасходыИП = ?(
		Результат.ИтогоДоходы > (Результат.Расходы + Результат.СтраховыеВзносыКУплатеУСНИП),
		Результат.Расходы + Результат.СтраховыеВзносыКУплатеУСНИП,
		Результат.ИтогоДоходы);
	
	СуммаНалога = (Результат.ИтогоДоходы - Результат.РасходыПринимаемыеКНалогообложениюУСНДоходыРасходыИП)
		* Результат.СтавкаУСНДоходыРасходы / 100;
	Если СуммаНалога < Результат.МинимальныйНалогУСНДоходыРасходы Тогда
		Результат.КУПлатеНалогаУСНДоходыРасходыИП = Результат.МинимальныйНалогУСНДоходыРасходы;
	Иначе
		Результат.КУПлатеНалогаУСНДоходыРасходыИП = СуммаНалога;
	КонецЕсли;
	
	// 2. Итого к уплате и налоговая нагрузка.
	Результат.ИтогоКУплатеУСНДоходыРасходыИП = Результат.КУПлатеНалогаУСНДоходыРасходыИП + Результат.СтраховыеВзносыКУплатеУСНИП;
	НалоговаяНагрузка = ?(Результат.ИтогоДоходы > 0, Результат.ИтогоКУплатеУСНДоходыРасходыИП / Результат.ИтогоДоходы * 100, 0);
	Результат.НалоговаяНагрузкаУСНДоходыРасходыИП = Формат(НалоговаяНагрузка, ФорматнаяСтрокаНалоговойНагрузки()) + "%";
	Результат.РассчитанУСНДоходыРасходыИП = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьНалоговуюНагрузкуУСНДоходыРасходыООО(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	Если Не РассчитыватьРежим("ООО", Форма) Тогда
		Возврат;
	КонецЕсли;
	
	// 1. Единый налог УСН доходы минус расходы.
	РассчитатьМинимальныйНалогУСНДоходыРасходы(Форма);
	
	Результат.РасходыПринимаемыеКНалогообложениюУСНДоходыРасходыООО = ?(
		Результат.ИтогоДоходы > (Результат.Расходы + Результат.СтраховыеВзносыКУплатеУСНООО),
		Результат.Расходы + Результат.СтраховыеВзносыКУплатеУСНООО,
		Результат.ИтогоДоходы);
	
	СуммаНалога = (Результат.ИтогоДоходы - Результат.РасходыПринимаемыеКНалогообложениюУСНДоходыРасходыООО)
		* Результат.СтавкаУСНДоходыРасходы / 100;
		
	Если СуммаНалога < Результат.МинимальныйНалогУСНДоходыРасходы Тогда
		Результат.КУПлатеНалогаУСНДоходыРасходыООО = Результат.МинимальныйНалогУСНДоходыРасходы;
	Иначе
		Результат.КУПлатеНалогаУСНДоходыРасходыООО = СуммаНалога;
	КонецЕсли;
	
	// 2. Итого к уплате и налоговая нагрузка.
	Результат.ИтогоКУплатеУСНДоходыРасходыООО = Результат.КУПлатеНалогаУСНДоходыРасходыООО + Результат.СтраховыеВзносыКУплатеУСНООО;
	НалоговаяНагрузка = ?(Результат.ИтогоДоходы > 0, Результат.ИтогоКУплатеУСНДоходыРасходыООО / Результат.ИтогоДоходы * 100, 0);
	Результат.НалоговаяНагрузкаУСНДоходыРасходыООО = Формат(НалоговаяНагрузка, ФорматнаяСтрокаНалоговойНагрузки()) + "%";
	Результат.РассчитанУСНДоходыРасходыООО = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьВмененныйДоход(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	
	Результат.ВмененныйДоход = Результат.БазоваяДоходность
		* Результат.К1
		* Результат.К2
		* Результат.ЗначениеФизическогоПоказателя
		* 12;
	Результат.НачисленоЕНВД = Результат.ВмененныйДоход * Результат.СтавкаЕНВД / 100;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьНалоговуюНагрузкуЕНВДИП(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	Если Не РассчитыватьРежим("ИП", Форма) Тогда
		Возврат;
	КонецЕсли;
	
	// 1. Единый налог.
	РассчитатьВмененныйДоход(Форма);
	
	Если Результат.ФондОплатыТруда = 0 Тогда
		ПотенциальнаяСуммаВычета = Результат.СтраховыеВзносыКУплатеЕНВДИП;
		ОграничениеДолиВычетов = 1;
	ИначеЕсли Результат.ФондОплатыТруда > 0 И Год(Форма.ТекущаяДатаПользователя) < 2017 Тогда
		// До 2017 года ИП с работниками на ЕНВД не может уменьшить единый налог на сумму фиксированных взносов.
		ПотенциальнаяСуммаВычета = Результат.СтраховыеВзносыКУплатеЕНВДООО;
		ОграничениеДолиВычетов = 0.5;
	Иначе
		ПотенциальнаяСуммаВычета = Результат.СтраховыеВзносыКУплатеЕНВДИП;
		ОграничениеДолиВычетов = 0.5;
	КонецЕсли;
	
	Если ПотенциальнаяСуммаВычета > Результат.НачисленоЕНВД * ОграничениеДолиВычетов Тогда
		Результат.ВычетСтраховыхВзносовЕНВДИП = Результат.НачисленоЕНВД * ОграничениеДолиВычетов;
	Иначе
		Результат.ВычетСтраховыхВзносовЕНВДИП = ПотенциальнаяСуммаВычета;
	КонецЕсли;
	
	Результат.КУПлатеЕдиныйНалогИП = Результат.НачисленоЕНВД - Результат.ВычетСтраховыхВзносовЕНВДИП;
	
	// 2. Итого к уплате и налоговая нагрузка.
	Результат.ИтогоКУплатеЕНВДИП = Результат.КУПлатеЕдиныйНалогИП + Результат.СтраховыеВзносыКУплатеЕНВДИП;
	НалоговаяНагрузка = ?(Результат.ИтогоДоходы > 0, Результат.ИтогоКУплатеЕНВДИП / Результат.ИтогоДоходы * 100, 0);
	Результат.НалоговаяНагрузкаЕНВДИП = Формат(НалоговаяНагрузка, ФорматнаяСтрокаНалоговойНагрузки()) + "%";
	Результат.РассчитанЕНВДИП = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьНалоговуюНагрузкуЕНВДООО(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	Если Не РассчитыватьРежим("ООО", Форма) Тогда
		Возврат;
	КонецЕсли;
	
	// 1. Единый налог.
	РассчитатьВмененныйДоход(Форма);
	
	ПотенциальнаяСуммаВычета = Результат.СтраховыеВзносыКУплатеЕНВДООО;
	ОграничениеДолиВычетов = 0.5;
	Если ПотенциальнаяСуммаВычета > Результат.НачисленоЕНВД * ОграничениеДолиВычетов Тогда
		Результат.ВычетСтраховыхВзносовЕНВДООО = Результат.НачисленоЕНВД * ОграничениеДолиВычетов;
	Иначе
		Результат.ВычетСтраховыхВзносовЕНВДООО = ПотенциальнаяСуммаВычета;
	КонецЕсли;
	
	Результат.КУПлатеЕдиныйНалогООО = Результат.НачисленоЕНВД - Результат.ВычетСтраховыхВзносовЕНВДООО;
	
	// 2. Итого к уплате и налоговая нагрузка.
	Результат.ИтогоКУплатеЕНВДООО = Результат.КУПлатеЕдиныйНалогООО + Результат.СтраховыеВзносыКУплатеЕНВДООО;
	НалоговаяНагрузка = ?(Результат.ИтогоДоходы > 0, Результат.ИтогоКУплатеЕНВДООО / Результат.ИтогоДоходы * 100, 0);
	Результат.НалоговаяНагрузкаЕНВДООО = Формат(НалоговаяНагрузка, ФорматнаяСтрокаНалоговойНагрузки()) + "%";
	Результат.РассчитанЕНВДООО = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьПотенциальноВозможныйДоход(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	
	Результат.ПотенциальноВозможныйДоход = Окр(Результат.КУПлатеНалогаПСНИП / (Результат.СтавкаПСН / 100), 2);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьНалоговуюНагрузкуПСНИП(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	Если Не РассчитыватьРежим("ИП", Форма) Тогда
		Возврат;
	КонецЕсли;
	
	// 1. Налог ПСН.
	РассчитатьПотенциальноВозможныйДоход(Форма);
	
	// 2. Итого к уплате и налоговая нагрузка.
	Результат.ИтогоКУплатеПСНИП = Результат.КУПлатеНалогаПСНИП + Результат.СтраховыеВзносыКУплатеПСНИП;
	НалоговаяНагрузка = ?(Результат.ИтогоДоходы > 0, Результат.ИтогоКУплатеПСНИП / Результат.ИтогоДоходы * 100, 0);
	Результат.НалоговаяНагрузкаПСНИП = Формат(НалоговаяНагрузка, ФорматнаяСтрокаНалоговойНагрузки()) + "%";
	Результат.РассчитанПСНИП = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РассчитатьНалоговуюНагрузкуНПДИП(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	Если Не РассчитыватьРежим("ИП", Форма) Тогда
		Возврат;
	КонецЕсли;
	
	// 1. Налог НПД.
	ПараметрыВычетаНПД = НалогНаПрофессиональныйДоходКлиентСервер.ПараметрыНалоговогоВычета(Форма.ТекущаяДатаПользователя);
	
	Результат.СтавкаВычетаНПД_ДоходыОтФизЛиц = ПараметрыВычетаНПД.СтавкаДоходыОтФизЛиц;
	Результат.СтавкаВычетаНПД_ДоходыОтЮрЛицИП = ПараметрыВычетаНПД.СтавкаДоходыОтЮрЛицИП;
	
	НалоговыйВычетВсего = Окр((Результат.ДоходыОтЮридическихЛиц * Результат.СтавкаВычетаНПД_ДоходыОтЮрЛицИП / 100
			+ Результат.ДоходыОтФизическихЛиц * Результат.СтавкаВычетаНПД_ДоходыОтФизЛиц / 100), 2);
	
	Результат.НалоговыйВычетНПД = Мин(ПараметрыВычетаНПД.Предел, НалоговыйВычетВсего);
	
	НалогКУплатеБезВычета = Окр(
		(Результат.ДоходыОтЮридическихЛиц * Результат.СтавкаНПД_ДоходыОтЮрЛицИП / 100
		+ Результат.ДоходыОтФизическихЛиц * Результат.СтавкаНПД_ДоходыОтФизЛиц / 100), 2);
	
	Результат.КУПлатеНалогаНПДИП = НалогКУплатеБезВычета - Результат.НалоговыйВычетНПД;
	
	// 2. Итого к уплате и налоговая нагрузка.
	Результат.ИтогоКУплатеНПДИП = Результат.КУПлатеНалогаНПДИП;
	НалоговаяНагрузка = ?(Результат.ИтогоДоходы > 0, Результат.ИтогоКУплатеНПДИП / Результат.ИтогоДоходы * 100, 0);
	Результат.НалоговаяНагрузкаНПДИП = Формат(НалоговаяНагрузка, ФорматнаяСтрокаНалоговойНагрузки()) + "%";
	Результат.РассчитанНПДИП = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция МожноПрименятьУСН(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	Элементы = Форма.Элементы;
	
	Если Результат.ИтогоДоходы < Форма.ПорогиПрименимостиРежимов.УСНГраницаДоходов Тогда
		Возврат Истина;
	КонецЕсли;
	
	РасширеннаяПодсказка = НСтр("ru = 'При указанных доходах УСН не применяется'");
	
	Результат.РассчитанУСНДоходыИП                                       = Ложь;
	Результат.ИтогоКУплатеУСНДоходыИП                                    = 0;
	Результат.НалоговаяНагрузкаУСНДоходыИП                               = "0%";
	Форма.НерассчитанныйНалогУСНДоходыИП                                  = ПредставлениеНалоговыйРежимНеПрименяется();
	Элементы.НерассчитанныйНалогУСНДоходыИПРасширеннаяПодсказка.Заголовок = РасширеннаяПодсказка;
	
	Результат.РассчитанУСНДоходыООО                                       = Ложь;
	Результат.ИтогоКУплатеУСНДоходыООО                                    = 0;
	Результат.НалоговаяНагрузкаУСНДоходыООО                               = "0%";
	Форма.НерассчитанныйНалогУСНДоходыООО                                  = ПредставлениеНалоговыйРежимНеПрименяется();
	Элементы.НерассчитанныйНалогУСНДоходыОООРасширеннаяПодсказка.Заголовок = РасширеннаяПодсказка;
	
	Результат.РассчитанУСНДоходыРасходыИП                                       = Ложь;
	Результат.ИтогоКУплатеУСНДоходыРасходыИП                                    = 0;
	Результат.НалоговаяНагрузкаУСНДоходыРасходыИП                               = "0%";
	Форма.НерассчитанныйНалогУСНДоходыРасходыИП                                  = ПредставлениеНалоговыйРежимНеПрименяется();
	Элементы.НерассчитанныйНалогУСНДоходыРасходыИПРасширеннаяПодсказка.Заголовок = РасширеннаяПодсказка;
	
	Результат.РассчитанУСНДоходыРасходыООО                                       = Ложь;
	Результат.ИтогоКУплатеУСНДоходыРасходыООО                                    = 0;
	Результат.НалоговаяНагрузкаУСНДоходыРасходыООО                               = "0%";
	Форма.НерассчитанныйНалогУСНДоходыРасходыООО                                  = ПредставлениеНалоговыйРежимНеПрименяется();
	Элементы.НерассчитанныйНалогУСНДоходыРасходыОООРасширеннаяПодсказка.Заголовок = РасширеннаяПодсказка;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МожноПрименятьЕНВД(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	Элементы = Форма.Элементы;
	
	МожноПрименятьЕНВД = Истина;
	Если Не ВРегионеПрименяетсяЕНВД(Форма) Тогда
		МожноПрименятьЕНВД = Ложь;
		
	ИначеЕсли Не ЗначениеЗаполнено(Форма.КодОКВЭД2) Тогда
		ПредставлениеНерассчитанногоНалога = ПредставлениеНалогНеРассчитан();
		РасширеннаяПодсказка = НСтр("ru = 'Укажите вид деятельности'");
		МожноПрименятьЕНВД = Ложь;
		
	ИначеЕсли Не Результат.ПоВидуДеятельностиОКВЭД2ВозможноПрименениеЕНВД
		Или ТипЗнч(Форма.ВидДеятельностиЕНВД) = Тип("Строка") Тогда
		ПредставлениеНерассчитанногоНалога = ПредставлениеНалоговыйРежимНеПрименяется();
		РасширеннаяПодсказка = НСтр("ru = 'Для указанной деятельности ЕНВД не применяется'");
		МожноПрименятьЕНВД = Ложь;
		
	ИначеЕсли Не ЗначениеЗаполнено(Форма.ВидДеятельностиЕНВД) Тогда
		ПредставлениеНерассчитанногоНалога = ПредставлениеНалогНеРассчитан();
		РасширеннаяПодсказка = НСтр("ru = 'Уточните вид деятельности'");
		МожноПрименятьЕНВД = Ложь;
		
	ИначеЕсли Форма.ФизическийПоказательЕНВД = 0 Тогда
		ПредставлениеНерассчитанногоНалога = ПредставлениеНалогНеРассчитан();
		РасширеннаяПодсказка = НСтр("ru = 'Укажите значение физического показателя'");
		МожноПрименятьЕНВД = Ложь;
		
	КонецЕсли;
	
	Если Не МожноПрименятьЕНВД Тогда
		
		Результат.РассчитанЕНВДИП                                        = Ложь;
		Результат.ИтогоКУплатеЕНВДИП                                     = 0;
		Результат.НалоговаяНагрузкаЕНВДИП                                = "0%";
		Форма.НерассчитанныйНалогЕНВДИП                                  = ПредставлениеНерассчитанногоНалога;
		Элементы.НерассчитанныйНалогЕНВДИПРасширеннаяПодсказка.Заголовок = РасширеннаяПодсказка;
		
		Результат.РассчитанЕНВДООО                                        = Ложь;
		Результат.ИтогоКУплатеЕНВДООО                                     = 0;
		Результат.НалоговаяНагрузкаЕНВДООО                                = "0%";
		Форма.НерассчитанныйНалогЕНВДООО                                  = ПредставлениеНерассчитанногоНалога;
		Элементы.НерассчитанныйНалогЕНВДОООРасширеннаяПодсказка.Заголовок = РасширеннаяПодсказка;
	КонецЕсли;
	
	Возврат МожноПрименятьЕНВД;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МожноПрименятьПСН(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	
	МожноПрименятьПСН = Истина;
	Если Не ЗначениеЗаполнено(Форма.КодОКВЭД2) Тогда
		ПредставлениеНерассчитанногоНалога = ПредставлениеНалогНеРассчитан();
		РасширеннаяПодсказка = НСтр("ru = 'Укажите вид деятельности'");
		МожноПрименятьПСН = Ложь;
		
	ИначеЕсли Не Результат.ПоВидуДеятельностиОКВЭД2ВозможноПрименениеПСН Тогда
		ПредставлениеНерассчитанногоНалога = ПредставлениеНалоговыйРежимНеПрименяется();
		РасширеннаяПодсказка = НСтр("ru = 'Для выбранного вида деятельности патентная система не применяется'");
		МожноПрименятьПСН = Ложь;
	
	ИначеЕсли Результат.ИтогоДоходы > Форма.ПорогиПрименимостиРежимов.ПСНГраницаДоходов Тогда
		ПредставлениеНерассчитанногоНалога = ПредставлениеНалоговыйРежимНеПрименяется();
		РасширеннаяПодсказка = НСтр("ru = 'При указанных доходах патентная система не применяется'");
		МожноПрименятьПСН = Ложь;
		
	ИначеЕсли Форма.СтоимостьПатента = 0 Тогда
		ПредставлениеНерассчитанногоНалога = ПредставлениеНалогНеРассчитан();
		РасширеннаяПодсказка = НСтр("ru = 'Укажите стоимость патента'");
		МожноПрименятьПСН = Ложь;
		
	КонецЕсли;
	
	Если Не МожноПрименятьПСН Тогда
		Результат.РассчитанПСНИП                                              = Ложь;
		Результат.ИтогоКУплатеПСНИП                                           = 0;
		Результат.НалоговаяНагрузкаПСНИП                                      = "0%";
		Форма.НерассчитанныйНалогПСНИП                                        = ПредставлениеНерассчитанногоНалога;
		Форма.Элементы.НерассчитанныйНалогПСНИПРасширеннаяПодсказка.Заголовок = РасширеннаяПодсказка;
	КонецЕсли;
	
	Возврат МожноПрименятьПСН;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция МожноПрименятьНПД(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	
	МожноПрименятьНПД = Истина;
	Если Не ПоказыватьРасчетНПД(Форма) Тогда
		МожноПрименятьНПД = Ложь;
		
	ИначеЕсли Не ВРегионеПрименяетсяНПД(Форма) Тогда
		МожноПрименятьНПД = Ложь;
		
	ИначеЕсли ЗначениеЗаполнено(Форма.ФондОплатыТруда) Тогда
		ПредставлениеНерассчитанногоНалога = ПредставлениеНалоговыйРежимНеПрименяется();
		РасширеннаяПодсказка = НСтр("ru = 'При наличии наемных работников ""Налог на профессиональный доход"" не применяется'");
		МожноПрименятьНПД = Ложь;
		
	ИначеЕсли Не Результат.ПоВидуДеятельностиОКВЭД2ВозможноПрименениеНПД Тогда
		ПредставлениеНерассчитанногоНалога = ПредставлениеНалоговыйРежимНеПрименяется();
		РасширеннаяПодсказка = НСтр("ru = 'Для выбранного вида деятельности ""Налог на профессиональный доход"" не применяется'");
		МожноПрименятьНПД = Ложь;
	
	ИначеЕсли Результат.ИтогоДоходы > Форма.ПорогиПрименимостиРежимов.НПДГраницаДоходов Тогда
		ПредставлениеНерассчитанногоНалога = ПредставлениеНалоговыйРежимНеПрименяется();
		РасширеннаяПодсказка = НСтр("ru = 'При доходах свыше 2 400 000 рублей ""Налог на профессиональный доход"" не применяется'");
		МожноПрименятьНПД = Ложь;
		
	КонецЕсли;
	
	Если Не МожноПрименятьНПД Тогда
		Результат.РассчитанНПДИП                                              = Ложь;
		Результат.ИтогоКУплатеНПДИП                                           = 0;
		Результат.НалоговаяНагрузкаНПДИП                                      = "0%";
		Форма.НерассчитанныйНалогНПДИП                                        = ПредставлениеНерассчитанногоНалога;
		Форма.Элементы.НерассчитанныйНалогНПДИПРасширеннаяПодсказка.Заголовок = РасширеннаяПодсказка;
	КонецЕсли;
	
	Возврат МожноПрименятьНПД;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВРегионеПрименяетсяЕНВД(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	Элементы = Форма.Элементы;
	
	ВРегионеПрименяетсяЕНВД = Истина;
	ВсеРегионы = Элементы.КодРегионаРегистрации.СписокВыбора;
	РегионыВКоторыхНеПрименяетсяЕНВД = РегионыВКоторыхНеПрименяетсяЕНВД();
	
	Если Не ЗначениеЗаполнено(Форма.КодРегионаРегистрации) Тогда
		ПредставлениеНерассчитанногоНалога = ПредставлениеНалогНеРассчитан();
		РасширеннаяПодсказка = НСтр("ru = 'Укажите регион регистрации, в котором будет осуществляться деятельность. ЕНВД можно применять не везде.'");
		ВРегионеПрименяетсяЕНВД = Ложь;
		
	ИначеЕсли РегионыВКоторыхНеПрименяетсяЕНВД[Форма.КодРегионаРегистрации] <> Неопределено Тогда
		ПредставлениеНерассчитанногоНалога = ПредставлениеНалоговыйРежимНеПрименяется();
		РасширеннаяПодсказка = НСтр("ru = 'В выбранном регионе ЕНВД не применяется'");
		ВРегионеПрименяетсяЕНВД = Ложь;
		
	КонецЕсли;
	
	Если Не ВРегионеПрименяетсяЕНВД Тогда
		
		Форма.НерассчитанныйНалогЕНВДИП = ПредставлениеНерассчитанногоНалога;
		Элементы.НерассчитанныйНалогЕНВДИПРасширеннаяПодсказка.Заголовок = РасширеннаяПодсказка;
		Форма.НерассчитанныйНалогЕНВДООО = ПредставлениеНерассчитанногоНалога;
		Элементы.НерассчитанныйНалогЕНВДОООРасширеннаяПодсказка.Заголовок = РасширеннаяПодсказка;
		
	КонецЕсли;
	
	Возврат ВРегионеПрименяетсяЕНВД;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ВРегионеПрименяетсяНПД(Форма)
	
	Результат = Форма.РезультатСравненияРежимов;
	Элементы = Форма.Элементы;
	
	ВРегионеПрименяетсяНПД = Истина;
	ВсеРегионы = Элементы.КодРегионаРегистрации.СписокВыбора;
	РегионыВКоторыхПрименяетсяНПД = РегионыВКоторыхПрименяетсяНПД();
	
	Если Не ЗначениеЗаполнено(Форма.КодРегионаРегистрации) Тогда
		ПредставлениеНерассчитанногоНалога = ПредставлениеНалогНеРассчитан();
		РасширеннаяПодсказка = НСтр("ru = 'Укажите регион регистрации, в котором будет осуществляться деятельность. ""Налог на профессиональный доход"" можно применять не везде.'");
		ВРегионеПрименяетсяНПД = Ложь;
		
	ИначеЕсли РегионыВКоторыхПрименяетсяНПД[Форма.КодРегионаРегистрации] = Неопределено Тогда
		ПредставлениеНерассчитанногоНалога = ПредставлениеНалоговыйРежимНеПрименяется();
		РасширеннаяПодсказка = НСтр("ru = 'В выбранном регионе ""Налог на профессиональный доход"" не применяется'");
		ВРегионеПрименяетсяНПД = Ложь;
		
	КонецЕсли;
	
	Если Не ВРегионеПрименяетсяНПД Тогда
		
		Форма.НерассчитанныйНалогНПДИП = ПредставлениеНерассчитанногоНалога;
		Элементы.НерассчитанныйНалогНПДИПРасширеннаяПодсказка.Заголовок = РасширеннаяПодсказка;
		
	КонецЕсли;
	
	Возврат ВРегионеПрименяетсяНПД;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РегионыВКоторыхНеПрименяетсяЕНВД()
	
	Результат = Новый Соответствие();
	Результат.Вставить("77", "Москва");
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РегионыВКоторыхПрименяетсяНПД()
	
	Результат = Новый Соответствие();
	Результат.Вставить("16", "Республика Татарстан");
	Результат.Вставить("40", "Калужская область");
	Результат.Вставить("50", "Московская область");
	Результат.Вставить("77", "Москва");
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ФорматнаяСтрокаНалоговойНагрузки()
	
	Возврат "ЧЦ=5; ЧДЦ=2; ЧН=0";
	
КонецФункции

&НаСервереБезКонтекста
Функция СтавкиИзменяемыеПользователем()
	
	Результат = Новый Массив;
	
	Результат.Добавить("СтавкаЕНВД");
	Результат.Добавить("К2");
	Результат.Добавить("СтавкаУСНДоходы");
	Результат.Добавить("СтавкаУСНДоходыРасходы");
	Результат.Добавить("СтавкаНалогаНаПрибыльРегиональная");
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Печать

&НаСервере
Функция ТабличныеДокументыРазделов(ИменаРазделов)
	
	Результат = Новый Структура;
	
	Для Каждого ИмяРаздела Из ИменаРазделов Цикл
		ТабличныйДокумент = ТабличныйДокументРасшифровки(ИмяРаздела);
		
		ТабличныйДокумент.ТолькоПросмотр      = Истина;
		ТабличныйДокумент.ОтображатьСетку     = Ложь;
		ТабличныйДокумент.ОтображатьЗаголовки = Ложь;
		
		Результат.Вставить(ИмяРаздела, ТабличныйДокумент);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТабличныйДокументРасшифровки(ИмяРаздела)
	
	Результат = Новый ТабличныйДокумент;
	
	Макет = Обработки.СравнениеРежимовНалогообложения.ПолучитьМакет("РасшифровкаРасчета");
	Если ИмяРаздела = "ОСНОИП" Тогда
		Результат = ТабличныйДокументРасшифровкиОСНОИП(Макет);
	ИначеЕсли ИмяРаздела = "ОСНОООО" Тогда
		Результат = ТабличныйДокументРасшифровкиОСНОООО(Макет);
	ИначеЕсли ИмяРаздела = "УСНДоходыИП" Тогда
		Результат = ТабличныйДокументРасшифровкиУСНДоходыИП(Макет);
	ИначеЕсли ИмяРаздела = "УСНДоходыООО" Тогда
		Результат = ТабличныйДокументРасшифровкиУСНДоходыООО(Макет);
	ИначеЕсли ИмяРаздела = "УСНДоходыРасходыИП" Тогда
		Результат = ТабличныйДокументРасшифровкиУСНДоходыРасходыИП(Макет);
	ИначеЕсли ИмяРаздела = "УСНДоходыРасходыООО" Тогда
		Результат = ТабличныйДокументРасшифровкиУСНДоходыРасходыООО(Макет);
	ИначеЕсли ИмяРаздела = "ЕНВДИП" Тогда
		Результат = ТабличныйДокументРасшифровкиЕНВДИП(Макет);
	ИначеЕсли ИмяРаздела = "ЕНВДООО" Тогда
		Результат = ТабличныйДокументРасшифровкиЕНВДООО(Макет);
	ИначеЕсли ИмяРаздела = "ПСНИП" Тогда
		Результат = ТабличныйДокументРасшифровкиПСНИП(Макет);
	ИначеЕсли ИмяРаздела = "НПДИП" Тогда
		Результат = ТабличныйДокументРасшифровкиНПДИП(Макет);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТабличныйДокументРасшифровкиОСНОИП(Макет)
	
	ФормулаРасчетаИтогов = Новый Массив;
	НомерРаздела = 0;
	Результат = СоздатьШапкуРасшифровки(НСтр("ru='Общий режим налогообложения (ОСНО)'"), Макет);
	
	СтраховыеВзносы = ОбластьСтраховыхВзносов(Макет, Истина);
	ПрисвоитьНомерРазделу(СтраховыеВзносы, НомерРаздела, ФормулаРасчетаИтогов);
	СтраховыеВзносы.Параметры.Заполнить(ДанныеОСтраховыхВзносовДляЗаполненияРасшифровки("ОСНО", "ИП"));
	СтраховыеВзносы.Параметры.Заполнить(РезультатСравненияРежимов);
	Результат.Вывести(СтраховыеВзносы);
	
	НДС = Макет.ПолучитьОбласть("НДС");
	ПрисвоитьНомерРазделу(НДС, НомерРаздела, ФормулаРасчетаИтогов);
	НДС.Параметры.Заполнить(РезультатСравненияРежимов);
	Результат.Вывести(НДС);
	
	НДФЛИП = Макет.ПолучитьОбласть("НДФЛИП");
	ПрисвоитьНомерРазделу(НДФЛИП, НомерРаздела, ФормулаРасчетаИтогов);
	НДФЛИП.Параметры.НомерРазделаНДС = НДС.Параметры.НомерРаздела;
	НДФЛИП.Параметры.НомерРазделаСтраховыеВзносы = СтраховыеВзносы.Параметры.НомерРаздела;
	НДФЛИП.Параметры.Заполнить(РезультатСравненияРежимов);
	Результат.Вывести(НДФЛИП);
	
	ИтоговыеДанныеДляЗаполненияРасшифровки = ИтоговыеДанныеДляЗаполненияРасшифровки("ОСНО", "ИП");
	ВывестиИтогиИНалоговуюНагрузкуВТабличныйДокумент(Результат, Макет, НомерРаздела, ФормулаРасчетаИтогов, ИтоговыеДанныеДляЗаполненияРасшифровки);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТабличныйДокументРасшифровкиОСНОООО(Макет)
	
	ФормулаРасчетаИтогов = Новый Массив;
	НомерРаздела = 0;
	Результат = СоздатьШапкуРасшифровки(НСтр("ru='Общий режим налогообложения (ОСНО)'"), Макет);
	
	СтраховыеВзносы = ОбластьСтраховыхВзносов(Макет, Ложь);
	ПрисвоитьНомерРазделу(СтраховыеВзносы, НомерРаздела, ФормулаРасчетаИтогов);
	СтраховыеВзносы.Параметры.Заполнить(ДанныеОСтраховыхВзносовДляЗаполненияРасшифровки("ОСНО", "ООО"));
	СтраховыеВзносы.Параметры.Заполнить(РезультатСравненияРежимов);
	Результат.Вывести(СтраховыеВзносы);
	
	НДС = Макет.ПолучитьОбласть("НДС");
	ПрисвоитьНомерРазделу(НДС, НомерРаздела, ФормулаРасчетаИтогов);
	НДС.Параметры.Заполнить(РезультатСравненияРежимов);
	Результат.Вывести(НДС);
	
	НалогНаПрибыль = Макет.ПолучитьОбласть("НалогНаПрибыль");
	ПрисвоитьНомерРазделу(НалогНаПрибыль, НомерРаздела, ФормулаРасчетаИтогов);
	НалогНаПрибыль.Параметры.НомерРазделаНДС = НДС.Параметры.НомерРаздела;
	НалогНаПрибыль.Параметры.НомерРазделаСтраховыеВзносы = СтраховыеВзносы.Параметры.НомерРаздела;
	НалогНаПрибыль.Параметры.Заполнить(РезультатСравненияРежимов);
	Результат.Вывести(НалогНаПрибыль);
	
	ИтоговыеДанныеДляЗаполненияРасшифровки = ИтоговыеДанныеДляЗаполненияРасшифровки("ОСНО", "ООО");
	ВывестиИтогиИНалоговуюНагрузкуВТабличныйДокумент(Результат, Макет, НомерРаздела, ФормулаРасчетаИтогов, ИтоговыеДанныеДляЗаполненияРасшифровки);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТабличныйДокументРасшифровкиУСНДоходыИП(Макет)
	
	ФормулаРасчетаИтогов = Новый Массив;
	НомерРаздела = 0;
	Результат = СоздатьШапкуРасшифровки(НСтр("ru='УСН (доходы)'"), Макет);
	
	СтраховыеВзносы = ОбластьСтраховыхВзносов(Макет, Истина);
	ПрисвоитьНомерРазделу(СтраховыеВзносы, НомерРаздела, ФормулаРасчетаИтогов);
	СтраховыеВзносы.Параметры.Заполнить(ДанныеОСтраховыхВзносовДляЗаполненияРасшифровки("УСН", "ИП"));
	СтраховыеВзносы.Параметры.Заполнить(РезультатСравненияРежимов);
	Результат.Вывести(СтраховыеВзносы);
	
	УСНДоходы = Макет.ПолучитьОбласть("УСНДоходы");
	ПрисвоитьНомерРазделу(УСНДоходы, НомерРаздела, ФормулаРасчетаИтогов);
	УСНДоходы.Параметры.НомерРазделаСтраховыеВзносы = СтраховыеВзносы.Параметры.НомерРаздела;
	Если РезультатСравненияРежимов.ФондОплатыТруда = 0 Тогда
		УСНДоходы.Параметры.ПредельнаяДоляСтраховыхВычетов = 100;
	Иначе
		УСНДоходы.Параметры.ПредельнаяДоляСтраховыхВычетов = 50;
	КонецЕсли;
	УСНДоходы.Параметры.ВычетСтраховыхВзносовУСНДоходы = РезультатСравненияРежимов.ВычетСтраховыхВзносовУСНДоходыИП;
	УСНДоходы.Параметры.КУплатеНалогаУСНДоходы = РезультатСравненияРежимов.КУплатеНалогаУСНДоходыИП;
	УСНДоходы.Параметры.Заполнить(РезультатСравненияРежимов);
	Результат.Вывести(УСНДоходы);
	
	ИтоговыеДанныеДляЗаполненияРасшифровки = ИтоговыеДанныеДляЗаполненияРасшифровки("УСНДоходы", "ИП");
	ВывестиИтогиИНалоговуюНагрузкуВТабличныйДокумент(Результат, Макет, НомерРаздела, ФормулаРасчетаИтогов, ИтоговыеДанныеДляЗаполненияРасшифровки);
	
	Примечание = Макет.ПолучитьОбласть("Примечание");
	Примечание.Параметры.Примечание = ТекстОграниченияПримененияУСН(Истина);
	Результат.Вывести(Примечание);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТабличныйДокументРасшифровкиУСНДоходыООО(Макет)
	
	ФормулаРасчетаИтогов = Новый Массив;
	НомерРаздела = 0;
	Результат = СоздатьШапкуРасшифровки(НСтр("ru='УСН (доходы)'"), Макет);
	
	СтраховыеВзносы = ОбластьСтраховыхВзносов(Макет, Ложь);
	ПрисвоитьНомерРазделу(СтраховыеВзносы, НомерРаздела, ФормулаРасчетаИтогов);
	СтраховыеВзносы.Параметры.Заполнить(ДанныеОСтраховыхВзносовДляЗаполненияРасшифровки("УСН", "ООО"));
	СтраховыеВзносы.Параметры.Заполнить(РезультатСравненияРежимов);
	Результат.Вывести(СтраховыеВзносы);
	
	УСНДоходы = Макет.ПолучитьОбласть("УСНДоходы");
	ПрисвоитьНомерРазделу(УСНДоходы, НомерРаздела, ФормулаРасчетаИтогов);
	УСНДоходы.Параметры.НомерРазделаСтраховыеВзносы = СтраховыеВзносы.Параметры.НомерРаздела;
	УСНДоходы.Параметры.ПредельнаяДоляСтраховыхВычетов = 50;
	УСНДоходы.Параметры.ВычетСтраховыхВзносовУСНДоходы = РезультатСравненияРежимов.ВычетСтраховыхВзносовУСНДоходыООО;
	УСНДоходы.Параметры.КУплатеНалогаУСНДоходы = РезультатСравненияРежимов.КУплатеНалогаУСНДоходыООО;
	УСНДоходы.Параметры.Заполнить(РезультатСравненияРежимов);
	Результат.Вывести(УСНДоходы);
	
	ИтоговыеДанныеДляЗаполненияРасшифровки = ИтоговыеДанныеДляЗаполненияРасшифровки("УСНДоходы", "ООО");
	ВывестиИтогиИНалоговуюНагрузкуВТабличныйДокумент(Результат, Макет, НомерРаздела, ФормулаРасчетаИтогов, ИтоговыеДанныеДляЗаполненияРасшифровки);
	
	Примечание = Макет.ПолучитьОбласть("Примечание");
	Примечание.Параметры.Примечание = ТекстОграниченияПримененияУСН(Ложь);
	Результат.Вывести(Примечание);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТабличныйДокументРасшифровкиУСНДоходыРасходыИП(Макет)
	
	ФормулаРасчетаИтогов = Новый Массив;
	НомерРаздела = 0;
	Результат = СоздатьШапкуРасшифровки(НСтр("ru='УСН (доходы - расходы)'"), Макет);
	
	СтраховыеВзносы = ОбластьСтраховыхВзносов(Макет, Истина);
	ПрисвоитьНомерРазделу(СтраховыеВзносы, НомерРаздела, ФормулаРасчетаИтогов);
	СтраховыеВзносы.Параметры.Заполнить(ДанныеОСтраховыхВзносовДляЗаполненияРасшифровки("УСН", "ИП"));
	СтраховыеВзносы.Параметры.Заполнить(РезультатСравненияРежимов);
	Результат.Вывести(СтраховыеВзносы);
	
	УСНДоходыРасходы = Макет.ПолучитьОбласть("УСНДоходыРасходы");
	ПрисвоитьНомерРазделу(УСНДоходыРасходы, НомерРаздела, ФормулаРасчетаИтогов);
	УСНДоходыРасходы.Параметры.НомерРазделаСтраховыеВзносы = СтраховыеВзносы.Параметры.НомерРаздела;
	УСНДоходыРасходы.Параметры.РасходыПринимаемыеКНалогообложениюУСНДоходыРасходы =
		РезультатСравненияРежимов.РасходыПринимаемыеКНалогообложениюУСНДоходыРасходыИП;
	УСНДоходыРасходы.Параметры.КУплатеНалогаУСНДоходыРасходы = РезультатСравненияРежимов.КУплатеНалогаУСНДоходыРасходыИП;
	УСНДоходыРасходы.Параметры.Заполнить(РезультатСравненияРежимов);
	Результат.Вывести(УСНДоходыРасходы);
	
	ИтоговыеДанныеДляЗаполненияРасшифровки = ИтоговыеДанныеДляЗаполненияРасшифровки("УСНДоходыРасходы", "ИП");
	ВывестиИтогиИНалоговуюНагрузкуВТабличныйДокумент(Результат, Макет, НомерРаздела, ФормулаРасчетаИтогов, ИтоговыеДанныеДляЗаполненияРасшифровки);
	
	Примечание = Макет.ПолучитьОбласть("Примечание");
	Примечание.Параметры.Примечание = ТекстОграниченияПримененияУСН(Истина);
	Результат.Вывести(Примечание);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТабличныйДокументРасшифровкиУСНДоходыРасходыООО(Макет)
	
	ФормулаРасчетаИтогов = Новый Массив;
	НомерРаздела = 0;
	Результат = СоздатьШапкуРасшифровки(НСтр("ru='УСН (доходы - расходы)'"), Макет);
	
	СтраховыеВзносы = ОбластьСтраховыхВзносов(Макет, Ложь);
	ПрисвоитьНомерРазделу(СтраховыеВзносы, НомерРаздела, ФормулаРасчетаИтогов);
	СтраховыеВзносы.Параметры.Заполнить(ДанныеОСтраховыхВзносовДляЗаполненияРасшифровки("УСН", "ООО"));
	СтраховыеВзносы.Параметры.Заполнить(РезультатСравненияРежимов);
	Результат.Вывести(СтраховыеВзносы);
	
	УСНДоходыРасходы = Макет.ПолучитьОбласть("УСНДоходыРасходы");
	ПрисвоитьНомерРазделу(УСНДоходыРасходы, НомерРаздела, ФормулаРасчетаИтогов);
	УСНДоходыРасходы.Параметры.НомерРазделаСтраховыеВзносы = СтраховыеВзносы.Параметры.НомерРаздела;
	УСНДоходыРасходы.Параметры.РасходыПринимаемыеКНалогообложениюУСНДоходыРасходы =
		РезультатСравненияРежимов.РасходыПринимаемыеКНалогообложениюУСНДоходыРасходыООО;
	УСНДоходыРасходы.Параметры.КУплатеНалогаУСНДоходыРасходы = РезультатСравненияРежимов.КУплатеНалогаУСНДоходыРасходыООО;
	УСНДоходыРасходы.Параметры.Заполнить(РезультатСравненияРежимов);
	Результат.Вывести(УСНДоходыРасходы);
	
	ИтоговыеДанныеДляЗаполненияРасшифровки = ИтоговыеДанныеДляЗаполненияРасшифровки("УСНДоходыРасходы", "ООО");
	ВывестиИтогиИНалоговуюНагрузкуВТабличныйДокумент(Результат, Макет, НомерРаздела, ФормулаРасчетаИтогов, ИтоговыеДанныеДляЗаполненияРасшифровки);
	
	Примечание = Макет.ПолучитьОбласть("Примечание");
	Примечание.Параметры.Примечание = ТекстОграниченияПримененияУСН(Ложь);
	Результат.Вывести(Примечание);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТабличныйДокументРасшифровкиЕНВДИП(Макет)
	
	ФормулаРасчетаИтогов = Новый Массив;
	НомерРаздела = 0;
	Результат = СоздатьШапкуРасшифровки(НСтр("ru='ЕНВД'"), Макет);
	
	СтраховыеВзносы = ОбластьСтраховыхВзносов(Макет, Истина);
	ПрисвоитьНомерРазделу(СтраховыеВзносы, НомерРаздела, ФормулаРасчетаИтогов);
	СтраховыеВзносы.Параметры.Заполнить(ДанныеОСтраховыхВзносовДляЗаполненияРасшифровки("ЕНВД", "ИП"));
	СтраховыеВзносы.Параметры.Заполнить(РезультатСравненияРежимов);
	Результат.Вывести(СтраховыеВзносы);
	
	ЕНВД = Макет.ПолучитьОбласть("ЕНВД");
	ПрисвоитьНомерРазделу(ЕНВД, НомерРаздела, ФормулаРасчетаИтогов);
	ЕНВД.Параметры.НомерРазделаСтраховыеВзносы = СтраховыеВзносы.Параметры.НомерРаздела;
	Если РезультатСравненияРежимов.ФондОплатыТруда = 0 Тогда
		ЕНВД.Параметры.ПредельнаяДоляСтраховыхВычетов = 100;
	Иначе
		ЕНВД.Параметры.ПредельнаяДоляСтраховыхВычетов = 50;
	КонецЕсли;
	Если РезультатСравненияРежимов.ФондОплатыТруда > 0
		И Год(ТекущаяДатаПользователя) < 2017 Тогда
		ЕНВД.Параметры.ВЧастиВзносовЗаРаботников = НСтр("ru='в части взносов за работников,'");
	Иначе
		ЕНВД.Параметры.ВЧастиВзносовЗаРаботников = "";
	КонецЕсли;
	ЕНВД.Параметры.ВычетСтраховыхВзносовЕНВД = РезультатСравненияРежимов.ВычетСтраховыхВзносовЕНВДИП;
	ЕНВД.Параметры.КУплатеЕдиныйНалог = РезультатСравненияРежимов.КУплатеЕдиныйНалогИП;
	ЕНВД.Параметры.Заполнить(РезультатСравненияРежимов);
	Результат.Вывести(ЕНВД);
	
	ИтоговыеДанныеДляЗаполненияРасшифровки = ИтоговыеДанныеДляЗаполненияРасшифровки("ЕНВД", "ИП");
	ВывестиИтогиИНалоговуюНагрузкуВТабличныйДокумент(Результат, Макет, НомерРаздела, ФормулаРасчетаИтогов, ИтоговыеДанныеДляЗаполненияРасшифровки);
	
	Примечание = Макет.ПолучитьОбласть("Примечание");
	Примечание.Параметры.Примечание = ТекстОграниченияПримененияЕНВД(Истина);
	Результат.Вывести(Примечание);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТабличныйДокументРасшифровкиЕНВДООО(Макет)
	
	ФормулаРасчетаИтогов = Новый Массив;
	НомерРаздела = 0;
	Результат = СоздатьШапкуРасшифровки(НСтр("ru='ЕНВД'"), Макет);
	
	СтраховыеВзносы = ОбластьСтраховыхВзносов(Макет, Ложь);
	ПрисвоитьНомерРазделу(СтраховыеВзносы, НомерРаздела, ФормулаРасчетаИтогов);
	СтраховыеВзносы.Параметры.Заполнить(ДанныеОСтраховыхВзносовДляЗаполненияРасшифровки("ЕНВД", "ООО"));
	СтраховыеВзносы.Параметры.Заполнить(РезультатСравненияРежимов);
	Результат.Вывести(СтраховыеВзносы);
	
	ЕНВД = Макет.ПолучитьОбласть("ЕНВД");
	ПрисвоитьНомерРазделу(ЕНВД, НомерРаздела, ФормулаРасчетаИтогов);
	ЕНВД.Параметры.НомерРазделаСтраховыеВзносы = СтраховыеВзносы.Параметры.НомерРаздела;
	ЕНВД.Параметры.ПредельнаяДоляСтраховыхВычетов = 50;
	ЕНВД.Параметры.ВычетСтраховыхВзносовЕНВД = РезультатСравненияРежимов.ВычетСтраховыхВзносовЕНВДООО;
	ЕНВД.Параметры.КУплатеЕдиныйНалог = РезультатСравненияРежимов.КУплатеЕдиныйНалогООО;
	ЕНВД.Параметры.Заполнить(РезультатСравненияРежимов);
	Результат.Вывести(ЕНВД);
	
	ИтоговыеДанныеДляЗаполненияРасшифровки = ИтоговыеДанныеДляЗаполненияРасшифровки("ЕНВД", "ООО");
	ВывестиИтогиИНалоговуюНагрузкуВТабличныйДокумент(Результат, Макет, НомерРаздела, ФормулаРасчетаИтогов, ИтоговыеДанныеДляЗаполненияРасшифровки);
	
	Примечание = Макет.ПолучитьОбласть("Примечание");
	Примечание.Параметры.Примечание = ТекстОграниченияПримененияЕНВД(Ложь);
	Результат.Вывести(Примечание);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТабличныйДокументРасшифровкиПСНИП(Макет)
	
	ФормулаРасчетаИтогов = Новый Массив;
	НомерРаздела = 0;
	Результат = СоздатьШапкуРасшифровки(НСтр("ru='Патент'"), Макет);
	
	СтраховыеВзносы = ОбластьСтраховыхВзносов(Макет, Истина);
	ПрисвоитьНомерРазделу(СтраховыеВзносы, НомерРаздела, ФормулаРасчетаИтогов);
	СтраховыеВзносы.Параметры.Заполнить(ДанныеОСтраховыхВзносовДляЗаполненияРасшифровки("ПСН", "ИП"));
	СтраховыеВзносы.Параметры.Заполнить(РезультатСравненияРежимов);
	Результат.Вывести(СтраховыеВзносы);
	
	ПСН = Макет.ПолучитьОбласть("ПСН");
	ПрисвоитьНомерРазделу(ПСН, НомерРаздела, ФормулаРасчетаИтогов);
	ПСН.Параметры.Заполнить(РезультатСравненияРежимов);
	Результат.Вывести(ПСН);
	
	ИтоговыеДанныеДляЗаполненияРасшифровки = ИтоговыеДанныеДляЗаполненияРасшифровки("ПСН", "ИП");
	ВывестиИтогиИНалоговуюНагрузкуВТабличныйДокумент(Результат, Макет, НомерРаздела, ФормулаРасчетаИтогов, ИтоговыеДанныеДляЗаполненияРасшифровки);
	
	Примечание = Макет.ПолучитьОбласть("Примечание");
	Примечание.Параметры.Примечание = ТекстОграниченияПримененияПСН();
	Результат.Вывести(Примечание);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТабличныйДокументРасшифровкиНПДИП(Макет)
	
	ФормулаРасчетаИтогов = Новый Массив;
	НомерРаздела = 0;
	Результат = СоздатьШапкуРасшифровки(НСтр("ru = 'Налог на профессиональный доход (""самозанятые"")'"), Макет, "Шапка_НПД");
	
	НПД = Макет.ПолучитьОбласть("НПД");
	ПрисвоитьНомерРазделу(НПД, НомерРаздела, ФормулаРасчетаИтогов);
	НПД.Параметры.Заполнить(РезультатСравненияРежимов);
	Результат.Вывести(НПД);
	
	ФормулаРасчетаИтогов.Очистить();
	ИтоговыеДанныеДляЗаполненияРасшифровки = ИтоговыеДанныеДляЗаполненияРасшифровки("НПД", "ИП");
	ИтоговыеДанныеДляЗаполненияРасшифровки.Вставить("ФормулаИтогоДоходов", НСтр("ru = '(ЮЛ + ФЛ)'"));
	ВывестиИтогиИНалоговуюНагрузкуВТабличныйДокумент(Результат, Макет, НомерРаздела, ФормулаРасчетаИтогов, ИтоговыеДанныеДляЗаполненияРасшифровки);
	
	Примечание = Макет.ПолучитьОбласть("Примечание");
	Примечание.Параметры.Примечание = ТекстОграниченияПримененияНПД();
	Результат.Вывести(Примечание);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТекстОграниченияПримененияУСН(ЭтоИП)
	
	ТекстПримечания = Новый Массив;
	ТекстПримечания.Добавить(НСтр("ru='Налоговый режим не может применяться если:'"));
	ТекстПримечания.Добавить(Символы.ПС);
	ТекстОграничения = СтрШаблон(НСтр("ru='- среднесписочная численность сотрудников более %1 человек'"),
		ПорогиПрименимостиРежимов.УСНГраницаРаботников);
	ТекстПримечания.Добавить(ТекстОграничения);
	ТекстПримечания.Добавить(Символы.ПС);
	ТекстОграничения = СтрШаблон(НСтр("ru='- стоимость основных средств более %1 рублей'"),
		ПорогиПрименимостиРежимов.УСНГраницаСтоимостиОС);
	ТекстПримечания.Добавить(ТекстОграничения);
	
	Если Не ЭтоИП Тогда
		ДобавитьОбщиеОграниченияПримененияСпецрежимовЮрЛицами(ТекстПримечания);
	КонецЕсли;
	
	Возврат СтрСоединить(ТекстПримечания, "");
	
КонецФункции

&НаСервере
Функция ТекстОграниченияПримененияЕНВД(ЭтоИП)
	
	ТекстПримечания = Новый Массив;
	ТекстПримечания.Добавить(НСтр("ru='Налоговый режим не может применяться если:'"));
	ТекстПримечания.Добавить(Символы.ПС);
	ТекстОграничения = СтрШаблон(НСтр("ru='- среднесписочная численность сотрудников более %1 человек'"),
		ПорогиПрименимостиРежимов.ЕНВДГраницаРаботников);
	ТекстПримечания.Добавить(ТекстОграничения);
	
	Если Не ЭтоИП Тогда
		ДобавитьОбщиеОграниченияПримененияСпецрежимовЮрЛицами(ТекстПримечания);
	КонецЕсли;
	
	ДобавитьОграниченияЕНВДПоВыбранномуВидуДеятельности(ТекстПримечания);
	
	Возврат СтрСоединить(ТекстПримечания, "");
	
КонецФункции

&НаСервере
Функция ТекстОграниченияПримененияПСН()
	
	ТекстПримечания = Новый Массив;
	ТекстПримечания.Добавить(НСтр("ru='Налоговый режим не может применяться если:'"));
	ТекстПримечания.Добавить(Символы.ПС);
	ТекстОграничения = СтрШаблон(НСтр("ru='- среднесписочная численность сотрудников более %1 человек'"),
		ПорогиПрименимостиРежимов.ПСНГраницаРаботников);
	ТекстПримечания.Добавить(ТекстОграничения);
	
	Возврат СтрСоединить(ТекстПримечания, "");
	
КонецФункции

&НаСервере
Функция ТекстОграниченияПримененияНПД()
	
	Возврат НСтр("ru='Налоговый режим не может применяться если:
		|- используется труд наемных работников
		|- продаются подакцизные или маркируемые товары
		|- продаются приобретенные товары или имущественные права, за исключением продажи имущества, использовавшегося для личных, домашних и (или) иных подобных нужд
		|- добываются или продаются полезные ископаемые
		|- годовой доход превышает 2 400 000 рублей'");
	
КонецФункции

&НаСервере
Процедура ДобавитьОбщиеОграниченияПримененияСпецрежимовЮрЛицами(ТекстПримечания)
	
	ТекстПримечания.Добавить(Символы.ПС);
	ТекстПримечания.Добавить(НСтр("ru='- организация имеет зарегистрированные филиалы'"));
	ТекстПримечания.Добавить(Символы.ПС);
	ТекстПримечания.Добавить(НСтр("ru='- доля участия других организаций превышает 25%'"));
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьОграниченияЕНВДПоВыбранномуВидуДеятельности(ТекстПримечания)
	
	ВидыДеятельности = НайтиПодходящиеВидыДеятельности("СоответствиеВидовДеятельности");
	Если ВидыДеятельности.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	КодЕНВД = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДеятельностиЕНВД, "Код");
	НайденноеЗначение = Неопределено;
	Для Каждого ВидДеятельности Из ВидыДеятельности Цикл
		Если ЗначениеЗаполнено(ВидДеятельности.КодОграниченияЕНВД) И КодЕНВД = ВидДеятельности.КодЕНВД Тогда
			НайденноеЗначение = ВидДеятельности;
		КонецЕсли;
	КонецЦикла;
	
	Если НайденноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КодыОграничений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(НайденноеЗначение.КодОграниченияЕНВД, ",");
	Отбор = Новый Структура("Код");
	Для Каждого КодОграничения Из КодыОграничений Цикл
		Отбор.Код = КодОграничения;
		НайденноеЗначение = КодыОграниченийЕНВД.НайтиСтроки(Отбор)[0];
		ТекстПримечания.Добавить(Символы.ПС);
		ТекстПримечания.Добавить(НайденноеЗначение.Наименование);
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Процедура ПрисвоитьНомерРазделу(Раздел, Номер, ФормулаРасчетаИтогов)
	
	Номер = Номер + 1;
	Раздел.Параметры.НомерРаздела = Номер;
	ФормулаРасчетаИтогов.Добавить("(" + Номер + ")");
	
КонецПроцедуры

&НаСервере
Процедура ВывестиИтогиИНалоговуюНагрузкуВТабличныйДокумент(Результат, Макет, НомерРаздела, ФормулаРасчетаИтогов, ИтоговыеДанныеДляЗаполненияРасшифровки)
	
	ИтогоКУплате = Макет.ПолучитьОбласть("ИтогоКУплате");
	ИтогоКУплате.Параметры.ФормулаРасчета = СтрСоединить(ФормулаРасчетаИтогов, " + ");
	ПрисвоитьНомерРазделу(ИтогоКУплате, НомерРаздела, ФормулаРасчетаИтогов);
	ИтогоКУплате.Параметры.Заполнить(ИтоговыеДанныеДляЗаполненияРасшифровки);
	Результат.Вывести(ИтогоКУплате);
	
	НалоговаяНагрузка = Макет.ПолучитьОбласть("НалоговаяНагрузка");
	НалоговаяНагрузка.Параметры.НомерРазделаИтогоКУПлате = ИтогоКУплате.Параметры.НомерРаздела;
	НалоговаяНагрузка.Параметры.Заполнить(ИтоговыеДанныеДляЗаполненияРасшифровки);
	Результат.Вывести(НалоговаяНагрузка);
	
КонецПроцедуры

&НаСервере
Функция СоздатьШапкуРасшифровки(Заголовок, Макет, ОбластьШапки = "Шапка")
	
	Результат = Новый ТабличныйДокумент;
	
	Шапка = Макет.ПолучитьОбласть(ОбластьШапки);
	Шапка.Параметры.Заголовок = Заголовок;
	Шапка.Параметры.Заполнить(РезультатСравненияРежимов);
	Результат.Вывести(Шапка);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОбластьСтраховыхВзносов(Макет, ЭтоИП)
	
	Если ЭтоИП И РезультатСравненияРежимов.ФондОплатыТруда > 0 Тогда
		Результат = Макет.ПолучитьОбласть("СтраховыеВзносыИПСРаботниками");
	ИначеЕсли ЭтоИП И РезультатСравненияРежимов.ФондОплатыТруда = 0 Тогда
		Результат = Макет.ПолучитьОбласть("ФиксированныеСтраховыеВзносыИП");
	Иначе
		Результат = Макет.ПолучитьОбласть("СтраховыеВзносыЮрЛица");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДанныеОСтраховыхВзносовДляЗаполненияРасшифровки(РежимНалогообложения, ВидОрганизации)
	
	Результат = Новый Структура;
	Суффикс = РежимНалогообложения + ВидОрганизации;
	
	Для Каждого КлючЗначение Из РезультатСравненияРежимов Цикл
		ИмяКлюча = КлючЗначение.Ключ;
		ДлинаКлюча = СтрДлина(ИмяКлюча);
		Если СтрНайти(ИмяКлюча, "СтраховыеВзносы") > 0
			И СтрНайти(ИмяКлюча, РежимНалогообложения) > 0
			Или СтрНайти(ИмяКлюча, "Тариф") > 0
			И СтрНайти(ИмяКлюча, РежимНалогообложения) > 0 Тогда
			Результат.Вставить(Лев(ИмяКлюча, ДлинаКлюча - СтрДлина(РежимНалогообложения)), КлючЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Результат.Вставить("СтраховыеВзносыКУплате",
		РезультатСравненияРежимов["СтраховыеВзносыКУплате" + Суффикс]);
		
	Если ВидОрганизации = "ИП" Тогда
		Результат.Вставить("ВзносыСДоходовВПФРИП", РезультатСравненияРежимов["ВзносыСДоходовВПФР" + Суффикс]);
	КонецЕсли;
	
	Если ВидОрганизации = "ИП" Тогда
		
		Шаблон = Неопределено;
		
		Если РежимНалогообложения = "ЕНВД" Тогда
			Шаблон = НСтр("ru='[(2.5) - %1] * %2'");
		ИначеЕсли РежимНалогообложения = "ПСН" Тогда
			Шаблон = НСтр("ru='[(2.1) - %1] * %2'");
		ИначеЕсли РежимНалогообложения = "ОСНО" Тогда
			Если РезультатСравненияРежимов.ФондОплатыТруда > 0 Тогда
				Шаблон = НСтр("ru='[(Д) - (Р) - (1.1) - (1.2) -
					|- (1.3) - (1.4) - (1.5) - (1.6) - (2) -
					|- %1] * %2'")
			Иначе
				Шаблон = НСтр("ru='[(Д) - (Р) - (1.1) - (1.2) - (2) -
					|- %1] * %2'")
			КонецЕсли;
		ИначеЕсли РежимНалогообложения = "УСН" Тогда
			Шаблон = НСтр("ru='[(Д) - %1] * %2'");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Шаблон) Тогда
			ФормулаНалоговойБазы = СтрШаблон(Шаблон,
				РезультатСравненияРежимов.ПорогДоходаДляРасчетаВзносовВПРФИП,
				ПредставлениеПроцентаВзносаСДоходовВПФРИП(РежимНалогообложения));
		Иначе
			ФормулаНалоговойБазы = "";
		КонецЕсли;
		
		Результат.Вставить("ФормулаНалоговойБазы", ФормулаНалоговойБазы);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ИтоговыеДанныеДляЗаполненияРасшифровки(РежимНалогообложения, ВидОрганизации)
	
	Результат = Новый Структура;
	Суффикс = РежимНалогообложения + ВидОрганизации;
	ДлинаСуффикса = СтрДлина(Суффикс);
	
	Результат.Вставить("ФормулаИтогоДоходов", НСтр("ru = '(Д)'"));
	
	Для Каждого КлючЗначение Из РезультатСравненияРежимов Цикл
		ИмяКлюча = КлючЗначение.Ключ;
		ДлинаКлюча = СтрДлина(ИмяКлюча);
		Если СтрНайти(ИмяКлюча, "ИтогоКУплате" + Суффикс) > 0
			Или СтрНайти(ИмяКлюча, "НалоговаяНагрузка" + Суффикс) > 0 Тогда
			Результат.Вставить(Лев(ИмяКлюча, ДлинаКлюча - ДлинаСуффикса), КлючЗначение.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПоказатьРасшифровкуРасчетаНалоговойНагрузки(НалоговыйРежим)
	
	ИмяРаздела = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(НалоговыйРежим);
	Расшифровка = ТабличныеДокументыРазделов(ИмяРаздела);
	
	ЗаголовокРасшифровки = НСтр("ru='Расчет налоговой нагрузки'");
	Расшифровка[НалоговыйРежим].Показать(ЗаголовокРасшифровки);
	
КонецФункции

#КонецОбласти

#Область УправлениеФормой

&НаСервере
Процедура УправлениеФормойПриСозданииНаСервере()
	
	Элементы.ЗаполнитьПоДаннымИнформационнойБазы.Видимость = ПравоДоступа("Чтение", Метаданные.Справочники.Организации)
		И КоличествоОрганизацийДанныеКоторыхДоступныПользователю > 0;
	
	ЭтоСценарийРегистрации = ЗначениеЗаполнено(НавигацияПараметрФормы);
	
	Если ЭтоСценарийРегистрации И НЕ ЭтоВыборФормыБизнеса(НавигацияПараметрФормы) Тогда
		Элементы.ПредставлениеВидаДеятельности.Вид = ВидПоляФормы.ПолеНадписи;
	КонецЕсли;
	
	КоманднаяПанель.Видимость = Не ЭтоСценарийРегистрации;
	Элементы.ГруппаКнопки.Видимость = ЭтоСценарийРегистрации;
	
	Для Каждого НалоговыйРежим Из НалоговыеРежимы Цикл
		Элементы["ВыбранРежим" + НалоговыйРежим.Ключ].Видимость = ЭтоСценарийРегистрации;
		Элементы["Надпись" + НалоговыйРежим.Ключ].Видимость = Не ЭтоСценарийРегистрации;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ЮридическоеФизическоеЛицо) Тогда
		Элементы.РасчетИП.Видимость  = (ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
		Элементы.РасчетООО.Видимость = (ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо);
		Элементы.ГруппаСтоимостьПатента.Видимость = (ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
		Элементы.ЗаполнитьПоДаннымИнформационнойБазы.Видимость = Ложь;
	КонецЕсли;
	
	КоличествоШагов = НавигацияПомощниковКлиентСервер.МаксимальноеЧислоШагов();
	ОбновитьНавигациюФормы();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы  = Форма.Элементы;
	Результат = Форма.РезультатСравненияРежимов;
	
	УправлениеНадписьюРегиональныеОсобенностиНалогов(Форма);
	УправлениеПолямиЕНВД(Форма);
	УправлениеПолямиНПД(Форма);
	
	Элементы.ГруппаСтоимостьПатента.Видимость = Результат.ПоВидуДеятельностиОКВЭД2ВозможноПрименениеПСН;
	
	Для Каждого НалоговыйРежим Из Форма.НалоговыеРежимы Цикл
		Элементы["ИтогоКУплате" + НалоговыйРежим.Ключ].Видимость         = Результат["Рассчитан" + НалоговыйРежим.Ключ];
		Элементы["НерассчитанныйНалог" + НалоговыйРежим.Ключ].Видимость  = Не Результат["Рассчитан" + НалоговыйРежим.Ключ];
	КонецЦикла;
	
	РаскраситьПоляНалоговойНагрузки(Форма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура РаскраситьПоляНалоговойНагрузки(Форма)
	
	НалоговаяНагрузка = Новый СписокЗначений;
	Для Каждого КлючЗначение Из Форма.НалоговыеРежимы Цикл
		НалоговаяНагрузка.Добавить(Форма["ИтогоКУплате" + КлючЗначение.Ключ], КлючЗначение.Ключ);
	КонецЦикла;
	
	НалоговаяНагрузка.СортироватьПоЗначению();
	
	Цвета = Новый Массив;
	Цвета.Добавить(Форма.ЗеленыйЦвет);
	Цвета.Добавить(Форма.ЖелтыйЦвет);
	Цвета.Добавить(Форма.КрасныйЦвет);
	
	Счетчик = -1;
	СуммаНалоговНаПредыдущейИтерации = -1;
	Для Каждого Элемент Из НалоговаяНагрузка Цикл
		Если Не Форма.РезультатСравненияРежимов["Рассчитан" + Элемент.Представление]
			Или Не ЗначениеЗаполнено(Форма.ИтогоДоходы) Тогда
			Форма.Элементы["НалоговаяНагрузка" + Элемент.Представление].ЦветФона = Форма.СерыйЦвет;
		Иначе
			Если Элемент.Значение <> СуммаНалоговНаПредыдущейИтерации Тогда
				Счетчик = Счетчик + 1;
			КонецЕсли;
			
			Форма.Элементы["НалоговаяНагрузка" + Элемент.Представление].ЦветФона = ?(Счетчик < Цвета.ВГраница(),
				Цвета[Счетчик],
				Цвета[Цвета.ВГраница()]);
				
			СуммаНалоговНаПредыдущейИтерации = Элемент.Значение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеНадписьюРегиональныеОсобенностиНалогов(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Не ЗначениеЗаполнено(Форма.КодРегионаРегистрации) Тогда
		Элементы.НадписьРегиональныеОсобенностиНалогов.Видимость = Ложь;
		Возврат;
	Иначе
		Элементы.НадписьРегиональныеОсобенностиНалогов.Видимость = Истина;
	КонецЕсли;
	
	Заголовок = Новый Массив;
	
	Если Форма.УказаныРегиональныеСтавки Тогда
		Заголовок.Добавить(нСтр("ru='Сумма налогов рассчитана с учетом льготных'"));
		Заголовок.Добавить(" ");
		Заголовок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='ставок налогов'"), , , , "УказатьРегиональныеСтавки"));
	Иначе
		НачалоЗаголовка = НСтр("ru='В регионе могут применяться льготные'");
		Заголовок.Добавить(НачалоЗаголовка);
		Заголовок.Добавить(" ");
		Заголовок.Добавить(Новый ФорматированнаяСтрока(НСтр("ru='ставки налогов'"), , , , "УказатьРегиональныеСтавки"));
	КонецЕсли;
	
	Элементы.НадписьРегиональныеОсобенностиНалогов.Заголовок = Новый ФорматированнаяСтрока(Заголовок);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеПолямиЕНВД(Форма)
	
	Элементы  = Форма.Элементы;
	Результат = Форма.РезультатСравненияРежимов;
	
	ВРегионеПрименяетсяЕНВД = ВРегионеПрименяетсяЕНВД(Форма);
	Элементы.ФизическийПоказательЕНВД.Видимость = ЗначениеЗаполнено(Форма.ВидДеятельностиЕНВД)
		И ТипЗнч(Форма.ВидДеятельностиЕНВД) <> Тип("Строка")
		И ВРегионеПрименяетсяЕНВД;
	Элементы.ВидДеятельностиЕНВД.Видимость = Элементы.ВидДеятельностиЕНВД.СписокВыбора.Количество() > 0
		И ВРегионеПрименяетсяЕНВД;
	
	Элементы.ФизическийПоказательЕНВД.Заголовок                     = Результат.ИмяФизическогоПоказателя;
	Элементы.ФизическийПоказательЕНВДРасширеннаяПодсказка.Заголовок = Форма.ПодсказкаФизическогоПоказателя;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеПолямиНПД(Форма)
	
	Элементы  = Форма.Элементы;
	Результат = Форма.РезультатСравненияРежимов;
	
	ЕстьНПД = ПоказыватьРасчетНПД(Форма);
	
	Элементы.РасчетНПДИП.Видимость = ЕстьНПД;
	
	МожноРассчитыватьНПД = ЕстьНПД
		И ВРегионеПрименяетсяНПД(Форма)
		И Результат.ПоВидуДеятельностиОКВЭД2ВозможноПрименениеНПД
		И (Не ЗначениеЗаполнено(Форма.ЮридическоеФизическоеЛицо)
			Или Форма.ЮридическоеФизическоеЛицо = ПредопределенноеЗначение("Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо"));
	
	Если МожноРассчитыватьНПД Тогда
		Элементы.ИтогоДоходы.Видимость = Ложь;
		Элементы.ДоходыОтЮридическихЛиц.Видимость = Истина;
		Элементы.ДоходыОтФизическихЛиц.Видимость = Истина;
	Иначе
		Элементы.ИтогоДоходы.Видимость = Истина;
		Элементы.ДоходыОтЮридическихЛиц.Видимость = Ложь;
		Элементы.ДоходыОтФизическихЛиц.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВыбранногоРежима(ИмяЭлемента)
	
	РаскрашиваемыеЭлементы = Новый Массив;
	Для Каждого НалоговыйРежим Из НалоговыеРежимы Цикл
		Элементы["РаскрашиваемыеРеквизиты" + НалоговыйРежим.Ключ].ЦветФона = ЦветФонаФормы;
	КонецЦикла;
	
	Элементы[ИмяЭлемента].Родитель.ЦветФона = ЦветФонаВыбраннойГруппы;
	ОбновитьНавигациюФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНавигациюФормы()
	
	НуженШагПатент = ВыбранныйРежим = "ПСНИП";
	Если НуженШагПатент <> Элементы["Шаг" + КоличествоШагов].Видимость
		Или Не НуженШагПатент И ВыбранныйРежим = "" Тогда
		Элементы["Шаг" + КоличествоШагов].Видимость = НуженШагПатент;
		Обработки.РегистрацияОрганизации.ОбновитьНавигациюФормы(ЭтаФорма, НуженШагПатент);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПредставлениеПроцентаВзносаСДоходовВПФРИП(РежимНалогообложения)
	
	Если РежимНалогообложения = "ОСНО" Тогда
		Возврат Строка(РезультатСравненияРежимов.ПроцентВзносовСДоходовВПФРИП)
			+ "/" + Строка(РезультатСравненияРежимов.ПроцентВзносовСДоходовВПФРИП + 100);
	Иначе
		Возврат Строка(РезультатСравненияРежимов.ПроцентВзносовСДоходовВПФРИП) + "%";
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПоказыватьРасчетНПД(Форма)
	
	Возврат (Форма.ТекущаяДатаПользователя >= НалогНаПрофессиональныйДоходКлиентСервер.ДатаНачалаЭксперимента());
	
КонецФункции

#КонецОбласти

#КонецОбласти
