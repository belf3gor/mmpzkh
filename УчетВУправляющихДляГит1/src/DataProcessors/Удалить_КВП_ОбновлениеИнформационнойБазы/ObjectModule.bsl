
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПеременныеМодуля

Перем Отказ;                       // Определяет успешность выполнения обновления.
                                   // Если возникла ошибка, то установить в Истина.
Перем СообщенияПользователю;       // Массив, который используется для вывода результатов обновления пользователю.
Перем ВажныеСообщенияПользователю; // Массив, который используется для вывода важных результатов обновления пользователю.
Перем ВыполненныеОбработчики;      // Массив, который используется для вывода описания изменений.

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОСНОВНЫЕ ПРОЦЕДУРЫ ОБНОВЛЕНИЯ

#Область ОсновныеПроцедурыОбновления

// Процедура выполняет обновление информационной базы до требуемой версии.
// Предназначена для вызова при начале работы системы в случае, если значение
// константы НомерВерсииКонфигурации не соответствует свойству Метаданные.Версия.
//
// Параметры:
//  Нет.
//
Функция ВыполнитьОбновление(ПараметрыИБ) Экспорт
	
	//////////////////////////////////////////////////////////////////////////////
	// НЕКОТОРЫЕ ОСОБЕННОСТИ МЕХАНИЗМА ОБНОВЛЕНИЯ
	// 1. Обработчики выполняются последовательно, друг за другом.
	// При этом, если в каком-то из обработчиков не удалось полностью обработать данные,
	// то нужно переменную "Отказ" взвести в значение Истина, после чего все последующие
	// блоки обработчиков будут игнорироваться, дальнейшее изменение констаны выполняться
	// не будет, а значит в результате обновление возникнет информация о том,
	// что обновление завершить не удалось.
	// 2. По ходу выполнения обработчиков в массиве "СообщенияПользователю" собираются
	// все текстовые сообщения, которые надо показать пользователю. Все текстовые сообщения
	// также дублируются в журнале регистрации, так как они являются механизмом протоколирования.
	// 3. По ходу выполнения обработчиков в массиве "ВажныеСообщенияПользователю" собираются
	// важные текстовые сообщения, например, об успешном или неудачном обновлении, которые надо
	// показать пользователю раньше остальных сообщений. Важные текстовые сообщения также 
	// дублируются в журнале регистрации, так как они являются механизмом протоколирования.
	
	// Признак отказа можно использовать в случае, если обработчик обновления не удалось выполнить.
	// При возникновении ошибки процесс обновления прекращается и возникает ошибка.
	Отказ = Ложь;
	
	// Массив выполненных обработчиков, который используется для вывода описания изменений.
	// Добавление выполненных обработчиков производится с помощью процедуры "ДобавитьОбработчикВСписокВыполненных(НомерРелиза)".
	ВыполненныеОбработчики = Новый Массив;
	
	// Сообщения пользователю добавляются в массив в виде текстовых строк.
	// Добавление сообщений производить с помощью процедуры "ДобавитьСообщениеПользователю(ТекстСообщения, ЭтоСообщениеОбОшибке = Ложь, ЭтоВажноеСообщение = Ложь)".
	СообщенияПользователю = Новый Массив;
	
	// Важные сообщения пользователю добавляются в массив в виде текстовых строк.
	// Добавление сообщений производить с помощью процедуры "ДобавитьСообщениеПользователю(ТекстСообщения, ЭтоСообщениеОбОшибке = Ложь, ЭтоВажноеСообщение = Ложь)",
	// В процедуру, в параметре ЭтоВажноеСообщение передавать Истина.
	ВажныеСообщенияПользователю = Новый Массив;
	
	// Основная структура результата обновления, в которую включается вся служебная информация.
	СтруктураРезультатаОбновления = Новый Структура;
	
	// Для тестовой и неофициальной версий выводятся предупреждения.
	Если КВП_ПрочиеПроцедурыИФункции.ВерсияЯвляетсяТестовой(Метаданные.Версия) Тогда
		ДобавитьОбработчикВСписокВыполненных("ПредупреждениеТестовойВерсии");
	ИначеЕсли КВП_ПрочиеПроцедурыИФункции.ВерсияЯвляетсяНеофициальной(Метаданные.Версия) Тогда
		ДобавитьОбработчикВСписокВыполненных("ПредупреждениеПредварительнойВерсии");
	КонецЕсли;
	
	// Обновление информационной базы.
	// Последовательно вызываются функции для обновления с соответствующей версии.
	
	ТекущаяВерсия = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	
	// Вызов функций заполнения данных для пустой информационной базы
	Если ТекущаяВерсия = "" Тогда
		
		НачатьТранзакцию();
		
		// Заполним предопределенные значения справочника "Настройки расчета пени".
		
		СпрОсновнаяНастройка = Справочники.УПЖКХ_НастройкиРасчетаПени.ОсновнаяНастройка;
		СправочникОбъект = СпрОсновнаяНастройка.ПолучитьОбъект();
		
		НоваяСтрока                                         = СправочникОбъект.СтавкиПени.Добавить();
		НоваяСтрока.ДеньСоСрокаОплаты                       = 1;
		НоваяСтрока.ДоляСтавкиРефинансированияЦБЧислитель   = 1;
		НоваяСтрока.ДоляСтавкиРефинансированияЦБЗнаменатель = 300;
		НоваяСтрока.ПроцентнаяСтавкаПени                    = Ложь;
		
		СправочникОбъект.ВариантОплатыПени                  = Перечисления.КВП_ВариантыОплатыПени.ВПоследнююОчередь;
		
		ЗаписатьОбъект(СправочникОбъект);
		
		// Обновим параметры предопределенных видов групп услуг.
		Справочники.УПЖКХ_ГруппыУслуг.ОбновитьДанныеПредопределенныхВидовГрупп();
		
		// Установим значения констант.
		
		Константы.КВП_ИспользоватьФункционалРасчетаНачислений.Установить(Истина);
		//Оповестить("УстановкаФункционалаРасчетаНачислений");
		
		// Установка упрощенного варианта учета собственников.
		Константы.УПЖКХ_УпрощенныйВариантУчетаСобственников.Установить(Истина);
		
		// Установка номера версии информационной базы.
		Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(ПараметрыИБ.КВП_НомерВерсииКВП);
		
		// Установка способа распределения показаний коллективных приборов учета.
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("СпособРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета", Перечисления.УПЖКХ_СпособыРаспределенияПоказанийКоллективногоСчетчика.ПропорциональноДолямЛицевыхСчетов);
		СтруктураПараметров.Вставить("СпособРаспределенияПоказанийСчетчикаНаЗданияПодъезды",        Перечисления.УПЖКХ_СпособыРаспределенияПоказанийКоллективногоСчетчика.Поровну);
		СтруктураПараметров.Вставить("ВидПлощадиДляРаспределенияПоказанийСчетчикаНаЗданияПодъезды", Справочники.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь);
		Константы.УПЖКХ_СпособРаспределенияПоказанийКоллективногоПрибораУчета.Установить(Новый ХранилищеЗначения(СтруктураПараметров));
		
		// Установка способа определения расхода по ПУ для расчета по среднему.
		Константы.УПЖКХ_СпособОпределенияСреднегоРасходаПоПриборамУчета.Установить(
		Перечисления.УПЖКХ_СпособыОпределенияСреднегоРасходаПоПриборамУчета.ПоМесяцамСНенулевымРасходом);
		
		// Установка варианта изменения задолженности в корректировках начислений.
		Константы.УПЖКХ_ВариантИзмененияЗадолженностиВКорректировкахНачислений.Установить(Перечисления.УПЖКХ_ВариантыИзмененияЗадолженностиВКорректировкахНачислений.РасчетныйПериодЗаКоторыйПроизведенаКорректировка);
		
		// Установка использования нового механизма отражения начислений в регл. учете.
		// Закомментировано до тех пор, пока новый механизм отражения не будет доведен до ума.
		//Константы.УПЖКХ_ДатаНачалаИспользованияНовогоМеханизмаОтраженияНачисленийВРеглУчете.Установить(НачалоГода(ТекущаяДата()));
		//Константы.УправлениеЗачетомАвансовПогашениемЗадолженности.Установить(Истина);
		
		// Заполнение ключевой ставки ЦБ.
		РегистрыСведений.УПЖКХ_КлючеваяСтавкаЦБ.ОбновитьКлючевыеСтавкиЦБ();
		
		// Отключим некоторые предопределенные виды контактной информации.
		// ТорговыеТочки
		СтараяГруппа = Справочники.ВидыКонтактнойИнформации.УдалитьКВП_СправочникТорговыеТочки.ПолучитьОбъект();
		СтараяГруппа.Используется = Ложь;
		ЗаписатьОбъект(СтараяГруппа);
		
		СтарыйАдрес = Справочники.ВидыКонтактнойИнформации.УдалитьКВП_АдресТорговойТочки.ПолучитьОбъект();
		СтарыйАдрес.Используется          = Ложь;
		СтарыйАдрес.ОбменДанными.Загрузка = Истина;
		ЗаписатьОбъект(СтарыйАдрес);
		// Конец ТорговыеТочки
		
		// EMailФизическиеЛица
		СтарыйEMail = Справочники.ВидыКонтактнойИнформации.УдалитьКВП_EMailФизическиеЛица.ПолучитьОбъект();
		СтарыйEMail.Используется          = Ложь;
		СтарыйEMail.ОбменДанными.Загрузка = Истина;
		ЗаписатьОбъект(СтарыйEMail);
		// Конец EMailФизическиеЛица
		
		// Многопоточная обработка данных
		УстановитьНастройкиМногопоточностиПоУмолчанию_3_0_52_2();
		// Конец Многопоточная обработка данных
		
		ЗафиксироватьТранзакцию();
		
		ДобавитьСообщениеПользователю("Выполнено начальное заполнение информационной базы " + ПараметрыИБ.СинонимКонфигурации + " версии " + ПараметрыИБ.КВП_НомерВерсииКВП + ".", , Истина);
		
	КонецЕсли;
	
	//////////////////////////////////////////
	// Переход с редакции 2.0.
	
	Если Не ВыполнитьПереходСРедакции20(СтруктураРезультатаОбновления) Тогда
		
		// Возврат информации об ошибке перехода с редакции 2.0.
		СтруктураРезультатаОбновления.Вставить("МассивВажныхСообщенийДляВывода", ВажныеСообщенияПользователю);
		СтруктураРезультатаОбновления.Вставить("МассивСообщенийДляВывода",       СообщенияПользователю);
		СтруктураРезультатаОбновления.Вставить("ОшибкаПереходаСРедакции20",      Истина);
		Возврат СтруктураРезультатаОбновления;
		
	КонецЕсли;
	
	//////////////////////////////////////////
	// Обновление версий внутри редакции 3.0.
	
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	НоваяВерсияКВП   = "3.0.19.7";
	
	Если ((ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.19" ИЛИ ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.16")
		И ТекущаяВерсияКВП <> НоваяВерсияКВП И ТекущаяВерсияКВП <> "") Тогда
		
		СтрСообщения = "Конфигурация обновлена с версии " + ТекущаяВерсияКВП + " на версию " + НоваяВерсияКВП + ".";
		
		// Установка номера версии информационной базы
		Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ_УПЖКХ",
								 УровеньЖурналаРегистрации.Информация, , ,
								 СтрСообщения);
		
		// сообщение об успешном обновлении информационной базы
		ДобавитьСообщениеПользователю(СтрСообщения, , Истина);
		
		ДобавитьОбработчикВСписокВыполненных("3019");
		
	КонецЕсли;
	
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	НоваяВерсияКВП   = "3.0.25.2";
	
	Если ((ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.25" ИЛИ ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.19")
		И ТекущаяВерсияКВП <> НоваяВерсияКВП И ТекущаяВерсияКВП <> "") Тогда
		
		СтрСообщения = "Конфигурация обновлена с версии " + ТекущаяВерсияКВП + " на версию " + НоваяВерсияКВП + ".";
		
		// Установка номера версии информационной базы
		Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ_УПЖКХ",
								 УровеньЖурналаРегистрации.Информация, , ,
								 СтрСообщения);
		
		// сообщение об успешном обновлении информационной базы
		ДобавитьСообщениеПользователю(СтрСообщения, , Истина);
		
		ДобавитьОбработчикВСписокВыполненных("3025");
		
	КонецЕсли;
	
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	НоваяВерсияКВП   = "3.0.26.2";
	
	Если ((ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.26" ИЛИ ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.25")
		И ТекущаяВерсияКВП <> НоваяВерсияКВП И ТекущаяВерсияКВП <> "") Тогда
		
		СтрСообщения = "Конфигурация обновлена с версии " + ТекущаяВерсияКВП + " на версию " + НоваяВерсияКВП + ".";
		
		// Установка номера версии информационной базы
		Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ_УПЖКХ",
								 УровеньЖурналаРегистрации.Информация, , ,
								 СтрСообщения);
		
		// сообщение об успешном обновлении информационной базы
		ДобавитьСообщениеПользователю(СтрСообщения, , Истина);
		
		ДобавитьОбработчикВСписокВыполненных("3026");
		
	КонецЕсли;
	
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	НоваяВерсияКВП   = "3.0.27.4";
	
	Если ((ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.27" ИЛИ ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.26")
		И ТекущаяВерсияКВП <> НоваяВерсияКВП И ТекущаяВерсияКВП <> "") Тогда
		
		СтрСообщения = "Конфигурация обновлена с версии " + ТекущаяВерсияКВП + " на версию " + НоваяВерсияКВП + ".";
		
		// Дополнительные действия.
		
		Если ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.26"
		 Или ТекущаяВерсияКВП = "3.0.27.1"
		 Или ТекущаяВерсияКВП = "3.0.27.3" Тогда
			
			ЗаполнитьМестоРожденияЖильцаВСправочнике_ФизическиеЛица_3027();
			ЗаполнитьРесурсРазделительДробнойЧастиСуммыВУчетнойПолитикеЖКХ_3027();
			ОткорректироватьСторноВДвиженияхИСтрокахТЧВДокументеНачислениеУслугПоПУ_3027(СтруктураРезультатаОбновления);
			ОбработатьРегистрСведенийАдреса_3027();
			ЗаполнитьПериодыНачисленияВДвиженияхПоДокументамКорректировки_3027();
			
		КонецЕсли;
		
		// Установка номера версии информационной базы
		Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ_УПЖКХ",
								 УровеньЖурналаРегистрации.Информация, , ,
								 СтрСообщения);
		
		// сообщение об успешном обновлении информационной базы
		ДобавитьСообщениеПользователю(СтрСообщения, , Истина);
		
		ДобавитьОбработчикВСписокВыполненных("3027");
		
	КонецЕсли;
	
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	НоваяВерсияКВП   = "3.0.28.3";
	
	Если ((ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.28" ИЛИ ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.27")
		И ТекущаяВерсияКВП <> НоваяВерсияКВП И ТекущаяВерсияКВП <> "") Тогда
		
		СтрСообщения = "Конфигурация обновлена с версии " + ТекущаяВерсияКВП + " на версию " + НоваяВерсияКВП + ".";
		
		// Дополнительные действия.
		
		// Установка номера версии информационной базы
		Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ_УПЖКХ",
								 УровеньЖурналаРегистрации.Информация, , ,
								 СтрСообщения);
		
		// сообщение об успешном обновлении информационной базы
		ДобавитьСообщениеПользователю(СтрСообщения, , Истина);
		
		ДобавитьОбработчикВСписокВыполненных("3028");
		
	КонецЕсли;
	
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	НоваяВерсияКВП   = "3.0.29.4";
	
	Если ((ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.29" ИЛИ ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.28")
		И ТекущаяВерсияКВП <> НоваяВерсияКВП И ТекущаяВерсияКВП <> "") Тогда
		
		СтрСообщения = "Конфигурация обновлена с версии " + ТекущаяВерсияКВП + " на версию " + НоваяВерсияКВП + ".";
		
		// Дополнительные действия.
		
		// Установка номера версии информационной базы
		Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ_УПЖКХ",
								 УровеньЖурналаРегистрации.Информация, , ,
								 СтрСообщения);
		
		// сообщение об успешном обновлении информационной базы
		ДобавитьСообщениеПользователю(СтрСообщения, , Истина);
		
		ДобавитьОбработчикВСписокВыполненных("3029");
		
	КонецЕсли;
	
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	НоваяВерсияКВП   = "3.0.30.3";
	
	Если ((ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.30" ИЛИ ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.29")
		И ТекущаяВерсияКВП <> НоваяВерсияКВП И ТекущаяВерсияКВП <> "") Тогда
		
		СтрСообщения = "Конфигурация обновлена с версии " + ТекущаяВерсияКВП + " на версию " + НоваяВерсияКВП + ".";
		
		// Дополнительные действия.
		ОбработатьУчетнуюПолитикуЖКХ_3030();
		
		// Установка номера версии информационной базы
		Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ_УПЖКХ",
								 УровеньЖурналаРегистрации.Информация, , ,
								 СтрСообщения);
		
		// сообщение об успешном обновлении информационной базы
		ДобавитьСообщениеПользователю(СтрСообщения, , Истина);
		
		ДобавитьОбработчикВСписокВыполненных("3030");
		
	КонецЕсли;
	
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	НоваяВерсияКВП   = "3.0.31.4";
	
	Если ((ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.31" ИЛИ ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.30")
		И ТекущаяВерсияКВП <> НоваяВерсияКВП И ТекущаяВерсияКВП <> "") Тогда
		
		СтрСообщения = "Конфигурация обновлена с версии " + ТекущаяВерсияКВП + " на версию " + НоваяВерсияКВП + ".";
		
		// Дополнительные действия.
		ЗаполнитьСпособыРаспределенияФактическихЗатратНаОбъекты_3031();
		СохранитьНастройкиПлатДокументовИКвитанций_3031();
		ОбработатьУчтенныеОтрицательныеОстаткиРасхождений_3031();
		УстановитьВариантНастройкиДляРасчетаНормативовПотребления_3031();
		
		Если НЕ Константы.УПЖКХ_ИспользоватьНовыйАлгоритмРасчетаЛьгот.Получить() Тогда
			ПроверитьНаличиеЛьготСОграничениемПоСумме_3031();
		КонецЕсли;
		
		// Установка номера версии информационной базы
		Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ_УПЖКХ",
								 УровеньЖурналаРегистрации.Информация, , ,
								 СтрСообщения);
		
		// сообщение об успешном обновлении информационной базы
		ДобавитьСообщениеПользователю(СтрСообщения, , Истина);
		
		ДобавитьОбработчикВСписокВыполненных("3031");
		
	КонецЕсли;
	
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	НоваяВерсияКВП   = "3.0.32.2";
	
	Если ((ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.32" ИЛИ ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.31")
		И ТекущаяВерсияКВП <> НоваяВерсияКВП И ТекущаяВерсияКВП <> "") Тогда
		
		СтрСообщения = "Конфигурация обновлена с версии " + ТекущаяВерсияКВП + " на версию " + НоваяВерсияКВП + ".";
		
		// Дополнительные действия.
		ПредупредитьПользователяОДвиженияхДокументаНачислениеУслугВСтороннейПрограмме_3_0_32_2(СтруктураРезультатаОбновления);
		
		// Установка номера версии информационной базы
		Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ_УПЖКХ",
								 УровеньЖурналаРегистрации.Информация, , ,
								 СтрСообщения);
		
		// сообщение об успешном обновлении информационной базы
		ДобавитьСообщениеПользователю(СтрСообщения, , Истина);
		
		ДобавитьОбработчикВСписокВыполненных("3032");
		
	КонецЕсли;
	
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	НоваяВерсияКВП   = "3.0.33.1";
	
	Если ((ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.33" ИЛИ ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.32")
		И ТекущаяВерсияКВП <> НоваяВерсияКВП И ТекущаяВерсияКВП <> "") Тогда
		
		СтрСообщения = "Конфигурация обновлена с версии " + ТекущаяВерсияКВП + " на версию " + НоваяВерсияКВП + ".";
		
		// Дополнительные действия.
		ЗаполнитьСсылкиВДокументахОтраженияОплат_3_0_33_1();
		
		// Установка номера версии информационной базы
		Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ_УПЖКХ",
								 УровеньЖурналаРегистрации.Информация, , ,
								 СтрСообщения);
		
		// сообщение об успешном обновлении информационной базы
		ДобавитьСообщениеПользователю(СтрСообщения, , Истина);
		
		ДобавитьОбработчикВСписокВыполненных("3033");
		
	КонецЕсли;
	
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	НоваяВерсияКВП   = "3.0.34.2";
	
	Если ((ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.34" ИЛИ ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.33")
		И ТекущаяВерсияКВП <> НоваяВерсияКВП И ТекущаяВерсияКВП <> "") Тогда
		
		СтрСообщения = "Конфигурация обновлена с версии " + ТекущаяВерсияКВП + " на версию " + НоваяВерсияКВП + ".";
		
		// Дополнительные действия.
		УстановитьТочностьОбъемовНачислений_3034();
		
		// Установка номера версии информационной базы
		Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ_УПЖКХ",
								 УровеньЖурналаРегистрации.Информация, , ,
								 СтрСообщения);
		
		// сообщение об успешном обновлении информационной базы
		ДобавитьСообщениеПользователю(СтрСообщения, , Истина);
		
		ДобавитьОбработчикВСписокВыполненных("3034");
		
	КонецЕсли;
	
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	НоваяВерсияКВП   = "3.0.35.3";
	
	Если ((ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.35" ИЛИ ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.34")
		И ТекущаяВерсияКВП <> НоваяВерсияКВП И ТекущаяВерсияКВП <> "") Тогда
		
		СтрСообщения = "Конфигурация обновлена с версии " + ТекущаяВерсияКВП + " на версию " + НоваяВерсияКВП + ".";
		
		// Дополнительные действия.
		ПометитьНаУдалениеНепроведенныеДокументыПаспортногоСтола_3035();
		ЗаполнитьФормулуРасчетаВДокументахНачисленияУслуг_3035();
		ИсключитьНекорректныеПараметрыИзСоставаШтрихкодаОрганизации_3035();
		ПереместитьНастройкиПользователяВХранилищеОбщихНастроек_3_0_36_3();
		
		// Установка номера версии информационной базы
		Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ_УПЖКХ",
								 УровеньЖурналаРегистрации.Информация, , ,
								 СтрСообщения);
		
		// сообщение об успешном обновлении информационной базы
		ДобавитьСообщениеПользователю(СтрСообщения, , Истина);
		
		ДобавитьОбработчикВСписокВыполненных("3035");
		
	КонецЕсли;
	
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	НоваяВерсияКВП   = "3.0.36.7";
	
	Если ((ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.36" ИЛИ ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.35")
		И ТекущаяВерсияКВП <> НоваяВерсияКВП И ТекущаяВерсияКВП <> "") Тогда
		
		СтрСообщения = "Конфигурация обновлена с версии " + ТекущаяВерсияКВП + " на версию " + НоваяВерсияКВП + ".";
		
		// Дополнительные действия.
		ОбработатьЗаявкиНаВыполнениеРаботАДС_3036();
		УстановитьВариантЗначенияДляРасширенныхНормПотребления_3036();
		ПерезаполнитьЗначенияРасширенныхНормПотребления_3036();
		
		// Обновление функционала из конфигурации ЖКХ 2.0 - версия 2.0.62.1.
		ДобавлениеРегламентированногоОтчетаФорма1СведенияОЖилФондеВСправочникРегламентированныеОтчеты_3036();
		ПредупредитьПользователяОДвиженияхДокументаКорректировкаНачислений_3036();
		ПерезаполнитьЗначенияДолейВДокументеВступлениеВТСЖ_3036();
		СформироватьСведенияОРаспределенииОДННаЛицевыеСчета_3036();
		СформироватьДвиженияПоПриходуРасхожденийОДНКУчетуВНачисленияхПоПУ_3036();
		ПерезаполнитьСведенияОбОбъектахВДокументеУстановкаТарифов_3036();
		
		СписокДокументовНачисленияСОшибкойСписанияРасходовОПУ = Обработки.Удалить_КВП_ОбновлениеИнформационнойБазы.Оповещения_ПолучитьСписокДокументовНачисленияСОшибкойСписанияРасходовОПУ();
		Если СписокДокументовНачисленияСОшибкойСписанияРасходовОПУ.Количество() > 0 Тогда
			ДобавитьВажноеОповещение("3.0.36",
									"Оповещения_ОшибкиСписанияРасходовОПУ",
									"Внимание! Обнаружены ошибки отражения списания показаний приборов учета.
									|Необходимо выполнить проверку документов начисления услуг по приборам учета.");
		КонецЕсли;
		
		// Установка номера версии информационной базы
		Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ_УПЖКХ",
								 УровеньЖурналаРегистрации.Информация, , ,
								 СтрСообщения);
		
		// сообщение об успешном обновлении информационной базы
		ДобавитьСообщениеПользователю(СтрСообщения, , Истина);
		
		ДобавитьОбработчикВСписокВыполненных("3036");
		
	КонецЕсли;
	
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	НоваяВерсияКВП   = "3.0.37.15";
	
	Если ((ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.37" ИЛИ ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.36")
		И ТекущаяВерсияКВП <> НоваяВерсияКВП И ТекущаяВерсияКВП <> "") Тогда
		
		СтрСообщения = "Конфигурация обновлена с версии " + ТекущаяВерсияКВП + " на версию " + НоваяВерсияКВП + ".";
		
		// Дополнительные действия.
		ЗаполнитьСпособЗачетаАвансовВДокументахОтражения_3037();
		ДобавлениеРегламентированногоОтчетаФормаN1ПУЖКХВСправочникРегламентированныеОтчеты_30371();
		ЗаполнениеВидаРассрочкиДокументаЗаявлениеНаРассрочку_3037();
		ПерезаполнитьДокументыРазовоеНачислениеУслуг_3037();
		ЗаполнитьВидПлатежейВРегистреСведенияОРассрочке_3037();
		ЗаполнитьПериодЗаписейРегистраЗависимостиУслуг_3038();
		
		// Переход к типовому механизму хранения контактной информации объектов.
		ОбновлениеИнформационнойБазыБП.ОбновитьТипыПредопределеннойКонтактнойИнформации();
		// Также выполняется процедура, предназначенная для перехода с редакции 2.0.
		// Это нужно при переходе на новую версию в рамках релизов ЖКХ 3.0.
		ВыполнитьПереносКонтактнойИнформацииИзРСАдресаВТабличныеЧастиСправочниковС20();
		
		// Установка номера версии информационной базы
		Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ_УПЖКХ",
								 УровеньЖурналаРегистрации.Информация, , ,
								 СтрСообщения);
		
		// сообщение об успешном обновлении информационной базы
		ДобавитьСообщениеПользователю(СтрСообщения, , Истина);
		
		ДобавитьОбработчикВСписокВыполненных("3037");
		
	КонецЕсли;
	
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	НоваяВерсияКВП   = "3.0.38.6";
	
	Если ((ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.38" ИЛИ ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.37")
		И ТекущаяВерсияКВП <> НоваяВерсияКВП И ТекущаяВерсияКВП <> "") Тогда
		
		СтрСообщения = "Конфигурация обновлена с версии " + ТекущаяВерсияКВП + " на версию " + НоваяВерсияКВП + ".";
		
		// Дополнительные действия.
		ОбновитьЭтажностьПодъездов_ПереходКНовомуМеханизмуХраненияЭтажностиПодъездов_3_0_38_5();
		ОбновитьПериодыСоставленияСметыВДокументеСметаТСЖ_3_0_38_5();
		
		// Установка номера версии информационной базы
		Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ_УПЖКХ",
								 УровеньЖурналаРегистрации.Информация, , ,
								 СтрСообщения);
		
		// сообщение об успешном обновлении информационной базы
		ДобавитьСообщениеПользователю(СтрСообщения, , Истина);
		
		ДобавитьОбработчикВСписокВыполненных("3038");
		
	КонецЕсли;
	
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	НоваяВерсияКВП   = "3.0.39.8";
	
	Если ((ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.39" ИЛИ ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.38")
		И ТекущаяВерсияКВП <> НоваяВерсияКВП И ТекущаяВерсияКВП <> "") Тогда
		
		СтрСообщения = "Конфигурация обновлена с версии " + ТекущаяВерсияКВП + " на версию " + НоваяВерсияКВП + ".";
		
		// Дополнительные действия.
		ЗаполнитьКонтактноеЛицоЛицевогоСчетаВДокументахЗаявокАДС_3_0_39_1();
		ЗаполнитьНовыйРегистрСведенийОРассрочкеДаннымиПоДокументамЗаявленияНаРассрочку_3_0_39_1();
		ОбновитьВидыТарифовВДокументахУстановкаТарифовИИхДвиженияВРСТарифы_3_0_39_6();
		КонвертироватьНачисленияПоРассрочкеВДокументНачисленияУслугПоРассрочке_3_0_39_6();
		ЗаполнитьНовыйРеквизитДоговорОператораПлатежейДокументаРегистрацияОплаты_3_0_39_8();
		
		// Обновление функционала из конфигурации ЖКХ 2.0 - версия Н2.0.64.7.
		ЗаполнитьОбъектыСРаспределеннымРасходомОДНВДокументахНачисленияУслугПоПУ_3_0_39_6();
		ОбновитьЗначенияЦенВДокументахПодомовогоУчетаИИхДвиженияхВРНЗатратыПодомовогоУчета_3_0_39_6();
		ОбновитьНастройку_СпособРаспределенияПоказанийКоллективногоПрибораУчета_3_0_39_6();
		
		// Установка номера версии информационной базы
		Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ_УПЖКХ",
								 УровеньЖурналаРегистрации.Информация, , ,
								 СтрСообщения);
		
		// сообщение об успешном обновлении информационной базы
		ДобавитьСообщениеПользователю(СтрСообщения, , Истина);
		
		ДобавитьОбработчикВСписокВыполненных("3039");
		
	КонецЕсли;
	
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	НоваяВерсияКВП   = "3.0.40.6";
	
	Если ((ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.40" ИЛИ ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.39")
		И ТекущаяВерсияКВП <> НоваяВерсияКВП И ТекущаяВерсияКВП <> "") Тогда
		
		СтрСообщения = "Конфигурация обновлена с версии " + ТекущаяВерсияКВП + " на версию " + НоваяВерсияКВП + ".";
		
		// Дополнительные действия.
		ЗаполнитьНовыйРегистрСведенийОРассрочкеДаннымиПоДокументамЗаявленияНаРассрочку_3_0_39_1();
		ИсправитьМесяцНачисленияВУпрРегистрахНакопленияПоНачислениюУслуг_3_0_40_1();
		ПеренестиСохраненныеПараметрыОтчетаПлатежныйДокументВХранилищеОбщихНастроек_3_0_40_3();
		ПереносДанныхИзРегистраКВП_ЛицевыеСчетаВРегистрКВП_УчетКоличестваЖильцовПоЛицевымСчетам_3_0_40_4();
		ПоискНекорректныхДанныхПоРассрочке_3_0_40_4(СтруктураРезультатаОбновления);
		ПерезаполнитьДатыОкончанияДействияИПрекращенияЛьгот_3_0_40_5();
		
		// Обновление функционала из конфигурации ЖКХ 2.0 - версия 2.0.64.13.
		ПерезаполнитьЗначенияКоэффициентовВДокументеВводПоказанийСчетчика_3_0_40_1();
		
		// Установка номера версии информационной базы
		Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ_УПЖКХ",
								 УровеньЖурналаРегистрации.Информация, , ,
								 СтрСообщения);
		
		// сообщение об успешном обновлении информационной базы
		ДобавитьСообщениеПользователю(СтрСообщения, , Истина);
		
		ДобавитьОбработчикВСписокВыполненных("3040");
		
	КонецЕсли;
	
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	НоваяВерсияКВП   = "3.0.41.13";
	
	Если ((ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.41" ИЛИ ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.40")
		И ТекущаяВерсияКВП <> НоваяВерсияКВП И ТекущаяВерсияКВП <> "") Тогда
		
		СтрСообщения = "Конфигурация обновлена с версии " + ТекущаяВерсияКВП + " на версию " + НоваяВерсияКВП + ".";
		
		// Дополнительные действия.
		ЗаполнитьНовыйСправочникНаОсновеКонстантыУслугиКапремонта_3_0_41_7();
		ЗаполнитьНовыйРегистрСведенийНастроекФормированияПДНаОсновеРегистраСведенийУчетнаяПолитикаЖКХ_3_0_41_7();
		ЗаполнитьВариантРаспределенияОплатКапРемонта_3_0_41_10();
		ЗаполнитьСведенияОбОбслуживающихЗданияОрганизациях_3_0_41_10();
		УстановитьФорматКодировкиТекстQRШКПоумолчанию_3_0_41_10();
		
		ОбработатьЗаписиВРегистреУПЖКХ_ВзаимосвязьОборудованияИОбъектовУчета_3_0_41_13();
		ВыполнитьПереносПризнаковНеисправностейВДокументахЗаявкаАДС_3_0_41_13();
		ЗаполнитьПризнакОбслуживанияВРегистреУПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях_3_0_41_13();
		ЗаполнитьОбязательныеПоляВУчетнойПолитикеЖКХ_3_0_41_13();
		ЗаполнитьОбязательныеПоляВНастройкахФормированияПлатежногоДокумента_3_0_41_13();
		
		// Установка номера версии информационной базы
		Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ_УПЖКХ",
								 УровеньЖурналаРегистрации.Информация, , ,
								 СтрСообщения);
		
		// сообщение об успешном обновлении информационной базы
		ДобавитьСообщениеПользователю(СтрСообщения, , Истина);
		
		ДобавитьОбработчикВСписокВыполненных("3041");
		
	КонецЕсли;
	
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	НоваяВерсияКВП   = "3.0.42.8";
	
	Если ((ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.42" ИЛИ ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.41")
		И ТекущаяВерсияКВП <> НоваяВерсияКВП И ТекущаяВерсияКВП <> "") Тогда
		
		СтрСообщения = "Конфигурация обновлена с версии " + ТекущаяВерсияКВП + " на версию " + НоваяВерсияКВП + ".";
		
		// Дополнительные действия.
		ЗаполнитьПричинуОтключенияПУВДокументеУстановкиСчетчиковИРегистреЗакрепленныхСчетчиков_3_0_42_2();
		ЗаполнитьЗначениеНовогоРесурсаФорматПериодаОплатыДляНастроекФормированияПД_3_0_42_2();
		ЗаполнитьТаблицыНастроекВыгрузкиЛСВариантовОбменаДаннымиССайтом_3_0_42_7();
		ПроверитьКорректностьПроведенияДокументовУстановкаТарифов_3_0_42_8(СтруктураРезультатаОбновления);
		
		// Установка номера версии информационной базы
		Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ_УПЖКХ",
								 УровеньЖурналаРегистрации.Информация, , ,
								 СтрСообщения);
		
		// сообщение об успешном обновлении информационной базы
		ДобавитьСообщениеПользователю(СтрСообщения, , Истина);
		
		ДобавитьОбработчикВСписокВыполненных("3042");
		
	КонецЕсли;
	
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	НоваяВерсияКВП   = "3.0.43.27";
	
	Если ((ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.43" ИЛИ ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.42")
		И ТекущаяВерсияКВП <> НоваяВерсияКВП И ТекущаяВерсияКВП <> "") Тогда
		
		СтрСообщения = "Конфигурация обновлена с версии " + ТекущаяВерсияКВП + " на версию " + НоваяВерсияКВП + ".";
		
		// Дополнительные действия.
		ЗаполнитьСпособУчетаОборудованияВРеглУчете_3_0_43_3();
		ЗаполнитьКоличествоВСведенияхОбУстановленномНаОбъектахУчетаОборудовании_3_0_43_3();
		ПроверитьКорректностьЗаполненияВидовУслугВСправочникеУслуг_3_0_43_4(СтруктураРезультатаОбновления);
		ЗаполнитьКоэффициентыТемпературныйИТрансформацииВРегистреПоказанийСчетчиков_3_0_43_4();
		ЗаполнитьОтклонениеВЧасовыхЗонахПоOslon_3_0_43_4();
		ЗаполнитьСтавкиПениВСправочникеНастроекРасчетаПени_3_0_43_4();
		ПеренестиНастройкиКвитанцийИзвещений_3_0_43_7();
		
		// Обновление ключевой ставки ЦБ при переходе на версию 3.0.43.10.
		РегистрыСведений.УПЖКХ_КлючеваяСтавкаЦБ.ОбновитьКлючевыеСтавкиЦБ();
		
		// Обработчик переноса данных в константах.
		Константы_ВыполнитьПереносДанных();
		
		смсОбновлениеИнформационнойБазыСервер.ЗаполнитьРегистрНакопления_смсСтатистикаОтправкиСообщений_1_0_2_1();
		
		ОбработатьОКТМОЗданий_3_0_43_20();
		ОбработатьПереченьКоммунальныхУслугВДоговорахУправления_3_0_43_20();
		ПеренестиСведенияОВзаиморасчетахПоЛСВДокументУправленияСведениямиДляВзаиморасчетовПоЛС_3_0_43_21();
		ЗаполнитьРесурсДатаИзмененияРСЗакрепленныеСчетчики_3_0_43_22();
		ОчиститьНулевыеОКТМОВЗданиях_3_0_43_22();
		ВыполнитьУстановкуКонстантВестиУчетПоОрганизациям_3_0_43_23();
		ОбработатьКодыЭлементовСправочникаНастройкиЗагрузкиПослеУвеличенияДлиныКода_3_0_43_27();
		
		// Установка номера версии информационной базы
		Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
		
		ЗаписьЖурналаРегистрации("ИнформационнаяБаза.ОбновлениеИБ_УПЖКХ",
								 УровеньЖурналаРегистрации.Информация, , ,
								 СтрСообщения);
		
		// сообщение об успешном обновлении информационной базы
		ДобавитьСообщениеПользователю(СтрСообщения, , Истина);
		
		ДобавитьОбработчикВСписокВыполненных("3043");
		
	КонецЕсли;
	
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	НоваяВерсияКВП   = "3.0.44.19";
	
	Если ((ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.44" ИЛИ ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.43")
		И ТекущаяВерсияКВП <> НоваяВерсияКВП И ТекущаяВерсияКВП <> "")
		И Не Отказ Тогда
		
		// Дополнительные действия.
		ЗаполнитьСвязиДокументовОплатРегистрацииОплатИТиповыхДокументовОтраженияВРеглУчете_3_0_44_1();
		ВыполнитьОчисткуДвиженийДокументовОтраженияНачисленийВРегламентированномУчете_3_0_44_1();
		ЗаполнитьРеквизитРазделУчетаТабличнойЧастиДокументаВводНачальногоСальдо_3_0_44_1();
		ПроверитьНеобходимостьИзмененияВеденияУчетаПоПарковочнымМестам_3_0_44_8();
		ЗаполнитьНовыйРегистрСведенийНастроекПредоставленияИРасчетаЛьгот_3_0_44_8();
		Справочники.УПЖКХ_ГруппыУслуг.ОбновитьДанныеПредопределенныхВидовГрупп(ПредопределенноеЗначение("Справочник.УПЖКХ_ГруппыУслуг.НастройкиРасчётаЛьгот"));
		ОбработатьКодыВидовУслугВГИСЖКХПослеИзмененияТипа_3_0_44_8();
		ЗаполнитьНастройкуНачисленияПениНаЗакрытыеЛицевыеСчета_3_0_44_12();
		// В состав задач бухгалтера добавлены 2 регл. отчета подсистемы ЖКХ.
		Справочники.ЗадачиБухгалтера.ЗаполнитьТребованиямиНормативныхДокументов();
		ОбработатьЗаписиРегистраСведенияОДоговорахУправленияЗданиями_3_0_44_13();
		
		ОбновитьНастройку_ВариантИзмененияЗадолженностиВКорректировкахНачислений_3_0_44_14();
		ОбработатьСуммыПерерасчетаВДокументахКорректировкиНачисленийСВидомОперацииНедопоставка_3_0_44_14();
		ИсправитьОтрицательныеДвиженияПоКУДиРТиповымиДокументамиПоступленияОплат_3_0_44_14();
		ЗаполнитьРегистрНакопленияДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ_3_0_44_19();
		ОткорректироватьДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ_3_0_44_19(СтруктураРезультатаОбновления);
		
		ВыполнитьДействияПриОсобомОбновлении(НоваяВерсияКВП, СтруктураРезультатаОбновления);
		
		// Фиксируем обновление, если не было ошибок.
		Если Не Отказ Тогда
			
			// Установка номера версии информационной базы.
			Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
			
			// Сообщение об успешном обновлении.
			СообщитьОбУспешномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
			// Добавление текущего обработчика в список выполненных.
			ДобавитьОбработчикВСписокВыполненных("3044");
			
		Иначе
			
			// Сообщение о неудачной попытке обновления.
			СообщитьОНеудачномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	НоваяВерсияКВП   = "3.0.46.3";
	
	Если ((ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.46" ИЛИ ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.44")
		И ТекущаяВерсияКВП <> НоваяВерсияКВП И ТекущаяВерсияКВП <> "")
		И Не Отказ Тогда
		
		// Дополнительные действия.
		
		ПеренестиЗначениеРеквизитаПериодКорректировкиДокументаКорректировкаНачисления_3_0_46_1();
		ЗаполнитьРесурсДатаИзмененияРСНазначенныеЛьготы_3_0_46_1();
		
		// Идут по порядку.
		ЗаполнитьПредопределенныеВидыКонтактнойИнформации_3_0_46_2();
		ВыполнитьЗаменуЗначенийПредопределенныхДанных_3_0_46_2();
		
		// Фиксируем обновление, если не было ошибок.
		Если Не Отказ Тогда
			
			// Установка номера версии информационной базы.
			Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
			
			// Сообщение об успешном обновлении.
			СообщитьОбУспешномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
			// Добавление текущего обработчика в список выполненных.
			ДобавитьОбработчикВСписокВыполненных("3046");
			
		Иначе
			
			// Сообщение о неудачной попытке обновления.
			СообщитьОНеудачномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	НоваяВерсияКВП   = "3.0.47.5";
	
	Если ((ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.47" ИЛИ ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.46")
		И ТекущаяВерсияКВП <> НоваяВерсияКВП И ТекущаяВерсияКВП <> "")
		И Не Отказ Тогда
		
		// Дополнительные действия.
		ЗаполнитьСвязиДокументовОплатРегистрацииОплатИТиповыхДокументовОтраженияВРеглУчете_3_0_44_1();
		ПроизвестиПересчетРазмераПроцентнойСтавкиРассрочкиНаГодовую_3_0_47_3();
		
		// Фиксируем обновление, если не было ошибок.
		Если Не Отказ Тогда
			
			// Установка номера версии информационной базы.
			Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
			
			// Сообщение об успешном обновлении.
			СообщитьОбУспешномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
			// Добавление текущего обработчика в список выполненных.
			ДобавитьОбработчикВСписокВыполненных("3047");
			
		Иначе
			
			// Сообщение о неудачной попытке обновления.
			СообщитьОНеудачномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	НоваяВерсияКВП   = "3.0.48.1";
	
	Если ((ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.48" ИЛИ ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.47")
		И ТекущаяВерсияКВП <> НоваяВерсияКВП И ТекущаяВерсияКВП <> "")
		И Не Отказ Тогда
		
		// Дополнительные действия.
		
		// Фиксируем обновление, если не было ошибок.
		Если Не Отказ Тогда
			
			// Установка номера версии информационной базы.
			Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
			
			// Сообщение об успешном обновлении.
			СообщитьОбУспешномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
			// Добавление текущего обработчика в список выполненных.
			ДобавитьОбработчикВСписокВыполненных("3048");
			
		Иначе
			
			// Сообщение о неудачной попытке обновления.
			СообщитьОНеудачномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	НоваяВерсияКВП   = "3.0.49.7";
	
	Если ((ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.49" ИЛИ ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.48")
		И ТекущаяВерсияКВП <> НоваяВерсияКВП И ТекущаяВерсияКВП <> "")
		И Не Отказ Тогда
		
		// Дополнительные действия.
		ВыполнитьЗаполнениеСвойствРодительскихПредопределенныхСчетов_3_0_49_1();
		ЗаполнитьВариантОпределенияКоличестваЖильцовПриОтсутствииПроживающихИлиЗарегистрированныхВНормахПотребленияУслуг_3_0_49_3();
		ВыполнитьПереносНастроекФормированияПлатежныхДокументовИОбменаДаннымиССайтомВНовыеСправочники_3_0_49_3();
		ВыполнитьПереносРеквизитовОбъектовТиповойБП_3_0_49_3();
		ПерезаполнитьДолюСобственностиВДокументахУстановкаСобственниковНаСервере_3_0_49_6();
		ЗаполнитьРСТипыПомещенийДляРаспределенияРасходаКПУ_3_0_49_6();
		ЗаполнитьЗначениеОтбораКвитанцийВНастройкахСбораДанныхДляКвитанцийИОбменов_3_0_49_7();
		ВыполнитьЗаменуВидовНачисленияДляДвиженийДокументаЗакрытиеПериодаПоНачислениямЖКЖ_3_0_49_7();
		
		// Выполняем обработчик еще раз - для тех информационных баз, в которых некорректное было произведено начальное заполнение.
		ЗаполнитьПредопределенныеВидыКонтактнойИнформации_3_0_46_2();
		
		// Фиксируем обновление, если не было ошибок.
		Если Не Отказ Тогда
			
			// Установка номера версии информационной базы.
			Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
			
			// Сообщение об успешном обновлении.
			СообщитьОбУспешномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
			// Добавление текущего обработчика в список выполненных.
			ДобавитьОбработчикВСписокВыполненных("3049");
			
		Иначе
			
			// Сообщение о неудачной попытке обновления.
			СообщитьОНеудачномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	НоваяВерсияКВП   = "3.0.50.2";
	
	Если ((ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.50" ИЛИ ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.49")
		И ТекущаяВерсияКВП <> НоваяВерсияКВП И ТекущаяВерсияКВП <> "")
		И Не Отказ Тогда
		
		// Дополнительные действия.
		ЗаполнитьВариантРаспределенияИТарифыВДокументеВводФактическихЗатратНаОбъект_3_0_50_2();
		
		// Фиксируем обновление, если не было ошибок.
		Если Не Отказ Тогда
			
			// Установка номера версии информационной базы.
			Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
			
			// Сообщение об успешном обновлении.
			СообщитьОбУспешномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
			// Добавление текущего обработчика в список выполненных.
			ДобавитьОбработчикВСписокВыполненных("3050");
			
		Иначе
			
			// Сообщение о неудачной попытке обновления.
			СообщитьОНеудачномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	НоваяВерсияКВП   = "3.0.51.8";
	
	Если ((ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.51" ИЛИ ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.50")
		И ТекущаяВерсияКВП <> НоваяВерсияКВП И ТекущаяВерсияКВП <> "")
		И Не Отказ Тогда
		
		// Дополнительные действия.
		ЗаполнитьВариантНастройкиФорматаРеестраПоказанийПриборовУчета_3_0_51_2();
		ЗаполнитьТипФондаВЭлементахСправочникаВидыПомещений_3_0_51_3();
		ПроверитьНаличиеНачисленийПоНесколькимДоговорам_3_0_51_6();
		
		// Фиксируем обновление, если не было ошибок.
		Если Не Отказ Тогда
			
			// Установка номера версии информационной базы.
			Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
			
			// Сообщение об успешном обновлении.
			СообщитьОбУспешномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
			// Добавление текущего обработчика в список выполненных.
			ДобавитьОбработчикВСписокВыполненных("3051");
			
		Иначе
			
			// Сообщение о неудачной попытке обновления.
			СообщитьОНеудачномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	НоваяВерсияКВП   = "3.0.52.3";
	
	Если ((ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.52" ИЛИ ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.51")
		И ТекущаяВерсияКВП <> НоваяВерсияКВП И ТекущаяВерсияКВП <> "")
		И Не Отказ Тогда
		
		// Дополнительные действия.
		ПроверитьНаличиеВыбранногоДополнительногоРеквизитаДляQRСуммаНачисленияПениСУчетомНачСальдоПени_3_0_52_1();
		ЗаполнитьРесурсВидЖильцовКоторымПредоставляютсяЛьготыРСНастройкиПредоставленияИРасчетаЛьгот_3_0_52_2();
		ЗаполнитьЗначениеКонстантыИспользоватьФункционалВЕЖ_3_0_52_2();
		ЗаполнитьЗначенияПредставленияУслугСОИПоУмолчанию_3_0_52_2();
		УстановитьНастройкиМногопоточностиПоУмолчанию_3_0_52_2();
		УстановитьМаксимальноеКоличествоЛСВФайлеОбменаПоУмолчанию_3_0_52_2();
		ЗаполнитьЗначенияДополнительногоРеквизитаQRШтрихкодаКодУслуги_3_0_52_3();
		
		// Фиксируем обновление, если не было ошибок.
		Если Не Отказ Тогда
			
			// Установка номера версии информационной базы.
			Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
			
			// Сообщение об успешном обновлении.
			СообщитьОбУспешномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
			// Добавление текущего обработчика в список выполненных.
			ДобавитьОбработчикВСписокВыполненных("3052");
			
		Иначе
			
			// Сообщение о неудачной попытке обновления.
			СообщитьОНеудачномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	НоваяВерсияКВП   = "3.0.53.2";
	
	Если ((ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.53" ИЛИ ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.52")
		И ТекущаяВерсияКВП <> НоваяВерсияКВП И ТекущаяВерсияКВП <> "")
		И Не Отказ Тогда
		
		// Дополнительные действия.
		ОтключитьНастройкуРазрешитьПечатьЧековПриОплатеБанковскойКартой_3_0_53_1();
		ЗаполнитьРегистрСведенийПриборыУчетаВыгруженныеВГИСЖКХ_3_0_53_2();
		ОпределитьИспользуетсяЛиФункционалУчетаТСЖ_3_0_53_2();
		ПеренестиСведенияОСобственностиИзЛицевыхСчетовИЖильцов_3_0_53_2();
		ЗаполнитьНастройкиКонтроляПоказанийПриборовУчета_3_0_53_2();
		
		// Фиксируем обновление, если не было ошибок.
		Если Не Отказ Тогда
			
			// Установка номера версии информационной базы.
			Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
			
			// Сообщение об успешном обновлении.
			СообщитьОбУспешномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
			// Добавление текущего обработчика в список выполненных.
			ДобавитьОбработчикВСписокВыполненных("3053");
			
		Иначе
			
			// Сообщение о неудачной попытке обновления.
			СообщитьОНеудачномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	НоваяВерсияКВП   = "3.0.54.2";
	
	Если ((ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.54" ИЛИ ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.53")
		И ТекущаяВерсияКВП <> НоваяВерсияКВП И ТекущаяВерсияКВП <> "")
		И Не Отказ Тогда
		
		// Дополнительные действия.
		ОбработатьНомераДокументовЗаявкаНаВыполнениеРаботПослеУвеличенияДлиныНомера_3_0_54_2();
		
		// Фиксируем обновление, если не было ошибок.
		Если Не Отказ Тогда
			
			// Установка номера версии информационной базы.
			Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
			
			// Сообщение об успешном обновлении.
			СообщитьОбУспешномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
			// Добавление текущего обработчика в список выполненных.
			ДобавитьОбработчикВСписокВыполненных("3054");
			
		Иначе
			
			// Сообщение о неудачной попытке обновления.
			СообщитьОНеудачномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	НоваяВерсияКВП   = "3.0.55.2";
	
	Если ((ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.55" ИЛИ ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.54")
		И ТекущаяВерсияКВП <> НоваяВерсияКВП И ТекущаяВерсияКВП <> "")
		И Не Отказ Тогда
		
		// Дополнительные действия.
		ОбновитьЗначениеРесурсаФормаКвитанцииВНастройкахФормированияПлатежногоДокумента_3_0_54_3();
		УстановитьНастройкуГЦЖС_ОбрезатьПрефиксЛС_В_Истину_3_0_54_3();
		ЗаполнитьУсловияДПОИ_3_0_55_2();
		
		// Фиксируем обновление, если не было ошибок.
		Если Не Отказ Тогда
			
			// Установка номера версии информационной базы.
			Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
			
			// Сообщение об успешном обновлении.
			СообщитьОбУспешномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
			// Добавление текущего обработчика в список выполненных.
			ДобавитьОбработчикВСписокВыполненных("3055");
			
		Иначе
			
			// Сообщение о неудачной попытке обновления.
			СообщитьОНеудачномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	НоваяВерсияКВП   = "3.0.56.2";
	
	Если ((ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.56" ИЛИ ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.55")
		И ТекущаяВерсияКВП <> НоваяВерсияКВП И ТекущаяВерсияКВП <> "")
		И Не Отказ Тогда
		
		// Дополнительные действия.
		
		// Фиксируем обновление, если не было ошибок.
		Если Не Отказ Тогда
			
			// Установка номера версии информационной базы.
			Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
			
			// Сообщение об успешном обновлении.
			СообщитьОбУспешномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
			// Добавление текущего обработчика в список выполненных.
			ДобавитьОбработчикВСписокВыполненных("3056");
			
		Иначе
			
			// Сообщение о неудачной попытке обновления.
			СообщитьОНеудачномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	НоваяВерсияКВП   = "3.0.57.3";
	
	Если ((ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.57" ИЛИ ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.56")
		И ТекущаяВерсияКВП <> НоваяВерсияКВП И ТекущаяВерсияКВП <> "")
		И Не Отказ Тогда
		
		// Дополнительные действия.
		УстановитьЗначениеНастройкиВариантЗагрузкиНулевыхПоказанийВСправочникеНастройкиЗагрузкиВыгрузки_3_0_57_3();
		
		// Фиксируем обновление, если не было ошибок.
		Если Не Отказ Тогда
			
			// Установка номера версии информационной базы.
			Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
			
			// Сообщение об успешном обновлении.
			СообщитьОбУспешномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
			// Добавление текущего обработчика в список выполненных.
			ДобавитьОбработчикВСписокВыполненных("3057");
			
		Иначе
			
			// Сообщение о неудачной попытке обновления.
			СообщитьОНеудачномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	НоваяВерсияКВП   = "3.0.58.4";
	
	Если ((ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.58" ИЛИ ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.57")
		И ТекущаяВерсияКВП <> НоваяВерсияКВП И ТекущаяВерсияКВП <> "")
		И Не Отказ Тогда
		
		// Дополнительные действия.
		ЗаполнитьДокументыНачисленияУслугДаннымиПоНачисленнымЗависимымУслугам_3_0_58_1();
		
		// Фиксируем обновление, если не было ошибок.
		Если Не Отказ Тогда
			
			// Установка номера версии информационной базы.
			Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
			
			// Сообщение об успешном обновлении.
			СообщитьОбУспешномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
			// Добавление текущего обработчика в список выполненных.
			ДобавитьОбработчикВСписокВыполненных("3058");
			
		Иначе
			
			// Сообщение о неудачной попытке обновления.
			СообщитьОНеудачномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	НоваяВерсияКВП   = "3.0.59.5";
	
	Если ((ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.59" ИЛИ ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.58")
		И ТекущаяВерсияКВП <> НоваяВерсияКВП И ТекущаяВерсияКВП <> "")
		И Не Отказ Тогда
		
		// Дополнительные действия.
		УстановитьЗначенияРесурсаНаименованиеПлатежаНазначениеВНастройкахФормированияПлатежногоДокумента_3_0_59_3();
		
		// Фиксируем обновление, если не было ошибок.
		Если Не Отказ Тогда
			
			// Установка номера версии информационной базы.
			Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
			
			// Сообщение об успешном обновлении.
			СообщитьОбУспешномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
			// Добавление текущего обработчика в список выполненных.
			ДобавитьОбработчикВСписокВыполненных("3059");
			
		Иначе
			
			// Сообщение о неудачной попытке обновления.
			СообщитьОНеудачномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	НоваяВерсияКВП   = "3.0.60.6";
	
	Если ((ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.60" ИЛИ ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.59")
		И ТекущаяВерсияКВП <> НоваяВерсияКВП И ТекущаяВерсияКВП <> "")
		И Не Отказ Тогда
		
		// Дополнительные действия.
		ЗаполнитьСостояниеПУДляСторноЗависимыхУслугВДокументахНачисленияУслуг_3_0_60_3();
		ЗаполнитьРесурсыТипЖильцовРСНастройкиПредоставленияИРасчетаЛьгот_3_0_60_3();
		
		// Фиксируем обновление, если не было ошибок.
		Если Не Отказ Тогда
			
			// Установка номера версии информационной базы.
			Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
			
			// Сообщение об успешном обновлении.
			СообщитьОбУспешномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
			// Добавление текущего обработчика в список выполненных.
			ДобавитьОбработчикВСписокВыполненных("3060");
			
		Иначе
			
			// Сообщение о неудачной попытке обновления.
			СообщитьОНеудачномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	НоваяВерсияКВП   = "3.0.61.4";
	
	Если ((ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.61" ИЛИ ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.60")
		И ТекущаяВерсияКВП <> НоваяВерсияКВП И ТекущаяВерсияКВП <> "")
		И Не Отказ Тогда
		
		// Дополнительные действия.
		
		// Фиксируем обновление, если не было ошибок.
		Если Не Отказ Тогда
			
			// Установка номера версии информационной базы.
			Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
			
			// Сообщение об успешном обновлении.
			СообщитьОбУспешномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
			// Добавление текущего обработчика в список выполненных.
			ДобавитьОбработчикВСписокВыполненных("3061");
			
		Иначе
			
			// Сообщение о неудачной попытке обновления.
			СообщитьОНеудачномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	НоваяВерсияКВП   = "3.0.62.2";
	
	Если ((ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.62" ИЛИ ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.61")
		И ТекущаяВерсияКВП <> НоваяВерсияКВП И ТекущаяВерсияКВП <> "")
		И Не Отказ Тогда
		
		// Дополнительные действия.
		ЗаполнитьНастройкуОтражатьВзаиморасчетыПоКапремонту_3_0_62_2();
		УстановитьСчетаУчетаПоПениЗаКапремонт_3_0_62_2();
		
		// Фиксируем обновление, если не было ошибок.
		Если Не Отказ Тогда
			
			// Установка номера версии информационной базы.
			Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
			
			// Сообщение об успешном обновлении.
			СообщитьОбУспешномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
			// Добавление текущего обработчика в список выполненных.
			ДобавитьОбработчикВСписокВыполненных("3062");
			
		Иначе
			
			// Сообщение о неудачной попытке обновления.
			СообщитьОНеудачномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	НоваяВерсияКВП   = "3.0.63.2";
	
	Если ((ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.63" ИЛИ ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.62")
		И ТекущаяВерсияКВП <> НоваяВерсияКВП И ТекущаяВерсияКВП <> "")
		И Не Отказ Тогда
		
		// Дополнительные действия.
		
		// Фиксируем обновление, если не было ошибок.
		Если Не Отказ Тогда
			
			// Установка номера версии информационной базы.
			Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
			
			// Сообщение об успешном обновлении.
			СообщитьОбУспешномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
			// Добавление текущего обработчика в список выполненных.
			ДобавитьОбработчикВСписокВыполненных("3063");
			
		Иначе
			
			// Сообщение о неудачной попытке обновления.
			СообщитьОНеудачномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	НоваяВерсияКВП   = "3.0.64.11";
	
	Если ((ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.64" ИЛИ ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.63")
		И ТекущаяВерсияКВП <> НоваяВерсияКВП И ТекущаяВерсияКВП <> "")
		И Не Отказ Тогда
		
		// Дополнительные действия.
		ДозаполнитьДокументыВводаПоказанийНовымиРеквизитамиТЧ_3_0_64_3();
		ОтключитьФормированиеШтрихкодовДляОплатыОнлайн_3_0_64_7();
		ЗаполнитьПолеКоэффициентВРегистреСведенийУслугиОбщедомовогоСчетчика_3_0_64_8();
		ЗаполнитьНастройкуРасчетногоСчетаВСбореДанныхДляКвитанцийИОбменов_3_0_64_10();
		
		// Фиксируем обновление, если не было ошибок.
		Если Не Отказ Тогда
			
			// Установка номера версии информационной базы.
			Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
			
			// Сообщение об успешном обновлении.
			СообщитьОбУспешномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
			// Добавление текущего обработчика в список выполненных.
			ДобавитьОбработчикВСписокВыполненных("3064");
			
		Иначе
			
			// Сообщение о неудачной попытке обновления.
			СообщитьОНеудачномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	НоваяВерсияКВП   = "3.0.65.9";
	
	Если ((ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.65" ИЛИ ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.64")
		И ТекущаяВерсияКВП <> НоваяВерсияКВП И ТекущаяВерсияКВП <> "")
		И Не Отказ Тогда
		
		// Дополнительные действия.
		
		ЗаполнитьСвязьДокументовВводаПоказанийСчетчикаИКорректировкаНачислений_3_0_65_3();
		ПерезаполнениеДокументовУправленияДоговорамиПоставщиковИДоговоровПоставщиков_3_0_65_6();
		ЗаполнитьЗначениеРесурсаЧислоНачалаПериодаПриемаПоказанийУчетнойПолитикиЖКХ_3_0_65_7();
		ЗаполнитьСоставДополнительныхРеквизитовQRПоКапитальномуРемонту_3_0_65_8();
		ЗаполнитьИдентификаторыДляФормулВТипахПлощадейЗданияИПлощадяхПомещения_3_0_65_9();
		ЗаполнитьФормулыРасчетаВНормахПотребленияУслуг_3_0_65_9();
		
		// Фиксируем обновление, если не было ошибок.
		Если Не Отказ Тогда
			
			// Установка номера версии информационной базы.
			Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
			
			// Сообщение об успешном обновлении.
			СообщитьОбУспешномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
			// Добавление текущего обработчика в список выполненных.
			ДобавитьОбработчикВСписокВыполненных("3065");
			
		Иначе
			
			// Сообщение о неудачной попытке обновления.
			СообщитьОНеудачномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	НоваяВерсияКВП   = "3.0.66.7";
	
	Если ((ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.66" ИЛИ ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.65")
		И ТекущаяВерсияКВП <> НоваяВерсияКВП И ТекущаяВерсияКВП <> "")
		И Не Отказ Тогда
		
		// Дополнительные действия.
		ЗаполнитьИнформациюОНаличииПрисоединенныхФайлов_3_0_66_2();
		ПерезаполнитьНастройкуЗагрузкиРеестровПУОВариантеЗагрузкиНулевыхПоказаний_3_0_66_4();
		Справочники.УПЖКХ_ГруппыУслуг.ОбновитьДанныеПредопределенныхВидовГрупп(ПредопределенноеЗначение("Справочник.УПЖКХ_ГруппыУслуг.НастройкиОтраженияНачислений"));
		ЗаполнитьРеквизитОтноситсяКМОПВЭлементахСправочникаВидыПомещений_3_0_66_5();
		ПерезаполнитьСпособОтраженияПениВРеглУчете_3_0_66_5();
		ЗаполнитьРесурсСчетаУчетаДляОтраженияПениКапремонт_3_0_66_5();
		ВыполнитьПереносНастроекВСправочникУПЖКХ_НастройкиУниверсальнойВыгрузкиДанных_3_0_66_6();
		ИспользоватьРассылкуКвитанцийПоЭлектроннойПочте_3_0_66_6();
		ЗаполнитьКодОрганизацииДляШтрихКодаПоУслугамКРВНастройкахФормированияПлатежногоДокумента_3_0_66_7();
		ДополнитьТабличнуюЧастьКорректировкиНачисленийУчитывающиеЗависимыеУслугиЗависимымиУслугами_3_0_66_7();
		
		// Фиксируем обновление, если не было ошибок.
		Если Не Отказ Тогда
			
			// Установка номера версии информационной базы.
			Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
			
			// Сообщение об успешном обновлении.
			СообщитьОбУспешномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
			// Добавление текущего обработчика в список выполненных.
			ДобавитьОбработчикВСписокВыполненных("3066");
			
		Иначе
			
			// Сообщение о неудачной попытке обновления.
			СообщитьОНеудачномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	НоваяВерсияКВП   = "3.0.67.11";
	
	Если ((ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.67" ИЛИ ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.66")
		И ТекущаяВерсияКВП <> НоваяВерсияКВП И ТекущаяВерсияКВП <> "")
		И Не Отказ Тогда
		
		// Дополнительные действия.
		ВыполнитьПереносТелефоновЖильцовВФизЛица_3_0_67_5();
		
		ЗаполнитьРеквизитВариантНачисленияУслуги_3_0_67_9();
		
		// Фиксируем обновление, если не было ошибок.
		Если Не Отказ Тогда
			
			// Установка номера версии информационной базы.
			Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
			
			// Сообщение об успешном обновлении.
			СообщитьОбУспешномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
			// Добавление текущего обработчика в список выполненных.
			ДобавитьОбработчикВСписокВыполненных("3067");
			
		Иначе
			
			// Сообщение о неудачной попытке обновления.
			СообщитьОНеудачномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	НоваяВерсияКВП   = "3.0.68.3";
	
	Если ((ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.68" ИЛИ ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.67")
		И ТекущаяВерсияКВП <> НоваяВерсияКВП И ТекущаяВерсияКВП <> "")
		И Не Отказ Тогда
		
		// Дополнительные действия.
		ЗаполнитьНастройкиЗагрузкиВыгрузкиДляУниверсальнойВыгрузкиДанных_3_0_68_2();
		
		// Фиксируем обновление, если не было ошибок.
		Если Не Отказ Тогда
			
			// Установка номера версии информационной базы.
			Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
			
			// Сообщение об успешном обновлении.
			СообщитьОбУспешномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
			// Добавление текущего обработчика в список выполненных.
			ДобавитьОбработчикВСписокВыполненных("3068");
			
		Иначе
			
			// Сообщение о неудачной попытке обновления.
			СообщитьОНеудачномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	НоваяВерсияКВП   = Метаданные.Версия;
	
	Если ((ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.69" ИЛИ ПолучитьНомерРелиза(ТекущаяВерсияКВП) = "3.0.68")
		И ТекущаяВерсияКВП <> НоваяВерсияКВП И ТекущаяВерсияКВП <> "")
		И Не Отказ Тогда
		
		// Дополнительные действия.
		УстановитьРасписаниеЗагрузкиОплатИзЖКХЛичныйКабинет_3_0_68_3();
		
		// Фиксируем обновление, если не было ошибок.
		Если Не Отказ Тогда
			
			// Установка номера версии информационной базы.
			Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
			
			// Сообщение об успешном обновлении.
			СообщитьОбУспешномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
			// Добавление текущего обработчика в список выполненных.
			ДобавитьОбработчикВСписокВыполненных("3069");
			
		Иначе
			
			// Сообщение о неудачной попытке обновления.
			СообщитьОНеудачномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// !!! Раскомментировать при очередном обновлении
	//
	// Отложенные обработчики.
	
	// Проверка квитанций только при успешном выполнении всех обработчиков.
	Если Не Отказ Тогда
		МассивФормКвитанции = ПроверитьКвитанцию();
	КонецЕсли;
	
	СтруктураРезультатаОбновления.Вставить("МассивФормКвитанции",                МассивФормКвитанции);
	СтруктураРезультатаОбновления.Вставить("ВыполненныеОбработчикиОбновления",   ВыполненныеОбработчики);
	
	СтруктураРезультатаОбновления.Вставить("НеобходимоПоказатьВажныеОповещения", ПроверитьВажныеОповещения());
	СтруктураРезультатаОбновления.Вставить("МассивСообщенийДляВывода",           СообщенияПользователю);
	СтруктураРезультатаОбновления.Вставить("МассивВажныхСообщенийДляВывода",     ВажныеСообщенияПользователю);
	
	Возврат СтруктураРезультатаОбновления;
	
КонецФункции

// Пытается записать обработанный объект.
// В случае, если записать не удалось, производит добавление сообщения пользователю с его записью в журнал регистрации.
//
// Параметры
//  Объект       - объект, который нужно записать.
//  Параметр     - параметр записи.
//
// Возвращаемое значение:
//  Булево - удалось ли произвести запись.
//
Функция ЗаписатьОбъект(Объект, Параметр = Неопределено)
	
	ТекстОшибки = "";
	
	// Пытаемся записать объект.
	Записан = КВП_ЗаписатьОбъект(Объект, Параметр, ТекстОшибки);
	
	// Если записать не удалось, производим добавление сообщения пользователю с его записью в журнал регистрации.
	Если Не ТекстОшибки = "" Тогда
		ДобавитьСообщениеПользователю(ТекстОшибки, Истина);
	КонецЕсли;
	
	Возврат Записан;
	
КонецФункции

// Процедура проверяет Учетную политику (ЖКХ) всех организаций на наличие внешних форм квитанций.
// Если таковые найдены, открывается форма с предложением проверить их работоспособность.
//
Функция ПроверитьКвитанцию()
	
	МассивФорм = Новый Массив;
	
	ЗаполнитьМассивФормКвитанцийСВозможнымиОшибкамиВнешнимиКвитанциями(МассивФорм);
	ЗаполнитьМассивФормКвитанцийСВозможнымиОшибкамиКвитанциямиСИзмененнымиМакетами(МассивФорм);
	
	Возврат МассивФорм;
	
КонецФункции // ПроверитьКвитанцию()

// Заполянет массив форм с возможными ошибками внешними квитанциями.
//
Процедура ЗаполнитьМассивФормКвитанцийСВозможнымиОшибкамиВнешнимиКвитанциями(МассивФорм)
	
	ТаблицаФорм = Новый ТаблицаЗначений;
	ТаблицаФорм.Колонки.Добавить("Организации",    Новый ОписаниеТипов("Строка"));
	ТаблицаФорм.Колонки.Добавить("ФормаКвитанции", Новый ОписаниеТипов("СправочникСсылка.ДополнительныеОтчетыИОбработки"));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущаяДата", УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.Организация.Представление КАК Организация,
	|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.ФормаКвитанции КАК ФормаКвитанции
	|ИЗ
	|	РегистрСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента КАК УПЖКХ_НастройкиФормированияПлатежногоДокумента
	|ГДЕ
	|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.ФормаКвитанции ССЫЛКА Справочник.ДополнительныеОтчетыИОбработки
	|ИТОГИ ПО
	|	ФормаКвитанции
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	ВыборкаФорм = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаФорм.Следующий() Цикл
		
		СписокОрганизаций = "";
		
		НоваяСтрока = ТаблицаФорм.Добавить();
		НоваяСтрока.ФормаКвитанции = ВыборкаФорм.ФормаКвитанции;
		
		ВыборкаОрганизаций = ВыборкаФорм.Выбрать();
		Пока ВыборкаОрганизаций.Следующий() Цикл
			Если ЗначениеЗаполнено(СписокОрганизаций) Тогда
				СписокОрганизаций = СписокОрганизаций + ", " + ВыборкаОрганизаций.Организация;
			Иначе
				СписокОрганизаций = "" + ВыборкаОрганизаций.Организация;
			КонецЕсли;	
		КонецЦикла;
		
		НоваяСтрока.Организации = СписокОрганизаций;
	КонецЦикла;
	
	Для Каждого Строка Из ТаблицаФорм Цикл
		Структура = Новый Структура("ФормаКвитанции, Пояснение", Строка.ФормаКвитанции, "Внешняя квитанция используется в следующих организациях: " + Строка.Организации);
		МассивФорм.Добавить(Структура);
	КонецЦикла;
	
КонецПроцедуры

// Заполянет массив форм с возможными ошибками квитанциями с измененными макетами.
//
Процедура ЗаполнитьМассивФормКвитанцийСВозможнымиОшибкамиКвитанциямиСИзмененнымиМакетами(МассивФорм)
	
	ТаблицаСтандартныхКвитанций = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьТаблицуСоответствияФормКвитанцийИМакетов();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаСтандартныхКвитанций.ФормаКвитанции КАК ФормаКвитанции,
	|	ТаблицаСтандартныхКвитанций.ОбъектКвитанции КАК ОбъектКвитанции,
	|	ТаблицаСтандартныхКвитанций.МакетКвитанции КАК МакетКвитанции
	|ПОМЕСТИТЬ втТаблицаСтандартныхКвитанций
	|ИЗ
	|	&ТаблицаСтандартныхКвитанций КАК ТаблицаСтандартныхКвитанций
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаСтандартныхКвитанций.ФормаКвитанции КАК ФормаКвитанции,
	|	втТаблицаСтандартныхКвитанций.ОбъектКвитанции КАК ОбъектКвитанции,
	|	втТаблицаСтандартныхКвитанций.МакетКвитанции КАК МакетКвитанции
	|ИЗ
	|	втТаблицаСтандартныхКвитанций КАК втТаблицаСтандартныхКвитанций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПользовательскиеМакетыПечати КАК ПользовательскиеМакетыПечати
	|		ПО втТаблицаСтандартныхКвитанций.ОбъектКвитанции = ПользовательскиеМакетыПечати.Объект
	|			И втТаблицаСтандартныхКвитанций.МакетКвитанции = ПользовательскиеМакетыПечати.ИмяМакета
	|ГДЕ
	|	ПользовательскиеМакетыПечати.Использование";
	
	Запрос.УстановитьПараметр("ТаблицаСтандартныхКвитанций", ТаблицаСтандартныхКвитанций);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивФорм.Добавить(Новый Структура("ФормаКвитанции, Пояснение", Выборка.ФормаКвитанции, "Изменен макет стандартной квитанции: " + Выборка.ФормаКвитанции));
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕРЕХОДА С 2.0

#Область ПроцедурыИФункцииПереходаСПредыдущейРедакции

// Функция выполняет обновление конфигурации с редакции 2.0.
//
Функция ВыполнитьПереходСРедакции20(СтруктураРезультатаОбновления)
	
	// 1. Определим текущую версию.
	ТекущаяВерсияКВП = Константы.Удалить_КВП_НомерВерсииКонфигурации.Получить();
	
	// Если текущая версия не принадлежит редакции 2.0, то переход уже выполнен или вообще не нужен.
	Если Не Лев(ТекущаяВерсияКВП, 1) = "2" Тогда
		Возврат Истина;
	КонецЕсли;
	
	// 2. Определим версию, на которую можно перейти.
	НоваяВерсияКВП = Метаданные.Версия;
	Если Не ПроверитьВозможностьПереходаСРедакции20(ТекущаяВерсияКВП, НоваяВерсияКВП) Тогда
		ДобавитьСообщениеПользователю("Не удалось выполнить обновление информационной базы с версии " + ТекущаяВерсияКВП + "!
									  |Обновление на редакцию 3.0 с версии " + ТекущаяВерсияКВП + " недоступно!" + Символы.ПС, Истина, Истина);
		Возврат Ложь;
	КонецЕсли;
	
	// 3. Непосредственный переход с редакции 2.0.
	
	// Стандартные обработчики перехода с редакции 2.0.
	ВыполнитьПереносПрикрепленныхФайловНаНовыйМеханизмПриОбновленииС20();
	ПереносОсновнойСтавкиНДСПриОбновленииС20();
	ЗаполнитьВидДокументаФизическогоЛицаВДокументеИзменениеПаспортныхДанныхПриОбновленииС20();
	ЗаполнитьВидДокументаФизическогоЛицаВРегистреСведенийНастройкиВыгрузкиВГЦЖСПриОбновленииС20();
	ОбработатьНормыПотребленияПриОбновленииС20();
	ОбработатьРассчитываемыеТарифыПриОбновленииС20();
	ВыполнитьПереносПользовательскихМакетовВТиповойМеханизмПриОбновленииС20();
	ВыполнитьПереносКонтактнойИнформацииИзРСАдресаВТабличныеЧастиСправочниковС20();
	
	// Обработчики обновления функционала, реализованного только в редакции 3.0.
	ЗаполнитьКоэффициентыТемпературныйИТрансформацииВРегистреПоказанийСчетчиков_3_0_43_4();
	ЗаполнитьРесурсДатаИзмененияРСЗакрепленныеСчетчики_3_0_43_22();
	ЗаполнитьСвязиДокументовОплатРегистрацииОплатИТиповыхДокументовОтраженияВРеглУчете_3_0_44_1();
	ОбновитьНастройку_ВариантИзмененияЗадолженностиВКорректировкахНачислений_3_0_44_14();
	ОбработатьСуммыПерерасчетаВДокументахКорректировкиНачисленийСВидомОперацииНедопоставка_3_0_44_14();
	ЗаполнитьРегистрНакопленияДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ_3_0_44_19();
	ОткорректироватьДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ_3_0_44_19(СтруктураРезультатаОбновления);
	ПеренестиЗначениеРеквизитаПериодКорректировкиДокументаКорректировкаНачисления_3_0_46_1();
	ЗаполнитьРесурсДатаИзмененияРСНазначенныеЛьготы_3_0_46_1();
	ВыполнитьЗаменуЗначенийПредопределенныхДанных_3_0_46_2(Истина);
	ВыполнитьЗаменуВидовНачисленияДляДвиженийДокументаЗакрытиеПериодаПоНачислениямЖКЖ_3_0_49_7();
	ЗаполнитьВариантРаспределенияИТарифыВДокументеВводФактическихЗатратНаОбъект_3_0_50_2();
	ЗаполнитьЗначенияПредставленияУслугСОИПоУмолчанию_3_0_52_2();
	ЗаполнитьНастройкиКонтроляПоказанийПриборовУчета_3_0_53_2();
	ЗаполнитьНастройкуОтражатьВзаиморасчетыПоКапремонту_3_0_62_2();
	УстановитьСчетаУчетаПоПениЗаКапремонт_3_0_62_2();
	Справочники.УПЖКХ_ГруппыУслуг.ОбновитьДанныеПредопределенныхВидовГрупп(ПредопределенноеЗначение("Справочник.УПЖКХ_ГруппыУслуг.НастройкиОтраженияНачислений"));
	ЗаполнитьРеквизитОтноситсяКМОПВЭлементахСправочникаВидыПомещений_3_0_66_5();
	ПерезаполнитьСпособОтраженияПениВРеглУчете_3_0_66_5();
	ЗаполнитьРесурсСчетаУчетаДляОтраженияПениКапремонт_3_0_66_5();
	
	Если Не Отказ Тогда
		
		// Установка номера версии информационной базы
		Константы.Удалить_КВП_НомерВерсииКонфигурации.Установить(НоваяВерсияКВП);
		
		// Сообщение об успешном обновлении.
		СообщитьОбУспешномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
		
		Возврат Истина;
		
	Иначе
		
		// Сообщение о неудачной попытке обновления.
		СообщитьОНеудачномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП);
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

// Функция проверяет возможность перехода на редакцию 3.0.
//
// Параметры:
//  НомерВерсии20 - номер версии редакции 2.0,
//  НомерВерсии30 - текущий номер версии редакции 3.0.
//
// Возвращаемое значение:
//  ПереходВозможен - признак возможности перехода.
//
Функция ПроверитьВозможностьПереходаСРедакции20(НомерВерсии20, НомерВерсии30) Экспорт
	
	// Внимание! Для каждого нового перехода с 2.0 на 3.0 в конце добавляется блок,
	// в котором указывается, какой версии 2.0 соответствует версия 3.0.
	
	ПереходВозможен = Ложь;
	
	НомерВерсии30_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30);
	
	Если НомерВерсии20 = "2.0.45.2" Тогда
		НомерВерсии30_Соответствующая = "3.0.19.7";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.53.1" Тогда
		НомерВерсии30_Соответствующая = "3.0.28.1";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.55.3" Тогда
		НомерВерсии30_Соответствующая = "3.0.31.1";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.57.4" Тогда
		НомерВерсии30_Соответствующая = "3.0.34.1";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.62.1" Тогда
		НомерВерсии30_Соответствующая = "3.0.36.7";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.64.6" Тогда
		НомерВерсии30_Соответствующая = "3.0.39.6";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.64.13" Тогда
		НомерВерсии30_Соответствующая = "3.0.40.2";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.64.26" Тогда
		НомерВерсии30_Соответствующая = "3.0.42.2";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.65.10" Тогда
		НомерВерсии30_Соответствующая = "3.0.43.8";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.65.20" Тогда
		НомерВерсии30_Соответствующая = "3.0.43.21";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.65.25" Тогда
		НомерВерсии30_Соответствующая = "3.0.43.25";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.65.28" Тогда
		НомерВерсии30_Соответствующая = "3.0.44.2";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.65.31" Тогда
		НомерВерсии30_Соответствующая = "3.0.44.13";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.1" Тогда
		НомерВерсии30_Соответствующая = "3.0.46.1";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.7" Тогда
		НомерВерсии30_Соответствующая = "3.0.47.4";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.9" Тогда
		НомерВерсии30_Соответствующая = "3.0.49.2";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.11" Тогда
		НомерВерсии30_Соответствующая = "3.0.49.7";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.15" Тогда
		НомерВерсии30_Соответствующая = "3.0.51.1";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.16" Тогда
		НомерВерсии30_Соответствующая = "3.0.52.1";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.21" Тогда
		НомерВерсии30_Соответствующая = "3.0.53.1";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.24" Тогда
		НомерВерсии30_Соответствующая = "3.0.55.2";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.29" Тогда
		НомерВерсии30_Соответствующая = "3.0.57.2";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.30" Тогда
		НомерВерсии30_Соответствующая = "3.0.58.3";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.31" Тогда
		НомерВерсии30_Соответствующая = "3.0.59.1";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.32" Тогда
		НомерВерсии30_Соответствующая = "3.0.59.4";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.34" Тогда
		НомерВерсии30_Соответствующая = "3.0.60.2";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.36" Тогда
		НомерВерсии30_Соответствующая = "3.0.60.5";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.38" Тогда
		НомерВерсии30_Соответствующая = "3.0.61.4";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.39" Тогда
		НомерВерсии30_Соответствующая = "3.0.63.1";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.40" Тогда
		НомерВерсии30_Соответствующая = "3.0.64.1";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.41" Тогда
		НомерВерсии30_Соответствующая = "3.0.64.4";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.42" Тогда
		НомерВерсии30_Соответствующая = "3.0.64.8";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.44" Тогда
		НомерВерсии30_Соответствующая = "3.0.65.2";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.45" Тогда
		НомерВерсии30_Соответствующая = "3.0.66.2";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.46" Тогда
		НомерВерсии30_Соответствующая = "3.0.66.7";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.47" Тогда
		НомерВерсии30_Соответствующая = "3.0.67.2";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.48" Тогда
		НомерВерсии30_Соответствующая = "3.0.67.3";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.49" Тогда
		НомерВерсии30_Соответствующая = "3.0.67.8";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.50" Тогда
		НомерВерсии30_Соответствующая = "3.0.68.1";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Если НомерВерсии20 = "2.0.66.52" Тогда
		НомерВерсии30_Соответствующая = "3.0.69.1";
		
		НомерВерсии30_Соответствующая_Числом = ПолучитьНомерВерсииЧислом(НомерВерсии30_Соответствующая);
		Если НомерВерсии30_Соответствующая_Числом <= НомерВерсии30_Числом Тогда
			НомерВерсии30   = НомерВерсии30_Соответствующая;
			ПереходВозможен = Истина;
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат ПереходВозможен;
	
КонецФункции

// Процедура переносить прикрепленные файлы в новый механизм.
Процедура ВыполнитьПереносПрикрепленныхФайловНаНовыйМеханизмПриОбновленииС20()
	
	ЗаписатьИнформациюВЖурналРегистрации("Обновление с редакции 2.0", "Начало обработки файлов, прикрепленных к объектам информационной базы.");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Удалить_КВП_ХранилищеДополнительнойИнформации.Ссылка,
	|	Удалить_КВП_ХранилищеДополнительнойИнформации.Наименование,
	|	Удалить_КВП_ХранилищеДополнительнойИнформации.ИмяФайла,
	|	Удалить_КВП_ХранилищеДополнительнойИнформации.Объект,
	|	Удалить_КВП_ХранилищеДополнительнойИнформации.Хранилище,
	|	ФизическиеЛица.Ссылка КАК ФизическоеЛицоОсновноеИзображение
	|ИЗ
	|	Справочник.Удалить_КВП_ХранилищеДополнительнойИнформации КАК Удалить_КВП_ХранилищеДополнительнойИнформации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица КАК ФизическиеЛица
	|		ПО Удалить_КВП_ХранилищеДополнительнойИнформации.Ссылка = ФизическиеЛица.Удалить_ОсновноеИзображение";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ИмяБезРасширения = "";
		РасширениеБезТочки = "";
		
		Если ПустаяСтрока(Выборка.ИмяФайла) Тогда
			ИмяБезРасширения = Выборка.Наименование;
		Иначе
			СтруктураИмени     = ОбщегоНазначенияКлиентСервер.РазложитьПолноеИмяФайла(Выборка.ИмяФайла);
			ИмяБезРасширения   = СтруктураИмени.ИмяБезРасширения;
			РасширениеБезТочки = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(СтруктураИмени.Расширение);
		КонецЕсли;
		
		ВладелецФайла  = Выборка.Объект;
		
		Данные = Выборка.Хранилище.Получить();
		Если ТипЗнч(Данные) = Тип("Картинка") Тогда
			ДвоичныеДанные = Данные.ПолучитьДвоичныеДанные();
		Иначе
			ДвоичныеДанные = Данные;
		КонецЕсли;
		
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
		
		СсылкаНаПрисоединенныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(ВладелецФайла,
									 ИмяБезРасширения,
									 РасширениеБезТочки,
									 ,
									 ,
									 АдресВоВременномХранилище);
		
		Если Не СсылкаНаПрисоединенныйФайл.Пустая()
			  И ЗначениеЗаполнено(Выборка.ФизическоеЛицоОсновноеИзображение)
			  И ТипЗнч(Выборка.ФизическоеЛицоОсновноеИзображение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			
			ФизЛицоОбъект = Выборка.ФизическоеЛицоОсновноеИзображение.ПолучитьОбъект();
			ФизЛицоОбъект.ОсновноеИзображение = СсылкаНаПрисоединенныйФайл;
			
			ЗаписатьОбъект(ФизЛицоОбъект);
			
		КонецЕсли;
		
		УдалитьИзВременногоХранилища(АдресВоВременномХранилище);
		
	КонецЦикла;
	
	ЗаписатьИнформациюВЖурналРегистрации("Обновление с редакции 2.0", "Обработка файлов, прикрепленных к объектам информационной базы, завершена.");
	
КонецПроцедуры

// Процедура заполняет вид документа физического лица в документе "Изменение паспортных данных".
Процедура ЗаполнитьВидДокументаФизическогоЛицаВДокументеИзменениеПаспортныхДанныхПриОбновленииС20()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ИзменениеПаспортныхДанных.Ссылка
	|ИЗ
	|	Документ.КВП_ИзменениеПаспортныхДанных КАК КВП_ИзменениеПаспортныхДанных
	|ГДЕ
	|	КВП_ИзменениеПаспортныхДанных.ВидДокумента = ЗНАЧЕНИЕ(Справочник.ВидыДокументовФизическихЛиц.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВидДокумента = 
			ПолучитьСоответствиеПредопределенногоЭлементаДокументыУдостоверяющиеЛичность(ДокументОбъект.Удалить_ДокументВид);
		
		Если Не ВидДокумента = Неопределено Тогда
			ДокументОбъект.ВидДокумента = ВидДокумента;
			ЗаписатьОбъект(ДокументОбъект);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура обрабатывает нормы потребления услуг.
Процедура ОбработатьНормыПотребленияПриОбновленииС20()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_НормыПотребленияУслугХарактеристики.Ссылка
	|ИЗ
	|	Справочник.КВП_НормыПотребленияУслуг.Характеристики КАК КВП_НормыПотребленияУслугХарактеристики
	|ГДЕ
	|	КВП_НормыПотребленияУслугХарактеристики.Вид ССЫЛКА ПланВидовХарактеристик.УдалитьСвойстваОбъектов
	|	И НЕ КВП_НормыПотребленияУслугХарактеристики.Ссылка.ПометкаУдаления
	|	И КВП_НормыПотребленияУслугХарактеристики.Ссылка.ВариантНастройки = Значение(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Расширенный)
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_НормыПотребленияУслугХарактеристики.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НормаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЕстьИзменения = Ложь;
		
		Для Каждого ТекХарактеристика Из НормаОбъект.Характеристики Цикл
			Если ТипЗнч(ТекХарактеристика.Вид) = Тип("ПланВидовХарактеристикСсылка.УдалитьСвойстваОбъектов") Тогда
				
				// Попытаемся найти соответствие в новом плане видов характеристик.
				НайденноеСвойство = 
					ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(ТекХарактеристика.Вид.Наименование);
				
				Если Не НайденноеСвойство = Неопределено Тогда
					ТекХарактеристика.Вид = НайденноеСвойство;
					ЕстьИзменения = Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьИзменения Тогда
			ЗаписатьОбъект(НормаОбъект);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура обрабатывает рассчитываемые тарифы услуг.
Процедура ОбработатьРассчитываемыеТарифыПриОбновленииС20()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаПоказателейРасчета.Ссылка
	|ИЗ
	|	Справочник.КВП_РассчитываемыеТарифы.ТаблицаПоказателейРасчета КАК ТаблицаПоказателейРасчета
	|ГДЕ
	|	ТаблицаПоказателейРасчета.ПоказательРасчета ССЫЛКА ПланВидовХарактеристик.УдалитьСвойстваОбъектов
	|	И НЕ ТаблицаПоказателейРасчета.Ссылка.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаПоказателейРасчета.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТарифОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЕстьИзменения = Ложь;
		
		Для Каждого ТекХарактеристика Из ТарифОбъект.ТаблицаПоказателейРасчета Цикл
			Если ТипЗнч(ТекХарактеристика.ПоказательРасчета) = Тип("ПланВидовХарактеристикСсылка.УдалитьСвойстваОбъектов") Тогда
				
				// Попытаемся найти соответствие в новом плане видов характеристик.
				НайденноеСвойство = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию(
										ТекХарактеристика.ПоказательРасчета.Наименование);
				
				Если Не НайденноеСвойство = Неопределено Тогда
					ТекХарактеристика.ПоказательРасчета = НайденноеСвойство;
					ЕстьИзменения = Истина;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьИзменения Тогда
			ЗаписатьОбъект(ТарифОбъект);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура переноса основной ставки НДС при переходе с 2.0.
Процедура ПереносОсновнойСтавкиНДСПриОбновленииС20()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НастройкаОсновнойСтавкиНДС",
								ПланыВидовХарактеристик.УдалитьНастройкиПользователей["ОсновнаяСтавкаНДС"]);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(НастройкиБП20.ОсновнаяСтавкаНДС) КАК ОсновнаяСтавкаНДС,
	|	НастройкиБП20.Пользователь
	|ИЗ
	|	(ВЫБРАТЬ
	|		РегистрЗначениеПрав.Значение КАК ОсновнаяСтавкаНДС,
	|		РегистрЗначениеПрав.Пользователь КАК Пользователь
	|	ИЗ
	|		РегистрСведений.УдалитьНастройкиПользователей КАК РегистрЗначениеПрав
	|	ГДЕ
	|		РегистрЗначениеПрав.Настройка = &НастройкаОсновнойСтавкиНДС) КАК НастройкиБП20
	|
	|СГРУППИРОВАТЬ ПО
	|	НастройкиБП20.Пользователь";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если НЕ ЗначениеЗаполнено(Выборка.Пользователь) Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ПользовательИБ = 
				ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(Выборка.Пользователь.ИдентификаторПользователяИБ);
			ИмяПользователяИБ = ПользовательИБ.Имя;
		Исключение
			Продолжить;
		КонецПопытки;
		
		ТекущаяНастройкаОсновнойСтавкиНДС = 
			ОбщегоНазначенияБПВызовСервера.ПолучитьЗначениеПоУмолчанию("ОсновнаяСтавкаНДС", ИмяПользователяИБ);
		
		ТекущаяНастройкаОсновнойСтавкиНДС = ?(НЕ ЗначениеЗаполнено(ТекущаяНастройкаОсновнойСтавкиНДС),
												Выборка.ОсновнаяСтавкаНДС, ТекущаяНастройкаОсновнойСтавкиНДС);
		
		Если ЗначениеЗаполнено(ТекущаяНастройкаОсновнойСтавкиНДС) Тогда
			ХранилищеОбщихНастроек.Сохранить(ВРег("ОсновнаяСтавкаНДС"),, ТекущаяНастройкаОсновнойСтавкиНДС,, ИмяПользователяИБ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет вид документа физического лица в регистре сведений "Настройки выгрузки в ГЦЖС".
Процедура ЗаполнитьВидДокументаФизическогоЛицаВРегистреСведенийНастройкиВыгрузкиВГЦЖСПриОбновленииС20()
	
	Выборка = РегистрыСведений.УПЖКХ_НастройкиВыгрузкиВГЦЖС.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		МенеджерТекущейЗаписи = Выборка.ПолучитьМенеджерЗаписи();
		
		ТаблицаКодовДокументовЛичности = МенеджерТекущейЗаписи.ТаблицаКодовДокументовЛичности.Получить();
		
		Если ТипЗнч(ТаблицаКодовДокументовЛичности) = Тип("ТаблицаЗначений") Тогда
			
			Если ТаблицаКодовДокументовЛичности.Количество() = 0
			 Или ТипЗнч(ТаблицаКодовДокументовЛичности[0].Наименование) = Тип("СправочникСсылка.ВидыДокументовФизическихЛиц") Тогда
				Продолжить;
			КонецЕсли;
			
			врТаблицаКодовДокументовЛичности = Новый ТаблицаЗначений;
			врТаблицаКодовДокументовЛичности.Колонки.Добавить("Код");
			врТаблицаКодовДокументовЛичности.Колонки.Добавить("Наименование");
			
			Для Каждого ТекСтрока Из ТаблицаКодовДокументовЛичности Цикл
				НоваяСтрока = врТаблицаКодовДокументовЛичности.Добавить();
				НоваяСтрока.Код = ТекСтрока.Код;
				НоваяСтрока.Наименование = ПолучитьСоответствиеПредопределенногоЭлементаДокументыУдостоверяющиеЛичность(ТекСтрока.Наименование);
			КонецЦикла;
			
			МенеджерТекущейЗаписи.ТаблицаКодовДокументовЛичности = Новый ХранилищеЗначения(врТаблицаКодовДокументовЛичности);
			ЗаписатьОбъект(МенеджерТекущейЗаписи);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьВидДокументаФизическогоЛицаВРегистреСведенийНастройкиВыгрузкиВГЦЖСПриОбновленииС20()

// Процедура выполняет перенос пользовательских макетов в типовой регистр сведений.
Процедура ВыполнитьПереносПользовательскихМакетовВТиповойМеханизмПриОбновленииС20();
	
	ВыборкаЗаписей = РегистрыСведений.УПЖКХ_ПользовательскиеМакетыПечати.Выбрать();
	Пока ВыборкаЗаписей.Следующий() Цикл
		
		НоваяЗапись = РегистрыСведений.ПользовательскиеМакетыПечати.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаЗаписей);
		
		ДанныеМакета = ВыборкаЗаписей.Макет.Получить();
		
		Если Найти(ВыборкаЗаписей.ИмяМакета, "ПФ_MXL")
		   И ТипЗнч(ДанныеМакета) = Тип("ДвоичныеДанные") Тогда
			
			Попытка
				
				// Получим макет из двоичных данных.
				ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
				ЗаписатьОбъект(ДанныеМакета, ИмяВременногоФайла);
				ДанныеМакета = Новый ТабличныйДокумент;
				ДанныеМакета.Прочитать(ИмяВременногоФайла);
				
				УдалитьФайлы(ИмяВременногоФайла);
				
			Исключение
				ТекстСообщения = НСтр("ru='Не удалось записать данные пользовательского макета'");
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
		КонецЕсли;
		
		НоваяЗапись.Макет = Новый ХранилищеЗначения(ДанныеМакета);
		
		ЗаписатьОбъект(НоваяЗапись);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет перенос адресной информации из регистра сведения "Адреса (КВП)"
// в табличные части "Контактная информация" справочников "Здания", "Лицевые счета", "Жильцы".
// Обработка выполняется в связи с переводом хранения адресной информации на типовые механизмы КИ БП 3.0.
//
Процедура ВыполнитьПереносКонтактнойИнформацииИзРСАдресаВТабличныеЧастиСправочниковС20()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ЗданияКонтактнаяИнформация.Ссылка,
	|	КВП_ЗданияКонтактнаяИнформация.Вид КАК ВидАдресаКИ
	|ПОМЕСТИТЬ врТекущаяКонтактнаяИнформация
	|ИЗ
	|	Справочник.КВП_Здания.КонтактнаяИнформация КАК КВП_ЗданияКонтактнаяИнформация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УПЖКХ_ЖильцыКонтактнаяИнформация.Ссылка,
	|	УПЖКХ_ЖильцыКонтактнаяИнформация.Вид
	|ИЗ
	|	Справочник.УПЖКХ_Жильцы.КонтактнаяИнформация КАК УПЖКХ_ЖильцыКонтактнаяИнформация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КВП_ЛицевыеСчетаКонтактнаяИнформация.Ссылка,
	|	КВП_ЛицевыеСчетаКонтактнаяИнформация.Вид
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета.КонтактнаяИнформация КАК КВП_ЛицевыеСчетаКонтактнаяИнформация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УдалитьКВП_АдресаСрезПоследних.Период,
	|	УдалитьКВП_АдресаСрезПоследних.Объект,
	|	УдалитьКВП_АдресаСрезПоследних.Вид,
	|	УдалитьКВП_АдресаСрезПоследних.Страна,
	|	УдалитьКВП_АдресаСрезПоследних.Регион,
	|	УдалитьКВП_АдресаСрезПоследних.Район,
	|	УдалитьКВП_АдресаСрезПоследних.Город,
	|	УдалитьКВП_АдресаСрезПоследних.НаселенныйПункт,
	|	УдалитьКВП_АдресаСрезПоследних.АдминистративныйОкруг,
	|	УдалитьКВП_АдресаСрезПоследних.Улица,
	|	УдалитьКВП_АдресаСрезПоследних.Дом,
	|	УдалитьКВП_АдресаСрезПоследних.Корпус,
	|	УдалитьКВП_АдресаСрезПоследних.Квартира,
	|	УдалитьКВП_АдресаСрезПоследних.Индекс,
	|	УдалитьКВП_АдресаСрезПоследних.ОВД,
	|	УдалитьКВП_АдресаСрезПоследних.Представление,
	|	УдалитьКВП_АдресаСрезПоследних.Комментарий,
	|	УдалитьКВП_АдресаСрезПоследних.Строительный,
	|	УдалитьКВП_АдресаСрезПоследних.ТипКорпуса,
	|	УдалитьКВП_АдресаСрезПоследних.ТипКвартиры,
	|	ВЫБОР
	|		КОГДА УдалитьКВП_АдресаСрезПоследних.Вид = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыАдресов.Здание)
	|			ТОГДА ВЫБОР
	|					КОГДА УдалитьКВП_АдресаСрезПоследних.Строительный
	|						ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.УПЖКХ_СтроительныйАдресЗдания)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.УПЖКХ_ПочтовыйАдресЗдания)
	|				КОНЕЦ
	|		КОГДА УдалитьКВП_АдресаСрезПоследних.Вид = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыАдресов.Выбытие)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.УПЖКХ_АдресВыбытияЖильца)
	|		КОГДА УдалитьКВП_АдресаСрезПоследних.Вид = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыАдресов.Прибытие)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.УПЖКХ_АдресПрибытияЖильца)
	|		КОГДА УдалитьКВП_АдресаСрезПоследних.Вид = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыАдресов.ЛС)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.УПЖКХ_АдресДоставкиСчетовИКвитанцийЛицевогоСчета)
	|	КОНЕЦ КАК ВидАдресаКИ
	|ПОМЕСТИТЬ врАдреса
	|ИЗ
	|	РегистрСведений.УдалитьКВП_Адреса.СрезПоследних(, ) КАК УдалитьКВП_АдресаСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врАдреса.Период,
	|	врАдреса.Объект,
	|	врАдреса.Вид,
	|	врАдреса.Страна,
	|	врАдреса.Регион,
	|	врАдреса.Район,
	|	врАдреса.Город,
	|	врАдреса.НаселенныйПункт,
	|	врАдреса.АдминистративныйОкруг,
	|	врАдреса.Улица,
	|	""Дом"" КАК ТипДома,
	|	врАдреса.Дом,
	|	врАдреса.Корпус,
	|	врАдреса.Квартира,
	|	врАдреса.Индекс,
	|	врАдреса.ОВД,
	|	врАдреса.Представление,
	|	врАдреса.Комментарий,
	|	врАдреса.Строительный,
	|	ВЫБОР
	|		КОГДА врАдреса.ТипКорпуса = ЗНАЧЕНИЕ(Перечисление.УдалитьТипыКорпусов.Строение)
	|			ТОГДА ""Строение""
	|		ИНАЧЕ ""Корпус""
	|	КОНЕЦ КАК ТипКорпуса,
	|	ВЫБОР
	|		КОГДА врАдреса.ТипКвартиры = ЗНАЧЕНИЕ(Перечисление.УдалитьТипыКвартир.Офис)
	|			ТОГДА ""Офис""
	|		ИНАЧЕ ""Квартира""
	|	КОНЕЦ КАК ТипКвартиры,
	|	врАдреса.ВидАдресаКИ,
	|	ЕСТЬNULL(врТекущаяКонтактнаяИнформация.Ссылка, ИСТИНА) КАК НеобходимПереносКИ,
	|	ВЫБОР
	|		КОГДА врАдреса.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
	|		  ИЛИ врАдреса.Объект ССЫЛКА Справочник.КВП_Здания
	|			ТОГДА
	|				врАдреса.Объект.ЭтоГруппа
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоГруппа
	|ПОМЕСТИТЬ врАдресаСТекущейКИ
	|ИЗ
	|	врАдреса КАК врАдреса
	|		ЛЕВОЕ СОЕДИНЕНИЕ врТекущаяКонтактнаяИнформация КАК врТекущаяКонтактнаяИнформация
	|		ПО врАдреса.Объект = врТекущаяКонтактнаяИнформация.Ссылка
	|			И врАдреса.ВидАдресаКИ = врТекущаяКонтактнаяИнформация.ВидАдресаКИ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врАдресаСТекущейКИ.Период,
	|	врАдресаСТекущейКИ.Объект КАК Объект,
	|	врАдресаСТекущейКИ.Вид,
	|	врАдресаСТекущейКИ.Страна,
	|	врАдресаСТекущейКИ.Регион,
	|	врАдресаСТекущейКИ.Район,
	|	врАдресаСТекущейКИ.Город,
	|	врАдресаСТекущейКИ.НаселенныйПункт,
	|	врАдресаСТекущейКИ.АдминистративныйОкруг,
	|	врАдресаСТекущейКИ.Улица,
	|	врАдресаСТекущейКИ.ТипДома,
	|	врАдресаСТекущейКИ.Дом,
	|	врАдресаСТекущейКИ.Корпус,
	|	врАдресаСТекущейКИ.Квартира,
	|	врАдресаСТекущейКИ.Индекс,
	|	врАдресаСТекущейКИ.ОВД,
	|	врАдресаСТекущейКИ.Представление,
	|	врАдресаСТекущейКИ.Комментарий,
	|	врАдресаСТекущейКИ.Строительный,
	|	врАдресаСТекущейКИ.ТипКорпуса,
	|	врАдресаСТекущейКИ.ТипКвартиры,
	|	врАдресаСТекущейКИ.ВидАдресаКИ
	|ИЗ
	|	врАдресаСТекущейКИ КАК врАдресаСТекущейКИ
	|ГДЕ
	|	врАдресаСТекущейКИ.НеобходимПереносКИ = ИСТИНА
	|	И НЕ врАдресаСТекущейКИ.ЭтоГруппа
	|ИТОГИ ПО
	|	Объект";
	
	// В ЖКХ 3.0 контактная информация хранится теперь в табличных частях справочников.
	// Таким образом перенести контактную информацию групп справочников нельзя,
	// т.к. у элементов справочников, являющихся группами, нет табличных частей.
	// Поэтому в предпоследнем пакете запроса добавлено получение признака "ЭтоГруппа"
	// для иерархических справочников "Здания, сооружения" и "Лицевые счета"
	// и отбор по условию в последнем пакете запроса.
	
	ВыборкаОбъектов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаОбъектов.Следующий() Цикл
		
		СправочникОбъект = ВыборкаОбъектов.Объект.ПолучитьОбъект();
		
		ВыборкаАдресов = ВыборкаОбъектов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаАдресов.Следующий() Цикл
			
			Страна = ВРег(СокрЛП(ВыборкаАдресов.Страна));
			Если ПустаяСтрока(Страна) Тогда
				Страна = "РОССИЯ";
			КонецЕсли;
			
			СтруктураАдресаИзЗапроса = Новый Структура;
			СтруктураАдресаИзЗапроса.Вставить("НаименованиеСтраны", СокрЛП(ВыборкаАдресов.Страна));
			СтруктураАдресаИзЗапроса.Вставить("Страна",             Страна);
			СтруктураАдресаИзЗапроса.Вставить("Индекс",             СокрЛП(ВыборкаАдресов.Индекс));
			СтруктураАдресаИзЗапроса.Вставить("Регион",             СокрЛП(ВыборкаАдресов.Регион));
			СтруктураАдресаИзЗапроса.Вставить("Район",              СокрЛП(ВыборкаАдресов.Район));
			СтруктураАдресаИзЗапроса.Вставить("Город",              СокрЛП(ВыборкаАдресов.Город));
			СтруктураАдресаИзЗапроса.Вставить("НаселенныйПункт",    СокрЛП(ВыборкаАдресов.НаселенныйПункт));
			СтруктураАдресаИзЗапроса.Вставить("Улица",              СокрЛП(ВыборкаАдресов.Улица));
			СтруктураАдресаИзЗапроса.Вставить("ТипДома",            СокрЛП(ВыборкаАдресов.ТипДома));
			СтруктураАдресаИзЗапроса.Вставить("Дом",                СокрЛП(ВыборкаАдресов.Дом));
			СтруктураАдресаИзЗапроса.Вставить("ТипКорпуса",         СокрЛП(ВыборкаАдресов.ТипКорпуса));
			СтруктураАдресаИзЗапроса.Вставить("Корпус",             СокрЛП(ВыборкаАдресов.Корпус));
			СтруктураАдресаИзЗапроса.Вставить("ТипКвартиры",        СокрЛП(ВыборкаАдресов.ТипКвартиры));
			СтруктураАдресаИзЗапроса.Вставить("Квартира",           СокрЛП(ВыборкаАдресов.Квартира));
			
			ПредставлениеАдресаТиповойМеханизмКИ = "";
			УправлениеКонтактнойИнформациейКлиентСервер.СформироватьПредставлениеАдреса(СтруктураАдресаИзЗапроса, ПредставлениеАдресаТиповойМеханизмКИ);
			
			АдресОбъектXDTO = УправлениеКонтактнойИнформациейСлужебный.АдресXMLВXDTO(СтруктураАдресаИзЗапроса, ПредставлениеАдресаТиповойМеханизмКИ, Перечисления.ТипыКонтактнойИнформации.Адрес);
			ДанныеАдресаВXML = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияXDTOВXML(АдресОбъектXDTO);
			ДанныеАдресаВJSON = УПЖКХ_ТиповыеМетодыСервер.КонтактнаяИнформацияВJSON(ДанныеАдресаВXML);
			
			СтрокаКИ = СправочникОбъект.КонтактнаяИнформация.Добавить();
			
			СтрокаКИ.Тип           = Перечисления.ТипыКонтактнойИнформации.Адрес;
			СтрокаКИ.Вид           = ВыборкаАдресов.ВидАдресаКИ;
			СтрокаКИ.Представление = ПредставлениеАдресаТиповойМеханизмКИ;
			СтрокаКИ.ЗначенияПолей = ДанныеАдресаВXML;
			СтрокаКИ.Значение      = ДанныеАдресаВJSON;
			СтрокаКИ.Страна        = Страна;
			СтрокаКИ.Регион        = СокрЛП(ВыборкаАдресов.Регион);
			СтрокаКИ.Город         = СокрЛП(ВыборкаАдресов.Город);
			
			Если СправочникОбъект.Метаданные().ТабличныеЧасти.КонтактнаяИнформация.Реквизиты.Найти("ДействуетС") <> Неопределено Тогда
				СтрокаКИ.ДействуетС = ВыборкаАдресов.Период;
			КонецЕсли;
			
		КонецЦикла;
		
		СправочникОбъект.ОбменДанными.Загрузка = Истина;
		
		ЗаписатьОбъект(СправочникОбъект);
		
	КонецЦикла;
	
КонецПроцедуры //ВыполнитьПереносКонтактнойИнформацииИзРСАдресаВТабличныеЧастиСправочниковС20

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ВспомогательныеПроцедурыИФункции

// Получаем из полного номера версии конфигурации номер релиза без номера сборки.
//
// Параметры
//  НомерВерсии  – Строка – полный номер версии.
//
// Возвращаемое значение:
//  Строка – номер релиза без номера сборки.
//
Функция ПолучитьНомерРелиза(НомерВерсии) Экспорт

	КоличествоТочек = 0;
	ДлинаОписанияНомераРелиза = 0;

	Для ТекПозиция = 1 По СтрДлина(НомерВерсии) Цикл

		Если Сред(НомерВерсии, ТекПозиция, 1) = "." Тогда
			КоличествоТочек = КоличествоТочек + 1;
		КонецЕсли;

		Если КоличествоТочек = 3 Тогда
			ДлинаОписанияНомераРелиза = ТекПозиция - 1;
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Возврат Лев(НомерВерсии, ДлинаОписанияНомераРелиза);

КонецФункции // ПолучитьНомерРелиза()

// Функция возвращает соответствующий документу, удостоверяющему личность
// элемент справочника "Виды документов физических лиц".
Функция ПолучитьСоответствиеПредопределенногоЭлементаДокументыУдостоверяющиеЛичность(Элемент)
	
	Если Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС27 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ВоенныйБилетОфицераЗапаса;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС07 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ВоенныйБилет;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС09 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ДипломатическийПаспорт;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС22 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ЗагранпаспортРФ;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС02 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ЗагранпаспортСССР;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС21 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС01 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ПаспортСССР;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС26 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ПаспортМоряка;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС03 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.СвидетельствоОРождении;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС04 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.УдостоверениеОфицера;
	ИначеЕсли Элемент = Справочники.УдалитьДокументыУдостоверяющиеЛичность.ИМНС06 Тогда
		Возврат Справочники.ВидыДокументовФизическихЛиц.ПаспортМинморфлота;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция получает документы "Ввод показаний счетчиков", у которых даты записей регистра "Расчет приборов учета"
// не совпадает с датами документа.
//
// !!!В обработчики обновлений данную функцию помещать НЕ НАДО!!!
//
// Параметры:
//  Нет
//
// Возвращаемое значение:
//  Таблица значений, таблица документов.
//
Функция ПолучитьДокументыСПериодамиРасчетовПриборовУчета_2034()
	
	// Т.к. была обнаружена ошибка, что в регистр накоплений "Расчет приборов учета" в период записывалась дата
	// из шапки документа, а не из табличной части, то было принято решение проинформаровать пользователя
	// о том, что необходимо проверить проводки документов, если имеются различия в датах.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УПЖКХ_ВводПоказанийСчетчикаГлавная.Ссылка КАК Регистратор
	|ИЗ
	|	Документ.УПЖКХ_ВводПоказанийСчетчика.Главная КАК УПЖКХ_ВводПоказанийСчетчикаГлавная
	|ГДЕ
	|	НЕ КОНЕЦПЕРИОДА(УПЖКХ_ВводПоказанийСчетчикаГлавная.ДатаПоказания, МЕСЯЦ) = КОНЕЦПЕРИОДА(УПЖКХ_ВводПоказанийСчетчикаГлавная.Ссылка.Дата, МЕСЯЦ)
	|	И УПЖКХ_ВводПоказанийСчетчикаГлавная.Ссылка.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	УПЖКХ_ВводПоказанийСчетчикаГлавная.Ссылка";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Процедура выводит в табличный документ результаты проверки документов "Ввод показаний счетчика".
Функция ЗаполнитьТабличныйДокументИнформациейОбОшибках(ТабличныйДокумент) Экспорт

	// Выполнение проверки совпадения месяца, в которые введены 
	// документы "Ввод показаний счетчика", с месяцами снятия показаний 
	// приборов учета в табличной части этих документов (колонка "Дата показания").
	// В случае не совпадения ссылки на документы выводятся в отчет.
	
	ТаблицаРегистраторов = ПолучитьДокументыСПериодамиРасчетовПриборовУчета_2034();
	
	// Определение шрифтов и линий.
	ЖирныйШрифт       = Новый Шрифт(, 12, Истина, Ложь, Ложь,   Ложь);
	ПолужирныйШрифт   = Новый Шрифт(, 9,  Истина, Ложь, Ложь,   Ложь);
	ОбычныйШрифт      = Новый Шрифт(, 8,  Ложь,   Ложь, Ложь,   Ложь);
	ПодчеркнутыйШрифт = Новый Шрифт(, 8,  Ложь,   Ложь, Истина, Ложь);
	ОбычнаяЛиния      = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1);
	
	ТабличныйДокумент.Область("C2").ШиринаКолонки = 50;
	ТабличныйДокумент.Область("C3").ШиринаКолонки = 50;
	ТабличныйДокумент.Область("C4").ШиринаКолонки = 50;
	ТабличныйДокумент.Область("R1").ВысотаСтроки  = 38;
	
	// Вставка картинки.
	Рис = ТабличныйДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	Рис.Картинка = ?(ТаблицаРегистраторов.Количество() > 0, 
	                 БиблиотекаКартинок.Внимание48, 
	                 БиблиотекаКартинок.ЗеленаяГалка);
	Рис.РазмерКартинки = РазмерКартинки.Растянуть;
	Рис.Расположить(ТабличныйДокумент.Область(1, 1));
	Рис.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии, 0);
	
	// Найдены документы с ошибками.
	Если ТаблицаРегистраторов.Количество() > 0 Тогда
		
		// Заголовок.
		ТабличныйДокумент.Область(1, 2).Шрифт = ЖирныйШрифт;
		ТабличныйДокумент.Область(1, 2).Текст = "Обнаружены документы «Ввод показаний счетчиков», у которых месяц ввода отличается от месяца съема показаний!";
		
		// Подробное описание...
		ТабличныйДокумент.Область(2, 1, 2, 4).Объединить();
		ТабличныйДокумент.Область(2, 1).Шрифт = ОбычныйШрифт;
		ТабличныйДокумент.Область(2, 1).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		ТабличныйДокумент.Область(2, 1).Текст = "
			|То есть, месяц, в котором введен документ, не совпадает с месяцем, к которому относится дата показания прибора учета (указывается в табличной части документа).
			|В текущем состоянии документов начисление по таким показаниям произвелось (или будет произведено, если начисления еще не сформированы) в месяце ввода документа. Если данные документы перепровести, показания перенесутся на месяц ввода показаний.
			|Чтобы исправить возможные коллизии, необходимо, в первую очередь, определить для каждого документа новый месяц показаний – к какому месяцу необходимо отнести показания данного документа: к месяцу ввода документа или к месяцу съема показаний.
			|Далее необходимо указать дату, относящуюся к новому месяцу показаний, в обоих реквизитах документа:
			|1) в реквизите «Дата» шапки документа;
			|2) в колонке «Дата показания» табличной части документа.
			|После этого документ необходимо провести.
			|
			|Если у Вас возникли какие-либо сложности или сомнения в правильности Ваших действий, обратитесь, пожалуйста, на линию технической поддержки данного продукта. 
			|Контакты Вы можете найти на сайте:";
			
		ТабличныйДокумент.Область(3, 1).Шрифт = ПодчеркнутыйШрифт;
		ТабличныйДокумент.Область(3, 1).ЦветТекста = ЦветаСтиля.УПЖКХ_ЦветГиперссылки;
		ТабличныйДокумент.Область(3, 1).Текст = УПЖКХ_ИнформацияОРазработчикеИПрограмме.АдресГлавнойСтраницыСайтаКомпании();
		
		ТабличныйДокумент.Область(4, 1, 4, 4).Объединить();
		ТабличныйДокумент.Область(4, 1).Шрифт = ПолужирныйШрифт;
		ТабличныйДокумент.Область(4, 1).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		ТабличныйДокумент.Область(4, 1).Текст = "
			|Перечень документов:
			|";
			
		ТабличныйДокумент.Область(5, 1, 5, 3).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
		ТабличныйДокумент.Область(5, 1, 5, 3).ВертикальноеПоложение   = ВертикальноеПоложение.Центр;
		ТабличныйДокумент.Область(5, 1, 5, 3).Шрифт = ПолужирныйШрифт;
		ТабличныйДокумент.Область(5, 1, 5, 3).РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		ТабличныйДокумент.Область(5, 1, 5, 3).ГраницаСверху = ОбычнаяЛиния;
		ТабличныйДокумент.Область(5, 1, 5, 3).ГраницаСнизу  = ОбычнаяЛиния;
		ТабличныйДокумент.Область(5, 1, 5, 3).ГраницаСлева  = ОбычнаяЛиния;
		ТабличныйДокумент.Область(5, 1, 5, 3).ГраницаСправа = ОбычнаяЛиния;
		
		ТабличныйДокумент.Область(5, 1).Текст = "№ п/п";
		ТабличныйДокумент.Область(5, 2).Текст = "Документ";
		ТабличныйДокумент.Область(5, 3).Текст = "Примечания (здесь Вы можете сделать для себя какие-либо пометки)";
		
		НомерСтроки = 6;
		// Вывод документов в отчет как гиперссылок.
		Для Каждого СтрокаТаблицы ИЗ ТаблицаРегистраторов Цикл
			
			// 1-ая колонка.
			ТабличныйДокумент.Область(НомерСтроки, 1).ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
			ТабличныйДокумент.Область(НомерСтроки, 1).Шрифт = ОбычныйШрифт;
			ТабличныйДокумент.Область(НомерСтроки, 1).Текст = НомерСтроки - 5;
			
			// 2-ая колонка.
			ТабличныйДокумент.Область(НомерСтроки, 2).Шрифт = ОбычныйШрифт;
			ТабличныйДокумент.Область(НомерСтроки, 2).Гиперссылка = Истина;
			ТабличныйДокумент.Область(НомерСтроки, 2).ЦветТекста  = ЦветаСтиля.УПЖКХ_ЦветГиперссылки;
			ТабличныйДокумент.Область(НомерСтроки, 2).Текст       = СтрокаТаблицы.Регистратор;
			ТабличныйДокумент.Область(НомерСтроки, 2).Расшифровка = СтрокаТаблицы.Регистратор;
			
			// 3-я колонка.
			ТабличныйДокумент.Область(НомерСтроки, 3).Защита = Ложь;
			
			ТабличныйДокумент.Область(НомерСтроки, 1, НомерСтроки, 3).ГраницаСверху = ОбычнаяЛиния;
			ТабличныйДокумент.Область(НомерСтроки, 1, НомерСтроки, 3).ГраницаСнизу  = ОбычнаяЛиния;
			ТабличныйДокумент.Область(НомерСтроки, 1, НомерСтроки, 3).ГраницаСлева  = ОбычнаяЛиния;
			ТабличныйДокумент.Область(НомерСтроки, 1, НомерСтроки, 3).ГраницаСправа = ОбычнаяЛиния;
			
			НомерСтроки = НомерСтроки + 1;
			
		КонецЦикла;
		
	Иначе // Ошибок не обнаружено.
		
		// Заголовок.
		ТабличныйДокумент.Область(1, 2).Шрифт = ЖирныйШрифт;
		ТабличныйДокумент.Область(1, 2).Текст = "Документов с ошибками не обнаружено!";
		
	КонецЕсли;
	
	Возврат ТабличныйДокумент;
	
КонецФункции //ЗаполнитьТабличныйДокументИнформациейОбОшибках()

// Функция возвращает номер версии и сборки числом. Используется для сравнения версий.
//
Функция ПолучитьНомерВерсииЧислом(НомерВерсии)
	
	МассивНомерВерсии = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(НомерВерсии, ".");
	
	Попытка
		
		ВерсияЧислом = Число(МассивНомерВерсии[2]);
		СборкаЧислом = Число(МассивНомерВерсии[3]);
		
		НомерВерсииЧислом = ВерсияЧислом * 100 + СборкаЧислом;
		
	Исключение
		НомерВерсииЧислом = 0;
	КонецПопытки;
	
	Возврат НомерВерсииЧислом;
	
КонецФункции

// Процедура предназначена для переноса записей движений из одного набора в другой с отбором по заданным условиям.
// Процедура используется для обработчика "КонвертироватьНачисленияПоРассрочкеВДокументНачисленияУслугПоРассрочке".
//
Функция ПеренестиДвиженияВНовыйНаборСУчетомОтбора(Источник, Приемник, РегистраторПриемника, СтруктураОтбора, ВернутьПеремещенныеЗаписи = Ложь)
	
	// Процедура выполняет перенос движений с отбором в новый набор записей.
	// При этом отбор может быть задан как простым значение, так и массивом значений,
	// условия по которому соединяются условием ИЛИ.
	// При необходимости, функция возвращает таблицу перемещенных движений.
	
	ТаблицаПеремещенныхЗапией = Неопределено;
	
	врМассивЗаписейДляУдаления = Новый Массив;
	
	Для Каждого ТекЗапись Из Источник Цикл
		
		// По умолчанию считаем, что запись удовлетворяет всем условиям.
		ЗаписьУдовлетворяетУсловиям = Истина;
		
		// Проверка условий для перемещения записей.
		Для Каждого ТекУсловие Из СтруктураОтбора Цикл
			
			Если ТипЗнч(ТекУсловие.Значение) = Тип("Массив") Тогда // Отработка условия ИЛИ.
				
				// По умолчанию считаем, что ни одно условие не выполнено.
				ЕстьВыполнениеУсловий = Ложь;
				
				// Если хотя бы одно выполнено, значит запись подошла.
				Для Каждого ТекЗначение Из ТекУсловие.Значение Цикл
					
					Если ТекЗапись[ТекУсловие.Ключ] = ТекЗначение Тогда
						ЕстьВыполнениеУсловий = Истина;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
				// Если ни одно условие не выполнено, то запись не удовлетворяет условию ИЛИ.
				Если Не ЕстьВыполнениеУсловий Тогда
					ЗаписьУдовлетворяетУсловиям = Ложь;
				КонецЕсли;
				
			Иначе // Отработка простого условия.
				
				// Если условие не выполнено, то запись не удовлетворяет условию условиям.
				Если Не ТекЗапись[ТекУсловие.Ключ] = ТекУсловие.Значение Тогда
					ЗаписьУдовлетворяетУсловиям = Ложь;
					Прервать;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Если запись удовлетворяет условиям, то переносим запись и помечаем на удаление.
		Если ЗаписьУдовлетворяетУсловиям Тогда
			
			НовоеДвижение = Приемник.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеДвижение, ТекЗапись);
			НовоеДвижение.Регистратор = РегистраторПриемника;
			
			врМассивЗаписейДляУдаления.Добавить(ТекЗапись);
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Если необходимо вернуть перемещенные записи, то подготавливаем таблицу для возврата.
	Если ВернутьПеремещенныеЗаписи Тогда
		ТаблицаПеремещенныхЗапией = Источник.Выгрузить(врМассивЗаписейДляУдаления);
	КонецЕсли;
	
	// Удаляем перемещенные записи в источнике.
	Для Каждого ТекЗаписьУдаления Из врМассивЗаписейДляУдаления Цикл
		Источник.Удалить(ТекЗаписьУдаления);
	КонецЦикла;
	
	Если ВернутьПеремещенныеЗаписи Тогда
		Возврат ТаблицаПеремещенныхЗапией;
	КонецЕсли;
	
КонецФункции // ПеренестиДвиженияВНовыйНаборСУчетомОтбора()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// РАБОТА СО СЛУЖЕБНЫМИ ПАРАМЕТРАМИ ОБНОВЛЕНИЯ ИБ
//
// Данный блок предназначен для работы с сохраняемыми параметрами обновления ИБ.
// Например, если нельзя реализовать проверку повторного выполнения обработчика
// обновления за счет логики, то в параметрах обновления можно сохранить результаты
// выполнения обработчика и при повторном запуске обработчика ориентироваться
// на сохраненный ранее параметр. В параметрах можно сохранять произвольные параметры,
// которые могут потребоваться в механизме обновления подсистемы ЖКХ.

#Область РаботаСоСлужебнымиПараметрамиОбновленияИБ

// Функция возвращает текущую структуру параметров обновления ИБ.
// Если параметры не определены, то возвращается пустая структура.
//
Функция ПолучитьТекущиеПараметрыОбновленияИБ_Служебная()
	
	// Параметры по умолчанию - пустая структура.
	СтруктураПараметровОбновленияИБ = Новый Структура;
	
	// Получаем параметры из константы, и если они заданы, берем их.
	СохраненныеПараметры = Константы.УПЖКХ_СлужебныеПараметрыОбновленияИБ.Получить().Получить();
	Если ТипЗнч(СохраненныеПараметры) = Тип("Структура") Тогда
		СтруктураПараметровОбновленияИБ = СохраненныеПараметры;
	КонецЕсли;
	
	Возврат СтруктураПараметровОбновленияИБ;
	
КонецФункции

// Функция возвращает значения параметра обновления ИБ.
// Если параметр не определен, то возвращается Неопределено.
//
Функция ПолучитьПараметрОбновленияИБ(ИмяПараметра)
	
	// Значение параметра по умолчанию.
	ЗначениеПараметра = Неопределено;
	
	// Получим значение параметра из текущих параметров обновления ИБ.
	СтруктураПараметровОбновленияИБ = ПолучитьТекущиеПараметрыОбновленияИБ_Служебная();
	Если СтруктураПараметровОбновленияИБ.Свойство(ИмяПараметра) Тогда
		ЗначениеПараметра = СтруктураПараметровОбновленияИБ[ИмяПараметра];
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
	
КонецФункции

// Функция возвращает текущую структуру параметров обновления ИБ.
// Если параметры не определены, то возвращается пустая структура.
//
Процедура СохранитьПараметрОбновленияИБ(ИмяПараметра, ЗначениеПараметра)
	
	СтруктураПараметровОбновленияИБ = ПолучитьТекущиеПараметрыОбновленияИБ_Служебная();
	СтруктураПараметровОбновленияИБ.Вставить(ИмяПараметра, ЗначениеПараметра);
	
	Константы.УПЖКХ_СлужебныеПараметрыОбновленияИБ.Установить(Новый ХранилищеЗначения(СтруктураПараметровОбновленияИБ));
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОТОКОЛИРОВАНИЕ И ИНФОРМИРОВАНИЕ ПОЛЬЗОВАТЕЛЯ

#Область ПротоколированиеИИнформированиеПользователя

// Процедура производит добавление сообщения пользователю с его записью в журнал регистрации.
//
Процедура ДобавитьСообщениеПользователю(ТекстСообщения, ЭтоСообщениеОбОшибке = Ложь, ЭтоВажноеСообщение = Ложь)
	
	// Структура используется потому, что при выводе сообщения, необходимо анализировать, это сообщение об ошибке или нет.
	// Рядом с сообщением об ошибке, при выводе будет отображаться картинка красного восклицательного знака, а если
	// сообщение не об ошибке, рядом будет отображаться картинка зеленой галки.
	НовоеСообщение = Новый Структура("ЭтоСообщениеОбОшибке, ТекстСообщения", ЭтоСообщениеОбОшибке, ТекстСообщения);
	
	// Добавление сообщения в массив сообщений.
	Если ЭтоВажноеСообщение Тогда
		ВажныеСообщенияПользователю.Добавить(НовоеСообщение);
	Иначе
		СообщенияПользователю.Добавить(НовоеСообщение);
	КонецЕсли;
	
	// Определим уровень события в журнале регистрации.
	Если ЭтоСообщениеОбОшибке = Истина Тогда
		УровеньСобытияВЖурналеРегистрации = УровеньЖурналаРегистрации.Ошибка;
	Иначе
		УровеньСобытияВЖурналеРегистрации = УровеньЖурналаРегистрации.Информация;
	КонецЕсли;
	
	// Запись сообщения в журнале регистрации.
	ЗаписатьИнформациюВЖурналРегистрации("Обновление информационной базы ЖКХ", ТекстСообщения, УровеньСобытияВЖурналеРегистрации);
	
КонецПроцедуры

// Процедура записывает сообщение об успешном обновлении в журнал регистрации
// и добавляет в массив сообщений пользователю.
//
Процедура СообщитьОбУспешномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП)
	
	ТекстСообщения = "Конфигурация обновлена с версии " + ТекущаяВерсияКВП + " на версию " + НоваяВерсияКВП + ".";
	ДобавитьСообщениеПользователю(ТекстСообщения, , Истина);
	
КонецПроцедуры

// Процедура записывает сообщение о неудачном обновлении в журнал регистрации
// и добавляет в массив сообщений пользователю.
//
Процедура СообщитьОНеудачномОбновлении(ТекущаяВерсияКВП, НоваяВерсияКВП)
	
	ТекстСообщения = "ВНИМАНИЕ! При обновлении конфигурации с версии " + ТекущаяВерсияКВП + " на версию " + НоваяВерсияКВП + " возникла ошибка!";
	
	Если КВП_ПрочиеПроцедурыИФункции.ЭтоБазоваяВерсияКонфигурации() Тогда
		ТекстСообщения = ТекстСообщения + "
					 |Повторите попытку обновления, перезапустив программу, или обратитесь на линию технической поддержки разработчика.";
	Иначе // это ПРОФ версия
		ТекстСообщения = ТекстСообщения + "
					 |Проверьте параметры связи с сервером СЛК, затем перезапустите программу и повторите попытку обновления. 
					 |В случае повторного возникновения ошибки обратитесь на линию технической поддержки разработчика.";
	КонецЕсли;
	
	ДобавитьСообщениеПользователю(ТекстСообщения, Истина, Истина);
	
КонецПроцедуры

// Процедура записывает информацию о событии в журнал регистрации.
//
Процедура ЗаписатьИнформациюВЖурналРегистрации(ТекстСобытия, ТекстПодробногоОписания, УровеньСобытия = Неопределено)
	
	// Определим уровень события в журнале регистрации.
	Если УровеньСобытия = Неопределено Тогда
		УровеньСобытия = УровеньЖурналаРегистрации.Информация;
	КонецЕсли;
	
	// Запись события в журнал регистрации.
	ЗаписьЖурналаРегистрации(НСтр("ru='" + ТекстСобытия + "'"), УровеньСобытия,,, ТекстПодробногоОписания);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ВАЖНЫМИ ОПОВЕЩЕНИЯМИ

#Область РаботаСВажнымиОповещениями

// Процедура добавляет важное оповещение в список, подлежащий отображению пользователю.
//
Функция ДобавитьВажноеОповещение(Версия, Обработчик, Описание);
	
	ТаблицаОповещений = Константы.УПЖКХ_СведенияОВажныхОповещениях.Получить().Получить();
	
	Если ТаблицаОповещений = Неопределено Тогда
		
		// Длина имени обработчика должна быть короткой.
		
		ТаблицаОповещений = Новый ТаблицаЗначений;
		ТаблицаОповещений.Колонки.Добавить("Версия",     Новый ОписаниеТипов("Строка"));
		ТаблицаОповещений.Колонки.Добавить("Обработчик", Новый ОписаниеТипов("Строка"));
		ТаблицаОповещений.Колонки.Добавить("Описание",   Новый ОписаниеТипов("Строка"));
		ТаблицаОповещений.Колонки.Добавить("Выполнено",  Новый ОписаниеТипов("Булево"));
		
	КонецЕсли;
	
	НайденныеСтроки = ТаблицаОповещений.НайтиСтроки(Новый Структура("Версия, Обработчик", Версия, Обработчик));
	Если НайденныеСтроки.Количество() = 0 Тогда
		НоваяСтрока = ТаблицаОповещений.Добавить();
		НоваяСтрока.Версия     = Версия;
		НоваяСтрока.Обработчик = Обработчик;
		НоваяСтрока.Описание   = Описание;
		НоваяСтрока.Выполнено  = Ложь;
	Иначе
		НайденныеСтроки[0].Выполнено = Ложь;
	КонецЕсли;
	
	Константы.УПЖКХ_СведенияОВажныхОповещениях.Установить(Новый ХранилищеЗначения(ТаблицаОповещений));
	
КонецФункции

// Функция проверяет наличие критиных обновлений, при наличии новых
// критичных обновлений показывается окно с информацией.
Функция ПроверитьВажныеОповещения()
	
	ТаблицаОповещений = Константы.УПЖКХ_СведенияОВажныхОповещениях.Получить().Получить();
	
	Если ТаблицаОповещений = Неопределено Тогда
		
		ТаблицаОповещений = Новый ТаблицаЗначений;
		ТаблицаОповещений.Колонки.Добавить("Версия",     Новый ОписаниеТипов("Строка"));
		ТаблицаОповещений.Колонки.Добавить("Обработчик", Новый ОписаниеТипов("Строка"));
		ТаблицаОповещений.Колонки.Добавить("Описание",   Новый ОписаниеТипов("Строка"));
		ТаблицаОповещений.Колонки.Добавить("Выполнено",  Новый ОписаниеТипов("Булево"));
		
		Константы.УПЖКХ_СведенияОВажныхОповещениях.Установить(Новый ХранилищеЗначения(ТаблицаОповещений));
		
	КонецЕсли;
	
	НайденныеСтроки = ТаблицаОповещений.НайтиСтроки(Новый Структура("Выполнено", Ложь));
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА СУММ ЛЬГОТ, НАЧИСЛЕННЫХ С ОГРАНИЧЕНИЕМ (СТАРЫЙ АЛГОРИТМ)

#Область ОбработчикиМеханизмаРасчетаЛьгот

// Проверяет, имеются ли ошибки в суммах льгот, рассчитанных с ограничением.
//
Процедура ПроверитьНаличиеЛьготСОграничениемПоСумме_3031()
	
	ТаблицаЛьготБД = ПолучитьТаблицуЛьготБД();
	ТаблицаЛьготБД.Колонки.Добавить("ЛьготаРассчитанная",            Новый ОписаниеТипов("Число"));
	ТаблицаЛьготБД.Колонки.Добавить("КоличествоРассчитанное",        Новый ОписаниеТипов("Число"));
	ТаблицаЛьготБД.Колонки.Добавить("ЛьготнаяКатегорияРассчитанная", Новый ОписаниеТипов("СправочникСсылка.КВП_ЛьготныеКатегории"));
	ТаблицаЛьготБД.Колонки.Добавить("СуммыОтличаются",               Новый ОписаниеТипов("Булево"));
	
	ПересчитатьСуммыЛьгот(ТаблицаЛьготБД);
	
	СтрокиСОтличием = ТаблицаЛьготБД.НайтиСтроки(Новый Структура("СуммыОтличаются", Истина));
	
	Если НЕ СтрокиСОтличием.Количество() = 0 Тогда
		
		ТекстПредупреждения = "Внимание!
							  |Был изменен механизм расчета льгот с ограничением по сумме.
							  |В связи с этим необходимо проверить величину рассчитанных ранее льгот.
							  |
							  |Обратитесь на нашу линию технической поддержки за помощью." + УПЖКХ_ИнформацияОРазработчикеИПрограмме.КонтактыДляОбратнойСвязиСтрокой();
		
		ДобавитьСообщениеПользователю(ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьНаличиеЛьготСОграничениемПоСумме_3031()

// Рассчитывает суммы льгот для всех случаев, в которых могли быть ошибки.
//
Процедура ПересчитатьСуммыЛьгот(ТаблицаЛьготБД)
	
	ТаблицаДокументов = ТаблицаЛьготБД.Скопировать();
	ТаблицаДокументов.Свернуть("Организация, ДатаДокумента, Регистратор, КоличествоДнейНачисления, УслугаДокумента, ПериодДокумента");
	ТаблицаДокументов.Колонки.Добавить("мНастройкиУчетнойПолитикиТСЖ");
	
	Для Каждого СтрокаДокумента ИЗ ТаблицаДокументов Цикл
		СтрокаДокумента.мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(СтрокаДокумента.ДатаДокумента,
																											  				СтрокаДокумента.Организация);
		
		мКоэффициентКоличестваДней = СтрокаДокумента.КоличествоДнейНачисления / День(КонецМесяца(СтрокаДокумента.ДатаДокумента));
		
		// формирование результирующей таблицы
		ТаблицаНачислений = Новый ТаблицаЗначений();
		ТаблицаНачислений.Колонки.Добавить("Услуга",          Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
		ТаблицаНачислений.Колонки.Добавить("СоставнаяУслуга", Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
		ТаблицаНачислений.Колонки.Добавить("ЛицевыеСчета",    Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
		ТаблицаНачислений.Колонки.Добавить("Тариф",           Новый ОписаниеТипов("Число"));
		ТаблицаНачислений.Колонки.Добавить("Количество",      Новый ОписаниеТипов("Число"));
		ТаблицаНачислений.Колонки.Добавить("Начислено",       Новый ОписаниеТипов("Число"));
		ТаблицаНачислений.Колонки.Добавить("ДнейНачислено",   Новый ОписаниеТипов("Число"));
		ТаблицаНачислений.Колонки.Добавить("Договор",         Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
		
		ТаблицаЛС = ТаблицаЛьготБД.Скопировать();
		ТаблицаЛС.Свернуть("ЛицевойСчет");
		МассивЛицевыхСчетов = ТаблицаЛС.ВыгрузитьКолонку("ЛицевойСчет");
		
		ТаблицаЛК = ТаблицаЛьготБД.Скопировать();
		ТаблицаЛК.Свернуть("ЛьготнаяКатегория");
		МассивЛК = ТаблицаЛК.ВыгрузитьКолонку("ЛьготнаяКатегория");
		
		Запрос = Новый Запрос();
		ДополнитьЗапросКоличествомЖильцов(Запрос, СтрокаДокумента.ДатаДокумента, МассивЛицевыхСчетов);
		
		// Получим текст запроса для расчета сумм льгот.
		Запрос.Текст = ПолучитьТекстЗапроса(СтрокаДокумента.мНастройкиУчетнойПолитикиТСЖ);
		
		Запрос.УстановитьПараметр("Дата",                             СтрокаДокумента.ДатаДокумента);
		Запрос.УстановитьПараметр("ТекущийДокумент",                  СтрокаДокумента.Регистратор);
		Запрос.УстановитьПараметр("ЛицевыеСчета",                     МассивЛицевыхСчетов);
		Запрос.УстановитьПараметр("УчитыватьОтсутствующихЛьготников", СтрокаДокумента.мНастройкиУчетнойПолитикиТСЖ.РассчитыватьЛьготуПоВременноОтсутствующим);
		
		ЛьготныйТариф = СтрокаДокумента.мНастройкиУчетнойПолитикиТСЖ.ИспользоватьЛьготныйТариф;
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаСтрок = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаСтрок.Следующий() Цикл
			
			СтрокаЛьготы = СтрокаДокумента.Регистратор.Льготы.Получить(ВыборкаСтрок.НомерСтроки - 1);
			
			СуммаУслуги   = СтрокаЛьготы.СуммаУслуги;    // начисленная сумма
			ТекущийЛС     = СтрокаЛьготы.ЛицевыеСчета;   // лицевой счет
			ТекущаяУслуга = СтрокаЛьготы.Услуга;         // начисленная услуга
			СпособРасчета = ТекущаяУслуга.СпособРасчета; // способ расчета текущей услуги
			
			СтрокиЛьготВБД = ТаблицаЛьготБД.НайтиСтроки(Новый Структура("ЛицевойСчет, Услуга, ДатаДокумента", ТекущийЛС, ТекущаяУслуга, СтрокаДокумента.ДатаДокумента));
			
			Если СтрокиЛьготВБД.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаЛьготВБД = СтрокиЛьготВБД.Получить(0);
			
			// заполним основные параметры для расчета льгот.
			ЕстьПоНорме                = Ложь;
			ЕстьЛьготаНаСемью          = Ложь;
			РасчетЛьготПоСоставнойУслуге = (ТекущаяУслуга.СпособРасчета = Перечисления.КВП_СпособыРасчета.СОграничениемПоНормам);
			
			КоличествоПроживающих                = 0;
			КоличествоЗарегистрированных         = 0;
			НормаПотребления                     = Неопределено; // норма потребления текущей услуги текущим л/с
			КоличествоУслуги                     = 0;            // количество услуги для расчета льготы
			КоличествоЛьготниковНаСемью          = 0;
			КоличествоОтсутствующихЛьготников    = ВыборкаСтрок.ЛьготникОтсутствует;
			
			ВыборкаЛьготников = ВыборкаСтрок.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			КоличествоЛьготников = ВыборкаЛьготников.Количество();
			
			ПервыйОбход = Истина;
			Пока ВыборкаЛьготников.Следующий() Цикл
				
				ВыборкаЛьгот = ВыборкаЛьготников.Выбрать();
				Пока ВыборкаЛьгот.Следующий() Цикл
					
					Если ПервыйОбход Тогда
						НормаПотребления             = ВыборкаЛьгот.НормаПотребления;
						КоличествоПроживающих        = ВыборкаЛьгот.КоличествоПроживающих;
						КоличествоЗарегистрированных = ВыборкаЛьгот.КоличествоЗарегистрированных;
						ПервыйОбход = Ложь;
					КонецЕсли;
					
					Если НЕ ЕстьПоНорме
						И ЗначениеЗаполнено(ВыборкаЛьгот.ОграничениеПоОбъемуУслуги) Тогда
						ЕстьПоНорме = Истина;
					КонецЕсли;
					
					Если ВыборкаЛьгот.ЛицаПользующиесяЛьготами = Перечисления.КВП_ЛицаПользующиесяЛьготами.Семья Тогда
						КоличествоЛьготниковНаСемью = КоличествоЛьготниковНаСемью + 1;
					КонецЕсли;
					
				КонецЦикла; // льготы
				
			КонецЦикла; // льготники
			
			ЕстьЛьготаНаСемью = (КоличествоЛьготниковНаСемью > 0);
			
			// произведем расчет количества начисленной услуги.
			Если СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчика 
				ИЛИ СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме Тогда
				
				РасходПоВидамТарифов = ПолучитьКоличествоНачисленияНаОбъектПоУслугеСчетчикПоДаннымРегистраНачислений(СтрокаДокумента.ДатаДокумента,
				СтрокаДокумента.Организация, ТекущийЛС, ТекущаяУслуга);
				РасходПоВидамТарифов.Свернуть("Услуга", "РасходДневной, РасходНочной, РасходПиковый, РасходОбщий,
				|ТарифДневной, ТарифНочной, ТарифПиковый, ТарифОбщий, РасходВсего");
				// получим общее количество расхода по услуге
				КоличествоУслуги = РасходПоВидамТарифов.Итог("РасходВсего");
				
				Если РасходПоВидамТарифов.Количество() > 0 Тогда
					СтрокаРасходов = РасходПоВидамТарифов.Получить(0);
				КонецЕсли;
				
				Если ЛьготныйТариф Тогда
					Тариф = 0;
					Тариф = ПолучитьТарифУслугиДляРасчетаЛьгот(ТекущийЛС, ТекущаяУслуга, Тариф, СтрокаДокумента.Организация, СтрокаДокумента.ДатаДокумента);
					Если Тариф > 0 И РасходПоВидамТарифов.Количество() > 0 Тогда
						СтрокаРасходов.ТарифДневной = Тариф;
						СтрокаРасходов.ТарифНочной  = Тариф;
						СтрокаРасходов.ТарифПиковый = Тариф;
						СтрокаРасходов.ТарифОбщий   = Тариф;
					КонецЕсли;
				КонецЕсли;
				
				Если РасходПоВидамТарифов.Количество() > 0 Тогда
					СуммаУслуги = СтрокаРасходов.РасходДневной * СтрокаРасходов.ТарифДневной
					+ СтрокаРасходов.РасходНочной * СтрокаРасходов.ТарифНочной
					+ СтрокаРасходов.РасходПиковый * СтрокаРасходов.ТарифПиковый
					+ СтрокаРасходов.РасходОбщий * СтрокаРасходов.ТарифОбщий;
				КонецЕсли;
				
			ИначеЕсли СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПлощади Тогда
				КоличествоУслуги = КВП_ПолучитьНачислениеНаОбъектПоУслугеПлощадь(СтрокаДокумента.ДатаДокумента, ТекущийЛС, ТекущаяУслуга.ВидПлощади, Ложь);
				
			ИначеЕсли СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоКоличествуЖильцов Тогда
				КоличествоУслуги = КоличествоПроживающих;
				
			ИначеЕсли СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоНормамПотребления Тогда
				
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("Период",           СтрокаДокумента.ДатаДокумента);
				СтруктураПараметров.Вставить("Объект",           ТекущийЛС);
				СтруктураПараметров.Вставить("Услуга",           СтрокаДокумента.УслугаДокумента);
				СтруктураПараметров.Вставить("Организация",      СтрокаДокумента.Организация);
				СтруктураПараметров.Вставить("НормаПотребления", НормаПотребления);
				
				КоличествоУслуги = КВП_ПолучитьКоличествоНормыПотребленияПоОбъекту(СтруктураПараметров);
				
			ИначеЕсли СпособРасчета = Перечисления.КВП_СпособыРасчета.ФиксированноеНачисление Тогда
				КоличествоУслуги = 1;
				
			ИначеЕсли РасчетЛьготПоСоставнойУслуге Тогда
				// способ расчета составной услуги
				СоставнаяУслуга = ТекущаяУслуга.СоставныеУслуги[0].Услуга;
				СпособРасчетаСоставнойУслуги = СоставнаяУслуга.СпособРасчета;
				
				Если СпособРасчетаСоставнойУслуги = Перечисления.КВП_СпособыРасчета.ПоПлощади Тогда
					КоличествоУслуги = КВП_ПолучитьНачислениеНаОбъектПоУслугеПлощадь(СтрокаДокумента.ДатаДокумента, ТекущийЛС, СоставнаяУслуга.ВидПлощади, Ложь);
					
				ИначеЕсли СпособРасчетаСоставнойУслуги = Перечисления.КВП_СпособыРасчета.ПоКоличествуЖильцов Тогда
					КоличествоУслуги = КоличествоПроживающих;
				КонецЕсли;
				
			КонецЕсли;
			
			ДанныеПоОбъекту = Новый Структура("КоличествоПроживающих, КоличествоПрописанных", 
			КоличествоПроживающих, КоличествоЗарегистрированных);
			
			Если Не(СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчика 
				ИЛИ СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме) Тогда
				
				Тариф = ПолучитьТарифПоЛицевомуСчету(СтрокаДокумента.ДатаДокумента, СтрокаДокумента.Организация, ТекущаяУслуга, ТекущийЛС);
				
				Если ЛьготныйТариф Тогда
					Тариф = ПолучитьТарифУслугиДляРасчетаЛьгот(ТекущийЛС, ТекущаяУслуга, Тариф, СтрокаДокумента.Организация, СтрокаДокумента.ДатаДокумента);
					СуммаУслуги = КоличествоУслуги * Тариф;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ЕстьПоНорме Тогда
				
				Если СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчика
					ИЛИ СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме Тогда
					
					// Для услуг, рассчитываемых по показаниям приборов учета (и норме), коэффициент всегда 1.
					КоэффициентНачисленияУслуги = 1;
					
				Иначе
					
					ТаблицаНачислений = ПолучитьТаблицуНачисленийПоДаннымИзРегистраНачисления(ТекущаяУслуга, ТекущийЛС, СтрокаДокумента.Организация,
																							СтрокаДокумента.ДатаДокумента, СтрокаДокумента.ПериодДокумента,
																							СтрокаДокумента.УслугаДокумента);
					
					// Скорректируем тариф по услугам, если указан вид тарифа в регистре КВП_УслугиДляРасчетаЛьготПоДругимТарифам.
					Если ЛьготныйТариф Тогда
						Для Каждого ТекСтрока Из ТаблицаНачислений Цикл
							ТекСтрока.Тариф = ПолучитьТарифУслугиДляРасчетаЛьгот(ТекСтрока.ЛицевыеСчета, ТекСтрока.Услуга,
							ТекСтрока.Тариф, СтрокаДокумента.Организация, СтрокаДокумента.ДатаДокумента, ТекСтрока.СоставнаяУслуга);
							ТекСтрока.Начислено = ТекСтрока.Тариф * ТекСтрока.Количество;
						КонецЦикла;
					КонецЕсли;
					
					СуммаКНачислению = ТаблицаНачислений.Итог("Начислено");
					
					Если Окр(СуммаКНачислению, 2) = СуммаУслуги Тогда
						КоэффициентНачисленияУслуги = 1;
					Иначе
						КоэффициентНачисленияУслуги = ?(СуммаКНачислению = 0, 1, СуммаУслуги / СуммаКНачислению);
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				КоэффициентНачисленияУслуги = 1;
			КонецЕсли;
			
			КоличествоНачисленныхЛьгот = 0; // количество услуги, на которое уже дали льготу
			Начислено = 0;                  // сумма льготы
			
			// Для запоминания наиболее выгодной льготы по лицевому счету.
			КоличествоПоЛьготникуЛС = 0;
			НачислениеПоЛьготникуЛС = 0;
			ЛьготнаяКатегорияПоЛьготникуЛС = Неопределено;
			
			ВыборкаЛьготников = ВыборкаСтрок.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаЛьготников.Следующий() Цикл
				
				// Для запоминания наиболее выгодной льготы.
				КоличествоПоЛьготнику = 0;
				НачислениеПоЛьготнику = 0;
				ЛьготнаяКатегорияПоЛьготнику = Неопределено;
				
				// Пройдем по льготным категориям данного льготника и выберем наиболее выгодную.
				ВыборкаЛьгот = ВыборкаЛьготников.Выбрать();
				Пока ВыборкаЛьгот.Следующий() Цикл
					
					Если ЕстьЛьготаНаСемью
						И НЕ ВыборкаЛьгот.ЛицаПользующиесяЛьготами = Перечисления.КВП_ЛицаПользующиесяЛьготами.Семья Тогда
						Продолжить;
					КонецЕсли;
					
					РазмерСкидки              = ВыборкаЛьгот.РазмерСкидки;
					ЛицаПользующиесяЛьготами  = ВыборкаЛьгот.ЛицаПользующиесяЛьготами;
					ОграничениеПоОбъемуУслуги = ВыборкаЛьгот.ОграничениеПоОбъемуУслуги;
					ПлощадьДляОграничения     = ВыборкаЛьгот.ПлощадьДляРасчетаОграничения;
					ОграничениеПоСуммеЛьготы  = ВыборкаЛьгот.ОграничениеПоСуммеЛьготы;
					ЛьготникОтсутствует       = ВыборкаЛьгот.ЛьготникОтсутствует;
					
					КоличествоУслугиДляРасчетаЛьготы      = КоличествоУслуги;
					КоличествоПроживающихДляРасчетаЛьготы = КоличествоПроживающих;
					
					// Проверим, возможно ли представить скидку временно отсутствующим льготникам.
					// Расчет льготы возможен при условии, что указана соответствующая настройка в настройках учетной политики ТСЖ,
					// и у текущей услуги указан один из следующих способов расчета:
					//  - по площади
					//  - по показаниям счетчика
					//  - с ограничением по норме (при этом у составных услуг должен быть указан способ расчета "По площади").
					Если НачислятьПоОтсутствующимЛьготникам(ТекущаяУслуга, СтрокаДокумента.мНастройкиУчетнойПолитикиТСЖ, СтрокаДокумента.УслугаДокумента) Тогда
						
						КоличествоПроживающихДляРасчетаЛьготы = КоличествоПроживающих + КоличествоОтсутствующихЛьготников;
						
						Если ЛьготникОтсутствует Тогда
							
							// Для услуг со способом расчета "По показаниям счетчика" отсутствующим льготникам
							// скидка предоставляется только на расход по приборам учета.
							Если СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчика Тогда
								
								КоличествоУслугиДляРасчетаЛьготы = 0;
								Для Каждого СтрокаРасхода ИЗ РасходПоВидамТарифов Цикл
									КоличествоУслугиДляРасчетаЛьготы = КоличествоУслугиДляРасчетаЛьготы
									+ СтрокаРасхода.РасходДневной
									+ СтрокаРасхода.РасходНочной
									+ СтрокаРасхода.РасходПиковый;
								КонецЦикла;
							КонецЕсли;
						КонецЕсли;
					Иначе
						
						Если ЛьготникОтсутствует Тогда
							Продолжить;
						КонецЕсли;
						
					КонецЕсли;
					
					// Рассчитаем долю получателей льготы.
					ДоляПолучателейЛьготы       = 0;
					КоличествоПолучателейЛьготы = 1;
					Если ЛицаПользующиесяЛьготами = Перечисления.КВП_ЛицаПользующиесяЛьготами.Семья Тогда
						КоличествоПолучателейЛьготы = КоличествоПроживающихДляРасчетаЛьготы;
						ДоляПолучателейЛьготы       = 1;
					ИначеЕсли ЛицаПользующиесяЛьготами = Перечисления.КВП_ЛицаПользующиесяЛьготами.БлизкиеРодственники Тогда
						КоличествоПолучателейЛьготы = ВыборкаЛьгот.КоличествоБлизкихРодственников;
					КонецЕсли;
					
					Если ДоляПолучателейЛьготы = 0 Тогда
						Если СтрокаДокумента.мНастройкиУчетнойПолитикиТСЖ.ОбъемУслугиДелитьНаЛьготников Тогда
							КоличествоЖильцов = КоличествоПолучателейЛьготы;
						Иначе 
							КоличествоЖильцов = КоличествоПроживающихДляРасчетаЛьготы;
						КонецЕсли;
						ДоляПолучателейЛьготы = ?(КоличествоЖильцов = 0, 0, КоличествоПолучателейЛьготы / КоличествоЖильцов);
					КонецЕсли;
					
					// Сумма и количество льготы по текущей категории.
					ТекНачисление = 0;
					ТекКоличество = 0;
					
					// расчет количества льготы
					Если НЕ ЗначениеЗаполнено(ОграничениеПоОбъемуУслуги) Тогда
						
						ТекКоличество = КоличествоУслугиДляРасчетаЛьготы * ДоляПолучателейЛьготы;
						
					ИначеЕсли ЗначениеЗаполнено(ОграничениеПоОбъемуУслуги) Тогда
						
						СтруктураПараметров = Новый Структура;
						СтруктураПараметров.Вставить("Период",           СтрокаДокумента.ДатаДокумента);
						СтруктураПараметров.Вставить("Объект",           ТекущийЛС);
						СтруктураПараметров.Вставить("Проживающий",      ВыборкаЛьготников.Льготник);
						СтруктураПараметров.Вставить("Услуга",           ТекущаяУслуга);
						СтруктураПараметров.Вставить("Организация",      СтрокаДокумента.Организация);
						СтруктураПараметров.Вставить("НормаПотребления", ОграничениеПоОбъемуУслуги);
						ТекКоличество = КВП_ПолучитьКоличествоНормыПотребленияПоОбъекту(СтруктураПараметров);
						
						//ТекКоличество = КВП_РассчитатьСоциальнуюНормуУслуги(ТекущаяУслуга, ТекущийЛС, мДата, Организация, 
						//													ДанныеПоОбъекту, КоличествоПолучателейЛьготы, , ДоляПолучателейЛьготы);
						
						Если СтрокаДокумента.мНастройкиУчетнойПолитикиТСЖ.ОбъемОграниченияДелитьНаЛьготников Тогда
							КоличествоЖильцов = КоличествоПолучателейЛьготы;
						Иначе
							КоличествоЖильцов = КоличествоПроживающихДляРасчетаЛьготы;
						КонецЕсли;
						
						// Получение площади квартиры. Необходимо при преобразовании количества услуги к соцнорме площади.
						Если ЗначениеЗаполнено(ПлощадьДляОграничения) Тогда
							ТекПлощадь = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПлощадьКвартиры(ТекущийЛС.Адрес, ПлощадьДляОграничения,
							ТекущийЛС, КонецМесяца(СтрокаДокумента.ДатаДокумента));
							ТекПлощадь = ?(ТекПлощадь = 0, 1, ТекПлощадь);
							КоличествоУслугиДляРасчетаЛьготы = (КоличествоУслугиДляРасчетаЛьготы / ТекПлощадь) * ТекКоличество;
						КонецЕсли;
						
						ДоляПолучателейЛьготыОграничение = ?(КоличествоЖильцов = 0, 0, КоличествоПолучателейЛьготы / КоличествоЖильцов);
						// найдем минимум из нормы и количества, на которое уже дали льготу
						ТекКоличество = Мин(ТекКоличество * ДоляПолучателейЛьготыОграничение,
						Мин(КоличествоУслугиДляРасчетаЛьготы * ДоляПолучателейЛьготы,
						КоличествоУслугиДляРасчетаЛьготы - КоличествоНачисленныхЛьгот));
						
					КонецЕсли;
					
					// Произведем расчет суммы льготы
					Если ЗначениеЗаполнено(ОграничениеПоОбъемуУслуги) Тогда
						
						Если РасчетЛьготПоСоставнойУслуге Тогда
							
							// Расчет составной услуги.
							Индекс = 0;
							РасчетноеКоличество = ТекКоличество;
							Пока РасчетноеКоличество > 0 Цикл
								Если Индекс >= ТаблицаНачислений.Количество() Тогда
									Прервать;
								КонецЕсли;
								СтрокаНачислений = ТаблицаНачислений.Получить(Индекс);
								КоличествоСоставнойУслуги = Мин(СтрокаНачислений.Количество, РасчетноеКоличество);
								ТекНачисление = ТекНачисление + (КоличествоСоставнойУслуги * СтрокаНачислений.Тариф) * РазмерСкидки / 100;
								РасчетноеКоличество = РасчетноеКоличество - КоличествоСоставнойУслуги;
								Индекс = Индекс + 1;
							КонецЦикла;
							
							РасчетноеКоличество = ТекКоличество;
							
							// Обработаем таблицу начислений составной услуги с учетом уже начисленных льгот.
							Индекс = 0;
							Пока РасчетноеКоличество > 0 Цикл
								Если Индекс >= ТаблицаНачислений.Количество() Тогда
									Прервать;
								КонецЕсли;
								СтрокаНачислений = ТаблицаНачислений.Получить(Индекс);
								
								КорректируемоеКоличество = Мин(СтрокаНачислений.Количество, РасчетноеКоличество);
								СтрокаНачислений.Количество = СтрокаНачислений.Количество - КорректируемоеКоличество;
								РасчетноеКоличество = РасчетноеКоличество - КорректируемоеКоличество;
								
								Индекс = Индекс + 1;
							КонецЦикла;
							
						ИначеЕсли СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчика
							ИЛИ СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме Тогда
							
							РасчетноеКоличество = ТекКоличество;
							
							Для Каждого СтрокаРасхода ИЗ РасходПоВидамТарифов Цикл
								
								КоличествоТекущейУслуги = Макс(Мин(РасчетноеКоличество, КоличествоУслугиДляРасчетаЛьготы), 0);
								
								МассивПоказаний = Новый Массив;
								МассивПоказаний.Добавить(СтрокаРасхода.РасходДневной);   // дневной расход
								МассивПоказаний.Добавить(СтрокаРасхода.РасходНочной);    // ночной расход
								МассивПоказаний.Добавить(СтрокаРасхода.РасходПиковый);   // пиковый расход
								
								Если НЕ ЛьготникОтсутствует Тогда
									МассивПоказаний.Добавить(СтрокаРасхода.РасходОбщий); // расход по общему тарифу
								КонецЕсли;
								
								// распределим количество расхода в разрезе тарифов
								КоличествоЛьготы = УПЖКХ_ТиповыеМетодыКлиентСервер.РаспределитьПропорционально(КоличествоТекущейУслуги, МассивПоказаний,
								?(НЕ ЛьготникОтсутствует, 4, 3));
								
								Если ЗначениеЗаполнено(КоличествоЛьготы) Тогда
									
									СуммаНачисления = КоличествоЛьготы[0] * СтрокаРасхода.ТарифДневной
									+ КоличествоЛьготы[1] * СтрокаРасхода.ТарифНочной
									+ КоличествоЛьготы[2] * СтрокаРасхода.ТарифПиковый
									+ ?(НЕ ЛьготникОтсутствует, КоличествоЛьготы[3] * СтрокаРасхода.ТарифОбщий, 0);
									
									ТекНачисление = ТекНачисление + Окр(СуммаНачисления * РазмерСкидки / 100, 2);
									РасчетноеКоличество = РасчетноеКоличество - КоличествоТекущейУслуги;
									
								КонецЕсли;
								
							КонецЦикла;
							
						Иначе
							ТекНачисление = (ТекКоличество * Тариф) * РазмерСкидки / 100;
						КонецЕсли;
						
					Иначе
						ТекНачисление = СуммаУслуги * ДоляПолучателейЛьготы * РазмерСкидки / 100;
					КонецЕсли;
					
					// Ограчение по сумме льготы для текущей льготной категории.
					Если ЗначениеЗаполнено(ОграничениеПоСуммеЛьготы) Тогда
						ТекНачисление = МИН(ТекНачисление, ОграничениеПоСуммеЛьготы);
					КонецЕсли;
					
					// Запомним наиболее выгодную льготу.
					Если ТекНачисление > НачислениеПоЛьготнику Тогда
						НачислениеПоЛьготнику = Окр(ТекНачисление, 2);
						КоличествоПоЛьготнику = ТекКоличество;
						ЛьготнаяКатегорияПоЛьготнику = ВыборкаЛьгот.ЛьготнаяКатегория;
					КонецЕсли;
					
				КонецЦикла; // цикл по льготам текущего льготника
				
				// Запомним наиболее выгодную льготу.
				Если НачислениеПоЛьготнику > НачислениеПоЛьготникуЛС Тогда
					НачислениеПоЛьготникуЛС = НачислениеПоЛьготнику;
					КоличествоПоЛьготникуЛС = КоличествоПоЛьготнику;
					ЛьготнаяКатегорияПоЛьготникуЛС = ЛьготнаяКатегорияПоЛьготнику;
				КонецЕсли;
				
				Если Не ЕстьЛьготаНаСемью Тогда
					Если НачислениеПоЛьготникуЛС > 0 Тогда
						Начислено = Начислено + НачислениеПоЛьготнику;
						КоличествоНачисленныхЛьгот = КоличествоНачисленныхЛьгот + КоличествоПоЛьготнику;
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла; // цикл по льготникам текущего л/с
			
			Если ЕстьЛьготаНаСемью Тогда
				Если НачислениеПоЛьготникуЛС > 0 Тогда
					Начислено = Начислено + НачислениеПоЛьготникуЛС;
					КоличествоНачисленныхЛьгот = КоличествоНачисленныхЛьгот + КоличествоПоЛьготникуЛС;
				КонецЕсли;
			КонецЕсли;
			
			// Для составной услуги пересчет на количество дней начисления
			// выполняется при расчете составной услуги.
			Если РасчетЛьготПоСоставнойУслуге Тогда
				НачисленоЛьгот = Начислено * КоэффициентНачисленияУслуги;
			Иначе
				НачисленоЛьгот = Начислено * мКоэффициентКоличестваДней * КоэффициентНачисленияУслуги;
			КонецЕсли;
			
			СтрокаЛьготВБД.ЛьготаРассчитанная            = НачисленоЛьгот;
			СтрокаЛьготВБД.КоличествоРассчитанное        = КоличествоПоЛьготникуЛС;
			СтрокаЛьготВБД.ЛьготнаяКатегорияРассчитанная = ЛьготнаяКатегорияПоЛьготникуЛС;
			СтрокаЛьготВБД.СуммыОтличаются               = ?(СтрокаЛьготВБД.ЛьготаВРегистре = СтрокаЛьготВБД.ЛьготаРассчитанная, Ложь, Истина);
			
		КонецЦикла; // цикл по л/с
		
	КонецЦикла; // цикл по документам.
	
КонецПроцедуры

// Проверяет, необходимо ли начислять льготу для отсутствующих льготников.
//
Функция НачислятьПоОтсутствующимЛьготникам(Услугам, мНастройкиУчетнойПолитикиТСЖ, Услуга)
	
	СпособРасчета = Услуга.СпособРасчета;
	
	Если мНастройкиУчетнойПолитикиТСЖ.РассчитыватьЛьготуПоВременноОтсутствующим Тогда
		
		Если СпособРасчета = Перечисления.КВП_СпособыРасчета.СОграничениемПоНормам Тогда
			
			Для Каждого СтрокаСоставнойУслуги ИЗ Услуга.СоставныеУслуги Цикл
				
				Если НЕ СтрокаСоставнойУслуги.Услуга.СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПлощади Тогда
					Возврат Ложь;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			Если НЕ СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПлощади
			   И НЕ СпособРасчета = Перечисления.КВП_СпособыРасчета.ПоПоказаниямСчетчика Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // НачислятьПоОтсутствующимЛьготникам()

// Функция заполняет таблицу начислений по данным регистра накоплений "Начисления".
//
Функция ПолучитьТаблицуНачисленийПоДаннымИзРегистраНачисления(мУслуга = Неопределено, ЛицевойСчет, Организация, Дата, Период, Услуга, ДатаИзПериода = Ложь)
	
	мПериод = ?(ДатаИзПериода, Период, Дата);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_Начисления.Услуга КАК Услуга,
	|	УПЖКХ_Начисления.Услуга.СпособРасчета КАК СпособРасчета,
	|	УПЖКХ_Начисления.СоставнаяУслуга,
	|	УПЖКХ_Начисления.ЛицевойСчет КАК ЛицевыеСчета,
	|	УПЖКХ_Начисления.Тариф,
	|	УПЖКХ_Начисления.Количество,
	|	УПЖКХ_Начисления.Договор,
	|	УПЖКХ_Начисления.СуммаНачисления КАК Начислено,
	|	УПЖКХ_Начисления.ДнейНачислено,
	|	УПЖКХ_Начисления.Начало КАК НачалоПериода,
	|	УПЖКХ_Начисления.Окончание КАК КонецПериода,
	|	КВП_УслугиСоставныеУслуги.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления КАК УПЖКХ_Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КВП_Услуги.СоставныеУслуги КАК КВП_УслугиСоставныеУслуги
	|		ПО УПЖКХ_Начисления.Услуга = КВП_УслугиСоставныеУслуги.Ссылка
	|			И УПЖКХ_Начисления.СоставнаяУслуга = КВП_УслугиСоставныеУслуги.Услуга
	|ГДЕ
	|	УПЖКХ_Начисления.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И УПЖКХ_Начисления.Организация = &Организация
	|	И УПЖКХ_Начисления.ЛицевойСчет = &ЛицевойСчет
	|	И УПЖКХ_Начисления.Услуга = &Услуга";
	
	Запрос.УстановитьПараметр("ДатаНач",          НачалоМесяца(мПериод));
	Запрос.УстановитьПараметр("ДатаКон",          КонецМесяца(мПериод));
	Запрос.УстановитьПараметр("Организация",      Организация);
	Запрос.УстановитьПараметр("ЛицевойСчет",      ЛицевойСчет);
	
	Если Не мУслуга = Неопределено Тогда
		
		Запрос.УстановитьПараметр("Услуга", мУслуга);
		
		Если ТипЗнч(мУслуга) = Тип("Массив") Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПЖКХ_Начисления.Услуга = &Услуга", "УПЖКХ_Начисления.Услуга В (&Услуга)");
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "
		|	И УПЖКХ_Начисления.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг)
		|	И УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление)";
		
	Иначе
		
		// условие на услугу
		Если НЕ Услуга.Пустая() Тогда
			Если Услуга.ЭтоГруппа Тогда
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "И УПЖКХ_Начисления.Услуга = &Услуга",
				                           "И УПЖКХ_Начисления.Услуга В ИЕРАРХИИ (&Услуга)");
			КонецЕсли;
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "И УПЖКХ_Начисления.Услуга = &Услуга", "");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Услуга", Услуга);
		
		Запрос.Текст = Запрос.Текст + "
		|	И ((УПЖКХ_Начисления.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг)
		|	И (УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление)
		|	ИЛИ УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ФактическиеЗатраты)
		|	ИЛИ УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.СервисныеУслуги)))
		|	ИЛИ (УПЖКХ_Начисления.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ)
		|	И (УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ)
		|	ИЛИ УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
		|	ИЛИ УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу)
		|	ИЛИ УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу)
		|	ИЛИ УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента))))";
		
	КонецЕсли;
	
	Если ТипЗнч(ЛицевойСчет) = Тип("Массив") Тогда
		Если ЛицевойСчет.Количество() = 0 Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПЖКХ_Начисления.ЛицевойСчет = &ЛицевойСчет", "ИСТИНА");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "УПЖКХ_Начисления.ЛицевойСчет = &ЛицевойСчет",
			                                         "УПЖКХ_Начисления.ЛицевойСчет В (&ЛицевойСчет)");
		КонецЕсли;
	КонецЕсли;
	
	// Добавим упорядочивание по необходимым полям.
	// Номер строки необходим для корректного порядка строк по ограничениям.
	// если услуга составная, то упорядочим услуги согласно порядку их учета.
	Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Услуга,
	|	ЛицевыеСчета,
	|	НомерСтроки";
	
	ТаблицаНачислений = Запрос.Выполнить().Выгрузить();
	ТаблицаНачислений.Свернуть("ДнейНачислено,Договор,НачалоПериода,
								|КонецПериода,ЛицевыеСчета,СоставнаяУслуга,
								|СпособРасчета,Тариф,Услуга",
								"Количество,Начислено");
	
	Возврат ТаблицаНачислений;
	
КонецФункции

// Функция получает тариф услуги для расчета льгот.
//
Функция ПолучитьТарифУслугиДляРасчетаЛьгот(ЛицевойСчет, мУслуга, Тариф, Организация, Дата, СоставнаяУслуга = Неопределено)
	
	// расчет льготы по тарифу, отличному от тарифа услуги
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Услуга",      мУслуга);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_УслугиДляРасчетаЛьготПоДругимТарифам.Услуга
	|ИЗ
	|	РегистрСведений.КВП_УслугиДляРасчетаЛьготПоДругимТарифам КАК КВП_УслугиДляРасчетаЛьготПоДругимТарифам
	|ГДЕ
	|	КВП_УслугиДляРасчетаЛьготПоДругимТарифам.Услуга = &Услуга
	|	И КВП_УслугиДляРасчетаЛьготПоДругимТарифам.Организация = &Организация";
	
	мТариф = 0;
	Результат = Запрос.Выполнить().Выбрать();
	Если Результат.Следующий() Тогда
		тмпУслуга = мУслуга;
		Если ЗначениеЗаполнено(СоставнаяУслуга) Тогда
			тмпУслуга = СоставнаяУслуга;
		КонецЕсли;
		мТариф = ПолучитьТарифПоЛицевомуСчету(Дата, Организация, тмпУслуга, 
											  ЛицевойСчет, Перечисления.КВП_ВидыТарифов.Льготный);
	КонецЕсли;
	
	Возврат ?(мТариф = 0, Тариф, мТариф);
	
КонецФункции

// Формирует текст запроса для расчета "новых" сумм льгот.
//
Функция ПолучитьТекстЗапроса(мНастройкиУчетнойПолитикиТСЖ)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий КАК Проживающий,
	|	КВП_НазначенныеЛьготыСрезПоследних.Проживающий.Владелец КАК ЛицевойСчет,
	|	КВП_НазначенныеЛьготыСрезПоследних.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает,
	|	УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Зарегистрирован
	|ПОМЕСТИТЬ ДействующиеЛьготы
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеЛьготы.СрезПоследних(&Дата, Проживающий.Владелец В (&ЛицевыеСчета)) КАК КВП_НазначенныеЛьготыСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
	|				,
	|				ЛицевойСчет В (&ЛицевыеСчета)
	|					И ДатаИзменения <= &Дата) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
	|		ПО КВП_НазначенныеЛьготыСрезПоследних.Проживающий = УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОЗарегистрированных.СрезПоследних(
	|				,
	|				ЛицевойСчет В (&ЛицевыеСчета)
	|					И ДатаИзменения <= &Дата) КАК УПЖКХ_СведенияОЗарегистрированныхСрезПоследних
	|		ПО КВП_НазначенныеЛьготыСрезПоследних.Проживающий = УПЖКХ_СведенияОЗарегистрированныхСрезПоследних.Жилец
	|ГДЕ
	|	КВП_НазначенныеЛьготыСрезПоследних.Действие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДействующиеЛьготы.Проживающий КАК Проживающий,
	|	ДействующиеЛьготы.Проживающий.Владелец КАК ЛицевойСчет,
	|	ДействующиеЛьготы.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
	|	ЛОЖЬ КАК ЛьготникОтсутствует
	|ПОМЕСТИТЬ СписокЛьготниковПроживающих
	|ИЗ
	|	ДействующиеЛьготы КАК ДействующиеЛьготы
	|ГДЕ
	|	&УсловиеНаЛьготника
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДействующиеЛьготы.Проживающий КАК Проживающий,
	|	ДействующиеЛьготы.Проживающий.Владелец КАК ЛицевойСчет,
	|	ДействующиеЛьготы.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
	|	ИСТИНА КАК ЛьготникОтсутствует
	|ПОМЕСТИТЬ СписокЛьготниковОтсутствующих
	|ИЗ
	|	ДействующиеЛьготы КАК ДействующиеЛьготы
	|ГДЕ
	|	&УчитыватьОтсутствующихЛьготников
	|	И НЕ ДействующиеЛьготы.Проживает
	|	И ДействующиеЛьготы.Зарегистрирован
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокЛьготниковОтсутствующих.Проживающий,
	|	СписокЛьготниковОтсутствующих.ЛицевойСчет,
	|	СписокЛьготниковОтсутствующих.ЛьготнаяКатегория,
	|	СписокЛьготниковОтсутствующих.ЛьготникОтсутствует
	|ПОМЕСТИТЬ СписокЛьготников
	|ИЗ
	|	СписокЛьготниковОтсутствующих КАК СписокЛьготниковОтсутствующих
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СписокЛьготниковПроживающих.Проживающий,
	|	СписокЛьготниковПроживающих.ЛицевойСчет,
	|	СписокЛьготниковПроживающих.ЛьготнаяКатегория,
	|	СписокЛьготниковПроживающих.ЛьготникОтсутствует
	|ИЗ
	|	СписокЛьготниковПроживающих КАК СписокЛьготниковПроживающих
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ДействующиеЛьготы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СписокЛьготниковОтсутствующих
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СписокЛьготниковПроживающих
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_ЛицевыеСчетаСрезПоследних.КоличествоПроживающих КАК КоличествоПроживающих,
	|	КВП_ЛицевыеСчетаСрезПоследних.КоличествоЗарегистрированных КАК КоличествоЗарегистрированных
	|ПОМЕСТИТЬ СписокПроживающих
	|ИЗ
	|	врТаблицаКоличеств КАК КВП_ЛицевыеСчетаСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.ФизическоеЛицоОсновное КАК Льготник,
	|	КОЛИЧЕСТВО(УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.ФизическоеЛицоСвязанное) КАК КоличествоБлизкихРодственников
	|ПОМЕСТИТЬ СписокБлизкихРодственников
	|ИЗ
	|	РегистрСведений.УПЖКХ_СтепеньРодстваФизЛиц.СрезПоследних(&Дата, СтепеньРодства.БлизкоеРодство) КАК УПЖКХ_СтепеньРодстваФизЛицСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОПроживающих.СрезПоследних(
	|				,
	|				ЛицевойСчет В (&ЛицевыеСчета)
	|					И ДатаИзменения <= &Дата) КАК УПЖКХ_СведенияОПроживающихСрезПоследних
	|		ПО УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.ФизическоеЛицоСвязанное = УПЖКХ_СведенияОПроживающихСрезПоследних.Жилец.ФизЛицо
	|ГДЕ
	|	УПЖКХ_СведенияОПроживающихСрезПоследних.Проживает
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СтепеньРодстваФизЛицСрезПоследних.ФизическоеЛицоОсновное
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_РасчетЛьготЛьготы.ЛицевыеСчета КАК ЛицевыеСчета,
	|	КВП_РасчетЛьготЛьготы.Услуга КАК Услуга,
	|	КВП_РасчетЛьготЛьготы.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ Льготы
	|ИЗ
	|	Документ.КВП_РасчетЛьгот.Льготы КАК КВП_РасчетЛьготЛьготы
	|ГДЕ
	|	КВП_РасчетЛьготЛьготы.Ссылка = &ТекущийДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛьготы.НомерСтроки,
	|	втЛьготы.ЛицевыеСчета,
	|	втЛьготы.Услуга,
	|	СписокЛьготников.ЛьготнаяКатегория,
	|	СписокЛьготников.Проживающий КАК Льготник,
	|	ЕСТЬNULL(СписокЛьготников.ЛьготникОтсутствует, ИСТИНА) КАК ЛьготникОтсутствует,
	|	СписокПроживающих.КоличествоПроживающих,
	|	СписокПроживающих.КоличествоЗарегистрированных,
	|	ЕСТЬNULL(СписокБлизкихРодственников.КоличествоБлизкихРодственников, 0) + 1 КАК КоличествоБлизкихРодственников
	|ПОМЕСТИТЬ ТаблицаРасчета
	|ИЗ
	|	Льготы КАК втЛьготы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СписокПроживающих КАК СписокПроживающих
	|		ПО втЛьготы.ЛицевыеСчета = СписокПроживающих.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ СписокЛьготников КАК СписокЛьготников
	|			ЛЕВОЕ СОЕДИНЕНИЕ СписокБлизкихРодственников КАК СписокБлизкихРодственников
	|			ПО СписокЛьготников.Проживающий.ФизЛицо = СписокБлизкихРодственников.Льготник
	|		ПО втЛьготы.ЛицевыеСчета = СписокЛьготников.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ Льготы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СписокЛьготников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СписокПроживающих
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ СписокБлизкихРодственников
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_СкидкиСрезПоследних.Услуга,
	|	КВП_СкидкиСрезПоследних.ЛьготнаяКатегория,
	|	КВП_СкидкиСрезПоследних.РазмерСкидки,
	|	КВП_СкидкиСрезПоследних.ЛицаПользующиесяЛьготами,
	|	КВП_СкидкиСрезПоследних.ОграничениеПоОбъемуУслуги,
	|	КВП_СкидкиСрезПоследних.ОграничениеПоСуммеЛьготы,
	|	КВП_СкидкиСрезПоследних.ПлощадьДляРасчетаОграничения
	|ПОМЕСТИТЬ РазмерыСкидок
	|ИЗ
	|	РегистрСведений.КВП_Скидки.СрезПоследних(
	|			&Дата,
	|			ЛьготнаяКатегория В
	|				(ВЫБРАТЬ
	|					ТаблицаРасчета.ЛьготнаяКатегория
	|				ИЗ
	|					ТаблицаРасчета)) КАК КВП_СкидкиСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_НастройкаИндивидуальныхОграниченийЛьгот.ЛицевойСчет,
	|	УПЖКХ_НастройкаИндивидуальныхОграниченийЛьгот.ЛьготнаяКатегория,
	|	УПЖКХ_НастройкаИндивидуальныхОграниченийЛьгот.Услуга,
	|	УПЖКХ_НастройкаИндивидуальныхОграниченийЛьгот.ОграничениеПоОбъемуУслуги
	|ПОМЕСТИТЬ ТаблицаИндивидуальныхСкидок
	|ИЗ
	|	РегистрСведений.УПЖКХ_НастройкаИндивидуальныхОграниченийЛьгот КАК УПЖКХ_НастройкаИндивидуальныхОграниченийЛьгот
	|ГДЕ
	|	УПЖКХ_НастройкаИндивидуальныхОграниченийЛьгот.ЛицевойСчет В(&ЛицевыеСчета)
	|	И УПЖКХ_НастройкаИндивидуальныхОграниченийЛьгот.ЛьготнаяКатегория В
	|			(ВЫБРАТЬ
	|				ТаблицаРасчета.ЛьготнаяКатегория
	|			ИЗ
	|				ТаблицаРасчета)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРасчета.НомерСтроки,
	|	ТаблицаРасчета.ЛицевыеСчета,
	|	ТаблицаРасчета.Услуга,
	|	ТаблицаРасчета.Льготник,
	|	ТаблицаРасчета.ЛьготнаяКатегория,
	|	ТаблицаРасчета.ЛьготникОтсутствует,
	|	ТаблицаРасчета.КоличествоПроживающих,
	|	ТаблицаРасчета.КоличествоЗарегистрированных,
	|	ТаблицаРасчета.КоличествоБлизкихРодственников,
	|	РазмерыСкидок.РазмерСкидки,
	|	РазмерыСкидок.ЛицаПользующиесяЛьготами,
	|	РазмерыСкидок.ОграничениеПоОбъемуУслуги,
	|	РазмерыСкидок.ОграничениеПоСуммеЛьготы,
	|	РазмерыСкидок.ПлощадьДляРасчетаОграничения
	|ПОМЕСТИТЬ ВремТаблицаРасчетаИСкидок
	|ИЗ
	|	ТаблицаРасчета КАК ТаблицаРасчета
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РазмерыСкидок КАК РазмерыСкидок
	|		ПО ТаблицаРасчета.Услуга = РазмерыСкидок.Услуга
	|			И ТаблицаРасчета.ЛьготнаяКатегория = РазмерыСкидок.ЛьготнаяКатегория
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРасчета.НомерСтроки,
	|	ТаблицаРасчета.ЛицевыеСчета,
	|	ТаблицаРасчета.Услуга,
	|	ТаблицаРасчета.Льготник,
	|	ТаблицаРасчета.ЛьготнаяКатегория,
	|	ТаблицаРасчета.ЛьготникОтсутствует,
	|	ТаблицаРасчета.КоличествоПроживающих,
	|	ТаблицаРасчета.КоличествоЗарегистрированных,
	|	ТаблицаРасчета.КоличествоБлизкихРодственников,
	|	ТаблицаРасчета.РазмерСкидки,
	|	ТаблицаРасчета.ЛицаПользующиесяЛьготами,
	|	ЕСТЬNULL(ТаблицаИндивидуальныхСкидок.ОграничениеПоОбъемуУслуги, ТаблицаРасчета.ОграничениеПоОбъемуУслуги) КАК ОграничениеПоОбъемуУслуги,
	|	ТаблицаРасчета.ОграничениеПоСуммеЛьготы,
	|	ТаблицаРасчета.ПлощадьДляРасчетаОграничения
	|ПОМЕСТИТЬ ТаблицаРасчетаИСкидок
	|ИЗ
	|	ВремТаблицаРасчетаИСкидок КАК ТаблицаРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаИндивидуальныхСкидок КАК ТаблицаИндивидуальныхСкидок
	|		ПО ТаблицаРасчета.Услуга = ТаблицаИндивидуальныхСкидок.Услуга
	|			И ТаблицаРасчета.ЛьготнаяКатегория = ТаблицаИндивидуальныхСкидок.ЛьготнаяКатегория
	|			И ТаблицаРасчета.ЛицевыеСчета = ТаблицаИндивидуальныхСкидок.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаРасчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ РазмерыСкидок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВремТаблицаРасчетаИСкидок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаИндивидуальныхСкидок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРасчетаИСкидок.НомерСтроки КАК НомерСтроки,
	|	ТаблицаРасчетаИСкидок.ЛицевыеСчета,
	|	ТаблицаРасчетаИСкидок.Услуга,
	|	ТаблицаРасчетаИСкидок.Льготник КАК Льготник,
	|	ТаблицаРасчетаИСкидок.ЛьготнаяКатегория,
	|	ТаблицаРасчетаИСкидок.ЛьготникОтсутствует КАК ЛьготникОтсутствует,
	|	ТаблицаРасчетаИСкидок.КоличествоПроживающих,
	|	ТаблицаРасчетаИСкидок.КоличествоЗарегистрированных,
	|	ТаблицаРасчетаИСкидок.КоличествоБлизкихРодственников,
	|	ТаблицаРасчетаИСкидок.РазмерСкидки,
	|	ТаблицаРасчетаИСкидок.ЛицаПользующиесяЛьготами,
	|	ТаблицаРасчетаИСкидок.ОграничениеПоОбъемуУслуги,
	|	ТаблицаРасчетаИСкидок.ОграничениеПоСуммеЛьготы,
	|	ТаблицаРасчетаИСкидок.ПлощадьДляРасчетаОграничения,
	|	КВП_НормыПотребленияУслугЛССрезПоследних.НормаПотребления
	|ИЗ
	|	ТаблицаРасчетаИСкидок КАК ТаблицаРасчетаИСкидок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_НормыПотребленияУслугЛС.СрезПоследних(
	|				&Дата,
	|				ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						ТаблицаРасчетаИСкидок.ЛицевыеСчета
	|					ИЗ
	|						ТаблицаРасчетаИСкидок)) КАК КВП_НормыПотребленияУслугЛССрезПоследних
	|		ПО ТаблицаРасчетаИСкидок.Услуга = КВП_НормыПотребленияУслугЛССрезПоследних.Услуга
	|			И ТаблицаРасчетаИСкидок.ЛицевыеСчета = КВП_НормыПотребленияУслугЛССрезПоследних.ЛицевойСчет
	|ИТОГИ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВЫБОР
	|			КОГДА ЛьготникОтсутствует
	|				ТОГДА Льготник
	|		КОНЕЦ) КАК ЛьготникОтсутствует
	|ПО
	|	НомерСтроки,
	|	Льготник";
	
	Если мНастройкиУчетнойПолитикиТСЖ.РасчетЛьготПоЗарегистрированным Тогда
		ТекстУсловияНаЛьготника = "ДействующиеЛьготы.Зарегистрирован";
	Иначе
		ТекстУсловияНаЛьготника = "ДействующиеЛьготы.Проживает";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеНаЛьготника", ТекстУсловияНаЛьготника);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Ищет начисленные льготы с ограничением.
//
Функция ПолучитьТаблицуЛьготБД()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_СкидкиСрезПоследних.ЛьготнаяКатегория,
	|	КВП_СкидкиСрезПоследних.Услуга
	|ПОМЕСТИТЬ втЛКСОграничением
	|ИЗ
	|	РегистрСведений.КВП_Скидки.СрезПоследних(&ТекущаяДата, НЕ ОграничениеПоСуммеЛьготы = 0) КАК КВП_СкидкиСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_НачисленныеЛьготыОбороты.Организация,
	|	КВП_НачисленныеЛьготыОбороты.Регистратор,
	|	КВП_НачисленныеЛьготыОбороты.Регистратор.Дата КАК ДатаДокумента,
	|	КВП_НачисленныеЛьготыОбороты.ЛицевойСчет,
	|	КВП_НачисленныеЛьготыОбороты.Услуга,
	|	КВП_НачисленныеЛьготыОбороты.Проживающий,
	|	КВП_НачисленныеЛьготыОбороты.КоличествоОборот КАК КоличествоВРегистре,
	|	КВП_НачисленныеЛьготыОбороты.СуммаНачисленияОборот КАК ЛьготаВРегистре,
	|	КВП_НачисленныеЛьготыОбороты.Регистратор.КоличествоДнейНачисления КАК КоличествоДнейНачисления,
	|	КВП_НачисленныеЛьготыОбороты.Регистратор.Услуга КАК УслугаДокумента,
	|	КВП_НачисленныеЛьготыОбороты.ЛьготнаяКатегория,
	|	КВП_НачисленныеЛьготыОбороты.Регистратор.Период КАК ПериодДокумента
	|ИЗ
	|	РегистрНакопления.КВП_НачисленныеЛьготы.Обороты(, , Регистратор, ) КАК КВП_НачисленныеЛьготыОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЛКСОграничением КАК втЛКСОграничением
	|		ПО КВП_НачисленныеЛьготыОбороты.ЛьготнаяКатегория = втЛКСОграничением.ЛьготнаяКатегория
	|			И КВП_НачисленныеЛьготыОбороты.Услуга = втЛКСОграничением.Услуга";
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКИ НАЧИСЛЕНИЙ ПРИ ПЕРЕНОСЕ СТОРНО В ТЧ ДОКУМЕНТА

#Область ОбработчикиМеханизмаСторнированияНачислений

// Процедура выполняет разбивку движений документа "Начисление услуг"
// по начислению сторно по остаткам начислений по норме. При этом, выполняется заполнение
// реквизитов "Начало" и "Окончание" периодами начисления по норме.
// Также выполняется обновление табличной части документа корректными данными
// по начислениям сторно с указанием верных периодов начисления.
//
// Алгоритм работы процедуры:
// 1. Из регистра "Начисления" берем все записи с итогами по регистратору, в которых
// производится корректировка начисления и период в измерениях которых не заполнен.
// 2. Обходим записи, полученные в п.1 по регистраторам и для каждой совокупности
// записей регистратора определяем таблицу остатков незакрытых начислений по норме
// с детализацией по подпериодам.
// 3. Получаем набор записей регистра "Начисления" текущего регистратора.
// 4. Обходим все движения, которые необходимо обработать. Для каждого движения определяем
// движение из наборы, которое необходимо будет заменить, также определяем остатки,
// на которые нужно распределить данные текущего движения.
// 5. Добавляем в набор новые записи, закрывая остатки по методу ЛИФО.
// При этом, удаляем старую запись из набора.
// 6. В табличной части регистратора удаляем строки сторно по текущему движению и добавляем
// новые строки по новым движениям.
//
Процедура ОткорректироватьСторноВДвиженияхИСтрокахТЧВДокументеНачислениеУслугПоПУ_3027(СтруктураРезультатаОбновления)
	
	// Определим таблицу ошибок для последующего их вывода.
	ТаблицаОшибок = Новый ТаблицаЗначений;
	ТаблицаОшибок.Колонки.Добавить("Регистратор",     Новый ОписаниеТипов("ДокументСсылка.КВП_начислениеУслуг"));
	ТаблицаОшибок.Колонки.Добавить("НомерСтроки",     Новый ОписаниеТипов("Строка"));
	ТаблицаОшибок.Колонки.Добавить("ЛицевойСчет",     Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
	ТаблицаОшибок.Колонки.Добавить("Услуга",          Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
	ТаблицаОшибок.Колонки.Добавить("УслугаОснование", Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
	ТаблицаОшибок.Колонки.Добавить("ВидТарифа",       Новый ОписаниеТипов("ПеречислениеСсылка.КВП_ВидыТарифов"));
	ТаблицаОшибок.Колонки.Добавить("Договор",         Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	ТаблицаОшибок.Колонки.Добавить("Тариф",           Новый ОписаниеТипов("Число"));
	ТаблицаОшибок.Колонки.Добавить("Количество",      Новый ОписаниеТипов("Число"));
	ТаблицаОшибок.Колонки.Добавить("СуммаНачисления", Новый ОписаниеТипов("Число"));
	ТаблицаОшибок.Колонки.Добавить("РазделУчета",     Новый ОписаниеТипов("ПеречислениеСсылка.УПЖКХ_РазделыУчета"));
	ТаблицаОшибок.Колонки.Добавить("ВидНачисления",   Новый ОписаниеТипов("ПеречислениеСсылка.УПЖКХ_ВидыНачислений"));
	
	// Сначала определим запрос получения движений, которые необходимо разделить.
	
	Запрос = ЗапросПолученияДвиженийНачисленияСторноДляРазделения();
	ДеревоДанных = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Затем определим запрос, который будет получать остатки
	// начислений сторно, по которым и будем делить текущие движения.
	
	ЗапросОстатков = ЗапросПолученияОстатковДляРазделенияДвиженийСторно();
	
	// Подготовим сведения о выводе состояния операции.
	КоличествоДокументов = ДеревоДанных.Строки.Количество();
	НомерТекДокумента = 1;
	
	// Подготовим таблицу, в которую будут записываться данные движений для разбивки.
	ТаблицаДвиженийДляРазделения = Новый ТаблицаЗначений;
	ТаблицаДвиженийДляРазделения.Колонки.Добавить("Регистратор");
	ТаблицаДвиженийДляРазделения.Колонки.Добавить("НомерСтроки");
	ТаблицаДвиженийДляРазделения.Колонки.Добавить("Организация");
	ТаблицаДвиженийДляРазделения.Колонки.Добавить("ЛицевойСчет",     Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
	ТаблицаДвиженийДляРазделения.Колонки.Добавить("Услуга",          Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
	ТаблицаДвиженийДляРазделения.Колонки.Добавить("УслугаОснование");
	ТаблицаДвиженийДляРазделения.Колонки.Добавить("ВидТарифа");
	ТаблицаДвиженийДляРазделения.Колонки.Добавить("Договор");
	ТаблицаДвиженийДляРазделения.Колонки.Добавить("Тариф");
	ТаблицаДвиженийДляРазделения.Колонки.Добавить("Количество");
	ТаблицаДвиженийДляРазделения.Колонки.Добавить("СуммаНачисления");
	ТаблицаДвиженийДляРазделения.Колонки.Добавить("РазделУчета");
	ТаблицаДвиженийДляРазделения.Колонки.Добавить("ВидНачисления");
	ТаблицаДвиженийДляРазделения.Колонки.Добавить("СоставнаяУслуга");
	ТаблицаДвиженийДляРазделения.Колонки.Добавить("ИсточникОплаты");
	ТаблицаДвиженийДляРазделения.Колонки.Добавить("УровеньРаспределения");
	ТаблицаДвиженийДляРазделения.Колонки.Добавить("ОснованиеКорректировки");
	ТаблицаДвиженийДляРазделения.Колонки.Добавить("МесяцРассрочки");
	ТаблицаДвиженийДляРазделения.Колонки.Добавить("МесяцНачисления");
	
	Для Каждого ТекСтрокаРегистратора Из ДеревоДанных.Строки Цикл
		
		// Подготовим таблицу движений.
		ТаблицаДвиженийДляРазделения.Очистить();
		
		Для Каждого ТекСтрокаДвижения Из ТекСтрокаРегистратора.Строки Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаДвиженийДляРазделения.Добавить(), ТекСтрокаДвижения);
		КонецЦикла;
		
		// Свертка движений.
		// Создаем копию таблицы, сворачиваем. Добавляем колонку для номеров строк.
		// Далее заполняем новую колонку массивом номеров строк.
		врТаблицаДвиженийДляРазделения = ТаблицаДвиженийДляРазделения.Скопировать();
		врТаблицаДвиженийДляРазделения.Свернуть("Регистратор,Организация,ЛицевойСчет,Услуга,УслугаОснование,
												|ВидТарифа,Договор,Тариф,МесяцНачисления,РазделУчета,ВидНачисления,
												|СоставнаяУслуга,ИсточникОплаты,УровеньРаспределения,ОснованиеКорректировки,МесяцРассрочки",
												"Количество,СуммаНачисления");
		
		врТаблицаДвиженийДляРазделения.Колонки.Добавить("НомераСтрок");
		
		Для Каждого ТекСтрокаДвижения Из врТаблицаДвиженийДляРазделения Цикл
			
			СтруктураПоискаНомеровСтрок = Новый Структура;
			СтруктураПоискаНомеровСтрок.Вставить("Регистратор",            ТекСтрокаДвижения.Регистратор);
			СтруктураПоискаНомеровСтрок.Вставить("Организация",            ТекСтрокаДвижения.Организация);
			СтруктураПоискаНомеровСтрок.Вставить("ЛицевойСчет",            ТекСтрокаДвижения.ЛицевойСчет);
			СтруктураПоискаНомеровСтрок.Вставить("Услуга",                 ТекСтрокаДвижения.Услуга);
			СтруктураПоискаНомеровСтрок.Вставить("УслугаОснование",        ТекСтрокаДвижения.УслугаОснование);
			СтруктураПоискаНомеровСтрок.Вставить("ВидТарифа",              ТекСтрокаДвижения.ВидТарифа);
			СтруктураПоискаНомеровСтрок.Вставить("Договор",                ТекСтрокаДвижения.Договор);
			СтруктураПоискаНомеровСтрок.Вставить("Тариф",                  ТекСтрокаДвижения.Тариф);
			СтруктураПоискаНомеровСтрок.Вставить("МесяцНачисления",        ТекСтрокаДвижения.МесяцНачисления);
			СтруктураПоискаНомеровСтрок.Вставить("РазделУчета",            ТекСтрокаДвижения.РазделУчета);
			СтруктураПоискаНомеровСтрок.Вставить("ВидНачисления",          ТекСтрокаДвижения.ВидНачисления);
			СтруктураПоискаНомеровСтрок.Вставить("СоставнаяУслуга",        ТекСтрокаДвижения.СоставнаяУслуга);
			СтруктураПоискаНомеровСтрок.Вставить("ИсточникОплаты",         ТекСтрокаДвижения.ИсточникОплаты);
			СтруктураПоискаНомеровСтрок.Вставить("УровеньРаспределения",   ТекСтрокаДвижения.УровеньРаспределения);
			СтруктураПоискаНомеровСтрок.Вставить("ОснованиеКорректировки", ТекСтрокаДвижения.ОснованиеКорректировки);
			СтруктураПоискаНомеровСтрок.Вставить("МесяцРассрочки",         ТекСтрокаДвижения.МесяцРассрочки);
			
			НайденныеСтроки = ТаблицаДвиженийДляРазделения.НайтиСтроки(СтруктураПоискаНомеровСтрок);
			
			МассивНомеровСтрок = Новый Массив;
			Для Каждого ТекСтрокаНомера Из НайденныеСтроки Цикл
				МассивНомеровСтрок.Добавить(ТекСтрокаНомера.НомерСтроки);
			КонецЦикла;
			
			ТекСтрокаДвижения.НомераСтрок = МассивНомеровСтрок;
			
		КонецЦикла;
		
		// Получаем объект документа и данные его табличной части.
		ДокументОбъект = ТекСтрокаРегистратора.Регистратор.ПолучитьОбъект();
		ТЧ_УслугиПоПоказаниямПУ = ДокументОбъект.УслугиПоПоказаниямПУ;
		
		// Получим остатки для разделения движений сторно
		Граница = Новый Граница(ДокументОбъект.Дата, ВидГраницы.Исключая);
		ЗапросОстатков.УстановитьПараметр("ТаблицаДляОтбора",  врТаблицаДвиженийДляРазделения.Скопировать(, "ЛицевойСчет,Услуга"));
		ЗапросОстатков.УстановитьПараметр("Организация",       ДокументОбъект.Организация);
		ЗапросОстатков.УстановитьПараметр("КонецПериода",      Граница);
		ЗапросОстатков.УстановитьПараметр("ДатаДокумента",     Граница.Значение);
		ЗапросОстатков.УстановитьПараметр("Ссылка",            ДокументОбъект.Ссылка);
		
		УслугаОснование = врТаблицаДвиженийДляРазделения.ВыгрузитьКолонку("УслугаОснование");
		УслугаОснование.Добавить(Справочники.КВП_Услуги.ПустаяСсылка());
		
		ЗапросОстатков.УстановитьПараметр("УслугаОснование",   УслугаОснование); // зависимые
		
		ТаблицаОстатков = ЗапросОстатков.Выполнить().Выгрузить();
		ТаблицаОстатков.Индексы.Добавить("Организация,ЛицевойСчет,Услуга,ВидТарифа,Договор,Тариф,УслугаОснование");
		
		// Обработаем полученные данные о движениях документа и остатках.
		Если ТаблицаОстатков.Количество() > 0 Тогда
			
			// Прочитаем набор записей документа.
			НаборЗаписей = РегистрыНакопления.УПЖКХ_Начисления.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ДокументОбъект.Ссылка);
			НаборЗаписей.Прочитать();
			
			// Выгрузим движения во временную таблицу.
			ТаблицаДвижений = НаборЗаписей.Выгрузить();
			
			// Разделим движения по таблице остатков последовательно обходя их.
			Для Каждого ТекСтрокаДвижения Из врТаблицаДвиженийДляРазделения Цикл
				
				// Получим строки остатков, по которым надо разбить строку движения.
				СтруктураПоискаОстатков = Новый Структура;
				СтруктураПоискаОстатков.Вставить("Организация",     ТекСтрокаДвижения.Организация);
				СтруктураПоискаОстатков.Вставить("ЛицевойСчет",     ТекСтрокаДвижения.ЛицевойСчет);
				СтруктураПоискаОстатков.Вставить("Услуга",          ТекСтрокаДвижения.Услуга);
				СтруктураПоискаОстатков.Вставить("ВидТарифа",       ТекСтрокаДвижения.ВидТарифа);
				СтруктураПоискаОстатков.Вставить("Договор",         ТекСтрокаДвижения.Договор);
				СтруктураПоискаОстатков.Вставить("Тариф",           ТекСтрокаДвижения.Тариф);
				СтруктураПоискаОстатков.Вставить("УслугаОснование", ТекСтрокаДвижения.УслугаОснование);
				
				ТекущиеСтрокиОстатков = ТаблицаОстатков.НайтиСтроки(СтруктураПоискаОстатков);
				
				Если ТекущиеСтрокиОстатков.Количество() = 0 Тогда
					
					НоваяОшибка = ТаблицаОшибок.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяОшибка, ТекСтрокаДвижения);
					НоваяОшибка.НомерСтроки = СтрСоединить(ТекСтрокаДвижения.НомераСтрок, ", ");
					
				КонецЕсли;
				
				// Получим строку движения из набора записей для последующего удаления.
				СтрокиДляУдаленияДвижений = Новый Массив;
				Для Каждого ТекНомерСтроки Из ТекСтрокаДвижения.НомераСтрок Цикл
					СтрокаДляУдаления = ТаблицаДвижений.Найти(ТекНомерСтроки, "НомерСтроки");
					Если Не СтрокаДляУдаления = Неопределено Тогда
						СтрокиДляУдаленияДвижений.Добавить(СтрокаДляУдаления);
					КонецЕсли;
				КонецЦикла;
				
				Если СтрокиДляУдаленияДвижений.Количество() > 0 Тогда
					
					ЗаполнятьТЧ = НЕ ЗначениеЗаполнено(ТекСтрокаДвижения.УслугаОснование);
					
					// Сначала удалим данные о сторно из табличной части документа.
					Если ЗаполнятьТЧ Тогда
						
						СтруктураПоискаСтрокиТЧ = Новый Структура;
						СтруктураПоискаСтрокиТЧ.Вставить("ЛицевойСчет", ТекСтрокаДвижения.ЛицевойСчет);
						СтруктураПоискаСтрокиТЧ.Вставить("Услуга",      ТекСтрокаДвижения.Услуга);
						СтруктураПоискаСтрокиТЧ.Вставить("Договор",     ТекСтрокаДвижения.Договор);
						СтруктураПоискаСтрокиТЧ.Вставить("ВидТарифа",   ТекСтрокаДвижения.ВидТарифа);
						СтруктураПоискаСтрокиТЧ.Вставить("Тариф",       ТекСтрокаДвижения.Тариф);
						СтруктураПоискаСтрокиТЧ.Вставить("Сторно",      Истина);
						
						СтрокиДляУдаленияТЧ = ТЧ_УслугиПоПоказаниямПУ.НайтиСтроки(СтруктураПоискаСтрокиТЧ);
						Для Каждого ТекСтрокаУдаленияТЧ Из СтрокиДляУдаленияТЧ Цикл
							ТЧ_УслугиПоПоказаниямПУ.Удалить(ТекСтрокаУдаленияТЧ);
						КонецЦикла;
						
					КонецЕсли;
					
					// Определим объъем и сумму сторно, которые нужно разбить.
					ОбъемСторно = ТекСтрокаДвижения.Количество;
					СуммаСторно = ТекСтрокаДвижения.СуммаНачисления;
					
					// Запомним первые строки остатков, чтобы на них распределить нераспределенные объемы,
					// если это потребуется.
					ПерваяСтрокаДвиженияДляНераспределеннойСуммы = Неопределено;
					ПерваяСтрокаТЧДляНераспределеннойСуммы       = Неопределено;
					
					ЭтоПерваяСтрока = Истина;
					
					Если ТекущиеСтрокиОстатков.Количество() > 0 Тогда
						
						// Внимание! Здесь будем закрывать начисление сторно по имеющимся остаткам.
						
						// Будем обходить строки остатков.
						Для Каждого ТекСтрокаОстатка Из ТекущиеСтрокиОстатков Цикл
							
							Если ОбъемСторно = 0 И СуммаСторно = 0 Тогда
								Прервать;
							КонецЕсли;
							
							// Добавим новое движение.
							НовоеДвижение = ТаблицаДвижений.Добавить();
							
							НовоеДвижение.Период     = ДокументОбъект.Дата;
							НовоеДвижение.Активность = Истина;
							
							ЗаполнитьЗначенияСвойств(НовоеДвижение, ТекСтрокаДвижения);
							
							НовоеДвижение.МесяцНачисления = КонецМесяца(ТекСтрокаОстатка.Начало);
							НовоеДвижение.Начало          = ТекСтрокаОстатка.Начало;
							НовоеДвижение.Окончание       = ТекСтрокаОстатка.Окончание;
							НовоеДвижение.ДнейНачислено   = ТекСтрокаОстатка.ДнейНачислено;
							
							// Распределение объема.
							Если ОбъемСторно < ТекСтрокаОстатка.Количество Тогда
								ТекКоличество = ОбъемСторно;
							Иначе
								ТекКоличество = ТекСтрокаОстатка.Количество;
							КонецЕсли;
							
							// Распределение суммы. Суммы сторно отрицательны!
							Если СуммаСторно > ТекСтрокаОстатка.СуммаНачисления Тогда
								ТекСуммаНачисления = СуммаСторно;
							Иначе
								ТекСуммаНачисления = ТекСтрокаОстатка.СуммаНачисления;
							КонецЕсли;
							
							НовоеДвижение.Количество       = ТекКоличество;
							НовоеДвижение.СуммаНачисления  = ТекСуммаНачисления;
							
							Если ЭтоПерваяСтрока Тогда
								ПерваяСтрокаДвиженияДляНераспределеннойСуммы = НовоеДвижение;
							КонецЕсли;
							
							// Добавим новую строку в табличную часть.
							Если ЗаполнятьТЧ Тогда
								НоваяСтрокаТЧ = ТЧ_УслугиПоПоказаниямПУ.Добавить();
								НоваяСтрокаТЧ.ЛицевойСчет     = НовоеДвижение.ЛицевойСчет;
								НоваяСтрокаТЧ.ПоказаниеСчЛС   = НовоеДвижение.Количество;
								НоваяСтрокаТЧ.ВидТарифа       = НовоеДвижение.ВидТарифа;
								НоваяСтрокаТЧ.Тариф           = НовоеДвижение.Тариф;
								НоваяСтрокаТЧ.Сумма           = НовоеДвижение.СуммаНачисления;
								НоваяСтрокаТЧ.УдалитьНачислено= НовоеДвижение.СуммаНачисления;
								НоваяСтрокаТЧ.Услуга          = НовоеДвижение.Услуга;
								НоваяСтрокаТЧ.СоставнаяУслуга = НовоеДвижение.СоставнаяУслуга;
								НоваяСтрокаТЧ.Договор         = НовоеДвижение.Договор;
								НоваяСтрокаТЧ.ТипРасчета      = 1;
								НоваяСтрокаТЧ.НачалоПериода   = НовоеДвижение.Начало;
								НоваяСтрокаТЧ.КонецПериода    = НовоеДвижение.Окончание;
								НоваяСтрокаТЧ.СостояниеПУ     = Перечисления.УПЖКХ_СостоянияПриборовУчета.ЕстьИПУНетПоказаний;
								НоваяСтрокаТЧ.Сторно          = Истина;
								
								Если ЭтоПерваяСтрока Тогда
									ПерваяСтрокаТЧДляНераспределеннойСуммы = НоваяСтрокаТЧ;
								КонецЕсли;
								
							КонецЕсли;
							
							// Вычтем текущие объемы из общих распределяемых объемов.
							ОбъемСторно = ОбъемСторно - ТекКоличество;
							СуммаСторно = СуммаСторно - ТекСуммаНачисления;
							
							Если ЭтоПерваяСтрока Тогда
								ЭтоПерваяСтрока = Ложь;
							КонецЕсли;
							
						КонецЦикла;
						
						// Отнесем остатки сторно на последний остаток начисления.
						Если (Не ОбъемСторно = 0 Или Не СуммаСторно = 0)
							И ТекущиеСтрокиОстатков.Количество() > 0 Тогда
							
							ПерваяСтрокаДвиженияДляНераспределеннойСуммы.Количество      = ПерваяСтрокаДвиженияДляНераспределеннойСуммы.Количество      + ОбъемСторно;
							ПерваяСтрокаДвиженияДляНераспределеннойСуммы.СуммаНачисления = ПерваяСтрокаДвиженияДляНераспределеннойСуммы.СуммаНачисления + СуммаСторно;
							
							// Добавим новую строку в табличную часть.
							Если ЗаполнятьТЧ Тогда
								
								ПерваяСтрокаТЧДляНераспределеннойСуммы.ПоказаниеСчЛС = ПерваяСтрокаТЧДляНераспределеннойСуммы.ПоказаниеСчЛС + ОбъемСторно;
								ПерваяСтрокаТЧДляНераспределеннойСуммы.Сумма         = ПерваяСтрокаТЧДляНераспределеннойСуммы.Сумма     + СуммаСторно;
								ПерваяСтрокаТЧДляНераспределеннойСуммы.УдалитьНачислено = ПерваяСтрокаТЧДляНераспределеннойСуммы.УдалитьНачислено + СуммаСторно;
								
							КонецЕсли;
							
						КонецЕсли;
						
					Иначе
						
						// Внимание! Здесь остатков для закрытия начисления нет, поэтому
						// просто заполним табличную часть и обновим движение.
						
						// Сначала добавим движение.
						НовоеДвижение = ТаблицаДвижений.Добавить();
						
						НовоеДвижение.Период     = ДокументОбъект.Дата;
						НовоеДвижение.Активность = Истина;
						
						ЗаполнитьЗначенияСвойств(НовоеДвижение, ТекСтрокаДвижения);
						
						НовоеДвижение.Начало    = НачалоМесяца(ТекСтрокаДвижения.МесяцНачисления);
						НовоеДвижение.Окончание = КонецМесяца(ТекСтрокаДвижения.МесяцНачисления);
						
						// Затем строку в табличную часть.
						НоваяСтрокаТЧ = ТЧ_УслугиПоПоказаниямПУ.Добавить();
						
						ЗаполнитьЗначенияСвойств(НоваяСтрокаТЧ, ТекСтрокаДвижения);
						
						НоваяСтрокаТЧ.ПоказаниеСчЛС   = ОбъемСторно;
						НоваяСтрокаТЧ.Сумма           = СуммаСторно;
						НоваяСтрокаТЧ.УдалитьНачислено= СуммаСторно;
						НоваяСтрокаТЧ.ТипРасчета      = 1;
						НоваяСтрокаТЧ.НачалоПериода   = НачалоМесяца(ТекСтрокаДвижения.МесяцНачисления);
						НоваяСтрокаТЧ.КонецПериода    = КонецМесяца(ТекСтрокаДвижения.МесяцНачисления);
						НоваяСтрокаТЧ.СостояниеПУ     = Перечисления.УПЖКХ_СостоянияПриборовУчета.ЕстьИПУНетПоказаний;
						НоваяСтрокаТЧ.Сторно          = Истина;
						
					КонецЕсли;
					
					// Удалим разбитую строку.
					Для Каждого ТекСтрокаДляУдаления Из СтрокиДляУдаленияДвижений Цикл
						ТаблицаДвижений.Удалить(ТекСтрокаДляУдаления);
					КонецЦикла;
					
				КонецЕсли;
				
			КонецЦикла;
			
			// Запишем набор записей движений.
			НаборЗаписей.Загрузить(ТаблицаДвижений);
			ЗаписатьОбъект(НаборЗаписей);
			
			// Запишем документ.
			ЗаписатьОбъект(ДокументОбъект, РежимЗаписиДокумента.Запись);
			
			НомерТекДокумента = НомерТекДокумента + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	СформироватьДокументВозможныхОшибокНачисленияСторно(ТаблицаОшибок, СтруктураРезультатаОбновления);
	
КонецПроцедуры // ОткорректироватьСторноВДвиженияхИСтрокахТЧВДокументеНачислениеУслугПоПУ_3027

// Функция возвращает запрос для получения движений по сторно
// для последующего их разделения.
Функция ЗапросПолученияДвиженийНачисленияСторноДляРазделения()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_Начисления.Регистратор КАК Регистратор,
	|	УПЖКХ_Начисления.НомерСтроки КАК НомерСтроки,
	|	УПЖКХ_Начисления.Организация,
	|	УПЖКХ_Начисления.ЛицевойСчет,
	|	УПЖКХ_Начисления.Услуга,
	|	УПЖКХ_Начисления.ВидТарифа,
	|	УПЖКХ_Начисления.Договор,
	|	УПЖКХ_Начисления.Тариф,
	|	УПЖКХ_Начисления.УслугаОснование,
	|	УПЖКХ_Начисления.РазделУчета,
	|	УПЖКХ_Начисления.ВидНачисления,
	|	УПЖКХ_Начисления.СоставнаяУслуга,
	|	УПЖКХ_Начисления.ИсточникОплаты,
	|	УПЖКХ_Начисления.УровеньРаспределения,
	|	УПЖКХ_Начисления.ОснованиеКорректировки,
	|	УПЖКХ_Начисления.МесяцРассрочки,
	|	УПЖКХ_Начисления.Количество,
	|	УПЖКХ_Начисления.СуммаНачисления,
	|	УПЖКХ_Начисления.Период КАК Период,
	|	УПЖКХ_Начисления.МесяцНачисления
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления КАК УПЖКХ_Начисления
	|ГДЕ
	|	УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ)
	|	И УПЖКХ_Начисления.Регистратор ССЫЛКА Документ.КВП_НачислениеУслуг
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	НомерСтроки УБЫВ
	|ИТОГИ ПО
	|	Регистратор";
	
	Возврат Запрос;
	
КонецФункции

// Функция возвращает запрос получения остатков для разделения движений
// по начислению сторно.
Функция ЗапросПолученияОстатковДляРазделенияДвиженийСторно()
	
	ЗапросОстатков = Новый Запрос;
	ЗапросОстатков.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаДляОтбора.ЛицевойСчет,
	|	ТаблицаДляОтбора.Услуга
	|ПОМЕСТИТЬ врТаблицаДляОтбора
	|ИЗ
	|	&ТаблицаДляОтбора КАК ТаблицаДляОтбора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.Услуга КАК Услуга,
	|	УПЖКХ_НачисленияОбороты.СоставнаяУслуга КАК СоставнаяУслуга,
	|	УПЖКХ_НачисленияОбороты.УслугаОснование,
	|	УПЖКХ_НачисленияОбороты.ВидТарифа,
	|	УПЖКХ_НачисленияОбороты.Тариф,
	|	УПЖКХ_НачисленияОбороты.Организация,
	|	УПЖКХ_НачисленияОбороты.Договор,
	|	-УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот КАК Сумма,
	|	УПЖКХ_НачисленияОбороты.МесяцНачисления КАК МесяцНачисления
	|ПОМЕСТИТЬ врОборотыСОтбором
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			,
	|			&КонецПериода,
	|			,
	|			Организация = &Организация
	|				И РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ)
	|				И (ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу)
	|					ИЛИ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|				И УслугаОснование В (&УслугаОснование)
	|				И (ЛицевойСчет, Услуга) В
	|					(ВЫБРАТЬ
	|						врТаблицаДляОтбора.ЛицевойСчет,
	|						врТаблицаДляОтбора.Услуга
	|					ИЗ
	|						врТаблицаДляОтбора КАК врТаблицаДляОтбора)) КАК УПЖКХ_НачисленияОбороты
	|ГДЕ
	|	НЕ УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_Начисления.Организация,
	|	УПЖКХ_Начисления.ЛицевойСчет,
	|	УПЖКХ_Начисления.Услуга,
	|	УПЖКХ_Начисления.СоставнаяУслуга,
	|	УПЖКХ_Начисления.УслугаОснование,
	|	УПЖКХ_Начисления.ВидТарифа,
	|	УПЖКХ_Начисления.Тариф,
	|	УПЖКХ_Начисления.Договор,
	|	УПЖКХ_Начисления.МесяцНачисления,
	|	СУММА(УПЖКХ_Начисления.Количество) КАК Количество,
	|	СУММА(-УПЖКХ_Начисления.СуммаНачисления) КАК СуммаНачисления,
	|	УПЖКХ_Начисления.Начало,
	|	УПЖКХ_Начисления.Окончание,
	|	УПЖКХ_Начисления.ДнейНачислено
	|ПОМЕСТИТЬ врНачисления
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления КАК УПЖКХ_Начисления
	|ГДЕ
	|	УПЖКХ_Начисления.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ)
	|	И (УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу)
	|			ИЛИ УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|	И УПЖКХ_Начисления.Период <= &ДатаДокумента
	|	И УПЖКХ_Начисления.Регистратор <> &Ссылка
	|	И НЕ УПЖКХ_Начисления.Начало = ДАТАВРЕМЯ(1, 1, 1)
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_Начисления.Услуга,
	|	УПЖКХ_Начисления.ВидТарифа,
	|	УПЖКХ_Начисления.ЛицевойСчет,
	|	УПЖКХ_Начисления.Тариф,
	|	УПЖКХ_Начисления.СоставнаяУслуга,
	|	УПЖКХ_Начисления.УслугаОснование,
	|	УПЖКХ_Начисления.Организация,
	|	УПЖКХ_Начисления.Договор,
	|	УПЖКХ_Начисления.МесяцНачисления,
	|	УПЖКХ_Начисления.Начало,
	|	УПЖКХ_Начисления.Окончание,
	|	УПЖКХ_Начисления.ДнейНачислено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врОборотыСОтбором.ЛицевойСчет,
	|	врОборотыСОтбором.Услуга,
	|	врОборотыСОтбором.СоставнаяУслуга,
	|	врОборотыСОтбором.УслугаОснование,
	|	врОборотыСОтбором.ВидТарифа,
	|	врОборотыСОтбором.Тариф,
	|	врОборотыСОтбором.Организация,
	|	врОборотыСОтбором.Договор,
	|	врНачисления.Количество,
	|	врНачисления.СуммаНачисления,
	|	врОборотыСОтбором.МесяцНачисления КАК МесяцНачисления,
	|	врНачисления.Начало,
	|	врНачисления.Окончание,
	|	врНачисления.ДнейНачислено
	|ИЗ
	|	врОборотыСОтбором КАК врОборотыСОтбором
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врНачисления КАК врНачисления
	|		ПО врОборотыСОтбором.ЛицевойСчет = врНачисления.ЛицевойСчет
	|			И врОборотыСОтбором.Услуга = врНачисления.Услуга
	|			И врОборотыСОтбором.СоставнаяУслуга = врНачисления.СоставнаяУслуга
	|			И врОборотыСОтбором.УслугаОснование = врНачисления.УслугаОснование
	|			И врОборотыСОтбором.ВидТарифа = врНачисления.ВидТарифа
	|			И врОборотыСОтбором.Тариф = врНачисления.Тариф
	|			И врОборотыСОтбором.Организация = врНачисления.Организация
	|			И врОборотыСОтбором.Договор = врНачисления.Договор
	|			И врОборотыСОтбором.МесяцНачисления = врНачисления.МесяцНачисления
	|
	|УПОРЯДОЧИТЬ ПО
	|	МесяцНачисления УБЫВ";
	
	Возврат ЗапросОстатков;
	
КонецФункции

// Процедура заполняет и отображает документ возможных ошибок по начислению сторно.
//
Процедура СформироватьДокументВозможныхОшибокНачисленияСторно(ТаблицаОшибок, СтруктураРезультатаОбновления)
	
	// Отобразим список ошибок, если они имеются.
	Если ТаблицаОшибок.Количество() > 0 Тогда
		
		ДокументРезультат = Новый ТабличныйДокумент;
		
		МакетОшибок = ПолучитьМакет("МакетОшибокОбработкиСторно");
		ОбластьШапка  = МакетОшибок.ПолучитьОбласть("Шапка");
		ОбластьПодвал = МакетОшибок.ПолучитьОбласть("Подвал");
		
		ДокументРезультат.ТолькоПросмотр = Истина;
		ДокументРезультат.Вывести(ОбластьШапка);
		ДокументРезультат.НачатьАвтогруппировкуСтрок();
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаОшибок", ТаблицаОшибок);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаОшибок.Регистратор,
		|	ТаблицаОшибок.НомерСтроки,
		|	ТаблицаОшибок.ЛицевойСчет,
		|	ТаблицаОшибок.Услуга,
		|	ТаблицаОшибок.УслугаОснование,
		|	ТаблицаОшибок.ВидТарифа,
		|	ТаблицаОшибок.Договор,
		|	ТаблицаОшибок.Тариф,
		|	ТаблицаОшибок.Количество,
		|	ТаблицаОшибок.СуммаНачисления,
		|	ТаблицаОшибок.РазделУчета,
		|	ТаблицаОшибок.ВидНачисления
		|ПОМЕСТИТЬ врТаблицаОшибок
		|ИЗ
		|	&ТаблицаОшибок КАК ТаблицаОшибок
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	врТаблицаОшибок.Регистратор КАК Регистратор,
		|	врТаблицаОшибок.НомерСтроки КАК НомерСтроки,
		|	врТаблицаОшибок.ЛицевойСчет,
		|	врТаблицаОшибок.Услуга,
		|	врТаблицаОшибок.УслугаОснование,
		|	врТаблицаОшибок.ВидТарифа,
		|	врТаблицаОшибок.Договор,
		|	врТаблицаОшибок.Тариф,
		|	врТаблицаОшибок.Количество,
		|	врТаблицаОшибок.СуммаНачисления,
		|	врТаблицаОшибок.РазделУчета,
		|	врТаблицаОшибок.ВидНачисления
		|ИЗ
		|	врТаблицаОшибок КАК врТаблицаОшибок
		|
		|УПОРЯДОЧИТЬ ПО
		|	Регистратор
		|ИТОГИ ПО
		|	Регистратор";
		
		ДеревоОшибок = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Для Каждого ТекСтрокаРегистратор Из ДеревоОшибок.Строки Цикл
			
			ОбластьСтрокаТЧ = МакетОшибок.ПолучитьОбласть("СтрокаТЧ");
			ОбластьСтрокаТЧ.Параметры.Регистратор = ТекСтрокаРегистратор.Регистратор;
			
			//ДокументРезультат.Вывести(ОбластьСтрокаТЧ, 1);
			
			Для Каждого ТекСтрокаОшибки Из ТекСтрокаРегистратор.Строки Цикл
				
				ОбластьСтрокаТЧ = МакетОшибок.ПолучитьОбласть("СтрокаТЧ");
				ОбластьСтрокаТЧ.Параметры.Заполнить(ТекСтрокаОшибки);
				ОбластьСтрокаТЧ.Параметры.Регистратор = "";
				
				ДокументРезультат.Вывести(ОбластьСтрокаТЧ, 2);
				
			КонецЦикла;
			
		КонецЦикла;
		
		ДокументРезультат.ЗакончитьАвтогруппировкуСтрок();
		
		ДокументРезультат.Вывести(ОбластьПодвал);
		
		СтруктураРезультатаОбновления.Вставить("АдресОшибокОбработкиСторно", ПоместитьВоВременноеХранилище(ДокументРезультат, Новый УникальныйИдентификатор));
		
	Иначе
		
		ТабДокОшибокОбработкиСторно = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

// ПЕРЕХОД НА НОВЫЙ РЕГИСТР ДЛЯ УЧЕТА ДАННЫХ СТОРНО

// Процедура заполняет новый регистр накопления "Данные для сторнирования начислений при отсутствии показаний ИПУ"
// на основе регистра накопления "Начисления".
//
Процедура ЗаполнитьРегистрНакопленияДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ_3_0_44_19()
	
	// Для обработки большого кол-ва документов выполняем обработку обновления порционно. 
	// Для этого:
	// 1. Получаем список документов для обработки, а именно: получаем документы, для которых еще нет записей в новом регистре.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УПЖКХ_Начисления.Регистратор КАК Регистратор,
	|	УПЖКХ_Начисления.Период
	|ПОМЕСТИТЬ врСписокДокументовСДаннымиДляОтраженияСторнирования
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления КАК УПЖКХ_Начисления
	|ГДЕ
	|	УПЖКХ_Начисления.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|	И УПЖКХ_Начисления.Регистратор ССЫЛКА Документ.КВП_НачислениеУслуг
	|	И НЕ УПЖКХ_Начисления.СуммаНачисления = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.Регистратор
	|ПОМЕСТИТЬ врСписокДокументовСДвижениямиРегистраДанныеДляСторнирования
	|ИЗ
	|	РегистрНакопления.УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ КАК УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокДокументовСДаннымиДляОтраженияСторнирования.Регистратор КАК Регистратор
	|ИЗ
	|	врСписокДокументовСДаннымиДляОтраженияСторнирования КАК СписокДокументовСДаннымиДляОтраженияСторнирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ врСписокДокументовСДвижениямиРегистраДанныеДляСторнирования КАК СписокДокументовСДвижениямиРегистраДанныеДляСторнирования
	|		ПО СписокДокументовСДаннымиДляОтраженияСторнирования.Регистратор = СписокДокументовСДвижениямиРегистраДанныеДляСторнирования.Регистратор
	|ГДЕ
	|	ЕСТЬNULL(СписокДокументовСДвижениямиРегистраДанныеДляСторнирования.Регистратор, ИСТИНА) = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	СписокДокументовСДаннымиДляОтраженияСторнирования.Период";
	
	ОбщийМассивРегистраторов     = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбщееКоличествоРегистраторов = ОбщийМассивРегистраторов.Количество();
	МассивДокументовДляОбработки = Новый Массив;
	ОбщийИндекс = 0;
	
	Пока НЕ ОбщийИндекс = ОбщееКоличествоРегистраторов Цикл
		
		МассивДокументовДляОбработки.Очистить();
		
		// 2. Отбираем пачку документов.
		КоличествоДокументовДляОбработки = Мин(200, ОбщееКоличествоРегистраторов - ОбщийИндекс);
		
		Для ТекущийИндекс = 1 По КоличествоДокументовДляОбработки Цикл
			
			МассивДокументовДляОбработки.Добавить(ОбщийМассивРегистраторов[ОбщийИндекс]);
			ОбщийИндекс = ОбщийИндекс + 1;
			
		КонецЦикла;
		
		// 3. Обрабатываем полученную пачку документов.
		ОбработатьСписокДокументовИЗаписатьДанныеДляСторнированияНачислений(МассивДокументовДляОбработки);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет новый регистр накопления "Данные для сторнирования начислений при отсутствии показаний ИПУ"
// на основе регистра накопления "Начисления" для переданного списка документов.
//
Процедура ОбработатьСписокДокументовИЗаписатьДанныеДляСторнированияНачислений(МассивДокументов)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_Начисления.Регистратор КАК Регистратор,
	|	УПЖКХ_Начисления.Организация,
	|	УПЖКХ_Начисления.ЛицевойСчет,
	|	УПЖКХ_Начисления.Услуга,
	|	УПЖКХ_Начисления.СоставнаяУслуга,
	|	УПЖКХ_Начисления.УслугаОснование,
	|	УПЖКХ_Начисления.ВидТарифа,
	|	УПЖКХ_Начисления.Тариф,
	|	УПЖКХ_Начисления.Начало КАК НачалоПериода,
	|	УПЖКХ_Начисления.Окончание КАК КонецПериода,
	|	УПЖКХ_Начисления.Количество,
	|	УПЖКХ_Начисления.Период,
	|	ВЫБОР
	|		КОГДА УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ)
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|	КОНЕЦ КАК ВидДвижения
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления КАК УПЖКХ_Начисления
	|ГДЕ
	|	УПЖКХ_Начисления.ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|	И УПЖКХ_Начисления.Регистратор В(&СписокДокументов)
	|	И НЕ УПЖКХ_Начисления.СуммаНачисления = 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	УПЖКХ_Начисления.Период,
	|	УПЖКХ_Начисления.НомерСтроки
	|ИТОГИ ПО
	|	Регистратор";
	
	Запрос.УстановитьПараметр("СписокДокументов", МассивДокументов);
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаРегистраторов.Следующий() Цикл
		
		ДокументОбъект   = ВыборкаРегистраторов.Регистратор.ПолучитьОбъект();
		ТаблицаПоУслугам = ДокументОбъект.УслугиПоПоказаниямПУ.Выгрузить();
		ТаблицаПоУслугам.Индексы.Добавить("СостояниеПУ, Сторно");
		ТаблицаПоУслугам.Индексы.Добавить("Сторно");
	
		НайденныеСтрокиТЧ = ТаблицаПоУслугам.НайтиСтроки(Новый Структура("СостояниеПУ, Сторно", Перечисления.УПЖКХ_СостоянияПриборовУчета.ЕстьИПУНетПоказаний, Ложь));
		Для Каждого СтрокаТЧ Из НайденныеСтрокиТЧ Цикл
			СтрокаТЧ.ТарифДляСторнирования = СтрокаТЧ.Тариф;
		КонецЦикла;
		
		НайденныеСтрокиТЧ = ТаблицаПоУслугам.НайтиСтроки(Новый Структура("Сторно", Истина));
		Для Каждого СтрокаТЧ Из НайденныеСтрокиТЧ Цикл
			СтрокаТЧ.ТарифДляСторнирования = СтрокаТЧ.Тариф;
		КонецЦикла;
		
		ДокументОбъект.УслугиПоПоказаниямПУ.Загрузить(ТаблицаПоУслугам);
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ЗаписатьОбъект(ДокументОбъект, РежимЗаписиДокумента.Запись);
		
		НаборЗаписейРН = РегистрыНакопления.УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.СоздатьНаборЗаписей();
		НаборЗаписейРН.Отбор.Регистратор.Установить(ВыборкаРегистраторов.Регистратор);
		
		ВыборкаЗаписей = ВыборкаРегистраторов.Выбрать();
		Пока ВыборкаЗаписей.Следующий() Цикл
			
			НоваяЗапись = НаборЗаписейРН.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаЗаписей);
			
		КонецЦикла;
		
		ЗаписатьОбъект(НаборЗаписейРН);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура добавляет корректировочные записи в регистр накопления "Данные для сторнирования начислений при отсутствии
// показаний ИПУ" с помощью документа "Операция".
//
Процедура ОткорректироватьДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ_3_0_44_19(СтруктураРезультатаОбновления)
	
	// В виду того, что ранее в программе были произведены автоматические корректировки 
	// записей регистра "Начисления" (из-за некорректного списания данных сторнировок
	// у ряда пользователей), когда с помощью документа "Корректировка начислений" были откорректированны 
	// суммы сторнировок (без объемов), теперь возникла необходимость в докорректировке объемов этих сторнировок.
	//
	//
	// Получаем данные для сторнировки из нового регистра, которые необходимо скорректировать.
	// Для этого:
	//  1) Получаем объемы начислений, подлежащие сторнировке на момент обновления, в которых сумма нулевая, 
	//     а объем ненулевой. Для каждой из полученных комбинаций в новом регистре берем остатки. 
	//     Если объем не нулевой, то выбираем остаток нового регистра, чтобы его скорректировать до нуля. 
	//  2) Кроме этого, выбираем для корректировки все данные из нового регистра с отрицательными остатками. 
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_Начисления.Организация,
	|	УПЖКХ_Начисления.ЛицевойСчет,
	|	УПЖКХ_Начисления.Услуга,
	|	УПЖКХ_Начисления.СоставнаяУслуга,
	|	УПЖКХ_Начисления.УслугаОснование,
	|	УПЖКХ_Начисления.ВидТарифа,
	|	УПЖКХ_Начисления.Тариф,
	|	УПЖКХ_Начисления.Договор,
	|	УПЖКХ_Начисления.МесяцНачисления,
	|	СУММА(УПЖКХ_Начисления.Количество * ВЫБОР
	|			КОГДА УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ)
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК Количество,
	|	СУММА(УПЖКХ_Начисления.СуммаНачисления) КАК Сумма,
	|	УПЖКХ_Начисления.Начало,
	|	УПЖКХ_Начисления.Окончание,
	|	УПЖКХ_Начисления.ДнейНачислено
	|ПОМЕСТИТЬ врНачисления
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления КАК УПЖКХ_Начисления
	|ГДЕ
	|	УПЖКХ_Начисления.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ)
	|	И (УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу)
	|			ИЛИ УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПосреднему)
	|			ИЛИ УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ))
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_Начисления.Организация,
	|	УПЖКХ_Начисления.ЛицевойСчет,
	|	УПЖКХ_Начисления.Услуга,
	|	УПЖКХ_Начисления.СоставнаяУслуга,
	|	УПЖКХ_Начисления.УслугаОснование,
	|	УПЖКХ_Начисления.ВидТарифа,
	|	УПЖКХ_Начисления.Тариф,
	|	УПЖКХ_Начисления.Договор,
	|	УПЖКХ_Начисления.МесяцНачисления,
	|	УПЖКХ_Начисления.Начало,
	|	УПЖКХ_Начисления.Окончание,
	|	УПЖКХ_Начисления.ДнейНачислено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_Начисления.Организация,
	|	УПЖКХ_Начисления.ЛицевойСчет,
	|	УПЖКХ_Начисления.Услуга,
	|	УПЖКХ_Начисления.СоставнаяУслуга,
	|	УПЖКХ_Начисления.УслугаОснование,
	|	УПЖКХ_Начисления.ВидТарифа,
	|	УПЖКХ_Начисления.Тариф,
	|	УПЖКХ_Начисления.Начало КАК НачалоПериода,
	|	УПЖКХ_Начисления.Окончание КАК КонецПериода,
	|	УПЖКХ_Начисления.Количество,
	|	УПЖКХ_Начисления.Сумма
	|ПОМЕСТИТЬ врДанныеДляКорректировкиСторнирования
	|ИЗ
	|	врНачисления КАК УПЖКХ_Начисления
	|ГДЕ
	|	УПЖКХ_Начисления.Количество > 0
	|	И УПЖКХ_Начисления.Сумма = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.Организация КАК Организация,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.ЛицевойСчет,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.Услуга,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.СоставнаяУслуга,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.УслугаОснование,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.ВидТарифа,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.Тариф,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.НачалоПериода,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.КонецПериода,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.Остатки(
	|			,
	|			(Организация, ЛицевойСчет, Услуга, СоставнаяУслуга, УслугаОснование, ВидТарифа, Тариф, НачалоПериода, КонецПериода) В
	|				(ВЫБРАТЬ
	|					ДанныеДляКорректировкиСторнирования.Организация,
	|					ДанныеДляКорректировкиСторнирования.ЛицевойСчет,
	|					ДанныеДляКорректировкиСторнирования.Услуга,
	|					ДанныеДляКорректировкиСторнирования.СоставнаяУслуга,
	|					ДанныеДляКорректировкиСторнирования.УслугаОснование,
	|					ДанныеДляКорректировкиСторнирования.ВидТарифа,
	|					ДанныеДляКорректировкиСторнирования.Тариф,
	|					ДанныеДляКорректировкиСторнирования.НачалоПериода,
	|					ДанныеДляКорректировкиСторнирования.КонецПериода
	|				ИЗ
	|					врДанныеДляКорректировкиСторнирования КАК ДанныеДляКорректировкиСторнирования)) КАК УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ
	|ГДЕ
	|	НЕ УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.КоличествоОстаток = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.Организация,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.ЛицевойСчет,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.Услуга,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.СоставнаяУслуга,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.УслугаОснование,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.ВидТарифа,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.Тариф,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.НачалоПериода,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.КонецПериода,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.Остатки(, ) КАК УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ
	|ГДЕ
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.КоличествоОстаток < 0
	|ИТОГИ ПО
	|	Организация";
	
	ВыборкаОрганизаций = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Если ВыборкаОрганизаций.Количество() > 0 Тогда
		
		// Получим макет и определим области.
		ТабличныйДокумент    = ПолучитьМакет("ОшибкиОбработкиОбъемовСторно");
		ОбластьЗаголовок     = ТабличныйДокумент.ПолучитьОбласть("ШапкаОтчета");
		ОбластьШапкаТаблицы  = ТабличныйДокумент.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтрокаТаблицы = ТабличныйДокумент.ПолучитьОбласть("СтрокаТаблицы");
		
		// Выведем области в табличный документ.
		МакетОписаниеОбновлений = Новый ТабличныйДокумент;
		МакетОписаниеОбновлений.Вывести(ОбластьЗаголовок);
		МакетОписаниеОбновлений.Вывести(ОбластьШапкаТаблицы);
		
		// Заполним параметры области "ОбластьСтрокаТаблицы" и выводим в табличный документ.
		НомерСтроки = 1;
		
	КонецЕсли;
	
	Пока ВыборкаОрганизаций.Следующий() Цикл
		
		// По каждой организации создаем документ "Операция".
		Документ = Документы.ОперацияБух.СоздатьДокумент();
		Документ.Дата          = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
		Документ.Организация   = ВыборкаОрганизаций.Организация;
		Документ.Ответственный = УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь();
		Документ.Содержание    = НСтр("ru = 'Корректировка данных для сторнирования начислений'");
		Документ.Комментарий   = НСтр("ru = '#Документ создан автоматически обработкой обновления (ЖКХ)'");
		
		СтрокаРегистра = Документ.ТаблицаРегистровНакопления.Добавить();
		СтрокаРегистра.Имя = "УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ";
		
		ЗаписатьОбъект(Документ, РежимЗаписиДокумента.Запись);
		
		НаборЗаписейРН = РегистрыНакопления.УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.СоздатьНаборЗаписей();
		НаборЗаписейРН.Отбор.Регистратор.Установить(Документ.Ссылка);
		
		ВыборкаЗаписей = ВыборкаОрганизаций.Выбрать();
		Пока ВыборкаЗаписей.Следующий() Цикл
			
			// Для каждой корректируемой записи формируем движение по списанию остатка 
			// в регистре "Данные для сторнирования начислений при отсутствии показаний ИПУ".
			НоваяЗапись = НаборЗаписейРН.Добавить();
			НоваяЗапись.Период      = Документ.Дата;
			НоваяЗапись.Регистратор = Документ.Ссылка;
			НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Расход;
			НоваяЗапись.Активность  = Истина;
			
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаЗаписей);
			
		КонецЦикла;
		
		ЗаписатьОбъект(НаборЗаписейРН);
		
		// Выводим область в табличный документ.
		ОбластьСтрокаТаблицы.Параметры.НомерСтроки    = НомерСтроки;
		ОбластьСтрокаТаблицы.Параметры.ДокументСсылка = Документ.Ссылка;
		МакетОписаниеОбновлений.Вывести(ОбластьСтрокаТаблицы);
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	// Передаем заполненный табличный документ для вывода.
	АдресМакета = ПоместитьВоВременноеХранилище(МакетОписаниеОбновлений, Новый УникальныйИдентификатор);
	СтруктураРезультатаОбновления.Вставить("ДокументыОперацияБухСКорректирующимиЗаписямиПоСторно", АдресМакета);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКИ РЕСТРУКТУРИЗАЦИИ ПАРАМЕТРОВ ЗАГРУЗКИ РЕЕСТРА ПОКАЗАНИЙ СЧЕТЧИКОВ

#Область ОбработчикиМеханизмаЗагрузкиРеестраПоказанийСчетчиков

// Процедура заполняет реквизит "Вариант распределения оплат" в документах "Регистрация оплаты"
// значением по умолчанию "Все услуги".
//
Процедура ЗаполнитьВариантРаспределенияОплатКапРемонта_3_0_41_10()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_РегистрацияОплаты.Ссылка КАК ДокументСсылка
	|ИЗ
	|	Документ.КВП_РегистрацияОплаты КАК КВП_РегистрацияОплаты
	|ГДЕ
	|	КВП_РегистрацияОплаты.ВариантРаспределенияОплатКапРемонт = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.ДокументСсылка.ПолучитьОбъект();
		
		ДокументОбъект.ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.ВсеУслуги;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ЗаписатьОбъект(ДокументОбъект, РежимЗаписиДокумента.Запись);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьВариантРаспределенияОплатКапРемонта_3_0_41_10()

// Процедура заполняет новый регистр сведений "Сведения об обслуживающих здания организациях"
// на основании данных справочников "Здания, сооружения" и "Организации".
//
Процедура ЗаполнитьСведенияОбОбслуживающихЗданияОрганизациях_3_0_41_10()
	
	// Получим даты начала действия учетных политик организаций.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_УчетнаяПолитикаТСЖ.Период КАК Период,
	|	КВП_УчетнаяПолитикаТСЖ.Организация
	|ИЗ
	|	РегистрСведений.КВП_УчетнаяПолитикаТСЖ.СрезПервых КАК КВП_УчетнаяПолитикаТСЖ";
	
	ТаблицаПериодовУчетнойПолитикиОрганизаций = Запрос.Выполнить().Выгрузить();
	
	// В запросе получаем дерево по зданиям, в ветках которого указаны организации
	// и количество лицевых счетов, по которым есть назначения услуг по данной организации.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_НазначенныеНачисленияСрезПоследних.Организация,
	|	КВП_НазначенныеНачисленияСрезПоследних.Объект.Адрес.Владелец КАК Здание,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КВП_НазначенныеНачисленияСрезПоследних.Объект) КАК КоличествоЛС
	|ПОМЕСТИТЬ врКоличествоЛицевыхСчетовПоЗданиям
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеНачисления.СрезПоследних(, Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета) КАК КВП_НазначенныеНачисленияСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_НазначенныеНачисленияСрезПоследних.Организация,
	|	КВП_НазначенныеНачисленияСрезПоследних.Объект.Адрес.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СведенияОбОбслуживающихЗданияОрганизацияхСрезПоследних.Здание,
	|	УПЖКХ_СведенияОбОбслуживающихЗданияОрганизацияхСрезПоследних.Организация
	|ПОМЕСТИТЬ врНаличиеСведенийОбОбслуживающихОрганизациях
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях.СрезПоследних(
	|			,
	|			Здание В
	|				(ВЫБРАТЬ
	|					врКоличествоЛицевыхСчетовПоЗданиям.Здание
	|				ИЗ
	|					врКоличествоЛицевыхСчетовПоЗданиям КАК врКоличествоЛицевыхСчетовПоЗданиям)) КАК УПЖКХ_СведенияОбОбслуживающихЗданияОрганизацияхСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врКоличествоЛицевыхСчетовПоЗданиям.Организация,
	|	врКоличествоЛицевыхСчетовПоЗданиям.Организация.ОсновнойБанковскийСчет КАК ОсновнойБанковскийСчет,
	|	врКоличествоЛицевыхСчетовПоЗданиям.Здание,
	|	врКоличествоЛицевыхСчетовПоЗданиям.Здание.УдалитьРасчетныйСчетКапРемонт КАК РасчетныйСчетКапРемонт,
	|	врКоличествоЛицевыхСчетовПоЗданиям.КоличествоЛС КАК КоличествоЛС,
	|	ВЫБОР
	|		КОГДА врНаличиеСведенийОбОбслуживающихОрганизациях.Организация ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЕстьДанныеОбОбслуживающейОрганизации
	|ПОМЕСТИТЬ врТаблицаСведенийОЗданиях
	|ИЗ
	|	врКоличествоЛицевыхСчетовПоЗданиям КАК врКоличествоЛицевыхСчетовПоЗданиям
	|		ЛЕВОЕ СОЕДИНЕНИЕ врНаличиеСведенийОбОбслуживающихОрганизациях КАК врНаличиеСведенийОбОбслуживающихОрганизациях
	|		ПО врКоличествоЛицевыхСчетовПоЗданиям.Здание = врНаличиеСведенийОбОбслуживающихОрганизациях.Здание
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врТаблицаСведенийОЗданиях.Организация,
	|	врТаблицаСведенийОЗданиях.ОсновнойБанковскийСчет,
	|	врТаблицаСведенийОЗданиях.Здание КАК Здание,
	|	врТаблицаСведенийОЗданиях.РасчетныйСчетКапРемонт,
	|	врТаблицаСведенийОЗданиях.КоличествоЛС КАК КоличествоЛС
	|ИЗ
	|	врТаблицаСведенийОЗданиях КАК врТаблицаСведенийОЗданиях
	|ГДЕ
	|	НЕ врТаблицаСведенийОЗданиях.ЕстьДанныеОбОбслуживающейОрганизации
	|
	|УПОРЯДОЧИТЬ ПО
	|	врТаблицаСведенийОЗданиях.КоличествоЛС УБЫВ
	|ИТОГИ
	|	МАКСИМУМ(КоличествоЛС)
	|ПО
	|	Здание";
	
	ВыборкаЗданий = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗданий.Следующий() Цикл
		
		ВыборкаСведенийОбОбслуживающейОрганизации = ВыборкаЗданий.Выбрать();
		Если ВыборкаСведенийОбОбслуживающейОрганизации.Следующий() Тогда
			
			// Значение расчетного счета по умолчанию.
			РасчетныйСчетУслугКапитальногоРемонта = Справочники.БанковскиеСчета.ПустаяСсылка();
			
			// Определение расчетного счета по услугам капитального ремонта.
			Если ЗначениеЗаполнено(ВыборкаСведенийОбОбслуживающейОрганизации.РасчетныйСчетКапРемонт) Тогда
				
				РасчетныйСчетОбъект = ВыборкаСведенийОбОбслуживающейОрганизации.РасчетныйСчетКапРемонт.ПолучитьОбъект();
				
				// Ищем счет, владельцем которого является указанная организация,
				// совпадающий по номеру со счетом кап.ремонта здания.
				НайденныйРасчетныйСчетОрганизации = Справочники.БанковскиеСчета.НайтиПоРеквизиту("НомерСчета", РасчетныйСчетОбъект.НомерСчета,, ВыборкаСведенийОбОбслуживающейОрганизации.Организация);
				
				Если НайденныйРасчетныйСчетОрганизации.Пустая() Тогда
					
					// Если такой счет не найден, то изменяем владельца счета здания - указываем организацию в качестве владельца.
					РасчетныйСчетОбъект.Владелец = ВыборкаСведенийОбОбслуживающейОрганизации.Организация;
					ЗаписатьОбъект(РасчетныйСчетОбъект);
					
					РасчетныйСчетУслугКапитальногоРемонта = РасчетныйСчетОбъект.Ссылка;
					
				Иначе
					
					// Если такой счет найден, то указываем его в качестве РС кап.ремонта, а исходный счет помечаем на удаление.
					Если Не РасчетныйСчетОбъект.Ссылка = НайденныйРасчетныйСчетОрганизации Тогда
						// Помечаем на удаление только тогда, когда найденный счет отличается от исходного.
						// В противном случае этот один и тот же счет.
						РасчетныйСчетОбъект.УстановитьПометкуУдаления(Истина);
					КонецЕсли;
					
					РасчетныйСчетУслугКапитальногоРемонта = НайденныйРасчетныйСчетОрганизации;
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Создадим набор записей регистра.
			НаборЗаписей = РегистрыСведений.УПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Здание.Установить(ВыборкаСведенийОбОбслуживающейОрганизации.Здание);
			
			// Заполнение записи в регистре сведений.
			НоваяЗапись = НаборЗаписей.Добавить();
			
			// Определим период записей регистра сведений по данным учетной политики ЖКХ.
			ПериодЗаписи = НачалоГода(ТекущаяДата());
			НайденнаяСтрокаПериода = ТаблицаПериодовУчетнойПолитикиОрганизаций.Найти(ВыборкаСведенийОбОбслуживающейОрганизации.Организация, "Организация");
			Если Не НайденнаяСтрокаПериода = Неопределено Тогда
				ПериодЗаписи = НайденнаяСтрокаПериода.Период;
			КонецЕсли;
			НоваяЗапись.Период                                = ПериодЗаписи;
			
			НоваяЗапись.Здание                                = ВыборкаЗданий.Здание;
			НоваяЗапись.Организация                           = ВыборкаСведенийОбОбслуживающейОрганизации.Организация;
			НоваяЗапись.РасчетныйСчетУслуг                    = ВыборкаСведенийОбОбслуживающейОрганизации.ОсновнойБанковскийСчет;
			НоваяЗапись.РасчетныйСчетУслугКапитальногоРемонта = РасчетныйСчетУслугКапитальногоРемонта;
			
			// Сброс данных регистра в базу данных.
			ЗаписатьОбъект(НаборЗаписей);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСведенияОбОбслуживающихЗданияОрганизациях_3_0_41_10()

// Процедура устанвливает значение по умолчанию для нового ресурса "ФорматКодировкиТекстаQR" регистра
// сведений "УПЖКХ_НастройкиФормированияПлатежногоДокумента".
//
Процедура УстановитьФорматКодировкиТекстQRШКПоумолчанию_3_0_41_10()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.Организация
	|ИЗ
	|	РегистрСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента КАК УПЖКХ_НастройкиФормированияПлатежногоДокумента
	|ГДЕ
	|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.ФорматКодировкиТекстаQR = 0";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента.СоздатьМенеджерЗаписи();
		НаборЗаписей.Организация = Выборка.Организация;
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Выбран() Тогда
			НаборЗаписей.ФорматКодировкиТекстаQR = 2; // соответствует UTF-8
			ЗаписатьОбъект(НаборЗаписей);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьФорматКодировкиТекстQRШКПоумолчанию_3_0_41_10()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКИ ЗАПОЛНЕНИЯ НАСТРОЕК ЗАГРУЗКИ / ВЫГРУЗКИ

#Область ОбработкиЗаполненияНастроекЗагрузкиВыгрузки

// Процедура перезаполняет настройки выгрузки с помощью обработки "Универсальная выгрузка данных".
// Параметр "Счетчик и показание" переименован в "Счетчики и услуги".
// Использование данного параметра позволяет настроить выгрузку сведений по счетчикам и услугам
// раздельными блоками сведений: блок сведений по счетчикам позволяет выгружать сведения о счетчиках и их
// показаниях, блок сведений по услугам позволяет выгружать сведения об услугах и сумме долга по услуге.
//
Процедура ЗаполнитьНастройкиЗагрузкиВыгрузкиДляУниверсальнойВыгрузкиДанных_3_0_68_2()
	
	СтруктураЗначенийПолей = Справочники.КВП_НастройкиЗагрузкиВыгрузки.ПодговитьСтруктуруЗначенийПолей();
	СпФорматовФайла        = СтруктураЗначенийПолей.СпФорматовФайла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_НастройкиЗагрузкиВыгрузки.Ссылка КАК Ссылка,
	|	ИСТИНА КАК ИзменитьНастройкиПараметраСчетчикиИУслуги,
	|	ЛОЖЬ КАК ИзменитьНастройкиDBF
	|ПОМЕСТИТЬ врСводнаяТаблица
	|ИЗ
	|	Справочник.КВП_НастройкиЗагрузкиВыгрузки КАК КВП_НастройкиЗагрузкиВыгрузки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КВП_НастройкиЗагрузкиВыгрузки.НастройкиСоответствияПолей КАК КВП_НастройкиЗагрузкиВыгрузкиНастройкиСоответствияПолей
	|		ПО КВП_НастройкиЗагрузкиВыгрузки.Ссылка = КВП_НастройкиЗагрузкиВыгрузкиНастройкиСоответствияПолей.Ссылка
	|ГДЕ
	|	КВП_НастройкиЗагрузкиВыгрузки.ВидОперации = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНастроекЗагрузкиИзАС.УниверсальнаяВыгрузкаДанных)
	|	И КВП_НастройкиЗагрузкиВыгрузкиНастройкиСоответствияПолей.Параметр = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных.СчетчикиИУслуги)
	|	И КВП_НастройкиЗагрузкиВыгрузкиНастройкиСоответствияПолей.ПараметрБлокаСведений = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ПараметрыБлоковСведенийУниверсальнойВыгрузкиДанных.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КВП_НастройкиЗагрузкиВыгрузки.Ссылка,
	|	ЛОЖЬ,
	|	ИСТИНА
	|ИЗ
	|	Справочник.КВП_НастройкиЗагрузкиВыгрузки КАК КВП_НастройкиЗагрузкиВыгрузки
	|ГДЕ
	|	КВП_НастройкиЗагрузкиВыгрузки.ВидОперации = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНастроекЗагрузкиИзАС.УниверсальнаяВыгрузкаДанных)
	|	И КВП_НастройкиЗагрузкиВыгрузки.ФорматФайла = &ФорматФайлаDBF
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врСводнаяТаблица.Ссылка КАК Ссылка,
	|	МАКСИМУМ(врСводнаяТаблица.ИзменитьНастройкиПараметраСчетчикиИУслуги) КАК ИзменитьНастройкиПараметраСчетчикиИУслуги,
	|	МАКСИМУМ(врСводнаяТаблица.ИзменитьНастройкиDBF) КАК ИзменитьНастройкиDBF
	|ИЗ
	|	врСводнаяТаблица КАК врСводнаяТаблица
	|
	|СГРУППИРОВАТЬ ПО
	|	врСводнаяТаблица.Ссылка";
	
	Запрос.УстановитьПараметр("ФорматФайлаDBF", СпФорматовФайла[4].Значение); // "DBF".
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	ТипыПараметровБлоковСведений     = Перечисления.УПЖКХ_ТипыПараметровБлоковСведенийУниверсальнойВыгрузкиДанных;
	ПараметрыБлоковСведений          = Перечисления.УПЖКХ_ПараметрыБлоковСведенийУниверсальнойВыгрузкиДанных;
	СписокПараметровБлокаПоСчетчикам = ПараметрыБлоковСведений.СписокПараметровБлокаСведений("Счетчики");
	
	СпИдентификацияПУ           = СтруктураЗначенийПолей.СпИдентификацияПУ;
	СпРазделителейПослеЗначения = СтруктураЗначенийПолей.СпРазделителейПослеЗначения;
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ИзменитьНастройкиDBF                      = ВыборкаДетальныеЗаписи.ИзменитьНастройкиDBF;
		ИзменитьНастройкиПараметраСчетчикиИУслуги = ВыборкаДетальныеЗаписи.ИзменитьНастройкиПараметраСчетчикиИУслуги;
		
		// Объект справочника "Настройки загрузки / выгрузки данных".
		ОбъектНастройки = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		
		ТаблицаПараметров              = ОбъектНастройки.НастройкиСоответствияПолей.Выгрузить();
		ИспользоватьРазделительКолонок = ОбъектНастройки.ФорматФайла = СпФорматовФайла[0].Значение;// "TXT".
		ПараметрыУВД                   = Перечисления.УПЖКХ_ПараметрыУниверсальнойВыгрузкиДанных;
		
		ВнесеныИзменения = Ложь;
		
		Если ИзменитьНастройкиПараметраСчетчикиИУслуги Тогда
			
			Если ИспользоватьРазделительКолонок Тогда
				Для Каждого ТекущаяСтрока Из ТаблицаПараметров Цикл
					Если НЕ СпРазделителейПослеЗначения.НайтиПоЗначению(ТекущаяСтрока.РазделительПослеЗначения) = Неопределено Тогда
						ТекущаяСтрока.РазделительПослеЗначения = ТекущаяСтрока.РазделительПослеЗначения;
					Иначе
						ТекущаяСтрока.РазделительПослеЗначения = ОбъектНастройки.РазделительКолонок;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			НайденныеСтрокиПараметраСчетчикиИУслуги = ТаблицаПараметров.НайтиСтроки(Новый Структура("Параметр", ПараметрыУВД.СчетчикиИУслуги));
			
			Если НайденныеСтрокиПараметраСчетчикиИУслуги.Количество() > 0 Тогда
				
				СтрокаНастройкиВыгрузки = НайденныеСтрокиПараметраСчетчикиИУслуги[0];
				
				НастройкиПоляDBF = Неопределено;
				Если ИзменитьНастройкиDBF Тогда
					НастройкиПоляDBF = СтрокаНастройкиВыгрузки.Удалить_НастройкиПоляDBF.Получить();
					
					Если НЕ (ТипЗнч(НастройкиПоляDBF) = Тип("Структура")
					   И НастройкиПоляDBF.Свойство("ИмяПоляDBFСчетчик") И НастройкиПоляDBF.Свойство("ИмяПоляDBFПоказание")) Тогда
						НастройкиПоляDBF = Неопределено;
					КонецЕсли;
				КонецЕсли;
				
				// Блок "Счетчики":
				
				// Основная строка блока "Счетчики":
				
				ОсновнаяСтрокаСчетчики = ТаблицаПараметров.Добавить();
				
				ОсновнаяСтрокаСчетчики.Параметр                  = ПараметрыУВД.СчетчикиИУслуги;
				ОсновнаяСтрокаСчетчики.ТипПараметраБлокаСведений = ТипыПараметровБлоковСведений.ОсновнойПоСчетчикам;
				ОсновнаяСтрокаСчетчики.НомерКолонки              = СтрокаНастройкиВыгрузки.НомерКолонки;
				
				// Подстроки блока "Счетчики":
				
				// Параметр "Наименование":
				
				НоваяСтрокаСчетчики = ТаблицаПараметров.Добавить();
				
				НоваяСтрокаСчетчики.Параметр                  = ПараметрыУВД.СчетчикиИУслуги;
				НоваяСтрокаСчетчики.ТипПараметраБлокаСведений = ТипыПараметровБлоковСведений.Счетчики;
				НоваяСтрокаСчетчики.НомерКолонки              = 1;
				
				Если СтрокаНастройкиВыгрузки.ИдентификацияПУ = СпИдентификацияПУ[4].Значение Тогда // "номер в ГИС ЖКХ".
					НоваяСтрокаСчетчики.ПараметрБлокаСведений = ПараметрыБлоковСведений.НомерСчетчикаВГИСЖКХ;
				Иначе
					НайденныйЭлемент = СписокПараметровБлокаПоСчетчикам.НайтиПоЗначению(СтрокаНастройкиВыгрузки.ИдентификацияПУ);
					Если НайденныйЭлемент = Неопределено Тогда
						НоваяСтрокаСчетчики.ПараметрБлокаСведений = ПараметрыБлоковСведений.Наименование;
					Иначе
						НоваяСтрокаСчетчики.ПараметрБлокаСведений = НайденныйЭлемент.Значение;
					КонецЕсли;
				КонецЕсли;
				
				Если ИзменитьНастройкиDBF И НЕ НастройкиПоляDBF = Неопределено Тогда
					НоваяСтрокаСчетчики.ИмяПоляDBF = НастройкиПоляDBF.ИмяПоляDBFСчетчик;
				КонецЕсли;
				
				Если ИспользоватьРазделительКолонок Тогда
					// Разделитель после поля "Наименование":
					Если СпРазделителейПослеЗначения.НайтиПоЗначению(СтрокаНастройкиВыгрузки.РазделительПослеЗначения) = Неопределено Тогда
						НоваяСтрокаСчетчики.РазделительПослеЗначения = ОбъектНастройки.РазделительКолонок;
					Иначе
						НоваяСтрокаСчетчики.РазделительПослеЗначения = СтрокаНастройкиВыгрузки.РазделительПослеЗначения;
					КонецЕсли;
				КонецЕсли;
				
				// Параметр "Показание":
				
				НоваяСтрокаСчетчики = ТаблицаПараметров.Добавить();
				
				НоваяСтрокаСчетчики.Параметр                  = ПараметрыУВД.СчетчикиИУслуги;
				НоваяСтрокаСчетчики.ТипПараметраБлокаСведений = ТипыПараметровБлоковСведений.Счетчики;
				НоваяСтрокаСчетчики.НомерКолонки              = 2;
				НоваяСтрокаСчетчики.ПараметрБлокаСведений     = ПараметрыБлоковСведений.Показание;
				
				Если ИзменитьНастройкиDBF И НЕ НастройкиПоляDBF = Неопределено Тогда
					НоваяСтрокаСчетчики.ИмяПоляDBF = НастройкиПоляDBF.ИмяПоляDBFПоказание;
				КонецЕсли;
				
				Если ИспользоватьРазделительКолонок Тогда
					// Разделитель после поля "Показание":
					Если НЕ СпРазделителейПослеЗначения.НайтиПоЗначению(СтрокаНастройкиВыгрузки.РазделительПослеЗначения) = Неопределено Тогда
						НоваяСтрокаСчетчики.РазделительПослеЗначения = СтрокаНастройкиВыгрузки.РазделительПослеЗначения;
					Иначе
						НоваяСтрокаСчетчики.РазделительПослеЗначения = ОбъектНастройки.РазделительКолонок;
					КонецЕсли;
				КонецЕсли;
				
				// Удаляем исходную строку, содержащую неактуальные настройки:
				
				Для Каждого ТекущаяСтрока Из НайденныеСтрокиПараметраСчетчикиИУслуги Цикл
					ТаблицаПараметров.Удалить(ТекущаяСтрока);
				КонецЦикла;
				
				ВнесеныИзменения = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ИзменитьНастройкиDBF Тогда
			
			Для Каждого ТекущаяСтрока Из ТаблицаПараметров Цикл
				Если НЕ ТекущаяСтрока.Параметр = ПараметрыУВД.СчетчикиИУслуги Тогда
					
					НастройкиПоляDBF = ТекущаяСтрока.Удалить_НастройкиПоляDBF.Получить();
					
					Если ТипЗнч(НастройкиПоляDBF) = Тип("Структура") И НастройкиПоляDBF.Свойство("ИмяПоляDBF") Тогда
						ТекущаяСтрока.ИмяПоляDBF = НастройкиПоляDBF.ИмяПоляDBF;
						ВнесеныИзменения = Истина;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ВнесеныИзменения Тогда
			ОбъектНастройки.НастройкиСоответствияПолей.Загрузить(ТаблицаПараметров);
		КонецЕсли;
		
		ЗаписатьОбъект(ОбъектНастройки);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБНОВЛЕНИЯ НАСТРОЕК WEB-ИНТЕГРАЦИИ

#Область ОбновлениеНастроекВебИнтеграции

// Процедура заполянет настройку "Выгрузка данных по ЛС" справочника "Варианты обмена данными".
//
Процедура ЗаполнитьТаблицыНастроекВыгрузкиЛСВариантовОбменаДаннымиССайтом_3_0_42_7()
	
	// Получаем настройки вариантов обмена
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_ВариантыОбменаДаннымиССайтом.Ссылка КАК ВариантОбмена,
	|	УПЖКХ_ВариантыОбменаДаннымиССайтом.УдалитьСпособВыгрузкиДанныхПоЛС КАК СпособВыгрузкиДанныхПоЛС
	|ПОМЕСТИТЬ втВариантыОбмена
	|ИЗ
	|	Справочник.УПЖКХ_ВариантыОбменаДаннымиССайтом КАК УПЖКХ_ВариантыОбменаДаннымиССайтом
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_ВариантыОбменаДаннымиССайтомТаблицаНастроекВыгрузкиУслуг.Ссылка КАК ВариантОбмена
	|ПОМЕСТИТЬ втТаблицыНастроекВыгрузки
	|ИЗ
	|	Справочник.УПЖКХ_ВариантыОбменаДаннымиССайтом.ТаблицаНастроекВыгрузкиУслуг КАК УПЖКХ_ВариантыОбменаДаннымиССайтомТаблицаНастроекВыгрузкиУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВариантыОбмена.ВариантОбмена,
	|	втВариантыОбмена.СпособВыгрузкиДанныхПоЛС
	|ИЗ
	|	втВариантыОбмена КАК втВариантыОбмена
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицыНастроекВыгрузки КАК втТаблицыНастроекВыгрузки
	|		ПО втВариантыОбмена.ВариантОбмена = втТаблицыНастроекВыгрузки.ВариантОбмена
	|ГДЕ
	|	втТаблицыНастроекВыгрузки.ВариантОбмена ЕСТЬ NULL ";
	
	ВыборкаВариантовОбменаБезНастроекВыгрузки = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаВариантовОбменаБезНастроекВыгрузки.Следующий() Цикл
		
		ТекЭлементСправочника    = ВыборкаВариантовОбменаБезНастроекВыгрузки.ВариантОбмена.ПолучитьОбъект();
		СпособВыгрузкиДанныхПоЛС = ВыборкаВариантовОбменаБезНастроекВыгрузки.СпособВыгрузкиДанныхПоЛС;
		
		СтрокаНастроекВыгрузки   = ТекЭлементСправочника.ТаблицаНастроекВыгрузкиУслуг.Добавить();
		СтрокаНастроекВыгрузки.Услуга = "<По умолчанию>";
		
		Если СпособВыгрузкиДанныхПоЛС = "Не выгружать показания по ПУ" Тогда
			СтрокаНастроекВыгрузки.ВыгружатьНачисления = Истина;
			СтрокаНастроекВыгрузки.ВыгружатьПоказания  = Ложь;
		ИначеЕсли СпособВыгрузкиДанныхПоЛС = "Не выгружать начисления" Тогда
			СтрокаНастроекВыгрузки.ВыгружатьНачисления = Ложь;
			СтрокаНастроекВыгрузки.ВыгружатьПоказания  = Истина;
		Иначе
			СтрокаНастроекВыгрузки.ВыгружатьНачисления = Истина;
			СтрокаНастроекВыгрузки.ВыгружатьПоказания  = Истина;
		КонецЕсли;
		
		ЗаписатьОбъект(ТекЭлементСправочника);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕРЕНОСА ДАННЫХ ТИПОВЫХ ОБЪЕКТОВ (ИСПРАВЛЕНИЕ GUID)

#Область ОбработкаИдентификаторовТиповыхОбъектов

// Процедура выполняет перенос данных в следующих константах.
// Перенос выполняется в рамках задачи по исправлению ситуации с несоответствием идентификаторов объектов.
//
// ВестиУчетПоОрганизациям
// НеВестиУчетПоОрганизациям
// ОсновнаяСистемаНалогообложения
// ОсновнойВидОрганизации
// ДокументооборотСКонтролирующимиОрганами_ВерсияВнешнегоМодуля
// ДокументооборотСКонтролирующимиОрганами_ВнешнийМодуль
// ДокументооборотСКонтролирующимиОрганами_ИмяКриптопровайдера
// ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль
// ДокументооборотСКонтролирующимиОрганами_СертификатСервераОнлайнПроверки
// ДокументооборотСКонтролирующимиОрганами_ТипКриптопровайдера.
//
Процедура Константы_ВыполнитьПереносДанных()
	
	МассивИменКонстант = Новый Массив;
	МассивИменКонстант.Добавить("ОсновнаяСистемаНалогообложения");
	МассивИменКонстант.Добавить("ОсновнойВидОрганизации");
	
	// Ссылочные константы "ОсновнаяСистемаНалогообложения", "ОсновнойВидОрганизации".
	Для Каждого ТекИмя Из МассивИменКонстант Цикл
	
		СтароеЗначение = Константы["Удалить" + ТекИмя].Получить();
		
		МенеджерЗначения = Константы[ТекИмя].СоздатьМенеджерЗначения();
		МенеджерЗначения.Прочитать();
		
		Если МенеджерЗначения.Значение.Пустая() И Не СтароеЗначение.Пустая() Тогда
			МенеджерЗначения.Значение = СтароеЗначение;
			МенеджерЗначения.ОбменДанными.Загрузка = Истина;
			ЗаписатьОбъект(МенеджерЗначения);
		КонецЕсли;
		
	КонецЦикла;
	
	// Строковые константы: "ДокументооборотСКонтролирующимиОрганами_ВерсияВнешнегоМодуля",
	// ДокументооборотСКонтролирующимиОрганами_ИмяКриптопровайдера.
	МассивИменКонстант = Новый Массив;
	МассивИменКонстант.Добавить("ДокументооборотСКонтролирующимиОрганами_ВерсияВнешнегоМодуля");
	МассивИменКонстант.Добавить("ДокументооборотСКонтролирующимиОрганами_ИмяКриптопровайдера");
	
	Для Каждого ТекИмя Из МассивИменКонстант Цикл
	
		СтароеЗначение = Константы["Удалить" + ТекИмя].Получить();
		
		МенеджерЗначения = Константы[ТекИмя].СоздатьМенеджерЗначения();
		МенеджерЗначения.Прочитать();
		
		Если Не ПустаяСтрока(СтароеЗначение) И ПустаяСтрока(МенеджерЗначения.Значение) Тогда
			МенеджерЗначения.Значение = СтароеЗначение;
			МенеджерЗначения.ОбменДанными.Загрузка = Истина;
			ЗаписатьОбъект(МенеджерЗначения);
		КонецЕсли;
		
	КонецЦикла;
	
	// Константы с типом "ХранилищеЗначения": "ДокументооборотСКонтролирующимиОрганами_ВнешнийМодуль",
	// ДокументооборотСКонтролирующимиОрганами_СертификатСервераОнлайнПроверки.
	МассивИменКонстант = Новый Массив;
	МассивИменКонстант.Добавить("ДокументооборотСКонтролирующимиОрганами_ВнешнийМодуль");
	МассивИменКонстант.Добавить("ДокументооборотСКонтролирующимиОрганами_СертификатСервераОнлайнПроверки");
	
	Для Каждого ТекИмя Из МассивИменКонстант Цикл
		
		СтароеЗначение = Константы["Удалить" + ТекИмя].Получить().Получить();
		
		МенеджерЗначения = Константы[ТекИмя].СоздатьМенеджерЗначения();
		МенеджерЗначения.Прочитать();
		
		Если Не СтароеЗначение = Неопределено И МенеджерЗначения.Значение.Получить() = Неопределено Тогда
			МенеджерЗначения.Значение = Новый ХранилищеЗначения(СтароеЗначение);
			МенеджерЗначения.ОбменДанными.Загрузка = Истина;
			ЗаписатьОбъект(МенеджерЗначения);
		КонецЕсли;
		
	КонецЦикла;
	
	// Константа с типом "Булево": "ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль".
	СтароеЗначение = Константы.УдалитьДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль.Получить();
	
	МенеджерЗначения = Константы.ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль.СоздатьМенеджерЗначения();
	МенеджерЗначения.Прочитать();
	
	// Значение пустой константы по умолчанию - Ложь. Если старое значение Истина, а новое - Ложь, тогда ставим
	// новое значение = Истина.
	Если СтароеЗначение = Истина И МенеджерЗначения.Значение = Ложь Тогда
		МенеджерЗначения.Значение = Истина;
		МенеджерЗначения.ОбменДанными.Загрузка = Истина;
		ЗаписатьОбъект(МенеджерЗначения);
	КонецЕсли;
	
	// Константа с числовым типом "ДокументооборотСКонтролирующимиОрганами_ТипКриптопровайдера".
	СтароеЗначение = Константы.УдалитьДокументооборотСКонтролирующимиОрганами_ТипКриптопровайдера.Получить();
	
	МенеджерЗначения = Константы.ДокументооборотСКонтролирующимиОрганами_ТипКриптопровайдера.СоздатьМенеджерЗначения();
	МенеджерЗначения.Прочитать();
	
	Если СтароеЗначение > 0 И МенеджерЗначения.Значение = 0 Тогда
		МенеджерЗначения.Значение = Истина;
		МенеджерЗначения.ОбменДанными.Загрузка = Истина;
		ЗаписатьОбъект(МенеджерЗначения);
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет константу "УПЖКХ_ПараметрыОбновленияКонфигурации" соответствующими параметрами.
// Это единственная процедура, в которой мы жестко задаем номера версий, а рамках которых выполняется "особое" обновление.
// В остальных процедурах номера версий не используются.
//
Процедура ВыполнитьДействияПриОсобомОбновлении(ТекВерсия, СтруктураРезультатаОбновления)
	
	Если ТекВерсия = "3.0.44.15" Тогда
		
		ТекПараметрыОбновления = Константы.Удалить_УПЖКХ_ПараметрыОбновленияКонфигурации.Получить().Получить();
		Если Не ТипЗнч(ТекПараметрыОбновления) = Тип("Структура") Тогда
			
			ТекПараметрыОбновления = Новый Структура;
		
			ТекПараметрыОбновления.Вставить("ВерсияДляПерехода",           "3.0.44.15");
			ТекПараметрыОбновления.Вставить("ВерсияПослеПерехода",         "3.0.44.16");
			ТекПараметрыОбновления.Вставить("ПутьКФайлуВыгрузки",          "");
			ТекПараметрыОбновления.Вставить("ДанныеУдалены",               Ложь);
			ТекПараметрыОбновления.Вставить("НеобходимоВыполнитьЗагрузку", Ложь);
			ТекПараметрыОбновления.Вставить("ДанныеЗагружены",             Ложь);
			
			ТекПараметрыОбновления.Вставить("ВерсииПодсистем",      Новый ТаблицаЗначений);
			ТекПараметрыОбновления.Вставить("РеквизитыОрганизаций", Новый Соответствие);
			
			Константы.Удалить_УПЖКХ_ПараметрыОбновленияКонфигурации.Установить(Новый ХранилищеЗначения(ТекПараметрыОбновления));
			
			// Установка видимости команды помощника обновления.
			Константы.Удалить_УПЖКХ_ПоказыватьПомощникОбновленияКонфигурации.Установить(Истина);
			
			СтруктураРезультатаОбновления.Вставить("ПоказатьФормуОповещенияДляОсобогоОбновления", Истина);
			
		КонецЕсли;
		
	ИначеЕсли ТекВерсия = "3.0.44.16" Тогда
		
		ТекПараметрыОбновления = Константы.Удалить_УПЖКХ_ПараметрыОбновленияКонфигурации.Получить().Получить();
		Если ТипЗнч(ТекПараметрыОбновления) = Тип("Структура") И Не ТекПараметрыОбновления.ДанныеЗагружены Тогда
			ТекПараметрыОбновления.НеобходимоВыполнитьЗагрузку = Истина;
			Константы.Удалить_УПЖКХ_ПараметрыОбновленияКонфигурации.Установить(Новый ХранилищеЗначения(ТекПараметрыОбновления));
			
			СтруктураРезультатаОбновления.Вставить("ПоказатьФормуПомощникаОбновленийДляЗагрузкиДанных", Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьДействияПриОсобомОбновлении()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ ИСПОЛЬЗОВАНИЯ УСТАРЕВШЕГО ФУНКЦИОНАЛА ПО УЧЕТУ ПАРКОВОЧНЫХ МЕСТ

#Область ПроверкаИспользованияУстаревшегоФункционалаПоУчетуПарковочныхМест

// Процедура проверяет факт использования устаревшего функционала по учету парковочных мест.
Процедура ПроверитьНеобходимостьИзмененияВеденияУчетаПоПарковочнымМестам_3_0_44_8()
	
	Если ПроверитьНаличиеЗаписейВРегистреПарковочныхМест() Тогда
		
		ТекстПредупреждения = "Внимание!
							  |Обнаружено использование утратившего актуальность механизма учета по парковочным местам.
							  |Свяжитесь с нами, пожалуйста, с целью выявления Ваших потребностей и приведения учета в порядок.
							  |
							  |Обратитесь на нашу линию технической поддержки за помощью." + УПЖКХ_ИнформацияОРазработчикеИПрограмме.КонтактыДляОбратнойСвязиСтрокой();
		
		ДобавитьСообщениеПользователю(ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет наличие записей в регистре парковочных мест.
Функция ПроверитьНаличиеЗаписейВРегистреПарковочныхМест()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	КВП_УдалитьСведенияОПарковочныхМестахСрезПоследних.ПарковочноеМесто КАК ПарковочноеМесто
	|ИЗ
	|	РегистрСведений.Удалить_КВП_СведенияОПарковочныхМестах.СрезПоследних КАК КВП_УдалитьСведенияОПарковочныхМестахСрезПоследних";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат НЕ Результат.Количество() = 0;
	
КонецФункции

// Процедура заменяет строку "0" и символы пробелов в кодах услуг после изменения типа реквизита
// из числа в строку.
//
Процедура ОбработатьКодыВидовУслугВГИСЖКХПослеИзмененияТипа_3_0_44_8()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ВидыУслуг.Ссылка КАК ВидУслуги,
	|	КВП_ВидыУслуг.КодУслугиВГИСЖКХ
	|ИЗ
	|	Справочник.КВП_ВидыУслуг КАК КВП_ВидыУслуг";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НовыйКодУслуги = "";
		СтарыйКодУслуги = Выборка.КодУслугиВГИСЖКХ;
		Если Не СтарыйКодУслуги = "0" И Не ПустаяСтрока(СтарыйКодУслуги) Тогда
			НовыйКодУслуги = СтрЗаменить(СтарыйКодУслуги, Символы.НПП, "");
		КонецЕсли;
		
		Если Не НовыйКодУслуги = СтарыйКодУслуги Тогда
			СпрОбъект = Выборка.ВидУслуги.ПолучитьОбъект();
			СпрОбъект.КодУслугиВГИСЖКХ = НовыйКодУслуги;
			ЗаписатьОбъект(СпрОбъект);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОбработатьКодыВидовУслугВГИСЖКХПослеИзмененияТипа_3_0_44_8()

// Процедура заполняет новую настройку "Начислять пени на закрытые лицевые счета" в справочнике "Настройки расчета пени".
//
Процедура ЗаполнитьНастройкуНачисленияПениНаЗакрытыеЛицевыеСчета_3_0_44_12()
	
	СправочникиВыборка = Справочники.УПЖКХ_НастройкиРасчетаПени.Выбрать();
	
	Пока СправочникиВыборка.Следующий() Цикл
		
		Если СправочникиВыборка.НачислятьПениНаЗакрытыеЛицевыеСчета Тогда
			Продолжить;
		КонецЕсли;
		
		СправочникОбъект = СправочникиВыборка.ПолучитьОбъект();
		СправочникОбъект.НачислятьПениНаЗакрытыеЛицевыеСчета = Истина;
		
		ЗаписатьОбъект(СправочникОбъект);
		
	КонецЦикла; 
	
КонецПроцедуры // ЗаполнитьНастройкуНачисленияПениНаЗакрытыеЛицевыеСчета_3_0_44_12.

// В регистре "Сведения о договорах управления домами" измерение "Операция с договором"
// сделали ресурсом (с целью упростить запросы по поиску дат начала и конца действия договора).
// Для этого значение измерения регистра надо перенести в соответствующий ресурс.
//
Процедура ОбработатьЗаписиРегистраСведенияОДоговорахУправленияЗданиями_3_0_44_13()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_СведенияОДоговорахУправленияДомами.Регистратор
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОДоговорахУправленияДомами КАК УПЖКХ_СведенияОДоговорахУправленияДомами
	|ГДЕ
	|	УПЖКХ_СведенияОДоговорахУправленияДомами.ОперацияСДоговором = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийУчетаДоговоровУправленияДомами.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОДоговорахУправленияДомами.Регистратор";
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из Таблица Цикл
		
		ПерваяЗапись = Истина;
		
		НаборЗаписей = РегистрыСведений.УПЖКХ_СведенияОДоговорахУправленияДомами.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Строка.Регистратор);
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл
			Запись.ОперацияСДоговором = Запись.УдалитьОперацияСДоговором;
			
			// Устанавливаем значение помеченного на удаление измерения в нулевое для того, чтобы корректно отрабатывали запросы со срезами последних.
			Запись.УдалитьОперацияСДоговором = Перечисления.УПЖКХ_ВидыОперацийУчетаДоговоровУправленияДомами.ПустаяСсылка();
			
			// Если у двух записей (максимальное количество записей, которое может быть сформировано одним документом регистрации договоров управления домами)
			// регистра одинаковый регистратор, прибавляем к периоду второй записи одну секунду, чтобы не возникло проблем с уникальностью записей после удаления
			// помеченного на удаление измерения "УдалитьОперацияСДоговором".
			Если Не ПерваяЗапись Тогда
				Запись.Период = Запись.Период + 1;
			КонецЕсли;
			
			ПерваяЗапись = Ложь;
		КонецЦикла;
		
		ЗаписатьОбъект(НаборЗаписей);
	КонецЦикла;
	
КонецПроцедуры // ОбработатьЗаписиРегистраСведенияОДоговорахУправленияЗданиями_3_0_44_13()

// Процедура добавляет обработчик в массив обработчиков.
Процедура ДобавитьОбработчикВСписокВыполненных(НомерРелиза, ВыводитьДопОписание = Ложь)
	
	// Добавление в массив переменной модуля обработки.
	ВыполненныеОбработчики.Добавить(Новый Структура("НомерРелиза, ВыводитьДопОписание", НомерРелиза, ВыводитьДопОписание));
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАМЕНЫ ПРЕДОПРЕДЕЛЕННЫХ ДАННЫХ НА СООТВЕТСТВУЮЩИЕ ТИПОВОЙ БП ПО ВНУТРЕННИМ ИДЕНТИФИКАТОРАМ

#Область ЗаменаПредопределенныхДанных

// Выполняет заполнение добавленных видов КИ.
//
Процедура ЗаполнитьПредопределенныеВидыКонтактнойИнформации_3_0_46_2()
	
	// Процедура выполняет начальное заполнение видов контактной информации, замененных в рамках задачи по исправлению предопределенных данных.
	// В процедуре используются типовые механизмы заполнения.
	// Заполняются следующие виды КИ:
	// 1. E-mail физического лица.
	// 2. Адрес торговой точки.
	
	// ТорговыеТочки
	ПараметрыПроверкиАдресаРФ = Новый Структура;
	ПараметрыПроверкиАдресаРФ.Вставить("АдресТолькоРоссийский",        Истина);
	ПараметрыПроверкиАдресаРФ.Вставить("ПроверятьКорректность",        Ложь);
	ПараметрыПроверкиАдресаРФ.Вставить("СкрыватьНеактуальныеАдреса",   Ложь);
	ПараметрыПроверкиАдресаРФ.Вставить("ВключатьСтрануВПредставление", Ложь);
	
	ВидКонтактнойИнформации = Справочники.ВидыКонтактнойИнформации.СправочникТорговыеТочки.ПолучитьОбъект();
	ВидКонтактнойИнформации.Используется = Истина;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВидКонтактнойИнформации);
	
	ПараметрыВида = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(
						Перечисления.ТипыКонтактнойИнформации.Адрес);
	ПараметрыВида.Вид                               = Справочники.ВидыКонтактнойИнформации.АдресТорговойТочки;
	ПараметрыВида.МожноИзменятьСпособРедактирования = Истина;
	ПараметрыВида.РедактированиеТолькоВДиалоге      = Истина;
	ПараметрыВида.ОбязательноеЗаполнение            = Ложь;
	ПараметрыВида.Порядок                           = 1;
	ПараметрыВида.РазрешитьВводНесколькихЗначений   = Ложь;
	ЗаполнитьЗначенияСвойств(ПараметрыВида.НастройкиПроверки, ПараметрыПроверкиАдресаРФ);
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(ПараметрыВида);
	
	СтараяГруппа = Справочники.ВидыКонтактнойИнформации.УдалитьКВП_СправочникТорговыеТочки.ПолучитьОбъект();
	СтараяГруппа.Используется = Ложь;
	ЗаписатьОбъект(СтараяГруппа);
	
	СтарыйАдрес = Справочники.ВидыКонтактнойИнформации.УдалитьКВП_АдресТорговойТочки.ПолучитьОбъект();
	Если СтарыйАдрес.Используется Тогда
		СтарыйАдрес.Используется          = Ложь;
		СтарыйАдрес.ОбменДанными.Загрузка = Истина;
		ЗаписатьОбъект(СтарыйАдрес);
	КонецЕсли;
	// Конец ТорговыеТочки
	
	// EMailФизическиеЛица
	Порядок = Неопределено;
	СвойстваВидаКИ = УправлениеКонтактнойИнформацией.ПараметрыВидаКонтактнойИнформации(Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	СвойстваВидаКИ.Вид = Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица;
	СвойстваВидаКИ.НастройкиПроверки.ПроверятьКорректность = Истина;
	СвойстваВидаКИ.ОбязательноеЗаполнение = Ложь;
	Если Порядок <> Неопределено Тогда
		СвойстваВидаКИ.Порядок = Порядок + 1;
	КонецЕсли;
	УправлениеКонтактнойИнформацией.УстановитьСвойстваВидаКонтактнойИнформации(СвойстваВидаКИ);
	
	СтарыйEMail = Справочники.ВидыКонтактнойИнформации.УдалитьКВП_EMailФизическиеЛица.ПолучитьОбъект();
	Если СтарыйEMail.Используется Тогда
		СтарыйEMail.Используется          = Ложь;
		СтарыйEMail.ОбменДанными.Загрузка = Истина;
		ЗаписатьОбъект(СтарыйEMail);
	КонецЕсли;
	// Конец EMailФизическиеЛица
	
КонецПроцедуры // ЗаполнитьПредопределенныеВидыКонтактнойИнформации_3_0_46_2()

// Выполняет замену значений предопределенных элементов плана счетов и справочников.
//
Процедура ВыполнитьЗаменуЗначенийПредопределенныхДанных_3_0_46_2(ЭтоПереходС20 = Ложь)
	
	МассивСсылокДляЗамены = Новый Массив;
	
	// Замена ссылок элементов плана счетов.
	Хозрасчетный = ПланыСчетов.Хозрасчетный;
	
	// План счетов "Хозрасчетный".
	СоответствиеДляЗамены = Новый Соответствие;
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ЛизинговыеПлатежиВал,                                Хозрасчетный.ЛизинговыеПлатежиВал);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_РасчетыПоАренде,                                     Хозрасчетный.РасчетыПоАренде);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_АрендованноеИмущество,                               Хозрасчетный.АрендованноеИмущество);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_НДСпоАренднымОбязательствамУЕ,                       Хозрасчетный.НДСпоАренднымОбязательствамУЕ);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_РасчетыПоАрендеВал,                                  Хозрасчетный.РасчетыПоАрендеВал);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_НДСпоАренднымОбязательствам,                         Хозрасчетный.НДСпоАренднымОбязательствам);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_АрендныеОбязательства,                               Хозрасчетный.АрендныеОбязательства);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_АмортизацияАрендованногоИмущества,                   Хозрасчетный.АмортизацияАрендованногоИмущества);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_РасчетыПоАрендеУЕ,                                   Хозрасчетный.РасчетыПоАрендеУЕ);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_АрендныеОбязательстваУЕ,                             Хозрасчетный.АрендныеОбязательстваУЕ);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ЛизинговыеПлатежи,                                   Хозрасчетный.ЛизинговыеПлатежи);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_АрендныеОбязательстваВал,                            Хозрасчетный.АрендныеОбязательстваВал);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ЛизинговыеПлатежиУЕ,                                 Хозрасчетный.ЛизинговыеПлатежиУЕ);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_УСНРасчетыСПокупателямиВалПатент,                    Хозрасчетный.УСНРасчетыСПокупателямиВалПатент);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_УдалитьОценочныеОбязательства,                       Хозрасчетный.УдалитьОценочныеОбязательства);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_РезервыПредстоящихРасходов,                          Хозрасчетный.РезервыПредстоящихРасходов);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ПФР_Страх_СтраховойГод,                              Хозрасчетный.ПФР_Страх_СтраховойГод);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_НДСРасчетыПоОтгрузкеУЕ,                              Хозрасчетный.НДСРасчетыПоОтгрузкеУЕ);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_РасчетыПоАвансамПолученнымУЕВСчетОтгрузки,           Хозрасчетный.РасчетыПоАвансамПолученнымУЕВСчетОтгрузки);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_КраткосрочныеДолговыеЦенныеБумагиВал,                Хозрасчетный.КраткосрочныеДолговыеЦенныеБумагиВал);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ПроцентыПроцентыПоДолгосрочнымДолговымЦеннымБумагам, Хозрасчетный.ПроцентыПроцентыПоДолгосрочнымДолговымЦеннымБумагам);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_КраткосрочныеДолговыеЦенныеБумаги,                   Хозрасчетный.КраткосрочныеДолговыеЦенныеБумаги);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ПроцентыПоКраткосрочнымДолговымЦеннымБумагамВал,     Хозрасчетный.ПроцентыПоКраткосрочнымДолговымЦеннымБумагамВал);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ПроцентыПоДолгосрочнымДолговымЦеннымБумагамВал,      Хозрасчетный.ПроцентыПоДолгосрочнымДолговымЦеннымБумагамВал);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ПроцентыПоКраткосрочнымДолговымЦеннымБумагам,        Хозрасчетный.ПроцентыПоКраткосрочнымДолговымЦеннымБумагам);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ДолгосрочныеДолговыеЦенныеБумагиВал,                 Хозрасчетный.ДолгосрочныеДолговыеЦенныеБумагиВал);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ДолгосрочныеДолговыеЦенныеБумаги,                    Хозрасчетный.ДолгосрочныеДолговыеЦенныеБумаги);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ПриобретениеОсновныхСредств,                         Хозрасчетный.ПриобретениеОсновныхСредств);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_КорректировкаКомТоваровПрошлогоПериода,              Хозрасчетный.КорректировкаКомТоваровПрошлогоПериода);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ПлатежиПоПрочимВидамСтрахования,                     Хозрасчетный.ПлатежиПоПрочимВидамСтрахования);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ПФР_доп_ТяжелыеУсловияТруда,                         Хозрасчетный.ПФР_доп_ТяжелыеУсловияТруда);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ФСС_СтраховойГод,                                    Хозрасчетный.ФСС_СтраховойГод);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_УСНРасчетыСПокупателямиПатент,                       Хозрасчетный.УСНРасчетыСПокупателямиПатент);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ПриростСтоимостиНМАПоПереоценке,                     Хозрасчетный.ПриростСтоимостиНМАПоПереоценке);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_НДСПоУменьшениюСтоимостиРеализации,                  Хозрасчетный.НДСПоУменьшениюСтоимостиРеализации);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_Взносы_СтраховойГод,                                 Хозрасчетный.Взносы_СтраховойГод);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_УСНРасчетыСПокупателямиВалТорговыйСбор,              Хозрасчетный.УСНРасчетыСПокупателямиВалТорговыйСбор);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_УСНРасчетыСПокупателямиТорговыйСбор,                 Хозрасчетный.УСНРасчетыСПокупателямиТорговыйСбор);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_НалогПриПСН,                                         Хозрасчетный.НалогПриПСН);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ПФР_ОПС_ИП,                                          Хозрасчетный.ПФР_ОПС_ИП);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ПрочиеРасчетыСФизическимиЛицами,                     Хозрасчетный.ПрочиеРасчетыСФизическимиЛицами);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_КорректировкаСтоимостиАрендованногоИмущества,        Хозрасчетный.КорректировкаСтоимостиАрендованногоИмущества);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ФОМС_СтраховойГод,                                   Хозрасчетный.ФОМС_СтраховойГод);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ОценочныеОбязательстваПоВознаграждениямРаботникам,   Хозрасчетный.ОценочныеОбязательстваПоВознаграждениямРаботникам);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_РезервыПредстоящихРасходовПрочие,                    Хозрасчетный.РезервыПредстоящихРасходовПрочие);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_НДФЛ_ИП,                                             Хозрасчетный.НДФЛ_ИП);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ОценочныеОбязательстваПоВознаграждениям,             Хозрасчетный.ОценочныеОбязательстваПоВознаграждениям);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ОценочныеОбязательстваПостраховымВзносам,            Хозрасчетный.ОценочныеОбязательстваПостраховымВзносам);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ОСБезГосРегистрации,                                 Хозрасчетный.ОСБезГосРегистрации);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ПФР_Нак_СтраховойГод,                                Хозрасчетный.ПФР_Нак_СтраховойГод);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ПереданныеОбъектыНедвижимости,                       Хозрасчетный.ПереданныеОбъектыНедвижимости);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_РасчетыПоПрочимУдержаниямРаботников,                 Хозрасчетный.РасчетыПоПрочимУдержаниямРаботников);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ПФР_доп_шахтеры,                                     Хозрасчетный.ПФР_доп_шахтеры);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ПриростСтоимостиИмуществаПоПереоценке,               Хозрасчетный.ПриростСтоимостиИмуществаПоПереоценке);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ПФР_доп_ВредныеУсловияТруда,                         Хозрасчетный.ПФР_доп_ВредныеУсловияТруда);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ТорговыйСбор,                                        Хозрасчетный.ТорговыйСбор);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_КорректировкаРасчетовПрошлогоПериода,                Хозрасчетный.КорректировкаРасчетовПрошлогоПериода);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ЗемельныйНалог,                                      Хозрасчетный.ЗемельныйНалог);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_НераспределеннаяРозничнаяВыручкаБН,                  Хозрасчетный.НераспределеннаяРозничнаяВыручкаБН);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_НДСВРозничнойВыручкеБН,                              Хозрасчетный.НДСВРозничнойВыручкеБН);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_НДСТаможенныйСоюзКУплате,                            Хозрасчетный.НДСТаможенныйСоюзКУплате);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_УдалитьПФР_ОПС_ИП,                                   Хозрасчетный.УдалитьПФР_ОПС_ИП);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_НДСУплачиваемыйПриИмпортеИзТаможенногоСоюза,         Хозрасчетный.НДСУплачиваемыйПриИмпортеИзТаможенногоСоюза);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ПФР_ОПС,                                             Хозрасчетный.ПФР_ОПС);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_УдалитьКорректировкаСтоимостиАрендованногоИмущества, Хозрасчетный.УдалитьКорректировкаСтоимостиАрендованногоИмущества);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ПриобретениеКомпонентовОсновныхСредств,              Хозрасчетный.ПриобретениеКомпонентовОсновныхСредств);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_НематериальныеПоисковыеАктивы,                       Хозрасчетный.НематериальныеПоисковыеАктивы);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_МатериальныеПоисковыеАктивы,                         Хозрасчетный.МатериальныеПоисковыеАктивы);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_КорректировкаТоваровПрошлогоПериода,                 Хозрасчетный.КорректировкаТоваровПрошлогоПериода);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_КассаПлатежногоАгента,                               Хозрасчетный.КассаПлатежногоАгента);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ПриростСтоимостиПоПереоценке,                        Хозрасчетный.ПриростСтоимостиПоПереоценке);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_ПриростСтоимостиПрочихВнеоборотныхАктивоПоПереоценке,Хозрасчетный.ПриростСтоимостиПрочихВнеоборотныхАктивоПоПереоценке);
	СоответствиеДляЗамены.Вставить(Хозрасчетный.УдалитьКВП_УдалитьОценочныеОбязательстваИРезервы,               Хозрасчетный.УдалитьОценочныеОбязательстваИРезервы);
	
	Если Не ЭтоПереходС20 Тогда
		// Справочник "Виды контактной информации".
		СоответствиеДляЗамены.Вставить(Справочники.ВидыКонтактнойИнформации.УдалитьКВП_СправочникТорговыеТочки, Справочники.ВидыКонтактнойИнформации.СправочникТорговыеТочки);
		СоответствиеДляЗамены.Вставить(Справочники.ВидыКонтактнойИнформации.УдалитьКВП_АдресТорговойТочки,      Справочники.ВидыКонтактнойИнформации.АдресТорговойТочки);
		СоответствиеДляЗамены.Вставить(Справочники.ВидыКонтактнойИнформации.УдалитьКВП_EMailФизическиеЛица,     Справочники.ВидыКонтактнойИнформации.EMailФизическиеЛица);
	КонецЕсли;
	
	Для Каждого ТекСоответствие Из СоответствиеДляЗамены Цикл
		
		// Добавляем заменяемый элемент в массив ссылок для замены.
		МассивСсылокДляЗамены.Добавить(ТекСоответствие.Ключ);
		
		Если ТипЗнч(ТекСоответствие.Значение) = Тип("ПланСчетовСсылка.Хозрасчетный") Тогда
			
			// Дополняем новые счета пользовательскими видами субконто по следующему алгоритму:
			// 1. Получаем таблицы видов субконто по помеченному на удаление счету и по добавленному счету.
			// 2. Сравниваем количество видов субконто в таблицах. Если в помеченном счете видов больше, чем в добавленном,
			// значит у счета добавлены непредопределенные виды субконто, которые необходимо перенести в новый счет.
			// 3. Таблицу видов субконто добавленного счета дополняем недостающими непредопределенными видами субконто.
			
			СсылкаСтарыйСчет = ТекСоответствие.Ключ;
			СсылкаНовыйСчет  = ТекСоответствие.Значение;
			
			ВидыСубконтоСтарогоСчета = СсылкаСтарыйСчет.ВидыСубконто;
			ВидыСубконтоНовогоСчета  = СсылкаНовыйСчет.ВидыСубконто;
			
			// Если в старом счете видов субконто больше, чем в новом, добавляем недостающие.
			Если Не ВидыСубконтоСтарогоСчета.Количество() = ВидыСубконтоНовогоСчета.Количество() Тогда
				
				ОбъектНовогоСчета = СсылкаНовыйСчет.ПолучитьОбъект();
				ВидыСубконтоИзменяемые = ОбъектНовогоСчета.ВидыСубконто;
				Для Каждого ТекВидСубконто Из ВидыСубконтоСтарогоСчета Цикл
					
					Отбор = Новый Структура;
					Отбор.Вставить("ВидСубконто", ТекВидСубконто.ВидСубконто);
					
					НайденныеСтроки = ВидыСубконтоИзменяемые.НайтиСтроки(Отбор);
					Если НайденныеСтроки.Количество() = 0 Тогда
						
						НовыйВид = ВидыСубконтоИзменяемые.Добавить();
						ЗаполнитьЗначенияСвойств(НовыйВид, ТекВидСубконто);
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если Не ЗаписатьОбъект(ОбъектНовогоСчета) Тогда
					ДобавитьСообщениеПользователю("Не удалось обновить виды субконто счета """ + СсылкаНовыйСчет + """. Проверьте настройки счета.", Истина);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Требуется получить описание типов, содержащее все ссылочные значения. Для этого собираем все типы, последовательно
	// присоединяя каждый следующий набор типов к результирующему описанию.
	мТипВсеСсылки = Справочники.ТипВсеСсылки();
	мТипВсеСсылки = Новый ОписаниеТипов(мТипВсеСсылки, Документы.ТипВсеСсылки().Типы());
	мТипВсеСсылки = Новый ОписаниеТипов(мТипВсеСсылки, ПланыВидовХарактеристик.ТипВсеСсылки().Типы());
	мТипВсеСсылки = Новый ОписаниеТипов(мТипВсеСсылки, ПланыОбмена.ТипВсеСсылки().Типы());
	мТипВсеСсылки = Новый ОписаниеТипов(мТипВсеСсылки, ПланыВидовРасчета.ТипВсеСсылки().Типы());
	мТипВсеСсылки = Новый ОписаниеТипов(мТипВсеСсылки, ПланыСчетов.ТипВсеСсылки().Типы());
	мТипВсеСсылки = Новый ОписаниеТипов(мТипВсеСсылки, Перечисления.ТипВсеСсылки().Типы());
	мТипВсеСсылки = Новый ОписаниеТипов(мТипВсеСсылки, БизнесПроцессы.ТипВсеСсылки().Типы());
	мТипВсеСсылки = Новый ОписаниеТипов(мТипВсеСсылки, Задачи.ТипВсеСсылки().Типы());
	
	ТаблицаСсылокДляЗамены = Новый ТаблицаЗначений;
	ТаблицаСсылокДляЗамены.Колонки.Добавить("ЧтоЗаменять",   мТипВсеСсылки);
	ТаблицаСсылокДляЗамены.Колонки.Добавить("НаЧтоЗаменять", мТипВсеСсылки);
	ТаблицаСсылокДляЗамены.Колонки.Добавить("Пометка",       Новый ОписаниеТипов("Булево"));
	
	Для Каждого Элемент Из МассивСсылокДляЗамены Цикл
		НоваяСтрока = ТаблицаСсылокДляЗамены.Добавить();
		НоваяСтрока.ЧтоЗаменять = Элемент;
		НоваяСтрока.Пометка     = Истина;
	КонецЦикла;
	
	НайденныеСсылки = Новый ТаблицаЗначений;
	НайденныеСсылки.Колонки.Добавить("Ссылка", мТипВсеСсылки);
	НайденныеСсылки.Колонки.Добавить("Данные");
	НайденныеСсылки.Колонки.Добавить("Метаданные");
	НайденныеСсылки.Колонки.Добавить("Включено", Новый ОписаниеТипов("Булево"));
	
	Если Не Обработки.УПЖКХ_ПоискИЗаменаЗначений.ЗаменяемыеЗначенияНайтиСсылки(ТаблицаСсылокДляЗамены, НайденныеСсылки) Тогда
		Возврат;
	КонецЕсли;
	НайденныеСсылки.ЗаполнитьЗначения(Истина, "Включено");
	
	ЗаменяемыеСсылки = Новый Соответствие;
	МассивСтрокДляУдаления = Новый Массив;
	Для Каждого ТекСсылка Из НайденныеСсылки Цикл
		
		НоваяСсылка = СоответствиеДляЗамены.Получить(ТекСсылка.Ссылка);
		Если Не НоваяСсылка = Неопределено Тогда
			ЗаменяемыеСсылки.Вставить(ТекСсылка.Ссылка, НоваяСсылка);
		Иначе
			МассивСтрокДляУдаления.Добавить(ТекСсылка);
		КонецЕсли;
		
	КонецЦикла;
	
	// Удалим из таблицы ссылок строки, ссылкам в которых не было найдено соответствие в новом перечислении.
	Для Каждого УдаляемаяСтрока Из МассивСтрокДляУдаления Цикл
		НайденныеСсылки.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	СообщенияОбОшибках = Новый Структура;
	
	// Вызов процедуры непосредственной замены ссылок. Выполняем последовательно без транзакции, РежимЗагрузки = Истина.
	Обработки.УПЖКХ_ПоискИЗаменаЗначений.ВыполнитьЗаменуЭлементов(ЗаменяемыеСсылки, НайденныеСсылки, СообщенияОбОшибках,, Ложь, Истина);
	
	// Выводим ошибки.
	Для Каждого Ошибка Из СообщенияОбОшибках Цикл
		// Выведем сообщение в окно сообщений.
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(Ошибка.Значение.Описание);
		// А также занесем информацию в протокол.
		ДобавитьСообщениеПользователю(Ошибка.Значение.Описание, Истина);
	КонецЦикла;
	
КонецПроцедуры // ВыполнитьЗаменуЗначенийПредопределенныхДанных_3_0_46_2()

// Заполняет свойство "ЗапретитьИспользоватьВПроводках" у некоторых счетов.
//
Процедура ВыполнитьЗаполнениеСвойствРодительскихПредопределенныхСчетов_3_0_49_1()
	
	// После исправления проблемы с идентификаторами предопределенных счетов необходимо дополнительно
	// установить свойство "ЗапретитьИспользоватьВПроводках" в Истину у добавленных "родительских" счетов.
	МассивСчетов = Новый Массив;
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.Взносы_СтраховойГод);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАренде);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАрендеВал);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоАрендеУЕ);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ПриростСтоимостиПоПереоценке);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РезервыПредстоящихРасходов);
	МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.ОценочныеОбязательстваПоВознаграждениямРаботникам);
	
	Для Каждого СсылкаНаСчет Из МассивСчетов Цикл
		
		Если Не СсылкаНаСчет.ЗапретитьИспользоватьВПроводках Тогда
			
			ОбъектСчета = СсылкаНаСчет.ПолучитьОбъект();
			ОбъектСчета.ЗапретитьИспользоватьВПроводках = Истина;
			
			ЗаписатьОбъект(ОбъектСчета);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ВыполнитьЗаполнениеСвойствРодительскихПредопределенныхСчетов_3_0_49_1()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКИ НАЧИСЛЕНИЙ ПРИ ПЕРЕНОСЕ ЗАВИСИМЫХ УСЛУГ В ТЧ ДОКУМЕНТА

#Область ОбработчикиМеханизмаНачисленийЗависимыхУслуг

// Процедура заполняет табличную часть документа "Начисление услуг" зависимыми услугами
// на основе данных регистра накопления "Начисления".
//
Процедура ЗаполнитьДокументыНачисленияУслугДаннымиПоНачисленнымЗависимымУслугам_3_0_58_1()
	
	// Признак успешности выполнения обработчика в значении по умолчанию.
	ОбработчикВыполненУспешно = Истина;
	
	// Для обработки большого кол-ва документов выполняем обработку обновления порционно. 
	// Для этого:
	// 1. Получаем список документов для обработки, а именно: получаем документы, в которые еще не перенесены зависимые услуги.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УПЖКХ_Начисления.Регистратор КАК Регистратор,
	|	УПЖКХ_Начисления.Период
	|ПОМЕСТИТЬ врСписокДокументовСДаннымиПоЗависимымУслугам
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления КАК УПЖКХ_Начисления
	|ГДЕ
	|	НЕ УПЖКХ_Начисления.УслугаОснование = ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)
	|	И УПЖКХ_Начисления.Регистратор ССЫЛКА Документ.КВП_НачислениеУслуг
	|	И НЕ УПЖКХ_Начисления.СуммаНачисления = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КВП_НачислениеУслугПоПУ.Ссылка КАК Регистратор
	|ПОМЕСТИТЬ врСписокДокументовСПеренесеннымиДаннымиПоЗависимымУслугам
	|ИЗ
	|	Документ.КВП_НачислениеУслуг.УслугиПоПоказаниямПУ КАК КВП_НачислениеУслугПоПУ
	|ГДЕ
	|	КВП_НачислениеУслугПоПУ.Зависимая
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КВП_НачислениеУслуг.Ссылка
	|ИЗ
	|	Документ.КВП_НачислениеУслуг.Услуги КАК КВП_НачислениеУслуг
	|ГДЕ
	|	КВП_НачислениеУслуг.Зависимая
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписокДокументовСДаннымиПоЗависимымУслугам.Регистратор КАК Регистратор
	|ИЗ
	|	врСписокДокументовСДаннымиПоЗависимымУслугам КАК СписокДокументовСДаннымиПоЗависимымУслугам
	|		ЛЕВОЕ СОЕДИНЕНИЕ врСписокДокументовСПеренесеннымиДаннымиПоЗависимымУслугам КАК СписокДокументовСПеренесеннымиДаннымиПоЗависимымУслугам
	|		ПО СписокДокументовСДаннымиПоЗависимымУслугам.Регистратор = СписокДокументовСПеренесеннымиДаннымиПоЗависимымУслугам.Регистратор
	|ГДЕ
	|	ЕСТЬNULL(СписокДокументовСПеренесеннымиДаннымиПоЗависимымУслугам.Регистратор, ИСТИНА) = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	СписокДокументовСДаннымиПоЗависимымУслугам.Период";
	
	ОбщийМассивРегистраторов     = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбщееКоличествоРегистраторов = ОбщийМассивРегистраторов.Количество();
	МассивДокументовДляОбработки = Новый Массив;
	ОбщийИндекс = 0;
	
	Пока НЕ ОбщийИндекс = ОбщееКоличествоРегистраторов Цикл
		
		МассивДокументовДляОбработки.Очистить();
		
		// 2. Отбираем пачку документов.
		КоличествоДокументовДляОбработки = Мин(200, ОбщееКоличествоРегистраторов - ОбщийИндекс);
		
		Для ТекущийИндекс = 1 По КоличествоДокументовДляОбработки Цикл
			
			МассивДокументовДляОбработки.Добавить(ОбщийМассивРегистраторов[ОбщийИндекс]);
			ОбщийИндекс = ОбщийИндекс + 1;
			
		КонецЦикла;
		
		// 3. Обрабатываем полученную пачку документов.
		ОбработатьСписокДокументовИЗаписатьДанныеПоЗависимымУслугам(МассивДокументовДляОбработки, ОбработчикВыполненУспешно);
		
	КонецЦикла;
	
	// Если обработчик выполнен с ошибками, то в целом обновление считается неуспешным.
	Если Не ОбработчикВыполненУспешно Тогда
		ДобавитьСообщениеПользователю("Обработчик обновления ""ЗаполнитьДокументыНачисленияУслугДаннымиПоНачисленнымЗависимымУслугам"" не выполнен!", Истина, Истина);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДокументыНачисленияУслугДаннымиПоНачисленнымЗависимымУслугам_3_0_58_1()

// Процедура заполняет табличную часть документа "Начисление услуг" зависимыми услугами
// на основе данных регистра накопления "Начисления".
//
Процедура ОбработатьСписокДокументовИЗаписатьДанныеПоЗависимымУслугам(МассивДокументов, ОбработчикВыполненУспешно)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.Регистратор КАК Регистратор,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.Организация КАК Организация,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.Услуга КАК Услуга,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.СоставнаяУслуга КАК СоставнаяУслуга,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.УслугаОснование КАК УслугаОснование,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.ВидТарифа КАК ВидТарифа,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.Тариф КАК Тариф,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.НачалоПериода КАК НачалоПериода,
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.КонецПериода КАК КонецПериода
	|ПОМЕСТИТЬ ВрДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ
	|ИЗ
	|	РегистрНакопления.УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ КАК УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ
	|ГДЕ
	|	УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.Регистратор В(&СписокДокументов)
	|	И НЕ УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.УслугаОснование = ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_Начисления.Период КАК Период,
	|	УПЖКХ_Начисления.Регистратор КАК Регистратор,
	|	УПЖКХ_Начисления.НомерСтроки КАК НомерСтроки,
	|	УПЖКХ_Начисления.Организация КАК Организация,
	|	УПЖКХ_Начисления.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_Начисления.Договор КАК Договор,
	|	УПЖКХ_Начисления.Услуга КАК Услуга,
	|	УПЖКХ_Начисления.УслугаОснование КАК УслугаОснование,
	|	УПЖКХ_Начисления.СоставнаяУслуга КАК СоставнаяУслуга,
	|	УПЖКХ_Начисления.РазделУчета КАК РазделУчета,
	|	УПЖКХ_Начисления.ВидНачисления КАК ВидНачисления,
	|	УПЖКХ_Начисления.ИсточникОплаты КАК ИсточникОплаты,
	|	УПЖКХ_Начисления.МесяцНачисления КАК МесяцНачисления,
	|	УПЖКХ_Начисления.Тариф КАК Тариф,
	|	УПЖКХ_Начисления.ВидТарифа КАК ВидТарифа,
	|	УПЖКХ_Начисления.МесяцРассрочки КАК МесяцРассрочки,
	|	УПЖКХ_Начисления.Количество КАК Количество,
	|	УПЖКХ_Начисления.УровеньРаспределения КАК УровеньРаспределения,
	|	УПЖКХ_Начисления.ОснованиеКорректировки КАК ОснованиеКорректировки,
	|	УПЖКХ_Начисления.СуммаНачисления КАК СуммаНачисления,
	|	УПЖКХ_Начисления.ДнейНачислено КАК ДнейНачислено,
	|	УПЖКХ_Начисления.Начало КАК Начало,
	|	УПЖКХ_Начисления.Окончание КАК Окончание,
	|	УПЖКХ_Начисления.Тарифность КАК Тарифность,
	|	УПЖКХ_Начисления.КоличествоУчетное КАК КоличествоУчетное
	|ПОМЕСТИТЬ ВрНачисления
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления КАК УПЖКХ_Начисления
	|ГДЕ
	|	УПЖКХ_Начисления.Регистратор В(&СписокДокументов)
	|	И УПЖКХ_Начисления.РазделУчета В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ))
	|	И НЕ УПЖКХ_Начисления.УслугаОснование = ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)
	|	И НЕ УПЖКХ_Начисления.СуммаНачисления = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_Начисления.Регистратор КАК Регистратор,
	|	УПЖКХ_Начисления.Период КАК Период,
	|	УПЖКХ_Начисления.Организация КАК Организация,
	|	УПЖКХ_Начисления.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_Начисления.Услуга КАК Услуга,
	|	УПЖКХ_Начисления.СоставнаяУслуга КАК СоставнаяУслуга,
	|	УПЖКХ_Начисления.УслугаОснование КАК УслугаОснование,
	|	УПЖКХ_Начисления.Договор КАК Договор,
	|	УПЖКХ_Начисления.Тариф КАК Тариф,
	|	УПЖКХ_Начисления.Начало КАК НачалоПериода,
	|	УПЖКХ_Начисления.Окончание КАК КонецПериода,
	|	УПЖКХ_Начисления.ДнейНачислено КАК ДнейНачислено,
	|	ВЫБОР
	|		КОГДА УПЖКХ_Начисления.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг)
	|			ТОГДА УПЖКХ_Начисления.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА УПЖКХ_Начисления.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг)
	|			ТОГДА УПЖКХ_Начисления.СуммаНачисления
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Начислено,
	|	УПЖКХ_Начисления.ВидТарифа КАК ВидТарифа,
	|	УПЖКХ_Начисления.Тарифность КАК Тарифность,
	|	ВЫБОР
	|		КОГДА УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СостоянияПриборовУчета.ЕстьИПУНетПоказаний)
	|		КОГДА УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СостоянияПриборовУчета.ЕстьИПУНетПоказаний)
	|		КОГДА УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СостоянияПриборовУчета.НетИПУ)
	|		КОГДА УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СостоянияПриборовУчета.НетИПУ)
	|		КОГДА УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СостоянияПриборовУчета.ЕстьИПУЕстьПоказания)
	|	КОНЕЦ КАК СостояниеПУ,
	|	ВЫБОР
	|		КОГДА УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу)
	|			ТОГДА 1
	|		КОГДА УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему)
	|			ТОГДА 2
	|		КОГДА УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу)
	|			ТОГДА 1
	|		КОГДА УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему)
	|			ТОГДА 2
	|		КОГДА УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ)
	|			ТОГДА 0
	|	КОНЕЦ КАК ТипРасчета,
	|	ВЫБОР
	|		КОГДА УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Сторно,
	|	ВЫБОР
	|		КОГДА УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.КорректировкаПриОтсутствииПоказанийПоИПУ)
	|			ТОГДА ЕСТЬNULL(УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.Тариф, УПЖКХ_Начисления.Тариф)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ТарифДляСторнирования,
	|	ВЫБОР
	|		КОГДА НЕ УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|			ТОГДА УПЖКХ_Начисления.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПоказаниеСчЛС,
	|	ВЫБОР
	|		КОГДА НЕ УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|			ТОГДА УПЖКХ_Начисления.СуммаНачисления
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА УПЖКХ_Начисления.УровеньРаспределения = ""Помещение""
	|			ТОГДА УПЖКХ_Начисления.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоРаспределенияПомещение,
	|	ВЫБОР
	|		КОГДА УПЖКХ_Начисления.УровеньРаспределения = ""Подъезд""
	|			ТОГДА УПЖКХ_Начисления.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоРаспределенияПодъезд,
	|	ВЫБОР
	|		КОГДА УПЖКХ_Начисления.УровеньРаспределения = ""Здание""
	|			ТОГДА УПЖКХ_Начисления.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоРаспределенияЗдание,
	|	ВЫБОР
	|		КОГДА УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)
	|			ТОГДА УПЖКХ_Начисления.СуммаНачисления
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРаспределения,
	|	УПЖКХ_Начисления.КоличествоУчетное КАК УчетныйИндивидуальныйОбъем
	|ПОМЕСТИТЬ ВрНачисленияЗУДляДобавленияВТЧ
	|ИЗ
	|	ВрНачисления КАК УПЖКХ_Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВрДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ КАК УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ
	|		ПО УПЖКХ_Начисления.Регистратор = УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.Регистратор
	|			И УПЖКХ_Начисления.Организация = УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.Организация
	|			И УПЖКХ_Начисления.ЛицевойСчет = УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.ЛицевойСчет
	|			И УПЖКХ_Начисления.Услуга = УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.Услуга
	|			И УПЖКХ_Начисления.СоставнаяУслуга = УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.СоставнаяУслуга
	|			И УПЖКХ_Начисления.УслугаОснование = УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.УслугаОснование
	|			И УПЖКХ_Начисления.ВидТарифа = УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.ВидТарифа
	|			И УПЖКХ_Начисления.Начало = УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.НачалоПериода
	|			И УПЖКХ_Начисления.Окончание = УПЖКХ_ДанныеДляСторнированияНачисленийПриОтсутствииПоказанийИПУ.КонецПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НачисленияЗУ.Регистратор КАК Регистратор,
	|	НачисленияЗУ.Период КАК Период,
	|	НачисленияЗУ.Организация КАК Организация,
	|	НачисленияЗУ.ЛицевойСчет КАК ЛицевойСчет,
	|	НачисленияЗУ.Услуга КАК Услуга,
	|	НачисленияЗУ.СоставнаяУслуга КАК СоставнаяУслуга,
	|	НачисленияЗУ.УслугаОснование КАК УслугаОснование,
	|	НачисленияЗУ.Договор КАК Договор,
	|	НачисленияЗУ.ВидТарифа КАК ВидТарифа,
	|	НачисленияЗУ.Тариф КАК Тариф,
	|	НачисленияЗУ.НачалоПериода КАК НачалоПериода,
	|	НачисленияЗУ.КонецПериода КАК КонецПериода,
	|	НачисленияЗУ.ДнейНачислено КАК ДнейНачислено,
	|	НачисленияЗУ.Сторно КАК Сторно,
	|	НачисленияЗУ.ТарифДляСторнирования КАК ТарифДляСторнирования,
	|	ИСТИНА КАК Зависимая,
	|	СУММА(НачисленияЗУ.Количество) КАК Количество,
	|	СУММА(НачисленияЗУ.Начислено) КАК Начислено,
	|	МАКСИМУМ(НачисленияЗУ.Тарифность) КАК Тарифность,
	|	МАКСИМУМ(НачисленияЗУ.СостояниеПУ) КАК СостояниеПУ,
	|	МАКСИМУМ(НачисленияЗУ.ТипРасчета) КАК ТипРасчета,
	|	СУММА(НачисленияЗУ.ПоказаниеСчЛС) КАК ПоказаниеСчЛС,
	|	СУММА(НачисленияЗУ.Сумма) КАК Сумма,
	|	СУММА(НачисленияЗУ.КоличествоРаспределенияПомещение) КАК КоличествоРаспределенияПомещение,
	|	СУММА(НачисленияЗУ.КоличествоРаспределенияПодъезд) КАК КоличествоРаспределенияПодъезд,
	|	СУММА(НачисленияЗУ.КоличествоРаспределенияЗдание) КАК КоличествоРаспределенияЗдание,
	|	СУММА(НачисленияЗУ.СуммаРаспределения) КАК СуммаРаспределения,
	|	СУММА(НачисленияЗУ.УчетныйИндивидуальныйОбъем) КАК УчетныйИндивидуальныйОбъем
	|ИЗ
	|	ВрНачисленияЗУДляДобавленияВТЧ КАК НачисленияЗУ
	|
	|СГРУППИРОВАТЬ ПО
	|	НачисленияЗУ.Регистратор,
	|	НачисленияЗУ.Период,
	|	НачисленияЗУ.Организация,
	|	НачисленияЗУ.ЛицевойСчет,
	|	НачисленияЗУ.Услуга,
	|	НачисленияЗУ.СоставнаяУслуга,
	|	НачисленияЗУ.УслугаОснование,
	|	НачисленияЗУ.Договор,
	|	НачисленияЗУ.ВидТарифа,
	|	НачисленияЗУ.Тариф,
	|	НачисленияЗУ.НачалоПериода,
	|	НачисленияЗУ.КонецПериода,
	|	НачисленияЗУ.ДнейНачислено,
	|	НачисленияЗУ.Сторно,
	|	НачисленияЗУ.ТарифДляСторнирования
	|
	|УПОРЯДОЧИТЬ ПО
	|	НачисленияЗУ.Период
	|ИТОГИ ПО
	|	Регистратор";
	
	Запрос.УстановитьПараметр("СписокДокументов", МассивДокументов);
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаРегистраторов.Следующий() Цикл
		
		ДокументОбъект = ВыборкаРегистраторов.Регистратор.ПолучитьОбъект();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		ОрганизацияДокумента = ДокументОбъект.Организация;
		ВидОперации          = ДокументОбъект.ВидОперации;
		
		МассивПолейСортировки   = Новый Массив;
		СуммаПоЗависимымУслугам = 0;
		
		Если ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.НачислениеНаЛицевыеСчета") Тогда
			
			ИмяТЧ        = "Услуги";
			ИмяКолонкиЛС = "ЛицевыеСчета";
			
			МассивПолейСортировки.Добавить("ЛицевыеСчета.Адрес.Владелец");
			МассивПолейСортировки.Добавить("ЛицевыеСчета.Адрес.ВидПомещения");
			МассивПолейСортировки.Добавить("ЛицевыеСчета.Адрес.Код");
			МассивПолейСортировки.Добавить("ЛицевыеСчета.Адрес.Суффикс");
			МассивПолейСортировки.Добавить("ЛицевыеСчета");
			МассивПолейСортировки.Добавить("Зависимая");
			МассивПолейСортировки.Добавить("Услуга.Наименование");
			МассивПолейСортировки.Добавить("УслугаОснование.Наименование");
			МассивПолейСортировки.Добавить("СоставнаяУслуга.Наименование");
			МассивПолейСортировки.Добавить("НачалоПериода");
			МассивПолейСортировки.Добавить("КонецПериода");
			
		ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.НачисленияПоПоказаниямПУ") Тогда
			
			ИмяТЧ        = "УслугиПоПоказаниямПУ";
			ИмяКолонкиЛС = "ЛицевойСчет";
			
			МассивПолейСортировки.Добавить("ЛицевойСчет.Адрес.Владелец");
			МассивПолейСортировки.Добавить("ЛицевойСчет.Адрес.ВидПомещения");
			МассивПолейСортировки.Добавить("ЛицевойСчет.Адрес.Код");
			МассивПолейСортировки.Добавить("ЛицевойСчет.Адрес.Суффикс");
			МассивПолейСортировки.Добавить("ЛицевойСчет");
			МассивПолейСортировки.Добавить("Зависимая");
			МассивПолейСортировки.Добавить("Услуга.Наименование");
			МассивПолейСортировки.Добавить("УслугаОснование.Наименование");
			МассивПолейСортировки.Добавить("СоставнаяУслуга.Наименование");
			МассивПолейСортировки.Добавить("НачислениеПоПовышающемуКоэффициенту");
			МассивПолейСортировки.Добавить("НачалоПериода");
			МассивПолейСортировки.Добавить("КонецПериода");
			МассивПолейСортировки.Добавить("ВидТарифа.Порядок");
			
		КонецЕсли;
		
		ВыборкаЗаписей = ВыборкаРегистраторов.Выбрать();
		Пока ВыборкаЗаписей.Следующий() Цикл
			
			Если НЕ ВыборкаЗаписей.Организация = ОрганизацияДокумента Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ДокументОбъект[ИмяТЧ].Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗаписей);
			НоваяСтрока[ИмяКолонкиЛС] = ВыборкаЗаписей.ЛицевойСчет;
			
			Если ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.НачисленияПоПоказаниямПУ") Тогда
				Если ВыборкаЗаписей.ТипРасчета = NULL Тогда
					НоваяСтрока.ТипРасчета = Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеНеПроизводитьНачисление();
				КонецЕсли;
				Если ВыборкаЗаписей.СостояниеПУ = NULL Тогда
					НоваяСтрока.СостояниеПУ = Перечисления.УПЖКХ_СостоянияПриборовУчета.НетИПУ;
				КонецЕсли;
			КонецЕсли;
			
			Если ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийНачисленияУслуг.НачислениеНаЛицевыеСчета") Тогда
				СуммаПоЗависимымУслугам = СуммаПоЗависимымУслугам + НоваяСтрока.Начислено;
			Иначе
				СуммаПоЗависимымУслугам = СуммаПоЗависимымУслугам + НоваяСтрока.Сумма + НоваяСтрока.СуммаРаспределения;
			КонецЕсли;
			
		КонецЦикла;
		
		// Отсортируем принудительно, иначе ЗУ добавятся в конец ТЧ, а строки не свернутся по л/с.
		ТаблицаУслуг = УПЖКХ_ОбщегоНазначенияСервер.СформироватьЗапросПоТабличнойЧасти(ДокументОбъект, ИмяТЧ, МассивПолейСортировки);
		ДокументОбъект[ИмяТЧ].Загрузить(ТаблицаУслуг);
		
		// Запишем итог по ЗУ для отображения в журналах.
		ДокументОбъект.СуммаПоЗависимымУслугам = СуммаПоЗависимымУслугам;
		
		// Записываем обработанный документ.
		Если НЕ ЗаписатьОбъект(ДокументОбъект, РежимЗаписиДокумента.Запись) Тогда
			ОбработчикВыполненУспешно = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОбработатьСписокДокументовИЗаписатьДанныеПоЗависимымУслугам()

// Процедура заполняет состояние ПУ в табличной части документа "Начисление услуг" 
// для корректного отображения сторно зависимых услуг.
//
Процедура ЗаполнитьСостояниеПУДляСторноЗависимыхУслугВДокументахНачисленияУслуг_3_0_60_3()
	
	// Признак успешности выполнения обработчика в значении по умолчанию.
	ОбработчикВыполненУспешно = Истина;
	
	// Получаем список документов для обработки, а именно: получаем документы, 
	// в которых есть сторно зависимых услуг с некорректным состоянием ПУ.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КВП_НачислениеУслугПоПУ.Ссылка КАК Регистратор
	|ИЗ
	|	Документ.КВП_НачислениеУслуг.УслугиПоПоказаниямПУ КАК КВП_НачислениеУслугПоПУ
	|ГДЕ
	|	КВП_НачислениеУслугПоПУ.Зависимая
	|	И КВП_НачислениеУслугПоПУ.Сторно
	|	И НЕ КВП_НачислениеУслугПоПУ.СостояниеПУ = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СостоянияПриборовУчета.ЕстьИПУНетПоказаний) 
	|
	|УПОРЯДОЧИТЬ ПО
	|	КВП_НачислениеУслугПоПУ.Ссылка.Дата";
	
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаРегистраторов.Следующий() Цикл
		
		ДокументОбъект = ВыборкаРегистраторов.Регистратор.ПолучитьОбъект();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Сторно",      Истина);
		ПараметрыОтбора.Вставить("Зависимая",   Истина);
		ПараметрыОтбора.Вставить("СостояниеПУ", Перечисления.УПЖКХ_СостоянияПриборовУчета.НетИПУ);
		
		СтрокиСторноЗУ = ДокументОбъект.УслугиПоПоказаниямПУ.НайтиСтроки(ПараметрыОтбора);
		Для Каждого ТекСтрока Из СтрокиСторноЗУ Цикл
			ТекСтрока.СостояниеПУ = Перечисления.УПЖКХ_СостоянияПриборовУчета.ЕстьИПУНетПоказаний;
		КонецЦикла;
		
		// Записываем обработанный документ.
		Если НЕ ЗаписатьОбъект(ДокументОбъект, РежимЗаписиДокумента.Запись) Тогда
			ОбработчикВыполненУспешно = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если обработчик выполнен с ошибками, то в целом обновление считается неуспешным.
	Если Не ОбработчикВыполненУспешно Тогда
		ДобавитьСообщениеПользователю("Обработчик обновления ""ЗаполнитьСостояниеПУДляСторноЗависимыхУслугВДокументахНачисленияУслуг"" не выполнен!", Истина, Истина);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСостояниеПУДляСторноЗависимыхУслугВДокументахНачисленияУслуг_3_0_60_3()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ОБНОВЛЕНИЯ ИНФОРМАЦИОННОЙ БАЗЫ

#Область ФункцииОбновленияИнформационнойБазы

// Процедура заполняет реквизит "Место рождения" справочника "Физические лица" из регистра сведений "УдалитьКВП_Адреса",
// но только в том случае, если место рождения физического лица не заполнено.
Процедура ЗаполнитьМестоРожденияЖильцаВСправочнике_ФизическиеЛица_3027()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УдалитьКВП_Адреса.Страна,
	|	УдалитьКВП_Адреса.Регион,
	|	УдалитьКВП_Адреса.Район,
	|	УдалитьКВП_Адреса.Город,
	|	УдалитьКВП_Адреса.НаселенныйПункт,
	|	УдалитьКВП_Адреса.Объект.ФизЛицо КАК ФизЛицо,
	|	ВЫБОР
	|		КОГДА УдалитьКВП_Адреса.Страна = &ПустаяСтрока
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ + ВЫБОР
	|		КОГДА УдалитьКВП_Адреса.Регион = &ПустаяСтрока
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ + ВЫБОР
	|		КОГДА УдалитьКВП_Адреса.Район = &ПустаяСтрока
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ + ВЫБОР
	|		КОГДА УдалитьКВП_Адреса.Город = &ПустаяСтрока
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ + ВЫБОР
	|		КОГДА УдалитьКВП_Адреса.НаселенныйПункт = &ПустаяСтрока
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	РегистрСведений.УдалитьКВП_Адреса.СрезПоследних(
	|			,
	|			Вид = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыАдресов.УдалитьРождение)
	|				И Объект ССЫЛКА Справочник.УПЖКХ_Жильцы
	|				И Объект.ФизЛицо.МестоРождения В (&МассивПустыхАдресов)) КАК УдалитьКВП_Адреса
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо,
	|	Приоритет УБЫВ";
	
	Запрос.УстановитьПараметр("ПустаяСтрока", "");
	
	МассивПустыхАдресов = Новый Массив;
	МассивПустыхАдресов.Добавить("");
	МассивПустыхАдресов.Добавить("0,,,,");
	МассивПустыхАдресов.Добавить("1,,,,");
	
	Запрос.УстановитьПараметр("МассивПустыхАдресов", МассивПустыхАдресов);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Результат запроса упорядочен по физ. лицу и приоритету (по УБЫВ).
	// Поэтому, если встречаем одно и то же физ. лицо второй, третий, ... раз, то мы не анализируем их данные.
	// Данными с наивысшим приоритетом считаются сведения по первому из повторяющихся физ. лиц.
	
	ТекущееФизЛицо = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		
		Если ТекущееФизЛицо = Неопределено
		 Или Не ТекущееФизЛицо = Выборка.ФизЛицо Тогда
			
			МестоРождения = "0" + ?(Выборка.Город  = "", ?(Выборка.НаселенныйПункт = "", ",", "," + Выборка.НаселенныйПункт),
															  "," + Выборка.Город)
								+ ?(Выборка.Район  = "", ",", "," + Выборка.Район)
								+ ?(Выборка.Регион = "", ",", "," + Выборка.Регион)
								+ ?(Выборка.Страна = "", ",", "," + Выборка.Страна);
			Если НЕ МестоРождения = "0,,,," Тогда
				СправочникОбъект = Выборка.ФизЛицо.ПолучитьОбъект();
				СправочникОбъект.МестоРождения = МестоРождения;
				ЗаписатьОбъект(СправочникОбъект);
			КонецЕсли;
			
		КонецЕсли;
		
		ТекущееФизЛицо = Выборка.ФизЛицо;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьМестоРожденияЖильцаВСправочнике_ФизическиеЛица_3027()

// Процедура заполняет новый ресурс "Разделитель дробной части суммы" в Учетной политике (ЖКХ).
//
Процедура ЗаполнитьРесурсРазделительДробнойЧастиСуммыВУчетнойПолитикеЖКХ_3027()
	
	НаборЗаписей = РегистрыСведений.КВП_УчетнаяПолитикаТСЖ.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Если НЕ ЗначениеЗаполнено(Запись.УдалитьРазделительДробнойЧастиСуммы) Тогда
			Запись.УдалитьРазделительДробнойЧастиСуммы = "не выводить";
		КонецЕсли;
	КонецЦикла;
	
	ЗаписатьОбъект(НаборЗаписей);
	
КонецПроцедуры // ЗаполнитьРесурсРазделительДробнойЧастиСуммыВУчетнойПолитикеЖКХ_3027()

// Заполняет поля "Тип корпуса" и "Тип квартиры" в РС "Адреса".
//
Процедура ОбработатьРегистрСведенийАдреса_3027()
	
	НаборЗаписей = РегистрыСведений.УдалитьКВП_Адреса.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Если Не ЗначениеЗаполнено(Запись.ТипКорпуса) Тогда
			Запись.ТипКорпуса = ?(ЗначениеЗаполнено(Запись.Корпус),
											Перечисления.УдалитьТипыКорпусов.Корпус,
											Перечисления.УдалитьТипыКорпусов.ПустаяСсылка());
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Запись.ТипКвартиры) Тогда
			Запись.ТипКвартиры = ?(ЗначениеЗаполнено(Запись.Квартира),
											Перечисления.УдалитьТипыКвартир.Квартира,
											Перечисления.УдалитьТипыКвартир.ПустаяСсылка());
		КонецЕсли;
	КонецЦикла;
	
	ЗаписатьОбъект(НаборЗаписей);

КонецПроцедуры // ОбработатьРегистрСведенийАдреса_3027()

// Процедура заполнения периодов начисления в движениях регистра накопления "Начисления"
// по документу "Корректировка начислений".
//
Процедура ЗаполнитьПериодыНачисленияВДвиженияхПоДокументамКорректировки_3027()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_Начисления.Регистратор КАК Регистратор,
	|	УПЖКХ_Начисления.НомерСтроки КАК НомерСтрокиДвижения,
	|	НАЧАЛОПЕРИОДА(УПЖКХ_Начисления.МесяцНачисления, МЕСЯЦ) КАК НачалоМесяцаНачисления,
	|	КОНЕЦПЕРИОДА(УПЖКХ_Начисления.МесяцНачисления, МЕСЯЦ) КАК КонецМесяцаНачисления
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления КАК УПЖКХ_Начисления
	|ГДЕ
	|	УПЖКХ_Начисления.Регистратор ССЫЛКА Документ.КВП_КорректировкаНачислений
	|	И УПЖКХ_Начисления.Начало = ДАТАВРЕМЯ(1, 1, 1)
	|	И УПЖКХ_Начисления.Окончание = ДАТАВРЕМЯ(1, 1, 1)
	|	И НЕ УПЖКХ_Начисления.МесяцНачисления = ДАТАВРЕМЯ(1, 1, 1)
	|ИТОГИ ПО
	|	Регистратор";
	
	ДеревоРегистраторов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для Каждого ТекСтрокаРегистратора Из ДеревоРегистраторов.Строки Цикл
		
		НаборЗаписей = РегистрыНакопления.УПЖКХ_Начисления.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ТекСтрокаРегистратора.Регистратор);
		
		НаборЗаписей.Прочитать();
		
		врТаблицаДвижений = НаборЗаписей.Выгрузить();
		врТаблицаДвижений.Индексы.Добавить("НомерСтроки");
		
		БылиИзмененияДвижений = Ложь;
		
		Для Каждого ТекСтрокаДвижения Из ТекСтрокаРегистратора.Строки Цикл
			
			СтрокаДвижения = врТаблицаДвижений.Найти(ТекСтрокаДвижения.НомерСтрокиДвижения, "НомерСтроки");
			
			Если Не СтрокаДвижения = Неопределено Тогда
				
				СтрокаДвижения.Начало    = ТекСтрокаДвижения.НачалоМесяцаНачисления;
				СтрокаДвижения.Окончание = ТекСтрокаДвижения.КонецМесяцаНачисления;
				
				БылиИзмененияДвижений = Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если БылиИзмененияДвижений Тогда
			
			НаборЗаписей.Загрузить(врТаблицаДвижений);
			ЗаписатьОбъект(НаборЗаписей);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПериодыНачисленияВДвиженияхПоДокументамКорректировки_3027()

// Заполняет значением по умолчанию новый ресурс Учетной политики (ЖКХ) - "Вид штрихкода".
//
Процедура ОбработатьУчетнуюПолитикуЖКХ_3030()
	
	НаборЗаписей = РегистрыСведений.КВП_УчетнаяПолитикаТСЖ.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Если Не ЗначениеЗаполнено(Запись.УдалитьВидШтрихкода) Тогда
			Запись.УдалитьВидШтрихкода = Перечисления.КВП_ВидыШтрихкодовДляКвитанций.Одномерный;
		КонецЕсли;
	КонецЦикла;
	
	ЗаписатьОбъект(НаборЗаписей);

КонецПроцедуры // ОбработатьУчетнуюПолитикуЖКХ_3030()

// Процедура предназначена для заполнения в строках таблицы объектов учета документа "Ввод фактических затрат на объект"
// не заполненных способ распределения и при необходимости дополнительные параметры распределения.
//
Процедура ЗаполнитьСпособыРаспределенияФактическихЗатратНаОбъекты_3031()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ВводФактическихЗатратНаОбъектОбъектыУчета.Ссылка КАК Ссылка,
	|	КВП_ВводФактическихЗатратНаОбъектОбъектыУчета.НомерСтроки,
	|	ВЫБОР
	|		КОГДА КВП_ВводФактическихЗатратНаОбъектОбъектыУчета.СпособРаспределения = """"
	|			ТОГДА ВЫБОР
	|					КОГДА КВП_ВводФактическихЗатратНаОбъектОбъектыУчета.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПлощади)
	|							ИЛИ КВП_ВводФактическихЗатратНаОбъектОбъектыУчета.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика)
	|								И КВП_ВводФактическихЗатратНаОбъектОбъектыУчета.Услуга.СпособРаспределенияУслугиПоСчетчику = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыРаспределенияПоказателей.ПропорциональноПлощади)
	|						ТОГДА ""пропорционально площади""
	|					КОГДА КВП_ВводФактическихЗатратНаОбъектОбъектыУчета.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоКоличествуЖильцов)
	|							ИЛИ КВП_ВводФактическихЗатратНаОбъектОбъектыУчета.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика)
	|								И КВП_ВводФактическихЗатратНаОбъектОбъектыУчета.Услуга.СпособРаспределенияУслугиПоСчетчику В (ЗНАЧЕНИЕ(перечисление.КВП_ТипыРаспределенияПоказателей.ПропорциональноПроживающимЖильцам), ЗНАЧЕНИЕ(перечисление.КВП_ТипыРаспределенияПоказателей.ПропорциональноЗарегистрированнымЖильцам), ЗНАЧЕНИЕ(перечисление.КВП_ТипыРаспределенияПоказателей.ПропорциональноКоличествуЖильцов))
	|						ТОГДА ""пропорционально количеству жильцов""
	|					КОГДА КВП_ВводФактическихЗатратНаОбъектОбъектыУчета.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика)
	|							И КВП_ВводФактическихЗатратНаОбъектОбъектыУчета.Услуга.СпособРаспределенияУслугиПоСчетчику = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыРаспределенияПоказателей.ПропорциональноКоличествуПомещенийВКвартире)
	|						ТОГДА ""пропорционально количеству комнат""
	|					ИНАЧЕ ""поровну""
	|				КОНЕЦ
	|	КОНЕЦ КАК СпособРаспределения,
	|	ВЫБОР
	|		КОГДА КВП_ВводФактическихЗатратНаОбъектОбъектыУчета.СпособРаспределения = """"
	|			ТОГДА ВЫБОР
	|					КОГДА КВП_ВводФактическихЗатратНаОбъектОбъектыУчета.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПлощади)
	|							ИЛИ КВП_ВводФактическихЗатратНаОбъектОбъектыУчета.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика)
	|								И КВП_ВводФактическихЗатратНаОбъектОбъектыУчета.Услуга.СпособРаспределенияУслугиПоСчетчику = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыРаспределенияПоказателей.ПропорциональноПлощади)
	|						ТОГДА КВП_ВводФактическихЗатратНаОбъектОбъектыУчета.Услуга.ВидПлощади
	|					КОГДА КВП_ВводФактическихЗатратНаОбъектОбъектыУчета.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоКоличествуЖильцов)
	|						ТОГДА ПРЕДСТАВЛЕНИЕ(КВП_ВводФактическихЗатратНаОбъектОбъектыУчета.Услуга.ВидыЖильцов)
	|					КОГДА КВП_ВводФактическихЗатратНаОбъектОбъектыУчета.Услуга.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика)
	|						ТОГДА ВЫБОР
	|								КОГДА КВП_ВводФактическихЗатратНаОбъектОбъектыУчета.Услуга.СпособРаспределенияУслугиПоСчетчику = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыРаспределенияПоказателей.ПропорциональноПроживающимЖильцам)
	|									ТОГДА ""Проживающие""
	|								КОГДА КВП_ВводФактическихЗатратНаОбъектОбъектыУчета.Услуга.СпособРаспределенияУслугиПоСчетчику = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыРаспределенияПоказателей.ПропорциональноЗарегистрированнымЖильцам)
	|									ТОГДА ""Зарегистрированные""
	|								КОГДА КВП_ВводФактическихЗатратНаОбъектОбъектыУчета.Услуга.СпособРаспределенияУслугиПоСчетчику = ЗНАЧЕНИЕ(Перечисление.КВП_ТипыРаспределенияПоказателей.ПропорциональноКоличествуЖильцов)
	|									ТОГДА ПРЕДСТАВЛЕНИЕ(КВП_ВводФактическихЗатратНаОбъектОбъектыУчета.Услуга.ВидыЖильцов)
	|							КОНЕЦ
	|				КОНЕЦ
	|	КОНЕЦ КАК ТипРаспределения
	|ИЗ
	|	Документ.КВП_ВводФактическихЗатратНаОбъект.ОбъектыУчета КАК КВП_ВводФактическихЗатратНаОбъектОбъектыУчета
	|ГДЕ
	|	КВП_ВводФактическихЗатратНаОбъектОбъектыУчета.СпособРаспределения = """"
	|ИТОГИ ПО
	|	Ссылка
	|АВТОУПОРЯДОЧИВАНИЕ";
	
	ДеревоРезультат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для Каждого ТекСтрокаДокумента Из ДеревоРезультат.Строки Цикл
		
		// Получаем объект документа.
		ДокументОбъект = ТекСтрокаДокумента.Ссылка.ПолучитьОбъект();
		
		//Состояние("Обработка документа ""Ввод фактических затрат на объект "" №" + ДокументОбъект.Номер + " от " + ДокументОбъект.Дата);
		
		// Выгружаем табличные части во временные таблицы значений.
		// Добавляем индексы для поиска.
		
		ТЗОбъектыУчета = ДокументОбъект.ОбъектыУчета.Выгрузить();
		ТЗОбъектыУчета.Индексы.Добавить("НомерСтроки");
		
		ТЗТаблицаРаспределения = ДокументОбъект.ТаблицаРаспределения.Выгрузить();
		ТЗТаблицаРаспределения.Индексы.Добавить("ОбъектУчета");
		ТЗТаблицаРаспределения.Индексы.Добавить("Услуга");
		
		// Заполняем данные в строках временных таблиц ТЧ.
		
		ДокументИзменен = Ложь;
		
		Для Каждого ТекСтрокаВторогоУровня Из ТекСтрокаДокумента.Строки Цикл
			
			Если ЗначениеЗаполнено(ТекСтрокаВторогоУровня.СпособРаспределения) Тогда
			
				СтрокаТЧОбъектовУчета = ТЗОбъектыУчета.Найти(ТекСтрокаВторогоУровня.НомерСтроки, "НомерСтроки");
				Если Не СтрокаТЧОбъектовУчета = Неопределено Тогда
					
					// Способ распределения.
					СтрокаТЧОбъектовУчета.СпособРаспределения = ТекСтрокаВторогоУровня.СпособРаспределения;
					
					// Тип распределения.
					Если ЗначениеЗаполнено(ТекСтрокаВторогоУровня.ТипРаспределения) Тогда
						СтрокаТЧОбъектовУчета.ТипРаспределения = ТекСтрокаВторогоУровня.ТипРаспределения;
					КонецЕсли;
				
					Отбор = Новый Структура;
					Отбор.Вставить("ОбъектУчета", СтрокаТЧОбъектовУчета.ОбъектУчета);
					Отбор.Вставить("Услуга",      СтрокаТЧОбъектовУчета.Услуга);
					
					НайденныеСтрокиТЧ = ТЗТаблицаРаспределения.НайтиСтроки(Отбор);
					
					Для Каждого СтрокаТЧТаблицаРаспределения Из НайденныеСтрокиТЧ Цикл
						
						// Способ распределения.
						СтрокаТЧТаблицаРаспределения.СпособРаспределения = СтрокаТЧОбъектовУчета.СпособРаспределения;
						// Тип распределения.
						СтрокаТЧТаблицаРаспределения.ТипРаспределения = СтрокаТЧОбъектовУчета.ТипРаспределения;
						
					КонецЦикла;
					
					ДокументИзменен = Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ДокументИзменен Тогда
			
			// Загружаем в ТЧ временные таблицы и записываем документ.
			ДокументОбъект.ОбъектыУчета.Загрузить(ТЗОбъектыУчета);
			ДокументОбъект.ТаблицаРаспределения.Загрузить(ТЗТаблицаРаспределения);
			
			ЗаписатьОбъект(ДокументОбъект, РежимЗаписиДокумента.Запись);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСпособыРаспределенияФактическихЗатратНаОбъекты_3031()

// Получает настройки ПД и квитанций, сохраненные через "СохранитьЗначения", и сохраняет их в общее хранилище настроек.
//
Процедура СохранитьНастройкиПлатДокументовИКвитанций_3031()
	
	СтруктураПараметров = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("ПараметрыОтчета_КВП_КвитанцииИзвещения");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("Отчет.УПЖКХ_ПлатежныйДокумент", , СтруктураПараметров);
		УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("Отчет.КВП_КвитанцииИзвещения", , СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры // СохранитьНастройкиПлатДокументовИКвитанций_3031()

// Процедура обработки учтенных отрицательных остатков расхождений по регистру
// накопления "Расхождения объемов потреблений по приборам учета и нормативу".
//
Процедура ОбработатьУчтенныеОтрицательныеОстаткиРасхождений_3031()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_НачислениеУслугУчтенныеОбъемыРасхожденийПУ.Ссылка КАК Ссылка,
	|	КВП_НачислениеУслугУчтенныеОбъемыРасхожденийПУ.Ссылка.Дата КАК ДатаДокумента,
	|	КВП_НачислениеУслугУчтенныеОбъемыРасхожденийПУ.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_НачислениеУслугУчтенныеОбъемыРасхожденийПУ.Услуга КАК Услуга,
	|	КВП_НачислениеУслугУчтенныеОбъемыРасхожденийПУ.ВидТарифа КАК ВидТарифа,
	|	КВП_НачислениеУслугУчтенныеОбъемыРасхожденийПУ.Количество КАК Количество
	|ПОМЕСТИТЬ врУчтенныеОбъемыРасхожденийПУ
	|ИЗ
	|	Документ.КВП_НачислениеУслуг.УчтенныеОбъемыРасхожденийПУ КАК КВП_НачислениеУслугУчтенныеОбъемыРасхожденийПУ
	|ГДЕ
	|	КВП_НачислениеУслугУчтенныеОбъемыРасхожденийПУ.Учтено
	|	И КВП_НачислениеУслугУчтенныеОбъемыРасхожденийПУ.Количество < 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ЛицевойСчет,
	|	Услуга,
	|	ВидТарифа,
	|	Количество
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_НачислениеУслугУслугиПоПоказаниямПУ.Ссылка КАК Ссылка,
	|	КВП_НачислениеУслугУслугиПоПоказаниямПУ.ЛицевойСчет КАК ЛицевойСчет,
	|	СУММА(КВП_НачислениеУслугУслугиПоПоказаниямПУ.КоличествоРаспределенияЗдание + КВП_НачислениеУслугУслугиПоПоказаниямПУ.КоличествоРаспределенияПодъезд + КВП_НачислениеУслугУслугиПоПоказаниямПУ.КоличествоРаспределенияПомещение) КАК КоличествоРаспределения
	|ПОМЕСТИТЬ врТаблицаПоказаний
	|ИЗ
	|	Документ.КВП_НачислениеУслуг.УслугиПоПоказаниямПУ КАК КВП_НачислениеУслугУслугиПоПоказаниямПУ
	|ГДЕ
	|	(КВП_НачислениеУслугУслугиПоПоказаниямПУ.Ссылка, КВП_НачислениеУслугУслугиПоПоказаниямПУ.ЛицевойСчет) В
	|			(ВЫБРАТЬ
	|				врУчтенныеОбъемыРасхожденийПУ.Ссылка,
	|				врУчтенныеОбъемыРасхожденийПУ.ЛицевойСчет
	|			ИЗ
	|				врУчтенныеОбъемыРасхожденийПУ КАК врУчтенныеОбъемыРасхожденийПУ)
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_НачислениеУслугУслугиПоПоказаниямПУ.Ссылка,
	|	КВП_НачислениеУслугУслугиПоПоказаниямПУ.ЛицевойСчет
	|
	|ИМЕЮЩИЕ
	|	НЕ СУММА(КВП_НачислениеУслугУслугиПоПоказаниямПУ.КоличествоРаспределенияЗдание + КВП_НачислениеУслугУслугиПоПоказаниямПУ.КоличествоРаспределенияПодъезд + КВП_НачислениеУслугУслугиПоПоказаниямПУ.КоличествоРаспределенияПомещение) = 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка,
	|	ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врУчтенныеОбъемыРасхожденийПУ.Ссылка КАК Ссылка,
	|	врУчтенныеОбъемыРасхожденийПУ.ДатаДокумента,
	|	врУчтенныеОбъемыРасхожденийПУ.ЛицевойСчет,
	|	врУчтенныеОбъемыРасхожденийПУ.Услуга,
	|	врУчтенныеОбъемыРасхожденийПУ.ВидТарифа,
	|	врУчтенныеОбъемыРасхожденийПУ.Количество
	|ПОМЕСТИТЬ врРасхожденияКУчету
	|ИЗ
	|	врУчтенныеОбъемыРасхожденийПУ КАК врУчтенныеОбъемыРасхожденийПУ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врТаблицаПоказаний КАК врТаблицаПоказаний
	|		ПО врУчтенныеОбъемыРасхожденийПУ.Ссылка = врТаблицаПоказаний.Ссылка
	|			И врУчтенныеОбъемыРасхожденийПУ.ЛицевойСчет = врТаблицаПоказаний.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врРасхожденияКУчету.Ссылка КАК Ссылка,
	|	врРасхожденияКУчету.ДатаДокумента КАК ДатаДокумента,
	|	врРасхожденияКУчету.ЛицевойСчет КАК ЛицевойСчет,
	|	врРасхожденияКУчету.Услуга,
	|	врРасхожденияКУчету.ВидТарифа,
	|	врРасхожденияКУчету.Количество
	|ИЗ
	|	врРасхожденияКУчету КАК врРасхожденияКУчету
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УПЖКХ_РасхожденияОбъемовПотребленийПоПУИНормативу КАК УПЖКХ_РасхожденияОбъемовПотребленийПоПУИНормативу
	|		ПО врРасхожденияКУчету.Ссылка = УПЖКХ_РасхожденияОбъемовПотребленийПоПУИНормативу.Регистратор
	|			И врРасхожденияКУчету.ЛицевойСчет = УПЖКХ_РасхожденияОбъемовПотребленийПоПУИНормативу.ЛицевойСчет
	|			И врРасхожденияКУчету.Услуга = УПЖКХ_РасхожденияОбъемовПотребленийПоПУИНормативу.Услуга
	|			И врРасхожденияКУчету.ВидТарифа = УПЖКХ_РасхожденияОбъемовПотребленийПоПУИНормативу.ВидТарифа
	|			И врРасхожденияКУчету.Количество = УПЖКХ_РасхожденияОбъемовПотребленийПоПУИНормативу.Количество
	|			И (УПЖКХ_РасхожденияОбъемовПотребленийПоПУИНормативу.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход))
	|ГДЕ
	|	ЕСТЬNULL(УПЖКХ_РасхожденияОбъемовПотребленийПоПУИНормативу.ЛицевойСчет, ИСТИНА) = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	врРасхожденияКУчету.Ссылка,
	|	врРасхожденияКУчету.ДатаДокумента,
	|	врРасхожденияКУчету.ЛицевойСчет,
	|	врРасхожденияКУчету.Услуга,
	|	врРасхожденияКУчету.ВидТарифа,
	|	врРасхожденияКУчету.Количество
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка,
	|	ЛицевойСчет
	|ИТОГИ
	|	МАКСИМУМ(ДатаДокумента)
	|ПО
	|	Ссылка";
	
	ВыборкаПоДокументам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоДокументам.Следующий() Цикл
		
		НаборЗаписей = РегистрыНакопления.УПЖКХ_РасхожденияОбъемовПотребленийПоПУИНормативу.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаПоДокументам.Ссылка);
		НаборЗаписей.Прочитать();
		
		ВыборкаРасхождений = ВыборкаПоДокументам.Выбрать();
		Пока ВыборкаРасхождений.Следующий() Цикл
			
			НоваяЗапись = НаборЗаписей.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаРасхождений);
			
			НоваяЗапись.Период      = ВыборкаПоДокументам.ДатаДокумента;
			НоваяЗапись.Регистратор = ВыборкаПоДокументам.Ссылка;
			НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Расход;
			
		КонецЦикла;
		
		ЗаписатьОбъект(НаборЗаписей);
		
	КонецЦикла;
	
КонецПроцедуры // ОбработатьУчтенныеОтрицательныеОстаткиРасхождений_3031()

// Процедура заменяет значение флага расширенной настройки на соответствующее значение 
// реквизита "Вариант настройки".
Процедура УстановитьВариантНастройкиДляРасчетаНормативовПотребления_3031()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_НормыПотребленияУслуг.Ссылка,
	|	КВП_НормыПотребленияУслуг.ВариантНастройки,
	|	КВП_НормыПотребленияУслуг.УдалитьРасширеннаяНастройка
	|ИЗ
	|	Справочник.КВП_НормыПотребленияУслуг КАК КВП_НормыПотребленияУслуг
	|ГДЕ
	|	КВП_НормыПотребленияУслуг.ВариантНастройки = ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.ПустаяСсылка)";
	
	ВыборкаЭлементовСправочника = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЭлементовСправочника.Следующий() Цикл
		
		ОбъектСправочника = ВыборкаЭлементовСправочника.Ссылка.ПолучитьОбъект();
		Если ВыборкаЭлементовСправочника.УдалитьРасширеннаяНастройка Тогда
			ОбъектСправочника.ВариантНастройки = Перечисления.КВП_ВариантыНастроекРасчетаНормативовПотребления.Расширенный;
		Иначе
			ОбъектСправочника.ВариантНастройки = Перечисления.КВП_ВариантыНастроекРасчетаНормативовПотребления.Простой;
		КонецЕсли;
		ЗаписатьОбъект(ОбъектСправочника);
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьВариантНастройкиДляРасчетаНормативовПотребления_3031()

// Процедура находит документы "Начисление услуг в сторонней программе" с движениями по льготам,
// выводит пользователю предупреждающее сообщение и таблицу с ссылками на найденные документы.
//
// Документы «Начисление услуг в сторонней программе» ранее формировали неверные движения,
// соответствующие льготам.
//
Процедура ПредупредитьПользователяОДвиженияхДокументаНачислениеУслугВСтороннейПрограмме_3_0_32_2(СтруктураРезультатаОбновления) Экспорт
	
	
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_Начисления.Регистратор.Ссылка КАК ДокументСсылка
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(, , Регистратор, РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)) КАК УПЖКХ_Начисления
	|ГДЕ
	|	УПЖКХ_Начисления.Регистратор ССЫЛКА Документ.УПЖКХ_НачислениеУслугВСтороннейПрограмме
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_Начисления.Регистратор.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДокументСсылка";
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаРезультат.Количество() > 0 Тогда
		
		// Получим макет и определим области.
		ТабличныйДокумент    = ПолучитьМакет("МакетДокументыНачислениеУслугВСтороннейПрограмме");
		ОбластьЗаголовок     = ТабличныйДокумент.ПолучитьОбласть("ШапкаОтчета");
		ОбластьШапкаТаблицы  = ТабличныйДокумент.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтрокаТаблицы = ТабличныйДокумент.ПолучитьОбласть("СтрокаТаблицы");
		
		// Выведем области в табличный документ.
		МакетОписаниеОбновлений = Новый ТабличныйДокумент;
		МакетОписаниеОбновлений.Вывести(ОбластьЗаголовок);
		МакетОписаниеОбновлений.Вывести(ОбластьШапкаТаблицы);
		
		// Заполним параметры области "ОбластьСтрокаТаблицы" и выводим в табличный документ.
		НомерСтроки = 1;
		Для Каждого ТекСтрока Из ТаблицаРезультат Цикл
			ДокументСсылка                                = ТекСтрока.ДокументСсылка;
			ОбластьСтрокаТаблицы.Параметры.НомерСтроки    = НомерСтроки;
			ОбластьСтрокаТаблицы.Параметры.ДокументСсылка = ДокументСсылка;
			МакетОписаниеОбновлений.Вывести(ОбластьСтрокаТаблицы);
			НомерСтроки = НомерСтроки + 1;
			// Изменим значение реквизита документа.
			Если Не ДокументСсылка.НеверныеДвижения Тогда
				ДокументОбъект                  = ДокументСсылка.ПолучитьОбъект();
				ДокументОбъект.НеверныеДвижения = Истина;
				ЗаписатьОбъект(ДокументОбъект);
			КонецЕсли;
		КонецЦикла;
		
		// Передаем заполненный табличный документ для вывода.
		АдресМакета = ПоместитьВоВременноеХранилище(МакетОписаниеОбновлений, Новый УникальныйИдентификатор);
		СтруктураРезультатаОбновления.Вставить("ДокументыСНевернымиДвижениямиПоЛьготам", АдресМакета);
		
	КонецЕсли;
	
КонецПроцедуры // ПредупредитьПользователяОДвиженияхДокументаНачислениеУслугВСтороннейПрограмме_3_0_32_2()

// Процедура заполняет обратную связь типовых платежных документов и документа "Регистрация оплаты".
//
Процедура ЗаполнитьСсылкиВДокументахОтраженияОплат_3_0_33_1()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_РегистрацияОплатыЛицевыеСчета.Ссылка,
	|	КВП_РегистрацияОплатыЛицевыеСчета.ДокументОплаты,
	|	КВП_РегистрацияОплатыЛицевыеСчета.ДокументОплаты.Удалить_КВП_ДокументРегистрацияОплаты
	|ИЗ
	|	Документ.КВП_РегистрацияОплаты.ЛицевыеСчета КАК КВП_РегистрацияОплатыЛицевыеСчета
	|ГДЕ
	|	НЕ КВП_РегистрацияОплатыЛицевыеСчета.ДокументОплаты ССЫЛКА Документ.КорректировкаДолга
	|	И НЕ КВП_РегистрацияОплатыЛицевыеСчета.ДокументОплаты.Ссылка ЕСТЬ NULL 
	|	И КВП_РегистрацияОплатыЛицевыеСчета.ДокументОплаты.Удалить_КВП_ДокументРегистрацияОплаты ЕСТЬ NULL ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОтраженияОплаты = Выборка.ДокументОплаты.ПолучитьОбъект();
		ДокументОтраженияОплаты.Удалить_КВП_ДокументРегистрацияОплаты = Выборка.Ссылка;
		ЗаписатьОбъект(ДокументОтраженияОплаты);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСсылкиВДокументахОтраженияОплат_3_0_33_1()

// Процедура заполняет константу "УПЖКХ_ТочностьОбъемаНачислений" значением по умолчанию 3.
//
Процедура УстановитьТочностьОбъемовНачислений_3034()
	
	Если Константы.УПЖКХ_ТочностьОбъемаНачислений.Получить() < 2 Тогда
		Константы.УПЖКХ_ТочностьОбъемаНачислений.Установить(3);
	КонецЕсли;
	
КонецПроцедуры // УстановитьТочностьОбъемовНачислений_УстановитьТочностьОбъемовНачислений_3034()

// Процедура устанавливает пометку удаления всех НЕПРОВЕДЕННЫХ документов из списка:
// 1. КВП_ЗаявлениеОРегистрацииОСнятииСРегистрационногоУчетаПоМестуЖительства;
// 2. КВП_ЗаявлениеОРегистрацииПоМестуПребывания;
// 3. КВП_СвидетельствоОРегистрацииПоМестуЖительства;
// 4. КВП_СвидетельствоОРегистрацииПоМестуПребывания;
// 5. УПЖКХ_ДоговорБезвозмездногоПользованияПоМестуЖительства;
// 6. УПЖКХ_ДоговорБезвозмездногоПользованияПоМестуПребывания.
//
Процедура ПометитьНаУдалениеНепроведенныеДокументыПаспортногоСтола_3035()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ЗаявлениеОРегистрацииОСнятииСРегистрационногоУчетаПоМестуЖительства.Ссылка
	|ИЗ
	|	Документ.КВП_ЗаявлениеОРегистрацииОСнятииСРегистрационногоУчетаПоМестуЖительства КАК КВП_ЗаявлениеОРегистрацииОСнятииСРегистрационногоУчетаПоМестуЖительства
	|ГДЕ
	|	НЕ КВП_ЗаявлениеОРегистрацииОСнятииСРегистрационногоУчетаПоМестуЖительства.ПометкаУдаления
	|	И НЕ КВП_ЗаявлениеОРегистрацииОСнятииСРегистрационногоУчетаПоМестуЖительства.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КВП_ЗаявлениеОРегистрацииПоМестуПребывания.Ссылка
	|ИЗ
	|	Документ.КВП_ЗаявлениеОРегистрацииПоМестуПребывания КАК КВП_ЗаявлениеОРегистрацииПоМестуПребывания
	|ГДЕ
	|	НЕ КВП_ЗаявлениеОРегистрацииПоМестуПребывания.ПометкаУдаления
	|	И НЕ КВП_ЗаявлениеОРегистрацииПоМестуПребывания.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КВП_СвидетельствоОРегистрацииПоМестуЖительства.Ссылка
	|ИЗ
	|	Документ.КВП_СвидетельствоОРегистрацииПоМестуЖительства КАК КВП_СвидетельствоОРегистрацииПоМестуЖительства
	|ГДЕ
	|	НЕ КВП_СвидетельствоОРегистрацииПоМестуЖительства.ПометкаУдаления
	|	И НЕ КВП_СвидетельствоОРегистрацииПоМестуЖительства.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КВП_СвидетельствоОРегистрацииПоМестуПребывания.Ссылка
	|ИЗ
	|	Документ.КВП_СвидетельствоОРегистрацииПоМестуПребывания КАК КВП_СвидетельствоОРегистрацииПоМестуПребывания
	|ГДЕ
	|	НЕ КВП_СвидетельствоОРегистрацииПоМестуПребывания.ПометкаУдаления
	|	И НЕ КВП_СвидетельствоОРегистрацииПоМестуПребывания.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УПЖКХ_ДоговорБезвозмездногоПользованияПоМестуЖительства.Ссылка
	|ИЗ
	|	Документ.УПЖКХ_ДоговорБезвозмездногоПользованияПоМестуЖительства КАК УПЖКХ_ДоговорБезвозмездногоПользованияПоМестуЖительства
	|ГДЕ
	|	НЕ УПЖКХ_ДоговорБезвозмездногоПользованияПоМестуЖительства.ПометкаУдаления
	|	И НЕ УПЖКХ_ДоговорБезвозмездногоПользованияПоМестуЖительства.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УПЖКХ_ДоговорБезвозмездногоПользованияПоМестуПребывания.Ссылка
	|ИЗ
	|	Документ.УПЖКХ_ДоговорБезвозмездногоПользованияПоМестуПребывания КАК УПЖКХ_ДоговорБезвозмездногоПользованияПоМестуПребывания
	|ГДЕ
	|	НЕ УПЖКХ_ДоговорБезвозмездногоПользованияПоМестуПребывания.ПометкаУдаления
	|	И НЕ УПЖКХ_ДоговорБезвозмездногоПользованияПоМестуПребывания.Проведен";
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ТекущийОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Попытка
			// Используется метода записи "Отмена проведения",
			// так как в данном случае будет установлена пометка удаления документа.
			ЗаписатьОбъект(ТекущийОбъект, РежимЗаписиДокумента.ОтменаПроведения);
		Исключение
			ДобавитьСообщениеПользователю("Возникла ошибка обработки документа: " + ВыборкаДетальныеЗаписи.Ссылка + Символы.ПС + ОписаниеОшибки(), Истина);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры // ПометитьНаУдалениеНепроведенныеДокументыПаспортногоСтола_3035()

// Процедура заполняет реквизит "Формула расчета" в ТЧ "УслугиПоПоказаниямПУ" документа "Начисление услуг".
//
Процедура ЗаполнитьФормулуРасчетаВДокументахНачисленияУслуг_3035()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗначениеНеЗаполнено", 0);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КВП_НачислениеУслугУслугиПоПоказаниямПУ.Ссылка КАК Документ,
	|	КВП_НачислениеУслугУслугиПоПоказаниямПУ.Ссылка.Дата КАК Дата,
	|	КВП_НачислениеУслугУслугиПоПоказаниямПУ.Ссылка.Номер КАК Номер
	|ИЗ
	|	Документ.КВП_НачислениеУслуг.УслугиПоПоказаниямПУ КАК КВП_НачислениеУслугУслугиПоПоказаниямПУ
	|ГДЕ
	|	КВП_НачислениеУслугУслугиПоПоказаниямПУ.ФормулаРасчета = &ЗначениеНеЗаполнено
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	Номер";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Документ.ПолучитьОбъект();
		ТаблицаПоказаний = ДокументОбъект.УслугиПоПоказаниямПУ;
		
		Для Каждого СтрокаПоказания ИЗ ТаблицаПоказаний Цикл
			
			Если НЕ СтрокаПоказания.ФормулаРасчета = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			// По формулам 3 и 14 постановления 354
			Если СтрокаПоказания.ТипРасчета = 3 Тогда
				СтрокаПоказания.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоФормуле3и14();
				СтрокаПоказания.ТипРасчета     = Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеНеПроизводитьНачисление();
				
			// Не производить индивидуальное начисление, но распределять ОДН
			ИначеЕсли СтрокаПоказания.ТипРасчета = 4 Тогда
				СтрокаПоказания.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоНастройкамУслуги();
				СтрокаПоказания.ТипРасчета     = Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеНеПроизводитьНачисление();
				
			// Для всех остальных типов расчета (по показаниям, норме, среднему) тип расчета не меняется.
			Иначе
				СтрокаПоказания.ФормулаРасчета = Документы.КВП_НачислениеУслуг.ФормулаРасчета_ПолучитьЗначениеПоНастройкамУслуги();
			КонецЕсли;
			
			// Расчет по формуле 15 в тип расчета не записывался, а определялся на этапе расчета документа, поэтому не обрабатывается.
			
		КонецЦикла;
		
		ЗаписатьОбъект(ДокументОбъект, РежимЗаписиДокумента.Запись);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьФормулуРасчетаВДокументахНачисленияУслуг_3035()

// Процедура корректирует состав параметров штрихкода по организациям в настройках учетной политики ЖКХ.
// Ранее в составе штрихкода пользователи могли указать некорректное имя параметра вручную, в результате
// возникала конфигурационная ошибка при открытии настроек учетной политики.
// Данная процедура исключает из состава штрихкода некорректные параметры.
//
Процедура ИсключитьНекорректныеПараметрыИзСоставаШтрихкодаОрганизации_3035()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_УчетнаяПолитикаТСЖ.Период,
	|	КВП_УчетнаяПолитикаТСЖ.Организация,
	|	КВП_УчетнаяПолитикаТСЖ.УдалитьСоставШтрихкода
	|ИЗ
	|	РегистрСведений.КВП_УчетнаяПолитикаТСЖ КАК КВП_УчетнаяПолитикаТСЖ
	|ГДЕ
	|	НЕ КВП_УчетнаяПолитикаТСЖ.УдалитьСоставШтрихкода = """"";
	
	ТаблицаЗаписей = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаЗаписей.Количество() > 0 Тогда
		
		// Массив предопределенных значений.
		мЭлементыШтрихкода = Новый Массив;
		мЭлементыШтрихкода.Добавить("КодЛС");
		мЭлементыШтрихкода.Добавить("Константа");
		мЭлементыШтрихкода.Добавить("МесяцОплаты");
		мЭлементыШтрихкода.Добавить("ГодОплаты");
		мЭлементыШтрихкода.Добавить("СуммаКОплате");
		мЭлементыШтрихкода.Добавить("КонтрольнаяСумма");
		
		Для Каждого ТекущаяСтрока Из ТаблицаЗаписей Цикл
			
			Список          = ТекущаяСтрока.УдалитьСоставШтрихкода;
			Список          = Список + ?(Прав(Список, 1) = ",", "", ",");
			ЧислоПараметров = СтрЧислоВхождений(Список, ",");
			
			СоставШКНовый = "";
			Для Счетчик = 1 по ЧислоПараметров Цикл
				ПозЗапятой = Найти(Список, ",");
				Если ПозЗапятой > 0 Тогда
					ИмяПараметра = Лев(Список, ПозЗапятой - 1);
					Список       = Сред(Список, ПозЗапятой + 1, СтрДлина(Список));
					Если Не мЭлементыШтрихкода.Найти(ИмяПараметра) = Неопределено Тогда
						СоставШКНовый = СоставШКНовый + ИмяПараметра + ",";
					КонецЕсли;
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Не ПустаяСтрока(СоставШКНовый) Тогда
				
				СоставШКНовый = Лев(СоставШКНовый, СтрДлина(СоставШКНовый) - 1);
				
				Если Не СоставШКНовый = ТекущаяСтрока.УдалитьСоставШтрихкода Тогда
					
					НаборЗаписей             = РегистрыСведений.КВП_УчетнаяПолитикаТСЖ.СоздатьМенеджерЗаписи();
					НаборЗаписей.Период      = ТекущаяСтрока.Период;
					НаборЗаписей.Организация = ТекущаяСтрока.Организация;
					НаборЗаписей.Прочитать();
					
					Если НаборЗаписей.Выбран() Тогда
					
						НаборЗаписей.УдалитьСоставШтрихкода = СоставШКНовый;
						Если ЗаписатьОбъект(НаборЗаписей) Тогда
							ДобавитьСообщениеПользователю("В составе параметров штрихкода организации " + ТекущаяСтрока.Организация + " обнаружены ошибки.
														  |Параметры штрихкода скорректированы, их необходимо проверить в настройках учетной политики ЖКХ.", Истина);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ИсключитьНекорректныеПараметрыИзСоставаШтрихкодаОрганизации_3035()

// Процедура заполняет предопределенные элементы справочника "Категории работ", а также
// перезаполняет реквизит документа "Заявка на выполнение работ" элементами справочника.
Процедура ОбработатьЗаявкиНаВыполнениеРаботАДС_3036()
	
	// Заполняем реквизит "Категория работ" документов "Заявка на выполнение работ".
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_ЗаявкаНаВыполнениеРабот.Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(КВП_ЗаявкаНаВыполнениеРабот.Удалить_КатегорияРабот) КАК НаименованиеКатегорииРабот,
	|	КВП_ЗаявкаНаВыполнениеРабот.КатегорияВыполняемыхРабот
	|ИЗ
	|	Документ.КВП_ЗаявкаНаВыполнениеРабот КАК КВП_ЗаявкаНаВыполнениеРабот
	|ГДЕ
	|	КВП_ЗаявкаНаВыполнениеРабот.КатегорияВыполняемыхРабот = ЗНАЧЕНИЕ(Справочник.УПЖКХ_КатегорииРабот.ПустаяСсылка)
	|	И НЕ КВП_ЗаявкаНаВыполнениеРабот.Удалить_КатегорияРабот = ЗНАЧЕНИЕ(Перечисление.КВП_УдалитьВидыКатегорийРабот.ПустаяСсылка)";
	
	ТаблицаЗаявок = Запрос.Выполнить().Выгрузить();
	
	// Заполним таблицу соответствия категорий.
	ТаблицаКатегорий = ТаблицаЗаявок.Скопировать(, "НаименованиеКатегорииРабот, КатегорияВыполняемыхРабот");
	ТаблицаКатегорий.Свернуть("НаименованиеКатегорииРабот, КатегорияВыполняемыхРабот");
	ТаблицаКатегорий.Индексы.Добавить("НаименованиеКатегорииРабот");
	
	Для Каждого ТекСтрокаКатегории Из ТаблицаКатегорий Цикл
		
		КатегорияВыполняемыхРабот = Справочники.УПЖКХ_КатегорииРабот.НайтиПоНаименованию(ТекСтрокаКатегории.НаименованиеКатегорииРабот, Истина);
		
		Если КатегорияВыполняемыхРабот.Пустая() Тогда
			
			НоваяКатегория = Справочники.УПЖКХ_КатегорииРабот.СоздатьЭлемент();
			НоваяКатегория.Наименование = ТекСтрокаКатегории.НаименованиеКатегорииРабот;
			
			Если ЗаписатьОбъект(НоваяКатегория) Тогда
				КатегорияВыполняемыхРабот = НоваяКатегория.Ссылка;
			КонецЕсли;
			
		КонецЕсли;
		
		ТекСтрокаКатегории.КатегорияВыполняемыхРабот = КатегорияВыполняемыхРабот;
		
	КонецЦикла;
	
	// Заполним новый реквизит соответствующими значениями.
	Для Каждого ТекСтрокаЗаявки Из ТаблицаЗаявок Цикл
		
		ДокументОбъект = ТекСтрокаЗаявки.Ссылка.ПолучитьОбъект();
		СтрокаКатегории = ТаблицаКатегорий.Найти(ТекСтрокаЗаявки.НаименованиеКатегорииРабот, "НаименованиеКатегорииРабот");
		
		Если Не СтрокаКатегории = Неопределено Тогда
			
			ДокументОбъект.КатегорияВыполняемыхРабот = СтрокаКатегории.КатегорияВыполняемыхРабот;
			
			ЗаписатьОбъект(ДокументОбъект);
			
			Если ДокументОбъект.Проведен Тогда
				
				НаборЗаписей = РегистрыНакопления.КВП_РасходМатериаловПоВыполненнымРаботам.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Регистратор.Установить(ДокументОбъект.Ссылка);
				НаборЗаписей.Прочитать();
				
				Если НаборЗаписей.Количество() > 0 Тогда
					
					Для Каждого ТекЗапись Из НаборЗаписей Цикл
						ТекЗапись.КатегорияВыполняемыхРабот = СтрокаКатегории.КатегорияВыполняемыхРабот;
					КонецЦикла;
					
					ЗаписатьОбъект(НаборЗаписей);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОбработатьЗаявкиНаВыполнениеРаботАДС_3036()

// Процедура перемещает пользовательскую настройку "Все проживающие" справочника "Лицевые счета" 
// из хранилища пользовательских настроек отчетов в хранилище общих настроек.
Процедура ПереместитьНастройкиПользователяВХранилищеОбщихНастроек_3_0_36_3()
	
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	
	Для Каждого Пользователь Из ПользователиИБ Цикл
		
		Настройка = ХранилищеПользовательскихНастроекОтчетов.Загрузить("КВП_ЛицевыеСчета" , "ВсеПроживающие",,Пользователь.Имя);
		
		Если Не Настройка = Неопределено Тогда
			УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("КВП_ЛицевыеСчета", "ВсеПроживающие", Настройка,, Пользователь.Имя);
			
			ХранилищеПользовательскихНастроекОтчетов.Удалить("КВП_ЛицевыеСчета" ,"ВсеПроживающие", Пользователь.Имя);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПереместитьНастройкиПользователяВХранилищеОбщихНастроек_3_0_36_3()

// Процедура заполняет реквизит "ВводДиапазона" ТЧ "Характеристики" и реквизит "Значение2" ТЧ "РазмерыНорм"
// в элементах справочника "Нормы потребления услуг".
Процедура УстановитьВариантЗначенияДляРасширенныхНормПотребления_3036()
	
	// Отбираем все нормы с расширенным вариантом настройки.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_НормыПотребленияУслуг.Ссылка
	|ИЗ
	|	Справочник.КВП_НормыПотребленияУслуг КАК КВП_НормыПотребленияУслуг
	|ГДЕ
	|	КВП_НормыПотребленияУслуг.ВариантНастройки = ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Расширенный)";
	
	ВыборкаЭлементовСправочника = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЭлементовСправочника.Следующий() Цикл
		
		ОбъектСправочника = ВыборкаЭлементовСправочника.Ссылка.ПолучитьОбъект();
		
		// Для всех характеристик с незаполненным вариантом настройки либо вводимых по значению
		// заполняем реквизит Значение2 ТЧ "Размеры норм".
		Для Каждого СтрокаХарактеристики Из ОбъектСправочника.Характеристики Цикл
			Если СтрокаХарактеристики.ВводДиапазона = Ложь
				ИЛИ СтрокаХарактеристики.ВводДиапазона = Неопределено Тогда
				
				СтрокаХарактеристики.ВводДиапазона = Ложь;
				ОтборНорм = Новый Структура;
				ОтборНорм.Вставить("ИмяКолонки", СтрокаХарактеристики.ИмяКолонки);
				СтрокиНорм = ОбъектСправочника.РазмерыНорм.НайтиСтроки(ОтборНорм);
				
				Для Каждого СтрокаНормы Из СтрокиНорм Цикл
					// Перезаполняются только значения, которые не были введены ранее.
					Если СтрокаНормы.Значение2 = Неопределено Тогда
						СтрокаНормы.Значение2 = 0;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
		Если ОбъектСправочника.Модифицированность() Тогда
			ЗаписатьОбъект(ОбъектСправочника);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьВариантЗначенияДляРасширенныхНормПотребления_3036()

// Процедура находит ошибочные и незаполненные нормативы потребления, предупреждает пользователя и 
// выводит их список в табличный документ.
//
Процедура ПерезаполнитьЗначенияРасширенныхНормПотребления_3036()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_НормыПотребленияУслугРазмерыНорм.Ссылка КАК Норма,
	|	КВП_НормыПотребленияУслугРазмерыНорм.Значение
	|ИЗ
	|	Справочник.КВП_НормыПотребленияУслуг.РазмерыНорм КАК КВП_НормыПотребленияУслугРазмерыНорм
	|ГДЕ
	|	КВП_НормыПотребленияУслугРазмерыНорм.Ссылка.ВариантНастройки = ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыНастроекРасчетаНормативовПотребления.Расширенный)
	|	И НЕ КВП_НормыПотребленияУслугРазмерыНорм.ФлагДругиеЗначения
	|ИТОГИ ПО
	|	Норма";
	
	ДеревоНорм = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	МассивОшибочныхНорм = Новый Массив;
	Для Каждого ВеткаНормы Из ДеревоНорм.Строки Цикл
		Для Каждого Строка Из ВеткаНормы.Строки Цикл
			Если Не ЗначениеЗаполнено(Строка.Значение) И Не Строка.Значение = 0 Тогда
				МассивОшибочныхНорм.Добавить(ВеткаНормы.Норма);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если МассивОшибочныхНорм.Количество() > 0 Тогда
		
		ТекстПредупреждения = 
		"Внимание!
		|Были найдены ошибочно заполненные элементы справочника «Нормы потребления услуг».
		|В найденных элементах некорректно заданы значения размеров норм потребления для некоторых видов характеристик.
		|В связи с этим необходимо перезаполнить табличные части размеров норм потребления, указанных в таблице ниже.";
		
		// Получим макет и определим области.
		ТабличныйДокумент    = ПолучитьМакет("МакетОшибочныеНормыПотребления");
		ОбластьЗаголовок     = ТабличныйДокумент.ПолучитьОбласть("ШапкаОтчета");
		ОбластьШапкаТаблицы  = ТабличныйДокумент.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтрокаТаблицы = ТабличныйДокумент.ПолучитьОбласть("СтрокаТаблицы");
		
		// Выведем области в табличный документ.
		МакетОписаниеОбновлений                        = Новый ТабличныйДокумент;
		ОбластьЗаголовок.Параметры.ТекстПредупреждения = ТекстПредупреждения;
		МакетОписаниеОбновлений.Вывести(ОбластьЗаголовок);
		МакетОписаниеОбновлений.Вывести(ОбластьШапкаТаблицы);
		
		// Заполним параметры области "ОбластьСтрокаТаблицы" и выводим в табличный документ.
		НомерСтроки = 1;
		Для Каждого Норма Из МассивОшибочныхНорм Цикл
			ОбластьСтрокаТаблицы.Параметры.НомерСтроки = НомерСтроки;
			ОбластьСтрокаТаблицы.Параметры.Норма       = Норма.Наименование;
			ОбластьСтрокаТаблицы.Параметры.Услуга      = Норма.Владелец.Наименование;
			МакетОписаниеОбновлений.Вывести(ОбластьСтрокаТаблицы);
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
		МакетОписаниеОбновлений.Показать("Необходимо перезаполнить следующие нормативы потребления услуг");
	КонецЕсли;
	
КонецПроцедуры // ПерезаполнитьЗначенияРасширенныхНормПотребления_3036()

// Процедура проверяет наличие регламентированного отчета "Форма 1 Сведения о жилищном фонде",
// зарегистрированного в справочнике "Регламентированные отчеты". Если отчет не найден, то регистрируется.
//
Процедура ДобавлениеРегламентированногоОтчетаФорма1СведенияОЖилФондеВСправочникРегламентированныеОтчеты_3036()
	
	НаименованиеОтчета           = "УПЖКХ_РегламентированныйОтчетСтатистикаФорма1СведенияОЖилФонде";
	НаименованиеГруппыСтатистика = "Статистика";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегламентированныеОтчеты.Ссылка КАК ОтчетСсылка
	|ИЗ
	|	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
	|ГДЕ
	|	НЕ РегламентированныеОтчеты.ЭтоГруппа
	|	И НЕ РегламентированныеОтчеты.ПометкаУдаления
	|	И РегламентированныеОтчеты.ИсточникОтчета = &ИсточникОтчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегламентированныеОтчеты.Ссылка КАК ГруппаСсылка
	|ИЗ
	|	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
	|ГДЕ
	|	РегламентированныеОтчеты.ЭтоГруппа
	|	И РегламентированныеОтчеты.Наименование = &НаименованиеРодителя
	|	И НЕ РегламентированныеОтчеты.ПометкаУдаления";
	Запрос.УстановитьПараметр("ИсточникОтчета",       НаименованиеОтчета);
	Запрос.УстановитьПараметр("НаименованиеРодителя", НаименованиеГруппыСтатистика);
	Результаты = Запрос.ВыполнитьПакет();
	
	// Проверяем наличие отчета по наименованию.
	Если Результаты[0].Выгрузить().Количество() = 0 Тогда
		
		ТаблицаГрупп = Результаты[1].Выгрузить();
		ГруппаСсылка = Неопределено;
		
		// Если группа не найдена в базе, то создаем.
		Если ТаблицаГрупп.Количество() = 0 Тогда
			НоваяГруппа              = Справочники.РегламентированныеОтчеты.СоздатьГруппу();
			НоваяГруппа.Наименование = НаименованиеГруппыСтатистика;
			НоваяГруппа.Описание     = "Формы статистической отчетности";
			ГруппаСоздана            = ЗаписатьОбъект(НоваяГруппа);
			ГруппаСсылка             = НоваяГруппа.Ссылка;
		Иначе
			ГруппаСсылка = ТаблицаГрупп[0].ГруппаСсылка;
		КонецЕсли;
		
		НовыйОбъект                = Справочники.РегламентированныеОтчеты.СоздатьЭлемент();
		НовыйОбъект.Родитель       = ГруппаСсылка;
		НовыйОбъект.ИсточникОтчета = НаименованиеОтчета;
		НовыйОбъект.Наименование   = "Форма1 Сведения о жилфонде";
		НовыйОбъект.Описание       = "Форма утверждена приказом Росстата от 08.10.2013 № 393";
		ЗаписатьОбъект(НовыйОбъект);
	КонецЕсли;
	
КонецПроцедуры // ДобавлениеРегламентированногоОтчетаФорма1СведенияОЖилФондеВСправочникРегламентированныеОтчеты_3036()

// Процедура проверяет наличие регламентированного отчета "Форма №1-ПУ (ЖКХ)",
// зарегистрированного в справочнике "Регламентированные отчеты". Если отчет не найден, то регистрируется.
//
Процедура ДобавлениеРегламентированногоОтчетаФормаN1ПУЖКХВСправочникРегламентированныеОтчеты_30371()
	
	НаименованиеОтчета           = "УПЖКХ_РегламентированныйОтчетСтатистикаФормаN1_ПУ_ЖКХ";
	НаименованиеГруппыСтатистика = "Статистика";
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегламентированныеОтчеты.Ссылка КАК ОтчетСсылка
	|ИЗ
	|	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
	|ГДЕ
	|	НЕ РегламентированныеОтчеты.ЭтоГруппа
	|	И НЕ РегламентированныеОтчеты.ПометкаУдаления
	|	И РегламентированныеОтчеты.ИсточникОтчета = &ИсточникОтчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегламентированныеОтчеты.Ссылка КАК ГруппаСсылка
	|ИЗ
	|	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
	|ГДЕ
	|	РегламентированныеОтчеты.ЭтоГруппа
	|	И РегламентированныеОтчеты.Наименование = &НаименованиеРодителя
	|	И НЕ РегламентированныеОтчеты.ПометкаУдаления";
	Запрос.УстановитьПараметр("ИсточникОтчета",       НаименованиеОтчета);
	Запрос.УстановитьПараметр("НаименованиеРодителя", НаименованиеГруппыСтатистика);
	Результаты = Запрос.ВыполнитьПакет();
	
	// Проверяем наличие отчета по наименованию.
	Если Результаты[0].Выгрузить().Количество() = 0 Тогда
		
		ТаблицаГрупп = Результаты[1].Выгрузить();
		ГруппаСсылка = Неопределено;
		
		// Если группа не найдена в базе, то создаем.
		Если ТаблицаГрупп.Количество() = 0 Тогда
			НоваяГруппа              = Справочники.РегламентированныеОтчеты.СоздатьГруппу();
			НоваяГруппа.Наименование = НаименованиеГруппыСтатистика;
			НоваяГруппа.Описание     = "Формы статистической отчетности";
			ГруппаСоздана            = ЗаписатьОбъект(НоваяГруппа);
			ГруппаСсылка             = НоваяГруппа.Ссылка;
		Иначе
			ГруппаСсылка = ТаблицаГрупп[0].ГруппаСсылка;
		КонецЕсли;
		
		НовыйОбъект                = Справочники.РегламентированныеОтчеты.СоздатьЭлемент();
		НовыйОбъект.Родитель       = ГруппаСсылка;
		НовыйОбъект.ИсточникОтчета = НаименованиеОтчета;
		НовыйОбъект.Наименование   = "Форма №1-ПУ (ЖКХ) ""Сведения о приборах учета потребления коммунальных услуг в жилищном фонде""";
		НовыйОбъект.Описание       = "Форма утверждена приказом Росстата от 18.07.2013 N 288 (ред. от 01.04.2014, с изм. от 04.09.2014)";
		ЗаписатьОбъект(НовыйОбъект);
	КонецЕсли;
	
КонецПроцедуры // ДобавлениеРегламентированногоОтчетаФормаN1ПУЖКХВСправочникРегламентированныеОтчеты_30371()

// Процедура находит документы "Корректировка начислений" с движениями по льготам
// и устанавливает значение реквизита "НеверныеДвижения" в ИСТИНА.
//
// Документы «Корректировка начислений» ранее формировали неверные движения, соответствующие льготам.
//
Процедура ПредупредитьПользователяОДвиженияхДокументаКорректировкаНачислений_3036()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_КорректировкаНачисленийКорректировки.Ссылка КАК ДокументСсылка
	|ИЗ
	|	Документ.КВП_КорректировкаНачислений.Корректировки КАК КВП_КорректировкаНачисленийКорректировки
	|ГДЕ
	|	НЕ КВП_КорректировкаНачисленийКорректировки.СуммаЛьготы = 0
	|	И КВП_КорректировкаНачисленийКорректировки.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_КорректировкаНачисленийКорректировки.Ссылка";
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаРезультат.Количество() > 0 Тогда
		Для Каждого ТекСтрока Из ТаблицаРезультат Цикл
			ДокументСсылка = ТекСтрока.ДокументСсылка;
			Если Не ДокументСсылка.НеверныеДвижения Тогда
				ДокументОбъект                  = ДокументСсылка.ПолучитьОбъект();
				ДокументОбъект.НеверныеДвижения = Истина;
				ЗаписатьОбъект(ДокументОбъект);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ПредупредитьПользователяОДвиженияхДокументаКорректировкаНачислений_3036()

// Процедура заполняет вновь добавленные реквизиты ТЧ документа "Вступление в ТСЖ",
// исходя из старых значений долей в товариществе.
// Так же перезаполняются добавленные реквизиты РС "Члены ТСЖ" по тому же алгоритму.
//
Процедура ПерезаполнитьЗначенияДолейВДокументеВступлениеВТСЖ_3036()
	
	НаборЗаписей = РегистрыСведений.КВП_ЧленыТСЖ.СоздатьНаборЗаписей();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_ВступлениеВТСЖ.Ссылка,
	|	КВП_ВступлениеВТСЖ.Проведен
	|ИЗ
	|	Документ.КВП_ВступлениеВТСЖ КАК КВП_ВступлениеВТСЖ";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаДокумента Из Результат Цикл
		
		ДокОбъект = СтрокаДокумента.Ссылка.ПолучитьОбъект();
		
		ОбработаныДанныеТЧ = Ложь;
		Для Каждого СтрокаТЧДокумента ИЗ ДокОбъект.ЧленыТСЖ Цикл
			Если НЕ СтрокаТЧДокумента.УдалитьДоля = 0 И СтрокаТЧДокумента.ДоляЧислитель = 0 И СтрокаТЧДокумента.ДоляЗнаменатель = 0 Тогда
				СтрокаТЧДокумента.ДоляЧислитель   = СтрокаТЧДокумента.УдалитьДоля * 100;
				СтрокаТЧДокумента.ДоляЗнаменатель = 100;
				ОбработаныДанныеТЧ                = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ОбработаныДанныеТЧ Тогда
			ЗаписатьОбъект(ДокОбъект);
		КонецЕсли;
			
		Если СтрокаДокумента.Проведен Тогда
			НаборЗаписей.Отбор.Регистратор.Установить(СтрокаДокумента.Ссылка);
			НаборЗаписей.Прочитать();
			ОбработаныДанныеНабораЗаписей = Ложь;
			Для Каждого ЗаписьНабора ИЗ НаборЗаписей Цикл
				Если НЕ ЗаписьНабора.УдалитьДоля = 0 И ЗаписьНабора.ДоляЧислитель = 0 И ЗаписьНабора.ДоляЗнаменатель = 0 Тогда
					ЗаписьНабора.ДоляЧислитель    = ЗаписьНабора.УдалитьДоля * 100;
					ЗаписьНабора.ДоляЗнаменатель  = 100;
					ОбработаныДанныеНабораЗаписей = Истина;
				КонецЕсли;
			КонецЦикла;
			Если ОбработаныДанныеНабораЗаписей Тогда
				ЗаписатьОбъект(НаборЗаписей);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПерезаполнитьЗначенияДолейВДокументеВступлениеВТСЖ_3036()

// Процедура формирует движения документов "Начисление услуг"
// по регистру "УПЖКХ_СведенияОРаспределенииОДННаЛицевыеСчета".
Процедура СформироватьСведенияОРаспределенииОДННаЛицевыеСчета_3036()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КВП_НачислениеУслуг.Ссылка
	|ИЗ
	|	Документ.КВП_НачислениеУслуг КАК КВП_НачислениеУслуг
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОРаспределенииОДННаЛицевыеСчета КАК УПЖКХ_СведенияОРаспределенииОДННаЛицевыеСчета
	|		ПО КВП_НачислениеУслуг.Ссылка = УПЖКХ_СведенияОРаспределенииОДННаЛицевыеСчета.Регистратор
	|ГДЕ
	|	КВП_НачислениеУслуг.ВидОперации = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийНачисленияУслуг.НачисленияПоПоказаниямПУ)
	|	И КВП_НачислениеУслуг.Проведен
	|	И ЕСТЬNULL(УПЖКХ_СведенияОРаспределенииОДННаЛицевыеСчета.Организация, ИСТИНА) = ИСТИНА";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.УПЖКХ_СведенияОРаспределенииОДННаЛицевыеСчета.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Ссылка);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			ТаблицаПоУслугам = ДокументОбъект.УслугиПоПоказаниямПУ.Выгрузить();
			
			// Получим данные для формирования движений.
			Запрос = Новый Запрос;
			
			// Подготовим таблицу начислений с нужными полями для запроса.
			НайденныеСтроки = ТаблицаПоУслугам.НайтиСтроки(Новый Структура("Сторно", Ложь));
			врТаблицаПоУслугам = ТаблицаПоУслугам.Скопировать(НайденныеСтроки, "ЛицевойСчет,Услуга,ТипРасчета,ПоказаниеСчЛС,СуммаРаспределения");
			врТаблицаПоУслугам.Свернуть("ЛицевойСчет,Услуга,ТипРасчета", "ПоказаниеСчЛС,СуммаРаспределения");
			
			Запрос.УстановитьПараметр("врТаблицаПоУслугам", врТаблицаПоУслугам);
			
			Запрос.УстановитьПараметр("ТипРасчетаПоПоказаниям", Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоПоказаниямИПУ());
			Запрос.УстановитьПараметр("ТипРасчетаПоНорме",      Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоНормативу());
			Запрос.УстановитьПараметр("ТипРасчетаПоСреднему",   Документы.КВП_НачислениеУслуг.ТипРасчета_ПолучитьЗначениеПоСреднемуРасходу());
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаПоУслугам.ЛицевойСчет,
			|	ТаблицаПоУслугам.Услуга,
			|	ТаблицаПоУслугам.ТипРасчета,
			|	ТаблицаПоУслугам.ПоказаниеСчЛС,
			|	ТаблицаПоУслугам.СуммаРаспределения
			|ПОМЕСТИТЬ ТаблицаПоУслугам
			|ИЗ
			|	&врТаблицаПоУслугам КАК ТаблицаПоУслугам
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаПоУслугам.ЛицевойСчет,
			|	ТаблицаПоУслугам.Услуга,
			|	ТаблицаПоУслугам.ТипРасчета,
			|	ТаблицаПоУслугам.ПоказаниеСчЛС,
			|	ТаблицаПоУслугам.СуммаРаспределения,
			|	КВП_Услуги.СоставСуммарногоРасходаИПУДляРаспределения,
			|	КВП_ЛицевыеСчета.Адрес.Владелец КАК Здание
			|ПОМЕСТИТЬ ТаблицаПоУслугамСоВспДанными
			|ИЗ
			|	ТаблицаПоУслугам КАК ТаблицаПоУслугам
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КВП_Услуги КАК КВП_Услуги
			|		ПО ТаблицаПоУслугам.Услуга = КВП_Услуги.Ссылка
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
			|		ПО ТаблицаПоУслугам.ЛицевойСчет = КВП_ЛицевыеСчета.Ссылка
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТаблицаПоУслугамСоВспДанными.ЛицевойСчет,
			|	ТаблицаПоУслугамСоВспДанными.Услуга,
			|	ТаблицаПоУслугамСоВспДанными.Здание
			|ПОМЕСТИТЬ ЛицевыеСчетаПоВидамНачислений
			|ИЗ
			|	ТаблицаПоУслугамСоВспДанными КАК ТаблицаПоУслугамСоВспДанными
			|ГДЕ
			|	(ТаблицаПоУслугамСоВспДанными.ТипРасчета = &ТипРасчетаПоПоказаниям
			|			ИЛИ ТаблицаПоУслугамСоВспДанными.ТипРасчета = &ТипРасчетаПоНорме
			|				И (ТаблицаПоУслугамСоВспДанными.СоставСуммарногоРасходаИПУДляРаспределения = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВариантыСоставаСуммарногоРасходаИПУ.РасходПоПриборамУчетаИНачисленияПоНормативу)
			|					ИЛИ ТаблицаПоУслугамСоВспДанными.СоставСуммарногоРасходаИПУДляРаспределения = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВариантыСоставаСуммарногоРасходаИПУ.РасходПоПриборамУчетаНачисленияПоНормативуИПоСреднему))
			|			ИЛИ ТаблицаПоУслугамСоВспДанными.ТипРасчета = &ТипРасчетаПоСреднему
			|				И ТаблицаПоУслугамСоВспДанными.СоставСуммарногоРасходаИПУДляРаспределения = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВариантыСоставаСуммарногоРасходаИПУ.РасходПоПриборамУчетаНачисленияПоНормативуИПоСреднему))
			|	И НЕ ТаблицаПоУслугамСоВспДанными.ПоказаниеСчЛС = 0
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ТаблицаПоУслугамСоВспДанными.Здание
			|ПОМЕСТИТЬ ЗданияСРаспределением
			|ИЗ
			|	ТаблицаПоУслугамСоВспДанными КАК ТаблицаПоУслугамСоВспДанными
			|ГДЕ
			|	НЕ ТаблицаПоУслугамСоВспДанными.СуммаРаспределения = 0
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЛицевыеСчетаПоВидамНачислений.ЛицевойСчет,
			|	ЛицевыеСчетаПоВидамНачислений.Услуга
			|ИЗ
			|	ЗданияСРаспределением КАК ЗданияСРаспределением
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ЛицевыеСчетаПоВидамНачислений КАК ЛицевыеСчетаПоВидамНачислений
			|		ПО ЗданияСРаспределением.Здание = ЛицевыеСчетаПоВидамНачислений.Здание";
			
			ВыборкаЛицевыхСчетовСРаспределением = Запрос.Выполнить().Выбрать();
			
			ЕстьИзменения = Ложь;
			Пока ВыборкаЛицевыхСчетовСРаспределением.Следующий() Цикл
				
				НовоеДвижение = НаборЗаписей.Добавить();
				НовоеДвижение.Регистратор     = ДокументОбъект.Ссылка;
				НовоеДвижение.Организация     = ДокументОбъект.Организация;
				НовоеДвижение.ЛицевойСчет     = ВыборкаЛицевыхСчетовСРаспределением.ЛицевойСчет;
				НовоеДвижение.Услуга          = ВыборкаЛицевыхСчетовСРаспределением.Услуга;
				НовоеДвижение.МесяцНачисления = КонецМесяца(ДокументОбъект.Дата);
				
				ЕстьИзменения = Истина;
				
			КонецЦикла;
			
			Если ЕстьИзменения Тогда
				ЗаписатьОбъект(НаборЗаписей);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры //СформироватьСведенияОРаспределенииОДННаЛицевыеСчета_3036()

// Процедура формирует движения документов "Начисление услуг"
// по регистру "Расхождения объемов потреблений по приборам учета и нормативу".
// Движения формируются по тем лицевым счетам, по которым выполнено начисление сторно за месяцы,
// в которых было распределение ОДН на дом, но не было распределения на сам лицевой счет.
// Заполнение движений выполняется в соответствии с данными регистра "Сведения о распределении ОДН на лицевые счета".
//
Процедура СформироватьДвиженияПоПриходуРасхожденийОДНКУчетуВНачисленияхПоПУ_3036()
	
	// Получим настройки параметров учета.
	НастройкаКорректировкиОДН = Новый Структура;
	НастройкаКорректировкиОДН.Вставить("ДатаНачалаИспользования", Константы.УПЖКХ_ДатаНачалаУчетаСторноИндивидуальныхНачисленийПриРасчетеОДН.Получить());
	НастройкаКорректировкиОДН.Вставить("Использовать",            ЗначениеЗаполнено(НастройкаКорректировкиОДН.ДатаНачалаИспользования));
	
	Если Не НастройкаКорректировкиОДН.Использовать Тогда
		Возврат;
	КонецЕсли;
	
	// Определим дату начала учета расхождений, как максимум из дат:
	// Дата начала использования из настроек программы ЖКХ.
	// Период самой ранней записи в регистре учета расхождений.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	МИНИМУМ(УПЖКХ_РасхожденияОбъемовПотребленийПоПУИНормативу.Период) КАК ПериодНачалаУчетаРасхожденийПоРегистру
	|ИЗ
	|	РегистрНакопления.УПЖКХ_РасхожденияОбъемовПотребленийПоПУИНормативу КАК УПЖКХ_РасхожденияОбъемовПотребленийПоПУИНормативу";
	
	ВыборкаПериода = Запрос.Выполнить().Выбрать();
	Если ВыборкаПериода.Следующий() И ЗначениеЗаполнено(ВыборкаПериода.ПериодНачалаУчетаРасхожденийПоРегистру) Тогда
		// Берем максимум даты из настройки программы из самой ранней даты по регистру.
		НастройкаКорректировкиОДН.ДатаНачалаИспользования = Макс(НастройкаКорректировкиОДН.ДатаНачалаИспользования, НачалоДня(ВыборкаПериода.ПериодНачалаУчетаРасхожденийПоРегистру))
	КонецЕсли;
	
	// Выберем документы, которые необходимо обработать.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаНачалаУчетаРасхождений", НастройкаКорректировкиОДН.ДатаНачалаИспользования);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КВП_НачислениеУслугУслугиПоПоказаниямПУ.Ссылка
	|ИЗ
	|	Документ.КВП_НачислениеУслуг.УслугиПоПоказаниямПУ КАК КВП_НачислениеУслугУслугиПоПоказаниямПУ
	|ГДЕ
	|	КВП_НачислениеУслугУслугиПоПоказаниямПУ.Ссылка.Дата >= &ДатаНачалаУчетаРасхождений
	|	И КВП_НачислениеУслугУслугиПоПоказаниямПУ.Ссылка.Проведен
	|	И КВП_НачислениеУслугУслугиПоПоказаниямПУ.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийНачисленияУслуг.НачисленияПоПоказаниямПУ)
	|	И КВП_НачислениеУслугУслугиПоПоказаниямПУ.Сторно";
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		
		// Определим параметры, необходимые для получения сведений о начислениях,
		// по которым введено сторно.
		СтрокиСторно = ДокументОбъект.УслугиПоПоказаниямПУ.НайтиСтроки(Новый Структура("Сторно", Истина));
		врТаблицаСторно = ДокументОбъект.УслугиПоПоказаниямПУ.Выгрузить(СтрокиСторно, "ЛицевойСчет, Услуга, ВидТарифа, НачалоПериода, ПоказаниеСчЛС, Сторно");
		
		МассивЛССторно = врТаблицаСторно.ВыгрузитьКолонку("ЛицевойСчет");
		
		МассивМесяцевНачисленияСторно = врТаблицаСторно.ВыгрузитьКолонку("НачалоПериода");
		Для ТекНомер = 0 По МассивМесяцевНачисленияСторно.Количество() - 1 Цикл
			МассивМесяцевНачисленияСторно[ТекНомер] = НачалоДня(КонецМесяца(МассивМесяцевНачисленияСторно[ТекНомер]));
		КонецЦикла;
		
		// Определим список услуг для получения данных сторно.
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("Услуга", ДокументОбъект.Услуга);
		СписокДопУслуг = ПолучитьТаблицуУслугОбщедомовогоСчетчика(СтруктураПараметров).ВыгрузитьКолонку("УслугаОбщедомовогоСчетчика");
		
		СписокУслугСторно = Новый СписокЗначений;
		СписокУслугСторно.ЗагрузитьЗначения(врТаблицаСторно.ВыгрузитьКолонку("Услуга"));
		
		Для Каждого ТекДопУслуга Из СписокДопУслуг Цикл
			СписокУслугСторно.Добавить(ТекДопУслуга);
		КонецЦикла;
		
		// Определим запрос получения данных.
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Организация",       ДокументОбъект.Организация);
		Запрос.УстановитьПараметр("ТаблицаНачислений", врТаблицаСторно);
		
		Запрос.УстановитьПараметр("МесяцНачисленияСторно", МассивМесяцевНачисленияСторно);
		Запрос.УстановитьПараметр("ЛицевойСчетСторно",     МассивЛССторно);
		Запрос.УстановитьПараметр("СписокУслугСторно",     СписокУслугСторно);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДанных.ЛицевойСчет,
		|	ТаблицаДанных.Услуга,
		|	ТаблицаДанных.ВидТарифа,
		|	ТаблицаДанных.НачалоПериода,
		|	ТаблицаДанных.ПоказаниеСчЛС,
		|	ТаблицаДанных.Сторно
		|ПОМЕСТИТЬ врТаблицаДанных
		|ИЗ
		|	&ТаблицаНачислений КАК ТаблицаДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВложенныйНаличиеРаспределения.ЛицевойСчет,
		|	ВложенныйНаличиеРаспределения.МесяцНачисления
		|ПОМЕСТИТЬ врОборотыНачисленийСторно
		|ИЗ
		|	(ВЫБРАТЬ
		|		УПЖКХ_НачисленияОбороты.ЛицевойСчет КАК ЛицевойСчет,
		|		УПЖКХ_НачисленияОбороты.МесяцНачисления КАК МесяцНачисления
		|	ИЗ
		|		РегистрНакопления.УПЖКХ_Начисления.Обороты(
		|				,
		|				,
		|				,
		|				Организация = &Организация
		|					И МесяцНачисления В (&МесяцНачисленияСторно)
		|					И Услуга В (&СписокУслугСторно)
		|					И ЛицевойСчет В (&ЛицевойСчетСторно)
		|					И ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ)) КАК УПЖКХ_НачисленияОбороты
		|	
		|	ОБЪЕДИНИТЬ
		|	
		|	ВЫБРАТЬ
		|		УПЖКХ_СведенияОРаспределенииОДННаЛицевыеСчета.ЛицевойСчет,
		|		УПЖКХ_СведенияОРаспределенииОДННаЛицевыеСчета.МесяцНачисления
		|	ИЗ
		|		РегистрСведений.УПЖКХ_СведенияОРаспределенииОДННаЛицевыеСчета КАК УПЖКХ_СведенияОРаспределенииОДННаЛицевыеСчета
		|	ГДЕ
		|		УПЖКХ_СведенияОРаспределенииОДННаЛицевыеСчета.Организация = &Организация
		|		И УПЖКХ_СведенияОРаспределенииОДННаЛицевыеСчета.МесяцНачисления В(&МесяцНачисленияСторно)
		|		И УПЖКХ_СведенияОРаспределенииОДННаЛицевыеСчета.Услуга В(&СписокУслугСторно)
		|		И УПЖКХ_СведенияОРаспределенииОДННаЛицевыеСчета.ЛицевойСчет В(&ЛицевойСчетСторно)) КАК ВложенныйНаличиеРаспределения
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	врТаблицаДанных.ЛицевойСчет,
		|	врТаблицаДанных.Услуга,
		|	врТаблицаДанных.ВидТарифа,
		|	СУММА(врТаблицаДанных.ПоказаниеСчЛС) КАК Количество
		|ИЗ
		|	врТаблицаДанных КАК врТаблицаДанных
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врОборотыНачисленийСторно КАК врОборотыНачисленийСторно
		|		ПО врТаблицаДанных.ЛицевойСчет = врОборотыНачисленийСторно.ЛицевойСчет
		|			И (КОНЕЦПЕРИОДА(врТаблицаДанных.НачалоПериода, МЕСЯЦ) = КОНЕЦПЕРИОДА(врОборотыНачисленийСторно.МесяцНачисления, МЕСЯЦ))
		|ГДЕ
		|	врТаблицаДанных.Сторно
		|	И врТаблицаДанных.ПоказаниеСчЛС > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	врТаблицаДанных.ЛицевойСчет,
		|	врТаблицаДанных.Услуга,
		|	врТаблицаДанных.ВидТарифа";
		
		// Отразим начисления сторно для учета.
		ТаблицаНачисленияСторно = Запрос.Выполнить().Выгрузить();
		
		Если ТаблицаНачисленияСторно.Количество() > 0 Тогда
			
			// Считаем текущие движения документа.
			НаборЗаписей = РегистрыНакопления.УПЖКХ_РасхожденияОбъемовПотребленийПоПУИНормативу.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДокументов.Ссылка);
			НаборЗаписей.Прочитать();
			ТаблицаИсходныхДвижений = НаборЗаписей.Выгрузить();
			
			НужноОбновитьДвижения = Ложь;
			
			// Получим таблицу движений по приходу.
			ТаблицаИсходныхДвижений_Приход = ТаблицаИсходныхДвижений.Скопировать(ТаблицаИсходныхДвижений.НайтиСтроки(Новый Структура("ВидДвижения", ВидДвиженияНакопления.Приход)));
			
			Если ТаблицаИсходныхДвижений_Приход.Количество() = ТаблицаНачисленияСторно.Количество() Тогда
				
				// Выполним сортировку старых движений.
				ТаблицаИсходныхДвижений_Приход.Сортировать("ЛицевойСчет, Услуга, ВидТарифа");
				
				// Выполним сортировку новых движений.
				ТаблицаНачисленияСторно.Сортировать("ЛицевойСчет, Услуга, ВидТарифа");
				
				Для ИндексСтроки = 0 По ТаблицаИсходныхДвижений_Приход.Количество() - 1 Цикл
					
					ТекСтрокаИсходная = ТаблицаИсходныхДвижений_Приход[ИндексСтроки];
					ТекСтрокаНовая    = ТаблицаНачисленияСторно[ИндексСтроки];
					
					// Если хотя бы один показатель любого движения изменился, нужно обновлять движения.
					Если Не ТекСтрокаИсходная.ЛицевойСчет = ТекСтрокаНовая.ЛицевойСчет
					 Или Не ТекСтрокаИсходная.Услуга = ТекСтрокаНовая.Услуга
					 Или Не ТекСтрокаИсходная.ВидТарифа = ТекСтрокаНовая.ВидТарифа
					 Или Не ТекСтрокаИсходная.Количество = ТекСтрокаНовая.Количество Тогда
						НужноОбновитьДвижения = Истина;
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
				
			Иначе
				НужноОбновитьДвижения = Истина;
			КонецЕсли;
			
			// При необходимости выполним обновление движения в Приход.
			Если НужноОбновитьДвижения Тогда
				
				// В таблице движений оставляем движения по расходу.
				ТаблицаНовыхДвижений = ТаблицаИсходныхДвижений.Скопировать(ТаблицаИсходныхДвижений.НайтиСтроки(Новый Структура("ВидДвижения", ВидДвиженияНакопления.Расход)));
				
				Для Каждого ТекСтрокаСторно Из ТаблицаНачисленияСторно Цикл
					
					// Добавляем новое движение по приходу.
					НовоеДвижение = ТаблицаНовыхДвижений.Добавить();
					ЗаполнитьЗначенияСвойств(НовоеДвижение, ТекСтрокаСторно);
					
					НовоеДвижение.Активность  = Истина;
					НовоеДвижение.Регистратор = ДокументОбъект.Ссылка;
					НовоеДвижение.Период      = ДокументОбъект.Дата;
					НовоеДвижение.ВидДвижения = ВидДвиженияНакопления.Приход;
					
				КонецЦикла;
				
				// Отсортируем движения по виду движения.
				ТаблицаНовыхДвижений.Сортировать("ВидДвижения");
				
				// Запись движений.
				НаборЗаписей.Загрузить(ТаблицаНовыхДвижений);
				ЗаписатьОбъект(НаборЗаписей);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьДвиженияПоПриходуРасхожденийОДНКУчетуВНачисленияхПоПУ_3036()

// Процедура перезаполяется сведения о здании и помещении в документах "Установка тарифов",
// в которых заполнена табличная часть "Список объектов".
//
Процедура ПерезаполнитьСведенияОбОбъектахВДокументеУстановкаТарифов_3036()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_УстановкаТарифовСписокОбъектов.НомерСтроки,
	|	КВП_УстановкаТарифовСписокОбъектов.Ссылка КАК СсылкаНаДокумент,
	|	ВЫБОР
	|		КОГДА КВП_УстановкаТарифовСписокОбъектов.УдалитьОбъект ССЫЛКА Справочник.УПЖКХ_Помещения
	|			ТОГДА КВП_УстановкаТарифовСписокОбъектов.УдалитьОбъект.Владелец
	|		КОГДА КВП_УстановкаТарифовСписокОбъектов.УдалитьОбъект ССЫЛКА Справочник.КВП_Здания
	|			ТОГДА КВП_УстановкаТарифовСписокОбъектов.УдалитьОбъект
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.КВП_Здания.ПустаяСсылка)
	|	КОНЕЦ КАК Здание,
	|	ВЫБОР
	|		КОГДА КВП_УстановкаТарифовСписокОбъектов.УдалитьОбъект ССЫЛКА Справочник.УПЖКХ_Помещения
	|			ТОГДА КВП_УстановкаТарифовСписокОбъектов.УдалитьОбъект
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УПЖКХ_Помещения.ПустаяСсылка)
	|	КОНЕЦ КАК Помещение,
	|	КВП_УстановкаТарифовСписокОбъектов.УдалитьОбъект
	|ИЗ
	|	Документ.КВП_УстановкаТарифов.СписокОбъектов КАК КВП_УстановкаТарифовСписокОбъектов
	|ГДЕ
	|	КВП_УстановкаТарифовСписокОбъектов.Здание = ЗНАЧЕНИЕ(Справочник.КВП_Здания.ПустаяСсылка)
	|	И НЕ КВП_УстановкаТарифовСписокОбъектов.УдалитьОбъект = ЗНАЧЕНИЕ(Справочник.КВП_Здания.ПустаяСсылка)
	|	И НЕ КВП_УстановкаТарифовСписокОбъектов.УдалитьОбъект = ЗНАЧЕНИЕ(Справочник.УПЖКХ_Помещения.ПустаяСсылка)
	|ИТОГИ ПО
	|	СсылкаНаДокумент";
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		ДокументОбъект = ВыборкаДокументов.СсылкаНаДокумент.ПолучитьОбъект();
		
		ВыборкаСтрок = ВыборкаДокументов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСтрок.Следующий() Цикл
			
			СтрокаОбъекта = ДокументОбъект.СписокОбъектов.Получить(ВыборкаСтрок.НомерСтроки - 1);
			СтрокаОбъекта.Здание    = ВыборкаСтрок.Здание;
			СтрокаОбъекта.Помещение = ВыборкаСтрок.Помещение;
			
		КонецЦикла;
		
		ЗаписатьОбъект(ДокументОбъект);
		
	КонецЦикла;
	
КонецПроцедуры //ПерезаполнитьСведенияОбОбъектахВДокументеУстановкаТарифов_3036()

// Процедура заполняет реквизит "СпособЗачетаАвансов" в документе "Отражение начислений в регламентированном учете".
//
Процедура ЗаполнитьСпособЗачетаАвансовВДокументахОтражения_3037()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ОтражениеНачисленийВРеглУчете.Ссылка,
	|	КВП_ОтражениеНачисленийВРеглУчете.Номер,
	|	КВП_ОтражениеНачисленийВРеглУчете.Дата,
	|	КВП_ОтражениеНачисленийВРеглУчете.ВидОперации
	|ИЗ
	|	Документ.КВП_ОтражениеНачисленийВРеглУчете КАК КВП_ОтражениеНачисленийВРеглУчете
	|ГДЕ
	|	КВП_ОтражениеНачисленийВРеглУчете.СпособЗачетаАвансов = ЗНАЧЕНИЕ(Перечисление.СпособыЗачетаАвансов.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если Выборка.ВидОперации = Перечисления.КВП_ВидыОперацийОтраженияНачисленийВРеглУчете.ОтражениеДокументамиРеализации Тогда
			ДокументОбъект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.Автоматически;
		Иначе // упрощенное
			ДокументОбъект.СпособЗачетаАвансов = Перечисления.СпособыЗачетаАвансов.НеЗачитывать;
		КонецЕсли;
		ЗаписатьОбъект(ДокументОбъект);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСпособЗачетаАвансовВДокументахОтражения_3037()

// Процедура заполняет вид рассрочки документа "Заявление на рассрочку".
//
Процедура ЗаполнениеВидаРассрочкиДокументаЗаявлениеНаРассрочку_3037()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_ЗаявлениеНаРассрочку.Ссылка,
	|	УПЖКХ_ЗаявлениеНаРассрочку.ВидРассрочки
	|ИЗ
	|	Документ.УПЖКХ_ЗаявлениеНаРассрочку КАК УПЖКХ_ЗаявлениеНаРассрочку";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ВидРассрочки.Пустая() Тогда
			
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
			
			ДокументОбъект.ВидРассрочки = Перечисления.УПЖКХ_ВидыРассрочки.РассрочкаНаПлатуЗаУслуги;
			
			ЗаписатьОбъект(ДокументОбъект);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнениеВидаРассрочкиДокументаЗаявлениеНаРассрочку_3037()

// Процедура перезаполняет значения реквизитов документа "Разовое начисление услуг" в связи с
// доработками документа по заявке №З00011643. Произведены следующие доработки:
// 1. Помечены на удаление (для 3.0.57.6) следующие реквизиты документа: "ЛицевойСчет", "ДоговорКонтрагента".
// 2. Добавлен реквизит документа "ВидОперации" с типом "Перечисление.УПЖКХ_ВидыОперацийРазовоеНачислениеУслуг".
// 3. В табличную часть "Услуги" добавлены следующие реквизиты: "ЛицевойСчет", "ДоговорКонтрагента".
//
Процедура ПерезаполнитьДокументыРазовоеНачислениеУслуг_3037()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_РазовоеНачислениеУслуг.Ссылка КАК ДокументСсылка
	|ИЗ
	|	Документ.КВП_РазовоеНачислениеУслуг КАК КВП_РазовоеНачислениеУслуг
	|ГДЕ
	|	КВП_РазовоеНачислениеУслуг.ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийРазовоеНачислениеУслуг.ПустаяСсылка)
	|	И НЕ КВП_РазовоеНачислениеУслуг.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектДокумент = Выборка.ДокументСсылка.ПолучитьОбъект();
		
		// Вид операции по умолчанию.
		ОбъектДокумент.ВидОперации = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыОперацийРазовоеНачислениеУслуг.ПрочиеНачисления");
		
		ЛицевойСчетДокумента = ОбъектДокумент.УдалитьЛицевойСчет;
		ДоговорЛСДокумента   = ОбъектДокумент.УдалитьДоговорКонтрагента;
		
		ТаблицаУслуги = ОбъектДокумент.Услуги.Выгрузить();
		
		ТаблицаУслуги.ЗаполнитьЗначения(ЛицевойСчетДокумента, "ЛицевойСчет");
		ТаблицаУслуги.ЗаполнитьЗначения(ДоговорЛСДокумента,   "ДоговорКонтрагента");
		
		ОбъектДокумент.Услуги.Загрузить(ТаблицаУслуги);
		
		ЗаписатьОбъект(ОбъектДокумент);
		
	КонецЦикла;
	
КонецПроцедуры // ПерезаполнитьДокументыРазовоеНачислениеУслуг_3037()

// Процедура заполняет реквизит "Период" и ресурс "Действует" регистра сведений "КВП_ЗависимостиУслуг"
// значениями по умолчанию:
// - для реквизита "Период" это период действия самой ранней записи учетной политики или начало года от текущей даты.
// - для ресурса "Действует" это значение "ИСТИНА".
// 
Процедура ЗаполнитьПериодЗаписейРегистраЗависимостиУслуг_3038()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МИНИМУМ(КВП_УчетнаяПолитикаТСЖ.Период) КАК Период
	|ИЗ
	|	РегистрСведений.КВП_УчетнаяПолитикаТСЖ КАК КВП_УчетнаяПолитикаТСЖ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ПериодЗаписей = Выборка.Период;
	Иначе
		ПериодЗаписей = НачалоГода(ТекущаяДата());
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.КВП_ЗависимостиУслуг.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	ЗаписатьНаборЗаписей = Ложь;
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Если НЕ ЗначениеЗаполнено(Запись.Период) Тогда
			Запись.Период = ПериодЗаписей;
			Запись.Действует = Истина;
			ЗаписатьНаборЗаписей = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗаписатьНаборЗаписей Тогда
		ЗаписатьОбъект(НаборЗаписей);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает "Дифференцированный" вид платежей для записей регистра "Сведения о рассрочке".
//
Процедура ЗаполнитьВидПлатежейВРегистреСведенияОРассрочке_3037()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_НачисленияПоРассрочкеОбороты.Регистратор,
	|	УПЖКХ_НачисленияПоРассрочкеОбороты.Регистратор.ВидПлатежей КАК ВидПлатежей
	|ИЗ
	|	РегистрНакопления.УПЖКХ_НачисленияПоРассрочке.Обороты(
	|			,
	|			,
	|			Регистратор,
	|			Удалить_ВидПлатежей = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыПлатежейРассрочки.ПустаяСсылка)
	|				И ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_Рассрочка.Предоставление)) КАК УПЖКХ_НачисленияПоРассрочкеОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияПоРассрочкеОбороты.Регистратор";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыНакопления.УПЖКХ_НачисленияПоРассрочке.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл
			Если Запись.Удалить_ВидПлатежей = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыПлатежейРассрочки.ПустаяСсылка") Тогда
				Запись.Удалить_ВидПлатежей = Перечисления.УПЖКХ_ВидыПлатежейРассрочки.Дифференцированные;
			КонецЕсли;
		КонецЦикла;
		ЗаписатьОбъект(НаборЗаписей);
		
		Если Выборка.ВидПлатежей = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыПлатежейРассрочки.ПустаяСсылка") Тогда
			ОбъектРегистратор = Выборка.Регистратор.ПолучитьОбъект();
			ОбъектРегистратор.ВидПлатежей = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВидыПлатежейРассрочки.Дифференцированные");
			ЗаписатьОбъект(ОбъектРегистратор);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьВидПлатежейВРегистреСведенияОРассрочке_3037()

// Обнуляет "Этажность" подъездов в случае, если она равна этажности здания.
//
Процедура ОбновитьЭтажностьПодъездов_ПереходКНовомуМеханизмуХраненияЭтажностиПодъездов_3_0_38_5()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_Подъезды.Этажность,
	|	КВП_Здания.Этажей,
	|	КВП_Подъезды.Ссылка
	|ИЗ
	|	Справочник.КВП_Подъезды КАК КВП_Подъезды
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КВП_Здания КАК КВП_Здания
	|		ПО КВП_Подъезды.Владелец = КВП_Здания.Ссылка
	|ГДЕ
	|	КВП_Подъезды.Этажность <> 0
	|	И КВП_Здания.Этажей = КВП_Подъезды.Этажность";
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Подъезд = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Подъезд.Этажность = 0;
		
		ЗаписатьОбъект(Подъезд);
		
	КонецЦикла;

КонецПроцедуры // ОбновитьЭтажностьПодъездов_ПереходКНовомуМеханизмуХраненияЭтажностиПодъездов_3_0_38_5()

// Процедура перезаполняет реквизиты "Начало периода" и "Конец периода" в документе "Смета ТСЖ"
// корректными датами в зависимости от установленной периодичности составления сметы.
//
Процедура ОбновитьПериодыСоставленияСметыВДокументеСметаТСЖ_3_0_38_5()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_СметаТСЖ.Ссылка,
	|	КВП_СметаТСЖ.Периодичность,
	|	КВП_СметаТСЖ.КонецПериода,
	|	КВП_СметаТСЖ.НачалоПериода
	|ИЗ
	|	Документ.КВП_СметаТСЖ КАК КВП_СметаТСЖ";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ДокументСметы ИЗ Результат Цикл
		ДокОбъект = ДокументСметы.Ссылка.ПолучитьОбъект();
		Если НЕ ДокОбъект = Неопределено Тогда
			Если ДокументСметы.Периодичность = Перечисления.Периодичность.Месяц Тогда
				НоваяДатаКонца  = КонецМесяца(ДокументСметы.КонецПериода);
				НоваяДатаНачала = НачалоМесяца(ДокументСметы.НачалоПериода);
			ИначеЕсли ДокументСметы.Периодичность = Перечисления.Периодичность.Квартал Тогда
				НоваяДатаКонца  = КонецКвартала(ДокументСметы.КонецПериода);
				НоваяДатаНачала = НачалоКвартала(ДокументСметы.НачалоПериода);
			ИначеЕсли ДокументСметы.Периодичность = Перечисления.Периодичность.Полугодие Тогда
				МесяцКонецПериода  = Месяц(ДокументСметы.КонецПериода);
				МесяцНачалоПериода = Месяц(ДокументСметы.НачалоПериода);
				НоваяДатаКонца  = КонецМесяца(?(НЕ МесяцКонецПериода > 6, ДобавитьМесяц(ДокументСметы.КонецПериода, 6 - МесяцКонецПериода), ДобавитьМесяц(ДокументСметы.КонецПериода, 12 - МесяцКонецПериода)));
				НоваяДатаНачала = НачалоМесяца(?(НЕ МесяцНачалоПериода > 6, ДобавитьМесяц(ДокументСметы.НачалоПериода, 1 - МесяцНачалоПериода), ДобавитьМесяц(ДокументСметы.НачалоПериода, 7 - МесяцНачалоПериода)));
			ИначеЕсли ДокументСметы.Периодичность = Перечисления.Периодичность.Год Тогда
				НоваяДатаКонца  = КонецГода(ДокументСметы.КонецПериода);
				НоваяДатаНачала = НачалоГода(ДокументСметы.НачалоПериода);
			Иначе
				НоваяДатаКонца  = КонецГода(ДокОбъект.Дата);
				НоваяДатаНачала = НачалоГода(ДокОбъект.Дата);
			КонецЕсли;
			
			ДокОбъект.КонецПериода  = НоваяДатаКонца;
			ДокОбъект.НачалоПериода = НоваяДатаНачала;
			
			ЗаписатьОбъект(ДокОбъект);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОбновитьПериодыСоставленияСметыВДокументеСметаТСЖ_3_0_38_5()

// Процедура производит заполнение реквизита "КонтактноеЛицоЛицевогоСчета" заявок АДС на основе
// данных справочников "Жильцы" и "Контактные лица".
//
Процедура ЗаполнитьКонтактноеЛицоЛицевогоСчетаВДокументахЗаявокАДС_3_0_39_1()
	
	// Выбираем документы с видом операции "Выполнение работ по лицевому счету" с незаполненным реквизитом "КонтактноеЛицоЛицевогоСчета".
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_ЗаявкаНаВыполнениеРабот.Ссылка КАК ЗаявкаАДС,
	|	КВП_ЗаявкаНаВыполнениеРабот.ЛицевойСчет,
	|	КВП_ЗаявкаНаВыполнениеРабот.Удалить_КонтактноеЛицо
	|ПОМЕСТИТЬ втЗаявки
	|ИЗ
	|	Документ.КВП_ЗаявкаНаВыполнениеРабот КАК КВП_ЗаявкаНаВыполнениеРабот
	|ГДЕ
	|	НЕ КВП_ЗаявкаНаВыполнениеРабот.ПометкаУдаления
	|	И КВП_ЗаявкаНаВыполнениеРабот.ВидОперации = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийЗаявокНаВыполнениеРабот.ВыполнениеРаботПоЛицевомуСчету)
	|	И НЕ КВП_ЗаявкаНаВыполнениеРабот.Удалить_КонтактноеЛицо = """"
	|	И НЕ КВП_ЗаявкаНаВыполнениеРабот.ЛицевойСчет = ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)
	|	И (КВП_ЗаявкаНаВыполнениеРабот.КонтактноеЛицоЛицевогоСчета = НЕОПРЕДЕЛЕНО
	|			ИЛИ КВП_ЗаявкаНаВыполнениеРабот.КонтактноеЛицоЛицевогоСчета = ЗНАЧЕНИЕ(Справочник.УПЖКХ_Жильцы.ПустаяСсылка)
	|			ИЛИ КВП_ЗаявкаНаВыполнениеРабот.КонтактноеЛицоЛицевогоСчета = ЗНАЧЕНИЕ(Справочник.КонтактныеЛица.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗаявки.ЗаявкаАДС,
	|	втЗаявки.ЛицевойСчет,
	|	втЗаявки.Удалить_КонтактноеЛицо КАК КонтактноеЛицоСтрокой,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец КАК ОтветственныйВладелецЛС
	|ПОМЕСТИТЬ втОтвСобственники
	|ИЗ
	|	втЗаявки КАК втЗаявки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(
	|				,
	|				ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						втЗаявки.ЛицевойСчет
	|					ИЗ
	|						втЗаявки КАК втЗаявки)) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
	|		ПО втЗаявки.ЛицевойСчет = УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОтвСобственники.ЗаявкаАДС,
	|	ЕСТЬNULL(КонтактныеЛица.Ссылка, УПЖКХ_Жильцы.Ссылка) КАК КонтактноеЛицоДляЗаполнения
	|ИЗ
	|	втОтвСобственники КАК втОтвСобственники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
	|		ПО (ВЫБОР
	|				КОГДА втОтвСобственники.ОтветственныйВладелецЛС ССЫЛКА Справочник.УПЖКХ_Жильцы
	|					ТОГДА втОтвСобственники.ЛицевойСчет = УПЖКХ_Жильцы.Владелец
	|							И втОтвСобственники.КонтактноеЛицоСтрокой = УПЖКХ_Жильцы.Наименование
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КонтактныеЛица КАК КонтактныеЛица
	|		ПО (ВЫБОР
	|				КОГДА втОтвСобственники.ОтветственныйВладелецЛС ССЫЛКА Справочник.Контрагенты
	|					ТОГДА втОтвСобственники.ОтветственныйВладелецЛС = КонтактныеЛица.ОбъектВладелец
	|							И втОтвСобственники.КонтактноеЛицоСтрокой = КонтактныеЛица.Наименование
	|			КОНЕЦ)";
	
	ВыборкаРезультата = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаРезультата.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаРезультата.КонтактноеЛицоДляЗаполнения) Тогда
			ДокОбъект = ВыборкаРезультата.ЗаявкаАДС.ПолучитьОбъект();
			ДокОбъект.КонтактноеЛицоЛицевогоСчета = ВыборкаРезультата.КонтактноеЛицоДляЗаполнения;
			ЗаписатьОбъект(ДокОбъект, РежимЗаписиДокумента.Запись);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьКонтактноеЛицоЛицевогоСчетаВДокументахЗаявокАДС_3_0_39_1()

// Процедура создает записи в новом регистре сведений "Сведения о рассрочке"
// для каждого проведенного документа "Заявление на рассрочку".
//
Процедура ЗаполнитьНовыйРегистрСведенийОРассрочкеДаннымиПоДокументамЗаявленияНаРассрочку_3_0_39_1()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_СведенияОРассрочке.Регистратор,
	|	УПЖКХ_СведенияОРассрочке.ЛицевойСчет,
	|	УПЖКХ_СведенияОРассрочке.Услуга,
	|	УПЖКХ_СведенияОРассрочке.Договор,
	|	УПЖКХ_СведенияОРассрочке.ВидРассрочки,
	|	УПЖКХ_СведенияОРассрочке.ВидПлатежей,
	|	УПЖКХ_СведенияОРассрочке.НачислениеВМесяц,
	|	УПЖКХ_СведенияОРассрочке.СуммаРассрочки
	|ПОМЕСТИТЬ втСведенияОРассрочках
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОРассрочке КАК УПЖКХ_СведенияОРассрочке
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_СведенияОРассрочке.ЛицевойСчет,
	|	УПЖКХ_СведенияОРассрочке.Услуга,
	|	УПЖКХ_СведенияОРассрочке.ВидПлатежей,
	|	УПЖКХ_СведенияОРассрочке.Договор,
	|	УПЖКХ_СведенияОРассрочке.Регистратор,
	|	УПЖКХ_СведенияОРассрочке.ВидРассрочки,
	|	УПЖКХ_СведенияОРассрочке.НачислениеВМесяц,
	|	УПЖКХ_СведенияОРассрочке.СуммаРассрочки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_НачисленияПоРассрочке.Регистратор КАК ЗаявлениеНаРассрочку,
	|	УПЖКХ_НачисленияПоРассрочке.ЛицевойСчет,
	|	УПЖКХ_НачисленияПоРассрочке.Услуга,
	|	УПЖКХ_НачисленияПоРассрочке.МесяцРассрочки,
	|	УПЖКХ_НачисленияПоРассрочке.Удалить_Договор КАК Договор,
	|	УПЖКХ_НачисленияПоРассрочке.Удалить_ВидРассрочки КАК ВидРассрочки,
	|	УПЖКХ_НачисленияПоРассрочке.Удалить_ВидПлатежей КАК ВидПлатежей,
	|	УПЖКХ_НачисленияПоРассрочке.Удалить_ПроцентнаяСтавка КАК ПроцентнаяСтавка,
	|	УПЖКХ_НачисленияПоРассрочке.Удалить_НачислениеВМесяц КАК НачислениеВМесяц,
	|	УПЖКХ_НачисленияПоРассрочке.Удалить_СуммаРассрочки КАК СуммаРассрочки
	|ИЗ
	|	РегистрНакопления.УПЖКХ_НачисленияПоРассрочке КАК УПЖКХ_НачисленияПоРассрочке
	|ГДЕ
	|	УПЖКХ_НачисленияПоРассрочке.Регистратор ССЫЛКА Документ.УПЖКХ_ЗаявлениеНаРассрочку
	|	И НЕ (УПЖКХ_НачисленияПоРассрочке.Регистратор, УПЖКХ_НачисленияПоРассрочке.ЛицевойСчет, УПЖКХ_НачисленияПоРассрочке.Услуга, УПЖКХ_НачисленияПоРассрочке.Удалить_Договор, УПЖКХ_НачисленияПоРассрочке.Удалить_ВидРассрочки, УПЖКХ_НачисленияПоРассрочке.Удалить_ВидПлатежей, УПЖКХ_НачисленияПоРассрочке.Удалить_НачислениеВМесяц, УПЖКХ_НачисленияПоРассрочке.Удалить_СуммаРассрочки) В
	|				(ВЫБРАТЬ
	|					втСведенияОРассрочках.Регистратор,
	|					втСведенияОРассрочках.ЛицевойСчет,
	|					втСведенияОРассрочках.Услуга,
	|					втСведенияОРассрочках.Договор КАК Удалить_Договор,
	|					втСведенияОРассрочках.ВидРассрочки КАК Удалить_ВидРассрочки,
	|					втСведенияОРассрочках.ВидПлатежей КАК Удалить_ВидПлатежей,
	|					втСведенияОРассрочках.НачислениеВМесяц КАК Удалить_НачислениеВМесяц,
	|					втСведенияОРассрочках.СуммаРассрочки КАК Удалить_СуммаРассрочки
	|				ИЗ
	|					втСведенияОРассрочках КАК втСведенияОРассрочках)
	|	И НЕ УПЖКХ_НачисленияПоРассрочке.Удалить_Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	И НЕ УПЖКХ_НачисленияПоРассрочке.Удалить_ВидРассрочки = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыРассрочки.ПустаяСсылка)
	|	И НЕ УПЖКХ_НачисленияПоРассрочке.Удалить_ВидПлатежей = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыПлатежейРассрочки.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияПоРассрочке.Услуга,
	|	УПЖКХ_НачисленияПоРассрочке.ЛицевойСчет,
	|	УПЖКХ_НачисленияПоРассрочке.Удалить_ВидРассрочки,
	|	УПЖКХ_НачисленияПоРассрочке.Удалить_ВидПлатежей,
	|	УПЖКХ_НачисленияПоРассрочке.Удалить_Договор,
	|	УПЖКХ_НачисленияПоРассрочке.Регистратор,
	|	УПЖКХ_НачисленияПоРассрочке.Удалить_ПроцентнаяСтавка,
	|	УПЖКХ_НачисленияПоРассрочке.Удалить_НачислениеВМесяц,
	|	УПЖКХ_НачисленияПоРассрочке.Удалить_СуммаРассрочки,
	|	УПЖКХ_НачисленияПоРассрочке.МесяцРассрочки
	|ИТОГИ ПО
	|	ЗаявлениеНаРассрочку";
	
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	НаборЗаписейРС = РегистрыСведений.УПЖКХ_СведенияОРассрочке.СоздатьНаборЗаписей();
	
	Пока ВыборкаРегистраторов.Следующий() Цикл
		НаборЗаписейРС.Отбор.Регистратор.Установить(ВыборкаРегистраторов.ЗаявлениеНаРассрочку);
		НаборЗаписейРС.Прочитать();
		ТаблицаНабораЗаписей = НаборЗаписейРС.Выгрузить();
		
		ВыборкаЗаписей = ВыборкаРегистраторов.Выбрать();
		Пока ВыборкаЗаписей.Следующий() Цикл
			НоваяЗаписьНабора = ТаблицаНабораЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗаписьНабора, ВыборкаЗаписей);
			НоваяЗаписьНабора.Период = НачалоМесяца(ВыборкаЗаписей.МесяцРассрочки);
		КонецЦикла;
		
		ТаблицаНабораЗаписей.ЗаполнитьЗначения(Истина, "Активность");
		НаборЗаписейРС.Загрузить(ТаблицаНабораЗаписей);
		ЗаписатьОбъект(НаборЗаписейРС);
		
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_НачисленияПоРассрочке.Регистратор,
	|	УПЖКХ_НачисленияПоРассрочке.Организация,
	|	УПЖКХ_НачисленияПоРассрочке.ЛицевойСчет,
	|	УПЖКХ_НачисленияПоРассрочке.Услуга,
	|	УПЖКХ_НачисленияПоРассрочке.МесяцРассрочки
	|ПОМЕСТИТЬ втНачисленияПоРассрочке
	|ИЗ
	|	РегистрНакопления.УПЖКХ_НачисленияПоРассрочке КАК УПЖКХ_НачисленияПоРассрочке
	|ГДЕ
	|	УПЖКХ_НачисленияПоРассрочке.ЗаявлениеНаРассрочку = ЗНАЧЕНИЕ(Документ.УПЖКХ_ЗаявлениеНаРассрочку.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияПоРассрочке.Услуга,
	|	УПЖКХ_НачисленияПоРассрочке.ЛицевойСчет,
	|	УПЖКХ_НачисленияПоРассрочке.Регистратор,
	|	УПЖКХ_НачисленияПоРассрочке.Организация,
	|	УПЖКХ_НачисленияПоРассрочке.МесяцРассрочки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачисленияПоРассрочке.Регистратор КАК Регистратор,
	|	втНачисленияПоРассрочке.Организация,
	|	втНачисленияПоРассрочке.ЛицевойСчет,
	|	втНачисленияПоРассрочке.Услуга,
	|	втНачисленияПоРассрочке.МесяцРассрочки
	|ПОМЕСТИТЬ втЗаявленияНаРассрочку
	|ИЗ
	|	втНачисленияПоРассрочке КАК втНачисленияПоРассрочке
	|ГДЕ
	|	втНачисленияПоРассрочке.Регистратор ССЫЛКА Документ.УПЖКХ_ЗаявлениеНаРассрочку
	|
	|СГРУППИРОВАТЬ ПО
	|	втНачисленияПоРассрочке.Регистратор,
	|	втНачисленияПоРассрочке.Услуга,
	|	втНачисленияПоРассрочке.МесяцРассрочки,
	|	втНачисленияПоРассрочке.ЛицевойСчет,
	|	втНачисленияПоРассрочке.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачисленияПоРассрочке.Регистратор КАК Регистратор,
	|	ЕСТЬNULL(втЗаявленияНаРассрочку.Регистратор, ЗНАЧЕНИЕ(Документ.УПЖКХ_ЗаявлениеНаРассрочку.ПустаяСсылка)) КАК ЗаявлениеНаРассрочку,
	|	втНачисленияПоРассрочке.Организация,
	|	втНачисленияПоРассрочке.ЛицевойСчет,
	|	втНачисленияПоРассрочке.Услуга,
	|	втНачисленияПоРассрочке.МесяцРассрочки
	|ИЗ
	|	втНачисленияПоРассрочке КАК втНачисленияПоРассрочке
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЗаявленияНаРассрочку КАК втЗаявленияНаРассрочку
	|		ПО втНачисленияПоРассрочке.Организация = втЗаявленияНаРассрочку.Организация
	|			И втНачисленияПоРассрочке.ЛицевойСчет = втЗаявленияНаРассрочку.ЛицевойСчет
	|			И втНачисленияПоРассрочке.Услуга = втЗаявленияНаРассрочку.Услуга
	|			И втНачисленияПоРассрочке.МесяцРассрочки = втЗаявленияНаРассрочку.МесяцРассрочки
	|
	|СГРУППИРОВАТЬ ПО
	|	втНачисленияПоРассрочке.Регистратор,
	|	ЕСТЬNULL(втЗаявленияНаРассрочку.Регистратор, ЗНАЧЕНИЕ(Документ.УПЖКХ_ЗаявлениеНаРассрочку.ПустаяСсылка)),
	|	втНачисленияПоРассрочке.Организация,
	|	втНачисленияПоРассрочке.ЛицевойСчет,
	|	втНачисленияПоРассрочке.Услуга,
	|	втНачисленияПоРассрочке.МесяцРассрочки
	|ИТОГИ ПО
	|	Регистратор";
	
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаРегистраторов.Следующий() Цикл
		НаборЗаписейРН = РегистрыНакопления.УПЖКХ_НачисленияПоРассрочке.СоздатьНаборЗаписей();
		НаборЗаписейРН.Отбор.Регистратор.Установить(ВыборкаРегистраторов.Регистратор);
		НаборЗаписейРН.Прочитать();
		ТаблицаНабораЗаписей = НаборЗаписейРН.Выгрузить();
		
		ВыборкаЗаписей = ВыборкаРегистраторов.Выбрать();
		Пока ВыборкаЗаписей.Следующий() Цикл
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("Организация",    ВыборкаЗаписей.Организация);
			СтруктураОтбора.Вставить("ЛицевойСчет",    ВыборкаЗаписей.ЛицевойСчет);
			СтруктураОтбора.Вставить("Услуга",         ВыборкаЗаписей.Услуга);
			СтруктураОтбора.Вставить("МесяцРассрочки", ВыборкаЗаписей.МесяцРассрочки);
			
			НайденныеСтроки = ТаблицаНабораЗаписей.НайтиСтроки(СтруктураОтбора);
			
			Для Каждого СтрокаНабора ИЗ НайденныеСтроки Цикл
				ЗаполнитьЗначенияСвойств(СтрокаНабора, ВыборкаЗаписей, "ЗаявлениеНаРассрочку");
			КонецЦикла;
		КонецЦикла;
		
		НаборЗаписейРН.Загрузить(ТаблицаНабораЗаписей);
		ЗаписатьОбъект(НаборЗаписейРН);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьНовыйРегистрСведенийОРассрочкеДаннымиПоДокументамЗаявленияНаРассрочку_3_0_39_1()

// Процедура выполняет заполнение табличной части "ОбъектыСРаспределеннымРасходомОДН"
// в документе "Начисление услуг" по ПУ.
Процедура ЗаполнитьОбъектыСРаспределеннымРасходомОДНВДокументахНачисленияУслугПоПУ_3_0_39_6()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	УПЖКХ_СведенияОРаспределенииОДННаЛицевыеСчета.Регистратор КАК Регистратор,
	|	УПЖКХ_СведенияОРаспределенииОДННаЛицевыеСчета.ЛицевойСчет.Адрес.Владелец КАК Объект
	|ПОМЕСТИТЬ врДокументыНачисления
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОРаспределенииОДННаЛицевыеСчета КАК УПЖКХ_СведенияОРаспределенииОДННаЛицевыеСчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	врДокументыНачисления.Регистратор,
	|	КВП_НачислениеУслугОбъектыСРаспределеннымРасходомОДН.Объект
	|ПОМЕСТИТЬ врТекущиеДанныеОбОбъектах
	|ИЗ
	|	врДокументыНачисления КАК врДокументыНачисления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КВП_НачислениеУслуг.ОбъектыСРаспределеннымРасходомОДН КАК КВП_НачислениеУслугОбъектыСРаспределеннымРасходомОДН
	|		ПО врДокументыНачисления.Регистратор = КВП_НачислениеУслугОбъектыСРаспределеннымРасходомОДН.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врДокументыНачисления.Регистратор КАК Регистратор,
	|	врДокументыНачисления.Объект
	|ИЗ
	|	врДокументыНачисления КАК врДокументыНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ врТекущиеДанныеОбОбъектах КАК врТекущиеДанныеОбОбъектах
	|		ПО врДокументыНачисления.Регистратор = врТекущиеДанныеОбОбъектах.Регистратор
	|			И врДокументыНачисления.Объект = врТекущиеДанныеОбОбъектах.Объект
	|ГДЕ
	|	ЕСТЬNULL(врТекущиеДанныеОбОбъектах.Объект, ЛОЖЬ) = ЛОЖЬ
	|ИТОГИ ПО
	|	Регистратор";
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		ДокументОбъект = ВыборкаДокументов.Регистратор.ПолучитьОбъект();
		
		ВыборкаОбъектов = ВыборкаДокументов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаОбъектов.Следующий() Цикл
			
			НоваяСтрока = ДокументОбъект.ОбъектыСРаспределеннымРасходомОДН.Добавить();
			НоваяСтрока.ВидОбъекта = "Здание";
			НоваяСтрока.Объект     = ВыборкаОбъектов.Объект;
			
		КонецЦикла;
		
		ЗаписатьОбъект(ДокументОбъект, РежимЗаписиДокумента.Запись);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьОбъектыСРаспределеннымРасходомОДНВДокументахНачисленияУслугПоПУ_3_0_39_6()

// Процедура заполняет значения цен в табличных частях документов: "Планирование подомовых затрат",
// для вида операции "Прочее" документов "Распределение материалов" и "Распределение услуг сторонних организаций";
// а так же в движениях данных документов. Значение цены устанавливается для нулевых значений цены как результат
// деления суммы номенклатуры на размер количества номенклатуры.
//
Процедура ОбновитьЗначенияЦенВДокументахПодомовогоУчетаИИхДвиженияхВРНЗатратыПодомовогоУчета_3_0_39_6()
	
	// Массив для хранения ссылок на документы: "Планирование подомовых затрат", "Распределение материалов".
	
	МассивСсылокНаДокументы = Новый Массив;
	
	// Запишем цены в табличной части "Таблица затрат" документа "Планирование подомовых затрат".
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ПланированиеПодомовыхЗатратТаблицаЗатрат.Ссылка
	|ИЗ
	|	Документ.КВП_ПланированиеПодомовыхЗатрат.ТаблицаЗатрат КАК КВП_ПланированиеПодомовыхЗатратТаблицаЗатрат
	|ГДЕ
	|	КВП_ПланированиеПодомовыхЗатратТаблицаЗатрат.Количество <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ПланированиеПодомовыхЗатратТаблицаЗатрат.Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			МассивСсылокНаДокументы.Добавить(Выборка.Ссылка);
			
			ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
			Для Каждого ТекСтрока Из ДокОбъект.ТаблицаЗатрат Цикл
				Если ТекСтрока.Цена = 0 И НЕ ТекСтрока.Количество = 0 И НЕ ТекСтрока.Сумма = 0 Тогда
					ТекСтрока.Цена = ТекСтрока.Сумма / ТекСтрока.Количество;
				КонецЕсли;
			КонецЦикла;
			
			ЗаписатьОбъект(ДокОбъект, РежимЗаписиДокумента.Запись);
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Запишем цены в табличных частях "Материалы" и "ТаблицаРаспределения" документа "Распределение материалов".
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_РаспределениеМатериалов.Ссылка
	|ИЗ
	|	Документ.КВП_РаспределениеМатериалов.ТаблицаРаспределения КАК КВП_РаспределениеМатериалов
	|ГДЕ
	|	КВП_РаспределениеМатериалов.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийРаспределениеМатериалов.РаспределениеПрочее)
	|	И КВП_РаспределениеМатериалов.Количество <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_РаспределениеМатериалов.Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			ДокументСсылка = Выборка.Ссылка;
			
			МассивСсылокНаДокументы.Добавить(ДокументСсылка);
			
			ДокОбъект = ДокументСсылка.ПолучитьОбъект();
			Для Каждого ТекСтрока Из ДокОбъект.Материалы Цикл
				Если ТекСтрока.Цена = 0 И НЕ ТекСтрока.Количество = 0 И НЕ ТекСтрока.Сумма = 0 Тогда
					ТекСтрока.Цена = ТекСтрока.Сумма / ТекСтрока.Количество;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТекСтрока Из ДокОбъект.ТаблицаРаспределения Цикл
				Если ТекСтрока.Цена = 0 И НЕ ТекСтрока.Количество = 0 И НЕ ТекСтрока.Сумма = 0 Тогда
					ТекСтрока.Цена = ТекСтрока.Сумма / ТекСтрока.Количество;
				КонецЕсли;
			КонецЦикла;
			
			ЗаписатьОбъект(ДокОбъект, РежимЗаписиДокумента.Запись);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьЗначенияЦенВДокументахПодомовогоУчетаИИхДвиженияхВРНЗатратыПодомовогоУчета_3_0_39_6()

// Процедура заполняет настройки способов распределения показаний коллективных приборов учетов,
// установленных на помещения/лицевые счета и коллективных приборов учета, установленных на подъезды/здания.
//
Процедура ОбновитьНастройку_СпособРаспределенияПоказанийКоллективногоПрибораУчета_3_0_39_6()
	
	СпособРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета = Неопределено;
	СпособРаспределенияПоказанийСчетчикаНаЗданияПодъезды        = Неопределено;
	ВидПлощадиДляРаспределенияПоказанийСчетчикаНаЗданияПодъезды = Неопределено;
	
	// Считываем текущие значения настроек.
	ЗначениеНастройки = Константы.УПЖКХ_СпособРаспределенияПоказанийКоллективногоПрибораУчета.Получить();
	Если ЗначениеЗаполнено(ЗначениеНастройки) Тогда
		СтруктураНастроек = ЗначениеНастройки.Получить();
		Если ТипЗнч(СтруктураНастроек) = Тип("Структура")Тогда
			СтруктураНастроек.Свойство("СпособРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета", СпособРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета);
			СтруктураНастроек.Свойство("СпособРаспределенияПоказанийСчетчикаНаЗданияПодъезды",        СпособРаспределенияПоказанийСчетчикаНаЗданияПодъезды);
			СтруктураНастроек.Свойство("ВидПлощадиДляРаспределенияПоказанийСчетчикаНаЗданияПодъезды", ВидПлощадиДляРаспределенияПоказанийСчетчикаНаЗданияПодъезды);
		КонецЕсли;
	КонецЕсли;
	
	// Проверим все ключи структуры на наличие значений. Если хотя бы один ключ не заполнен, то константу нужно записать.
	НеобходимоОбновитьНастройку = Ложь;
	
	// Заполним значение способа распределения показаний счетчика на помещения/лицевые счета значением старой константы, если оно есть.
	Если НЕ ЗначениеЗаполнено(СпособРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета) Тогда
		
		ЗначениеНастройкиВСтаройКонстанте = Константы.Удалить_УПЖКХ_СпособРаспределенияПоказанийСчетчика.Получить();
		
		Если ЗначениеЗаполнено(ЗначениеНастройкиВСтаройКонстанте) Тогда
			СпособРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета = ЗначениеНастройкиВСтаройКонстанте;
		Иначе
			СпособРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета = Перечисления.УПЖКХ_СпособыРаспределенияПоказанийКоллективногоСчетчика.ПропорциональноДолямЛицевыхСчетов;
		КонецЕсли;
		
		НеобходимоОбновитьНастройку = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СпособРаспределенияПоказанийСчетчикаНаЗданияПодъезды) Тогда
		СпособРаспределенияПоказанийСчетчикаНаЗданияПодъезды = Перечисления.УПЖКХ_СпособыРаспределенияПоказанийКоллективногоСчетчика.Поровну;
		НеобходимоОбновитьНастройку = Истина;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВидПлощадиДляРаспределенияПоказанийСчетчикаНаЗданияПодъезды) Тогда
		ВидПлощадиДляРаспределенияПоказанийСчетчикаНаЗданияПодъезды = Справочники.УПЖКХ_ВидыПлощадей.ОбщаяПлощадь;
		НеобходимоОбновитьНастройку = Истина;
	КонецЕсли;
	
	// Запищем значение структуры настроек в константу.
	Если НеобходимоОбновитьНастройку Тогда
		
		СтруктураСпособовРаспределенияНаЗданияПодъезды = Новый Структура;
		СтруктураСпособовРаспределенияНаЗданияПодъезды.Вставить("СпособРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета", СпособРаспределенияПоказанийСчетчикаНаПомещенияЛицевыеСчета);
		СтруктураСпособовРаспределенияНаЗданияПодъезды.Вставить("СпособРаспределенияПоказанийСчетчикаНаЗданияПодъезды",        СпособРаспределенияПоказанийСчетчикаНаЗданияПодъезды);
		СтруктураСпособовРаспределенияНаЗданияПодъезды.Вставить("ВидПлощадиДляРаспределенияПоказанийСчетчикаНаЗданияПодъезды", ВидПлощадиДляРаспределенияПоказанийСчетчикаНаЗданияПодъезды);
		
		Константы.УПЖКХ_СпособРаспределенияПоказанийКоллективногоПрибораУчета.Установить(Новый ХранилищеЗначения(СтруктураСпособовРаспределенияНаЗданияПодъезды));
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьНастройку_СпособРаспределенияПоказанийКоллективногоПрибораУчета_3_0_39_6()

// Процедура заполняет новую колонку "Использовать формулу" табличной части "Тарифы",
// заменяет на вид тарифа "Общий" или удаляет строки с видом тарифа "Рассчитываемый"
// и кооректирует записи в РС "Тарифы" в связи с изменениями в ТЧ документа.
//
Процедура ОбновитьВидыТарифовВДокументахУстановкаТарифовИИхДвиженияВРСТарифы_3_0_39_6()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_УстановкаТарифовСписокУслуг.Ссылка
	|ИЗ
	|	Документ.КВП_УстановкаТарифов.СписокУслуг КАК КВП_УстановкаТарифовСписокУслуг
	|ГДЕ
	|	КВП_УстановкаТарифовСписокУслуг.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийУстановкиТарифов.УстановкаТарифа)
	|	И (КВП_УстановкаТарифовСписокУслуг.Тариф ССЫЛКА Справочник.КВП_РассчитываемыеТарифы
	|			ИЛИ КВП_УстановкаТарифовСписокУслуг.ВидТарифа = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыТарифов.Удалить_Рассчитываемый))
	|	И НЕ КВП_УстановкаТарифовСписокУслуг.ИспользоватьФормулу
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_УстановкаТарифовСписокУслуг.Ссылка";
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	СписокУслуг = Новый СписокЗначений;
	
	Для Каждого СтрокаДокумента ИЗ Результат Цикл
		ДокОбъект = СтрокаДокумента.Ссылка.ПолучитьОбъект();
		Если НЕ ДокОбъект = Неопределено Тогда
			
			МассивУдаляемыхСтрок   = Новый Массив;
			МассивУдаляемыхСтрокНЗ = Новый Массив;
			
			НеобходимоУдалитьСтрокиТЧ = Ложь;
			
			Если ДокОбъект.Проведен Тогда
				НЗРегистраТарифы = РегистрыСведений.КВП_Тарифы.СоздатьНаборЗаписей();
				НЗРегистраТарифы.Отбор.Регистратор.Установить(СтрокаДокумента.Ссылка);
				НЗРегистраТарифы.Прочитать();
				ТаблицаНабораЗаписей = НЗРегистраТарифы.Выгрузить();
				
				СтрокаСОбщимТарифом = ТаблицаНабораЗаписей.Найти(Перечисления.КВП_ВидыТарифов.Общий, "ВидТарифа");
				
				Для Каждого СтрокаЗаписи ИЗ ТаблицаНабораЗаписей Цикл
					Если СтрокаЗаписи.ВидТарифа = Перечисления.КВП_ВидыТарифов.Удалить_Рассчитываемый Тогда
						Если НЕ СтрокаСОбщимТарифом = Неопределено Тогда
							МассивУдаляемыхСтрокНЗ.Добавить(СтрокаЗаписи);
						Иначе
							СтрокаЗаписи.ВидТарифа = Перечисления.КВП_ВидыТарифов.Общий;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Если МассивУдаляемыхСтрокНЗ.Количество() > 0 Тогда
					Для Каждого СтрокаУдаления ИЗ МассивУдаляемыхСтрокНЗ Цикл
						ТаблицаНабораЗаписей.Удалить(СтрокаУдаления);
					КонецЦикла;
				КонецЕсли;
				
				НЗРегистраТарифы.Загрузить(ТаблицаНабораЗаписей);
				
				Если НЕ ЗаписатьОбъект(НЗРегистраТарифы) Тогда
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	ТаблицаНабораЗаписей.Период,
					|	ТаблицаНабораЗаписей.Регистратор,
					|	ТаблицаНабораЗаписей.НомерСтроки,
					|	ТаблицаНабораЗаписей.Активность,
					|	ТаблицаНабораЗаписей.Услуга,
					|	ТаблицаНабораЗаписей.ВидТарифа,
					|	ТаблицаНабораЗаписей.Организация,
					|	ТаблицаНабораЗаписей.Объект,
					|	ТаблицаНабораЗаписей.Тариф,
					|	ТаблицаНабораЗаписей.Действует
					|ПОМЕСТИТЬ втТаблицаНЗ
					|ИЗ
					|	&ТаблицаНабораЗаписей КАК ТаблицаНабораЗаписей
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	КВП_ТарифыСрезПоследних.Услуга,
					|	КВП_ТарифыСрезПоследних.ВидТарифа,
					|	КВП_ТарифыСрезПоследних.Объект,
					|	КВП_ТарифыСрезПоследних.Период,
					|	КВП_ТарифыСрезПоследних.Организация
					|ПОМЕСТИТЬ втПовторныеЗаписи
					|ИЗ
					|	РегистрСведений.КВП_Тарифы.СрезПоследних(
					|			&Дата,
					|			(Объект, Услуга, ВидТарифа, Период, Организация) В
					|					(ВЫБРАТЬ
					|						втТаблицаНЗ.Объект,
					|						втТаблицаНЗ.Услуга,
					|						втТаблицаНЗ.ВидТарифа,
					|						втТаблицаНЗ.Период,
					|						втТаблицаНЗ.Организация
					|					ИЗ
					|						втТаблицаНЗ КАК втТаблицаНЗ)
					|				И НЕ Регистратор = &Регистратор
					|				И Действует) КАК КВП_ТарифыСрезПоследних
					|
					|СГРУППИРОВАТЬ ПО
					|	КВП_ТарифыСрезПоследних.ВидТарифа,
					|	КВП_ТарифыСрезПоследних.Услуга,
					|	КВП_ТарифыСрезПоследних.Период,
					|	КВП_ТарифыСрезПоследних.Объект,
					|	КВП_ТарифыСрезПоследних.Организация
					|;
					|
					|////////////////////////////////////////////////////////////////////////////////
					|ВЫБРАТЬ
					|	втТаблицаНЗ.Период,
					|	втТаблицаНЗ.Регистратор,
					|	втТаблицаНЗ.НомерСтроки,
					|	втТаблицаНЗ.Активность,
					|	втТаблицаНЗ.Услуга,
					|	втТаблицаНЗ.ВидТарифа,
					|	втТаблицаНЗ.Организация,
					|	втТаблицаНЗ.Объект,
					|	втТаблицаНЗ.Тариф,
					|	втТаблицаНЗ.Действует
					|ИЗ
					|	втТаблицаНЗ КАК втТаблицаНЗ
					|ГДЕ
					|	НЕ (втТаблицаНЗ.Объект, втТаблицаНЗ.Услуга, втТаблицаНЗ.ВидТарифа, втТаблицаНЗ.Период, втТаблицаНЗ.Организация) В
					|				(ВЫБРАТЬ
					|					втПовторныеЗаписи.Объект,
					|					втПовторныеЗаписи.Услуга,
					|					втПовторныеЗаписи.ВидТарифа,
					|					втПовторныеЗаписи.Период,
					|					втПовторныеЗаписи.Организация
					|				ИЗ
					|					втПовторныеЗаписи КАК втПовторныеЗаписи)";
					
					Запрос.УстановитьПараметр("ТаблицаНабораЗаписей", ТаблицаНабораЗаписей);
					Запрос.УстановитьПараметр("Дата",                 НачалоДня(СтрокаДокумента.Ссылка.Дата));
					Запрос.УстановитьПараметр("Регистратор",          СтрокаДокумента.Ссылка);
					
					Результат = Запрос.Выполнить().Выгрузить();
					
					НЗРегистраТарифы.Загрузить(Результат);
					ЗаписатьОбъект(НЗРегистраТарифы);
					
					Результат.Свернуть("ВидТарифа");
					НеобходимоУдалитьСтрокиТЧ = Истина;
				КонецЕсли;
			КонецЕсли;
			
			СписокУслуг.Добавить(ДокОбъект.Услуга);
			
			ТЧСписокУслуг = ДокОбъект.СписокУслуг;
			СтрокаСОбщимТарифом = ТЧСписокУслуг.Найти(Перечисления.КВП_ВидыТарифов.Общий, "ВидТарифа");
			Для Каждого СтрокаСписка ИЗ ТЧСписокУслуг Цикл
				Если ТипЗнч(СтрокаСписка.Тариф) = Тип("СправочникСсылка.КВП_РассчитываемыеТарифы") Тогда
					СтрокаСписка.ИспользоватьФормулу = ИСТИНА;
				КонецЕсли;
				Если СтрокаСписка.ВидТарифа = Перечисления.КВП_ВидыТарифов.Удалить_Рассчитываемый Тогда
					Если НЕ СтрокаСОбщимТарифом = Неопределено Тогда
						МассивУдаляемыхСтрок.Добавить(СтрокаСписка);
					Иначе
						СтрокаСписка.ВидТарифа = Перечисления.КВП_ВидыТарифов.Общий;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если НеобходимоУдалитьСтрокиТЧ Тогда
				Для Каждого СтрокаТЧ ИЗ ДокОбъект.СписокУслуг Цикл
					Если НЕ СтрокаТЧ.ВидТарифа = Перечисления.КВП_ВидыТарифов.Удалить_Рассчитываемый
						И Результат.Найти(СтрокаТЧ.ВидТарифа) = Неопределено Тогда
						МассивУдаляемыхСтрок.Добавить(СтрокаТЧ);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если МассивУдаляемыхСтрок.Количество() > 0 Тогда
				Для Каждого СтрокаУдаления ИЗ МассивУдаляемыхСтрок Цикл
					ДокОбъект.СписокУслуг.Удалить(СтрокаУдаления);
				КонецЦикла;
			КонецЕсли;
			
			ЗаписатьОбъект(ДокОбъект);
			
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_УстановкаТарифов.Ссылка
	|ИЗ
	|	Документ.КВП_УстановкаТарифов КАК КВП_УстановкаТарифов
	|ГДЕ
	|	КВП_УстановкаТарифов.ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыОперацийУстановкиТарифов.ОтменаТарифа)
	|	И КВП_УстановкаТарифов.Услуга В(&СписокУслуг)
	|	И КВП_УстановкаТарифов.Проведен";
	
	Запрос.УстановитьПараметр("СписокУслуг", СписокУслуг);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрокаОтмены ИЗ Результат Цикл
		ДокОбъект = СтрокаОтмены.Ссылка.ПолучитьОбъект();
		Если НЕ ДокОбъект = Неопределено Тогда
			ЗаписатьОбъект(ДокОбъект, РежимЗаписиДокумента.Проведение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОбновитьВидыТарифовВДокументахУстановкаТарифовИИхДвиженияВРСТарифы_3_0_39_6()

// Проведура переносит движения по начислению рассрочки в новый документ "Начисление услуг"
// с видом операции "Начисление рассрочки", при этом:
// 1. Движения по начислению рассрочки переносятся в новый документ.
// 2. В новом документе заполняются строки табличной части.
//
Процедура КонвертироватьНачисленияПоРассрочкеВДокументНачисленияУслугПоРассрочке_3_0_39_6()
	
	/////////////////////////////////////////////////////////////////////////////////
	// Описание алгоритма обработки начислений по рассрочке.
	// 1. В процессе обработки выполняется поиск документов "Начисление услуг",
	// в которых формированы движения по начислению рассрочки.
	// 2. Все полученные документы начисления услуг в п.2 группируются по месяца,
	// и производится формирование одного документа начисления рассрочки на каждый
	// месяц, а именно документ "Начисление услуг" с видом операции "Начисление
	// рассрочки".
	// 3. Движения документов п.1. по регистрам накопления, которые относятся
	// к начислению рассрочки, переподчиняются документам-регистратора,
	// формируемым в п.2. При этом из исходных документов эти движения исключаются.
	// 4. В каждом новом документе начисления рассрочки, описанном в п.2 заполняется
	// табличная часть "Начисления по рассрочке" по данным движений из исходных
	// документов.
	// 5. В случае, если не было ошибок перемещения движений и записи нового документа
	// транзакция фиксируется. В противном случае транзакция отменяется.
	
	// Определим служебный запрос для получения остатков рассрочки.
	ЗапросПолученияОстатковРассрочки = Новый Запрос;
	ЗапросПолученияОстатковРассрочки.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	врНачисленияПоРассрочке.НомерСтроки,
	|	врНачисленияПоРассрочке.ЛицевойСчет,
	|	врНачисленияПоРассрочке.Услуга,
	|	врНачисленияПоРассрочке.ЗаявлениеНаРассрочку,
	|	врНачисленияПоРассрочке.МесяцРассрочки
	|ПОМЕСТИТЬ врНачисленияПоРассрочке
	|ИЗ
	|	&врНачисленияПоРассрочке КАК врНачисленияПоРассрочке
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияПоРассрочкеОстатки.ЛицевойСчет,
	|	УПЖКХ_НачисленияПоРассрочкеОстатки.Услуга,
	|	УПЖКХ_НачисленияПоРассрочкеОстатки.МесяцРассрочки,
	|	СУММА(УПЖКХ_НачисленияПоРассрочкеОстатки.СуммаНачисленияОстаток) КАК СуммаОстатка,
	|	УПЖКХ_НачисленияПоРассрочкеОстатки.ЗаявлениеНаРассрочку
	|ПОМЕСТИТЬ втОстаткиПоРассрочке
	|ИЗ
	|	РегистрНакопления.УПЖКХ_НачисленияПоРассрочке.Остатки(
	|			&Дата,
	|			Организация = &Организация
	|				И (ЛицевойСчет, Услуга, ЗаявлениеНаРассрочку, МесяцРассрочки) В
	|					(ВЫБРАТЬ
	|						врНачисленияПоРассрочке.ЛицевойСчет,
	|						врНачисленияПоРассрочке.Услуга,
	|						врНачисленияПоРассрочке.ЗаявлениеНаРассрочку,
	|						врНачисленияПоРассрочке.МесяцРассрочки
	|					ИЗ
	|						врНачисленияПоРассрочке КАК врНачисленияПоРассрочке)) КАК УПЖКХ_НачисленияПоРассрочкеОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияПоРассрочкеОстатки.ЛицевойСчет,
	|	УПЖКХ_НачисленияПоРассрочкеОстатки.Услуга,
	|	УПЖКХ_НачисленияПоРассрочкеОстатки.МесяцРассрочки,
	|	УПЖКХ_НачисленияПоРассрочкеОстатки.ЗаявлениеНаРассрочку
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врНачисленияПоРассрочке.НомерСтроки,
	|	втОстаткиПоРассрочке.СуммаОстатка
	|ИЗ
	|	врНачисленияПоРассрочке КАК врНачисленияПоРассрочке
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОстаткиПоРассрочке КАК втОстаткиПоРассрочке
	|		ПО врНачисленияПоРассрочке.ЛицевойСчет = втОстаткиПоРассрочке.ЛицевойСчет
	|			И врНачисленияПоРассрочке.Услуга = втОстаткиПоРассрочке.Услуга
	|			И врНачисленияПоРассрочке.МесяцРассрочки = втОстаткиПоРассрочке.МесяцРассрочки
	|			И врНачисленияПоРассрочке.ЗаявлениеНаРассрочку = втОстаткиПоРассрочке.ЗаявлениеНаРассрочку";
	
	// Определим запрос получения документов, которые необходимо обработать.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_НачисленияПоРассрочке.Организация КАК Организация,
	|	УПЖКХ_НачисленияПоРассрочке.Регистратор КАК Регистратор,
	|	УПЖКХ_НачисленияПоРассрочке.СуммаНачисленияОборот
	|ПОМЕСТИТЬ врТаблицаРегистраторов
	|ИЗ
	|	РегистрНакопления.УПЖКХ_НачисленияПоРассрочке.Обороты(, , Регистратор, ВидОперации = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_Рассрочка.Начисление)) КАК УПЖКХ_НачисленияПоРассрочке
	|ГДЕ
	|	УПЖКХ_НачисленияПоРассрочке.Регистратор ССЫЛКА Документ.КВП_НачислениеУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	врТаблицаРегистраторов.Организация КАК Организация,
	|	КОНЕЦПЕРИОДА(врТаблицаРегистраторов.Регистратор.Дата, МЕСЯЦ) КАК МесяцНачисления,
	|	врТаблицаРегистраторов.Регистратор
	|ИЗ
	|	врТаблицаРегистраторов КАК врТаблицаРегистраторов
	|ГДЕ
	|	НЕ врТаблицаРегистраторов.Регистратор.ВидОперации = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийНачисленияУслуг.НачислениеРассрочки)
	|ИТОГИ ПО
	|	Организация,
	|	МесяцНачисления";
	
	ВыборкаОрганизаций = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаОрганизаций.Следующий() Цикл
		
		ВыборкаМесяцевНачисления = ВыборкаОрганизаций.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаМесяцевНачисления.Следующий() Цикл
			
			НачатьТранзакцию();
			
			Отказ = Ложь;
			
			// 1. Создаем новый документ начисления рассрочки.
			НовыйДокументНачисленияРассрочки = Документы.КВП_НачислениеУслуг.СоздатьДокумент();
			НовыйДокументНачисленияРассрочки.Проведен = Истина;
			
			// 2. Устанавливаем ссылку нового документа.
			СсылкаНовогоДокумента = Документы.КВП_НачислениеУслуг.ПолучитьСсылку();
			НовыйДокументНачисленияРассрочки.УстановитьСсылкуНового(СсылкаНовогоДокумента);
			
			// 3. Заполняем реквизиты шапки.
			НовыйДокументНачисленияРассрочки.Дата        = ВыборкаМесяцевНачисления.МесяцНачисления;
			НовыйДокументНачисленияРассрочки.Организация = ВыборкаОрганизаций.Организация;
			НовыйДокументНачисленияРассрочки.ВидОперации = Перечисления.КВП_ВидыОперацийНачисленияУслуг.НачислениеРассрочки;
			
			// 4. Формируем наборы записей для нового документа.
			НовыйНабор_УПЖКХ_Начисления = РегистрыНакопления.УПЖКХ_Начисления.СоздатьНаборЗаписей();
			НовыйНабор_УПЖКХ_Начисления.Отбор.Регистратор.Установить(СсылкаНовогоДокумента);
			
			НовыйНабор_УПЖКХ_НачисленияПоРассрочке = РегистрыНакопления.УПЖКХ_НачисленияПоРассрочке.СоздатьНаборЗаписей();
			НовыйНабор_УПЖКХ_НачисленияПоРассрочке.Отбор.Регистратор.Установить(СсылкаНовогоДокумента);
			
			НовыйНабор_КВП_ВзаиморасчетыПоЛицевымСчетам = РегистрыНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.СоздатьНаборЗаписей();
			НовыйНабор_КВП_ВзаиморасчетыПоЛицевымСчетам.Отбор.Регистратор.Установить(СсылкаНовогоДокумента);
			
			// 5. Заполняем табличную часть документа и перепривязываем движения.
			ВыборкаДокументовНачисления = ВыборкаМесяцевНачисления.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаДокументовНачисления.Следующий() Цикл
				
				/////////////////////////////////////////////////////////////
				// Регистр накопления "Начисления".
				
				НаборЗаписей_УПЖКХ_Начисления = РегистрыНакопления.УПЖКХ_Начисления.СоздатьНаборЗаписей();
				НаборЗаписей_УПЖКХ_Начисления.Отбор.Регистратор.Установить(ВыборкаДокументовНачисления.Регистратор);
				НаборЗаписей_УПЖКХ_Начисления.Прочитать();
				
				// Выгрузим таблицу движений по регистру "Начисления", она понадобится
				// при заполнении строк документа начисления.
				
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("РазделУчета", Перечисления.УПЖКХ_РазделыУчета.Рассрочка);
				ТаблицаНачисленияРассрочки = ПеренестиДвиженияВНовыйНаборСУчетомОтбора(НаборЗаписей_УПЖКХ_Начисления, НовыйНабор_УПЖКХ_Начисления, СсылкаНовогоДокумента, СтруктураОтбора, Истина);
				
				/////////////////////////////////////////////////////////////
				// Регистр накопления "Начисления по рассрочке".
				
				НаборЗаписей_УПЖКХ_НачисленияПоРассрочке = РегистрыНакопления.УПЖКХ_НачисленияПоРассрочке.СоздатьНаборЗаписей();
				НаборЗаписей_УПЖКХ_НачисленияПоРассрочке.Отбор.Регистратор.Установить(ВыборкаДокументовНачисления.Регистратор);
				НаборЗаписей_УПЖКХ_НачисленияПоРассрочке.Прочитать();
				
				СтруктураОтбора = Новый Структура;
				ТаблицаПеремещенныхЗаписей_УПЖКХ_НачисленияПоРассрочке = ПеренестиДвиженияВНовыйНаборСУчетомОтбора(НаборЗаписей_УПЖКХ_НачисленияПоРассрочке, НовыйНабор_УПЖКХ_НачисленияПоРассрочке, СсылкаНовогоДокумента, СтруктураОтбора, Истина);
				
				Для Каждого ТекЗапись Из ТаблицаПеремещенныхЗаписей_УПЖКХ_НачисленияПоРассрочке Цикл
					
					// Выполним перенос начисления рассрочки в табличную часть документа.
					СтрокаРассрочкиДокумента = НовыйДокументНачисленияРассрочки.НачисленияПоРассрочке.Добавить();
					СтрокаРассрочкиДокумента.ЛицевойСчет          = ТекЗапись.ЛицевойСчет;
					СтрокаРассрочкиДокумента.Услуга               = ТекЗапись.Услуга;
					СтрокаРассрочкиДокумента.ЗаявлениеНаРассрочку = ТекЗапись.ЗаявлениеНаРассрочку;
					СтрокаРассрочкиДокумента.МесяцРассрочки       = ТекЗапись.МесяцРассрочки;
					СтрокаРассрочкиДокумента.СуммаНачисления      = ТекЗапись.СуммаНачисления;
					
					// Определим и зафиксируем сумму комиссии и договор контрагента.
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("ЛицевойСчет",    ТекЗапись.ЛицевойСчет);
					СтруктураПоиска.Вставить("Услуга",         ТекЗапись.Услуга);
					СтруктураПоиска.Вставить("РазделУчета",    Перечисления.УПЖКХ_РазделыУчета.Рассрочка);
					СтруктураПоиска.Вставить("ВидНачисления",  Перечисления.УПЖКХ_ВидыНачислений.Комиссия);
					СтруктураПоиска.Вставить("МесяцРассрочки", ТекЗапись.МесяцРассрочки);
					
					СтрокаНачисленияКомиссии = ТаблицаНачисленияРассрочки.НайтиСтроки(СтруктураПоиска);
					Если СтрокаНачисленияКомиссии.Количество() > 0 Тогда
						СтрокаРассрочкиДокумента.Договор       = СтрокаНачисленияКомиссии[0].Договор;
						СтрокаРассрочкиДокумента.СуммаКомиссии = СтрокаНачисленияКомиссии[0].СуммаНачисления;
					КонецЕсли;
					
				КонецЦикла;
				
				/////////////////////////////////////////////////////////////
				// Регистр накопления "Взаиморасчеты по лицевым счетам".
				
				НаборЗаписей_КВП_ВзаиморасчетыПоЛицевымСчетам = РегистрыНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.СоздатьНаборЗаписей();
				НаборЗаписей_КВП_ВзаиморасчетыПоЛицевымСчетам.Отбор.Регистратор.Установить(ВыборкаДокументовНачисления.Регистратор);
				НаборЗаписей_КВП_ВзаиморасчетыПоЛицевымСчетам.Прочитать();
				
				СтруктураОтбора = Новый Структура;
				СтруктураОтбора.Вставить("ВидНачисления", Перечисления.КВП_ВидыНачисленияОстатки.Рассрочка);
				ПеренестиДвиженияВНовыйНаборСУчетомОтбора(НаборЗаписей_КВП_ВзаиморасчетыПоЛицевымСчетам, НовыйНабор_КВП_ВзаиморасчетыПоЛицевымСчетам, СсылкаНовогоДокумента, СтруктураОтбора);
				
				// Заполним сумму остатка рассрочки для строк нового документа.
				ЗапросПолученияОстатковРассрочки.УстановитьПараметр("Дата",        НовыйДокументНачисленияРассрочки.Дата);
				ЗапросПолученияОстатковРассрочки.УстановитьПараметр("Организация", НовыйДокументНачисленияРассрочки.Организация);
				
				врНачисленияПоРассрочке = НовыйДокументНачисленияРассрочки.НачисленияПоРассрочке.Выгрузить(, "НомерСтроки,ЛицевойСчет,Услуга,ЗаявлениеНаРассрочку,МесяцРассрочки");
				ЗапросПолученияОстатковРассрочки.УстановитьПараметр("врНачисленияПоРассрочке", врНачисленияПоРассрочке);
				
				ВыборкаОстатковРассрочки = ЗапросПолученияОстатковРассрочки.Выполнить().Выбрать();
				Пока ВыборкаОстатковРассрочки.Следующий() Цикл
					СтрокаРассрочки = НовыйДокументНачисленияРассрочки.НачисленияПоРассрочке.Получить(ВыборкаОстатковРассрочки.НомерСтроки - 1);
					Если Не СтрокаРассрочки = Неопределено Тогда
						СтрокаРассрочки.СуммаОстатка = ВыборкаОстатковРассрочки.СуммаОстатка;
					КонецЕсли;
				КонецЦикла;
				
				// Запишем скорректированные наборы движений.
				Если Не ЗаписатьОбъект(НаборЗаписей_УПЖКХ_Начисления)
				 Или Не ЗаписатьОбъект(НаборЗаписей_УПЖКХ_НачисленияПоРассрочке)
				 Или Не ЗаписатьОбъект(НаборЗаписей_КВП_ВзаиморасчетыПоЛицевымСчетам) Тогда
					
					Отказ = Истина;
					
				КонецЕсли;
				
			КонецЦикла; // Пока ВыборкаДокументовНачисления.Следующий() Цикл
			
			// Запишем новый документ начисления услуг.
			Если Не ЗаписатьОбъект(НовыйДокументНачисленияРассрочки, РежимЗаписиДокумента.Запись) Тогда
				Отказ = Истина;
			КонецЕсли;
			
			// Запишем новые наборы движений.
			Если Не ЗаписатьОбъект(НовыйНабор_УПЖКХ_Начисления)
			 Или Не ЗаписатьОбъект(НовыйНабор_УПЖКХ_НачисленияПоРассрочке)
			 Или Не ЗаписатьОбъект(НовыйНабор_КВП_ВзаиморасчетыПоЛицевымСчетам) Тогда
				
				Отказ = Истина;
				
			КонецЕсли;
			
			// Фиксируем или отменяем транзацию по завершению обработки документа.
			Если Отказ Тогда
				ОтменитьТранзакцию();
			Иначе
				ЗафиксироватьТранзакцию();
			КонецЕсли;
			
		КонецЦикла; // Пока ВыборкаМесяцевНачисления.Следующий() Цикл
		
	КонецЦикла; // Пока ВыборкаОрганизаций.Следующий() Цикл
	
КонецПроцедуры // КонвертироватьНачисленияПоРассрочкеВДокументНачисленияУслугПоРассрочке_3_0_39_6()

// Процедура заполняет новый реквизит "ДоговорОператораПлатежей" документа "Регистрация оплаты" с видом операции
// "Поступление из автоматизированных систем приема оплаты".
//
Процедура ЗаполнитьНовыйРеквизитДоговорОператораПлатежейДокументаРегистрацияОплаты_3_0_39_8()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_РегистрацияОплаты.Ссылка,
	|	КВП_РегистрацияОплаты.ДокументРасчетаСОператоромПлатежей,
	|	КВП_РегистрацияОплаты.Организация,
	|	КВП_РегистрацияОплаты.ОператорПлатежей
	|ПОМЕСТИТЬ врДокументыРегистрации
	|ИЗ
	|	Документ.КВП_РегистрацияОплаты КАК КВП_РегистрацияОплаты
	|ГДЕ
	|	КВП_РегистрацияОплаты.ВидОперации = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеИзАвтоматизированныхСистемПриемаОплаты)
	|	И КВП_РегистрацияОплаты.ДоговорОператораПлатежей = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	И НЕ КВП_РегистрацияОплаты.ОператорПлатежей = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врДокументыРегистрации.Ссылка,
	|	ПоступлениеНаРасчетныйСчет.ДоговорКонтрагента КАК ДоговорКонтрагентаИзДокументаРасчета
	|ИЗ
	|	врДокументыРегистрации КАК врДокументыРегистрации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
	|		ПО врДокументыРегистрации.ДокументРасчетаСОператоромПлатежей = ПоступлениеНаРасчетныйСчет.Ссылка
	|			И врДокументыРегистрации.Организация = ПоступлениеНаРасчетныйСчет.Организация
	|			И врДокументыРегистрации.ОператорПлатежей = ПоступлениеНаРасчетныйСчет.Контрагент";
	
	ВыборкаРезультата = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаРезультата.Следующий() Цикл
		
		ДокОбъект = ВыборкаРезультата.Ссылка.ПолучитьОбъект();
		
		Если ЗначениеЗаполнено(ВыборкаРезультата.ДоговорКонтрагентаИзДокументаРасчета) Тогда
			ДокОбъект.ДоговорОператораПлатежей = ВыборкаРезультата.ДоговорКонтрагентаИзДокументаРасчета;
		Иначе
			ДокОбъект.ДоговорОператораПлатежей = Документы.КВП_РегистрацияОплаты.ПолучитьДоговорОператораПлатежей(ДокОбъект.ОператорПлатежей, ДокОбъект.Организация);
		КонецЕсли;
		
		ЗаписатьОбъект(ДокОбъект, РежимЗаписиДокумента.Запись);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьНовыйРеквизитДоговорОператораПлатежейДокументаРегистрацияОплаты_3_0_39_8()

// Заполняет значения реквизитов "КоэффициентЧислитель" и "КоэффициентЗнаменатель" табличной части "Главная"
// документа "Ввод показаний счетчика" на основании помеченного на удаление реквизита "УдалитьКоэффициент".
//
Процедура ПерезаполнитьЗначенияКоэффициентовВДокументеВводПоказанийСчетчика_3_0_40_1()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	УПЖКХ_ВводПоказанийСчетчика.Ссылка КАК Ссылка,
	|	УПЖКХ_ВводПоказанийСчетчика.НомерСтроки
	|ИЗ
	|	Документ.УПЖКХ_ВводПоказанийСчетчика.Главная КАК УПЖКХ_ВводПоказанийСчетчика
	|ГДЕ
	|	НЕ УПЖКХ_ВводПоказанийСчетчика.УдалитьКоэффициент = 0
	|	И УПЖКХ_ВводПоказанийСчетчика.КоэффициентЧислитель = 0
	|	И УПЖКХ_ВводПоказанийСчетчика.КоэффициентЗнаменатель = 0
	|ИТОГИ ПО
	|	Ссылка";
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		ДокОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		
		ВыборкаСтрок = ВыборкаДокументов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаСтрок.Следующий() Цикл
			
			СтрокаТЧДокумента = ДокОбъект.Главная.Получить(ВыборкаСтрок.НомерСтроки - 1);
			
			// Выполним проверку на сравнение с некоторыми простыми дробями:
			Если СтрокаТЧДокумента.УдалитьКоэффициент = 0.333 Тогда
				
				СтрокаТЧДокумента.КоэффициентЧислитель   = 1;
				СтрокаТЧДокумента.КоэффициентЗнаменатель = 3;
				
			ИначеЕсли СтрокаТЧДокумента.УдалитьКоэффициент = 0.667 Тогда
				
				СтрокаТЧДокумента.КоэффициентЧислитель   = 2;
				СтрокаТЧДокумента.КоэффициентЗнаменатель = 3;
				
			ИначеЕсли СтрокаТЧДокумента.УдалитьКоэффициент = 0.167 Тогда
				
				СтрокаТЧДокумента.КоэффициентЧислитель   = 1;
				СтрокаТЧДокумента.КоэффициентЗнаменатель = 6;
				
			ИначеЕсли СтрокаТЧДокумента.УдалитьКоэффициент = 0.833 Тогда
				
				СтрокаТЧДокумента.КоэффициентЧислитель   = 5;
				СтрокаТЧДокумента.КоэффициентЗнаменатель = 6;
				
			Иначе
				
				СтрокаТЧДокумента.КоэффициентЧислитель   = СтрокаТЧДокумента.УдалитьКоэффициент * 1000;
				СтрокаТЧДокумента.КоэффициентЗнаменатель = 1000;
				
				УпроститьДробь(СтрокаТЧДокумента.КоэффициентЧислитель, СтрокаТЧДокумента.КоэффициентЗнаменатель);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаписатьОбъект(ДокОбъект, РежимЗаписиДокумента.Запись);
		
	КонецЦикла;
	
КонецПроцедуры // ПерезаполнитьЗначенияКоэффициентовВДокументеВводПоказанийСчетчика_3_0_40_1()

// Процедура исправляет ошибочные значения измерения "МесяцНачисления" регистров накопления
// "УПЖКХ_Начисления" и "КВП_ВзаиморасчетыПоЛицевымСчетам", которые
// могли возникнуть при проведении документа "Корректировка начислений".
// В данном измерении всегда должен храниться конец месяца, однако при изменении и регулировке месяца начислений
// в табличной части документа "Корректировка начислений" при помощи типового элемента управления
// в данном поле могла оказать другая дата. При проведении данная ситуация не проверялась.
// В конечном итоге это приводило к тому, что в регистрах накопления оказывались остатки на разные даты в течении
// одного месяца, что в свою очередь приводило к некорректной работе документа "Регистрация оплаты".
//
Процедура ИсправитьМесяцНачисленияВУпрРегистрахНакопленияПоНачислениюУслуг_3_0_40_1()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_Начисления.Регистратор
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления КАК УПЖКХ_Начисления
	|ГДЕ
	|	УПЖКХ_Начисления.Регистратор ССЫЛКА Документ.КВП_КорректировкаНачислений
	|	И НЕ УПЖКХ_Начисления.МесяцНачисления = НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(УПЖКХ_Начисления.МесяцНачисления, МЕСЯЦ), ДЕНЬ)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	КВП_ВзаиморасчетыПоЛицевымСчетам.Регистратор
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам КАК КВП_ВзаиморасчетыПоЛицевымСчетам
	|ГДЕ
	|	КВП_ВзаиморасчетыПоЛицевымСчетам.Регистратор ССЫЛКА Документ.КВП_КорректировкаНачислений
	|	И НЕ КВП_ВзаиморасчетыПоЛицевымСчетам.МесяцНачисления = НАЧАЛОПЕРИОДА(КОНЕЦПЕРИОДА(КВП_ВзаиморасчетыПоЛицевымСчетам.МесяцНачисления, МЕСЯЦ), ДЕНЬ)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписейНачисления     = РегистрыНакопления.УПЖКХ_Начисления.СоздатьНаборЗаписей();
	НаборЗаписейВзаиморасчеты  = РегистрыНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.СоздатьНаборЗаписей();
	
	Пока Выборка.Следующий() Цикл
		
		// Регистр накопления "УПЖКХ_Начисления".
		НаборЗаписейНачисления.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписейНачисления.Прочитать();
		
		Для Каждого ЗаписьНабора Из НаборЗаписейНачисления Цикл
			
			Если НЕ КонецДня(ЗаписьНабора.МесяцНачисления) = КонецМесяца(ЗаписьНабора.МесяцНачисления) Тогда
				ЗаписьНабора.МесяцНачисления = НачалоДня(КонецМесяца(ЗаписьНабора.МесяцНачисления));
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаписатьОбъект(НаборЗаписейНачисления);
		
		
		// Регистр накопления "КВП_ВзаиморасчетыПоЛицевымСчетам".
		НаборЗаписейВзаиморасчеты.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписейВзаиморасчеты.Прочитать();
		
		Для Каждого ЗаписьНабора Из НаборЗаписейВзаиморасчеты Цикл
			
			Если НЕ КонецДня(ЗаписьНабора.МесяцНачисления) = КонецМесяца(ЗаписьНабора.МесяцНачисления) Тогда
				ЗаписьНабора.МесяцНачисления = НачалоДня(КонецМесяца(ЗаписьНабора.МесяцНачисления));
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаписатьОбъект(НаборЗаписейВзаиморасчеты);
		
	КонецЦикла;
	
КонецПроцедуры // ИсправитьМесяцНачисленияВУпрРегистрахНакопленияПоНачислениюУслуг_3_0_40_1()

// Процедура переносит сохраненные параметры платежных документов в хранилище общих настроек с ключом "Отчет.УПЖКХ_ПлатежныйДокумент".
// Ранее настройки платежных документов и квитанций сохранялись под одним ключом "ПараметрыОтчета_КВП_КвитанцииИзвещения".
//
Процедура ПеренестиСохраненныеПараметрыОтчетаПлатежныйДокументВХранилищеОбщихНастроек_3_0_40_3()
	
	СтруктураПараметровСтарая = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("ПараметрыОтчета_КВП_КвитанцииИзвещения");
	
	Если ТипЗнч(СтруктураПараметровСтарая) = Тип("Структура") Тогда
		
		СтруктураПараметровНовая = Новый Структура;
		СтруктураПараметровНовая.Вставить("Организация");
		СтруктураПараметровНовая.Вставить("ВариантСортировки");
		СтруктураПараметровНовая.Вставить("ИсполнительРасчетов");
		СтруктураПараметровНовая.Вставить("УслугиИсполнителя");
		СтруктураПараметровНовая.Вставить("СтрокаУслуг");
		СтруктураПараметровНовая.Вставить("ВыводитьШК");
		СтруктураПараметровНовая.Вставить("ВыводитьНачальноеСальдо");
		СтруктураПараметровНовая.Вставить("НеПечататьНулевыеКвитанции");
		СтруктураПараметровНовая.Вставить("ВключениеНачальнойЗадолженности");
		СтруктураПараметровНовая.Вставить("УчитыватьПени");
		СтруктураПараметровНовая.Вставить("СпособПечатиКвитанцииПоПеням");
		СтруктураПараметровНовая.Вставить("ДвусторонняяПечать");
		СтруктураПараметровНовая.Вставить("ДвусторонняяПечатьВыводитьОтступ");
		СтруктураПараметровНовая.Вставить("ВыводитьИндРасходДляВсехУслуг");
		СтруктураПараметровНовая.Вставить("ВыборУслуг");
		СтруктураПараметровНовая.Вставить("ВыбранныеУслуги");
		СтруктураПараметровНовая.Вставить("УслугиПоТипам");
		СтруктураПараметровНовая.Вставить("РазделятьУслугиПоТипам");
		СтруктураПараметровНовая.Вставить("УчетОплат");
		СтруктураПараметровНовая.Вставить("ВариантУчетаКомиссииБанка");
		СтруктураПараметровНовая.Вставить("КомиссияБанка");
		СтруктураПараметровНовая.Вставить("ВыводитьРасчетнуюПлощадь");
		СтруктураПараметровНовая.Вставить("РасчетнаяПлощадьПомещения");
		СтруктураПараметровНовая.Вставить("РасчетнаяПлощадьЗдания");
		СтруктураПараметровНовая.Вставить("ТипПодбораОбъектов");
		СтруктураПараметровНовая.Вставить("ОбъектыОтчета");
		СтруктураПараметровНовая.Вставить("НеВыводитьПоказанияПоПУ");
		СтруктураПараметровНовая.Вставить("УслугиБезОДН");
		СтруктураПараметровНовая.Вставить("ВсегдаВыводитьДополнительныеОбласти");
		СтруктураПараметровНовая.Вставить("ПечататьОтрывнойКорешок");
		СтруктураПараметровНовая.Вставить("ВыводитьОтрицательнуюСуммуКОплате");
		СтруктураПараметровНовая.Вставить("ПечататьКвитанциюКапРемонт");
		СтруктураПараметровНовая.Вставить("СпособПечатиКвитанцииКапРемонт");
		
		Для Каждого ТекЭлемент Из СтруктураПараметровНовая Цикл
			
			Если СтруктураПараметровСтарая.Свойство(ТекЭлемент.Ключ) Тогда
				Значение     = СтруктураПараметровСтарая[ТекЭлемент.Ключ];
				ЕстьЗначение = Истина;
			Иначе
				ЕстьЗначение = Ложь;
			КонецЕсли;
			
			Если ТекЭлемент.Ключ = "Организация" Тогда
				СтруктураПараметровНовая[ТекЭлемент.Ключ] = ?(НЕ ЕстьЗначение, Справочники.Организации.ПустаяСсылка(), Значение);
			КонецЕсли;
			
			Если ТекЭлемент.Ключ = "ВариантСортировки" Тогда
				СтруктураПараметровНовая[ТекЭлемент.Ключ] = ?(НЕ ЕстьЗначение, "Квартира", Значение);
			КонецЕсли;
			
			Если ТекЭлемент.Ключ = "ИсполнительРасчетов" Тогда
				СтруктураПараметровНовая[ТекЭлемент.Ключ] = ?(НЕ ЕстьЗначение, Справочники.Контрагенты.ПустаяСсылка(), Значение);
			КонецЕсли;
			
			Если ТекЭлемент.Ключ = "УслугиИсполнителя" Тогда
				СтруктураПараметровНовая[ТекЭлемент.Ключ] = ?(НЕ ЕстьЗначение, "Выводить список услуг", Значение);
			КонецЕсли;
			
			Если ТекЭлемент.Ключ = "СтрокаУслуг" Тогда
				СтруктураПараметровНовая[ТекЭлемент.Ключ] = ?(НЕ ЕстьЗначение, "", Значение);
			КонецЕсли;
			
			Если ТекЭлемент.Ключ = "ВыводитьШК" Тогда
				СтруктураПараметровНовая[ТекЭлемент.Ключ] = ?(НЕ ЕстьЗначение, Ложь, Значение);
			КонецЕсли;
			
			Если ТекЭлемент.Ключ = "ВыводитьНачальноеСальдо" Тогда
				СтруктураПараметровНовая[ТекЭлемент.Ключ] = ?(НЕ ЕстьЗначение, Ложь, Значение);
			КонецЕсли;
			
			Если ТекЭлемент.Ключ = "НеПечататьНулевыеКвитанции" Тогда
				СтруктураПараметровНовая[ТекЭлемент.Ключ] = ?(НЕ ЕстьЗначение, Ложь, Значение);
			КонецЕсли;
			
			Если ТекЭлемент.Ключ = "ВключениеНачальнойЗадолженности" Тогда
				СтруктураПараметровНовая[ТекЭлемент.Ключ] = ?(НЕ ЕстьЗначение, "НеВыводить", Значение);
			КонецЕсли;
			
			Если ТекЭлемент.Ключ = "УчитыватьПени" Тогда
				СтруктураПараметровНовая[ТекЭлемент.Ключ] = ?(НЕ ЕстьЗначение, Ложь, Значение);
			КонецЕсли;
			
			Если ТекЭлемент.Ключ = "СпособПечатиКвитанцииПоПеням" Тогда
				СтруктураПараметровНовая[ТекЭлемент.Ключ] = ?(НЕ ЕстьЗначение, "в квитанции с основными начислениями", Значение);
			КонецЕсли;
			
			Если ТекЭлемент.Ключ = "ДвусторонняяПечать" Тогда
				СтруктураПараметровНовая[ТекЭлемент.Ключ] = ?(НЕ ЕстьЗначение, Ложь, Значение);
			КонецЕсли;
			
			Если ТекЭлемент.Ключ = "ДвусторонняяПечатьВыводитьОтступ" Тогда
				СтруктураПараметровНовая[ТекЭлемент.Ключ] = ?(НЕ ЕстьЗначение, Ложь, Значение);
			КонецЕсли;
			
			Если ТекЭлемент.Ключ = "ВыводитьИндРасходДляВсехУслуг" Тогда
				СтруктураПараметровНовая[ТекЭлемент.Ключ] = ?(НЕ ЕстьЗначение, Ложь, Значение);
			КонецЕсли;
			
			Если ТекЭлемент.Ключ = "ВыборУслуг" Тогда
				СтруктураПараметровНовая[ТекЭлемент.Ключ] = ?(НЕ ЕстьЗначение, "Все услуги", Значение);
			КонецЕсли;
			
			Если ТекЭлемент.Ключ = "ВыбранныеУслуги" Тогда
				ВыбранныеУслуги = Новый ТаблицаЗначений;
				ВыбранныеУслуги.Колонки.Добавить("Услуга", Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
				СтруктураПараметровНовая[ТекЭлемент.Ключ] = ?(НЕ ЕстьЗначение, ВыбранныеУслуги.Скопировать(), Значение);
			КонецЕсли;
			
			Если ТекЭлемент.Ключ = "УслугиПоТипам" Тогда
				УслугиПоТипам = Новый ТаблицаЗначений;
				УслугиПоТипам.Колонки.Добавить("ВидУслуги",   Новый ОписаниеТипов("СправочникСсылка.КВП_ВидыУслуг"));
				УслугиПоТипам.Колонки.Добавить("Коммунальная",  Новый ОписаниеТипов("Булево"));
				УслугиПоТипам.Колонки.Добавить("СодержаниеИРемонт", Новый ОписаниеТипов("Булево"));
				СтруктураПараметровНовая[ТекЭлемент.Ключ] = ?(НЕ ЕстьЗначение, УслугиПоТипам.Скопировать(), Значение);
			КонецЕсли;
			
			Если ТекЭлемент.Ключ = "РазделятьУслугиПоТипам" Тогда
				СтруктураПараметровНовая[ТекЭлемент.Ключ] = ?(НЕ ЕстьЗначение, Ложь, Значение);
			КонецЕсли;
			
			Если ТекЭлемент.Ключ = "УчетОплат" Тогда
				СтруктураПараметровНовая[ТекЭлемент.Ключ] = ?(НЕ ЕстьЗначение, "Конца отчетного месяца", Значение);
			КонецЕсли;
			
			Если ТекЭлемент.Ключ = "ВариантУчетаКомиссииБанка" Тогда
				СтруктураПараметровНовая[ТекЭлемент.Ключ] = ?(НЕ ЕстьЗначение, "Не учитывать", Значение);
			КонецЕсли;
			
			Если ТекЭлемент.Ключ = "КомиссияБанка" Тогда
				СтруктураПараметровНовая[ТекЭлемент.Ключ] = ?(НЕ ЕстьЗначение, 0, Значение);
			КонецЕсли;
			
			Если ТекЭлемент.Ключ = "ВыводитьРасчетнуюПлощадь" Тогда
				СтруктураПараметровНовая[ТекЭлемент.Ключ] = ?(НЕ ЕстьЗначение, Ложь, Значение);
			КонецЕсли;
			
			Если ТекЭлемент.Ключ = "РасчетнаяПлощадьПомещения" Тогда
				СтруктураПараметровНовая[ТекЭлемент.Ключ] = ?(НЕ ЕстьЗначение, Справочники.УПЖКХ_ВидыПлощадей.ПустаяСсылка(), Значение);
			КонецЕсли;
			
			Если ТекЭлемент.Ключ = "РасчетнаяПлощадьЗдания" Тогда
				СтруктураПараметровНовая[ТекЭлемент.Ключ] = ?(НЕ ЕстьЗначение, Справочники.КВП_ТипыПлощадейЗдания.ПустаяСсылка(), Значение);
			КонецЕсли;
			
			Если ТекЭлемент.Ключ = "ТипПодбораОбъектов" Тогда
				СтруктураПараметровНовая[ТекЭлемент.Ключ] = ?(НЕ ЕстьЗначение, "Выбор из справочника", Значение);
			КонецЕсли;
			
			Если ТекЭлемент.Ключ = "ОбъектыОтчета" Тогда
				ОбъектыОтчета = Новый ТаблицаЗначений;
				ОбъектыОтчета.Колонки.Добавить("Объект", Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
				СтруктураПараметровНовая[ТекЭлемент.Ключ] = ?(НЕ ЕстьЗначение, ОбъектыОтчета.Скопировать(), Значение);
			КонецЕсли;
			
			Если ТекЭлемент.Ключ = "НеВыводитьПоказанияПоПУ" Тогда
				СтруктураПараметровНовая[ТекЭлемент.Ключ] = ?(НЕ ЕстьЗначение, Ложь, Значение);
			КонецЕсли;
			
			Если ТекЭлемент.Ключ = "УслугиБезОДН" Тогда
				УслугиБезОДН = Новый ТаблицаЗначений;
				УслугиБезОДН.Колонки.Добавить("Услуга", Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
				СтруктураПараметровНовая[ТекЭлемент.Ключ] = ?(НЕ ЕстьЗначение, УслугиБезОДН.Скопировать(), Значение);
			КонецЕсли;
			
			Если ТекЭлемент.Ключ = "ВсегдаВыводитьДополнительныеОбласти" Тогда
				СтруктураПараметровНовая[ТекЭлемент.Ключ] = ?(НЕ ЕстьЗначение, Ложь, Значение);
			КонецЕсли;
			
			Если ТекЭлемент.Ключ = "ПечататьОтрывнойКорешок" Тогда
				СтруктураПараметровНовая[ТекЭлемент.Ключ] = ?(НЕ ЕстьЗначение, Ложь, Значение);
			КонецЕсли;
			
			Если ТекЭлемент.Ключ = "ВыводитьОтрицательнуюСуммуКОплате" Тогда
				СтруктураПараметровНовая[ТекЭлемент.Ключ] = ?(НЕ ЕстьЗначение, Ложь, Значение);
			КонецЕсли;
			
			Если ТекЭлемент.Ключ = "ПечататьКвитанциюКапРемонт" Тогда
				СтруктураПараметровНовая[ТекЭлемент.Ключ] = ?(НЕ ЕстьЗначение, Ложь, Значение);
			КонецЕсли;
			
			Если ТекЭлемент.Ключ = "СпособПечатиКвитанцииКапРемонт" Тогда
				СтруктураПараметровНовая[ТекЭлемент.Ключ] = ?(НЕ ЕстьЗначение, "основную квитанцию и квитанцию на кап. ремонт", Значение);
			КонецЕсли;
			
		КонецЦикла;
		
		УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("Отчет.УПЖКХ_ПлатежныйДокумент",,
																		СтруктураПараметровНовая);
	КонецЕсли;
	
КонецПроцедуры // ПеренестиСохраненныеПараметрыОтчетаПлатежныйДокументВХранилищеОбщихНастроек_3_0_40_3()

// Процедура копирует количественные данные по жильцам лицевых счетов из регистра сведений "Лицевые счета" в новый регистр
// сведений "Учет количества жильцов по лицевым счетам". Данная реализация связана с тем, что теперь регистр сведений 
// "Лицевые счета" отражает факт действия лицевых счетов, а регистр сведений "Учет количества жильцов по лицевым счетам"
// отражает только количество жильцов.
//
Процедура ПереносДанныхИзРегистраКВП_ЛицевыеСчетаВРегистрКВП_УчетКоличестваЖильцовПоЛицевымСчетам_3_0_40_4()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_ЛицевыеСчета.Период КАК Период,
	|	КВП_ЛицевыеСчета.Регистратор КАК Регистратор,
	|	КВП_ЛицевыеСчета.ЛицевойСчет,
	|	КВП_ЛицевыеСчета.УдалитьКоличествоПроживающих КАК КоличествоПроживающих,
	|	КВП_ЛицевыеСчета.УдалитьКоличествоЗарегистрированных КАК КоличествоЗарегистрированных
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ЛицевыеСчета.ЛицевойСчет,
	|	КВП_ЛицевыеСчета.Период,
	|	КВП_ЛицевыеСчета.Регистратор,
	|	КВП_ЛицевыеСчета.УдалитьКоличествоПроживающих,
	|	КВП_ЛицевыеСчета.УдалитьКоличествоЗарегистрированных
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|ИТОГИ ПО
	|	Регистратор";
	
	ВыборкаРегистраторы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаРегистраторы.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.КВП_УчетКоличестваЖильцовПоЛицевымСчетам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистраторы.Регистратор);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			ВыборкаЗаписи = ВыборкаРегистраторы.Выбрать();
			
			Пока ВыборкаЗаписи.Следующий() Цикл
				НоваяЗапись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаЗаписи);
			КонецЦикла;
			
			ЗаписатьОбъект(НаборЗаписей);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПереносДанныхИзРегистраКВП_ЛицевыеСчетаВРегистрКВП_УчетКоличестваЖильцовПоЛицевымСчетам_3_0_40_4()

// Процедура выполняет поиск некорректных движений, сформированных при выполнении обработчика
// ЗаполнитьНовыйРегистрСведенийОРассрочкеДаннымиПоДокументамЗаявленияНаРассрочку_2_0_64_11().
//
Процедура ПоискНекорректныхДанныхПоРассрочке_3_0_40_4(СтруктураРезультатаОбновления)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_НачисленияПоРассрочке.Регистратор,
	|	УПЖКХ_НачисленияПоРассрочке.Организация,
	|	УПЖКХ_НачисленияПоРассрочке.ЛицевойСчет,
	|	УПЖКХ_НачисленияПоРассрочке.Услуга,
	|	УПЖКХ_НачисленияПоРассрочке.МесяцРассрочки,
	|	УПЖКХ_НачисленияПоРассрочке.ЗаявлениеНаРассрочку
	|ПОМЕСТИТЬ втНачисленияПоРассрочке
	|ИЗ
	|	РегистрНакопления.УПЖКХ_НачисленияПоРассрочке КАК УПЖКХ_НачисленияПоРассрочке
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НачисленияПоРассрочке.Услуга,
	|	УПЖКХ_НачисленияПоРассрочке.ЛицевойСчет,
	|	УПЖКХ_НачисленияПоРассрочке.Регистратор,
	|	УПЖКХ_НачисленияПоРассрочке.Организация,
	|	УПЖКХ_НачисленияПоРассрочке.МесяцРассрочки,
	|	УПЖКХ_НачисленияПоРассрочке.ЗаявлениеНаРассрочку
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачисленияПоРассрочке.Регистратор КАК Регистратор,
	|	втНачисленияПоРассрочке.Организация,
	|	втНачисленияПоРассрочке.ЛицевойСчет,
	|	втНачисленияПоРассрочке.Услуга,
	|	втНачисленияПоРассрочке.МесяцРассрочки
	|ПОМЕСТИТЬ втЗаявленияНаРассрочку
	|ИЗ
	|	втНачисленияПоРассрочке КАК втНачисленияПоРассрочке
	|ГДЕ
	|	втНачисленияПоРассрочке.Регистратор ССЫЛКА Документ.УПЖКХ_ЗаявлениеНаРассрочку
	|
	|СГРУППИРОВАТЬ ПО
	|	втНачисленияПоРассрочке.Регистратор,
	|	втНачисленияПоРассрочке.Услуга,
	|	втНачисленияПоРассрочке.МесяцРассрочки,
	|	втНачисленияПоРассрочке.ЛицевойСчет,
	|	втНачисленияПоРассрочке.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНачисленияПоРассрочке.Регистратор КАК Регистратор,
	|	втЗаявленияНаРассрочку.Регистратор КАК ЗаявлениеНаРассрочкуИзЗаявления,
	|	втНачисленияПоРассрочке.ЗаявлениеНаРассрочку КАК ЗаявлениеНаРассрочкуИзНачисления,
	|	втНачисленияПоРассрочке.Организация,
	|	втНачисленияПоРассрочке.ЛицевойСчет,
	|	втНачисленияПоРассрочке.Услуга,
	|	втНачисленияПоРассрочке.МесяцРассрочки
	|ИЗ
	|	втНачисленияПоРассрочке КАК втНачисленияПоРассрочке
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЗаявленияНаРассрочку КАК втЗаявленияНаРассрочку
	|		ПО втНачисленияПоРассрочке.Организация = втЗаявленияНаРассрочку.Организация
	|			И втНачисленияПоРассрочке.ЛицевойСчет = втЗаявленияНаРассрочку.ЛицевойСчет
	|			И втНачисленияПоРассрочке.Услуга = втЗаявленияНаРассрочку.Услуга
	|			И втНачисленияПоРассрочке.МесяцРассрочки = втЗаявленияНаРассрочку.МесяцРассрочки
	|ГДЕ
	|	НЕ втЗаявленияНаРассрочку.Регистратор = втНачисленияПоРассрочке.ЗаявлениеНаРассрочку
	|
	|СГРУППИРОВАТЬ ПО
	|	втНачисленияПоРассрочке.Регистратор,
	|	втНачисленияПоРассрочке.Организация,
	|	втНачисленияПоРассрочке.ЛицевойСчет,
	|	втНачисленияПоРассрочке.Услуга,
	|	втНачисленияПоРассрочке.МесяцРассрочки,
	|	втЗаявленияНаРассрочку.Регистратор,
	|	втНачисленияПоРассрочке.ЗаявлениеНаРассрочку";
	
	ТаблицаРезультата = Запрос.Выполнить().Выгрузить();
	
	МассивНекорректныхДокументов = ТаблицаРезультата.ВыгрузитьКолонку("Регистратор");
	
	Если МассивНекорректныхДокументов.Количество() > 0 Тогда
		ТабличныйДокумент    = ПолучитьМакет("МакетНекорректныеДанныеПоРассрочке");
		ОбластьЗаголовок     = ТабличныйДокумент.ПолучитьОбласть("ШапкаОтчета");
		
		// Выведем области в табличный документ.
		МакетОписаниеОбновлений = Новый ТабличныйДокумент;
		МакетОписаниеОбновлений.Вывести(ОбластьЗаголовок);
		
		// Передаем заполненный табличный документ для вывода.
		АдресМакета = ПоместитьВоВременноеХранилище(МакетОписаниеОбновлений, Новый УникальныйИдентификатор);
		СтруктураРезультатаОбновления.Вставить("ДокументыСНевернымиДвижениямиПоРассрочке", АдресМакета);
	КонецЕсли;
	
КонецПроцедуры

// Процедура обрабатывает ошибочно занесенные документом "Установка льгот" даты окончания действия льгот
// и окончания прекращения льгот в регистре сведений "Назначенные льготы" по следующему алгоритму:
// 1. Собираются данные о льготах из документов установки льгот.
// 2. Собираются данные о движениях по льготам в регистре сведений "Назначенные льготы".
// 3. Ошибочными считаются те записи регистра сведений, у которых дата окончания (действия или прекращения)
// льготы в документе равна дате в регистре сведений "Назначенные льготы".
// Такие даты сдвигаются в регистре сведений на сутки вперед (например, если в документе
// дата прекращения льготы равна 31.07.2015, то в регистре сведений строка прекращения льготы
// должна быть с периодом 01.08.2015).
//
Процедура ПерезаполнитьДатыОкончанияДействияИПрекращенияЛьгот_3_0_40_5()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_УстановкаЛьготСписокЛьгот.Ссылка,
	|	КВП_УстановкаЛьготСписокЛьгот.Ссылка.ВидОперации,
	|	КВП_УстановкаЛьготСписокЛьгот.Льгота КАК ЛьготнаяКатегория,
	|	КВП_УстановкаЛьготСписокЛьгот.Проживающий,
	|	КВП_УстановкаЛьготСписокЛьгот.ДатаОкончания
	|ПОМЕСТИТЬ втДокументыСЛьготами
	|ИЗ
	|	Документ.КВП_УстановкаЛьгот.СписокЛьгот КАК КВП_УстановкаЛьготСписокЛьгот
	|ГДЕ
	|	КВП_УстановкаЛьготСписокЛьгот.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	|	И КВП_УстановкаЛьготСписокЛьгот.Ссылка.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_НазначенныеЛьготы.Проживающий,
	|	КВП_НазначенныеЛьготы.ЛьготнаяКатегория,
	|	КВП_НазначенныеЛьготы.Действие,
	|	КВП_НазначенныеЛьготы.Период,
	|	КВП_НазначенныеЛьготы.Регистратор КАК Регистратор
	|ИЗ
	|	втДокументыСЛьготами КАК втДокументыСЛьготами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КВП_НазначенныеЛьготы КАК КВП_НазначенныеЛьготы
	|		ПО втДокументыСЛьготами.Ссылка = КВП_НазначенныеЛьготы.Регистратор
	|			И втДокументыСЛьготами.Проживающий = КВП_НазначенныеЛьготы.Проживающий
	|			И втДокументыСЛьготами.ЛьготнаяКатегория = КВП_НазначенныеЛьготы.ЛьготнаяКатегория
	|			И втДокументыСЛьготами.ДатаОкончания = КВП_НазначенныеЛьготы.Период
	|			И (ВЫБОР
	|				КОГДА втДокументыСЛьготами.ВидОперации = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийУстановкиЛьгот.УстановкаЛьготы)
	|					ТОГДА НЕ КВП_НазначенныеЛьготы.Действие
	|				КОГДА втДокументыСЛьготами.ВидОперации = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийУстановкиЛьгот.ПрекращениеЛьготы)
	|					ТОГДА КВП_НазначенныеЛьготы.Действие
	|			КОНЕЦ)
	|ИТОГИ ПО
	|	Регистратор";
	
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаРегистраторов.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.КВП_НазначенныеЛьготы.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистраторов.Регистратор);
		НаборЗаписей.Прочитать();
		
		врТаблицаНабораЗаписей = НаборЗаписей.Выгрузить();
		врТаблицаНабораЗаписей.Индексы.Добавить("Проживающий,ЛьготнаяКатегория,Действие,Период");
		
		ЕстьИзмененияВДвижениях = Ложь;
		
		ВыборкаЛьгот = ВыборкаРегистраторов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаЛьгот.Следующий() Цикл
			
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Проживающий",       ВыборкаЛьгот.Проживающий);
			СтруктураПоиска.Вставить("ЛьготнаяКатегория", ВыборкаЛьгот.ЛьготнаяКатегория);
			СтруктураПоиска.Вставить("Действие",          ВыборкаЛьгот.Действие);
			СтруктураПоиска.Вставить("Период",            ВыборкаЛьгот.Период);
			
			НайденныеСтроки = врТаблицаНабораЗаписей.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() > 0 Тогда
				НайденныеСтроки[0].Период = КонецДня(ВыборкаЛьгот.Период) + 1;
				ЕстьИзмененияВДвижениях = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЕстьИзмененияВДвижениях Тогда
			НаборЗаписей.Загрузить(врТаблицаНабораЗаписей);
			ЗаписатьОбъект(НаборЗаписей);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПерезаполнитьДатыОкончанияДействияИПрекращенияЛьгот_3_0_40_5()

// Процедура заполняет на основе данных из константы "Услуги капремонта"
// справочник "Настройки учета по услугам капитального ремонта".
//
Процедура ЗаполнитьНовыйСправочникНаОсновеКонстантыУслугиКапремонта_3_0_41_7()
	
	ТаблицаУслугКР = Константы.Удалить_УПЖКХ_УслугиКапРемонта.Получить().Получить();
	Если НЕ ТипЗнч(ТаблицаУслугКР) = Тип("ТаблицаЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаУслугКР.Свернуть("Услуга");
	ПустаяСтрока = ТаблицаУслугКР.Найти(Справочники.КВП_Услуги.ПустаяСсылка(), "Услуга");
	Если Не ПустаяСтрока = Неопределено Тогда
		ТаблицаУслугКР.Удалить(ПустаяСтрока);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_НастройкиУчетаКапремонта.Владелец КАК Организация
	|ПОМЕСТИТЬ втОрганизацииСНастройкой
	|ИЗ
	|	Справочник.УПЖКХ_НастройкиУчетаКапремонта КАК УПЖКХ_НастройкиУчетаКапремонта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И НЕ Организации.Ссылка В
	|				(ВЫБРАТЬ
	|					втОрганизацииСНастройкой.Организация
	|				ИЗ
	|					втОрганизацииСНастройкой КАК втОрганизацииСНастройкой)";
	
	ВыборкаОрганизаций = Запрос.Выполнить().Выбрать();
	Пока ВыборкаОрганизаций.Следующий() Цикл
		НовыйЭлемент          = Справочники.УПЖКХ_НастройкиУчетаКапремонта.СоздатьЭлемент();
		НовыйЭлемент.Владелец = ВыборкаОрганизаций.Ссылка;
		
		ПервыйПроход = Истина;
		Для каждого ТекУслуга Из ТаблицаУслугКР Цикл
			Если ПервыйПроход Тогда
				НовыйЭлемент.ВестиРаздельныйУчетПоУслугамКапремонта                              = Истина;
				НовыйЭлемент.ЗапретитьВзаимозачетАвансовИДолговМеждуУслугамиКРиОсновнымиУслугами = Истина;
				
				ПервыйПроход = Ложь;
			КонецЕсли;
			НоваяСтрока        = НовыйЭлемент.Услуги.Добавить();
			НоваяСтрока.Услуга = ТекУслуга.Услуга;
		КонецЦикла;
		
		ЗаписатьОбъект(НовыйЭлемент);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьНовыйСправочникНаОсновеКонстантыУслугиКапремонта_3_0_41_7

// Процедура копирует значения настроек из РС "Учетная политика ЖКХ", расположенные на страницах "Квитанции" и "Штрихкод",
// в новый РС "Настройки формирования платежного документа".
//
Процедура ЗаполнитьНовыйРегистрСведенийНастроекФормированияПДНаОсновеРегистраСведенийУчетнаяПолитикаЖКХ_3_0_41_7()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.Организация
	|ПОМЕСТИТЬ втОрганизацииСЗаписями
	|ИЗ
	|	РегистрСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента КАК УПЖКХ_НастройкиФормированияПлатежногоДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ПОМЕСТИТЬ втДоступныеОрганизации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И НЕ Организации.Ссылка В
	|				(ВЫБРАТЬ
	|					втОрганизацииСЗаписями.Организация
	|				ИЗ
	|					втОрганизацииСЗаписями КАК втОрганизацииСЗаписями)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДоступныеОрганизации.Организация,
	|	ЕСТЬNULL(УПЖКХ_НастройкиУчетаКапремонта.ВестиРаздельныйУчетПоУслугамКапремонта, ЛОЖЬ) КАК ВедетсяРаздельныйУчетПоУслугамКР
	|ПОМЕСТИТЬ втОрганизацииСКапРемонтом
	|ИЗ
	|	втДоступныеОрганизации КАК втДоступныеОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УПЖКХ_НастройкиУчетаКапремонта КАК УПЖКХ_НастройкиУчетаКапремонта
	|		ПО втДоступныеОрганизации.Организация = УПЖКХ_НастройкиУчетаКапремонта.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_УчетнаяПолитикаТСЖСрезПоследних.Организация,
	|	КВП_УчетнаяПолитикаТСЖСрезПоследних.УдалитьВариантОпределенияФорматаШтрихкода,
	|	КВП_УчетнаяПолитикаТСЖСрезПоследних.УдалитьВидШтрихкода,
	|	КВП_УчетнаяПолитикаТСЖСрезПоследних.УдалитьВнешняяОбработкаШтрихкода,
	|	КВП_УчетнаяПолитикаТСЖСрезПоследних.УдалитьВнешняяОбработкаQRкода,
	|	КВП_УчетнаяПолитикаТСЖСрезПоследних.УдалитьДлинаИдентификатораШтрихкода,
	|	КВП_УчетнаяПолитикаТСЖСрезПоследних.УдалитьДлинаСуммыШтрихкода,
	|	КВП_УчетнаяПолитикаТСЖСрезПоследних.УдалитьДополнительныеКонтактыОрганизации,
	|	КВП_УчетнаяПолитикаТСЖСрезПоследних.УдалитьДополнительныеРеквизитыQRКода,
	|	КВП_УчетнаяПолитикаТСЖСрезПоследних.УдалитьИдентификаторЛСШтрихкода,
	|	КВП_УчетнаяПолитикаТСЖСрезПоследних.УдалитьКодОрганизацииДляШтрихКода,
	|	КВП_УчетнаяПолитикаТСЖСрезПоследних.УдалитьКонстантаОрганизацииДляШтрихКода,
	|	КВП_УчетнаяПолитикаТСЖСрезПоследних.УдалитьОтображатьКонтрольнуюСумму,
	|	КВП_УчетнаяПолитикаТСЖСрезПоследних.УдалитьПримечаниеКвитанции,
	|	КВП_УчетнаяПолитикаТСЖСрезПоследних.УдалитьРазделительДробнойЧастиСуммы,
	|	КВП_УчетнаяПолитикаТСЖСрезПоследних.УдалитьСоставШтрихкода,
	|	КВП_УчетнаяПолитикаТСЖСрезПоследних.УдалитьСхемаДляРасчетаКонтрольнойСуммы,
	|	КВП_УчетнаяПолитикаТСЖСрезПоследних.УдалитьФормаКвитанции
	|ПОМЕСТИТЬ втНастройкиИзУП
	|ИЗ
	|	РегистрСведений.КВП_УчетнаяПолитикаТСЖ.СрезПоследних(
	|			&Дата,
	|			Организация В
	|				(ВЫБРАТЬ
	|					втОрганизацииСКапРемонтом.Организация
	|				ИЗ
	|					втОрганизацииСКапРемонтом КАК втОрганизацииСКапРемонтом)) КАК КВП_УчетнаяПолитикаТСЖСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОрганизацииСКапРемонтом.Организация,
	|	втОрганизацииСКапРемонтом.ВедетсяРаздельныйУчетПоУслугамКР,
	|	втНастройкиИзУП.УдалитьВариантОпределенияФорматаШтрихкода КАК ВариантОпределенияФорматаШтрихкода,
	|	втНастройкиИзУП.УдалитьВидШтрихкода КАК ВидШтрихкода,
	|	втНастройкиИзУП.УдалитьВнешняяОбработкаШтрихкода КАК ВнешняяОбработкаШтрихкода,
	|	втНастройкиИзУП.УдалитьВнешняяОбработкаQRкода КАК ВнешняяОбработкаШтрихкодаQR,
	|	втНастройкиИзУП.УдалитьДлинаИдентификатораШтрихкода КАК ДлинаИдентификатораШтрихкода,
	|	втНастройкиИзУП.УдалитьДлинаСуммыШтрихкода КАК ДлинаСуммыШтрихкода,
	|	втНастройкиИзУП.УдалитьДополнительныеКонтактыОрганизации КАК ДополнительныеКонтактыОрганизации,
	|	втНастройкиИзУП.УдалитьДополнительныеРеквизитыQRКода КАК ДополнительныеРеквизитыQRКодаХранилище,
	|	втНастройкиИзУП.УдалитьИдентификаторЛСШтрихкода КАК ИдентификаторЛСШтрихкода,
	|	втНастройкиИзУП.УдалитьКодОрганизацииДляШтрихКода КАК КодОрганизацииДляШтрихКода,
	|	втНастройкиИзУП.УдалитьКонстантаОрганизацииДляШтрихКода КАК КонстантаОрганизацииДляШтрихКода,
	|	втНастройкиИзУП.УдалитьОтображатьКонтрольнуюСумму КАК ОтображатьКонтрольнуюСумму,
	|	втНастройкиИзУП.УдалитьПримечаниеКвитанции КАК ПримечаниеКвитанции,
	|	втНастройкиИзУП.УдалитьРазделительДробнойЧастиСуммы КАК РазделительДробнойЧастиСуммы,
	|	втНастройкиИзУП.УдалитьСоставШтрихкода КАК СоставШтрихкода,
	|	втНастройкиИзУП.УдалитьСхемаДляРасчетаКонтрольнойСуммы КАК СхемаДляРасчетаКонтрольнойСуммы,
	|	втНастройкиИзУП.УдалитьФормаКвитанции КАК ФормаКвитанции
	|ИЗ
	|	втОрганизацииСКапРемонтом КАК втОрганизацииСКапРемонтом
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНастройкиИзУП КАК втНастройкиИзУП
	|		ПО втОрганизацииСКапРемонтом.Организация = втНастройкиИзУП.Организация";
	
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	
	ВыборкаДанных = Запрос.Выполнить().Выбрать();
	
	ПервыйПроход = Истина;
	Пока ВыборкаДанных.Следующий() Цикл
		Если ПервыйПроход Тогда
			НаборЗаписей = РегистрыСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента.СоздатьНаборЗаписей();
			НаборЗаписей.Прочитать();
			ТаблицаНастроекПД = НаборЗаписей.Выгрузить();
			
			ПервыйПроход = Ложь;
		КонецЕсли;
		НоваяЗапись = ТаблицаНастроекПД.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДанных, "Организация, ВариантОпределенияФорматаШтрихкода, ВидШтрихкода, ДлинаИдентификатораШтрихкода, " +
		"ДлинаСуммыШтрихкода, ДополнительныеКонтактыОрганизации, ИдентификаторЛСШтрихкода, " +
		"КодОрганизацииДляШтрихКода, КонстантаОрганизацииДляШтрихКода, ПримечаниеКвитанции, " +
		"РазделительДробнойЧастиСуммы, СхемаДляРасчетаКонтрольнойСуммы, ФормаКвитанции");
		
		НоваяЗапись.ВнешняяОбработкаШтрихкодаОсн = ВыборкаДанных.ВнешняяОбработкаШтрихкода;
		Если ВыборкаДанных.ВедетсяРаздельныйУчетПоУслугамКР Тогда
			НоваяЗапись.ВнешняяОбработкаШтрихкодаКР = ВыборкаДанных.ВнешняяОбработкаШтрихкода;
		КонецЕсли;
		
		НоваяЗапись.ВнешняяОбработкаШтрихкодаQRОсн = ВыборкаДанных.ВнешняяОбработкаШтрихкодаQR;
		Если ВыборкаДанных.ВедетсяРаздельныйУчетПоУслугамКР Тогда
			НоваяЗапись.ВнешняяОбработкаШтрихкодаQRКР = ВыборкаДанных.ВнешняяОбработкаШтрихкодаQR;
		КонецЕсли;
		
		НоваяЗапись.СоставШтрихкодаПоОсн = ВыборкаДанных.СоставШтрихкода;
		Если ВыборкаДанных.ВедетсяРаздельныйУчетПоУслугамКР Тогда
			НоваяЗапись.СоставШтрихкодаПоКР = ВыборкаДанных.СоставШтрихкода;
		КонецЕсли;
		
		ДополнительныеРеквизитыQRКода = ВыборкаДанных.ДополнительныеРеквизитыQRКодаХранилище.Получить();
		Если ТипЗнч(ДополнительныеРеквизитыQRКода) = Тип("СписокЗначений") Тогда
			НоваяЗапись.ДополнительныеРеквизитыQRКодаПоОсн = Новый ХранилищеЗначения(ДополнительныеРеквизитыQRКода);
			Если ВыборкаДанных.ВедетсяРаздельныйУчетПоУслугамКР Тогда
				НоваяЗапись.ДополнительныеРеквизитыQRКодаПоКР = Новый ХранилищеЗначения(ДополнительныеРеквизитыQRКода);
			КонецЕсли;
		КонецЕсли;
		
		НаборЗаписей.Загрузить(ТаблицаНастроекПД);
		ЗаписатьОбъект(НаборЗаписей);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьНовыйРегистрСведенийНастроекФормированияПДНаОсновеРегистраСведенийУчетнаяПолитикаЖКХ_3_0_41_7()

// Процедура выполняет заполнение периода и признака установки оборудования в регистре
// сведений "Взаимосвязь оборудования и объектов учета" так как регистр стал периодическим,
// а также в него добавлен новый ресурс "Установлено".
//
Процедура ОбработатьЗаписиВРегистреУПЖКХ_ВзаимосвязьОборудованияИОбъектовУчета_3_0_41_13()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоТекущегоГода", НачалоГода(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату()));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_ВзаимосвязьОборудованияИОбъектовУчета.ОбъектУстановки КАК ОбъектУстановки
	|ПОМЕСТИТЬ втОбъектыУстановки
	|ИЗ
	|	РегистрСведений.УПЖКХ_ВзаимосвязьОборудованияИОбъектовУчета КАК УПЖКХ_ВзаимосвязьОборудованияИОбъектовУчета
	|ГДЕ
	|	УПЖКХ_ВзаимосвязьОборудованияИОбъектовУчета.Период = ДАТАВРЕМЯ(1, 1, 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_ЛицевыеСчета.ЛицевойСчет.Адрес.Владелец КАК ОбъектУстановки,
	|	МИНИМУМ(КВП_ЛицевыеСчета.Период) КАК ПериодУстановки
	|ПОМЕСТИТЬ втПериодыУстановки
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПервых(
	|			,
	|			ЛицевойСчет.Адрес.Владелец В
	|				(ВЫБРАТЬ
	|					втОбъектыУстановки.ОбъектУстановки
	|				ИЗ
	|					втОбъектыУстановки КАК втОбъектыУстановки)) КАК КВП_ЛицевыеСчета
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ЛицевыеСчета.ЛицевойСчет.Адрес.Владелец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОбъектыУстановки.ОбъектУстановки,
	|	ЕСТЬNULL(втПериодыУстановки.ПериодУстановки, &НачалоТекущегоГода) КАК ПериодУстановки
	|ИЗ
	|	втОбъектыУстановки КАК втОбъектыУстановки
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПериодыУстановки КАК втПериодыУстановки
	|		ПО втОбъектыУстановки.ОбъектУстановки = втПериодыУстановки.ОбъектУстановки";
	
	ВыборкаЗаписей = Запрос.Выполнить().Выбрать();
	Пока ВыборкаЗаписей.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.УПЖКХ_ВзаимосвязьОборудованияИОбъектовУчета.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ОбъектУстановки.Установить(ВыборкаЗаписей.ОбъектУстановки);
		НаборЗаписей.Прочитать();
		
		Для Каждого ТекущаяЗапись Из НаборЗаписей Цикл
			
			ТекущаяЗапись.Период      = ВыборкаЗаписей.ПериодУстановки;
			ТекущаяЗапись.Установлено = Истина;
			
			Попытка
				ЗаписатьОбъект(НаборЗаписей);
			Исключение
				ТекстСообщения = НСтр("ru='Не удалось записать данные в регистр ""Взаимосвязь оборудования и объектов учета""'");
				ЗаписьЖурналаРегистрации(ТекстСообщения, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры // ОбработатьЗаписиВРегистреУПЖКХ_ВзаимосвязьОборудованияИОбъектовУчета_3_0_41_13()

// Процедура заполняет табличную часть "Признаки неисправностей" документа "Заявка на выполнение работ" по
// данным помеченного на удаление реквизита "Признак неисправности".
//
Процедура ВыполнитьПереносПризнаковНеисправностейВДокументахЗаявкаАДС_3_0_41_13()
	
	// Получим заявки, в которых помеченный на удаление реквизит заполнен,
	// а табличная часть признаков неисправностей пуста.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ЗаявкаНаВыполнениеРабот.Ссылка,
	|	КВП_ЗаявкаНаВыполнениеРабот.Удалить_ПризнакНеисправности КАК ПризнакНеисправности
	|ПОМЕСТИТЬ врТаблицаЗаявок
	|ИЗ
	|	Документ.КВП_ЗаявкаНаВыполнениеРабот КАК КВП_ЗаявкаНаВыполнениеРабот
	|ГДЕ
	|	НЕ КВП_ЗаявкаНаВыполнениеРабот.Удалить_ПризнакНеисправности = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ПризнакиНеисправностей.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КВП_ЗаявкаНаВыполнениеРаботПризнакиНеисправностей.Ссылка
	|ПОМЕСТИТЬ врПризнакиНеисправностиВТЧ
	|ИЗ
	|	Документ.КВП_ЗаявкаНаВыполнениеРабот.ПризнакиНеисправностей КАК КВП_ЗаявкаНаВыполнениеРаботПризнакиНеисправностей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врТаблицаЗаявок КАК врТаблицаЗаявок
	|		ПО КВП_ЗаявкаНаВыполнениеРаботПризнакиНеисправностей.Ссылка = врТаблицаЗаявок.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врТаблицаЗаявок.Ссылка,
	|	врТаблицаЗаявок.ПризнакНеисправности
	|ИЗ
	|	врТаблицаЗаявок КАК врТаблицаЗаявок
	|		ЛЕВОЕ СОЕДИНЕНИЕ врПризнакиНеисправностиВТЧ КАК врПризнакиНеисправностиВТЧ
	|		ПО врТаблицаЗаявок.Ссылка = врПризнакиНеисправностиВТЧ.Ссылка
	|ГДЕ
	|	ЕСТЬNULL(врПризнакиНеисправностиВТЧ.Ссылка, ИСТИНА) = ИСТИНА";
	
	ВыборкаЗаявок = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗаявок.Следующий() Цикл
		
		ОбъектДокумента = ВыборкаЗаявок.Ссылка.ПолучитьОбъект();
		
		// Заполним новую ТЧ "Признаки неисправностей".
		НоваяСтрока = ОбъектДокумента.ПризнакиНеисправностей.Добавить();
		НоваяСтрока.ПризнакНеисправности = ВыборкаЗаявок.ПризнакНеисправности;
		
		// Запишем документ.
		ЗаписатьОбъект(ОбъектДокумента, РежимЗаписиДокумента.Запись);
		
	КонецЦикла;
	
КонецПроцедуры // ВыполнитьПереносПризнаковНеисправностейВДокументахЗаявкаАДС_3_0_41_13()

// Процедура заполняет новый ресурс "Находится на обслуживании" регистра сведений
// "Сведения об обслуживающих здания организациях".
//
Процедура ЗаполнитьПризнакОбслуживанияВРегистреУПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях_3_0_41_13()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях.Период,
	|	УПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях.Здание
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях КАК УПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях
	|ГДЕ
	|	УПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях.НаходитсяНаОбслуживании = ЛОЖЬ
	|	И НЕ УПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	
	ВыборкаРезультата = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаРезультата.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.УПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ВыборкаРезультата.Период);
		НаборЗаписей.Отбор.Здание.Установить(ВыборкаРезультата.Здание);
		
		НаборЗаписей.Прочитать();
		
		Для Каждого СтрокаЗаписи ИЗ НаборЗаписей Цикл
			СтрокаЗаписи.НаходитсяНаОбслуживании = Истина;
		КонецЦикла;
		
		ЗаписатьОбъект(НаборЗаписей);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПризнакОбслуживанияВРегистреУПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях_3_0_41_13()

// Процедура заполняет оставленные незаполненными обязательные ресурсы в "Учетной политике (ЖКХ)".
//
Процедура ЗаполнитьОбязательныеПоляВУчетнойПолитикеЖКХ_3_0_41_13()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_УчетнаяПолитикаТСЖ.Период,
	|	КВП_УчетнаяПолитикаТСЖ.Организация,
	|	ВЫБОР
	|		КОГДА КВП_УчетнаяПолитикаТСЖ.ВариантРаспределенияОплат = ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыРаспределенияОплат.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НетВариантаРаспределенияОплат,
	|	ВЫБОР
	|		КОГДА КВП_УчетнаяПолитикаТСЖ.ВидСчетаУчетаУслугиДляОтраженияВРеглУчете = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыСчетовУчетаУслугДляОтраженияВРеглУчете.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НетВидаСчетаУчетаУслугиДляОтраженияВРеглУчете
	|ИЗ
	|	РегистрСведений.КВП_УчетнаяПолитикаТСЖ КАК КВП_УчетнаяПолитикаТСЖ
	|ГДЕ
	|	КВП_УчетнаяПолитикаТСЖ.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И (КВП_УчетнаяПолитикаТСЖ.ВариантРаспределенияОплат = ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыРаспределенияОплат.ПустаяСсылка)
	|			ИЛИ КВП_УчетнаяПолитикаТСЖ.ВидСчетаУчетаУслугиДляОтраженияВРеглУчете = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыСчетовУчетаУслугДляОтраженияВРеглУчете.ПустаяСсылка))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.КВП_УчетнаяПолитикаТСЖ.СоздатьМенеджерЗаписи();
		НаборЗаписей.Период      = Выборка.Период;
		НаборЗаписей.Организация = Выборка.Организация;
		НаборЗаписей.Прочитать();
		
		ДатаОкончанияДействия = УПЖКХ_ОбщегоНазначенияСервер.НайтиДатуОкончанияДействияЖКХ(Выборка.Период, Выборка.Организация);
		
		ТекстСообщения = "В ""Учетной политике (ЖКХ)"" для организации """ + Выборка.Организация + """ за период с "
					   + Формат(Выборка.Период, "ДФ=дд.ММ.гггг") + " по " + Формат(ДатаОкончанияДействия, "ДФ=дд.ММ.гггг")
					   + " обнаружены не заполненные настройки, которые являются обязательными:"+ Символы.ПС;
		
		Если НаборЗаписей.Выбран() Тогда
			
			// Нумератор выводимого сообщения.
			НомерПараметра = 0;
			
			Если Выборка.НетВариантаРаспределенияОплат Тогда
				НаборЗаписей.ВариантРаспределенияОплат = Перечисления.КВП_ВариантыРаспределенияОплат.ПоНачислениямЗатемПоДолгам; // первый в списке выбора
				НомерПараметра = НомерПараметра + 1;
				ТекстСообщения = ТекстСообщения + НомерПараметра + ". Вариант распределения суммы оплат: установлено значение по-умолчанию ""В первую очередь по начислениям за услуги, затем по долгам""." + Символы.ПС;
			КонецЕсли;
			
			Если Выборка.НетВидаСчетаУчетаУслугиДляОтраженияВРеглУчете Тогда
				НаборЗаписей.ВидСчетаУчетаУслугиДляОтраженияВРеглУчете = Перечисления.КВП_ВидыСчетовУчетаУслугДляОтраженияВРеглУчете.СчетУчета; // первый в списке выбора
				НомерПараметра = НомерПараметра + 1;
				ТекстСообщения = ТекстСообщения + НомерПараметра + ". Вид счета учета услуги для отражения в регл. учете: установлено значение по-умолчанию ""Счет учета""." + Символы.ПС;
			КонецЕсли;
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстСообщения);
			
			ЗаписатьОбъект(НаборЗаписей);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьОбязательныеПоляВУчетнойПолитикеЖКХ_3_0_41_13()

// Процедура заполняет оставленные незаполненными обязательные ресурсы в "Настройках формирования платежного документа (ЖКХ)".
//
Процедура ЗаполнитьОбязательныеПоляВНастройкахФормированияПлатежногоДокумента_3_0_41_13()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.Организация,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НастройкиФормированияПлатежногоДокумента.ФормаКвитанции В ("""", ЗНАЧЕНИЕ(Справочник.ДополнительныеОтчетыИОбработки.ПустаяСсылка))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НетФормыКвитанции,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НастройкиФормированияПлатежногоДокумента.ВидШтрихкода = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыШтрихкодовДляКвитанций.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НетВидаШтрихкода,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НастройкиФормированияПлатежногоДокумента.ВариантОпределенияФорматаШтрихкода = ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыОпределенияФорматаШтрихкода.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НетВариантаОпределенияФорматаШтрихкода,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НастройкиФормированияПлатежногоДокумента.РазделительДробнойЧастиСуммы = """"
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НетРазделителяДробнойЧастиСуммы,
	|	ВЫБОР
	|		КОГДА (УПЖКХ_НастройкиФормированияПлатежногоДокумента.ОтображатьКонтрольнуюСуммуПоОсн
	|				ИЛИ УПЖКХ_НастройкиФормированияПлатежногоДокумента.ОтображатьКонтрольнуюСуммуПоКР)
	|				И УПЖКХ_НастройкиФормированияПлатежногоДокумента.СхемаДляРасчетаКонтрольнойСуммы = """"
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НетСхемыДляРасчетаКонтрольнойСуммы,
	|	ВЫБОР
	|		КОГДА УПЖКХ_НастройкиФормированияПлатежногоДокумента.ФорматКодировкиТекстаQR = 0
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НетФорматаКодировкиТекстаQR
	|ИЗ
	|	РегистрСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента КАК УПЖКХ_НастройкиФормированияПлатежногоДокумента
	|ГДЕ
	|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И (УПЖКХ_НастройкиФормированияПлатежногоДокумента.ФормаКвитанции В ("""", ЗНАЧЕНИЕ(Справочник.ДополнительныеОтчетыИОбработки.ПустаяСсылка))
	|			ИЛИ УПЖКХ_НастройкиФормированияПлатежногоДокумента.ВидШтрихкода = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыШтрихкодовДляКвитанций.ПустаяСсылка)
	|			ИЛИ УПЖКХ_НастройкиФормированияПлатежногоДокумента.ВариантОпределенияФорматаШтрихкода = ЗНАЧЕНИЕ(Перечисление.КВП_ВариантыОпределенияФорматаШтрихкода.ПустаяСсылка)
	|			ИЛИ УПЖКХ_НастройкиФормированияПлатежногоДокумента.РазделительДробнойЧастиСуммы = """"
	|			ИЛИ (УПЖКХ_НастройкиФормированияПлатежногоДокумента.ОтображатьКонтрольнуюСуммуПоОсн
	|				ИЛИ УПЖКХ_НастройкиФормированияПлатежногоДокумента.ОтображатьКонтрольнуюСуммуПоКР)
	|				И УПЖКХ_НастройкиФормированияПлатежногоДокумента.СхемаДляРасчетаКонтрольнойСуммы = """"
	|			ИЛИ УПЖКХ_НастройкиФормированияПлатежногоДокумента.ФорматКодировкиТекстаQR = 0)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента.СоздатьМенеджерЗаписи();
		НаборЗаписей.Организация = Выборка.Организация;
		НаборЗаписей.Прочитать();
		
		ТекстСообщения = "В ""Настройках формирования платежного документа (ЖКХ)"" для организации """ + Выборка.Организация + """"
					   + " обнаружены не заполненные настройки, которые являются обязательными:"+ Символы.ПС;
		
		Если НаборЗаписей.Выбран() Тогда
			
			// Нумератор выводимого сообщения
			НомерПараметра = 0;
			
			Если Выборка.НетФормыКвитанции Тогда
				НаборЗаписей.ФормаКвитанции = "Стандартный"; // первый в списке выбора
				НомерПараметра = НомерПараметра + 1;
				ТекстСообщения = ТекстСообщения + НомерПараметра + ". Форма квитанции. Установлено значение по-умолчанию ""Плат. документ (приказ №454 в соответ. с пост. №354)""." + Символы.ПС;
			КонецЕсли;
			
			Если Выборка.НетВидаШтрихкода Тогда
				НаборЗаписей.ВидШтрихкода = Перечисления.КВП_ВидыШтрихкодовДляКвитанций.Одномерный; // первый в списке выбора
				НомерПараметра = НомерПараметра + 1;
				ТекстСообщения = ТекстСообщения + НомерПараметра + ". Вид штрихкода. Установлено значение по-умолчанию ""Одномерный""." + Символы.ПС;
			КонецЕсли;
			
			Если Выборка.НетВариантаОпределенияФорматаШтрихкода Тогда
				НаборЗаписей.ВариантОпределенияФорматаШтрихкода = Перечисления.КВП_ВариантыОпределенияФорматаШтрихкода.Автоматически; // первый в списке выбора
				НомерПараметра = НомерПараметра + 1;
				ТекстСообщения = ТекстСообщения + НомерПараметра + ". Вариант определения формата штрихкода. Установлено значение по-умолчанию ""автоматически""." + Символы.ПС;
			КонецЕсли;
			
			Если Выборка.НетРазделителяДробнойЧастиСуммы Тогда
				НаборЗаписей.РазделительДробнойЧастиСуммы = "не выводить"; // первый в списке выбора
				НомерПараметра = НомерПараметра + 1;
				ТекстСообщения = ТекстСообщения + НомерПараметра + ". Вариант вывода разделителя дроб. части суммы. Установлено значение по-умолчанию ""не выводить""." + Символы.ПС;
			КонецЕсли;
			
			Если Выборка.НетСхемыДляРасчетаКонтрольнойСуммы Тогда
				НаборЗаписей.СхемаДляРасчетаКонтрольнойСуммы = "Схема №1"; // первый в списке выбора
				НомерПараметра = НомерПараметра + 1;
				ТекстСообщения = ТекстСообщения + НомерПараметра + ". Схема для расчета контрольной суммы. Установлено значение по-умолчанию ""Схема №1""." + Символы.ПС;
			КонецЕсли;
			
			Если Выборка.НетФорматаКодировкиТекстаQR Тогда
				НаборЗаписей.ФорматКодировкиТекстаQR = 2; // соответствует UTF-8
				НомерПараметра = НомерПараметра + 1;
				ТекстСообщения = ТекстСообщения + НомерПараметра + ". Формат кодировки текста QR. Установлено значение по-умолчанию ""2 (соответствует UTF-8)""." + Символы.ПС;
			КонецЕсли;
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстСообщения);
			
			// Применяем изменения.
			ЗаписатьОбъект(НаборЗаписей);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьОбязательныеПоляВНастройкахФормированияПлатежногоДокумента_3_0_41_13()

// Процедура производит заполнение нового ресурса "Причина отключения" в регистре сведений "Закрепленные счетчики"
// и нового реквизита "Причина отключения" документа "Установка счетчика".
//
Процедура ЗаполнитьПричинуОтключенияПУВДокументеУстановкиСчетчиковИРегистреЗакрепленныхСчетчиков_3_0_42_2()
	
	// 1. Обработка документа "Установка счетчика".
	// Для всех документов отключения счетчика установим причину отключения "Прочее".
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_УстановкаСчетчика.Ссылка
	|ИЗ
	|	Документ.КВП_УстановкаСчетчика КАК КВП_УстановкаСчетчика
	|ГДЕ
	|	КВП_УстановкаСчетчика.Действие = ""Отключить счетчик""
	|	И КВП_УстановкаСчетчика.ПричинаОтключения = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ПричиныОтключенияПриборовУчета.ПустаяСсылка)";
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ПричинаОтключения = Перечисления.УПЖКХ_ПричиныОтключенияПриборовУчета.Прочее;
		ЗаписатьОбъект(ДокументОбъект, РежимЗаписиДокумента.Запись);
		
	КонецЦикла;
	
	// 2. Обработка регистра сведений "Закрепленные счетчики".
	// Если в сведениях об отключении счетчика был указан признак поверки, то установим причину отключения "Поверка".
	// В остальных случаях установим причину отключения "Прочее".
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КВП_ЗакрепленныеСчетчики.Регистратор
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики КАК КВП_ЗакрепленныеСчетчики
	|ГДЕ
	|	НЕ КВП_ЗакрепленныеСчетчики.Действует
	|	И КВП_ЗакрепленныеСчетчики.ПричинаОтключения = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ПричиныОтключенияПриборовУчета.ПустаяСсылка)";
	
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаРегистраторов.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.КВП_ЗакрепленныеСчетчики.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистраторов.Регистратор);
		НаборЗаписей.Прочитать();
		
		Для Каждого ТекЗапись Из НаборЗаписей Цикл
			
			// Еще раз проверяем условие отсечения, так как в наборе могут быть записи,
			// которые не нужно обрабатывать.
			Если Не ТекЗапись.Действует
			   И ТекЗапись.ПричинаОтключения = Перечисления.УПЖКХ_ПричиныОтключенияПриборовУчета.ПустаяСсылка() Тогда
				
				Если ТипЗнч(ВыборкаРегистраторов.Регистратор) = Тип("ДокументСсылка.КВП_ЗакрытиеЛицевогоСчета") Тогда
					ТекЗапись.ПричинаОтключения = Перечисления.УПЖКХ_ПричиныОтключенияПриборовУчета.ЗакрытиеЛицевогоСчета;
				ИначеЕсли ТекЗапись.УдалитьПоверка Тогда
					ТекЗапись.ПричинаОтключения = Перечисления.УПЖКХ_ПричиныОтключенияПриборовУчета.Поверка;
				Иначе
					ТекЗапись.ПричинаОтключения = Перечисления.УПЖКХ_ПричиныОтключенияПриборовУчета.Прочее;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗаписатьОбъект(НаборЗаписей);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьПричинуОтключенияПУВДокументеУстановкиСчетчиковИРегистреЗакрепленныхСчетчиков_3_0_42_2()

// Процедура устанвливает значение по умолчанию "ММГГГГ" для нового ресурса "ФорматПериодаОплаты" регистра
// сведений "УПЖКХ_НастройкиФормированияПлатежногоДокумента".
//
Процедура ЗаполнитьЗначениеНовогоРесурсаФорматПериодаОплатыДляНастроекФормированияПД_3_0_42_2()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента КАК УПЖКХ_НастройкиФормированияПлатежногоДокумента
	|ГДЕ
	|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.ФорматПериодаОплаты = """"
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.Организация";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента.СоздатьМенеджерЗаписи();
		НаборЗаписей.Организация = Выборка.Организация;
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Выбран() Тогда
			НаборЗаписей.ФорматПериодаОплаты = "ММГГГГ"; // для периода "январь 2015" соответствует значению 012015
			ЗаписатьОбъект(НаборЗаписей);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьЗначениеНовогоРесурсаФорматПериодаОплатыДляНастроекФормированияПД_3_0_42_2()

// Процедура проверяет корректность проведения документов "Установка тарифов",
// так как раньше если таблица объектов не заполена, то для вида операции "Установка тарифа"
// с установленным флагом "Устанавливать на объекты", а также для вида операции "Отмена тарифа"
// со снятым флагом "Отменить действие тарифа для всех объектов", документ проводился без движений
// в регистр сведений "Тарифы".
//
Процедура ПроверитьКорректностьПроведенияДокументовУстановкаТарифов_3_0_42_8(СтруктураРезультатаОбновления)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_Тарифы.Регистратор
	|ПОМЕСТИТЬ РегистраторыРегистра
	|ИЗ
	|	РегистрСведений.КВП_Тарифы КАК КВП_Тарифы
	|ГДЕ
	|	КВП_Тарифы.Регистратор ССЫЛКА Документ.КВП_УстановкаТарифов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_УстановкаТарифов.Ссылка,
	|	КВП_УстановкаТарифов.Представление
	|ИЗ
	|	Документ.КВП_УстановкаТарифов КАК КВП_УстановкаТарифов
	|ГДЕ
	|	КВП_УстановкаТарифов.Проведен
	|	И НЕ КВП_УстановкаТарифов.Ссылка В
	|				(ВЫБРАТЬ
	|					РегистраторыРегистра.Регистратор
	|				ИЗ
	|					РегистраторыРегистра КАК РегистраторыРегистра)";
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	Если Таблица.Количество() > 0 Тогда
		
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		Макет             = ПолучитьМакет("НекорректноеПроведениеДокументовУстановкаТарифов");
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		ТабличныйДокумент.ОтображатьСетку     = Ложь;
		ТабличныйДокумент.ОтображатьЗаголовки = Ложь;
		ТабличныйДокумент.Защита              = Истина;
		
		ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");
		
		Для Каждого ТекущаяСтрока Из Таблица Цикл
			
			// Отменим проведение документа.
			ТекущийДокумент = ТекущаяСтрока.Ссылка;
			ДокументОбъект  = ТекущийДокумент.ПолучитьОбъект();
			ЗаписатьОбъект(ДокументОбъект, РежимЗаписиДокумента.ОтменаПроведения);
			
			ОбластьДетальныхЗаписей.Параметры.Заполнить(ТекущаяСтрока);
			ТабличныйДокумент.Вывести(ОбластьДетальныхЗаписей);
			
		КонецЦикла;
		
		АдресМакета = ПоместитьВоВременноеХранилище(ТабличныйДокумент, Новый УникальныйИдентификатор);
		СтруктураРезультатаОбновления.Вставить("ДокументыУстановкаТарифовСНевернымиДвижениями", АдресМакета);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьКорректностьПроведенияДокументовУстановкаТарифов_3_0_42_8()

// Процедура заполняет реквизит "СпособУчетаОборудованияВРеглУчете"
// элементов справочника "УПЖКХ_ПрочиеОбъектыУчета".
//
Процедура ЗаполнитьСпособУчетаОборудованияВРеглУчете_3_0_43_3()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_ПрочиеОбъектыУчета.Ссылка,
	|	УПЖКХ_ПрочиеОбъектыУчета.ОсновноеСредство
	|ИЗ
	|	Справочник.УПЖКХ_ПрочиеОбъектыУчета КАК УПЖКХ_ПрочиеОбъектыУчета
	|ГДЕ
	|	УПЖКХ_ПрочиеОбъектыУчета.СпособУчетаОборудованияВРеглУчете = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СпособыУчетаОборудованияВРеглУчете.ПустаяСсылка)
	|	И НЕ УПЖКХ_ПрочиеОбъектыУчета.ЭтоГруппа";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОборудованиеОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если ЗначениеЗаполнено(ОборудованиеОбъект.ОсновноеСредство) Тогда
			ОборудованиеОбъект.СпособУчетаОборудованияВРеглУчете = Перечисления.УПЖКХ_СпособыУчетаОборудованияВРеглУчете.ОсновноеСредство;
		Иначе
			ОборудованиеОбъект.СпособУчетаОборудованияВРеглУчете = Перечисления.УПЖКХ_СпособыУчетаОборудованияВРеглУчете.Материал;
		КонецЕсли;
		
		ЗаписатьОбъект(ОборудованиеОбъект);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСпособУчетаОборудованияВРеглУчете_3_0_43_3()

// Процедура заполняет ресурс "Количество" в записях регистра сведений "УПЖКХ_ВзаимосвязьОборудованияИОбъектовУчета".
//
Процедура ЗаполнитьКоличествоВСведенияхОбУстановленномНаОбъектахУчетаОборудовании_3_0_43_3()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_ВзаимосвязьОборудованияИОбъектовУчета.Период,
	|	УПЖКХ_ВзаимосвязьОборудованияИОбъектовУчета.ОбъектУстановки,
	|	УПЖКХ_ВзаимосвязьОборудованияИОбъектовУчета.Оборудование
	|ИЗ
	|	РегистрСведений.УПЖКХ_ВзаимосвязьОборудованияИОбъектовУчета КАК УПЖКХ_ВзаимосвязьОборудованияИОбъектовУчета
	|ГДЕ
	|	УПЖКХ_ВзаимосвязьОборудованияИОбъектовУчета.Количество = 0";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.УПЖКХ_ВзаимосвязьОборудованияИОбъектовУчета.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
		НаборЗаписей.Отбор.ОбъектУстановки.Установить(Выборка.ОбъектУстановки);
		НаборЗаписей.Отбор.Оборудование.Установить(Выборка.Оборудование);
		
		НаборЗаписей.Прочитать();
		
		Для Каждого ТекЗапись Из НаборЗаписей Цикл
			ТекЗапись.Количество = 1;
		КонецЦикла;
		
		ЗаписатьОбъект(НаборЗаписей);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьКоличествоВСведенияхОбУстановленномНаОбъектахУчетаОборудовании_3_0_43_3()

// Процедура проверяет корректность заполнения реквизита "Вид услуги" элементов справочника "Услуги".
//
Процедура ПроверитьКорректностьЗаполненияВидовУслугВСправочникеУслуг_3_0_43_4(СтруктураРезультатаОбновления)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_Услуги.Ссылка
	|ИЗ
	|	Справочник.КВП_Услуги КАК КВП_Услуги
	|ГДЕ
	|	НЕ КВП_Услуги.ЭтоГруппа
	|	И КВП_Услуги.ВидУслуги = ЗНАЧЕНИЕ(Справочник.КВП_ВидыУслуг.ПустаяСсылка)";
	
	ТаблицаУслугБезВидаУслуг = Запрос.Выполнить().Выгрузить();
	
	Если НЕ ТаблицаУслугБезВидаУслуг.Количество() = 0 Тогда
		
		// Получим макет и определим области.
		ТабличныйДокумент    = ПолучитьМакет("МакетУслугиСНезаполненнымиВидамиУслуг");
		ОбластьЗаголовок     = ТабличныйДокумент.ПолучитьОбласть("ШапкаОтчета");
		ОбластьШапкаТаблицы  = ТабличныйДокумент.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтрокаТаблицы = ТабличныйДокумент.ПолучитьОбласть("СтрокаТаблицы");
		
		// Выведем области в табличный документ.
		МакетОписаниеОбновлений = Новый ТабличныйДокумент;
		МакетОписаниеОбновлений.Вывести(ОбластьЗаголовок);
		МакетОписаниеОбновлений.Вывести(ОбластьШапкаТаблицы);
		
		// Заполним параметры области "ОбластьСтрокаТаблицы" и выводим в табличный документ.
		НомерСтроки = 1;
		Для Каждого ТекСтрока Из ТаблицаУслугБезВидаУслуг Цикл
			УслугаСсылка                                = ТекСтрока.Ссылка;
			ОбластьСтрокаТаблицы.Параметры.НомерСтроки  = НомерСтроки;
			ОбластьСтрокаТаблицы.Параметры.УслугаСсылка = УслугаСсылка;
			МакетОписаниеОбновлений.Вывести(ОбластьСтрокаТаблицы);
			НомерСтроки = НомерСтроки + 1;
		КонецЦикла;
		
		// Передаем заполненный табличный документ для вывода.
		АдресМакета = ПоместитьВоВременноеХранилище(МакетОписаниеОбновлений, Новый УникальныйИдентификатор);
		СтруктураРезультатаОбновления.Вставить("УслугиБезВидовУслуг", АдресМакета);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьКорректностьЗаполненияВидовУслугВСправочникеУслуг_3_0_43_4()

// Процедура производит заполнение новых реквизитов "Коэффициент трансформации" и "Температурный коэффициент"
// в документе "Ввод показаний счетчика" и аналогичных новых ресурсов в регистре сведений "Показания счетчиков".
//
Процедура ЗаполнитьКоэффициентыТемпературныйИТрансформацииВРегистреПоказанийСчетчиков_3_0_43_4()
	
	// Обработаем документ "Ввод показаний счетчика", заполнив температурный коэффициент
	// значением 1, а коэффициент трансформации значением коэффициента из справочника приборов учета.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_ВводПоказанийСчетчика.Ссылка КАК Ссылка,
	|	УПЖКХ_ВводПоказанийСчетчика.НомерСтроки,
	|	УПЖКХ_ВводПоказанийСчетчика.Счетчик,
	|	УПЖКХ_ВводПоказанийСчетчика.Счетчик.Коэффициент КАК КоэффициентТрансформации
	|ИЗ
	|	Документ.УПЖКХ_ВводПоказанийСчетчика.Главная КАК УПЖКХ_ВводПоказанийСчетчика
	|ГДЕ
	|	(УПЖКХ_ВводПоказанийСчетчика.КоэффициентТрансформации = 0
	|			ИЛИ УПЖКХ_ВводПоказанийСчетчика.ТемпературныйКоэффициент = 0)
	|ИТОГИ ПО
	|	Ссылка";
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаДокументов.Следующий() Цикл
		
		// 1. Обработка документа.
		
		// Получим объект документа.
		ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		
		// Если документ проведен, то нужно обрабатывать движения.
		НужнаОбработкаДвижений = ДокументОбъект.Проведен;
		Если НужнаОбработкаДвижений Тогда
			
			НаборЗаписей = РегистрыСведений.КВП_ПоказанияСчетчиков.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ДокументОбъект.Ссылка);
			НаборЗаписей.Прочитать();
			
			ТаблицаНабораЗаписей = НаборЗаписей.Выгрузить();
			ТаблицаНабораЗаписей.Индексы.Добавить("Счетчик");
			
		КонецЕсли;
		
		ВыборкаСтрок = ВыборкаДокументов.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСтрок.Следующий() Цикл
			
			// Получим строку счетчика по номеру строки.
			СтрокаСчетчикавТЧ = ДокументОбъект.Главная.Получить(ВыборкаСтрок.НомерСтроки - 1);
			
			// Установим значение коэффициента трансформации.
			Если СтрокаСчетчикавТЧ.КоэффициентТрансформации = 0 Тогда
				СтрокаСчетчикавТЧ.КоэффициентТрансформации = ВыборкаСтрок.КоэффициентТрансформации;
			КонецЕсли;
			
			// Установим значение температурного коэффициента.
			Если СтрокаСчетчикавТЧ.ТемпературныйКоэффициент = 0 Тогда
				СтрокаСчетчикавТЧ.ТемпературныйКоэффициент = 1;
			КонецЕсли;
			
			// Если нужна обработка движений, обработаем записи по счетчику.
			Если НужнаОбработкаДвижений Тогда
				
				СтрокаДвиженияСчетчика = ТаблицаНабораЗаписей.Найти(ВыборкаСтрок.Счетчик, "Счетчик");
				Если Не СтрокаДвиженияСчетчика = Неопределено Тогда
					
					// Установим значение коэффициента трансформации.
					Если СтрокаДвиженияСчетчика.КоэффициентТрансформации = 0 Тогда
						СтрокаДвиженияСчетчика.КоэффициентТрансформации = ВыборкаСтрок.КоэффициентТрансформации;
					КонецЕсли;
					
					// Установим значение температурного коэффициента.
					Если СтрокаДвиженияСчетчика.ТемпературныйКоэффициент = 0 Тогда
						СтрокаДвиженияСчетчика.ТемпературныйКоэффициент = 1;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Запись документа.
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ЗаписатьОбъект(ДокументОбъект, РежимЗаписиДокумента.Запись);
		
		// Запись движений документа.
		Если НужнаОбработкаДвижений Тогда
			НаборЗаписей.Загрузить(ТаблицаНабораЗаписей);
			ЗаписатьОбъект(НаборЗаписей);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьКоэффициентыТемпературныйИТрансформацииВРегистреПоказанийСчетчиков_3_0_43_4()

// Процедура заполняет значение реквизита "Отклонение по времени по Гринвичу" справочника "Часовые зоны по Oslon".
Процедура ЗаполнитьОтклонениеВЧасовыхЗонахПоOslon_3_0_43_4()
	
	ТаблицаОтклонений = Новый ТаблицаЗначений;
	ТаблицаОтклонений.Колонки.Добавить("Город", Новый ОписаниеТипов("Строка"));
	ТаблицаОтклонений.Колонки.Добавить("Отклонение", Новый ОписаниеТипов("Число"));
	
	ЗаполнитьСтрокуСОтклонениемВЧасовыхЗонахПоOslon(ТаблицаОтклонений, "Калининград", 2);
	ЗаполнитьСтрокуСОтклонениемВЧасовыхЗонахПоOslon(ТаблицаОтклонений, "Москва", 3);
	ЗаполнитьСтрокуСОтклонениемВЧасовыхЗонахПоOslon(ТаблицаОтклонений, "Симферополь", 3);
	ЗаполнитьСтрокуСОтклонениемВЧасовыхЗонахПоOslon(ТаблицаОтклонений, "Волгоград", 3);
	ЗаполнитьСтрокуСОтклонениемВЧасовыхЗонахПоOslon(ТаблицаОтклонений, "Самара", 4);
	ЗаполнитьСтрокуСОтклонениемВЧасовыхЗонахПоOslon(ТаблицаОтклонений, "Екатеринбург", 5);
	ЗаполнитьСтрокуСОтклонениемВЧасовыхЗонахПоOslon(ТаблицаОтклонений, "Новосибирск", 6);
	ЗаполнитьСтрокуСОтклонениемВЧасовыхЗонахПоOslon(ТаблицаОтклонений, "Омск", 6);
	ЗаполнитьСтрокуСОтклонениемВЧасовыхЗонахПоOslon(ТаблицаОтклонений, "Красноярск", 7);
	ЗаполнитьСтрокуСОтклонениемВЧасовыхЗонахПоOslon(ТаблицаОтклонений, "Новокузнецк", 6);
	ЗаполнитьСтрокуСОтклонениемВЧасовыхЗонахПоOslon(ТаблицаОтклонений, "Иркутск", 8);
	ЗаполнитьСтрокуСОтклонениемВЧасовыхЗонахПоOslon(ТаблицаОтклонений, "Чита", 9);
	ЗаполнитьСтрокуСОтклонениемВЧасовыхЗонахПоOslon(ТаблицаОтклонений, "Якутск", 9);
	ЗаполнитьСтрокуСОтклонениемВЧасовыхЗонахПоOslon(ТаблицаОтклонений, "Хандыга", 9);
	ЗаполнитьСтрокуСОтклонениемВЧасовыхЗонахПоOslon(ТаблицаОтклонений, "Владивосток", 10);
	ЗаполнитьСтрокуСОтклонениемВЧасовыхЗонахПоOslon(ТаблицаОтклонений, "Магадан", 10);
	ЗаполнитьСтрокуСОтклонениемВЧасовыхЗонахПоOslon(ТаблицаОтклонений, "Сахалин", 10);
	ЗаполнитьСтрокуСОтклонениемВЧасовыхЗонахПоOslon(ТаблицаОтклонений, "Усть", 10);
	ЗаполнитьСтрокуСОтклонениемВЧасовыхЗонахПоOslon(ТаблицаОтклонений, "Среднеколымск", 11);
	ЗаполнитьСтрокуСОтклонениемВЧасовыхЗонахПоOslon(ТаблицаОтклонений, "Камчатка", 12);
	ЗаполнитьСтрокуСОтклонениемВЧасовыхЗонахПоOslon(ТаблицаОтклонений, "Анадырь", 12);
	
	Для Каждого СтрокаОтклонения Из ТаблицаОтклонений Цикл
		СправочникСсылка = Справочники.УПЖКХ_ЧасовыеЗоныПоOslon.НайтиПоНаименованию(СтрокаОтклонения.Город);
		
		Если Не СправочникСсылка.Ссылка.Пустая() И СправочникСсылка.ОтклонениеОтВремениПоГринвичу = 0 Тогда
			СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
			СправочникОбъект.ОтклонениеОтВремениПоГринвичу = СтрокаОтклонения.Отклонение;
			
			ЗаписатьОбъект(СправочникОбъект);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьОтклонениеВЧасовыхЗонахПоOslon_3_0_43_4()

// Заполняет строку в таблице с отклонениями в часовых зонах по Oslon.
Процедура ЗаполнитьСтрокуСОтклонениемВЧасовыхЗонахПоOslon(ТаблицаОтклонений, НазваниеГорода, Отклонение)

	НоваяСтрока = ТаблицаОтклонений.Добавить();
	
	НоваяСтрока.Город      = НазваниеГорода;
	НоваяСтрока.Отклонение = Отклонение;
	
КонецПроцедуры // ЗаполнитьСтрокуСОтклонениемВЧасовыхЗонахПоOslon()

// Процедура заполняет табличную часть "СтавкиПени" справочника "УПЖКХ_НастройкиРасчетаПени"
// и новый реквизит "НастройкаРасчетаПени" справочника "УПЖКХ_НастройкиУчетаКапремонта".
//
Процедура ЗаполнитьСтавкиПениВСправочникеНастроекРасчетаПени_3_0_43_4()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_НастройкиРасчетаПени.Ссылка,
	|	УПЖКХ_НастройкиРасчетаПени.УдалитьПроцентнаяСтавкаПени,
	|	УПЖКХ_НастройкиРасчетаПени.УдалитьДоляСтавкиРефинансированияЦБЧислитель,
	|	УПЖКХ_НастройкиРасчетаПени.УдалитьДоляСтавкиРефинансированияЦБЗнаменатель
	|ПОМЕСТИТЬ врНастройкиРасчетаПени
	|ИЗ
	|	Справочник.УПЖКХ_НастройкиРасчетаПени КАК УПЖКХ_НастройкиРасчетаПени
	|ГДЕ
	|	НЕ(УПЖКХ_НастройкиРасчетаПени.УдалитьПроцентнаяСтавкаПени = 0
	|				ИЛИ УПЖКХ_НастройкиРасчетаПени.УдалитьДоляСтавкиРефинансированияЦБЧислитель = 0
	|				ИЛИ УПЖКХ_НастройкиРасчетаПени.УдалитьДоляСтавкиРефинансированияЦБЗнаменатель = 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_НастройкиРасчетаПениСтавкиПени.Ссылка,
	|	МАКСИМУМ(УПЖКХ_НастройкиРасчетаПениСтавкиПени.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ врНастройкиРасчетаПениВТЧ
	|ИЗ
	|	Справочник.УПЖКХ_НастройкиРасчетаПени.СтавкиПени КАК УПЖКХ_НастройкиРасчетаПениСтавкиПени
	|ГДЕ
	|	УПЖКХ_НастройкиРасчетаПениСтавкиПени.Ссылка В
	|			(ВЫБРАТЬ
	|				врНастройкиРасчетаПени.Ссылка
	|			ИЗ
	|				врНастройкиРасчетаПени КАК врНастройкиРасчетаПени)
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_НастройкиРасчетаПениСтавкиПени.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врНастройкиРасчетаПени.Ссылка,
	|	врНастройкиРасчетаПени.УдалитьПроцентнаяСтавкаПени,
	|	врНастройкиРасчетаПени.УдалитьДоляСтавкиРефинансированияЦБЧислитель,
	|	врНастройкиРасчетаПени.УдалитьДоляСтавкиРефинансированияЦБЗнаменатель
	|ИЗ
	|	врНастройкиРасчетаПени КАК врНастройкиРасчетаПени
	|		ЛЕВОЕ СОЕДИНЕНИЕ врНастройкиРасчетаПениВТЧ КАК врНастройкиРасчетаПениВТЧ
	|		ПО врНастройкиРасчетаПени.Ссылка = врНастройкиРасчетаПениВТЧ.Ссылка
	|ГДЕ
	|	врНастройкиРасчетаПениВТЧ.Ссылка ЕСТЬ NULL ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НастройкиРасчетаПениОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		НоваяСтрока = НастройкиРасчетаПениОбъект.СтавкиПени.Добавить();
		НоваяСтрока.ДеньСоСрокаОплаты                       = 1;
		НоваяСтрока.ДоляСтавкиРефинансированияЦБЧислитель   = Выборка.УдалитьДоляСтавкиРефинансированияЦБЧислитель;
		НоваяСтрока.ДоляСтавкиРефинансированияЦБЗнаменатель = Выборка.УдалитьДоляСтавкиРефинансированияЦБЗнаменатель;
		НоваяСтрока.ПроцентнаяСтавкаПени                    = Выборка.УдалитьПроцентнаяСтавкаПени;
		
		ЗаписатьОбъект(НастройкиРасчетаПениОбъект);
		
	КонецЦикла;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_НастройкиУчетаКапремонта.Ссылка,
	|	КВП_УчетнаяПолитикаТСЖСрезПоследних.НастройкаРасчетаПени
	|ИЗ
	|	Справочник.УПЖКХ_НастройкиУчетаКапремонта КАК УПЖКХ_НастройкиУчетаКапремонта
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_УчетнаяПолитикаТСЖ.СрезПоследних(&Дата, ) КАК КВП_УчетнаяПолитикаТСЖСрезПоследних
	|		ПО УПЖКХ_НастройкиУчетаКапремонта.Владелец = КВП_УчетнаяПолитикаТСЖСрезПоследних.Организация
	|ГДЕ
	|	УПЖКХ_НастройкиУчетаКапремонта.НастройкаРасчетаПени = ЗНАЧЕНИЕ(Справочник.УПЖКХ_НастройкиРасчетаПени.ПустаяСсылка)
	|	И УПЖКХ_НастройкиУчетаКапремонта.ВестиРаздельныйУчетПоУслугамКапремонта = ИСТИНА
	|	И НЕ КВП_УчетнаяПолитикаТСЖСрезПоследних.НастройкаРасчетаПени ЕСТЬ NULL ";
	
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НастройкиУчетаКапремонтаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НастройкиУчетаКапремонтаОбъект.НастройкаРасчетаПени = Выборка.НастройкаРасчетаПени;
		
		ЗаписатьОбъект(НастройкиУчетаКапремонтаОбъект);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСтавкиПениВСправочникеНастроекРасчетаПени_3_0_43_4()

// Процедура получает настройки квитанций и сохраняет значения параметров квитанций под новым 
// ключем "ПараметрыОтчета_УПЖКХ_КвитанцииИзвещения".
Процедура ПеренестиНастройкиКвитанцийИзвещений_3_0_43_7()
	
	СтруктураПараметров = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("ПараметрыОтчета_КВП_КвитанцииИзвещения");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("ПараметрыОтчета_УПЖКХ_КвитанцииИзвещения", , СтруктураПараметров);
		
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.ПользовательскиеМакетыПечати.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить("Отчет.КВП_КвитанцииИзвещения");
	НаборЗаписей.Прочитать();
	
	НовыйОбъект = "Отчет.УПЖКХ_КвитанцииИзвещения";
	
	Для Каждого ТекущаяЗапись Из НаборЗаписей Цикл
		
		НовыйНаборЗаписей = РегистрыСведений.ПользовательскиеМакетыПечати.СоздатьНаборЗаписей();
		НовыйНаборЗаписей.Отбор.Объект.Установить(НовыйОбъект);
		НовыйНаборЗаписей.Отбор.ИмяМакета.Установить(ТекущаяЗапись.ИмяМакета);
		
		НовыйНаборЗаписей.Прочитать();
		
		Если НовыйНаборЗаписей.Количество() = 0 Тогда
			НоваяЗапись = НовыйНаборЗаписей.Добавить();
			НоваяЗапись.ИмяМакета      = ТекущаяЗапись.ИмяМакета;
			НоваяЗапись.Объект         = НовыйОбъект;
			НоваяЗапись.Макет          = Новый ХранилищеЗначения(ТекущаяЗапись.Макет.Получить(), Новый СжатиеДанных(9));
			НоваяЗапись.Использование  = Истина;
			
			ЗаписатьОбъект(НовыйНаборЗаписей);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура удаляет лишние пустые пробелы из ОКТМО зданий.
// (Пробелы были добавлены платформой после смены типа реквизита с "Число" на "Строка").
//
Процедура ОбработатьОКТМОЗданий_3_0_43_20()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_Здания.Ссылка КАК Здание,
	|	КВП_Здания.ОКТМО
	|ИЗ
	|	Справочник.КВП_Здания КАК КВП_Здания
	|ГДЕ
	|	НЕ КВП_Здания.ОКТМО = """"
	|	И НЕ КВП_Здания.ОКТМО = ""0""";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если ЛЕВ(Выборка.ОКТМО, 1) = "0" Тогда
			Продолжить;
		КонецЕсли;
		
		ЗданиеОбъект = Выборка.Здание.ПолучитьОбъект();
		Попытка
			Число = Число(ЗданиеОбъект.ОКТМО);
			
			ЗданиеОбъект.ОКТМО = Формат(Число, "ЧГ=0");
		Исключение
		КонецПопытки;
		ЗаписатьОбъект(ЗданиеОбъект);
	КонецЦикла;
	
КонецПроцедуры // ОбработатьОКТМОЗданий_3_0_43_20()

// Процедура заполняет новую ТЧ с коммунальными услугами в справочнике "Договоры управления домами".
//
Процедура ОбработатьПереченьКоммунальныхУслугВДоговорахУправления_3_0_43_20()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_ДоговорыУправленияДомами.Ссылка КАК ДоговорУправления,
	|	УПЖКХ_ДоговорыУправленияДомами.УдалитьПредоставляетОтопление КАК ПредоставляетОтопление,
	|	УПЖКХ_ДоговорыУправленияДомами.УдалитьПредоставляетГВС КАК ПредоставляетГВС,
	|	УПЖКХ_ДоговорыУправленияДомами.УдалитьПредоставляетХВС КАК ПредоставляетХВС,
	|	УПЖКХ_ДоговорыУправленияДомами.УдалитьПредоставляетВодоотведение КАК ПредоставляетВодоотведение,
	|	УПЖКХ_ДоговорыУправленияДомами.УдалитьПредоставляетЭлектроснабжение КАК ПредоставляетЭлектроснабжение,
	|	УПЖКХ_ДоговорыУправленияДомами.УдалитьПредоставляетГазоснабжение КАК ПредоставляетГазоснабжение
	|ПОМЕСТИТЬ втОтборПоФлагам
	|ИЗ
	|	Справочник.УПЖКХ_ДоговорыУправленияДомами КАК УПЖКХ_ДоговорыУправленияДомами
	|ГДЕ
	|	(УПЖКХ_ДоговорыУправленияДомами.УдалитьПредоставляетОтопление
	|			ИЛИ УПЖКХ_ДоговорыУправленияДомами.УдалитьПредоставляетГВС
	|			ИЛИ УПЖКХ_ДоговорыУправленияДомами.УдалитьПредоставляетХВС
	|			ИЛИ УПЖКХ_ДоговорыУправленияДомами.УдалитьПредоставляетВодоотведение
	|			ИЛИ УПЖКХ_ДоговорыУправленияДомами.УдалитьПредоставляетЭлектроснабжение
	|			ИЛИ УПЖКХ_ДоговорыУправленияДомами.УдалитьПредоставляетГазоснабжение)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_ДоговорыУправленияДомамиПереченьКоммунальныхУслуг.Ссылка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_ДоговорыУправленияДомамиПереченьКоммунальныхУслуг.НомерСтроки) КАК КоличествоЗаписей
	|ПОМЕСТИТЬ втЗаписиТЧ
	|ИЗ
	|	Справочник.УПЖКХ_ДоговорыУправленияДомами.ПереченьКоммунальныхУслуг КАК УПЖКХ_ДоговорыУправленияДомамиПереченьКоммунальныхУслуг
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_ДоговорыУправленияДомамиПереченьКоммунальныхУслуг.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗаписиТЧ.Ссылка
	|ПОМЕСТИТЬ втОтборПоТЧ
	|ИЗ
	|	втЗаписиТЧ КАК втЗаписиТЧ
	|ГДЕ
	|	втЗаписиТЧ.КоличествоЗаписей = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОтборПоФлагам.ДоговорУправления,
	|	втОтборПоФлагам.ПредоставляетОтопление,
	|	втОтборПоФлагам.ПредоставляетГВС,
	|	втОтборПоФлагам.ПредоставляетХВС,
	|	втОтборПоФлагам.ПредоставляетВодоотведение,
	|	втОтборПоФлагам.ПредоставляетЭлектроснабжение,
	|	втОтборПоФлагам.ПредоставляетГазоснабжение
	|ИЗ
	|	втОтборПоФлагам КАК втОтборПоФлагам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОтборПоТЧ КАК втОтборПоТЧ
	|		ПО втОтборПоФлагам.ДоговорУправления = втОтборПоТЧ.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДоговорОбъект = Выборка.ДоговорУправления.ПолучитьОбъект();
		
		ЗаполнитьКоммунальныеУслугиВДоговорах(ДоговорОбъект);
		
		ПроверитьЗаполнениеТекущейКоммунальнойУслуги(ДоговорОбъект.ПереченьКоммунальныхУслуг,
													 Выборка.ПредоставляетОтопление,
													 Перечисления.УПЖКХ_ВидыКоммунальныхУслуг.Отопление);
													 
		ПроверитьЗаполнениеТекущейКоммунальнойУслуги(ДоговорОбъект.ПереченьКоммунальныхУслуг,
													 Выборка.ПредоставляетГВС,
													 Перечисления.УПЖКХ_ВидыКоммунальныхУслуг.ГорячееВодоснабжение);
													 
		ПроверитьЗаполнениеТекущейКоммунальнойУслуги(ДоговорОбъект.ПереченьКоммунальныхУслуг,
													 Выборка.ПредоставляетХВС,
													 Перечисления.УПЖКХ_ВидыКоммунальныхУслуг.ХолодноеВодоснабжение);
													 
		ПроверитьЗаполнениеТекущейКоммунальнойУслуги(ДоговорОбъект.ПереченьКоммунальныхУслуг,
													 Выборка.ПредоставляетВодоотведение,
													 Перечисления.УПЖКХ_ВидыКоммунальныхУслуг.Водоотведение);
													 
		ПроверитьЗаполнениеТекущейКоммунальнойУслуги(ДоговорОбъект.ПереченьКоммунальныхУслуг,
													 Выборка.ПредоставляетЭлектроснабжение,
													 Перечисления.УПЖКХ_ВидыКоммунальныхУслуг.Электроснабжение);
													 
		ПроверитьЗаполнениеТекущейКоммунальнойУслуги(ДоговорОбъект.ПереченьКоммунальныхУслуг,
													 Выборка.ПредоставляетГазоснабжение,
													 Перечисления.УПЖКХ_ВидыКоммунальныхУслуг.Газоснабжение);
													 
		ЗаписатьОбъект(ДоговорОбъект);
	КонецЦикла;
	
КонецПроцедуры // ОбработатьПереченьКоммунальныхУслугВДоговорахУправления_3_0_43_20()

// Процедура заполняет новую ТЧ с коммунальными услугами в справочнике "Договоры управления домами" видами
// коммунальных услуг по умолчанию. 
//
// Параметры:
//  ДоговорУправления - СправочникОбъект.УПЖКХ_ДоговорыУправленияДомами - текущий договор управления.
//
Процедура ЗаполнитьКоммунальныеУслугиВДоговорах(ДоговорУправления)
	
	ТаблицаКУ = ДоговорУправления.ПереченьКоммунальныхУслуг;
	
	ПереченьКУ = Новый Массив;
	ПереченьКУ.Добавить(Перечисления.УПЖКХ_ВидыКоммунальныхУслуг.Отопление);
	ПереченьКУ.Добавить(Перечисления.УПЖКХ_ВидыКоммунальныхУслуг.ГорячееВодоснабжение);
	ПереченьКУ.Добавить(Перечисления.УПЖКХ_ВидыКоммунальныхУслуг.ХолодноеВодоснабжение);
	ПереченьКУ.Добавить(Перечисления.УПЖКХ_ВидыКоммунальныхУслуг.Водоотведение);
	ПереченьКУ.Добавить(Перечисления.УПЖКХ_ВидыКоммунальныхУслуг.Электроснабжение);
	ПереченьКУ.Добавить(Перечисления.УПЖКХ_ВидыКоммунальныхУслуг.Газоснабжение);
	
	Для Каждого КоммунальнаяУслуга Из ПереченьКУ Цикл
		НоваяСтрока = ТаблицаКУ.Добавить();
		НоваяСтрока.Услуга = КоммунальнаяУслуга;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьКоммунальныеУслугиВДоговорах()

// Процедура заполняет текущую строку новой ТЧ с коммунальными услугами в справочнике "Договоры управления домами".
//
// Параметры:
//  ТаблицаКУ - ТабличнаяЧасть - ТЧ справочника ДУ
//  ПредоставляетУслугу - Булево - признак предоставления текущей коммунальной услуги
//  КоммунальнаяУслуга - ПеречислениеСсылка.УПЖКХ_ВидыКоммунальныхУслуг - текущая коммунальная услуга.
//
Процедура ПроверитьЗаполнениеТекущейКоммунальнойУслуги(ТаблицаКУ, ПредоставляетУслугу, КоммунальнаяУслуга)
	
	Если ПредоставляетУслугу Тогда
		СтрокаУслуги = ТаблицаКУ.Найти(КоммунальнаяУслуга, "Услуга");
		
		Если Не СтрокаУслуги = Неопределено Тогда
			СтрокаУслуги.Предоставляет = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеТекущейКоммунальнойУслуги()

// Процедура создает документы "Управление сведениями для взаиморасчетов по л/с" по данным регистра сведений
// "Сведения для взаиморасчетов по л/с", а также производит замену регистраторов для записей данного регистра.
//
Процедура ПеренестиСведенияОВзаиморасчетахПоЛСВДокументУправленияСведениямиДляВзаиморасчетовПоЛС_3_0_43_21()
	
	// Получим и сгруппируем старые сведения для взаиморасчетов таким образом, чтобы по одной организации в пределах одного дня
	// создавать отдельный документ управления сведениями для взаиморасчетов.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Договор.Организация КАК Организация,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Период КАК Период,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Регистратор,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛС.ЛицевойСчет,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Договор,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Контрагент
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛС
	|ГДЕ
	|	(УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Регистратор ССЫЛКА Документ.КВП_ОткрытиеЛицевогоСчета
	|			ИЛИ УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Регистратор ССЫЛКА Документ.КВП_ИзменениеЛицевогоСчета)
	|	И УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|ИТОГИ ПО
	|	Организация,
	|	Период";
	
	// Результат запроса будем обходить в разрезе следующих группировок:
	// 1. Уровень организаций.
	// 2. Уровень периодов. На этом уровне будем создавать документ и заполнять основные реквизиты.
	// 3. Уровень сведений для взаиморасчетов. На этом уровне будем заполнять табличную часть сведений для взаиморасчетов.
	ВыборкаПоОрганизациям = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоОрганизациям.Следующий() Цикл
		
		ВыборкаПоПериодам = ВыборкаПоОрганизациям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоПериодам.Следующий() Цикл
			
			ДокументУправленияВзаиморасчетами = Документы.УПЖКХ_УправлениеСведениямиДляВзаиморасчетовПоЛицевымСчетам.СоздатьДокумент();
			ДокументУправленияВзаиморасчетами.Дата          = ВыборкаПоПериодам.Период;
			ДокументУправленияВзаиморасчетами.Организация   = ВыборкаПоПериодам.Организация;
			ДокументУправленияВзаиморасчетами.Комментарий   = "#Документ сформирован автоматически при первоначальном заполнении документов управления сведениями для взаиморасчетов";
			ДокументУправленияВзаиморасчетами.Ответственный = УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь();
			
			// Необходимо получить ссылку документа до его записи для установки отбора по регистратору в добавляемом наборе.
			ДокументУправленияВзаиморасчетами.УстановитьСсылкуНового(Документы.УПЖКХ_УправлениеСведениямиДляВзаиморасчетовПоЛицевымСчетам.ПолучитьСсылку());
			СсылкаНаДокумент = ДокументУправленияВзаиморасчетами.ПолучитьСсылкуНового();
			
			НаборЗаписейДокумента = РегистрыСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СоздатьНаборЗаписей();
			НаборЗаписейДокумента.Отбор.Регистратор.Установить(СсылкаНаДокумент);
			
			ВыборкаВзаиморасчетов = ВыборкаПоПериодам.Выбрать();
			
			Пока ВыборкаВзаиморасчетов.Следующий() Цикл
				
				СтрокаВзаиморасчетов = ДокументУправленияВзаиморасчетами.СведенияДляВзаиморасчетов.Добавить();
				СтрокаВзаиморасчетов.ЛицевойСчет        = ВыборкаВзаиморасчетов.ЛицевойСчет;
				СтрокаВзаиморасчетов.Контрагент         = ВыборкаВзаиморасчетов.Контрагент;
				СтрокаВзаиморасчетов.ДоговорКонтрагента = ВыборкаВзаиморасчетов.Договор;
				
				НоваяЗапись = НаборЗаписейДокумента.Добавить();
				НоваяЗапись.Регистратор = ДокументУправленияВзаиморасчетами.Ссылка;
				НоваяЗапись.Период      = ВыборкаПоПериодам.Период;
				НоваяЗапись.Организация = ВыборкаПоПериодам.Организация;
				НоваяЗапись.ЛицевойСчет = ВыборкаВзаиморасчетов.ЛицевойСчет;
				НоваяЗапись.Контрагент  = ВыборкаВзаиморасчетов.Контрагент;
				НоваяЗапись.Договор     = ВыборкаВзаиморасчетов.Договор;
				
			КонецЦикла;
			
			// Принудительно проставим отметку о проведении документа, но документ сохраним в режиме записи.
			ДокументУправленияВзаиморасчетами.Проведен = Истина;
			
			НовыйНаборЗаписан = Ложь;
			
			// Запись объектов производим в рамках транзакции:
			// 1. Сначала записываем документ управлениями сведениями для взаиморасчетов.
			// 2. Потом записываем набор записей регистра "Сведения для взаиморасчетов по л/с" с регистратором - новым созданным документом.
			НачатьТранзакцию();
			
			Попытка
				
				ЗаписатьОбъект(ДокументУправленияВзаиморасчетами, РежимЗаписиДокумента.Запись);
				ЗаписатьОбъект(НаборЗаписейДокумента);
				
				// После успешной записи документа и нового набора записей необходимо очистить записи по старым регистраторам.
				ВыборкаВзаиморасчетов.Сбросить();
				
				Пока ВыборкаВзаиморасчетов.Следующий() Цикл
					
					СтарыйНаборЗаписей = РегистрыСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СоздатьНаборЗаписей();
					СтарыйНаборЗаписей.Отбор.Регистратор.Установить(ВыборкаВзаиморасчетов.Регистратор);
					
					ЗаписатьОбъект(СтарыйНаборЗаписей);
					
				КонецЦикла;
				
				// Объекты успешно записаны - фиксируем транзакцию.
				ЗафиксироватьТранзакцию();
				
			Исключение
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось выполнить перенос сведений для взаиморасчетов по организации """ +
															ВыборкаПоПериодам.Организация + """ за " + Формат(ВыборкаПоПериодам.Период, "ДФ=dd.MM.yyyy") + ".");
													
				// Были ошибки записи - отменяем транзакцию.
				ОтменитьТранзакцию();
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаДанныхДляВзаиморасчетов = Документы.УПЖКХ_УправлениеСведениямиДляВзаиморасчетовПоЛицевымСчетам.ПолучитьДоговорыКонтрагентовНеУказанныеВСведенияхДляВзаиморасчетовПоЛС();
	
	Если ТаблицаДанныхДляВзаиморасчетов.Количество() > 0 Тогда
		
		ТекстПредупреждения = "В информационной базе используется обмен с сайтом ""1С: Сайт управляющей компании ЖКХ, ТСЖ и ЖСК"".
							  |Сведения для взаиморасчетов по лицевым счетам для некоторых организаций могут быть не заполнены,
							  |обмен данными с сайтом по таким лицевым счетам и организациям производиться не будет.
							  |Для заполнения сведений для взаиморасчетов необходимо создать документы ""Управление сведениями
							  |для взаиморасчетов по лицевым счетам"". Документ доступен в панели функций в разделе ""Лицевые счета"",
							  |а также через пункт главного меню ""Учет ЖКХ - Лицевые счета"".
							  |В форме списка документа ""Управление сведениями для взаиморасчетов по лицевым счетам"" доступно
							  |автоматическое формирование сведений для взаиморасчетов через соответствующее информационное окно.";
		
		ДобавитьСообщениеПользователю(ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры // ПеренестиСведенияОВзаиморасчетахПоЛСВДокументУправленияСведениямиДляВзаиморасчетовПоЛС_3_0_43_20()

// Процедура заполняет новый ресурс "Дата изменения" во всех записях
// регистра сведений "Закрепленные четчики".
//
Процедура ЗаполнитьРесурсДатаИзмененияРСЗакрепленныеСчетчики_3_0_43_22()
	
	// Получим все документы "Закрытие лицевого счета" и "Установка счетчиков",
	// движения которых еще не были обработаны.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КВП_ЗакрепленныеСчетчики.Регистратор,
	|	КВП_ЗакрепленныеСчетчики.Регистратор.Дата КАК Дата,
	|	ВЫБОР
	|		КОГДА КВП_ЗакрепленныеСчетчики.Регистратор ССЫЛКА Документ.КВП_УстановкаСчетчика
	|			ТОГДА КВП_ЗакрепленныеСчетчики.Регистратор.Действие
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Действие
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики КАК КВП_ЗакрепленныеСчетчики
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчики.ДатаИзменения = ДАТАВРЕМЯ(1, 1, 1)";
	
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		
		ЭтоЗакрытиеЛС  = (ТипЗнч(ВыборкаЗапроса.Регистратор) = Тип("ДокументСсылка.КВП_ЗакрытиеЛицевогоСчета"));
		ЭтоУстановкаПУ = (ТипЗнч(ВыборкаЗапроса.Регистратор) = Тип("ДокументСсылка.КВП_УстановкаСчетчика"));
		
		НаборЗаписейРС = РегистрыСведений.КВП_ЗакрепленныеСчетчики.СоздатьНаборЗаписей();
		НаборЗаписейРС.Отбор.Регистратор.Установить(ВыборкаЗапроса.Регистратор);
		НаборЗаписейРС.Прочитать();
		
		Для Каждого СтрокаЗаписи ИЗ НаборЗаписейРС Цикл
			Если ЭтоЗакрытиеЛС Тогда
				СтрокаЗаписи.Период        = КонецДня(ВыборкаЗапроса.Дата) + 1;
				СтрокаЗаписи.ДатаИзменения = КонецДня(ВыборкаЗапроса.Дата) + 1;
			ИначеЕсли ЭтоУстановкаПУ Тогда
				СтрокаЗаписи.ДатаИзменения = СтрокаЗаписи.Период;
				Если ВыборкаЗапроса.Действие = "Включить счетчик" Тогда
					Если СтрокаЗаписи.Действует Тогда
						СтрокаЗаписи.Период = ВыборкаЗапроса.Дата;
					Иначе
						СтрокаЗаписи.Период = ВыборкаЗапроса.Дата + 1;
					КонецЕсли;
				Иначе
					СтрокаЗаписи.Период = ВыборкаЗапроса.Дата;
				КонецЕсли;
			Иначе
				СтрокаЗаписи.ДатаИзменения = СтрокаЗаписи.Период;
				СтрокаЗаписи.Период        = ВыборкаЗапроса.Дата;
			КонецЕсли;
		КонецЦикла;
		
		ЗаписатьОбъект(НаборЗаписейРС);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьРесурсДатаИзмененияРСЗакрепленныеСчетчики_3_0_43_22()

// Процедура очищает ОКТМО зданий со значением "0".
//
Процедура ОчиститьНулевыеОКТМОВЗданиях_3_0_43_22()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_Здания.Ссылка КАК Здание
	|ИЗ
	|	Справочник.КВП_Здания КАК КВП_Здания
	|ГДЕ
	|	КВП_Здания.ОКТМО = ""0""";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗданиеОбъект = Выборка.Здание.ПолучитьОбъект();
		ЗданиеОбъект.ОКТМО = "";
		
		ЗаписатьОбъект(ЗданиеОбъект);
	КонецЦикла;
	
КонецПроцедуры // ОчиститьНулевыеОКТМОВЗданиях()

// Процедура выполняет установку констант "Вести учет по организациям".
//
Процедура ВыполнитьУстановкуКонстантВестиУчетПоОрганизациям_3_0_43_23()
	
	// Обработчик нужен для обновления значений констант после ошибочного переноса
	// значений настроек в новые константы с корректными идентификаторами.
	
	ОбновлениеИнформационнойБазыБП.УстановитьКонстантыВестиУчетПоОрганизациям();
	
КонецПроцедуры // ВыполнитьУстановкуКонстантВестиУчетПоОрганизациям_3_0_43_23()

// Процедура дополняет коды элементов справочника лидирующими нулями в связи с увеличением длины кода справочника
// с 3х до 9 символов.
//
Процедура ОбработатьКодыЭлементовСправочникаНастройкиЗагрузкиПослеУвеличенияДлиныКода_3_0_43_27()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_НастройкиЗагрузкиВыгрузки.Ссылка,
	|	КВП_НастройкиЗагрузкиВыгрузки.Код КАК Код
	|ИЗ
	|	Справочник.КВП_НастройкиЗагрузкиВыгрузки КАК КВП_НастройкиЗагрузкиВыгрузки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МассивНеобработанныхЭлементов = Новый Массив;
	Пока Выборка.Следующий() Цикл
		
		НоваяДлинаКода = Метаданные.Справочники.КВП_НастройкиЗагрузкиВыгрузки.ДлинаКода;
		ИсходныйКод = СокрЛП(Выборка.Код);
		
		Если СтрДлина(ИсходныйКод) = НоваяДлинаКода ТОгда
			Продолжить;
		КонецЕсли;
		
		ОбработанныйКод = ИсходныйКод;
		
		// Поиск префикса. Префикс и основная часть в ред. 3.0 отделяются "-" (Пример: ТС-002).
		ПозицияПрефикса = СтрНайти(ИсходныйКод, "-");
		Если ПозицияПрефикса > 0 Тогда
			Префикс = Лев(ИсходныйКод, ПозицияПрефикса);
			ОсновнаяЧасть = Прав(ИсходныйКод, СтрДлина(ИсходныйКод) - ПозицияПрефикса);
			НоваяДлинаКода = НоваяДлинаКода - СтрДлина(Префикс);
			
			// Может быть случай, когда у клиента в базе есть элемент с кодом "XX-", т.е. только префикс без основной части.
			// Данный элемент обработаем последним после цикла - ему присвоим следующий порядковый номер.
			Если ОсновнаяЧасть = "" Тогда
				МассивНеобработанныхЭлементов.Добавить(Выборка.Ссылка);
				Продолжить;
			КонецЕсли;
			
		Иначе
			Префикс = "";
			ОсновнаяЧасть = ИсходныйКод;
		КонецЕсли;
		
		Пока СтрДлина(ОсновнаяЧасть) < НоваяДлинаКода Цикл
			ОсновнаяЧасть = "0" + ОсновнаяЧасть;
		КонецЦикла;
		ОбработанныйКод = Префикс + ОсновнаяЧасть;
		
		Если Не ОбработанныйКод = ИсходныйКод Тогда
			СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
			СпрОбъект.Код = ОбработанныйКод;
			ЗаписатьОбъект(СпрОбъект);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ТекСсылка Из МассивНеобработанныхЭлементов Цикл
		
		// Устанавливаем новый код. Код уже устанавливается с учетом префикса.
		СпрОбъект = ТекСсылка.ПолучитьОбъект();
		СпрОбъект.УстановитьНовыйКод();
		
		// Записываем новый элемент с кодом.
		ЗаписатьОбъект(СпрОбъект);
		
	КонецЦикла;
	
КонецПроцедуры // ОбработатьКодыЭлементовСправочникаНастройкиЗагрузкиПослеУвеличенияДлиныКода_3_0_43_27()

// Процедура заполняет связи между документами "Регистрация оплаты" и типовыми документами
// отражения оплат (ПРС/СРС, ПКО/РКО) в регистре сведений "Связи документов оплат"
// на основании ссылок на типовые документы в табличной части документа "Регистрация оплаты".
//
Процедура ЗаполнитьСвязиДокументовОплатРегистрацииОплатИТиповыхДокументовОтраженияВРеглУчете_3_0_44_1()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КВП_РегистрацияОплатыЛицевыеСчета.Ссылка КАК ДокументРО,
	|	КВП_РегистрацияОплатыЛицевыеСчета.Ссылка.Организация КАК Организация,
	|	КВП_РегистрацияОплатыЛицевыеСчета.ДокументОплаты КАК ДокументОтражения
	|ПОМЕСТИТЬ ТаблицаДокументовОтражения
	|ИЗ
	|	Документ.КВП_РегистрацияОплаты.ЛицевыеСчета КАК КВП_РегистрацияОплатыЛицевыеСчета
	|ГДЕ
	|	КВП_РегистрацияОплатыЛицевыеСчета.Ссылка.Проведен
	|	И НЕ КВП_РегистрацияОплатыЛицевыеСчета.ДокументОплаты В (ЗНАЧЕНИЕ(Документ.ПоступлениеНаРасчетныйСчет.ПустаяСсылка), ЗНАЧЕНИЕ(Документ.СписаниеСРасчетногоСчета.ПустаяСсылка), ЗНАЧЕНИЕ(Документ.ПриходныйКассовыйОрдер.ПустаяСсылка), ЗНАЧЕНИЕ(Документ.РасходныйКассовыйОрдер.ПустаяСсылка), НЕОПРЕДЕЛЕНО)
	|	И НЕ КВП_РегистрацияОплатыЛицевыеСчета.ДокументОплаты ССЫЛКА Документ.КорректировкаДолга
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументРО,
	|	ДокументОтражения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаДокументовОтражения.ДокументРО КАК ДокументРО,
	|	ТаблицаДокументовОтражения.Организация,
	|	ТаблицаДокументовОтражения.ДокументОтражения
	|ИЗ
	|	ТаблицаДокументовОтражения КАК ТаблицаДокументовОтражения
	|ГДЕ
	|	НЕ (ТаблицаДокументовОтражения.ДокументРО, ТаблицаДокументовОтражения.ДокументОтражения) В
	|				(ВЫБРАТЬ
	|					РегистрСведений.УПЖКХ_СвязиДокументовРегистрацииОплатИТиповыхДокументовОтраженияВРеглУчете.РегистрацияОплаты,
	|					РегистрСведений.УПЖКХ_СвязиДокументовРегистрацииОплатИТиповыхДокументовОтраженияВРеглУчете.ДокументОтражения
	|				ИЗ
	|					РегистрСведений.УПЖКХ_СвязиДокументовРегистрацииОплатИТиповыхДокументовОтраженияВРеглУчете)
	|ИТОГИ ПО
	|	ДокументРО";
	
	ВыборкаДокументовРО = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Пока ВыборкаДокументовРО.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.УПЖКХ_СвязиДокументовРегистрацииОплатИТиповыхДокументовОтраженияВРеглУчете.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.РегистрацияОплаты.Установить(ВыборкаДокументовРО.ДокументРО);
		
		ВыборкаДокументовОтражения = ВыборкаДокументовРО.Выбрать();
		Пока ВыборкаДокументовОтражения.Следующий() Цикл
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.РегистрацияОплаты = ВыборкаДокументовОтражения.ДокументРО;
			НоваяЗапись.ДокументОтражения = ВыборкаДокументовОтражения.ДокументОтражения;
			НоваяЗапись.Организация       = ВыборкаДокументовОтражения.Организация;
			
		КонецЦикла;
		
		ЗаписатьОбъект(НаборЗаписей);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьСвязиДокументовОплатРегистрацииОплатИТиповыхДокументовОтраженияВРеглУчете_3_0_44_1()

// Процедура ищет движения непроведенных документов "Отражение начислений в регламентированном учете" и очищает
// их при наличии.
Процедура ВыполнитьОчисткуДвиженийДокументовОтраженияНачисленийВРегламентированномУчете_3_0_44_1()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ОтражениеНачисленийВРеглУчете.Ссылка КАК Регистратор,
	|	КВП_ОтражениеНачисленийВРеглУчете.ВидОперации
	|ИЗ
	|	Документ.КВП_ОтражениеНачисленийВРеглУчете КАК КВП_ОтражениеНачисленийВРеглУчете
	|ГДЕ
	|	НЕ КВП_ОтражениеНачисленийВРеглУчете.Проведен
	|	И НЕ КВП_ОтражениеНачисленийВРеглУчете.РучнаяКорректировка";
	
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРегистраторов.Следующий() Цикл
		
		// Очистка движений по регистру накопления "Начисления для отражения в регл. учете".
		ТекНаборЗаписей = РегистрыНакопления.КВП_НачислениеДляОтраженияВРеглУчете.СоздатьНаборЗаписей();
		ТекНаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистраторов.Регистратор);
		ТекНаборЗаписей.Прочитать();
		
		Если ТекНаборЗаписей.Количество() > 0 Тогда
			ТекНаборЗаписей.Очистить();
			ЗаписатьОбъект(ТекНаборЗаписей);
		КонецЕсли;
		
		Если ВыборкаРегистраторов.ВидОперации = Перечисления.КВП_ВидыОперацийОтраженияНачисленийВРеглУчете.ОтражениеУпрощенное Тогда
			
			// Очистка движений по регистру бухгалтерии.
			ТекНаборЗаписей = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
			ТекНаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистраторов.Регистратор);
			ТекНаборЗаписей.Прочитать();
			
			Если ТекНаборЗаписей.Количество() > 0 Тогда
				ТекНаборЗаписей.Очистить();
				ЗаписатьОбъект(ТекНаборЗаписей);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ВыполнитьОчисткуДвиженийДокументовОтраженияНачисленийВРегламентированномУчете_3_0_44_1()

// Процедура заполняет новый реквизит "Раздел учета" табличной части документа "КВП_ВводНачальногоСальдо"
// на основе помеченного на удаление реквизита "Вид начислений" этой же табличной части документа.
//
Процедура ЗаполнитьРеквизитРазделУчетаТабличнойЧастиДокументаВводНачальногоСальдо_3_0_44_1()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ВводНачальногоСальдоЛицевыеСчета.Ссылка
	|ИЗ
	|	Документ.КВП_ВводНачальногоСальдо.ЛицевыеСчета КАК КВП_ВводНачальногоСальдоЛицевыеСчета
	|ГДЕ
	|	НЕ КВП_ВводНачальногоСальдоЛицевыеСчета.Удалить_ВидНачисления = ЗНАЧЕНИЕ(Перечисление.КВП_УдалитьВидыНачисления.ПустаяСсылка)
	|	И КВП_ВводНачальногоСальдоЛицевыеСчета.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_ВводНачальногоСальдоЛицевыеСчета.Ссылка";
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		ДокОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		
		Для Каждого СтрокаТЧ ИЗ ДокОбъект.ЛицевыеСчета Цикл
			РазделУчета = Перечисления.УПЖКХ_РазделыУчета.НачислениеУслуг;
			Если СтрокаТЧ.Удалить_ВидНачисления = Перечисления.КВП_УдалитьВидыНачисления.Пени Тогда
				РазделУчета = Перечисления.УПЖКХ_РазделыУчета.Пени;
			ИначеЕсли СтрокаТЧ.Удалить_ВидНачисления = Перечисления.КВП_УдалитьВидыНачисления.Льготы Тогда
				РазделУчета =  Перечисления.УПЖКХ_РазделыУчета.Льготы;
			КонецЕсли;
			СтрокаТЧ.РазделУчета = РазделУчета;
		КонецЦикла;
		
		ЗаписатьОбъект(ДокОбъект);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьРеквизитРазделУчетаТабличнойЧастиДокументаВводНачальногоСальдо_3_0_44_1()

// Процедура переносит настройки расчета по льготам из учетной политики ЖКХ
// в новый регистр сведений "Настройки предоставления и расчета льгот".
//
Процедура ЗаполнитьНовыйРегистрСведенийНастроекПредоставленияИРасчетаЛьгот_3_0_44_8()
	
	// Переносим только те настройки, которых еще нет в новом регистре.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_УчетнаяПолитикаТСЖ.Период,
	|	КВП_УчетнаяПолитикаТСЖ.Организация,
	|	КВП_УчетнаяПолитикаТСЖ.УдалитьРасчетЛьготПоЗарегистрированным,
	|	КВП_УчетнаяПолитикаТСЖ.УдалитьОбъемОграниченияДелитьНаЛьготников,
	|	КВП_УчетнаяПолитикаТСЖ.УдалитьОбъемУслугиДелитьНаЛьготников
	|ПОМЕСТИТЬ врНастройкиУчетнойПолитики
	|ИЗ
	|	РегистрСведений.КВП_УчетнаяПолитикаТСЖ КАК КВП_УчетнаяПолитикаТСЖ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УПЖКХ_НастройкиПредоставленияИРасчетаЛьгот.Период,
	|	УПЖКХ_НастройкиПредоставленияИРасчетаЛьгот.Организация
	|ПОМЕСТИТЬ врСуществующиеНастройкиВНовомРегистре
	|ИЗ
	|	РегистрСведений.УПЖКХ_НастройкиПредоставленияИРасчетаЛьгот КАК УПЖКХ_НастройкиПредоставленияИРасчетаЛьгот
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врНастройкиУчетнойПолитики.Период,
	|	врНастройкиУчетнойПолитики.Организация,
	|	врНастройкиУчетнойПолитики.УдалитьРасчетЛьготПоЗарегистрированным,
	|	врНастройкиУчетнойПолитики.УдалитьОбъемОграниченияДелитьНаЛьготников,
	|	врНастройкиУчетнойПолитики.УдалитьОбъемУслугиДелитьНаЛьготников
	|ИЗ
	|	врНастройкиУчетнойПолитики КАК врНастройкиУчетнойПолитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ врСуществующиеНастройкиВНовомРегистре КАК врСуществующиеНастройкиВНовомРегистре
	|		ПО врНастройкиУчетнойПолитики.Период = врСуществующиеНастройкиВНовомРегистре.Период
	|			И врНастройкиУчетнойПолитики.Организация = врСуществующиеНастройкиВНовомРегистре.Организация
	|ГДЕ
	|	ЕСТЬNULL(врСуществующиеНастройкиВНовомРегистре.Период, ИСТИНА) = ИСТИНА";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.УПЖКХ_НастройкиПредоставленияИРасчетаЛьгот.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
		НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		
		// Заполнение измерений.
		НоваяЗапись.Период      = Выборка.Период;
		НоваяЗапись.Организация = Выборка.Организация;
		
		// Настройки устанавливаются для пустой группы услуг, т.е. для сразу всех услуг.
		НоваяЗапись.ГруппаУслуг = ПредопределенноеЗначение("Справочник.УПЖКХ_ГруппыУслуг.ПустаяСсылка");
		
		// Заполнение настроек.
		НоваяЗапись.ЛьготуПредоставлятьЗарегистрированнымЖильцам                        = Выборка.УдалитьРасчетЛьготПоЗарегистрированным;
		НоваяЗапись.ОбъемУслугиДляРасчетаЛьготыДелитьНаКоличествоПолучателейЛьготы      = Выборка.УдалитьОбъемУслугиДелитьНаЛьготников;
		НоваяЗапись.ОбъемОграниченияДляРасчетаЛьготыДелитьНаКоличествоПолучателейЛьготы = Выборка.УдалитьОбъемОграниченияДелитьНаЛьготников;
		
		ЗаписатьОбъект(НаборЗаписей);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьНовыйРегистрСведенийНастроекПредоставленияИРасчетаЛьгот_3_0_44_8()

// Процедура устанавливает значение константы "Вариант изменения задолженности в корректировках начислений".
//
Процедура ОбновитьНастройку_ВариантИзмененияЗадолженностиВКорректировкахНачислений_3_0_44_14()
	
	// По умолчанию используется старый вариант "Расчетный период, за который произведена корректировка".
	ИсходноеЗначениеНастройки = Константы.УПЖКХ_ВариантИзмененияЗадолженностиВКорректировкахНачислений.Получить();
	Если Не ЗначениеЗаполнено(ИсходноеЗначениеНастройки) Тогда
		Константы.УПЖКХ_ВариантИзмененияЗадолженностиВКорректировкахНачислений.Установить(Перечисления.УПЖКХ_ВариантыИзмененияЗадолженностиВКорректировкахНачислений.РасчетныйПериодЗаКоторыйПроизведенаКорректировка);
	КонецЕсли;
	
КонецПроцедуры // ОбновитьНастройку_ВариантИзмененияЗадолженностиВКорректировкахНачислений_3_0_44_14()

// Процедура обрабатывает суммы перерасчета в табличной части документа "Корректировка начислений"
// с видом операции "Недопоставка", а именно устанавливает отрицательный знак суммы перерасчета.
//
Процедура ОбработатьСуммыПерерасчетаВДокументахКорректировкиНачисленийСВидомОперацииНедопоставка_3_0_44_14()
	
	// Получаем строки документов "Корректировка начислений" с видом операции "Недопоставка".
	// Обходим найденные строки документов и устанавливаем в них противоположный знак суммы перерасчета,
	// тем самым приведя данный вид операции под стандарт:
	// - если сумма перерасчета положительная, то это доначисление;
	// - если сумма перерасчета отрицательная, то это уменьшение долга.
	
	// Имя параметра сохранения массива обработанных корректировок в параметрах обновления ИБ.
	ИмяПараметраОбновленияИБ = "ПараметрОбновления_ОбработкаКорректировокНачисленийВыполнена_3_0_44_13";
	
	// Если обработка была выполнена ранее, то прекращаем выполнение данного обработчика обновления.
	ОбработкаКорректировокНачисленийВыполнена = ПолучитьПараметрОбновленияИБ(ИмяПараметраОбновленияИБ);
	Если ОбработкаКорректировокНачисленийВыполнена = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_КорректировкаНачислений.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.КВП_КорректировкаНачислений КАК КВП_КорректировкаНачислений
	|ГДЕ
	|	КВП_КорректировкаНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийКорректировкаНачислений.Недопоставка)";
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	// Начало транзакции.
	НачатьТранзакцию();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		
		Для Каждого СтрокаКорректировки Из ДокументОбъект.Корректировки Цикл
			СтрокаКорректировки.СуммаПерерасчета = (-1) * СтрокаКорректировки.СуммаПерерасчета;
		КонецЦикла;
		
		// Пересчет итоговой суммы документа.
		ДокументОбъект.СуммаДокумента = КВП_ПолучитьСуммуДокументаНачисленияОплаты(ДокументОбъект, "Корректировки", "СуммаПерерасчета");
		
		// Запись документа в режиме обмена данными.
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		Если Не ЗаписатьОбъект(ДокументОбъект, РежимЗаписиДокумента.Запись) Тогда
			
			// Отмена транзакции при возникновении ошибки.
			ОтменитьТранзакцию();
			Отказ = Истина;
			
			ДобавитьСообщениеПользователю("Обработчик обновления ""ОбработатьСуммыПерерасчетаВДокументахКорректировкиНачисленийСВидомОперацииНедопоставка"" не выполнен!", Истина, Истина);
			
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Сохранение результата обработки в параметрах обновления ИБ.
	ОбработкаКорректировокНачисленийВыполнена = Истина;
	СохранитьПараметрОбновленияИБ(ИмяПараметраОбновленияИБ, ОбработкаКорректировокНачисленийВыполнена);
	
	// Завершение транзакции.
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // ОбработатьСуммыПерерасчетаВДокументахКорректировкиНачисленийСВидомОперацииНедопоставка_3_0_44_14()

// Процедура выполняет перепроведение документов поступления оплат (ПРС и ПКО), по которым
// ошибочно оказались отрицательные суммы в графах 4 и 5 регистра КУДиР. При этом выполняется
// перепроведение только тех поступлений, которые связаны с документами Регистрация оплаты через
// регистр сведений "Связи документов регистрации оплат и типовых документов отражения в регламентированном учете".
// 
Процедура ИсправитьОтрицательныеДвиженияПоКУДиРТиповымиДокументамиПоступленияОплат_3_0_44_14()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КнигаУчетаДоходовИРасходов.Регистратор,
	|	КнигаУчетаДоходовИРасходов.Период
	|ПОМЕСТИТЬ ТаблицаРегистраНакопления
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов КАК КнигаУчетаДоходовИРасходов
	|ГДЕ
	|	(КнигаУчетаДоходовИРасходов.Регистратор ССЫЛКА Документ.ПриходныйКассовыйОрдер
	|			ИЛИ КнигаУчетаДоходовИРасходов.Регистратор ССЫЛКА Документ.ПоступлениеНаРасчетныйСчет)
	|	И (КнигаУчетаДоходовИРасходов.Графа4 < 0
	|			ИЛИ КнигаУчетаДоходовИРасходов.Графа5 < 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаРегистраНакопления.Регистратор
	|ИЗ
	|	ТаблицаРегистраНакопления КАК ТаблицаРегистраНакопления
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СвязиДокументовРегистрацииОплатИТиповыхДокументовОтраженияВРеглУчете КАК УПЖКХ_СвязиДокументовРегистрацииОплатИТиповыхДокументовОтраженияВРеглУчете
	|		ПО (УПЖКХ_СвязиДокументовРегистрацииОплатИТиповыхДокументовОтраженияВРеглУчете.ДокументОтражения = ТаблицаРегистраНакопления.Регистратор)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаРегистраНакопления.Период";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Регистратор.ПолучитьОбъект();
		ЗаписатьОбъект(ДокументОбъект, РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет обработку документов корректировки начислений с видом операции недопоставка
// и перерасчет по проценту. При добавлении возможности выбора произвольного периода для этих видов операции,
// исчезла необходимость в реквизите "ПериодКорректировки", поэтому для всех документов указанного вида, введенных до
// обновления, переносим значение реквизита "ПериодКорректировки" в реквизиты "ДатаНач" и "ДатаКон", а реквизиту
// присваиваем пустое значение.
Процедура ПеренестиЗначениеРеквизитаПериодКорректировкиДокументаКорректировкаНачисления_3_0_46_1()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_КорректировкаНачислений.Ссылка
	|ИЗ
	|	Документ.КВП_КорректировкаНачислений КАК КВП_КорректировкаНачислений
	|ГДЕ
	|	(КВП_КорректировкаНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийКорректировкаНачислений.ПерерасчетПоПроценту)
	|			ИЛИ КВП_КорректировкаНачислений.ВидОперации = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийКорректировкаНачислений.Недопоставка))
	|	И НЕ КВП_КорректировкаНачислений.УдалитьПериодКорректировки = ДАТАВРЕМЯ(1, 1, 1)
	|
	|УПОРЯДОЧИТЬ ПО
	|	КВП_КорректировкаНачислений.Дата";
	
	КорректировкаНачисленийВыборка = Запрос.Выполнить().Выбрать();
	
	Пока КорректировкаНачисленийВыборка.Следующий() Цикл
		
		ДокументОбъект = КорректировкаНачисленийВыборка.Ссылка.ПолучитьОбъект();
		
		ДокументОбъект.ДатаНач = НачалоМесяца(ДокументОбъект.УдалитьПериодКорректировки);
		ДокументОбъект.ДатаКон = КонецМесяца(ДокументОбъект.УдалитьПериодКорректировки);
		ДокументОбъект.УдалитьПериодКорректировки = Дата(1,1,1);
		
		Если Не ЗаписатьОбъект(ДокументОбъект, РежимЗаписиДокумента.Запись) Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		ДобавитьСообщениеПользователю("Обработчик обновления ""ПеренестиЗначениеРеквизитаПериодКорректировкиДокументаКорректировкаНачисления"" не выполнен!", Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры //ПеренестиЗначениеРеквизитаПериодКорректировкиДокументаКорректировкаНачисления_3_0_46_1()

// Процедура заполняет новый ресурс "Дата изменения" во всех записях
// регистра сведений "Назначенные льготы".
//
Процедура ЗаполнитьРесурсДатаИзмененияРСНазначенныеЛьготы_3_0_46_1()
	
	// Получим все регистраторы, записи которых еще не были обработаны.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КВП_НазначенныеЛьготы.Регистратор,
	|	КВП_НазначенныеЛьготы.Регистратор.Дата КАК Дата
	|ИЗ
	|	РегистрСведений.КВП_НазначенныеЛьготы КАК КВП_НазначенныеЛьготы
	|ГДЕ
	|	КВП_НазначенныеЛьготы.ДатаИзменения = ДАТАВРЕМЯ(1, 1, 1)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекущийПериод = НачалоДня(Выборка.Дата);
		
		НаборЗаписей = РегистрыСведений.КВП_НазначенныеЛьготы.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать();
		
		Для Каждого СтрокаЗаписи ИЗ НаборЗаписей Цикл
			СтрокаЗаписи.ДатаИзменения = СтрокаЗаписи.Период;
			СтрокаЗаписи.Период        = ТекущийПериод;
			
			ТекущийПериод = ТекущийПериод + 1;
		КонецЦикла;
		
		Если НЕ ЗаписатьОбъект(НаборЗаписей) Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		ДобавитьСообщениеПользователю("Обработчик обновления ""ЗаполнитьРесурсДатаИзмененияРСНазначенныеЛьготы"" не выполнен!", Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРесурсДатаИзмененияРСНазначенныеЛьготы_3_0_46_1()

// Процедура производит пересчет размера процентной ставки рассрочки для вида рассрочки "Рассрочка на плату за установку счетчика (№ 261-ФЗ)".
// По заявке З00016459 осуществлен переход на годовую процентную ставки рассрочки.
//
Процедура ПроизвестиПересчетРазмераПроцентнойСтавкиРассрочкиНаГодовую_3_0_47_3()
	
	ИмяПараметраОбновленияИБ = "ПроизвестиПересчетРазмераПроцентнойСтавкиРассрочкиНаГодовую_3_0_47_3";
	
	// Если обработка была выполнена ранее, то прекращаем выполнение данного обработчика обновления.
	ПересчетРазмераПроцентнойСтавкиРассрочкиНаГодовуюВыполнен = ПолучитьПараметрОбновленияИБ(ИмяПараметраОбновленияИБ);
	Если ПересчетРазмераПроцентнойСтавкиРассрочкиНаГодовуюВыполнен = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_ЗаявлениеНаРассрочку.Ссылка
	|ИЗ
	|	Документ.УПЖКХ_ЗаявлениеНаРассрочку КАК УПЖКХ_ЗаявлениеНаРассрочку
	|ГДЕ
	|	УПЖКХ_ЗаявлениеНаРассрочку.ВидРассрочки = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыРассрочки.РассрочкаНаПлатуЗаУстановкуСчетчика)
	|	И НЕ УПЖКХ_ЗаявлениеНаРассрочку.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СсылкаНаДокумент = Выборка.Ссылка;
		
		ОбъектДокумета = СсылкаНаДокумент.ПолучитьОбъект();
		
		ГодоваяПроцентнаяСтавка = ОбъектДокумета.ГодоваяПроцентнаяСтавка / 5; // 5 - количество лет рассрочки для вида рассрочки
																			  // "Рассрочка на плату за установку счетчика (№ 261-ФЗ)".
		
		ОбъектДокумета.ГодоваяПроцентнаяСтавка = ГодоваяПроцентнаяСтавка;
		
		ЗаписатьОбъект(ОбъектДокумета);
		
		// Изменим значение процентной ставки рассрочки на годовую в движениях документа в регистр сведений "Сведения о рассрочке":
		НаборЗаписей = РегистрыСведений.УПЖКХ_СведенияОРассрочке.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(СсылкаНаДокумент); // режим записи "Подчинение регистратору".
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() > 0 Тогда
			Для Каждого ТекущаяСтрока Из НаборЗаписей Цикл
				ТекущаяСтрока.ГодоваяПроцентнаяСтавка = ГодоваяПроцентнаяСтавка / 100;
			КонецЦикла;
		КонецЕсли;
		
		ЗаписатьОбъект(НаборЗаписей);
		
	КонецЦикла;
	
	// Сохраним параметр, измененный на значение ИСТИНА, для анализа повторных обновлений.
	ПересчетРазмераПроцентнойСтавкиРассрочкиНаГодовуюВыполнен = Истина;
	СохранитьПараметрОбновленияИБ(ИмяПараметраОбновленияИБ, ПересчетРазмераПроцентнойСтавкиРассрочкиНаГодовуюВыполнен);
	
КонецПроцедуры // ПроизвестиПересчетРазмераПроцентнойСтавкиРассрочкиНаГодовую_3_0_47_3()

// Процедура заполняет реквизит "Вариант расчета основания нормы при отсутствии жильцов указанного вида"
// элементов справочника "Нормы потребления услуг".
//
Процедура ЗаполнитьВариантОпределенияКоличестваЖильцовПриОтсутствииПроживающихИлиЗарегистрированныхВНормахПотребленияУслуг_3_0_49_3()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_НормыПотребленияУслуг.Ссылка,
	|	КВП_НормыПотребленияУслуг.УдалитьПриОтсутствииСчитатьНаОдного КАК ПриОтсутствииСчитатьНаОдного
	|ИЗ
	|	Справочник.КВП_НормыПотребленияУслуг КАК КВП_НормыПотребленияУслуг
	|ГДЕ
	|	КВП_НормыПотребленияУслуг.ВариантОпределенияКоличестваЖильцовПриОтсутствииПроживающихИлиЗарегистрированных = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВариантыРасчетаНормативаПриОтсутствииЖильцов.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НормыПотребленияУслугОбъект = Выборка.Ссылка.ПолучитьОбъект();
		Если Выборка.ПриОтсутствииСчитатьНаОдного Тогда
			НормыПотребленияУслугОбъект.ВариантОпределенияКоличестваЖильцовПриОтсутствииПроживающихИлиЗарегистрированных = 
				Перечисления.УПЖКХ_ВариантыРасчетаНормативаПриОтсутствииЖильцов.НаОдногоЧеловека;
		Иначе
			НормыПотребленияУслугОбъект.ВариантОпределенияКоличестваЖильцовПриОтсутствииПроживающихИлиЗарегистрированных = 
				Перечисления.УПЖКХ_ВариантыРасчетаНормативаПриОтсутствииЖильцов.НеОпределять;
		КонецЕсли;
		
		Если НЕ ЗаписатьОбъект(НормыПотребленияУслугОбъект) Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЦикла;
		
	Если Отказ Тогда
		ДобавитьСообщениеПользователю("Обработчик обновления ""ЗаполнитьВариантОпределенияКоличестваЖильцовПриОтсутствииПроживающихИлиЗарегистрированныхВНормахПотребленияУслуг"" не выполнен!", Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьВариантОпределенияКоличестваЖильцовПриОтсутствииПроживающихИлиЗарегистрированныхВНормахПотребленияУслуг_3_0_49_3()

// Выполняет перенос настроек формирования квитанций и обмена данными с сайтом в новые справочники.
//
Процедура ВыполнитьПереносНастроекФормированияПлатежныхДокументовИОбменаДаннымиССайтомВНовыеСправочники_3_0_49_3()
	
	Если ПроверитьНеобходимостьВыполненияОбработчикаОбновленияНастроекФормированияКвитанций() Тогда
		
		ТаблицаВариантовНастроек = ПодготовитьТаблицуВариантовНастроек();
		
		// Группируем настройки.
		Если НЕ ТаблицаВариантовНастроек.Количество() = 0 Тогда
			
			ТаблицаРазличныхНастроек = ПолучитьТаблицуРазличныхНастроек(ТаблицаВариантовНастроек);
			
			// Заполняем справочник "Настройки формирования квитанций".
			НомерЭлемента = 1;
			МассивЭлементовСправочникаНастроекФормированияКвитанций = Новый Массив;
			
			Для каждого ТекСтрокаНастроек из ТаблицаРазличныхНастроек Цикл
				
				НовыйЭлементСправочника = Справочники.УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.СоздатьЭлемент();
				
				ЗаполнитьЗначенияСвойств(НовыйЭлементСправочника, ТекСтрокаНастроек);
				
				НовыйЭлементСправочника.Наименование = "Настройка формирования квитанций №" + Строка(НомерЭлемента);
				НовыйЭлементСправочника.Комментарий  = ТекСтрокаНастроек.СписокПользователей;
				
				Если НЕ ТекСтрокаНастроек.УслугиБезОДН = Неопределено Тогда
					НовыйЭлементСправочника.УслугиБезОДН.Загрузить(ТекСтрокаНастроек.УслугиБезОДН);
				КонецЕсли;
				
				Если НЕ ТекСтрокаНастроек.ВыбранныеУслуги = Неопределено Тогда
					НовыйЭлементСправочника.ВыбранныеУслуги.Загрузить(ТекСтрокаНастроек.ВыбранныеУслуги);
				КонецЕсли;
				
				Если НЕ ТекСтрокаНастроек.УслугиПоТипам = Неопределено Тогда
					НовыйЭлементСправочника.УслугиПоТипам.Загрузить(ТекСтрокаНастроек.УслугиПоТипам);
				КонецЕсли;
				
				Если ПустаяСтрока(НовыйЭлементСправочника.ВариантУчетаКомиссииБанка) Тогда
					НовыйЭлементСправочника.ВариантУчетаКомиссииБанка = "Не учитывать";
				КонецЕсли;
				
				Если НовыйЭлементСправочника.РасчетнаяПлощадьЗдания = Неопределено Тогда
					НовыйЭлементСправочника.РасчетнаяПлощадьЗдания = Справочники.КВП_ТипыПлощадейЗдания.ПустаяСсылка();
				КонецЕсли;
				
				Если НовыйЭлементСправочника.РасчетнаяПлощадьПомещения = Неопределено Тогда
					НовыйЭлементСправочника.РасчетнаяПлощадьПомещения = Справочники.УПЖКХ_ВидыПлощадей.ПустаяСсылка();
				КонецЕсли;
				
				Если ПустаяСтрока(НовыйЭлементСправочника.СпособПечатиКвитанцииКапРемонт) Тогда
					НовыйЭлементСправочника.СпособПечатиКвитанцииКапРемонт = "основную квитанцию и квитанцию на кап. ремонт";
				КонецЕсли;
				
				Если ТекСтрокаНастроек.ВыводитьОтрицательнуюСуммуКОплате = Неопределено Тогда
					НовыйЭлементСправочника.ВыводитьОтрицательнуюСуммуКОплате = Истина;
				КонецЕсли;
				
				ЗаписатьОбъект(НовыйЭлементСправочника);
				
				МассивЭлементовСправочникаНастроекФормированияКвитанций.Добавить(НовыйЭлементСправочника.Ссылка);
				
				НомерЭлемента = НомерЭлемента + 1;
				
			КонецЦикла;
			
			// Заполняем регистр "Порядок услуг".
			НаборЗаписей = РегистрыСведений.КВП_ПорядокУслугВКвитанции.СоздатьНаборЗаписей();
			НаборЗаписей.Прочитать();
			ТаблицаПорядкаУслуг = НаборЗаписей.Выгрузить();
			НаборЗаписей.Очистить();
			
			Для каждого ТекНастройка из МассивЭлементовСправочникаНастроекФормированияКвитанций Цикл
				
				Для каждого ТекСтрокаПорядка из ТаблицаПорядкаУслуг Цикл
					
					НоваяЗапись = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗапись, ТекСтрокаПорядка);
					НоваяЗапись.НастройкаСбораДанных = ТекНастройка;
					
				КонецЦикла;
				
			КонецЦикла;
			
			ЗаписатьОбъект(НаборЗаписей);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПроверитьНеобходимостьВыполненияОбработчикаОбновленияНастроекОбменаССайтом() Тогда
		
		ТаблицаНастроекОбменаССайтом = ПолучитьВариантыНастроекОбменаССайтом();
		
		СформироватьЭлементыСправочникаНастроекОбменаССайтом(ТаблицаНастроекОбменаССайтом);
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет необходимость выполнения переноса настроек формирования ПД в новый справочник.
// Если в справочнике уже есть элементы, то перенос не осуществляем.
//
Функция ПроверитьНеобходимостьВыполненияОбработчикаОбновленияНастроекФормированияКвитанций()
	
	// Проверяем наличие элементов справочника "НастройкаСбораДанных".
	// Если элементы справочника есть, то обновление не выполняем.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.Ссылка) КАК КоличествоЭлементов
	|ИЗ
	|	Справочник.УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов КАК УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов
	|ГДЕ
	|	НЕ УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.ПометкаУдаления";
	
	ТаблицаКоличества = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаКоличества[0].КоличествоЭлементов = 0;
	
КонецФункции

// Проверяет необходимость выполнения переноса настроек обмена данными с сайтом в новый справочник.
// Если в справочнике уже есть элементы, то перенос не осуществляем.
//
Функция ПроверитьНеобходимостьВыполненияОбработчикаОбновленияНастроекОбменаССайтом()
	
	// Проверяем наличие элементов справочника "НастройкиОбменаДаннымиССайтомЖКХ".
	// Если элементы справочника есть, то обновление не выполняем.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(УПЖКХ_НастройкиОбменаДаннымиССайтомЖКХ.Ссылка) КАК КоличествоЭлементов
	|ИЗ
	|	Справочник.УПЖКХ_НастройкиОбменаДаннымиССайтомЖКХ КАК УПЖКХ_НастройкиОбменаДаннымиССайтомЖКХ
	|ГДЕ
	|	НЕ УПЖКХ_НастройкиОбменаДаннымиССайтомЖКХ.ПометкаУдаления";
	
	ТаблицаКоличества = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаКоличества[0].КоличествоЭлементов = 0;
	
КонецФункции

// Получает все различающиеся варианты настроек обмена данными с сайтом.
//
Функция ПолучитьВариантыНастроекОбменаССайтом()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_ВариантыОбменаДаннымиССайтом.Ссылка КАК ВариантОбмена,
	|	УПЖКХ_ВариантыОбменаДаннымиССайтом.Код,
	|	УПЖКХ_ВариантыОбменаДаннымиССайтом.Наименование,
	|	УПЖКХ_ВариантыОбменаДаннымиССайтом.УдалитьЗагружатьПоказанияПУПоУслугам,
	|	УПЖКХ_ВариантыОбменаДаннымиССайтом.УдалитьЗагружатьПоказанияПУПоЗданиям
	|ИЗ
	|	Справочник.УПЖКХ_ВариантыОбменаДаннымиССайтом КАК УПЖКХ_ВариантыОбменаДаннымиССайтом
	|ГДЕ
	|	НЕ УПЖКХ_ВариантыОбменаДаннымиССайтом.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_ВариантыОбменаДаннымиССайтомУдалитьТаблицаНастроекВыгрузкиУслуг.Ссылка КАК ВариантОбмена,
	|	УПЖКХ_ВариантыОбменаДаннымиССайтомУдалитьТаблицаНастроекВыгрузкиУслуг.Услуга,
	|	УПЖКХ_ВариантыОбменаДаннымиССайтомУдалитьТаблицаНастроекВыгрузкиУслуг.ВыгружатьНачисления,
	|	УПЖКХ_ВариантыОбменаДаннымиССайтомУдалитьТаблицаНастроекВыгрузкиУслуг.ВыгружатьПоказания,
	|	УПЖКХ_ВариантыОбменаДаннымиССайтомУдалитьТаблицаНастроекВыгрузкиУслуг.НомерСтроки
	|ИЗ
	|	Справочник.УПЖКХ_ВариантыОбменаДаннымиССайтом.УдалитьТаблицаНастроекВыгрузкиУслуг КАК УПЖКХ_ВариантыОбменаДаннымиССайтомУдалитьТаблицаНастроекВыгрузкиУслуг
	|ГДЕ
	|	НЕ УПЖКХ_ВариантыОбменаДаннымиССайтомУдалитьТаблицаНастроекВыгрузкиУслуг.Ссылка.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.Ссылка КАК НастройкиСбораДанныхДляКвитанцийИОбменов
	|ИЗ
	|	Справочник.УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов КАК УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов
	|ГДЕ
	|	НЕ УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.ПометкаУдаления";
	
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаВариантовОбмена               = Результат[0].Выгрузить();
	ТаблицаНастроекВыгрузки              = Результат[1].Выгрузить();
	ТаблицаНастроекФормированияКвитанций = Результат[2].Выгрузить();
	
	ПолучитьТаблицуРазличныхНастроекОбменаССайтом(ТаблицаВариантовОбмена, ТаблицаНастроекВыгрузки);
	
	ТаблицаНастроекОбменаССайтом = СоздатьТаблицуНастроекОбменаССайтом();
	
	СтруктураОтбора = Новый Структура("ВариантОбмена");
	
	Для каждого ТекВариантОбмена из ТаблицаВариантовОбмена Цикл
		
		НоваяСтрока = ТаблицаНастроекОбменаССайтом.Добавить();
		
		НоваяСтрока.ВариантыОбмена                = ТекВариантОбмена.ВариантыОбмена;
		НоваяСтрока.Наименование                  = ТекВариантОбмена.Наименование;
		НоваяСтрока.ЗагружатьПоказанияПУПоЗданиям = ТекВариантОбмена.УдалитьЗагружатьПоказанияПУПоЗданиям;
		НоваяСтрока.ЗагружатьПоказанияПУПоУслугам = ТекВариантОбмена.УдалитьЗагружатьПоказанияПУПоУслугам;
		
		НоваяСтрока.ТаблицаНастроекВыгрузкиУслуг = Новый ТаблицаЗначений;
		НоваяСтрока.ТаблицаНастроекВыгрузкиУслуг.Колонки.Добавить("Услуга");
		НоваяСтрока.ТаблицаНастроекВыгрузкиУслуг.Колонки.Добавить("ВыгружатьНачисления", Новый ОписаниеТипов("Булево"));
		НоваяСтрока.ТаблицаНастроекВыгрузкиУслуг.Колонки.Добавить("ВыгружатьПоказания",  Новый ОписаниеТипов("Булево"));
		
		СтруктураОтбора.ВариантОбмена = ТекВариантОбмена.ВариантОбмена;
		
		СтрокиНастроекВыгрузки = ТаблицаНастроекВыгрузки.НайтиСтроки(СтруктураОтбора);
		
		Для каждого ТекСтрокаНастроекВыгрузки из СтрокиНастроекВыгрузки Цикл
			НоваяСтрокаНастроекВыгрузки = НоваяСтрока.ТаблицаНастроекВыгрузкиУслуг.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаНастроекВыгрузки, ТекСтрокаНастроекВыгрузки);
		КонецЦикла;
		
		// Заполняем настройку формирования квитанций, только если в базе один элемент справочника "Настройки формирования квитанций".
		Если ТаблицаНастроекФормированияКвитанций.Количество() = 1 Тогда
			НоваяСтрока.НастройкаСбораДанных = ТаблицаНастроекФормированияКвитанций[0].НастройкиСбораДанныхДляКвитанцийИОбменов;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаНастроекОбменаССайтом;
	
КонецФункции

// Подготавливает таблицу настроек обмена с сайтом.
//
Функция СоздатьТаблицуНастроекОбменаССайтом()
	
	ТаблицаНастроекОбменаССайтом = Новый ТаблицаЗначений;
	ТаблицаНастроекОбменаССайтом.Колонки.Добавить("Наименование");
	ТаблицаНастроекОбменаССайтом.Колонки.Добавить("ЗагружатьПоказанияПУПоЗданиям");
	ТаблицаНастроекОбменаССайтом.Колонки.Добавить("ЗагружатьПоказанияПУПоУслугам");
	ТаблицаНастроекОбменаССайтом.Колонки.Добавить("НастройкаСбораДанных");
	ТаблицаНастроекОбменаССайтом.Колонки.Добавить("ТаблицаНастроекВыгрузкиУслуг");
	ТаблицаНастроекОбменаССайтом.Колонки.Добавить("ВариантыОбмена");
	
	Возврат ТаблицаНастроекОбменаССайтом;
	
КонецФункции

// Формирует таблицу отличающихся вариантов настроек обмена с сайтом на основании всех
// имеющихся в базе вариантов.
//
Процедура ПолучитьТаблицуРазличныхНастроекОбменаССайтом(ТаблицаВариантовОбмена, ТаблицаНастроекВыгрузки)
	
	// Отбираем исходные данные в отдельные таблицы.
	ТаблицаВариантовОбменаДляОбработки  = ТаблицаВариантовОбмена.Скопировать(, "ВариантОбмена, Наименование, УдалитьЗагружатьПоказанияПУПоУслугам, УдалитьЗагружатьПоказанияПУПоЗданиям");
	ТаблицаНастроекВыгрузкиДляОбработки = ТаблицаНастроекВыгрузки.Скопировать(, "ВариантОбмена, Услуга, ВыгружатьНачисления, ВыгружатьПоказания");
	ТаблицаНастроекВыгрузкиДляОбработки.Сортировать("ВариантОбмена, Услуга, ВыгружатьНачисления, ВыгружатьПоказания");
	
	// Подготавливаем и заполняем таблицу, с помощью которой будем сравнивать настройки разных вариантов обмена.
	ТаблицаДляСравнения = Новый ТаблицаЗначений;
	ТаблицаДляСравнения.Колонки.Добавить("ВариантОбмена");
	ТаблицаДляСравнения.Колонки.Добавить("СтрокаСравнения");
	
	// Принцип сравнения состоит в следующем:
	//  Для каждого варианта обмена подготавливаем строки, содержащие набор значений реквизитов и всех полей
	//  всех строк табличных частей.
	//  Далее сворачиваем таблицу по полученным строкам и проверяем, какие варианты обмена им соответствуют.
	СтруктураОтбора = Новый Структура("ВариантОбмена");
	
	// Получаем строки.
	Для каждого ТекВариантОбмена из ТаблицаВариантовОбменаДляОбработки Цикл
		
		ТекущаяСтрока = "";
		СтруктураОтбора.ВариантОбмена = ТекВариантОбмена.ВариантОбмена;
		
		СтрокиНастроекВыгрузки = ТаблицаНастроекВыгрузкиДляОбработки.НайтиСтроки(СтруктураОтбора);
		
		НоваяСтрока = ТаблицаДляСравнения.Добавить();
		
		ТекущаяСтрока = Строка(ТекВариантОбмена.УдалитьЗагружатьПоказанияПУПоУслугам) + Строка(ТекВариантОбмена.УдалитьЗагружатьПоказанияПУПоЗданиям);
		
		Для каждого ТекСтрокаНастроекВыгрузки из СтрокиНастроекВыгрузки Цикл
			ТекущаяСтрока = ТекущаяСтрока + Строка(ТекСтрокаНастроекВыгрузки.Услуга) + Строка(ТекСтрокаНастроекВыгрузки.ВыгружатьНачисления) + Строка(ТекСтрокаНастроекВыгрузки.ВыгружатьПоказания);
		КонецЦикла;
		
		НоваяСтрока.ВариантОбмена   = ТекВариантОбмена.ВариантОбмена;
		НоваяСтрока.СтрокаСравнения = ТекущаяСтрока;
		
	КонецЦикла;
	
	// Сворачиваем.
	ТаблицаСоответствияВариантовОбмена = ТаблицаДляСравнения.Скопировать(, "СтрокаСравнения");
	ТаблицаСоответствияВариантовОбмена.Свернуть("СтрокаСравнения");
	ТаблицаСоответствияВариантовОбмена.Колонки.Добавить("ВариантыОбмена");
	
	// Собираем данные о вариантах обмена для каждой уникальной строки.
	СтруктураОтбора = Новый Структура("СтрокаСравнения");
	
	Для каждого ТекСтрока из ТаблицаСоответствияВариантовОбмена Цикл
		
		ТекСтрока.ВариантыОбмена = Новый Массив;
		
		СтруктураОтбора.СтрокаСравнения = ТекСтрока.СтрокаСравнения;
		СтрокиСравнения = ТаблицаДляСравнения.НайтиСтроки(СтруктураОтбора);
		
		Для каждого ТекВариантыОбмена из СтрокиСравнения Цикл
			
			ТекСтрока.ВариантыОбмена.Добавить(ТекВариантыОбмена.ВариантОбмена);
			
		КонецЦикла;
		
	КонецЦикла;
	
	ТаблицаСоответствияВариантовОбмена.Колонки.Удалить("СтрокаСравнения");
	
	// Удаляем строки с дублирующимися параметрами и добавляем одну с перечнем вариантов обмена.
	ТаблицаВариантовОбмена.Колонки.Добавить("ВариантыОбмена");
	ТаблицаНастроекВыгрузки.Колонки.Добавить("ВариантыОбмена");
	
	СтруктураОтбора = Новый Структура("ВариантОбмена");
	
	СтрокиДляУдаленияОсновные          = Новый Массив;
	СтрокиДляУдаленияНастройкиВыгрузки = Новый Массив;
	
	Для каждого ТекСтрока из ТаблицаСоответствияВариантовОбмена Цикл
		
		НоваяСтрокаОсновная = ТаблицаВариантовОбмена.Добавить();
		
		Для каждого ТекВариантОбмена из ТекСтрока.ВариантыОбмена Цикл
			
			// Основные реквизиты.
			СтрокаВарианта = ТаблицаВариантовОбмена.Найти(ТекВариантОбмена, "ВариантОбмена");
			СтрокиДляУдаленияОсновные.Добавить(СтрокаВарианта);
			
			ЗаполнитьЗначенияСвойств(НоваяСтрокаОсновная, СтрокаВарианта);
			
			// Выбранные услуги.
			СтруктураОтбора.ВариантОбмена = ТекВариантОбмена;
			
			// Настройки выгрузки.
			СтрокиВариантаНастройкиВыгрузки = ТаблицаНастроекВыгрузки.НайтиСтроки(СтруктураОтбора);
			
			Для каждого ТекСтрокаНастройкиВыгрузки из СтрокиВариантаНастройкиВыгрузки Цикл
				СтрокиДляУдаленияНастройкиВыгрузки.Добавить(ТекСтрокаНастройкиВыгрузки);
			КонецЦикла;
			
		КонецЦикла;
		
		// Основные реквизиты.
		НоваяСтрокаОсновная.ВариантыОбмена = ТекСтрока.ВариантыОбмена;
		
		// Настройки выгрузки.
		Для каждого ТекСтрока из СтрокиВариантаНастройкиВыгрузки Цикл
			НоваяСтрокаНастроекВыгрузки = ТаблицаНастроекВыгрузки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаНастроекВыгрузки, ТекСтрока);
			НоваяСтрокаНастроекВыгрузки.ВариантыОбмена = ТекСтрока.ВариантыОбмена;
		КонецЦикла;
		
	КонецЦикла;
	
	Для каждого ТекСтрока из СтрокиДляУдаленияОсновные Цикл
		ТаблицаВариантовОбмена.Удалить(ТекСтрока);
	КонецЦикла;
	
	Для каждого ТекСтрока из СтрокиДляУдаленияНастройкиВыгрузки Цикл
		ТаблицаНастроекВыгрузки.Удалить(ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

// Формирует элементы справочника "Настройки обмена данными с сайтом" на основании таблицы
// различных вариантов настроек обмена данными с сайтом.
//
Процедура СформироватьЭлементыСправочникаНастроекОбменаССайтом(ТаблицаНастроекОбменаССайтом);
	
	НомерЭлементаСправочника = 1;
	
	Для каждого ТекСтрокаНастроек из ТаблицаНастроекОбменаССайтом Цикл
		
		НовыйЭлементСправочника = Справочники.УПЖКХ_НастройкиОбменаДаннымиССайтомЖКХ.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(НовыйЭлементСправочника, ТекСтрокаНастроек);
		НовыйЭлементСправочника.Наименование = "Настройка обмена с сайтом №" + Строка(НомерЭлементаСправочника);
		
		Для каждого ТекСтрокаНастройкиВыгрузкиУслуг из ТекСтрокаНастроек.ТаблицаНастроекВыгрузкиУслуг Цикл
			НоваяСтрокаНастроекВыгрузкиУслуг = НовыйЭлементСправочника.ТаблицаНастроекВыгрузкиУслуг.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаНастроекВыгрузкиУслуг, ТекСтрокаНастройкиВыгрузкиУслуг);
		КонецЦикла;
		
		ЗаписатьОбъект(НовыйЭлементСправочника);
		
		// Ищем элемент справочника "Варианты обмена данными с сайтом" и заполняем настройку обмена.
		Для каждого ТекВариантОбмена из ТекСтрокаНастроек.ВариантыОбмена Цикл
			ТекВариантОбменаОбъект = ТекВариантОбмена.ПолучитьОбъект();
			ТекВариантОбменаОбъект.НастройкаОбмена = НовыйЭлементСправочника.Ссылка;
			ЗаписатьОбъект(ТекВариантОбменаОбъект);
		КонецЦикла;
		
		НомерЭлементаСправочника = НомерЭлементаСправочника + 1;
	КонецЦикла;
	
КонецПроцедуры

// Подготавливает таблицу настроек формирования ПД всех имеющихся в базе пользователей на основании
// хранилища общих настроек.
//
Функция ПодготовитьТаблицуВариантовНастроек()
	
	ТаблицаПользователей     = ПолучитьТаблицуПользователей();
	ТаблицаВариантовНастроек = СоздатьТаблицуВариантовНастроек();
	
	ЗаполнитьТаблицуВариантовНастроек(ТаблицаВариантовНастроек, ТаблицаПользователей);
	ДополнитьТаблицуВариантовНастроекНомерамиНаборовТаблиц(ТаблицаВариантовНастроек);
	
	Возврат ТаблицаВариантовНастроек;
	
КонецФункции

// Формирует таблицу имеющихся в базе пользователей.
//
Функция ПолучитьТаблицуПользователей()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь,
	|	Пользователи.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Подготавливает пустую таблицу вариантов настроек ПД.
//
Функция СоздатьТаблицуВариантовНастроек()
	
	ТаблицаВариантовНастроек = Новый ТаблицаЗначений;
	ТаблицаВариантовНастроек.Колонки.Добавить("ВключениеНачальнойЗадолженности");
	ТаблицаВариантовНастроек.Колонки.Добавить("ВариантСортировки");
	ТаблицаВариантовНастроек.Колонки.Добавить("ИсполнительРасчетов");
	ТаблицаВариантовНастроек.Колонки.Добавить("УслугиИсполнителя");
	ТаблицаВариантовНастроек.Колонки.Добавить("СтрокаУслуг");
	ТаблицаВариантовНастроек.Колонки.Добавить("ВыводитьШК");
	ТаблицаВариантовНастроек.Колонки.Добавить("ВыводитьНачальноеСальдо");
	ТаблицаВариантовНастроек.Колонки.Добавить("НеПечататьНулевыеКвитанции");
	ТаблицаВариантовНастроек.Колонки.Добавить("УчитыватьПени");
	ТаблицаВариантовНастроек.Колонки.Добавить("СпособПечатиКвитанцииПоПеням");
	ТаблицаВариантовНастроек.Колонки.Добавить("ДвустороняяПечать");
	ТаблицаВариантовНастроек.Колонки.Добавить("ДвустороняяПечатьВыводитьОтступ");
	ТаблицаВариантовНастроек.Колонки.Добавить("ВыводитьИндРасходДляВсехУслуг");
	ТаблицаВариантовНастроек.Колонки.Добавить("ВыборУслуг");
	ТаблицаВариантовНастроек.Колонки.Добавить("РазделятьУслугиПоТипам");
	ТаблицаВариантовНастроек.Колонки.Добавить("УчетОплат");
	ТаблицаВариантовНастроек.Колонки.Добавить("ВариантУчетаКомиссииБанка");
	ТаблицаВариантовНастроек.Колонки.Добавить("КомиссияБанка");
	ТаблицаВариантовНастроек.Колонки.Добавить("ВыводитьРасчетнуюПлощадь");
	ТаблицаВариантовНастроек.Колонки.Добавить("РасчетнаяПлощадьПомещения");
	ТаблицаВариантовНастроек.Колонки.Добавить("РасчетнаяПлощадьЗдания");
	ТаблицаВариантовНастроек.Колонки.Добавить("НеВыводитьПоказанияПоПУ");
	ТаблицаВариантовНастроек.Колонки.Добавить("ВсегдаВыводитьДополнительныеОбласти");
	ТаблицаВариантовНастроек.Колонки.Добавить("ПечататьОтрывнойКорешок");
	ТаблицаВариантовНастроек.Колонки.Добавить("ПечататьОтрывнойКорешокВнизу");
	ТаблицаВариантовНастроек.Колонки.Добавить("ВыводитьОтрицательнуюСуммуКОплате");
	ТаблицаВариантовНастроек.Колонки.Добавить("СпособПечатиКвитанцииКапРемонт");
	ТаблицаВариантовНастроек.Колонки.Добавить("ПечататьКвитанциюКапРемонт");
	ТаблицаВариантовНастроек.Колонки.Добавить("ВключатьОплатыВНачальноеСальдо");
	ТаблицаВариантовНастроек.Колонки.Добавить("ВыводитьОбъемыРасхождения");
	ТаблицаВариантовНастроек.Колонки.Добавить("УслугиБезОДН");
	ТаблицаВариантовНастроек.Колонки.Добавить("ВыбранныеУслуги");
	ТаблицаВариантовНастроек.Колонки.Добавить("УслугиПоТипам");
	ТаблицаВариантовНастроек.Колонки.Добавить("Пользователь");
	ТаблицаВариантовНастроек.Колонки.Добавить("НомерНабораТаблиц");
	
	Возврат ТаблицаВариантовНастроек;
	
КонецФункции

// Заполняет таблицу вариантов настроек формирования ПД настройками каждого пользователя.
//
Процедура ЗаполнитьТаблицуВариантовНастроек(ТаблицаВариантовНастроек, ТаблицаПользователей)
	
	Для каждого ТекСтрока из ТаблицаПользователей Цикл
		
		СтруктураПараметров = ХранилищеОбщихНастроек.Загрузить("Отчет.УПЖКХ_ПлатежныйДокумент",, ТекСтрока.Наименование);
		
		Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
			
			НоваяСтрока = ТаблицаВариантовНастроек.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПараметров);
			
			НоваяСтрока.Пользователь = ТекСтрока.Пользователь;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Дополняет таблицу вариантов настройки ПД номерами наборов таблиц, хранящихся в данных настройках.
// Так как провести сравнение 2-х таблиц невозможно, переводим данные таблиц в строки и сравниваем
// эти строки.
//
// При этом под набором понимается каждый уникальный вариант заполнения таблиц.
// Т.е., если для разных настроек ПД все таблицы совпадают, то у них будет одинаковый номер набора.
// В противном случае номера наборов будут разными.
//
Процедура ДополнитьТаблицуВариантовНастроекНомерамиНаборовТаблиц(ТаблицаВариантовНастроек)
	
	// Устанавливаем номера наборов таблиц, имеющихся в настройках.
	ТекНомерНабора = 1;
	ПервыйОбход = Истина;
	
	Для каждого ТекСтрокаТекущегоНабора из ТаблицаВариантовНастроек Цикл
		
		Если ПервыйОбход Тогда
			
			ТекСтрокаТекущегоНабора.НомерНабораТаблиц = ТекНомерНабора;
			ПервыйОбход = Ложь;
			
			Продолжить;
			
		КонецЕсли;
		
		Если НЕ ТекСтрокаТекущегоНабора.НомерНабораТаблиц = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого ТекСтрокаНаборов из ТаблицаВариантовНастроек Цикл
			
			Если НЕ ТекСтрокаНаборов.НомерНабораТаблиц = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Тут выполняем сравнение таблиц.
			Если СравнитьТаблицы(ТекСтрокаТекущегоНабора.УслугиБезОДН, ТекСтрокаНаборов.УслугиБезОДН)
				И СравнитьТаблицы(ТекСтрокаТекущегоНабора.ВыбранныеУслуги, ТекСтрокаНаборов.ВыбранныеУслуги)
				И СравнитьТаблицы(ТекСтрокаТекущегоНабора.УслугиПоТипам, ТекСтрокаНаборов.УслугиПоТипам) Тогда
				
				ТекСтрокаНаборов.НомерНабораТаблиц = ТекНомерНабора;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТекНомерНабора = ТекНомерНабора + 1;
		
	КонецЦикла
	
КонецПроцедуры

// Подготавливаем строку со списком данных, хранящихся в настройках ПД.
//
Функция ПолучитьСписокХранимыхНастроек()
	
	Возврат "ВключениеНачальнойЗадолженности, ВариантСортировки,
			|ИсполнительРасчетов, УслугиИсполнителя, СтрокаУслуг, ВыводитьШК,
			|ВыводитьНачальноеСальдо, НеПечататьНулевыеКвитанции,
			|УчитыватьПени, СпособПечатиКвитанцииПоПеням, ДвустороняяПечать,
			|ДвустороняяПечатьВыводитьОтступ, ВыводитьИндРасходДляВсехУслуг,
			|ВыборУслуг, РазделятьУслугиПоТипам, УчетОплат, ВариантУчетаКомиссииБанка,
			|КомиссияБанка, ВыводитьРасчетнуюПлощадь, РасчетнаяПлощадьПомещения,
			|РасчетнаяПлощадьЗдания, НеВыводитьПоказанияПоПУ,
			|ВсегдаВыводитьДополнительныеОбласти, ПечататьОтрывнойКорешок,
			|ПечататьОтрывнойКорешокВнизу, ВыводитьОтрицательнуюСуммуКОплате,
			|СпособПечатиКвитанцииКапРемонт, ПечататьКвитанциюКапРемонт, НомерНабораТаблиц,
			|ВключатьОплатыВНачальноеСальдо, ВыводитьОбъемыРасхождения";
	
КонецФункции

// Получаем таблицу отличающихся настроек ПД.
//
Функция ПолучитьТаблицуРазличныхНастроек(ТаблицаВариантовНастроек)
	
	СписокХранимыхНастроек = ПолучитьСписокХранимыхНастроек();
	
	// Получаем различные наборы настроек.
	ТаблицаРазличныхНастроек = ТаблицаВариантовНастроек.Скопировать(, СписокХранимыхНастроек);
	ТаблицаРазличныхНастроек.Свернуть(СписокХранимыхНастроек);
	
	// Подготавливаем структуру для отбора.
	СтруктураОтбора = Новый Структура(СписокХранимыхНастроек);
	
	// Добавляем колонку для списка пользователей.
	ТаблицаРазличныхНастроек.Колонки.Добавить("Пользователи");
	ТаблицаРазличныхНастроек.Колонки.Добавить("СписокПользователей");
	ТаблицаРазличныхНастроек.Колонки.Добавить("УслугиБезОДН");
	ТаблицаРазличныхНастроек.Колонки.Добавить("ВыбранныеУслуги");
	ТаблицаРазличныхНастроек.Колонки.Добавить("УслугиПоТипам");
	
	// Заполняем колонку "Пользователи".
	Для каждого ТекСтрокаНастроек из ТаблицаРазличныхНастроек Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураОтбора, ТекСтрокаНастроек);
		
		НайденныеСтрокиПользователей = ТаблицаВариантовНастроек.НайтиСтроки(СтруктураОтбора);
		
		ТекСтрокаНастроек.УслугиБезОДН    = НайденныеСтрокиПользователей[0].УслугиБезОДН;
		ТекСтрокаНастроек.ВыбранныеУслуги = НайденныеСтрокиПользователей[0].ВыбранныеУслуги;
		ТекСтрокаНастроек.УслугиПоТипам   = НайденныеСтрокиПользователей[0].УслугиПоТипам;
		
		ТекСтрокаНастроек.Пользователи = Новый Массив;
		СписокПользователей = "";
		
		Для каждого ТекПользователь из НайденныеСтрокиПользователей Цикл
			
			ТекСтрокаНастроек.Пользователи.Добавить(ТекПользователь.Пользователь);
			СписокПользователей = СписокПользователей + ТекПользователь.Пользователь.Наименование + ", ";
			
		КонецЦикла;
		
		ТекСтрокаНастроек.СписокПользователей = Лев(СписокПользователей, СтрДлина(СписокПользователей) - 2);
		
	КонецЦикла;
	
	Возврат ТаблицаРазличныхНастроек;
	
КонецФункции

// Проводит сравнение 2-х таблиц.
//
Функция СравнитьТаблицы(Таблица1, Таблица2)
	
	Если ТипЗнч(Таблица1) = Тип("ТаблицаЗначений") И ТипЗнч(Таблица2) = Тип("ТаблицаЗначений") Тогда
		
		Если НЕ Таблица1.Количество() = Таблица2.Количество() Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// Получаем список колонок первой таблицы (считаем, что колонки идентичны).
		// Это нужно для структуры отбора.
		СписокКолонок1 = "";
		
		Для каждого ТекКолонка из Таблица1.Колонки Цикл
			
			СписокКолонок1 = СписокКолонок1 + ТекКолонка.Имя + ", ";
			
		КонецЦикла;
		
		СписокКолонок1 = Лев(СписокКолонок1, СтрДлина(СписокКолонок1) - 2);
		
		// Получаем список колонок второй таблицы.
		СписокКолонок2 = "";
		
		Для каждого ТекКолонка из Таблица2.Колонки Цикл
			
			СписокКолонок2 = СписокКолонок2 + ТекКолонка.Имя + ", ";
			
		КонецЦикла;
		
		СписокКолонок2 = Лев(СписокКолонок2, СтрДлина(СписокКолонок2) - 2);
		
		// Проверяем идентичность состава колонок.
		Если НЕ СписокКолонок1 = СписокКолонок2 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		// Выполняем поиск строк 1-й таблицы во 2-й таблице.
		// Всегда должна быть найдена только 1 строка, в противном случае считаем,
		// что таблицы не совпадают.
		СтруктураОтбора = Новый Структура(СписокКолонок1);
		
		Для каждого ТекСтрока из Таблица1 Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураОтбора, ТекСтрока);
			
			СтрокиВТаблице2 = Таблица2.НайтиСтроки(СтруктураОтбора);
			
			Если НЕ СтрокиВТаблице2.Количество() = 1 Тогда
				
				Возврат Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат Истина;
		
	Иначе
		
		Если Таблица1 = Неопределено И Таблица2 = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Выполняет перенос значений измерений типовых регистров из помеченных на удаление в добавленные корректные.
//
Процедура ВыполнитьПереносРеквизитовОбъектовТиповойБП_3_0_49_3()
	
	// Регистр сведений "Двоичные данные файлов", измерение "Файл".
	НаборДанных = РегистрыСведений.ДвоичныеДанныеФайлов.СоздатьНаборЗаписей();
	НаборДанных.Прочитать();
	
	Для Каждого ТекЗапись Из НаборДанных Цикл
		Если Не ЗначениеЗаполнено(ТекЗапись.Файл) Тогда
			ТекЗапись.Файл = ТекЗапись.УдалитьПрисоединенныйФайл;
		КонецЕсли;
	КонецЦикла;
	
	Если Не КВП_ЗаписатьОбъект(НаборДанных, Истина) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	// Регистр накопления "ПособияПоУходуЗаРебенком", измерение "ФизическоеЛицо".
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПособияПоУходуЗаРебенком.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ПособияПоУходуЗаРебенком КАК ПособияПоУходуЗаРебенком
	|ГДЕ
	|	НЕ ПособияПоУходуЗаРебенком.УдалитьФизическоеЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|			И ПособияПоУходуЗаРебенком.ФизическоеЛицо = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)";
	
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать();
	Пока ВыборкаРегистраторов.Следующий() Цикл
		
		НаборЗаписей = РегистрыНакопления.ПособияПоУходуЗаРебенком.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистраторов.Регистратор);
		НаборЗаписей.Прочитать();
		
		Для Каждого ТекЗапись Из НаборЗаписей Цикл
			Если Не ЗначениеЗаполнено(ТекЗапись.ФизическоеЛицо) Тогда
				ТекЗапись.ФизическоеЛицо = ТекЗапись.УдалитьФизическоеЛицо;
			КонецЕсли;
		КонецЦикла;
		
		Если Не КВП_ЗаписатьОбъект(НаборЗаписей, Истина) Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		ДобавитьСообщениеПользователю("Обработчик обновления ""ВыполнитьПереносРеквизитовОбъектовТиповойБП"" не выполнен или выполнен с ошибками!", Истина);
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьПереносРеквизитовОбъектовТиповойБП_3_0_49_3()

// Процедура перезаполняет новый реквизит "ДоляСобственности" табличной части "Собственники" документа
// "Установка собственников помещений". Данный реквизит хранит значения только информативно.
// Ранее реквизит "ДоляСобственности" был в таблице формы документа и при пометке на удаление документа значения
// данной колонки очищались.
// По заявке З00018461.
//
Процедура ПерезаполнитьДолюСобственностиВДокументахУстановкаСобственниковНаСервере_3_0_49_6()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_УстановкаСобственниковПомещенийСобственники.Ссылка
	|ИЗ
	|	Документ.УПЖКХ_УстановкаСобственниковПомещений.Собственники КАК УПЖКХ_УстановкаСобственниковПомещенийСобственники
	|ГДЕ
	|	НЕ УПЖКХ_УстановкаСобственниковПомещенийСобственники.Ссылка.ПометкаУдаления
	|	И УПЖКХ_УстановкаСобственниковПомещенийСобственники.ДоляСобственности = """"
	|	И УПЖКХ_УстановкаСобственниковПомещенийСобственники.Ссылка.НесколькоСобственников = ИСТИНА";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ОбъектДокумента = Выборка.Ссылка.ПолучитьОбъект();
		
		Собственники = ОбъектДокумента.Собственники;
		
		Для Каждого ТекущаяСтрока Из Собственники Цикл
			ТекущаяСтрока.ДоляСобственности = УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьПредставлениеДроби(
												ТекущаяСтрока.ДоляСобственникаЧислитель, ТекущаяСтрока.ДоляСобственникаЗнаменатель);
		КонецЦикла;
		
		ЗаписатьОбъект(ОбъектДокумента);
		
	КонецЦикла;
	
КонецПроцедуры // ПерезаполнитьДолюСобственностиВДокументахУстановкаСобственниковНаСервере_3_0_49_6()

// Процедура заполняет новый регистр сведений "Типы помещений для распределения расхода коллективных приборов учета".
//
Процедура ЗаполнитьРСТипыПомещенийДляРаспределенияРасходаКПУ_3_0_49_6()
	
	// Определим массив типов помещений, используемых ранее по умолчанию.
	МассивТиповПомещений = Новый Массив;
	МассивТиповПомещений.Добавить(Перечисления.КВП_ТипыПомещений.Квартира);
	МассивТиповПомещений.Добавить(Перечисления.КВП_ТипыПомещений.Офис);
	
	НаборЗаписей = РегистрыСведений.УПЖКХ_ТипыПомещенийДляРаспределенияРасходаКПУ.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		Для Каждого ТипПомещения Из МассивТиповПомещений Цикл
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ТипПомещения = ТипПомещения;
			
		КонецЦикла;
			
		Если НЕ ЗаписатьОбъект(НаборЗаписей) Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ Тогда
		ДобавитьСообщениеПользователю("Обработчик обновления ""ЗаполнитьРСТипыПомещенийДляРаспределенияРасходаКПУ"" не выполнен!", Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРСТипыПомещенийДляРаспределенияРасходаКПУ_3_0_49_6()

// Процедура заполняет значения настроек отбора квитанций значениями по умолчанию.
// По заявке З00015623 реализована возможность указывать отбор квитанций, которые будут выведены на печать.
//
Процедура ЗаполнитьЗначениеОтбораКвитанцийВНастройкахСбораДанныхДляКвитанцийИОбменов_3_0_49_7()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.Ссылка
	|ИЗ
	|	Справочник.УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов КАК УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов
	|ГДЕ
	|	НЕ УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.ПометкаУдаления
	|	И УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.ОтборКвитанций = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ЗначенияОтбораКвитанций.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектСправочника = Выборка.Ссылка.ПолучитьОбъект();
		
		Если ОбъектСправочника.УдалитьНеПечататьНулевыеКвитанции Тогда
			ОбъектСправочника.ОтборКвитанций = Перечисления.УПЖКХ_ЗначенияОтбораКвитанций.НеПечататьНулевыеКвитанции;
		Иначе
			ОбъектСправочника.ОтборКвитанций = Перечисления.УПЖКХ_ЗначенияОтбораКвитанций.ПечататьВсеКвитанции;
		КонецЕсли;
		
		// Устанавливаем значения границ отбора по умолчанию в значение 0, так как данный реквизит справочника "УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов"
		// имеет составной тип для того, чтобы в полях границ отбора на форме была возможность выводить дополнительный информационный текст.
		// А так как тип составной, то данные значения в необработанных элементах справочника "УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов" равны "Неопределено".
		
		ОбъектСправочника.ГраницаОтбораИтоговойСуммыОт = 0;
		ОбъектСправочника.ГраницаОтбораИтоговойСуммыДо = 0;
		
		ЗаписатьОбъект(ОбъектСправочника);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьЗначениеОтбораКвитанцийВНастройкахСбораДанныхДляКвитанцийИОбменов_3_0_49_7

// Ранее закрытие периода отражало зачет долгов и переплат с видом начисления «Оплата»,
// теперь используется вид начисления «Зачет долгов и переплат».
// Обработчик производит замену вида начисления «Оплата» на «Зачет долгов и переплат»
// для существующих документов закрытия периода по начислениям ЖКХ.
Процедура ВыполнитьЗаменуВидовНачисленияДляДвиженийДокументаЗакрытиеПериодаПоНачислениямЖКЖ_3_0_49_7()
	
	// Получим список регистраторов типа "Закрытие периода по начислениям ЖКХ", для которых
	// при движении в регистре начислений указан вид начисления "Оплата".
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УПЖКХ_Начисления.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления КАК УПЖКХ_Начисления
	|ГДЕ
	|	УПЖКХ_Начисления.Регистратор ССЫЛКА Документ.УПЖКХ_ЗакрытиеПериодаПоНачислениямЖКХ
	|	И УПЖКХ_Начисления.ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Для полученных документов перезапишем движения, установив вид начисления
	// "Зачет долгов и переплат" вместо "Оплата".
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыНакопления.УПЖКХ_Начисления.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписей.Прочитать();
		
		// Изменим вид начисления с "Оплаты" на новый "ЗачетДолговИПереплат".
		Для Каждого Запись Из НаборЗаписей Цикл
			Если Запись.ВидНачисления = Перечисления.УПЖКХ_ВидыНачислений.Оплата Тогда
				Запись.ВидНачисления = Перечисления.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат;
			КонецЕсли; 
		КонецЦикла;
		
		Если Не КВП_ЗаписатьОбъект(НаборЗаписей) Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		ДобавитьСообщениеПользователю("Обработчик обновления ""ВыполнитьЗаменуВидовНачисленияДляДвиженийДокументаЗакрытиеПериодаПоНачислениямЖКЖ"" не выполнен!", Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура производит заполнение нового реквизита "Вариант распределения" документа "Ввод фактических затрат на объект"
// и нового реквизита табличной части "Тариф".
//
Процедура ЗаполнитьВариантРаспределенияИТарифыВДокументеВводФактическихЗатратНаОбъект_3_0_50_2()
	
	// Для всех документов ввода затрат установим вариант распределения "По объему и сумме".
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ВводФактическихЗатратНаОбъект.Ссылка
	|ИЗ
	|	Документ.КВП_ВводФактическихЗатратНаОбъект КАК КВП_ВводФактическихЗатратНаОбъект
	|ГДЕ
	|	КВП_ВводФактическихЗатратНаОбъект.ВариантРаспределения = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВариантыРаспределенияФактическихЗатрат.ПустаяСсылка)
	|";
	
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДокументов.Следующий() Цикл
		
		ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		
		ДокументОбъект.ВариантРаспределения = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияФактическихЗатрат.ПоОбъемуИСумме");
		
		Для Каждого ТекСтрока Из ДокументОбъект.ТаблицаРаспределения Цикл
			Если ЗначениеЗаполнено(ТекСтрока.Количество) Тогда
				ТекСтрока.Тариф = ТекСтрока.Сумма / ТекСтрока.Количество;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЗаписатьОбъект(ДокументОбъект, РежимЗаписиДокумента.Запись) Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Отказ Тогда
		ДобавитьСообщениеПользователю("Обработчик обновления ""ЗаполнитьВариантРаспределенияИТарифыВДокументеВводФактическихЗатратНаОбъект"" не выполнен!", Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьВариантРаспределенияИТарифыВДокументеВводФактическихЗатратНаОбъект_3_0_50_2()

// Процедура заполняет пустые значения настройки "Вариант настройки формата реестра" в справочнике
// "Настройки загрузки/выгрузки" для Загрузки показаний приборов учета значением по умолчанию "Вручную".
//
// По заявке № З00015910 реализована возможность загружать сведения о показаниях
// приборов учета по формату «Вариант 8» файла «Выгрузки в Систему Город».
// Для этого на форму справочника «Настройки загрузки/выгрузки» добавлены поля:
// 1. «Вариант настройки формата реестра» - указывается вариант, каким образом задавать состав параметров файла
//    реестра показаний. Поле доступно для Вида загрузки/выгрузки «Загрузка из систем сбора показаний приборов учета».
//    Доступны значения:
//  1.1. «Вручную» - выбор данного значения настройки "Вариант настройки формата реестра" указывает на то,
//       что используется фиксированный порядок значений параметров "Прибор учета" в каждой строке реестра показаний.
//       Например: в каждой строке реестра показаний на позиции ("Номер колонки") равной 10 хранится только дневное
//       показание текущего Прибора учета 1. Механизм загрузки сведений о показаниях приборов учета используется
//       типовой («как и раньше»).
//  1.2. «По шаблону» - выбор данного значения настройки "Вариант настройки формата реестра" указывает на то,
//       что в качестве формата реестра показаний используется определенный формат файла со сведениями о
//       показаниях приборов учета. Например, формат реестра показаний соответствует формату выгрузки "Вариант 8"
//       в обработке «Выгрузка в Систему Город». Используется новый механизм загрузки сведений о показаниях
//       приборов учета.
// 2. «Шаблон реестра показаний приборов учета» - указывается шаблон файла реестра показаний приборов учета.
//    Поле доступно для Варианта настройки формата реестра «По шаблону».
//
Процедура ЗаполнитьВариантНастройкиФорматаРеестраПоказанийПриборовУчета_3_0_51_2()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_НастройкиЗагрузкиВыгрузки.Ссылка
	|ИЗ
	|	Справочник.КВП_НастройкиЗагрузкиВыгрузки КАК КВП_НастройкиЗагрузкиВыгрузки
	|ГДЕ
	|	НЕ КВП_НастройкиЗагрузкиВыгрузки.ПометкаУдаления
	|	И КВП_НастройкиЗагрузкиВыгрузки.ВидОперации = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНастроекЗагрузкиИзАС.ЗагрузкаИзСистемСбораПоказанийПриборовУчета)
	|	И КВП_НастройкиЗагрузкиВыгрузки.ВариантНастройкиФорматаРеестраПоказанийПриборовУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВариантыНастройкиФорматаРеестраПоказанийПриборовУчета.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектСправочника = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектСправочника.ВариантНастройкиФорматаРеестраПоказанийПриборовУчета = Перечисления.УПЖКХ_ВариантыНастройкиФорматаРеестраПоказанийПриборовУчета.Вручную;
		
		ЗаписатьОбъект(ОбъектСправочника);
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьВариантНастройкиФорматаРеестраПоказанийПриборовУчета_3_0_51_2()

// Процедура изменяет реквизит "ЭтоЖилойФонд" справочника "УПЖКХ_ВидыПомещений" по следующему алгоритму:
// в запросе получить виды помещений, для которых тип помещения определен как "дом" или "квартира" и
// реквизит "ЭтоЖилойФонд" в значении Ложь, далее для найденных видов помещений в справочнике
// "УПЖКХ_ВидыПомещений" значение реквизита "ЭтоЖилойФонд" меняется на Истина.
Процедура ЗаполнитьТипФондаВЭлементахСправочникаВидыПомещений_3_0_51_3()
	
	// Изначально жилыми типами являлись "Дом" и "Квартира". Из справочника "ВидыПомещений" будем выбирать
	// только виды, соответствующие этим типам. Признак жилого фонда в них будет установлен в Истину.
	МассивТиповПомещений = Новый Массив;
	МассивТиповПомещений.Добавить(Перечисления.КВП_ТипыПомещений.Дом);
	МассивТиповПомещений.Добавить(Перечисления.КВП_ТипыПомещений.Квартира);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_ВидыПомещений.Ссылка
	|ИЗ
	|	Справочник.УПЖКХ_ВидыПомещений КАК УПЖКХ_ВидыПомещений
	|ГДЕ
	|	УПЖКХ_ВидыПомещений.ТипПомещения В(&МассивТиповПомещений)
	|	И НЕ УПЖКХ_ВидыПомещений.ЭтоЖилойФонд";
	
	Запрос.УстановитьПараметр("МассивТиповПомещений", МассивТиповПомещений);
	
	ВыборкаПомещений = Запрос.Выполнить().Выбрать();
	// Обход результатов запроса и запись значений Истина в реквизит "ЭтоЖилойФонд" для полученных
	// в запросе видов помещений.
	Пока ВыборкаПомещений.Следующий() Цикл
		
		СправочникОбъект = ВыборкаПомещений.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ЭтоЖилойФонд = Истина;
		
		Если НЕ ЗаписатьОбъект(СправочникОбъект) Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТипФондаВЭлементахСправочникаВидыПомещений_3_0_51_3()

// Процедура проверяет, имеются ли начисления по нескольким договорам по одному л/с в месяце начисления.
//
Процедура ПроверитьНаличиеНачисленийПоНесколькимДоговорам_3_0_51_6()
	
	// Чтобы выявить клиентов, у которых есть изменения договоров в середине месяца начисления, 
	// проверяем данные по начислениям в разрезе договоров. 
	// Если есть начисления по л/с (корректировки и пр. движения не берем во внимание) с несколькими договорами 
	// в месяце начисления, то сообщаем пользователю, чтобы связался с нами для обсуждения данной ситуации.
	// В ближайших релизах планируется "избавление" от договоров в документах начисления услуг.
	// Актуальные договоры будут получаться на этапе отражения начислений в регл.учете.
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_УчетнаяПолитикаТСЖСрезПоследних.Организация
	|ПОМЕСТИТЬ ВрОрганизацииГдеВыполняетсяОтражение
	|ИЗ
	|	РегистрСведений.КВП_УчетнаяПолитикаТСЖ.СрезПоследних(&Дата, ) КАК КВП_УчетнаяПолитикаТСЖСрезПоследних
	|ГДЕ
	|	КВП_УчетнаяПолитикаТСЖСрезПоследних.ОтражатьНачисленияВРеглУчете
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Начисления.Организация,
	|	УПЖКХ_Начисления.ЛицевойСчет,
	|	УПЖКХ_Начисления.МесяцНачисления,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_Начисления.Договор) КАК КоличествоДоговоров
	|ПОМЕСТИТЬ ВрРазличныеДоговоры
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			,
	|			,
	|			,
	|			Организация В
	|					(ВЫБРАТЬ
	|						ОрганизацииГдеВыполняетсяОтражение.Организация
	|					ИЗ
	|						ВрОрганизацииГдеВыполняетсяОтражение КАК ОрганизацииГдеВыполняетсяОтражение)
	|				И ВидНачисления В (ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Начисление), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоИПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативу), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоНормативуЗаСчетПовышающегоКоэффициента), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоСреднему), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииДействующегоИПУПоСреднему), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.НачислениеПоОПУ), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ФактическиеЗатраты), ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.СервисныеУслуги))) КАК УПЖКХ_Начисления
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_Начисления.Организация,
	|	УПЖКХ_Начисления.ЛицевойСчет,
	|	УПЖКХ_Начисления.МесяцНачисления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВрРазличныеДоговоры.Организация,
	|	ВрРазличныеДоговоры.ЛицевойСчет,
	|	ВрРазличныеДоговоры.МесяцНачисления
	|ИЗ
	|	ВрРазличныеДоговоры КАК ВрРазличныеДоговоры
	|ГДЕ
	|	ВрРазличныеДоговоры.КоличествоДоговоров > 1";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		ТекстПредупреждения = "Внимание!
							  |В следующих версиях программы мы планируем исправить некоторые проблемы учета договоров
							  |взаиморасчетов по л/с, возникающие при отражении начислений в регламентированном учете.
							  |
							  |При этом в механизм учета договоров для взаиморасчетов по л/с будут добавлены следующие ограничения:
							  |1. Изменение договора для взаиморасчетов по л/с в середине месяца начисления не будет
							  |учитываться при расчете услуг, а отражение начислений будет производиться по договору,
							  |установленному на начало месяца начисления.
							  |2. Ручное изменение договора для взаиморасчетов по л/с в документах начисления услуг станет недоступным.
							  |
							  |Если описанные ограничения не позволят Вам вести корректный учет начислений,
							  |то просим обратиться на линию технической поддержки разработчика программы,
							  |а мы постараемся учесть Ваши пожелания:" + УПЖКХ_ИнформацияОРазработчикеИПрограмме.КонтактыДляОбратнойСвязиСтрокой();
				
		ДобавитьСообщениеПользователю(ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьНаличиеНачисленийПоНесколькимДоговорам_3_0_51_6()

// Процедура проверяет, выбран ли в Настройках формирования платежного документа дополнительный реквизит 
// "Сумма начисления пени с учетом нач.сальдо пени, в копейках [addAmount]". Если такая настройка найдена, то выводится пользователю 
// предупреждающее сообщение.
// В следующих версиях программы планируется отказаться от данного дополнительного реквизита.
//
Процедура ПроверитьНаличиеВыбранногоДополнительногоРеквизитаДляQRСуммаНачисленияПениСУчетомНачСальдоПени_3_0_52_1()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.Организация,
	|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.ДополнительныеРеквизитыQRКодаПоОсн,
	|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.ДополнительныеРеквизитыQRКодаПоКР
	|ИЗ
	|	РегистрСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента КАК УПЖКХ_НастройкиФормированияПлатежногоДокумента";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ИмеетсяПроверяемыйРеквизит = Ложь;
	
	Пока Выборка.Следующий() Цикл
		
		// Проверяем в настройках по основным услугам.
		НастрокиПоОснУслугам = Выборка.ДополнительныеРеквизитыQRКодаПоОсн.Получить();
		Если ТипЗнч(НастрокиПоОснУслугам) = Тип("СписокЗначений") Тогда
			НайденноеЗначение          = НастрокиПоОснУслугам.НайтиПоЗначению("addAmount1");
			ИмеетсяПроверяемыйРеквизит = (НайденноеЗначение <> Неопределено  И НайденноеЗначение.Пометка);
		КонецЕсли;
		
		// Проверяем в настройках по услугам кап.ремонта.
		Если НЕ ИмеетсяПроверяемыйРеквизит Тогда
			НастрокиПоУслугамКР = Выборка.ДополнительныеРеквизитыQRКодаПоКР.Получить();
			Если ТипЗнч(НастрокиПоУслугамКР) = Тип("СписокЗначений") Тогда
				НайденноеЗначение          = НастрокиПоУслугамКР.НайтиПоЗначению("addAmount1");
				ИмеетсяПроверяемыйРеквизит = (НайденноеЗначение <> Неопределено  И НайденноеЗначение.Пометка);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ИмеетсяПроверяемыйРеквизит Тогда
		
		ТекстПредупреждения = "Внимание!
							  |В следующих версиях программы мы планируем отказаться от дополнительного реквизита ""Сумма начисления пени с
							  |учетом нач.сальдо пени, в копейках [addAmount]"", который Вы используете для формирования двумерного штрихкода.
							  |Если и в дальнейшем планируете его использовать, свяжитесь с нами:" + УПЖКХ_ИнформацияОРазработчикеИПрограмме.КонтактыДляОбратнойСвязиСтрокой();
		
		ДобавитьСообщениеПользователю(ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры // ПроверитьНаличиеВыбранногоДополнительногоРеквизитаДляQRСуммаНачисленияПениСУчетомНачСальдоПени_3_0_52_1()

// Процедура заполняет новый ресурс "Вид жильцов, которым предоставляются льготы" во всех записях
// регистра сведений "Настройки предоставления и расчета льгот".
//
Процедура ЗаполнитьРесурсВидЖильцовКоторымПредоставляютсяЛьготыРСНастройкиПредоставленияИРасчетаЛьгот_3_0_52_2()
	
	НаборЗаписей = РегистрыСведений.УПЖКХ_НастройкиПредоставленияИРасчетаЛьгот.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Если НЕ ЗначениеЗаполнено(Запись.ВидЖильцовКоторымПредоставляютсяЛьготы) Тогда
			Запись.ВидЖильцовКоторымПредоставляютсяЛьготы = ?(Запись.УдалитьЛьготуПредоставлятьЗарегистрированнымЖильцам,
																		Перечисления.УПЖКХ_ВидыЖильцовКоторымПредоставляютсяЛьготы.Зарегистрированные,
																		Перечисления.УПЖКХ_ВидыЖильцовКоторымПредоставляютсяЛьготы.Проживающие);
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗаписатьОбъект(НаборЗаписей) Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		ДобавитьСообщениеПользователю("Обработчик обновления ""ЗаполнитьРесурсВидЖильцовКоторымПредоставляютсяЛьготыРСНастройкиПредоставленияИРасчетаЛьгот"" не выполнен!", Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРесурсВидЖильцовКоторымПредоставляютсяЛьготыРСНастройкиПредоставленияИРасчетаЛьгот_3_0_52_2()

// Процедура проверяет, имеется ли в базе данных хотя бы один жилец с установленным флагом 
// "Владелец (наниматель) единственного жилья". Если жильцы с установленным флагом найдены, 
// то устанавливает значение константы "УПЖКХ_ИспользоватьФункционалВЕЖ" в значение ИСТИНА.
// 
Процедура ЗаполнитьЗначениеКонстантыИспользоватьФункционалВЕЖ_3_0_52_2()
	
	Если НЕ Константы.УПЖКХ_ИспользоватьФункционалВЕЖ.Получить() Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КВП_СведенияОЖильцахСрезПоследних.Объект КАК Объект
		|ИЗ
		|	РегистрСведений.КВП_СведенияОЖильцах.СрезПоследних(, ) КАК КВП_СведенияОЖильцахСрезПоследних
		|ГДЕ
		|	КВП_СведенияОЖильцахСрезПоследних.ВладелецЕдинственногоЖилья = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	КВП_НормыПотребленияУслуг.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КВП_НормыПотребленияУслуг КАК КВП_НормыПотребленияУслуг
		|ГДЕ
		|	НЕ КВП_НормыПотребленияУслуг.ПометкаУдаления
		|	И КВП_НормыПотребленияУслуг.ВидЖильцов = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыЖильцов.ВладельцыЕдинственногоЖилья)";
		Результат = Запрос.ВыполнитьПакет();
		
		ВыборкаВЕЖей   = Результат[0].Выбрать();
		ВыборкаНормВЕЖ = Результат[1].Выбрать();
		
		Если ВыборкаВЕЖей.Следующий() Тогда
			Константы.УПЖКХ_ИспользоватьФункционалВЕЖ.Установить(Истина);
		КонецЕсли;
		
		Если ВыборкаНормВЕЖ.Следующий() Тогда
			ТекстПредупреждения = "Внимание!
								  |В следующих версиях программы мы планируем отказаться от использования вида жильцов 
								  |""Владелец единственного жилья"" при расчете норм потребления составных услуг с ограничением по норме. 
								  |Для расчета норм потребления в соответствии с Постановлением Правительства Москвы 
								  |№848-ПП от 13.12.2016 (при расчете начислений услуг по содержанию жилого помещения) 
								  |теперь используется новая настройка нормы ""Норма для владельцев (нанимателей) единственного жилья"".
								  |Если Вы и в дальнейшем планируете использовать указанный вид жильцов, свяжитесь с нами:
								  |Тел. для Москвы и Московской Области: + 7 (495) 777-25-43.
								  |Тел. для регионов: + 7 (836) 249-46-89.
								  |Иные контактные данные можете найти на сайте https://otr-soft.ru/contacts/.";
			
			ДобавитьСообщениеПользователю(ТекстПредупреждения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьЗначениеКонстантыИспользоватьФункционалВЕЖ_3_0_52_2()

// Процедура заполняет значение постфикса для услуг содержания общего имущества
// в регистре сведений "Настройки формирования платежного документа".
//
Процедура ЗаполнитьЗначенияПредставленияУслугСОИПоУмолчанию_3_0_52_2()
	
	ИмяПараметраОбновленияИБ = "ЗаполнитьЗначенияПредставленияУслугСОИПоУмолчанию";
	
	// Если обработка была выполнена ранее, то прекращаем выполнение данного обработчика обновления.
	ЗаполнениеЗначенияПредставленияУслугСОИПоУмолчаниюВыполнен = ПолучитьПараметрОбновленияИБ(ИмяПараметраОбновленияИБ);
	
	Если ЗаполнениеЗначенияПредставленияУслугСОИПоУмолчаниюВыполнен = Истина Тогда
		Возврат;
	КонецЕсли;
	
	// Пройдем по всем организациям и для каждой заполним представление префикса как "для СОИ".
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента КАК УПЖКХ_НастройкиФормированияПлатежногоДокумента
	|ГДЕ
	|	(ВЫРАЗИТЬ(УПЖКХ_НастройкиФормированияПлатежногоДокумента.ПредставлениеУслугСОИ КАК СТРОКА(1))) = """"";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента.СоздатьМенеджерЗаписи();
		НаборЗаписей.Организация = Выборка.Организация;
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Выбран() Тогда
			НаборЗаписей.ПредставлениеУслугСОИ = "для СОИ";
			Если НЕ ЗаписатьОбъект(НаборЗаписей) Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не Отказ Тогда
		// Сохраним параметр, измененный на значение ИСТИНА, для анализа повторных обновлений.
		ЗаполнениеЗначенияПредставленияУслугСОИПоУмолчаниюВыполнен = Истина;
		СохранитьПараметрОбновленияИБ(ИмяПараметраОбновленияИБ, ЗаполнениеЗначенияПредставленияУслугСОИПоУмолчаниюВыполнен);
	Иначе
		ДобавитьСообщениеПользователю("Обработчик обновления ""ЗаполнитьЗначенияПредставленияУслугСОИПоУмолчанию"" не выполнен!", Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает настройки использования многопоточности по умолчанию.
//
Процедура УстановитьНастройкиМногопоточностиПоУмолчанию_3_0_52_2()
	
	ИспользоватьМногопоточность = Ложь;
	КоличествоПотоков           = 1;
	
	// Получаем настройки многопоточности из настроек мастера начислений, если таковые имеются.
	СтруктураПараметров = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("УПЖКХ_ЗадачиСеансовМастераНачислений", "НастройкиПараметров");
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		
		Если СтруктураПараметров.Свойство("ИспользоватьМногопоточность") Тогда
			ИспользоватьМногопоточность = СтруктураПараметров.ИспользоватьМногопоточность;
		КонецЕсли;
		
		Если СтруктураПараметров.Свойство("КоличествоПотоков") Тогда
			КоличествоПотоков = СтруктураПараметров.КоличествоПотоков;
		КонецЕсли;
		
	ИначеЕсли НЕ ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		
		ИспользоватьМногопоточность = Истина;
		КоличествоПотоков           = 2;
		
		СтруктураИнформацииОПроцессоре = УПЖКХ_МногопоточнаяОбработкаДанных.ПолучитьИнформациюОКоличествеЯдерИПотоковПроцессора();
		
		Если СтруктураИнформацииОПроцессоре.ВыполненоУспешно Тогда
			
			КоличествоЯдер = СтруктураИнформацииОПроцессоре.КоличествоЯдер;
			
			Если КоличествоЯдер > 1 Тогда
				КоличествоПотоков = КоличествоЯдер;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Константы.УПЖКХ_ИспользоватьМногопоточность.Установить(ИспользоватьМногопоточность);
	Константы.УПЖКХ_КоличествоПотоковПриМногопоточнойОбработкеДанных.Установить(КоличествоПотоков);
	
КонецПроцедуры

// Установить максимальное количество количество л/с в файле обмена по умолчанию.
//
Процедура УстановитьМаксимальноеКоличествоЛСВФайлеОбменаПоУмолчанию_3_0_52_2()
	
	Выборка = Справочники.УПЖКХ_НастройкиОбменаДаннымиССайтомЖКХ.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.ПолучитьОбъект();
		Объект.КоличествоЛСВФайле = 5000;
		
		ЗаписатьОбъект(Объект);
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет значение дополнительного реквизита "Код услуги" QR-штрихкода по услугам капитального ремонта.
// По заявке З00018357 добавлена возможность указывать раздельно значение дополнительного реквизита "serviseName" ("Код услуги")
// в QR-штрихкоде в квитанциях по основным услугам и услугам капитального ремонта.
// Теперь на форме "Настроек формирования платежного документа":
//  1. Поле "Код услуги" на закладке "Настройки QR штрихкода" удалено.
//  2. Добавлено поле "Код услуги" для основных услуг на закладке "Доп. реквизитов QR ШК по основным услугам". 
//  3. Добавлено поле "Код услуги" для услуг капитального ремонта на закладке "Доп. реквизитов QR ШК по услугам капремонта".
// 
// Техническая информация:
//  1. Значение Кода услуги по основным услугам хранится в старом ресурсе "КодУслугиДляШтрихКода", который переименован в 
// "КодУслугиДляШтрихКодаПоОсн".
//  2. Добавлен новый ресурс "КодУслугиДляШтрихКодаПоКР" для хранения значения Кода услуги по услугам капитального ремонта.
// 
Процедура ЗаполнитьЗначенияДополнительногоРеквизитаQRШтрихкодаКодУслуги_3_0_52_3()
	
	НаборЗаписей = РегистрыСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Для Каждого ТекущаяЗапись Из НаборЗаписей Цикл
		
		КодУслугиДляШтрихКода = ТекущаяЗапись.КодУслугиДляШтрихКодаПоОсн;
		
		Если ПустаяСтрока(КодУслугиДляШтрихКода) Тогда
			Продолжить;
		КонецЕсли;
		
		ДополнительныеРеквизитыQRКодаПоКР = ТекущаяЗапись.ДополнительныеРеквизитыQRКодаПоКР.Получить();
		
		Если ТипЗнч(ДополнительныеРеквизитыQRКодаПоКР) = Тип("СписокЗначений")
		   И ДополнительныеРеквизитыQRКодаПоКР.НайтиПоЗначению("serviceName") <> Неопределено Тогда
			ТекущаяЗапись.КодУслугиДляШтрихКодаПоКР = КодУслугиДляШтрихКода;
			КВП_ЗаписатьОбъект(НаборЗаписей);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура отключает настройку "Разрешить печать чеков при оплате банковской картой".
// Теперь в документе "Регистрация оплаты" есть вид операции "Поступление с платежной карты".
// Данная настройка теперь не нужна.
//
Процедура ОтключитьНастройкуРазрешитьПечатьЧековПриОплатеБанковскойКартой_3_0_53_1()
	
	// Пока просто сбрасываем настройку. В скором времени данная настройка будет удалена.
	Константы.УПЖКХ_ПечататьЧекиПриОплатеБанковскойКартой.Установить(Ложь);
	
КонецПроцедуры

// Процедура заполняет регистр сведений "Приборы учета, выгруженные в ГИС ЖКХ" данными
// из регистра сведений "Лицевые счета, выгруженные в ГИС ЖКХ"
// (ранее он назывался "Объекты, выгруженные в ГИС ЖКХ"). Теперь данные по ПУ и ЛС,
// выгруженным в ГИС, хранятся в разных регистрах сведений.
Процедура ЗаполнитьРегистрСведенийПриборыУчетаВыгруженныеВГИСЖКХ_3_0_53_2()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_ЛицевыеСчетаВыгруженныеВГИСЖКХ.Объект КАК Объект,
	|	УПЖКХ_ЛицевыеСчетаВыгруженныеВГИСЖКХ.ДатаВыгрузки КАК ДатаВыгрузки,
	|	УПЖКХ_ЛицевыеСчетаВыгруженныеВГИСЖКХ.ТипЛС КАК ТипЛС,
	|	ВЫБОР
	|		КОГДА УПЖКХ_ЛицевыеСчетаВыгруженныеВГИСЖКХ.Объект ССЫЛКА Справочник.КВП_Счетчики
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ЭтоЛицевойСчет
	|ИЗ
	|	РегистрСведений.УПЖКХ_ЛицевыеСчетаВыгруженныеВГИСЖКХ КАК УПЖКХ_ЛицевыеСчетаВыгруженныеВГИСЖКХ";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ЭтоЛицевойСчет Тогда
			// Если значение измерения "ТипЛС" не заполнено, то установим его
			// значением по умолчанию "ЛС УО".
			Если НЕ ЗначениеЗаполнено(Выборка.ТипЛС) Тогда
				НаборЗаписейРегистраЛС = РегистрыСведений.УПЖКХ_ЛицевыеСчетаВыгруженныеВГИСЖКХ.СоздатьНаборЗаписей();
				НаборЗаписейРегистраЛС.Отбор.Объект.Установить(Выборка.Объект);
				НаборЗаписейРегистраЛС.Прочитать();
				Для Каждого ТекЗапись Из НаборЗаписейРегистраЛС Цикл
					ЗаполнитьЗначенияСвойств(ТекЗапись, Выборка);
					ТекЗапись.ТипЛС = Перечисления.УПЖКХ_ТипЛицевогоСчета.ЛСУО;
				КонецЦикла;
				КВП_ЗаписатьОбъект(НаборЗаписейРегистраЛС);
			КонецЕсли;
		Иначе
			НаборЗаписейРегистраПУ = РегистрыСведений.УПЖКХ_ПриборыУчетаВыгруженныеВГИСЖКХ.СоздатьНаборЗаписей();
			НаборЗаписейРегистраПУ.Отбор.Объект.Установить(Выборка.Объект);
			НаборЗаписейРегистраПУ.Прочитать();
			
			Если НаборЗаписейРегистраПУ.Количество() = 0 Тогда
				НоваяЗапись = НаборЗаписейРегистраПУ.Добавить();
				НоваяЗапись.Объект       = Выборка.Объект;
				НоваяЗапись.ДатаВыгрузки = Выборка.ДатаВыгрузки;
			Иначе
				Для Каждого ТекЗапись Из НаборЗаписейРегистраПУ Цикл
					ЗаполнитьЗначенияСвойств(ТекЗапись, Выборка);
				КонецЦикла;
			КонецЕсли;
			КВП_ЗаписатьОбъект(НаборЗаписейРегистраПУ);
			
			НаборЗаписейРегистраЛС = РегистрыСведений.УПЖКХ_ЛицевыеСчетаВыгруженныеВГИСЖКХ.СоздатьНаборЗаписей();
			НаборЗаписейРегистраЛС.Отбор.Объект.Установить(Выборка.Объект);
			КВП_ЗаписатьОбъект(НаборЗаписейРегистраЛС);
		КонецЕсли;
		
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьРегистрСведенийПриборыУчетаВыгруженныеВГИСЖКХ_3_0_53_2()

// Заполняет значение константы "Использовать функционал ТСЖ" на основе наличия документов блока ТСЖ.
Процедура ОпределитьИспользуетсяЛиФункционалУчетаТСЖ_3_0_53_2()
	
	ЗначениеКонстанты = Константы.УПЖКХ_ИспользоватьФункционалТСЖ.Получить();
	
	Если ЗначениеКонстанты = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВступлениеВТСЖ.Ссылка КАК ВступлениеВТСЖ
	|ИЗ
	|	Документ.КВП_ВступлениеВТСЖ КАК КВП_ВступлениеВТСЖ
	|ГДЕ
	|	НЕ КВП_ВступлениеВТСЖ.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ВыходИзТСЖ.Ссылка
	|ИЗ
	|	Документ.КВП_ВыходИзТСЖ КАК КВП_ВыходИзТСЖ
	|ГДЕ
	|	НЕ КВП_ВыходИзТСЖ.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_РасчетВзносов.Ссылка
	|ИЗ
	|	Документ.КВП_РасчетВзносов КАК КВП_РасчетВзносов
	|ГДЕ
	|	НЕ КВП_РасчетВзносов.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_СметаТСЖ.Ссылка
	|ИЗ
	|	Документ.КВП_СметаТСЖ КАК КВП_СметаТСЖ
	|ГДЕ
	|	НЕ КВП_СметаТСЖ.ПометкаУдаления";
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если РезультатЗапроса.Получить(0).Пустой() И РезультатЗапроса.Получить(1).Пустой() И РезультатЗапроса.Получить(2).Пустой() И РезультатЗапроса.Получить(3).Пустой() Тогда
		ФункционалИспользуется = Ложь;
	Иначе
		ФункционалИспользуется = Истина;
	КонецЕсли;
	
	Константы.УПЖКХ_ИспользоватьФункционалТСЖ.Установить(ФункционалИспользуется);
	
КонецПроцедуры

// Выполняет перенос сведений о документах собственности из справочников "Жильцы" и "Лицевые счета"
// в регистр сведений "Собственники помещений" и соответствующие ему регистраторы.
Процедура ПеренестиСведенияОСобственностиИзЛицевыхСчетовИЖильцов_3_0_53_2()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Жильцы.Ссылка КАК Жилец,
	|	УПЖКХ_Жильцы.ФизЛицо КАК ФизЛицо,
	|	УПЖКХ_Жильцы.УдалитьРегистрацияПраваСобственностиДата КАК ДатаДокумента,
	|	УПЖКХ_Жильцы.УдалитьРегистрацияПраваСобственностиНомерДокумента КАК НомерДокумента,
	|	УПЖКХ_Жильцы.Владелец.Адрес КАК Помещение
	|ПОМЕСТИТЬ СобстенностьИзЖильцов
	|ИЗ
	|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
	|ГДЕ
	|	(НЕ УПЖКХ_Жильцы.УдалитьРегистрацияПраваСобственностиДата = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ НЕ УПЖКХ_Жильцы.УдалитьРегистрацияПраваСобственностиНомерДокумента = """")
	|	И НЕ УПЖКХ_Жильцы.СведенияОСобственностиПеренесены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчета.Ссылка КАК ЛицевойСчет,
	|	КВП_ЛицевыеСчета.УдалитьДатаРегистрацииПраваСобственности КАК ДатаДокумента,
	|	КВП_ЛицевыеСчета.УдалитьНомерСвидетельстваРегистрацииПраваСобственности КАК НомерДокумента,
	|	КВП_ЛицевыеСчета.Адрес КАК Помещение
	|ПОМЕСТИТЬ СобственностьИзЛицевыхСчетов
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	(НЕ КВП_ЛицевыеСчета.УдалитьДатаРегистрацииПраваСобственности = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ НЕ КВП_ЛицевыеСчета.УдалитьНомерСвидетельстваРегистрацииПраваСобственности = """")
	|	И НЕ КВП_ЛицевыеСчета.СведенияОСобственностиПеренесены
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СобственностьИзЛицевыхСчетов.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_Жильцы.Ссылка КАК Жилец,
	|	УПЖКХ_Жильцы.ФизЛицо КАК ФизЛицо,
	|	СобственностьИзЛицевыхСчетов.ДатаДокумента КАК ДатаДокумента,
	|	СобственностьИзЛицевыхСчетов.НомерДокумента КАК НомерДокумента,
	|	СобственностьИзЛицевыхСчетов.Помещение КАК Помещение
	|ПОМЕСТИТЬ ЖильцыИзЛицевыхСчетов
	|ИЗ
	|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СобственностьИзЛицевыхСчетов КАК СобственностьИзЛицевыхСчетов
	|		ПО УПЖКХ_Жильцы.Владелец = СобственностьИзЛицевыхСчетов.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СобстенностьИзЖильцов.Жилец КАК Жилец,
	|	СобстенностьИзЖильцов.ФизЛицо КАК ФизЛицо,
	|	СобстенностьИзЖильцов.ДатаДокумента КАК ДатаДокумента,
	|	СобстенностьИзЖильцов.НомерДокумента КАК НомерДокумента,
	|	ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка) КАК ЛицевойСчет,
	|	СобстенностьИзЖильцов.Помещение КАК Помещение
	|ПОМЕСТИТЬ СведенияОСобственностиИзСправочников
	|ИЗ
	|	СобстенностьИзЖильцов КАК СобстенностьИзЖильцов
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЖильцыИзЛицевыхСчетов.Жилец,
	|	ЖильцыИзЛицевыхСчетов.ФизЛицо,
	|	ЖильцыИзЛицевыхСчетов.ДатаДокумента,
	|	ЖильцыИзЛицевыхСчетов.НомерДокумента,
	|	ЖильцыИзЛицевыхСчетов.ЛицевойСчет,
	|	ЖильцыИзЛицевыхСчетов.Помещение
	|ИЗ
	|	ЖильцыИзЛицевыхСчетов КАК ЖильцыИзЛицевыхСчетов
	|
	|СГРУППИРОВАТЬ ПО
	|	ЖильцыИзЛицевыхСчетов.Помещение,
	|	ЖильцыИзЛицевыхСчетов.ДатаДокумента,
	|	ЖильцыИзЛицевыхСчетов.ФизЛицо,
	|	ЖильцыИзЛицевыхСчетов.Жилец,
	|	ЖильцыИзЛицевыхСчетов.НомерДокумента,
	|	ЖильцыИзЛицевыхСчетов.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Собственник КАК Собственник,
	|	УПЖКХ_СобственникиПомещенийСрезПоследних.Помещение КАК Помещение
	|ПОМЕСТИТЬ СобственникиИзРегистра
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственникиПомещений.СрезПоследних(
	|			,
	|			(Собственник, Помещение) В
	|					(ВЫБРАТЬ
	|						СведенияОСобственностиИзСправочников.ФизЛицо,
	|						СведенияОСобственностиИзСправочников.Помещение
	|					ИЗ
	|						СведенияОСобственностиИзСправочников КАК СведенияОСобственностиИзСправочников)
	|				И (НЕ ВидДокумента = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ДокументыНаПравоСобственности.ПустаяСсылка)
	|					ИЛИ НЕ НомерДокумента = """")
	|				И Действует) КАК УПЖКХ_СобственникиПомещенийСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СведенияОСобственностиИзСправочников.Жилец КАК Жилец,
	|	СведенияОСобственностиИзСправочников.ЛицевойСчет КАК ЛицевойСчет,
	|	СведенияОСобственностиИзСправочников.ФизЛицо КАК ФизЛицо,
	|	СведенияОСобственностиИзСправочников.ДатаДокумента КАК ДатаДокумента,
	|	СведенияОСобственностиИзСправочников.НомерДокумента КАК НомерДокумента,
	|	СведенияОСобственностиИзСправочников.Помещение КАК Помещение
	|ПОМЕСТИТЬ СобственникиБезСведенийОДокументахВРегистре
	|ИЗ
	|	СведенияОСобственностиИзСправочников КАК СведенияОСобственностиИзСправочников
	|ГДЕ
	|	НЕ (СведенияОСобственностиИзСправочников.ФизЛицо, СведенияОСобственностиИзСправочников.Помещение) В
	|				(ВЫБРАТЬ
	|					СобственникиИзРегистра.Собственник,
	|					СобственникиИзРегистра.Помещение
	|				ИЗ
	|					СобственникиИзРегистра КАК СобственникиИзРегистра)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СобственникиПомещений.Регистратор КАК Регистратор,
	|	УПЖКХ_СобственникиПомещений.Собственник КАК Собственник,
	|	УПЖКХ_СобственникиПомещений.Помещение КАК Помещение
	|ПОМЕСТИТЬ РегистраторыДляЗаполнения
	|ИЗ
	|	РегистрСведений.УПЖКХ_СобственникиПомещений КАК УПЖКХ_СобственникиПомещений
	|ГДЕ
	|	УПЖКХ_СобственникиПомещений.ВидДокумента = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ДокументыНаПравоСобственности.ПустаяСсылка)
	|	И УПЖКХ_СобственникиПомещений.НомерДокумента = """"
	|	И (УПЖКХ_СобственникиПомещений.Собственник, УПЖКХ_СобственникиПомещений.Помещение) В
	|			(ВЫБРАТЬ
	|				СобственникиБезСведенийОДокументахВРегистре.ФизЛицо,
	|				СобственникиБезСведенийОДокументахВРегистре.Помещение
	|			ИЗ
	|				СобственникиБезСведенийОДокументахВРегистре КАК СобственникиБезСведенийОДокументахВРегистре)
	|	И УПЖКХ_СобственникиПомещений.Действует
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегистраторыДляЗаполнения.Регистратор КАК Регистратор,
	|	РегистраторыДляЗаполнения.Собственник КАК Собственник,
	|	РегистраторыДляЗаполнения.Помещение КАК Помещение,
	|	СобственникиБезСведенийОДокументахВРегистре.ЛицевойСчет КАК ЛицевойСчет,
	|	СобственникиБезСведенийОДокументахВРегистре.Жилец КАК Жилец,
	|	СобственникиБезСведенийОДокументахВРегистре.ДатаДокумента КАК ДатаДокумента,
	|	СобственникиБезСведенийОДокументахВРегистре.НомерДокумента КАК НомерДокумента
	|ИЗ
	|	СобственникиБезСведенийОДокументахВРегистре КАК СобственникиБезСведенийОДокументахВРегистре
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистраторыДляЗаполнения КАК РегистраторыДляЗаполнения
	|		ПО СобственникиБезСведенийОДокументахВРегистре.ФизЛицо = РегистраторыДляЗаполнения.Собственник
	|			И СобственникиБезСведенийОДокументахВРегистре.Помещение = РегистраторыДляЗаполнения.Помещение
	|ИТОГИ ПО
	|	Регистратор";
	
	Дерево = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Для Каждого СтрокаРегистратора Из Дерево.Строки Цикл
		Если ДатыЗапретаИзменения.ИзменениеЗапрещено(СтрокаРегистратора.Регистратор.ПолучитьОбъект()) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеЗаписаныУспешно = Истина;
		
		НачатьТранзакцию();
		
		// Записываем сведения о собственности в регистр "Собственники помещений".
		НаборЗаписей = РегистрыСведений.УПЖКХ_СобственникиПомещений.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(СтрокаРегистратора.Регистратор);
		НаборЗаписей.Прочитать();
		
		Для Каждого Запись Из НаборЗаписей Цикл
			СтрокиСобственности = СтрокаРегистратора.Строки.НайтиСтроки(Новый Структура("Собственник, Помещение", Запись.Собственник, Запись.Помещение));
			Если Не СтрокиСобственности.Количество() = 0 Тогда
				Запись.НомерДокумента = СтрокиСобственности.Получить(0).НомерДокумента;
				Запись.ДатаДокумента  = СтрокиСобственности.Получить(0).ДатаДокумента;
			КонецЕсли;
		КонецЦикла;
		
		Если Не КВП_ЗаписатьОбъект(НаборЗаписей) Тогда
			Отказ = Истина;
			ДанныеЗаписаныУспешно = Ложь;
		КонецЕсли;
		
		Если Не Отказ Тогда
			// Правим сведения о собственности в регистраторах.
			Если ТипЗнч(СтрокаРегистратора.Регистратор) = Тип("ДокументСсылка.УПЖКХ_УстановкаСобственниковПомещений") Тогда
				РегистраторОбъект = СтрокаРегистратора.Регистратор.ПолучитьОбъект();
				ТабличнаяЧасть    = РегистраторОбъект.Собственники;
				
				Для Каждого СтрокаСобственника Из СтрокаРегистратора.Строки Цикл
					СтрокиВДокументе = ТабличнаяЧасть.НайтиСтроки(Новый Структура("Собственник", СтрокаСобственника.Собственник));
					
					Если Не СтрокиВДокументе.Количество() = 0 Тогда
						СтрокиВДокументе.Получить(0).НомерДокумента = СтрокаСобственника.НомерДокумента;
						СтрокиВДокументе.Получить(0).ДатаДокумента  = СтрокаСобственника.ДатаДокумента;
					КонецЕсли;
				КонецЦикла;
				
				Если Не КВП_ЗаписатьОбъект(РегистраторОбъект) Тогда
					Отказ = Истина;
					ДанныеЗаписаныУспешно = Ложь;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(СтрокаРегистратора.Регистратор) = Тип("ДокументСсылка.КВП_ОткрытиеЛицевогоСчета")
			 Или ТипЗнч(СтрокаРегистратора.Регистратор) = Тип("ДокументСсылка.КВП_ИзменениеЛицевогоСчета") Тогда
				РегистраторОбъект = СтрокаРегистратора.Регистратор.ПолучитьОбъект();
				ТабличнаяЧасть    = РегистраторОбъект.Главная;
				
				Для Каждого СтрокаСобственника Из СтрокаРегистратора.Строки Цикл
					СтрокиВДокументе = ТабличнаяЧасть.НайтиСтроки(Новый Структура("Проживающий", СтрокаСобственника.Жилец));
					
					Если Не СтрокиВДокументе.Количество() = 0 Тогда
						СтрокиВДокументе.Получить(0).НомерДокументаСобственности = СтрокаСобственника.НомерДокумента;
						СтрокиВДокументе.Получить(0).ДатаДокументаСобственности  = СтрокаСобственника.ДатаДокумента;
					КонецЕсли;
				КонецЦикла;
				
				Если Не КВП_ЗаписатьОбъект(РегистраторОбъект) Тогда
					Отказ = Истина;
					ДанныеЗаписаныУспешно = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если Не Отказ Тогда
				// В объектах (лицевые счета или жильцы), из которых перенесли сведения о собственности, указываем факт переноса.
				Для Каждого СтрокаСобственника Из СтрокаРегистратора.Строки Цикл
					Если Не СтрокаСобственника.ЛицевойСчет = Справочники.КВП_ЛицевыеСчета.ПустаяСсылка() Тогда
						Если Не СтрокаСобственника.ЛицевойСчет.СведенияОСобственностиПеренесены Тогда
							ЛицевойСчетОбъект = СтрокаСобственника.ЛицевойСчет.ПолучитьОбъект();
							ЛицевойСчетОбъект.СведенияОСобственностиПеренесены = Истина;
							ЛицевойСчетОбъект.ОбменДанными.Загрузка            = Истина;
							
							Если Не КВП_ЗаписатьОбъект(ЛицевойСчетОбъект) Тогда
								Отказ = Истина;
							КонецЕсли;
						КонецЕсли;
						
					Иначе
						ЖилецОбъект = СтрокаСобственника.Жилец.ПолучитьОбъект();
						ЖилецОбъект.СведенияОСобственностиПеренесены = Истина;
						ЖилецОбъект.ОбменДанными.Загрузка            = Истина;
						
						Если Не КВП_ЗаписатьОбъект(ЖилецОбъект) Тогда
							Отказ = Истина;
							ДанныеЗаписаныУспешно = Ложь;
						КонецЕсли;
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ДанныеЗаписаныУспешно Тогда
			ЗафиксироватьТранзакцию();
		Иначе
			ОтменитьТранзакцию();
		КонецЕсли;
	КонецЦикла;
	
	Если Отказ Тогда
		ДобавитьСообщениеПользователю("Обработчик обновления ""ПеренестиСведенияОСобственностиИзЛицевыхСчетовИЖильцов"" не выполнен!", Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура производит заполнение настроек контроля показаний приборов учета,
// путем установки значений констант ИспользоватьКонтрольПоказанийПриборовУчета и
// РазмерДопустимогоПревышенияСреднегоРасходаПУ взначения по умолчанию.
// А также устанавливает признак корректности показаний для строк проведенных
// документов "Ввода показаний" с отрицательным расходом.
// Для проведенных документов проверку на превышение среднемесячного расхода не осуществляем,
// так как, величина среднего расхода будет не заполнена (равна 0), а в этом случае проверка
// при проведении документов на превышение среднего расхода не осуществляется.
//
Процедура ЗаполнитьНастройкиКонтроляПоказанийПриборовУчета_3_0_53_2()
	
	// Признак успешности выполнения обработчика в значении по умолчанию.
	ОбработчикВыполненУспешно = Истина;
	
	// Устанавливаем параметры контроля показаний в значения по умолчанию:
	// - контроль показаний используется;
	// - размер допустимого превышения среднего расхода равен 100%.
	Константы.УПЖКХ_ИспользоватьКонтрольПоказанийПриборовУчета.Установить(Истина);
	Константы.УПЖКХ_РазмерДопустимогоПревышенияСреднегоРасходаПУ.Установить(100);
	
	// Получим ссылки на документы ввода показаний с отрицательным расходом.
	// В первом пакете получаем строки проведенных документов и получаем введенные и предыдущие показания.
	// В итоговом пакете проверяем: если в строке присутствует отрицательный расход хотя бы по одному
	// из видов тарифов, то этот документ необходимо обработать и в строках с отрицательным расходом
	// установить признак корректности показаний.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УПЖКХ_ВводПоказанийСчетчикаГлавная.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УПЖКХ_ВводПоказанийСчетчика.Главная КАК УПЖКХ_ВводПоказанийСчетчикаГлавная
	|ГДЕ
	|	УПЖКХ_ВводПоказанийСчетчикаГлавная.Ссылка.Проведен
	|	И НЕ УПЖКХ_ВводПоказанийСчетчикаГлавная.ПоказанияКорректны
	|	И (ВЫБОР
	|				КОГДА УПЖКХ_ВводПоказанийСчетчикаГлавная.ДневноеПоказание = НЕОПРЕДЕЛЕНО
	|					ТОГДА УПЖКХ_ВводПоказанийСчетчикаГлавная.ДневноеПоказаниеПредыдущее
	|				ИНАЧЕ УПЖКХ_ВводПоказанийСчетчикаГлавная.ДневноеПоказание
	|			КОНЕЦ < УПЖКХ_ВводПоказанийСчетчикаГлавная.ДневноеПоказаниеПредыдущее
	|			ИЛИ ВЫБОР
	|				КОГДА УПЖКХ_ВводПоказанийСчетчикаГлавная.НочноеПоказание = НЕОПРЕДЕЛЕНО
	|					ТОГДА УПЖКХ_ВводПоказанийСчетчикаГлавная.НочноеПоказаниеПредыдущее
	|				ИНАЧЕ УПЖКХ_ВводПоказанийСчетчикаГлавная.НочноеПоказание
	|			КОНЕЦ < УПЖКХ_ВводПоказанийСчетчикаГлавная.НочноеПоказаниеПредыдущее
	|			ИЛИ ВЫБОР
	|				КОГДА УПЖКХ_ВводПоказанийСчетчикаГлавная.ПиковоеПоказание = НЕОПРЕДЕЛЕНО
	|					ТОГДА УПЖКХ_ВводПоказанийСчетчикаГлавная.ПиковоеПоказаниеПредыдущее
	|				ИНАЧЕ УПЖКХ_ВводПоказанийСчетчикаГлавная.ПиковоеПоказание
	|			КОНЕЦ < УПЖКХ_ВводПоказанийСчетчикаГлавная.ПиковоеПоказаниеПредыдущее)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Считываем объект документа для его обработки.
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Для Каждого ТекущаяСтрока Из ДокументОбъект.Главная Цикл
			
			// Проверим, введены ли соответствующие показания.
			ДневноеПоказаниеВведено = Не (ТекущаяСтрока.ДневноеПоказание = Неопределено);
			НочноеПоказаниеВведено  = Не (ТекущаяСтрока.НочноеПоказание  = Неопределено);
			ПиковоеПоказаниеВведено = Не (ТекущаяСтрока.ПиковоеПоказание = Неопределено);
			
			// Для исключения потенциальных ошибок приведем показания к числовым значениям.
			ДневноеПоказание = ?(ТекущаяСтрока.ДневноеПоказание = Неопределено, 0, ТекущаяСтрока.ДневноеПоказание);
			НочноеПоказание  = ?(ТекущаяСтрока.НочноеПоказание =  Неопределено, 0, ТекущаяСтрока.НочноеПоказание);
			ПиковоеПоказание = ?(ТекущаяСтрока.ПиковоеПоказание = Неопределено, 0, ТекущаяСтрока.ПиковоеПоказание);
			
			// Устанавливаем признак, что показания корректны, если хотя бы
			// по одному виду тарифа показание введено и оно отрицательное.
			Если (ДневноеПоказаниеВведено И ДневноеПоказание < ТекущаяСтрока.ДневноеПоказаниеПредыдущее)
			 ИЛИ (НочноеПоказаниеВведено  И НочноеПоказание  < ТекущаяСтрока.НочноеПоказаниеПредыдущее)
			 ИЛИ (ПиковоеПоказаниеВведено И ПиковоеПоказание < ТекущаяСтрока.ПиковоеПоказаниеПредыдущее) Тогда
				ТекущаяСтрока.ПоказанияКорректны = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		// Записываем обработанный документ ввода показаний.
		Если НЕ КВП_ЗаписатьОбъект(ДокументОбъект, РежимЗаписиДокумента.Запись) Тогда
			ОбработчикВыполненУспешно = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если обработчик выполнен с ошибками, то в целом обновление считается неуспешным.
	Если Не ОбработчикВыполненУспешно Тогда
		ДобавитьСообщениеПользователю("Обработчик обновления ""ЗаполнитьНастройкиКонтроляПоказанийПриборовУчета_3_0_53_2"" не выполнен!", Истина, Истина);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры //ЗаполнитьНастройкиКонтроляПоказанийПриборовУчета_3_0_53_2

// Процедура дополняет номера документов лидирующими нулями в связи с увеличением длины номера 
// с 9 до 11 символов.
//
Процедура ОбработатьНомераДокументовЗаявкаНаВыполнениеРаботПослеУвеличенияДлиныНомера_3_0_54_2()
	
	// Признак успешности выполнения обработчика в значении по умолчанию.
	ОбработчикВыполненУспешно = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_ЗаявкаНаВыполнениеРабот.Ссылка КАК Ссылка,
	|	КВП_ЗаявкаНаВыполнениеРабот.Номер КАК Номер
	|ИЗ
	|	Документ.КВП_ЗаявкаНаВыполнениеРабот КАК КВП_ЗаявкаНаВыполнениеРабот
	|
	|УПОРЯДОЧИТЬ ПО
	|	КВП_ЗаявкаНаВыполнениеРабот.Номер";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяДлинаНомера = Метаданные.Документы.КВП_ЗаявкаНаВыполнениеРабот.ДлинаНомера;
		ИсходныйНомер    = СокрЛП(Выборка.Номер);
		
		Если СтрДлина(ИсходныйНомер) = НоваяДлинаНомера Тогда
			Продолжить;
		КонецЕсли;
		
		ОбработанныйНомер = ИсходныйНомер;
		
		// Шаблон номера "[Префикс организации][Префикс ИБ]-[Номер]". 
		// Префикс и основная часть номера в ред.3.0 отделяются "-" (Пример: ТС00-0001).
		ПозицияПрефикса = СтрНайти(ИсходныйНомер, "-");
		Если ПозицияПрефикса > 0 Тогда
			Префикс          = Лев(ИсходныйНомер, ПозицияПрефикса);
			ОсновнаяЧасть    = Прав(ИсходныйНомер, СтрДлина(ИсходныйНомер) - ПозицияПрефикса);
			НоваяДлинаНомера = НоваяДлинаНомера - СтрДлина(Префикс);
		Иначе
			Префикс = "";
			ОсновнаяЧасть = ИсходныйНомер;
		КонецЕсли;
		
		// Дополняем номер документа лидирующими нулями.
		Пока СтрДлина(ОсновнаяЧасть) < НоваяДлинаНомера Цикл
			ОсновнаяЧасть = "0" + ОсновнаяЧасть;
		КонецЦикла;
		ОбработанныйНомер = Префикс + ОсновнаяЧасть;
		
		Если Не ОбработанныйНомер = ИсходныйНомер Тогда
			ДокументОбъект       = Выборка.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Номер = ОбработанныйНомер;
			
			// Записываем обработанный документ.
			Если НЕ ЗаписатьОбъект(ДокументОбъект, РежимЗаписиДокумента.Запись) Тогда
				ОбработчикВыполненУспешно = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если обработчик выполнен с ошибками, то в целом обновление считается неуспешным.
	Если Не ОбработчикВыполненУспешно Тогда
		ДобавитьСообщениеПользователю("Обработчик обновления ""ОбработатьНомераДокументовЗаявкаНаВыполнениеРаботПослеУвеличенияДлиныНомера"" не выполнен!", Истина, Истина);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьНомераДокументовЗаявкаНаВыполнениеРаботПослеУвеличенияДлиныНомера_3_0_54_2()

// Процедура изменяет значения ресурса "ФормаКвитанции" записей регистра сведений
// "Настройки формирования платежного документа".
// По заявке З00014201 выполнена замена строковых наименований видов платежных документов
// на значения перечисления "УПЖКХ_ВидыПлатежныхДокументов".
//
Процедура ОбновитьЗначениеРесурсаФормаКвитанцииВНастройкахФормированияПлатежногоДокумента_3_0_54_3()
	
	// Признак успешности выполнения обработчика в значении по умолчанию.
	ОбработчикВыполненУспешно = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента КАК УПЖКХ_НастройкиФормированияПлатежногоДокумента
	|ГДЕ
	|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.ФормаКвитанции В (&СписокНаименованийФормПД)";
	
	СписокНаименованийФормПД = Новый СписокЗначений;
	СписокНаименованийФормПД.Добавить("Плат. документ (приказ №924/пр)");
	СписокНаименованийФормПД.Добавить("Плат. документ (приказ №454 в соответ. с пост. №354)");
	СписокНаименованийФормПД.Добавить("Плат. документ (с полями для отметки банка №1)");
	СписокНаименованийФормПД.Добавить("Плат. документ (с полями для отметки банка №2)");
	СписокНаименованийФормПД.Добавить("Плат. документ (Пермский край)");
	СписокНаименованийФормПД.Добавить("Плат. документ (Чувашская республика)");
	СписокНаименованийФормПД.Добавить("Плат. документ (пост. №1161/57 для МО)");
	СписокНаименованийФормПД.Добавить("Плат. документ (пост. №679/30 для МО)");
	Запрос.УстановитьПараметр("СписокНаименованийФормПД", СписокНаименованийФормПД);
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(ВыборкаДетальныеЗаписи.Организация);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 1 Тогда
			
			НастройкиФормированияПД = НаборЗаписей[0];
			ФормаКвитанции          = НастройкиФормированияПД.ФормаКвитанции;
			
			Если ТипЗнч(НастройкиФормированияПД.ФормаКвитанции) = Тип("Строка") Тогда
				
				Если ФормаКвитанции = СписокНаименованийФормПД[0].Значение Тогда
					НастройкиФормированияПД.ФормаКвитанции = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.СтандартныйКР;
				ИначеЕсли ФормаКвитанции = СписокНаименованийФормПД[1].Значение Тогда
					НастройкиФормированияПД.ФормаКвитанции = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Стандартный;
				ИначеЕсли ФормаКвитанции = СписокНаименованийФормПД[2].Значение Тогда
					НастройкиФормированияПД.ФормаКвитанции = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.СПолямиБанка1;
				ИначеЕсли ФормаКвитанции = СписокНаименованийФормПД[3].Значение Тогда
					НастройкиФормированияПД.ФормаКвитанции = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.СПолямиБанка2;
				ИначеЕсли ФормаКвитанции = СписокНаименованийФормПД[4].Значение Тогда
					НастройкиФормированияПД.ФормаКвитанции = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.ПермскийКрай;
				ИначеЕсли ФормаКвитанции = СписокНаименованийФормПД[5].Значение Тогда
					НастройкиФормированияПД.ФормаКвитанции = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Чебоксары;
				ИначеЕсли ФормаКвитанции = СписокНаименованийФормПД[6].Значение Тогда
					НастройкиФормированияПД.ФормаКвитанции = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Москва;
				ИначеЕсли ФормаКвитанции = СписокНаименованийФормПД[7].Значение Тогда
					НастройкиФормированияПД.ФормаКвитанции = Перечисления.УПЖКХ_ВидыПлатежныхДокументов.Москва679;
				Иначе
					Продолжить;
				КонецЕсли;
				
				Если НЕ ЗаписатьОбъект(НаборЗаписей) Тогда
					ОбработчикВыполненУспешно = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Если обработчик выполнен с ошибками, то в целом обновление считается неуспешным.
	Если Не ОбработчикВыполненУспешно Тогда
		ДобавитьСообщениеПользователю("Обработчик обновления ""ОбновитьЗначениеРесурсаФормаКвитанцииВНастройкахФормированияПлатежногоДокумента"" не выполнен!", Истина, Истина);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьЗначениеРесурсаФормаКвитанцииВНастройкахФормированияПлатежногоДокумента_3_0_54_3()

// Процедура по-умолчанию устанавливает в "Истину" значение ресурса "ОбрезатьПрефиксЛС"
// во всех записях регистра сведений "НастройкиВыгрузкиВГЦЖС".
Процедура УстановитьНастройкуГЦЖС_ОбрезатьПрефиксЛС_В_Истину_3_0_54_3()
	
	НаборЗаписей = РегистрыСведений.УПЖКХ_НастройкиВыгрузкиВГЦЖС.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Для каждого ТекЗапись Из НаборЗаписей Цикл
		ТекЗапись.ОбрезатьПрефиксЛС = Истина;
	КонецЦикла;
	
	// Если не удалось записать измененный набор записей, то в целом обновление считается неуспешным.
	Если НЕ ЗаписатьОбъект(НаборЗаписей) Тогда
		ДобавитьСообщениеПользователю("Обработчик обновления ""УстановитьНастройкуГЦЖС_ОбрезатьПрефиксЛС_В_Истину"" не выполнен!", Истина, Истина);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // УстановитьНастройкуГЦЖС_ОбрезатьПрефиксЛС_В_Истину_3_0_54_3()

Процедура ЗаполнитьУсловияДПОИ_3_0_55_2()
	
	// Признак успешности выполнения обработчика в значении по умолчанию.
	ОбработчикВыполненУспешно = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_ДоговорыДПОИ.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.УПЖКХ_ДоговорыДПОИ КАК УПЖКХ_ДоговорыДПОИ
	|ГДЕ
	|	НЕ УПЖКХ_ДоговорыДПОИ.ДоговорЗаключенНаБезвозмезднойОснове
	|	И НЕ УПЖКХ_ДоговорыДПОИ.УстановленыКонкретныеСрокиОплаты
	|	И УПЖКХ_ДоговорыДПОИ.ИныеУсловияДоговора = """"";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СправочникОбъект = Выборка.Ссылка.ПолучитьОбъект();
		СправочникОбъект.УстановленыКонкретныеСрокиОплаты = Истина;
		СправочникОбъект.Наименование = СтрЗаменить(СправочникОбъект.Наименование, "ДОИ", "ДПОИ");
		// Записываем обработанный элемент справочника ДПОИ.
		Если НЕ ЗаписатьОбъект(СправочникОбъект) Тогда
			ОбработчикВыполненУспешно = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если обработчик выполнен с ошибками, то в целом обновление считается неуспешным.
	Если Не ОбработчикВыполненУспешно Тогда
		ДобавитьСообщениеПользователю("Обработчик обновления ""ЗаполнитьУсловияДПОИ_3_0_55_2"" не выполнен!", Истина, Истина);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура производит заполнение новых настроек параметра "Счетчик и Показание" в справочнике "Настройки загрузки / выгрузки"
// для Загрузки реестра показаний счетчиков.
//
Процедура УстановитьЗначениеНастройкиВариантЗагрузкиНулевыхПоказанийВСправочникеНастройкиЗагрузкиВыгрузки_3_0_57_3()
	
	// Признак успешности выполнения обработчика в значении по умолчанию.
	ОбработчикВыполненУспешно = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_НастройкиЗагрузкиВыгрузки.Ссылка КАК Настройка
	|ИЗ
	|	Справочник.КВП_НастройкиЗагрузкиВыгрузки КАК КВП_НастройкиЗагрузкиВыгрузки
	|ГДЕ
	|	КВП_НастройкиЗагрузкиВыгрузки.ВидОперации = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыНастроекЗагрузкиИзАС.ЗагрузкаИзСистемСбораПоказанийПриборовУчета)
	|	И КВП_НастройкиЗагрузкиВыгрузки.ВариантЗагрузкиНулевыхПоказаний = """"";
	
	ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		ОбъектНастройка = ВыборкаДетальныеЗаписи.Настройка.ПолучитьОбъект();
		ОбъектНастройка.ВариантЗагрузкиНулевыхПоказаний = "Загружать нулевые как 0";
		
		Если Не ЗаписатьОбъект(ОбъектНастройка) Тогда
			ОбработчикВыполненУспешно = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если обработчик выполнен с ошибками, то в целом обновление считается неуспешным.
	Если Не ОбработчикВыполненУспешно Тогда
		ДобавитьСообщениеПользователю("Обработчик обновления ""УстановитьЗначениеНастройкиВариантЗагрузкиНулевыхПоказанийВСправочникеНастройкиЗагрузкиВыгрузки"" не выполнен!", Истина, Истина);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // УстановитьЗначениеНастройкиВариантЗагрузкиНулевыхПоказанийВСправочникеНастройкиЗагрузкиВыгрузки_3_0_57_3()

// Процедура заполняет значения новых ресурсов: "НаименованиеПлатежаНазначениеПоКР", "НаименованиеПлатежаНазначениеПоОсн",
// - регистра сведений "Настройки формирования платежного документа".
//
Процедура УстановитьЗначенияРесурсаНаименованиеПлатежаНазначениеВНастройкахФормированияПлатежногоДокумента_3_0_59_3()
	
	// Имя параметра сохранения массива обработанных корректировок в параметрах обновления ИБ.
	ИмяПараметраОбновленияИБ = "УстановитьЗначенияРесурсаНаименованиеПлатежаНазначениеВНастройкахФормированияПлатежногоДокумента_3_0_59_3";
	
	// Если обработка была выполнена ранее, то прекращаем выполнение данного обработчика обновления.
	ОбработкаЗаполненияВыполнена = ПолучитьПараметрОбновленияИБ(ИмяПараметраОбновленияИБ);
	Если ОбработкаЗаполненияВыполнена = Истина Тогда
		Возврат;
	КонецЕсли;
	
	// Признак успешности выполнения обработчика в значении по умолчанию.
	ОбработчикВыполненУспешно = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.Организация КАК Организация,
	|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.ДополнительныеРеквизитыQRКодаПоОсн КАК ДополнительныеРеквизитыQRКодаПоОсн,
	|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.ДополнительныеРеквизитыQRКодаПоКР КАК ДополнительныеРеквизитыQRКодаПоКР,
	|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.НаименованиеПлатежаНазначениеПоКР КАК НаименованиеПлатежаНазначениеПоКР,
	|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.НаименованиеПлатежаНазначениеПоОсн КАК НаименованиеПлатежаНазначениеПоОсн
	|ИЗ
	|	РегистрСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента КАК УПЖКХ_НастройкиФормированияПлатежногоДокумента
	|ГДЕ
	|	(УПЖКХ_НастройкиФормированияПлатежногоДокумента.НаименованиеПлатежаНазначениеПоОсн = """"
	|			ИЛИ УПЖКХ_НастройкиФормированияПлатежногоДокумента.НаименованиеПлатежаНазначениеПоКР = """")";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ИскомоеЗначение = "Purpose";
	
	Пока Выборка.Следующий() Цикл
		
		ИмеетсяПроверяемыйРеквизитПоОсн = Ложь;
		ИмеетсяПроверяемыйРеквизитПоКР  = Ложь;
		
		Если ПустаяСтрока(Выборка.НаименованиеПлатежаНазначениеПоОсн) Тогда
			// Проверяем в настройках по основным услугам.
			НастрокиПоОснУслугам = Выборка.ДополнительныеРеквизитыQRКодаПоОсн.Получить();
			Если ТипЗнч(НастрокиПоОснУслугам) = Тип("СписокЗначений") Тогда
				НайденноеЗначение               = НастрокиПоОснУслугам.НайтиПоЗначению(ИскомоеЗначение);
				ИмеетсяПроверяемыйРеквизитПоОсн = (НайденноеЗначение <> Неопределено  И НайденноеЗначение.Пометка);
			КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(Выборка.НаименованиеПлатежаНазначениеПоКР) Тогда
			// Проверяем в настройках по услугам кап.ремонта.
			НастрокиПоУслугамКР = Выборка.ДополнительныеРеквизитыQRКодаПоКР.Получить();
			Если ТипЗнч(НастрокиПоУслугамКР) = Тип("СписокЗначений") Тогда
				НайденноеЗначение              = НастрокиПоУслугамКР.НайтиПоЗначению(ИскомоеЗначение);
				ИмеетсяПроверяемыйРеквизитПоКР = (НайденноеЗначение <> Неопределено  И НайденноеЗначение.Пометка);
			КонецЕсли;
		КонецЕсли;
		
		Если ИмеетсяПроверяемыйРеквизитПоОсн ИЛИ ИмеетсяПроверяемыйРеквизитПоКР Тогда
			
			НаборЗаписей = РегистрыСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Организация.Установить(Выборка.Организация);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() = 1 Тогда
				
				НастройкиФормированияПД = НаборЗаписей[0];
				
				Если ИмеетсяПроверяемыйРеквизитПоОсн Тогда
					НастройкиФормированияПД.НаименованиеПлатежаНазначениеПоОсн = "Оплата за ЖКУ";
				КонецЕсли;
				
				Если ИмеетсяПроверяемыйРеквизитПоКР Тогда
					НастройкиФормированияПД.НаименованиеПлатежаНазначениеПоКР = "Оплата за КАПРЕМОНТ";
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ ЗаписатьОбъект(НаборЗаписей) Тогда
				ОбработчикВыполненУспешно = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Если обработчик выполнен с ошибками, то в целом обновление считается неуспешным.
	Если Не ОбработчикВыполненУспешно Тогда
		ДобавитьСообщениеПользователю("Обработчик обновления ""ОбновитьЗначениеРесурсаФормаКвитанцииВНастройкахФормированияПлатежногоДокумента"" не выполнен!", Истина, Истина);
		Отказ = Истина;
	Иначе
		// Сохранение результата обработки в параметрах обновления ИБ.
		ОбработкаЗаполненияВыполнена = Истина;
		СохранитьПараметрОбновленияИБ(ИмяПараметраОбновленияИБ, ОбработкаЗаполненияВыполнена);
	КонецЕсли;
	
КонецПроцедуры // УстановитьЗначенияРесурсаНаименованиеПлатежаНазначениеВНастройкахФормированияПлатежногоДокумента_3_0_59_3()

// Процедура заполняет значения новых ресурсов: "ТипЖильцовДляДеленияОбъемаНачисленнойУслуги" и "ТипЖильцовДляДеленияОбъемаОграниченияЛьготы"
// во всех записях регистра сведений "Настройки предоставления и расчета льгот".
//
Процедура ЗаполнитьРесурсыТипЖильцовРСНастройкиПредоставленияИРасчетаЛьгот_3_0_60_3()
	
	// Признак успешности выполнения обработчика в значении по умолчанию.
	ОбработчикВыполненУспешно = Истина;
	
	НаборЗаписей = РегистрыСведений.УПЖКХ_НастройкиПредоставленияИРасчетаЛьгот.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Если НЕ ЗначениеЗаполнено(Запись.ТипЖильцовДляДеленияОбъемаНачисленнойУслуги) Тогда
			Запись.ТипЖильцовДляДеленияОбъемаНачисленнойУслуги = ?(Запись.УдалитьОбъемУслугиДляРасчетаЛьготыДелитьНаКоличествоПолучателейЛьготы,
																		Перечисления.УПЖКХ_ТипыЖильцовДляДеленияОбъемовНачисленияЛьгот.ВсеЖильцыЛицевогоСчетаПользующиесяЛьготой,
																		Перечисления.УПЖКХ_ТипыЖильцовДляДеленияОбъемовНачисленияЛьгот.ВсеЖильцыЛицевогоСчета);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Запись.ТипЖильцовДляДеленияОбъемаОграниченияЛьготы) Тогда
			Запись.ТипЖильцовДляДеленияОбъемаОграниченияЛьготы = ?(Запись.УдалитьОбъемОграниченияДляРасчетаЛьготыДелитьНаКоличествоПолучателейЛьготы,
																		Перечисления.УПЖКХ_ТипыЖильцовДляДеленияОбъемовОграниченияЛьгот.ВсеЖильцыЛицевогоСчетаПользующиесяЛьготой,
																		Перечисления.УПЖКХ_ТипыЖильцовДляДеленияОбъемовОграниченияЛьгот.ВсеЖильцыЛицевогоСчета);
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗаписатьОбъект(НаборЗаписей) Тогда
		ОбработчикВыполненУспешно = Ложь;
	КонецЕсли;
	
	// Если обработчик выполнен с ошибками, то в целом обновление считается неуспешным.
	Если Не ОбработчикВыполненУспешно Тогда
		ДобавитьСообщениеПользователю("Обработчик обновления ""ЗаполнитьРесурсыТипЖильцовРСНастройкиПредоставленияИРасчетаЛьгот"" не выполнен!", Истина, Истина);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРесурсыТипЖильцовРСНастройкиПредоставленияИРасчетаЛьгот_3_0_60_3()

// Процедура заполняет значение настройки "ОтражатьВзаиморасчетыПоКапремонтуПоЗаданномуСчетуУчета" в УП.
Процедура ЗаполнитьНастройкуОтражатьВзаиморасчетыПоКапремонту_3_0_62_2()
	
	// Признак успешности выполнения обработчика в значении по умолчанию.
	ОбработчикВыполненУспешно = Истина;
	
	НаборЗаписей = РегистрыСведений.КВП_УчетнаяПолитикаТСЖ.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл
		
		Если Запись.ВариантОтраженияВзаиморасчетовПоКапремонту.Пустая()Тогда
			
			Если Запись.УдалитьВариантОтраженияВзаиморасчетовПоКапремонту Тогда
				Запись.ВариантОтраженияВзаиморасчетовПоКапремонту = Перечисления.КВП_ВидыСчетовРасчетовСКонтрагентамиПоКапремонту.ОтдельныеСчета;
			Иначе
				Запись.ВариантОтраженияВзаиморасчетовПоКапремонту = Перечисления.КВП_ВидыСчетовРасчетовСКонтрагентамиПоКапремонту.СчетаВзаиморасчетовСКонтрагентами;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ЗаписатьОбъект(НаборЗаписей) Тогда
		ОбработчикВыполненУспешно = Ложь;
	КонецЕсли;
	
	// Если обработчик выполнен с ошибками, то в целом обновление считается неуспешным.
	Если Не ОбработчикВыполненУспешно Тогда
		ДобавитьСообщениеПользователю("Обработчик обновления ""ЗаполнитьНастройкуОтражатьВзаиморасчетыПоКапремонту"" не выполнен!", Истина, Истина);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает настройку "ОтражатьПениКапремонтОтдельноОтНачислений" в УП,
// а также счета учета расчетов по пени за капремонт, если пени отражались отдельно от начислений.
Процедура УстановитьСчетаУчетаПоПениЗаКапремонт_3_0_62_2()
	
	// Имя параметра сохранения массива обработанных корректировок в параметрах обновления ИБ.
	ИмяПараметраОбновленияИБ = "УстановитьСчетаУчетаПоПениЗаКапремонт_3_0_62_2";
	
	// Если обработка была выполнена ранее, то прекращаем выполнение данного обработчика обновления.
	ОбработкаЗаполненияВыполнена = ПолучитьПараметрОбновленияИБ(ИмяПараметраОбновленияИБ);
	Если ОбработкаЗаполненияВыполнена = Истина Тогда
		Возврат;
	КонецЕсли;
	
	// Признак успешности выполнения обработчика в значении по умолчанию.
	ОбработчикВыполненУспешно = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КВП_УчетнаяПолитикаТСЖ.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.КВП_УчетнаяПолитикаТСЖ КАК КВП_УчетнаяПолитикаТСЖ";
	
	ВыборкаОрганизация = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаОрганизация.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.КВП_УчетнаяПолитикаТСЖ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Организация.Установить(ВыборкаОрганизация.Организация);
		НаборЗаписей.Прочитать();
		
		СкопироватьСчетаУчетаПени = Ложь;
		
		Для Каждого Запись Из НаборЗаписей Цикл
			
			Если Запись.СчетаУчетаДляОтраженияПени = Перечисления.УПЖКХ_СчетаУчетаДляПениПриОтраженииВРеглУчете.ОтдельныеСчета Тогда
				Запись.УдалитьОтражатьПениКапремонтОтдельноОтНачислений = Истина;
				СкопироватьСчетаУчетаПени = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не КВП_ЗаписатьОбъект(НаборЗаписей) Тогда
			ОбработчикВыполненУспешно = Ложь;
		КонецЕсли;
		
		Если СкопироватьСчетаУчетаПени Тогда
			
			НаборЗаписейПени = РегистрыСведений.УПЖКХ_СчетаУчетаРасчетовПоПени.СоздатьНаборЗаписей();
			НаборЗаписейПени.Отбор.Организация.Установить(ВыборкаОрганизация.Организация);
			НаборЗаписейПени.Прочитать();
			
			НаборЗаписейПениКапремонт = РегистрыСведений.УПЖКХ_СчетаУчетаРасчетовПоПени.СоздатьНаборЗаписей();
			
			Для Каждого Запись Из НаборЗаписейПени Цикл
				
				НоваяЗапись = НаборЗаписейПениКапремонт.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяЗапись, Запись);
				
				НоваяЗапись.ЭтоСчетаДляКапРемонта = Истина;
				
			КонецЦикла;
			
			Если Не КВП_ЗаписатьОбъект(НаборЗаписейПениКапремонт, Ложь) Тогда
				ОбработчикВыполненУспешно = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Если обработчик выполнен с ошибками, то в целом обновление считается неуспешным.
	Если Не ОбработчикВыполненУспешно Тогда
		ДобавитьСообщениеПользователю("Обработчик обновления ""ЗаполнитьНастройкуОтражатьВзаиморасчетыПоКапремонту"" не выполнен!", Истина, Истина);
		Отказ = Истина;
	Иначе
		// Сохранение результата обработки в параметрах обновления ИБ.
		ОбработчикВыполнен = Истина;
		СохранитьПараметрОбновленияИБ(ИмяПараметраОбновленияИБ, ОбработчикВыполнен);
	КонецЕсли;
	
КонецПроцедуры

// Процедура дозаполняет документы ввода показаний реквизитами счетчиков.
//
Процедура ДозаполнитьДокументыВводаПоказанийНовымиРеквизитамиТЧ_3_0_64_3()
	
	ОбработчикВыполненУспешно = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Главная.Ссылка КАК Ссылка,
	|	Главная.Счетчик КАК Счетчик,
	|	Главная.Объект КАК Объект
	|ПОМЕСТИТЬ втНезаполненные
	|ИЗ
	|	Документ.УПЖКХ_ВводПоказанийСчетчика.Главная КАК Главная
	|ГДЕ
	|	(Главная.Тарифность = ЗНАЧЕНИЕ(Перечисление.КВП_ТарифностьСчетчиков.ПустаяСсылка)
	|			ИЛИ Главная.СпособРегистрацииПоказаний = ЗНАЧЕНИЕ(Перечисление.КВП_СпособыРегистрацииПоказанийСчетчиков.ПустаяСсылка)
	|			ИЛИ Главная.Разрядность = 0
	|			ИЛИ Главная.Помещение = ЗНАЧЕНИЕ(Справочник.УПЖКХ_Помещения.ПустаяСсылка)
	|				И (ТИПЗНАЧЕНИЯ(Главная.Объект) = ТИП(Справочник.КВП_ЛицевыеСчета)
	|					ИЛИ ТИПЗНАЧЕНИЯ(Главная.Объект) = ТИП(Справочник.УПЖКХ_Помещения)))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втНезаполненные.Ссылка КАК Ссылка,
	|	втНезаполненные.Счетчик КАК Счетчик,
	|	втНезаполненные.Счетчик.Тарифность КАК Тарифность,
	|	втНезаполненные.Счетчик.Разрядность КАК Разрядность,
	|	втНезаполненные.Счетчик.СпособРегистрацииПоказаний КАК СпособРегистрацииПоказаний,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(втНезаполненные.Объект) = ТИП(Справочник.КВП_ЛицевыеСчета)
	|			ТОГДА втНезаполненные.Объект.Адрес
	|		КОГДА ТИПЗНАЧЕНИЯ(втНезаполненные.Объект) = ТИП(Справочник.УПЖКХ_Помещения)
	|			ТОГДА втНезаполненные.Объект
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УПЖКХ_Помещения.ПустаяСсылка)
	|	КОНЕЦ КАК Помещение
	|ИЗ
	|	втНезаполненные КАК втНезаполненные
	|ИТОГИ ПО
	|	Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Для каждого ТекДокумент из РезультатЗапроса.Строки Цикл
		
		ДокументВводаПоказаний = ТекДокумент.Ссылка.ПолучитьОбъект();
		
		Для каждого СтрокаДляИзменения из ТекДокумент.Строки Цикл
			
			СтрокиСчетчика = ДокументВводаПоказаний.Главная.НайтиСтроки(Новый Структура("Счетчик", СтрокаДляИзменения.Счетчик));
			
			Для каждого ТекСтрока из СтрокиСчетчика Цикл
				
				ТекСтрока.Тарифность                 = СтрокаДляИзменения.Тарифность;
				ТекСтрока.Разрядность                = СтрокаДляИзменения.Разрядность;
				ТекСтрока.СпособРегистрацииПоказаний = СтрокаДляИзменения.СпособРегистрацииПоказаний;
				ТекСтрока.Помещение                  = СтрокаДляИзменения.Помещение;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Если Не ЗаписатьОбъект(ДокументВводаПоказаний, РежимЗаписиДокумента.Запись) Тогда
			ОбработчикВыполненУспешно = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ОбработчикВыполненУспешно Тогда
		ДобавитьСообщениеПользователю("Обработчик обновления ""ДозаполнитьДокументыВводаПоказанийНовымиРеквизитамиТЧ_3_0_64_3"" не выполнен или выполнен с ошибками!", Истина, Истина);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура отключает формирование штрихкодов для онлайн оплаты.
//
Процедура ОтключитьФормированиеШтрихкодовДляОплатыОнлайн_3_0_64_7()
	
	ОбработчикВыполненУспешно = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента КАК УПЖКХ_НастройкиФормированияПлатежногоДокумента
	|ГДЕ
	|	(УПЖКХ_НастройкиФормированияПлатежногоДокумента.ВыводитьQRштрихкодДляСитикардПоОсн
	|			ИЛИ УПЖКХ_НастройкиФормированияПлатежногоДокумента.ВыводитьQRштрихкодДляСитикардПоКР)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента.СоздатьМенеджерЗаписи();
		НаборЗаписей.Организация = Выборка.Организация;
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Выбран() Тогда
			
			Если НаборЗаписей.ВыводитьQRштрихкодДляСитикардПоОсн Тогда
				НаборЗаписей.ВыводитьQRштрихкодДляСитикардПоОсн = Ложь;
			КонецЕсли;
			
			Если НаборЗаписей.ВыводитьQRштрихкодДляСитикардПоКР Тогда
				НаборЗаписей.ВыводитьQRштрихкодДляСитикардПоКР = Ложь;
			КонецЕсли;
			
			Если НЕ ЗаписатьОбъект(НаборЗаписей) Тогда
				ОбработчикВыполненУспешно = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ОбработчикВыполненУспешно Тогда
		ДобавитьСообщениеПользователю("Обработчик обновления ""ОтключитьФормированиеШтрихкодовДляОплатыОнлайн_3_0_64_7"" не выполнен или выполнен с ошибками!", Истина, Истина);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет поле регистра сведений значением по умолчанию.
//
Процедура ЗаполнитьПолеКоэффициентВРегистреСведенийУслугиОбщедомовогоСчетчика_3_0_64_8()
	
	ОбработчикВыполненУспешно = Истина;
	
	НаборЗаписей = РегистрыСведений.УПЖКХ_УслугиОбщедомовогоСчетчика.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Запись.Коэффициент = 1;
	КонецЦикла;
	
	Если Не ЗаписатьОбъект(НаборЗаписей) Тогда
		ОбработчикВыполненУспешно = Ложь;
	КонецЕсли;
	
	Если Не ОбработчикВыполненУспешно Тогда
		ДобавитьСообщениеПользователю("Обработчик обновления ""ЗаполнитьПолеКоэффициентВРегистреСведенийУслугиОбщедомовогоСчетчика_3_0_64_8"" не выполнен или выполнен с ошибками!", Истина, Истина);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет настройку расчетного счета настроек сбора данных для квитанций и обменов.
//
Процедура ЗаполнитьНастройкуРасчетногоСчетаВСбореДанныхДляКвитанцийИОбменов_3_0_64_10()
	
	ОбработчикВыполненУспешно = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.Ссылка КАК Ссылка,
	|	УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.ИсполнительРасчетов КАК ИсполнительРасчетов
	|ИЗ
	|	Справочник.УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов КАК УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов
	|ГДЕ
	|	(УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.ИсполнительРасчетов ССЫЛКА Справочник.Контрагенты
	|				И НЕ УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.ИсполнительРасчетов = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ИЛИ УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.ИсполнительРасчетов ССЫЛКА Справочник.Организации
	|				И НЕ УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.ИсполнительРасчетов = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|	И УПЖКХ_НастройкиСбораДанныхДляКвитанцийИОбменов.РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугам = ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектНастройка = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектНастройка.РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугамОтличаетсяОтОсновного = Истина;
		ОбъектНастройка.РасчетныйСчетДляПриемаПлатежейПоОсновнымУслугам                      = Выборка.ИсполнительРасчетов.ОсновнойБанковскийСчет;
		
		Если Не ЗаписатьОбъект(ОбъектНастройка) Тогда
			ОбработчикВыполненУспешно = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ОбработчикВыполненУспешно Тогда
		ДобавитьСообщениеПользователю("Обработчик обновления ""ЗаполнитьНастройкуРасчетногоСчетаВСбореДанныхДляКвитанцийИОбменов_3_0_64_10"" не выполнен или выполнен с ошибками!", Истина, Истина);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет добавленный реквизит "ДокументОснование" документа "Корректировка начислений" ссылками
// на связанные документы "Ввод показаний счетчика".
Процедура ЗаполнитьСвязьДокументовВводаПоказанийСчетчикаИКорректировкаНачислений_3_0_65_3()
	
	ОбработчикВыполненУспешно = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_ВводПоказанийСчетчика.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(УПЖКХ_ВводПоказанийСчетчика.Ссылка) КАК Представление
	|ИЗ
	|	Документ.УПЖКХ_ВводПоказанийСчетчика КАК УПЖКХ_ВводПоказанийСчетчика
	|ГДЕ
	|	НЕ УПЖКХ_ВводПоказанийСчетчика.УдалитьДокументКорректировкиНачислений = ЗНАЧЕНИЕ(Документ.КВП_КорректировкаНачислений.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументВводаПоказаний = Выборка.Ссылка.ПолучитьОбъект();
		СсылкаДокументКорректировкиНачислений = ДокументВводаПоказаний.УдалитьДокументКорректировкиНачислений;
		
		ДокументВводаПоказаний.УдалитьДокументКорректировкиНачислений = ПредопределенноеЗначение("Документ.КВП_КорректировкаНачислений.ПустаяСсылка");
		
		Попытка
			ДокументВводаПоказаний.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("При записи документа """ + Выборка.Представление + """ произошла ошибка." + ОписаниеОшибки());
		КонецПопытки;
		
		ДокументКорректировкиНачислений = СсылкаДокументКорректировкиНачислений.ПолучитьОбъект();
		ДокументКорректировкиНачислений.ДокументОснование = Выборка.Ссылка;
		
		Попытка
			ДокументКорректировкиНачислений.Записать(РежимЗаписиДокумента.Запись);
		Исключение
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("При записи документа """ + ДокументКорректировкиНачислений + """ произошла ошибка: " + ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
	Если Не ОбработчикВыполненУспешно Тогда
		ДобавитьСообщениеПользователю("Обработчик обновления ""ЗаполнитьСвязьДокументовВводаПоказанийСчетчикаИКорректировкаНачислений_3_0_65_3"" не выполнен или выполнен с ошибками!", Истина, Истина);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура переносит данные реквизитов "ВариантПоставкиУслуг" и "ОплатаЧерезУК" в справочник договоры, а также обновляет записи
//  регистра "Поставщики" в соответствии с новой структурой.
//
Процедура ПерезаполнениеДокументовУправленияДоговорамиПоставщиковИДоговоровПоставщиков_3_0_65_6()
	
	ОбработчикВыполненУспешно = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_УправлениеДоговорамиСПоставщикамиУслугОбъекты.Ссылка КАК Документ,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ УПЖКХ_УправлениеДоговорамиСПоставщикамиУслугОбъекты.УдалитьОплатаЧерезУК) КАК УдалитьОплатаЧерезУК,
	|	УПЖКХ_УправлениеДоговорамиСПоставщикамиУслугОбъекты.Ссылка.УдалитьВариантПоставкиУслуг КАК УдалитьВариантПоставкиУслуг,
	|	УПЖКХ_УправлениеДоговорамиСПоставщикамиУслугОбъекты.Ссылка.МоментВремени КАК МоментВремени
	|ПОМЕСТИТЬ врДокументыПодсчетОплат
	|ИЗ
	|	Документ.УПЖКХ_УправлениеДоговорамиСПоставщикамиУслуг.Объекты КАК УПЖКХ_УправлениеДоговорамиСПоставщикамиУслугОбъекты
	|ГДЕ
	|	УПЖКХ_УправлениеДоговорамиСПоставщикамиУслугОбъекты.Ссылка.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	УПЖКХ_УправлениеДоговорамиСПоставщикамиУслугОбъекты.Ссылка,
	|	УПЖКХ_УправлениеДоговорамиСПоставщикамиУслугОбъекты.Ссылка.УдалитьВариантПоставкиУслуг,
	|	УПЖКХ_УправлениеДоговорамиСПоставщикамиУслугОбъекты.Ссылка.МоментВремени
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УПЖКХ_УправлениеДоговорамиСПоставщикамиУслугОбъекты.УдалитьОплатаЧерезУК КАК УдалитьОплатаЧерезУК,
	|	УПЖКХ_УправлениеДоговорамиСПоставщикамиУслугОбъекты.Ссылка КАК Документ
	|ПОМЕСТИТЬ врДокументыСОплатой
	|ИЗ
	|	Документ.УПЖКХ_УправлениеДоговорамиСПоставщикамиУслуг.Объекты КАК УПЖКХ_УправлениеДоговорамиСПоставщикамиУслугОбъекты
	|ГДЕ
	|	УПЖКХ_УправлениеДоговорамиСПоставщикамиУслугОбъекты.УдалитьОплатаЧерезУК
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врПодсчетОплат.Документ КАК Документ,
	|	ВЫБОР
	|		КОГДА врПодсчетОплат.УдалитьОплатаЧерезУК = 2
	|			ТОГДА ИСТИНА
	|		КОГДА врПодсчетОплат.УдалитьОплатаЧерезУК = 1
	|				И врДокументыСОплатой.УдалитьОплатаЧерезУК = ИСТИНА
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УдалитьОплатаЧерезУК,
	|	врПодсчетОплат.УдалитьВариантПоставкиУслуг КАК УдалитьВариантПоставкиУслуг,
	|	врПодсчетОплат.МоментВремени КАК МоментВремени
	|ПОМЕСТИТЬ врДокументы
	|ИЗ
	|	врДокументыПодсчетОплат КАК врПодсчетОплат
	|		ЛЕВОЕ СОЕДИНЕНИЕ врДокументыСОплатой КАК врДокументыСОплатой
	|		ПО врПодсчетОплат.Документ = врДокументыСОплатой.Документ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Договор,
	|	врДокументы.Документ.Ссылка КАК ДокументУправлениеДоговорами,
	|	ДоговорыКонтрагентов.УПЖКХ_ВариантПоставкиУслуг КАК ВариантПоставкиУслуг,
	|	врДокументы.УдалитьВариантПоставкиУслуг КАК УдалитьВариантПоставкиУслуг,
	|	врДокументы.УдалитьОплатаЧерезУК КАК УдалитьОплатаЧерезУК,
	|	врДокументы.МоментВремени КАК МоментВремени
	|ПОМЕСТИТЬ врДоговоры
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врДокументы КАК врДокументы
	|		ПО ДоговорыКонтрагентов.Ссылка = врДокументы.Документ.ДоговорПоставщикаУслуг
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	врДоговоры.Договор КАК Договор,
	|	врДоговоры.ДокументУправлениеДоговорами КАК ДокументУправлениеДоговорами,
	|	врДоговоры.УдалитьВариантПоставкиУслуг КАК УдалитьВариантПоставкиУслуг,
	|	врДоговоры.УдалитьОплатаЧерезУК КАК УдалитьОплатаЧерезУК,
	|	врДоговоры.МоментВремени КАК МоментВремени
	|ИЗ
	|	РегистрСведений.УПЖКХ_ПоставщикиУслуг КАК УПЖКХ_ПоставщикиУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врДоговоры КАК врДоговоры
	|		ПО УПЖКХ_ПоставщикиУслуг.Регистратор = врДоговоры.ДокументУправлениеДоговорами
	|ГДЕ
	|	врДоговоры.ВариантПоставкиУслуг = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВариантыРасчетовСПоставщикамиУслуг.ПустаяСсылка)
	|	И УПЖКХ_ПоставщикиУслуг.ДоговорПоставщикаУслуг = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	МоментВремени";

	
	ВыборкаРегистраторов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаРегистраторов.Следующий() Цикл
		
		ТекНаборЗаписей = РегистрыСведений.УПЖКХ_ПоставщикиУслуг.СоздатьНаборЗаписей();
		ТекНаборЗаписей.Отбор.Регистратор.Установить(ВыборкаРегистраторов.ДокументУправлениеДоговорами);
		ТекНаборЗаписей.Прочитать();
		
		Для Каждого Запись Из ТекНаборЗаписей Цикл
			Запись.ДоговорПоставщикаУслуг = ВыборкаРегистраторов.Договор;
		КонецЦикла;
		
		Если Не ЗаписатьОбъект(ТекНаборЗаписей) Тогда
			ОбработчикВыполненУспешно = Ложь;
		КонецЕсли;
		
		ДоговорОбъект  = ВыборкаРегистраторов.Договор.ПолучитьОбъект();
		ДоговорОбъект.УПЖКХ_ОплатаЧерезУК        = ВыборкаРегистраторов.УдалитьОплатаЧерезУК;
		ДоговорОбъект.УПЖКХ_ВариантПоставкиУслуг = ВыборкаРегистраторов.УдалитьВариантПоставкиУслуг;
		
		ДоговорОбъект.ОбменДанными.Загрузка = Истина;
		
		Если Не ЗаписатьОбъект(ДоговорОбъект) Тогда
			ОбработчикВыполненУспешно = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ОбработчикВыполненУспешно Тогда
		ДобавитьСообщениеПользователю("Обработчик обновления ""ПерезаполнениеДокументовУправленияДоговорамиПоставщиковИДоговоровПоставщиков_3_0_65_6"" не выполнен или выполнен с ошибками!", Истина, Истина);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ПерезаполнениеДокументовУправленияДоговорамиПоставщиковИДоговоровПоставщиков_3_0_65_6()

// Заполняет значение ресурса "Число начала периода приема показаний" Учетной политики (ЖКХ) значением по умолчанию.
//
Процедура ЗаполнитьЗначениеРесурсаЧислоНачалаПериодаПриемаПоказанийУчетнойПолитикиЖКХ_3_0_65_7()
	
	ОбработчикВыполненУспешно = Истина;
	ЕстьИзменения             = Ложь;
	
	НаборЗаписей = РегистрыСведений.КВП_УчетнаяПолитикаТСЖ.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Для каждого ТекЗапись из НаборЗаписей Цикл
		Если ТекЗапись.ЧислоНачалаПериодаПриемаПоказаний = 0 Тогда
			ЕстьИзменения                               = Истина;
			ТекЗапись.ЧислоНачалаПериодаПриемаПоказаний = 1;
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьИзменения Тогда
		ОбработчикВыполненУспешно = ЗаписатьОбъект(НаборЗаписей, Истина);
	КонецЕсли;
	
	Если Не ОбработчикВыполненУспешно Тогда
		ДобавитьСообщениеПользователю("Обработчик обновления ""ЗаполнитьЗначениеРесурсаЧислоНачалаПериодаПриемаПоказанийУчетнойПолитикиЖКХ_3_0_65_7"" не выполнен или выполнен с ошибками!", Истина, Истина);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет значение ресурса "ДополнительныеРеквизитыQRКодаПоКР" регистра сведений "Настройки формирования платежного документа".
//
Процедура ЗаполнитьСоставДополнительныхРеквизитовQRПоКапитальномуРемонту_3_0_65_8()
	
	// Имя параметра сохранения массива обработанных корректировок в параметрах обновления ИБ.
	ИмяПараметраОбновленияИБ = "ЗаполнитьСоставДополнительныхРеквизитовQRПоКапитальномуРемонту_3_0_65_8";
	
	// Если обработка была выполнена ранее, то прекращаем выполнение данного обработчика обновления.
	ОбработкаЗаполненияВыполнена = ПолучитьПараметрОбновленияИБ(ИмяПараметраОбновленияИБ);
	Если ОбработкаЗаполненияВыполнена = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ОбработчикВыполненУспешно = Истина;
	
	НаборЗаписей = РегистрыСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	ЕстьИзменения = Ложь;
	
	Для Каждого ТекЗапись из НаборЗаписей Цикл
		ДополнительныеРеквизитыQRКодаПоКР = ТекЗапись.ДополнительныеРеквизитыQRКодаПоКР.Получить();
		Если ДополнительныеРеквизитыQRКодаПоКР = Неопределено Тогда
			ЕстьИзменения                               = Истина;
			ТекЗапись.ДополнительныеРеквизитыQRКодаПоКР = Новый ХранилищеЗначения(Новый СписокЗначений);
		КонецЕсли;
	КонецЦикла;
	
	Если ЕстьИзменения Тогда
		ОбработчикВыполненУспешно = ЗаписатьОбъект(НаборЗаписей);
	КонецЕсли;
	
	// Если обработчик выполнен с ошибками, то в целом обновление считается неуспешным.
	Если Не ОбработчикВыполненУспешно Тогда
		ДобавитьСообщениеПользователю("Обработчик обновления ""ЗаполнитьНастройкуОтражатьВзаиморасчетыПоКапремонту"" не выполнен или выполнен с ошибками!", Истина, Истина);
	Иначе
		// Сохранение результата обработки в параметрах обновления ИБ.
		ОбработчикВыполнен = Истина;
		СохранитьПараметрОбновленияИБ(ИмяПараметраОбновленияИБ, ОбработчикВыполнен);
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет реквизит ИдентификаторДляФормул в справочнике "КВП_ТипыПлощадейЗдания" и "УПЖКХ_ВидыПлощадей".
//
Процедура ЗаполнитьИдентификаторыДляФормулВТипахПлощадейЗданияИПлощадяхПомещения_3_0_65_9()
	
	// Признак успешности выполнения обработчика в значении по умолчанию.
	ОбработчикВыполненУспешно = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_ТипыПлощадейЗдания.Наименование КАК Наименование,
	|	КВП_ТипыПлощадейЗдания.ИдентификаторДляФормул КАК ИдентификаторДляФормул,
	|	КВП_ТипыПлощадейЗдания.Ссылка КАК Ссылка,
	|	КВП_ТипыПлощадейЗдания.Код КАК Код
	|ИЗ
	|	Справочник.КВП_ТипыПлощадейЗдания КАК КВП_ТипыПлощадейЗдания
	|ГДЕ
	|	КВП_ТипыПлощадейЗдания.ИдентификаторДляФормул = """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	УПЖКХ_ВидыПлощадей.Наименование,
	|	УПЖКХ_ВидыПлощадей.ИдентификаторДляФормул,
	|	УПЖКХ_ВидыПлощадей.Ссылка,
	|	УПЖКХ_ВидыПлощадей.Код
	|ИЗ
	|	Справочник.УПЖКХ_ВидыПлощадей КАК УПЖКХ_ВидыПлощадей
	|ГДЕ
	|	УПЖКХ_ВидыПлощадей.ИдентификаторДляФормул = """"";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТипПлощадиОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		// Заполняем идентификатор по наименованию.
		ТипПлощадиОбъект.ИдентификаторДляФормул = УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьИдентификатор(Выборка.Наименование);
		
		// Если идентификатор не уникален, то добавляет к нему код объекта в формате "[ИдентификаторПоНаименованию]_[ИдентификаторПоКоду]".
		Если Не ТипПлощадиОбъект.ИндентификаторУникален() Тогда
			ТипПлощадиОбъект.ИдентификаторДляФормул = ТипПлощадиОбъект.ИдентификаторДляФормул + "_" + УПЖКХ_ОбщегоНазначенияКлиентСервер.ПолучитьИдентификатор(Выборка.Код);
		КонецЕсли;
		
		// Запись объекта в режиме загрузки данных.
		ТипПлощадиОбъект.ОбменДанными.Загрузка = Истина;
		Если Не ЗаписатьОбъект(ТипПлощадиОбъект) Тогда
			ОбработчикВыполненУспешно = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если обработчик выполнен с ошибками, то в целом обновление считается неуспешным.
	Если Не ОбработчикВыполненУспешно Тогда
		ДобавитьСообщениеПользователю("Обработчик обновления ""ЗаполнитьИдентификаторыДляФормулВТипахПлощадейЗданияИПлощадяхПомещения"" не выполнен!", Истина, Истина);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет реквизит ФормулаРасчета в справочнике КВП_НормыПотребленияУслуг.
//
Процедура ЗаполнитьФормулыРасчетаВНормахПотребленияУслуг_3_0_65_9()
	
	// Порядок обработки норм потребления:
	// 1. Получаем все элементы справочника "Нормы потребления услуг", у которых заполнена старая формула, а новая не заполнена.
	// 2. Формируем соответствие всех возможных операндов в старой и новой формулах для замены.
	// 3. Заменяем старый операнд на новый для каждого найденного из п.2.
	// 4. В формуле заменяем старый формат даты [Дата:20140101] на новый формат Дата(2014,01,01).
	
	// Признак успешности выполнения обработчика в значении по умолчанию.
	ОбработчикВыполненУспешно = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_НормыПотребленияУслуг.УдалитьФормула КАК СтараяФормула,
	|	КВП_НормыПотребленияУслуг.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КВП_НормыПотребленияУслуг КАК КВП_НормыПотребленияУслуг
	|ГДЕ
	|	НЕ КВП_НормыПотребленияУслуг.УдалитьФормула = """"
	|	И КВП_НормыПотребленияУслуг.ФормулаРасчета = """"";
	
	НормыПотребленияКОбработке = Запрос.Выполнить().Выбрать();
	Если Не НормыПотребленияКОбработке.Количество() = 0 Тогда
		
		// Формирование соответствия операндов для последующей замены.
		СоответствиеОперандов = Новый Соответствие;
		
		Выборка = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_КВП_Здания.ДополнительныеСведения.ВыгрузитьКолонку("Свойство");
		Для Каждого Строка Из Выборка Цикл
			СоответствиеОперандов.Вставить("ЗС" + Строка, "Здание.СвойствоЗдания." + Строка);
		КонецЦикла;
		
		Выборка = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_КВП_Здания.ДополнительныеРеквизиты.ВыгрузитьКолонку("Свойство");
		Для Каждого Строка Из Выборка Цикл
			СоответствиеОперандов.Вставить("ЗС" + Строка, "Здание.СвойствоЗдания." + Строка);
		КонецЦикла;
		
		Выборка = Метаданные.Справочники.КВП_Здания.Реквизиты;
		Для Каждого Строка Из Выборка Цикл
			СоответствиеОперандов.Вставить("ЗР" + Строка.Имя, "Здание.РеквизитЗдания." + Строка.Имя);
		КонецЦикла;
		
		Выборка = Справочники.КВП_ТипыПлощадейЗдания.Выбрать();
		Пока Выборка.Следующий() Цикл
			СоответствиеОперандов.Вставить("ЗП" + Выборка.Код, "Здание.ПлощадьЗдания." + Выборка.ИдентификаторДляФормул);
		КонецЦикла;
		
		Выборка = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_УПЖКХ_Помещения.ДополнительныеСведения.ВыгрузитьКолонку("Свойство");
		Для Каждого Строка Из Выборка Цикл
			СоответствиеОперандов.Вставить("ПС" + Строка, "Помещение.СвойствоПомещения." + Строка);
		КонецЦикла;
		
		Выборка = Справочники.НаборыДополнительныхРеквизитовИСведений.Справочник_УПЖКХ_Помещения.ДополнительныеРеквизиты.ВыгрузитьКолонку("Свойство");
		Для Каждого Строка Из Выборка Цикл
			СоответствиеОперандов.Вставить("ПС" + Строка, "Помещение.СвойствоПомещения." + Строка);
		КонецЦикла;
		
		Выборка = Метаданные.Справочники.УПЖКХ_Помещения.Реквизиты;
		Для Каждого Строка Из Выборка Цикл
			СоответствиеОперандов.Вставить("ПР" + Строка.Имя, "Помещение.РеквизитПомещения." + Строка.Имя);
		КонецЦикла;
		
		Выборка = Справочники.УПЖКХ_ВидыПлощадей.Выбрать();
		Пока Выборка.Следующий() Цикл
			СоответствиеОперандов.Вставить("ПП" + Выборка.Код, "Помещение.ПлощадьПомещения." + Выборка.ИдентификаторДляФормул);
		КонецЦикла;
		
		СоответствиеОперандов.Вставить("КЧПроживающих",                    "КоличествоЧеловек.Проживающих");
		СоответствиеОперандов.Вставить("КЧЗарегистрированных",             "КоличествоЧеловек.Зарегистрированных");
		СоответствиеОперандов.Вставить("КЧВладельцев единственного жилья", "КоличествоЧеловек.Владельцев единственного жилья");
		СоответствиеОперандов.Вставить("КЧЛьготников",                     "КоличествоЧеловек.Льготников");
		СоответствиеОперандов.Вставить("КЧБлизких родственников",          "КоличествоЧеловек.Близких родственников");
		СоответствиеОперандов.Вставить("ККЖилых",                          "КоличествоКомнат.Жилых");
		СоответствиеОперандов.Вставить("ККВсего",                          "КоличествоКомнат.Всего");
		СоответствиеОперандов.Вставить("КДКоличествоДнейВМесяце",          "ПоказательРасчета.КоличествоДнейВМесяце");
		СоответствиеОперандов.Вставить("МРМесяцРасчета",                   "ПоказательРасчета.МесяцРасчета");
		
		Пока НормыПотребленияКОбработке.Следующий() Цикл
			
			СтрокаФормулы = НормыПотребленияКОбработке.СтараяФормула;
			
			// Замена операндов в формуле.
			Для Каждого Операнд Из СоответствиеОперандов Цикл
				СтрокаФормулы = СтрЗаменить(СтрокаФормулы, Операнд.Ключ, Операнд.Значение);
			КонецЦикла;
			
			//[Дата:20140101].
			НомерСимвола = СтрНайти(СтрокаФормулы, "[Дата:");
			
			// Замена дат.
			Пока НомерСимвола <> 0 Цикл
				
				СтараяДата = Сред(СтрокаФормулы, НомерСимвола, 15); // [Дата:20140101].
				
				НоваяДата = Сред(СтрокаФормулы, НомерСимвола + 6, 8); // 20140101.
				НоваяДата = "Дата(" + Лев(НоваяДата, 4) + "," + Сред(НоваяДата, 4, 2) + "," + Сред(НоваяДата, 6, 2)  + ")"; // Дата(2014,01,01).
				
				СтрокаФормулы = СтрЗаменить(СтрокаФормулы, СтараяДата, НоваяДата);
				
				НомерСимвола = СтрНайти(СтрокаФормулы, "[Дата:");
				
			КонецЦикла;
			
			НормаПотребленияОбъект = НормыПотребленияКОбработке.Ссылка.ПолучитьОбъект();
			НормаПотребленияОбъект.ФормулаРасчета = СтрокаФормулы;
			
			НормаПотребленияОбъект.ОбменДанными.Загрузка = Истина;
			Если Не ЗаписатьОбъект(НормаПотребленияОбъект) Тогда
				ОбработчикВыполненУспешно = Ложь;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Если обработчик выполнен с ошибками, то в целом обновление считается неуспешным.
	Если Не ОбработчикВыполненУспешно Тогда
		ДобавитьСообщениеПользователю("Обработчик обновления ""ЗаполнитьФормулыРасчетаВНормахПотребленияУслуг"" не выполнен!", Истина, Истина);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет информацию о присоединенных файлах в регистре "НаличиеФайлов".
//
Процедура ЗаполнитьИнформациюОНаличииПрисоединенныхФайлов_3_0_66_2()
	
	// Признак успешности выполнения обработчика в значении по умолчанию.
	ОбработчикВыполненУспешно = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УПЖКХ_ПрисоединенныеФайлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.УПЖКХ_ПрисоединенныеФайлы КАК УПЖКХ_ПрисоединенныеФайлы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НаличиеФайлов КАК НаличиеФайлов
	|		ПО УПЖКХ_ПрисоединенныеФайлы.ВладелецФайла = НаличиеФайлов.ОбъектСФайлами
	|ГДЕ
	|	НаличиеФайлов.ОбъектСФайлами ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ВладелецФайла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.Ссылка, "ВладелецФайла");
		Если Не ЗначениеЗаполнено(ВладелецФайла) Тогда
			Продолжить;
		КонецЕсли;
		
		МенеджерЗаписиНаличиеФайлов = РегистрыСведений.НаличиеФайлов.СоздатьМенеджерЗаписи();
		МенеджерЗаписиНаличиеФайлов.ОбъектСФайлами       = ВладелецФайла;
		МенеджерЗаписиНаличиеФайлов.ЕстьФайлы            = Истина;
		МенеджерЗаписиНаличиеФайлов.ИдентификаторОбъекта = РаботаСФайламиСлужебный.ПолучитьОчереднойИдентификаторОбъекта();
		
		Если Не ЗаписатьОбъект(МенеджерЗаписиНаличиеФайлов, Истина) Тогда
			ОбработчикВыполненУспешно = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если обработчик выполнен с ошибками, то в целом обновление считается неуспешным.
	Если Не ОбработчикВыполненУспешно Тогда
		ДобавитьСообщениеПользователю("Обработчик обновления ""ЗаполнитьИнформациюОНаличииПрисоединенныхФайлов"" не выполнен!", Истина, Истина);
		// ОСОБЕННОСТЬ: в отказ не уходим, так как обработчик не критичный.
	КонецЕсли;
	
КонецПроцедуры

// Процедура перезаполняет ошибочное значение настройки варианта загрузки нулевых значений в справочнике "Настройки загрузки и выгрузки".
//
Процедура ПерезаполнитьНастройкуЗагрузкиРеестровПУОВариантеЗагрузкиНулевыхПоказаний_3_0_66_4()
	
	// Признак успешности выполнения обработчика в значении по умолчанию.
	ОбработчикВыполненУспешно = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КВП_НастройкиЗагрузкиВыгрузки.Ссылка КАК Ссылка,
	|	КВП_НастройкиЗагрузкиВыгрузки.ВариантЗагрузкиНулевыхПоказаний КАК ВариантЗагрузкиНулевыхПоказаний
	|ИЗ
	|	Справочник.КВП_НастройкиЗагрузкиВыгрузки КАК КВП_НастройкиЗагрузкиВыгрузки
	|ГДЕ
	|	КВП_НастройкиЗагрузкиВыгрузки.ВариантЗагрузкиНулевыхПоказаний = &ВариантЗагрузкиНулевыхПоказаний";
	
	Запрос.УстановитьПараметр("ВариантЗагрузкиНулевыхПоказаний","Загружать нулевые как """"Не введено""""");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектСправочника = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектСправочника.ВариантЗагрузкиНулевыхПоказаний = "Загружать нулевые как ""Не введено"""; 
		
		Если Не ЗаписатьОбъект(ОбъектСправочника) Тогда
			ОбработчикВыполненУспешно = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	// Если обработчик выполнен с ошибками, то в целом обновление считается неуспешным.
	Если Не ОбработчикВыполненУспешно Тогда
		ДобавитьСообщениеПользователю("Обработчик обновления ""ПерезаполнитьНастройкуЗагрузкиРеестровПУВариантЗагрузкиНулевыхПоказаний"" не выполнен!", Истина, Истина);
		// ОСОБЕННОСТЬ: в отказ не уходим, так как обработчик не критичный.
	КонецЕсли;
	
КонецПроцедуры

// Процедура изменяет реквизит "ОтноситсяКМОП" справочника "УПЖКХ_ВидыПомещений".
//
Процедура ЗаполнитьРеквизитОтноситсяКМОПВЭлементахСправочникаВидыПомещений_3_0_66_5()
	
	// Признак успешности выполнения обработчика в значении по умолчанию.
	ОбработчикВыполненУспешно = Истина;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Перечисления.КВП_ТипыПомещений.МестоОбщегоПользования);
	МассивТипов.Добавить(Перечисления.КВП_ТипыПомещений.ПодсобноеПомещение);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипПомещения", МассивТипов);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_ВидыПомещений.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.УПЖКХ_ВидыПомещений КАК УПЖКХ_ВидыПомещений
	|ГДЕ
	|	УПЖКХ_ВидыПомещений.ОтноситсяКМОП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_ВидыПомещений.Ссылка КАК ВидПомещения
	|ИЗ
	|	Справочник.УПЖКХ_ВидыПомещений КАК УПЖКХ_ВидыПомещений
	|ГДЕ
	|	УПЖКХ_ВидыПомещений.ТипПомещения В(&ТипПомещения)";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаЗапроса        = РезультатЗапроса[0].Выбрать();
	ВыборкаВидовПомещений = РезультатЗапроса[1].Выбрать();
	
	Если ВыборкаЗапроса.Количество() = 0 Тогда
		Пока ВыборкаВидовПомещений.Следующий() Цикл
			
			СправочникОбъект = ВыборкаВидовПомещений.ВидПомещения.ПолучитьОбъект();
			СправочникОбъект.ОтноситсяКМОП = Истина;
			
			Если НЕ ЗаписатьОбъект(СправочникОбъект) Тогда
				ОбработчикВыполненУспешно = Ложь;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Если обработчик выполнен с ошибками, то в целом обновление считается неуспешным.
	Если Не ОбработчикВыполненУспешно Тогда
		ДобавитьСообщениеПользователю("Обработчик обновления ""ЗаполнитьРеквизитОтноситсяКМОПВЭлементахСправочникаВидыПомещений"" не выполнен!", Истина, Истина);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРеквизитОтноситсяКМОПВЭлементахСправочникаВидыПомещений_3_0_66_5()

// Процедура заполняет добавленные ресурсы "СчетаУчетаДляОтраженияПени" и "СтавкаНДСДляОтраженияПени"
// для всех записей регистра сведений "КВП_УчетнаяПолитикаТСЖ".
//
Процедура ПерезаполнитьСпособОтраженияПениВРеглУчете_3_0_66_5()
	
	// Признак успешности выполнения обработчика в значении по умолчанию.
	ОбработчикВыполненУспешно = Истина;
	
	НаборЗаписей = РегистрыСведений.КВП_УчетнаяПолитикаТСЖ.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	БылиИзменения = Ложь;
	
	Для Каждого Запись Из НаборЗаписей Цикл
		
		Если Запись.СчетаУчетаДляОтраженияПени.Пустая() Тогда
			Если Запись.УдалитьОтражатьПениОтдельноОтНачислений Тогда
				Запись.СчетаУчетаДляОтраженияПени = Перечисления.УПЖКХ_СчетаУчетаДляПениПриОтраженииВРеглУчете.ОтдельныеСчета;
			Иначе
				Запись.СчетаУчетаДляОтраженияПени = Перечисления.УПЖКХ_СчетаУчетаДляПениПриОтраженииВРеглУчете.СчетаДляНачислений;
			КонецЕсли;
			
			БылиИзменения = Истина;
		КонецЕсли;
		
		Если Запись.СтавкаНДСДляОтраженияПени.Пустая() Тогда
			Запись.СтавкаНДСДляОтраженияПени = Перечисления.УПЖКХ_СтавкиНДСДляПениПриОтраженииВРеглУчете.ИзНоменклатуры;
			БылиИзменения = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если БылиИзменения И Не ЗаписатьОбъект(НаборЗаписей) Тогда
		ОбработчикВыполненУспешно = Ложь;
	КонецЕсли;
	
	// Если обработчик выполнен с ошибками, то в целом обновление считается неуспешным.
	Если Не ОбработчикВыполненУспешно Тогда
		ДобавитьСообщениеПользователю("Обработчик обновления ""ПерезаполнитьСпособОтраженияПениВРеглУчете"" не выполнен!", Истина, Истина);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет добавленный ресурс "СчетаУчетаДляОтраженияПениКапремонт"
// для всех записей регистра сведений "КВП_УчетнаяПолитикаТСЖ".
//
Процедура ЗаполнитьРесурсСчетаУчетаДляОтраженияПениКапремонт_3_0_66_5()
	
	// Признак успешности выполнения обработчика в значении по умолчанию.
	ОбработчикВыполненУспешно = Истина;
	
	НаборЗаписей = РегистрыСведений.КВП_УчетнаяПолитикаТСЖ.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	БылиИзменения = Ложь;
	
	Для Каждого Запись Из НаборЗаписей Цикл
		
		Если Запись.СчетаУчетаДляОтраженияПениКапремонт.Пустая() Тогда
			Если Запись.УдалитьОтражатьПениКапремонтОтдельноОтНачислений Тогда
				Запись.СчетаУчетаДляОтраженияПениКапремонт = Перечисления.УПЖКХ_СчетаУчетаДляПениПриОтраженииВРеглУчете.ОтдельныеСчета;
			Иначе
				Запись.СчетаУчетаДляОтраженияПениКапремонт = Перечисления.УПЖКХ_СчетаУчетаДляПениПриОтраженииВРеглУчете.СчетаДляНачислений;
			КонецЕсли;
			
			БылиИзменения = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если БылиИзменения И Не ЗаписатьОбъект(НаборЗаписей) Тогда
		ОбработчикВыполненУспешно = Ложь;
	КонецЕсли;
	
	// Если обработчик выполнен с ошибками, то в целом обновление считается неуспешным.
	Если Не ОбработчикВыполненУспешно Тогда
		ДобавитьСообщениеПользователю("Обработчик обновления ""ЗаполнитьРесурсСчетаУчетаДляОтраженияПениКапремонт"" не выполнен!", Истина, Истина);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет перенос настроек в новый справочник "УПЖКХ_НастройкиУниверсальнойВыгрузкиДанных".
//
Процедура ВыполнитьПереносНастроекВСправочникУПЖКХ_НастройкиУниверсальнойВыгрузкиДанных_3_0_66_6()
	
	// Проверяем наличие элементов справочника "НастройкиУниверсальнойВыгрузкиДанных".
	// Если элементы справочника есть, то обновление не выполняем.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УПЖКХ_НастройкиУниверсальнойВыгрузкиДанных.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.УПЖКХ_НастройкиУниверсальнойВыгрузкиДанных КАК УПЖКХ_НастройкиУниверсальнойВыгрузкиДанных";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		// Настройки пользователей получаем без проверки прав.
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Пользователи.Наименование КАК Наименование
		|ИЗ
		|	Справочник.Пользователи КАК Пользователи
		|ГДЕ
		|	НЕ Пользователи.ПометкаУдаления";
		ВыборкаПользователей = Запрос.Выполнить().Выбрать();
		
		НомерЭлемента = 1;
		
		Пока ВыборкаПользователей.Следующий() Цикл
			
			Пользователь = ВыборкаПользователей.Наименование;
			
			// Извлекаем настройки для указанного пользователя.
			СтруктураПараметров = ХранилищеОбщихНастроек.Загрузить("УПЖКХ_УниверсальнаяВыгрузкаДанных", , Пользователь);
			
			Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
				
				СтруктураПараметров.Вставить("Комментарий",  Пользователь);
				СтруктураПараметров.Вставить("Наименование", "Настройка выгрузки №" + НомерЭлемента);
				
				Если НЕ СтруктураПараметров.Свойство("МинимальнаяСуммаДолга") Тогда
					СтруктураПараметров.Вставить("МинимальнаяСуммаДолга", 0);
				КонецЕсли;
				
				Если НЕ СтруктураПараметров.Свойство("ОтборПоОтветственномуСобственнику") Тогда
					СтруктураПараметров.Вставить("ОтборПоОтветственномуСобственнику", 0);
				КонецЕсли;
				
				Если НЕ СтруктураПараметров.Свойство("ВыгружатьТолькоСНомерамиТелефонов") Тогда
					СтруктураПараметров.Вставить("ВыгружатьТолькоСНомерамиТелефонов", 0);
				КонецЕсли;
				
				Если НЕ СтруктураПараметров.Свойство("ТипВыгрузкиДанныхПоПоказаниямСчетчиков") Тогда
					СтруктураПараметров.Вставить("ТипВыгрузкиДанныхПоПоказаниямСчетчиков", 0);
				КонецЕсли;
				
				Если НЕ СтруктураПараметров.Свойство("ТипОтбораПоСуммеДолга") Тогда
					СтруктураПараметров.Вставить("ТипОтбораПоСуммеДолга", 0);
				КонецЕсли;
				
				Если НЕ СтруктураПараметров.Свойство("ВыборЛицевыхСчетов") Тогда
					СтруктураПараметров.Вставить("ВыборЛицевыхСчетов", 0);
				КонецЕсли;
				
				Если НЕ СтруктураПараметров.Свойство("ВыборУслуг") Тогда
					СтруктураПараметров.Вставить("ВыборУслуг", 0);
				КонецЕсли;
				
				НоваяЗапись = Справочники.УПЖКХ_НастройкиУниверсальнойВыгрузкиДанных.СоздатьЭлемент();
				
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураПараметров);
				
				Если СтруктураПараметров.Свойство("ВыбранныеЛицевыеСчета")
				   И ТипЗнч(СтруктураПараметров.ВыбранныеЛицевыеСчета) = Тип("СписокЗначений") Тогда
					Для Каждого ТекЛС Из СтруктураПараметров.ВыбранныеЛицевыеСчета Цикл
						Если НЕ ТекЛС.Значение = Справочники.КВП_ЛицевыеСчета.ПустаяСсылка() Тогда
							НоваяЗапись.ВыбранныеЛицевыеСчета.Добавить().ЛицевойСчет = ТекЛС.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если СтруктураПараметров.Свойство("ВыбранныеУслуги")
				   И ТипЗнч(СтруктураПараметров.ВыбранныеУслуги) = Тип("СписокЗначений") Тогда
					Для Каждого ТекУслуга Из СтруктураПараметров.ВыбранныеУслуги Цикл
						Если НЕ ТекУслуга.Значение = Справочники.КВП_Услуги.ПустаяСсылка() Тогда
							НоваяЗапись.ВыбранныеУслуги.Добавить().Услуга = ТекУслуга.Значение;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				ЗаписатьОбъект(НоваяЗапись);
				
				НомерЭлемента = НомерЭлемента + 1;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет установку настройки "ИспользоватьРассылкуКвитанцийПоЭлектроннойПочте".
Процедура ИспользоватьРассылкуКвитанцийПоЭлектроннойПочте_3_0_66_6()
	
	// Признак успешности выполнения обработчика в значении по умолчанию.
	ОбработчикВыполненУспешно = Истина;
	
	Попытка
		Константы.УПЖКХ_ИспользоватьРассылкуКвитанцийПоЭлектроннойПочте.Установить(Истина);
	Исключение
		ОбработчикВыполненУспешно = Ложь;
	КонецПопытки;
	
КонецПроцедуры

// Процедура заполняет значения нового ресурса: "КодОрганизацииДляШтрихКодаПоУслугамКР" в записях регистра сведений
// "Настройки формирования платежного документа".
Процедура ЗаполнитьКодОрганизацииДляШтрихКодаПоУслугамКРВНастройкахФормированияПлатежногоДокумента_3_0_66_7()
	
	ОбработчикВыполненУспешно = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.КодОрганизацииДляШтрихКодаПоОсн КАК КодОрганизации,
	|	УПЖКХ_НастройкиФормированияПлатежногоДокумента.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента КАК УПЖКХ_НастройкиФормированияПлатежногоДокумента
	|ГДЕ
	|	НЕ УПЖКХ_НастройкиФормированияПлатежногоДокумента.КодОрганизацииДляШтрихКодаПоОсн = """"
	|	И УПЖКХ_НастройкиФормированияПлатежногоДокумента.КодОрганизацииДляШтрихКодаПоУслугамКР = """"";
	
	ВыборкаКодов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаКодов.Следующий() Цикл
		
		МенеджерЗаписи = РегистрыСведений.УПЖКХ_НастройкиФормированияПлатежногоДокумента.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.Организация = ВыборкаКодов.Организация;
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() Тогда
			
			МенеджерЗаписи.КодОрганизацииДляШтрихКодаПоУслугамКР = ВыборкаКодов.КодОрганизации;
			
			Если НЕ ЗаписатьОбъект(МенеджерЗаписи) Тогда
				ОбработчикВыполненУспешно = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ОбработчикВыполненУспешно Тогда 
		
		ДобавитьСообщениеПользователю("Обработчик обновления ""ЗаполнитьКодОрганизацииДляШтрихКодаПоУслугамКРВНастройкахФормированияПлатежногоДокумента_3_0_66_7()"" не выполнен или выполнен с ошибками!", Истина, Истина);
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет настройку расчетного счета настроек сбора данных для квитанций и обменов.
//
Процедура ДополнитьТабличнуюЧастьКорректировкиНачисленийУчитывающиеЗависимыеУслугиЗависимымиУслугами_3_0_66_7()
	
	ОбработчикВыполненУспешно = Истина;
	
	//1.В запросе получим записи, данные из которых необходимы для дозаполнения табличной части.
	
	//	1)Выберем все записи по регистру УПЖКХ_Начисления в которых заполнена УслугаОснование, регистратором является документ КВП_КорректировкаНачислений,
	// в котором установлен флажок УдалитьУчитыватьЗависимыеУслуги, и СуммаНачисления не равна 0. То есть все данные по зависимым услугам, которые раньше не попадали
	// в табличную част документа.
	//
	//	2)Получаем список документов для дозаполнения. То есть записи по услугам, которые отсутствуют в табличной части документа.
	//
	//	3)Оставляем записи только по документам. выбранным на этапе 2.
	//
	//	4)Выберем из регистра КВП_НачисленныеЛьготы записи по услугам, которых нет в табличной части дакумента.
	//
	//	5)Добавляем в результат запроса данные из регистра КВП_НачисленныеЛьготы. В зависимости от того, была ли установлена настройка 
	// "Учитывать льготы во взаморасчетах" в регистре УПЖКХ_Начисления могла сформироваться или не сформироваться запись. Если данные в таблице Начисления
	// отсутствуют, то заполняем их из таблицы КорректировкаЛьгот.
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УПЖКХ_Начисления.Регистратор КАК Регистратор,
	|	УПЖКХ_Начисления.Период КАК Период,
	|	УПЖКХ_Начисления.Услуга КАК Услуга,
	|	УПЖКХ_Начисления.Организация КАК Организация,
	|	УПЖКХ_Начисления.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_Начисления.Договор КАК Договор,
	|	УПЖКХ_Начисления.УслугаОснование КАК УслугаОснование,
	|	УПЖКХ_Начисления.СоставнаяУслуга КАК СоставнаяУслуга,
	|	УПЖКХ_Начисления.РазделУчета КАК РазделУчета,
	|	УПЖКХ_Начисления.ВидНачисления КАК ВидНачисления,
	|	УПЖКХ_Начисления.МесяцНачисления КАК МесяцНачисления,
	|	УПЖКХ_Начисления.ТипНачисления КАК ТипНачисления,
	|	УПЖКХ_Начисления.СуммаНачисления КАК СуммаНачисления,
	|	УПЖКХ_Начисления.Начало КАК Начало,
	|	УПЖКХ_Начисления.Окончание КАК Окончание
	|ПОМЕСТИТЬ врЗаписиСДаннымиПоЗависимымУслугам
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления КАК УПЖКХ_Начисления
	|ГДЕ
	|	НЕ УПЖКХ_Начисления.УслугаОснование = ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)
	|	И УПЖКХ_Начисления.Регистратор ССЫЛКА Документ.КВП_КорректировкаНачислений
	|	И НЕ УПЖКХ_Начисления.СуммаНачисления = 0
	|	И УПЖКХ_Начисления.Регистратор.УдалитьУчитыватьЗависимыеУслуги
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	врЗаписиСДаннымиПоЗависимымУслугам.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ДокументыДляДозаполнения
	|ИЗ
	|	врЗаписиСДаннымиПоЗависимымУслугам КАК врЗаписиСДаннымиПоЗависимымУслугам
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КВП_КорректировкаНачислений.Корректировки КАК Корректировки
	|		ПО врЗаписиСДаннымиПоЗависимымУслугам.Регистратор = Корректировки.Ссылка
	|			И врЗаписиСДаннымиПоЗависимымУслугам.Услуга = Корректировки.Услуга
	|ГДЕ
	|	Корректировки.Услуга ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врЗаписиСДаннымиПоЗависимымУслугам.Регистратор КАК Регистратор,
	|	врЗаписиСДаннымиПоЗависимымУслугам.Услуга КАК Услуга,
	|	врЗаписиСДаннымиПоЗависимымУслугам.ЛицевойСчет КАК ЛицевойСчет,
	|	врЗаписиСДаннымиПоЗависимымУслугам.УслугаОснование КАК УслугаОснование,
	|	врЗаписиСДаннымиПоЗависимымУслугам.СоставнаяУслуга КАК СоставнаяУслуга,
	|	врЗаписиСДаннымиПоЗависимымУслугам.РазделУчета КАК РазделУчета,
	|	врЗаписиСДаннымиПоЗависимымУслугам.ВидНачисления КАК ВидНачисления,
	|	врЗаписиСДаннымиПоЗависимымУслугам.МесяцНачисления КАК МесяцНачисления,
	|	врЗаписиСДаннымиПоЗависимымУслугам.ТипНачисления КАК ТипНачисления,
	|	врЗаписиСДаннымиПоЗависимымУслугам.СуммаНачисления КАК СуммаНачисления,
	|	врЗаписиСДаннымиПоЗависимымУслугам.Начало КАК Начало,
	|	врЗаписиСДаннымиПоЗависимымУслугам.Окончание КАК Окончание
	|ПОМЕСТИТЬ Начисления
	|ИЗ
	|	ДокументыДляДозаполнения КАК ДокументыДляДозаполнения
	|		ЛЕВОЕ СОЕДИНЕНИЕ врЗаписиСДаннымиПоЗависимымУслугам КАК врЗаписиСДаннымиПоЗависимымУслугам
	|		ПО (врЗаписиСДаннымиПоЗависимымУслугам.Регистратор = ДокументыДляДозаполнения.Регистратор)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_НачисленныеЛьготы.Период КАК МесяцНачисления,
	|	КВП_НачисленныеЛьготы.ЛьготнаяКатегория КАК ЛьготнаяКатегория,
	|	КВП_НачисленныеЛьготы.Услуга КАК Услуга,
	|	КВП_НачисленныеЛьготы.СоставнаяУслуга КАК СоставнаяУслуга,
	|	КВП_НачисленныеЛьготы.ЛицевойСчет КАК ЛицевойСчет,
	|	-КВП_НачисленныеЛьготы.СуммаНачисления КАК СуммаНачисления,
	|	КВП_НачисленныеЛьготы.Регистратор КАК Регистратор,
	|	КВП_НачисленныеЛьготы.Проживающий КАК Льготник
	|ПОМЕСТИТЬ КорректировкаЛьгот
	|ИЗ
	|	РегистрНакопления.КВП_НачисленныеЛьготы КАК КВП_НачисленныеЛьготы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КВП_КорректировкаНачислений.Корректировки КАК Корректировки
	|		ПО КВП_НачисленныеЛьготы.Регистратор = Корректировки.Ссылка
	|			И КВП_НачисленныеЛьготы.Услуга = Корректировки.Услуга
	|			И КВП_НачисленныеЛьготы.ЛицевойСчет = Корректировки.ЛицевойСчет
	|			И КВП_НачисленныеЛьготы.СоставнаяУслуга = Корректировки.СоставнаяУслуга
	|			И КВП_НачисленныеЛьготы.Организация = Корректировки.Ссылка.Организация
	|ГДЕ
	|	КВП_НачисленныеЛьготы.Регистратор ССЫЛКА Документ.КВП_КорректировкаНачислений
	|	И НЕ КВП_НачисленныеЛьготы.СуммаНачисления = 0
	|	И КВП_НачисленныеЛьготы.Регистратор.УдалитьУчитыватьЗависимыеУслуги
	|	И Корректировки.Услуга ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(Начисления.Регистратор, КорректировкаЛьгот.Регистратор) КАК Регистратор,
	|	ЕСТЬNULL(Начисления.Услуга, КорректировкаЛьгот.Услуга) КАК Услуга,
	|	ЕСТЬNULL(Начисления.ЛицевойСчет, КорректировкаЛьгот.ЛицевойСчет) КАК ЛицевойСчет,
	|	ЕСТЬNULL(Начисления.СоставнаяУслуга, КорректировкаЛьгот.СоставнаяУслуга) КАК СоставнаяУслуга,
	|	ЕСТЬNULL(Начисления.МесяцНачисления, КорректировкаЛьгот.МесяцНачисления) КАК МесяцНачисления,
	|	ЕСТЬNULL(Начисления.СуммаНачисления, КорректировкаЛьгот.СуммаНачисления) КАК СуммаНачисления,
	|	ЕСТЬNULL(Начисления.УслугаОснование, ЗНАЧЕНИЕ(Справочник.КВП_Услуги.ПустаяСсылка)) КАК УслугаОснование,
	|	ЕСТЬNULL(Начисления.РазделУчета, ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы)) КАК РазделУчета,
	|	ЕСТЬNULL(Начисления.ВидНачисления, ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПустаяСсылка)) КАК ВидНачисления,
	|	ЕСТЬNULL(Начисления.ТипНачисления, ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ТипНачисления.ПустаяСсылка)) КАК ТипНачисления,
	|	ЕСТЬNULL(КорректировкаЛьгот.ЛьготнаяКатегория, ЗНАЧЕНИЕ(Справочник.КВП_ЛьготныеКатегории.ПустаяСсылка)) КАК ЛьготнаяКатегория,
	|	ЕСТЬNULL(КорректировкаЛьгот.Льготник, ЗНАЧЕНИЕ(Справочник.УПЖКХ_Жильцы.ПустаяСсылка)) КАК Льготник,
	|	ВЫБОР
	|		КОГДА Начисления.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг)
	|			ТОГДА 1
	|		КОГДА Начисления.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ)
	|			ТОГДА 2
	|		КОГДА Начисления.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.КомиссияБанка)
	|			ТОГДА 3
	|		КОГДА Начисления.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Пени)
	|			ТОГДА 4
	|		ИНАЧЕ 5
	|	КОНЕЦ КАК Сортировка,
	|	ЕСТЬNULL(Начисления.Начало, НАЧАЛОПЕРИОДА(КорректировкаЛьгот.МесяцНачисления, МЕСЯЦ)) КАК Начало,
	|	ЕСТЬNULL(Начисления.Окончание, КОНЕЦПЕРИОДА(КорректировкаЛьгот.МесяцНачисления, МЕСЯЦ)) КАК Окончание
	|ИЗ
	|	Начисления КАК Начисления
	|		ПОЛНОЕ СОЕДИНЕНИЕ КорректировкаЛьгот КАК КорректировкаЛьгот
	|		ПО Начисления.Регистратор = КорректировкаЛьгот.Регистратор
	|			И Начисления.Услуга = КорректировкаЛьгот.Услуга
	|			И Начисления.ЛицевойСчет = КорректировкаЛьгот.ЛицевойСчет
	|			И Начисления.СоставнаяУслуга = КорректировкаЛьгот.СоставнаяУслуга
	|			И (Начисления.РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.Льготы))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сортировка
	|ИТОГИ ПО
	|	Регистратор";
	
	//ВыборкаДокументов = Запрос.Выполнить().Выбрать();
	
	ВыборкаРегистраторов = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам).Строки;
	
	//2. Для каждого найденного документа проверяем есть ли по нему записи по льготам с незаполненной услугой-основанием.
	// Если такие строки найдены, то дополняем табличную часть документа зависимыми услугами и для каждой строки без услуги-основания
	// ищем строку с одинаковой суммой льготы и записываем услугу-основание из найденной строки.
	Для Каждого Регистратор Из ВыборкаРегистраторов Цикл
		
		ДокументОбъект = Регистратор.Регистратор.ПолучитьОбъект();
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		ВидОперации = ДокументОбъект.ВидОперации;
		
		МассивЛьготБезУслугиОснования = Регистратор.Строки.НайтиСтроки(Новый Структура("РазделУчета, УслугаОснование", Перечисления.УПЖКХ_РазделыУчета.Льготы, Справочники.КВП_Услуги.ПустаяСсылка()));
		
		Если Не МассивЛьготБезУслугиОснования.Количество() = 0 Тогда
			
			СписокРеквизитовСумм = Новый Массив();
			СписокРеквизитовСумм.Добавить("СуммаЛьготы");
			
			ТаблицаКорректировки = ДокументОбъект.Корректировки.Выгрузить();
			
			ДополнитьТаблицуУслугЗависимымиУслугами(ДокументОбъект.ДатаКон,
			                                        ДокументОбъект.Организация, 
			                                        ТаблицаКорректировки, 
			                                        СписокРеквизитовСумм, 
			                                        Истина, 
			                                        Константы.УПЖКХ_НачислениеЗависимыхУслугВРазрезеОрганизаций.Получить());
			
			Для Каждого Строка Из МассивЛьготБезУслугиОснования Цикл
				НайденныеСтроки = ТаблицаКорректировки.НайтиСтроки(Новый Структура ("ЛицевойСчет, МесяцНачисления, Услуга, СуммаЛьготы, СоставнаяУслуга, ТипНачисления",
				                                                                    Строка.ЛицевойСчет, Строка.МесяцНачисления, Строка.Услуга, Строка.СуммаНачисления, Строка.СоставнаяУслуга, Строка.ТипНачисления));
				
				Если Не НайденныеСтроки.Количество() = 0 Тогда
					Строка.УслугаОснование = НайденныеСтроки[0].УслугаОснование;
				КонецЕсли;
				
			КонецЦикла
			
		КонецЕсли;
		
		Для Каждого Начисление Из Регистратор.Строки Цикл
			
			Если Начисление.РазделУчета = Перечисления.УПЖКХ_РазделыУчета.НачислениеУслуг Тогда
				// Для раздела учета НачислениеУслуг создаем новую строку в табличной части документа.
				Строка = ДокументОбъект.Корректировки.Добавить();
				
				Если ВидОперации = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.КорректировкаНачислений Тогда
					ЗаполнитьЗначенияСвойств(Строка, Начисление);
					//Строка.Зависимая = Истина;
				Иначе
					ЗаполнитьЗначенияСвойств(Строка, Начисление, ,"СуммаНачисления");
					Строка.СуммаПерерасчета = Начисление.СуммаНачисления;
					Строка.НачалоПериода = Начисление.Начало;
					Строка.КонецПериода  = Начисление.Окончание;
				КонецЕсли;
				
			ИначеЕсли Начисление.РазделУчета = Перечисления.УПЖКХ_РазделыУчета.НачислениеПоПУ Тогда
				// Для раздела учета НачислениеПоПУ создаем новую строку в табличной части документа.
				Строка = ДокументОбъект.Корректировки.Добавить();
				
				Если ВидОперации = Перечисления.КВП_ВидыОперацийКорректировкаНачислений.КорректировкаНачислений Тогда
					ЗаполнитьЗначенияСвойств(Строка, Начисление);
				Иначе
					ЗаполнитьЗначенияСвойств(Строка, Начисление, ,"СуммаНачисления");
					Строка.СуммаПерерасчета = Начисление.СуммаНачисления;
					Строка.НачалоПериода    = Начисление.Начало;
					Строка.КонецПериода     = Начисление.Окончание;
					Строка.ВидНачисления    = Перечисления.УПЖКХ_ВидыНачислений.НачислениеПриОтсутствииПоказанийИПУПоНормативу;
				КонецЕсли;
				
			ИначеЕсли Начисление.РазделУчета = Перечисления.УПЖКХ_РазделыУчета.КомиссияБанка Тогда
				// Для раздела учета КомиссияБанка создаем новую строку в табличной части документа.
				Строка = ДокументОбъект.Корректировки.Добавить();
				
				ЗаполнитьЗначенияСвойств(Строка, Начисление, ,"СуммаНачисления");
				Строка.СуммаПерерасчета = Начисление.СуммаНачисления;
				Строка.НачалоПериода    = Начисление.Начало;
				Строка.КонецПериода     = Начисление.Окончание;
				
				
			ИначеЕсли Начисление.РазделУчета = Перечисления.УПЖКХ_РазделыУчета.Пени Тогда
				// Для раздела учета Пени ищем строку в табличной части и записываем сумму в колонку СуммаПени.
				Строка = ДокументОбъект.Корректировки.НайтиСтроки(Новый Структура ("ЛицевойСчет, МесяцНачисления, Услуга, УслугаОснование, СоставнаяУслуга, ТипНачисления",
				                                                  Начисление.ЛицевойСчет, Начисление.МесяцНачисления, Начисление.Услуга, Начисление.УслугаОснование, Начисление.СоставнаяУслуга, Начисление.ТипНачисления));
				Если Не Строка.Количество() = 0 Тогда
					Строка[0].СуммаПени = Начисление.СуммаНачисления;
				КонецЕсли;
				
			ИначеЕсли Начисление.РазделУчета = Перечисления.УПЖКХ_РазделыУчета.Льготы Тогда
				// Для раздела учета Льготы ищем строку в табличной части и заполняем колонки СуммаЛьготы, Льготник, ЛьготнаяКатегория
				Строка = ДокументОбъект.Корректировки.НайтиСтроки(Новый Структура ("ЛицевойСчет, МесяцНачисления, Услуга, УслугаОснование, СоставнаяУслуга, ТипНачисления",
				                                                  Начисление.ЛицевойСчет, Начисление.МесяцНачисления, Начисление.Услуга, Начисление.УслугаОснование, Начисление.СоставнаяУслуга, Начисление.ТипНачисления));
				Если Не Строка.Количество() = 0 Тогда
					Строка[0].СуммаЛьготы       = -Начисление.СуммаНачисления;
					Строка[0].Льготник          = Начисление.Льготник;
					Строка[0].ЛьготнаяКатегория = Начисление.ЛьготнаяКатегория;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если Не ЗаписатьОбъект(ДокументОбъект) Тогда
			ОбработчикВыполненУспешно = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ОбработчикВыполненУспешно Тогда
		ДобавитьСообщениеПользователю("Обработчик обновления ""ДополнитьТабличнуюЧастьКорректировкиНачисленийУчитывающиеЗависимыеУслугиЗависимымиУслугами"" не выполнен или выполнен с ошибками!", Истина, Истина);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет перенос телефонов жильцов в контактную информацию физ. лиц.
//
Процедура ВыполнитьПереносТелефоновЖильцовВФизЛица_3_0_67_5()
	
	ОбработчикВыполненУспешно = Истина;
	
	// 1. Получаем всех жильцов с телефонами и их физ. лица.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УПЖКХ_Жильцы.Ссылка КАК Жилец,
	|	УПЖКХ_Жильцы.УдалитьТелефон КАК Телефон,
	|	УПЖКХ_Жильцы.ФизЛицо КАК ФизЛицо
	|ИЗ
	|	Справочник.УПЖКХ_Жильцы КАК УПЖКХ_Жильцы
	|ГДЕ
	|	НЕ УПЖКХ_Жильцы.УдалитьТелефон = """"";
	
	ТаблицаЖильцовСТелефонами = Запрос.Выполнить().Выгрузить();
	
	Если Не ТаблицаЖильцовСТелефонами.Количество() = 0 Тогда
		
		// 2. Ищем контакнтую информацию по физ. лицам жильцов.
		МассивФизЛиц = ТаблицаЖильцовСТелефонами.ВыгрузитьКолонку("ФизЛицо");
		
		МассивВидовКонтактнойИнформации = Новый Массив;
		МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица);
		МассивВидовКонтактнойИнформации.Добавить(Справочники.ВидыКонтактнойИнформации.ТелефонРабочийФизическиеЛица);
		
		ТаблицаКИФизЛиц = УПЖКХ_ТиповыеМетодыСервер.КонтактнаяИнформацияОбъектов(МассивФизЛиц,, МассивВидовКонтактнойИнформации);
		ТаблицаКИФизЛиц.Индексы.Добавить("Объект, Представление");
		
		// 3. Пробуем парсить телефоны жильцов и отфильтровывать жильцов,
		// у которых номер совпадает с номером физ.лица.
		
		ТаблицаРазличныхТелефонов = ТаблицаЖильцовСТелефонами.СкопироватьКолонки();
		
		СтруктураПоиска = Новый Структура("Объект, Представление");
		
		Для каждого ТекСтрокаЖильца из ТаблицаЖильцовСТелефонами Цикл
			
			СтрокаТелефона         = ТекСтрокаЖильца.Телефон;
			МассивТелефоновВСтроке = СтрРазделить(СтрокаТелефона, ";,|/", Ложь);
			СтруктураПоиска.Объект = ТекСтрокаЖильца.ФизЛицо;
			
			Для Каждого ТекТелефон из МассивТелефоновВСтроке Цикл
				
				ПредставлениеТелефона         = СокрЛП(ТекТелефон);
				СтруктураПоиска.Представление = ПредставлениеТелефона;
				
				НайденныеСтроки = ТаблицаКИФизЛиц.НайтиСтроки(СтруктураПоиска);
				
				Если НайденныеСтроки.Количество() = 0 Тогда
					
					НоваяСтрока = ТаблицаРазличныхТелефонов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаЖильца);
					
					НоваяСтрока.Телефон = ПредставлениеТелефона;
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Если нет телефонов для добавления - не продолжаем.
		Если Не ТаблицаРазличныхТелефонов.Количество() = 0 Тогда
			
			// 4. Определяем необходимость включения возможности добавления нескольких номеров телефонов для жильцов.
			// Включаем настройку, если:
			// - у каких-то физ. лиц уже заполнен домашний телефон.
			// - у какого-то жильца несколько номеров телефонов.
			
			ВключитьВозможностьХраненияНесколькихДомашнихТелефоновДляФизЛиц = Ложь;
			
			ПервыйДомашнийТелефон = ТаблицаКИФизЛиц.Найти(Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица, "Вид");
			
			Если ПервыйДомашнийТелефон = Неопределено Тогда
				
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ
				|	ТаблицаТелефоновЖильцов.Жилец КАК Жилец,
				|	ТаблицаТелефоновЖильцов.Телефон КАК Телефон,
				|	ТаблицаТелефоновЖильцов.ФизЛицо КАК ФизЛицо
				|ПОМЕСТИТЬ втТаблицаТелефоновЖильцов
				|ИЗ
				|	&ТаблицаТелефоновЖильцов КАК ТаблицаТелефоновЖильцов
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	втТаблицаТелефоновЖильцов.Жилец КАК Жилец,
				|	КОЛИЧЕСТВО(втТаблицаТелефоновЖильцов.Телефон) КАК КоличествоТелефонов
				|ПОМЕСТИТЬ втКоличестваТелефонов
				|ИЗ
				|	втТаблицаТелефоновЖильцов КАК втТаблицаТелефоновЖильцов
				|
				|СГРУППИРОВАТЬ ПО
				|	втТаблицаТелефоновЖильцов.Жилец
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	втКоличестваТелефонов.Жилец КАК Жилец,
				|	втКоличестваТелефонов.КоличествоТелефонов КАК КоличествоТелефонов
				|ИЗ
				|	втКоличестваТелефонов КАК втКоличестваТелефонов
				|ГДЕ
				|	втКоличестваТелефонов.КоличествоТелефонов > 1";
				
				Запрос.УстановитьПараметр("ТаблицаТелефоновЖильцов", ТаблицаРазличныхТелефонов);
				
				ВключитьВозможностьХраненияНесколькихДомашнихТелефоновДляФизЛиц = Не Запрос.Выполнить().Пустой();
				
			Иначе
				
				ВключитьВозможностьХраненияНесколькихДомашнихТелефоновДляФизЛиц = Истина;
				
			КонецЕсли;
			
			// 5. Включаем возможность хранения нескольких домашних телефонов, если нужно.
			Если ВключитьВозможностьХраненияНесколькихДомашнихТелефоновДляФизЛиц Тогда
				
				ОбъектКИ = Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица.ПолучитьОбъект();
				ОбъектКИ.РазрешитьВводНесколькихЗначений = Истина;
				
				Если Не ЗаписатьОбъект(ОбъектКИ) Тогда
					ОбработчикВыполненУспешно = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			// 6. Переносим КИ в физ. лица.
			Если ОбработчикВыполненУспешно Тогда
				Попытка
					Для каждого ТекСтрокаТелефона из ТаблицаРазличныхТелефонов Цикл
						КИТелефона = УправлениеКонтактнойИнформациейСлужебныйВызовСервера.КонтактнаяИнформацияПоПредставлению(ТекСтрокаТелефона.Телефон, Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица);
						УправлениеКонтактнойИнформацией.ДобавитьКонтактнуюИнформацию(ТекСтрокаТелефона.ФизЛицо, КИТелефона, Справочники.ВидыКонтактнойИнформации.ТелефонДомашнийФизическиеЛица,, Ложь);
					КонецЦикла;
				Исключение
					ОбработчикВыполненУспешно = Ложь;
				КонецПопытки;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ОбработчикВыполненУспешно Тогда
		ДобавитьСообщениеПользователю("Обработчик обновления ""ВыполнитьПереносТелефоновЖильцовВФизЛица_3_0_67_5"" не выполнен или выполнен с ошибками!", Истина, Истина);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет новый реквизит "ВариантНачисленияУслуги" справочника "Услуги".
// Реквизит заполняется на основе старого реквизита "ВариантНачисленияПоПУ".
Процедура ЗаполнитьРеквизитВариантНачисленияУслуги_3_0_67_9()
	
	ОбработчикВыполненУспешно = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_Услуги.Ссылка КАК Ссылка,
	|	КВП_Услуги.УдалитьВариантНачисленияПоПУ КАК УдалитьВариантНачисленияПоПУ
	|ИЗ
	|	Справочник.КВП_Услуги КАК КВП_Услуги
	|ГДЕ
	|	НЕ КВП_Услуги.УдалитьВариантНачисленияПоПУ = """"
	|	И КВП_Услуги.ВариантыНачисленияУслуги = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВариантыНачисленияУслуги.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ВариантыНачисленияУслуги = Перечисления.УПЖКХ_ВариантыНачисленияУслуги.ПустаяСсылка();
		
		Если Выборка.УдалитьВариантНачисленияПоПУ = "307" Тогда
			ВариантыНачисленияУслуги = Перечисления.УПЖКХ_ВариантыНачисленияУслуги.Постановление307;
		ИначеЕсли Выборка.УдалитьВариантНачисленияПоПУ = "344" Тогда
			ВариантыНачисленияУслуги = Перечисления.УПЖКХ_ВариантыНачисленияУслуги.Постановление344;
		ИначеЕсли Выборка.УдалитьВариантНачисленияПоПУ = "354" Тогда
			ВариантыНачисленияУслуги = Перечисления.УПЖКХ_ВариантыНачисленияУслуги.Постановление354;
		ИначеЕсли Выборка.УдалитьВариантНачисленияПоПУ = "РучнаяНастройка" Тогда
			ВариантыНачисленияУслуги = Перечисления.УПЖКХ_ВариантыНачисленияУслуги.РучнаяНастройка;
		КонецЕсли;
		
		УслугаОбъект = Выборка.Ссылка.ПолучитьОбъект();
		УслугаОбъект.ВариантыНачисленияУслуги = ВариантыНачисленияУслуги;
		
		Если Не КВП_ЗаписатьОбъект(УслугаОбъект) Тогда
			ОбработчикВыполненУспешно = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ОбработчикВыполненУспешно Тогда
		ДобавитьСообщениеПользователю("Обработчик обновления ""ЗаполнитьРеквизитВариантНачисленияУслуги_3_0_67_9"" не выполнен или выполнен с ошибками!", Истина, Истина);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Изменяет регламентное задание загрузки показаний и добавляет регламентное задание загрузки оплат
// для обмена с сервисом "ЖКХ: Личный кабинет".
//
Процедура УстановитьРасписаниеЗагрузкиОплатИзЖКХЛичныйКабинет_3_0_68_3()
	
	ОбработчикВыполненУспешно = Истина;
	
	Попытка
		
		// 1. Получаем сохраненные настройки обмена с "ЖКХ: Личный кабинет".
		СохраненнаяНастройка = Константы.УПЖКХ_НастройкаАвтоматическогоОбменаДаннымиСМобильнымПриложением.Получить().Получить();
		
		// 2. Проверяем отсутствие регл. задания загрузки оплат и наличие загрузки показаний.
		Если ТипЗнч(СохраненнаяНастройка) = Тип("Структура") И Не СохраненнаяНастройка.Свойство("ИдентификаторРегламентногоЗаданияЗагрузокОплаты") Тогда
			
			// 3. Получаем идентификатор регламентного задания загрузок показаний.
			ИдентификаторРегламентногоЗаданияЗагрузокПоказания = Неопределено;
			ИдентификаторРегламентногоЗаданияЗагрузокОплаты    = Неопределено;
			
			СохраненнаяНастройка.Свойство("ИдентификаторРегламентногоЗаданияЗагрузок", ИдентификаторРегламентногоЗаданияЗагрузокПоказания);
			
			// 4. Если идентификатор заполнен - продолжаем.
			Если Не ИдентификаторРегламентногоЗаданияЗагрузокПоказания = Неопределено Тогда
				
				// Переполучаем настройки штатным механизмом, чтобы были заполнены все параметры по умолчанию.
				СохраненнаяНастройка = УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеСБазой.ПолучитьНастройкуАвтоматическогоОбменаСМобильнымПриложением();
				
				РегламентныеЗаданияСлужебный.ВызватьИсключениеЕслиНетПраваАдминистрирования();
				УстановитьПривилегированныйРежим(Истина);
				
				// 5. Получаем регламентное задание загрузки показаний и, если оно заполнено, перезаполняем его
				// наименование и массив параметров.
				РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторРегламентногоЗаданияЗагрузокПоказания);
				
				Если Не РегламентноеЗадание = Неопределено Тогда
					
					РегламентноеЗадание.Наименование = "Обмен с мобильным приложением: загрузка показаний счетчиков с сервера";
					
					РегламентноеЗадание.Параметры.Очистить();
					РегламентноеЗадание.Параметры.Добавить(Перечисления.УПЖКХ_ВидыРегламентныхЗаданийИнтеграцииСМобильнымПриложением.ЗагрузкаПоказанийССервера);
					
					Если Не КВП_ЗаписатьОбъект(РегламентноеЗадание) Тогда
						ВызватьИсключение "";
					КонецЕсли;
					
					// 6. Если регламентное задание загрузки показаний используется, заполняем аналогично
					// регламентное задание загрузки оплат.
					Если Не РегламентноеЗадание = Неопределено И РегламентноеЗадание.Использование Тогда
						
						ОбъектЗадания = РегламентныеЗадания.СоздатьРегламентноеЗадание("УПЖКХ_ОбменДаннымиСМобильнымПриложением");
						
						// 7. Запишем регламентное задание.
						МассивПараметровРеглЗадания = Новый Массив;
						МассивПараметровРеглЗадания.Добавить(Перечисления.УПЖКХ_ВидыРегламентныхЗаданийИнтеграцииСМобильнымПриложением.ЗагрузкаОплатССервера);
						
						ОбъектЗадания.Наименование  = "Обмен с мобильным приложением: загрузка оплат с сервера";
						ОбъектЗадания.Параметры     = МассивПараметровРеглЗадания;
						ОбъектЗадания.Использование = Истина;
						
						ЗаполнитьЗначенияСвойств(ОбъектЗадания.Расписание, РегламентноеЗадание.Расписание);
						
						Если Не КВП_ЗаписатьОбъект(ОбъектЗадания) Тогда
							ВызватьИсключение "";
						КонецЕсли;
						
						ИдентификаторРегламентногоЗаданияЗагрузокОплаты = ОбъектЗадания.УникальныйИдентификатор;
						
					КонецЕсли;
				КонецЕсли;
				
				// 8. Сохраним настройки.
				СохраненнаяНастройка.Вставить("ИдентификаторРегламентногоЗаданияЗагрузокОплаты",    ИдентификаторРегламентногоЗаданияЗагрузокОплаты);
				СохраненнаяНастройка.Вставить("ИдентификаторРегламентногоЗаданияЗагрузокПоказания", ИдентификаторРегламентногоЗаданияЗагрузокПоказания);
				УПЖКХ_ИнтеграцияСМобильнымПриложениемВзаимодействиеСБазой.УстановитьНастройкуАвтоматическогоОбменаДаннымиСМобильнымПриложением(СохраненнаяНастройка);
				
			КонецЕсли;
		КонецЕсли;
	Исключение
		ОбработчикВыполненУспешно = Ложь;
	КонецПопытки;
	
	Если Не ОбработчикВыполненУспешно Тогда
		ДобавитьСообщениеПользователю("Обработчик обновления ""УстановитьРасписаниеЗагрузкиОплатИзЖКХЛичныйКабинет_3_0_67_10"" не выполнен или выполнен с ошибками!", Истина, Истина);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли