#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ВАЖНЫМИ ОПОВЕЩЕНИЯМИ
//
// Данный блок должен быть доступен не только на клиенте, но и на сервере,
// так как используется в управляемой форме "Важные оповещения".
//

#Область РаботаСВажнымиОповещениями

// Функция выполняет обработчик важного оповещения.
//
Функция ВыполнитьОбработкуВажногоОповещения(Обработчик) Экспорт
	
	Результат          = Неопределено;
	ОбработчикВыполнен = Ложь;
	
	Попытка
		Выполнить("Результат = " + Обработчик +  "();");
		ОбработчикВыполнен = Истина;
	Исключение
	КонецПопытки;
	
	РезультатВыполнения = Новый Структура;
	РезультатВыполнения.Вставить("ОбработчикВыполнен", ОбработчикВыполнен);
	РезультатВыполнения.Вставить("Результат",          Результат);
	
	Возврат РезультатВыполнения;
	
КонецФункции

#КонецОбласти

//////////////////////////////////////////
// Ошибки списания расходов ОПУ при
// начисление услуг.

#Область РаботаСОшибкамиВНачисленииУслуг

// Процедура формирования отчета об ошибках списания расхода ОПУ.
//
Функция Оповещения_ОшибкиСписанияРасходовОПУ() Экспорт
	
	ДокументРезультат = Новый ТабличныйДокумент;
	
	СписокДокументов = Оповещения_ПолучитьСписокДокументовНачисленияСОшибкойСписанияРасходовОПУ();
	
	Если СписокДокументов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Макет = ПолучитьМакет("МакетОшибкиСписанияРасходаОПУ");
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьСтрокаТЧ = Макет.ПолучитьОбласть("СтрокаТЧ");
	
	ОбластьШапка.Параметры.ТекстПредупреждения =
	"Внимание!
	|Обнаружены документы «Начисление услуг», в которых найдены неверные движения
	| по списанию расхода общедомовых приборов учета. В связи с этим необходимо:
	|1. Выполнить сохранение архивной копии информационной базы.
	|2. Перепровести документы, указанные в данном отчете.
	|
	|При возникновении затруднений обратитесь на нашу линию технической поддержки за помощью."
	+ УПЖКХ_ИнформацияОРазработчикеИПрограмме.КонтактыДляОбратнойСвязиСтрокой();
	ДокументРезультат.Вывести(ОбластьШапка);
	
	НомерСтроки = 1;
	
	Для Каждого ТекДокумент Из СписокДокументов Цикл
		
		ОбластьСтрокаТЧ.Параметры.НомерСтроки        = НомерСтроки;
		ОбластьСтрокаТЧ.Параметры.ДокументНачисления = ТекДокумент;
		
		ДокументРезультат.Вывести(ОбластьСтрокаТЧ);
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	ДокументРезультат.ТолькоПросмотр = Истина;
	
	Возврат ПоместитьВоВременноеХранилище(ДокументРезультат, Новый УникальныйИдентификатор);
	
КонецФункции

// Функция возвращает таблицу документов
Функция Оповещения_ПолучитьСписокДокументовНачисленияСОшибкойСписанияРасходовОПУ() Экспорт
	
	СписокДокументов = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_НачислениеУслуг.Ссылка
	|ИЗ
	|	Документ.КВП_НачислениеУслуг КАК КВП_НачислениеУслуг
	|ГДЕ
	|	КВП_НачислениеУслуг.ВидОперации = ЗНАЧЕНИЕ(Перечисление.КВП_ВидыОперацийНачисленияУслуг.НачисленияПоПоказаниямПУ)
	|	И КВП_НачислениеУслуг.Проведен
	|	И КВП_НачислениеУслуг.СписыватьРасходПУПоТаблицеСчетчиков";
	
	ВыборкаРезультат = Запрос.Выполнить().Выбрать();
	
	НаборЗаписейРегистра = РегистрыНакопления.УПЖКХ_РасчетПриборовУчета.СоздатьНаборЗаписей();
	
	Пока ВыборкаРезультат.Следующий() Цикл
		
		ДокументСсылка = ВыборкаРезультат.Ссылка;
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
		
		// 1. Получаем движения документа.
		НаборЗаписейРегистра.Отбор.Регистратор.Установить(ДокументСсылка);
		НаборЗаписейРегистра.Прочитать();
		ТаблицаДвиженийДокумента = НаборЗаписейРегистра.Выгрузить(, "Объект, Счетчик, Услуга, ВидПоказания");
		
		// 2. Получаем остатки показаний и проверяем, есть ли движения по списанию остатков.
		// Если движений по списанию нет, то документ с ошибкой.
		ТаблицаОбъектов = Оповещения_ПолучитьТаблицуОбъектовРасчетаПоказанийПУ(ДокументОбъект.УслугиПоПоказаниямПУ.ВыгрузитьКолонку("ЛицевойСчет"));
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаДвиженийДокумента.Объект,
		|	ТаблицаДвиженийДокумента.Счетчик,
		|	ТаблицаДвиженийДокумента.Услуга,
		|	ТаблицаДвиженийДокумента.ВидПоказания
		|ПОМЕСТИТЬ врТаблицаДвиженийДокумента
		|ИЗ
		|	&ТаблицаДвиженийДокумента КАК ТаблицаДвиженийДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	УПЖКХ_РасчетПриборовУчетаОбороты.Объект КАК Объект,
		|	УПЖКХ_РасчетПриборовУчетаОбороты.Счетчик КАК Счетчик,
		|	УПЖКХ_РасчетПриборовУчетаОбороты.Услуга,
		|	УПЖКХ_РасчетПриборовУчетаОбороты.ВидПоказания КАК ВидПоказания,
		|	УПЖКХ_РасчетПриборовУчетаОбороты.ПоказаниеОстаток КАК Показание,
		|	ЕСТЬNULL(врТаблицаДвиженийДокумента.Объект, ЛОЖЬ) КАК ЕстьДвижениеПоСписанию
		|ПОМЕСТИТЬ врТаблицаОстатковСДвижениями
		|ИЗ
		|	РегистрНакопления.УПЖКХ_РасчетПриборовУчета.Остатки(
		|			&Период,
		|			Услуга В (&СписокУслуг)
		|				И Объект В (&СпОбъектов)) КАК УПЖКХ_РасчетПриборовУчетаОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ врТаблицаДвиженийДокумента КАК врТаблицаДвиженийДокумента
		|		ПО УПЖКХ_РасчетПриборовУчетаОбороты.Объект = врТаблицаДвиженийДокумента.Объект
		|			И УПЖКХ_РасчетПриборовУчетаОбороты.Счетчик = врТаблицаДвиженийДокумента.Счетчик
		|			И УПЖКХ_РасчетПриборовУчетаОбороты.Услуга = врТаблицаДвиженийДокумента.Услуга
		|			И УПЖКХ_РасчетПриборовУчетаОбороты.ВидПоказания = врТаблицаДвиженийДокумента.ВидПоказания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	врТаблицаОстатковСДвижениями.Объект,
		|	врТаблицаОстатковСДвижениями.Счетчик,
		|	врТаблицаОстатковСДвижениями.Услуга,
		|	врТаблицаОстатковСДвижениями.ВидПоказания,
		|	врТаблицаОстатковСДвижениями.Показание,
		|	врТаблицаОстатковСДвижениями.ЕстьДвижениеПоСписанию
		|ИЗ
		|	врТаблицаОстатковСДвижениями КАК врТаблицаОстатковСДвижениями
		|ГДЕ
		|	врТаблицаОстатковСДвижениями.ЕстьДвижениеПоСписанию = ЛОЖЬ";
		
		Запрос.УстановитьПараметр("Период",      Новый Граница(ДокументОбъект.Дата, ВидГраницы.Включая));
		Запрос.УстановитьПараметр("СписокУслуг", ДокументОбъект.УслугиПоПоказаниямПУ.ВыгрузитьКолонку("Услуга"));
		Запрос.УстановитьПараметр("СпОбъектов",  ТаблицаОбъектов.ВыгрузитьКолонку("Объект"));
		Запрос.УстановитьПараметр("ТаблицаДвиженийДокумента", ТаблицаДвиженийДокумента);
		
		ВыборкаОстатков = Запрос.Выполнить().Выбрать();
		
		Если ВыборкаОстатков.Следующий() Тогда
			СписокДокументов.Добавить(ДокументСсылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокДокументов;
	
КонецФункции

// Получает таблицу объектов(лицевые счета, помещения, подъезды, здание) для расчета показаний по ПУ.
//
// Параметры
//  ТаблицаЛС  - таблица лицевых счетов в здании, для которых назначена выбранная услуга.
//
// Возвращаемое значение:
//  ТаблицаОбъектов - таблица объектов для расчета показаний по ПУ.
//
Функция Оповещения_ПолучитьТаблицуОбъектовРасчетаПоказанийПУ(СписокЛС) Экспорт
	
	ТаблицаОбъектов = Новый ТаблицаЗначений;
	ТаблицаОбъектов.Колонки.Добавить("Объект", 
									 Новый ОписаниеТипов("СправочникСсылка.УПЖКХ_Помещения,
														 |СправочникСсылка.КВП_Подъезды,
														 |СправочникСсылка.КВП_Здания"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КВП_ЛицевыеСчета.Адрес КАК Помещение,
	|	КВП_ЛицевыеСчета.Адрес.Подъезд КАК Подъезд,
	|	КВП_ЛицевыеСчета.Адрес.Владелец КАК Здание
	|ИЗ
	|	Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|ГДЕ
	|	КВП_ЛицевыеСчета.Ссылка В(&СписокЛС)";
	
	Запрос.УстановитьПараметр("СписокЛС", СписокЛС);
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекСтрока Из ТаблицаРезультат Цикл
		
		// Помещение
		НоваяСтрока = ТаблицаОбъектов.Добавить();
		НоваяСтрока.Объект = ТекСтрока.Помещение;
		
		// Подъезд
		НоваяСтрока = ТаблицаОбъектов.Добавить();
		НоваяСтрока.Объект = ТекСтрока.Подъезд;
		
		// Здание
		НоваяСтрока = ТаблицаОбъектов.Добавить();
		НоваяСтрока.Объект = ТекСтрока.Здание;
		
	КонецЦикла;
	
	ТаблицаОбъектов.Свернуть("Объект");
	
	Возврат ТаблицаОбъектов;
	
КонецФункции // ПолучитьТаблицуОбъектовРасчетаПоказанийПоПУ()

#КонецОбласти

#КонецЕсли
