
///////////////////////////////////////////////////////////////////////////////
// ОПИСАНИЕ МЕХАНИЗМА ОБНОВЛЕНИЯ ИБ
//
// Данная форма отрывается с помощью стандартного механизма обработки событий
// при запуске системы. В форме стартует процесс обновления ИБ в фоновом задании
// статус которого периодически отслеживается с помощью механизма длительных
// операций. По завершению обновления или неудачного обновления либо открывается
// форма результатов неудачного обновления, либо текущая форма закрывается,
// а управляющим процедурам запуска программы передаются дополнительные признаки,
// определяющие успешность обновления или необходимость перезапуска программы.

#Область ВспомогательныеПроцедурыИФункции

&НаКлиенте
// Процедура выполняет перезапуск системы с блокировкой регламентных заданий.
Процедура ПерезапускСБлокировкойВыполненияРегламентныхЗаданий()
	
	НовыйПараметрЗапуска = ПараметрЗапуска + ";РегламентныеЗаданияОтключены";
	НовыйПараметрЗапуска = "/AllowExecuteScheduledJobs -Off " + "/C """ + НовыйПараметрЗапуска + """";
	ПрекратитьРаботуСистемы(Истина, НовыйПараметрЗапуска);
	
КонецПроцедуры

&НаСервере
// Процедура снимает блокировку с информационной базы.
Процедура СнятьБлокировкуСФайловойБазы()
	
	// Снятие монопольного режима.
	УПЖКХ_ТиповыеМетодыСервер.РазблокироватьИБ(БлокировкаИБ);
	
	// Разрешение работы пользователей в файловой базе.
	СнятьБлокировкуФайловойБазы = Ложь;
	Если БлокировкаИБ.Свойство("СнятьБлокировкуФайловойБазы", СнятьБлокировкуФайловойБазы) Тогда
		
		Если СнятьБлокировкуФайловойБазы Тогда
			УПЖКХ_ТиповыеМетодыСервер.ПриСнятииБлокировкиФайловойБазы();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура открывает форму ошибки установки монопольного доступа.
Процедура ОбновитьИнформационнуюБазуПриОшибкеУстановкиМонопольногоРежима(ДополнительныеПараметры)
	
	// Открытие формы для отключения активных сеансов.
	Оповещение = Новый ОписаниеОповещения("ОбновитьИнформационнуюБазуПриОшибкеУстановкиМонопольногоРежимаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ЗавершениеРаботыПользователей") Тогда
		МодульСоединенияИБКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("СоединенияИБКлиент");
		МодульСоединенияИБКлиент.ПриОткрытииФормыОшибкиУстановкиМонопольногоРежима(Оповещение);
	Иначе
		СообщениеОНеудачномОбновлении(ДополнительныеПараметры, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработка завершения работы с формой ошибки блокировки ИБ.
Процедура ОбновитьИнформационнуюБазуПриОшибкеУстановкиМонопольногоРежимаЗавершение(Отказ, ДополнительныеПараметры) Экспорт
	
	// Если отказываемся от дальнейшей работы, то закрываем форму.
	Если Отказ <> Ложь Тогда
		ЗакрытьФорму(Истина, Ложь);
		Возврат;
	КонецЕсли;
	
	// Новая попытка обновления ИБ.
	НачатьОбновлениеИнформационнойБазы();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Устанавливаем признак выполнения обновления ИБ.
	ВыполняетсяОбновлениеВерсииИБ = Истина;
	
	// Получение параметров ИБ перед обновлением.
	ПараметрыИБ = УПЖКХ_ОбновлениеИнформационнойБазыВызовСервера.ПолучитьПараметрыИБ();
	
	// Определим вариант обновления программы.
	Если ПараметрыИБ.КВП_НомерВерсииПодсистемыКВП = "" Тогда
		ЭтоПервыйЗапускПрограммы = Истина;
	Иначе
		ЭтоПервыйЗапускПрограммы = Ложь;
	КонецЕсли;
	
	// Установим текущую страницу формы в зависимости от варианта обновления.
	Если ЭтоПервыйЗапускПрограммы Тогда
		Заголовок = НСтр("ru = 'Начальное заполнение данных'");
		Элементы.ГруппаВариантОбновления.ТекущаяСтраница = Элементы.ГруппаНачальноеЗаполнение;
	Иначе
		Заголовок = НСтр("ru = 'Обновление версии программы'");
		Элементы.ТекстСообщенияОбновляемаяКонфигурация.Заголовок = СтрШаблон(
			Элементы.ТекстСообщенияОбновляемаяКонфигурация.Заголовок, Метаданные.Синоним, Метаданные.Версия);
		Элементы.ГруппаВариантОбновления.ТекущаяСтраница = Элементы.ГруппаОбновлениеВерсииПрограммы;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	// Запрет закрытия формы, если обновление ИБ еще не завершено.
	Если ЗавершениеРаботы ИЛИ ВыполняетсяОбновлениеВерсииИБ Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик нажатия гиперссылки "ТехническаяИнформация".
//
Процедура ТехническаяИнформацияНажатие(Элемент)
	
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ЗапускатьНеВФоне", Истина);
	ПараметрыОтбора.Вставить("ДатаНачала", ВремяНачалаОбновления);
	УПЖКХ_ТиповыеМетодыКлиент.ОткрытьЖурналРегистрации(ПараметрыОтбора);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыОбновленияИнформационнойБазы

&НаКлиенте
// Процедура инициирует обновление ИБ.
//
Процедура ОбновитьИнформационнуюБазу() Экспорт
	
	ПодключитьОбработчикОжидания("НачатьОбновлениеИнформационнойБазы", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
// Процедура старта обновления ИБ.
Процедура НачатьОбновлениеИнформационнойБазы()
	
	ВремяНачалаОбновления = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	// Запуск процесса обновления ИБ в фоне.
	РезультатОбновленияИБ = ОбновитьИнформационнуюБазуВФоне();
	
	// Если обновление завершилось сразу же, то переходим к обработке результата.
	Если Не РезультатОбновленияИБ.Свойство("АдресРезультата") Тогда
		ЗавершитьОбновлениеИнформационнойБазы(РезультатОбновленияИБ, Неопределено);
		Возврат;
	КонецЕсли;
	
	// Подключаем обработчики ожидания завершения обновления.
	ПроцедураПродолжения = "ЗавершитьОбновлениеИнформационнойБазы";
	ОповещениеОЗавершении = Новый ОписаниеОповещения(ПроцедураПродолжения, ЭтотОбъект);
	ПараметрыОжидания = УПЖКХ_ТиповыеМетодыКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	// При необходимости можно будет подключить прогресс.
	//ПараметрыОжидания.ВыводитьПрогрессВыполнения = Истина;
	//ПараметрыОжидания.ОповещениеОПрогрессеВыполнения = Новый ОписаниеОповещения("ПрогрессОбновленияИнформационнойБазы", ЭтотОбъект);
	
	ПараметрыОжидания.ВыводитьСообщения = Истина;
	УПЖКХ_ТиповыеМетодыКлиент.ОжидатьЗавершение(РезультатОбновленияИБ, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
// Процедура запуска обновления ИБ в фоне на сервере.
Функция ОбновитьИнформационнуюБазуВФоне()
	
	// Определяем параметры блокировки ИБ перед началом обновления.
	БлокировкаИБ = Новый Структура;
	БлокировкаИБ.Вставить("СнятьБлокировкуФайловойБазы", Истина);
	БлокировкаИБ.Вставить("Ошибка",                      "");
	БлокировкаИБ.Вставить("РежимОтладки",                Ложь);
	БлокировкаИБ.Вставить("КлючЗаписи",                  Неопределено);
	
	// Установка монопольного режима для обновления информационной базы.
	// Блокировка информационной базы реализована следующим образом:
	// 1. При старте обновления в фоне выполняется попытка заблокировать ИБ.
	// 2. Если блокировка не удалась, а ИБ файловая, то сначала выполняется перезапуск сеанса
	// с блокировкой регламентных заданий, а затем, при повторной неудаче, открывается окно блокировки
	// работы пользователей. Если активные сеансы в итоге отключены, то возникает повторная попытка обновления
	// и блокировки ИБ.
	// 3. Для клиент-серверного режима работы блокировка ИБ просто выполняется, и если блокировка не установлена,
	// то обновление прекращается.
	// 4. По окончании обновления блокировки ИБ снимаются.
	Попытка
		ОбщегоНазначения.ЗаблокироватьИБ();
	Исключение
		
		БазаФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
		Если БазаФайловая Тогда
			
			ПараметрЗапускаКлиента = ПараметрыСеанса.ПараметрыКлиентаНаСервере.Получить("ПараметрЗапуска");
			Если СтрНайти(ПараметрЗапускаКлиента, "РегламентныеЗаданияОтключены") = 0 Тогда
				БлокировкаИБ.Ошибка = "ЗаблокироватьВыполнениеРегламентныхЗаданий";
			Иначе
				БлокировкаИБ.Ошибка = "ОшибкаУстановкиМонопольногоРежима";
			КонецЕсли;
		КонецЕсли;
		
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		Результат = Новый Структура;
		Результат.Вставить("Статус",                       "Ошибка");
		Результат.Вставить("КраткоеПредставлениеОшибки",   КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		Результат.Вставить("ПодробноеПредставлениеОшибки", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		Возврат Результат;
		
	КонецПопытки;
	
	// Запуск фонового задания.
	ПараметрыВыполнения = УПЖКХ_ТиповыеМетодыСервер.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	ПараметрыВыполнения.ОжидатьЗавершение = 0;
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Фоновое обновление информационной базы ЖКХ'");
	
	Результат = УПЖКХ_ТиповыеМетодыСервер.ВыполнитьВФоне("УПЖКХ_ОбновлениеИнформационнойБазыВызовСервера.ВыполнитьОбновлениеИнформационнойБазы", ПараметрыИБ, ПараметрыВыполнения);
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
// Обработка завершения обновления ИБ.
Процедура ЗавершитьОбновлениеИнформационнойБазы(Результат, ДополнительныеПараметры) Экспорт
	
	// Параметры результатов обновления ИБ, которые нужны при завершении обновления.
	ДополнительныеПараметры = Новый Структура;
	
	// Если обновление выполнено успешно, обработаем его результаты.
	Если Не Результат = Неопределено Тогда
		
		Если Результат.Статус = "Выполнено" Тогда
			
			// Получение результатов обновления из временного хранилища.
			СтруктураРезультатаОбновления = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
			
			// Обработка результатов и открытие дополнительных информационных окон.
			Если ТипЗнч(СтруктураРезультатаОбновления) = Тип("Структура") Тогда
				
				// Проверка фактического выполнения обновления информационной базы.
				ПараметрыИБ = УПЖКХ_ОбновлениеИнформационнойБазыВызовСервера.ПолучитьПараметрыИБ();
				Если ПараметрыИБ.КВП_НомерВерсииПодсистемыКВП <> ПараметрыИБ.КВП_НомерВерсииКВПВМетаданных Тогда
					
					// Если ИБ не обновлена, то устанавливаем признак ошибки обновления,
					// а далее автоматически откроется форма результата неудачного обновления.
					ДополнительныеПараметры.Вставить("КраткоеСообщениеОбОшибке", "Не удалось выполнить обновление версии конфигурации ЖКХ.");
					
					// Если возникала ошибка перехода с редакции 2.0, дополним подробную информацию об ошибке.
					Если СтруктураРезультатаОбновления.Свойство("ОшибкаПереходаСРедакции20") Тогда
						ДополнительныеПараметры.Вставить("ПодробноеСообщениеОбОшибке", "Исходная версия конфигурации не предназначена для перехода на редакцию 3.0.");
					КонецЕсли;
					
				КонецЕсли;
				
				// Передадим структуру результата в процедуру завершения обновления. Результаты обновления
				// можно будет посмотреть как при успешном обновлении, так и при неудачном обновлении.
				ДополнительныеПараметры.Вставить("СтруктураРезультатаОбновления", СтруктураРезультатаОбновления);
				
			КонецЕсли;
			
		Иначе
			
			ПризнакВыполненияОбработчиков = БлокировкаИБ.Ошибка;
			
		КонецЕсли;
		
	Иначе
		
		ПризнакВыполненияОбработчиков = БлокировкаИБ.Ошибка;
		
	КонецЕсли;
	
	// Используется для файловой базы.
	Если ПризнакВыполненияОбработчиков = "ЗаблокироватьВыполнениеРегламентныхЗаданий" Тогда
		ПерезапускСБлокировкойВыполненияРегламентныхЗаданий();
		Возврат;
		
	// Используется для файловой базы.
	ИначеЕсли ПризнакВыполненияОбработчиков = "ОшибкаУстановкиМонопольногоРежима" Тогда
		ОбновитьИнформационнуюБазуПриОшибкеУстановкиМонопольногоРежима(ДополнительныеПараметры);
		Возврат;
		
	КонецЕсли;
	
	// Снятие блокировки с информационной базы, снятие блокировки выполняется всегда.
	СнятьБлокировкуСФайловойБазы();
	
	// Сбор сводных результатов обновления и переход к обработке завершения обновления.
	ДополнительныеПараметры.Вставить("ДокументОписаниеОбновлений", Неопределено);
	// Сообщение об ошибке уже может быть определено ранее.
	Если Не ДополнительныеПараметры.Свойство("КраткоеСообщениеОбОшибке") Тогда
		ДополнительныеПараметры.Вставить("КраткоеСообщениеОбОшибке",   Результат.КраткоеПредставлениеОшибки);
	КонецЕсли;
	Если Не ДополнительныеПараметры.Свойство("ПодробноеСообщениеОбОшибке") Тогда
		ДополнительныеПараметры.Вставить("ПодробноеСообщениеОбОшибке", Результат.ПодробноеПредставлениеОшибки);
	КонецЕсли;
	ДополнительныеПараметры.Вставить("ВремяНачалаОбновления",      ВремяНачалаОбновления);
	ДополнительныеПараметры.Вставить("ВремяОкончанияОбновления",   ОбщегоНазначенияКлиент.ДатаСеанса());
	
	ОбновитьИнформационнуюБазуЗавершение(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
// Обработка завершения обновления ИБ.
Процедура ОбновитьИнформационнуюБазуЗавершение(ДополнительныеПараметры)
	
	// Обновим повторно используемые значения.
	ОбновитьПовторноИспользуемыеЗначения();
	
	// Структуру результата обновления необходимо передать процедуре завершения обновления,
	// так как в ней будут показаны пользователю результаты обновления.
	СтруктураРезультатаОбновления = Неопределено;
	ДополнительныеПараметры.Свойство("СтруктураРезультатаОбновления", СтруктураРезультатаОбновления);
	
	// Если есть информация об ошибке, то переходим к форме результатов неудачного обновления.
	Если ЗначениеЗаполнено(ДополнительныеПараметры.КраткоеСообщениеОбОшибке) Тогда
		
		ВремяОкончанияОбновления = УПЖКХ_ТиповыеМетодыКлиент.ДатаСеанса();
		СообщениеОНеудачномОбновлении(ДополнительныеПараметры, ВремяОкончанияОбновления);
		Возврат;
		
	КонецЕсли;
	
	// Закроем текущую форму, обновление выполнено успешно.
	ЗакрытьФорму(Ложь, Ложь, СтруктураРезультатаОбновления);
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняет переход к форме результатов неудачного обновления.
Процедура СообщениеОНеудачномОбновлении(ДополнительныеПараметры, ВремяОкончанияОбновления)
	
	// После закрытия формы неудачного обновления, нужно будет закрыть текущую форму,
	// для этого используем обработку оповещения.
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбновитьИнформационнуюБазуДействияПриОшибке", ЭтотОбъект);
	
	// Подготовка параметров и открытие формы.
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КраткоеСообщениеОбОшибке",       ДополнительныеПараметры.КраткоеСообщениеОбОшибке);
	ПараметрыФормы.Вставить("ПодробноеСообщениеОбОшибке",     ДополнительныеПараметры.ПодробноеСообщениеОбОшибке);
	ПараметрыФормы.Вставить("ВремяНачалаОбновления",          ВремяНачалаОбновления);
	ПараметрыФормы.Вставить("ВремяОкончанияОбновления",       ВремяОкончанияОбновления);
	
	// В параметры добавляем сообщения для пользователя. В типовой форме можно будет посмотреть результаты обновления.
	Если ДополнительныеПараметры.Свойство("СтруктураРезультатаОбновления") Тогда
		
		ПараметрыФормы.Вставить("МассивВажныхСообщенийДляВывода", ДополнительныеПараметры.СтруктураРезультатаОбновления.МассивВажныхСообщенийДляВывода);
		ПараметрыФормы.Вставить("МассивСообщенийДляВывода",       ДополнительныеПараметры.СтруктураРезультатаОбновления.МассивСообщенийДляВывода);
		
	КонецЕсли;
	
	// Используется типовая форма.
	ИмяОткрываемойФормы = "Обработка.РезультатыОбновленияПрограммы.Форма.СообщениеОНеудачномОбновлении";
	
	ОткрытьФорму(ИмяОткрываемойФормы, ПараметрыФормы,,,,,ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Обработка завершения работы с формой неудачного обновления.
Процедура ОбновитьИнформационнуюБазуДействияПриОшибке(ЗавершитьРаботу, ДополнительныеПараметры) Экспорт
	
	// Закрываем форму с признаками отказа и необходимости перезапуска программы,
	// которые могут быть установлены в форме неудачного обновления.
	Если ЗавершитьРаботу <> Ложь Тогда
		ЗакрытьФорму(Истина, Ложь);
	Иначе
		ЗакрытьФорму(Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура закрытия текущей формы.
Процедура ЗакрытьФорму(Отказ, Перезапустить, СтруктураРезультатаОбновления = Неопределено)
	
	// Отмечаем, что процесс обновления ИБ завершен или прерван.
	ВыполняетсяОбновлениеВерсииИБ = Ложь;
	
	// Закрываем форму, передаем служебные параметры управляющей процедуре.
	Закрыть(Новый Структура("Отказ, Перезапустить, СтруктураРезультатаОбновления", Отказ, Перезапустить, СтруктураРезультатаОбновления));
	
КонецПроцедуры

#КонецОбласти
