
////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ВспомогательныеПроцедурыИФункции

&НаСервере
// Процедура заполняет табличный документ информацией об ошибках на сервере.
Процедура ЗаполнитьТабличныйДокументИнформациейОбОшибкахНаСервере(ТабличныйДокумент)
	
	Обработки.Удалить_КВП_ОбновлениеИнформационнойБазы.Создать().ЗаполнитьТабличныйДокументИнформациейОбОшибках(ТабличныйДокумент);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события формы "ПриСозданииНаСервере".
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Заголовок = СтрШаблон(НСтр("ru = 'Что нового в конфигурации %1.'"), Метаданные.Синоним);
	
	// Установим заголовок, если он определен.
	Если Параметры.Свойство("ЗаголовокФормы")
		   И ЗначениеЗаполнено(Параметры.ЗаголовокФормы)Тогда
		Заголовок = Параметры.ЗаголовокФормы;
	КонецЕсли;
	
	// Вывод полного описания изменений системы.
	Если Параметры.Свойство("ПоказатьПолноеОписаниеИзмененийСистемы")
	   И Параметры.ПоказатьПолноеОписаниеИзмененийСистемы = Истина Тогда
		ОписаниеОбновлений.Очистить();
		ОписаниеОбновлений.Вывести(ПолучитьОбщийМакет("УПЖКХ_ОписаниеИзмененийСистемы"));
		Возврат;
	КонецЕсли;
	
	// Вывод табличного документа, переданного в параметрах формы.
	Если Параметры.Свойство("ДополнительнаяИнформация")
	   И ТипЗнч(Параметры.ДополнительнаяИнформация) = Тип("ТабличныйДокумент") Тогда
		ОписаниеОбновлений.Очистить();
		ОписаниеОбновлений.Вывести(Параметры.ДополнительнаяИнформация);
		Возврат;
	КонецЕсли;
	
	// Если нет готовых описаний, то выведем описание обработчикам, выполненным в процессе обновления.
	СписокОбработчиков = Неопределено;
	Если Не Параметры.Свойство("ВыполненныеОбработчикиОбновления", СписокОбработчиков) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ВыполненныеОбработчикиОбновления = СписокОбработчиков.ВыгрузитьЗначения();
	
	Если ВыполненныеОбработчикиОбновления = Неопределено Тогда
		ДокументОписаниеОбновлений = Метаданные.ОбщиеМакеты.Найти("УПЖКХ_ОписаниеИзмененийСистемы");
		Если ДокументОписаниеОбновлений <> Неопределено Тогда
			ДокументОписаниеОбновлений = ПолучитьОбщийМакет(ДокументОписаниеОбновлений);
		Иначе	
			ДокументОписаниеОбновлений = Новый ТабличныйДокумент();
		КонецЕсли;
	Иначе
		ДокументОписаниеОбновлений = УПЖКХ_ОбновлениеИнформационнойБазы.ДокументОписаниеОбновлений(ВыполненныеОбработчикиОбновления);
	КонецЕсли;

	Если ДокументОписаниеОбновлений.ВысотаТаблицы = 0 Тогда
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Конфигурация успешно обновлена на версию %1'"), Метаданные.Версия);
			
		ДокументОписаниеОбновлений.Область("R1C1:R1C1").Текст = Текст;
		
	КонецЕсли;
	
	ОписаниеОбновлений.Очистить();
	ОписаниеОбновлений.Вывести(ДокументОписаниеОбновлений);
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "Выбор" поля "ОписаниеОбновлений".
Процедура ОписаниеОбновленийВыбор(Элемент, Область, СтандартнаяОбработка)
	
	Если Лев(Область.Имя, 9) = "Обработка" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ИмяОбработки = Прав(Область.Имя, СтрДлина(Область.Имя) - 9);
		Попытка
			ПолучитьФорму("Обработка." + ИмяОбработки + ".Форма").Открыть();
		Исключение
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось получить форму обработки.");
		КонецПопытки;
		
	ИначеЕсли Лев(Область.Имя, 5) = "Отчет" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ИмяОтчета = Прав(Область.Имя, СтрДлина(Область.Имя) - 5);
		Попытка
			ПолучитьФорму("Отчет." + ИмяОтчета + ".Форма").Открыть();
		Исключение
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось получить форму отчета.");
		КонецПопытки;
		
	ИначеЕсли Лев(Область.Имя, 15) = "РегистрСведений" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ИмяРегистра = Прав(Область.Имя, СтрДлина(Область.Имя) - 15);
		Попытка
			ПолучитьФорму("РегистрСведений." + ИмяРегистра + ".ФормаСписка").Открыть();
		Исключение
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось получить форму регистра сведений.");
		КонецПопытки;
		
	ИначеЕсли Лев(Область.Имя, 10) = "ОбщаяФорма" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ИмяОбщейФормы = Прав(Область.Имя, СтрДлина(Область.Имя) - 10);
		Попытка
			ПолучитьФорму("ОбщаяФорма." + ИмяОбщейФормы).Открыть();
		Исключение
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось получить общую форму.");
		КонецПопытки;
		
	ИначеЕсли Область.Имя = "ОтчетОбОшибочныхЗаписяхРегистра" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		
		ЗаполнитьТабличныйДокументИнформациейОбОшибкахНаСервере(ТабличныйДокумент);
		
		ТабличныйДокумент.Показать();
		
	КонецЕсли;
	
	Если СтрНайти(Область.Текст, "http://") = 1 Или СтрНайти(Область.Текст, "https://") = 1 Тогда
		УПЖКХ_ТиповыеМетодыКлиент.ОткрытьНавигационнуюСсылку(Область.Текст);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти
