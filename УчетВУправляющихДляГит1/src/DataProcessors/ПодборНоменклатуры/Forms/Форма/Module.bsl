#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// по умолчанию при отсутсвии пользовательских настроек
	ЗапрашиватьКоличество 	= Истина;
	ЗапрашиватьЦену 		= Истина;
	
	СписокСвойств = "ЕстьЦена, Валюта, ДатаРасчетов, ДоговорКонтрагента, Заголовок, ИмяТаблицы, Контрагент, Организация,
		|Склад, ТипЦен, Реализация, ДеятельностьНаПатенте, СуммаВключаетНДС, СтавкаНДС, Услуги, ВидПодбора";
		
	НеобязательныеПараметры = Новый Структура;
	
	НеобязательныеПараметры.Вставить("ПоказыватьОстатки",              Истина);
	НеобязательныеПараметры.Вставить("ПоказыватьЦены",                 Ложь);
	НеобязательныеПараметры.Вставить("УстанавливатьЦеныДокументов",    Ложь);
	НеобязательныеПараметры.Вставить("ПоказыватьОтрицательныеОстатки", Истина);
	НеобязательныеПараметры.Вставить("ПоказыватьЗабалансовыеОстатки",  Истина);
	НеобязательныеПараметры.Вставить("ЕстьКоличество",                 Истина);
	НеобязательныеПараметры.Вставить("Подразделение",                  Неопределено);
	
	НеобязательныеПараметры.Вставить("Курс",      0);
	НеобязательныеПараметры.Вставить("Кратность", 0);
	
	Для каждого НеобязательныйПараметр Из НеобязательныеПараметры Цикл
		
		ИмяПараметра = НеобязательныйПараметр.Ключ;
		
		Если Параметры.Свойство(ИмяПараметра) Тогда
			СписокСвойств = СписокСвойств + "," + ИмяПараметра;
		КонецЕсли; 	
		
	КонецЦикла; 
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НеобязательныеПараметры);
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры, СписокСвойств);
	
	// Избавимся от ссылок на недоступные элементы
	Если Не ПравоДоступа("Чтение", Метаданные.Справочники.ТипыЦенНоменклатуры) Тогда
		ТипЦен = Неопределено;
	КонецЕсли;
	
	Если Параметры.ЗаполнятьЦеныПоПродаже Тогда
		СпособЗаполненияЦены = ПредопределенноеЗначение("Перечисление.СпособыЗаполненияЦен.ПоПродажнымЦенам");
	ИначеЕсли Параметры.ЗаполнятьЦеныПоПокупке Тогда
		СпособЗаполненияЦены = ПредопределенноеЗначение("Перечисление.СпособыЗаполненияЦен.ПоЗакупочнымЦенам");
	КонецЕсли;
	
	ЗаполнятьЦеныПродажаИПокупка = Параметры.ЗаполнятьЦеныПродажаИПокупка;
	
	УстанавливатьЦеныДокументов = ЕстьЦена И НЕ ЗначениеЗаполнено(ТипЦен)
		И (ЗначениеЗаполнено(СпособЗаполненияЦены) ИЛИ ЗаполнятьЦеныПродажаИПокупка);
	
	
	// Отключим невыполнимые опции
	Если Не ПравоДоступа("Просмотр", Метаданные.РегистрыБухгалтерии.Хозрасчетный) Тогда
		ПоказыватьОстатки = Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступа("Просмотр", Метаданные.РегистрыСведений.ЦеныНоменклатуры) 
		Или Не ЗначениеЗаполнено(ТипЦен) Тогда
		ПоказыватьЦены = Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступа("Чтение", Метаданные.РегистрыСведений.ЦеныНоменклатурыДокументов) Тогда
		УстанавливатьЦеныДокументов = Ложь;
	КонецЕсли;
	
	
	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		Валюта = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	КонецЕсли;
	
	Если Курс = 0 или Кратность = 0 Тогда
		КурсКратность = РаботаСКурсамиВалют.ПолучитьКурсВалюты(Валюта, ДатаРасчетов);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, КурсКратность);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТипЦен) Тогда
		ВалютаЦены = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТипЦен, "ВалютаЦены");
	ИначеЕсли УстанавливатьЦеныДокументов Тогда
		ВалютаЦены = Валюта;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВалютаЦены) Тогда
		ВалютаЦены = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	КонецЕсли;
	
	// Определим настройку учета по складам и по подразделениям.
	Если ПоказыватьОстатки Тогда
		ВедетсяУчетПоСкладам = БухгалтерскийУчет.ВедетсяУчетПоСкладам(ПланыСчетов.Хозрасчетный.ТоварыНаСкладах);
	Иначе
		ВедетсяУчетПоСкладам = Ложь;
	КонецЕсли;
	
	ВедетсяУчетПоПодразделелениям = БухгалтерскийУчетПереопределяемый.ВестиУчетПоПодразделениям();
	
	СпискиВыбораКлиентСервер.Загрузить("ИсторияПоискаНоменклатуры", Элементы.СтрокаПоиска.СписокВыбора);
	Настройки = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("ПодборНоменклатуры", "");
	Если Настройки <> Неопределено Тогда
		Если Настройки.Свойство("ИсторияПоискаНоменклатуры") Тогда
			Элементы.СтрокаПоиска.СписокВыбора.ЗагрузитьЗначения(Настройки.ИсторияПоискаНоменклатуры);
		КонецЕсли;
		Если Настройки.Свойство("ЗапрашиватьКоличество") Тогда
			ЗапрашиватьКоличество = Настройки.ЗапрашиватьКоличество;
		КонецЕсли;
		Если Настройки.Свойство("ЗапрашиватьЦену") Тогда
			ЗапрашиватьЦену = Настройки.ЗапрашиватьЦену;
		КонецЕсли;
		Если Настройки.Свойство("ПоказыватьТолькоОстатки") Тогда
			ПоказыватьТолькоОстаткиПриОткрытии = Настройки.ПоказыватьТолькоОстатки;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Заголовок) Тогда
		Заголовок = Параметры.Заголовок;
		АвтоЗаголовок = Ложь;
	КонецЕсли;
	
	Элементы.ПоказыватьТолькоОстатки.Видимость = ПоказыватьОстатки;
	
	// Элементы ВыбратьОстаток и СписокНоменклатурыКонтекстноеМенюВыбратьОстаток по умолчанию не видны.
	// Команда "ВыбратьОстаток" не нужна, если подбор номенклатуры используется для учета поступления.
	
	// 1 случай
	// Команда "ВыбратьОстаток" нужна в документе, где показываются остатки товаров на складе с ценами
	// и подбор товаров нужен для реализации.
	// В таких документах явно передается параметр "КомандаВыбратьОстаток", 
	// который указывает в каких таблицах докумнета нужна команда ВыбратьОстаток.
	// Пример: ОтчетПроизводстваЗаСмену, в таблице "Материалы" команда "ВыбратьОстаток" нужна,
	// следовательно передается параметр "КомандаВыбратьОстаток" = Истина.
	// В таблице "Продукция" команда не нужна, то "КомандаВыбратьОстаток" = Ложь.
	ЕстьПараметрКомандаВыбратьОстаток = Параметры.Свойство("КомандаВыбратьОстаток");
	
	Если ЕстьПараметрКомандаВыбратьОстаток Тогда
		ВидимостьКомандыВыбратьОстаток = Параметры.КомандаВыбратьОстаток;
	
	// 2 случай
	// Команда "ВыбратьОстаток" нужна в документах, где показываются остатки товаров на складе, а цены не указаны,
	// и подбор товаров нужен для передачи или списания.
	// В этих документах при вызове формы параметр "КомандаВыбратьОстаток" НЕ передается.
	Иначе
		
		ОстаткиНаСкладеБезЦен = ПоказыватьОстатки И НЕ Параметры.ЕстьЦена И НЕ ЗначениеЗаполнено(Параметры.ТипЦен) И
					НЕ Параметры.ЗаполнятьЦеныПоПокупке И НЕ Параметры.ЗаполнятьЦеныПоПродаже;
		
		ВидимостьКомандыВыбратьОстаток = ОстаткиНаСкладеБезЦен;
		
	КонецЕсли;
	
	Элементы.ВыбратьОстаток.Видимость                                  = ВидимостьКомандыВыбратьОстаток;
	Элементы.СписокНоменклатурыКонтекстноеМенюВыбратьОстаток.Видимость = ВидимостьКомандыВыбратьОстаток;
	
	// Если в текущем режим остатки не отображаются совсем, то чтобы не затереть настройку ПоказыватьТолькоОстатки,
	// сохраним ее значение в отдельный реквизит формы.
	Если ПоказыватьОстатки Тогда
		ПоказыватьТолькоОстатки = ПоказыватьТолькоОстаткиПриОткрытии;
	КонецЕсли;
	
	Элементы.СписокНоменклатурыВалюта.Видимость = ПолучитьФункциональнуюОпцию("ИспользоватьВалютныйУчет");
	
	ПодготовитьПараметрыСпискаНоменклатуры();
	
	НастроитьСписок(Истина);
	
	ОбновитьИнформационнуюНадписьПараметрыПодбора(ЭтотОбъект);
	Элементы.ИнформационнаяНадписьПараметровПодбора.Видимость = НЕ ПустаяСтрока(ИнформационнаяНадписьПараметровПодбора);
	
	УправлениеФормой(ЭтотОбъект);

	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если Параметр = ЭтаФорма Тогда
		Если ИмяСобытия = "ВводНовогоЭлементаСправочникаНоменклатура" Тогда
			Элементы.СписокНоменклатуры.Обновить();
			ЕстьКонтрольУслуги = (ТипЗнч(Услуги) = Тип("Булево"));
			Если НЕ ЕстьКонтрольУслуги ИЛИ (ЭтоУслуга(Источник) = Услуги) Тогда
				
				Элементы.СписокНоменклатуры.ТекущаяСтрока = Источник;
				
				ПараметрыНоменклатуры = Новый Структура;
				ПараметрыНоменклатуры.Вставить("Номенклатура", Источник);
				ПараметрыНоменклатуры.Вставить("Количество",   1);
				ПараметрыНоменклатуры.Вставить("Цена",         0);
				
				ОткрытьФормуВводаЦенаКоличество(ПараметрыНоменклатуры);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ПеренестиВДокумент И Объект.ПодобраннаяНоменклатура.Количество() = 0 Тогда
		
		ЗаполнитьОстатками = Истина;
		ЗаполнитьПодобраннаяНоменклатураВыбраннымиСтрокамиИзСписокНоменклатуры(ЗаполнитьОстатками);
		
	КонецЕсли;
	
	Если ЗавершениеРаботы И Объект.ПодобраннаяНоменклатура.Количество() > 0 Тогда
		Отказ = Истина;
	ИначеЕсли Не ПеренестиВДокумент И Объект.ПодобраннаяНоменклатура.Количество() > 0 Тогда
		
		Отказ = Истина;
		
		ТекстВопроса = НСтр("ru = 'Подобранные товары не перенесены в документ.
			|
			|Перенести?'");
			
		Оповещение = Новый ОписаниеОповещения("ВопросПеренестиВДокументЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	СтруктураВозврата = ПриЗакрытииНаСервере();
	
	Если ПеренестиВДокумент Тогда
		ОповеститьОВыборе(СтруктураВозврата);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПриЗакрытииНаСервере()
	
	СтруктураВозврата = Новый Структура();
	
	ПараметрыЗакрытия = Новый Структура;
	ПараметрыЗакрытия.Вставить("ИсторияПоискаНоменклатуры", Элементы.СтрокаПоиска.СписокВыбора.ВыгрузитьЗначения());
	ПараметрыЗакрытия.Вставить("ЗапрашиватьКоличество",     ЗапрашиватьКоличество);
	ПараметрыЗакрытия.Вставить("ЗапрашиватьЦену",           ЗапрашиватьЦену);
	Если ПоказыватьОстатки Тогда
		ПараметрыЗакрытия.Вставить("ПоказыватьТолькоОстатки",   ПоказыватьТолькоОстатки);
	Иначе
		// В текущем режиме остатки не показывались совсем, поэтому настройку ПоказыватьТолькоОстатки 
		// оставляем в том состоянии, в котором она была на момент открытия текущего подбора.
		ПараметрыЗакрытия.Вставить("ПоказыватьТолькоОстатки",   ПоказыватьТолькоОстаткиПриОткрытии);
	КонецЕсли;
	
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("ПодборНоменклатуры", "", ПараметрыЗакрытия);
	
	Если ПеренестиВДокумент Тогда
		АдресПодобраннойНоменклатурыВХранилище = ПоместитьПодобраннуюНоменклатуруВХранилище();
		СтруктураВозврата.Вставить("АдресПодобраннойНоменклатурыВХранилище", АдресПодобраннойНоменклатурыВХранилище);
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	ПрименитьПоиск();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьТолькоОстаткиПриИзменении(Элемент)
	
	НастроитьСписок(Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИерархияНоменклатуры

&НаКлиенте
Процедура ИерархияНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УстановитьОтборПоИерархииНоменклатуры(ВыбраннаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ИерархияНоменклатурыПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("Подключаемый_УстановитьОтборПоИерархииНоменклатуры", 0.2, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокНоменклатуры

&НаКлиенте
Процедура СписокНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Номенклатура       = Элемент.ТекущиеДанные.Ссылка;
	ДанныеНоменклатуры = Элемент.ТекущиеДанные;
	Цена               = Цена(Номенклатура, ДанныеНоменклатуры);
	
	ПараметрыНоменклатуры = Новый Структура;
	ПараметрыНоменклатуры.Вставить("Номенклатура", Номенклатура);
	ПараметрыНоменклатуры.Вставить("Количество",   1);
	ПараметрыНоменклатуры.Вставить("Цена",         Цена);
	
	Если ДанныеНоменклатуры.Свойство("ЕдиницаИзмерения") Тогда
		ПараметрыНоменклатуры.Вставить("ЕдиницаИзмерения", ДанныеНоменклатуры.ЕдиницаИзмерения);
	КонецЕсли;
	
	ОткрытьФормуВводаЦенаКоличество(ПараметрыНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	
	Если Элемент.ВыделенныеСтроки.Количество() = 1 Тогда
		
		СписокНоменклатурыВыбор(Элемент, Значение, , СтандартнаяОбработка);
		
	Иначе
		
		ЗаполнитьОстатками = Ложь;
		ЗаполнитьПодобраннаяНоменклатураВыбраннымиСтрокамиИзСписокНоменклатуры(ЗаполнитьОстатками);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	Если Копирование Тогда
		
		ПараметрыФормыНоменклатура = Новый Структура("ЗначениеКопирования", Элемент.ТекущаяСтрока);
		
	Иначе
		
		ДанныеЗаполнения = Новый Структура;
		
		Если ТипЗнч(Услуги) = Тип("Булево") Тогда
			ДанныеЗаполнения.Вставить("Услуга",Услуги);
		КонецЕсли; 
		
		Если Элементы.ИерархияНоменклатуры.ТекущаяСтрока <> Неопределено Тогда
			ДанныеЗаполнения.Вставить("Родитель", Элементы.ИерархияНоменклатуры.ТекущаяСтрока);
		КонецЕсли; 
		
		ПараметрыФормыНоменклатура = Новый Структура("ЗначенияЗаполнения, ДополнительныеПараметры", ДанныеЗаполнения, Новый Структура("Наименование", СокрЛП(СтрокаПоиска)));
		
	КонецЕсли; 
	
	ОткрытьФорму("Справочник.Номенклатура.ФормаОбъекта", ПараметрыФормыНоменклатура,ЭтаФорма,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокНоменклатурыПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	// Вариант подбора и параметры для запроса передаются через дополнительные свойства Настроек.
	НастройкиПодбора = Настройки.ДополнительныеСвойства.НастройкиПодбора;
	
	Если НЕ ЗначениеЗаполнено(НастройкиПодбора.ТекстЗапросаПриПолученииДанныхНаСервере) Тогда
		// Отображение дополнительных сведений не требуется.
		Возврат;
	КонецЕсли;
	
	НомераТаблиц     = НастройкиПодбора.НомераТаблицПриПолученииДанныхНаСервере;
	ПараметрыЗапроса = Настройки.ДополнительныеСвойства.ПараметрыЗапроса;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокНоменклатуры", Строки.ПолучитьКлючи());
	Для каждого КлючИЗначение Из ПараметрыЗапроса Цикл
		Запрос.УстановитьПараметр(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Запрос.Текст = НастройкиПодбора.ТекстЗапросаПриПолученииДанныхНаСервере;

	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	// Переносим данные из результата запроса в строки динамического списка.
	Для каждого ТаблицаЗапроса Из НомераТаблиц Цикл
		ИмяТаблицы = ТаблицаЗапроса.Ключ;
		Выборка = РезультатЗапроса[ТаблицаЗапроса.Значение].Выбрать();
		
		Пока Выборка.Следующий() Цикл
		
			СтрокаДинамическогоСписка = Строки[Выборка.Номенклатура];
			Если СтрокаДинамическогоСписка = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ИмяТаблицы = "ОстаткиНаСкладе" Тогда
				СтрокаДинамическогоСписка.Данные.КоличествоОстаток = Выборка.КоличествоОстаток;
			Иначе
				ЗаполнитьЗначенияСвойств(СтрокаДинамическогоСписка.Данные, Выборка);
			КонецЕсли;
		
		КонецЦикла;
	
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	// На практике, таблица формы предоставляет Массив.
	// При этом для платформенной логики проверки возможности перетаскивания важно, чтобы в Значение остался этот тип.
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	// Для того, чтобы элемент-получатель перетаскивания смог идентифицировать элемент-источник значения,
	// обернем значение в контейнер
	ЗначенияПеретаскивания = ОбщегоНазначенияКлиент.СкопироватьРекурсивно(ПараметрыПеретаскивания.Значение);
	ПараметрыПеретаскивания.Значение.Очистить();
	
	КонтейнерЗначений = Новый Структура;
	КонтейнерЗначений.Вставить("Источник", Элемент.Имя);
	КонтейнерЗначений.Вставить("Значения", ЗначенияПеретаскивания);
	
	ПараметрыПеретаскивания.Значение.Добавить(КонтейнерЗначений);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПодобраннаяНоменклатура

&НаКлиенте
Процедура ПодобраннаяНоменклатураПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяНоменклатураКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПодобраннаяНоменклатура.ТекущиеДанные;
	ТекущиеДанные.Сумма = ТекущиеДанные.Цена * ТекущиеДанные.Количество;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяНоменклатураЦенаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПодобраннаяНоменклатура.ТекущиеДанные;
	ТекущиеДанные.Сумма = ТекущиеДанные.Цена * ТекущиеДанные.Количество;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяНоменклатураСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПодобраннаяНоменклатура.ТекущиеДанные;
	Если ТекущиеДанные.Количество = 0 Тогда
		ТекущиеДанные.Цена = 0;
	Иначе
		ТекущиеДанные.Цена = ТекущиеДанные.Сумма / ТекущиеДанные.Количество;
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяНоменклатураПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) <> Тип("Массив") Тогда
		// Ожидаем перетаскивание из таблицы формы "СписокНоменклатуры".
		// На практике, таблица формы предоставляет Массив.
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПараметрыПеретаскивания.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	КонтейнерЗначений = ПараметрыПеретаскивания.Значение[0];
	Если ТипЗнч(КонтейнерЗначений) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не КонтейнерЗначений.Свойство("Источник")
		Или Не КонтейнерЗначений.Свойство("Значения") Тогда
		Возврат;
	КонецЕсли;
	
	Если КонтейнерЗначений.Источник <> "СписокНоменклатуры" Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьОстатками = Истина;
	
	Для Каждого СтрокаДляПеретаскивания Из КонтейнерЗначений.Значения Цикл
		
		ЗаполнитьСтрокуПодобраннаяНоменклатура(СтрокаДляПеретаскивания, ЗаполнитьОстатками);
		
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)
	
	ПеренестиВДокумент = Истина;
	Закрыть(КодВозвратаДиалога.OK);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиПодбора(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПрименитьНастройкиПодбораЗавершение", ЭтотОбъект);
	
	ПараметрыФормы = Новый Структура("ЕстьЦена, ЕстьКоличество", ЕстьЦена, ЕстьКоличество);
	
	ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.НастройкиПодбора", ПараметрыФормы,
		ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОстаток(Команда)
	
	Если Элементы.СписокНоменклатуры.ВыделенныеСтроки.Количество() = 1 Тогда
		
		Номенклатура       = Элементы.СписокНоменклатуры.ТекущиеДанные.Ссылка;
		ДанныеНоменклатуры = Элементы.СписокНоменклатуры.ТекущиеДанные;
		Цена               = Цена(Номенклатура, ДанныеНоменклатуры);
		
		ПараметрыНоменклатуры = Новый Структура;
		ПараметрыНоменклатуры.Вставить("Номенклатура", Номенклатура);
		ПараметрыНоменклатуры.Вставить("Количество",   ДанныеНоменклатуры.КоличествоОстаток);
		ПараметрыНоменклатуры.Вставить("Цена",         Цена);
		
		ОткрытьФормуВводаЦенаКоличество(ПараметрыНоменклатуры);
		
	Иначе
		
		ЗаполнитьОстатками = Истина;
		ЗаполнитьПодобраннаяНоменклатураВыбраннымиСтрокамиИзСписокНоменклатуры(ЗаполнитьОстатками);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	// ПодобраннаяНоменклатураЦена, ПодобраннаяНоменклатураСумма

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПодобраннаяНоменклатураЦена");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПодобраннаяНоменклатураСумма");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ЕстьЦена", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// СписокНоменклатурыКоличествоОстаток

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокНоменклатурыКоличествоОстаток");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПоказыватьОстатки", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// СписокНоменклатурыЦена, СписокНоменклатурыВалюта

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокНоменклатурыЦена");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокНоменклатурыВалюта");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПоказыватьЦены", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// ПодобраннаяНоменклатураКоличество, ПодобраннаяНоменклатураСумма

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПодобраннаяНоменклатураКоличество");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ПодобраннаяНоменклатураСумма");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ЕстьКоличество", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);


	// СписокНоменклатурыКоличествоОстаток

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СписокНоменклатурыКоличествоОстаток");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ПоказыватьОтрицательныеОстатки", ВидСравненияКомпоновкиДанных.Равно, Ложь);

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"СписокНоменклатуры.КоличествоОстаток", ВидСравненияКомпоновкиДанных.Меньше, 0);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьПоиск()
	
	Использование = ЗначениеЗаполнено(СтрокаПоиска);
	
	ГруппаОтбора = ОтборыСписковКлиентСервер.СоздатьГруппуЭлементовОтбора(
		СписокНоменклатуры.Отбор.Элементы, "ПоискПоПодстроке",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбора, "Наименование", СтрокаПоиска,
		Использование, ВидСравненияКомпоновкиДанных.Содержит);
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбора, "НаименованиеПолное", СтрокаПоиска,
		Использование, ВидСравненияКомпоновкиДанных.Содержит);
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбора, "Код", СтрокаПоиска,
		Использование, ВидСравненияКомпоновкиДанных.Содержит);
		
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораГруппыСписка(
		ГруппаОтбора, "Артикул", СтрокаПоиска,
		Использование, ВидСравненияКомпоновкиДанных.Содержит);
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		СпискиВыбораКлиентСервер.ОбновитьСписокВыбора(Элементы.СтрокаПоиска.СписокВыбора, СтрокаПоиска);
	КонецЕсли; 
	
	ТекущийЭлемент = Элементы.СписокНоменклатуры;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВводаЦенаКоличество(ПараметрыНоменклатуры)
	
	ПараметрыНоменклатуры.Вставить("Валюта",         Валюта);
	ПараметрыНоменклатуры.Вставить("ЕстьЦена" ,      ЗапрашиватьЦену И ЕстьЦена);
	ПараметрыНоменклатуры.Вставить("ЕстьКоличество", ЗапрашиватьКоличество И ЕстьКоличество);
	
	Если ЗапрашиватьКоличество И ЕстьКоличество ИЛИ ЗапрашиватьЦену И ЕстьЦена Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ДобавитьВыбраннуюНоменклатуруЗавершение", ЭтотОбъект);
		
		ОткрытьФорму("Обработка.ПодборНоменклатуры.Форма.ФормаВводаЦенаКоличество", ПараметрыНоменклатуры,
			ЭтотОбъект,,,, ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		ДобавитьВыбраннуюНоменклатуруЗавершение(ПараметрыНоменклатуры, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВыбраннуюНоменклатуруЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Свойство("Цена") Тогда
		ПараметрыПоиска = Новый Структура("Номенклатура, Цена", Результат.Номенклатура, Результат.Цена);
	Иначе
		ПараметрыПоиска = Новый Структура("Номенклатура", Результат.Номенклатура);
	КонецЕсли;
	
	РезультатПоиска = Объект.ПодобраннаяНоменклатура.НайтиСтроки(ПараметрыПоиска);
	
	Если РезультатПоиска.Количество() = 0 Тогда
		ТекущаяСтрока = Объект.ПодобраннаяНоменклатура.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, Результат,, "Количество");
	Иначе
		ТекущаяСтрока = РезультатПоиска[0];
	КонецЕсли;
	
	ТекущаяСтрока.Количество = Результат.Количество + ТекущаяСтрока.Количество;
	
	Если Результат.Свойство("Цена") Тогда
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Количество * ТекущаяСтрока.Цена;
	КонецЕсли;
	
	// Активизируем текущую строку табличной части
	Элементы.ПодобраннаяНоменклатура.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПеренестиВДокументЗавершение(ОтветНаВопрос, ДополнительныеПараметры) Экспорт
	
	Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
		ПеренестиВДокумент = Истина;
		Закрыть();
	ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		ПеренестиВДокумент = Ложь;
		Объект.ПодобраннаяНоменклатура.Очистить();
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьНастройкиПодбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗапрашиватьКоличество = Результат.ЗапрашиватьКоличество;
	ЗапрашиватьЦену       = Результат.ЗапрашиватьЦену;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоУслуга(Ссылка)

	Возврат Ссылка.Услуга;

КонецФункции 

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	ОбновитьИтоги(Форма);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДатуОстатковПоУмолчанию()
	
	ТекущаяРабочаяДата = ОбщегоНазначения.ТекущаяДатаПользователя();
	
	Если ТекущаяРабочаяДата = НачалоДня(ТекущаяДатаСеанса()) Тогда
		Возврат ТекущаяДатаСеанса();
	Иначе
		Возврат ТекущаяРабочаяДата;
	КонецЕсли; 
	
КонецФункции 

&НаСервереБезКонтекста
Функция ПолучитьСписокСчетов(Знач СписокСчетов, Знач СписокСубконто, Знач ПоказыватьЗабалансовые)

	Запрос = Новый Запрос;
	
	Исключения = Новый Массив;
	Исключения.Добавить(ПланыСчетов.Хозрасчетный.Продажи); // 90
	Исключения.Добавить(ПланыСчетов.Хозрасчетный.ГТД);
	Исключения.Добавить(ПланыСчетов.Хозрасчетный.МатериальныеЦенностиВЭксплуатации); // МЦ
	
	Запрос.УстановитьПараметр("СписокСубконто", СписокСубконто);
	Запрос.УстановитьПараметр("Исключения", Исключения);
	Если СписокСчетов.Количество() <> 0 Тогда
	
		Запрос.УстановитьПараметр("СписокСчетов", СписокСчетов);
	
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ХозрасчетныйВидыСубконто.Ссылка
	|ИЗ
	|	ПланСчетов.Хозрасчетный.ВидыСубконто КАК ХозрасчетныйВидыСубконто
	|ГДЕ
	|	ХозрасчетныйВидыСубконто.ВидСубконто В(&СписокСубконто)
	|	И НЕ ХозрасчетныйВидыСубконто.Ссылка В ИЕРАРХИИ(&Исключения)
	|	И НЕ ХозрасчетныйВидыСубконто.Ссылка.ЗапретитьИспользоватьВПроводках
	|	И ХозрасчетныйВидыСубконто.Ссылка.Количественный
	|	И НЕ ХозрасчетныйВидыСубконто.ТолькоОбороты"
	+ ?(ПоказыватьЗабалансовые, "", " И НЕ ХозрасчетныйВидыСубконто.Ссылка.Забалансовый")
	+?(СписокСчетов.Количество() = 0, "", " И ХозрасчетныйВидыСубконто.Ссылка В ИЕРАРХИИ (&СписокСчетов)");
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Возвращает массив документов партий комитента
&НаСервереБезКонтекста
Функция ПолучитьСписокДокументовКомитента(СписокОрганизаций, СписокСчетов, ДатаОстатки, Комитент)
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("СписокОрганизаций", СписокОрганизаций);
	Запрос.УстановитьПараметр("ДатаОстатки",       ДатаОстатки);
	Запрос.УстановитьПараметр("СписокСчетов",      СписокСчетов);
	Запрос.УстановитьПараметр("ВидыСубконто",      ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
	Запрос.УстановитьПараметр("Комитент",          Комитент);
	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ДокументыКомитента
		|ИЗ
		|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	ПоступлениеТоваровУслуг.Контрагент = &Комитент
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ХозрасчетныйОстатки.Субконто1 КАК Партии
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&ДатаОстатки,
		|			Счет В (&СписокСчетов),
		|			&ВидыСубконто,
		|			Организация В (&СписокОрганизаций)
		|				И Субконто1 В
		|					(ВЫБРАТЬ
		|						ДокументыКомитента.Ссылка
		|					ИЗ
		|						ДокументыКомитента)) КАК ХозрасчетныйОстатки
		|ГДЕ
		|	ХозрасчетныйОстатки.КоличествоОстаток <> 0";
	
	УстановитьПривилегированныйРежим(Истина);

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Партии");
КонецФункции  

&НаСервере
Процедура ПодготовитьПараметрыСпискаНоменклатуры()

	// Настройки формы подбора, которые используются в обработчике ПриПолученииДанныхНаСервере().
	НастройкиПодбора = Новый Структура();
	НастройкиПодбора.Вставить("ТекстЗапросаПриПолученииДанныхНаСервере", "");
	НастройкиПодбора.Вставить("НомераТаблицПриПолученииДанныхНаСервере", Новый Структура);

	// Параметры, передаваемый в запрос / устанавливаемые в отборах динамического списка.
	ПараметрыЗапроса = Новый Структура(); 

	ДатаОстаткиЦены = ?(НЕ ЗначениеЗаполнено(ДатаРасчетов), ПолучитьДатуОстатковПоУмолчанию(), ДатаРасчетов);
	ПараметрыЗапроса.Вставить("ДатаОстаткиЦены", ДатаОстаткиЦены);
	
	// Отображение цен
	
	Элементы.СписокНоменклатурыЦена.Видимость   = ПоказыватьЦены;
	Элементы.СписокНоменклатурыВалюта.Видимость = ПоказыватьЦены;
	
	Если ПоказыватьЦены Тогда
	
		Если ВРег(ВидПодбора) = "НТТ" Тогда
			ТипЦенЗапроса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ТипЦенРозничнойТорговли");
		Иначе
			ТипЦенЗапроса = ТипЦен;
		КонецЕсли;
		
		ПараметрыЗапроса.Вставить("ТипЦен",     ТипЦен);
		ПараметрыЗапроса.Вставить("ВалютаЦены", ВалютаЦены);
		
	КонецЕсли;
	
	// Отображение остатков на складе
	
	Элементы.СписокНоменклатурыКоличествоОстаток.Видимость = ПоказыватьОстатки;
	
	Если ПоказыватьОстатки Тогда
		
		СписокДоступныхОрганизаций = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Ложь);
	
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
		
			СписокОрганизаций = СписокДоступныхОрганизаций;
		
		ИначеЕсли СписокДоступныхОрганизаций.Найти(Организация) <> Неопределено Тогда
		
			СписокОрганизаций = Новый Массив;
			СписокОрганизаций.Добавить(Организация);
		
		Иначе
			СписокОрганизаций = Новый Массив;
		КонецЕсли;
		
		
		ВидыСубконто = Новый Массив;
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
		
		СписокСчетов = Новый Массив;
		
		ИспользоватьОтборПоСкладу     = Истина;
		ИспользоватьОтборПоСчетуНеГТД = Истина;
		
		Если ВРег(ВидПодбора) = "КОМИТЕНТ" Тогда
		
			СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТоварыНаСкладе); // 004.01
		
			Если ЗначениеЗаполнено(Контрагент) Тогда
				ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии);
			
				СписокДокументовКомитента = ПолучитьСписокДокументовКомитента(
					СписокОрганизаций,
					СписокСчетов,
					ДатаОстаткиЦены,
					Контрагент);
				
				ПараметрыЗапроса.Вставить("Субконто"+ВидыСубконто.Количество(), СписокДокументовКомитента);
		
			КонецЕсли; 
		
		ИначеЕсли ВРег(ВидПодбора) = "КОМИССИОНЕР" Тогда
			
			ИспользоватьОтборПоСкладу = Ложь;
			
			СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТоварыОтгруженные);          // 45
			СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.ТоварыПереданныеНаКомиссию); // 004.02

			ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
			
			Если ЗначениеЗаполнено(Контрагент) Тогда
				ПараметрыЗапроса.Вставить("Субконто"+ВидыСубконто.Количество(), Контрагент);
			КонецЕсли;
			
		ИначеЕсли ВРег(ВидПодбора) = "МАТЕРИАЛЫЗАКАЗЧИКА" Тогда
			
			СписокСчетов.Добавить(ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработку); // 003.01

			ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты);
			
			Если ЗначениеЗаполнено(Контрагент) Тогда
				ПараметрыЗапроса.Вставить("Субконто"+ВидыСубконто.Количество(), Контрагент);
			КонецЕсли;
				
		КонецЕсли;
		
		Если ИспользоватьОтборПоСкладу Тогда
			Если ЗначениеЗаполнено(Склад) И ВедетсяУчетПоСкладам Тогда
				
				ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
				
				ПараметрыЗапроса.Вставить("Субконто"+ВидыСубконто.Количество(), Склад);
					
			КонецЕсли;
		КонецЕсли;
		
		Если ВедетсяУчетПоПодразделелениям И ЗначениеЗаполнено(Подразделение) Тогда
			
			ПараметрыЗапроса.Вставить("Подразделение", Подразделение);
				
		КонецЕсли; 
		
		СписокСчетов = ПолучитьСписокСчетов(СписокСчетов, ВидыСубконто, ПоказыватьЗабалансовыеОстатки);
		
		ПараметрыЗапроса.Вставить("ВидыСубконто", ВидыСубконто);
		ПараметрыЗапроса.Вставить("СчетаЗапасов", СписокСчетов);
		ПараметрыЗапроса.Вставить("СписокОрганизаций", СписокОрганизаций);
		
	КонецЕсли;

	// Передаем настройки подбора и параметры запроса в дополнительные свойства компоновщика настроек динамического списка,
	// чтобы использовать их в обработчике события СписокНоменклатурыПриПолученииДанныхНаСервере().
	СписокНоменклатуры.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("НастройкиПодбора", НастройкиПодбора);
	СписокНоменклатуры.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);

	// Запретим отбор и сортировку по полям, которые вычисляются в обработчике ПриПолученииДанныхНаСервере().
	ЗапрещенныеПоля = Новый Массив;
	ЗапрещенныеПоля.Добавить("КоличествоОстаток");
	ЗапрещенныеПоля.Добавить("Цена");
	ЗапрещенныеПоля.Добавить("Валюта");
	
	СписокНоменклатуры.УстановитьОграниченияИспользованияВОтборе(ЗапрещенныеПоля);
	СписокНоменклатуры.УстановитьОграниченияИспользованияВПорядке(ЗапрещенныеПоля);
	СписокНоменклатуры.УстановитьОграниченияИспользованияВГруппировке(ЗапрещенныеПоля);

КонецПроцедуры

&НаСервере
Процедура НастроитьСписок(ПервичнаяНастройка)

	ПараметрыЗапроса = СписокНоменклатуры.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.ПараметрыЗапроса;

	// Текст запроса в динамическом списке при открытии соответствует варианту тумблера "Все".
	// Для сокращения времени открытия формы его не изменяем, если согласно сохраненным настройкам он является текущим.
	Если НЕ ПервичнаяНастройка ИЛИ ПоказыватьТолькоОстатки Тогда
		СписокНоменклатуры.ТекстЗапроса = ТекстЗапросаДинамическогоСписка();
		
		// При изменении текста удалим все ранее установленные отборы, кроме отбора по группе номенклатуры.
		УдалитьОтборыСпискаНоменклатуры();
	КонецЕсли;

	// Подготовим текст запроса, который необходимо выполнять в обработчике.
	ПодготовитьТекстЗапросаПриПолученииДанныхНаСервере();

	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
		СписокНоменклатуры,
		"Услуга",
		Услуги,
		ТипЗнч(Услуги) = Тип("Булево"));
		
	// В режиме "Только остатки" фильтрация данных осуществляется настройками динамического списка.
	//
	// В режиме "Все" получение данных из регистра бухгалтерии выполняется в обработчике
	// СписокНоменклатурыПриПолученииДанныхНаСервере() обычным запросом,
	// которому передаются ранее подготовленные ПараметрыЗапроса.
	// Настройки динамического списка при этой не меняются.
	
	Если ПоказыватьТолькоОстатки Тогда
		
		ДоступныеПоляОтбора = СписокНоменклатуры.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора;
	
		Для каждого КлючИЗначение Из ПараметрыЗапроса Цикл
		
			ИмяПараметра      = КлючИЗначение.Ключ;
			ЗначениеПараметра = КлючИЗначение.Значение;
			
			// Фильтрация может происходить как с помощью параметров в запросе динамического списка,
			// так и с помощью отборов системы компоновки данных.
			ПараметрКомпоновкиДанных = СписокНоменклатуры.Параметры.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));

			Если ПараметрКомпоновкиДанных <> Неопределено Тогда
				// Фильтруем с помощью параметра запроса.
				ПараметрКомпоновкиДанных.Значение      = ЗначениеПараметра;
				ПараметрКомпоновкиДанных.Использование = Истина;

			Иначе
				Если ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных(ИмяПараметра)) = Неопределено Тогда
					// Некоторые ключи из ПараметровЗапроса используются для отбора цен номенклатуры,
					// которые всегда получаются через обработчик ПриПолученииДанныхНаСервере().
					// Поэтому для них не устанавливаем отборы динамического списка.
					Продолжить;
				КонецЕсли;
			
				// Фильтруем с помощью отборов СКД.
				Если ТипЗнч(ЗначениеПараметра) = Тип("Массив") Тогда
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.ВСписке;
				Иначе
					ВидСравненияОтбора = ВидСравненияКомпоновкиДанных.Равно;
				КонецЕсли;

				ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
					СписокНоменклатуры,
					ИмяПараметра,
					ЗначениеПараметра, 
					Истина,
					ВидСравненияОтбора);
			КонецЕсли;
		
		КонецЦикла;
	
		УстановитьЗначениеПараметраПоказыватьТолькоОстаткиСпискаНоменклатуры();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьОтборыСпискаНоменклатуры()

	// Удаляет все установленные отборы динамического списка, кроме отбора по группе номенклатуры,
	// т.к. этот отбор устанавливается по выделенной строке дерева групп и при смене варианта отображения
	// его нужно не потерять.
	// Отборы, которые пользователь может наложить через поле ввода "Найти" на форме, 
	// устанавливаются в ФиксированныхНастройках компоновщика настроек, поэтому они не меняются.

	ПолеСсылка = Новый ПолеКомпоновкиДанных("Ссылка");
	
	ЭлементыОтбора = СписокНоменклатуры.КомпоновщикНастроек.Настройки.Отбор.Элементы;
	
	ЭлементыКУдалению = Новый Массив;

	Для каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбора) <> Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭлементОтбора.ЛевоеЗначение <> ПолеСсылка Тогда
			ЭлементыКУдалению.Добавить(ЭлементОтбора);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого УдаляемыйЭлемент Из ЭлементыКУдалению Цикл
		ЭлементыОтбора.Удалить(УдаляемыйЭлемент);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ТекстЗапросаДинамическогоСписка()
	
	// Внимание!
	// При редактировании запросов необходимо синхронно вносить изменения в текст запроса 
	// в настройках динамического списка реквизита формы СписокНоменклатуры.

	Если ПоказыватьТолькоОстатки Тогда

		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СправочникНоменклатура.Ссылка КАК Ссылка,
		|	СправочникНоменклатура.Услуга КАК Услуга,
		|	СправочникНоменклатура.Наименование КАК Наименование,
		|	СправочникНоменклатура.НаименованиеПолное КАК НаименованиеПолное,
		|	СправочникНоменклатура.Код КАК Код,
		|	СправочникНоменклатура.Артикул КАК Артикул,
		|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЕСТЬNULL(ОстаткиНаСкладе.КоличествоОстаток, 0) КАК КоличествоОстаток,
		|	0 КАК Цена,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.Остатки({(&ДатаОстаткиЦены)}, Счет В (&СчетаЗапасов), {(&ВидыСубконто)}, Организация В (&СписокОрганизаций) {(Подразделение) КАК Подразделение, (ВЫРАЗИТЬ(Субконто1 КАК Справочник.Номенклатура)).* КАК Ссылка, (Субконто2)}) КАК ОстаткиНаСкладе
		|		ПО СправочникНоменклатура.Ссылка = ОстаткиНаСкладе.Субконто1
		|ГДЕ
		|	НЕ СправочникНоменклатура.ЭтоГруппа";
		
	Иначе

		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СправочникНоменклатура.Ссылка КАК Ссылка,
		|	СправочникНоменклатура.Услуга КАК Услуга,
		|	СправочникНоменклатура.Наименование КАК Наименование,
		|	СправочникНоменклатура.НаименованиеПолное КАК НаименованиеПолное,
		|	СправочникНоменклатура.Код КАК Код,
		|	СправочникНоменклатура.Артикул КАК Артикул,
		|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	0 КАК КоличествоОстаток,
		|	0 КАК Цена,
		|	ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК Валюта
		|ИЗ
		|	Справочник.Номенклатура КАК СправочникНоменклатура
		|ГДЕ
		|	НЕ СправочникНоменклатура.ЭтоГруппа";
	
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаСервере
Функция ПодготовитьТекстЗапросаПриПолученииДанныхНаСервере()

	НастройкиПодбора = СписокНоменклатуры.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.НастройкиПодбора;
	ПараметрыЗапроса = СписокНоменклатуры.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.ПараметрыЗапроса;
	НомераТаблиц     = НастройкиПодбора.НомераТаблицПриПолученииДанныхНаСервере;

	НастройкиПодбора.ТекстЗапросаПриПолученииДанныхНаСервере = "";
	НомераТаблиц.Очистить();
	
	ТекстыЗапросов = Новый Массив;
	
	Если ПоказыватьОстатки И НЕ ПоказыватьТолькоОстатки Тогда
		// Отображение остатков требуется, при этом выбран режим "Все" (не только остатки).
		// В этом случае остатки получаем запросом в обработчике.
		// Если выбран режим "Только остатки", то запрос к регистру бухгалтерии выполняется в самом динамическом списке.
		ТекстыЗапросов.Добавить(ТекстЗапросаОстаткиНаСкладе(ПараметрыЗапроса));
		НомераТаблиц.Вставить("ОстаткиНаСкладе", НомераТаблиц.Количество());
	КонецЕсли;

	Если ПоказыватьЦены Тогда
		ТекстыЗапросов.Добавить(ТекстЗапросаЦеныНоменклатуры());
		НомераТаблиц.Вставить("ЦеныНоменклатуры", НомераТаблиц.Количество());
	КонецЕсли;

	Если ТекстыЗапросов.Количество() > 0 Тогда
		НастройкиПодбора.ТекстЗапросаПриПолученииДанныхНаСервере = 
			СтрСоединить(ТекстыЗапросов, ОбщегоНазначения.РазделительПакетаЗапросов());
	КонецЕсли;

КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаЦеныНоменклатуры()

	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЦеныНоменклатуры.Номенклатура КАК Номенклатура,
	|	ЦеныНоменклатуры.Валюта КАК Валюта,
	|	ЦеныНоменклатуры.Цена КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры.СрезПоследних(
	|			&ДатаОстаткиЦены,
	|			Номенклатура В (&СписокНоменклатуры)
	|				И ТипЦен = &ТипЦен
	|				И Валюта = &ВалютаЦены) КАК ЦеныНоменклатуры";

	Возврат ТекстЗапроса;

КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаОстаткиНаСкладе(ПараметрыЗапроса)

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОстаткиНаСкладе.Субконто1 КАК Номенклатура,
	|	ЕСТЬNULL(ОстаткиНаСкладе.КоличествоОстаток, 0) КАК КоличествоОстаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ДатаОстаткиЦены,
	|			Счет В (&СчетаЗапасов),
	|			&ВидыСубконто,
	|			Организация В (&СписокОрганизаций)
	|				И &ДополнительныеУсловия) КАК ОстаткиНаСкладе";
	
	ДополнительныеУсловия = Новый Массив;

	Если ПараметрыЗапроса.Свойство("Подразделение") Тогда
		ДополнительныеУсловия.Добавить("Подразделение = &Подразделение");
	КонецЕсли;

	// Субконто1 - всегда список номенклатуры, установим отборы по Субконто2 и Субконто3 при необходимости.
	ДополнительныеУсловия.Добавить("Субконто1 В (&СписокНоменклатуры)");

	Для НомерСубконто = 2 По 3 Цикл
		ИмяСубконто = "Субконто" + НомерСубконто;
		ЗначениеСубконто = Неопределено;

		Если НЕ ПараметрыЗапроса.Свойство(ИмяСубконто, ЗначениеСубконто) Тогда
			Продолжить;
		КонецЕсли;

		Если ТипЗнч(ЗначениеСубконто) = Тип("Массив") Тогда
			ДополнительныеУсловия.Добавить(ИмяСубконто + " В (&" + ИмяСубконто + ")");
		Иначе
			ДополнительныеУсловия.Добавить(ИмяСубконто + " = &" + ИмяСубконто + "");
		КонецЕсли;

	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныеУсловия", СтрСоединить(ДополнительныеУсловия, " И "));
	
	Возврат ТекстЗапроса;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСписокПолейИнформационнойНадписи(Форма)
	
	СписокПолей = Новый Массив;
	
	Если Форма.ПоказыватьОстатки Тогда
		СписокПолей.Добавить("Организация");
		Если Форма.ВедетсяУчетПоПодразделелениям Тогда
			СписокПолей.Добавить("Подразделение");
		КонецЕсли; 
	КонецЕсли;
	
	Если Форма.ПоказыватьОстатки ИЛИ Форма.ПоказыватьЦены Тогда
		СписокПолей.Добавить("ДатаРасчетов");
	КонецЕсли;
	
	Если Форма.ПоказыватьОстатки И Форма.ВедетсяУчетПоСкладам
		И (Форма.ВидПодбора = "НТТ" ИЛИ Форма.ВидПодбора = "") Тогда
		
		СписокПолей.Добавить("Склад");
		
	КонецЕсли;
	
	Если Форма.ПоказыватьЦены Тогда
		СписокПолей.Добавить("ТипЦен");
	КонецЕсли;
	
	Если Форма.ВидПодбора = "Комиссионер" ИЛИ Форма.ВидПодбора = "Комитент" Тогда
		СписокПолей.Добавить("Контрагент");
	КонецЕсли;
	
	Возврат Новый ФиксированныйМассив(СписокПолей);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИнформационнуюНадписьПараметрыПодбора(Форма)
	
	СписокПолей = ПолучитьСписокПолейИнформационнойНадписи(Форма);
	
	ТекстНадписи = "";
	Для Каждого Поле Из СписокПолей Цикл
		Если ЗначениеЗаполнено(Форма[Поле]) Тогда
			ТекстНадписи = ТекстНадписи + Форма[Поле] + "; ";
		КонецЕсли;
	КонецЦикла;
	
	ТекстНадписи = Лев(ТекстНадписи, СтрДлина(ТекстНадписи) - 2);
	
	Форма.ИнформационнаяНадписьПараметровПодбора = ТекстНадписи;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьОтборПоИерархииНоменклатуры()

	УстановитьОтборПоИерархииНоменклатуры(Элементы.ИерархияНоменклатуры.ТекущаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоИерархииНоменклатуры(ГруппаНоменклатуры)
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(СписокНоменклатуры, "Ссылка",
		ГруппаНоменклатуры, ЗначениеЗаполнено(ГруппаНоменклатуры), ВидСравненияКомпоновкиДанных.ВИерархии);
	
КонецПроцедуры

&НаСервере
Функция ПоместитьПодобраннуюНоменклатуруВХранилище()
	
	ТаблицаНоменклатуры = Объект.ПодобраннаяНоменклатура.Выгрузить();
	ТаблицаНоменклатуры.Колонки.Добавить("КиЗ_ГИСМ", Новый ОписаниеТипов("СправочникСсылка.КонтрольныеЗнакиГИСМ"));
	
	АдресПодобраннойНоменклатурыВХранилище = ПоместитьВоВременноеХранилище(ТаблицаНоменклатуры, УникальныйИдентификатор);
	
	Возврат АдресПодобраннойНоменклатурыВХранилище;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЦенуПослеПересчета(Знач Цена, Знач ВалютаНач, Знач ВалютаКон, Знач ДатаПересчета, Знач Курс, Знач Кратность)
	
	КурсКратностьНач = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаНач, ДатаПересчета);
	Если Курс = 0 или Кратность = 0 Тогда
		КурсКратностьКон = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаКон, ДатаПересчета);
		
		Возврат РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Цена, ВалютаНач, ВалютаКон,
			КурсКратностьНач.Курс, КурсКратностьКон.Курс,
			КурсКратностьНач.Кратность, КурсКратностьКон.Кратность);
	Иначе
		Возврат РаботаСКурсамиВалютКлиентСервер.ПересчитатьИзВалютыВВалюту(Цена, ВалютаНач, ВалютаКон,
			КурсКратностьНач.Курс, Курс,
			КурсКратностьНач.Кратность, Кратность);
	КонецЕсли;
		
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЦенуДокумента(ДанныеОбъекта, Номенклатура)
	
	СведенияОНоменклатуре = БухгалтерскийУчетПереопределяемый.ПолучитьСведенияОНоменклатуре(
	Номенклатура, ДанныеОбъекта, Ложь, Истина);
	
	Цена = СведенияОНоменклатуре.Цена;
	
	Возврат Цена;
	
КонецФункции

&НаСервере
Процедура УстановитьЗначениеПараметраПоказыватьТолькоОстаткиСпискаНоменклатуры()

	Если ПоказыватьОстатки Тогда
		
		ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(
			СписокНоменклатуры, 
			"КоличествоОстаток", 
			0, 
			ПоказыватьТолькоОстатки, 
			?(ПоказыватьОтрицательныеОстатки, ВидСравненияКомпоновкиДанных.НеРавно, ВидСравненияКомпоновкиДанных.Больше)
			);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьИтоги(Форма)
	
	Форма.ИтогиСумма = Форма.Объект.ПодобраннаяНоменклатура.Итог("Сумма");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПодобраннаяНоменклатураВыбраннымиСтрокамиИзСписокНоменклатуры(ЗаполнитьОстатками)
	
	Для Каждого СтрокаСписокНоменклатуры Из Элементы.СписокНоменклатуры.ВыделенныеСтроки Цикл
		
		ЗаполнитьСтрокуПодобраннаяНоменклатура(СтрокаСписокНоменклатуры, ЗаполнитьОстатками);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтрокуПодобраннаяНоменклатура(Строка, ЗаполнитьОстатками)
	
	ДанныеНоменклатуры = Элементы.СписокНоменклатуры.ДанныеСтроки(Строка);
	
	Если ДанныеНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Номенклатура = ДанныеНоменклатуры.Ссылка;
	
	Результат = Новый Структура;
	Результат.Вставить("Номенклатура", Номенклатура);
	Результат.Вставить("Количество",   1);
	Результат.Вставить("Цена",         0);
	
	Если ЕстьЦена Тогда
		
		Результат.Цена = Цена(Номенклатура, ДанныеНоменклатуры);
		
	КонецЕсли;
	
	Если ЗаполнитьОстатками Тогда
		
		Результат.Количество = ДанныеНоменклатуры.КоличествоОстаток;
		
	КонецЕсли;
	
	ДобавитьВыбраннуюНоменклатуруЗавершение(Результат, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Функция Цена(Номенклатура, ДанныеНоменклатуры)
	
	Цена = 0;
	Если ДанныеНоменклатуры.Свойство("Цена") Тогда
		
		ТекущаяВалюта = ?(ДанныеНоменклатуры.Свойство("Валюта") И ЗначениеЗаполнено(ДанныеНоменклатуры.Валюта),
			ДанныеНоменклатуры.Валюта, ВалютаЦены);
			
		Цена = ?(ТекущаяВалюта = Валюта, ДанныеНоменклатуры.Цена,
			ПолучитьЦенуПослеПересчета(ДанныеНоменклатуры.Цена, ТекущаяВалюта, Валюта, ДатаРасчетов, Курс, Кратность));
	ИначеЕсли УстанавливатьЦеныДокументов Тогда
		ДанныеОбъекта = Новый Структура("Организация, Склад, ДоговорКонтрагента, СпособЗаполненияЦены, СтавкаНДС,
			| КурсДокумента, КратностьДокумента, Реализация, ДеятельностьНаПатенте, СуммаВключаетНДС, ЗаполнятьЦеныПродажаИПокупка");
			
		ЗаполнитьЗначенияСвойств(ДанныеОбъекта,ЭтаФорма);
		
		ДанныеОбъекта.Вставить("Дата",			  ДатаРасчетов);
		ДанныеОбъекта.Вставить("ВалютаДокумента", Валюта);
		
		Цена = ПолучитьЦенуДокумента(ДанныеОбъекта, Номенклатура);
		
	КонецЕсли;
	
	Возврат Цена;
	
КонецФункции

#КонецОбласти