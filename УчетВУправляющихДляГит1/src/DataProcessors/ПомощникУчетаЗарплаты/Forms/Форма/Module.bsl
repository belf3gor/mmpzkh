#Область ОбъявлениеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Организация     = Параметры.Организация;
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	РежимВыплатыПоДокументу     = Параметры.РежимВыплатыПоДокументу;
	РежимВыплатыЗаПериод        = Параметры.РежимВыплатыЗаПериод;
	
	ВалютаРегламентированногоУчета = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
	УчетДенежныхСредствБП.УстановитьБанковскийСчет(Объект.СчетОрганизации,
													Объект.Организация,
													ВалютаРегламентированногоУчета);
	
	Объект.ПериодРегистрации = Параметры.ПериодСобытия;
	ВидНалога                = Параметры.ВидНалога;
	
	Правило_НДФЛ   = Обработки.ПомощникУчетаЗарплаты.ТекущееПравилоЗадачи("НДФЛ_Агент_Уплата",
																			"НДФЛ_Уплата",
																			,
																			Объект.ПериодРегистрации);
	Правило_Взносы = Обработки.ПомощникУчетаЗарплаты.ТекущееПравилоЗадачи("СтраховыеВзносы",
																			"_Уплата",
																			"Допвзносы",
																			Объект.ПериодРегистрации);
	
	ЭтоПредприниматель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ЮридическоеФизическоеЛицо") =
		Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	Если ЭтоПредприниматель Тогда
		ЕстьБанковскийСчет = 
			Справочники.БанковскиеСчета.ПолучитьКоличествоПодчиненныхЭлементовПоВладельцу(Объект.Организация) <> 0;
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда
		РабочаяДатаПользователя = НачалоДня(ОбщегоНазначения.ТекущаяДатаПользователя());
		Если РабочаяДатаПользователя = НачалоДня(ТекущаяДатаСеанса()) Тогда
			Объект.ПериодРегистрации = НачалоМесяца(ТекущаяДатаСеанса() - 21*24*60*60);
		Иначе
			Объект.ПериодРегистрации = НачалоМесяца(РабочаяДатаПользователя);
		КонецЕсли;
	КонецЕсли;
	
	ПредставлениеПериодаРегистрации = ВыборПериодаКлиентСервер.ПолучитьПредставлениеПериодаОтчета(
										Перечисления.ДоступныеПериодыОтчета.Месяц,
										НачалоМесяца(Объект.ПериодРегистрации),
										КонецМесяца(Объект.ПериодРегистрации));
	
	Если РежимВыплатыЗаПериод Тогда
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Зарплата за %1 г. (%2)'"),
																			ПредставлениеПериодаРегистрации,
																			Объект.Организация.НаименованиеСокращенное);
	ИначеЕсли РежимВыплатыПоДокументу Тогда
		Если ТипЗнч(Параметры.РасчетныйДокумент) = Тип("ДокументСсылка.Отпуск") Тогда
			ВидВыплаты= (НСтр("ru = 'Отпускные'"));
		ИначеЕсли ТипЗнч(Параметры.РасчетныйДокумент) = Тип("ДокументСсылка.БольничныйЛист") Тогда
			ВидВыплаты = (НСтр("ru = 'Больничные'"));
		Иначе
			ВидВыплаты = (НСтр("ru = 'Зарплата'"));
		КонецЕсли;
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '%1 за %2 г. (%3)'"),
																			ВидВыплаты,
																			ПредставлениеПериодаРегистрации,
																			Объект.Организация.НаименованиеСокращенное);
	ИначеЕсли Параметры.Аванс Тогда
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Аванс за %1 г. (%2)'"),
																			ПредставлениеПериодаРегистрации,
																			Объект.Организация.НаименованиеСокращенное);
	Иначе
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Зарплата, НДФЛ и взносы за %1 г. (%2)'"),
																			ПредставлениеПериодаРегистрации,
																			Объект.Организация.НаименованиеСокращенное);
	КонецЕсли;
	
	ВедетсяРасчетЗарплатыДляНебольшихОрганизаций = УчетЗарплаты.РасчетЗарплатыДляНебольшихОрганизаций();
	
	ВидимостьПодгруппРасчета = ВедетсяРасчетЗарплатыДляНебольшихОрганизаций
								И НЕ РежимВыплатыПоДокументу
								И НЕ РежимВыплатыЗаПериод;
	
	Элементы.ГруппаРасчетКоманды.Видимость          = ВидимостьПодгруппРасчета;
	Элементы.ГруппаРасчетПодвал.Видимость           = ВидимостьПодгруппРасчета;
	Элементы.ГруппаРасчетШапка.ОтображениеПодсказки = ?(ВидимостьПодгруппРасчета,
														ОтображениеПодсказки.Кнопка,
														ОтображениеПодсказки.Нет);
	
	Если ЭтоПредприниматель Тогда
		Элементы.ДобавитьВедомостьБанк.Видимость      = ЕстьБанковскийСчет;
	КонецЕсли;
	
	Если НЕ ЕстьОбособленныеПодразделения() Тогда
		Элементы.ОКАТОИП.Видимость    = Ложь;
		Элементы.ОКАТО.Видимость      = Ложь;
		Элементы.ДействиеНалог.Ширина = 67;
	Иначе
		Если ЭтоПредприниматель Тогда
			Элементы.ОКАТО.Ширина = 16;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ДекорацияОписаниеДокументыАванс.Видимость = Параметры.Аванс;
	Если Параметры.Аванс Тогда
		
		Элементы.ГруппаРасчет.Видимость                = Ложь;
		Элементы.ГруппаНалог.Видимость                 = Ложь;
		Элементы.ГруппаВзносы.Видимость                = Ложь;
		Элементы.ДекорацияВыплата.Видимость            = Ложь;
		Элементы.ОписаниеДокументы.Видимость           = Ложь;
		Элементы.ДекорацияВыплатаСтатикКонец.Видимость = Ложь;
		Элементы.СуммаЗадолженность.Видимость          = Ложь;
		
		Элементы.ДекорацияДокументы.Заголовок = НСтр("ru = 'Выплата аванса'");
		
	КонецЕсли;
	
	Если РежимВыплатыПоДокументу ИЛИ РежимВыплатыЗаПериод Тогда
		
		Элементы.ДекорацияРасчетНачало.Видимость = Ложь;
		Элементы.ГруппаВыплатаКоманды.Видимость  = Ложь;
		Элементы.ГруппаВыплатаПодвал.Видимость   = Ложь;
		Элементы.ГруппаВзносы.Видимость          = Ложь;
		
		Элементы.ДекорацияРасчет.Заголовок    = НСтр("ru = 'Расчет'");
		Элементы.ДекорацияДокументы.Заголовок = НСтр("ru = 'Выплата и оплата НДФЛ'");
		Элементы.ДекорацияВыплата.Заголовок   = НСтр("ru = 'Выплата'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Элементы.СтраницыСобытий.ТекущаяСтраница = Элементы.СтраницаСобытияПустая;
	
	СтруктураРазделов = СформироватьСтруктуруРазделов(Истина,
														Истина,
														Истина,
														Истина,
														НЕ Параметры.РежимВыплатыПоДокументу
															И НЕ Параметры.РежимВыплатыЗаПериод);
	
	Результат = ВыполнитьПолучениеДанныхНаСервере(СтруктураРазделов);
	
	Если НЕ Результат.ЗаданиеВыполнено Тогда
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗаданияПриОткрытии", 0.5, Истина);
	Иначе
		ЗагрузитьРезультат(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ПлатежныйДокумент_УплатаНалогов" Тогда
		Если Параметр.ПоказательПериода = ПоказательПериода И Параметр.ДокументОснование = Неопределено Тогда
			Отбор = Новый Структура("КБК, ОКАТО");
			ЗаполнитьЗначенияСвойств(Отбор, Параметр);
			НайденныеПлатежи = Платежи_НДФЛ.НайтиСтроки(Отбор);
			Если НайденныеПлатежи.Количество() = 1 Тогда
				Платеж = НайденныеПлатежи[0];
				Платеж.ПлатежноеПоручение = Параметр.Ссылка;
				Платеж.Оплачено           = Параметр.Оплачено;
				Платеж.Сумма              = Параметр.Сумма;
				НомерКонтейнера = ЗадачиБухгалтераКлиентСервер.НомерКонтейнера(Платеж.ПолучитьИдентификатор());
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_ПлатежныйДокумент_ВыплатаЗарплаты" Тогда
		Если Параметр.Организация = Объект.Организация Тогда
			Если Параметр.Свойство("Ведомость") Тогда
				Отбор = Новый Структура("Ведомость");
				ЗаполнитьЗначенияСвойств(Отбор, Параметр);
				НайденныеВедомости = Ведомости.НайтиСтроки(Отбор);
				Если НайденныеВедомости.Количество() = 1 Тогда
					Платеж = НайденныеВедомости[0];
					Если НЕ ЗначениеЗаполнено(Платеж.ПлатежныеДокументы)
						ИЛИ Платеж.ПлатежныеДокументы = Параметр.Ссылка Тогда
						Платеж.ПлатежныеДокументы              = Параметр.Ссылка;
						Платеж.Оплачено                        = Параметр.Оплачено;
						Платеж.ПлатежныеДокументыПредставление = ПредставлениеПлатежногоДокумента(Параметр.Ссылка,
																									Параметр.Оплачено);
					Иначе
						Если ТипЗнч(Платеж.ПлатежныеДокументы) <> Тип("СписокЗначений") Тогда
							СписокДокументов = Новый СписокЗначений;
							СписокДокументов.Добавить(Платеж.ПлатежныеДокументы);
							Платеж.ПлатежныеДокументы = СписокДокументов;
						КонецЕсли;
						Платеж.ПлатежныеДокументы.Добавить(Параметр.Ссылка);
						Платеж.ПлатежныеДокументыПредставление = 
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Несколько платежных документов (%1)'"),
							Платеж.ПлатежныеДокументы.Количество());
						Платеж.Оплачено                        = Мин(Параметр.Оплачено, Платеж.Оплачено);
					КонецЕсли;
					НомерКонтейнера = ЗадачиБухгалтераКлиентСервер.НомерКонтейнера(Платеж.ПолучитьИдентификатор());
				КонецЕсли;
			КонецЕсли;
			Если Параметр.Свойство("Ведомости") Тогда
				МассивВедомостей = Параметр.Ведомости;
				Для Каждого ЗначениеМассива ИЗ МассивВедомостей Цикл
					Отбор = Новый Структура("Ведомость", ЗначениеМассива);
					НайденныеВедомости = Ведомости.НайтиСтроки(Отбор);
					Если НайденныеВедомости.Количество() = 1 Тогда
						Платеж = НайденныеВедомости[0];
						Платеж.ПлатежныеДокументы              = Параметр.Ссылка;
						Платеж.Оплачено                        = Параметр.Оплачено;
						Платеж.ПлатежныеДокументыПредставление = 
							ПредставлениеПлатежногоДокумента(Параметр.Ссылка, Параметр.Оплачено);
						НомерКонтейнера = ЗадачиБухгалтераКлиентСервер.НомерКонтейнера(Платеж.ПолучитьИдентификатор());
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДействиеНалог(Команда)
	
	ДействиеПлатеж(Команда, "НДФЛ");
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеВзносы(Команда)
	
	ДействиеПлатеж(Команда, "Взносы");
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеНалогБанк(Команда)
	
	ДействиеПлатеж(Команда, "НДФЛ", "ПлатежноеПоручение");
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеНалогКасса(Команда)
	
	ДействиеПлатеж(Команда, "НДФЛ", "РасходныйКассовыйОрдер");
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеВзносыБанк(Команда)
	
	ДействиеПлатеж(Команда, "Взносы", "ПлатежноеПоручение");
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеВзносыКасса(Команда)
	
	ДействиеПлатеж(Команда, "Взносы", "РасходныйКассовыйОрдер");
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеПлатежныйДокумент(Команда)
	
	Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Команда.Имя);
	Если Идентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийДокумент = ПараметрыФормыПлатежногоДокументаВедомости(Идентификатор);
	Если ТекущийДокумент <> Неопределено Тогда
		Если ТипЗнч(ТекущийДокумент.ПлатежныеДокументы) = Тип("СписокЗначений") Тогда
			
			ВозвращаемыеПараметры = Новый Структура("Ссылка, ВерсияДанных, СписокДокументов", 
													ТекущийДокумент.ПлатежныеДокументы,
													ТекущийДокумент.ПлатежныеДокументыВерсияДанных,
													ТекущийДокумент.ПлатежныеДокументы);
			
			ОткрытьДокументОповещение = Новый ОписаниеОповещения("ОбработатьРедактированиеВедомости",
																ЭтотОбъект,
																ВозвращаемыеПараметры);
			
			ПараметрыВедомости = ПараметрыФормыВедомости(Идентификатор);
			ПараметрыЗаполнения  = Новый Структура();
			ПараметрыЗаполнения.Вставить("Организация",        Объект.Организация);
			ПараметрыЗаполнения.Вставить("СчетОрганизации",    Объект.СчетОрганизации);
			ПараметрыЗаполнения.Вставить("ПлатежнаяВедомость", ПараметрыВедомости.Ведомость);
			ОткрытьФорму("Обработка.ВыплатаЗарплатыПлатежнымиПоручениями.Форма",
							ПараметрыЗаполнения,
							ЭтаФорма,
							,
							,
							,
							ОткрытьДокументОповещение,
							РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			
			ВозвращаемыеПараметры = Новый Структура("Ссылка, ВерсияДанных", 
				ТекущийДокумент.ПлатежныеДокументы, ТекущийДокумент.ПлатежныеДокументыВерсияДанных);
				
			ОткрытьДокументОповещение = Новый ОписаниеОповещения("ОбработатьРедактированиеВедомости",
																	ЭтотОбъект,
																	ВозвращаемыеПараметры);
			
			ИмяФормыПлатежногоДокумента = ?(ТипЗнч(ТекущийДокумент.ПлатежныеДокументы) =
				Тип("ДокументСсылка.РасходныйКассовыйОрдер"),
				"Документ.РасходныйКассовыйОрдер.ФормаОбъекта", "Документ.ПлатежноеПоручение.ФормаОбъекта");
			ОткрытьФорму(ИмяФормыПлатежногоДокумента,
				Новый Структура("Ключ",
					ТекущийДокумент.ПлатежныеДокументы),
				ЭтаФорма,
				,
				,
				,
				ОткрытьДокументОповещение,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
	Иначе
		ОткрытьДокументОповещение = Новый ОписаниеОповещения("ОбработатьРедактированиеВедомости", ЭтотОбъект);
		ПараметрыВедомости = ПараметрыФормыВедомости(Идентификатор);
		Если ТипЗнч(ПараметрыВедомости.Ведомость) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу") Тогда
			МассивДокументовКасса = Новый Массив;
			МассивДокументовКасса.Добавить(ПараметрыВедомости.Ведомость);
			ЗначенияЗаполнения  = Новый Структура("ДанныеЗаполнения",    МассивДокументовКасса);
			ПараметрыЗаполнения = Новый Структура("ЗначенияЗаполнения",  ЗначенияЗаполнения);
			ОткрытьФорму("Документ.РасходныйКассовыйОрдер.ФормаОбъекта",
				ПараметрыЗаполнения,
				ЭтаФорма,
				,
				,
				,
				ОткрытьДокументОповещение,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		ИначеЕсли ТипЗнч(ПараметрыВедомости.Ведомость) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк") Тогда
			Если ЗначениеЗаполнено(ПараметрыВедомости.ЗарплатныйПроект) Тогда
				МассивДокументовБанк = Новый Массив;
				МассивДокументовБанк.Добавить(ПараметрыВедомости.Ведомость);
				ЗначенияЗаполнения  = Новый Структура("ДанныеЗаполнения",    МассивДокументовБанк);
				ПараметрыЗаполнения = Новый Структура("ЗначенияЗаполнения",  ЗначенияЗаполнения);
				ОткрытьФорму("Документ.ПлатежноеПоручение.ФормаОбъекта",
					ПараметрыЗаполнения,
					ЭтаФорма,
					,
					,
					,
					ОткрытьДокументОповещение,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			Иначе
				ПараметрыЗаполнения  = Новый Структура();
				ПараметрыЗаполнения.Вставить("Организация",        Объект.Организация);
				ПараметрыЗаполнения.Вставить("СчетОрганизации",    Объект.СчетОрганизации);
				ПараметрыЗаполнения.Вставить("ПлатежнаяВедомость", ПараметрыВедомости.Ведомость);
				ОткрытьФорму("Обработка.ВыплатаЗарплатыПлатежнымиПоручениями.Форма",
					ПараметрыЗаполнения,
					ЭтаФорма,
					,
					,
					,
					ОткрытьДокументОповещение,
					РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеВыплата(Команда)
	
	Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Команда.Имя);
	Если Идентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВедомости = ПараметрыФормыВедомости(Идентификатор);
	ТекущийДокумент = ПараметрыВедомости.Ведомость;
	Если ТекущийДокумент <> Неопределено Тогда
		ИмяФормыПлатежногоДокумента = ?(ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк"),
			"Документ.ВедомостьНаВыплатуЗарплатыВБанк.ФормаОбъекта", "Документ.ВедомостьНаВыплатуЗарплатыВКассу.ФормаОбъекта");
		
		ВозвращаемыеПараметры = Новый Структура("Ссылка, ВерсияДанных",
												ТекущийДокумент,
												ПараметрыВедомости.ВедомостьВерсияДанных);
		ОткрытьДокументОповещение = Новый ОписаниеОповещения("ОбработатьРедактированиеВедомости",
																ЭтотОбъект,
																ВозвращаемыеПараметры);
		ОткрытьФорму(ИмяФормыПлатежногоДокумента,
			Новый Структура("Ключ", ТекущийДокумент),
			ЭтаФорма,
			,
			,
			,
			ОткрытьДокументОповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеРасчет(Команда)
	
	Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Команда.Имя);
	Если Идентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ПараметрыФормыРасчета(Идентификатор);
	ТекущийДокумент = ТекущаяСтрока.Документ;
	Если ТекущийДокумент <> Неопределено Тогда
		Если ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.Отпуск") Тогда
			ИмяОбъекта = "Отпуск";
		ИначеЕсли ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.БольничныйЛист") Тогда
			ИмяОбъекта = "БольничныйЛист";
		Иначе
			ИмяОбъекта = "НачислениеЗарплаты";
		КонецЕсли;
		
		СведенияОДокументе = Новый Структура;
		СведенияОДокументе.Вставить("Ссылка",       ТекущийДокумент);
		СведенияОДокументе.Вставить("Сотрудник",    ТекущаяСтрока.Сотрудник);
		СведенияОДокументе.Вставить("Сумма",        ТекущаяСтрока.Сумма);
		СведенияОДокументе.Вставить("ВерсияДанных", ТекущаяСтрока.ВерсияДанных);
		
		ОткрытьДокументОповещение = Новый ОписаниеОповещения("ОбработатьДобавлениеРасчетногоДокумента",
																ЭтотОбъект,
																Новый Структура("СведенияОДокументе", СведенияОДокументе));
		ОткрытьФорму("Документ." + ИмяОбъекта + ".ФормаОбъекта",
			Новый Структура("Ключ", ТекущийДокумент),
			ЭтаФорма,
			,
			,
			,
			ОткрытьДокументОповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьОтпуск(Команда)
	
	ДобавитьДокументОповещение = Новый ОписаниеОповещения("ОбработатьДобавлениеРасчетногоДокумента", ЭтотОбъект);
	
	ПараметрыДокумента = Новый Структура("Организация, ПериодРегистрации",
										Объект.Организация, НачалоМесяца(Объект.ПериодРегистрации));
	ОткрытьФорму("Документ.Отпуск.ФормаОбъекта",
		Новый Структура("ЗначенияЗаполнения", ПараметрыДокумента),
		ЭтаФорма,
		,
		,
		,
		ДобавитьДокументОповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьБольничный(Команда)
	
	ДобавитьДокументОповещение = Новый ОписаниеОповещения("ОбработатьДобавлениеРасчетногоДокумента", ЭтотОбъект);
	
	ПараметрыДокумента = Новый Структура("Организация, ПериодРегистрации",
										Объект.Организация, НачалоМесяца(Объект.ПериодРегистрации));
	ОткрытьФорму("Документ.БольничныйЛист.ФормаОбъекта",
		Новый Структура("ЗначенияЗаполнения", ПараметрыДокумента),
		ЭтаФорма,
		,
		,
		,
		ДобавитьДокументОповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВедомостьБанк(Команда)
	
	ДобавитьДокументОповещение = Новый ОписаниеОповещения("ОбработатьРедактированиеВедомости", ЭтотОбъект);
	
	ПараметрыДокумента = Новый Структура("Организация, ПериодРегистрации",
										Объект.Организация, НачалоМесяца(Объект.ПериодРегистрации));
	ОткрытьФорму("Документ.ВедомостьНаВыплатуЗарплатыВБанк.ФормаОбъекта",
		Новый Структура("ЗначенияЗаполнения", ПараметрыДокумента),
		ЭтаФорма,
		,
		,
		,
		ДобавитьДокументОповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВедомостьКасса(Команда)
	
	ДобавитьДокументОповещение = Новый ОписаниеОповещения("ОбработатьРедактированиеВедомости", ЭтотОбъект);
	
	ПараметрыДокумента = Новый Структура("Организация, ПериодРегистрации",
										Объект.Организация, НачалоМесяца(Объект.ПериодРегистрации));
	ОткрытьФорму("Документ.ВедомостьНаВыплатуЗарплатыВКассу.ФормаОбъекта",
		Новый Структура("ЗначенияЗаполнения", ПараметрыДокумента),
		ЭтаФорма,
		,
		,
		,
		ДобавитьДокументОповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьДокументы(Команда)
	
	Результат = СформироватьДокументыНаСервере();
	
	Если НЕ Результат.ЗаданиеВыполнено Тогда
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 0.5, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	Иначе
		ЗагрузитьРезультат();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ВспомогательныеПроцедурыИФункции

&НаСервере
Функция ЕстьОбособленныеПодразделения()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Ссылка
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ПодразделенияОрганизаций.Владелец = &Организация
	|	И ПодразделенияОрганизаций.ОбособленноеПодразделение";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

&НаСервере
Процедура ЗаполнитьНаименованияБюджетнойКлассификации(ИмяТаблицыПлатежей)
	
	Для Каждого Платеж Из ЭтотОбъект[ИмяТаблицыПлатежей] Цикл
		
		Если ЗначениеЗаполнено(Платеж.ВидНалога) Тогда
			// Вид налога по декларации
			Платеж.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Платеж.ВидНалога);
		ИначеЕсли ЗначениеЗаполнено(ВидНалога) Тогда
			// Вид налога по коду задачи
			Платеж.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(ВидНалога);
		ИначеЕсли Не ПустаяСтрока(Платеж.КБК) Тогда
			Платеж.Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоКБК(Платеж.КБК);
		КонецЕсли;
		
		Если ПустаяСтрока(Платеж.КБК) Тогда
			// Декларация без кода КБК
			Платеж.КБК = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(Платеж.Налог, , Объект.ПериодРегистрации);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Платеж.Налог) Тогда
			Платеж.Наименование = Строка(Платеж.Налог);
		Иначе
			
			ЭталонныйКБК = ПлатежиВБюджетКлиентСервер.ШаблонКБК(Платеж.КБК);
			ОписаниеКБК  = Справочники.ВидыНалоговИПлатежейВБюджет.НайтиКодДоходаБюджета(
				ЭталонныйКБК, Год(ОбщегоНазначения.ТекущаяДатаПользователя()));
				
			Если Не ПустаяСтрока(ОписаниеКБК.КраткоеНаименование) Тогда
				Платеж.Наименование = ОписаниеКБК.КраткоеНаименование;
			ИначеЕсли Не ПустаяСтрока(ОписаниеКБК.Наименование) Тогда
				Платеж.Наименование = ОписаниеКБК.Наименование;
			Иначе
				Платеж.Наименование = 
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Платеж по КБК %1'"), Платеж.КБК);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеПлатежногоДокумента(ДокументСсылка, Оплачено)
	
	Возврат Обработки.ПомощникУчетаЗарплаты.ПредставлениеПлатежногоДокумента(ДокументСсылка, Оплачено);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьСтруктуруРазделов(СводРасчетов, РасчетныеДокументы, Ведомости, Платежи_НДФЛ, Платежи_Взносы)
	
	СтруктураРазделов = Новый Структура();
	СтруктураРазделов.Вставить("СводРасчетов",       СводРасчетов);
	СтруктураРазделов.Вставить("РасчетныеДокументы", РасчетныеДокументы);
	СтруктураРазделов.Вставить("Ведомости",          Ведомости);
	СтруктураРазделов.Вставить("Платежи_НДФЛ",       Платежи_НДФЛ);
	СтруктураРазделов.Вставить("Платежи_Взносы",     Платежи_Взносы);
	
	Возврат СтруктураРазделов;
	
КонецФункции

&НаСервереБезКонтекста
Функция СохраниласьВерсияДанных(Документ, ВерсияДанных)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ВерсияДанных") = ВерсияДанных;
	
КонецФункции

&НаСервереБезКонтекста
Функция СохранилисьВерсииДанных(СписокНовый, СписокИсходный)
	
	Если СписокНовый.Количество() <> СписокИсходный.Количество() Тогда
		Возврат Ложь;
	ИначеЕсли СписокНовый.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого ДокументИсходый ИЗ СписокИсходный Цикл
		ДокументНовый = СписокНовый.НайтиПоЗначению(ДокументИсходый.Значение);
		Если ДокументНовый = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		Если ДокументИсходый.Представление <> 
				ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументНовый.Значение, "ВерсияДанных") Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область ПолучениеДанных

&НаСервере
Функция ВыполнитьПолучениеДанныхНаСервере(СтруктураРазделов, Пересчитать = Ложь)
	
	ПараметрыОбработки = СформироватьПараметрыОбработки();
	ПараметрыОбработки.Пересчитать       = Пересчитать;
	ПараметрыОбработки.СтруктураРазделов = СтруктураРазделов;
	
	НаименованиеЗадания = НСтр("ru = 'Помощник учета зарплаты: получение данных'");
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Обработки.ПомощникУчетаЗарплаты.ПодготовитьДанные", 
			ПараметрыОбработки, 
			НаименованиеЗадания);
			
		АдресХранилища = Результат.АдресХранилища;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СформироватьДокументыНаСервере()
	
	СтруктураРазделов = СформироватьСтруктуруРазделов(Истина,
														Истина,
														Истина,
														Истина,
														НЕ Параметры.РежимВыплатыПоДокументу
															И НЕ Параметры.РежимВыплатыЗаПериод);
															
															
															
	Если Параметры.РежимВыплатыПоДокументу ИЛИ Параметры.РежимВыплатыЗаПериод Тогда
		СводРасчетов.Очистить();
		Возврат ВыполнитьПолучениеДанныхНаСервере(СтруктураРазделов);
	КонецЕсли;
	
	ПараметрыОбработки = СформироватьПараметрыОбработки();
	ПараметрыОбработки.Пересчитать       = Ложь;
	ПараметрыОбработки.СтруктураРазделов = СтруктураРазделов;
	
	НаименованиеЗадания = НСтр("ru = 'Помощник учета зарплаты: формирование документов данных'");
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Обработки.ПомощникУчетаЗарплаты.СформироватьДокументы",
			ПараметрыОбработки, 
			НаименованиеЗадания);
			
		АдресХранилища = Результат.АдресХранилища;
	
	Возврат Результат;
	
КонецФункции


&НаСервере
Функция ОбработатьДобавлениеРасчетногоДокументаНаСервере(СведенияОДокументе)
	
	ПолностьюПересчитатьДокументНачисления = ВедетсяРасчетЗарплатыДляНебольшихОрганизаций;
	ПеречитатьНДФЛ = Истина;
	Если СведенияОДокументе <> Неопределено Тогда
		
		// Пересчет вызывается только в случае, если произошли изменения в расчетных документах
		ДокументСсылка = СведенияОДокументе.Ссылка;
		
		Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.НачислениеЗарплаты") Тогда
			ПолностьюПересчитатьДокументНачисления = Ложь;
			Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДокументСсылка, "Начислено") = СведенияОДокументе.Сумма Тогда
				ПеречитатьНДФЛ = Ложь;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.БольничныйЛист")
			ИЛИ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.Отпуск") Тогда
			
			РеквизитыДокумента = 
				ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка,
															"Проведен, Сотрудник, ПериодРегистрации, Начислено");
			
			Если РеквизитыДокумента.Проведен
				И РеквизитыДокумента.Сотрудник = СведенияОДокументе.Сотрудник
				И РеквизитыДокумента.Начислено = СведенияОДокументе.Сумма
				И НачалоМесяца(РеквизитыДокумента.ПериодРегистрации) = НачалоМесяца(Объект.ПериодРегистрации) Тогда
				ПолностьюПересчитатьДокументНачисления = Ложь;
				ПеречитатьНДФЛ = Ложь;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	СтруктураРазделов = СформироватьСтруктуруРазделов(Истина, Истина, Ложь, ПеречитатьНДФЛ, Истина);
		
	Возврат ВыполнитьПолучениеДанныхНаСервере(СтруктураРазделов, ПолностьюПересчитатьДокументНачисления);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьДобавлениеРасчетногоДокумента(РезультатЗакрытия = Неопределено,
													ДополнительныеПараметры = Неопределено) Экспорт
	
	СведенияОДокументе = Неопределено;
	Если ДополнительныеПараметры <> Неопределено Тогда
		СведенияОДокументе = ДополнительныеПараметры.СведенияОДокументе;
		Если СохраниласьВерсияДанных(СведенияОДокументе.Ссылка, СведенияОДокументе.ВерсияДанных) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Результат = ОбработатьДобавлениеРасчетногоДокументаНаСервере(СведенияОДокументе);
	
	Если НЕ Результат.ЗаданиеВыполнено Тогда
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 0.5, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	Иначе
		ЗагрузитьРезультат();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРедактированиеВедомости(РезультатЗакрытия = Неопределено,
												ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		Если ДополнительныеПараметры.Свойство("СписокДокументов") Тогда
			Если ТипЗнч(РезультатЗакрытия) = Тип("СписокЗначений") Тогда
				Если СохранилисьВерсииДанных(РезультатЗакрытия, ДополнительныеПараметры.СписокДокументов) Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если СохраниласьВерсияДанных(ДополнительныеПараметры.Ссылка, ДополнительныеПараметры.ВерсияДанных) Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураРазделов = СформироватьСтруктуруРазделов(Истина, Ложь, Истина, Ложь, Ложь);
		
	Результат = ВыполнитьПолучениеДанныхНаСервере(СтруктураРазделов);
	
	Если НЕ Результат.ЗаданиеВыполнено Тогда
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 0.5, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	Иначе
		ЗагрузитьРезультат();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРедактированиеПлатежногоДокументаНаНДФЛ(РезультатЗакрытия = Неопределено,
																ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		Если СохраниласьВерсияДанных(ДополнительныеПараметры.Ссылка, ДополнительныеПараметры.ВерсияДанных) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураРазделов = СформироватьСтруктуруРазделов(Истина, Ложь, Ложь, Истина, Ложь);
		
	Результат = ВыполнитьПолучениеДанныхНаСервере(СтруктураРазделов);
	
	Если НЕ Результат.ЗаданиеВыполнено Тогда
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 0.5, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	Иначе
		ЗагрузитьРезультат();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРедактированиеПлатежногоДокументаНаВзносы(РезультатЗакрытия = Неопределено,
																ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДополнительныеПараметры <> Неопределено Тогда
		Если СохраниласьВерсияДанных(ДополнительныеПараметры.Ссылка, ДополнительныеПараметры.ВерсияДанных) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураРазделов = СформироватьСтруктуруРазделов(Истина, Ложь, Ложь, Ложь, Истина);
		
	Результат = ВыполнитьПолучениеДанныхНаСервере(СтруктураРазделов);
	
	Если НЕ Результат.ЗаданиеВыполнено Тогда
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 0.5, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	Иначе
		ЗагрузитьРезультат();
	КонецЕсли;
	
КонецПроцедуры

#Область ДлительныеОперации

&НаСервере
Функция СформироватьПараметрыОбработки()
	
	ПараметрыОбработки = Новый Структура();
	ПараметрыОбработки.Вставить("Организация",             Объект.Организация);
	ПараметрыОбработки.Вставить("ПериодРегистрации",       Объект.ПериодРегистрации);
	ПараметрыОбработки.Вставить("СводРасчетов",            РеквизитФормыВЗначение("СводРасчетов"));
	ПараметрыОбработки.Вставить("РасчетныеДокументы",      РеквизитФормыВЗначение("РасчетныеДокументы"));
	ПараметрыОбработки.Вставить("Ведомости",               РеквизитФормыВЗначение("Ведомости"));
	ПараметрыОбработки.Вставить("Платежи_НДФЛ",            РеквизитФормыВЗначение("Платежи_НДФЛ"));
	ПараметрыОбработки.Вставить("Платежи_Взносы",          РеквизитФормыВЗначение("Платежи_Взносы"));
	ПараметрыОбработки.Вставить("Правило_НДФЛ",            Правило_НДФЛ);
	ПараметрыОбработки.Вставить("Правило_Взносы",          Правило_Взносы);
	ПараметрыОбработки.Вставить("Пересчитать",             Ложь);
	ПараметрыОбработки.Вставить("СчетОрганизации",         Объект.СчетОрганизации);
	ПараметрыОбработки.Вставить("ЭтоПредприниматель",      ЭтоПредприниматель);
	ПараметрыОбработки.Вставить("Аванс",                   Параметры.Аванс);
	ПараметрыОбработки.Вставить("СтруктураРазделов",       "");
	ПараметрыОбработки.Вставить("РежимВыплатыПоДокументу", Параметры.РежимВыплатыПоДокументу);
	ПараметрыОбработки.Вставить("РежимВыплатыЗаПериод",    Параметры.РежимВыплатыЗаПериод);
	ПараметрыОбработки.Вставить("РасчетныйДокумент",       Параметры.РасчетныйДокумент);
	ПараметрыОбработки.Вставить("ДатаВыплаты",             Параметры.ДатаВыплаты);
	ПараметрыОбработки.Вставить("МассивВедомостей",        Неопределено);
	
	Если СводРасчетов.Количество() = 0
			И (Параметры.РежимВыплатыПоДокументу
			ИЛИ Параметры.РежимВыплатыЗаПериод) Тогда
		ПараметрыОбработки.Вставить("ГенерироватьКомплект", Истина);
	Иначе
		ПараметрыОбработки.Вставить("ГенерироватьКомплект", Ложь);
	КонецЕсли;
	
	Возврат ПараметрыОбработки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗаданияПриОткрытии()
	
	Попытка
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
				ЗагрузитьРезультат(Ложь);
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания(
					"Подключаемый_ПроверитьВыполнениеЗаданияПриОткрытии",
					ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
					Истина);
			КонецЕсли;
	Исключение
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ФормаДлительнойОперации.Открыта() 
			И ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания Тогда
			Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
				ЗагрузитьРезультат(Ложь);
				ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
				ПодключитьОбработчикОжидания(
					"Подключаемый_ПроверитьВыполнениеЗадания", 
					ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
					Истина);
			КонецЕсли;
		КонецЕсли;
	Исключение
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРезультатНаСервере()
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		СтруктураРазделов = Результат.СтруктураРазделов;
		Если НЕ Параметры.Аванс Тогда
			Если СтруктураРазделов.РасчетныеДокументы Тогда
				ЗначениеВРеквизитФормы(Результат.РасчетныеДокументы, "РасчетныеДокументы");
				ОбновитьИзображение(1);
			КонецЕсли;
		КонецЕсли;
		Если СтруктураРазделов.Ведомости Тогда
			ЗначениеВРеквизитФормы(Результат.Ведомости, "Ведомости");
			ОбновитьИзображение(2);
		КонецЕсли;
		Если НЕ Параметры.Аванс Тогда
			Если СтруктураРазделов.Платежи_НДФЛ Тогда
				ЗначениеВРеквизитФормы(Результат.Платежи_НДФЛ, "Платежи_НДФЛ");
				ЗаполнитьНаименованияБюджетнойКлассификации("Платежи_НДФЛ");
				ОбновитьИзображение(3);
			КонецЕсли;
			Если СтруктураРазделов.Платежи_Взносы Тогда
				ЗначениеВРеквизитФормы(Результат.Платежи_Взносы, "Платежи_Взносы");
				ЗаполнитьНаименованияБюджетнойКлассификации("Платежи_Взносы");
				ОбновитьИзображение(4);
			КонецЕсли;
			Если СтруктураРазделов.СводРасчетов Тогда
				ЗначениеВРеквизитФормы(Результат.СводРасчетов, "СводРасчетов");
				ОбновитьИзображение(5);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРезультат(ПоказатьФормуОжидания = Истина)
	
	Если ПоказатьФормуОжидания И
		(ФормаДлительнойОперации = Неопределено
			ИЛИ НЕ ФормаДлительнойОперации.Открыта()) Тогда
			
			ОткрытьФорму("Обработка.ПомощникУчетаЗарплаты.Форма.ДлительнаяОперация",
				Новый Структура("ИдентификаторВладельца", УникальныйИдентификатор),
				ЭтотОбъект,
				ВладелецФормы,
				,
				,
				,
				РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				
			ПодключитьОбработчикОжидания("Подключаемый_ЗагрузитьРезультат", 0.5, Истина);
			
	Иначе
		ЗагрузитьРезультатЗавершение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ЗагрузитьРезультат()
	
	ЗагрузитьРезультатЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРезультатЗавершение()
	
	ЗагрузитьРезультатНаСервере();
	Оповестить("ЗарплатаРассчитана_ПомощникУчетаЗарплаты", Новый Структура("Организация", Объект.Организация));
	Оповестить("Закрыть_ДлительнаяОперация",, УникальныйИдентификатор);
	ОповеститьОбИзменении(Тип("РегистрСведенийКлючЗаписи.ЗадачиБухгалтера"));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОтрисовкаФормы

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	Объект   = Форма.Объект;
	
	Если Элементы.СтраницыСобытий.ТекущаяСтраница = Элементы.СтраницаСобытияПустая Тогда
		Элементы.СтраницыСобытий.ТекущаяСтраница = Элементы.СтраницаСобытияРабочая;
		Элементы.СтраницаСобытияПустая.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаДокументыПодвал.Видимость   = НЕ Форма.ДокументыСформированы;
	Элементы.ГруппаРезультат.Видимость = Форма.ДокументыСформированы;
	
	Элементы.ГруппаРезультатОтправка.Видимость     = Форма.ЕстьПлатежныеПоручения;
	
	Элементы.ДекорацияОписаниеДокументыАванс.Видимость   = Форма.Параметры.Аванс
															И НЕ Форма.ЕстьВедомостьВБанк
															И НЕ Форма.ЕстьВедомостьВКассу;
	Элементы.ГруппаСобытиеДокументыСуммаАванса.Видимость = Форма.Параметры.Аванс
															И (Форма.ЕстьВедомостьВБанк
																ИЛИ Форма.ЕстьВедомостьВКассу);
	Элементы.ДекорацияПлатежныеПоручения.Видимость       = НЕ Форма.Параметры.Аванс;
	Элементы.ДекорацияПлатежныеПорученияАванс.Видимость  = Форма.Параметры.Аванс;
	
	Элементы.ДекорацияСпискиПеречислений.Видимость = Форма.ЕстьВедомостьВБанк;
	Элементы.ДекорацияПлатежныеВедомости.Видимость = Форма.ЕстьВедомостьВКассу;
	Элементы.ДекорацияВыдачаНаличных.Видимость     = Форма.ЕстьВыдачаНаличных;
	Элементы.ГруппаРезультатПечать.Видимость       = Форма.ЕстьВедомостьВБанк 
														ИЛИ Форма.ЕстьВедомостьВКассу
														ИЛИ Форма.ЕстьВыдачаНаличных ;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИзображение(НомерРаздела = 0)
	
	ЕстьДокументыВедомость = Ложь;
	ЕстьДокументыНДФЛ      = Ложь;
	ЕстьДокументыВзносы    = Ложь;
	
	ЕстьПлатежныеПоручения = Ложь;
	ЕстьВыдачаНаличных     = Ложь;
	ЕстьВедомостьВБанк     = Ложь;
	ЕстьВедомостьВКассу    = Ложь;
	
	// Предварительная отрисовка формы - готовим раздел-шаблон
	Если НЕ Параметры.РежимВыплатыПоДокументу И НЕ Параметры.РежимВыплатыЗаПериод Тогда
		Для Каждого СтрокаРасчета Из СводРасчетов Цикл
			Если СтрокаРасчета.Порядок = 1 Тогда
				Элементы.ГруппаВыплатаКоманды.Видимость = СтрокаРасчета.Сумма <> 0;
				Элементы.СуммаЗадолженность.Заголовок   = 
					ОбщегоНазначенияБПВызовСервера.ФорматСумм(СтрокаРасчета.Сумма, , , " "); // ЧРГ=' '
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЕстьДокументыВедомость = Ведомости.Количество() > 0;
	Для Каждого Платеж Из Ведомости Цикл
		Если ЗначениеЗаполнено(Платеж.ПлатежныеДокументы) Тогда
			Если НЕ Платеж.Оплачено И НЕ ЕстьПлатежныеПоручения Тогда
				ЕстьПлатежныеПоручения = Истина;
			КонецЕсли;
			Если НЕ ЕстьПлатежныеПоручения И ТипЗнч(Платеж.ПлатежныеДокументы) = Тип("СписокЗначений") Тогда
				Если Платеж.ПлатежныеДокументы.Количество() <> 0 И Платеж.Оплачено Тогда
					ЕстьПлатежныеПоручения = Истина;
				КонецЕсли;
			КонецЕсли;
			Если НЕ ЕстьВыдачаНаличных И ТипЗнч(Платеж.ПлатежныеДокументы) =
					Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
				ЕстьВыдачаНаличных = Истина;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЕстьВедомостьВБанк И ТипЗнч(Платеж.Ведомость) =
				Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк") Тогда
			ЕстьВедомостьВБанк = Истина;
		КонецЕсли;
		Если НЕ ЕстьВедомостьВКассу И ТипЗнч(Платеж.Ведомость) =
				Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу") Тогда
			ЕстьВедомостьВКассу = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Платеж Из Платежи_НДФЛ Цикл
		Если ЗначениеЗаполнено(Платеж.ПлатежноеПоручение) Тогда
			ЕстьДокументыНДФЛ = Истина;
			Если НЕ Платеж.Оплачено И НЕ ЕстьПлатежныеПоручения Тогда
				ЕстьПлатежныеПоручения = Истина;
			КонецЕсли;
			Если НЕ ЕстьВыдачаНаличных И ТипЗнч(Платеж.ПлатежноеПоручение) =
					Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
				ЕстьВыдачаНаличных = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Платеж Из Платежи_Взносы Цикл
		Если ЗначениеЗаполнено(Платеж.ПлатежноеПоручение) Тогда
			ЕстьДокументыВзносы = Истина;
			Если НЕ Платеж.Оплачено И НЕ ЕстьПлатежныеПоручения Тогда
				ЕстьПлатежныеПоручения = Истина;
			КонецЕсли;
			Если НЕ ЕстьВыдачаНаличных И ТипЗнч(Платеж.ПлатежноеПоручение) =
					Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
				ЕстьВыдачаНаличных = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДокументыСформированы = ЕстьДокументыВедомость
							ИЛИ ЕстьДокументыНДФЛ
							ИЛИ ЕстьДокументыВзносы;
	
	КУдалению = Новый Массив;
	
	Если НомерРаздела = 1 ИЛИ НомерРаздела = 0 Тогда
		// Заполним контейнер данными событий по начислениям
		СуммаИтогРасчет  = 0;
		Для Каждого РасчетныйДокумент Из РасчетныеДокументы Цикл
			НомерКонтейнера = ЗадачиБухгалтераКлиентСервер.НомерКонтейнера(РасчетныйДокумент.ПолучитьИдентификатор());
			Если Элементы.Найти("ОписаниеРасчет" + НомерКонтейнера) = Неопределено Тогда
				КопироватьЭлементСПодчиненными(ЭтаФорма, Элементы.ОписаниеРасчет, Элементы.СобытиеРасчет, НомерКонтейнера);
			КонецЕсли;
			ОформитьСобытиеНачислениеЗарплаты(РасчетныйДокумент, НомерКонтейнера);
			Элементы["ОписаниеРасчет" + НомерКонтейнера].Видимость = Истина;
			СуммаИтогРасчет = СуммаИтогРасчет + РасчетныйДокумент.Сумма;
		КонецЦикла;
		// Уберем лишние контейнеры
		Элементы.ОписаниеРасчет.Видимость = Ложь;
		Для Каждого Контейнер Из Элементы.СобытиеРасчет.ПодчиненныеЭлементы Цикл
			Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Контейнер.Имя);
			Если Идентификатор = Неопределено Тогда
				// Это шаблон
				Продолжить;
			КонецЕсли;
			Если РасчетныеДокументы.НайтиПоИдентификатору(Идентификатор) = Неопределено Тогда
				КУдалению.Добавить(Контейнер);
			КонецЕсли;
		КонецЦикла;
		
		Элемент = Элементы["СуммаИтогРасчет"];
		Элемент.Заголовок = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаИтогРасчет, , , " "); // ЧРГ=' '
	КонецЕсли;
	
	Если НомерРаздела = 2 ИЛИ НомерРаздела = 0 Тогда
		// Заполним контейнер данными событий по выплате
		СуммаИтогВыплата = 0;
		Для Каждого Ведомость Из Ведомости Цикл
			ЭтоЗарплатныйПроект = Ложь;
			Если ТипЗнч(Ведомость.Ведомость) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк") Тогда
				ЭтоЗарплатныйПроект = ЗначениеЗаполнено(Ведомость.ЗарплатныйПроект);
			КонецЕсли;
			НомерКонтейнера = ЗадачиБухгалтераКлиентСервер.НомерКонтейнера(Ведомость.ПолучитьИдентификатор());
			Если Элементы.Найти("ОписаниеВыплата" + НомерКонтейнера) = Неопределено Тогда
				КопироватьЭлементСПодчиненными(ЭтаФорма,
												Элементы.ОписаниеВыплата,
												Элементы.СобытиеВыплата,
												НомерКонтейнера);
			КонецЕсли;
			ОформитьСобытиеВыплатаЗарплаты(Ведомость, НомерКонтейнера);
			Элементы["ОписаниеВыплата" + НомерКонтейнера].Видимость = Истина;
			СуммаИтогВыплата = СуммаИтогВыплата + Ведомость.Сумма;
		КонецЦикла;
		// Уберем лишние контейнеры
		Элементы.ОписаниеВыплата.Видимость = Ложь;
		Для Каждого Контейнер Из Элементы.СобытиеВыплата.ПодчиненныеЭлементы Цикл
			Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Контейнер.Имя);
			Если Идентификатор = Неопределено Тогда
				// Это шаблон
				Продолжить;
			КонецЕсли;
			Если Ведомости.НайтиПоИдентификатору(Идентификатор) = Неопределено Тогда
				КУдалению.Добавить(Контейнер);
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ Параметры.РежимВыплатыПоДокументу И НЕ Параметры.РежимВыплатыЗаПериод Тогда
			Если СуммаИтогВыплата <> 0 Тогда
				Элементы.ГруппаВыплатаПодвал.Видимость = Истина;
				Элементы.ГруппаВыплатаШапка.Отображение = ОтображениеОбычнойГруппы.Нет;
			Иначе
				Элементы.ГруппаВыплатаПодвал.Видимость = Ложь;
				Элементы.ГруппаВыплатаШапка.Отображение = ОтображениеОбычнойГруппы.ОбычноеВыделение;
			КонецЕсли;
		
			Элемент = Элементы["СуммаИтогВыплата"];
			Элемент.Заголовок = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаИтогВыплата, , , " "); // ЧРГ=' '
		Иначе
			Элементы.ГруппаВыплата.Видимость = СуммаИтогВыплата <> 0;
		КонецЕсли;
	КонецЕсли;
	
	Если НомерРаздела = 3 ИЛИ НомерРаздела = 0 Тогда
		
		// Заполним контейнер данными событий по НДФЛ
		СуммаИтогНалог   = 0;
		Для Каждого Платеж Из Платежи_НДФЛ Цикл
			НомерКонтейнера = ЗадачиБухгалтераКлиентСервер.НомерКонтейнера(Платеж.ПолучитьИдентификатор());
			// Обеспечим контейнер
			Если Элементы.Найти("ОписаниеНалог" + НомерКонтейнера) = Неопределено Тогда
				КопироватьЭлементСПодчиненными(ЭтаФорма, Элементы.ОписаниеНалог, Элементы.СобытиеНалог, НомерКонтейнера);
			КонецЕсли;
			ОформитьСобытиеУплатаНДФЛ(Платеж, НомерКонтейнера);
			
			Если ЭтоПредприниматель 
				И НЕ ЗначениеЗаполнено(Платеж.ПлатежноеПоручение)
				И ЕстьБанковскийСчет Тогда
				Элементы["ОписаниеНалогДействие" + НомерКонтейнера].Видимость    = Ложь;
				Элементы["ОписаниеНалогДействиеИП" + НомерКонтейнера].Видимость  = Истина;
			Иначе
				Элементы["ОписаниеНалогДействие" + НомерКонтейнера].Видимость    = Истина;
				Элементы["ОписаниеНалогДействиеИП" + НомерКонтейнера].Видимость  = Ложь;
			КонецЕсли;
			
			Элементы["ОписаниеНалог" + НомерКонтейнера].Видимость = Истина;
			СуммаИтогНалог = СуммаИтогНалог + Платеж.Сумма;
		КонецЦикла;
		// Уберем лишние контейнеры
		Элементы.ОписаниеНалог.Видимость = Ложь;
		Для Каждого Контейнер Из Элементы.СобытиеНалог.ПодчиненныеЭлементы Цикл
			Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Контейнер.Имя);
			Если Идентификатор = Неопределено Тогда
				// Это шаблон
				Продолжить;
			КонецЕсли;
			Если Платежи_НДФЛ.НайтиПоИдентификатору(Идентификатор) = Неопределено Тогда
				КУдалению.Добавить(Контейнер);
			КонецЕсли;
		КонецЦикла;
		
		Элементы.ГруппаНалогПодвал.Видимость = СуммаИтогНалог <> 0 И Платежи_НДФЛ.Количество()>1;
		
		Элемент = Элементы["СуммаИтогНалог"];
		Элемент.Заголовок = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаИтогНалог, , , " "); // ЧРГ=' '
	КонецЕсли;
	
	Если НомерРаздела = 4 ИЛИ НомерРаздела = 0 Тогда
		
		// Заполним контейнер данными событий по взносам
		СуммаИтогВзносы   = 0;
		Для Каждого Платеж Из Платежи_Взносы Цикл
			НомерКонтейнера = ЗадачиБухгалтераКлиентСервер.НомерКонтейнера(Платеж.ПолучитьИдентификатор());
			// Обеспечим контейнер
			Если Элементы.Найти("ОписаниеВзносы" + НомерКонтейнера) = Неопределено Тогда
				КопироватьЭлементСПодчиненными(ЭтаФорма, Элементы.ОписаниеВзносы, Элементы.СобытиеВзносы, НомерКонтейнера);
			КонецЕсли;
			ОформитьСобытиеУплатаВзносов(Платеж, НомерКонтейнера);
			
			Если ЭтоПредприниматель 
				И НЕ ЗначениеЗаполнено(Платеж.ПлатежноеПоручение)
				И ЕстьБанковскийСчет Тогда
				Элементы["ОписаниеВзносыДействие" + НомерКонтейнера].Видимость   = Ложь;
				Элементы["ОписаниеВзносыДействиеИП" + НомерКонтейнера].Видимость = Истина;
			Иначе
				Элементы["ОписаниеВзносыДействие" + НомерКонтейнера].Видимость   = Истина;
				Элементы["ОписаниеВзносыДействиеИП" + НомерКонтейнера].Видимость = Ложь;
			КонецЕсли;
			
			Элементы["ОписаниеВзносы" + НомерКонтейнера].Видимость = Истина;
			СуммаИтогВзносы = СуммаИтогВзносы + Платеж.Сумма;
		КонецЦикла;
		// Уберем лишние контейнеры
		Элементы.ОписаниеВзносы.Видимость = Ложь;
		Для Каждого Контейнер Из Элементы.СобытиеВзносы.ПодчиненныеЭлементы Цикл
			Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Контейнер.Имя);
			Если Идентификатор = Неопределено Тогда
				// Это шаблон
				Продолжить;
			КонецЕсли;
			Если Платежи_Взносы.НайтиПоИдентификатору(Идентификатор) = Неопределено Тогда
				КУдалению.Добавить(Контейнер);
			КонецЕсли;
		КонецЦикла;
		
		Элементы.ГруппаВзносыПодвал.Видимость      = СуммаИтогВзносы <> 0;
		
		Элемент = Элементы["СуммаИтогВзносы"];
		Элемент.Заголовок = ОбщегоНазначенияБПВызовСервера.ФорматСумм(СуммаИтогВзносы, , , " "); // ЧРГ=' '
	КонецЕсли;
	
	Если НомерРаздела = 5 ИЛИ НомерРаздела = 0 Тогда
		
		// Заполним контейнер данными событий по НДФЛ
		Для Каждого Показатель Из СводРасчетов Цикл
			НомерКонтейнера = ЗадачиБухгалтераКлиентСервер.НомерКонтейнера(Показатель.ПолучитьИдентификатор());
			// Обеспечим контейнер
			Если Элементы.Найти("ОписаниеДокументы" + НомерКонтейнера) = Неопределено Тогда
				КопироватьЭлементСПодчиненными(ЭтаФорма,
												Элементы.ОписаниеДокументы,
												Элементы.СобытиеДокументы,
												НомерКонтейнера);
			КонецЕсли;
			ОформитьСобытиеСводРасчетов(Показатель, НомерКонтейнера);
			
			Элементы["ОписаниеДокументы" + НомерКонтейнера].Видимость = Истина;
		КонецЦикла;
		// Уберем лишние контейнеры
		Элементы.ОписаниеДокументы.Видимость = Ложь;
		Для Каждого Контейнер Из Элементы.СобытиеДокументы.ПодчиненныеЭлементы Цикл
			Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Контейнер.Имя);
			Если Идентификатор = Неопределено Тогда
				// Это шаблон
				Продолжить;
			КонецЕсли;
			Если СводРасчетов.НайтиПоИдентификатору(Идентификатор) = Неопределено Тогда
				КУдалению.Добавить(Контейнер);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если Параметры.Аванс Тогда
		Элементы.СуммаАванс.Заголовок = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Ведомости.Итог("Сумма"), , , " "); // ЧРГ=' '
	КонецЕсли;
	
	Для Каждого Элемент Из КУдалению Цикл
		Элементы.Удалить(Элемент);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура КопироватьЭлементСПодчиненными(Форма, Источник, Владелец, Номер)
	
	ТипИсточника = ТипЗнч(Источник);
	Приемник = Форма.Элементы.Добавить(Источник.Имя + Номер, ТипИсточника, Владелец);
	
	Если ТипИсточника = Тип("ГруппаФормы") Тогда
		Приемник.Вид = Источник.Вид;
		ЗаполнитьЗначенияСвойств(Приемник, Источник, , "Имя,ПутьКДаннымЗаголовка,ПодчиненныеЭлементы");
		Для Каждого ПодчиненныйЭлемент Из Источник.ПодчиненныеЭлементы Цикл
			КопироватьЭлементСПодчиненными(Форма, ПодчиненныйЭлемент, Приемник, Номер);
		КонецЦикла;
	ИначеЕсли ТипИсточника = Тип("КнопкаФормы") Тогда
		ИмяКоманды = Источник.ИмяКоманды + Номер;
		Если Форма.Команды.Найти(ИмяКоманды) = Неопределено Тогда
			НоваяКоманда = Форма.Команды.Добавить(ИмяКоманды);
			ЗаполнитьЗначенияСвойств(НоваяКоманда, Форма.Команды[Источник.ИмяКоманды]);
		КонецЕсли;
		Приемник.ИмяКоманды = ИмяКоманды;
		ЗаполнитьЗначенияСвойств(Приемник, Источник, , "Имя, ИмяКоманды");
	Иначе
		Приемник.Вид = Источник.Вид;
		ЗаполнитьЗначенияСвойств(Приемник, Источник, , "Имя");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОформитьСобытиеУплатаНДФЛ(Событие, Номер)
	
	// Описание
	Элемент = Элементы["ДействиеНалог" + Номер];
	ЗаполнитьДокумент(Элемент, Номер, Событие, "ПлатежноеПоручениеПредставление");
	
	// ОКАТО
	Если ЭтоПредприниматель Тогда
		ЗаголовокОКАТО = СтрШаблон(
			НСтр("ru = '%1: %2'"),
			ПлатежиВБюджетКлиентСервер.ЗаголовокКодаТерритории(),
			Событие.ОКАТО);
	Иначе
		ЗаголовокОКАТО = СтрШаблон(
			НСтр("ru = '%1/КПП: %2/%3'"),
			ПлатежиВБюджетКлиентСервер.ЗаголовокКодаТерритории(),
			Событие.ОКАТО,
			Событие.КПП)
	КонецЕсли;
	
	Элемент = Элементы["ОКАТОИП" + Номер];
	Элемент.Заголовок = ЗаголовокОКАТО;
		
	Элемент = Элементы["ОКАТО" + Номер];
	Элемент.Заголовок = ЗаголовокОКАТО;
	
	// Сумма
	Элемент = Элементы["Сумма" + Номер];
	Элемент.Заголовок = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Событие.Сумма, , , " "); // ЧРГ=' '
	
КонецПроцедуры

&НаСервере
Процедура ОформитьСобытиеУплатаВзносов(Событие, Номер)
	
	// Описание
	Элемент = Элементы["ДействиеВзносы" + Номер];
	ЗаполнитьДокумент(Элемент, Номер, Событие, "ПлатежноеПоручениеПредставление");
	
	// Наименование
	Элемент = Элементы["НаименованиеИП_Взносы" + Номер];
	Элемент.Заголовок = Событие.Наименование;
		
	Элемент = Элементы["Наименование_Взносы" + Номер];
	Элемент.Заголовок = Событие.Наименование;
	
	// Сумма
	Элемент = Элементы["Сумма_Взносы" + Номер];
	Элемент.Заголовок = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Событие.Сумма, , , " "); // ЧРГ=' '
	
КонецПроцедуры

&НаСервере
Процедура ОформитьСобытиеВыплатаЗарплаты(Событие, Номер)
	
	// Описание
	Элемент = Элементы["ДействиеВыплата" + Номер];
	Элемент.Заголовок = Событие.ВедомостьПредставление;
	
	// Сумма
	Элемент = Элементы["СуммаВыплата" + Номер];
	Элемент.Заголовок = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Событие.Сумма, , , " "); // ЧРГ=' '
	
	// Документ
	Элемент        = Элементы["ПлатежныйДокументВыплата" + Номер];
	ЗаполнитьДокумент(Элемент, Номер, Событие, "ПлатежныеДокументыПредставление");
	
КонецПроцедуры

&НаСервере
Процедура ОформитьСобытиеНачислениеЗарплаты(Событие, Номер)
	
	// Описание
	Элемент = Элементы["ДействиеРасчет" + Номер];
	Элемент.Заголовок = Событие.ДокументПредставление;
	
	// Сумма
	Элемент = Элементы["СуммаРасчет" + Номер];
	Элемент.Заголовок = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Событие.Сумма, , , " "); // ЧРГ=' '
	
КонецПроцедуры

&НаСервере
Процедура ОформитьСобытиеСводРасчетов(Событие, Номер)
	
	// Описание
	Элемент = Элементы["ДействиеДокументы" + Номер];
	Элемент.Заголовок = Событие.Показатель;
	
	// Сумма
	Элемент = Элементы["СуммаДокументы" + Номер];
	Элемент.Заголовок = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Событие.Сумма, , , " "); // ЧРГ=' '
	Если Событие.Порядок = 1 Тогда
		Если Ведомости.Итог("Сумма")<> 0 И Событие.Сумма <> Ведомости.Итог("Сумма") Тогда
			Элемент.Заголовок = ОбщегоНазначенияБПВызовСервера.ФорматСумм(Ведомости.Итог("Сумма"), , , " "); // ЧРГ=' '
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьДокумент(Элемент, НомерКонтейнера, Событие, ИмяРеквизита)
	
	Если Не ЗначениеЗаполнено(Событие[ИмяРеквизита]) Тогда
		Элемент.Заголовок = НСтр("ru = 'Оплатить'");
		Элемент.ЦветТекста = Новый Цвет (255,0,0);
	Иначе
		Элемент.Заголовок  = Событие[ИмяРеквизита];
		Элемент.ЦветТекста = Новый Цвет (28,75,174);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПолучениеДокументов

&НаКлиенте
Процедура ДействиеПлатеж(Команда, СуффиксТаблицы, ИмяПлатежногоДокумента = Неопределено)
	
	Идентификатор = ЗадачиБухгалтераКлиентСервер.Идентификатор(Команда.Имя);
	Если Идентификатор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийДокумент = ПараметрыФормыПлатежногоДокумента(Идентификатор,
														ИмяПлатежногоДокумента = "РасходныйКассовыйОрдер",
														СуффиксТаблицы);
	
	ВозвращаемыеПараметры = Неопределено;
	Если ТекущийДокумент.Свойство("Ключ") Тогда
		ВозвращаемыеПараметры = Новый Структура("Ссылка, ВерсияДанных",
												ТекущийДокумент.Ключ, ТекущийДокумент.ВерсияДанных);
	КонецЕсли;
	
	ОткрытьДокументОповещение = Новый ОписаниеОповещения("ОбработатьРедактированиеПлатежногоДокументаНа" + СуффиксТаблицы,
															ЭтотОбъект,
															ВозвращаемыеПараметры);
	
	Если ТекущийДокумент.Свойство("Ключ") Тогда
		Если ИмяПлатежногоДокумента = Неопределено Тогда
			ИмяФормыПлатежногоДокумента = ?(ТипЗнч(ТекущийДокумент.Ключ) = Тип("ДокументСсылка.РасходныйКассовыйОрдер"),
												"Документ.РасходныйКассовыйОрдер.ФормаОбъекта",
												"Документ.ПлатежноеПоручение.ФормаОбъекта");
		Иначе
			ИмяФормыПлатежногоДокумента = "Документ." + ИмяПлатежногоДокумента + ".ФормаОбъекта";
		КонецЕсли;
		ОткрытьФорму(
			ИмяФормыПлатежногоДокумента,
			Новый Структура("Ключ", ТекущийДокумент.Ключ),
			ЭтаФорма,
			,
			,
			,
			ОткрытьДокументОповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		Если ИмяФормыПлатежногоДокумента = Неопределено Тогда
			ИмяФормыПлатежногоДокумента = ?(ТекущийДокумент.УплатаНаличными,
												"Документ.РасходныйКассовыйОрдер.ФормаОбъекта",
												"Документ.ПлатежноеПоручение.ФормаОбъекта");
		Иначе
			ИмяФормыПлатежногоДокумента = "Документ." + ИмяПлатежногоДокумента + ".ФормаОбъекта";
		КонецЕсли;
		ОткрытьФорму(
			ИмяФормыПлатежногоДокумента,
			ТекущийДокумент,
			ЭтаФорма,
			,
			,
			,
			ОткрытьДокументОповещение,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыФормыВедомости(Идентификатор)
	
	ПараметрыВедомости = Новый Структура("Ведомость, ЗарплатныйПроект, ВедомостьВерсияДанных");
	
	СтрокаВедомости = Ведомости.НайтиПоИдентификатору(Идентификатор);
	
	Если СтрокаВедомости = Неопределено Тогда
		Возврат ПараметрыВедомости;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ПараметрыВедомости, СтрокаВедомости);
	
	Возврат ПараметрыВедомости;
	
КонецФункции

&НаСервере
Функция ПараметрыФормыРасчета(Идентификатор)
	
	СтрокаРасчета = РасчетныеДокументы.НайтиПоИдентификатору(Идентификатор);
	
	Если СтрокаРасчета = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Новый Структура("Документ, Сотрудник, Сумма, ВерсияДанных", 
		СтрокаРасчета.Документ, СтрокаРасчета.Сотрудник, СтрокаРасчета.Сумма, СтрокаРасчета.ВерсияДанных);
	
КонецФункции

&НаСервере
Функция ПараметрыФормыПлатежногоДокументаВедомости(Идентификатор)
	
	СтрокаВедомости = Ведомости.НайтиПоИдентификатору(Идентификатор);
	
	Если СтрокаВедомости = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтрокаВедомости.ПлатежныеДокументы = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Новый Структура("ПлатежныеДокументы, ПлатежныеДокументыВерсияДанных",
		СтрокаВедомости.ПлатежныеДокументы, СтрокаВедомости.ПлатежныеДокументыВерсияДанных);
	
КонецФункции

&НаСервере
Функция ПараметрыФормыПлатежногоДокумента(Идентификатор, УплатаНаличными = Ложь, СуффиксТаблицы)
	
	ТекущаяТаблица = ЭтотОбъект["Платежи_" + СуффиксТаблицы];
	СтрокаПлатежа = ТекущаяТаблица.НайтиПоИдентификатору(Идентификатор);
	
	Если СтрокаПлатежа = Неопределено Тогда
		Возврат Новый Структура;
	КонецЕсли;
	
	Возврат Обработки.ПомощникУчетаЗарплаты.ПараметрыФормыПлатежногоДокументаПоСтроке(
				СтрокаПлатежа,
				ЭтотОбъект["Правило_" + СуффиксТаблицы],
				УплатаНаличными,
				ЭтоПредприниматель,
				Объект.Организация,
				Объект.ПериодРегистрации);
	
КонецФункции

#КонецОбласти

#Область ПечатьДокументов

&НаКлиенте
Процедура ДекорацияПлатежныеВедомостиОбработкаНавигационнойСсылки(Элемент,
																	НавигационнаяСсылкаФорматированнойСтроки,
																	СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МассивДокументов = Новый Массив;
	Для Каждого СтрокаТаблицы Из Ведомости Цикл
		Если ТипЗнч(СтрокаТаблицы.Ведомость) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу") Тогда
			МассивДокументов.Добавить(СтрокаТаблицы.Ведомость);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивДокументов.Количество() > 0 Тогда
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.ВедомостьНаВыплатуЗарплатыВКассу",
														"Т53",
														МассивДокументов, ЭтотОбъект);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияВыдачаНаличныхОбработкаНавигационнойСсылки(Элемент,
																НавигационнаяСсылкаФорматированнойСтроки,
																СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МассивДокументов = Новый Массив;
	Для Каждого СтрокаТаблицы Из Ведомости Цикл
		Если ТипЗнч(СтрокаТаблицы.ПлатежныеДокументы) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
			МассивДокументов.Добавить(СтрокаТаблицы.ПлатежныеДокументы);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из Платежи_НДФЛ Цикл
		Если ТипЗнч(СтрокаТаблицы.ПлатежноеПоручение) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
			МассивДокументов.Добавить(СтрокаТаблицы.ПлатежноеПоручение);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из Платежи_Взносы Цикл
		Если ТипЗнч(СтрокаТаблицы.ПлатежноеПоручение) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
			МассивДокументов.Добавить(СтрокаТаблицы.ПлатежноеПоручение);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивДокументов.Количество() > 0 Тогда
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.РасходныйКассовыйОрдер",
														"РКО",
														МассивДокументов,
														ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияСпискиПеречисленийОбработкаНавигационнойСсылки(Элемент,
																	НавигационнаяСсылкаФорматированнойСтроки,
																	СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	МассивДокументов = Новый Массив;
	Для Каждого СтрокаТаблицы Из Ведомости Цикл
		Если ТипЗнч(СтрокаТаблицы.Ведомость) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк") Тогда
			МассивДокументов.Добавить(СтрокаТаблицы.Ведомость);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивДокументов.Количество() > 0 Тогда
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.ВедомостьНаВыплатуЗарплатыВБанк",
														"СписокПеречислений",
														МассивДокументов,
														ЭтотОбъект);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПлатежныеПорученияОбработкаНавигационнойСсылки(Элемент,
																	НавигационнаяСсылкаФорматированнойСтроки,
																	СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтандартнаяОбработка = Ложь;
	СписокДокументов = Новый СписокЗначений;
	Для Каждого СтрокаТаблицы Из Ведомости Цикл
		Если ТипЗнч(СтрокаТаблицы.ПлатежныеДокументы) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
			СписокДокументов.Добавить(СтрокаТаблицы.ПлатежныеДокументы);
		КонецЕсли;
		Если ТипЗнч(СтрокаТаблицы.ПлатежныеДокументы) = Тип("СписокЗначений") Тогда
			Для Каждого СтрокаСписка ИЗ СтрокаТаблицы.ПлатежныеДокументы Цикл
				Если ТипЗнч(СтрокаСписка.Значение) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
					СписокДокументов.Добавить(СтрокаСписка.Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из Платежи_НДФЛ Цикл
		Если ТипЗнч(СтрокаТаблицы.ПлатежноеПоручение) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
			СписокДокументов.Добавить(СтрокаТаблицы.ПлатежноеПоручение);
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТаблицы Из Платежи_Взносы Цикл
		Если ТипЗнч(СтрокаТаблицы.ПлатежноеПоручение) = Тип("ДокументСсылка.ПлатежноеПоручение") Тогда
			СписокДокументов.Добавить(СтрокаТаблицы.ПлатежноеПоручение);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыОбработки = Новый Структура();
	ПараметрыОбработки.Вставить("Организация",      Объект.Организация);
	ПараметрыОбработки.Вставить("НачалоПериода",    НачалоМесяца(Объект.ПериодРегистрации));
	ПараметрыОбработки.Вставить("КонецПериода",     КонецДня(ТекущаяДата()));
	ПараметрыОбработки.Вставить("СписокДокументов", СписокДокументов);
	
	ОткрытьФорму("Обработка.КлиентБанк.Форма.Форма", ПараметрыОбработки);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
