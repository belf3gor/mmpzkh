#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Конструктор таблицы, описывающей параметры задач, необходимые для расчета статуса задачи.
//
Функция НовыеПараметрыЗадач() Экспорт
	
	ПараметрыЗадач = РегистрыСведений.ЗадачиБухгалтера.КлючиЗадач();
	
	ПараметрыЗадач.Колонки.Добавить("Статус", РегистрыСведений.ЗадачиБухгалтера.ТипСтатуса());
	
	Возврат ПараметрыЗадач;
	
КонецФункции

// Заполняет в переданной таблице колонку статус.
//
// Параметры:
//  ПараметрыВыплат - ТаблицаЗначений:
//   * Организация       - СправочникСсылка.Организации
//   * ПериодРегистрации - Дата
//   * Аванс             - Булево
//   * Статус            - Строка
//
Функция ЗаполнитьСтатусыЗадачВыплатыЗарплаты(ПараметрыВыплат) Экспорт
	
	Для Каждого ПараметрыВыплаты Из ПараметрыВыплат Цикл
		
		ПараметрыОбработки = Новый Структура();
		ПараметрыОбработки.Вставить("Организация",             ПараметрыВыплаты.Организация);
		ПараметрыОбработки.Вставить("ПериодРегистрации",       ПараметрыВыплаты.ПериодРегистрации);
		ПараметрыОбработки.Вставить("Аванс",                   ПараметрыВыплаты.Аванс);
		ПараметрыОбработки.Вставить("Ведомости",               Ведомости()); // будет заполнена в ПодготовитьСведенияОВыплатеЗаработнойПлаты()
		ПараметрыОбработки.Вставить("Платежи_НДФЛ",            Платежи_НДФЛ()); // будет заполнена в ПодготовитьСведенияПоНДФЛ()
		ПараметрыОбработки.Вставить("РасчетныйДокумент",       Неопределено);
		ПараметрыОбработки.Вставить("РежимВыплатыПоДокументу", Ложь);
		ПараметрыОбработки.Вставить("РежимВыплатыЗаПериод",    Ложь);
		ПараметрыОбработки.Вставить("МассивВедомостей",        Неопределено);
		ПараметрыОбработки.Вставить("УчитыватьДанныеВнешнейПрограмммы", Не ПолучитьФункциональнуюОпцию("УчетЗарплатыИКадровСредствамиБухгалтерии"));
		
		ПараметрыВыплаты.Статус = "";
		
		// Оплата ведомостей
		
		ПодготовитьСведенияОВыплатеЗаработнойПлаты(ПараметрыОбработки);
		
		ОплаченыВедомости = ПараметрыОбработки.Ведомости.Количество() <> 0
			И ПараметрыОбработки.Ведомости.Найти(Ложь, "Оплачено") = Неопределено;
		
		Если ПараметрыВыплаты.Аванс Тогда
			
			УплаченНДФЛ = Истина; // Для аванса НДФЛ платить не надо.
			
		Иначе
			
			// Уплата НДФЛ
			ПодготовитьСведенияПоНДФЛ(ПараметрыОбработки);
			
			УплаченНДФЛ = ПараметрыОбработки.Платежи_НДФЛ.Количество() <> 0
							И ПараметрыОбработки.Платежи_НДФЛ.Найти(Ложь, "Оплачено") = Неопределено;
			
		КонецЕсли;
		
		Если ОплаченыВедомости И УплаченНДФЛ Тогда
			ПараметрыВыплаты.Статус = "Выплачено";
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

// Заполняет в переданной таблице колонку статус.
//
//  Параметры:
//   * Организация   - СправочникСсылка.Организации
//   * ПериодСобытия - Дата
//   * Статус        - Строка
//
Процедура ЗаполнитьСтатусыЗадачУплатыВБюджет(ПараметрыЗадач) Экспорт
	
	Для Каждого ПараметрыЗадачи Из ПараметрыЗадач Цикл
		
		ПараметрыЗадачи.Статус = "";
		
		Организация = ПараметрыЗадачи.Организация;
		ПериодРегистрации = ПараметрыЗадачи.ПериодСобытия;
		
		СводРасчетов = Новый ТаблицаЗначений;
		СводРасчетов.Колонки.Добавить("Показатель");
		СводРасчетов.Колонки.Добавить("Сумма");
		СводРасчетов.Колонки.Добавить("Порядок");
		
		Платежи = Новый ТаблицаЗначений;
		
		Платежи.Колонки.Добавить("Организация",         Новый ОписаниеТипов("СправочникСсылка.Организации"));
		Платежи.Колонки.Добавить("Дата",                Новый ОписаниеТипов("Дата"));
		Платежи.Колонки.Добавить("ВерсияДанных",        Новый ОписаниеТипов("Строка"));
		Платежи.Колонки.Добавить("КБК",                 Метаданные.Документы.ПлатежноеПоручение.Реквизиты.КодБК.Тип);
		Платежи.Колонки.Добавить("ОКАТО",               Метаданные.Справочники.РегистрацииВНалоговомОргане.Реквизиты.КодПоОКТМО.Тип);
		Платежи.Колонки.Добавить("Сумма",               Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
		Платежи.Колонки.Добавить("Наименование",        Новый ОписаниеТипов("Строка"));
		Платежи.Колонки.Добавить("КодНалоговогоОргана", Новый ОписаниеТипов("Строка"));
		Платежи.Колонки.Добавить("Налог",               Новый ОписаниеТипов("СправочникСсылка.ВидыНалоговИПлатежейВБюджет"));
		Платежи.Колонки.Добавить("Оплачено",            Новый ОписаниеТипов("Булево"));
		Платежи.Колонки.Добавить("НазначениеПлатежа",   Новый ОписаниеТипов("Строка"));
		Платежи.Колонки.Добавить("КПП",                 ОбщегоНазначения.ОписаниеТипаСтрока(9));
		Платежи.Колонки.Добавить("ВидНалога",           Новый ОписаниеТипов("ПеречислениеСсылка.ВидыНалогов"));
		Платежи.Колонки.Добавить("ПлатежноеПоручениеПредставление", Новый ОписаниеТипов("Строка"));
		Платежи.Колонки.Добавить("ПлатежноеПоручение");
		
		ПараметрыУплат = Новый Структура();
		ПараметрыУплат.Вставить("Организация",            Организация);
		ПараметрыУплат.Вставить("ПериодРегистрации",       ПериодРегистрации);
		ПараметрыУплат.Вставить("СводРасчетов",            СводРасчетов);
		ПараметрыУплат.Вставить("Платежи_Взносы",          Платежи);
		ПараметрыУплат.Вставить("РасчетныйДокумент",       Неопределено);
		ПараметрыУплат.Вставить("РежимВыплатыПоДокументу", Ложь);
		ПараметрыУплат.Вставить("РежимВыплатыЗаПериод",    Ложь);
		
		ПодготовитьСводРасчетов(ПараметрыУплат);
		ПодготовитьСведенияПоВзносам(ПараметрыУплат);
		
		СтрокаВзносы = ПараметрыУплат.СводРасчетов.Найти("Страховые взносы", "Показатель");
		
		Если СтрокаВзносы = Неопределено Или СтрокаВзносы.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НеобходимоУплатить = СтрокаВзносы.Сумма;
		
		ПлатежиОплачено = ПараметрыУплат.Платежи_Взносы.Скопировать(Новый Структура("Оплачено", Истина));
		
		Если ПлатежиОплачено.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Уплачено = ПлатежиОплачено.Итог("Сумма");
		
		Если Уплачено >= НеобходимоУплатить Тогда
			ПараметрыЗадачи.Статус = "Оплачено";
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Собирает данные для отображения в Помощнике, запускает механизмы генерации документов
//
// Параметры:
//  ПараметрыОбработки - Структура
//  АдресХранилища     - Строка.
//
Процедура ПодготовитьДанные(ПараметрыОбработки, АдресХранилища) Экспорт
	
	СтруктураРазделов       = ПараметрыОбработки.СтруктураРазделов;
	
	РезультатВыполнения = Новый Структура();
	РезультатВыполнения.Вставить("СтруктураРазделов", СтруктураРазделов);
	
	Если НЕ ПараметрыОбработки.Аванс Тогда
		Если СтруктураРазделов.РасчетныеДокументы Тогда
			ПодготовитьСведенияОНачисленииЗаработнойПлаты(ПараметрыОбработки);
			РезультатВыполнения.Вставить("РасчетныеДокументы", ПараметрыОбработки.РасчетныеДокументы);
		КонецЕсли;
		
		Если ПараметрыОбработки.РежимВыплатыПоДокументу ИЛИ ПараметрыОбработки.РежимВыплатыЗаПериод Тогда
			Если ПараметрыОбработки.ГенерироватьКомплект Тогда
				ПараметрыОбработки.Вставить("МассивВедомостей", Новый Массив);
				СоздатьВедомостиПоРасчетномуДокументу(ПараметрыОбработки, РезультатВыполнения, АдресХранилища);
			Иначе
				ПараметрыОбработки.Вставить("МассивВедомостей", ПараметрыОбработки.Ведомости.ВыгрузитьКолонку("Ведомость"));
			КонецЕсли;
		КонецЕсли;
		
		Если СтруктураРазделов.СводРасчетов Тогда
			ПодготовитьСводРасчетов(ПараметрыОбработки);
			РезультатВыполнения.Вставить("СводРасчетов", ПараметрыОбработки.СводРасчетов);
		КонецЕсли;
		
		Если СтруктураРазделов.Платежи_НДФЛ Тогда
			ПодготовитьСведенияПоНДФЛ(ПараметрыОбработки);
			Если ПараметрыОбработки.РежимВыплатыПоДокументу ИЛИ ПараметрыОбработки.РежимВыплатыЗаПериод Тогда
				Если ПараметрыОбработки.ГенерироватьКомплект Тогда
					СформироватьДокументыНаУплатуНДФЛ(ПараметрыОбработки);
				КонецЕсли;
				ПодготовитьСведенияПоНДФЛ(ПараметрыОбработки);
			КонецЕсли;
			РезультатВыполнения.Вставить("Платежи_НДФЛ", ПараметрыОбработки.Платежи_НДФЛ);
		КонецЕсли;
		
		Если СтруктураРазделов.Платежи_Взносы Тогда
			ПодготовитьСведенияПоВзносам(ПараметрыОбработки);
			РезультатВыполнения.Вставить("Платежи_Взносы", ПараметрыОбработки.Платежи_Взносы);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураРазделов.Ведомости Тогда
		Если ПараметрыОбработки.РежимВыплатыПоДокументу ИЛИ ПараметрыОбработки.РежимВыплатыЗаПериод Тогда
			ПодготовитьСведенияОВыплатеЗаработнойПлаты(ПараметрыОбработки);
			Если ПараметрыОбработки.ГенерироватьКомплект Тогда
				СформироватьДокументыОплатыВедомостей(ПараметрыОбработки);
			КонецЕсли;
			ПодготовитьСведенияОВыплатеЗаработнойПлаты(ПараметрыОбработки);
		Иначе
			ПодготовитьСведенияОВыплатеЗаработнойПлаты(ПараметрыОбработки);
		КонецЕсли;
		РезультатВыполнения.Вставить("Ведомости", ПараметрыОбработки.Ведомости);
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(РезультатВыполнения, АдресХранилища);
	
КонецПроцедуры

// Формирует представление платежного документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка (ПлатежноеПоручение, РасходныйКассовыйОрдер);
//  Оплачено       - Булево.
//
Функция ПредставлениеПлатежногоДокумента(ДокументСсылка, Оплачено) Экспорт
	
	ПредставлениеДокумента = ДокументСсылка.Метаданные().Синоним;
	РеквизитыДокумента     = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Номер, Дата");
	НомерДокумента         = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(РеквизитыДокумента.Номер, Истина, Истина);
	ДатаДокумента          = Формат(РеквизитыДокумента.Дата,"ДЛФ=D");
	СтатусОплаты           = ?(Оплачено, НСтр("ru = 'оплачено'"), НСтр("ru = 'подготовлено'"));
	
	ШаблонПредставления = НСтр("ru = '%1 %2 от %3 (%4)'");
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления,
		ПредставлениеДокумента, НомерДокумента, ДатаДокумента, СтатусОплаты);

КонецФункции

// Формирует коплект документов зарплаты (ведомости, платежные поручнеия, РКО)
//
// Параметры:
//  ПараметрыОбработки - Структура
//  АдресХранилища     - Строка.
//
Процедура СформироватьДокументы(ПараметрыОбработки, АдресХранилища) Экспорт
	
	СформироватьДокументыНаВыплатуЗарплаты(ПараметрыОбработки);
	
	Если НЕ ПараметрыОбработки.Аванс Тогда
		Если ПараметрыОбработки.Платежи_НДФЛ.Количество() > 0 Тогда
			СформироватьДокументыНаУплатуНДФЛ(ПараметрыОбработки);
		КонецЕсли;
		Если ПараметрыОбработки.Платежи_Взносы.Количество() > 0 Тогда
			СформироватьДокументыНаУплатуВзносов(ПараметрыОбработки);
		КонецЕсли;
	КонецЕсли;
	
	ПодготовитьДанные(ПараметрыОбработки, АдресХранилища);
	
КонецПроцедуры

// Определяет правило уплаты налогов для задачи выплаты зарплаты (это может быть правило НДФЛ, взносов или выплаты)
//
// Параметры:
//  ИдентификаторЗадачи  - Строка
//  ИдентификаторПравила - Строка
//  ИмяИсключение        - Строка
//  ПериодРегистрации    - Дата.
//
Функция ТекущееПравилоЗадачи(ИдентификаторЗадачи, ИдентификаторПравила, ИмяИсключение = " ", ПериодРегистрации) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период",                      ПериодРегистрации);
	Запрос.УстановитьПараметр("ИдентификаторЗадачи",         ИдентификаторЗадачи);
	Запрос.УстановитьПараметр("ИдентификаторПравила",        ИдентификаторПравила);
	Запрос.УстановитьПараметр("ШаблонИдентификатораПравила", "%" + ИдентификаторПравила + "%");
	Запрос.УстановитьПараметр("ИмяИсключение",               ИмяИсключение);
	Запрос.УстановитьПараметр("ШаблонИмениИсключения",       "%" + ИмяИсключение + "%");
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПравилаПредставленияОтчетовУплатыНалогов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|ГДЕ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Код = &ИдентификаторЗадачи
	|	И ВЫБОР
	|			КОГДА ГОД(ПравилаПредставленияОтчетовУплатыНалогов.КонецДействия) = 1
	|					ИЛИ ПравилаПредставленияОтчетовУплатыНалогов.КонецДействия >= &Период
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	И НЕ ПравилаПредставленияОтчетовУплатыНалогов.ПометкаУдаления
	|	И (ПравилаПредставленияОтчетовУплатыНалогов.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.УплатаНалога)
	|			ИЛИ ПравилаПредставленияОтчетовУплатыНалогов.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Зарплата))
	|	И (ПравилаПредставленияОтчетовУплатыНалогов.Код = &ИдентификаторПравила
	|			ИЛИ ПравилаПредставленияОтчетовУплатыНалогов.Код ПОДОБНО &ШаблонИдентификатораПравила)
	|	И ПравилаПредставленияОтчетовУплатыНалогов.Код <> &ИмяИсключение
	|	И НЕ ПравилаПредставленияОтчетовУплатыНалогов.Код ПОДОБНО &ШаблонИмениИсключения";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Возврат Выборка.Ссылка;
	
КонецФункции

// Определяет вид создавемого документа уплаты, и заполненяет передаваемые параметры
//
// Параметры:
//  СтрокаПлатежа      - Строка таблицы значений
//  Правило            - СправочникСсылка.ПравилаПредставленияОтчетовУплатыНалогов
//  УплатаНаличными    - Булево
//  ЭтоПредприниматель - Булево
//  Организация        - СправочникСсылка.Организации
//  ПериодРегистрации  - Дата.
//
Функция ПараметрыФормыПлатежногоДокументаПоСтроке(СтрокаПлатежа,
													Правило,
													УплатаНаличными,
													ЭтоПредприниматель,
													Организация,
													ПериодРегистрации) Экспорт
	
	Если ЗначениеЗаполнено(СтрокаПлатежа.ПлатежноеПоручение) Тогда
		Возврат Новый Структура("Ключ, ВерсияДанных", СтрокаПлатежа.ПлатежноеПоручение, СтрокаПлатежа.ВерсияДанных);
	КонецЕсли;
	
	Если ЭтоПредприниматель Тогда
		Если НЕ УплатаНаличными Тогда
			Если Справочники.БанковскиеСчета.ПолучитьКоличествоПодчиненныхЭлементовПоВладельцу(Организация) = 0 Тогда
				УплатаНаличными = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	СпособОплаты = ?(УплатаНаличными,
						Перечисления.СпособыУплатыНалогов.НаличнымиПоКвитанции,
						Перечисления.СпособыУплатыНалогов.БанковскийПеревод);
	
	СтраховыеВзносы_ФСС_НСиПЗ = 
		Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.СтраховыеВзносы_ФСС_НСиПЗ);
	Если СтрокаПлатежа.Налог = СтраховыеВзносы_ФСС_НСиПЗ Тогда
		Периодичность = "0";
	Иначе
		Периодичность = "МС";
	КонецЕсли;
	
	// Параметры формы для заполнения нового платежного документа
	
	ОписаниеПлатежа = ВыполнениеЗадачБухгалтера.НовыйОписаниеПлатежа(); // Передаем параметры в структуре, потому что их много
	ОписаниеПлатежа.Период              = ПериодРегистрации;
	ОписаниеПлатежа.Налог               = СтрокаПлатежа.Налог;
	ОписаниеПлатежа.ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.Налог;
	ОписаниеПлатежа.Организация         = Организация;
	ОписаниеПлатежа.СпособОплаты        = СпособОплаты;
	ОписаниеПлатежа.ПоказательПериода   = ПлатежиВБюджетКлиентСервер.НалоговыйПериод(ПериодРегистрации, Периодичность);
	ОписаниеПлатежа.Аванс               = Ложь;
	ОписаниеПлатежа.КБК                 = СтрокаПлатежа.КБК;
	ОписаниеПлатежа.ОКАТО               = СтрокаПлатежа.ОКАТО;
	ОписаниеПлатежа.КПППлательщика      = СтрокаПлатежа.КПП;
	ОписаниеПлатежа.КодНалоговогоОргана = СтрокаПлатежа.КодНалоговогоОргана;
	ОписаниеПлатежа.Сумма               = СтрокаПлатежа.Сумма;
	ОписаниеПлатежа.Описание            = СтрокаПлатежа.НазначениеПлатежа;
	ОписаниеПлатежа.Декларация          = Неопределено;
	ОписаниеПлатежа.ДатаДекларации      = "";
	
	ЗначенияЗаполнения = ВыполнениеЗадачБухгалтера.ЗначенияЗаполненияПлатежногоДокумента(ОписаниеПлатежа);
	
	ПараметрыФормыПлатежногоДокумента = Новый Структура();
	ПараметрыФормыПлатежногоДокумента.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ПараметрыФормыПлатежногоДокумента.Вставить("ПериодСобытия",      ПериодРегистрации);
	ПараметрыФормыПлатежногоДокумента.Вставить("Правило",            Правило);
	ПараметрыФормыПлатежногоДокумента.Вставить("УплатаНаличными",    УплатаНаличными);
	
	Возврат ПараметрыФормыПлатежногоДокумента;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДополнитьНачисленияПлатежнымиДокументами(Правила,
													Платежи,
													ПоказательПериода,
													Организация,
													РежимВыплатыПоДокументу = Ложь)
	
	ТаблицаПлатежей = Платежи.Скопировать();
	ТаблицаПлатежей.Колонки.Добавить("ИндексПлатежа", Новый ОписаниеТипов("Число"));
	Для Каждого СтрокаПлатежа Из ТаблицаПлатежей Цикл
		СтрокаПлатежа.ИндексПлатежа = ТаблицаПлатежей.Индекс(СтрокаПлатежа);
	КонецЦикла;
	
	Платежи.Очистить();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Платежи.КБК КАК КБК,
	|	Платежи.ОКАТО КАК ОКАТО,
	|	Платежи.ИндексПлатежа КАК ИндексПлатежа,
	|	ВЫБОР
	|		КОГДА Платежи.КПП = """"
	|			ТОГДА ""0""
	|		ИНАЧЕ Платежи.КПП
	|	КОНЕЦ КАК КПП,
	|	Платежи.Сумма КАК Сумма
	|ПОМЕСТИТЬ ОтборТекущиеПлатежи
	|ИЗ
	|	&Платежи КАК Платежи
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КБК,
	|	ОКАТО,
	|	КПП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗадачиБухгалтераНалоговыеПлатежи.ПлатежноеПоручение КАК Ссылка
	|ПОМЕСТИТЬ ОтборПравило
	|ИЗ
	|	РегистрСведений.ЗадачиБухгалтераНалоговыеПлатежи КАК ЗадачиБухгалтераНалоговыеПлатежи
	|ГДЕ
	|	ЗадачиБухгалтераНалоговыеПлатежи.Организация = &Организация
	|	И ЗадачиБухгалтераНалоговыеПлатежи.Правило В(&Правила)
	|	И НАЧАЛОПЕРИОДА(ЗадачиБухгалтераНалоговыеПлатежи.ПериодСобытия, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&ПериодСобытия, МЕСЯЦ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПлатежноеПоручение.Ссылка КАК Ссылка,
	|	ПлатежноеПоручение.Дата КАК Дата,
	|	ПлатежноеПоручение.КодБК КАК КодБК,
	|	ПлатежноеПоручение.КодОКАТО КАК КодОКАТО,
	|	ПлатежноеПоручение.СуммаДокумента КАК СуммаДокумента,
	|	ВЫБОР
	|		КОГДА ПлатежноеПоручение.КПППлательщика = """"
	|			ТОГДА ""0""
	|		ИНАЧЕ ПлатежноеПоручение.КПППлательщика
	|	КОНЕЦ КАК КПППлательщика,
	|	ПлатежноеПоручение.ВерсияДанных КАК ВерсияДанных
	|ПОМЕСТИТЬ ВТПлатежныеПоручения
	|ИЗ
	|	ОтборПравило КАК Отбор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ПО Отбор.Ссылка = ПлатежноеПоручение.Ссылка
	|ГДЕ
	|	ПлатежноеПоручение.Организация = &Организация
	|	И НЕ ПлатежноеПоручение.ПометкаУдаления
	|	И ПлатежноеПоручение.ПеречислениеВБюджет
	|	И ПлатежноеПоручение.Проведен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасходныйКассовыйОрдер.Ссылка КАК Ссылка,
	|	РасходныйКассовыйОрдер.Дата КАК Дата,
	|	РасходныйКассовыйОрдер.КодБК КАК КБК,
	|	РасходныйКассовыйОрдер.КодОКАТО КАК ОКАТО,
	|	РасходныйКассовыйОрдер.СуммаДокумента КАК Сумма,
	|	ИСТИНА КАК Оплачено,
	|	""0"" КАК КПП,
	|	РасходныйКассовыйОрдер.ВерсияДанных КАК ВерсияДанных
	|ПОМЕСТИТЬ ПлатежиПоПравилу
	|ИЗ
	|	ОтборПравило КАК Отбор
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|		ПО Отбор.Ссылка = РасходныйКассовыйОрдер.Ссылка
	|ГДЕ
	|	РасходныйКассовыйОрдер.Организация = &Организация
	|	И НЕ РасходныйКассовыйОрдер.ПометкаУдаления
	|	И РасходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.УплатаНалога)
	|	И РасходныйКассовыйОрдер.Проведен
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТПлатежныеПоручения.Ссылка,
	|	ВТПлатежныеПоручения.Дата,
	|	ВТПлатежныеПоручения.КодБК,
	|	ВТПлатежныеПоручения.КодОКАТО,
	|	ВТПлатежныеПоручения.СуммаДокумента,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СостоянияБанковскихДокументов.Состояние, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.Оплачено)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ВТПлатежныеПоручения.КПППлательщика = """"
	|			ТОГДА ""0""
	|		ИНАЧЕ ВТПлатежныеПоручения.КПППлательщика
	|	КОНЕЦ,
	|	ВТПлатежныеПоручения.ВерсияДанных
	|ИЗ
	|	ВТПлатежныеПоручения КАК ВТПлатежныеПоручения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияБанковскихДокументов КАК СостоянияБанковскихДокументов
	|		ПО ВТПлатежныеПоручения.Ссылка = СостоянияБанковскихДокументов.СсылкаНаОбъект
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КБК,
	|	ОКАТО,
	|	КПП
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Платежи.ИндексПлатежа КАК ИндексПлатежа,
	|	ПлатежиПоПравилу.Ссылка КАК ПлатежноеПоручение,
	|	ПлатежиПоПравилу.Оплачено КАК Оплачено,
	|	ПлатежиПоПравилу.Сумма КАК Сумма,
	|	ПлатежиПоПравилу.Дата КАК Дата,
	|	ПлатежиПоПравилу.ВерсияДанных КАК ВерсияДанных
	|ИЗ
	|	ПлатежиПоПравилу КАК ПлатежиПоПравилу
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ОтборТекущиеПлатежи КАК Платежи
	|		ПО ПлатежиПоПравилу.КБК = Платежи.КБК
	|			И ПлатежиПоПравилу.ОКАТО = Платежи.ОКАТО
	|			И ПлатежиПоПравилу.КПП = Платежи.КПП
	|			И &Условие
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата
	|ИТОГИ ПО
	|	ИндексПлатежа";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("Правила",       Правила);
	Запрос.УстановитьПараметр("Платежи",       ТаблицаПлатежей);
	Запрос.УстановитьПараметр("ПериодСобытия", ПоказательПериода);
	
	Если РежимВыплатыПоДокументу Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Условие", "ПлатежиПоПравилу.Сумма = Платежи.Сумма");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Условие", "Истина");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	ДатаСегодня = ТекущаяДатаСеанса();
	
	ВыборкаПоИндексам = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоИндексам.Следующий() Цикл
		Выборка = ВыборкаПоИндексам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока Выборка.Следующий() Цикл
			Платеж = ТаблицаПлатежей[Выборка.ИндексПлатежа];
			Платеж.Сумма = Платеж.Сумма - Выборка.Сумма;
			
			НоваяСтрока = Платежи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Платеж);
			НоваяСтрока.ПлатежноеПоручение              = Выборка.ПлатежноеПоручение;
			НоваяСтрока.Оплачено                        = Выборка.Оплачено;
			НоваяСтрока.ПлатежноеПоручениеПредставление =
					ПредставлениеПлатежногоДокумента(Выборка.ПлатежноеПоручение, Выборка.Оплачено);
			НоваяСтрока.Сумма                           = Выборка.Сумма;
			НоваяСтрока.Дата                            = Выборка.Дата;
			НоваяСтрока.ВерсияДанных                    = Выборка.ВерсияДанных;
		КонецЦикла;
		Если Платеж.Сумма > 0 Тогда
			НоваяСтрока = Платежи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Платеж);
			НоваяСтрока.ПлатежноеПоручение              = "";
			НоваяСтрока.Оплачено                        = Ложь;
			НоваяСтрока.ПлатежноеПоручениеПредставление = "";
			НоваяСтрока.Сумма                           = Платеж.Сумма;
			Платеж.Сумма                                = 0;
			НоваяСтрока.Дата                            = КонецГода(ДатаСегодня)+1;
			НоваяСтрока.ВерсияДанных                    = "";
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Платеж ИЗ ТаблицаПлатежей Цикл
		Если Платеж.Сумма > 0 Тогда
			НоваяСтрока = Платежи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Платеж);
			НоваяСтрока.Дата                            = КонецГода(ДатаСегодня)+1;
		КонецЕсли;
	КонецЦикла;
	
	Платежи.Сортировать("Дата");
	
КонецПроцедуры

// Возвращает таблицу, соответствующую реквизиту "Ведомости" в основной форме помощника.
//
Функция Ведомости()
	
	Ведомости = Новый ТаблицаЗначений;
	
	ТипыВедомости = Новый Массив;
	ТипыВедомости.Добавить(Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплаты"));
	ТипыВедомости.Добавить(Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк"));
	ТипыВедомости.Добавить(Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу"));
	
	ТипыПлатежныеДокументы = Новый Массив;
	ТипыПлатежныеДокументы.Добавить(Тип("ДокументСсылка.ПлатежноеПоручение"));
	ТипыПлатежныеДокументы.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	ТипыПлатежныеДокументы.Добавить(Тип("СписокЗначений"));
	
	Ведомости.Колонки.Добавить("ПлатежныеДокументыВерсияДанных",  Новый ОписаниеТипов("Строка"));
	Ведомости.Колонки.Добавить("ВедомостьВерсияДанных",           Новый ОписаниеТипов("Строка"));
	Ведомости.Колонки.Добавить("ВедомостьПредставление",          Новый ОписаниеТипов("Строка"));
	Ведомости.Колонки.Добавить("ЗарплатныйПроект",                Новый ОписаниеТипов("СправочникСсылка.ЗарплатныеПроекты"));
	Ведомости.Колонки.Добавить("Оплачено",                        Новый ОписаниеТипов("Булево"));
	Ведомости.Колонки.Добавить("ПлатежныеДокументыПредставление", Новый ОписаниеТипов("Строка"));
	Ведомости.Колонки.Добавить("ПлатежныеДокументы",              Новый ОписаниеТипов(ТипыПлатежныеДокументы));
	Ведомости.Колонки.Добавить("Сумма",                           ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	Ведомости.Колонки.Добавить("Ведомость",                       Новый ОписаниеТипов(ТипыВедомости));
	
	Возврат Ведомости;
	
КонецФункции

// Возвращает массив актуальных правил по переданному идентификатору задачи
//
Функция Правила(ИдентификаторЗадачи, ПериодРегистрации)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", ПериодРегистрации);
	Запрос.УстановитьПараметр("ИдентификаторЗадачи", ИдентификаторЗадачи);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Ссылка
	|ИЗ
	|	Справочник.ПравилаПредставленияОтчетовУплатыНалогов КАК ПравилаПредставленияОтчетовУплатыНалогов
	|ГДЕ
	|	ПравилаПредставленияОтчетовУплатыНалогов.Владелец.Код = &ИдентификаторЗадачи
	|	И ВЫБОР
	|			КОГДА ГОД(ПравилаПредставленияОтчетовУплатыНалогов.КонецДействия) = 1
	|					ИЛИ ПравилаПредставленияОтчетовУплатыНалогов.КонецДействия >= &Период
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ
	|	И НЕ ПравилаПредставленияОтчетовУплатыНалогов.ПометкаУдаления
	|	И (ПравилаПредставленияОтчетовУплатыНалогов.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.УплатаНалога)
	|			ИЛИ ПравилаПредставленияОтчетовУплатыНалогов.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействийКалендаряБухгалтера.Зарплата))";
	
	Результат = Запрос.Выполнить().Выгрузить();
	МассивПравил = Результат.ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивПравил;
	
КонецФункции

// Возвращает таблицу, соответствующую реквизиту "Платежи_НДФЛ" в основной форме помощника.
//
Функция Платежи_НДФЛ()
	
	Платежи_НДФЛ = Новый ТаблицаЗначений;
	
	ТипыПлатежногоПоручения = Новый Массив;
	ТипыПлатежногоПоручения.Добавить(Тип("ДокументСсылка.ПлатежноеПоручение"));
	ТипыПлатежногоПоручения.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	
	Платежи_НДФЛ.Колонки.Добавить("КБК",                             ОбщегоНазначения.ОписаниеТипаСтрока(20));
	Платежи_НДФЛ.Колонки.Добавить("ОКАТО",                           ОбщегоНазначения.ОписаниеТипаСтрока(11));
	Платежи_НДФЛ.Колонки.Добавить("Сумма",                           ОбщегоНазначения.ОписаниеТипаЧисло(15, 2));
	Платежи_НДФЛ.Колонки.Добавить("Наименование",                    ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Платежи_НДФЛ.Колонки.Добавить("ПлатежноеПоручение",              Новый ОписаниеТипов(ТипыПлатежногоПоручения));
	Платежи_НДФЛ.Колонки.Добавить("Оплачено",                        Новый ОписаниеТипов("Булево"));
	Платежи_НДФЛ.Колонки.Добавить("КодНалоговогоОргана",             ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Платежи_НДФЛ.Колонки.Добавить("НазначениеПлатежа",               ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Платежи_НДФЛ.Колонки.Добавить("ВидНалога",                       Новый ОписаниеТипов("ПеречислениеСсылка.ВидыНалогов"));
	Платежи_НДФЛ.Колонки.Добавить("Налог",                           Новый ОписаниеТипов("СправочникСсылка.ВидыНалоговИПлатежейВБюджет"));
	Платежи_НДФЛ.Колонки.Добавить("Организация",                     Новый ОписаниеТипов("СправочникСсылка.Организации"));
	Платежи_НДФЛ.Колонки.Добавить("ПлатежноеПоручениеПредставление", ОбщегоНазначения.ОписаниеТипаСтрока(0));
	Платежи_НДФЛ.Колонки.Добавить("Дата",                            ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	Платежи_НДФЛ.Колонки.Добавить("КПП",                             ОбщегоНазначения.ОписаниеТипаСтрока(9));
	Платежи_НДФЛ.Колонки.Добавить("ВерсияДанных",                    ОбщегоНазначения.ОписаниеТипаСтрока(0));
	
	Возврат Платежи_НДФЛ;
	
КонецФункции

#Область ПолучениеДанных

Процедура ПодготовитьСводРасчетов(ПараметрыОбработки)
	
	ПараметрыОбработки.СводРасчетов.Очистить();
	
	ПараметрыСтраховыхВзносов = ВыполнениеЗадачБухгалтера.ПараметрыСтраховыхВзносов(ПараметрыОбработки.ПериодРегистрации);
	СчетаСтраховыхВзносов = ПараметрыСтраховыхВзносов.ВыгрузитьКолонку("СчетУчета");
	
	ЗначенияСубконто = Новый Массив;
	ЗначенияСубконто.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
	ЗначенияСубконто.Добавить(Перечисления.ВидыПлатежейВГосБюджет.ВзносыБезСпецоценки);
	
	ПериодРегистрацииНачало = НачалоМесяца(ПараметрыОбработки.ПериодРегистрации);
	ПериодРегистрацииКонец  = КонецМесяца(ПараметрыОбработки.ПериодРегистрации);
	ПериодОстатков          = ДобавитьМесяц(?(ПараметрыОбработки.ПериодРегистрации < ТекущаяДатаСеанса(),
											ТекущаяДатаСеанса(),
											ПараметрыОбработки.ПериодРегистрации),1);
	НачалоСледующегоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Перечисления.Периодичность.Месяц,
																	КонецМесяца(ПараметрыОбработки.ПериодРегистрации)+1);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",             ПараметрыОбработки.Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации",       ПараметрыОбработки.ПериодРегистрации);
	Запрос.УстановитьПараметр("ПериодРегистрацииНачало", ПериодРегистрацииНачало);
	Запрос.УстановитьПараметр("ПериодРегистрацииКонец",  ПериодРегистрацииКонец);
	Запрос.УстановитьПараметр("ПериодОстатков",          ПериодОстатков);
	Запрос.УстановитьПараметр("НачалоСледующегоПериода", НачалоСледующегоПериода);
	Запрос.УстановитьПараметр("СчетаСтраховыхВзносов",   СчетаСтраховыхВзносов);
	Запрос.УстановитьПараметр("ВидСубконто",             ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	Запрос.УстановитьПараметр("ЗначенияСубконто",        ЗначенияСубконто);
	Запрос.УстановитьПараметр("РасчетныйДокумент",       ПараметрыОбработки.РасчетныйДокумент);
	
	Если ПараметрыОбработки.РежимВыплатыПоДокументу ИЛИ ПараметрыОбработки.РежимВыплатыЗаПериод Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	БольничныйЛист.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ВсеРегистраторы
		|ИЗ
		|	Документ.БольничныйЛист КАК БольничныйЛист
		|ГДЕ
		|	БольничныйЛист.Проведен
		|	И БольничныйЛист.ПериодРегистрации = &ПериодРегистрации
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Отпуск.Ссылка
		|ИЗ
		|	Документ.Отпуск КАК Отпуск
		|ГДЕ
		|	Отпуск.Проведен
		|	И Отпуск.ПериодРегистрации = &ПериодРегистрации
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НачислениеЗарплаты.Ссылка
		|ИЗ
		|	Документ.НачислениеЗарплаты КАК НачислениеЗарплаты
		|ГДЕ
		|	НачислениеЗарплаты.Проведен
		|	И НачислениеЗарплаты.МесяцНачисления = &ПериодРегистрации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ВсеРегистраторы.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_Регистраторы
		|ИЗ
		|	ВТ_ВсеРегистраторы КАК ВТ_ВсеРегистраторы
		|ГДЕ
		|	&Условие
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	""Зарплата к выплате"" КАК Показатель,
		|	СУММА(ЗарплатаКВыплате.СуммаКВыплате) КАК Сумма,
		|	1 КАК Порядок
		|ИЗ
		|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
		|ГДЕ
		|	ЗарплатаКВыплате.Организация = &Организация
		|	И ЗарплатаКВыплате.Регистратор = &РасчетныйДокумент
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""НДФЛ"",
		|	СУММА(ВЫБОР
		|			КОГДА НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ)
		|				ТОГДА НачисленияУдержанияПоСотрудникам.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	2
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
		|ГДЕ
		|	НачисленияУдержанияПоСотрудникам.Организация = &Организация
		|	И НачисленияУдержанияПоСотрудникам.Регистратор В
		|			(ВЫБРАТЬ
		|				ВТ_Регистраторы.Ссылка
		|			ИЗ
		|				ВТ_Регистраторы)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
		
		Если ПараметрыОбработки.РежимВыплатыПоДокументу Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", "ВТ_ВсеРегистраторы.Ссылка = &РасчетныйДокумент");
		ИначеЕсли ПараметрыОбработки.РежимВыплатыЗаПериод Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", "Истина");
		КонецЕсли;
		
	Иначе
		Запрос.Текст =
		"ВЫБРАТЬ
		|	""Зарплата к выплате"" КАК Показатель,
		|	СУММА(ВЫБОР
		|			КОГДА ЗарплатаКВыплатеОстатки.СуммаКВыплатеОстаток < 0
		|				ТОГДА 0
		|			ИНАЧЕ ЗарплатаКВыплатеОстатки.СуммаКВыплатеОстаток
		|		КОНЕЦ) КАК Сумма,
		|	1 КАК Порядок
		|ИЗ
		|	РегистрНакопления.ЗарплатаКВыплате.Остатки(
		|			&ПериодОстатков,
		|			Организация = &Организация
		|				И ПериодВзаиморасчетов <= &ПериодРегистрации) КАК ЗарплатаКВыплатеОстатки
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""НДФЛ"",
		|	СУММА(ВЫБОР
		|			КОГДА НачисленияУдержанияПоСотрудникам.НачислениеУдержание = ЗНАЧЕНИЕ(Перечисление.ВидыОсобыхНачисленийИУдержаний.НДФЛ)
		|				ТОГДА НачисленияУдержанияПоСотрудникам.Сумма
		|			ИНАЧЕ 0
		|		КОНЕЦ),
		|	2
		|ИЗ
		|	РегистрНакопления.НачисленияУдержанияПоСотрудникам КАК НачисленияУдержанияПоСотрудникам
		|ГДЕ
		|	НачисленияУдержанияПоСотрудникам.Период МЕЖДУ &ПериодРегистрацииНачало И &ПериодРегистрацииКонец
		|	И НачисленияУдержанияПоСотрудникам.Организация = &Организация
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Страховые взносы"",
		|	СУММА(ХозрасчетныйОстатки.СуммаОстатокКт),
		|	3
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Остатки(
		|			&НачалоСледующегоПериода,
		|			Счет В (&СчетаСтраховыхВзносов),
		|			&ВидСубконто,
		|			Организация = &Организация
		|				И Субконто1 В (&ЗначенияСубконто)) КАК ХозрасчетныйОстатки
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
	КонецЕсли;
	
	ПараметрыОбработки.СводРасчетов = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

Процедура ПодготовитьСведенияОВыплатеЗаработнойПлаты(ПараметрыОбработки)
	
	Ведомости = ПараметрыОбработки.Ведомости.СкопироватьКолонки();
	
	ПериодРегистрации = НачалоМесяца(ПараметрыОбработки.ПериодРегистрации);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", ПараметрыОбработки.Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("МассивВедомостей",  ПараметрыОбработки.МассивВедомостей);
	Запрос.УстановитьПараметр("СпособВыплаты", Справочники.СпособыВыплатыЗарплаты.ПоУмолчанию());
	Запрос.УстановитьПараметр("Аванс", ПараметрыОбработки.Аванс);
	Запрос.УстановитьПараметр("УчитыватьДанныеВнешнейПрограмммы",
		ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыОбработки, "УчитыватьДанныеВнешнейПрограмммы", Ложь));
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплатыВБанк.Ссылка,
	|	ВедомостьНаВыплатуЗарплатыВБанк.СуммаПоДокументу,
	|	ВедомостьНаВыплатуЗарплатыВБанк.ЗарплатныйПроект,
	|	ВедомостьНаВыплатуЗарплатыВБанк.ВерсияДанных
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВБанк КАК ВедомостьНаВыплатуЗарплатыВБанк
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплатыВБанк.Организация = &Организация
	|	И ВедомостьНаВыплатуЗарплатыВБанк.Проведен
	|	И ВедомостьНаВыплатуЗарплатыВБанк.СуммаПоДокументу <> 0
	|	И НАЧАЛОПЕРИОДА(ВедомостьНаВыплатуЗарплатыВБанк.ПериодРегистрации, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|	И ВедомостьНаВыплатуЗарплатыВБанк.СпособВыплаты = &СпособВыплаты
	|	И &УсловиеБанк
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплатыВКассу.Ссылка,
	|	ВедомостьНаВыплатуЗарплатыВКассу.СуммаПоДокументу,
	|	НЕОПРЕДЕЛЕНО,
	|	ВедомостьНаВыплатуЗарплатыВКассу.ВерсияДанных
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплатыВКассу КАК ВедомостьНаВыплатуЗарплатыВКассу
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплатыВКассу.Организация = &Организация
	|	И ВедомостьНаВыплатуЗарплатыВКассу.Проведен
	|	И ВедомостьНаВыплатуЗарплатыВКассу.СуммаПоДокументу <> 0
	|	И НАЧАЛОПЕРИОДА(ВедомостьНаВыплатуЗарплатыВКассу.ПериодРегистрации, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|	И ВедомостьНаВыплатуЗарплатыВКассу.СпособВыплаты = &СпособВыплаты
	|	И &УсловиеКасса
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВедомостьНаВыплатуЗарплаты.Ссылка,
	|	ВедомостьНаВыплатуЗарплаты.СуммаДокумента,
	|	НЕОПРЕДЕЛЕНО,
	|	ВедомостьНаВыплатуЗарплаты.ВерсияДанных
	|ИЗ
	|	Документ.ВедомостьНаВыплатуЗарплаты КАК ВедомостьНаВыплатуЗарплаты
	|ГДЕ
	|	ВедомостьНаВыплатуЗарплаты.Организация = &Организация
	|	И НЕ ВедомостьНаВыплатуЗарплаты.ПометкаУдаления
	|	И ВедомостьНаВыплатуЗарплаты.СуммаДокумента <> 0
	|	И НАЧАЛОПЕРИОДА(ВедомостьНаВыплатуЗарплаты.ПериодРегистрации, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|	И НЕ &Аванс
	|	И &УчитыватьДанныеВнешнейПрограмммы
	|	И &УсловиеВедомости";
	
	Если ПараметрыОбработки.Аванс Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ".СпособВыплаты = &СпособВыплаты", ".СпособВыплаты <> &СпособВыплаты");
	КонецЕсли;
	Если ПараметрыОбработки.МассивВедомостей = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеКасса", "Истина");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеБанк", "Истина");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеВедомости", "Истина");
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеКасса", "ВедомостьНаВыплатуЗарплатыВКассу.Ссылка В (&МассивВедомостей)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеБанк", "ВедомостьНаВыплатуЗарплатыВБанк.Ссылка В (&МассивВедомостей)");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеВедомости", "ВедомостьНаВыплатуЗарплаты.Ссылка В (&МассивВедомостей)");
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить().Выбрать();
	Пока Результат.Следующий() Цикл
		НоваяСтрока = Ведомости.Добавить();
		НоваяСтрока.Ведомость              = Результат.Ссылка;
		НоваяСтрока.ВедомостьПредставление = ПредставлениеВедомости(Результат.Ссылка);
		НоваяСтрока.Сумма                  = Результат.СуммаПоДокументу;
		НоваяСтрока.ЗарплатныйПроект       = Результат.ЗарплатныйПроект;
		НоваяСтрока.ВедомостьВерсияДанных  = Результат.ВерсияДанных;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("Ведомости", Ведомости.ВыгрузитьКолонку("Ведомость"));
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПлатежноеПоручение.ДокументОснование КАК Ведомость,
	|	ПлатежноеПоручение.Ссылка КАК ПлатежныйДокумент,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СостоянияБанковскихДокументов.Состояние, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.Оплачено)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Оплачено,
	|	ПлатежноеПоручение.ВерсияДанных КАК ВерсияДанных
	|ИЗ
	|	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияБанковскихДокументов КАК СостоянияБанковскихДокументов
	|		ПО ПлатежноеПоручение.Ссылка = СостоянияБанковскихДокументов.СсылкаНаОбъект
	|ГДЕ
	|	(ПлатежноеПоручение.ДокументОснование В (&Ведомости)
	|			ИЛИ ПлатежноеПоручение.ПлатежнаяВедомость В (&Ведомости))
	|	И ПлатежноеПоручение.Организация = &Организация
	|	И НЕ ПлатежноеПоручение.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходныйКассовыйОрдер.ПлатежнаяВедомость,
	|	РасходныйКассовыйОрдер.Ссылка,
	|	ИСТИНА,
	|	РасходныйКассовыйОрдер.ВерсияДанных
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер КАК РасходныйКассовыйОрдер
	|ГДЕ
	|	РасходныйКассовыйОрдер.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику)
	|	И РасходныйКассовыйОрдер.ПлатежнаяВедомость В(&Ведомости)
	|	И РасходныйКассовыйОрдер.Организация = &Организация
	|	И НЕ РасходныйКассовыйОрдер.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость,
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка,
	|	ИСТИНА,
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.ВерсияДанных
	|ИЗ
	|	Документ.РасходныйКассовыйОрдер.ВыплатаЗаработнойПлаты КАК РасходныйКассовыйОрдерВыплатаЗаработнойПлаты
	|ГДЕ
	|	РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям)
	|	И РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ведомость В(&Ведомости)
	|	И РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.Организация = &Организация
	|	И НЕ РасходныйКассовыйОрдерВыплатаЗаработнойПлаты.Ссылка.ПометкаУдаления";
	
	СуществующиеДокументы = Запрос.Выполнить().Выгрузить();
	ОтборВедомость = Новый Структура("Ведомость");
	Для Каждого СтрокаТаблицы Из Ведомости Цикл
		ОтборВедомость.Ведомость = СтрокаТаблицы.Ведомость;
		МассивДокументов = СуществующиеДокументы.НайтиСтроки(ОтборВедомость);
		Если МассивДокументов.Количество() = 0 Тогда
			Продолжить;
		ИначеЕсли МассивДокументов.Количество() = 1 Тогда
			СтрокаТаблицы.ПлатежныеДокументы              = МассивДокументов[0].ПлатежныйДокумент;
			СтрокаТаблицы.Оплачено                        = МассивДокументов[0].Оплачено;
			СтрокаТаблицы.ПлатежныеДокументыПредставление =
				ПредставлениеПлатежногоДокумента(МассивДокументов[0].ПлатежныйДокумент, МассивДокументов[0].Оплачено);
			СтрокаТаблицы.ПлатежныеДокументыВерсияДанных  = МассивДокументов[0].ВерсияДанных;
		Иначе
			Оплачено = Истина;
			СписокДокументов = Новый СписокЗначений;
			Оплачены = 0;
			Для Каждого ЗначениеМассива ИЗ МассивДокументов Цикл
				СписокДокументов.Добавить(ЗначениеМассива.ПлатежныйДокумент, ЗначениеМассива.ВерсияДанных);
				Если НЕ ЗначениеМассива.Оплачено Тогда
					Оплачено = Ложь;
				Иначе
					Оплачены = Оплачены + 1;
				КонецЕсли;
			КонецЦикла;
			СтрокаТаблицы.ПлатежныеДокументы              = СписокДокументов;
			Если Оплачены > 0 И МассивДокументов.Количество() = Оплачены Тогда
				СтрокаТаблицы.ПлатежныеДокументыПредставление =
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Платежные поручения %1 (оплачены)'"),
						МассивДокументов.Количество());
			Иначе
				СтрокаТаблицы.ПлатежныеДокументыПредставление =
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Платежные поручения %1 (оплачено %2)'"),
						МассивДокументов.Количество(), Оплачены);
			КонецЕсли;
			СтрокаТаблицы.Оплачено                        = Оплачено;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыОбработки.Ведомости = Ведомости;
	
КонецПроцедуры

Процедура ПодготовитьСведенияОНачисленииЗаработнойПлаты(ПараметрыОбработки)
	
	ПериодРегистрации = НачалоМесяца(ПараметрыОбработки.ПериодРегистрации);
	
	ПредставлениеПериодаРегистрации = ВыборПериодаКлиентСервер.ПолучитьПредставлениеПериодаОтчета(
		Перечисления.ДоступныеПериодыОтчета.Месяц, НачалоМесяца(ПериодРегистрации), КонецМесяца(ПериодРегистрации));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",       ПараметрыОбработки.Организация);
	Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
	Запрос.УстановитьПараметр("РасчетныйДокумент", ПараметрыОбработки.РасчетныйДокумент);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НачислениеЗарплатыНачисления.Ссылка КАК Документ,
	|	НачислениеЗарплатыНачисления.Ссылка.МесяцНачисления КАК ПериодРегистрации,
	|	СУММА(НачислениеЗарплатыНачисления.Результат) КАК Сумма,
	|	NULL КАК Сотрудник,
	|	""Зарплата и налоги"" КАК ДокументПредставление,
	|	3 КАК Порядок,
	|	NULL КАК ДатаНачала,
	|	NULL КАК ДатаОкончания,
	|	NULL КАК ФизическоеЛицо,
	|	НачислениеЗарплатыНачисления.Ссылка.ВерсияДанных КАК ВерсияДанных
	|ПОМЕСТИТЬ ВТ_Начисления
	|ИЗ
	|	Документ.НачислениеЗарплаты.Начисления КАК НачислениеЗарплатыНачисления
	|ГДЕ
	|	НачислениеЗарплатыНачисления.Ссылка.Проведен
	|	И НАЧАЛОПЕРИОДА(НачислениеЗарплатыНачисления.Ссылка.МесяцНачисления, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|	И НачислениеЗарплатыНачисления.Ссылка.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	НачислениеЗарплатыНачисления.Ссылка,
	|	НачислениеЗарплатыНачисления.Ссылка.МесяцНачисления,
	|	НачислениеЗарплатыНачисления.Ссылка.ВерсияДанных
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ОтпускНачисления.Ссылка,
	|	ОтпускНачисления.Ссылка.ПериодРегистрации,
	|	СУММА(ОтпускНачисления.Результат),
	|	ОтпускНачисления.Сотрудник,
	|	""Отпуск"",
	|	2,
	|	ОтпускНачисления.Ссылка.ДатаНачалаОсновногоОтпуска,
	|	ОтпускНачисления.Ссылка.ДатаОкончанияОсновногоОтпуска,
	|	ОтпускНачисления.Ссылка.ФизическоеЛицо,
	|	ОтпускНачисления.Ссылка.ВерсияДанных
	|ИЗ
	|	Документ.Отпуск.Начисления КАК ОтпускНачисления
	|ГДЕ
	|	ОтпускНачисления.Ссылка.Проведен
	|	И НАЧАЛОПЕРИОДА(ОтпускНачисления.Ссылка.ПериодРегистрации, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|	И ОтпускНачисления.Ссылка.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтпускНачисления.Ссылка,
	|	ОтпускНачисления.Ссылка.ПериодРегистрации,
	|	ОтпускНачисления.Сотрудник,
	|	ОтпускНачисления.Ссылка.ДатаНачалаОсновногоОтпуска,
	|	ОтпускНачисления.Ссылка.ДатаОкончанияОсновногоОтпуска,
	|	ОтпускНачисления.Ссылка.ФизическоеЛицо,
	|	ОтпускНачисления.Ссылка.ВерсияДанных
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	БольничныйЛистНачисления.Ссылка,
	|	БольничныйЛистНачисления.Ссылка.ПериодРегистрации,
	|	СУММА(БольничныйЛистНачисления.Результат),
	|	БольничныйЛистНачисления.Сотрудник,
	|	ВЫБОР
	|		КОГДА БольничныйЛистНачисления.Ссылка.ЯвляетсяПродолжениемБолезни
	|			ТОГДА ""Больничный лист (продолжение)""
	|		ИНАЧЕ ""Больничный лист""
	|	КОНЕЦ,
	|	1,
	|	БольничныйЛистНачисления.Ссылка.ДатаНачала,
	|	БольничныйЛистНачисления.Ссылка.ДатаОкончания,
	|	БольничныйЛистНачисления.Ссылка.ФизическоеЛицо,
	|	БольничныйЛистНачисления.Ссылка.ВерсияДанных
	|ИЗ
	|	Документ.БольничныйЛист.Начисления КАК БольничныйЛистНачисления
	|ГДЕ
	|	БольничныйЛистНачисления.Ссылка.Проведен
	|	И НАЧАЛОПЕРИОДА(БольничныйЛистНачисления.Ссылка.ПериодРегистрации, МЕСЯЦ) = НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|	И БольничныйЛистНачисления.Ссылка.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	БольничныйЛистНачисления.Ссылка,
	|	БольничныйЛистНачисления.Ссылка.ПериодРегистрации,
	|	БольничныйЛистНачисления.Сотрудник,
	|	ВЫБОР
	|		КОГДА БольничныйЛистНачисления.Ссылка.ЯвляетсяПродолжениемБолезни
	|			ТОГДА ""Больничный лист (продолжение)""
	|		ИНАЧЕ ""Больничный лист""
	|	КОНЕЦ,
	|	БольничныйЛистНачисления.Ссылка.ДатаНачала,
	|	БольничныйЛистНачисления.Ссылка.ДатаОкончания,
	|	БольничныйЛистНачисления.Ссылка.ФизическоеЛицо,
	|	БольничныйЛистНачисления.Ссылка.ВерсияДанных
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Документ";
	
	Запрос.Выполнить();
	
	Если ПараметрыОбработки.РежимВыплатыЗаПериод Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗарплатаКВыплатеОстатки.ДокументОснование КАК Ссылка
		|ПОМЕСТИТЬ ВТ_Регистраторы
		|ИЗ
		|	РегистрНакопления.ЗарплатаКВыплате.Остатки(КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ), ) КАК ЗарплатаКВыплатеОстатки
		|ГДЕ
		|	ЗарплатаКВыплатеОстатки.СуммаКВыплатеОстаток <> 0
		|	И ЗарплатаКВыплатеОстатки.ПериодВзаиморасчетов = &ПериодРегистрации
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка";
		
		Запрос.Выполнить();
		
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВТ_Начисления.Документ КАК Документ,
	|	ВТ_Начисления.ПериодРегистрации КАК ПериодРегистрации,
	|	ВТ_Начисления.Сумма КАК Сумма,
	|	ВТ_Начисления.Сотрудник КАК Сотрудник,
	|	ВТ_Начисления.ДокументПредставление КАК ДокументПредставление,
	|	ВТ_Начисления.Порядок КАК Порядок,
	|	ВТ_Начисления.ДатаНачала КАК ДатаНачала,
	|	ВТ_Начисления.ДатаОкончания КАК ДатаОкончания,
	|	ВТ_Начисления.ФизическоеЛицо КАК ФизическоеЛицо,
	|	ВТ_Начисления.ВерсияДанных КАК ВерсияДанных
	|ИЗ
	|	ВТ_Начисления КАК ВТ_Начисления
	|ГДЕ
	|	&УсловиеРегистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок УБЫВ,
	|	Документ";
	
	Если ПараметрыОбработки.РежимВыплатыПоДокументу Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеРегистратор", "ВТ_Начисления.Документ = &РасчетныйДокумент");
	ИначеЕсли ПараметрыОбработки.РежимВыплатыЗаПериод Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеРегистратор", "ВТ_Начисления.Документ В (Выбрать ВТ_Регистраторы.Ссылка ИЗ ВТ_Регистраторы)");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеРегистратор", "Истина");
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Если ПараметрыОбработки.Пересчитать Тогда
		ПараметрыОбработки.Пересчитать = Результат.Количество() <> ПараметрыОбработки.РасчетныеДокументы.Количество()
			ИЛИ Результат.Итог("Сумма") <> ПараметрыОбработки.РасчетныеДокументы.Итог("Сумма");
	КонецЕсли;
		
	ПараметрыОбработки.РасчетныеДокументы.Очистить();
	
	ЕстьНачислениеЗарплаты = Ложь;
	Для Каждого СтрокаТаблицы ИЗ Результат Цикл
		НоваяСтрока = ПараметрыОбработки.РасчетныеДокументы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		Если ЗначениеЗаполнено(НоваяСтрока.Сотрудник) Тогда
			ДанныеФизическогоЛица = УчетЗарплаты.ДанныеФизическихЛиц(,СтрокаТаблицы.ФизическоеЛицо, ПериодРегистрации);
			НоваяСтрока.ДокументПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
													НСтр("ru = '%1 (%2, с %3 по %4)'"), 
													НоваяСтрока.ДокументПредставление,
													ДанныеФизическогоЛица.Представление,
													Формат(СтрокаТаблицы.ДатаНачала, "ДФ=dd.MM.yyyy"),
													Формат(СтрокаТаблицы.ДатаОкончания, "ДФ=dd.MM.yyyy"));
		Иначе
			НоваяСтрока.ДокументПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
													НСтр("ru = '%1 за %2 г.'"),
													НоваяСтрока.ДокументПредставление,
													ПредставлениеПериодаРегистрации);
			ЕстьНачислениеЗарплаты = Истина;
		КонецЕсли;
	КонецЦикла;

	Если НЕ ПараметрыОбработки.РежимВыплатыПоДокументу И НЕ ПараметрыОбработки.РежимВыплатыЗаПериод Тогда
		Если ЕстьНачислениеЗарплаты И ПараметрыОбработки.Пересчитать Тогда
			ДокументНачисленияСсылка = УчетЗарплаты.ПолучитьДокументНачисленияЗарплаты(НачалоМесяца(ПериодРегистрации),
																						ПараметрыОбработки.Организация);
			ДокументНачисленияОбъект = ДокументНачисленияСсылка.ПолучитьОбъект();
			ДокументНачисленияОбъект.ПометкаУдаления = Ложь;
			ДокументНачисленияОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			МассивДокументов = ПараметрыОбработки.РасчетныеДокументы.НайтиСтроки(Новый Структура("Документ",
																								ДокументНачисленияСсылка));
			МассивДокументов[0].Сумма = ДокументНачисленияОбъект.Начислено;
		ИначеЕсли НЕ ЕстьНачислениеЗарплаты Тогда
			ДокументНачисленияСсылка = УчетЗарплаты.ПолучитьДокументНачисленияЗарплаты(НачалоМесяца(ПериодРегистрации),
																						ПараметрыОбработки.Организация);
			ДокументНачисленияОбъект = ДокументНачисленияСсылка.ПолучитьОбъект();
			ДокументНачисленияОбъект.Дата            = КонецМесяца(ПериодРегистрации);
			ДокументНачисленияОбъект.ПометкаУдаления = Ложь;
			ДокументНачисленияОбъект.Записать(РежимЗаписиДокумента.Проведение);
			
			НоваяСтрока = ПараметрыОбработки.РасчетныеДокументы.Добавить();
			НоваяСтрока.Документ              = ДокументНачисленияСсылка;
			НоваяСтрока.Сумма                 = ДокументНачисленияСсылка.Начисления.Итог("Результат");
			НоваяСтрока.ДокументПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																				НСтр("ru = 'Зарплата и налоги за %1 г.'"),
																				ПредставлениеПериодаРегистрации);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПодготовитьСведенияПоНДФЛ(ПараметрыОбработки)
	
	Платежи = ПараметрыОбработки.Платежи_НДФЛ.СкопироватьКолонки();
	
	Налог = Справочники.ВидыНалоговИПлатежейВБюджет.НалогПоВиду(Перечисления.ВидыНалогов.НДФЛ);
	
	СчетУчета = Справочники.ВидыНалоговИПлатежейВБюджет.СчетУчета(Налог, ПараметрыОбработки.ПериодРегистрации);
	Если НЕ ЗначениеЗаполнено(СчетУчета) Тогда
		Возврат;
	КонецЕсли;
	
	НачалоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Перечисления.Периодичность.Месяц,
																			ПараметрыОбработки.ПериодРегистрации);
	КонецПериода  = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Перечисления.Периодичность.Месяц,
																			ПараметрыОбработки.ПериодРегистрации);
	
	КБК = Справочники.ВидыНалоговИПлатежейВБюджет.КБК(Налог, , ПараметрыОбработки.ПериодРегистрации);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",                ПараметрыОбработки.Организация);
	Запрос.УстановитьПараметр("НачалоПериода",              НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",               КонецПериода);
	Запрос.УстановитьПараметр("Налог",                      Налог);
	Запрос.УстановитьПараметр("СчетУчета",                  СчетУчета);
	Запрос.УстановитьПараметр("КБК",                        КБК);
	Запрос.УстановитьПараметр("ВидНалоговогоОбязательства", Перечисления.ВидыПлатежейВГосБюджет.Налог);
	Запрос.УстановитьПараметр("РасчетныйДокумент",          ПараметрыОбработки.РасчетныйДокумент);
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ВидыСубконто = Новый Массив;
	ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	
	ТекстДопУсловия = "Истина";
	
	Если ПараметрыОбработки.РежимВыплатыПоДокументу ИЛИ ПараметрыОбработки.РежимВыплатыЗаПериод Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	БольничныйЛист.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ВсеРегистраторы
		|ИЗ
		|	Документ.БольничныйЛист КАК БольничныйЛист
		|ГДЕ
		|	БольничныйЛист.Проведен
		|	И БольничныйЛист.ПериодРегистрации = &НачалоПериода
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Отпуск.Ссылка
		|ИЗ
		|	Документ.Отпуск КАК Отпуск
		|ГДЕ
		|	Отпуск.Проведен
		|	И Отпуск.ПериодРегистрации = &НачалоПериода
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НачислениеЗарплаты.Ссылка
		|ИЗ
		|	Документ.НачислениеЗарплаты КАК НачислениеЗарплаты
		|ГДЕ
		|	НачислениеЗарплаты.Проведен
		|	И НачислениеЗарплаты.МесяцНачисления = &НачалоПериода
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ВсеРегистраторы.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_Регистраторы
		|ИЗ
		|	ВТ_ВсеРегистраторы КАК ВТ_ВсеРегистраторы
		|ГДЕ
		|	&Условие1
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка";
		
		Если ПараметрыОбработки.РежимВыплатыПоДокументу Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие1", "ВТ_ВсеРегистраторы.Ссылка = &РасчетныйДокумент");
		ИначеЕсли ПараметрыОбработки.РежимВыплатыЗаПериод Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие1", "Истина");
		КонецЕсли;
		
		Запрос.Выполнить();
		
		ТекстДопУсловия = "#ИмяРегистра.Регистратор В
					|			(ВЫБРАТЬ
					|				ВТ_Регистраторы.Ссылка
					|			ИЗ
					|				ВТ_Регистраторы)";
		
	КонецЕсли;
	
	Если НалоговыйУчет.УчетВРазрезеНалоговыхОрганов() Тогда
		
		НалоговыйУчетОбособленныхПодразделений.ДобавитьВидСубконтоРегистрацияВНалоговомОргане(ВидыСубконто);
		Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	&СчетУчета КАК СчетУчета,
		|	&КБК КАК КБК,
		|	&Налог КАК Налог,
		|	&ВидНалоговогоОбязательства КАК ВидНалоговогоОбязательства,
		|	РегистрацииВНалоговомОргане.Ссылка КАК РегистрацияВНалоговомОргане,
		|	РегистрацииВНалоговомОргане.Код КАК КодНалоговогоОргана,
		|	РегистрацииВНалоговомОргане.КПП КАК КПП,
		|	РегистрацииВНалоговомОргане.КодПоОКТМО КАК КодПоОКТМО,
		|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт - ХозрасчетныйОбороты.СуммаОборотДт) КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Регистратор,
		|			Счет = &СчетУчета,
		|			&ВидыСубконто,
		|			Организация = &Организация
		|				И Субконто1 = &ВидНалоговогоОбязательства,
		|			,
		|			) КАК ХозрасчетныйОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.РегистрацииВНалоговомОргане КАК РегистрацииВНалоговомОргане
		|		ПО ХозрасчетныйОбороты.Субконто2 = РегистрацииВНалоговомОргане.Ссылка
		|ГДЕ
		|	НЕ(ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.СписаниеСРасчетногоСчета
		|				ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер)
		|	И &ДопУсловие
		|
		|СГРУППИРОВАТЬ ПО
		|	РегистрацииВНалоговомОргане.Ссылка,
		|	РегистрацииВНалоговомОргане.Код,
		|	РегистрацииВНалоговомОргане.КПП,
		|	РегистрацииВНалоговомОргане.КодПоОКТМО
		|
		|УПОРЯДОЧИТЬ ПО
		|	КодПоОКТМО,
		|	КПП,
		|	КодНалоговогоОргана,
		|	РегистрацияВНалоговомОргане";
		
		ТекстДопУсловия = СтрЗаменить(ТекстДопУсловия, "#ИмяРегистра", "ХозрасчетныйОбороты");
		
		
	ИначеЕсли БухгалтерскийУчетПереопределяемый.РасчетЗарплатыПоПодразделениямДляНебольшихОрганизаций() Тогда
		
		Запрос.УстановитьПараметр("МесяцНалоговогоПериода",  НачалоДня(КонецПериода));
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	&СчетУчета КАК СчетУчета,
		|	&КБК КАК КБК,
		|	&Налог КАК Налог,
		|	&ВидНалоговогоОбязательства КАК ВидНалоговогоОбязательства,
		|	РасчетыПоНДФЛ.РегистрацияВНалоговомОргане КАК РегистрацияВНалоговомОргане,
		|	РасчетыПоНДФЛ.РегистрацияВНалоговомОргане.Код КАК КодНалоговогоОргана,
		|	РасчетыПоНДФЛ.РегистрацияВНалоговомОргане.КПП КАК КПП,
		|	РасчетыПоНДФЛ.РегистрацияВНалоговомОргане.КодПоОКТМО КАК КодПоОКТМО,
		|	СУММА(РасчетыПоНДФЛ.СуммаПриход) КАК Сумма
		|ИЗ
		|	РегистрНакопления.РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Регистратор,
		|			Организация = &Организация
		|				И МесяцНалоговогоПериода = &МесяцНалоговогоПериода) КАК РасчетыПоНДФЛ
		|ГДЕ
		|	&ДопУсловие
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетыПоНДФЛ.РегистрацияВНалоговомОргане,
		|	РасчетыПоНДФЛ.РегистрацияВНалоговомОргане.Код,
		|	РасчетыПоНДФЛ.РегистрацияВНалоговомОргане.КПП,
		|	РасчетыПоНДФЛ.РегистрацияВНалоговомОргане.КодПоОКТМО
		|
		|УПОРЯДОЧИТЬ ПО
		|	КодПоОКТМО,
		|	КПП,
		|	КодНалоговогоОргана,
		|	РегистрацияВНалоговомОргане";
		
		ТекстДопУсловия = СтрЗаменить(ТекстДопУсловия, "#ИмяРегистра", "РасчетыПоНДФЛ");
		
	Иначе
		
		Запрос.УстановитьПараметр("ВидыСубконто", ВидыСубконто);
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	&СчетУчета КАК СчетУчета,
		|	&КБК КАК КБК,
		|	&Налог КАК Налог,
		|	&ВидНалоговогоОбязательства КАК ВидНалоговогоОбязательства,
		|	ЗНАЧЕНИЕ(Справочник.РегистрацииВНалоговомОргане.ПустаяСсылка) КАК РегистрацияВНалоговомОргане,
		|	"""" КАК КодНалоговогоОргана,
		|	"""" КАК КПП,
		|	"""" КАК КодПоОКТМО,
		|	СУММА(ХозрасчетныйОбороты.СуммаОборотКт - ХозрасчетныйОбороты.СуммаОборотДт) КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			Регистратор,
		|			Счет = &СчетУчета,
		|			&ВидыСубконто,
		|			Организация = &Организация
		|				И Субконто1 = &ВидНалоговогоОбязательства,
		|			,
		|			) КАК ХозрасчетныйОбороты
		|ГДЕ
		|	НЕ(ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.СписаниеСРасчетногоСчета
		|				ИЛИ ХозрасчетныйОбороты.Регистратор ССЫЛКА Документ.РасходныйКассовыйОрдер)
		|	И &ДопУсловие";
		
		ТекстДопУсловия = СтрЗаменить(ТекстДопУсловия, "#ИмяРегистра", "ХозрасчетныйОбороты");
		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДопУсловие", ТекстДопУсловия);
	Запрос.Текст = ТекстЗапроса;
	
	ТаблицаНалоговВзносов = Запрос.Выполнить().Выгрузить();
	
	КодТерритории = Справочники.Организации.КодТерриторииМестаРегистрации(ПараметрыОбработки.Организация);
	ПлатежиВБюджетКлиентСервер.ПривестиКодТерриторииКФорматуПриказа58н(КодТерритории, ПараметрыОбработки.ПериодРегистрации);
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыОбработки.Организация, "ЮридическоеФизическоеЛицо") =
			Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		КППОрганизации      = "0";
	Иначе
		КППОрганизации      = Справочники.Организации.КППНаДату(ПараметрыОбработки.Организация, КонецПериода);
	КонецЕсли;
	КодНалоговогоОргана = ДанныеГосударственныхОрганов.КодГосударственногоОрганаОрганизации(
		ПараметрыОбработки.Организация, Перечисления.ВидыГосударственныхОрганов.НалоговыйОрган);
	
	Для Каждого СтрокаТаблицы Из ТаблицаНалоговВзносов Цикл
		
		СтрокаНалога = Платежи.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНалога, СтрокаТаблицы);
		
		СтрокаНалога.ОКАТО = ?(ЗначениеЗаполнено(СтрокаТаблицы.КодПоОКТМО), СтрокаТаблицы.КодПоОКТМО, КодТерритории);
		ПлатежиВБюджетКлиентСервер.ПривестиКодТерриторииКФорматуПриказа58н(СтрокаНалога.ОКАТО, ПараметрыОбработки.ПериодРегистрации);
		Если НЕ ЗначениеЗаполнено(СтрокаНалога.КПП) Тогда
			СтрокаНалога.КПП = КППОрганизации;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаНалога.КодНалоговогоОргана) Тогда
			СтрокаНалога.КодНалоговогоОргана = КодНалоговогоОргана;
		КонецЕсли;
		
	КонецЦикла;
	
	МассивПравил = Правила("НДФЛ_Агент_Уплата", ПараметрыОбработки.ПериодРегистрации);
	
	ДополнитьНачисленияПлатежнымиДокументами(МассивПравил,
												Платежи,
												ПараметрыОбработки.ПериодРегистрации,
												ПараметрыОбработки.Организация,
												ПараметрыОбработки.РежимВыплатыПоДокументу);
	
	ПараметрыОбработки.Вставить("Платежи_НДФЛ", Платежи);
	
КонецПроцедуры

Процедура ПодготовитьСведенияПоВзносам(ПараметрыОбработки)
	
	Платежи = ПараметрыОбработки.Платежи_Взносы.СкопироватьКолонки();
	
	НачалоСледующегоПериода = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Перечисления.Периодичность.Месяц,
																	КонецМесяца(ПараметрыОбработки.ПериодРегистрации)+1);
	НачалоТекущегоПериода   = ИнтерфейсыВзаимодействияБРОКлиентСервер.НачалоПериода(Перечисления.Периодичность.Месяц,
																	ПараметрыОбработки.ПериодРегистрации);
	КонецТекущегоПериода    = ИнтерфейсыВзаимодействияБРОКлиентСервер.КонецПериода(Перечисления.Периодичность.Месяц,
																	ПараметрыОбработки.ПериодРегистрации);
	
	ПараметрыСтраховыхВзносов = ВыполнениеЗадачБухгалтера.ПараметрыСтраховыхВзносов(ПараметрыОбработки.ПериодРегистрации);
	
	СчетаСтраховыхВзносов = ПараметрыСтраховыхВзносов.ВыгрузитьКолонку("СчетУчета");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",             ПараметрыОбработки.Организация);
	Запрос.УстановитьПараметр("НачалоСледующегоПериода", НачалоСледующегоПериода);
	Запрос.УстановитьПараметр("НачалоПериода",           НачалоТекущегоПериода);
	Запрос.УстановитьПараметр("КонецПериода",            КонецТекущегоПериода);
	
	ЗначенияСубконто = Новый Массив;
	ЗначенияСубконто.Добавить(Перечисления.ВидыПлатежейВГосБюджет.Налог);
	ЗначенияСубконто.Добавить(Перечисления.ВидыПлатежейВГосБюджет.ВзносыБезСпецоценки);
	
	// Для получения остатков.
	Запрос.УстановитьПараметр("СчетаСтраховыхВзносов", СчетаСтраховыхВзносов);
	Запрос.УстановитьПараметр("ВидСубконто",      ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ВидыПлатежейВГосБюджет);
	Запрос.УстановитьПараметр("ЗначенияСубконто", ЗначенияСубконто);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК СчетУчета,
	|	ХозрасчетныйОстатки.Субконто1 КАК ВидНалоговогоОбязательства,
	|	ХозрасчетныйОстатки.СуммаОстатокКт КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&НачалоСледующегоПериода,
	|			Счет В (&СчетаСтраховыхВзносов),
	|			&ВидСубконто,
	|			Организация = &Организация
	|				И Субконто1 В (&ЗначенияСубконто)) КАК ХозрасчетныйОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ХозрасчетныйОбороты.Счет КАК СчетУчета,
	|	ХозрасчетныйОбороты.Субконто1 КАК ВидНалоговогоОбязательства,
	|	ХозрасчетныйОбороты.СуммаОборотКт КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Период,
	|			Счет В (&СчетаСтраховыхВзносов),
	|			&ВидСубконто,
	|			Организация = &Организация
	|				И Субконто1 В (&ЗначенияСубконто),
	|			,
	|			) КАК ХозрасчетныйОбороты";
	
	Результат = Запрос.ВыполнитьПакет();
	Выборка   = Результат[0].Выбрать();
	Если Выборка.Количество() = 0 Тогда
		// возможно оформлено месяц в месяц
		Выборка   = Результат[1].Выбрать();
	КонецЕсли;
	
	КодТерритории = Справочники.Организации.КодТерриторииМестаРегистрации(ПараметрыОбработки.Организация);
	ПлатежиВБюджетКлиентСервер.ПривестиКодТерриторииКФорматуПриказа58н(КодТерритории, ПараметрыОбработки.ПериодРегистрации);
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыОбработки.Организация, "ЮридическоеФизическоеЛицо") =
			Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
		КППОрганизации      = "0";
	Иначе
		КППОрганизации      = Справочники.Организации.КППНаДату(ПараметрыОбработки.Организация, КонецТекущегоПериода);
	КонецЕсли;
	КодыГосударственныхОрганов = Новый Соответствие; // Кешируем в функции
	
	Пока Выборка.Следующий() Цикл
		Платеж = Платежи.Добавить();
		ЗаполнитьЗначенияСвойств(Платеж, Выборка);
		Платеж.Организация = ПараметрыОбработки.Организация;
		Платеж.ОКАТО       = КодТерритории;
		Платеж.КПП         = КППОрганизации;
		СтруктураПоиска = Новый Структура("СчетУчета, ВидНалоговогоОбязательства");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
		РеквизитыПоСчету = ПараметрыСтраховыхВзносов.НайтиСтроки(СтруктураПоиска);
		Если РеквизитыПоСчету.Количество() <> 0 Тогда
			ЗаполнитьЗначенияСвойств(Платеж, РеквизитыПоСчету[0], "КБК, Налог");
		КонецЕсли;
		
		ШаблонНаименования    = НСтр("ru = '%1%2:'");
		НаименованиеНалога    = Строка(Платеж.Налог);
		УточнениеНаименования = "";
		Если Выборка.ВидНалоговогоОбязательства = Перечисления.ВидыПлатежейВГосБюджет.ВзносыБезСпецоценки Тогда
			УточнениеНаименования = НСтр("ru = ' (без спецоценки)'");
		КонецЕсли;
		Платеж.Наименование = СтрШаблон(ШаблонНаименования, НаименованиеНалога, УточнениеНаименования);
		
		ВидГосударственногоОргана = ПлатежиВБюджетПереопределяемый.ВидГосударственногоОргана(Платеж.КБК);
		КодГосударственногоОргана = КодыГосударственныхОрганов[ВидГосударственногоОргана];
		Если КодГосударственногоОргана = Неопределено Тогда
			КодГосударственногоОргана =
				ДанныеГосударственныхОрганов.КодГосударственногоОрганаОрганизации(ПараметрыОбработки.Организация,
																					ВидГосударственногоОргана);
			КодыГосударственныхОрганов.Вставить(ВидГосударственногоОргана, КодГосударственногоОргана);
		КонецЕсли;
		Платеж.КодНалоговогоОргана = КодГосударственногоОргана;
	КонецЦикла;
	
	МассивПравил = Правила("СтраховыеВзносы", ПараметрыОбработки.ПериодРегистрации);
	
	ДополнитьНачисленияПлатежнымиДокументами(МассивПравил,
												Платежи,
												ПараметрыОбработки.ПериодРегистрации,
												ПараметрыОбработки.Организация);
	
	ПараметрыОбработки.Вставить("Платежи_Взносы", Платежи);
	
КонецПроцедуры

Функция ПредставлениеВедомости(ДокументСсылка)
	
	ПредставлениеДокумента = ДокументСсылка.Метаданные().Синоним;
	РеквизитыДокумента     = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ДокументСсылка, "Номер, Дата");
	НомерДокумента         = ПрефиксацияОбъектовКлиентСервер.ПолучитьНомерНаПечать(РеквизитыДокумента.Номер, Истина, Истина);
	ДатаДокумента          = Формат(РеквизитыДокумента.Дата,"ДЛФ=D");
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу") Тогда
		ПредставлениеДокумента = НСтр("ru = 'Платежная ведомость'");
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк") Тогда
		ПредставлениеДокумента = НСтр("ru = 'Реестр перечислений'");
	КонецЕсли;
	
	ШаблонПредставления = НСтр("ru = '%1 %2 от %3'");
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПредставления,
		ПредставлениеДокумента, НомерДокумента, ДатаДокумента);

КонецФункции

#КонецОбласти

#Область ГенераторКомплектовДокументов

Процедура СформироватьДокументыНаВыплатуЗарплаты(ПараметрыОбработки)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация", ПараметрыОбработки.Организация);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗарплатныеПроекты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ЗарплатныеПроекты КАК ЗарплатныеПроекты
	|ГДЕ
	|	ЗарплатныеПроекты.Организация = &Организация
	|	И НЕ ЗарплатныеПроекты.ПометкаУдаления";
	
	ЗарплатныеПроекты = Запрос.Выполнить().Выгрузить();
	
	ВидыМестВыплаты = Перечисления.ВидыМестВыплатыЗарплаты.ВсеЗначения();
	
	Для Каждого ВидМестаВыплаты ИЗ ВидыМестВыплаты Цикл
		
		Если ВидМестаВыплаты = Перечисления.ВидыМестВыплатыЗарплаты.ЗарплатныйПроект Тогда
			// Для зарплатных проектов
			Для Каждого ЗарплатныйПроект ИЗ ЗарплатныеПроекты Цикл
				ДобавитьВедомость(ВидМестаВыплаты, ЗарплатныйПроект.Ссылка, ПараметрыОбработки);
			КонецЦикла;
		Иначе
			// Для личных счетов и по кассе
			ДобавитьВедомость(ВидМестаВыплаты, , ПараметрыОбработки);
		КонецЕсли;
		
	КонецЦикла;
	
	СформироватьДокументыОплатыВедомостей(ПараметрыОбработки);
	
КонецПроцедуры

Процедура ДобавитьВедомость(ВидМестаВыплаты, ЗарплатныйПроект = Неопределено, ПараметрыОбработки)
	
	ДокументМенеджер = ВзаиморасчетыССотрудниками.МенеджерДокументаВедомостьПоВидуМестаВыплаты(ВидМестаВыплаты);
	Если ДокументМенеджер = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Ведомость = ДокументМенеджер.СоздатьДокумент();
	
	ДанныеЗаполнения = ВедомостьНаВыплатуЗарплатыБазовый.ДанныеЗаполненияВедомости();
	ДанныеЗаполнения.Шапка.Организация       = ПараметрыОбработки.Организация;
	ДанныеЗаполнения.Шапка.Дата              = ТекущаяДатаСеанса();
	ДанныеЗаполнения.Шапка.ПериодРегистрации = ПараметрыОбработки.ПериодРегистрации;
	ДанныеЗаполнения.Шапка.Вставить("ВидМестаВыплаты", ВидМестаВыплаты);
	Если НЕ ПараметрыОбработки.Аванс Тогда
		ДанныеЗаполнения.Шапка.СпособВыплаты = Справочники.СпособыВыплатыЗарплаты.ПоУмолчанию();
	Иначе
		ДанныеЗаполнения.Шапка.СпособВыплаты = Справочники.СпособыВыплатыЗарплаты.Аванс();
	КонецЕсли;
	Округление = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения.Шапка.СпособВыплаты, "Округление");
	Если ЗначениеЗаполнено(Округление) Тогда
		ДанныеЗаполнения.Шапка.Округление    = Округление;
	Иначе
		ДанныеЗаполнения.Шапка.Округление    = Справочники.СпособыОкругленияПриРасчетеЗарплаты.ПоУмолчанию();
	КонецЕсли;
	
	Ведомость.Заполнить(ДанныеЗаполнения);
	Если ЗарплатныйПроект <> Неопределено Тогда
		Ведомость.ЗарплатныйПроект = ЗарплатныйПроект;
	КонецЕсли;
	
	ЗаполнитьЗарплату(Ведомость);
	
	Если Ведомость.Зарплата.Количество() <> 0 Тогда
		
		Ведомость.Записать(РежимЗаписиДокумента.Проведение);
	
		НоваяСтрока = ПараметрыОбработки.Ведомости.Добавить();
		НоваяСтрока.Ведомость = Ведомость.Ссылка;
		НоваяСтрока.Сумма     = Ведомость.СуммаПоДокументу;
		Если ЗарплатныйПроект <> Неопределено Тогда
			НоваяСтрока.ЗарплатныйПроект = ЗарплатныйПроект;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьДокументыНаУплатуНДФЛ(ПараметрыОбработки)
	
	ДатаДокумента = ?(ЗначениеЗаполнено(ПараметрыОбработки.ДатаВыплаты),
						ПараметрыОбработки.ДатаВыплаты,
						ТекущаяДатаСеанса());
	
	Для каждого СтрокаПлатежа Из ПараметрыОбработки.Платежи_НДФЛ Цикл
		
		Если ЗначениеЗаполнено(СтрокаПлатежа.ПлатежноеПоручение) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат = Неопределено;
		
		ПараметрыФормы = ПараметрыФормыПлатежногоДокументаПоСтроке(
			СтрокаПлатежа,
			ПараметрыОбработки.Правило_НДФЛ,
			Ложь,
			ПараметрыОбработки.ЭтоПредприниматель,
			ПараметрыОбработки.Организация,
			ПараметрыОбработки.ПериодРегистрации);
		
		Если ПараметрыОбработки.ЭтоПредприниматель
				И НЕ ЗначениеЗаполнено(ПараметрыОбработки.СчетОрганизации) Тогда
			
			ДокументОбъект = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
			ДокументОбъект.Заполнить(ПараметрыФормы.ЗначенияЗаполнения);
			ДокументОбъект.Дата = ДатаДокумента;
			
			Результат = ЗаписатьПлатежныйДокумент(ДокументОбъект,
				СтрокаПлатежа, ПараметрыФормы.Правило, ПараметрыФормы.ПериодСобытия);
			
		Иначе
			
			ДокументОбъект = Документы.ПлатежноеПоручение.СоздатьДокумент();
			ДокументОбъект.Заполнить(ПараметрыФормы.ЗначенияЗаполнения);
			ДокументОбъект.Дата = ДатаДокумента;
			
			Результат = ЗаписатьПлатежныйДокумент(ДокументОбъект,
				СтрокаПлатежа, ПараметрыФормы.Правило, ПараметрыФормы.ПериодСобытия);
			
		КонецЕсли;
			
		Если ЗначениеЗаполнено(Результат) Тогда
			СтрокаПлатежа.ПлатежноеПоручение = Результат;
		КонецЕсли;
		
	КонецЦикла;
	
	РегистрыСведений.ДокументыИнтеграцииСБанком.ОтправитьОповещениеОбИзмененииПоДокументамВФоне(
		ПараметрыОбработки.Платежи_НДФЛ.ВыгрузитьКолонку("ПлатежноеПоручение"));
	
КонецПроцедуры

Процедура СформироватьДокументыНаУплатуВзносов(ПараметрыОбработки)
	
	Для каждого СтрокаПлатежа Из ПараметрыОбработки.Платежи_Взносы Цикл
		
		Если ЗначениеЗаполнено(СтрокаПлатежа.ПлатежноеПоручение) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущееПравило = ПараметрыОбработки.Правило_Взносы;
		Если СтрокаПлатежа.ВидНалога = Перечисления.ВидыНалогов.СтраховыеВзносы_ПФР_Добровольные Тогда
			ТекущееПравило = ТекущееПравилоЗадачи("СтраховыеВзносы", "_Уплата_Допвзносы",
													,
													ПараметрыОбработки.ПериодРегистрации);
		КонецЕсли;
		
		Результат = Неопределено;
		
		ПараметрыФормы = ПараметрыФормыПлатежногоДокументаПоСтроке(
			СтрокаПлатежа,
			ТекущееПравило,
			Ложь,
			ПараметрыОбработки.ЭтоПредприниматель,
			ПараметрыОбработки.Организация,
			ПараметрыОбработки.ПериодРегистрации);
		
		Если ПараметрыОбработки.ЭтоПредприниматель
			И НЕ ЗначениеЗаполнено(ПараметрыОбработки.СчетОрганизации) Тогда
			
			ДокументОбъект = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
			ДокументОбъект.Заполнить(ПараметрыФормы.ЗначенияЗаполнения);
			
			Результат = ЗаписатьПлатежныйДокумент(ДокументОбъект,
				СтрокаПлатежа, ПараметрыФормы.Правило, ПараметрыФормы.ПериодСобытия);
			
		Иначе
			
			ДокументОбъект = Документы.ПлатежноеПоручение.СоздатьДокумент();
			ДокументОбъект.Заполнить(ПараметрыФормы.ЗначенияЗаполнения);
			
			Результат = ЗаписатьПлатежныйДокумент(ДокументОбъект,
				СтрокаПлатежа, ПараметрыФормы.Правило, ПараметрыФормы.ПериодСобытия);
			
		КонецЕсли;
			
		Если ЗначениеЗаполнено(Результат) Тогда
			СтрокаПлатежа.ПлатежноеПоручение = Результат;
		КонецЕсли;
		
	КонецЦикла;
	
	РегистрыСведений.ДокументыИнтеграцииСБанком.ОтправитьОповещениеОбИзмененииПоДокументамВФоне(
		ПараметрыОбработки.Платежи_Взносы.ВыгрузитьКолонку("ПлатежноеПоручение"));
	
КонецПроцедуры

Функция ЗаписатьПлатежныйДокумент(ДокументОбъект, СтрокаПлатежа, Правило, ПериодСобытия)
	
	МетаданныеДокумента = ДокументОбъект.Метаданные();
	
	Попытка
		
		// Если документ заполнен без ошибок, то проводим, предварительно записываем для привязки сообщений об ошибках
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		БезОшибок = ДокументОбъект.ПроверитьЗаполнение();
		Если БезОшибок Тогда
			ВыполнениеЗадачБухгалтера.УстановитьСвойстваПлатежаПриРегистрации(ДокументОбъект, Правило, ПериодСобытия);
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		КонецЕсли;
		
		Возврат ДокументОбъект.Ссылка;
	Исключение
		ТекстСообщения = НСтр("ru = 'Не сформирован документ ""%1"" на %2 руб.'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения, МетаданныеДокумента.Синоним, СтрокаПлатежа.Сумма);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		
		ТекстОшибки = НСтр("ru = 'Не удалось создать документ.
			|%1'");
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстОшибки, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Помощник уплаты налога'", ОбщегоНазначения.КодОсновногоЯзыка()), 
			УровеньЖурналаРегистрации.Ошибка,
			МетаданныеДокумента,
			,
			ОписаниеОшибки);
	КонецПопытки;
	
	Возврат Неопределено;
	
КонецФункции

Процедура СформироватьДокументыОплатыВедомостей(ПараметрыОбработки)
	
	ДатаДокумента = ?(ЗначениеЗаполнено(ПараметрыОбработки.ДатаВыплаты),
										ПараметрыОбработки.ДатаВыплаты,
										ТекущаяДатаСеанса());
	
	СтатьяДвиженияДенежныхСредств =
		ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.СтатьиДвиженияДенежныхСредств.ОплатаТруда");
	
	СозданныеПлатежныеПоручения = Новый Массив;
	
	Для Каждого ПараметрыВедомости ИЗ ПараметрыОбработки.Ведомости Цикл
		
		Если ЗначениеЗаполнено(ПараметрыВедомости.ПлатежныеДокументы) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ПараметрыВедомости.Ведомость) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВКассу") Тогда
			МассивДокументовКасса = Новый Массив;
			МассивДокументовКасса.Добавить(ПараметрыВедомости.Ведомость);
			
			ДокументВыплаты = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
			ДокументВыплаты.Заполнить(МассивДокументовКасса);
			ДокументВыплаты.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
			ДокументВыплаты.Дата = ДатаДокумента;
			ДокументВыплаты.Записать(РежимЗаписиДокумента.Проведение);
			
		ИначеЕсли ТипЗнч(ПараметрыВедомости.Ведомость) = Тип("ДокументСсылка.ВедомостьНаВыплатуЗарплатыВБанк") Тогда
			Если ЗначениеЗаполнено(ПараметрыВедомости.ЗарплатныйПроект) Тогда
				
				ДокументВыплаты = Документы.ПлатежноеПоручение.СоздатьДокумент();
				ДокументВыплаты.Заполнить(ПараметрыВедомости.Ведомость);
				ДокументВыплаты.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
				ДокументВыплаты.Дата = ДатаДокумента;
				ДокументВыплаты.Записать(РежимЗаписиДокумента.Проведение);
				СозданныеПлатежныеПоручения.Добавить(ДокументВыплаты.Ссылка);
				
			Иначе
				
				ОбработкаОбъект = Новый Структура();
				ОбработкаОбъект.Вставить("Организация",                   ПараметрыОбработки.Организация);
				ОбработкаОбъект.Вставить("СчетОрганизации",               ПараметрыОбработки.СчетОрганизации);
				ОбработкаОбъект.Вставить("ПлатежнаяВедомость",            ПараметрыВедомости.Ведомость);
				ОбработкаОбъект.Вставить("СтатьяДвиженияДенежныхСредств", СтатьяДвиженияДенежныхСредств);
				ОбработкаОбъект.Вставить("ДатаПлатежныхПоручений",        ДатаДокумента);
				ОбработкаОбъект.Вставить("ПлатежныеПоручения",            Новый ТаблицаЗначений);
				ПараметрыДопОбработки = Новый Структура("Объект", ОбработкаОбъект);
				АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, Новый УникальныйИдентификатор);
				Обработки.ВыплатаЗарплатыПлатежнымиПоручениями.Автозаполнение(ПараметрыДопОбработки,
																				АдресХранилища);
				ПараметрыДопОбработки = ПолучитьИзВременногоХранилища(АдресХранилища);
				Обработки.ВыплатаЗарплатыПлатежнымиПоручениями.СоздатьПлатежныеПоручения(ПараметрыДопОбработки,
																							АдресХранилища);
				ПараметрыДопОбработки = ПолучитьИзВременногоХранилища(АдресХранилища);
				Обработки.ВыплатаЗарплатыПлатежнымиПоручениями.ПровестиПлатежныеПоручения(ПараметрыДопОбработки,
																							АдресХранилища);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	РегистрыСведений.ДокументыИнтеграцииСБанком.ОтправитьОповещениеОбИзмененииПоДокументамВФоне(
		СозданныеПлатежныеПоручения);
	
КонецПроцедуры

#КонецОбласти

#Область ГенераторКомплектаВРежимеВыплатыПоДокументу

Процедура СоздатьВедомостиПоРасчетномуДокументу(ПараметрыОбработки, РезультатВыполнения, АдресХранилища)
	
	НастройкиУчетаЗарплаты = РегистрыСведений.НастройкиУчетаЗарплаты.Получить(Новый Структура("Организация",
																					ПараметрыОбработки.Организация));
	
	ПараметрыСоздания = Новый Структура();
	ПараметрыСоздания.Вставить("УникальныйИдентификаторФормы",
		АдресХранилища);
	ПараметрыСоздания.Вставить("СпособВыплаты",
		Справочники.СпособыВыплатыЗарплаты.Зарплата);
	ПараметрыСоздания.Вставить("Округление",
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыСоздания.СпособВыплаты, "Округление"));
	ПараметрыСоздания.Вставить("ДатаВыплаты",
		ПараметрыОбработки.ДатаВыплаты);
	
	МассивВедомостей = Новый Массив;
	
	ВыборкаКлючейВедомостей = КлючиВедомостейПоРасчетномуДокументу(ПараметрыОбработки.РасчетныйДокумент, ПараметрыСоздания);
	
	Пока ВыборкаКлючейВедомостей.Следующий() Цикл
		
		Ведомость = НоваяВедомостьПоРасчетномуДокументу(ПараметрыОбработки.РасчетныйДокумент,
															ВыборкаКлючейВедомостей,
															ПараметрыСоздания);
		
		ЗаполнитьЗарплату(Ведомость);
		Ведомость.Записать(РежимЗаписиДокумента.Проведение);
		
		МассивВедомостей.Добавить(Ведомость.Ссылка);
		
	КонецЦикла;
	
	ПараметрыОбработки.МассивВедомостей = МассивВедомостей;
	
КонецПроцедуры

Функция КлючиВедомостейПоРасчетномуДокументу(РасчетныйДокумент, ПараметрыСоздания)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц; 
	
	Запрос.УстановитьПараметр("РасчетныйДокумент",		РасчетныйДокумент);
	Запрос.УстановитьПараметр("ДатаВыплаты",			ПараметрыСоздания.ДатаВыплаты);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЗарплатаКВыплате.Сотрудник,
	|	&ДатаВыплаты КАК Период
	|ПОМЕСТИТЬ ВТСотрудникиИПериод
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|ГДЕ
	|	ЗарплатаКВыплате.Регистратор = &РасчетныйДокумент";
	
	Запрос.Выполнить();
	
	// Получаем кадровые данные сотрудников.
	ОписательВТ = 
		КадровыйУчет.ОписательВременныхТаблицДляСоздатьВТКадровыеДанныеСотрудников(
			Запрос.МенеджерВременныхТаблиц,
			"ВТСотрудникиИПериод");
	КадровыйУчет.СоздатьВТКадровыеДанныеСотрудников(
		ОписательВТ, Истина, "Подразделение, ВидМестаВыплаты, ЗарплатныйПроект");
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗарплатаКВыплате.Организация КАК Организация,
	|	ЗарплатаКВыплате.ПериодВзаиморасчетов КАК ПериодРегистрации,
	|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК Подразделение,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиФинансированияЗарплата.ПустаяСсылка) КАК СтатьяФинансирования,
	|	ЗНАЧЕНИЕ(Справочник.СтатьиРасходовЗарплата.ПустаяСсылка) КАК СтатьяРасходов,
	|	ЕСТЬNULL(КадровыеДанныеСотрудников.ВидМестаВыплаты, ЗНАЧЕНИЕ(Перечисление.ВидыМестВыплатыЗарплаты.Касса)) КАК ВидМестаВыплаты,
	|	ЕСТЬNULL(КадровыеДанныеСотрудников.ЗарплатныйПроект, ЗНАЧЕНИЕ(Справочник.ЗарплатныеПроекты.ПустаяСсылка)) КАК ЗарплатныйПроект,
	|	ЗНАЧЕНИЕ(Справочник.СпособыВыплатыЗарплаты.Зарплата) КАК СпособВыплаты,
	|	СУММА(ЗарплатаКВыплате.СуммаКВыплате) КАК КВыплате
	|ИЗ
	|	РегистрНакопления.ЗарплатаКВыплате КАК ЗарплатаКВыплате
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТКадровыеДанныеСотрудников КАК КадровыеДанныеСотрудников
	|		ПО ЗарплатаКВыплате.Сотрудник = КадровыеДанныеСотрудников.Сотрудник
	|ГДЕ
	|	ЗарплатаКВыплате.Регистратор = &РасчетныйДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗарплатаКВыплате.Организация,
	|	ЗарплатаКВыплате.ПериодВзаиморасчетов,
	|	ЕСТЬNULL(КадровыеДанныеСотрудников.ВидМестаВыплаты, ЗНАЧЕНИЕ(Перечисление.ВидыМестВыплатыЗарплаты.Касса)),
	|	ЕСТЬNULL(КадровыеДанныеСотрудников.ЗарплатныйПроект, ЗНАЧЕНИЕ(Справочник.ЗарплатныеПроекты.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Организация,
	|	ПериодРегистрации,
	|	Подразделение,
	|	СтатьяФинансирования,
	|	СтатьяРасходов,
	|	ВидМестаВыплаты";
	
	ВыборкаЗарплатыКВыплатеПоРасчетномуДокументу = Запрос.Выполнить().Выбрать();

	Возврат ВыборкаЗарплатыКВыплатеПоРасчетномуДокументу
	
КонецФункции

Функция НоваяВедомостьПоРасчетномуДокументу(РасчетныйДокумент, КлючВедомости, ПараметрыСоздания)
	
	ДокументМенеджер = ВзаиморасчетыССотрудниками.МенеджерДокументаВедомостьПоВидуМестаВыплаты(КлючВедомости.ВидМестаВыплаты);
	
	Ведомость = ДокументМенеджер.СоздатьДокумент();
	
	ДанныеЗаполнения = ВедомостьНаВыплатуЗарплатыБазовый.ДанныеЗаполненияВедомости();
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения.Шапка, КлючВедомости);
	ЗаполнитьЗначенияСвойств(ДанныеЗаполнения.Шапка, ПараметрыСоздания);
	
	ДанныеЗаполнения.Шапка.Вставить("ВидМестаВыплаты", КлючВедомости.ВидМестаВыплаты);
	ДанныеЗаполнения.Шапка.Вставить("МестоВыплаты",    КлючВедомости.ЗарплатныйПроект);
	
	ДанныеЗаполнения.Шапка.Дата = ПараметрыСоздания.ДатаВыплаты;
	
	Ведомость.Заполнить(ДанныеЗаполнения);
	
	Ведомость.ДополнительныеСвойства.Вставить("Основания", РасчетныйДокумент);
	
	Возврат Ведомость
	
КонецФункции

Процедура ЗаполнитьЗарплату(Ведомость)
	
	МенеджерВедомости = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ведомость.Ссылка);
	ПараметрыЗаполнения = МенеджерВедомости.ПараметрыЗаполненияПоОбъекту(Ведомость);
	
	Если Ведомость.ДополнительныеСвойства.Свойство("Основания") Тогда
		ПараметрыЗаполнения.ОписаниеОперации.ДокументыОснования.Добавить(Ведомость.ДополнительныеСвойства.Основания);
	КонецЕсли;
	
	Зарплата = ВедомостьНаВыплатуЗарплаты.ЗарплатаКВыплате(
		ПараметрыЗаполнения.ОписаниеОперации,
		ПараметрыЗаполнения.ОтборСотрудников,
		ПараметрыЗаполнения.ПараметрыРасчетаЗарплаты,
		ПараметрыЗаполнения.Финансирование,
		Ведомость.Ссылка);
	
	НДФЛ = ВедомостьНаВыплатуЗарплаты.НалогиКУдержанию(
		Зарплата, 
		ПараметрыЗаполнения.ОписаниеОперации, 
		ПараметрыЗаполнения.ПараметрыРасчетаНДФЛ, 
		ПараметрыЗаполнения.Финансирование,
		Ведомость.Ссылка);
	
	Ведомость.ЗагрузитьВыплаты(Зарплата, НДФЛ);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
