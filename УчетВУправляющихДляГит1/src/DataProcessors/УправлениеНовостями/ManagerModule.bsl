///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2018, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Загрузка файлов новостей по HTTP / HTTPS соединению или из файла во временные хранилища.
// Если установлен режим работы только с локальными новостями, то в обработку уже должны быть переданы
//  только необходимые ленты новостей (только с протоколом file).
//
// Параметры:
//  ЛентыНовостей - ТаблицаЗначений - таблица лент новостей со следующими колонками:
//   * Пометка                 - Булево - Если ИСТИНА, то данную ленту новостей надо загрузить;
//   * ОбязательныйКанал       - Булево - Если ИСТИНА, то данную ленту новостей надо загрузить ВНЕ ЗАВИСИМОСТИ от галочки Пометка;
//   * ЛентаНовостей           - СправочникСсылки.ЛентаНовостей - Ссылка на элемент справочника для подстановки в элемент Справочник.Новости;
//   * Сайт                    - Строка -;
//   * ИмяФайла                - Строка -;
//   * Протокол                - Строка - возможные значения http, https, file;
//   * ВариантЛогинаПароля     - ПеречислениеСсылка.ВариантЛогинаПароляДляЛентыНовостей - БезЛогинаПароля, ВручнуюОдинаковыйДляВсех, ВручнуюРазныйДляВсех, ВебИТС;
//   * Логин                   - Строка -;
//   * Пароль                  - Строка -;
//   * ПарольХранилищеЗначений - ХранилищеЗначений - данные из базы, которые должны быть преобразованы;
//   * ЛокальнаяЛентаНовостей  - Булево - лента новостей не обновляется из файла или из интернета, а заполняется напрямую в справочник Новости;
//   * ЧастотаОбновления       - Число(1,0) - Частота обновления;
//   * АдресВХранилище         - Строка - Адрес загруженного файла во временном хранилище.
//  КонтекстВыполнения - Структура, Неопределено - структура контекста выполнения.
//
Процедура ЗагрузитьФайлыНовостейССервера(ЛентыНовостей, КонтекстВыполнения = Неопределено) Экспорт

	Перем ХттпСоединение, ХттпОтвет;

	НаименованиеПроцедурыФункции = "Обработка.УправлениеНовостями.ЗагрузитьФайлыНовостейССервера"; // Идентификатор.
	ЗаписыватьВЖурналРегистрации = Ложь;
	Если КонтекстВыполнения = Неопределено Тогда
		КонтекстВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
		ЗаписыватьВЖурналРегистрации = Истина;
	КонецЕсли;
	КодРезультата = 0;
	ОписаниеРезультата = "";
	КонтекстВыполненияВложенный = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Контекст "по шагам".
	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		НаименованиеПроцедурыФункции, // Идентификатор.
		НСтр("ru='Загрузка файлов новостей'"));

		ТипОбъектМетаданных = Тип("ОбъектМетаданных");
		ТипДата             = Тип("Дата");
		ТипСтрока           = Тип("Строка");
		ТипЭлементHTML      = Тип("ЭлементHTML");
		ТипЭлементЯкорьHTML = Тип("ЭлементЯкорьHTML");

		ТекущаяДатаДляРегистров = ТекущаяУниверсальнаяДата();

#Область НастройкиПолученияНовостей

		ИдентификаторШага1 = "НастройкиПолученияНовостей"; // Идентификатор.
		КодРезультатаВложенный = 0;
		ЛогШаговВыполненияВложенный = Новый Массив;
		ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			НаименованиеПроцедурыФункции
				+ "." + ИдентификаторШага1, // Идентификатор.
			НаименованиеПроцедурыФункции
				+ "." + ИдентификаторШага1);

			// Таймаут и количество попыток получения файла - брать из настроек.
			НастройкиПолученияНовостей = ХранилищаНастроек.НастройкиНовостей.Загрузить(
				"НастройкиПолученияНовостей",
				,
				,
				""); // Для всех пользователей

		ОписаниеРезультатаВложенный = СтрСоединить(ЛогШаговВыполненияВложенный, Символы.ПС);
		ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			КодРезультатаВложенный,
			ОписаниеРезультатаВложенный,
			Неопределено);

#КонецОбласти

#Область ФормированиеСпискаЛентНовостей

		ИдентификаторШага1 = "ФормированиеСпискаЛентНовостей"; // Идентификатор.
		КодРезультатаВложенный = 0;
		ЛогШаговВыполненияВложенный = Новый Массив;
		ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			НаименованиеПроцедурыФункции
				+ "." + ИдентификаторШага1, // Идентификатор.
			НаименованиеПроцедурыФункции
				+ "." + ИдентификаторШага1);

			ТаблицаХТТПСоединений = ЛентыНовостей.Скопировать(, "Сайт, Протокол, ВариантЛогинаПароля, Логин, Пароль");
			ТаблицаХТТПСоединений.Свернуть("Сайт, Протокол, ВариантЛогинаПароля, Логин, Пароль");

			// 1. Правильно ли заполнено переопределение?
			ЕстьОшибкиВнедрения = Ложь;
			Результат = ОбработкаНовостей.ПроверитьПравильностьВнедренияПодсистемы("ТолькоПереопределения");
			Если НЕ ПустаяСтрока(Результат) Тогда
				ЕстьОшибкиВнедрения = Истина;
				КодРезультатаВложенный = 2;
				ЛогШаговВыполненияВложенный.Добавить(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Ошибки внедрения подсистемы Новости:
							|%1'"),
						Результат));
			КонецЕсли;
			// 2. Есть в лентах параметр [config]? Если ДА и есть ошибка внедрения, то отключить ленту из обработки.
			Если ЕстьОшибкиВнедрения =Истина Тогда
				Для Каждого ТекущаяЛентаНовостей Из ЛентыНовостей Цикл
					Если СтрНайти(ВРег(ТекущаяЛентаНовостей.ИмяФайла), ВРег("[config]")) > 0 Тогда
						// Эта лента новостей содержит шаблон [config], но из-за неправильного внедрения
						//  новости все равно не будут загружены корректно, поэтому отключим получение новостей по этой ленте новостей.
						ТекущаяЛентаНовостей.Пометка = Ложь;
						ЛогШаговВыполненияВложенный.Добавить(
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Лента новостей [%1] исключена из загрузки из-за ошибок внедрения. Имя файла на сервере: %2'"),
								ТекущаяЛентаНовостей.ЛентаНовостей,
								ТекущаяЛентаНовостей.ИмяФайла));
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;

		ОписаниеРезультатаВложенный = СтрСоединить(ЛогШаговВыполненияВложенный, Символы.ПС);
		ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			КодРезультатаВложенный,
			ОписаниеРезультатаВложенный,
			Неопределено);

#КонецОбласти

#Область ПредопределенныеКатегории

		ИдентификаторШага1 = "ПредопределенныеКатегории"; // Идентификатор.
		КодРезультатаВложенный = 0;
		ЛогШаговВыполненияВложенный = Новый Массив;
		ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			НаименованиеПроцедурыФункции
				+ "." + ИдентификаторШага1, // Идентификатор.
			НаименованиеПроцедурыФункции
				+ "." + ИдентификаторШага1);

			// Значения предопределенных категорий.
			УстановитьПривилегированныйРежим(Истина);
				ЭтотПродукт      = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ЭтотПродукт"); // Имя продукта и полная версия продукта
				ВерсияПлатформы  = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("ВерсияПлатформы"); // Только полная версия платформы
				ВерсияБиблиотеки = ИнтернетПоддержкаПользователейКлиентСервер.ВнутреннееПредставлениеНомераВерсии(ИнтернетПоддержкаПользователейКлиентСервер.ВерсияБиблиотеки());
				МетаданныеВерсия = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("МетаданныеВерсия"); // Версия конфигурации, из метаданных
				МетаданныеИмя    = ОбработкаНовостейПовтИсп.ПолучитьЗначениеПредопределеннойКатегории("МетаданныеИмя"); // Имя конфигурации, из метаданных
				МетаданныеИмя    = КодироватьСтроку(МетаданныеИмя, СпособКодированияСтроки.КодировкаURL, "UTF8");
				Попытка
					ЭтоРазделеннаяКонфигурация               = ИнтернетПоддержкаПользователей.ЭтоРазделеннаяКонфигурация();
					ЭтоРазделеннаяКонфигурация_Представление = ?(ЭтоРазделеннаяКонфигурация = Истина, "true", "false");
				Исключение
					ЭтоРазделеннаяКонфигурация_Представление = "unknown";
				КонецПопытки;
				Попытка
					РазделениеВключено               = ОбщегоНазначения.РазделениеВключено();
					РазделениеВключено_Представление = ?(РазделениеВключено = Истина, "true", "false");
				Исключение
					РазделениеВключено_Представление = "unknown";
				КонецПопытки;
				Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
					РежимРаботыПрограммы_Представление = "File";
				Иначе
					РежимРаботыПрограммы_Представление = "ClientServer";
				КонецЕсли;
			УстановитьПривилегированныйРежим(Ложь);

		ОписаниеРезультатаВложенный = СтрСоединить(ЛогШаговВыполненияВложенный, Символы.ПС);
		ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			КодРезультатаВложенный,
			ОписаниеРезультатаВложенный,
			Неопределено);

#КонецОбласти

#Область ЗагрузкаФайлов

		КонтекстВыполненияВложенныйВложенный = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Контекст "по шагам".
		ИдентификаторШага1 = "ЗагрузкаФайлов"; // Идентификатор.
		КодРезультатаВложенный = 0;
		ЛогШаговВыполненияВложенный = Новый Массив;
		ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			НаименованиеПроцедурыФункции
				+ "." + ИдентификаторШага1, // Идентификатор.
			НаименованиеПроцедурыФункции
				+ "." + ИдентификаторШага1);

			// Для одинаковых параметров (Сайт, Протокол, ВариантЛогинаПароля, Логин, Пароль) создавать
			//  одно ХТТП соединение для оптимизации быстродействия.
			Для каждого ТекущееХТТПСоединение Из ТаблицаХТТПСоединений Цикл

				ЛогШаговВыполненияВложенный.Добавить(
					СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Обработка: %1, %2'"),
							ТекущееХТТПСоединение.Протокол,
							ТекущееХТТПСоединение.Сайт));

				Если ВРег(ТекущееХТТПСоединение.Протокол) = ВРег("file") Тогда

#Область ЗагрузкаФайлов_Файл

					ОписательУсловияПоиска = Новый Структура;
					ОписательУсловияПоиска.Вставить("Сайт",                ТекущееХТТПСоединение.Сайт); // Должно быть пустое
					ОписательУсловияПоиска.Вставить("Протокол",            ТекущееХТТПСоединение.Протокол);
					ОписательУсловияПоиска.Вставить("ВариантЛогинаПароля", ТекущееХТТПСоединение.ВариантЛогинаПароля); // Должно быть = БезЛогинаПароля
					ОписательУсловияПоиска.Вставить("Логин",               ТекущееХТТПСоединение.Логин); // Должно быть пустое
					ОписательУсловияПоиска.Вставить("Пароль",              ТекущееХТТПСоединение.Пароль); // Должно быть пустое
					МассивОбрабатываемыхЛентНовостей = ЛентыНовостей.НайтиСтроки(ОписательУсловияПоиска);

					Для каждого ТекущаяЛентаНовостей Из МассивОбрабатываемыхЛентНовостей Цикл

						ТШагЛентаНовостейНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
						ЕстьОшибки = Ложь;

						// Получить файл
						Попытка
							// В имени файла может быть указан макет из метаданных. Если так, то получить данные из макета.
							Если (СтрНайти(ВРег(СокрЛП(ТекущаяЛентаНовостей.ИмяФайла)), ВРег("Метаданные.")) = 1)
									И (СтрНайти(ВРег(СокрЛП(ТекущаяЛентаНовостей.ИмяФайла)), ВРег(".Макеты.")) > 0) Тогда

								// Например, Метаданные.Справочники.ЛентыНовостей.Макеты.СтандартныеЗначения
								МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(СокрЛП(ТекущаяЛентаНовостей.ИмяФайла), ".");
								Если МассивСлов.Количество() = 5 Тогда
									Попытка
										ОбъектМетаданныхМакет = Метаданные[МассивСлов[1]][МассивСлов[2]].Макеты[МассивСлов[4]];
									Исключение
										ОбъектМетаданныхМакет = Неопределено;
										ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru='Ошибка получения новостей из метаданных %1 для ленты новостей %2 по причине
												|%3'"),
											ТекущаяЛентаНовостей.ИмяФайла,
											ТекущаяЛентаНовостей.ЛентаНовостей,
											ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

										ЛогШаговВыполненияВложенный.Добавить(ТекстСообщения);

										// Пропустить ленту новостей
										ЕстьОшибки = Истина;
									КонецПопытки;
									Если ЕстьОшибки = Ложь Тогда
										Попытка
											Если ТипЗнч(ОбъектМетаданныхМакет) = ТипОбъектМетаданных Тогда
												Если ВРег(МассивСлов[1]) = ВРег("Справочники") Тогда
													Макет = Справочники[МассивСлов[2]].ПолучитьМакет(ОбъектМетаданныхМакет);
												ИначеЕсли ВРег(МассивСлов[1]) = ВРег("Документы") Тогда
													Макет = Документы[МассивСлов[2]].ПолучитьМакет(ОбъектМетаданныхМакет);
												ИначеЕсли ВРег(МассивСлов[1]) = ВРег("Отчеты") Тогда
													Макет = Отчеты[МассивСлов[2]].ПолучитьМакет(ОбъектМетаданныхМакет);
												ИначеЕсли ВРег(МассивСлов[1]) = ВРег("Обработки") Тогда
													Макет = Обработки[МассивСлов[2]].ПолучитьМакет(ОбъектМетаданныхМакет);
												Иначе
													Макет = Неопределено;
													ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
														НСтр("ru='Ошибка получения новостей из макета %1 для ленты новостей %2 - эти метаданные не обрабатываются'"),
														ТекущаяЛентаНовостей.ИмяФайла,
														ТекущаяЛентаНовостей.ЛентаНовостей);

													ЛогШаговВыполненияВложенный.Добавить(ТекстСообщения);

													// Пропустить ленту новостей
													ЕстьОшибки = Истина;
												КонецЕсли;
											КонецЕсли;
											Если ЕстьОшибки = Ложь Тогда
												Если Макет <> Неопределено Тогда
													Если ОбъектМетаданныхМакет.ТипМакета = Метаданные.СвойстваОбъектов.ТипМакета.ТекстовыйДокумент Тогда
														ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
														Макет.Записать(ИмяВременногоФайла, "UTF-8");
														ТекущаяЛентаНовостей.АдресВХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла));
														Попытка
															УдалитьФайлы(ИмяВременногоФайла);
														Исключение
															ИнформацияОбОшибке = ИнформацияОбОшибке();
															ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
																НСтр("ru='ЗагрузитьФайлыНовостейССервера (получено из макета): Не удалось удалить временный файл %1 для ленты новостей %2 по причине:
																	|%3
																	|
																	|Рекомендуется вручную удалить этот временный файл.'"),
																СокрЛП(ИмяВременногоФайла),
																ТекущаяЛентаНовостей.ЛентаНовостей,
																ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));

															ЛогШаговВыполненияВложенный.Добавить(ТекстСообщения);

														КонецПопытки;
													Иначе
														ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
															НСтр("ru='Ошибка получения новостей из макета %1 для ленты новостей %2: возможна загрузка только из текстового макета'"),
															ТекущаяЛентаНовостей.ИмяФайла,
															ТекущаяЛентаНовостей.ЛентаНовостей);

														ЛогШаговВыполненияВложенный.Добавить(ТекстСообщения);

														// Пропустить ленту новостей
														ЕстьОшибки = Истина;
													КонецЕсли;
												КонецЕсли;
											КонецЕсли;
										Исключение
											ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												НСтр("ru='Ошибка получения новостей из макета %1 для ленты новостей %2 по причине:
													|%3'"),
												ТекущаяЛентаНовостей.ИмяФайла,
												ТекущаяЛентаНовостей.ЛентаНовостей,
												ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

											ЛогШаговВыполненияВложенный.Добавить(ТекстСообщения);

											// Пропустить ленту новостей
											ЕстьОшибки = Истина;
										КонецПопытки;
									КонецЕсли;
								КонецЕсли;
							Иначе
								Если ПустаяСтрока(ТекущаяЛентаНовостей.АдресВХранилище) Тогда
									Если НЕ ПустаяСтрока(ТекущаяЛентаНовостей.ИмяФайла) Тогда
										ТекущаяЛентаНовостей.АдресВХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ТекущаяЛентаНовостей.ИмяФайла));
									КонецЕсли;
								Иначе
									// В переопределяемых модулях могли подготовить текст XML-содержимого ленты новостей и поместить во временное хранилище.
									// Например, текст может подготовиться в ОбработкаНовостейПереопределяемый.ПолучитьДополнительныеСтандартныеЗначенияНовостей,
									//  и потом в модуле менеджера справочника Новости поместиться напрямую в параметр ЛентыНовостей.
								КонецЕсли;
							КонецЕсли;
						Исключение
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Ошибка получения файла %1 для ленты новостей %2 по причине:
									|%3'"),
								ТекущаяЛентаНовостей.ИмяФайла,
								ТекущаяЛентаНовостей.ЛентаНовостей,
								ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

							ЛогШаговВыполненияВложенный.Добавить(ТекстСообщения);

							// Пропустить ленту новостей
							ЕстьОшибки = Истина;
						КонецПопытки;

						Если ЕстьОшибки = Ложь Тогда
							ДополнительноеВремя = 0;
						Иначе
							// Настроить так, чтобы следующая проверка была через 30 минут +-10 минут.
							// Разброс необходим, чтобы все клиенты не попали на одно и то же время, а были более-менее равномерно распределены.
							ГенераторСЧ = Новый ГенераторСлучайныхЧисел(Секунда(ТекущаяУниверсальнаяДата()));
							СлучайноеЧислоСекунд = ГенераторСЧ.СлучайноеЧисло(0, 30*60) - 10*60; // В секундах, -10..+20 минут
							ДополнительноеВремя = 30*60 + СлучайноеЧислоСекунд; // +30 минут +- 10..20 минут
						КонецЕсли;
						// Сохранить дату последнего выполнения / обновления
						Запись = РегистрыСведений.ВсеОбновленияНовостей.СоздатьМенеджерЗаписи();
						Запись.ВидОбновления = "Получение новостей"; // Идентификатор.
						Запись.ЛентаНовостей = ТекущаяЛентаНовостей.ЛентаНовостей;
						Запись.ДатаПоследнегоОбновления = ТекущаяДатаДляРегистров;
						Если ТекущаяЛентаНовостей.ЧастотаОбновления = 1 Тогда // Ежедневно
							Запись.ДатаСледующегоОбновления = ТекущаяДатаДляРегистров + 24*60*60 + ДополнительноеВремя;
						ИначеЕсли ТекущаяЛентаНовостей.ЧастотаОбновления = 2 Тогда // Ежечасно
							Запись.ДатаСледующегоОбновления = ТекущаяДатаДляРегистров + 1*60*60 + ДополнительноеВремя;
						ИначеЕсли ТекущаяЛентаНовостей.ЧастотаОбновления = 3 Тогда // Каждые 15 минут
							Запись.ДатаСледующегоОбновления = ТекущаяДатаДляРегистров + 15*60 + ДополнительноеВремя;
						ИначеЕсли ТекущаяЛентаНовостей.ЧастотаОбновления = 4 Тогда // Ежеминутно
							Запись.ДатаСледующегоОбновления = ТекущаяДатаДляРегистров + 1*60 + ДополнительноеВремя;
						Иначе // Без автообновления или другое значение
							Запись.ДатаСледующегоОбновления = '00010101';
						КонецЕсли;
						Запись.Записать(Истина);

						ТШагЛентаНовостейКонец = ТекущаяУниверсальнаяДатаВМиллисекундах();

						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Загрузка: загрузка файла новостей из ленты новостей %1 (протокол %2, сайт %3, имя файла %4).
								|Успешно? %5
								|Время выполнения (мс): %6'"),
							ТекущаяЛентаНовостей.ЛентаНовостей,
							ТекущаяЛентаНовостей.Протокол,
							ТекущаяЛентаНовостей.Сайт,
							ТекущаяЛентаНовостей.ИмяФайла,
							(ЕстьОшибки = Ложь),
							(ТШагЛентаНовостейКонец - ТШагЛентаНовостейНачало));

						ЛогШаговВыполненияВложенный.Добавить(ТекстСообщения);

					КонецЦикла;

#КонецОбласти

				ИначеЕсли (ВРег(ТекущееХТТПСоединение.Протокол) = ВРег("http"))
						ИЛИ (ВРег(ТекущееХТТПСоединение.Протокол) = ВРег("https")) Тогда // http, https

#Область ЗагрузкаФайлов_ХТТП

					ЕстьОшибки = Ложь;

					// Шаг 1 / 2, Соединение с сервером.
					// Логин / пароль должны быть уже заполнены.

					ХттпСоединение = Неопределено;
					Если НЕ ОбработкаНовостей.СоединитьсяССерверомНовостей(
								ТекущееХТТПСоединение.Сайт,
								?(ВРег(ТекущееХТТПСоединение.Протокол) = ВРег("https") , "https", "http"),
								ТекущееХТТПСоединение.Логин,
								ТекущееХТТПСоединение.Пароль,
								ХттпСоединение,
								КонтекстВыполненияВложенныйВложенный) Тогда
						// Если была ошибка, то подробности запишутся в журнал регистрации в ОбработкаНовостей.СоединитьсяССерверомНовостей.
						ЕстьОшибки = Истина;
					КонецЕсли;

					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Загрузка: установка http/https соединения (протокол %1).
							|Успешно? %2'"),
						ТекущееХТТПСоединение.Протокол,
						(ЕстьОшибки = Ложь));

					ЛогШаговВыполненияВложенный.Добавить(ТекстСообщения);

					Если ЕстьОшибки = Ложь Тогда

						ОписательУсловияПоиска = Новый Структура;
						ОписательУсловияПоиска.Вставить("Сайт",                ТекущееХТТПСоединение.Сайт);
						ОписательУсловияПоиска.Вставить("Протокол",            ТекущееХТТПСоединение.Протокол);
						ОписательУсловияПоиска.Вставить("ВариантЛогинаПароля", ТекущееХТТПСоединение.ВариантЛогинаПароля);
						ОписательУсловияПоиска.Вставить("Логин",               ТекущееХТТПСоединение.Логин);
						ОписательУсловияПоиска.Вставить("Пароль",              ТекущееХТТПСоединение.Пароль);
						ОписательУсловияПоиска.Вставить("Пометка",             Истина);
						МассивОбрабатываемыхЛентНовостей = ЛентыНовостей.НайтиСтроки(ОписательУсловияПоиска);

						Для каждого ТекущаяЛентаНовостей Из МассивОбрабатываемыхЛентНовостей Цикл

							лкИмяФайлаНаСервере = "";
							ТШагЛентаНовостейНачало = ТекущаяУниверсальнаяДатаВМиллисекундах();
							ЕстьОшибки = Ложь;

							// Шаг 2 / 2, получение файла.
							ФайлПолучен = Ложь;
							ПопыткаПолученияФайла = 0;
							// В случае 5хх ошибки, в теле ответа могут содержаться данные, оптимизирующие нагрузку на сервера.
							ТекстХТМЛРегламентныхРабот = "";
							ПричинаРегламентныхРабот   = НСтр("ru='Причина неизвестна'");
							ДатаРегламентныхРаботОТ    = '00010101';
							ДатаРегламентныхРаботДО    = '00010101';
							Пока (ФайлПолучен <> Истина) И (ПопыткаПолученияФайла < НастройкиПолученияНовостей.HTTPСоединениеКоличествоПопытокПолученияФайла) Цикл
								Попытка
									Запись = РегистрыСведений.ДатыЗагрузкиПоследнихНовостей.СоздатьМенеджерЗаписи();
									Запись.ЛентаНовостей = ТекущаяЛентаНовостей.ЛентаНовостей;
									Запись.Прочитать(); // Запись будет ниже.
									Если Запись.Выбран() Тогда
										ДатаЗагрузкиПоследнихНовостейНаКлиенте          = Запись.ДатаЗагрузкиПоследнихНовостей;
										лкКоличествоНеудачныхПопытокПриЗагрузкеНовостей = Запись.КоличествоНеудачПриЗагрузкеНовостей + 1;
									Иначе
										ДатаЗагрузкиПоследнихНовостейНаКлиенте          = '00010101';
										лкКоличествоНеудачныхПопытокПриЗагрузкеНовостей = 0;
									КонецЕсли;
									// Сразу увеличить счетчик неудачных загрузок на +1.
									// Этот счетчик может быть сброшен в нескольких случаях:
									//  - лента новостей успешно загрузилась;
									//  - в ленте новостей нет новых новостей (т.е. сам процесс соединения и загрузки новостей запустился, данные получены, но обновлять нечего).
									Запись.ЛентаНовостей                        = ТекущаяЛентаНовостей.ЛентаНовостей;
									Запись.ДатаЗагрузкиПоследнихНовостей        = ДатаЗагрузкиПоследнихНовостейНаКлиенте;
									Запись.ДатаПоследнейПопыткиЗагрузкиНовостей = ТекущаяУниверсальнаяДата();
									Запись.КоличествоНеудачПриЗагрузкеНовостей  = ?(лкКоличествоНеудачныхПопытокПриЗагрузкеНовостей <= 99999, лкКоличествоНеудачныхПопытокПриЗагрузкеНовостей, 99999); // При успешной загрузке сбросить счетчик неудачных загрузок. Если счетчик > 99999, то оставить значение 99999 и не увеличивать его
									Запись.Записать(Истина);

									// Для оптимизации работы кэша на сервере Новостного центра, дату начала загрузки рассчитываем так:
									//  - если дата начала загрузки находится в этом месяце, то округляем до начала дня;
									//  - если дата начала загрузки находится раньше этого месяца, то округляем до начала месяца.
									Если НачалоМесяца(ДатаЗагрузкиПоследнихНовостейНаКлиенте) >= НачалоМесяца(ТекущаяДатаДляРегистров) Тогда
										// Если новость опубликовали в 23:59:59, то есть вероятность, что она из-за длительных перемещений
										//  между серверами НЕ успеет попасть в отбор from=00:00:00,
										//  поэтому новости первого часа ночи будем получать с запасом в 1 сутки вниз.
										Если Час(ДатаЗагрузкиПоследнихНовостейНаКлиенте) = 0 Тогда
											лкОкругленноеВремяНачалаЗагрузкиНовостей = НачалоДня(ДатаЗагрузкиПоследнихНовостейНаКлиенте - 1*24*60*60);
										Иначе
											лкОкругленноеВремяНачалаЗагрузкиНовостей = НачалоДня(ДатаЗагрузкиПоследнихНовостейНаКлиенте);
										КонецЕсли;
									Иначе
										лкОкругленноеВремяНачалаЗагрузкиНовостей = НачалоМесяца(ДатаЗагрузкиПоследнихНовостейНаКлиенте);
									КонецЕсли;

									ПопыткаПолученияФайла = ПопыткаПолученияФайла + 1;
									ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
									// {Замена параметров для URL ленты новостей}.
									// Заменить значения параметров в имени файла:
									//  [from] - дата последнего получения новостей, округленная до начала суток или месяца вниз;
									//  [config] - имя (на английском) + "," + версия конфигурации (99.99.999.9999);
									//  [platformVersion] - версия платформы 99.99.999.9999;
									//  [filter] - список всех серверных фильтров;
									// Разделитель параметров в URL всегда символ "&", он должен проставляться вручную в шаблоне имени файла в настройках ленты новостей.
									лкИмяФайлаНаСервере = СокрЛП(ТекущаяЛентаНовостей.ИмяФайла);
									Если СтрНайти(лкИмяФайлаНаСервере, "[from]") > 0 Тогда
										Если (ДатаЗагрузкиПоследнихНовостейНаКлиенте > '00010101235959') Тогда // Какая-то запись в регистре сведений есть.
											лкИмяФайлаНаСервере = СтрЗаменить(лкИмяФайлаНаСервере, "[from]", "from=" + XMLСтрока(лкОкругленноеВремяНачалаЗагрузкиНовостей) + "Z"); // Дата хранится в часовом поясе +0
										Иначе
											// Необходимо получить все-все новости, с начала времен.
											// Но при наличии длинной истории, размер файла может быть десятки мегабайт.
											// Поэтому ограничимся последними 100 новостями.
											лкИмяФайлаНаСервере = СтрЗаменить(лкИмяФайлаНаСервере, "[from]", "last=100"); // Вместо "from=0001-01-01T00:00:00Z".
										КонецЕсли;
									КонецЕсли;

									лкИмяФайлаНаСервере = СтрЗаменить(лкИмяФайлаНаСервере, "[config]", "config=" + ЭтотПродукт);
									лкИмяФайлаНаСервере = СтрЗаменить(лкИмяФайлаНаСервере, "[platformVersion]", "platformVersion=" + ВерсияПлатформы);
									лкИмяФайлаНаСервере = СтрЗаменить(лкИмяФайлаНаСервере, "[filter]", Справочники.ЛентыНовостей.СформироватьТекстУсловияДляСервераНовостей(ТекущаяЛентаНовостей.ЛентаНовостей));

									// Непосредственно загрузка файла, начало.

										лкЗагрузкаФайлов_ВремяНачала = ТекущаяУниверсальнаяДатаВМиллисекундах();

										ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru='Начало попытки %1 / %2 получения файла %3 с сервера %4 для ленты новостей %5 во временный файл %6.
												|(URL %7).'"), 
											ПопыткаПолученияФайла,
											НастройкиПолученияНовостей.HTTPСоединениеКоличествоПопытокПолученияФайла,
											ТекущаяЛентаНовостей.ИмяФайла,
											ТекущаяЛентаНовостей.Сайт,
											ТекущаяЛентаНовостей.ЛентаНовостей,
											ИмяВременногоФайла,
											(ТекущееХТТПСоединение.Протокол + "://" + ТекущаяЛентаНовостей.Сайт + "/" + лкИмяФайлаНаСервере));

										ЛогШаговВыполненияВложенный.Добавить(ТекстСообщения);

										лкЗаголовки = Новый Соответствие;
										лкЗаголовки.Вставить(
											"user-agent",
											"1C;config=" + ЭтотПродукт
												+ ";platformVersion=" + ВерсияПлатформы
												+ ";ISLVersion=" + ВерсияБиблиотеки
												+ ";IBMode=" + РежимРаботыПрограммы_Представление
												+ ";DataSplitted=" + ЭтоРазделеннаяКонфигурация_Представление
												+ ";SplittedNow=" + РазделениеВключено_Представление
												+ ";metaVersion=" + МетаданныеВерсия
												+ ";metaName=" + МетаданныеИмя);
										ХттпЗапрос = Новый HTTPЗапрос(лкИмяФайлаНаСервере, лкЗаголовки);
										ХттпОтвет = ХттпСоединение.Получить(ХттпЗапрос, ИмяВременногоФайла);

										лкЗагрузкаФайлов_ВремяКонца = ТекущаяУниверсальнаяДатаВМиллисекундах();

										сЗаголовки = "";
										Для каждого ТекущийЗаголовок Из ХттпОтвет.Заголовки Цикл
											сЗаголовки = сЗаголовки + ТекущийЗаголовок.Ключ + ":" + ТекущийЗаголовок.Значение + Символы.ПС;
										КонецЦикла;
										ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru='При попытке %1 / %2 получения файла %3 с сервера %4 для ленты новостей %5 во временный файл получен ответ сервера с кодом %6, заголовки:
												|%7
												|
												|(URL %8)
												|Время загрузки (сек): %9'"),
											ПопыткаПолученияФайла,
											НастройкиПолученияНовостей.HTTPСоединениеКоличествоПопытокПолученияФайла,
											ТекущаяЛентаНовостей.ИмяФайла,
											ТекущаяЛентаНовостей.Сайт,
											ТекущаяЛентаНовостей.ЛентаНовостей,
											ХттпОтвет.КодСостояния,
											ИнтернетПоддержкаПользователейКлиентСервер.ПредставлениеЗначения(ХттпОтвет.Заголовки, "=", Символы.ПС),
											ТекущееХТТПСоединение.Протокол + "://" + ТекущаяЛентаНовостей.Сайт + "/" + лкИмяФайлаНаСервере,
											Формат((лкЗагрузкаФайлов_ВремяКонца - лкЗагрузкаФайлов_ВремяНачала) / 1000,"ЧДЦ=3; ЧРД=,; ЧРГ=' '; ЧГ=3,0"));

										ЛогШаговВыполненияВложенный.Добавить(ТекстСообщения);

										ВременныйФайл = Новый Файл(ИмяВременногоФайла);
										Если ВременныйФайл.Существует() Тогда
											ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												НСтр("ru='Успешное завершение попытки %1 / %2 получения файла %3 с сервера %4 для ленты новостей %5 во временный файл %6.
													|Получен файл размером %7 байт.
													|(URL %8)
													|
													|Первые строки файла:
													|%9'"),
												ПопыткаПолученияФайла,
												НастройкиПолученияНовостей.HTTPСоединениеКоличествоПопытокПолученияФайла,
												ТекущаяЛентаНовостей.ИмяФайла,
												ТекущаяЛентаНовостей.Сайт,
												ТекущаяЛентаНовостей.ЛентаНовостей,
												ИмяВременногоФайла,
												Формат(ВременныйФайл.Размер(), "ЧЦ=15; ЧДЦ=; ЧРГ=' '; ЧГ=3,0"),
												ТекущееХТТПСоединение.Протокол + "://" + ТекущаяЛентаНовостей.Сайт + "/" + лкИмяФайлаНаСервере,
												ИнтернетПоддержкаПользователей.СодержимоеТекстовогоФайла(ВременныйФайл.ПолноеИмя, 10));

											ЛогШаговВыполненияВложенный.Добавить(ТекстСообщения);

											ТекущаяЛентаНовостей.АдресВХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла));
											ФайлПолучен = Истина;

											Если (ХттпОтвет.КодСостояния >= 500) И (ХттпОтвет.КодСостояния <= 599) Тогда
												Попытка
													ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайла, "UTF-8", Символы.ПС, Символы.ПС, Ложь);
													ТекстХТМЛРегламентныхРабот = ЧтениеТекста.Прочитать();
													ЧтениеТекста.Закрыть();
												Исключение
													ИнформацияОбОшибке = ИнформацияОбОшибке();
													ТекстХТМЛРегламентныхРабот = "";
													ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
														НСтр("ru='ЗагрузитьФайлыНовостейССервера (получено из интернет): Не удалось получить текст ошибки из временного файла %1 для ленты новостей %2 по причине:
															|%3'"),
														СокрЛП(ИмяВременногоФайла),
														ТекущаяЛентаНовостей.ЛентаНовостей,
														ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
													// Запись в журнал регистрации
													ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
														НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
														НСтр("ru='Новости. Загрузка новостей. Загрузка файлов новостей. Ошибка получения текста ошибки сервера'"), // ИдентификаторШага
														УровеньЖурналаРегистрации.Предупреждение, // УровеньЖурналаРегистрации.*
														, // ОбъектМетаданных
														, // Данные
														ТекстСообщения, // Комментарий
														ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
												КонецПопытки;
											КонецЕсли;

											Попытка
												УдалитьФайлы(ИмяВременногоФайла);
											Исключение
												ИнформацияОбОшибке = ИнформацияОбОшибке();
												ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
													НСтр("ru='ЗагрузитьФайлыНовостейССервера (получено из интернет): Не удалось удалить временный файл %1 для ленты новостей %2 по причине:
														|%3
														|
														|Рекомендуется вручную удалить этот временный файл.'"),
													СокрЛП(ИмяВременногоФайла),
													ТекущаяЛентаНовостей.ЛентаНовостей,
													ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));

												ЛогШаговВыполненияВложенный.Добавить(ТекстСообщения);
											КонецПопытки;

										Иначе
											ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												НСтр("ru='Неудачное завершение попытки %1 / %2 получения файла %3 с сервера %4 для ленты новостей %5 во временный файл %6 - после попытки загрузки, файла все еще не существует.
													|(URL %7).'"),
												ПопыткаПолученияФайла,
												НастройкиПолученияНовостей.HTTPСоединениеКоличествоПопытокПолученияФайла,
												ТекущаяЛентаНовостей.ИмяФайла,
												ТекущаяЛентаНовостей.Сайт,
												ТекущаяЛентаНовостей.ЛентаНовостей,
												ИмяВременногоФайла,
												ТекущееХТТПСоединение.Протокол + "://" + ТекущаяЛентаНовостей.Сайт + "/" + лкИмяФайлаНаСервере);

											ЛогШаговВыполненияВложенный.Добавить(ТекстСообщения);
										КонецЕсли;

									// Непосредственно загрузка файла, конец.

									Если (ХттпОтвет.КодСостояния >= 300) И (ХттпОтвет.КодСостояния <= 399) Тогда
										// ////? В случае ошибки HTTP 301, 302, 307, 308 пытаться получить файл по новому адресу
									ИначеЕсли (ХттпОтвет.КодСостояния >= 500) И (ХттпОтвет.КодСостояния <= 599) Тогда
										// Если в теле ответа есть какие-то теги, явно указывающие время окончания работ,
										//  то сдвинуть время получения новостей на это время.
										Если НЕ ПустаяСтрока(ТекстХТМЛРегламентныхРабот) Тогда
											Попытка
												ЧтениеХТМЛ = Новый ЧтениеHTML;
												ЧтениеХТМЛ.УстановитьСтроку(ТекстХТМЛРегламентныхРабот);
												ПостроительДОМ = Новый ПостроительDOM;
												ДокументХТМЛ   = ПостроительДОМ.Прочитать(ЧтениеХТМЛ);
												ЭлементПричина       = ДокументХТМЛ.ПолучитьЭлементПоИдентификатору("reason");
												ЭлементДатаНачала    = ДокументХТМЛ.ПолучитьЭлементПоИдентификатору("dateFrom");
												ЭлементДатаОкончания = ДокументХТМЛ.ПолучитьЭлементПоИдентификатору("dateTo");
												Если ТипЗнч(ЭлементПричина) = ТипЭлементHTML Тогда // Должно быть <p></p>.
													ЭлементПричинаТекстовоеСодержимое = СокрЛП(ЭлементПричина.ТекстовоеСодержимое);
													Если НЕ ПустаяСтрока(ЭлементПричинаТекстовоеСодержимое) Тогда
														ПричинаРегламентныхРабот = ЭлементПричинаТекстовоеСодержимое;
													КонецЕсли;
												КонецЕсли;
												Если ТипЗнч(ЭлементДатаНачала) = ТипЭлементЯкорьHTML Тогда // Должно быть <a id="dateFrom" value="yyyy-mm-ddThh:mm:ssZ"></a>.
													Если ЭлементДатаНачала.Атрибуты.Количество() > 1 Тогда // Как минимум один атрибут = "id".
														ЭлементДатаНачалаЗначение = ЭлементДатаНачала.Атрибуты.ПолучитьИменованныйЭлемент("value").Значение;
														Если ТипЗнч(ЭлементДатаНачалаЗначение) = ТипСтрока Тогда
															Попытка
																ДатаРегламентныхРаботОТ = УниверсальноеВремя(XMLЗначение(ТипДата, ЭлементДатаНачалаЗначение));
															Исключение
																ДатаРегламентныхРаботОТ = '00010101';
															КонецПопытки;
														КонецЕсли;
													КонецЕсли;
												КонецЕсли;
												Если ТипЗнч(ЭлементДатаОкончания) = ТипЭлементЯкорьHTML Тогда // Должно быть <a id="dateTo" value="yyyy-mm-ddThh:mm:ssZ"></a>.
													Если ЭлементДатаОкончания.Атрибуты.Количество() > 1 Тогда // Как минимум один атрибут = "id".
														ЭлементДатаОкончанияЗначение = ЭлементДатаОкончания.Атрибуты.ПолучитьИменованныйЭлемент("value").Значение;
														Если ТипЗнч(ЭлементДатаОкончанияЗначение) = ТипСтрока Тогда
															Попытка
																ДатаРегламентныхРаботДО = УниверсальноеВремя(XMLЗначение(ТипДата, ЭлементДатаОкончанияЗначение));
															Исключение
																ДатаРегламентныхРаботДО = '00010101';
															КонецПопытки;
														КонецЕсли;
													КонецЕсли;
												КонецЕсли;
												ЧтениеХТМЛ.Закрыть();
											Исключение
												ИнформацияОбОшибке = ИнформацияОбОшибке();
												ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
													НСтр("ru='ЗагрузитьФайлыНовостейССервера (получено из интернет): Не удалось распарсить текст ошибки для ленты новостей %1 по причине:
														|%2
														|
														|Текст ошибки:
														|%3'"),
													ТекущаяЛентаНовостей.ЛентаНовостей,
													ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
													ТекстХТМЛРегламентныхРабот);
												ЛогШаговВыполненияВложенный.Добавить(ТекстСообщения);
												// Запись в журнал регистрации
												ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
													НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
													НСтр("ru='Новости. Загрузка новостей. Загрузка файлов новостей. Ошибка расшифровки текста ошибки сервера'"), // ИдентификаторШага
													УровеньЖурналаРегистрации.Предупреждение, // УровеньЖурналаРегистрации.*
													, // ОбъектМетаданных
													, // Данные
													ТекстСообщения, // Комментарий
													ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
											КонецПопытки;

											ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												НСтр("ru='Загрузка: ошибка загрузки файла новостей из ленты новостей %1.
													|Код возврата: %2
													|Причина: %3
													|Дата начала регламентных работ: %4
													|Дата завершения регламентных работ: %5
													|Текст возврата:
													|%6'"),
												ТекущаяЛентаНовостей.ЛентаНовостей,
												ХттпОтвет.КодСостояния,
												ПричинаРегламентныхРабот,
												Формат(ДатаРегламентныхРаботОТ, "ДЛФ=DT"),
												Формат(ДатаРегламентныхРаботДО, "ДЛФ=DT"),
												ТекстХТМЛРегламентныхРабот);

											ЛогШаговВыполненияВложенный.Добавить(ТекстСообщения);

										КонецЕсли;
										// В случае ошибок на сервере (код состояния 5хх), установить "ЕстьОшибки",
										//  чтобы сдвинуть дату следующего получения новостей на ДатаРегламентныхРаботДО + 30 +-10 минут.
										ЕстьОшибки = Истина;
										// Выйти из цикла многократной попытки получения файла с сервера.
										Прервать;
									КонецЕсли;

								Исключение
									ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru='Попытка %1 / %2. Ошибка получения файла %3 с сервера %4 для ленты новостей %5 во временный файл по причине:
											|%6'"),
										ПопыткаПолученияФайла,
										НастройкиПолученияНовостей.HTTPСоединениеКоличествоПопытокПолученияФайла,
										ТекущаяЛентаНовостей.ИмяФайла,
										ТекущаяЛентаНовостей.Сайт,
										ТекущаяЛентаНовостей.ЛентаНовостей,
										ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));

									ЛогШаговВыполненияВложенный.Добавить(ТекстСообщения);

									// Пропустить ленту новостей.
									ЕстьОшибки = Истина;
								КонецПопытки;
							КонецЦикла;

							Если ЕстьОшибки = Ложь Тогда
								ДополнительноеВремя = 0;
							Иначе
								// Настроить так, чтобы следующая проверка была через 30 минут +-10 минут.
								// Разброс необходим, чтобы все клиенты не попали на одно и то же время, а были более-менее равномерно распределены.
								ГенераторСЧ = Новый ГенераторСлучайныхЧисел(Секунда(ТекущаяУниверсальнаяДата()));
								СлучайноеЧислоСекунд = ГенераторСЧ.СлучайноеЧисло(0, 30*60) - 10*60; // В секундах, -10..+20 минут
								ДополнительноеВремя = 30*60 + СлучайноеЧислоСекунд; // +30 минут +- 10..20 минут
							КонецЕсли;
							// Сохранить дату последнего выполнения / обновления.
							Запись = РегистрыСведений.ВсеОбновленияНовостей.СоздатьМенеджерЗаписи();
							Запись.ВидОбновления = "Получение новостей"; // Идентификатор.
							Запись.ЛентаНовостей = ТекущаяЛентаНовостей.ЛентаНовостей;
							Запись.ДатаПоследнегоОбновления = ТекущаяДатаДляРегистров;
							Если ТекущаяЛентаНовостей.ЧастотаОбновления = 1 Тогда // Ежедневно
								Запись.ДатаСледующегоОбновления = ТекущаяДатаДляРегистров + 24*60*60;
							ИначеЕсли ТекущаяЛентаНовостей.ЧастотаОбновления = 2 Тогда // Ежечасно
								Запись.ДатаСледующегоОбновления = ТекущаяДатаДляРегистров + 1*60*60;
							ИначеЕсли ТекущаяЛентаНовостей.ЧастотаОбновления = 3 Тогда // Каждые 15 минут
								Запись.ДатаСледующегоОбновления = ТекущаяДатаДляРегистров + 15*60;
							ИначеЕсли ТекущаяЛентаНовостей.ЧастотаОбновления = 4 Тогда // Ежеминутно
								Запись.ДатаСледующегоОбновления = ТекущаяДатаДляРегистров + 1*60;
							Иначе // Без автообновления или другое значение.
								Запись.ДатаСледующегоОбновления = '00010101';
							КонецЕсли;
							// В случае ошибок на сервере (код состояния 5хх), сдвинуть дату следующего получения новостей
							//  на ДатаРегламентныхРаботДО + 30 +-10 минут.
							Если ЕстьОшибки = Истина Тогда
								// В любом случае, если есть ошибка, то прибавлять ДополнительноеВремя.
								Если Запись.ДатаСледующегоОбновления < ДатаРегламентныхРаботДО Тогда
									Запись.ДатаСледующегоОбновления = ДатаРегламентныхРаботДО + ДополнительноеВремя;
								Иначе
									Запись.ДатаСледующегоОбновления = Запись.ДатаСледующегоОбновления + ДополнительноеВремя;
								КонецЕсли;
								// Если файл не был загружен, то не обрабатывать его в ПарсингХМЛФайловНовостей().
								ТекущаяЛентаНовостей.Пометка = Ложь;
							КонецЕсли;
							Запись.Записать(Истина);

							ТШагЛентаНовостейКонец = ТекущаяУниверсальнаяДатаВМиллисекундах();

							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Загрузка: загрузка файла новостей из ленты новостей %1 (протокол %2, сайт %3, имя файла %4, имя файла на сервере %5).
									|Успешно? %6
									|Время выполнения (мс): %7'"),
								ТекущаяЛентаНовостей.ЛентаНовостей,
								ТекущаяЛентаНовостей.Протокол,
								ТекущаяЛентаНовостей.Сайт,
								ТекущаяЛентаНовостей.ИмяФайла,
								лкИмяФайлаНаСервере,
								(ЕстьОшибки = Ложь),
								(ТШагЛентаНовостейКонец - ТШагЛентаНовостейНачало));

							ЛогШаговВыполненияВложенный.Добавить(ТекстСообщения);

						КонецЦикла;

					КонецЕсли;

#КонецОбласти

				КонецЕсли;

			КонецЦикла;

		ОписаниеРезультатаВложенный = СтрСоединить(ЛогШаговВыполненияВложенный, Символы.ПС);
		ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			КодРезультатаВложенный,
			ОписаниеРезультатаВложенный,
			КонтекстВыполненияВложенныйВложенный);

#КонецОбласти

#Область ВспомогательныеОбработки

		КонтекстВыполненияВложенныйВложенный = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Контекст "по шагам".
		ИдентификаторШага1 = "ВспомогательныеОбработки"; // Идентификатор.
		КодРезультатаВложенный = 0;
		ЛогШаговВыполненияВложенный = Новый Массив;
		ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			НаименованиеПроцедурыФункции
				+ "." + ИдентификаторШага1, // Идентификатор.
			НаименованиеПроцедурыФункции
				+ "." + ИдентификаторШага1);

			// После загрузки файлов дополнительно проанализировать регистр сведений ДатыЗагрузкиПоследнихНовостей.
			ОбработкаНовостей.НайтиИОбработатьНеактивныеЛентыНовостей(КонтекстВыполненияВложенныйВложенный);

		ОписаниеРезультатаВложенный = СтрСоединить(ЛогШаговВыполненияВложенный, Символы.ПС);
		ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			КодРезультатаВложенный,
			ОписаниеРезультатаВложенный,
			КонтекстВыполненияВложенныйВложенный);

#КонецОбласти

	ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата, // Много действий, всегда установлено в 0, надо читать данные по каждому шагу.
		ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	Если ЗаписыватьВЖурналРегистрации = Истина Тогда

		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
			НСтр("ru='Новости. Загрузка новостей. Загрузка файлов новостей'"), // ИдентификаторШага
			?(КодРезультата > 0,
				УровеньЖурналаРегистрации.Ошибка,
				УровеньЖурналаРегистрации.Информация), // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
			ОбработкаНовостей.КомментарийДляЖурналаРегистрации(
				НаименованиеПроцедурыФункции,
				ШагВыполнения,
				КонтекстВыполнения,
				"Простой"), // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

КонецПроцедуры

// Первый проход по загруженным файлам новостей, определение формата файла (rss, atom),
//  запуск парсинга для каждого файла в отдельности.
//
// Параметры:
//  ЛентыНовостей - ТаблицаЗначений - таблица лент новостей со следующими колонками:
//   * Пометка                - Булево - Если ИСТИНА, то данную ленту новостей надо загрузить;
//   * ОбязательныйКанал      - Булево - Если ИСТИНА, то данную ленту новостей надо загрузить ВНЕ ЗАВИСИМОСТИ от галочки Пометка;
//   * ЛентаНовостей          - СправочникСсылки.ЛентаНовостей - Ссылка на элемент справочника для подстановки в элемент Справочник.Новости;
//   * АдресВХранилище        - Строка - Адрес загруженного файла во временном хранилище.
//  КонтекстВыполнения - Структура, Неопределено - структура контекста выполнения.
//
Процедура ПарсингХМЛФайловНовостей(ЛентыНовостей, КонтекстВыполнения = Неопределено) Экспорт

	Перем ЧтениеХМЛ, Файл;

	НаименованиеПроцедурыФункции = "Обработка.УправлениеНовостями.ПарсингХМЛФайловНовостей"; // Идентификатор.
	ЗаписыватьВЖурналРегистрации = Ложь;
	Если КонтекстВыполнения = Неопределено Тогда
		КонтекстВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
		ЗаписыватьВЖурналРегистрации = Истина;
	КонецЕсли;
	КодРезультата = 0;
	ОписаниеРезультата = "";
	КонтекстВыполненияВложенный = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Контекст "по шагам".
	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		НаименованиеПроцедурыФункции, // Идентификатор.
		НСтр("ru='Парсинг файлов новостей'"));

		ТипДвоичныеДанные = Тип("ДвоичныеДанные");
		// {Раздельное обновление ИБ}
		ТипСтруктура      = Тип("Структура");
		ДополнительныеПараметрыВыполнения = Новый Структура;
		Если (КонтекстВыполнения.Свойство("ДополнительныеПараметрыВыполнения") = Истина)
				И (ТипЗнч(КонтекстВыполнения.ДополнительныеПараметрыВыполнения) = ТипСтруктура) Тогда
			ДополнительныеПараметрыВыполнения = КонтекстВыполнения.ДополнительныеПараметрыВыполнения;
		КонецЕсли;

		// {Раздельное обновление ИБ}
		ОбрабатыватьОбластиДанных = Истина;
		// В конфигурации есть общие реквизиты с разделением и включена ФО РаботаВМоделиСервиса.
		Если ОбщегоНазначения.РазделениеВключено() Тогда
			// Зашли в конфигурацию под пользователем без разделения (без входа в область данных).
			Если (ИнтернетПоддержкаПользователей.СеансЗапущенБезРазделителей())
					// Если не вошли в область данных.
					И (НЕ ОбщегоНазначения.ДоступноИспользованиеРазделенныхДанных()) Тогда
				Если (ДополнительныеПараметрыВыполнения.Свойство("ОбрабатыватьОбластиДанных") = Истина)
					И (ДополнительныеПараметрыВыполнения.ОбрабатыватьОбластиДанных = Истина) Тогда
					// Данные областей должны быть обработаны в монопольных обработчиках в области данных.
					ОбрабатыватьОбластиДанных = Истина;
				Иначе
					ОбрабатыватьОбластиДанных = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	// Основные обработки парсинга файлов.
#Область ОсновныеОбработки

		КонтекстВыполненияВложенныйВложенный = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Контекст "по шагам".
		ИдентификаторШага1 = "ОсновныеОбработки"; // Идентификатор.
		КодРезультатаВложенный = 0;
		ОписаниеРезультатаВложенный = "";
		ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			НаименованиеПроцедурыФункции
				+ "." + ИдентификаторШага1, // Идентификатор.
			НаименованиеПроцедурыФункции
				+ "." + ИдентификаторШага1);

			// Перед обработками необходимо сохранить даты последних загрузок новостей из регистра сведений ДатыЗагрузкиПоследнихНовостей.
			ОписаниеРезультатаВложенный = ОписаниеРезультатаВложенный
				+ НСтр("ru='Сохранение даты последних загрузок'")
				+ Символы.ПС;
			// Определение текущего состояния загрузки новостей.
			ТаблицаДатЗагрузокНовостейПередПолучением = ОбработкаНовостей.ПолучитьДатыЗагрузкиНовостей();

			// При подключении к SOAP-веб-сервисам, сразу происходит обращение к нашим серверам за WSDL.
			// Поэтому имеет смысл эту переменную заполнять только один раз при первой необходимости
			//  и потом повторно использовать при каждом парсинге файла с новостями.
			Прокси = Неопределено;

			// Прочитать файлы
			ОписаниеРезультатаВложенный = ОписаниеРезультатаВложенный
				+ НСтр("ru='Обработка лент новостей:'")
				+ Символы.ПС;
			Для каждого ТекущаяСтрока Из ЛентыНовостей Цикл

				ОписаниеРезультатаВложенный = ОписаниеРезультатаВложенный
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Лента: %1, обязательная: %2, пометка: %3'"),
							ТекущаяСтрока.ЛентаНовостей,
							ТекущаяСтрока.ОбязательныйКанал,
							ТекущаяСтрока.Пометка)
					+ Символы.ПС;

				ЕстьОшибки = Ложь;

				Если (ТекущаяСтрока.Пометка) ИЛИ (ТекущаяСтрока.ОбязательныйКанал) Тогда

					ОписаниеРезультатаВложенный = ОписаниеРезультатаВложенный
						+ НСтр("ru='Обрабатывается...'")
						+ Символы.ПС;

					Если НЕ ПустаяСтрока(ТекущаяСтрока.АдресВХранилище) Тогда
						// Непосредственно загрузка из файла.
						ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
						ДвоичныеДанные = ПолучитьИзВременногоХранилища(ТекущаяСтрока.АдресВХранилище);
						Если ТипЗнч(ДвоичныеДанные) = ТипДвоичныеДанные Тогда
							ДвоичныеДанные.Записать(ИмяВременногоФайла);
						КонецЕсли;
						Файл = Новый Файл(СокрЛП(ИмяВременногоФайла));
						Если Файл.Существует() Тогда
							// Объект лкЧтениеТекста нужен для целей отладки - в случае, если файл не удастся прочесть как xml, то необходимо вывести первые 2000 символов в лог.
							лкЧтениеТекста = Новый ЧтениеТекста(СокрЛП(ИмяВременногоФайла));
							ЧтениеХМЛ = Новый ЧтениеXML;
							ЧтениеХМЛ.ОткрытьФайл(
								СокрЛП(ИмяВременногоФайла),
								Новый ПараметрыЧтенияXML(
									, // Версия,
									, // Язык
									, // ПробельныеСимволы
									, // ТипПроверкиПравильности
									, // ИгнорироватьОбъявлениеXML
									, // ИгнорироватьТипДокумента
									, // ИгнорироватьИнструкцииОбработки
									, // ИгнорироватьКомментарии
									, // ИгнорироватьПробельныеСимволы
									Истина)); // СекцииCDATAКакТекст
									// ИспользоватьИгнорируемыеПробельныеСимволы

							Попытка
								ХМЛТип = ПолучитьXMLТип(ЧтениеХМЛ);
							Исключение
								// Возможно, что в файле не xml, а код 301 ошибки или что-то другое.
								// В таком случае пропустить обработку этой ленты новостей и записать сообщение в лог.
								ИнформацияОбОшибке = ИнформацияОбОшибке();

								// Попытаться прочитать первые 2000 символов файла.
								лкНачалоФайла = лкЧтениеТекста.Прочитать(2000);

								ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru='В загруженном файле для ленты новостей %1 находится текст не в формате xml. Лента новостей будет пропущена.
										|
										|Подробное представление ошибки:
										|%2
										|
										|Первые строки файла:
										|%3'"),
									ТекущаяСтрока.ЛентаНовостей,
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке),
									лкНачалоФайла);
								ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЛентаНовостей%", ТекущаяСтрока.ЛентаНовостей);
								ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнформацияОбОшибке%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
								ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПервыеСтрокиФайла%", лкНачалоФайла);

								ОписаниеРезультатаВложенный = ОписаниеРезультатаВложенный
									+ ТекстСообщения
									+ Символы.ПС;

								// Пропустить ленту новостей
								ЕстьОшибки = Истина;
							КонецПопытки;

							Если ЕстьОшибки = Ложь Тогда

								Если (НРег(ХМЛТип.ИмяТипа) = "feed") Тогда // И (ВРег(ХМЛТип.URIПространстваИмен)=ВРег("http://www.w3.org/2005/Atom")).
									// Прочитать БЕЗ типизации - каждый сайт оформляет atom ленты по своему, без указания пространств имен, с произвольной сортировкой полей и т.п.
									ОбъектХДТО = ФабрикаXDTO.ПрочитатьXML(ЧтениеХМЛ);
								ИначеЕсли (НРег(ХМЛТип.ИмяТипа) = "rss") Тогда // И (ВРег(ХМЛТип.URIПространстваИмен)=ВРег("http://www.w3.org/2005/RSS_2_0")).
									// Прочитать БЕЗ типизации - каждый сайт оформляет rss ленты по своему, без указания пространств имен, с произвольной сортировкой полей и т.п.
									ОбъектХДТО = ФабрикаXDTO.ПрочитатьXML(ЧтениеХМЛ);
									Если (ОбъектХДТО.Свойства().Получить("version") = Неопределено) Тогда
										ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru='Невозможно определить версию rss в ленте новостей %1 - отсутствует свойство version. Необходимы данные в формате версии 2.0.'"),
											ТекущаяСтрока.ЛентаНовостей);

										ОписаниеРезультатаВложенный = ОписаниеРезультатаВложенный
											+ ТекстСообщения
											+ Символы.ПС;

										// Пропустить ленту новостей
										ЕстьОшибки = Истина;
									Иначе
										лкВерсия = ОбъектХДТО.Получить("version");
										Если (Число(лкВерсия) <> 2.0) Тогда
											ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												НСтр("ru='Неподдерживаемая версия новостей RSS %1 в ленте новостей %2'"),
												ОбъектХДТО.version,
												ТекущаяСтрока.ЛентаНовостей);

											ОписаниеРезультатаВложенный = ОписаниеРезультатаВложенный
												+ ТекстСообщения
												+ Символы.ПС;

											// Пропустить ленту новостей
											ЕстьОшибки = Истина;
										КонецЕсли;
									КонецЕсли;
								Иначе
									// Попытаться прочитать первые 2000 символов файла.
									лкНачалоФайла = лкЧтениеТекста.Прочитать(2000);

									ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru='Неподдерживаемый тип новостей %1 в файле %2 для ленты новостей %3
											|
											|Первые строки файла:
											|%4'"),
										(ХМЛТип.URIПространстваИмен + ", " + ХМЛТип.ИмяТипа),
										СокрЛП(ИмяВременногоФайла),
										ТекущаяСтрока.ЛентаНовостей,
										лкНачалоФайла);

									ОписаниеРезультатаВложенный = ОписаниеРезультатаВложенный
										+ ТекстСообщения
										+ Символы.ПС;

									// Пропустить ленту новостей.
									ЕстьОшибки = Истина;
								КонецЕсли;

								Если ЕстьОшибки = Ложь Тогда

									// Обработка файла новостей.
									КонтекстВыполненияВложенныйВложенныйВложенный = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Контекст "по шагам".
									ИдентификаторШага2 = "ПарсингФайла"; // Идентификатор.
									КодРезультатаВложенныйВложенный = 0;
									ОписаниеРезультатаВложенныйВложенный = "";
									ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
										КонтекстВыполненияВложенныйВложенный,
										НаименованиеПроцедурыФункции
											+ "." + ИдентификаторШага1
											+ "." + ИдентификаторШага2, // Идентификатор.
										НаименованиеПроцедурыФункции
											+ "." + ИдентификаторШага1
											+ "." + ИдентификаторШага2);

										ПарсингХМЛФайлаНовостей(
											ОбъектХДТО,
											НРег(ХМЛТип.ИмяТипа),
											ТекущаяСтрока.ЛентаНовостей,
											Прокси,
											КонтекстВыполненияВложенныйВложенныйВложенный);

									ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
										КонтекстВыполненияВложенныйВложенный,
										КодРезультатаВложенныйВложенный,
										ОписаниеРезультатаВложенныйВложенный,
										КонтекстВыполненияВложенныйВложенныйВложенный);

								КонецЕсли;

							КонецЕсли;

							Попытка
								лкЧтениеТекста.Закрыть();
								ЧтениеХМЛ.Закрыть();
								УдалитьФайлы(ИмяВременногоФайла);
							Исключение
								ИнформацияОбОшибке = ИнформацияОбОшибке();
								ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru='ПарсингХМЛФайловНовостей: Не удалось удалить временный файл %1 для ленты новостей %2 по причине:
										|%3
										|
										|Рекомендуется вручную удалить этот временный файл.'"),
									СокрЛП(ИмяВременногоФайла),
									ТекущаяСтрока.ЛентаНовостей,
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));

								ОписаниеРезультатаВложенный = ОписаниеРезультатаВложенный
									+ ТекстСообщения
									+ Символы.ПС;
							КонецПопытки;

						Иначе
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Отсутствует загруженный файл %1 для ленты новостей %2. Возможно, недостаточно места на диске, нет прав для записи в этот каталог или произошла какая-то другая ошибка.'"),
								СокрЛП(ИмяВременногоФайла),
								ТекущаяСтрока.ЛентаНовостей);

							ОписаниеРезультатаВложенный = ОписаниеРезультатаВложенный
								+ ТекстСообщения
								+ Символы.ПС;

							// Пропустить ленту новостей.
							ЕстьОшибки = Истина;
						КонецЕсли;

					Иначе
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Не загружен файл новостей для ленты новостей %1 (пустой адрес в хранилище после загрузки файла [%2] с сайта [%3] по протоколу [%4]). Лента новостей не обработана.'"),
							ТекущаяСтрока.ЛентаНовостей,
							ТекущаяСтрока.ИмяФайла,
							ТекущаяСтрока.Сайт,
							ТекущаяСтрока.Протокол);

						ОписаниеРезультатаВложенный = ОписаниеРезультатаВложенный
							+ ТекстСообщения
							+ Символы.ПС;

					КонецЕсли;

				Иначе
					ОписаниеРезультатаВложенный = ОписаниеРезультатаВложенный
						+ НСтр("ru='Не помечена для обработки'")
						+ Символы.ПС;
				КонецЕсли;

				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Парсинг: лента новостей %1.
						|Успешно? %2'"),
					ТекущаяСтрока.ЛентаНовостей,
					(ЕстьОшибки = Ложь));

				ОписаниеРезультатаВложенный = ОписаниеРезультатаВложенный
					+ ТекстСообщения
					+ Символы.ПС;

			КонецЦикла;

		ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			КодРезультатаВложенный,
			ОписаниеРезультатаВложенный,
			КонтекстВыполненияВложенныйВложенный);

#КонецОбласти

	// Вспомогательные обработки после парсинга файлов новостей.
#Область ВспомогательныеОбработкиОсновные

#Область ВспомогательныеОбработкиОсновные_КатегорииНовостейПростыеНеобработанные

		// После загрузки новостей обработать регистр сведений "КатегорииНовостейПростыеНеобработанные".
		ИдентификаторШага1 = "ВспомогательныеОбработкиОсновные.КатегорииНовостейПростыеНеобработанные"; // Идентификатор.
		КодРезультатаВложенный = 0;
		ОписаниеРезультатаВложенный = "";
		ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			НаименованиеПроцедурыФункции
				+ "." + ИдентификаторШага1, // Идентификатор.
			НаименованиеПроцедурыФункции
				+ "." + ИдентификаторШага1);

			КонтекстВыполненияВложенныйВложенный = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Контекст "по шагам".
			ОбработкаНовостей.ПересчитатьНеобработанныеКатегорииНовостей(КонтекстВыполненияВложенныйВложенный);

		ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			КодРезультатаВложенный,
			ОписаниеРезультатаВложенный,
			КонтекстВыполненияВложенныйВложенный);

#КонецОбласти

#Область ВспомогательныеОбработкиОсновные_ОптимизацияОтборовПоНовостям

		// Доступные категории лент новостей уже обновлены в "ПарсингХМЛФайлаНовостей".
		// Удалить неправильные отборы, которые могут помешать проверке общих и пользовательских отборов.
		// В разделенном сеансе будут пересчитаны только пользовательские отборы и общие для области данных.
		// Может работать в модели сервиса.

		ИдентификаторШага1 = "ВспомогательныеОбработкиОсновные.ОптимизацияОтборовПоНовостям"; // Идентификатор.
		КодРезультатаВложенный = 0;
		ОписаниеРезультатаВложенный = "";
		ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			НаименованиеПроцедурыФункции
				+ "." + ИдентификаторШага1, // Идентификатор.
			НаименованиеПроцедурыФункции
				+ "." + ИдентификаторШага1);

			КонтекстВыполненияВложенныйВложенный = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Контекст "по шагам".
			ОбработкаНовостей.ОптимизироватьОтборыПоНовостям(КонтекстВыполненияВложенныйВложенный);

		ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			КодРезультатаВложенный,
			ОписаниеРезультатаВложенный,
			КонтекстВыполненияВложенныйВложенный);

#КонецОбласти

#Область ВспомогательныеОбработкиОсновные_ПересчитатьОтборыПоНовостям_РедкоМеняющиеся

		// Возможно, дозагрузились значения стандартных списков и заполнились категории новостей,
		//  а значит можно проверять новости на соответствие отборам:

		// Рассчитать заново регистр "РассчитанныеОтборыПоНовостям_РедкоМеняющиеся" для отборов
		//  по новостям по редко меняющимся категориям (версия конфигурации, платформы, продукт, пометка удаления и дата завершения).

		ИдентификаторШага1 = "ВспомогательныеОбработкиОсновные.ПересчитатьОтборыПоНовостям_РедкоМеняющиеся"; // Идентификатор.
		КодРезультатаВложенный = 0;
		ОписаниеРезультатаВложенный = "";
		ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			НаименованиеПроцедурыФункции
				+ "." + ИдентификаторШага1, // Идентификатор.
			НаименованиеПроцедурыФункции
				+ "." + ИдентификаторШага1);

			КонтекстВыполненияВложенныйВложенный = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Контекст "по шагам".
			ОбработкаНовостей.ПересчитатьОтборыПоНовостям_РедкоМеняющиеся(КонтекстВыполненияВложенныйВложенный);

		ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			КодРезультатаВложенный,
			ОписаниеРезультатаВложенный,
			КонтекстВыполненияВложенныйВложенный);

#КонецОбласти

#Область ВспомогательныеОбработкиОсновные_ПересчитатьОтборыПоНовостям_Общие

		// Рассчитать заново регистр "РассчитанныеОтборыПоНовостям_Общие" для отборов
		//  по новостям, настроенных администратором.
		// Здесь же пересчитаются отборы по всем пользователям - регистр "РассчитанныеОтборыПоНовостям_Пользовательские" для отборов
		//  по новостям, настроенных пользователем.
		// Может работать в модели сервиса.

		ИдентификаторШага1 = "ВспомогательныеОбработкиОсновные.ПересчитатьОтборыПоНовостям_Общие"; // Идентификатор.
		КодРезультатаВложенный = 0;
		ОписаниеРезультатаВложенный = "";
		ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			НаименованиеПроцедурыФункции
				+ "." + ИдентификаторШага1, // Идентификатор.
			НаименованиеПроцедурыФункции
				+ "." + ИдентификаторШага1);

			КонтекстВыполненияВложенныйВложенный = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Контекст "по шагам".
			ОбработкаНовостей.ПересчитатьОтборыПоНовостям_Общие(КонтекстВыполненияВложенныйВложенный);

		ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			КодРезультатаВложенный,
			ОписаниеРезультатаВложенный,
			КонтекстВыполненияВложенныйВложенный);

#КонецОбласти

#Область ВспомогательныеОбработкиОсновные_ПересчитатьОтборыПоНовостям_ДляОбластиДанных

		// Рассчитать заново регистр "РассчитанныеОтборыПоНовостям_ДляОбластиДанных" для отборов
		//  по новостям, настроенных для областей данных.
		// Может работать в модели сервиса.

		ИдентификаторШага1 = "ВспомогательныеОбработкиОсновные.ПересчитатьОтборыПоНовостям_ДляОбластиДанных"; // Идентификатор.
		КодРезультатаВложенный = 0;
		ОписаниеРезультатаВложенный = "";
		ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			НаименованиеПроцедурыФункции
				+ "." + ИдентификаторШага1, // Идентификатор.
			НаименованиеПроцедурыФункции
				+ "." + ИдентификаторШага1);

			КонтекстВыполненияВложенныйВложенный = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Контекст "по шагам".
			// {Раздельное обновление ИБ}
			Если ОбрабатыватьОбластиДанных = Истина Тогда
				ОписаниеРезультатаВложенный = НСтр("ru='Выполнение пересчета отборов по новостям для области данных.'");
				ОбработкаНовостей.ПересчитатьОтборыПоНовостям_ДляОбластиДанных(КонтекстВыполненияВложенныйВложенный);
			Иначе
				ОписаниеРезультатаВложенный = НСтр("ru='Пропуск пересчета отборов по новостям для области данных.'")
			КонецЕсли;

		ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			КодРезультатаВложенный,
			ОписаниеРезультатаВложенный,
			КонтекстВыполненияВложенныйВложенный);

#КонецОбласти

#Область ВспомогательныеОбработкиОсновные_ПересчитатьОтборыПоНовостям_Пользовательские

		// Рассчитывать заново регистр "РассчитанныеОтборыПоНовостям_Пользовательские" для отборов
		//  по новостям, настроенных для пользователей - не нужно,
		//  т.к. он выполняется в ОбработкаНовостей.ПересчитатьОтборыПоНовостям_Общие.

#КонецОбласти

#Область ВспомогательныеОбработкиОсновные_ОбновлениеПериодическихСвойствНовостей

		// Пересчитать регистр "ПериодическиеСвойстваНовостей" - возможно, поменялась важность / актуальность
		//  и другие периодические свойства новостей. Также надо добавить записи для новых новостей.

		ИдентификаторШага1 = "ВспомогательныеОбработкиОсновные.ОбновлениеПериодическихСвойствНовостей"; // Идентификатор.
		КодРезультатаВложенный = 0;
		ОписаниеРезультатаВложенный = "";
		ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			НаименованиеПроцедурыФункции
				+ "." + ИдентификаторШага1, // Идентификатор.
			НаименованиеПроцедурыФункции
				+ "." + ИдентификаторШага1);

			КонтекстВыполненияВложенныйВложенный = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Контекст "по шагам".
			ОбработкаНовостей.ОбновлениеПериодическихСвойствНовостей(КонтекстВыполненияВложенныйВложенный);

		ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			КодРезультатаВложенный,
			ОписаниеРезультатаВложенный,
			КонтекстВыполненияВложенныйВложенный);

#КонецОбласти

#Область ВспомогательныеОбработкиОсновные_ОбновлениеПривязокКМетаданным

		// Пересчитать регистр "ПривязкаНовостейКМетаданным" - возможно, поменялась важность
		//  и другие периодические свойства новостей. Также надо добавить записи для новых новостей.

		ИдентификаторШага1 = "ВспомогательныеОбработкиОсновные.ОбновлениеПривязокКМетаданным"; // Идентификатор.
		КодРезультатаВложенный = 0;
		ОписаниеРезультатаВложенный = "";
		ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			НаименованиеПроцедурыФункции
				+ "." + ИдентификаторШага1, // Идентификатор.
			НаименованиеПроцедурыФункции
				+ "." + ИдентификаторШага1);

			КонтекстВыполненияВложенныйВложенный = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Контекст "по шагам".
			ОбработкаНовостей.ОбновлениеПривязокКМетаданным(КонтекстВыполненияВложенныйВложенный);

		ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			КодРезультатаВложенный,
			ОписаниеРезультатаВложенный,
			КонтекстВыполненияВложенныйВложенный);

#КонецОбласти

#КонецОбласти

	// Определенные разработчиком (переопределяемые) обработки после парсинга файлов новостей.
#Область ВспомогательныеОбработкиПереопределяемые

		ИдентификаторШага1 = "ВспомогательныеОбработкиПереопределяемые"; // Идентификатор.
		КодРезультатаВложенный = 0;
		ОписаниеРезультатаВложенный = "";
		ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			НаименованиеПроцедурыФункции
				+ "." + ИдентификаторШага1, // Идентификатор.
			НаименованиеПроцедурыФункции
				+ "." + ИдентификаторШага1);

			ОбработкаНовостейПереопределяемый.ДополнительноОбработатьНовостиПослеПолучения(ТаблицаДатЗагрузокНовостейПередПолучением);

		ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
			КонтекстВыполненияВложенный,
			КодРезультатаВложенный,
			ОписаниеРезультатаВложенный,
			Неопределено);

#КонецОбласти

	ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата, // Много действий, всегда установлено в 0, надо читать данные по каждому шагу.
		ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	Если ЗаписыватьВЖурналРегистрации = Истина Тогда

		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
			НСтр("ru='Новости. Загрузка новостей. Парсинг файлов новостей'"), // ИдентификаторШага
			?(КодРезультата > 0,
				УровеньЖурналаРегистрации.Ошибка,
				УровеньЖурналаРегистрации.Информация), // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
			ОбработкаНовостей.КомментарийДляЖурналаРегистрации(
				НаименованиеПроцедурыФункции,
				ШагВыполнения,
				КонтекстВыполнения,
				"Простой"), // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

КонецПроцедуры

// Функция возвращает таблицу всех стандартных списков, требующих обновления.
// Данные берутся из регистра сведений "ДатыОбновленияСтандартныхСписковНовостей",
//  куда должны попадать через обращение к веб-сервисам.
//
// Возвращаемое значение:
//  ТаблицаЗначений - таблица со списком данных, которые могут требовать обновление с сервера.
//
Функция ПолучитьСтандартныеСпискиТребующиеОбновления() Экспорт

	ТаблицаОбновляемыхДанных = Новый ТаблицаЗначений;

	// Возможна ситуация, когда регистр сведений пустой.
	// Некоторые записи необходимо добавить вручную:
	// - "Список лент новостей".
	Запись = РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей.СоздатьМенеджерЗаписи();
	ПроверяемыйСписок = "Список лент новостей"; // Идентификатор.
	Запись.Список = ПроверяемыйСписок;
	Запись.Прочитать(); // Запись будет ниже.
	Если НЕ Запись.Выбран() Тогда
		Запись.Список = ПроверяемыйСписок;
		Запись.ТекущаяВерсияНаКлиенте = '00010101';
		Запись.ТекущаяВерсияНаСервере = '00010102'; // Дата больше, чтобы инициировать обмен
		Запись.Записать(Истина);
	КонецЕсли;
	// - "Список категорий новостей"
	Запись = РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей.СоздатьМенеджерЗаписи();
	ПроверяемыйСписок = "Список категорий новостей"; // Идентификатор.
	Запись.Список = ПроверяемыйСписок;
	Запись.Прочитать(); // Запись будет ниже.
	Если НЕ Запись.Выбран() Тогда
		Запись.Список = ПроверяемыйСписок;
		Запись.ТекущаяВерсияНаКлиенте = '00010101';
		Запись.ТекущаяВерсияНаСервере = '00010102'; // Дата больше, чтобы инициировать обмен
		Запись.Записать(Истина);
	КонецЕсли;
	// - Категории новостей (по значению).
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ПВХ.Ссылка КАК Ссылка
		|ИЗ
		|	ПланВидовХарактеристик.КатегорииНовостей КАК ПВХ
		|ГДЕ
		|	ПВХ.Код <> """"
		|	И ПВХ.ОбновляетсяССервера = ИСТИНА
		|	И ПВХ.ЗаполняетсяАвтоматически = ЛОЖЬ
		|";
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока Выборка.Следующий() Цикл
			Запись = РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей.СоздатьМенеджерЗаписи();
			ПроверяемыйСписок = Выборка.Ссылка;
			Запись.Список = ПроверяемыйСписок;
			Запись.Прочитать(); // Запись будет ниже.
			Если НЕ Запись.Выбран() Тогда
				Запись.Список = ПроверяемыйСписок;
				Запись.ТекущаяВерсияНаКлиенте = '00010101';
				Запись.ТекущаяВерсияНаСервере = '00010102'; // Дата больше, чтобы инициировать обмен
				Запись.Записать(Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	// - Категории новостей (по тексту "Значение категории новостей:").
	// Эти значения не надо добавлять в регистр.

	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	Рег.Список                      КАК Список,
		|	ВЫБОР
		|		// Списки категорий новостей ни от кого не зависят - загружать их в самом начале
		|		КОГДА (ТипЗначения(Рег.Список) = Тип(Строка)) И (Рег.Список = ""Список категорий новостей"") ТОГДА
		|			1
		|		// Значения списков категорий новостей зависят только от списков категорий
		|		КОГДА (ТипЗначения(Рег.Список) = Тип(Строка)) И (Рег.Список ПОДОБНО ""Значения категории новостей:%"") ТОГДА
		|			2
		|		КОГДА Рег.Список ССЫЛКА ПланВидовХарактеристик.КатегорииНовостей ТОГДА
		|			2
		|		// В лентах новостей могут быть ссылки как на списки категорий, так и на значения списков категорий
		|		КОГДА (ТипЗначения(Рег.Список) = Тип(Строка)) И (Рег.Список = ""Список лент новостей"") ТОГДА
		|			3
		|	КОНЕЦ                           КАК Порядок,
		|	Рег.ТекущаяВерсияНаКлиенте      КАК ТекущаяВерсияНаКлиенте,
		|	Рег.ТекущаяВерсияНаСервере      КАК ТекущаяВерсияНаСервере,
		|	ВЫРАЗИТЬ("" "" КАК Строка(200)) КАК ПредставлениеДляЗагрузки
		|ИЗ
		|	РегистрСведений.ДатыОбновленияСтандартныхСписковНовостей КАК Рег
		|ГДЕ
		|	Рег.ТекущаяВерсияНаКлиенте < Рег.ТекущаяВерсияНаСервере
		|";
	Результат = Запрос.Выполнить(); // ПолучитьСтандартныеСпискиТребующиеОбновления().
	Если НЕ Результат.Пустой() Тогда
		ТаблицаОбновляемыхДанных = Результат.Выгрузить(ОбходРезультатаЗапроса.Прямой);
		ТаблицаОбновляемыхДанных.Сортировать("Порядок");
		Для каждого ТекущаяСтрока Из ТаблицаОбновляемыхДанных Цикл
			Если ТипЗнч(ТекущаяСтрока.Список) = Тип("ПланВидовХарактеристикСсылка.КатегорииНовостей") Тогда
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Загрузка значений категории %1 (%2)'"),
					ТекущаяСтрока.Список,
					СокрЛП(ТекущаяСтрока.Список.Код));
				ТекущаяСтрока.ПредставлениеДляЗагрузки = ТекстСообщения;
			Иначе
				Если ТекущаяСтрока.Список = "Список лент новостей" Тогда // Идентификатор.
					ТекстСообщения = НСтр("ru='Загрузка списка лент новостей'");
					ТекущаяСтрока.ПредставлениеДляЗагрузки = ТекстСообщения;
				ИначеЕсли ТекущаяСтрока.Список = "Список категорий новостей" Тогда // Идентификатор.
					ТекстСообщения = НСтр("ru='Загрузка списка категорий новостей'");
					ТекущаяСтрока.ПредставлениеДляЗагрузки = ТекстСообщения;
				ИначеЕсли СтрНайти(ВРег(ТекущаяСтрока.Список), ВРег("Значения категории новостей:")) = 1 Тогда // Идентификатор.
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Загрузка значений категории с кодом %1'"),
						Прав(ТекущаяСтрока.Список, СтрДлина(ТекущаяСтрока.Список) - 28));
					ТекущаяСтрока.ПредставлениеДляЗагрузки = ТекстСообщения;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	Возврат ТаблицаОбновляемыхДанных;

КонецФункции

// Функция загружает список с сервера.
//
// Параметры:
//  Список                 - Строка, ПланВидовХарактеристикСсылка.КатегорииНовостей - идентификатор списка;
//  ТекущаяВерсияНаКлиенте - Дата - для определения, какие данные надо загружать;
//  Прокси                 - WSПрокси - прокси веб-сервиса. Если не передан, то создается в функции;
//  КонтекстВыполнения     - Структура, Неопределено - структура контекста выполнения.
//
// Возвращаемое значение:
//  Булево - ИСТИНА (был загружен) или ЛОЖЬ (таймаут или другая ошибка).
//
Функция ОбновитьСтандартныйСписокССервера(Список, ТекущаяВерсияНаКлиенте, Прокси = Неопределено, КонтекстВыполнения = Неопределено) Экспорт

	НаименованиеПроцедурыФункции = "Обработка.УправлениеНовостями.ОбновитьСтандартныйСписокССервера"; // Идентификатор.
	ЗаписыватьВЖурналРегистрации = Ложь;
	Если КонтекстВыполнения = Неопределено Тогда
		КонтекстВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
		ЗаписыватьВЖурналРегистрации = Истина;
	КонецЕсли;
	КодРезультата = 0;
	ОписаниеРезультата = "";
	КонтекстВыполненияВложенный = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Контекст "по шагам".
	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		НаименованиеПроцедурыФункции, // Идентификатор.
		НСтр("ru='Обновление классификатора'"));

		ТипОбъектXDTO   = Тип("ОбъектXDTO");
		ТипСписокXDTO   = Тип("СписокXDTO");
		ТипWSПрокси     = Тип("WSПрокси");

		// Непосредственно загрузка данных с помощью веб-сервисов.
		БылиОшибки = Ложь;

		Если ТипЗнч(Прокси) <> ТипWSПрокси Тогда
			Прокси = ПодключитьсяКВебСервисуОбновленияСтандартныхСписков(КонтекстВыполненияВложенный);
		КонецЕсли;

		Если ТипЗнч(Прокси) = ТипWSПрокси Тогда

			// Возможно, имя конфигурации из метаданных было заменено на какой-то синоним - взять синоним.
			configName    = СокрЛП(Метаданные.Имя);
			configVersion = СокрЛП(Метаданные.Версия);
			Продукты = ОбработкаНовостейВызовСервера.ПолучитьЗначениеПредопределеннойКатегории("Product");
			Если Продукты.Количество() > 0 Тогда
				Продукт = Продукты[Продукты.Количество()-1];
				ГдеРазделитель = СтрНайти(Продукт, ",");
				Если ГдеРазделитель > 0 Тогда
					configName    = Лев(Продукт, ГдеРазделитель-1);
					configVersion = Прав(Продукт, СтрДлина(Продукт) - ГдеРазделитель);
				КонецЕсли;
			КонецЕсли;

			lastSynchronizationDateTime = ТекущаяВерсияНаКлиенте;
			errCode                     = "";
			errDescription              = "";

			Если ТипЗнч(Список) = Тип("ПланВидовХарактеристикСсылка.КатегорииНовостей") Тогда
				Если НЕ ПустаяСтрока(СокрЛП(Список.Код)) Тогда
					СписокОбновленныхДанных = Неопределено;
					Попытка
						СписокОбновленныхДанных = Прокси.getUpdatedCategoryValuesByCode(
							configName,
							configVersion,
							СокрЛП(Список.Код),
							lastSynchronizationDateTime,
							errCode,
							errDescription);
					Исключение
						ИнформацияОбОшибке = ИнформацияОбОшибке();
						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Ошибка обновления списка значений категории новостей (Прокси.getUpdatedCategoryValuesByCode):
								|sCategoryCode = %1
								|errCode = %2
								|errDescription = %3
								|%4'"),
							СокрЛП(Список.Код),
							errCode,
							errDescription,
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
						ОписаниеРезультата = ОписаниеРезультата
							+ ТекстСообщения
							+ Символы.ПС;
						БылиОшибки = Истина;
					КонецПопытки;

					Если ТипЗнч(СписокОбновленныхДанных) = ТипОбъектXDTO Тогда

						ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='Информация об обновлении значений категорий новостей (Прокси.getUpdatedCategoryValuesByCode):
								|configName = %1
								|configVersion = %2
								|Код категории: %3
								|lastSynchronizationDateTime = %4
								|errCode = %5
								|errDescription = %6
								|Полученные данные:
								|%7'"),
							configName,
							configVersion,
							СокрЛП(Список.Код),
							lastSynchronizationDateTime,
							errCode,
							errDescription,
							ИнтернетПоддержкаПользователей.ПредставлениеОбъектаХДТО(СписокОбновленныхДанных, Прокси.ФабрикаXDTO));

						ОписаниеРезультата = ОписаниеРезультата
							+ ТекстСообщения
							+ Символы.ПС;

						Если (СписокОбновленныхДанных.Тип().URIПространстваИмен = "http://v8.1c.ru/news1c/wsTypes")
							И (СписокОбновленныхДанных.Тип().Имя = "categoryValueListType") Тогда
							// Непосредственно загрузка.
							ДатаСамогоНовогоЭлемента = '00010101';
							Если ТипЗнч(СписокОбновленныхДанных.categoryValue) = ТипСписокXDTO Тогда // Даже если передали один элемент, то передастся как "СписокXDTO", т.к. так прописано в схеме ХДТО.

								Для каждого ТекущаяСтрокаХДТО Из СписокОбновленныхДанных.categoryValue Цикл
									ДатаСамогоНовогоЭлемента = Макс(ДатаСамогоНовогоЭлемента, УниверсальноеВремя(ТекущаяСтрокаХДТО.updated, ЧасовойПоясСеанса()));

									// Загрузить значение.
									Режим = "";
									лкОбъект = ЗаполнитьОбъектЗначениеКатегорииНовостей(Список, ТекущаяСтрокаХДТО, Режим);

									// Если объект еще не был записан в базе, и пришел уже с пометкой удаления, то не записывать его.
									Если лкОбъект.Ссылка.Пустая()
											И (лкОбъект.ПометкаУдаления = Истина) Тогда
										// Пришел помеченный на удаление объект - не создавать его.
									Иначе
										Попытка
											лкОбъект.ОбменДанными.Загрузка = Истина;
											лкОбъект.Записать();
											// После записи классификатора можно провести дополнительные обработки.
											ОбработкаНовостей.ДополнительноОбработатьКлассификаторПослеПолученияПослеЗаписи(лкОбъект.Ссылка);
										Исключение
											ИнформацияОбОшибке = ИнформацияОбОшибке();
											ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												НСтр("ru='Ошибка записи элемента (%1) с уникальным идентификатором %2:
													|%3'"),
												Режим,
												ТекущаяСтрокаХДТО.guid,
												ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
											ОписаниеРезультата = ОписаниеРезультата
												+ ТекстСообщения
												+ Символы.ПС;
										КонецПопытки;
									КонецЕсли;

								КонецЦикла;

								// Обновить данные в регистре сведений "ДатыОбновленияСтандартныхСписковНовостей".
								// Надо помнить, что "ТекущаяВерсияНаКлиенте" меняется вне зависимости от того,
								//  все ли данные корректно записаны (возможно, было исключение на каком-то элементе).
								Запись = РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей.СоздатьМенеджерЗаписи();
								Запись.Список = Список;
								Запись.Прочитать(); // Запись будет ниже.
								Если Запись.Выбран() Тогда
									Если Запись.ТекущаяВерсияНаКлиенте < ДатаСамогоНовогоЭлемента Тогда
										Запись.Список = Список;
										Запись.ТекущаяВерсияНаКлиенте = ДатаСамогоНовогоЭлемента;
										Запись.ТекущаяВерсияНаСервере = ДатаСамогоНовогоЭлемента;
										Запись.Записать(Истина);
									КонецЕсли;
								Иначе
									Запись.Список = Список;
									Запись.ТекущаяВерсияНаКлиенте = ДатаСамогоНовогоЭлемента;
									Запись.ТекущаяВерсияНаСервере = ДатаСамогоНовогоЭлемента;
									Запись.Записать(Истина);
								КонецЕсли;

							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

			ИначеЕсли Список = "Список лент новостей" Тогда // Идентификатор.
				// Обновление списка лент новостей проходит в два этапа:
				// На первом этапе происходит загрузка измененных / добавленных данных;
				// На втором этапе сравнивается список всех лент новостей в ИБ и всех лент новостей на сервере 1С,
				//  далее ленты новостей, отключенные на сервере 1С, помечаются на удаление.

				// Этап 1. Изменение / добавление лент новостей.
				СписокОбновленныхДанных = Неопределено;
				Попытка
					СписокОбновленныхДанных = Прокси.getUpdatedChannels(
						configName,
						configVersion,
						lastSynchronizationDateTime,
						errCode,
						errDescription);
				Исключение
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Ошибка обновления списка лент новостей (Прокси.getUpdatedChannels):
							|errCode = %1
							|errDescription = %2
							|Подробное представление ошибки:
							|%3'"),
						errCode,
						errDescription,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
					ОписаниеРезультата = ОписаниеРезультата
						+ ТекстСообщения
						+ Символы.ПС;
					БылиОшибки = Истина;
				КонецПопытки;

				Если ТипЗнч(СписокОбновленныхДанных) = ТипОбъектXDTO Тогда

					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Информация об обновлении списка лент новостей (Прокси.getUpdatedChannels):
							|configName = %1
							|configVersion = %2
							|lastSynchronizationDateTime = %3
							|errCode = %4
							|errDescription = %5
							|Полученные данные:
							|%6'"),
						configName,
						configVersion,
						lastSynchronizationDateTime,
						errCode,
						errDescription,
						ИнтернетПоддержкаПользователей.ПредставлениеОбъектаХДТО(СписокОбновленныхДанных, Прокси.ФабрикаXDTO));

					ОписаниеРезультата = ОписаниеРезультата
						+ ТекстСообщения
						+ Символы.ПС;

					Если (СписокОбновленныхДанных.Тип().URIПространстваИмен = "http://v8.1c.ru/news1c/wsTypes")
							И (СписокОбновленныхДанных.Тип().Имя = "channelListType") Тогда
						// Непосредственно загрузка
						ДатаСамогоНовогоЭлемента = '00010101';
						Если ТипЗнч(СписокОбновленныхДанных.channel) = ТипСписокXDTO Тогда // Правильно сработает, даже если передали только одно значение.

							Для каждого ТекущаяСтрокаХДТО Из СписокОбновленныхДанных.channel Цикл
								ДатаСамогоНовогоЭлемента = Макс(ДатаСамогоНовогоЭлемента, УниверсальноеВремя(ТекущаяСтрокаХДТО.updated, ЧасовойПоясСеанса()));

								// Загрузить значение.
								Режим = "";
								лкОбъект = ЗаполнитьОбъектЛентаНовостей(ТекущаяСтрокаХДТО, Режим, КонтекстВыполненияВложенный);

								// Если объект еще не был записан в базе, и пришел уже с пометкой удаления, то не записывать его.
								Если лкОбъект.Ссылка.Пустая()
										И (лкОбъект.ПометкаУдаления = Истина) Тогда
									// Пришел помеченный на удаление объект - не создавать его.
								Иначе
									Попытка
										лкОбъект.ОбменДанными.Загрузка = Истина;
										лкОбъект.Записать();
										// После записи классификатора можно провести дополнительные обработки.
										ОбработкаНовостей.ДополнительноОбработатьКлассификаторПослеПолученияПослеЗаписи(лкОбъект.Ссылка);
									Исключение
										ИнформацияОбОшибке = ИнформацияОбОшибке();
										ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru='Ошибка записи элемента (%1) с уникальным идентификатором %2 по причине:
												|%3'"),
											Режим,
											ТекущаяСтрокаХДТО.guid,
											ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
										ОписаниеРезультата = ОписаниеРезультата
											+ ТекстСообщения
											+ Символы.ПС;
									КонецПопытки;
								КонецЕсли;

							КонецЦикла;

							// Обновить данные в регистре сведений "ДатыОбновленияСтандартныхСписковНовостей".
							// Надо помнить, что "ТекущаяВерсияНаКлиенте" меняется вне зависимости от того,
							//  все ли данные корректно записаны (возможно, было исключение на каком-то элементе).
							Запись = РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей.СоздатьМенеджерЗаписи();
							Запись.Список = "Список лент новостей"; // Идентификатор.
							Запись.Прочитать(); // Запись будет ниже.
							Если Запись.Выбран() Тогда
								Если Запись.ТекущаяВерсияНаКлиенте < ДатаСамогоНовогоЭлемента Тогда
									Запись.Список = "Список лент новостей"; // Идентификатор.
									Запись.ТекущаяВерсияНаКлиенте = ДатаСамогоНовогоЭлемента;
									Запись.ТекущаяВерсияНаСервере = ДатаСамогоНовогоЭлемента;
									Запись.Записать(Истина);
								КонецЕсли;
							Иначе
								Запись.Список = "Список лент новостей"; // Идентификатор.
								Запись.ТекущаяВерсияНаКлиенте = ДатаСамогоНовогоЭлемента;
								Запись.ТекущаяВерсияНаСервере = ДатаСамогоНовогоЭлемента;
								Запись.Записать(Истина);
							КонецЕсли;

						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

				// Этап 2. Отключение лент новостей, отключенных от этой конфигурации (или помеченных на удаление) на сервере 1С.
				СписокВсехДанных = Неопределено;
				Попытка
					СписокВсехДанных = Прокси.getAllChannels(
						configName,
						configVersion,
						errCode,
						errDescription);
				Исключение
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Ошибка обновления списка лент новостей (Прокси.getAllChannels):
							|errCode = %1
							|errDescription = %2
							|Подробное представление ошибки:
							|%3'"),
						errCode,
						errDescription,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
					ОписаниеРезультата = ОписаниеРезультата
						+ ТекстСообщения
						+ Символы.ПС;
					БылиОшибки = Истина;
				КонецПопытки;

				Если ТипЗнч(СписокВсехДанных) = ТипОбъектXDTO Тогда

					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Информация об обновлении списка лент новостей (Прокси.getAllChannels):
							|configName = %1
							|configVersion = %2
							|errCode = %3
							|errDescription = %4
							|Полученные данные:
							|%5'"),
						configName,
						configVersion,
						errCode,
						errDescription,
						ИнтернетПоддержкаПользователей.ПредставлениеОбъектаХДТО(СписокВсехДанных, Прокси.ФабрикаXDTO));

					ОписаниеРезультата = ОписаниеРезультата
						+ ТекстСообщения
						+ Символы.ПС;

					Если (СписокВсехДанных.Тип().URIПространстваИмен = "http://v8.1c.ru/news1c/wsTypes")
						И (СписокВсехДанных.Тип().Имя = "channelListType") Тогда
						// Непосредственно проверка
						Если ТипЗнч(СписокВсехДанных.channel) = ТипСписокXDTO Тогда // Правильно сработает, даже если передали только одно значение.

							// В Новостном центре могли отключить какую-то ленту новостей, поэтому если lastSynchronizationDateTime - пустая,
							//  то подготовить текущий список лент новостей и пометить на удаление те, которых нет в списке, пришедшим с сервера.
							СписокВсехЗагруженныхСерверныхЛентНовостей = Новый СписокЗначений;
							Запрос = Новый Запрос;
							Запрос.Текст = "
								|ВЫБРАТЬ
								|	Спр.Ссылка КАК ЛентаНовостей
								|ИЗ
								|	Справочник.ЛентыНовостей КАК Спр
								|ГДЕ
								|	Спр.ЗагруженоССервера = ИСТИНА // Загруженные с сервера 1С
								|	И Спр.ПометкаУдаления = ЛОЖЬ // Ранее не удаленные
								|";
							РезультатЗапроса = Запрос.Выполнить();
							Если НЕ РезультатЗапроса.Пустой() Тогда
								СписокВсехЗагруженныхСерверныхЛентНовостей.ЗагрузитьЗначения(РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("ЛентаНовостей"));
								Для Каждого ТекущийЭлементСписка Из СписокВсехЗагруженныхСерверныхЛентНовостей Цикл
									ТекущийЭлементСписка.Пометка = Ложь;
								КонецЦикла;
							КонецЕсли;

							Для каждого ТекущаяСтрокаХДТО Из СписокВсехДанных.channel Цикл
								ЛентаНовостейСсылка = Справочники.ЛентыНовостей.ПолучитьСсылку(Новый УникальныйИдентификатор(ТекущаяСтрокаХДТО.guid));
								Если НЕ ПустаяСтрока(ЛентаНовостейСсылка.ВерсияДанных) Тогда // Объект существует в ИБ.
									// Найти эту ленту новостей в списке и отметить, что она присутствует на сервере 1С.
									НайденнаяЛентаНовостей = СписокВсехЗагруженныхСерверныхЛентНовостей.НайтиПоЗначению(ЛентаНовостейСсылка);
									Если НайденнаяЛентаНовостей <> Неопределено Тогда
										НайденнаяЛентаНовостей.Пометка = Истина;
									КонецЕсли;
								КонецЕсли;
							КонецЦикла;

							// Если на сервере 1С отключили какую-то ленту новостей. то пометить ее на удаление.
							Для Каждого ТекущийЭлементСписка Из СписокВсехЗагруженныхСерверныхЛентНовостей Цикл
								Если ТекущийЭлементСписка.Пометка = Ложь Тогда
									ЛентаНовостейОбъект = ТекущийЭлементСписка.Значение.ПолучитьОбъект();
									ЛентаНовостейОбъект.ДополнительныеСвойства.Вставить("УдалениеЛентыНовостейЗагруженнойССервера", Истина);
									ЛентаНовостейОбъект.УстановитьПометкуУдаления(Истина); // ////? Установить период автообновления = Вручную ?
									ТекстСообщения = НСтр("ru='Лента новостей %ЛентаНовостейНаименование% помечена на удаление, т.к. она была отключена на сервере 1С'");
									ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЛентаНовостейНаименование%", ЛентаНовостейОбъект.Наименование);
									ОписаниеРезультата = ОписаниеРезультата
										+ ТекстСообщения
										+ Символы.ПС;
								КонецЕсли;
							КонецЦикла;

						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

			ИначеЕсли Список = "Список категорий новостей" Тогда // Идентификатор.
				СписокОбновленныхДанных = Неопределено;
				Попытка
					СписокОбновленныхДанных = Прокси.getUpdatedCategories(
						configName,
						configVersion,
						lastSynchronizationDateTime,
						errCode,
						errDescription);
				Исключение
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Ошибка обновления списка категорий новостей (Прокси.getUpdatedCategories):
							|errCode = %1
							|errDescription = %2
							|Подробное представление ошибки:
							|%3'"),
						errCode,
						errDescription,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
					ОписаниеРезультата = ОписаниеРезультата
						+ ТекстСообщения
						+ Символы.ПС;
					БылиОшибки = Истина;
				КонецПопытки;

				Если ТипЗнч(СписокОбновленныхДанных) = ТипОбъектXDTO Тогда

					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='Информация об обновлении списка категорий новостей (Прокси.getUpdatedCategories):
							|configName = %1
							|configVersion = %2
							|lastSynchronizationDateTime = %3
							|errCode = %4
							|errDescription = %5
							|Полученные данные:
							|%6'"),
						configName,
						configVersion,
						lastSynchronizationDateTime,
						errCode,
						errDescription,
						ИнтернетПоддержкаПользователей.ПредставлениеОбъектаХДТО(СписокОбновленныхДанных, Прокси.ФабрикаXDTO));

					ОписаниеРезультата = ОписаниеРезультата
						+ ТекстСообщения
						+ Символы.ПС;

					Если (СписокОбновленныхДанных.Тип().URIПространстваИмен = "http://v8.1c.ru/news1c/wsTypes")
							И (СписокОбновленныхДанных.Тип().Имя = "categoriesListType") Тогда
						// Непосредственно загрузка
						ДатаСамогоНовогоЭлемента = '00010101';
						Если ТипЗнч(СписокОбновленныхДанных.category) = ТипСписокXDTO Тогда // Правильно сработает, даже если передали только одно значение.

							Для каждого ТекущаяСтрокаХДТО Из СписокОбновленныхДанных.category Цикл
								ДатаСамогоНовогоЭлемента = Макс(ДатаСамогоНовогоЭлемента, УниверсальноеВремя(ТекущаяСтрокаХДТО.updated, ЧасовойПоясСеанса()));

								// Загрузить значение
								Режим = "";
								лкОбъект = ЗаполнитьОбъектКатегорияНовостей(ТекущаяСтрокаХДТО, Режим);

								// Если объект еще не был записан в базе, и пришел уже с пометкой удаления, то не записывать его.
								Если лкОбъект.Ссылка.Пустая()
										И (лкОбъект.ПометкаУдаления = Истина) Тогда
									// Пришел помеченный на удаление объект - не создавать его.
								Иначе
									Попытка
										лкОбъект.ОбменДанными.Загрузка = Истина;
										лкОбъект.Записать();
										// После записи классификатора можно провести дополнительные обработки.
										ОбработкаНовостей.ДополнительноОбработатьКлассификаторПослеПолученияПослеЗаписи(лкОбъект.Ссылка);
									Исключение
										ИнформацияОбОшибке = ИнформацияОбОшибке();
										ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru='Ошибка записи элемента (%1) с уникальным идентификатором %2 по причине:
												|%3'"),
											Режим,
											ТекущаяСтрокаХДТО.guid,
											ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
										ОписаниеРезультата = ОписаниеРезультата
											+ ТекстСообщения
											+ Символы.ПС;
									КонецПопытки;
								КонецЕсли;

							КонецЦикла;

							// Обновить данные в регистре сведений "ДатыОбновленияСтандартныхСписковНовостей".
							// Надо помнить, что "ТекущаяВерсияНаКлиенте" меняется вне зависимости от того,
							//  все ли данные корректно записаны (возможно, было исключение на каком-то элементе).
							Запись = РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей.СоздатьМенеджерЗаписи();
							Запись.Список = "Список категорий новостей"; // Идентификатор.
							Запись.Прочитать(); // Запись будет ниже.
							Если Запись.Выбран() Тогда
								Если Запись.ТекущаяВерсияНаКлиенте < ДатаСамогоНовогоЭлемента Тогда
									Запись.Список = "Список категорий новостей"; // Идентификатор.
									Запись.ТекущаяВерсияНаКлиенте = ДатаСамогоНовогоЭлемента;
									Запись.ТекущаяВерсияНаСервере = ДатаСамогоНовогоЭлемента;
									Запись.Записать(Истина);
								КонецЕсли;
							Иначе
								Запись.Список = "Список категорий новостей"; // Идентификатор.
								Запись.ТекущаяВерсияНаКлиенте = ДатаСамогоНовогоЭлемента;
								Запись.ТекущаяВерсияНаСервере = ДатаСамогоНовогоЭлемента;
								Запись.Записать(Истина);
							КонецЕсли;

						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

			ИначеЕсли СтрНайти(ВРег(Список), ВРег("Значения категории новостей:")) = 1 Тогда // Идентификатор.
				// Загружаются значения справочника ЗначенияКатегорийНовостей, которые ранее не были загружены,
				//  т.к. не было владельца - элемента плана видов характеристик КатегорииНовостей.
				// 1. Определить уникальный идентификатор.
				СписокУИН = Прав(Список, СтрДлина(Список) - 28); // только уникальный идентификатор
				Если НЕ ПустаяСтрока(СписокУИН) Тогда
					// Проверить - есть ли такой элемент плана видов характеристик.
					// Если нет такого элемента, тогда невозможно загрузить значения:
					//   Справочника ЗначенияКатегорийНовостей - нечего будет подставить как Владельца.
					Владелец = ПланыВидовХарактеристик.КатегорииНовостей.ПолучитьСсылку(Новый УникальныйИдентификатор(СписокУИН));
					Если НЕ ПустаяСтрока(Владелец.ВерсияДанных) Тогда
						СписокОбновленныхДанных = Неопределено;
						Попытка
							СписокОбновленныхДанных = Прокси.getUpdatedCategoryValuesByGuid(
								configName,
								configVersion,
								СокрЛП(СписокУИН),
								lastSynchronizationDateTime,
								errCode,
								errDescription);
						Исключение
							ИнформацияОбОшибке = ИнформацияОбОшибке();
							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Ошибка обновления списка значений категории новостей (Прокси.getUpdatedCategoryValuesByGuid):
									|sCategoryGuid = %1
									|errCode = %2
									|errDescription = %3
									|Подробное представление ошибки:
									|%4'"),
								СокрЛП(СписокУИН),
								errCode,
								errDescription,
								ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
							ОписаниеРезультата = ОписаниеРезультата
								+ ТекстСообщения
								+ Символы.ПС;
							БылиОшибки = Истина;
						КонецПопытки;

						Если ТипЗнч(СписокОбновленныхДанных) = ТипОбъектXDTO Тогда

							ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='Информация об обновлении значений категорий новостей (Прокси.getUpdatedCategoryValuesByGuid):
									|configName = %1
									|configVersion = %2
									|УИН категории: %3
									|lastSynchronizationDateTime = %4
									|errCode = %5
									|errDescription = %6
									|Полученные данные:
									|%7'"),
								configName,
								configVersion,
								СокрЛП(СписокУИН),
								lastSynchronizationDateTime,
								errCode,
								errDescription,
								ИнтернетПоддержкаПользователей.ПредставлениеОбъектаХДТО(СписокОбновленныхДанных, Прокси.ФабрикаXDTO));

							ОписаниеРезультата = ОписаниеРезультата
								+ ТекстСообщения
								+ Символы.ПС;

							Если (СписокОбновленныхДанных.Тип().URIПространстваИмен = "http://v8.1c.ru/news1c/wsTypes")
									И (СписокОбновленныхДанных.Тип().Имя = "categoryValueListType") Тогда
								// Непосредственно загрузка.
								ДатаСамогоНовогоЭлемента = '00010101';
								Если ТипЗнч(СписокОбновленныхДанных.categoryValue) = ТипСписокXDTO Тогда // Правильно сработает, даже если передали только одно значение.

									Для каждого ТекущаяСтрокаХДТО Из СписокОбновленныхДанных.categoryValue Цикл
										ДатаСамогоНовогоЭлемента = Макс(ДатаСамогоНовогоЭлемента, УниверсальноеВремя(ТекущаяСтрокаХДТО.updated, ЧасовойПоясСеанса()));

										// Загрузить значение.
										Режим = "";
										лкОбъект = ЗаполнитьОбъектЗначениеКатегорииНовостей(Владелец, ТекущаяСтрокаХДТО, Режим);

										// Если объект еще не был записан в базе, и пришел уже с пометкой удаления, то не записывать его.
										Если лкОбъект.Ссылка.Пустая()
												И (лкОбъект.ПометкаУдаления = Истина) Тогда
											// Пришел помеченный на удаление объект - не создавать его.
										Иначе
											Попытка
												лкОбъект.ОбменДанными.Загрузка = Истина;
												лкОбъект.Записать();
												// После записи классификатора можно провести дополнительные обработки.
												ОбработкаНовостей.ДополнительноОбработатьКлассификаторПослеПолученияПослеЗаписи(лкОбъект.Ссылка);
											Исключение
												ИнформацияОбОшибке = ИнформацияОбОшибке();
												ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
													НСтр("ru='Ошибка записи элемента (%1) с уникальным идентификатором %2 по причине:
														|%3'"),
													Режим,
													ТекущаяСтрокаХДТО.guid,
													ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
												ОписаниеРезультата = ОписаниеРезультата
													+ ТекстСообщения
													+ Символы.ПС;
											КонецПопытки;
										КонецЕсли;

									КонецЦикла;

									// Обновить данные в регистре сведений "ДатыОбновленияСтандартныхСписковНовостей".
									// Надо помнить, что "ТекущаяВерсияНаКлиенте" меняется вне зависимости от того,
									//  все ли данные корректно записаны (возможно, было исключение на каком-то элементе).
									// Причем данные со строковым представлением владельца - удалить,
									//  а данные со ссылкой на ПВХ.КатегорииНовостей - добавить.
									// Добавить запись с явной ссылкой на владельца.
									Запись = РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей.СоздатьМенеджерЗаписи();
									Запись.Список = Владелец;
									Запись.Прочитать(); // Запись будет ниже.
									Если Запись.Выбран() Тогда
										Если Запись.ТекущаяВерсияНаКлиенте < ДатаСамогоНовогоЭлемента Тогда
											Запись.Список = Владелец;
											Запись.ТекущаяВерсияНаКлиенте = ДатаСамогоНовогоЭлемента;
											Запись.ТекущаяВерсияНаСервере = ДатаСамогоНовогоЭлемента;
											Запись.Записать(Истина);
										КонецЕсли;
									Иначе
										Запись.Список = Владелец;
										Запись.ТекущаяВерсияНаКлиенте = ДатаСамогоНовогоЭлемента;
										Запись.ТекущаяВерсияНаСервере = ДатаСамогоНовогоЭлемента;
										Запись.Записать(Истина);
									КонецЕсли;
									// Удалить запись со строковым представлением владельца.
									Запись = РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей.СоздатьМенеджерЗаписи();
									Запись.Список = Список;
									Запись.Удалить();
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;

		Иначе
			БылиОшибки = Истина;
			ОписаниеРезультата = НСтр("ru='Не удалось подключиться к веб-сервисам.'");
		КонецЕсли;

	ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата, // Много действий, всегда установлено в 0, надо читать данные по каждому шагу.
		ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	Если ЗаписыватьВЖурналРегистрации = Истина Тогда

		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Загрузка классификаторов'"), // ИмяСобытия
			НСтр("ru='Новости. Загрузка классификаторов'"), // ИдентификаторШага
			?(КодРезультата > 0,
				УровеньЖурналаРегистрации.Ошибка,
				УровеньЖурналаРегистрации.Информация), // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
			ОбработкаНовостей.КомментарийДляЖурналаРегистрации(
				НаименованиеПроцедурыФункции,
				ШагВыполнения,
				КонтекстВыполнения,
				"Простой"), // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

	Возврат НЕ БылиОшибки;

КонецФункции

// Функция загружает все списки с сервера за одно подключение.
//
// Параметры:
//  КонтекстВыполнения - Структура, Неопределено - структура контекста выполнения.
//
// Возвращаемое значение:
//  Булево - ИСТИНА (были загружены все списки) или ЛОЖЬ (таймаут или другая ошибка).
//
Функция ОбновитьВсеСтандартныеСпискиССервера(КонтекстВыполнения = Неопределено) Экспорт

	НаименованиеПроцедурыФункции = "Обработка.УправлениеНовостями.ОбновитьВсеСтандартныеСпискиССервера"; // Идентификатор.
	ЗаписыватьВЖурналРегистрации = Ложь;
	Если КонтекстВыполнения = Неопределено Тогда
		КонтекстВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
		ЗаписыватьВЖурналРегистрации = Истина;
	КонецЕсли;
	КодРезультата = 0;
	ОписаниеРезультата = "";
	КонтекстВыполненияВложенный = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Контекст "по шагам".
	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		НаименованиеПроцедурыФункции, // Идентификатор.
		НСтр("ru='Обновление классификаторов'"));

		РазрешенаРаботаСНовостямиЧерезИнтернет = ОбработкаНовостейВызовСервера.РазрешенаРаботаСНовостямиЧерезИнтернет();
		Если РазрешенаРаботаСНовостямиЧерезИнтернет = Истина Тогда

			ЕстьОшибки = Ложь;

			ТипWSПрокси = Тип("WSПрокси");

			// Обновление лент новостей - обновлять всегда
			БылоОбновлениеЛентНовостей = Ложь;

			// Непосредственно загрузка данных с помощью веб-сервисов.
			БылиОшибки = Ложь;

			Прокси = ПодключитьсяКВебСервисуОбновленияСтандартныхСписков(КонтекстВыполненияВложенный);

			Если ТипЗнч(Прокси) <> ТипWSПрокси Тогда
				ЕстьОшибки = Истина;
				ОписаниеРезультата = НСтр("ru='Не удалось подключиться к прокси веб-сервисов обновления классификаторов'");
			КонецЕсли;

			Если ЕстьОшибки = Ложь Тогда

				// Загрузка списка "что надо обновить" с серверов Новостного центра
				//  и поместить это в регистр сведений "ДатыОбновленияСтандартныхСписковНовостей".
				ОбновитьСписокСправочниковИВерсииССервера(КонтекстВыполненияВложенный);

				// Составить список для обновления из регистра сведений "ДатыОбновленияСтандартныхСписковНовостей".
				ТаблицаОбновляемыхДанных = ПолучитьСтандартныеСпискиТребующиеОбновления();

				Для каждого ТекущийОбновляемыйСписок Из ТаблицаОбновляемыхДанных Цикл
					Если ТекущийОбновляемыйСписок.Список = "Список лент новостей" Тогда // Идентификатор.
						БылоОбновлениеЛентНовостей = Истина;
					КонецЕсли;
					БылаОшибка = НЕ ОбновитьСтандартныйСписокССервера(
						ТекущийОбновляемыйСписок.Список,
						ТекущийОбновляемыйСписок.ТекущаяВерсияНаКлиенте,
						Прокси,
						КонтекстВыполненияВложенный);
					Если БылаОшибка = Истина Тогда
						БылиОшибки = Истина;
					КонецЕсли;
				КонецЦикла;

				// Ленты новостей обновлять всегда, вне зависимости от того, были ли они обновлены на сервере,
				//  т.к. отключение ленты новостей на сервере не влечет за собой увеличение "ТекущаяДатаНаСервере".
				Если БылоОбновлениеЛентНовостей <> Истина Тогда
					БылаОшибка = НЕ ОбновитьСтандартныйСписокССервера(
						"Список лент новостей", // Идентификатор.
						'00010101',
						Прокси,
						КонтекстВыполненияВложенный);
					Если БылаОшибка = Истина Тогда
						БылиОшибки = Истина;
					КонецЕсли;
				КонецЕсли;

				// После обновления лент новостей могли измениться наборы доступных для отбора категорий.
				// Удалить неправильные отборы, которые могут помешать проверке общих и пользовательских отборов.
				// В разделенном сеансе будут пересчитаны только пользовательские отборы и общие для области данных.
				ОбработкаНовостейВызовСервера.ОптимизироватьОтборыПоНовостям(КонтекстВыполненияВложенный);

			КонецЕсли;

		Иначе
			КодРезультата = 2;
			ОписаниеРезультата = НСтр("ru='Обработка.УправлениеНовостями.ОбновитьВсеСтандартныеСпискиССервера: Отключена работа с новостями через интернет. Обновление классификаторов не выполнялось.'");
		КонецЕсли;

	ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата, // Много действий, всегда установлено в 0, надо читать данные по каждому шагу.
		ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	Если ЗаписыватьВЖурналРегистрации = Истина Тогда

		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Все обновления новостей'"), // ИмяСобытия
			НСтр("ru='Новости. Все обновления новостей. Обновление классификаторов'"), // ИдентификаторШага
			?(КодРезультата > 0,
				УровеньЖурналаРегистрации.Ошибка,
				УровеньЖурналаРегистрации.Информация), // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
			ОбработкаНовостей.КомментарийДляЖурналаРегистрации(
				НаименованиеПроцедурыФункции,
				ШагВыполнения,
				КонтекстВыполнения,
				"Простой"), // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

	Возврат НЕ БылиОшибки;

КонецФункции

// Процедура обновляет список обновляемых справочников и их версии с сервера 1С.
//
// Параметры:
//  КонтекстВыполнения - Структура, Неопределено - структура контекста выполнения.
//
Процедура ОбновитьСписокСправочниковИВерсииССервера(КонтекстВыполнения = Неопределено) Экспорт

	НаименованиеПроцедурыФункции = "Обработка.УправлениеНовостями.ОбновитьСписокСправочниковИВерсииССервера"; // Идентификатор.
	ЗаписыватьВЖурналРегистрации = Ложь;
	Если КонтекстВыполнения = Неопределено Тогда
		КонтекстВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
		ЗаписыватьВЖурналРегистрации = Истина;
	КонецЕсли;
	КодРезультата = 0;
	ОписаниеРезультата = "";
	КонтекстВыполненияВложенный = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Контекст "по шагам".
	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		НаименованиеПроцедурыФункции, // Идентификатор.
		НСтр("ru='Загрузка файлов новостей'"));

		ТипОбъектXDTO = Тип("ОбъектXDTO");
		ТипСписокXDTO = Тип("СписокXDTO");
		ТипWSПрокси   = Тип("WSПрокси");

		// Имя и версия текущей конфигурации из метаданных (по-умолчанию).
		configName    = СокрЛП(Метаданные.Имя);
		configVersion = ИнтернетПоддержкаПользователейКлиентСервер.ВнутреннееПредставлениеНомераВерсии(СокрЛП(Метаданные.Версия));
		// Возможно, имя конфигурации из метаданных было заменено на какой-то синоним - взять синоним.
		Продукты = ОбработкаНовостейВызовСервера.ПолучитьЗначениеПредопределеннойКатегории("Product");
		Если Продукты.Количество() > 0 Тогда
			Продукт = Продукты[Продукты.Количество()-1];
			ГдеРазделитель = СтрНайти(Продукт, ",");
			Если ГдеРазделитель > 0 Тогда
				configName    = Лев(Продукт, ГдеРазделитель-1);
				configVersion = Прав(Продукт, СтрДлина(Продукт) - ГдеРазделитель);
			КонецЕсли;
		КонецЕсли;

		ИнтернетПоддержкаПользователейКлиентСервер.ЗарегистрироватьРезультатВыполненияОперации(
			КонтекстВыполненияВложенный,
			"ПараметрыВыполнения", // Идентификатор.
			НСтр("ru='Параметры выполнения'"),
			0,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru='configName = %1
					|configVersion = %2'"),
					configName,
					configVersion),
			Неопределено);

		Прокси = ПодключитьсяКВебСервисуОбновленияСтандартныхСписков(КонтекстВыполненияВложенный);

		Если ТипЗнч(Прокси) = ТипWSПрокси Тогда

			errCode               = 0;
			errDescription        = "";
			ДатыОбновленияСписков = Прокси.getLastUpdatesList(configName, configVersion, errCode, errDescription);

			ИнтернетПоддержкаПользователейКлиентСервер.ЗарегистрироватьРезультатВыполненияОперации(
				КонтекстВыполненияВложенный,
				"ПараметрыВыполнения", // Идентификатор.
				НСтр("ru='Параметры выполнения'"),
				0,
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Получение списка последних обновлений, вызов getLastUpdatesList
						|configName = %1
						|configVersion = %2
						|errCode = %3
						|errDescription = %4
						|Результат:
						|%5'"),
					configName,
					configVersion,
					errCode,
					errDescription,
					?(ТипЗнч(ДатыОбновленияСписков) = ТипОбъектXDTO,
						ИнтернетПоддержкаПользователей.ПредставлениеОбъектаХДТО(ДатыОбновленияСписков, Прокси.ФабрикаXDTO),
						НСтр("ru='Получено значение с типом значения, отличным от ОбъектXDTO'"))),
				Неопределено);

			Если (errCode = Неопределено) ИЛИ (errCode = 0) Тогда
				Если ТипЗнч(ДатыОбновленияСписков) = ТипОбъектXDTO Тогда
					Если ТипЗнч(ДатыОбновленияСписков.updatesItem) = ТипСписокXDTO Тогда // Правильно сработает, даже если передали только одно значение.
						Для каждого ТекущаяЗапись Из ДатыОбновленияСписков.updatesItem Цикл
							Если (ТекущаяЗапись.listName = "Список категорий новостей") // Идентификатор.
									ИЛИ (ТекущаяЗапись.listName = "Список лент новостей") Тогда // Идентификатор.
								Запись = РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей.СоздатьМенеджерЗаписи();
								Запись.Список = ТекущаяЗапись.listName;
								Запись.Прочитать(); // Запись будет ниже.
								Если Запись.Выбран() Тогда // Обновить
									Запись.Список = ТекущаяЗапись.listName;
									// Запись.ТекущаяВерсияНаКлиенте = // не трогать
									// Не смотря на то, что дата к нам приходит в часовом поясе нулевого меридиана, она преобразуется в текущий часовой пояс.
									// При записи в регистр, надо опять преобразовать в UTC+0.
									Запись.ТекущаяВерсияНаСервере = УниверсальноеВремя(ТекущаяЗапись.updated, ЧасовойПоясСеанса());
								Иначе // Создать
									Запись.Список = ТекущаяЗапись.listName;
									// Запись.ТекущаяВерсияНаКлиенте = // не трогать
									// Не смотря на то, что дата к нам приходит в часовом поясе нулевого меридиана, она преобразуется в текущий часовой пояс.
									// При записи в регистр, надо опять преобразовать в UTC+0.
									Запись.ТекущаяВерсияНаСервере = УниверсальноеВремя(ТекущаяЗапись.updated, ЧасовойПоясСеанса());
								КонецЕсли;
								Запись.Записать(Истина);
							ИначеЕсли ТекущаяЗапись.listName = "Значения категории новостей" Тогда // Идентификатор.
								// Если вообще есть такое свойство и оно не пустое.
								Если ТекущаяЗапись.Свойства().Получить("categoryGuid") <> Неопределено Тогда
									Если НЕ ПустаяСтрока(ТекущаяЗапись.categoryGuid) Тогда
										КатегорияНайдена = Ложь;
										КатегорияСсылка = ПланыВидовХарактеристик.КатегорииНовостей.ПолучитьСсылку(Новый УникальныйИдентификатор(ТекущаяЗапись.categoryGuid)); ////?
										Если ПустаяСтрока(КатегорияСсылка.ВерсияДанных) Тогда // Категория не найдена.
											// По УИН такой элемент плана видов характеристик не найден.
											// Возможно, он был создан ранее и есть совпадения по коду.
											// Если вообще есть такое свойство и оно не пустое.
											Если ТекущаяЗапись.Свойства().Получить("categoryCode") <> Неопределено Тогда
												Если НЕ ПустаяСтрока(ТекущаяЗапись.categoryCode) Тогда
													КатегорияСсылка = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду(ТекущаяЗапись.categoryCode);
													Если НЕ КатегорияСсылка.Пустая() Тогда
														КатегорияНайдена = Истина;
													КонецЕсли;
												КонецЕсли;
											КонецЕсли;
										Иначе
											КатегорияНайдена = Истина;
										КонецЕсли;
										Если КатегорияНайдена = Истина Тогда
											Запись = РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей.СоздатьМенеджерЗаписи();
											Запись.Список = КатегорияСсылка;
											Запись.Прочитать(); // Запись будет ниже.
											Если Запись.Выбран() Тогда // Обновить
												Запись.Список = КатегорияСсылка;
												// Запись.ТекущаяВерсияНаКлиенте = // не трогать
												// Не смотря на то, что дата к нам приходит в часовом поясе нулевого меридиана, она преобразуется в текущий часовой пояс.
												// При записи в регистр, надо опять преобразовать в UTC+0.
												Запись.ТекущаяВерсияНаСервере = УниверсальноеВремя(ТекущаяЗапись.updated, ЧасовойПоясСеанса());
											Иначе // Создать
												Запись.Список = КатегорияСсылка;
												// Запись.ТекущаяВерсияНаКлиенте = // не трогать
												// Не смотря на то, что дата к нам приходит в часовом поясе нулевого меридиана, она преобразуется в текущий часовой пояс.
												// При записи в регистр, надо опять преобразовать в UTC+0.
												Запись.ТекущаяВерсияНаСервере = УниверсальноеВремя(ТекущаяЗапись.updated, ЧасовойПоясСеанса());
											КонецЕсли;
											Запись.Записать(Истина);
											// Возможно, в регистре сведений остались устаревшие данные (когда список категорий еще не был обновлен).
											// Необходимо найти такие данные и удалить.
											Запись = РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей.СоздатьМенеджерЗаписи();
											Запись.Список = "Значения категории новостей:" + ТекущаяЗапись.categoryGuid; // Идентификатор.
											Запись.Удалить(); // Предварительно не будем искать - удалим сразу.
										Иначе
											// Если такого элемента нет вообще, то значит и не были загружены значения.
											// Сохранить в регистре как строку с УИН.
											// В регистре будет сохранено как "Значения категории новостей:categoryGuid".
											Запись = РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей.СоздатьМенеджерЗаписи();
											Запись.Список = "Значения категории новостей:" + ТекущаяЗапись.categoryGuid; // Идентификатор.
											Запись.Прочитать(); // Запись будет ниже.
											Если Запись.Выбран() Тогда // Обновить
												Запись.Список = "Значения категории новостей:" + ТекущаяЗапись.categoryGuid; // Идентификатор.
												// Запись.ТекущаяВерсияНаКлиенте = // не трогать
												// Не смотря на то, что дата к нам приходит в часовом поясе нулевого меридиана, она преобразуется в текущий часовой пояс.
												// При записи в регистр, надо опять преобразовать в UTC+0.
												Запись.ТекущаяВерсияНаСервере = УниверсальноеВремя(ТекущаяЗапись.updated, ЧасовойПоясСеанса());
											Иначе // Создать
												Запись.Список = "Значения категории новостей:" + ТекущаяЗапись.categoryGuid; // Идентификатор.
												// Запись.ТекущаяВерсияНаКлиенте = // не трогать
												// Не смотря на то, что дата к нам приходит в часовом поясе нулевого меридиана, она преобразуется в текущий часовой пояс.
												// При записи в регистр, надо опять преобразовать в UTC+0.
												Запись.ТекущаяВерсияНаСервере = УниверсальноеВремя(ТекущаяЗапись.updated, ЧасовойПоясСеанса());
											КонецЕсли;
											Запись.Записать(Истина);
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						// В регистре сведений "ДатыОбновленияСтандартныхСписковНовостей" могут создаваться фиктивные записи
						//  с ТекущаяВерсияНаСервере = '00010102' для того, чтобы инициализировать обмен с сервером.
						//  После явного заполнения списка обновленных данных с сервера, удалять такие фиктивные записи,
						//  т.к. возможно на сервере нет нужных данных (например, нет категорий новостей, т.к. все ленты - без категорий).
						// Также удалять записи с пустым значением "Список".
						Выборка = РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей.Выбрать();
						Пока Выборка.Следующий() Цикл
							ТребуетсяУдаление = Ложь;
							Если Выборка.ТекущаяВерсияНаСервере = '00010102' Тогда
								ТребуетсяУдаление = Истина;
							ИначеЕсли Выборка.Список = Неопределено Тогда
								ТребуетсяУдаление = Истина;
							ИначеЕсли ПустаяСтрока(Выборка.Список) Тогда
								ТребуетсяУдаление = Истина;
							КонецЕсли;
							Если ТребуетсяУдаление = Истина Тогда
								Запись = РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей.СоздатьМенеджерЗаписи();
									Запись.Список = Выборка.Список;
								Запись.Удалить();
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли errCode = 10001 Тогда // Нет данных. Это не ошибка, а предупреждение.
				// Очистить регистр сведений.
				НаборЗаписей = РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей.СоздатьНаборЗаписей();
				НаборЗаписей.Записать(Истина);
			КонецЕсли;

		Иначе
			ОписаниеРезультата = НСтр("ru='Не удалось подключиться к веб-сервису обновления классификаторов.'");
		КонецЕсли;

	ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата, // Много действий, всегда установлено в 0, надо читать данные по каждому шагу.
		ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	Если ЗаписыватьВЖурналРегистрации = Истина Тогда

		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Загрузка классификаторов'"), // ИмяСобытия
			НСтр("ru='Новости. Загрузка классификаторов. Список обновлений классификаторов'"), // ИдентификаторШага
			?(КодРезультата > 0,
				УровеньЖурналаРегистрации.Ошибка,
				УровеньЖурналаРегистрации.Информация), // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
			ОбработкаНовостей.КомментарийДляЖурналаРегистрации(
				НаименованиеПроцедурыФункции,
				ШагВыполнения,
				КонтекстВыполнения,
				"Простой"), // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область СлужебныеПроцедурыИФункции_Преобразования

// Форматы rss и atom по-разному представляют даты - в форматах Rfc822 (rss) или
// xs:dateTime (atom), причем иногда в rss-лентах можно встретить ошибочный формат xs:dateTime.
// И так как автоматизировать получение даты невозможно, то парсинг будет производиться вручную.
//
Функция ПреобразоватьВДату(Знач СтрокаДата)

	Результат = ТекущаяУниверсальнаяДата();

	ТипДата = Тип("Дата");

	Если СтрокаДата = Неопределено Тогда
		Возврат '00010101';
	КонецЕсли;

	Если СтрДлина(СтрокаДата) >= 11 Тогда
		Если ВРег(Сред(СтрокаДата, 11, 1)) = "T" Тогда // Похоже на xs:dateTime
			Попытка
				Результат = XMLЗначение(ТипДата, СтрокаДата);
				// ////? 1С всегда преобразует дату в текущий часовой пояс, а нам надо сохранять в UTC+0.
				Результат = УниверсальноеВремя(Результат, ЧасовойПоясСеанса());
			Исключение
				Результат = ТекущаяУниверсальнаяДата();
			КонецПопытки;
		Иначе // Rfc822?
			// Tue, 27 May 2012 15:30:00 +0300
			Если Сред(СтрокаДата, 4, 1) = "," Тогда // Похоже на Rfc822
				СтрокаДата = СтрЗаменить(СтрокаДата, " ", Символы.ПС);
				Если СтрЧислоСтрок(СтрокаДата) >= 5 Тогда
					СтрДень  = СтрПолучитьСтроку(СтрокаДата, 2);
					СтрМесяц = СтрПолучитьСтроку(СтрокаДата, 3);
					СтрГод   = СтрПолучитьСтроку(СтрокаДата, 4);
					СтрВремя = СтрПолучитьСтроку(СтрокаДата, 5);
					СтрВремя = СтрЗаменить(СтрВремя, ":", Символы.ПС);
					Если СтрЧислоСтрок(СтрВремя)=3 Тогда
						СтрЧасы    = СтрПолучитьСтроку(СтрВремя, 1);
						СтрМинуты  = СтрПолучитьСтроку(СтрВремя, 2);
						СтрСекунды = СтрПолучитьСтроку(СтрВремя, 3);
					КонецЕсли;

					// http://www.w3.org/Protocols/rfc822/#z28
					СтрЧасовойПояс = СокрЛП(СтрПолучитьСтроку(СтрокаДата, 6));
					Если (ВРег(СтрЧасовойПояс) = "GMT") ИЛИ (ВРег(СтрЧасовойПояс) = "UT") Тогда
						ЧасовойПояс = 0;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "EST") ИЛИ (ВРег(СтрЧасовойПояс) = "EDT") Тогда
						ЧасовойПояс = -5;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "CST") ИЛИ (ВРег(СтрЧасовойПояс) = "CDT") Тогда
						ЧасовойПояс = -6;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "MST") ИЛИ (ВРег(СтрЧасовойПояс) = "MDT") Тогда
						ЧасовойПояс = -7;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "PST") ИЛИ (ВРег(СтрЧасовойПояс) = "PDT") Тогда
						ЧасовойПояс = -8;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "Z") Тогда ЧасовойПояс = 0;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "A") Тогда ЧасовойПояс = -1;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "B") Тогда ЧасовойПояс = -2;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "C") Тогда ЧасовойПояс = -2;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "D") Тогда ЧасовойПояс = -3;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "E") Тогда ЧасовойПояс = -4;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "F") Тогда ЧасовойПояс = -5;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "G") Тогда ЧасовойПояс = -6;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "H") Тогда ЧасовойПояс = -7;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "I") Тогда ЧасовойПояс = -8;
					// ИначеЕсли (ВРег(СтрЧасовойПояс) = "J") Тогда // J not used
					//  ЧасовойПояс = -9; // Можно это значение не устанавливать, т.к. часовой пояс J не используется.
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "K") Тогда ЧасовойПояс = -10;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "L") Тогда ЧасовойПояс = -11;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "M") Тогда ЧасовойПояс = -12;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "N") Тогда ЧасовойПояс = +1;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "O") Тогда ЧасовойПояс = +2;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "P") Тогда ЧасовойПояс = +2;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "Q") Тогда ЧасовойПояс = +3;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "R") Тогда ЧасовойПояс = +4;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "S") Тогда ЧасовойПояс = +5;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "T") Тогда ЧасовойПояс = +6;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "U") Тогда ЧасовойПояс = +7;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "V") Тогда ЧасовойПояс = +8;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "W") Тогда ЧасовойПояс = +9;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "X") Тогда ЧасовойПояс = +10;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "Y") Тогда ЧасовойПояс = +11;
					ИначеЕсли (ВРег(СтрЧасовойПояс) = "Z") Тогда ЧасовойПояс = +12;
					Иначе
						// Возможные значения: +0100, -0330, ...
						Если СтрДлина(СокрЛП(СтрЧасовойПояс)) = 5 Тогда
							Попытка
								Если Лев(СтрЧасовойПояс, 1) = "+" Тогда
									ЧасовойПояс = +1 * (Число(Сред(СтрЧасовойПояс, 2, 2)) * 60 * 60 + Число(Сред(СтрЧасовойПояс, 4, 2)) * 60);
								ИначеЕсли Лев(СтрЧасовойПояс, 1) = "-" Тогда
									ЧасовойПояс = -1 * (Число(Сред(СтрЧасовойПояс, 2, 2)) * 60 * 60 + Число(Сред(СтрЧасовойПояс, 4, 2)) * 60);
								Иначе
									ЧасовойПояс = 0;
								КонецЕсли;
							Исключение
								ЧасовойПояс = 0;
							КонецПопытки;
						Иначе
							ЧасовойПояс = 0;
						КонецЕсли;
					КонецЕсли;

					Месяц = 1;
					Если ВРег(СтрМесяц) = ВРег("Jan") Тогда
						Месяц = 1;
					ИначеЕсли ВРег(СтрМесяц) = ВРег("Feb") Тогда
						Месяц = 2;
					ИначеЕсли ВРег(СтрМесяц) = ВРег("Mar") Тогда
						Месяц = 3;
					ИначеЕсли ВРег(СтрМесяц) = ВРег("Apr") Тогда
						Месяц = 4;
					ИначеЕсли ВРег(СтрМесяц) = ВРег("May") Тогда
						Месяц = 5;
					ИначеЕсли ВРег(СтрМесяц) = ВРег("Jun") Тогда
						Месяц = 6;
					ИначеЕсли ВРег(СтрМесяц) = ВРег("Jul") Тогда
						Месяц = 7;
					ИначеЕсли ВРег(СтрМесяц) = ВРег("Aug") Тогда
						Месяц = 8;
					ИначеЕсли ВРег(СтрМесяц) = ВРег("Sep") Тогда
						Месяц = 9;
					ИначеЕсли ВРег(СтрМесяц) = ВРег("Oct") Тогда
						Месяц = 10;
					ИначеЕсли ВРег(СтрМесяц) = ВРег("Nov") Тогда
						Месяц = 11;
					ИначеЕсли ВРег(СтрМесяц) = ВРег("Dec") Тогда
						Месяц = 12;
					КонецЕсли;

					Попытка
						День    = Число(СтрДень);
						Год     = Число(СтрГод);
						Часы    = Число(СтрЧасы);
						Минуты  = Число(СтрМинуты);
						Секунды = Число(СтрСекунды);
						Результат = Дата(Год, Месяц, День, Часы, Минуты, Секунды) + ЧасовойПояс;
					Исключение
						Результат = ТекущаяУниверсальнаяДата();
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	// Некоторые БД вместо 01.01.0001 возвращают 03.01.0001.
	// Чтобы исключить эту ошибку, будем считать, что все даты < 2000 года - это пустая дата.
	Если Результат < Дата(2000,1,1) Тогда
		Результат = '00010101';
	КонецЕсли;

	Возврат Результат;

КонецФункции

// Получение значения из Объекта XDTO (через точку).
// В отличие от использования XPath (ОбъектХДТО.Получить("categories/category")
//  или ОбъектХДТО.Получить("categories/category.0")) эта функция в случае ошибок выдает значение по умолчанию.
//
Функция ПолучитьЗначениеХДТО(ОбъектХДТО, ИмяСвойства)

	// В случае всех непредвиденных ситуаций возвратится Неопределено.
	Результат = Неопределено;

	ТипОбъектXDTO   = Тип("ОбъектXDTO");
	ТипСвойствоXDTO = Тип("СвойствоXDTO");
	ТипСписокXDTO   = Тип("СписокXDTO");

	Если ТипЗнч(ОбъектХДТО) = ТипОбъектXDTO Тогда
		// Разделить свойство на лексемы - через точку. Вначале получить первое свойство, потом второе и т.п.
		Если НЕ ПустаяСтрока(ИмяСвойства) Тогда
			ГдеРазделитель = СтрНайти(ИмяСвойства, ".");
			Если ГдеРазделитель > 0 Тогда
				ТекущееИмяСвойства = Лев(ИмяСвойства, ГдеРазделитель-1);
				ОставшиесяИмена    = Прав(ИмяСвойства, СтрДлина(ИмяСвойства) - ГдеРазделитель);
			Иначе
				ТекущееИмяСвойства = ИмяСвойства;
				ОставшиесяИмена    = "";
			КонецЕсли;
			СвойствоХДТО = ОбъектХДТО.Свойства().Получить(ТекущееИмяСвойства);
			Если ТипЗнч(СвойствоХДТО) = ТипСвойствоXDTO Тогда
				// В некоторых случаях (например, при чтении http://*.livejournal.com/data/rss) возможно появление нескольких
				//  свойств. Например:
				//   <title>...</title>
				//   <media:title type="plain">...</media:title>
				// Поэтому, надо проверять, что свойство - не списковое. Если списковое, то брать значение первого элемента.
				Если СвойствоХДТО.ВерхняяГраница = -1 Тогда
					ТекущийСписок = ОбъектХДТО.ПолучитьСписок(ТекущееИмяСвойства);
					ТекущееЗначение = "";
					Если ТипЗнч(ТекущийСписок) = ТипСписокXDTO Тогда
						Если ТекущийСписок.Количество() > 0 Тогда
							ТекущееЗначение = ТекущийСписок.Получить(0);
						КонецЕсли;
					КонецЕсли;
				Иначе
					ТекущееЗначение = ОбъектХДТО.Получить(ТекущееИмяСвойства);
				КонецЕсли;
				// Если объект ХДТО пустой (<description></description>), то вместо "ОбъектXDTO" лучше сохранять "".
				Если ТипЗнч(ТекущееЗначение) = ТипОбъектXDTO
						И ТекущееЗначение.Свойства().Количество() = 0 Тогда
					ТекущееЗначение = "";
				КонецЕсли;
				Если ПустаяСтрока(ОставшиесяИмена) Тогда
					Результат = ТекущееЗначение;
				Иначе
					Результат = ПолучитьЗначениеХДТО(ОбъектХДТО.ПолучитьXDTO(ТекущееИмяСвойства), ОставшиесяИмена);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	// Если у тегов (особенно при нетипизированном чтении) будут атрибуты, то содержимое тегов.
	//  нельзя будет просто прочитать - вернется ОбъектХДТО.
	// Обработать эту ситуацию.
	Если ТипЗнч(Результат) = ТипОбъектXDTO Тогда
		Если Результат.Последовательность().Количество() > 0 Тогда
			Результат = Результат.Последовательность().ПолучитьТекст(0);
		Иначе
			Результат = "";
		КонецЕсли;
	КонецЕсли;

	Возврат Результат;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ЗагрузкаНовостей

// Непосредственно парсинг файла новостей, заполнение категорий,
// заполнение дополнительных действий 1С (обработчиков гиперссылок).
//
Процедура ПарсингХМЛФайлаНовостей(ОбъектХДТО, ФорматНовостей, ЛентаНовостей, Прокси, КонтекстВыполнения = Неопределено)

	НаименованиеПроцедурыФункции = "Обработка.УправлениеНовостями.ПарсингХМЛФайлаНовостей"; // Идентификатор.
	ЗаписыватьВЖурналРегистрации = Ложь;
	Если КонтекстВыполнения = Неопределено Тогда
		КонтекстВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
		ЗаписыватьВЖурналРегистрации = Истина;
	КонецЕсли;
	КодРезультата = 0;
	ОписаниеРезультата = "";
	КонтекстВыполненияВложенный = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Контекст "по шагам".
	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		НаименованиеПроцедурыФункции, // Идентификатор.
		НСтр("ru='Парсинг файла новостей'"));

		ТипОбъектXDTO   = Тип("ОбъектXDTO");
		ТипСвойствоXDTO = Тип("СвойствоXDTO");
		ТипWSПрокси     = Тип("WSПрокси");

		РазрешенаРаботаСНовостямиЧерезИнтернет = ОбработкаНовостейВызовСервера.РазрешенаРаботаСНовостямиЧерезИнтернет();

		// Получить дату последнего обновления канала.
		// Если в полученном файле дата обновления такая же (updated для Atom, lastBuildDate для RSS), то не загружать его вообще.
		Запись = РегистрыСведений.ДатыЗагрузкиПоследнихНовостей.СоздатьМенеджерЗаписи();
		Запись.ЛентаНовостей = ЛентаНовостей;
		Запись.Прочитать(); // Только чтение, без последующей записи.
		Если Запись.Выбран() Тогда
			ДатаЗагрузкиПоследнихНовостейНаКлиенте = Запись.ДатаЗагрузкиПоследнихНовостей;
		Иначе
			ДатаЗагрузкиПоследнихНовостейНаКлиенте = '00010101';
		КонецЕсли;

		НеобходимоОбработатьФайл = Истина;

		Если НРег(ФорматНовостей) = "rss" Тогда

			ОписаниеРезультата = ОписаниеРезультата
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Парсинг файла новостей для ленты новостей %1
						|Определен формат ленты новостей: %2'"),
					ЛентаНовостей,
					НРег(ФорматНовостей))
				+ Символы.ПС;

			Если ТипЗнч(ОбъектХДТО.Свойства().Получить("channel")) = ТипСвойствоXDTO
					И ТипЗнч(ОбъектХДТО.Получить("channel")) = ТипОбъектXDTO Тогда

				// {Обновление стандартных списков (RSS).Начало
				// Загрузить дополнительные параметры - даты обновления стандартных справочников и т.п.
				СвойствоБлокОбновленийСписков = ОбъектХДТО.channel.Свойства().Получить("lastUpdatesList");
				Если ТипЗнч(СвойствоБлокОбновленийСписков) = ТипСвойствоXDTO Тогда
					ОбъектБлокОбновленийСписков = ОбъектХДТО.channel.Получить(СвойствоБлокОбновленийСписков);
					Если ТипЗнч(ОбъектБлокОбновленийСписков) = ТипОбъектXDTO Тогда
						// Загрузить даты последних обновлений в регистр сведений.
						СвойствоОбновленияСписков = ОбъектБлокОбновленийСписков.Свойства().Получить("updatesItem");
						Если ТипЗнч(СвойствоОбновленияСписков) = ТипСвойствоXDTO Тогда
							// Это может быть как одно значение, так и список.
							Если (СвойствоОбновленияСписков.ВерхняяГраница = -1 ИЛИ СвойствоОбновленияСписков.ВерхняяГраница > 1) Тогда // Список
								СписокОбновлений = ОбъектБлокОбновленийСписков.ПолучитьСписок(СвойствоОбновленияСписков);
								Для каждого ТекущееОбновление Из СписокОбновлений Цикл
									ЗагрузитьДатуПоследнегоОбновленияСтандартногоСписка(ТекущееОбновление, КонтекстВыполненияВложенный);
								КонецЦикла;
							Иначе // Одно значение
								ТекущееОбновление = ОбъектБлокОбновленийСписков.Получить(СвойствоОбновленияСписков);
								ЗагрузитьДатуПоследнегоОбновленияСтандартногоСписка(ТекущееОбновление, КонтекстВыполненияВложенный);
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

				// Если даты изменились - сразу запустить обработку по обновлению данных с серверов 1С.
				// Обновление справочников необходимо сделать ДО загрузки новостей для корректной работы парсера категорий.
				Если РазрешенаРаботаСНовостямиЧерезИнтернет = Истина Тогда
					ТаблицаОбновляемыхДанных = ПолучитьСтандартныеСпискиТребующиеОбновления();
					Для каждого ТекущиеОбновляемыеДанные Из ТаблицаОбновляемыхДанных Цикл
						Если ТипЗнч(Прокси) <> ТипWSПрокси Тогда
							// Один раз проинициализировав переменную, будем ее использовать для парсинга всех остальных файлов.
							Прокси = ПодключитьсяКВебСервисуОбновленияСтандартныхСписков(КонтекстВыполненияВложенный);
						КонецЕсли;
						Результат = ОбновитьСтандартныйСписокССервера(
							ТекущиеОбновляемыеДанные.Список,
							ТекущиеОбновляемыеДанные.ТекущаяВерсияНаКлиенте,
							Прокси,
							КонтекстВыполненияВложенный);
					КонецЦикла;
				Иначе
					ОписаниеРезультата = ОписаниеРезультата
						+ НСтр("ru='Обработка.УправлениеНовостями.ПарсингХМЛФайлаНовостей(rss): Отключена работа с новостями через интернет. Обновление классификаторов не выполнялось.'")
						+ Символы.ПС;
				КонецЕсли;
				// Обновление стандартных списков (RSS).Конец}

				// В файле новостей может передаваться ДатаПоследнегоОбновления (lastBuildDate для rss, updated для atom atom1C),
				//  которая сохраняется в регистре сведений ДатыЗагрузкиПоследнихНовостей.ДатаЗагрузкиПоследнихНовостей.
				// Если файл повторно пришел с такой же датой ДатаПоследнегоОбновления (т.е. нет новых новостей), то обрабатывать файл не нужно.
				// Возможны ситуации, когда в случае системных ошибок приходят незначимые новости о системных ошибках.
				//  В таком случае в регистр сведений писать ничего не нужно.
				Если ОбъектХДТО.Свойства().Получить("channel") <> Неопределено Тогда
					Если ОбъектХДТО.channel.Свойства().Получить("lastBuildDate") <> Неопределено Тогда
						// Если дата обновления канала такая же как и была, то не обновлять канал вообще.
						ДатаЗагрузкиПоследнихНовостейВФайле = ПреобразоватьВДату(ОбъектХДТО.channel.lastBuildDate);
						Если ДатаЗагрузкиПоследнихНовостейНаКлиенте >= ДатаЗагрузкиПоследнихНовостейВФайле Тогда
							// Соединение с сервером новостей прошло, данные получены, значит можно сбросить счетчик неудачных попыток соединения.
							Запись = РегистрыСведений.ДатыЗагрузкиПоследнихНовостей.СоздатьМенеджерЗаписи();
							Запись.ЛентаНовостей                        = ЛентаНовостей;
							Запись.Прочитать(); // Запись будет ниже.
							Запись.ЛентаНовостей                        = ЛентаНовостей;
							Запись.ДатаЗагрузкиПоследнихНовостей        = ДатаЗагрузкиПоследнихНовостейНаКлиенте;
							Запись.ДатаПоследнейПопыткиЗагрузкиНовостей = ТекущаяУниверсальнаяДата();
							Запись.КоличествоНеудачПриЗагрузкеНовостей  = 0;
							Запись.Записать(Истина);
							НеобходимоОбработатьФайл = Ложь;
							ОписаниеРезультата = ОписаниеРезультата
								+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru='ДатаЗагрузкиПоследнихНовостейНаКлиенте: %1
										|ДатаЗагрузкиПоследнихНовостейВФайле: %2
										|Новости в программе не требуют обновления.'"),
									ДатаЗагрузкиПоследнихНовостейНаКлиенте,
									ДатаЗагрузкиПоследнихНовостейВФайле)
								+ Символы.ПС;
						КонецЕсли;
					Иначе
						ДатаЗагрузкиПоследнихНовостейВФайле = '00010101';
						ОписаниеРезультата = ОписаниеРезультата
							+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='В файле полученном для ленты новостей %1 отсутствует поле channel.lastBuildDate. Все новости будут прочитаны и загружены, но это займет больше времени.'"),
								ЛентаНовостей)
							+ Символы.ПС;
					КонецЕсли;
				Иначе
					ОписаниеРезультата = ОписаниеРезультата
						+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='В файле полученном для ленты новостей %1 отсутствует обязательное поле channel. Файл не был обработан.'"),
							ЛентаНовостей)
						+ Символы.ПС;
					НеобходимоОбработатьФайл = Ложь;
				КонецЕсли;

				Если НеобходимоОбработатьФайл = Истина Тогда

					// Цикл по парсингу каждой новости.
					ЕстьЗначимыеНовости = Ложь;
					ДатаСамойПоследнейНовости = '00010101';
					СвойствоНовость = ОбъектХДТО.channel.Свойства().Получить("item");
					Если СвойствоНовость <> Неопределено Тогда
						Если ТипЗнч(СвойствоНовость) = ТипСвойствоXDTO
								И (СвойствоНовость.ВерхняяГраница = -1 ИЛИ СвойствоНовость.ВерхняяГраница > 1) Тогда // Несколько новостей
							СписокНовостей = ОбъектХДТО.channel.ПолучитьСписок(СвойствоНовость);
							Для каждого лкТекущаяНовость Из СписокНовостей Цикл
								лкЭтоЗначимаяНовость = Ложь;
								ЗагрузитьНовость(ФорматНовостей, лкТекущаяНовость, ЛентаНовостей, ДатаСамойПоследнейНовости, лкЭтоЗначимаяНовость, КонтекстВыполненияВложенный);
								ЕстьЗначимыеНовости = ЕстьЗначимыеНовости ИЛИ лкЭтоЗначимаяНовость;
							КонецЦикла;
						Иначе // Одна новость
							лкТекущаяНовость = ОбъектХДТО.channel.Получить(СвойствоНовость);
							лкЭтоЗначимаяНовость = Ложь;
							ЗагрузитьНовость(ФорматНовостей, лкТекущаяНовость, ЛентаНовостей, ДатаСамойПоследнейНовости, лкЭтоЗначимаяНовость, КонтекстВыполненияВложенный);
							ЕстьЗначимыеНовости = ЕстьЗначимыеНовости ИЛИ лкЭтоЗначимаяНовость;
						КонецЕсли;
					КонецЕсли;

					// Запись в регистр сведений идет в конце, чтобы (на случай сбоев) новости опять загрузились со старой даты.
					// В файле могли не передать параметр lastBuildDate (rss) или updated (atom),
					//  поэтому сравнить также с максимальным значением по каждой новости.
					// Все даты должны быть в часовом поясе +0.
					Если ДатаЗагрузкиПоследнихНовостейВФайле = '00010101' Тогда
						ДатаЗагрузкиПоследнихНовостейВФайле = ДатаСамойПоследнейНовости;
					КонецЕсли;
					// Если не было значимых новостей (возможно, были только новости о системных ошибках),
					//  то не надо обновлять дату последней загрузки, и не надо сбрасывать счетчик неудачных загрузок.
					Если ЕстьЗначимыеНовости = Истина Тогда
						Если ДатаЗагрузкиПоследнихНовостейНаКлиенте < ДатаЗагрузкиПоследнихНовостейВФайле Тогда
							// Соединение с сервером новостей прошло, данные получены, значит можно сбросить счетчик неудачных попыток соединения.
							ДатаПоследнейПопыткиЗагрузкиНовостей = ТекущаяУниверсальнаяДата();
							Запись = РегистрыСведений.ДатыЗагрузкиПоследнихНовостей.СоздатьМенеджерЗаписи();
							Запись.ЛентаНовостей                        = ЛентаНовостей;
							Запись.Прочитать(); // Запись будет ниже.
							Запись.ЛентаНовостей                        = ЛентаНовостей;
							Запись.ДатаЗагрузкиПоследнихНовостей        = ДатаЗагрузкиПоследнихНовостейВФайле;
							Запись.ДатаПоследнейПопыткиЗагрузкиНовостей = ДатаПоследнейПопыткиЗагрузкиНовостей;
							Запись.КоличествоНеудачПриЗагрузкеНовостей  = 0;
							Запись.Записать(Истина);
							ОписаниеРезультата = ОписаниеРезультата
								+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru='ДатаЗагрузкиПоследнихНовостейВФайле: %1
										|ДатаПоследнейПопыткиЗагрузкиНовостей: %2'"),
									ДатаЗагрузкиПоследнихНовостейВФайле,
									ДатаПоследнейПопыткиЗагрузкиНовостей)
								+ Символы.ПС;
						КонецЕсли;
					КонецЕсли;

				КонецЕсли;

			КонецЕсли;

		ИначеЕсли НРег(ФорматНовостей) = "feed" Тогда

			ОписаниеРезультата = ОписаниеРезультата
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Парсинг файла новостей для ленты новостей %1
						|Определен формат ленты новостей: %2'"),
					ЛентаНовостей,
					НРег(ФорматНовостей))
				+ Символы.ПС;

			// {Обновление стандартных списков (Atom).Начало
			// Загрузить дополнительные параметры - даты обновления стандартных справочников и т.п.
			СвойствоБлокОбновленийСписков = ОбъектХДТО.Свойства().Получить("lastUpdatesList");
			Если ТипЗнч(СвойствоБлокОбновленийСписков) = ТипСвойствоXDTO Тогда
				ОбъектБлокОбновленийСписков = ОбъектХДТО.Получить(СвойствоБлокОбновленийСписков);
				Если ТипЗнч(ОбъектБлокОбновленийСписков) = ТипОбъектXDTO Тогда
					// Загрузить даты последних обновлений в регистр сведений.
					СвойствоОбновленияСписков = ОбъектБлокОбновленийСписков.Свойства().Получить("updatesItem");
					Если ТипЗнч(СвойствоОбновленияСписков) = ТипСвойствоXDTO Тогда
						// Это может быть как одно значение, так и список.
						Если (СвойствоОбновленияСписков.ВерхняяГраница = -1 ИЛИ СвойствоОбновленияСписков.ВерхняяГраница > 1) Тогда // Список
							СписокОбновлений = ОбъектБлокОбновленийСписков.ПолучитьСписок(СвойствоОбновленияСписков);
							Для каждого ТекущееОбновление Из СписокОбновлений Цикл
								ЗагрузитьДатуПоследнегоОбновленияСтандартногоСписка(ТекущееОбновление, КонтекстВыполненияВложенный);
							КонецЦикла;
						Иначе // Одно значение
							ТекущееОбновление = ОбъектБлокОбновленийСписков.Получить(СвойствоОбновленияСписков);
							ЗагрузитьДатуПоследнегоОбновленияСтандартногоСписка(ТекущееОбновление, КонтекстВыполненияВложенный);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;

			// Если даты изменились - сразу запустить обработку по обновлению данных с серверов 1С.
			// Обновление справочников необходимо сделать ДО загрузки новостей для корректной работы парсера категорий.
			Если РазрешенаРаботаСНовостямиЧерезИнтернет = Истина Тогда
				ТаблицаОбновляемыхДанных = ПолучитьСтандартныеСпискиТребующиеОбновления();
				Для каждого ТекущиеОбновляемыеДанные Из ТаблицаОбновляемыхДанных Цикл
					Если ТипЗнч(Прокси) <> ТипWSПрокси Тогда
						// Один раз проинициализировав переменную, будем ее использовать для парсинга всех остальных файлов.
						Прокси = ПодключитьсяКВебСервисуОбновленияСтандартныхСписков(КонтекстВыполненияВложенный);
					КонецЕсли;
					Результат = ОбновитьСтандартныйСписокССервера(
						ТекущиеОбновляемыеДанные.Список,
						ТекущиеОбновляемыеДанные.ТекущаяВерсияНаКлиенте,
						Прокси,
						КонтекстВыполненияВложенный);
				КонецЦикла;
			Иначе
				ОписаниеРезультата = ОписаниеРезультата
					+ НСтр("ru='Обработка.УправлениеНовостями.ПарсингХМЛФайлаНовостей(atom): Отключена работа с новостями через интернет. Обновление классификаторов не выполнялось.'")
					+ Символы.ПС;
			КонецЕсли;
			// Обновление стандартных списков (Atom).Конец}

			// В файле новостей может передаваться ДатаПоследнегоОбновления (lastBuildDate для rss, updated для atom atom1C),
			//  которая сохраняется в регистре сведений ДатыЗагрузкиПоследнихНовостей.ДатаЗагрузкиПоследнихНовостей.
			// Если файл повторно пришел с такой же датой ДатаПоследнегоОбновления (т.е. нет новых новостей), то обрабатывать файл не нужно.
			// Возможны ситуации, когда в случае системных ошибок приходят незначимые новости о системных ошибках.
			//  В таком случае в регистр сведений писать ничего не нужно.
			Если ОбъектХДТО.Свойства().Получить("updated") <> Неопределено Тогда
				// Если дата обновления канала такая же как и была, то не обновлять канал вообще.
				ДатаЗагрузкиПоследнихНовостейВФайле = ПреобразоватьВДату(ОбъектХДТО.updated);
				Если ДатаЗагрузкиПоследнихНовостейНаКлиенте >= ДатаЗагрузкиПоследнихНовостейВФайле Тогда
					// Соединение с сервером новостей прошло, данные получены, значит можно сбросить счетчик неудачных попыток соединения.
					Запись = РегистрыСведений.ДатыЗагрузкиПоследнихНовостей.СоздатьМенеджерЗаписи();
					Запись.ЛентаНовостей                        = ЛентаНовостей;
					Запись.Прочитать(); // Запись будет ниже.
					Запись.ЛентаНовостей                        = ЛентаНовостей;
					Запись.ДатаЗагрузкиПоследнихНовостей        = ДатаЗагрузкиПоследнихНовостейНаКлиенте;
					Запись.ДатаПоследнейПопыткиЗагрузкиНовостей = ТекущаяУниверсальнаяДата();
					Запись.КоличествоНеудачПриЗагрузкеНовостей  = 0;
					Запись.Записать(Истина);
					НеобходимоОбработатьФайл = Ложь;
					ОписаниеРезультата = ОписаниеРезультата
						+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru='ДатаЗагрузкиПоследнихНовостейНаКлиенте: %1
								|ДатаЗагрузкиПоследнихНовостейВФайле: %2
								|Новости в программе не требуют обновления.'"),
							ДатаЗагрузкиПоследнихНовостейНаКлиенте,
							ДатаЗагрузкиПоследнихНовостейВФайле)
						+ Символы.ПС;
				КонецЕсли;
			Иначе // updated - обязательное поле, наверное формат некорректный
				ДатаЗагрузкиПоследнихНовостейВФайле = '00010101';
				ОписаниеРезультата = ОписаниеРезультата
					+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru='В файле полученном для ленты новостей %1 отсутствует поле feed.updated. Все новости будут прочитаны и загружены, но это займет больше времени.'"),
						ЛентаНовостей)
					+ Символы.ПС;
			КонецЕсли;

			Если НеобходимоОбработатьФайл = Истина Тогда

				// Цикл по парсингу каждой новости.
				ЕстьЗначимыеНовости = Ложь;
				ДатаСамойПоследнейНовости = '00010101';
				СвойствоНовость = ОбъектХДТО.Свойства().Получить("entry");
				Если СвойствоНовость <> Неопределено Тогда
					Если ТипЗнч(СвойствоНовость) = ТипСвойствоXDTO
							И (СвойствоНовость.ВерхняяГраница = -1 ИЛИ СвойствоНовость.ВерхняяГраница > 1) Тогда // Несколько новостей
						СписокНовостей = ОбъектХДТО.ПолучитьСписок(СвойствоНовость);
						Для каждого лкТекущаяНовость Из СписокНовостей Цикл
							лкЭтоЗначимаяНовость = Ложь;
							ЗагрузитьНовость(ФорматНовостей, лкТекущаяНовость, ЛентаНовостей, ДатаСамойПоследнейНовости, лкЭтоЗначимаяНовость, КонтекстВыполненияВложенный);
							ЕстьЗначимыеНовости = ЕстьЗначимыеНовости ИЛИ лкЭтоЗначимаяНовость;
						КонецЦикла;
					Иначе // Одна новость
						лкТекущаяНовость = ОбъектХДТО.Получить(СвойствоНовость);
						лкЭтоЗначимаяНовость = Ложь;
						ЗагрузитьНовость(ФорматНовостей, лкТекущаяНовость, ЛентаНовостей, ДатаСамойПоследнейНовости, лкЭтоЗначимаяНовость, КонтекстВыполненияВложенный);
						ЕстьЗначимыеНовости = ЕстьЗначимыеНовости ИЛИ лкЭтоЗначимаяНовость;
					КонецЕсли;
				КонецЕсли;

				// Запись в регистр сведений идет в конце, чтобы (на случай сбоев) новости опять загрузились со старой даты.
				// В файле могли не передать параметр lastBuildDate (rss) или updated (atom),
				//  поэтому сравнить также с максимальным значением по каждой новости.
				// Все даты должны быть в часовом поясе +0.
				Если ДатаЗагрузкиПоследнихНовостейВФайле = '00010101' Тогда
					ДатаЗагрузкиПоследнихНовостейВФайле = ДатаСамойПоследнейНовости;
				КонецЕсли;
				// Если не было значимых новостей (возможно, были только новости о системных ошибках),
				//  то не надо обновлять дату последней загрузки, и не надо сбрасывать счетчик неудачных загрузок.
				Если ЕстьЗначимыеНовости = Истина Тогда
					Если ДатаЗагрузкиПоследнихНовостейНаКлиенте < ДатаЗагрузкиПоследнихНовостейВФайле Тогда
						// Соединение с сервером новостей прошло, данные получены, значит можно сбросить счетчик неудачных попыток соединения.
						ДатаПоследнейПопыткиЗагрузкиНовостей = ТекущаяУниверсальнаяДата();
						Запись = РегистрыСведений.ДатыЗагрузкиПоследнихНовостей.СоздатьМенеджерЗаписи();
						Запись.ЛентаНовостей                        = ЛентаНовостей;
						Запись.Прочитать(); // Запись будет ниже.
						Запись.ЛентаНовостей                        = ЛентаНовостей;
						Запись.ДатаЗагрузкиПоследнихНовостей        = ДатаЗагрузкиПоследнихНовостейВФайле;
						Запись.ДатаПоследнейПопыткиЗагрузкиНовостей = ДатаПоследнейПопыткиЗагрузкиНовостей;
						Запись.КоличествоНеудачПриЗагрузкеНовостей  = 0;
						Запись.Записать(Истина);
						ОписаниеРезультата = ОписаниеРезультата
							+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("ru='ДатаЗагрузкиПоследнихНовостейВФайле: %1
									|ДатаПоследнейПопыткиЗагрузкиНовостей: %2'"),
								ДатаЗагрузкиПоследнихНовостейВФайле,
								ДатаПоследнейПопыткиЗагрузкиНовостей)
							+ Символы.ПС;
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;

		Иначе
			ОписаниеРезультата = ОписаниеРезультата
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Новости не загружены, т.к. передан необрабатываемый формат ленты новостей: %1'"),
					НРег(ФорматНовостей))
				+ Символы.ПС;
		КонецЕсли; // ИначеЕсли НРег(ФорматНовостей) = ... Тогда

	ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата, // Много действий, всегда установлено в 0, надо читать данные по каждому шагу.
		ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	Если ЗаписыватьВЖурналРегистрации = Истина Тогда

		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
			НСтр("ru='Новости. Загрузка новостей. Парсинг файлов новостей. Парсинг файла новостей'"), // ИдентификаторШага
			?(КодРезультата > 0,
				УровеньЖурналаРегистрации.Ошибка,
				УровеньЖурналаРегистрации.Информация), // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
			ОбработкаНовостей.КомментарийДляЖурналаРегистрации(
				НаименованиеПроцедурыФункции,
				ШагВыполнения,
				КонтекстВыполнения,
				"Простой"), // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

КонецПроцедуры

// Заполнение регистра сведений необработанных категорий для новостей.
// При загрузке новостей категоризация не будет сразу заполняться,
//  т.к. может быть ситуация, что строка "География=Усть-Илимск" (category),
//  или "География", "Усть-Илимск", "eq" (category1C) не обработается из-за того,
//  что город "Усть-Илимск" еще не загружен с серверов (не обновились стандартные списки).
// Поэтому категории вначале будут загружаться в "сыром" (необработанном) виде, в виде строк в регистр "КатегорииНовостейПростыеНеобработанные",
// а затем отдельной обработкой преобразовываться и перемещаться в регистр сведений "КатегорииНовостейПростые" или "КатегорииНовостейИнтервалыВерсий".
//
// Параметры:
//  ОбъектНовость     - СправочникОбъект.Новости;
//  КатегорияЗначение - Строка - представление категоризации вида Категория=Значение.
//
Процедура ДобавитьНеобработанноеЗначениеКатегорииДляНовости_category(ОбъектНовость, КатегорияИЗначение)

	// Если это управляющая категория, то не добавлять ее в список категорий.
	// Если на одну новость назначено несколько управляющих категорий, то добавится последняя категория.
	Если ВРег(КатегорияИЗначение) = ВРег("Важность=Очень важная") Тогда
		ОбъектНовость.Важность = 1; // Перезапишет ОбъектНовость.Важность, если было установлено ранее из тега priority.
	ИначеЕсли ВРег(КатегорияИЗначение) = ВРег("Важность=Важная") Тогда
		ОбъектНовость.Важность = 2; // Перезапишет ОбъектНовость.Важность, если было установлено ранее из тега priority.
	Иначе
		// Разделить категорию и значение по знаку "=".
		ГдеРазделитель = СтрНайти(КатегорияИЗначение, "=");
		Если ГдеРазделитель > 0 Тогда
			КатегорияНовостейСтрока         = Лев(КатегорияИЗначение, ГдеРазделитель - 1);
			ЗначениеКатегорииНовостейСтрока = Прав(КатегорияИЗначение, СтрДлина(КатегорияИЗначение) - ГдеРазделитель);

			Запись = РегистрыСведений.КатегорииНовостейПростыеНеобработанные.СоздатьМенеджерЗаписи();
			Запись.КатегорияНовостейСтрока         = КатегорияНовостейСтрока;
			Запись.ЗначениеКатегорииНовостейСтрока = ЗначениеКатегорииНовостейСтрока;
			Запись.ЛентаНовостей                   = ОбъектНовость.ЛентаНовостей;
			Запись.УИННовости                      = ОбъектНовость.УИННовости;
			Запись.УсловиеОтбора                   = "eq"; // всегда
			Запись.Записать(Истина);
		Иначе
			// Могут передавать Категория / значение не с помощью "=", а через двухсимвольное "eq" - обработать и этот вариант.
			ГдеРазделитель = СтрНайти(КатегорияИЗначение, " eq ");
			Если ГдеРазделитель > 0 Тогда
				КатегорияНовостейСтрока         = Лев(КатегорияИЗначение, ГдеРазделитель - 1);
				ЗначениеКатегорииНовостейСтрока = Прав(КатегорияИЗначение, СтрДлина(КатегорияИЗначение) - ГдеРазделитель - 3);

				Запись = РегистрыСведений.КатегорииНовостейПростыеНеобработанные.СоздатьМенеджерЗаписи();
				Запись.КатегорияНовостейСтрока         = КатегорияНовостейСтрока;
				Запись.ЗначениеКатегорииНовостейСтрока = ЗначениеКатегорииНовостейСтрока;
				Запись.ЛентаНовостей                   = ОбъектНовость.ЛентаНовостей;
				Запись.УИННовости                      = ОбъектНовость.УИННовости;
				Запись.УсловиеОтбора                   = "eq"; // всегда
				Запись.Записать(Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Загрузить одну новость.
//
// Параметры:
//  ФорматНовостей            - Строка - формат новостей (rss, feed (для atom и atom1C));
//  НовостьХДТО               - ОбъектХДТО - полученная новость;
//  ЛентаНовостей             - СправочникСсылка.ЛентаНовостей - лента новостей, для которой происходит загрузка новости;
//  РезультатЗагрузкиНовостей - Строка - сюда будет добавляться информация о загрузке этой новости;
//  ДатаСамойПоследнейНовости - Дата - дата самой последней новости;
//                              Если дата обрабатываемой новости выше, то заменить значение этого параметра.
//                              Параметр не изменяется для новости о системной ошибке;
//  ЭтоЗначимаяНовость        - Булево - сюда будет возвращено, значимая ли это новость (Истина)
//                                или вспомогательная новость о системной ошибке (Ложь);
//  КонтекстВыполнения        - Структура, Неопределено - структура контекста выполнения.
//
Процедура ЗагрузитьНовость(
			ФорматНовостей,
			НовостьХДТО,
			ЛентаНовостей,
			ДатаСамойПоследнейНовости,
			ЭтоЗначимаяНовость,
			КонтекстВыполнения = Неопределено)

	Перем ОбъектНовость, ЗаписыватьНовость;

	НаименованиеПроцедурыФункции = "Обработка.УправлениеНовостями.ЗагрузитьНовость"; // Идентификатор.
	ЗаписыватьВЖурналРегистрации = Ложь;
	Если КонтекстВыполнения = Неопределено Тогда
		КонтекстВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
		ЗаписыватьВЖурналРегистрации = Истина;
	КонецЕсли;
	КодРезультата = 0;
	ОписаниеРезультата = "";
	КонтекстВыполненияВложенный = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Контекст "по шагам".
	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		НаименованиеПроцедурыФункции, // Идентификатор.
		НСтр("ru='Загрузка новости'"));

		ТипСтрока       = Тип("Строка");
		ТипОбъектXDTO   = Тип("ОбъектXDTO");
		ТипСвойствоXDTO = Тип("СвойствоXDTO");
		ТипСписокXDTO   = Тип("СписокXDTO");

		ДатаПубликацииИБ          = '00010101'; // " (в базе было %ДатаПубликацииИБ%)", " (в базе не было)".
		ЗначениеПометкаУдаленияИБ = Ложь; // " (в базе было %ЗначениеПометкаУдаленияИБ%)", " (в базе не было)".

		РезультатЗагрузкиНовости = "%ФорматНовостей%; %УИННовости%; %ЗаголовокНовости%; Дата публикации %ДатаПубликации%%ДатаПубликацииИБ%; ПометкаУдаления = %ЗначениеПометкаУдаления%%ЗначениеПометкаУдаленияИБ%; %ЗаписыватьНовость%; %СуществуетВБазе%; УИН в ИБ [%УИН_ИБ%]; Навигационная ссылка [%НавигационнаяСсылка%]";

		Если НРег(ФорматНовостей) = "rss" Тогда

			// Если новость существует и ее дата публикации не поменялась, то не записывать ее.
			ДатаПубликации   = ПреобразоватьВДату(СокрЛП(ПолучитьЗначениеХДТО(НовостьХДТО, "pubDate")));
			УИННовости       = СокрЛП(ПолучитьЗначениеХДТО(НовостьХДТО, "guid"));
			ЗаголовокНовости = СокрЛП(ПолучитьЗначениеХДТО(НовостьХДТО, "title"));
			Если ПустаяСтрока(УИННовости) Тогда
				УИННовости = Формат(ДатаПубликации, "ДФ=yyyyMMddHHmmss");
			КонецЕсли;
			ЗначениеПометкаУдаления = ПолучитьЗначениеХДТО(НовостьХДТО, "deletionMark");
			Если ВРег(ЗначениеПометкаУдаления) = ВРег("true") Тогда
				ЗначениеПометкаУдаления = Истина;
			ИначеЕсли ВРег(ЗначениеПометкаУдаления) = ВРег("false") Тогда
				ЗначениеПометкаУдаления = Ложь;
			Иначе
				ЗначениеПометкаУдаления = ?(ЗначениеПометкаУдаления = Неопределено, Ложь, ЗначениеПометкаУдаления);
			КонецЕсли;

			// Если пришла новость о системной ошибке, то не изменять ДатаСамойПоследнейНовости,
			//  т.к. эта новость - не значимая и не должна влиять на даты загрузки значимых новостей.
			Если (СокрЛП(ВРег(УИННовости)) = ВРег("313f4928-a71c-4cef-96ee-a4b6106c1275"))
					ИЛИ (СокрЛП(ВРег(УИННовости)) = ВРег("Ошибка")) Тогда
				// ДатаСамойПоследнейНовости - должна остаться как есть.
				ЭтоЗначимаяНовость = Ложь;
			Иначе
				ДатаСамойПоследнейНовости = Макс(ДатаСамойПоследнейНовости, ДатаПубликации);
				ЭтоЗначимаяНовость = Истина;
			КонецЕсли;

			// Оптимизация: не перезаполнять новость, если она существует и ее ДатаПубликации не увеличилась.
			// Исключение:
			//  если новость была помечена на удаление, то перезагрузить ее;
			//  Такой сценарий возможен, если какое-то время новости получались без ввода логина/пароля
			//   для доступа к ВебИТС (т.е. могли приходить с урезанными текстами).
			//   Тогда можно пометить такие "сокращенные" новости на удаление,
			//   сбросить дату последнего получения новостей и загрузить заново.
			ЗаписыватьНовость = Истина;
			СтруктураНовости = ОбработкаНовостей.ПолучитьСсылкуНаНовость(ЛентаНовостей, УИННовости);
			Если СтруктураНовости.Ссылка.Пустая() Тогда
				Если ЗначениеПометкаУдаления = Истина Тогда
					// Мы эту новость еще не загружали, и она уже помечена на удаление (отменена публикация), значит не надо ее загружать вообще.
					ЗаписыватьНовость = Ложь;
				Иначе
					ОбъектНовость = ОбработкаНовостей.ПолучитьОбъектНовости(
						СтруктураНовости.Ссылка,
						ЛентаНовостей,
						УИННовости,
						ДатаПубликации);
				КонецЕсли;
			Иначе
				ДатаПубликацииИБ          = СтруктураНовости.ДатаПубликации;
				ЗначениеПометкаУдаленияИБ = СтруктураНовости.ПометкаУдаления;
				Если (СтруктураНовости.ДатаПубликации < ДатаПубликации)
						ИЛИ (СтруктураНовости.ПометкаУдаления <> ЗначениеПометкаУдаления) Тогда
					ОбъектНовость = ОбработкаНовостей.ПолучитьОбъектНовости(
						СтруктураНовости.Ссылка,
						ЛентаНовостей,
						УИННовости,
						ДатаПубликации,
						Истина); // Очищать табличные части
				Иначе
					ЗаписыватьНовость = Ложь;
				КонецЕсли;
			КонецЕсли;

			Если ЗаписыватьНовость = Истина Тогда

				// Для нетипизированного чтения.
				ОбъектНовость.Наименование                       = ЗаголовокНовости;
				ОбъектНовость.СсылкаНаПолныйТекстНовости         = СокрЛП(ПолучитьЗначениеХДТО(НовостьХДТО, "link"));
				ОбъектНовость.ТекстНовости                       = СокрЛП(ПолучитьЗначениеХДТО(НовостьХДТО, "description"));
				ОбъектНовость.ДатаПубликации                     = ДатаПубликации;
				ОбъектНовость.УИННовости                         = УИННовости;
				ОбъектНовость.Важность                           = ПолучитьЗначениеХДТО(НовостьХДТО, "priority"); // Неопределено = 0
				ОбъектНовость.ДатаСбросаВажности                 = ПреобразоватьВДату(ПолучитьЗначениеХДТО(НовостьХДТО, "priorityExpired"));
				ОбъектНовость.ПриОткрытииСразуПереходитьПоСсылке = ПолучитьЗначениеХДТО(НовостьХДТО, "onlyLink");
				ОбъектНовость.СкрыватьВОбщемСпискеНовостей       = ПолучитьЗначениеХДТО(НовостьХДТО, "hidden");
				ЗначениеАвтоСбросНапоминанияПриПрочтении         = ПолучитьЗначениеХДТО(НовостьХДТО, "autoMarkAsRead");
				ОбъектНовость.АвтоСбросНапоминанияПриПрочтении   = ?(ЗначениеАвтоСбросНапоминанияПриПрочтении = Неопределено, Ложь, ЗначениеАвтоСбросНапоминанияПриПрочтении);
				ОбъектНовость.ПометкаУдаления                    = ЗначениеПометкаУдаления;

				лкТекстНовости = ОбъектНовость.ТекстНовости;
				лкТекстНовости = ОбработкаНовостейКлиентСервер.ЗаменитьСпециальныеСимволыВHTML(лкТекстНовости);
				ОбъектНовость.ТекстНовости = лкТекстНовости;

				лкДатаЗавершения = ПолучитьЗначениеХДТО(НовостьХДТО, "dueDate");
				Если лкДатаЗавершения = Неопределено Тогда
					ОбъектНовость.ДатаЗавершения = '00010101';
				Иначе
					ОбъектНовость.ДатаЗавершения = ПреобразоватьВДату(лкДатаЗавершения);
				КонецЕсли;

				Если ПустаяСтрока(УИННовости) Тогда
					Если НЕ ПустаяСтрока(ОбъектНовость.Ссылка) Тогда
						ОбъектНовость.УИННовости = ОбъектНовость.Ссылка;
					КонецЕсли;
				КонецЕсли;

				// Категории могут передаваться как через стандартный "category", так и через специфичный для 1С "category1C" или "categoryVersions1C".
				ОбработкаНовостей.ОчиститьКатегорииНовости(ОбъектНовость);
				// Обработка "category".
				СвойствоКатегория = НовостьХДТО.Свойства().Получить("category"); // простой тип
				Если ТипЗнч(СвойствоКатегория) = ТипСвойствоXDTO Тогда
					Если (СвойствоКатегория.ВерхняяГраница = -1
							ИЛИ СвойствоКатегория.ВерхняяГраница > 1) Тогда // Список значений
						СписокКатегорий = НовостьХДТО.ПолучитьСписок(СвойствоКатегория);
						Если ТипЗнч(СписокКатегорий) = ТипСписокXDTO Тогда
							Для каждого ТекущаяКатегория Из СписокКатегорий Цикл
								КатегорияЗначение = ТекущаяКатегория;
								ДобавитьНеобработанноеЗначениеКатегорииДляНовости_category(ОбъектНовость, КатегорияЗначение);
							КонецЦикла;
						КонецЕсли;
					Иначе // Одно значение
						СписокКатегорий = НовостьХДТО.Получить(СвойствоКатегория);
						Если ТипЗнч(СписокКатегорий) = ТипСтрока Тогда // Когда нет атрибутов, то значение свойства = Строка, а не ОбъектXDTO.
							КатегорияЗначение = СписокКатегорий;
							ДобавитьНеобработанноеЗначениеКатегорииДляНовости_category(ОбъектНовость, КатегорияЗначение);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

				ЗагрузитьБлокДанныхКатегорий1С(НовостьХДТО, ОбъектНовость);
				ЗагрузитьБлокДанныхКатегорийИнтерваловВерсий1С(НовостьХДТО, ОбъектНовость);
				ЗагрузитьБлокДанныхДействий1С(НовостьХДТО, ОбъектНовость);
				ЗагрузитьБлокДанныхПривязокКМетаданным1С(НовостьХДТО, ОбъектНовость);
				ЗагрузитьБлокДанныхБинарныеДанные(НовостьХДТО, ОбъектНовость);

				// Дополнительные проверки / обработки полей новости:
				// 1. В наименовании не должно быть пробелов.
				ОбъектНовость.Наименование = СокрЛП(ОбъектНовость.Наименование);
				// 2. Должен быть заполнен подзаголовок.
				Если ПустаяСтрока(ОбъектНовость.Подзаголовок) Тогда
					ОбъектНовость.Подзаголовок = ОбъектНовость.Наименование;
				КонецЕсли;
				// 3. Дата сброса важности должна быть установлена для очень важных новостей.
				Если ОбъектНовость.Важность = 1 Тогда // Очень важная
					Если (ОбъектНовость.ДатаСбросаВажности = '00010101') Тогда
						ОбъектНовость.ДатаСбросаВажности = ТекущаяУниверсальнаяДата() + 7*24*60*60; // + 1 неделя
					КонецЕсли;
				КонецЕсли;

				ИдентификаторШага1 = "ЗаписьНовости"; // Идентификатор.
				КодРезультатаВложенный = 0;
				ОписаниеРезультатаВложенный = "";
				ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
					КонтекстВыполненияВложенный,
					НаименованиеПроцедурыФункции
						+ "." + ИдентификаторШага1, // Идентификатор.
					НаименованиеПроцедурыФункции
						+ "." + ИдентификаторШага1);

					Попытка

						ОписаниеРезультатаВложенный = ОписаниеРезультатаВложенный
							+ НСтр("ru='Начало попытки записи новости'")
							+ Символы.ПС;

						ОбработкаНовостейВызовСервера.ДополнительноОбработатьНовостьПослеПолученияПередЗаписью(ОбъектНовость, НовостьХДТО);
						ОбъектНовость.ДополнительныеСвойства.Вставить("ЭтоЗагрузкаНовостей", Истина);
						ОбъектНовость.ДополнительныеСвойства.Вставить("СброситьПользовательскиеСвойстваПрочтенностиНовости", Истина);
						ОбъектНовость.Записать();
						ОбработкаНовостейВызовСервера.ДополнительноОбработатьНовостьПослеПолученияПослеЗаписи(ОбъектНовость.Ссылка);

						ОписаниеРезультатаВложенный = ОписаниеРезультатаВложенный
							+ НСтр("ru='Успешная попытка записи новости'")
							+ Символы.ПС;

					Исключение

						ТекстСообщения = НСтр("ru='Неудачная попытка записи новости по причине:
							|%ИнформацияОбОшибке%'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнформацияОбОшибке%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						ОписаниеРезультата = ОписаниеРезультата
							+ ТекстСообщения
							+ Символы.ПС;

						// Пропустить новость.

					КонецПопытки;

				ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
					КонтекстВыполненияВложенный,
					КодРезультатаВложенный,
					ОписаниеРезультатаВложенный,
					Неопределено);

			Иначе

				ОписаниеРезультата = ОписаниеРезультата
					+ НСтр("ru='Новость пропущена'")
					+ Символы.ПС;

			КонецЕсли;

			РезультатЗагрузкиНовости = СтрЗаменить(РезультатЗагрузкиНовости, "%ФорматНовостей%", ФорматНовостей);
			РезультатЗагрузкиНовости = СтрЗаменить(РезультатЗагрузкиНовости, "%УИННовости%", УИННовости);
			РезультатЗагрузкиНовости = СтрЗаменить(РезультатЗагрузкиНовости, "%ЗаголовокНовости%", ЗаголовокНовости);
			РезультатЗагрузкиНовости = СтрЗаменить(РезультатЗагрузкиНовости, "%ДатаПубликации%", Формат(ДатаПубликации, "ДЛФ=DT"));
			РезультатЗагрузкиНовости = СтрЗаменить(РезультатЗагрузкиНовости, "%ЗначениеПометкаУдаления%", ЗначениеПометкаУдаления);
			РезультатЗагрузкиНовости = СтрЗаменить(РезультатЗагрузкиНовости, "%ЗаписыватьНовость%", ?(ЗаписыватьНовость = Истина, НСтр("ru='Будет записана'"), НСтр("ru='Будет пропущена'")));
			РезультатЗагрузкиНовости = СтрЗаменить(РезультатЗагрузкиНовости, "%СуществуетВБазе%", ?(СтруктураНовости.Ссылка.Пустая(), НСтр("ru='В базе еще не создана'"), НСтр("ru='Уже существует в базе'")));
			РезультатЗагрузкиНовости = СтрЗаменить(РезультатЗагрузкиНовости, "%ДатаПубликацииИБ%", ?(СтруктураНовости.Ссылка.Пустая(), " " + НСтр("ru='(в базе не было)'"), " (" + Формат(ДатаПубликацииИБ, "ДЛФ=DT") + ")"));
			РезультатЗагрузкиНовости = СтрЗаменить(РезультатЗагрузкиНовости, "%ЗначениеПометкаУдаленияИБ%", ?(СтруктураНовости.Ссылка.Пустая(), " " + НСтр("ru='(в базе не было)'"), " (" + ЗначениеПометкаУдаленияИБ + ")"));
			РезультатЗагрузкиНовости = СтрЗаменить(РезультатЗагрузкиНовости, "%УИН_ИБ%", ?(СтруктураНовости.Ссылка.Пустая(), НСтр("ru='(еще не создана)'"), СтруктураНовости.УИН_ИБ));
			РезультатЗагрузкиНовости = СтрЗаменить(РезультатЗагрузкиНовости, "%НавигационнаяСсылка%", ?(СтруктураНовости.Ссылка.Пустая(), НСтр("ru='(еще не создана)'"), ПолучитьНавигационнуюСсылку(СтруктураНовости.Ссылка)));

		ИначеЕсли НРег(ФорматНовостей) = "feed" Тогда

			// Если новость существует и ее дата публикации не поменялась, то не записывать ее.
			ДатаПубликации   = ПреобразоватьВДату(ПолучитьЗначениеХДТО(НовостьХДТО, "published")); // published, а не updated.value. В противном случае новость при каждой перепубликации будет "прыгать" в начало списка новостей.
			УИННовости       = СокрЛП(ПолучитьЗначениеХДТО(НовостьХДТО, "id"));
			ЗаголовокНовости = СокрЛП(ПолучитьЗначениеХДТО(НовостьХДТО, "title"));
			Если ПустаяСтрока(УИННовости) Тогда
				УИННовости = Формат(ДатаПубликации, "ДФ=yyyyMMddHHmmss");
			КонецЕсли;
			ЗначениеПометкаУдаления = ПолучитьЗначениеХДТО(НовостьХДТО, "deletionMark");
			Если ВРег(ЗначениеПометкаУдаления) = ВРег("true") Тогда
				ЗначениеПометкаУдаления = Истина;
			ИначеЕсли ВРег(ЗначениеПометкаУдаления) = ВРег("false") Тогда
				ЗначениеПометкаУдаления = Ложь;
			Иначе
				ЗначениеПометкаУдаления = ?(ЗначениеПометкаУдаления = Неопределено, Ложь, ЗначениеПометкаУдаления);
			КонецЕсли;

			// Если пришла новость о системной ошибке, то не изменять ДатаСамойПоследнейНовости,
			//  т.к. эта новость - не значимая и не должна влиять на даты загрузки значимых новостей.
			Если (СокрЛП(ВРег(УИННовости)) = ВРег("313f4928-a71c-4cef-96ee-a4b6106c1275"))
					ИЛИ (СокрЛП(ВРег(УИННовости)) = ВРег("Ошибка")) Тогда
				// ДатаСамойПоследнейНовости - должна остаться как есть.
				ЭтоЗначимаяНовость = Ложь;
			Иначе
				ДатаСамойПоследнейНовости = Макс(ДатаСамойПоследнейНовости, ДатаПубликации);
				ЭтоЗначимаяНовость = Истина;
			КонецЕсли;

			// Оптимизация: не перезаполнять новость, если она существует и ее ДатаПубликации не увеличилась.
			// Исключение:
			//  если новость была помечена на удаление, то перезагрузить ее.
			//  Такой сценарий возможен, если какое-то время новости получались без ввода логина/пароля
			//   для доступа к ВебИТС (т.е. могли приходить с урезанными текстами).
			//   Тогда можно пометить такие "сокращенные" новости на удаление,
			//   сбросить дату последнего получения новостей и загрузить заново.
			ЗаписыватьНовость = Истина;
			СтруктураНовости = ОбработкаНовостей.ПолучитьСсылкуНаНовость(ЛентаНовостей, УИННовости);
			Если СтруктураНовости.Ссылка.Пустая() Тогда
				Если ЗначениеПометкаУдаления = Истина Тогда
					// Мы эту новость еще не загружали, и она уже помечена на удаление (отменена публикация), значит не надо ее загружать вообще.
					ЗаписыватьНовость = Ложь;
				Иначе
					ОбъектНовость = ОбработкаНовостей.ПолучитьОбъектНовости(
						СтруктураНовости.Ссылка,
						ЛентаНовостей,
						УИННовости,
						ДатаПубликации);
				КонецЕсли;
			Иначе
				ДатаПубликацииИБ          = СтруктураНовости.ДатаПубликации;
				ЗначениеПометкаУдаленияИБ = СтруктураНовости.ПометкаУдаления;
				Если (СтруктураНовости.ДатаПубликации < ДатаПубликации)
						ИЛИ (СтруктураНовости.ПометкаУдаления <> ЗначениеПометкаУдаления) Тогда
					ОбъектНовость = ОбработкаНовостей.ПолучитьОбъектНовости(
						СтруктураНовости.Ссылка,
						ЛентаНовостей,
						УИННовости,
						ДатаПубликации,
						Истина); // Очищать табличные части
				Иначе
					ЗаписыватьНовость = Ложь;
				КонецЕсли;
			КонецЕсли;

			Если ЗаписыватьНовость = Истина Тогда

				// Для нетипизированного чтения
				ОбъектНовость.Наименование                       = ЗаголовокНовости;
				ОбъектНовость.Подзаголовок                       = СокрЛП(ПолучитьЗначениеХДТО(НовостьХДТО, "subtitle"));
				ОбъектНовость.СсылкаНаПолныйТекстНовости         = СокрЛП(ПолучитьЗначениеХДТО(НовостьХДТО, "link.href"));
				ОбъектНовость.ТекстНовости                       = СокрЛП(ПолучитьЗначениеХДТО(НовостьХДТО, "summary"));
				ОбъектНовость.ДатаПубликации                     = ДатаПубликации;
				ОбъектНовость.УИННовости                         = УИННовости;
				ОбъектНовость.Важность                           = ПолучитьЗначениеХДТО(НовостьХДТО, "priority"); // Неопределено = 0
				ОбъектНовость.ДатаСбросаВажности                 = ПреобразоватьВДату(ПолучитьЗначениеХДТО(НовостьХДТО, "priorityExpired"));
				ОбъектНовость.ПриОткрытииСразуПереходитьПоСсылке = ПолучитьЗначениеХДТО(НовостьХДТО, "onlyLink");
				ОбъектНовость.СкрыватьВОбщемСпискеНовостей       = ПолучитьЗначениеХДТО(НовостьХДТО, "hidden");
				ЗначениеАвтоСбросНапоминанияПриПрочтении         = ПолучитьЗначениеХДТО(НовостьХДТО, "autoMarkAsRead");
				ОбъектНовость.АвтоСбросНапоминанияПриПрочтении   = ?(ЗначениеАвтоСбросНапоминанияПриПрочтении = Неопределено, Ложь, ЗначениеАвтоСбросНапоминанияПриПрочтении);
				ОбъектНовость.ПометкаУдаления                    = ЗначениеПометкаУдаления;

				лкТекстНовости = ОбъектНовость.ТекстНовости;
				лкТекстНовости = ОбработкаНовостейКлиентСервер.ЗаменитьСпециальныеСимволыВHTML(лкТекстНовости);
				ОбъектНовость.ТекстНовости = лкТекстНовости;

				лкДатаЗавершения = ПолучитьЗначениеХДТО(НовостьХДТО, "dueDate");
				Если лкДатаЗавершения = Неопределено Тогда
					ОбъектНовость.ДатаЗавершения = '00010101';
				Иначе
					ОбъектНовость.ДатаЗавершения = ПреобразоватьВДату(лкДатаЗавершения);
				КонецЕсли;

				// Категории могут передаваться как через стандартный "category", так и через специфичный для 1С "category1C".
				ОбработкаНовостей.ОчиститьКатегорииНовости(ОбъектНовость);
				// Обработка "category"
				СвойствоКатегория = НовостьХДТО.Свойства().Получить("category"); // атрибуты term и label
				Если ТипЗнч(СвойствоКатегория) = ТипСвойствоXDTO Тогда
					Если (СвойствоКатегория.ВерхняяГраница = -1
							ИЛИ СвойствоКатегория.ВерхняяГраница > 1) Тогда // Список значений
						СписокКатегорий = НовостьХДТО.ПолучитьСписок(СвойствоКатегория);
						Если ТипЗнч(СписокКатегорий) = ТипСписокXDTO Тогда
							Для каждого ТекущаяКатегория Из СписокКатегорий Цикл
								// В формате Atom нет простого содержимого для категории, только атрибуты term и label.
								КатегорияЗначение = "";
								СвойствоКатегорияЗначение = ТекущаяКатегория.Свойства().Получить("term");
								Если ТипЗнч(СвойствоКатегорияЗначение) = ТипСвойствоXDTO Тогда
									КатегорияЗначение = ТекущаяКатегория.Получить("term");
								КонецЕсли;
								ДобавитьНеобработанноеЗначениеКатегорииДляНовости_category(ОбъектНовость, КатегорияЗначение);
							КонецЦикла;
						КонецЕсли;
					Иначе // Одно значение
						СписокКатегорий = НовостьХДТО.Получить(СвойствоКатегория);
						Если ТипЗнч(СписокКатегорий) = ТипОбъектXDTO Тогда
							ТекущаяКатегория = СписокКатегорий;
							// В формате Atom нет простого содержимого для категории, только атрибуты term и label.
							КатегорияЗначение = "";
							СвойствоКатегорияЗначение = ТекущаяКатегория.Свойства().Получить("term");
							Если ТипЗнч(СвойствоКатегорияЗначение) = ТипСвойствоXDTO Тогда
								КатегорияЗначение = ТекущаяКатегория.Получить("term");
							КонецЕсли;
							ДобавитьНеобработанноеЗначениеКатегорииДляНовости_category(ОбъектНовость, КатегорияЗначение);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;

				ЗагрузитьБлокДанныхКатегорий1С(НовостьХДТО, ОбъектНовость);
				ЗагрузитьБлокДанныхКатегорийИнтерваловВерсий1С(НовостьХДТО, ОбъектНовость);
				ЗагрузитьБлокДанныхДействий1С(НовостьХДТО, ОбъектНовость);
				ЗагрузитьБлокДанныхПривязокКМетаданным1С(НовостьХДТО, ОбъектНовость);
				ЗагрузитьБлокДанныхБинарныеДанные(НовостьХДТО, ОбъектНовость);

				// Дополнительные проверки / обработки полей новости:
				// 1. В наименовании не должно быть пробелов.
				ОбъектНовость.Наименование = СокрЛП(ОбъектНовость.Наименование);
				// 2. Должен быть заполнен подзаголовок.
				Если ПустаяСтрока(ОбъектНовость.Подзаголовок) Тогда
					ОбъектНовость.Подзаголовок = ОбъектНовость.Наименование;
				КонецЕсли;
				// 3. Дата сброса важности должна быть установлена для очень важных новостей.
				Если ОбъектНовость.Важность = 1 Тогда // Очень важная
					Если (ОбъектНовость.ДатаСбросаВажности = '00010101') Тогда
						ОбъектНовость.ДатаСбросаВажности = ТекущаяУниверсальнаяДата() + 7*24*60*60; // + 1 неделя
					КонецЕсли;
				КонецЕсли;

				ИдентификаторШага1 = "ЗаписьНовости"; // Идентификатор.
				КодРезультатаВложенный = 0;
				ОписаниеРезультатаВложенный = "";
				ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
					КонтекстВыполненияВложенный,
					НаименованиеПроцедурыФункции
						+ "." + ИдентификаторШага1, // Идентификатор.
					НаименованиеПроцедурыФункции
						+ "." + ИдентификаторШага1);

					Попытка

						ОписаниеРезультатаВложенный = ОписаниеРезультатаВложенный
							+ НСтр("ru='Начало попытки записи новости'")
							+ Символы.ПС;

						ОбработкаНовостейВызовСервера.ДополнительноОбработатьНовостьПослеПолученияПередЗаписью(ОбъектНовость, НовостьХДТО);
						ОбъектНовость.ДополнительныеСвойства.Вставить("ЭтоЗагрузкаНовостей", Истина);
						ОбъектНовость.ДополнительныеСвойства.Вставить("СброситьПользовательскиеСвойстваПрочтенностиНовости", Истина);
						ОбъектНовость.Записать();
						ОбработкаНовостейВызовСервера.ДополнительноОбработатьНовостьПослеПолученияПослеЗаписи(ОбъектНовость.Ссылка);

						ОписаниеРезультатаВложенный = ОписаниеРезультатаВложенный
							+ НСтр("ru='Успешная попытка записи новости'")
							+ Символы.ПС;

					Исключение

						ТекстСообщения = НСтр("ru='Неудачная попытка записи новости по причине:
							|%ИнформацияОбОшибке%'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИнформацияОбОшибке%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
						ОписаниеРезультата = ОписаниеРезультата
							+ ТекстСообщения
							+ Символы.ПС;

						// Пропустить новость.

					КонецПопытки;

				ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
					КонтекстВыполненияВложенный,
					КодРезультатаВложенный,
					ОписаниеРезультатаВложенный,
					Неопределено);

			Иначе

				ОписаниеРезультата = ОписаниеРезультата
					+ НСтр("ru='Новость пропущена'")
					+ Символы.ПС;

			КонецЕсли;

			РезультатЗагрузкиНовости = СтрЗаменить(РезультатЗагрузкиНовости, "%ФорматНовостей%", ФорматНовостей);
			РезультатЗагрузкиНовости = СтрЗаменить(РезультатЗагрузкиНовости, "%УИННовости%", УИННовости);
			РезультатЗагрузкиНовости = СтрЗаменить(РезультатЗагрузкиНовости, "%ЗаголовокНовости%", ЗаголовокНовости);
			РезультатЗагрузкиНовости = СтрЗаменить(РезультатЗагрузкиНовости, "%ДатаПубликации%", Формат(ДатаПубликации, "ДЛФ=DT"));
			РезультатЗагрузкиНовости = СтрЗаменить(РезультатЗагрузкиНовости, "%ЗначениеПометкаУдаления%", ЗначениеПометкаУдаления);
			РезультатЗагрузкиНовости = СтрЗаменить(РезультатЗагрузкиНовости, "%ЗаписыватьНовость%", ?(ЗаписыватьНовость = Истина, НСтр("ru='Будет записана'"), НСтр("ru='Будет пропущена'")));
			РезультатЗагрузкиНовости = СтрЗаменить(РезультатЗагрузкиНовости, "%СуществуетВБазе%", ?(СтруктураНовости.Ссылка.Пустая(), НСтр("ru='В базе еще не создана'"), НСтр("ru='Уже существует в базе'")));
			РезультатЗагрузкиНовости = СтрЗаменить(РезультатЗагрузкиНовости, "%ДатаПубликацииИБ%", ?(СтруктураНовости.Ссылка.Пустая(), " " + НСтр("ru='(в базе не было)'"), " (" + Формат(ДатаПубликацииИБ, "ДЛФ=DT") + ")"));
			РезультатЗагрузкиНовости = СтрЗаменить(РезультатЗагрузкиНовости, "%ЗначениеПометкаУдаленияИБ%", ?(СтруктураНовости.Ссылка.Пустая(), " " + НСтр("ru='(в базе не было)'"), " (" + ЗначениеПометкаУдаленияИБ + ")"));
			РезультатЗагрузкиНовости = СтрЗаменить(РезультатЗагрузкиНовости, "%УИН_ИБ%", ?(СтруктураНовости.Ссылка.Пустая(), НСтр("ru='(еще не создана)'"), СтруктураНовости.УИН_ИБ));
			РезультатЗагрузкиНовости = СтрЗаменить(РезультатЗагрузкиНовости, "%НавигационнаяСсылка%", ?(СтруктураНовости.Ссылка.Пустая(), НСтр("ru='(еще не создана)'"), ПолучитьНавигационнуюСсылку(СтруктураНовости.Ссылка)));

		КонецЕсли; // ИначеЕсли НРег(ФорматНовостей) = ... Тогда

		ОписаниеРезультата = ОписаниеРезультата
			+ РезультатЗагрузкиНовости
			+ Символы.ПС;

	ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата, // Много действий, всегда установлено в 0, надо читать данные по каждому шагу.
		ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	Если ЗаписыватьВЖурналРегистрации = Истина Тогда

		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
			НСтр("ru='Новости. Загрузка новостей. Загрузка новости'"), // ИдентификаторШага
			?(КодРезультата > 0,
				УровеньЖурналаРегистрации.Ошибка,
				УровеньЖурналаРегистрации.Информация), // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
			ОбработкаНовостей.КомментарийДляЖурналаРегистрации(
				НаименованиеПроцедурыФункции,
				ШагВыполнения,
				КонтекстВыполнения,
				"Простой"), // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

КонецПроцедуры

#Область СлужебныеПроцедурыИФункции_ЗагрузкаНовостей_КатегорииПростые

// Найден блок данных категорий 1С - загрузить его.
//
// Заполнение регистра сведений необработанных категорий для новостей.
// При загрузке новостей категоризация не будет сразу заполняться,
//  т.к. может быть ситуация, что строка "География=Усть-Илимск" (category),
//  или "География", "Усть-Илимск", "eq" (category1C) не обработается из-за того,
//  что город "Усть-Илимск" еще не загружен с серверов (не обновились стандартные списки).
// Поэтому категории вначале будут загружаться в "сыром" (необработанном) виде, в виде строк в регистр "КатегорииНовостейПростыеНеобработанные",
// а затем отдельной обработкой преобразовываться и перемещаться в регистр сведений "КатегорииНовостейПростые" или "КатегорииНовостейИнтервалыВерсий".
//
Процедура ЗагрузитьБлокДанныхКатегорий1С(НовостьХДТО, ОбъектНовость)

	// Регистр сведений необработанных категорий для этой новости уже очищен ранее методом "ОчиститьКатегорииНовости".

	ТипОбъектXDTO   = Тип("ОбъектXDTO");
	ТипСвойствоXDTO = Тип("СвойствоXDTO");
	ТипСписокXDTO   = Тип("СписокXDTO");

	// Добавить необработанные простые категории.
	СвойствоБлокДанных1С = НовостьХДТО.Свойства().Получить("categories1C");
	Если ТипЗнч(СвойствоБлокДанных1С) = ТипСвойствоXDTO Тогда
		БлокДанных1С = НовостьХДТО.Получить(СвойствоБлокДанных1С);
		Если ТипЗнч(БлокДанных1С) = ТипОбъектXDTO Тогда
			СвойствоДанные1С = БлокДанных1С.Свойства().Получить("category1C");
			Если ТипЗнч(СвойствоДанные1С) = ТипСвойствоXDTO Тогда
				Если (СвойствоДанные1С.ВерхняяГраница = -1
						ИЛИ СвойствоДанные1С.ВерхняяГраница > 1) Тогда // Список значений
					СписокДанные1С = БлокДанных1С.ПолучитьСписок(СвойствоДанные1С);
					Если ТипЗнч(СписокДанные1С) = ТипСписокXDTO Тогда
						Для каждого ТекущиеДанные1С Из СписокДанные1С Цикл
							ЗагрузитьБлокДанныхКатегорий1С_Категория(ТекущиеДанные1С, ОбъектНовость);
						КонецЦикла;
					КонецЕсли;
				Иначе // Одно значение
					СписокДанные1С = БлокДанных1С.Получить(СвойствоДанные1С);
					Если ТипЗнч(СписокДанные1С) = ТипОбъектXDTO Тогда
						ТекущиеДанные1С = СписокДанные1С;
						ЗагрузитьБлокДанныхКатегорий1С_Категория(ТекущиеДанные1С, ОбъектНовость);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Найден блок данных 1С - загрузить его, загрузка единичной категории.
//
Процедура ЗагрузитьБлокДанныхКатегорий1С_Категория(ДанныеХДТО, ОбъектНовость)

	ТипОбъектXDTO   = Тип("ОбъектXDTO");
	ТипСвойствоXDTO = Тип("СвойствоXDTO");

	Если ТипЗнч(ДанныеХДТО) = ТипОбъектXDTO Тогда
		// Получить необходимые данные из xml.
		КатегорияНовостейСтрока         = "";
		ЗначениеКатегорииНовостейСтрока = "";
		УсловиеОтбора                   = "";

		СвойствоКатегория = ДанныеХДТО.Свойства().Получить("categoryCode");
		Если ТипЗнч(СвойствоКатегория) = ТипСвойствоXDTO Тогда
			КатегорияНовостейСтрока = ДанныеХДТО.Получить(СвойствоКатегория);
		КонецЕсли;

		СвойствоЗначениеКатегории = ДанныеХДТО.Свойства().Получить("categoryValue");
		Если ТипЗнч(СвойствоЗначениеКатегории) = ТипСвойствоXDTO Тогда
			ЗначениеКатегорииНовостейСтрока = ДанныеХДТО.Получить(СвойствоЗначениеКатегории);
		КонецЕсли;

		СвойствоУсловие = ДанныеХДТО.Свойства().Получить("condition");
		Если ТипЗнч(СвойствоУсловие) = ТипСвойствоXDTO Тогда
			УсловиеОтбора = ДанныеХДТО.Получить(СвойствоУсловие);
		КонецЕсли;

		Если ВРег(КатегорияНовостейСтрока) = ВРег("Важность") // Идентификатор.
				И ВРег(ЗначениеКатегорииНовостейСтрока) = ВРег("Очень важная") // Идентификатор.
				И ВРег(УсловиеОтбора) = ВРег("eq") Тогда
			ОбъектНовость.Важность = 1; // Перезапишет ОбъектНовость.Важность, если было установлено ранее из тега priority.
		ИначеЕсли ВРег(КатегорияНовостейСтрока) = ВРег("Важность")
				И ВРег(ЗначениеКатегорииНовостейСтрока) = ВРег("Важная") // Идентификатор.
				И ВРег(УсловиеОтбора) = ВРег("eq") Тогда
			ОбъектНовость.Важность = 2; // Перезапишет ОбъектНовость.Важность, если было установлено ранее из тега priority.
		Иначе
			// Добавить данные
			Запись = РегистрыСведений.КатегорииНовостейПростыеНеобработанные.СоздатьМенеджерЗаписи();
			Запись.КатегорияНовостейСтрока         = КатегорияНовостейСтрока;
			Запись.ЗначениеКатегорииНовостейСтрока = ЗначениеКатегорииНовостейСтрока;
			Запись.УсловиеОтбора                   = УсловиеОтбора; // Это не измерение
			Запись.ЛентаНовостей                   = ОбъектНовость.ЛентаНовостей;
			Запись.УИННовости                      = ОбъектНовость.УИННовости;
			Запись.Записать(Истина);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ЗагрузкаНовостей_КатегорииИнтервалыВерсий

// Найден блок данных категорий (интервалы версий) 1С - загрузить его.
//
// Заполнение регистра сведений необработанных категорий (интервалов версий) для новостей.
// При загрузке новостей категоризация не будет сразу заполняться,
//  т.к. может быть ситуация, что не все категории еще загружены с сервера.
// Поэтому категории вначале будут загружаться в "сыром" (необработанном) виде, в виде строк,
//  в регистр "КатегорииНовостейИнтервалыВерсийНеобработанные",
//  а затем отдельной обработкой преобразовываться и перемещаться в регистр сведений
//  "КатегорииНовостейПростые" или "КатегорииНовостейИнтервалыВерсий".
//
Процедура ЗагрузитьБлокДанныхКатегорийИнтерваловВерсий1С(НовостьХДТО, ОбъектНовость)

	ТипОбъектXDTO   = Тип("ОбъектXDTO");
	ТипСвойствоXDTO = Тип("СвойствоXDTO");
	ТипСписокXDTO   = Тип("СписокXDTO");

	// Регистр сведений необработанных категорий для этой новости уже очищен ранее методом "ОчиститьКатегорииНовости".

	// Добавить необработанные категории интервалов версий.
	СвойствоБлокДанных1С = НовостьХДТО.Свойства().Получить("categoriesVersions1C");
	Если ТипЗнч(СвойствоБлокДанных1С) = ТипСвойствоXDTO Тогда
		БлокДанных1С = НовостьХДТО.Получить(СвойствоБлокДанных1С);
		Если ТипЗнч(БлокДанных1С) = ТипОбъектXDTO Тогда
			СвойствоДанные1С = БлокДанных1С.Свойства().Получить("categoryVersions1C");
			Если ТипЗнч(СвойствоДанные1С) = ТипСвойствоXDTO Тогда
				Если (СвойствоДанные1С.ВерхняяГраница = -1
						ИЛИ СвойствоДанные1С.ВерхняяГраница > 1) Тогда // Список значений
					СписокДанные1С = БлокДанных1С.ПолучитьСписок(СвойствоДанные1С);
					Если ТипЗнч(СписокДанные1С) = ТипСписокXDTO Тогда
						Для каждого ТекущиеДанные1С Из СписокДанные1С Цикл
							ЗагрузитьБлокДанныхКатегорий1С_КатегорияИнтервалВерсий(ТекущиеДанные1С, ОбъектНовость);
						КонецЦикла;
					КонецЕсли;
				Иначе // Одно значение
					СписокДанные1С = БлокДанных1С.Получить(СвойствоДанные1С);
					Если ТипЗнч(СписокДанные1С) = ТипОбъектXDTO Тогда
						ТекущиеДанные1С = СписокДанные1С;
						ЗагрузитьБлокДанныхКатегорий1С_КатегорияИнтервалВерсий(ТекущиеДанные1С, ОбъектНовость);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Найден блок данных 1С (интервалы версий) - загрузить его, загрузка единичной привязки к интервалу версий.
//
Процедура ЗагрузитьБлокДанныхКатегорий1С_КатегорияИнтервалВерсий(ДанныеХДТО, ОбъектНовость)

	ТипОбъектXDTO   = Тип("ОбъектXDTO");
	ТипСвойствоXDTO = Тип("СвойствоXDTO");

	Если ТипЗнч(ДанныеХДТО) = ТипОбъектXDTO Тогда
		// Получить необходимые данные из xml.
		КатегорияНовостейСтрока = "";
		Продукт                 = "";
		ВерсияОТ                = "";
		ВерсияДО                = "";

		СвойствоКатегория = ДанныеХДТО.Свойства().Получить("categoryCode");
		Если ТипЗнч(СвойствоКатегория) = ТипСвойствоXDTO Тогда
			КатегорияНовостейСтрока = ДанныеХДТО.Получить(СвойствоКатегория);
		КонецЕсли;

		СвойствоПродукт = ДанныеХДТО.Свойства().Получить("productCode");
		Если ТипЗнч(СвойствоПродукт) = ТипСвойствоXDTO Тогда
			Продукт = ДанныеХДТО.Получить(СвойствоПродукт);
		КонецЕсли;

		СвойствоВерсияОТ = ДанныеХДТО.Свойства().Получить("versionFrom");
		Если ТипЗнч(СвойствоВерсияОТ) = ТипСвойствоXDTO Тогда
			ВерсияОТ = ДанныеХДТО.Получить(СвойствоВерсияОТ);
		КонецЕсли;

		СвойствоВерсияДО = ДанныеХДТО.Свойства().Получить("versionTo");
		Если ТипЗнч(СвойствоВерсияДО) = ТипСвойствоXDTO Тогда
			ВерсияДО = ДанныеХДТО.Получить(СвойствоВерсияДО);
		КонецЕсли;

		// Добавить данные.
		Запись = РегистрыСведений.КатегорииНовостейИнтервалыВерсийНеобработанные.СоздатьМенеджерЗаписи();
		Запись.КатегорияНовостейСтрока = КатегорияНовостейСтрока;
		Запись.Продукт                 = Продукт;
		Запись.ВерсияОТ                = ВерсияОТ;
		Запись.ВерсияДО                = ВерсияДО;
		Запись.ЛентаНовостей           = ОбъектНовость.ЛентаНовостей;
		Запись.УИННовости              = ОбъектНовость.УИННовости;
		Запись.Записать(Истина);

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ЗагрузкаНовостей_Действия

// Найден блок данных действий 1С - загрузить его.
//
Процедура ЗагрузитьБлокДанныхДействий1С(НовостьХДТО, ОбъектНовость)

	ТипОбъектXDTO   = Тип("ОбъектXDTO");
	ТипСвойствоXDTO = Тип("СвойствоXDTO");
	ТипСписокXDTO   = Тип("СписокXDTO");

	// Предварительно очистить таблицу действий и параметров в объекте.
	ОбъектНовость.Действия.Очистить();
	ОбъектНовость.ПараметрыДействий.Очистить();

	СвойствоБлокДанных1С = НовостьХДТО.Свойства().Получить("actions1C");
	Если ТипЗнч(СвойствоБлокДанных1С) = ТипСвойствоXDTO Тогда
		БлокДанных1С = НовостьХДТО.Получить(СвойствоБлокДанных1С);
		Если ТипЗнч(БлокДанных1С) = ТипОбъектXDTO Тогда
			СвойствоДанные1С = БлокДанных1С.Свойства().Получить("action1C");
			Если ТипЗнч(СвойствоДанные1С) = ТипСвойствоXDTO Тогда
				Если (СвойствоДанные1С.ВерхняяГраница = -1
						ИЛИ СвойствоДанные1С.ВерхняяГраница > 1) Тогда // Список значений
					СписокДанные1С = БлокДанных1С.ПолучитьСписок(СвойствоДанные1С);
					Если ТипЗнч(СписокДанные1С) = ТипСписокXDTO Тогда
						Для каждого ТекущиеДанные1С Из СписокДанные1С Цикл
							ЗагрузитьБлокДанныхДействий1С_Действие(ТекущиеДанные1С, ОбъектНовость);
						КонецЦикла;
					КонецЕсли;
				Иначе // Одно значение
					СписокДанные1С = БлокДанных1С.Получить(СвойствоДанные1С);
					Если ТипЗнч(СписокДанные1С) = ТипОбъектXDTO Тогда
						ТекущиеДанные1С = СписокДанные1С;
						ЗагрузитьБлокДанныхДействий1С_Действие(ТекущиеДанные1С, ОбъектНовость);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Найден блок данных 1С - загрузить его, загрузка единичного действия.
//
Процедура ЗагрузитьБлокДанныхДействий1С_Действие(ДанныеХДТО, ОбъектНовость)

	СписокПараметров = Новый СписокЗначений;

	ТипОбъектXDTO   = Тип("ОбъектXDTO");
	ТипСвойствоXDTO = Тип("СвойствоXDTO");
	ТипСписокXDTO   = Тип("СписокXDTO");

	Если ТипЗнч(ДанныеХДТО) = ТипОбъектXDTO Тогда
		// Получить необходимые данные из xml.
		УИНДействия = "";
		Действие = "";

		СвойствоУИНДействия = ДанныеХДТО.Свойства().Получить("actionID");
		Если ТипЗнч(СвойствоУИНДействия) = ТипСвойствоXDTO Тогда
			УИНДействия = ДанныеХДТО.Получить("actionID");
		КонецЕсли;

		СвойствоДействие = ДанныеХДТО.Свойства().Получить("action");
		Если ТипЗнч(СвойствоДействие) = ТипСвойствоXDTO Тогда
			Действие = ДанныеХДТО.Получить("action");
		КонецЕсли;

		// Возможно, есть параметры.
		СвойствоБлокСписокПараметров = ДанныеХДТО.Свойства().Получить("parametersList");
		Если ТипЗнч(СвойствоБлокСписокПараметров) = ТипСвойствоXDTO Тогда
			БлокСписокПараметров = ДанныеХДТО.Получить(СвойствоБлокСписокПараметров);
			Если ТипЗнч(БлокСписокПараметров) = ТипОбъектXDTO Тогда
				СвойствоПараметры = БлокСписокПараметров.Свойства().Получить("parameter");
				Если ТипЗнч(СвойствоПараметры) = ТипСвойствоXDTO Тогда
					Если (СвойствоПараметры.ВерхняяГраница = -1
							ИЛИ СвойствоПараметры.ВерхняяГраница > 1) Тогда // Список значений
						Список = БлокСписокПараметров.ПолучитьСписок(СвойствоПараметры);
						Если ТипЗнч(Список) = ТипСписокXDTO Тогда
							Для каждого ТекущийПараметр Из Список Цикл
								ЗагрузитьБлокДанныхДействий1С_ПараметрыДействия(СписокПараметров, ТекущийПараметр);
							КонецЦикла;
						КонецЕсли;
					Иначе // Одно значение
						Список = БлокСписокПараметров.Получить(СвойствоПараметры);
						Если ТипЗнч(Список) = ТипОбъектXDTO Тогда
							ТекущийПараметр = Список;
							ЗагрузитьБлокДанныхДействий1С_ПараметрыДействия(СписокПараметров, ТекущийПараметр);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		// Добавить данные.
		НоваяСтрокаДействие = ОбъектНовость.Действия.Добавить();
		НоваяСтрокаДействие.УИНДействия      = УИНДействия;
		НоваяСтрокаДействие.Действие         = Действие;
		Для каждого ТекущаяСтрока Из СписокПараметров Цикл
			НоваяСтрокаПараметр = ОбъектНовость.ПараметрыДействий.Добавить();
			НоваяСтрокаПараметр.УИНДействия       = УИНДействия;
			НоваяСтрокаПараметр.Параметр          = ТекущаяСтрока.Представление;
			НоваяСтрокаПараметр.ЗначениеПараметра = ТекущаяСтрока.Значение;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

// Найден блок данных 1С - загрузить его, загрузка единичного параметра каждого действия.
//
Процедура ЗагрузитьБлокДанныхДействий1С_ПараметрыДействия(СписокПараметров, ПараметрХДТО)

	ТипСвойствоXDTO   = Тип("СвойствоXDTO");
	ТипСписокЗначений = Тип("СписокЗначений");

	Если ТипЗнч(СписокПараметров) <> ТипСписокЗначений Тогда
		СписокПараметров = Новый СписокЗначений;
	КонецЕсли;

	ПараметрИмя      = "";
	ПараметрЗначение = "";
	СвойствоПараметрИмя = ПараметрХДТО.Свойства().Получить("name");
	Если ТипЗнч(СвойствоПараметрИмя) = ТипСвойствоXDTO Тогда
		ПараметрИмя = ПараметрХДТО.Получить("name");
	КонецЕсли;
	СвойствоПараметрЗначение = ПараметрХДТО.Свойства().Получить("value");
	Если ТипЗнч(СвойствоПараметрЗначение) = ТипСвойствоXDTO Тогда
		ПараметрЗначение = ПараметрХДТО.Получить("value");
	КонецЕсли;

	СписокПараметров.Добавить(ПараметрЗначение, ПараметрИмя);

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ЗагрузкаНовостей_ПривязкиКМетаданным

// Найден блок данных контекстных новостей 1С - загрузить его.
//
Процедура ЗагрузитьБлокДанныхПривязокКМетаданным1С(НовостьХДТО, ОбъектНовость)

	ТипОбъектXDTO   = Тип("ОбъектXDTO");
	ТипСвойствоXDTO = Тип("СвойствоXDTO");
	ТипСписокXDTO   = Тип("СписокXDTO");

	// Предварительно очистить таблицу привязок к метаданным в объекте.
	ОбъектНовость.ПривязкаКМетаданным.Очистить();

	СвойствоБлокДанных1С = НовостьХДТО.Свойства().Получить("metadataLinks1C");
	Если ТипЗнч(СвойствоБлокДанных1С) = ТипСвойствоXDTO Тогда
		БлокДанных1С = НовостьХДТО.Получить(СвойствоБлокДанных1С);
		Если ТипЗнч(БлокДанных1С) = ТипОбъектXDTO Тогда
			СвойствоДанные1С = БлокДанных1С.Свойства().Получить("metadataLink1C");
			Если ТипЗнч(СвойствоДанные1С) = ТипСвойствоXDTO Тогда
				Если (СвойствоДанные1С.ВерхняяГраница = -1
						ИЛИ СвойствоДанные1С.ВерхняяГраница > 1) Тогда // Список значений
					СписокДанные1С = БлокДанных1С.ПолучитьСписок(СвойствоДанные1С);
					Если ТипЗнч(СписокДанные1С) = ТипСписокXDTO Тогда
						Для каждого ТекущиеДанные1С Из СписокДанные1С Цикл
							ЗагрузитьБлокДанныхПривязокКМетаданным1С_Привязки(ТекущиеДанные1С, ОбъектНовость);
						КонецЦикла;
					КонецЕсли;
				Иначе // Одно значение
					СписокДанные1С = БлокДанных1С.Получить(СвойствоДанные1С);
					Если ТипЗнч(СписокДанные1С) = ТипОбъектXDTO Тогда
						ТекущиеДанные1С = СписокДанные1С;
						ЗагрузитьБлокДанныхПривязокКМетаданным1С_Привязки(ТекущиеДанные1С, ОбъектНовость);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Найден блок данных привязок к метаданным 1С - загрузить его, загрузка единичной привязки.
//
Процедура ЗагрузитьБлокДанныхПривязокКМетаданным1С_Привязки(ДанныеХДТО, ОбъектНовость)

	ТипОбъектXDTO   = Тип("ОбъектXDTO");
	ТипСвойствоXDTO = Тип("СвойствоXDTO");

	Если ТипЗнч(ДанныеХДТО) = ТипОбъектXDTO Тогда
		// Получить необходимые данные из xml.
		лкМетаданные                    = "";
		лкФорма                         = "";
		лкСобытие                       = "";
		лкВажность                      = 0;
		лкДатаСбросаВажности            = '00010101';
		лкПоказыватьВФормеОбъекта       = Ложь;
		лкДатаСбросаПоказаВФормеОбъекта = '00010101';
		лкЭтоПостояннаяНовость          = Ложь;
		лкДатаСбросаПостояннойНовости   = '00010101';

		СвойствоМетаданные = ДанныеХДТО.Свойства().Получить("metadataName");
		Если ТипЗнч(СвойствоМетаданные) = ТипСвойствоXDTO Тогда
			лкМетаданные = ДанныеХДТО.Получить("metadataName");
		КонецЕсли;

		СвойствоФорма = ДанныеХДТО.Свойства().Получить("formName");
		Если ТипЗнч(СвойствоФорма) = ТипСвойствоXDTO Тогда
			лкФорма = ДанныеХДТО.Получить("formName");
		КонецЕсли;

		СвойствоСобытие = ДанныеХДТО.Свойства().Получить("eventName");
		Если ТипЗнч(СвойствоСобытие) = ТипСвойствоXDTO Тогда
			лкСобытие = ДанныеХДТО.Получить("eventName");
		КонецЕсли;

		СвойствоВажность = ДанныеХДТО.Свойства().Получить("priority");
		Если ТипЗнч(СвойствоВажность) = ТипСвойствоXDTO Тогда
			лкВажность = ДанныеХДТО.Получить("priority");
		КонецЕсли;

		СвойствоДатаСбросаВажности = ДанныеХДТО.Свойства().Получить("priorityExpired");
		Если ТипЗнч(СвойствоДатаСбросаВажности) = ТипСвойствоXDTO Тогда
			лкДатаСбросаВажности = ПреобразоватьВДату(ДанныеХДТО.Получить("priorityExpired"));
		КонецЕсли;

		СвойствоПоказыватьВФормеОбъекта = ДанныеХДТО.Свойства().Получить("openWithinOwnerForm");
		Если ТипЗнч(СвойствоПоказыватьВФормеОбъекта) = ТипСвойствоXDTO Тогда
			лкПоказыватьВФормеОбъекта = ДанныеХДТО.Получить("openWithinOwnerForm");
		КонецЕсли;

		СвойствоДатаСбросаПоказаВФормеОбъекта = ДанныеХДТО.Свойства().Получить("openWithinOwnerFormExpired");
		Если ТипЗнч(СвойствоДатаСбросаПоказаВФормеОбъекта) = ТипСвойствоXDTO Тогда
			лкДатаСбросаПоказаВФормеОбъекта = ПреобразоватьВДату(ДанныеХДТО.Получить("openWithinOwnerFormExpired"));
		КонецЕсли;

		СвойствоЭтоПостояннаяНовость = ДанныеХДТО.Свойства().Получить("isPinned");
		Если ТипЗнч(СвойствоЭтоПостояннаяНовость) = ТипСвойствоXDTO Тогда
			лкЭтоПостояннаяНовость = ДанныеХДТО.Получить("isPinned");
		КонецЕсли;

		СвойствоДатаСбросаПостояннойНовости = ДанныеХДТО.Свойства().Получить("isPinnedExpired");
		Если ТипЗнч(СвойствоДатаСбросаПостояннойНовости) = ТипСвойствоXDTO Тогда
			лкДатаСбросаПостояннойНовости = ПреобразоватьВДату(ДанныеХДТО.Получить("isPinnedExpired"));
		КонецЕсли;

		// Добавить данные.
		НоваяСтрокаДействие = ОбъектНовость.ПривязкаКМетаданным.Добавить();
		НоваяСтрокаДействие.Метаданные                    = лкМетаданные;
		НоваяСтрокаДействие.Форма                         = лкФорма;
		НоваяСтрокаДействие.Событие                       = лкСобытие;
		НоваяСтрокаДействие.ПоказыватьВФормеОбъекта       = лкПоказыватьВФормеОбъекта;
		НоваяСтрокаДействие.ДатаСбросаПоказаВФормеОбъекта = лкДатаСбросаПоказаВФормеОбъекта;
		НоваяСтрокаДействие.Важность                      = лкВажность;
		НоваяСтрокаДействие.ДатаСбросаВажности            = лкДатаСбросаВажности;
		НоваяСтрокаДействие.ЭтоПостояннаяНовость          = лкЭтоПостояннаяНовость;
		НоваяСтрокаДействие.ДатаСбросаПостояннойНовости   = лкДатаСбросаПостояннойНовости;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_ЗагрузкаНовостей_БинарныеДанные

// Найден блок бинарных данных (картинки, внешние отчеты / обработки) - загрузить его.
//
Процедура ЗагрузитьБлокДанныхБинарныеДанные(НовостьХДТО, ОбъектНовость)

	ТипОбъектXDTO   = Тип("ОбъектXDTO");
	ТипСвойствоXDTO = Тип("СвойствоXDTO");
	ТипСписокXDTO   = Тип("СписокXDTO");

	// Предварительно очистить таблицу бинарных данных.
	ОбъектНовость.БинарныеДанные.Очистить();

	СвойствоБлокДанных1С = НовостьХДТО.Свойства().Получить("binaryDataList1C");
	Если ТипЗнч(СвойствоБлокДанных1С) = ТипСвойствоXDTO Тогда
		БлокДанных1С = НовостьХДТО.Получить(СвойствоБлокДанных1С);
		Если ТипЗнч(БлокДанных1С) = ТипОбъектXDTO Тогда
			СвойствоДанные1С = БлокДанных1С.Свойства().Получить("binaryData1C");
			Если ТипЗнч(СвойствоДанные1С) = ТипСвойствоXDTO Тогда
				Если (СвойствоДанные1С.ВерхняяГраница = -1
						ИЛИ СвойствоДанные1С.ВерхняяГраница > 1) Тогда // Список значений
					СписокДанные1С = БлокДанных1С.ПолучитьСписок(СвойствоДанные1С);
					Если ТипЗнч(СписокДанные1С) = ТипСписокXDTO Тогда
						Для каждого ТекущиеДанные1С Из СписокДанные1С Цикл
							ЗагрузитьБлокДанныхБинарныеДанные_Элементы(ТекущиеДанные1С, ОбъектНовость);
						КонецЦикла;
					КонецЕсли;
				Иначе // Одно значение
					СписокДанные1С = БлокДанных1С.Получить(СвойствоДанные1С);
					Если ТипЗнч(СписокДанные1С) = ТипОбъектXDTO Тогда
						ТекущиеДанные1С = СписокДанные1С;
						ЗагрузитьБлокДанныхБинарныеДанные_Элементы(ТекущиеДанные1С, ОбъектНовость);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Найден блок бинарных данных 1С - загрузить его, загрузка единичного объекта.
//
Процедура ЗагрузитьБлокДанныхБинарныеДанные_Элементы(ДанныеХДТО, ОбъектНовость)

	ТипОбъектXDTO   = Тип("ОбъектXDTO");
	ТипСвойствоXDTO = Тип("СвойствоXDTO");

	Если ТипЗнч(ДанныеХДТО) = ТипОбъектXDTO Тогда
		// Получить необходимые данные из xml.
		УИН               = "";
		Данные            = Неопределено;
		Заголовок         = "";
		ИнтернетСсылка    = "";
		ПорядокСортировки = 0;

		СвойствоУИН = ДанныеХДТО.Свойства().Получить("id");
		Если ТипЗнч(СвойствоУИН) = ТипСвойствоXDTO Тогда
			УИН = ДанныеХДТО.Получить(СвойствоУИН);
		КонецЕсли;

		// Данные в формате base64 нельзя хранить в атрибутах, т.к. они потом не прочитаются (в атрибутах нельзя передавать переносы строк).
		СвойствоДвоичныеДанные = ДанныеХДТО.Свойства().Получить("binaryData");
		Если ТипЗнч(СвойствоДвоичныеДанные) = ТипСвойствоXDTO Тогда
			Попытка
				Данные = Новый ХранилищеЗначения(
					Base64Значение(ДанныеХДТО.Получить(СвойствоДвоичныеДанные)));
			Исключение
				Данные = Неопределено;
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Не удалось загрузить бинарные данные для новости с УИН %1 по причине: 
						|%2'"),
					ОбъектНовость.УИННовости,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
				ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
					НСтр("ru='БИП:Новости.Загрузка новостей'"), // ИмяСобытия
					НСтр("ru='Новости. Загрузка новостей. Парсинг файлов новостей. Парсинг файла новостей. Парсинг новости. Чтение новости. Блок бинарных данных'"), // ИдентификаторШага
					УровеньЖурналаРегистрации.Ошибка, // УровеньЖурналаРегистрации.*
					, // ОбъектМетаданных
					, // Данные
					ТекстСообщения, // Комментарий
					ОбработкаНовостейВызовСервера.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации
			КонецПопытки;
		КонецЕсли;

		СвойствоЗаголовок = ДанныеХДТО.Свойства().Получить("title");
		Если ТипЗнч(СвойствоЗаголовок) = ТипСвойствоXDTO Тогда
			Заголовок = ДанныеХДТО.Получить(СвойствоЗаголовок);
		КонецЕсли;

		СвойствоИнтернетСсылка = ДанныеХДТО.Свойства().Получить("link");
		Если ТипЗнч(СвойствоИнтернетСсылка) = ТипСвойствоXDTO Тогда
			ИнтернетСсылка = ДанныеХДТО.Получить(СвойствоИнтернетСсылка);
		КонецЕсли;

		СвойствоПорядокСортировки = ДанныеХДТО.Свойства().Получить("order");
		Если ТипЗнч(СвойствоПорядокСортировки) = ТипСвойствоXDTO Тогда
			ПорядокСортировки = ДанныеХДТО.Получить(СвойствоПорядокСортировки);
		КонецЕсли;

		// Добавить данные.
		НоваяСтрокаДействие = ОбъектНовость.БинарныеДанные.Добавить();
		НоваяСтрокаДействие.УИН               = УИН;
		НоваяСтрокаДействие.Данные            = Данные;
		НоваяСтрокаДействие.ИнтернетСсылка    = ИнтернетСсылка;
		НоваяСтрокаДействие.Заголовок         = Заголовок;
		НоваяСтрокаДействие.ПорядокСортировки = ПорядокСортировки;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

// Заполнение регистра сведений последних обновлений.
//
// Параметры:
//  Обновление         - ОбъектХДТО с полями:
//   * listName;
//   * categoryCode;
//   * categoryGuid;
//   * updated;
//  КонтекстВыполнения - Структура, Неопределено - структура контекста выполнения.
//
Процедура ЗагрузитьДатуПоследнегоОбновленияСтандартногоСписка(Обновление, КонтекстВыполнения = Неопределено)

	НаименованиеПроцедурыФункции = "Обработка.УправлениеНовостями.ЗагрузитьДатуПоследнегоОбновленияСтандартногоСписка"; // Идентификатор.
	ЗаписыватьВЖурналРегистрации = Ложь;
	Если КонтекстВыполнения = Неопределено Тогда
		КонтекстВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
		ЗаписыватьВЖурналРегистрации = Истина;
	КонецЕсли;
	КодРезультата = 0;
	ОписаниеРезультата = "";
	КонтекстВыполненияВложенный = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Контекст "по шагам".
	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		НаименованиеПроцедурыФункции, // Идентификатор.
		НСтр("ru='Загрузка даты последнего обновления стандартного списка'"));

		ТипОбъектXDTO = Тип("ОбъектXDTO");

		ЕстьОшибки = Ложь;

		Если ТипЗнч(Обновление) = ТипОбъектXDTO Тогда
			Попытка
				Если Обновление.Свойства().Получить("listName") <> Неопределено Тогда
					listName = Обновление.Получить("listName"); // Строка
				Иначе
					listName = "";
				КонецЕсли;
				Если Обновление.Свойства().Получить("categoryCode") <> Неопределено Тогда
					categoryCode = Обновление.Получить("categoryCode"); // Строка
				Иначе
					categoryCode = "";
				КонецЕсли;
				Если Обновление.Свойства().Получить("categoryGuid") <> Неопределено Тогда
					categoryGuid = Обновление.Получить("categoryGuid"); // Строка
				Иначе
					categoryGuid = "";
				КонецЕсли;
				Если Обновление.Свойства().Получить("updated") <> Неопределено Тогда
					updated = ПреобразоватьВДату(Обновление.Получить("updated"));
				Иначе
					updated = '00010101';
				КонецЕсли;
			Исключение
				ОписаниеРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Ошибка загрузки строки обновления списков по причине:
						|%1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				// Пропустить строку обновлений.
				ЕстьОшибки = Истина;
			КонецПопытки;

			Если ЕстьОшибки = Ложь Тогда

				Если listName = "Список лент новостей" Тогда // Идентификатор.
					Запись = РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей.СоздатьМенеджерЗаписи();
					Запись.Список = listName;
					Запись.Прочитать(); // Запись будет ниже.
					Запись.ТекущаяВерсияНаСервере = updated;
					Запись.Записать(Истина);
				ИначеЕсли listName = "Список категорий новостей" Тогда // Идентификатор.
					Запись = РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей.СоздатьМенеджерЗаписи();
					Запись.Список = listName;
					Запись.Прочитать(); // Запись будет ниже.
					Запись.ТекущаяВерсияНаСервере = updated;
					Запись.Записать(Истина);
				ИначеЕсли listName = "Значения категории новостей" Тогда // Идентификатор.
					// Возможна ситуация, когда передается код элемента плана видов характеристик,
					//  а его еще нет в базе - не обновлен список категорий новостей.
					// Эту ситуацию отдельно не надо обрабатывать, т.к. тогда дата для списка
					//  "Список категорий новостей" будет неактуальной и все равно будет загружаться список категорий.
					Значение = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду(categoryCode);
					Если Значение.Пустая() Тогда
						Запись = РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей.СоздатьМенеджерЗаписи();
						Запись.Список = "Значения категории новостей:" + categoryGuid; // Идентификатор.
						Запись.Прочитать(); // Запись будет ниже.
						Запись.ТекущаяВерсияНаСервере = updated;
						Запись.Записать(Истина);
					Иначе
						Запись = РегистрыСведений.ДатыОбновленияСтандартныхСписковНовостей.СоздатьМенеджерЗаписи();
						Запись.Список = Значение;
						Запись.Прочитать(); // Запись будет ниже.
						Запись.ТекущаяВерсияНаСервере = updated;
						Запись.Записать(Истина);
					КонецЕсли;
				КонецЕсли;

			КонецЕсли;

		КонецЕсли;

	ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата, // Много действий, всегда установлено в 0, надо читать данные по каждому шагу.
		ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	Если ЗаписыватьВЖурналРегистрации = Истина Тогда

		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Загрузка классификаторов'"), // ИмяСобытия
			НСтр("ru='Новости. Загрузка классификаторов'"), // ИдентификаторШага
			?(КодРезультата > 0,
				УровеньЖурналаРегистрации.Ошибка,
				УровеньЖурналаРегистрации.Информация), // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
			ОбработкаНовостей.КомментарийДляЖурналаРегистрации(
				НаименованиеПроцедурыФункции,
				ШагВыполнения,
				КонтекстВыполнения,
				"Простой"), // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции_СтандартныеСписки

// Функция возвращает объект базы данных по переданному объекту ХДТО.
//
// Параметры:
//  ОбъектХДТО    - Объект XDTO;
//  Режим         - Строка - в этот параметр передастся режим получения объекта - "Создание" или "Обновление".
//
// Возвращаемое значение:
//  ПланыВидовХарактеристикОбъект.КатегорииНовостей.
//
Функция ЗаполнитьОбъектКатегорияНовостей(ОбъектХДТО, Режим = "")

	КатегорияСсылка = ПланыВидовХарактеристик.КатегорииНовостей.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектХДТО.guid));
	Если ПустаяСтрока(КатегорияСсылка.ВерсияДанных) Тогда // Новый объект
		лкОбъект = ПланыВидовХарактеристик.КатегорииНовостей.СоздатьЭлемент();
		лкОбъект.УстановитьСсылкуНового(КатегорияСсылка);
		Режим = "Создание";
	Иначе // Объект есть в базе данных
		лкОбъект = КатегорияСсылка.ПолучитьОбъект();
		Режим = "Обновление";
	КонецЕсли;

	лкОбъект.ПометкаУдаления = ОбъектХДТО.DeletionMark;
	лкОбъект.Код             = ОбъектХДТО.Code;
	лкОбъект.Наименование    = ОбъектХДТО.Description;

	Если ВРег(ОбъектХДТО.ValueType) = ВРег("Булево") Тогда
		лкОбъект.ТипЗначения = Новый ОписаниеТипов(ОбъектХДТО.ValueType);
		лкОбъект.ТипЗначенияВспомогательный = Перечисления.ТипыЗначенийКатегорийНовостей.Булево;
	ИначеЕсли ВРег(ОбъектХДТО.ValueType) = ВРег("Дата") Тогда
		лкОбъект.ТипЗначения = Новый ОписаниеТипов(ОбъектХДТО.ValueType);
		лкОбъект.ТипЗначенияВспомогательный = Перечисления.ТипыЗначенийКатегорийНовостей.Дата;
	ИначеЕсли ВРег(ОбъектХДТО.ValueType) = ВРег("Строка") Тогда
		лкОбъект.ТипЗначения = Новый ОписаниеТипов(ОбъектХДТО.ValueType);
		лкОбъект.ТипЗначенияВспомогательный = Перечисления.ТипыЗначенийКатегорийНовостей.Строка;
	ИначеЕсли ВРег(ОбъектХДТО.ValueType) = ВРег("Число") Тогда
		лкОбъект.ТипЗначения = Новый ОписаниеТипов(ОбъектХДТО.ValueType);
		лкОбъект.ТипЗначенияВспомогательный = Перечисления.ТипыЗначенийКатегорийНовостей.Число;
	ИначеЕсли ВРег(ОбъектХДТО.ValueType) = ВРег("СправочникСсылка.ЗначенияКатегорийНовостей") Тогда
		лкОбъект.ТипЗначения = Новый ОписаниеТипов(ОбъектХДТО.ValueType);
		лкОбъект.ТипЗначенияВспомогательный = Перечисления.ТипыЗначенийКатегорийНовостей.СправочникСсылка_ЗначенияКатегорийНовостей;
	ИначеЕсли ВРег(ОбъектХДТО.ValueType) = ВРег("СправочникСсылка.ИнтервалыВерсийПродукта") Тогда
		лкОбъект.ТипЗначения = Новый ОписаниеТипов("Строка"); // В базе чтения новостей нет специального справочника ИнтервалыВерсийПродукта, он заменен на регистр сведений.
		лкОбъект.ТипЗначенияВспомогательный = Перечисления.ТипыЗначенийКатегорийНовостей.СправочникСсылка_ИнтервалыВерсийПродукта;
	Иначе
		// Ошибочный тип заменить на строку
		лкОбъект.ТипЗначения = Новый ОписаниеТипов("Строка");
		лкОбъект.ТипЗначенияВспомогательный = Перечисления.ТипыЗначенийКатегорийНовостей.Строка;
	КонецЕсли;

	лкОбъект.ЗаполняетсяАвтоматически    = ОбъектХДТО.AutoFill;
	лкОбъект.ОтборНастраиваетсяНаСервере = ОбъектХДТО.FilterOnServer;
	// Только если это тип "СправочникСсылка.ЗначенияКатегорийНовостей", для других
	//  типов (булево, число, дата, строка) надо принудительно сбрасывать.
	лкОбъект.ОбновляетсяССервера         = Ложь;
	Если лкОбъект.ТипЗначения.Типы().Количество() >= 1 Тогда
		Если лкОбъект.ТипЗначения.Типы()[0] = Тип("СправочникСсылка.ЗначенияКатегорийНовостей") Тогда
			лкОбъект.ОбновляетсяССервера = Истина;
		КонецЕсли;
	КонецЕсли;

	// Любую загруженную с сервера категорию помечать как загруженную, чтобы ее нельзя было изменить интерактивно.
	лкОбъект.ЗагруженоССервера = Истина;

	// Переопределение заполнения объекта реализовано в
	//  ОбработкаНовостейПереопределяемый.ДополнительноОбработатьКлассификаторПослеПолученияПослеЗаписи();
	// Объект должен быть обязательно записан, чтобы не было ошибок при записи связанных регистров сведений.

	Возврат лкОбъект;

КонецФункции

// Функция возвращает объект базы данных по переданному объекту ХДТО.
//
// Параметры:
//  ОбъектХДТО    - Объект XDTO;
//  Режим         - Строка - в этот параметр передастся режим получения объекта - "Создание" или "Обновление".
//
// Возвращаемое значение:
//  СправочникОбъект.ЗначенияКатегорийНовостей.
//
Функция ЗаполнитьОбъектЗначениеКатегорииНовостей(лкВладелец, ОбъектХДТО, Режим = "")

	ЗначениеКатегорииНовостейСсылка = Справочники.ЗначенияКатегорийНовостей.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектХДТО.guid));
	Если ПустаяСтрока(ЗначениеКатегорииНовостейСсылка.ВерсияДанных) Тогда // Новый объект
		лкОбъект = Справочники.ЗначенияКатегорийНовостей.СоздатьЭлемент();
		лкОбъект.УстановитьСсылкуНового(ЗначениеКатегорииНовостейСсылка);
		Режим = "Создание";
	Иначе // Объект есть в базе данных
		лкОбъект = ЗначениеКатегорииНовостейСсылка.ПолучитьОбъект();
		Режим = "Обновление";
	КонецЕсли;

	лкОбъект.ПометкаУдаления = ОбъектХДТО.DeletionMark;
	лкОбъект.Код             = ОбъектХДТО.Code;
	лкОбъект.Наименование    = ОбъектХДТО.Description;
	// Владельца берем не из xml, а из параметров функции.
	лкОбъект.Владелец        = лкВладелец;
	// Найти родителя. Если не найден - ничего не заполняем.
	лкОбъект.Родитель = Справочники.ЗначенияКатегорийНовостей.ПустаяСсылка();
	Если ОбъектХДТО.parentGuid <> Неопределено Тогда
		РодительСсылка = Справочники.ЗначенияКатегорийНовостей.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектХДТО.parentGuid));
		Если НЕ ПустаяСтрока(РодительСсылка.ВерсияДанных) Тогда // Есть такой элемент в базе данных
			лкОбъект.Родитель = РодительСсылка;
		КонецЕсли;
	КонецЕсли;

	// Переопределение заполнения объекта реализовано в
	//  ОбработкаНовостейПереопределяемый.ДополнительноОбработатьКлассификаторПослеПолученияПослеЗаписи();
	// Объект должен быть обязательно записан, чтобы не было ошибок при записи связанных регистров сведений.

	Возврат лкОбъект;

КонецФункции

// Функция возвращает объект базы данных по переданному объекту ХДТО.
//
// Параметры:
//  ОбъектХДТО         - Объект XDTO;
//  Режим              - Строка - в этот параметр передастся режим получения объекта - "Создание" или "Обновление";
//  КонтекстВыполнения - Структура, Неопределено - структура контекста выполнения.
//
// Возвращаемое значение:
//  СправочникОбъект.ЛентыНовостей.
//
Функция ЗаполнитьОбъектЛентаНовостей(ОбъектХДТО, Режим = "", КонтекстВыполнения = Неопределено)

	НаименованиеПроцедурыФункции = "Обработка.УправлениеНовостями.ЗаполнитьОбъектЛентаНовостей"; // Идентификатор.
	ЗаписыватьВЖурналРегистрации = Ложь;
	Если КонтекстВыполнения = Неопределено Тогда
		КонтекстВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
		ЗаписыватьВЖурналРегистрации = Истина;
	КонецЕсли;
	КодРезультата = 0;
	ОписаниеРезультата = "";
	КонтекстВыполненияВложенный = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Контекст "по шагам".
	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		НаименованиеПроцедурыФункции, // Идентификатор.
		НСтр("ru='Заполнение объекта Лента новостей'"));

		ТипОбъектXDTO   = Тип("ОбъектXDTO");
		ТипСвойствоXDTO = Тип("СвойствоXDTO");
		ТипСписокXDTO   = Тип("СписокXDTO");

		ЛентаНовостейСсылка = Справочники.ЛентыНовостей.ПолучитьСсылку(Новый УникальныйИдентификатор(ОбъектХДТО.guid));
		Если ПустаяСтрока(ЛентаНовостейСсылка.ВерсияДанных) Тогда // Новый объект
			лкОбъект = Справочники.ЛентыНовостей.СоздатьЭлемент();
			лкОбъект.УстановитьСсылкуНового(ЛентаНовостейСсылка);
			Режим = "Создание"; // Идентификатор.
		Иначе // Объект есть в базе данных
			лкОбъект = ЛентаНовостейСсылка.ПолучитьОбъект();
			Режим = "Обновление"; // Идентификатор.
		КонецЕсли;

		лкОбъект.ПометкаУдаления        = ОбъектХДТО.DeletionMark;
		лкОбъект.Код                    = ОбъектХДТО.Code;
		лкОбъект.Наименование           = ОбъектХДТО.Description;
		лкОбъект.Комментарий            = ОбъектХДТО.Comment;
		лкОбъект.ОбязательныйКанал      = ОбъектХДТО.alwaysEnabled;
		лкОбъект.Сайт                   = ОбъектХДТО.site;
		лкОбъект.ИмяФайла               = ОбъектХДТО.file;
		лкОбъект.Протокол               = ОбъектХДТО.protocol;
		лкОбъект.ЧастотаОбновления      = ОбъектХДТО.updateRate; // 0 - не обновлять автоматически (только вручную), 1 - ежедневно, 2 - каждый час, 3 - каждые 15 минут, 4 - каждую минуту.
		лкОбъект.ЗагруженоССервера      = Истина;
		лкОбъект.ЛокальнаяЛентаНовостей = Ложь; // Загруженная с сервера лента новостей не может быть локально-обновляемой.
		лкОбъект.ВариантЛогинаПароля    = Перечисления.ВариантЛогинаПароляДляЛентыНовостей.ВебИТС; // Ленты новостей, загруженные с сервера 1С, проходят авторизацию по логину / паролю ВебИТС.
		// Если объект ленты новостей только что создан, то у него установлена видимость по-умолчанию = Ложь
		//  и нет списка исключений (табличная часть ИсключенияВидимости пустая).
		//  А это значит, что лента будет невидима для всех. Поэтому надо явно включить ВидимостьПоУмолчанию = Истина.
		Если лкОбъект.ВидимостьПоУмолчанию = Ложь Тогда
			Если лкОбъект.ИсключенияВидимости.Количество() = 0 Тогда
				лкОбъект.ВидимостьПоУмолчанию = Истина;
			КонецЕсли;
		КонецЕсли;

		// Табличная часть "ДоступныеКатегорииНовостей".
		Если ТипЗнч(ОбъектХДТО.categoriesRefList) = ТипОбъектXDTO Тогда
			СвойствоКатегория = ОбъектХДТО.categoriesRefList.Свойства().Получить("categoryRef"); // простой тип
			Если ТипЗнч(СвойствоКатегория) = ТипСвойствоXDTO Тогда
				Если ТипЗнч(ОбъектХДТО.categoriesRefList.categoryRef) = ТипСписокXDTO Тогда // Правильно сработает, даже если передали только одно значение.

					// В справочнике лент новостей список доступных категорий новостей уже может быть заполнен.
					// Причем часть колонок заполняются на клиенте (например, РазрешеноНастраиватьПользователям).
					// Поэтому нельзя просто очистить табличную часть и загрузить ее заново -
					//  необходимо выгрузить список категорий в отдельный массив и потом пройти по доступным категориям
					//  в ленте новостей в текущей базе - добавить новые категории; удалить те, которые были удалены; остальные не трогать.

					МассивДоступныхКатегорий = Новый Массив;
					Для каждого ТекущаяКатегорияХДТО Из ОбъектХДТО.categoriesRefList.categoryRef Цикл
						// Найти категорию по Code.
						// Если такой категории нет, то не добавлять.
						лкКатегория = ПланыВидовХарактеристик.КатегорииНовостей.НайтиПоКоду(ТекущаяКатегорияХДТО.Code);
						Если НЕ лкКатегория.Пустая() Тогда
							МассивДоступныхКатегорий.Добавить(лкКатегория);
						КонецЕсли;
					КонецЦикла;

					// Удалить категории, которые были удалены.
					БылиУдаления = Истина;
					Пока БылиУдаления = Истина Цикл
						БылиУдаления = Ложь;
						Для каждого ТекущаяКатегория Из лкОбъект.ДоступныеКатегорииНовостей Цикл
							КатегорияЕстьНаСервере = ?(МассивДоступныхКатегорий.Найти(ТекущаяКатегория.КатегорияНовостей) = Неопределено, Ложь, Истина);
							Если КатегорияЕстьНаСервере = Ложь Тогда
								ОписаниеРезультата = ОписаниеРезультата
									+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru='Из ленты новостей %1 удалена категория %2.'"),
										СокрЛП(лкОбъект.Наименование),
										СокрЛП(ТекущаяКатегория.КатегорияНовостей.Наименование))
									+ Символы.ПС;
								лкОбъект.ДоступныеКатегорииНовостей.Удалить(ТекущаяКатегория);
								БылиУдаления = Истина;
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;

					// Добавить новые категории.
					Для каждого ТекущаяКатегория Из МассивДоступныхКатегорий Цикл
						КатегорияЕстьНаКлиенте = ?(лкОбъект.ДоступныеКатегорииНовостей.Найти(ТекущаяКатегория, "КатегорияНовостей") = Неопределено, Ложь, Истина);
						Если КатегорияЕстьНаКлиенте = Ложь Тогда
							ОписаниеРезультата = ОписаниеРезультата
								+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru='В ленте новостей %1 добавлена категория %2.'"),
									СокрЛП(лкОбъект.Наименование),
									СокрЛП(ТекущаяКатегория.Наименование))
								+ Символы.ПС;
							НоваяСтрока = лкОбъект.ДоступныеКатегорииНовостей.Добавить();
							НоваяСтрока.КатегорияНовостей                 = ТекущаяКатегория;
							НоваяСтрока.РазрешеноНастраиватьПользователям = Ложь;
							НоваяСтрока.ОтборНастраиваетсяНаСервере       = ТекущаяКатегория.ОтборНастраиваетсяНаСервере; // ОтборНастраиваетсяНаСервере берется из свойств самой категории.
						КонецЕсли;
					КонецЦикла;

				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

		// Переопределение заполнения объекта реализовано в
		//  ОбработкаНовостейПереопределяемый.ДополнительноОбработатьКлассификаторПослеПолученияПослеЗаписи();
		// Объект должен быть обязательно записан, чтобы не было ошибок при записи связанных регистров сведений.

	ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата, // Много действий, всегда установлено в 0, надо читать данные по каждому шагу.
		ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	Если ЗаписыватьВЖурналРегистрации = Истина Тогда

		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Загрузка классификаторов'"), // ИмяСобытия
			НСтр("ru='Новости. Загрузка классификаторов'"), // ИдентификаторШага
			?(КодРезультата > 0,
				УровеньЖурналаРегистрации.Ошибка,
				УровеньЖурналаРегистрации.Информация), // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
			ОбработкаНовостей.КомментарийДляЖурналаРегистрации(
				НаименованиеПроцедурыФункции,
				ШагВыполнения,
				КонтекстВыполнения,
				"Простой"), // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

	Возврат лкОбъект;

КонецФункции

// Функция подключается к веб-сервису обновления стандартных классификаторов.
//
// Параметры:
//  КонтекстВыполнения - Структура, Неопределено - структура контекста выполнения.
//
// Возвращаемое значение:
//  WSПрокси или Неопределено (в случае ошибки).
//
Функция ПодключитьсяКВебСервисуОбновленияСтандартныхСписков(КонтекстВыполнения = Неопределено)

	НаименованиеПроцедурыФункции = "Обработка.УправлениеНовостями.ПодключитьсяКВебСервисуОбновленияСтандартныхСписков"; // Идентификатор.
	ЗаписыватьВЖурналРегистрации = Ложь;
	Если КонтекстВыполнения = Неопределено Тогда
		КонтекстВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Этот контекст.
		ЗаписыватьВЖурналРегистрации = Истина;
	КонецЕсли;
	КодРезультата = 0;
	ОписаниеРезультата = "";
	КонтекстВыполненияВложенный = ИнтернетПоддержкаПользователейКлиентСервер.НоваяЗаписьРезультатовВыполненияОпераций(); // Контекст "по шагам".
	ИнтернетПоддержкаПользователейКлиентСервер.НачатьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		НаименованиеПроцедурыФункции, // Идентификатор.
		НСтр("ru='Подключение к веб-сервису обновления классификаторов'"));

		ТипWSПрокси = Тип("WSПрокси");

		МестоположениеWSDL = ОбработкаНовостей.ПолучитьАдресWSDLОпределенияВебСервисаInformation();

		ОписаниеРезультата = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru='Начало загрузки стандартных списков
				|МестоположениеWSDL = %1'"),
			МестоположениеWSDL)
			+ Символы.ПС;

		// Таймаут и количество попыток соединения - брать из настроек.
		НастройкиПолученияНовостей = ХранилищаНастроек.НастройкиНовостей.Загрузить(
			"НастройкиПолученияНовостей",
			,
			,
			""); // Для всех пользователей

		Таймаут = НастройкиПолученияНовостей.ВебСервисыТаймаутСоединенияСекунд;

		Попытка

			ПараметрыПрокси = ОбщегоНазначения.ПараметрыПодключенияWSПрокси();
			ПараметрыПрокси.АдресWSDL              = МестоположениеWSDL;
			ПараметрыПрокси.URIПространстваИмен    = "http://v8.1c.ru/news1c/ws/Information";
			ПараметрыПрокси.ИмяСервиса             = "Information";
			ПараметрыПрокси.ИмяТочкиПодключения    = "InformationSoap";
			ПараметрыПрокси.ИмяПользователя        = "";
			ПараметрыПрокси.Пароль                 = "";
			ПараметрыПрокси.Таймаут                = Таймаут;
			ПараметрыПрокси.ДелатьКонтрольныйВызов = Ложь;
			Прокси = ОбщегоНазначения.СоздатьWSПрокси(ПараметрыПрокси);

			Если ТипЗнч(Прокси) <> ТипWSПрокси Тогда
				ОписаниеРезультата = ОписаниеРезультата
					+ НСтр("ru='Неудачное подключение к веб-сервису обновления стандартных списков'");
			Иначе
				ОписаниеРезультата = ОписаниеРезультата
					+ НСтр("ru='Успешное подключение к веб-сервису обновления стандартных списков'");
			КонецЕсли;

		Исключение

			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ОписаниеРезультата = ОписаниеРезультата
				+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru='Неудачное подключение к веб-сервису обновления стандартных списков по причине:
						|%1'"),
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));

		КонецПопытки;

	ШагВыполнения = ИнтернетПоддержкаПользователейКлиентСервер.ЗавершитьРегистрациюРезультатаВыполненияОперации(
		КонтекстВыполнения,
		КодРезультата, // Много действий, всегда установлено в 0, надо читать данные по каждому шагу.
		ОписаниеРезультата,
		КонтекстВыполненияВложенный);

	Если ЗаписыватьВЖурналРегистрации = Истина Тогда

		ИнтернетПоддержкаПользователей.ЗаписатьСообщениеВЖурналРегистрации(
			НСтр("ru='БИП:Новости.Загрузка классификаторов'"), // ИмяСобытия
			НСтр("ru='Новости. Загрузка классификаторов. Соединение с веб-сервисом обновления стандартных списков'"), // ИдентификаторШага
			?(КодРезультата > 0,
				УровеньЖурналаРегистрации.Ошибка,
				УровеньЖурналаРегистрации.Информация), // УровеньЖурналаРегистрации.*
			, // ОбъектМетаданных
			(ШагВыполнения.ВремяОкончания - ШагВыполнения.ВремяНачала), // Данные
			ОбработкаНовостей.КомментарийДляЖурналаРегистрации(
				НаименованиеПроцедурыФункции,
				ШагВыполнения,
				КонтекстВыполнения,
				"Простой"), // Комментарий
			ОбработкаНовостейПовтИсп.ВестиПодробныйЖурналРегистрации()); // ВестиПодробныйЖурналРегистрации

	КонецЕсли;

	Возврат Прокси;

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли