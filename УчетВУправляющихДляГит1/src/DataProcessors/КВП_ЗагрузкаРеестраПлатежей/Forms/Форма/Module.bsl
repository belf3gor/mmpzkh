
////////////////////////////////////////////////////////////////////////////////
// ВИДИМОСТЬ И ОФОРМЛЕНИЕ ФОРМЫ

#Область ВидимостьИОформлениеФормы

&НаСервере
// Устанавливает видимость элементов.
//
Процедура УправлениеФормой()
	
	Элементы.ТаблицаРеестра.ПодчиненныеЭлементы.ТаблицаРеестраУслуга.Видимость             = Ложь;
	Элементы.ТаблицаРеестра.ПодчиненныеЭлементы.ТаблицаРеестраВидУслуги.Видимость          = Ложь;
	Элементы.ТаблицаРеестра.ПодчиненныеЭлементы.ТаблицаРеестраНоменклатураУслуги.Видимость = Ложь;
	
	НастройкиСоответствияПолей = Объект.ФорматФайлаЗагрузки.НастройкиСоответствияПолей;
	
	Если ЗначениеЗаполнено(Объект.ФорматФайлаЗагрузки)
	   И Объект.ФорматФайлаЗагрузки.ВидОперации
	     = ПредопределенноеЗначение("Перечисление.КВП_ВидыНастроекЗагрузкиИзАС.ЗагрузкаИзСистемПриемаПлатежей") Тогда
		
		Элементы.ТаблицаРеестра.ПодчиненныеЭлементы.ТаблицаРеестраИспользование.Видимость = Истина;
		
		ПараметрыЗагрузки = ПолучитьСписокПараметровСистемыЗагрузкиПлатежей();
		Для Каждого ТекПараметр Из ПараметрыЗагрузки Цикл
			ИмяКолонки = ОпределитьИмяКолонки(НастройкиСоответствияПолей, ТекПараметр, СтруктураЗначенийПолей);
			Элементы.ТаблицаРеестра.ПодчиненныеЭлементы["ТаблицаРеестра" + ИмяКолонки].Видимость = Ложь;
		КонецЦикла;
		
		Элементы.ТаблицаРеестра.ПодчиненныеЭлементы.ТаблицаРеестраДата.Видимость = Истина;
		
		массивПараметров = ПолучитьМассивПараметровФорматаЗагрузки(Объект.ФорматФайлаЗагрузки);
		Для Каждого ТекПараметр Из массивПараметров Цикл
			
			Если ТекПараметр = ПредопределенноеЗначение("Перечисление.КВП_ПараметрыСистемыЗагрузкиПлатежей.Штрихкод") Тогда
				
				Элементы.ТаблицаРеестраШтрихкод.Видимость    = Истина;
				Элементы.ТаблицаРеестраЛицевойСчет.Видимость = Истина;
				Элементы.ТаблицаРеестраСумма.Видимость       = Истина;
				
				Если ВШтрихкодеЕстьПериодОплаты Тогда
					Элементы.ТаблицаРеестраПериодОплаты.Видимость = Истина;
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(ТекПараметр) Тогда
				ИмяКолонки = ОпределитьИмяКолонки(НастройкиСоответствияПолей, ТекПараметр, СтруктураЗначенийПолей);
				Элементы.ТаблицаРеестра.ПодчиненныеЭлементы["ТаблицаРеестра" + ИмяКолонки].Видимость = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Элементы.ТаблицаРеестра.ПодчиненныеЭлементы.ТаблицаРеестраДокРегистрацияОплаты.Видимость = Ложь;
		Элементы.ТаблицаРеестра.ПодчиненныеЭлементы.ТаблицаРеестраДокПоступлениеНаРС.Видимость   = Ложь;
		
		Для Каждого ВыбрДок Из Объект.НастройкаЗаполнения Цикл
			Если ВыбрДок.Документ = "Регистрация оплаты" И ВыбрДок.Пометка Тогда
				Элементы.ТаблицаРеестра.ПодчиненныеЭлементы.ТаблицаРеестраДокРегистрацияОплаты.Видимость = Истина;
			ИначеЕсли ВыбрДок.Документ = "Поступление на расчетный счет" И ВыбрДок.Пометка Тогда
				Элементы.ТаблицаРеестра.ПодчиненныеЭлементы.ТаблицаРеестраДокПоступлениеНаРС.Видимость   = Истина;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		Элементы.ТаблицаРеестра.ПодчиненныеЭлементы.ТаблицаРеестраИспользование.Видимость = Ложь;
		
		ПараметрыЗагрузки = ПолучитьСписокПараметровСистемыЗагрузкиПлатежей();
		Для Каждого ТекПараметр Из ПараметрыЗагрузки Цикл
			Элементы.ТаблицаРеестра.ПодчиненныеЭлементы["ТаблицаРеестра" + ОпределитьИмяКолонки(НастройкиСоответствияПолей, ТекПараметр, СтруктураЗначенийПолей)].Видимость = Ложь;
		КонецЦикла;
		
		Элементы.ТаблицаРеестра.ПодчиненныеЭлементы.ТаблицаРеестраДокРегистрацияОплаты.Видимость = Ложь;
		Элементы.ТаблицаРеестра.ПодчиненныеЭлементы.ТаблицаРеестраДокПоступлениеНаРС.Видимость   = Ложь;
		
	КонецЕсли;
	
	Элементы.ИмяФайлаЗагрузки.Заголовок = ?(Объект.ЗагружатьИзКаталога, "Каталог загрузки", "Файл загрузки");
	
	// Управление видимостью варианта распределения оплат по кап. ремонту.
	Элементы.УстановитьВариантРаспределенияОплатКапРемонт.Видимость     = мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет;
	Элементы.ТаблицаРеестраВариантРаспределенияОплатКапРемонт.Видимость = мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет;
	
	Элементы.ГиперссылкаКонтрагент.Заголовок = Объект.Контрагент;
	Элементы.ГиперссылкаДоговор.Заголовок    = Объект.ДоговорКонтрагента;
	
	Элементы.ГруппаДокументРасчета.Видимость = Объект.КорректировкаДолга;
	Элементы.ДокументРасчета.Видимость       = Объект.КорректировкаДолга;
	Элементы.ГиперссылкаКонтрагент.Видимость = Объект.КорректировкаДолга;
	Элементы.ГиперссылкаДоговор.Видимость    = Объект.КорректировкаДолга;
	
	Элементы.ТаблицаРеестраНеРаспределятьОплатуНаДобровольноеСтрахование.Видимость = ВестиУчетНачисленийПоДобровольномуСтрахованию;
	
КонецПроцедуры //УстановитьВидимость()

&НаКлиенте
// Обновляет текст подсказки ввода комментария.
Процедура УстановитьПодсказкуВводаКомментария(ИмяФайла = Неопределено)
	
	// В веб-клиенте подсказка ввода комментария не используется.
	Если УПЖКХ_ТиповыеМетодыКлиентСервер.ЭтоВебКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяФайла = Неопределено Тогда
		ИмяФайла = Объект.ИмяФайлаЗагрузки;
	КонецЕсли;
	
	ОчиститьПодсказкуКомментария = Ложь;
	
	Если ПустаяСтрока(ИмяФайла) Тогда
		
		ОчиститьПодсказкуКомментария = Истина;
		
	Иначе
		
		Файл = Новый Файл(ИмяФайла);
		
		ДополнительныеПараметры = Новый Структура("ИмяФайла, Файл, ОчиститьПодсказкуКомментария", ИмяФайла, Файл, ОчиститьПодсказкуКомментария);
		ОписаниеОповещения = Новый ОписаниеОповещения("ПроверкаСуществованияФайлаЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		Файл.НачатьПроверкуСуществования(ОписаниеОповещения);
		Возврат;
		
	КонецЕсли;
	
	УстановитьПодсказкуВводаКомментарияФрагмент(ОчиститьПодсказкуКомментария);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСуществованияФайлаЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	ИмяФайла = ДополнительныеПараметры.ИмяФайла;
	Файл = ДополнительныеПараметры.Файл;
	ОчиститьПодсказкуКомментария = ДополнительныеПараметры.ОчиститьПодсказкуКомментария;
	
	
	Если Существует Тогда
		
		Если Объект.ЗагружатьИзКаталога Тогда
			ПараметрыОповещения = Новый Структура("ИмяФайла, ОчиститьПодсказкуКомментария", ИмяФайла, ОчиститьПодсказкуКомментария);
			Файл.НачатьПроверкуЭтоКаталог(Новый ОписаниеОповещения("ПроверкаНаКаталогЗавершение", ЭтотОбъект, ПараметрыОповещения));
			Возврат;
		Иначе
			ПараметрыОповещения = Новый Структура("Файл, ОчиститьПодсказкуКомментария", Файл, ОчиститьПодсказкуКомментария);
			Файл.НачатьПроверкуЭтоКаталог(Новый ОписаниеОповещения("ПроверкаНаКаталогЗавершение1", ЭтотОбъект, ПараметрыОповещения));
			Возврат;
		КонецЕсли;
		
	Иначе
		
		ОчиститьПодсказкуКомментария = Истина;
		
	КонецЕсли;
	
	УстановитьПодсказкуВводаКомментарияФрагмент(ОчиститьПодсказкуКомментария);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаНаКаталогЗавершение(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	ИмяФайла = ДополнительныеПараметры.ИмяФайла;
	ОчиститьПодсказкуКомментария = ДополнительныеПараметры.ОчиститьПодсказкуКомментария;
	
	Если ЭтоКаталог Тогда
		Элементы.Комментарий.ПодсказкаВвода = ИмяФайла;
	Иначе
		ОчиститьПодсказкуКомментария = Истина;
	КонецЕсли;
	
	УстановитьПодсказкуВводаКомментарияФрагмент(ОчиститьПодсказкуКомментария);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаНаКаталогЗавершение1(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	Файл = ДополнительныеПараметры.Файл;
	ОчиститьПодсказкуКомментария = ДополнительныеПараметры.ОчиститьПодсказкуКомментария;
	
	
	Если ЭтоКаталог Тогда
		ОчиститьПодсказкуКомментария = Истина;
	Иначе
		Элементы.Комментарий.ПодсказкаВвода = Файл.ИмяБезРасширения;
	КонецЕсли;
	
	УстановитьПодсказкуВводаКомментарияФрагмент(ОчиститьПодсказкуКомментария);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПодсказкуВводаКомментарияФрагмент(Знач ОчиститьПодсказкуКомментария)
	
	Если ОчиститьПодсказкуКомментария Тогда
		Элементы.Комментарий.ПодсказкаВвода = "";
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервере
// Загружает в табличную часть данные из файла.
//
Процедура ЗагрузитьРеестр(МассивАдресов)
	
	ИнициализацияРеквизитов();
	
	ФорматФайла = Объект.ФорматФайлаЗагрузки.ФорматФайла;
	
	// Запись временных данных во временный файл.
	СписокФайлов = Новый Массив;
	Сч = 1;
	Для Каждого СтрокаАдреса ИЗ МассивАдресов Цикл
		врДанныеФайла = ПолучитьИзВременногоХранилища(СтрокаАдреса);
		ВременныйФайл = ПолучитьИмяВременногоФайла(ФорматФайла);
		
		// Урезаем имя временного файла до 5-ти символов и
		// добавляем уникальное число. Это необходимо при подключении временного
		// файла для чтения данных.
		Если ФорматФайла = СтруктураЗначенийПолей.СпФорматовФайла[4].Значение Тогда // "DBF"
			ФайлДБФ = Новый Файл(ВременныйФайл);
			СтароеИмяФайла = ФайлДБФ.ИмяБезРасширения + ".DBF";
			НовоеИмяФайла = Прав(ФайлДБФ.ИмяБезРасширения, 5) + Сч + ".DBF";
			ВременныйФайл = СтрЗаменить(ФайлДБФ.ПолноеИмя, СтароеИмяФайла, НовоеИмяФайла);
			Сч = Сч + 1;
		КонецЕсли;
		
		врДанныеФайла.Записать(ВременныйФайл);
		
		СписокФайлов.Добавить(ВременныйФайл);
	КонецЦикла;
	
	Если Объект.ФорматФайлаЗагрузки.Кодировка = "DOS" Тогда
		КодировкаTXT = КодировкаТекста.OEM;
		КодировкаDBF = КодировкаXBase.OEM;
	Иначе
		КодировкаTXT = КодировкаТекста.ANSI;
		КодировкаDBF = КодировкаXBase.ANSI;
	КонецЕсли;
	
	ТаблицаДанныхФайла = Объект.ТаблицаРеестра.Выгрузить();
	
	Если СписокФайлов.Количество() = 0 И Объект.ЗагружатьИзКаталога Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Нет файлов для загрузки!";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ПроанализироватьСоставПолей();
	
	// TXT и CSV
	Если ФорматФайла = СтруктураЗначенийПолей.СпФорматовФайла[0].Значение // "TXT"
	 Или ФорматФайла = СтруктураЗначенийПолей.СпФорматовФайла[2].Значение Тогда // "CSV"
		
		ЗагрузитьДанныеИзТХТФайла(ТаблицаДанныхФайла, КодировкаTXT, СписокФайлов);
		
		// DBF
	ИначеЕсли ФорматФайла = СтруктураЗначенийПолей.СпФорматовФайла[4].Значение Тогда // "DBF"
		
		ЗагрузитьДанныеИзDBFФайла(ТаблицаДанныхФайла, КодировкаDBF, СписокФайлов);
		
		// XML
	ИначеЕсли ФорматФайла = СтруктураЗначенийПолей.СпФорматовФайла[3].Значение Тогда // "XML"
		
		ЗагрузитьДанныеИзXMLФайла(ТаблицаДанныхФайла, СписокФайлов);
		
	КонецЕсли;
	
	// Загрузим реестр
	Объект.ТаблицаРеестра.Загрузить(ТаблицаДанныхФайла);
	
КонецПроцедуры  //ЗагрузитьРеестр()

&НаКлиенте
// Загружает данные из файла формата XLS.
//
Процедура ЗагрузитьФайлXLS(МассивФайлов)
	
	ИнициализацияРеквизитов();
	
	Для Каждого ПутьКФайлу Из МассивФайлов Цикл
		
		Попытка
			
			АдресВременногоХранилища = "";
			
			НачатьПомещениеФайла(Новый ОписаниеОповещения("ОповещениеОЗавершенииПомещенияФайлаXLS", ЭтаФорма), АдресВременногоХранилища, ПутьКФайлу, Ложь, ЭтаФорма.УникальныйИдентификатор);
			
		Исключение
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось открыть файл данных для чтения!
			|Возможно файл поврежден или отсутствует приложение для чтения файла.");
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ОписаниеОшибки());
			
			Возврат;
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры // ЗагрузитьФайлXLS()

&НаКлиенте
// Обработчик оповещения о завершении помещения файла XLS во временное хранилище.
//
Процедура ОповещениеОЗавершенииПомещенияФайлаXLS(Результат, АдресВременногоХранилища, ИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		Файл = Новый Файл(ИмяФайла);
		ЗагрузитьФайлXLSНаСервере(АдресВременногоХранилища, Файл.Имя);
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось открыть файл данных для чтения!
		|Возможно файл поврежден или отсутствует приложение для чтения файла.");
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ОписаниеОшибки());
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Загружает данные из xls-файла
//
Процедура ЗагрузитьФайлXLSНаСервере(АдресВременногоХранилища, ИмяФайла)
	
	Попытка
		
		ПутьКВременномуФайлу = КаталогВременныхФайлов() + ИмяФайла;
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
		ДвоичныеДанные.Записать(ПутьКВременномуФайлу);
		
		ТаблицаДляЗагрузки = Новый ТабличныйДокумент;
		ТаблицаДляЗагрузки.Прочитать(ПутьКВременномуФайлу, СпособЧтенияЗначенийТабличногоДокумента.Текст);
		
		ПоследняяСтрока   = ТаблицаДляЗагрузки.ВысотаТаблицы;
		КоличествоКолонок = ТаблицаДляЗагрузки.ШиринаТаблицы;
		
		МассивДанныхФайла = ТаблицаДляЗагрузки.ПолучитьОбласть(1, 1, ПоследняяСтрока, КоличествоКолонок);
		
		СтруктураПараметровФайла = Новый Структура;
		СтруктураПараметровФайла.Вставить("ПоследняяСтрока",   ПоследняяСтрока);
		СтруктураПараметровФайла.Вставить("КоличествоКолонок", КоличествоКолонок);
		
		ЗагрузитьДанныеИзXLSФайла(МассивДанныхФайла, СтруктураПараметровФайла);
		
		УдалитьФайлы(ПутьКВременномуФайлу);
		
	Исключение
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось открыть файл данных для чтения!
		|Возможно файл поврежден или отсутствует приложение для чтения файла.");
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
// Процедура производит чтение данных из ТХТ файла-источника.
//
// Параметры:
//  ТаблицаДанныхФайла  - таблица, со структурой колонок как у файла-источника
//  Кодировка   - кодировка файла.
//
Процедура ЗагрузитьДанныеИзТХТФайла(ТаблицаДанныхФайла, Кодировка, СписокФайлов)
	
	ПризнакИтоговойСтроки      = Объект.ФорматФайлаЗагрузки.ПризнакИтоговойСтроки;
	ПризнакИтоговойСтрокиНомер = Ложь;
	Если ЗначениеЗаполнено(ПризнакИтоговойСтроки) Тогда
		Попытка
			ПризнакИтоговойСтроки = Число(ПризнакИтоговойСтроки);
			ПризнакИтоговойСтрокиНомер = Истина;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	НастройкиСоответствияПолей = Объект.ФорматФайлаЗагрузки.НастройкиСоответствияПолей.Выгрузить();
	НастройкиСоответствияПолей.Сортировать("НомерКолонки");
	
	НомерНачальнойСтрокиДанных = Объект.ФорматФайлаЗагрузки.НомерСтроки;
	
	Для Каждого ФайлЗагрузки Из СписокФайлов Цикл
		
		Текст = Новый ТекстовыйДокумент;
		Текст.Прочитать(ФайлЗагрузки, Кодировка);
		
		РазделительКолонок = СокрЛП(Объект.ФорматФайлаЗагрузки.РазделительКолонок);
		Если РазделительКолонок = "Таб" Тогда
			РазделительКолонок = Символы.Таб;
		ИначеЕсли РазделительКолонок = "Пробел" Тогда
			РазделительКолонок = Символ(32);
		КонецЕсли;
		
		КолличествоСтрок = Текст.КоличествоСтрок();
		
		Для НомерСтроки = НомерНачальнойСтрокиДанных По КолличествоСтрок Цикл
			
			СтрокаФайла = Текст.ПолучитьСтроку(НомерСтроки);
			
			Если НЕ ПризнакИтоговойСтроки = "" Тогда
				Если ПризнакИтоговойСтрокиНомер Тогда
					Если НомерСтроки = ПризнакИтоговойСтроки Тогда
						Прервать;
					КонецЕсли;
				Иначе
					Если Найти(СтрокаФайла, ПризнакИтоговойСтроки) > 0 Тогда
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если СтрДлина(СтрокаФайла) = 0 Тогда
				Продолжить;
			КонецЕсли;
			ОшибочнаяСтрока = Ложь;
			
			СтрокаРеестра = ТаблицаДанныхФайла.Добавить();
			СтрокаРеестра.Использовать = Истина;
			Индекс = 1;
			
			// Если в текущем формате реестра отсутствует поле "Дата", то  
			// по умолчанию устанавливаем текущую системную дату.
			Если ВТекущемРеестреОтсутствуетДата Тогда
				СтрокаРеестра.Дата = ТекущаяДата();
			КонецЕсли;
			
			Для Каждого ТекущаяСтрокаПараметра Из НастройкиСоответствияПолей Цикл
				
				Если ТекущаяСтрокаПараметра.НомерКолонки = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Пока Истина Цикл
					ПозицияРазделителя = Найти(СтрокаФайла, РазделительКолонок);
					Если ПозицияРазделителя = 0 Тогда
						ПозицияРазделителя = СтрДлина(СтрокаФайла) + 1;
					КонецЕсли;
					Если Индекс = ТекущаяСтрокаПараметра.НомерКолонки Тогда
						Индекс = Индекс + 1;
						Прервать;
					КонецЕсли;
					Индекс = Индекс + 1;
					СтрокаФайла = Прав(СтрокаФайла, СтрДлина(СтрокаФайла) - ПозицияРазделителя);
				КонецЦикла;
				
				Если ЗначениеЗаполнено(ТекущаяСтрокаПараметра.Параметр) Тогда
					// прочитаем значение поля из файла загрузки.
					ЗначениеПоляФайла = СокрЛП(Сред(СтрокаФайла, 1, ПозицияРазделителя - 1));
					
					Если ТекущаяСтрокаПараметра.Параметр = Перечисления.КВП_ПараметрыСистемыЗагрузкиПлатежей.Штрихкод Тогда
						
						ЗаполнитьСтрокуРеестраПоШтрихкоду(СтрокаРеестра, СокрЛП(ЗначениеПоляФайла), НомерСтроки);
						
						Если Не ШтрихкодВСтрокеПрочитан И Не ДостаточноДанныхБезШтрихкода Тогда
							ОшибочнаяСтрока = Истина;
							Прервать;
						КонецЕсли;
						
					Иначе
						
						ТипКолонки = ОпределитьИмяКолонки(НастройкиСоответствияПолей, ТекущаяСтрокаПараметра.Параметр, СтруктураЗначенийПолей);
						
						ЗначениеПоляРеестра = ПолучитьЗначениеПоляРеестра(НомерСтроки, ТипКолонки, ЗначениеПоляФайла, ТекущаяСтрокаПараметра);
						
						// Если не удалось определить значение поля реестра.
						Если ЗначениеПоляРеестра = Null Тогда
							
							// Для полей типа колонки "Дата" или "Периодоплаты" устанавливаем текущую пустую дату.
							Если ТипКолонки = "Дата" или ТипКолонки = "Периодоплаты"Тогда
								ЗначениеПоляРеестра = '00010101';
								СтрокаРеестра[ТипКолонки] = ЗначениеПоляРеестра;
								
								// Для остальных полей объявляем текущую строку ошибочной и прекращаем её чтение.
							Иначе
								ОшибочнаяСтрока = Истина;
								Прервать;
							КонецЕсли;
							
						ИначеЕсли ТипКолонки = "Лицевойсчет" И ТипЗнч(ЗначениеПоляРеестра) = Тип("Структура") Тогда
							СтрокаРеестра[ТипКолонки] = ЗначениеПоляРеестра.ЛицевойСчет;
							Если ЗначениеПоляРеестра.ПризнакОплатыПоКР И мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет Тогда
								СтрокаРеестра.ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиКапРемонт;
							ИначеЕсли мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет Тогда
								СтрокаРеестра.ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиНеКапРемонт;
							Иначе
								СтрокаРеестра.ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.ВсеУслуги;
							КонецЕсли;
						Иначе
							СтрокаРеестра[ТипКолонки] = ЗначениеПоляРеестра;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				СтрокаФайла = Прав(СтрокаФайла, СтрДлина(СтрокаФайла) - ПозицияРазделителя);
				
			КонецЦикла;
			
			Если ОшибочнаяСтрока Тогда
				// удалим строку с неопределенным значением.
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Строка №" + НомерСтроки + " не загружена.");
				ТаблицаДанныхФайла.Удалить(СтрокаРеестра);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Процедура производит чтение данных из DBF файла-источника.
//
//  ТаблицаДанныхФайла  - таблица, со структурой колонок как у файла-источника
//  Кодировка   - кодировка файла.
//
Процедура ЗагрузитьДанныеИзDBFФайла(ТаблицаДанныхФайла, Кодировка, СписокФайлов)
	
	НастройкиСоответствияПолей = Объект.ФорматФайлаЗагрузки.НастройкиСоответствияПолей;
	
	НомерНачальнойСтроки = Объект.ФорматФайлаЗагрузки.НомерСтроки;
	
	Для Каждого ФайлЗагрузки Из СписокФайлов Цикл
		
		НомераКолонок = Новый Структура;
		
		// Загрузка.
		ФайлДБФ = Новый XBase;
		ФайлДБФ.Кодировка = Кодировка;
		ФайлДБФ.ОткрытьФайл(ФайлЗагрузки, , Истина);
		Если ФайлДБФ.Открыта() = Истина Тогда
			
			Для Каждого ТекущаяСтрокаПараметра Из НастройкиСоответствияПолей Цикл
				Попытка
					НомераКолонок.Вставить(ОпределитьИмяКолонки(НастройкиСоответствияПолей, ТекущаяСтрокаПараметра.Параметр, СтруктураЗначенийПолей),
											 ТекущаяСтрокаПараметра.НомерКолонки - 1);
				Исключение
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "Некорректно настроены соответствия полей";
					Сообщение.Сообщить();
					Возврат;
				КонецПопытки;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ФайлДБФ.КоличествоЗаписей() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ФайлДБФ.Перейти(НомерНачальнойСтроки);
		
		Пока НЕ ФайлДБФ.ВКонце() Цикл
			
			ОшибочнаяСтрока = Ложь;
			
			СтрокаРеестра = ТаблицаДанныхФайла.Добавить();
			СтрокаРеестра.Использовать = Истина;
			
			// Если в текущем формате реестра отсутствует поле "Дата", то  
			// по умолчанию устанавливаем текущую системную дату.
			Если ВТекущемРеестреОтсутствуетДата Тогда
				СтрокаРеестра.Дата = ТекущаяДата();
			КонецЕсли;
			
			Для Каждого ТекущаяСтрокаПараметра ИЗ НастройкиСоответствияПолей Цикл
				
				Попытка
					
					ИмяКолонки = ОпределитьИмяКолонки(НастройкиСоответствияПолей, ТекущаяСтрокаПараметра.Параметр, СтруктураЗначенийПолей);
					
					// Прочитаем значение поля из файла загрузки.
					ЗначениеПоляФайла = ФайлДБФ.ПолучитьЗначениеПоля(НомераКолонок[ИмяКолонки]);
					
					Если ИмяКолонки = "Штрихкод" Тогда
						
						ЗаполнитьСтрокуРеестраПоШтрихкоду(СтрокаРеестра, СокрЛП(ЗначениеПоляФайла), ФайлДБФ.НомерЗаписи());
						
						Если Не ШтрихкодВСтрокеПрочитан И Не ДостаточноДанныхБезШтрихкода Тогда
							ОшибочнаяСтрока = Истина;
							Прервать;
						КонецЕсли;
						
					Иначе
						
						ТипКолонки = ИмяКолонки;
						
						ЗначениеПоляРеестра = ПолучитьЗначениеПоляРеестра(ФайлДБФ.НомерЗаписи(), ТипКолонки, ЗначениеПоляФайла, ТекущаяСтрокаПараметра);
						
						// Если не удалось определить значение поля реестра.
						Если ЗначениеПоляРеестра = Null Тогда
							
							// Для полей типа колонки "Дата" или "Периодоплаты" устанавливаем текущую пустую дату.
							Если ТипКолонки = "Дата" или ТипКолонки = "Периодоплаты"Тогда
								ЗначениеПоляРеестра = '00010101';
								СтрокаРеестра[ТипКолонки] = ЗначениеПоляРеестра;
								
								// Для остальных полей объявляем текущую строку ошибочной и прекращаем её чтение.
							Иначе
								ОшибочнаяСтрока = Истина;
								Прервать;
							КонецЕсли;
							
						Иначе
							СтрокаРеестра[ТипКолонки] = ЗначениеПоляРеестра;
						КонецЕсли;
					КонецЕсли;
					
				Исключение
					ОшибочнаяСтрока = Истина;
				КонецПопытки;
			КонецЦикла;
			
			Если ОшибочнаяСтрока Тогда
				// удалим строку с неопределенным значением.
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Строка №" + ФайлДБФ.НомерЗаписи() + " не загружена.";
				Сообщение.Сообщить();
				ТаблицаДанныхФайла.Удалить(СтрокаРеестра);
			КонецЕсли;
			
			ФайлДБФ.Следующая();
		КонецЦикла;
		
		ФайлДБФ.ЗакрытьФайл();
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Процедура производит чтение данных из XLS файла-источника.
//
// Параметры:
//  ТаблицаДанныхФайла  - таблица, со структурой колонок как у файла-источника.
//
Процедура ЗагрузитьДанныеИзXLSФайла(МассивДанныхФайла, СтруктураПараметровДанныхФайла)
	
	ПризнакИтоговойСтроки      = Объект.ФорматФайлаЗагрузки.ПризнакИтоговойСтроки;
	ПризнакИтоговойСтрокиНомер = Ложь;
	Если ЗначениеЗаполнено(ПризнакИтоговойСтроки) Тогда
		Попытка
			ПризнакИтоговойСтроки = Число(ПризнакИтоговойСтроки);
			ПризнакИтоговойСтрокиНомер = Истина;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	ТаблицаДанныхДляЗагрузки = Объект.ТаблицаРеестра.Выгрузить();
	
	// Таблица значений, заполняемая данными из файла.
	ТаблицаДанныхФайла = Новый ТаблицаЗначений;
	
	// Добавляем колонки для заполнения. Количество колонок = количеству колонок в файле.
	Для ТекИндекс = 1 По СтруктураПараметровДанныхФайла.КоличествоКолонок Цикл
		ТаблицаДанныхФайла.Колонки.Добавить("Колонка" + ТекИндекс);
	КонецЦикла;
	
	// Добавляем пустые строки. Количество строк = количеству строк в файле.
	Для ТекИндекс = 1 По СтруктураПараметровДанныхФайла.ПоследняяСтрока Цикл
		ТаблицаДанныхФайла.Добавить();
	КонецЦикла;
	
	// Загружаем массивы данных в колонки таблицы данных.
	Для ТекИндексСтроки = 1 по СтруктураПараметровДанныхФайла.ПоследняяСтрока Цикл
		Для ТекИндексКолонки = 1 По СтруктураПараметровДанныхФайла.КоличествоКолонок Цикл
			Ячейка = МассивДанныхФайла.Область(ТекИндексСтроки, ТекИндексКолонки, ТекИндексСтроки, ТекИндексКолонки);
			ТаблицаДанныхФайла[ТекИндексСтроки - 1][ТекИндексКолонки - 1] = Ячейка.Текст;
		КонецЦикла;
	КонецЦикла;
	
	КонецФайла  = Ложь;
	НомерСтроки = Объект.ФорматФайлаЗагрузки.НомерСтроки;
	
	НастройкиСоответствияПолей = Объект.ФорматФайлаЗагрузки.НастройкиСоответствияПолей;
	
	Пока НЕ КонецФайла Цикл
		
		ОшибочнаяСтрока = Ложь;
		ИтоговаяСтрока  = Ложь;
		
		// Получаем следующую по индексу строку. Если этого сделать не удалось, то достигнут конец файла.
		Попытка
			ЗначениеСтроки = ТаблицаДанныхФайла[НомерСтроки - 1];
		Исключение
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Чтение файла завершено.");
			Прервать;
		КонецПопытки;
		
		Для Каждого ТекПоле Из НастройкиСоответствияПолей Цикл
			Попытка
				ЗначениеПоляФайла = ТаблицаДанныхФайла[НомерСтроки - 1][ТекПоле.НомерКолонки - 1];
				
				Если Не ПустаяСтрока(ПризнакИтоговойСтроки) Тогда
					Если (ПризнакИтоговойСтрокиНомер И НомерСтроки = ПризнакИтоговойСтроки)
					 ИЛИ Найти(ЗначениеПоляФайла, ПризнакИтоговойСтроки) > 0 Тогда
						ИтоговаяСтрока = Истина;
						Прервать;
					КонецЕсли;
				КонецЕсли;
				
				Если ПустаяСтрока(ЗначениеПоляФайла) Тогда
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Строка " + НомерСтроки + " файла: не заполнено значение поля """ + ТекПоле.Параметр + """.");
					ОшибочнаяСтрока = Истина;
				КонецЕсли;
			Исключение
				ОшибочнаяСтрока = Истина;
			КонецПопытки;
		КонецЦикла;
		
		Если ИтоговаяСтрока Тогда
			Прервать;
		КонецЕсли;
		
		СтрокаРеестра = ТаблицаДанныхДляЗагрузки.Добавить();
		СтрокаРеестра.Использовать = Истина;
		
		// Если в текущем формате реестра отсутствует поле "Дата", то  
		// по умолчанию устанавливаем текущую системную дату.
		Если ВТекущемРеестреОтсутствуетДата Тогда
			СтрокаРеестра.Дата = ТекущаяДата();
		КонецЕсли;
		
		Для Каждого ТекущаяСтрокаПараметра Из НастройкиСоответствияПолей Цикл
			
			ЗначениеПоляФайла   = СокрЛП(ТаблицаДанныхФайла[НомерСтроки - 1][ТекущаяСтрокаПараметра.НомерКолонки - 1]);
			
			Если ТекущаяСтрокаПараметра.Параметр = Перечисления.КВП_ПараметрыСистемыЗагрузкиПлатежей.Штрихкод Тогда
				
				ЗаполнитьСтрокуРеестраПоШтрихкоду(СтрокаРеестра, СокрЛП(ЗначениеПоляФайла), НомерСтроки);
				
				Если Не ШтрихкодВСтрокеПрочитан И Не ДостаточноДанныхБезШтрихкода Тогда
					ОшибочнаяСтрока = Истина;
					Прервать;
				КонецЕсли;
				
			Иначе
				
				ТипКолонки = ОпределитьИмяКолонки(НастройкиСоответствияПолей, ТекущаяСтрокаПараметра.Параметр, СтруктураЗначенийПолей);
				
				ЗначениеПоляРеестра = ПолучитьЗначениеПоляРеестра(НомерСтроки, ТипКолонки, ЗначениеПоляФайла, ТекущаяСтрокаПараметра);
				
				// Если не удалось определить значение поля реестра.
				Если ЗначениеПоляРеестра = Null Тогда
					
					// Для полей типа колонки "Дата" или "Периодоплаты" устанавливаем текущую пустую дату.
					Если ТипКолонки = "Дата" или ТипКолонки = "Периодоплаты"Тогда
						ЗначениеПоляРеестра = '00010101';
						СтрокаРеестра[ТипКолонки] = ЗначениеПоляРеестра;
						
						// Для остальных полей объявляем текущую строку ошибочной и прекращаем её чтение.
					Иначе
						ОшибочнаяСтрока = Истина;
						Прервать;
					КонецЕсли;
					
				Иначе
					СтрокаРеестра[ТипКолонки] = ЗначениеПоляРеестра;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		Если ОшибочнаяСтрока Тогда
			// удалим строку с неопределенным значением.
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Строка №" + НомерСтроки + " не загружена.";
			Сообщение.Сообщить();
			ТаблицаДанныхДляЗагрузки.Удалить(СтрокаРеестра);
		КонецЕсли;
		
		НомерСтроки = НомерСтроки + 1;
		
	КонецЦикла;
	
	Объект.ТаблицаРеестра.Загрузить(ТаблицаДанныхДляЗагрузки);
	
КонецПроцедуры

&НаСервере
// Процедура производит чтение данных из XML файла-источника.
//
// Параметры:
//  ТаблицаДанныхФайла  - таблица, со структурой колонок как у файла-источника.
//
Процедура ЗагрузитьДанныеИзXMLФайла(ТаблицаДанныхФайла, СписокФайлов)
	
	НастройкиСоответствияПолей = Объект.ФорматФайлаЗагрузки.НастройкиСоответствияПолей;
	
	Для Каждого ФайлЗагрузки Из СписокФайлов Цикл
		
		СтруктураПараметров = Новый Структура;
		МассивДляУдаления   = Новый Массив;
		
		// прочитаем XML-данные из файла загрузки.
		ЧтениеXML = Новый ЧтениеXML();
		ЧтениеXML.ОткрытьФайл(ФайлЗагрузки);
		
		Попытка
			ПостроительDOM = Новый ПостроительDOM();
			ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
		Исключение
			Продолжить;
		КонецПопытки;
		
		ЧтениеXML.Закрыть();
		
		КорневойЭлемент = ДокументDOM.ЭлементДокумента;
		
		Если Объект.ФорматФайлаЗагрузки.ВложенныеУзлы Тогда
			РекурсияПоВложеннымУзлам(КорневойЭлемент, ТаблицаДанныхФайла, СтруктураПараметров, МассивДляУдаления);
		Иначе
			РекурсияПоУзлам(КорневойЭлемент, ТаблицаДанныхФайла, СтруктураПараметров, МассивДляУдаления);
		КонецЕсли;
		
		// удалим строки с неопределенными значениями.
		Для Каждого СтрокаМассива Из МассивДляУдаления Цикл
			Попытка
				ТаблицаДанныхФайла.Удалить(СтрокаМассива);
			Исключение
			КонецПопытки;
		КонецЦикла;
		
		Если ТаблицаДанныхФайла.Количество() > 0 Тогда
			// проверим первую строку таблицы на правильность заполнения.
			СтрокаТаблицы = ТаблицаДанныхФайла[0];
			Для Каждого ТекЗначение ИЗ НастройкиСоответствияПолей Цикл
				ТекКолонка = ОпределитьИмяКолонки(НастройкиСоответствияПолей, ТекЗначение.Параметр, СтруктураЗначенийПолей);
				Если НЕ ЗначениеЗаполнено(СтрокаТаблицы[ТекКолонка]) Тогда
					СтрокаАдреса = ТекЗначение.ИмяУзла + ":" + ТекЗначение.ИмяАтрибута;
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "В настройках формата файла загрузки неверно указан адрес поля: "+ СтрокаАдреса;
					Сообщение.Сообщить();
					Возврат;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Обход вложенных узлов XML-файла.
//
Процедура РекурсияПоВложеннымУзлам(Узел, ТаблицаДанныхФайла, СтруктураПараметров, МассивДляУдаления, ПервыйОбход = Истина)
	
	Если НЕ Объект.ФорматФайлаЗагрузки.НастройкиСоответствияПолей.Найти(Узел.ИмяУзла, "ИмяУзла") = Неопределено Тогда
		
		СтруктураПараметров.Вставить("Ошибка", Ложь);
		
		// найдем строки с текущим узлом в настройках
		Отбор = Новый Структура;
		Отбор.Вставить("ИмяУзла", Узел.ИмяУзла);
		СтрокиУзла      = Объект.ФорматФайлаЗагрузки.НастройкиСоответствияПолей.НайтиСтроки(Отбор);
		ОшибочнаяСтрока = Ложь;
		
		// если в настройках содержится данный узел, добавим строчку в таблицу данных
		Если СтрокиУзла.Количество() > 0 Тогда
			СтрокаРеестра = ТаблицаДанныхФайла.Добавить();
			СтрокаРеестра.Использовать = Истина;
			
			// Если в текущем формате реестра отсутствует поле "Дата", то  
			// по умолчанию устанавливаем текущую системную дату.
			Если ВТекущемРеестреОтсутствуетДата Тогда
				СтрокаРеестра.Дата = ТекущаяДата();
			КонецЕсли;
		КонецЕсли;
		
		// обход настроек
		Для Каждого ТекСтрока Из СтрокиУзла Цикл
			
			// обход дочерних узлов текущего узла
			Для Каждого ВложенныйУзел Из Узел.ДочерниеУзлы Цикл
				
				// если имена вложенных узлов совпадают, добавим значение
				Если ВложенныйУзел.ИмяУзла = ТекСтрока.ИмяАтрибута Тогда
					
					ТипКолонки = ОпределитьИмяКолонки(СтрокиУзла, ТекСтрока.Параметр, СтруктураЗначенийПолей); // получим имя колонки
					ЗначениеПоляРеестра = ПолучитьЗначениеПоляРеестра(ТекСтрока.НомерСтроки,
																	  ТипКолонки,
																	  ВложенныйУзел.ТекстовоеСодержимое,
																	  ТекСтрока); // получим значение поля
					
					Если ТекСтрока.Параметр = Перечисления.КВП_ПараметрыСистемыЗагрузкиПлатежей.Штрихкод Тогда
						
						ЗаполнитьСтрокуРеестраПоШтрихкоду(СтрокаРеестра, СокрЛП(ЗначениеПоляРеестра), ТекСтрока.НомерСтроки);
						
						Если Не ШтрихкодВСтрокеПрочитан И Не ДостаточноДанныхБезШтрихкода Тогда
							ОшибочнаяСтрока = Истина;
							Прервать;
						КонецЕсли;
						
					Иначе
						
						// Если не удалось определить значение поля реестра.
						Если ЗначениеПоляРеестра = Null Тогда
							
							// Для полей типа колонки "Дата" или "Периодоплаты" устанавливаем текущую пустую дату.
							Если ТипКолонки = "Дата" или ТипКолонки = "Периодоплаты"Тогда
								ЗначениеПоляРеестра = '00010101';
								СтрокаРеестра[ТипКолонки] = ЗначениеПоляРеестра;
								
								// Для остальных полей объявляем текущую строку ошибочной и прекращаем её чтение.
							Иначе
								ОшибочнаяСтрока = Истина;
								Прервать;
							КонецЕсли;
							
						Иначе
							// Если значение определено, присвоим его к соответствующем значению в строке.
							СтрокаРеестра[ТипКолонки] = ЗначениеПоляРеестра;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		// добавим в ошибочные строки
		Если ОшибочнаяСтрока Тогда
			МассивДляУдаления.Добавить(СтрокаРеестра);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Узел.ЕстьДочерниеУзлы() Тогда
		Для Каждого ТекУзел Из Узел.ДочерниеУзлы Цикл
			РекурсияПоВложеннымУзлам(ТекУзел, ТаблицаДанныхФайла, СтруктураПараметров, МассивДляУдаления, ПервыйОбход);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Обход узлов XML-файла.
Процедура РекурсияПоУзлам(Узел, ТаблицаДанныхФайла, СтруктураПараметров, 
	МассивДляУдаления, ПервыйОбход = Истина)
	
	Если НЕ Объект.ФорматФайлаЗагрузки.НастройкиСоответствияПолей.Найти(Узел.ИмяУзла, "ИмяУзла") = Неопределено Тогда
		
		СтруктураПараметров.Вставить("Ошибка", Ложь);
		
		Отбор = Новый Структура;
		Отбор.Вставить("ИмяУзла", Узел.ИмяУзла);
		СтрокиУзла      = Объект.ФорматФайлаЗагрузки.НастройкиСоответствияПолей.НайтиСтроки(Отбор);
		ОшибочнаяСтрока = Ложь;
		
		Для Каждого ТекСтрока Из СтрокиУзла Цикл
			
			// получим значение атрибута.
			Если Узел.ЕстьАтрибут(ТекСтрока.ИмяАтрибута) Тогда
				ЗначениеАтрибута = Узел.ПолучитьАтрибут(ТекСтрока.ИмяАтрибута);
				
				Если НЕ ЗначениеАтрибута = Неопределено Тогда
					
					Если ПервыйОбход Тогда
						ПервыйЭлементXML = ТекСтрока.ИмяАтрибута;
						ПервыйОбход = Ложь;
					КонецЕсли;
					
					ТипКолонки = ОпределитьИмяКолонки(СтрокиУзла, ТекСтрока.Параметр, СтруктураЗначенийПолей);
					
					ОшибочнаяСтрока = Ложь;
					АдресПоля = ТекСтрока.ИмяУзла + ":" + ТекСтрока.ИмяАтрибута;
					
					Если ПервыйЭлементXML = ТекСтрока.ИмяАтрибута Тогда
						СтрокаРеестра = ТаблицаДанныхФайла.Добавить();
						СтрокаРеестра.Использовать = Истина;
						
						// Если в текущем формате реестра отсутствует поле "Дата", то  
						// по умолчанию устанавливаем текущую системную дату.
						Если ВТекущемРеестреОтсутствуетДата Тогда
							СтрокаРеестра.Дата = ТекущаяДата();
						КонецЕсли;
					КонецЕсли;
					
					ЗначениеПоляРеестра = ПолучитьЗначениеПоляРеестра(АдресПоля, ТипКолонки, ЗначениеАтрибута, ТекСтрока);
					
					Если ТекСтрока.Параметр = Перечисления.КВП_ПараметрыСистемыЗагрузкиПлатежей.Штрихкод Тогда
						
						ЗаполнитьСтрокуРеестраПоШтрихкоду(СтрокаРеестра, СокрЛП(ЗначениеПоляРеестра), ТекСтрока.НомерСтроки);
						
						Если Не ШтрихкодВСтрокеПрочитан И Не ДостаточноДанныхБезШтрихкода Тогда
							ОшибочнаяСтрока = Истина;
							Прервать;
						КонецЕсли;
						
					Иначе
						
						// Если не удалось определить значение поля реестра.
						Если ЗначениеПоляРеестра = Null Тогда
							
							// Для полей типа колонки "Дата" или "Периодоплаты" устанавливаем текущую пустую дату.
							Если ТипКолонки = "Дата" или ТипКолонки = "Периодоплаты"Тогда
								ЗначениеПоляРеестра = '00010101';
								СтрокаРеестра[ТипКолонки] = ЗначениеПоляРеестра;
								
								// Для остальных полей объявляем текущую строку ошибочной и прекращаем её чтение.
							Иначе
								ОшибочнаяСтрока = Истина;
								Прервать;
							КонецЕсли;
							
						Иначе
							СтрокаРеестра[ТипКолонки] = ЗначениеПоляРеестра;
						КонецЕсли;
						
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ОшибочнаяСтрока Тогда
			МассивДляУдаления.Добавить(СтрокаРеестра);
		КонецЕсли;
		
	КонецЕсли;
	
	// проверим на дочерние узлы и вызовем их обработку
	Если Узел.ЕстьДочерниеУзлы() Тогда
		Для Каждого ТекУзел Из Узел.ДочерниеУзлы Цикл
			РекурсияПоУзлам(ТекУзел, ТаблицаДанныхФайла, СтруктураПараметров, МассивДляУдаления, Истина);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Определяет значение поля соответствующего типа.
//
// Параметры:
//  НомерСтроки  - номер строки файла загрузки
//  ТипКолонки   - значение колонки реестра
//  ЗначениеПоля - значение поля файла загрузки.
//
// Возвращаемое значение:
//  Значение поля реестра.
//
Функция ПолучитьЗначениеПоляРеестра(НомерСтроки, ТипКолонки, ЗначениеПоля, ТекущаяСтрокаПараметра)
	
	// получим значение поля по типу колонки
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("НомерСтроки",      НомерСтроки);
	СтруктураПараметров.Вставить("ЗначениеПоля",     ЗначениеПоля);
	СтруктураПараметров.Вставить("НаименованиеПоля", ТипКолонки);
	
	Если ТипКолонки = "Дата" ИЛИ ТипКолонки = "Периодоплаты" Тогда
		
		Возврат ПолучитьЗначениеПоляДата(НомерСтроки, ТипКолонки, ЗначениеПоля, ТекущаяСтрокаПараметра);
		
	ИначеЕсли ТипКолонки = "Лицевойсчет" Тогда
		
		СтруктураПараметров.Вставить("ТаблицаРесурс",    ДанныеФормыВЗначение(ТаблицаЛС, Тип("ТаблицаЗначений")));
		СтруктураПараметров.Вставить("Идентификатор",    ПолеИдентификацииЛС);
		СтруктураПараметров.Вставить("Сообщение",        " лицевой счет");
		
		Возврат ПолучитьЗначениеПоляОсновные(СтруктураПараметров);
		
	ИначеЕсли ТипКолонки = "Услуга" Тогда
		
		СтруктураПараметров.Вставить("ТаблицаРесурс",    ДанныеФормыВЗначение(ТаблицаУслуг, Тип("ТаблицаЗначений")));
		СтруктураПараметров.Вставить("Идентификатор",    ПолеИдентификацииУслуги);
		СтруктураПараметров.Вставить("Сообщение",        "а услуга");
		
		Возврат ПолучитьЗначениеПоляОсновные(СтруктураПараметров);
		
	ИначеЕсли ТипКолонки = "Видуслуги" Тогда
		
		СтруктураПараметров.Вставить("ТаблицаРесурс",    ДанныеФормыВЗначение(ТаблицаВидовУслуг, Тип("ТаблицаЗначений")));
		СтруктураПараметров.Вставить("Идентификатор",    ПолеИдентификацииВидаИНоменклатурыУслуги);
		СтруктураПараметров.Вставить("Сообщение",        "а услуга");
		
		Возврат ПолучитьЗначениеПоляОсновные(СтруктураПараметров);
		
	ИначеЕсли ТипКолонки = "Номенклатурауслуги" Тогда
		
		СтруктураПараметров.Вставить("ТаблицаРесурс",
		ДанныеФормыВЗначение(ТаблицаНоменклатурУслуг, Тип("ТаблицаЗначений")));
		СтруктураПараметров.Вставить("Идентификатор",    ПолеИдентификацииВидаИНоменклатурыУслуги);
		СтруктураПараметров.Вставить("Сообщение",        "а услуга");
		
		Возврат ПолучитьЗначениеПоляОсновные(СтруктураПараметров);
		
	ИначеЕсли ТипКолонки = "Сумма" Тогда
		
		Возврат ПолучитьЗначениеПоляСумма(НомерСтроки, ЗначениеПоля, ТекущаяСтрокаПараметра);
		
	Иначе
		
		Если ТипЗнч(ЗначениеПоля) = Тип("Строка") Тогда
			ЗначениеПоля = СокрЛП(ЗначениеПоля);
			Если ПустаяСтрока(ЗначениеПоля) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Строка " + НомерСтроки + " файла: не определено значение поля.";
				Сообщение.Сообщить();
				Возврат Null;
			КонецЕсли;
		КонецЕсли;
		
		Возврат ЗначениеПоля;
		
	КонецЕсли;
	
КонецФункции  // ПолучитьЗначениеПоляРеестра()

&НаСервере
// Функция получает значение поля для колонки с типом "ЛицевойСчет".
//
// Параметры:
//  СтруктураПараметров  - Структура, содержащая следующие поля:
//                         НомерСтроки  - номер строки файла загрузки
//                         ЗначениеПоля - значение поля файла загрузки
//                         НаименованиеПоля - наименование типа колонки
//                         ТаблицаРесурс - таблица значений, в которой производится поиск
//                         Идентификатор - значение для идентификации поля
//                         Сообщение - строка, добавляется при выводе сообщения об ошибке.
//
// Возвращаемое значение:
//  Значение поля реестра.
//
Функция ПолучитьЗначениеПоляОсновные(СтруктураПараметров)
	
	// Если в dbf-файле лицевой счет имел тип, отличный от строкового, то он не идентифицировался в ходе загрузки реестра.
	// Чтобы этого избежать, пытаемся привести значение лицевого счета из реестра к строковому типу.
	Если НЕ ТипЗнч(СтруктураПараметров.ЗначениеПоля) = Тип("Строка") Тогда
		
		Попытка
			СтруктураПараметров.ЗначениеПоля = Строка(СтруктураПараметров.ЗначениеПоля);
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Строка " + СтруктураПараметров.НомерСтроки + " файла: не определен" + СтруктураПараметров.Сообщение + ".";
			Сообщение.Сообщить();
			Возврат Null;
		КонецПопытки;
		
	КонецЕсли;
	
	ЗначениеПоля = СтрЗаменить(СтруктураПараметров.ЗначениеПоля, Символы.НПП, "");
	ЗначениеПоля = СокрЛП(ЗначениеПоля);
	
	Если ПустаяСтрока(ЗначениеПоля) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Строка " + СтруктураПараметров.НомерСтроки + " файла: не определен" + СтруктураПараметров.Сообщение + ".";
		Сообщение.Сообщить();
		Возврат Null;
	КонецЕсли;
	
	// поиск по таблице-ресурсу.
	
	СоответствиеУстановлено = Ложь;
	
	Если СтруктураПараметров.Идентификатор = "Штрихкод" Тогда // лицевой счет определяется по штрихкоду в Настройках загрузки/выгрузки.
		
		ПараметрыИзШтрихкода = ПрочитатьШтрихКод(ЗначениеПоля);
		
		Если ШтрихкодВСтрокеПрочитан И ПараметрыИзШтрихкода.ЛицевойСчет <> Справочники.КВП_ЛицевыеСчета.ПустаяСсылка() Тогда
			Возврат ПараметрыИзШтрихкода;
		КонецЕсли;
		
	Иначе
		
		НайденнаяСтрока = СтруктураПараметров.ТаблицаРесурс.Найти(ЗначениеПоля, СтруктураПараметров.Идентификатор);
		
		Если НайденнаяСтрока = Неопределено И СтруктураПараметров.Идентификатор = "НаименованиеЛС" Тогда
			Если Лев(ЗначениеПоля, 5) <> "л/с №" И Лев(ЗначениеПоля, 5) <> "Л/С №" Тогда // пробуем добавить префикс "л/с №" для посика лицевого счета по наименованию.
				НовоеЗначение = "л/с №" + ЗначениеПоля;
				НайденнаяСтрока = СтруктураПараметров.ТаблицаРесурс.Найти(НовоеЗначение, СтруктураПараметров.Идентификатор);
				Если НайденнаяСтрока <> Неопределено Тогда
					СоответствиеУстановлено = Истина;
					Возврат НайденнаяСтрока[СтруктураПараметров.НаименованиеПоля];
				КонецЕсли;
			КонецЕсли;
			
			// Пробуем искать наименование без учета регистра букв (соответствующая просьба была у нашего пользователя).
			НовоеЗначение = НРег(ЗначениеПоля);
			НайденнаяСтрока = СтруктураПараметров.ТаблицаРесурс.Найти(НовоеЗначение, СтруктураПараметров.Идентификатор);
			Если НайденнаяСтрока <> Неопределено Тогда
				СоответствиеУстановлено = Истина;
				Возврат НайденнаяСтрока[СтруктураПараметров.НаименованиеПоля];
			Иначе
				НовоеЗначение = ВРег(ЗначениеПоля);
				НайденнаяСтрока = СтруктураПараметров.ТаблицаРесурс.Найти(НовоеЗначение, СтруктураПараметров.Идентификатор);
				Если НайденнаяСтрока <> Неопределено Тогда
					СоответствиеУстановлено = Истина;
					Возврат НайденнаяСтрока[СтруктураПараметров.НаименованиеПоля];
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли НЕ НайденнаяСтрока = Неопределено Тогда
			СоответствиеУстановлено = Истина;
			Возврат НайденнаяСтрока[СтруктураПараметров.НаименованиеПоля];
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ СоответствиеУстановлено Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Строка " + СтруктураПараметров.НомерСтроки + " файла: не определен" + СтруктураПараметров.Сообщение + " - " + ЗначениеПоля;
		Сообщение.Сообщить();
		Возврат Null;
	КонецЕсли;
	
КонецФункции

&НаСервере
// Функция получает значение поля для колонки с типом "Сумма".
//
// Параметры:
//  НомерСтроки  - номер строки файла загрузки
//  ЗначениеПоля - значение поля файла загрузки.
//  ТекущаяСтрокаПараметра - настройки параметра.
//
// Возвращаемое значение:
//  Значение поля реестра.
//
Функция ПолучитьЗначениеПоляСумма(НомерСтроки, ЗначениеПоля, ТекущаяСтрокаПараметра)
	
	Если ТипЗнч(ЗначениеПоля) = Тип("Число") Тогда
		
		Возврат ЗначениеПоля;
		
	ИначеЕсли ТипЗнч(ЗначениеПоля) = Тип("Строка") Тогда
		
		ЗначениеПоля = СокрЛП(ЗначениеПоля);
		Если ПустаяСтрока(ЗначениеПоля) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Строка " + НомерСтроки + " файла: не определено значение суммы.";
			Сообщение.Сообщить();
			Возврат Null;
		КонецЕсли;
		
		Если ТекущаяСтрокаПараметра.СимволРазделительДробнойЧасти = "Без разделителя" Тогда
			ДлинаСтроки = СтрДлина(ЗначениеПоля);
			Если ДлинаСтроки > 2 Тогда
				ЗначениеПоля = Лев(ЗначениеПоля, СтрДлина(ЗначениеПоля) - 2) + "." + Прав(ЗначениеПоля, 2);
			ИначеЕсли ДлинаСтроки = 2 Тогда
				ЗначениеПоля = "0." + ЗначениеПоля;
			ИначеЕсли ДлинаСтроки = 1 Тогда
				ЗначениеПоля = "0.0" + ЗначениеПоля;
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			Возврат Число(ЗначениеПоля);
		Исключение
		КонецПопытки;
		
		Если ТекущаяСтрокаПараметра.СимволРазделительДробнойЧасти <> "." Тогда // пользователь может указать разделитель отличный от точки
			ПозицияРазделителяДЧ = СтрЗаменить(ЗначениеПоля, ТекущаяСтрокаПараметра.СимволРазделительДробнойЧасти, ".");
		КонецЕсли;
		
		Попытка
			Возврат Число(ЗначениеПоля);
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Строка " + НомерСтроки + " файла: не определено значение суммы: " + ЗначениеПоля;
			Сообщение.Сообщить();
			Возврат Null;
		КонецПопытки;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
// Функция получает значение поля для колонки с типом "Дата".
//
// Параметры:
//  НомерСтроки  - номер строки файла загрузки
//  ТипКолонки   - значение колонки реестра
//  ЗначениеПоля - значение поля файла загрузки.
//
// Возвращаемое значение:
//  Значение поля реестра.
//
Функция ПолучитьЗначениеПоляДата(НомерСтроки, ТипКолонки, ЗначениеПоля, ТекущаяСтрокаПараметра)
	
	ТекстОшибки = "Строка " + НомерСтроки + " файла: " + " не удалось определить значение " + ?(ТипКолонки = "Дата", "даты.", "периода оплаты.");
	
	Если ТипЗнч(ЗначениеПоля) = Тип("Дата") Тогда
		
		Если ЗначениеПоля = '00010101' Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстОшибки;
			Сообщение.Сообщить();
			Возврат Null;
		КонецЕсли;
		
		Возврат ЗначениеПоля;
		
	ИначеЕсли ТипЗнч(ЗначениеПоля) = Тип("Строка") Тогда
		
		ЗначениеПоля = СокрЛП(ЗначениеПоля);
		ЗначениеПоля = СтрЗаменить(ЗначениеПоля, Символы.НПП, "");
		Если ПустаяСтрока(ЗначениеПоля) Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстОшибки;
			Сообщение.Сообщить();
			Возврат Null;
		КонецЕсли;
		
		СтрокаЗначениеПоля = ЗначениеПоля;
		СпПараметровДаты = Новый СписокЗначений;
		
		РазделительДаты      = ТекущаяСтрокаПараметра.СимволРазделительПериода;
		ФорматПериодаБезДней = ТекущаяСтрокаПараметра.ФорматПериодаБезДней;
		
		// прочитаем параметры даты из файла загрузки.
		Если РазделительДаты = СтруктураЗначенийПолей.СпРазделителиПериода[5].Значение Тогда // "Без разделителя"
			
			КолЗнаковДень  = 2;
			КолЗнаковМесяц = 2;
			Если ФорматПериодаБезДней Тогда
				Если СтрДлина(ЗначениеПоля) = 4 Тогда
					КолЗнаковГод = 2;
				ИначеЕсли СтрДлина(ЗначениеПоля) = 6 Тогда
					КолЗнаковГод = 4;
				Иначе
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ТекстОшибки;
					Сообщение.Сообщить();
					Возврат Null;
				КонецЕсли;
			ИначеЕсли СтрДлина(ЗначениеПоля) = 6 Тогда
				КолЗнаковГод = 2;
			ИначеЕсли СтрДлина(ЗначениеПоля) = 8 Тогда
				КолЗнаковГод = 4;
			Иначе
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ТекстОшибки;
				Сообщение.Сообщить();
				Возврат Null;
			КонецЕсли;
			
			Если ФорматПериодаБезДней Тогда
				ПараметрДень = 1;
			Иначе
				ПараметрДень = "";
			КонецЕсли;
			
			ПараметрМесяц = "";
			ПараметрГод   = "";
			
			спФорматДаты = Новый СписокЗначений;
			спФорматДаты.Добавить("День",  ТекущаяСтрокаПараметра.ПорядокДень);
			спФорматДаты.Добавить("Месяц", ТекущаяСтрокаПараметра.ПорядокМесяц);
			спФорматДаты.Добавить("Год",   ТекущаяСтрокаПараметра.ПорядокГод);
			спФорматДаты.СортироватьПоПредставлению(НаправлениеСортировки.Возр);
			
			Для Каждого ФорматДаты ИЗ спФорматДаты Цикл
				ПараметрДаты      = ФорматДаты.Значение;
				ДлинаЗначенияПоля = СтрДлина(ЗначениеПоля);
				
				Если ПараметрДаты = "День" Тогда
					ПараметрДень = Сред(ЗначениеПоля, 1, КолЗнаковДень);
					ЗначениеПоля = Сред(ЗначениеПоля, КолЗнаковДень + 1, ДлинаЗначенияПоля - КолЗнаковДень);
				ИначеЕсли ПараметрДаты = "Месяц" Тогда
					ПараметрМесяц = Сред(ЗначениеПоля, 1, КолЗнаковМесяц);
					ЗначениеПоля  = Сред(ЗначениеПоля, КолЗнаковМесяц + 1, ДлинаЗначенияПоля - КолЗнаковМесяц);
				ИначеЕсли ПараметрДаты = "Год" Тогда
					ПараметрГод  = Сред(ЗначениеПоля, 1, КолЗнаковГод);
					ЗначениеПоля = Сред(ЗначениеПоля, КолЗнаковГод + 1, ДлинаЗначенияПоля - КолЗнаковГод);
				КонецЕсли;
				
			КонецЦикла;
			
			Если СтрДлина(ПараметрГод) = 2 Тогда
				ПараметрГод = "20" + ПараметрГод;
			КонецЕсли;
			
		Иначе
			
			Попытка
				Возврат Дата(ЗначениеПоля);
			Исключение
			КонецПопытки;
			
			КоличествоЧастейДаты = ?(ФорматПериодаБезДней, 2, 3);
			
			Для Индекс = 1 По КоличествоЧастейДаты Цикл
				Позиция      = Найти(СтрокаЗначениеПоля, РазделительДаты);
				Если Позиция = 0 Тогда
					ПозицияПробела = Найти(СтрокаЗначениеПоля, " ");
					Если ПозицияПробела = 0 Тогда
						Позиция = СтрДлина(СтрокаЗначениеПоля) + 1;
					Иначе
						Позиция = ПозицияПробела;
					КонецЕсли;
				КонецЕсли;
				ПараметрДаты = Сред(СтрокаЗначениеПоля, 1, Позиция - 1);
				Если ПараметрДаты = "" Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = ТекстОшибки;
					Сообщение.Сообщить();
					Возврат Null;
				Иначе
					СпПараметровДаты.Добавить(ПараметрДаты);
				КонецЕсли;
				СтрокаЗначениеПоля = Прав(СтрокаЗначениеПоля, СтрДлина(СтрокаЗначениеПоля) - Позиция);
			КонецЦикла;
			
			Если ФорматПериодаБезДней Тогда
				ПараметрДень = 1;
			Иначе
				ПараметрДень = СпПараметровДаты[ТекущаяСтрокаПараметра.ПорядокДень - 1].Значение;
			КонецЕсли;
			
			ПараметрМесяц = СпПараметровДаты[ТекущаяСтрокаПараметра.ПорядокМесяц - 1].Значение;
			ПараметрГод   = СпПараметровДаты[ТекущаяСтрокаПараметра.ПорядокГод - 1].Значение;
			
			Если СтрДлина(ПараметрГод) = 2 Тогда
				ПараметрГод = "20" + ПараметрГод;
			КонецЕсли;
			
		КонецЕсли;
		
		Попытка
			Возврат Дата(Число(ПараметрГод), Число(ПараметрМесяц), Число(ПараметрДень));
		Исключение
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстОшибки;
			Сообщение.Сообщить();
			Возврат Null;
		КонецПопытки;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
// Формирует документы "Регистрация оплаты", заполняя данными из табличной части.
//
Процедура СформироватьДокументы(Параметры)
	
	/////////////////////////////////////////////////////////////////////////
	// Заполним колонку "Услуга", если услугу определяем по номенклатуре или виду услуги.
	// Так же перезаполним суммы в зависимости от типа распределения.
	
	ОплатаПоУслуге    = Параметры.ОплатаПоУслуге;
	ТаблицаРеестра    = Объект.ТаблицаРеестра.Выгрузить();
	ТаблицаОплаты     = ТаблицаРеестра.Скопировать();
	ВремТаблицаОплаты = ТаблицаОплаты.Скопировать();
	ВремТаблицаОплаты.Очистить();
	
	/////////////////////////////////////////////////////////////////////////
	// Исключим строки со снятым флажком.
	СтрокиДляУдаления = ТаблицаОплаты.НайтиСтроки(Новый Структура("Использовать", Ложь));
	Для Каждого СтрокаУдаления Из СтрокиДляУдаления Цикл
		ТаблицаОплаты.Удалить(СтрокаУдаления);
	КонецЦикла;
	
	// Исключим строки где нет периода, суммы или лицевого счета платежа.
	Массив = Новый Массив;
	Для Каждого Стр Из ТаблицаОплаты Цикл 
		Попытка
			Если Стр.Дата = '00010101' Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "В строке " + Стр.НомерСтроки + " не заполнен период платежа!";
				Сообщение.Сообщить();
			ИначеЕсли НЕ ЗначениеЗаполнено(Стр.Сумма) Тогда 
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "В строке " + Стр.НомерСтроки + " не определена сумма платежа";
				Сообщение.Сообщить();
			ИначеЕсли НЕ ЗначениеЗаполнено(Стр.ЛицевойСчет) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "В строке " + Стр.НомерСтроки + " не определен лицевой счет платежа";
				Сообщение.Сообщить();
			ИначеЕсли мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет И НЕ ЗначениеЗаполнено(Стр.ВариантРаспределенияОплатКапРемонт) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "В строке " + Стр.НомерСтроки + " не определено распределение на кап. ремонт";
				Сообщение.Сообщить();
			ИначеЕсли мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет 
				И ЗначениеЗаполнено(Стр.Услуга) Тогда
				
				НайденнаяСтрока = мСтруктураНастроекКапРемонта.СписокУслуг.НайтиПоЗначению(Стр.Услуга);
				Если (Стр.ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиКапРемонт
					И НайденнаяСтрока = Неопределено) 
					ИЛИ (Стр.ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиНеКапРемонт
					И НЕ НайденнаяСтрока = Неопределено) Тогда
					Сообщение = Новый СообщениеПользователю;
					Сообщение.Текст = "В строке " + Стр.НомерСтроки + " распределение на кап. ремонт не соответствует указанной услуге согласно списку услуг капитального ремонта";
					Сообщение.Сообщить();
				Иначе
					Массив.Добавить(Стр);
				КонецЕсли;
			Иначе
				Массив.Добавить(Стр);
			КонецЕсли;
		Исключение
			Массив.Добавить(Стр);
		КонецПопытки;
	КонецЦикла;
	
	ТаблицаОплаты = ТаблицаОплаты.Скопировать(Массив);
	
	Если ТаблицаОплаты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКолонкуУслугаИСумма(ТаблицаОплаты, ВремТаблицаОплаты, Параметры);
	
	ДокПоступлениеНаРС = Объект.НастройкаЗаполнения.НайтиСтроки(Новый Структура(" Документ, Пометка", "Поступление на расчетный счет", Истина));
	Если ДокПоступлениеНаРС.Количество() > 0 Тогда
		СкорректироватьТаблицуДляСозданияДокументовПоступленияНаРасчетныйСчет(ТаблицаОплаты);
	КонецЕсли;
	
	// формирование документов
	
	// удалим строки, имеющие сформированный документ "Регистрация оплаты".
	ТаблицаОплатыРО = ТаблицаОплаты.Скопировать();
	ТаблицаОплатыРО.Колонки.Добавить("СуммаРеестра", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(15,2)));
	
	КолСтрок = ТаблицаОплатыРО.Количество();
	Для Индекс = 1 По КолСтрок Цикл
		ТекСтрока = ТаблицаОплатыРО[КолСтрок - Индекс];
		Если ЗначениеЗаполнено(ТекСтрока.ДокРегистрацияОплаты) Тогда
			ТаблицаОплатыРО.Удалить(ТекСтрока);
		Иначе
			НайденныеСтроки = ТаблицаРеестра.НайтиСтроки(Новый Структура("ЛицевойСчет, НомерСтроки", ТекСтрока.ЛицевойСчет, ТекСтрока.НомерСтроки));
			Если НайденныеСтроки.Количество() >0 Тогда
				ТекСтрока.СуммаРеестра = НайденныеСтроки[0].Сумма;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Убираем дублирующие строки.
	Если Объект.ФорматФайлаЗагрузки.КонтрольДублированияОплат Тогда 
		
		СтруктураПоиска = Новый Структура;
		Для Каждого Колонка Из ТаблицаОплатыРО.Колонки Цикл
			Если НЕ Колонка.Имя = "НомерСтроки" Тогда
				СтруктураПоиска.Вставить(Колонка.Имя, "");
			КонецЕсли;
		КонецЦикла;
		
		ВременнаяТаблица = ТаблицаОплатыРО.СкопироватьКолонки();
		Для Каждого СтрокаТаблица Из ТаблицаОплатыРО Цикл
			
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаТаблица);
			
			НайденнаяСтрока = ВременнаяТаблица.НайтиСтроки(СтруктураПоиска);
			Если НайденнаяСтрока.Количество() = 0 Тогда
				ЗаполнитьЗначенияСвойств(ВременнаяТаблица.Добавить(), СтрокаТаблица);
			Иначе
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Ошибка в табличной части обработки: Строка """ + Строка(СтрокаТаблица.НомерСтроки)
				+ """ идентична строке """ + НайденнаяСтрока.Получить(0).НомерСтроки + """";
				Сообщение.Сообщить();
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаОплатыРО = ВременнаяТаблица;
		
	КонецЕсли;
	
	ПроизвестиКомпоновкуДанныхИСоздатьДокументы(ТаблицаОплатыРО, ОплатаПоУслуге, Параметры);// 1
	
КонецПроцедуры //СформироватьДокументы()

&НаСервере
// Удаляет строки данных, в которых для контрагента не указан счет расчета.
//
Процедура СкорректироватьТаблицуДляСозданияДокументовПоступленияНаРасчетныйСчет(ТаблицаОплаты)
	
	МассивДляУдаления = Новый Массив;
	
	ТаблицаДанных = ТаблицаОплаты.Скопировать(, "ЛицевойСчет, Дата, НомерСтроки");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаДанных.ЛицевойСчет,
	|	ТаблицаДанных.Дата,
	|	ТаблицаДанных.НомерСтроки
	|ПОМЕСТИТЬ врТаблицаДанных
	|ИЗ
	|	&ТаблицаДанных КАК ТаблицаДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	врТаблицаДанных.НомерСтроки,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Договор,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Контрагент,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Период КАК Период
	|ПОМЕСТИТЬ КонтрагентыИДоговораИзРегистра
	|ИЗ
	|	врТаблицаДанных КАК врТаблицаДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛС
	|		ПО врТаблицаДанных.ЛицевойСчет = УПЖКХ_СведенияДляВзаиморасчетовПоЛС.ЛицевойСчет
	|			И врТаблицаДанных.Дата > УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Период
	|ГДЕ
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтрагентыИДоговораИзРегистра.НомерСтроки,
	|	МАКСИМУМ(КонтрагентыИДоговораИзРегистра.Период) КАК Период
	|ПОМЕСТИТЬ втСведенияСМаксПериодом
	|ИЗ
	|	КонтрагентыИДоговораИзРегистра КАК КонтрагентыИДоговораИзРегистра
	|
	|СГРУППИРОВАТЬ ПО
	|	КонтрагентыИДоговораИзРегистра.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтрагентыИДоговораИзРегистра.НомерСтроки,
	|	КонтрагентыИДоговораИзРегистра.Договор,
	|	КонтрагентыИДоговораИзРегистра.Контрагент
	|ПОМЕСТИТЬ втКонтрагентыИДоговора
	|ИЗ
	|	КонтрагентыИДоговораИзРегистра КАК КонтрагентыИДоговораИзРегистра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСведенияСМаксПериодом КАК втСведенияСМаксПериодом
	|		ПО КонтрагентыИДоговораИзРегистра.НомерСтроки = втСведенияСМаксПериодом.НомерСтроки
	|			И КонтрагентыИДоговораИзРегистра.Период = втСведенияСМаксПериодом.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаИзРегистра.Контрагент КАК Контрагент,
	|	СчетаИзРегистра.Договор КАК Договор,
	|	СчетаИзРегистра.СчетУчетаРасчетовСПокупателем
	|ПОМЕСТИТЬ втСчетаИзРегистра
	|ИЗ
	|	РегистрСведений.СчетаУчетаРасчетовСКонтрагентами КАК СчетаИзРегистра
	|ГДЕ
	|	НЕ СчетаИзРегистра.СчетУчетаРасчетовСПокупателем = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|	И (СчетаИзРегистра.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ИЛИ СчетаИзРегистра.Организация = &Организация)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втСчетаИзРегистра.Контрагент КАК ГруппаКонтрагентов,
	|	втСчетаИзРегистра.СчетУчетаРасчетовСПокупателем
	|ПОМЕСТИТЬ втГруппыКонтрагентовСоСчетамиРасчета
	|ИЗ
	|	втСчетаИзРегистра КАК втСчетаИзРегистра
	|ГДЕ
	|	втСчетаИзРегистра.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	И втСчетаИзРегистра.Контрагент.ЭтоГруппа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втКонтрагентыИДоговора.НомерСтроки,
	|	втСчетаИзРегистра.Контрагент,
	|	втСчетаИзРегистра.Договор,
	|	втСчетаИзРегистра.СчетУчетаРасчетовСПокупателем,
	|	1 КАК ПриоритетСчета
	|ПОМЕСТИТЬ втСчетаУчетаСПриоритетами
	|ИЗ
	|	втКонтрагентыИДоговора КАК втКонтрагентыИДоговора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСчетаИзРегистра КАК втСчетаИзРегистра
	|		ПО втКонтрагентыИДоговора.Контрагент = втСчетаИзРегистра.Контрагент
	|			И втКонтрагентыИДоговора.Договор = втСчетаИзРегистра.Договор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втКонтрагентыИДоговора.НомерСтроки,
	|	втКонтрагентыИДоговора.Контрагент,
	|	втКонтрагентыИДоговора.Договор,
	|	втСчетаИзРегистра.СчетУчетаРасчетовСПокупателем,
	|	2
	|ИЗ
	|	втКонтрагентыИДоговора КАК втКонтрагентыИДоговора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСчетаИзРегистра КАК втСчетаИзРегистра
	|		ПО втКонтрагентыИДоговора.Контрагент = втСчетаИзРегистра.Контрагент
	|			И (втСчетаИзРегистра.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втКонтрагентыИДоговора.НомерСтроки,
	|	втКонтрагентыИДоговора.Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка),
	|	втГруппыКонтрагентовСоСчетамиРасчета.СчетУчетаРасчетовСПокупателем,
	|	3
	|ИЗ
	|	втКонтрагентыИДоговора КАК втКонтрагентыИДоговора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втГруппыКонтрагентовСоСчетамиРасчета КАК втГруппыКонтрагентовСоСчетамиРасчета
	|		ПО (втКонтрагентыИДоговора.Контрагент.Родитель = втГруппыКонтрагентовСоСчетамиРасчета.ГруппаКонтрагентов
	|				ИЛИ втКонтрагентыИДоговора.Контрагент.Родитель.Родитель = втГруппыКонтрагентовСоСчетамиРасчета.ГруппаКонтрагентов
	|				ИЛИ втКонтрагентыИДоговора.Контрагент.Родитель.Родитель.Родитель = втГруппыКонтрагентовСоСчетамиРасчета.ГруппаКонтрагентов
	|				ИЛИ втКонтрагентыИДоговора.Контрагент.Родитель.Родитель.Родитель.Родитель = втГруппыКонтрагентовСоСчетамиРасчета.ГруппаКонтрагентов
	|				ИЛИ втКонтрагентыИДоговора.Контрагент.Родитель.Родитель.Родитель.Родитель.Родитель = втГруппыКонтрагентовСоСчетамиРасчета.ГруппаКонтрагентов)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втКонтрагентыИДоговора.НомерСтроки,
	|	втКонтрагентыИДоговора.Контрагент,
	|	втКонтрагентыИДоговора.Договор,
	|	втСчетаИзРегистра.СчетУчетаРасчетовСПокупателем,
	|	4
	|ИЗ
	|	втКонтрагентыИДоговора КАК втКонтрагентыИДоговора,
	|	втСчетаИзРегистра КАК втСчетаИзРегистра
	|ГДЕ
	|	втСчетаИзРегистра.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	И втСчетаИзРегистра.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСчетаУчетаСПриоритетами.НомерСтроки,
	|	МИНИМУМ(втСчетаУчетаСПриоритетами.ПриоритетСчета) КАК ПриоритетСчета
	|ПОМЕСТИТЬ втМаскимальныеПриоритетыСчетов
	|ИЗ
	|	втСчетаУчетаСПриоритетами КАК втСчетаУчетаСПриоритетами
	|
	|СГРУППИРОВАТЬ ПО
	|	втСчетаУчетаСПриоритетами.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСчетаУчетаСПриоритетами.НомерСтроки,
	|	втСчетаУчетаСПриоритетами.Контрагент,
	|	втСчетаУчетаСПриоритетами.Договор,
	|	втСчетаУчетаСПриоритетами.СчетУчетаРасчетовСПокупателем
	|ПОМЕСТИТЬ втСчетаУчета
	|ИЗ
	|	втМаскимальныеПриоритетыСчетов КАК втМаскимальныеПриоритетыСчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСчетаУчетаСПриоритетами КАК втСчетаУчетаСПриоритетами
	|		ПО втМаскимальныеПриоритетыСчетов.НомерСтроки = втСчетаУчетаСПриоритетами.НомерСтроки
	|			И втМаскимальныеПриоритетыСчетов.ПриоритетСчета = втСчетаУчетаСПриоритетами.ПриоритетСчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКонтрагентыИДоговора.НомерСтроки,
	|	втКонтрагентыИДоговора.Контрагент,
	|	втКонтрагентыИДоговора.Договор,
	|	ЕСТЬNULL(втСчетаУчета.СчетУчетаРасчетовСПокупателем, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) КАК СчетУчетаРасчетовСПокупателем
	|ПОМЕСТИТЬ втИтоговая
	|ИЗ
	|	втКонтрагентыИДоговора КАК втКонтрагентыИДоговора
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСчетаУчета КАК втСчетаУчета
	|		ПО втКонтрагентыИДоговора.Контрагент = втСчетаУчета.Контрагент
	|			И (втКонтрагентыИДоговора.Договор = втСчетаУчета.Договор
	|				ИЛИ втСчетаУчета.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	|			И втКонтрагентыИДоговора.НомерСтроки = втСчетаУчета.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врТаблицаДанных.НомерСтроки,
	|	врТаблицаДанных.ЛицевойСчет,
	|	ВЫБОР
	|		КОГДА втИтоговая.Контрагент ЕСТЬ NULL 
	|				ИЛИ втИтоговая.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НайденКонтрагент,
	|	ВЫБОР
	|		КОГДА втИтоговая.Договор ЕСТЬ NULL 
	|				ИЛИ втИтоговая.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НайденДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА втИтоговая.СчетУчетаРасчетовСПокупателем ЕСТЬ NULL 
	|				ИЛИ втИтоговая.СчетУчетаРасчетовСПокупателем = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК НайденСчетУчетаРасчетовСПокупателем
	|ИЗ
	|	врТаблицаДанных КАК врТаблицаДанных
	|		ЛЕВОЕ СОЕДИНЕНИЕ втИтоговая КАК втИтоговая
	|		ПО врТаблицаДанных.НомерСтроки = втИтоговая.НомерСтроки";
	
	Запрос.УстановитьПараметр("ТаблицаДанных", ТаблицаДанных);
	Запрос.УстановитьПараметр("Организация",   Объект.Организация);
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекущаяСтрока Из ТаблицаРезультат Цикл
		Если НЕ ТекущаяСтрока.НайденКонтрагент ИЛИ НЕ ТекущаяСтрока.НайденДоговорКонтрагента Тогда
			Если НЕ ТекущаяСтрока.НайденКонтрагент Тогда
				МассивДляУдаления.Добавить(ТаблицаОплаты.Найти(ТекущаяСтрока.НомерСтроки, "НомерСтроки"));
				ТекстСообщения = "Для лицевого счета " 
				+ ТекущаяСтрока.ЛицевойСчет 
				+ " не созданы документы: ""Регистрация оплаты"", ""Поступление на расчетный счет"", так как 
				|не определен соответствующий контрагент.";
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ТекстСообщения;
				Сообщение.Сообщить();
				Продолжить;
			КонецЕсли;
			Если НЕ ТекущаяСтрока.НайденДоговорКонтрагента Тогда
				МассивДляУдаления.Добавить(ТаблицаОплаты.Найти(ТекущаяСтрока.НомерСтроки, "НомерСтроки"));
				ТекстСообщения = "Для лицевого счета " 
				+ ТекущаяСтрока.ЛицевойСчет 
				+ " не созданы документы: ""Регистрация оплаты"", ""Поступление на расчетный счет"", так как 
				|не определен договор соответствующего контрагента.";
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ТекущаяСтрока.НайденСчетУчетаРасчетовСПокупателем Тогда
			ТекстСообщения = "Для лицевого счета " 
			+ ТекущаяСтрока.ЛицевойСчет 
			+ " не созданы документы: ""Регистрация оплаты"", ""Поступление на расчетный счет"", так как для контрагента, соответствующего
			| данному лицевому счету, не указаны настройки учета оплат в регистре ""Счета расчетов с контрагентами"".";
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = ТекстСообщения;
			Сообщение.Сообщить();
			МассивДляУдаления.Добавить(ТаблицаОплаты.Найти(ТекущаяСтрока.НомерСтроки, "НомерСтроки"));
		КонецЕсли;
	КонецЦикла;
	
	Если МассивДляУдаления.Количество() > 0 Тогда
		Для Каждого СтрокаУдаления Из МассивДляУдаления Цикл
			ТаблицаОплаты.Удалить(СтрокаУдаления);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // СкорректироватьТаблицуДляСозданияДокументовПоступленияНаРасчетныйСчет()

&НаСервере
// Процедура производит компоновку данных по исходным данным из табличной части.
//
Процедура ПроизвестиКомпоновкуДанныхИСоздатьДокументы(ТаблицаОплатыРО, ОплатаПоУслуге, Параметры)
	
	// Настройка для формирования документа "Регистрация оплаты".
	Если Объект.СпособГруппировки = 1 Тогда
		ГруппироватьПоЗданиям = Ложь;
	ИначеЕсли Объект.СпособГруппировки = 2 Тогда
		ГруппироватьПоЗданиям = Истина;
	КонецЕсли;
	
	ТЗЛицевыеСчета = Новый ТаблицаЗначений();
	ТЗЛицевыеСчета.Колонки.Добавить("Объект");
	ТЗЛицевыеСчета.Колонки.Добавить("Сумма");
	ТЗЛицевыеСчета.Колонки.Добавить("НомерСтрокиРеестра");
	
	ТЗТаблицаОплат = Новый ТаблицаЗначений;
	ТЗТаблицаОплат.Колонки.Добавить("Объект",                                        Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
	ТЗТаблицаОплат.Колонки.Добавить("Сумма",                                         ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
	ТЗТаблицаОплат.Колонки.Добавить("НастройкиОплатыОбъекта",                        Новый ОписаниеТипов("ТаблицаЗначений"));
	ТЗТаблицаОплат.Колонки.Добавить("РаспределятьПоУказаннымУслугам",                Новый ОписаниеТипов("Булево"));
	ТЗТаблицаОплат.Колонки.Добавить("ДокументОплаты",                                Новый ОписаниеТипов("ДокументСсылка.ПоступлениеНаРасчетныйСчет"));
	ТЗТаблицаОплат.Колонки.Добавить("НомерСтрокиРеестра",                            Новый ОписаниеТипов("Число"));
	ТЗТаблицаОплат.Колонки.Добавить("СтороннийСчетКР",                               Новый ОписаниеТипов("Булево"));
	ТЗТаблицаОплат.Колонки.Добавить("ВариантРаспределенияОплатКапРемонт",            Новый ОписаниеТипов("ПеречислениеСсылка.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР"));
	ТЗТаблицаОплат.Колонки.Добавить("НеРаспределятьОплатуНаДобровольноеСтрахование", Новый ОписаниеТипов("Булево"));
	ТЗТаблицаОплат.Колонки.Добавить("РасчетныйСчетУслуг",                            Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"));
	ТЗТаблицаОплат.Колонки.Добавить("РасчетныйСчетУслугКапитальногоРемонта",         Новый ОписаниеТипов("СправочникСсылка.БанковскиеСчета"));
	
	ДополнитьТаблицуОплатыРО(ТаблицаОплатыРО);
	
	ТаблицаОплатыРО.Индексы.Добавить("Здание");
	
	// сгруппируем строки по дате платежа и по варианту распределения оплаты.
	СпДатПлатежа = ТаблицаОплатыРО.Скопировать();
	СпДатПлатежа.Свернуть("Дата, ВариантРаспределенияОплатКапРемонт, НеРаспределятьОплатуНаДобровольноеСтрахование");
	
	Если НЕ ГруппироватьПоЗданиям Тогда
		ТЗТаблицаОплатРО = ТЗТаблицаОплат.СкопироватьКолонки();
	КонецЕсли;
	
	// Документы "Регистрации оплаты".
	ФормироватьДокументыРО = Ложь;
	ДокРегистрацияОплаты = Объект.НастройкаЗаполнения.НайтиСтроки(Новый Структура("Документ, Пометка", "Регистрация оплаты", Истина));
	
	Если ДокРегистрацияОплаты.Количество() > 0 Тогда
		ФормироватьДокументыРО = Истина;
		ВыбрДокРО = ДокРегистрацияОплаты[0];
	КонецЕсли;
	
	// Документы "Поступление на расчетный счет".
	ФормироватьДокументыПРС = Ложь;
	ДокПоступлениеНаРС = Объект.НастройкаЗаполнения.НайтиСтроки(Новый Структура(" Документ, Пометка", "Поступление на расчетный счет", Истина));
	
	Если ДокПоступлениеНаРС.Количество() > 0 Тогда
		ФормироватьДокументыПРС = Истина;
		ВыбрДокПРС = ДокПоступлениеНаРС[0];
	Иначе
		ВыбрДокПРС = Неопределено;
	КонецЕсли;
	
	ЕстьНеСформированныеПРСпоКР = Ложь;
	
	Для Каждого СтрСпДатПлатежа Из СпДатПлатежа Цикл
		
		Если НЕ ГруппироватьПоЗданиям Тогда
			ОтборПоДате = Новый Структура;
			ОтборПоДате.Вставить("Дата",                                          СтрСпДатПлатежа.Дата);
			ОтборПоДате.Вставить("ВариантРаспределенияОплатКапРемонт",            СтрСпДатПлатежа.ВариантРаспределенияОплатКапРемонт);
			ОтборПоДате.Вставить("НеРаспределятьОплатуНаДобровольноеСтрахование", СтрСпДатПлатежа.НеРаспределятьОплатуНаДобровольноеСтрахование);
			СтрокиОтбораПоДате = ТаблицаОплатыРО.НайтиСтроки(ОтборПоДате);
			
			ТЗТаблицаОплатРО.Очистить();
		КонецЕсли;
		
		// сгруппируем строки по зданию.
		СпЗданий = ТаблицаОплатыРО.Скопировать();
		СпЗданий.Свернуть("Здание");
		
		Для Каждого СтрСпЗданий Из СпЗданий Цикл
			
			ОтборПоЗданию = Новый Структура();
			
			ОтборПоЗданию.Вставить("Дата",                                          СтрСпДатПлатежа.Дата);
			ОтборПоЗданию.Вставить("ВариантРаспределенияОплатКапРемонт",            СтрСпДатПлатежа.ВариантРаспределенияОплатКапРемонт);
			ОтборПоЗданию.Вставить("НеРаспределятьОплатуНаДобровольноеСтрахование", СтрСпДатПлатежа.НеРаспределятьОплатуНаДобровольноеСтрахование);
			ОтборПоЗданию.Вставить("Здание",                                        СтрСпЗданий.Здание);
			
			ОтборПоОбъекту = Новый Структура("Дата, ВариантРаспределенияОплатКапРемонт, НеРаспределятьОплатуНаДобровольноеСтрахование, Здание");
			ЗаполнитьЗначенияСвойств(ОтборПоОбъекту, ОтборПоЗданию);
			
			// Получим строки оплат по текущему зданию и дате платежа.
			СтрокиОтбора = ТаблицаОплатыРО.НайтиСтроки(ОтборПоЗданию);
			
			Если СтрокиОтбора.Количество() > 0 Тогда
				
				ТЗЛицевыеСчета.Очистить();
				
				Если ГруппироватьПоЗданиям Тогда
					ТЗТаблицаОплат.Очистить();
				КонецЕсли;
				
				// Получим таблицу лицевых счетов для заполнения ТЧ "Лицевые счета" документа.
				Для Каждого ТекСтрока ИЗ СтрокиОтбора Цикл
					
					Если ТекСтрока.Использовать
						И ТЗЛицевыеСчета.НайтиСтроки(Новый Структура("Объект, НомерСтрокиРеестра", ТекСтрока.ЛицевойСчет, ТекСтрока.НомерСтроки)).Количество() = 0 Тогда
						СтрокаПлатежа = ТЗЛицевыеСчета.Добавить();
						СтрокаПлатежа.Объект              = ТекСтрока.ЛицевойСчет;
						СтрокаПлатежа.Сумма               = ТекСтрока.СуммаРеестра;
						СтрокаПлатежа.НомерСтрокиРеестра  = ТекСтрока.НомерСтроки;
					КонецЕсли;
					
				КонецЦикла;
				
				// Заполним настройки распределения оплаты.
				Для Каждого СтрокаОбъекта ИЗ ТЗЛицевыеСчета Цикл
					
					ОтборПоОбъекту.Вставить("НомерСтроки", СтрокаОбъекта.НомерСтрокиРеестра);
					ОтборПоОбъекту.Вставить("ЛицевойСчет", СтрокаОбъекта.Объект);
					СтрокиОтбораПоОбъекту = ТаблицаОплатыРО.НайтиСтроки(ОтборПоОбъекту);
					
					НоваяСтрОплаты = ТЗТаблицаОплат.Добавить();
					НоваяСтрОплаты.Объект                                        = СтрокаОбъекта.Объект;
					НоваяСтрОплаты.Сумма                                         = СтрокаОбъекта.Сумма;
					НоваяСтрОплаты.ДокументОплаты                                = СтрокиОтбораПоОбъекту.Получить(0).ДокПоступлениеНаРС;
					НоваяСтрОплаты.СтороннийСчетКР                               = СтрокиОтбораПоОбъекту.Получить(0).СтороннийСчетКР;
					НоваяСтрОплаты.ВариантРаспределенияОплатКапРемонт            = СтрокиОтбораПоОбъекту.Получить(0).ВариантРаспределенияОплатКапРемонт;
					НоваяСтрОплаты.НеРаспределятьОплатуНаДобровольноеСтрахование = СтрокиОтбораПоОбъекту.Получить(0).НеРаспределятьОплатуНаДобровольноеСтрахование;
					НоваяСтрОплаты.РасчетныйСчетУслуг                            = СтрокиОтбораПоОбъекту.Получить(0).РасчетныйСчетУслуг;
					НоваяСтрОплаты.РасчетныйСчетУслугКапитальногоРемонта         = СтрокиОтбораПоОбъекту.Получить(0).РасчетныйСчетУслугКапитальногоРемонта;
					НоваяСтрОплаты.НомерСтрокиРеестра                            = СтрокаОбъекта.НомерСтрокиРеестра;
					
					ТЗНастройкиОплаты = Новый ТаблицаЗначений;
					ТЗНастройкиОплаты.Колонки.Добавить("Услуга",          Новый ОписаниеТипов("СправочникСсылка.КВП_Услуги"));
					ТЗНастройкиОплаты.Колонки.Добавить("МесяцНачисления", Новый ОписаниеТипов("Дата"));
					ТЗНастройкиОплаты.Колонки.Добавить("Сумма",           ОбщегоНазначенияБПКлиентСервер.ПолучитьОписаниеТиповЧисла(15, 2));
					
					РаспределятьПоУказаннымУслугам = Ложь;
					
					Для Каждого СтрокаНастройки ИЗ СтрокиОтбораПоОбъекту Цикл
						
						ТекущаяУслуга = Неопределено;
						
						Если ОплатаПоУслуге И ЗначениеЗаполнено(СтрокаНастройки.Услуга) Тогда
							ТекущаяУслуга = СтрокаНастройки.Услуга;
							РаспределятьПоУказаннымУслугам = Истина;
						КонецЕсли;
						
						ТекущийМесяцНачисления = Неопределено;
						
						Если ЗначениеЗаполнено(СтрокаНастройки.ПериодОплаты) Тогда
							ТекущийМесяцНачисления = НачалоМесяца(СтрокаНастройки.ПериодОплаты);
						КонецЕсли;
						
						Если ЗначениеЗаполнено(ТекущаяУслуга) ИЛИ ЗначениеЗаполнено(ТекущийМесяцНачисления) Тогда
							НоваяСтрНастройки = ТЗНастройкиОплаты.Добавить();
							НоваяСтрНастройки.Услуга          = ТекущаяУслуга;
							НоваяСтрНастройки.МесяцНачисления = ТекущийМесяцНачисления;
							НоваяСтрНастройки.Сумма           = СтрокаНастройки.Сумма;
						КонецЕсли;
						
					КонецЦикла;
					
					// Настройки оплаты услуг.
					ТЗНастройкиОплаты.Свернуть("Услуга, МесяцНачисления", "Сумма");
					Если НЕ ТЗНастройкиОплаты.Количество() = 0 Тогда
						НоваяСтрОплаты.НастройкиОплатыОбъекта = ТЗНастройкиОплаты;
						НоваяСтрОплаты.РаспределятьПоУказаннымУслугам = РаспределятьПоУказаннымУслугам;
					КонецЕсли;
					
				КонецЦикла;
				
				// Документы ПРС будем формировать отдельно, только если указано не формировать РО.
				// Если РО формируем, то и документы ПРС отразим непосредственно из РО.
				Если НЕ ФормироватьДокументыРО Тогда
					
					Для Каждого Строка Из ТЗТаблицаОплат Цикл
						
						Если ФормироватьДокументыПРС Тогда
							
							Если Строка.СтороннийСчетКР И Строка.ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиКапРемонт Тогда
								
								ЕстьНеСформированныеПРСпоКР = Истина;
								
								Если НЕ ГруппироватьПоЗданиям Тогда
									
									НоваяСтрока = ТЗТаблицаОплатРО.Добавить();
									ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
									
								КонецЕсли;
								
								Продолжить;
								
							КонецЕсли;
							
							СтрокаТаблицыОплатыРО = ТаблицаОплатыРО.Найти(Строка.НомерСтрокиРеестра, "НомерСтроки");
							
							СтруктураПараметров = Новый Структура();
							СтруктураПараметров.Вставить("Дата",                                          СтрСпДатПлатежа.Дата);
							СтруктураПараметров.Вставить("ЛицевойСчет",                                   Строка.Объект);
							СтруктураПараметров.Вставить("СуммаПлатежа",                                  Строка.Сумма);
							СтруктураПараметров.Вставить("ДокПоступлениеНаРС",                            Строка.ДокументОплаты);
							СтруктураПараметров.Вставить("РасчетныйСчетУслуг",                            Строка.РасчетныйСчетУслуг);
							СтруктураПараметров.Вставить("РасчетныйСчетУслугКапитальногоРемонта",         Строка.РасчетныйСчетУслугКапитальногоРемонта);
							СтруктураПараметров.Вставить("ВариантРаспределенияОплатКапРемонт",            СтрСпДатПлатежа.ВариантРаспределенияОплатКапРемонт);
							СтруктураПараметров.Вставить("НеРаспределятьОплатуНаДобровольноеСтрахование", Строка.НеРаспределятьОплатуНаДобровольноеСтрахование);
							
							СсылкаПоступления = Документы.ПоступлениеНаРасчетныйСчет.ПустаяСсылка();
							
							СсылкаПоступления = СформироватьДокументыПоступленияНаРС(СтрокаТаблицыОплатыРО, ВыбрДокПРС, СтруктураПараметров);
							Строка.ДокументОплаты = СсылкаПоступления;
							
						КонецЕсли;
						
						Если НЕ ГруппироватьПоЗданиям Тогда
							
							НоваяСтрока = ТЗТаблицаОплатРО.Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
							
						КонецЕсли;
						
					КонецЦикла;
				Иначе
					ТЗТаблицаОплатРО = ТЗТаблицаОплат;
				КонецЕсли;
				
				Если ФормироватьДокументыРО И ГруппироватьПоЗданиям Тогда
					СоздатьДокументРегистрацияОплаты(ТЗТаблицаОплат, СтрСпДатПлатежа.Дата, СтрСпДатПлатежа.ВариантРаспределенияОплатКапРемонт, СтрСпДатПлатежа.НеРаспределятьОплатуНаДобровольноеСтрахование, 
					ВыбрДокРО, ВыбрДокПРС, СтрСпЗданий.Здание, ФормироватьДокументыПРС);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ФормироватьДокументыРО И НЕ ГруппироватьПоЗданиям И СтрокиОтбораПоДате.Количество() > 0 Тогда
			СоздатьДокументРегистрацияОплаты(ТЗТаблицаОплатРО, СтрСпДатПлатежа.Дата, СтрСпДатПлатежа.ВариантРаспределенияОплатКапРемонт, СтрСпДатПлатежа.НеРаспределятьОплатуНаДобровольноеСтрахование, 
			ВыбрДокРО, ВыбрДокПРС, , ФормироватьДокументыПРС);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьНеСформированныеПРСпоКР Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Документы отражения сформированы не для всех строк таблицы, т.к. расчетный счет кап.ремонта некоторых строк таблицы принадлежит сторонней организации/контрагенту!";
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры // ПроизвестиКомпоновкуДанныхИСоздатьДокументы()

&НаСервере
// Процедура дополняет таблицу оплат флагом, определяющим, является ли расчетный счет капитального ремонта
// здания текущего лицевого счета расчетным счетом сторонней организации/контрагента.
//
Процедура ДополнитьТаблицуОплатыРО(ТаблицаОплатыРО)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаОплатыРО.ВариантРаспределенияОплатКапРемонт КАК ВариантРаспределенияОплатКапРемонт,
	|	ТаблицаОплатыРО.НеРаспределятьОплатуНаДобровольноеСтрахование КАК НеРаспределятьОплатуНаДобровольноеСтрахование,
	|	ТаблицаОплатыРО.ВидУслуги КАК ВидУслуги,
	|	ТаблицаОплатыРО.Дата КАК Дата,
	|	ТаблицаОплатыРО.ДокПоступлениеНаРС КАК ДокПоступлениеНаРС,
	|	ТаблицаОплатыРО.ДокРегистрацияОплаты КАК ДокРегистрацияОплаты,
	|	ТаблицаОплатыРО.Использование КАК Использование,
	|	ТаблицаОплатыРО.Использовать КАК Использовать,
	|	ТаблицаОплатыРО.ИсходныйНомерСтроки КАК ИсходныйНомерСтроки,
	|	ВЫРАЗИТЬ(ТаблицаОплатыРО.ЛицевойСчет КАК Справочник.КВП_ЛицевыеСчета) КАК ЛицевойСчет,
	|	ТаблицаОплатыРО.НоменклатураУслуги КАК НоменклатураУслуги,
	|	ТаблицаОплатыРО.НомерСтроки КАК НомерСтроки,
	|	ТаблицаОплатыРО.ПериодОплаты КАК ПериодОплаты,
	|	ТаблицаОплатыРО.Сумма КАК Сумма,
	|	ТаблицаОплатыРО.СуммаРеестра КАК СуммаРеестра,
	|	ТаблицаОплатыРО.Услуга КАК Услуга,
	|	ТаблицаОплатыРО.Штрихкод КАК Штрихкод
	|ПОМЕСТИТЬ ТаблицаОплатыРО
	|ИЗ
	|	&ТаблицаОплатыРО КАК ТаблицаОплатыРО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОплатыРО.ВариантРаспределенияОплатКапРемонт КАК ВариантРаспределенияОплатКапРемонт,
	|	ТаблицаОплатыРО.НеРаспределятьОплатуНаДобровольноеСтрахование КАК НеРаспределятьОплатуНаДобровольноеСтрахование,
	|	ТаблицаОплатыРО.ВидУслуги КАК ВидУслуги,
	|	ТаблицаОплатыРО.Дата КАК Дата,
	|	ТаблицаОплатыРО.ДокПоступлениеНаРС КАК ДокПоступлениеНаРС,
	|	ТаблицаОплатыРО.ДокРегистрацияОплаты КАК ДокРегистрацияОплаты,
	|	ТаблицаОплатыРО.Использование КАК Использование,
	|	ТаблицаОплатыРО.Использовать КАК Использовать,
	|	ТаблицаОплатыРО.ИсходныйНомерСтроки КАК ИсходныйНомерСтроки,
	|	ТаблицаОплатыРО.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаОплатыРО.ЛицевойСчет.Адрес.Владелец КАК Здание,
	|	ТаблицаОплатыРО.НоменклатураУслуги КАК НоменклатураУслуги,
	|	ТаблицаОплатыРО.НомерСтроки КАК НомерСтроки,
	|	ТаблицаОплатыРО.ПериодОплаты КАК ПериодОплаты,
	|	ТаблицаОплатыРО.Сумма КАК Сумма,
	|	ТаблицаОплатыРО.Услуга КАК Услуга,
	|	ВЫРАЗИТЬ(ТаблицаОплатыРО.Штрихкод КАК СТРОКА(1000)) КАК Штрихкод,
	|	ТаблицаОплатыРО.СуммаРеестра КАК СуммаРеестра
	|ПОМЕСТИТЬ ТаблицаОплатыРОЗдания
	|ИЗ
	|	ТаблицаОплатыРО КАК ТаблицаОплатыРО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОплатыРО.ВариантРаспределенияОплатКапРемонт КАК ВариантРаспределенияОплатКапРемонт,
	|	ТаблицаОплатыРО.НеРаспределятьОплатуНаДобровольноеСтрахование КАК НеРаспределятьОплатуНаДобровольноеСтрахование,
	|	ТаблицаОплатыРО.ВидУслуги КАК ВидУслуги,
	|	ТаблицаОплатыРО.Дата КАК Дата,
	|	ТаблицаОплатыРО.ДокПоступлениеНаРС КАК ДокПоступлениеНаРС,
	|	ТаблицаОплатыРО.ДокРегистрацияОплаты КАК ДокРегистрацияОплаты,
	|	ТаблицаОплатыРО.Использование КАК Использование,
	|	ТаблицаОплатыРО.Использовать КАК Использовать,
	|	ТаблицаОплатыРО.ИсходныйНомерСтроки КАК ИсходныйНомерСтроки,
	|	ТаблицаОплатыРО.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаОплатыРО.Здание КАК Здание,
	|	ТаблицаОплатыРО.НоменклатураУслуги КАК НоменклатураУслуги,
	|	ТаблицаОплатыРО.НомерСтроки КАК НомерСтроки,
	|	ТаблицаОплатыРО.ПериодОплаты КАК ПериодОплаты,
	|	ТаблицаОплатыРО.Сумма КАК Сумма,
	|	ТаблицаОплатыРО.Услуга КАК Услуга,
	|	ТаблицаОплатыРО.Штрихкод КАК Штрихкод,
	|	МАКСИМУМ(ТаблицаСчетов.Период) КАК МаксПериод,
	|	ТаблицаОплатыРО.СуммаРеестра КАК СуммаРеестра
	|ПОМЕСТИТЬ втТаблицаМаксПериодов
	|ИЗ
	|	ТаблицаОплатыРОЗдания КАК ТаблицаОплатыРО
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях КАК ТаблицаСчетов
	|		ПО (ТаблицаСчетов.Здание = ТаблицаОплатыРО.Здание)
	|			И (КОНЕЦПЕРИОДА(ТаблицаСчетов.Период, МЕСЯЦ) <= КОНЕЦПЕРИОДА(ТаблицаОплатыРО.Дата, МЕСЯЦ))
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаОплатыРО.ВариантРаспределенияОплатКапРемонт,
	|	ТаблицаОплатыРО.НеРаспределятьОплатуНаДобровольноеСтрахование,
	|	ТаблицаОплатыРО.ВидУслуги,
	|	ТаблицаОплатыРО.Дата,
	|	ТаблицаОплатыРО.ДокПоступлениеНаРС,
	|	ТаблицаОплатыРО.ДокРегистрацияОплаты,
	|	ТаблицаОплатыРО.Использование,
	|	ТаблицаОплатыРО.Использовать,
	|	ТаблицаОплатыРО.ИсходныйНомерСтроки,
	|	ТаблицаОплатыРО.ЛицевойСчет,
	|	ТаблицаОплатыРО.Здание,
	|	ТаблицаОплатыРО.НоменклатураУслуги,
	|	ТаблицаОплатыРО.НомерСтроки,
	|	ТаблицаОплатыРО.ПериодОплаты,
	|	ТаблицаОплатыРО.Сумма,
	|	ТаблицаОплатыРО.Услуга,
	|	ТаблицаОплатыРО.Штрихкод,
	|	ТаблицаОплатыРО.СуммаРеестра
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОплатыРО.ВариантРаспределенияОплатКапРемонт КАК ВариантРаспределенияОплатКапРемонт,
	|	ТаблицаОплатыРО.НеРаспределятьОплатуНаДобровольноеСтрахование КАК НеРаспределятьОплатуНаДобровольноеСтрахование,
	|	ТаблицаОплатыРО.ВидУслуги КАК ВидУслуги,
	|	ТаблицаОплатыРО.Дата КАК Дата,
	|	ТаблицаОплатыРО.ДокПоступлениеНаРС КАК ДокПоступлениеНаРС,
	|	ТаблицаОплатыРО.ДокРегистрацияОплаты КАК ДокРегистрацияОплаты,
	|	ТаблицаОплатыРО.Использование КАК Использование,
	|	ТаблицаОплатыРО.Использовать КАК Использовать,
	|	ТаблицаОплатыРО.ИсходныйНомерСтроки КАК ИсходныйНомерСтроки,
	|	ТаблицаОплатыРО.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаОплатыРО.Здание КАК Здание,
	|	ТаблицаОплатыРО.НоменклатураУслуги КАК НоменклатураУслуги,
	|	ТаблицаОплатыРО.НомерСтроки КАК НомерСтроки,
	|	ТаблицаОплатыРО.ПериодОплаты КАК ПериодОплаты,
	|	ТаблицаОплатыРО.Сумма КАК Сумма,
	|	ТаблицаОплатыРО.Услуга КАК Услуга,
	|	ТаблицаОплатыРО.Штрихкод КАК Штрихкод,
	|	ЕСТЬNULL(ТаблицаСчетов.РасчетныйСчетУслуг, &ОсновнойСчетОрганизации) КАК РасчетныйСчетУслуг,
	|	ВЫБОР
	|		КОГДА НЕ &ВедетсяРаздельныйУчет
	|			ТОГДА ЕСТЬNULL(ТаблицаСчетов.РасчетныйСчетУслуг, &ОсновнойСчетОрганизации)
	|		КОГДА ЕСТЬNULL(ТаблицаСчетов.РасчетныйСчетУслугКапитальногоРемонта, ИСТИНА) = ИСТИНА
	|			ТОГДА &ОсновнойСчетОрганизации
	|		КОГДА ТаблицаСчетов.РасчетныйСчетУслугКапитальногоРемонта = ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	|			ТОГДА ТаблицаСчетов.РасчетныйСчетУслуг
	|		ИНАЧЕ ТаблицаСчетов.РасчетныйСчетУслугКапитальногоРемонта
	|	КОНЕЦ КАК РасчетныйСчетУслугКапитальногоРемонта,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ТаблицаСчетов.РасчетныйСчетУслугКапитальногоРемонта, ИСТИНА) = ИСТИНА
	|			ТОГДА ЛОЖЬ
	|		КОГДА ТаблицаСчетов.РасчетныйСчетУслугКапитальногоРемонта.Владелец = &Организация
	|			ТОГДА ЛОЖЬ
	|		КОГДА ТаблицаСчетов.РасчетныйСчетУслугКапитальногоРемонта = ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		КОГДА НЕ &ВедетсяРаздельныйУчет
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СтороннийСчетКР,
	|	ТаблицаОплатыРО.СуммаРеестра КАК СуммаРеестра
	|ИЗ
	|	втТаблицаМаксПериодов КАК ТаблицаОплатыРО
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях КАК ТаблицаСчетов
	|		ПО (ТаблицаСчетов.Здание = ТаблицаОплатыРО.Здание)
	|			И (ТаблицаСчетов.Период = ТаблицаОплатыРО.МаксПериод)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТаблицаОплатыРО.ЛицевойСчет,
	|	ТаблицаОплатыРО.ПериодОплаты,
	|	ТаблицаОплатыРО.Услуга";
	
	Запрос.УстановитьПараметр("ТаблицаОплатыРО",         ТаблицаОплатыРО);
	Запрос.УстановитьПараметр("Организация",             Объект.Организация);
	Запрос.УстановитьПараметр("ОсновнойСчетОрганизации", Объект.Организация.ОсновнойБанковскийСчет);
	Запрос.УстановитьПараметр("ВедетсяРаздельныйУчет",   мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет);
	
	ТаблицаОплатыРО = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры

&НаСервере
// Процедура создает документ "Регистрация оплаты".
//
Процедура СоздатьДокументРегистрацияОплаты(ТЗТаблицаОплат, Дата, ВариантРаспределенияОплатКапРемонт, НеРаспределятьОплатуНаДобровольноеСтрахование, 
	ВыбрДок, ВыбрДокПРС, Здание = Неопределено, ОтражатьТиповыеДокументы = Ложь)
	
	ТаблицаОплат = ТЗТаблицаОплат.Скопировать();
	
	// Строки оплат реестра теперь сворачиваться не будут.
	// Это сделано для того, чтобы для каждой строки оплаты был свой документ поступления.
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Дата",          Дата);
	СтруктураПараметров.Вставить("ДокументОплат", "РегистрацияОплаты");
	
	МассивКорректныхСтрок = Новый Массив;
	
	Для Каждого ТекСтрока Из ТаблицаОплат Цикл
		
		СтруктураПараметров.Вставить("ЛицевойСчет",   ТекСтрока.Объект);
		СтруктураПараметров.Вставить("СуммаПлатежа",  ТекСтрока.Сумма);
		
		Если НЕ ПроверкаДублированияСумм(СтруктураПараметров) Тогда
			МассивКорректныхСтрок.Добавить(ТекСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивКорректныхСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТЗТаблицаКорректныхОплат = ТаблицаОплат.Скопировать(МассивКорректныхСтрок);
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Дата",          Дата);
	СтруктураПараметров.Вставить("ДокументОплат", "РегистрацияОплаты");
	
	Если Объект.КорректировкаДолга Тогда
		СтруктураПараметров.Вставить("ВидОперации",
		Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеИзАвтоматизированныхСистемПриемаОплаты);
		СтруктураПараметров.Вставить("ОператорПлатежей", Объект.Контрагент);
	Иначе
		СтруктураПараметров.Вставить("ВидОперации",
		Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеНаБанковскийСчет);
	КонецЕсли;
	
	Если ТипЗнч(ВыбрДок.Статья) = Тип("СправочникСсылка.КВП_ИсточникиОплат") Тогда
		СтруктураПараметров.Вставить("ИсточникОплаты", ВыбрДок.Статья);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Организация", Объект.Организация);
	
	Если НЕ Здание = Неопределено Тогда
		СтруктураПараметров.Вставить("Дом", Здание);
	КонецЕсли;
	
	Если Объект.КорректировкаДолга Тогда
		СтруктураПараметров.Вставить("ФормироватьДокументы", Истина);
	КонецЕсли;
	
	ДоговорОператора = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Если Объект.КорректировкаДолга Тогда
		УПЖКХ_ТиповыеМетодыСервер.УстановитьДоговорКонтрагента(ДоговорОператора, Объект.Контрагент, Объект.Организация);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("КорректировкаДолга",       Объект.КорректировкаДолга);
	СтруктураПараметров.Вставить("ТаблицаОплат",             ТЗТаблицаКорректныхОплат);
	СтруктураПараметров.Вставить("ДоговорОператораПлатежей", ДоговорОператора);
	
	Если ЗначениеЗаполнено(ВариантРаспределенияОплатКапРемонт) Тогда
		СтруктураПараметров.Вставить("ВариантРаспределенияОплатКапРемонт", ВариантРаспределенияОплатКапРемонт);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("НеРаспределятьОплатуНаДобровольноеСтрахование", НеРаспределятьОплатуНаДобровольноеСтрахование);
	
	Комментарий = "";
	
	Если НЕ ПустаяСтрока(Объект.Комментарий) Тогда
		Комментарий = Объект.Комментарий;
	ИначеЕсли НЕ ПустаяСтрока(Элементы.Комментарий.ПодсказкаВвода) Тогда
		Комментарий = Элементы.Комментарий.ПодсказкаВвода;
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Комментарий", Комментарий);
	
	ДокументРасчета = Документы.ПоступлениеНаРасчетныйСчет.ПустаяСсылка();
	Если Объект.КорректировкаДолга И Не Объект.ДокументРасчета.Пустая() Тогда
		ДокументРасчета = Объект.ДокументРасчета;
	КонецЕсли;
	СтруктураПараметров.Вставить("ДокументРасчетаСОператоромПлатежей", ДокументРасчета);
	
	ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Если Объект.КорректировкаДолга И Не Объект.ДоговорКонтрагента.Пустая() Тогда
		ДоговорКонтрагента = Объект.ДоговорКонтрагента;
	КонецЕсли;
	СтруктураПараметров.Вставить("ДоговорОператораПлатежей", ДоговорКонтрагента);
	
	// Механизм распределения оплаты при загрузке реестров платежей имеет ряд отличий от типового механизма распределения.
	// Передаем данный параметр, чтобы корректно распределить оплату на добровольное страхование.
	СтруктураПараметров.Вставить("ЭтоЗагрузкаРеестраПлатежей", Истина);
	
	ОбъектРегистрацияОплаты = Документы.КВП_РегистрацияОплаты.СоздатьДокумент();
	ОбъектРегистрацияОплаты.Заполнить(СтруктураПараметров);
	
	// Запускаем отражение документов поступления:
	Если ОтражатьТиповыеДокументы Тогда
		
		// Запишем документ РО, так как при формировании ПРС нужно будет использовать таблицу расшифровки
		// документа РО. Она используется для разбивки суммы платежа по ставкам НДС номенклатур услуг, на
		// которые этот платеж распределился.
		КВП_ЗаписатьОбъект(ОбъектРегистрацияОплаты, РежимЗаписиДокумента.Запись);
		
		Если Не ВыбрДокПРС = Неопределено И ТипЗнч(ВыбрДокПРС.Статья) = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств") Тогда
			ОбъектРегистрацияОплаты.СформироватьДокументыОтраженияОплат(, ВыбрДокПРС.Статья);
		Иначе
			ОбъектРегистрацияОплаты.СформироватьДокументыОтраженияОплат();
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ КВП_ЗаписатьОбъект(ОбъектРегистрацияОплаты, РежимЗаписиДокумента.Проведение) Тогда
		КВП_ЗаписатьОбъект(ОбъектРегистрацияОплаты, РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	Если НЕ ОбъектРегистрацияОплаты.Ссылка.Пустая() Тогда
		
		ИтераторДляСтрокПРС = 0;
		
		Для Каждого ТекСтрока Из ТЗТаблицаКорректныхОплат Цикл
			СтрокаТЧ                      = Объект.ТаблицаРеестра.Получить(ТекСтрока.НомерСтрокиРеестра - 1);
			СтрокаТЧ.ДокРегистрацияОплаты = ОбъектРегистрацияОплаты.Ссылка;
			
			СсылкаНаПРС = ОбъектРегистрацияОплаты.ЛицевыеСчета[ИтераторДляСтрокПРС].ДокументОплаты;
			Если ЗначениеЗаполнено(СсылкаНаПРС) Тогда
				СтрокаТЧ.ДокПоступлениеНаРС   = СсылкаНаПРС;
			КонецЕсли;
			
			ИтераторДляСтрокПРС = ИтераторДляСтрокПРС + 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // СоздатьДокументРегистрацияОплаты()

&НаСервере
// Процедура формирует документ "Поступление на расчетный счет".
//
Функция СформироватьДокументыПоступленияНаРС(СтрокаТаблицыОплатыРО, ВыбрДок, ТекСтрока)
	
	СсылкаДокумента = Документы.ПоступлениеНаРасчетныйСчет.ПустаяСсылка();
	
	Если ЗначениеЗаполнено(ТекСтрока.ДокПоступлениеНаРС) Тогда
		Возврат ТекСтрока.ДокПоступлениеНаРС;
	КонецЕсли;
	
	ДанныеДляВзаиморасчетов = ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету(ТекСтрока.ЛицевойСчет, Объект.Организация, ТекСтрока.Дата);
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Дата",               ТекСтрока.Дата);
	СтруктураПараметров.Вставить("Контрагент",         ДанныеДляВзаиморасчетов.Контрагент);
	СтруктураПараметров.Вставить("ДоговорКонтрагента", ДанныеДляВзаиморасчетов.Договор);
	СтруктураПараметров.Вставить("СуммаПлатежа",       ТекСтрока.СуммаПлатежа);
	СтруктураПараметров.Вставить("ДокументОплат",      "ПоступлениеНаРС");
	
	Если ПроверкаДублированияСумм(СтруктураПараметров) Тогда
		Возврат СсылкаДокумента;
	КонецЕсли;
	
	// шапка документа
	ОбъектПоступлениеНаРС             = Документы.ПоступлениеНаРасчетныйСчет.СоздатьДокумент();
	ОбъектПоступлениеНаРС.Организация = Объект.Организация;
	ОбъектПоступлениеНаРС.Дата        = ТекСтрока.Дата;
	
	ОбъектПоступлениеНаРС.Контрагент  = ДанныеДляВзаиморасчетов.Контрагент;
	
	// Вызов функции из модуля менеджера документа "Регистрация оплаты" для создания документа "Поступление на расчетный счет".
	ОбъектПоступлениеНаРС = Документы.КВП_РегистрацияОплаты.ЗаполнитьДокументыПоступленияСнятияСРасчетногоСчета(ОбъектПоступлениеНаРС, Объект.Организация, ТекСтрока, "ПоступлениеНаРасчетныйСчет", 
	ТекСтрока.ВариантРаспределенияОплатКапРемонт, ДанныеДляВзаиморасчетов, 
	мВалютаРегламентированногоУчета, ВыбрДок.Статья);
	Попытка
		ОбъектПоступлениеНаРС.Записать(РежимЗаписиДокумента.Проведение);
		
		СтрокаТЧ                    = Объект.ТаблицаРеестра.Получить(СтрокаТаблицыОплатыРО.НомерСтроки - 1);
		СтрокаТЧ.ДокПоступлениеНаРС = ОбъектПоступлениеНаРС.Ссылка;
		
		СсылкаДокумента = ОбъектПоступлениеНаРС.Ссылка;
	Исключение
		ТекстСообщения = "Для лицевого счета " 
		+ ТекСтрока.ЛицевойСчет 
		+ " из файла, документ ""Поступление на расчетный счет"": " 
		+ ОписаниеОшибки();
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстСообщения;
		Сообщение.Сообщить();
		
	КонецПопытки;
	
	Возврат СсылкаДокумента;
	
КонецФункции // СформироватьДокументыПоступленияНаРС()

&НаСервере
// Получает сведения для взаиморасчетов для указанного лицевого счета.
//
// Параметры:
//  Объект          – лицевой счет или парковочное место, для которых
//                    необходимо найти договор или контрагента
//  Дата            - дата поиска контрагента или договора контрагента
//  ИскомыйРесурс  - Строка - задается, если необходимо получить конкретный параметр: контрагента или договор контрагента.
//
// Возвращаемое значение:
//  Структура - если не указан параметр "ИскомыйРесурс" или Ссылка на справочник "Контрагенты" или "Договоры контрагентов".
//
Функция ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету(ЛицевойСчет, Организация, Дата = Неопределено, ИскомыйРесурс = Неопределено)
	
	Структура = Новый Структура;
	Структура.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	Структура.Вставить("Договор",    Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	
	Если Не СЗК_МодульЗащиты.ЛицензионныйКлючКорректен() Тогда
		Возврат Структура;
	КонецЕсли;
	
	Если Дата = Неопределено Тогда
		Дата = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	КонецЕсли;
	
	ТипЗначОбъекта = ТипЗнч(ЛицевойСчет);
	Если Не ТипЗначОбъекта = Тип("СправочникСсылка.КВП_ЛицевыеСчета")
		И НЕ ТипЗначОбъекта = Тип("СправочникОбъект.КВП_ЛицевыеСчета") Тогда
		Возврат Структура;
	Конецесли;
	
	ЗапросОсновнойДоговор = Новый Запрос();
	ЗапросОсновнойДоговор.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних.Договор,
	|	КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних.Контрагент
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(
	|			&Дата,
	|			ЛицевойСчет = &ЛицевойСчет
	|				И Организация = &Организация) КАК КВП_ОсновнойДоговорЛицевогоСчетаСрезПоследних";
	
	ЗапросОсновнойДоговор.УстановитьПараметр("Дата",        Дата);
	ЗапросОсновнойДоговор.УстановитьПараметр("ЛицевойСчет", ЛицевойСчет);
	ЗапросОсновнойДоговор.УстановитьПараметр("Организация", Организация);
	
	Выборка = ЗапросОсновнойДоговор.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Структура.Вставить("Контрагент", Выборка.Контрагент);
		Структура.Вставить("Договор",    Выборка.Договор);
	КонецЕсли;
	
	Если ИскомыйРесурс = "Контрагент" ИЛИ ИскомыйРесурс = "Договор" Тогда
		Возврат Структура[ИскомыйРесурс];
	КонецЕсли;
	
	Возврат Структура;
	
КонецФункции // ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету()

&НаСервере
// Функция проверяет наличие идентичных оплат в ИБ.
Функция ПроверкаДублированияСумм(Структура)
	
	Если Объект.ФорматФайлаЗагрузки.КонтрольДублированияОплат Тогда
		
		Если Структура.ДокументОплат = "РегистрацияОплаты" Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТаблицаОплат.ЛицевойСчет,
			|	ТаблицаОплат.СуммаПлатежа
			|ИЗ
			|	(ВЫБРАТЬ
			|		СУММА(КВП_ПоступлениеДенежныхСредствПоВидамПлатежей.СуммаПлатежа) КАК СуммаПлатежа,
			|		КВП_ПоступлениеДенежныхСредствПоВидамПлатежей.ЛицевойСчет КАК ЛицевойСчет,
			|		КВП_ПоступлениеДенежныхСредствПоВидамПлатежей.Период КАК Период,
			|		КВП_ПоступлениеДенежныхСредствПоВидамПлатежей.Регистратор КАК Регистратор
			|	ИЗ
			|		РегистрНакопления.КВП_ПоступлениеДенежныхСредствПоВидамПлатежей КАК КВП_ПоступлениеДенежныхСредствПоВидамПлатежей
			|	ГДЕ
			|		КОНЕЦПЕРИОДА(КВП_ПоступлениеДенежныхСредствПоВидамПлатежей.Период, ДЕНЬ) = КОНЕЦПЕРИОДА(&Период, ДЕНЬ)
			|		И КВП_ПоступлениеДенежныхСредствПоВидамПлатежей.ЛицевойСчет = &ЛицевойСчет
			|		И КВП_ПоступлениеДенежныхСредствПоВидамПлатежей.Организация = &Организация
			|	
			|	СГРУППИРОВАТЬ ПО
			|		КВП_ПоступлениеДенежныхСредствПоВидамПлатежей.ЛицевойСчет,
			|		КВП_ПоступлениеДенежныхСредствПоВидамПлатежей.Регистратор,
			|		КВП_ПоступлениеДенежныхСредствПоВидамПлатежей.Период) КАК ТаблицаОплат
			|ГДЕ
			|	ТаблицаОплат.СуммаПлатежа = &СуммаПлатежа";
			
			Запрос.УстановитьПараметр("Период",       Структура.Дата);
			Запрос.УстановитьПараметр("ЛицевойСчет",  Структура.ЛицевойСчет);
			Запрос.УстановитьПараметр("СуммаПлатежа", Структура.СуммаПлатежа);
			Запрос.УстановитьПараметр("Организация",  Объект.Организация);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Ошибка при формировании документа: Документ ""Регистрация оплаты"" уже сформирован"
				+ " для лицевого счета """ + Структура.ЛицевойСчет + """ на " + Структура.Дата;
				Сообщение.Сообщить();
				Возврат Истина;
			КонецЕсли;
			
		Иначе // документы "Поступление на расчетный счет"
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ПоступлениеНаРасчетныйСчет.Ссылка
			|ИЗ
			|	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
			|ГДЕ
			|	ПоступлениеНаРасчетныйСчет.Проведен
			|	И КОНЕЦПЕРИОДА(ПоступлениеНаРасчетныйСчет.Дата, ДЕНЬ) = КОНЕЦПЕРИОДА(&Дата, ДЕНЬ)
			|	И ПоступлениеНаРасчетныйСчет.Контрагент = &Контрагент
			|	И ПоступлениеНаРасчетныйСчет.Организация = &Организация
			|	И ПоступлениеНаРасчетныйСчет.СуммаДокумента = &СуммаПлатежа
			|	И ПоступлениеНаРасчетныйСчет.ДоговорКонтрагента = &ДоговорКонтрагента";
			
			Запрос.УстановитьПараметр("Дата",               Структура.Дата);
			Запрос.УстановитьПараметр("Контрагент",         Структура.Контрагент);
			Запрос.УстановитьПараметр("ДоговорКонтрагента", Структура.ДоговорКонтрагента);
			Запрос.УстановитьПараметр("СуммаПлатежа",       Структура.СуммаПлатежа);
			Запрос.УстановитьПараметр("Организация",        Объект.Организация);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Ошибка при формировании документа: Документ ""Поступление на расчетный счет"" уже сформирован"
				+ " для контрагента """ + Структура.Контрагент + """ на " + Структура.Дата;
				Сообщение.Сообщить();
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
// Процедура заполняет колонку "услуга" и колонку "сумма".
//
Процедура ЗаполнитьКолонкуУслугаИСумма(ТаблицаОплаты, ВремТаблицаОплаты, Параметры)
	
	МассивУдаления = Новый Массив;
	
	СтрокаУслуги = Объект.ФорматФайлаЗагрузки.НастройкиСоответствияПолей.Найти(Перечисления.КВП_ПараметрыСистемыЗагрузкиПлатежей.Услуга, "Параметр");
	
	ОплатыРаспределятьРавномерно = (НЕ СтрокаУслуги = Неопределено И СтрокаУслуги.СпособРаспределенияОплаты = 0);
	
	Для Каждого Стр Из ТаблицаОплаты Цикл 
		
		Если НЕ Стр.Использовать ИЛИ НЕ ЗначениеЗаполнено(Параметры.ОпределительУслуги)
			ИЛИ Параметры.ОпределительУслуги = "Услуга" Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		
		Если ОплатыРаспределятьРавномерно Тогда // если равномерно между услугами
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КВП_НазначенныеНачисленияСрезПоследних.Услуга) КАК Итог,
			|	КВП_НазначенныеНачисленияСрезПоследних.Услуга
			|ИЗ
			|	РегистрСведений.КВП_НазначенныеНачисления.СрезПоследних(
			|			&Дата,
			|			Объект = &ЛицевойСчет
			|				И &Параметр = &ВидУслугиИЛИНоменклатура) КАК КВП_НазначенныеНачисленияСрезПоследних
			|ГДЕ
			|	КВП_НазначенныеНачисленияСрезПоследних.Действует
			|
			|СГРУППИРОВАТЬ ПО
			|	КВП_НазначенныеНачисленияСрезПоследних.Услуга";
			
		Иначе // если пропроционально долгу
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.Услуга,
			|	ЕСТЬNULL(КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток, 0) КАК Итог
			|ИЗ
			|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
			|			&Дата,
			|			ЛицевойСчет = &ЛицевойСчет
			|				И &Параметр = &ВидУслугиИЛИНоменклатура) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки
			|ГДЕ
			|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток > 0";
			
		КонецЕсли;
		
		ЗапросВидыУслуг = Новый Запрос;
		ЗапросВидыУслуг.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_НазначенныеНачисленияСрезПоследних.Услуга,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ КВП_НазначенныеНачисленияСрезПоследних.Услуга) КАК Итог
		|ИЗ
		|	РегистрСведений.КВП_НазначенныеНачисления.СрезПоследних(
		|			&Дата,
		|			Объект = &ЛицевойСчет
		|				И &Параметр = &ВидУслугиИЛИНоменклатура) КАК КВП_НазначенныеНачисленияСрезПоследних
		|ГДЕ
		|	КВП_НазначенныеНачисленияСрезПоследних.Действует
		|
		|СГРУППИРОВАТЬ ПО
		|	КВП_НазначенныеНачисленияСрезПоследних.Услуга";
		
		Если Параметры.ОпределительУслуги = "Вид услуги" Тогда // если вид услуги заполнен
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Параметр", "Услуга.ВидУслуги");
			Запрос.УстановитьПараметр("ВидУслугиИЛИНоменклатура", Стр.ВидУслуги);
			
			ЗапросВидыУслуг.Текст = СтрЗаменить(ЗапросВидыУслуг.Текст, "&Параметр", "Услуга.ВидУслуги");
			ЗапросВидыУслуг.УстановитьПараметр("ВидУслугиИЛИНоменклатура", Стр.ВидУслуги);
			
		ИначеЕсли Параметры.ОпределительУслуги = "Номенклатура услуги" Тогда // если номенклатура услуги заполнена
			
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Параметр", "Услуга.Услуга");
			Запрос.УстановитьПараметр("ВидУслугиИЛИНоменклатура", Стр.НоменклатураУслуги);
			
			ЗапросВидыУслуг.Текст = СтрЗаменить(ЗапросВидыУслуг.Текст, "&Параметр", "Услуга.Услуга");
			ЗапросВидыУслуг.УстановитьПараметр("ВидУслугиИЛИНоменклатура", Стр.НоменклатураУслуги);
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Дата",        КонецДня(Стр.Дата));
		Запрос.УстановитьПараметр("ЛицевойСчет", Стр.ЛицевойСчет);
		
		ЗапросВидыУслуг.УстановитьПараметр("Дата",        КонецДня(Стр.Дата));
		ЗапросВидыУслуг.УстановитьПараметр("ЛицевойСчет", Стр.ЛицевойСчет);
		
		Результат = Запрос.Выполнить().Выгрузить();
		РезультатВидыУслуг = ЗапросВидыУслуг.Выполнить().Выгрузить();
		КоличествоУслуг = РезультатВидыУслуг.Количество();
		Если Результат.Количество() > 0 
			ИЛИ КоличествоУслуг > 0 Тогда
			
			Результат = ?(Результат.Количество() > 0, Результат, РезультатВидыУслуг);
			ОбщийИтог = Результат.Итог("Итог");
			
			Для Каждого СтрВУ Из Результат Цикл
				
				СтрокаТЗ = ВремТаблицаОплаты.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТЗ, Стр);
				СтрокаТЗ.Услуга = СтрВУ.Услуга;
				СтрокаТЗ.Сумма  = ?(ОплатыРаспределятьРавномерно, Стр.Сумма / ОбщийИтог,
				Окр(Стр.Сумма / (ОбщийИтог / СтрВУ.Итог), 2, 1));
				
			КонецЦикла;
			
		Иначе
			Если Параметры.ОпределительУслуги = "Вид услуги" Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Для л/с """ + Стр.ЛицевойСчет + """ нет назначенных услуг с видом услуг """ + Стр.ВидУслуги + """";
				Сообщение.Сообщить();
			ИначеЕсли Параметры.ОпределительУслуги = "Номенклатура услуги" Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Для л/с """ + Стр.ЛицевойСчет + """ нет назначенных услуг с номенклатурой """
				+ Стр.НоменклатураУслуги + """";
				Сообщение.Сообщить();
			ИначеЕсли Параметры.ОпределительУслуги = "Услуга" Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "Для л/с """ + Стр.ЛицевойСчет + """ нет назначенной услуги """ + Стр.Услуга + """";
				Сообщение.Сообщить();
			КонецЕсли;
			МассивУдаления.Добавить(Стр);
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ВремТаблицаОплаты.Количество() = 0 Тогда 
		ТаблицаОплаты.Очистить();
		ТаблицаОплаты = ВремТаблицаОплаты.Скопировать();
	ИначеЕсли НЕ МассивУдаления.Количество() = 0 Тогда 
		Для Каждого СтрокаУдаления Из МассивУдаления Цикл 
			ТаблицаОплаты.Удалить(СтрокаУдаления);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Возвращает имя обработки.
//
Функция ПолучитьИмяОбработки()
	
	Возврат РеквизитФормыВЗначение("Объект").Метаданные().Имя;
	
КонецФункции

&НаСервере
// Процедура заполнения данных в хранилище.
//
Процедура ЗаполнитьДанныеВХранилище()
	
	СтруктураРеквизитов = Новый Структура;
	СтруктураРеквизитов.Вставить("Организация", Объект.Организация);
	СтруктураРеквизитов.Вставить("ФорматФайлаЗагрузки", Объект.ФорматФайлаЗагрузки);
	СтруктураРеквизитов.Вставить("ИмяФайлаЗагрузки", Объект.ИмяФайлаЗагрузки);
	СтруктураРеквизитов.Вставить("Контрагент", Объект.Контрагент);
	СтруктураРеквизитов.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	СтруктураРеквизитов.Вставить("ДокументРасчета", Объект.ДокументРасчета);
	СтруктураРеквизитов.Вставить("КорректировкаДолга", Объект.КорректировкаДолга);
	СтруктураРеквизитов.Вставить("ЗагружатьИзКаталога", Объект.ЗагружатьИзКаталога);
	СтруктураРеквизитов.Вставить("СпособГруппировки", Объект.СпособГруппировки);
	СтруктураРеквизитов.Вставить("НастройкаЗаполнения", Объект.НастройкаЗаполнения.Выгрузить());
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("КВП_ЗагрузкаРеестраПлатежей_Реквизиты",
	,СтруктураРеквизитов);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
// Заполняет настройки загрузки файла.
//
Процедура ЗаполнитьНастройкиЗагрузкиФайла(Форма)
	
	Объект = Форма.Объект;
	
	НастройкиЗагрузки = ПолучитьНастройкиЗагрузкиФайла(Объект.Организация);
	
	Если НастройкиЗагрузки.ЗаписьВыбрана Тогда
		Объект.ФорматФайлаЗагрузки = НастройкиЗагрузки.ФорматФайлаЗагрузки;
		Объект.ИмяФайлаЗагрузки    = НастройкиЗагрузки.ИмяФайлаЗагрузки;
		Объект.Контрагент          = НастройкиЗагрузки.Контрагент;
		Объект.ДоговорКонтрагента  = НастройкиЗагрузки.ДоговорКонтрагента;
		Объект.КорректировкаДолга  = НастройкиЗагрузки.КорректировкаДолга;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНастройкиЗагрузкиФайла()

&НаСервере
// Определяет значение параметров.
//
// Параметры:
//  Нет
// 
Процедура ИнициализацияРеквизитов()
	
	ЗапросЛС = Новый Запрос;
	ЗапросЛС.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет,
	|	ПРЕДСТАВЛЕНИЕ(УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.Код) КАК КодЛС,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.Наименование КАК НаименованиеЛС,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет.Идентификатор КАК ИдентификаторЛС
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(&Период, Организация = &Организация) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних";
	
	ЗапросЛС.УстановитьПараметр("Организация", Объект.Организация);
	ЗапросЛС.УстановитьПараметр("Период",      КонецДня(ТекущаяДата()));
	
	ТабЛС = ДанныеФормыВЗначение(ТаблицаЛС, Тип("ТаблицаЗначений"));
	
	ТабЛС = ЗапросЛС.Выполнить().Выгрузить();
	
	УПЖКХ_ОбщегоНазначенияСервер.СокрЛПСтрокиВКолонкеТаблицыЗначений(ТабЛС, "КодЛС");
	
	ЗначениеВДанныеФормы(ТабЛС, ТаблицаЛС);
	
	НастройкиСоответствияПолей = Объект.ФорматФайлаЗагрузки.НастройкиСоответствияПолей;
	
	ПолеИдентификацииЛС                 = "";
	НайденныеСтрокиПараметраЛицевойСчет = НастройкиСоответствияПолей.НайтиСтроки(Новый Структура("Параметр", Перечисления.КВП_ПараметрыСистемыЗагрузкиПлатежей.ЛицевойСчет));
	
	Если НЕ НайденныеСтрокиПараметраЛицевойСчет.Количество() = 0 Тогда
		
		СтрокаПараметраЛицевойСчет = НайденныеСтрокиПараметраЛицевойСчет[0];
		СпИдентификацияЛС          = СтруктураЗначенийПолей.СпИдентификацияЛС;
		
		Если СтрокаПараметраЛицевойСчет.ИдентификацияЛС = СпИдентификацияЛС[0].Значение Тогда // "наименование"
			ПолеИдентификацииЛС = "НаименованиеЛС";
		ИначеЕсли СтрокаПараметраЛицевойСчет.ИдентификацияЛС = СпИдентификацияЛС[1].Значение Тогда // "код"
			ПолеИдентификацииЛС = "КодЛС"; 
		ИначеЕсли СтрокаПараметраЛицевойСчет.ИдентификацияЛС = СпИдентификацияЛС[2].Значение Тогда // "идентификатор"
			ПолеИдентификацииЛС = "ИдентификаторЛС";
		ИначеЕсли СтрокаПараметраЛицевойСчет.ИдентификацияЛС = СпИдентификацияЛС[3].Значение Тогда // "штрихкод"
			ПолеИдентификацииЛС = "Штрихкод";
		КонецЕсли;
		
	КонецЕсли;
	
	ЗапросУслуг = Новый Запрос;
	ЗапросУслуг.Текст = 
	"ВЫБРАТЬ
	|	ПРЕДСТАВЛЕНИЕ(КВП_Услуги.Код) КАК КодУслуги,
	|	КВП_Услуги.Наименование КАК НаименованиеУслуги,
	|	КВП_Услуги.Ссылка КАК Услуга
	|ИЗ
	|	Справочник.КВП_Услуги КАК КВП_Услуги
	|ГДЕ
	|	КВП_Услуги.ЭтоГруппа = ЛОЖЬ";
	
	Таб = ДанныеФормыВЗначение(ТаблицаУслуг, Тип("ТаблицаЗначений"));
	
	Таб = ЗапросУслуг.Выполнить().Выгрузить();
	
	УПЖКХ_ОбщегоНазначенияСервер.СокрЛПСтрокиВКолонкеТаблицыЗначений(Таб, "КодУслуги");
	
	ЗначениеВДанныеФормы(Таб, ТаблицаУслуг); 
	
	НайденныеСтрокиПараметраУслуга = НастройкиСоответствияПолей.НайтиСтроки(Новый Структура("Параметр", Перечисления.КВП_ПараметрыСистемыЗагрузкиПлатежей.Услуга));
	СтрокаПараметраУслуга          = Неопределено;
	ПолеИдентификацииУслуги        = "";
	
	Если НЕ НайденныеСтрокиПараметраУслуга.Количество() = 0 Тогда
		
		СтрокаПараметраУслуга       = НайденныеСтрокиПараметраУслуга[0];
		СпИдентификацияУслугиОплаты = СтруктураЗначенийПолей.СпИдентификацияУслугиОплаты;
		
		Если СтрокаПараметраУслуга.ИдентификацияУслуги = СпИдентификацияУслугиОплаты[0].Значение Тогда // "по наименованию"
			ПолеИдентификацииУслуги = "НаименованиеУслуги";
		ИначеЕсли СтрокаПараметраУслуга.ИдентификацияУслуги = СпИдентификацияУслугиОплаты[1].Значение Тогда // "по коду"
			ПолеИдентификацииУслуги = "КодУслуги";
		ИначеЕсли СтрокаПараметраУслуга.ИдентификацияУслуги = СпИдентификацияУслугиОплаты[2].Значение Тогда // "по виду услуги"
			ПолеИдентификацииУслуги = "ВидУслуги";
		ИначеЕсли СтрокаПараметраУслуга.ИдентификацияУслуги = СпИдентификацияУслугиОплаты[3].Значение Тогда // "по номенклатуре"
			ПолеИдентификацииУслуги = "НоменклатураУслуги";
		КонецЕсли;
		
	КонецЕсли;
	
	ПолеИдентификацииВидаИНоменклатурыУслуги = "";
	Если НЕ СтрокаПараметраУслуга = Неопределено Тогда
		
		СпИдентификацияВидаИНоменклатурыУслуги = СтруктураЗначенийПолей.СпИдентификацияВидаИНоменклатурыУслуги;
		
		Если ПолеИдентификацииУслуги = "ВидУслуги" Тогда
			
			ЗапросУслуг = Новый Запрос;
			ЗапросУслуг.Текст = 
			"ВЫБРАТЬ
			|	ПРЕДСТАВЛЕНИЕ(КВП_ВидыУслуг.Код) КАК КодВидаУслуги,
			|	КВП_ВидыУслуг.Наименование КАК НаименованиеВидаУслуги,
			|	КВП_ВидыУслуг.Ссылка КАК ВидУслуги
			|ИЗ
			|	Справочник.КВП_ВидыУслуг КАК КВП_ВидыУслуг";
			
			Таб = ДанныеФормыВЗначение(ТаблицаВидовУслуг, Тип("ТаблицаЗначений"));
			Таб = ЗапросУслуг.Выполнить().Выгрузить();
			
			УПЖКХ_ОбщегоНазначенияСервер.СокрЛПСтрокиВКолонкеТаблицыЗначений(Таб, "КодВидаУслуги");
			ЗначениеВДанныеФормы(Таб, ТаблицаВидовУслуг); 
			
			Если СтрокаПараметраУслуга.ИдентификацияУслуги = СпИдентификацияВидаИНоменклатурыУслуги[0].Значение Тогда // "наименование"
				ПолеИдентификацииВидаИНоменклатурыУслуги = "НаименованиеВидаУслуги";
			ИначеЕсли СтрокаПараметраУслуга.ИдентификацияУслуги = СпИдентификацияВидаИНоменклатурыУслуги[1].Значение Тогда // "код"
				ПолеИдентификацииВидаИНоменклатурыУслуги = "КодВидаУслуги";
			КонецЕсли;
			
		ИначеЕсли ПолеИдентификацииУслуги = "НоменклатураУслуги" Тогда
			
			ЗапросУслуг = Новый Запрос;
			ЗапросУслуг.Текст = 
			"ВЫБРАТЬ
			|	ПРЕДСТАВЛЕНИЕ(Номенклатура.Код) КАК КодНоменклатурыУслуги,
			|	Номенклатура.Наименование КАК НаименованиеНоменклатурыУслуги,
			|	Номенклатура.Ссылка КАК НоменклатураУслуги
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.ЭтоГруппа = ЛОЖЬ";
			
			Таб = ДанныеФормыВЗначение(ТаблицаНоменклатурУслуг, Тип("ТаблицаЗначений"));
			Таб = ЗапросУслуг.Выполнить().Выгрузить();
			
			УПЖКХ_ОбщегоНазначенияСервер.СокрЛПСтрокиВКолонкеТаблицыЗначений(Таб, "КодНоменклатурыУслуги");
			ЗначениеВДанныеФормы(Таб, ТаблицаНоменклатурУслуг); 
			
			Если СтрокаПараметраУслуга.ИдентификацияУслуги = СпИдентификацияВидаИНоменклатурыУслуги[0].Значение Тогда // "наименование"
				ПолеИдентификацииВидаИНоменклатурыУслуги = "НаименованиеНоменклатурыУслуги";
			ИначеЕсли СтрокаПараметраУслуга.ИдентификацияУслуги = СпИдентификацияВидаИНоменклатурыУслуги[1].Значение Тогда // "код"
				ПолеИдентификацииВидаИНоменклатурыУслуги = "КодНоменклатурыУслуги";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ИнициализацияРеквизитов()

&НаСервереБезКонтекста
// Получает настройки загрузки файла из регистра сведений "КВП_НастройкиЗагрузкиИзАС".
//
// Параметры:
//  Нет
// 
Функция ПолучитьНастройкиЗагрузкиФайла(Организация)
	
	НастройкиЗагрузки = РегистрыСведений.КВП_НастройкиЗагрузкиИзАС.СоздатьМенеджерЗаписи();
	НастройкиЗагрузки.Организация = Организация;
	НастройкиЗагрузки.ВидОперации = Перечисления.КВП_ВидыНастроекЗагрузкиИзАС.ЗагрузкаИзСистемПриемаПлатежей;
	НастройкиЗагрузки.Прочитать();
	
	Настройки = Новый Структура;
	
	Настройки.Вставить("ЗаписьВыбрана",       НастройкиЗагрузки.Выбран());
	Настройки.Вставить("ФорматФайлаЗагрузки", НастройкиЗагрузки.ФорматФайлаЗагрузки);
	Настройки.Вставить("ИмяФайлаЗагрузки",    НастройкиЗагрузки.ИмяФайлаЗагрузки);
	Настройки.Вставить("Контрагент",          НастройкиЗагрузки.Контрагент);
	Настройки.Вставить("ДоговорКонтрагента",  НастройкиЗагрузки.ДоговорКонтрагента);
	Настройки.Вставить("КорректировкаДолга",  НастройкиЗагрузки.КорректировкаДолга);
	
	Возврат Настройки;
	
КонецФункции  //ПолучитьНастройкиЗагрузкиФайла()

&НаСервереБезКонтекста
// Функция возвращает список параметров системы загрузки платежей.
//
Функция ПолучитьСписокПараметровСистемыЗагрузкиПлатежей()
	
	МассивПараметров = Новый Массив;
	Для Каждого ТекПараметр Из Перечисления.КВП_ПараметрыСистемыЗагрузкиПлатежей Цикл
		МассивПараметров.Добавить(ТекПараметр);
	КонецЦикла;
	
	Возврат МассивПараметров;
	
КонецФункции

&НаСервереБезКонтекста
// Функция возвращает массив параметров формата загрузки.
//
Функция ПолучитьМассивПараметровФорматаЗагрузки(ФорматФайлаЗагрузки)
	
	МассивПараметров = Новый Массив;
	Для Каждого ТекПоле Из ФорматФайлаЗагрузки.НастройкиСоответствияПолей Цикл
		МассивПараметров.Добавить(ТекПоле.Параметр);
	КонецЦикла;
	
	Возврат МассивПараметров;
	
КонецФункции

&НаСервереБезКонтекста
// Функция возвращает имя колонки.
//
Функция ОпределитьИмяКолонки(НастройкиСоответствияПолей, Параметр, СтруктураЗначенийПолей)
	
	Если Параметр = Перечисления.КВП_ПараметрыСистемыЗагрузкиПлатежей.Услуга Тогда
		
		ТипКолонки                     = "Услуга";
		НайденныеСтрокиПараметраУслуга = НастройкиСоответствияПолей.НайтиСтроки(Новый Структура("Параметр", Параметр));
		
		Если НЕ НайденныеСтрокиПараметраУслуга.Количество() = 0 Тогда
			
			СтрокаПараметраУслуга       = НайденныеСтрокиПараметраУслуга[0];
			СпИдентификацияУслугиОплаты = СтруктураЗначенийПолей.СпИдентификацияУслугиОплаты;
			
			Если СтрокаПараметраУслуга.ИдентификацияУслуги = СпИдентификацияУслугиОплаты[2].Значение Тогда // "по виду услуги"
				ТипКолонки = "Вид услуги";
			ИначеЕсли СтрокаПараметраУслуга.ИдентификацияУслуги = СпИдентификацияУслугиОплаты[3].Значение Тогда // "по номенклатуре"
				ТипКолонки = "Номенклатура услуги";
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ТипКолонки = Строка(Параметр);
	КонецЕсли;
	
	Возврат СтрЗаменить(СокрЛП(ТипКолонки), " ", "");
	
КонецФункции

&НаКлиенте
// Открывает диалог выбора файла
//
// Параметры:
//  Элемент - Элемент управления, для которого выбираем файл.
// 
Процедура ВыборФайла(ФорматФайлаЗагрузки)
	
	ФорматФайла = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ФорматФайлаЗагрузки, "ФорматФайла");
	
	Если Объект.ЗагружатьИзКаталога Тогда 
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
		ДиалогВыбораФайла.Заголовок = "Выберите каталог";
	Иначе
		
		ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		
		СпФорматовФайла = СтруктураЗначенийПолей.СпФорматовФайла;
		
		Если ФорматФайла = СпФорматовФайла[0].Значение Тогда // "TXT"
			ДиалогВыбораФайла.Фильтр     = "Файл данных (*.txt)|*.txt";
			ДиалогВыбораФайла.Расширение = "txt";
		ИначеЕсли ФорматФайла = СпФорматовФайла[1].Значение Тогда // "XLS"
			ДиалогВыбораФайла.Фильтр     = "Файл данных (*.xls;*.xlsx)|*.xls;*.xlsx";
			ДиалогВыбораФайла.Расширение = "xls";
		ИначеЕсли ФорматФайла = СпФорматовФайла[2].Значение Тогда // "CSV"
			ДиалогВыбораФайла.Фильтр     = "Файл данных (*.csv)|*.csv";
			ДиалогВыбораФайла.Расширение = "csv";
		ИначеЕсли ФорматФайла = СпФорматовФайла[3].Значение Тогда // "XML"
			ДиалогВыбораФайла.Фильтр     = "Файл данных (*.xml)|*.xml";
			ДиалогВыбораФайла.Расширение = "xml";
		ИначеЕсли ФорматФайла = СпФорматовФайла[4].Значение Тогда // "DBF"
			ДиалогВыбораФайла.Фильтр     = "Файл данных (*.dbf)|*.dbf";
			ДиалогВыбораФайла.Расширение = "dbf";
		КонецЕсли;
		
		ДиалогВыбораФайла.Заголовок = "Выберите файл";
		
	КонецЕсли;
	
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.ИндексФильтра           = 0;
	ДиалогВыбораФайла.ПолноеИмяФайла          = Объект.ИмяФайлаЗагрузки;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ВыборФайлаЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		Объект.ИмяФайлаЗагрузки = ВыбранныеФайлы[0];
		УстановитьПодсказкуВводаКомментария();
	КонецЕсли;
	
КонецПроцедуры //ВыборФайла()

&НаСервере
// Заполняет настройки загрузки файла.
//
Процедура ОбновитьРеквизиты()
	
	ЗначенияРеквизитов =
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("КВП_ЗагрузкаРеестраПлатежей_Реквизиты");
	
	Если ТипЗнч(ЗначенияРеквизитов) = Тип("Структура") Тогда
		Если ЗначенияРеквизитов.Свойство("Организация") Тогда
			Объект.Организация = ЗначенияРеквизитов.Организация;
		КонецЕсли;
		
		Если ЗначенияРеквизитов.Свойство("ФорматФайлаЗагрузки") Тогда
			Объект.ФорматФайлаЗагрузки = ЗначенияРеквизитов.ФорматФайлаЗагрузки;
		КонецЕсли;
		
		Если ЗначенияРеквизитов.Свойство("ИмяФайлаЗагрузки") Тогда
			Объект.ИмяФайлаЗагрузки = ЗначенияРеквизитов.ИмяФайлаЗагрузки;
		КонецЕсли;
		
		Если ЗначенияРеквизитов.Свойство("Контрагент") Тогда
			Объект.Контрагент = ЗначенияРеквизитов.Контрагент;
		КонецЕсли;
		
		Если ЗначенияРеквизитов.Свойство("ДоговорКонтрагента") Тогда
			Объект.ДоговорКонтрагента = ЗначенияРеквизитов.ДоговорКонтрагента;
		КонецЕсли;
		
		Если ЗначенияРеквизитов.Свойство("КорректировкаДолга") Тогда
			Объект.КорректировкаДолга = ЗначенияРеквизитов.КорректировкаДолга;
		КонецЕсли;
		
		Если ЗначенияРеквизитов.Свойство("ЗагружатьИзКаталога") Тогда
			Объект.ЗагружатьИзКаталога = ЗначенияРеквизитов.ЗагружатьИзКаталога;
		КонецЕсли;
		
		Если ЗначенияРеквизитов.Свойство("СпособГруппировки") И ЗначенияРеквизитов.СпособГруппировки <> 0 Тогда 
			Объект.СпособГруппировки = ЗначенияРеквизитов.СпособГруппировки;
		Иначе
			Объект.СпособГруппировки = 1;
		КонецЕсли;
		
		Если ЗначенияРеквизитов.Свойство("НастройкаЗаполнения") Тогда
			Объект.НастройкаЗаполнения.Загрузить(ЗначенияРеквизитов.НастройкаЗаполнения);
		КонецЕсли;
		
	КонецЕсли;
	
	УправлениеФормой();
	
КонецПроцедуры //ПролучитьДанные()

&НаСервере
// Восстанавливает настройки заполнения.
//
Функция ВосстановитьНастройкиЗаполнения()
	
	Объект.НастройкаЗаполнения.Очистить();
	
	ЗначенияРеквизитов =
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("КВП_ЗагрузкаРеестраПлатежей_Реквизиты");
	Объект.НастройкаЗаполнения.Загрузить(ЗначенияРеквизитов.НастройкаЗаполнения);
	
	Возврат Объект.НастройкаЗаполнения.Количество();
	
КонецФункции

&НаСервереБезКонтекста
// Устанавливает актуальные настройки учетной политики ТСЖ.
//
Функция ПолучитьНастройкуНаличияПериодаОплатыВШтрихкодеПД(Организация)
	
	// Значение по умолчанию.
	Результат = Ложь;
	
	мНастройкиФормированияПДЖКХОтказ = Ложь;
	мНастройкиФормированияПДЖКХ = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьНастройкиФормированияПДЖКХ(Организация, мНастройкиФормированияПДЖКХОтказ);
	Если НЕ мНастройкиФормированияПДЖКХОтказ Тогда
		
		// Проверяем присутствуют ли (хотя бы частично) в составе штирихкода данные о периоде начисления (для определения периода оплаты).
		Если мНастройкиФормированияПДЖКХ.ВариантОпределенияФорматаШтрихкода = ПредопределенноеЗначение("Перечисление.КВП_ВариантыОпределенияФорматаШтрихкода.ПоУказаннымНастройкам") И
			(Найти(мНастройкиФормированияПДЖКХ.СоставШтрихкодаПоОсн, "МесяцОплаты") = 0 Или Найти(мНастройкиФормированияПДЖКХ.СоставШтрихкодаПоОсн, "ГодОплаты") = 0) Тогда 
			Результат = Ложь;
		Иначе
			Результат = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьНастройкуНаличияПериодаОплатыВШтрихкодеПД()

&НаСервере
// Заполняет поля строки реестра значениями, полученными из штрихкода.
//
// Параметры:
//  СтрокаРеестра - СтрокаТаблицыЗначений - заполняемая строка таблицы реестра;
//  Штрихкод      - Cтрока                - содержащая, штрих-код;
//  НомерСтроки   - Число                 - номер строки реестра.
//
Процедура ЗаполнитьСтрокуРеестраПоШтрихкоду(СтрокаРеестра, Штрихкод, НомерСтроки);
	
	ПараметрыИзШтрихкода = ПрочитатьШтрихКод(Штрихкод);
	
	СтрокаРеестра.Штрихкод = Штрихкод;
	
	Если ШтрихкодВСтрокеПрочитан Тогда
		
		// Проверяем соответствующие поля: если они не заполнены - заполняем из штрихкода,
		// если заплнены - сравниваем со значением, полученным из штрихкода.
		Если СтрокаРеестра.ЛицевойСчет = Справочники.КВП_ЛицевыеСчета.ПустаяСсылка() Тогда
			СтрокаРеестра.ЛицевойСчет = ПараметрыИзШтрихкода.ЛицевойСчет;
		ИначеЕсли СтрокаРеестра.ЛицевойСчет <> ПараметрыИзШтрихкода.ЛицевойСчет Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "В строке №" + НомерСтроки + " лицевой счет в штрихкоде отличается от текущего лицевого счета!";
			Сообщение.Сообщить();
		КонецЕсли;
		
		Если СтрокаРеестра.Сумма = 0 Тогда
			СтрокаРеестра.Сумма = ПараметрыИзШтрихкода.Сумма;
		ИначеЕсли СтрокаРеестра.Сумма <> ПараметрыИзШтрихкода.Сумма Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "В строке №" + НомерСтроки + " сумма в штрихкоде отличается от текущей суммы!";
			Сообщение.Сообщить();
		КонецЕсли;
		
		Если ВШтрихкодеЕстьПериодОплаты Тогда 
			Если СтрокаРеестра.ПериодОплаты = '00010101' Тогда
				// В качестве периода оплаты берем конец месяца периода начисления, а если он недообределен - конец текущего системного периода.
				СтрокаРеестра.ПериодОплаты = КонецМесяца(?(ПараметрыИзШтрихкода.МесяцНачисления = '20010101' Или ПараметрыИзШтрихкода.МесяцНачисления = '00010101', 
				ТекущаяДата(), ПараметрыИзШтрихкода.МесяцНачисления));
				
			ИначеЕсли СтрокаРеестра.ПериодОплаты <> ПараметрыИзШтрихкода.МесяцНачисления Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = "В строке №" + НомерСтроки + " период оплаты в штрихкоде отличается от текущего периода оплаты!";
				Сообщение.Сообщить();
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыИзШтрихкода.ПризнакОплатыПоКР И мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет Тогда
			СтрокаРеестра.ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиКапРемонт;
		ИначеЕсли мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет Тогда
			СтрокаРеестра.ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиНеКапРемонт;
		Иначе
			СтрокаРеестра.ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.ВсеУслуги;
		КонецЕсли;
		
	Иначе
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "В строке №" + НомерСтроки + " данные штрихкода не были считаны!";
		Сообщение.Сообщить();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтрокуРеестраПоШтрихкоду()

&НаСервере
// Функция обрабатывает штрих-код, который был прочитан при помощи сканера
// штрих-кодов или который был загружен из терминала сбора данных.
//
// Параметры:
//  Штрихкод - Cтрока - содержащая, штрих-код.
//
// Возвращаемое значение:
//  ПараметрыИзШтрихкода - Структура - структура, содержащая лицевой счет, дату и сумму из штрихкода.
//
Функция ПрочитатьШтрихКод(Штрихкод)
	
	ПараметрыИзШтрихкода = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьСтруктуруПараметровРазбораШК();
	ПараметрыИзШтрихкода.ОбъектВывзоваМеханизмаРазбораШК = "Обработки.КВП_ЗагрузкаРеестраПлатежей";
	ПараметрыИзШтрихкода.Организация = Объект.Организация;
	
	Если мНастройкиФормированияПДЖКХ = Неопределено Тогда
		мНастройкиФормированияПДЖКХ = УПЖКХ_ПечатьКвитанцийСервер.ПолучитьНастройкиФормированияПДЖКХ(Объект.Организация, мНастройкиФормированияПДЖКХОтказ);
	КонецЕсли;
	
	ПараметрыИзШтрихкода.НастройкиФормированияПДЖКХОпределены = НЕ мНастройкиФормированияПДЖКХОтказ;
	
	Если мСтруктураНастроекКапРемонта = Неопределено Тогда
		мСтруктураНастроекКапРемонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Объект.Организация);
	КонецЕсли;
	
	ПараметрыИзШтрихкода.ВедетсяРаздельныйУчетПоУслугамКапремонта = мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет;
	
	// Производим чтение штрихкода и, в при удачном чтении, возводим соответсвующий флаг.
	ШтрихкодВСтрокеПрочитан = УПЖКХ_ПечатьКвитанцийСервер.ОбработатьИРазобратьШтрихКод(	Штрихкод,
	мНастройкиФормированияПДЖКХ,
	ПараметрыИзШтрихкода);
	
	Возврат ПараметрыИзШтрихкода;
	
КонецФункции // ПрочитатьШтрихКод()

&НаСервере
// Анализирует состав параметров формата реестра загрузки. 
Процедура ПроанализироватьСоставПолей()
	
	МассивПараметров = Объект.ФорматФайлаЗагрузки.НастройкиСоответствияПолей.ВыгрузитьКолонку("Параметр");
	
	// Если в составе параметров формата реестра загрузки отсутствуют поле "Дата", то возвводится флажек "ВТекущемРеестреОтсутствуетДата".
	Если МассивПараметров.Найти(Перечисления.КВП_ПараметрыСистемыЗагрузкиПлатежей.Дата) = Неопределено Тогда
		ВТекущемРеестреОтсутствуетДата = Истина;
	Иначе
		ВТекущемРеестреОтсутствуетДата = Ложь; 
	КонецЕсли;
	
	// Если в составе параметров формата реестра загрузки присутствует поле "Штрихкод",
	// то проверяем, достаточно ли данных для загрузки реестра в случае ошибки чтения штрихкода.
	Если МассивПараметров.Найти(Перечисления.КВП_ПараметрыСистемыЗагрузкиПлатежей.Штрихкод) <> Неопределено Тогда
		
		// Если в составе параметров формата реестра загрузки присутствуют лицевой счет и сумма, то возвводится флажек "ДостаточноДанныхБезШтрихкода".
		Если МассивПараметров.Найти(Перечисления.КВП_ПараметрыСистемыЗагрузкиПлатежей.ЛицевойСчет) <> Неопределено И
			МассивПараметров.Найти(Перечисления.КВП_ПараметрыСистемыЗагрузкиПлатежей.Сумма) <> Неопределено Тогда
			ДостаточноДанныхБезШтрихкода = Истина;
		Иначе
			ДостаточноДанныхБезШтрихкода = Ложь; 
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроанализироватьСоставПолей()

&НаКлиенте
// Рассчитывает сумму полей колонки "Сумма" выделенных строк таблицы.
Процедура ВычислитьСуммуДокументов()
	
	ВыделенныеСтроки = Элементы.ТаблицаРеестра.ВыделенныеСтроки;
	
	СуммаСтрок = 0;
	Для Каждого Строка Из ВыделенныеСтроки Цикл 
		СуммаСтрок = СуммаСтрок + Элементы.ТаблицаРеестра.ДанныеСтроки(Строка).Сумма;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Вызывает рассчет суммы поля колонки "Сумма" выделенной строки таблицы
// при изменении значения суммы вручную.
Процедура ТаблицаРеестраСуммаПриИзменении(Элемент)
	
	ВычислитьСуммуДокументов();
	
КонецПроцедуры

&НаКлиенте
// Обработчик "НачалоВыбора" поля "Документ расчета".
//
Процедура ДокументРасчетаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураОтбора = ЗаполнитьСтруктуруОтбора();
	
	ОткрытьФорму("Документ.ПоступлениеНаРасчетныйСчет.ФормаВыбора",
	Новый Структура("Отбор", СтруктураОтбора),
	Элемент,,,,,
	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
// Обработчик нажатия гиперссылки контрагента.
//
Процедура ГиперссылкаКонтрагентНажатие(Элемент)
	
	Форма = ПолучитьФорму("Справочник.Контрагенты.Форма.ФормаЭлемента", Новый Структура("Ключ", Объект.Контрагент));
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
// Обработчик нажатия гиперссылки договора контрагента.
//
Процедура ГиперссылкаДоговорНажатие(Элемент)
	
	Форма = ПолучитьФорму("Справочник.ДоговорыКонтрагентов.Форма.ФормаЭлемента", Новый Структура("Ключ", Объект.ДоговорКонтрагента));
	Форма.Открыть();
	
КонецПроцедуры

&НаСервере
// Функция производит поиск документов "Поступление на расчетный счет"
// и возвращает структуру параметров отбора.
//
Функция ЗаполнитьСтруктуруОтбора()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ПоступлениеНаРасчетныйСчет.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
	|ГДЕ
	|	ПоступлениеНаРасчетныйСчет.Организация = &Организация
	|	И &УсловиеПоКонтрагенту
	|	И &УсловиеПоДоговору";
	
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	Если Объект.ДоговорКонтрагента.Пустая() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоДоговору", "ИСТИНА");
	Иначе
		Запрос.Текст = Запрос.Текст +
		"
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ПоступлениеНаРасчетныйСчет.Ссылка
		|ИЗ
		|	Документ.ПоступлениеНаРасчетныйСчет КАК ПоступлениеНаРасчетныйСчет
		|ГДЕ
		|	ПоступлениеНаРасчетныйСчет.Организация = &Организация
		|	И &УсловиеПоКонтрагенту
		|	И ПоступлениеНаРасчетныйСчет.СубконтоКт2 = &ДоговорКонтрагента";
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоДоговору", "ПоступлениеНаРасчетныйСчет.ДоговорКонтрагента = &ДоговорКонтрагента");
		Запрос.УстановитьПараметр("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	КонецЕсли;
	
	Если Объект.Контрагент.Пустая() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоКонтрагенту", "ИСТИНА");
	Иначе
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеПоКонтрагенту", "ПоступлениеНаРасчетныйСчет.Контрагент = &Контрагент");
		Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	КонецЕсли;
	
	Таблица = Запрос.Выполнить().Выгрузить();
	
	СписокСсылок = Новый СписокЗначений;
	СписокСсылок.ЗагрузитьЗначения(Таблица.ВыгрузитьКолонку("Ссылка"));
	
	Возврат Новый Структура("Ссылка", СписокСсылок);
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
//

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтруктураЗначенийПолей = Справочники.КВП_НастройкиЗагрузкиВыгрузки.ПодговитьСтруктуруЗначенийПолей();
	
	Если Объект.Организация.Пустая() Тогда
		Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьОсновнуюОрганизацию();
	КонецЕсли;
	
	ИмяОбработки = ПолучитьИмяОбработки();
	
	Попытка
		
		КоличествоСтрок = ВосстановитьНастройкиЗаполнения();
		
		Если КоличествоСтрок = 0 или КоличествоСтрок <>2 Тогда
			
			Объект.НастройкаЗаполнения.Очистить();
			Объект.НастройкаЗаполнения.Добавить().Документ = "Регистрация оплаты";
			Объект.НастройкаЗаполнения.Добавить().Документ = "Поступление на расчетный счет";
			
			Объект.СпособГруппировки = 1;
			
		КонецЕсли;
		
	Исключение
		
		Объект.НастройкаЗаполнения.Очистить();
		
		СтрокаТабл = Объект.НастройкаЗаполнения.Добавить();
		СтрокаТабл.Документ = "Регистрация оплаты";
		СтрокаТабл.Пометка = Истина;
		СтрокаТабл = Объект.НастройкаЗаполнения.Добавить();
		СтрокаТабл.Документ = "Поступление на расчетный счет";
		СтрокаТабл.Пометка = Истина;
		
	КонецПопытки;
	
	Если Не ЗначениеЗаполнено(Объект.СпособГруппировки) Тогда
		Объект.СпособГруппировки = 1;
	КонецЕсли;
	
	ЗаполнитьНастройкиЗагрузкиФайла(ЭтаФорма);
	
	СтруктураПараметров =
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("ПараметрыВыгрузки_КВП_ЗагрузкаРеестраПлатежейДоп");
	
	Если ТипЗнч(СтруктураПараметров) = Тип("Структура") Тогда
		СтруктураПараметров.Свойство("ЗагружатьИзКаталога", Объект.ЗагружатьИзКаталога);
		СтруктураПараметров.Свойство("СпособГруппировки", Объект.СпособГруппировки);
	КонецЕсли;
	
	мСтруктураНастроекКапРемонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Объект.Организация, Истина);
	
	ВШтрихкодеЕстьПериодОплаты = ПолучитьНастройкуНаличияПериодаОплатыВШтрихкодеПД(Объект.Организация);
	
	НастройкиУчетДобровольногоСтрахования         = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаНачисленийПоДобровольномуСтрахованию();
	ВестиУчетНачисленийПоДобровольномуСтрахованию = НастройкиУчетДобровольногоСтрахования.ВестиУчетНачисленийПоДобровольномуСтрахованию;
	УслугаДобровольногоСтрахования                = НастройкиУчетДобровольногоСтрахования.УслугаДобровольногоСтрахования;
	
	УправлениеФормой();
	
	// Видимость команд загрузки реестра в зависимости от типа клиента.
	ЭтоВебКлиент = УПЖКХ_ТиповыеМетодыКлиентСервер.ЭтоВебКлиент();
	Элементы.ГруппаЗагрузкаРеестра.Видимость    = Не ЭтоВебКлиент;
	Элементы.ЗагрузитьРеестрВебКлиент.Видимость = ЭтоВебКлиент;
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии(Отказ)
	
	УстановитьПодсказкуВводаКомментария();
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события "ОбработкаОповещения" формы.
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновленыНастройкиЗагрузкиВыгрузки"
	   И Источник = ЭтаФорма
	   И Параметр.Свойство("Ключ") Тогда
		Объект.ФорматФайлаЗагрузки = Параметр.Ключ;
		ОбновитьОтображениеДанных(Элементы.ПолеФорматФайла);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

/////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ
//

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ИмяФайлаЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	Если НЕ ПустаяСтрока(Объект.ИмяФайлаЗагрузки) Тогда
		СтандартнаяОбработка = Ложь;
		НачатьЗапускПриложения(Новый ОписаниеОповещения("ИмяФайлаЗагрузкиОткрытиеЗавершение", ЭтаФорма), Объект.ИмяФайлаЗагрузки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачатьЗапускПриложения".
Процедура ИмяФайлаЗагрузкиОткрытиеЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода ФорматФайлаЗагрузки.
//
Процедура ФорматФайлаЗагрузкиПриИзменении(Элемент)
	
	Объект.ИмяФайлаЗагрузки = "";
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматФайлаЗагрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения   = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыСправочникаНастройкиЗагрузкиВыгрузки", ЭтаФорма);
	СтруктураПараметров  = Новый Структура("Ключ, ТипОбъектаОткрытияФормы", Объект.ФорматФайлаЗагрузки, ТипЗнч(Объект));
	
	ОткрытьФорму("Справочник.КВП_НастройкиЗагрузкиВыгрузки.Форма.ФормаЭлемента", СтруктураПараметров, ЭтаФорма,,,, ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ФорматФайлаЗагрузкиСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения   = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыСправочникаНастройкиЗагрузкиВыгрузки", ЭтаФорма);
	ЗначенияЗаполнения   = Новый Структура("ВидОперации", ПредопределенноеЗначение("Перечисление.КВП_ВидыНастроекЗагрузкиИзАС.ЗагрузкаИзСистемПриемаПлатежей"));
	
	СтруктураПараметров  = Новый Структура;
	СтруктураПараметров.Вставить("Ключ",                    Неопределено);
	СтруктураПараметров.Вставить("ЗначенияЗаполнения",      ЗначенияЗаполнения);
	СтруктураПараметров.Вставить("ТипОбъектаОткрытияФормы", ТипЗнч(Объект));
	
	ОткрытьФорму("Справочник.КВП_НастройкиЗагрузкиВыгрузки.Форма.ФормаЭлемента", СтруктураПараметров, ЭтаФорма,,,, ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля ввода ИмяФайлаЗагрузки.
Процедура ИмяФайлаЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(Объект.ФорматФайлаЗагрузки) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не выбран формат файла загрузки.";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ВыборФайла(Объект.ФорматФайлаЗагрузки);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода ИмяФайлаЗагрузки.
//
Процедура ИмяФайлаЗагрузкиПриИзменении(Элемент)
	
	УстановитьПодсказкуВводаКомментария();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля ввода Организация.
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЗаполнитьНастройкиЗагрузкиФайла(ЭтаФорма);
	
	мСтруктураНастроекКапРемонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Объект.Организация, Истина);
	
	ВШтрихкодеЕстьПериодОплаты = ПолучитьНастройкуНаличияПериодаОплатыВШтрихкодеПД(Объект.Организация);
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриАктивизацииСтроки" таблицы ТаблицаРеестра.
//
Процедура ТаблицаРеестраПриАктивизацииСтроки(Элемент)
	
	ОтключитьОбработчикОжидания("ВычислитьСуммуДокументов");
	ПодключитьОбработчикОжидания("ВычислитьСуммуДокументов", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" колонки "ВариантРаспределенияОплатКапРемонт" таблицы реестра.
Процедура ТаблицаРеестраВариантРаспределенияОплатКапРемонтПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТаблицаРеестра.ТекущиеДанные;
	
	ПроверитьКорректностьНастроекДобровольногоСтрахованияПриИзмененииНастроекОплатыКапитальногоРемонта(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" колонки "НеРаспределятьОплатуНаДобровольноеСтрахование" таблицы реестра.
Процедура ТаблицаРеестраНеРаспределятьОплатуНаДобровольноеСтрахованиеПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТаблицаРеестра.ТекущиеДанные;
	
	// Если в текущей строке реестра отмечено, что оплата распределяется только на услуги кап. ремонта, то не позволяем снимать флаг "Не распределять оплату на
	// добровольное страхование".
	Если ТекущаяСтрока.ВариантРаспределенияОплатКапРемонт = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиКапРемонт")
		И Не ТекущаяСтрока.НеРаспределятьОплатуНаДобровольноеСтрахование Тогда
		ТекущаяСтрока.НеРаспределятьОплатуНаДобровольноеСтрахование = Истина;
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Оплата распределяется только на услуги капитального ремонта и не может быть распределена на добровольное страхование.");
	КонецЕсли;
	
	// Если в текущей строке реестра указана конкретная услуга, проверяем: является ли она услугой добровольного страхования. В зависимости от этого устанавливаем флаг
	// "Не распределять оплату на добровольное страхование".
	Если Не ТекущаяСтрока.Услуга = ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка") Тогда
		Если ТекущаяСтрока.Услуга = УслугаДобровольногоСтрахования И ТекущаяСтрока.НеРаспределятьОплатуНаДобровольноеСтрахование Тогда
			ТекущаяСтрока.НеРаспределятьОплатуНаДобровольноеСтрахование = Ложь;
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("В соответствии с настройками загрузки реестра оплата может быть распределена только на услугу добровольного страхования.");
		ИначеЕсли Не ТекущаяСтрока.Услуга = УслугаДобровольногоСтрахования И Не ТекущаяСтрока.НеРаспределятьОплатуНаДобровольноеСтрахование Тогда
			ТекущаяСтрока.НеРаспределятьОплатуНаДобровольноеСтрахование = Истина;
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("В соответствии с настройками загрузки реестра оплата не может быть распределена на услугу добровольного страхования.");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" колонки "ПериодОплаты" таблицы реестра.
Процедура ТаблицаРеестраУслугаПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ТаблицаРеестра.ТекущиеДанные;
	
	ПроверитьКорректностьНастроекДобровольногоСтрахованияПриИзмененииУслуги(ТекущаяСтрока);
	
КонецПроцедуры

#КонецОбласти

/////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ
//

#Область ОбработчикиКомандФормы

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

// СхемыУчета
&НаКлиенте
// Подключаемый обработчик команды перехода к схеме учета.
Процедура Подключаемый_ОткрытьСхемуУчета(Команда)
	
	ОТР_СхемыУчетаКлиент.Подключаемый_ОткрытьСхемуУчета(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры
// Конец СхемыУчета

#КонецОбласти

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ
//

#Область ВспомогательныеПроцедурыИФункции

&НаКлиенте
// Процедура-обработчик результата закрытия формы "НастройкиЗагрузкиВыгрузки".
Процедура ОбработатьЗакрытиеФормыСправочникаНастройкиЗагрузкиВыгрузки(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ОбновитьОтображениеДанных(Элементы.ПолеФорматФайла);
	
	Объект.ИмяФайлаЗагрузки = "";
	
	УправлениеФормой();
	
КонецПроцедуры

&НаКлиенте
// Открывает форму настроек загрузки файла.
//
Процедура Настройка(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ПоказатьПредупреждение(Неопределено, "Не указана организация.");
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеВХранилище();
	
	ОткрытьФорму("Обработка.КВП_ЗагрузкаРеестраПлатежей.Форма.ФормаНастройкиЗаполнения",,
	ЭтаФорма,,,,
	Новый ОписаниеОповещения("ОбработкаПослеЗакрытияФормыНастройки", ЭтаФорма),
	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // Настройка()

&НаКлиенте
// Обработка закрытия формы настроек обработки.
Процедура ОбработкаПослеЗакрытияФормыНастройки(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьРеквизиты();
	
	УстановитьПодсказкуВводаКомментария();
	
КонецПроцедуры // ОбработкаПослеЗакрытияФормыНастройки()

/////////////////////////////////////////////////////////////
// ЗАГРУЗКА РЕЕСТРА

&НаКлиенте
// Загружает в табличную часть данные из файла.
//
Процедура ЗагрузитьРеестрНажатие(Команда)
	
	Если Объект.КорректировкаДолга И (НЕ ЗначениеЗаполнено(Объект.Контрагент)) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не выбрана обслуживающая организация.";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ФайлНаДиске = Новый Файл(Объект.ИмяФайлаЗагрузки);
	ФайлНаДиске.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ПроверкаСуществованияФайлаЗавершение1", ЭтотОбъект, Новый Структура("ФайлНаДиске", ФайлНаДиске)));
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаСуществованияФайлаЗавершение1(Существует, ДополнительныеПараметры) Экспорт
	
	ФайлНаДиске = ДополнительныеПараметры.ФайлНаДиске;
	
	
	Если НЕ Существует Тогда
		
		Если Объект.ЗагружатьИзКаталога Тогда
			ПоказатьПредупреждение(Неопределено, "Каталог не найден!");
		Иначе
			ПоказатьПредупреждение(Неопределено, "Файл не найден!");
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если Объект.ЗагружатьИзКаталога Тогда
		ФайлНаДиске.НачатьПроверкуЭтоКаталог(Новый ОписаниеОповещения("ПроверкаНаКаталогЗавершение2", ЭтотОбъект, Новый Структура("ФайлНаДиске", ФайлНаДиске)));
		Возврат;
	Иначе
		ФайлНаДиске.НачатьПроверкуЭтоФайл(Новый ОписаниеОповещения("ПроверкаНаФайлЗавершение", ЭтотОбъект));
		Возврат;
	КонецЕсли;
	
	ЗагрузитьРеестрНажатиеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаНаКаталогЗавершение2(ЭтоКаталог, ДополнительныеПараметры) Экспорт
	
	ФайлНаДиске = ДополнительныеПараметры.ФайлНаДиске;
	
	Если НЕ ЭтоКаталог Тогда
		ПоказатьПредупреждение(Неопределено, "Каталог указан не верно!");
		Возврат;
	КонецЕсли;
	
	ЗагрузитьРеестрНажатиеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаНаФайлЗавершение(ЭтоФайл, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЭтоФайл Тогда
		ПоказатьПредупреждение(Неопределено, "Файл указан не верно!");
		Возврат;
	КонецЕсли;
	
	ЗагрузитьРеестрНажатиеФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРеестрНажатиеФрагмент()
	
	Если Объект.ТаблицаРеестра.Количество() > 0 Тогда
		
		ПоказатьВопрос(	Новый ОписаниеОповещения("ОбработатьРезультатВопросаЗагрузитьРеестрНажатие", ЭтаФорма),
						"Табличная часть будет очищена. Продолжить?",
						РежимДиалогаВопрос.ДаНет,,
						КодВозвратаДиалога.Нет);
		Возврат;
	КонецЕсли;
	
	ЗагрузитьРеестрНажатиеПродолжение();
	
КонецПроцедуры // ЗагрузитьРеестрНажатие()

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре " ЗагрузитьРеестрНажатие()".
Процедура ОбработатьРезультатВопросаЗагрузитьРеестрНажатие(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.ТаблицаРеестра.Очистить();
		ЗагрузитьРеестрНажатиеПродолжение();
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаЗагрузитьРеестрНажатие()

&НаКлиенте
// Процедура помещает файлы во временное хранилище.
Процедура ЗагрузитьРеестрНажатиеПродолжение()
	
	ФорматФайлаЗагрузки = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.ФорматФайлаЗагрузки, "ФорматФайла");
	
	ЭтоФайлExcel = ФорматФайлаЗагрузки = СтруктураЗначенийПолей.СпФорматовФайла[1].Значение; // "XLS"
	
	ПутьКФайлу = "";
	МассивАдресов = Новый Массив;
	
	Если Объект.ЗагружатьИзКаталога Тогда
		
		ФайлыИзКаталога = Неопределено;
		
		ДополнительныеПараметры = Новый Структура("МассивАдресов, ПутьКФайлу, ЭтоФайлExcel", МассивАдресов, ПутьКФайлу, ЭтоФайлExcel);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("НачатьПоискФайловЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		
		Маска = "*." + ФорматФайлаЗагрузки;
		
		НачатьПоискФайлов(ОписаниеОповещения, Объект.ИмяФайлаЗагрузки, Маска);
		Возврат;
		
	Иначе
		
		Если Не ЭтоФайлExcel Тогда
			ДопПараметры = Новый Структура("ЭтоФайлExcel, МассивАдресов, ПродолжитьЗагрузку", ЭтоФайлExcel, МассивАдресов, Истина);
			НачатьПомещениеФайла(	Новый ОписаниеОповещения("ОбработатьПомещениеФайлаИзКаталогаВоВремХранилище", ЭтаФорма, ДопПараметры),
									ПутьКФайлу,
									Объект.ИмяФайлаЗагрузки,
									Ложь,
									Новый УникальныйИдентификатор);
			Возврат;
		Иначе
			МассивАдресов.Добавить(Объект.ИмяФайлаЗагрузки);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗагрузитьРеестрНажатиеПродолжениеЗагрузка(МассивАдресов, ЭтоФайлExcel);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПоискФайловЗавершение(НайденныеФайлы, ДополнительныеПараметры) Экспорт
	
	МассивАдресов = ДополнительныеПараметры.МассивАдресов;
	ПутьКФайлу = ДополнительныеПараметры.ПутьКФайлу;
	ЭтоФайлExcel = ДополнительныеПараметры.ЭтоФайлExcel;
	
	
	ФайлыИзКаталога = НайденныеФайлы;
	
	Для Каждого ФайлЗагрузки Из ФайлыИзКаталога Цикл
		
		Если Не ЭтоФайлExcel Тогда
			ДопПараметры = Новый Структура("ЭтоФайлExcel, МассивАдресов", ЭтоФайлExcel, МассивАдресов);
			НачатьПомещениеФайла(	Новый ОписаниеОповещения("ОбработатьПомещениеФайлаИзКаталогаВоВремХранилище", ЭтаФорма, ДопПараметры),
									ПутьКФайлу,
									ФайлЗагрузки.ПолноеИмя,
									Ложь,
									Новый УникальныйИдентификатор);
		Иначе
			МассивАдресов.Добавить(ФайлЗагрузки.ПолноеИмя);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗагрузитьРеестрНажатиеПродолжениеЗагрузка(МассивАдресов, ЭтоФайлExcel);
	
КонецПроцедуры

&НаКлиенте
// Обработчик помещения файла во временное хранилище.
Процедура ОбработатьПомещениеФайлаИзКаталогаВоВремХранилище(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	
	МассивАдресов = ДополнительныеПараметры.МассивАдресов;
	ЭтоФайлExcel  = ДополнительныеПараметры.ЭтоФайлExcel;
	
	Если Результат Тогда
		МассивАдресов.Добавить(Адрес);
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ПродолжитьЗагрузку")
		И ДополнительныеПараметры.ПродолжитьЗагрузку Тогда
		ЗагрузитьРеестрНажатиеПродолжениеЗагрузка(МассивАдресов, ЭтоФайлExcel);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьПомещениеФайлаИзКаталогаВоВремХранилище()

&НаКлиенте
// Процедура вызывает механизм чтения данных из файлов.
Процедура ЗагрузитьРеестрНажатиеПродолжениеЗагрузка(МассивАдресов, ЭтоФайлExcel)
	
	Если ЭтоФайлExcel Тогда
		ЗагрузитьФайлXLS(МассивАдресов);
	Иначе
		ЗагрузитьРеестр(МассивАдресов);
	КонецЕсли;
	
	ПроверитьКорректностьНастроекДобровольногоСтрахования();
	
КонецПроцедуры // ЗагрузитьРеестрНажатиеПродолжениеЗагрузка()

&НаКлиенте
// Проверяет корректность установленных настроек по учету добровольного страхования при загрузке реестра в таблицу формы.
Процедура ПроверитьКорректностьНастроекДобровольногоСтрахования()
	
	Если Не ВестиУчетНачисленийПоДобровольномуСтрахованию Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из Объект.ТаблицаРеестра Цикл
		ПроверитьКорректностьНастроекДобровольногоСтрахованияПриИзмененииНастроекОплатыКапитальногоРемонта(Строка);
		
		ПроверитьКорректностьНастроекДобровольногоСтрахованияПриИзмененииУслуги(Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Проверяет корректность установленных настроек по учету добровольного страхования в зависимости
// от установленной настройки распределения оплат на услуги капитального ремонта.
//
Процедура ПроверитьКорректностьНастроекДобровольногоСтрахованияПриИзмененииНастроекОплатыКапитальногоРемонта(СтрокаРеестра)
	
	Если Не мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет Или Не ВестиУчетНачисленийПоДобровольномуСтрахованию Тогда
		Возврат;
	КонецЕсли;
	
	// Если распределяем оплату только на услуги капитального ремонта, то следует установить флаг "Не распределять оплату на добровольное страхование".
	Если СтрокаРеестра.ВариантРаспределенияОплатКапРемонт = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиКапРемонт")
		И Не СтрокаРеестра.НеРаспределятьОплатуНаДобровольноеСтрахование Тогда
		СтрокаРеестра.НеРаспределятьОплатуНаДобровольноеСтрахование = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Проверяет корректность установленных настроек по учету добровольного страхования
// в зависимости от услуги, указанной в реестре.
//
Процедура ПроверитьКорректностьНастроекДобровольногоСтрахованияПриИзмененииУслуги(СтрокаРеестра)
	
	Если Не ВестиУчетНачисленийПоДобровольномуСтрахованию Тогда
		Возврат;
	КонецЕсли;
	
	// Если в реестре указана услуга, и эта услуга не является услугой добровольного страхования, установим флаг "Не распределять оплату на добровольное страхование".
	// И наоборот.
	Если Не СтрокаРеестра.Услуга = ПредопределенноеЗначение("Справочник.КВП_Услуги.ПустаяСсылка") Тогда
		Если Не СтрокаРеестра.Услуга = УслугаДобровольногоСтрахования Тогда
			СтрокаРеестра.НеРаспределятьОплатуНаДобровольноеСтрахование = Истина;
		Иначе 
			СтрокаРеестра.НеРаспределятьОплатуНаДобровольноеСтрахование = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

/////////////////////////////////////////////////////////////
// ЗАГРУЗКА РЕЕСТРА В ВЕБ-КЛИЕНТЕ

&НаКлиенте
// Обработчик команды "ЗагрузитьРеестрВебКлиент", предназначенный
// для загрузки реестра в веб-клиенте.
Процедура ЗагрузитьРеестрВебКлиент(Команда)
	
	Если Объект.КорректировкаДолга И (НЕ ЗначениеЗаполнено(Объект.Контрагент)) Тогда
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = "Не выбрана обслуживающая организация.";
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	// Подключение расширения работы с файлами в веб-клиенте.
	НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения("ЗагрузитьРеестрВебКлиентЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьРеестрВебКлиентЗавершение(Подключено, ДополнительныеПараметры) Экспорт
	
	Если НЕ Подключено Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("УстановкаРасширенияРаботыСФайламиПриЗагрузкеРеестраЗавершение", ЭтотОбъект);
		НачатьУстановкуРасширенияРаботыСФайлами(ОписаниеОповещения);
		Возврат;
	КонецЕсли;
	
	ПрочитатьИЗагрузитьФайлРеестраВебКлиент();
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется на веб-клиенте и производит установку расширения работы с файлами.
//
Процедура УстановкаРасширенияРаботыСФайламиПриЗагрузкеРеестраЗавершение(ДополнительныеПараметры) Экспорт
	
	НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения("УстановкаРасширенияРаботыСФайламиПриЗагрузкеРеестраЗавершениеЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановкаРасширенияРаботыСФайламиПриЗагрузкеРеестраЗавершениеЗавершение(Подключено, ДополнительныеПараметры1) Экспорт
	
	Если НЕ Подключено Тогда
		ПоказатьПредупреждение(,НСтр("ru='Не удалось подключить расширение работы с файлами!
		|Загрузка файла реестра недоступна.'"));
	Иначе
		ПрочитатьИЗагрузитьФайлРеестраВебКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Функция читает файл реестра и вызывает его загрузку в веб-клиенте.
Процедура ПрочитатьИЗагрузитьФайлРеестраВебКлиент()
	
	// Безусловная очистка строк реестра для упрощения.
	Объект.ТаблицаРеестра.Очистить();
	
	ФорматФайла = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(Объект.ФорматФайлаЗагрузки, "ФорматФайла");
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	СпФорматовФайла = СтруктураЗначенийПолей.СпФорматовФайла;
	
	Если ФорматФайла = СпФорматовФайла[0].Значение Тогда // "TXT"
		ДиалогВыбораФайла.Фильтр     = "Файл данных (*.txt)|*.txt";
		ДиалогВыбораФайла.Расширение = "txt";
	ИначеЕсли ФорматФайла = СпФорматовФайла[1].Значение Тогда // "XLS"
		ДиалогВыбораФайла.Фильтр     = "Файл данных (*.xls)|*.xls|(*.xlsx)|*.xlsx";
		ДиалогВыбораФайла.Расширение = "xls";
	ИначеЕсли ФорматФайла = СпФорматовФайла[2].Значение Тогда // "CSV"
		ДиалогВыбораФайла.Фильтр     = "Файл данных (*.csv)|*.csv";
		ДиалогВыбораФайла.Расширение = "csv";
	ИначеЕсли ФорматФайла = СпФорматовФайла[3].Значение Тогда // "XML"
		ДиалогВыбораФайла.Фильтр     = "Файл данных (*.xml)|*.xml";
		ДиалогВыбораФайла.Расширение = "xml";
	ИначеЕсли ФорматФайла = СпФорматовФайла[4].Значение Тогда // "DBF"
		ДиалогВыбораФайла.Фильтр     = "Файл данных (*.dbf)|*.dbf";
		ДиалогВыбораФайла.Расширение = "dbf";
	КонецЕсли;
	
	ДиалогВыбораФайла.Заголовок = "Выберите файл";
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.ИндексФильтра           = 0;
	
	ДополнительныеПараметры = Новый Структура("ЭтоФайлExcel", (ФорматФайла = "XLS"));
	НачатьПомещениеФайлов(Новый ОписаниеОповещения("ОбработатьПомещениеФайлаИзКаталогаВоВремХранилищеВебКлиент", ЭтаФорма, ДополнительныеПараметры),, ДиалогВыбораФайла,, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
// Обработчик помещения файла из каталога во временное хранилище в веб-клиенте.
Процедура ОбработатьПомещениеФайлаИзКаталогаВоВремХранилищеВебКлиент(ПомещенныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(ПомещенныеФайлы) = Тип("Массив")
		И ПомещенныеФайлы.Количество() > 0 Тогда
		
		ИмяФайла             = ПомещенныеФайлы[0].Имя;
		АдресФайлаВХранилище = ПомещенныеФайлы[0].Хранение;
		
		МассивАдресов = Новый Массив;
		Если ДополнительныеПараметры.ЭтоФайлExcel Тогда
			МассивАдресов.Добавить(ИмяФайла);
		Иначе
			МассивАдресов.Добавить(АдресФайлаВХранилище);
		КонецЕсли;
		
		ЗагрузитьРеестрНажатиеПродолжениеЗагрузка(МассивАдресов, ДополнительныеПараметры.ЭтоФайлExcel);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьПомещениеФайлаИзКаталогаВоВремХранилище()

&НаКлиенте
// Установить все флажки в табличной части.
//
Процедура УстановитьФлажки(Команда)
	
	Для Каждого Строка Из Объект.ТаблицаРеестра Цикл
		Строка.Использовать = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Снять все флажки в табличной части.
//
Процедура СнятьФлажки(Команда)
	
	Для Каждого Строка Из Объект.ТаблицаРеестра Цикл
		Строка.Использовать = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Формирует документы "Регистрация оплаты", заполняя данными из табличной части.
//
Процедура СформироватьДокументыНажатие(Команда)
	
	// Проверим, указан ли хотя бы один вид документа для формирования.
	НайденныеНастройки = Объект.НастройкаЗаполнения.НайтиСтроки(Новый Структура("Пометка", Истина));
	Если НайденныеНастройки.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В настройках загрузки должен быть указан хотя бы один вид документов, создаваемых при загрузке реестра!");
		Возврат;
	КонецЕсли;
	
	// В настройках загрузки при установленном флаге "Корректировка долга" должен быть указан контрагент,
	// а также обязательно выбран вид документа "Регистрация оплаты" из создаваемых при загрузке реестра.
	Если Объект.КорректировкаДолга Тогда
		
		Если Объект.Контрагент.Пустая() Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В настройках загрузки не выбран контрагент (обслуживающая организация).");
			Возврат;
		КонецЕсли;
		
		РОДляФормирования = Объект.НастройкаЗаполнения.НайтиСтроки(Новый Структура("Документ, Пометка", "Регистрация оплаты", Истина));
		Если РОДляФормирования.Количество() = 0 Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("При установленной настройке ""Корректировка долга"" среди видов документов, " +
			"создаваемых при загрузке платежных документов, должен быть выбран вид документа ""Регистрация оплаты"".");
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ОпределительУслуги = "";
	Если Элементы.ТаблицаРеестра.ПодчиненныеЭлементы.ТаблицаРеестраВидУслуги.Видимость Тогда
		ОпределительУслуги = "Вид услуги";
	ИначеЕсли Элементы.ТаблицаРеестра.ПодчиненныеЭлементы.ТаблицаРеестраНоменклатураУслуги.Видимость Тогда
		ОпределительУслуги = "Номенклатура услуги";
	ИначеЕсли Элементы.ТаблицаРеестра.ПодчиненныеЭлементы.ТаблицаРеестраУслуга.Видимость Тогда
		ОпределительУслуги = "Услуга";
	КонецЕсли;
	
	ОплатаПоУслуге = НЕ (ОпределительУслуги = "");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОплатаПоУслуге",     ОплатаПоУслуге);
	СтруктураПараметров.Вставить("ОпределительУслуги", ОпределительУслуги);
	
	СформироватьДокументы(СтруктураПараметров);
	
КонецПроцедуры

&НаКлиенте
// Обработчик нажатия кнопки "Установить дату оплаты" командной панели табличной части.
//
Процедура УстановитьДатуОплаты(Команда)
	
	тмДатаПлатежа = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	ПоказатьВводЗначения(Новый ОписаниеОповещения("ОбработатьВводЗначения", ЭтаФорма),
	тмДатаПлатежа,
	"Укажите дату платежа",
	Тип("Дата"));
	
КонецПроцедуры // УстановитьДату()

&НаКлиенте
// Обработчик результата ввода значения, вызванного в процедуре "УстановитьДату()".
Процедура ОбработатьВводЗначения(РезультатВвода, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатВвода = Неопределено Тогда
		Для Каждого СтрокаТабличнойЧасти Из Объект.ТаблицаРеестра Цикл
			СтрокаТабличнойЧасти.Дата = РезультатВвода;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВводЗначения()

&НаКлиенте
// Обработчик нажатия на кнопку "Установить распределение на кап. ремонт" командной панели табличной части.
//
Процедура УстановитьВариантРаспределенияОплатКапРемонт(Команда)
	
	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ОбработатьВыборВариантаРаспределения", ЭтаФорма),
	Элементы.ТаблицаРеестраВариантРаспределенияОплатКапРемонт.СписокВыбора,
	Элементы.ТаблицаРеестраВариантРаспределенияОплатКапРемонт);
	
КонецПроцедуры // УстановитьВариантРаспределенияОплат()

&НаКлиенте
// Обработчик результата выбора распределения на кап. ремонт".
//
Процедура ОбработатьВыборВариантаРаспределения(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат = Неопределено Тогда
		Для Каждого СтрокаТабличнойЧасти Из Объект.ТаблицаРеестра Цикл
			СтрокаТабличнойЧасти.ВариантРаспределенияОплатКапРемонт = Результат.Значение;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВыборВариантаРаспределения()

#КонецОбласти
