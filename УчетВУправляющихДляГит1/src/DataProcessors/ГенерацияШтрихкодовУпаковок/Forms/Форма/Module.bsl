#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяДата = ТекущаяДатаСеанса();
	ВозвращатьАдресВременногоХранилища = НЕ Параметры.НеВозвращатьАдресВременногоХранилища;
	ПриоритетНастроекШК = Параметры.ПриоритетНастроекШК;
	
	Если ВозвращатьАдресВременногоХранилища Тогда
		Если ЭтоАдресВременногоХранилища(Параметры.АдресПредыдущихШтрихкодов) Тогда
			АдресПредыдущихШтрихкодов = Параметры.АдресПредыдущихШтрихкодов;
			ПоследниеШтрихкоды = ПолучитьИзВременногоХранилища(АдресПредыдущихШтрихкодов);
			Если НЕ ПоследниеШтрихкоды = Неопределено И НЕ ЗначениеЗаполнено(Параметры.Штрихкод) Тогда
				ТипУпаковки  = ПоследниеШтрихкоды.Получить("ПоследнийТипУпаковки");
				ТипШтрихкода = ПоследниеШтрихкоды.Получить("ПоследнийТипШтрихкода");
				ТипШтрихкодаСтрокой = ПоследниеШтрихкоды.Получить("ПоследнийТипШтрихкодаСтрокой");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(Параметры.ТипУпаковки) Тогда
		ТипУпаковки = Параметры.ТипУпаковки;
		Элементы.ТипУпаковки.ТолькоПросмотр = Истина;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ТипУпаковки) Тогда
		ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
	КонецЕсли;
	Если ЗначениеЗаполнено(Параметры.ТипШтрихкода) Тогда
		ТипШтрихкода = Параметры.ТипШтрихкода;
		Если НЕ ЗначениеЗаполнено(ТипШтрихкодаСтрокой)
		   И ТипШтрихкода = Перечисления.ТипыШтрихкодов.SSCC Тогда
			ТипШтрихкодаСтрокой = "SSCC";
		ИначеЕсли НЕ ЗначениеЗаполнено(ТипШтрихкодаСтрокой)
			И НЕ ПриоритетНастроекШК
			И ТипШтрихкода = Перечисления.ТипыШтрихкодов.Code128 Тогда
			ТипШтрихкодаСтрокой = "Code128Формат2";
		ИначеЕсли НЕ ЗначениеЗаполнено(ТипШтрихкодаСтрокой)
			И ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_128 Тогда
			ТипШтрихкодаСтрокой = "GS1128";
		ИначеЕсли НЕ ЗначениеЗаполнено(ТипШтрихкодаСтрокой)
			И ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataBarExpandedStacked Тогда
			ТипШтрихкодаСтрокой = "GS1DataBarExpandedStacked";
		КонецЕсли;
		Если Параметры.ТипШтрихкода = Перечисления.ТипыШтрихкодов.Code128 Тогда
			ЭлементСписка = Элементы.ТипШтрихкодаСтрокой.СписокВыбора.НайтиПоЗначению("SSCC");
			Если НЕ ЭлементСписка = Неопределено Тогда
				Элементы.ТипШтрихкодаСтрокой.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
			ЭлементСписка = Элементы.ТипШтрихкодаСтрокой.СписокВыбора.НайтиПоЗначению("GS1128");
			Если НЕ ЭлементСписка = Неопределено Тогда
				Элементы.ТипШтрихкодаСтрокой.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
			ЭлементСписка = Элементы.ТипШтрихкодаСтрокой.СписокВыбора.НайтиПоЗначению("GS1DataBarExpandedStacked");
			Если НЕ ЭлементСписка = Неопределено Тогда
				Элементы.ТипШтрихкодаСтрокой.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
		Иначе
			Элементы.ТипШтрихкодаСтрокой.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	ТипШтрихкодаЗаданИнициализацией = Ложь;
	Если Не ЗначениеЗаполнено(ТипШтрихкодаСтрокой)
	   И Не ПриоритетНастроекШК Тогда
		ТипШтрихкода = Перечисления.ТипыШтрихкодов.Code128;
		ТипШтрихкодаСтрокой = "Code128Формат2";
		ТипШтрихкодаЗаданИнициализацией = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Параметры.Номенклатура) Тогда
		Номенклатура = Параметры.Номенклатура;
		Элементы.Номенклатура.ТолькоПросмотр = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(Параметры.Характеристика) Тогда
		Характеристика = Параметры.Характеристика;
		Элементы.Характеристика.ТолькоПросмотр = Истина;
	КонецЕсли;
	Если ЗначениеЗаполнено(Параметры.ДатаМаркировки) Тогда
		ДатаМаркировки = Параметры.ДатаМаркировки;
		ГодГенерацииШтрихкода = Год(ДатаМаркировки);
		Элементы.ГруппаРеквизитыCode128Формат1ДатаМаркировки.ТолькоПросмотр = Истина;
	Иначе
		ДатаМаркировки = ТекущаяДата;
		ГодГенерацииШтрихкода = Год(ДатаМаркировки);
	КонецЕсли;
	ЗаполнениеПоПереданномуШтрихкоду = Ложь;
	Если ЗначениеЗаполнено(Параметры.Штрихкод) Тогда
		ЗаполнениеПоПереданномуШтрихкоду = Истина;
		Штрихкод = Параметры.Штрихкод;
	КонецЕсли;
	УстановливатьКоличествоВложенныхЕдиниц = Ложь;
	КоличествоВложенныхЕдиницДляУстановки  = 0;
	Если ЗначениеЗаполнено(Параметры.КоличествоВложенныхЕдиниц) Тогда
		УстановливатьКоличествоВложенныхЕдиниц = Истина;
		КоличествоВложенныхЕдиницДляУстановки = Параметры.КоличествоВложенныхЕдиниц;
	КонецЕсли;
	
	НастройкиЗаполнения = ШаблонНастроекЗаполнения(ЭтотОбъект);
	НастройкиЗаполнения.ЗаполнениеИдентификаторовОрганизации = Истина;
	НастройкиЗаполнения.ЧтениеПредыдущихНастроекШтрихкода = Истина;
	НастройкиЗаполнения.ЗаполнениеПоПереданномуШтрихкоду  = ЗаполнениеПоПереданномуШтрихкоду;
	НастройкиЗаполнения.УстановливатьКоличествоВложенныхЕдиниц = УстановливатьКоличествоВложенныхЕдиниц;
	НастройкиЗаполнения.КоличествоВложенныхЕдиницДляУстановки = КоличествоВложенныхЕдиницДляУстановки;
	НастройкиЗаполнения.УвеличиватьЗначениеПриЗаполненииПоШтрихкоду = ЗаполнениеПоПереданномуШтрихкоду;
	НастройкиЗаполнения.ЧтениеПоследнихУникальныхЗначений = Истина;
	НастройкиЗаполнения.ЗаполнениеGTINНоменклатуры = ЗначениеЗаполнено(Номенклатура);
	НастройкиЗаполнения.ГенерацияШтрихкода = Истина;
	НастройкиЗаполнения.ТипШтрихкодаЗаданИнициализацией = ТипШтрихкодаЗаданИнициализацией;
	
	ЗаполнениеПоНастройкамЗаполнения(НастройкиЗаполнения);
	
	УстаревшиеФорматыШтрихкодов = Новый Массив;
	УстаревшиеФорматыШтрихкодов.Добавить("Code128Формат1");
	УстаревшиеФорматыШтрихкодов.Добавить("SSCC");
	УстаревшиеФорматыШтрихкодов.Добавить("GS1128");
	УстаревшиеФорматыШтрихкодов.Добавить("GS1DataBarExpandedStacked");
	
	Для каждого УстаревшийФорматШК Из УстаревшиеФорматыШтрихкодов Цикл
		Если ТипШтрихкодаСтрокой <> УстаревшийФорматШК Тогда
			// Т.к. формат не используется, то по умолчанию не даем выбирать его (может только быть прочитан ранее созданный)
			ЭлементСписка = Элементы.ТипШтрихкодаСтрокой.СписокВыбора.НайтиПоЗначению(УстаревшийФорматШК);
			Если НЕ ЭлементСписка = Неопределено Тогда
				Элементы.ТипШтрихкодаСтрокой.СписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьДоступностьХарактеристики(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПодборИдентификаторовПримененияGS1"
		И Источник = ЭтотОбъект Тогда
		
		ОбработатьПодборИдентификаторовПримененияGS1(Параметр);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипУпаковкиПриИзменении(Элемент)
	ТипУпаковкиПриИзмененииСервер();
КонецПроцедуры

&НаСервере
Процедура ИзменитьТипЛогистическойЕдиницыПоТипуУпаковки(ЗаполнениеПоПереданномуШтрихкоду = Ложь)
	Если ТипШтрихкодаСтрокой = "Code128Формат2" Тогда
		ТекущееЗначение = ТипЛогистическойЕдиницы;
		ЗначениеУстановить = ТекущееЗначение;
		
		ПолныйСписокВыбора = Новый СписокЗначений;
		ПолныйСписокВыбора.Добавить(1, НСтр("ru = 'Короб'"));
		ПолныйСписокВыбора.Добавить(2, НСтр("ru = 'Паллета'"));
		ПолныйСписокВыбора.Добавить(3, НСтр("ru = 'Сборный короб'"));
		ПолныйСписокВыбора.Добавить(4, НСтр("ru = 'Сборная паллета'"));
		
		Если ТекущееЗначение > 4
			ИЛИ ТекущееЗначение < 1 Тогда
			ПредставлениеЭлемента = НСтр("ru = '%1 <непредусмотренное форматом значение>'");
			ПредставлениеЭлемента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПредставлениеЭлемента, ТекущееЗначение);
			ПолныйСписокВыбора.Добавить(ТекущееЗначение, ПредставлениеЭлемента);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТипУпаковки) Тогда
			ПолныйСписокВыбора.Очистить();
			ЗначениеУстановить = 0;
		ИначеЕсли ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка Тогда
			ЭлементСписка = ПолныйСписокВыбора.НайтиПоЗначению(3);
			Если НЕ ЭлементСписка = Неопределено Тогда
				ПолныйСписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
			ЭлементСписка = ПолныйСписокВыбора.НайтиПоЗначению(4);
			Если НЕ ЭлементСписка = Неопределено Тогда
				ПолныйСписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
			
			Если ТекущееЗначение = 3 Тогда
				ЗначениеУстановить = 1;
			ИначеЕсли ТекущееЗначение = 4 Тогда
				ЗначениеУстановить = 2;
			КонецЕсли;
		ИначеЕсли ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка Тогда
			ЭлементСписка = ПолныйСписокВыбора.НайтиПоЗначению(1);
			Если НЕ ЭлементСписка = Неопределено Тогда
				ПолныйСписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
			ЭлементСписка = ПолныйСписокВыбора.НайтиПоЗначению(2);
			Если НЕ ЭлементСписка = Неопределено Тогда
				ПолныйСписокВыбора.Удалить(ЭлементСписка);
			КонецЕсли;
			
			Если ТекущееЗначение = 1 Тогда
				ЗначениеУстановить = 3;
			ИначеЕсли ТекущееЗначение = 2 Тогда
				ЗначениеУстановить = 4;
			КонецЕсли;
		КонецЕсли;
		
		Элементы.ГруппаРеквизитыCode128Формат2ТипЛогистическойЕдиницы.СписокВыбора.Очистить();
		
		Для Каждого ЭлементСписка Из ПолныйСписокВыбора Цикл
			Элементы.ГруппаРеквизитыCode128Формат2ТипЛогистическойЕдиницы.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЦикла;
		
		Если НЕ ЗаполнениеПоПереданномуШтрихкоду Тогда
			ТипЛогистическойЕдиницы = ЗначениеУстановить;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ТипУпаковкиПриИзмененииСервер()
	
	Если ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка Тогда
		Номенклатура   = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура");
		Характеристика = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры");
	КонецЕсли;
	
	ИзменитьТипЛогистическойЕдиницыПоТипуУпаковки();
	
	НастройкиЗаполнения = ШаблонНастроекЗаполнения(ЭтотОбъект);
	НастройкиЗаполнения.ЧтениеПредыдущихНастроекШтрихкода = Истина;
	НастройкиЗаполнения.ЧтениеПоследнихУникальныхЗначений = Истина;
	НастройкиЗаполнения.ЗаполнениеGTINНоменклатуры = ЗначениеЗаполнено(Номенклатура);
	НастройкиЗаполнения.ГенерацияШтрихкода = Истина;
	ЗаполнениеПоНастройкамЗаполнения(НастройкиЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ТипШтрихкодаСтрокойПриИзменении(Элемент)
	ТипШтрихкодаСтрокойПриИзмененииСервер();
КонецПроцедуры

&НаСервере
Процедура ОчисткаРеквизитовПоТипуШтрихкода()
	НомерПоПорядку = 0;
	Если ТипШтрихкодаСтрокой <> "Code128Формат1"
	   И ТипШтрихкодаСтрокой <> "Code128Формат2"
	   И ТипШтрихкодаСтрокой <> "Code128Формат3" Тогда
		ИдентификаторОрганизации = "";
	КонецЕсли;
	Если ТипШтрихкодаСтрокой <> "Code128Формат2" Тогда
		ТипЛогистическойЕдиницы = 0;
		НомерПлощадкиМаркировки = 0;
	КонецЕсли;
	
	Если ТипШтрихкодаСтрокой <> "SSCC" Тогда
		ЦифраРасширения = 0;
		ПрефиксКомпанииGS1 = 0;
		СерийныйНомерSSCC = 0;
	КонецЕсли;
	Если ТипШтрихкодаСтрокой <> "GS1128"
	   И ТипШтрихкодаСтрокой <> "GS1DataBarExpandedStacked" Тогда
		ИдентификаторыПрименения.Очистить();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ТипШтрихкодаСтрокойПриИзмененииСервер()
	
	Если НЕ ЗначениеЗаполнено(ТипШтрихкодаСтрокой) Тогда
		ТипШтрихкода = Перечисления.ТипыШтрихкодов.ПустаяСсылка();
	ИначеЕсли ТипШтрихкодаСтрокой = "SSCC" Тогда
		ТипШтрихкода = Перечисления.ТипыШтрихкодов.SSCC;
	ИначеЕсли ТипШтрихкодаСтрокой = "Code128Формат1"
		ИЛИ ТипШтрихкодаСтрокой = "Code128Формат2"
		ИЛИ ТипШтрихкодаСтрокой = "Code128Формат3" Тогда
		ТипШтрихкода = Перечисления.ТипыШтрихкодов.Code128;
	ИначеЕсли ТипШтрихкодаСтрокой = "GS1128" Тогда
		ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_128;
	ИначеЕсли ТипШтрихкодаСтрокой = "GS1DataBarExpandedStacked" Тогда
		ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataBarExpandedStacked;
	КонецЕсли;
		
	ОчисткаРеквизитовПоТипуШтрихкода();
	
	НастройкиЗаполнения = ШаблонНастроекЗаполнения(ЭтотОбъект);
	НастройкиЗаполнения.ЗаполнениеИдентификаторовОрганизации = Истина;
	НастройкиЗаполнения.ЧтениеПредыдущихНастроекШтрихкода = Истина;
	НастройкиЗаполнения.ЧтениеПоследнихУникальныхЗначений = Истина;
	НастройкиЗаполнения.ЗаполнениеGTINНоменклатуры = ЗначениеЗаполнено(Номенклатура);
	НастройкиЗаполнения.ГенерацияШтрихкода = Истина;
	ЗаполнениеПоНастройкамЗаполнения(НастройкиЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЦифраРасширенияПриИзменении(Элемент)
	Если КэшКлючТекущегоНумератораШтрихкода <> КлючТекущегоНумератораШтрихкодаДляКэша(ЭтотОбъект) Тогда
		СерийныйНомерSSCC = 0;
	КонецЕсли;
	
	НастройкиЗаполнения = ШаблонНастроекЗаполнения(ЭтотОбъект);
	НастройкиЗаполнения.ЧтениеПоследнихУникальныхЗначений = Истина;
	НастройкиЗаполнения.ГенерацияШтрихкода = Истина;
	ЗаполнениеПоНастройкамЗаполнения(НастройкиЗаполнения);
КонецПроцедуры

&НаКлиенте
Процедура ПрефиксКомпанииGS1ПриИзменении(Элемент)
	Если КэшКлючТекущегоНумератораШтрихкода <> КлючТекущегоНумератораШтрихкодаДляКэша(ЭтотОбъект) Тогда
		СерийныйНомерSSCC = 0;
	КонецЕсли;
	
	НастройкиЗаполнения = ШаблонНастроекЗаполнения(ЭтотОбъект);
	НастройкиЗаполнения.ЧтениеПоследнихУникальныхЗначений = Истина;
	НастройкиЗаполнения.ГенерацияШтрихкода = Истина;
	ЗаполнениеПоНастройкамЗаполнения(НастройкиЗаполнения);
КонецПроцедуры

&НаКлиенте
Процедура НомерПоПорядкуПриИзменении(Элемент)
	НастройкиЗаполнения = ШаблонНастроекЗаполнения(ЭтотОбъект);
	НастройкиЗаполнения.ГенерацияШтрихкода = Истина;
	ЗаполнениеПоНастройкамЗаполнения(НастройкиЗаполнения);
КонецПроцедуры

&НаКлиенте
Процедура ДатаМаркировкиПриИзменении(Элемент)
	ГодГенерацииШтрихкода = Год(ДатаМаркировки);
	
	Если КэшКлючТекущегоНумератораШтрихкода <> КлючТекущегоНумератораШтрихкодаДляКэша(ЭтотОбъект) Тогда
		НомерПоПорядку = 0;
	КонецЕсли;
	
	НастройкиЗаполнения = ШаблонНастроекЗаполнения(ЭтотОбъект);
	НастройкиЗаполнения.ЧтениеПоследнихУникальныхЗначений = Истина;
	НастройкиЗаполнения.ГенерацияШтрихкода = Истина;
	ЗаполнениеПоНастройкамЗаполнения(НастройкиЗаполнения);
КонецПроцедуры

&НаКлиенте
Процедура ГодГенерацииШтрихкодаПриИзменении(Элемент)
	
	Если ГодГенерацииШтрихкода = 0 Тогда
		ГодГенерацииШтрихкода = 1;
	КонецЕсли;
	ДатаМаркировки = Дата(ГодГенерацииШтрихкода, 1, 1);
	
	Если КэшКлючТекущегоНумератораШтрихкода <> КлючТекущегоНумератораШтрихкодаДляКэша(ЭтотОбъект) Тогда
		НомерПоПорядку = 0;
	КонецЕсли;
	
	НастройкиЗаполнения = ШаблонНастроекЗаполнения(ЭтотОбъект);
	НастройкиЗаполнения.ЧтениеПоследнихУникальныхЗначений = Истина;
	НастройкиЗаполнения.ГенерацияШтрихкода = Истина;
	ЗаполнениеПоНастройкамЗаполнения(НастройкиЗаполнения);
КонецПроцедуры

&НаКлиенте
Процедура ТипЛогистическойЕдиницыПриИзменении(Элемент)
	НастройкиЗаполнения = ШаблонНастроекЗаполнения(ЭтотОбъект);
	НастройкиЗаполнения.ГенерацияШтрихкода = Истина;
	ЗаполнениеПоНастройкамЗаполнения(НастройкиЗаполнения);
КонецПроцедуры

&НаКлиенте
Процедура НомерПлощадкиМаркировкиПриИзменении(Элемент)
	НастройкиЗаполнения = ШаблонНастроекЗаполнения(ЭтотОбъект);
	НастройкиЗаполнения.ГенерацияШтрихкода = Истина;
	ЗаполнениеПоНастройкамЗаполнения(НастройкиЗаполнения);
КонецПроцедуры

&НаКлиенте
Процедура СерийныйНомерSSCCПриИзменении(Элемент)
	НастройкиЗаполнения = ШаблонНастроекЗаполнения(ЭтотОбъект);
	НастройкиЗаполнения.ГенерацияШтрихкода = Истина;
	ЗаполнениеПоНастройкамЗаполнения(НастройкиЗаполнения);
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторОрганизацииПриИзменении(Элемент)
	Если КэшКлючТекущегоНумератораШтрихкода <> КлючТекущегоНумератораШтрихкодаДляКэша(ЭтотОбъект) Тогда
		НомерПоПорядку = 0;
	КонецЕсли;
	
	НастройкиЗаполнения = ШаблонНастроекЗаполнения(ЭтотОбъект);
	НастройкиЗаполнения.ЧтениеПоследнихУникальныхЗначений = Истина;
	НастройкиЗаполнения.ГенерацияШтрихкода = Истина;
	ЗаполнениеПоНастройкамЗаполнения(НастройкиЗаполнения);
КонецПроцедуры

&НаКлиенте
Процедура НоменклатураПриИзменении(Элемент)
	НоменклатураПриИзмененииСервер();
КонецПроцедуры

&НаСервере
Процедура НоменклатураПриИзмененииСервер()
	УстановитьДоступностьХарактеристики(ЭтотОбъект);
	ЗаполнитьGTINНоменклатуры();
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаПриИзменении(Элемент)
	ЗаполнитьGTINНоменклатуры();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыИдентификаторыПрименения

&НаКлиенте
Процедура ИдентификаторыПримененияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	ОткрытьФормуПодбораИдентификаторовПрименения();
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторыПримененияПриИзменении(Элемент)
	НастройкиЗаполнения = ШаблонНастроекЗаполнения(ЭтотОбъект);
	НастройкиЗаполнения.ГенерацияШтрихкода = Истина;
	ЗаполнениеПоНастройкамЗаполнения(НастройкиЗаполнения);
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторыПримененияДополнительныйПараметрЗначениеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ИдентификаторыПрименения.ТекущиеДанные;
	Если ТекущиеДанные.ДополнительныйПараметрЗначение > ТекущиеДанные.ДополнительныйПараметрМаксимальноеЗначение Тогда
		ТекущиеДанные.ДополнительныйПараметрЗначение = ТекущиеДанные.ДополнительныйПараметрМаксимальноеЗначение;
	ИначеЕсли ТекущиеДанные.ДополнительныйПараметрЗначение < ТекущиеДанные.ДополнительныйПараметрМинимальноеЗначение Тогда
		ТекущиеДанные.ДополнительныйПараметрЗначение = ТекущиеДанные.ДополнительныйПараметрМинимальноеЗначение;
	КонецЕсли;
	
	ТекущиеДанные.ТипЗначения = ШтрихкодыУпаковокКлиентСервер.ТипЗначенияПараметра(ТекущиеДанные.КлючИдентификатора,
		ТекущиеДанные.ДополнительныйПараметрЗначение);
	
	ТекущиеДанные.Значение = ТекущиеДанные.ТипЗначения.ПривестиЗначение(ТекущиеДанные.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторыПримененияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ИдентификаторыПрименения.ТекущиеДанные;
	Элементы.ИдентификаторыПримененияЗначение.СписокВыбора.Очистить();
	Если ТекущиеДанные.СписокПредлагаемыхЗначений.Количество() > 0 Тогда
		Для каждого ЭлементСписка Из ТекущиеДанные.СписокПредлагаемыхЗначений Цикл
			Элементы.ИдентификаторыПримененияЗначение.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЦикла;
		Элементы.ИдентификаторыПримененияЗначение.КнопкаВыпадающегоСписка = Истина;
	Иначе
		Элементы.ИдентификаторыПримененияЗначение.КнопкаВыпадающегоСписка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИдентификаторыПримененияЗначениеПриИзмененииНомераПартии()
	
	Если КэшКлючТекущегоНумератораШтрихкода <> КлючТекущегоНумератораШтрихкодаДляКэша(ЭтотОбъект) Тогда
		НайденныеСтроки = ИдентификаторыПрименения.НайтиСтроки(
			Новый Структура("ИмяИдентификатора", ВРЕГ("СерийныйНомер")));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока.Значение = 0;
		КонецЦикла;
	КонецЕсли;
	
	НастройкиЗаполнения = ШаблонНастроекЗаполнения(ЭтотОбъект);
	НастройкиЗаполнения.ЧтениеПоследнихУникальныхЗначений = Истина;
	НастройкиЗаполнения.СохранятьТекущиеНастройкиИдентификаторовПрименения = Истина;
	НастройкиЗаполнения.ГенерацияШтрихкода = Истина;
	ЗаполнениеПоНастройкамЗаполнения(НастройкиЗаполнения);
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторыПримененияЗначениеПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ИдентификаторыПрименения.ТекущиеДанные;
	Если ТекущиеДанные.ИмяИдентификатора = ВРЕГ("НомерПартии") Тогда
		ИдентификаторыПримененияЗначениеПриИзмененииНомераПартии();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПолучитьВес(Команда)
	
	Отказ = Ложь;
	ДополнительныеПараметры = Новый Структура;
	
	Если КоличествоИдентификаторовВеса > 1 Тогда
		ТекущиеДанные = Элементы.ИдентификаторыПрименения.ТекущиеДанные;
		
		Если ТекущиеДанные.ИмяИдентификатора = ВРЕГ("МассаБруттоВКг")
		 ИЛИ ТекущиеДанные.ИмяИдентификатора = ВРЕГ("МассаНеттоВКг") Тогда
			ДополнительныеПараметры.Вставить("ИндексСтрокиИдентификаторов", ТекущиеДанные.ПолучитьИдентификатор());
		Иначе
			ОчиститьСообщения();
			ТекстСообщения = НСтр("ru = 'Выбирите строку с весом товаров'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ИдентификаторыПрименения",, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПолучитьВесЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	МенеджерОборудованияКлиент.НачатьПолученияВесаСЭлектронныхВесов(ОписаниеОповещения, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьВесЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		ОчиститьСообщения();
		УстановитьВесТоваровСервер(РезультатВыполнения.Вес, ДополнительныеПараметры);
	Иначе
		ОчиститьСообщения();
		СообщитьОбОшибке(РезультатВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВесТоваровСервер(Вес, ДополнительныеПараметры)
	СтрокаИдентификатора = Неопределено;
	Если КоличествоИдентификаторовВеса > 1 Тогда
		СтрокаИдентификатора = ИдентификаторыПрименения.НайтиПоИдентификатору(ДополнительныеПараметры.ИндексСтрокиИдентификаторов);
	Иначе
		Для каждого Строка Из ИдентификаторыПрименения Цикл
			Если Строка.ИмяИдентификатора = ВРЕГ("МассаБруттоВКг")
			 ИЛИ Строка.ИмяИдентификатора = ВРЕГ("МассаНеттоВКг") Тогда
				СтрокаИдентификатора = Строка;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СтрокаИдентификатора = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Не найдена строка с весом товаров'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ИдентификаторыПрименения");
		Возврат;
	КонецЕсли;
	
	СтрокаИдентификатора.Значение = Вес;
	
	НастройкиЗаполнения = ШаблонНастроекЗаполнения(ЭтотОбъект);
	НастройкиЗаполнения.ГенерацияШтрихкода = Истина;
	ЗаполнениеПоНастройкамЗаполнения(НастройкиЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборИдентификаторовПримененияGS1(Команда)
	ОткрытьФормуПодбораИдентификаторовПрименения();
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторыПримененияПереместить(Направление)
	ТекущиеДанные = Элементы.ИдентификаторыПрименения.ТекущиеДанные;
	Индекс = ИдентификаторыПрименения.Индекс(ТекущиеДанные);
	КоличествоСтрок = ИдентификаторыПрименения.Количество();
	Если Направление = -1 И Индекс = 0 И КоличествоСтрок > 1 Тогда
		ИдентификаторыПрименения.Сдвинуть(Индекс, КоличествоСтрок - 1);
	ИначеЕсли Направление = 1 И Индекс = КоличествоСтрок -1 И КоличествоСтрок > 1 Тогда
		ИдентификаторыПрименения.Сдвинуть(Индекс, 1 - КоличествоСтрок);
	ИначеЕсли КоличествоСтрок > 1 Тогда
		ИдентификаторыПрименения.Сдвинуть(Индекс, Направление);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторыПримененияПереместитьВверх(Команда)
	ИдентификаторыПримененияПереместить(-1);
	
	НастройкиЗаполнения = ШаблонНастроекЗаполнения(ЭтотОбъект);
	НастройкиЗаполнения.ГенерацияШтрихкода = Истина;
	ЗаполнениеПоНастройкамЗаполнения(НастройкиЗаполнения);
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторыПримененияПереместитьВниз(Команда)
	ИдентификаторыПримененияПереместить(1);
	
	НастройкиЗаполнения = ШаблонНастроекЗаполнения(ЭтотОбъект);
	НастройкиЗаполнения.ГенерацияШтрихкода = Истина;
	ЗаполнениеПоНастройкамЗаполнения(НастройкиЗаполнения);
КонецПроцедуры

&НаКлиенте
Процедура Готово(Команда)
	
	Если НЕ ПроверкаКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(АдресПредыдущихШтрихкодов) Тогда
		ПредыдущиеШтрихкоды = ПолучитьИзВременногоХранилища(АдресПредыдущихШтрихкодов);
		ПредыдущиеШтрихкоды.Вставить(ТипШтрихкодаСтрокой, Штрихкод);
	КонецЕсли;
	
	ВозвращаемыеПараметры = Новый Структура;
	ВозвращаемыеПараметры.Вставить("Штрихкод",     Штрихкод);
	ВозвращаемыеПараметры.Вставить("ТипУпаковки",  ТипУпаковки);
	ВозвращаемыеПараметры.Вставить("ТипШтрихкода", ТипШтрихкода);
	ВозвращаемыеПараметры.Вставить("ТипШтрихкодаСтрокой", ТипШтрихкодаСтрокой);
	Если ВозвращатьАдресВременногоХранилища
	   И НЕ ВладелецФормы = Неопределено Тогда
		Если ЭтоАдресВременногоХранилища(АдресПредыдущихШтрихкодов) Тогда
			ПоследниеШтрихкоды = ПолучитьИзВременногоХранилища(АдресПредыдущихШтрихкодов);
			ПоследниеШтрихкоды.Вставить(ТипШтрихкодаСтрокой, Штрихкод);
		Иначе
			ПоследниеШтрихкоды = Новый Соответствие;
			ПоследниеШтрихкоды.Вставить(ТипШтрихкодаСтрокой, Штрихкод);
		КонецЕсли;
		ПоследниеШтрихкоды.Вставить("ПоследнийТипУпаковки",  ТипУпаковки);
		ПоследниеШтрихкоды.Вставить("ПоследнийТипШтрихкода", ТипШтрихкода);
		ПоследниеШтрихкоды.Вставить("ПоследнийТипШтрихкодаСтрокой", ТипШтрихкодаСтрокой);
		ПоследниеНомераПоТипамШтрихкодов = ПоследниеШтрихкоды.Получить("ПоследниеНомераПоТипамШтрихкодов");
		Если ПоследниеНомераПоТипамШтрихкодов = Неопределено Тогда
			// В соответствии будет находится информация о закэшированных номерах в следующем виде:
			//  Т.к. параметры присваивания штрихкодов могут меняться, например, идентификатор организации,
			//  дата маркировки, ключ расширения SSCC, номер партии для GS1-128, то в значении-соответствии
			//  хранится следущая информация:
			//  1. Для SSCC. Ключ - "SSCC" + ЦифраРасширения + ПрефиксКомпанииGS1. Значение - максимальный СерийныйНомерSSCC.
			//  2. Для Code128 Формат 1. Ключ - "Code128Формат1" + ИдентификаторОрганизации + ДатаМаркировки.
			//  3. Для Code128 Формат 2. Ключ - "Code128Формат2" + ИдентификаторОрганизации + ТипЛогистическойЕдиницы + НомерПлощадкиМаркировки + ГодГенерацииШтрихкода.
			//  4. Для Code128 Формат 3. Ключ - "Code128Формат3" + ИдентификаторОрганизации.
			//     Значение - максимальный НомерПоПорядку.
			//  5. Для GS1-128 и GS1_DataBarExpandedStacked. Ключ - "GS1" + Номер партии (10).
			//     Значение - максимальный Серийный номер (21).
			ПоследниеНомераПоТипамШтрихкодов = Новый Соответствие;
		КонецЕсли;
		ТекущийКлючНумератора = КлючТекущегоНумератораШтрихкодаДляКэша(ЭтотОбъект);
		ТекущееЗначениеНумератора = 0;
		Если ТипШтрихкодаСтрокой = "SSCC" Тогда
			ТекущееЗначениеНумератора = СерийныйНомерSSCC;
		ИначеЕсли ТипШтрихкодаСтрокой = "Code128Формат1"
			ИЛИ ТипШтрихкодаСтрокой = "Code128Формат2"
			ИЛИ ТипШтрихкодаСтрокой = "Code128Формат3" Тогда
			ТекущееЗначениеНумератора = НомерПоПорядку;
		ИначеЕсли ТипШтрихкодаСтрокой = "GS1128"
		      ИЛИ ТипШтрихкодаСтрокой = "GS1DataBarExpandedStacked" Тогда
			Для каждого Строка Из ИдентификаторыПрименения Цикл
				Если Строка.ИмяИдентификатора = ВРЕГ("СерийныйНомер") Тогда
					ТекущееЗначениеНумератора = Строка.Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ПоследнееЗначениеНумератора = ПоследниеНомераПоТипамШтрихкодов.Получить(ТекущийКлючНумератора);
		Если ПоследнееЗначениеНумератора = Неопределено
		 ИЛИ ТекущееЗначениеНумератора > ПоследнееЗначениеНумератора Тогда
			ПоследниеНомераПоТипамШтрихкодов.Вставить(ТекущийКлючНумератора, ТекущееЗначениеНумератора);
		КонецЕсли;
		ПоследниеШтрихкоды.Вставить("ПоследниеНомераПоТипамШтрихкодов", ПоследниеНомераПоТипамШтрихкодов);
		
		Если ЭтоАдресВременногоХранилища(АдресПредыдущихШтрихкодов) Тогда
			АдресПредыдущихШтрихкодов = ПоместитьВоВременноеХранилище(ПоследниеШтрихкоды, АдресПредыдущихШтрихкодов);
		Иначе
			АдресПредыдущихШтрихкодов = ПоместитьВоВременноеХранилище(ПоследниеШтрихкоды, ВладелецФормы.УникальныйИдентификатор);
		КонецЕсли;
		ВозвращаемыеПараметры.Вставить("АдресПредыдущихШтрихкодов", АдресПредыдущихШтрихкодов);
	КонецЕсли;
	
	Закрыть(ВозвращаемыеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура Отмена(Команда)
	Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ПечатьЭтикетокШтрихкода(Команда)
	
	Если НЕ ПроверкаКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыШтрихкода = Новый Структура;
	ПараметрыШтрихкода.Вставить("ТипШтрихкода",   ТипШтрихкода);
	ПараметрыШтрихкода.Вставить("Штрихкод",       Штрихкод);
	ПараметрыШтрихкода.Вставить("Номенклатура",   Номенклатура);
	ПараметрыШтрихкода.Вставить("Характеристика", Характеристика);
	ПараметрыШтрихкода.Вставить("ДатаМаркировки", ДатаМаркировки);
	
	ОбъектыПечати = Новый Массив;
	ОбъектыПечати.Добавить(ПараметрыШтрихкода);
	
	ШтрихкодыУпаковокКлиент.ПечатьШтрихкодовУпаковок(ОбъектыПечати, ЭтотОбъект);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиентеНаСервереБезКонтекста
Функция КлючТекущегоНумератораШтрихкодаДляКэша(Форма)
	ТекущийКлючНумератора = "";
	
	Если Форма.ТипШтрихкодаСтрокой = "SSCC" Тогда
		ТекущийКлючНумератора = "SSCC" + Форма.ЦифраРасширения + ПриведенноеКДлинеЗначение(Форма.ПрефиксКомпанииGS1, 9);
	ИначеЕсли Форма.ТипШтрихкодаСтрокой = "Code128Формат1" Тогда
		ТекущийКлючНумератора = "Code128Формат1" + ПриведенноеКДлинеЗначение(Форма.ИдентификаторОрганизации, 12)
		+ Формат(Форма.ДатаМаркировки, "ДФ=ddMMyy");
	ИначеЕсли Форма.ТипШтрихкодаСтрокой = "Code128Формат2" Тогда
		ТекущийКлючНумератора = "Code128Формат2" + ПриведенноеКДлинеЗначение(Форма.ИдентификаторОрганизации, 12)
		+ ПриведенноеКДлинеЗначение(Форма.ТипЛогистическойЕдиницы, 1)
		+ ПриведенноеКДлинеЗначение(Форма.НомерПлощадкиМаркировки, 2)
		+ Формат(Форма.ДатаМаркировки, "ДФ=yy");
	ИначеЕсли Форма.ТипШтрихкодаСтрокой = "Code128Формат3" Тогда
		ТекущийКлючНумератора = "Code128Формат3" + ПриведенноеКДлинеЗначение(Форма.ИдентификаторОрганизации, 12);
	ИначеЕсли Форма.ТипШтрихкодаСтрокой = "GS1128"
		ИЛИ Форма.ТипШтрихкодаСтрокой = "GS1DataBarExpandedStacked" Тогда
		ТекущийКлючНумератора = "GS1";
		Для каждого Строка Из Форма.ИдентификаторыПрименения Цикл
			Если Строка.ИмяИдентификатора = ВРЕГ("НомерПартии") Тогда
				ТекущийКлючНумератора = "GS1" + Строка.Значение;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТекущийКлючНумератора;
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуПодбораИдентификаторовПрименения()
	ПараметрыОткрываемойФормы = Новый Структура;
	ПараметрыОткрываемойФормы.Вставить("ВыбранныеИдентификаторы", РанееВыбранныеИдентификаторыGS1());
	
	ОткрытьФорму("Обработка.ГенерацияШтрихкодовУпаковок.Форма.ФормаПодбораИдентификаторов", ПараметрыОткрываемойФормы, ЭтотОбъект, УникальныйИдентификатор);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	ВидимостьНоменклатуры = (Форма.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МультитоварнаяУпаковка")
	                        И Форма.ТипШтрихкодаСтрокой <> "SSCC"
	                        И Форма.ТипШтрихкодаСтрокой <> "Code128Формат1"
	                        И Форма.ТипШтрихкодаСтрокой <> "Code128Формат2"
	                        И Форма.ТипШтрихкодаСтрокой <> "Code128Формат3");
	
	Элементы.Номенклатура.Видимость   = ВидимостьНоменклатуры;
	Элементы.Характеристика.Видимость = ВидимостьНоменклатуры;
	
	Если Форма.ТипШтрихкодаСтрокой = "Code128Формат1" Тогда
		
		Элементы.ГруппаРеквизитыSSCC.Видимость           = Ложь;
		Элементы.ГруппаРеквизитыCode128Формат1.Видимость = Истина;
		Элементы.ГруппаРеквизитыCode128Формат2.Видимость = Ложь;
		Элементы.ГруппаРеквизитыCode128Формат3.Видимость = Ложь;
		Элементы.ГруппаРеквизитыGS1.Видимость            = Ложь;
		
	ИначеЕсли Форма.ТипШтрихкодаСтрокой = "Code128Формат2" Тогда
		
		Элементы.ГруппаРеквизитыSSCC.Видимость           = Ложь;
		Элементы.ГруппаРеквизитыCode128Формат1.Видимость = Ложь;
		Элементы.ГруппаРеквизитыCode128Формат2.Видимость = Истина;
		Элементы.ГруппаРеквизитыCode128Формат3.Видимость = Ложь;
		Элементы.ГруппаРеквизитыGS1.Видимость            = Ложь;
		
	ИначеЕсли Форма.ТипШтрихкодаСтрокой = "Code128Формат3" Тогда
		
		Элементы.ГруппаРеквизитыSSCC.Видимость           = Ложь;
		Элементы.ГруппаРеквизитыCode128Формат1.Видимость = Ложь;
		Элементы.ГруппаРеквизитыCode128Формат2.Видимость = Ложь;
		Элементы.ГруппаРеквизитыCode128Формат3.Видимость = Истина;
		Элементы.ГруппаРеквизитыGS1.Видимость            = Ложь;
		
	ИначеЕсли Форма.ТипШтрихкодаСтрокой = "SSCC" Тогда
		
		Элементы.ГруппаРеквизитыSSCC.Видимость           = Истина;
		Элементы.ГруппаРеквизитыCode128Формат1.Видимость = Ложь;
		Элементы.ГруппаРеквизитыCode128Формат2.Видимость = Ложь;
		Элементы.ГруппаРеквизитыCode128Формат3.Видимость = Ложь;
		Элементы.ГруппаРеквизитыGS1.Видимость            = Ложь;
		
	ИначеЕсли Форма.ТипШтрихкодаСтрокой = "GS1128"
	      ИЛИ Форма.ТипШтрихкодаСтрокой = "GS1DataBarExpandedStacked" Тогда
		
		Элементы.ГруппаРеквизитыSSCC.Видимость           = Ложь;
		Элементы.ГруппаРеквизитыCode128Формат1.Видимость = Ложь;
		Элементы.ГруппаРеквизитыCode128Формат2.Видимость = Ложь;
		Элементы.ГруппаРеквизитыCode128Формат3.Видимость = Ложь;
		Элементы.ГруппаРеквизитыGS1.Видимость            = Истина;
		
	Иначе
		
		Элементы.ГруппаРеквизитыSSCC.Видимость           = Ложь;
		Элементы.ГруппаРеквизитыCode128Формат1.Видимость = Ложь;
		Элементы.ГруппаРеквизитыCode128Формат2.Видимость = Ложь;
		Элементы.ГруппаРеквизитыCode128Формат3.Видимость = Ложь;
		Элементы.ГруппаРеквизитыGS1.Видимость            = Ложь;
		
	КонецЕсли;
	
	Элементы.ПрефиксКомпанииGS1.АвтоОтметкаНезаполненного =
		Форма.ТипШтрихкодаСтрокой = "SSCC";
	Элементы.СерийныйНомерSSCC.АвтоОтметкаНезаполненного =
		Форма.ТипШтрихкодаСтрокой = "SSCC";
	Элементы.ГруппаРеквизитыCode128Формат1ИдентификаторОрганизации.АвтоОтметкаНезаполненного =
		Форма.ТипШтрихкодаСтрокой = "Code128Формат1";
	Элементы.ГруппаРеквизитыCode128Формат1ДатаМаркировки.АвтоОтметкаНезаполненного =
		Форма.ТипШтрихкодаСтрокой = "Code128Формат1";
	Элементы.ГруппаРеквизитыCode128Формат1НомерПоПорядку.АвтоОтметкаНезаполненного =
		Форма.ТипШтрихкодаСтрокой = "Code128Формат1";
	Элементы.ГруппаРеквизитыCode128Формат2ИдентификаторОрганизации.АвтоОтметкаНезаполненного =
		Форма.ТипШтрихкодаСтрокой = "Code128Формат2";
	Элементы.ГруппаРеквизитыCode128Формат2ТипЛогистическойЕдиницы.АвтоОтметкаНезаполненного =
		Форма.ТипШтрихкодаСтрокой = "Code128Формат2";
	//Элементы.ГруппаРеквизитыCode128Формат2НомерПлощадкиМаркировки.АвтоОтметкаНезаполненного =
	//	Форма.ТипШтрихкодаСтрокой = "Code128Формат2";
	Элементы.ГруппаРеквизитыCode128Формат2ГодГенерацииШтрихкода.АвтоОтметкаНезаполненного =
		Форма.ТипШтрихкодаСтрокой = "Code128Формат2";
	Элементы.ГруппаРеквизитыCode128Формат2НомерПоПорядку.АвтоОтметкаНезаполненного =
		Форма.ТипШтрихкодаСтрокой = "Code128Формат2";
	Элементы.ГруппаРеквизитыCode128Формат3ИдентификаторОрганизации.АвтоОтметкаНезаполненного =
		Форма.ТипШтрихкодаСтрокой = "Code128Формат3";
	Элементы.ГруппаРеквизитыCode128Формат3НомерПоПорядку.АвтоОтметкаНезаполненного =
		Форма.ТипШтрихкодаСтрокой = "Code128Формат3";
	Элементы.ИдентификаторыПрименения.АвтоОтметкаНезаполненного =
		(Форма.ТипШтрихкодаСтрокой = "GS1128"
		ИЛИ Форма.ТипШтрихкодаСтрокой = "GS1DataBarExpandedStacked");
	
	Элементы.ИдентификаторыПримененияПолучитьВес.Видимость = Форма["КоличествоИдентификаторовВеса"] > 0;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИспользоватьХарактеристикуНоменклатуры(Номенклатура)
	
	Возврат ИнтеграцияИС.ПризнакИспользованияХарактеристик(Номенклатура);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДоступностьХарактеристики(Форма)
	
	Элементы = Форма.Элементы;
	
	Если НЕ ЗначениеЗаполнено(Форма.Номенклатура) Тогда
		ИспользоватьХарактеристику = Ложь;
	Иначе
		ИспользоватьХарактеристику = ИспользоватьХарактеристикуНоменклатуры(Форма.Номенклатура);
	КонецЕсли;
	
	Если ИспользоватьХарактеристику Тогда
		Элементы.Характеристика.Доступность = Истина;
		Элементы.Характеристика.ПодсказкаВвода = "";
		Элементы.Характеристика.АвтоОтметкаНезаполненного = Истина;
	Иначе
		Элементы.Характеристика.Доступность = Ложь;
		Элементы.Характеристика.ПодсказкаВвода = НСтр("ru = '<характеристики не используются>'");
		Элементы.Характеристика.АвтоОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТипШтрихкодаСовпадаетСПрочитанным(ПараметрыПрочитанногоШтрихкода)
	
	Совпадение = Ложь;
	
	Если НЕ ПараметрыПрочитанногоШтрихкода.Результат = Неопределено
		И ЗначениеЗаполнено(ТипШтрихкодаСтрокой) Тогда
		
		Если ТипШтрихкодаСтрокой = "SSCC"
			И ПараметрыПрочитанногоШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC") Тогда
			Совпадение = Истина;
		ИначеЕсли ТипШтрихкодаСтрокой = "Code128Формат1"
			И ПараметрыПрочитанногоШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.Code128")
			И ПараметрыПрочитанногоШтрихкода.Результат.НомерФорматаCode128 = 1 Тогда
			Совпадение = Истина;
		ИначеЕсли ТипШтрихкодаСтрокой = "Code128Формат2"
			И ПараметрыПрочитанногоШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.Code128")
			И ПараметрыПрочитанногоШтрихкода.Результат.НомерФорматаCode128 = 2 Тогда
			Совпадение = Истина;
		ИначеЕсли ТипШтрихкодаСтрокой = "Code128Формат3"
			И ПараметрыПрочитанногоШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.Code128")
			И ПараметрыПрочитанногоШтрихкода.Результат.НомерФорматаCode128 = 3 Тогда
			Совпадение = Истина;
		ИначеЕсли ТипШтрихкодаСтрокой = "GS1128"
			И ПараметрыПрочитанногоШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_128") Тогда
			Совпадение = Истина;
		ИначеЕсли ТипШтрихкодаСтрокой = "GS1DataBarExpandedStacked"
			И ПараметрыПрочитанногоШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_DataBarExpandedStacked") Тогда
			Совпадение = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Совпадение;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ТипШтрихкодаСтрокойПоПараметрамШК(ПараметрыШтрихкода)
	
	Результат = "";
	Если НЕ ПараметрыШтрихкода.Результат = Неопределено Тогда
		Если ПараметрыШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.SSCC") Тогда
			Результат = "SSCC";
		ИначеЕсли ПараметрыШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.Code128") Тогда
			Если ПараметрыШтрихкода.Результат.НомерФорматаCode128 = 1 Тогда
				Результат = "Code128Формат1";
			ИначеЕсли ПараметрыШтрихкода.Результат.НомерФорматаCode128 = 2 Тогда
				Результат = "Code128Формат2";
			ИначеЕсли ПараметрыШтрихкода.Результат.НомерФорматаCode128 = 3 Тогда
				Результат = "Code128Формат3";
			КонецЕсли;
		ИначеЕсли ПараметрыШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_128") Тогда
			Результат = "GS1128";
		ИначеЕсли ПараметрыШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.GS1_DataBarExpandedStacked") Тогда
			Результат = "GS1DataBarExpandedStacked";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗаполнениеПоНастройкамЗаполнения(НастройкиЗаполнения)
	
	ПромежуточныеРезультаты = Новый Структура;
	
	Если НастройкиЗаполнения.ЗаполнениеПоПереданномуШтрихкоду Тогда
		ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкода(Штрихкод);
		
		Если ПараметрыШтрихкода.Результат = Неопределено Тогда
			НастройкиЗаполнения.ЗаполнениеПоПереданномуШтрихкоду = Ложь;
		ИначеЕсли ТипШтрихкодаСовпадаетСПрочитанным(ПараметрыШтрихкода)
			И НастройкиЗаполнения.ТипШтрихкодаЗаданИнициализацией Тогда
			// установлены противоречивые настройки, заполняем по последним настройкам типа штрихкода
			НастройкиЗаполнения.ЗаполнениеПоПереданномуШтрихкоду = Ложь;
		Иначе
			ТипШтрихкодаСтрокой = ТипШтрихкодаСтрокойПоПараметрамШК(ПараметрыШтрихкода);
			ТипШтрихкода = ПараметрыШтрихкода.ТипШтрихкода;
			ПромежуточныеРезультаты.Вставить("ШтрихкодДляКопированияНастроек", Штрихкод);
			ПромежуточныеРезультаты.Вставить("ШтрихкодДляКопированияНастроекТип", ТипШтрихкодаСтрокой);
			ПромежуточныеРезультаты.Вставить("ПараметрыШтрихкода", ПараметрыШтрихкода);
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиЗаполнения.ЗаполнениеИдентификаторовОрганизации
	   И (ТипШтрихкодаСтрокой = "Code128Формат1"
	  ИЛИ ТипШтрихкодаСтрокой = "Code128Формат2"
	  ИЛИ ТипШтрихкодаСтрокой = "Code128Формат3") Тогда
		ЗаполненитьИдентификаторыОрганизации();
	КонецЕсли;
	
	Если НастройкиЗаполнения.ЧтениеПредыдущихНастроекШтрихкода Тогда
		Если НЕ НастройкиЗаполнения.ЗаполнениеПоПереданномуШтрихкоду Тогда
			НайтиИПрочитатьПредыдущиеНастройкиШтрихкодов(НастройкиЗаполнения, ПромежуточныеРезультаты);
		КонецЕсли;
		ЗаполнитьНастройкамиПоПредыдущемуШтрихкоду(НастройкиЗаполнения, ПромежуточныеРезультаты);
	КонецЕсли;
	
	Если НастройкиЗаполнения.ЗаполнениеИдентификаторовОрганизации Тогда
		Если ТипШтрихкодаСтрокой = "GS1DataBarExpandedStacked"
		 ИЛИ ТипШтрихкодаСтрокой = "GS1128" Тогда
			ЗаполнитьСписокПартийПоУмолчаниюДляИдентификаторовПрименения();
		КонецЕсли;
	КонецЕсли;
	
	//обновляем параметр КоличествоИдентификаторовВеса для отображения кнопки ПрочитатьВес и изменения ее поведения
	КоличествоИдентификаторовВеса = 0;
	Если ТипШтрихкодаСтрокой = "GS1DataBarExpandedStacked"
	 ИЛИ ТипШтрихкодаСтрокой = "GS1128" Тогда
		Для каждого СтрокаИдентификаторов Из ИдентификаторыПрименения Цикл
			Если СтрокаИдентификаторов.ИмяИдентификатора = ВРЕГ("МассаБруттоВКг")
			 ИЛИ СтрокаИдентификаторов.ИмяИдентификатора = ВРЕГ("МассаНеттоВКг") Тогда
				КоличествоИдентификаторовВеса = КоличествоИдентификаторовВеса + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НастройкиЗаполнения.ЗаполнениеGTINНоменклатуры Тогда
		Если ТипШтрихкодаСтрокой = "GS1DataBarExpandedStacked"
		 ИЛИ ТипШтрихкодаСтрокой = "GS1128" Тогда
			ЗаполнитьGTINНоменклатуры(Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипШтрихкодаСтрокой = "Code128Формат2" Тогда
		ИзменитьТипЛогистическойЕдиницыПоТипуУпаковки();
	КонецЕсли;
	
	Если НастройкиЗаполнения.ЧтениеПоследнихУникальныхЗначений Тогда
		УстановитьУникальныеЗначенияШтрихкода(НастройкиЗаполнения, ПромежуточныеРезультаты);
	КонецЕсли;
	
	Если НастройкиЗаполнения.ГенерацияШтрихкода Тогда
		ГенерацияШтрихкода();
	КонецЕсли;
	
	КэшКлючТекущегоНумератораШтрихкода = КлючТекущегоНумератораШтрихкодаДляКэша(ЭтотОбъект);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ГенерацияШтрихкода()
	
	Штрихкод       = "";
	ДлинаШтрихкода = 0;
	
	Если ЗначениеЗаполнено(ТипУпаковки)
		И ЗначениеЗаполнено(ТипШтрихкода) Тогда
		
		Если ТипШтрихкодаСтрокой = "SSCC" Тогда
			
			ПараметрыШтрихкода = Новый Структура;
			ПараметрыШтрихкода.Вставить("ЦифраРасширения",    ЦифраРасширения);
			ПараметрыШтрихкода.Вставить("ПрефиксКомпанииGS1", ПрефиксКомпанииGS1);
			ПараметрыШтрихкода.Вставить("СерийныйНомерSSCC",  СерийныйНомерSSCC);
			
			Штрихкод = ШтрихкодыУпаковокКлиентСервер.ШтрихкодSSCC(ПараметрыШтрихкода);
			
			ДлинаШтрихкода = СтрДлина(Штрихкод);
			
		ИначеЕсли ТипШтрихкодаСтрокой = "Code128Формат1" Тогда
			
			ПараметрыШтрихкода = Новый Структура;
			ПараметрыШтрихкода.Вставить("НомерФорматаCode128",      1);
			ПараметрыШтрихкода.Вставить("ИдентификаторОрганизации", ИдентификаторОрганизации);
			ПараметрыШтрихкода.Вставить("ДатаМаркировки",           ДатаМаркировки);
			ПараметрыШтрихкода.Вставить("НомерПоПорядку",           НомерПоПорядку);
			
			Штрихкод = ШтрихкодыУпаковокКлиентСервер.ШтрихкодCode128(ПараметрыШтрихкода);
			
			ДлинаШтрихкода = СтрДлина(Штрихкод);
			
		ИначеЕсли ТипШтрихкодаСтрокой = "Code128Формат2" Тогда
			
			ПараметрыШтрихкода = Новый Структура;
			ПараметрыШтрихкода.Вставить("НомерФорматаCode128",         2);
			ПараметрыШтрихкода.Вставить("ИдентификаторОрганизации",    ИдентификаторОрганизации);
			ПараметрыШтрихкода.Вставить("ТипЛогистическойЕдиницы",     ТипЛогистическойЕдиницы);
			ПараметрыШтрихкода.Вставить("НомерПлощадкиМаркировки",     НомерПлощадкиМаркировки);
			ПараметрыШтрихкода.Вставить("ГодГенерацииШтрихкодаСтрока", Формат(ДатаМаркировки, "ДФ=yy; ДП=00"));
			ПараметрыШтрихкода.Вставить("ГодГенерацииШтрихкода",       ДатаМаркировки);
			ПараметрыШтрихкода.Вставить("НомерПоПорядку",              НомерПоПорядку);
			
			Штрихкод = ШтрихкодыУпаковокКлиентСервер.ШтрихкодCode128(ПараметрыШтрихкода);
			
			ДлинаШтрихкода = СтрДлина(Штрихкод);
			
		ИначеЕсли ТипШтрихкодаСтрокой = "Code128Формат3" Тогда
			
			ПараметрыШтрихкода = Новый Структура;
			ПараметрыШтрихкода.Вставить("НомерФорматаCode128",      3);
			ПараметрыШтрихкода.Вставить("ИдентификаторОрганизации", ИдентификаторОрганизации);
			ПараметрыШтрихкода.Вставить("НомерПоПорядку",           НомерПоПорядку);
			
			Штрихкод = ШтрихкодыУпаковокКлиентСервер.ШтрихкодCode128(ПараметрыШтрихкода);
			
			ДлинаШтрихкода = СтрДлина(Штрихкод);
			
		ИначеЕсли ТипШтрихкодаСтрокой = "GS1128"
		      ИЛИ ТипШтрихкодаСтрокой = "GS1DataBarExpandedStacked" Тогда
			
			ПараметрыШтрихкода = Новый Структура;
			ИспользуемыеИдентификаторы = Новый Массив;
			
			Для каждого СтрокаИдентификатора Из ИдентификаторыПрименения Цикл
			
				СвойстваИдентификатора = Новый Структура;
				СвойстваИдентификатора.Вставить("ИмяИдентификатора", СтрокаИдентификатора.ИмяИдентификатора);
				СвойстваИдентификатора.Вставить("КлючИдентификатора", СтрокаИдентификатора.КлючИдентификатора);
				СвойстваИдентификатора.Вставить("Значение", СтрокаИдентификатора.Значение);
				СвойстваИдентификатора.Вставить("ДополнительныйПараметр", СтрокаИдентификатора.ДополнительныйПараметрЗначение);
				
				ИспользуемыеИдентификаторы.Добавить(СвойстваИдентификатора);
			
			КонецЦикла;
			
			Штрихкод = ШтрихкодыУпаковокКлиентСервер.ШтрихкодGS1(ИспользуемыеИдентификаторы);
			
			ДлинаШтрихкода = СтрДлина(
				ШтрихкодыУпаковокКлиентСервер.ШтрихкодGS1(
					ИспользуемыеИдентификаторы,
					Ложь,
					ШтрихкодыУпаковокКлиентСервер.СимволОкончанияСтрокиПеременнойДлины()));
			
		КонецЕсли;
		
	КонецЕсли;
	
	МаксимальнаяДлинаШтрихкода = 0;
	Если ТипШтрихкодаСтрокой = "GS1128" Тогда
		МаксимальнаяДлинаШтрихкода = 48;
	ИначеЕсли ТипШтрихкодаСтрокой = "GS1DataBarExpandedStacked" Тогда
		МаксимальнаяДлинаШтрихкода = 72;
	КонецЕсли;
	
	ПревышенаМаксимальнаяДлинаШтрихкода = Ложь;
	Если МаксимальнаяДлинаШтрихкода <> 0
		И ДлинаШтрихкода > МаксимальнаяДлинаШтрихкода Тогда
		ПревышенаМаксимальнаяДлинаШтрихкода = Истина;
	КонецЕсли;
	
	МассивСтрок = Новый Массив;
	Если ПревышенаМаксимальнаяДлинаШтрихкода Тогда
		МассивСтрок.Добавить(
			Новый ФорматированнаяСтрока(
				СтрШаблон(
					НСтр("ru = 'Длина штрихкода (%1) превышает рекомендуемое значение %2'"),
					ДлинаШтрихкода, МаксимальнаяДлинаШтрихкода),,
				ЦветаСтиля.ЦветТекстаПроблемаГосИС));
		Информация = Новый ФорматированнаяСтрока(МассивСтрок);
	Иначе
		Информация = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУникальныеЗначенияШтрихкода(НастройкиЗаполнения, ПромежуточныеРезультаты)
	
	Если ТипШтрихкодаСтрокой = "SSCC" Тогда
		Если НЕ ЗначениеЗаполнено(СерийныйНомерSSCC)
		 ИЛИ НастройкиЗаполнения.УвеличиватьЗначениеПриЗаполненииПоШтрихкоду Тогда
			ПоследниеЗаписанныеЗначения = ПолучитьПоследниеЗаписанныеУникальныеЗначения(НастройкиЗаполнения, ПромежуточныеРезультаты);
			Если ЗначениеЗаполнено(ПоследниеЗаписанныеЗначения.СерийныйНомерSSCC) Тогда
				СерийныйНомерSSCC = ПоследниеЗаписанныеЗначения.СерийныйНомерSSCC + 1;
			Иначе
				СерийныйНомерSSCC = 1;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ТипШтрихкодаСтрокой = "Code128Формат1"
		ИЛИ ТипШтрихкодаСтрокой = "Code128Формат2"
		ИЛИ ТипШтрихкодаСтрокой = "Code128Формат3" Тогда
		Если НЕ ЗначениеЗаполнено(НомерПоПорядку)
		 ИЛИ НастройкиЗаполнения.УвеличиватьЗначениеПриЗаполненииПоШтрихкоду Тогда
			ПоследниеЗаписанныеЗначения = ПолучитьПоследниеЗаписанныеУникальныеЗначения(НастройкиЗаполнения, ПромежуточныеРезультаты);
			Если ЗначениеЗаполнено(ПоследниеЗаписанныеЗначения.НомерПоПорядку) Тогда
				НомерПоПорядку = ПоследниеЗаписанныеЗначения.НомерПоПорядку + 1;
			Иначе
				НомерПоПорядку = 1;
			КонецЕсли;
		КонецЕсли;
	Иначе
		НомерПартии = "";
		НайденныеСтроки = ИдентификаторыПрименения.НайтиСтроки(Новый Структура("ИмяИдентификатора", ВРЕГ("НомерПартии")));
		Если НайденныеСтроки.Количество() > 0 Тогда
			НомерПартии = НайденныеСтроки[0].Значение;
		КонецЕсли;
		СерийныйНомер = 0;
		НайденныеСтроки = ИдентификаторыПрименения.НайтиСтроки(Новый Структура("ИмяИдентификатора", ВРЕГ("СерийныйНомер")));
		Если НайденныеСтроки.Количество() > 0 Тогда
			СерийныйНомер = НайденныеСтроки[0].Значение;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НомерПартии)
		 ИЛИ НЕ ЗначениеЗаполнено(СерийныйНомер)
		 ИЛИ НастройкиЗаполнения.УвеличиватьЗначениеПриЗаполненииПоШтрихкоду Тогда
		
			ПоследниеЗаписанныеЗначения = ПолучитьПоследниеЗаписанныеУникальныеЗначения(НастройкиЗаполнения, ПромежуточныеРезультаты);
			
			ОбновитьСерийныйНомер = Ложь;
			Если НЕ ЗначениеЗаполнено(НомерПартии) Тогда
				НайденныеСтроки = ИдентификаторыПрименения.НайтиСтроки(Новый Структура("ИмяИдентификатора", ВРЕГ("НомерПартии")));
				Если НайденныеСтроки.Количество() > 0 Тогда
					Если ЗначениеЗаполнено(ПоследниеЗаписанныеЗначения.НомерПартии) Тогда
						НайденныеСтроки[0].Значение = ПоследниеЗаписанныеЗначения.НомерПартии;
						ОбновитьСерийныйНомер = Истина;
					ИначеЕсли НайденныеСтроки[0].СписокПредлагаемыхЗначений.Количество() = 1 Тогда
						НайденныеСтроки[0].Значение = НайденныеСтроки[0].СписокПредлагаемыхЗначений.Получить(0).Значение;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СерийныйНомер) Тогда
				ОбновитьСерийныйНомер = Истина;
			КонецЕсли;
			Если ОбновитьСерийныйНомер
			 ИЛИ НастройкиЗаполнения.УвеличиватьЗначениеПриЗаполненииПоШтрихкоду Тогда
				НайденныеСтроки = ИдентификаторыПрименения.НайтиСтроки(Новый Структура("ИмяИдентификатора", ВРЕГ("СерийныйНомер")));
				Если НайденныеСтроки.Количество() > 0 Тогда
					Если ЗначениеЗаполнено(ПоследниеЗаписанныеЗначения.СерийныйНомер) Тогда
						НайденныеСтроки[0].Значение = ПоследниеЗаписанныеЗначения.СерийныйНомер + 1;
					Иначе
						НайденныеСтроки[0].Значение = 1;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПоследниеЗаписанныеУникальныеЗначения(НастройкиЗаполнения, ПромежуточныеРезультаты)
	
	ПоследниеЗначения = Новый Структура;
	
	ПоследнийНомерКэша = 0;
	Если НастройкиЗаполнения.ЗаполнениеПоПереданномуШтрихкоду Тогда
		РезультатЧтенияШтрихкода = ПромежуточныеРезультаты.ПараметрыШтрихкода.Результат;
		Если НЕ РезультатЧтенияШтрихкода = Неопределено Тогда
			Если ТипШтрихкодаСтрокой = "SSCC" Тогда
				ПоследнийНомерКэша = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(
					РезультатЧтенияШтрихкода.СерийныйНомерSSCC);
			ИначеЕсли ТипШтрихкодаСтрокой = "Code128Формат1"
				ИЛИ ТипШтрихкодаСтрокой = "Code128Формат2"
				ИЛИ ТипШтрихкодаСтрокой = "Code128Формат3" Тогда
				ПоследнийНомерКэша = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(
					РезультатЧтенияШтрихкода.НомерПоПорядку);
			ИначеЕсли ТипШтрихкодаСтрокой = "GS1128"
			      ИЛИ ТипШтрихкодаСтрокой = "GS1DataBarExpandedStacked" Тогда
				Для каждого Строка Из РезультатЧтенияШтрихкода Цикл
					Если Строка.ИмяИдентификатора = ВРЕГ("СерийныйНомер") Тогда
						ПоследнийНомерКэша = Строка.Значение;
						Прервать;
					КонецЕсли;
				КонецЦикла; 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ЭтоАдресВременногоХранилища(АдресПредыдущихШтрихкодов) Тогда
		ЗначенияКэшаШтрихкодов = ПолучитьИзВременногоХранилища(АдресПредыдущихШтрихкодов);
		ТекущийКлючНумератора = КлючТекущегоНумератораШтрихкодаДляКэша(ЭтотОбъект);
		ПоследниеНомераПоТипамШтрихкодов = ЗначенияКэшаШтрихкодов.Получить("ПоследниеНомераПоТипамШтрихкодов");
		ПоследнийНомер = ПоследниеНомераПоТипамШтрихкодов.Получить(ТекущийКлючНумератора);
		Если ПоследнийНомер = Неопределено Тогда
			ПоследнийНомер = 0;
		КонецЕсли;
		ПоследнийНомерКэша = Макс(ПоследнийНомерКэша, ПоследнийНомер);
	КонецЕсли;
	
	Если ТипШтрихкодаСтрокой = "SSCC" Тогда
		
		ЧастьШтрихкодаБезСкобок  = "00" + ЦифраРасширения + ПриведенноеКДлинеЗначение(ПрефиксКомпанииGS1, 9);
		ЧастьШтрихкодаСоСкобками = "(00)" + ЦифраРасширения + ПриведенноеКДлинеЗначение(ПрефиксКомпанииGS1, 9);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ЧастьШтрихкода", ЧастьШтрихкодаСоСкобками + "%");
		Запрос.УстановитьПараметр("ТипШтрихкода", ТипШтрихкода);
		ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	&ВыражениеСерийныйНомерSSCC КАК СерийныйНомерSSCC
		|ИЗ
		|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
		|ГДЕ
		|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода ПОДОБНО &ЧастьШтрихкода
		|	И ШтрихкодыУпаковокТоваров.ТипШтрихкода = &ТипШтрихкода
		|
		|УПОРЯДОЧИТЬ ПО
		|	СерийныйНомерSSCC УБЫВ";
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВыражениеСерийныйНомерSSCC", "ПОДСТРОКА(ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода, 15, 7)");
		
		Результат = Запрос.Выполнить();
		ПоследнийНомерВБД = 0;
		
		Если Результат.Пустой() Тогда
			Запрос.Текст = ТекстЗапроса;
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ВыражениеСерийныйНомерSSCC", "ПОДСТРОКА(ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода, 13, 7)");
			Запрос.УстановитьПараметр("ЧастьШтрихкода", ЧастьШтрихкодаБезСкобок + "%");
			Результат = Запрос.Выполнить();
		КонецЕсли;
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ПоследнийНомерВБД = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(Выборка.СерийныйНомерSSCC);
		КонецЕсли;
		ПоследниеЗначения.Вставить("СерийныйНомерSSCC", Макс(ПоследнийНомерВБД, ПоследнийНомерКэша));
		
	ИначеЕсли ТипШтрихкодаСтрокой = "Code128Формат1" Тогда
		
		ЧастьШтрихкода = ПриведенноеКДлинеЗначение(СокрЛП(ИдентификаторОрганизации), 12) + Формат(ДатаМаркировки, "ДФ=ddMMyy"); // Согласованный формат даты
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ЧастьШтрихкода", ЧастьШтрихкода + "%");
		Запрос.УстановитьПараметр("ТипШтрихкода", ТипШтрихкода);
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода КАК ЗначениеШтрихкода
		|ИЗ
		|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
		|ГДЕ
		|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода ПОДОБНО &ЧастьШтрихкода
		|	И ШтрихкодыУпаковокТоваров.ТипШтрихкода = &ТипШтрихкода
		|	И ПОДСТРОКА(ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода, 19, 1) <> """"
		|	И ПОДСТРОКА(ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода, 23, 1) = """"
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗначениеШтрихкода УБЫВ";
		
		Результат = Запрос.Выполнить();
		ПоследнийНомерВБД = 0;
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ПоследнийНомерВБД = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(
				Сред(Выборка.ЗначениеШтрихкода, СтрДлина(ЧастьШтрихкода) + 1));
		КонецЕсли;
		ПоследниеЗначения.Вставить("НомерПоПорядку", Макс(ПоследнийНомерВБД, ПоследнийНомерКэша));
		
	ИначеЕсли ТипШтрихкодаСтрокой = "Code128Формат2" Тогда
		
		ЧастьШтрихкода = ПриведенноеКДлинеЗначение(ИдентификаторОрганизации, 12)
			+ ПриведенноеКДлинеЗначение(ТипЛогистическойЕдиницы, 1)
			+ ПриведенноеКДлинеЗначение(НомерПлощадкиМаркировки, 2)
			+ ПриведенноеКДлинеЗначение(Формат(ДатаМаркировки, "ДФ=yy; ДП=00"), 2);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ЧастьШтрихкода", ЧастьШтрихкода + "%");
		Запрос.УстановитьПараметр("ТипШтрихкода", ТипШтрихкода);
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода КАК ЗначениеШтрихкода
		|ИЗ
		|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
		|ГДЕ
		|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода ПОДОБНО &ЧастьШтрихкода
		|	И ШтрихкодыУпаковокТоваров.ТипШтрихкода = &ТипШтрихкода
		|	И ПОДСТРОКА(ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода, 23, 1) <> """"
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗначениеШтрихкода УБЫВ";
		
		Результат = Запрос.Выполнить();
		ПоследнийНомерВБД = 0;
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ПоследнийНомерВБД = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(
				Сред(Выборка.ЗначениеШтрихкода, СтрДлина(ЧастьШтрихкода) + 1));
		КонецЕсли;
		ПоследниеЗначения.Вставить("НомерПоПорядку", Макс(ПоследнийНомерВБД, ПоследнийНомерКэша));
		
	ИначеЕсли ТипШтрихкодаСтрокой = "Code128Формат3" Тогда
		
		ЧастьШтрихкода = ПриведенноеКДлинеЗначение(ИдентификаторОрганизации, 12);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ЧастьШтрихкода", ЧастьШтрихкода + "%");
		Запрос.УстановитьПараметр("ТипШтрихкода", ТипШтрихкода);
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода КАК ЗначениеШтрихкода
		|ИЗ
		|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
		|ГДЕ
		|	ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода ПОДОБНО &ЧастьШтрихкода
		|	И ШтрихкодыУпаковокТоваров.ТипШтрихкода = &ТипШтрихкода
		|	И ПОДСТРОКА(ШтрихкодыУпаковокТоваров.ЗначениеШтрихкода, 19, 1) = """"
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЗначениеШтрихкода УБЫВ";
		
		Результат = Запрос.Выполнить();
		ПоследнийНомерВБД = 0;
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ПоследнийНомерВБД = СтроковыеФункцииКлиентСервер.СтрокаВЧисло(
				Сред(Выборка.ЗначениеШтрихкода, СтрДлина(ЧастьШтрихкода) + 1));
		КонецЕсли;
		ПоследниеЗначения.Вставить("НомерПоПорядку", Макс(ПоследнийНомерВБД, ПоследнийНомерКэша));
		
	ИначеЕсли ТипШтрихкодаСтрокой = "GS1128"
	      ИЛИ ТипШтрихкодаСтрокой = "GS1DataBarExpandedStacked" Тогда
		
		НомерПартии = "";
		НайденныеСтроки = ИдентификаторыПрименения.НайтиСтроки(Новый Структура("ИмяИдентификатора", ВРЕГ("НомерПартии")));
		Если НайденныеСтроки.Количество() > 0 Тогда
			НомерПартии = НайденныеСтроки[0].Значение;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ШтрихкодыУпаковокТоваров.НомерПартии КАК НомерПартии
		|ПОМЕСТИТЬ МаксимальныйНомерПартии
		|ИЗ
		|	Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
		|ГДЕ
		|	ШтрихкодыУпаковокТоваров.ТипУпаковки = &ТипУпаковки
		|	И ШтрихкодыУпаковокТоваров.ТипШтрихкода В (&ТипыШтрихкода)
		|	И НЕ ШтрихкодыУпаковокТоваров.ПометкаУдаления
		|	И &УсловиеНомерПартии
		|	
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаУпаковки УБЫВ,
		|	НомерПартии УБЫВ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	МаксимальныйНомерПартии.НомерПартии КАК НомерПартии,
		|	ШтрихкодыУпаковокТоваров.СерийныйНомер КАК СерийныйНомер
		|ИЗ
		|	МаксимальныйНомерПартии КАК МаксимальныйНомерПартии
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШтрихкодыУпаковокТоваров КАК ШтрихкодыУпаковокТоваров
		|		ПО МаксимальныйНомерПартии.НомерПартии = ШтрихкодыУпаковокТоваров.НомерПартии
		|
		|УПОРЯДОЧИТЬ ПО
		|	СерийныйНомер УБЫВ";
		
		ТипыШтрихкода = Новый Массив;
		ТипыШтрихкода.Добавить(Перечисления.ТипыШтрихкодов.GS1_128);
		ТипыШтрихкода.Добавить(Перечисления.ТипыШтрихкодов.GS1_DataBarExpandedStacked);
		
		Запрос.УстановитьПараметр("ТипУпаковки", ТипУпаковки);
		Запрос.УстановитьПараметр("ТипыШтрихкода", ТипыШтрихкода);
		
		Если ЗначениеЗаполнено(НомерПартии) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНомерПартии", "ШтрихкодыУпаковокТоваров.НомерПартии = &НомерПартии");
			Запрос.УстановитьПараметр("НомерПартии", НомерПартии);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНомерПартии", "ИСТИНА");
		КонецЕсли;
		
		Результат = Запрос.Выполнить();
		
		ПоследнийНомерВБД = 0;
		Если Результат.Пустой() Тогда
			ПоследниеЗначения.Вставить("НомерПартии", "");
			ПоследнийНомерВБД = 0;
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ПоследниеЗначения.Вставить("НомерПартии",   Выборка.НомерПартии);
			ПоследнийНомерВБД = Выборка.СерийныйНомер;
		КонецЕсли;
		ПоследниеЗначения.Вставить("СерийныйНомер", Макс(ПоследнийНомерВБД, ПоследнийНомерКэша));
	КонецЕсли;
	
	Возврат ПоследниеЗначения;
	
КонецФункции

&НаСервере
Процедура НайтиИПрочитатьПредыдущиеНастройкиШтрихкодов(НастройкиЗаполнения, ПромежуточныеРезультаты)
	
	ПоследнееЗначениеШтрихкода = Неопределено;
	ПоследнееЗначениеШтрихкодаТип = Неопределено;
	
	Если ЭтоАдресВременногоХранилища(АдресПредыдущихШтрихкодов) Тогда
		
		Если ЗначениеЗаполнено(ТипШтрихкода) Тогда
			ШтрихкодыПоТипам = ПолучитьИзВременногоХранилища(АдресПредыдущихШтрихкодов);
			Значение = ШтрихкодыПоТипам.Получить(ТипШтрихкодаСтрокой);
			Если НЕ Значение = Неопределено Тогда
				ПоследнееЗначениеШтрихкода = Значение;
				ПоследнееЗначениеШтрихкодаТип = ТипШтрихкодаСтрокой;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПоследнееЗначениеШтрихкода = Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийПользователь", ПользователиКлиентСервер.ТекущийПользователь());
		
		// Выбираем последние настройки штрихкода
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Таблица.ТипУпаковки КАК ТипУпаковки,
			|	Таблица.ТипШтрихкода КАК ТипШтрихкода,
			|	Таблица.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
			|	1 КАК Приоритет
			|ПОМЕСТИТЬ НастройкиПользователя
			|ИЗ
			|	Справочник.ШтрихкодыУпаковокТоваров КАК Таблица
			|ГДЕ
			|	НЕ Таблица.ПометкаУдаления
			|	И &УсловиеТипУпаковки
			|	И &УсловиеТипШтрихкода
			|	И Таблица.Ответственный = &ТекущийПользователь
			|
			|УПОРЯДОЧИТЬ ПО
			|	Таблица.ДатаУпаковки УБЫВ,
			|	Таблица.Ссылка УБЫВ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	Таблица.ТипУпаковки КАК ТипУпаковки,
			|	Таблица.ТипШтрихкода КАК ТипШтрихкода,
			|	Таблица.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
			|	2 КАК Приоритет
			|ПОМЕСТИТЬ НастройкиВсехПользователей
			|ИЗ
			|	Справочник.ШтрихкодыУпаковокТоваров КАК Таблица
			|ГДЕ
			|	НЕ Таблица.ПометкаУдаления
			|	И &УсловиеТипУпаковки
			|	И &УсловиеТипШтрихкода
			|	И Таблица.Ответственный <> &ТекущийПользователь
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	НастройкиПользователя.ТипУпаковки КАК ТипУпаковки,
			|	НастройкиПользователя.ТипШтрихкода КАК ТипШтрихкода,
			|	НастройкиПользователя.ЗначениеШтрихкода КАК ЗначениеШтрихкода,
			|	НастройкиПользователя.Приоритет КАК Приоритет
			|ИЗ
			|	НастройкиПользователя КАК НастройкиПользователя
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	НастройкиВсехПользователей.ТипУпаковки,
			|	НастройкиВсехПользователей.ТипШтрихкода,
			|	НастройкиВсехПользователей.ЗначениеШтрихкода,
			|	НастройкиВсехПользователей.Приоритет
			|ИЗ
			|	НастройкиВсехПользователей КАК НастройкиВсехПользователей
			|
			|УПОРЯДОЧИТЬ ПО
			|	Приоритет";
		
		Если ЗначениеЗаполнено(ТипУпаковки) Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеТипУпаковки", "Таблица.ТипУпаковки = &ТипУпаковки");
			Запрос.УстановитьПараметр("ТипУпаковки", ТипУпаковки);
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеТипУпаковки", "ИСТИНА");
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТипШтрихкодаСтрокой) Тогда
			Если ТипШтрихкодаСтрокой = "Code128Формат1" Тогда
				// ТипШтрихкода = Code128 и длина штрихкода = 22 символа.
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеТипШтрихкода", "Таблица.ТипШтрихкода = &ТипШтрихкода
				|	И ПОДСТРОКА(Таблица.ЗначениеШтрихкода, 19,1) <> """"
				|	И ПОДСТРОКА(Таблица.ЗначениеШтрихкода, 23,1) = """"");
			ИначеЕсли ТипШтрихкодаСтрокой = "Code128Формат2" Тогда
				// ТипШтрихкода = Code128 и длина штрихкода = 26 символа.
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеТипШтрихкода", "Таблица.ТипШтрихкода = &ТипШтрихкода
				|	И ПОДСТРОКА(Таблица.ЗначениеШтрихкода, 23,1) <> """"");
			ИначеЕсли ТипШтрихкодаСтрокой = "Code128Формат3" Тогда
				// ТипШтрихкода = Code128 и длина штрихкода = 18 символов.
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеТипШтрихкода", "Таблица.ТипШтрихкода = &ТипШтрихкода
				|	И ПОДСТРОКА(Таблица.ЗначениеШтрихкода, 19,1) = """"");
			Иначе
				Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеТипШтрихкода", "Таблица.ТипШтрихкода = &ТипШтрихкода");
			КонецЕсли;
			Запрос.УстановитьПараметр("ТипШтрихкода", ТипШтрихкода);
		Иначе
			// Не даем выбирать устаревшие форматы.
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеТипШтрихкода",
			"Таблица.ТипШтрихкода В (ЗНАЧЕНИЕ(Перечисление.ТипыШтрихкодов.SSCC),
			|	                    ЗНАЧЕНИЕ(Перечисление.ТипыШтрихкодов.Code128),
			|	                    ЗНАЧЕНИЕ(Перечисление.ТипыШтрихкодов.GS1_128),
			|	                    ЗНАЧЕНИЕ(Перечисление.ТипыШтрихкодов.GS1_DataBarExpandedStacked))
			|
			|	И НЕ(Таблица.ТипШтрихкода = ЗНАЧЕНИЕ(Перечисление.ТипыШтрихкодов.Code128)
			|	     И ПОДСТРОКА(Таблица.ЗначениеШтрихкода, 19,1) <> """"
			|	     И ПОДСТРОКА(Таблица.ЗначениеШтрихкода, 23,1) = """")");
			
		КонецЕсли;
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			
			Если НЕ ЗначениеЗаполнено(ТипУпаковки) Тогда
				ТипУпаковки  = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ТипШтрихкодаСтрокой) Тогда
				ТипШтрихкодаСтрокой = "SSCC";
				ТипШтрихкода = Перечисления.ТипыШтрихкодов.SSCC;
			КонецЕсли;
			
			ПоследнееЗначениеШтрихкода = Неопределено;
			ПоследнееЗначениеШтрихкодаТип = Неопределено;
			
		Иначе
			
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Если НЕ ЗначениеЗаполнено(ТипУпаковки) Тогда
				ТипУпаковки = Выборка.ТипУпаковки;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ТипШтрихкодаСтрокой) Тогда
				ТипШтрихкода = Выборка.ТипШтрихкода;
				Если Выборка.ТипШтрихкода = Перечисления.ТипыШтрихкодов.SSCC Тогда
					ТипШтрихкодаСтрокой = "SSCC";
				ИначеЕсли Выборка.ТипШтрихкода = Перечисления.ТипыШтрихкодов.Code128 Тогда
					НомерФорматаCode128 = ШтрихкодыУпаковокКлиентСервер.ФорматШтрихкодаCode128(Выборка.ЗначениеШтрихкода);
					Если НомерФорматаCode128 = 1 Тогда
						ТипШтрихкодаСтрокой = "Code128Формат1";
					ИначеЕсли НомерФорматаCode128 = 2 Тогда
						ТипШтрихкодаСтрокой = "Code128Формат2";
					ИначеЕсли НомерФорматаCode128 = 3 Тогда
						ТипШтрихкодаСтрокой = "Code128Формат3";
					Иначе
						ТипШтрихкодаСтрокой = "Code128Формат1";
					КонецЕсли;
				ИначеЕсли Выборка.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_128 Тогда
					ТипШтрихкодаСтрокой = "GS1128";
				ИначеЕсли Выборка.ТипШтрихкода = Перечисления.ТипыШтрихкодов.GS1_DataBarExpandedStacked Тогда
					ТипШтрихкодаСтрокой = "GS1DataBarExpandedStacked";
				КонецЕсли;
			КонецЕсли;
			
			ПоследнееЗначениеШтрихкода = Выборка.ЗначениеШтрихкода;
			ПоследнееЗначениеШтрихкодаТип = ТипШтрихкодаСтрокой;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПоследнееЗначениеШтрихкода) Тогда
		ПромежуточныеРезультаты.Вставить("ШтрихкодДляКопированияНастроек", ПоследнееЗначениеШтрихкода);
		ПромежуточныеРезультаты.Вставить("ШтрихкодДляКопированияНастроекТип", ПоследнееЗначениеШтрихкодаТип);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНастройкамиПоПредыдущемуШтрихкоду(НастройкиЗаполнения, ПромежуточныеРезультаты)
	
	Если ТипШтрихкодаСтрокой = "GS1128"
	 ИЛИ ТипШтрихкодаСтрокой = "GS1DataBarExpandedStacked" Тогда
		
		ПорядокИдентификаторовПрименения = ПорядокИдентификаторовПрименения(НастройкиЗаполнения, ПромежуточныеРезультаты);
		// Запоминаем текущие значения
		
		СвойстваИдентификаторов = ШтрихкодыУпаковокКлиентСерверПовтИсп.СвойстваКлючейИдентификаторовПрименения();
		Если НастройкиЗаполнения.СохранятьТекущиеНастройкиИдентификаторовПрименения Тогда
			НомерПоПорядку = 1;
			ИспользуемыеИдентификаторы = Новый Массив;
			Для каждого СтрокаТекущихЗначений Из ИдентификаторыПрименения Цикл
				Если НЕ ЗначениеЗаполнено(СтрокаТекущихЗначений.КлючИдентификатора) Тогда
					Продолжить;
				КонецЕсли;
				
				СвойстваИдентификатора = СвойстваИдентификаторов.Получить(СтрокаТекущихЗначений.КлючИдентификатора);
				
				Строка = ПорядокИдентификаторовПрименения.Найти(СтрокаТекущихЗначений.КлючИдентификатора, "КлючИдентификатора");
				Если Строка = Неопределено Тогда
					Строка = НоваяСтрокаТаблицыИдентификаторов(ПорядокИдентификаторовПрименения,
					                                           СтрокаТекущихЗначений.КлючИдентификатора,
					                                           СвойстваИдентификатора,
					                                           СтрокаТекущихЗначений.ДополнительныйПараметрЗначение,
					                                           СтрокаТекущихЗначений.Значение);
				Иначе
					Строка.Значение = СтрокаТекущихЗначений.Значение;
					Строка.ДополнительныйПараметрЗначение = СтрокаТекущихЗначений.ДополнительныйПараметрЗначение;
					Строка.ТипЗначения = ШтрихкодыУпаковокКлиентСервер.ТипЗначенияПараметра(
						Строка.КлючИдентификатора, Строка.ДополнительныйПараметрЗначение);
				КонецЕсли;
				
				Строка.Использование = Истина;
				Строка.Порядок = НомерПоПорядку;
				НомерПоПорядку = НомерПоПорядку + 1;
					
				ИспользуемыеИдентификаторы.Добавить(Строка.КлючИдентификатора);
				
			КонецЦикла;
			
			Для каждого СтрокаИдентификаторов Из ПорядокИдентификаторовПрименения Цикл
				Если ИспользуемыеИдентификаторы.Найти(СтрокаИдентификаторов.КлючИдентификатора) = Неопределено Тогда
					СтрокаИдентификаторов.Использование = Ложь;
					СтрокаИдентификаторов.Порядок = НомерПоПорядку;
					НомерПоПорядку = НомерПоПорядку + 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		//Удаляем не используемые идентификаторы применения
		КоличествоСтрок = ПорядокИдентификаторовПрименения.Количество();
		Если КоличествоСтрок > 0 Тогда
			Для Счетчик = 1 По КоличествоСтрок Цикл
				Если НЕ ПорядокИдентификаторовПрименения[КоличествоСтрок - Счетчик].Использование Тогда
					ПорядокИдентификаторовПрименения.Удалить(КоличествоСтрок - Счетчик);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ПорядокИдентификаторовПрименения.Сортировать("Порядок");
		ИдентификаторыПрименения.Загрузить(ПорядокИдентификаторовПрименения);
		
	ИначеЕсли ТипШтрихкодаСтрокой = "SSCC" Тогда
		
		Если ПромежуточныеРезультаты.Свойство("ШтрихкодДляКопированияНастроек") Тогда
			
			Если НастройкиЗаполнения.ЗаполнениеПоПереданномуШтрихкоду Тогда
				ПараметрыШтрихкода = ПромежуточныеРезультаты.ПараметрыШтрихкода;
			Иначе
				ПараметрыШтрихкода = ПараметрыШтрихкода(ПромежуточныеРезультаты.ШтрихкодДляКопированияНастроекТип,
				                                        ПромежуточныеРезультаты.ШтрихкодДляКопированияНастроек);
			КонецЕсли;
			
			Результат = ПараметрыШтрихкода.Результат;
			Если НЕ Результат = Неопределено Тогда
				Если НЕ ЗначениеЗаполнено(ПрефиксКомпанииGS1) Тогда
					ПрефиксКомпанииGS1     = Результат.ПрефиксКомпанииGS1;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ЦифраРасширения) Тогда
					ЦифраРасширения    = Результат.ЦифраРасширения;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипШтрихкодаСтрокой = "Code128Формат1"
		ИЛИ ТипШтрихкодаСтрокой = "Code128Формат3" Тогда
		
		Если ПромежуточныеРезультаты.Свойство("ШтрихкодДляКопированияНастроек") Тогда
			Если НастройкиЗаполнения.ЗаполнениеПоПереданномуШтрихкоду Тогда
				ПараметрыШтрихкода = ПромежуточныеРезультаты.ПараметрыШтрихкода;
			Иначе
				ПараметрыШтрихкода = ПараметрыШтрихкода(ПромежуточныеРезультаты.ШтрихкодДляКопированияНастроекТип,
				                                        ПромежуточныеРезультаты.ШтрихкодДляКопированияНастроек);
			КонецЕсли;
			
			Результат = ПараметрыШтрихкода.Результат;
			Если НЕ Результат = Неопределено Тогда
				ИдентификаторОрганизации = Результат.ИдентификаторОрганизации;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипШтрихкодаСтрокой = "Code128Формат2" Тогда
		
		Если ПромежуточныеРезультаты.Свойство("ШтрихкодДляКопированияНастроек") Тогда
			Если НастройкиЗаполнения.ЗаполнениеПоПереданномуШтрихкоду Тогда
				ПараметрыШтрихкода = ПромежуточныеРезультаты.ПараметрыШтрихкода;
			Иначе
				ПараметрыШтрихкода = ПараметрыШтрихкода(ПромежуточныеРезультаты.ШтрихкодДляКопированияНастроекТип,
				                                        ПромежуточныеРезультаты.ШтрихкодДляКопированияНастроек);
			КонецЕсли;
			
			Результат = ПараметрыШтрихкода.Результат;
			Если НЕ Результат = Неопределено Тогда
				ИдентификаторОрганизации = Результат.ИдентификаторОрганизации;
				ТипЛогистическойЕдиницы  = Результат.ТипЛогистическойЕдиницы;
				НомерПлощадкиМаркировки  = Результат.НомерПлощадкиМаркировки;
			КонецЕсли;
			Если НЕ НастройкиЗаполнения.ЗаполнениеПоПереданномуШтрихкоду Тогда
				Если ТипЛогистическойЕдиницы < 1
				 ИЛИ ТипЛогистическойЕдиницы > 4 Тогда
					Если ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка Тогда
						ТипЛогистическойЕдиницы = 1;
					Иначе
						ТипЛогистическойЕдиницы = 3;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Если ТипЛогистическойЕдиницы < 1
			 ИЛИ ТипЛогистическойЕдиницы > 4 Тогда
				Если ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка Тогда
					ТипЛогистическойЕдиницы = 1;
				Иначе
					ТипЛогистическойЕдиницы = 3;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НоваяСтрокаТаблицыИдентификаторов(ТаблицыИдентификаторов,
                                          КлючИдентификатора,
                                          СвойстваИдентификатора,
                                          ДополнительныйПараметрЗначение = 0,
                                          Значение = Неопределено)
	
	НоваяСтрока = ТаблицыИдентификаторов.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СвойстваИдентификатора);
	НоваяСтрока.КлючИдентификатора = КлючИдентификатора;
	НоваяСтрока.ДополнительныйПараметрЗначение = ДополнительныйПараметрЗначение;
	НоваяСтрока.ТипЗначения = ШтрихкодыУпаковокКлиентСервер.ТипЗначенияПараметра(НоваяСтрока.КлючИдентификатора, НоваяСтрока.ДополнительныйПараметрЗначение);
	НоваяСтрока.Значение = Значение;
	
	Возврат НоваяСтрока;
КонецФункции

&НаСервере
Функция ПорядокИдентификаторовПрименения(НастройкиЗаполнения, ПромежуточныеРезультаты)
	
	ТипКолонкиСтрока = Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(100,ДопустимаяДлина.Переменная));
	ТипКолонкиЧисло  = Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(1,0,ДопустимыйЗнак.Неотрицательный));
	
	ПорядокИдентификаторов = Новый ТаблицаЗначений;
	ПорядокИдентификаторов.Колонки.Добавить("Порядок", Новый ОписаниеТипов("Число",,,Новый КвалификаторыЧисла(2,0,ДопустимыйЗнак.Неотрицательный)));
	ПорядокИдентификаторов.Колонки.Добавить("Использование", Новый ОписаниеТипов("Булево"));
	ПорядокИдентификаторов.Колонки.Добавить("ИмяИдентификатора", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(200, ДопустимаяДлина.Переменная)));
	ПорядокИдентификаторов.Колонки.Добавить("ПредставлениеИдентификатора", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(250, ДопустимаяДлина.Переменная)));
	ПорядокИдентификаторов.Колонки.Добавить("КлючИдентификатора", Новый ОписаниеТипов("Строка",,,,Новый КвалификаторыСтроки(4, ДопустимаяДлина.Переменная)));
	ПорядокИдентификаторов.Колонки.Добавить("ТипЗначения");  // Описание доступного типа значения для идентификатора, может меняться в зависимости от дополнительного параметра, например, точность указания веса.
	ПорядокИдентификаторов.Колонки.Добавить("ДополнительныйПараметрИмя", ТипКолонкиСтрока);
	ПорядокИдентификаторов.Колонки.Добавить("ДополнительныйПараметрПредставление", ТипКолонкиСтрока);
	ПорядокИдентификаторов.Колонки.Добавить("ДополнительныйПараметрЗначение", ТипКолонкиЧисло);
	ПорядокИдентификаторов.Колонки.Добавить("ДополнительныйПараметрМинимальноеЗначение", ТипКолонкиЧисло);
	ПорядокИдентификаторов.Колонки.Добавить("ДополнительныйПараметрМаксимальноеЗначение", ТипКолонкиЧисло);
	ПорядокИдентификаторов.Колонки.Добавить("Значение");
	
	
	// Порядок по умолчанию
	СвойстваИдентификаторов = ШтрихкодыУпаковокКлиентСерверПовтИсп.СвойстваКлючейИдентификаторовПрименения();
	Для каждого КлючИЗначение Из СвойстваИдентификаторов Цикл
		
		КлючИдентификатора = КлючИЗначение.Ключ;
		СвойстваИдентификатора = КлючИЗначение.Значение;
		
		ПорядокПоУмолчанию = Неопределено;
		ДополнительныйПараметрЗначениеПоУмолчанию = 0;
		Если СвойстваИдентификатора.ИмяИдентификатора = ВРЕГ("GTIN02") Тогда
			ПорядокПоУмолчанию = 1;
		ИначеЕсли СвойстваИдентификатора.ИмяИдентификатора = ВРЕГ("ДатаИстеченияСрокаГодности") Тогда
			ПорядокПоУмолчанию = 2;
		ИначеЕсли СвойстваИдентификатора.ИмяИдентификатора = ВРЕГ("МассаБруттоВКг") Тогда
			ПорядокПоУмолчанию = 3;
			ДополнительныйПараметрЗначениеПоУмолчанию = 2;
		ИначеЕсли СвойстваИдентификатора.ИмяИдентификатора = ВРЕГ("НомерПартии") Тогда
			ПорядокПоУмолчанию = 4;
		ИначеЕсли СвойстваИдентификатора.ИмяИдентификатора = ВРЕГ("СерийныйНомер") Тогда
			ПорядокПоУмолчанию = 5;
		ИначеЕсли СвойстваИдентификатора.ИмяИдентификатора = ВРЕГ("КоличествоВложенныхЕдиниц") Тогда
			ПорядокПоУмолчанию = 6;
		КонецЕсли;
		
		Если НЕ ПорядокПоУмолчанию = Неопределено Тогда
			НоваяСтрока = НоваяСтрокаТаблицыИдентификаторов(ПорядокИдентификаторов,
			                                                КлючИдентификатора,
			                                                СвойстваИдентификатора,
			                                                ДополнительныйПараметрЗначениеПоУмолчанию);
			НоваяСтрока.Использование = Истина;
			НоваяСтрока.Порядок = ПорядокПоУмолчанию;
		КонецЕсли;
		
		Если НастройкиЗаполнения.УстановливатьКоличествоВложенныхЕдиниц
		   И СвойстваИдентификатора.ИмяИдентификатора = ВРЕГ("КоличествоВложенныхЕдиниц") Тогда
			НоваяСтрока.Значение = НастройкиЗаполнения.КоличествоВложенныхЕдиницДляУстановки;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПромежуточныеРезультаты.Свойство("ШтрихкодДляКопированияНастроек")
	   И НЕ НастройкиЗаполнения.СохранятьТекущиеНастройкиИдентификаторовПрименения Тогда
		
		ШтрихкодДляКопированияНастроек = ПромежуточныеРезультаты.ШтрихкодДляКопированияНастроек;
		Если НЕ НастройкиЗаполнения.СохранятьТекущиеНастройкиИдентификаторовПрименения Тогда
			Если НастройкиЗаполнения.ЗаполнениеПоПереданномуШтрихкоду Тогда
				ПараметрыШтрихкода = ПромежуточныеРезультаты.ПараметрыШтрихкода;
			Иначе
				ПараметрыШтрихкода = ПараметрыШтрихкода(ПромежуточныеРезультаты.ШтрихкодДляКопированияНастроекТип,
				                                        ШтрихкодДляКопированияНастроек);
			КонецЕсли;
			
			// Корректируем параметры идентификаторов по прочитанным
			НомерПоПорядку = 1;
			ИзмененныеИдентификаторы = Новый Массив;
			Результат = ПараметрыШтрихкода.Результат;
			Если НЕ Результат = Неопределено Тогда
				Для каждого СвойстваПараметраПрименения Из Результат Цикл
					КлючИдентификатора = СвойстваПараметраПрименения.КлючИдентификатора;
					СтрокаИдентификаторов = ПорядокИдентификаторов.Найти(СвойстваПараметраПрименения.КлючИдентификатора, "КлючИдентификатора");
					Если СтрокаИдентификаторов = Неопределено Тогда
						СвойстваИдентификатора = СвойстваИдентификаторов.Получить(КлючИдентификатора);
						СтрокаИдентификаторов = НоваяСтрокаТаблицыИдентификаторов(ПорядокИдентификаторов,
						                                                          СвойстваПараметраПрименения.КлючИдентификатора,
						                                                          СвойстваИдентификатора,
						                                                          СвойстваПараметраПрименения.ДополнительныйПараметр);
					КонецЕсли;
					Если СвойстваПараметраПрименения.ИмяИдентификатора = ВРЕГ("НомерПартии")
					 ИЛИ НастройкиЗаполнения.ЗаполнениеПоПереданномуШтрихкоду Тогда
						СтрокаИдентификаторов.Значение = СвойстваПараметраПрименения.Значение;
					КонецЕсли;
					Если НастройкиЗаполнения.УстановливатьКоличествоВложенныхЕдиниц
					   И СтрокаИдентификаторов.ИмяИдентификатора = ВРЕГ("КоличествоВложенныхЕдиниц") Тогда
						СтрокаИдентификаторов.Значение = НастройкиЗаполнения.КоличествоВложенныхЕдиницДляУстановки;
					КонецЕсли;
					СтрокаИдентификаторов.Использование = Истина;
					СтрокаИдентификаторов.Порядок = НомерПоПорядку;
					
					ИзмененныеИдентификаторы.Добавить(СвойстваПараметраПрименения.КлючИдентификатора);
					НомерПоПорядку = НомерПоПорядку + 1;
				КонецЦикла;
				Для каждого Строка Из ПорядокИдентификаторов Цикл
					Если ИзмененныеИдентификаторы.Найти(Строка.КлючИдентификатора) = Неопределено Тогда
						Строка.Использование = Ложь;
						Строка.Порядок = НомерПоПорядку;
						НомерПоПорядку = НомерПоПорядку + 1;
						Если НастройкиЗаполнения.УстановливатьКоличествоВложенныхЕдиниц
						   И Строка.ИмяИдентификатора = ВРЕГ("КоличествоВложенныхЕдиниц") Тогда
							Строка.Значение = НастройкиЗаполнения.КоличествоВложенныхЕдиницДляУстановки;
							Строка.Использование = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПорядокИдентификаторов;
	
КонецФункции

&НаСервере
Процедура ЗаполненитьИдентификаторыОрганизации()
	
	ИдентификаторыОрганизаций = ПолучитьИдентификаторыОрганизации(ТипШтрихкодаСтрокой);
	
	Элементы.ГруппаРеквизитыCode128Формат1ИдентификаторОрганизации.СписокВыбора.Очистить();
	Элементы.ГруппаРеквизитыCode128Формат2ИдентификаторОрганизации.СписокВыбора.Очистить();
	Элементы.ГруппаРеквизитыCode128Формат3ИдентификаторОрганизации.СписокВыбора.Очистить();
	Для Каждого ЭлементСписка Из ИдентификаторыОрганизаций Цикл
		Элементы.ГруппаРеквизитыCode128Формат1ИдентификаторОрганизации.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		Элементы.ГруппаРеквизитыCode128Формат2ИдентификаторОрганизации.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		Элементы.ГруппаРеквизитыCode128Формат3ИдентификаторОрганизации.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПартийПоУмолчаниюДляИдентификаторовПрименения()
	
	ИдентификаторыОрганизаций = ПолучитьИдентификаторыОрганизации(ТипШтрихкодаСтрокой, ТекущаяДата);
	
	СтрокиИдентификаторов = ИдентификаторыПрименения.НайтиСтроки(Новый Структура("ИмяИдентификатора", ВРЕГ("НомерПартии")));
	Для Каждого СтрокаИдентификатора Из СтрокиИдентификаторов Цикл
		СтрокаИдентификатора.СписокПредлагаемыхЗначений.Очистить();
		Для Каждого ЭлементСписка Из ИдентификаторыОрганизаций Цикл
			СтрокаИдентификатора.СписокПредлагаемыхЗначений.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ШтрихкодыНоменклатуры(Отбор)
	Штрихкоды = ШтрихкодированиеЕГАИС.ПолучитьШтрихкодыНоменклатуры(Отбор);
	
	ДопустимыеШтрихкоды = Новый Массив;
	
	Для Каждого Штрихкод Из Штрихкоды Цикл
		Если СтрДлина(Штрихкод) <= 14 Тогда
			ДопустимыеШтрихкоды.Добавить(ПриведенноеКДлинеЗначение(Штрихкод, 14));
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДопустимыеШтрихкоды;
КонецФункции

&НаСервере
Процедура ЗаполнитьGTINНоменклатуры(ОбновлятьШтрихкодПриИзмененииGTIN = Истина)
	
	Если ТипШтрихкодаСтрокой = "GS1DataBarExpandedStacked"
	 ИЛИ ТипШтрихкодаСтрокой = "GS1128" Тогда
	
		Отбор = Новый Структура;
		Отбор.Вставить("Номенклатура", Номенклатура);
		Отбор.Вставить("Характеристика", Характеристика);
		
		ТипыУпаковки = Метаданные.Справочники.ШтрихкодыУпаковокТоваров.Реквизиты.Упаковка.Тип;
		Отбор.Вставить("Упаковка", ТипыУпаковки.ПривестиЗначение(Неопределено));
		
		Штрихкоды = ШтрихкодыНоменклатуры(Отбор);
		
		Идентификаторы = Новый Массив;
		Идентификаторы.Добавить(ВРЕГ("GTIN01"));
		Идентификаторы.Добавить(ВРЕГ("GTIN02"));
		
		ОбновитьШтрихкод = Ложь;
		Для каждого ИмяИдентификатора Из Идентификаторы Цикл
			НайденныеСтроки = ИдентификаторыПрименения.НайтиСтроки(Новый Структура("ИмяИдентификатора", ИмяИдентификатора));
			Для каждого СтрокаПоказателей Из НайденныеСтроки Цикл
				СтрокаПоказателей.СписокПредлагаемыхЗначений.Очистить();
				Для каждого ПредлагаемыйШтрихкод Из Штрихкоды Цикл
					СтрокаПоказателей.СписокПредлагаемыхЗначений.Добавить(ПредлагаемыйШтрихкод);
				КонецЦикла;
				Если Штрихкоды.Количество() = 1 Тогда
					СтрокаПоказателей.Значение = Штрихкоды[0];
					ОбновитьШтрихкод = Истина;
				ИначеЕсли ЗначениеЗаполнено(СтрокаПоказателей.Значение)
				        И Штрихкоды.Найти(СтрокаПоказателей.Значение) = Неопределено Тогда
					СтрокаПоказателей.Значение = "";
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		Если ОбновитьШтрихкод И ОбновлятьШтрихкодПриИзмененииGTIN Тогда
			НастройкиЗаполнения = ШаблонНастроекЗаполнения(ЭтотОбъект);
			НастройкиЗаполнения.ГенерацияШтрихкода = Истина;
			ЗаполнениеПоНастройкамЗаполнения(НастройкиЗаполнения);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИдентификаторыОрганизации(ТипШтрихкодаСтрокой, Знач ВключаяДату = Неопределено)
	
	ТолькоКодФСРАР = (ТипШтрихкодаСтрокой = "Code128Формат2" ИЛИ ТипШтрихкодаСтрокой = "Code128Формат3");
	Если ТолькоКодФСРАР Тогда
		ВключаяДату = Неопределено;
	КонецЕсли;
	
	СписокИдентификаторовОрганизации = Новый СписокЗначений;
	ИнтеграцияЕГАИСПереопределяемый.ИдентификаторыОрганизации(СписокИдентификаторовОрганизации, ВключаяДату, ТолькоКодФСРАР);
	Возврат СписокИдентификаторовОрганизации;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПараметрыШтрихкода(ТипШтрихкодаСтрокой, Штрихкод)
	
	Если ТипШтрихкодаСтрокой = "SSCC" Тогда
		
		ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкодаSSCC(Штрихкод);
		
	ИначеЕсли ТипШтрихкодаСтрокой = "GS1128"
		ИЛИ ТипШтрихкодаСтрокой = "GS1DataBarExpandedStacked" Тогда
		
		ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкодаGS1СоСкобками(Штрихкод);
		
	ИначеЕсли ТипШтрихкодаСтрокой = "Code128Формат1"
		ИЛИ ТипШтрихкодаСтрокой = "Code128Формат2"
		ИЛИ ТипШтрихкодаСтрокой = "Code128Формат3" Тогда
		
		ПараметрыШтрихкода = ШтрихкодыУпаковокКлиентСервер.ПараметрыШтрихкодаCode128(Штрихкод);
		
	КонецЕсли;
	
	Если ПараметрыШтрихкода.Свойство("ИдентификаторыПрименения") Тогда
		ИдентификаторыПрименения = Новый ФиксированныйМассив(ПараметрыШтрихкода.ИдентификаторыПрименения);
		ПараметрыШтрихкода.Вставить("ИдентификаторыПрименения", ИдентификаторыПрименения);
	КонецЕсли;
	
	Возврат ПараметрыШтрихкода;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ШаблонНастроекЗаполнения(Форма)
	
	Шаблон = Новый Структура;
	Шаблон.Вставить("ЗаполнениеИдентификаторовОрганизации", Ложь);
	Шаблон.Вставить("ЧтениеПредыдущихНастроекШтрихкода", Ложь);
	Шаблон.Вставить("ЗаполнениеПоПереданномуШтрихкоду", Ложь);
	Шаблон.Вставить("УвеличиватьЗначениеПриЗаполненииПоШтрихкоду", Ложь);
	Шаблон.Вставить("УстановливатьКоличествоВложенныхЕдиниц", Ложь);
	Шаблон.Вставить("КоличествоВложенныхЕдиницДляУстановки", 0);
	Шаблон.Вставить("СохранятьТекущиеНастройкиИдентификаторовПрименения", Форма.ИдентификаторыПрименения.Количество()<>0);
	Шаблон.Вставить("ЗаполнениеGTINНоменклатуры", Ложь);
	Шаблон.Вставить("ЧтениеПоследнихУникальныхЗначений", Ложь);
	Шаблон.Вставить("ТипШтрихкодаЗаданИнициализацией", Ложь);
	
	Шаблон.Вставить("ГенерацияШтрихкода", Ложь);
	
	
	
	Возврат Шаблон;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПриведенноеКДлинеЗначение(Знач ИсходнаяСтрока, Длина)
	Если ТипЗнч(ИсходнаяСтрока) = Тип("Число") Тогда
		Строка = Формат(ИсходнаяСтрока, "ЧН=0; ЧГ=0");
	Иначе
		Строка = СокрЛП(ИсходнаяСтрока);
	КонецЕсли;
	ТекущаяДлина = СтрДлина(Строка);
	Пока ТекущаяДлина < Длина Цикл
		Строка = "0" + Строка;
		ТекущаяДлина = ТекущаяДлина + 1;
	КонецЦикла;
	
	Возврат Строка;
КонецФункции

&НаСервере
Процедура ОбработатьПодборИдентификаторовПримененияGS1(ИзмененияИдентификаторов)
	
	НастройкиЗаполнения = ШаблонНастроекЗаполнения(ЭтотОбъект);
	НастройкиЗаполнения.ЗаполнениеИдентификаторовОрганизации = Истина;
	НастройкиЗаполнения.ЧтениеПоследнихУникальныхЗначений = Истина;
	
	НастройкиЗаполнения.ГенерацияШтрихкода = Истина;
	
	ПодобранныеИдентификаторы = ИзмененияИдентификаторов.ДобавленныеСтроки;
	УдаляемыеИдентификаторы   = ИзмененияИдентификаторов.УдаленныеСтроки;
	
	СвойстваИдентификаторов = ШтрихкодыУпаковокКлиентСерверПовтИсп.СвойстваКлючейИдентификаторовПрименения();
	
	Для каждого КлючИдентификатора Из ПодобранныеИдентификаторы Цикл
		
		СвойстваИдентификатора = СвойстваИдентификаторов.Получить(КлючИдентификатора);
		
		НоваяСтрока = ИдентификаторыПрименения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СвойстваИдентификатора);
		НоваяСтрока.КлючИдентификатора = КлючИдентификатора;
		НоваяСтрока.ДополнительныйПараметрЗначение = СвойстваИдентификатора.ДополнительныйПараметрЗначениеПоУмолчанию;
		НоваяСтрока.ТипЗначения = ШтрихкодыУпаковокКлиентСервер.ТипЗначенияПараметра(КлючИдентификатора,
		                                                                             НоваяСтрока.ДополнительныйПараметрЗначение);
		НоваяСтрока.Значение = НоваяСтрока.ТипЗначения.ПривестиЗначение(Неопределено);
		
		Если НоваяСтрока.ИмяИдентификатора = ВРЕГ("GTIN01")
		 ИЛИ НоваяСтрока.ИмяИдентификатора = ВРЕГ("GTIN02") Тогда
			НастройкиЗаполнения.ЗаполнениеGTINНоменклатуры = ЗначениеЗаполнено(Номенклатура);
		КонецЕсли;
		Если НоваяСтрока.ИмяИдентификатора = ВРЕГ("НомерПартии")
		 ИЛИ НоваяСтрока.ИмяИдентификатора = ВРЕГ("СерийныйНомер") Тогда
			НастройкиЗаполнения.ЧтениеПоследнихУникальныхЗначений = Истина;
		КонецЕсли;
		Если НоваяСтрока.ИмяИдентификатора = ВРег("НомерПартии") Тогда
			НастройкиЗаполнения.ЗаполнениеИдентификаторовОрганизации = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для каждого КлючИдентификатора Из УдаляемыеИдентификаторы Цикл
		НайденныеСтроки = ИдентификаторыПрименения.НайтиСтроки(Новый Структура("КлючИдентификатора", КлючИдентификатора));
		Для каждого Строка Из НайденныеСтроки Цикл
			ИдентификаторыПрименения.Удалить(Строка);
		КонецЦикла;
	КонецЦикла;
	
	ЗаполнениеПоНастройкамЗаполнения(НастройкиЗаполнения);
	
КонецПроцедуры

&НаСервере
Функция РанееВыбранныеИдентификаторыGS1()
	Массив = Новый Массив;
	Для каждого Строка Из ИдентификаторыПрименения Цикл
		Массив.Добавить(Строка.КлючИдентификатора);
	КонецЦикла;
	
	Возврат Массив;
КонецФункции

&НаКлиенте
Функция ПроверкаКлиент()
	Отказ = Ложь;
	
	ОчиститьСообщения();
	
	Если НЕ ЗначениеЗаполнено(ТипУпаковки) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Тип упаковки""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ТипУпаковки",,Отказ);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТипШтрихкодаСтрокой) Тогда
		ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Тип штрихкода""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ТипШтрихкодаСтрокой",,Отказ);
	КонецЕсли;
	Если ТипШтрихкодаСтрокой = "SSCC" Тогда
		Если НЕ ЗначениеЗаполнено(ПрефиксКомпанииGS1) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Префикс компании GS1""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ПрефиксКомпанииGS1",,Отказ);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СерийныйНомерSSCC) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Серийный номер""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"СерийныйНомерSSCC",,Отказ);
		КонецЕсли;
	ИначеЕсли ТипШтрихкодаСтрокой = "Code128Формат1" Тогда
		Если НЕ ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Идентификатор организации""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ИдентификаторОрганизации",,Отказ);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДатаМаркировки) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Дата маркировки""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ДатаМаркировки",,Отказ);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НомерПоПорядку) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Номер по порядку""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"НомерПоПорядку",,Отказ);
		КонецЕсли;
	ИначеЕсли ТипШтрихкодаСтрокой = "Code128Формат1" Тогда
		Если НЕ ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Идентификатор организации""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ИдентификаторОрганизации",,Отказ);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТипЛогистическойЕдиницы) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Тип логистической единицы""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ТипЛогистическойЕдиницы",,Отказ);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ГодГенерацииШтрихкода) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Год генерации штрихкода""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ГодГенерацииШтрихкода",,Отказ);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НомерПоПорядку) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Номер упаковки в пределах года""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"НомерПоПорядку",,Отказ);
		КонецЕсли;
	ИначеЕсли ТипШтрихкодаСтрокой = "Code128Формат3" Тогда
		Если НЕ ЗначениеЗаполнено(ИдентификаторОрганизации) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Идентификатор организации""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ИдентификаторОрганизации",,Отказ);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НомерПоПорядку) Тогда
			ТекстСообщения = НСтр("ru = 'Не заполнено поле ""Порядковый номер""'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"НомерПоПорядку",,Отказ);
		КонецЕсли;
	ИначеЕсли ТипШтрихкодаСтрокой = "GS1DataBarExpandedStacked"
	      ИЛИ ТипШтрихкодаСтрокой = "GS1128" Тогда
		Если ИдентификаторыПрименения.Количество() = 0 Тогда
			ТекстСообщения = НСтр("ru = 'Не выбрано ни одного идентификатора применения'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"ИдентификаторыПрименения",,Отказ);
		Иначе
			ШаблонИмениПоля = "ИдентификаторыПрименения[%1].Значение";
			Индекс = 0;
			Для каждого Строка Из ИдентификаторыПрименения Цикл
				Если НЕ ЗначениеЗаполнено(Строка.Значение) Тогда
					ТекстСообщения = НСтр("ru = 'Не заполнено значение для идентификатора применения ""%1""'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, Строка.ПредставлениеИдентификатора);
					Поле = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонИмениПоля, Формат(Индекс, "ЧН=0; ЧГ=0"));
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле,,Отказ);
				КонецЕсли;
				Индекс = Индекс + 1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат НЕ Отказ;
КонецФункции

&НаКлиенте
Процедура СообщитьОбОшибке(РезультатВыполнения)
	
	ТекстСообщения = НСтр("ru = 'При выполнении операции произошла ошибка:""%ОписаниеОшибки%"".'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", РезультатВыполнения.ОписаниеОшибки);
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	
КонецПроцедуры

#КонецОбласти 





