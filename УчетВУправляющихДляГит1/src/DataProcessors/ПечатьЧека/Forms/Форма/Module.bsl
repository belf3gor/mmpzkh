
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Параметры.Ссылка = Неопределено Тогда
		ВызватьИсключение НСтр("ru='Непосредственное открытие этой формы не предусмотрено.'");
	КонецЕсли;
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ВалютаДокумента", Параметры.Ссылка.Метаданные()) 
		И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ссылка, "ВалютаДокумента") <> ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета() Тогда
		
		ВызватьИсключение НСтр("ru='Печать чека при расчетах в иностранной валюте не поддерживается.'");
	КонецЕсли;
	
	Объект.СуммаВключаетНДС = Истина;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры, "ИдентификаторУстройства");
	
	ПараметрыУстройства = Справочники.ПодключаемоеОборудование.ПолучитьПараметрыУстройства(Параметры.ИдентификаторУстройства);
	НомерСекции         = ?(ПараметрыУстройства.Свойство("НомерСекции"), ПараметрыУстройства.НомерСекции, 0);
	
	МассивЧеков = ПечатьФискальныхДокументов.СобратьДанныеЧеков(
		Параметры.Ссылка, 
		НомерСекции, 
		Параметры.ВерсияФормата, 
		Параметры.АдресУстановкиККТ,
		Параметры.ПараметрыОбработчика);
		
	ПараметрыОперацииФискализацииЧека = МассивЧеков[0];
	
	Если ЗначениеЗаполнено(ПараметрыОперацииФискализацииЧека.Организация) Тогда
		РеквизитыОрганизации = 
			БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(
				ПараметрыОперацииФискализацииЧека.Организация, 
				ПараметрыОперацииФискализацииЧека.ДатаВремя);
				
		ОрганизацияСтрокой = РеквизитыОрганизации.Представление;
	КонецЕсли; 
	
	ФорматноЛогическийКонтрольКлиентСервер.ПровестиФорматноЛогическийКонтроль(ПараметрыОперацииФискализацииЧека, ИдентификаторУстройства);
	
	АдресХранилищаИсходныеПараметры = ПоместитьВоВременноеХранилище(ПараметрыОперацииФискализацииЧека, УникальныйИдентификатор);

	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПараметрыОперацииФискализацииЧека, "СистемаНалогообложения, ПризнакАгента, ДанныеАгента, ДанныеПоставщика, Кассир, КассирИНН");
	
	ПризнакАгентаСтрокой = Обработки.ПечатьЧека.ПризнакАгентаПоПредметуРасчетаСтрокой(ПризнакАгента);
	
	КассирПредставление = ПредставлениеКассира(Кассир, КассирИНН);
	
	СтранаПроисхожденияПоКоду = Новый Соответствие;
	
	Для каждого ПозицияЧека Из ПараметрыОперацииФискализацииЧека.ПозицииЧека Цикл
		НоваяСтрока = Объект.ТаблицаТоваров.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПозицияЧека,,"СтавкаНДС");
		
		НоваяСтрока.ПризнакАгентаСтрокой = 
			Обработки.ПечатьЧека.ПризнакАгентаПоПредметуРасчетаСтрокой(НоваяСтрока.ПризнакАгентаПоПредметуРасчета);
			
		Если ЗначениеЗаполнено(ПозицияЧека.КодСтраныПроисхожденияТовара) Тогда
			ЗначениеНайдено = (СтранаПроисхожденияПоКоду[ПозицияЧека.КодСтраныПроисхожденияТовара] <> Неопределено);
			
			Если НЕ ЗначениеНайдено Тогда
				ДанныеСтраныПроисхождения = УправлениеКонтактнойИнформацией.ДанныеСтраныМира(ПозицияЧека.КодСтраныПроисхожденияТовара);
				Если ЗначениеЗаполнено(ДанныеСтраныПроисхождения.Ссылка) Тогда
					СтранаПроисхожденияПоКоду.Вставить(ПозицияЧека.КодСтраныПроисхожденияТовара, ДанныеСтраныПроисхождения.Ссылка);
					ЗначениеНайдено = Истина;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеНайдено Тогда
				НоваяСтрока.СтранаПроисхождения = СтранаПроисхожденияПоКоду[ПозицияЧека.КодСтраныПроисхожденияТовара];
			КонецЕсли;
		КонецЕсли;
		
		Если ПозицияЧека.СтавкаНДС = 0 Тогда 
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС0;
		ИначеЕсли ПозицияЧека.СтавкаНДС = 10 Тогда 
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС10;
		ИначеЕсли ПозицияЧека.СтавкаНДС = 18 Тогда 
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
		ИначеЕсли ПозицияЧека.СтавкаНДС = 20 Тогда 
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС20;
		ИначеЕсли ПозицияЧека.СтавкаНДС = 110 Тогда 
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110;
		ИначеЕсли ПозицияЧека.СтавкаНДС = 118 Тогда 
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118;
		ИначеЕсли ПозицияЧека.СтавкаНДС = 120 Тогда 
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120;
		Иначе
			НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
		КонецЕсли;
		
	КонецЦикла;
			
	Для каждого СтрокаОплаты Из ПараметрыОперацииФискализацииЧека.ТаблицаОплат Цикл
		Если СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные Тогда
			Наличные = СтрокаОплаты.Сумма;
		ИначеЕсли СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно Тогда 
			Электронно = СтрокаОплаты.Сумма;
		ИначеЕсли СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.ВстречноеПредоставление Тогда 
			ВстречноеПредоставление = СтрокаОплаты.Сумма;
		ИначеЕсли СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Предоплата Тогда 
			Предоплата = СтрокаОплаты.Сумма;
		ИначеЕсли СтрокаОплаты.ТипОплаты = Перечисления.ТипыОплатыККТ.Постоплата Тогда 
			Кредит = СтрокаОплаты.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	// Настройка отправки чеков
	НастройкиОтправкиЧеков = РегистрыСведений.ОборудованиеПоОрганизациям.Получить(Новый Структура("Оборудование", ИдентификаторУстройства));
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, НастройкиОтправкиЧеков, "Отправляет1СSMS, Отправляет1СEmail");
	
	// Восстанавливаем сохраненные настройки
	ИдентификаторНастроек = СтрШаблон("НастройкиОтправкиСообщений_%1", Параметры.Ссылка.Метаданные().Имя);
	
	НастройкиОтправкиСообщений = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить("ПечатьЧека", ИдентификаторНастроек);
	Если НастройкиОтправкиСообщений <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Объект, НастройкиОтправкиСообщений, "ОтправлятьEmail, ОтправлятьSMS, ПечататьЧек");
	КонецЕсли;
	
	Объект.АдресЭлектроннойПочты = ПараметрыОперацииФискализацииЧека.ПокупательEmail;
	Объект.НомерТелефона         = ПараметрыОперацииФискализацииЧека.ПокупательНомер;
	
	Если НЕ Объект.ОтправлятьEmail Тогда
		ПараметрыОперацииФискализацииЧека.ПокупательEmail = "";
	КонецЕсли; 
	
	Если НЕ Объект.ОтправлятьSMS Тогда
		ПараметрыОперацииФискализацииЧека.ПокупательНомер = "";
	КонецЕсли; 
	
	Объект.ОтправлятьEmail = Объект.ОтправлятьEmail И ЗначениеЗаполнено(Объект.АдресЭлектроннойПочты);
	Объект.ОтправлятьSMS   = Объект.ОтправлятьEmail И ЗначениеЗаполнено(Объект.НомерТелефона);
	Объект.ПечататьЧек     = Объект.ПечататьЧек ИЛИ (НЕ Объект.ОтправлятьEmail И НЕ Объект.ОтправлятьSMS);
	
	Если ПравоДоступа("Чтение", Метаданные.Справочники.ПодключаемоеОборудование) Тогда
		ИспользуютсяСканерыШтрихкода = (МенеджерОборудованияВызовСервера.ОборудованиеПоПараметрам("СканерШтрихкода").Количество() > 0);
	Иначе
		ИспользуютсяСканерыШтрихкода = Ложь;
	КонецЕсли;
	
	ВсегоПоЧеку = Объект.ТаблицаТоваров.Итог("Сумма");
	
	ЭтоВерсияФФД11  = НЕ ОбщегоНазначенияКлиентСервер.СравнитьВерсии("1.1.0.0", Параметры.ВерсияФормата) > 0;
	ЭтоВерсияФФД105 = НЕ ОбщегоНазначенияКлиентСервер.СравнитьВерсии("1.0.5.0", Параметры.ВерсияФормата) > 0;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, 
		ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИдентификаторУстройства, "ВыводитьПризнакПредметаРасчета, ВыводитьПризнакСпособаРасчета"));
	
	ВыводитьПризнакПредметаРасчета = ЭтоВерсияФФД105 ИЛИ ВыводитьПризнакПредметаРасчета;
	ВыводитьПризнакСпособаРасчета  = ЭтоВерсияФФД105 ИЛИ ВыводитьПризнакСпособаРасчета;
	
	Элементы.Наличные.Видимость = (Наличные > 0);
	Элементы.ВстречноеПредоставление.Видимость = (ВстречноеПредоставление > 0);
	Элементы.Электронно.Видимость = (Электронно > 0);
	
	Элементы.Предоплата.Видимость = ЭтоВерсияФФД105;
	Элементы.Кредит.Видимость     = ЭтоВерсияФФД105;
	
	УстановитьУсловноеОформлениеВидимость();
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтотОбъект,
		"БП.Обработка.ПечатьЧека",
		"Форма",
		НСтр("ru = 'Новости: Печать кассового чека'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	
	УправлениеФормой(ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ПараметрыОперацииФискализацииЧека.ТаблицаОплат.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Печать чека при отгрузке без оплаты возможна только для форматов фискальных данных 1.05 и выше.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ИспользуютсяСканерыШтрихкода Тогда
		// Попробуем подключить сканер штрихкода
		ОповещенияПриПодключении = Новый ОписаниеОповещения("ПодключитьСканерШКЗавершение", ЭтотОбъект); 
		МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПоТипу(ОповещенияПриПодключении, УникальныйИдентификатор, "СканерШтрихкода");
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
	// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	
	ОбновитьПредставлениеЧека();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Если ИмяСобытия = "ScanData" Тогда
			Если Параметр[1] = Неопределено Тогда
				ТекущийКод = Параметр[0];
			Иначе
				ТекущийКод = Параметр[1][1];
			КонецЕсли;
			
			ДанныеОбъекта = Новый Структура("АдресЭлектроннойПочты, ОтправлятьEmail, НомерТелефона, ОтправлятьSMS");
			ЗаполнитьЗначенияСвойств(ДанныеОбъекта, Объект);
			ПечатьФискальныхДокументовКлиент.ЗаполнитьКонтактнуюИнформациюПоШтрихкоду(ДанныеОбъекта, ТекущийКод);
			ЗаполнитьЗначенияСвойств(Объект, ДанныеОбъекта);
			
			УправлениеФормой(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если НЕ ЗавершениеРаботы И Модифицированность Тогда
		Отказ = Истина;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриЗакрытииЗавершение", ЭтотОбъект);
		
		ТекстПредупреждения = НСтр("ru = 'Вы уверены, что хотите выйти без печати чека?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстПредупреждения, РежимДиалогаВопрос.ДаНет, 60);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	// ПодключаемоеОборудование
	Если СканерШтрихкодаПодключен И НЕ ЗавершениеРаботы Тогда
		ТипыПО = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("СканерШтрихкода");
		ОповещенияПриОтключении = Новый ОписаниеОповещения("ОтключитьСканерШКЗавершение", ЭтотОбъект); 
		МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПоТипу(ОповещенияПриОтключении, УникальныйИдентификатор, ТипыПО);
	КонецЕсли;
	//Конец  ПодключаемоеОборудование
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("РегистрСведенийКлючЗаписи.ФискальныеОперации") Тогда
		УстановитьДокументНаСервере(ВыбранноеЗначение);
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СистемаНалогообложенияПриИзменении(Элемент)
	ЗаполнитьЗначенияСвойств(ПараметрыОперацииФискализацииЧека, ЭтотОбъект, "СистемаНалогообложения");
	
	ОбновитьПредставлениеЧека();
КонецПроцедуры

&НаКлиенте
Процедура КассирНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РедактированиеРеквизитовКассира();
КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаПриИзменении(Элемент)
	ЗаполнитьТаблицуОплат();
	
	ОбновитьПредставлениеЧека();
КонецПроцедуры

&НаКлиенте
Процедура ОтправлятьEmailПриИзменении(Элемент)
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОтправлятьSMSПриИзменении(Элемент)
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура АдресЭлектроннойПочтыПриИзменении(Элемент)
	Объект.ОтправлятьEmail = ЗначениеЗаполнено(Объект.АдресЭлектроннойПочты);
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НомерТелефонаПриИзменении(Элемент)
	Объект.ОтправлятьSMS = ЗначениеЗаполнено(Объект.НомерТелефона);
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КорректируемыйДокументНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("Отбор", Новый Структура("ТипРасчета", ПараметрыОперацииФискализацииЧека.ТипРасчета));
	ОткрытьФорму("РегистрСведений.ФискальныеОперации.Форма.ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура КоррекцияПоПредписаниюПриИзменении(Элемент)
	Элементы.НомерПредписания.Доступность = Объект.КоррекцияПоПредписанию;
КонецПроцедуры

&НаКлиенте
Процедура ЧекКоррекцииПриИзменении(Элемент)
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура ДобавитьСтрокуОплаты(ТипОплаты, СуммаОплаты)
	Если СуммаОплаты = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОплаты = МенеджерОборудованияКлиентСервер.ПараметрыСтрокиОплаты();
	
	СтрокаОплаты.ТипОплаты = ПредопределенноеЗначение("Перечисление.ТипыОплатыККТ."+ТипОплаты);
	СтрокаОплаты.Сумма     = СуммаОплаты;
	
	ПараметрыОперацииФискализацииЧека.ТаблицаОплат.Добавить(СтрокаОплаты);
КонецПроцедуры 

&НаКлиенте
Процедура ТаблицаТоваровПриИзменении(Элемент)
	ПараметрыОперацииФискализацииЧека.ПозицииЧека = Новый Массив;
	
	Для каждого СтрокаТаблицыТоваров Из Объект.ТаблицаТоваров Цикл
		Если СтрокаТаблицыТоваров.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПозицииЧека = МенеджерОборудованияКлиентСервер.ПараметрыФискальнойСтрокиЧека();
		
		ЗаполнитьЗначенияСвойств(СтрокаПозицииЧека, СтрокаТаблицыТоваров,, "СтавкаНДС");
		СтрокаПозицииЧека.СтавкаНДС         = УчетНДСВызовСервераПовтИсп.ПолучитьСтавкуНДСдляККТ(СтрокаТаблицыТоваров.СтавкаНДС, ЭтоВерсияФФД105);
		СтрокаПозицииЧека.НомерСтрокиТовара = СтрокаТаблицыТоваров.НомерСтроки;
		
		ПараметрыОперацииФискализацииЧека.ПозицииЧека.Добавить(СтрокаПозицииЧека);
	КонецЦикла;
	
	ВсегоПоЧеку = Объект.ТаблицаТоваров.Итог("Сумма");
	
	ЗаполнитьТаблицуОплат();
	
	ОбновитьПредставлениеЧека();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТоваровПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекущиеДанные = Элементы.ТаблицаТоваров.ТекущиеДанные;
		ТекущиеДанные.ДанныеПоставщика = МенеджерОборудованияКлиентСервер.ПараметрыДанныеПоставщика();
		ТекущиеДанные.ДанныеАгента     = МенеджерОборудованияКлиентСервер.ПараметрыДанныеАгента();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТоваровЦенаСоСкидкамиПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.ТаблицаТоваров.ТекущиеДанные;
	
	СтрокаТаблицы.Цена = СтрокаТаблицы.ЦенаСоСкидками;
	СтрокаТаблицы.СуммаСкидок = 0;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтотОбъект, "ТаблицаТоваров");
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТоваровКоличествоПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.ТаблицаТоваров.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииКоличествоЦена(ЭтотОбъект, "ТаблицаТоваров");
	
	СтрокаТаблицы.ЦенаСоСкидками = СтрокаТаблицы.Цена;
	СтрокаТаблицы.СуммаСкидок = 0;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТоваровСуммаПриИзменении(Элемент)
	СтрокаТаблицы = Элементы.ТаблицаТоваров.ТекущиеДанные;
	
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСумма(ЭтотОбъект, "ТаблицаТоваров");
	
	СтрокаТаблицы.ЦенаСоСкидками = СтрокаТаблицы.Цена;
	СтрокаТаблицы.СуммаСкидок = 0;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТоваровСтавкаНДСПриИзменении(Элемент)
	ОбработкаТабличныхЧастейКлиентСервер.ПриИзмененииСтавкаНДС(ЭтотОбъект, "ТаблицаТоваров");
КонецПроцедуры


&НаКлиенте
Процедура ТаблицаТоваровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ТаблицаТоваровПризнакАгентаСтрокой" Тогда
		ОткрытьФормуРеквизитыАгента(Элемент.ТекущиеДанные);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПризнакАгентаНажатие(Элемент, СтандартнаяОбработка)
	ОткрытьФормуРеквизитыАгента(ЭтаФорма);
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТоваровНомерТаможеннойДекларацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ОповещениеЗавершение = Новый ОписаниеОповещения("ВыборТаможеннойДекларацииЗавершение", ЭтотОбъект, Новый Структура("Элемент", Элементы.ТаблицаТоваров.ТекущиеДанные));
	ОткрытьФорму("Справочник.НомераГТД.ФормаВыбора",,ЭтотОбъект,,,,ОповещениеЗавершение);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаТоваровСтранаПроисхожденияПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаТоваров.ТекущиеДанные;
	
	КодСтраныПроисхожденияТовара = КодСтраныПроисхождения(ТекущиеДанные.СтранаПроисхождения);
	ПозицияЧека = ПараметрыОперацииФискализацииЧека.ПозицииЧека[ТекущиеДанные.НомерСтроки-1];
	Если ТипЗнч(ПозицияЧека) = Тип("Структура") Тогда
		ПозицияЧека.Вставить("КодСтраныПроисхожденияТовара", КодСтраныПроисхожденияТовара);
		ТекущиеДанные.КодСтраныПроисхожденияТовара = КодСтраныПроисхожденияТовара;
	КонецЕсли; 
КонецПроцедуры


#КонецОбласти 

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НапечататьЧек(Команда)
	Если НЕ ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	НастройкиОтправкиСообщений = Новый Структура("ОтправлятьEmail, ОтправлятьSMS, ПечататьЧек");
	ЗаполнитьЗначенияСвойств(НастройкиОтправкиСообщений, Объект);
	
	ОбщегоНазначенияВызовСервера.ХранилищеНастроекДанныхФормСохранить("ПечатьЧека", ИдентификаторНастроек, НастройкиОтправкиСообщений);
	
	Если Объект.ОтправлятьEmail Тогда
		ПараметрыОперацииФискализацииЧека.ПокупательEmail = Объект.АдресЭлектроннойПочты;
		ПараметрыОперацииФискализацииЧека.Отправляет1СEmail = Отправляет1СEmail;
	КонецЕсли;
	
	Если Объект.ОтправлятьSMS Тогда
		ПараметрыОперацииФискализацииЧека.ПокупательНомер = Объект.НомерТелефона;
		ПараметрыОперацииФискализацииЧека.Отправляет1СSMS = Отправляет1СSMS;
	КонецЕсли; 
	
	Если Объект.ОтправлятьEmail ИЛИ Объект.ОтправлятьSMS Тогда
		ПараметрыОперацииФискализацииЧека.Электронно = НЕ Объект.ПечататьЧек;
	КонецЕсли; 
	
	Оповещение = Новый ОписаниеОповещения("НапечататьЧекЗавершение", ЭтотОбъект);
	
	Если Объект.ЧекКоррекции Тогда
		
		ДанныеКоррекции = МенеджерОборудованияКлиентСервер.ПараметрыДанныеКоррекции();
		
		ДанныеКоррекции.ТипКоррекции      = ?(Объект.КоррекцияПоПредписанию, 1, 0);
		ДанныеКоррекции.НомерПредписания  = ?(Объект.КоррекцияПоПредписанию, Объект.НомерПредписания, "0");
		ДанныеКоррекции.ОписаниеКоррекции = Объект.ОписаниеКоррекции;
		ДанныеКоррекции.ДатаКоррекции     = Объект.ДатаКоррекции;
		
		ПараметрыЧекаКоррекции = МенеджерОборудованияКлиентСервер.ПараметрыОперацииЧекаКоррекции();
		
		ПараметрыЧекаКоррекции.КорректируемыйДокумент = Объект.КорректируемыйДокумент;
		ПараметрыЧекаКоррекции.НеприменениеККТ        = НЕ ЗначениеЗаполнено(Объект.КорректируемыйДокумент);
		
		ЗаполнитьЗначенияСвойств(ПараметрыЧекаКоррекции.ДанныеКоррекции, ДанныеКоррекции);
		ЗаполнитьЗначенияСвойств(ПараметрыЧекаКоррекции, ПараметрыОперацииФискализацииЧека);
		
		МенеджерОборудованияКлиент.НачатьФормированиеЧекаКоррекцииНаФискальномУстройстве(Оповещение, 
			УникальныйИдентификатор, 
			ПараметрыЧекаКоррекции, 
			ИдентификаторУстройства,
			);
	Иначе
		МенеджерОборудованияКлиент.НачатьФискализациюЧекаНаФискальномУстройстве(Оповещение, 
			УникальныйИдентификатор, 
			ПараметрыОперацииФискализацииЧека, 
			ИдентификаторУстройства,
			,
			,
			);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Процедура ЗаписатьДанныеБизнесСтатистики(ИзмененнаяСтруктура, АдресХранилищаИсходныеПараметры)
	Если НЕ ЦентрМониторинга.ЗаписыватьОперацииБизнесСтатистики() Тогда
		Возврат;
	КонецЕсли; 
	
	ИсключаемыеРеквизиты = Новый Массив;
	ИсключаемыеРеквизиты.Добавить("НомерЧека");
	
	ИсходнаяСтруктура   = ПолучитьИзВременногоХранилища(АдресХранилищаИсходныеПараметры);
	
	ИзмененныеРеквизиты = СравнитьСтруктурыРекурсивно(ИсходнаяСтруктура, ИзмененнаяСтруктура, ИсключаемыеРеквизиты);
	
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики("Обработка.ПечатьЧека.НапечатанЧек", 1);
	Если ИзмененныеРеквизиты.Количество() > 0 Тогда
		ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики("Обработка.ПечатьЧека.ИзмененыРеквизиты", ИзмененныеРеквизиты.Количество());
		Для каждого ИзмененныйРеквизит Из ИзмененныеРеквизиты Цикл
			ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики("Обработка.ПечатьЧека.ИзмененРеквизит."+ИзмененныйРеквизит, 1);
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция СравнитьСтруктурыРекурсивно(ИсходнаяСтруктура, ИзмененнаяСтруктура, ИсключаемыеРеквизиты)
	ИзмененныеРеквизиты = Новый Массив;
	Для каждого КлючИЗначение Из ИсходнаяСтруктура Цикл
		ИмяРеквизита     = КлючИЗначение.Ключ;
		
		Если ИсключаемыеРеквизиты.Найти(ИмяРеквизита) <> Неопределено Тогда
			Продолжить;
		КонецЕсли; 
		
		ИсходноеЗначение = КлючИЗначение.Значение;
		НовоеЗначение    = ИзмененнаяСтруктура[ИмяРеквизита];
		Если ТипЗнч(ИсходноеЗначение) = Тип("Структура") Тогда
			ИзмененныеРеквизитыСтруктуры = СравнитьСтруктурыРекурсивно(ИсходноеЗначение, НовоеЗначение, ИсключаемыеРеквизиты);
			Для каждого ИмяИзмененногоРеквизитаСтруктуры Из ИзмененныеРеквизитыСтруктуры Цикл
				ИзмененныеРеквизиты.Добавить(СтрШаблон("%1.%2", ИмяРеквизита, ИмяИзмененногоРеквизитаСтруктуры));
			КонецЦикла;
		ИначеЕсли ТипЗнч(КлючИЗначение.Значение) = Тип("Массив") Тогда
			
			Если ИсходноеЗначение.Количество() <> НовоеЗначение.Количество() Тогда
				// Если в массивах разное количество элементов то построчно сравнивать смысла нет
				ИзмененныеРеквизиты.Добавить(ИмяРеквизита);
			Иначе
				Для ПозицияМассива = 0 По ИсходноеЗначение.Количество()-1 Цикл
					ИзмененныеРеквизитыСтруктуры = СравнитьСтруктурыРекурсивно(ИсходноеЗначение[ПозицияМассива], НовоеЗначение[ПозицияМассива], ИсключаемыеРеквизиты);
					Для каждого ИзмененныйРеквизит Из ИзмененныеРеквизитыСтруктуры Цикл
						ИзмененныеРеквизиты.Добавить(СтрШаблон("%1[%2].%3", ИмяРеквизита, ПозицияМассива, ИзмененныйРеквизит));
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			
		ИначеЕсли (ЗначениеЗаполнено(НовоеЗначение) ИЛИ ЗначениеЗаполнено(ИсходноеЗначение)) И НовоеЗначение <> ИсходноеЗначение Тогда 
			ИзмененныеРеквизиты.Добавить(ИмяРеквизита);
		КонецЕсли; 
	КонецЦикла; 

	Возврат ИзмененныеРеквизиты;
КонецФункции 

&НаКлиенте
Процедура ЗаполнитьТаблицуОплат()

	Кредит = Макс(ВсегоПоЧеку - Предоплата - Наличные - ВстречноеПредоставление - Электронно, 0);
	
	ПараметрыОперацииФискализацииЧека.ТаблицаОплат = Новый Массив;
	
	ДобавитьСтрокуОплаты("Предоплата",              ВсегоПоЧеку - Кредит - Наличные - Электронно - ВстречноеПредоставление);
	ДобавитьСтрокуОплаты("ВстречноеПредоставление", ВстречноеПредоставление);
	ДобавитьСтрокуОплаты("Наличные",                Наличные);
	ДобавитьСтрокуОплаты("Электронно",              Электронно);
	ДобавитьСтрокуОплаты("Постоплата",              Кредит);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеКассира(Кассир, КассирИНН)

	Если ПустаяСтрока(Кассир) Тогда
		Возврат "< .. >";
	КонецЕсли; 
	
	ПредставлениеКассира = Новый Массив;
	ПредставлениеКассира.Добавить(Кассир);
	Если ЗначениеЗаполнено(КассирИНН) Тогда
		ПредставлениеКассира.Добавить(СтрШаблон("(ИНН: %1)", КассирИНН));
	КонецЕсли;
	
	Возврат СтрСоединить(ПредставлениеКассира, " ");
КонецФункции 

&НаСервере
Процедура УстановитьУсловноеОформлениеВидимость()
	
	// ТаблицаТоваровПризнакПредметаРасчета
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаТоваровПризнакПредметаРасчета");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ВыводитьПризнакПредметаРасчета", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// ТаблицаТоваровПризнакСпособаРасчета
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаТоваровПризнакСпособаРасчета");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ВыводитьПризнакСпособаРасчета", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// ТаблицаТоваровПризнакАгентаСтрокой
	
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ТаблицаТоваровПризнакАгентаСтрокой");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ЭтоВерсияФФД105", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
	// АдресПокупателя
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "АдресЭлектроннойПочты");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОтправлятьEmail", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.АдресЭлектроннойПочты", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// АдресПокупателя
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НомерТелефона");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ОтправлятьSMS", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.НомерТелефона", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// НомерПредписания
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "НомерПредписания");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КоррекцияПоПредписанию", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.НомерПредписания", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
	
	// ДатаКоррекции
	ЭлементУО = УсловноеОформление.Элементы.Добавить();
	
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ДатаКоррекции");
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.КорректируемыйДокумент", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.ДатаКоррекции", ВидСравненияКомпоновкиДанных.НеЗаполнено);
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
КонецПроцедуры

&НаКлиенте
Процедура НапечататьЧекЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	Если РезультатВыполнения.Результат Тогда
		Модифицированность = Ложь;
		ЗаписатьДанныеБизнесСтатистики(ПараметрыОперацииФискализацииЧека, АдресХранилищаИсходныеПараметры);
		Закрыть(РезультатВыполнения);
	Иначе
		
		ТекстСообщения = НСтр("ru = 'При печати чека произошла ошибка.
			|Чек не напечатан на фискальном устройстве.
			|Дополнительное описание:
			|%ДополнительноеОписание%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения,
			"%ДополнительноеОписание%",
			РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеЧека()
	ТекстЧека = МенеджерОборудованияКлиентСервер.СформироватьТекстНефискальногоЧека(ПараметрыОперацииФискализацииЧека);
	
	ПечатнаяФорма.УстановитьТекст(ТекстЧека);
КонецПроцедуры 

&НаКлиенте
Процедура ОткрытьФормуРеквизитыАгента(Элемент)
	ПараметрыФормы = Новый Структура();
	
	ПараметрыФормы.Вставить("ТолькоПросмотр",         ТолькоПросмотр);
	Если Элемент.ДанныеАгента <> Неопределено Тогда
		ПараметрыФормы.Вставить("ДанныеАгента",           Элемент.ДанныеАгента);
	КонецЕсли;
	Если Элемент.ДанныеПоставщика <> Неопределено Тогда
		ПараметрыФормы.Вставить("ДанныеПоставщика",       Элемент.ДанныеПоставщика);
	КонецЕсли; 
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элемент,"ПризнакАгента") Тогда
		ПараметрыФормы.Вставить("ПризнакАгента",          Элемент.ПризнакАгента);
	Иначе
		ПараметрыФормы.Вставить("ПризнакАгента",          Элемент.ПризнакАгентаПоПредметуРасчета);
	КонецЕсли; 
	ПараметрыФормы.Вставить("ЭтоВерсияФФД105",        ЭтоВерсияФФД105);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПризнакАгентаЗавершение", ЭтотОбъект, Новый Структура("Элемент", Элемент));
	
	ОткрытьФорму("Обработка.ПечатьЧека.Форма.РеквизитыАгента", ПараметрыФормы, ЭтаФорма,,,,ОписаниеОповещения);
КонецПроцедуры 

&НаКлиенте
Процедура ПризнакАгентаЗавершение(Значение, Параметры) Экспорт
	Если ТипЗнч(Значение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Параметры.Элемент, Значение);
	
	Параметры.Элемент.ПризнакАгентаСтрокой = ПризнакАгентаПоПредметуРасчетаСтрокой(Значение.ПризнакАгента);
	
	Если ТипЗнч(Параметры.Элемент) = Тип("УправляемаяФорма") Тогда
		ЗаполнитьЗначенияСвойств(
			ПараметрыОперацииФискализацииЧека, 
			Значение, 
			"ПризнакАгента, ДанныеАгента, ДанныеПоставщика");
	Иначе
		Параметры.Элемент.ПризнакАгентаПоПредметуРасчета = Значение.ПризнакАгента;
		
		ПозицияЧека = ПараметрыОперацииФискализацииЧека.ПозицииЧека[Параметры.Элемент.НомерСтроки-1];
		Если ТипЗнч(ПозицияЧека) = Тип("Структура") Тогда
			ПозицияЧека.Вставить("ПризнакАгентаПоПредметуРасчета", Значение.ПризнакАгента);
			ПозицияЧека.Вставить("ДанныеАгента",                   Значение.ДанныеАгента);
			ПозицияЧека.Вставить("ДанныеПоставщика",               Значение.ДанныеПоставщика);
		КонецЕсли; 
	КонецЕсли; 
	
	ОбновитьПредставлениеЧека();
	
	Модифицированность = Истина;
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПризнакАгентаПоПредметуРасчетаСтрокой(ПризнакАгента)
	Возврат Обработки.ПечатьЧека.ПризнакАгентаПоПредметуРасчетаСтрокой(ПризнакАгента);
КонецФункции 

&НаКлиенте
Процедура РедактированиеРеквизитовКассира()
	ДанныеКассира = Новый Структура("Кассир, КассирИНН");
	ЗаполнитьЗначенияСвойств(ДанныеКассира, ЭтотОбъект);
	ОписаниеОповещения = Новый ОписаниеОповещения("РедактированиеРеквизитовКассираЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.ПечатьЧека.Форма.РеквизитыКассира", ДанныеКассира, ЭтотОбъект, ,,,ОписаниеОповещения);
КонецПроцедуры 

&НаКлиенте
Процедура РедактированиеРеквизитовКассираЗавершение(РеквизитыКассира, Параметры) Экспорт
	Если ТипЗнч(РеквизитыКассира) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, РеквизитыКассира);
	
	КассирПредставление = ПредставлениеКассира(Кассир, КассирИНН);
	
	ЗаполнитьЗначенияСвойств(ПараметрыОперацииФискализацииЧека, ЭтотОбъект, "Кассир, КассирИНН");
	
	ОбновитьПредставлениеЧека();
КонецПроцедуры 

&НаКлиенте
Процедура ПриЗакрытииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Модифицированность = Ложь;
		Закрыть(Неопределено);
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// Чек должен отправляться только через ОФД любым из способов
	ЧекОтправляетсяЧерезОФД = (НЕ Объект.ОтправлятьSMS ИЛИ НЕ Отправляет1СSMS) И (НЕ Объект.ОтправлятьEmail ИЛИ НЕ Отправляет1СEmail) 
		И (Объект.ОтправлятьSMS ИЛИ Объект.ОтправлятьEmail);
		
	Если Объект.ЧекКоррекции 
			И Объект.КоррекцияПоПредписанию 
			И НЕ ЗначениеЗаполнено(Объект.НомерПредписания) Тогда
		ТекстСообщения = "";
		ВидСообщения   = "Заполнение";
		
		ОписаниеОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", ВидСообщения,"Номер предписания налогового органа",,,ТекстСообщения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки, , "НомерПредписания", "Объект", Отказ);
	КонецЕсли; 
	
	Если Объект.ЧекКоррекции 
		И НЕ ЗначениеЗаполнено(Объект.КорректируемыйДокумент) 
		И НЕ ЗначениеЗаполнено(Объект.ДатаКоррекции) Тогда
		ТекстСообщения = "";
		ВидСообщения   = "Заполнение";
		
		ОписаниеОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", ВидСообщения,"Дата коррекции",,,ТекстСообщения);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки, , "ДатаКоррекции", "Объект", Отказ);
	КонецЕсли;
	
	Если НЕ Объект.ПечататьЧек И НЕ ЧекОтправляетсяЧерезОФД Тогда
		ОписаниеОшибки = НСтр("ru = 'Необходимо либо напечатать чек либо отправить его в электронном виде по email/sms через ОФД.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки, ,"ПечататьЧек", "Объект", Отказ);
	Иначе
		Если Объект.ОтправлятьEmail Тогда
			Если НЕ ЗначениеЗаполнено(Объект.АдресЭлектроннойПочты) Тогда
				ТекстСообщения = "";
				ВидСообщения   = "Заполнение";
				
				ОписаниеОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", ВидСообщения,"Адрес электронной почты",,,ТекстСообщения);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки, , "АдресЭлектроннойПочты", "Объект", Отказ);
			ИначеЕсли НЕ ОбщегоНазначенияКлиентСервер.АдресЭлектроннойПочтыСоответствуетТребованиям(Объект.АдресЭлектроннойПочты) Тогда 
				ТекстСообщения = НСтр("ru = 'Неверный формат адреса электронной почты.'");
				ВидСообщения   = "Корректность";
				
				ОписаниеОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", ВидСообщения,"Адрес электронной почты",,,ТекстСообщения);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки, , "АдресЭлектроннойПочты", "Объект", Отказ);
			КонецЕсли;
		КонецЕсли;
		
		Если Объект.ОтправлятьSMS Тогда
			НомерТелефонаБезПрефикса = ?(СтрНайти(Объект.НомерТелефона, "+") = 1, Сред(Объект.НомерТелефона, 2), Объект.НомерТелефона);
			Если НЕ ЗначениеЗаполнено(Объект.НомерТелефона) Тогда
				ТекстСообщения = "";
				ВидСообщения   = "Заполнение";
				
				ОписаниеОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", ВидСообщения, "Номер телефона",,,ТекстСообщения);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки, , "НомерТелефона", "Объект", Отказ);
			ИначеЕсли НЕ СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(НомерТелефонаБезПрефикса) 
				ИЛИ НЕ ОрганизацииФормыКлиентСервер.ТелефонСоответствуетТребованиям(НомерТелефонаБезПрефикса) Тогда
				
				ТекстСообщения = НСтр("ru = 'Неверный формат номера телефона.'");
				ВидСообщения   = "Корректность";
				
				ОписаниеОшибки = ОбщегоНазначенияКлиентСервер.ТекстОшибкиЗаполнения("Поле", ВидСообщения, "Номер телефона",,,ТекстСообщения);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки, , "НомерТелефона", "Объект", Отказ);
			КонецЕсли;
		КонецЕсли;
		
		// Если отправляем и по emal и по SMS и при этом пользуемся услугами ОФД.
		Если Объект.ОтправлятьEmail И Объект.ОтправлятьSMS 
			И НЕ(Отправляет1СEmail ИЛИ Отправляет1СSMS) Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'При отправке электронного чека через ОФД необходимо выбрать или email или sms'"), ,,,Отказ);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеФормой(Форма)

	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.НомерТелефона.Доступность         = Объект.ОтправлятьSMS;
	Элементы.АдресЭлектроннойПочты.Доступность = Объект.ОтправлятьEmail;
	Элементы.ГруппаКоррекция.Видимость = Объект.ЧекКоррекции;
	
КонецПроцедуры 

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()
	
	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	
	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);
	
КонецПроцедуры


#Область РаботаСоСканеромШК

&НаКлиенте
Процедура ПодключитьСканерШКЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт

	СканерШтрихкодаПодключен = РезультатВыполнения.Результат;

КонецПроцедуры

&НаКлиенте
Процедура ОтключитьСканерШКЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт

	Если Не РезультатВыполнения.Результат Тогда
		ТекстСообщения = НСтр("ru = 'При отключении оборудования произошла ошибка: ""%1"".'");
		ТекстСообщения = СтрШаблон(ТекстСообщения, РезультатВыполнения.ОписаниеОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	Иначе
		СканерШтрихкодаПодключен = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьДокументНаСервере(КлючЗаписи)

	Объект.КорректируемыйДокумент = КлючЗаписи.ДокументОснование;

КонецПроцедуры 

&НаКлиенте
Процедура ВыборТаможеннойДекларацииЗавершение(Значение, ДополнительныеПараметры) Экспорт
	Если Значение = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	РегистрационныйНомерТаможеннойДекларации = РегистрационныйНомерТаможеннойДекларации(Значение);
	
	ДополнительныеПараметры.Элемент.НомерТаможеннойДекларации = РегистрационныйНомерТаможеннойДекларации;
	
	ПозицияЧека = ПараметрыОперацииФискализацииЧека.ПозицииЧека[ДополнительныеПараметры.Элемент.НомерСтроки-1];
	Если ТипЗнч(ПозицияЧека) = Тип("Структура") Тогда
		ПозицияЧека.Вставить("НомерТаможеннойДекларации", РегистрационныйНомерТаможеннойДекларации);
	КонецЕсли; 
	
	ОбновитьПредставлениеЧека();
КонецПроцедуры

&НаСервереБезКонтекста
Функция РегистрационныйНомерТаможеннойДекларации(ТаможеннаяДекларация)

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТаможеннаяДекларация, "РегистрационныйНомер");

КонецФункции 

&НаСервереБезКонтекста
Функция КодСтраныПроисхождения(Страна)

	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Страна, "Код");

КонецФункции 

#КонецОбласти 

#КонецОбласти