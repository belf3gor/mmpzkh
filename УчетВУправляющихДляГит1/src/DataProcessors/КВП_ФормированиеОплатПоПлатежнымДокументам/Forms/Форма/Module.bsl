
// Особенности в работе обработки:
// 1. Если для платежного документа сформировать документ "Регистрация оплаты", затем заново заполнить тч, изменить
//    распределение на кап. ремонт и попытаться повторно сформировать документ "Регистрация оплаты", то распределение
//    на кап. ремонт в документе "Регистрация оплаты" останется прежним.
//    Так же распределение на кап. ремонт при заполнении тч заполняется всегда стандартно, т.е. при ведении раздельного
//    учета услуг кап. ремонта, если вид документа "Поступление на расчетный счет" и банковский счет в платежном
//    документе совпадает со счетом услуг кап. ремонта, будет установлен вариант распределения на кап. ремонт - услуги
//    кап. ремонта. Для других видов платежных документов, а также для вида документа "Поступление на расчетный счет",
//    когда банковский счета в платежном документе не совпадает со счетом услуг кап. ремонта будет установлен вариант
//    распределения на кап. ремонт - услуги кроме кап. ремонта.
// 2. То же самое происходит при изменении в платежном документе "Операция по платежной карте" вида оплаты. При
//    повторном формировании документа "Регистрация оплаты" вид оплаты в нем остается прежним.
// 3. Если в платежном документе сумма платежа разбита на несколько договоров, то после формирования документов
//    "Регистрация оплаты" только у части из них и повторном заполнении тч обработки, в ней отображаются только
//    строки платежного документа со сформированными документами РО, а с не сформированными не отображаются.
// 4. Когда документ отображается в тч "Документы с ошибками", в информационной строке всегда пишется "Документов с
//    неоднозначным соответствием контрагента лицевому счету ...", хотя у контрагента один договор по лицевому счету,
//    возможно, имелось ввиду просто количество документов с ошибками в табличной части.

////////////////////////////////////////////////////////////////////////////////
// УПРАВЛЕНИЕ ВИДИМОСТЬЮ

#Область ПроцедурыУправленияВидимостью

&НаКлиентеНаСервереБезКонтекста
// Процедура управления видмостью элементов формы.
//
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	// Видимость панели ошибок.
	ВидимостьПанелиОшибок = (Форма.ДеревоПлатежныхДокументовСОшибками.ПолучитьЭлементы().Количество() > 0);
	
	Элементы.ДеревоПлатежныхДокументовСОшибками.Видимость = ВидимостьПанелиОшибок;
	Элементы.ГруппаКоманднаяПанельОшибки.Видимость        = ВидимостьПанелиОшибок;
	
	// Видимость элементов по кап. ремонту.
	Элементы.ДеревоПлатежныхДокументовБезОшибокВариантРаспределенияОплатКапРемонт.Видимость = (Форма.мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет);
	Элементы.ДеревоПлатежныхДокументовСОшибкамиВариантРаспределенияОплатКапРемонт.Видимость = (Форма.мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет);
	
	Элементы.ДеревоПлатежныхДокументовСОшибкамиНеРаспределятьОплатуНаДобровольноеСтрахование.Видимость = Форма.ВестиУчетНачисленийПоДобровольномуСтрахованию;
	Элементы.ДеревоПлатежныхДокументовБезОшибокНеРаспределятьОплатуНаДобровольноеСтрахование.Видимость = Форма.ВестиУчетНачисленийПоДобровольномуСтрахованию;
	
КонецПроцедуры // УправлениеФормой()

&НаСервере
// Обновляет строку статуса.
Процедура ПроверитьИОбновитьИнфСтроку(ОтобразитьСведенияОДокументахКЗагрузке = Ложь)
	
	ПлатежныхДокументов      = 0;
	СуммаПлатежныхДокументов = 0;
	
	ОшибочныхДокументовСПометкой = 0;
	НеоднозначныхСоответствий    = 0;
	СуммаОшибочных               = 0;
	
	ДокументовКЗагрузке      = 0;
	СуммаПлатежейДляЗагрузки = 0;
	
	СозданоДокументовОплаты  = 0;
	СуммаСозданныхДокументов = 0;
	
	// Для общего количества/суммы ПД.
	ТаблицаВсеПД = Новый ТаблицаЗначений;
	ТаблицаВсеПД.Колонки.Добавить("Документ");
	ТаблицаВсеПД.Колонки.Добавить("Сумма");
	
	// Для количества/суммы отмеченных ПД.
	ТаблицаОтмеченныеПД = Новый ТаблицаЗначений;
	ТаблицаОтмеченныеПД.Колонки.Добавить("Документ");
	ТаблицаОтмеченныеПД.Колонки.Добавить("Сумма");
	
	// ОШИБКИ
	Для Каждого ТекВетка Из ДеревоПлатежныхДокументовСОшибками.ПолучитьЭлементы() Цикл
		
		// Дополним таблицу сумм по ПД.
		НоваяСтрока = ТаблицаВсеПД.Добавить();
		НоваяСтрока.Документ = ТекВетка.Документ;
		НоваяСтрока.Сумма    = ТекВетка.Сумма;
		
		// Если для контрагента больше одного л/с.
		Если ТекВетка.Готовность = 0 Тогда
			НеоднозначныхСоответствий = НеоднозначныхСоответствий + 1;
		КонецЕсли;
		
		ЕстьОшибкиПоДокументу = 0;
		ЕстьПометки = Ложь;
		
		// Строки, где договор и контрагент совпадают. Требуется для помещения в таблицу с
		// ошибками ПКО, по которым нет сформированного РО, но могут быть оплаты по нескольким л/с.
		СтрокССовпадениями = 0;
		
		Для Каждого ТекСтрока Из ТекВетка.ПолучитьЭлементы() Цикл
			
			Если ТекСтрока.КонтрагентСовпадает И ТекСтрока.ДоговорСовпадает Тогда
				СтрокССовпадениями = СтрокССовпадениями + 1;
			КонецЕсли;
			
			Если ТекСтрока.Пометка Тогда
				
				ЕстьПометки = Истина;
				ЕстьОшибкиПоДокументу = ЕстьОшибкиПоДокументу + ?(ТекСтрока.Готовность = 0, 1, 0);
				
				ОшибочныхДокументовСПометкой = ОшибочныхДокументовСПометкой + ?(ТекСтрока.Готовность = 0, 1, 0);
				СуммаОшибочных               = СуммаОшибочных + ?(ТекСтрока.Готовность = 0, ТекСтрока.Сумма, 0);
				
			// Если в строке не совпадает контрагент и она не помечена, то это является ошибкой.
			ИначеЕсли НЕ ТекСтрока.КонтрагентСовпадает Тогда
				
				ЕстьОшибкиПоДокументу = ЕстьОшибкиПоДокументу + 1;
				ТекСтрока.Готовность = 0;
				
			КонецЕсли;
		КонецЦикла;
		
		Если ТекВетка.ПолучитьЭлементы().Количество() > 0 Тогда
			Если НЕ ТекВетка.ЕстьРО И СтрокССовпадениями > 1 Тогда
				ТекВетка.Готовность = 0;
			Иначе
				ТекВетка.Готовность = ?(ЕстьОшибкиПоДокументу = 0 И ЕстьПометки, 1, 0);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// К ЗАГРУЗКЕ
	
	Для Каждого ТекВетка Из ДеревоПлатежныхДокументовБезОшибок.ПолучитьЭлементы() Цикл
		
		// Дополним таблицу сумм по ПД.
		НоваяСтрока = ТаблицаВсеПД.Добавить();
		НоваяСтрока.Документ = ТекВетка.Документ;
		НоваяСтрока.Сумма    = ТекВетка.Сумма;
		
		// Платежных документов к загрузке.
		Если ОтобразитьСведенияОДокументахКЗагрузке И ТекВетка.Пометка Тогда
			// Дополним таблицу сумм по отмеченным ПД.
			НоваяСтрока = ТаблицаОтмеченныеПД.Добавить();
			НоваяСтрока.Документ = ТекВетка.Документ;
			НоваяСтрока.Сумма    = ТекВетка.Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
	// Определяем количество/сумму всех ПД и отмеченных ПД.
	ТаблицаВсеПД.Свернуть("Документ", "Сумма");
	ПлатежныхДокументов = ТаблицаВсеПД.Количество();
	
	Если НЕ ПлатежныхДокументов = 0 Тогда
		ТаблицаВсеПД.Свернуть(, "Сумма");
		СуммаПлатежныхДокументов = ТаблицаВсеПД[0].Сумма;
	Иначе
		СуммаПлатежныхДокументов = 0;
	КонецЕсли;
	
	Если ОтобразитьСведенияОДокументахКЗагрузке Тогда
		
		ТаблицаОтмеченныеПД.Свернуть("Документ", "Сумма");
		ДокументовКЗагрузке = ТаблицаОтмеченныеПД.Количество();
		
		Если ДокументовКЗагрузке = 0 Тогда
			ИнформационнаяСтрокаЗагрузки = "Документов для загрузки нет.";
		Иначе
			ТаблицаОтмеченныеПД.Свернуть(, "Сумма");
			СуммаПлатежейДляЗагрузки = ТаблицаОтмеченныеПД[0].Сумма;
			ИнформационнаяСтрокаЗагрузки = "Выбрано документов для загрузки " + Строка(ДокументовКЗагрузке) + " на сумму " + Формат(СуммаПлатежейДляЗагрузки, "ЧЦ=15; ЧДЦ=2");
		КонецЕсли;
		
	КонецЕсли;
	
	ИнфСтрока = "Всего платежных банковских документов "
			  + Строка(ПлатежныхДокументов)
			  + " на сумму "
			  + Строка(Формат(СуммаПлатежныхДокументов,"ЧЦ=15; ЧДЦ=2"));
	ИнформационнаяСтрока = ИнфСтрока;
	ИнфСтрока = "";
	
	СтатуснаяСтрока = "";
	Если ОшибочныхДокументовСПометкой > 0 Тогда
		СтатуснаяСтрока = "Отмечено строк с ошибками "
						+ Строка(ОшибочныхДокументовСПометкой)
						+ ?(СуммаОшибочных > 0, " на сумму "
						+ Строка(Формат(СуммаОшибочных, "ЧЦ=15; ЧДЦ=2")), "")
						+ ". ";
	КонецЕсли;
	
	Если НеоднозначныхСоответствий > 0 Тогда
		СтатуснаяСтрока = СтатуснаяСтрока +
						  "Документов с неоднозначным соответствием контрагента лицевому счету " +
						  Строка(НеоднозначныхСоответствий) + ".";
	КонецЕсли;
	
	Элементы.СтатуснаяСтрока.Заголовок = СтатуснаяСтрока;
	
КонецПроцедуры

&НаСервере
// Командная панель обновить.
Процедура КоманднаяПанельПлатежныеДокументыОбновить()
	
	ЗаполнитьДокументы();
	
	ПроверитьИОбновитьИнфСтроку(Истина);
	
	МассивДляУдаления = Новый Массив;
	
	Для Каждого ТекВетка Из ДеревоПлатежныхДокументовСОшибками.ПолучитьЭлементы() Цикл
		Если ТекВетка.Готовность = 1 Тогда
			ВеткаКонтрагент = ДеревоПлатежныхДокументовБезОшибок.ПолучитьЭлементы().Добавить();
			
			ВеткаКонтрагент.Пометка    = Истина;
			ВеткаКонтрагент.Контрагент = ТекВетка.Контрагент;
			ВеткаКонтрагент.Договор    = ТекВетка.Договор;
			ВеткаКонтрагент.Сумма      = ТекВетка.Сумма;
			ВеткаКонтрагент.Номер      = ТекВетка.Номер;
			ВеткаКонтрагент.Дата       = ТекВетка.Дата;
			ВеткаКонтрагент.НазначениеПлатежа = ТекВетка.НазначениеПлатежа;
			ВеткаКонтрагент.Документ          = ТекВетка.Документ;
			ВеткаКонтрагент.СуммыСовпадают    = ТекВетка.СуммыСовпадают;
			ВеткаКонтрагент.ЕстьРО            = ТекВетка.ЕстьРО;
			ВеткаКонтрагент.СуммаРО           = ТекВетка.СуммаРО;
			
			Для Каждого ТекСтрока Из ТекВетка.ПолучитьЭлементы() Цикл
				Если ТекСтрока.Пометка Тогда
					ВеткаЛС            = ВеткаКонтрагент.ПолучитьЭлементы().Добавить();
					ВеткаЛС.Пометка    = ТекСтрока.Пометка;
					ВеткаЛС.Контрагент = ТекСтрока.Контрагент;
					ВеткаЛС.Сумма      = ТекСтрока.Сумма;
					ВеткаЛС.Номер      = ТекСтрока.Номер;
					ВеткаЛС.Документ   = ТекСтрока.Документ;
					ВеткаЛС.Дата       = ТекСтрока.Дата;
					ВеткаЛС.ЕстьРО     = ЗначениеЗаполнено(ТекСтрока.Документ);
					ВеткаЛС.КонтрагентСовпадает = ТекСтрока.КонтрагентСовпадает;
					ВеткаЛС.ДоговорСовпадает    = ТекСтрока.ДоговорСовпадает;
					ВеткаЛС.ВариантРаспределенияОплатКапРемонт        = ТекСтрока.ВариантРаспределенияОплатКапРемонт;
					ВеткаЛС.ВозможностьВыбораРаспределенияНаКапРемонт = ТекСтрока.ВозможностьВыбораРаспределенияНаКапРемонт;
					ВеткаЛС.НеРаспределятьОплатуНаДобровольноеСтрахование = ТекСтрока.НеРаспределятьОплатуНаДобровольноеСтрахование;
				КонецЕсли;
			КонецЦикла;
			
			// Удалить из ДеревоПлатежныхДокументовСОшибками.
			МассивДляУдаления.Добавить(ТекВетка);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТекВетка Из МассивДляУдаления Цикл
		ДеревоПлатежныхДокументовСОшибками.ПолучитьЭлементы().Удалить(ТекВетка);
	КонецЦикла;
	
	ЗаполнитьДанныеДляУсловногоОформленияВСтроках(ДеревоПлатежныхДокументовСОшибками.ПолучитьЭлементы(), "ДеревоПлатежныхДокументовСОшибками");
	ЗаполнитьДанныеДляУсловногоОформленияВСтроках(ДеревоПлатежныхДокументовБезОшибок.ПолучитьЭлементы(), "ДеревоПлатежныхДокументовБезОшибок");
	
	ПроверитьИОбновитьИнфСтроку(Истина);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ВспомогательныеПроцедурыИФункции

&НаСервере
// Определяет соответствие параметров.
//
// Параметры:
//  ТекКонтрагент - ссылка на справочник "Контрагенты".
//  ТекДоговор    - ссылка на справочник "Договоры".
// 
Процедура ИнициализацияРеквизитов(ТекКонтрагент = Неопределено, ТекДоговор = Неопределено)
	
	Если Объект.Организация.Пустая() Тогда
		Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьОсновнуюОрганизацию();
	КонецЕсли;
	
	Объект.УчитыватьВсеОплаты = Истина;
	
	мРабочаяДата = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	
	Объект.НачалоПериода = НачалоДня(мРабочаяДата);
	Объект.КонецПериода = КонецДня(мРабочаяДата);
	
	// Настройки ПКО по умолчанию.
	НоваяСтрока              = мТаблицаПлатежныхДокументов.Добавить();
	НоваяСтрока.Документ     = "Приходный кассовый ордер";
	НоваяСтрока.ИсточникВида = "ВидыОперацийПКО";
	НоваяСтрока.Пометка      = Истина;
	
	// Настройки платежного поручения по умолчанию.
	НоваяСтрока              = мТаблицаПлатежныхДокументов.Добавить();
	НоваяСтрока.Документ     = "Поступление на расчетный счет";
	НоваяСтрока.ИсточникВида = "ВидыОперацийПоступлениеДенежныхСредств";
	НоваяСтрока.Пометка      = Ложь;
	
	// Настройки ОПК по умолчанию.
	НоваяСтрока              = мТаблицаПлатежныхДокументов.Добавить();
	НоваяСтрока.Документ     = "Операция по платежной карте";
	НоваяСтрока.ИсточникВида = "ВидыОперацийОплатаПлатежнойКартой";
	НоваяСтрока.Пометка      = Ложь;
	
	// Заполним настройки списка документов.
	ВременнаяТаб = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("КВП_ФормированиеОплатПоПлатежнымДокументам", "СтрокаНастроек");
	Если (ТипЗнч(ВременнаяТаб) = Тип("Неопределено"))
	 Или (ТипЗнч(ВременнаяТаб) = Тип("ТаблицаЗначений") 
	 И ВременнаяТаб.Количество() <> мТаблицаПлатежныхДокументов.Количество()) Тогда
		Объект.НастройкаЗаполнения.Загрузить(мТаблицаПлатежныхДокументов.Выгрузить());
	ИначеЕсли ТипЗнч(ВременнаяТаб) = Тип("ТаблицаЗначений") Тогда
		Объект.НастройкаЗаполнения.Загрузить(ВременнаяТаб);
	КонецЕсли;
	
	// Заполним настройки видов операций.
	Для Каждого ПлатежныйДокумент Из мТаблицаПлатежныхДокументов Цикл
		
		ИсточникВида = ПлатежныйДокумент.ИсточникВида;
		ВидыОпераций = Перечисления[ПлатежныйДокумент.ИсточникВида];
		
		ВременнаяТабВидовОпераций = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("КВП_ФормированиеОплатПоПлатежнымДокументам",
																									"ВидыОпераций" + СтрЗаменить(ПлатежныйДокумент.Документ, " ", ""));
		
		мЗапрещенныеВидыОперацийПКО  = Новый Массив;
		мЗапрещенныеВидыОперацийПнРС = Новый Массив;
		мЗапрещенныеВидыОперацийОПК  = Новый Массив;
		СформироватьМассивыЗапрещенныхВидовОпераций(мЗапрещенныеВидыОперацийПКО, мЗапрещенныеВидыОперацийПнРС, мЗапрещенныеВидыОперацийОПК);
		
		Если ИсточникВида = "ВидыОперацийПКО" Тогда
			ЗапрещенныеВидыОпераций = мЗапрещенныеВидыОперацийПКО;
		ИначеЕсли ИсточникВида = "ВидыОперацийПоступлениеДенежныхСредств" Тогда
			ЗапрещенныеВидыОпераций = мЗапрещенныеВидыОперацийПнРС;
		Иначе
			ЗапрещенныеВидыОпераций = мЗапрещенныеВидыОперацийОПК;
		КонецЕсли;
		
		КоличествоРазрешенныхВидовОпераций = ВидыОпераций.Количество() - ЗапрещенныеВидыОпераций.Количество();
		
		// Если не найдена сохраненная таблица.
		Если ТипЗнч(ВременнаяТабВидовОпераций) = Тип("Неопределено") ИЛИ НЕ ВременнаяТабВидовОпераций.Количество() = КоличествоРазрешенныхВидовОпераций Тогда
			Для каждого ТекВид из ВидыОпераций Цикл
				Если ЗапрещенныеВидыОпераций.Найти(ТекВид) = Неопределено Тогда
					СтрокаТабл = Объект.НастройкаЗаполненияВидовОпераций.Добавить();
					СтрокаТабл.Пометка     = Истина;
					СтрокаТабл.Документ    = ПлатежныйДокумент.Документ;
					СтрокаТабл.ВидОперации = ТекВид;
				КонецЕсли;
			КонецЦикла;
		// Если таблица найдена.
		Иначе
			Для каждого ТекСтрока из ВременнаяТабВидовОпераций Цикл
				Если ЗапрещенныеВидыОпераций.Найти(ТекСтрока.ВидОперации) = Неопределено Тогда
					СтрокаТабл = Объект.НастройкаЗаполненияВидовОпераций.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаТабл, ТекСтрока);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры  // ИнициализацияРеквизитов()

&НаСервереБезКонтекста
// Формирует массивы запрещенных видов операций.
//
Процедура СформироватьМассивыЗапрещенныхВидовОпераций(мЗапрещенныеВидыОперацийПКО, мЗапрещенныеВидыОперацийПнРС, мЗапрещенныеВидыОперацийОПК)
	
	// Виды операций платежных документов, которые не нужно обрабатывать.
	мЗапрещенныеВидыОперацийПКО.Добавить(Перечисления.ВидыОперацийПКО.ВозвратОтПодотчетногоЛица);
	мЗапрещенныеВидыОперацийПКО.Добавить(Перечисления.ВидыОперацийПКО.ПолучениеНаличныхВБанке);
	мЗапрещенныеВидыОперацийПКО.Добавить(Перечисления.ВидыОперацийПКО.РозничнаяВыручка);
	
	мЗапрещенныеВидыОперацийПнРС.Добавить(Перечисления.ВидыОперацийПоступлениеДенежныхСредств.Инкассация);
	
	мЗапрещенныеВидыОперацийОПК.Добавить(Перечисления.ВидыОперацийОплатаПлатежнойКартой.РозничнаяВыручка);
	мЗапрещенныеВидыОперацийОПК.Добавить(Перечисления.ВидыОперацийОплатаПлатежнойКартой.ВозвратПокупателю);
	
КонецПроцедуры // СформироватьМассивыЗапрещенныхВидовОпераций()

&НаСервере
// Определяет соответствие параметров.
//
// Параметры:
//  ТекКонтрагент - ссылка на справочник "Контрагенты".
//  ТекДоговор    - ссылка на справочник "Договоры".
//
Процедура ОпределениеСоответствияКонтрагентовИЛицевыхСчетов()
	
	ЗапросЛС = Новый Запрос;
	ЗапросЛС.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Договор КАК Договор,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Контрагент КАК Контрагент,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Период КАК Период
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛС
	|ГДЕ
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛС.Организация = &Организация";
	ЗапросЛС.УстановитьПараметр("Организация", Объект.Организация);
	
	ТаблицаЛС.Загрузить(ЗапросЛС.Выполнить().Выгрузить());
	
КонецПроцедуры  // ИнициализацияРеквизитов()

&НаСервере
// Возвращает список видов операций по вид документа.
//
Функция ПолучитьСписокВидовОперацийПоВидуДокумента(ВидДокумента)
	
	СписокВидовОпераций = Новый СписокЗначений;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Пометка",  Истина);
	СтруктураОтбора.Вставить("Документ", ВидДокумента);
	
	НайденныеСтроки = Объект.НастройкаЗаполненияВидовОпераций.НайтиСтроки(СтруктураОтбора);
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		Если Строка.ВидОперации <> Перечисления.ВидыОперацийПКО.ПрочийПриход 
		   И Строка.ВидОперации <> Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление Тогда
			СписокВидовОпераций.Добавить(Строка.ВидОперации);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокВидовОпераций;
	
КонецФункции // ПолучитьСписокВидовОперацийПоТипуДокумента()

&НаСервере
// Проверяет на ошибки, устанавливает значение полей "Готовность" и "Пометка".
//
// Параметры
//  ТекВетка - ветка дерева платежных документов с ошибками.
//  ЕстьДокументРО - булево - есть ли ссылки на документ "Регистрация оплаты" в какой-либо
//                 из строк родителя обрабатываемой ветки.
//  СуммыНеСовпадают - булево - указывает на несовпадение общей суммы оплат документов
//                 "Регистрация оплаты", ссылки на которые имеются в строках родителя, и
//                 суммы платежного документа. Если документы "Регистрация оплаты" в строка
//                 родителя не указаны, то значение - "Ложь".
//  ПриЗаполненииТаблицы - булево - указывает, что процедура вызывается при первоначальном
//                 заполнении табличных частей обработки.
//
Процедура ПроверкаНаОшибки(ИдентификаторСтроки, ПриЗаполненииТаблицы = Ложь)
	
	ТекВетка = ДеревоПлатежныхДокументовСОшибками.НайтиПоИдентификатору(ИдентификаторСтроки);
	
	Если НЕ ТекВетка.ПолучитьРодителя() = Неопределено Тогда
		
		// Если найдены какие-либо ошибки, записываем информацию о них в строку описания ошибки.
		ОписаниеОшибки = "";
		
		Готовность = 1;
		
		Если НЕ ЗначениеЗаполнено(ТекВетка.Контрагент) Тогда
			ОписаниеОшибки = ОписаниеОшибки + "Не указан лицевой счет";
			Готовность = 0;
		ИначеЕсли НЕ ТекВетка.КонтрагентСовпадает Тогда
			ОписаниеОшибки = ОписаниеОшибки + ?(ОписаниеОшибки = "", "", "; ") + "Лицевой счет не соответствует контрагенту";
			// Если сумма равна нулю, то переносить можно.
			Готовность = ?(ТекВетка.Сумма = 0, 1, 0);
		ИначеЕсли НЕ ТекВетка.ДоговорСовпадает Тогда
			// Прямой ошибкой не является, позволяет занести ветку в строку без ошибок.
			ОписаниеОшибки = ОписаниеОшибки + ?(ОписаниеОшибки = "", "", "; ") + "Лицевой счет не соответствует договору контрагента";
			// Готовность = 0;
		КонецЕсли;
		
		Если ТекВетка.Сумма = 0 И НЕ (ТекВетка.ЕстьРО И Не ТекВетка.ПолучитьРодителя() = Неопределено И ТекВетка.ПолучитьРодителя().СуммыСовпадают) Тогда
			ОписаниеОшибки = ОписаниеОшибки + ?(ОписаниеОшибки = "", "", "; ") + "Не указана сумма";
			Готовность = 0;
			
			Если ТекВетка.ДоговорСовпадает Тогда
				ТекВетка.ПолучитьРодителя().Готовность = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ТекВетка.ПолучитьРодителя() = Неопределено И НЕ ТекВетка.ПолучитьРодителя().СуммыСовпадают Тогда
			ОписаниеОшибки = ОписаниеОшибки + ?(ОписаниеОшибки = "", "", "; ") + "Сумма оплат не совпадает с суммой платежного документа";
			Готовность = 0;
		КонецЕсли;
		
		ТекВетка.Готовность = Готовность;
		Если ПриЗаполненииТаблицы Тогда
			ТекВетка.Пометка = ?(ТекВетка.ЕстьРО, Истина, НЕ ТекВетка.Сумма = 0);
		КонецЕсли;
		
		ТекВетка.ОписаниеОшибок = ОписаниеОшибки;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверкаНаОшибки()

&НаСервере
// Процедура заполняет дерево платежных документов.
Процедура ЗаполнитьДокументы()
	
	// ТаблицаПлатежей = Новый ТаблицаЗначений;
	
	Если СформироватьТаблицуПлатежей() Тогда
		
		// Очистим строки деревьев перед заполнением.
		ДеревоПлатежныхДокументовСОшибками.ПолучитьЭлементы().Очистить();
		ДеревоПлатежныхДокументовБезОшибок.ПолучитьЭлементы().Очистить();
		
		ПервыйОбходРезультата = Истина;
		
		Для Каждого ТекЗначение Из ТаблицаПлатежей Цикл
			
			Если ПервыйОбходРезультата Тогда
				
				ТекущийКонтрагент = ТекЗначение.Контрагент;
				ТекущийДокумент   = ТекЗначение.Документ;
				ТекущийДоговор    = ТекЗначение.Договор;
				
				ВеткаКонтрагент            = ДеревоПлатежныхДокументовСОшибками.ПолучитьЭлементы().Добавить();
				ВеткаКонтрагент.Контрагент = ТекЗначение.Контрагент;
				ВеткаКонтрагент.Договор    = ТекЗначение.Договор;
				ВеткаКонтрагент.Сумма      = ТекЗначение.СуммаДокумента;
				ВеткаКонтрагент.Номер      = ТекЗначение.Номер;
				ВеткаКонтрагент.Дата       = ТекЗначение.Дата;
				ВеткаКонтрагент.НазначениеПлатежа = ТекЗначение.НазначениеПлатежа;
				ВеткаКонтрагент.Документ          = ТекЗначение.Документ;
				ВеткаКонтрагент.СуммыСовпадают    = ТекЗначение.СуммыСовпадают;
				ВеткаКонтрагент.ЕстьРО            = ТекЗначение.ЕстьРО;
				ВеткаКонтрагент.СуммаРО           = ТекЗначение.СуммаРО;
				
				ВеткаЛС            = ВеткаКонтрагент.ПолучитьЭлементы().Добавить();
				ВеткаЛС.Пометка    = Истина;
				ВеткаЛС.Контрагент = ТекЗначение.ЛицевойСчет;
				ВеткаЛС.Документ   = ТекЗначение.ДокументРО;
				ВеткаЛС.Дата       = ТекЗначение.ДатаРО;
				ВеткаЛС.Номер      = ?(ЗначениеЗаполнено(ТекЗначение.ДокументРО), ТекЗначение.ДокументРО.Номер, Неопределено);
				ВеткаЛС.Сумма      = ?(ТекЗначение.ЕстьРО, ТекЗначение.СуммаОплаты, ТекЗначение.СуммаДокумента);
				ВеткаЛС.ЕстьРО     = ЗначениеЗаполнено(ТекЗначение.ДокументРО);
				ВеткаЛС.КонтрагентСовпадает = ТекЗначение.КонтрагентСовпадает;
				ВеткаЛС.ДоговорСовпадает    = ТекЗначение.ДоговорСовпадает;
				ВеткаЛС.ВариантРаспределенияОплатКапРемонт        = ТекЗначение.ВариантРаспределенияОплатКапРемонт;
				ВеткаЛС.ВозможностьВыбораРаспределенияНаКапРемонт = ТекЗначение.ВозможностьВыбораРаспределенияНаКапРемонт;
				ВеткаЛС.НеРаспределятьОплатуНаДобровольноеСтрахование = ТекЗначение.НеРаспределятьОплатуНаДобровольноеСтрахование;
				
				ПервыйОбходРезультата = Ложь;
				Продолжить;
			КонецЕсли;
			
			Если ТекЗначение.Контрагент = ТекущийКонтрагент 
			   И ТекЗначение.Документ   = ТекущийДокумент 
			   И ТекЗначение.Договор = ТекущийДоговор Тогда
			   
				ВеткаЛС            = ВеткаКонтрагент.ПолучитьЭлементы().Добавить();
				ВеткаЛС.Пометка    = Истина;
				ВеткаЛС.Контрагент = ТекЗначение.ЛицевойСчет;
				ВеткаЛС.Документ   = ТекЗначение.ДокументРО;
				ВеткаЛС.Дата       = ТекЗначение.ДатаРО;
				ВеткаЛС.Номер      = ?(ЗначениеЗаполнено(ТекЗначение.ДокументРО), ТекЗначение.ДокументРО.Номер, Неопределено);
				ВеткаЛС.Сумма      = ?(ТекЗначение.ЕстьРО, ТекЗначение.СуммаОплаты, 0);
				ВеткаЛС.ЕстьРО     = ЗначениеЗаполнено(ТекЗначение.ДокументРО);
				ВеткаЛС.КонтрагентСовпадает = ТекЗначение.КонтрагентСовпадает;
				ВеткаЛС.ДоговорСовпадает    = ТекЗначение.ДоговорСовпадает;
				ВеткаЛС.ВариантРаспределенияОплатКапРемонт        = ТекЗначение.ВариантРаспределенияОплатКапРемонт;
				ВеткаЛС.ВозможностьВыбораРаспределенияНаКапРемонт = ТекЗначение.ВозможностьВыбораРаспределенияНаКапРемонт;
				ВеткаЛС.НеРаспределятьОплатуНаДобровольноеСтрахование = ТекЗначение.НеРаспределятьОплатуНаДобровольноеСтрахование;
				
			Иначе
				// Если данные шапки строки не совпадают, то создадим новую строку и заполним ее шапку.
				ВеткаКонтрагент            = ДеревоПлатежныхДокументовСОшибками.ПолучитьЭлементы().Добавить();
				ВеткаКонтрагент.Контрагент = ТекЗначение.Контрагент;
				ВеткаКонтрагент.Договор    = ТекЗначение.Договор;
				ВеткаКонтрагент.Сумма      = ТекЗначение.СуммаДокумента;
				ВеткаКонтрагент.Номер      = ТекЗначение.Номер;
				ВеткаКонтрагент.Дата       = ТекЗначение.Дата;
				ВеткаКонтрагент.НазначениеПлатежа = ТекЗначение.НазначениеПлатежа;
				ВеткаКонтрагент.Документ          = ТекЗначение.Документ;
				ВеткаКонтрагент.СуммыСовпадают    = ТекЗначение.СуммыСовпадают;
				ВеткаКонтрагент.ЕстьРО            = ТекЗначение.ЕстьРО;
				ВеткаКонтрагент.СуммаРО           = ТекЗначение.СуммаРО;
				
				ВеткаЛС            = ВеткаКонтрагент.ПолучитьЭлементы().Добавить();
				ВеткаЛС.Пометка    = Истина;
				ВеткаЛС.Контрагент = ТекЗначение.ЛицевойСчет;
				ВеткаЛС.Документ   = ТекЗначение.ДокументРО;
				ВеткаЛС.Дата       = ТекЗначение.ДатаРО;
				ВеткаЛС.Номер      = ?(ЗначениеЗаполнено(ТекЗначение.ДокументРО), ТекЗначение.ДокументРО.Номер, Неопределено);
				ВеткаЛС.Сумма      = ?(ТекЗначение.ЕстьРО, ТекЗначение.СуммаОплаты, ТекЗначение.СуммаДокумента);
				ВеткаЛС.ЕстьРО     = ЗначениеЗаполнено(ТекЗначение.ДокументРО);
				ВеткаЛС.КонтрагентСовпадает = ТекЗначение.КонтрагентСовпадает;
				ВеткаЛС.ДоговорСовпадает    = ТекЗначение.ДоговорСовпадает;
				ВеткаЛС.ВариантРаспределенияОплатКапРемонт        = ТекЗначение.ВариантРаспределенияОплатКапРемонт;
				ВеткаЛС.ВозможностьВыбораРаспределенияНаКапРемонт = ТекЗначение.ВозможностьВыбораРаспределенияНаКапРемонт;
				ВеткаЛС.НеРаспределятьОплатуНаДобровольноеСтрахование = ТекЗначение.НеРаспределятьОплатуНаДобровольноеСтрахование;
				
			КонецЕсли;
			
			ТекущийКонтрагент = ТекЗначение.Контрагент;
			ТекущийДокумент   = ТекЗначение.Документ;
			ТекущийДоговор    = ТекЗначение.Договор;
			
		КонецЦикла;
		
		ПроверкаНаОшибкиПолная(Истина);
		ПроверитьИОбновитьИнфСтроку(Истина);
		
	КонецЕсли;
	
КонецПроцедуры  //ЗаполнитьДеревоПлатежей()

&НаСервере
// Выполняет заполнение данных на сервере.
Процедура ЗаполнитьДанныеНаСервере()
	
	ОпределениеСоответствияКонтрагентовИЛицевыхСчетов();
	КоманднаяПанельПлатежныеДокументыОбновить();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Нажатие" кнопки Заполнить.
Процедура ЗаполнитьДанныеНаКлиенте()
	
	Если ДеревоПлатежныхДокументовБезОшибок.ПолучитьЭлементы().Количество() > 0
		ИЛИ ДеревоПлатежныхДокументовСОшибками.ПолучитьЭлементы().Количество() > 0 Тогда
		
		ПоказатьВопрос(	Новый ОписаниеОповещения("ОбработатьРезультатВопросаЗаполнитьДанныеНаКлиенте", ЭтаФорма),
						"Перед заполнением поля будут очищены. Продолжить?",
						РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеНаКлиентеПродожение();
	
КонецПроцедуры // ЗаполнитьДанныеНаКлиенте()

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "ЗаполнитьДанныеНаКлиенте()".
Процедура ОбработатьРезультатВопросаЗаполнитьДанныеНаКлиенте(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЗаполнитьДанныеНаКлиентеПродожение();
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаЗаполнитьДанныеНаКлиенте()

&НаКлиенте
// Продолжение процедуры "ЗаполнитьДанныеНаКлиенте()".
Процедура ЗаполнитьДанныеНаКлиентеПродожение()
	
	ДеревоПлатежныхДокументовБезОшибок.ПолучитьЭлементы().Очистить();
	ДеревоПлатежныхДокументовСОшибками.ПолучитьЭлементы().Очистить();
	
	// Проверим, установлены ли виды документов для получения данных.
	
	ЗагружатьПКО = Ложь;
	СтрокиНастройки = Объект.НастройкаЗаполнения.НайтиСтроки(Новый Структура("Документ", мТаблицаПлатежныхДокументов[0].Документ));
	Если СтрокиНастройки.Количество() > 0 Тогда
		ЗагружатьПКО = СтрокиНастройки[0].Пометка;
	КонецЕсли;
	
	ЗагружатьПлатПоручения = Ложь;
	СтрокиНастройки = Объект.НастройкаЗаполнения.НайтиСтроки(Новый Структура("Документ", мТаблицаПлатежныхДокументов[1].Документ));
	Если СтрокиНастройки.Количество() > 0 Тогда
		ЗагружатьПлатПоручения = СтрокиНастройки[0].Пометка;
	КонецЕсли;
	
	ЗагружатьОПК = Ложь;
	СтрокиНастройки = Объект.НастройкаЗаполнения.НайтиСтроки(Новый Структура("Документ", мТаблицаПлатежныхДокументов[2].Документ));
	Если СтрокиНастройки.Количество() > 0 Тогда
		ЗагружатьОПК = СтрокиНастройки[0].Пометка;
	КонецЕсли;
	
	Если НЕ ЗагружатьПлатПоручения И НЕ ЗагружатьПКО И НЕ ЗагружатьОПК Тогда
		ПоказатьПредупреждение(Неопределено, "Необходимо отметить хотя бы один из видов платежных документов.");
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДанныеНаСервере();
	
	Для Каждого ТекВетка Из ДеревоПлатежныхДокументовСОшибками.ПолучитьЭлементы() Цикл
		Элементы.ДеревоПлатежныхДокументовСОшибками.Развернуть(ТекВетка.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьДанныеНаКлиентеПродожение()

&НаСервереБезКонтекста
// Процедура устанавливает контрагента на лицевой счет.
Процедура УстановитьКонтрагентаНаЛицевойСчет(ЛицевойСчет, ТекКонтрагент)
	
	СправочникОбъект = ЛицевойСчет.ПолучитьОбъект();
	СправочникОбъект.Контрагент = ТекКонтрагент;
	КВП_ЗаписатьОбъект(СправочникОбъект);
	
КонецПроцедуры

&НаСервере
// Добавляет строки при неоднозначном соответствии контрагента и договора лицевому счету.
Процедура ДобавлениеЛСПриНеоднозначномСоответствии(ИдентификаторВеткаКонтрагент, СписокЛС)
	
	ВеткаКонтрагент = ДеревоПлатежныхДокументовСОшибками.НайтиПоИдентификатору(ИдентификаторВеткаКонтрагент);
	
	// Поиск соответстветствующих контрагенту и договору л/с.
	ТаблицаЛСКонтрагента = ПолучитьСоответствиеПоКонтрагенту(ВеткаКонтрагент.Контрагент, ТаблицаЛС.Выгрузить());
	ТаблицаЛСКонтрагента.Свернуть("ЛицевойСчет");
	
	Если ТаблицаЛСКонтрагента.Количество() > 1 Тогда
		
		СтруктураОтбораДоговора = Новый Структура("Контрагент, Договор, ЛицевойСчет");
		СтруктураОтбораДоговора.Контрагент = ВеткаКонтрагент.Контрагент;
		СтруктураОтбораДоговора.Договор    = ВеткаКонтрагент.Договор;
		
		Для каждого Стр Из ТаблицаЛСКонтрагента Цикл
			Если НЕ СписокЛС.Найти(Стр.ЛицевойСчет) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураОтбораДоговора.ЛицевойСчет = Стр.ЛицевойСчет;
			СтрокиОтбораДоговора = ТаблицаЛС.НайтиСтроки(СтруктураОтбораДоговора);
			
			ВеткаЛС            = ВеткаКонтрагент.ПолучитьЭлементы().Добавить();
			ВеткаЛС.Пометка    = Ложь;
			ВеткаЛС.Контрагент = Стр.ЛицевойСчет;
			ВеткаЛС.Сумма      = 0;
			ВеткаЛС.ЕстьРО     = Ложь;
			ВеткаЛС.КонтрагентСовпадает = Истина;
			ВеткаЛС.ДоговорСовпадает    = ?(СтрокиОтбораДоговора.Количество() = 0, Ложь, Истина);
			
			ПроверкаНаОшибки(ВеткаЛС.ПолучитьИдентификатор());
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ДобавлениеЛСПриНеоднозначномСоответствии()

&НаСервере
// Процедура формирования документов на сервере.
Функция СформироватьДокументыНаСервере(ПерезаполнитьЗаписиКУДиР, ПараметрыФормирования);
	
	НастройкиУчетнойПолитикиЖКХ           = ПараметрыФормирования.НастройкиУчетнойПолитикиЖКХ;
	ФормироватьТаблицуПлатежныхДокументов = ПараметрыФормирования.ФормироватьТаблицуПлатежныхДокументов;
	
	// Если отражается оплата услуг по кап. ремонту, то счет расчетов с контрагентом по услугам КР
	// может быть задан в учетной политике. Если счет для услуг КР задан, то нужно предложить пользователю
	// установить его в текущих платежных документах. Для этого задаем вопрос пользователю.
	Если ПараметрыФормирования.Свойство("УстановитьСпецСчетРасчетовПоКапремонту")
	   И ПараметрыФормирования.УстановитьСпецСчетРасчетовПоКапремонту
	   И ПараметрыФормирования.Свойство("МассивПлатежныхДокументовСОплатамиКапремонта")
	   И ТипЗнч(ПараметрыФормирования.МассивПлатежныхДокументовСОплатамиКапремонта) = Тип("Массив") Тогда
		
		// Если пользователь подтвердил замену счета, пытаемся заменить счета в платежных документах.
		Для Каждого ТекДокумент Из ПараметрыФормирования.МассивПлатежныхДокументовСОплатамиКапремонта Цикл
			
			// Получим документ.
			ДокументОбъект = ТекДокумент.ПолучитьОбъект();
			
			// Определим признак необходимости записи документа.
			ЕстьИзменения = Ложь;
			
			// Заменим счет расчетов в шапке.
			Если ЗначениеЗаполнено(ДокументОбъект.СчетУчетаРасчетовСКонтрагентом)
			   И Не ДокументОбъект.СчетУчетаРасчетовСКонтрагентом = ПараметрыФормирования.СчетУчетаВзаиморасчетовПоКапремонту Тогда
				ДокументОбъект.СчетУчетаРасчетовСКонтрагентом = ПараметрыФормирования.СчетУчетаВзаиморасчетовПоКапремонту;
				ЕстьИзменения = Истина;
			КонецЕсли;
			
			// Заменим счет расчетов в расшифровке.
			Для Каждого ТекСтрокаРасшифровки Из ДокументОбъект.РасшифровкаПлатежа Цикл
				
				Если ЗначениеЗаполнено(ТекСтрокаРасшифровки.СчетУчетаРасчетовСКонтрагентом)
				   И Не ТекСтрокаРасшифровки.СчетУчетаРасчетовСКонтрагентом = ПараметрыФормирования.СчетУчетаВзаиморасчетовПоКапремонту Тогда
					ТекСтрокаРасшифровки.СчетУчетаРасчетовСКонтрагентом = ПараметрыФормирования.СчетУчетаВзаиморасчетовПоКапремонту;
					ЕстьИзменения = Истина;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТекСтрокаРасшифровки.СчетУчетаРасчетовПоАвансам)
				   И Не ТекСтрокаРасшифровки.СчетУчетаРасчетовПоАвансам = ПараметрыФормирования.СчетУчетаВзаиморасчетовПоКапремонту Тогда
					ТекСтрокаРасшифровки.СчетУчетаРасчетовПоАвансам     = ПараметрыФормирования.СчетУчетаВзаиморасчетовПоКапремонту;
					ЕстьИзменения = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
			// Если в документ внесены изменения, запишем его.
			Если ЕстьИзменения Тогда
				
				РежимЗаписи = Неопределено;
				Если ДокументОбъект.Проведен Тогда
					РежимЗаписи = РежимЗаписиДокумента.Проведение;
				КонецЕсли;
				
				КВП_ЗаписатьОбъект(ДокументОбъект, РежимЗаписи);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	МассивСтрокСформированныхДокументов = Новый Массив;
	
	Если ФормироватьТаблицуПлатежныхДокументов Тогда
		// Таблица для хранение ссылок на документы ПКО, ПнРС и ОПК. Используется для
		// обновления отражения в КУДиР.
		ТаблицаПлатежныхДокументов = Новый ТаблицаЗначений;
		ТаблицаПлатежныхДокументов.Колонки.Добавить("Документ");
		ТаблицаПлатежныхДокументов.Колонки.Добавить("Обработан"); // Флаг, требуется для однократного проведения документа.
	КонецЕсли;
	
	// Таблица для хранения информации, содержащейся в ветках дерева без ошибок,
	// для которых не найден документ "Регистрация оплаты".
	ТаблицаБезРО = Новый ТаблицаЗначений;
	ТаблицаБезРО.Колонки.Добавить("Дата");
	ТаблицаБезРО.Колонки.Добавить("Контрагент");
	ТаблицаБезРО.Колонки.Добавить("Документ");
	ТаблицаБезРО.Колонки.Добавить("Дом");
	ТаблицаБезРО.Колонки.Добавить("Сумма");
	ТаблицаБезРО.Колонки.Добавить("ВеткаИсточник");
	ТаблицаБезРО.Колонки.Добавить("ВидОперации");
	ТаблицаБезРО.Колонки.Добавить("ВариантРаспределенияОплатКапРемонт");
	ТаблицаБезРО.Колонки.Добавить("НеРаспределятьОплатуНаДобровольноеСтрахование");
	ТаблицаБезРО.Колонки.Добавить("ВидОплаты");
	
	// Таблица для хранения информации, содержащейся в ветках дерева без ошибок,
	// для которых документ "Регистрация оплаты" найден.
	МассивПД = Новый Массив;
	МассивПД.Добавить(Тип("ДокументСсылка.ПриходныйКассовыйОрдер"));
	МассивПД.Добавить(Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет"));
	МассивПД.Добавить(Тип("ДокументСсылка.ОплатаПлатежнойКартой"));
	
	ТаблицаРО = Новый ТаблицаЗначений;
	ТаблицаРО.Колонки.Добавить("ЛицевойСчет", Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
	ТаблицаРО.Колонки.Добавить("ДокументПД",  Новый ОписаниеТипов(МассивПД));
	ТаблицаРО.Колонки.Добавить("ДокументРО",  Новый ОписаниеТипов("ДокументСсылка.КВП_РегистрацияОплаты"));
	ТаблицаРО.Колонки.Добавить("СуммаРО");
	ТаблицаРО.Колонки.Добавить("ВеткаИсточник");
	
	// Для проверки на отсутствие помеченных строк в таблице "Без ошибок".
	НетПомеченных = Истина;
	
	// Переменные для вывода информационной строки.
	ИнфСтрокаРО    = "";
	ИнфСтрокаБезРО = "";
	
	КоличествоСформированныхДокументов  = 0;
	КоличествоПерезаполненныхДокументов = 0;
	СуммаСформированныхДокументов       = 0;
	СуммаПерезаполненныхДокументов      = 0;
	
	// Заполнение таблиц.
	Для каждого ТекВетка из ДеревоПлатежныхДокументовБезОшибок.ПолучитьЭлементы() Цикл
		
		// Проверка сумм. Если сумма помеченных строк не совпадает с суммой ветки,
		// то не формировать.
		СуммаПомеченных = 0;
		Для каждого ТекСтрока из ТекВетка.ПолучитьЭлементы() Цикл
			Если ТекСтрока.Пометка Тогда
				СуммаПомеченных = СуммаПомеченных + ТекСтрока.Сумма;
			КонецЕсли;
		КонецЦикла;
		
		Если СуммаПомеченных = ТекВетка.Сумма Тогда
			
			// Хотя бы 1 ветка помечена.
			НетПомеченных = Ложь;
			
			ТекДата = ТекВетка.Дата;
			
			Для каждого ТекСтрока из ТекВетка.ПолучитьЭлементы() Цикл
				
				Если ТекСтрока.Пометка Тогда
					Если ЗначениеЗаполнено(ТекСтрока.Документ) Тогда
						НоваяСтрока = ТаблицаРО.Добавить();
						НоваяСтрока.ЛицевойСчет   = ТекСтрока.Контрагент;
						НоваяСтрока.ДокументПД    = ТекВетка.Документ;
						НоваяСтрока.ДокументРО    = ТекСтрока.Документ;
						НоваяСтрока.СуммаРО       = ТекСтрока.Сумма;
						НоваяСтрока.ВеткаИсточник = ТекСтрока;
					ИначеЕсли НЕ ТекСтрока.Сумма = 0 Тогда
						НоваяСтрока               = ТаблицаБезРО.Добавить();
						НоваяСтрока.Дата          = ТекДата;
						НоваяСтрока.Документ      = ТекВетка.Документ;
						НоваяСтрока.Сумма         = ТекСтрока.Сумма;
						НоваяСтрока.Контрагент    = ТекСтрока.Контрагент;
						НоваяСтрока.Дом           = ТекСтрока.Контрагент.Адрес.Владелец;
						НоваяСтрока.ВеткаИсточник = ТекСтрока;
						Если ТипЗнч(ТекВетка.Документ) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Тогда
							НоваяСтрока.ВидОперации = Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеНаБанковскийСчет;
						ИначеЕсли ТипЗнч(ТекВетка.Документ) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
							НоваяСтрока.ВидОперации = Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеВКассу;
						Иначе
							НоваяСтрока.ВидОперации = Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеСПлатежнойКарты;
							НоваяСтрока.ВидОплаты   = ТекВетка.Документ.ВидОплаты;
						КонецЕсли;
						НоваяСтрока.ВариантРаспределенияОплатКапРемонт = ТекСтрока.ВариантРаспределенияОплатКапРемонт;
						НоваяСтрока.НеРаспределятьОплатуНаДобровольноеСтрахование = ТекСтрока.НеРаспределятьОплатуНаДобровольноеСтрахование;
						// Если требуется обновить КУДиР, то добавляем документ в таблицу.
						Если ПерезаполнитьЗаписиКУДиР Тогда
							НоваяСтрока = ТаблицаПлатежныхДокументов.Добавить();
							НоваяСтрока.Документ  = ТекВетка.Документ;
							НоваяСтрока.Обработан = Ложь;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Если ни одной строки не выбрано - оповещаем об этом.
	Если НетПомеченных Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не выбраны строки для формирования документов оплат.");
	КонецЕсли;
	
	// Дополняем таблицу РО удаленными л/с.
	ДополнитьТаблицуРО(ТаблицаРО);
	
	// Группируем таблицу платежных документов.
	Если ПерезаполнитьЗаписиКУДиР Тогда
		ТаблицаПлатежныхДокументов.Свернуть("Документ, Обработан");
	КонецЕсли;
	
	// Обрабатываем имеющиеся документы "Регистрация оплаты".
	Если НЕ ТаблицаРО.Количество() = 0 Тогда
		
		// Получаем дополнительные таблицы из таблицы РО. Требуются для однократного прохода по документам,
		// распределения сумм по строкам тч РО и внесения результата в дерево без ошибок.
		
		// Все документы РО.
		ТаблицаИмеющиесяРО = ТаблицаРО.Скопировать();
		ТаблицаИмеющиесяРО.Свернуть("ДокументРО");
		
		// Таблица РО с информацией о ветке-источнике дерева без ошибок.
		ТаблицаРОПолная = ТаблицаРО.Скопировать();
		ТаблицаРОПолная.Свернуть("ЛицевойСчет, ДокументПД, ДокументРО, ВеткаИсточник", "СуммаРО");
		
		// Таблица РО.
		ТаблицаРО.Свернуть("ЛицевойСчет, ДокументПД, ДокументРО", "СуммаРО");
		
		// Структуры для отбора.
		ОтборПоРО       = Новый Структура("ДокументРО");
		СтруктураОтбора = Новый Структура("ЛицевойСчет, ДокументПД, ДокументРО");
		
		// Обработка РО.
		Для каждого ТекРО из ТаблицаИмеющиесяРО Цикл
			
			ДокументОбъект = ТекРО.ДокументРО.ПолучитьОбъект();
			
			Если Не ДокументОбъект = Неопределено Тогда
				ТаблицаОплат   = ДокументОбъект.ЛицевыеСчета.Выгрузить();
			Иначе
				ДокументИзменен = Ложь;
				Продолжить;
			КонецЕсли;
			
			ОтборПоРО.ДокументРО = ТекРО.ДокументРО;
			СтрокиРО             = ТаблицаРО.НайтиСтроки(ОтборПоРО);
			СтруктураОтбора.ДокументРО = ТекРО.ДокументРО;
			
			// Переменная, указывающая, нужно ли проводить документ.
			ДокументИзменен = Ложь;
			
			// Проверяем и перезаполняем все строки РО.
			Для каждого ТекСтрока из СтрокиРО Цикл
				// Если суммы по л/с в таблице и базе совпадают, ничего не делаем.
				Если ТекСтрока.СуммаРО = ПроверитьСуммуРОДляЛС(ТекСтрока.ДокументРО, ТекСтрока.ДокументПД, ТекСтрока.ЛицевойСчет, ТаблицаОплат) Тогда
					Продолжить;
				КонецЕсли;
				
				СтруктураОтбора.ЛицевойСчет = ТекСтрока.ЛицевойСчет;
				СтруктураОтбора.ДокументПД  = ТекСтрока.ДокументПД;
				СтрокиОтбора = ТаблицаРОПолная.НайтиСтроки(СтруктураОтбора);
				
				ПерезаполнитьСуммуДокументаРО(ДокументОбъект, ТекСтрока.ДокументПД, ТекСтрока.ЛицевойСчет, ТекСтрока.СуммаРО, СтрокиОтбора, ТаблицаОплат);
				ДокументИзменен = Истина;
				
			КонецЦикла;
			
			// Проводим документ если нужно.
			Если ДокументИзменен Тогда
				Попытка
					ДокументОбъект.ЛицевыеСчета.Очистить();
					ДокументОбъект.Заполнить(Новый Структура("ТаблицаОплат", ТаблицаОплат));
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Изменены суммы платежей в документе """ + ТекРО.ДокументРО + """");
					
					КоличествоПерезаполненныхДокументов = КоличествоПерезаполненныхДокументов + 1;
					СуммаПерезаполненныхДокументов      = СуммаПерезаполненныхДокументов + ДокументОбъект.СуммаДокумента;
				Исключение
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось изменить суммы платежей в документе """ + ТекРО.ДокументРО + """");
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Формируем новые документы "Регистрация оплаты".
	Если НЕ ТаблицаБезРО.Количество() = 0 Тогда
		
		// Группируем данные.
		ГруппировкаПлатежей = ТаблицаБезРО.Скопировать();
		ГруппировкаПлатежей.Свернуть("Дата, Дом, ВидОперации, ВариантРаспределенияОплатКапРемонт, НеРаспределятьОплатуНаДобровольноеСтрахование, ВидОплаты");
		
		СтруктураОтбора = Новый Структура("Дата, Дом, ВидОперации, ВариантРаспределенияОплатКапРемонт, НеРаспределятьОплатуНаДобровольноеСтрахование, ВидОплаты");
		
		// Для каждой полученной группировки формируем РО.
		Для каждого ТекГруппировка из ГруппировкаПлатежей Цикл
			
			// Регистрируем оплату по л/с.
			// Состояние("Формирование документов ""Регистрация оплаты"" по зданию " + ТекГруппировка.Дом + " на дату " + ТекГруппировка.Дата);.
			
			РегистрацияОплаты      = Документы.КВП_РегистрацияОплаты.СоздатьДокумент();
			РегистрацияОплаты.Дата = ТекГруппировка.Дата;
			РегистрацияОплаты.УстановитьВремя(РежимАвтоВремя.Последним);
			
			СтруктураПараметров = Новый Структура();
			СтруктураПараметров.Вставить("Дата",        РегистрацияОплаты.Дата);
			СтруктураПараметров.Вставить("Организация", Объект.Организация);
			СтруктураПараметров.Вставить("ВидОперации", ТекГруппировка.ВидОперации);
			СтруктураПараметров.Вставить("Дом",         ТекГруппировка.Дом);
			СтруктураПараметров.Вставить("ВариантРаспределенияОплатКапРемонт", ТекГруппировка.ВариантРаспределенияОплатКапРемонт);
			СтруктураПараметров.Вставить("НеРаспределятьОплатуНаДобровольноеСтрахование", ТекГруппировка.НеРаспределятьОплатуНаДобровольноеСтрахование);
			СтруктураПараметров.Вставить("Комментарий", "# Документ создан автоматически");
			
			Если Не ТекГруппировка.ВидОплаты = Справочники.ВидыОплатОрганизаций.ПустаяСсылка() Тогда
				СтруктураПараметров.Вставить("ВидОплаты", ТекГруппировка.ВидОплаты);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Объект.ИсточникОплаты) Тогда
				СтруктураПараметров.Вставить("ИсточникОплаты", Объект.ИсточникОплаты);
			КонецЕсли;
			
			// Таблица оплат.
			ТаблицаОплат = Новый ТаблицаЗначений;
			ТаблицаОплат.Колонки.Добавить("Объект");
			ТаблицаОплат.Колонки.Добавить("Сумма");
			ТаблицаОплат.Колонки.Добавить("ДокументОплаты");
			
			// Отбираем данные об оплатах для текущего документа.
			СтруктураОтбора.Дата        = ТекГруппировка.Дата;
			СтруктураОтбора.Дом         = ТекГруппировка.Дом;
			СтруктураОтбора.ВидОперации = ТекГруппировка.ВидОперации;
			СтруктураОтбора.ВидОплаты   = ТекГруппировка.ВидОплаты;
			СтруктураОтбора.ВариантРаспределенияОплатКапРемонт = ТекГруппировка.ВариантРаспределенияОплатКапРемонт;
			СтруктураОтбора.НеРаспределятьОплатуНаДобровольноеСтрахование = ТекГруппировка.НеРаспределятьОплатуНаДобровольноеСтрахование;
			
			СтрокиОтбора = ТаблицаБезРО.НайтиСтроки(СтруктураОтбора);
			
			// Начинаем транзакцию.
			Попытка
				НачатьТранзакцию();
				
				// Для получения ссылки на документ регистрации оплаты сначала записываем его.
				РегистрацияОплаты.Организация                                   = СтруктураПараметров.Организация;
				РегистрацияОплаты.ВариантРаспределенияОплатКапРемонт            = СтруктураПараметров.ВариантРаспределенияОплатКапРемонт;
				РегистрацияОплаты.НеРаспределятьОплатуНаДобровольноеСтрахование = СтруктураПараметров.НеРаспределятьОплатуНаДобровольноеСтрахование;
				РегистрацияОплаты.Записать(РежимЗаписиДокумента.Проведение);
				
				Для Каждого ТекСтрока Из СтрокиОтбора Цикл
					СтрокаОплаты = ТаблицаОплат.Добавить();
					СтрокаОплаты.Объект         = ТекСтрока.Контрагент;
					СтрокаОплаты.Сумма          = ТекСтрока.Сумма;
					СтрокаОплаты.ДокументОплаты = ТекСтрока.Документ;
				КонецЦикла;
				
				СтруктураПараметров.Вставить("ТаблицаОплат", ТаблицаОплат);
				РегистрацияОплаты.Заполнить(СтруктураПараметров);
				
				Для Каждого ТекСтрока Из СтрокиОтбора Цикл
					Если ПерезаполнитьЗаписиКУДиР Тогда
						СтрокаПД = ТаблицаПлатежныхДокументов.Найти(ТекСтрока.Документ, "Документ");
						Если НЕ СтрокаПД.Обработан Тогда
							
							ПлатежныйДокументОбъект = СтрокаПД.Документ.ПолучитьОбъект();
							СтруктураСуммКУДиР = УПЖКХ_НалоговыйУчетУСН.ПолучитьСтруктуруСуммКУДиР(РегистрацияОплаты.Организация, РегистрацияОплаты.Дата, ПлатежныйДокументОбъект, РегистрацияОплаты, , НастройкиУчетнойПолитикиЖКХ, СтрокиОтбора.Найти(ТекСтрока) + 1);
							
							Если НЕ СтруктураСуммКУДиР = Неопределено Тогда
								ПлатежныйДокументОбъект.ДополнительныеСвойства.Вставить("СтруктураСуммКУДиР", СтруктураСуммКУДиР);
								ПлатежныйДокументОбъект.ДополнительныеСвойства.Вставить("ДанныеПоКУДиРПолны", ПлатежныйДокументОбъект.ЭтоНовый());
								ПлатежныйДокументОбъект.ДополнительныеСвойства.Вставить("РегистрацияОплаты",  РегистрацияОплаты);
							КонецЕсли;
							
							Попытка
								ПлатежныйДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
								УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Изменены записи в КУДиР для документа """ + СтрокаПД.Документ + """");
							Исключение
								УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось изменить записи в КУДиР для документа """ + СтрокаПД.Документ + """");
								ВызватьИсключение;
							КонецПопытки;
							
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				// Проводим документ.
				РегистрацияОплаты.Записать(РежимЗаписиДокумента.Проведение);
				
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Сформирован документ """ + РегистрацияОплаты + """");
				
				// Заполняем поля табличной части без ошибок.
				Для каждого ТекСтрока из СтрокиОтбора Цикл
					ТекСтрока.ВеткаИсточник.Документ = РегистрацияОплаты.Ссылка;
					ТекСтрока.ВеткаИсточник.Дата     = РегистрацияОплаты.Ссылка.Дата;
					ТекСтрока.ВеткаИсточник.ЕстьРО   = РегистрацияОплаты.Проведен;
					ТекСтрока.ВеткаИсточник.Номер    = РегистрацияОплаты.Ссылка.Номер;
				КонецЦикла;
				
				// Помечаем платежные документы как обработанные.
				Если ПерезаполнитьЗаписиКУДиР Тогда
					Для каждого ТекСтрока из СтрокиОтбора Цикл
						СтрокаПД = ТаблицаПлатежныхДокументов.Найти(ТекСтрока.Документ, "Документ");
						СтрокаПД.Обработан = Истина;
					КонецЦикла;
				КонецЕсли;
				
				КоличествоСформированныхДокументов = КоличествоСформированныхДокументов + 1;
				СуммаСформированныхДокументов      = СуммаСформированныхДокументов + РегистрацияОплаты.СуммаДокумента;
				
				// Фиксируем транзацию.
				ЗафиксироватьТранзакцию();
				
			Исключение
				// Отменяем транзакцию.
				ОтменитьТранзакцию();
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось сформировать документ """ + РегистрацияОплаты + """");
				ТранзакцияВыполненаУспешно = Ложь;
			КонецПопытки;
			
		КонецЦикла;
	КонецЕсли;
	
	// Снимаем пометки с обработанных веток.
	Для Каждого ТекВетка из ДеревоПлатежныхДокументовБезОшибок.ПолучитьЭлементы() Цикл
		Если ТекВетка.Пометка Тогда
			СуммаВетки = ТекВетка.Сумма;
			СуммаСтрок = 0;
			
			Для каждого ТекСтрока из ТекВетка.ПолучитьЭлементы() Цикл
				Если ЗначениеЗаполнено(ТекСтрока.Документ) ИЛИ ТекСтрока.Сумма = 0 Тогда
					СуммаСтрок = СуммаСтрок + ТекСтрока.Сумма;
				Иначе
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если СуммаВетки = СуммаСтрок Тогда
				УстановитьФлажок(ТекВетка, Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Вывод информационной строки
	Если КоличествоСформированныхДокументов = 0 Тогда
		ИнфСтрокаБезРО = "";
	Иначе
		ИнфСтрокаБезРО = "Сформировано документов оплат " + КоличествоСформированныхДокументов + " на сумму " + Формат(СуммаСформированныхДокументов, "ЧДЦ=2") + ".";
	КонецЕсли;
	
	Если КоличествоПерезаполненныхДокументов = 0 Тогда
		ИнфСтрокаРО = "";
	Иначе
		ИнфСтрокаРО = ?(ИнфСтрокаБезРО = "", "", " ") + "Перезаполнено документов оплат " + КоличествоПерезаполненныхДокументов + " на общую сумму " + Формат(СуммаПерезаполненныхДокументов, "ЧДЦ=2") + ".";
	КонецЕсли;
	
	ИнфСтрока = ИнфСтрокаБезРО + ИнфСтрокаРО;
	
	Если ИнфСтрока = "" Тогда
		ПроверитьИОбновитьИнфСтроку(Истина);
	Иначе
		ИнформационнаяСтрокаЗагрузки = ИнфСтрока;
		ПроверитьИОбновитьИнфСтроку();
	КонецЕсли;
	
	Возврат МассивСтрокСформированныхДокументов;
	
КонецФункции

&НаКлиенте
// Проверяет корректность установленных настроек по учету добровольного страхования в зависимости от установленной настройки 
// распределения оплат на услуги капитального ремонта.
//
Процедура ПроверитьКорректностьНастроекДобровольногоСтрахованияПриИзмененииНастроекОплатыКапитальногоРемонта(ТекущаяСтрока)
	
	Если Не мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет Или Не ВестиУчетНачисленийПоДобровольномуСтрахованию Тогда
		Возврат;
	КонецЕсли;
	
	// Если распределяем оплату только на услуги капитального ремонта, то следует установить флаг "Не распределять оплату на добровольное страхование".
	Если ТекущаяСтрока.ВариантРаспределенияОплатКапРемонт = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиКапРемонт")
	 И Не ТекущаяСтрока.НеРаспределятьОплатуНаДобровольноеСтрахование Тогда
		ТекущаяСтрока.НеРаспределятьОплатуНаДобровольноеСтрахование = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ДЕРЕВЬЯМИ ЗНАЧЕНИЙ

#Область РаботаСДеревомЗначений

&НаКлиенте
// Установить все флажки.
Процедура УстановитьФлажки(ИмяДерева)
	
	Для Каждого ТекВетка Из ЭтотОбъект[ИмяДерева].ПолучитьЭлементы() Цикл
		УстановитьФлажок(ТекВетка, Истина);
	КонецЦикла;
	
	ПроверитьИОбновитьИнфСтроку(Истина);
	
КонецПроцедуры  //УстановитьФлажки()

&НаКлиенте
// Снять все флажки.
Процедура СнятьФлажки(ИмяДерева)
	
	Для Каждого ТекВетка Из ЭтотОбъект[ИмяДерева].ПолучитьЭлементы() Цикл
		УстановитьФлажок(ТекВетка, Ложь);
	КонецЦикла;
	
	ПроверитьИОбновитьИнфСтроку(Истина);
	
КонецПроцедуры  //СнятьФлажки()

////////////////////////////////////////////////////////////////////////////////
// Работа с условным оформлением и дополнительными данными деревья.

&НаСервере
// Процедура заполняет данные для условного оформления в строке.
Процедура ЗаполнитьДанныеДляУсловногоОформления(ТекущаяСтрока, ИмяДерева, ЭтоСтрокаДерева = Ложь)
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЭтоСтрокаДерева Тогда
		
		// Это строка коллекции формы.
		СтрокаДерева = ЭтотОбъект[ИмяДерева].НайтиПоИдентификатору(ТекущаяСтрока);
		Если СтрокаДерева = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
	Иначе
		// Это строка дерева значений.
		СтрокаДерева = ТекущаяСтрока;
		
	КонецЕсли;
	
	ТекущийРодитель = СтрокаДерева.ПолучитьРодителя();
	СтрокиДерева    = СтрокаДерева.ПолучитьЭлементы();
	
	
	СтрокаДерева.Доп_ЧетнаяСтрока          = ((ЭтотОбъект[ИмяДерева].ПолучитьЭлементы().Индекс(СтрокаДерева)%2) = 0);
	СтрокаДерева.Доп_РодительОпределен     = Не (ТекущийРодитель = Неопределено);
	
	Если (СтрокиДерева.Количество() > 0) Тогда
		ЗаполнитьДанныеДляУсловногоОформленияВСтроках(СтрокиДерева, ИмяДерева);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура заполняет данные для условного оформления.
Процедура ЗаполнитьДанныеДляУсловногоОформленияВСтроках(СтрокиДерева, ИмяДерева)
	
	Для Каждого ТекСтрокаДерева Из СтрокиДерева Цикл
		
		ЗаполнитьДанныеДляУсловногоОформления(ТекСтрокаДерева, ИмяДерева, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С НАСТРОЙКАМИ ОТЧЕТА

#Область РаботаСНастройкамиОтчета

&НаСервере
// Сохранение настроек на сервере.
Процедура СохранитьНастройкиНаСервере()
	
	УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("КВП_ФормированиеОплатПоПлатежнымДокументам", "СтрокаНастроек", Объект.НастройкаЗаполнения.Выгрузить());
	
	СтруктураОтбора = Новый Структура;
	
	Для Каждого ПлатежныйДокумент Из мТаблицаПлатежныхДокументов Цикл
		
		СтруктураОтбора.Вставить("Документ", ПлатежныйДокумент.Документ);
		
		УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекСохранить("КВП_ФормированиеОплатПоПлатежнымДокументам",
																		"ВидыОпераций" + СтрЗаменить(ПлатежныйДокумент.Документ, " ", ""),
																		Объект.НастройкаЗаполненияВидовОпераций.Выгрузить(СтруктураОтбора));
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Функция помещает настройки заполнения во временное хранилище.
Функция ПоместитьНастройкиЗаполненияВХранилище()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("НастройкаЗаполнения",              Объект.НастройкаЗаполнения.Выгрузить());
	СтруктураНастроек.Вставить("НастройкаЗаполненияВидовОпераций", Объект.НастройкаЗаполненияВидовОпераций.Выгрузить());
	
	АдресХранилищаНастроек = ПоместитьВоВременноеХранилище(СтруктураНастроек, Новый УникальныйИдентификатор);
	Возврат АдресХранилищаНастроек;
	
КонецФункции

&НаСервере
// Процедура получает настройки заполнения из временного хранилища.
Процедура ПолучитьНастройкиЗаполненияИзХранилища(АдресХранилищаНастроек)
	
	СтруктураНастроек = ПолучитьИзВременногоХранилища(АдресХранилищаНастроек);
	
	Объект.НастройкаЗаполнения.Загрузить(СтруктураНастроек.НастройкаЗаполнения);
	Объект.НастройкаЗаполненияВидовОпераций.Загрузить(СтруктураНастроек.НастройкаЗаполненияВидовОпераций);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнициализацияРеквизитов();
	
	ОпределениеСоответствияКонтрагентовИЛицевыхСчетов();
	
	мСтруктураНастроекКапРемонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Объект.Организация);
	
	НастройкиУчетДобровольногоСтрахования         = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаНачисленийПоДобровольномуСтрахованию();
	ВестиУчетНачисленийПоДобровольномуСтрахованию = НастройкиУчетДобровольногоСтрахования.ВестиУчетНачисленийПоДобровольномуСтрахованию;
	УслугаДобровольногоСтрахования                = НастройкиУчетДобровольногоСтрахования.УслугаДобровольногоСтрахования;
	
	КоманднаяПанельПлатежныеДокументыОбновить();
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
	// Реклама
	ОТР_РекламаКлиентСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец Реклама
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии(Отказ)
	
	ПереключательУчитыватьВсеОплаты = ?(Объект.УчитыватьВсеОплаты, 1, 0);
	
	УправлениеФормой(ЭтаФорма);
	
	Для Каждого ТекВетка Из ДеревоПлатежныхДокументовСОшибками.ПолучитьЭлементы() Цикл
		Элементы.ДеревоПлатежныхДокументовСОшибками.Развернуть(ТекВетка.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередЗакрытием" формы.
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СохранитьНастройкиНаСервере();
	
КонецПроцедуры

#КонецОбласти

/////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриИзменении" поля "Организация".
Процедура ОрганизацияПриИзменении(Элемент)
	
	мСтруктураНастроекКапРемонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Объект.Организация);
	ОпределениеСоответствияКонтрагентовИЛицевыхСчетов();
	ЗаполнитьДанныеНаКлиенте();
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля переключателя "ПереключательУчитыватьВсеОплаты".
Процедура ПереключательУчитыватьВсеОплатыПриИзменении(Элемент)
	
	Если ПереключательУчитыватьВсеОплаты = 1 Тогда
		Объект.УчитыватьВсеОплаты = Истина;
	Иначе
		Объект.УчитыватьВсеОплаты = Ложь;
	КонецЕсли;
	
	ЗаполнитьДанныеНаКлиенте();
	
КонецПроцедуры

#КонецОбласти

/////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ДЕРЕВА ОШИБОК

#Область ОбработчикиСобытийДереваОшибок

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ДеревоПлатежныхДокументовСОшибкамиКонтрагент".
Процедура ДеревоПлатежныхДокументовСОшибкамиКонтрагентПриИзменении(Элемент)
	
	ТекВетка         = Элементы.ДеревоПлатежныхДокументовСОшибками.ТекущиеДанные;
	ТекВеткаРодителя = Элементы.ДеревоПлатежныхДокументовСОшибками.ТекущиеДанные.ПолучитьРодителя();
	
	СтруктураОтбораЛС = Новый Структура("Контрагент, ЛицевойСчет");
	СтруктураОтбораЛС.Контрагент  = ТекВеткаРодителя.Контрагент;
	СтруктураОтбораЛС.ЛицевойСчет = ТекВетка.Контрагент;
	
	СтрокиОтбора = ТаблицаЛС.НайтиСтроки(СтруктураОтбораЛС);
	
	Если СтрокиОтбора.Количество() = 0 Тогда
		ТекВетка.КонтрагентСовпадает = Ложь;
		ТекВетка.ДоговорСовпадает    = Ложь;
	Иначе
		Для Каждого СтрокаТаблицы Из ТаблицаЛС Цикл
			МассивДоговоров = Новый Массив;
			МассивДоговоров.Добавить(СтрокаТаблицы.Договор);
		КонецЦикла;
		ТаблицаДоговоров = ТаблицаЛС.Выгрузить().Скопировать(СтрокиОтбора);
		ТекВетка.КонтрагентСовпадает = Истина;
		ТекВетка.ДоговорСовпадает    = ?(МассивДоговоров.Найти(ТекВеткаРодителя.Договор) = ТекВеткаРодителя.Договор, Истина, Ложь);
	КонецЕсли;
	
	ПроверкаНаОшибкиПолная();
	ПроверитьИОбновитьИнфСтроку(Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ДеревоПлатежныхДокументовСОшибкамиКонтрагент".
Процедура ДеревоПлатежныхДокументовСОшибкамиКонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура;
	ДанныеСтроки = Элементы.ДеревоПлатежныхДокументовСОшибками.ТекущиеДанные;
	
	Если Не ДанныеСтроки = Неопределено Тогда
		СтруктураПараметров.Вставить("ТекущаяСтрока", ДанныеСтроки.Контрагент);
	КонецЕсли;
	
	ФормаВыбора = ПолучитьФорму("Справочник.КВП_ЛицевыеСчета.ФормаВыбора", СтруктураПараметров, Элемент);
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ОбработкаВыбора" поля "ДеревоПлатежныхДокументовСОшибкамиКонтрагент".
Процедура ДеревоПлатежныхДокументовСОшибкамиКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекВетка            = Элементы.ДеревоПлатежныхДокументовСОшибками.ТекущиеДанные.ПолучитьРодителя();
	ТекКонтрагент       = ТекВетка.Контрагент;
	
	// !!! Если для выбранного лицевого счета не установлен контрагент для взаиморасчетов, то далее
	// предлагалось сделать контрагента из ветки дерева таковым. Но сейчас установка сведений для взаиморасчетов выполняется
	// соответствующим документом, а здесь попытка записать контрагента в реквизит "Контрагент" лицевого счета.
	// Такого реквизита у справочника "КВП_ЛицевыеСчета" нет, и появляется конфигураторская ошибка.
	// Поэтому данный кусок кода пока закомментирован.
	
	//ВыбранныйКонтрагент = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету(ВыбранноеЗначение, Объект.Организация, Объект.КонецПериода, "Контрагент");
	//
	//Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.КВП_ЛицевыеСчета")
	//   И НЕ ЗначениеЗаполнено(ВыбранныйКонтрагент) Тогда
	//	
	//	ТекстВопроса = "Установить для лицевого счета в качестве лица для взаиморасчетов контрагента "
	//				 + ТекКонтрагент
	//				 + "?";
	//	ДопПараметры = Новый Структура("ВыбранноеЗначение, ТекКонтрагент, ТекВетка", ВыбранноеЗначение, ТекКонтрагент, ТекВетка);
	//	ПоказатьВопрос(	Новый ОписаниеОповещения("ОбработатьРезультатВопросаУстановитьДляКонтрагентаДляВзаиморасчетов", ЭтаФорма, ДопПараметры),
	//					ТекстВопроса,
	//					РежимДиалогаВопрос.ДаНет);
	//	Возврат;
	//КонецЕсли;
	
	ДеревоПлатежныхДокументовСОшибкамиКонтрагентОбработкаВыбораПродолжение(ТекВетка, ТекКонтрагент, ВыбранноеЗначение);
	
КонецПроцедуры // ДеревоПлатежныхДокументовСОшибкамиКонтрагентОбработкаВыбора()

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "ДеревоПлатежныхДокументовСОшибкамиКонтрагентОбработкаВыбора()".
Процедура ОбработатьРезультатВопросаУстановитьДляКонтрагентаДляВзаиморасчетов(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьКонтрагентаНаЛицевойСчет(ДопПараметры.ВыбранноеЗначение, ДопПараметры.ТекКонтрагент);
	
	ДеревоПлатежныхДокументовСОшибкамиКонтрагентОбработкаВыбораПродолжение(	ДопПараметры.ТекВетка,
																			ДопПараметры.ТекКонтрагент,
																			ДопПараметры.ВыбранноеЗначение);
	
КонецПроцедуры // ОбработатьРезультатВопросаУстановитьДляКонтрагентаДляВзаиморасчетов()

&НаКлиенте
Процедура ДеревоПлатежныхДокументовСОшибкамиКонтрагентОбработкаВыбораПродолжение(ТекущаяВетка, ТекущийКонтрагент, ВыбранныйЛицевойСчет)
	
	// Если в таблице есть еще контрагенты с пустыми л/с, то предлагать заполнить.
	МассивСтрокКонтрагентовБезЛС = Новый Массив;
	
	Для Каждого ВеткаДерева Из ДеревоПлатежныхДокументовСОшибками.ПолучитьЭлементы() Цикл
		
		Если НЕ ВеткаДерева = ТекущаяВетка И ВеткаДерева.Контрагент = ТекущийКонтрагент Тогда
			
			Для Каждого Строка Из ВеткаДерева.ПолучитьЭлементы() Цикл
				
				Если НЕ ЗначениеЗаполнено(Строка.Контрагент) Тогда
					
					МассивСтрокКонтрагентовБезЛС.Добавить(Строка);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивСтрокКонтрагентовБезЛС.Количество() > 0 Тогда
		
		ТекстВопроса = "Установить выбранный лицевой счет для других платежных документов данного контрагента?";
		ДопПараметры = Новый Структура("ВыбранныйЛицевойСчет, МассивСтрокКонтрагентовБезЛС", ВыбранныйЛицевойСчет, МассивСтрокКонтрагентовБезЛС);
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаУстановитьВыбранныйЛСДляДокументовТекКонтрагента", ЭтаФорма, ДопПараметры),
						ТекстВопроса,
						РежимДиалогаВопрос.ДаНет);
		
	КонецЕсли;
	
КонецПроцедуры // ДеревоПлатежныхДокументовСОшибкамиКонтрагентОбработкаВыбораПродолжение()

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "ДеревоПлатежныхДокументовСОшибкамиКонтрагентОбработкаВыбораПродолжение()".
Процедура ОбработатьРезультатВопросаУстановитьВыбранныйЛСДляДокументовТекКонтрагента(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		// заполняем строки, где не заполнены л/с
		Для Каждого Строка Из ДопПараметры.МассивСтрокКонтрагентовБезЛС Цикл
			Строка.Контрагент = ДопПараметры.ВыбранныйЛицевойСчет;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаУстановитьВыбранныйЛСДляДокументовТекКонтрагента()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ДеревоПлатежныхДокументовСОшибкамиСумма".
Процедура ДеревоПлатежныхДокументовСОшибкамиСуммаПриИзменении(Элемент)
	
	ПроверкаНаОшибки(Элементы.ДеревоПлатежныхДокументовСОшибками.ТекущиеДанные.ПолучитьИдентификатор());
	ПроверитьИОбновитьИнфСтроку(Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Выбор" поля "ДеревоПлатежныхДокументовСОшибками".
Процедура ДеревоПлатежныхДокументовСОшибкамиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ДанныеСтроки = ДеревоПлатежныхДокументовСОшибками.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыОбъектов", ЭтаФорма);
	
	Если Элемент.ТекущийЭлемент.Имя = "ДеревоПлатежныхДокументовСОшибкамиКонтрагент"
	   И ДанныеСтроки.ПолучитьРодителя() = Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(ОписаниеОповещения, ДанныеСтроки.Контрагент);
		Возврат;
		
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ДеревоПлатежныхДокументовСОшибкамиДоговор"
	        И ДанныеСтроки.ПолучитьРодителя() = Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(ОписаниеОповещения, ДанныеСтроки.Договор);
		Возврат;
		
	ИначеЕсли ЗначениеЗаполнено(ДанныеСтроки.Документ)
	        И ДанныеСтроки.ПолучитьРодителя() = Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(ОписаниеОповещения, ДанныеСтроки.Документ);
		Возврат;
		
	КонецЕсли;
	
	ДеревоПлатежныхДокументовСОшибкамиВыборПродолжение();
	
КонецПроцедуры // ДеревоПлатежныхДокументовСОшибкамиВыбор()

&НаКлиенте
// Обработчик результата открытия формы объектов, вызваные в процедуре "ДеревоПлатежныхДокументовСОшибкамиВыбор()".
Процедура ОбработатьЗакрытиеФормыОбъектов(Значение) Экспорт
	
	ДеревоПлатежныхДокументовСОшибкамиВыборПродолжение();
	
КонецПроцедуры // ОбработатьЗакрытиеФормыОбъектов()

&НаКлиенте
// Продолжение процедуры "ДеревоПлатежныхДокументовСОшибкамиВыбор()".
Процедура ДеревоПлатежныхДокументовСОшибкамиВыборПродолжение()
	
	ПроверкаНаОшибкиПолная();
	ПроверитьИОбновитьИнфСтроку(Истина);
	
КонецПроцедуры // ДеревоПлатежныхДокументовСОшибкамиВыбор()

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" поля "ДеревоПлатежныхДокументовСОшибками".
Процедура ДеревоПлатежныхДокументовСОшибкамиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередУдалением" поля "ДеревоПлатежныхДокументовСОшибками".
Процедура ДеревоПлатежныхДокументовСОшибкамиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОкончанииРедактирования" поля "ДеревоПлатежныхДокументовСОшибками".
Процедура ДеревоПлатежныхДокументовСОшибкамиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ОтменаРедактирования Тогда
		
		ТекВетка = Элемент.ТекущиеДанные;
		
		ПроверкаСовпаденияСуммПДиРО(ТекВетка);
		
		ПроверкаНаОшибкиПолная();
		ПроверитьИОбновитьИнфСтроку(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ДеревоПлатежныхДокументовСОшибкамиВариантРаспределенияОплатКапРемонт".
Процедура ДеревоПлатежныхДокументовСОшибкамиВариантРаспределенияОплатКапРемонтПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДеревоПлатежныхДокументовСОшибками.ТекущиеДанные;
	
	ПроверитьКорректностьНастроекДобровольногоСтрахованияПриИзмененииНастроекОплатыКапитальногоРемонта(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ДеревоПлатежныхДокументовСОшибкамиНеРаспределятьОплатуНаДобровольноеСтрахование".
Процедура ДеревоПлатежныхДокументовСОшибкамиНеРаспределятьОплатуНаДобровольноеСтрахованиеПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДеревоПлатежныхДокументовСОшибками.ТекущиеДанные;
	
	Если ТекущаяСтрока.ВариантРаспределенияОплатКапРемонт = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиКапРемонт")
	 И Не ТекущаяСтрока.НеРаспределятьОплатуНаДобровольноеСтрахование Тогда
		ТекущаяСтрока.НеРаспределятьОплатуНаДобровольноеСтрахование = Истина;
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Оплата распределяется только на услуги капитального ремонта и не может быть распределена на добровольное страхование.");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

/////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ДЕРЕВА БЕЗ ОШИБОК

#Область ОбработчикиСобытийДереваБезОшибок

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ДеревоПлатежныхДокументовБезОшибокКонтрагент".
Процедура ДеревоПлатежныхДокументовБезОшибокКонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПараметров = Новый Структура;
	ДанныеСтроки = Элементы.ДеревоПлатежныхДокументовБезОшибок.ТекущиеДанные;
	
	Если Не ДанныеСтроки = Неопределено Тогда
		СтруктураПараметров.Вставить("ТекущаяСтрока", ДанныеСтроки.Контрагент);
	КонецЕсли;
	
	ФормаВыбора = ПолучитьФорму("Справочник.КВП_ЛицевыеСчета.ФормаВыбора", СтруктураПараметров, Элемент);
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Выбор" поля "ДеревоПлатежныхДокументовБезОшибок".
Процедура ДеревоПлатежныхДокументовБезОшибокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = ДеревоПлатежныхДокументовБезОшибок.НайтиПоИдентификатору(ВыбраннаяСтрока);
	
	Если Элемент.ТекущийЭлемент.Имя = "ДеревоПлатежныхДокументовБезОшибокКонтрагент" И ДанныеСтроки.ПолучитьРодителя() = Неопределено Тогда
		
		ПоказатьЗначение(Неопределено, ДанныеСтроки.Контрагент);
		
	ИначеЕсли Элемент.ТекущийЭлемент.Имя = "ДеревоПлатежныхДокументовБезОшибокДоговор" И ДанныеСтроки.ПолучитьРодителя() = Неопределено Тогда
		
		ПоказатьЗначение(Неопределено, ДанныеСтроки.Договор);
		
	ИначеЕсли ЗначениеЗаполнено(ДанныеСтроки.Документ)
	       И (ДанныеСтроки.ПолучитьРодителя() = Неопределено
	   ИЛИ НЕ ДанныеСтроки.ПолучитьРодителя() = Неопределено
	       И (Элемент.ТекущийЭлемент.Имя = "ДеревоПлатежныхДокументовБезОшибокНомер" ИЛИ Элемент.ТекущийЭлемент.Имя = "ДеревоПлатежныхДокументовБезОшибокДокумент")) Тогда
		
		ПоказатьЗначение(Неопределено, ДанныеСтроки.Документ);
		
	КонецЕсли;
	
	// Когда ведется раздельный учет услуг кап. ремонта, для ПКО, а также для ПРС в случае, если банковский счет,
	// указанный в документе ПРС, не совпадает с расчетным счетом услуг кап. ремонта организации, даем возможность
	// выбора распределения на кап. ремонт.
	Если Элемент.ТекущийЭлемент.Имя = "ДеревоПлатежныхДокументовБезОшибокВариантРаспределенияОплатКапРемонт"
	   И Не ДанныеСтроки.ПолучитьРодителя() = Неопределено
	   И ДанныеСтроки.ВозможностьВыбораРаспределенияНаКапРемонт Тогда
		
		СтандартнаяОбработка = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередНачаломДобавления" поля "ДеревоПлатежныхДокументовБезОшибок".
Процедура ДеревоПлатежныхДокументовБезОшибокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПередУдалением" поля "ДеревоПлатежныхДокументовБезОшибок".
Процедура ДеревоПлатежныхДокументовБезОшибокПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриОкончанииРедактирования" поля "ДеревоПлатежныхДокументовБезОшибок".
Процедура ДеревоПлатежныхДокументовБезОшибокПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	// Присвоение или снятие пометки для всех строк текущей ветки в зависимости от значения поля "Пометка" текущей строки.
	ТекущаяСтрока  = Элемент.ТекущиеДанные;
	ТекущаяПометка = ТекущаяСтрока.Пометка;
	Родитель       = ТекущаяСтрока.ПолучитьРодителя();
	
	УстановитьФлажок(Родитель, ТекущаяПометка);
	
	ПроверитьИОбновитьИнфСтроку(Истина);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ДеревоПлатежныхДокументовБезОшибокНеРаспределятьОплатуНаДобровольноеСтрахование".
Процедура ДеревоПлатежныхДокументовБезОшибокНеРаспределятьОплатуНаДобровольноеСтрахованиеПриИзменении(Элемент)
	
	ТекущаяСтрока = Элементы.ДеревоПлатежныхДокументовБезОшибок.ТекущиеДанные;
	
	Если ТекущаяСтрока.ВариантРаспределенияОплатКапРемонт = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиКапРемонт")
	 И Не ТекущаяСтрока.НеРаспределятьОплатуНаДобровольноеСтрахование Тогда
		ТекущаяСтрока.НеРаспределятьОплатуНаДобровольноеСтрахование = Истина;
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Оплата распределяется только на услуги капитального ремонта и не может быть распределена на добровольное страхование.");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

/////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиСобытийДереваБезОшибок

&НаКлиенте
// Обработчик команды "КомандаЗаполнить".
Процедура КомандаЗаполнить(Команда)
	
	ЗаполнитьДанныеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "УстановитьФлажкиОшибки".
Процедура УстановитьФлажкиОшибки(Команда)
	
	УстановитьФлажки("ДеревоПлатежныхДокументовСОшибками");
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "СнятьФлажкиОшибки".
Процедура СнятьФлажкиОшибки(Команда)
	
	СнятьФлажки("ДеревоПлатежныхДокументовСОшибками");
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "СвернутьОшибки".
Процедура СвернутьОшибки(Команда)
	
	Для Каждого ТекВетка Из ДеревоПлатежныхДокументовСОшибками.ПолучитьЭлементы() Цикл
		Элементы.ДеревоПлатежныхДокументовСОшибками.Свернуть(ТекВетка.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "РазвернутьОшибки".
Процедура РазвернутьОшибки(Команда)
	
	Для Каждого ТекВетка Из ДеревоПлатежныхДокументовСОшибками.ПолучитьЭлементы() Цикл
		Элементы.ДеревоПлатежныхДокументовСОшибками.Развернуть(ТекВетка.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "ПринятьИзменения".
Процедура ПринятьИзменения(Команда)
	
	//Позолотина ++
	ДеревоПлатежныхДокументовСОшибкамиЭлементы = ДеревоПлатежныхДокументовСОшибками.ПолучитьЭлементы();    //++Петрова
	ТекВеткаИнд = 0; 
	Пока ТекВеткаИнд < ДеревоПлатежныхДокументовСОшибкамиЭлементы.Количество() Цикл
		ДанныеСтроки = ДеревоПлатежныхДокументовСОшибкамиЭлементы[ТекВеткаИнд];
	  Принято = Ложь;

	//ДанныеСтроки = Элементы.ДеревоПлатежныхДокументовСОшибками.ТекущиеДанные;     //--Петрова
	
	Если ДанныеСтроки = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, "Не выбран документ для принятия изменений");
		Возврат;
	ИначеЕсли ДанныеСтроки.ПолучитьРодителя() = Неопределено Тогда
		ТекВетка = ДанныеСтроки;
	Иначе
		ТекВетка = ДанныеСтроки.ПолучитьРодителя();
	КонецЕсли;
	
	// Определяем, можно ли внести ветку в дерево без ошибок.
	Если ТекВетка.СуммыСовпадают Тогда
		РазрешитьСПредупреждением = Истина;
		Для каждого ТекСтрока из ТекВетка.ПолучитьЭлементы() Цикл
			Если ТекСтрока.Пометка И НЕ ЗначениеЗаполнено(ТекСтрока.Контрагент) Тогда
				РазрешитьСПредупреждением = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		РазрешитьСПредупреждением = Ложь;
	КонецЕсли;
	
	// Принимать изменения только без ошибок и если есть выбранные л/с.
	Если ТекВетка.Готовность = 0 Тогда
		Если РазрешитьСПредупреждением Тогда
			ДопПараметры = Новый Структура("ТекВетка", ТекВетка);
			ДопПараметры.ТекВетка.Готовность = 1;	          //++Петрова
			ПринятьИзмененияПродолжение(ДопПараметры.ТекВетка);
			//ПоказатьВопрос(	Новый ОписаниеОповещения("ОбработатьРезультатВопросаИмеютсяОшибки", ЭтаФорма, ДопПараметры),
			//				"В данных для загрузки имеются ошибки. Продолжить?",
			//				РежимДиалогаВопрос.ДаНет);
			Принято = Истина;
			//Возврат;        //--Петрова
		Иначе
			//ПоказатьПредупреждение(Неопределено, "В данных для загрузки имеются ошибки. Проверьте, что лицевые счета     //++Петрова
			//									 |и суммы для документа введены корректно и повторите попытку!");
			//Возврат;
			ТекВеткаИнд = ТекВеткаИнд + 1;
			 Принято = Истина;              //--Петрова
		КонецЕсли;
	КонецЕсли;
	  Если не Принято тогда                //++Петрова

//		КонецЕсли;
//	КонецЕсли;
	
	ПринятьИзмененияПродолжение(ТекВетка);
	КонецЕсли;
КонецЦикла;
//--Позолотина

КонецПроцедуры // ПринятьИзменения()

&НаКлиенте
// Обработка результата вопроса, вызванного в процедуре "ПринятьИзменения()".
Процедура ОбработатьРезультатВопросаИмеютсяОшибки(Ответ, ДопПараметры) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ДопПараметры.ТекВетка.Готовность = 1;
	
	ПринятьИзмененияПродолжение(ДопПараметры.ТекВетка);
	
КонецПроцедуры // ОбработатьРезультатВопросаИмеютсяОшибки()

&НаКлиенте
// Продолжение процедуры "ПринятьИзменения()".
Процедура ПринятьИзмененияПродолжение(ТекВетка)
	
	// если нет галки, то предлагать удалять док-т из списка
	
	МассивДляУдаления = Новый Массив;
	ВеткаКонтрагент = ДеревоПлатежныхДокументовБезОшибок.ПолучитьЭлементы().Добавить();
	
	ВеткаКонтрагент.Пометка    = Истина;
	ВеткаКонтрагент.Контрагент = ТекВетка.Контрагент;
	ВеткаКонтрагент.Сумма      = ТекВетка.Сумма;
	ВеткаКонтрагент.Номер      = ТекВетка.Номер;
	ВеткаКонтрагент.Дата       = ТекВетка.Дата;
	ВеткаКонтрагент.Договор    = ТекВетка.Договор;
	ВеткаКонтрагент.НазначениеПлатежа = ТекВетка.НазначениеПлатежа;
	ВеткаКонтрагент.Документ          = ТекВетка.Документ;
	ВеткаКонтрагент.СуммыСовпадают    = ТекВетка.СуммыСовпадают;
	ВеткаКонтрагент.ЕстьРО            = ТекВетка.ЕстьРО;
	ВеткаКонтрагент.СуммаРО           = ТекВетка.СуммаРО;
	
	Для Каждого ТекСтрока Из ТекВетка.ПолучитьЭлементы() Цикл
		Если ТекСтрока.Пометка Тогда
			ВеткаЛС            = ВеткаКонтрагент.ПолучитьЭлементы().Добавить();
			ВеткаЛС.Пометка    = ТекСтрока.Пометка;
			ВеткаЛС.Контрагент = ТекСтрока.Контрагент;
			ВеткаЛС.Сумма      = ТекСтрока.Сумма;
			ВеткаЛС.Документ   = ТекСтрока.Документ;
			ВеткаЛС.Дата       = ТекСтрока.Дата;
			ВеткаЛС.Номер      = ТекСтрока.Номер;
			ВеткаЛС.ЕстьРО     = ЗначениеЗаполнено(ТекСтрока.Документ);
			ВеткаЛС.КонтрагентСовпадает = ТекСтрока.КонтрагентСовпадает;
			ВеткаЛС.ДоговорСовпадает    = ТекСтрока.ДоговорСовпадает;
			ВеткаЛС.ВариантРаспределенияОплатКапРемонт            = ТекСтрока.ВариантРаспределенияОплатКапРемонт;
			ВеткаЛС.ВозможностьВыбораРаспределенияНаКапРемонт     = ТекСтрока.ВозможностьВыбораРаспределенияНаКапРемонт;
			ВеткаЛС.НеРаспределятьОплатуНаДобровольноеСтрахование = ТекСтрока.НеРаспределятьОплатуНаДобровольноеСтрахование;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьДанныеДляУсловногоОформления(ВеткаКонтрагент.ПолучитьИдентификатор(), "ДеревоПлатежныхДокументовБезОшибок");
	
	МассивДляУдаления.Добавить(ТекВетка);
	
	Для каждого ТекВетка Из МассивДляУдаления Цикл
		ДеревоПлатежныхДокументовСОшибками.ПолучитьЭлементы().Удалить(ТекВетка);
	КонецЦикла;
	
	ПроверитьИОбновитьИнфСтроку(Истина);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры // ПринятьИзмененияПродолжение()

&НаКлиенте
// Обработчик команды "УстановитьФлажкиКЗагрузке".
Процедура УстановитьФлажкиКЗагрузке(Команда)
	
	УстановитьФлажки("ДеревоПлатежныхДокументовБезОшибок");
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "СнятьФлажкиКЗагрузке".
Процедура СнятьФлажкиКЗагрузке(Команда)
	
	СнятьФлажки("ДеревоПлатежныхДокументовБезОшибок");
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "СвернутьКЗагрузке".
Процедура СвернутьКЗагрузке(Команда)
	
	Для Каждого ТекВетка Из ДеревоПлатежныхДокументовБезОшибок.ПолучитьЭлементы() Цикл
		Элементы.ДеревоПлатежныхДокументовБезОшибок.Свернуть(ТекВетка.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "РазвернутьКЗагрузке".
Процедура РазвернутьКЗагрузке(Команда)
	
	Для Каждого ТекВетка Из ДеревоПлатежныхДокументовБезОшибок.ПолучитьЭлементы() Цикл
		Элементы.ДеревоПлатежныхДокументовБезОшибок.Развернуть(ТекВетка.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "НаКорректировку".
Процедура НаКорректировку(Команда)
	
	ДанныеСтроки = Элементы.ДеревоПлатежныхДокументовБезОшибок.ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, "Не выбран документ для корректировки");
		Возврат;
	ИначеЕсли ДанныеСтроки.ПолучитьРодителя() = Неопределено Тогда
		ТекВетка = ДанныеСтроки;
	Иначе
		ТекВетка = ДанныеСтроки.ПолучитьРодителя();
	КонецЕсли;
	
	// Нельзя отправлять на корректировку если уже созданы документы оплаты.
	Для Каждого ТекСтрока Из ТекВетка.ПолучитьЭлементы() Цикл
		Если ЗначениеЗаполнено(ТекСтрока.Документ) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Нельзя корректировать строки со сформированными документами оплаты!");
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	МассивДляУдаления = Новый Массив;
	ВеткаКонтрагент = ДеревоПлатежныхДокументовСОшибками.ПолучитьЭлементы().Добавить();
	
	ВеткаКонтрагент.Контрагент  = ТекВетка.Контрагент;
	ВеткаКонтрагент.Договор     = ТекВетка.Договор;
	ВеткаКонтрагент.Сумма       = ТекВетка.Сумма;
	ВеткаКонтрагент.Номер       = ТекВетка.Номер;
	ВеткаКонтрагент.Дата        = ТекВетка.Дата;
	ВеткаКонтрагент.НазначениеПлатежа = ТекВетка.НазначениеПлатежа;
	ВеткаКонтрагент.Документ          = ТекВетка.Документ;
	ВеткаКонтрагент.СуммыСовпадают    = ТекВетка.СуммыСовпадают;
	ВеткаКонтрагент.Готовность        = 1;
	
	СписокЛС = Новый Массив;
	Для Каждого ТекСтрока Из ТекВетка.ПолучитьЭлементы() Цикл
		ВеткаЛС                = ВеткаКонтрагент.ПолучитьЭлементы().Добавить();
		ВеткаЛС.Пометка        = ТекСтрока.Пометка;
		ВеткаЛС.Контрагент     = ТекСтрока.Контрагент;
		СписокЛС.Добавить(ТекСтрока.Контрагент);
		ВеткаЛС.Сумма               = ТекСтрока.Сумма;
		ВеткаЛС.КонтрагентСовпадает = ТекСтрока.КонтрагентСовпадает;
		ВеткаЛС.ДоговорСовпадает    = ТекСтрока.ДоговорСовпадает;
		ВеткаЛС.Готовность          = 1;
		ВеткаЛС.ВариантРаспределенияОплатКапРемонт        = ТекСтрока.ВариантРаспределенияОплатКапРемонт;
		ВеткаЛС.ВозможностьВыбораРаспределенияНаКапРемонт = ТекСтрока.ВозможностьВыбораРаспределенияНаКапРемонт;
		ВеткаЛС.НеРаспределятьОплатуНаДобровольноеСтрахование = ТекСтрока.НеРаспределятьОплатуНаДобровольноеСтрахование;
	КонецЦикла;
	
	ЗаполнитьДанныеДляУсловногоОформления(ВеткаКонтрагент.ПолучитьИдентификатор(), "ДеревоПлатежныхДокументовСОшибками");
	
	// При корректировке добавляем строки с л/с если есть неоднозначные соответствия.
	ДобавлениеЛСПриНеоднозначномСоответствии(ВеткаКонтрагент.ПолучитьИдентификатор(), СписокЛС);
	
	МассивДляУдаления.Добавить(ТекВетка);

	Для каждого ТекВетка Из МассивДляУдаления Цикл
		ДеревоПлатежныхДокументовБезОшибок.ПолучитьЭлементы().Удалить(ТекВетка);
	КонецЦикла;
	
	ПроверитьИОбновитьИнфСтроку(Истина);
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "Сформировать".
Процедура Сформировать(Команда)
	
	ПараметрыФормирования = Новый Структура;
	ПараметрыФормирования.Вставить("НастройкиУчетнойПолитикиЖКХ", УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Объект.КонецПериода, Объект.Организация));
	
	// Если отражается оплата услуг по кап. ремонту, то счет расчетов с контрагентом по услугам КР
	// может быть задан в учетной политике. Если счет для услуг КР задан, то нужно предложить пользователю
	// установить его в текущих платежных документах. Для этого задаем вопрос пользователю.
	Если мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет Тогда
		
		// Получим настройки отражения капремонта.
		ВариантОтраженияВзаиморасчетовПоКапремонту = ПараметрыФормирования.НастройкиУчетнойПолитикиЖКХ.ВариантОтраженияВзаиморасчетовПоКапремонту;
		СчетУчетаВзаиморасчетовПоКапремонту        = ПараметрыФормирования.НастройкиУчетнойПолитикиЖКХ.СчетУчетаВзаиморасчетовПоКапремонту;
		
		// Если услуги КР отражаются на отдельном счете,
		// подменим счет расчетов в структуре на нужный.
		Если ВариантОтраженияВзаиморасчетовПоКапремонту = ПредопределенноеЗначение("Перечисление.КВП_ВидыСчетовРасчетовСКонтрагентамиПоКапремонту.ОтдельныеСчета") Тогда
			
			// Определим массив платежных документов, которые предположительно нужно обработать.
			МассивПлатежныхДокументовСОплатамиКапремонта = Новый Массив;
			Для Каждого ТекВетка Из ДеревоПлатежныхДокументовБезОшибок.ПолучитьЭлементы() Цикл
				
				// Замену выполняем только в документах, которые оплачивают исключительно услуги капремонта.
				ОплатаТолькоКапремонта = Истина;
				Для Каждого ТекСтрока Из ТекВетка.ПолучитьЭлементы() Цикл
					Если Не ТекСтрока.ВариантРаспределенияОплатКапРемонт = ПредопределенноеЗначение("Перечисление.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиКапРемонт") Тогда
						ОплатаТолькоКапремонта = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если ОплатаТолькоКапремонта Тогда
					Если ТипЗнч(ТекВетка.Документ) = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет") Тогда
						МассивПлатежныхДокументовСОплатамиКапремонта.Добавить(ТекВетка.Документ);
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			// Задаем вопрос пользователю, только если есть документы, подлежащие обработке.
			Если МассивПлатежныхДокументовСОплатамиКапремонта.Количество() > 0 Тогда
				
				// Поместим нужные параметры в структуру параметров.
				ПараметрыФормирования.Вставить("СчетУчетаВзаиморасчетовПоКапремонту",          СчетУчетаВзаиморасчетовПоКапремонту);
				ПараметрыФормирования.Вставить("МассивПлатежныхДокументовСОплатамиКапремонта", МассивПлатежныхДокументовСОплатамиКапремонта);
				
				// Зададим вопрос пользователю.
				ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикОповещенияВопросаУстановкиСчетаКапремонта", ЭтаФорма, ПараметрыФормирования);
				ТекстВопроса = "Организация ведет раздельный учет услуг капремонта." + Символы.ПС + "Установить специальный счет расчетов по услугам капремонта в платежных документах?";
				
				ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ПерейтиКВопросуКУДиРИФормированию(ПараметрыФормирования);
	
КонецПроцедуры // Сформировать()

&НаКлиенте
// Обработчик команды "Настройка".
Процедура Настройка(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ПоказатьПредупреждение(Неопределено, "Не указана организация.");
		Возврат;
	КонецЕсли;
	
	АдресХранилищаНастроек = ПоместитьНастройкиЗаполненияВХранилище();
	
	ОткрытьФорму("Обработка.КВП_ФормированиеОплатПоПлатежнымДокументам.Форма.ФормаНастройкиЗаполнения",
				 Новый Структура("АдресХранилищаНастроек", АдресХранилищаНастроек),
				 ЭтаФорма,,,,
				 Новый ОписаниеОповещения("ОбработатьЗакрытиеФормыНастройки", ЭтаФорма),
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // Настройка()
// Конец СхемыУчета

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры

// СхемыУчета
&НаКлиенте
// Подключаемый обработчик команды перехода к схеме учета.
Процедура Подключаемый_ОткрытьСхемуУчета(Команда)
	
	ОТР_СхемыУчетаКлиент.Подключаемый_ОткрытьСхемуУчета(ЭтаФорма.ИмяФормы);
	
КонецПроцедуры
// Конец ЧастоЗадаваемыеВопросы

#Область Реклама

&НаКлиенте
// Процедура - обработчик нажатия на картинку баннера.
Процедура Подключаемый_РекламаОткрытьСтраницуСайта(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОТР_РекламаКлиент.Подключаемый_РекламаОткрытьСтраницуСайта(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_РекламаОткрытьСтраницуСайта()

&НаКлиенте
// Процедура - обработчик нажатия на картинку закрытия баннера.
Процедура Подключаемый_РекламаКартникаЗакрытияБаннераНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ОТР_РекламаКлиент.Подключаемый_РекламаКартникаЗакрытияБаннераНажатие(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_РекламаОткрытьСтраницуСайта()

#КонецОбласти // Реклама

#КонецОбласти

/////////////////////////////////////////////////////////////
// ПРОЧИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область ПрочиеПроцедурыИФункции

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "Сформировать()".
Процедура ОбработчикОповещенияВопросаУстановкиСчетаКапремонта(Ответ, ПараметрыФормирования) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ПараметрыФормирования.Вставить("УстановитьСпецСчетРасчетовПоКапремонту", Истина);
	КонецЕсли;
	
	ПерейтиКВопросуКУДиРИФормированию(ПараметрыФормирования);
	
КонецПроцедуры

&НаКлиенте
// Процедура задает вопрос по КУДиР и переходит к процедуре формирования.
Процедура ПерейтиКВопросуКУДиРИФормированию(ПараметрыФормирования)
	
	НастройкиУчетнойПолитикиЖКХ = ПараметрыФормирования.НастройкиУчетнойПолитикиЖКХ;
	ПерезаполнитьЗаписиКУДиР    = Ложь;
	
	ФормироватьТаблицуПлатежныхДокументов = Истина;
	ПерезаполнятьЗаписиКУДиР(ПерезаполнитьЗаписиКУДиР, НастройкиУчетнойПолитикиЖКХ, Объект.КонецПериода, Объект.Организация);
	
	Если ПерезаполнитьЗаписиКУДиР Тогда
		// Проверка на необходимость вывода вопроса об изменениях в КУДиР.
		ЕстьСтрокиБезРО = Ложь;
		Для Каждого ТекВетка из ДеревоПлатежныхДокументовБезОшибок.ПолучитьЭлементы() Цикл
			Для каждого ТекСтрока из ТекВетка.ПолучитьЭлементы() Цикл
				Если (ТекСтрока.Документ = Неопределено ИЛИ ТекСтрока.Документ.Пустая()) И ТекСтрока.Пометка Тогда
					ЕстьСтрокиБезРО = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьСтрокиБезРО Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ФормироватьТаблицуПлатежныхДокументов = Ложь;
		
		Если ЕстьСтрокиБезРО Тогда
			ПараметрыФормирования.Вставить("ФормироватьТаблицуПлатежныхДокументов", ФормироватьТаблицуПлатежныхДокументов);
			ПараметрыФормирования.Вставить("ЕстьСтрокиБезРО",                       ЕстьСтрокиБезРО);
			ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаСформировать", ЭтаФорма, ПараметрыФормирования),
							"Будут изменены записи в КУДиР, сформированные документами оплаты (ПКО, Поступление на р/с, ОПК). Продолжить?",
							РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;
		
		// Назначаем изменение записей в КУДиР только если есть строки без РО.
		ПерезаполнитьЗаписиКУДиР = ПерезаполнитьЗаписиКУДиР И ЕстьСтрокиБезРО;
		
	КонецЕсли;
	
	ПараметрыФормирования.Вставить("ФормироватьТаблицуПлатежныхДокументов", ФормироватьТаблицуПлатежныхДокументов);
	СформироватьПродолжение(ПараметрыФормирования);
	
КонецПроцедуры

&НаКлиенте
// Обработчик результата вопроса, вызванного в процедуре "Сформировать()".
Процедура ОбработатьРезультатВопросаСформировать(Ответ, ПараметрыФормирования) Экспорт
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормирования.Вставить("ФормироватьТаблицуПлатежныхДокументов", Истина);
	
	// Назначаем изменение записей в КУДиР только если есть строки без РО.
	ПерезаполнитьЗаписиКУДиР = ПерезаполнитьЗаписиКУДиР И ПараметрыФормирования.ЕстьСтрокиБезРО;
	
	СформироватьПродолжение(ПараметрыФормирования);
	
КонецПроцедуры // ОбработатьРезультатВопросаСформировать()

&НаКлиенте
// Продолжение процедуры "Сформировать()".
Процедура СформироватьПродолжение(ПараметрыФормирования)
	
	Состояние("Формирование документов ""Регистрация оплаты""...");
	
	МассивСтрокСформированныхДокументов = СформироватьДокументыНаСервере(ПерезаполнитьЗаписиКУДиР, ПараметрыФормирования);
	
	Для Каждого ТекИдентификаторСтроки Из МассивСтрокСформированныхДокументов Цикл
		
		// разворачиваем в дереве ветку с созданным док-том оплаты
		Элементы.ДеревоПлатежныхДокументовБезОшибок.Развернуть(ТекИдентификаторСтроки);
		
	КонецЦикла;
	
	Состояние("Формирование документов ""Регистрация оплаты"" завершено");
	
КонецПроцедуры // СформироватьПродолжение()

&НаКлиенте
// Обработать результат закрытия формы настройки.
Процедура ОбработатьЗакрытиеФормыНастройки(АдресХранилищаНастроек, ДопПараметры) Экспорт
	
	Если ЗначениеЗаполнено(АдресХранилищаНастроек) Тогда
		ПолучитьНастройкиЗаполненияИзХранилища(АдресХранилищаНастроек);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьЗакрытиеФормыНастройки()

&НаСервереБезКонтекста
// Возвращает ТЗ, содержащую все строки ТЗ "ТаблицаЛС" указанного контрагента.
Функция ПолучитьСоответствиеПоКонтрагенту(Контрагент, ТаблицаЛС)
	
	СтруктураОтбора = Новый Структура("Контрагент");
	СтруктураОтбора.Контрагент = Контрагент;
	
	Возврат ТаблицаЛС.Скопировать(ТаблицаЛС.НайтиСтроки(СтруктураОтбора));
	
КонецФункции

&НаСервере
// Заполняет таблицу платежей.
// 
//  Возвращаемое значение - булево - заполнена ли таблица платежей.
// 
Функция СформироватьТаблицуПлатежей()
	
	ВидДокумента = мТаблицаПлатежныхДокументов.Получить(0).Документ;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Документ", ВидДокумента);
	Отбор.Вставить("Пометка", Истина);
	СтрокиДокументов = Объект.НастройкаЗаполнения.НайтиСтроки(Отбор);
	ЗагружатьПКО = Ложь;
	Если СтрокиДокументов.Количество() > 0 Тогда
		ЗагружатьПКО = Истина;
	КонецЕсли;
	ВидыОперацийКассовогоОрдера = ПолучитьСписокВидовОперацийПоВидуДокумента(ВидДокумента);
	Счет_76 = ПланыСчетов.Хозрасчетный.РасчетыСРазнымиДебиторамиИКредиторами;  //++Петрова
    Счет_86_03 = ПланыСчетов.Хозрасчетный.ЦелевыеПоступленияСобственников;    //--Петрова
	ВидДокумента = мТаблицаПлатежныхДокументов.Получить(1).Документ;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Документ", ВидДокумента);
	Отбор.Вставить("Пометка", Истина);
	СтрокиДокументов = Объект.НастройкаЗаполнения.НайтиСтроки(Отбор);
	ЗагружатьПлатПоручения = Ложь;
	Если СтрокиДокументов.Количество() > 0 Тогда
		ЗагружатьПлатПоручения = Истина;
	КонецЕсли;
	ВидыОперацийПоступленияНаРС = ПолучитьСписокВидовОперацийПоВидуДокумента(ВидДокумента);
	
	ВидДокумента = мТаблицаПлатежныхДокументов.Получить(2).Документ;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Документ", ВидДокумента);
	Отбор.Вставить("Пометка", Истина);
	СтрокиДокументов = Объект.НастройкаЗаполнения.НайтиСтроки(Отбор);
	ЗагружатьОПК = Ложь;
	Если СтрокиДокументов.Количество() > 0 Тогда
		ЗагружатьОПК = Истина;
	КонецЕсли;
	ВидыОперацийОплатПлатежнойКартой = ПолучитьСписокВидовОперацийПоВидуДокумента(ВидДокумента);
	
	Если НЕ ЗагружатьПлатПоручения И НЕ ЗагружатьПКО И НЕ ЗагружатьОПК Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Необходимо отметить хотя бы один из видов платежных документов.");
		Возврат Ложь;
	КонецЕсли;
	
	ЗапросПоДокументам = Новый Запрос;
	
	// Запрос получения таблицы платежей:
	// 1.  Получаем таблицу соответствия лицевых счетов контрагентам и договорам.
	// 2.  Находим все указанные в настройке платежные документы за указанный период.
	// 3.  Получаем документы "Регистрация оплаты", в табличных частях которых имеются ссылки на найденные платежные документы.
	// 4.  Оставляем только документы "Регистрация оплаты", которые были проведены в период действия договора контрагента.
	// 5.  Каждому договору платежного документа ставим в соответствие лицевые счета, по которым в найденных документах
	//     "Регистрация оплаты" зарегистрирована оплата по данному платежному документу. Сначала сопоставление происходит
	//     по полному соответствию контрагента и договора, затем только по договору и, наконец, когда контрагент и договор
	//     не соответствуют.
	// 6.  Получаем платежные документы, по которым не найден ни один документ "Регистрация оплаты".
	// 7.  Определяем для платежных документов, по которым не найден ни один документ "Регистрация оплаты" лицевые счета,
	//     по которым произведена оплата услуг, по контрагенту и договору, а затем только по контрагенту.
	// 8.  Получаем платежные документы, для которых лицевые счета в документе "Регистрация оплаты" не соответствуют
	//     контрагенту платежного документа.
	// 9.  Получаем лицевые счета из документов "Регистрация оплаты", которые не соответствуют контрагенту платежного
	//     документа.
	// 10. Получаем все лицевые счета соответствующие контрагенту платежного документа, для которого лицевые счета в
	//     документе "Регистрация оплаты" не соответствуют контрагенту.
	// 11. Из лицевых счетов, полученных в пункте 10 выбираем те, которых нет в списке лицевых счетов из пункта 9.
	// 12. Получаем лицевые счета, по которым нужно зарегистрировать оплату услуг, лицевые счета по которым уже зарегистрирована
	//     оплата услуг, лицевые счета контрагентов из пункта 11.
	// 13. Добавляем сведения по капремонту.
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаСоответствияИсходная.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаСоответствияИсходная.Контрагент КАК Контрагент,
	|	ТаблицаСоответствияИсходная.Договор КАК Договор,
	|	ТаблицаСоответствияИсходная.Период КАК Период
	|ПОМЕСТИТЬ ТаблицаСоответствияИсходная
	|ИЗ
	|	&ТаблицаЛС КАК ТаблицаСоответствияИсходная";
	//++Позолотина
	Если значениезаполнено(Объект.Контрагент) тогда
		ТекстЗапроса = ТекстЗапроса + "
	|
	|	ГДЕ ТаблицаСоответствияИсходная.Контрагент в иерархии (&Контрагент)";
	КонецЕсли;
	//--Позолотина
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаСоответствияИсходная.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаСоответствияИсходная.Контрагент КАК Контрагент,
	|	ТаблицаСоответствияИсходная.Договор КАК Договор,
	|	ТаблицаСоответствияИсходная.Период КАК Период,
	|	КВП_ЛицевыеСчета.Адрес.Владелец КАК Здание
	|ПОМЕСТИТЬ ТаблицаСоответствия
	|ИЗ
	|	ТаблицаСоответствияИсходная КАК ТаблицаСоответствияИсходная
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КВП_ЛицевыеСчета КАК КВП_ЛицевыеСчета
	|		ПО ТаблицаСоответствияИсходная.ЛицевойСчет = КВП_ЛицевыеСчета.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДокументПоступлениеНаРасчетныйСчет.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ДокументПоступлениеНаРасчетныйСчет.СубконтоКт1 ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ДокументПоступлениеНаРасчетныйСчет.СубконтоКт1
	|		КОГДА ДокументПоступлениеНаРасчетныйСчет.СубконтоКт2 ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ДокументПоступлениеНаРасчетныйСчет.СубконтоКт2
	|		КОГДА ДокументПоступлениеНаРасчетныйСчет.СубконтоКт3 ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ДокументПоступлениеНаРасчетныйСчет.СубконтоКт3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ КАК ДоговорКонтрагента,
	|	ДокументПоступлениеНаРасчетныйСчет.СуммаДокумента КАК СуммаДокумента
	|ПОМЕСТИТЬ втДокументыПнРСПрочееПоступление
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет КАК ДокументПоступлениеНаРасчетныйСчет
	|ГДЕ
	|	&ЗагружатьПлатПорученияПрочие
	|	И ДокументПоступлениеНаРасчетныйСчет.Ссылка.Проведен
	|	И ДокументПоступлениеНаРасчетныйСчет.Ссылка.Дата МЕЖДУ &ДатаНачало И &ДатаОкончание
	|	И ДокументПоступлениеНаРасчетныйСчет.Ссылка.Организация = &Организация
	|	И ДокументПоступлениеНаРасчетныйСчет.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление)
	|   и не ДокументПоступлениеНаРасчетныйСчет.СчетУчетаРасчетовСКонтрагентом в иерархии (&Счет_76) 
	|   и не ДокументПоступлениеНаРасчетныйСчет.СчетУчетаРасчетовСКонтрагентом в иерархии (&Счет_86_03)";
	//++Позолотина
	Если значениезаполнено(Объект.Контрагент) тогда
		ТекстЗапроса = ТекстЗапроса + "	
	|	И ДокументПоступлениеНаРасчетныйСчет.ДоговорКонтрагента.Владелец в иерархии (&Контрагент)";
	КонецЕсли;
	//--Позолотина
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументПриходныйКассовыйОрдер.Ссылка,
	|	ВЫБОР
	|		КОГДА ДокументПриходныйКассовыйОрдер.СубконтоКт1 ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ДокументПриходныйКассовыйОрдер.СубконтоКт1
	|		КОГДА ДокументПриходныйКассовыйОрдер.СубконтоКт2 ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ДокументПриходныйКассовыйОрдер.СубконтоКт2
	|		КОГДА ДокументПриходныйКассовыйОрдер.СубконтоКт3 ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА ДокументПриходныйКассовыйОрдер.СубконтоКт3
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	КОНЕЦ,
	|	ДокументПриходныйКассовыйОрдер.СуммаДокумента
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер КАК ДокументПриходныйКассовыйОрдер
	|ГДЕ
	|	&ЗагружатьПКОПрочие
	|	И ДокументПриходныйКассовыйОрдер.Ссылка.Проведен
	|	И ДокументПриходныйКассовыйОрдер.Ссылка.Дата МЕЖДУ &ДатаНачало И &ДатаОкончание
	|	И ДокументПриходныйКассовыйОрдер.Ссылка.Организация = &Организация
	|	И ДокументПриходныйКассовыйОрдер.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПКО.ПрочийПриход)
	|   и не ДокументПриходныйКассовыйОрдер.СчетУчетаРасчетовСКонтрагентом в иерархии (&Счет_76) 
	|   и не ДокументПриходныйКассовыйОрдер.СчетУчетаРасчетовСКонтрагентом в иерархии (&Счет_86_03)";
	//++Позолотина
	Если значениезаполнено(Объект.Контрагент) тогда
		ТекстЗапроса = ТекстЗапроса + "	
	|	И ДокументПриходныйКассовыйОрдер.ДоговорКонтрагента.Владелец в иерархии (&Контрагент)";
	КонецЕсли;
	//--Позолотина 	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТиповойДокументПоступленияОплаты.Ссылка КАК Документ,
	|	ТиповойДокументПоступленияОплаты.ДоговорКонтрагента.Владелец КАК Контрагент,
	|	ТиповойДокументПоступленияОплаты.ДоговорКонтрагента КАК Договор,
	|	ТиповойДокументПоступленияОплаты.СуммаВзаиморасчетов КАК СуммаДокумента
	|ПОМЕСТИТЬ втДокументыПнРС
	|ИЗ
	|	Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ТиповойДокументПоступленияОплаты
	|ГДЕ
	|	&ЗагружатьПлатПоручения
	|	И ТиповойДокументПоступленияОплаты.Ссылка.Проведен
	|	И ТиповойДокументПоступленияОплаты.Ссылка.Дата МЕЖДУ &ДатаНачало И &ДатаОкончание
	|	И ТиповойДокументПоступленияОплаты.Ссылка.Организация = &Организация
	|	И ТиповойДокументПоступленияОплаты.Ссылка.ВидОперации В(&ВидыОперацийПоступленияНаРС)
	|   и не ТиповойДокументПоступленияОплаты.СчетУчетаРасчетовСКонтрагентом в иерархии (&Счет_76) 
	|   и не ТиповойДокументПоступленияОплаты.СчетУчетаРасчетовСКонтрагентом в иерархии (&Счет_86_03)";
	//++Позолотина
	Если значениезаполнено(Объект.Контрагент) тогда
		ТекстЗапроса = ТекстЗапроса + "	
	|	И ТиповойДокументПоступленияОплаты.ДоговорКонтрагента.Владелец в иерархии (&Контрагент)";
	КонецЕсли;
	//--Позолотина
 	ТекстЗапроса = ТекстЗапроса + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТиповойДокументПоступленияОплаты.Ссылка,
	|	ТиповойДокументПоступленияОплаты.ДоговорКонтрагента.Владелец,
	|	ТиповойДокументПоступленияОплаты.ДоговорКонтрагента,
	|	ТиповойДокументПоступленияОплаты.СуммаВзаиморасчетов
	|ИЗ
	|	Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ТиповойДокументПоступленияОплаты
	|ГДЕ
	|	&ЗагружатьПКО
	|	И ТиповойДокументПоступленияОплаты.Ссылка.Проведен
	|	И ТиповойДокументПоступленияОплаты.Ссылка.Дата МЕЖДУ &ДатаНачало И &ДатаОкончание
	|	И ТиповойДокументПоступленияОплаты.Ссылка.Организация = &Организация
	|	И ТиповойДокументПоступленияОплаты.Ссылка.ВидОперации В(&ВидыОперацийКассовогоОрдера)
	|   и не ТиповойДокументПоступленияОплаты.СчетУчетаРасчетовСКонтрагентом в иерархии (&Счет_76) 
	|   и не ТиповойДокументПоступленияОплаты.СчетУчетаРасчетовСКонтрагентом в иерархии (&Счет_86_03)";
	//++Позолотина
	Если значениезаполнено(Объект.Контрагент) тогда
		ТекстЗапроса = ТекстЗапроса + "	
	|	И ТиповойДокументПоступленияОплаты.ДоговорКонтрагента.Владелец в иерархии (&Контрагент)";
	КонецЕсли;
	//--Позолотина
	ТекстЗапроса = ТекстЗапроса + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТиповойДокументПоступленияОплаты.Ссылка,
	|	ЕСТЬNULL(ТиповойДокументПоступленияОплаты.ДоговорКонтрагента.Владелец, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)),
	|	ТиповойДокументПоступленияОплаты.ДоговорКонтрагента,
	|	ТиповойДокументПоступленияОплаты.СуммаДокумента
	|ИЗ
	|	втДокументыПнРСПрочееПоступление КАК ТиповойДокументПоступленияОплаты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТиповойДокументПоступленияОплаты.Ссылка,
	|	ТиповойДокументПоступленияОплаты.ДоговорКонтрагента.Владелец,
	|	ТиповойДокументПоступленияОплаты.ДоговорКонтрагента,
	|	ТиповойДокументПоступленияОплаты.СуммаВзаиморасчетов
	|ИЗ
	|	Документ.ОплатаПлатежнойКартой.РасшифровкаПлатежа КАК ТиповойДокументПоступленияОплаты
	|ГДЕ
	|	&ЗагружатьОПК
	|	И ТиповойДокументПоступленияОплаты.Ссылка.Проведен
	|	И ТиповойДокументПоступленияОплаты.Ссылка.Дата МЕЖДУ &ДатаНачало И &ДатаОкончание
	|	И ТиповойДокументПоступленияОплаты.Ссылка.Организация = &Организация
	|	И ТиповойДокументПоступленияОплаты.Ссылка.ВидОперации В(&ВидыОперацийОплатПлатежнойКартой)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДокументыПнРС.Документ КАК Документ,
	|	втДокументыПнРС.Контрагент КАК Контрагент,
	|	втДокументыПнРС.Договор КАК Договор,
	|	СУММА(втДокументыПнРС.СуммаДокумента) КАК СуммаДокумента
	|ПОМЕСТИТЬ втСуммыДокументов
	|ИЗ
	|	втДокументыПнРС КАК втДокументыПнРС
	|
	|СГРУППИРОВАТЬ ПО
	|	втДокументыПнРС.Документ,
	|	втДокументыПнРС.Контрагент,
	|	втДокументыПнРС.Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втСуммыДокументов.Документ КАК Документ
	|ПОМЕСТИТЬ втВсеДокументы
	|ИЗ
	|	втСуммыДокументов КАК втСуммыДокументов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втВсеДокументы.Документ КАК Документ,
	|	КВП_РегистрацияОплатыЛицевыеСчета.Объект КАК ЛицевойСчет,
	|	КВП_РегистрацияОплатыЛицевыеСчета.Ссылка КАК ДокументРО,
	|	КВП_РегистрацияОплатыЛицевыеСчета.Сумма КАК СуммаОплаты
	|ПОМЕСТИТЬ втДокументыРО
	|ИЗ
	|	втВсеДокументы КАК втВсеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КВП_РегистрацияОплаты.ЛицевыеСчета КАК КВП_РегистрацияОплатыЛицевыеСчета
	|		ПО втВсеДокументы.Документ = КВП_РегистрацияОплатыЛицевыеСчета.ДокументОплаты
	|ГДЕ
	|	КВП_РегистрацияОплатыЛицевыеСчета.Ссылка.Проведен
	|	И КВП_РегистрацияОплатыЛицевыеСчета.Ссылка.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДокументыРО.Документ КАК Документ,
	|	втДокументыРО.ЛицевойСчет КАК ЛицевойСчет,
	|	СУММА(втДокументыРО.СуммаОплаты) КАК СуммаОплаты
	|ПОМЕСТИТЬ втСуммыОплат
	|ИЗ
	|	втДокументыРО КАК втДокументыРО
	|
	|СГРУППИРОВАТЬ ПО
	|	втДокументыРО.Документ,
	|	втДокументыРО.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втДокументыРО.Документ КАК Документ,
	|	втДокументыРО.ЛицевойСчет КАК ЛицевойСчет,
	|	втДокументыРО.ДокументРО КАК ДокументРО,
	|	втДокументыРО.СуммаОплаты КАК СуммаОплаты,
	|	МАКСИМУМ(ТаблицаСоответствия.Период) КАК Период
	|ПОМЕСТИТЬ втПериоды
	|ИЗ
	|	втДокументыРО КАК втДокументыРО
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСоответствия КАК ТаблицаСоответствия
	|		ПО втДокументыРО.ЛицевойСчет = ТаблицаСоответствия.ЛицевойСчет
	|ГДЕ
	|	втДокументыРО.ДокументРО.Дата >= ТаблицаСоответствия.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	втДокументыРО.Документ,
	|	втДокументыРО.ЛицевойСчет,
	|	втДокументыРО.ДокументРО,
	|	втДокументыРО.СуммаОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втПериоды.Документ КАК Документ,
	|	втПериоды.ДокументРО КАК ДокументРО,
	|	втПериоды.ЛицевойСчет КАК ЛицевойСчет,
	|	втПериоды.СуммаОплаты КАК СуммаОплаты,
	|	втСуммыОплат.СуммаОплаты КАК СуммаОплатИтого,
	|	ТаблицаСоответствия.Контрагент КАК Контрагент,
	|	ТаблицаСоответствия.Договор КАК Договор
	|ПОМЕСТИТЬ втВсеЛС
	|ИЗ
	|	втПериоды КАК втПериоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСуммыОплат КАК втСуммыОплат
	|		ПО втПериоды.Документ = втСуммыОплат.Документ
	|			И втПериоды.ЛицевойСчет = втСуммыОплат.ЛицевойСчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСоответствия КАК ТаблицаСоответствия
	|		ПО втПериоды.ЛицевойСчет = ТаблицаСоответствия.ЛицевойСчет
	|ГДЕ
	|	ТаблицаСоответствия.Период = втПериоды.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСуммыДокументов.Документ КАК Документ,
	|	втСуммыДокументов.Контрагент КАК Контрагент,
	|	втСуммыДокументов.Договор КАК Договор,
	|	втСуммыДокументов.СуммаДокумента КАК СуммаДокумента,
	|	втВсеЛС.ДокументРО КАК ДокументРО,
	|	втВсеЛС.СуммаОплаты КАК СуммаОплаты,
	|	втВсеЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	ИСТИНА КАК КонтрагентСовпадает,
	|	ИСТИНА КАК ДоговорСовпадает
	|ПОМЕСТИТЬ втЛицевыеСчетаРОСПолнымСоответствием
	|ИЗ
	|	втСуммыДокументов КАК втСуммыДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВсеЛС КАК втВсеЛС
	|		ПО втСуммыДокументов.Документ = втВсеЛС.Документ
	|			И втСуммыДокументов.Контрагент = втВсеЛС.Контрагент
	|			И втСуммыДокументов.Договор = втВсеЛС.Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВсеЛС.Документ КАК Документ,
	|	втВсеЛС.ДокументРО КАК ДокументРО,
	|	втВсеЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	втВсеЛС.СуммаОплаты КАК СуммаОплаты,
	|	втВсеЛС.СуммаОплатИтого КАК СуммаОплатИтого,
	|	втВсеЛС.Контрагент КАК Контрагент,
	|	втВсеЛС.Договор КАК Договор
	|ПОМЕСТИТЬ втВсеЛСНеИспользованные
	|ИЗ
	|	втВсеЛС КАК втВсеЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЛицевыеСчетаРОСПолнымСоответствием КАК втЛицевыеСчетаРОСПолнымСоответствием
	|		ПО втВсеЛС.Документ = втЛицевыеСчетаРОСПолнымСоответствием.Документ
	|			И втВсеЛС.Контрагент = втЛицевыеСчетаРОСПолнымСоответствием.Контрагент
	|			И втВсеЛС.Договор = втЛицевыеСчетаРОСПолнымСоответствием.Договор
	|ГДЕ
	|	втЛицевыеСчетаРОСПолнымСоответствием.Документ ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛицевыеСчетаРОСПолнымСоответствием.Документ КАК Документ,
	|	втЛицевыеСчетаРОСПолнымСоответствием.Контрагент КАК Контрагент,
	|	втЛицевыеСчетаРОСПолнымСоответствием.Договор КАК Договор,
	|	втЛицевыеСчетаРОСПолнымСоответствием.СуммаДокумента КАК СуммаДокумента,
	|	втЛицевыеСчетаРОСПолнымСоответствием.ДокументРО КАК ДокументРО,
	|	втЛицевыеСчетаРОСПолнымСоответствием.СуммаОплаты КАК СуммаОплаты,
	|	втЛицевыеСчетаРОСПолнымСоответствием.ЛицевойСчет КАК ЛицевойСчет,
	|	втЛицевыеСчетаРОСПолнымСоответствием.КонтрагентСовпадает КАК КонтрагентСовпадает,
	|	втЛицевыеСчетаРОСПолнымСоответствием.ДоговорСовпадает КАК ДоговорСовпадает
	|ПОМЕСТИТЬ втЛицевыеСчетаРО
	|ИЗ
	|	втЛицевыеСчетаРОСПолнымСоответствием КАК втЛицевыеСчетаРОСПолнымСоответствием
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втСуммыДокументов.Документ,
	|	втСуммыДокументов.Контрагент,
	|	втСуммыДокументов.Договор,
	|	втСуммыДокументов.СуммаДокумента,
	|	втВсеЛСНеИспользованные.ДокументРО,
	|	втВсеЛСНеИспользованные.СуммаОплаты,
	|	втВсеЛСНеИспользованные.ЛицевойСчет,
	|	ИСТИНА,
	|	ЛОЖЬ
	|ИЗ
	|	втСуммыДокументов КАК втСуммыДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВсеЛСНеИспользованные КАК втВсеЛСНеИспользованные
	|		ПО втСуммыДокументов.Документ = втВсеЛСНеИспользованные.Документ
	|			И втСуммыДокументов.Контрагент = втВсеЛСНеИспользованные.Контрагент
	|			И (НЕ втСуммыДокументов.Договор = втВсеЛСНеИспользованные.Договор)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втСуммыДокументов.Документ,
	|	втСуммыДокументов.Контрагент,
	|	втСуммыДокументов.Договор,
	|	втСуммыДокументов.СуммаДокумента,
	|	втВсеЛСНеИспользованные.ДокументРО,
	|	втВсеЛСНеИспользованные.СуммаОплаты,
	|	втВсеЛСНеИспользованные.ЛицевойСчет,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	втСуммыДокументов КАК втСуммыДокументов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВсеЛСНеИспользованные КАК втВсеЛСНеИспользованные
	|		ПО втСуммыДокументов.Документ = втВсеЛСНеИспользованные.Документ
	|			И (НЕ втСуммыДокументов.Контрагент = втВсеЛСНеИспользованные.Контрагент)
	|			И (НЕ втСуммыДокументов.Договор = втВсеЛСНеИспользованные.Договор)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛицевыеСчетаРО.Документ КАК Документ,
	|	втЛицевыеСчетаРО.Контрагент КАК Контрагент,
	|	втЛицевыеСчетаРО.Договор КАК Договор,
	|	СУММА(втЛицевыеСчетаРО.СуммаОплаты) КАК СуммаОплаты
	|ПОМЕСТИТЬ втСуммыОплатПоДокументам
	|ИЗ
	|	втЛицевыеСчетаРО КАК втЛицевыеСчетаРО
	|
	|СГРУППИРОВАТЬ ПО
	|	втЛицевыеСчетаРО.Документ,
	|	втЛицевыеСчетаРО.Контрагент,
	|	втЛицевыеСчетаРО.Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСуммыДокументов.Документ КАК Документ,
	|	втСуммыДокументов.Контрагент КАК Контрагент,
	|	втСуммыДокументов.Договор КАК Договор,
	|	втСуммыДокументов.СуммаДокумента КАК СуммаДокумента
	|ПОМЕСТИТЬ втДокументыБезРО
	|ИЗ
	|	втСуммыДокументов КАК втСуммыДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЛицевыеСчетаРО КАК втЛицевыеСчетаРО
	|		ПО втСуммыДокументов.Документ = втЛицевыеСчетаРО.Документ
	|ГДЕ
	|	втЛицевыеСчетаРО.Документ ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДокументыБезРО.Документ КАК Документ,
	|	втДокументыБезРО.Контрагент КАК Контрагент,
	|	втДокументыБезРО.Договор КАК Договор,
	|	втДокументыБезРО.СуммаДокумента КАК СуммаДокумента,
	|	ТаблицаСоответствия.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаСоответствия.Здание КАК Здание,
	|	ИСТИНА КАК КонтрагентСовпадает,
	|	ИСТИНА КАК ДоговорСовпадает
	|ПОМЕСТИТЬ втВсеЛицевыеСчетаБезРО
	|ИЗ
	|	втДокументыБезРО КАК втДокументыБезРО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСоответствия КАК ТаблицаСоответствия
	|		ПО втДокументыБезРО.Контрагент = ТаблицаСоответствия.Контрагент
	|			И втДокументыБезРО.Договор = ТаблицаСоответствия.Договор
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втДокументыБезРО.Документ,
	|	втДокументыБезРО.Контрагент,
	|	втДокументыБезРО.Договор,
	|	втДокументыБезРО.СуммаДокумента,
	|	ТаблицаСоответствия.ЛицевойСчет,
	|	ТаблицаСоответствия.Здание,
	|	ИСТИНА,
	|	ЛОЖЬ
	|ИЗ
	|	втДокументыБезРО КАК втДокументыБезРО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСоответствия КАК ТаблицаСоответствия
	|		ПО втДокументыБезРО.Контрагент = ТаблицаСоответствия.Контрагент
	|ГДЕ
	|	НЕ втДокументыБезРО.Договор = ТаблицаСоответствия.Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВсеЛицевыеСчетаБезРО.Документ КАК Документ,
	|	втВсеЛицевыеСчетаБезРО.Контрагент КАК Контрагент,
	|	втВсеЛицевыеСчетаБезРО.Договор КАК Договор,
	|	втВсеЛицевыеСчетаБезРО.СуммаДокумента КАК СуммаДокумента,
	|	МАКСИМУМ(втВсеЛицевыеСчетаБезРО.ДоговорСовпадает) КАК ДоговорСовпадает
	|ПОМЕСТИТЬ втЕстьЛиСовпадающийДоговор
	|ИЗ
	|	втВсеЛицевыеСчетаБезРО КАК втВсеЛицевыеСчетаБезРО
	|
	|СГРУППИРОВАТЬ ПО
	|	втВсеЛицевыеСчетаБезРО.Документ,
	|	втВсеЛицевыеСчетаБезРО.Контрагент,
	|	втВсеЛицевыеСчетаБезРО.Договор,
	|	втВсеЛицевыеСчетаБезРО.СуммаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВсеЛицевыеСчетаБезРО.Документ КАК Документ,
	|	втВсеЛицевыеСчетаБезРО.Контрагент КАК Контрагент,
	|	втВсеЛицевыеСчетаБезРО.Договор КАК Договор,
	|	втВсеЛицевыеСчетаБезРО.СуммаДокумента КАК СуммаДокумента,
	|	втВсеЛицевыеСчетаБезРО.ДоговорСовпадает КАК ДоговорСовпадает,
	|	МИНИМУМ(втВсеЛицевыеСчетаБезРО.ЛицевойСчет) КАК ЛицевойСчет
	|ПОМЕСТИТЬ втЛСкНачислениюВозможные
	|ИЗ
	|	втВсеЛицевыеСчетаБезРО КАК втВсеЛицевыеСчетаБезРО
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втЕстьЛиСовпадающийДоговор КАК втЕстьЛиСовпадающийДоговор
	|		ПО втВсеЛицевыеСчетаБезРО.Документ = втЕстьЛиСовпадающийДоговор.Документ
	|			И втВсеЛицевыеСчетаБезРО.Контрагент = втЕстьЛиСовпадающийДоговор.Контрагент
	|			И втВсеЛицевыеСчетаБезРО.Договор = втЕстьЛиСовпадающийДоговор.Договор
	|			И втВсеЛицевыеСчетаБезРО.СуммаДокумента = втЕстьЛиСовпадающийДоговор.СуммаДокумента
	|			И втВсеЛицевыеСчетаБезРО.ДоговорСовпадает = втЕстьЛиСовпадающийДоговор.ДоговорСовпадает
	|
	|СГРУППИРОВАТЬ ПО
	|	втВсеЛицевыеСчетаБезРО.Документ,
	|	втВсеЛицевыеСчетаБезРО.Контрагент,
	|	втВсеЛицевыеСчетаБезРО.Договор,
	|	втВсеЛицевыеСчетаБезРО.СуммаДокумента,
	|	втВсеЛицевыеСчетаБезРО.ДоговорСовпадает
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втЛицевыеСчетаРО.Документ КАК Документ,
	|	втЛицевыеСчетаРО.Контрагент КАК Контрагент,
	|	втЛицевыеСчетаРО.Договор КАК Договор,
	|	втЛицевыеСчетаРО.СуммаДокумента КАК СуммаДокумента
	|ПОМЕСТИТЬ втДокументыСПостороннимиЛС
	|ИЗ
	|	втЛицевыеСчетаРО КАК втЛицевыеСчетаРО
	|ГДЕ
	|	НЕ втЛицевыеСчетаРО.КонтрагентСовпадает
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втДокументыСПостороннимиЛС.Документ КАК Документ,
	|	втДокументыСПостороннимиЛС.Контрагент КАК Контрагент,
	|	втДокументыСПостороннимиЛС.Договор КАК Договор,
	|	втДокументыСПостороннимиЛС.СуммаДокумента КАК СуммаДокумента,
	|	втЛицевыеСчетаРО.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ втЛСДокументовСПостороннимиЛС
	|ИЗ
	|	втДокументыСПостороннимиЛС КАК втДокументыСПостороннимиЛС
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЛицевыеСчетаРО КАК втЛицевыеСчетаРО
	|		ПО втДокументыСПостороннимиЛС.Документ = втЛицевыеСчетаРО.Документ
	|			И втДокументыСПостороннимиЛС.Контрагент = втЛицевыеСчетаРО.Контрагент
	|			И втДокументыСПостороннимиЛС.Договор = втЛицевыеСчетаРО.Договор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втДокументыСПостороннимиЛС.Документ КАК Документ,
	|	втДокументыСПостороннимиЛС.Контрагент КАК Контрагент,
	|	втДокументыСПостороннимиЛС.Договор КАК Договор,
	|	втДокументыСПостороннимиЛС.СуммаДокумента КАК СуммаДокумента,
	|	ТаблицаСоответствия.ЛицевойСчет КАК ЛицевойСчет,
	|	ТаблицаСоответствия.Здание КАК Здание,
	|	ВЫБОР
	|		КОГДА втДокументыСПостороннимиЛС.Договор = ТаблицаСоответствия.Договор
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДоговорСовпадает
	|ПОМЕСТИТЬ втЛСКонтрагентов
	|ИЗ
	|	втДокументыСПостороннимиЛС КАК втДокументыСПостороннимиЛС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСоответствия КАК ТаблицаСоответствия
	|		ПО втДокументыСПостороннимиЛС.Контрагент = ТаблицаСоответствия.Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЛСКонтрагентов.Документ КАК Документ,
	|	втЛСКонтрагентов.Контрагент КАК Контрагент,
	|	втЛСКонтрагентов.Договор КАК Договор,
	|	втЛСКонтрагентов.СуммаДокумента КАК СуммаДокумента,
	|	втЛСКонтрагентов.ЛицевойСчет КАК ЛицевойСчет,
	|	втЛСКонтрагентов.Здание КАК Здание,
	|	втЛСКонтрагентов.ДоговорСовпадает КАК ДоговорСовпадает
	|ПОМЕСТИТЬ втЛСДляТЧСОшибками
	|ИЗ
	|	втЛСКонтрагентов КАК втЛСКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЛСДокументовСПостороннимиЛС КАК втЛСДокументовСПостороннимиЛС
	|		ПО втЛСКонтрагентов.Документ = втЛСДокументовСПостороннимиЛС.Документ
	|			И втЛСКонтрагентов.Контрагент = втЛСДокументовСПостороннимиЛС.Контрагент
	|			И втЛСКонтрагентов.Договор = втЛСДокументовСПостороннимиЛС.Договор
	|			И втЛСКонтрагентов.ЛицевойСчет = втЛСДокументовСПостороннимиЛС.ЛицевойСчет
	|ГДЕ
	|	втЛСДокументовСПостороннимиЛС.ЛицевойСчет ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВсеЛицевыеСчетаБезРО.Документ КАК Документ,
	|	втВсеЛицевыеСчетаБезРО.Документ.Номер КАК Номер,
	|	втВсеЛицевыеСчетаБезРО.Документ.Дата КАК Дата,
	|	втВсеЛицевыеСчетаБезРО.Документ.НазначениеПлатежа КАК НазначениеПлатежа,
	|	NULL КАК ДокументРО,
	|	NULL КАК ДатаРО,
	|	втВсеЛицевыеСчетаБезРО.Контрагент КАК Контрагент,
	|	втВсеЛицевыеСчетаБезРО.Договор КАК Договор,
	|	втВсеЛицевыеСчетаБезРО.СуммаДокумента КАК СуммаДокумента,
	|	ВЫБОР
	|		КОГДА втЛСкНачислениюВозможные.ЛицевойСчет ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ втВсеЛицевыеСчетаБезРО.СуммаДокумента
	|	КОНЕЦ КАК СуммаОплаты,
	|	втВсеЛицевыеСчетаБезРО.СуммаДокумента КАК СуммаРО,
	|	втВсеЛицевыеСчетаБезРО.ЛицевойСчет КАК ЛицевойСчет,
	|	втВсеЛицевыеСчетаБезРО.Здание КАК Здание,
	|	втВсеЛицевыеСчетаБезРО.КонтрагентСовпадает КАК КонтрагентСовпадает,
	|	втВсеЛицевыеСчетаБезРО.ДоговорСовпадает КАК ДоговорСовпадает,
	|	ЛОЖЬ КАК ЕстьРО,
	|	ИСТИНА КАК СуммыСовпадают
	|ПОМЕСТИТЬ втИтоговая
	|ИЗ
	|	втВсеЛицевыеСчетаБезРО КАК втВсеЛицевыеСчетаБезРО
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЛСкНачислениюВозможные КАК втЛСкНачислениюВозможные
	|		ПО втВсеЛицевыеСчетаБезРО.Документ = втЛСкНачислениюВозможные.Документ
	|			И втВсеЛицевыеСчетаБезРО.Контрагент = втЛСкНачислениюВозможные.Контрагент
	|			И втВсеЛицевыеСчетаБезРО.Договор = втЛСкНачислениюВозможные.Договор
	|			И втВсеЛицевыеСчетаБезРО.СуммаДокумента = втЛСкНачислениюВозможные.СуммаДокумента
	|			И втВсеЛицевыеСчетаБезРО.ДоговорСовпадает = втЛСкНачислениюВозможные.ДоговорСовпадает
	|			И втВсеЛицевыеСчетаБезРО.ЛицевойСчет = втЛСкНачислениюВозможные.ЛицевойСчет
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втЛицевыеСчетаРО.Документ,
	|	втЛицевыеСчетаРО.Документ.Номер,
	|	втЛицевыеСчетаРО.Документ.Дата,
	|	втЛицевыеСчетаРО.Документ.НазначениеПлатежа,
	|	втЛицевыеСчетаРО.ДокументРО,
	|	втЛицевыеСчетаРО.ДокументРО.Дата,
	|	втЛицевыеСчетаРО.Контрагент,
	|	втЛицевыеСчетаРО.Договор,
	|	втЛицевыеСчетаРО.СуммаДокумента,
	|	втЛицевыеСчетаРО.СуммаОплаты,
	|	втСуммыОплатПоДокументам.СуммаОплаты,
	|	втЛицевыеСчетаРО.ЛицевойСчет,
	|	втЛицевыеСчетаРО.ЛицевойСчет.Адрес.Владелец,
	|	втЛицевыеСчетаРО.КонтрагентСовпадает,
	|	втЛицевыеСчетаРО.ДоговорСовпадает,
	|	ИСТИНА,
	|	ВЫБОР
	|		КОГДА втЛицевыеСчетаРО.СуммаДокумента = втСуммыОплатПоДокументам.СуммаОплаты
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|ИЗ
	|	втЛицевыеСчетаРО КАК втЛицевыеСчетаРО
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСуммыОплатПоДокументам КАК втСуммыОплатПоДокументам
	|		ПО втЛицевыеСчетаРО.Документ = втСуммыОплатПоДокументам.Документ
	|			И втЛицевыеСчетаРО.Контрагент = втСуммыОплатПоДокументам.Контрагент
	|			И втЛицевыеСчетаРО.Договор = втСуммыОплатПоДокументам.Договор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втСуммыДокументов.Документ,
	|	втСуммыДокументов.Документ.Номер,
	|	втСуммыДокументов.Документ.Дата,
	|	втСуммыДокументов.Документ.НазначениеПлатежа,
	|	NULL,
	|	NULL,
	|	втСуммыДокументов.Контрагент,
	|	втСуммыДокументов.Договор,
	|	втСуммыДокументов.СуммаДокумента,
	|	0,
	|	0,
	|	NULL,
	|	ЗНАЧЕНИЕ(Справочник.КВП_Здания.ПустаяСсылка),
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ИСТИНА
	|ИЗ
	|	втСуммыДокументов КАК втСуммыДокументов
	|		ЛЕВОЕ СОЕДИНЕНИЕ втЛицевыеСчетаРО КАК втЛицевыеСчетаРО
	|		ПО втСуммыДокументов.Документ = втЛицевыеСчетаРО.Документ
	|		ЛЕВОЕ СОЕДИНЕНИЕ втВсеЛицевыеСчетаБезРО КАК втВсеЛицевыеСчетаБезРО
	|		ПО втСуммыДокументов.Документ = втВсеЛицевыеСчетаБезРО.Документ
	|ГДЕ
	|	втЛицевыеСчетаРО.Документ ЕСТЬ NULL
	|	И втВсеЛицевыеСчетаБезРО.Документ ЕСТЬ NULL
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втЛСДляТЧСОшибками.Документ,
	|	втЛСДляТЧСОшибками.Документ.Номер,
	|	втЛСДляТЧСОшибками.Документ.Дата,
	|	втЛСДляТЧСОшибками.Документ.НазначениеПлатежа,
	|	NULL,
	|	NULL,
	|	втЛСДляТЧСОшибками.Контрагент,
	|	втЛСДляТЧСОшибками.Договор,
	|	втЛСДляТЧСОшибками.СуммаДокумента,
	|	0,
	|	0,
	|	втЛСДляТЧСОшибками.ЛицевойСчет,
	|	втЛСДляТЧСОшибками.Здание,
	|	ИСТИНА,
	|	втЛСДляТЧСОшибками.ДоговорСовпадает,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	втЛСДляТЧСОшибками КАК втЛСДляТЧСОшибками
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИтоговая.Документ КАК Документ,
	|	втИтоговая.Номер КАК Номер,
	|	втИтоговая.Дата КАК Дата,
	|	втИтоговая.НазначениеПлатежа КАК НазначениеПлатежа,
	|	втИтоговая.ДокументРО КАК ДокументРО,
	|	втИтоговая.ДатаРО КАК ДатаРО,
	|	втИтоговая.Контрагент КАК Контрагент,
	|	втИтоговая.Договор КАК Договор,
	|	втИтоговая.СуммаДокумента КАК СуммаДокумента,
	|	втИтоговая.СуммаОплаты КАК СуммаОплаты,
	|	втИтоговая.СуммаРО КАК СуммаРО,
	|	втИтоговая.ЛицевойСчет КАК ЛицевойСчет,
	|	втИтоговая.Здание КАК Здание,
	|	втИтоговая.КонтрагентСовпадает КАК КонтрагентСовпадает,
	|	втИтоговая.ДоговорСовпадает КАК ДоговорСовпадает,
	|	втИтоговая.ЕстьРО КАК ЕстьРО,
	|	втИтоговая.СуммыСовпадают КАК СуммыСовпадают,
	|	МАКСИМУМ(ТаблицаСчетов.Период) КАК МаксПериод,
	|	ВЫБОР
	|		КОГДА втИтоговая.Документ ССЫЛКА Документ.ПоступлениеНаРасчетныйСчет
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоПРС
	|ПОМЕСТИТЬ врТаблицаМаксПериодов
	|ИЗ
	|	втИтоговая КАК втИтоговая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях КАК ТаблицаСчетов
	|		ПО (ТаблицаСчетов.Здание = втИтоговая.Здание)
	|			И (КОНЕЦПЕРИОДА(ТаблицаСчетов.Период, МЕСЯЦ) <= КОНЕЦПЕРИОДА(втИтоговая.Дата, МЕСЯЦ))
	|
	|СГРУППИРОВАТЬ ПО
	|	втИтоговая.Документ,
	|	втИтоговая.Номер,
	|	втИтоговая.Дата,
	|	втИтоговая.НазначениеПлатежа,
	|	втИтоговая.ДокументРО,
	|	втИтоговая.ДатаРО,
	|	втИтоговая.Контрагент,
	|	втИтоговая.Договор,
	|	втИтоговая.СуммаДокумента,
	|	втИтоговая.СуммаОплаты,
	|	втИтоговая.СуммаРО,
	|	втИтоговая.ЛицевойСчет,
	|	втИтоговая.Здание,
	|	втИтоговая.КонтрагентСовпадает,
	|	втИтоговая.ДоговорСовпадает,
	|	втИтоговая.ЕстьРО,
	|	втИтоговая.СуммыСовпадают,
	|	ВЫБОР
	|		КОГДА втИтоговая.Документ ССЫЛКА Документ.ПоступлениеНаРасчетныйСчет
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Итоговая.Документ КАК Документ,
	|	Итоговая.Номер КАК Номер,
	|	Итоговая.Дата КАК Дата,
	|	Итоговая.НазначениеПлатежа КАК НазначениеПлатежа,
	|	Итоговая.ДокументРО КАК ДокументРО,
	|	Итоговая.ДатаРО КАК ДатаРО,
	|	Итоговая.Контрагент КАК Контрагент,
	|	Итоговая.Договор КАК Договор,
	|	Итоговая.СуммаДокумента КАК СуммаДокумента,
	|	Итоговая.СуммаОплаты КАК СуммаОплаты,
	|	Итоговая.СуммаРО КАК СуммаРО,
	|	Итоговая.ЛицевойСчет КАК ЛицевойСчет,
	|	Итоговая.Здание КАК Здание,
	|	Итоговая.КонтрагентСовпадает КАК КонтрагентСовпадает,
	|	Итоговая.ДоговорСовпадает КАК ДоговорСовпадает,
	|	Итоговая.ЕстьРО КАК ЕстьРО,
	|	Итоговая.СуммыСовпадают КАК СуммыСовпадают,
	|	Итоговая.ЭтоПРС КАК ЭтоПРС,
	|	ВЫБОР
	|		КОГДА &ВедетсяРаздельныйУчетУслугКР
	|			ТОГДА ВЫБОР
	|					КОГДА Итоговая.ЭтоПРС
	|							И Итоговая.Документ.СчетОрганизации = ТаблицаСчетов.РасчетныйСчетУслугКапитальногоРемонта
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиКапРемонт)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиНеКапРемонт)
	|				КОНЕЦ
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.ВсеУслуги)
	|	КОНЕЦ КАК ВариантРаспределенияОплатКапРемонт,
	|	ВЫБОР
	|		КОГДА &ВедетсяРаздельныйУчетУслугКР
	|				И (НЕ Итоговая.ЭтоПРС
	|					ИЛИ Итоговая.ЭтоПРС
	|						И НЕ Итоговая.Документ.СчетОрганизации = ТаблицаСчетов.РасчетныйСчетУслугКапитальногоРемонта)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВозможностьВыбораРаспределенияНаКапРемонт,
	|	ЛОЖЬ КАК НеРаспределятьОплатуНаДобровольноеСтрахование,
	|	ТаблицаСчетов.Период КАК Период,
	|	ТаблицаСчетов.Организация КАК Организация,
	|	ТаблицаСчетов.РасчетныйСчетУслуг КАК РасчетныйСчетУслуг,
	|	ТаблицаСчетов.РасчетныйСчетУслугКапитальногоРемонта КАК РасчетныйСчетУслугКапитальногоРемонта
	|ИЗ
	|	врТаблицаМаксПериодов КАК Итоговая
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях КАК ТаблицаСчетов
	|		ПО (ТаблицаСчетов.Здание = Итоговая.Здание)
	|			И (ТаблицаСчетов.Период = Итоговая.МаксПериод)";
	
	// Если реквизит "УчитыватьВсеОплаты" принимает значение Ложь, в запрос включаются дополнительные
	// связи - оплаты отбираются только по договорам контрагентов, привязанным к лицевым счетам.
	// При значении реквизита Истина, в таблицу включаются оплаты по всем договорам, вне зависимости от
	// привязки к лицевому счету.
	Если Не Объект.УчитыватьВсеОплаты Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "КАК втДокументыПнРС", "КАК втДокументыПнРС
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаСоответствия КАК ТаблицаСоответствия
		|		ПО втДокументыПнРС.Договор = ТаблицаСоответствия.Договор");
	КонецЕсли;
	
	ЗапросПоДокументам.Текст = ТекстЗапроса;
	
	// Проверим, отмечен ли вид операции "прочие поступления" или "прочий приход".
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Пометка",  Истина);
	
	Если ЗагружатьПКО Тогда
		СтруктураОтбора.Вставить("ВидОперации", Перечисления.ВидыОперацийПКО.ПрочийПриход);
		НайденныеСтроки = Объект.НастройкаЗаполненияВидовОпераций.НайтиСтроки(СтруктураОтбора);
		
		ЗагружатьПКОПрочие = НЕ НайденныеСтроки.Количество() = 0;
	Иначе
		ЗагружатьПКОПрочие = Ложь;
	КонецЕсли;
	
	Если ЗагружатьПлатПоручения Тогда
		СтруктураОтбора.Вставить("ВидОперации", Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление);
		НайденныеСтроки = Объект.НастройкаЗаполненияВидовОпераций.НайтиСтроки(СтруктураОтбора);
		ЗагружатьПлатПорученияПрочие = НЕ НайденныеСтроки.Количество() = 0;
	Иначе
		ЗагружатьПлатПорученияПрочие = Ложь;
	КонецЕсли;

	ЗапросПоДокументам.УстановитьПараметр("Организация",                      Объект.Организация);
	ЗапросПоДокументам.УстановитьПараметр("ДатаНачало",                       НачалоДня(Объект.НачалоПериода));
	ЗапросПоДокументам.УстановитьПараметр("ДатаОкончание",                    КонецДня(Объект.КонецПериода));
	ЗапросПоДокументам.УстановитьПараметр("ТаблицаЛС",                        ТаблицаЛС.Выгрузить());
	ЗапросПоДокументам.УстановитьПараметр("ЗагружатьПлатПоручения",           ЗагружатьПлатПоручения);
	ЗапросПоДокументам.УстановитьПараметр("ЗагружатьПКО",                     ЗагружатьПКО);
	ЗапросПоДокументам.УстановитьПараметр("ЗагружатьОПК",                     ЗагружатьОПК);
	ЗапросПоДокументам.УстановитьПараметр("ЗагружатьПлатПорученияПрочие",     ЗагружатьПлатПорученияПрочие);
	ЗапросПоДокументам.УстановитьПараметр("ЗагружатьПКОПрочие",               ЗагружатьПКОПрочие);
	ЗапросПоДокументам.УстановитьПараметр("ВидыОперацийПоступленияНаРС",      ВидыОперацийПоступленияНаРС);
	ЗапросПоДокументам.УстановитьПараметр("ВидыОперацийКассовогоОрдера",      ВидыОперацийКассовогоОрдера);
	ЗапросПоДокументам.УстановитьПараметр("ВидыОперацийОплатПлатежнойКартой", ВидыОперацийОплатПлатежнойКартой);
	ЗапросПоДокументам.УстановитьПараметр("ВедетсяРаздельныйУчетУслугКР",     (мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет));
	 //Позолотина++
			ЗапросПоДокументам.УстановитьПараметр("Счет_76",                  Счет_76);
		    ЗапросПоДокументам.УстановитьПараметр("Счет_86_03",               Счет_86_03);

	Если значениезаполнено(Объект.Контрагент) тогда	
		ЗапросПоДокументам.УстановитьПараметр("Контрагент",                  Объект.Контрагент);
	КонецЕсли;
		 //Позолотина--

	врТаблицаПлатежей = ЗапросПоДокументам.Выполнить().Выгрузить();
	ТаблицаПлатежей.Очистить();
	
	врТаблицаПлатежей.Сортировать("Документ, Контрагент, Договор, СуммаОплаты УБЫВ");
	
	Для Каждого Строка Из врТаблицаПлатежей Цикл
		
		НоваяСтрока = ТаблицаПлатежей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		
		// Если распределяем оплату только на услуги кап.ремонта, то не надо указывать необходимость распределения оплаты на добровольное страхование.
		Если НоваяСтрока.ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиКапРемонт Тогда
			НоваяСтрока.НеРаспределятьОплатуНаДобровольноеСтрахование = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // СформироватьТаблицуПлатежей()

&НаКлиентеНаСервереБезКонтекста
// Установить значение пометки для ветки и ее строк.
Процедура УстановитьФлажок(Ветка, Пометка)
	
	Ветка.Пометка = Пометка;
	
	Для каждого ТекСтрока из Ветка.ПолучитьЭлементы() Цикл
		ТекСтрока.Пометка = Пометка;
	КонецЦикла;
	
КонецПроцедуры // УстановитьФлажок()

&НаКлиенте
// Проверяет, совпадают ли сумма ветки-родителя и общая сумма дочерних веток и
// заполняет значение колонки "СуммыСовпадают" ветки-родителя в зависимости от результата.
Процедура ПроверкаСовпаденияСуммПДиРО(СтрокаТаблицы)
	
	Если Не СтрокаТаблицы.ПолучитьРодителя() = Неопределено Тогда
		СтрокаРодитель = СтрокаТаблицы.ПолучитьРодителя();
	Иначе
		СтрокаРодитель = СтрокаТаблицы;
	КонецЕсли;
	
	СуммаОплат = 0;
	Для каждого ТекСтрока из СтрокаРодитель.ПолучитьЭлементы() Цикл
		Если ТекСтрока.Пометка Тогда
			СуммаОплат = СуммаОплат + ТекСтрока.Сумма;
		КонецЕсли;
	КонецЦикла;
	
	СтрокаРодитель.СуммыСовпадают = СуммаОплат = СтрокаРодитель.Сумма;
	
КонецПроцедуры // ПроверкаСовпаденияСуммПДиРО()

&НаСервере
// Проверяет на ошибки все ветки дерева платежных документов с ошибками.
//
// Параметры
//  ПриЗаполненииТаблицы - булево - вызывается ли процедура при первоначальном заполнении табличных частей.
//
Процедура ПроверкаНаОшибкиПолная(ПриЗаполненииТаблицы = Ложь)
	
	Для Каждого ТекВетка Из ДеревоПлатежныхДокументовСОшибками.ПолучитьЭлементы() Цикл
		КоличествоСтрок = ТекВетка.ПолучитьЭлементы().Количество();
		ГотовыхСтрок    = 0;
		
		Для Каждого ТекСтрока из ТекВетка.ПолучитьЭлементы() Цикл
			ПроверкаНаОшибки(ТекСтрока.ПолучитьИдентификатор(), ПриЗаполненииТаблицы);
			ГотовыхСтрок = ГотовыхСтрок + ТекСтрока.Готовность;
		КонецЦикла;
		
		Если ГотовыхСтрок = КоличествоСтрок Тогда
			ТекВетка.Готовность = 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПроверкаНаОшибкиПолная()

&НаСервере
// Возвращает сумму документа "Регистрация оплаты" по платежному документу и лицевому счету.
//
// Параметры
//  ДокументРО - ссылка на документ "Регистрация оплаты".
//  ДокументПД - ссылка на платежный документ.
//  ЛицевойСчет - лицевой счет.
//
// Возвращаемое значение
//  Число - сумма оплат по лицевому счету.
//
Функция ПроверитьСуммуРОДляЛС(ДокументРО, ДокументПД, ЛицевойСчет, ТаблицаОплат)
	
	Если НЕ (ЗначениеЗаполнено(ДокументРО) И ЗначениеЗаполнено(ДокументПД) И ЗначениеЗаполнено(ЛицевойСчет)) Тогда
		Возврат 0;
	Иначе
		Сумма = 0;
		
		СтруктураОтбора = Новый Структура("Объект, ДокументОплаты");
		СтруктураОтбора.Объект         = ЛицевойСчет;
		СтруктураОтбора.ДокументОплаты = ДокументПД;
		
		СтрокиОплаты = ТаблицаОплат.НайтиСтроки(СтруктураОтбора);
		
		Для каждого ТекСтрока из СтрокиОплаты Цикл
			Сумма = Сумма + ТекСтрока.Сумма;
		КонецЦикла;
		
		Возврат Сумма;
	КонецЕсли;
	
КонецФункции // ПроверитьСуммуРОДляЛС()

&НаСервере
// Перезаполняет таблицу оплат в документе "Регистрация оплаты".
Процедура ПерезаполнитьСуммуДокументаРО(Документ, ДокументПД, ЛицевойСчет, Сумма, МассивОплатПоДоговорам, ТаблицаОплат)
	
	// Находим сумму оплат по платежному документу и лицевому счету в документе "Регистрация оплаты".
	СтруктураОтбора = Новый Структура("Объект, ДокументОплаты");
	СтруктураОтбора.Объект         = ЛицевойСчет;
	СтруктураОтбора.ДокументОплаты = ДокументПД;
	СтрокиОтбора = ТаблицаОплат.НайтиСтроки(СтруктураОтбора);
	
	// Удаляем найденные строки и добавляем новую строку.
	Для каждого ТекСтрока из СтрокиОтбора Цикл
		ТаблицаОплат.Удалить(ТекСтрока);
	КонецЦикла;
	
	Если НЕ Сумма = 0 Тогда
		НоваяСтрока = ТаблицаОплат.Добавить();
		НоваяСтрока.Объект         = ЛицевойСчет;
		НоваяСтрока.ДокументОплаты = ДокументПД;
		НоваяСтрока.Сумма          = Сумма;
	КонецЕсли;
	
КонецПроцедуры // ПерезаполнитьСуммуДокументаРО()

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Попытка
		ТипИсточника = ТипЗнч(Источник.Ссылка);
	Исключение
		Возврат;
	КонецПопытки;
	
	Если ИмяСобытия = "ОбновитьФорму"
	  И (ТипИсточника = Тип("ДокументСсылка.ПриходныйКассовыйОрдер")
	 ИЛИ ТипИсточника = Тип("ДокументСсылка.ПоступлениеНаРасчетныйСчет")) Тогда
	 
		// Определяем параметры.
		РасшифровкаПлатежа = Источник.РасшифровкаПлатежа;
	
		// Ищем строки документа в табличных частях.
		МассивИДСтрокСОшибками = ПолучитьСтрокиНаСервере(ДеревоПлатежныхДокументовСОшибками, Источник.Ссылка);
		МассивИДСтрокБезОшибок = ПолучитьСтрокиНаСервере(ДеревоПлатежныхДокументовБезОшибок, Источник.Ссылка);
		
		Если РасшифровкаПлатежа.Количество() = 0
		 ИЛИ Источник.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПКО.ПрочийПриход")
		 ИЛИ Источник.ВидОперации = ПредопределенноеЗначение("Перечисление.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление") Тогда
			
			// ТЧ Ошибки.
			Для каждого ТекИдентификатор из МассивИДСтрокСОшибками Цикл
				ТекСтрока = ДеревоПлатежныхДокументовСОшибками.НайтиПоИдентификатору(ТекИдентификатор);
				ТекСтрока.Сумма = Источник.СуммаДокумента;
				ПроверкаСовпаденияСуммПДиРО(ТекСтрока);
			КонецЦикла;
			
			// ТЧ Без ошибок.
			Для каждого ТекИдентификатор из МассивИДСтрокБезОшибок Цикл
				ТекСтрока = ДеревоПлатежныхДокументовБезОшибок.НайтиПоИдентификатору(ТекИдентификатор);
				ТекСтрока.Сумма = Источник.СуммаДокумента;
				ПроверкаСовпаденияСуммПДиРО(ТекСтрока);
				
				Если НЕ ТекСтрока.СуммыСовпадают Тогда
					
					ПоказатьПредупреждение(Неопределено, "Суммы платежей документа """ + Источник.Ссылка + """ не совпадают с имеющимися в таблице суммами.");
				
					МассивДляУдаления = Новый Массив;
					ВеткаКонтрагент   = ДеревоПлатежныхДокументовСОшибками.ПолучитьЭлементы().Добавить();
					
					ВеткаКонтрагент.Контрагент = ТекСтрока.Контрагент;
					ВеткаКонтрагент.Договор    = ТекСтрока.Договор;
					ВеткаКонтрагент.Сумма      = ТекСтрока.Сумма;
					ВеткаКонтрагент.Номер      = ТекСтрока.Номер;
					ВеткаКонтрагент.Дата       = ТекСтрока.Дата;
					ВеткаКонтрагент.НазначениеПлатежа = ТекСтрока.НазначениеПлатежа;
					ВеткаКонтрагент.Документ          = ТекСтрока.Документ;
					ВеткаКонтрагент.Готовность        = 0;
					ВеткаКонтрагент.СуммыСовпадают    = Ложь;
					ВеткаКонтрагент.ЕстьРО            = ТекСтрока.ЕстьРО;
					ВеткаКонтрагент.СуммаРО           = ТекСтрока.СуммаРО;
					
					СписокЛС = Новый Массив;
					Для Каждого ТекПодСтрока Из ТекСтрока.ПолучитьЭлементы() Цикл
						СписокЛС.Добавить(ТекПодСтрока.Контрагент);
						ВеткаЛС            = ВеткаКонтрагент.ПолучитьЭлементы().Добавить();
						ВеткаЛС.Пометка    = ТекПодСтрока.Пометка;
						ВеткаЛС.Контрагент = ТекПодСтрока.Контрагент;
						ВеткаЛС.Сумма      = ТекПодСтрока.Сумма;
						ВеткаЛС.Документ   = ТекПодСтрока.Документ;
						ВеткаЛС.Дата       = ТекПодСтрока.Дата;
						ВеткаЛС.Номер      = ТекПодСтрока.Номер;
						ВеткаЛС.ЕстьРО     = ТекПодСтрока.ЕстьРО;
						ВеткаЛС.КонтрагентСовпадает = ТекПодСтрока.КонтрагентСовпадает;
						ВеткаЛС.ДоговорСовпадает    = ТекПодСтрока.ДоговорСовпадает;
						ВеткаЛС.Готовность = 0;
					КонецЦикла;
					
					// При корректировке добавляем строки с л/с если есть неоднозначные соответствия.
					ДобавлениеЛСПриНеоднозначномСоответствии(ВеткаКонтрагент, СписокЛС);
					
					МассивДляУдаления.Добавить(ТекСтрока);
					
					Для каждого ТекВетка Из МассивДляУдаления Цикл
						ДеревоПлатежныхДокументовБезОшибок.ПолучитьЭлементы().Удалить(ТекВетка);
					КонецЦикла;
					
					ИнформационнаяСтрокаЗагрузки = "";
					
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			СтруктураОтбора = Новый Структура("Документ, Контрагент, Договор");
			СтруктураОтбора.Документ   = Источник.Ссылка;
			СтруктураОтбора.Контрагент = ?(Источник.Контрагент.Пустая(), Источник.СубконтоКт1, Источник.Контрагент);
			
			Для каждого ТекПлатеж из РасшифровкаПлатежа Цикл
				
				МассивИДСтрокПлатежаСОшибками = ПолучитьСтрокиНаСервере(ДеревоПлатежныхДокументовСОшибками, ТекПлатеж.ДоговорКонтрагента);
				МассивИДСтрокПлатежаБезОшибок = ПолучитьСтрокиНаСервере(ДеревоПлатежныхДокументовБезОшибок, ТекПлатеж.ДоговорКонтрагента);
				
				СтрокиОтбора = РасшифровкаПлатежа.НайтиСтроки(Новый Структура("ДоговорКонтрагента", ТекПлатеж.ДоговорКонтрагента));
				
				// ТЧ Ошибки.
				Если НЕ МассивИДСтрокПлатежаСОшибками.Количество() = 0 Тогда
					СтрокаДереваСОшибками = ДеревоПлатежныхДокументовСОшибками.НайтиПоИдентификатору(МассивИДСтрокПлатежаСОшибками[0]);
					Сумма = 0;
					Для каждого ТекСтрока из СтрокиОтбора Цикл
						Сумма = Сумма + ТекСтрока.СуммаПлатежа;
					КонецЦикла;
					СтрокаДереваСОшибками.Сумма = Сумма;
					ПроверкаСовпаденияСуммПДиРО(СтрокаДереваСОшибками);
				КонецЕсли;
				
				// ТЧ Без ошибок.
				Если НЕ МассивИДСтрокПлатежаБезОшибок.Количество() = 0 Тогда
					СтрокаДереваБезОшибок = ДеревоПлатежныхДокументовБезОшибок.НайтиПоИдентификатору(МассивИДСтрокПлатежаБезОшибок[0]);
					Сумма = 0;
					Для каждого ТекСтрока из СтрокиОтбора Цикл
						Сумма = Сумма + ТекСтрока.СуммаПлатежа;
					КонецЦикла;
					СтрокаДереваБезОшибок.Сумма = Сумма;
					ПроверкаСовпаденияСуммПДиРО(СтрокаДереваБезОшибок);
					
					Если НЕ СтрокаДереваБезОшибок.СуммыСовпадают Тогда
						
						ПоказатьПредупреждение(Неопределено, "Суммы платежей документа """ + Источник.Ссылка + """ не совпадают с имеющимися в таблице суммами.");
					
						МассивДляУдаления = Новый Массив;
						ВеткаКонтрагент   = ДеревоПлатежныхДокументовСОшибками.ПолучитьЭлементы().Добавить();
						
						ВеткаКонтрагент.Контрагент = СтрокаДереваБезОшибок.Контрагент;
						ВеткаКонтрагент.Договор    = СтрокаДереваБезОшибок.Договор;
						ВеткаКонтрагент.Сумма      = ТекПлатеж.СуммаПлатежа;
						ВеткаКонтрагент.Номер      = СтрокаДереваБезОшибок.Номер;
						ВеткаКонтрагент.Дата       = СтрокаДереваБезОшибок.Дата;
						ВеткаКонтрагент.НазначениеПлатежа = СтрокаДереваБезОшибок.НазначениеПлатежа;
						ВеткаКонтрагент.Документ          = СтрокаДереваБезОшибок.Документ;
						ВеткаКонтрагент.Готовность        = 0;
						ВеткаКонтрагент.СуммыСовпадают    = Ложь;
						ВеткаКонтрагент.ЕстьРО            = СтрокаДереваБезОшибок.ЕстьРО;
						ВеткаКонтрагент.СуммаРО           = СтрокаДереваБезОшибок.СуммаРО;
						
						СписокЛС = Новый Массив;
						Для Каждого ТекСтрока Из СтрокаДереваБезОшибок.ПолучитьЭлементы() Цикл
							СписокЛС.Добавить(ТекСтрока.Контрагент);
							ВеткаЛС            = ВеткаКонтрагент.ПолучитьЭлементы().Добавить();
							ВеткаЛС.Пометка    = ТекСтрока.Пометка;
							ВеткаЛС.Контрагент = ТекСтрока.Контрагент;
							ВеткаЛС.Сумма      = ТекСтрока.Сумма;
							ВеткаЛС.Документ   = ТекСтрока.Документ;
							ВеткаЛС.Дата       = ТекСтрока.Дата;
							ВеткаЛС.Номер      = ТекСтрока.Номер;
							ВеткаЛС.ЕстьРО     = ТекСтрока.ЕстьРО;
							ВеткаЛС.КонтрагентСовпадает = ТекСтрока.КонтрагентСовпадает;
							ВеткаЛС.ДоговорСовпадает    = ТекСтрока.ДоговорСовпадает;
							ВеткаЛС.Готовность = 0;
						КонецЦикла;
						
						// При корректировке добавляем строки с л/с если есть неоднозначные соответствия.
						ДобавлениеЛСПриНеоднозначномСоответствии(ВеткаКонтрагент, СписокЛС);
						
						МассивДляУдаления.Добавить(СтрокаДереваБезОшибок);
						
						Для каждого ТекВетка Из МассивДляУдаления Цикл
							ДеревоПлатежныхДокументовБезОшибок.ПолучитьЭлементы().Удалить(ТекВетка);
						КонецЦикла;
						
						ИнформационнаяСтрокаЗагрузки = "";
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ПроверкаНаОшибкиПолная();
		ПроверитьИОбновитьИнфСтроку(Истина);
		УправлениеФормой(ЭтаФорма);
		
	// Был изменен РО.
	ИначеЕсли ИмяСобытия = "ПроведенРО" И Параметр = Истина И ТипИсточника = Тип("ДокументСсылка.КВП_РегистрацияОплаты") Тогда
		
		ПоказатьПредупреждение(Неопределено, "Документ """ + Источник.Ссылка + """ был изменен. Для корректного отображения внесенных изменений требуется нажать кнопку ""Заполнить"".");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтрокиНаСервере(ТекДерево, Источник)
	
	МассивИдентификаторов = Новый Массив;
	Для Каждого ТекВетка Из ТекДерево.ПолучитьЭлементы() Цикл
		Если ТекВетка.Документ = Источник Или ТекВетка.Договор = Источник Тогда
			МассивИдентификаторов.Добавить(ТекВетка.ПолучитьИдентификатор());
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивИдентификаторов;
	
КонецФункции

&НаСервере
// Дополняет таблицу РО лицевыми счетами, удаленными при корректировке.
Процедура ДополнитьТаблицуРО(ТаблицаРО)
	
	// Запрос на получение л/с не вошедших в таблицу РО.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаПлатежей.Документ,
	|	ТаблицаПлатежей.ДокументРО,
	|	ТаблицаПлатежей.ЛицевойСчет
	|ПОМЕСТИТЬ втТаблицаПлатежейВход
	|ИЗ
	|	&ТаблицаПлатежей КАК ТаблицаПлатежей
	|ГДЕ
	|	ТаблицаПлатежей.ДокументРО ЕСТЬ НЕ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРО.ДокументПД,
	|	ТаблицаРО.ДокументРО,
	|	ТаблицаРО.ЛицевойСчет
	|ПОМЕСТИТЬ втТаблицаРО
	|ИЗ
	|	&ТаблицаРО КАК ТаблицаРО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втТаблицаПлатежейВход.Документ,
	|	втТаблицаПлатежейВход.ДокументРО,
	|	втТаблицаПлатежейВход.ЛицевойСчет
	|ПОМЕСТИТЬ втТаблицаПлатежей
	|ИЗ
	|	втТаблицаРО КАК втТаблицаРО
	|		ЛЕВОЕ СОЕДИНЕНИЕ втТаблицаПлатежейВход КАК втТаблицаПлатежейВход
	|		ПО втТаблицаРО.ДокументПД = втТаблицаПлатежейВход.Документ
	|			И втТаблицаРО.ДокументРО = втТаблицаПлатежейВход.ДокументРО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаПлатежей.Документ,
	|	втТаблицаПлатежей.ДокументРО,
	|	втТаблицаПлатежей.ЛицевойСчет КАК ЛицевойСчет,
	|	втТаблицаРО.ЛицевойСчет КАК ЛицевойСчет1
	|ИЗ
	|	втТаблицаПлатежей КАК втТаблицаПлатежей
	|		ПОЛНОЕ СОЕДИНЕНИЕ втТаблицаРО КАК втТаблицаРО
	|		ПО втТаблицаПлатежей.Документ = втТаблицаРО.ДокументПД
	|			И втТаблицаПлатежей.ДокументРО = втТаблицаРО.ДокументРО
	|			И втТаблицаПлатежей.ЛицевойСчет = втТаблицаРО.ЛицевойСчет
	|ГДЕ
	|	втТаблицаПлатежей.ДокументРО ЕСТЬ НЕ NULL 
	|	И втТаблицаРО.ЛицевойСчет ЕСТЬ NULL ";
	
	Запрос.УстановитьПараметр("ТаблицаПлатежей", ТаблицаПлатежей.Выгрузить());
	Запрос.УстановитьПараметр("ТаблицаРО",       ТаблицаРО);
	
	ТаблицаУдаленныхЛС = Запрос.Выполнить().Выгрузить();
	
	// Дополняем таблицу РО лицевыми счетами, не вошедшими в таблицу.
	Для каждого ТекСтрока из ТаблицаУдаленныхЛС Цикл
		НоваяСтрока = ТаблицаРО.Добавить();
		НоваяСтрока.ДокументПД  = ТекСтрока.Документ;
		НоваяСтрока.ДокументРО  = ТекСтрока.ДокументРО;
		НоваяСтрока.ЛицевойСчет = ТекСтрока.ЛицевойСчет;
		НоваяСтрока.СуммаРО     = 0;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
// Определяет необходимость перезаполнения записей КУДиР.
//
Процедура ПерезаполнятьЗаписиКУДиР(ПерезаполнитьЗаписиКУДиР, НастройкиУчетнойПолитикиЖКХ, КонецПериода, Организация)
	
	ПрименяетсяУСН              = УПЖКХ_ТиповыеМетодыСервер.СистемаНалогообложения(Организация, КонецПериода) = Перечисления.СистемыНалогообложения.Упрощенная;
	АвтоматическиЗаполнятьКУДиР = НЕ НастройкиУчетнойПолитикиЖКХ.ОбнулятьДоходыВсего
	                            И НЕ НастройкиУчетнойПолитикиЖКХ.ОбнулятьДоходыПринимаемые
	                            И НЕ НастройкиУчетнойПолитикиЖКХ.ОтражениеОплатыВРазрезеУслуг;
	
	ПерезаполнитьЗаписиКУДиР = ПрименяетсяУСН И НЕ АвтоматическиЗаполнятьКУДиР;
	
КонецПроцедуры // ПерезаполнитьЗаписиКУДиР()

#КонецОбласти

//++ЖКХ
&НаКлиенте
Процедура ПерераспределитьОплатуВДокументахСОшибками(Команда)
	ПерераспределитьОплатуВДокументахСОшибкамиПолнаяНаСервере();
КонецПроцедуры

&НаСервере
// Проверяет на ошибки все ветки дерева платежных документов с ошибками.
//
Процедура ПерераспределитьОплатуВДокументахСОшибкамиПолнаяНаСервере()
	
	ДеревоПлатежныхДокументовСОшибкамиЭлементы = ДеревоПлатежныхДокументовСОшибками.ПолучитьЭлементы();
	ТекВеткаИнд = 0;
	
		
	Пока ТекВеткаИнд < ДеревоПлатежныхДокументовСОшибкамиЭлементы.Количество() Цикл
		ТекВеткаОш = ДеревоПлатежныхДокументовСОшибкамиЭлементы[ТекВеткаИнд];
		КоличествоСтрок = ТекВеткаОш.ПолучитьЭлементы().Количество();
		ГотовыхСтрок    = 0;
		СкрытыхСтрок = 0;
		
		ТекВеткаОшЭлементы = ТекВеткаОш.ПолучитьЭлементы();
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
						|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.ЛицевойСчет КАК ЛицевойСчет,
						|	КВП_ВзаиморасчетыПоЛицевымСчетамОстатки.СуммаНачисленияОстаток КАК СуммаНачисленияОстаток
						|ИЗ
						|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(&ДатаОкончание, 
						|   Организация = &Организация и Договор.Владелец в иерархии (&Контрагент)) КАК КВП_ВзаиморасчетыПоЛицевымСчетамОстатки";
			Запрос.УстановитьПараметр("ДатаОкончание",	КонецМесяца(ТекВеткаОш.Дата)+1);
			Запрос.УстановитьПараметр("Организация",	Объект.Организация);
			Запрос.УстановитьПараметр("Контрагент",  ТекВеткаОш.Контрагент);
			ТаблицаОстатковПоЛицевымСчетам = Новый ТаблицаЗначений;
			ТаблицаОстатковПоЛицевымСчетам = Запрос.Выполнить().Выгрузить();


		
			ТЗРаспределения = Новый ТаблицаЗначений;
			ТЗРаспределения.Колонки.Добавить("ЛицевойСчет", Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
			ТЗРаспределения.Колонки.Добавить("Сальдо");
			ТЗРаспределения.Колонки.Добавить("Индекс");

			jj = 0;
			СуммаСальдо = 0;
		Пока jj < ТекВеткаОшЭлементы.Количество() Цикл
		  ТекСтрокаОш = ТекВеткаОшЭлементы[jj];
		  СкрытьСтроку = ПерераспределитьОплатуВДокументахСОшибкамиНаСервере(ТекСтрокаОш.ПолучитьИдентификатор());
			Если СкрытьСтроку тогда
				СкрытыхСтрок = СкрытыхСтрок + 1;
				//ТекВеткаОшЭлементы.Удалить(jj);
				иначе если ТекСтрокаОш.ДоговорСовпадает тогда
					 					 
					 НоваяСтрокаРаспределения = ТЗРаспределения.Добавить();
					 НоваяСтрокаРаспределения.ЛицевойСчет = ТекСтрокаОш.Контрагент;
					 НоваяСтрокаРаспределения.Индекс = jj;
					 СтрокаОстаткаПоЛС = ТаблицаОстатковПоЛицевымСчетам.Найти(ТекСтрокаОш.Контрагент,"ЛицевойСчет");
					 Если СтрокаОстаткаПоЛС <> Неопределено Тогда
						 	 							//ира  ++
					   если СтрокаОстаткаПоЛС.СуммаНачисленияОстаток>=0 тогда 
							НоваяСтрокаРаспределения.Сальдо = СтрокаОстаткаПоЛС.СуммаНачисленияОстаток;
							СуммаСальдо = СуммаСальдо + НоваяСтрокаРаспределения.Сальдо;
							иначе  НоваяСтрокаРаспределения.Сальдо = СтрокаОстаткаПоЛС.СуммаНачисленияОстаток;
							КонецЕсли;

							//НоваяСтрокаРаспределения.Сальдо = СтрокаОстаткаПоЛС.СуммаНачисленияОстаток;
							//СуммаСальдо = СуммаСальдо + НоваяСтрокаРаспределения.Сальдо;
							//ира  --

							Иначе
							НоваяСтрокаРаспределения.Сальдо = 0;
						КонецЕсли;							 
					КонецЕсли;
				КонецЕсли;
				ТекСтрокаОш.Пометка = Ложь;
		jj = jj + 1;	
	КонецЦикла;
	
		СуммаОплатыОстаток = ТекВеткаОш.Сумма;
		СуммаМакс = 0;
		Инд = 0;
		Для каждого Распр из ТЗРаспределения Цикл
				ТекСтрока = ТекВеткаОшЭлементы[Распр.Индекс];
				ТекСтрока.Сумма = 0;
				Если не СуммаСальдо = 0 тогда
														//ира++
					   если Распр.Сальдо<0 тогда Коэфф=0
					иначе Коэфф = Распр.Сальдо / СуммаСальдо;
						 //иначе Коэфф = ТекВеткаОш.Сумма *100/ Распр.Сальдо;

					конецЕсли;

					//ира--

				//Коэфф = Распр.Сальдо / СуммаСальдо;	    //ира
		        ТекСтрока.Сумма = ОКР((ТекВеткаОш.Сумма * коэфф), 2);
				Если не ТекСтрока.Сумма = 0 тогда
					ТекСтрока.Пометка = Истина;
				КонецЕсли;
			Иначе
				ТекСтрока.Сумма =ОКР(( ТекВеткаОш.Сумма / ТЗРаспределения.Количество()), 2) ;
				Если не ТекСтрока.Сумма = 0 тогда
					ТекСтрока.Пометка = Истина;
				КонецЕсли;
			КонецЕсли;
			
			СуммаОплатыОстаток = СуммаОплатыОстаток - ТекСтрока.Сумма;
				Если СуммаМакс <  ТекСтрока.Сумма тогда
					СуммаМакс = ТекСтрока.Сумма;
					Инд = Распр.Индекс;
				КонецЕсли;
			КонецЦикла;
			Если СуммаОплатыОстаток <> 0 тогда
				ТекСтрока = ТекВеткаОшЭлементы[Инд];
				ТекСтрока.Сумма = ТекСтрока.Сумма + СуммаОплатыОстаток;
			КонецЕсли;
			
	Если ТекВеткаОшЭлементы.Количество()=1 И ТекВеткаОшЭлементы[0].Пометка = Ложь Тогда
			ТекВеткаОшЭлементы[0].Сумма = СуммаОплатыОстаток;
			СуммаОплатыОстаток = 0;
			ТекВеткаОшЭлементы[0].Пометка = Истина;	
		КонецЕсли;
			
		
		Если ГотовыхСтрок = КоличествоСтрок Тогда
			ТекВеткаОш.Готовность = 1;
		КонецЕсли;
		Если СкрытыхСтрок = КоличествоСтрок Тогда
			ДеревоПлатежныхДокументовСОшибкамиЭлементы.Удалить(ТекВеткаИнд);
		Иначе
			ТекВеткаИнд = ТекВеткаИнд + 1;
		КонецЕсли;
			
	КонецЦикла;
	ПроверкаНаОшибкиПолная();
	
КонецПроцедуры // ПроверкаНаОшибкиПолная()

&НаСервере
// Проверяет на ошибки, устанавливает значение полей "Готовность" и "Пометка".
//
// Параметры
//  ИдентификаторСтроки - идентификатор строки ветки дерева платежных документов с ошибками.
//  ПриЗаполненииТаблицы - булево - указывает, что процедура вызывается при первоначальном
//                 заполнении табличных частей обработки.
//
Функция ПерераспределитьОплатуВДокументахСОшибкамиНаСервере(ИдентификаторСтроки, ПриЗаполненииТаблицы = Ложь)
	
	ТекВетка = ДеревоПлатежныхДокументовСОшибками.НайтиПоИдентификатору(ИдентификаторСтроки);
	СкрытьСтроку = Ложь;
	Если НЕ ТекВетка.ПолучитьРодителя() = Неопределено Тогда
		
		// Если найдены какие-либо ошибки, записываем информацию о них в строку описания ошибки.
		ОписаниеОшибки = "";
		
		Готовность = 1;
		
		Если НЕ ЗначениеЗаполнено(ТекВетка.Контрагент) Тогда
			ОписаниеОшибки = ОписаниеОшибки + "Не указан лицевой счет";
			Готовность = 0;
		ИначеЕсли НЕ ТекВетка.КонтрагентСовпадает Тогда
			ОписаниеОшибки = ОписаниеОшибки + ?(ОписаниеОшибки = "", "", "; ") + "Лицевой счет не соответствует контрагенту";
			// Если сумма равна нулю, то переносить можно.
			Готовность = ?(ТекВетка.Сумма = 0, 1, 0);
			СкрытьСтроку = Истина;
		ИначеЕсли НЕ ТекВетка.ДоговорСовпадает Тогда
			// Прямой ошибкой не является, позволяет занести ветку в строку без ошибок.
			ОписаниеОшибки = ОписаниеОшибки + ?(ОписаниеОшибки = "", "", "; ") + "Лицевой счет не соответствует договору контрагента";
			//Готовность = 0;
			СкрытьСтроку = Истина;
		КонецЕсли;
		
		Если ТекВетка.Сумма = 0 И НЕ (ТекВетка.ЕстьРО И Не ТекВетка.ПолучитьРодителя() = Неопределено И ТекВетка.ПолучитьРодителя().СуммыСовпадают) Тогда
			ОписаниеОшибки = ОписаниеОшибки + ?(ОписаниеОшибки = "", "", "; ") + "Не указана сумма";
			Готовность = 0;
			
			Если ТекВетка.ДоговорСовпадает Тогда
				ТекВетка.ПолучитьРодителя().Готовность = 0;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ТекВетка.ПолучитьРодителя() = Неопределено И НЕ ТекВетка.ПолучитьРодителя().СуммыСовпадают Тогда
			ОписаниеОшибки = ОписаниеОшибки + ?(ОписаниеОшибки = "", "", "; ") + "Сумма оплат не совпадает с суммой платежного документа";
			Готовность = 0;
		КонецЕсли;
		
		ТекВетка.Готовность = Готовность;
		Если ПриЗаполненииТаблицы Тогда
			ТекВетка.Пометка = ?(ТекВетка.ЕстьРО, Истина, НЕ ТекВетка.Сумма = 0);
		КонецЕсли;
		
		ТекВетка.ОписаниеОшибок = ОписаниеОшибки;
		
	КонецЕсли;
	Возврат СкрытьСтроку;
КонецФункции

//Позолотина++
&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	ЗаполнитьДанныеНаКлиенте();

КонецПроцедуры



&НаКлиенте
Процедура УдалитьСтрокиБезПометки(Команда)
	// Вставить содержимое обработчика.
	УдалитьСтрокиБезПометкиНаСервере();
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокиБезПометкиНаСервере()
	ДеревоПлатежныхДокументовСОшибкамиЭлементы = ДеревоПлатежныхДокументовСОшибками.ПолучитьЭлементы();
	ТекВеткаИнд = 0;
	Пока ТекВеткаИнд < ДеревоПлатежныхДокументовСОшибкамиЭлементы.Количество() Цикл
		ТекВетка = ДеревоПлатежныхДокументовСОшибкамиЭлементы[ТекВеткаИнд];
		  ТекВеткаЭлементы = ТекВетка.ПолучитьЭлементы();
		 кол = 0;
		 Пока кол < ТекВеткаЭлементы.Количество() Цикл
			 ЭлементВетки = ТекВеткаЭлементы[кол];
		 		Если ЭлементВетки.Пометка = Ложь тогда
		  			ТекВеткаЭлементы.Удалить(кол);
	  			иначе
		  			кол = кол + 1;  
				КонецЕсли;	 
		КонецЦикла;	 
	  ТекВеткаИнд = ТекВеткаИнд + 1;  
	КонецЦикла;
	КонецПроцедуры;
