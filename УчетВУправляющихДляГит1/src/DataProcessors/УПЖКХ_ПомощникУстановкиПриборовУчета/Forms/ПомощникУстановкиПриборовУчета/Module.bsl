
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЕ

#Область ПроцедурыИФункцииОбщегоНазначения

&НаКлиентеНаСервереБезКонтекста
// Устанавливает видимость элементов формы.
Процедура УправлениеФормой(Форма)
	
	ЭлементыФормы = Форма.Элементы;
	ОбъектФормы = Форма.Объект;
	
	ТекущаяСтраница = ЭлементыФормы.ПанельОсновная.ТекущаяСтраница;
	Если ТекущаяСтраница = ЭлементыФормы.СтраницаОдин Тогда
		ЭлементыФормы.ПолеНомерПУ.Доступность = ОбъектФормы.ВручнуюФормироватьИменаСчетчиков;
	ИначеЕсли ТекущаяСтраница = ЭлементыФормы.СтраницаДва Тогда
		ОбщийМетодВводаДанных = (ОбъектФормы.МетодВводаДанных = 1);
		
		ЭлементыФормы.ГруппаПараметрыПУ.Видимость = ОбщийМетодВводаДанных;
		
		ЭлементыФормы.СчетчикиСчетчик.Видимость                    = ОбъектФормы.ВручнуюФормироватьИменаСчетчиков;
		ЭлементыФормы.СчетчикиСчетчикНаименование.Видимость        = ОбъектФормы.ВручнуюФормироватьИменаСчетчиков;
		
		ЭлементыФормы.СчетчикиТарифность.Видимость                           = Не ОбщийМетодВводаДанных;
		ЭлементыФормы.СчетчикиРазрядность.Видимость                          = Не ОбщийМетодВводаДанных;
		ЭлементыФормы.СчетчикиСпособРегистрацииПоказаний.Видимость           = Не ОбщийМетодВводаДанных;
		ЭлементыФормы.СчетчикиКоэффициент.Видимость                          = Не ОбщийМетодВводаДанных;
		ЭлементыФормы.СчетчикиИспользоватьТемпературныйКоэффициент.Видимость = Не ОбщийМетодВводаДанных;
		ЭлементыФормы.СчетчикиГруппаСчетчиков.Видимость                      = Не ОбщийМетодВводаДанных;
		
		ЭлементыФормы.СчетчикиДневноеПоказание.Видимость = ОбъектФормы.ВводитьПоказанияСчетчиков;
		ЭлементыФормы.СчетчикиНочноеПоказание.Видимость  = ОбъектФормы.ВводитьПоказанияСчетчиков;
		ЭлементыФормы.СчетчикиПиковоеПоказание.Видимость = ОбъектФормы.ВводитьПоказанияСчетчиков;
		
		Если ОбъектФормы.МетодВводаДанных = 1 И ОбъектФормы.ВводитьПоказанияСчетчиков Тогда
			
			Если ОбъектФормы.Тарифность = ПредопределенноеЗначение(
											"Перечисление.КВП_ТарифностьСчетчиков.Двухтарифный") Тогда
				ЭлементыФормы.СчетчикиПиковоеПоказание.Видимость = Ложь;
				
			ИначеЕсли ОбъектФормы.Тарифность = ПредопределенноеЗначение(
												"Перечисление.КВП_ТарифностьСчетчиков.Однотарифный") Тогда
				ЭлементыФормы.СчетчикиНочноеПоказание.Видимость  = Ложь;
				ЭлементыФормы.СчетчикиПиковоеПоказание.Видимость = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ОбновитьПанельИнформации(ЭлементыФормы, ОбъектФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Проверяет, корректно ли заполнены данные.
//
// Возвращаемое значение:
//  Булево – корректно ли заполнены данные.
//
Функция ДанныеЗаполненыКорректно(Отказ)
	ТекущаяСтраница = Элементы.ПанельОсновная.ТекущаяСтраница;
	
	Если ТекущаяСтраница = Элементы.СтраницаОдин Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
			НСтрока = НСтр("ru = 'Не заполнена дата установки ПУ!'");
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(НСтрока, , "Объект.Дата", , Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			НСтрока = НСтр("ru = 'Не указана организация!'");
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(НСтрока, , "Объект.Организация", , Отказ);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.Услуга) Тогда
			НСтрока = НСтр("ru = 'Не выбрана услуга!'");
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(НСтрока, , "Объект.Услуга", , Отказ);
		КонецЕсли;
		
		Если ПустаяСтрока(Объект.НаименованиеУслугиДляИмениСчетчика) Тогда
			НСтрока = НСтр("ru = 'Не указано имя услуги для формирования имен счетчиков!'");
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(НСтрока, , "Объект.НаименованиеУслугиДляИмениСчетчика", , Отказ);
		КонецЕсли;
		
		Если Объект.МетодВводаДанных = 1 Тогда
			Если Не ЗначениеЗаполнено(Объект.Тарифность) Тогда
				НСтрока = НСтр("ru = 'Не указана тарифность!'");
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(НСтрока, Отказ);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Объект.Разрядность) Тогда
				НСтрока = НСтр("ru = 'Не указана разрядность!'");
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(НСтрока, Отказ);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Объект.Коэффициент) Тогда
				НСтрока = НСтр("ru = 'Не указан коэффициент трансформации!'");
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(НСтрока, Отказ);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Объект.СпособРегистрацииПоказаний) Тогда
				НСтрока = НСтр("ru = 'Не указан способ регистрации показаний!'");
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(НСтрока, Отказ);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаДва Тогда
		
		Если Объект.Счетчики.Количество() = 0 Тогда
			НСтрока = НСтр("ru = 'Не заполнена таблица объектов!'");
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(НСтрока, Отказ);
		КонецЕсли;
		
		Если Объект.ВручнуюФормироватьИменаСчетчиков Тогда
			СписокОшибок = ПолучитьСписокОшибокСчетчикиСервер();
			Для Каждого Ошибка Из СписокОшибок Цикл
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(Ошибка.Представление, Отказ);
			КонецЦикла;
		КонецЕсли;
		
		Если ВедетсяУчетПриборовУчетаПоСтоякам Тогда
			СписокОшибок = ПолучитьСписокОшибокНесоответствияРесурсовПУИСтояков();
			Для Каждого Ошибка Из СписокОшибок Цикл
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(Ошибка.Представление, Отказ);
			КонецЦикла;
		КонецЕсли;
		
		СтруктураОбязательныхПолей = Новый Структура;
		СтруктураОбязательныхПолей.Вставить("Объект");
		СтруктураОбязательныхПолей.Вставить("ДатаВключения");
		
		// Если индивидуальный ввод данных.
		Если Объект.МетодВводаДанных = 2 Тогда
			СтруктураОбязательныхПолей.Вставить("Тарифность");
			СтруктураОбязательныхПолей.Вставить("Разрядность");
			СтруктураОбязательныхПолей.Вставить("Коэффициент");
			СтруктураОбязательныхПолей.Вставить("СпособРегистрацииПоказаний");
		КонецЕсли;
		
		// Цикл по строкам табличной части.
		Для Каждого СтрокаТаблицы Из Объект.Счетчики Цикл

			// Цикл по проверяемым полям.
			Для каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
				
				КлючСтруктуры = КлючЗначение.Ключ;
				Если ЗначениеЗаполнено(СтрокаТаблицы.Счетчик)
				   И ТипЗнч(СтрокаТаблицы.Счетчик) = Тип("СправочникСсылка.КВП_Счетчики")
				   И (КлючСтруктуры = "Тарифность" Или КлючСтруктуры = "Разрядность" Или КлючСтруктуры = "Коэффициент"
				   		Или КлючСтруктуры = "СпособРегистрацииПоказаний") Тогда
					Продолжить;
				КонецЕсли;
				
				Значение = СтрокаТаблицы[КлючСтруктуры];
				Если НЕ ЗначениеЗаполнено(Значение) Тогда
					
					ПредставлениеТабличнойЧасти = "" + "Счетчики" + "";
					
					МетаданныеРеквизиты = ПолучитьСписокРеквизитовСчетчикиСервер();
						
					СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(СтрокаТаблицы.НомерСтроки)
													 + """ табличной части """ + ПредставлениеТабличнойЧасти + """: ";
					
					Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
						ПредставлениеРеквизита = МетаданныеРеквизиты.НайтиПоЗначению(КлючЗначение.Ключ).Представление;
						СтрокаСообщения = "Не заполнено значение реквизита """ + СокрЛП(ПредставлениеРеквизита) + """!";
					Иначе
						СтрокаСообщения = КлючЗначение.Значение;
					КонецЕсли;
					
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + СтрокаСообщения, Отказ);

				КонецЕсли;

			КонецЦикла;

		КонецЦикла;
		
	КонецЕсли;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
// Возвращает массив типов объектов.
Функция ОпределитьМассивТипов()
	
	МассивТипов = Новый Массив;
	
	МассивТипов.Добавить(Тип("СправочникСсылка.КВП_Здания"));
	МассивТипов.Добавить(Тип("СправочникСсылка.КВП_Подъезды"));
	МассивТипов.Добавить(Тип("СправочникСсылка.УПЖКХ_Помещения"));
	МассивТипов.Добавить(Тип("СправочникСсылка.КВП_ЛицевыеСчета"));
	
	Возврат МассивТипов;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("Услуга",          Объект.Услуга);
	Параметры.Свойство("ГруппаСчетчиков", ГруппаСчетчиков);
	Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьОсновнуюОрганизацию();
	Объект.Дата = НачалоМесяца(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
	Объект.РасположениеНомераСчетчикаВНаименовании = 1;
	Объект.МетодВводаДанных = 1;
	
	// Значения по умолчанию, параметры ПУ "Сводно".
	Объект.Тарифность                 = Перечисления.КВП_ТарифностьСчетчиков.Однотарифный;
	Объект.Разрядность                = 6;
	Объект.Коэффициент                = 1;
	Объект.СпособРегистрацииПоказаний = Перечисления.КВП_СпособыРегистрацииПоказанийСчетчиков.НарастающимИтогом;
	
	Объект.ИспользоватьТемпературныйКоэффициент = Ложь;
	
	ВедетсяУчетПриборовУчетаПоСтоякам = УПЖКХ_ВводПоказанийПриборовУчетаСервер.ИспользоватьФункционалУчетаПУПоСтоякам();
	
	// ОбщиеМеханизмыИКоманды
	ОТР_ПодключаемыеОбщиеМеханизмыИКоманды.ПриСозданииНаСервере(ЭтаФорма);
	// Конец ОбщиеМеханизмыИКоманды
	
	Элементы.СчетчикиСчетчик.ОграничениеТипа = Новый ОписаниеТипов("Строка");
	
	// Реклама
	ОТР_РекламаКлиентСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец Реклама
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Устанавливаем текущую таблицу переходов.
	ТаблицаПереходовПоСценарию1();
	
	// Позиционируемся на первом шаге помощника.
	УстановитьПорядковыйНомерПерехода(1);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Отказ = Ложь;
	
	Если ДанныеИзменены Тогда
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаПередЗакрытием", ЭтаФорма),
					   "При закрытии формы все введенные данные будут потеряны. Закрыть форму?",
					   РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры // ПередЗакрытием()

&НаКлиенте
// Обработка результата вопроса, вызванного в обработчике "ПередЗакрытием()".
Процедура ОбработатьРезультатВопросаПередЗакрытием(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ДанныеИзменены = Ложь;
		ЭтаФорма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВопросаПредЗакрытием()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

#Область Реклама

&НаКлиенте
// Процедура - обработчик нажатия на картинку баннера.
Процедура Подключаемый_РекламаОткрытьСтраницуСайта(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОТР_РекламаКлиент.Подключаемый_РекламаОткрытьСтраницуСайта(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_РекламаОткрытьСтраницуСайта()

&НаКлиенте
// Процедура - обработчик нажатия на картинку закрытия баннера.
Процедура Подключаемый_РекламаКартникаЗакрытияБаннераНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ОТР_РекламаКлиент.Подключаемый_РекламаКартникаЗакрытияБаннераНажатие(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_РекламаОткрытьСтраницуСайта()

#КонецОбласти // Реклама

&НаКлиенте
Процедура УслугаПриИзменении(Элемент)
	
	Объект.НаименованиеУслугиДляИмениСчетчика = ПолучитьНаименованиеУслугиДляИмениСчетчикаСервер(Объект.Услуга);
	ДанныеИзменены = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УслугаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	СпособыРасчетаДляОтбораУслуги = Новый СписокЗначений;
	СпособыРасчетаДляОтбораУслуги.Добавить(ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчика"));
	СпособыРасчетаДляОтбораУслуги.Добавить(ПредопределенноеЗначение("Перечисление.КВП_СпособыРасчета.ПоПоказаниямСчетчикаИНорме"));
	
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("СпособРасчета", СпособыРасчетаДляОтбораУслуги));
	
	ОткрытьФорму("Справочник.КВП_Услуги.ФормаВыбора",
				 ПараметрыФормы,
				 ЭтаФорма,,,,
				 Новый ОписаниеОповещения("ОбработатьВыборУслуги", ЭтаФорма, Новый Структура("Элемент", Элемент)),
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // УслугаНачалоВыбора()

&НаКлиенте
// Обработчик выбора услуги, вызванного в процедуре "УслугаНачалоВыбора()".
Процедура ОбработатьВыборУслуги(РезультатВыбора, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВыбора = Неопределено Тогда
		Объект.Услуга = РезультатВыбора;
		УслугаПриИзменении(ДополнительныеПараметры.Элемент);
		ДанныеИзменены = Истина;
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВыборУслуги()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВручнуюФормироватьИменаСчетчиков".
//
Процедура ВручнуюФормироватьИменаСчетчиковПриИзменении(Элемент)
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "МетодВводаДанных".
//
Процедура МетодВводаДанныхПриИзменении(Элемент)
	УправлениеФормой(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик команды "КомандаЗаполнить".
Процедура КомандаЗаполнить(Команда)
	
	Если Не Объект.Счетчики.Количество() = 0 Тогда
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработатьРезультатВопросаКомандаЗаполнить", ЭтаФорма),
					   "Перед заполнением табличная часть будет очищена. Продолжить?",
					   РежимДиалогаВопрос.ДаНет,,
					   КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуВыбораОбъектов();
	
КонецПроцедуры // КомандаЗаполнить()

&НаКлиенте
// Обработчик выбора объектов, вызванного в процедуре-обработчике команды "ОткрытьФормуВыбораОбъектов()".
Процедура ОбработатьРезультатВопросаКомандаЗаполнить(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.Счетчики.Очистить();
	Иначе
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуВыбораОбъектов();
	
КонецПроцедуры // ОбработатьРезультатВопросаКомандаЗаполнить()

&НаКлиенте
// Процедура вызывает открытие формы выбора объектов.
Процедура ОткрытьФормуВыбораОбъектов()
	
	СтруктураПараметровОтбора = КВП_РаботаСДиалогами.ОпределитьПустуюСтруктуруПараметровОтбора();
	СписокТиповЗначений = Новый СписокЗначений;
	
	СписокТиповЗначений.Добавить("ЛицевыеСчета");
	СписокТиповЗначений.Добавить("Здания");
	СписокТиповЗначений.Добавить("Подъезды");
	СписокТиповЗначений.Добавить("Квартиры");
	
	СтруктураПараметровОтбора.Вставить("ТипЗначОбъекта"   , СписокТиповЗначений);
	СтруктураПараметровОтбора.Вставить("НачПериодЛС"      , Объект.Дата);
	СтруктураПараметровОтбора.Вставить("КонПериодЛС"      , Объект.Дата);
	СтруктураПараметровОтбора.Вставить("Организация"      , Объект.Организация);
	
	ОткрытьФорму("Обработка.КВП_ЗаполнениеПолучателямиУслуг.Форма",
				 СтруктураПараметровОтбора,
				 ЭтаФорма,,,,
				 Новый ОписаниеОповещения("ОбработатьВыборОбъектов", ЭтаФорма),
				 РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры // ОткрытьФормуВыбораОбъектов()

&НаКлиенте
// Обработчик события "ПриИзменении" поля "СчетчикиОбъект".
//
Процедура СчетчикиОбъектПриИзменении(Элемент)
	
	ТекущиеДанныеТЧ = Элементы.Счетчики.ТекущиеДанные;
	Если ТекущиеДанныеТЧ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивТипов = Новый Массив;
	Если ТипЗнч(ТекущиеДанныеТЧ.Объект) = Тип("СправочникСсылка.КВП_Здания") Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.КВП_Здания"));
	ИначеЕсли ТипЗнч(ТекущиеДанныеТЧ.Объект) = Тип("СправочникСсылка.КВП_Подъезды") Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.КВП_Подъезды"));
	ИначеЕсли ТипЗнч(ТекущиеДанныеТЧ.Объект) = Тип("СправочникСсылка.УПЖКХ_Помещения") Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.УПЖКХ_Помещения"));
	ИначеЕсли ТипЗнч(ТекущиеДанныеТЧ.Объект) = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
		МассивТипов.Добавить(Тип("СправочникСсылка.КВП_ЛицевыеСчета"));
	КонецЕсли;
	
	// После очистки поля "СчетчикиОбъект" устанавливать значение свойства не нужно.
	Если МассивТипов.Количество() > 0 Тогда
		Элементы.СчетчикиОбъект.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	КонецЕсли;
	
	ОбновитьНаименованиеСчетчикаВСтроке(ЭтаФорма, ТекущиеДанныеТЧ);
	
	// При изменении объекта очищаем стояк.
	ТекущиеДанныеТЧ.Стояк = Неопределено;
	
	Если ВедетсяУчетПриборовУчетаПоСтоякам 
	   И УПЖКХ_ВводПоказанийПриборовУчетаСервер.ПолучитьСписокДоступныхСтояков(ТекущиеДанныеТЧ.Объект, Объект.Услуга).Количество() > 0 Тогда
		ТекущиеДанныеТЧ.НастроенУчетПоСтоякам = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетчикиСчетчикПриИзменении(Элемент)
	
	ТекущиеДанныеТЧ = Элементы.Счетчики.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекущиеДанныеТЧ.Счетчик) Тогда
		
		НайденныйСчетчик = ПолучитьСчетчикПоНомеру(ТекущиеДанныеТЧ.Счетчик);
		Если Не НайденныйСчетчик.Пустая() Тогда
			ТекстСообщения = "Прибор учета с номером " + ТекущиеДанныеТЧ.Счетчик + " уже существует!";
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		Иначе
			
			Строки = Объект.Счетчики.НайтиСтроки(Новый Структура("Счетчик", ТекущиеДанныеТЧ.Счетчик));
			Если Строки.Количество() > 1 Тогда
				ТекстСообщения = "Прибор учета с номером " + ТекущиеДанныеТЧ.Счетчик + " уже есть в списке создаваемых приборов учета!";
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьНаименованиеСчетчикаВСтроке(ЭтаФорма, ТекущиеДанныеТЧ);
	
КонецПроцедуры // СчетчикиСчетчикПриИзменении()

&НаКлиенте
// Обработчик результатов вопросов, вызванных в процедуре "СчетчикиСчетчикПриИзменении()".
Процедура ОбработатьРезультатВопросаСчетчикиСчетчикПриИзменении(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанныеТЧ = ДополнительныеПараметры.ТекущиеДанныеТЧ;
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ТекущиеДанныеТЧ.Счетчик = Неопределено;
	ИначеЕсли ЗначениеЗаполнено(ДополнительныеПараметры.НайденныйСчетчик) Тогда
		ТекущиеДанныеТЧ.Счетчик = ДополнительныеПараметры.НайденныйСчетчик;
	КонецЕсли;
	
	ОбновитьНаименованиеСчетчикаВСтроке(ЭтаФорма, ТекущиеДанныеТЧ);
	
КонецПроцедуры // ОбработатьРезультатВопросаСчетчикиСчетчикПриИзменении()

&НаКлиенте
// Обработчик выбора счетчика, вызванного в процедуре "СчетчикиСчетчикНачалоВыбора()".
Процедура ОбработатьВыборСчетчика(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	ТекущиеДанныеТЧ = ДополнительныеПараметры.ТекущиеДанныеТЧ;
	
	Если Не ВыбранноеЗначение = Неопределено Тогда
		ТекущиеДанныеТЧ.Счетчик = ВыбранноеЗначение;
		СчетчикиСчетчикПриИзменении(ДополнительныеПараметры.Элемент);
	КонецЕсли;
	
	ОбновитьНаименованиеСчетчикаВСтроке(ЭтаФорма, ТекущиеДанныеТЧ);
	
КонецПроцедуры // ОбработатьВыборСчетчика()

&НаКлиенте
Процедура СчетчикиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		Элемент.ТекущиеДанные.ДатаВключения = Объект.Дата;
		
		// Значения по умолчанию, параметры ПУ "Индивидуально". 
		Элемент.ТекущиеДанные.Тарифность                 = ПредопределенноеЗначение("Перечисление.КВП_ТарифностьСчетчиков.Однотарифный");
		Элемент.ТекущиеДанные.Разрядность                = 6;
		Элемент.ТекущиеДанные.Коэффициент                = 1;
		Элемент.ТекущиеДанные.СпособРегистрацииПоказаний = ПредопределенноеЗначение("Перечисление.КВП_СпособыРегистрацииПоказанийСчетчиков.НарастающимИтогом");
		
	КонецЕсли;
	
	Если Не Элемент.ТекущиеДанные = Неопределено И Не ЗначениеЗаполнено(Элемент.ТекущиеДанные.Счетчик) Тогда
		Элемент.ТекущиеДанные.Счетчик = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Очистка" поля "СчетчикиОбъект".
//
Процедура СчетчикиОбъектОчистка(Элемент, СтандартнаяОбработка)
	
	Элементы.СчетчикиОбъект.ОграничениеТипа = Новый ОписаниеТипов(ОпределитьМассивТипов());
	
	ТекущиеДанныеТЧ = Элементы.Счетчики.ТекущиеДанные;
	
	Если НЕ ТекущиеДанныеТЧ = Неопределено Тогда
		
		ТекущиеДанныеТЧ.Стояк                 = Неопределено;
		ТекущиеДанныеТЧ.НастроенУчетПоСтоякам = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "СчетчикиОбъект".
//
Процедура СчетчикиОбъектНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанныеТЧ = Элементы.Счетчики.ТекущиеДанные;
	Если ТекущиеДанныеТЧ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанныеТЧ.Объект = Неопределено Тогда
		
		СтандартнаяОбработка = Ложь;
		
		СписокТипов = Новый СписокЗначений;
		СписокТипов.ЗагрузитьЗначения(ОпределитьМассивТипов());
		
		ДопПараметры = Новый Структура("Элемент", Элемент);
		
		ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ОбработатьРезультатВыбораИзСписка", ЭтаФорма, ДопПараметры),
							  СписокТипов,
							  Элемент);
	КонецЕсли;
	
КонецПроцедуры // СчетчикиОбъектНачалоВыбора()

&НаКлиенте
// Обработчик выбора типа объекта, вызванного в процедуре "СчетчикиОбъектНачалоВыбора()".
Процедура ОбработатьРезультатВыбораИзСписка(ВыбранныйТипОбъекта, ДополнительныеПараметры) Экспорт
	
	Если Не ВыбранныйТипОбъекта = Неопределено Тогда
		
		Элемент = ДополнительныеПараметры.Элемент;
		
		ТипОбъекта = ВыбранныйТипОбъекта.Значение;
		
		Если ТипОбъекта = Тип("СправочникСсылка.КВП_Здания") Тогда
			
			ОткрытьФорму("Справочник.КВП_Здания.ФормаВыбора", , Элемент);
			
		ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.УПЖКХ_Помещения") Тогда
			
			ОткрытьФорму("Справочник.УПЖКХ_Помещения.ФормаВыбора", , Элемент);
			
		ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.КВП_Подъезды") Тогда
			
			ОткрытьФорму("Справочник.КВП_Подъезды.ФормаВыбора", , Элемент);
			
		ИначеЕсли ТипОбъекта = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
			
			ОткрытьФорму("Справочник.КВП_ЛицевыеСчета.ФормаВыбора", , Элемент);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьРезультатВыбораИзСписка()

&НаКлиенте
Процедура ТарифностьПриИзменении(Элемент)
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ПолеНомерПУ".
//
Процедура ПолеНомерПУПриИзменении(Элемент)
	
	ТекущиеДанныеТЧ = Элементы.Счетчики.ТекущиеДанные;
	
	Если Не ТекущиеДанныеТЧ = Неопределено Тогда
		Для Каждого ТекСтр Из Объект.Счетчики Цикл
			ОбновитьНаименованиеСчетчикаВСтроке(ЭтаФорма, ТекСтр);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетчикиСтоякПриИзменении(Элемент)
	ОбновитьНаименованиеСчетчикаВСтроке(ЭтаФорма, Элементы.Счетчики.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура СчетчикиСтоякНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Счетчики.ТекущиеДанные;
	
	СписокДоступныхСтояков = УПЖКХ_ВводПоказанийПриборовУчетаСервер.ПолучитьСписокДоступныхСтояков(ТекущиеДанные.Объект, Объект.Услуга);
	
	ПараметрыОтбор = Новый Структура("Ссылка", СписокДоступныхСтояков);
	ПараметрыФормы = Новый Структура("Отбор",  ПараметрыОтбор);
	
	ФормаВыбора = ПолучитьФорму("Справочник.УПЖКХ_Стояки.ФормаВыбора", ПараметрыФормы, Элемент);
	ФормаВыбора.Открыть();
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
	УправлениеФормой(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГотово(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

// ЧастоЗадаваемыеВопросы
&НаКлиенте
// Подключаемый обработчик команды перехода к часто задаваемым вопросам.
Процедура Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда)
	
	ОТР_ЧастоЗадаваемыеВопросыКлиент.Подключаемый_ЧастоЗадаваемыеВопросыОткрытьСсылку(Команда);
	
КонецПроцедуры

&НаКлиенте
// Обработчик выбора объектов, вызванного в процедуре-обработчике команды "ОткрытьФормуВыбораОбъектов()".
Процедура ОбработатьВыборОбъектов(СписокОбъектов, ДополнительныеПараметры) Экспорт
	
	Если Не СписокОбъектов = Неопределено И СписокОбъектов.Количество() > 0 Тогда
		ЗаполнитьТаблицуСчетчиков(СписокОбъектов);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьВыборОбъектов()
// Конец ЧастоЗадаваемыеВопросы

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// Поставляемая часть

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	
	ОчиститьСообщения();
	
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)
	
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	
	ПорядковыйНомерПерехода = Значение;
	
	Если ПорядковыйНомерПерехода <= 0 Тогда
		
		ПорядковыйНомерПерехода = 1;
		
	КонецЕсли;
	
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Выполняем обработчики событий перехода.
	ВыполнитьОбработчикиСобытийПерехода(ЭтоПереходДалее);
	
	// Устанавливаем отображение страниц.
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(
							Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	Элементы.ПанельНавигации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыНавигации];
	
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяСтраницыДекорации) Тогда
		
		Элементы.ПанельДекорации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыДекорации];
		
	КонецЕсли;
	
	// Устанавливаем текущую кнопку по умолчанию.
	КнопкаДалее = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаДалее");
	
	Если КнопкаДалее <> Неопределено Тогда
		
		КнопкаДалее.КнопкаПоУмолчанию = Истина;
		
	Иначе
		
		КнопкаГотово = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаГотово");
		
		Если КнопкаГотово <> Неопределено Тогда
			
			КнопкаГотово.КнопкаПоУмолчанию = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоПереходДалее И СтрокаПереходаТекущая.ДлительнаяОперация Тогда
		
		ПодключитьОбработчикОжидания("ВыполнитьОбработчикДлительнойОперации", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикиСобытийПерехода(Знач ЭтоПереходДалее)
	
	// Обработчики событий переходов.
	Если ЭтоПереходДалее Тогда
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода-1));
		
		Если СтрокиПерехода.Количество() > 0 Тогда
			
			СтрокаПерехода = СтрокиПерехода[0];
			
			// Обработчик ПриПереходеДалее.
			Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее)
				И Не СтрокаПерехода.ДлительнаяОперация Тогда
				
				ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
				ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);
				
				Отказ = Ложь;
				
				РезультатВычисления = Вычислить(ИмяПроцедуры);
				
				Если Отказ Тогда
					
					УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
					
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода+1));
		
		Если СтрокиПерехода.Количество() > 0 Тогда
			
			СтрокаПерехода = СтрокиПерехода[0];
			
			// Обработчик ПриПереходеНазад.
			Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад)
				И Не СтрокаПерехода.ДлительнаяОперация Тогда
				
				ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
				ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеНазад);
				
				Отказ = Ложь;
				
				РезультатВычисления = Вычислить(ИмяПроцедуры);
				
				Если Отказ Тогда
					
					УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
					
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
 	КонецЕсли;
	
 	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода",
																		 ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Если СтрокаПереходаТекущая.ДлительнаяОперация И Не ЭтоПереходДалее Тогда
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
		Возврат;
	КонецЕсли;
	
	// Обработчик ПриОткрытии.
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);
		
		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;
		
		РезультатВычисления = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			
			Возврат;
			
		ИначеЕсли ПропуститьСтраницу Тогда
			
			Если ЭтоПереходДалее Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				
				Возврат;
				
			Иначе
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикДлительнойОперации()
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода",
																		 ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// Обработчик ОбработкаДлительнойОперации.
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПерейтиДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации);
		
		Отказ = Ложь;
		ПерейтиДалее = Истина;
		
		РезультатВычисления = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			
			Возврат;
			
		ИначеЕсли ПерейтиДалее Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет новую строку в конец текущей таблицы переходов
//
// Параметры:
//
//  ПорядковыйНомерПерехода (обязательный) – Число. Порядковый номер перехода, который соответствует текущему
//                                                  шагу перехода.
//  ИмяОсновнойСтраницы (обязательный) – Строка. Имя страницы панели "ПанельОсновная", которая соответствует
//                                               текущему номеру перехода.
//  ИмяСтраницыНавигации (обязательный) – Строка. Имя страницы панели "ПанельНавигации", которая соответствует
//                                                текущему номеру перехода.
//  ИмяСтраницыДекорации (необязательный) – Строка. Имя страницы панели "ПанельДекорации", которая соответствует
//                                                  текущему номеру перехода.
//  ИмяОбработчикаПриОткрытии (необязательный) – Строка. Имя функции-обработчика события открытия текущей
//                                                       страницы помощника.
//  ИмяОбработчикаПриПереходеДалее (необязательный) – Строка. Имя функции-обработчика события перехода на следующую
//                                                            страницу помощника.
//  ИмяОбработчикаПриПереходеНазад (необязательный) – Строка. Имя функции-обработчика события перехода на предыдущую
//                                                            страницу помощника.
//  ДлительнаяОперация (необязательный) - Булево. Признак отображения страницы длительной операции.
//  Истина - отображается страница длительной операции; Ложь - отображается обычная страница. Значение по умолчанию - Ложь.
// 
&НаКлиенте
Процедура ТаблицаПереходовНоваяСтрока(ПорядковыйНомерПерехода,
									ИмяОсновнойСтраницы,
									ИмяСтраницыНавигации,
									ИмяСтраницыДекорации = "",
									ИмяОбработчикаПриОткрытии = "",
									ИмяОбработчикаПриПереходеДалее = "",
									ИмяОбработчикаПриПереходеНазад = "",
									ДлительнаяОперация = Ложь,
									ИмяОбработчикаДлительнойОперации = "")
	
	НоваяСтрока = ТаблицаПереходов.Добавить();
	
	НоваяСтрока.ПорядковыйНомерПерехода = ПорядковыйНомерПерехода;
	НоваяСтрока.ИмяОсновнойСтраницы     = ИмяОсновнойСтраницы;
	НоваяСтрока.ИмяСтраницыДекорации    = ИмяСтраницыДекорации;
	НоваяСтрока.ИмяСтраницыНавигации    = ИмяСтраницыНавигации;
	
	НоваяСтрока.ИмяОбработчикаПриПереходеДалее = ИмяОбработчикаПриПереходеДалее;
	НоваяСтрока.ИмяОбработчикаПриПереходеНазад = ИмяОбработчикаПриПереходеНазад;
	НоваяСтрока.ИмяОбработчикаПриОткрытии      = ИмяОбработчикаПриОткрытии;
	
	НоваяСтрока.ДлительнаяОперация = ДлительнаяОперация;
	НоваяСтрока.ИмяОбработчикаДлительнойОперации = ИмяОбработчикаДлительнойОперации;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКнопкуФормыПоИмениКоманды(ЭлементФормы, ИмяКоманды)
	
	Для Каждого Элемент Из ЭлементФормы.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			
			ЭлементФормыПоИмениКоманды = ПолучитьКнопкуФормыПоИмениКоманды(Элемент, ИмяКоманды);
			
			Если ЭлементФормыПоИмениКоманды <> Неопределено Тогда
				
				Возврат ЭлементФормыПоИмениКоманды;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("КнопкаФормы")
			И Найти(Элемент.ИмяКоманды, ИмяКоманды) > 0 Тогда
			
			Возврат Элемент;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Переопределяемая часть - Обработчики событий переходов

// Обработчик перехода далее (на следующую страницу) при уходе со страницы помощника "СтраницаДва".
//
// Параметры:
// Отказ – Булево – флаг отказа от выполнения перехода далее;
//					если в обработчике поднять этот флаг, то переход на следующую страницу выполнен не будет.
//
&НаКлиенте
Функция Подключаемый_СтраницаОдин_ПриПереходеДалее(Отказ)
	
	ДанныеЗаполненыКорректно(Отказ);
	
КонецФункции

// Обработчик перехода далее (на следующую страницу) при уходе со страницы помощника "СтраницаДва".
//
// Параметры:
// Отказ – Булево – флаг отказа от выполнения перехода далее;
//					если в обработчике поднять этот флаг, то переход на следующую страницу выполнен не будет.
//
&НаКлиенте
Функция Подключаемый_СтраницаДва_ПриПереходеДалее(Отказ)
	
	ДанныеЗаполненыКорректно(Отказ);
	Если Не Отказ Тогда
		ВыполнитьУстановкуСчетчиков();
	КонецЕсли;
	
КонецФункции

// Обработчик перехода назад (на предыдущую страницу) при уходе со страницы помощника "СтраницаДва".
//
// Параметры:
// Отказ – Булево – флаг отказа от выполнения перехода назад;
//					если в обработчике поднять этот флаг, то переход на предыдущую страницу выполнен не будет.
//
&НаКлиенте
Функция Подключаемый_СтраницаДва_ПриПереходеНазад(Отказ)
	
	
КонецФункции

// Обработчик выполняется при открытии страницы помощника "СтраницаТри".
//
// Параметры:
//
//  Отказ – Булево – флаг отказа от открытия страницы;
//			если в обработчике поднять этот флаг, то переход на страницу выполнен не будет,
//			останется открытой предыдущая страница помощника согласно направлению перехода (вперед или назад).
//
//  ПропуститьСтраницу – Булево. Если поднять этот флаг, то страница будет пропущена
//			и управление перейдет на следующую страницу помощника согласно направлению перехода (вперед или назад).
//
//  ЭтоПереходДалее (только чтение) – Булево – флаг определяет направление перехода.
//			Истина – выполняется переход далее; Ложь – выполняется переход назад.
//
&НаКлиенте
Функция Подключаемый_СтраницаТри_ПриОткрытии(Отказ, ПропуститьСтраницу, Знач ЭтоПереходДалее)
	
	ДанныеИзменены = Ложь;
	
КонецФункции

// Обработчик перехода далее (на следующую страницу) при уходе со страницы помощника "СтраницаОжидания".
//
// Параметры:
// Отказ – Булево – флаг отказа от выполнения перехода далее;
//					если в обработчике поднять этот флаг, то переход на следующую страницу выполнен не будет.
//
&НаКлиенте
Функция Подключаемый_СтраницаОжидания_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ВыполнитьПродолжительноеДействиеНаСервере();
	
КонецФункции

&НаСервере
Процедура ВыполнитьПродолжительноеДействиеНаСервере()
	
	// Имитация продолжительного действия (5 сек.).
	ДатаНачалаОперации = ТекущаяДатаСеанса();
	Пока ТекущаяДатаСеанса() - ДатаНачалаОперации < 5 Цикл
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Переопределяемая часть - Инициализация переходов помощника

// Процедура определяет таблицу переходов по сценарию №1.
// Для заполнения таблицы переходов используется процедура ТаблицаПереходовНоваяСтрока().
//
&НаКлиенте
Процедура ТаблицаПереходовПоСценарию1()
	
	ТаблицаПереходов.Очистить();
	
	ТаблицаПереходовНоваяСтрока(1, "СтраницаОдин",       "СтраницаНавигацииНачало", "СтраницаДекорацииНачало", ,
									"СтраницаОдин_ПриПереходеДалее");
	ТаблицаПереходовНоваяСтрока(2, "СтраницаДва",        "СтраницаНавигацииПродолжение", "СтраницаДекорацииПродолжение", ,
									"СтраницаДва_ПриПереходеДалее", "СтраницаДва_ПриПереходеНазад");
	ТаблицаПереходовНоваяСтрока(3, "СтраницаТри",        "СтраницаНавигацииОкончание", "СтраницаДекорацииОкончание",
									"СтраницаТри_ПриОткрытии");
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НА СЕРВЕРЕ

#Область ПроцедурыИФункцииНаСервере

&НаСервере
Функция ПолучитьНаименованиеУслугиДляИмениСчетчикаСервер(Услуга)
	
	Если Услуга.Пустая() Тогда
		НаименованиеУслугиДляИмениСчетчика = "";
	Иначе
		Если ЗначениеЗаполнено(Услуга.ВидУслуги) Тогда
			Если Не ПустаяСтрока(Услуга.ВидУслуги.КраткоеНаименование) Тогда
				НаименованиеУслугиДляИмениСчетчика = Услуга.ВидУслуги.КраткоеНаименование;
			Иначе
				НаименованиеУслугиДляИмениСчетчика = Услуга.ВидУслуги.Наименование;
			КонецЕсли;
		Иначе
			НаименованиеУслугиДляИмениСчетчика = Услуга.Наименование;
		КонецЕсли;
	КонецЕсли;
	Возврат НаименованиеУслугиДляИмениСчетчика;
	
КонецФункции

&НаСервере
Функция ПолучитьСчетчикПоНомеру(Номер)
	Возврат Справочники.КВП_Счетчики.НайтиПоРеквизиту("ЗаводскойНомер", Номер);
КонецФункции

&НаСервере
Функция ПолучитьСписокРеквизитовСчетчикиСервер()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	МетаданныеРеквизиты = ОбработкаОбъект.Метаданные().ТабличныеЧасти["Счетчики"].Реквизиты;
	СписокРеквизитов = Новый СписокЗначений();
	Для Каждого Реквизит Из МетаданныеРеквизиты Цикл
		СписокРеквизитов.Добавить(Реквизит.Имя, Реквизит.Представление());
	КонецЦикла;
	Возврат СписокРеквизитов;
КонецФункции

&НаСервере
Функция ПолучитьОбъектыСчетчикиСервер()
	Возврат РеквизитФормыВЗначение("Объект").Счетчики.ВыгрузитьКолонку("Объект");
КонецФункции

&НаСервере
Функция ПолучитьСписокОшибокСчетчикиСервер()
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счетчики", Объект.Счетчики.Выгрузить());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Счетчики.НомерСтроки,
	|	Счетчики.Счетчик,
	|	Счетчики.Объект
	|ПОМЕСТИТЬ врСчетчики
	|ИЗ
	|	&Счетчики КАК Счетчики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	врСчетчики1.Счетчик,
	|	врСчетчики1.Объект
	|ИЗ
	|	врСчетчики КАК врСчетчики1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ врСчетчики КАК врСчетчики2
	|		ПО врСчетчики1.НомерСтроки <> врСчетчики2.НомерСтроки
	|			И врСчетчики1.Счетчик = врСчетчики2.Счетчик
	|			И врСчетчики1.Объект = врСчетчики2.Объект";
	
	ТаблицаПроверки = Запрос.Выполнить().Выгрузить();
	СписокОшибок = Новый СписокЗначений();
	
	Если ТаблицаПроверки.Количество() > 0 Тогда
		
		Для Каждого ТекСтрока Из ТаблицаПроверки Цикл
			СписокОшибок.Добавить(ТекСтрока.Счетчик,
									"Прибор учета """ + ТекСтрока.Счетчик + """ устанавливается на объект """
									+ ТекСтрока.Объект + """ в нескольких строках." + Символы.ПС + "Необходимо оставить только одну строку.");
		КонецЦикла;
		
	КонецЕсли;
	Возврат СписокОшибок;
КонецФункции

&НаСервере
// Процедура добавляет записи в табличную часть из регистра "Закрепленные счетчики".
Процедура ДобавитьЗаписиИзРегистраСервер(Объекты)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Объект,
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Счетчик.Наименование КАК СчетчикНаименование
	|ИЗ
	|	РегистрСведений.КВП_ЗакрепленныеСчетчики.СрезПоследних(
	|			&Дата,
	|			Объект В (&Объекты)
	|				И Счетчик.ВидУслуги = &Услуга
	|				И ДатаИзменения <= &Дата) КАК КВП_ЗакрепленныеСчетчикиСрезПоследних
	|ГДЕ
	|	КВП_ЗакрепленныеСчетчикиСрезПоследних.Действует";
	
	Запрос.УстановитьПараметр("Дата",    Объект.Дата);
	Запрос.УстановитьПараметр("Объекты", Объекты);
	Запрос.УстановитьПараметр("Услуга",  Объект.Услуга);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Объект.Счетчики.Добавить();
		НоваяСтрока.Объект              = Выборка.Объект;
		НоваяСтрока.СчетчикНаименование = Выборка.СчетчикНаименование;
		НоваяСтрока.СчетчикИзРегистра   = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Функция производит поиск максимального числа(добавочного номера) из массива наименований счетчиков.
Функция НайтиМаксимальныйНомер(Ресурс, НаименованиеСчетчика)
	
	МаксНомер = 0;
	Для Каждого Строка Из Ресурс Цикл
		
		НомерДляСравнения = 0;
		
		ТекСтрока = СокрЛП(Строка.СчетчикНаименование);
		ПервыйПоиск = Истина;
		Если НаименованиеСчетчика <> ТекСтрока Тогда
			Пока Истина Цикл
				ТекНомер = Найти(ТекСтрока, "(");
				Если ТекНомер = 0 Тогда
					Прервать;
				Иначе
					ТекСтрока = Сред(ТекСтрока, ТекНомер + 1);
				КонецЕсли;
				ПервыйПоиск = Ложь;
			КонецЦикла;
		Иначе
			МаксНомер = МаксНомер + 1;
		КонецЕсли;
		
		Если Не ПервыйПоиск Тогда
			ТекСтрока = СтрЗаменить(ТекСтрока, Символы.НПП, "");
			Попытка
				НомерДляСравнения = Число(Лев(ТекСтрока, СтрДлина(ТекСтрока) - 1));
				НомерДляСравнения = НомерДляСравнения + 1;
			Исключение
			КонецПопытки;
		КонецЕсли;
		
		МаксНомер = Макс(МаксНомер, НомерДляСравнения);
		
	КонецЦикла;
	
	Возврат МаксНомер;
	
КонецФункции

&НаСервере
// Процедура выполняет создание счетчиков.
Процедура СоздатьСчетчики()
	
	ДопЧислоДляГенерацииИдентификаторов = 0;
	
	Для Каждого ТекСтрока Из Объект.Счетчики Цикл
		
		НовыйСчетчик                = Справочники.КВП_Счетчики.СоздатьЭлемент();
		НовыйСчетчик.Родитель       = ТекСтрока.ГруппаСчетчиков;
		НовыйСчетчик.Наименование   = ТекСтрока.СчетчикНаименование;
		НовыйСчетчик.ВидУслуги      = Объект.Услуга;
		НовыйСчетчик.ЗаводскойНомер = ТекСтрока.Счетчик;
		Если Объект.МетодВводаДанных = 1 Тогда
			НовыйСчетчик.Родитель                   = ГруппаСчетчиков;
			НовыйСчетчик.Тарифность                 = Объект.Тарифность;
			НовыйСчетчик.Разрядность                = Объект.Разрядность;
			НовыйСчетчик.Коэффициент                = Объект.Коэффициент;
			НовыйСчетчик.СпособРегистрацииПоказаний = Объект.СпособРегистрацииПоказаний;
			НовыйСчетчик.ИспользоватьТемпературныйКоэффициент = Объект.ИспользоватьТемпературныйКоэффициент;
		Иначе
			НовыйСчетчик.Тарифность                 = ТекСтрока.Тарифность;
			НовыйСчетчик.Разрядность                = ТекСтрока.Разрядность;
			НовыйСчетчик.Коэффициент                = ТекСтрока.Коэффициент;
			НовыйСчетчик.СпособРегистрацииПоказаний = ТекСтрока.СпособРегистрацииПоказаний;
			НовыйСчетчик.ИспользоватьТемпературныйКоэффициент = ТекСтрока.ИспользоватьТемпературныйКоэффициент;
		КонецЕсли;
		
		КВП_ЗаписатьОбъект(НовыйСчетчик);
		
		// Установим идентификатор счетчика.
		НовыйСчетчик.Идентификатор  = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьИдентификаторСчетчика( , НовыйСчетчик.Код, ДопЧислоДляГенерацииИдентификаторов, Истина);
		КВП_ЗаписатьОбъект(НовыйСчетчик);
		
		ТекСтрока.СчетчикСсылка = НовыйСчетчик.Ссылка;
		
		ДопЧислоДляГенерацииИдентификаторов = ДопЧислоДляГенерацииИдентификаторов + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
// Процедура назначает услугу на объекты и возвращает список ошибок.
Процедура НазначитьУслуги(СтруктураВозврата)
	
	ДокументНазначение = Документы.КВП_УправлениеУслугами.СоздатьДокумент();
	
	// Заполнение стандартных параметров документа.
	ДокументНазначение.Заполнить(Неопределено);
	
	ДокументНазначение.Дата        = Объект.Дата;
	ДокументНазначение.Организация = Объект.Организация;
	ДокументНазначение.ВидОперации = Перечисления.КВП_ВидыОперацийУправленияУслугами.НазначениеНаЛицевыеСчета;
	
	НоваяСтрокаУслуги = ДокументНазначение.Услуги.Добавить();
	НоваяСтрокаУслуги.Услуга = Объект.Услуга;
	
	// Сформируем таблицу лицевых счетов для назначения услуги.
	ТаблицаОбъектов = Объект.Счетчики.Выгрузить(, "Объект");
	ТаблицаОбъектов.Свернуть("Объект");
	
	МассивСтрокДляУдаления = Новый Массив;
	МассивПомещений = Новый Массив;
	
	Для Каждого ТекСтрока Из ТаблицаОбъектов Цикл
		
		Если Не ТипЗнч(ТекСтрока.Объект) = Тип("СправочникСсылка.УПЖКХ_Помещения")
		   И Не ТипЗнч(ТекСтрока.Объект) = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
			МассивСтрокДляУдаления.Добавить(ТекСтрока);
			
		ИначеЕсли ТипЗнч(ТекСтрока.Объект) = Тип("СправочникСсылка.УПЖКХ_Помещения") Тогда
			МассивСтрокДляУдаления.Добавить(ТекСтрока);
			МассивПомещений.Добавить(ТекСтрока.Объект);
			
		КонецЕсли;
	   
	КонецЦикла;
	
	// Удаляем ненужные строки.
	Для Каждого ТекСтрока Из МассивСтрокДляУдаления Цикл
		ТаблицаОбъектов.Удалить(ТекСтрока);
	КонецЦикла;
	
	// Если массив помещений пуст, то и запросы к базе данных выполнять нет необходимости.
	Если МассивПомещений.Количество() > 0 Тогда
		
		// Добавим объекты по помещениям.
		ЗапросПоЛС = Новый Запрос;
		ЗапросПоЛС.УстановитьПараметр("Период",          Объект.Дата);
		ЗапросПоЛС.УстановитьПараметр("СписокПомещений", МассивПомещений);
		ЗапросПоЛС.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет
		|ИЗ
		|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
		|			&Период,
		|			Объект В (&СписокПомещений)) КАК КВП_ЛицевыеСчетаСрезПоследних";
		
		ВыборкаЛС = ЗапросПоЛС.Выполнить().Выбрать();
		Пока ВыборкаЛС.Следующий() Цикл
			НоваяСтрока = ТаблицаОбъектов.Добавить();
			НоваяСтрока.Объект = ВыборкаЛС.ЛицевойСчет;
		КонецЦикла;
		
	КонецЕсли;
	
	ТаблицаОбъектов.Свернуть("Объект");
	
	// Если таблица объектов пуста, то и выполнять никаких действий не нужно.
	Если ТаблицаОбъектов.Количество() > 0 Тогда
		
		// Получим данные по действию услуги на объектах.
		ЗапросПоДействиюУслуги = Новый Запрос;
		
		ДополнитьЗапросНазначеннымиУслугами(ЗапросПоДействиюУслуги, Объект.Дата, Объект.Организация,
		                                    ТаблицаОбъектов.ВыгрузитьКолонку("Объект"), Объект.Услуга);
		
		ЗапросПоДействиюУслуги.Текст =
		"ВЫБРАТЬ
		|	НазначенныеНачисленияСрезПоследних.Действует,
		|	НазначенныеНачисленияСрезПоследних.Объект
		|ИЗ
		|	врТаблицаДействующихУслуг КАК НазначенныеНачисленияСрезПоследних
		|ГДЕ
		|	НазначенныеНачисленияСрезПоследних.Действует";
		
		ТаблицаДействияУслуги = ЗапросПоДействиюУслуги.Выполнить().Выгрузить();
		
		// Добавим строки в таблицу.
		Для Каждого ТекСтрока Из ТаблицаОбъектов Цикл
			
			НайденнаяСтрока = ТаблицаДействияУслуги.Найти(ТекСтрока.Объект, "Объект"); 
			Если Не НайденнаяСтрока = Неопределено Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
					"На объект""" + Строка(ТекСтрока.Объект) + """ услуга """ + Строка(Объект.Услуга) + """ уже назначена.");
			Иначе
				НоваяСтрокаНазначения = ДокументНазначение.Объекты.Добавить();
				НоваяСтрокаНазначения.Объект     = ТекСтрока.Объект;
				НоваяСтрокаНазначения.ДатаНачала = Объект.Дата;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ДокументНазначение.Объекты.Количество() > 0 Тогда
			Если Не КВП_ЗаписатьОбъект(ДокументНазначение, РежимЗаписиДокумента.Проведение) Тогда
				КВП_ЗаписатьОбъект(ДокументНазначение, РежимЗаписиДокумента.Запись);
			КонецЕсли;
		КонецЕсли;
		
		СтруктураВозврата.Вставить("НазначениеУслуги", ДокументНазначение.Ссылка);
		ДокументНазначениеУслуг = ДокументНазначение.Ссылка;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура устанавливает счетчики на объекты.
Процедура УстановитьСчетчики(СтруктураВозврата)
	
	ДокументУстановки = Документы.КВП_УстановкаСчетчика.СоздатьДокумент();
	
	// Заполнение стандартных параметров документа.
	ДокументУстановки.Заполнить(Неопределено);
	
	ДокументУстановки.Дата        = Объект.Дата;
	ДокументУстановки.Действие    = "Включить счетчик";
	
	Для Каждого ТекСтрока Из Объект.Счетчики Цикл
		
		Если Не ЗначениеЗаполнено(ТекСтрока.СчетчикСсылка) Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Счетчик не определен: " + Строка(ТекСтрока.Счетчик));
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаУстановки = ДокументУстановки.Главная.Добавить();
		НоваяСтрокаУстановки.Объект        = ТекСтрока.Объект;
		НоваяСтрокаУстановки.Счетчик       = ТекСтрока.СчетчикСсылка;
		НоваяСтрокаУстановки.Стояк         = ТекСтрока.Стояк;
		НоваяСтрокаУстановки.ДатаВключения = ТекСтрока.ДатаВключения;
		НоваяСтрокаУстановки.ДатаПоверки   = ТекСтрока.ДатаПоверки;
		
		ТекСтрока.Счетчик = ТекСтрока.СчетчикСсылка;;
		
	КонецЦикла;
	
	Если ДокументУстановки.Главная.Количество() > 0 Тогда
		Если Не КВП_ЗаписатьОбъект(ДокументУстановки, РежимЗаписиДокумента.Проведение) Тогда
			КВП_ЗаписатьОбъект(ДокументУстановки, РежимЗаписиДокумента.Запись);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДокументУстановки.Ссылка) Тогда
		СтруктураВозврата.Вставить("УстановкаСчетчика", ДокументУстановки.Ссылка);
		ДокументУстановкаСчетчиков = ДокументУстановки.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура вводит показания счетчиков.
Процедура ВвестиПоказанияСчетчиков(СтруктураВозврата)
	
	ДокументПоказанийНаЛС = Документы.УПЖКХ_ВводПоказанийСчетчика.СоздатьДокумент();
	
	// Заполнение стандартных параметров документа.
	ДокументПоказанийНаЛС.Заполнить(Неопределено);
	
	ДокументПоказанийНаЛС.Дата                   = Объект.Дата;
	ДокументПоказанийНаЛС.ВводНачальныхПоказаний = Истина;
	ДокументПоказанийНаЛС.ВидОперации            = Перечисления.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанииСчетчикаНаЛицевойСчет;
	ДокументПоказанийНаЛС.Услуга                 = Объект.Услуга;
	
	ДокументПоказанийНаПомещение = Документы.УПЖКХ_ВводПоказанийСчетчика.СоздатьДокумент();
	
	// Заполнение стандартных параметров документа.
	ДокументПоказанийНаПомещение.Заполнить(Неопределено);
	
	ДокументПоказанийНаПомещение.Дата                   = Объект.Дата;
	ДокументПоказанийНаПомещение.ВводНачальныхПоказаний = Истина;
	ДокументПоказанийНаПомещение.ВидОперации            = Перечисления.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанииСчетчикаНаПомещение;
	ДокументПоказанийНаПомещение.Услуга                 = Объект.Услуга;
	
	ДокументПоказанийНаЗдание = Документы.УПЖКХ_ВводПоказанийСчетчика.СоздатьДокумент();
	
	// Заполнение стандартных параметров документа.
	ДокументПоказанийНаЗдание.Заполнить(Неопределено);
	
	ДокументПоказанийНаЗдание.Дата                   = Объект.Дата;
	ДокументПоказанийНаЗдание.ВводНачальныхПоказаний = Истина;
	ДокументПоказанийНаЗдание.ВидОперации            = Перечисления.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанийСчетчикаНаЗдание;
	ДокументПоказанийНаЗдание.Услуга                 = Объект.Услуга;
	
	ДокументПоказанийНаПодъезд = Документы.УПЖКХ_ВводПоказанийСчетчика.СоздатьДокумент();
	
	// Заполнение стандартных параметров документа.
	ДокументПоказанийНаПодъезд.Заполнить(Неопределено);
	
	ДокументПоказанийНаПодъезд.Дата                   = Объект.Дата;
	ДокументПоказанийНаПодъезд.ВводНачальныхПоказаний = Истина;
	ДокументПоказанийНаПодъезд.ВидОперации            = Перечисления.КВП_ВидыОперацийВводаПоказанийСчетчика.ВводПоказанийСчетчикаНаПодъезд;
	ДокументПоказанийНаПодъезд.Услуга                 = Объект.Услуга;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Счетчики", Объект.Счетчики.Выгрузить());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Счетчики.СчетчикСсылка,
	|	Счетчики.Объект,
	|	Счетчики.ДневноеПоказание,
	|	Счетчики.НочноеПоказание,
	|	Счетчики.ПиковоеПоказание
	|ПОМЕСТИТЬ врСчетчики
	|ИЗ
	|	&Счетчики КАК Счетчики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Счетчики.СчетчикСсылка,
	|	Счетчики.СчетчикСсылка.ВидУслуги.ВидУслуги КАК ВидУслуги,
	|	Счетчики.СчетчикСсылка.ИспользоватьТемпературныйКоэффициент КАК ИспользоватьТемпературныйКоэффициент,
	|	Счетчики.СчетчикСсылка.Коэффициент КАК КоэффициентТрансформации,
	|	1 КАК ТемпературныйКоэффициент,
	|	Счетчики.Объект,
	|	ВЫБОР
	|		КОГДА Счетчики.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
	|			ТОГДА Счетчики.Объект.Адрес.Владелец.Участок
	|		КОГДА Счетчики.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|			ТОГДА Счетчики.Объект.Владелец.Участок
	|		КОГДА Счетчики.Объект ССЫЛКА Справочник.КВП_Подъезды
	|			ТОГДА Счетчики.Объект.Владелец.Участок
	|		КОГДА Счетчики.Объект ССЫЛКА Справочник.КВП_Здания
	|			ТОГДА Счетчики.Объект.Участок
	|	КОНЕЦ КАК Участок,
	|	Счетчики.ДневноеПоказание,
	|	Счетчики.НочноеПоказание,
	|	Счетчики.ПиковоеПоказание
	|ИЗ
	|	врСчетчики КАК Счетчики
	|ГДЕ
	|	НЕ Счетчики.СчетчикСсылка = ЗНАЧЕНИЕ(Справочник.КВП_Счетчики.ПустаяСсылка)
	|	И (Счетчики.ДневноеПоказание > 0
	|			ИЛИ Счетчики.НочноеПоказание > 0
	|			ИЛИ Счетчики.ПиковоеПоказание > 0)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекСтрока = Выборка;
		
		Если      ТипЗнч(ТекСтрока.Объект) = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
			НоваяСтрока = ДокументПоказанийНаЛС.Главная.Добавить();
			
		ИначеЕсли ТипЗнч(ТекСтрока.Объект) = Тип("СправочникСсылка.УПЖКХ_Помещения") Тогда
			НоваяСтрока = ДокументПоказанийНаПомещение.Главная.Добавить();
			
		ИначеЕсли ТипЗнч(ТекСтрока.Объект) = Тип("СправочникСсылка.КВП_Здания") Тогда
			НоваяСтрока = ДокументПоказанийНаЗдание.Главная.Добавить();
			
		ИначеЕсли ТипЗнч(ТекСтрока.Объект) = Тип("СправочникСсылка.КВП_Подъезды") Тогда
			НоваяСтрока = ДокументПоказанийНаПодъезд.Главная.Добавить();
			
		КонецЕсли;
		
		НоваяСтрока.Объект                 = ТекСтрока.Объект;
		НоваяСтрока.Услуга                 = Объект.Услуга;
		НоваяСтрока.Счетчик                = ТекСтрока.СчетчикСсылка;
		НоваяСтрока.ДатаПоказания          = Объект.Дата;
		НоваяСтрока.ДневноеПоказание       = ТекСтрока.ДневноеПоказание;
		НоваяСтрока.НочноеПоказание        = ТекСтрока.НочноеПоказание;
		НоваяСтрока.ПиковоеПоказание       = ТекСтрока.ПиковоеПоказание;
		НоваяСтрока.КоэффициентЧислитель   = 1;
		НоваяСтрока.КоэффициентЗнаменатель = 1;
		
		НоваяСтрока.КоэффициентТрансформации = ТекСтрока.КоэффициентТрансформации;
		НоваяСтрока.ТемпературныйКоэффициент = ТекСтрока.ТемпературныйКоэффициент;
		Если ТекСтрока.ИспользоватьТемпературныйКоэффициент Тогда
			НоваяСтрока.ТемпературныйКоэффициент = 
					РегистрыСведений.УПЖКХ_ЗначенияТемпературныхКоэффициентов.ПолучитьТемпературныйКоэффициентУслугиНаУчастке(
										Объект.Дата,
										ТекСтрока.ВидУслуги,
										ТекСтрока.Участок);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ДокументПоказанийНаЛС.Главная.Количество() > 0 Тогда
		Если Не КВП_ЗаписатьОбъект(ДокументПоказанийНаЛС, РежимЗаписиДокумента.Проведение) Тогда
			КВП_ЗаписатьОбъект(ДокументПоказанийНаЛС, РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
		Если Не ДокументПоказанийНаЛС.Ссылка.Пустая() Тогда
			СтруктураВозврата.Вставить("ДокументПоказанийНаЛС", ДокументПоказанийНаЛС.Ссылка);
			ДокументВводПоказаний1 = ДокументПоказанийНаЛС.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДокументПоказанийНаПомещение.Главная.Количество() > 0 Тогда
		Если Не КВП_ЗаписатьОбъект(ДокументПоказанийНаПомещение, РежимЗаписиДокумента.Проведение) Тогда
			КВП_ЗаписатьОбъект(ДокументПоказанийНаПомещение, РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
		Если Не ДокументПоказанийНаПомещение.Ссылка.Пустая() Тогда
			СтруктураВозврата.Вставить("ДокументПоказанийНаПомещение", ДокументПоказанийНаПомещение.Ссылка);
			ДокументВводПоказаний2 = ДокументПоказанийНаПомещение.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДокументПоказанийНаЗдание.Главная.Количество() > 0 Тогда
		Если Не КВП_ЗаписатьОбъект(ДокументПоказанийНаЗдание, РежимЗаписиДокумента.Проведение) Тогда
			КВП_ЗаписатьОбъект(ДокументПоказанийНаЗдание, РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
		Если Не ДокументПоказанийНаЗдание.Ссылка.Пустая() Тогда
			СтруктураВозврата.Вставить("ДокументПоказанийНаЗдание", ДокументПоказанийНаЗдание.Ссылка);
			ДокументВводПоказаний3 = ДокументПоказанийНаЗдание.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДокументПоказанийНаПодъезд.Главная.Количество() > 0 Тогда
		Если Не КВП_ЗаписатьОбъект(ДокументПоказанийНаПодъезд, РежимЗаписиДокумента.Проведение) Тогда
			КВП_ЗаписатьОбъект(ДокументПоказанийНаПодъезд, РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
		Если Не ДокументПоказанийНаПодъезд.Ссылка.Пустая() Тогда
			СтруктураВозврата.Вставить("ДокументПоказанийНаПодъезд", ДокументПоказанийНаПодъезд.Ссылка);
			ДокументВводПоказаний4 = ДокументПоказанийНаПодъезд.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
	ДобавитьСсылкиНаДокументыВводаПоказанийВДокументУстановкаСчетчика(СтруктураВозврата);
	
КонецПроцедуры

&НаСервере
// Процедура для связи устанавливаемых приборов учета с начальными показаниями.
Процедура ДобавитьСсылкиНаДокументыВводаПоказанийВДокументУстановкаСчетчика(СтруктураВозврата)
	
	Если СтруктураВозврата.Свойство("УстановкаСчетчика") Тогда
		
		ДокументУстановки = СтруктураВозврата.УстановкаСчетчика.ПолучитьОбъект();
		ДокументУстановки.ВвестиНачальныеИлиКонечныеПоказания = Истина;
		
		Если СтруктураВозврата.Свойство("ДокументПоказанийНаЛС") Тогда
			НоваяСтрокаУстановки = ДокументУстановки.ДокументыВводаПоказаний.Добавить();
			НоваяСтрокаУстановки.ВводПоказаний = СтруктураВозврата.ДокументПоказанийНаЛС;
		КонецЕсли;
		
		Если СтруктураВозврата.Свойство("ДокументПоказанийНаПомещение") Тогда
			НоваяСтрокаУстановки = ДокументУстановки.ДокументыВводаПоказаний.Добавить();
			НоваяСтрокаУстановки.ВводПоказаний = СтруктураВозврата.ДокументПоказанийНаПомещение;
		КонецЕсли;
		
		Если СтруктураВозврата.Свойство("ДокументПоказанийНаПодъезд") Тогда
			НоваяСтрокаУстановки = ДокументУстановки.ДокументыВводаПоказаний.Добавить();
			НоваяСтрокаУстановки.ВводПоказаний = СтруктураВозврата.ДокументПоказанийНаПодъезд;
		КонецЕсли;
		
		Если СтруктураВозврата.Свойство("ДокументПоказанийНаЗдание") Тогда
			НоваяСтрокаУстановки = ДокументУстановки.ДокументыВводаПоказаний.Добавить();
			НоваяСтрокаУстановки.ВводПоказаний = СтруктураВозврата.ДокументПоказанийНаЗдание;
		КонецЕсли;
		
		Если ДокументУстановки.ДокументыВводаПоказаний.Количество() > 0 Тогда
			КВП_ЗаписатьОбъект(ДокументУстановки, РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСсылкиНаДокументыВводаПоказанийВДокументУстановкаСчетчика()

&НаСервере
// Функция выполняет операции по установке счетчиков и возвращает список ошибок.
Функция ВыполнитьУстановкуСчетчиковСервер()
	
	СтруктураВозврата = Новый Структура();
	
	// Если формируем имена счетчиков автоматически, то необходимо предусмотреть
	// повторение имен, поэтом если есть повторения, добавим в конец имени порядковый номер.
	Если Не Объект.ВручнуюФормироватьИменаСчетчиков Тогда
		
		ТаблицаСчетчиков = Объект.Счетчики.Выгрузить().Скопировать(, "Объект, СчетчикНаименование");
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ТаблицаСчетчиков.Объект КАК Объект,
		|	1 КАК Количество
		|ПОМЕСТИТЬ ВрТабл
		|ИЗ
		|	&ТаблицаСчетчиков КАК ТаблицаСчетчиков
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВрТабл.Объект,
		|	СУММА(ВрТабл.Количество) КАК Количество
		|ИЗ
		|	ВрТабл КАК ВрТабл
		|
		|СГРУППИРОВАТЬ ПО
		|	ВрТабл.Объект
		|
		|ИМЕЮЩИЕ
		|	СУММА(ВрТабл.Количество) > 1";
		
		Запрос.УстановитьПараметр("ТаблицаСчетчиков", ТаблицаСчетчиков);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			// Есть повторения.
			НайденныеСтрокиСчетчикИзТаблицы  = Объект.Счетчики.НайтиСтроки(Новый Структура("Объект, СчетчикИзРегистра", Выборка.Объект, Ложь));
			НайденныеСтрокиСчетчикИзРегистра = Объект.Счетчики.НайтиСтроки(Новый Структура("Объект, СчетчикИзРегистра", Выборка.Объект, Истина));
			
			ПервыйОбход               = Истина;
			ТекПорядковыйНомер        = 0;
			
			Для Каждого ТекСтрокаСчетчикИзТаблицы Из НайденныеСтрокиСчетчикИзТаблицы Цикл
				
				Если ПервыйОбход Тогда
					ТекПорядковыйНомер = НайтиМаксимальныйНомер(НайденныеСтрокиСчетчикИзРегистра, ТекСтрокаСчетчикИзТаблицы.СчетчикНаименование);
					ПервыйОбход = Ложь;
				КонецЕсли;
				
				Если ТекПорядковыйНомер > 0 Тогда
					ТекСтрокаСчетчикИзТаблицы.СчетчикНаименование = ТекСтрокаСчетчикИзТаблицы.СчетчикНаименование + " (" + ТекПорядковыйНомер + ")";
					ТекПорядковыйНомер = ТекПорядковыйНомер + 1;
					Продолжить;
				КонецЕсли;
				
				ТекПорядковыйНомер = ТекПорядковыйНомер + 1;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ВременнаяТаблица = Объект.Счетчики.Выгрузить(Новый Структура("СчетчикИзРегистра", Ложь));
	Объект.Счетчики.Загрузить(ВременнаяТаблица);
	ВременнаяТаблица.Очистить();
	
	// Создаем элементы справочника "Счетчики".
	СоздатьСчетчики();
	
	// Создаем документы "Управление услугами".
	Если Объект.ВыполнитьНазначениеУслуги Тогда
		НазначитьУслуги(СтруктураВозврата);
	КонецЕсли;
	
	// Создаем документы "Установка счетчика".
	УстановитьСчетчики(СтруктураВозврата);
	// СтруктураВозврата.Свойство("мУстановкаСчетчика", ДокументУстановкаСчетчиков);
	
	// Создаем документы "Ввод показаний счетчика".
	Если Объект.ВводитьПоказанияСчетчиков Тогда
		ВвестиПоказанияСчетчиков(СтруктураВозврата);
	КонецЕсли;
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
// Возвращает Истина, если документ проведен.
Функция ДокументПроведенСервер(ДокументСсылка)
	Возврат ДокументСсылка.Проведен;
КонецФункции

&НаСервере
Функция ПолучитьСписокОшибокНесоответствияРесурсовПУИСтояков()
	
	СписокОшибок = Новый СписокЗначений();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("КоммунальныйРесурс", Объект.Услуга.КоммунальныйРесурс);
	Запрос.УстановитьПараметр("ТабличнаяЧасть",     Объект.Счетчики.Выгрузить(, "НомерСтроки, Стояк, Счетчик"));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТабличнаяЧасть.Счетчик КАК Счетчик,
	|	ТабличнаяЧасть.Стояк КАК Стояк,
	|	ТабличнаяЧасть.НомерСтроки КАК НомерСтроки
	|ПОМЕСТИТЬ ВрТаблицаПУ
	|ИЗ
	|	&ТабличнаяЧасть КАК ТабличнаяЧасть
	|ГДЕ
	|	НЕ ТабличнаяЧасть.Стояк = ЗНАЧЕНИЕ(Справочник.УПЖКХ_Стояки.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаПУ.Счетчик КАК Счетчик,
	|	ТаблицаПУ.Стояк КАК Стояк,
	|	ТаблицаПУ.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВрТаблицаПУ КАК ТаблицаПУ
	|ГДЕ
	|	НЕ ТаблицаПУ.Стояк.КоммунальныйРесурс = &КоммунальныйРесурс
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаПУ.Счетчик,
	|	ТаблицаПУ.Стояк,
	|	ТаблицаПУ.НомерСтроки
	|ИЗ
	|	ВрТаблицаПУ КАК ТаблицаПУ
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ТаблицаПУ.Счетчик ССЫЛКА Справочник.КВП_Счетчики
	|				ТОГДА НЕ ТаблицаПУ.Стояк.КоммунальныйРесурс = ТаблицаПУ.Счетчик.ВидУслуги.КоммунальныйРесурс
	|		КОНЕЦ";
	
	РезультатПроверки = Запрос.Выполнить().Выбрать();
	
	Пока РезультатПроверки.Следующий() Цикл
		СписокОшибок.Добавить(РезультатПроверки.Стояк,
								"В строке номер """ + СокрЛП(РезультатПроверки.НомерСтроки) + """: "
								+ "Прибор учета """ + СокрЛП(РезультатПроверки.Счетчик) + """ устанавливается на стояк """
								+ СокрЛП(РезультатПроверки.Стояк) + """ другого коммунального ресурса!");
	КонецЦикла;
	
	Возврат СписокОшибок;
	
КонецФункции

&НаСервере
// Заполняет строки в таблице счетчиков с учетом выбранного списка объектов.
Функция ЗаполнитьТаблицуСчетчиков(СписокОбъектов);
	
	// Преобразуем список объектов в таблицу значений.
	ТаблицаОбъектов = Новый ТаблицаЗначений;
	ТаблицаОбъектов.Колонки.Добавить("Объект",                Новый ОписаниеТипов(ОпределитьМассивТипов()));
	// Колонки "Стояк" и "Настроен учет по стоякам" добавляем для совместимости.
	ТаблицаОбъектов.Колонки.Добавить("Стояк",                 Новый ОписаниеТипов("СправочникСсылка.УПЖКХ_Стояки"));
	ТаблицаОбъектов.Колонки.Добавить("НастроенУчетПоСтоякам", Новый ОписаниеТипов("Булево"));
	
	Для Каждого ТекОбъект ИЗ СписокОбъектов Цикл
		НоваяСтрока = ТаблицаОбъектов.Добавить();
		НоваяСтрока.Объект = ТекОбъект.Значение;
	КонецЦикла;
	
	Если ВедетсяУчетПриборовУчетаПоСтоякам Тогда
		
		ТаблицаОбъектов = ДополнитьТаблицуОбъектовСтоякамиПоРесурсу(ТаблицаОбъектов);
		
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ТаблицаОбъектов Цикл
		
		НоваяСтрока = Объект.Счетчики.Добавить();
		
		НоваяСтрока.Объект                    = ТекСтрока.Объект;
		НоваяСтрока.Стояк                     = ТекСтрока.Стояк;
		НоваяСтрока.НастроенУчетПоСтоякам     = ТекСтрока.НастроенУчетПоСтоякам;
		
		НоваяСтрока.ДатаВключения             = Объект.Дата;
		
		НоваяСтрока.Тарифность                 = ПредопределенноеЗначение("Перечисление.КВП_ТарифностьСчетчиков.Однотарифный");
		НоваяСтрока.Разрядность                = 6;
		НоваяСтрока.Коэффициент                = 1;
		НоваяСтрока.СпособРегистрацииПоказаний = ПредопределенноеЗначение("Перечисление.КВП_СпособыРегистрацииПоказанийСчетчиков.НарастающимИтогом");
		
		ОбновитьНаименованиеСчетчикаВСтроке(ЭтаФорма, НоваяСтрока);
		
	КонецЦикла;
	
КонецФункции

&НаСервере
// Дополняет таблицу по объектам стояками по коммунальному ресурсу.
Функция ДополнитьТаблицуОбъектовСтоякамиПоРесурсу(ТаблицаОбъектов);
	
	// Дополняем таблицу объектов стояками по коммунальному ресурсу.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КоммунальныйРесурс", Объект.Услуга.КоммунальныйРесурс);
	Запрос.УстановитьПараметр("ТаблицаОбъектов",    ТаблицаОбъектов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаОбъектов.Объект КАК Объект
	|ПОМЕСТИТЬ ВрТаблица
	|ИЗ
	|	&ТаблицаОбъектов КАК ТаблицаОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ТаблицаОбъектов.Объект ССЫЛКА Справочник.КВП_ЛицевыеСчета
	|			ТОГДА ТаблицаОбъектов.Объект.Адрес
	|		КОГДА ТаблицаОбъектов.Объект ССЫЛКА Справочник.УПЖКХ_Помещения
	|			ТОГДА ТаблицаОбъектов.Объект
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.УПЖКХ_Помещения.ПустаяСсылка)
	|	КОНЕЦ КАК Помещение,
	|	ТаблицаОбъектов.Объект КАК Объект
	|ПОМЕСТИТЬ ВрТаблицаОбъектов
	|ИЗ
	|	ВрТаблица КАК ТаблицаОбъектов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ВрТаблица
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Помещения.Ссылка КАК Помещение,
	|	УПЖКХ_Помещения.ПроектПомещения КАК ПроектПомещения
	|ПОМЕСТИТЬ ВрПроектыПомещений
	|ИЗ
	|	Справочник.УПЖКХ_Помещения КАК УПЖКХ_Помещения
	|ГДЕ
	|	УПЖКХ_Помещения.Ссылка В
	|			(ВЫБРАТЬ
	|				ТаблицаОбъектов.Помещение
	|			ИЗ
	|				ВрТаблицаОбъектов КАК ТаблицаОбъектов)
	|	И НЕ УПЖКХ_Помещения.ПроектПомещения = ЗНАЧЕНИЕ(Справочник.УПЖКХ_ПроектыПомещений.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Стояки.Владелец КАК ПроектПомещения,
	|	УПЖКХ_Стояки.Ссылка КАК Стояк
	|ПОМЕСТИТЬ ВрСтояки
	|ИЗ
	|	Справочник.УПЖКХ_Стояки КАК УПЖКХ_Стояки
	|ГДЕ
	|	УПЖКХ_Стояки.Владелец В
	|			(ВЫБРАТЬ
	|				ПроектыПомещений.ПроектПомещения
	|			ИЗ
	|				ВрПроектыПомещений КАК ПроектыПомещений)
	|	И УПЖКХ_Стояки.КоммунальныйРесурс = &КоммунальныйРесурс
	|	И НЕ УПЖКХ_Стояки.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПроектыПомещений.Помещение КАК Помещение,
	|	ПроектыПомещений.ПроектПомещения КАК ПроектПомещения,
	|	Стояки.Стояк КАК Стояк,
	|	ИСТИНА КАК НастроенУчетПоСтоякам
	|ПОМЕСТИТЬ ВрСтоякиПоПроектам
	|ИЗ
	|	ВрПроектыПомещений КАК ПроектыПомещений
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВрСтояки КАК Стояки
	|		ПО ПроектыПомещений.ПроектПомещения = Стояки.ПроектПомещения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОбъектов.Объект КАК Объект,
	|	ЕСТЬNULL(СтоякиПоПроектам.Стояк, ЗНАЧЕНИЕ(Справочник.УПЖКХ_Стояки.ПустаяСсылка)) КАК Стояк,
	|	ЕСТЬNULL(СтоякиПоПроектам.НастроенУчетПоСтоякам, ЛОЖЬ) КАК НастроенУчетПоСтоякам
	|ИЗ
	|	ВрТаблицаОбъектов КАК ТаблицаОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВрСтоякиПоПроектам КАК СтоякиПоПроектам
	|		ПО ТаблицаОбъектов.Помещение = СтоякиПоПроектам.Помещение";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ НА КЛИЕНТЕ

#Область ПроцедурыИФункцииНаКлиенте

&НаКлиентеНаСервереБезКонтекста
// Процедура обновляет наименование счетчика в строке ТЧ.
//
Процедура ОбновитьНаименованиеСчетчикаВСтроке(Форма, ТекущиеДанные)
	
	Объект = Форма.Объект;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.Объект) Тогда
		ТекущиеДанные.СчетчикНаименование = "";
		Возврат;
	КонецЕсли;
	
	Если Объект.ВручнуюФормироватьИменаСчетчиков Тогда
		Если Объект.РасположениеНомераСчетчикаВНаименовании = 1 Тогда // Слева
			
			НаименованиеСчетчика = ?(ПустаяСтрока(Строка(ТекущиеДанные.Счетчик)), "", Строка(ТекущиеДанные.Счетчик) + ", ");
			
			ТекущиеДанные.СчетчикНаименование = НаименованиеСчетчика + Строка(Объект.НаименованиеУслугиДляИмениСчетчика) + ", "
												+ УПЖКХ_РаботаСОбъектамиУчетаСервер.УкороченныйАдресЗдания(ТекущиеДанные.Объект);
		Иначе // Справа
			
			НаименованиеСчетчика = ?(ПустаяСтрока(Строка(ТекущиеДанные.Счетчик)), "", ", " + Строка(ТекущиеДанные.Счетчик));
			
			ТекущиеДанные.СчетчикНаименование = Объект.НаименованиеУслугиДляИмениСчетчика + ", "
												+ Строка(УПЖКХ_РаботаСОбъектамиУчетаСервер.УкороченныйАдресЗдания(ТекущиеДанные.Объект))
												+ НаименованиеСчетчика;
		КонецЕсли;
	Иначе
		ТекущиеДанные.СчетчикНаименование = Объект.НаименованиеУслугиДляИмениСчетчика + ", "
											+ Строка(УПЖКХ_РаботаСОбъектамиУчетаСервер.УкороченныйАдресЗдания(ТекущиеДанные.Объект));
	КонецЕсли;
	
	ТекущиеДанные.СчетчикНаименование = ТекущиеДанные.СчетчикНаименование + ?(ЗначениеЗаполнено(ТекущиеДанные.Стояк), " (" + Строка(ТекущиеДанные.Стояк) + ")", "");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
// Процедура обновляет панель информации.
Процедура ОбновитьПанельИнформации(ЭлементыФормы, ОбъектФормы)
	
	// Описание настроек сценария установки ПУ.
	ТекстИнформации = "Текущие настройки сценария установки приборов учета: "
					+ "дата установки - " + Формат(ОбъектФормы.Дата, "ДФ='dd.MM.yyyy ""г.""'") + "; "
					+ "организация - " + ОбъектФормы.Организация + "; "
					+ "услуга - " + ОбъектФормы.Услуга + "; "
					+ "способ ввода параметров - " + ?(ОбъектФормы.МетодВводаДанных = 1, "сводно", "индивидуально") + ".";
	
	// Добавление описания дополнительных действий.
	Если ОбъектФормы.ВводитьПоказанияСчетчиков Или ОбъектФормы.ВыполнитьНазначениеУслуги Тогда
		
		ТекстИнформации = ТекстИнформации + "
						|Дополнительные действия -";
		
		Если ОбъектФормы.ВводитьПоказанияСчетчиков Тогда
			ТекстИнформации = ТекстИнформации + " ввод начальных показаний приборов учета;";
		КонецЕсли;
		
		Если ОбъектФормы.ВыполнитьНазначениеУслуги Тогда
			ТекстИнформации = ТекстИнформации + " назначение услуги на лицевые счета устанавливаемых приборов учета;";
		КонецЕсли;
		
		// Замена последнего символа ";" на точку.
		Если Прав(ТекстИнформации, 1) = ";" Тогда
			ТекстИнформации = Лев(ТекстИнформации, СтрДлина(ТекстИнформации) - 1) + ".";
		КонецЕсли;
		
	КонецЕсли;
	
	// Вывод итогового описания в подсказку.
	ЭлементыФормы.Счетчики.РасширеннаяПодсказка.Заголовок = ТекстИнформации;
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняет действия для установки счетчиков.
Процедура ВыполнитьУстановкуСчетчиков()
	
	// Добавим записи из регистра в табличную часть.
	КолонкаОбъект = ПолучитьОбъектыСчетчикиСервер();
	ДобавитьЗаписиИзРегистраСервер(КолонкаОбъект);
	СтруктураРезультат = ВыполнитьУстановкуСчетчиковСервер();
	
	мНазначениеУслуги = Неопределено;
	СтруктураРезультат.Свойство("НазначениеУслуги", мНазначениеУслуги);
	Если ЗначениеЗаполнено(мНазначениеУслуги) Тогда
		Элементы.ГиперссылкаНазначениеУслуг.Заголовок = 
			"Создан документ назначения услуг" + ?(Не ДокументПроведенСервер(мНазначениеУслуги), " (НЕ ПРОВЕДЕН)", "");
	Иначе
		Элементы.ГиперссылкаНазначениеУслуг.Видимость = Ложь;
	КонецЕсли;
	
	мУстановкаСчетчика = Неопределено;
	СтруктураРезультат.Свойство("УстановкаСчетчика", мУстановкаСчетчика);
	Если ЗначениеЗаполнено(мУстановкаСчетчика) Тогда
		Элементы.ГиперссылкаУстановкаСчетчиков.Заголовок = 
			"Создан документ установки счетчиков" + ?(Не ДокументПроведенСервер(мУстановкаСчетчика), " (НЕ ПРОВЕДЕН)", "");
	Иначе
		Элементы.ГиперссылкаУстановкаСчетчиков.Видимость = Ложь;
	КонецЕсли;
	
	мДокументПоказанийНаЗдание = Неопределено;
	СтруктураРезультат.Свойство("ДокументПоказанийНаЗдание", мДокументПоказанийНаЗдание);
	Если ЗначениеЗаполнено(мДокументПоказанийНаЗдание) Тогда
		Элементы.ГиперссылкаВводНачальныхПоказанийНаЗдание.Заголовок = 
			"Создан документ ввода показаний на здание" + ?(Не ДокументПроведенСервер(мДокументПоказанийНаЗдание),
															" (НЕ ПРОВЕДЕН)", "");
		Элементы.ГиперссылкаВводНачальныхПоказанийНаЗдание.Видимость = Истина;
	КонецЕсли;
	
	мДокументПоказанийНаПодъезд = Неопределено;
	СтруктураРезультат.Свойство("ДокументПоказанийНаПодъезд", мДокументПоказанийНаПодъезд);
	Если ЗначениеЗаполнено(мДокументПоказанийНаПодъезд) Тогда
		Элементы.ГиперссылкаВводНачальныхПоказанийНаПодъезд.Заголовок  = 
			"Создан документ ввода показаний на подъезд" + ?(Не ДокументПроведенСервер(мДокументПоказанийНаПодъезд),
															 " (НЕ ПРОВЕДЕН)", "");
		Элементы.ГиперссылкаВводНачальныхПоказанийНаПодъезд.Видимость = Истина;
	КонецЕсли;
	
	мДокументПоказанийНаПомещение = Неопределено;
	СтруктураРезультат.Свойство("ДокументПоказанийНаПомещение", мДокументПоказанийНаПомещение);
	Если ЗначениеЗаполнено(мДокументПоказанийНаПомещение) Тогда
		Элементы.ГиперссылкаВводНачальныхПоказанийНаПомещение.Заголовок = 
			"Создан документ ввода показаний на помещение" + ?(Не ДокументПроведенСервер(мДокументПоказанийНаПомещение),
																" (НЕ ПРОВЕДЕН)", "");
		Элементы.ГиперссылкаВводНачальныхПоказанийНаПомещение.Видимость = Истина;
	КонецЕсли;
	
	мДокументПоказанийНаЛС = Неопределено;
	СтруктураРезультат.Свойство("ДокументПоказанийНаЛС", мДокументПоказанийНаЛС);
	Если ЗначениеЗаполнено(мДокументПоказанийНаЛС) Тогда
		Элементы.ГиперссылкаВводНачальныхПоказанийНаЛС.Заголовок = 
			"Создан документ ввода показаний на лицевой счет" + ?(Не ДокументПроведенСервер(мДокументПоказанийНаЛС),
																  " (НЕ ПРОВЕДЕН)", "");
		Элементы.ГиперссылкаВводНачальныхПоказанийНаЛС.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
