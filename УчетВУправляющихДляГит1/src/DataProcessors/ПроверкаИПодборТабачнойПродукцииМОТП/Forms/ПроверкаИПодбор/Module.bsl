&НаКлиенте
Перем СоответствиеШтрихкодовСтрокДерева Экспорт;

&НаКлиенте
Перем КэшированныеЗначения Экспорт;

&НаКлиенте
Перем Ссылка Экспорт;


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ИнициализироватьДанныеФормы();
	
	ОбработатьИПроверитьПереданныеПараметры(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьПараметрыПроверкиКодовМаркировки();
	
	ПараметрыУказанияСерий = ПроверкаИПодборПродукцииМОТП.ПараметрыУказанияСерий(ЭтотОбъект);
		
	УстановитьРежимПросмотра();
	
	Если НЕ ПроверкаНеПоДокументу Тогда
		ВосстановитьСохраненныеРезультатыПроверки();
		
		Если ВосстановленыСохраненныеРезультатыПроверки Тогда
			УстановитьРежимПросмотра();
			РассчитатьИтогиУстановитьВидимость();
		КонецЕсли;
	КонецЕсли;
	
	ТребуетсяОбновлениеКлючаСессии = ИнтерфейсМОТПВызовСервера.ТребуетсяОбновлениеКлючаСессии(Организация);
	
	ИнтеграцияИСПереопределяемый.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект,
		"ПодобраннаяТабачнаяПродукцияХарактеристика", "Элементы.ПодобраннаяТабачнаяПродукция.ТекущиеДанные.Номенклатура");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСНоменклатурой(ЭтотОбъект,
		"ПодобраннаяТабачнаяПродукцияСерия", "Элементы.ПодобраннаяТабачнаяПродукция.ТекущиеДанные.Номенклатура");
	СобытияФормИСПереопределяемый.УстановитьСвязиПараметровВыбораСХарактеристикой(ЭтотОбъект,
		"ПодобраннаяТабачнаяПродукцияСерия", "Элементы.ПодобраннаяТабачнаяПродукция.ТекущиеДанные.Характеристика");
	
	СобытияФормИСПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ВосстановленыСохраненныеРезультатыПроверки Тогда
		ЗаполнитьПараметрыПроверкиКодовМаркировки(Отказ);
		
		Если Отказ Тогда
			Возврат;
		Иначе
			ОпределитьНеобходимостьОбращенияКСервисуМОТП();
		КонецЕсли;
	КонецЕсли;
	
	ПроверкаИПодборПродукцииМОТПКлиент.ДополнитьПараметрыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий);
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(Неопределено, ЭтаФорма, "СканерШтрихкода");
	// Конец ПодключаемоеОборудование
	
	Если ВосстановленыСохраненныеРезультатыПроверки Тогда
		СоответствиеШтрихкодовСтрокДерева = СоответствиеШтрихкодовСтрокДерева(АдресСоответствиеШтрихкодыИдентификаторыСтрок);
		
		Если ПараметрыПроверкиКодовМаркировки.ОтсутствуетПодключениеМОТП Тогда
			Если ТребуетсяОбновлениеКлючаСессии Тогда
				ПодключитьОбработчикОжидания("ОбработкаОжиданияПовторногоЗапросаКлючаСессии", 0.5, Истина);
			Иначе
				ПриПодключенииКСервисуМОТП();
			КонецЕсли;
		КонецЕсли;	
	ИначеЕсли ТребуетсяОбновлениеКлючаСессии Тогда
		ПодключитьОбработчикОжидания("ОбработкаОжиданияЗапросаКлючаСессии", 0.5, Истина);
	Иначе
		ЗагрузитьДанныеДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	РежимПроверки = Настройки.Получить("РежимПроверки");
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ВыполняетсяЗакрытие Тогда
		
		Если Модифицированность Тогда
			
			Отказ = Истина;
			
			ТекстВопроса = НСтр("ru = 'Все несохраненные результаты проверки будут потеряны. Все равно закрыть?'");
			ОписаниеОповещенияПослеВопросаПриЗакрытииФормы = Новый ОписаниеОповещения("ПослеВопросаПриЗакрытииФормы", ЭтотОбъект);
			
			ПоказатьВопрос(ОписаниеОповещенияПослеВопросаПриЗакрытииФормы, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	// ПодключаемоеОборудование
	МенеджерОборудованияКлиент.НачатьОтключениеОборудованиеПриЗакрытииФормы(Неопределено, ЭтаФорма);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если РежимПросмотра Тогда
		Возврат;
	КонецЕсли;
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	
	СобытияФормИСКлиент.ВнешнееСобытиеПолученыШтрихкоды(
		ОповещениеПриЗавершении,
		ЭтотОбъект, Источник, Событие,
		Данные, ПараметрыСканированияКодовМаркировки());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	ОбработатьИзменениеНоменклатуры = НачатьРегистрациюИзмененийНоменклатурыВСтроке();
	
	СобытияФормМОТПКлиентПереопределяемый.ОбработкаВыбораНоменклатуры(ЭтотОбъект,
		ВыбранноеЗначение, ИсточникВыбора, ПараметрыУказанияСерий, КэшированныеЗначения);
	
	Если ИспользоватьХарактеристикиНоменклатуры Тогда
		СобытияФормМОТПКлиентПереопределяемый.ОбработкаВыбораХарактеристики(ЭтотОбъект,
			ВыбранноеЗначение, ИсточникВыбора, КэшированныеЗначения);
	КонецЕсли;
	
	Если ИспользоватьСерииНоменклатуры Тогда
		СобытияФормМОТПКлиентПереопределяемый.ОбработкаВыбораСерии(ЭтотОбъект,
			ВыбранноеЗначение, ИсточникВыбора, ПараметрыУказанияСерий);
	КонецЕсли;
	
	Если ОбработатьИзменениеНоменклатуры Тогда
		ЗавершитьРегистрациюИзмененийНоменклатурыВСтроке();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	ОбработатьИзменениеНоменклатуры = НачатьРегистрациюИзмененийНоменклатурыВСтроке();
	
	СобытияФормМОТПКлиентПереопределяемый.ОбработкаВыбораНоменклатуры(ЭтотОбъект,
		НовыйОбъект, Источник, ПараметрыУказанияСерий, КэшированныеЗначения);
	
	Если ИспользоватьХарактеристикиНоменклатуры Тогда
		СобытияФормМОТПКлиентПереопределяемый.ОбработкаВыбораХарактеристики(ЭтотОбъект,
			НовыйОбъект, Источник, КэшированныеЗначения);
	КонецЕсли;
	
	Если ОбработатьИзменениеНоменклатуры Тогда
		ЗавершитьРегистрациюИзмененийНоменклатурыВСтроке();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДекорацияОтсутствуетПодключениеМОТПОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ВыполнитьПодключениеМОТП" Тогда
		ЗапроситьКлючСессииНачало(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИнформацияТребуетсяПеремаркировкаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ИзменитьОтборТребуетсяПеремаркировка" Тогда
		
		УстановленОтборТребуетсяПеремаркировать = Не УстановленОтборТребуетсяПеремаркировать;
	
		Если УстановленОтборТребуетсяПеремаркировать Тогда
			УстановитьОтборПоТребующимПеремаркировки();
		Иначе
			ПроверитьПризнакУстановкиОтбораВДереве(ЭтотОбъект);
		КонецЕсли;
	
		ПроверкаИПодборПродукцииМОТПКлиентСервер.ОтобразитьИнформациюОНеобходимостиПеремаркировки(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияНедопустимыеКодыМаркировкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ИзменитьОтборНедопустимыеКодыМаркировки" Тогда
		
		УстановленОтборНедопустимыеКодыМаркировки = Не УстановленОтборНедопустимыеКодыМаркировки;
	
		Если УстановленОтборНедопустимыеКодыМаркировки Тогда
			УстановитьОтборНедопустимыеКодыМаркировки();
		Иначе
			ПроверитьПризнакУстановкиОтбораВДереве(ЭтотОбъект);
		КонецЕсли;
		
		ПроверкаИПодборПродукцииМОТПКлиентСервер.ОтобразитьИнформациюОНедопустимыхКодахМаркировки(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеРежимаПроверкиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НавигационнаяСсылкаФорматированнойСтроки = "ИзменитьРежимПроверки" Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("РежимПроверки", РежимПроверки);
		
		ОповещениеОИзмененииРежимаПроверки = Новый ОписаниеОповещения("ПослеИзмененияРежимаПроверки", ЭтотОбъект);
		
		ОткрытьФорму("Обработка.ПроверкаИПодборТабачнойПродукцииМОТП.Форма.ИзменениеРежимаПроверки", ПараметрыОткрытия, ЭтотОбъект, 
		             УникальныйИдентификатор,,, ОповещениеОИзмененииРежимаПроверки, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли НавигационнаяСсылкаФорматированнойСтроки = "ИзменитьДетализацию" Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ДетализацияСтруктурыХранения", ДетализацияСтруктурыХранения);
		ПараметрыОткрытия.Вставить("РежимВыбора",                  Истина);
		
		ОповещениеОИзмененииРежимаДетализации = Новый ОписаниеОповещения("ПослеИзмененияРежимаДетализации", ЭтотОбъект);
		
		ОткрытьФорму("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.ФормаВыбора", ПараметрыОткрытия, ЭтотОбъект, 
		             УникальныйИдентификатор,,, ОповещениеОИзмененииРежимаДетализации, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовДерева

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ДеревоМаркированнойПродукцииПредставлениеСодержимоеУпаковки
		И НЕ ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ТекущиеДанные.ТипУпаковки)
		И ЗначениеЗаполнено(ТекущиеДанные.Номенклатура) Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.Номенклатура);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеДоступностьюКомандыРазобратьУпаковку();
	
	ПроверкаИПодборПродукцииМОТПКлиентСервер.ОбновитьВыводимоеПредставлениеПроверкиСодержимого(ЭтотОбъект, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииПередУдалением(Элемент, Отказ)
	
	ОчиститьСообщения();
	
	ТекущиеДанные = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные.СтатусПроверки <> ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась") Тогда
		
		Если Не РежимПодбораСуществующихУпаковок Тогда
		
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				НСтр("ru = 'Удалять можно только строки в статусе ""Не числилось"".'"),,,
				"ДеревоМаркированнойПродукции",
				Отказ);
			
			Возврат;
			
		Иначе
			
			РодительскаяСтрока = ТекущиеДанные.ПолучитьРодителя();
			
			Если ТекущиеДанные.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.ПачкиБезБлока")
				Или ТекущиеДанные.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.БлокиБезКоробки")
				Или (РодительскаяСтрока <> Неопределено
				     И РодительскаяСтрока.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.ПачкиБезБлока")
				     И РодительскаяСтрока.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.БлокиБезКоробки")) Тогда
			
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru = 'Удалять можно только строки в статусе ""Не числилось"", упаковки верхнего уровня, пачки без блоков или блоки без коробки.'"),,,
					"ДеревоМаркированнойПродукции",
					Отказ);
			
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	РодительскаяСтрока         = ТекущиеДанные.ПолучитьРодителя();
	ИдентификаторТекущейСтроки = ТекущиеДанные.ПолучитьИдентификатор();
	
	Если РодительскаяСтрока <> Неопределено Тогда
		
		ИдентификаторРодителяУдаляемойСтроки = РодительскаяСтрока.ПолучитьИдентификатор();
		
	КонецЕсли;
	
	Если ИдентификаторТекущейСтроки = ИдентификаторТекущейПроверяемойУпаковки Тогда
		
		ИдентификаторТекущейПроверяемойУпаковки = ИдентификаторРодителяУдаляемойСтроки;
		
	КонецЕсли;
	
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ТекущиеДанные.ТипУпаковки) Тогда
		
		КоличествоУдаляемыхТребующихПеремаркировки = ?(ТекущиеДанные.ТребуетсяПеремаркировка, 1, 0);
		ОпределитьКоличествоТребующихПеремаркировкиДляКоллекции(ТекущиеДанные.ПолучитьЭлементы(), КоличествоУдаляемыхТребующихПеремаркировки);
		
		Если КоличествоУдаляемыхТребующихПеремаркировки > 0 Тогда
			КоличествоУпаковокКоторыеНеобходимоПеремаркировать = КоличествоУпаковокКоторыеНеобходимоПеремаркировать - КоличествоУдаляемыхТребующихПеремаркировки;
			ТребуетсяОбновитьИнформациюОНеобходимостиПеремаркировки = Истина;
		КонецЕсли;
		
		Для Каждого СтрокаТаблицы Из ТекущиеДанные.ПолучитьЭлементы() Цикл
			ДобавитьСтрокуСПодчиненнымиВТаблицуИзменений(ТаблицаИзмененийТабачнойПродукции, СтрокаТаблицы);
		КонецЦикла 
		
	Иначе
		
		ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийТабачнойПродукции, ТекущиеДанные, - 1);
		
	КонецЕсли;
	
	КоличествоУдаляемыхНедопустимыхКодовМаркировки = ?(ТекущиеДанные.НедопустимыйКодМаркировки, 1, 0);
	ОпределитьКоличествоНедопустимыхКодовМаркировкиДляКоллекции(ТекущиеДанные.ПолучитьЭлементы(), КоличествоУдаляемыхНедопустимыхКодовМаркировки);
	
	Если КоличествоУдаляемыхНедопустимыхКодовМаркировки > 0 Тогда
		КоличествоНедопустимыхКодовМаркировки = КоличествоНедопустимыхКодовМаркировки - КоличествоУдаляемыхНедопустимыхКодовМаркировки;
		ТребуетсяОбновитьИнформациюНедопустимыеКодыМаркировки = Истина;
	КонецЕсли;
	
	СоответствиеШтрихкодовСтрокДерева.Удалить(ТекущиеДанные.Штрихкод);
	УдалитьИзСоответствияШтрихкодовДляКоллекции(ТекущиеДанные.ПолучитьЭлементы());
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииСтатусПроверкиПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если ТекущиеДанные.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда
		УстановитьСтатусОтсутствуетДляПодчиненных(ТекущиеДанные);
		ПроверкаИПодборПродукцииМОТПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(ТекущиеДанные, Ложь);
	КонецЕсли;
	
	ПроверкаИПодборПродукцииМОТПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(ТекущиеДанные);
	ПроверкаИПодборПродукцииМОТПКлиентСервер.УстановитьИндексКартинкиСтатусаПроверки(ТекущиеДанные);
	ПроверкаИПодборПродукцииМОТПКлиентСервер.УстановитьДоступностьУпаковкиДляПроверки(ТекущиеДанные, ДоступныеДляПроверкиУпаковки);
	
	ПроверитьСоответствиеОтборуПриИзмененииСтроки(ТекущиеДанные);
	ПроверкаИПодборПродукцииМОТПКлиентСервер.ОбновитьВыводимоеПредставлениеПроверкиСодержимого(ЭтотОбъект, ТекущиеДанные);
	
	Если ПроверитьНеобходимостьПеремаркировкиПриИзмененииСтатусаПроверки Тогда
		ПриИзмененииМаркировкиСоставаУпаковкиНаСервере(ТекущиеДанные.ПолучитьИдентификатор(), Истина);
	КонецЕсли;
	
	Если ТаблицаИзмененийТабачнойПродукции.Количество() > 0 Тогда
		ОбработатьТаблицуИзмененийТабачнойПродукции(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииСтатусПроверкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ВыбранноеЗначение = ТекущиеДанные.СтатусПроверки Тогда
		Возврат;
	КонецЕсли;
		
	Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует")
		И Не УстановкаСтатусаОтсутствуетВозможна(ТекущиеДанные) Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует")
		Или ТекущиеДанные.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда
		
		ПроверитьНеобходимостьПеремаркировкиПриИзмененииСтатусаПроверки = Истина;
		
	КонецЕсли;
	
	Если НеобходимоУменьшитьКоличествоПодобраннойПродукции(РежимПодбораСуществующихУпаковок, ТекущиеДанные, ВыбранноеЗначение) Тогда
		ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийТабачнойПродукции, ТекущиеДанные, -1);
	ИначеЕсли НеобходимоУвеличитьКоличествоПодобраннойПродукции(РежимПодбораСуществующихУпаковок, ТекущиеДанные, ВыбранноеЗначение) Тогда
		ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийТабачнойПродукции, ТекущиеДанные, +1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоМаркированнойПродукцииПослеУдаления(Элемент)
	
	Если ИдентификаторРодителяУдаляемойСтроки <> - 1 Тогда
		
		СтрокаДляПересчета = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторРодителяУдаляемойСтроки);
		Если СтрокаДляПересчета <> Неопределено Тогда
			ПроверкаИПодборПродукцииМОТПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаДляПересчета, Ложь);
			ПроверкаИПодборПродукцииМОТПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(СтрокаДляПересчета);
			ПриИзмененииМаркировкиСоставаУпаковкиНаСервере(ИдентификаторРодителяУдаляемойСтроки, Истина);
		КонецЕсли;
		
		ИдентификаторРодителяУдаляемойСтроки = - 1;
		
	КонецЕсли;
	
	Если ТребуетсяОбновитьИнформациюОНеобходимостиПеремаркировки
		Или ТаблицаИзмененийТабачнойПродукции.Количество() > 0 Тогда
		ПроверкаИПодборПродукцииМОТПКлиентСервер.ОтобразитьИнформациюОНеобходимостиПеремаркировки(ЭтотОбъект);
		ОбработатьТаблицуИзмененийТабачнойПродукции(ЭтотОбъект);
	КонецЕсли;
	
	Если ТребуетсяОбновитьИнформациюНедопустимыеКодыМаркировки Тогда
		ПроверкаИПодборПродукцииМОТПКлиентСервер.ОтобразитьИнформациюОНедопустимыхКодахМаркировки(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 


#Область ОбработчикиСобытийЭлементовПодобраннаяПродукция

&НаКлиенте
Процедура ПодобраннаяТабачнаяПродукцияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Элемент.ПодчиненныеЭлементы.ПодобраннаяТабачнаяПродукцияНоменклатура
		И ТекущиеДанные.НоменклатураСопоставлена Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.Номенклатура);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяТабачнаяПродукцияПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяТабачнаяПродукцияПередУдалением(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.ПодобраннаяТабачнаяПродукция.ТекущиеДанные;
	
	Если ТекущиеДанные.Количество > 0 ИЛИ ТекущиеДанные.КоличествоМОТП > 0 Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Удалять можно только строки с нулевым количеством.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяТабачнаяПродукцияПослеУдаления(Элемент)
	
	КоличествоСтрокПодобраннойТабачнойПродукции = ПодобраннаяТабачнаяПродукция.Количество();
	
	ПроверкаИПодборПродукцииМОТПКлиентСервер.ПересчитатьНомераСтрок(ПодобраннаяТабачнаяПродукция);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяТабачнаяПродукцияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяТабачнаяПродукцияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяТабачнаяПродукцияНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПодобраннаяТабачнаяПродукция.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СобытияФормМОТПКлиентПереопределяемый.ПриИзмененииНоменклатуры(ЭтотОбъект,
		ТекущиеДанные, КэшированныеЗначения, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяТабачнаяПродукцияНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ПодобраннаяТабачнаяПродукция.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СобытияФормМОТПКлиентПереопределяемый.ПриНачалеВыбораНоменклатуры(ЭтотОбъект, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяТабачнаяПродукцияНоменклатураСоздание(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ПодобраннаяТабачнаяПродукция.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СобытияФормМОТПКлиентПереопределяемый.ПриСозданииНоменклатуры(ЭтотОбъект, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяТабачнаяПродукцияХарактеристикаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПодобраннаяТабачнаяПродукция.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СобытияФормМОТПКлиентПереопределяемый.ПриИзмененииХарактеристики(ЭтотОбъект,
		ТекущиеДанные, КэшированныеЗначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяТабачнаяПродукцияХарактеристикаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ПодобраннаяТабачнаяПродукция.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СобытияФормМОТПКлиентПереопределяемый.ПриНачалеВыбораХарактеристики(ЭтотОбъект, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяТабачнаяПродукцияХарактеристикаСоздание(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПодобраннаяТабачнаяПродукция.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СобытияФормМОТПКлиентПереопределяемый.ПриСозданииХарактеристики(ЭтотОбъект, ТекущиеДанные, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяТабачнаяПродукцияСерияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПодобраннаяТабачнаяПродукция.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СобытияФормМОТПКлиентПереопределяемый.ПриИзмененииСерии(ЭтотОбъект,
		ТекущиеДанные, КэшированныеЗначения, ПараметрыУказанияСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяТабачнаяПродукцияСерияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПодобраннаяТабачнаяПродукция.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СтандартнаяОбработка = Ложь;
	ОткрытьПодборСерий(Элемент.ТекстРедактирования, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяТабачнаяПродукцияКоличествоПодобраноПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПодобраннаяТабачнаяПродукция.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СобытияФормМОТПКлиентПереопределяемый.ПриИзмененииКоличества(ЭтотОбъект,
		ТекущиеДанные, КэшированныеЗначения, ПараметрыУказанияСерий);
	
КонецПроцедуры

#КонецОбласти 


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СохранитьПромежуточныеРезультатыПроверки(Команда)
	
	ОчиститьСообщения();
	
	Если Модифицированность Тогда
		
		Если РезультатыПроверкиУспешноСохранены() Тогда
			Модифицированность = Ложь;
			Оповестить("ПредварительноеСохранениеРезультатовСканированияТабачнойПродукции", ПроверяемыйДокумент);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаЗавершена(Команда)
	
	ОчиститьСообщения();
	
	ТребуетсяВопросПоНепровереннымОтложенным = Ложь;
	ТребуетсяВопросОАктеОРасхождения         = Ложь;
	
	ЕстьРасхождения            = ПроверкаИПодборПродукцииМОТПКлиент.ЕстьРасхожденияПоРезультатамПроверкиИПодбора(ПодобраннаяТабачнаяПродукция);
	ИтогиПроверкиПриЗавершении = ИтогиПроверкиПриЗавершении();
	
	ТребуетсяВопросПоНепровереннымОтложенным = ИтогиПроверкиПриЗавершении.КоличествоНепроверенных > 0
	                                           Или ИтогиПроверкиПриЗавершении.КоличествоОтложенных > 0;
	
	Если ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоДокументПриобретения(ПроверяемыйДокумент)
		И АктыОРасхожденияхПослеПриемкиИспользуются
		И ЕстьРасхождения Тогда
			
			ТребуетсяВопросОАктеОРасхождения = Истина;
			
	КонецЕсли;	
	
	Если ТребуетсяВопросОАктеОРасхождения
		Или ТребуетсяВопросПоНепровереннымОтложенным Тогда
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("КоличествоНепроверенных", ИтогиПроверкиПриЗавершении.КоличествоНепроверенных);
		ПараметрыОткрытияФормы.Вставить("КоличествоОтложенных",    ИтогиПроверкиПриЗавершении.КоличествоОтложенных);
		ПараметрыОткрытияФормы.Вставить("КоличествоВсего",         ИтогиПроверкиПриЗавершении.КоличествоВсего);
		ПараметрыОткрытияФормы.Вставить("КоличествоОтсутствует",   ИтогиПроверкиПриЗавершении.КоличествоОтсутствует);
		ПараметрыОткрытияФормы.Вставить("ЕстьРасхождения",         ЕстьРасхождения);
		ПараметрыОткрытияФормы.Вставить("ПроверяемыйДокумент",     ПроверяемыйДокумент);
		
		ОписаниеОповещенияПослеОтветаНаВопрос = Новый ОписаниеОповещения("ОтветНаВопросПриЗавершенииПроверки", ЭтотОбъект);
		
		ОткрытьФорму("Обработка.ПроверкаИПодборТабачнойПродукцииМОТП.Форма.ВопросПередСохранениемРезультатовПроверки",
		             ПараметрыОткрытияФормы, ЭтотОбъект, УникальныйИдентификатор,,,
		             ОписаниеОповещенияПослеОтветаНаВопрос, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		ПроверкаИПодборПродукцииМОТПКлиент.ПересчитатьХешСуммыВсехУпаковок(ЭтотОбъект);
		
		Если КоличествоУпаковокКоторыеНеобходимоПеремаркировать > 0 Тогда
			ТекстПредупреждения = НСтр("ru = 'Есть упаковки, которые необходимо разобрать.'");
			ПоказатьПредупреждение(, ТекстПредупреждения);
			Возврат;
		Иначе
			ЗавершитьПроверку(Неопределено);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьМаркированнуюУпаковку(Команда)
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("АдресПредыдущихШтрихкодов", АдресПредыдущихШтрихкодов);
	
	ОповещениеПослеГенерацииШтрихкодаУпаковки = Новый ОписаниеОповещения("ПослеГенерацииШтрихкодаДляНовойУпаковки", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.ГенерацияШтрихкодовУпаковок.Форма.Форма", ПараметрыОткрытияФормы, ЭтотОбъект,,,,
	             ОповещениеПослеГенерацииШтрихкодаУпаковки, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура МаркироватьУпаковку(Команда)
	
	СтрокаСУпаковкойДляПеремаркировки = СтрокаСУпаковкойДляПеремаркировки();
	
	Если СтрокаСУпаковкойДляПеремаркировки = Неопределено Тогда
		
		ПоказатьПредупреждение( , НСтр("ru = 'Спозиционируйтесь на упаковке, которую хотите перемаркировать.'"));
		Возврат;
		
	КонецЕсли;
	
	ДанныеУпаковки = ДанныеУпаковкиДляПеремаркировки(СтрокаСУпаковкойДляПеремаркировки);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторСтроки", СтрокаСУпаковкойДляПеремаркировки.ПолучитьИдентификатор());
	
	ОповещениеПослеПеремаркировкиУпаковки = Новый ОписаниеОповещения("ПослеПеремаркировкиУпаковки",
	                                                                 ЭтотОбъект, 
	                                                                 ДополнительныеПараметры);
	
	ОткрытьФорму("Обработка.ГенерацияШтрихкодовУпаковок.Форма.Форма", ДанныеУпаковки, ЭтотОбъект,,,,
	             ОповещениеПослеПеремаркировкиУпаковки, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзТСД(Команда)
	
	ОчиститьСообщения();
	
	МенеджерОборудованияКлиент.НачатьЗагрузкуДанныеИзТСД(
		Новый ОписаниеОповещения("ЗагрузитьИзТСДЗавершение", ЭтотОбъект),
		УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура СгенерироватьСерии(Команда)
	
	ОчиститьСообщения();
	
	Если НЕ ПроверкаИПодборПродукцииМОТПКлиентСервер.ТребуетсяУказаниеСерий(ПодобраннаяТабачнаяПродукция) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Отсутствует табачная продукция, для которой требуется генерация серий.'"));
		Возврат;
	КонецЕсли;
	
	СгенерироватьСерииПодобраннойТабачнойПродукции();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьОтключитьПроверкуПоВладельцу(Команда)
	
	ПараметрыПроверкиКодовМаркировки.КонтролироватьВладельца = НЕ ПараметрыПроверкиКодовМаркировки.КонтролироватьВладельца;
	
	УстановитьЗаголовокКомандыПроверкиПоВладельцу(ЭтотОбъект);
	
	ПроверитьСтатусыКодовМаркировки();
	
КонецПроцедуры

&НаКлиенте
Процедура РазобратьУпаковку(Команда)

	ТекущиеДанные = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ТекущиеДанные.ТипУпаковки) Тогда 
		Возврат;
	ИначеЕсли ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаБлока(ТекущиеДанные)
		И ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.КоробкиСБлоками") Тогда
		Возврат;
	КонецЕсли;
	
	УдаляемыеУпаковки = Новый Массив();
	УдаляемыеУпаковки.Добавить(ТекущиеДанные);
	
	ТекущийРодитель = ТекущиеДанные.ПолучитьРодителя();
	
	Пока ТекущийРодитель <> Неопределено Цикл
		Если ТекущийРодитель.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.БлокиБезКоробки") Тогда
			Прервать;
		Иначе
			УдаляемыеУпаковки.Добавить(ТекущийРодитель);
			ТекущийРодитель = ТекущийРодитель.ПолучитьРодителя();
		КонецЕсли;
	КонецЦикла;
	
	ИндексУпаковки     = 0;
	КоличествоУпаковок = УдаляемыеУпаковки.Количество();
	
	Пока ИндексУпаковки < КоличествоУпаковок Цикл
		УдаляемаяУпаковка = УдаляемыеУпаковки[ИндексУпаковки];
		ПереместитьВложенныеУпаковкиПриРазборкеУпаковки(УдаляемаяУпаковка.ПолучитьЭлементы());
		
		Если ИндексУпаковки < (КоличествоУпаковок - 1) Тогда
			РодительУдаляемойУпаковки = УдаляемыеУпаковки[ИндексУпаковки + 1];
		ИначеЕсли ТекущийРодитель <> Неопределено Тогда
			РодительУдаляемойУпаковки = ТекущийРодитель;
		Иначе
			РодительУдаляемойУпаковки = ДеревоМаркированнойПродукции;
		КонецЕсли;
		
		РодительУдаляемойУпаковки.ПолучитьЭлементы().Удалить(УдаляемаяУпаковка);
		ИндексУпаковки = ИндексУпаковки + 1;
	КонецЦикла;
	
	СоответствиеШтрихкодовСтрокДерева = Новый Соответствие;
	ДополнитьСоответствиеШтрихкодовСтрокДереваДляКоллекции(
		ДеревоМаркированнойПродукции.ПолучитьЭлементы(),
		СоответствиеШтрихкодовСтрокДерева);
	
	ПроверкаИПодборПродукцииМОТПКлиент.ПересчитатьХешСуммыВсехУпаковок(ЭтотОбъект);
	ПроверкаИПодборПродукцииМОТПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковок(ДеревоМаркированнойПродукции);
	
	КоличествоНедопустимыхКодовМаркировки = 0;
	ОпределитьКоличествоНедопустимыхКодовМаркировкиДляКоллекции(ДеревоМаркированнойПродукции.ПолучитьЭлементы(), КоличествоНедопустимыхКодовМаркировки);
	ПроверкаИПодборПродукцииМОТПКлиентСервер.ОтобразитьИнформациюОНедопустимыхКодахМаркировки(ЭтотОбъект);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПроверенные(Команда)
	
	СкрытьПроверенные = Не СкрытьПроверенные;
	Элементы.ДеревоМаркированнойПродукцииСкрытьПроверенные.Пометка = СкрытьПроверенные;
	
	Если СкрытьПроверенные Тогда
		СкрытьПроверенныеСтрокиДерева(ЭтотОбъект);
	Иначе
		ПроверитьПризнакУстановкиОтбораВДереве(ЭтотОбъект);
	КонецЕсли;
	
	ОбновитьОтображениеДанных();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуВыполнить(Команда)
	
	ОчиститьСообщения();
	
	ШтрихкодированиеИСКлиентПереопределяемый.ПоказатьВводШтрихкода(
		Новый ОписаниеОповещения("РучнойВводШтрихкодаЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьПроверкуЗаново(Команда)
	
	ОчиститьСообщения();

	ОписаниеОповещенияПослеОтвета = Новый ОписаниеОповещения("ПослеВопросаОНачалеПроверкиЗаново", ЭтотОбъект);
	
	Если РежимПодбораСуществующихУпаковок Тогда
		ТекстВопроса = НСтр("ru = 'Сохраненные промежуточные результаты проверки и подбора будут удалены. Продолжить?'");
	Иначе
		ТекстВопроса = НСтр("ru = 'Результаты проверки будут очищены. Продолжить?'");
	КонецЕсли;
	
	ПоказатьВопрос(ОписаниеОповещенияПослеОтвета, ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

#Область КомандыУстановкиСтатуса

&НаКлиенте
Процедура УстановитьСтатусПроверкиВНаличии(Команда)
	
	УстановитьСтатусДляВыделенныхСтрок(Элементы.ДеревоМаркированнойПродукции.ВыделенныеСтроки,
	                                  ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПроверкиНеПроверялась(Команда)
	
	УстановитьСтатусДляВыделенныхСтрок(Элементы.ДеревоМаркированнойПродукции.ВыделенныеСтроки,
	                                  ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПроверкиОтложена(Команда)
	
	УстановитьСтатусДляВыделенныхСтрок(Элементы.ДеревоМаркированнойПродукции.ВыделенныеСтроки,
	                                  ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отложена"));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусПроверкиОтсутствует(Команда)
	
	УстановитьСтатусДляВыделенныхСтрок(Элементы.ДеревоМаркированнойПродукции.ВыделенныеСтроки,
	                                  ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует"));
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область Серии

&НаКлиенте
Процедура ОткрытьПодборСерий(Текст = "", ТекущиеДанные = Неопределено)
	
	Ссылка = ПроверяемыйДокумент;
	
	ИнтеграцияИСКлиент.ОткрытьПодборСерий(ЭтотОбъект,, Текст, Ложь, ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура СгенерироватьСерииПодобраннойТабачнойПродукции()
	
	НачатьРегистрациюИзмененийНоменклатурыВТаблице();
	
	ДанныеДляГенерацииСерий = ПроверкаИПодборПродукцииМОТПКлиент.ДанныеДляГенерацииСерийПоПодобраннойТабачнойПродкуции(ПодобраннаяТабачнаяПродукция);
	СгенерироватьСерииНаСервере(ДанныеДляГенерацииСерий);
	ПроверкаИПодборПродукцииМОТПКлиент.ЗаполнитьСерииВПодобраннойТабачнойПродукции(ЭтотОбъект, ДанныеДляГенерацииСерий, ПодобраннаяТабачнаяПродукция);
	
	ЗавершитьРегистрациюИзмененийНоменклатурыВТаблице();
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаОтбораСкрытьПроверенные

&НаКлиентеНаСервереБезКонтекста
Процедура СкрытьПроверенныеСтрокиДерева(Форма)

	Если Форма.УстановленОтборТребуетсяПеремаркировать Тогда
		Форма.УстановленОтборТребуетсяПеремаркировать = Ложь;
		ПроверкаИПодборПродукцииМОТПКлиентСервер.ОтобразитьИнформациюОНеобходимостиПеремаркировки(Форма);
	КонецЕсли;

	Если Форма.УстановленОтборНедопустимыеКодыМаркировки Тогда
		Форма.УстановленОтборНедопустимыеКодыМаркировки = Ложь;
		ПроверкаИПодборПродукцииМОТПКлиентСервер.ОтобразитьИнформациюОНедопустимыхКодахМаркировки(Форма);
	КонецЕсли;
	
	Если Форма.СкрытьПроверенные Тогда
	
		СтрокиДерева = Форма.ДеревоМаркированнойПродукции.ПолучитьЭлементы();
		
		Для Каждого СтрокаДерева Из СтрокиДерева Цикл
			
			СоответствуетОтбору = Ложь;
			СкрытьПроверенныеВСтрокеДерева(Форма, СтрокаДерева, СоответствуетОтбору);
			
		КонецЦикла;
	
	КонецЕсли;
	
	ПроверитьПризнакУстановкиОтбораВДереве(Форма);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СкрытьПроверенныеВСтрокеДерева(Форма, СтрокаДерева, СоответствуетОтбору)
	
	ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();

	ТекущаяСтрокаСоотвествуетОтбору = Ложь;
	
	Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		
		СоответствуетОтбору = Ложь;
		
		СкрытьПроверенныеВСтрокеДерева(Форма, ПодчиненнаяСтрока, СоответствуетОтбору);
		
		Если СоответствуетОтбору Тогда
			ТекущаяСтрокаСоотвествуетОтбору = Истина;
		КонецЕсли;
		
	КонецЦикла;

	Если Не ТекущаяСтрокаСоотвествуетОтбору Тогда
		
		ТекущаяСтрокаСоотвествуетОтбору = СтрокаДерева.СтатусПроверки <> ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии")
			И СтрокаДерева.СтатусПроверки <> ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась");
		
	КонецЕсли;
	
	СоответствуетОтбору = ТекущаяСтрокаСоотвествуетОтбору;
	СтрокаДерева.НеСоответствуетОтбору = Не СоответствуетОтбору;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьПризнакУстановкиОтбораВДереве(Форма)
	
	Если Форма.КоличествоУпаковокКоторыеНеобходимоПеремаркировать = 0 Тогда
		Форма.УстановленОтборТребуетсяПеремаркировать = Ложь;
	КонецЕсли;
	
	Если Форма.КоличествоНедопустимыхКодовМаркировки = 0 Тогда
		Форма.УстановленОтборНедопустимыеКодыМаркировки = Ложь;
	КонецЕсли;
	
	Форма.УстановленОтбор = (Форма.СкрытьПроверенные
		Или Форма.УстановленОтборТребуетсяПеремаркировать
		Или Форма.УстановленОтборНедопустимыеКодыМаркировки);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСоответствиеОтборуПриИзмененииСтроки(СтрокаДерева)
	
	Если Не СкрытьПроверенные Тогда
		Возврат;
	КонецЕсли;
	
	СоответствуетОтбору = Ложь;
	
	СкрытьПроверенныеВСтрокеДерева(ЭтотОбъект, СтрокаДерева, СоответствуетОтбору);
	СтрокаДерева.НеСоответствуетОтбору = Не СоответствуетОтбору;
	
	РодительскаяСтрока = СтрокаДерева.ПолучитьРодителя();
	Пока РодительскаяСтрока <> Неопределено Цикл
		
		Для Каждого ПодчиненнаяСтрока Из РодительскаяСтрока.ПолучитьЭлементы() Цикл
			
			РодительскаяСтрока.НеСоответствуетОтбору = Истина;
			Если Не ПодчиненнаяСтрока.НеСоответствуетОтбору Тогда
				РодительскаяСтрока.НеСоответствуетОтбору = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		РодительскаяСтрока = РодительскаяСтрока.ПолучитьРодителя();
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОтборНедопустимыеКодыМаркировки

&НаКлиенте
Процедура УстановитьОтборНедопустимыеКодыМаркировки()
	
	Если СкрытьПроверенные Тогда
		СкрытьПроверенные = Ложь;
		Элементы.ДеревоМаркированнойПродукцииСкрытьПроверенные.Пометка = Ложь;
	КонецЕсли;

	Если УстановленОтборТребуетсяПеремаркировать Тогда
		УстановленОтборТребуетсяПеремаркировать = Ложь;
		ПроверкаИПодборПродукцииМОТПКлиентСервер.ОтобразитьИнформациюОНеобходимостиПеремаркировки(ЭтотОбъект);
	КонецЕсли;
		
	СтрокиДерева = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
		
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		СоответствуетОтбору = Ложь;
		УстановитьОтборНедопустимыеКодыМаркировкиВСтрокеДерева(СтрокаДерева, СоответствуетОтбору);
		
	КонецЦикла;
	
	ПроверитьПризнакУстановкиОтбораВДереве(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборНедопустимыеКодыМаркировкиВСтрокеДерева(Знач СтрокаДерева, СоответствуетОтбору)
	
	ТекущаяСтрокаСоотвествуетОтбору = Ложь;
	
	ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
	
	Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		СоответствуетОтбору = Ложь;
		
		УстановитьОтборНедопустимыеКодыМаркировкиВСтрокеДерева(ПодчиненнаяСтрока, СоответствуетОтбору);
		
		Если СоответствуетОтбору Тогда
			ТекущаяСтрокаСоотвествуетОтбору = Истина;
		КонецЕсли;
	КонецЦикла;

	Если Не ТекущаяСтрокаСоотвествуетОтбору Тогда
		ТекущаяСтрокаСоотвествуетОтбору = СтрокаДерева.НедопустимыйКодМаркировки;
	КонецЕсли;
	
	СоответствуетОтбору = ТекущаяСтрокаСоотвествуетОтбору;
	СтрокаДерева.НеСоответствуетОтбору = Не СоответствуетОтбору;
	
КонецПроцедуры

#КонецОбласти

#Область ИзменениеСтатуса

&НаКлиенте
Процедура УстановитьСтатусДляВыделенныхСтрок(ВыделенныеСтроки, НовыйСтатус)
	
	КоличествоКОбработке = ВыделенныеСтроки.Количество();
	КоличествоОбработанныхСтрок = 0;
	МассивУпаковокСИзменившимсяСоставом = Новый Массив;
	
	Для Каждого ИдентификаторВыделеннойСтроки Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторВыделеннойСтроки);
		
		Если ДанныеСтроки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСтроки.НедопустимыйКодМаркировки Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСтроки.СтатусПроверки = НовыйСтатус Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСтроки.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.ПачкиБезБлока")
		 ИЛИ ДанныеСтроки.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.БлокиБезКоробки") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДанныеСтроки.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась") Тогда
			Продолжить;
		КонецЕсли;
		
		Если НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует")
			И Не УстановкаСтатусаОтсутствуетВозможна(ДанныеСтроки) Тогда
			Продолжить;
		КонецЕсли;
		
		РодительскаяСтрока = ДанныеСтроки.ПолучитьРодителя();
		Если РодительскаяСтрока <> Неопределено 
			И РодительскаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда
			Продолжить;
		КонецЕсли;
		
		Если НеобходимоУменьшитьКоличествоПодобраннойПродукции(РежимПодбораСуществующихУпаковок, ДанныеСтроки, НовыйСтатус) Тогда
			ДобавитьУпаковкуСтрокиВМассивИзмененныхУпаковок(ДанныеСтроки, МассивУпаковокСИзменившимсяСоставом);
			ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийТабачнойПродукции, ДанныеСтроки, -1);
		ИначеЕсли НеобходимоУвеличитьКоличествоПодобраннойПродукции(РежимПодбораСуществующихУпаковок, ДанныеСтроки, НовыйСтатус) Тогда
			ДобавитьУпаковкуСтрокиВМассивИзмененныхУпаковок(ДанныеСтроки, МассивУпаковокСИзменившимсяСоставом);
			ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийТабачнойПродукции, ДанныеСтроки, +1);
		КонецЕсли;
		
		Если НовыйСтатус = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда
			УстановитьСтатусОтсутствуетДляПодчиненных(ДанныеСтроки);
		КонецЕсли;
		
		ДанныеСтроки.СтатусПроверки = НовыйСтатус;
		
		ПроверкаИПодборПродукцииМОТПКлиентСервер.УстановитьИндексКартинкиСтатусаПроверки(ДанныеСтроки);
		ПроверкаИПодборПродукцииМОТПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(ДанныеСтроки);
		
		КоличествоОбработанныхСтрок = КоличествоОбработанныхСтрок + 1;
		
	КонецЦикла;
	
	Если СкрытьПроверенные И КоличествоОбработанныхСтрок > 0 Тогда
		СкрытьПроверенныеСтрокиДерева(ЭтотОбъект);
	КонецЕсли;
	
	Если МассивУпаковокСИзменившимсяСоставом.Количество() > 0
		Или ТаблицаИзмененийТабачнойПродукции.Количество() > 0 Тогда
		ПриИзмененииМаркировкиСоставаУпаковкиМассиваСтрок(МассивУпаковокСИзменившимсяСоставом, Истина);
	КонецЕсли;
	
	ОповеститьПользователяОИзмененииСтатусаПроверки(НовыйСтатус, КоличествоОбработанныхСтрок, КоличествоКОбработке);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОтсутствуетДляПодчиненных(СтрокаДерева)
	 
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		УстановитьСтатусОтсутствуетДляСтрокиДерева(ПодчиненнаяСтрока);
		
	КонецЦикла;
	
	ПроверкаИПодборПродукцииМОТПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаДерева, Ложь);
	ПроверкаИПодборПродукцииМОТПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(СтрокаДерева);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусОтсутствуетДляСтрокиДерева(СтрокаДерева)

	Если СтрокаДерева.СтатусПроверки <> ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отложена") Тогда
		СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует");
		
		Если РежимПодбораСуществующихУпаковок Тогда
			ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийТабачнойПродукции, СтрокаДерева, -1);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		УстановитьСтатусОтсутствуетДляСтрокиДерева(ПодчиненнаяСтрока);
		
	КонецЦикла;
	
	ПроверкаИПодборПродукцииМОТПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаДерева, Ложь);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция УстановкаСтатусаОтсутствуетВозможна(ТекущиеДанные)
	
	Для Каждого ПодчиненнаяСтрока Из ТекущиеДанные.ПолучитьЭлементы() Цикл
		
		Если ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась") Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Если Не УстановкаСтатусаОтсутствуетВозможна(ПодчиненнаяСтрока) Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ОповеститьПользователяОИзмененииСтатусаПроверки(НовыйСтатус, КоличествоОбработанных, КоличествоВсего)

	ШаблонЗаголовкаОбработано   = НСтр("ru='Статус проверки ""%1"" установлен'");
	ШаблонСообщенияОбработано   = НСтр("ru='Для %1 из %2 выделенных в списке строк установлен статус проверки ""%3""'");
	ШаблонЗаголовкаНеОбработано = НСтр("ru='Статус проверки ""%1"" не установлен'");
	ШаблонСообщенияНеОбработано = НСтр("ru='Статус проверки ""%1"" не установлен ни для одной строки.'");;
	
	Если КоличествоОбработанных > 0 Тогда
		
		ТекстЗаголовка = СтрШаблон(ШаблонЗаголовкаОбработано, НовыйСтатус);
		ТекстСообщения = СтрШаблон(ШаблонСообщенияОбработано,
		                           КоличествоОбработанных,
		                           КоличествоВсего,
		                           НовыйСтатус);
		
	Иначе
		
		ТекстЗаголовка = СтрШаблон(ШаблонЗаголовкаНеОбработано, НовыйСтатус);
		ТекстСообщения = СтрШаблон(ШаблонСообщенияНеОбработано, НовыйСтатус);
		
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(ТекстЗаголовка,, ТекстСообщения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

#КонецОбласти

#Область ПересчетИтогов

&НаСервере
Процедура ПересчитатьВсеИтогиФормыНаСервере()
	
	ПроверкаИПодборПродукцииМОТП.ПересчитатьХешСуммыВсехУпаковок(ЭтотОбъект);
	
	ПересчитатьВсеИтогиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьВсеИтогиФормыНаКлиенте()
	
	ПроверкаИПодборПродукцииМОТПКлиент.ПересчитатьХешСуммыВсехУпаковок(ЭтотОбъект);
	
	ПересчитатьВсеИтогиФормы(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПересчитатьВсеИтогиФормы(Форма)
	
	ПроверкаИПодборПродукцииМОТПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковок(Форма.ДеревоМаркированнойПродукции);
	ПроверкаИПодборПродукцииМОТПКлиентСервер.ОпределитьТипыВсехУпаковок(Форма.ДеревоМаркированнойПродукции);
	
	Форма.КоличествоСтрокПодобраннойТабачнойПродукции = Форма.ПодобраннаяТабачнаяПродукция.Количество();
	
	СформироватьПредставлениеНастроек(Форма);
	
	ШтрихкодированиеИСКлиентСервер.ОтобразитьСохраненныйВыборПоМаркируемойПродукции(Форма);
	
КонецПроцедуры

#КонецОбласти

#Область ОпределениеТипаУпаковки

&НаСервере
Процедура ОпределитьТипУпаковкиДляМассиваСтрок(МассивСтрок)
	
	Для Каждого СтрокаМассива Из МассивСтрок Цикл
		
		ПроверитьНеобходимостьМаркировкиПриИзмененииСтроки(СтрокаМассива);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область Перемаркировка

&НаКлиенте
Процедура ПослеГенерацииШтрихкодаДляНовойУпаковки(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ПроверитьКорректностьШтрихкодаПриДобавлении(Результат.Штрихкод, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	АдресПредыдущихШтрихкодов = Результат.АдресПредыдущихШтрихкодов;
	
	ДобавитьНовуюУпаковку(Результат, Результат.ТипУпаковки);

КонецПроцедуры

&НаКлиенте
Процедура ПослеПеремаркировкиУпаковки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	ПроверитьКорректностьШтрихкодаПриДобавлении(Результат.Штрихкод, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	АдресПредыдущихШтрихкодов = Результат.АдресПредыдущихШтрихкодов;
	
	ПеремаркироватьУпаковку(Результат.Штрихкод, ДополнительныеПараметры.ИдентификаторСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКорректностьШтрихкодаПриДобавлении(Штрихкод, Отказ)

	Если ПустаяСтрока(Штрихкод) Тогда
		ПоказатьПредупреждение(, НСтр("ru = 'Упаковке не может быть назначен пустой Штрихкод.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтроки = СоответствиеШтрихкодовСтрокДерева.Получить(Штрихкод);
	
	Если ИдентификаторСтроки <> Неопределено Тогда
		
		ТекстСообщения = СтрШаблон(НСтр("ru = 'Штрихкодом %1 уже маркирована другая упаковка. Маркируйте данную упаковку другим штрихкодом.'"),
		                           ИнтеграцияИСКлиентСервер.ПредставлениеШтрихкода(Штрихкод));
		
		ПоказатьПредупреждение(,ТекстСообщения); 
		Отказ = Истина;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПеремаркироватьУпаковку(Штрихкод, ИдентификаторСтрокиУпаковки)
	
	СтрокаСУпаковкой = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторСтрокиУпаковки);
	
	Если СтрокаСУпаковкой = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаменитьШтрихКодВСпискахУпаковок(ЭтотОбъект,СтрокаСУпаковкой.Штрихкод, Штрихкод);
	СоответствиеШтрихкодовСтрокДерева.Удалить(СтрокаСУпаковкой.Штрихкод);
	СтрокаСУпаковкой.Штрихкод = Штрихкод;
	СоответствиеШтрихкодовСтрокДерева.Вставить(СтрокаСУпаковкой.Штрихкод, ИдентификаторСтрокиУпаковки);
	
	ПроверкаИПодборПродукцииМОТПКлиентСервер.СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(СтрокаСУпаковкой);
	
	ПриИзмененииМаркировкиСоставаУпаковкиНаСервере(ИдентификаторСтрокиУпаковки, Ложь);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаменитьШтрихКодВСпискахУпаковок(Форма, СтарыйШтрихкод, НовыйШтрихкод)

	ИзменитьЗначениеШтрихкодаВСписке(СтарыйШтрихкод, НовыйШтрихкод, Форма.ДобавленныеУпаковки);
	ИзменитьЗначениеШтрихкодаВСписке(СтарыйШтрихкод, НовыйШтрихкод, Форма.ДоступныеДляПроверкиУпаковки);
	ИзменитьЗначениеШтрихкодаВСписке(СтарыйШтрихкод, НовыйШтрихкод, Форма.УпаковкиДокумента);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьЗначениеШтрихкодаВСписке(СтарыйШтрихкод, НовыйШтрихкод, СписокШтрихкодов)
	
	НайденныйЭлемент = СписокШтрихкодов.НайтиПоЗначению(СтарыйШтрихкод);
	
	Если НайденныйЭлемент <> Неопределено Тогда
		
		СписокШтрихкодов.Удалить(НайденныйЭлемент);
		СписокШтрихКодов.Добавить(НовыйШтрихкод);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииМаркировкиСоставаУпаковкиНаСервере(ИдентификаторСтрокиУпаковки, ПроверятьТипУпаковки)

	Если ПроверятьНеобходимостьПеремаркировки Тогда
		ПроверитьНеобходимостьМаркировкиПриИзмененииСтроки(ИдентификаторСтрокиУпаковки);
	КонецЕсли;
	
	Если ПроверятьТипУпаковки Тогда
		ПроверкаИПодборПродукцииМОТПКлиентСервер.ОпределитьТипУпаковкиПриИзмененииСтроки(ДеревоМаркированнойПродукции, ИдентификаторСтрокиУпаковки);
	КонецЕсли;
	
	ОбработатьТаблицуИзмененийТабачнойПродукции(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииМаркировкиСоставаУпаковкиМассиваСтрок(МассивСтрок, ПроверятьТипУпаковки)

	Если ПроверятьНеобходимостьПеремаркировки Тогда
		ПроверитьНеобходимостьМаркировкиДляМассиваСтрок(МассивСтрок);
	КонецЕсли;
	
	Если ПроверятьТипУпаковки Тогда
		ОпределитьТипУпаковкиДляМассиваСтрок(МассивСтрок);
	КонецЕсли;

	ОбработатьТаблицуИзмененийТабачнойПродукции(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоТребующимПеремаркировки()
	
	Если СкрытьПроверенные Тогда
		СкрытьПроверенные = Ложь;
		Элементы.ДеревоМаркированнойПродукцииСкрытьПроверенные.Пометка = Ложь;
	КонецЕсли;
	
	Если УстановленОтборНедопустимыеКодыМаркировки Тогда
		УстановленОтборНедопустимыеКодыМаркировки = Ложь;
		ПроверкаИПодборПродукцииМОТПКлиентСервер.ОтобразитьИнформациюОНедопустимыхКодахМаркировки(ЭтотОбъект);
	КонецЕсли;
	
	СтрокиДерева = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
		
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		СоответствуетОтбору = Ложь;
		ПроверкаИПодборПродукцииМОТПКлиентСервер.УстановитьОтборТребуетсяПеремаркировкаВСтрокеДерева(СтрокаДерева, СоответствуетОтбору);
	КонецЦикла;
	
	ПроверитьПризнакУстановкиОтбораВДереве(ЭтотОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНеобходимостьМаркировкиПриИзмененииСтроки(ИдентификаторИзмененойСтроки)

	ИзмененнаяСтрока = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторИзмененойСтроки);
	
	Если ИзмененнаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаХешСумм = ПроверкаИПодборПродукцииИС.ПустаяТаблицаХешСумм();
	
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ИзмененнаяСтрока.ТипУпаковки) Тогда
		ПроверкаИПодборПродукцииИС.РассчитатьХешСуммыУпаковки(ИзмененнаяСтрока, ТаблицаХешСумм, Ложь);
	КонецЕсли;
	
	РодительИзмененнойСтроки = ИзмененнаяСтрока.ПолучитьРодителя();
	
	Пока РодительИзмененнойСтроки <> Неопределено 
		И ИнтеграцияИСКлиентСервер.ЭтоУпаковка(РодительИзмененнойСтроки.ТипУпаковки) Цикл
		
		ПроверкаИПодборПродукцииИС.РассчитатьХешСуммыУпаковки(РодительИзмененнойСтроки, ТаблицаХешСумм, Ложь);
		РодительИзмененнойСтроки = РодительИзмененнойСтроки.ПолучитьРодителя();
		
	КонецЦикла;
	
	ТаблицаПеремаркировки = ПроверкаИПодборПродукцииИС.ТаблицаПеремаркировки(ТаблицаХешСумм);
	
	ПроверкаИПодборПродукцииМОТПКлиентСервер.ПроверитьНеобходимостьПеремаркировки(ЭтотОбъект, ТаблицаПеремаркировки, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНеобходимостьМаркировкиДляМассиваСтрок(МассивСтрок)
	
	Для Каждого СтрокаМассива Из МассивСтрок Цикл
		
		ПроверитьНеобходимостьМаркировкиПриИзмененииСтроки(СтрокаМассива);
		
	КонецЦикла
	
КонецПроцедуры

&НаКлиенте
Функция СтрокаСУпаковкойДляПеремаркировки()
	
	ТекущиеДанные = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПоказатьПредупреждение( , НСтр("ru = 'Спозиционируйтесь на упаковке, которую хотите перемаркировать.'"));
		Возврат Неопределено;
	КонецЕсли;
	
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ТекущиеДанные.ТипУпаковки) Тогда
		
		Возврат ТекущиеДанные;
		
	Иначе
		
		РодительскаяСтрока = ТекущиеДанные.ПолучитьРодителя();
		Если РодительскаяСтрока = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(РодительскаяСтрока.ТипУпаковки) Тогда
			
			Возврат РодительскаяСтрока;
			
		Иначе
			
			Возврат Неопределено;
			
		КонецЕсли
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ДанныеУпаковкиДляПеремаркировки(СтрокаДерева)
	
	ДанныеДляПеремаркировки = Новый Структура;
	ДанныеДляПеремаркировки.Вставить("ТипУпаковки",               СтрокаДерева.ТипУпаковки);
	ДанныеДляПеремаркировки.Вставить("Штрихкод",                  СтрокаДерева.Штрихкод);
	ДанныеДляПеремаркировки.Вставить("АдресПредыдущихШтрихкодов", АдресПредыдущихШтрихкодов);
	
	ДанныеДляПеремаркировки.Вставить("КоличествоВложенныхЕдиниц", 0);
	ДанныеДляПеремаркировки.Вставить("Характеристика",            СтрокаДерева.Характеристика);
	ДанныеДляПеремаркировки.Вставить("Номенклатура",              СтрокаДерева.Номенклатура);
	
	Если СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка") Тогда
		
		Для Каждого СтрокаСодержимого Из СтрокаДерева.ПолучитьЭлементы() Цикл
			Если СтрокаСодержимого.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
				ДанныеДляПеремаркировки.КоличествоВложенныхЕдиниц = ДанныеДляПеремаркировки.КоличествоВложенныхЕдиниц + 1;
			Иначе
				ДанныеДляПеремаркировки.КоличествоВложенныхЕдиниц = ДанныеДляПеремаркировки.КоличествоВложенныхЕдиниц + СтрокаСодержимого.КоличествоПодчиненныхПачек;
			КонецЕсли;
		КонецЦикла
		
	КонецЕсли;
	
	Возврат ДанныеДляПеремаркировки;
	
КонецФункции

&НаКлиенте
Процедура ОпределитьКоличествоТребующихПеремаркировкиДляКоллекции(СтрокиДерева, КоличествоТребующихПеремаркировки)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если СтрокаДерева.ТребуетсяПеремаркировка Тогда
			КоличествоТребующихПеремаркировки = КоличествоТребующихПеремаркировки + 1;
		КонецЕсли;
		
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки) Тогда 
			ОпределитьКоличествоТребующихПеремаркировкиДляКоллекции(СтрокаДерева.ПолучитьЭлементы(), КоличествоТребующихПеремаркировки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОпределитьКоличествоНедопустимыхКодовМаркировкиДляКоллекции(СтрокиДерева, КоличествоНедопустимыхКодов);
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если СтрокаДерева.НедопустимыйКодМаркировки Тогда
			КоличествоНедопустимыхКодов = КоличествоНедопустимыхКодов + 1;
		КонецЕсли;
		
		ОпределитьКоличествоНедопустимыхКодовМаркировкиДляКоллекции(СтрокаДерева.ПолучитьЭлементы(), КоличествоНедопустимыхКодов);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьУпаковкуСтрокиВМассивИзмененныхУпаковок(СтрокаДерева, МассивУпаковокСИзменившимсяСоставом)
	
	СтрокаРодитель = СтрокаДерева.ПолучитьРодителя();

	Если СтрокаРодитель <> Неопределено
		И ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаРодитель.ТипУпаковки) Тогда
		
		ИденитификаторСтрокиРодителя = СтрокаРодитель.ПолучитьИдентификатор();
		
		Если МассивУпаковокСИзменившимсяСоставом.Найти(ИденитификаторСтрокиРодителя) = Неопределено Тогда
			
			МассивУпаковокСИзменившимсяСоставом.Добавить(ИденитификаторСтрокиРодителя);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПроверкаСтатусаКодовМаркировки

&НаСервереБезКонтекста
Функция ЗапроситьСтатусыКодовМаркировки(КодыМаркировки)
	
	Возврат ИнтерфейсМОТП.ЗапроситьСтатусыКодовМаркировки(КодыМаркировки);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСтатусыКодовМаркировки()
	
	КодыМаркировки = Новый Массив();
	
	Для Каждого КлючИЗначение Из СоответствиеШтрихкодовСтрокДерева Цикл
		КодыМаркировки.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	РезультатЗапроса = ЗапроситьСтатусыКодовМаркировки(КодыМаркировки);
	
	Для Каждого КлючИЗначение Из СоответствиеШтрихкодовСтрокДерева Цикл
		СтатусКодаМаркировки = РезультатЗапроса.СтатусыКодовМаркировки[КлючИЗначение.Ключ];
		
		Если СтатусКодаМаркировки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДерева = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(КлючИЗначение.Значение);
		
		Если СтрокаДерева = Неопределено Тогда
			Продолжить;
		ИначеЕсли СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.ПачкиБезБлока")
			ИЛИ СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.БлокиБезКоробки") Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДерева.СтатусКодаМаркировки = СтатусКодаМаркировки.Статус;
		СтрокаДерева.ИННВладельца         = СтатусКодаМаркировки.ИННВладельца;
	КонецЦикла;
		
	ПроверитьСтатусыКодовМаркировки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСтатусыКодовМаркировки()
	
	ДополнительныеПараметрыПроверки = Новый Структура();
	ДополнительныеПараметрыПроверки.Вставить("ТаблицаИзмененийТабачнойПродукции", ТаблицаИзмененийТабачнойПродукции);
	ДополнительныеПараметрыПроверки.Вставить("РежимПодбораСуществующихУпаковок", РежимПодбораСуществующихУпаковок);
	ДополнительныеПараметрыПроверки.Вставить("НачальныйСтатусПроверки", НачальныйСтатусПроверки);
	
	КоличествоНедопустимыхКодовМаркировки = 0;
	
	ПроверитьДопустимостьКодовМаркировки(ДеревоМаркированнойПродукции.ПолучитьЭлементы(),
		ПараметрыПроверкиКодовМаркировки, ДополнительныеПараметрыПроверки, КоличествоНедопустимыхКодовМаркировки);

	ПроверитьПризнакУстановкиОтбораВДереве(ЭтотОбъект);

	ПроверкаИПодборПродукцииМОТПКлиентСервер.ОтобразитьИнформациюОНедопустимыхКодахМаркировки(ЭтотОбъект);
	
	Если ТаблицаИзмененийТабачнойПродукции.Количество() > 0 Тогда
		ОбработатьТаблицуИзмененийТабачнойПродукции(ЭтотОбъект);
	КонецЕсли;
	
	Если КоличествоУпаковокКоторыеНеобходимоПеремаркировать > 0 Тогда
		ПроверкаИПодборПродукцииМОТПКлиент.ПересчитатьХешСуммыВсехУпаковок(ЭтотОбъект);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура 	ПроверитьДопустимостьКодовМаркировки(ЭлементыДерева, ПараметрыПроверкиКодовМаркировки, ДополнительныеПараметрыПроверки, КоличествоНедопустимыхКодов)
	
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		ПроверкаИПодборПродукцииМОТПКлиентСервер.ПроверитьДопустимостьКодаМаркировки(ЭлементДерева, ПараметрыПроверкиКодовМаркировки);
		
		Если ЭлементДерева.НедопустимыйКодМаркировки Тогда
			Если НеобходимоУменьшитьКоличествоПодобраннойПродукции(
				ДополнительныеПараметрыПроверки.РежимПодбораСуществующихУпаковок,
				ЭлементДерева, ДополнительныеПараметрыПроверки.НачальныйСтатусПроверки) Тогда
				
				ДобавитьСтрокуВТаблицуИзменений(ДополнительныеПараметрыПроверки.ТаблицаИзмененийТабачнойПродукции, ЭлементДерева, -1);
				
			ИначеЕсли НеобходимоУвеличитьКоличествоПодобраннойПродукции(
				ДополнительныеПараметрыПроверки.РежимПодбораСуществующихУпаковок,
				ЭлементДерева, ДополнительныеПараметрыПроверки.НачальныйСтатусПроверки) Тогда
				
				ДобавитьСтрокуВТаблицуИзменений(ДополнительныеПараметрыПроверки.ТаблицаИзмененийТабачнойПродукции, ЭлементДерева, +1);
				
			КонецЕсли;
			
			ЭлементДерева.СтатусПроверки = ДополнительныеПараметрыПроверки.НачальныйСтатусПроверки;
			
			КоличествоНедопустимыхКодов = КоличествоНедопустимыхКодов + 1;
		КонецЕсли;
		
		ПодчиненныеЭлементы = ЭлементДерева.ПолучитьЭлементы();
		
		Если ПодчиненныеЭлементы.Количество() > 0 Тогда
			ПроверитьДопустимостьКодовМаркировки(ПодчиненныеЭлементы, ПараметрыПроверкиКодовМаркировки, ДополнительныеПараметрыПроверки, КоличествоНедопустимыхКодов);
		КонецЕсли;
		
		Если ЭлементДерева.ПолучитьРодителя() = Неопределено Тогда
			ПроверкаИПодборПродукцииМОТПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(ЭлементДерева, Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область НачальноеЗаполнение

&НаСервереБезКонтекста
Функция СоответствиеШтрихкодовСтрокДерева(АдресСоответствиеШтрихкодыИдентификаторыСтрок)
	
	Если ЭтоАдресВременногоХранилища(АдресСоответствиеШтрихкодыИдентификаторыСтрок) Тогда
		Возврат ПолучитьИзВременногоХранилища(АдресСоответствиеШтрихкодыИдентификаторыСтрок);
	Иначе
		Возврат Новый Соответствие;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОжиданияЗапросаКлючаСессии()
	
	ЗапроситьКлючСессииНачало();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОжиданияПовторногоЗапросаКлючаСессии()
	
	ЗапроситьКлючСессииНачало(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьКлючСессииНачало(ПовторныйЗапрос = Ложь)
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ПовторныйЗапрос", ПовторныйЗапрос);
	
	ОповещениеПриЗапросеКлючаСессии = Новый ОписаниеОповещения("ЗапроситьКлючСессииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ИнтерфейсМОТПКлиент.ЗапроситьКлючСессии(Организация, ОповещениеПриЗапросеКлючаСессии);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапроситьКлючСессииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОтказОтАвторизации = Ложь;
	ОшибкаАвторизации  = Ложь;

	ОчиститьСообщения();
	
	Если ТипЗнч(Результат) <> Тип("Соответствие") Тогда
		ОтказОтАвторизации = Истина;
	Иначе
		РезультатАвторизации = Результат[Организация];
		
		Если РезультатАвторизации = Неопределено Тогда
			ОшибкаАвторизации = Истина;
			ТекстОшибки = НСтр("ru = 'Произошла ошибка при авторизации в ИС МОТП.'");
		ИначеЕсли РезультатАвторизации <> Истина Тогда
			ОшибкаАвторизации = Истина;
			ТекстОшибки = РезультатАвторизации;
		КонецЕсли;
	КонецЕсли;
	
	ПовторныйЗапрос = Ложь;
	
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		ДополнительныеПараметры.Свойство("ПовторныйЗапрос", ПовторныйЗапрос);
	КонецЕсли;
	
	Если ПовторныйЗапрос Тогда
		Если ОтказОтАвторизации ИЛИ ОшибкаАвторизации Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Иначе
			ПриПодключенииКСервисуМОТП();
		КонецЕсли;
	ИначеЕсли ОтказОтАвторизации Тогда
		ЗакрытьФорму();
	ИначеЕсли ОшибкаАвторизации Тогда
		ПриОшибкеПодключенияКСервисуМОТП(ТекстОшибки);
	Иначе
		ЗагрузитьДанныеДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПодключенииКСервисуМОТП()

	ПараметрыПроверкиКодовМаркировки.ОтсутствуетПодключениеМОТП = Ложь;
	
	Если ПараметрыПроверкиКодовМаркировки.КонтролироватьСтатусыКодовМаркировки Тогда
		ОбновитьСтатусыКодовМаркировки();
	КонецЕсли;
	
	УправлениеЭлементамиКонтроляСтатусаКодовМаркировки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОшибкеПодключенияКСервисуМОТП(ТекстОшибки)
	
	Если РежимПодбораСуществующихУпаковок Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ПараметрыПроверкиКодовМаркировки.ОтсутствуетПодключениеМОТП = Истина;
		ТребуетсяОбращениеКСервисуМОТП = Ложь;
		ЗагрузитьДанныеДокумента();
	Иначе
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ЗакрытьФорму", ЭтотОбъект), ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИПроверитьПереданныеПараметры(Отказ)
	
	Организация = Параметры.Организация;
	Если Не ЗначениеЗаполнено(Организация) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'В форму не передана организация.'"),,,,Отказ);
	КонецЕсли;
	
	Склад = Параметры.Склад;
	Если ИспользоватьСерииНоменклатуры Тогда
		Если Не ЗначениеЗаполнено(Склад) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'В форму не передан склад.'"),,,,Отказ);
		ИначеЕсли ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Склад, "ЭтоГруппа") = Истина Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Форма не поддерживает работу с группой складов.'"),,,,Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.ПроверкаНеПоДокументу Тогда
		Если НЕ ЭтоАдресВременногоХранилища(Параметры.АдресПроверяемыхДанных) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'В форму не переданы данные для проверки.'"),,,, Отказ);
		КонецЕсли;
	ИначеЕсли Не ЗначениеЗаполнено(Параметры.ПроверяемыйДокумент) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'В форму не передан документ для проверки.'"),,,, Отказ);
	КонецЕсли;
	
	Если Не Параметры.РежимПодбораСуществующихУпаковок И Не ЗначениеЗаполнено(Параметры.Контрагент) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'В форму не передан контрагент.'"),,,,Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаНеПоДокументу                                  = Параметры.ПроверкаНеПоДокументу;
	АдресПроверяемыхДанных                                 = Параметры.АдресПроверяемыхДанных;
	ПроверяемыйДокумент                                    = Параметры.ПроверяемыйДокумент;
	РежимПодбораСуществующихУпаковок                       = Параметры.РежимПодбораСуществующихУпаковок;
	РедактированиеФормыНедоступно                          = Параметры.РедактированиеФормыНедоступно;
	КонтролироватьСканируемуюПродукциюПоДокументуОснованию = Параметры.КонтролироватьСканируемуюПродукциюПоДокументуОснованию;
	ПриЗавершенииСохранятьРезультатыПроверки               = Параметры.ПриЗавершенииСохранятьРезультатыПроверки;
	ПроверятьНеобходимостьПеремаркировки                   = Параметры.ПроверятьНеобходимостьПеремаркировки;
	НачальныйСтатусПроверки                                = ?(ЗначениеЗаполнено(Параметры.НачальныйСтатусПроверки),
	                                                           Параметры.НачальныйСтатусПроверки, 
	                                                           Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась);
	
	АктыОРасхожденияхПослеПриемкиИспользуются = ИнтеграцияМОТП.АктыОРасхожденияПослеПоступленияИспользуются(ПроверяемыйДокумент);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПараметрыПроверкиКодовМаркировки()
	
	ПараметрыПроверкиКодовМаркировки = Новый Структура();
	ПараметрыПроверкиКодовМаркировки.Вставить("ОтсутствуетПодключениеМОТП", Ложь);
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьСтатусыКодовМаркировки", Истина);
	ПараметрыПроверкиКодовМаркировки.Вставить("ДопустимыеСтатусыКодовМаркировки");
	
	Если РежимПодбораСуществующихУпаковок Тогда
		ИННВладельца = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Организация, "ИНН");
	Иначе
		ИННВладельца = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Контрагент, "ИНН");
	КонецЕсли;
	
	ПараметрыПроверкиКодовМаркировки.Вставить("КонтролироватьВладельца", Истина);
	ПараметрыПроверкиКодовМаркировки.Вставить("ИННВладельца", ИННВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПараметрыПроверкиКодовМаркировки(Отказ)
	
	ПараметрыСканирования = ПараметрыСканированияКодовМаркировки();
	ДопустимыеСтатусыМОТП = Неопределено;
	
	Если ПараметрыСканирования.ЗапрашиватьСтатусыМОТП Тогда
		Если НЕ ПараметрыСканирования.Свойство("ДопустимыеСтатусыМОТП", ДопустимыеСтатусыМОТП) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не определены допустимые статусы кодов маркировки МОТП.'"),,,,Отказ);
		ИначеЕсли ДопустимыеСтатусыМОТП.Количество() = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не определены допустимые статусы кодов маркировки МОТП.'"),,,,Отказ);
		КонецЕсли;
	КонецЕсли;
		
	Если НЕ Отказ Тогда
		ПараметрыПроверкиКодовМаркировки.КонтролироватьСтатусыКодовМаркировки = ПараметрыСканирования.ЗапрашиватьСтатусыМОТП;
		ПараметрыПроверкиКодовМаркировки.КонтролироватьВладельца              = ПараметрыСканирования.ЗапрашиватьСтатусыМОТП;
		ПараметрыПроверкиКодовМаркировки.ДопустимыеСтатусыКодовМаркировки     = ДопустимыеСтатусыМОТП;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпределитьНеобходимостьОбращенияКСервисуМОТП()
	
	ПараметрыСканирования = ПараметрыСканированияКодовМаркировки();
	
	ТребуетсяОбращениеКСервисуМОТП = ПараметрыСканирования.ЗапрашиватьСтатусыМОТП
		Или ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхШтрихкодовМОТП;
	
	Если Не ПроверкаНеПоДокументу И Не РежимПодбораСуществующихУпаковок И Не ТребуетсяОбращениеКСервисуМОТП Тогда
		ТребуетсяОбращениеКСервисуМОТП = ЕстьВложенностьУпаковокВДокументе(ПроверяемыйДокумент, ПараметрыСканированияКодовМаркировки());
	КонецЕсли;
	
	Если НЕ ТребуетсяОбращениеКСервисуМОТП Тогда
		ТребуетсяОбновлениеКлючаСессии = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьВложенностьУпаковокВДокументе(ПроверяемыйДокумент, ПараметрыСканирования)
	
	ЕстьВложенностьУпаковок = Ложь;

	ШтрихкодыУпаковок = ШтрихкодированиеИС.ШтрихкодыУпаковокДокумента(ПроверяемыйДокумент, ПараметрыСканирования);
	
	Для Каждого ШтрихкодУпаковки Из ШтрихкодыУпаковок Цикл
		Если НЕ ШтрихкодированиеМОТПКлиентСервер.ЭтоКодМаркировкиТабачнойПачки(ШтрихкодУпаковки) Тогда
			ЕстьВложенностьУпаковок = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьВложенностьУпаковок;
	
КонецФункции

&НаСервере
Процедура ВосстановитьСохраненныеРезультатыПроверки(ВосстановитьПоАктуРасхождений = Ложь)
	
	Если ВосстановитьПоАктуРасхождений Тогда
		ДокументДляОтбора = ПроверкаИПодборПродукцииМОТП.СформированныйАктОРасхождениях(ПроверяемыйДокумент);
		Если НЕ ЗначениеЗаполнено(ДокументДляОтбора) Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ДокументДляОтбора = ПроверяемыйДокумент;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Документ", ДокументДляОтбора);
	СтруктураРесурсовПроверки = РегистрыСведений.СтатусыПроверкиИПодбораДокументовМОТП.Получить(СтруктураОтбора);
		
	Если НЕ ВосстановитьПоАктуРасхождений Тогда
		Если СтруктураРесурсовПроверки.СтатусПроверкиИПодбора = Перечисления.СтатусыПроверкиИПодбораИС.Завершено Тогда
			НачальныйСтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
			
			Если ПриЗавершенииСохранятьРезультатыПроверки Тогда
				РедактированиеФормыНедоступно = Истина;
			Иначе
				Возврат;
			КонецЕсли;
		ИначеЕсли СтруктураРесурсовПроверки.СтатусПроверкиИПодбора <> Перечисления.СтатусыПроверкиИПодбораИС.Выполняется Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураРесурсовПроверки.ДанныеПроверкиИПодбора) <> Тип("ХранилищеЗначения") Тогда
		Если НЕ ВосстановитьПоАктуРасхождений Тогда
			ВосстановитьСохраненныеРезультатыПроверки(Истина);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ДанныеПроверкиИПодбора = СтруктураРесурсовПроверки.ДанныеПроверкиИПодбора.Получить();
	
	Если ТипЗнч(ДанныеПроверкиИПодбора) <> Тип("Структура") Тогда
		Если НЕ ВосстановитьПоАктуРасхождений Тогда
			ВосстановитьСохраненныеРезультатыПроверки(Истина);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ВосстановленыСохраненныеРезультатыПроверки = Истина;
	
	ПреобразоватьСохраненныеРезультатыПриНеобходимости(ДанныеПроверкиИПодбора);
	
	ВывестиДанныеПроверкиИПодбораНаФорму(ДанныеПроверкиИПодбора);
	
КонецПроцедуры

&НаСервере
Процедура ПреобразоватьСохраненныеРезультатыПриНеобходимости(ДанныеПроверкиИПодбора)
	
	КолонкиДереваПродукции   = ДанныеПроверкиИПодбора.ДеревоМаркированнойПродукции.Колонки;
	КолонкаЗначениеШтрихкода = КолонкиДереваПродукции.Найти("ЗначениеШтрихкода");
	КолонкаШтрихкод          = КолонкиДереваПродукции.Найти("Штрихкод");
	
	Если КолонкаШтрихкод = Неопределено И КолонкаЗначениеШтрихкода <> Неопределено Тогда
		КолонкаЗначениеШтрихкода.Имя = "Штрихкод";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиДанныеПроверкиИПодбораНаФорму(ДанныеПроверкиИПодбора)
	
	Если ДанныеПроверкиИПодбора.Свойство("ДеревоМаркированнойПродукции") Тогда
		ДеревоМаркированнойПродукцииОбъект = ДанныеПроверкиИПодбора.ДеревоМаркированнойПродукции;
		
		Попытка
			ЗначениеВРеквизитФормы(ДеревоМаркированнойПродукцииОбъект, "ДеревоМаркированнойПродукции");
		Исключение
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	Если ДанныеПроверкиИПодбора.Свойство("ПодобраннаяТабачнаяПродукция") Тогда
		ПодобраннаяТабачнаяПродукцияОбъект = ДанныеПроверкиИПодбора.ПодобраннаяТабачнаяПродукция;
		
		Попытка
			ЗначениеВРеквизитФормы(ПодобраннаяТабачнаяПродукцияОбъект, "ПодобраннаяТабачнаяПродукция");
		Исключение
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	Если НЕ ВосстановленыСохраненныеРезультатыПроверки Тогда
		ПроверкаИПодборПродукцииМОТПКлиентСервер.ПересчитатьНомераСтрок(ПодобраннаяТабачнаяПродукция);
		ПроверкаИПодборПродукцииМОТППереопределяемый.ЗаполнитьСлужебныеРеквизитыВКоллекции(ЭтотОбъект, ПодобраннаяТабачнаяПродукция);
		ПроверкаИПодборПродукцииМОТППереопределяемый.ЗаполнитьСтатусыУказанияСерий(ЭтотОбъект, ПараметрыУказанияСерий);
	КонецЕсли;
	
	СоответствиеШтрихкодовСтрокДерева = Новый Соответствие;
	ДополнитьСоответствиеШтрихкодовСтрокДереваДляКоллекции(ДеревоМаркированнойПродукции.ПолучитьЭлементы(), СоответствиеШтрихкодовСтрокДерева);
	
	Если ДанныеПроверкиИПодбора.Свойство("ПараметрыПроверкиКодовМаркировки") Тогда
		ПараметрыПроверкиКодовМаркировки = ДанныеПроверкиИПодбора.ПараметрыПроверкиКодовМаркировки;
	КонецЕсли;
	
	Если ДанныеПроверкиИПодбора.Свойство("КоличествоНедопустимыхКодовМаркировки") Тогда
		КоличествоНедопустимыхКодовМаркировки = ДанныеПроверкиИПодбора.КоличествоНедопустимыхКодовМаркировки;
		ПроверкаИПодборПродукцииМОТПКлиентСервер.ОтобразитьИнформациюОНедопустимыхКодахМаркировки(ЭтотОбъект);
	КонецЕсли;
	
	Если ДанныеПроверкиИПодбора.Свойство("УпаковкиДокумента") Тогда
		УпаковкиДокумента = ДанныеПроверкиИПодбора.УпаковкиДокумента;
	КонецЕсли;
	
	Если ДанныеПроверкиИПодбора.Свойство("ДобавленныеУпаковки") Тогда
		ДобавленныеУпаковки = ДанныеПроверкиИПодбора.ДобавленныеУпаковки;
	КонецЕсли;
	
	Если ДанныеПроверкиИПодбора.Свойство("ДоступныеДляПроверкиУпаковки") Тогда
		ДоступныеДляПроверкиУпаковки = ДанныеПроверкиИПодбора.ДоступныеДляПроверкиУпаковки;
	КонецЕсли;
	
	Если ДанныеПроверкиИПодбора.Свойство("СледующийСтикерОтложено") Тогда
		СледующийСтикерОтложено = ДанныеПроверкиИПодбора.СледующийСтикерОтложено;
	КонецЕсли;
	
	Если ДанныеПроверкиИПодбора.Свойство("ДетализацияСтруктурыХранения") Тогда
		ДетализацияСтруктурыХранения = ДанныеПроверкиИПодбора.ДетализацияСтруктурыХранения;
	ИначеЕсли ДанныеПроверкиИПодбора.Свойство("ДеревоМаркированнойПродукции") Тогда
		ДетализацияСтруктурыХранения = ДетализацияСтруктурыХраненияДерева(ДанныеПроверкиИПодбора.ДеревоМаркированнойПродукции);
	КонецЕсли;
	
	Если ДанныеПроверкиИПодбора.Свойство("РежимПроверки") Тогда
		РежимПроверки = ДанныеПроверкиИПодбора.РежимПроверки;
	КонецЕсли;
	
	Если ДанныеПроверкиИПодбора.Свойство("СохраненВыборПоМаркируемойПродукции") Тогда
		СохраненВыборПоМаркируемойПродукции = ДанныеПроверкиИПодбора.СохраненВыборПоМаркируемойПродукции;
	КонецЕсли;
	
	Если ДанныеПроверкиИПодбора.Свойство("ДанныеВыбораПоМаркируемойПродукции") Тогда
		ДанныеВыбораПоМаркируемойПродукции = ДанныеПроверкиИПодбора.ДанныеВыбораПоМаркируемойПродукции;
	КонецЕсли;
	
	Если ДанныеПроверкиИПодбора.Свойство("ШтрихкодТекущейПроверяемойУпаковки") Тогда
		ШтрихкодТекущейПроверяемойУпаковки = ДанныеПроверкиИПодбора.ШтрихкодТекущейПроверяемойУпаковки;
		Если ЗначениеЗаполнено(ШтрихкодТекущейПроверяемойУпаковки) Тогда
			ИдентификаторТекущейПроверяемойУпаковки = СоответствиеШтрихкодовСтрокДерева.Получить(ШтрихкодТекущейПроверяемойУпаковки);
			Если ИдентификаторТекущейПроверяемойУпаковки <> Неопределено Тогда
				Элементы.ДеревоМаркированнойПродукции.ТекущаяСтрока = ИдентификаторТекущейПроверяемойУпаковки;
				ДанныеТекущейСтроки = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторТекущейПроверяемойУпаковки);
				ПроверкаИПодборПродукцииМОТПКлиентСервер.ОбновитьВыводимоеПредставлениеПроверкиСодержимого(ЭтотОбъект, ДанныеТекущейСтроки);
			Иначе
				ИдентификаторТекущейПроверяемойУпаковки = -1;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеПроверкиИПодбора.Свойство("ДанныеРанееСгенерированныхШтрихкодов") Тогда
		ДанныеРанееСгенерированныхШтрихкодов = ДанныеПроверкиИПодбора.ДанныеРанееСгенерированныхШтрихкодов;
		Если ДанныеРанееСгенерированныхШтрихкодов <> Неопределено Тогда
			АдресПредыдущихШтрихкодов = ПоместитьВоВременноеХранилище(ДанныеРанееСгенерированныхШтрихкодов, УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаДереваМаркированнойПродукции Из ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
		Если СтрокаДереваМаркированнойПродукции.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.ПачкиБезБлока Тогда
			ИдентификаторСтрокиПачкиБезБлока = СтрокаДереваМаркированнойПродукции.ПолучитьИдентификатор();
		КонецЕсли;
		Если СтрокаДереваМаркированнойПродукции.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.БлокиБезКоробки Тогда
			ИдентификаторСтрокиБлокиБезКоробки = СтрокаДереваМаркированнойПродукции.ПолучитьИдентификатор();
		КонецЕсли;
	КонецЦикла;
	
	Если ПустаяСтрока(АдресСоответствиеШтрихкодыИдентификаторыСтрок) Тогда
		АдресСоответствиеШтрихкодыИдентификаторыСтрок = ПоместитьВоВременноеХранилище(
			СоответствиеШтрихкодовСтрокДерева,
			УникальныйИдентификатор);
	Иначе
		АдресСоответствиеШтрихкодыИдентификаторыСтрок = ПоместитьВоВременноеХранилище(
			СоответствиеШтрихкодовСтрокДерева,
			АдресСоответствиеШтрихкодыИдентификаторыСтрок);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДополнитьСоответствиеШтрихкодовСтрокДереваДляКоллекции(КоллекцияСтрок, СоответствиеШтрихкодовСтрокДерева)
	
	Для Каждого СтрокаДерева Из КоллекцияСтрок Цикл
		
		Если СтрокаДерева.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.ПачкиБезБлока")
			И СтрокаДерева.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.БлокиБезКоробки") Тогда
			СоответствиеШтрихкодовСтрокДерева.Вставить(СтрокаДерева.Штрихкод, СтрокаДерева.ПолучитьИдентификатор());
		КонецЕсли;
			
		ДополнитьСоответствиеШтрихкодовСтрокДереваДляКоллекции(СтрокаДерева.ПолучитьЭлементы(), СоответствиеШтрихкодовСтрокДерева);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимПросмотра()
	
	Если РедактированиеФормыНедоступно Тогда
		РежимПросмотра = Истина;
	ИначеЕсли НЕ ПроверкаНеПоДокументу Тогда
		РежимПросмотра = НЕ ПравоДоступа("Изменение", ПроверяемыйДокумент.Метаданные());
	КонецЕсли;
	
	Если РежимПросмотра Тогда
		ПроверятьНеобходимостьПеремаркировки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьДанныеДокумента()

	ДлительнаяОперация = НачатьЗагрузкуДанныхДокумента(ПараметрыСканированияКодовМаркировки());
	
	Если ДлительнаяОперация <> Неопределено Тогда
		
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Получение структуры упаковок из ИС МОТП.'");
		
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗагрузкаДанныхДокументаЗавершение", ЭтотОбъект);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		
	Иначе
		
		Если ДетализацияСтруктурыХранения <> ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки") Тогда
			ДобавленнаяСтрокаПачкиБезБлока();
		КонецЕсли;
		
		Если ДетализацияСтруктурыХранения <> ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки")
			И ДетализацияСтруктурыХранения <> ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.БлокиСПачками") Тогда
			ДобавленнаяСтрокаБлокиБезКоробки();
		КонецЕсли;
			
		Результат = Новый Структура();
		Результат.Вставить("Статус",          "Выполнено");
		Результат.Вставить("АдресРезультата", "");
		
		ЗагрузкаДанныхДокументаЗавершение(Результат, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НачатьЗагрузкуДанныхДокумента(ПараметрыСканирования)
	
	ВыполнитьДлительнуюОперацию = Истина;
	
	Если ПроверкаНеПоДокументу Тогда
		Если ЭтоАдресВременногоХранилища(АдресПроверяемыхДанных) Тогда
			ПроверяемыеДанные = ПолучитьИзВременногоХранилища(АдресПроверяемыхДанных);
		Иначе
			ПроверяемыеДанные = Неопределено;
		КонецЕсли;
		
		Если ПроверяемыеДанные = Неопределено Тогда
			ВыполнитьДлительнуюОперацию = Ложь;
		ИначеЕсли ПроверяемыеДанные.ТаблицаТабачнойПродукции.Количество() = 0
			И ПроверяемыеДанные.ДеревоУпаковок.Строки.Количество() = 0
			И ПроверяемыеДанные.МаркированныеТовары.Количество() = 0 Тогда
			ВыполнитьДлительнуюОперацию = Ложь;
		КонецЕсли;
	Иначе
		ТаблицаТабачнойПродукции = ПроверкаИПодборПродукцииМОТП.ТаблицаТабачнойПродукцииДокумента(ПроверяемыйДокумент);
		
		Если ТаблицаТабачнойПродукции.Количество() = 0 Тогда
			Если РежимПодбораСуществующихУпаковок Тогда
				ВыполнитьДлительнуюОперацию = Ложь;
			Иначе
				ШтрихкодыУпаковокДокумента = ШтрихкодированиеИС.ШтрихкодыУпаковокДокумента(ПроверяемыйДокумент, ПараметрыСканирования);
				Если ШтрихкодыУпаковокДокумента.Количество() = 0 Тогда
					ВыполнитьДлительнуюОперацию = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ВыполнитьДлительнуюОперацию Тогда
		ПараметрыПроцедуры = Новый Структура;
		ПараметрыПроцедуры.Вставить("ПроверкаНеПоДокументу",            ПроверкаНеПоДокументу);
		ПараметрыПроцедуры.Вставить("ПроверяемыйДокумент",              ПроверяемыйДокумент);
		ПараметрыПроцедуры.Вставить("НачальныйСтатусПроверки",          НачальныйСтатусПроверки);
		ПараметрыПроцедуры.Вставить("ДетализацияСтруктурыХранения",     ДетализацияСтруктурыХранения);
		ПараметрыПроцедуры.Вставить("РедактированиеФормыНедоступно",    РедактированиеФормыНедоступно);
		ПараметрыПроцедуры.Вставить("РежимПодбораСуществующихУпаковок", РежимПодбораСуществующихУпаковок);
		ПараметрыПроцедуры.Вставить("ПараметрыСканирования",            ПараметрыСканирования);
		ПараметрыПроцедуры.Вставить("ПараметрыПроверкиКодовМаркировки", ПараметрыПроверкиКодовМаркировки);
		ПараметрыПроцедуры.Вставить("КонтролироватьСканируемуюПродукциюПоДокументуОснованию", КонтролироватьСканируемуюПродукциюПоДокументуОснованию);
	
		Если ПроверкаНеПоДокументу Тогда
			ПреобразоватьНесериализуемыеЗначения(ПроверяемыеДанные);
			ПараметрыПроцедуры.Вставить("ПроверяемыеДанные", ПроверяемыеДанные);
		КонецЕсли;
		
		Если ТребуетсяОбращениеКСервисуМОТП Тогда
			ПараметрыПроцедуры.Вставить("ДанныеКлючаСессииМОТП", ПараметрыСеанса.ДанныеКлючаСессииМОТП);
		КонецЕсли;
		
		ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Фоновое заполнение данных проверки и подбора табачной продукции'");
		ПараметрыВыполнения.ЗапуститьВФоне = Истина;
		
		Возврат ДлительныеОперации.ВыполнитьВФоне(
			"Обработки.ПроверкаИПодборТабачнойПродукцииМОТП.ЗагрузитьДанныеДокументаДлительнаяОперация",
			ПараметрыПроцедуры, ПараметрыВыполнения);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПреобразоватьНесериализуемыеЗначения(ПроверяемыеДанные)
	
	ИменаКолонокДерева = "";
	
	Для Каждого КолонкаДерева Из ПроверяемыеДанные.ДеревоУпаковок.Колонки Цикл
		ИменаКолонокДерева = ИменаКолонокДерева + ?(ПустаяСтрока(ИменаКолонокДерева), "", ",") + КолонкаДерева.Имя;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы Из ПроверяемыеДанные.МаркированныеТовары Цикл
		ЗначенияСтрокиДерева = Новый Структура(ИменаКолонокДерева);
		ЗаполнитьЗначенияСвойств(ЗначенияСтрокиДерева, СтрокаТаблицы.СтрокаДерева);
		СтрокаТаблицы.СтрокаДерева = ЗначенияСтрокиДерева;
		СтрокаТаблицы.УпаковкаВерхнегоУровня = Новый Структура(ИменаКолонокДерева);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузкаДанныхДокументаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда  // отменено пользователем
		ЗакрытьФорму();
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ЗакрытьФорму", ЭтотОбъект), Результат.КраткоеПредставлениеОшибки);
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		ЗагрузкаДанныхДокументаЗавершениеНаСервере(Результат.АдресРезультата);	
		СоответствиеШтрихкодовСтрокДерева = СоответствиеШтрихкодовСтрокДерева(АдресСоответствиеШтрихкодыИдентификаторыСтрок);
	КонецЕсли;

	УправлениеДоступностьюКомандыРазобратьУпаковку();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузкаДанныхДокументаЗавершениеНаСервере(АдресДанныхДокумента)
	
	Если ЭтоАдресВременногоХранилища(АдресДанныхДокумента) Тогда
		ДанныеДокумента = ПолучитьИзВременногоХранилища(АдресДанныхДокумента);
	Иначе
		ДанныеДокумента = Новый Структура();
	КонецЕсли;
	
	Если ТипЗнч(ДанныеДокумента) = Тип("Структура") Тогда
		ВывестиДанныеПроверкиИПодбораНаФорму(ДанныеДокумента);
		РассчитатьИтогиУстановитьВидимость();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьИтогиУстановитьВидимость()

	УправлениеЭлементамиФормыПриСоздании();
	ПересчитатьВсеИтогиФормыНаСервере();
	УправлениеВидимостьюКомандУпаковок(ЭтотОбъект);

КонецПроцедуры

&НаКлиенте
Процедура ПослеВопросаОНачалеПроверкиЗаново(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ИнициализироватьДанныеФормы(Истина);
		
		Если ПараметрыПроверкиКодовМаркировки.ОтсутствуетПодключениеМОТП Тогда
			ПараметрыПроверкиКодовМаркировки.ОтсутствуетПодключениеМОТП = Ложь;
			ОпределитьНеобходимостьОбращенияКСервисуМОТП();
		КонецЕсли;
	
		Если ТребуетсяОбновлениеКлючаСессии Тогда
			ЗапроситьКлючСессииНачало();
		Иначе
			ЗагрузитьДанныеДокумента();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьДанныеФормы(РежимОчистки = Ложь)
	
	ИдентификаторТекущейПроверяемойУпаковки = -1;
	ИдентификаторРодителяУдаляемойСтроки    = -1;
	ИдентификаторСтрокиПачкиБезБлока        = -1;
	ИдентификаторСтрокиБлокиБезКоробки      = -1;
	СледующийСтикерОтложено                 = 1;
	
	Если РежимОчистки Тогда
		
		ДеревоМаркированнойПродукции.ПолучитьЭлементы().Очистить();
		ДобавленныеУпаковки.Очистить();
		ДоступныеДляПроверкиУпаковки.Очистить();
		УпаковкиДокумента.Очистить();
		ПодобраннаяТабачнаяПродукция.Очистить();
		
	КонецЕсли;
	
	ЦветГиперссылки           = ЦветаСтиля.ЦветГиперссылкиГосИС;
	ЦветТекстаПоля            = ЦветаСтиля.ЦветТекстаПоля;
	ЦветТекстаТребуетВнимания = ЦветаСтиля.ЦветТекстаТребуетВниманияГосИС;

	ИспользоватьСерииНоменклатуры          = ИнтеграцияИС.СерииИспользуются();
	ИспользоватьХарактеристикиНоменклатуры = ИнтеграцияИС.ХарактеристикиИспользуются();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеЭлементамиФормыПриСоздании()
	
	Если РежимПросмотра Тогда
		
		Если РежимПодбораСуществующихУпаковок Тогда
			Заголовок                                  = НСтр("ru = 'Результаты подбора табачной продукции'");
			Элементы.ПроверяемыйДокумент.Заголовок     = НСтр("ru = 'В документ'");
		Иначе
			Заголовок                                  = НСтр("ru = 'Результаты проверки табачной продукции'");
			Элементы.ПроверяемыйДокумент.Заголовок     = НСтр("ru = 'В документе'");
		КонецЕсли;
		
		Элементы.ФормаПеренестиВДокумент.Видимость                                  = Ложь;
		Элементы.ФормаСохранитьПромежуточныеРезультатыПроверки.Видимость            = Ложь;
		Элементы.ГруппаМаркируемаяКоманднаяПанельТребуетсяПеремаркировать.Видимость = Ложь;
		Элементы.ДеревоМаркированнойПродукцииНачатьПроверкуЗаново.Видимость         = Ложь;
		Элементы.ДеревоМаркированнойПродукцииУказатьШтрихкод.Видимость              = Ложь;
		Элементы.ДеревоМаркированнойПродукцииРазобратьУпаковку.Видимость            = Ложь;
		Элементы.СтраницаПодобраннаяПродукция.ТолькоПросмотр                        = Истина;
		Элементы.ПодобраннаяТабачнаяПродукцияУдалить.Видимость                      = Ложь;
		Элементы.ПодобраннаяТабачнаяПродукцияПоискПоШтрихкоду.Видимость             = Ложь;
		Элементы.ПодобраннаяТабачнаяПродукцияКоличествоМОТП.Видимость               = Ложь;
		
		Элементы.ФормаЗакрыть.КнопкаПоУмолчанию = Истина;

	Иначе
		
		Если РежимПодбораСуществующихУпаковок Тогда
			Заголовок                                  = НСтр("ru = 'Подбор и проверка табачной продукции'");
			Элементы.ФормаПеренестиВДокумент.Заголовок = НСтр("ru = 'Завершить подбор'");
			Элементы.ПроверяемыйДокумент.Заголовок     = НСтр("ru = 'В документ'");
			
			Элементы.ПодобраннаяТабачнаяПродукцияКоличествоПодобрано.Заголовок = НСтр("ru = 'Подобрано'");
			Элементы.ПодобраннаяТабачнаяПродукцияКоличествоМОТП.Видимость      = Ложь;
		Иначе
			Элементы.ПодобраннаяТабачнаяПродукцияКоличествоПодобрано.Заголовок = НСтр("ru = 'Проверено'");
			Элементы.ПодобраннаяТабачнаяПродукцияКоличествоМОТП.Видимость      = Истина;
		КонецЕсли;
		
		Если ПроверкаНеПоДокументу Тогда
			Элементы.ДеревоМаркированнойПродукцииНачатьПроверкуЗаново.Видимость = Ложь;
			Элементы.ФормаСохранитьПромежуточныеРезультатыПроверки.Видимость    = Ложь;
		КонецЕсли;
		
		Элементы.ФормаЗакрыть.Видимость = Ложь;
	
	КонецЕсли;
	
	Если НЕ ИспользоватьСерииНоменклатуры Тогда
		Элементы.ПодобраннаяТабачнаяПродукцияГруппаСерия.Видимость         = Ложь;
		Элементы.ПодобраннаяТабачнаяПродукцияСгенерироватьСерии.Видимость  = Ложь;
	ИначеЕсли РежимПросмотра
		ИЛИ НЕ ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры Тогда
		Элементы.ПодобраннаяТабачнаяПродукцияСтатусУказанияСерий.Видимость = Ложь;
		Элементы.ПодобраннаяТабачнаяПродукцияСгенерироватьСерии.Видимость  = Ложь;
	Иначе
		Элементы.ПодобраннаяТабачнаяПродукцияСтатусУказанияСерий.Видимость = Истина;
		Элементы.ПодобраннаяТабачнаяПродукцияСгенерироватьСерии.Видимость  = ЕстьПравоДобавлениеСерий() И НЕ РежимПодбораСуществующихУпаковок;
	КонецЕсли;
	
	Если НЕ ИспользоватьХарактеристикиНоменклатуры Тогда
		Элементы.ПодобраннаяТабачнаяПродукцияХарактеристика.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ПроверяемыйДокумент.Видимость = НЕ ПроверкаНеПоДокументу;
	
	УправлениеЭлементамиКонтроляСтатусаКодовМаркировки(ЭтотОбъект);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеЭлементамиКонтроляСтатусаКодовМаркировки(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ФормаПеренестиВДокумент.Доступность = НЕ Форма.ПараметрыПроверкиКодовМаркировки.ОтсутствуетПодключениеМОТП;
	
	Элементы.ГруппаОтсутствуетПодключениеМОТП.Видимость = Форма.ПараметрыПроверкиКодовМаркировки.ОтсутствуетПодключениеМОТП;
	
	Элементы.ФормаВключитьОтключитьПроверкуПоВладельцу.Видимость = 
		Форма.ПараметрыПроверкиКодовМаркировки.КонтролироватьСтатусыКодовМаркировки
		И НЕ Форма.ПараметрыПроверкиКодовМаркировки.ОтсутствуетПодключениеМОТП;

	Если Элементы.ФормаВключитьОтключитьПроверкуПоВладельцу.Видимость Тогда
		УстановитьЗаголовокКомандыПроверкиПоВладельцу(Форма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьЗаголовокКомандыПроверкиПоВладельцу(Форма)
	
	Элементы = Форма.Элементы;
	
	Если Форма.ПараметрыПроверкиКодовМаркировки.КонтролироватьВладельца Тогда
		Элементы.ФормаВключитьОтключитьПроверкуПоВладельцу.Заголовок = НСтр("ru = 'Отключить проверку кодов маркировки по владельцу'");
	Иначе
		Элементы.ФормаВключитьОтключитьПроверкуПоВладельцу.Заголовок = НСтр("ru = 'Включить проверку кодов маркировки по владельцу'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеДоступностьюКомандыРазобратьУпаковку()
	
	Если РежимПросмотра Тогда
		Возврат;
	КонецЕсли;
	
	Если ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки") Тогда
		ДоступностьКомандыРазборкиУпаковки = Ложь;
	Иначе
		ТекущиеДанные = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
		
		Если ТекущиеДанные = Неопределено Тогда
			ДоступностьКомандыРазборкиУпаковки = Ложь;
		Иначе
			ДоступностьКомандыРазборкиУпаковки = ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ТекущиеДанные.ТипУпаковки);
			
			Если ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.КоробкиСБлоками") Тогда
				ДоступностьКомандыРазборкиУпаковки = ДоступностьКомандыРазборкиУпаковки И НЕ ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаБлока(ТекущиеДанные);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Элементы.ДеревоМаркированнойПродукцииРазобратьУпаковку.Доступность = ДоступностьКомандыРазборкиУпаковки;

КонецПроцедуры

#КонецОбласти

#Область РезультатыПроверки

&НаКлиенте
Функция ИтогиПроверкиПриЗавершении()
	
	КоличествоНепроверенных = 0;
	КоличествоОтложенных    = 0;
	КоличествоВсего         = 0;
	КоличествоОтсутствует   = 0;
	
	Для Каждого СтрокаДерева Из ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
		
		КоличествоНепроверенных = КоличествоНепроверенных + СтрокаДерева.КоличествоПодчиненныхНеПроверялось;
		КоличествоОтложенных    = КоличествоОтложенных + СтрокаДерева.КоличествоПодчиненныхОтложено;
		КоличествоВсего         = КоличествоВсего + СтрокаДерева.КоличествоПодчиненныхВсего;
		КоличествоОтсутствует   = КоличествоОтсутствует + СтрокаДерева.КоличествоПодчиненныхОтсутствует;
		
		Если СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.ПачкиБезБлока")
		 ИЛИ СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.БлокиБезКоробки") Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		Если СтрокаДерева.НедопустимыйКодМаркировки
		 Или СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда
			
			КоличествоОтсутствует = КоличествоОтсутствует + 1;
			
		ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась") Тогда
			
			КоличествоНепроверенных = КоличествоНепроверенных + 1;
			
		ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отложена") Тогда
			
			КоличествоОтложенных = КоличествоОтложенных + 1;
			
		КонецЕсли;
		
		КоличествоВсего = КоличествоВсего + 1;
		
	КонецЦикла;
	
	Итоги = Новый Структура;
	Итоги.Вставить("КоличествоНепроверенных",КоличествоНепроверенных);
	Итоги.Вставить("КоличествоОтложенных",   КоличествоОтложенных);
	Итоги.Вставить("КоличествоВсего",        КоличествоВсего);
	Итоги.Вставить("КоличествоОтсутствует",  КоличествоОтсутствует);
	
	Возврат Итоги;	
	
КонецФункции

&НаКлиенте
Процедура ОтветНаВопросПриЗавершенииПроверки(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗавершитьПроверку(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьПроверку(РезультатОтветаНаВопрос)
	
	ПараметрыОкончанияПроверки = Новый Структура;
	ПараметрыОкончанияПроверки.Вставить("СоздаватьАктОРасхождениях", Ложь);
	
	Если РезультатОтветаНаВопрос <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(РезультатОтветаНаВопрос.КакУчитыватьНеПроверенныеОтложенные) Тогда
			РезультатИзмененияСтатуса = РезультатИзменияСтатусаПроверкиПриЗавершении(РезультатОтветаНаВопрос.КакУчитыватьНеПроверенныеОтложенные);
			
			Если РезультатИзмененияСтатуса.ЕстьОшибки Тогда
				ПоказатьПредупреждение(, РезультатИзмененияСтатуса.ТекстОшибки);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыОкончанияПроверки.СоздаватьАктОРасхождениях = РезультатОтветаНаВопрос.СоздаватьАктОРасхождениях;
		
	КонецЕсли;
	
	Если Не ТаблицаПодобраннойПродукцииЗаполненаКорректно() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не РезультатГенерацииСерийПриЗавершенииПроверки() Тогда
		ТекстСообщения = НСтр("ru = 'Для завершения проверки требуется указание серий.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Элементы.СтраницыПродукция.ТекущаяСтраница = Элементы.СтраницаПодобраннаяПродукция;
		Возврат;
	КонецЕсли;
	
	Если КоличествоНедопустимыхКодовМаркировки > 0 Тогда
		ИсключитьНедопустимыеУпаковкиИзПодобраннойПродукции(ДеревоМаркированнойПродукции.ПолучитьЭлементы());
		
		Если ТаблицаИзмененийТабачнойПродукции.Количество() > 0 Тогда
			ОбработатьТаблицуИзмененийТабачнойПродукции(ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = НСтр("ru = 'Сохранение результатов проверки.'");

	ДлительнаяОперация = НачатьЗавершениеПроверки(ПараметрыОкончанияПроверки);
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗавершениеПроверкиОкончание", ЭтотОбъект);

	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаКлиенте
Функция РезультатИзменияСтатусаПроверкиПриЗавершении(ВыбранныйСтатусПроверки)
	
	СтруктураВозврата = Новый Структура;
	СтруктураВозврата.Вставить("ЕстьОшибки",  Ложь);
	СтруктураВозврата.Вставить("ТекстОшибки", "");
	
	Если ВыбранныйСтатусПроверки <> Неопределено Тогда
		
		Для Каждого СтрокаПроверяемого Из ДеревоМаркированнойПродукции.ПолучитьЭлементы() Цикл
		
			ИзменитьСтатусПроверкиВСтрокеДерева(СтрокаПроверяемого, ВыбранныйСтатусПроверки, Ложь);
		
		КонецЦикла;
		
	КонецЕсли;
	
	Если ТаблицаИзмененийТабачнойПродукции.Количество() > 0 Тогда
		
		ОбработатьТаблицуИзмененийТабачнойПродукции(ЭтотОбъект);
		
	КонецЕсли;
	
	ПересчитатьВсеИтогиФормыНаКлиенте();
	
	Если КоличествоУпаковокКоторыеНеобходимоПеремаркировать > 0 Тогда
		
		СтруктураВозврата.ЕстьОшибки = Истина;
		СтруктураВозврата.ТекстОшибки = НСтр("ru = 'Есть упаковки, которые необходимо разобрать'");
		
	КонецЕсли;

	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьСтатусПроверкиВСтрокеДерева(СтрокаДерева, НовыйСтатусПроверки, УстанавливатьБезусловно)
	
	Если УстанавливатьБезусловно Тогда
		
		ИзменитьСтатус = Истина;
		
	ИначеЕсли ЗначениеЗаполнено(НовыйСтатусПроверки)
		И СтрокаДерева.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.ПачкиБезБлока")
		И СтрокаДерева.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.БлокиБезКоробки")
		И (СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась")
		  Или СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отложена")) Тогда
		
		ИзменитьСтатус = Истина;
		
	Иначе
		
		ИзменитьСтатус = Ложь;
		
	КонецЕсли;
	
	Если ИзменитьСтатус И НЕ СтрокаДерева.НедопустимыйКодМаркировки Тогда
		
		Если НеобходимоУменьшитьКоличествоПодобраннойПродукции(РежимПодбораСуществующихУпаковок, СтрокаДерева, НовыйСтатусПроверки) Тогда
			ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийТабачнойПродукции, СтрокаДерева, -1);
		ИначеЕсли НеобходимоУвеличитьКоличествоПодобраннойПродукции(РежимПодбораСуществующихУпаковок, СтрокаДерева, НовыйСтатусПроверки) Тогда
			ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийТабачнойПродукции, СтрокаДерева, +1);
		КонецЕсли;

		СтрокаДерева.СтатусПроверки = НовыйСтатусПроверки;
		
	КонецЕсли;
		
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		УстанавливатьБезусловно =  ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки)
			И СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует");
		
		ИзменитьСтатусПроверкиВСтрокеДерева(ПодчиненнаяСтрока, НовыйСтатусПроверки, УстанавливатьБезусловно);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьНедопустимыеУпаковкиИзПодобраннойПродукции(СтрокиДерева)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.НедопустимыйКодМаркировки
			И НеобходимоУменьшитьКоличествоПодобраннойПродукции(РежимПодбораСуществующихУпаковок, СтрокаДерева,
			ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует")) Тогда
			ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийТабачнойПродукции, СтрокаДерева, -1);
		КонецЕсли;
		
		ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
		
		Если ПодчиненныеСтроки.Количество() > 0 Тогда
			ИсключитьНедопустимыеУпаковкиИзПодобраннойПродукции(ПодчиненныеСтроки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ТаблицаПодобраннойПродукцииЗаполненаКорректно()
	
	ЗаполнениеКорректно = Истина;
	
	Для Каждого СтрокаПодобраннойПродукции Из ПодобраннаяТабачнаяПродукция Цикл
		
		Если СтрокаПодобраннойПродукции.Количество <> 0 
			Или СтрокаПодобраннойПродукции.КоличествоПодобрано <> 0 Тогда
			
			Если Не ЗначениеЗаполнено(СтрокаПодобраннойПродукции.Номенклатура) Тогда
				
				ЗаполнениеКорректно = Ложь;
				
				ТекстСообщения = СтрШаблон(НСтр("ru = 'Требуется указание номенклатуры в строке %1 таблицы табачной продукции'"), 
				                           СтрокаПодобраннойПродукции.НомерСтроки);
				ПутьКТабЧасти = ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("ПодобраннаяТабачнаяПродукция",
				                                                                  СтрокаПодобраннойПродукции.НомерСтроки,
				                                                                  "Номенклатура");
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, ПутьКТабЧасти);
				
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат ЗаполнениеКорректно;
	
КонецФункции

&НаКлиенте
Функция РезультатГенерацииСерийПриЗавершенииПроверки()
	
	Если ПараметрыУказанияСерий.ИспользоватьСерииНоменклатуры
		И ПроверкаИПодборПродукцииМОТПКлиентСервер.ТребуетсяУказаниеСерий(ПодобраннаяТабачнаяПродукция) Тогда
		
		Если ЕстьПравоДобавлениеСерий() Тогда
			
			СгенерироватьСерииПодобраннойТабачнойПродукции();
			
			Возврат Не ПроверкаИПодборПродукцииМОТПКлиентСервер.ТребуетсяУказаниеСерий(ПодобраннаяТабачнаяПродукция);
			
		Иначе
			
			Возврат Ложь;
			
		КонецЕсли;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СгенерироватьСерииНаСервере(ДанныеДляГенерацииСерий)
	
	ИнтеграцияМОТП.СгенерироватьСерии(ДанныеДляГенерацииСерий);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеПроверкиОкончание(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда  // отменено пользователем
		Возврат;
	ИначеЕсли Результат.Статус = "Ошибка" Тогда
		ПоказатьПредупреждение(, Результат.КраткоеПредставлениеОшибки);
	ИначеЕсли Результат.Статус = "Выполнено" Тогда
		Если ПроверкаНеПоДокументу Тогда
			ВыполняетсяЗакрытие = Истина;
			Закрыть(Результат.АдресРезультата);
		Иначе
			ЗакрытьФорму();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция НачатьЗавершениеПроверки(ПараметрыОкончанияПроверки)
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("СоздаватьАктОРасхождениях",    ПараметрыОкончанияПроверки.СоздаватьАктОРасхождениях);
	ПараметрыПроцедуры.Вставить("ПроверяемыйДокумент",          ПроверяемыйДокумент);
	ПараметрыПроцедуры.Вставить("ДеревоМаркированнойПродукции", РеквизитФормыВЗначение("ДеревоМаркированнойПродукции"));
	ПараметрыПроцедуры.Вставить("ПроверкаНеПоДокументу",        ПроверкаНеПоДокументу);
	ПараметрыПроцедуры.Вставить("ДанныеПроверкиИПодбора",       Неопределено);
	ПараметрыПроцедуры.Вставить("ПодобраннаяТабачнаяПродукция", РеквизитФормыВЗначение("ПодобраннаяТабачнаяПродукция"));
	
	Если ПриЗавершенииСохранятьРезультатыПроверки Тогда
		ПараметрыПроцедуры.ДанныеПроверкиИПодбора = Новый ХранилищеЗначения(ДанныеРезультатовПроверки());
	КонецЕсли;
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Перенос результатов проверки и подбора в документ МОТП.'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("Обработки.ПроверкаИПодборТабачнойПродукцииМОТП.ЗафиксироватьРезультатПроверкиИПодбора",
		ПараметрыПроцедуры, ПараметрыВыполнения);
	
КонецФункции

&НаСервере
Функция РезультатыПроверкиУспешноСохранены()
	
	Если НЕ ПроверкаНеПоДокументу Тогда
		
		Попытка
			
			РегистрыСведений.СтатусыПроверкиИПодбораДокументовМОТП.СохранитьПромежуточныеРезультатыПроверкиДокумента(
				ПроверяемыйДокумент,
				Новый ХранилищеЗначения(ДанныеРезультатовПроверки()));
			
		Исключение
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции 

&НаСервере
Функция ДанныеРезультатовПроверки()
	
	ДанныеРезультатовСканированияТабачнойПродукции = Новый Структура;
	ДанныеРезультатовСканированияТабачнойПродукции.Вставить("ДеревоМаркированнойПродукции",         РеквизитФормыВЗначение("ДеревоМаркированнойПродукции"));
	ДанныеРезультатовСканированияТабачнойПродукции.Вставить("ПодобраннаяТабачнаяПродукция",         РеквизитФормыВЗначение("ПодобраннаяТабачнаяПродукция"));
	ДанныеРезультатовСканированияТабачнойПродукции.Вставить("ПараметрыПроверкиКодовМаркировки",     ПараметрыПроверкиКодовМаркировки);
	ДанныеРезультатовСканированияТабачнойПродукции.Вставить("КоличествоНедопустимыхКодовМаркировки",КоличествоНедопустимыхКодовМаркировки);
	ДанныеРезультатовСканированияТабачнойПродукции.Вставить("УпаковкиДокумента",                    УпаковкиДокумента);
	ДанныеРезультатовСканированияТабачнойПродукции.Вставить("ДетализацияСтруктурыХранения",         ДетализацияСтруктурыХранения);
	ДанныеРезультатовСканированияТабачнойПродукции.Вставить("РежимПроверки",                        РежимПроверки);
	ДанныеРезультатовСканированияТабачнойПродукции.Вставить("ДобавленныеУпаковки",                  ДобавленныеУпаковки);
	ДанныеРезультатовСканированияТабачнойПродукции.Вставить("ДоступныеДляПроверкиУпаковки",         ДоступныеДляПроверкиУпаковки);
	ДанныеРезультатовСканированияТабачнойПродукции.Вставить("СледующийСтикерОтложено",              СледующийСтикерОтложено);
	ДанныеРезультатовСканированияТабачнойПродукции.Вставить("СохраненВыборПоМаркируемойПродукции",  СохраненВыборПоМаркируемойПродукции);
	ДанныеРезультатовСканированияТабачнойПродукции.Вставить("ДанныеВыбораПоМаркируемойПродукции",   ДанныеВыбораПоМаркируемойПродукции);
	ДанныеРезультатовСканированияТабачнойПродукции.Вставить("ШтрихкодТекущейПроверяемойУпаковки",   ШтрихкодТекущейПроверяемойУпаковки());
	
	ДанныеРезультатовСканированияТабачнойПродукции.Вставить("ДанныеРанееСгенерированныхШтрихкодов", ?(ЭтоАдресВременногоХранилища(АдресПредыдущихШтрихкодов),
	                                                                                                  ПолучитьИзВременногоХранилища(АдресПредыдущихШтрихкодов),
	                                                                                                  Неопределено));
	
	Возврат ДанныеРезультатовСканированияТабачнойПродукции;
	
КонецФункции

&НаСервере
Функция ШтрихкодТекущейПроверяемойУпаковки()

	Если ИдентификаторТекущейПроверяемойУпаковки = - 1 Тогда
		Возврат "";
	Иначе
		СтрокаСПроверяемойУпаковкой = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторТекущейПроверяемойУпаковки);
		
		Если СтрокаСПроверяемойУпаковкой = Неопределено Тогда
			Возврат "";
		Иначе
			Возврат СтрокаСПроверяемойУпаковкой.Штрихкод;
		КонецЕсли;
		
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область СканированиеШтрихкодаИОбработка

&НаКлиенте
Функция ИдентификаторСтрокиДереваПоШтрихкоду(Штрихкод)

	НайденныйИдентификаторСтроки = СоответствиеШтрихкодовСтрокДерева.Получить(Штрихкод);
	
	Если НайденныйИдентификаторСтроки = Неопределено Тогда
		
		НайденныйИдентификаторСтроки = -1;
		
	КонецЕсли;
	
	Возврат НайденныйИдентификаторСтроки;

КонецФункции

&НаКлиенте
Функция ПараметрыСканированияКодовМаркировки()
	
	ПараметрыСканирования = ШтрихкодированиеИСКлиентСервер.ИнициализироватьПараметрыСканирования(
		ВладелецФормы,
		Неопределено,
		ПредопределенноеЗначение("Перечисление.ВидыПродукцииИС.Табачная"));
	
	ПараметрыСканирования.СоздаватьШтрихкодУпаковки                      = Ложь;
	ПараметрыСканирования.АдресСоответствияКодовМаркировки               = Неопределено;
	ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции             = ДанныеВыбораПоМаркируемойПродукции;
	ПараметрыСканирования.ИспользуютсяДанныеВыбораПоМаркируемойПродукции = Истина;
	ПараметрыСканирования.ВозможнаЗагрузкаТСД                            = Истина;
	ПараметрыСканирования.ИспользуетсяСоответствиеШтрихкодовСтрокДерева  = Истина;
	
	Если ПараметрыПроверкиКодовМаркировки.ОтсутствуетПодключениеМОТП Тогда
		ПараметрыСканирования.ЗапрашиватьДанныеНеизвестныхШтрихкодовМОТП = Ложь;
		ПараметрыСканирования.ЗапрашиватьСтатусыМОТП = Ложь;
		ПараметрыСканирования.ИННВладельца = "";
	ИначеЕсли ПараметрыПроверкиКодовМаркировки.КонтролироватьВладельца Тогда
		ПараметрыСканирования.ИННВладельца = ПараметрыПроверкиКодовМаркировки.ИННВладельца;
	Иначе
		ПараметрыСканирования.ИННВладельца = "";
	КонецЕсли;
	
	Возврат ПараметрыСканирования;
	
КонецФункции

&НаКлиенте
Процедура РучнойВводШтрихкодаЗавершение(ДанныеШтрихкода, ДополнительныеПараметры) Экспорт
	
	ОповещениеПриЗавершении = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	Если СоответствиеШтрихкодовСтрокДерева.Получить(ДанныеШтрихкода.Штрихкод) <> Неопределено Тогда
		
		ВыполнитьОбработкуОповещения(ОповещениеПриЗавершении, ДанныеШтрихкода);
		
	Иначе
		
		ШтрихкодированиеИСКлиент.ОбработатьДанныеШтрихкода(ОповещениеПриЗавершении,
			ЭтотОбъект, ДанныеШтрихкода, ПараметрыСканированияКодовМаркировки());
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеУспешногоОбнаруженияОтсканированногоШтрихкодаВДереве(НайденнаяСтрокаДерева, 
	                                                                ТекущаяСтрокаДерева,
	                                                                РодительНайденнойСтроки,
	                                                                ТребуетсяОткрытиеФормыВыбораДействия,
	                                                                ТипУпаковкиГдеНашли,
	                                                                ОбработкаДанныхТСД)
	
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(НайденнаяСтрокаДерева.ТипУпаковки) Тогда
		
		Если ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки") Тогда
			Возврат;
		КонецЕсли;
		
		ЭтоУпаковкаБлока = ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаБлока(НайденнаяСтрокаДерева);
		
		Если ОбработкаДанныхТСД Тогда
			
			Если ЗагрузкаДанныхТСД.ТекущаяОперация = "ЕдинственнаяУпаковка" Тогда
				
				ЗагрузкаДанныхТСД.ИдентификаторУпаковки = НайденнаяСтрокаДерева.ПолучитьИдентификатор();
				ТребуетсяОткрытиеФормыВыбораДействия = Ложь;
				
				Если НайденнаяСтрокаДерева.ПолучитьРодителя() = Неопределено Тогда
					ОтметитьСтрокуКакНайденную(НайденнаяСтрокаДерева);
				КонецЕсли;
				Возврат;
				
			Иначе
				
				СтрокаПроверяемойУпаковки = СтрокаТекущейПроверяемойУпаковкиТСД(ЭтотОбъект, Истина, ЭтоУпаковкаБлока);
				
			КонецЕсли;
			
		Иначе
			
			СтрокаПроверяемойУпаковки = СтрокаТекущейПроверяемойУпаковки(ЭтотОбъект, Истина, ЭтоУпаковкаБлока);
			
		КонецЕсли;
		
		Если НайденнаяСтрокаДерева.ИдетПроверкаДаннойУпаковки
			И Не ОбработкаДанныхТСД Тогда
			
			СнятьПризнакПроверкиУпаковки(НайденнаяСтрокаДерева);
			СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НайденнаяСтрокаДерева);
			ТребуетсяОткрытиеФормыВыбораДействия = Ложь;
			
		ИначеЕсли РодительНайденнойСтроки = СтрокаПроверяемойУпаковки Тогда
		
			Если НайденнаяСтрокаДерева = ТекущаяСтрокаДерева
				И Не ОбработкаДанныхТСД Тогда
			
				ОтметитьСтрокуКакНайденную(НайденнаяСтрокаДерева);
				ИзменитьСостояниеПроверкиУпаковки(НайденнаяСтрокаДерева);
				ТребуетсяОткрытиеФормыВыбораДействия = Ложь;
				
			Иначе
				
				Если РодительНайденнойСтроки = Неопределено Тогда
					СнятьПризнакПроверкиУпаковки(ТекущаяСтрокаДерева);
				КонецЕсли;
				
				ОтметитьСтрокуКакНайденную(НайденнаяСтрокаДерева);
				СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НайденнаяСтрокаДерева);
				ТребуетсяОткрытиеФормыВыбораДействия = Ложь;
				
			КонецЕсли;
			
		ИначеЕсли ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.БлокиСПачками")
			И СтрокаПроверяемойУпаковки <> Неопределено Тогда

			ОтметитьСтрокуКакНайденную(НайденнаяСтрокаДерева);
			СнятьПризнакПроверкиУпаковки(СтрокаПроверяемойУпаковки);
			СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НайденнаяСтрокаДерева);
			ТребуетсяОткрытиеФормыВыбораДействия = Ложь;
			
		ИначеЕсли ОбработкаДанныхТСД 
			И ЗагрузкаДанныхТСД.ТекущаяОперация = "Упаковка"
			И РежимПроверки = ПредопределенноеЗначение("Перечисление.ВариантыПроверкиПоступившейПродукцииИС.ОставлятьТамГдеНайдены") Тогда
			
			ПереместитьУпаковкуВДругуюУпаковку(НайденнаяСтрокаДерева, СтрокаПроверяемойУпаковки);
			ТребуетсяОткрытиеФормыВыбораДействия = Ложь;
			
		КонецЕсли;
		
	Иначе
		
		Если ОбработкаДанныхТСД Тогда
			СтрокаПроверяемойУпаковки = СтрокаТекущейПроверяемойУпаковкиТСД(ЭтотОбъект, Ложь, Ложь);
			ИдентификаторУпаковки = ЗагрузкаДанныхТСД.ИдентификаторУпаковки;
		Иначе
			СтрокаПроверяемойУпаковки = СтрокаТекущейПроверяемойУпаковки(ЭтотОбъект, Ложь, Ложь);
			ИдентификаторУпаковки = ИдентификаторТекущейПроверяемойУпаковки;
		КонецЕсли;
		
		Если (РодительНайденнойСтроки = Неопределено 
			Или РодительНайденнойСтроки.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.ПачкиБезБлока")
			Или РодительНайденнойСтроки.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.БлокиБезКоробки"))
			И ИдентификаторУпаковки = -1 Тогда
			
			ОтметитьСтрокуКакНайденную(НайденнаяСтрокаДерева);
			СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НайденнаяСтрокаДерева);
			ТребуетсяОткрытиеФормыВыбораДействия = Ложь;
		
		ИначеЕсли РодительНайденнойСтроки.ПолучитьИдентификатор() = ИдентификаторУпаковки Тогда
			
			ОтметитьСтрокуКакНайденную(НайденнаяСтрокаДерева);
			СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НайденнаяСтрокаДерева);
			ТребуетсяОткрытиеФормыВыбораДействия = Ложь;
			
		ИначеЕсли ОбработкаДанныхТСД 
			И РежимПроверки = ПредопределенноеЗначение("Перечисление.ВариантыПроверкиПоступившейПродукцииИС.ОставлятьТамГдеНайдены") Тогда
			
			ПереместитьПачку(НайденнаяСтрокаДерева, СтрокаПроверяемойУпаковки);
			ТребуетсяОткрытиеФормыВыбораДействия = Ложь;
			
		Иначе
			
			Если (РодительНайденнойСтроки.НеСодержитсяВДанныхДокумента
				Или РодительНайденнойСтроки.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.ПачкиБезБлока")
				Или РодительНайденнойСтроки.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.БлокиБезКоробки"))
				И (СтрокаПроверяемойУпаковки.НеСодержитсяВДанныхДокумента
				Или СтрокаПроверяемойУпаковки.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.ПачкиБезБлока")
				Или СтрокаПроверяемойУпаковки.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.БлокиБезКоробки")) Тогда
				
				ОтметитьСтрокуКакНайденную(НайденнаяСтрокаДерева);
				ПереместитьПачку(НайденнаяСтрокаДерева, СтрокаПроверяемойУпаковки);
				ТребуетсяОткрытиеФормыВыбораДействия = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтрокаПроверяемойУпаковки <> Неопределено Тогда
		ТипУпаковкиГдеНашли = СтрокаПроверяемойУпаковки.ТипУпаковки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьСканированиеИмеющегосяВДеревеШтрихкода(ДанныеШтрихкода, ТекущаяСтрокаДерева, ИдентификаторНайденнойСтроки, ОбработкаДанныхТСД = Ложь)

	ТребуетсяОткрытиеФормыВыбораДействия = Истина;
	
	НайденнаяСтрокаДерева = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторНайденнойСтроки);
		
	Если НайденнаяСтрокаДерева = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РодительНайденнойСтроки = НайденнаяСтрокаДерева.ПолучитьРодителя();
	ТипУпаковкиГдеНашли     = Неопределено;
	
	ПослеУспешногоОбнаруженияОтсканированногоШтрихкодаВДереве(НайденнаяСтрокаДерева, 
	                                                          ТекущаяСтрокаДерева,
	                                                          РодительНайденнойСтроки,
	                                                          ТребуетсяОткрытиеФормыВыбораДействия,
	                                                          ТипУпаковкиГдеНашли,
	                                                          ОбработкаДанныхТСД);
	
	Если Не ТребуетсяОткрытиеФормыВыбораДействия = Истина Тогда
		Если ОбработкаДанныхТСД Тогда
			ОбработатьПолученныеДанныеТСД(Истина);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Штрихкод",                         ДанныеШтрихкода.Штрихкод);
	ПараметрыОткрытияФормы.Вставить("ШтрихкодНайден",                   Истина);
	ПараметрыОткрытияФормы.Вставить("ТипУпаковкиНайденного",            НайденнаяСтрокаДерева.ТипУпаковки);
	ПараметрыОткрытияФормы.Вставить("СледующийСтикерОтложено",          СледующийСтикерОтложено);
	ПараметрыОткрытияФормы.Вставить("НомерСтикераОтложено",             НайденнаяСтрокаДерева.НомерСтикераОтложено);
	ПараметрыОткрытияФормы.Вставить("РежимПроверки",                    РежимПроверки);
	ПараметрыОткрытияФормы.Вставить("РежимПодбораСуществующихУпаковок", РежимПодбораСуществующихУпаковок);
	ПараметрыОткрытияФормы.Вставить("СтатусПроверки",                   НайденнаяСтрокаДерева.СтатусПроверки);
	ПараметрыОткрытияФормы.Вставить("НеСодержитсяВДанныхДокумента",     НайденнаяСтрокаДерева.НеСодержитсяВДанныхДокумента);
	ПараметрыОткрытияФормы.Вставить("ШтрихкодУпаковкиГдеДолжноБыть",    ?(РодительНайденнойСтроки = Неопределено, "", РодительНайденнойСтроки.Штрихкод));
	
	ПараметрыОткрытияФормы.Вставить("ДобавленныеУпаковки",              ДобавленныеУпаковки);
	ПараметрыОткрытияФормы.Вставить("ДоступныеДляПроверкиУпаковки",     ДоступныеДляПроверкиУпаковки);
	ПараметрыОткрытияФормы.Вставить("УпаковкиДокумента",                УпаковкиДокумента);
	
	ПараметрыОткрытияФормы.Вставить("ТипУпаковкиГдеДолжноНаходиться",   ?(РодительНайденнойСтроки = Неопределено, Неопределено, РодительНайденнойСтроки.ТипУпаковки));
	ПараметрыОткрытияФормы.Вставить("ТипУпаковкиНайденного",            НайденнаяСтрокаДерева.ТипУпаковки); 
	ПараметрыОткрытияФормы.Вставить("ТипУпаковкиГдеНашли",              ТипУпаковкиГдеНашли);
	ПараметрыОткрытияФормы.Вставить("ДетализацияСтруктурыХранения",     ДетализацияСтруктурыХранения);
	
	ПараметрыОткрытияФормы.Вставить("ОбработкаДанныхТСД",               ОбработкаДанныхТСД);
	
	ДополнительныеПараметры = Новый  Структура;
	ДополнительныеПараметры.Вставить("ИдентификаторНайденнойСтроки", ИдентификаторНайденнойСтроки);
	ДополнительныеПараметры.Вставить("ОбработкаДанныхТСД", ОбработкаДанныхТСД);
	
	ОповещениеПослеВыбораДействия = Новый ОписаниеОповещения("ВыборДействияПоРезультатамВводаШтрихкодаПриЗавершении", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Обработка.ПроверкаИПодборТабачнойПродукцииМОТП.Форма.ВыборДействияПоРезультатамВводаШтрихкода", ПараметрыОткрытияФормы, 
	             ЭтотОбъект, УникальныйИдентификатор, , ,ОповещениеПослеВыбораДействия, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьНеНайденныйВДеревеШтрихКод(ДанныеШтрихкода, ТекущаяСтрокаДерева, ОбработкаДанныхТСД)
	
	ЭтоШтрихкодЛогистическойУпаковки = ШтрихкодированиеМОТПКлиентСервер.ЭтоКодЛогистическойУпаковки(ДанныеШтрихкода.Штрихкод);
	ЭтоШтрихкодТабачнойПродукции     = ШтрихкодированиеМОТПКлиентСервер.ЭтоКодМаркировкиТабачнойПачки(ДанныеШтрихкода.Штрихкод)
		Или ШтрихкодированиеМОТПКлиентСервер.ЭтоКодМаркировкиБлока(ДанныеШтрихкода.Штрихкод);
	
	Если РежимПодбораСуществующихУпаковок И ЭтоШтрихкодТабачнойПродукции Тогда
		
		ДанныеШтрихкода.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар");
		
		Если Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура) Тогда
			
			ДанныеШтрихкода.Вставить("ТекстОшибки", НСтр("ru = 'Не удалось идентифицировать табачную продукцию'"));
			
			ШтрихкодированиеМОТПКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(ЭтотОбъект, ДанныеШтрихкода);
			
			Возврат;
			
		КонецЕсли;
		
		Если НЕ ПродукцияСоответствуетДокументуОснованию(ЭтотОбъект, ДанныеШтрихкода) Тогда
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ОбработкаДанныхТСД", ОбработкаДанныхТСД);
			
			ОповещениеЗакрытияФормы = Новый ОписаниеОповещения("ИнформацияОНевозможностиДобавленияОтсканированногоПослеЗакрытия", ЭтотОбъект, ДополнительныеПараметры);
			
			ДанныеШтрихкода.Вставить("ТекстОшибки", ПроверкаИПодборПродукцииМОТПКлиентСервер.ТекстОшибкиНеСоответствуютДокументуОснованию(ДанныеШтрихкода));
			
			ШтрихкодированиеМОТПКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(ЭтотОбъект, ДанныеШтрихкода, ОповещениеЗакрытияФормы);
			
			Возврат;
			
		Иначе
			
			ДобавитьНовуюТабачнуюПродукциюВДерево(ДанныеШтрихкода, Неопределено, ОбработкаДанныхТСД);
			Если ОбработкаДанныхТСД Тогда
				ОбработатьПолученныеДанныеТСД(Истина);
			КонецЕсли;
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
	
		НайденнаяНоменклатура = ДанныеШтрихкода.Номенклатура;
		НайденнаяХарактеристика = ДанныеШтрихкода.Характеристика;
		НайденнаяСерия = ДанныеШтрихкода.Серия;
		
		Если ЭтоШтрихкодТабачнойПродукции И ЗначениеЗаполнено(НайденнаяНоменклатура) Тогда
			
			Если РежимПроверки = ПредопределенноеЗначение("Перечисление.ВариантыПроверкиПоступившейПродукцииИС.ОставлятьТамГдеНайдены")
				Или ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки") Тогда
				
				ДобавитьНовуюТабачнуюПродукциюВДерево(ДанныеШтрихкода);
				Если ОбработкаДанныхТСД Тогда
					ОбработатьПолученныеДанныеТСД(Истина);
				КонецЕсли;
				Возврат;
				
			Иначе
				
				СтрокаПроверяемойУпаковки = СтрокаТекущейПроверяемойУпаковки(ЭтотОбъект, Ложь, Ложь);
				Если СтрокаПроверяемойУпаковки.НеСодержитсяВДанныхДокумента
					Или СтрокаПроверяемойУпаковки.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.ПачкиБезБлока")
					Или СтрокаПроверяемойУпаковки.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.БлокиБезКоробки") Тогда
					
					ДобавитьНовуюТабачнуюПродукциюВДерево(ДанныеШтрихкода);
					Если ОбработкаДанныхТСД Тогда
						ОбработатьПолученныеДанныеТСД(Истина);
					КонецЕсли;
					Возврат;
					
				КонецЕсли;
			
			КонецЕсли;
		
		КонецЕсли;
	
	КонецЕсли;

	Если ДанныеШтрихкода.МаркируемаяПродукция = Истина
		И Не ЗначениеЗаполнено(ДанныеШтрихкода.ТипШтрихкода) Тогда
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Номенклатура"  , ДанныеШтрихкода.Номенклатура);
		ПараметрыОткрытияФормы.Вставить("Характеристика", ДанныеШтрихкода.Характеристика);
	
		ОткрытьФорму(
			"Обработка.ПроверкаИПодборТабачнойПродукцииМОТП.Форма.ФормаВводаКодаМаркировки",
			ПараметрыОткрытияФормы,
			ЭтотОбъект,,,,
			Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект));
			
		Возврат;
			
	КонецЕсли;
	
	Если ЭтоШтрихкодЛогистическойУпаковки Тогда
		
		ТипУпаковкиНайденного = ?(ЭтоШтрихкодТабачнойПродукции,
		                          ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар"),
		                          ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка")); 
		
		ПараметрыОткрытияФормы = Новый Структура;
		ПараметрыОткрытияФормы.Вставить("Штрихкод",                             ДанныеШтрихкода.Штрихкод);
		ПараметрыОткрытияФормы.Вставить("ШтрихкодНайден",                       Ложь);
		ПараметрыОткрытияФормы.Вставить("НайденнаяНоменклатура",                НайденнаяНоменклатура);
		ПараметрыОткрытияФормы.Вставить("НайденнаяХарактеристика",              НайденнаяХарактеристика);
		ПараметрыОткрытияФормы.Вставить("НайденнаяСерия",                       НайденнаяСерия);
		ПараметрыОткрытияФормы.Вставить("РежимПроверки",                        РежимПроверки);
		ПараметрыОткрытияФормы.Вставить("ЭтоШтрихкодПродукции",                 ЭтоШтрихкодТабачнойПродукции);
		ПараметрыОткрытияФормы.Вставить("УпаковкаНеСодержитсяВДанныхДокумента", УпаковкаНеСодержитсяВДанныхДокумента(ТекущаяСтрокаДерева, ДетализацияСтруктурыХранения));
		ПараметрыОткрытияФормы.Вставить("ТипУпаковкиНайденного",                ТипУпаковкиНайденного);
		ПараметрыОткрытияФормы.Вставить("РежимПодбораСуществующихУпаковок",     РежимПодбораСуществующихУпаковок);
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОбработкаДанныхТСД", ОбработкаДанныхТСД);
		
		ОповещениеПослеВыбораДействия = Новый ОписаниеОповещения("ВыборДействияПоРезультатамВводаШтрихкодаПриЗавершении", ЭтотОбъект, ДополнительныеПараметры);
		
		ОткрытьФорму("Обработка.ПроверкаИПодборТабачнойПродукцииМОТП.Форма.ВыборДействияПоРезультатамВводаШтрихкода", ПараметрыОткрытияФормы, 
			ЭтотОбъект, УникальныйИдентификатор, , ,ОповещениеПослеВыбораДействия, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	Иначе
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ОбработкаДанныхТСД", ОбработкаДанныхТСД);
		
		ОповещениеЗакрытияФормы = Новый ОписаниеОповещения("ИнформацияОНевозможностиДобавленияОтсканированногоПослеЗакрытия", ЭтотОбъект, ДополнительныеПараметры);
		
		ДанныеШтрихкода.Вставить("ТекстОшибки", НСтр("ru = 'Недопустимый формат кода маркировки'"));
		
		ШтрихкодированиеМОТПКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(ЭтотОбъект, ДанныеШтрихкода, 	ОповещениеЗакрытияФормы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьШтрихкодВДеревеМаркированнойПродукции(ДанныеШтрихкода, ОбработкаДанныхТСД = Ложь)
	
	ТекущаяСтрокаДерева = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
	
	ИдентификаторНайденнойСтроки = ИдентификаторСтрокиДереваПоШтрихкоду(ДанныеШтрихкода.Штрихкод);
	
	Если ИдентификаторНайденнойСтроки <> -1 Тогда
		
		ОбработатьСканированиеИмеющегосяВДеревеШтрихкода(ДанныеШтрихкода,
		                                                 ТекущаяСтрокаДерева,
		                                                 ИдентификаторНайденнойСтроки,
		                                                 ОбработкаДанныхТСД);
		
	ИначеЕсли РежимПодбораСуществующихУпаковок
		      И ЗначениеЗаполнено(ДанныеШтрихкода.ШтрихкодУпаковки) Тогда
		
		Результат = РезультатДобавленияСуществующейУпаковкиВДеревоМаркированнойПродукции(ДанныеШтрихкода,
			СоответствиеШтрихкодовСтрокДерева, ОбработкаДанныхТСД,
			ПараметрыСканированияКодовМаркировки());
		
		Если Результат.ЕстьОшибки Тогда
			
			ПараметрыОткрытияФормы = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
			ПараметрыОткрытияФормы.АдресДереваУпаковок = Результат.АдресХранилищаДереваУпаковки;
			
			ШтрихкодированиеМОТПКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(ЭтотОбъект, ПараметрыОткрытияФормы);
			
		ИначеЕсли Результат.ТребуетсяСбросКонтекстаПроверки Тогда
			
			ИзменитьКонтекстПроверки(Неопределено);
			
		КонецЕсли;
		
		Если ОбработкаДанныхТСД Тогда
			ОбработатьПолученныеДанныеТСД(Не Результат.ЕстьОшибки);
		КонецЕсли;
		
	Иначе
		
		ОбработатьНеНайденныйВДеревеШтрихКод(ДанныеШтрихкода,
		                                     ТекущаяСтрокаДерева,
		                                     ОбработкаДанныхТСД);
		
	КонецЕсли;
	
	Если ТаблицаИзмененийТабачнойПродукции.Количество() > 0 Тогда
		ОбработатьТаблицуИзмененийТабачнойПродукции(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(ДанныеШтрихкода, ДополнительныеПараметры) Экспорт
	
	// Если штрихкод упаковки найден в соответствии СоответствиеШтрихкодовСтрокДерева, то детальные
	// данные по штрихкоду не собираются. В этом случае в ДанныеШтрихкода есть 2 поля: Штрихкод и Количество.
	Если ДанныеШтрихкода.Свойство("ШтрихкодУпаковки") Тогда
		
		ОбработатьОтсканированныйШтрихкод(ДанныеШтрихкода);
		
	Иначе
		
		Штрихкод = ДанныеШтрихкода.Штрихкод;
		
		ТекущаяСтрокаДерева = Элементы.ДеревоМаркированнойПродукции.ТекущиеДанные;
		
		ИдентификаторСтрокиДерева = ИдентификаторСтрокиДереваПоШтрихкоду(Штрихкод);
		
		ОбработатьСканированиеИмеющегосяВДеревеШтрихкода(ДанныеШтрихкода,
		                                                 ТекущаяСтрокаДерева,
		                                                 ИдентификаторСтрокиДерева,
		                                                 Ложь);
		
	КонецЕсли;
	
	Если ТаблицаИзмененийТабачнойПродукции.Количество() > 0 Тогда
		ОбработатьТаблицуИзмененийТабачнойПродукции(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыборДействияПоРезультатамВводаШтрихкодаПриЗавершении(Результат, ДополнительныеПараметры) Экспорт
	
	ОбработкаДанныхТСД = Ложь;
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
		И ДополнительныеПараметры.Свойство("ОбработкаДанныхТСД") 
		И ДополнительныеПараметры.ОбработкаДанныхТСД  Тогда
		
		ОбработкаДанныхТСД = Истина;
		
	КонецЕсли;
	
	Если Результат = Неопределено
		Или Результат = КодВозвратаДиалога.Отмена Тогда
		Если ОбработкаДанныхТСД Тогда
			ОбработатьПолученныеДанныеТСД(Ложь); 
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Не ТипЗнч(Результат) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.ВидДействия = "ДобавлениеТабачнойнойПродукции" Тогда
		
		ДобавитьНовуюТабачнуюПродукциюВДерево(Результат);
	
	ИначеЕсли Результат.ВидДействия = "ПереместитьУпаковкуВДругуюУпаковку" Тогда
		
		ПереместитьУпаковкуВДругуюУпаковку(ДополнительныеПараметры.ИдентификаторНайденнойСтроки, 
		                                   Результат.ШтрихкодУпаковкиНазначения,
		                                   Результат.СтатусПроверки);
		
	ИначеЕсли Результат.ВидДействия = "ПереместитьПачкуВДругуюУпаковку" Тогда
		
		ПереместитьПачкуВДругуюУпаковку(ДополнительныеПараметры.ИдентификаторНайденнойСтроки, 
		                                  Результат.ШтрихкодУпаковкиНазначения,
		                                  Результат.СтатусПроверки);
		
	ИначеЕсли Результат.ВидДействия = "ПереместитьВПачкиБезБлока" Тогда
		
		ПереместитьВПачкиБезБлока(ДополнительныеПараметры.ИдентификаторНайденнойСтроки,
		                               ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии"),
		                               Результат.ИзменятьКонтекстПроверки);
		
	ИначеЕсли Результат.ВидДействия = "ПереместитьВБлокиБезКоробки" Тогда
		
		ПереместитьВБлокиБезКоробки(ДополнительныеПараметры.ИдентификаторНайденнойСтроки,
		                               ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии"),
		                               Результат.ИзменятьКонтекстПроверки);
		
	ИначеЕсли Результат.ВидДействия = "ПоместитьНовуюВПачкиБезБлока" Тогда
		
		ПоместитьНовуюВПачкиБезБлока(Результат);
		
	ИначеЕсли Результат.ВидДействия = "ОтложитьНайденноеВДругоеМесте" Тогда
		
		ТекущиеДанныеДерева = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторНайденнойСтроки);
		Если ТекущиеДанныеДерева <> Неопределено Тогда
			
			ОтметитьСтрокуКакОтложенную(ТекущиеДанныеДерева);
			
		КонецЕсли;
		
	ИначеЕсли Результат.ВидДействия = "ИзменитьКонтекстПроверки" Тогда
		
		ТекущиеДанныеДерева = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ДополнительныеПараметры.ИдентификаторНайденнойСтроки);
		
		Если ТекущиеДанныеДерева <> Неопределено Тогда
			
			ОтметитьСтрокуКакНайденную(ТекущиеДанныеДерева);
			ИзменитьКонтекстПроверки(ТекущиеДанныеДерева.ПолучитьРодителя());
			
		КонецЕсли;
		
	ИначеЕсли Результат.ВидДействия = "ДобавитьНовуюУпаковку" Тогда
		
		ДобавитьНовуюУпаковку(Результат,
		                      ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка"),
		                      Истина,
		                      ОбработкаДанныхТСД);
		
	КонецЕсли;
	
	Если ОбработкаДанныхТСД Тогда
		ОбработатьПолученныеДанныеТСД(Истина); 
	КонецЕсли;

	Если ТаблицаИзмененийТабачнойПродукции.Количество() > 0 Тогда
		ОбработатьТаблицуИзмененийТабачнойПродукции(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтсканированныйШтрихкод(ДанныеШтрихкода, ОбработкаДанныхТСД = Ложь)

	Если ДанныеШтрихкода = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ШтрихкодированиеИСКлиентСервер.ОбработатьСохраненныйВыборДанныхПоМаркируемойПродукции(ЭтотОбъект, ДанныеШтрихкода);

	ПроверитьШтрихкодВДеревеМаркированнойПродукции(ДанныеШтрихкода, ОбработкаДанныхТСД);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияОНевозможностиДобавленияОтсканированногоПослеЗакрытия(Результат, ДополнительныеПараметры) Экспорт
	
	Если ДополнительныеПараметры.Свойство("ОбработкаДанныхТСД")
		И ДополнительныеПараметры.ОбработкаДанныхТСД Тогда
		ОбработатьПолученныеДанныеТСД(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьСтрокуКакНайденную(СтрокаДерева)

	Если СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии")
		Или СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась") Тогда
		
		Возврат;
		
	ИначеЕсли СтрокаДерева.НедопустимыйКодМаркировки Тогда
		
		ПараметрыОткрытияФормы = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
		ПараметрыОткрытияФормы.ПредставлениеНоменклатуры = СтрокаДерева.ПредставлениеСодержимоеУпаковки;
		ПараметрыОткрытияФормы.Штрихкод                  = СтрокаДерева.Штрихкод;
		ПараметрыОткрытияФормы.ТекстОшибки               = СтрокаДерева.ПредставлениеПроверкиКодаМаркировки;
		
		ШтрихкодированиеМОТПКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(ЭтотОбъект, ПараметрыОткрытияФормы);
		
		Возврат;
		
	КонецЕсли;
	
	СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии");
	СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, СтрокаДерева);
	ПроверкаИПодборПродукцииМОТПКлиентСервер.УстановитьИндексКартинкиСтатусаПроверки(СтрокаДерева);
	ПроверкаИПодборПродукцииМОТПКлиентСервер.УстановитьДоступностьУпаковкиДляПроверки(СтрокаДерева, ДоступныеДляПроверкиУпаковки);
	ПроверкаИПодборПродукцииМОТПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(СтрокаДерева);
	
	Если НЕ РежимПодбораСуществующихУпаковок Тогда
		ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийТабачнойПродукции, СтрокаДерева, +1);
	КонецЕсли;
		
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьСтрокуКакОтложенную(СтрокаДерева)

	Если СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отложена") Тогда
		ПроверкаИПодборПродукцииМОТПКлиентСервер.УстановитьДоступностьУпаковкиДляПроверки(СтрокаДерева, ДоступныеДляПроверкиУпаковки);
		Возврат;
	ИначеЕсли СтрокаДерева.НедопустимыйКодМаркировки Тогда
		Возврат;
	КонецЕсли;
			
	СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отложена");
	СтрокаДерева.НомерСтикераОтложено = СтрШаблон(НСтр("ru = 'под номером - %1'"), СледующийСтикерОтложено);
	СледующийСтикерОтложено = СледующийСтикерОтложено + 1;
	ПроверкаИПодборПродукцииМОТПКлиентСервер.УстановитьИндексКартинкиСтатусаПроверки(СтрокаДерева);
	ПроверкаИПодборПродукцииМОТПКлиентСервер.УстановитьДоступностьУпаковкиДляПроверки(СтрокаДерева, ДоступныеДляПроверкиУпаковки);
	ПроверкаИПодборПродукцииМОТПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(СтрокаДерева);

КонецПроцедуры

#КонецОбласти

#Область ПеремещениеДобавлениеПачекИУпаковок

&НаКлиенте
Процедура ДобавитьНовуюУпаковку(ДанныеШтрихкода, ТипУпаковки, СпозиционироватьсяНаДобавленной = Истина, ОбработкаДанныхТСД = Ложь)
	
	УпаковкаНеСодержитсяВДанныхДокумента = Ложь;
	
	ЭтоУпаковкаБлока = ШтрихкодированиеМОТПКлиентСервер.ЭтоКодМаркировкиБлока(ДанныеШтрихкода.Штрихкод);
	
	Если ОбработкаДанныхТСД Тогда
		
		ТекущаяПроверяемаяУпаковка = СтрокаТекущейПроверяемойУпаковкиТСД(ЭтотОбъект, Истина, ЭтоУпаковкаБлока);
		
	Иначе
		
		ТекущаяПроверяемаяУпаковка = СтрокаТекущейПроверяемойУпаковки(ЭтотОбъект, Истина, ЭтоУпаковкаБлока);
		
	КонецЕсли;

	Если Не ТекущаяПроверяемаяУпаковка = Неопределено Тогда
		УпаковкаНеСодержитсяВДанныхДокумента = ТекущаяПроверяемаяУпаковка.НеСодержитсяВДанныхДокумента;
	КонецЕсли;
	
	Если ТекущаяПроверяемаяУпаковка = Неопределено Тогда
		
		НоваяСтрока = ДеревоМаркированнойПродукции.ПолучитьЭлементы().Добавить();
		
	ИначеЕсли РежимПроверки = ПредопределенноеЗначение("Перечисление.ВариантыПроверкиПоступившейПродукцииИС.ПеремещатьТудаГдеДолжныБыть")
		И (Не УпаковкаНеСодержитсяВДанныхДокумента) Тогда
		
		НоваяСтрока = ДеревоМаркированнойПродукции.ПолучитьЭлементы().Добавить();
		
	Иначе
		
		НоваяСтрока = ТекущаяПроверяемаяУпаковка.ПолучитьЭлементы().Добавить();
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеШтрихкода);
	НоваяСтрока.СтатусКодаМаркировки         = ДанныеШтрихкода.Статус;
	НоваяСтрока.ТипУпаковки                  = ?(ЗначениеЗаполнено(ТипУпаковки), ТипУпаковки, ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка"));
	НоваяСтрока.НеСодержитсяВДанныхДокумента = Истина;
	НоваяСтрока.СтатусПроверки               = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась");
	НоваяСтрока.ГрупповаяТоварнаяУпаковка    = ЭтоУпаковкаБлока;
	
	Если ЭтоУпаковкаБлока Тогда
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
			НоваяСтрока.ПредставлениеСодержимоеУпаковки = ДанныеШтрихкода.ПредставлениеНоменклатуры;
		КонецЕсли;
		
		Если ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.КоробкиСБлоками") Тогда
			НоваяСтрока.КоличествоПодчиненныхПачек     = ДанныеШтрихкода.КоличествоПачек;
			НоваяСтрока.НеПересчитыватьКоличествоПачек = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ДобавленныеУпаковки.Добавить(ДанныеШтрихкода.Штрихкод);
	ПроверкаИПодборПродукцииМОТПКлиентСервер.ПроверитьДопустимостьКодаМаркировки(НоваяСтрока, ПараметрыПроверкиКодовМаркировки);
	ПроверкаИПодборПродукцииМОТПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(НоваяСтрока, Ложь);
	ПроверкаИПодборПродукцииМОТПКлиентСервер.СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(НоваяСтрока);
	ПроверкаИПодборПродукцииМОТПКлиентСервер.УстановитьДоступностьУпаковкиДляПроверки(НоваяСтрока, ДоступныеДляПроверкиУпаковки);
	
	ИдентификаторСтроки = НоваяСтрока.ПолучитьИдентификатор();
	
	Если ОбработкаДанныхТСД Тогда
		Если ЗагрузкаДанныхТСД.ТекущаяОперация = "ЕдинственнаяУпаковка"
			Или ЗагрузкаДанныхТСД.ТекущаяОперация = "УпаковкаССодержимым" Тогда
			ЗагрузкаДанныхТСД.ИдентификаторУпаковки = ИдентификаторСтроки;
		КонецЕсли;
	Иначе
		ИзменитьКонтекстПроверки(НоваяСтрока);
	КонецЕсли;
	
	ПроверкаИПодборПродукцииМОТПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(НоваяСтрока);
	
	Если СпозиционироватьсяНаДобавленной Тогда
		
		СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НоваяСтрока);
		
	КонецЕсли;
	
	СоответствиеШтрихкодовСтрокДерева.Вставить(НоваяСтрока.Штрихкод, ИдентификаторСтроки);
	ПриИзмененииМаркировкиСоставаУпаковкиНаСервере(ИдентификаторСтроки, Истина);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоместитьНовуюВПачкиБезБлока(ДанныеШтрихкода)
	
	СтрокаПачкиБезБлока = СтрокаПачкиБезБлока(ЭтотОбъект);
	
	ДобавитьНовуюТабачнуюПродукциюВДерево(ДанныеШтрихкода, СтрокаПачкиБезБлока);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНовуюТабачнуюПродукциюВДерево(ДанныеШтрихкода, ДобавлятьВУпаковку = Неопределено, ОбработкаДанныхТСД = Ложь)

	ЭтоКодМаркировкиБлока = ШтрихкодированиеМОТПКлиентСервер.ЭтоКодМаркировкиБлока(ДанныеШтрихкода.Штрихкод);
	
	Если ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки") Тогда
		
		Если ЭтоКодМаркировкиБлока Тогда
			ДанныеШтрихкода.Вставить("ТекстОшибки", НСтр("ru = 'В выбранном режиме детализации возможно сканирование только табачных пачек.'"));
			ШтрихкодированиеМОТПКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(ЭтотОбъект, ДанныеШтрихкода);
			Возврат;
		КонецЕсли;
		
		НоваяСтрока = ДеревоМаркированнойПродукции.ПолучитьЭлементы().Добавить();
		
	Иначе
		
		Если ДобавлятьВУпаковку = Неопределено Тогда
			
			Если ОбработкаДанныхТСД
				И ЗагрузкаДанныхТСД.ИдентификаторУпаковки <> -1 Тогда
				
				ДобавлятьВУпаковку = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ЗагрузкаДанныхТСД.ИдентификаторУпаковки);
				
			ИначеЕсли ИдентификаторТекущейПроверяемойУпаковки = - 1 Тогда
				
				Если ЭтоКодМаркировкиБлока Тогда
					ДобавлятьВУпаковку = СтрокаБлокиБезКоробки(ЭтотОбъект);
				Иначе
					ДобавлятьВУпаковку = СтрокаПачкиБезБлока(ЭтотОбъект);
				КонецЕсли;
				
			Иначе
				
				ДобавлятьВУпаковку = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторТекущейПроверяемойУпаковки);
				
			КонецЕсли;
			
			Если ДобавлятьВУпаковку = Неопределено Тогда
				Если ЭтоКодМаркировкиБлока Тогда
					ДобавлятьВУпаковку = СтрокаБлокиБезКоробки(ЭтотОбъект);
				Иначе
					ДобавлятьВУпаковку = СтрокаПачкиБезБлока(ЭтотОбъект);
				КонецЕсли;
			КонецЕсли;
			
			НоваяСтрока = ДобавлятьВУпаковку.ПолучитьЭлементы().Добавить();
			
		Иначе
			
			НоваяСтрока = ДобавлятьВУпаковку.ПолучитьЭлементы().Добавить();
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеШтрихкода);
	НоваяСтрока.СтатусКодаМаркировки         = ДанныеШтрихкода.Статус;
	НоваяСтрока.НеСодержитсяВДанныхДокумента = Истина;
	НоваяСтрока.СтатусПроверки               = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась");
	
	Если ЭтоКодМаркировкиБлока Тогда
		НоваяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка");
		НоваяСтрока.ГрупповаяТоварнаяУпаковка = Истина;
	Иначе
		НоваяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар");
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
		НоваяСтрока.ПредставлениеСодержимоеУпаковки = ДанныеШтрихкода.ПредставлениеНоменклатуры;
	КонецЕсли;
	
	ПроверкаИПодборПродукцииМОТПКлиентСервер.ПроверитьДопустимостьКодаМаркировки(НоваяСтрока, ПараметрыПроверкиКодовМаркировки);
	ПроверкаИПодборПродукцииМОТПКлиентСервер.УстановитьИндексКартинкиТипаУпаковки(НоваяСтрока);
	ПроверкаИПодборПродукцииМОТПКлиентСервер.УстановитьИндексКартинкиСтатусаПроверки(НоваяСтрока);
	ПроверкаИПодборПродукцииМОТПКлиентСервер.СформироватьПредставлениеПроверкиПодчиненных(НоваяСтрока);
	ПроверкаИПодборПродукцииМОТПКлиентСервер.СформироватьПредставлениеСодержимогоУпаковки(НоваяСтрока);
	ПроверкаИПодборПродукцииМОТПКлиентСервер.СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(НоваяСтрока);
	ПроверкаИПодборПродукцииМОТПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(НоваяСтрока);

	ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийТабачнойПродукции, НоваяСтрока, +1);
	
	ИдентификаторСтроки = НоваяСтрока.ПолучитьИдентификатор();
	СоответствиеШтрихкодовСтрокДерева.Вставить(НоваяСтрока.Штрихкод, ИдентификаторСтроки);
	
	Если ДетализацияСтруктурыХранения <> ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки")
		И ДобавлятьВУпаковку.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.ПачкиБезБлока")
		И ДобавлятьВУпаковку.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.БлокиБезКоробки") Тогда
		ПриИзмененииМаркировкиСоставаУпаковкиНаСервере(ИдентификаторСтроки, Истина);
	КонецЕсли;
	
	СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НоваяСтрока);
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВПачкиБезБлока(ИдентификаторСтрокиПеремещаемойПачки, СтатусПроверки = Неопределено, ИзменятьКонтекстПроверки = Ложь)
	
	СтрокаНазначения   = СтрокаПачкиБезБлока(ЭтотОбъект);
	ПеремещаемаяСтрока = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторСтрокиПеремещаемойПачки);
	
	ПереместитьПачку(ПеремещаемаяСтрока, СтрокаНазначения, СтатусПроверки);
	
	Если ИзменятьКонтекстПроверки Тогда
		ИзменитьКонтекстПроверки(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВБлокиБезКоробки(ИдентификаторСтрокиПеремещаемойПачки, СтатусПроверки = Неопределено, ИзменятьКонтекстПроверки = Ложь)
	
	СтрокаНазначения   = СтрокаБлокиБезКоробки(ЭтотОбъект);
	ПеремещаемаяСтрока = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторСтрокиПеремещаемойПачки);
	
	ПереместитьБлок(ПеремещаемаяСтрока, СтрокаНазначения, СтатусПроверки);
	
	Если ИзменятьКонтекстПроверки Тогда
		ИзменитьКонтекстПроверки(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьПачкуВДругуюУпаковку(ИдентификаторСтрокиПеремещаемойПачки, ШтрихкодУпаковкиНазначения, СтатусПроверки = Неопределено)
	
	ИдентификаторСтрокиУпаковкиНазначения = ИдентификаторСтрокиДереваПоШтрихкоду(ШтрихкодУпаковкиНазначения);
	
	СтрокаНазначения   = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторСтрокиУпаковкиНазначения);
	ПеремещаемаяСтрока = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторСтрокиПеремещаемойПачки);
	
	ПереместитьПачку(ПеремещаемаяСтрока, СтрокаНазначения, СтатусПроверки);
	ИзменитьКонтекстПроверки(СтрокаНазначения);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьПачку(СтрокаСПачкой, НоваяУпаковка, СтатусПроверки = Неопределено)

	ТекущаяУпаковка = СтрокаСПачкой.ПолучитьРодителя();
	
	НоваяСтрока = НоваяУпаковка.ПолучитьЭлементы().Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСПачкой);
	
	Если СтатусПроверки <> Неопределено Тогда
		Если НеобходимоУвеличитьКоличествоПодобраннойПродукции(РежимПодбораСуществующихУпаковок, НоваяСтрока, СтатусПроверки) Тогда
			ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийТабачнойПродукции, НоваяСтрока, +1);
		КонецЕсли;
		
		НоваяСтрока.СтатусПроверки = СтатусПроверки;
		ПроверкаИПодборПродукцииМОТПКлиентСервер.УстановитьИндексКартинкиСтатусаПроверки(НоваяСтрока);
	КонецЕсли;
	
	ТекущаяУпаковка.ПолучитьЭлементы().Удалить(СтрокаСПачкой);
	
	ПроверкаИПодборПродукцииМОТПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(ТекущаяУпаковка, Ложь);
	ПроверкаИПодборПродукцииМОТПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(ТекущаяУпаковка);
	ПроверкаИПодборПродукцииМОТПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(НоваяСтрока);
	
	МассивСтрокИзменившихсяУпаковок = Новый Массив;
	МассивСтрокИзменившихсяУпаковок.Добавить(НоваяУпаковка.ПолучитьИдентификатор());
	МассивСтрокИзменившихсяУпаковок.Добавить(ТекущаяУпаковка.ПолучитьИдентификатор());
	
	ПриИзмененииМаркировкиСоставаУпаковкиМассиваСтрок(МассивСтрокИзменившихсяУпаковок, Истина);
	
	СоответствиеШтрихкодовСтрокДерева.Вставить(НоваяСтрока.Штрихкод, НоваяСтрока.ПолучитьИдентификатор());
	
	СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НоваяСтрока);
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПереместитьБлок(СтрокаСБлоком, НоваяУпаковка, СтатусПроверки = Неопределено)

	ТекущаяУпаковка = СтрокаСБлоком.ПолучитьРодителя();
	
	НоваяСтрока = НоваяУпаковка.ПолучитьЭлементы().Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСБлоком);
	
	Если СтатусПроверки <> Неопределено Тогда
		Если ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.КоробкиСБлоками")
			И НеобходимоУвеличитьКоличествоПодобраннойПродукции(РежимПодбораСуществующихУпаковок, НоваяСтрока, СтатусПроверки) Тогда
			ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийТабачнойПродукции, НоваяСтрока, +1);
		КонецЕсли;
		
		НоваяСтрока.СтатусПроверки = СтатусПроверки;
		ПроверкаИПодборПродукцииМОТПКлиентСервер.УстановитьИндексКартинкиСтатусаПроверки(НоваяСтрока);
	КонецЕсли;
	
	СоответствиеШтрихкодовСтрокДерева.Вставить(НоваяСтрока.Штрихкод, НоваяСтрока.ПолучитьИдентификатор());
	
	Если ДетализацияСтруктурыХранения <> ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.КоробкиСБлоками") Тогда
		Для Каждого СтрокаСПачкой Из СтрокаСБлоком.ПолучитьЭлементы() Цикл
			СтрокаНовойПачкой = НоваяСтрока.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНовойПачкой, СтрокаСПачкой);
			СоответствиеШтрихкодовСтрокДерева.Вставить(СтрокаНовойПачкой.Штрихкод, СтрокаНовойПачкой.ПолучитьИдентификатор());
		КонецЦикла;
	КонецЕсли;
	
	ТекущаяУпаковка.ПолучитьЭлементы().Удалить(СтрокаСБлоком);
	
	ПроверкаИПодборПродукцииМОТПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(ТекущаяУпаковка, Ложь);
	ПроверкаИПодборПродукцииМОТПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(ТекущаяУпаковка);
	ПроверкаИПодборПродукцииМОТПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(НоваяСтрока);
	
	МассивСтрокИзменившихсяУпаковок = Новый Массив;
	МассивСтрокИзменившихсяУпаковок.Добавить(НоваяУпаковка.ПолучитьИдентификатор());
	МассивСтрокИзменившихсяУпаковок.Добавить(ТекущаяУпаковка.ПолучитьИдентификатор());
	
	ПриИзмененииМаркировкиСоставаУпаковкиМассиваСтрок(МассивСтрокИзменившихсяУпаковок, Истина);
	
	СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НоваяСтрока);
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПереместитьУпаковкуВДругуюУпаковку(ИдентификаторСтрокиПеремещаемойУпаковки, ШтрихкодУпаковкиНазначения, СтатусПроверки = Неопределено)
	
	ИдентификаторПеремещеннойСтроки = -1;
	Если ТипЗнч(ИдентификаторСтрокиПеремещаемойУпаковки) = Тип("ДанныеФормыЭлементДерева") Тогда
		ПеремещаемаяСтрока = ИдентификаторСтрокиПеремещаемойУпаковки;
	Иначе
		ПеремещаемаяСтрока = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторСтрокиПеремещаемойУпаковки);
	КонецЕсли;
	РодительПеремещаемойСтроки = ПеремещаемаяСтрока.ПолучитьРодителя();
	
	Если СтатусПроверки <> Неопределено Тогда
		ПеремещаемаяСтрока.СтатусПроверки = СтатусПроверки;
	КонецЕсли;
	
	МассивСтрокИзмененыхУпаковок = Новый Массив;
	
	Если ШтрихкодУпаковкиНазначения <> Неопределено Тогда
		
		Если ТипЗнч(ШтрихкодУпаковкиНазначения) = Тип("ДанныеФормыЭлементДерева") Тогда
			
			СтрокаНазначения = ШтрихкодУпаковкиНазначения;
			
		Иначе
			
			ИдентификаторСтрокиУпаковкиНазначения = ИдентификаторСтрокиДереваПоШтрихкоду(ШтрихкодУпаковкиНазначения);
			СтрокаНазначения = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторСтрокиУпаковкиНазначения);
	
		КонецЕсли;
				
		Если ИдентификаторСтрокиУпаковкиНазначения <> - 1 Тогда
			
			ПереместитьЭлементДерева(СтрокаНазначения,
			                         ПеремещаемаяСтрока,
			                         ИдентификаторПеремещеннойСтроки);
			
		КонецЕсли;
		
		ПроверкаИПодборПродукцииМОТПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаНазначения, Истина);
		МассивСтрокИзмененыхУпаковок.Добавить(СтрокаНазначения.ПолучитьИдентификатор());
	
	Иначе
		
		ПереместитьЭлементДерева(Неопределено,
		                         ПеремещаемаяСтрока,
		                         ИдентификаторПеремещеннойСтроки);
	
	КонецЕсли;
	
	ИзменитьКонтекстПроверки(СтрокаНазначения);
	
	Если РодительПеремещаемойСтроки <> Неопределено Тогда
		ПроверкаИПодборПродукцииМОТПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(РодительПеремещаемойСтроки, Истина);
		МассивСтрокИзмененыхУпаковок.Добавить(РодительПеремещаемойСтроки.ПолучитьИдентификатор());
	КонецЕсли;
	
	Если МассивСтрокИзмененыхУпаковок.Количество() > 0 Тогда
		ПриИзмененииМаркировкиСоставаУпаковкиМассиваСтрок(МассивСтрокИзмененыхУпаковок, Истина);
	КонецЕсли;
	
	Элементы.ДеревоМаркированнойПродукции.ТекущаяСтрока = ИдентификаторПеремещеннойСтроки;
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьЭлементДерева(СтрокаНазначение, ПеремещаемаяСтрока, ИдентификаторПеремещеннойСтроки, УдалятьПослеДобавления = Истина)
	
	Если Не ПеремещениеЭлементаДереваВозможно(СтрокаНазначение, ПеремещаемаяСтрока) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаНазначение = Неопределено Тогда
		НоваяСтрока = ДеревоМаркированнойПродукции.ПолучитьЭлементы().Добавить();
	Иначе
		НоваяСтрока = СтрокаНазначение.ПолучитьЭлементы().Добавить();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, ПеремещаемаяСтрока);
	СоответствиеШтрихкодовСтрокДерева.Вставить(НоваяСтрока.Штрихкод, НоваяСтрока.ПолучитьИдентификатор());
	
	Для каждого Элемент Из ПеремещаемаяСтрока.ПолучитьЭлементы() Цикл
		ПереместитьЭлементДерева(НоваяСтрока, Элемент, ИдентификаторПеремещеннойСтроки, Ложь);
	КонецЦикла;
	
	Если УдалятьПослеДобавления Тогда
		
		РодительПеремещаемойСтроки = ПеремещаемаяСтрока.ПолучитьРодителя();
		Если РодительПеремещаемойСтроки <> Неопределено Тогда
			КоллекцияЭлементов = РодительПеремещаемойСтроки.ПолучитьЭлементы();
		Иначе
			КоллекцияЭлементов = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
		КонецЕсли;
		
		КоллекцияЭлементов.Удалить(ПеремещаемаяСтрока);
		ИдентификаторПеремещеннойСтроки = НоваяСтрока.ПолучитьИдентификатор();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПеремещениеЭлементаДереваВозможно(СтрокаНазначение, ПеремещаемаяСтрока)
	
	Если ПеремещаемаяСтрока = СтрокаНазначение Тогда
		Возврат Ложь;
	КонецЕсли;

	Если ПеремещаемаяСтрока.ПолучитьРодителя() = СтрокаНазначение Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрока Из ПеремещаемаяСтрока.ПолучитьЭлементы() Цикл
		
		Если ПодчиненнаяСтрока = СтрокаНазначение Тогда
			Возврат Ложь;
		КонецЕсли;
		
		РезультатПроверкиПодчиненнойСтроки = ПеремещениеЭлементаДереваВозможно(СтрокаНазначение, ПодчиненнаяСтрока);
		
		Если НЕ РезультатПроверкиПодчиненнойСтроки Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
		
	Возврат Истина;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаПачкиБезБлока(Форма)
	
	Возврат Форма.ДеревоМаркированнойПродукции.НайтиПоИдентификатору(Форма.ИдентификаторСтрокиПачкиБезБлока);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаБлокиБезКоробки(Форма)
	
	Возврат Форма.ДеревоМаркированнойПродукции.НайтиПоИдентификатору(Форма.ИдентификаторСтрокиБлокиБезКоробки);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаТекущейПроверяемойУпаковки(Форма, ЭтоУпаковка, ЭтоУпаковкаБлока)
	
	Если Форма.ИдентификаторТекущейПроверяемойУпаковки = - 1 Тогда
		
		Если НЕ ЭтоУпаковка Тогда
			Возврат СтрокаПачкиБезБлока(Форма);
		ИначеЕсли ЭтоУпаковкаБлока Тогда
			Возврат СтрокаБлокиБезКоробки(Форма);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	Иначе
		
		Если НЕ ЭтоУпаковка Тогда
			Возврат Форма.ДеревоМаркированнойПродукции.НайтиПоИдентификатору(Форма.ИдентификаторТекущейПроверяемойУпаковки);
		ИначеЕсли ЭтоУпаковкаБлока Тогда
			Если Форма.ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Полная")
				Или Форма.ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.КоробкиСБлоками") Тогда
				Возврат Форма.ДеревоМаркированнойПродукции.НайтиПоИдентификатору(Форма.ИдентификаторТекущейПроверяемойУпаковки);
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		Иначе
			Если Форма.ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.БлокиСПачками")
				Или Форма.ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки") Тогда
				Возврат Неопределено;
			Иначе
				Возврат Форма.ДеревоМаркированнойПродукции.НайтиПоИдентификатору(Форма.ИдентификаторТекущейПроверяемойУпаковки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СканированиеСуществующихУпаковокИТабачнойПродукции

&НаСервере
Процедура ПеренестиСтрокуСуществующейУпаковкиВДеревоМаркированнойПродукции(СтрокаИсточника,
	                                                                       КоллекцияСтрокПриемника, 
	                                                                       СоответствиеШтрихкодовСтрокДерева, 
	                                                                       СтатусПроверки, 
	                                                                       ЭтоПерваяДобавляемаяСтрока,
	                                                                       ОбработкаДанныхТСД)

	НоваяСтрока = КоллекцияСтрокПриемника.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
	
	ИдентификаторДобавленнойСтроки = НоваяСтрока.ПолучитьИдентификатор();
	СоответствиеШтрихкодовСтрокДерева.Вставить(НоваяСтрока.Штрихкод, ИдентификаторДобавленнойСтроки);
	
	Если НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.ПустаяСсылка() Тогда
		НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
	КонецЕсли;
	
	НоваяСтрока.СтатусПроверки       = СтатусПроверки;
	НоваяСтрока.СтатусКодаМаркировки = СтрокаИсточника.Статус;
	
	ПроверкаИПодборПродукцииМОТПКлиентСервер.СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(НоваяСтрока);
	
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(НоваяСтрока.ТипУпаковки) Тогда
		УпаковкиДокумента.Добавить(НоваяСтрока.Штрихкод);
		
		Если ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаБлока(НоваяСтрока) Тогда
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
				НоваяСтрока.ПредставлениеСодержимоеУпаковки = СтрокаИсточника.ПредставлениеНоменклатуры;
			КонецЕсли;
			
			Если ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.КоробкиСБлоками") Тогда
				НоваяСтрока.КоличествоПодчиненныхПачек     = СтрокаИсточника.КоличествоПачек;
				НоваяСтрока.НеПересчитыватьКоличествоПачек = Истина;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
		
		НоваяСтрока.ПредставлениеСодержимоеУпаковки = СтрокаИсточника.ПредставлениеНоменклатуры;
		
	КонецЕсли;

	КоллекцияСтрокДобавленнойСтроки = НоваяСтрока.ПолучитьЭлементы();
	
	Если ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаБлока(НоваяСтрока) Тогда
		РодительНовойСтроки = НоваяСтрока.ПолучитьРодителя();
		Если РодительНовойСтроки = Неопределено
		 Или РодительНовойСтроки.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.БлокиБезКоробки Тогда
			СтатусПроверкиПодчиненных = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
		Иначе
			СтатусПроверкиПодчиненных = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась;
		КонецЕсли;
	Иначе
		СтатусПроверкиПодчиненных = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась;
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрокаИсточника Из СтрокаИсточника.Строки Цикл
		
		ПеренестиСтрокуСуществующейУпаковкиВДеревоМаркированнойПродукции(ПодчиненнаяСтрокаИсточника,
		                                                                 КоллекцияСтрокДобавленнойСтроки,
		                                                                 СоответствиеШтрихкодовСтрокДерева,
		                                                                 СтатусПроверкиПодчиненных,
		                                                                 Ложь,
		                                                                 ОбработкаДанныхТСД);
		
	КонецЦикла;
	
	ПодобраннаяТабачнаяПродукцияПриДобавленииСтроки(ЭтотОбъект, НоваяСтрока);
	
	ПроверкаИПодборПродукцииМОТПКлиентСервер.ПроверитьДопустимостьКодаМаркировки(НоваяСтрока, ПараметрыПроверкиКодовМаркировки);
	ПроверкаИПодборПродукцииМОТПКлиентСервер.УстановитьИндексКартинкиСтатусаПроверки(НоваяСтрока);
	ПроверкаИПодборПродукцииМОТПКлиентСервер.УстановитьИндексКартинкиТипаУпаковки(НоваяСтрока);
	ПроверкаИПодборПродукцииМОТПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(НоваяСтрока, Ложь);
	ПроверкаИПодборПродукцииМОТПКлиентСервер.СформироватьПредставлениеПроверкиПодчиненных(НоваяСтрока);
	
	Если ЭтоПерваяДобавляемаяСтрока Тогда

		СпозиционироватьсяНаСтрокеДерева(ЭтотОбъект, НоваяСтрока);
		ПроверкаИПодборПродукцииМОТПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(НоваяСтрока);
		ПроверкаИПодборПродукцииМОТПКлиентСервер.УстановитьДоступностьУпаковкиДляПроверки(НоваяСтрока, ДоступныеДляПроверкиУпаковки);
		
		КоличествоДобавленныхНедопустимыхКодовМаркировки = ?(НоваяСтрока.НедопустимыйКодМаркировки, 1, 0);
		ОпределитьКоличествоНедопустимыхКодовМаркировкиДляКоллекции(НоваяСтрока.ПолучитьЭлементы(), КоличествоДобавленныхНедопустимыхКодовМаркировки);
		
		Если КоличествоДобавленныхНедопустимыхКодовМаркировки > 0 Тогда
			КоличествоНедопустимыхКодовМаркировки = КоличествоНедопустимыхКодовМаркировки + КоличествоДобавленныхНедопустимыхКодовМаркировки;
			ПроверкаИПодборПродукцииМОТПКлиентСервер.ОтобразитьИнформациюОНедопустимыхКодахМаркировки(ЭтотОбъект);
		КонецЕсли;
		
		Если ОбработкаДанныхТСД 
			И (ЗагрузкаДанныхТСД.ТекущаяОперация = "ЕдинственнаяУпаковка" 
			Или ЗагрузкаДанныхТСД.ТекущаяОперация = "УпаковкаССодержимым") Тогда
			
			ЗагрузкаДанныхТСД.ИдентификаторУпаковки = ИдентификаторДобавленнойСтроки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьДублиВОсканированнойУпаковке(ДеревоУпаковок, СоответствиеШтрихкодовСтрокДерева)
	
	ЕстьОшибки = Ложь;
	
	Если ДеревоУпаковок.Колонки.Найти("ЕстьОшибки") = Неопределено Тогда
		ДеревоУпаковок.Колонки.Добавить("ЕстьОшибки", Новый ОписаниеТипов("Булево"));
		ДеревоУпаковок.Колонки.Добавить("ТекстОшибки", ОбщегоНазначения.ОписаниеТипаСтрока(500));
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		ПроверитьНаДубльВСтрокеДерева(СтрокаДерева, СоответствиеШтрихкодовСтрокДерева, ЕстьОшибки)
		
	КонецЦикла;
	
	Возврат ЕстьОшибки;
	
КонецФункции

&НаСервере
Процедура ПроверитьНаДубльВСтрокеДерева(СтрокаДерева, СоответствиеШтрихкодовСтрокДерева, ЕстьОшибки)

	Если СоответствиеШтрихкодовСтрокДерева.Получить(СтрокаДерева.Штрихкод) <> Неопределено Тогда
		
		СтрокаДерева.ЕстьОшибки = Истина;
		СтрокаДерева.ТекстОшибки = НСтр("ru = 'Уже присутствует в данных формы проверки и подбора'");
		
		ЕстьОшибки = Истина;
		
	КонецЕсли;
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
		
		ПроверитьНаДубльВСтрокеДерева(ПодчиненнаяСтрока, СоответствиеШтрихкодовСтрокДерева, ЕстьОшибки);
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция РезультатДобавленияСуществующейУпаковкиВДеревоМаркированнойПродукции(ДанныеШтрихкода, СоответствиеШтрихкодовСтрокДерева, ОбработкаДанныхТСД, ПараметрыСканирования)

	Результат = Новый Структура;
	Результат.Вставить("ЕстьОшибки", Ложь);
	Результат.Вставить("АдресХранилищаДереваУпаковки",    Неопределено);
	Результат.Вставить("ТребуетсяСбросКонтекстаПроверки", Ложь);
	
	Если ЭтоАдресВременногоХранилища(ДанныеШтрихкода.ВложенныеШтрихкоды) Тогда
		ДеревоУпаковок = ПолучитьИзВременногоХранилища(ДанныеШтрихкода.ВложенныеШтрихкоды);
	Иначе
		МассивУпаковок = Новый Массив;
		МассивУпаковок.Добавить(ДанныеШтрихкода.ШтрихкодУпаковки);
		ВложенныеШтрихкоды = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковок(МассивУпаковок, ПараметрыСканирования);
		ДеревоУпаковок = ВложенныеШтрихкоды.ДеревоУпаковок;
	КонецЕсли;

	ПреобразоватьСчитаннуюУпаковкуЕслиНеобходимо(ДеревоУпаковок);
	
	ЕстьОшибки = ЕстьДублиВОсканированнойУпаковке(ДеревоУпаковок, СоответствиеШтрихкодовСтрокДерева);
	
	Если ЕстьОшибки Тогда
		
		Результат.ЕстьОшибки                   = Истина;
		Результат.АдресХранилищаДереваУпаковки = ПоместитьВоВременноеХранилище(ДеревоУпаковок);
		Возврат Результат;
		
	КонецЕсли;
	
	Если ДеревоУпаковок.Строки.Количество() = 0 Тогда 
		
		Возврат Результат;
		
	КонецЕсли;
	
	ЭтоУпаковка = ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ДанныеШтрихкода.ТипУпаковки);
	
	Если ЭтоУпаковка Тогда
		ЭтоУпаковкаБлока = ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаБлока(ДанныеШтрихкода);
	Иначе
		ЭтоУпаковкаБлока = Ложь;
	КонецЕсли;
	
	Если ОбработкаДанныхТСД Тогда
		
		СтрокаПроверяемойУпаковки = СтрокаТекущейПроверяемойУпаковкиТСД(ЭтотОбъект, ЭтоУпаковка, ЭтоУпаковкаБлока); 
		
	Иначе
		
		Если ДетализацияСтруктурыХранения <> ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки") Тогда
			
			СтрокаПроверяемойУпаковки = СтрокаТекущейПроверяемойУпаковки(ЭтотОбъект, ЭтоУпаковка, ЭтоУпаковкаБлока);
			
		Иначе
			
			СтрокаПроверяемойУпаковки = Неопределено;
			
		КонецЕсли;
	
	КонецЕсли;
		
	Если СтрокаПроверяемойУпаковки = Неопределено Тогда
		
		КоллекцияСтрокПриемника = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
		
	Иначе
		
		КоллекцияСтрокПриемника = СтрокаПроверяемойУпаковки.ПолучитьЭлементы();
		
	КонецЕсли;
	
	Если СтрокаПроверяемойУпаковки <> Неопределено Тогда
		Если ЭтоУпаковка Тогда
			Если ЭтоУпаковкаБлока И СтрокаПроверяемойУпаковки.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.БлокиБезКоробки Тогда
				СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
			Иначе
				СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась;
			КонецЕсли;
		Иначе
			Если СтрокаПроверяемойУпаковки.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.ПачкиБезБлока Тогда
				СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
			Иначе
				СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась;
			КонецЕсли;
		КонецЕсли;
	Иначе
		СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		ЭтоСтрокаСоСчитаннымШтрихКодом = СтрокаДерева.Штрихкод = ДанныеШтрихкода.Штрихкод;
		УстанавливаемыйСтатусПроверки = ?(ЭтоСтрокаСоСчитаннымШтрихКодом,
		                                  СтатусПроверки, 
		                                  Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась);
		
		Если ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
			И Не ЗначениеЗаполнено(СтрокаДерева.Номенклатура) Тогда
			
			СтрокаДерева.Номенклатура         = ДанныеШтрихкода.Номенклатура;
			СтрокаДерева.Характеристика       = ДанныеШтрихкода.Характеристика;
			СтрокаДерева.Серия                = ДанныеШтрихкода.Серия;
			
		КонецЕсли;
		
		ПеренестиСтрокуСуществующейУпаковкиВДеревоМаркированнойПродукции(СтрокаДерева, 
		                                                                 КоллекцияСтрокПриемника,
		                                                                 СоответствиеШтрихкодовСтрокДерева,
		                                                                 УстанавливаемыйСтатусПроверки,
		                                                                 ЭтоСтрокаСоСчитаннымШтрихКодом,
		                                                                 ОбработкаДанныхТСД);
		
	КонецЦикла;
	
	Если ЭтоУпаковка 
		И ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.БлокиСПачками Тогда
		
		Результат.ТребуетсяСбросКонтекстаПроверки = Истина;
		
	КонецЕсли;
	
	Если ИдентификаторТекущейПроверяемойУпаковки <> -1 Тогда
		ПриИзмененииМаркировкиСоставаУпаковкиНаСервере(ИдентификаторТекущейПроверяемойУпаковки, Истина);
	КонецЕсли;
	
	КоличествоСтрокПодобраннойТабачнойПродукции = ПодобраннаяТабачнаяПродукция.Количество();
	
	Модифицированность = Истина;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПреобразоватьСчитаннуюУпаковкуЕслиНеобходимо(ДеревоУпаковок)

	ДетализацияСтруктурыХраненияДерева = ДетализацияСтруктурыХраненияДерева(ДеревоУпаковок);
	
	Если ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки
		И (ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Полная
		Или ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.КоробкиСБлоками
		Или ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.БлокиСПачками) Тогда
		
		ПреобразоватьДетализациюСчитаннойУпаковкиДоПачки(ДеревоУпаковок);
		
	ИначеЕсли ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.БлокиСПачками 
		И (ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Полная
		ИЛИ ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.КоробкиСБлоками) Тогда
		
		ПреобразоватьДетализациюСчитаннойУпаковкиДоБлокаСПачками(ДеревоУпаковок);
		
	ИначеЕсли ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.КоробкиСБлоками 
		И ДетализацияСтруктурыХраненияДерева <> Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.КоробкиСБлоками Тогда
		
		ПреобразоватьДетализациюСчитаннойУпаковкиДоКоробкиСБлоками(ДеревоУпаковок);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработкаИзмененийТабачнойПродукции

&НаКлиентеНаСервереБезКонтекста
Функция НеобходимоУменьшитьКоличествоПодобраннойПродукции(РежимПодбораСуществующихУпаковок, СтрокаДерева, НовыйСтатусПроверки)
	
	Если СтрокаДерева.СтатусПроверки = НовыйСтатусПроверки Тогда
		Возврат Ложь;
	ИначеЕсли РежимПодбораСуществующихУпаковок Тогда
		Если НовыйСтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НеобходимоУвеличитьКоличествоПодобраннойПродукции(РежимПодбораСуществующихУпаковок, СтрокаДерева, НовыйСтатусПроверки)
	
	Если СтрокаДерева.СтатусПроверки = НовыйСтатусПроверки Тогда
		Возврат Ложь;
	ИначеЕсли РежимПодбораСуществующихУпаковок Тогда
		Если СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда
			Возврат Истина;
		КонецЕсли;
	ИначеЕсли НовыйСтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.ВНаличии") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийТабачнойПродукции, СтрокаДерева, Изменение)
	
	НоваяСтрока = ТаблицаИзмененийТабачнойПродукции.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
	НоваяСтрока.ПредставлениеНоменклатуры = СтрокаДерева.ПредставлениеСодержимоеУпаковки;
		
	Если СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
		НоваяСтрока.Изменение = Изменение;
	Иначе
		НоваяСтрока.Изменение = Изменение * СтрокаДерева.КоличествоПодчиненныхПачек;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ДобавитьСтрокуСПодчиненнымиВТаблицуИзменений(ТаблицаИзмененийТабачнойПродукции, СтрокаДерева)
	
	ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийТабачнойПродукции, СтрокаДерева, - 1);
	
	Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		
		ДобавитьСтрокуВТаблицуИзменений(ТаблицаИзмененийТабачнойПродукции, ПодчиненнаяСтрока, - 1);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьТаблицуИзмененийТабачнойПродукции(Форма)

	Для Каждого СтрокаТаблицы Из Форма.ТаблицаИзмененийТабачнойПродукции Цикл
		
		Если СтрокаТаблицы.Изменение > 0 Тогда
			
			ПодобраннаяТабачнаяПродукцияПриДобавленииСтроки(Форма, СтрокаТаблицы);
			
		ИначеЕсли СтрокаТаблицы.Изменение < 0 Тогда
			
			ПодобраннаяТабачнаяПродукцияПриУдаленииСтроки(Форма, СтрокаТаблицы);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Форма.КоличествоСтрокПодобраннойТабачнойПродукции = Форма.ПодобраннаяТабачнаяПродукция.Количество();
	
	Форма.ТаблицаИзмененийТабачнойПродукции.Очистить();

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяОбработатьСтрокуИзмененийПродукции(Форма, СтрокаИзменений)
	
	Если Форма.ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.КоробкиСБлоками") Тогда
		Если НЕ ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаБлока(СтрокаИзменений) Тогда
			Возврат Ложь;
		КонецЕсли;
	ИначеЕсли СтрокаИзменений.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НоменклатурыСтрокСовпадают(ИсходнаяСтрока, СтрокаИзменений)
	
	Если ЗначениеЗаполнено(ИсходнаяСтрока.Номенклатура) Тогда
		
		Если ИсходнаяСтрока.Номенклатура = СтрокаИзменений.Номенклатура
			И ИсходнаяСтрока.Характеристика = СтрокаИзменений.Характеристика Тогда
			
			Если ЗначениеЗаполнено(ИсходнаяСтрока.Серия)
				И ИсходнаяСтрока.Серия = СтрокаИзменений.Серия Тогда
					
				Возврат Истина;
				
			ИначеЕсли Не ЗначениеЗаполнено(ИсходнаяСтрока.Серия)
				И Не ЗначениеЗаполнено(СтрокаИзменений.Серия)
				И ИсходнаяСтрока.МРЦ = СтрокаИзменений.МРЦ Тогда
					
				Возврат Истина;
				
			Иначе
				
				Возврат Ложь;
				
			КонецЕсли;
			
		Иначе
			
			Возврат Ложь;
			
		КонецЕсли;
		
	ИначеЕсли ИсходнаяСтрока.GTIN = СтрокаИзменений.GTIN
		И ИсходнаяСтрока.МРЦ = СтрокаИзменений.МРЦ Тогда
		
		Возврат Истина;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПодобраннаяТабачнаяПродукцияПриУдаленииСтроки(Форма, СтрокаИзменений)
	
	Если НЕ ТребуетсяОбработатьСтрокуИзмененийПродукции(Форма, СтрокаИзменений) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТабачнойПродукции Из Форма.ПодобраннаяТабачнаяПродукция Цикл
		Если НоменклатурыСтрокСовпадают(СтрокаТабачнойПродукции, СтрокаИзменений) Тогда
			УменьшитьПодобранноеКоличествоТабачнойПродукции(СтрокаТабачнойПродукции, Форма.ПодобраннаяТабачнаяПродукция, СтрокаИзменений.Изменение);
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УменьшитьПодобранноеКоличествоТабачнойПродукции(СтрокаТабачнойПродукции, ПодобраннаяТабачнаяПродукция, ИзменениеКоличества = -1)

	СтрокаТабачнойПродукции.КоличествоПодобрано = СтрокаТабачнойПродукции.КоличествоПодобрано + ИзменениеКоличества;
	
	Если СтрокаТабачнойПродукции.Количество = 0
		И СтрокаТабачнойПродукции.КоличествоМОТП = 0
		И СтрокаТабачнойПродукции.КоличествоПодобрано = 0 Тогда
		
		ПодобраннаяТабачнаяПродукция.Удалить(СтрокаТабачнойПродукции);
		
	Иначе
		
		ПроверкаИПодборПродукцииМОТПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаТабачнойПродукции);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПодобраннаяТабачнаяПродукцияПриДобавленииСтроки(Форма, СтрокаИзменений)
	
	Если НЕ ТребуетсяОбработатьСтрокуИзмененийПродукции(Форма, СтрокаИзменений) Тогда
		Возврат;
	КонецЕсли;

	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаИзменений, "Изменение") Тогда
		ИзменениеКоличества = СтрокаИзменений.Изменение;
	Иначе
		ИзменениеКоличества = 1;
	КонецЕсли;
	
	СтрокаТабачнойПродукцииНайдена = Ложь;
	
	Для Каждого СтрокаТабачнойПродукции Из Форма.ПодобраннаяТабачнаяПродукция Цикл
		Если НоменклатурыСтрокСовпадают(СтрокаТабачнойПродукции, СтрокаИзменений) Тогда
			УвеличитьПодобранноеКоличествоТабачнойПродукции(СтрокаТабачнойПродукции, ИзменениеКоличества);
			
			Если ПустаяСтрока(СтрокаТабачнойПродукции.GTIN) Тогда
				СтрокаТабачнойПродукции.GTIN = СтрокаИзменений.GTIN;
			КонецЕсли;
			
			СтрокаТабачнойПродукцииНайдена = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не СтрокаТабачнойПродукцииНайдена Тогда
		НоваяСтрока = Форма.ПодобраннаяТабачнаяПродукция.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИзменений);
		НоваяСтрока.НоменклатураСопоставлена = ЗначениеЗаполнено(НоваяСтрока.Номенклатура);
		
		ПроверкаИПодборПродукцииМОТПКлиентСервер.ПересчитатьНомераСтрок(Форма.ПодобраннаяТабачнаяПродукция);
		
		УвеличитьПодобранноеКоличествоТабачнойПродукции(НоваяСтрока, ИзменениеКоличества);
		
		#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
		КэшированныеЗначения = Неопределено;
		СобытияФормМОТППереопределяемый.ПриИзмененииНоменклатуры(Форма,
			НоваяСтрока, КэшированныеЗначения, Форма.ПараметрыУказанияСерий);
		#Иначе
		СобытияФормМОТПКлиентПереопределяемый.ПриИзмененииНоменклатуры(Форма,
			НоваяСтрока, Форма.КэшированныеЗначения, Форма.ПараметрыУказанияСерий);
		#КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УвеличитьПодобранноеКоличествоТабачнойПродукции(СтрокаТабачнойПродукции, ИзменениеКоличества = 1)
	
	СтрокаТабачнойПродукции.КоличествоПодобрано = СтрокаТабачнойПродукции.КоличествоПодобрано + ИзменениеКоличества;
	ПроверкаИПодборПродукцииМОТПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаТабачнойПродукции);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаИзмененийНоменклатуры

&НаКлиенте
Функция НачатьРегистрациюИзмененийНоменклатурыВСтроке()
	
	ТекущиеДанные = Элементы.ПодобраннаяТабачнаяПродукция.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ТаблицаИзмененийНоменклатуры.Добавить(), ТекущиеДанные);
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЗавершитьРегистрациюИзмененийНоменклатурыВСтроке()
	
	ИндексИзменений = ТаблицаИзмененийНоменклатуры.Количество() - 1;
	СтрокаИзменений = ТаблицаИзмененийНоменклатуры[ИндексИзменений];

	ТекущиеДанные = Элементы.ПодобраннаяТабачнаяПродукция.ТекущиеДанные;
	
	СтрокаИзменений.НоваяНоменклатура   = ТекущиеДанные.Номенклатура;
	СтрокаИзменений.НоваяХарактеристика = ТекущиеДанные.Характеристика;
	СтрокаИзменений.НоваяСерия          = ТекущиеДанные.Серия;
	
	ОбработатьТаблицуИзмененийНоменклатуры(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьРегистрациюИзмененийНоменклатурыВТаблице()
	
	Для Каждого СтрокаТаблицы Из ПодобраннаяТабачнаяПродукция Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаИзмененийНоменклатуры.Добавить(), СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРегистрациюИзмененийНоменклатурыВТаблице()
	
	Для Каждого СтрокаТаблицы Из ПодобраннаяТабачнаяПродукция Цикл
		СтрокаИзменений = ТаблицаИзмененийНоменклатуры[СтрокаТаблицы.НомерСтроки - 1];
		СтрокаИзменений.НоваяНоменклатура   = СтрокаТаблицы.Номенклатура;
		СтрокаИзменений.НоваяХарактеристика = СтрокаТаблицы.Характеристика;
		СтрокаИзменений.НоваяСерия          = СтрокаТаблицы.Серия;
	КонецЦикла;
	
	ОбработатьТаблицуИзмененийНоменклатуры(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбработатьТаблицуИзмененийНоменклатуры(Форма)
	
	ИндексСтроки = 0;
	
	Пока ИндексСтроки < Форма.ТаблицаИзмененийНоменклатуры.Количество() Цикл
		СтрокаТаблицы = Форма.ТаблицаИзмененийНоменклатуры[ИндексСтроки];
		
		Если ТребуетсяОбработатьСтрокуИзмененийНоменклатуры(СтрокаТаблицы) Тогда
			ИндексСтроки = ИндексСтроки + 1;
		Иначе
			Форма.ТаблицаИзмененийНоменклатуры.Удалить(СтрокаТаблицы);
		КонецЕсли;
	КонецЦикла;
	
	Если Форма.ТаблицаИзмененийНоменклатуры.Количество() > 0 Тогда
		ИзменитьНоменклатуруВСтрокахДерева(Форма.ДеревоМаркированнойПродукции.ПолучитьЭлементы(), Форма.ТаблицаИзмененийНоменклатуры);
	КонецЕсли;
		
	Форма.ТаблицаИзмененийНоменклатуры.Очистить();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТребуетсяОбработатьСтрокуИзмененийНоменклатуры(СтрокаИзменений)
	
	Если СтрокаИзменений.Номенклатура <> СтрокаИзменений.НоваяНоменклатура
		Или СтрокаИзменений.Характеристика <> СтрокаИзменений.НоваяХарактеристика
		Или СтрокаИзменений.Серия <> СтрокаИзменений.НоваяСерия Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьНоменклатуруВСтрокахДерева(СтрокиДерева, ТаблицаИзмененийНоменклатуры)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар")
		 Или СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МонотоварнаяУпаковка") Тогда
			Для Каждого СтрокаИзменений Из ТаблицаИзмененийНоменклатуры Цикл
				Если НоменклатурыСтрокСовпадают(СтрокаДерева, СтрокаИзменений) Тогда
					СтрокаДерева.Номенклатура   = СтрокаИзменений.НоваяНоменклатура;
					СтрокаДерева.Характеристика = СтрокаИзменений.НоваяХарактеристика;
					СтрокаДерева.Серия          = СтрокаИзменений.НоваяСерия;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
		
		Если ПодчиненныеСтроки.Количество() > 0 Тогда
			ИзменитьНоменклатуруВСтрокахДерева(ПодчиненныеСтроки, ТаблицаИзмененийНоменклатуры)
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ПризнакПроверкиУпаковки

&НаКлиенте
Процедура ИзменитьСостояниеПроверкиУпаковки(СтрокаДерева)

	Если Не ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки) Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаДерева.ИдетПроверкаДаннойУпаковки Тогда
		
		СнятьПризнакПроверкиУпаковки(СтрокаДерева);
		
	Иначе
		
		УстановитьПризнакПроверкиУпаковки(СтрокаДерева);
		
	КонецЕсли;
	
	ПроверкаИПодборПродукцииМОТПКлиентСервер.УстановитьИндексКартинкиТипаУпаковки(СтрокаДерева);

КонецПроцедуры

&НаКлиенте
Процедура СнятьПризнакПроверкиУпаковки(СтрокаДерева, ВключаяРодителей = Ложь)
	
	СтрокаДерева.ИдетПроверкаДаннойУпаковки = Ложь;
	Элементы.ДеревоМаркированнойПродукции.Свернуть(СтрокаДерева.ПолучитьИдентификатор());
	ПроверкаИПодборПродукцииМОТПКлиентСервер.УстановитьИндексКартинкиТипаУпаковки(СтрокаДерева);
	
	ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
	
	Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		
		Если ПодчиненнаяСтрока.ИдетПроверкаДаннойУпаковки Тогда
			СнятьПризнакПроверкиУпаковки(ПодчиненнаяСтрока);
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтрокаДерева.КоличествоПодчиненныхВсего  > 6
		И СтрокаДерева.КоличествоПодчиненныхНеПроверялось < 4 Тогда
		
		Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		
			Если ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.НеПроверялась") Тогда
				
				ПодчиненнаяСтрока.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует");
				
				УстановитьСтатусОтсутствуетДляПодчиненных(ПодчиненнаяСтрока);
				
			КонецЕсли;
			
			ПроверкаИПодборПродукцииМОТПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковки(СтрокаДерева, Ложь);
			ПроверкаИПодборПродукцииМОТПКлиентСервер.ПересчитатьИтогиПоПроверкеСодержимогоУпаковкиПриИзмененииСтроки(СтрокаДерева);
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтрокаРодитель = СтрокаДерева.ПолучитьРодителя();
	
	Если ВключаяРодителей Тогда
		
		Пока СтрокаРодитель <> Неопределено Цикл
			
			СтрокаРодитель.ИдетПроверкаДаннойУпаковки = Ложь;
			ПроверкаИПодборПродукцииМОТПКлиентСервер.УстановитьИндексКартинкиТипаУпаковки(СтрокаРодитель);
			Элементы.ДеревоМаркированнойПродукции.Свернуть(СтрокаРодитель.ПолучитьИдентификатор());
			СтрокаРодитель = СтрокаРодитель.ПолучитьРодителя();
			
		КонецЦикла;
		
		ИдентификаторТекущейПроверяемойУпаковки = -1;
		
	Иначе
		
		Если СтрокаРодитель = Неопределено Тогда
			ИдентификаторТекущейПроверяемойУпаковки = -1;
		ИначеЕсли СтрокаРодитель = СтрокаПачкиБезБлока(ЭтотОбъект) Тогда
			ИдентификаторТекущейПроверяемойУпаковки = -1;
		ИначеЕсли СтрокаРодитель = СтрокаБлокиБезКоробки(ЭтотОбъект) Тогда
			ИдентификаторТекущейПроверяемойУпаковки = -1;
		Иначе
			ИдентификаторТекущейПроверяемойУпаковки = СтрокаРодитель.ПолучитьИдентификатор();
		КонецЕсли;

	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПризнакПроверкиУпаковки(СтрокаДерева)

	СтрокаРодитель = СтрокаДерева.ПолучитьРодителя();
	
	Пока СтрокаРодитель <> Неопределено Цикл
		
		Если СтрокаРодитель.ИдетПроверкаДаннойУпаковки Тогда
			Прервать;
		Иначе
			СтрокаРодитель.ИдетПроверкаДаннойУпаковки = Истина;
			ПроверкаИПодборПродукцииМОТПКлиентСервер.УстановитьИндексКартинкиТипаУпаковки(СтрокаДерева);
		КонецЕсли;
		
		СтрокаРодитель = СтрокаРодитель.ПолучитьРодителя();
		
	КонецЦикла;
	
	СтрокаДерева.ИдетПроверкаДаннойУпаковки = Истина;
	Модифицированность                      = Истина;
	ПроверкаИПодборПродукцииМОТПКлиентСервер.УстановитьИндексКартинкиТипаУпаковки(СтрокаДерева);
	ИдентификаторТекущейПроверяемойУпаковки = СтрокаДерева.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКонтекстПроверки(НоваяПроверяемаяУпаковка)
	
	Если НоваяПроверяемаяУпаковка = Неопределено Тогда
		ИдентификаторНовойПроверяемойУпаковки = -1;
	Иначе
		ИдентификаторНовойПроверяемойУпаковки = НоваяПроверяемаяУпаковка.ПолучитьИдентификатор();
	КонецЕсли;
	
	Если ИдентификаторНовойПроверяемойУпаковки = ИдентификаторТекущейПроверяемойУпаковки Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяПроверяемаяУпаковка = ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторТекущейПроверяемойУпаковки);
	Если ТекущаяПроверяемаяУпаковка <> Неопределено Тогда
		СнятьПризнакПроверкиУпаковки(ТекущаяПроверяемаяУпаковка, Истина);
	КонецЕсли;
	
	Если НоваяПроверяемаяУпаковка <> Неопределено Тогда
		УстановитьПризнакПроверкиУпаковки(НоваяПроверяемаяУпаковка);
		ИдентификаторТекущейПроверяемойУпаковки = ИдентификаторНовойПроверяемойУпаковки;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Прочее

&НаКлиенте
Процедура ПослеВопросаПриЗакрытииФормы(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		
		ЗакрытьФорму(ДополнительныеПараметры);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(ДополнительныеПараметры = Неопределено) Экспорт
	
	ВыполняетсяЗакрытие = Истина;
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
#Область СтатусПроверки

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииСтатусПроверки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.СтатусПроверки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыПроверкиНаличияПродукцииИС.ВНаличии;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветУспешнойОперацииГосИС);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииСтатусПроверки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.СтатусПроверки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отсутствует;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаГосИС);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииСтатусПроверки.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииНомерСтикераОтложено.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.СтатусПроверки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отложена;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтложенаПриПроверкеГосИС);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииСтатусПроверки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.ТипУпаковки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	
	НепроверяемыеТипыУпаковок = Новый СписокЗначений;
	НепроверяемыеТипыУпаковок.Добавить(Перечисления.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.ПачкиБезБлока);
	НепроверяемыеТипыУпаковок.Добавить(Перечисления.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.БлокиБезКоробки);
	
	ОтборЭлемента.ПравоеЗначение = НепроверяемыеТипыУпаковок;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не требуется>'"));
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииСтатусПроверки.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.СтатусПроверки");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РежимПросмотра");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииСтатусПроверки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.НедопустимыйКодМаркировки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.ПредставлениеПроверкиКодаМаркировки"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаГосИС);
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставление.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.НедопустимыйКодМаркировки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаГосИС);
	
#КонецОбласти

#Область ПроверкаСодержимого

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеПроверкиПодчиненных.Имя);

	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.КоличествоПодчиненныхУпаковок");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.КоличествоПодчиненныхБлоков");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.КоличествоПодчиненныхПачек");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеПроверкиПодчиненных.Имя);

	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.КоличествоПодчиненныхОтложено");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.КоличествоПодчиненныхОтсутствует");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаОтложенаПриПроверкеГосИС);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеПроверкиПодчиненных.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.ТипУпаковки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;

	НепроверяемыеТипыУпаковок = Новый СписокЗначений;
	НепроверяемыеТипыУпаковок.Добавить(Перечисления.ТипыУпаковок.МаркированныйТовар);
	НепроверяемыеТипыУпаковок.Добавить(Перечисления.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.ПачкиБезБлока);
	НепроверяемыеТипыУпаковок.Добавить(Перечисления.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.БлокиБезКоробки);

	ОтборЭлемента.ПравоеЗначение = НепроверяемыеТипыУпаковок;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеПроверкиПодчиненных.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.НеСодержитсяВДанныхДокумента");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеПроверкиПодчиненных.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.КоличествоПодчиненныхОтсутствует");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Больше;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаГосИС);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеПроверкиПодчиненных.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.ВсяУпаковкаПроверена");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветУспешнойОперацииГосИС);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииКоличествоПодчиненныхНеПроверялось.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииКоличествоПодчиненныхВНаличии.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииКоличествоПодчиненныхОтсутствует.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииКоличествоПодчиненныхНеЧислилось.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииКоличествоПодчиненныхОтложено.Имя);
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииКоличествоПодчиненныхВсего.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.ТипУпаковки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыУпаковок.МаркированныйТовар;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаНеТребуетВниманияЕГАИС);
	
#КонецОбласти

#Область СодержимоеУпаковки

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеСодержимоеУпаковки.Имя);

	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.КоличествоПодчиненныхУпаковок");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.КоличествоПодчиненныхБлоков");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.КоличествоПодчиненныхПачек");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = 0;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.ТипУпаковки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ТипыУпаковок.МаркированныйТовар;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.ИдетПроверкаДаннойУпаковки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаНеТребуетВниманияГосИС);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеСодержимоеУпаковки.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.ИдетПроверкаДаннойУпаковки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(,,Истина));

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииПредставлениеСодержимоеУпаковки.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.ТребуетсяПеремаркировка");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаГосИС);
	
#КонецОбласти

#Область НомерСтикераОтолжена

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииНомерСтикераОтложено.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.СтатусПроверки");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отложена;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукцииНомерСтикераОтложено.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.НомерСтикераОтложено");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<не помечена>'"));

#КонецОбласти

#Область Отборы

	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоМаркированнойПродукции.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("УстановленОтбор");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоМаркированнойПродукции.НеСоответствуетОтбору");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

#КонецОбласти

#Область ПодобраннаяПродукция
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеХарактеристикНоменклатуры(
		ЭтотОбъект,
		"ПодобраннаяТабачнаяПродукцияХарактеристика",
		"ПодобраннаяТабачнаяПродукция.ХарактеристикиИспользуются");
	
	СобытияФормИСПереопределяемый.УстановитьУсловноеОформлениеСерийНоменклатуры(
		ЭтотОбъект,
		"ПодобраннаяТабачнаяПродукцияСерия",
		"ПодобраннаяТабачнаяПродукция.СтатусУказанияСерий",
		"ПодобраннаяТабачнаяПродукция.ТипНоменклатуры");
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодобраннаяТабачнаяПродукцияНоменклатура.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПодобраннаяТабачнаяПродукция.Номенклатура");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Новый ПолеКомпоновкиДанных("ПодобраннаяТабачнаяПродукция.ПредставлениеНоменклатуры"));
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПроблемаГосИС);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодобраннаяТабачнаяПродукцияНоменклатура.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПодобраннаяТабачнаяПродукция.НоменклатураСопоставлена");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ПодобраннаяТабачнаяПродукцияХарактеристика.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПодобраннаяТабачнаяПродукция.НоменклатураСопоставлена");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ПодобраннаяТабачнаяПродукция.ХарактеристикиИспользуются");
	ОтборЭлемента.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	
#КонецОбласти

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СпозиционироватьсяНаСтрокеДерева(Форма, СтрокаДерева)
	
	Форма.Элементы.ДеревоМаркированнойПродукции.ТекущаяСтрока = СтрокаДерева.ПолучитьИдентификатор();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьИзСоответствияШтрихкодовДляКоллекции(КоллекцияСтрокДерева)
	
	Для Каждого СтрокаДерева Из КоллекцияСтрокДерева Цикл
		
		СоответствиеШтрихкодовСтрокДерева.Удалить(СтрокаДерева.Штрихкод);
		УдалитьИзСоответствияШтрихкодовДляКоллекции(СтрокаДерева.ПолучитьЭлементы());
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УправлениеВидимостьюКомандУпаковок(Форма)
	
	КомандыВидимы = Форма.ДетализацияСтруктурыХранения <> ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки");
	КомандыВидимы = КомандыВидимы И Ложь;
	
	Элементы = Форма.Элементы;
	
	Элементы.ДеревоМаркированнойПродукцииДобавитьПустуюКоробку.Видимость = КомандыВидимы;
	Элементы.ДеревоМаркированнойПродукцииМаркироватьУпаковку.Видимость   = КомандыВидимы;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция УпаковкаНеСодержитсяВДанныхДокумента(ТекущаяСтрокаДерева, Детализация)
	
	Если Детализация = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки") Тогда
		
		Возврат Ложь;
		
	ИначеЕсли ТекущаяСтрокаДерева = Неопределено Тогда
		
		Возврат Истина;
		
	ИначеЕсли ТекущаяСтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.ПачкиБезБлока")
		ИЛИ ТекущаяСтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.БлокиБезКоробки") Тогда
		
		Возврат Истина;
		
	ИначеЕсли ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ТекущаяСтрокаДерева.ТипУпаковки) Тогда
		
		Возврат ТекущаяСтрокаДерева.НеСодержитсяВДанныхДокумента;
		
	Иначе
		
		Возврат УпаковкаНеСодержитсяВДанныхДокумента(ТекущаяСтрокаДерева.ПолучитьРодителя(), Детализация);
		
	КонецЕсли;

КонецФункции

&НаСервереБезКонтекста
Функция ЕстьПравоДобавлениеСерий()
	
	Возврат ПроверкаИПодборПродукцииМОТП.ЕстьПравоДобавлениеСерий();
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПродукцияСоответствуетДокументуОснованию(Форма, ПроверяемаяСтрока)

	СтрокаТабачнойПродукцииНайдена = Ложь;
	
	Для Каждого СтрокаТабачнойПродукции Из Форма.ПодобраннаяТабачнаяПродукция Цикл
		Если НоменклатурыСтрокСовпадают(СтрокаТабачнойПродукции, ПроверяемаяСтрока) Тогда
			СтрокаТабачнойПродукцииНайдена = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокаТабачнойПродукцииНайдена Тогда
		Возврат Истина;
	ИначеЕсли Форма.КонтролироватьСканируемуюПродукциюПоДокументуОснованию Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область РаботаСТСД

&НаКлиенте
Процедура ЗагрузитьИзТСДЗавершение(РезультатВыполнения, ДополнительныеПараметры) Экспорт
	
	СобытияФормИСКлиентПереопределяемый.ПриПолученииДанныхИзТСД(
		Новый ОписаниеОповещения("Подключаемый_ПолученыДанныеИзТСД", ЭтотОбъект),
		ЭтотОбъект, РезультатВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолученыДанныеИзТСД(ТаблицаТоваров, ДополнительныеПараметры) Экспорт
		
	МассивСчитанныхДанных = ТаблицаТоваров;
	
	Если МассивСчитанныхДанных.Количество() = 0 Тогда
		
		ПоказатьПредупреждение( ,НСтр("ru = 'В полученных данных не содержится информации о считанных штриховых кодах'"));
		Возврат;
		
	КонецЕсли;
	
	ЗагрузкаДанныхТСД = РезультатПроверкиДанныхТСД(МассивСчитанныхДанных,
		СоответствиеШтрихкодовСтрокДерева,
		ПараметрыСканированияКодовМаркировки());
	
	Если ЗагрузкаДанныхТСД.ЕстьОшибкиВДеревеУпаковок Тогда
	
		ПараметрыОткрытияФормы = ШтрихкодированиеИСКлиент.ПараметрыОткрытияФормыНевозможностиДобавленияОтсканированного();
		ПараметрыОткрытияФормы.АдресДереваУпаковок = ЗагрузкаДанныхТСД.АдресДереваУпаковок;
			
		ШтрихкодированиеМОТПКлиент.ОткрытьФормуНевозможностиДобавленияОтсканированного(ЭтотОбъект, ПараметрыОткрытияФормы);
		
	ИначеЕсли ЗагрузкаДанныхТСД.ЕстьОшибки Тогда
		
		ПоказатьПредупреждение(, ЗагрузкаДанныхТСД.ТекстОшибки);
		
	Иначе
		
		ОбработатьПолученныеДанныеТСД(Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьПолученныеДанныеТСД(Результат)
	
	СледующаяОперация = СледующаяОперацияОбработкиДанныхТСД(Результат);
	
	ВыполнитьСледующуюОперациюОбрабткиДанныхТСД(СледующаяОперация);
	
КонецПроцедуры

&НаКлиенте
Функция СледующаяОперацияОбработкиДанныхТСД(Результат)

	СледующаяОперация = Неопределено;
	
	Если ЗагрузкаДанныхТСД.ТекущаяОперация = "" Тогда
	
		Если ЗагрузкаДанныхТСД.Упаковки.Количество() = 1 Тогда
			
			Если ЗагрузкаДанныхТСД.МаркируемаяПродукция.Количество() > 0 Тогда
				СледующаяОперация = "ЕдинственнаяУпаковка";
			Иначе
				СледующаяОперация = "Упаковка";
			КонецЕсли;
			
		ИначеЕсли ЗагрузкаДанныхТСД.Упаковки.Количество() > 1 Тогда
			
			Если ЗначениеЗаполнено(ЗагрузкаДанныхТСД.Упаковки[0].ШтриховойКод) Тогда
				
				СледующаяОперация = "УпаковкаССодержимым";
				
			Иначе
				
				ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента = 1;
				СледующаяОперация = "Упаковка";
				
			КонецЕсли;
			
		ИначеЕсли ЗагрузкаДанныхТСД.МаркируемаяПродукция.Количество() > 0 Тогда
			
			СледующаяОперация = "МаркируемаяПродукция";
			
		ИначеЕсли ЗагрузкаДанныхТСД.ПартионнаяАлкогольнаяПродукция.Количество() > 0 Тогда
			
			СледующаяОперация = "ПартионнаяАлкогольнаяПродукция";
			
		КонецЕсли;
		
		ШтрихкодированиеИСКлиент.ОповеститьОНачалеОбработкиДанныхТСД();
		
	ИначеЕсли ЗагрузкаДанныхТСД.ТекущаяОперация = "ЕдинственнаяУпаковка" Тогда
		
		ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента = 0;
		
		Если Результат = Истина Тогда
			
			Если ЗагрузкаДанныхТСД.МаркируемаяПродукция.Количество() > 0 Тогда
				
				СледующаяОперация = "МаркируемаяПродукция";
				
			КонецЕсли;
			
		Иначе
			
			СледующаяОперация = "ПартионнаяАлкогольнаяПродукция";
			
		КонецЕсли;
		
	ИначеЕсли ЗагрузкаДанныхТСД.ТекущаяОперация = "УпаковкаССодержимым" Тогда
		
		ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента = 1;
		
		Если Результат = Истина Тогда
			
			СледующаяОперация = "Упаковка";
			
		Иначе
			
			СледующаяОперация = "ПартионнаяАлкогольнаяПродукция";
			
		КонецЕсли;
		
	ИначеЕсли ЗагрузкаДанныхТСД.ТекущаяОперация = "Упаковка" Тогда
		
		Если ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента <> ЗагрузкаДанныхТСД.Упаковки.Количество() Тогда
			
			СледующаяОперация = "Упаковка";
			
		Иначе
			
			ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента = 0;
			СледующаяОперация = "ПартионнаяАлкогольнаяПродукция";
			
		КонецЕсли;
			
	ИначеЕсли ЗагрузкаДанныхТСД.ТекущаяОперация = "МаркируемаяПродукция" Тогда
		
		Если ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента <> ЗагрузкаДанныхТСД.МаркируемаяПродукция.Количество() Тогда
			
			СледующаяОперация = "МаркируемаяПродукция";
			
		Иначе
			
			ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента = 0;
			СледующаяОперация = "ПартионнаяАлкогольнаяПродукция";
			
		КонецЕсли;
		
	ИначеЕсли  ЗагрузкаДанныхТСД.ТекущаяОперация = "ПартионнаяАлкогольнаяПродукция" Тогда
		
		Если ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента <> ЗагрузкаДанныхТСД.ПартионнаяАлкогольнаяПродукция.Количество() Тогда
			
			СледующаяОперация = "ПартионнаяАлкогольнаяПродукция";
			
		Иначе
			
			ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента = 0;
			СледующаяОперация = "ОкончаниеПроверки";
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СледующаяОперация;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьСледующуюОперациюОбрабткиДанныхТСД(СледующаяОперация)

	ЗагрузкаДанныхТСД.ТекущаяОперация = СледующаяОперация;
	
	Если СледующаяОперация = "ЕдинственнаяУпаковка" Тогда
	
		ДанныеУпаковки = ЗагрузкаДанныхТСД.Упаковки[0];
		
		ЗагрузкаДанныхТСД.ТекущаяОперация        = "ЕдинственнаяУпаковка";
		ЗагрузкаДанныхТСД.ОбрабатываемыйШтрихкод = ДанныеУпаковки.ШтриховойКод;
		
		ОбработатьОтсканированныйШтрихкод(ДанныеУпаковки.ДанныеШтрихКода, Истина);
		
	ИначеЕсли СледующаяОперация = "УпаковкаССодержимым" Тогда
		
		ДанныеУпаковки = ЗагрузкаДанныхТСД.Упаковки[0];
		
		ЗагрузкаДанныхТСД.ТекущаяОперация  = "УпаковкаССодержимым";
		ЗагрузкаДанныхТСД.ОбрабатываемыйШтрихкод = ДанныеУпаковки.ШтриховойКод;
		
		ОбработатьОтсканированныйШтрихкод(ДанныеУпаковки.ДанныеШтрихКода, Истина);
		
	ИначеЕсли СледующаяОперация = "Упаковка" Тогда
		
		ЗагрузкаДанныхТСД.ТекущаяОперация  = "Упаковка";
		
		Если ЗагрузкаДанныхТСД.Упаковки.Количество() <> ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента Тогда
			
			ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента = ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента + 1;
			ОбработатьОтсканированныйШтрихкод(ЗагрузкаДанныхТСД.Упаковки[ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента - 1].ДанныеШтрихКода, Истина);
			
		КонецЕсли;
		
	ИначеЕсли СледующаяОперация = "МаркируемаяПродукция" Тогда 
		
		Если ЗагрузкаДанныхТСД.МаркируемаяПродукция.Количество() <> ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента Тогда
			
			ПараметрыСканирования = ПараметрыСканированияКодовМаркировки();
			ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента = ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента + 1;
			ДанныеШтрихКода = ЗагрузкаДанныхТСД.МаркируемаяПродукция[ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента - 1].ДанныеШтрихКода;
			
			УчитыватьДанныеВыбора = Ложь;
			ДанныеВыбора          = ПараметрыСканирования.ДанныеВыбораПоМаркируемойПродукции;
			
			Если Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура)
				И ПараметрыСканирования.ЗапрашиватьНоменклатуру
				И (ДанныеШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.DataMatrix")
					Или ДанныеШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.PDF417")) Тогда
				
				Если ДанныеВыбора <> Неопределено Тогда

					
					Если ДанныеШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.PDF417")
						И ДанныеВыбора.ТипШтрихКода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.PDF417")
						И ЗначениеЗаполнено(ДанныеВыбора.АлкогольнаяПродукция)
						И ДанныеВыбора.АлкогольнаяПродукция = ДанныеШтрихкода.АлкогольнаяПродукция
						И ЗначениеЗаполнено(ДанныеВыбора.Номенклатура) Тогда
						
						УчитыватьДанныеВыбора = Истина;
					
					ИначеЕсли ДанныеШтрихкода.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.DataMatrix")
						И ДанныеВыбора.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.DataMatrix") Тогда
					
						УчитыватьДанныеВыбора = Истина;
						
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли Не ЗначениеЗаполнено(ДанныеШтрихкода.АлкогольнаяПродукция)
				И ДанныеШтрихкода.ТипШтрихкода =ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.DataMatrix") Тогда
			
				Если ДанныеВыбора <> Неопределено
					И ДанныеВыбора.ТипШтрихкода = ПредопределенноеЗначение("Перечисление.ТипыШтрихкодов.DataMatrix") Тогда
					
					УчитыватьДанныеВыбора  = Истина;
					
				КонецЕсли;
			
			КонецЕсли;
			
			Если УчитыватьДанныеВыбора Тогда
				
				ДанныеШтрихкода.АлкогольнаяПродукция = ДанныеВыбора.АлкогольнаяПродукция;
				ДанныеШтрихкода.Номенклатура         = ДанныеВыбора.Номенклатура;
				ДанныеШтрихкода.Характеристика       = ДанныеВыбора.Характеристика;
				ДанныеШтрихкода.Серия                = ДанныеВыбора.Серия;
				
			КонецЕсли;
				
			Если Не ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ДанныеШтрихКода.ТипУпаковки)
				И ПараметрыСканирования.ЗапрашиватьНоменклатуру
				И Не ЗначениеЗаполнено(ДанныеШтрихкода.Номенклатура) Тогда
				
					ПараметрыВыбораНоменклатуры = Новый Структура;
					ПараметрыВыбораНоменклатуры.Вставить("АлкогольнаяПродукция",          ДанныеШтрихкода.АлкогольнаяПродукция);
					ПараметрыВыбораНоменклатуры.Вставить("Номенклатура",                  ДанныеШтрихкода.Номенклатура);
					ПараметрыВыбораНоменклатуры.Вставить("Характеристика",                ДанныеШтрихкода.Характеристика);
					ПараметрыВыбораНоменклатуры.Вставить("ТипШтрихкода",                  ДанныеШтрихКода.ТипШтрихкода);
					ПараметрыВыбораНоменклатуры.Вставить("КодАлкогольнойПродукции",       ДанныеШтрихКода.КодАлкогольнойПродукции);
					ПараметрыВыбораНоменклатуры.Вставить("АдресДанныхДокументаОснования", ЗагрузкаДанныхТСД.АдресДанныхДокументаОснования);
					ПараметрыВыбораНоменклатуры.Вставить("ДокументОснование",             ЗагрузкаДанныхТСД.ДокументОснование);
					ПараметрыВыбораНоменклатуры.Вставить("Штрихкод",                      ДанныеШтрихкода.Штрихкод);
					
					ДополнительныеПараметры = Новый Структура;
					ДополнительныеПараметры.Вставить("ДанныеШтрихКода", ДанныеШтрихКода);
					
					ОповещениеОВыборе = Новый ОписаниеОповещения("ВыборНоменклатурыЗавершение", ЭтотОбъект, ДополнительныеПараметры);
					
					ОткрытьФорму("Обработка.ПроверкаИПодборТабачнойПродукцииМОТП.Форма.ФормаВыбораСерии",
					             ПараметрыВыбораНоменклатуры,
					             ЭтотОбъект,,,,
					             ОповещениеОВыборе,
					             РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
				


			Иначе
				
				ОбработатьОтсканированныйШтрихкод(ДанныеШтрихКода , Истина);
				
			КонецЕсли;
		
		КонецЕсли;
		
	ИначеЕсли СледующаяОперация = "ПартионнаяАлкогольнаяПродукция" Тогда
		
		Если ЗагрузкаДанныхТСД.ПартионнаяАлкогольнаяПродукция.Количество() = 0 Тогда
			
			ОбработатьПолученныеДанныеТСД(Истина);
		
		ИначеЕсли ЗагрузкаДанныхТСД.ПартионнаяАлкогольнаяПродукция.Количество() <> ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента Тогда
			ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента = ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента + 1;
			ОбработатьОтсканированныйШтрихкод(ЗагрузкаДанныхТСД.ПартионнаяАлкогольнаяПродукция[ЗагрузкаДанныхТСД.ИндексОбрабатываемогоЭлемента - 1].ДанныеШтрихКода, Истина);
		КонецЕсли;
		
	ИначеЕсли СледующаяОперация = "ОкончаниеПроверки" Тогда
		
		ШтрихкодированиеИСКлиент.ОповеститьОбОкончанииОбработкиДанныхТСД();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыборНоменклатурыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		
		ОбработатьПолученныеДанныеТСД(Ложь);
		
	Иначе
		
		ДанныеШтрихкода = ДополнительныеПараметры.ДанныеШтрихкода;
		ДанныеШтрихкода.Номенклатура              = Результат.Номенклатура;
		ДанныеШтрихкода.Характеристика            = Результат.Характеристика;
		ДанныеШтрихкода.Серия                     = Результат.Серия;
		ДанныеШтрихкода.ДополнительныеПараметры   = Результат.ДополнительныеПараметры;
		
		ОбработатьОтсканированныйШтрихкод(ДанныеШтрихКода , Истина);
		
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Функция РезультатПроверкиДанныхТСД(МассивСчитанныхДанных, СоответствиеШтрихкодовСтрокДерева, ПараметрыСканирования)

	ПараметрыПроверки = Новый Структура;
	ПараметрыПроверки.Вставить("ЭтоФормаДокумента",                  Ложь);
	ПараметрыПроверки.Вставить("Форма",                              ЭтотОбъект);
	ПараметрыПроверки.Вставить("СоответствиеШтрихкодовСтрокДерева",  СоответствиеШтрихкодовСтрокДерева);
	ПараметрыПроверки.Вставить("ПараметрыСканирования",              ПараметрыСканирования);
	ПараметрыПроверки.Вставить("ДетализацияСтруктурыХранения",       ДетализацияСтруктурыХранения);
	ПараметрыПроверки.Вставить("Организация",                        Организация);
	
	Возврат ИнтеграцияЕГАИС.РезультатПроверкиДанныхТСД(МассивСчитанныхДанных, ПараметрыПроверки);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаТекущейПроверяемойУпаковкиТСД(Форма, ЭтоУпаковка, ЭтоУпаковкаБлока)
	
	Если Форма.ЗагрузкаДанныхТСД.ИдентификаторУпаковки = -1 Тогда
		
		Если НЕ ЭтоУпаковка Тогда
			Возврат СтрокаПачкиБезБлока(Форма);
		ИначеЕсли ЭтоУпаковкаБлока Тогда
			Возврат СтрокаБлокиБезКоробки(Форма);
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	Иначе
		
		Если НЕ ЭтоУпаковка Тогда
			Возврат Форма.ДеревоМаркированнойПродукции.НайтиПоИдентификатору(Форма.ИдентификаторТекущейПроверяемойУпаковки);
		ИначеЕсли ЭтоУпаковкаБлока Тогда
			Если Форма.ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Полная")
				Или Форма.ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.КоробкиСБлоками") Тогда
				Возврат Форма.ДеревоМаркированнойПродукции.НайтиПоИдентификатору(Форма.ИдентификаторТекущейПроверяемойУпаковки);
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		Иначе
			Если Форма.ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.БлокиСПачками")
				Или Форма.ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки") Тогда
				Возврат Неопределено;
			Иначе
				Возврат Форма.ДеревоМаркированнойПродукции.НайтиПоИдентификатору(Форма.ИдентификаторТекущейПроверяемойУпаковки);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СохраненныйВыборПоТабачнойПродукции

&НаКлиенте
Процедура ПредставлениеСохраненногоВыбораОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	АкцизныеМаркиЕГАИСКлиент.ПредставлениеСохраненногоВыбораОбработкаНавигационнойСсылки(ЭтотОбъект, НавигационнаяСсылкаФорматированнойСтроки);
	
КонецПроцедуры

#КонецОбласти

#Область Настройки

&НаКлиентеНаСервереБезКонтекста
Процедура СформироватьПредставлениеНастроек(Форма)
	
	Форма.ПредставлениеНастроек = Новый ФорматированнаяСтрока(ПредставлениеУровняДетализации(Форма), " " , ПредставлениеРежимаПроверки(Форма));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеРежимаПроверки(Форма)
	
	Если Форма.ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки") Тогда
		Возврат "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Форма.РежимПроверки) Тогда
		Форма.РежимПроверки = ПредопределенноеЗначение("Перечисление.ВариантыПроверкиПоступившейПродукцииИС.ОставлятьТамГдеНайдены");
	КонецЕсли;
	
	ТекстВступление = НСтр("ru = 'При выявлении некорректного содержимого'");
	
	Если Форма.РежимПроверки = ПредопределенноеЗначение("Перечисление.ВариантыПроверкиПоступившейПродукцииИС.ОставлятьТамГдеНайдены") Тогда
		СтрокаДействие = НСтр("ru = 'оставлять там, где найдено.'");
	ИначеЕсли Форма.РежимПроверки = ПредопределенноеЗначение("Перечисление.ВариантыПроверкиПоступившейПродукцииИС.ПеремещатьТудаГдеДолжныБыть") Тогда
		СтрокаДействие = НСтр("ru = 'перемещать в упаковку, где должно находиться.'");
	КонецЕсли;
	
	Если Не Форма.РежимПросмотра Тогда
		СтрокаДействие = Новый ФорматированнаяСтрока(СтрокаДействие,, Форма.ЦветГиперссылки,, "ИзменитьРежимПроверки");
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(ТекстВступление, " ", СтрокаДействие);
	
КонецФункции

&НаКлиенте
Процедура ПослеИзмененияРежимаПроверки(Результат, ДополнительныеПараметры) Экспорт

	Если ЗначениеЗаполнено(Результат) 
		И Результат <> РежимПроверки Тогда
		
		Модифицированность = Истина;
		РежимПроверки = Результат;
		СформироватьПредставлениеНастроек(ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкиФормы(СохраняемыеНастройки)

	ОбщегоНазначения.ХранилищеНастроекДанныхФормСохранить(
		"Обработка.ПроверкаИПодборТабачнойПродукцииМОТП.Форма.ПроверкаИПодбор",
		"", СохраняемыеНастройки);
	
КонецПроцедуры

#КонецОбласти

#Область ДетализацияСтруктурыХранения

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеУровняДетализации(Форма)
	
	Если Не ЗначениеЗаполнено(Форма.ДетализацияСтруктурыХранения) Тогда
		Форма.ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Полная");
	КонецЕсли;
	
	ТекстВступление = НСтр("ru = 'Детализация'");
	СтрокаДействие  = НРег(Строка(Форма.ДетализацияСтруктурыХранения));
	
	Если Не Форма.РежимПросмотра Тогда
		СтрокаДействие = Новый ФорматированнаяСтрока(СтрокаДействие,, Форма.ЦветГиперссылки,, "ИзменитьДетализацию");
	КонецЕсли;
	
	Возврат Новый ФорматированнаяСтрока(ТекстВступление, ": ", СтрокаДействие, ".");
	
КонецФункции

&НаКлиенте
Процедура ПослеИзмененияРежимаДетализации(Результат, ДополнительныеПараметры) Экспорт

	Если ЗначениеЗаполнено(Результат)
		И Результат <> КодВозвратаДиалога.Отмена 
		И Результат <> ДетализацияСтруктурыХранения Тогда
		
		Модифицированность = Истина;
		
		ИзменитьРежимДетализации(Результат);
		УправлениеДоступностьюКомандыРазобратьУпаковку();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРежимДетализации(НовыйРежимДетализации)
	
	ТребуетсяПересчет = Ложь;
	
	Если ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Полная")
		И НовыйРежимДетализации = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.КоробкиСБлоками") Тогда
		
		ТребуетсяПересчет = Истина;
		ПовыситьУровеньДетализацииДоКоробокСБлоками();
		
	ИначеЕсли (ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Полная")
		ИЛИ ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.КоробкиСБлоками"))
		И НовыйРежимДетализации = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.БлокиСПачками") Тогда
		
		ТребуетсяПересчет = Истина;
		ПонизитьУровеньДетализацииДоБлоковСПачками();
		
	ИначеЕсли (ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Полная")
		Или ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.КоробкиСБлоками")
		Или ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.БлокиСПачками"))
		И НовыйРежимДетализации = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки") Тогда
		
		ТребуетсяПересчет = Истина;
		ПонизитьУровеньДетализацииДоПачки();
		ИдентификаторТекущейПроверяемойУпаковки = - 1;
		
	ИначеЕсли ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки")
		И НовыйРежимДетализации <> ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки") Тогда
		
		ТребуетсяПересчет = Истина;
		УстановитьУровеньДетализацииВышеЧемПачки(НовыйРежимДетализации);
		
	ИначеЕсли ДетализацияСтруктурыХранения = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.БлокиСПачками")
		И (НовыйРежимДетализации = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Полная")
		ИЛИ НовыйРежимДетализации = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.КоробкиСБлоками")) Тогда
		
		ТребуетсяПересчет = Истина;
		УстановитьУровеньДетализацииВышеЧемБлокиСПачками(НовыйРежимДетализации);
		
	КонецЕсли;
	
	ДетализацияСтруктурыХранения = НовыйРежимДетализации;
	
	Если ТребуетсяПересчет Тогда
		СоответствиеШтрихкодовСтрокДерева = Новый Соответствие;
		ДополнитьСоответствиеШтрихкодовСтрокДереваДляКоллекции(
			ДеревоМаркированнойПродукции.ПолучитьЭлементы(),
			СоответствиеШтрихкодовСтрокДерева);
		ПересчитатьВсеИтогиФормыНаКлиенте();
	КонецЕсли;
	
	СохраняемыеНастройки = Новый Структура;
	
	Если РежимПодбораСуществующихУпаковок Тогда
		СохраняемыеНастройки.Вставить("ДетализацияСтруктурыХранения", ДетализацияСтруктурыХранения);
	Иначе
		СохраняемыеНастройки.Вставить("ДетализацияСтруктурыХраненияПриобретение", ДетализацияСтруктурыХранения);
	КонецЕсли;
	
	СохранитьНастройкиФормы(СохраняемыеНастройки);
	
	УправлениеВидимостьюКомандУпаковок(ЭтотОбъект);
	СформироватьПредставлениеНастроек(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПовыситьУровеньДетализацииДоКоробокСБлоками()
	
	ЭлементыДерева  = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
	УдаляемыеСтроки = Новый Массив;
	
	Для Каждого СтрокаДерева Из ЭлементыДерева Цикл
		Если СтрокаДерева.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.ПачкиБезБлока") Тогда
			ПовыситьУровеньДетализацииУпаковкиДоКоробокСБлоками(СтрокаДерева, УдаляемыеСтроки);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаДерева Из УдаляемыеСтроки Цикл
		Родитель = СтрокаДерева.ПолучитьРодителя();
		Если Родитель = Неопределено Тогда
			ЭлементыДерева.Удалить(СтрокаДерева);
		Иначе
			Родитель.ПолучитьЭлементы().Удалить(СтрокаДерева);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПовыситьУровеньДетализацииУпаковкиДоКоробокСБлоками(СтрокаДерева, УдаляемыеСтроки)
	
	Если СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
		УдаляемыеСтроки.Добавить(СтрокаДерева);
	Иначе
		Если ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаБлока(СтрокаДерева) Тогда
			СтрокаДерева.НеПересчитыватьКоличествоПачек = Истина;
		КонецЕсли;
		
		Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
			ПовыситьУровеньДетализацииУпаковкиДоКоробокСБлоками(ПодчиненнаяСтрока, УдаляемыеСтроки);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПонизитьУровеньДетализацииДоБлоковСПачками()

	ЭлементыДерева  = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
	УдаляемыеСтроки = Новый Массив;
	
	Для Каждого СтрокаДерева Из ЭлементыДерева Цикл
		Если СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.БлокиБезКоробки")
			ИЛИ (ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки)
			И НЕ ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаБлока(СтрокаДерева)) Тогда
			ПонизитьУровеньДетализацииУпаковкиДоБлокаСПачками(СтрокаДерева, УдаляемыеСтроки);
		КонецЕсли;
		
		Если ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаБлока(СтрокаДерева) Тогда
			СтрокаДерева.НеПересчитыватьКоличествоПачек = НЕ СтрокаДерева.ПолучитьЭлементы().Количество();
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаДерева Из УдаляемыеСтроки Цикл
		Родитель = СтрокаДерева.ПолучитьРодителя();
		Если Родитель = Неопределено Тогда
			ЭлементыДерева.Удалить(СтрокаДерева);
		Иначе
			Родитель.ПолучитьЭлементы().Удалить(СтрокаДерева);
		КонецЕсли;
	КонецЦикла;
	
	Если ИдентификаторТекущейПроверяемойУпаковки <> - 1 Тогда
		Если ДеревоМаркированнойПродукции.НайтиПоИдентификатору(ИдентификаторТекущейПроверяемойУпаковки) = Неопределено Тогда
			ИдентификаторТекущейПроверяемойУпаковки = -1;
		КонецЕсли;
	КонецЕсли;
	
	ИдентификаторСтрокиБлокиБезКоробки = -1;

КонецПроцедуры

&НаКлиенте
Процедура ПонизитьУровеньДетализацииУпаковкиДоБлокаСПачками(СтрокаДерева, УдаляемыеСтроки)

	ЕстьВложенныеУпаковки = Ложь;
	ЕстьВложенныеПачки    = Ложь;
	
	ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
	
	Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ПодчиненнаяСтрока.ТипУпаковки) Тогда
			ЕстьВложенныеУпаковки = Истина;
			ПонизитьУровеньДетализацииУпаковкиДоБлокаСПачками(ПодчиненнаяСтрока, УдаляемыеСтроки);
		ИначеЕсли ПодчиненнаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
			ЕстьВложенныеПачки = Истина;
		КонецЕсли;
	КонецЦикла;
	
	РодительскаяСтрока = СтрокаДерева.ПолучитьРодителя();
	
	Если ЕстьВложенныеПачки И ЕстьВложенныеУпаковки Тогда
		
		СтрокаПачкиБезБлока   = СтрокаПачкиБезБлока(ЭтотОбъект);
		ЭлементыПачкиБезБлока = СтрокаПачкиБезБлока.ПолучитьЭлементы();
		
		Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
			Если ПодчиненнаяСтрока.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
				СтрокаСПачкой = ЭлементыПачкиБезБлока.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСПачкой, ПодчиненнаяСтрока);
			КонецЕсли;
		КонецЦикла;
		
		УдаляемыеСтроки.Добавить(СтрокаДерева);
	
	ИначеЕсли ЕстьВложенныеПачки Тогда
		
		Если РодительскаяСтрока <> Неопределено Тогда
			НоваяСтрока = ДеревоМаркированнойПродукции.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
			НоваяСтрока.НеПересчитыватьКоличествоПачек = Ложь;
			
			Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
				СтрокаСПачкой = НоваяСтрока.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСПачкой,ПодчиненнаяСтрока);
			КонецЦикла;
			
			УдаляемыеСтроки.Добавить(СтрокаДерева);
		КонецЕсли;
		
	ИначеЕсли ЕстьВложенныеУпаковки
		ИЛИ СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.БлокиБезКоробки") Тогда
		
		УдаляемыеСтроки.Добавить(СтрокаДерева);
		
	ИначеЕсли РодительскаяСтрока <> Неопределено Тогда

		НоваяСтрока = ДеревоМаркированнойПродукции.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		НоваяСтрока.НеПересчитыватьКоличествоПачек = Истина;
		
		УдаляемыеСтроки.Добавить(СтрокаДерева);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПонизитьУровеньДетализацииДоПачки()
	
	ЭлементыДерева  = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
	УдаляемыеСтроки = Новый Массив;
	
	Для Каждого СтрокаДерева Из ЭлементыДерева Цикл
		Если СтрокаДерева.ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
			УдаляемыеСтроки.Добавить(СтрокаДерева);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаДерева Из УдаляемыеСтроки Цикл
		ПонизитьУровеньДетализацииУпаковкиДоПачки(СтрокаДерева, ЭлементыДерева);
		ЭлементыДерева.Удалить(СтрокаДерева);
	КонецЦикла;
	
	ИдентификаторСтрокиБлокиБезКоробки = -1;
	ИдентификаторСтрокиПачкиБезБлока   = -1;
	
КонецПроцедуры

&НаКлиенте
Процедура ПонизитьУровеньДетализацииУпаковкиДоПачки(СтрокаДерева, ЭлементыДерева)
	
	ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
	
	Для Каждого ПодчиненнаяСтрока Из ПодчиненныеСтроки Цикл
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ПодчиненнаяСтрока.ТипУпаковки) Тогда
			ПонизитьУровеньДетализацииУпаковкиДоПачки(ПодчиненнаяСтрока, ЭлементыДерева);
		Иначе
			НоваяСтрока = ЭлементыДерева.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПодчиненнаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	ПодчиненныеСтроки.Очистить();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьУровеньДетализацииВышеЧемПачки(НовыйРежимДетализации)
	
	ЭлементыДерева = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
	ПачкиКПереносу = Новый Массив;
	
	Для Каждого СтрокаСПачкой Из ЭлементыДерева Цикл
		ПачкиКПереносу.Добавить(СтрокаСПачкой);
	КонецЦикла;
	
	СтрокаПачкиБезБлока   = ДобавленнаяСтрокаПачкиБезБлока();
	ЭлементыПачкиБезБлока = СтрокаПачкиБезБлока.ПолучитьЭлементы();
	
	Для Каждого ПачкаКПереносу Из ПачкиКПереносу Цикл
		НоваяСтрока = ЭлементыПачкиБезБлока.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПачкаКПереносу);
		
		ЭлементыДерева.Удалить(ПачкаКПереносу);
	КонецЦикла;
	
	Если НовыйРежимДетализации = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Полная")
	 ИЛИ НовыйРежимДетализации = ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.КоробкиСБлоками") Тогда
		ДобавленнаяСтрокаБлокиБезКоробки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьУровеньДетализацииВышеЧемБлокиСПачками(НовыйРежимДетализации)
	
	ЭлементыДерева = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
	БлокиКПереносу = Новый Массив;
	
	Для Каждого СтрокаДерева Из ЭлементыДерева Цикл
		Если ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаБлока(СтрокаДерева) Тогда
			БлокиКПереносу.Добавить(СтрокаДерева);
		КонецЕсли;
	КонецЦикла;
	
	СтрокаБлокиБезКоробки   = ДобавленнаяСтрокаБлокиБезКоробки();
	ЭлементыБлокиБезКоробки = СтрокаБлокиБезКоробки.ПолучитьЭлементы();
	
	Для Каждого БлокКПереносу Из БлокиКПереносу Цикл
		НоваяСтрока = ЭлементыБлокиБезКоробки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, БлокКПереносу);
		
		Для Каждого ПачкаКПереносу Из БлокКПереносу.ПолучитьЭлементы() Цикл
			Если НовыйРежимДетализации <> ПредопределенноеЗначение("Перечисление.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.КоробкиСБлоками") Тогда
				СтрокаСПачкой = НоваяСтрока.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаСПачкой, ПачкаКПереносу);
			КонецЕсли;
		КонецЦикла;
		
		ЭлементыДерева.Удалить(БлокКПереносу);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ДобавленнаяСтрокаПачкиБезБлока()

	НоваяСтрока = ДеревоМаркированнойПродукции.ПолучитьЭлементы().Вставить(0);
	
	ПроверкаИПодборПродукцииМОТПКлиентСервер.ЗаполнитьСтрокуПачкиБезБлока(НоваяСтрока);
	
	ИдентификаторСтрокиПачкиБезБлока = НоваяСтрока.ПолучитьИдентификатор();
	
	Возврат НоваяСтрока;

КонецФункции

&НаКлиенте
Функция ДобавленнаяСтрокаБлокиБезКоробки()

	ЭлементыДерева = ДеревоМаркированнойПродукции.ПолучитьЭлементы();
	
	Если ЭлементыДерева.Количество() = 0 Тогда
		НоваяСтрока = ЭлементыДерева.Вставить(0);
	ИначеЕсли ЭлементыДерева[0].ТипУпаковки <> ПредопределенноеЗначение("Перечисление.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.ПачкиБезБлока") Тогда
		НоваяСтрока = ЭлементыДерева.Вставить(0);
	Иначе
		НоваяСтрока = ЭлементыДерева.Вставить(1);
	КонецЕсли;
	
	ПроверкаИПодборПродукцииМОТПКлиентСервер.ЗаполнитьСтрокуБлокиБезКоробки(НоваяСтрока);
	
	ИдентификаторСтрокиБлокиБезКоробки = НоваяСтрока.ПолучитьИдентификатор();
	
	Возврат НоваяСтрока;

КонецФункции

&НаСервере
Функция ДетализацияСтруктурыХраненияДерева(ДеревоУпаковок)
	
	Возврат Обработки.ПроверкаИПодборТабачнойПродукцииМОТП.ДетализацияСтруктурыХраненияДерева(ДеревоУпаковок);
	
КонецФункции

#КонецОбласти

#Область ПреобразованиеДетализацииСчитанойУпаковки

&НаСервере
Процедура ПреобразоватьДетализациюСчитаннойУпаковкиДоПачки(ДеревоУпаковок)

	НовоеДерево = ДеревоУпаковок.Скопировать();
	НовоеДерево.Строки.Очистить();
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		СкопироватьСтрокуДереваПриПониженииДетализацииДоПачки(СтрокаДерева, НовоеДерево);
		
	КонецЦикла;
	
	ДеревоУпаковок = НовоеДерево;

КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокуДереваПриПониженииДетализацииДоПачки(СтрокаДерева, НовоеДерево)

	Для каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
	
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ПодчиненнаяСтрока.ТипУпаковки) Тогда
			СкопироватьСтрокуДереваПриПониженииДетализацииДоПачки(ПодчиненнаяСтрока, НовоеДерево);
		Иначе
			НоваяСтрока = НовоеДерево.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПодчиненнаяСтрока);
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ПреобразоватьДетализациюСчитаннойУпаковкиДоБлокаСПачками(ДеревоУпаковок)

	НовоеДерево = ДеревоУпаковок.Скопировать();
	НовоеДерево.Строки.Очистить();
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		СкопироватьСтрокуДереваПриПониженииДетализацииДоБлокаСПачками(СтрокаДерева, НовоеДерево);
		
	КонецЦикла;
	
	ДеревоУпаковок = НовоеДерево;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокуДереваПриПониженииДетализацииДоБлокаСПачками(СтрокаДерева, НовоеДерево)

	ЕстьВложенныеПачки = Ложь;
	
	Для каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
	
		Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(ПодчиненнаяСтрока.ТипУпаковки) Тогда
			
			СкопироватьСтрокуДереваПриПониженииДетализацииДоБлокаСПачками(ПодчиненнаяСтрока, НовоеДерево)
			
		Иначе
			
			ЕстьВложенныеПачки = Истина;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Если ЕстьВложенныеПачки Тогда
		
		НоваяСтрока = НовоеДерево.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		
		Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
			
			Если ПодчиненнаяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
				
				НоваяСтрокаСПачкой = НоваяСтрока.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаСПачкой, ПодчиненнаяСтрока);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПреобразоватьДетализациюСчитаннойУпаковкиДоКоробкиСБлоками(ДеревоУпаковок)

	НовоеДерево = ДеревоУпаковок.Скопировать();
	НовоеДерево.Строки.Очистить();
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		СтрокаНовогоДерева = НовоеДерево.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаНовогоДерева, СтрокаДерева);
		
		СкопироватьСтрокуДереваПриПовышенииДетализацииДоКоробкиСБлоками(СтрокаДерева, СтрокаНовогоДерева);
		
	КонецЦикла;
	
	ДеревоУпаковок = НовоеДерево;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьСтрокуДереваПриПовышенииДетализацииДоКоробкиСБлоками(СтрокаДерева, СтрокаНовогоДерева)

	Для каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
		
		Если ПодчиненнаяСтрока.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			НоваяСтрока = СтрокаНовогоДерева.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ПодчиненнаяСтрока);
			
			СкопироватьСтрокуДереваПриПовышенииДетализацииДоКоробкиСБлоками(ПодчиненнаяСтрока, НоваяСтрока);
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
	
#Область РазагрегацияУпаковки

&НаКлиенте
Процедура ПереместитьВложенныеУпаковкиПриРазборкеУпаковки(СтрокиДерева, НовыйРодитель = Неопределено)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		
		Если НовыйРодитель <> Неопределено Тогда
			РодительДобавляемойСтроки = НовыйРодитель;
		ИначеЕсли СтрокаДерева.СтатусПроверки = ПредопределенноеЗначение("Перечисление.СтатусыПроверкиНаличияПродукцииИС.Отсутствует") Тогда
			РодительДобавляемойСтроки = Неопределено;
		ИначеЕсли СтрокаДерева.ТипУпаковки = ПредопределенноеЗначение("Перечисление.ТипыУпаковок.МаркированныйТовар") Тогда
			РодительДобавляемойСтроки = СтрокаПачкиБезБлока(ЭтотОбъект);
		ИначеЕсли ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаБлока(СтрокаДерева) Тогда
			РодительДобавляемойСтроки = СтрокаБлокиБезКоробки(ЭтотОбъект);
		Иначе
			РодительДобавляемойСтроки = ДеревоМаркированнойПродукции;
		КонецЕсли;
				
		Если РодительДобавляемойСтроки <> Неопределено Тогда
			НоваяСтрока = РодительДобавляемойСтроки.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
		Иначе
			НоваяСтрока = Неопределено;
		КонецЕсли;
		
		Если СтрокаДерева.ПолучитьЭлементы().Количество() > 0 Тогда
			ПереместитьВложенныеУпаковкиПриРазборкеУпаковки(СтрокаДерева.ПолучитьЭлементы(), НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
