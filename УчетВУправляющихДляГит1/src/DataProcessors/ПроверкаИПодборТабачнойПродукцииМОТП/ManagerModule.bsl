#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Возвращает текст запроса для расчета статусов указания серий
//	Параметры:
//	 * ПараметрыУказанияСерий - Структура - состав полей задается в функции ПроверкаИПодборПродукцииМОТП.ПараметрыУказанияСерий
//	Возвращаемое значение:
//	 * ТекстЗапроса - Строка - текст запроса расчета статуса указания серий.
//
Функция ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий) Экспорт
	
	Возврат ПроверкаИПодборПродукцииМОТП.ТекстЗапросаЗаполненияСтатусовУказанияСерий(ПараметрыУказанияСерий);
	
КонецФункции

#КонецОбласти

	
#Область СлужебныйПрограммныйИнтерфейс

// Вызывается из длительной операции по подготовке данных для формы проверки и подбора табачной продукции.
// 
// Параметры:
//	* Параметры - Структура - содержит следующие значения:
// 		** ПроверкаНеПоДокументу            - Булево - признак получения данных не по ссылке на документ
// 		** ПроверяемыйДокумент              - ДокументСсылка - ссылка на документ, из формы которого открыта форма проверки и подбора
// 		** НачальныйСтатусПроверки          - ПеречислениеСсылка.СтатусыПроверкиНаличияПродукцииИС - статус наличия продукции, используемый при подготовке данных
// 		** ДетализацияСтруктурыХранения     - ПеречислениеСсылка.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП - значение детализации из формы проверки
// 		** РедактированиеФормыНедоступно    - Булево - признак запрета редактирования формы подбора
// 		** РежимПодбораСуществующихУпаковок - Булево - признак работы со штрихкодами упаковок, имеющимися в информационной базе
// 		** ПараметрыСканирования            - Структура - параметры обработки кодов маркировки, сформированные в форме проверки и подбора
// 		** ПараметрыПроверкиКодовМаркировки - Структура - параметры проверки кодов маркировки по статусу и владельцу, сформированные в форме проверки и подбора
// 		** КонтролироватьСканируемуюПродукциюПоДокументуОснованию - Булево - признак необходимости контроля наличия табачной продукции по основанию проверяемого документа
//	* АдресРезультата - Строка - адрес временного хранилища, в которое будут помещены результаты выполнения
// Возвращаемое значение:
//
Процедура ЗагрузитьДанныеДокументаДлительнаяОперация(Параметры, АдресРезультата) Экспорт
	
	ДанныеДокумента = Новый Структура();
	ДанныеДокумента.Вставить("ДеревоМаркированнойПродукции",          ДеревоМаркированнойПродукции());
	ДанныеДокумента.Вставить("ПодобраннаяТабачнаяПродукция",          ПодобраннаяТабачнаяПродукция());
	ДанныеДокумента.Вставить("ДоступныеДляПроверкиУпаковки",          Новый СписокЗначений());
	ДанныеДокумента.Вставить("УпаковкиДокумента",                     Новый СписокЗначений());
	ДанныеДокумента.Вставить("НачальныйСтатусПроверки",               Параметры.НачальныйСтатусПроверки);
	ДанныеДокумента.Вставить("ДетализацияСтруктурыХранения",          Параметры.ДетализацияСтруктурыХранения);
	ДанныеДокумента.Вставить("РежимПодбораСуществующихУпаковок",      Параметры.РежимПодбораСуществующихУпаковок);
	ДанныеДокумента.Вставить("ПараметрыПроверкиКодовМаркировки",      Параметры.ПараметрыПроверкиКодовМаркировки);
	ДанныеДокумента.Вставить("КоличествоНедопустимыхКодовМаркировки", 0);
	ДанныеДокумента.Вставить("КонтролироватьСканируемуюПродукциюПоДокументуОснованию", Параметры.КонтролироватьСканируемуюПродукциюПоДокументуОснованию);
	
	СохраненнаяДетализацияСтруктурыХранения = Неопределено;
	СохраненныеНастройки = ОбщегоНазначения.ХранилищеНастроекДанныхФормЗагрузить("Обработка.ПроверкаИПодборТабачнойПродукцииМОТП.Форма.ПроверкаИПодбор", "");
	
	Если Параметры.РежимПодбораСуществующихУпаковок Тогда
		Если ТипЗнч(СохраненныеНастройки) = Тип("Структура")
			И СохраненныеНастройки.Свойство("ДетализацияСтруктурыХранения") Тогда
			СохраненнаяДетализацияСтруктурыХранения = СохраненныеНастройки.ДетализацияСтруктурыХранения;
		КонецЕсли;
	Иначе
		Если ТипЗнч(СохраненныеНастройки) = Тип("Структура")
			И СохраненныеНастройки.Свойство("ДетализацияСтруктурыХраненияПриобретение") Тогда
			СохраненнаяДетализацияСтруктурыХранения = СохраненныеНастройки.ДетализацияСтруктурыХраненияПриобретение;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеДокумента.Вставить("СохраненнаяДетализацияСтруктурыХранения", СохраненнаяДетализацияСтруктурыХранения);
	ДанныеДокумента.Вставить("СтрокаПачкиБезБлока",   Неопределено);
	ДанныеДокумента.Вставить("СтрокаБлокиБезКоробки", Неопределено);
	
	Если Параметры.ПроверкаНеПоДокументу Тогда
		
		ПроверяемыеДанные = Параметры.ПроверяемыеДанные;
		ЗаполнитьТаблицуПодобраннойТабачнойПродукции(ПроверяемыеДанные.ТаблицаТабачнойПродукции, ДанныеДокумента);
		ДополнитьТаблицуПодобраннойТабачнойПродукции(ПроверяемыеДанные.МаркированныеТовары, ДанныеДокумента);
		ЗаполнитьДеревоМаркированнойПродукции(ПроверяемыеДанные.ДеревоУпаковок, ДанныеДокумента);
		
	Иначе
		
		ТаблицаТабачнойПродукции = ПроверкаИПодборПродукцииМОТП.ТаблицаТабачнойПродукцииДокумента(Параметры.ПроверяемыйДокумент);
		ЗаполнитьТаблицуПодобраннойТабачнойПродукции(ТаблицаТабачнойПродукции, ДанныеДокумента);
		
		Если Параметры.Свойство("ДанныеКлючаСессииМОТП") Тогда
			ПараметрыСеанса.ДанныеКлючаСессииМОТП = Параметры.ДанныеКлючаСессииМОТП;
		КонецЕсли;
		
		Если Параметры.РежимПодбораСуществующихУпаковок Тогда
			ВидПродукции = Перечисления.ВидыПродукцииИС.Табачная;
			РезультатПолученияДанных = ШтрихкодированиеИС.ВложенныеШтрихкодыУпаковокПоДокументу(Параметры.ПроверяемыйДокумент, ВидПродукции);
		Иначе
			ПараметрыСканирования = Параметры.ПараметрыСканирования;
			ПараметрыСканирования.Детализация = СохраненнаяДетализацияСтруктурыХранения;
			
			ШтрихкодыУпаковокДокумента = ШтрихкодированиеИС.ШтрихкодыУпаковокДокумента(Параметры.ПроверяемыйДокумент, ПараметрыСканирования);
			РезультатПолученияДанных   = ШтрихкодированиеМОТП.ВложенныеШтрихкоды(ШтрихкодыУпаковокДокумента, ПараметрыСканирования);
		КонецЕсли;
		
		Если РезультатПолученияДанных.ЕстьОшибки Тогда
			ВызватьИсключение РезультатПолученияДанных.ТекстОшибки;
		КонецЕсли;
		
		ДанныеПроверяемогоДокумента = РезультатПолученияДанных.ВложенныеШтрихкоды;
		
		ДополнитьТаблицуПодобраннойТабачнойПродукции(ДанныеПроверяемогоДокумента.МаркированныеТовары, ДанныеДокумента);
		ЗаполнитьДеревоМаркированнойПродукции(ДанныеПроверяемогоДокумента.ДеревоУпаковок, ДанныеДокумента);
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(ДанныеДокумента, АдресРезультата);
	
КонецПроцедуры

// Возвращает детализацию переданной иерархической структуры упаковок табачной продукции.
// 
// Параметры:
//	* ДеревоУпаковок - ДеревоЗначений, ДанныеФормыКоллекция - иерархическая структура упаковок табачной продукции.
// Возвращаемое значение:
//	* ДетализацияСтруктурыДерева - ПеречислениеСсылка.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП - расчитаная детализация структуры упаковок
//
Функция ДетализацияСтруктурыХраненияДерева(ДеревоУпаковок) Экспорт
	
	УпаковкиДерева = Новый Структура();
	УпаковкиДерева.Вставить("ЕстьПачки",           Ложь);
	УпаковкиДерева.Вставить("ЕстьБлоки",           Ложь);
	УпаковкиДерева.Вставить("ЕстьКоробки",         Ложь);
	УпаковкиДерева.Вставить("ЕстьПачкиБезБлока",   Ложь);
	УпаковкиДерева.Вставить("ЕстьБлокиБезКоробки", Ложь);
	
	РазрешеныПачкиВКоробках = Ложь;
	
	Если ДеревоУпаковок.Строки.Количество() > 0 Тогда
		ОпределитьНаличиеУпаковокВСтрокахДерева(ДеревоУпаковок.Строки, УпаковкиДерева, РазрешеныПачкиВКоробках);
	КонецЕсли;
	
	Если УпаковкиДерева.ЕстьКоробки Тогда
		Если УпаковкиДерева.ЕстьБлоки И УпаковкиДерева.ЕстьПачки Тогда
			ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Полная
		ИначеЕсли УпаковкиДерева.ЕстьБлоки Тогда
			ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.КоробкиСБлоками;
		Иначе
			ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Полная;
		КонецЕсли;
	ИначеЕсли УпаковкиДерева.ЕстьБлоки Тогда
		ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.БлокиСПачками;
	ИначеЕсли УпаковкиДерева.ЕстьПачки Тогда
		ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки;
	ИначеЕсли УпаковкиДерева.ЕстьБлокиБезКоробки Тогда
		ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.КоробкиСБлоками;
	ИначеЕсли УпаковкиДерева.ЕстьПачкиБезБлока Тогда
		ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.БлокиСПачками;
	Иначе
		ДетализацияСтруктурыХраненияДерева = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки;
	КонецЕсли;
	
	Возврат ДетализацияСтруктурыХраненияДерева;
	
КонецФункции

// Фоновая операция по фиксации результатов проверки и подбора в документе, 
// 
// Параметры:
// 	Параметры - Структура - содержит следующие значения:
// 	   * СоздаватьАктОРасхождениях    - Булево - признак необходимости создания акта о расхождениях.
// 	   * ПроверяемыйДокумент          - ДокументСсылка - документ, для которого выполнялась проверка и подбор.
// 	   * ДеревоМаркированнойПродукции - ДеревоЗначений - содержит результаты проверки и подбора с иерархией упаковок.
// 	   * ДанныеПроверкиИПодбора       - Структруа      - содержит слепок состояния проверки и подбора, если предусмотрено его хранение по окончании результатов проверки.
// 	   * ПроверкаНеПоДокументу        - Булево - признак того, что проверка и подбор была вызвана из произвольной формы.
// 	   * ПодобраннаяТабачнаяПродукция - ТаблицаЗначений - содержит информацию о подобранной продукции сгруппированную до 
// 	       номенклатуры, характеристики, серии.
// 	АдресРезультата - Строка - адрес временного хранилища, в которое будут помещены результаты выполнения
// Возвращаемое значение:
// 	
Процедура ЗафиксироватьРезультатПроверкиИПодбора(Параметры, АдресРезультата) Экспорт

	НачатьТранзакцию();
	
	Попытка
		
		ПараметрыОкончанияПроверки = Новый Структура;
		ПараметрыОкончанияПроверки.Вставить("СоздаватьАктОРасхождениях",        Параметры.СоздаватьАктОРасхождениях);
		ПараметрыОкончанияПроверки.Вставить("СозданныйАктОРасхождениях",        Неопределено);
		ПараметрыОкончанияПроверки.Вставить("ПроверяемыйДокумент",              Параметры.ПроверяемыйДокумент);
		ПараметрыОкончанияПроверки.Вставить("ТаблицаШтрихкодовВерхнегоУровня");
		ПараметрыОкончанияПроверки.Вставить("ТаблицаПодобраннойПровереннойПродукции");
		ПараметрыОкончанияПроверки.Вставить("ТаблицаРасхожденийШтриховыхКодов", Неопределено);
			
		Параметры.ДеревоМаркированнойПродукции.Колонки.Добавить("ШтрихкодУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	
		ТаблицаШтрихкодовВерхнегоУровня = ПроверкаИПодборПродукцииМОТП.ПустаяТаблицаШтрихкодовВерхнегоУровня();
		Справочники.ШтрихкодыУпаковокТоваров.РезультатСозданияШтрихкодовУпаковокПоДеревуМаркируемойПродукции(Параметры.ДеревоМаркированнойПродукции,
		                                                                                                     ТаблицаШтрихкодовВерхнегоУровня);
		ПараметрыОкончанияПроверки.ТаблицаШтрихкодовВерхнегоУровня = ТаблицаШтрихкодовВерхнегоУровня;
		
		ТаблицаПодобраннойПровереннойПродукции = ПроверкаИПодборПродукцииМОТП.ПустаяТаблицаПодобраннойПровереннойПродукции();
		
		ЕстьРасхождения = Ложь;
		
		Для Каждого СтрокаДерева Из Параметры.ПодобраннаяТабачнаяПродукция Цикл
		
			НоваяСтрока = ТаблицаПодобраннойПровереннойПродукции.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДерева);
			Если Не ЗначениеЗаполнено(НоваяСтрока.Характеристика) Тогда
				НоваяСтрока.Характеристика = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры"); 
			КонецЕсли;
				
			Если Не ЗначениеЗаполнено(НоваяСтрока.Серия) Тогда
				НоваяСтрока.Серия = ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры"); 
			КонецЕсли;
			
			Если НоваяСтрока.Количество <> НоваяСтрока.КоличествоПодобрано Тогда
				
				ЕстьРасхождения = Истина;
				
			КонецЕсли;
		
		КонецЦикла;
		
		ПараметрыОкончанияПроверки.ТаблицаПодобраннойПровереннойПродукции = ТаблицаПодобраннойПровереннойПродукции;
		
		Если Не Параметры.ПроверкаНеПоДокументу Тогда
		
			Если Параметры.СоздаватьАктОРасхождениях Тогда
				ПараметрыОкончанияПроверки.ТаблицаРасхожденийШтриховыхКодов = ТаблицаРасхожденийУпаковокПоРезультатамПроверкиИПодбора(Параметры);
			КонецЕсли;
			
			ПроверкаИПодборПродукцииМОТП.ЗафиксироватьРезультатПроверкиИПодбора(ПараметрыОкончанияПроверки);
				
			Если Параметры.СоздаватьАктОРасхождениях
				И ЗначениеЗаполнено(ПараметрыОкончанияПроверки.СозданныйАктОРасхождениях) Тогда
				РегистрыСведений.СтатусыПроверкиИПодбораДокументовМОТП.ОтразитьЗавершениеПроверкиДокумента(
					ПараметрыОкончанияПроверки.СозданныйАктОРасхождениях, Параметры.ДанныеПроверкиИПодбора);
				РегистрыСведений.СтатусыПроверкиИПодбораДокументовМОТП.ОтразитьЗавершениеПроверкиДокумента(
					Параметры.ПроверяемыйДокумент, Неопределено, Перечисления.ТребуемоеДействиеДокументЭДО.Подтвердить);
			Иначе
				
				Если ЕстьРасхождения Тогда
					ТребуемоеДействие = Перечисления.ТребуемоеДействиеДокументЭДО.Отклонить;
				Иначе
					ТребуемоеДействие = Перечисления.ТребуемоеДействиеДокументЭДО.Подтвердить;
				КонецЕсли;
				
				РегистрыСведений.СтатусыПроверкиИПодбораДокументовМОТП.ОтразитьЗавершениеПроверкиДокумента(
					Параметры.ПроверяемыйДокумент, Параметры.ДанныеПроверкиИПодбора, ТребуемоеДействие);
			КонецЕсли;
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
	Если Параметры.ПроверкаНеПоДокументу Тогда
			
		ДанныеДляПроверкиНеПоДокументу = Новый Структура;
		ДанныеДляПроверкиНеПоДокументу.Вставить("ТаблицаШтрихкодовВерхнегоУровня", ТаблицаШтрихкодовВерхнегоУровня);
		ДанныеДляПроверкиНеПоДокументу.Вставить("ТаблицаПодобраннойПровереннойПродукции", ТаблицаПодобраннойПровереннойПродукции);
		
		ПоместитьВоВременноеХранилище(ДанныеДляПроверкиНеПоДокументу, АдресРезультата);
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТаблицаРасхожденийУпаковокПоРезультатамПроверкиИПодбора(Параметры)
	
	ТаблицаРасхождений = Новый ТаблицаЗначений;
	ТаблицаРасхождений.Колонки.Добавить("ШтрихкодУпаковки", Новый ОписаниеТипов("СправочникСсылка.ШтрихкодыУпаковокТоваров"));
	ТаблицаРасхождений.Колонки.Добавить("Штрихкод",         ОбщегоНазначения.ОписаниеТипаСтрока(200));
	ТаблицаРасхождений.Колонки.Добавить("Номенклатура",     Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ТаблицаРасхождений.Колонки.Добавить("Характеристика",   Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ТаблицаРасхождений.Колонки.Добавить("Серия",            Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ТаблицаРасхождений.Колонки.Добавить("ЭтоИзлишек",       Новый ОписаниеТипов("Булево"));
	
	Для Каждого СтрокаДерева Из Параметры.ДеревоМаркированнойПродукции.Строки Цикл
		
		ЗаполнитьТаблицуРасхожденийПоСтрокеДерева(СтрокаДерева, ТаблицаРасхождений);
		
	КонецЦикла;
	
	Возврат ТаблицаРасхождений;
	
КонецФункции

Процедура ЗаполнитьТаблицуРасхожденийПоСтрокеДерева(СтрокаДерева, ТаблицаРасхождений)
	
	ЭтоИзлишек = (СтрокаДерева.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.НеЧислилась
	             Или СтрокаДерева.СтатусПроверки = СтрокаДерева.НеСодержитсяВДанныхДокумента);
	
	ЭтоНедостача = СтрокаДерева.СтатусПроверки = Перечисления.СтатусыПроверкиНаличияПродукцииИС.Отсутствует;
	
	ЭтоТипУпаковкиПоКоторомуФиксируютсяРасхождения = (СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка
	                                                  Или СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар);
	
	ВозможнаПроверкаПодчиненныхСтрок = (СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка
	                                   Или СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МультитоварнаяУпаковка
	                                   Или СтрокаДерева.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.БлокиБезКоробки
	                                   Или СтрокаДерева.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.ПачкиБезБлока); 
	
	Если ЭтоТипУпаковкиПоКоторомуФиксируютсяРасхождения
		И (ЭтоИзлишек Или ЭтоНедостача) Тогда
		
		НоваяСтрокаТаблицы = ТаблицаРасхождений.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТаблицы, СтрокаДерева); 	
		НоваяСтрокаТаблицы.ЭтоИзлишек = ЭтоИзлишек;
		
		Возврат;
			
	КонецЕсли; 
	
	Если ВозможнаПроверкаПодчиненныхСтрок Тогда
		
		Для Каждого ПодчиненнаяСтрока Из СтрокаДерева.Строки Цикл
		
			ЗаполнитьТаблицуРасхожденийПоСтрокеДерева(ПодчиненнаяСтрока, ТаблицаРасхождений);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьНаличиеУпаковокВСтрокахДерева(СтрокиДерева, УпаковкиДерева, РазрешеныПачкиВКоробках)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если УпаковкиДерева.ЕстьПачки И НЕ РазрешеныПачкиВКоробках Тогда
			Прервать;
		ИначеЕсли СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			Если СтрокаДерева.Родитель <> Неопределено
				И СтрокаДерева.Родитель.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.ПачкиБезБлока Тогда
				УпаковкиДерева.ЕстьПачкиБезБлока = Истина;
			Иначе
				УпаковкиДерева.ЕстьПачки = Истина;
				Если НЕ РазрешеныПачкиВКоробках Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаБлока(СтрокаДерева) Тогда
			Если СтрокаДерева.Родитель <> Неопределено
				И СтрокаДерева.Родитель.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.БлокиБезКоробки Тогда
				УпаковкиДерева.ЕстьБлокиБезКоробки = Истина;
			Иначе
				УпаковкиДерева.ЕстьБлоки = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ УпаковкиДерева.ЕстьКоробки Тогда
			УпаковкиДерева.ЕстьКоробки = ИнтеграцияИСКлиентСервер.ЭтоУпаковка(СтрокаДерева.ТипУпаковки);
		КонецЕсли;
		
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			ОпределитьНаличиеУпаковокВСтрокахДерева(СтрокаДерева.Строки, УпаковкиДерева, РазрешеныПачкиВКоробках);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуПодобраннойТабачнойПродукции(ТаблицаТабачнойПродукции, ДанныеДокумента)
	
	Для Каждого СтрокаИсточника Из ТаблицаТабачнойПродукции Цикл
		СтрокаПодобраннойПродукции = ДанныеДокумента.ПодобраннаяТабачнаяПродукция.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПодобраннойПродукции, СтрокаИсточника);
		СтрокаПодобраннойПродукции.НоменклатураСопоставлена = Истина;
		ПроверкаИПодборПродукцииМОТПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаПодобраннойПродукции);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьТаблицуПодобраннойТабачнойПродукции(ТаблицаМаркируемойПродукции, ДанныеДокумента)
	
	Если ТаблицаМаркируемойПродукции.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	ТабачнаяПродукцияМОТП = ДанныеДокумента.ПодобраннаяТабачнаяПродукция.СкопироватьКолонки();
	
	ЕстьПачки = ТаблицаМаркируемойПродукции.Найти(Ложь, "ГрупповаяТоварнаяУпаковка") <> Неопределено;
	
	Для Каждого СтрокаИсточника Из ТаблицаМаркируемойПродукции Цикл
		Если ЕстьПачки И СтрокаИсточника.ГрупповаяТоварнаяУпаковка Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура();
		СтруктураПоиска.Вставить("GTIN", СтрокаИсточника.GTIN);
		СтруктураПоиска.Вставить("МРЦ", СтрокаИсточника.СтрокаДерева.МРЦ);
		
		Если ЗначениеЗаполнено(СтрокаИсточника.Номенклатура) Тогда
			СтруктураПоиска.Вставить("Номенклатура", СтрокаИсточника.Номенклатура);
			
			Если ЗначениеЗаполнено(СтрокаИсточника.Характеристика) Тогда
				СтруктураПоиска.Вставить("Характеристика", СтрокаИсточника.Характеристика);
			Иначе
				СтруктураПоиска.Вставить("Характеристика", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("ХарактеристикаНоменклатуры"));
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаИсточника.Серия) Тогда
				СтруктураПоиска.Вставить("Серия", СтрокаИсточника.Серия);
			Иначе
				СтруктураПоиска.Вставить("Серия", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("СерияНоменклатуры"));
			КонецЕсли;
		Иначе
			СтруктураПоиска.Вставить("Номенклатура", ИнтеграцияИС.ПустоеЗначениеОпределяемогоТипа("Номенклатура"));
		КонецЕсли;
		
		СтрокиПродукцииМОТП = ТабачнаяПродукцияМОТП.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиПродукцииМОТП.Количество() = 0 Тогда
			СтрокаПродукцииМОТП = ТабачнаяПродукцияМОТП.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаПродукцииМОТП, СтруктураПоиска);
			ЗаполнитьЗначенияСвойств(СтрокаПродукцииМОТП, СтрокаИсточника, "ПредставлениеНоменклатуры");
		Иначе
			СтрокаПродукцииМОТП = СтрокиПродукцииМОТП[0];
		КонецЕсли;
		
		КоличествоМОТП = ?(ЕстьПачки, 1, СтрокаИсточника.СтрокаДерева.КоличествоПачек);
		СтрокаПродукцииМОТП.КоличествоМОТП = СтрокаПродукцииМОТП.КоличествоМОТП + КоличествоМОТП;
	КонецЦикла;
	
	Если ДанныеДокумента.РежимПодбораСуществующихУпаковок Тогда
		ИменаКолонокПоиска   = "Номенклатура,Характеристика,Серия";
		ИмяКолонкиКоличество = "КоличествоПодобрано";
	Иначе
		ИменаКолонокПоиска   = "Номенклатура,Характеристика";
		ИмяКолонкиКоличество = "КоличествоМОТП";
	КонецЕсли;
	
	ТаблицаПоискаПродукции = ДанныеДокумента.ПодобраннаяТабачнаяПродукция.Скопировать(, ИменаКолонокПоиска);
	ТаблицаПоискаПродукции.Свернуть(ИменаКолонокПоиска);
	
	Для Каждого СтрокаПоискаПродукции Из ТаблицаПоискаПродукции Цикл
		СтруктураПоиска = Новый Структура(ИменаКолонокПоиска);
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаПоискаПродукции);
		
		СтрокиПродукцииМОТП = ТабачнаяПродукцияМОТП.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиПродукцииМОТП.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиПодобраннойПродукции = ДанныеДокумента.ПодобраннаяТабачнаяПродукция.НайтиСтроки(СтруктураПоиска);
		
		Если СтрокиПодобраннойПродукции.Количество() = 1 Тогда
			СтрокаПодобраннойПродукции = СтрокиПодобраннойПродукции[0];
			ИндексПодобраннойСтроки = ДанныеДокумента.ПодобраннаяТабачнаяПродукция.Индекс(СтрокаПодобраннойПродукции);
			
			Если СтрокиПродукцииМОТП.Количество() = 1 Тогда
				СтрокаПродукцииМОТП = СтрокиПродукцииМОТП[0];
				ДополнитьСтрокуПодобраннойТабачнойПродукции(СтрокаПодобраннойПродукции, СтрокаПродукцииМОТП, ИмяКолонкиКоличество, СтрокаПродукцииМОТП.КоличествоМОТП);
			ИначеЕсли НЕ ДанныеДокумента.РежимПодбораСуществующихУпаковок Тогда
				ИндексСтрокиМОТП = 0;
				
				Пока ИндексСтрокиМОТП < СтрокиПродукцииМОТП.Количество() Цикл
					СтрокаПродукцииМОТП = СтрокиПродукцииМОТП[ИндексСтрокиМОТП];
					ДополнитьСтрокуПодобраннойТабачнойПродукции(СтрокаПодобраннойПродукции, СтрокаПродукцииМОТП, ИмяКолонкиКоличество, СтрокаПродукцииМОТП.КоличествоМОТП);
					
					Если СтрокаПодобраннойПродукции.Количество > СтрокаПодобраннойПродукции[ИмяКолонкиКоличество] Тогда
						ИндексСтрокиМОТП = ИндексСтрокиМОТП + 1;
						
						Если ИндексСтрокиМОТП < (СтрокиПродукцииМОТП.Количество() - 1) Тогда
							ОстатокКоличества = СтрокаПодобраннойПродукции.Количество - СтрокаПодобраннойПродукции[ИмяКолонкиКоличество];
							СтрокаПодобраннойПродукции.Количество = СтрокаПодобраннойПродукции[ИмяКолонкиКоличество];
							ПроверкаИПодборПродукцииМОТПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаПодобраннойПродукции);
						
							СтрокаПодобраннойПродукции = ДанныеДокумента.ПодобраннаяТабачнаяПродукция.Вставить(ИндексПодобраннойСтроки + 1);
							ЗаполнитьЗначенияСвойств(СтрокаПодобраннойПродукции, СтруктураПоиска);
							СтрокаПодобраннойПродукции.НоменклатураСопоставлена = ЗначениеЗаполнено(СтрокаПодобраннойПродукции.Номенклатура);
							СтрокаПодобраннойПродукции.Количество = ОстатокКоличества;
						КонецЕсли;
					Иначе
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		ИначеЕсли СтрокиПродукцииМОТП.Количество() = 1 Тогда
			СтрокаПродукцииМОТП = СтрокиПродукцииМОТП[0];
			ИндексПодобраннойСтроки = 0;
			
			Пока ИндексПодобраннойСтроки < СтрокиПодобраннойПродукции.Количество() Цикл
				СтрокаПодобраннойПродукции = СтрокиПодобраннойПродукции[ИндексПодобраннойСтроки];
				
				Если ИндексПодобраннойСтроки = (СтрокиПодобраннойПродукции.Количество() - 1) Тогда
					ТекущееКоличествоМОТП = СтрокаПродукцииМОТП.КоличествоМОТП;
				Иначе
					ТекущееКоличествоМОТП = Мин(СтрокаПродукцииМОТП.КоличествоМОТП, СтрокаПодобраннойПродукции.Количество);
				КонецЕсли;
				
				ДополнитьСтрокуПодобраннойТабачнойПродукции(СтрокаПодобраннойПродукции, СтрокаПродукцииМОТП, ИмяКолонкиКоличество, ТекущееКоличествоМОТП);
				
				Если СтрокаПродукцииМОТП.КоличествоМОТП = 0 Тогда
					Прервать;
				Иначе
					ИндексПодобраннойСтроки = ИндексПодобраннойСтроки + 1;
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			
			Для Каждого СтрокаПодобраннойПродукции Из СтрокиПодобраннойПродукции Цикл
				Для Каждого СтрокаПродукцииМОТП Из СтрокиПродукцииМОТП Цикл
					Если СтрокаПодобраннойПродукции.Количество = СтрокаПродукцииМОТП.КоличествоМОТП Тогда
						ДополнитьСтрокуПодобраннойТабачнойПродукции(СтрокаПодобраннойПродукции, СтрокаПродукцииМОТП, ИмяКолонкиКоличество, СтрокаПродукцииМОТП.КоличествоМОТП);
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;	
		
	Для Каждого СтрокаПродукцииМОТП Из ТабачнаяПродукцияМОТП Цикл
		Если СтрокаПродукцииМОТП.КоличествоМОТП = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПодобраннойПродукции = ДанныеДокумента.ПодобраннаяТабачнаяПродукция.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаПодобраннойПродукции, СтрокаПродукцииМОТП,, "КоличествоМОТП");
		СтрокаПодобраннойПродукции.НоменклатураСопоставлена = ЗначениеЗаполнено(СтрокаПодобраннойПродукции.Номенклатура);
		СтрокаПодобраннойПродукции[ИмяКолонкиКоличество] = СтрокаПродукцииМОТП.КоличествоМОТП;
		
		ПроверкаИПодборПродукцииМОТПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаПодобраннойПродукции);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьСтрокуПодобраннойТабачнойПродукции(СтрокаПодобраннойПродукции, СтрокаПродукцииМОТП, ИмяКолонкиКоличество, КоличествоМОТП)
	
	Если НЕ ЗначениеЗаполнено(СтрокаПодобраннойПродукции.GTIN) Тогда
		СтрокаПодобраннойПродукции.GTIN = СтрокаПродукцииМОТП.GTIN;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаПодобраннойПродукции.ПредставлениеНоменклатуры) Тогда
		СтрокаПодобраннойПродукции.ПредставлениеНоменклатуры = СтрокаПродукцииМОТП.ПредставлениеНоменклатуры;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаПодобраннойПродукции.МРЦ) Тогда
		СтрокаПодобраннойПродукции.МРЦ = СтрокаПродукцииМОТП.МРЦ;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаПодобраннойПродукции.Серия) И ЗначениеЗаполнено(СтрокаПродукцииМОТП.Серия) Тогда
		СтрокаПодобраннойПродукции.Серия = СтрокаПродукцииМОТП.Серия;
	КонецЕсли;
	
	СтрокаПодобраннойПродукции[ИмяКолонкиКоличество] = СтрокаПодобраннойПродукции[ИмяКолонкиКоличество] + КоличествоМОТП;
	СтрокаПродукцииМОТП.КоличествоМОТП = СтрокаПродукцииМОТП.КоличествоМОТП - КоличествоМОТП;

	ПроверкаИПодборПродукцииМОТПКлиентСервер.УстановитьИндексКартинкиСостояниеПодбораКодаМаркировки(СтрокаПодобраннойПродукции);

КонецПроцедуры

Процедура ЗаполнитьДеревоМаркированнойПродукции(ДеревоУпаковокДокумента, ДанныеДокумента)
	
	ДетализацияСтруктурыХраненияДанныхДокумента = ДетализацияСтруктурыХраненияДерева(ДеревоУпаковокДокумента);
	
	Если ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения <> Неопределено Тогда
		Если ДеревоУпаковокДокумента.Строки.Количество() = 0 Тогда
			ДанныеДокумента.ДетализацияСтруктурыХранения = ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения;
		ИначеЕсли ДетализацияСтруктурыХраненияДанныхДокумента = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Полная
			И ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.КоробкиСБлоками Тогда
			ДанныеДокумента.ДетализацияСтруктурыХранения = ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения;
		ИначеЕсли ДетализацияСтруктурыХраненияДанныхДокумента <> Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки Тогда
			ДанныеДокумента.ДетализацияСтруктурыХранения = ДетализацияСтруктурыХраненияДанныхДокумента;
		Иначе
			ДанныеДокумента.ДетализацияСтруктурыХранения = ДанныеДокумента.СохраненнаяДетализацияСтруктурыХранения;
		КонецЕсли;
	Иначе
		ДанныеДокумента.ДетализацияСтруктурыХранения = ДетализацияСтруктурыХраненияДанныхДокумента;
	КонецЕсли;
	
	КоллекцияСтрокПриемника = ДанныеДокумента.ДеревоМаркированнойПродукции.Строки;
	
	Для каждого СтрокаДереваУпаковок Из ДеревоУпаковокДокумента.Строки Цикл
		ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке(СтрокаДереваУпаковок, КоллекцияСтрокПриемника, ДанныеДокумента);
	КонецЦикла;
	
	Если ДанныеДокумента.СтрокаПачкиБезБлока = Неопределено
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки Тогда
		ДобавленнаяСтрокаПачкиБезБлока(ДанныеДокумента);
	КонецЕсли;
	
	Если ДанныеДокумента.СтрокаБлокиБезКоробки = Неопределено
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.БлокиСПачками Тогда
		ДобавленнаяСтрокаБлокиБезКоробки(ДанныеДокумента);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке(СтрокаИсточника, КоллекцияСтрокПриемника, ДанныеДокумента)
	
	Если СтрокаИсточника.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.ПачкиБезБлока Тогда
		
		Если ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки Тогда
			
			НоваяСтрока = ДанныеДокумента.СтрокаПачкиБезБлока;
			
			Если НоваяСтрока = Неопределено Тогда
				НоваяСтрока = ДобавленнаяСтрокаПачкиБезБлока(ДанныеДокумента);
			КонецЕсли;
			
		Иначе
			
			Для Каждого СтрокаИсточникаПачка Из СтрокаИсточника.Строки Цикл
				ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке(СтрокаИсточникаПачка, КоллекцияСтрокПриемника, ДанныеДокумента);
			КонецЦикла;
			
			Возврат;
			
		КонецЕсли;
	
	ИначеЕсли СтрокаИсточника.ТипУпаковки = Перечисления.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.БлокиБезКоробки Тогда
		
		Если ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки
			И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.БлокиСПачками Тогда
			
			НоваяСтрока = ДанныеДокумента.СтрокаБлокиБезКоробки;
			
			Если НоваяСтрока = Неопределено Тогда
				НоваяСтрока = ДобавленнаяСтрокаБлокиБезКоробки(ДанныеДокумента);
			КонецЕсли;
			
		Иначе

			Для Каждого СтрокаИсточникаБлок Из СтрокаИсточника.Строки Цикл
				Если ДанныеДокумента.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.БлокиСПачками Тогда
					ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке(СтрокаИсточникаБлок, КоллекцияСтрокПриемника, ДанныеДокумента);
				Иначе
					Для Каждого СтрокаИсточникаПачка Из СтрокаИсточникаБлок.Строки Цикл
						ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке(СтрокаИсточникаПачка, КоллекцияСтрокПриемника, ДанныеДокумента);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
			
			Возврат;

		КонецЕсли;
		
	ИначеЕсли СтрокаИсточника.Родитель = Неопределено
		И СтрокаИсточника.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки Тогда
			
		СтрокаПачкиБезБлока = ДанныеДокумента.СтрокаПачкиБезБлока;
		
		Если СтрокаПачкиБезБлока = Неопределено Тогда
			СтрокаПачкиБезБлока = ДобавленнаяСтрокаПачкиБезБлока(ДанныеДокумента);
		КонецЕсли;
		
		НоваяСтрока = СтрокаПачкиБезБлока.Строки.Добавить();
		НоваяСтрока.СтатусПроверки = ДанныеДокумента.НачальныйСтатусПроверки;
		
	ИначеЕсли СтрокаИсточника.Родитель = Неопределено
		И ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаБлока(СтрокаИсточника)
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.Пачки
		И ДанныеДокумента.ДетализацияСтруктурыХранения <> Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.БлокиСПачками Тогда
			
		СтрокаБлокиБезКоробки = ДанныеДокумента.СтрокаБлокиБезКоробки;
		
		Если СтрокаБлокиБезКоробки = Неопределено Тогда
			СтрокаБлокиБезКоробки = ДобавленнаяСтрокаБлокиБезКоробки(ДанныеДокумента);
		КонецЕсли;
		
		НоваяСтрока = СтрокаБлокиБезКоробки.Строки.Добавить();
		НоваяСтрока.СтатусПроверки = ДанныеДокумента.НачальныйСтатусПроверки;
		
	Иначе
		
		НоваяСтрока = КоллекцияСтрокПриемника.Добавить();
		НоваяСтрока.СтатусПроверки = ДанныеДокумента.НачальныйСтатусПроверки;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаИсточника);
	
	НоваяСтрока.СтатусКодаМаркировки = СтрокаИсточника.Статус;
	
	Если НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.ПустаяСсылка() Тогда
		НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.МонотоварнаяУпаковка;
	ИначеЕсли НоваяСтрока.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар
		И НЕ ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
		НоваяСтрока.ПредставлениеСодержимоеУпаковки = СтрокаИсточника.ПредставлениеНоменклатуры;
	КонецЕсли;
		
	Если ДанныеДокумента.ДетализацияСтруктурыХранения = Перечисления.ДетализацияСтруктурыХраненияТабачнойПродукцииМОТП.КоробкиСБлоками
		И ПроверкаИПодборПродукцииМОТПКлиентСервер.ЭтоУпаковкаБлока(НоваяСтрока) Тогда
		НоваяСтрока.КоличествоПодчиненныхПачек     = СтрокаИсточника.КоличествоПачек;
		НоваяСтрока.НеПересчитыватьКоличествоПачек = Истина;
	КонецЕсли;
	
	ПроверкаИПодборПродукцииМОТПКлиентСервер.УстановитьДоступностьУпаковкиДляПроверки(НоваяСтрока, ДанныеДокумента.ДоступныеДляПроверкиУпаковки);
	ПроверкаИПодборПродукцииМОТПКлиентСервер.СформироватьПредставлениеДляСтрокиДереваМаркированнойПродукции(НоваяСтрока);
	ПроверкаИПодборПродукцииМОТПКлиентСервер.ПроверитьДопустимостьКодаМаркировки(НоваяСтрока, ДанныеДокумента.ПараметрыПроверкиКодовМаркировки);
	
	Если НоваяСтрока.НедопустимыйКодМаркировки Тогда
		ДанныеДокумента.КоличествоНедопустимыхКодовМаркировки = ДанныеДокумента.КоличествоНедопустимыхКодовМаркировки + 1;
	КонецЕсли;
	
	Если ИнтеграцияИСКлиентСервер.ЭтоУпаковка(НоваяСтрока.ТипУпаковки) Тогда
		ДанныеДокумента.УпаковкиДокумента.Добавить(НоваяСтрока.Штрихкод);
	КонецЕсли;

	КоллекцияСтрокНовойСтроки = НоваяСтрока.Строки;
	
	Для Каждого ПодчиненнаяСтрокаИсточника Из СтрокаИсточника.Строки Цикл
		ДобавитьСтрокуДереваМаркированнойПродукцииПриЗагрузке(ПодчиненнаяСтрокаИсточника, КоллекцияСтрокНовойСтроки, ДанныеДокумента);
	КонецЦикла;

КонецПроцедуры

Функция ДобавленнаяСтрокаПачкиБезБлока(ДанныеДокумента)
	
	НоваяСтрока = ДанныеДокумента.ДеревоМаркированнойПродукции.Строки.Вставить(0);
	
	ПроверкаИПодборПродукцииМОТПКлиентСервер.ЗаполнитьСтрокуПачкиБезБлока(НоваяСтрока);
	
	ДанныеДокумента.СтрокаПачкиБезБлока = НоваяСтрока;
	
	Возврат НоваяСтрока;

КонецФункции

Функция ДобавленнаяСтрокаБлокиБезКоробки(ДанныеДокумента)
	
	СтрокиДерева = ДанныеДокумента.ДеревоМаркированнойПродукции.Строки;
	
	Если СтрокиДерева.Количество() = 0 Тогда
		НоваяСтрока = СтрокиДерева.Вставить(0);
	ИначеЕсли СтрокиДерева[0].ТипУпаковки <> Перечисления.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП.ПачкиБезБлока Тогда
		НоваяСтрока = СтрокиДерева.Вставить(0);
	Иначе
		НоваяСтрока = СтрокиДерева.Вставить(1);
	КонецЕсли;
	
	ПроверкаИПодборПродукцииМОТПКлиентСервер.ЗаполнитьСтрокуБлокиБезКоробки(НоваяСтрока);
	
	ДанныеДокумента.СтрокаБлокиБезКоробки = НоваяСтрока;
	
	Возврат НоваяСтрока;

КонецФункции

Функция ДеревоМаркированнойПродукции()
	
	ДеревоМаркированнойПродукции = Новый ДеревоЗначений();
	ДеревоМаркированнойПродукции.Колонки.Добавить("СтатусПроверки",                      Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыПроверкиНаличияПродукцииИС"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПредставлениеПроверкиПодчиненных",    Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТипУпаковки", Новый ОписаниеТипов("ПеречислениеСсылка.ПрочиеЗоныПересчетаТабачнойПродукцииМОТП, ПеречислениеСсылка.ТипыУпаковок"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхУпаковок",       Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхВНаличии",       Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхОтсутствует",    Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("Штрихкод",                            Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВсяУпаковкаПроверена",                Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИндексКартинкиТипУпаковки",           Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИндексКартинкиСтатусПроверки",        Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ТребуетсяПеремаркировка",             Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("Представление",                       Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПредставлениеСодержимоеУпаковки",     Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхОтложено",       Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхПачек",          Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("НомерСтикераОтложено",                Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("НеСодержитсяВДанныхДокумента",        Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("НеСоответствуетОтбору",               Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИдетПроверкаДаннойУпаковки",          Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхНеЧислилось",    Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхНеПроверялось",  Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхВсего",          Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ХешСумма",                            Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("Номенклатура",                        Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ДеревоМаркированнойПродукции.Колонки.Добавить("Характеристика",                      Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);	
	ДеревоМаркированнойПродукции.Колонки.Добавить("Серия",                               Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИдентификаторСтроки",                 Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазныеСерии",                Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазнаяНоменклатура",         Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазныеХарактеристики",       Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ГрупповаяТоварнаяУпаковка",           Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ИННВладельца",                        Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("МРЦ",                                 Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("СтатусКодаМаркировки",                Новый ОписаниеТипов("ПеречислениеСсылка.СтатусыКодовМаркировкиМОТП"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("КоличествоПодчиненныхБлоков",         Новый ОписаниеТипов("Число"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("GTIN",                                Метаданные.ОпределяемыеТипы.GTIN.Тип);	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ВУпаковкеРазныйGTIN",                 Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("ПредставлениеПроверкиКодаМаркировки", Новый ОписаниеТипов("Строка"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("НедопустимыйКодМаркировки",           Новый ОписаниеТипов("Булево"));	
	ДеревоМаркированнойПродукции.Колонки.Добавить("НеПересчитыватьКоличествоПачек",      Новый ОписаниеТипов("Булево"));	
	
	Возврат ДеревоМаркированнойПродукции;
	
КонецФункции

Функция ПодобраннаяТабачнаяПродукция()
	
	ПодобраннаяТабачнаяПродукция = Новый ТаблицаЗначений();
	ПодобраннаяТабачнаяПродукция.Колонки.Добавить("Номенклатура",               Метаданные.ОпределяемыеТипы.Номенклатура.Тип);
	ПодобраннаяТабачнаяПродукция.Колонки.Добавить("Характеристика",             Метаданные.ОпределяемыеТипы.ХарактеристикаНоменклатуры.Тип);
	ПодобраннаяТабачнаяПродукция.Колонки.Добавить("Серия",                      Метаданные.ОпределяемыеТипы.СерияНоменклатуры.Тип);
	ПодобраннаяТабачнаяПродукция.Колонки.Добавить("Количество",                 Новый ОписаниеТипов("Число"));
	ПодобраннаяТабачнаяПродукция.Колонки.Добавить("КоличествоПодобрано",        Новый ОписаниеТипов("Число"));
	ПодобраннаяТабачнаяПродукция.Колонки.Добавить("ИндексКодаМаркировки",       Новый ОписаниеТипов("Число"));
	ПодобраннаяТабачнаяПродукция.Колонки.Добавить("МРЦ",                        Новый ОписаниеТипов("Число"));
	ПодобраннаяТабачнаяПродукция.Колонки.Добавить("GTIN",                       Метаданные.ОпределяемыеТипы.GTIN.Тип);
	ПодобраннаяТабачнаяПродукция.Колонки.Добавить("ПредставлениеНоменклатуры",  Новый ОписаниеТипов("Строка"));
	ПодобраннаяТабачнаяПродукция.Колонки.Добавить("СтатусУказанияСерий",        Новый ОписаниеТипов("Число"));
	ПодобраннаяТабачнаяПродукция.Колонки.Добавить("ХарактеристикиИспользуются", Новый ОписаниеТипов("Булево"));
	ПодобраннаяТабачнаяПродукция.Колонки.Добавить("ТипНоменклатуры",            Метаданные.ОпределяемыеТипы.ТипНоменклатуры.Тип);
	ПодобраннаяТабачнаяПродукция.Колонки.Добавить("НомерСтроки",                Новый ОписаниеТипов("Число"));
	ПодобраннаяТабачнаяПродукция.Колонки.Добавить("КоличествоМОТП",             Новый ОписаниеТипов("Число"));
	ПодобраннаяТабачнаяПродукция.Колонки.Добавить("НоменклатураСопоставлена",   Новый ОписаниеТипов("Булево"));
	
	Возврат ПодобраннаяТабачнаяПродукция;
	
КонецФункции

#КонецОбласти
	
#КонецЕсли