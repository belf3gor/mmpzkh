
#Область ПроцедурыИФункцииОбщегоНазначения

#Область ОбщегоНазначения

&НаСервереБезКонтекста
Функция ПеречитатьДатуНачалаУчета(Организация)
	
	Возврат Обработки.ВводНачальныхОстатков.ПеречитатьДатуНачалаУчета(Организация);
	
КонецФункции

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Отказ = Ложь;
		ЗаписатьНаСервере(, Отказ);
		Если НЕ Отказ Тогда
			Закрыть();
		КонецЕсли;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаписьДанных

&НаСервереБезКонтекста
Функция ОпределитьРазделУчетаЗапасов(Счет, СписокРазделов)

	КодСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет).Код;
	ПозицияТочки = Найти(КодСчета, ".");
	КодРодителя = ?(ПозицияТочки = 0, КодСчета, Лев(КодСчета, ПозицияТочки - 1));

	Для Каждого СтрокаРаздела Из СписокРазделов Цикл

		Если Найти(СтрокаРаздела.КодыГрупп, "," + КодРодителя + ",") > 0 Тогда
			Возврат СтрокаРаздела.РазделУчета;
		КонецЕсли;

	КонецЦикла;

	Возврат ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.Товары");

КонецФункции

&НаСервере
Процедура ЗаписатьНаСервере(ОбновитьОстатки = Истина, Отказ = Ложь)
	
	Отказ = НЕ ПроверитьЗаполнение();
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерОбработки = Обработки.ВводНачальныхОстатков;
	МенеджерОбработки.СинхронизироватьСостояниеДокументов(Объект.Запасы, Объект.СуществующиеДокументы);
	
	СтруктураПараметровДокументов = Новый Структура("Организация, Дата, РазделУчета", 
		Объект.Организация, Объект.ДатаВводаОстатков, "");

	Отбор = Новый Структура("НеЗаполненныеРеквизиты, ТабличнаяЧасть", Истина, "Запасы");
	СчетаУчетаВДокументах.ЗаполнитьТаблицу(Обработки.ВводНачальныхОстатков, СтруктураПараметровДокументов, Объект.Запасы, Отбор);
	
	ТаблицыДанных = ПодготовитьТабличнуюЧастьКЗаписи(Объект.Запасы, ВедетсяСкладскойУчет, СтруктураПараметровДокументов);
	Для Каждого ТаблицаДанных ИЗ ТаблицыДанных Цикл
		СтруктураПараметровДокументов.Вставить("РазделУчета", ТаблицаДанных[0].РазделУчета);
		МенеджерОбработки.ЗаписатьНаСервереДокументы(СтруктураПараметровДокументов, ТаблицаДанных, "НоменклатураНаСкладе");
	КонецЦикла;
	МенеджерОбработки.ОбновитьФинансовыйРезультат(СтруктураПараметровДокументов, Объект.ФинансовыйРезультат, Объект.СуществующиеДокументы);
	
	Если ОбновитьОстатки Тогда
		
		МенеджерОбработки.ОбновитьОстатки(Объект.Запасы, "Запасы", 
			Новый Структура("Организация,ДатаВводаОстатков",
				Объект.Организация,Объект.ДатаВводаОстатков),
			Объект.СуществующиеДокументы);
		
	КонецЕсли;
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодготовитьТабличнуюЧастьКЗаписи(Таблица, ВедетсяСкладскойУчет, СтруктураПараметровДокументов);
	
	СписокРазделов = Новый ТаблицаЗначений;
	СписокРазделов.Колонки.Добавить("РазделУчета");
	СписокРазделов.Колонки.Добавить("КодыГрупп");
	
	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты;
	СтрокаРаздела.КодыГрупп   = ",43,21,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения;
	СтрокаРаздела.КодыГрупп   = ",07,08,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Материалы;
	СтрокаРаздела.КодыГрупп   = ",10,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.Товары;
	СтрокаРаздела.КодыГрупп      = ",41,42,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.ТоварыОтгруженные;
	СтрокаРаздела.КодыГрупп      = ",45,";
	
	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета;
	СтрокаРаздела.КодыГрупп      = ",004,";
	
	ТаблицаСуществующихДанных = Таблица.Выгрузить();
	ТаблицаСуществующихДанных.Очистить();
	ТаблицаСуществующихДанных.Колонки.Добавить("РазделУчета");
	ТаблицаСуществующихДанных.Колонки.Добавить("СуммаНУ");
	ТаблицаНовыхДанных = ТаблицаСуществующихДанных.СкопироватьКолонки();
	
	Для Каждого СтрокаТаблицы ИЗ Таблица Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.Ссылка) Тогда
			НоваяСтрока = ТаблицаСуществующихДанных.Добавить();
			НоваяСтрока.РазделУчета = СтрокаТаблицы.Ссылка.РазделУчета;
		Иначе
			НоваяСтрока = ТаблицаНовыхДанных.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		Если НоваяСтрока.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения Тогда
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.Партия) Тогда
				НоваяСтрока.Партия = Обработки.ВводНачальныхОстатков.ПолучитьДокумент(Справочники.Контрагенты.ПустаяСсылка(),Справочники.ДоговорыКонтрагентов.ПустаяСсылка(), СтруктураПараметровДокументов);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураТаблиц = Новый Структура();
	Если ТаблицаСуществующихДанных.Количество()<> 0 Тогда
		СтруктураТаблиц.Вставить("ОсновнойРазделУчета", ТаблицаСуществующихДанных);
	КонецЕсли;
	
	МасивТаблиц = Новый Массив;
	Если ТаблицаСуществующихДанных.Количество()<> 0 Тогда
		МасивТаблиц.Добавить(ТаблицаСуществующихДанных);
	КонецЕсли;
	
	ТаблицаНовыхДанных.Сортировать("СчетУчета");
	РазделУчета = "";
	КоличествоСтрокНовыхДанных = ТаблицаНовыхДанных.Количество();
	Для Каждого СтрокаТаблицы ИЗ ТаблицаНовыхДанных Цикл
		Если РазделУчета = "" Тогда
			РазделУчета = ОпределитьРазделУчетаЗапасов(СтрокаТаблицы.СчетУчета, СписокРазделов);
			ТекущийРазделУчета = ОпределитьРазделУчетаЗапасов(СтрокаТаблицы.СчетУчета, СписокРазделов);
			ТекущаяТаблица = ТаблицаНовыхДанных.СкопироватьКолонки();
		КонецЕсли;
		ТекущийРазделУчета = ОпределитьРазделУчетаЗапасов(СтрокаТаблицы.СчетУчета, СписокРазделов);
		Если ТекущийРазделУчета <> РазделУчета Тогда
			МасивТаблиц.Добавить(ТекущаяТаблица);
			РазделУчета = ОпределитьРазделУчетаЗапасов(СтрокаТаблицы.СчетУчета, СписокРазделов);
			ТекущаяТаблица = ТаблицаНовыхДанных.СкопироватьКолонки();
		КонецЕсли;
		НоваяСтрока = ТекущаяТаблица.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
		НоваяСтрока.РазделУчета = РазделУчета;
		НоваяСтрока.СуммаНУ     = НоваяСтрока.Сумма;
		Если НоваяСтрока.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения Тогда
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.Партия) Тогда
				НоваяСтрока.Партия = Обработки.ВводНачальныхОстатков.ПолучитьДокумент(Справочники.Контрагенты.ПустаяСсылка(),Справочники.ДоговорыКонтрагентов.ПустаяСсылка(), СтруктураПараметровДокументов);
			КонецЕсли;
		КонецЕсли;
		Если ТаблицаНовыхДанных.Индекс(СтрокаТаблицы) = КоличествоСтрокНовыхДанных - 1 Тогда
			МасивТаблиц.Добавить(ТекущаяТаблица);
		КонецЕсли;
	КонецЦикла;
	
	Возврат МасивТаблиц;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

#Область ОбработчикиЭлементовШапкиФормы

&НаКлиенте
Процедура Записать(Команда)
	
	Если Модифицированность Тогда
		НомерСтроки = 0;
		Если Элементы.Запасы.ТекущиеДанные <> Неопределено Тогда
			НомерСтроки = Элементы.Запасы.ТекущиеДанные.НомерСтроки;
		КонецЕсли;
		Отказ = Ложь;
		ЗаписатьНаСервере(Истина, Отказ);
		Если НЕ Отказ Тогда
			Если НомерСтроки <> 0 Тогда
				Элементы.Запасы.ТекущаяСтрока = Объект.Запасы[НомерСтроки-1].ПолучитьИдентификатор();
			КонецЕсли;
			Оповестить("ОбновитьФормуПомощникаВводаОстатков", Объект.Организация, "ВводНачальныхОстатков");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Отказ = Ложь;
	Если Модифицированность Тогда
		ЗаписатьНаСервере(Ложь, Отказ);
		Если НЕ Отказ Тогда
			Оповестить("ОбновитьФормуПомощникаВводаОстатков", Объект.Организация, "ВводНачальныхОстатков");
		КонецЕсли;
	КонецЕсли;
	Если НЕ Отказ Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТабличныхЧастей

&НаКлиенте
Процедура ЗапасыНоменклатураПриИзменении(Элемент)
	
	СтрокаТаблицы   = Элементы.Запасы.ТекущиеДанные;
	СтрокаТаблицы.СчетУчета = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапасыСкладПриИзменении(Элемент)
	
	СтрокаТаблицы   = Элементы.Запасы.ТекущиеДанные;
	СтрокаТаблицы.СчетУчета = "";
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Объект.Организация                    = Параметры.Организация;
	Объект.ДатаВводаОстатков              = Параметры.ДатаВводаОстатков;
	Объект.ВалютаРегламентированногоУчета = Параметры.ВалютаРегламентированногоУчета;
	
	ТекстЗаголовок = НСтр("ru = 'Начальные остатки: Запасы (%1)'");
	ТекстЗаголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовок, Объект.Организация);
	ЭтаФорма.Заголовок = ТекстЗаголовок;
	
	ВедетсяСкладскойУчет = Истина;
	БУ = ПланыСчетов.Хозрасчетный.Товары.ПолучитьОбъект();
	Если БУ.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто") = Неопределено Тогда
		ВедетсяСкладскойУчет = Ложь;
	КонецЕсли;
	Если ВедетсяСкладскойУчет Тогда
		ВедетсяСкладскойУчет  = ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоСкладовБухгалтерскийУчет");
	КонецЕсли;
	
	Элементы.ЗапасыСклад.Видимость = ВедетсяСкладскойУчет;
	
	МенеджерОбработки = Обработки.ВводНачальныхОстатков;
	МенеджерОбработки.СобратьСтруктуруТаблиц(Объект.Запасы, "Запасы", СтруктураТаблиц);
	МенеджерОбработки.ОбновитьОстатки(Объект.Запасы, "Запасы", 
		Новый Структура("Организация,ДатаВводаОстатков",
					Объект.Организация,Объект.ДатаВводаОстатков),
		Объект.СуществующиеДокументы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ИзмененениеДатыВводаОстатков" И Источник = "ВводНачальныхОстатков" И Параметр = Объект.Организация Тогда
		Объект.ДатаВводаОстатков = ПеречитатьДатуНачалаУчета(Объект.Организация);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы И Модифицированность Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	Оповещение = Новый ОписаниеОповещения(
		"ПередЗакрытиемЗавершение",
		ЭтотОбъект);
	
	ТекстВопроса = НСтр("ru='Данные были изменены. Сохранить изменения?'");
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
	
КонецПроцедуры

#КонецОбласти
