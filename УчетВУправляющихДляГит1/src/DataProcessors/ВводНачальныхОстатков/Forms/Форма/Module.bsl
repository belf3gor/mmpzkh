////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	// ОсновныеСчета

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ОсновныеСчета");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ОсновныеСчета.ЗапретитьИспользоватьВПроводках", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоЖелтый);


	// ЗабалансовыеСчета

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "ЗабалансовыеСчета");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"ЗабалансовыеСчета.ЗапретитьИспользоватьВПроводках", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", WebЦвета.СветлоЖелтый);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьДатуУчетнойПолитики(ДатаВводаОстатков)

	Возврат ДатаВводаОстатков + 86400;

КонецФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	Объект.ДатаВводаОстатков = ПолучитьДатуНачалаУчета(Объект.Организация);
	Объект.ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	КоличествоДокументовВводаОстатков = ПолучитьКоличествоДокументовВводаОстатков(Объект.Организация);
	ЗаполнитьСпискиСчетов();
	ОбновитьФормуНаСервере();

КонецПроцедуры

&НаСервере
Процедура ОбновитьФормуНаСервере()

	ДатаУчетнойПолитики = ПолучитьДатуУчетнойПолитики(Объект.ДатаВводаОстатков);
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстДатаВвода = "";
		ЦветДатаВвода =  ЦветаСтиля.ЦветФонаФормы;
	Иначе		
		Если ЗначениеЗаполнено(Объект.ДатаВводаОстатков) Тогда
			ТекстДатаВвода = НСтр("ru = 'Дата ввода остатков: %1 г.'");
			ТекстДатаВвода = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстДатаВвода, Формат(Объект.ДатаВводаОстатков, "ДФ=dd.MM.yyyy"));
			ЦветДатаВвода =  ЦветаСтиля.ЦветГиперссылки;
			ДоступностьУчетнойПолитики = Истина;
		Иначе
			ТекстДатаВвода = НСтр("ru = 'Установить дату ввода остатков'");
			ЦветДатаВвода =  ЦветаСтиля.НезаполненныйРеквизит;
			ДоступностьУчетнойПолитики = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ДекорацияДатаВводаначальныхОстатков.Заголовок  = ТекстДатаВвода;	
	Элементы.ДекорацияДатаВводаначальныхОстатков.ЦветТекста =  ЦветДатаВвода;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаВводаОстатков) Тогда
		
		ДоступностьУчетнойПолитики = Ложь;
		ТекстУчетнаяПолитика       = "";
		ЦветУчетнаяПолитика =  ЦветаСтиля.ЦветФонаФормы;
		
	Иначе
		
		УчетнаяПолитикаЗадана = Ложь;
		Если ЗначениеЗаполнено(ДатаУчетнойПолитики) Тогда
			УчетнаяПолитикаЗадана = УчетнаяПолитикаСуществует(Объект.Организация, ДатаУчетнойПолитики);
		КонецЕсли;
		
		Если УчетнаяПолитикаЗадана Тогда
			ДоступностьУчетнойПолитики = Ложь;
			ТекстУчетнаяПолитика       = "";
			ЦветУчетнаяПолитика =  ЦветаСтиля.ЦветФонаФормы;
		Иначе
			ТекстУчетнаяПолитика = НСтр("ru = 'Настроить учетную политику'");
			ЦветУчетнаяПолитика =  ЦветаСтиля.НезаполненныйРеквизит;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ДекорацияУчетнаяПолитика.Доступность = ДоступностьУчетнойПолитики;
	Элементы.ДекорацияУчетнаяПолитика.Заголовок   = ТекстУчетнаяПолитика;	
	Элементы.ДекорацияУчетнаяПолитика.ЦветТекста  =  ЦветУчетнаяПолитика;
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрОрганизацияФункциональныхОпцийФормы(
		ЭтаФорма,
		Объект.Организация,
		ДатаУчетнойПолитики);

	ЗаголовокКолонки = НСтр("ru = 'Сальдо (%1)'");
	ЗаголовокКолонки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокКолонки, СокрЛП(Объект.ВалютаРегламентированногоУчета));
	Элементы.ПрочиеРасходыСальдоНачальное.Заголовок = ЗаголовокКолонки;

	МожноИзменятьОстатки = ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.ДатаВводаОстатков)
				И УчетнаяПолитика.Существует(Объект.Организация, ДатаУчетнойПолитики);

	ОбновитьОстатки();
	УправлениеФормой();

КонецПроцедуры

&НаСервере
Процедура УправлениеФормой()

	ДатаУчетнойПолитики = ПолучитьДатуУчетнойПолитики(Объект.ДатаВводаОстатков);
	ПрименяетсяУСН = УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация, ДатаУчетнойПолитики);
	ПрименяетсяУСНДоходыМинусРасходы = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Объект.Организация, ДатаУчетнойПолитики);
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, ДатаУчетнойПолитики);
	УпрощенныйУчетНДС = УчетнаяПолитика.УпрощенныйУчетНДС(Объект.Организация, ДатаУчетнойПолитики);
	ЭтоПредприниматель = УчетнаяПолитика.ПлательщикНДФЛ(Объект.Организация, ДатаУчетнойПолитики);

	Элементы.ОсновныеСчета.ТолькоПросмотр = НЕ МожноИзменятьОстатки;
	Элементы.ОсновныеСчета.КонтекстноеМеню.Доступность = МожноИзменятьОстатки;
	Элементы.ОсновныеСчета.КоманднаяПанель.Доступность = МожноИзменятьОстатки;
	
	Элементы.ЗабалансовыеСчета.ТолькоПросмотр = НЕ МожноИзменятьОстатки;
	Элементы.ЗабалансовыеСчета.КонтекстноеМеню.Доступность = МожноИзменятьОстатки;
	Элементы.ЗабалансовыеСчета.КоманднаяПанель.Доступность = МожноИзменятьОстатки;
	
	Элементы.ПрочиеРасходы.ТолькоПросмотр = НЕ МожноИзменятьОстатки;
	Элементы.ПрочиеРасходы.КонтекстноеМеню.Доступность = МожноИзменятьОстатки;
	Элементы.ПрочиеРасходы.КоманднаяПанель.Доступность = МожноИзменятьОстатки;
	
	Элементы.НДСПоРеализации.ТолькоПросмотр = НЕ МожноИзменятьОстатки;
	Элементы.НДСПоРеализации.КонтекстноеМеню.Доступность = МожноИзменятьОстатки;
	Элементы.НДСПоРеализации.КоманднаяПанель.Доступность = МожноИзменятьОстатки;	

	Элементы.ПрочиеНепризнанныеРасходыУСНиИП.Видимость = ПрименяетсяУСНДоходыМинусРасходы ИЛИ ЭтоПредприниматель;
	Если ПрименяетсяУСНДоходыМинусРасходы Тогда
		Элементы.ПрочиеНепризнанныеРасходыУСНиИП.Заголовок = НСтр("ru = 'Прочие непризнанные расходы УСН'") ;
	Иначе
		Элементы.ПрочиеНепризнанныеРасходыУСНиИП.Заголовок = НСтр("ru = 'Прочие непризнанные расходы ИП'") ;
	КонецЕсли;

	Элементы.НДСПоРеализации.Видимость = ПлательщикНДС И НЕ УпрощенныйУчетНДС;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокСчетовИсключений()

	СписокИсключений = Новый Массив;
	СписокИсключений.Добавить(Планысчетов.Хозрасчетный.ИнвентарьИХозяйственныеПринадлежностиВЭксплуатации);
	СписокИсключений.Добавить(Планысчетов.Хозрасчетный.ГТД);

	Возврат СписокИсключений;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКоличествоДокументовВводаОстатков(Знач Организация)

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат 0;
	КонецЕсли;

	ЗапросПоДокументам = Новый Запрос;
	ЗапросПоДокументам.УстановитьПараметр("Организация", Организация);
	ЗапросПоДокументам.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                           |	КОЛИЧЕСТВО(ВводНачальныхОстатков.Ссылка) КАК Документов
	                           |ИЗ
	                           |	Документ.ВводНачальныхОстатков КАК ВводНачальныхОстатков
	                           |ГДЕ
	                           |	ВводНачальныхОстатков.Организация = &Организация
	                           |	И ВводНачальныхОстатков.ОтражатьВБухгалтерскомУчете = ИСТИНА
	                           |	И ВводНачальныхОстатков.ОтражатьВНалоговомУчете = ИСТИНА
	                           |	И ВводНачальныхОстатков.ОтражатьПоСпециальнымРегистрам = ИСТИНА";

	РезультатЗапроса = ЗапросПоДокументам.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат 0;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Документов;
	КонецЕсли;

КонецФункции

&НаСервере
Процедура ЗаполнитьСписокРазделов()

	СписокРазделов.Очистить();

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ГотоваяПродукцияИПолуфабрикаты;
	СтрокаРаздела.КодыГрупп   = ",43,21,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.ДенежныеСредства;
	СтрокаРаздела.КодыГрупп   = ",50,51,52,53,54,55,56,57,58,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Капитал;
	СтрокаРаздела.КодыГрупп   = ",80,81,82,83,84,85,86,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.КапитальныеВложения;
	СтрокаРаздела.КодыГрупп   = ",07,08,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета = Перечисления.РазделыУчетаДляВводаОстатков.Материалы;
	СтрокаРаздела.КодыГрупп   = ",10,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоАвансамПолученным;
	СтрокаРаздела.КодыСчетов     = ",76.АВ,76.ВА,";
	СтрокаРаздела.КодыИсключений = ",76,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.НДСПоПриобретеннымЦенностям;
	СтрокаРаздела.КодыГрупп      = ",19,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.НезавершенноеПроизводство;
	СтрокаРаздела.КодыГрупп      = ",20,23,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.НематериальныеАктивыИНИОКР;
	СтрокаРаздела.КодыГрупп      = ",04,05,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.ОтложенныеНалоговыеАктивыОбязательства;
	СтрокаРаздела.КодыГрупп      = ",09,77,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.ОсновныеСредства;
	СтрокаРаздела.КодыГрупп      = ",01,02,03,";
	СтрокаРаздела.КодыСчетов     = ",010,";
	СтрокаРаздела.КодыИсключений = ",10,11,001,011,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.РасходыБудущихПериодов;
	СтрокаРаздела.КодыГрупп      = ",97,";
	СтрокаРаздела.КодыСчетов     = ",76.01.2,76.01.9,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыПоНалогамИСборам;
	СтрокаРаздела.КодыГрупп      = ",68,69,";
	СтрокаРаздела.КодыИсключений = ",68.22,68.32,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПерсоналомПоОплатеТрудаИДепонентам;
	СтрокаРаздела.КодыГрупп      = ",70,";
	СтрокаРаздела.КодыСчетов     = ",76.04,";
	СтрокаРаздела.КодыИсключений = ",76,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПодотчетнымиЛицами;
	СтрокаРаздела.КодыГрупп      = ",71,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПокупателямиИЗаказчиками;
	СтрокаРаздела.КодыГрупп      = ",62,";
	СтрокаРаздела.КодыИсключений = ",62.03,62.Р,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПоставщикамиИПодрядчиками;
	СтрокаРаздела.КодыГрупп      = ",60,";
	СтрокаРаздела.КодыИсключений = ",60.03,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСПрочимиДебиторамиИКредиторами;
	СтрокаРаздела.КодыГрупп      = ",76,";
	СтрокаРаздела.КодыИсключений = ",76.03,76.04,76.01.2,76.01.9,76.01.1,76.07.1,76.07.9,76.10,76.14,76.27.1,76.37.1,76.37.9,76.21,76.41,76.АВ,76.ВА,76.Н,76.ОТ,76.51,76.52,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.РасчетыСУчредителями;
	СтрокаРаздела.КодыГрупп      = ",75,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.Товары;
	СтрокаРаздела.КодыГрупп      = ",41,42,";

	СтрокаРаздела = СписокРазделов.Добавить();
	СтрокаРаздела.РазделУчета    = Перечисления.РазделыУчетаДляВводаОстатков.ТоварыОтгруженные;
	СтрокаРаздела.КодыГрупп      = ",45,";

КонецПроцедуры

&НаКлиенте
Функция ОпределитьРазделУчета(Счет)

	КодСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(Счет).Код;
	ПозицияТочки = СтрНайти(КодСчета, ".");
	КодРодителя = ?(ПозицияТочки = 0, КодСчета, Лев(КодСчета, ПозицияТочки - 1));

	Для Каждого СтрокаРаздела Из СписокРазделов Цикл

		Если СтрНайти(СтрокаРаздела.КодыСчетов, "," + КодСчета + ",") > 0 Тогда
			Если СтрНайти(СтрокаРаздела.КодыИсключений, "," + КодСчета + ",") = 0 Тогда
				Возврат СтрокаРаздела.РазделУчета;
			КонецЕсли;
		КонецЕсли;

		Если СтрНайти(СтрокаРаздела.КодыГрупп, "," + КодРодителя + ",") > 0 Тогда
			Если СтрНайти(СтрокаРаздела.КодыИсключений, "," + КодСчета + ",") = 0 Тогда
				Возврат СтрокаРаздела.РазделУчета;
			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

	Возврат ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.ПрочиеСчетаБухгалтерскогоУчета");

КонецФункции

&НаКлиенте
Функция ОпределитьТекущийСчетВФорме()

	СтрокаСчета  = Неопределено;
	Если Элементы.ГруппаСпискаСчетов.ТекущаяСтраница = Элементы.ОсновныеСчетаПланаСчетов Тогда
		СтрокаСчета = Элементы.ОсновныеСчета.ТекущиеДанные;
	ИначеЕсли Элементы.ГруппаСпискаСчетов.ТекущаяСтраница = Элементы.ЗабалансовыеСчетаПланаСчетов Тогда
		СтрокаСчета = Элементы.ЗабалансовыеСчета.ТекущиеДанные;
	ИначеЕсли Элементы.ГруппаСпискаСчетов.ТекущаяСтраница = Элементы.ПрочиеНепризнанныеРасходыУСНиИП Тогда
		СтрокаСчета  = Элементы.ПрочиеРасходы.ТекущиеДанные;
	ИначеЕсли Элементы.ГруппаСпискаСчетов.ТекущаяСтраница = Элементы.ГруппаНДСПоРеализации Тогда
		СтрокаСчета  = Элементы.НДСПоРеализации.ТекущиеДанные;
	Иначе
		Возврат Неопределено;
	КонецЕсли;

	Если СтрокаСчета = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;

	Возврат СтрокаСчета.Счет;

КонецФункции

&НаСервере
Процедура ЗаполнитьСпискиСчетов()

	ОсновныеСчета.Очистить();
	ЗабалансовыеСчета.Очистить();

	ЗаполнитьСписокРазделов();

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СписокИсключений", ПолучитьСписокСчетовИсключений());
	Запрос.УстановитьПараметр("НачДата", КонецДня(Объект.ДатаВводаОстатков));
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Подразделение", Объект.ПодразделениеОрганизации);
	Если БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет() Тогда
		УсловиеПоВалюте = "";
	Иначе
		УсловиеПоВалюте = "И СчетаХР.Валютный = Ложь";
	КонецЕсли; 
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетаХР.Ссылка КАК Счет,
	|	СчетаХР.Наименование,
	|	СчетаХР.Валютный,
	|	СчетаХР.НалоговыйУчет,
	|	СчетаХР.ЗапретитьИспользоватьВПроводках,
	|	СчетаХР.Вид КАК СчетВид,
	|	ВЫБОР
	|		КОГДА СчетаХР.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|			ТОГДА 0
	|		КОГДА СчетаХР.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК НомерКартинки
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК СчетаХР
	|ГДЕ
	|	СчетаХР.Забалансовый = ЛОЖЬ
	|	И СчетаХР.Ссылка <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный)
	|	И ВЫРАЗИТЬ(СчетаХР.Код КАК СТРОКА(1)) В (""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""0"")
	|	" + УсловиеПоВалюте + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетаХР.Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СчетаХР.Ссылка КАК Счет,
	|	СчетаХР.Наименование,
	|	СчетаХР.Валютный,
	|	СчетаХР.НалоговыйУчет,
	|	СчетаХР.ЗапретитьИспользоватьВПроводках,
	|	СчетаХР.Вид КАК СчетВид,
	|	ВЫБОР
	|		КОГДА СчетаХР.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|			ТОГДА 0
	|		КОГДА СчетаХР.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК НомерКартинки
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК СчетаХР
	|ГДЕ
	|	СчетаХР.Забалансовый = ИСТИНА
	|	" + УсловиеПоВалюте + "
	|	И (ВЫРАЗИТЬ(СчетаХР.Код КАК СТРОКА(1)) В (""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""0"")
	|			ИЛИ СчетаХР.Ссылка В (&СписокИсключений))
	|
	|УПОРЯДОЧИТЬ ПО
	|	СчетаХР.Порядок";

	ПакетРезультатов = Запрос.ВыполнитьПакет();

	ОсновныеСчета.Загрузить(ПакетРезультатов[0].Выгрузить());
	ЗабалансовыеСчета.Загрузить(ПакетРезультатов[1].Выгрузить());

КонецПроцедуры

&НаСервере
Процедура ОбновитьОстатки()

	ДатаВводаОстатков = Объект.ДатаВводаОстатков+86400;
	
	ДатаУчетнойПолитики = ПолучитьДатуУчетнойПолитики(ДатаВводаОстатков);
	ПрименяетсяУСН = УчетнаяПолитика.ПрименяетсяУСН(Объект.Организация, ДатаУчетнойПолитики);
	ПрименяетсяУСНДоходыМинусРасходы = УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(Объект.Организация, ДатаУчетнойПолитики);
	ПлательщикНДС = УчетнаяПолитика.ПлательщикНДС(Объект.Организация, ДатаУчетнойПолитики);
	УпрощенныйУчетНДС = УчетнаяПолитика.УпрощенныйУчетНДС(Объект.Организация, ДатаУчетнойПолитики);
	РаздельныйУчетНДС = УчетнаяПолитика.РаздельныйУчетНДС(Объект.Организация, ДатаУчетнойПолитики);
	ЭтоПредприниматель = УчетнаяПолитика.ПлательщикНДФЛ(Объект.Организация, ДатаУчетнойПолитики);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата", ДатаВводаОстатков);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Подразделение", Объект.ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("СписокИсключений", ПолучитьСписокСчетовИсключений());
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПланСчетовХозрасчетный.Ссылка КАК Счет,
	|	ПланСчетовХозрасчетный.Порядок КАК Порядок,
	|	ПланСчетовХозрасчетный.Код КАК Код,
	|	ВЫБОР
	|		КОГДА ПланСчетовХозрасчетный.Ссылка В (&СписокИсключений)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоИсключение,
	|	ПланСчетовХозрасчетный.Валютный КАК Валютный,
	|	ПланСчетовХозрасчетный.НалоговыйУчет КАК НалоговыйУчет,
	|	ПланСчетовХозрасчетный.Забалансовый КАК Забалансовый,
	|	ПланСчетовХозрасчетный.ЗапретитьИспользоватьВПроводках,
	|	ПланСчетовХозрасчетный.Вид КАК СчетВид
	|ПОМЕСТИТЬ ПланСчетовХР
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК ПланСчетовХозрасчетный
	|ГДЕ
	|	(ПланСчетовХозрасчетный.Забалансовый = ЛОЖЬ
	|	И ПланСчетовХозрасчетный.Ссылка <> ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Вспомогательный)
	|	И ВЫРАЗИТЬ(ПланСчетовХозрасчетный.Код КАК СТРОКА(1)) В (""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""0""))
	|	ИЛИ
	|	(ПланСчетовХозрасчетный.Забалансовый = ИСТИНА
	|	И (ВЫРАЗИТЬ(ПланСчетовХозрасчетный.Код КАК СТРОКА(1)) В (""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"", ""0"")
	|			ИЛИ ПланСчетовХозрасчетный.Ссылка В (&СписокИсключений)))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.Счет.Порядок КАК Порядок,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет В (&СписокИсключений)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоИсключение,
	|	ХозрасчетныйОстатки.Счет.Валютный КАК Валютный,
	|	ХозрасчетныйОстатки.Счет.НалоговыйУчет КАК НалоговыйУчет,
	|	ХозрасчетныйОстатки.Счет.Забалансовый КАК Забалансовый,
	|	ХозрасчетныйОстатки.Счет.ЗапретитьИспользоватьВПроводках,
	|	ХозрасчетныйОстатки.Счет.Вид КАК СчетВид,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.АктивноПассивный)
	|				ТОГДА ХозрасчетныйОстатки.СуммаРазвернутыйОстатокДт
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокДт
	|		КОНЕЦ, 0) КАК СальдоНачальноеДт,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ХозрасчетныйОстатки.Счет.Вид = ЗНАЧЕНИЕ(ВидСчета.АктивноПассивный)
	|				ТОГДА ХозрасчетныйОстатки.СуммаРазвернутыйОстатокКт
	|			ИНАЧЕ ХозрасчетныйОстатки.СуммаОстатокКт
	|		КОНЕЦ, 0) КАК СальдоНачальноеКт,
	|	ХозрасчетныйОстатки.СуммаРазвернутыйОстатокДт КАК СальдоНачальноеДтРазвернутое,
	|	ХозрасчетныйОстатки.СуммаРазвернутыйОстатокКт КАК СальдоНачальноеКтРазвернутое
	|ПОМЕСТИТЬ ОстаткиХР
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|		&НачДата,
	|		Счет В (ВЫБРАТЬ РАЗЛИЧНЫЕ ПланСчетовХР.Счет ИЗ ПланСчетовХР КАК ПланСчетовХР),
	|		,
	|			Организация = &Организация
	|				" + ?(ЗначениеЗаполнено(Объект.ПодразделениеОрганизации), "И Подразделение = &Подразделение", "") + "
	|			) КАК ХозрасчетныйОстатки
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ХозрасчетныйОстатки.Счет.Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПланСчетовХозрасчетный.Счет КАК Счет,
	|	ПланСчетовХозрасчетный.Порядок КАК Порядок,
	|	ПланСчетовХозрасчетный.ЭтоИсключение КАК ЭтоИсключение,
	|	ПланСчетовХозрасчетный.Валютный КАК Валютный,
	|	ПланСчетовХозрасчетный.НалоговыйУчет КАК НалоговыйУчет,
	|	ПланСчетовХозрасчетный.Забалансовый КАК Забалансовый,
	|	ПланСчетовХозрасчетный.ЗапретитьИспользоватьВПроводках КАК ЭтоГруппа,
	|	ПланСчетовХозрасчетный.СчетВид КАК СчетВид,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СальдоНачальноеДт, 0) КАК СальдоНачальноеДт,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СальдоНачальноеКт, 0) КАК СальдоНачальноеКт,
	|	ВЫБОР
	|		КОГДА ПланСчетовХозрасчетный.Забалансовый = ЛОЖЬ
	|			ТОГДА ЕСТЬNULL(ХозрасчетныйОстатки.СальдоНачальноеДтРазвернутое, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СальдоДтРазвернутоеПоОсновнымСчетам,
	|	ВЫБОР
	|		КОГДА ПланСчетовХозрасчетный.Забалансовый = ЛОЖЬ
	|			ТОГДА ЕСТЬNULL(ХозрасчетныйОстатки.СальдоНачальноеКтРазвернутое, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СальдоКтРазвернутоеПоОсновнымСчетам,
	|	ВЫБОР
	|		КОГДА ПланСчетовХозрасчетный.Забалансовый = ИСТИНА
	|			ТОГДА ЕСТЬNULL(ХозрасчетныйОстатки.СальдоНачальноеДтРазвернутое, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СальдоДтРазвернутоеПоЗабалансовымСчетам,
	|	ВЫБОР
	|		КОГДА ПланСчетовХозрасчетный.Забалансовый = ИСТИНА
	|			ТОГДА ЕСТЬNULL(ХозрасчетныйОстатки.СальдоНачальноеКтРазвернутое, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СальдоКтРазвернутоеПоЗабалансовымСчетам,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СальдоНачальноеДтРазвернутое, 0) КАК СальдоНачальноеДтРазвернутое,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.СальдоНачальноеКтРазвернутое, 0) КАК СальдоНачальноеКтРазвернутое
	|ИЗ
	|	ПланСчетовХР КАК ПланСчетовХозрасчетный
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОстаткиХР КАК ХозрасчетныйОстатки
	|		ПО (ХозрасчетныйОстатки.Счет = ПланСчетовХозрасчетный.Счет)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ХозрасчетныйОстатки.Порядок
	|ИТОГИ
	|	МАКСИМУМ(ЭтоИсключение),
	|	МАКСИМУМ(Валютный),
	|	МАКСИМУМ(НалоговыйУчет),
	|	МАКСИМУМ(Забалансовый),
	|	СУММА(СальдоНачальноеДт),
	|	СУММА(СальдоНачальноеКт),
	|	СУММА(СальдоДтРазвернутоеПоОсновнымСчетам),
	|	СУММА(СальдоКтРазвернутоеПоЗабалансовымСчетам),
	|	СУММА(СальдоДтРазвернутоеПоЗабалансовымСчетам),
	|	СУММА(СальдоКтРазвернутоеПоОсновнымСчетам),
	|	СУММА(СальдоНачальноеДтРазвернутое),
	|	СУММА(СальдоНачальноеКтРазвернутое)
	|ПО
	|	ОБЩИЕ,
	|	Счет ИЕРАРХИЯ";

	Если ЭтоПредприниматель ИЛИ ПрименяетсяУСНДоходыМинусРасходы Тогда

		Запрос.УстановитьПараметр("УСН_ДР", ПрименяетсяУСНДоходыМинусРасходы);
		Запрос.УстановитьПараметр("РазделУчета", Перечисления.РазделыУчетаДляВводаОстатков.ПрочиеРасходыНалоговогоУчетаУСНИИП);
		Запрос.УстановитьПараметр("ДатаВводаОстатков", ДатаВводаОстатков);
		Запрос.Текст = 	Запрос.Текст + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КурсыВалют.Валюта,
		|	КурсыВалют.Курс,
		|	КурсыВалют.Кратность
		|ПОМЕСТИТЬ Курсы
		|ИЗ
		|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаВводаОстатков, ) КАК КурсыВалют
		|
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	1 КАК Порядок,
		|	""Номенклатура"" КАК Идентификатор,
		|	""Стоимость реализованных МПЗ"" КАК ВидРасхода,
		|	0 КАК СальдоНачальное
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2,
		|	""ДопРасходы"",
		|	""Сумма дополнительных расходов на приобретение МПЗ"",
		|	0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	3,
		|	ВЫБОР
		|		КОГДА &УСН_ДР
		|			ТОГДА ""Услуги""
		|		ИНАЧЕ ""Прочие""
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА &УСН_ДР
		|			ТОГДА ""Стоимость услуг непроизводственного характера""
		|		ИНАЧЕ ""Сумма прочих не признанных расходов""
		|	КОНЕЦ,
		|	0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	3,
		|	ВЫБОР
		|		КОГДА &УСН_ДР
		|			ТОГДА ""Услуги""
		|		ИНАЧЕ ""Прочие""
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА &УСН_ДР
		|			ТОГДА ""Стоимость услуг непроизводственного характера""
		|		ИНАЧЕ ""Сумма прочих не признанных расходов""
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА &УСН_ДР
		|			ТОГДА ВводНачальныхОстатковУслугиУСН.Сумма * ЕСТЬNULL(Курсы.Курс, 1) / ЕСТЬNULL(Курсы.Кратность, 1)
		|		ИНАЧЕ 0
		|	КОНЕЦ
		|ИЗ
		|	Документ.ВводНачальныхОстатков.УслугиУСН КАК ВводНачальныхОстатковУслугиУСН
		|ЛЕВОЕ СОЕДИНЕНИЕ Курсы КАК Курсы По Курсы.Валюта = ВводНачальныхОстатковУслугиУСН.Валюта
		|ГДЕ
		|	ВводНачальныхОстатковУслугиУСН.Ссылка.Организация = &Организация
		|	" + ?(ЗначениеЗаполнено(Объект.ПодразделениеОрганизации), "И ВводНачальныхОстатковУслугиУСН.Ссылка.ПодразделениеОрганизации = &Подразделение", "") + "
		|	И ВводНачальныхОстатковУслугиУСН.Ссылка.РазделУчета = &РазделУчета
		|	И ВводНачальныхОстатковУслугиУСН.Ссылка.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	3,
		|	ВЫБОР
		|		КОГДА &УСН_ДР
		|			ТОГДА ""Услуги""
		|		ИНАЧЕ ""Прочие""
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА &УСН_ДР
		|			ТОГДА ""Стоимость услуг непроизводственного характера""
		|		ИНАЧЕ ""Сумма прочих не признанных расходов""
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА &УСН_ДР
		|			ТОГДА 0
		|		ИНАЧЕ ВводНачальныхОстатковПрочиеРасходыИП.Сумма
		|	КОНЕЦ
		|ИЗ
		|	Документ.ВводНачальныхОстатков.ПрочиеРасходыИП КАК ВводНачальныхОстатковПрочиеРасходыИП
		|ГДЕ
		|	ВводНачальныхОстатковПрочиеРасходыИП.Ссылка.Организация = &Организация
		|	" + ?(ЗначениеЗаполнено(Объект.ПодразделениеОрганизации), "И ВводНачальныхОстатковПрочиеРасходыИП.Ссылка.ПодразделениеОрганизации = &Подразделение", "") + "
		|	И ВводНачальныхОстатковПрочиеРасходыИП.Ссылка.РазделУчета = &РазделУчета
		|	И ВводНачальныхОстатковПрочиеРасходыИП.Ссылка.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2,
		|	""ДопРасходы"",
		|	""Сумма дополнительных расходов на приобретение МПЗ"",
		|	ВЫБОР
		|		КОГДА &УСН_ДР
		|			ТОГДА ВводНачальныхОстатковДопРасходыУСН.Сумма * ЕСТЬNULL(Курсы.Курс, 1) / ЕСТЬNULL(Курсы.Кратность, 1)
		|		ИНАЧЕ 0
		|	КОНЕЦ
		|ИЗ
		|	Документ.ВводНачальныхОстатков.ДопРасходыУСН КАК ВводНачальныхОстатковДопРасходыУСН
		|ЛЕВОЕ СОЕДИНЕНИЕ Курсы КАК Курсы По Курсы.Валюта = ВводНачальныхОстатковДопРасходыУСН.Валюта
		|ГДЕ
		|	ВводНачальныхОстатковДопРасходыУСН.Ссылка.Организация = &Организация
		|	" + ?(ЗначениеЗаполнено(Объект.ПодразделениеОрганизации), "И ВводНачальныхОстатковДопРасходыУСН.Ссылка.ПодразделениеОрганизации = &Подразделение", "") + "
		|	И ВводНачальныхОстатковДопРасходыУСН.Ссылка.РазделУчета = &РазделУчета
		|	И ВводНачальныхОстатковДопРасходыУСН.Ссылка.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	2,
		|	""ДопРасходы"",
		|	""Сумма дополнительных расходов на приобретение МПЗ"",
		|	ВЫБОР
		|		КОГДА &УСН_ДР
		|			ТОГДА 0
		|		ИНАЧЕ ВводНачальныхОстатковДопРасходыИП.Сумма
		|	КОНЕЦ
		|ИЗ
		|	Документ.ВводНачальныхОстатков.ДопРасходыИП КАК ВводНачальныхОстатковДопРасходыИП
		|ГДЕ
		|	ВводНачальныхОстатковДопРасходыИП.Ссылка.Организация = &Организация
		|	" + ?(ЗначениеЗаполнено(Объект.ПодразделениеОрганизации), "И ВводНачальныхОстатковДопРасходыИП.Ссылка.ПодразделениеОрганизации = &Подразделение", "") + "
		|	И ВводНачальныхОстатковДопРасходыИП.Ссылка.РазделУчета = &РазделУчета
		|	И ВводНачальныхОстатковДопРасходыИП.Ссылка.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	1,
		|	""Номенклатура"",
		|	""Стоимость реализованных МПЗ"",
		|	ВЫБОР
		|		КОГДА &УСН_ДР
		|			ТОГДА ВводНачальныхОстатковМПЗРеализованныеУСН.Сумма * ЕСТЬNULL(Курсы.Курс, 1) / ЕСТЬNULL(Курсы.Кратность, 1)
		|		ИНАЧЕ 0
		|	КОНЕЦ
		|ИЗ
		|	Документ.ВводНачальныхОстатков.МПЗРеализованныеУСН КАК ВводНачальныхОстатковМПЗРеализованныеУСН
		|ЛЕВОЕ СОЕДИНЕНИЕ Курсы КАК Курсы По Курсы.Валюта = ВводНачальныхОстатковМПЗРеализованныеУСН.Валюта
		|ГДЕ
		|	ВводНачальныхОстатковМПЗРеализованныеУСН.Ссылка.Организация = &Организация
		|	" + ?(ЗначениеЗаполнено(Объект.ПодразделениеОрганизации), "И ВводНачальныхОстатковМПЗРеализованныеУСН.Ссылка.ПодразделениеОрганизации = &Подразделение", "") + "
		|	И ВводНачальныхОстатковМПЗРеализованныеУСН.Ссылка.РазделУчета = &РазделУчета
		|	И ВводНачальныхОстатковМПЗРеализованныеУСН.Ссылка.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	1,
		|	""Номенклатура"",
		|	""Стоимость реализованных МПЗ"",
		|	ВЫБОР
		|		КОГДА &УСН_ДР
		|			ТОГДА 0
		|		ИНАЧЕ ВводНачальныхОстатковМПЗРеализованныеИП.Сумма
		|	КОНЕЦ
		|ИЗ
		|	Документ.ВводНачальныхОстатков.МПЗРеализованныеИП КАК ВводНачальныхОстатковМПЗРеализованныеИП
		|ГДЕ
		|	ВводНачальныхОстатковМПЗРеализованныеИП.Ссылка.Организация = &Организация
		|	" + ?(ЗначениеЗаполнено(Объект.ПодразделениеОрганизации), "И ВводНачальныхОстатковМПЗРеализованныеИП.Ссылка.ПодразделениеОрганизации = &Подразделение", "") + "
		|	И ВводНачальныхОстатковМПЗРеализованныеИП.Ссылка.РазделУчета = &РазделУчета
		|	И ВводНачальныхОстатковМПЗРеализованныеИП.Ссылка.Проведен";
	КонецЕсли;

	Если ПлательщикНДС И НЕ УпрощенныйУчетНДС Тогда

		Запрос.Текст = Запрос.Текст + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ВводНачальныхОстатковДанныеПоСФНДС.СуммаБезНДС) КАК СуммаБезНДС,
		|	СУММА(ВводНачальныхОстатковДанныеПоСФНДС.НДС) КАК НДС,
		|	СУММА(ВЫБОР
		|			КОГДА ВводНачальныхОстатковДанныеПоСФНДС.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
		|				ТОГДА ВводНачальныхОстатковДанныеПоСФНДС.СуммаБезНДСПодтверждено0
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаБезНДСПодтверждено,
		|	СУММА(ВЫБОР
		|			КОГДА ВводНачальныхОстатковДанныеПоСФНДС.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
		|				ТОГДА ВводНачальныхОстатковДанныеПоСФНДС.НДСПодтверждено0
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НДСПодтверждено,
		|	СУММА(ВЫБОР
		|			КОГДА ВводНачальныхОстатковДанныеПоСФНДС.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
		|				ТОГДА ВводНачальныхОстатковДанныеПоСФНДС.СуммаБезНДСНеПодтверждено0
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаБезНДСНеПодтверждено,
		|	СУММА(ВЫБОР
		|			КОГДА ВводНачальныхОстатковДанныеПоСФНДС.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
		|				ТОГДА ВводНачальныхОстатковДанныеПоСФНДС.НДСНеПодтверждено0
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК НДСНеПодтверждено,
		|	СУММА(ВЫБОР
		|			КОГДА ВводНачальныхОстатковДанныеПоСФНДС.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС0)
		|				ТОГДА ВводНачальныхОстатковДанныеПоСФНДС.СуммаБезНДС - ВводНачальныхОстатковДанныеПоСФНДС.СуммаБезНДСПодтверждено0 - (ВводНачальныхОстатковДанныеПоСФНДС.СуммаБезНДСНеПодтверждено0 + ВЫБОР
		|						КОГДА ВводНачальныхОстатковДанныеПоСФНДС.СтавкаНДСНеПодтверждена0 В (ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС10_110), ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС18_118), ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.НДС20_120))
		|							ТОГДА ВводНачальныхОстатковДанныеПоСФНДС.НДСПодтверждено0
		|						ИНАЧЕ 0
		|					КОНЕЦ)
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК СуммаБезНДСОжидаетПодтверждения
		|ИЗ
		|	Документ.ВводНачальныхОстатков.ДанныеПоНДС КАК ВводНачальныхОстатковДанныеПоСФНДС
		|ГДЕ
		|	ВводНачальныхОстатковДанныеПоСФНДС.Ссылка.Проведен = ИСТИНА
		|	И ВводНачальныхОстатковДанныеПоСФНДС.Ссылка.Организация = &Организация
		|	И ВводНачальныхОстатковДанныеПоСФНДС.Ссылка.РазделУчета = ЗНАЧЕНИЕ(Перечисление.РазделыУчетаДляВводаОстатков.НДСНачисленный)";
		Если ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И ВводНачальныхОстатковДанныеПоСФНДС.Ссылка.ПодразделениеОрганизации = &Подразделение";
		КонецЕсли;

	КонецЕсли;

	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаГрупп = РезультатыЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "Счет");
	ОбработатьВыборкуОстатка(ВыборкаГрупп, Неопределено);

	ВыборкаОбщие = РезультатыЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "ОБЩИЕ");
	ВыборкаОбщие.Следующий();
	Элементы.ОсновныеСчетаСальдоНачальноеДт.ТекстПодвала     = Формат(ВыборкаОбщие.СальдоДтРазвернутоеПоОсновнымСчетам, "ЧДЦ=2; ЧН=' '") ;
	Элементы.ОсновныеСчетаСальдоНачальноеКт.ТекстПодвала     = Формат(ВыборкаОбщие.СальдоКтРазвернутоеПоОсновнымСчетам, "ЧДЦ=2; ЧН=' '");
	Элементы.ЗабалансовыеСчетаСальдоНачальноеДт.ТекстПодвала = Формат(ВыборкаОбщие.СальдоДтРазвернутоеПоЗабалансовымСчетам, "ЧДЦ=2; ЧН=' '");
	Элементы.ЗабалансовыеСчетаСальдоНачальноеКт.ТекстПодвала = Формат(ВыборкаОбщие.СальдоКтРазвернутоеПоЗабалансовымСчетам, "ЧДЦ=2; ЧН=' '");

	Если ЭтоПредприниматель ИЛИ ПрименяетсяУСНДоходыМинусРасходы Тогда

		ПрочиеРасходы.Очистить();
		ТаблицаРасходов = РезультатыЗапроса[4].Выгрузить();
		ТаблицаРасходов.Свернуть("Порядок, Идентификатор, ВидРасхода", "СальдоНачальное");
		ТаблицаРасходов.Сортировать("Порядок");
		ПрочиеРасходы.Загрузить(ТаблицаРасходов);
		Элементы.ПрочиеРасходыСальдоНачальное.ТекстПодвала = Формат(ТаблицаРасходов.Итог("СальдоНачальное"), "ЧДЦ=2; ЧГ=3,0") ;
		
	КонецЕсли;
	
	Если ПлательщикНДС И НЕ УпрощенныйУчетНДС Тогда

		НДСПоРеализации.Очистить();
		Если ЭтоПредприниматель ИЛИ ПрименяетсяУСНДоходыМинусРасходы Тогда
			ТаблицаОстатковНДС = РезультатыЗапроса[5].Выгрузить();
		Иначе
			ТаблицаОстатковНДС = РезультатыЗапроса[3].Выгрузить();
		КонецЕсли;

		Если ТаблицаОстатковНДС.Количество() <> 0 Тогда

			СтрокаТаб = ТаблицаОстатковНДС[0];

			НоваяСтрока = НДСПоРеализации.Добавить();
			НоваяСтрока.Идентификатор = "НДС";
			НоваяСтрока.ВидРасхода = НСтр("ru='НДС всего'");
			НоваяСтрока.СуммаБезНДС = СтрокаТаб.СуммаБезНДС;
			НоваяСтрока.НДС = СтрокаТаб.НДС;

			Если РаздельныйУчетНДС Тогда

				НоваяСтрока = НДСПоРеализации.Добавить();
				НоваяСтрока.Идентификатор = "НДСПодтверждено";
				НоваяСтрока.ВидРасхода =  НСтр("ru='НДС подтвержденный (реализация по ставке 0%)'");
				НоваяСтрока.СуммаБезНДС = СтрокаТаб.СуммаБезНДСПодтверждено;
				НоваяСтрока.НДС = СтрокаТаб.НДСПодтверждено;

				НоваяСтрока = НДСПоРеализации.Добавить();
				НоваяСтрока.Идентификатор = "НДСНеПодтверждено";
				НоваяСтрока.ВидРасхода =  НСтр("ru='НДС неподтвержденный (реализация по ставке 0%)'");
				НоваяСтрока.СуммаБезНДС = СтрокаТаб.СуммаБезНДСНеПодтверждено;
				НоваяСтрока.НДС = СтрокаТаб.НДСНеПодтверждено;

				НоваяСтрока = НДСПоРеализации.Добавить();
				НоваяСтрока.Идентификатор = "НДСОжидаетПодтверждения";
				НоваяСтрока.ВидРасхода =  НСтр("ru='НДС ожидает подтверждения (реализация по ставке 0%)'");
				НоваяСтрока.СуммаБезНДС = СтрокаТаб.СуммаБезНДСОжидаетПодтверждения;
				НоваяСтрока.НДС = 0;

			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбработатьВыборкуОстатка(ВыборкаГрупп, СчетРодитель)

	Пока ВыборкаГрупп.Следующий() Цикл

		ТипЗаписи = ВыборкаГрупп.ТипЗаписи();
		Если ТипЗаписи = ТипЗаписиЗапроса.ИтогПоГруппировке И СчетРодитель = ВыборкаГрупп.Счет Тогда
			Продолжить;
		КонецЕсли;

		Если ВыборкаГрупп.Забалансовый Тогда
			СтрокиОстатка = ЗабалансовыеСчета.НайтиСтроки(Новый Структура("Счет", ВыборкаГрупп.Счет));
		Иначе
			СтрокиОстатка = ОсновныеСчета.НайтиСтроки(Новый Структура("Счет", ВыборкаГрупп.Счет));
		КонецЕсли;

		Если СтрокиОстатка.Количество() > 0 Тогда
			СтрокаОстатка = СтрокиОстатка[0];
			ЗаполнитьЗначенияСвойств(СтрокаОстатка, ВыборкаГрупп, "СальдоНачальноеДт,СальдоНачальноеКт,СальдоНачальноеДтРазвернутое,СальдоНачальноеКтРазвернутое");
		КонецЕсли;

		Если ТипЗаписи = ТипЗаписиЗапроса.ИтогПоИерархии Тогда
			ОбработатьВыборкуОстатка(ВыборкаГрупп.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией, "Счет"), ВыборкаГрупп.Счет);
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДатуНачалаУчета(Знач Организация)

	МенеджерЗаписиРегистра = РегистрыСведений.ДатыВводаНачальныхОстатков.СоздатьМенеджерЗаписи();
	МенеджерЗаписиРегистра.Организация = Организация;
	МенеджерЗаписиРегистра.Прочитать();
	Если МенеджерЗаписиРегистра.Выбран() Тогда
		Возврат МенеджерЗаписиРегистра.ДатаВводаНачальныхОстатков;
	Иначе
		Возврат '00010101';
	КонецЕсли;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКлючЗаписиУчетнойПолитики(Знач Организация, Знач ДатаНачалаУчета)
	
	Возврат НастройкиУчета.КлючЗаписиДействующейУчетнойПолитики("УчетнаяПолитика", Организация, ДатаНачалаУчета);
	
КонецФункции

&НаСервере
Процедура УстановитьДатуНачалаУчета(ДатаНачалаУчета)

	МенеджерЗаписиРегистра = РегистрыСведений.ДатыВводаНачальныхОстатков.СоздатьМенеджерЗаписи();
	МенеджерЗаписиРегистра.Организация = Объект.Организация;
	МенеджерЗаписиРегистра.Прочитать();
	Если НЕ МенеджерЗаписиРегистра.Выбран() Тогда
		МенеджерЗаписиРегистра.Организация = Объект.Организация;
	КонецЕсли;
	МенеджерЗаписиРегистра.ДатаВводаНачальныхОстатков = ДатаНачалаУчета;
	Если КоличествоДокументовВводаОстатков > 0 Тогда
		ПерезаписатьДокументыНаНовуюДату(Объект.Организация, ДатаНачалаУчета);
	КонецЕсли;
	МенеджерЗаписиРегистра.Записать();
	Объект.ДатаВводаОстатков = ПолучитьДатуНачалаУчета(Объект.Организация);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПерезаписатьДокументыНаНовуюДату(Знач Организация, Знач ДатаНачалаУчета)



	ЗапросПоДокументам = Новый Запрос;
	ЗапросПоДокументам.УстановитьПараметр("Организация", Организация);
	ЗапросПоДокументам.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                           |	ВводНачальныхОстатков.Ссылка,
	                           |	ВводНачальныхОстатков.Организация,
	                           |	ВводНачальныхОстатков.Проведен
	                           |ИЗ
	                           |	Документ.ВводНачальныхОстатков КАК ВводНачальныхОстатков
	                           |ГДЕ
	                           |	ВводНачальныхОстатков.Организация = &Организация
	                           |	И ВводНачальныхОстатков.ОтражатьВБухгалтерскомУчете = ИСТИНА
	                           |	И ВводНачальныхОстатков.ОтражатьВНалоговомУчете = ИСТИНА
	                           |	И ВводНачальныхОстатков.ОтражатьПоСпециальнымРегистрам = ИСТИНА";

	СписокДокументов = ЗапросПоДокументам.Выполнить().Выгрузить();

	Если СписокДокументов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	НачатьТранзакцию();

	Попытка
		Для Каждого ДокументВводаОстатков Из СписокДокументов Цикл

			ДокументОбъект = ДокументВводаОстатков.Ссылка.ПолучитьОбъект();
			ДокументОбъект.Дата = ДатаНачалаУчета;
			Если ДокументОбъект.Проведен Тогда
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Неоперативный);
			Иначе
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
			КонецЕсли;
		КонецЦикла;

	Исключение

		ОтменитьТранзакцию();

		ТекстСообщения = НСтр("ru='Не удалось заменить дату в документах ввода начальных остатков по причине: '");
		ТекстСообщения = ТекстСообщения + Символы.ПС + ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

		Возврат;

	КонецПопытки;

	ЗафиксироватьТранзакцию();

	ТекстСообщения = НСтр("ru='Изменение даты в документах ввода начальных остатков успешно завершено'");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииДатыНачалаУчетаСервер()

	УстановитьДатуНачалаУчета(Объект.ДатаВводаОстатков);

	ДатаУчетнойПолитики = ПолучитьДатуУчетнойПолитики(Объект.ДатаВводаОстатков);

	МожноИзменятьОстатки = ЗначениеЗаполнено(Объект.Организация) И ЗначениеЗаполнено(Объект.ДатаВводаОстатков)
				И УчетнаяПолитика.Существует(Объект.Организация, ДатаУчетнойПолитики);
	ОбновитьОстатки();
	УправлениеФормой();

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер(Отказ)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Отказ = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Обработки.ВводНачальныхОстатков.МожноИспользоватьПростуюФормуПомощника(Объект.Организация) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Объект.ДатаВводаОстатков = ПолучитьДатуНачалаУчета(Объект.Организация);
	КоличествоДокументовВводаОстатков = ПолучитьКоличествоДокументовВводаОстатков(Объект.Организация);

	ОбновитьФормуНаСервере();

КонецПроцедуры

&НаСервере
Процедура ПодразделениеПриИзмененииСервер()

	ОбновитьОстатки();

КонецПроцедуры

&НаСервереБезКонтекста
Функция УчетнаяПолитикаСуществует(Знач Организация, Знач Дата)
	
	Возврат УчетнаяПолитика.Существует(Организация, Дата);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Обновить(Команда)

	ОбновитьОстатки();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокДокументов()
	
	Если НЕ МожноИзменятьОстатки Тогда
		Возврат;
	КонецЕсли;

	Счет = ОпределитьТекущийСчетВФорме();
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
		Возврат;
	КонецЕсли;

	РазделУчета = ОпределитьРазделУчета(Счет);
	Если НЕ ЗначениеЗаполнено(РазделУчета) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыОтбора = Новый Структура("Дата, Организация, РазделУчета",
				Объект.ДатаВводаОстатков, Объект.Организация, РазделУчета);
	Если ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда
		ПараметрыОтбора.Вставить("ПодразделениеОрганизации", Объект.ПодразделениеОрганизации);
	КонецЕсли;
	
	ПараметрыОтбора.Вставить("ПомощникВводаНачальныхОстатков", Истина);

	ПараметрыФормы = Новый Структура("ПараметрыОтбораСписка", ПараметрыОтбора);
	ОткрытьФорму("Документ.ВводначальныхОстатков.ФормаСписка", ПараметрыФормы, ЭтаФорма, РазделУчета);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокПрочихРасходов()

	РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.ПрочиеРасходыНалоговогоУчетаУСНИИП");
	ПараметрыОтбора = Новый Структура("Дата, Организация, РазделУчета",
				Объект.ДатаВводаОстатков, Объект.Организация, РазделУчета);
	Если ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда
		ПараметрыОтбора.Вставить("ПодразделениеОрганизации", Объект.ПодразделениеОрганизации);
	КонецЕсли;
	
	ПараметрыОтбора.Вставить("ПомощникВводаНачальныхОстатков", Истина);

	ПараметрыФормы = Новый Структура("ПараметрыОтбораСписка", ПараметрыОтбора);
	ОткрытьФорму("Документ.ВводначальныхОстатков.ФормаСписка", ПараметрыФормы, ЭтаФорма, РазделУчета);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокНДСПоРеализации()

	РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.НДСНачисленный");
	ПараметрыОтбора = Новый Структура("Дата, Организация, РазделУчета",
				Объект.ДатаВводаОстатков, Объект.Организация, РазделУчета);
	Если ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда
		ПараметрыОтбора.Вставить("ПодразделениеОрганизации", Объект.ПодразделениеОрганизации);
	КонецЕсли;
	
	ПараметрыОтбора.Вставить("ПомощникВводаНачальныхОстатков", Истина);

	ПараметрыФормы = Новый Структура("ПараметрыОтбораСписка", ПараметрыОтбора);
	ОткрытьФорму("Документ.ВводначальныхОстатков.ФормаСписка", ПараметрыФормы, ЭтаФорма, РазделУчета);

КонецПроцедуры

&НаКлиенте
Процедура ВвестиБазуРаспределенияНДС(Команда)
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Организация", Объект.Организация);
	
	ПараметрыОткрытияФормы = Новый Структура;
	ПараметрыОткрытияФормы.Вставить("Отбор", СтруктураОтбора);
	
	ОткрытьФорму("РегистрСведений.БазаРаспределенияНДС.ФормаСписка", ПараметрыОткрытияФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьКонтекстныеНовости(Команда)

	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаКомандыНовости(
		ЭтаФорма,
		Команда
	);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Отказ = Ложь;
	ОрганизацияПриИзмененииСервер(Отказ);
	Если Отказ Тогда
		ОткрытьФорму("Обработка.ВводНачальныхОстатков.Форма.ФормаПростая",
		Новый Структура("Организация", Объект.Организация),
		ЭтаФорма,,,,, РежимОткрытияОкнаФормы.Независимый);
		ЭтаФорма.Закрыть();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)

	ПодразделениеПриИзмененииСервер();

КонецПроцедуры

&НаКлиенте
Процедура ДекорацияДатаВводаначальныхОстатковНажатие(Элемент)
	
	ДатаНачалаУчета = Объект.ДатаВводаОстатков;
	Если Объект.ДатаВводаОстатков = '00010101' Тогда
		ТекстЗаголовка = НСтр("ru = 'Установка даты ввода остатков'") ;
	Иначе
		ТекстЗаголовка = НСтр("ru = 'Изменение даты ввода остатков'") ;
	КонецЕсли;
	ПараметрыФормы = Новый Структура("ДатаВводаОстатков, ТекстЗаголовка", Объект.ДатаВводаОстатков, ТекстЗаголовка);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ДатаНачалаУчета", ДатаНачалаУчета);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ДекорацияДатаВводаначальныхОстатковНажатиеЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	
	ОткрытьФорму("Обработка.ВводНачальныхОстатков.Форма.ФормаУстановкиДатыНачалаВеденияУчета", ПараметрыФормы, ЭтаФорма,,,,ОповещениеОЗакрытии);
		
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияДатаВводаначальныхОстатковНажатиеЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	РезультатУстановки = РезультатЗакрытия;
	
	Если РезультатУстановки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДатаНачалаУчета = ДополнительныеПараметры.ДатаНачалаУчета;
	
	Объект.ДатаВводаОстатков = РезультатУстановки;
	Если Объект.ДатаВводаОстатков = ДатаНачалаУчета Тогда
		Возврат;
	КонецЕсли;
	
	ДатаУчетнойПолитики = ПолучитьДатуУчетнойПолитики(Объект.ДатаВводаОстатков);
	
	УчетнаяПолитикаНеЗадана = НЕ УчетнаяПолитикаСуществует(Объект.Организация, ДатаУчетнойПолитики);
	
	Если УчетнаяПолитикаНеЗадана И КоличествоДокументовВводаОстатков > 0 Тогда
		ТекстПредупреждения = НСтр("ru = 'На указанную дату не задана учетная политика организации!'");
		ПоказатьПредупреждение( , ТекстПредупреждения);
		Объект.ДатаВводаОстатков = ДатаНачалаУчета;
		Возврат;
	КонецЕсли;
	
	Если КоличествоДокументовВводаОстатков > 0 И ЗначениеЗаполнено(Объект.ДатаВводаОстатков) Тогда
		ТекстВопроса = НСтр("ru = 'Изменена дата ввода начальных остатков.
		|
		|Документы ввода остатков текущей организации будут
		|перепроведены на новую дату. 
		|
		|Продолжить?'");
		ДополнительныеПараметры = Новый Структура("ДатаНачалаУчета", ДатаНачалаУчета);
		Оповещение = Новый ОписаниеОповещения(
			"ВопросИзмененияДатыВводаНачальныхОстатковЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ПриИзмененииДатыНачалаУчетаСервер();
		Оповестить("ИзмененениеДатыВводаОстатков", Объект.Организация, ЭтотОбъект);
		ОбновитьФормуНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросИзмененияДатыВводаНачальныхОстатковЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПриИзмененииДатыНачалаУчетаСервер();
		Оповестить("ИзмененениеДатыВводаОстатков", Объект.Организация, ЭтотОбъект);
	Иначе
		Объект.ДатаВводаОстатков = ДополнительныеПараметры.ДатаНачалаУчета;
	КонецЕсли;
	
	ОбновитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУчетнаяПолитикаНажатие(Элемент)
	
	ДатаУчетнойПолитики = ПолучитьДатуУчетнойПолитики(Объект.ДатаВводаОстатков);
	УчетнаяПолитикаСуществует = УчетнаяПолитикаСуществует(Объект.Организация, ДатаУчетнойПолитики);
	
	Ключ = ПолучитьКлючЗаписиУчетнойПолитики(Объект.Организация, ДатаУчетнойПолитики);
	
	ПараметрыФормы = Новый Структура;
	Если Ключ <> Неопределено Тогда
		ПараметрыФормы.Вставить("Ключ", Ключ);
	Иначе
		ЗначенияЗаполнения = Новый Структура("Организация, Период", Объект.Организация, ДатаУчетнойПолитики);
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	КонецЕсли;
	
	ОткрытьФорму("РегистрСведений.УчетнаяПолитика.ФормаЗаписи", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ <ОсновныеСчета>

&НаКлиенте
Процедура ОсновныеСчетаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Если НЕ ЗначениеЗаполнено(ВыбраннаяСтрока) И МожноИзменятьОстатки Тогда
		Возврат;
	КонецЕсли;

	ОткрытьСписокДокументов();

КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСчетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)

	Отказ = Истина;

	Счет = ОпределитьТекущийСчетВФорме();
	Если НЕ ЗначениеЗаполнено(Счет) Тогда
		Возврат;
	КонецЕсли;

	РазделУчета = ОпределитьРазделУчета(Счет);
	Если НЕ ЗначениеЗаполнено(РазделУчета) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыОтбора = Новый Структура("Дата, Организация, РазделУчета",
		Объект.ДатаВводаОстатков,
		Объект.Организация,
		РазделУчета);
	Если ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда
		ПараметрыОтбора.Вставить("ПодразделениеОрганизации", Объект.ПодразделениеОрганизации);
	КонецЕсли;
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения, ОткрытиеИзОбработкиВводаНачальныхОстатков", ПараметрыОтбора, Истина);
	ОткрытьФорму("Документ.ВводначальныхОстатков.ФормаОбъекта", ПараметрыФормы, ЭтаФорма, РазделУчета);

КонецПроцедуры

&НаКлиенте
Процедура ОсновныеСчетаПередНачаломИзменения(Элемент, Отказ)

	Отказ = Истина;

	ОткрытьСписокДокументов();

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ <Прочие непризнанные расходы>

&НаКлиенте
Процедура ПрочиеРасходыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Если НЕ Элементы.ПрочиеРасходы.Доступность Тогда
		Возврат;
	КонецЕсли;

	ОткрытьСписокПрочихРасходов();

КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыПередНачаломИзменения(Элемент, Отказ)

	Отказ = Истина;

	ОткрытьСписокПрочихРасходов();

КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)

	Отказ = Истина;

	РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.ПрочиеРасходыНалоговогоУчетаУСНИИП");
	ПараметрыОтбора = Новый Структура("Дата, Организация, РазделУчета",
				Объект.ДатаВводаОстатков, Объект.Организация, РазделУчета);
	Если ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда
		ПараметрыОтбора.Вставить("ПодразделениеОрганизации", Объект.ПодразделениеОрганизации);
	КонецЕсли;
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения, ОткрытиеИзОбработкиВводаНачальныхОстатков", ПараметрыОтбора, Истина);
	ОткрытьФорму("Документ.ВводНачальныхОстатков.ФормаОбъекта", ПараметрыФормы, ЭтаФорма, РазделУчета);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРасходы(Команда)

	ОбновитьОстатки();

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ <НДС по реализации>

&НаКлиенте
Процедура НДСПоРеализацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	Если НЕ Элементы.НДСПоРеализации.Доступность Тогда
		Возврат;
	КонецЕсли;

	ОткрытьСписокНДСПоРеализации();

КонецПроцедуры

&НаКлиенте
Процедура НДСПоРеализацииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)

	Отказ = Истина;

	РазделУчета = ПредопределенноеЗначение("Перечисление.РазделыУчетаДляВводаОстатков.НДСНачисленный");
	ПараметрыОтбора = Новый Структура("Дата, Организация, РазделУчета",
				Объект.ДатаВводаОстатков, Объект.Организация, РазделУчета);
	Если ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда
		ПараметрыОтбора.Вставить("ПодразделениеОрганизации", Объект.ПодразделениеОрганизации);
	КонецЕсли;
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения, , ОткрытиеИзОбработкиВводаНачальныхОстатков", ПараметрыОтбора, Истина);
	ОткрытьФорму("Документ.ВводНачальныхОстатков.ФормаОбъекта", ПараметрыФормы, ЭтаФорма, РазделУчета);

КонецПроцедуры

&НаКлиенте
Процедура НДСПоРеализацииПередНачаломИзменения(Элемент, Отказ)

	Отказ = Истина;

	ОткрытьСписокНДСПоРеализации();

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНДС(Команда)

	ОбновитьОстатки();

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если ЗначениеЗаполнено(Параметры.Организация) Тогда
		Объект.Организация = Параметры.Организация;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
		Объект.ДатаВводаОстатков = ПолучитьДатуНачалаУчета(Объект.Организация);
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.ДатаВводаОстатков) Тогда
		Объект.ДатаВводаОстатков = ПолучитьДатуНачалаУчета(Объект.Организация);
	КонецЕсли;
	
	ПодготовитьФормуНаСервере();
	
	УстановитьУсловноеОформление();
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтаФорма,
		"БП.Обработка.ВводНачальныхОстатков",
		"Форма",
		НСтр("ru='Новости: Помощник ввода остатков'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РеквизитыОрганизацииЗаполнены = ОбщегоНазначенияБПКлиент.ПроверитьНаличиеОрганизаций();
	
	Если РеквизитыОрганизацииЗаполнены Тогда
		// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
		ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтаФорма);
		// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ИзменениеУчетнойПолитики" Тогда
		Если Параметр = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Объект.Организация) Тогда
			ОбновитьФормуНаСервере();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ОбновитьФормуПомощникаВводаОстатков" 
		И Источник = "ВводНачальныхОстатков" 
		И Параметр = Объект.Организация Тогда
		ОбновитьФормуНаСервере();
	ИначеЕсли ИмяСобытия = "ИзменениеОсновнойОрганизации" Тогда
		Объект.Организация = Параметр;
		ОрганизацияПриИзменении(Неопределено);
	КонецЕсли;

	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	
КонецПроцедуры

#Область СлужебныеФункцииИПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтаФорма, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

#КонецОбласти