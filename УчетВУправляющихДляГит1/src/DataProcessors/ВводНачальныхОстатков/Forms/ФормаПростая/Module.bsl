
#Область ПроцедурыИФункцииОбщегоНазначения

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьДатуУчетнойПолитики(ДатаВводаОстатков)

	Возврат ДатаВводаОстатков + 86400;

КонецФункции

&НаСервере
Процедура ПодготовитьФормуНаСервере()

	Объект.ДатаВводаОстатков              = ПолучитьДатуНачалаУчета();
	ДатаВводаОстатковПрежняя              = Объект.ДатаВводаОстатков;
	Объект.ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	КоличествоДокументовВводаОстатков     =
		Обработки.ВводНачальныхОстатков.ПолучитьКоличествоДокументовВводаОстатков(Объект.Организация);
	ОбновитьФормуНаСервере();

КонецПроцедуры

&НаСервере
Процедура ОбновитьФормуНаСервере()
	
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстЗаголовок = НСтр("ru = 'Начальные остатки (%1)'");
		ТекстЗаголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовок, Объект.Организация);
	Иначе
		ТекстЗаголовок = НСтр("ru = 'Начальные остатки'");
	КонецЕсли;
	ЭтотОбъект.Заголовок = ТекстЗаголовок;
	
	Объект.ДатаВводаОстатков = ПолучитьДатуНачалаУчета();
	ДатаВводаОстатковПрежняя = Объект.ДатаВводаОстатков;

	ДатаУчетнойПолитики = ПолучитьДатуУчетнойПолитики(Объект.ДатаВводаОстатков);
	
	ДоступностьУчетнойПолитики = ЗначениеЗаполнено(Объект.Организация)
		И ЗначениеЗаполнено(Объект.ДатаВводаОстатков);
	
	УчетнаяПолитикаЗадана = Ложь;
	Если ДоступностьУчетнойПолитики Тогда
		УчетнаяПолитикаЗадана = УчетнаяПолитикаСуществует(Объект.Организация, ДатаУчетнойПолитики);
	КонецЕсли;
	
	ВидимостьУчетнойПолитики = ДоступностьУчетнойПолитики И НЕ УчетнаяПолитикаЗадана;
	
	Элементы.ДекорацияУчетнаяПолитика.Видимость = ВидимостьУчетнойПолитики;
	
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрОрганизацияФункциональныхОпцийФормы(
		ЭтотОбъект,
		Объект.Организация,
		ДатаУчетнойПолитики);
		
	КоличествоДокументовВводаОстатков =
		Обработки.ВводНачальныхОстатков.ПолучитьКоличествоДокументовВводаОстатков(Объект.Организация);

	МожноИзменятьОстатки = ЗначениеЗаполнено(Объект.Организация) 
		И ЗначениеЗаполнено(Объект.ДатаВводаОстатков)
		И УчетнаяПолитикаЗадана;

	ЭтоПредприниматель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Организация, "ЮридическоеФизическоеЛицо") = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
		
	ПолучитьРазделыОстатков();

КонецПроцедуры

&НаСервере
Процедура ОрганизацияПриИзмененииСервер(Отказ)

	Если НЕ Обработки.ВводНачальныхОстатков.МожноИспользоватьПростуюФормуПомощника(Объект.Организация) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ОбновитьФормуНаСервере();
	Модифицированность = Ложь;

КонецПроцедуры

&НаСервереБезКонтекста
Функция УчетнаяПолитикаСуществует(Знач Организация, Знач Дата)
	
	Возврат УчетнаяПолитика.Существует(Организация, Дата);
	
КонецФункции

&НаСервере
Функция ПолучитьДатуНачалаУчета()
	
	Возврат Обработки.ВводНачальныхОстатков.ПолучитьДатуНачалаУчета(Объект.Организация);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКлючЗаписиУчетнойПолитики(Знач Организация, Знач ДатаНачалаУчета)
	
	Возврат НастройкиУчета.КлючЗаписиДействующейУчетнойПолитики("УчетнаяПолитика", Организация, ДатаНачалаУчета);
	
КонецФункции

&НаСервере
Процедура УстановитьДатуНачалаУчета(ДатаНачалаУчета)

	Если Обработки.ВводНачальныхОстатков.УстановитьДатуНачалаУчета(Объект.Организация, ДатаНачалаУчета) Тогда
		Модифицированность = Ложь;
	КонецЕсли;
	
	Объект.ДатаВводаОстатков = ПолучитьДатуНачалаУчета();
	ДатаВводаОстатковПрежняя = Объект.ДатаВводаОстатков;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьРазделыОстатков()
	
	Объект.РазделыВводаОстатков.Очистить();
	
	МенеджерОбработки = Обработки.ВводНачальныхОстатков;
	
	ПараметрыПроверки = Новый Структура("Организация, ДатаВводаОстатков", 
		Объект.Организация, Объект.ДатаВводаОстатков);
	
	// Деньги - есть у всех
	НоваяСтрока = Объект.РазделыВводаОстатков.Добавить();
	НоваяСтрока.Раздел             = НСтр("ru='Деньги'");
	НоваяСтрока.ИмяРаздела         = "Деньги";
	НоваяСтрока.ЕстьОстаткиРаздела = МенеджерОбработки.ЕстьОстаткиРаздела(НоваяСтрока.ИмяРаздела, ПараметрыПроверки);
	НоваяСтрока.Описание           = НСтр("ru='Наличные деньги, а также деньги на банковских счетах'");
	
	// Запасы - только при включенной функциональности
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДокументыПоступления") Тогда
		НоваяСтрока = Объект.РазделыВводаОстатков.Добавить();
		НоваяСтрока.Раздел             = НСтр("ru='Запасы'");
		НоваяСтрока.ИмяРаздела         = "Запасы";
		НоваяСтрока.ЕстьОстаткиРаздела = МенеджерОбработки.ЕстьОстаткиРаздела(НоваяСтрока.ИмяРаздела, ПараметрыПроверки);
		НоваяСтрока.Описание           = НСтр("ru='Товары, материалы, продукция и другие материальные ценности'");
	КонецЕсли;
	
	// Основные средства - только при включенной функциональности
	Если ПолучитьФункциональнуюОпцию("ВедетсяУчетОсновныхСредств") Тогда
		НоваяСтрока = Объект.РазделыВводаОстатков.Добавить();
		НоваяСтрока.Раздел     = НСтр("ru='Основные средства'");
		НоваяСтрока.ИмяРаздела = "ОсновныеСредства";
		НоваяСтрока.ЕстьОстаткиРаздела = МенеджерОбработки.ЕстьОстаткиРаздела(НоваяСтрока.ИмяРаздела, ПараметрыПроверки);
		НоваяСтрока.Описание   = НСтр("ru='Здания, станки, транспортные средства и прочее оборудование'");
	КонецЕсли;
	
	// Нематериальные активы - только при включенной функциональности
	Если ПолучитьФункциональнуюОпцию("ВедетсяУчетНМА") Тогда
		НоваяСтрока = Объект.РазделыВводаОстатков.Добавить();
		НоваяСтрока.Раздел     = НСтр("ru='Нематериальные активы'");
		НоваяСтрока.ИмяРаздела = "НематериальныеАктивы";
		НоваяСтрока.ЕстьОстаткиРаздела = МенеджерОбработки.ЕстьОстаткиРаздела(НоваяСтрока.ИмяРаздела, ПараметрыПроверки);
		НоваяСтрока.Описание   = НСтр("ru='Права на товарные знаки, патенты, а также сведения о прочих нематериальных активах'");
	КонецЕсли;
	
	// Поставщики - только при включенной функциональности
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДокументыПоступления") Тогда
		НоваяСтрока = Объект.РазделыВводаОстатков.Добавить();
		НоваяСтрока.Раздел     = НСтр("ru='Поставщики'");
		НоваяСтрока.ИмяРаздела = "Поставщики";
		НоваяСтрока.ЕстьОстаткиРаздела = МенеджерОбработки.ЕстьОстаткиРаздела(НоваяСтрока.ИмяРаздела, ПараметрыПроверки);
		НоваяСтрока.Описание   = НСтр("ru='Задолженность перед поставщиками за товары и услуги, а также сведения о выданных авансах'");
	КонецЕсли;
	
	// Покупатели - только при включенной функциональности
	Если ПолучитьФункциональнуюОпцию("ИспользоватьДокументыРеализации") Тогда
		НоваяСтрока = Объект.РазделыВводаОстатков.Добавить();
		НоваяСтрока.Раздел     = НСтр("ru='Покупатели'");
		НоваяСтрока.ИмяРаздела = "Покупатели";
		НоваяСтрока.ЕстьОстаткиРаздела = МенеджерОбработки.ЕстьОстаткиРаздела(НоваяСтрока.ИмяРаздела, ПараметрыПроверки);
		НоваяСтрока.Описание   = НСтр("ru='Задолженность покупателей за товары и услуги, а также сведения о полученных авансах'");
	КонецЕсли;
	
	// Комиссионеры - только при включенной функциональности
	Если ПолучитьФункциональнуюОпцию("ОсуществляетсяРеализацияТоваровУслугЧерезКомиссионеров") Тогда
		НоваяСтрока = Объект.РазделыВводаОстатков.Добавить();
		НоваяСтрока.Раздел     = НСтр("ru='Комиссионеры'");
		НоваяСтрока.ИмяРаздела = "Комиссионеры";
		НоваяСтрока.ЕстьОстаткиРаздела = МенеджерОбработки.ЕстьОстаткиРаздела(НоваяСтрока.ИмяРаздела, ПараметрыПроверки);
		НоваяСтрока.Описание   = НСтр("ru='Товары, переданные на реализацию комиссионеру'");
	КонецЕсли;
	
	// Зарплата и Подотчет - только при включенной функциональности
	//            а для ИП при условии что есть наемные работники
	ИспользуетсяПодсистемаУчетаЗарплатыИКадров = УчетЗарплаты.ИспользуетсяПодсистемаУчетаЗарплатыИКадров();
	ВедутсяРасчетыПоЗаработнойПлате = Ложь;
	Если ИспользуетсяПодсистемаУчетаЗарплатыИКадров Тогда
		ВедутсяРасчетыПоЗаработнойПлате = Истина;
		Если ЭтоПредприниматель
			И НЕ УчетЗарплаты.ИПИспользуетТрудНаемныхРаботников(Объект.Организация) Тогда
			ВедутсяРасчетыПоЗаработнойПлате = Ложь;
		КонецЕсли;
	КонецЕсли;
		
	Если ВедутсяРасчетыПоЗаработнойПлате Тогда
		НоваяСтрока = Объект.РазделыВводаОстатков.Добавить();
		НоваяСтрока.Раздел     = НСтр("ru='Зарплата'");
		НоваяСтрока.ИмяРаздела = "Зарплата";
		НоваяСтрока.ЕстьОстаткиРаздела = МенеджерОбработки.ЕстьОстаткиРаздела(НоваяСтрока.ИмяРаздела, ПараметрыПроверки);
		НоваяСтрока.Описание   = НСтр("ru='Расчеты с сотрудниками по зарплате и выданным в счет зарплаты авансам'");
	КонецЕсли;
	
	// Подотчет - только при включенной функциональности
	Если ИспользуетсяПодсистемаУчетаЗарплатыИКадров Тогда
		НоваяСтрока = Объект.РазделыВводаОстатков.Добавить();
		НоваяСтрока.Раздел     = НСтр("ru='Подотчет'");
		НоваяСтрока.ИмяРаздела = "Подотчет";
		НоваяСтрока.ЕстьОстаткиРаздела = МенеджерОбработки.ЕстьОстаткиРаздела(НоваяСтрока.ИмяРаздела, ПараметрыПроверки);
		НоваяСтрока.Описание   = НСтр("ru='Расчеты с подотчетными лицами по выданным или подлежащим возмещению суммам'");
	КонецЕсли;
	
	// Налоги и взносы - есть у всех
	НоваяСтрока = Объект.РазделыВводаОстатков.Добавить();
	НоваяСтрока.Раздел     = НСтр("ru='Налоги и взносы'");
	НоваяСтрока.ИмяРаздела = "НалогиИВзносы";
	НоваяСтрока.ЕстьОстаткиРаздела = МенеджерОбработки.ЕстьОстаткиРаздела(НоваяСтрока.ИмяРаздела, ПараметрыПроверки);
	НоваяСтрока.Описание   = НСтр("ru='Расчеты с налоговыми органами и внебюджетными фондами по налогам и взносам'");
	
	//Кредиты и займы - могуть быть у любого, но в режиме интеграции с банком их учет не ведется.
	ЭтоИнтерфейсИнтеграцииСБанком = ОбщегоНазначенияБП.ЭтоИнтерфейсИнтеграцииСБанком();
	Если Не ЭтоИнтерфейсИнтеграцииСБанком Тогда
		НоваяСтрока = Объект.РазделыВводаОстатков.Добавить();
		НоваяСтрока.Раздел     = НСтр("ru='Кредиты и займы'");
		НоваяСтрока.ИмяРаздела = "КредитыИЗаймы";
		НоваяСтрока.ЕстьОстаткиРаздела = МенеджерОбработки.ЕстьОстаткиРаздела(НоваяСтрока.ИмяРаздела, ПараметрыПроверки);
		НоваяСтрока.Описание   = НСтр("ru='Действующие кредиты (займы) и начисленные проценты по ним'");
	КонецЕсли;
	
	// Уставный капитал - только у юридических лиц
	Если НЕ ЭтоПредприниматель Тогда
		НоваяСтрока = Объект.РазделыВводаОстатков.Добавить();
		НоваяСтрока.Раздел     = НСтр("ru='Уставный капитал'");
		НоваяСтрока.ИмяРаздела = "Капитал";
		НоваяСтрока.ЕстьОстаткиРаздела = МенеджерОбработки.ЕстьОстаткиРаздела(НоваяСтрока.ИмяРаздела, ПараметрыПроверки);
		НоваяСтрока.Описание   = НСтр("ru='Расчеты с учредителями по взносам в уставный капитал'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СтруктураПараметровВспомогательнойФормы()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация",                    Объект.Организация);
	СтруктураПараметров.Вставить("ДатаВводаОстатков",              Объект.ДатаВводаОстатков);
	СтруктураПараметров.Вставить("ВалютаРегламентированногоУчета", Объект.ВалютаРегламентированногоУчета);
	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиенте
Функция ОповещениеФормыПомощника(ТекущаяСтрока)
	
	ОповещениеФормы = Новый ОписаниеОповещения("ОбработчикЗакрытияФормыРедактированияЗавершение", ЭтотОбъект);
	Возврат ОповещениеФормы;
	
КонецФункции

&НаКлиенте
Процедура ОбработчикЗакрытияФормыРедактированияЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущаяСтрока = Элементы.РазделыВводаОстатков.ТекущиеДанные;
	ТекущаяСтрока.ЕстьОстаткиРаздела = ПроверитьОстаткиРаздела(ТекущаяСтрока.ИмяРаздела,
		Новый Структура("Организация, ДатаВводаОстатков", Объект.Организация, Объект.ДатаВводаОстатков));
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьОстаткиРаздела(ИмяРаздела, ПараметрыПроверки)
	
	Возврат Обработки.ВводНачальныхОстатков.ЕстьОстаткиРаздела(ИмяРаздела, ПараметрыПроверки);
	
КонецФункции

&НаКлиенте
Процедура ВопросИзменитьДатуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		УстановитьДатуНачалаУчета(ДополнительныеПараметры.ДатаВводаОстатков);
		Оповестить("ИзмененениеДатыВводаОстатков",Объект.Организация, "ВводНачальныхОстатков");
	Иначе
		Объект.ДатаВводаОстатков = ПолучитьДатуНачалаУчета();
		Модифицированность = Ложь;
	КонецЕсли;
	ДатаВводаОстатковПрежняя = Объект.ДатаВводаОстатков;
	
	Если ДополнительныеПараметры.ПризнакЗакрытия Тогда
		ЭтотОбъект.Закрыть();
	КонецЕсли;
	
	ПараметрыПодчиненнойФормы = ДополнительныеПараметры.ПараметрыПодчиненнойФормы;
	Если ПараметрыПодчиненнойФормы <> Неопределено Тогда
		ОткрытьПодчиненнуюФорму(ПараметрыПодчиненнойФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПодчиненнуюФорму(ПараметрыПодчиненнойФормы)
	
	ОткрытьФорму(ПараметрыПодчиненнойФормы.ИмяФормы, 
		СтруктураПараметровВспомогательнойФормы(),
		ЭтотОбъект, 
		ПараметрыПодчиненнойФормы.ИдентификаторОкнаФормы,
		,
		,
		ОповещениеФормыПомощника(ПараметрыПодчиненнойФормы.ТекущаяСтрока), 
		РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

#Область ОбработчикиЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)

	Отказ = Ложь;
	ОрганизацияПриИзмененииСервер(Отказ);
	Если Отказ Тогда
		ОткрытьФорму("Обработка.ВводНачальныхОстатков.Форма.Форма",
			Новый Структура("Организация", Объект.Организация),
			ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.Независимый);
			Модифицированность = Ложь;
		ЭтотОбъект.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияУчетнаяПолитикаНажатие(Элемент)
	
	ДатаУчетнойПолитики = ПолучитьДатуУчетнойПолитики(Объект.ДатаВводаОстатков);
	УчетнаяПолитикаСуществует = УчетнаяПолитикаСуществует(Объект.Организация, ДатаУчетнойПолитики);
	
	Ключ = ПолучитьКлючЗаписиУчетнойПолитики(Объект.Организация, ДатаУчетнойПолитики);
	
	ПараметрыФормы = Новый Структура;
	Если Ключ <> Неопределено Тогда
		ПараметрыФормы.Вставить("Ключ", Ключ);
	Иначе
		ЗначенияЗаполнения = Новый Структура("Организация, Период", Объект.Организация, ДатаУчетнойПолитики);
		ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	КонецЕсли;
	
	ОткрытьФорму("РегистрСведений.УчетнаяПолитика.ФормаЗаписи", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаВводаОстатковПриИзменении(Элемент)
	
	Если КонецДня(ДатаВводаОстатковПрежняя) <> КонецМесяца(Объект.ДатаВводаОстатков) Тогда
		Объект.ДатаВводаОстатков = КонецМесяца(Объект.ДатаВводаОстатков);
		ОтработатьИзменениеДатыНачалаУчета();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтработатьИзменениеДатыНачалаУчета(ПараметрыПодчиненнойФормы = Неопределено)
	
	Если КоличествоДокументовВводаОстатков <> 0 Тогда
		ПараметрыОтвета = Новый Структура("ДатаВводаОстатков, ПризнакЗакрытия", Объект.ДатаВводаОстатков, Ложь);
		ПараметрыОтвета.Вставить("ПараметрыПодчиненнойФормы", ПараметрыПодчиненнойФормы);
		ТекстВопроса = НСтр("ru='Изменена дата остатков. 
		|Перезаписать все введенные данные на новую дату?'");
		Оповещение = Новый ОписаниеОповещения("ВопросИзменитьДатуЗавершение", ЭтотОбъект, ПараметрыОтвета);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет,,);
		Возврат;
	Иначе
		УстановитьДатуНачалаУчета(Объект.ДатаВводаОстатков);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ОрганизацияОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиТабличныхЧастей

&НаКлиенте
Процедура РазделыВводаОстатковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = Элементы.РазделыВводаОстатков.ТекущиеДанные;
	ИдентификаторОкнаФормы = Строка(УникальныйИдентификатор) + ТекущаяСтрока.ИмяРаздела;
	
	ПараметрыПодчиненнойФормы = Новый Структура();
	ПараметрыПодчиненнойФормы.Вставить("ИмяФормы", "Обработка.ВводНачальныхОстатков.Форма.Форма_" + ТекущаяСтрока.ИмяРаздела);
	ПараметрыПодчиненнойФормы.Вставить("ИдентификаторОкнаФормы", ИдентификаторОкнаФормы);
	ПараметрыПодчиненнойФормы.Вставить("ТекущаяСтрока", ТекущаяСтрока);
	
	Если Модифицированность Тогда
		ОтработатьИзменениеДатыНачалаУчета(ПараметрыПодчиненнойФормы);
	КонецЕсли;
	
	ОткрытьПодчиненнуюФорму(ПараметрыПодчиненнойФормы);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если ЗначениеЗаполнено(Параметры.Организация) Тогда
		Объект.Организация = Параметры.Организация;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаВводаОстатков) Тогда
		Объект.ДатаВводаОстатков = ПолучитьДатуНачалаУчета();
	КонецЕсли;
	ДатаВводаОстатковПрежняя = Объект.ДатаВводаОстатков;
	
	ПодготовитьФормуНаСервере();
	
	ИмяОтчета = "";
	Если Параметры.Свойство("ОткрытИзОтчета", ИмяОтчета) Тогда
		РазделыИОтчеты = ПолучитьСоответствиеОтчетовРазделам();
		Отбор = Новый Структура("ИмяРаздела", РазделыИОтчеты[ИмяОтчета]);
		СтрокаРаздела = Объект.РазделыВводаОстатков.НайтиСтроки(Отбор);
		Элементы.РазделыВводаОстатков.ТекущаяСтрока = СтрокаРаздела[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	ОбработкаНовостейПереопределяемый.КонтекстныеНовости_ПриСозданииНаСервере(
		ЭтотОбъект,
		"БП.Обработка.ВводНачальныхОстатков",
		"Форма",
		НСтр("ru='Новости: Помощник ввода остатков'"),
		ИдентификаторыСобытийПриОткрытии
	);
	// Конец ИнтернетПоддержкаПользователей.Новости.КонтекстныеНовости_ПриСозданииНаСервере

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСоответствиеОтчетовРазделам()
	
	РазделыИОтчеты = Новый Соответствие;
	РазделыИОтчеты.Вставить("ОстаткиДенежныхСредств",   "Деньги");
	РазделыИОтчеты.Вставить("ОстаткиТоваров",           "Запасы");
	РазделыИОтчеты.Вставить("ЗадолженностьПокупателей", "Покупатели");
	РазделыИОтчеты.Вставить("ЗадолженностьПоставщикам", "Поставщики");
	РазделыИОтчеты.Вставить("ОбъектыПереданныеВАренду", "ОсновныеСредства");
	
	Возврат РазделыИОтчеты;
	
КонецФункции

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ИзменениеУчетнойПолитики" Тогда
		Если Параметр = ОбщегоНазначенияБПВызовСервераПовтИсп.ГоловнаяОрганизация(Объект.Организация) Тогда
			ОбновитьФормуНаСервере();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ОбновитьФормуПомощникаВводаОстатков" 
		И Источник = "ВводНачальныхОстатков" 
		И Параметр = Объект.Организация Тогда
		ОбновитьФормуНаСервере();
	ИначеЕсли ИмяСобытия = "ИзменениеОсновнойОрганизации" Тогда
		Объект.Организация = Параметр;
		ОрганизацияПриИзменении(Неопределено);
	КонецЕсли;
	
	// ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения
	ОбработкаНовостейКлиент.КонтекстныеНовости_ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр, Источник);
	// Конец ИнтернетПоддержкаПользователей.Новости.ОбработкаОповещения

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы И Модифицированность Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Если КоличествоДокументовВводаОстатков <> 0 Тогда
			Отказ = Истина;
			ПараметрыОтвета = Новый Структура("ДатаВводаОстатков, ПризнакЗакрытия, ПараметрыПодчиненнойФормы",
				Объект.ДатаВводаОстатков, Истина, Неопределено);
			ТекстВопроса = НСтр("ru='Изменена дата остатков. 
				|Перезаписать все введенные данные на новую дату?'");
			Оповещение = Новый ОписаниеОповещения("ВопросИзменитьДатуЗавершение", ЭтотОбъект, ПараметрыОтвета);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет,,);
		Иначе
			УстановитьДатуНачалаУчета(Объект.ДатаВводаОстатков);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РеквизитыОрганизацииЗаполнены = ОбщегоНазначенияБПКлиент.ПроверитьНаличиеОрганизаций();
	
	Если РеквизитыОрганизацииЗаполнены Тогда
		
		// ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
		ОбработкаНовостейКлиент.КонтекстныеНовости_ПриОткрытии(ЭтотОбъект);
		// Конец ИнтернетПоддержкаПользователей.Новости.ПриОткрытии
		
	Иначе
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеФункцииИПроцедуры

// Процедура показывает новости, требующие прочтения (важные и очень важные)
//
// Параметры:
//  Нет
//
&НаКлиенте
Процедура Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии()

	// ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии
	ИдентификаторыСобытийПриОткрытии = "ПриОткрытии";
	// Конец ИнтернетПоддержкаПользователей.Новости.Подключаемый_ПоказатьНовостиТребующиеПрочтенияПриОткрытии

	ОбработкаНовостейКлиент.КонтекстныеНовости_ПоказатьНовостиТребующиеПрочтенияПриОткрытии(ЭтотОбъект, ИдентификаторыСобытийПриОткрытии);

КонецПроцедуры

#КонецОбласти
