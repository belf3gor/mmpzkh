
////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиентеНаСервереБезКонтекста
// Управляет видимостью элементов формы.
//
Процедура УправлениеФормой(Форма)
	
	Элементы = Форма.Элементы;
	
	Элементы.ГруппаПараметрыТиповогоДокумента.Видимость = (Форма.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийОтраженияНачисленийВРеглУчете.ОтражениеДокументамиРеализации"));
	
	Элементы.ПодразделениеОрганизации.Видимость = (Форма.ТипДокументаОтражения = "Акт об оказании производственных услуг" И Форма.ВестиУчетЗатратПоПодразделениям);
	
	Элементы.ГруппаПараметрыОтраженияЛьгот.Видимость = (Форма.ИспользоватьПараметрыКомпенсацииЛьгот = Истина);
	
	Форма.НДС = СформироватьНадписьНДС(Форма)
	
КонецПроцедуры // УправлениеФормой()

&НаКлиентеНаСервереБезКонтекста
// Управляет видимостью элементов формы.
//
Функция СформироватьНадписьНДС(Форма)
	
	ТекстНадписи = "";
	
	Если Форма.ДокументБезНДС Тогда
		ТекстНадписи = "Документы без НДС";
	ИначеЕсли Форма.СуммаВключаетНДС Тогда
		ТекстНадписи = "НДС в сумме";
	Иначе
		ТекстНадписи = "НДС сверху";
	КонецЕсли;
	
	Возврат ТекстНадписи;
	
КонецФункции

&НаКлиенте
// Обработчик ответа на вопрос о закрытии формы, вызванного в процедуре "ПередЗакрытием".
//
Процедура ВопросПередЗакрытиемФормыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПеренестиВДокумент = Истина;
		Закрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		ПеренестиВДокумент = Ложь;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Проверяет заполненность необходимых реквизитов перед закрытием формы.
//
Функция ПроверитьЗаполнениеНаКлиенте()

	Отказ = Ложь;

	Если ВидОперации.Пустая() Тогда
		ТекстСообщения = "Поле ""Вид операции"" не заполнено";
		Поле = "ВидОперации";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
	КонецЕсли;
	
	Если СпособЗачетаАвансов.Пустая() Тогда
		ТекстСообщения = "Поле ""Зачет авансов"" не заполнено";
		Поле = "СпособЗачетаАвансов";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
	КонецЕсли;
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийОтраженияНачисленийВРеглУчете.ОтражениеДокументамиРеализации") Тогда
		
		Если ТипДокументаОтражения = "" Тогда
			ТекстСообщения = "Поле ""Тип документа"" не заполнено";
			Поле = "ТипДокументаОтражения";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
		КонецЕсли;
		
		Если ТипДокументаОтражения = "Акт об оказании производственных услуг"
			 И ВестиУчетЗатратПоПодразделениям
			 И ПодразделениеОрганизации.Пустая() Тогда
			ТекстСообщения = "Поле ""Подразделение затрат"" не заполнено";
			Поле = "ПодразделениеОрганизации";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
		КонецЕсли;
		
		Если ИспользоватьПараметрыКомпенсацииЛьгот Тогда
			
			Если КонтрагентКомпенсацииЛьгот.Пустая() Тогда
				ТекстСообщения = "Поле ""Контрагент"" не заполнено";
				Поле = "КонтрагентКомпенсацииЛьгот";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
			КонецЕсли;
			
			Если ДоговорКонтрагентаКомпенсацииЛьгот.Пустая() Тогда
				ТекстСообщения = "Поле ""Договор"" не заполнено";
				Поле = "ДоговорКонтрагентаКомпенсацииЛьгот";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , Поле, "", Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
// Обработчик формы "ПриСозданииНаСервере".
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, Параметры, "Организация, ВидОперации, СпособЗачетаАвансов,
												  |ТипДокументаОтражения, ПодразделениеОрганизации,
												  |ДокументБезНДС, СуммаВключаетНДС,
												  |КонтрагентКомпенсацииЛьгот, ДоговорКонтрагентаКомпенсацииЛьгот,
												  |ИспользоватьПараметрыКомпенсацииЛьгот, ВестиУчетЗатратПоПодразделениям");
	
	Заголовок = "Параметры отражения: " + Организация;
	
	ПлательщикНДС = УПЖКХ_ТиповыеМетодыСервер.ПлательщикНДС(Организация, КонецМесяца(ТекущаяДата()));
	
	СписокТиповДокументов = Новый СписокЗначений();
	СписокТиповДокументов.Добавить("Акт об оказании производственных услуг", "Акт об оказании производственных услуг");
	СписокТиповДокументов.Добавить("Реализация товаров и услуг",             "Реализация товаров и услуг");
	
	Для Каждого ТекТипДокумента Из СписокТиповДокументов Цикл
		Элементы.ТипДокументаОтражения.СписокВыбора.Добавить(ТекТипДокумента.Значение, ТекТипДокумента.Представление);
	КонецЦикла;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик формы "ПередЗакрытием".
//
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы И (Модифицированность ИЛИ ПеренестиДанные) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Модифицированность И Не ПеренестиДанные Тогда
		Отказ = Истина;
		ТекстВопроса = НСтр("ru = 'Данные были изменены. Сохранить изменения?'");
		
		Оповещение = Новый ОписаниеОповещения("ВопросПередЗакрытиемФормыЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
	КонецЕсли;

	Если ПеренестиДанные И Не Отказ Тогда
		Отказ = ПроверитьЗаполнениеНаКлиенте();
	КонецЕсли;

	Если Отказ Тогда
		ПеренестиВДокумент = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик формы "ПриЗакрытии".
//
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ПеренестиДанные Тогда
		СтруктураРезультат = Новый Структура("ВидОперации, СпособЗачетаАвансов,
											 |ТипДокументаОтражения, ПодразделениеОрганизации,
											 |ДокументБезНДС, СуммаВключаетНДС,
											 |КонтрагентКомпенсацииЛьгот, ДоговорКонтрагентаКомпенсацииЛьгот");
		
		ЗаполнитьЗначенияСвойств(СтруктураРезультат, ЭтаФорма);
		ОповеститьОВыборе(СтруктураРезультат);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ВидОперации".
//
Процедура ВидОперацииПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "ТипДокументаОтражения".
//
Процедура ТипДокументаОтраженияПриИзменении(Элемент)
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "Нажатие" поля "НДС".
//
Процедура НДСНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеНДСЗавершение", ЭтотОбъект);
	
	СписокКоманд = Новый СписокЗначений;
	
	Если Не ПлательщикНДС Тогда
		СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.ДокументБезНДС"), "Документы без НДС");
	КонецЕсли;
	СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДССверху"));
	СписокКоманд.Добавить(ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме"));
	
	ПоказатьВыборИзМеню(ОповещениеОЗакрытии, СписокКоманд, Элементы.НДС);
	
КонецПроцедуры

&НаКлиенте
// Обработчик оповещения вызываемый из процедуры "НДСНажатие".
//
Процедура ОбработатьИзмененияПоКнопкеНДСЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ДокументБезНДСДоИзменения   = ДокументБезНДС;
	СуммаВключаетНДСДоИзменения = СуммаВключаетНДС;
	
	Если РезультатЗакрытия = Неопределено Тогда
		Возврат;
	ИначеЕсли РезультатЗакрытия.Значение = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.ДокументБезНДС") Тогда
		ДокументБезНДС = Истина;
	ИначеЕсли РезультатЗакрытия.Значение = ПредопределенноеЗначение("Перечисление.ВариантыРасчетаНДС.НДСВСумме") Тогда
		ДокументБезНДС   = Ложь;
		СуммаВключаетНДС = Истина;
	Иначе
		ДокументБезНДС   = Ложь;
		СуммаВключаетНДС = Ложь;
	КонецЕсли;
	
	Если Не ДокументБезНДСДоИзменения = ДокументБезНДС
		 ИЛИ Не СуммаВключаетНДСДоИзменения = СуммаВключаетНДС Тогда
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "СпособЗачетаАвансов".
//
Процедура СпособЗачетаАвансовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СпособыЗачетаАвансов.Автоматически"));
	ДанныеВыбора.Добавить(ПредопределенноеЗначение("Перечисление.СпособыЗачетаАвансов.НеЗачитывать"));
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "ПриИзменении" поля "КонтрагентКомпенсацииЛьгот".
//
Процедура КонтрагентКомпенсацииЛьготПриИзменении(Элемент)
	
	УПЖКХ_РаботаСЛицевымиСчетами.УстановитьДоговорКонтрагента(ДоговорКонтрагентаКомпенсацииЛьгот, КонтрагентКомпенсацииЛьгот, Организация);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
// Обработчик команды формы "ОК".
//
Процедура КомандаОК(Команда)
	
	ПеренестиДанные = Истина;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды формы "Отмена".
//
Процедура КомандаОтмена(Команда)
	
	ПеренестиДанные    = Ложь;
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры
