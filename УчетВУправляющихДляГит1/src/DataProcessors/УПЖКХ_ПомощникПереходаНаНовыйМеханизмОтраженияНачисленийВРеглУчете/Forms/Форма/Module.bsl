
#Область ПрочиеПроцедурыИФункции

&НаСервере
// Заполняет табличную часть "ОтражениеНачислений" сведениями
// об остатках сумм начислений к отражению по организациям.
//
Процедура ЗаполнитьТЧОтражениеНачислений()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.Организация,
	|	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.ЭтоЛьгота
	|ПОМЕСТИТЬ втНаличиеЛьготНачисленныхОтдельно
	|ИЗ
	|	РегистрНакопления.КВП_НачислениеДляОтраженияВРеглУчете.Остатки(, ЭтоЛьгота) КАК КВП_НачислениеДляОтраженияВРеглУчетеОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КВП_НачислениеДляОтраженияВРеглУчетеОстатки.СуммаОстаток, 0) = 0
	|				ИЛИ ЕСТЬNULL(КВП_УчетнаяПолитикаТСЖСрезПоследних.ОтражатьНачисленияВРеглУчете, ЛОЖЬ) = ЛОЖЬ
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Статус,
	|	Организации.Ссылка КАК Организация,
	|	ЕСТЬNULL(КВП_НачислениеДляОтраженияВРеглУчетеОстатки.СуммаОстаток, 0) КАК СуммаОстаток,
	|	ЕСТЬNULL(втНаличиеЛьготНачисленныхОтдельно.ЭтоЛьгота, ЛОЖЬ) КАК ИспользоватьПараметрыКомпенсацииЛьгот,
	|	ЕСТЬNULL(КВП_УчетнаяПолитикаТСЖСрезПоследних.ОтражатьНачисленияВРеглУчете, ЛОЖЬ) КАК ОтражатьНачисленияВРеглУчете
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КВП_НачислениеДляОтраженияВРеглУчете.Остатки(&Дата, ) КАК КВП_НачислениеДляОтраженияВРеглУчетеОстатки
	|		ПО КВП_НачислениеДляОтраженияВРеглУчетеОстатки.Организация = Организации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНаличиеЛьготНачисленныхОтдельно КАК втНаличиеЛьготНачисленныхОтдельно
	|		ПО Организации.Ссылка = втНаличиеЛьготНачисленныхОтдельно.Организация
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КВП_УчетнаяПолитикаТСЖ.СрезПоследних(&Дата, ) КАК КВП_УчетнаяПолитикаТСЖСрезПоследних
	|		ПО Организации.Ссылка = КВП_УчетнаяПолитикаТСЖСрезПоследних.Организация";
	
	Запрос.УстановитьПараметр("Дата", Новый Граница(КонецМесяца(ТекущаяДата()), ВидГраницы.Включая));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		НоваяСтрока = ОтражениеНачислений.Добавить();
		
		НоваяСтрока.Организация                  = Выборка.Организация;
		НоваяСтрока.СуммаОстаток                 = Выборка.СуммаОстаток;
		НоваяСтрока.ОтражатьНачисленияВРеглУчете = Выборка.ОтражатьНачисленияВРеглУчете;
		НоваяСтрока.Статус                       = Выборка.Статус;
		
		Если Не Выборка.СуммаОстаток = 0
			 И Выборка.ОтражатьНачисленияВРеглУчете Тогда
			
			НоваяСтрока.ВидОперации           = Перечисления.КВП_ВидыОперацийОтраженияНачисленийВРеглУчете.ОтражениеУпрощенное;
			НоваяСтрока.СпособЗачетаАвансов   = Перечисления.СпособыЗачетаАвансов.Автоматически;
			НоваяСтрока.ТипДокументаОтражения = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("КВП_ОтражениеНачисленийВРеглУчете", "ТипДокументаОтражения");
			
			Если ВестиУчетЗатратПоПодразделениям Тогда
				НоваяСтрока.ПодразделениеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ПодразделениеПоУмолчанию(Выборка.Организация);
			КонецЕсли;
			
			ПлательщикНДС = УПЖКХ_ТиповыеМетодыСервер.ПлательщикНДС(Выборка.Организация, КонецМесяца(ТекущаяДата()));
			
			НоваяСтрока.ДокументБезНДС = ?(ПлательщикНДС, Ложь, Истина);
			
			НоваяСтрока.СуммаВключаетНДС = Истина;
			
			НоваяСтрока.ИспользоватьПараметрыКомпенсацииЛьгот = Выборка.ИспользоватьПараметрыКомпенсацииЛьгот;
			
			Если Выборка.ИспользоватьПараметрыКомпенсацииЛьгот Тогда
				НоваяСтрока.КонтрагентКомпенсацииЛьгот         = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("КВП_ОтражениеНачисленийВРеглУчете", "КонтрагентКомпенсацииЛьгот");
				НоваяСтрока.ДоговорКонтрагентаКомпенсацииЛьгот = УПЖКХ_ТиповыеМетодыВызовСервера.ХранилищеОбщихНастроекЗагрузить("КВП_ОтражениеНачисленийВРеглУчете", "ДоговорКонтрагентаКомпенсацииЛьгот");
			КонецЕсли;
			
			ВыполнитьОтражениеНачислений = Истина;
			
			ЗаполнитьКолонкуПараметрыОтражения(НоваяСтрока, ВестиУчетЗатратПоПодразделениям);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
// Заполняет колонку "ПараметрыОтражения" таблицы значений "ОтражениеНачислений".
//
Процедура ЗаполнитьКолонкуПараметрыОтражения(СтрокаТЧ, ВестиУчетЗатратПоПодразделениям)
	
	ТекстЯчейки = "";
	
	ОтражениеУпрощенное              = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийОтраженияНачисленийВРеглУчете.ОтражениеУпрощенное");
	ОтражениеДокументамиРеализации   = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийОтраженияНачисленийВРеглУчете.ОтражениеДокументамиРеализации");
	СпособЗачетаАвансовАвтоматически = ПредопределенноеЗначение("Перечисление.СпособыЗачетаАвансов.Автоматически");
	СпособЗачетаАвансовНеЗачитывать  = ПредопределенноеЗначение("Перечисление.СпособыЗачетаАвансов.НеЗачитывать");
	
	Если СтрокаТЧ.ВидОперации = ОтражениеУпрощенное Тогда
		ТекстЯчейки = ТекстЯчейки + ОтражениеУпрощенное + Символы.ПС;
	ИначеЕсли СтрокаТЧ.ВидОперации = ОтражениеДокументамиРеализации Тогда
		ТекстЯчейки = ТекстЯчейки + ОтражениеДокументамиРеализации + Символы.ПС;
	КонецЕсли;
	
	Если СтрокаТЧ.СпособЗачетаАвансов = СпособЗачетаАвансовАвтоматически Тогда
		ТекстЯчейки = ТекстЯчейки + СпособЗачетаАвансовАвтоматически + Символы.ПС;
	ИначеЕсли СтрокаТЧ.СпособЗачетаАвансов = СпособЗачетаАвансовНеЗачитывать Тогда
		ТекстЯчейки = ТекстЯчейки + СпособЗачетаАвансовНеЗачитывать + Символы.ПС;
	КонецЕсли;
	
	Если СтрокаТЧ.ВидОперации = ОтражениеДокументамиРеализации Тогда
		
		Если СтрокаТЧ.ТипДокументаОтражения = "Реализация товаров и услуг" Тогда
			ТекстЯчейки = ТекстЯчейки + "Реализация товаров и услуг" + Символы.ПС;
		ИначеЕсли СтрокаТЧ.ТипДокументаОтражения = "Акт об оказании производственных услуг" Тогда
			ТекстЯчейки = ТекстЯчейки + "Акт об оказании производственных услуг" + Символы.ПС;
		КонецЕсли;
		
		Если СтрокаТЧ.ТипДокументаОтражения = "Акт об оказании производственных услуг"
			 И ВестиУчетЗатратПоПодразделениям Тогда
			
			Если Не СтрокаТЧ.ПодразделениеОрганизации.Пустая() Тогда
				ТекстЯчейки = ТекстЯчейки + СтрокаТЧ.ПодразделениеОрганизации + Символы.ПС;
			КонецЕсли;
			
		КонецЕсли;
		
		Если СтрокаТЧ.ДокументБезНДС Тогда
			ТекстЯчейки = ТекстЯчейки + "Документы без НДС" + Символы.ПС;
		ИначеЕсли СтрокаТЧ.СуммаВключаетНДС Тогда
			ТекстЯчейки = ТекстЯчейки + "НДС в сумме" + Символы.ПС;
		Иначе
			ТекстЯчейки = ТекстЯчейки + "НДС сверху" + Символы.ПС;
		КонецЕсли;
		
		Если СтрокаТЧ.ИспользоватьПараметрыКомпенсацииЛьгот Тогда
			
			Если Не СтрокаТЧ.КонтрагентКомпенсацииЛьгот.Пустая() Тогда
				ТекстЯчейки = ТекстЯчейки + СтрокаТЧ.КонтрагентКомпенсацииЛьгот + Символы.ПС;
			КонецЕсли;
			
			Если Не СтрокаТЧ.ДоговорКонтрагентаКомпенсацииЛьгот.Пустая() Тогда
				ТекстЯчейки = ТекстЯчейки + СтрокаТЧ.ДоговорКонтрагентаКомпенсацииЛьгот + Символы.ПС;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаТЧ.ПараметрыОтражения = ТекстЯчейки;
	
КонецПроцедуры // ЗаполнитьКолонкуПараметрыОтражения()

&НаКлиенте
// Открывает форму редактирования параметров отражения
// и передает ей уже установленные параметры отражения.
//
Процедура ОткрытьФормуРедактированияПараметровОтражения(ВыбранноеЗначение)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = ОтражениеНачислений.НайтиПоИдентификатору(ВыбранноеЗначение);
	
	Если ДанныеСтроки.СуммаОстаток = 0
		 Или Не ДанныеСтроки.ОтражатьНачисленияВРеглУчете Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	
	ПараметрыФормы.Вставить("Организация",              ДанныеСтроки.Организация);
	ПараметрыФормы.Вставить("ВидОперации",              ДанныеСтроки.ВидОперации);
	ПараметрыФормы.Вставить("СпособЗачетаАвансов",      ДанныеСтроки.СпособЗачетаАвансов);
	ПараметрыФормы.Вставить("ТипДокументаОтражения",    ДанныеСтроки.ТипДокументаОтражения);
	ПараметрыФормы.Вставить("ПодразделениеОрганизации", ДанныеСтроки.ПодразделениеОрганизации);
	ПараметрыФормы.Вставить("ДокументБезНДС",           ДанныеСтроки.ДокументБезНДС);
	ПараметрыФормы.Вставить("СуммаВключаетНДС",         ДанныеСтроки.СуммаВключаетНДС);
	ПараметрыФормы.Вставить("ВестиУчетЗатратПоПодразделениям",       ВестиУчетЗатратПоПодразделениям);
	ПараметрыФормы.Вставить("КонтрагентКомпенсацииЛьгот",            ДанныеСтроки.КонтрагентКомпенсацииЛьгот);
	ПараметрыФормы.Вставить("ДоговорКонтрагентаКомпенсацииЛьгот",    ДанныеСтроки.ДоговорКонтрагентаКомпенсацииЛьгот);
	ПараметрыФормы.Вставить("ИспользоватьПараметрыКомпенсацииЛьгот", ДанныеСтроки.ИспользоватьПараметрыКомпенсацииЛьгот);
	
	ОткрытьФорму("Обработка.УПЖКХ_ПомощникПереходаНаНовыйМеханизмОтраженияНачисленийВРеглУчете.Форма.ФормаРедактированияПараметровОтражения", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
// Формирует документы "Отражение начислений в регл. учете".
//
Процедура СформироватьДокументыОтраженияНаСервере()
	
	// Нужен для того, чтобы при получении остатков к отражению исключить организации,
	// которые не используют отражение начислений в регл. учете.
	МассивОрганизацийИсключений = Новый Массив;
	
	Для Каждого Строка Из ОтражениеНачислений Цикл
		
		Если Не Строка.СуммаОстаток = 0
			 И Строка.ОтражатьНачисленияВРеглУчете
			 И Строка.ДокументОтражения.Пустая() Тогда
			
			ДокументОбъект = Документы.КВП_ОтражениеНачисленийВРеглУчете.СоздатьДокумент();
			
			ДокументОбъект.Дата                = КонецМесяца(ТекущаяДата());
			ДокументОбъект.Организация         = Строка.Организация;
			ДокументОбъект.ВидОперации         = Строка.ВидОперации;
			ДокументОбъект.СпособЗачетаАвансов = Строка.СпособЗачетаАвансов;
			
			ДокументОбъект.ЗаполнитьТабличнуюЧастьОтражениеНачислений();
			
			Если Строка.ВидОперации = Перечисления.КВП_ВидыОперацийОтраженияНачисленийВРеглУчете.ОтражениеУпрощенное Тогда
				
				ДокументОбъект.ЗаполнитьСчетаУчетаТабличнойЧасти();
				ДокументОбъект.ЗаполнитьСчетаУчетаУслугТабличнойЧасти();
				
			ИначеЕсли Строка.ВидОперации = Перечисления.КВП_ВидыОперацийОтраженияНачисленийВРеглУчете.ОтражениеДокументамиРеализации Тогда
				
				ДокументОбъект.ТипДокументаОтражения = Строка.ТипДокументаОтражения;
				
				Если Строка.ТипДокументаОтражения = "Акт об оказании производственных услуг" Тогда
					ДокументОбъект.ПодразделениеОрганизации = Строка.ПодразделениеОрганизации;
				КонецЕсли;
				
				ДокументОбъект.УчитыватьНДС     = Не Строка.ДокументБезНДС;
				ДокументОбъект.СуммаВключаетНДС = Строка.СуммаВключаетНДС;
				
				Если Строка.ИспользоватьПараметрыКомпенсацииЛьгот Тогда
					ДокументОбъект.КонтрагентКомпенсацииЛьгот = Строка.КонтрагентКомпенсацииЛьгот;
					ДокументОбъект.ДоговорКонтрагентаКомпенсацииЛьгот = Строка.ДоговорКонтрагентаКомпенсацииЛьгот;
				КонецЕсли;
				
				ДокументОбъект.СформироватьДокументыТабличнойЧасти();
				
			КонецЕсли;
			
			ЗаписатьБезПроведения = Ложь;
			
			Если КВП_ЗаписатьОбъект(ДокументОбъект, РежимЗаписиДокумента.Проведение) Тогда
				Строка.ДокументОтражения = ДокументОбъект.Ссылка;
			Иначе
				ЗаписатьБезПроведения = Истина;
			КонецЕсли;
				
			Если ЗаписатьБезПроведения Тогда
				
				Если КВП_ЗаписатьОбъект(ДокументОбъект, РежимЗаписиДокумента.Запись) Тогда
					Строка.ДокументОтражения = ДокументОбъект.Ссылка;
				КонецЕсли;
				
				ТекстОшибки = "Для организации " + Строка.Организация + " не удалось провести документ отражения """ + ДокументОбъект.Ссылка + """: при проверке документа могли возникнуть ошибки.";
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не Строка.ОтражатьНачисленияВРеглУчете Тогда
			МассивОрганизацийИсключений.Добавить(Строка.Организация);
		КонецЕсли;
		
	КонецЦикла;
	
	ОбновитьИнформациюВТаблицеОтражениеНачислений(МассивОрганизацийИсключений);
	
КонецПроцедуры

&НаСервере
// Обновляет информацию в табличной части "ОтражениеНачислений".
//
Процедура ОбновитьИнформациюВТаблицеОтражениеНачислений(МассивОрганизацийИсключений)
	
	Выборка = ВыполнитьЗапросНаПолучениеОстатковКОтражению(МассивОрганизацийИсключений);
	
	Для Каждого Строка Из ОтражениеНачислений Цикл
		
		Если Выборка.НайтиСледующий(Новый Структура("Организация", Строка.Организация)) Тогда
			Строка.СуммаОстаток = Выборка.СуммаОстаток;
			Строка.Статус = 1;
		ИначеЕсли Не Строка.СуммаОстаток = 0
				  И Строка.ОтражатьНачисленияВРеглУчете Тогда
			Строка.СуммаОстаток = 0;
			Строка.Статус = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ГруппаВыполненоОтражениеВсехСуммНачислений.Видимость = (Выборка.Количество() = 0);
	Элементы.ПродолжитьБезОтражения.Видимость = Не (Выборка.Количество() = 0);
	
КонецПроцедуры

&НаСервере
// Возвращает признак того, выполнено или нет отражение в БУ сумм начислений по всем организациям.
//
Функция ВсеСуммыОтражены()
	
	// Нужен для того, чтобы при получении остатков к отражению исключить организации,
	// которые не используют отражение начислений в регл. учете.
	МассивОрганизацийИсключений = Новый Массив;
	
	СформироватьМассивОрганизацийИсключений(МассивОрганизацийИсключений);
	
	Выборка = ВыполнитьЗапросНаПолучениеОстатковКОтражению(МассивОрганизацийИсключений);
	
	Если Выборка.Количество() = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
// Выполняет запрос к таблице остатков РН "Начисление для отражения в регл. учете" и возвращает выборку запроса.
//
Функция ВыполнитьЗапросНаПолучениеОстатковКОтражению(МассивОрганизацийИсключений)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.Организация,
	|	КВП_НачислениеДляОтраженияВРеглУчетеОстатки.СуммаОстаток
	|ИЗ
	|	РегистрНакопления.КВП_НачислениеДляОтраженияВРеглУчете.Остатки(&Дата, НЕ Организация В (&МассивОрганизацийИсключений)) КАК КВП_НачислениеДляОтраженияВРеглУчетеОстатки";
	
	Запрос.УстановитьПараметр("Дата",                        Новый Граница(КонецМесяца(ТекущаяДата()), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("МассивОрганизацийИсключений", МассивОрганизацийИсключений);
	
	Возврат Запрос.Выполнить().Выбрать();
	
КонецФункции

&НаСервере
// Формирует массив организаций, которые не используют отражение начислений в регл. учете.
//
Процедура СформироватьМассивОрганизацийИсключений(МассивОрганизацийИсключений)
	
	Для Каждого Строка Из ОтражениеНачислений Цикл
		Если Не Строка.ОтражатьНачисленияВРеглУчете Тогда
			МассивОрганизацийИсключений.Добавить(Строка.Организация);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ИнтерфейсныеМеханизмы

&НаКлиенте
// Выполняет переход на новую страницу помощника.
//
Процедура ВыполнитьПереходПоСтраницам(НаправлениеДвижения = "")
	
	ТекущаяСтраница = Элементы.ОсновнаяПанель.ТекущаяСтраница;
	
	СледующаяСтраница = ТекущаяСтраница;
	
	// Определяем страницу для перехода, исходя из направления.
	Если НаправлениеДвижения = "Вперед" Тогда
		
		Если ТекущаяСтраница = Элементы.СтраницаОбщаяИнформация Тогда
			
			Если Не РезервнаяКопияСохранена Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Для продолжения подтвердите, что Вы сохранили резервную копию информационной базы", , "РезервнаяКопияСохранена");
				Возврат;
			КонецЕсли;
			
			СледующаяСтраница = ?(ВыполнитьОтражениеНачислений, Элементы.СтраницаОтражениеНачислений, Элементы.СтраницаЗавершение);
			
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаОтражениеНачислений Тогда
			
			СледующаяСтраница = Элементы.СтраницаЗавершение;
			
		КонецЕсли;
		
	ИначеЕсли НаправлениеДвижения = "Назад" Тогда
		
		Если ТекущаяСтраница = Элементы.СтраницаОтражениеНачислений Тогда
			СледующаяСтраница = Элементы.СтраницаОбщаяИнформация;
		КонецЕсли;
		
	КонецЕсли;
	
	// Выполняем переход.
	Если СледующаяСтраница = Элементы.СтраницаОбщаяИнформация Тогда
		ПерейтиНаСтраницуОбщаяИнформация();
	ИначеЕсли СледующаяСтраница = Элементы.СтраницаОтражениеНачислений Тогда
		ПерейтиНаСтраницуОтражениеНачислений();
	ИначеЕсли СледующаяСтраница = Элементы.СтраницаЗавершение Тогда
		ПерейтиНаСтраницуЗавершение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Выполняет переход на страницу с общей информацией.
//
Процедура ПерейтиНаСтраницуОбщаяИнформация()
	
	Элементы.ЗаголовокСтраницы.Заголовок = "Общая информация";
	
	Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаОбщаяИнформация;
	
	Элементы.КнопкаНазад.Видимость = Ложь;
	
	Элементы.КнопкаОтмена.Заголовок = "Отмена";
	
КонецПроцедуры

&НаКлиенте
// Выполняет переход на страницу отражения начислений.
//
Процедура ПерейтиНаСтраницуОтражениеНачислений()
	
	Элементы.ЗаголовокСтраницы.Заголовок = "Отражение начислений";
	
	Элементы.ГруппаВыполненоОтражениеВсехСуммНачислений.Видимость = Ложь;
	
	Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаОтражениеНачислений;
	
	Элементы.КнопкаНазад.Видимость = Истина;
	
	Элементы.КнопкаОтмена.Заголовок = "Отмена";
	
КонецПроцедуры

&НаКлиенте
// Выполняет переход на финальную страницу.
//
Процедура ПерейтиНаСтраницуЗавершение()
	
	Если Не ПродолжитьБезОтражения
		 И Не ВсеСуммыОтражены() Тогда
		
		ТекстОшибки = "Суммы начислений по организациям отражены не полностью.
					  |Перед переходом на следующий шаг рекомендуется отразить все суммы начислений в регл. учете.";
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ТекстОшибки);
		
		Возврат;
		
	КонецЕсли;
	
	ПереходВыполнен = Истина;
	
	// Настроим отображение элементов формы.
	Элементы.ЗаголовокСтраницы.Видимость = Ложь;
	
	Элементы.ОсновнаяПанель.ТекущаяСтраница = Элементы.СтраницаЗавершение;
	
	Элементы.НадписьПодвал.Видимость = Ложь;
	
	Элементы.КнопкаНазад.Видимость = Ложь;
	Элементы.КнопкаДалее.Видимость = Ложь;
	
	Элементы.КнопкаОтмена.Заголовок = "Закрыть";
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события формы "ПриСозданииНаСервере".
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Форма помощника доступна только при переходе из настроек параметров учета,
	// Открыть ее каким-либо другим способом, например через "Все функции", нельзя.
	// Так будет до тех пор, пока новый механизм отражения начислений в регл. учете
	// не будет доведен до ума.
	Если Не Параметры.Свойство("ПереходИзНастроекПараметровУчета") Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ПереходВыполнен = Ложь;
	
	ДатаНачалаДействияНовогоМеханизма = ДобавитьМесяц(НачалоМесяца(ТекущаяДата()), 1);
	
	ВыполнитьОтражениеНачислений = Ложь;
	
	// Заполним признак учета затрат по подразделениям для контроля заполнения подразделения затрат.
	ВестиУчетЗатратПоПодразделениям = ПолучитьФункциональнуюОпцию("ВестиУчетЗатратПоПодразделениям");
	
	НеобходимоВключитьФункциональность = Не Константы.УправлениеЗачетомАвансовПогашениемЗадолженности.Получить();
	
	ЗаполнитьТЧОтражениеНачислений();
	
	Элементы.ГруппаНачисленияОтраженыПолностью.Видимость   = Не ВыполнитьОтражениеНачислений;
	Элементы.ГруппаНачисленияОтраженыНеПолностью.Видимость = ВыполнитьОтражениеНачислений;
	
	Элементы.ДекорацияПредупреждениеОВключенииФункциональности.Видимость = НеобходимоВключитьФункциональность;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события формы "ПриОткрытии".
//
Процедура ПриОткрытии(Отказ)
	
	ВыполнитьПереходПоСтраницам();
	
КонецПроцедуры

&НаКлиенте
// Обработчик события формы "ОбработкаВыбора".
//
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.УПЖКХ_ПомощникПереходаНаНовыйМеханизмОтраженияНачисленийВРеглУчете.Форма.ФормаРедактированияПараметровОтражения" Тогда
		
		СтрокаТабличнойЧасти = Элементы.ОтражениеНачислений.ТекущиеДанные;
		
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ВыбранноеЗначение);
		
		ЗаполнитьКолонкуПараметрыОтражения(СтрокаТабличнойЧасти, ВестиУчетЗатратПоПодразделениям);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события формы "ОбработкаОповещения".
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьИнформациюВПомощникеПереходаНаНовыйМеханизм" Тогда
		
		// Нужен для того, чтобы при получении остатков к отражению исключить организации,
		// которые не используют отражение начислений в регл. учете.
		МассивОрганизацийИсключений = Новый Массив;
		
		СформироватьМассивОрганизацийИсключений(МассивОрганизацийИсключений);
		
		ОбновитьИнформациюВТаблицеОтражениеНачислений(МассивОрганизацийИсключений);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "Выбор" таблицы значений "ОтражениеНачислений".
//
Процедура ОтражениеНачисленийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ОтражениеНачисленийПараметрыОтражения" Тогда
		ОткрытьФормуРедактированияПараметровОтражения(ВыбраннаяСтрока);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Обработчик события "НачалоВыбора" полей табличной части "ОтражениеНачислений".
//
Процедура ОтражениеНачисленийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик команды "Далее".
//
Процедура КомандаДалее(Команда)
	
	ВыполнитьПереходПоСтраницам("Вперед");
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "Назад".
//
Процедура КомандаНазад(Команда)
	
	ВыполнитьПереходПоСтраницам("Назад");
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "СформироватьДокументыОтражения".
//
Процедура СформироватьДокументыОтражения(Команда)
	
	Состояние("Выполняется формирование документов отражения...");
	
	СформироватьДокументыОтраженияНаСервере();
	
	Состояние("Формирование документов отражения завершено...");
	
КонецПроцедуры

&НаКлиенте
// Обработчик команды "Отмена".
//
Процедура КомандаОтмена(Команда)
	
	Если ПереходВыполнен Тогда
		Закрыть(Истина);
	Иначе
		Закрыть(Ложь);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
