&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

&НаКлиенте
Перем СоздатьРезервнуюКопиюПриЗакрытии;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
		Возврат; // Отказ устанавливается в ПриОткрытии().
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(
			СверткаИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Информация,
			,
			,
			НСтр("ru = 'Открытие обработки'"));
			
	ВосстановитьНастройкиСверткиИнформационноБазыНаСервере();
	
	УстановитьУсловноеОформление();
	
	Объект.ИмяАдминистратораИБ = СтандартныеПодсистемыСервер.ТекущийПользователь().Имя;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	#Если ВебКлиент Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Свертка базы недоступна в веб-клиенте.'");
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации("Свертка Информационной базы",,ТекстСообщения,,Истина);
		ПоказатьПредупреждение(, ТекстСообщения);
		Возврат;
	#КонецЕсли
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Использование программы недоступно в клиенте под управлением ОС Linux.'");
		ПоказатьПредупреждение(, ТекстСообщения);
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
			"Свертка Информационной базы",
			,
			ТекстСообщения,
			,
			Истина);
		Возврат;
	КонецЕсли;
	
	ПредставлениеПериодаСвертки = Год(Объект.ПериодСвертки);
	
	Элементы.СпособыСверткиРегистровБухгалтерии.ОтборСтрок  = Новый ФиксированнаяСтруктура("ТипОбъектаМД","РегистрБухгалтерии");
	Элементы.СпособыСверткиРегистровНакопления.ОтборСтрок   = Новый ФиксированнаяСтруктура("ТипОбъектаМД","РегистрНакопления");
	Элементы.СпособыСверткиРегистровСведений.ОтборСтрок 	= Новый ФиксированнаяСтруктура("ТипОбъектаМД","РегистрСведений");

	Элементы.ПанельАвторизацияИБ.Доступность = Объект.СоздатьРезервнуюКопию;
	СкрыватьНастройкиПриФормированииОтчета = Истина;
	СоздатьРезервнуюКопиюПриЗакрытии 	   = Ложь;
	ПередОткрытиемСтраницы();
	
	Если Не НастройкиСверткиРегистровКорректны И Объект.ТекущийЭтапСвертки = 2 Тогда
		Элементы.ЗаполнитьРекомендуемымиПараметрамиСвертки.Доступность = Истина;
		ТекстВопроса = НСтр("ru='Настройки свертки содержат удаленные или измененные регистры."
			+ Символы.ПС + "Восстановить рекомендуемые настройки?'");
		Оповещение = Новый ОписаниеОповещения("ВопросВосстановитьРекомендуемыеНастройки", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаСверткиПриИзменении(Элемент)
	
	Объект.ПериодСвертки = Дата(ПредставлениеПериодаСвертки, 1, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоВыбранныеОрганизацииПриИзменении(Элемент)
	
	Элементы.ОтмеченныеОрганизации.Доступность = Объект.ТолькоВыбранныеОрганизации;
	Если Объект.ТолькоВыбранныеОрганизации = 0 Тогда
		ОтмеченныеОрганизации.ЗаполнитьПометки(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяКаталогаРезервнойКопииИБНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Каталог = ПолучитьКаталогФайла(Объект.ИмяКаталогаРезервнойКопииИБ);
	Диалог.ПроверятьСуществованиеФайла = Истина;
	Диалог.Заголовок = НСтр("ru = 'Выбор каталога резервной копии ИБ'");
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ИмяКаталогаРезервнойКопииИБНачалоВыбораЗавершение", ЭтотОбъект);
	Диалог.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяКаталогаРезервнойКопииИБНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы <> Неопределено
		И ВыбранныеФайлы.Количество()>0 Тогда
		
		ВыбраннаяПапка = ВыбранныеФайлы.Получить(0);
		Объект.ИмяКаталогаРезервнойКопииИБ = ВыбраннаяПапка;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипДанныхПриИзменении(Элемент)
	
	ВидимостьРегистров = Ложь;
	Если Объект.ТипДанных = "РегистрыСведенийИНакопления" Тогда
		ВидимостьРегистров = Истина;
	КонецЕсли;
	
	Элементы.ГруппаОсновныеНастройки.Видимость = Не ВидимостьРегистров;
	Элементы.ГруппаРегистрыНакопления.Видимость = ВидимостьРегистров;
	Элементы.ГруппаРегистрыСведений.Видимость = ВидимостьРегистров;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.РезультатПроверки, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницыПомощника.ПодчиненныеЭлементы.УспешноеЗавершение 
		Или Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницыПомощника.ПодчиненныеЭлементы.НеуспешноеЗавершение Тогда
		СброситьСтатусСверткиИнформационнойБазыНаСервере();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СоздатьРезервнуюКопиюПриИзменении(Элемент)
	
	Элементы.ПанельАвторизацияИБ.Доступность = Объект.СоздатьРезервнуюКопию;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьОткрытьЖурналРегистрацииНажатие(Элемент)
	
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", Новый Структура("Пользователь", ИмяПользователя()));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуАктивныхПользователей(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОповещатьОЗакрытии", Истина);
	СтандартныеПодсистемыКлиент.ОткрытьСписокАктивныхПользователей(ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСостояниеРезультатаПроверки(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.РезультатПроверки, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСтраницаРегистрыСведений

&НаКлиенте
Процедура СтраницаРегистрыСведенийСпособСверткиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка  = Ложь;
	ТекущиеДанныеЭлемента = Элементы.СпособыСверткиРегистровСведений.ТекущиеДанные;
	СпособыСверткиРегистровПриИзменении(Элемент, ДанныеВыбора, ТекущиеДанныеЭлемента);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСпособыСверткиРегистровНакопления

&НаКлиенте
Процедура СтраницаРегистрыНакопленияСпособСверткиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка  = Ложь;
	ТекущиеДанныеЭлемента = Элементы.СпособыСверткиРегистровНакопления.ТекущиеДанные;
	СпособыСверткиРегистровПриИзменении(Элемент, ДанныеВыбора, ТекущиеДанныеЭлемента);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСпособыСверткиРегистровБухгалтерии

&НаКлиенте
Процедура СпособыСверткиРегистровБухгалтерииСпособСверткиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка  = Ложь;
	ТекущиеДанныеЭлемента = Элементы.СпособыСверткиРегистровБухгалтерии.ТекущиеДанные;
	СпособыСверткиРегистровПриИзменении(Элемент, ДанныеВыбора, ТекущиеДанныеЭлемента);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Назад(Команда)
	
	ТекущаяСтраница			= Элементы.СтраницыПомощника.ТекущаяСтраница;
	Страницы				= Элементы.СтраницыПомощника.ПодчиненныеЭлементы;
	НоваяТекущаяСтраница	= ТекущаяСтраница;
	
	Если ТекущаяСтраница = Страницы.УдалениеСтарыхДокументов Тогда
		
		СохранитьНастройкиСвертки(4);
		ПередОткрытиемСтраницы();
		
	ИначеЕсли ТекущаяСтраница = Страницы.ПроверкаОстатков Тогда
		
		СохранитьНастройкиСвертки(3);
		ПередОткрытиемСтраницы();
		
	ИначеЕсли ТекущаяСтраница = Страницы.ПросмотрОпераций Тогда
		
		Оповещение = Новый ОписаниеОповещения("ВопросПриПереходеКПредыдущемуЭтапуЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru='Для перехода к предыдущему этапу необходимо удалить все созданные ранее операции."
			+ Символы.ПС + "Удалить операции?'"), РежимДиалогаВопрос.ДаНет);
	
	ИначеЕсли ТекущаяСтраница = Страницы.ФормированиеОстатков Тогда
		
		СохранитьНастройкиСвертки(1);
		ПередОткрытиемСтраницы();
		
	ИначеЕсли ТекущаяСтраница = Страницы.НастройкаСвертки Тогда
		СохранитьНастройкиСвертки(0);
		ПередОткрытиемСтраницы();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Далее(Команда)
	
	ТекущаяСтраница			= Элементы.СтраницыПомощника.ТекущаяСтраница;
	Страницы				= Элементы.СтраницыПомощника.ПодчиненныеЭлементы;
	НоваяТекущаяСтраница	= ТекущаяСтраница;
	
	// Если настройки содержат удаленные или некорректные регистры, переход к следующему этапу невозможен
	Если Не НастройкиСверткиРегистровКорректны И Объект.ТекущийЭтапСвертки >= 2 И Объект.ТекущийЭтапСвертки <= 5 Тогда
		Если Объект.ТекущийЭтапСвертки = 2 Тогда
			ТекстСообщения = НСтр("ru = 'Настройки свертки содержат удаленные или измененные регистры."
				+ Символы.ПС + "Необходимо восстановить рекомендуемые настройки.'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Настройки свертки содержат удаленные или измененные регистры."
				+ Символы.ПС + "Необходимо вернуться к этапу ""Формирование остатков"" и ""Восстановить рекомендуемые настройки"".'");
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтраница = Страницы.СозданиеРезервнойКопии Тогда
		Если Объект.СоздатьРезервнуюКопию Тогда
			СоздатьРезервнуюКопиюНаКлиенте();
		Иначе
			СохранитьНастройкиСвертки(1);
			ПередОткрытиемСтраницы();
		КонецЕсли;
	ИначеЕсли ТекущаяСтраница = Страницы.НастройкаСвертки Тогда
		СохранитьНастройкиСвертки(2);
		ПередОткрытиемСтраницы();
	ИначеЕсли ТекущаяСтраница = Страницы.ФормированиеОстатков Тогда
		СохранитьНастройкиСвертки(2);
		Результат = СформироватьОстаткиНаСервере();
		ПроверитьСтатусВыполненияЗадания(Результат);
	ИначеЕсли ТекущаяСтраница = Страницы.ПросмотрОпераций Тогда
		СохранитьНастройкиСвертки(4);
		ПередОткрытиемСтраницы();
	ИначеЕсли ТекущаяСтраница = Страницы.ПроверкаОстатков Тогда
		СохранитьНастройкиСвертки(5);
		ПередОткрытиемСтраницы();
	ИначеЕсли ТекущаяСтраница = Страницы.УдалениеСтарыхДокументов Тогда
		Оповещение = Новый ОписаниеОповещения("ВопросУдалитьСтарыеДокументыЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, НСтр("ru='Процесс удаления старых документов может занять продолжительное время." 
			+ Символы.ПС + "Удалить старые документы?'"), РежимДиалогаВопрос.ДаНет);
	ИначеЕсли ТекущаяСтраница = Страницы.УспешноеЗавершение Или ТекущаяСтраница = Страницы.НеуспешноеЗавершение Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПропуститьШаг(Команда)
	
	СохранитьНастройкиСвертки(1);
	ПередОткрытиемСтраницы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВерсиюКомпоненты(Команда)
	ОбщегоНазначенияКлиент.ЗарегистрироватьCOMСоединитель();
КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	
	Если Не ОбработкаПроверкиЗаполнения(ПараметрыОтчета.НаборПоказателей) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатВыполнения = СформироватьОтчетНаСервере(ПараметрыОтчета);
	
	мОжидающиеИзменения = Неопределено;
	
	// Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
	Если НЕ РезультатВыполнения.ЗаданиеВыполнено Тогда
		
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьФормированиеОтчета", 1, Истина);
		
		ФормаДлительнойОперации = ОткрытьФорму("ОбщаяФорма.ДлительнаяОперация", Новый Структура("ИдентификаторЗадания", ИдентификаторЗадания), ЭтаФорма);
		
	Иначе 
		
		ЗагрузитьПодготовленныеДанные();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПанельНастроек(Команда)
	
	Элементы.ГруппаПанельНастроек.Видимость = Не Элементы.ГруппаПанельНастроек.Видимость;
	БухгалтерскиеОтчетыКлиентСервер.ИзменитьЗаголовокКнопкиПанельНастроек(
		Элементы.ПанельНастроек, Элементы.ГруппаПанельНастроек.Видимость);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРекомендуемымиПараметрамиСвертки(Команда)
	
	ОбновитьДеревоПоМетаданным();
	Объект.РекомендуемыеПараметры = Истина;
	Элементы.ЗаполнитьРекомендуемымиПараметрамиСвертки.Доступность = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();


	// СпособыСверткиРегистровБухгалтерии, СпособыСверткиРегистровНакопления, СпособыСверткиРегистровСведений

	ЭлементУО = УсловноеОформление.Элементы.Добавить();

	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СпособыСверткиРегистровБухгалтерии");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СпособыСверткиРегистровНакопления");
	КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(ЭлементУО.Поля, "СпособыСверткиРегистровСведений");

	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ЭлементУО.Отбор,
		"Объект.СпособыСверткиОбъектовМетаданных.УстаревшаяНастройка", ВидСравненияКомпоновкиДанных.Равно, Истина);

	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.НекорректныйКонтрагентЦветФонаВСписке);

КонецПроцедуры

&НаКлиенте
Процедура ПередОткрытиемСтраницы()
	
	ВидимостьКнопкиНазад = Истина;
	ФункцияКнопкиДалее   = Истина; // Истина = "Далее", Ложь = "Закрыть"
	
	Страницы = Элементы.СтраницыПомощника.ПодчиненныеЭлементы;
	
	Если Объект.ТекущийЭтапСвертки = 0 Тогда
		Элементы.СтраницыПомощника.ТекущаяСтраница = Страницы.СозданиеРезервнойКопии;
		ВидимостьКнопкиНазад = Ложь;
	ИначеЕсли Объект.ТекущийЭтапСвертки = 1 Тогда
		Элементы.СтраницыПомощника.ТекущаяСтраница = Страницы.НастройкаСвертки;
		Элементы.ОтмеченныеОрганизации.Доступность = Объект.ТолькоВыбранныеОрганизации;
		Элементы.СтраницыПомощника.ТекущаяСтраница = Элементы.СтраницыПомощника.ПодчиненныеЭлементы.НастройкаСвертки;
	ИначеЕсли Объект.ТекущийЭтапСвертки = 2 Тогда
		Элементы.СтраницыПомощника.ТекущаяСтраница = Страницы.ФормированиеОстатков;
		Элементы.ЗаполнитьРекомендуемымиПараметрамиСвертки.Доступность = НЕ Объект.РекомендуемыеПараметры Или Не НастройкиСверткиРегистровКорректны;
	ИначеЕсли Объект.ТекущийЭтапСвертки = 3 Тогда
		//Установка отбора по периоду свертки для просмотра операций
		ДокументыВводаОстатков.КомпоновщикНастроек.Настройки.Отбор.Элементы[1].ПравоеЗначение = Объект.ПериодСвертки;
		Элементы.СтраницыПомощника.ТекущаяСтраница = Страницы.ПросмотрОпераций
	ИначеЕсли Объект.ТекущийЭтапСвертки = 4 Тогда
		ЗаполнитьТаблицуМетаданных();
		Объект.ПоказательБУ = Истина;
		Объект.ТипДанных = "РегистрыБухгалтерии";
		СформироватьОтчет(Неопределено);
		Элементы.СтраницыПомощника.ТекущаяСтраница = Страницы.ПроверкаОстатков
	ИначеЕсли Объект.ТекущийЭтапСвертки = 5 Тогда
		Элементы.НадписьСвернутьИнформационнуюБазуНаНачало1.Заголовок = "Будут удалены документы до " 
			+ Формат(ПредставлениеПериодаСвертки,"ЧЦ=4; ЧГ=0;") + " года. " 
			+ "Процесс является необратимым.";
		Элементы.СтраницыПомощника.ТекущаяСтраница = Страницы.УдалениеСтарыхДокументов
	ИначеЕсли Объект.ТекущийЭтапСвертки = 6 Тогда
		Элементы.СтраницыПомощника.ТекущаяСтраница = Страницы.УспешноеЗавершение;
		ВидимостьКнопкиНазад = Ложь;
		ФункцияКнопкиДалее   = Ложь;
	ИначеЕсли Объект.ТекущийЭтапСвертки = -1 Тогда
		Элементы.СтраницыПомощника.ТекущаяСтраница = Страницы.НеуспешноеЗавершение;
		ВидимостьКнопкиНазад = Ложь;
		ФункцияКнопкиДалее   = Ложь;
	КонецЕсли;
	
	КнопкаДалее = Элементы.Далее;
	КнопкаНазад = Элементы.Назад;

	КнопкаНазад.Видимость = ВидимостьКнопкиНазад;
	
	КнопкаДалее.Заголовок = ?(ФункцияКнопкиДалее, НСтр("ru = '&Далее >'"), НСтр("ru = '&Закрыть'"));
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиСверткиИнформационноБазыНаСервере()
	
	ЗначениеХранилища = Константы.СтатусСверткиИнформационнойБазы.Получить();
	
	Если ЗначениеХранилища <> Неопределено Тогда
		Статус = ЗначениеХранилища.Получить();
	КонецЕсли;
	
	Если Статус <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Объект, Статус,,"СпособыСверткиОбъектовМетаданных");
		Объект.СпособыСверткиОбъектовМетаданных.Загрузить(Статус.СпособыСверткиОбъектовМетаданных);
		
		НастройкиСверткиРегистровКорректны = СверткаИнформационнойБазы.НастройкиСверткиРегистровКорректны(Объект);
		// Если настройки содержат удаленные или некорректные регистры, обновим их рекомендуемыми
		Если Не НастройкиСверткиРегистровКорректны Тогда
			Если Статус.ТекущийЭтапСвертки < 2 Тогда
				ОбновитьДеревоПоМетаданным();
			КонецЕсли;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Организации.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Организации КАК Организации
			|
			|УПОРЯДОЧИТЬ ПО
			|	Ссылка";
		
		Результат = Запрос.Выполнить();
		
		ОтмеченныеОрганизации.ЗагрузитьЗначения(Результат.Выгрузить().ВыгрузитьКолонку("Ссылка"));
		ОтмеченныеОрганизации.ЗаполнитьПометки(Не Объект.ТолькоВыбранныеОрганизации);
		
		Для Каждого Орг Из Объект.Организации Цикл
			
			НайденнаяОрганизация = ОтмеченныеОрганизации.НайтиПоЗначению(Орг.Значение);
			НайденнаяОрганизация.Пометка = Истина;
			
		КонецЦикла;
		
		Если Статус.ПоказыватьПриСтарте Тогда
			Статус.ПоказыватьПриСтарте = Ложь;
			Константы.СтатусСверткиИнформационнойБазы.Установить(Новый ХранилищеЗначения(Статус));
		КонецЕсли;
	Иначе
		СверткаИнформационнойБазы.ПолучитьСтруктуруСтатусаСверткиИнформационнойБазы(Объект);
		ВосстановитьНастройкиСверткиИнформационноБазыНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДоступныеСпособыСвертки(Элемент, ТекущиеДанныеЭлемента)
	
	Элемент.СписокВыбора.Очистить();
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТипОбъектаМД",ТекущиеДанныеЭлемента.ТипОбъектаМД);
	СтруктураПараметров.Вставить("ОбъектМД",ТекущиеДанныеЭлемента.ОбъектМД);
	СписокДоступныхВариантовСвертки = ПолучитьДоступныеСпособыСвертки(СтруктураПараметров);
	Для Каждого СпособСвертки из СписокДоступныхВариантовСвертки Цикл
		Элемент.СписокВыбора.Добавить(СпособСвертки);
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция ПолучитьДоступныеСпособыСвертки(СтруктураПараметров)
	
	СписокВыбора = Новый Массив;
	СписокВыбора.Добавить("Не сворачивать");
	
	Если СтруктураПараметров.ТипОбъектаМД = "РегистрСведений"
		И Не Метаданные.РегистрыСведений.Найти(СтруктураПараметров.ОбъектМД) = Неопределено
		И Метаданные.РегистрыСведений.Найти(СтруктураПараметров.ОбъектМД).ПериодичностьРегистраСведений = 
		 Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
	Иначе
		СписокВыбора.Добавить("Свернуть");
	КонецЕсли;
	
	Если СтруктураПараметров.ТипОбъектаМД = "РегистрСведений" Тогда
		СписокВыбора.Добавить("Очистить")
	КонецЕсли;
	
	Возврат СписокВыбора;
	
КонецФункции

&НаКлиенте
Функция ПроверитьВозможностьСозданияРезервнойКопии()
	
	Элементы.ГруппаСоединенийИПредупреждений.Видимость = Ложь;
	СтраницыПредупреждений  = Элементы.ПанельПредупреждений;
	ВсеСтраницы				= Элементы.ПанельПредупреждений.ПодчиненныеЭлементы;
	
	#Если НЕ ВебКлиент Тогда
	
	Файл	= Новый Файл(Объект.ИмяКаталогаРезервнойКопииИБ);
	Если НЕ Файл.Существует() ИЛИ НЕ Файл.ЭтоКаталог() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Укажите существующий каталог для сохранения резервной копии ИБ.'"),,"Объект.ИмяКаталогаРезервнойКопииИБ");
		Возврат Ложь;
	КонецЕсли;
	
	#КонецЕсли
	
	Если Не ПроверитьДоступКИБ() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СоединенияИнфо = ПолучитьИнформациюОНаличииСоединений(ПараметрыПриложения["СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации"]);
	Элементы.ГруппаСоединенийИПредупреждений.Видимость = СоединенияИнфо.НаличиеАктивныхСоединений;
	Если СоединенияИнфо.НаличиеАктивныхСоединений Тогда
		
		Если СоединенияИнфо.НаличиеCOMСоединений Тогда
			СтраницыПредупреждений.ТекущаяСтраница							= ВсеСтраницы.АктивныеСоединения;
		ИначеЕсли СоединенияИнфо.НаличиеСоединенияКонфигуратором Тогда
			СтраницыПредупреждений.ТекущаяСтраница							= ВсеСтраницы.СоединениеКонфигуратора;
		Иначе
			СтраницыПредупреждений.ТекущаяСтраница							= ВсеСтраницы.АктивныеПользователи;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ПроверитьДоступКИБ()
	
	ИмяСобытияЖурнала = СверткаИнформационнойБазыКлиент.СобытиеЖурналаРегистрации();
	Результат = Истина;
	ОбнаруженнаяОшибкаПодключения = "";
	// В базовых версиях проверку подключения не осуществляем;
	// при некорректном вводе имени и пароля создание резервной копии завершится неуспешно.
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента();
	Если ПараметрыРаботыКлиента.ЭтоБазоваяВерсияКонфигурации Тогда
		Возврат Результат;
	КонецЕсли; 
	ПараметрыПодключения = ПолучитьПараметрыАутентификацииАдминистратораСверткиБазы();
	ИмяCOMСоединителя = ПараметрыРаботыКлиента.ИмяCOMСоединителя;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = ' Проверка подключения к ИБ по адресу: %1, с помощью %2'"),
		ПараметрыПодключения.СтрокаСоединенияИнформационнойБазы, ИмяCOMСоединителя);

	ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытияЖурнала, 
		"Информация", ТекстСообщения, , Истина);
		
	ОбщегоНазначенияКлиент.ЗарегистрироватьCOMСоединитель(Ложь);
	Попытка
		ComConnector = Новый COMОбъект(ИмяCOMСоединителя);
		СтрокаСоединенияИнформационнойБазы = ПараметрыПодключения.СтрокаСоединенияИнформационнойБазы + ПараметрыПодключения.СтрокаПодключения;
		Соединение = ComConnector.Connect(СтрокаСоединенияИнформационнойБазы);
	Исключение
		Результат = Ложь;
		ТекстСообщения = НСтр("ru = 'Не удалось выполнить подключение к информационной базе'") + Символы.ПС;
		ЖурналРегистрацииКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытияЖурнала, 
			"Ошибка",  ТекстСообщения + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), , Истина);
		ОбнаруженнаяОшибкаПодключения = ТекстСообщения + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если ПустаяСтрока(ОбнаруженнаяОшибкаПодключения) Тогда
		Элементы.ГруппаСоединенийИПредупреждений.Видимость = Ложь;
	Иначе
		Элементы.ГруппаСоединенийИПредупреждений.Видимость = Истина;
		Элементы.ПанельПредупреждений.ТекущаяСтраница = Элементы.ПанельПредупреждений.ПодчиненныеЭлементы.ОбнаруженаОшибкаПодключения;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

&НаКлиенте
Функция ПолучитьПараметрыАутентификацииАдминистратораСверткиБазы() 

	Результат = Новый Структура("ИмяПользователя,
								|ПарольПользователя,
								|СтрокаПодключения,
								|ПараметрыАутентификации,
								|СтрокаСоединенияИнформационнойБазы",
								Неопределено, "", "", "", "", "");

	ТекущиеСоединения = ПолучитьСтрокуСоединенияИИнформациюОСоединениях(ПараметрыПриложения["СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации"]);
	Результат.СтрокаСоединенияИнформационнойБазы = ТекущиеСоединения.СтрокаСоединенияИнформационнойБазы;
	// Диагностика случая, когда ролевой безопасности в системе не предусмотрено.
	// Т.е. ситуация, когда любой пользователь «может» в системе все.
	Если НЕ ТекущиеСоединения.ЕстьАктивныеПользователи Тогда
		Возврат Результат;
	КонецЕсли;
	
	Пользователь = ИмяТекущегоПользователя();
	
	Результат.ИмяПользователя			= Пользователь;
	Результат.ПарольПользователя		= Объект.ПарольАдминистратораИБ;
	Результат.СтрокаПодключения			= "Usr=""" + Пользователь + """;Pwd=""" + Объект.ПарольАдминистратораИБ + """";
	Результат.ПараметрыАутентификации	= "/N""" + Пользователь + """ /P""" + Объект.ПарольАдминистратораИБ + """ /WA-";
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИмяТекущегоПользователя()
	
	Возврат СтандартныеПодсистемыСервер.ТекущийПользователь().Имя;
	
КонецФункции

&НаСервере
Функция ПолучитьСтрокуСоединенияИИнформациюОСоединениях(СообщенияДляЖурналаРегистрации)
	
	// запись накопленных событий ЖР
	ЖурналРегистрации.ЗаписатьСобытияВЖурналРегистрации(СообщенияДляЖурналаРегистрации);
	Результат = ПолучитьИнформациюОНаличииСоединений();
	Результат.Вставить("СтрокаСоединенияИнформационнойБазы", СтрокаСоединенияИнформационнойБазы());
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИнформациюОНаличииСоединений(СообщенияДляЖурналаРегистрации = Неопределено)
	
	ЖурналРегистрации.ЗаписатьСобытияВЖурналРегистрации(СообщенияДляЖурналаРегистрации);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура("НаличиеАктивныхСоединений, НаличиеCOMСоединений, НаличиеСоединенияКонфигуратором, ЕстьАктивныеПользователи",
								Ложь,
								Ложь,
								Ложь,
								Ложь);
	
	Если ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() > 0 Тогда 
		Результат.ЕстьАктивныеПользователи = Истина;
	КонецЕсли;
	
	МассивСеансов = ПолучитьСеансыИнформационнойБазы();
	Если МассивСеансов.Количество() = 1 Тогда 
		Возврат Результат;
	КонецЕсли;
	
	Результат.НаличиеАктивныхСоединений = Истина;
	
	Для Каждого Сеанс Из МассивСеансов Цикл
		
		Если ЭтоCOMСоединение(Сеанс) Тогда 
			 Результат.НаличиеCOMСоединений = Истина;
		ИначеЕсли ЭтоСеансКонфигуратором(Сеанс) Тогда 
			Результат.НаличиеСоединенияКонфигуратором = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭтоСеансКонфигуратором(СеансИнформационнойБазы)
	
	Возврат ВРег(СеансИнформационнойБазы.ИмяПриложения) = ВРег("Designer");
	
КонецФункции 

&НаСервереБезКонтекста
Функция ЭтоCOMСоединение(СеансИнформационнойБазы)
	
	Возврат ВРег(СеансИнформационнойБазы.ИмяПриложения) = ВРег("COMConnection");
	
КонецФункции

&НаКлиенте
Процедура СоздатьРезервнуюКопиюНаКлиенте()
	
	ВозможностьСозданияРезервнойКопии = ПроверитьВозможностьСозданияРезервнойКопии();
	
	Если Не ВозможностьСозданияРезервнойКопии Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = НСтр("ru='Для создания резервной копии программа будет перезапущена." 
		 + Символы.ПС + "Создать резервную копию?'");
	Оповещение = Новый ОписаниеОповещения("ВопросСоздатьРезервнуюКопиюЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросСоздатьРезервнуюКопиюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		СоздатьРезервнуюКопиюПриЗакрытии = Истина;
		
		ПропуститьПредупреждениеПередЗавершениемРаботыСистемы = Истина;
		
		ЗавершитьРаботуСистемы(Ложь);
		Закрыть();
		
		Если СоздатьРезервнуюКопиюПриЗакрытии Тогда
			Объект.ТекущийЭтапСвертки = 1;
			СоздатьРезервнуюКопиюБазы();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СброситьСтатусСверткиИнформационнойБазыНаСервере()
	
	СверткаИнформационнойБазы.ПолучитьСтруктуруСтатусаСверткиИнформационнойБазы(Объект);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекущийЭтапСвертки()
	
	ЗначениеХранилища = Константы.СтатусСверткиИнформационнойБазы.Получить();
	
	Если ЗначениеХранилища <> Неопределено Тогда
		Статус = ЗначениеХранилища.Получить();
	КонецЕсли;
	Если Статус <> Неопределено Тогда
		Объект.ТекущийЭтапСвертки = Статус.ТекущийЭтапСвертки;
	Иначе
		Объект.ТекущийЭтапСвертки = 0;
		СверткаИнформационнойБазы.ПолучитьСтруктуруСтатусаСверткиИнформационнойБазы(Объект);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СоздатьРезервнуюКопиюБазы()
	
	#Если НЕ ВебКлиент Тогда
	
	ИмяГлавногоФайлаСкрипта = СформироватьФайлыСкриптаСозданияРезервнойКопии();
	ЗапуститьПриложение("""" + ИмяГлавногоФайлаСкрипта + """", ПолучитьКаталогФайла(ИмяГлавногоФайлаСкрипта));
	
	#КонецЕсли
	
КонецПроцедуры 

&НаКлиенте
Функция СформироватьФайлыСкриптаСозданияРезервнойКопии() 
	
	#Если НЕ ВебКлиент Тогда
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиента();
	
	// Файлы обновления не должны удаляться при закрытии программы и должны быть доступны пользователю.
	КаталогВременныхФайловОбновления = КаталогДокументов() + "1Cv8Update." + Формат(ОбщегоНазначенияКлиент.ДатаСеанса(), "ДФ=ггММддЧЧммсс") + "\";
	СоздатьКаталог(КаталогВременныхФайловОбновления);
	
	ИмяИсполняемогоФайлаКонфигуратора = СтандартныеПодсистемыКлиент.ИмяИсполняемогоФайлаПриложения(Истина);
	ИмяИсполняемогоФайлаКлиента =  СтандартныеПодсистемыКлиент.ИмяИсполняемогоФайлаПриложения();
	
	// Структура параметров необходима для их определения на клиенте и передачи на сервер
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяИсполняемогоФайлаКонфигуратора",	ИмяИсполняемогоФайлаКонфигуратора);
	СтруктураПараметров.Вставить("ИмяИсполняемогоФайлаКлиента"		,	ИмяИсполняемогоФайлаКлиента);
	СтруктураПараметров.Вставить("СобытиеЖурналаРегистрации"		,	НСтр("ru = 'Создание резервной копии информационной базы'"));
	СтруктураПараметров.Вставить("ИмяCOMСоединителя"				,	ПараметрыРаботыКлиента.ИмяCOMСоединителя);
	СтруктураПараметров.Вставить("ЭтоБазоваяВерсияКонфигурации"		,	ПараметрыРаботыКлиента.ЭтоБазоваяВерсияКонфигурации);
	СтруктураПараметров.Вставить("ИнформационнаяБазаФайловая"		,	ПараметрыРаботыКлиента.ИнформационнаяБазаФайловая);
	СтруктураПараметров.Вставить("ПараметрыСкрипта"					,	ПолучитьПараметрыАутентификацииАдминистратораСверткиБазы());
	
	//Добавим в структуру и имя запускаемой программы
	
	#Если Не ВебКлиент Тогда
		СтруктураПараметров.Вставить("КаталогПрограммы"			, КаталогПрограммы());
	#Иначе
		СтруктураПараметров.Вставить("КаталогПрограммы"			, "");
	#КонецЕсли
	
	ИменаМакетов = "ДопФайлСверткиИнформационнойБазы"+ ",ЗаставкаСверткиИнформационнойБазы";
	ТекстыМакетов = ПолучитьТекстыМакетов(ИменаМакетов, СтруктураПараметров, ПараметрыПриложения["СтандартныеПодсистемы.СообщенияДляЖурналаРегистрации"]);
	
	ФайлСкрипта = Новый ТекстовыйДокумент;
	ФайлСкрипта.Вывод = ИспользованиеВывода.Разрешить;
	ФайлСкрипта.УстановитьТекст(ТекстыМакетов[0]);
	
	ИмяФайлаСкрипта = КаталогВременныхФайловОбновления + "main.js";
	ФайлСкрипта.Записать(ИмяФайлаСкрипта, КодировкаТекста.UTF16);
	
	// Вспомогательный файл: helpers.js
	ФайлСкрипта = Новый ТекстовыйДокумент;
	ФайлСкрипта.Вывод = ИспользованиеВывода.Разрешить;
	ФайлСкрипта.УстановитьТекст(ТекстыМакетов[1]);
	ФайлСкрипта.Записать(КаталогВременныхФайловОбновления + "helpers.js", КодировкаТекста.UTF16);
	
	ИмяГлавногоФайлаСкрипта = Неопределено;
	// Вспомогательный файл: splash.png
	БиблиотекаКартинок.ЗаставкаВнешнейОперации.Записать(КаталогВременныхФайловОбновления + "splash.png");
	// Вспомогательный файл: splash.ico
	БиблиотекаКартинок.ЗначокЗаставкиВнешнейОперации.Записать(КаталогВременныхФайловОбновления + "splash.ico");
	// Вспомогательный файл: progress.gif
	БиблиотекаКартинок.ДлительнаяОперация48.Записать(КаталогВременныхФайловОбновления + "progress.gif");
	// Главный файл заставки: splash.hta
	ИмяГлавногоФайлаСкрипта = КаталогВременныхФайловОбновления + "splash.hta";
	ФайлСкрипта = Новый ТекстовыйДокумент;
	ФайлСкрипта.Вывод = ИспользованиеВывода.Разрешить;
	ФайлСкрипта.УстановитьТекст(ТекстыМакетов[2]);
	ФайлСкрипта.Записать(ИмяГлавногоФайлаСкрипта, КодировкаТекста.UTF16);
	
	Возврат ИмяГлавногоФайлаСкрипта;
	
	#КонецЕсли
	
КонецФункции

&НаСервере
Функция ПолучитьТекстыМакетов(ИменаМакетов, СтруктураПараметров, СообщенияДляЖурналаРегистрации)
	
	// запись накопленных событий ЖР
	ЖурналРегистрации.ЗаписатьСобытияВЖурналРегистрации(СообщенияДляЖурналаРегистрации);
	Результат = Новый Массив();
	Результат.Добавить(ПолучитьТекстСкрипта(СтруктураПараметров));

	ИменаМакетовМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаМакетов);
	Для каждого ИмяМакета ИЗ ИменаМакетовМассив Цикл
		Результат.Добавить(РеквизитФормыВЗначение("Объект").ПолучитьМакет(ИмяМакета).ПолучитьТекст());
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьТекстСкрипта(СтруктураПараметров)
	
	// Файл создания резервной копии информационой базы: main.js
	ШаблонСкрипта = РеквизитФормыВЗначение("Объект").ПолучитьМакет("МакетФайлаСверткиИнформационнойБазы");
	
	Скрипт = ШаблонСкрипта.ПолучитьОбласть("ОбластьПараметров");
	Скрипт.УдалитьСтроку(1);
	Скрипт.УдалитьСтроку(Скрипт.КоличествоСтрок());
	
	Текст = ШаблонСкрипта.ПолучитьОбласть("ОбластьСозданияРезервнойКопии");
	Текст.УдалитьСтроку(1);
	Текст.УдалитьСтроку(Текст.КоличествоСтрок());
	
	Возврат ВставитьПараметрыСкрипта(Скрипт.ПолучитьТекст(), СтруктураПараметров) + Текст.ПолучитьТекст();
	
КонецФункции

&НаСервере
Функция ВставитьПараметрыСкрипта(Знач Текст, Знач СтруктураПараметров)
	
	Результат = Текст;
	
	СтрокаСоединенияИнформационнойБазы = СтруктураПараметров.ПараметрыСкрипта.СтрокаСоединенияИнформационнойБазы +
											СтруктураПараметров.ПараметрыСкрипта.СтрокаПодключения; 
	
	Если Прав(СтрокаСоединенияИнформационнойБазы, 1) = ";" Тогда
		СтрокаСоединенияИнформационнойБазы = Лев(СтрокаСоединенияИнформационнойБазы, СтрДлина(СтрокаСоединенияИнформационнойБазы) - 1);
	КонецЕсли;

	ИмяИсполняемогоФайлаКонфигуратора = СтруктураПараметров.КаталогПрограммы + СтруктураПараметров.ИмяИсполняемогоФайлаКонфигуратора;
	ИмяИсполняемогоФайлаКлиента       = СтруктураПараметров.КаталогПрограммы + СтруктураПараметров.ИмяИсполняемогоФайлаКлиента;
	
	// Определение пути к информационной базе.
	ПризнакФайловогоРежима = Неопределено;
	ПутьКИнформационнойБазе = СоединенияИБКлиентСервер.ПутьКИнформационнойБазе(ПризнакФайловогоРежима);
	
	ПараметрПутиКИнформационнойБазе = ?(ПризнакФайловогоРежима, "/F", "/S") + ПутьКИнформационнойБазе; 
	СтрокаПутиКИнформационнойБазе	= ?(ПризнакФайловогоРежима, ПутьКИнформационнойБазе, "");
	
	Результат = СтрЗаменить(Результат, "[ИнформационнаяБазаФайловая]"				, ?(СтруктураПараметров.ИнформационнаяБазаФайловая, "true", "false"));
	Результат = СтрЗаменить(Результат, "[РасширениеФайлаРезервнойКопии]"			, ?(СтруктураПараметров.ИнформационнаяБазаФайловая, "'.cd'", "'.dt'"));
	Результат = СтрЗаменить(Результат, "[ИмяИсполняемогоФайлаКонфигуратора]"		, Форматировать(ИмяИсполняемогоФайлаКонфигуратора));
	Результат = СтрЗаменить(Результат, "[ИмяИсполняемогоФайлаКлиента]"				, Форматировать(ИмяИсполняемогоФайлаКлиента));
	Результат = СтрЗаменить(Результат, "[ПараметрПутиКИнформационнойБазе]"			, Форматировать(ПараметрПутиКИнформационнойБазе));
	Результат = СтрЗаменить(Результат, "[СтрокаПутиКФайлуИнформационнойБазы]"		, Форматировать(ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(СтрЗаменить(СтрокаПутиКИнформационнойБазе, """", "")) +
		"1Cv8.1CD"));
	Результат = СтрЗаменить(Результат, "[СтрокаСоединенияИнформационнойБазы]"		, Форматировать(СтрокаСоединенияИнформационнойБазы));
	Результат = СтрЗаменить(Результат, "[ПараметрыАутентификацииПользователя]"		, Форматировать(СтруктураПараметров.ПараметрыСкрипта.ПараметрыАутентификации));
	Результат = СтрЗаменить(Результат, "[СобытиеЖурналаРегистрации]"				, Форматировать(СтруктураПараметров.СобытиеЖурналаРегистрации));
	Результат = СтрЗаменить(Результат, "[ИмяАдминистратораОбновления]"				, Форматировать(ИмяПользователя()));
	Результат = СтрЗаменить(Результат, "[СоздаватьРезервнуюКопию]"					, "true");
	Результат = СтрЗаменить(Результат, "[КаталогРезервнойКопии]"					, Форматировать(ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Объект.ИмяКаталогаРезервнойКопииИБ))); 
	Результат = СтрЗаменить(Результат, "[ТекущийЭтапСвертки]"						, Объект.ТекущийЭтапСвертки); 
	БлокироватьСоединенияИБ = НЕ СтруктураПараметров.ИнформационнаяБазаФайловая;
	Результат = СтрЗаменить(Результат, "[БлокироватьСоединенияИБ]"					, "true");
	Результат = СтрЗаменить(Результат, "[ИмяCOMСоединителя]"						, Форматировать(СтруктураПараметров.ИмяCOMСоединителя));
	Результат = СтрЗаменить(Результат, "[ИспользоватьCOMСоединитель]"				, ?(СтруктураПараметров.ЭтоБазоваяВерсияКонфигурации, "false", "true"));
	Результат = СтрЗаменить(Результат, "[ЗапускСеансаПослеСозданияРезервнойКопии]"  , "true");
	Результат = СтрЗаменить(Результат, "[АвтоматическийРежимСвертки]"  				, "true");
	Результат = СтрЗаменить(Результат, "[ШиринаОкнаЗаставкиОбновления]"				, 600);
	Результат = СтрЗаменить(Результат, "[ВысотаОкнаЗаставкиОбновления]"				, 320);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция Форматировать(Знач Текст)
	
	Текст = СтрЗаменить(Текст, "\", "\\");
	Текст = СтрЗаменить(Текст, """", "\""");
	Текст = СтрЗаменить(Текст, "'", "\'");
	
	Возврат "'" + Текст + "'";
	
КонецФункции

&НаСервере
Процедура СохранитьНастройкиСвертки(ТекущийЭтап)
	
	Объект.ТекущийЭтапСвертки = ТекущийЭтап;
	
	ЗначениеХранилища = Константы.СтатусСверткиИнформационнойБазы.Получить();
	
	Если ЗначениеХранилища <> Неопределено Тогда
		Статус = ЗначениеХранилища.Получить();
	КонецЕсли;
	
	Если Статус <> Неопределено Тогда
		Объект.Организации.Очистить();
		Если Объект.ТолькоВыбранныеОрганизации Тогда
			Для Каждого Орг Из ОтмеченныеОрганизации Цикл
				Если Не Орг.Пометка Тогда
					Продолжить;
				КонецЕсли;
				Объект.Организации.Добавить(Орг.Значение);
			КонецЦикла;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Статус,Объект,,"СпособыСверткиОбъектовМетаданных");
		Статус.СпособыСверткиОбъектовМетаданных = Объект.СпособыСверткиОбъектовМетаданных.Выгрузить();		
		Константы.СтатусСверткиИнформационнойБазы.Установить(Новый ХранилищеЗначения(Статус));
	Иначе
		СверткаИнформационнойБазы.ПолучитьСтруктуруСтатусаСверткиИнформационнойБазы(Объект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСтатусВыполненияЗадания(Результат);
	
	// Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
	Если НЕ Результат.ЗаданиеВыполнено Тогда
		
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресХранилища       = Результат.АдресХранилища;
		
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ФормаДлительнойОперации = ДлительныеОперацииКлиент.ОткрытьФормуДлительнойОперации(ЭтаФорма, ИдентификаторЗадания);
	Иначе
		ПолучитьТекущийЭтапСвертки();
		ПередОткрытиемСтраницы();			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			ПолучитьТекущийЭтапСвертки();
			ПередОткрытиемСтраницы();	
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания",
										 ПараметрыОбработчикаОжидания.ТекущийИнтервал,
										 Истина);
		КонецЕсли;
	Исключение
		ПолучитьТекущийЭтапСвертки();
		ПередОткрытиемСтраницы();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьФормированиеОтчета()
	
	Попытка
		
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			ЗагрузитьПодготовленныеДанные();
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
			"Подключаемый_ПроверитьФормированиеОтчета",
			ПараметрыОбработчикаОжидания.ТекущийИнтервал,
			Истина);
		КонецЕсли;
		
	Исключение
		
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Функция СформироватьОстаткиНаСервере()
	
	ТолькоВыбранныеОрганизации = Объект.ТолькоВыбранныеОрганизации = 1
		И Справочники.Организации.ИспользуетсяНесколькоОрганизаций();
	
	ПараметрыОбработки = Новый Структура("Организации, ПериодСвертки, ТолькоВыбранныеОрганизации, УстановитьДатуЗапретаИзмененияДанных", 
										 Объект.Организации,
										 Объект.ПериодСвертки,
										 ТолькоВыбранныеОрганизации,
										 Объект.УстановитьДатуЗапретаИзмененияДанных);
	// В файловом режиме работы выполняем операцию непосредственно (синхронно).
	ЗаданиеВыполнено = Ложь; 
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Обработки.СверткаИнформационнойБазы.СоздатьДокументыВводаОстатков(ПараметрыОбработки,АдресХранилища);
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
		Возврат Результат; 
	КонецЕсли;
	// В клиент-серверном режиме работы выполняем операцию в фоновом задании (асинхронно).
	НаименованиеЗадания = НСтр("ru = 'Формирование остатков.'");
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор,
															"Обработки.СверткаИнформационнойБазы.СоздатьДокументыВводаОстатков", 
															ПараметрыОбработки,
															НаименованиеЗадания);
	
	Если Результат <> Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция УдалитьДокументыВводаОстатковНаСервере(ПериодСвертки)
	
	ПараметрыОбработки = Новый Структура("ПериодСвертки", ПериодСвертки);
	// В файловом режиме работы выполняем операцию непосредственно (синхронно).
	ЗаданиеВыполнено = Ложь; 
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Обработки.СверткаИнформационнойБазы.УдалитьДокументыВводаОстатков(ПараметрыОбработки,АдресХранилища);
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
		Возврат Результат; 
	КонецЕсли;
	// В клиент-серверном режиме работы выполняем операцию в фоновом задании (асинхронно).
	НаименованиеЗадания = НСтр("ru = 'Удаление сформированных остатков.'");
	
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор,
															"Обработки.СверткаИнформационнойБазы.УдалитьДокументыВводаОстатков", 
															ПараметрыОбработки,
															НаименованиеЗадания);
	
	Если Результат <> Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СвернутьИнформационнуюБазуНаСервере()
	
	ТолькоВыбранныеОрганизации = Объект.ТолькоВыбранныеОрганизации = 1
		И Справочники.Организации.ИспользуетсяНесколькоОрганизаций();
	
	ПараметрыОбработки = Новый Структура("Организации, ПериодСвертки, ТолькоВыбранныеОрганизации, УстановитьДатуЗапретаИзмененияДанных", 
										 Объект.Организации,
										 Объект.ПериодСвертки,
										 ТолькоВыбранныеОрганизации,
										 Объект.УстановитьДатуЗапретаИзмененияДанных);
	// В файловом режиме работы выполняем операцию непосредственно (синхронно).
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Обработки.СверткаИнформационнойБазы.СвернутьИнформационнуюБазу(ПараметрыОбработки,АдресХранилища);
		Результат = Новый Структура;
		Результат.Вставить("ЗаданиеВыполнено", Истина);
		Возврат Результат; 
		// В клиент-серверном режиме работы выполняем операцию в фоновом задании (асинхронно).
	Иначе
		НаименованиеЗадания = НСтр("ru = 'Удаление записей регистров и установка пометки на удаление документов.'");
		
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(УникальныйИдентификатор,
																"Обработки.СверткаИнформационнойБазы.СвернутьИнформационнуюБазу", 
																ПараметрыОбработки,
																НаименованиеЗадания);
	КонецЕсли;
	Если Результат <> Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция СформироватьОтчетНаСервере(ПараметрыОтчета)
	
	РезультатПроверки.Очистить();
	
	ИБФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	ИдентификаторЗадания = Неопределено;
	
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, ЭтаФорма.УникальныйИдентификатор);
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.РезультатПроверки, "НеИспользовать");

	Если ИБФайловая Тогда
		
		Обработки.СверткаИнформационнойБазы.СформироватьОтчетПроверкиОстатков(ПараметрыОтчета, АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
				
		Возврат РезультатВыполнения;
		
	КонецЕсли;
	
	НаименованиеЗадания = НСтр("ru = 'Формирование отчета'");
	
	РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(ЭтаФорма.УникальныйИдентификатор,
															"Обработки.СверткаИнформационнойБазы.СформироватьОтчетПроверкиОстатков", 
															ПараметрыОтчета,
															НаименованиеЗадания);
	
	Если РезультатВыполнения <> Неопределено Тогда
		АдресХранилища = РезультатВыполнения.АдресХранилища;														
		Возврат РезультатВыполнения;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ОбработкаПроверкиЗаполнения(НаборПоказателей)
	
	Если Объект.ТипДанных <> "РегистрыБухгалтерии" Тогда
		Возврат Истина;
	КонецЕсли;
	
	ЕстьВыбранныеПоказатели = Ложь;
	
	Для Каждого Показатель из НаборПоказателей Цикл
		Если Показатель.Значение Тогда
			ЕстьВыбранныеПоказатели = Истина;    
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьВыбранныеПоказатели Тогда
		ТекстСообщения = НСтр("ru = 'Не выбран показатель(и)'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,, "ПоказательБУ");
	КонецЕсли;
	
	Возврат ЕстьВыбранныеПоказатели;
	
КонецФункции

&НаСервере
Функция ПодготовитьПараметрыОтчета()
	
	НеборПоказателей = Новый Структура();
	Если Объект.ТипДанных = "РегистрыБухгалтерии" Тогда
		НеборПоказателей.Вставить("БУ",Объект.ПоказательБУ);
		НеборПоказателей.Вставить("НУ",Объект.ПоказательНУ);
		НеборПоказателей.Вставить("ПР",Объект.ПоказательПР);
		НеборПоказателей.Вставить("ВР",Объект.ПоказательВР);
	КонецЕсли;

	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("ПериодСвертки"                    , Объект.ПериодСвертки);
	ПараметрыОтчета.Вставить("ПоказательБУ"                     , Объект.ПоказательБУ);
	ПараметрыОтчета.Вставить("ПоказательНУ"                     , Объект.ПоказательНУ);
	ПараметрыОтчета.Вставить("ПоказательПР"                     , Объект.ПоказательПР);
	ПараметрыОтчета.Вставить("ПоказательВР"                     , Объект.ПоказательВР);
	ПараметрыОтчета.Вставить("ПоСубсчетам"                      , ПоСубсчетам);
	ПараметрыОтчета.Вставить("НаборПоказателей"                 , НеборПоказателей);
	ПараметрыОтчета.Вставить("Организации"		                , Объект.Организации);
	ПараметрыОтчета.Вставить("ТипДанных"		                , Объект.ТипДанных);
	ПараметрыОтчета.Вставить("СписокРегистровСведений"		    , СписокРегистровСведений);
	ПараметрыОтчета.Вставить("СписокРегистровНакопления"	    , СписокРегистровНакопления);
	
	Возврат ПараметрыОтчета;

КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()

	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	РезультатПроверки   = РезультатВыполнения.Результат;

	ИдентификаторЗадания = Неопределено;

	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.РезультатПроверки, "НеИспользовать");
	
	Обработки.СверткаИнформационнойБазы.СкрыватьНастройкиПриФормированииОтчета(ЭтаФорма);
	
КонецПроцедуры

// Процедура заполняет список регистров сведений и накопления, которые были выбраны для свертки в настройках.
// Периодические регистры сведений и оборотные регистры накопления исключаются.
&НаСервере
Процедура ЗаполнитьТаблицуМетаданных()
	
	СписокРегистровНакопления.Очистить();
	СписокРегистровСведений.Очистить();
	
	ЗначениеХранилища = Константы.СтатусСверткиИнформационнойБазы.Получить();
	
	Статус = Неопределено;
	Если ЗначениеХранилища <> Неопределено Тогда
		Статус = ЗначениеХранилища.Получить();
	КонецЕсли;

	Если Статус <> Неопределено Тогда
		Объект.СпособыСверткиОбъектовМетаданных.Загрузить(Статус.СпособыСверткиОбъектовМетаданных);
	Иначе
		Возврат;
	КонецЕсли;
	МДРегистрыСведений = Метаданные.РегистрыСведений;
	МДРегистрыНакопления = Метаданные.РегистрыНакопления;
	
	ТаблицаЗначенийСворачиваемыхРегистров = Объект.СпособыСверткиОбъектовМетаданных.Выгрузить();
	
	ОбъектыМетаданных = Метаданные.Документы.ОперацияБух.Движения;
	МассивРегистровСведений = Новый Массив;
	МассивРегистровНакопления = Новый Массив;
	
	Для Каждого ОбъектМД из ОбъектыМетаданных Цикл
		Если МДРегистрыНакопления.Найти(ОбъектМД.Имя) <> Неопределено Тогда
			МетаданныеРегистра = МДРегистрыНакопления.Найти(ОбъектМД.Имя);
			Если МетаданныеРегистра.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Обороты Тогда
				Продолжить;
			КонецЕсли;
			МассивРегистровНакопления.Добавить(ОбъектМД.Имя);
		ИначеЕсли МДРегистрыСведений.Найти(ОбъектМД.Имя) <> Неопределено Тогда
			Если ОбъектМД.Имя = "РублевыеСуммыДокументовВВалюте" Тогда
				Продолжить;
			КонецЕсли;
			МетаданныеРегистра = МДРегистрыСведений.Найти(ОбъектМД.Имя);
			Если МетаданныеРегистра.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
				Продолжить;
			КонецЕсли;
			МассивРегистровСведений.Добавить(ОбъектМД.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЗначенийСворачиваемыхРегистров.ТипОбъектаМД КАК ТипОбъектаМД,
	|	ТаблицаЗначенийСворачиваемыхРегистров.ОбъектМД КАК ОбъектМД,
	|	ТаблицаЗначенийСворачиваемыхРегистров.ОбъектМДСиноним КАК ОбъектМДСиноним,
	|	ТаблицаЗначенийСворачиваемыхРегистров.СпособСвертки КАК СпособСвертки
	|ПОМЕСТИТЬ ВТТаблицаЗначенийСворачиваемыхРегистров
	|ИЗ
	|	&ТаблицаЗначенийСворачиваемыхРегистров КАК ТаблицаЗначенийСворачиваемыхРегистров
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТТаблицаЗначенийСворачиваемыхРегистров.ОбъектМД КАК Имя,
	|	ВТТаблицаЗначенийСворачиваемыхРегистров.ОбъектМДСиноним КАК Синоним,
	|	ВТТаблицаЗначенийСворачиваемыхРегистров.ТипОбъектаМД
	|ИЗ
	|	ВТТаблицаЗначенийСворачиваемыхРегистров КАК ВТТаблицаЗначенийСворачиваемыхРегистров
	|ГДЕ
	|	ВТТаблицаЗначенийСворачиваемыхРегистров.СпособСвертки = ""Свернуть""
	|	И ВТТаблицаЗначенийСворачиваемыхРегистров.ТипОбъектаМД = ""РегистрСведений""
	|	И ВТТаблицаЗначенийСворачиваемыхРегистров.ОбъектМД В(&СписокРегистровСведений)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТТаблицаЗначенийСворачиваемыхРегистров.ОбъектМД,
	|	ВТТаблицаЗначенийСворачиваемыхРегистров.ОбъектМДСиноним,
	|	ВТТаблицаЗначенийСворачиваемыхРегистров.ТипОбъектаМД
	|ИЗ
	|	ВТТаблицаЗначенийСворачиваемыхРегистров КАК ВТТаблицаЗначенийСворачиваемыхРегистров
	|ГДЕ
	|	ВТТаблицаЗначенийСворачиваемыхРегистров.СпособСвертки = ""Свернуть""
	|	И ВТТаблицаЗначенийСворачиваемыхРегистров.ТипОбъектаМД = ""РегистрНакопления""
	|	И ВТТаблицаЗначенийСворачиваемыхРегистров.ОбъектМД В(&СписокРегистровНакопления)";
	Запрос.УстановитьПараметр("СписокРегистровСведений",МассивРегистровСведений);
	Запрос.УстановитьПараметр("СписокРегистровНакопления",МассивРегистровНакопления);
	Запрос.УстановитьПараметр("ТаблицаЗначенийСворачиваемыхРегистров",ТаблицаЗначенийСворачиваемыхРегистров);
	РезультатЗапроса = Запрос.Выполнить();
	ТаблицаРегистров = РезультатЗапроса.Выгрузить();

	Для Каждого ТекущийРегистр из ТаблицаРегистров Цикл
		Если ТекущийРегистр.ТипОбъектаМД = "РегистрСведений" Тогда
			СписокРегистровСведений.Добавить(ТекущийРегистр.Имя, ТекущийРегистр.Синоним, Истина);
		ИначеЕсли ТекущийРегистр.ТипОбъектаМД = "РегистрНакопления" Тогда
			СписокРегистровНакопления.Добавить(ТекущийРегистр.Имя, ТекущийРегистр.Синоним, Истина);
		КонецЕсли;
	КонецЦикла;
	СписокРегистровНакопления.СортироватьПоЗначению();	
	СписокРегистровСведений.СортироватьПоЗначению();
	
	ТаблицаМетаданныхЗаполнена = Истина;

КонецПроцедуры

&НаКлиенте
Процедура СпособыСверткиРегистровПриИзменении(Элемент, ДанныеВыбора, ТекущиеДанныеЭлемента)
	
	ЗаполнитьДоступныеСпособыСвертки(Элемент, ТекущиеДанныеЭлемента);
	Оповещение = Новый ОписаниеОповещения("ВыбратьИзСпискаСпособСверткиЗавершение", ЭтотОбъект, ТекущиеДанныеЭлемента);
	ПоказатьВыборИзСписка(Оповещение, Элемент.СписокВыбора, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьИзСпискаСпособСверткиЗавершение(Результат, ТекущиеДанныеЭлемента) Экспорт
	
	Если Результат <> Неопределено Тогда
		Если ТекущиеДанныеЭлемента.СпособСвертки <> Результат.Значение Тогда
			Объект.РекомендуемыеПараметры = Ложь;
			Элементы.ЗаполнитьРекомендуемымиПараметрамиСвертки.Доступность = Истина;
			ТекущиеДанныеЭлемента.СпособСвертки = Результат.Значение;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере 
Процедура ОбновитьДеревоПоМетаданным()
	СверткаИнформационнойБазы.ОбновитьДеревоПоМетаданным(Объект);
	НастройкиСверткиРегистровКорректны = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВопросПриПереходеКПредыдущемуЭтапуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		СообщениеОбЭтапеВыполненияСвертки = "Удаление сформированных остатков.";
		Результат = УдалитьДокументыВводаОстатковНаСервере(Объект.ПериодСвертки);
		ПроверитьСтатусВыполненияЗадания(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросУдалитьСтарыеДокументыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Результат = СвернутьИнформационнуюБазуНаСервере();
		ПроверитьСтатусВыполненияЗадания(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросВосстановитьРекомендуемыеНастройки(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ОбновитьДеревоПоМетаданным();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКаталогФайла(Знач ПутьКФайлу)
	
	ПозицияСимвола = СтрНайти(ПутьКФайлу, "\", НаправлениеПоиска.СКонца);
	Если ПозицияСимвола > 1 Тогда
		Возврат Сред(ПутьКФайлу, 1, ПозицияСимвола - 1); 
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

#КонецОбласти

