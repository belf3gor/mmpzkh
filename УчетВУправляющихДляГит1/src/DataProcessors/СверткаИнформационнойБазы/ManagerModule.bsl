#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Процедура создает документы "Операцию БУ и НУ" с данными на дату свертки.
// Признак активность у движений устанавливается в ЛОЖЬ.
Процедура СоздатьДокументыВводаОстатков(Знач ПараметрыОбработки, АдресХранилища) Экспорт
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		Если ПараметрыОбработки.УстановитьДатуЗапретаИзмененияДанных Тогда
		
			УстановитьДатуЗапретаИзмененияДанных(ПараметрыОбработки);
			
		КонецЕсли;
		
		ЗначениеХранилища = Константы.СтатусСверткиИнформационнойБазы.Получить();
	
		Статус = Неопределено;
		Если ЗначениеХранилища <> Неопределено Тогда
			Статус = ЗначениеХранилища.Получить();
		КонецЕсли;
		
		Если Статус <> Неопределено Тогда
			СпособыСверткиОбъектовМетаданных = Статус.СпособыСверткиОбъектовМетаданных.Скопировать();
		Иначе
			ЗаписатьСтатусСвертки(-1);
			Возврат;
		КонецЕсли;
		
		Если ПараметрыОбработки.ТолькоВыбранныеОрганизации Тогда
			ОрганизацияДляЗаполненияШапкиДокумента = ПараметрыОбработки.Организации[0].Значение;
		Иначе
			ОрганизацияДляЗаполненияШапкиДокумента = ПолучитьОрганизациюДляЗаполнения();
		КонецЕсли;
		
		ПараметрыОбработки.Вставить("ОрганизацияДляЗаполненияШапкиДокумента", ОрганизацияДляЗаполненияШапкиДокумента);
		
		Для Каждого ДанныеРегистра Из СпособыСверткиОбъектовМетаданных Цикл
			
			Если ДанныеРегистра.СпособСвертки = "Не сворачивать" или ДанныеРегистра.СпособСвертки = "Очистить" Тогда
				Продолжить;
			КонецЕсли;
			
			Если ДанныеРегистра.ТипОбъектаМД = "РегистрНакопления" Тогда
				СформироватьДокументыВводаОстатковПоРегистрамНакопления(ДанныеРегистра, ПараметрыОбработки);
				
			ИначеЕсли ДанныеРегистра.ТипОбъектаМД = "РегистрСведений" Тогда	
				СформироватьДокументыВводаОстатковПоРегистрамСведений(ДанныеРегистра, ПараметрыОбработки);
				
			ИначеЕсли ДанныеРегистра.ТипОбъектаМД = "РегистрБухгалтерии" И ДанныеРегистра.ОбъектМД = "Хозрасчетный" Тогда		
				СформироватьДокументыВводаОстатковПоРегиструБухгалтерии(ДанныеРегистра, ПараметрыОбработки);
			КонецЕсли;
			
		КонецЦикла;
		ЗаписатьСтатусСвертки(3);
	Исключение
		ЗаписьЖурналаРегистрации(
			СверткаИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписатьСтатусСвертки(-1);
	КонецПопытки;
	
КонецПроцедуры

// Процедура формирует документы ввода остатков по переданному списку регистров накопления
//
Процедура СформироватьДокументыВводаОстатковПоРегистрамНакопления(СтрокаСписка, Параметры)
	
	Если СтрокаСписка.СпособСвертки <> "Свернуть" Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийРегистр = Метаданные.РегистрыНакопления.Найти(СтрокаСписка.ОбъектМД);
	
	Если ТекущийРегистр.ВидРегистра = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Обороты Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЛОЖЬ КАК Активность,
		|	&ПериодЗаписи КАК Период,";
	Для Каждого ТекИзмерение Из ТекущийРегистр.Измерения Цикл
		Запрос.Текст = Запрос.Текст + "
									  |ТаблицаРегистра." + ТекИзмерение.Имя + ",";
		
	КонецЦикла;
	
	Для Каждого ТекРесурс Из ТекущийРегистр.Ресурсы Цикл
		Запрос.Текст = Запрос.Текст + "
									  |ТаблицаРегистра." + ТекРесурс.Имя + "Остаток КАК " + ТекРесурс.Имя + ",";
	КонецЦикла;
	
	Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст)-1);
	
	СтруктураВозврата = ЕстьИзмерениеОрганизация(СтрокаСписка);
	НаличиеИзмеренияОрганизация = СтруктураВозврата.НаличиеИзмерения;
	ИмяИзмерения = СтруктураВозврата.ИмяИзмерения;
	УсловиеОтборПоОрганизации = "";
	УсловиеИтогов = "";
	
	Если НаличиеИзмеренияОрганизация Тогда
		Запрос.УстановитьПараметр("ВыбранныеОрганизации", Параметры.Организации);
		УсловиеОтборПоОрганизациям = ?(Параметры.ТолькоВыбранныеОрганизации, ИмяИзмерения + " В (&ВыбранныеОрганизации)","");
		УсловиеИтогов = "
						|ИТОГИ ПО
						|ТаблицаРегистра." + ИмяИзмерения;
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
								  |ИЗ
								  |РегистрНакопления." + ТекущийРегистр.Имя + ".Остатки(&ПериодЗаписи," + УсловиеОтборПоОрганизациям + " ) КАК ТаблицаРегистра"
								  + УсловиеИтогов;
	
	Запрос.УстановитьПараметр("ПериодЗаписи", НачалоДня(Параметры.ПериодСвертки));
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Запрос", Запрос);
	СтруктураПараметров.Вставить("ТекущийРегистр", ТекущийРегистр);
	СтруктураПараметров.Вставить("ПериодСвертки", Параметры.ПериодСвертки);
	СтруктураПараметров.Вставить("ТипРегистра", "РегистрНакопления");
	СтруктураПараметров.Вставить("НаличиеИзмеренияОрганизация", НаличиеИзмеренияОрганизация);
	СтруктураПараметров.Вставить("ИмяИзмерения", ИмяИзмерения);
	СтруктураПараметров.Вставить("ОрганизацияДляЗаполненияШапкиДокумента", Параметры.ОрганизацияДляЗаполненияШапкиДокумента);
	
	СформироватьДокументВводаОстатков(СтруктураПараметров);
	
КонецПроцедуры

// Процедура формирует документы ввода остатков по переданному списку регистров сведений
//
Процедура СформироватьДокументыВводаОстатковПоРегистрамСведений(СтрокаСписка, Параметры)
	
	ДокументОстатков = Неопределено;
	
	// Для регистра сведений РублевыеСуммыДокументовВВалюте операция не создается,
	// т.к. не является его регистратором.
	Если СтрокаСписка.ОбъектМД = "РублевыеСуммыДокументовВВалюте" Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаСписка.СпособСвертки <> "Свернуть" Тогда
		Возврат;
	КонецЕсли;
	
	ТекущийРегистр = Метаданные.РегистрыСведений.Найти(СтрокаСписка.ОбъектМД);
	
	Если (НЕ ТекущийРегистр.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураВозврата = ЕстьИзмерениеОрганизация(СтрокаСписка);
	НаличиеИзмеренияОрганизация = СтруктураВозврата.НаличиеИзмерения;
	ИмяИзмерения = СтруктураВозврата.ИмяИзмерения;
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЛОЖЬ КАК Активность,
		|	&ПериодЗаписи КАК Период,";
	Для Каждого ТекИзмерение Из ТекущийРегистр.Измерения Цикл
		Запрос.Текст = Запрос.Текст + "
									  |ТаблицаРегистра." + ТекИзмерение.Имя + ",";
		
	КонецЦикла;
	
	Для Каждого ТекРесурс Из ТекущийРегистр.Ресурсы Цикл
		Запрос.Текст = Запрос.Текст + "
									  |ТаблицаРегистра." + ТекРесурс.Имя + " КАК " + ТекРесурс.Имя + ",";
	КонецЦикла;
	
	Для Каждого ТекРеквизит Из ТекущийРегистр.Реквизиты Цикл
		Запрос.Текст = Запрос.Текст + "
									  |ТаблицаРегистра." + ТекРеквизит.Имя + " КАК " + ТекРеквизит.Имя + ",";
	КонецЦикла;
	
	УсловиеОтборПоОрганизации = "";
	УсловиеИтогов = "";
	
	Если НаличиеИзмеренияОрганизация Тогда
		Запрос.УстановитьПараметр("ВыбранныеОрганизации", Параметры.Организации);
		УсловиеОтборПоОрганизациям = ?(Параметры.ТолькоВыбранныеОрганизации, ИмяИзмерения + " В (&ВыбранныеОрганизации)","");
		УсловиеИтогов = "
						|ИТОГИ ПО
						|ТаблицаРегистра." + ИмяИзмерения;
	КонецЕсли;
	
	Запрос.Текст = Лев(Запрос.Текст, СтрДлина(Запрос.Текст)-1);
	Запрос.Текст = Запрос.Текст + "
								  |ИЗ
								  |РегистрСведений." + ТекущийРегистр.Имя + ".СрезПоследних(&ДатаОст, " + УсловиеОтборПоОрганизациям + ") КАК ТаблицаРегистра";
	Если (НЕ ТекущийРегистр.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.ПозицияРегистратора) Тогда			   
		Запрос.Текст = Запрос.Текст + "				   
									  |ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений." + ТекущийРегистр.Имя + ".СрезПервых(&ДатаОст, Период = НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(&ДатаОст, ДЕНЬ, 1), ДЕНЬ)) КАК ТаблицаРегистраСрезПервых
									  |ПО ИСТИНА";
		Для Каждого ТекИзмерение Из ТекущийРегистр.Измерения Цикл
			Запрос.Текст = Запрос.Текст + "
										  |И ТаблицаРегистра." + ТекИзмерение.Имя + " = ТаблицаРегистраСрезПервых." + ТекИзмерение.Имя;
		КонецЦикла;
		
		Запрос.Текст = Запрос.Текст + "
									  |ГДЕ
									  |ТаблицаРегистраСрезПервых.Период ЕСТЬ NULL";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + УсловиеИтогов;
	
	Запрос.УстановитьПараметр("ДатаОст", Параметры.ПериодСвертки-1);
	Запрос.УстановитьПараметр("ПериодЗаписи", НачалоДня(Параметры.ПериодСвертки));
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Запрос", Запрос);
	СтруктураПараметров.Вставить("ТекущийРегистр", ТекущийРегистр);
	СтруктураПараметров.Вставить("ПериодСвертки", Параметры.ПериодСвертки);
	СтруктураПараметров.Вставить("ТипРегистра", "РегистрСведений");
	СтруктураПараметров.Вставить("НаличиеИзмеренияОрганизация", НаличиеИзмеренияОрганизация);
	СтруктураПараметров.Вставить("ИмяИзмерения", ИмяИзмерения);
	СтруктураПараметров.Вставить("ОрганизацияДляЗаполненияШапкиДокумента", Параметры.ОрганизацияДляЗаполненияШапкиДокумента);
	
	СформироватьДокументВводаОстатков(СтруктураПараметров);
	
КонецПроцедуры

// Процедура формирует документы ввода остатков по регистру бухгалтерии Хозрасчетный
//
Процедура СформироватьДокументыВводаОстатковПоРегиструБухгалтерии(СтрокаСписка, Параметры)
	
	Если НЕ СтрокаСписка.СпособСвертки = "Свернуть" Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ РегистрыБухгалтерии.Хозрасчетный.ПолучитьИспользованиеИтогов() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ХозрасчетныйОстатки.Счет КАК Счет,
	               |	ХозрасчетныйОстатки.Субконто1 КАК Субконто1,
	               |	ХозрасчетныйОстатки.Субконто2 КАК Субконто2,
	               |	ХозрасчетныйОстатки.Субконто3 КАК Субконто3,
	               |	ХозрасчетныйОстатки.Организация КАК Организация,
	               |	ХозрасчетныйОстатки.Валюта КАК Валюта,
	               |	ХозрасчетныйОстатки.Подразделение КАК Подразделение,
	               |	ХозрасчетныйОстатки.СуммаОстаток КАК СуммаОстаток,
	               |	ХозрасчетныйОстатки.СуммаОстатокДт КАК СуммаОстатокДт,
	               |	ХозрасчетныйОстатки.СуммаОстатокКт КАК СуммаОстатокКт,
	               |	ХозрасчетныйОстатки.СуммаРазвернутыйОстатокДт КАК СуммаРазвернутыйОстатокДт,
	               |	ХозрасчетныйОстатки.СуммаРазвернутыйОстатокКт КАК СуммаРазвернутыйОстатокКт,
	               |	ХозрасчетныйОстатки.ВалютнаяСуммаОстаток КАК ВалютнаяСуммаОстаток,
	               |	ХозрасчетныйОстатки.ВалютнаяСуммаОстатокДт КАК ВалютнаяСуммаОстатокДт,
	               |	ХозрасчетныйОстатки.ВалютнаяСуммаОстатокКт КАК ВалютнаяСуммаОстатокКт,
	               |	ХозрасчетныйОстатки.ВалютнаяСуммаРазвернутыйОстатокДт КАК ВалютнаяСуммаРазвернутыйОстатокДт,
	               |	ХозрасчетныйОстатки.ВалютнаяСуммаРазвернутыйОстатокКт КАК ВалютнаяСуммаРазвернутыйОстатокКт,
	               |	ХозрасчетныйОстатки.КоличествоОстаток КАК КоличествоОстаток,
	               |	ХозрасчетныйОстатки.КоличествоОстатокДт КАК КоличествоОстатокДт,
	               |	ХозрасчетныйОстатки.КоличествоОстатокКт КАК КоличествоОстатокКт,
	               |	ХозрасчетныйОстатки.КоличествоРазвернутыйОстатокДт КАК КоличествоРазвернутыйОстатокДт,
	               |	ХозрасчетныйОстатки.КоличествоРазвернутыйОстатокКт КАК КоличествоРазвернутыйОстатокКт,
	               |	ХозрасчетныйОстатки.СуммаНУОстаток КАК СуммаНУОстаток,
	               |	ХозрасчетныйОстатки.СуммаНУОстатокДт КАК СуммаНУОстатокДт,
	               |	ХозрасчетныйОстатки.СуммаНУОстатокКт КАК СуммаНУОстатокКт,
	               |	ХозрасчетныйОстатки.СуммаНУРазвернутыйОстатокДт КАК СуммаНУРазвернутыйОстатокДт,
	               |	ХозрасчетныйОстатки.СуммаНУРазвернутыйОстатокКт КАК СуммаНУРазвернутыйОстатокКт,
	               |	ХозрасчетныйОстатки.СуммаПРОстаток КАК СуммаПРОстаток,
	               |	ХозрасчетныйОстатки.СуммаПРОстатокДт КАК СуммаПРОстатокДт,
	               |	ХозрасчетныйОстатки.СуммаПРОстатокКт КАК СуммаПРОстатокКт,
	               |	ХозрасчетныйОстатки.СуммаПРРазвернутыйОстатокДт КАК СуммаПРРазвернутыйОстатокДт,
	               |	ХозрасчетныйОстатки.СуммаПРРазвернутыйОстатокКт КАК СуммаПРРазвернутыйОстатокКт,
	               |	ХозрасчетныйОстатки.СуммаВРОстаток КАК СуммаВРОстаток,
	               |	ХозрасчетныйОстатки.СуммаВРОстатокДт КАК СуммаВРОстатокДт,
	               |	ХозрасчетныйОстатки.СуммаВРОстатокКт КАК СуммаВРОстатокКт,
	               |	ХозрасчетныйОстатки.СуммаВРРазвернутыйОстатокДт КАК СуммаВРРазвернутыйОстатокДт,
	               |	ХозрасчетныйОстатки.СуммаВРРазвернутыйОстатокКт КАК СуммаВРРазвернутыйОстатокКт
	               |ИЗ
	               |	РегистрБухгалтерии.Хозрасчетный.Остатки(
	               |			&ДатаСвертки,
	               |			,
	               |			,
	               |			" + ?(Параметры.ТолькоВыбранныеОрганизации,"Организация В (&ВыбранныеОрганизации)","") + "
	               |			) КАК ХозрасчетныйОстатки
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			Хозрасчетный.Родитель КАК Родитель
	               |		ИЗ
	               |			ПланСчетов.Хозрасчетный КАК Хозрасчетный) КАК ПодчиненныеСчета
	               |		ПО ХозрасчетныйОстатки.Счет = ПодчиненныеСчета.Родитель
	               |ГДЕ
	               |	ПодчиненныеСчета.Родитель ЕСТЬ NULL 
	               |ИТОГИ
	               |	СУММА(СуммаОстаток),
	               |	СУММА(СуммаОстатокДт),
	               |	СУММА(СуммаОстатокКт),
	               |	СУММА(СуммаРазвернутыйОстатокДт),
	               |	СУММА(СуммаРазвернутыйОстатокКт),
	               |	СУММА(ВалютнаяСуммаОстаток),
	               |	СУММА(ВалютнаяСуммаОстатокДт),
	               |	СУММА(ВалютнаяСуммаОстатокКт),
	               |	СУММА(ВалютнаяСуммаРазвернутыйОстатокДт),
	               |	СУММА(ВалютнаяСуммаРазвернутыйОстатокКт),
	               |	СУММА(КоличествоОстаток),
	               |	СУММА(КоличествоОстатокДт),
	               |	СУММА(КоличествоОстатокКт),
	               |	СУММА(КоличествоРазвернутыйОстатокДт),
	               |	СУММА(КоличествоРазвернутыйОстатокКт),
	               |	СУММА(СуммаНУОстаток),
	               |	СУММА(СуммаНУОстатокДт),
	               |	СУММА(СуммаНУОстатокКт),
	               |	СУММА(СуммаНУРазвернутыйОстатокДт),
	               |	СУММА(СуммаНУРазвернутыйОстатокКт),
	               |	СУММА(СуммаПРОстаток),
	               |	СУММА(СуммаПРОстатокДт),
	               |	СУММА(СуммаПРОстатокКт),
	               |	СУММА(СуммаПРРазвернутыйОстатокДт),
	               |	СУММА(СуммаПРРазвернутыйОстатокКт),
	               |	СУММА(СуммаВРОстаток),
	               |	СУММА(СуммаВРОстатокДт),
	               |	СУММА(СуммаВРОстатокКт),
	               |	СУММА(СуммаВРРазвернутыйОстатокДт),
	               |	СУММА(СуммаВРРазвернутыйОстатокКт)
	               |ПО
	               |	Организация,
	               |	Счет";
	
	Запрос.УстановитьПараметр("ДатаСвертки",Новый Граница(Параметры.ПериодСвертки - 1, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ВыбранныеОрганизации",Параметры.Организации);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() ТОгда
		
		Возврат;
		
	КонецЕсли;
	
	ВыборкаПоОрганизации = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоОрганизации.Следующий() Цикл
		
		ВыборкаПоСчетам = ВыборкаПоОрганизации.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоСчетам.Следующий() Цикл
			
			Если (НЕ ВыборкаПоСчетам.СуммаОстаток = 0) ИЛИ (НЕ ВыборкаПоСчетам.ВалютнаяСуммаОстаток = 0) ИЛИ (НЕ ВыборкаПоСчетам.КоличествоОстаток = 0) 
				ИЛИ (НЕ ВыборкаПоСчетам.СуммаРазвернутыйОстатокДт = 0) ИЛИ (НЕ ВыборкаПоСчетам.ВалютнаяСуммаРазвернутыйОстатокДт = 0) ИЛИ (НЕ ВыборкаПоСчетам.КоличествоРазвернутыйОстатокДт = 0)
				ИЛИ (НЕ ВыборкаПоСчетам.СуммаРазвернутыйОстатокКт = 0) ИЛИ (НЕ ВыборкаПоСчетам.ВалютнаяСуммаРазвернутыйОстатокКт = 0) ИЛИ (НЕ ВыборкаПоСчетам.КоличествоРазвернутыйОстатокКт = 0)
				ИЛИ (НЕ ВыборкаПоСчетам.СуммаНУОстаток = 0) ИЛИ (НЕ ВыборкаПоСчетам.СуммаПРОстаток = 0) ИЛИ (НЕ ВыборкаПоСчетам.СуммаВРОстаток = 0) Тогда
				ДокументОбъект = Документы.ОперацияБух.СоздатьДокумент();
				ДокументОбъект.Дата = НачалоДня(Параметры.ПериодСвертки);
				ДокументОбъект.Организация = ВыборкаПоОрганизации.Организация;
				ДокументОбъект.СпособЗаполнения = "Вручную"; 
				ДокументОбъект.Комментарий = "*Сформирован обработкой свертки базы. " + Формат(ТекущаяДатаСеанса(),"ДФ=dd.MM.yyyy");
				ДокументОбъект.Содержание = "Ввод остатков по регистрам бухгалтерии: Хозрасчетный. Счет: " + ВыборкаПоСчетам.Счет.Код;
				ДокументОбъект.Ответственный = Пользователи.ТекущийПользователь();
				
				ДокументОбъект.УстановитьНовыйНомер();
				
				ЗаписатьДанные(ДокументОбъект);
				
				ДвиженияДокумента = ДокументОбъект.Движения;
				НаборЗаписей = ДвиженияДокумента.Хозрасчетный;
				
				ВыборкаДетали = ВыборкаПоСчетам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаДетали.Следующий() Цикл
					
					Если ((ВыборкаПоСчетам.Счет.Вид =  ВидСчета.Активный) ИЛИ (ВыборкаПоСчетам.Счет.Вид =  ВидСчета.АктивноПассивный))
						И ((НЕ ВыборкаДетали.СуммаОстатокДт = 0) ИЛИ (НЕ ВыборкаДетали.ВалютнаяСуммаОстатокДт = 0) ИЛИ (НЕ ВыборкаДетали.КоличествоОстатокДт = 0)
						ИЛИ (НЕ ВыборкаДетали.СуммаНУОстатокДт = 0) ИЛИ (НЕ ВыборкаДетали.СуммаПРОстатокДт = 0) ИЛИ (НЕ ВыборкаДетали.СуммаВРОстатокДт = 0)) Тогда
						НоваяЗапись = НаборЗаписей.Добавить();
						НоваяЗапись.Организация = ВыборкаПоОрганизации.Организация;
						НоваяЗапись.Активность = Ложь;
						НоваяЗапись.Период = ДокументОбъект.Дата;
						НоваяЗапись.СчетДт = ВыборкаПоСчетам.Счет;
						
						Если НЕ ВыборкаПоСчетам.Счет.Забалансовый Тогда
							
							НоваяЗапись.СчетКт = ПланыСчетов.Хозрасчетный.Вспомогательный;
							
						КонецЕсли;
						
						НомерСубконто = 0;
						
						Для Каждого ТекВидСубконто ИЗ ВыборкаПоСчетам.Счет.ВидыСубконто Цикл
							
							НомерСубконто = НомерСубконто + 1;
							
							Если ЗначениеЗаполнено(ВыборкаДетали["Субконто" + Строка(НомерСубконто)]) Тогда
								
								НоваяЗапись.СубконтоДт[ТекВидСубконто.ВидСубконто] = ВыборкаДетали["Субконто" + Строка(НомерСубконто)];
								
							КонецЕсли;
							
						КонецЦикла;
						
						НоваяЗапись.ВалютаДт = ВыборкаДетали.Валюта;
						НоваяЗапись.ПодразделениеДт = ВыборкаДетали.Подразделение;
						НоваяЗапись.ВалютнаяСуммаДт = ВыборкаДетали.ВалютнаяСуммаОстатокДт;
						НоваяЗапись.КоличествоДт = ВыборкаДетали.КоличествоОстатокДт;
						НоваяЗапись.Сумма = ВыборкаДетали.СуммаОстатокДт;
						НоваяЗапись.СуммаНУДт = ВыборкаДетали.СуммаНУОстатокДт;
						НоваяЗапись.СуммаПРДт = ВыборкаДетали.СуммаПРОстатокДт;
						НоваяЗапись.СуммаВРДт = ВыборкаДетали.СуммаВРОстатокДт;
					КонецЕсли;
					
					Если ((ВыборкаПоСчетам.Счет.Вид =  ВидСчета.Пассивный) ИЛИ (ВыборкаПоСчетам.Счет.Вид =  ВидСчета.АктивноПассивный))
						И ((НЕ ВыборкаДетали.СуммаОстатокКт = 0) ИЛИ (НЕ ВыборкаДетали.ВалютнаяСуммаОстатокКт = 0) ИЛИ (НЕ ВыборкаДетали.КоличествоОстатокКт = 0)
						ИЛИ (НЕ ВыборкаДетали.СуммаНУОстатокКт = 0) ИЛИ (НЕ ВыборкаДетали.СуммаПРОстатокКт = 0) ИЛИ (НЕ ВыборкаДетали.СуммаВРОстатокКт = 0)) Тогда
						НоваяЗапись = НаборЗаписей.Добавить();
						НоваяЗапись.Организация = ВыборкаПоОрганизации.Организация;
						НоваяЗапись.Активность = Ложь;
						НоваяЗапись.Период = ДокументОбъект.Дата;
						НоваяЗапись.СчетКт = ВыборкаПоСчетам.Счет;
						
						Если НЕ ВыборкаПоСчетам.Счет.Забалансовый Тогда
							НоваяЗапись.СчетДт = ПланыСчетов.Хозрасчетный.Вспомогательный;
						КонецЕсли;
						
						НомерСубконто = 0;
						
						Для Каждого ТекВидСубконто ИЗ ВыборкаПоСчетам.Счет.ВидыСубконто Цикл
							
							НомерСубконто = НомерСубконто + 1;
							
							Если ЗначениеЗаполнено(ВыборкаДетали["Субконто" + Строка(НомерСубконто)]) Тогда
								НоваяЗапись.СубконтоКт[ТекВидСубконто.ВидСубконто] = ВыборкаДетали["Субконто" + Строка(НомерСубконто)];
							КонецЕсли;
							
						КонецЦикла;
						
						НоваяЗапись.ВалютаКт = ВыборкаДетали.Валюта;
						НоваяЗапись.ПодразделениеКт = ВыборкаДетали.Подразделение;
						НоваяЗапись.ВалютнаяСуммаКт = ВыборкаДетали.ВалютнаяСуммаОстатокКт;
						НоваяЗапись.КоличествоКт = ВыборкаДетали.КоличествоОстатокКт;
						НоваяЗапись.Сумма = ВыборкаДетали.СуммаОстатокКт;
						НоваяЗапись.СуммаНУКт = ВыборкаДетали.СуммаНУОстатокКт;
						НоваяЗапись.СуммаПРКт = ВыборкаДетали.СуммаПРОстатокКт;
						НоваяЗапись.СуммаВРКт = ВыборкаДетали.СуммаВРОстатокКт;
					КонецЕсли;
					
				КонецЦикла;
				
				ЗаписатьДанные(НаборЗаписей);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура создает документ "Операция БУ и НУ". Если у регистра есть
// реквизит "Организация", то документы создаются в разрезе организаций.
// Если реквизита "Организация" нет, то в шапке документа проставляется
// первая найденная организация.
//
Процедура СформироватьДокументВводаОстатков(Параметры)
	
	Результат = Параметры.Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		Если Параметры.НаличиеИзмеренияОрганизация Тогда
			ВыборкаПоОрганизациям = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоОрганизациям.Следующий() Цикл
				ДокОст = СформироватьШапкуДокументаВводаОстатков(Параметры.ТекущийРегистр,
																 Параметры.ПериодСвертки,
																 Параметры.ТипРегистра,
																 ВыборкаПоОрганизациям[Параметры.ИмяИзмерения]);
				
				Если Параметры.ТипРегистра = "РегистрНакопления" Тогда
					НаборЗаписей = РегистрыНакопления[Параметры.ТекущийРегистр.Имя].СоздатьНаборЗаписей();
				Иначе
					НаборЗаписей = РегистрыСведений[Параметры.ТекущийРегистр.Имя].СоздатьНаборЗаписей();
				КонецЕсли;
				НаборЗаписей.Отбор.Регистратор.Установить(ДокОст);
				ВыборкаДетальныеЗаписи = ВыборкаПоОрганизациям.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					НоваяЗапись = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗапись,ВыборкаДетальныеЗаписи);
				КонецЦикла;
				ЗаписатьДанные(НаборЗаписей);
			КонецЦикла;
		Иначе
			ТаблицаДвижений = Результат.Выгрузить();
			
			ДокОст = СформироватьШапкуДокументаВводаОстатков(Параметры.ТекущийРегистр,
															 Параметры.ПериодСвертки,
															 Параметры.ТипРегистра,
															 Параметры.ОрганизацияДляЗаполненияШапкиДокумента);
			
			Если Параметры.ТипРегистра = "РегистрНакопления" Тогда
				НаборЗаписей = РегистрыНакопления[Параметры.ТекущийРегистр.Имя].СоздатьНаборЗаписей();
			Иначе
				НаборЗаписей = РегистрыСведений[Параметры.ТекущийРегистр.Имя].СоздатьНаборЗаписей();
			КонецЕсли;
			НаборЗаписей.Отбор.Регистратор.Установить(ДокОст);
			НаборЗаписей.Загрузить(ТаблицаДвижений);
			ЗаписатьДанные(НаборЗаписей);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Функция заполняет шапку документа "Операция БУ и НУ"
//
Функция СформироватьШапкуДокументаВводаОстатков(ТекущийРегистр, ДатаСвертки, ТипРегистра, Организация = Неопределено)
	
	ДокументОстатков = Документы.ОперацияБух.СоздатьДокумент();
	
	ДокументОстатков.Дата = НачалоДня(ДатаСвертки);//Запишем документ в следующий день, за днем свертки
	ДокументОстатков.Комментарий = "*Сформирован обработкой свертки базы. " + Формат(ТекущаяДатаСеанса(),"ДФ=dd.MM.yyyy");
	ДокументОстатков.Содержание = "Ввод остатков по регистрам " + ТипРегистра + ": " + ТекущийРегистр.Имя;
	ДокументОстатков.СпособЗаполнения = "Вручную";
	ДокументОстатков.Ответственный = Пользователи.ТекущийПользователь();
	ДокументОстатков.Организация = Организация;
	
	Если ТипРегистра = "РегистрНакопления" Тогда
		НоваяСтрока = ДокументОстатков.ТаблицаРегистровНакопления.Добавить();
	Иначе
		НоваяСтрока = ДокументОстатков.ТаблицаРегистровСведений.Добавить();
	КонецЕсли;
	
	НоваяСтрока.Имя = ТекущийРегистр.Имя;
	
	ДокументОстатков.УстановитьНовыйНомер();
	
	ЗаписатьДанные(ДокументОстатков);
	
	Возврат ДокументОстатков.Ссылка;
	
КонецФункции

// Процедура удаляет документы "Операция БУ и НУ", которые содержат
// комментарий "*Сформирован обработкой свертки базы".
//
Процедура УдалитьДокументыВводаОстатков(ПараметрыОбработки, АдресХранилища) Экспорт
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ОперацияБух.Ссылка как ДокументВводаОстатков
			|ИЗ
			|	Документ.ОперацияБух КАК ОперацияБух
			|ГДЕ
			|	НЕ ОперацияБух.ПометкаУдаления
			|	И ОперацияБух.Дата = &ПериодСвертки
			|	И ОперацияБух.Комментарий ПОДОБНО &Комментарий";
		
		Запрос.УстановитьПараметр("Комментарий", "%*Сформирован обработкой свертки базы%");
		Запрос.УстановитьПараметр("ПериодСвертки", ПараметрыОбработки.ПериодСвертки);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ДокументОбъект = ВыборкаДетальныеЗаписи.ДокументВводаОстатков.ПолучитьОбъект();
			ДокументОбъект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
			ДокументОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
			ДокументОбъект.Удалить();
		КонецЦикла;
		ЗаписатьСтатусСвертки(2);
	Исключение
		ЗаписьЖурналаРегистрации(
			СверткаИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписатьСтатусСвертки(-1);
	КонецПопытки;
	
КонецПроцедуры

// Процедура переносит документы ввода остатков на день назад, и включает активность у движений
// 
Процедура АктивизироватьВводОстатков(ПериодСвертки, АдресХранилища) Экспорт
	
	Попытка
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОперацияБух.Ссылка КАК Документ
			|ИЗ
			|	Документ.ОперацияБух КАК ОперацияБух
			|ГДЕ
			|	НЕ ОперацияБух.ПометкаУдаления
			|	И ОперацияБух.Дата = &ПериодСвертки
			|	И ОперацияБух.Комментарий ПОДОБНО ""%*Сформирован обработкой свертки базы%""";
		
		Запрос.УстановитьПараметр("ПериодСвертки", ПериодСвертки);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ТЗДетальныеЗаписи = РезультатЗапроса.Выгрузить();
		
		Для Каждого ТекДок Из ТЗДетальныеЗаписи Цикл
			
			ДокументОбъект = ТекДок.Документ.ПолучитьОбъект();
			
			СтараяДата = ДокументОбъект.Дата;
			// Смещение даты созданных документов на последнюю секунду сворачиваемого периода.
			ДокументОбъект.Дата = НачалоДня(ДокументОбъект.Дата)-1;
			ДокументОбъект.УстановитьНовыйНомер();
			
			ЗаписатьДанные(ДокументОбъект);
			
			Для Каждого ТекРегистрДвижений Из ДокументОбъект.Метаданные().Движения Цикл
				
				ДокументОбъект.Движения[ТекРегистрДвижений.Имя].Прочитать();
				Если ДокументОбъект.Движения[ТекРегистрДвижений.Имя].Количество() > 0 Тогда
					Для Каждого ТекДвижение Из ДокументОбъект.Движения[ТекРегистрДвижений.Имя] Цикл
						ТекДвижение.Период = ДокументОбъект.Дата;
					КонецЦикла;
					ДокументОбъект.Движения[ТекРегистрДвижений.Имя].УстановитьАктивность(Истина);
					ЗаписатьДанные(ДокументОбъект.Движения[ТекРегистрДвижений.Имя]);
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		ЗаписатьСтатусСвертки(6);
	Исключение
		ЗаписьЖурналаРегистрации(
			СверткаИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписатьСтатусСвертки(-1);
	КонецПопытки;
	
КонецПроцедуры

// Процедура удаляет движения по регистрам и проставляет пометку на удаление документам-регистраторам.
//
Процедура СвернутьИнформационнуюБазу(ПараметрыОбработки, АдресХранилища) Экспорт
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		ЗначениеХранилища = Константы.СтатусСверткиИнформационнойБазы.Получить();
	
		Статус = Неопределено;
		Если ЗначениеХранилища <> Неопределено Тогда
			Статус = ЗначениеХранилища.Получить();
		КонецЕсли;
		
		Если Статус <> Неопределено Тогда
			СпособыСверткиОбъектовМетаданных = Статус.СпособыСверткиОбъектовМетаданных.Скопировать();
		Иначе
			ЗаписатьСтатусСвертки(-1);
			Возврат;
		КонецЕсли;
		
		СпособыСверткиОбъектовМетаданных.Колонки.Добавить("ОсталисьДвиженияПоРегистру", Новый ОписаниеТипов("Булево"));
		
		ПараметрыОбработки.Вставить("НаличиеИзмеренияОрганизация",Ложь);
		ПараметрыОбработки.Вставить("ИмяИзмерения",Ложь);
		
		// Пометка документов на удаление
		ТипыДокументов = Метаданные.Документы;
		
		Для Каждого ТипДокумента Из ТипыДокументов Цикл
			СтруктураРеквизита = ЕстьРеквизитОрганизация(ТипДокумента);
			ПараметрыОбработки.НаличиеИзмеренияОрганизация = СтруктураРеквизита.НаличиеИзмерения;
			ПараметрыОбработки.ИмяИзмерения = СтруктураРеквизита.ИмяИзмерения;
			ПометитьДокументыНаУдаление(ТипДокумента.Имя, ПараметрыОбработки);
		КонецЦикла;
		
		// Удаление движений
		Для Каждого ДанныеРегистра из СпособыСверткиОбъектовМетаданных Цикл
			Если ДанныеРегистра.СпособСвертки = "Не сворачивать" Тогда
				Продолжить;
			КонецЕсли;
			СтруктураИзмерения = ЕстьИзмерениеОрганизация(ДанныеРегистра);
			ПараметрыОбработки.НаличиеИзмеренияОрганизация = СтруктураИзмерения.НаличиеИзмерения;
			ПараметрыОбработки.ИмяИзмерения = СтруктураИзмерения.ИмяИзмерения;
			УдалитьДвиженияПоСписку(ДанныеРегистра, ПараметрыОбработки);
		КонецЦикла;
		
		// Установка флага "РучнаяКорректировка", если у документов остались движения и сняти пометки на удаление
		Для Каждого ТекСтрока из СпособыСверткиОбъектовМетаданных Цикл
			Если ТекСтрока.СпособСвертки <> "Не сворачивать" и Не ТекСтрока.ОсталисьДвиженияПоРегистру Тогда
				Продолжить;
			КонецЕсли;
			СтруктураИзмерения = ЕстьИзмерениеОрганизация(ТекСтрока);
			ПараметрыОбработки.НаличиеИзмеренияОрганизация = СтруктураИзмерения.НаличиеИзмерения;
			ПараметрыОбработки.ИмяИзмерения = СтруктураИзмерения.ИмяИзмерения;
			ПроверитьНеобходимостьСнятияПометкиНаУдаление(ТекСтрока, ПараметрыОбработки);
		КонецЦикла;
		
		АктивизироватьВводОстатков(ПараметрыОбработки.ПериодСвертки, АдресХранилища);
		
		// Установим последовательность на первый документ после свертки.
		СброситьПоследовательностьПослеСвертки(ПараметрыОбработки);
		
	Исключение
		ЗаписьЖурналаРегистрации(
			СверткаИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписатьСтатусСвертки(-1);
	КонецПопытки;
	
КонецПроцедуры

// Процедура очищает регистры накопления и регистры сведений, подчиненные регистратору
//
Процедура УдалитьДвиженияПоПодчиненномуРегистру(ПараметрыРегистра, ПараметрыОбработки, ПериодическийРегистрСведений = Истина)
	
	Перем ДокументСсылка;
	
	// Шаблон запроса к регистру.
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 10000
	|	ДокументРег.Регистратор
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК ДокументРег
	|ГДЕ
	|	&ОтборПоРегистру";
	
	ОтборПоРегистру = "";
	// Отбор по организации.
	Если ПараметрыОбработки.НаличиеИзмеренияОрганизация И ПараметрыОбработки.ТолькоВыбранныеОрганизации Тогда
		ОтборПоРегистру = "ДокументРег." + ПараметрыОбработки.ИмяИзмерения + " В(&ВыбранныеОрганизации)";
	КонецЕсли;
	// Отбор по периоду.
	Если ПериодическийРегистрСведений Тогда
		Если ПараметрыРегистра.СпособСвертки = "Очистить" Тогда
			// Если выбран способ свертки "Очистить", то удаляются все движения. Но для документов "Корректировка поступления"
			// и "Корректировка реализации" движения могут быть после периода свертки. Поэтому для них удаляются только движения
			// до периода свертки.
			ОтборПоРегистру = ОтборПоРегистру + ?(ПустаяСтрока(ОтборПоРегистру), "", "
			|	И ") + "(ДокументРег.Период < &ПериодСвертки
			|			ИЛИ НЕ ДокументРег.Регистратор ССЫЛКА Документ.КорректировкаПоступления
			|				И НЕ ДокументРег.Регистратор ССЫЛКА Документ.КорректировкаРеализации)";
			
		Иначе
			// Удаляются только движения до периода свертки.
			ОтборПоРегистру = ОтборПоРегистру + ?(ПустаяСтрока(ОтборПоРегистру), "", "
			|	И ") + "ДокументРег.Период < &ПериодСвертки";
			
		КонецЕсли;
	КонецЕсли;
		
	// Задаем имя регистра.
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,
		"РегистрБухгалтерии.Хозрасчетный",
		ПараметрыРегистра.ТипОбъектаМД + "." + ПараметрыРегистра.ОбъектМД);
	// Задаем отбор по регистру.
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоРегистру",
		?(ПустаяСтрока(ОтборПоРегистру), "ИСТИНА", ОтборПоРегистру));
	
	Пока Истина Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ВыбранныеОрганизации", ПараметрыОбработки.Организации);
		Запрос.УстановитьПараметр("ПериодСвертки", ПараметрыОбработки.ПериодСвертки);
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			Прервать;
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Если ПараметрыРегистра.СпособСвертки <> "Не сворачивать" Тогда
				Если ПараметрыРегистра.ТипОбъектаМД = "РегистрНакопления" Тогда
					НаборЗаписей = РегистрыНакопления[ПараметрыРегистра.ОбъектМД].СоздатьНаборЗаписей();
				ИначеЕсли ПараметрыРегистра.ТипОбъектаМД = "РегистрСведений" Тогда
					НаборЗаписей = РегистрыСведений[ПараметрыРегистра.ОбъектМД].СоздатьНаборЗаписей();
				ИначеЕсли ПараметрыРегистра.ТипОбъектаМД = "РегистрБухгалтерии" Тогда
					НаборЗаписей = РегистрыБухгалтерии[ПараметрыРегистра.ОбъектМД].СоздатьНаборЗаписей();
				КонецЕсли;
				
				НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДетальныеЗаписи.Регистратор);
				// Для документов "Корректировка поступления" и "Корректировка реализации" движения могут быть
				// после периода свертки. Поэтому удаляются только движения до периода свертки.
				Если ТипЗнч(ВыборкаДетальныеЗаписи.Регистратор) = Тип("ДокументСсылка.КорректировкаПоступления") 
					ИЛИ ТипЗнч(ВыборкаДетальныеЗаписи.Регистратор) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
					НаборЗаписей.Прочитать();
					
					НомерТекущейЗаписи = 0;
					
					Пока НомерТекущейЗаписи < НаборЗаписей.Количество() Цикл
						Если (НаборЗаписей[НомерТекущейЗаписи].Период < ПараметрыОбработки.ПериодСвертки) Тогда
							НаборЗаписей.Удалить(НомерТекущейЗаписи);
						Иначе
							НомерТекущейЗаписи = НомерТекущейЗаписи + 1;
							ПараметрыРегистра.ОсталисьДвиженияПоРегистру = Истина;
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
				ЗаписатьДанные(НаборЗаписей);
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьНеобходимостьСнятияПометкиНаУдаление(ПараметрыРегистра, ПараметрыОбработки)
	
	Если ПараметрыРегистра.ТипОбъектаМД = "РегистрСведений" Тогда
		МетаданныеРегистра = Метаданные.РегистрыСведений[ПараметрыРегистра.ОбъектМД];
		Если МетаданныеРегистра.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыРегистра.ТипОбъектаМД = "РегистрНакопления" Тогда
		НаборЗаписей = РегистрыНакопления[ПараметрыРегистра.ОбъектМД].СоздатьНаборЗаписей();
	ИначеЕсли ПараметрыРегистра.ТипОбъектаМД = "РегистрСведений" Тогда
		НаборЗаписей = РегистрыСведений[ПараметрыРегистра.ОбъектМД].СоздатьНаборЗаписей();
	ИначеЕсли ПараметрыРегистра.ТипОбъектаМД = "РегистрБухгалтерии" Тогда
		НаборЗаписей = РегистрыБухгалтерии[ПараметрыРегистра.ОбъектМД].СоздатьНаборЗаписей();
	КонецЕсли;
	
	Если НаборЗаписей.Отбор.Найти("Регистратор") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивТиповДокументовРегистраторов = НаборЗаписей.Отбор.Регистратор.ТипЗначения.Типы();
	
	Для Каждого ТипДокументаРегистратора из МассивТиповДокументовРегистраторов Цикл
		МетаДанныеДокумента = Метаданные.НайтиПоТипу(ТипДокументаРегистратора);
		ТекстЗапроса = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ 
			|	ДанныеРегистра.Регистратор КАК Регистратор
			|	ИЗ
			|		" + ПараметрыРегистра.ТипОбъектаМД + "."+ПараметрыРегистра.ОбъектМД + " КАК ДанныеРегистра
			|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ." + МетаДанныеДокумента.Имя + " КАК ДокументРегистратор
			|	ПО ДанныеРегистра.Регистратор = ДокументРегистратор.Ссылка
			|	ГДЕ
			|		ДокументРегистратор.ПометкаУдаления";
		
		Если ПараметрыОбработки.НаличиеИзмеренияОрганизация и ПараметрыОбработки.ТолькоВыбранныеОрганизации Тогда
			ТекстЗапроса = ТекстЗапроса + "
				|	И ДанныеРегистра." + ПараметрыОбработки.ИмяИзмерения + " В (&ВыбранныеОрганизации)";
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		Запрос.УстановитьПараметр("ВыбранныеОрганизации", ПараметрыОбработки.Организации);
		Запрос.УстановитьПараметр("ПериодСвертки", ПараметрыОбработки.ПериодСвертки);
		
		Результат = Запрос.Выполнить();
		
		Если Результат.Пустой() Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СнятьПометкуНаУдалениеРегистратору(ВыборкаДетальныеЗаписи.Регистратор);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПометитьДокументыНаУдаление(ТипДокумента, ПараметрыОбработки)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументДляУдаления.Ссылка КАК Документ
		|ИЗ
		|	Документ." + ТипДокумента + " КАК ДокументДляУдаления
		|ГДЕ
		|	ДокументДляУдаления.Дата <= &Дата
		|	И НЕ ДокументДляУдаления.ПометкаУдаления";
		
	Если ПараметрыОбработки.НаличиеИзмеренияОрганизация и ПараметрыОбработки.ТолькоВыбранныеОрганизации Тогда
		Запрос.Текст = Запрос.Текст + "
			|	И ДокументДляУдаления." + ПараметрыОбработки.ИмяИзмерения + " В (&ВыбранныеОрганизации)";
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	Документ";
	
	Запрос.УстановитьПараметр("Дата", ПараметрыОбработки.ПериодСвертки - 1);
	Запрос.УстановитьПараметр("ВыбранныеОрганизации", ПараметрыОбработки.Организации);
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		УстановитьПометкуНаУдалениеРегистратору(ВыборкаДетальныеЗаписи.Документ);
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает пометку на удаление.
//
Процедура УстановитьПометкуНаУдалениеРегистратору(Регистратор)
	
	ДокументДляУдаления = Регистратор.ПолучитьОбъект();
	// Менять данные последовательности по документу не требуется, т.к. он удаляется из учета совсем.
	ДокументДляУдаления.ДополнительныеСвойства.Вставить("НеИзменятьРегистрациюВПоследовательности", Истина);
	ДокументДляУдаления.ПометкаУдаления = Истина;
	ДокументДляУдаления.Проведен = Ложь;
	ЗаписатьДанные(ДокументДляУдаления);
	
	// Явно удалим запись о документе из последовательности.
	РаботаСПоследовательностями.УдалитьДокументИзПоследовательности(Регистратор);
		
КонецПроцедуры

// Процедура снимает пометку на удаление.
//
Процедура СнятьПометкуНаУдалениеРегистратору(Регистратор)
	
	ДокументДляИзменения = Регистратор.ПолучитьОбъект();
	// Менять данные последовательности по документу не требуется, т.к. он остается в периоде "до свертки",
	// в котором полноценный учет уже невозможен после свертки, 
	// содержащиеся в нем документы требуются только для правильного формирования входящих остатков на дату свертки.
	ДокументДляИзменения.ДополнительныеСвойства.Вставить("НеИзменятьРегистрациюВПоследовательности", Истина);
	МетаданныеДокумента = ДокументДляИзменения.Метаданные().Реквизиты;
	ДокументДляИзменения.ПометкаУдаления = Ложь;
	ДокументДляИзменения.Проведен = Истина;
	Если МетаданныеДокумента.Найти("РучнаяКорректировка") <> Неопределено Тогда
		ДокументДляИзменения.РучнаяКорректировка = Истина;
	КонецЕсли;
	ЗаписатьДанные(ДокументДляИзменения);
	
КонецПроцедуры

// Процедура устанавливает последовательность на первый документ после даты свертки.
//
Процедура СброситьПоследовательностьПослеСвертки(ПараметрыОбработки)

	// Найдем первый документ в периоде после свертки по каждой сворачиваемой организации.
	Для Каждого ЭлементСписка Из ПараметрыОбработки.Организации Цикл
		ТекущаяОрганизация = ЭлементСписка.Значение;
	
		МоментПервогоДокумента = РаботаСПоследовательностями.МоментВремениПервогоДокументаВПоследовательности(
			ТекущаяОрганизация, НачалоДня(ПараметрыОбработки.ПериодСвертки), Ложь);
			
		Если МоментПервогоДокумента = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(МоментПервогоДокумента.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		// Отметим для найденного документа факт нарушения последовательности.
		РаботаСПоследовательностями.СброситьСостояниеПоследовательностиДокумента(
			МоментПервогоДокумента.Ссылка,
			МоментПервогоДокумента.Дата,
			ТекущаяОрганизация);
	КонецЦикла;

КонецПроцедуры

// Процедура очищает периодические регистры сведений не подчиненные регистратору
//
Процедура УдалитьДвиженияПоРегиструСведенийПериодическомуБезРегистратора(ПараметрыРегистра, ПараметрыОбработки)
	
	МДРегистратора = Метаданные.РегистрыСведений.Найти(ПараметрыРегистра.ОбъектМД);
	МетаданныеРегистра = Метаданные.РегистрыСведений[ПараметрыРегистра.ОбъектМД];
	
	Если МетаданныеРегистра.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Год Тогда
		ПериодЗаписи = НачалоГода(ПараметрыОбработки.ПериодСвертки-1);
		
	ИначеЕсли МетаданныеРегистра.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Квартал Тогда
		ПериодЗаписи = НачалоКвартала(ПараметрыОбработки.ПериодСвертки-1);
		
	ИначеЕсли МетаданныеРегистра.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Месяц Тогда
		ПериодЗаписи = НачалоМесяца(ПараметрыОбработки.ПериодСвертки-1);
		
	ИначеЕсли МетаданныеРегистра.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.День Тогда
		ПериодЗаписи = НачалоДня(ПараметрыОбработки.ПериодСвертки-1);
		
	Иначе
		ПериодЗаписи = ПараметрыОбработки.ПериодСвертки-1;
		
	КонецЕсли;
	
	УсловиеОтборПоОрганизации = "";
	
	Если ПараметрыОбработки.НаличиеИзмеренияОрганизация и ПараметрыОбработки.ТолькоВыбранныеОрганизации Тогда
		УсловиеОтборПоОрганизации = ПараметрыОбработки.ИмяИзмерения + " В (&ВыбранныеОрганизации)";
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
		|	*,
		|	ИСТИНА КАК Активность,
		|	&ПериодЗаписи КАК Период
		|ИЗ
		|	РегистрСведений." + ПараметрыРегистра.ОбъектМД + ".СрезПоследних(&ТекДата, " + УсловиеОтборПоОрганизации + " ) КАК РегСведений");
	
	Запрос.УстановитьПараметр("ВыбранныеОрганизации", ПараметрыОбработки.Организации);
	Запрос.УстановитьПараметр("ТекДата",Новый Граница(КонецДня(ПараметрыОбработки.ПериодСвертки - 1),ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодЗаписи", ПериодЗаписи);
	
	ТаблицаДвижений = Запрос.Выполнить().Выгрузить();
	
	УдалитьДвиженияПоРегиструСведенийБезРегистратора(ПараметрыРегистра, ПараметрыОбработки);
	
	// Если выбран способ свертки "Очистить", то запись с данными по срезу последних не создается.
	Если ПараметрыРегистра.СпособСвертки = "Очистить" Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОбработки.ТолькоВыбранныеОрганизации и ПараметрыОбработки.НаличиеИзмеренияОрганизация Тогда
		Для Каждого Организация Из ПараметрыОбработки.Организации Цикл
			НаборЗаписей = РегистрыСведений[ПараметрыРегистра.ОбъектМД].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Период.Установить(ПериодЗаписи);
			НаборЗаписей.Отбор[ПараметрыОбработки.ИмяИзмерения].Установить(Организация.Значение);
			Отбор = Новый Структура();
			Отбор.Вставить(ПараметрыОбработки.ИмяИзмерения,Организация.Значение);
			МассивСтрокПоОрганизации = ТаблицаДвижений.НайтиСтроки(Отбор);
			ТаблицаДвиженийПоОрганизации = ТаблицаДвижений.СкопироватьКолонки();
			Для Каждого Стр Из МассивСтрокПоОрганизации Цикл
				НоваяСтрока = ТаблицаДвиженийПоОрганизации.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Стр);
			КонецЦикла;
			НаборЗаписей.Загрузить(ТаблицаДвиженийПоОрганизации);
			ЗаписатьДанные(НаборЗаписей);
		КонецЦикла;
	Иначе
		НаборЗаписей = РегистрыСведений[ПараметрыРегистра.ОбъектМД].СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ПериодЗаписи);
		НаборЗаписей.Загрузить(ТаблицаДвижений);
		ЗаписатьДанные(НаборЗаписей);
	КонецЕсли;
	
КонецПроцедуры

// Процедура очищает не периодические регистры сведений не подчиненные регистратору
//
Процедура УдалитьДвиженияПоРегиструСведенийБезРегистратора(ПараметрыРегистра, ПараметрыОбработки)
	
	МДРегистратора = Метаданные.РегистрыСведений.Найти(ПараметрыРегистра.ОбъектМД);
	Если МДРегистратора.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
		УдалитьДвиженияПоРегиструСведенийБезРегистратораНепериодическому(ПараметрыРегистра.ОбъектМД, ПараметрыОбработки);
	Иначе
		УдалитьДвиженияПоРегиструСведенийБезРегистратораПериодическому(ПараметрыРегистра, ПараметрыОбработки);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьДвиженияПоРегиструСведенийБезРегистратораНепериодическому(ИмяРегистра, ПараметрыОбработки)
	
	Если ПараметрыОбработки.НаличиеИзмеренияОрганизация и ПараметрыОбработки.ТолькоВыбранныеОрганизации Тогда
		Для Каждого Организация Из ПараметрыОбработки.Организации Цикл
			НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор[ПараметрыОбработки.ИмяИзмерения].Установить(Организация.Значение);
			ЗаписатьДанные(НаборЗаписей);
		КонецЦикла;
	Иначе
		НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		ЗаписатьДанные(НаборЗаписей);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьДвиженияПоРегиструСведенийБезРегистратораПериодическому(ПараметрыРегистра, ПараметрыОбработки)
	
	Если ПараметрыОбработки.НаличиеИзмеренияОрганизация и ПараметрыОбработки.ТолькоВыбранныеОрганизации Тогда
		
		Для Каждого Организация Из ПараметрыОбработки.Организации Цикл
			НаборЗаписей = РегистрыСведений[ПараметрыРегистра.ОбъектМД].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор[ПараметрыОбработки.ИмяИзмерения].Установить(Организация.Значение);
			НаборЗаписей.Прочитать();
			НомерТекущейЗаписи = 0;
			
			Пока НомерТекущейЗаписи < НаборЗаписей.Количество() Цикл
				Если (НаборЗаписей[НомерТекущейЗаписи].Период <= ПараметрыОбработки.ПериодСвертки - 1)
					ИЛИ (ПараметрыРегистра.СпособСвертки = "Очистить") Тогда
					НаборЗаписей.Удалить(НомерТекущейЗаписи);
				Иначе
					НомерТекущейЗаписи = НомерТекущейЗаписи + 1;
				КонецЕсли;
			КонецЦикла;
			
			ЗаписатьДанные(НаборЗаписей);
		КонецЦикла;
		
	Иначе
		НаборЗаписей = РегистрыСведений[ПараметрыРегистра.ОбъектМД].СоздатьНаборЗаписей();
		НаборЗаписей.Прочитать();
		НомерТекущейЗаписи = 0;
		
		Пока НомерТекущейЗаписи < НаборЗаписей.Количество() Цикл
			Если (НаборЗаписей[НомерТекущейЗаписи].Период <= ПараметрыОбработки.ПериодСвертки - 1)	
				ИЛИ (ПараметрыРегистра.СпособСвертки = "Очистить") Тогда
				НаборЗаписей.Удалить(НомерТекущейЗаписи);
			Иначе
				НомерТекущейЗаписи = НомерТекущейЗаписи + 1;
			КонецЕсли;
		КонецЦикла;
		
		ЗаписатьДанные(НаборЗаписей);
	КонецЕсли;
	
КонецПроцедуры

// Процедура производит свертку по переданному списку объектов
//
Процедура УдалитьДвиженияПоСписку(Данные, ПараметрыОбработки)
	
	Если Данные.ТипОбъектаМД = "РегистрНакопления" Тогда
		
		РегистрыНакопления[Данные.ОбъектМД].УстановитьИспользованиеИтогов(Ложь);
		
		Попытка
			
			УдалитьДвиженияПоПодчиненномуРегистру(Данные, ПараметрыОбработки);
			
		Исключение
			РегистрыНакопления[Данные.ОбъектМД].УстановитьИспользованиеИтогов(Истина);
			
			ЗаписьЖурналаРегистрации(
				СверткаИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Возврат;
			
		КонецПопытки;
		
		РегистрыНакопления[Данные.ОбъектМД].УстановитьИспользованиеИтогов(Истина);
		
	ИначеЕсли Данные.ТипОбъектаМД = "РегистрБухгалтерии" Тогда	
		
		РегистрыБухгалтерии[Данные.ОбъектМД].УстановитьИспользованиеИтогов(Ложь);
		
		Попытка
			
			УдалитьДвиженияПоПодчиненномуРегистру(Данные, ПараметрыОбработки);
			
		Исключение
			РегистрыБухгалтерии[Данные.ОбъектМД].УстановитьИспользованиеИтогов(Истина);
			
			ЗаписьЖурналаРегистрации(
				СверткаИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Возврат;
			
		КонецПопытки;
		
		РегистрыБухгалтерии[Данные.ОбъектМД].УстановитьИспользованиеИтогов(Истина);
		
	ИначеЕсли Данные.ТипОбъектаМД = "РегистрСведений" Тогда
		
		ТекущийРегистр = Метаданные.РегистрыСведений.Найти(Данные.ОбъектМД);
		
		Попытка
			
			Если ТекущийРегистр.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
				Если ТекущийРегистр.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
					ПериодическийРегистрСведений = Истина;
				Иначе
					ПериодическийРегистрСведений = Ложь;
				КонецЕсли;
				УдалитьДвиженияПоПодчиненномуРегистру(Данные, ПараметрыОбработки, ПериодическийРегистрСведений);
			ИначеЕсли ТекущийРегистр.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый
				И НЕ ТекущийРегистр.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический
				И НЕ Данные.СпособСвертки = "Не сворачивать" Тогда
				УдалитьДвиженияПоРегиструСведенийПериодическомуБезРегистратора(Данные, ПараметрыОбработки);
			ИначеЕсли ТекущийРегистр.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый
				И ТекущийРегистр.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический 
				И НЕ Данные.СпособСвертки = "Не сворачивать" Тогда
				УдалитьДвиженияПоРегиструСведенийБезРегистратора(Данные, ПараметрыОбработки);
			КонецЕсли;
			
		Исключение
			
			ЗаписьЖурналаРегистрации(
				СверткаИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			Возврат;
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает новое значение в константу настроек о
// текущем этапе свертки информационной базы.
Процедура ЗаписатьСтатусСвертки(Знач ТекущийЭтапСвертки) Экспорт
	
	ЗначениеХранилища = Константы.СтатусСверткиИнформационнойБазы.Получить();
	
	Статус = Неопределено;
	Если ЗначениеХранилища <> Неопределено Тогда
		Статус = ЗначениеХранилища.Получить();
		Статус.ТекущийЭтапСвертки = ТекущийЭтапСвертки;
	КонецЕсли;                                         
	
	Константы.СтатусСверткиИнформационнойБазы.Установить(Новый ХранилищеЗначения(Статус));

КонецПроцедуры

// Находит первую попавшуюся организацию, для подстановки в шапку документа
// "Операция БУ и НУ", так как реквизит "Организация" обязателен для заполнения
Функция ПолучитьОрганизациюДляЗаполнения()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Организации.Ссылка КАК Организация
		|ИЗ
		|	Справочник.Организации КАК Организации
		|
		|УПОРЯДОЧИТЬ ПО
		|	Организации.Код";
	
	Результат = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = Результат.Выбрать();
	
	Организация = Справочники.Организации.ПустаяСсылка();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Организация = ВыборкаДетальныеЗаписи.Организация;
	КонецЦикла;
	
	Возврат Организация;
	
КонецФункции

// Функция проверяет существование у регистра измерения "Организация" или "ГоловнаяОрганизация"
//
Функция ЕстьИзмерениеОрганизация(ДанныеРегистра)
	
	СтруктураВозврата = Новый Структура("НаличиеИзмерения, ИмяИзмерения", Ложь, "");
	Если ДанныеРегистра.ТипОбъектаМД = "РегистрНакопления" Тогда
		ТекущийРегистр = Метаданные.РегистрыНакопления.Найти(ДанныеРегистра.ОбъектМД);
	ИначеЕсли ДанныеРегистра.ТипОбъектаМД = "РегистрСведений" Тогда
		ТекущийРегистр = Метаданные.РегистрыСведений.Найти(ДанныеРегистра.ОбъектМД);
	ИначеЕсли ДанныеРегистра.ТипОбъектаМД = "РегистрБухгалтерии" Тогда
		СтруктураВозврата.НаличиеИзмерения = Истина;
		СтруктураВозврата.ИмяИзмерения = "Организация";
		Возврат СтруктураВозврата;
	Иначе
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	Если ТекущийРегистр.Измерения.Найти("Организация") <> Неопределено Тогда
		СтруктураВозврата.НаличиеИзмерения = Истина;
		СтруктураВозврата.ИмяИзмерения = "Организация";
	ИначеЕсли ТекущийРегистр.Измерения.Найти("ГоловнаяОрганизация") <> Неопределено Тогда
		СтруктураВозврата.НаличиеИзмерения = Истина;
		СтруктураВозврата.ИмяИзмерения = "ГоловнаяОрганизация";
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Функция ЕстьРеквизитОрганизация(ТипДокумента)
	
	СтруктураВозврата = Новый Структура("НаличиеИзмерения, ИмяИзмерения", Ложь, "");
		
	Если ТипДокумента.Реквизиты.Найти("Организация") <> Неопределено Тогда
		СтруктураВозврата.НаличиеИзмерения = Истина;
		СтруктураВозврата.ИмяИзмерения = "Организация";
	ИначеЕсли ТипДокумента.Реквизиты.Найти("ГоловнаяОрганизация") <> Неопределено Тогда
		СтруктураВозврата.НаличиеИзмерения = Истина;
		СтруктураВозврата.ИмяИзмерения = "ГоловнаяОрганизация";
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

Процедура СформироватьОтчетПроверкиОстатков(ПараметрыОтчета, АдресХранилища) Экспорт
	
	Если ПараметрыОтчета.ТипДанных = "РегистрыБухгалтерии" Тогда
		СформироватьОтчетПоРегиструБухгалтерии(ПараметрыОтчета, АдресХранилища)
	Иначе
		СформироватьУниверсальныйОтчет(ПараметрыОтчета, АдресХранилища)
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьОтчетПоРегиструБухгалтерии(ПараметрыОтчета, АдресХранилища)
	
	СхемаКомпоновкиДанных = Обработки.СверткаИнформационнойБазы.ПолучитьМакет("ПроверкаСозданныхДокументов");
	НК = Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных);
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	ЗначениеХранилища = Константы.СтатусСверткиИнформационнойБазы.Получить();
	
	Статус = Неопределено;
	Если ЗначениеХранилища <> Неопределено Тогда
		Статус = ЗначениеХранилища.Получить();
		ПараметрыОтчета.ПериодСвертки = Статус.ПериодСвертки;
	КонецЕсли;

	ПередКомпоновкойОтчета(Настройки,ПараметрыОтчета);
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,Настройки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);
	
	Результат = Новый ТабличныйДокумент;
	
	ВывестиЗаголовокОтчета(ПараметрыОтчета, Настройки, Результат);
	
	ВысотаШапки = Результат.ВысотаТаблицы + 1;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	Результат.ФиксацияСверху = ВысотаШапки;
	Результат.ПоказатьУровеньГруппировокСтрок(0);
	
	ПоместитьВоВременноеХранилище(Новый Структура("Результат", Результат), АдресХранилища);
	
КонецПроцедуры

Процедура СформироватьУниверсальныйОтчет(ПараметрыОтчета, АдресХранилища)
	
	ТаблицаПроверки = Новый ТаблицаЗначений;
	ТаблицаПроверки.Колонки.Добавить("Наименование");
	ТаблицаПроверки.Колонки.Добавить("Представление");
	ТаблицаПроверки.Колонки.Добавить("ТипРегистра");
	ТаблицаПроверки.Колонки.Добавить("Проверка");
	Для Каждого ТекущийРегистр Из ПараметрыОтчета.СписокРегистровСведений Цикл
		Если Не ТекущийРегистр.Пометка Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТаблицаПроверки.Добавить();
		НоваяСтрока.Наименование = ТекущийРегистр.Значение;
		НоваяСтрока.Представление = ТекущийРегистр.Представление;
		НоваяСтрока.ТипРегистра = "РегистрыСведений";
		НоваяСтрока.Проверка = 0;
		СформироватьЗапросПоМетаданным(НоваяСтрока, ПараметрыОтчета);
	КонецЦикла;
	
	Для Каждого ТекущийРегистр Из ПараметрыОтчета.СписокРегистровНакопления Цикл
		Если Не ТекущийРегистр.Пометка Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТаблицаПроверки.Добавить();
		НоваяСтрока.Наименование = ТекущийРегистр.Значение;
		НоваяСтрока.Представление = ТекущийРегистр.Представление;
		НоваяСтрока.ТипРегистра = "РегистрыНакопления";
		НоваяСтрока.Проверка = 0;
		СформироватьЗапросПоМетаданным(НоваяСтрока, ПараметрыОтчета);
	КонецЦикла;
	
	ВнешниеНаборыДанных = Новый Структура("ТаблицаПроверки", ТаблицаПроверки);
	
	ДанныеРасшифровкиОбъект = Неопределено;
	
	СхемаКомпоновкиДанных = Обработки.СверткаИнформационнойБазы.ПолучитьМакет("ПроверкаОстатковПоРегистрам");
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	НастройкиДляКомпоновкиМакета = КомпоновщикНастроек.ПолучитьНастройки();
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиДляКомпоновкиМакета);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, , Истина);
	
	Результат = Новый ТабличныйДокумент;
	
	Обработки.СверткаИнформационнойБазы.ВывестиЗаголовокОтчета(ПараметрыОтчета, НастройкиДляКомпоновкиМакета, Результат);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(Результат);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновки, Истина);

	ПоместитьВоВременноеХранилище(Новый Структура("Результат", Результат), АдресХранилища);
	
КонецПроцедуры

Процедура СформироватьЗапросПоМетаданным(ДанныеРегистра, ПараметрыОтчета)
	
	ТекстПроверки = Символы.ПС + "ВЫБРАТЬ";
	ТекстЗапроса = "ВЫБРАТЬ";
	ТекстУсловияСоединения = Символы.ПС + "ПО ";
	
	Если ДанныеРегистра.ТипРегистра = "РегистрыСведений" Тогда
		ИмяТипаДанных = "РегистрСведений";
		имяТаблицыРегистра = "СрезПоследних";
		ТекущийРегистр = Метаданные.РегистрыСведений.Найти(ДанныеРегистра.Наименование);
		УсловиеПериодаВиртуальнойТаблицы = "&ПериодСверткиВиртуальнойТаблицы";
	ИначеЕсли ДанныеРегистра.ТипРегистра = "РегистрыНакопления" Тогда
		ИмяТипаДанных = "РегистрНакопления";
		имяТаблицыРегистра = "Остатки";
		ТекущийРегистр = Метаданные.РегистрыНакопления.Найти(ДанныеРегистра.Наименование);
		УсловиеПериодаВиртуальнойТаблицы = "&ПериодСвертки";
	КонецЕсли;
	
	СтруктураИзмерений = Новый Массив;
	
	Соединение = "";
	ЕстьИзмерениеОрганизация = Ложь;
	ИмяИзмеренияОрганизация = "";
	ОтборПоОрганизациям = Ложь;
	Если ПараметрыОтчета.Организации.Количество() > 0 Тогда
		ОтборПоОрганизациям = Истина;
	КонецЕсли;
	
	Для Каждого ТекИзмерение Из ТекущийРегистр.Измерения Цикл
		Если ОтборПоОрганизациям Тогда
			Если ТекИзмерение.Имя = "Организация" или ТекИзмерение.Имя = "ГоловнаяОрганизация" Тогда
				ЕстьИзмерениеОрганизация = Истина;
				ИмяИзмеренияОрганизация = ТекИзмерение.Имя;
			КонецЕсли;
		КонецЕсли;
		ДобавитьНовоеПолеВЗапрос(ТекстЗапроса, ТекИзмерение);
		ТекстУсловияСоединения = ТекстУсловияСоединения + "
														  |" + Соединение + "ВТАктивныеДвижения." + ТекИзмерение.Имя
														  	 + " = ВТНеактивныеДвижения." + ТекИзмерение.Имя;
		Соединение = " И ";
		
		СтруктураИзмерений.Добавить(ТекИзмерение.Имя);
		
	КонецЦикла;
	
	ТекстПроверки = ТекстПроверки + "
		|КОЛИЧЕСТВО(ВЫБОР
		|		КОГДА ВТНеактивныеДвижения.Активность ЕСТЬ NULL 
		|			ТОГДА ""Ошибка""
		|		ИНАЧЕ ""Ошибок не обнаружено""
		|	КОНЕЦ) КАК Проверка
		|ИЗ
		|ВТАктивныеДвижения КАК ВТАктивныеДвижения
		|	ЛЕВОЕ СОЕДИНЕНИЕ ВТНеактивныеДвижения КАК ВТНеактивныеДвижения";
	
	Для Каждого ТекРесурс Из ТекущийРегистр.Ресурсы Цикл
		ДобавитьНовоеПолеВЗапрос(ТекстЗапроса,ТекРесурс, ИмяТипаДанных);
		ТекстУсловияСоединения = ТекстУсловияСоединения + "
														  |И ВТАктивныеДвижения." + ТекРесурс.Имя
	              										  						  + " = ВТНеактивныеДвижения." + ТекРесурс.Имя;
		КонецЦикла;
	Если ИмяТипаДанных = "РегистрСведений" Тогда
		Для Каждого ТекРеквизит Из ТекущийРегистр.Реквизиты Цикл
			ДобавитьНовоеПолеВЗапрос(ТекстЗапроса, ТекРеквизит);
			ТекстУсловияСоединения = ТекстУсловияСоединения + "
															  |И ВТАктивныеДвижения." + ТекРеквизит.Имя
															  						  + " = ВТНеактивныеДвижения." + ТекРеквизит.Имя;
		КонецЦикла;
	КонецЕсли;																		  
																			   
	ТекстУсловияСоединения = ТекстУсловияСоединения + "
		|ГДЕ
		|ВТНеактивныеДвижения.Активность ЕСТЬ NULL";
	ТекстЗапросаАктивныеДвижения = ТекстЗапроса;
	
	Если ИмяТипаДанных = "РегистрНакопления" Тогда
		ТекстЗапросаАктивныеДвижения = СтрЗаменить(ТекстЗапросаАктивныеДвижения, "ЗначениеДляЗамены", "Остаток");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЗначениеДляЗамены", "");
	КонецЕсли;
	УсловиеОтбораПоОрганизации = ?(ЕстьИзмерениеОрганизация, ИмяИзмеренияОрганизация + " В (&ВыбранныеОрганизации)", "ИСТИНА");
	ТекстЗапроса = ТекстЗапроса + "
								  |ЛОЖЬ КАК Активность
								  |ПОМЕСТИТЬ ВТНеактивныеДвижения
								  |ИЗ " + ИмяТипаДанных + "." + ДанныеРегистра.Наименование + " КАК ТаблицаРегистра
								  |ГДЕ
								  |ТаблицаРегистра.Регистратор ССЫЛКА Документ.ОперацияБух
								  |И ТаблицаРегистра.Период = &ПериодСвертки
								  |И НЕ ТаблицаРегистра.Активность
								  |И " + УсловиеОтбораПоОрганизации + "
								  |;
								  |
								  |////////////////////////////////////////////////////////////////////////////////"  
								  + Символы.ПС + ТекстЗапросаАктивныеДвижения + "
								  |ИСТИНА КАК Активность
								  |ПОМЕСТИТЬ ВТАктивныеДвижения
								  |ИЗ " + ИмяТипаДанных + "." + ДанныеРегистра.Наименование + "." 
								  		+ ИмяТаблицыРегистра + "(" + УсловиеПериодаВиртуальнойТаблицы + ", " + УсловиеОтбораПоОрганизации + ") КАК ТаблицаРегистра";
	ТекстЗапроса = ТекстЗапроса + ";" + ТекстПроверки + ТекстУсловияСоединения;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ПериодСвертки", ПараметрыОтчета.ПериодСвертки);
	Запрос.УстановитьПараметр("ПериодСверткиВиртуальнойТаблицы", ПараметрыОтчета.ПериодСвертки - 1);
	Запрос.УстановитьПараметр("ВыбранныеОрганизации", ПараметрыОтчета.Организации);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	КоличествоОшибок = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДанныеРегистра.Проверка = ВыборкаДетальныеЗаписи.Проверка;
	КонецЦикла;
		
КонецПроцедуры

Процедура ДобавитьНовоеПолеВЗапрос(ТекстЗапроса, Поле, ИмяТипаДанных = "")
	
	Если ИмяТипаДанных = "РегистрНакопления" Тогда
		ИмяПоля = Поле.Имя + "ЗначениеДляЗамены"
	Иначе
		ИмяПоля = Поле.Имя
	КонецЕсли;
	
	Если Поле.Тип = Новый ОписаниеТипов("Строка") Тогда
		ТекстЗапроса = ТекстЗапроса + "
									  |ВЫРАЗИТЬ(ТаблицаРегистра." + ИмяПоля + " КАК Строка(250)) КАК " + Поле.Имя + ",";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
									  |ТаблицаРегистра." + ИмяПоля + " КАК " + Поле.Имя + ",";
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередКомпоновкойОтчета(Настройки,ПараметрыОтчета)
	
	Настройки.Структура.Очистить();
	Настройки.Выбор.Элементы.Очистить();
	ПередКомпоновкойОтчетаПоРегиструБухгалтерии(Настройки,ПараметрыОтчета)
	
КонецПроцедуры

Процедура ПередКомпоновкойОтчетаПоРегиструБухгалтерии(Настройки,ПараметрыОтчета)
	
	ГруппаПоказатели = Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаПоказатели.Заголовок     = "Показатели";
	ГруппаПоказатели.Использование = Истина;
	ГруппаПоказатели.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	ГруппаОстаткиДоСвертки = Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаОстаткиДоСвертки.Заголовок     = "Остатки до свертки";
	ГруппаОстаткиДоСвертки.Использование = Истина;
	ГруппаОстаткиДоСвертки.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	ГруппаОстаткиПослеСвертки = Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаОстаткиПослеСвертки.Заголовок     = "Остатки после свертки";
	ГруппаОстаткиПослеСвертки.Использование = Истина;
	ГруппаОстаткиПослеСвертки.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;
	
	ГруппаПроверка = Настройки.Выбор.Элементы.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
	ГруппаПроверка.Заголовок     = "Проверка";
	ГруппаПроверка.Использование = Истина;
	ГруппаПроверка.Расположение  = РасположениеПоляКомпоновкиДанных.Вертикально;

	Для Каждого Показатель Из ПараметрыОтчета.НаборПоказателей Цикл
		Если Показатель.Значение Тогда 
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаПоказатели, "Показатели." + Показатель.Ключ);
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаОстаткиДоСвертки, "ОстаткиДоСвертки.Сумма" + Показатель.Ключ + "ОстатокДоСвертки");
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаОстаткиПослеСвертки, "ОстаткиПослеСвертки.Сумма" + Показатель.Ключ + "ОстатокПослеСвертки");
			БухгалтерскиеОтчетыКлиентСервер.ДобавитьВыбранноеПоле(ГруппаПроверка, "Проверка." + Показатель.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	// Формирование структуры отчета
	Структура = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	
	ПолеГруппировки = Структура.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Использование  = Истина;
	ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Организация");
	ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;	
	Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	Структура.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
	СтруктураСчет = Настройки.Структура[0].Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ПолеГруппировки = СтруктураСчет.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Использование  = Истина;
	ПолеГруппировки.Поле           = Новый ПолеКомпоновкиДанных("Счет");
	ПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
	
	СтруктураСчет.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	СтруктураСчет.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	
	// Установка отбора на выводимый уровень иерархии счета
	ГруппаЭлементовОтбора = СтруктураСчет.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементовОтбора.Применение = ТипПримененияОтбораКомпоновкиДанных.Иерархия;
	ГруппаЭлементовОтбора.ТипГруппы  = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаЭлементовОтбора, "ПараметрыДанных.ПоСубсчетам", Истина);
	БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(ГруппаЭлементовОтбора, "СистемныеПоля.УровеньВГруппировке", 1);

	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Настройки, "ПоСубсчетам", ПараметрыОтчета.ПоСубсчетам);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Настройки, "ПериодСвертки", ПараметрыОтчета.ПериодСвертки);
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(Настройки, "ВыбранныеОрганизации", ПараметрыОтчета.Организации, ПараметрыОтчета.Организации.Количество() > 0);
	
	// Отключение вывода отборов
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(СтруктураСчет, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	
КонецПроцедуры

Процедура СкрыватьНастройкиПриФормированииОтчета(Форма, ДополнительныеПараметры = Неопределено) Экспорт
	
	СкрыватьНастройкиПриФормированииОтчета = Форма.СкрыватьНастройкиПриФормированииОтчета;
	ПанельНастроек       = Форма.Элементы.ГруппаПанельНастроек;
	КнопкаПанельНастроек = Форма.Элементы.ПанельНастроек;
	
	Если СкрыватьНастройкиПриФормированииОтчета Тогда
		ПанельНастроек.Видимость = Ложь;
		Если КнопкаПанельНастроек <> Неопределено Тогда
			ИзменитьЗаголовокКнопкиПанельНастроек(КнопкаПанельНастроек, Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИзменитьЗаголовокКнопкиПанельНастроек(Кнопка, ВидимостьПанелиНастроек) Экспорт
	
	Если ВидимостьПанелиНастроек Тогда
		Кнопка.Заголовок = НСтр("ru = 'Скрыть настройки'");
	Иначе
		Кнопка.Заголовок = НСтр("ru = 'Показать настройки'");
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиЗаголовокОтчета(ПараметрыОтчета, Настройки, Результат) Экспорт
	
	Макет = ПолучитьОбщийМакет("ОбщиеОбластиСтандартногоОтчета");
	ОбластьЗаголовок        = Макет.ПолучитьОбласть("ОбластьЗаголовок");
	ОбластьОписаниеНастроек = Макет.ПолучитьОбласть("ОписаниеНастроек");
	ОбластьОрганизация      = Макет.ПолучитьОбласть("Организация");
	
	// Текст заголовка
	ОбластьЗаголовок.Параметры.ЗаголовокОтчета = ОбновитьТекстЗаголовкаНаСервере(ПараметрыОтчета.ПериодСвертки);
	Результат.Вывести(ОбластьЗаголовок);
	
	// Показатели отчета
	ПоказыватьВыводимыеДанные = Ложь;
	ТекстВыводимыеДанные = "";
	КоличествоПоказателей = 0;
	
	Если ПараметрыОтчета.Свойство("НаборПоказателей") Тогда
		Для Каждого ИмяПоказателя Из ПараметрыОтчета.НаборПоказателей Цикл
			Если ПараметрыОтчета["Показатель" + ИмяПоказателя.Ключ] Тогда
				ТекстВыводимыеДанные = ТекстВыводимыеДанные + Метаданные.Обработки.СверткаИнформационнойБазы.Реквизиты["Показатель" + ИмяПоказателя.Ключ].Синоним + ", ";
				КоличествоПоказателей = КоличествоПоказателей + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ТекстВыводимыеДанные = Лев(ТекстВыводимыеДанные, СтрДлина(ТекстВыводимыеДанные) - 2);
	
	Если КоличествоПоказателей = 1 Тогда
		ПоказыватьВыводимыеДанные = Истина;
	КонецЕсли;
	Если ПоказыватьВыводимыеДанные Тогда 
		ОбластьОписаниеНастроек.Параметры.ИмяНастроекОтчета      = НСтр("ru = 'Выводимые данные:'");
		ОбластьОписаниеНастроек.Параметры.ОписаниеНастроекОтчета = ТекстВыводимыеДанные;
		Результат.Вывести(ОбластьОписаниеНастроек);
	КонецЕсли;
	
	Результат.Область("R1:R" + Результат.ВысотаТаблицы).Имя = "Заголовок";
	
КонецПроцедуры

Функция ОбновитьТекстЗаголовкаНаСервере(ПериодСвертки) Экспорт
	
	ЗаголовокОтчета = "Проверка созданных документов" + БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(ПериодСвертки, КонецГода(ПериодСвертки));
	
	Возврат ЗаголовокОтчета;
	
КонецФункции

Процедура УстановитьДатуЗапретаИзмененияДанных(ПараметрыОбработки)
	
	ДатаЗапрета = НачалоДня(ПараметрыОбработки.ПериодСвертки - 1);
	
	Если Не ПараметрыОбработки.ТолькоВыбранныеОрганизации Тогда
		
			НаборЗаписей = РегистрыСведений.ДатыЗапретаИзменения.СоздатьНаборЗаписей();
			
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Объект = ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка();
			НоваяЗапись.Раздел = ПланыВидовХарактеристик.РазделыДатЗапретаИзменения.ПустаяСсылка();
			НоваяЗапись.Пользователь = Перечисления.ВидыНазначенияДатЗапрета.ДляВсехПользователей;
			НоваяЗапись.ДатаЗапрета = ДатаЗапрета;
			
			ЗаписатьДанные(НаборЗаписей);
			
			СообщениеЖурналаРегистрации = НСтр("ru = 'Установлена новая общая дата запрета изменения данных: '", ОбщегоНазначения.КодОсновногоЯзыка()) + ДатаЗапрета;
			
			ЗаписьЖурналаРегистрации(
				СверткаИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Информация,
				,
				,
				СообщениеЖурналаРегистрации);
		
	Иначе
		
		Для Каждого Орг Из ПараметрыОбработки.Организации Цикл
			
			НаборЗаписей = РегистрыСведений.ДатыЗапретаИзменения.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(Орг.Значение);
			НаборЗаписей.Прочитать();
			
			ДатаЗапретаДляВсехПользователей = Ложь;
			ОбновитьДатыЗапрета = Ложь;
			Для Каждого Запись Из НаборЗаписей Цикл
				
				Если Запись.Пользователь = Перечисления.ВидыНазначенияДатЗапрета.ДляВсехПользователей Тогда
					ДатаЗапретаДляВсехПользователей = Истина;
				КонецЕсли;
				
				Если Запись.ДатаЗапрета < ДатаЗапрета Тогда
					Запись.ДатаЗапрета = ДатаЗапрета;
					ОбновитьДатыЗапрета = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не ДатаЗапретаДляВсехПользователей Тогда 
				НоваяЗапись = НаборЗаписей.Добавить();
				НоваяЗапись.Объект = Орг.Значение;
				НоваяЗапись.Раздел = ДатыЗапретаИзмененияБП.РазделБухгалтерскийУчет();
				НоваяЗапись.Пользователь = Перечисления.ВидыНазначенияДатЗапрета.ДляВсехПользователей;
				НоваяЗапись.ДатаЗапрета = ДатаЗапрета;
				ОбновитьДатыЗапрета = Истина;
			КонецЕсли;
		
			Если ОбновитьДатыЗапрета Тогда
				
				ЗаписатьДанные(НаборЗаписей);

				СообщениеЖурналаРегистрации = НСтр("ru = 'Установлена новая дата запрета изменения данных для организации '", ОбщегоНазначения.КодОсновногоЯзыка()) 
					+ Орг.Значение.Наименование + " " + ДатаЗапрета;
				
				ЗаписьЖурналаРегистрации(
					СверткаИнформационнойБазы.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Информация,
					,
					,
					СообщениеЖурналаРегистрации);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Записывает изменения в переданном объекте.
//
// Параметры:
//  Данные - объект, который необходимо записать.
//  РегистрироватьНаУзлахПлановОбмена - Булево - включает регистрацию на узлах планов обмена при записи объекта.
//  ВключитьБизнесЛогику              - Булево - включает бизнес-логику при записи объекта.
//
Процедура ЗаписатьДанные(Знач Данные, Знач РегистрироватьНаУзлахПлановОбмена = Ложь, Знач ВключитьБизнесЛогику = Ложь)
	
	Попытка
		Данные.ОбменДанными.Загрузка = Не ВключитьБизнесЛогику;
		Если Не РегистрироватьНаУзлахПлановОбмена Тогда
			Данные.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
			Данные.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
		КонецЕсли;
		
		Данные.Записать();
		
		Если НЕ ВключитьБизнесЛогику 
			И Метаданные.ПодпискиНаСобытия.ЗаписатьИсточникВРегистрДокументыПоТребованиюФНС.Источник.СодержитТип(ТипЗнч(Данные)) Тогда
			Данные.ОбменДанными.Загрузка = Ложь;
			ЭлектронныйДокументооборотСКонтролирующимиОрганами.ЗаписатьИсточникВРегистрДокументыПоТребованиюФНС(Данные);
		КонецЕсли;
		
	Исключение
		ЗаписатьСтатусСвертки(-1);
		ЗаписьЖурналаРегистрации(
			СверткаИнформационнойБазы.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли