
&НаСервере

Перем Услуги;               // Хранит массив услуг для отбора.

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

#Область ПроцедурыИФункцииОбщегоНазначения

&НаСервере
// Обновляет таблицу "Должники".
//
Процедура ПерезаполнитьТаблицуДолжников()
	
	// Создаем структуру данных для запроса
	
	СтруктураДанныхДляЗапроса = Новый Структура("Организация, Здание, Помещение, Услуги, МинимальныйСрокЗадолженности, МинимальнаяСуммаЗадолженности");
	
	// Заполняем структуру данных для запроса параметрами, независимыми от вида работы с должниками
	
	СтруктураДанныхДляЗапроса.Организация = Объект.Организация;
	
	// В зависимости от выбранного пользователем типа данных в поле "Объект" в параметры запроса
	// Помещения и Здания передается значение выбранного типа и в качестве второго параметра - пустая ссылка
	// на элемент справочника для не выбранного типа.
	Если ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.КВП_Здания") Тогда
		СтруктураДанныхДляЗапроса.Здание                        = Объект.Объект;
		СтруктураДанныхДляЗапроса.Помещение                     = Справочники.УПЖКХ_Помещения.ПустаяСсылка();
	ИначеЕсли ТипЗнч(Объект.Объект) = Тип("СправочникСсылка.УПЖКХ_Помещения") Тогда
		СтруктураДанныхДляЗапроса.Здание                        = Справочники.КВП_Здания.ПустаяСсылка();
		СтруктураДанныхДляЗапроса.Помещение                     = Объект.Объект;
	Иначе
		СтруктураДанныхДляЗапроса.Здание                        = Справочники.КВП_Здания.ПустаяСсылка();
		СтруктураДанныхДляЗапроса.Помещение                     = Справочники.УПЖКХ_Помещения.ПустаяСсылка();
	КонецЕсли;
	
	Услуги = ПолучитьСписокУслуг();
	
	Если Услуги.Количество() > 0 Тогда
		СтруктураДанныхДляЗапроса.Услуги = Услуги;
	Иначе
		СтруктураДанныхДляЗапроса.Услуги = Неопределено;
	КонецЕсли;
	
	// Дозаполняем структуру параметрами по сроку и сумме задолженности в зависимости от вида работы с должниками
	
	Если РасширеннаяРаботаСДолжниками Тогда
		СтруктураДанныхДляЗапроса.Вставить("РасширеннаяРаботаСДолжниками", Истина);
		СтруктураДанныхДляЗапроса.МинимальныйСрокЗадолженности   = КатегорияДолжника.ПоПериодуОт;
		СтруктураДанныхДляЗапроса.МинимальнаяСуммаЗадолженности  = КатегорияДолжника.ПоСуммеОт;
		
		СтруктураДанныхДляЗапроса.Вставить("МаксимальныйСрокЗадолженности", КатегорияДолжника.ПоПериодуДо);
		СтруктураДанныхДляЗапроса.Вставить("МаксимальнаяСуммаЗадолженности", КатегорияДолжника.ПоСуммеДо);
		
		ОбновитьПредставлениеКатегорииДолжника();
	Иначе
		СтруктураДанныхДляЗапроса.МинимальныйСрокЗадолженности   = Объект.МинимальныйСрокЗадолженности;
		СтруктураДанныхДляЗапроса.МинимальнаяСуммаЗадолженности  = Объект.МинимальнаяСуммаЗадолженности;
	КонецЕсли;
	
	ТаблицаДолжников = УПЖКХ_РаботаСДолжниками.ПолучитьТаблицуДолжников(Объект.Дата, ,
																		СтруктураДанныхДляЗапроса, 
																		НастройкиУчетнойПолитикиТСЖ);
	
	Объект.Должники.Загрузить(ТаблицаДолжников);
	
КонецПроцедуры

&НаКлиенте
// Удаляет элемент отбора динамического списка.
//
// Параметры:
//  Список  - обрабатываемый динамический список,
//  ИмяПоля - имя поля компоновки, отбор по которому нужно удалить.
//
Процедура УдалитьЭлементОтбораСписка(Список, ИмяПоля)
	
	ЭлементыОтбора = Список.Отбор.Элементы;
	
	ПолеКомпоновки = Новый ПолеКомпоновкиДанных(ИмяПоля);
	
	ИндексЭлементаОтбора = 0;
	
	Пока ИндексЭлементаОтбора < ЭлементыОтбора.Количество() Цикл
		
		ЭлементОтбора = ЭлементыОтбора[ИндексЭлементаОтбора];
		
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") 
		   И ЭлементОтбора.ЛевоеЗначение = ПолеКомпоновки Тогда
			
			ЭлементыОтбора.Удалить(ЭлементОтбора);
			
		Иначе
			
			ИндексЭлементаОтбора = ИндексЭлементаОтбора + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // УдалитьЭлементОтбораСписка()

&НаКлиенте
// Устанавливает отбор в табличном поле по заданным параметрам.
//
Процедура УстановитьОтбор(Список, ИмяПоля, ТекВидСравнения, ПравоеЗначение)
	
	УдалитьЭлементОтбораСписка(Список, ИмяПоля);
	
	ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяПоля);
	ЭлементОтбора.ВидСравнения   = ?(ТекВидСравнения = Неопределено, ВидСравненияКомпоновкиДанных.Равно, ТекВидСравнения);
	
	// Отбор по полю "ЛицевойСчет" нужно использовать всегда, неважно определен лицевой счет или нет, иначе, если л/с
	// неопределен, в таблицах ИсковыеЗаявления и СудебныеСоглашения будут отображаться документы для всех лицевых счетов.
	Если ИмяПоля = "ЛицевойСчет" Тогда
		ЭлементОтбора.Использование  = Истина;
	Иначе
		ЭлементОтбора.Использование  = ?(ЗначениеЗаполнено(ПравоеЗначение), Истина, Ложь);
	КонецЕсли;
	
	ЭлементОтбора.ПравоеЗначение = ПравоеЗначение;
	
КонецПроцедуры

&НаСервере
// Процедура обновляет параметры учетной политики.
//
Процедура ОбновитьПараметрыУчетнойПолитики()
	НастройкиУчетнойПолитикиТСЖ = 
		УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Объект.Дата, Объект.Организация);
КонецПроцедуры

// Процедура формирует документы "Предупреждение".
//
&НаСервере
Процедура СформироватьДокументыПредупреждения(ДатаПогашения)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаДолжников", Объект.Должники.Выгрузить());
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	*
	|ПОМЕСТИТЬ ТаблицаДолжников
	|ИЗ
	|	&ТаблицаДолжников КАК ТаблицаДолжников
	|;
	|///////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Должники.ЛицевойСчет КАК Должник,
	|	Должники.СуммаДолга + Должники.СуммаПени + Должники.СуммаШтрафа КАК Сумма
	|ИЗ
	|	ТаблицаДолжников КАК Должники
	|ГДЕ
	|	Должники.Флаг = ИСТИНА
	|";
	
	ТаблицаДолжников = Запрос.Выполнить().Выгрузить();
	
	// Удалим строки, на которые уже введены предупреждения.
	МассивСтрокДляУдаления = Новый Массив;
	ЗапросДляПроверки = Новый Запрос;
	ЗапросДляПроверки.УстановитьПараметр("ДатаНачала", НачалоДня(Объект.Дата));
	ЗапросДляПроверки.УстановитьПараметр("ДатаОкончания", КонецДня(Объект.Дата));
	
	ЗапросДляПроверки.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Предупреждение.Ссылка
	|ИЗ
	|	Документ.УПЖКХ_Предупреждение КАК УПЖКХ_Предупреждение
	|ГДЕ
	|	УПЖКХ_Предупреждение.Должники.Должник = &Должник
	|	И УПЖКХ_Предупреждение.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И УПЖКХ_Предупреждение.Проведен = ИСТИНА";
	
	Для Каждого ТекСтрока Из ТаблицаДолжников Цикл
		ЗапросДляПроверки.УстановитьПараметр("Должник", ТекСтрока.Должник);
		Выборка = ЗапросДляПроверки.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для лицевого счета "
															  + ТекСтрока.Должник 
															  + " на " 
															  + Формат(Объект.Дата, "ДЛФ= ДД") 
															  + " предупреждение уже введено!");
			МассивСтрокДляУдаления.Добавить(ТекСтрока);
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого ТекСтрока Из МассивСтрокДляУдаления Цикл
		ТаблицаДолжников.Удалить(ТекСтрока);
	КонецЦикла;
	
	// Создаем документ "Предупреждение".
	Док = Документы.УПЖКХ_Предупреждение.СоздатьДокумент();
	Док.Дата          = Объект.Дата;
	Док.СрокПогашения = ДатаПогашения;
	Док.Организация   = Объект.Организация;
	Док.Ответственный = УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь();
	
	Док.Должники.Загрузить(ТаблицаДолжников);
	КВП_ЗаписатьОбъект(Док, РежимЗаписиДокумента.Проведение);
	
	// Сообщим об окончании формирования предупреждений.
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Формирование предупреждений завершено.");
	
КонецПроцедуры

&НаСервере
// Процедура формирует документы "Иск".
//
Процедура СоздатьДокументыИска()
	
	ЗапросДляПроверки = Новый Запрос;
	ЗапросДляПроверки.УстановитьПараметр("ДатаНачала", НачалоДня(Объект.Дата));
	ЗапросДляПроверки.УстановитьПараметр("ДатаОкончания", КонецДня(Объект.Дата));
	
	ЗапросДляПроверки.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_Иск.Ссылка
	|ИЗ
	|	Документ.УПЖКХ_Иск КАК УПЖКХ_Иск
	|ГДЕ
	|	УПЖКХ_Иск.ЛицевойСчет = &Должник
	|	И УПЖКХ_Иск.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И УПЖКХ_Иск.Проведен = ИСТИНА";
	
	Для каждого ТекДолжник ИЗ Объект.Должники Цикл
		
		Если Не ТекДолжник.Флаг Тогда
			Продолжить;
		КонецЕсли;
		
		ЗапросДляПроверки.УстановитьПараметр("Должник", ТекДолжник.ЛицевойСчет);
		Выборка = ЗапросДляПроверки.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для лицевого счета " 
															  + ТекДолжник.ЛицевойСчет
															  + " на "
															  + Формат(Объект.Дата, "ДЛФ= ДД") 
															  + " иск уже введен!");
			Продолжить;
		КонецЕсли;
		
		// Создаем документ "Иск".
		Док = Документы.УПЖКХ_Иск.СоздатьДокумент();
		Док.Дата               = Объект.Дата;
		Док.Ответственный      = УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь();
		Док.Организация        = Объект.Организация;
		Док.ВидОперации        = Перечисления.УПЖКХ_ВидыОперацийИсковыхЗаявлений.Иск;
		Док.ЛицевойСчет        = ТекДолжник.ЛицевойСчет;
		Док.СуммаЗадолженности = ТекДолжник.СуммаДолга;
		Док.Пени               = ТекДолжник.СуммаПени + ТекДолжник.СуммаШтрафа;
		Док.РассчитатьСуммуГоспошлины();
		КВП_ЗаписатьОбъект(Док, РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;
	
	// Сообщим об окончании формирования исков.
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Формирование исковых заявлений завершено.");
	
КонецПроцедуры

&НаКлиенте
// Процедура обновляет дополнительную информацию.
//
Процедура ОбновитьДополнительнуюИнформацию()
	
	ТекСтрока = Элементы.Должники.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		ЛицевойСчет = NULL;
	Иначе
		ЛицевойСчет = ТекСтрока.ЛицевойСчет;
	КонецЕсли;
	
	Если Элементы.ИсторияРаботы.ТекущаяСтраница = Элементы.СтраницаВзаиморасчеты Тогда
		ОбновитьКарточкуРасчетов(ЛицевойСчет, Элементы.КнопкаВыводитьЗаголовок.Пометка);
	ИначеЕсли Элементы.ИсторияРаботы.ТекущаяСтраница = Элементы.СтраницаКарточкаДолжника Тогда
		ОбновитьКарточкуДолжника(ЛицевойСчет, Элементы.КнопкаВыводитьЗаголовок1.Пометка);
	ИначеЕсли Элементы.ИсторияРаботы.ТекущаяСтраница = Элементы.СтраницаЖурналДокументов Тогда
		ЖурналДокументов.Параметры.УстановитьЗначениеПараметра("ЛицевойСчет", ЛицевойСчет);
		УстановитьОтбор(ЖурналДокументов, "Организация", ВидСравненияКомпоновкиДанных.Равно, Объект.Организация);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Функция получает список услуг.
//
Функция ПолучитьСписокУслуг()

	Услуги = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Объект.Услуга) Тогда
		Если Объект.Услуга.ЭтоГруппа Тогда
			ЗапросПоУслугам = Новый Запрос;
			ЗапросПоУслугам.Текст = 
			"ВЫБРАТЬ
			|	КВП_Услуги.Ссылка КАК Услуга
			|ИЗ
			|	Справочник.КВП_Услуги КАК КВП_Услуги
			|ГДЕ
			|	КВП_Услуги.Родитель = &УслугаРодитель";
			ЗапросПоУслугам.УстановитьПараметр("УслугаРодитель", Объект.Услуга);
			ТаблицаУслуг = ЗапросПоУслугам.Выполнить().Выгрузить();
			Услуги.ЗагрузитьЗначения(ТаблицаУслуг.ВыгрузитьКолонку("Услуга"));
		Иначе
			Услуги.Добавить(Объект.Услуга);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Услуги;

КонецФункции // ПолучитьСписокУслуг()

&НаСервереБезКонтекста
// Функция получает список должников как табличный документ.
//
Функция СформироватьПечатнуюФормуСпискаДолжников(СтруктураДанныхДляПечати)
	
	ДокументРезультат = Новый ТабличныйДокумент;
	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Обработка.УПЖКХ_РаботаСДолжниками.ПФ_MXL_СписокДолжников");
	
	Обл = Макет.ПолучитьОбласть("Шапка");
	
	Обл.Параметры.ДатаСписка = Формат(СтруктураДанныхДляПечати.Дата,"ДФ=dd.MM.yyyy");
	
	Если СтруктураДанныхДляПечати.КатегорияДолжника.Пустая() Тогда
		Обл.Параметры.КатегорияДолжников = "Все категории";
	Иначе
		Обл.Параметры.КатегорияДолжников = СтруктураДанныхДляПечати.КатегорияДолжника.Наименование + ": " + СтруктураДанныхДляПечати.ПредставлениеКатегорииДолжника;
	КонецЕсли;
	
	ДокументРезультат.Вывести(Обл);
	
	ТаблицаЗначенийДолжники = СтруктураДанныхДляПечати.Должники.Выгрузить();
	
	Запрос = Новый Запрос;
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Должники.НомерСтроки КАК НомерСтроки,
		|	Должники.ЛицевойСчет КАК ЛицевойСчет,
		|	Должники.Здание КАК Здание,
		|	Должники.Адрес КАК Адрес,
		|	Должники.ВладелецОбъекта КАК ВладелецОбъекта
		|ПОМЕСТИТЬ ВтИсходныеДанныеДляПечати
		|ИЗ
		|	&Должники КАК Должники
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВтИсходныеДанныеДляПечати.НомерСтроки КАК НомерСтроки,
		|	ПРЕДСТАВЛЕНИЕ(ВтИсходныеДанныеДляПечати.ЛицевойСчет) КАК ЛицевойСчетПредставление,
		|	ПРЕДСТАВЛЕНИЕ(ВтИсходныеДанныеДляПечати.Здание) КАК ЗданиеПредставление,
		|	ПРЕДСТАВЛЕНИЕ(ВтИсходныеДанныеДляПечати.Адрес) КАК АдресПредставление,
		|	ПРЕДСТАВЛЕНИЕ(ВтИсходныеДанныеДляПечати.ВладелецОбъекта) КАК ВладелецОбъектаПредставление
		|ИЗ
		|	ВтИсходныеДанныеДляПечати КАК ВтИсходныеДанныеДляПечати
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	
	Запрос.Параметры.Вставить("Должники", ТаблицаЗначенийДолжники);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	МенеджерВременныхТаблиц.Закрыть();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Обл                       = Макет.ПолучитьОбласть("Строка");
		Обл.Параметры.НомПП       = ВыборкаДетальныеЗаписи.НомерСтроки;
		Обл.Параметры.ЛицевойСчет = ВыборкаДетальныеЗаписи.ЛицевойСчетПредставление;
		Обл.Параметры.Адрес       = ВыборкаДетальныеЗаписи.ЗданиеПРедставление + ", " + ВыборкаДетальныеЗаписи.АдресПредставление;
		Обл.Параметры.Должник     = ВыборкаДетальныеЗаписи.ВладелецОбъектаПредставление;
		
		ДокументРезультат.Вывести(Обл);
		
	КонецЦикла;
	
	ДокументРезультат.ОбластьПечати       = ДокументРезультат.Область(1, 2, ДокументРезультат.ВысотаТаблицы, ДокументРезультат.ШиринаТаблицы);
	ДокументРезультат.ОриентацияСтраницы  = ОриентацияСтраницы.Портрет;
	ДокументРезультат.ПолеСверху          = 0;
	ДокументРезультат.ПолеСлева           = 0;
	ДокументРезультат.ПолеСнизу           = 0;
	ДокументРезультат.ПолеСправа          = 0;
	ДокументРезультат.ОтображатьСетку     = Ложь;
	
	ДокументРезультат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УПЖКХ_РАБОТАСДОЛЖНИКАМИ_СПИСОК";
	
	Возврат ДокументРезультат;
	
КонецФункции

&НаСервере
Процедура ОбновитьПредставлениеКатегорииДолжника()
		
	Если КатегорияДолжника.Пустая() Тогда
		ПредставлениеКатегорииДолжника = "";
		Элементы.КатегорияДолжника.РасширеннаяПодсказка.Заголовок = "";
	Иначе
		ПредставлениеКатегорииДолжника = УПЖКХ_РаботаСДолжниками.ПолучитьПредставлениеКатегорииДолжников(КатегорияДолжника, Истина, Элементы.КатегорияДолжника.РасширеннаяПодсказка.Заголовок);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ УПРАВЛЕНИЯ ВИДИМОСТЬЮ

#Область ПроцедурыУправленияВидимостью

&НаКлиентеНаСервереБезКонтекста
// Процедура управляет внешним видом формы.
//
Процедура УправлениеФормой(Форма)
	
	Объект   = Форма.Объект;
	Элементы = Форма.Элементы;
	
	// Управление элементами при изменении состава сведений по искам.
	Элементы.ЖурналДокументовГруппаИски.Видимость               = Форма.ПоказыватьДопИнформациюПоИскам;
	Элементы.КнопкаДопИнформацияИсковыеЗаявления.Пометка        = Форма.ПоказыватьДопИнформациюПоИскам;
	
	// Управление элементами при изменении состава сведений по судебным соглашениям.
	Элементы.ЖурналДокументовГруппаСудебныеСоглашения.Видимость = Форма.ПоказыватьДопИнформациюПоСудебнымСоглашениям;
	Элементы.КнопкаДопИнформацияСудебныеСоглашения.Пометка      = Форма.ПоказыватьДопИнформациюПоСудебнымСоглашениям;
	
	// Управление элементами при расширенной работе с должниками
	Элементы.МинимальнаяСуммаЗадолженности.Видимость           = НЕ Форма.РасширеннаяРаботаСДолжниками;
	Элементы.МинимальныйСрокЗадолженности.Видимость            = НЕ Форма.РасширеннаяРаботаСДолжниками;
	Элементы.КатегорияДолжника.Видимость                       = Форма.РасширеннаяРаботаСДолжниками;
	Элементы.ПредставлениеКатегорииДолжника.Видимость          = Форма.РасширеннаяРаботаСДолжниками;
	Элементы.ДолжникиПечатьСпискаДолжников.Видимость           = Форма.РасширеннаяРаботаСДолжниками;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура-обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.Организация = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьОсновнуюОрганизацию();
	Объект.Дата = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	
	ОбновитьПараметрыУчетнойПолитики();
	РасширеннаяРаботаСДолжниками = УПЖКХ_РаботаСДолжниками.ПолучитьНастройкуРасширеннойРаботыСДолжниками();
	
	// Период карточки расчетов.
	ДатаНачалаПериода = НачалоГода(УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату());
	ДатаКонцаПериода  = УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьРабочуюДату();
	
	// Период карточки должников.
	ДатаНачалаПериода1 = ДатаНачалаПериода;
	ДатаКонцаПериода1  = ДатаКонцаПериода;
	
	// Установка параметров для динамических списков.
	ЖурналДокументов.Параметры.УстановитьЗначениеПараметра("ЛицевойСчет", NULL);
	
	// Установка параметров отображения дополнительной информации табличной части "Журнал документов".
	// По умолчанию - Ложь.
	ПоказыватьДопИнформациюПоИскам               = Ложь;
	ПоказыватьДопИнформациюПоСудебнымСоглашениям = Ложь;
	
	УправлениеФормой(ЭтаФорма);
	
	// Реклама
	ОТР_РекламаКлиентСервер.ПриСозданииНаСервере(ЭтаФорма);
	// Конец Реклама
	
КонецПроцедуры

#КонецОбласти

/////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ

#Область ОбработчикиСобытийЭлементовФормы

#Область Реклама

&НаКлиенте
// Процедура - обработчик нажатия на картинку баннера.
Процедура Подключаемый_РекламаОткрытьСтраницуСайта(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОТР_РекламаКлиент.Подключаемый_РекламаОткрытьСтраницуСайта(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_РекламаОткрытьСтраницуСайта()

&НаКлиенте
// Процедура - обработчик нажатия на картинку закрытия баннера.
Процедура Подключаемый_РекламаКартникаЗакрытияБаннераНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ОТР_РекламаКлиент.Подключаемый_РекламаКартникаЗакрытияБаннераНажатие(ЭтаФорма);
	
КонецПроцедуры // Подключаемый_РекламаОткрытьСтраницуСайта()

#КонецОбласти // Реклама

&НаКлиенте
// Процедура-обработчик события "ПриСменеСтраницы" панели "ИсторияРаботы".
//
Процедура ИсторияРаботыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьДополнительнуюИнформацию();
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик события "ПриИзменении" поля ввода "Организация".
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбновитьПараметрыУчетнойПолитики();
	
	ТекСтрока = Элементы.Должники.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		ЛицевойСчет = NULL;
	Иначе
		ЛицевойСчет = ТекСтрока.ЛицевойСчет;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбновитьДополнительнуюИнформацию", 0.2, Истина);
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик события "ПриИзменении" поля ввода "Дата".
//
Процедура ДатаПриИзменении(Элемент)
	
	ОбновитьПараметрыУчетнойПолитики();
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик команды "СформироватьПредупреждения"".
//
Процедура СформироватьПредупреждения(Команда)
	
	НайденныеСтроки = Объект.Должники.НайтиСтроки(Новый Структура("Флаг", Истина));
	
	Если Не НайденныеСтроки.Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбран ни один лицевой счет!");
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаЗавершенияВыбораДатыПредупреждения", ЭтотОбъект);
	
	// При открытии формы выбора даты сразу установим значение даты.
	ПараметрыФормы = Новый Структура("ДатаПогашения", КонецМесяца(Объект.Дата));
	ОткрытьФорму("Обработка.УПЖКХ_РаботаСДолжниками.Форма.ФормаВыбораДаты", ПараметрыФормы,,,,, ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
// Обработка завершения работы с формой выбора даты при формировании предупреждения.
//
Процедура ОбработкаЗавершенияВыбораДатыПредупреждения(ДатаПогашения, ДополнительныеПараметры) Экспорт
	
	Если Не ДатаПогашения = Неопределено Тогда
		
		СформироватьДокументыПредупреждения(ДатаПогашения);
		
		// Сделаем активной страницу с журналом документов.
		Элементы.ИсторияРаботы.ТекущаяСтраница = Элементы.СтраницаЖурналДокументов;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик команды "СформироватьИски"".
//
Процедура СформироватьИски(Команда)
	
	НайденныеСтроки = Объект.Должники.НайтиСтроки(Новый Структура("Флаг", Истина));
	
	Если Не НайденныеСтроки.Количество() > 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не выбран ни один лицевой счет!");
		Возврат;
	КонецЕсли;
	
	СоздатьДокументыИска();
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик команды "УстановитьФлажки"".
//
Процедура УстановитьФлажки(Команда)
	
	Для Каждого Строка Из Объект.Должники Цикл
		Строка.Флаг = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик команды "СнятьФлажки"".
//
Процедура СнятьФлажки(Команда)
	
	Для Каждого Строка Из Объект.Должники Цикл
		Строка.Флаг = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик команды "КомандаОбновитьДолжников"".
//
Процедура КомандаЗаполитьДолжников(Команда)
	
	ПерезаполнитьТаблицуДолжников();
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик события "ПередНачаломДобавления"
// элемента формы "Должники".
//
Процедура ДолжникиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик события "ПередУдалением"
// элемента формы "Должники".
//
Процедура ДолжникиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
// Обработчик события "Нажатие" ссылки на сайт.
Процедура СсылкаНаСайтНажатие(Элемент)
	
	НачатьЗапускПриложения(Новый ОписаниеОповещения("СсылкаНаСайтНажатиеЗавершение", ЭтотОбъект), УПЖКХ_ИнформацияОРазработчикеИПрограмме.АдресСтраницыСопровождениеПользователей());
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаНаСайтНажатиеЗавершение(КодВозврата, ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик команды "ПечатьСпискаДолжников".
//
Процедура ПечатьСпискаДолжников(Команда)
	
	Если Объект.Должники.Количество() = 0 Тогда
		ПоказатьПредупреждение(,"Невозможно сформировать табличнй документ для печати, т.к. список должников пуст.",, "Внимание!");
		Возврат;
	КонецЕсли;
	
	СтруктураДанныхДляПечати = Новый Структура;
	СтруктураДанныхДляПечати.Вставить("Дата", Объект.Дата);
	СтруктураДанныхДляПечати.Вставить("Должники", Объект.Должники);
	СтруктураДанныхДляПечати.Вставить("КатегорияДолжника", КатегорияДолжника);
	СтруктураДанныхДляПечати.Вставить("ПредставлениеКатегорииДолжника", ПредставлениеКатегорииДолжника);
	
	ДокументРезультат = СформироватьПечатнуюФормуСпискаДолжников(СтруктураДанныхДляПечати);
	
	ИдентификаторПечатнойФормы = "СписокДолжниковРасширеннаяРабота";
	НазваниеПечатнойФормы = "Список должников";
	
	КоллекцияПечатныхФорм = УПЖКХ_ТиповыеМетодыКлиент.НоваяКоллекцияПечатныхФорм(ИдентификаторПечатнойФормы);
	ПечатнаяФорма = УПЖКХ_ТиповыеМетодыКлиент.ОписаниеПечатнойФормы(КоллекцияПечатныхФорм, ИдентификаторПечатнойФормы);
	ПечатнаяФорма.СинонимМакета = НазваниеПечатнойФормы;
	ПечатнаяФорма.ТабличныйДокумент = ДокументРезультат;
	ПечатнаяФорма.ИмяФайлаПечатнойФормы = НазваниеПечатнойФормы;
	
	ОбластиОбъектов = Новый СписокЗначений;
	УПЖКХ_ТиповыеМетодыКлиент.ПечатьДокументов(КоллекцияПечатныхФорм, ОбластиОбъектов);
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ВЫЗОВ ОТЧЕТОВ ИЗ ФОРМ СПИСКОВ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Процедура-обработчик команды "ОтчетСведенияОЗадолженности"".
//
Процедура ОтчетСведенияОЗадолженности(Команда)
	
	ОбновитьСведенияОЗадолженностиПоЛС();
	Элементы.ИсторияРаботы.ТекущаяСтраница = Элементы.СтраницаОтчеты;
	
КонецПроцедуры

&НаСервере
// Процедура формирует отчет "Сведения о задолженности по ЛС".
//
Процедура ОбновитьСведенияОЗадолженностиПоЛС()
	
	ДокументРезультат.Очистить();
	
	СписокЛицевыхСчетов = Новый СписокЗначений;
	СтрокиЛС = Объект.Должники.НайтиСтроки(Новый Структура("Флаг", Истина));
	Для Каждого ТекСтрока Из СтрокиЛС Цикл
		СписокЛицевыхСчетов.Добавить(ТекСтрока.ЛицевойСчет);
	КонецЦикла;
	
	Если СписокЛицевыхСчетов.Количество() = 0 Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не выбран список должников!");
		Возврат;
	КонецЕсли;
	
	ИБФайловая = УПЖКХ_ТиповыеМетодыСервер.ИнформационнаяБазаФайловая();
	
	ПараметрыОтчета = Новый Структура;
	
	ПараметрыОтчета.Вставить("НачалоПериода",                           Объект.Дата);
	ПараметрыОтчета.Вставить("Организация",                             Объект.Организация);
	ПараметрыОтчета.Вставить("ЛицевойСчет",                             СписокЛицевыхСчетов);
	ПараметрыОтчета.Вставить("СуммаМин",                                0);
	ПараметрыОтчета.Вставить("КоличествоМесяцевМин",                    0);
	ПараметрыОтчета.Вставить("КоличествоМесяцевЗадолженности",          0);
	ПараметрыОтчета.Вставить("ОграничитьСрокВыводимойЗадолженности",    Ложь);
	ПараметрыОтчета.Вставить("ВключатьЗадолженностьПредыдущегоМесяца" , Истина);
	ПараметрыОтчета.Вставить("ВывестиПериодДолга" ,                     Истина);
	ПараметрыОтчета.Вставить("ВывестиСрокДолга" ,                       Истина);
	ПараметрыОтчета.Вставить("УчитыватьПереплаты" ,                     Истина);
	ПараметрыОтчета.Вставить("ВывестиДопИнформацию" ,                   Истина);
	
	// Параметр для выбора краткого заголовка в процедуре "СформироватьОтчет"
	// модуля менеджера отчета "Сведения о задолженностях по лицевым счетам".
	ПараметрыОтчета.Вставить("ЗаголовокКраткий" , Истина);
	
	Услуги = ПолучитьСписокУслуг();
	Если Услуги.Количество() > 0 Тогда
		ПараметрыОтчета.Вставить("ВариантОтбораУслуг", "формировать отчет по указанным услугам");
		ПараметрыОтчета.Вставить("СписокУслуг",        Услуги);
	Иначе
		ПараметрыОтчета.Вставить("ВариантОтбораУслуг", "формировать отчет по всем услугам");
	КонецЕсли;
	
	Если ИБФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Отчеты.КВП_СведенияОЗадолженностяхПоЛС.СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатВыполнения = УПЖКХ_ТиповыеМетодыСервер.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Отчеты.КВП_СведенияОЗадолженностяхПоЛС.СформироватьОтчет",
			ПараметрыОтчета,
			УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтотОбъект));
			
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ДокументРезультат = ПолучитьИзВременногоХранилища(АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры // ОткрытьОтчетНазначенныхНачислений()

&НаКлиенте
// Процедура-обработчик команды "ОтчетСведенияОЗадолженности"".
//
Процедура ОтчетСведенияОЗадолженностиФорма3(Команда)
	
	ОбновитьСведенияОЗадолженностиФорма3();
	Элементы.ИсторияРаботы.ТекущаяСтраница = Элементы.СтраницаОтчеты;
	
КонецПроцедуры

&НаСервере
// Процедура формирует отчет "Сведения о задолженности, форма 3".
//
Процедура ОбновитьСведенияОЗадолженностиФорма3()
	
	ДокументРезультат.Очистить();
	
	ИБФайловая = УПЖКХ_ТиповыеМетодыСервер.ИнформационнаяБазаФайловая();
	
	ПараметрыОтчета = Новый Структура;
	
	ПараметрыОтчета.Вставить("НачалоПериода"  , Объект.Дата);
	ПараметрыОтчета.Вставить("Организация"    , Объект.Организация);
	ПараметрыОтчета.Вставить("ОтборПомещений" , "");
	ПараметрыОтчета.Вставить("Исполнитель"    , УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь());
	
	Если ИБФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Отчеты.КВП_СведенияОЗадолженностяхФорма3_.СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатВыполнения = УПЖКХ_ТиповыеМетодыСервер.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Отчеты.КВП_СведенияОЗадолженностяхФорма3_.СформироватьОтчет",
			ПараметрыОтчета,
			УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтотОбъект));
			
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ДокументРезультат = ПолучитьИзВременногоХранилища(АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры // ОткрытьОтчетНазначенныхНачислений()

&НаКлиенте
// Процедура-обработчик команды "СправкаОЗадолженности"".
//
Процедура СправкаОЗадолженности(Команда)
	
	Если НЕ Элементы.Должники.ТекущиеДанные = Неопределено Тогда
		ОбновитьСправкуОЗадолженности(Элементы.Должники.ТекущиеДанные.ЛицевойСчет);
		Элементы.ИсторияРаботы.ТекущаяСтраница = Элементы.СтраницаОтчеты;
	Иначе
		ОбновитьСправкуОЗадолженности(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура формирует отчет "Справка о задолженности".
//
Процедура ОбновитьСправкуОЗадолженности(ЛицевойСчет)
	
	Если Не ЛицевойСчет = Неопределено Тогда
		
		Если ЛицевойСчет.ЭтоГруппа Тогда
			Возврат;
		КонецЕсли;
		
		ТекОтветственный  = 
			УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(ЛицевойСчет, Объект.Дата);
		Если ТипЗнч(ТекОтветственный) = ТипЗнч(Справочники.Контрагенты.ПустаяСсылка()) Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Печать справок задолженности для контрагентов не возможна!");
			Возврат;
		КонецЕсли;
		
		ДокументРезультат.Очистить();
		
		ИБФайловая = УПЖКХ_ТиповыеМетодыСервер.ИнформационнаяБазаФайловая();
		
		ПараметрыОтчета = Новый Структура;
		
		ПараметрыОтчета.Вставить("Дата"        , Объект.Дата);
		ПараметрыОтчета.Вставить("Организация" , Объект.Организация);
		ПараметрыОтчета.Вставить("Номер"       , "");
		ПараметрыОтчета.Вставить("Проживающий" , ТекОтветственный);
		ПараметрыОтчета.Вставить("Адрес"       , ЛицевойСчет.Адрес);
		ПараметрыОтчета.Вставить("ЛицевойСчет" , ЛицевойСчет);
		
		// Параметр для выбора краткого заголовка в процедуре "СформироватьОтчет"
		// модуля менеджера отчета "Сведения о задолженностях по лицевым счетам".
		ПараметрыОтчета.Вставить("ЗаголовокКраткий" , Истина);
		
		Услуги = ПолучитьСписокУслуг();
		Если Услуги.Количество() > 0 Тогда
			ПараметрыОтчета.Вставить("ВариантОтбораУслуг", "формировать отчет по указанным услугам");
			ПараметрыОтчета.Вставить("СписокУслуг",        Услуги);
		Иначе
			ПараметрыОтчета.Вставить("ВариантОтбораУслуг", "формировать отчет по всем услугам");
		КонецЕсли;
		
		Если ИБФайловая Тогда
			АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
			Отчеты.КВП_СправкаОЗадолженности.СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
			РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
		Иначе
			РезультатВыполнения = УПЖКХ_ТиповыеМетодыСервер.ЗапуститьВыполнениеВФоне(
				УникальныйИдентификатор,
				"Отчеты.КВП_СправкаОЗадолженности.СформироватьОтчет",
				ПараметрыОтчета,
				УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтотОбъект));
				
			АдресХранилища       = РезультатВыполнения.АдресХранилища;
			ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
		КонецЕсли;
		
		Если РезультатВыполнения.ЗаданиеВыполнено Тогда
			ДокументРезультат = ПолучитьИзВременногоХранилища(АдресХранилища);
		КонецЕсли;
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Нет данных для заполнения.");
	КонецЕсли;
	
КонецПроцедуры //ОбновитьКарточкуРасчетов()

&НаКлиенте
// Процедура-обработчик команды "ОтчетИнформацияПоВзысканиюЗадолженности"".
//
Процедура ОтчетИнформацияПоВзысканиюЗадолженности(Команда)
	
	//ОбновитьИнформацияПоВзысканиюЗадолженности();
	
	ФормаОтчета = ПолучитьФорму("Отчет.УПЖКХ_ИнформацияПоВзысканиюЗадолженности.ФормаОбъекта",
								Новый Структура("НачалоПериода, КонецПериода", НачалоМесяца(Объект.Дата), КонецМесяца(Объект.Дата)));
	ФормаОтчета.Открыть();
	
	//Элементы.ИсторияРаботы.ТекущаяСтраница = Элементы.СтраницаОтчеты;
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик команды "ОтчетИсполнениеГрафикаПлатежей"".
//
Процедура ОтчетИсполнениеГрафикаПлатежей(Команда)
	
	ТекущиеДанные = Элементы.ЖурналДокументов.ТекущиеДанные;
	
	// Выполняется проверка на заполнение текущих данных и на выбор строки с документом "Судебное соглашение".
	Если Не ТекущиеДанные = Неопределено
	   И ТипЗнч(Элементы.ЖурналДокументов.ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.УПЖКХ_СудебноеСоглашение") Тогда
		
		ОбновитьИсполнениеГрафикаПлатежей(Элементы.Должники.ТекущиеДанные.ЛицевойСчет,
										  Элементы.ЖурналДокументов.ТекущиеДанные.Ссылка);
		Элементы.ИсторияРаботы.ТекущаяСтраница = Элементы.СтраницаОтчеты;
		
	Иначе
		
		ПоказатьПредупреждение(, "Не выбрано или отсутствует судебное соглашение!");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// Процедура формирует отчет "Исполнение графика платежей".
//
Процедура ОбновитьИсполнениеГрафикаПлатежей(ЛицевойСчет, СудебноеСоглашение)
	
	Если ЛицевойСчет.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	ДокументРезультат.Очистить();
	
	ПараметрыОтчета = Новый Структура;
	
	ПараметрыОтчета.Вставить("Дата",               Объект.Дата);
	ПараметрыОтчета.Вставить("Организация",        Объект.Организация);
	ПараметрыОтчета.Вставить("ЛицевойСчет",        ЛицевойСчет);
	ПараметрыОтчета.Вставить("СудебноеСоглашение", СудебноеСоглашение);
	
	ИБФайловая = УПЖКХ_ТиповыеМетодыСервер.ИнформационнаяБазаФайловая();
	
	Если ИБФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Отчеты.КВП_ОтчетОбИсполненииГрафикаПлатежей.СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатВыполнения = УПЖКХ_ТиповыеМетодыСервер.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Отчеты.КВП_ОтчетОбИсполненииГрафикаПлатежей.СформироватьОтчет",
			ПараметрыОтчета,
			УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтотОбъект));
			
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ДокументРезультат = ПолучитьИзВременногоХранилища(АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры  //ОбновитьКарточкуРасчетов

////////////////////////////////////////////////////////////////////////////////
// ЗАКЛАДКА "ВЗАИМОРАСЧЕТЫ"

&НаКлиенте
// Процедура-обработчик команды "ДокументКарточкаРасчетовЗаголовок"".
//
Процедура ДокументКарточкаРасчетовЗаголовок(Команда)
	
	Элементы.КнопкаВыводитьЗаголовок.Пометка = Не Элементы.КнопкаВыводитьЗаголовок.Пометка;
	
	ОбработатьВыводЗаголовкаКарточкаРасчетов(Элементы.КнопкаВыводитьЗаголовок.Пометка);
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик команды "КомандаОбновитьКарточкуРасчетов"".
//
Процедура КомандаОбновитьКарточкуРасчетов(Команда)
		
	ОбновитьКарточкуРасчетов(Элементы.Должники.ТекущиеДанные.ЛицевойСчет,
							 Элементы.КнопкаВыводитьЗаголовок.Пометка);
	
	Элементы.КнопкаВыводитьЗаголовок.Пометка = Истина;
	
КонецПроцедуры

&НаСервере
// Формирует отчет "Карточка расчетов" и выводит в табличное поле.
Процедура ОбновитьКарточкуРасчетов(ЛицевойСчет, ПоказыватьЗаголовок)
	
	Если Не ЗначениеЗаполнено(ЛицевойСчет) Тогда
		ДокументКарточкаРасчетов.Очистить();
		Возврат;
	КонецЕсли;
	
	Если ЛицевойСчет.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	ДокументКарточкаРасчетов.Очистить();
	
	ИБФайловая = УПЖКХ_ТиповыеМетодыСервер.ИнформационнаяБазаФайловая();
	
	ПараметрыОтчета = Новый Структура;
	
	ПараметрыОтчета.Вставить("НачалоПериода"                      , ДатаНачалаПериода);
	ПараметрыОтчета.Вставить("КонецПериода"                       , ДатаКонцаПериода);
	ПараметрыОтчета.Вставить("Организация"                        , Объект.Организация);
	ПараметрыОтчета.Вставить("ЛицевойСчет"                        , ЛицевойСчет);
	ПараметрыОтчета.Вставить("ВариантВыводаСведенийОЗадолженности", "в основной таблице");
	
	Если Объект.Услуга.Пустая() Тогда
		ПараметрыОтчета.Вставить("ВариантОтбораУслуг", "формировать отчет по всем услугам");
	Иначе
		ПараметрыОтчета.Вставить("ВариантОтбораУслуг", "формировать отчет по указанным услугам");
		
		СписокУслуг = Новый СписокЗначений;
		СписокУслуг.Добавить(Объект.Услуга);
		
		ПараметрыОтчета.Вставить("СписокУслуг", СписокУслуг);
	КонецЕсли;
	
	Если ИБФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Отчеты.КВП_КарточкаРасчетов.СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатВыполнения = УПЖКХ_ТиповыеМетодыСервер.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Отчеты.КВП_КарточкаРасчетов.СформироватьОтчет",
			ПараметрыОтчета,
			УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтотОбъект));
			
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ДокументКарточкаРасчетов = ПолучитьИзВременногоХранилища(АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры  //ОбновитьКарточкуРасчетов

&НаСервере
// Устанавливает видимость заголовка отчета "Карточка расчетов".
//
Процедура ОбработатьВыводЗаголовкаКарточкаРасчетов(ПоказыватьЗаголовок)
	
	ДокументКарточкаРасчетов.Область("R1:R" + "6").Видимость = ПоказыватьЗаголовок;
	
КонецПроцедуры  //ОбработатьВыводЗаголовкаКарточкаРасчетов()

////////////////////////////////////////////////////////////////////////////////
// ЗАКЛАДКА "КАРТОЧКА ДОЛЖНИКА"

&НаКлиенте
// Процедура-обработчик команды "КарточкаДолжникаЗаголовок".
//
Процедура КарточкаДолжникаЗаголовок(Команда)
	
	Элементы.КнопкаВыводитьЗаголовок1.Пометка = Не Элементы.КнопкаВыводитьЗаголовок1.Пометка;
	
	ОбработатьВыводЗаголовкаКарточкаДолжника(Элементы.КнопкаВыводитьЗаголовок1.Пометка);
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик команды "КомандаОбновитьКарточкуДолжника".
//
Процедура КомандаОбновитьКарточкуДолжника(Команда)
	
	ОбновитьКарточкуДолжника(Элементы.Должники.ТекущиеДанные.ЛицевойСчет,
							 Элементы.КнопкаВыводитьЗаголовок1.Пометка);
	
	Элементы.КнопкаВыводитьЗаголовок1.Пометка = Истина;
	
КонецПроцедуры

&НаСервере
// Формирует отчет "Карточка должника" и выводит в табличное поле.
//
Процедура ОбновитьКарточкуДолжника(ЛицевойСчет, ПоказыватьЗаголовок)
	
	Если Не ЗначениеЗаполнено(ЛицевойСчет) Тогда
		ДокументКарточкаДолжника.Очистить();
		Возврат;
	КонецЕсли;
	
	Если ЛицевойСчет.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	ДокументКарточкаДолжника.Очистить();
	
	ИБФайловая = УПЖКХ_ТиповыеМетодыСервер.ИнформационнаяБазаФайловая();
	
	ПараметрыОтчета = Новый Структура;
	
	ПараметрыОтчета.Вставить("ДатаНач",     ДатаНачалаПериода1);
	ПараметрыОтчета.Вставить("ДатаКон",     ДатаКонцаПериода1);
	ПараметрыОтчета.Вставить("Организация", Объект.Организация);
	ПараметрыОтчета.Вставить("Должник",     ЛицевойСчет);
	
	Услуги = ПолучитьСписокУслуг();
	
	Если Услуги.Количество() > 0 Тогда
		ПараметрыОтчета.Вставить("ВариантОтбораУслуг", "формировать отчет по указанным услугам");
		ПараметрыОтчета.Вставить("СписокУслуг",        Услуги);
	Иначе
		ПараметрыОтчета.Вставить("ВариантОтбораУслуг", "формировать отчет по всем услугам");
	КонецЕсли;
	
	Если ИБФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Отчеты.УПЖКХ_КарточкаДолжника.СформироватьОтчет(ПараметрыОтчета, АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатВыполнения = УПЖКХ_ТиповыеМетодыСервер.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Отчеты.УПЖКХ_КарточкаДолжника.СформироватьОтчет",
			ПараметрыОтчета,
			УПЖКХ_ТиповыеМетодыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтотОбъект));
			
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ДокументКарточкаДолжника = ПолучитьИзВременногоХранилища(АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры //ОбновитьКарточкуДолжника()

&НаСервере
// Устанавливает видимость заголовка отчета "Карточка должника".
//
Процедура ОбработатьВыводЗаголовкаКарточкаДолжника(ПоказыватьЗаголовок)
	
	ДокументКарточкаДолжника.Область("R1:R" + "2").Видимость = ПоказыватьЗаголовок;
	
КонецПроцедуры  //ОбработатьВыводЗаголовкаКарточкаДолжника()

&НаКлиенте
// Процедура-обработчик события "ПриАктивизацииСтроки" табличного поля "Должники".
//
Процедура ДолжникиПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбновитьДополнительнуюИнформацию", 0.2, Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ЗАКЛАДКА "СОБЫТИЯ С ДОЛЖНИКОМ"

&НаКлиенте
// Процедура-обработчик команды "ПоказатьДополнительнуюИнформациюПоИсковымЗаявления".
//
Процедура ПоказатьДополнительнуюИнформациюПоИсковымЗаявлениям(Команда)
	
	ПоказыватьДопИнформациюПоИскам = НЕ ПоказыватьДопИнформациюПоИскам;
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
// Процедура-обработчик команды "ПоказатьДополнительнуюИнформациюПоСудебнымСоглашениям".
//
Процедура ПоказатьДополнительнуюИнформациюПоСудебнымСоглашениям(Команда)
	
	ПоказыватьДопИнформациюПоСудебнымСоглашениям = НЕ ПоказыватьДопИнформациюПоСудебнымСоглашениям;
	УправлениеФормой(ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

