
#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ФормаДлительнойОперации;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Объект.ПериодРегистрации = НачалоКвартала(Параметры.Период);
	Объект.Организация       = Параметры.Организация;
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда
		УстановитьПериодРегистрации();
	КонецЕсли;
	
	ЗаполнитьСписокОпераций();
	ЗаполнитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СостояниеРегламентнойОперации" 
	 ИЛИ ТипЗнч(Параметр) = Тип("ДокументСсылка.РегламентированныйОтчет") Тогда
		
		ОбновитьСостоянияИЭлементыРегламентныхОпераций();
		
	ИначеЕсли ИмяСобытия = "Позиционирование в списке отчетов" Тогда
		
		ПараметрыДекларации = Новый Структура;
		ПараметрыДекларации.Вставить("ДатаНачала",    Объект.ПериодРегистрации);
		ПараметрыДекларации.Вставить("ДатаОкончания", КонецКвартала(Объект.ПериодРегистрации));
		ПараметрыДекларации.Вставить("Организация",   Объект.Организация);
		ПараметрыДекларации.Вставить("НачалоРасширенногоНалоговогоПериода",
			НачалоРасширенногоНалоговогоПериода);
		
		Декларация = ПолучитьСформированнуюДекларацию(ПараметрыДекларации);
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииОрганизацииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольПоследовательностиНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация)
	 Или НЕ ЗначениеЗаполнено(Объект.ПериодРегистрации) Тогда
		Возврат;
	КонецЕсли;

	НомерМесяцаВКвартале = Число(Прав(Элемент.Имя, 1));
	Если НомерМесяцаВКвартале = 0 Тогда
		// В случае расширенного налогового периода перепроводятся документы, находящиеся в двух кварталах.
		// Для правильной работы механизма перепроведения передается дата, входящая в последний из них.
		ТекущийМесяц = НачалоКвартала(Объект.ПериодРегистрации);
	Иначе
		ТекущийМесяц = ДобавитьМесяц(НачалоКвартала(Объект.ПериодРегистрации), НомерМесяцаВКвартале - 1);
	КонецЕсли;

	МоментНарушения = СведенияОНарушенииПоследовательностиЗаМесяц(Объект.Организация, ТекущийМесяц);
	Если МоментНарушения = Неопределено Тогда

		ПоказатьПредупреждение( , НСтр("ru = 'Перепроведение документов не требуется'"), , НСтр("ru = 'Помощник по учету НДС'"));
		Возврат;
		
	КонецЕсли;		
		
	ПараметрыПерепроведения = Новый Структура;
	ПараметрыПерепроведения.Вставить("КлючНазначенияИспользования",         "ПомощникПоУчетуНДС");
	ПараметрыПерепроведения.Вставить("Организация",                         Объект.Организация);
	ПараметрыПерепроведения.Вставить("ПериодРегистрации",                   ТекущийМесяц);
	ПараметрыПерепроведения.Вставить("ДокументНарушенияПоследовательности", МоментНарушения.Ссылка);
	ПараметрыПерепроведения.Вставить("ДатаНарушенияПоследовательности",     МоментНарушения.Дата);
		
	ОповещениеОВосстановлении = Новый ОписаниеОповещения("КонтрольПоследовательностиНажатиеЗавершение", ЭтотОбъект, ТекущийМесяц);
		
	ОткрытьФорму("Обработка.ЗакрытиеМесяца.Форма.ПерепроведениеДокументов",
		ПараметрыПерепроведения, ЭтотОбъект, , ,
		"e1cib/app/Обработка.ПомощникПоУчетуНДС",
		ОповещениеОВосстановлении,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура РегламентнаяОперацияНажатие(Элемент)
	
	ОбработкаНажатияСсылки(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ФормированиеЗаписейРаздела7ДекларацииНДСНажатие(Элемент)
	
	ОбработкаНажатияСсылки(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыВыбора = Новый Структура("НачалоПериода,КонецПериода,МинимальныйПериод",
		Объект.ПериодРегистрации,
		КонецКвартала(Объект.ПериодРегистрации),
		НачалоКвартала(ЭтотОбъект.КварталНачалаДеятельности));
	ОткрытьФорму("ОбщаяФорма.ВыборСтандартногоПериодаКвартал",
		ПараметрыВыбора, Элементы.ПредставлениеПериодаРегистрации);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИзменитьПериод(ВыбранноеЗначение.НачалоПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ЗаполнитьФормуНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УменьшитьПериод(Команда)
	
	ИзменитьПериод(НачалоКвартала(Объект.ПериодРегистрации - 1));
	
КонецПроцедуры

&НаКлиенте
Процедура УвеличитьПериод(Команда)
	
	ИзменитьПериод(КонецКвартала(Объект.ПериодРегистрации) + 1);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ОпределитьНеобходимостьКонтроляОпераций()
	
	РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.ОпределитьНеобходимостьКонтроляОпераций(
		Объект.Организация,
		Объект.ПериодРегистрации,
		ПолноеДеревоОпераций);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыРегламентныхОпераций()
	
	УпрощенныйУчетНДС = УчетнаяПолитика.УпрощенныйУчетНДС(Объект.Организация, Объект.ПериодРегистрации);
	
	ВсеОперацииВыполнены = Истина;
	НеВыполненнаяОперация = Неопределено;
	
	ВсеОперацииАктуальны = Истина;
	НеАктуальнаяОперация = Неопределено;
	
	ИндексОшибочнойОперации = Неопределено;
	СтатусОперации = Неопределено;
	
	КоличествоОперацийОжидающихВыполнение = 0;
	
	Для Каждого СтрокаУзла ИЗ ПолноеДеревоОпераций Цикл
		
		РегламентнаяОперация = СтрокаУзла.Узел;
		НайденныеСтроки = ТаблицаОпераций.НайтиСтроки(Новый Структура("РегламентнаяОперация", РегламентнаяОперация));
		Если НЕ НайденныеСтроки.Количество() > 0 Тогда	
			Продолжить; 
		КонецЕсли;
		
		ТекущаяСтрока = НайденныеСтроки[0];
		Если Объект.ПериодРегистрации >= '20120101' Тогда
			Если РегламентнаяОперация = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаСуммовыеРазницы
				ИЛИ РегламентнаяОперация = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж0 Тогда
				
				Элементы["Группа"+ТекущаяСтрока.ИмяОперации].Видимость = Ложь;
				
				Продолжить;
				
			КонецЕсли;
		КонецЕсли;
		
		ОтобразитьРегламентнуюОперацию(РегламентнаяОперация, ТекущаяСтрока.ИмяОперации, СтрокаУзла.Контроль, СтрокаУзла.Выполнена, СтрокаУзла.Актуальна);
		
		// Установка расшифровки для выполнения действия по умолчанию
		Если РегламентнаяОперация = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаАванс
			ИЛИ РегламентнаяОперация = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНалоговогоАгента
			ИЛИ РегламентнаяОперация = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаСуммовыеРазницы Тогда 
			
			Если СтрокаУзла.Актуальна Тогда
				ТекущаяСтрока.Действие = "ОткрытьСписокДокументов";
			Иначе	
				ТекущаяСтрока.Действие = "ДокументВвести";
			КонецЕсли; 
			
		ИначеЕсли РегламентнаяОперация = Перечисления.РегламентныеОперации.ПереходНаРаздельныйУчетНДСНаСчете19
			  ИЛИ РегламентнаяОперация = Перечисления.РегламентныеОперации.ОтключениеРаздельногоУчетаНДС
			  ИЛИ РегламентнаяОперация = Перечисления.РегламентныеОперации.ОбработкаНомеровСчетовФактур Тогда
			
			Если СтрокаУзла.Выполнена Тогда
				ТекущаяСтрока.Действие = "ОткрытьСписокДокументов";
			Иначе
				ТекущаяСтрока.Действие = "ДокументВвести";
			КонецЕсли; 
			
		Иначе
			
			Если СтрокаУзла.Выполнена Тогда
				Если СтрокаУзла.СостояниеОпераций.Количество() > 1 Тогда
					ТекущаяСтрока.Действие = "ОткрытьСписокДокументов";
				ИначеЕсли ЗначениеЗаполнено(СтрокаУзла.СостояниеОпераций[0].Регистратор) Тогда
					ТекущаяСтрока.Действие = "ДокументОткрыть";
				Иначе
					ТекущаяСтрока.Действие = "ДокументВвести";
				КонецЕсли; 
			Иначе
				ТекущаяСтрока.Действие = "ДокументВвести";
			КонецЕсли; 
			
		КонецЕсли; 
		
		Если СтрокаУзла.Контроль И ВсеОперацииВыполнены И ВсеОперацииАктуальны Тогда
			ВсеОперацииВыполнены = ВсеОперацииВыполнены И (СтрокаУзла.Выполнена);
			ВсеОперацииАктуальны = ВсеОперацииАктуальны И (СтрокаУзла.Актуальна);
			КоличествоОперацийОжидающихВыполнение = КоличествоОперацийОжидающихВыполнение + 1;
			Если НЕ ВсеОперацииВыполнены Тогда
				НеВыполненнаяОперация = СтрокаУзла.Узел;
				ИндексОшибочнойОперации = ТекущаяСтрока.ИмяОперации;
				СтатусОперации = "НеВыполнена";
			ИначеЕсли НЕ ВсеОперацииАктуальны Тогда
				НеАктуальнаяОперация = СтрокаУзла.Узел;
				ИндексОшибочнойОперации = ТекущаяСтрока.ИмяОперации;
				СтатусОперации = "НеАктуальна";
			КонецЕсли;
		КонецЕсли; 
		
	КонецЦикла;
	
	Элементы.ИнформационноеСообщение.Видимость = Ложь;
	
	Если УпрощенныйУчетНДС 
	 ИЛИ КоличествоОперацийОжидающихВыполнение = 0 
	   И ЗначениеЗаполнено(Объект.Организация) Тогда
		
		Элементы.ИнформационноеСообщение.Видимость = Истина;
		ИнформационноеСообщение = НСтр("ru = 'Формирование регламентных операций не требуется'");
	КонецЕсли;
	
	Если ИндексОшибочнойОперации <> Неопределено И НЕ СтатусОперации = Неопределено Тогда
		
		Если СтатусОперации = "НеВыполнена" Тогда
			Элементы["Статус"+ИндексОшибочнойОперации].Картинка = БиблиотекаКартинок.СтрелкаНаправоЖелтая;
			Элементы[ИндексОшибочнойОперации].ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
		ИначеЕсли СтатусОперации = "НеАктуальна" Тогда
			Элементы["Статус"+ИндексОшибочнойОперации].Картинка = БиблиотекаКартинок.ОперацияВыполненаУспешно;
			Элементы[ИндексОшибочнойОперации].ЦветТекста = WebЦвета.СероСиний;
		КонецЕсли;
		
	КонецЕсли; 
	
	ПараметрыДекларации = Новый Структура;
	ПараметрыДекларации.Вставить("ИсточникОтчета", "РегламентированныйОтчетНДС");
	ПараметрыДекларации.Вставить("ДатаНачала", Объект.ПериодРегистрации);
	ПараметрыДекларации.Вставить("ДатаОкончания", КонецКвартала(Объект.ПериодРегистрации));
	ПараметрыДекларации.Вставить("Организация", Объект.Организация);
	ПараметрыДекларации.Вставить("НачалоРасширенногоНалоговогоПериода",
		НачалоРасширенногоНалоговогоПериода);
	
	Декларация = ПолучитьСформированнуюДекларацию(ПараметрыДекларации);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостоянияИЭлементыРегламентныхОпераций()
	
	ОпределитьНеобходимостьКонтроляОпераций();
	РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.ОпределитьСостояниеОпераций(
		Объект.Организация, Объект.ПериодРегистрации, ПолноеДеревоОпераций);
	ОбновитьЭлементыРегламентныхОпераций();
		
КонецПроцедуры

#Область ПереходНаРаздельныйУчетНДСНаСчете19

&НаКлиенте
Процедура ОбработкаВыбранногоДействияПереходНаРаздельныйУчетНДСНаСчете19()
	
	СписокКоманд = Новый СписокЗначений;
	СписокКоманд.Добавить("ВыполнитьОперацию", НСтр("ru = 'Выполнить операцию'"),, БиблиотекаКартинок.Провести);
	СписокКоманд.Добавить("ОтменитьОперацию",  НСтр("ru = 'Отменить операцию'"),, БиблиотекаКартинок.ОтменаПроведения);
	
	ОповещениеВыбораИзМеню = Новый ОписаниеОповещения("ДействияПоПереходуНаРаздельныйУчетНДСНаСчете19Завершение", ЭтотОбъект);
	ПоказатьВыборИзМеню(ОповещениеВыбораИзМеню, СписокКоманд, Элементы.ПереходНаРаздельныйУчетНДСНаСчете19);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПоПереходуНаРаздельныйУчетНДСНаСчете19Завершение(Команда, Параметры) Экспорт
	
	Если Команда <> Неопределено Тогда
		
		Если Команда.Значение = "ВыполнитьОперацию" Тогда
			
			// Создание документов по переходу
			ВыполнитьДействияПоПереходуНаРаздельныйУчетНДСНаСчете19НаСервере();
			
		Иначе
			// Удаление документов по переходу
			ОтменитьДействияПоПереходуНаРаздельныйУчетНДСНаСчете19НаСервере();
			
		КонецЕсли;
		
		ОбновитьСостоянияИЭлементыРегламентныхОпераций();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьДействияПоПереходуНаРаздельныйУчетНДСНаСчете19НаСервере()
	
	СообщенияОбОшибках = Неопределено;
	Обработки.ПомощникПоУчетуНДС.ОтменитьДействияПоПереходуНаРаздельныйУчетНДСНаСчете19(
		Объект.Организация, Объект.ПериодРегистрации, СообщенияОбОшибках);
	Если СообщенияОбОшибках <> Неопределено Тогда
		Для каждого СообщениеОбОшибке Из СообщенияОбОшибках Цикл
			СообщениеОбОшибке.ПутьКДанным = "Объект";
			СообщениеОбОшибке.Сообщить();
		КонецЦикла;
	Иначе
		Обработки.ПомощникПоУчетуНДС.ВыполнитьДействияПоПереходуНаРаздельныйУчетНДСНаСчете19(
			Объект.Организация, Объект.ПериодРегистрации);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОтменитьДействияПоПереходуНаРаздельныйУчетНДСНаСчете19НаСервере()
	
	СообщенияОбОшибках = Неопределено;
	Обработки.ПомощникПоУчетуНДС.ОтменитьДействияПоПереходуНаРаздельныйУчетНДСНаСчете19(
		Объект.Организация, Объект.ПериодРегистрации, СообщенияОбОшибках);
	Если СообщенияОбОшибках <> Неопределено Тогда
		Для каждого СообщениеОбОшибке Из СообщенияОбОшибках Цикл
			СообщениеОбОшибке.ПутьКДанным = "Объект";
			СообщениеОбОшибке.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОтключениеРаздельногоУчетаНДС

&НаКлиенте
Процедура ОбработкаВыбранногоДействияОтключениеРаздельногоУчетаНДС()
	
	СписокКоманд = Новый СписокЗначений;
	СписокКоманд.Добавить("ВыполнитьОперацию", НСтр("ru = 'Выполнить операцию'"),, БиблиотекаКартинок.Провести);
	СписокКоманд.Добавить("ОтменитьОперацию",  НСтр("ru = 'Отменить операцию'"),, БиблиотекаКартинок.ОтменаПроведения);
	
	ОповещениеВыбораИзМеню = Новый ОписаниеОповещения("ДействияПоОтключениюРаздельногоУчетаНДСЗавершение", ЭтотОбъект);
	ПоказатьВыборИзМеню(ОповещениеВыбораИзМеню, СписокКоманд, Элементы.ОтключениеРаздельногоУчетаНДС);
	
КонецПроцедуры

&НаКлиенте
Процедура ДействияПоОтключениюРаздельногоУчетаНДСЗавершение(Команда, Параметры) Экспорт
	
	Если Команда <> Неопределено Тогда
		Если Команда.Значение = "ВыполнитьОперацию" Тогда
			// Создание документов для списания остатков
			ВыполнитьДействияПоОтключениюРаздельногоУчетаНДСНаСервере();
		Иначе
			// Удаление документов по списанию остатков
			ОтменитьДействияПоОтключениюРаздельногоУчетаНДСНаСервере();
		КонецЕсли;
		ОбновитьСостоянияИЭлементыРегламентныхОпераций();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьДействияПоОтключениюРаздельногоУчетаНДСНаСервере()
	
	СообщенияОбОшибках = Неопределено;
	Обработки.ПомощникПоУчетуНДС.ОтменитьДействияПоОтключениюРаздельногоУчетаНДС(
		Объект.Организация, Объект.ПериодРегистрации, СообщенияОбОшибках);
	Если СообщенияОбОшибках <> Неопределено Тогда
		Для каждого СообщениеОбОшибке Из СообщенияОбОшибках Цикл
			СообщениеОбОшибке.ПутьКДанным = "Объект";
			СообщениеОбОшибке.Сообщить();
		КонецЦикла;
	Иначе
		Обработки.ПомощникПоУчетуНДС.ВыполнитьДействияПоОтключениюРаздельногоУчетаНДС(
			Объект.Организация, Объект.ПериодРегистрации);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьДействияПоОтключениюРаздельногоУчетаНДСНаСервере()
	
	СообщенияОбОшибках = Неопределено;
	Обработки.ПомощникПоУчетуНДС.ОтменитьДействияПоОтключениюРаздельногоУчетаНДС(
		Объект.Организация, Объект.ПериодРегистрации, СообщенияОбОшибках);
	Если СообщенияОбОшибках <> Неопределено Тогда
		Для каждого СообщениеОбОшибке Из СообщенияОбОшибках Цикл
			СообщениеОбОшибке.ПутьКДанным = "Объект";
			СообщениеОбОшибке.Сообщить();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция ПолучитьСформированнуюДекларацию(Параметры)

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегламентированныйОтчет.Ссылка
		|ИЗ
		|	Документ.РегламентированныйОтчет КАК РегламентированныйОтчет
		|ГДЕ
		|	РегламентированныйОтчет.ИсточникОтчета = &ИсточникОтчета
		|	И РегламентированныйОтчет.ДатаНачала МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И РегламентированныйОтчет.Организация = &Организация
		|	И НЕ РегламентированныйОтчет.ПометкаУдаления";

	
	НачалоПериода = ?(ЗначениеЗаполнено(Параметры.НачалоРасширенногоНалоговогоПериода),
		Параметры.НачалоРасширенногоНалоговогоПериода, Параметры.ДатаНачала);
	
	Запрос.УстановитьПараметр("ИсточникОтчета", "РегламентированныйОтчетНДС");
	Запрос.УстановитьПараметр("ДатаНачала",    НачалоПериода);
	Запрос.УстановитьПараметр("ДатаОкончания", Параметры.ДатаОкончания);
	Запрос.УстановитьПараметр("Организация",   Параметры.Организация);
	
	Результат = Запрос.Выполнить();

	ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
		
	КонецЕсли;
	
	Возврат Документы.РегламентированныйОтчет.ПустаяСсылка();
	
КонецФункции

&НаСервере
Процедура УправлениеВидимостьюИДоступностьюЭлементов(ОрганизацияДоступна, ОтчетностьПредставляется, БлижайшийНалоговыйПериод)
	
	Элементы.НадписьНедостаточноПрав.Видимость             = НЕ ОрганизацияДоступна;
	Элементы.ГруппаКонтрольПоследовательности.Доступность  = ОрганизацияДоступна;
	Элементы.ГруппаРегламентныеОперацииИОтчеты.Доступность = ОрганизацияДоступна;
	Элементы.ГруппаКонтрольПоследовательности.Видимость    = ОтчетностьПредставляется;
	Элементы.ГруппаРегламентныеОперацииИОтчеты.Видимость   = ОтчетностьПредставляется;
	Элементы.ГруппаСтатусы.Видимость                       = ОтчетностьПредставляется;
	
	КварталНачалаДеятельности = НачалоКвартала(КалендарьБухгалтера.ДатаНачалаДеятельности(Объект.Организация));
	ПрошлыйКварталДоступен    = Объект.ПериодРегистрации > КварталНачалаДеятельности;
	Элементы.УменьшитьПериод.Доступность = ПрошлыйКварталДоступен;
	
	НачалоНалоговогоПериода  = Формат(БлижайшийНалоговыйПериод.Начало, "ДЛФ=D");
	КонецКварталаРегистрации = Формат(КонецКвартала(БлижайшийНалоговыйПериод.Начало), "ДЛФ=D");
	КварталНалоговогоПериода = Формат(БлижайшийНалоговыйПериод.Конец, "ДФ='к ''квартал'' гггг ''года'''");
	
	Если НЕ ОтчетностьПредставляется Тогда
		
		КварталРегистрации = Формат(Объект.ПериодРегистрации, "ДФ='к ''квартал'' гггг ''года'''");
		ШаблонСообщения = НСтр("ru='Отчетность по НДС за %1 сдавать не нужно. Период с даты регистрации %2 по %3 включается в отчетность за %4. '");
		Элементы.ПояснениеРасширенныйНалоговыйПериод.Видимость = Истина;
		Элементы.ПояснениеРасширенныйНалоговыйПериод.Заголовок = СтрШаблон(
			ШаблонСообщения, КварталРегистрации, НачалоНалоговогоПериода, КонецКварталаРегистрации, КварталНалоговогоПериода);
			
	ИначеЕсли БлижайшийНалоговыйПериод.Начало < БлижайшийНалоговыйПериод.Период Тогда
		
		ШаблонСообщения = НСтр("ru='Период с даты регистрации %1 по %2 включается в отчетность по НДС за %3. '");
		Элементы.ПояснениеРасширенныйНалоговыйПериод.Видимость = Истина;
		Элементы.ПояснениеРасширенныйНалоговыйПериод.Заголовок = СтрШаблон(
			ШаблонСообщения, НачалоНалоговогоПериода, КонецКварталаРегистрации, КварталНалоговогоПериода);
	Иначе
		Элементы.ПояснениеРасширенныйНалоговыйПериод.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбранногоДействия(ВыбранноеДействие, ИмяОперации, ОперацияСсылка, ДокументСсылка = Неопределено, ОпределитьНаличиеДокументов = Ложь)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация",   Объект.Организация);
	ПараметрыФормы.Вставить("КонецПериода",  КонецКвартала(Объект.ПериодРегистрации));
	ПараметрыФормы.Вставить("НачалоПериода",
		?(ЗначениеЗаполнено(НачалоРасширенногоНалоговогоПериода), НачалоРасширенногоНалоговогоПериода, Объект.ПериодРегистрации));
	
	Если ВыбранноеДействие = "ДокументВвести" Тогда
		
		ВвестиДокумент(ОперацияСсылка, ИмяОперации, ОпределитьНаличиеДокументов, ПараметрыФормы);
		Возврат;
		
	ИначеЕсли ВыбранноеДействие = "ДокументОткрыть" И НЕ ДокументСсылка = Неопределено Тогда
		
		Если ИмяОперации = "ФормированиеСводнойСправки" Тогда 
			ПолноеИмяФормы = "Документ.СчетФактураВыданный.ФормаОбъекта";
		Иначе
			ПолноеИмяФормы = "Документ." + СтрЗаменить(ИмяОперации, "0", "") + ".ФормаОбъекта";
		КонецЕсли;
		ПараметрыЗаполнения = Новый Структура("Ключ", ДокументСсылка);
		
	ИначеЕсли ВыбранноеДействие = "ОткрытьОтчет" тогда
		
		Если ИмяОперации = "КнигаПокупок" Тогда
			
			ПолноеИмяФормы = "Отчет.КнигаПокупок.Форма.ФормаОтчета";
						
			ПараметрыЗаполнения	= Новый Структура("ПараметрыЗаполненияФормы", ПараметрыФормы);
			
		ИначеЕсли ИмяОперации = "КнигаПродаж" Тогда
			
			ПолноеИмяФормы = "Отчет.КнигаПродаж.Форма.ФормаОтчета";
						
			ПараметрыЗаполнения	= Новый Структура("ПараметрыЗаполненияФормы", ПараметрыФормы);
			
		ИначеЕсли ИмяОперации = "Декларация" Тогда
			ПараметрыФормы.Вставить("мДатаНачалаПериодаОтчета", Объект.ПериодРегистрации);     
			ПараметрыФормы.Вставить("мДатаКонцаПериодаОтчета", КонецКвартала(Объект.ПериодРегистрации));     
			ПараметрыФормы.Вставить("мПериодичность", ПредопределенноеЗначение("Перечисление.Периодичность.Квартал"));
			ПараметрыФормы.Вставить("Ключ",Декларация);
			
			Если НЕ Декларация.Пустая() Тогда
				ПолноеИмяФормы = "Документ.РегламентированныйОтчет.ФормаОбъекта";	
			Иначе
				ПолноеИмяФормы = "Отчет.РегламентированныйОтчетНДС.Форма.ОсновнаяФорма";
			КонецЕсли;
			
			ПараметрыЗаполнения	= ПараметрыФормы;
			
		ИначеЕсли ИмяОперации = "РеестрКРазделу7Декларации" Тогда
			
			ПолноеИмяФормы = "Отчет.РеестрДокументовПодтверждающихНалоговуюЛьготуПоНДС.Форма.ФормаОтчета";
			ПараметрыЗаполнения = Новый Структура("ПараметрыЗаполненияФормы", ПараметрыФормы);
			
		КонецЕсли; 
		
	ИначеЕсли ВыбранноеДействие = "ОткрытьЖурналУчетаСчетовФактур" Тогда
		
		ПолноеИмяФормы = "Отчет.ЖурналУчетаСчетовФактур.Форма.ФормаОтчета";
				
		ПараметрыЗаполнения	= Новый Структура("ПараметрыЗаполненияФормы", ПараметрыФормы);
		
	Иначе
		
		Если ВыбранноеДействие = "ОткрытьСписокСчетовФактур" тогда
			
			Если ИмяОперации = "КнигаПокупок" Тогда
				ПолноеИмяФормы = "Документ.СчетФактураПолученный.ФормаСписка";
			ИначеЕсли ИмяОперации = "КнигаПродаж" Тогда
				ПолноеИмяФормы = "Документ.СчетФактураВыданный.ФормаСписка";
			КонецЕсли;
			
		ИначеЕсли ВыбранноеДействие = "ОткрытьСписокДокументов" Тогда
			
			Если ИмяОперации = "ФормированиеЗаписейКнигиПокупок0" Тогда
				
				ПараметрыФормы.Вставить("ПредъявленНДСКВычету0", Истина); 
				ПолноеИмяФормы = "Документ.ФормированиеЗаписейКнигиПокупок.ФормаСписка";
				
			ИначеЕсли ИмяОперации = "ФормированиеЗаписейКнигиПокупок" Тогда
				
				ПараметрыФормы.Вставить("ПредъявленНДСКВычету0", Ложь); 
				ПолноеИмяФормы = "Документ.ФормированиеЗаписейКнигиПокупок.ФормаСписка";
				
			ИначеЕсли ИмяОперации = "ФормированиеЗаписейКнигиПродаж0" Тогда
				
				ПараметрыФормы.Вставить("Реализация0", Истина); 
				ПолноеИмяФормы = "Документ.ФормированиеЗаписейКнигиПродаж.ФормаСписка";
				
			ИначеЕсли ИмяОперации = "ФормированиеЗаписейКнигиПродаж" Тогда
				
				ПараметрыФормы.Вставить("Реализация0", Ложь); 
				ПолноеИмяФормы = "Документ.ФормированиеЗаписейКнигиПродаж.ФормаСписка";
				
			ИначеЕсли ИмяОперации = "РегистрацияСчетовФактурНаАванс" Тогда
				
				ПараметрыФормы.Вставить("ВидСчетаФактуры", ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.НаАванс")); 
				ПолноеИмяФормы = "Документ.СчетФактураВыданный.ФормаСписка";
				
			ИначеЕсли ИмяОперации = "РегистрацияСчетовФактурНалоговогоАгента" Тогда
				
				ПараметрыФормы.Вставить("ВидСчетаФактуры", ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.НалоговыйАгент")); 
				ПолноеИмяФормы = "Документ.СчетФактураВыданный.ФормаСписка";
				
			ИначеЕсли ИмяОперации = "РегистрацияСчетовФактурНаСуммовыеРазницы" Тогда
				
				ПараметрыФормы.Вставить("ВидСчетаФактуры", ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу")); 
				ПолноеИмяФормы = "Документ.СчетФактураВыданный.ФормаСписка";
				
			ИначеЕсли ИмяОперации = "ФормированиеСводнойСправки" Тогда
				
				ПараметрыФормы.Вставить("ВидСчетаФактуры", ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.СводнаяСправка")); 
				ПолноеИмяФормы = "Документ.СчетФактураВыданный.ФормаСписка";
				
			Иначе
				ПолноеИмяФормы = "Документ."+ИмяОперации + ".ФормаСписка";
			КонецЕсли;
		КонецЕсли;
		
		ПараметрыЗаполнения = Новый Структура("Отбор", ПараметрыФормы);
		
	КонецЕсли; 
	
	ОткрытьФорму(ПолноеИмяФормы, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбранногоДействияОбработкаНомеровСчетовФактур()
	
	СписокКоманд = Новый СписокЗначений;
	СписокКоманд.Добавить("ВыполнитьОперацию", НСтр("ru = 'Выполнить операцию'"),, БиблиотекаКартинок.Провести);
	СписокКоманд.Добавить("ПометитьКакВыполненную", НСтр("ru = 'Пометить операцию как выполненную'"),, БиблиотекаКартинок.Провести);
	
	ОповещениеВыбораИзМеню = Новый ОписаниеОповещения("ОбработкаВыбранногоДействияОбработкаНомеровСчетовФактурЗавершение", ЭтотОбъект);
	ПоказатьВыборИзМеню(ОповещениеВыбораИзМеню, СписокКоманд, Элементы.ОбработкаНомеровСчетовФактур);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбранногоДействияОбработкаНомеровСчетовФактурЗавершение(Команда, Параметры) Экспорт
	
	Если Команда <> Неопределено Тогда
		
		Если Команда.Значение = "ВыполнитьОперацию" Тогда
			
			// Перепроведение счетов-фактур
			ВыполнитьОбработкуНомеровСчетовФактур();
		
		КонецЕсли;
		
		ЗафиксироватьФактВыполненияРегламентнойОперации(Объект.ПериодРегистрации,
				Объект.Организация,
				Неопределено,
				ПредопределенноеЗначение("Перечисление.РегламентныеОперации.ОбработкаНомеровСчетовФактур"));
		
		ОбновитьСостоянияИЭлементыРегламентныхОпераций();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОбработкуНомеровСчетовФактур()
	
	Обработки.ПомощникПоУчетуНДС.ВыполнитьОбработкуНомеровСчетовФактур(
		Объект.Организация, Объект.ПериодРегистрации);
	
КонецПроцедуры

&НаКлиенте
Процедура ВвестиДокумент(РегламентнаяОперация, ИмяОперации, ОпределитьНаличиеДокументов, ПараметрыФормы)
	
	Если НЕ ЗначениеЗаполнено(РегламентнаяОперация) Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяОперации = "РегистрацияСчетовФактурНаАванс" 
		ИЛИ ИмяОперации = "РегистрацияСчетовФактурНалоговогоАгента" 
		ИЛИ ИмяОперации = "РегистрацияСчетовФактурНаСуммовыеРазницы" Тогда
		ПараметрыЗаполнения = Новый Структура("ПараметрыЗаполненияФормы", ПараметрыФормы);
		ПолноеИмяФормы = "Обработка."+ИмяОперации+".Форма";
	Иначе
		
		Если ОпределитьНаличиеДокументов Тогда
			ДокументыПоОперацииЗаПериод = ПолучитьДокументыПоКодуОперации(Объект.Организация, Объект.ПериодРегистрации, РегламентнаяОперация, ИмяОперации);
			Если ДокументыПоОперацииЗаПериод.Количество() > 0 Тогда
				Если ДокументыПоОперацииЗаПериод.Количество() = 1 Тогда
					Если ИмяОперации = "ФормированиеСводнойСправки" Тогда
						ОбработкаВыбранногоДействия("ДокументОткрыть", "СчетФактураВыданный", РегламентнаяОперация,ДокументыПоОперацииЗаПериод[0]);
					Иначе
						ОбработкаВыбранногоДействия("ДокументОткрыть", ИмяОперации, РегламентнаяОперация,ДокументыПоОперацииЗаПериод[0]);
					КонецЕсли;
					Возврат;
				Иначе 
					ОбработкаВыбранногоДействия("ОткрытьСписокДокументов", ИмяОперации, РегламентнаяОперация);
					Возврат;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
		
		ПараметрыФормы.Вставить("Дата",КонецКвартала(Объект.ПериодРегистрации));
		
		Если ИмяОперации = "РаспределениеНДС" Тогда
			ПараметрыФормы.Вставить("НачалоПериода",Объект.ПериодРегистрации); 
		ИначеЕсли ИмяОперации = "ВосстановлениеНДС" Тогда
			ПараметрыФормы.Вставить("ОтразитьВКнигеПродаж",Объект.ПериодРегистрации>='20070101');
		КонецЕсли;
		
		Если ИмяОперации = "ФормированиеЗаписейКнигиПокупок0" Тогда
			ПолноеИмяФормы = "Документ.ФормированиеЗаписейКнигиПокупок.ФормаОбъекта";
			ПараметрыФормы.Вставить("ПредъявленНДСКВычету0",Истина);
			ПараметрыЗаполнения	= Новый Структура("ПараметрыЗаполненияФормы", ПараметрыФормы);
		ИначеЕсли ИмяОперации = "ФормированиеЗаписейКнигиПродаж0" Тогда
			ПолноеИмяФормы = "Документ.ФормированиеЗаписейКнигиПродаж.ФормаОбъекта";
			ПараметрыФормы.Вставить("Реализация0",Истина);
			ПараметрыЗаполнения	= Новый Структура("ПараметрыЗаполненияФормы", ПараметрыФормы);
		ИначеЕсли ИмяОперации = "ФормированиеСводнойСправки" Тогда
			ПолноеИмяФормы = "Документ.СчетФактураВыданный.Форма.ФормаДокументаСводнаяСправка";
			ПараметрыФормы.Вставить("ВидСчетаФактуры", ПредопределенноеЗначение("Перечисление.ВидСчетаФактурыВыставленного.СводнаяСправка"));
			ПараметрыЗаполнения= Новый Структура("ПараметрыЗаполненияФормы", ПараметрыФормы);
		Иначе
			ПараметрыЗаполнения	= Новый Структура("ПараметрыЗаполненияФормы", ПараметрыФормы);
			ПолноеИмяФормы = "Документ."+ИмяОперации+".ФормаОбъекта";
		КонецЕсли; 
		
	КонецЕсли;
	
	ОткрытьФорму(ПолноеИмяФормы, ПараметрыЗаполнения);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДокументыПоКодуОперации(Организация, ПериодРегистрации, ОперацияСсылка, ИмяТекущейОперации)
	
	Если НЕ (ОперацияСсылка = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаАванс
		ИЛИ ОперацияСсылка = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНалоговогоАгента
		ИЛИ ОперацияСсылка = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаСуммовыеРазницы) Тогда
		
		// Проверим наличие непроведенных документов за период
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Документы.Ссылка,
		|	Документы.Проведен КАК Проведен,
		|	Документы.ПометкаУдаления КАК ПометкаУдаления,
		|	Документы.Представление
		|ИЗ
		|	Документ.ФормированиеЗаписейКнигиПокупок КАК Документы
		|ГДЕ
		|	Документы.Организация = &Организация
		|	И Документы.Дата >= &НачалоПериода
		|	И Документы.Дата <= &КонецПериода
		|	И НЕ Документы.ПометкаУдаления
		| 	И &ДополнительноеУсловие
		|
		|УПОРЯДОЧИТЬ ПО
		|	Проведен УБЫВ,
		|	ПометкаУдаления,
		|	Документы.Дата";
		
		
		Если ОперацияСсылка = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок0 Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительноеУсловие", "Документы.ПредъявленНДСКВычету0");
		ИначеЕсли ОперацияСсылка = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительноеУсловие", "НЕ Документы.ПредъявленНДСКВычету0");
		ИначеЕсли ОперацияСсылка = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж0 Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ФормированиеЗаписейКнигиПокупок","ФормированиеЗаписейКнигиПродаж");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительноеУсловие", "Документы.Реализация0");
		ИначеЕсли ОперацияСсылка = Перечисления.РегламентныеОперации.ФормированиеСводнойСправки Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ФормированиеЗаписейКнигиПокупок","СчетФактураВыданный");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительноеУсловие", "Документы.ВидСчетаФактуры = Значение(Перечисление.ВидСчетаФактурыВыставленного.СводнаяСправка)");
		ИначеЕсли ОперацияСсылка = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ФормированиеЗаписейКнигиПокупок","ФормированиеЗаписейКнигиПродаж");
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительноеУсловие", "НЕ Документы.Реализация0");
		Иначе
			Запрос.Текст = СтрЗаменить(Запрос.Текст,"ФормированиеЗаписейКнигиПокупок",ИмяТекущейОперации);
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительноеУсловие", "Истина"); 
		КонецЕсли; 
		
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("НачалоПериода", ПериодРегистрации);
		Запрос.УстановитьПараметр("КонецПериода", КонецКвартала(ПериодРегистрации));
		
		ДокументыПоОперацииЗаПериодРезультат = Запрос.Выполнить().Выгрузить();
		ДокументыПоОперацииЗаПериодРезультат.Колонки.Добавить("Использован", Новый ОписаниеТипов("Булево"));
	Иначе
		ДокументыПоОперацииЗаПериодРезультат = Новый ТаблицаЗначений();
		ДокументыПоОперацииЗаПериодРезультат.Колонки.Добавить("Ссылка");
	КонецЕсли;
	
	Возврат ДокументыПоОперацииЗаПериодРезультат.ВыгрузитьКолонку("Ссылка");
	
КонецФункции // ПолучитьДокументыПоКодуОперации()

&НаСервере
Процедура ОтобразитьРегламентнуюОперацию(РегламентнаяОперация, ИмяОперации, КонтролироватьОперацию, ОперацияВыполнена, ОперацияАктуальна)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		
		Элементы["Группа"+ИмяОперации].Видимость = Истина;
		
		Элементы["Статус"+ИмяОперации].Картинка = Новый Картинка();

		Элементы[ИмяОперации].ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ОперацияВыполнена Тогда
		Если КонтролироватьОперацию Тогда
			
			Элементы["Группа"+ИмяОперации].Видимость = Истина;
			
			Элементы["Статус"+ИмяОперации].Картинка = Новый Картинка();
			
			Элементы[ИмяОперации].ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
			
		Иначе
			
			Элементы["Группа"+ИмяОперации].Видимость = Ложь;
			
		КонецЕсли;
	ИначеЕсли ОперацияАктуальна Тогда
		
		Элементы["Группа"+ИмяОперации].Видимость = Истина;
		
		Элементы["Статус"+ИмяОперации].Картинка = БиблиотекаКартинок.ОперацияВыполненаУспешно;
		
		Элементы[ИмяОперации].ЦветТекста = WebЦвета.Зеленый;
		
	Иначе
		
		Элементы["Группа"+ИмяОперации].Видимость = Истина;
		
		Элементы["Статус"+ИмяОперации].Картинка = БиблиотекаКартинок.ОперацияВыполненаУспешно;
		
		Элементы[ИмяОперации].ЦветТекста = WebЦвета.СероСиний;
		
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаНажатияСсылки(ИмяОперации)
	
	НайденныеСтроки = ТаблицаОпераций.НайтиСтроки(Новый Структура("ИмяОперации", ИмяОперации));
	
	Если НЕ НайденныеСтроки.Количество() > 0 Тогда
		
		Возврат;
		
	КонецЕсли;
	
	ТекущаяСтрока = НайденныеСтроки[0];
	
	Если ТекущаяСтрока.ИмяОперации = "СверкаДанныхУчетаНДС" Тогда
	
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Организация", 		Объект.Организация);
		ПараметрыФормы.Вставить("НалоговыйПериод", 	Объект.ПериодРегистрации);
	
		ОткрытьФорму("Обработка.СверкаДанныхУчетаНДС.Форма", ПараметрыФормы, ЭтотОбъект);
		Возврат;
	
	КонецЕсли;
	
	Если ТекущаяСтрока.ИмяОперации = "КнигаПокупок" 
		ИЛИ ТекущаяСтрока.ИмяОперации = "КнигаПродаж" 
		ИЛИ ТекущаяСтрока.ИмяОперации = "Декларация" 
		ИЛИ ТекущаяСтрока.ИмяОперации = "РеестрКРазделу7Декларации" Тогда
		
		ОбработкаВыбранногоДействия("ОткрытьОтчет", ТекущаяСтрока.ИмяОперации, Неопределено);
		
		Возврат;
		
	КонецЕсли;
	
	Если ТекущаяСтрока.ИмяОперации = "ЖурналУчетаСчетовФактур" Тогда  
		
		ОбработкаВыбранногоДействия("ОткрытьЖурналУчетаСчетовФактур", ТекущаяСтрока.ИмяОперации, Неопределено);
		
	КонецЕсли; 
	
	Если ТекущаяСтрока.ИмяОперации = "ПереходНаРаздельныйУчетНДСНаСчете19" Тогда
	
		ОбработкаВыбранногоДействияПереходНаРаздельныйУчетНДСНаСчете19();
		Возврат;
		
	КонецЕсли;
	
	Если ТекущаяСтрока.ИмяОперации = "ОтключениеРаздельногоУчетаНДС" Тогда
	
		ОбработкаВыбранногоДействияОтключениеРаздельногоУчетаНДС();
		Возврат;
		
	КонецЕсли;

	
	Если ТекущаяСтрока.ИмяОперации = "ОбработкаНомеровСчетовФактур" Тогда
	
		ОбработкаВыбранногоДействияОбработкаНомеровСчетовФактур();
		Возврат;
		
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.РегламентнаяОперация) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Действие) Тогда
		НайденныеСтроки = ПолноеДеревоОпераций.НайтиСтроки(Новый Структура("Узел", ТекущаяСтрока.РегламентнаяОперация));
		ДокументОперации = Неопределено;
		Если НайденныеСтроки.Количество() > 0
			И ЗначениеЗаполнено(НайденныеСтроки[0].СостояниеОпераций)
			И НайденныеСтроки[0].СостояниеОпераций.Количество() > 0 Тогда
			ДокументОперации = НайденныеСтроки[0].СостояниеОпераций[0].Регистратор;
		КонецЕсли;
		
		СписокКоманд = Новый СписокЗначений;
		СписокКоманд.Добавить("ОткрытьОперацию", НСтр("ru = 'Открыть операцию'"));
		Если НайденныеСтроки[0].Выполнена Тогда
			СписокКоманд.Добавить("ОтменитьВыполнение", НСтр("ru = 'Снять отметку о выполнении'"));
		Иначе
			СписокКоманд.Добавить("ПометитьКакВыполненную", НСтр("ru = 'Пометить как выполненную'"));
		КонецЕсли;
		
		ДополнительныеПараметры = Новый Структура;
		ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
		ДополнительныеПараметры.Вставить("ДокументОперации", ДокументОперации);
		ОповещениеВыбораИзМеню = Новый ОписаниеОповещения("ОткрытьПометитьОперациюЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВыборИзМеню(ОповещениеВыбораИзМеню, СписокКоманд, Элементы[ИмяОперации]);
		
	Иначе
		
		МенюРасшифровки = Новый СписокЗначений();
		ЕстьЗаписиОВыполнении = Ложь;
		
		Если ТекущаяСтрока.ИмяОперации = "РегистрацияСчетовФактурНаАванс"
			ИЛИ ТекущаяСтрока.ИмяОперации = "РегистрацияСчетовФактурНалоговогоАгента"
			ИЛИ ТекущаяСтрока.ИмяОперации = "РегистрацияСчетовФактурНаСуммовыеРазницы" Тогда
			
			ОбработкаВыбранногоДействия("ДокументВвести", ТекущаяСтрока.ИмяОперации, Неопределено, Ложь);
			
		Иначе
			
			Если ПолноеДеревоОпераций.НайтиСтроки(Новый Структура("Узел, Контроль", ТекущаяСтрока.РегламентнаяОперация, Истина)).Количество()>0 Тогда
				МенюРасшифровки.Добавить("ДокументВвести", "Ввести новый документ");
			КонецЕсли;
			
			МенюРасшифровки.Добавить("ОткрытьСписокДокументов", "Открыть список документов");
			
			ДополнительныеПараметры = Новый Структура;
			ДополнительныеПараметры.Вставить("ТекущаяСтрока", ТекущаяСтрока);
			ДополнительныеПараметры.Вставить("НайденныеСтроки", НайденныеСтроки);
			ОповещениеВыбораИзМеню = Новый ОписаниеОповещения("ВыбратьРасшифровкуЗавершение", ЭтотОбъект, ДополнительныеПараметры);
			ПоказатьВыборИзМеню(ОповещениеВыбораИзМеню, МенюРасшифровки, ТекущаяСтрока.Действие);
		КонецЕсли;
		
	КонецЕсли; 
		
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПометитьОперациюЗавершение(Команда, ДополнительныеПараметры) Экспорт
	
	Если Команда = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
	ДокументОперации = ДополнительныеПараметры.ДокументОперации;
	
	Если Команда.Значение = "ОткрытьОперацию" Тогда
		
		ОбработкаВыбранногоДействия(ТекущаяСтрока.Действие, ТекущаяСтрока.ИмяОперации, ТекущаяСтрока.РегламентнаяОперация, 
			ДокументОперации, Истина);
		
	ИначеЕсли Команда.Значение = "ПометитьКакВыполненную" Тогда
		
		Если НЕ ЗначениеЗаполнено(ДокументОперации) Тогда
			МассивДокументов = ПолучитьДокументыПоКодуОперации(Объект.Организация, Объект.ПериодРегистрации, ТекущаяСтрока.РегламентнаяОперация, ТекущаяСтрока.ИмяОперации);
			Если МассивДокументов.Количество() > 0 Тогда
				ДокументОперации = МассивДокументов[0];
			КонецЕсли;
		КонецЕсли;
		
		ЗафиксироватьФактВыполненияРегламентнойОперации(Объект.ПериодРегистрации,
			Объект.Организация,
			ДокументОперации,
			ТекущаяСтрока.РегламентнаяОперация)
		
	ИначеЕсли Команда.Значение = "ОтменитьВыполнение" Тогда
		УдалитьФактВыполненияРегламентнойОперации(Объект.ПериодРегистрации,
			Объект.Организация,
			ДокументОперации,
			ТекущаяСтрока.РегламентнаяОперация)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьРасшифровкуЗавершение(ЭлементКВыбору, ДополнительныеПараметры) Экспорт
	
	Если НЕ ЭлементКВыбору = Неопределено Тогда
		
		ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
		НайденныеСтроки = ДополнительныеПараметры.НайденныеСтроки;
		
		ОбработкаВыбранногоДействия(ЭлементКВыбору.Значение, ТекущаяСтрока.ИмяОперации, ТекущаяСтрока.РегламентнаяОперация, 
			?(НайденныеСтроки.Количество() = 0, Неопределено, НайденныеСтроки[0].Регистратор));
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСписокОпераций()
	
	ТаблицаОпераций.Очистить();
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ОбработкаНомеровСчетовФактур;
	СтрокаТаблицы.ИмяОперации = "ОбработкаНомеровСчетовФактур";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ПереходНаРаздельныйУчетНДСНаСчете19;
	СтрокаТаблицы.ИмяОперации = "ПереходНаРаздельныйУчетНДСНаСчете19";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ОтключениеРаздельногоУчетаНДС;
	СтрокаТаблицы.ИмяОперации = "ОтключениеРаздельногоУчетаНДС";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.ИмяОперации = "НачислениеНДСпоСМРхозспособом";
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.НачислениеНДСпоСМРхозспособом;
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.РаспределениеНДС;
	СтрокаТаблицы.ИмяОперации = "РаспределениеНДС";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ВосстановлениеНДС;
	СтрокаТаблицы.ИмяОперации = "ВосстановлениеНДС";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок;
	СтрокаТаблицы.ИмяОперации = "ФормированиеЗаписейКнигиПокупок";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПокупок0;
	СтрокаТаблицы.ИмяОперации = "ФормированиеЗаписейКнигиПокупок0";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ПустаяСсылка();
	СтрокаТаблицы.ИмяОперации = "КнигаПокупок";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаАванс;
	СтрокаТаблицы.ИмяОперации = "РегистрацияСчетовФактурНаАванс";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНалоговогоАгента;
	СтрокаТаблицы.ИмяОперации = "РегистрацияСчетовФактурНалоговогоАгента";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ПодтверждениеНулевойСтавкиНДС;
	СтрокаТаблицы.ИмяОперации = "ПодтверждениеНулевойСтавкиНДС";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ПодтверждениеОплатыНДСВБюджет;
	СтрокаТаблицы.ИмяОперации = "ПодтверждениеОплатыНДСВБюджет";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ВосстановлениеНДСПоОбъектамНедвижимости;
	СтрокаТаблицы.ИмяОперации = "ВосстановлениеНДСПоОбъектамНедвижимости";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ФормированиеСводнойСправки;
	СтрокаТаблицы.ИмяОперации = "ФормированиеСводнойСправки";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж;
	СтрокаТаблицы.ИмяОперации = "ФормированиеЗаписейКнигиПродаж";

	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ПустаяСсылка();
	СтрокаТаблицы.ИмяОперации = "СверкаДанныхУчетаНДС";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ПустаяСсылка();
	СтрокаТаблицы.ИмяОперации = "КнигаПродаж";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ПустаяСсылка();
	СтрокаТаблицы.ИмяОперации = "Декларация";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ПустаяСсылка();
	СтрокаТаблицы.ИмяОперации = "РеестрКРазделу7Декларации";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.РегистрацияСчетовФактурНаСуммовыеРазницы;
	СтрокаТаблицы.ИмяОперации = "РегистрацияСчетовФактурНаСуммовыеРазницы";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ФормированиеЗаписейКнигиПродаж0;
	СтрокаТаблицы.ИмяОперации = "ФормированиеЗаписейКнигиПродаж0";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ПустаяСсылка();
	СтрокаТаблицы.ИмяОперации = "ЖурналУчетаСчетовФактур";
	
	СтрокаТаблицы = ТаблицаОпераций.Добавить();
	СтрокаТаблицы.РегламентнаяОперация = Перечисления.РегламентныеОперации.ФормированиеЗаписейРаздела7ДекларацииНДС;
	СтрокаТаблицы.ИмяОперации = "ФормированиеЗаписейРаздела7ДекларацииНДС";
	
	// Построение полного дерева операций
	ПолноеДерево = РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.ЗаполнитьЗначенияДереваОпераций();
	ПолноеДерево.Колонки.Добавить("Контроль",          Новый ОписаниеТипов("Булево"));
	ПолноеДерево.Колонки.Добавить("Актуальна",         Новый ОписаниеТипов("Булево"));
	ПолноеДерево.Колонки.Добавить("Выполнена",         Новый ОписаниеТипов("Булево"));
	ПолноеДерево.Колонки.Добавить("СостояниеОпераций", Новый ОписаниеТипов("ТаблицаЗначений"));
	ЗначениеВРеквизитФормы(ПолноеДерево.Скопировать( ,
		"Узел,Связи,Контроль, Актуальна, Выполнена, СостояниеОпераций"),"ПолноеДеревоОпераций");

КонецФункции

&НаСервере
Процедура ЗаполнитьФормуНаСервере()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
		
	ДоступныеОрганизации = ОбщегоНазначенияБПВызовСервераПовтИсп.ВсеОрганизацииДанныеКоторыхДоступныПоRLS(Истина);
	ОрганизацияДоступна = ДоступныеОрганизации.Найти(Объект.Организация) <> Неопределено;
	
	Если ОрганизацияДоступна Тогда
		БлижайшийНалоговыйПериод = ИнтерфейсыВзаимодействияБРО.БлижайшийНалоговыйПериод(
			Объект.Организация,
			Объект.ПериодРегистрации,
			Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВПоследние10ДнейКвартала,
			Перечисления.Периодичность.Квартал);
		ОтчетностьПредставляется = БлижайшийНалоговыйПериод.Конец = КонецДня(КонецКвартала(Объект.ПериодРегистрации));
	Иначе
		ОтчетностьПредставляется = Ложь;
		БлижайшийНалоговыйПериод = НовыйБлижайшийНалоговыйПериод();
	КонецЕсли;

	Если БлижайшийНалоговыйПериод.Начало < БлижайшийНалоговыйПериод.Период Тогда
		НачалоРасширенногоНалоговогоПериода = БлижайшийНалоговыйПериод.Начало;
	Иначе
		НачалоРасширенногоНалоговогоПериода = '0001-01-01';
	КонецЕсли;
	
	УправлениеВидимостьюИДоступностьюЭлементов(
		ОрганизацияДоступна,
		ОтчетностьПредставляется,
		БлижайшийНалоговыйПериод);
		
	ПредставлениеПериодаРегистрации = ВыборПериодаКлиентСервер.ПолучитьПредставлениеПериодаОтчета(
		ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал"),
		НачалоКвартала(Объект.ПериодРегистрации),
		КонецКвартала(Объект.ПериодРегистрации));
		
	ОбщегоНазначенияБПКлиентСервер.УстановитьПараметрОрганизацияФункциональныхОпцийФормы(
		ЭтотОбъект,
		Объект.Организация,
		КонецКвартала(Объект.ПериодРегистрации));

	Если ОтчетностьПредставляется Тогда
		ОпределитьНеобходимостьКонтроляОпераций();
		ОбновитьЭлементыРегламентныхОпераций();
		ПроверитьПоследовательность();
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Функция НовыйБлижайшийНалоговыйПериод()
	
	Результат = Новый Структура;
	Результат.Вставить("Период", '0001-01-01');
	Результат.Вставить("Начало", '0001-01-01');
	Результат.Вставить("Конец",  '0001-01-01');
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ЗафиксироватьФактВыполненияРегламентнойОперации(ПериодРегистрации,
														  Организация,
														  Регистратор,
														  РегламентнаяОперация,
														  Актуальность = Истина)
	
	РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.ЗафиксироватьФактВыполненияРегламентнойОперации(ПериодРегистрации,
		Организация,
		Регистратор,
		РегламентнаяОперация,
		Актуальность = Истина);
																									  
	ОбновитьСостоянияИЭлементыРегламентныхОпераций();
	
КонецПроцедуры

&НаСервере
Процедура УдалитьФактВыполненияРегламентнойОперации(ПериодРегистрации,
													Организация,
													Регистратор,
													РегламентнаяОперация)
	
	РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.УдалитьФактВыполненияРегламентнойОперации(
		ПериодРегистрации,
		Организация,
		Регистратор,
		РегламентнаяОперация);
		
	Если ЗначениеЗаполнено(НачалоРасширенногоНалоговогоПериода) Тогда
		// В случае расширенного налогового периода необходимо удалить факты выполнения регламентных
		// операций в квартале регистрации.
		РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.УдалитьФактВыполненияРегламентнойОперации(
			НачалоКвартала(НачалоРасширенногоНалоговогоПериода),
			Организация,
			Регистратор,
			РегламентнаяОперация);
		
	КонецЕсли;
		
	ОбновитьСостоянияИЭлементыРегламентныхОпераций();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрольПоследовательностиНажатиеЗавершение(РезультатЗакрытия, ТекущийМесяц) Экспорт

	Если Не ЗначениеЗаполнено(РезультатЗакрытия)
	 Или РезультатЗакрытия = КодВозвратаДиалога.Отмена Тогда
		ПроверитьПоследовательность();
		Возврат;
	КонецЕсли;
	
	Если РезультатЗакрытия.ВариантВосстановления = "ПеренестиГраницу" Тогда
		// Сдвинуть границу последовательности на конец текущего месяца.
		ПеренестиГраницу(ТекущийМесяц, Истина);
		
	ИначеЕсли РезультатЗакрытия.ВариантВосстановления = "ПерепровестиМесяц" Тогда
		// Сдвинуть границу на конец предыдущего месяца и начать перепроведение текущего месяца.
		ПеренестиГраницу(ТекущийМесяц, Ложь);
		
	ИначеЕсли РезультатЗакрытия.ВариантВосстановления = "ПерепровестиДокументы" Тогда
		// Начать перепроведение.
		ПерепровестиДокументы(ТекущийМесяц, РезультатЗакрытия.ДатаНарушенияПоследовательности);
		 
	Иначе // перейти в месяц нарушения последовательности

		ПерейтиККварталу(РезультатЗакрытия.ДатаНарушенияПоследовательности);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПерепровестиДокументы(ТекущийМесяц, ДатаНачалаПерепроведения)
	
	Результат = ЗапуститьПерепроведениеДокументов(ТекущийМесяц);
	
	Если Не Результат.ЗаданиеВыполняется Тогда
		// Результат получен и уже обработан на стороне сервера
		ОбработатьЗавершениеДлительнойОперацииНаКлиенте(Результат);
		
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		
		// Результата еще нет, но есть шансы дождаться
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьЗавершениеДлительнойОперации", 1, Истина);
		
		// Если вызывается после переноса границы или актуализации, то форма может уже быть на экране.
		Если ТипЗнч(ФормаДлительнойОперации) <> Тип("УправляемаяФорма")
		 Или Не ФормаДлительнойОперации.Открыта() Тогда
		 
			ОписаниеПроцесса = ЗакрытиеМесяцаКлиент.ОписаниеПроцессаДлительнойОперации();
			ОписаниеПроцесса.ИспользоватьПерепроведениеДокументов = Истина;
			ОписаниеПроцесса.ИспользоватьАктуализациюРасчетовСКонтрагентами = Результат.АктуализироватьРасчетыСКонтрагентами;
			ОписаниеПроцесса.Организация = Объект.Организация;
			ОписаниеПроцесса.КоличествоОрганизаций = 1;
			ОписаниеПроцесса.Месяц = НачалоМесяца(ДатаНачалаПерепроведения);
			Если НачалоМесяца(ДатаНачалаПерепроведения) = ТекущийМесяц Тогда
				ОписаниеПроцесса.КоличествоМесяцев = 1;
			Иначе
				НачальныйМесяц = Месяц(ДатаНачалаПерепроведения);
				КонечныйМесяц  = Месяц(ТекущийМесяц);
				НачальныйГод   = Год(ДатаНачалаПерепроведения);
				КонечныйГод    = Год(ТекущийМесяц);
				
				// Рассчитаем количество полных месяцев между двумя датами (включая месяцы обоих дат).
				Если НачальныйМесяц > КонечныйМесяц Тогда
					ОписаниеПроцесса.КоличествоМесяцев = (КонечныйГод - НачальныйГод - 1) * 12 + (12 - НачальныйМесяц + КонечныйМесяц) + 1;
				Иначе
					ОписаниеПроцесса.КоличествоМесяцев = (КонечныйГод - НачальныйГод) * 12 + (КонечныйМесяц - НачальныйМесяц) + 1;
				КонецЕсли;

			КонецЕсли;
		
			ФормаДлительнойОперации = ЗакрытиеМесяцаКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания, ОписаниеПроцесса);
			
		Иначе // форма открыта, нужно лишь отработать запуск нового фонового задания 
			
			ФормаДлительнойОперации.ИдентификаторЗадания = ИдентификаторЗадания;
			ФормаДлительнойОперации.ИспользоватьПереносГраницы = Ложь;
			
			ПараметрыФормыИндикации = ЗакрытиеМесяцаКлиентСервер.НовыеПараметрыСообщенийПрогресса();
			ПараметрыФормыИндикации.КонтрольРанееЗапущенных = Истина;
			ФормаДлительнойОперации.ОбновитьСостояниеВыполнения(ПараметрыФормыИндикации, "");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьПерепроведениеДокументов(ТекущийМесяц)

	// Обязательно возвращаем признак активности задания и список дат перепроведения.
	// Ниже Результат может дополняться иной информацией о выполненных действиях.
	Результат = Новый Структура;
	Результат.Вставить("ЗаданиеВыполняется", Ложь);
	Результат.Вставить("АктуализироватьРасчетыСКонтрагентами", Ложь);
	
	// Возможно, что фоновое задание было запущено раньше, 
	// пользователь дал команду его отменить, однако задание не отменено.
	// В таком случае не следует запускать задание повторно - следует дождаться его выполнения.
	// Мы можем отследить ситуацию только, если все это происходит в одной форме.
	// Потому что подсистема ДлительныеОперации не умеет устанавливать ключ фонового задания.
	Если ЗакрытиеМесяца.ЗаданиеЕщеВыполняется(ИдентификаторЗадания) Тогда
		Результат.ЗаданиеВыполняется = Истина; // Надо ждать
		Возврат Результат;
	КонецЕсли;

	ИдентификаторЗадания = Неопределено;

	МоментНарушения = РаботаСПоследовательностями.МоментНарушенияПоследовательности(
		Объект.Организация, КонецМесяца(ТекущийМесяц));
	
	МоментАктуальностиОтложенныхРасчетов = УчетВзаиморасчетовОтложенноеПроведение.МоментАктуальностиОтложенныхРасчетов(
		Объект.Организация,
		КонецМесяца(ТекущийМесяц));

	// Передадим на клиент, что требуется актуализация расчетов с контрагентами.
	Результат.АктуализироватьРасчетыСКонтрагентами = МоментАктуальностиОтложенныхРасчетов <> Неопределено;
		
	Если Не ПроведениеСервер.ИспользуетсяОтложенноеПроведение(Объект.Организация, ТекущийМесяц) Тогда
		// В текущем месяце отложенное проведение по организации не используется,
		// если из-за использования в прошлых месяцах остались неактуализированные расчеты, то начинаем с них.
		Если МоментНарушения = Неопределено И МоментАктуальностиОтложенныхРасчетов <> Неопределено Тогда
			МоментНарушения = МоментАктуальностиОтложенныхРасчетов;
		КонецЕсли;
	КонецЕсли;

	Если МоментНарушения = Неопределено И МоментАктуальностиОтложенныхРасчетов = Неопределено Тогда
		// Последовательность не нарушена. Восстанавливать ее не требуется.
		Результат.Вставить("ПоследовательностьВосстановлена", Истина);
		
		// Обозначим состояние последовательности на форме как ненарушенное.
		ПроверитьПоследовательность();
		
		Возврат Результат;
	КонецЕсли;
	
	// Подготовка параметров для группового перепроведения
	ПараметрыПерепроведения                              = Обработки.ГрупповоеПерепроведениеДокументов.ПараметрыПерепроведения();
	ПараметрыПерепроведения.Организация                  = Объект.Организация;
	ПараметрыПерепроведения.УникальныйИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыПерепроведения.МоментНачала                 = МоментНарушения;
	ПараметрыПерепроведения.ДатаОкончания                = КонецМесяца(ТекущийМесяц);
	ПараметрыПерепроведения.ЭтоПомощникПоУчетуНДС        = Истина;
	ПараметрыПерепроведения.СообщатьПрогрессВыполнения   = Истина;
	ПараметрыПерепроведения.МоментНачалаАктуализацииРасчетовСКонтрагентами = МоментАктуальностиОтложенныхРасчетов;
	
	РезультатПерепроведения = Обработки.ГрупповоеПерепроведениеДокументов.ЗапуститьПерепроведение(ПараметрыПерепроведения);
	
	Если РезультатПерепроведения = Неопределено Тогда
		Результат.Вставить("ПоказатьПредупреждение",
			НСтр("ru = 'Перепроведение уже выполняется другим пользователем либо открыта для редактирования форма организации.'"));
		Возврат Результат;
	Иначе
		Для каждого ЭлементРезультата Из РезультатПерепроведения Цикл
			Результат.Вставить(ЭлементРезультата.Ключ, ЭлементРезультата.Значение);
		КонецЦикла;
	КонецЕсли;
		
	АдресХранилища       = Результат.АдресХранилища;
	ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		
	Если Не Результат.ЗаданиеВыполнено Тогда
		Результат.ЗаданиеВыполняется = Истина; // Надо ждать
		Возврат Результат;
	Иначе
		// Задание выполнено.
		// Результат выполнения возвращен через хранилище значения.
		// Загрузим его в форму и передадим данные на клиент.
		РезультатПерепроведения = ОбновитьДанныеПоРезультатуДлительнойОперации();
		Для каждого ЭлементРезультата Из РезультатПерепроведения Цикл
			Результат.Вставить(ЭлементРезультата.Ключ, ЭлементРезультата.Значение);
		КонецЦикла;
		Возврат Результат;
	
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПеренестиГраницу(ТекущийМесяц, СамостоятельнаяОперация)
	
	Результат = ЗапуститьПереносГраницыАктуальности(ТекущийМесяц, СамостоятельнаяОперация);
	
	Если ЗначениеЗаполнено(Результат) И Результат.ЗаданиеВыполнено Тогда
		// Результат получен и уже обработан на стороне сервера.
		ОбработатьЗавершениеДлительнойОперацииНаКлиенте(Результат);
		
	ИначеЕсли ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		
		// Результата еще нет, но есть шансы дождаться
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		Если СамостоятельнаяОперация Тогда
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьЗавершениеПереносаГраницы", 1, Истина);
		Иначе
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьЗавершениеПереносаГраницыВРамкахПроведения", 1, Истина);
		КонецЕсли;
		
		ОписаниеПроцесса = ЗакрытиеМесяцаКлиент.ОписаниеПроцессаДлительнойОперации();
		ОписаниеПроцесса.Месяц 						          = Объект.ПериодРегистрации;
		ОписаниеПроцесса.Организация 				          = Объект.Организация;
		ОписаниеПроцесса.ИспользоватьПереносГраницы           = Истина;
		ОписаниеПроцесса.ИспользоватьПерепроведениеДокументов = Не СамостоятельнаяОперация;
		ОписаниеПроцесса.ИспользоватьАктуализациюРасчетовСКонтрагентами
			= Не СамостоятельнаяОперация И Результат.АктуализироватьРасчетыСКонтрагентами;

		ФормаДлительнойОперации = ЗакрытиеМесяцаКлиент.ОткрытьФормуДлительнойОперации(ЭтотОбъект, ИдентификаторЗадания, ОписаниеПроцесса);

	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗапуститьПереносГраницыАктуальности(ТекущийМесяц, СамостоятельнаяОперация)
	
	Результат = Новый Структура;
	Результат.Вставить("ЗаданиеВыполнено", Ложь);
	Результат.Вставить("АктуализироватьРасчетыСКонтрагентами", Истина);
	
	// Возможно, что фоновое задание было запущено раньше, пользователь дал команду его отменить, однако задание не отменено.
	// В таком случае не следует запускать задание повторно - следует дождаться его выполнения. Мы можем отследить ситуацию
	// только, если все это происходит в одной форме. Потому что подсистема ДлительныеОперации не умеет устанавливать ключ
	// фонового задания.
	Если ЗакрытиеМесяца.ЗаданиеЕщеВыполняется(ИдентификаторЗадания) Тогда
		Возврат Результат; // надо ждать
	КонецЕсли;
	ИдентификаторЗадания = Неопределено;
	
	АктуализироватьРасчетыСКонтрагентами = Ложь;
	Если Не СамостоятельнаяОперация Тогда // определим необходимость показа отложенных расчетов

		МоментАктуальностиОтложенныхРасчетов = УчетВзаиморасчетовОтложенноеПроведение.МоментАктуальностиОтложенныхРасчетов(
			Объект.Организация, КонецМесяца(ТекущийМесяц));
		АктуализироватьРасчетыСКонтрагентами = МоментАктуальностиОтложенныхРасчетов <> Неопределено;
		
	КонецЕсли;
	
	// Вспомогательная информация, передаваемая в алгоритм переноса границы,
	// которая будет возвращена алгоритмом после завершения в исходном виде.
	// Используется для возможности автоматического запуска следующей операции группового перепроведения.
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("СамостоятельнаяОперация", СамостоятельнаяОперация);
	ДополнительныеПараметры.Вставить("ТекущийМесяц",            ТекущийМесяц);
	ДополнительныеПараметры.Вставить("ВидОперации",
		"ПереносГраницыАктуальности" + ?(СамостоятельнаяОперация, "", "ПерепровестиДокументы"));
	
	ПараметрыПереноса = Новый Структура;
	ПараметрыПереноса.Вставить("Период",
		?(СамостоятельнаяОперация, ТекущийМесяц, ДобавитьМесяц(ТекущийМесяц, -1)));
	ПараметрыПереноса.Вставить("Организация", Объект.Организация);
	ПараметрыПереноса.Вставить("АдресХранилищаСОшибками",
		ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор));
	ПараметрыПереноса.Вставить("ДополнительныеПараметры", ДополнительныеПараметры);
		
	НаименованиеЗадания = ЗакрытиеМесяцаКлиентСервер.ИмяФоновогоЗаданияПереносаГраницы();
	Результат = ЗакрытиеМесяца.ЗапуститьВыполнениеВФоне(
		УникальныйИдентификатор,
		"Обработки.ЗакрытиеМесяца.ПеренестиГраницуАктуальности",
		ПараметрыПереноса,
		НаименованиеЗадания);
		
	АдресХранилища       = Результат.АдресХранилища;
	ИдентификаторЗадания = Результат.ИдентификаторЗадания;
	
	Если Не Результат.ЗаданиеВыполнено Тогда
		Результат.Вставить("АктуализироватьРасчетыСКонтрагентами", АктуализироватьРасчетыСКонтрагентами);
		Возврат Результат; // надо ждать
	КонецЕсли;
	
	// Задание выполнено.
	// Результат выполнения возвращен через хранилище значения.
	// Загрузим его в форму и передадим данные на клиент.
	Результат = ОбновитьДанныеПоРезультатуДлительнойОперации();
	Если ЗначениеЗаполнено(Результат) Тогда
		Результат.Вставить("АктуализироватьРасчетыСКонтрагентами", АктуализироватьРасчетыСКонтрагентами);
		Результат.Вставить("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьЗавершениеДлительнойОперации()

	ПроверитьЗавершениеДлительнойОперации("Подключаемый_ПроверитьЗавершениеДлительнойОперации", Истина);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьЗавершениеПереносаГраницы()

	ПроверитьЗавершениеДлительнойОперации("Подключаемый_ПроверитьЗавершениеПереносаГраницы", Истина);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьЗавершениеПереносаГраницыВРамкахПроведения()

	ПроверитьЗавершениеДлительнойОперации("Подключаемый_ПроверитьЗавершениеПереносаГраницыВРамкахПроведения", Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗавершениеДлительнойОперации(ИмяОбработчикаОжидания, ЗакрытьФормуДлительнойОперации)
	
	Попытка
		ЕстьПрогрессОперации = ЗакрытиеМесяцаКлиент.ВыполненШагДлительнойОперации(ФормаДлительнойОперации);
		Если ЕстьПрогрессОперации = Неопределено Тогда
			
			Если ЗакрытьФормуДлительнойОперации Тогда
				ЗакрытиеМесяцаКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
			КонецЕсли;
			
			Результат = ОбновитьДанныеПоРезультатуДлительнойОперации();
			ОбработатьЗавершениеДлительнойОперацииНаКлиенте(Результат);
			
		Иначе
			
			Если ЕстьПрогрессОперации Тогда
				ЗакрытиеМесяцаКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			Иначе
				ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			КонецЕсли;
			
			ПодключитьОбработчикОжидания(ИмяОбработчикаОжидания, ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);

		КонецЕсли;
	Исключение
		ЗакрытиеМесяцаКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ОбновитьДанныеПоРезультатуДлительнойОперации()
	
	// Результат закрытия подготовлен в 
	// Обработки.ГрупповоеПерепроведениеДокументов.ПерепроведениеДокументов()
	// Сообщения об ошибках могут храниться в фоновом задании
	Результат = ПолучитьИзВременногоХранилища(АдресХранилища);
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РезультатДляКлиента = Новый Структура;
	
	Если Результат.Свойство("ПоследовательностьВосстановлена")  Тогда
	
		РезультатДляКлиента.Вставить("ПоследовательностьВосстановлена", Результат.ПоследовательностьВосстановлена);
		
		Если Результат.Свойство("ВывестиИнформациюУведомлений") Тогда
			РезультатДляКлиента.Вставить("ВывестиИнформациюУведомлений", Результат.ВывестиИнформациюУведомлений);
		КонецЕсли;
		
		Если Результат.Свойство("АдресХранилищаСОшибками") Тогда
			РезультатДляКлиента.Вставить("АдресХранилищаСОшибками", Результат.АдресХранилищаСОшибками);
		КонецЕсли;
		
		Если Результат.Свойство("ДополнительныеПараметры") И ЗначениеЗаполнено(Результат.ДополнительныеПараметры) Тогда
			РезультатДляКлиента.Вставить("ДополнительныеПараметры", Результат.ДополнительныеПараметры);
		Иначе
			РезультатДляКлиента.Вставить("ДополнительныеПараметры", Новый Структура);
		КонецЕсли;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	ЗаполнитьФормуНаСервере();
	
	Возврат РезультатДляКлиента;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьЗавершениеДлительнойОперацииНаКлиенте(Результат)
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// "Результат" - структура, содержит ключи
	// - ПоследовательностьВосстановлена     - (опционально)
	// - ПоказатьПредупреждение - (опционально) - текст предупреждения

	Если Результат.Свойство("ПоследовательностьВосстановлена") Тогда
		ОбработатьРезультатПерепроведенияДокументовНаКлиенте(Результат);
	КонецЕсли;

	Если Результат.Свойство("ПоказатьПредупреждение") Тогда
		ПоказатьПредупреждение(, Результат.ПоказатьПредупреждение);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатПерепроведенияДокументовНаКлиенте(РезультатПерепроведения)

	// Если выполняется в рамках общего закрытия месяца, то запустим следующие операции.
	ПоследовательностьВосстановлена	= Ложь;
	ВывестиИнформациюУведомлений    = Ложь;
	АдресХранилищаСОшибками 		= "";
	СамостоятельнаяОперация 		= Истина;
	ВидОперации                     = Неопределено;
	ТекущийМесяц                    = '00010101';
	
	Если ТипЗнч(РезультатПерепроведения) = Тип("Структура") Тогда
		
		Если РезультатПерепроведения.Свойство("ПоследовательностьВосстановлена") Тогда
			ПоследовательностьВосстановлена = РезультатПерепроведения.ПоследовательностьВосстановлена;
		КонецЕсли;

		Если РезультатПерепроведения.Свойство("ВывестиИнформациюУведомлений") Тогда
			ВывестиИнформациюУведомлений = РезультатПерепроведения.ВывестиИнформациюУведомлений;
		КонецЕсли;
		
		Если РезультатПерепроведения.Свойство("АдресХранилищаСОшибками") Тогда
			АдресХранилищаСОшибками = РезультатПерепроведения.АдресХранилищаСОшибками;
		КонецЕсли;
		
		Если РезультатПерепроведения.Свойство("ДополнительныеПараметры") Тогда
		
			Если РезультатПерепроведения.ДополнительныеПараметры.Свойство("СамостоятельнаяОперация") Тогда
				СамостоятельнаяОперация = РезультатПерепроведения.ДополнительныеПараметры.СамостоятельнаяОперация;
			КонецЕсли;
				
			Если РезультатПерепроведения.ДополнительныеПараметры.Свойство("ВидОперации") Тогда
				ВидОперации = РезультатПерепроведения.ДополнительныеПараметры.ВидОперации;
			КонецЕсли;
			
			Если РезультатПерепроведения.ДополнительныеПараметры.Свойство("ТекущийМесяц") Тогда
				ТекущийМесяц = РезультатПерепроведения.ДополнительныеПараметры.ТекущийМесяц;
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;

	Если ПоследовательностьВосстановлена И НЕ СамостоятельнаяОперация Тогда
		
		Если СтрНачинаетсяС(ВидОперации, "ПереносГраницыАктуальности") Тогда // запускаем перепроведение текущего месяца

			ПерепровестиДокументы(ТекущийМесяц, ТекущийМесяц);
			
		КонецЕсли;
		
	Иначе
		
		// Закром форму длительной операции, она больше не требуется.
		ЗакрытиеМесяцаКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		
		// Отображаем отчет с ошибками перепроведения.
		Если ВывестиИнформациюУведомлений Или НЕ ПоследовательностьВосстановлена Тогда
			ОбщегоНазначенияБПКлиент.ОткрытьФормуОшибокПерепроведения(ЭтотОбъект, АдресХранилищаСОшибками);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПроверитьПоследовательность()

	СведенияОНарушении = СведенияОНарушенииПоследовательностиЗаКвартал(
		Объект.Организация,
		Объект.ПериодРегистрации,
		НачалоРасширенногоНалоговогоПериода);
		
	Если ЗначениеЗаполнено(НачалоРасширенногоНалоговогоПериода) Тогда
		НачалоПериода        = НачалоМесяца(НачалоРасширенногоНалоговогоПериода);
		ПервыйМесяцВКвартале = 0;
		Элементы.ГруппаКонтрольПоследовательности0.Видимость = Истина;
	Иначе
		НачалоПериода        = НачалоКвартала(Объект.ПериодРегистрации);
		ПервыйМесяцВКвартале = 1;
		Элементы.ГруппаКонтрольПоследовательности0.Видимость = Ложь;
	КонецЕсли;
	
	ПоследовательностьНарушена = Ложь;
	ТекущийМесяц = НачалоПериода;		
	Для НомерМесяцаВКвартале = ПервыйМесяцВКвартале По 3 Цикл
		
		ЭлементСтатус   = Элементы["СтатусКонтрольПоследовательности" + НомерМесяцаВКвартале];
		ЭлементКонтроль = Элементы["КонтрольПоследовательности" + НомерМесяцаВКвартале];
		
		ТекстНадписи = НРег(Формат(ТекущийМесяц, "ДФ=ММММ"));
		ЭлементКонтроль.Заголовок = ТекстНадписи;
		
		ДатаНачалаПерепроведения = СведенияОНарушении["Дата" + НомерМесяцаВКвартале];
		ПоследовательностьНарушена = ПоследовательностьНарушена
			Или ЗначениеЗаполнено(ДатаНачалаПерепроведения);
		Если ПоследовательностьНарушена Тогда

			Если СведенияОНарушении["РучнаяКорректировка" + НомерМесяцаВКвартале] Тогда
				ЭлементСтатус.Картинка = БиблиотекаКартинок.ОперациюНеобходимоПовторитьИсправлена;
			Иначе
				ЭлементСтатус.Картинка = БиблиотекаКартинок.ОперациюНеобходимоПовторить;
			КонецЕсли;
			ЭлементКонтроль.ЦветТекста = WebЦвета.СероСиний;
			
		ИначеЕсли СведенияОНарушении["РучнаяКорректировка" + НомерМесяцаВКвартале] Тогда
			
			ЭлементСтатус.Картинка     = БиблиотекаКартинок.ОперацияИсправлена;
			ЭлементКонтроль.ЦветТекста = WebЦвета.Зеленый;
			
		Иначе
			
			ЭлементСтатус.Картинка     = БиблиотекаКартинок.ОперацияВыполненаУспешно;
			ЭлементКонтроль.ЦветТекста = WebЦвета.Зеленый;

		КонецЕсли;

		ТекущийМесяц = КонецМесяца(ТекущийМесяц) + 1;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СведенияОНарушенииПоследовательностиЗаМесяц(Знач Организация, Знач ПериодРегистрации)

	НачалоПерепроведения = РаботаСПоследовательностями.МоментНачалаПерепроведения(
			Организация, КонецМесяца(ПериодРегистрации));
	
	Если НачалоПерепроведения = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МоментНарушения = Новый Структура;
	МоментНарушения.Вставить("Дата", НачалоПерепроведения.Дата);
	МоментНарушения.Вставить("Ссылка", НачалоПерепроведения.Ссылка);

	Возврат МоментНарушения;

КонецФункции

&НаСервереБезКонтекста
Функция СведенияОНарушенииПоследовательностиЗаКвартал(Знач Организация, Знач ПериодРегистрации, НачалоРасширенногоНалоговогоПериода)

	РасширенныйНалоговыйПериод = ЗначениеЗаполнено(НачалоРасширенногоНалоговогоПериода);
	
	Результат = Новый Структура;
	Если РасширенныйНалоговыйПериод Тогда
		НачалоПериода        = НачалоМесяца(НачалоРасширенногоНалоговогоПериода);
		ПервыйМесяцВКвартале = 0;
	Иначе
		НачалоПериода        = НачалоКвартала(ПериодРегистрации);
		ПервыйМесяцВКвартале = 1;
	КонецЕсли;
	Для НомерМесяцаВКвартале = ПервыйМесяцВКвартале По 3 Цикл
		
		Результат.Вставить("РучнаяКорректировка" + НомерМесяцаВКвартале, Ложь);
		Результат.Вставить("Дата" + НомерМесяцаВКвартале);
		
	КонецЦикла;
	
	НомерМесяцаНарушения = 9; // инициализируем значением больше 3
	МоментНарушения = РаботаСПоследовательностями.МоментНачалаПерепроведения(
						Организация, КонецКвартала(ПериодРегистрации));
	Если МоментНарушения <> Неопределено Тогда // проставляем дату нарушения, начиная с месяца нарушения
		
		НомерМесяцаНарушения = Макс(ПервыйМесяцВКвартале,
			(Год(МоментНарушения.Дата) - Год(НачалоПериода)) * 12
			+ Месяц(МоментНарушения.Дата) - Месяц(НачалоПериода)
			+ ПервыйМесяцВКвартале);
			
		Если НомерМесяцаНарушения > ПервыйМесяцВКвартале Тогда	
			ПериодПроверки = ДобавитьМесяц(НачалоПериода, НомерМесяцаНарушения - ПервыйМесяцВКвартале);
		Иначе
			ПериодПроверки = НачалоПериода;
		КонецЕсли;
		Для НомерМесяцаВКвартале = НомерМесяцаНарушения По 3 Цикл
			
			ЕстьПропущенныеДокументы = РаботаСПоследовательностями.ЕстьДокументыСПропущеннымПерепроведением(
										Организация, ПериодПроверки, МоментНарушения);
			Результат.Вставить("РучнаяКорректировка" + НомерМесяцаВКвартале, ЕстьПропущенныеДокументы);
			Результат["Дата" + НомерМесяцаВКвартале] = МоментНарушения.Дата;
			ПериодПроверки = ДобавитьМесяц(ПериодПроверки, 1);
			
		КонецЦикла;

	КонецЕсли;

	ПериодПроверки = НачалоПериода;
	Для НомерМесяцаВКвартале = ПервыйМесяцВКвартале По 3 Цикл
		
		Если НомерМесяцаВКвартале >= НомерМесяцаНарушения Тогда
			Прервать;
		КонецЕсли;
		
		ЕстьПропущенныеДокументы = РаботаСПоследовательностями.ЕстьДокументыСПропущеннымПерепроведением(
										Организация, ПериодПроверки, МоментНарушения);
		Результат.Вставить("РучнаяКорректировка" + НомерМесяцаВКвартале, ЕстьПропущенныеДокументы);
		ПериодПроверки = ДобавитьМесяц(ПериодПроверки, 1);
					
	КонецЦикла;

	Возврат Результат;

КонецФункции

&НаКлиенте
Процедура ПерейтиККварталу(ДатаКвартала)

	ИзменитьПериод(НачалоКвартала(ДатаКвартала));
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПериод(НовыйПериод)

	Объект.ПериодРегистрации = НовыйПериод;
	
	ЗаполнитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОрганизацииНаСервере()
	
	УстановитьПериодРегистрации();
	
	ЗаполнитьФормуНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПериодРегистрации()
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Возврат;
	КонецЕсли;
	
	БлижайшийНалоговыйПериод = ИнтерфейсыВзаимодействияБРО.БлижайшийНалоговыйПериод(
		Объект.Организация,
		КонецКвартала(ОбщегоНазначения.ТекущаяДатаПользователя()),
		Перечисления.ВариантыРасширенногоПервогоНалоговогоПериода.РегистрацияВПоследние10ДнейКвартала,
		Перечисления.Периодичность.Квартал);
		
	Объект.ПериодРегистрации = БлижайшийНалоговыйПериод.Период;
	
КонецПроцедуры

#КонецОбласти
