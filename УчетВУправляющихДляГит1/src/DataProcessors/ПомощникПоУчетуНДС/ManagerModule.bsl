#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьМакетОткрытияПомощника(Организация, Период) Экспорт
	
	МакетПомощника = Обработки.ПомощникПоУчетуНДС.ПолучитьМакет("ПерейтиКПомощнику");
	СекцияПомощника = МакетПомощника.ПолучитьОбласть("ПерейтиКПомощнику");
	РасшифровкаЯчейки = Новый Структура("ОткрытьПомощникПоУчетуНДС, Организация, Период");
	РасшифровкаЯчейки.Организация = Организация;
	РасшифровкаЯчейки.Период = Период;
	СекцияПомощника.Параметры.ПараметрыОткрытияПомощника = РасшифровкаЯчейки;
	
	Возврат(СекцияПомощника);
	
КонецФункции

Процедура ВыполнитьОбработкуНомеровСчетовФактур(Организация, Период) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(НачалоКвартала(Период)));
	Запрос.УстановитьПараметр("КонецПериода",  КонецДня(КонецКвартала(Период)));
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	НЕ СчетФактураВыданный.ПометкаУдаления
	|	И СчетФактураВыданный.Проведен
	|	И СчетФактураВыданный.Организация = &Организация
	|	И СчетФактураВыданный.Дата МЕЖДУ &НачалоПериода И &КонецПериода";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	
	Пока Выборка.Следующий() Цикл
		
		СчетФактураОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Попытка
			СчетФактураОбъект.Записать();
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось обработать номер счета-фактуры ""%1"" по причине:
					|%2'"), 
					Выборка.Ссылка,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,, 
				Выборка.Ссылка, ТекстСообщения);
			
		КонецПопытки
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Процедура ВыполнитьДействияПоПереходуНаРаздельныйУчетНДСНаСчете19(Организация, Период) Экспорт
	
	СтруктураПараметров = Новый Структура();
	
	СтруктураПараметров.Вставить("КонецКвартала",           Новый Граница(Период - 1, ВидГраницы.Включая));
	СтруктураПараметров.Вставить("Период",                  Период - 1);
	СтруктураПараметров.Вставить("Счета19КВычету",          БухгалтерскийУчет.МассивСубСчетов19НДСКВычету());
	СтруктураПараметров.Вставить("СубконтоСчета19",         БухгалтерскийУчет.МассивСубконтоСчета19());
	СтруктураПараметров.Вставить("СубконтоСчета1907",       БухгалтерскийУчет.МассивСубконтоСчета1907());
	СтруктураПараметров.Вставить("УчетПоСпособамНаСчете19", БухгалтерскийУчет.УчетПоСпособамНаСчете19());
	СтруктураПараметров.Вставить("Организация",             Организация);
	СтруктураПараметров.Вставить("Счет1907",                ПланыСчетов.Хозрасчетный.НДСПоТоварамРеализованнымПоСтавке0);
	СтруктураПараметров.Вставить("ДокументыОперации",       Новый Массив);
	СтруктураПараметров.Вставить("Содержание", 
		НСтр("ru = 'Переход на раздельный учет НДС (на счете 19): регистр бухгалтерии ""Хозрасчетный"": (перевод остатков по счету 19).'"));
	СтруктураПараметров.Вставить("Комментарий", 
		НСтр("ru = '#Документ создан автоматически при переходе на раздельный учет НДС (на счете 19), операция - ""перевод остатков по счету 19""'"));
	
	// Операция 1 - списание НДС с 19 по пустому субконто "Способ учета НДС", формирование прихода
	// по таблице НДСНа19КВычету - со значением "Принимается к вычету" на тот же счет
	// по таблице НДСНа19Экспорт - со значением "Реализация по ставке 0%" на счет 19.03
	
	СформироватьДвиженияПоСчету19(СтруктураПараметров);
	
	// Операция 2 - обнуление регистра НДС по приобретенным ценностям по данным таблицы НДСПоПриобретеннымЦенностям
	// и формирование остатков по регистру "Раздельный учет НДС" по данным таблицы НДСПоПриобретеннымЦенностям
	
	СтруктураПараметров.Содержание  = 
		НСтр("ru = 'Переход на раздельный учет НДС (на счете 19): ввод остатков по специальным регистрам НДС'");
	СтруктураПараметров.Комментарий = 
		НСтр("ru = '#Документ создан автоматически при переходе на раздельный учет НДС (на счете 19), операция - ""ввод остатков по специальным регистрам НДС""'");
	
	СформироватьДвиженияНДСПоПриобретеннымЦенностям(СтруктураПараметров);
	
	// Операция 3 - обнуление остатков по регистру "НДС предъявленный" соответствующих остаткам регистра
	// "НДС предъявленный, реализация 0"
	
	СформироватьДвиженияНДСПредъявленный(СтруктураПараметров);
	
	Для каждого ДокументОперации Из СтруктураПараметров.ДокументыОперации Цикл
	
		РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.ЗафиксироватьФактВыполненияРегламентнойОперации(Период,
			Организация,
			ДокументОперации,
			Перечисления.РегламентныеОперации.ПереходНаРаздельныйУчетНДСНаСчете19,
			Истина);
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтменитьДействияПоПереходуНаРаздельныйУчетНДСНаСчете19(Организация, Период, СообщенияОбОшибках = Неопределено) Экспорт
	
	ПометитьНаУдалениеСозданныеПоОперацииДокументы(
		Организация, 
		Период, 
		Перечисления.РегламентныеОперации.ПереходНаРаздельныйУчетНДСНаСчете19,
		СообщенияОбОшибках);
	
КонецПроцедуры

Процедура ВыполнитьДействияПоОтключениюРаздельногоУчетаНДС(Организация, Период) Экспорт
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("КонецКвартала",           Новый Граница(Период - 1, ВидГраницы.Включая));
	СтруктураПараметров.Вставить("Период",                  Период - 1);
	СтруктураПараметров.Вставить("Счета19КВычету",          БухгалтерскийУчет.МассивСубСчетов19НДСКВычету());
	СтруктураПараметров.Вставить("СубконтоСчета19",         БухгалтерскийУчет.МассивСубконтоСчета19());
	СтруктураПараметров.Вставить("Организация",             Организация);
	СтруктураПараметров.Вставить("ДокументыОперации",       Новый Массив);
	
	Если БухгалтерскийУчет.УчетПоСпособамНаСчете19() Тогда
		СтруктураПараметров.Вставить("Содержание", 
			НСтр("ru = 'Отключение раздельного учета НДС: регистр бухгалтерии ""Хозрасчетный"": (перевод остатков по счету 19).'"));
		СтруктураПараметров.Вставить("Комментарий",
			НСтр("ru = '#Документ создан автоматически при отключении раздельного учета НДС, операция - ""перевод остатков по счету 19""'"));
		ОчиститьСубконтоСпособыУчета(СтруктураПараметров);
	КонецЕсли;
	
	СтруктураПараметров.Вставить("Содержание", 
		НСтр("ru = 'Отключение раздельного учета НДС: списание остатков по регистрам НДС.'"));
	СтруктураПараметров.Вставить("Комментарий",
		НСтр("ru = '#Документ создан автоматически при отключении раздельного учета НДС, операция - ""списание остатков по регистрам НДС""'"));
	
	СнятьБлокировкуВычетаНДСПоТоварам(СтруктураПараметров);
	СнятьБлокировкуВычетаНДСПоУслугам(СтруктураПараметров);
	СписатьОстаткиПоРегиструНДСПоПриобретеннымЦенностям(СтруктураПараметров);
	СписатьОстаткиПоРегиструНДСРаздельныйУчет(СтруктураПараметров);
	
	Для каждого ДокументОперации Из СтруктураПараметров.ДокументыОперации Цикл
		
		РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.ЗафиксироватьФактВыполненияРегламентнойОперации(
			Период,
			Организация,
			ДокументОперации,
			Перечисления.РегламентныеОперации.ОтключениеРаздельногоУчетаНДС,
			Истина);
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтменитьДействияПоОтключениюРаздельногоУчетаНДС(Организация, Период, СообщенияОбОшибках = Неопределено) Экспорт
	
	ПометитьНаУдалениеСозданныеПоОперацииДокументы(
		Организация, 
		Период, 
		Перечисления.РегламентныеОперации.ОтключениеРаздельногоУчетаНДС, 
		СообщенияОбОшибках);
	
КонецПроцедуры

#КонецОбласти

#Область ПереходНаРаздельныйУчетНДСНаСчете19

Процедура СформироватьДвиженияПоСчету19(СтруктураПараметров)

	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ХозрасчетныйОстатки.Счет КАК СчетДт,
	|	ХозрасчетныйОстатки.Счет КАК СчетКт,
	|	ХозрасчетныйОстатки.Субконто1 КАК СубконтоДт1,
	|	ХозрасчетныйОстатки.Субконто2 КАК СубконтоДт2,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.ПринимаетсяКВычету) КАК СубконтоДт3,
	|	ХозрасчетныйОстатки.Субконто1 КАК СубконтоКт1,
	|	ХозрасчетныйОстатки.Субконто2 КАК СубконтоКт2,
	|	ХозрасчетныйОстатки.Субконто3 КАК СубконтоКт3,
	|	ХозрасчетныйОстатки.Организация КАК Организация,
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонецКвартала,
	|			Счет В (&Счета19КВычету),
	|			&СубконтоСчета19,
	|			Организация = &Организация
	|				И Субконто3 = ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.ПустаяСсылка)) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстатокДт <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НДСПредъявленныйРеализация0Остатки.СчетУчетаНДС,
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.ДляОперацийПо0),
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.Субконто3,
	|	ХозрасчетныйОстатки.Организация,
	|	НДСПредъявленныйРеализация0Остатки.НДСОстаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецКвартала, Счет = &Счет1907, &СубконтоСчета1907, Организация = &Организация) КАК ХозрасчетныйОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(&КонецКвартала, Организация = &Организация) КАК НДСПредъявленныйРеализация0Остатки
	|		ПО ХозрасчетныйОстатки.Субконто2 = НДСПредъявленныйРеализация0Остатки.СчетФактура
	|			И ХозрасчетныйОстатки.Субконто3 = НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки
	|ГДЕ
	|	НДСПредъявленныйРеализация0Остатки.НДСОстаток <> 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НДСпоПриобретеннымМПЗ),
	|	ХозрасчетныйОстатки.Счет,
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.ДляОперацийПо0),
	|	ХозрасчетныйОстатки.Субконто1,
	|	ХозрасчетныйОстатки.Субконто2,
	|	ХозрасчетныйОстатки.Субконто3,
	|	ХозрасчетныйОстатки.Организация,
	|	ХозрасчетныйОстатки.СуммаОстатокДт - НДСПредъявленныйРеализация0Остатки.НДСОстаток
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонецКвартала, Счет = &Счет1907, &СубконтоСчета1907, Организация = &Организация) КАК ХозрасчетныйОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(&КонецКвартала, Организация = &Организация) КАК НДСПредъявленныйРеализация0Остатки
	|		ПО ХозрасчетныйОстатки.Субконто2 = НДСПредъявленныйРеализация0Остатки.СчетФактура
	|			И ХозрасчетныйОстатки.Субконто3 = НДСПредъявленныйРеализация0Остатки.ДокументОтгрузки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстатокДт - НДСПредъявленныйРеализация0Остатки.НДСОстаток <> 0";
	
	ОписаниеПараметровЗапроса = Запрос.НайтиПараметры();
	Для каждого Параметр Из ОписаниеПараметровЗапроса Цикл
		Запрос.УстановитьПараметр(Параметр.Имя, СтруктураПараметров[Параметр.Имя]);
	КонецЦикла; 
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		НачатьТранзакцию();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Попытка
			ОперацияОбъект               = Документы.ОперацияБух.СоздатьДокумент();
			ОперацияОбъект.Дата          = СтруктураПараметров.Период;
			ОперацияОбъект.Организация   = СтруктураПараметров.Организация;
			ОперацияОбъект.Ответственный = Пользователи.ТекущийПользователь();
			ОперацияОбъект.Содержание    = СтруктураПараметров.Содержание;
			ОперацияОбъект.Комментарий   = СтруктураПараметров.Комментарий;
			// Операция переноса остатков не должна сдвигать последовательность на последний день периода перед переходом,
			// иначе "Закрытие месяца" за прошлый месяц станет неактуальным и сдвинет актуальность операций перехода назад.
			ОперацияОбъект.ДополнительныеСвойства.Вставить("ПроведенВХронологическойПоследовательности", Истина);
			ОперацияОбъект.Записать();
		Исключение
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
		Движение = ОперацияОбъект.Движения.Хозрасчетный;
		Движение.Записывать = Истина;
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Запись = Движение.Добавить();
			Запись.Период      = СтруктураПараметров.Период;
			Запись.Организация = ВыборкаДетальныеЗаписи.Организация;
			
			Запись.СчетДт = ВыборкаДетальныеЗаписи.СчетДт;
			Запись.СчетКт = ВыборкаДетальныеЗаписи.СчетКт;
			
			БухгалтерскийУчет.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, 1, ВыборкаДетальныеЗаписи.СубконтоДт1);
			БухгалтерскийУчет.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, 2, ВыборкаДетальныеЗаписи.СубконтоДт2);
			БухгалтерскийУчет.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, 3, ВыборкаДетальныеЗаписи.СубконтоДт3);
			
			БухгалтерскийУчет.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, 1, ВыборкаДетальныеЗаписи.СубконтоКт1);
			БухгалтерскийУчет.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, 2, ВыборкаДетальныеЗаписи.СубконтоКт2);
			БухгалтерскийУчет.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, 3, ВыборкаДетальныеЗаписи.СубконтоКт3);
			
			Запись.Сумма = ВыборкаДетальныеЗаписи.Сумма;
			
		КонецЦикла;
		
		Попытка
			
			ОперацияОбъект.Движения.Записать();
			// Запоминаем созданный документ
			Если СтруктураПараметров.Свойство("ДокументыОперации") Тогда	
				СтруктураПараметров.ДокументыОперации.Добавить(ОперацияОбъект.Ссылка);
			КонецЕсли;
		Исключение
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
		ЗафиксироватьТранзакцию();
		
		СформироватьДвиженияПоСчету19(СтруктураПараметров);
		
	Иначе
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура СформироватьДвиженияНДСПоПриобретеннымЦенностям(СтруктураПараметров)

	Результат = ОстаткиНДСПоПриобретеннымЦенностям(СтруктураПараметров);
	
	Если НЕ Результат.Пустой() Тогда
		
		НачатьТранзакцию();
		СтруктураПараметров.Вставить("РезультатЗапроса", Результат);
		СтруктураПараметров.Вставить("ИмяРегистра", "НДСПоПриобретеннымЦенностям");
		
		СформироватьДокументОперацияБух(СтруктураПараметров);
		
		ТаблицаДвижений = ПодготовитьТаблицуДляОтраженияВРегистреРаздельныйУчетНДС(СтруктураПараметров);
		СтруктураПараметров.Вставить("РезультатЗапроса", Неопределено);
		СтруктураПараметров.Вставить("ТаблицаДвижений", ТаблицаДвижений);
		СтруктураПараметров.Вставить("ИмяРегистра", "НДСРаздельныйУчет");
		
		СформироватьДокументОперацияБух(СтруктураПараметров);
		
		ЗафиксироватьТранзакцию();
		
		СформироватьДвиженияНДСПоПриобретеннымЦенностям(СтруктураПараметров);
		
	Иначе
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

Процедура СформироватьДвиженияНДСПредъявленный(СтруктураПараметров)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	НДСПредъявленный0.Организация,
	|	НДСПредъявленный0.СчетФактура,
	|	НДСПредъявленный0.ВидЦенности,
	|	НДСПредъявленный0.СтавкаНДС,
	|	НДСПредъявленный0.СчетУчетаНДС,
	|	-НДСПредъявленный0.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	-НДСПредъявленный0.НДСОстаток КАК НДС,
	|	НДСПредъявленный.Поставщик,
	|	НДСПредъявленный.ДоговорКонтрагента,
	|	НДСПредъявленный.ИсправленныйСчетФактура
	|ИЗ
	|	РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(&КонецКвартала, Организация = &Организация) КАК НДСПредъявленный0
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленный.Остатки(&КонецКвартала, Организация = &Организация) КАК НДСПредъявленный
	|		ПО НДСПредъявленный0.СчетФактура = НДСПредъявленный.СчетФактура
	|			И НДСПредъявленный0.ВидЦенности = НДСПредъявленный.ВидЦенности
	|			И НДСПредъявленный0.СтавкаНДС = НДСПредъявленный.СтавкаНДС
	|			И НДСПредъявленный0.СчетУчетаНДС = НДСПредъявленный.СчетУчетаНДС
	|ГДЕ
	|	(НДСПредъявленный0.СуммаБезНДСОстаток <> 0
	|			ИЛИ НДСПредъявленный0.НДСОстаток <> 0)";
	
	ОписаниеПараметровЗапроса = Запрос.НайтиПараметры();
	Для каждого Параметр Из ОписаниеПараметровЗапроса Цикл
		Запрос.УстановитьПараметр(Параметр.Имя, СтруктураПараметров[Параметр.Имя]);
	КонецЦикла; 
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		НачатьТранзакцию();
		
		СтруктураПараметров.Вставить("РезультатЗапроса", Результат);
		СтруктураПараметров.Вставить("ИмяРегистра", "НДСПредъявленный");
		
		СформироватьДокументОперацияБух(СтруктураПараметров);
		
		ЗафиксироватьТранзакцию();
		
	Иначе
		Возврат;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОтключениеРаздельногоУчетаНДС

Процедура СнятьБлокировкуВычетаНДСПоТоварам(СтруктураПараметров)
	
	Результат = ЗаблокированныйНДСПоТоварам(СтруктураПараметров);
	
	Если НЕ Результат.Пустой() Тогда
		
		НачатьТранзакцию();
		
		СтруктураПараметров.Вставить("РезультатЗапроса", Результат);
		СтруктураПараметров.Вставить("ИмяРегистра", "НДСРаздельныйУчет");
		
		СформироватьДокументОперацияБух(СтруктураПараметров);
		
		ТаблицаДвижений = ПодготовитьТаблицуНДСПредъявленный(Результат);
		
		СтруктураПараметров.Вставить("РезультатЗапроса", Неопределено);
		СтруктураПараметров.Вставить("ТаблицаДвижений", ТаблицаДвижений);
		СтруктураПараметров.Вставить("ИмяРегистра", "НДСПредъявленный");
		
		СформироватьДокументОперацияБух(СтруктураПараметров);
		
		ЗафиксироватьТранзакцию();
		
		СнятьБлокировкуВычетаНДСПоТоварам(СтруктураПараметров);
		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура СнятьБлокировкуВычетаНДСПоУслугам(СтруктураПараметров)
	
	Результат = ЗаблокированныйНДСПоУслугам(СтруктураПараметров);
	
	Если НЕ Результат.Пустой() Тогда
		
		НачатьТранзакцию();
		
		СтруктураПараметров.Вставить("РезультатЗапроса", Результат);
		СтруктураПараметров.Вставить("ИмяРегистра", "НДСПредъявленныйРеализация0");
		
		СформироватьДокументОперацияБух(СтруктураПараметров);
		
		ТаблицаДвижений = ПодготовитьТаблицуНДСПредъявленный(Результат);
		
		СтруктураПараметров.Вставить("РезультатЗапроса", Неопределено);
		СтруктураПараметров.Вставить("ТаблицаДвижений", ТаблицаДвижений);
		СтруктураПараметров.Вставить("ИмяРегистра", "НДСПредъявленный");
		
		СформироватьДокументОперацияБух(СтруктураПараметров);
		
		ЗафиксироватьТранзакцию();
		
		СнятьБлокировкуВычетаНДСПоУслугам(СтруктураПараметров);
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаблокированныйНДСПоТоварам(СтруктураПараметров)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	НДСРаздельныйУчет.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСРаздельныйУчет.НДСОстаток КАК НДС,
	|	КлючиАналитикиУчетаНДС.СчетФактура КАК СчетФактура,
	|	КлючиАналитикиУчетаНДС.СчетУчетаНДС КАК СчетУчетаНДС,
	|	КлючиАналитикиУчетаНДС.ВидЦенности КАК ВидЦенности,
	|	КлючиАналитикиУчетаНДС.СтавкаНДС КАК СтавкаНДС,
	|	КлючиАналитикиУчетаНДС.Организация КАК Организация,
	|	НДСРаздельныйУчет.АналитикаУчетаЗатрат КАК АналитикаУчетаЗатрат,
	|	НДСРаздельныйУчет.АналитикаУчетаНДС КАК АналитикаУчетаНДС,
	|	НДСРаздельныйУчет.Партия КАК Партия,
	|	НДСРаздельныйУчет.СпособУчетаНДС КАК СпособУчетаНДС,
	|	НДСРаздельныйУчет.КоличествоОстаток КАК КоличествоОстаток
	|ПОМЕСТИТЬ ВТНДСЗаблокированныйПоТоварам
	|ИЗ
	|	РегистрНакопления.НДСРаздельныйУчет.Остатки(
	|			&КонецКвартала,
	|			Организация = &Организация
	|				И СпособУчетаНДС = ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.ДляОперацийПо0)) КАК НДСРаздельныйУчет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаНДС КАК КлючиАналитикиУчетаНДС
	|		ПО НДСРаздельныйУчет.АналитикаУчетаНДС = КлючиАналитикиУчетаНДС.Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючиАналитикиУчетаНДС.СчетФактура,
	|	КлючиАналитикиУчетаНДС.СчетУчетаНДС,
	|	КлючиАналитикиУчетаНДС.ВидЦенности,
	|	КлючиАналитикиУчетаНДС.СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(НДСПредъявленный.Поставщик) КАК Поставщик,
	|	МАКСИМУМ(НДСПредъявленный.ДоговорКонтрагента) КАК ДоговорКонтрагента,
	|	МАКСИМУМ(НДСПредъявленный.ДатаОплаты) КАК ДатаОплаты,
	|	МАКСИМУМ(НДСПредъявленный.ИсправленныйСчетФактура) КАК ИсправленныйСчетФактура,
	|	НДСПредъявленный.СчетФактура,
	|	НДСПредъявленный.СчетУчетаНДС,
	|	НДСПредъявленный.ВидЦенности,
	|	НДСПредъявленный.СтавкаНДС
	|ПОМЕСТИТЬ ДополнительныеСведения
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНДСЗаблокированныйПоТоварам КАК НДСЗаблокированныйПоТоварам
	|		ПО НДСПредъявленный.СчетФактура = НДСЗаблокированныйПоТоварам.СчетФактура
	|			И НДСПредъявленный.СчетУчетаНДС = НДСЗаблокированныйПоТоварам.СчетУчетаНДС
	|			И НДСПредъявленный.ВидЦенности = НДСЗаблокированныйПоТоварам.ВидЦенности
	|			И НДСПредъявленный.СтавкаНДС = НДСЗаблокированныйПоТоварам.СтавкаНДС
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСПредъявленный.СчетФактура,
	|	НДСПредъявленный.СчетУчетаНДС,
	|	НДСПредъявленный.ВидЦенности,
	|	НДСПредъявленный.СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	НДСЗаблокированныйПоТоварам.Организация,
	|	НДСЗаблокированныйПоТоварам.СчетФактура,
	|	НДСЗаблокированныйПоТоварам.СчетУчетаНДС,
	|	НДСЗаблокированныйПоТоварам.ВидЦенности,
	|	НДСЗаблокированныйПоТоварам.СтавкаНДС,
	|	НДСЗаблокированныйПоТоварам.АналитикаУчетаЗатрат КАК АналитикаУчетаЗатрат,
	|	НДСЗаблокированныйПоТоварам.АналитикаУчетаНДС КАК АналитикаУчетаНДС,
	|	НДСЗаблокированныйПоТоварам.Партия КАК Партия,
	|	НДСЗаблокированныйПоТоварам.СпособУчетаНДС КАК СпособУчетаНДС,
	|	- НДСЗаблокированныйПоТоварам.СуммаБезНДС КАК СуммаБезНДС,
	|	- НДСЗаблокированныйПоТоварам.НДС КАК НДС,
	|	- НДСЗаблокированныйПоТоварам.КоличествоОстаток КАК Количество,
	|	НДСЗаблокированныйПоТоварам.СуммаБезНДС КАК СуммаБезНДСПриход,
	|	НДСЗаблокированныйПоТоварам.НДС КАК НДСПриход,
	|	ДополнительныеСведения.Поставщик,
	|	ДополнительныеСведения.ДоговорКонтрагента,
	|	ДополнительныеСведения.ДатаОплаты,
	|	ДополнительныеСведения.ИсправленныйСчетФактура
	|ИЗ
	|	ВТНДСЗаблокированныйПоТоварам КАК НДСЗаблокированныйПоТоварам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДополнительныеСведения КАК ДополнительныеСведения
	|		ПО (ДополнительныеСведения.СчетФактура = НДСЗаблокированныйПоТоварам.СчетФактура)
	|			И (ДополнительныеСведения.СчетУчетаНДС = НДСЗаблокированныйПоТоварам.СчетУчетаНДС)
	|			И (ДополнительныеСведения.ВидЦенности = НДСЗаблокированныйПоТоварам.ВидЦенности)
	|			И (ДополнительныеСведения.СтавкаНДС = НДСЗаблокированныйПоТоварам.СтавкаНДС)";
	
	ОписаниеПараметровЗапроса = Запрос.НайтиПараметры();
	Для каждого Параметр Из ОписаниеПараметровЗапроса Цикл
		Запрос.УстановитьПараметр(Параметр.Имя, СтруктураПараметров[Параметр.Имя]);
	КонецЦикла; 
	
	Результат = Запрос.Выполнить();
	Возврат Результат;
	
КонецФункции

Функция ЗаблокированныйНДСПоУслугам(СтруктураПараметров)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	НДСПредъявленныйРеализация0.Организация,
	|	НДСПредъявленныйРеализация0.СчетФактура,
	|	НДСПредъявленныйРеализация0.Состояние,
	|	НДСПредъявленныйРеализация0.ДокументОтгрузки,
	|	НДСПредъявленныйРеализация0.ВидЦенности,
	|	НДСПредъявленныйРеализация0.СтавкаНДС,
	|	НДСПредъявленныйРеализация0.СчетУчетаНДС,
	|	НДСПредъявленныйРеализация0.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	НДСПредъявленныйРеализация0.НДСОстаток КАК НДС
	|ПОМЕСТИТЬ ВТНДСЗаблокированныйПоУслугам
	|ИЗ
	|	РегистрНакопления.НДСПредъявленныйРеализация0.Остатки(
	|			&КонецКвартала,
	|			Организация = &Организация
	|				И ДокументОтгрузки = НЕОПРЕДЕЛЕНО) КАК НДСПредъявленныйРеализация0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НДСПредъявленныйРеализация0.СчетФактура,
	|	НДСПредъявленныйРеализация0.СчетУчетаНДС,
	|	НДСПредъявленныйРеализация0.ВидЦенности,
	|	НДСПредъявленныйРеализация0.СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(НДСПредъявленный.Поставщик) КАК Поставщик,
	|	МАКСИМУМ(НДСПредъявленный.ДоговорКонтрагента) КАК ДоговорКонтрагента,
	|	МАКСИМУМ(НДСПредъявленный.ДатаОплаты) КАК ДатаОплаты,
	|	МАКСИМУМ(НДСПредъявленный.ИсправленныйСчетФактура) КАК ИсправленныйСчетФактура,
	|	НДСПредъявленный.СчетФактура,
	|	НДСПредъявленный.СчетУчетаНДС,
	|	НДСПредъявленный.ВидЦенности,
	|	НДСПредъявленный.СтавкаНДС
	|ПОМЕСТИТЬ ДополнительныеСведения
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный КАК НДСПредъявленный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНДСЗаблокированныйПоУслугам КАК ВТНДСЗаблокированныйПоУслугам
	|		ПО НДСПредъявленный.СчетФактура = ВТНДСЗаблокированныйПоУслугам.СчетФактура
	|			И НДСПредъявленный.СчетУчетаНДС = ВТНДСЗаблокированныйПоУслугам.СчетУчетаНДС
	|			И НДСПредъявленный.ВидЦенности = ВТНДСЗаблокированныйПоУслугам.ВидЦенности
	|			И НДСПредъявленный.СтавкаНДС = ВТНДСЗаблокированныйПоУслугам.СтавкаНДС
	|
	|СГРУППИРОВАТЬ ПО
	|	НДСПредъявленный.СчетФактура,
	|	НДСПредъявленный.СчетУчетаНДС,
	|	НДСПредъявленный.ВидЦенности,
	|	НДСПредъявленный.СтавкаНДС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&Период КАК Период,
	|	НДСЗаблокированныйПоУслугам.Организация,
	|	НДСЗаблокированныйПоУслугам.СчетФактура,
	|	НДСЗаблокированныйПоУслугам.Состояние,
	|	НДСЗаблокированныйПоУслугам.ДокументОтгрузки,
	|	НДСЗаблокированныйПоУслугам.ВидЦенности,
	|	НДСЗаблокированныйПоУслугам.СтавкаНДС,
	|	НДСЗаблокированныйПоУслугам.СчетУчетаНДС,
	|	-НДСЗаблокированныйПоУслугам.СуммаБезНДС КАК СуммаБезНДС,
	|	-НДСЗаблокированныйПоУслугам.НДС КАК НДС,
	|	НДСЗаблокированныйПоУслугам.СуммаБезНДС КАК СуммаБезНДСПриход,
	|	НДСЗаблокированныйПоУслугам.НДС КАК НДСПриход,
	|	ДополнительныеСведения.Поставщик,
	|	ДополнительныеСведения.ДоговорКонтрагента,
	|	ДополнительныеСведения.ДатаОплаты,
	|	ДополнительныеСведения.ИсправленныйСчетФактура
	|ИЗ
	|	ВТНДСЗаблокированныйПоУслугам КАК НДСЗаблокированныйПоУслугам
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДополнительныеСведения КАК ДополнительныеСведения
	|		ПО (ДополнительныеСведения.СчетФактура = НДСЗаблокированныйПоУслугам.СчетФактура)
	|			И (ДополнительныеСведения.СчетУчетаНДС = НДСЗаблокированныйПоУслугам.СчетУчетаНДС)
	|			И (ДополнительныеСведения.ВидЦенности = НДСЗаблокированныйПоУслугам.ВидЦенности)
	|			И (ДополнительныеСведения.СтавкаНДС = НДСЗаблокированныйПоУслугам.СтавкаНДС)";
		
	ОписаниеПараметровЗапроса = Запрос.НайтиПараметры();
	Для каждого Параметр Из ОписаниеПараметровЗапроса Цикл
		Запрос.УстановитьПараметр(Параметр.Имя, СтруктураПараметров[Параметр.Имя]);
	КонецЦикла; 
	
	Результат = Запрос.Выполнить();
	Возврат Результат;

КонецФункции

Функция ПодготовитьТаблицуНДСПредъявленный(РезультатЗапроса)

	ТаблицаДвижений = РезультатЗапроса.Выгрузить();
	ТаблицаДвижений.Колонки.СуммаБезНДС.Имя = "СуммаБезНДССторно";
	ТаблицаДвижений.Колонки.НДС.Имя = "НДССторно";
	ТаблицаДвижений.Колонки.СуммаБезНДСПриход.Имя = "СуммаБезНДС";
	ТаблицаДвижений.Колонки.НДСПриход.Имя = "НДС";
	
	Возврат ТаблицаДвижений;

КонецФункции

Процедура ОчиститьСубконтоСпособыУчета(СтруктураПараметров)

	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	ХозрасчетныйОстатки.Счет КАК СчетДт,
	|	ХозрасчетныйОстатки.Субконто1 КАК СубконтоДт1,
	|	ХозрасчетныйОстатки.Субконто2 КАК СубконтоДт2,
	|	ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.ПустаяСсылка) КАК СубконтоДт3,
	|	ХозрасчетныйОстатки.Счет КАК СчетКт,
	|	ХозрасчетныйОстатки.Субконто1 КАК СубконтоКт1,
	|	ХозрасчетныйОстатки.Субконто2 КАК СубконтоКт2,
	|	ХозрасчетныйОстатки.Субконто3 КАК СубконтоКт3,
	|	ХозрасчетныйОстатки.Организация,
	|	ХозрасчетныйОстатки.СуммаОстатокДт КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&КонецКвартала,
	|			Счет В (&Счета19КВычету),
	|			&СубконтоСчета19,
	|			Организация = &Организация
	|				И Субконто3 <> ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.ПустаяСсылка)) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	ХозрасчетныйОстатки.СуммаОстатокДт <> 0";
	
	ОписаниеПараметровЗапроса = Запрос.НайтиПараметры();
	Для каждого Параметр Из ОписаниеПараметровЗапроса Цикл
		Запрос.УстановитьПараметр(Параметр.Имя, СтруктураПараметров[Параметр.Имя]);
	КонецЦикла; 
	
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		НачатьТранзакцию();
		
		ВыборкаДетальныеЗаписи = Результат.Выбрать();
		
		Попытка
			ОперацияОбъект               = Документы.ОперацияБух.СоздатьДокумент();
			ОперацияОбъект.Дата          = СтруктураПараметров.Период;
			ОперацияОбъект.Организация   = СтруктураПараметров.Организация;
			ОперацияОбъект.Ответственный = Пользователи.ТекущийПользователь();
			ОперацияОбъект.Содержание    = СтруктураПараметров.Содержание;
			ОперацияОбъект.Комментарий   = СтруктураПараметров.Комментарий;
			// Операция переноса остатков не должна сдвигать последовательность на последний день периода перед переходом,
			// иначе "Закрытие месяца" за прошлый месяц станет неактуальным и сдвинет актуальность операций перехода назад.
			ОперацияОбъект.ДополнительныеСвойства.Вставить("ПроведенВХронологическойПоследовательности", Истина);
			ОперацияОбъект.Записать();
		Исключение
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
		Движение = ОперацияОбъект.Движения.Хозрасчетный;
		Движение.Записывать = Истина;
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			
			Запись = Движение.Добавить();
			Запись.Период      = СтруктураПараметров.Период;
			Запись.Организация = ВыборкаДетальныеЗаписи.Организация;
			Запись.Сумма       = ВыборкаДетальныеЗаписи.Сумма;
			
			Запись.СчетДт = ВыборкаДетальныеЗаписи.СчетДт;
			БухгалтерскийУчет.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, 1, ВыборкаДетальныеЗаписи.СубконтоДт1);
			БухгалтерскийУчет.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, 2, ВыборкаДетальныеЗаписи.СубконтоДт2);
			БухгалтерскийУчет.УстановитьСубконто(Запись.СчетДт, Запись.СубконтоДт, 3, ВыборкаДетальныеЗаписи.СубконтоДт3);
			
			Запись.СчетКт = ВыборкаДетальныеЗаписи.СчетКт;
			БухгалтерскийУчет.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, 1, ВыборкаДетальныеЗаписи.СубконтоКт1);
			БухгалтерскийУчет.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, 2, ВыборкаДетальныеЗаписи.СубконтоКт2);
			БухгалтерскийУчет.УстановитьСубконто(Запись.СчетКт, Запись.СубконтоКт, 3, ВыборкаДетальныеЗаписи.СубконтоКт3);
			
		КонецЦикла;
		
		Попытка
			
			ОперацияОбъект.Движения.Записать();
			// Запоминаем созданный документ
			Если СтруктураПараметров.Свойство("ДокументыОперации") Тогда
				СтруктураПараметров.ДокументыОперации.Добавить(ОперацияОбъект.Ссылка);
			КонецЕсли;
		Исключение
			ВызватьИсключение ОписаниеОшибки();
		КонецПопытки;
		
		ЗафиксироватьТранзакцию();
		
		ОчиститьСубконтоСпособыУчета(СтруктураПараметров);
		
	Иначе
		Возврат;
	КонецЕсли;

КонецПроцедуры

Процедура СписатьОстаткиПоРегиструНДСПоПриобретеннымЦенностям(СтруктураПараметров)

	Результат = ОстаткиНДСПоПриобретеннымЦенностям(СтруктураПараметров);
	
	Если НЕ Результат.Пустой() Тогда
		
		НачатьТранзакцию();
		
		СтруктураПараметров.Вставить("РезультатЗапроса", Результат);
		СтруктураПараметров.Вставить("ИмяРегистра", "НДСПоПриобретеннымЦенностям");
		
		СформироватьДокументОперацияБух(СтруктураПараметров);
		
		ЗафиксироватьТранзакцию();
		
		СписатьОстаткиПоРегиструНДСПоПриобретеннымЦенностям(СтруктураПараметров);
		
	Иначе
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

Процедура СписатьОстаткиПоРегиструНДСРаздельныйУчет(СтруктураПараметров)

	Результат = ОстаткиНДСРаздельныйУчет(СтруктураПараметров);
	
	Если НЕ Результат.Пустой() Тогда
		
		НачатьТранзакцию();
		
		СтруктураПараметров.Вставить("РезультатЗапроса", Результат);
		СтруктураПараметров.Вставить("ИмяРегистра", "НДСРаздельныйУчет");
		
		СформироватьДокументОперацияБух(СтруктураПараметров);
		
		ЗафиксироватьТранзакцию();
		
		СписатьОстаткиПоРегиструНДСРаздельныйУчет(СтруктураПараметров);
		
	Иначе
		Возврат;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область ПрочиеПроцедурыИФункции

Функция РазрешеноИзменениеОперацииБух(Организация, Дата, СообщенияОбОшибках = Неопределено)

	ОперацияОбъект             = Документы.ОперацияБух.СоздатьДокумент();
	ОперацияОбъект.Дата        = Дата;
	ОперацияОбъект.Организация = Организация;
	
	Отказ = Ложь;
	ДатыЗапретаИзменения.ПроверитьДатуЗапретаИзмененияПередЗаписьюДокумента(
		ОперацияОбъект, Отказ, РежимЗаписиДокумента.Запись, РежимПроведенияДокумента.Неоперативный);
	Если Отказ Тогда
		СообщенияОбОшибках = Новый Массив(ПолучитьСообщенияПользователю(Истина));
	КонецЕсли;
		
	Возврат НЕ Отказ;

КонецФункции

Процедура СформироватьДокументОперацияБух(СтруктураПараметров)

	Попытка
		
		ОперацияОбъект               = Документы.ОперацияБух.СоздатьДокумент();
		ОперацияОбъект.Дата          = СтруктураПараметров.Период;
		ОперацияОбъект.Организация   = СтруктураПараметров.Организация;
		ОперацияОбъект.Ответственный = Пользователи.ТекущийПользователь();
		ОперацияОбъект.Содержание    = СтруктураПараметров.Содержание;
		ОперацияОбъект.Комментарий   = СтруктураПараметров.Комментарий;
		// Операция переноса остатков не должна сдвигать последовательность на последний день периода перед переходом,
		// иначе "Закрытие месяца" за прошлый месяц станет неактуальным и сдвинет актуальность операций перехода назад.
		ОперацияОбъект.ДополнительныеСвойства.Вставить("ПроведенВХронологическойПоследовательности", Истина);
		ОперацияОбъект.Записать();
		// Запоминаем созданный документ
		Если СтруктураПараметров.Свойство("ДокументыОперации") Тогда
			СтруктураПараметров.ДокументыОперации.Добавить(ОперацияОбъект.Ссылка);
		КонецЕсли;
		
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;
	
	НаборЗаписей = ОперацияОбъект.Движения[СтруктураПараметров.ИмяРегистра];
	НаборЗаписей.Записывать = Истина;
	
	Если СтруктураПараметров.РезультатЗапроса <> Неопределено Тогда
	
		ВыборкаДетальныеЗаписи = СтруктураПараметров.РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, ВыборкаДетальныеЗаписи);
		КонецЦикла;
		
	ИначеЕсли СтруктураПараметров.ТаблицаДвижений <> Неопределено Тогда
		
		Для каждого СтрокаДвижения Из СтруктураПараметров.ТаблицаДвижений Цикл
			Запись = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Запись, СтрокаДвижения);
		КонецЦикла;
		
	КонецЕсли;
	
	Попытка
		ОперацияОбъект.Движения.Записать();
	Исключение
		ВызватьИсключение ОписаниеОшибки();
	КонецПопытки;

КонецПроцедуры

Процедура ПометитьНаУдалениеСозданныеПоОперацииДокументы(Организация, Период, РегламентнаяОперация, СообщенияОбОшибках = Неопределено)
	
	Если НЕ РазрешеноИзменениеОперацииБух(Организация, Период - 1, СообщенияОбОшибках) Тогда
		Возврат;
	КонецЕсли;
	
	Набор = РегистрыСведений.ВыполнениеРегламентныхОперацийНДС.СоздатьНаборЗаписей();
	Набор.Отбор.ПериодРегистрации.Установить(Период);
	Набор.Отбор.Организация.Установить(Организация);
	Набор.Отбор.РегламентнаяОперация.Установить(РегламентнаяОперация);
	
	Набор.Прочитать();
	
	НачатьТранзакцию();
	
	Для каждого СтрокаНабора Из Набор Цикл
		
		ДокументОперации = СтрокаНабора.РегламентныйДокумент;
		
		Если ЗначениеЗаполнено(ДокументОперации)
			И ТипЗнч(ДокументОперации) = Тип("ДокументСсылка.ОперацияБух") Тогда
			
			ДокументОбъект = ДокументОперации.ПолучитьОбъект();
			
			Попытка
				ДокументОбъект.Заблокировать();
				ДокументОбъект.ПометкаУдаления = Истина;
				ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение ОписаниеОшибки();
			КонецПопытки;
			
		КонецЕсли; 
	КонецЦикла;
	
	Набор.Очистить();
	Набор.Записать();
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

Функция ОстаткиНДСПоПриобретеннымЦенностям(СтруктураПараметров)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	&Период КАК Период,
	|	НДСПоПриобретеннымЦенностямОстатки.Организация,
	|	НДСПоПриобретеннымЦенностямОстатки.СчетУчета,
	|	НДСПоПриобретеннымЦенностямОстатки.Номенклатура,
	|	НДСПоПриобретеннымЦенностямОстатки.Склад,
	|	НДСПоПриобретеннымЦенностямОстатки.Партия,
	|	НДСПоПриобретеннымЦенностямОстатки.СчетФактура,
	|	НДСПоПриобретеннымЦенностямОстатки.НДСВключенВСтоимость,
	|	ВЫБОР
	|		КОГДА НДСПоПриобретеннымЦенностямОстатки.НДСВключенВСтоимость
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.УчитываетсяВCтоимости)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыУчетаНДС.ПринимаетсяКВычету)
	|	КОНЕЦ КАК СпособУчетаНДС,
	|	НДСПоПриобретеннымЦенностямОстатки.ВидЦенности,
	|	НДСПоПриобретеннымЦенностямОстатки.СчетУчетаНДС,
	|	НДСПоПриобретеннымЦенностямОстатки.СтавкаНДС,
	|	-НДСПоПриобретеннымЦенностямОстатки.КоличествоОстаток КАК Количество,
	|	-НДСПоПриобретеннымЦенностямОстатки.СтоимостьОстаток КАК Стоимость,
	|	НДСПоПриобретеннымЦенностямОстатки.СтоимостьОстаток - НДСПоПриобретеннымЦенностямОстатки.НДСОстаток КАК СуммаБезНДС,
	|	-НДСПоПриобретеннымЦенностямОстатки.НДСОстаток КАК НДС
	|ИЗ
	|	РегистрНакопления.НДСПоПриобретеннымЦенностям.Остатки(&КонецКвартала, Организация = &Организация) КАК НДСПоПриобретеннымЦенностямОстатки
	|ГДЕ
	|	(НДСПоПриобретеннымЦенностямОстатки.КоличествоОстаток <> 0
	|			ИЛИ НДСПоПриобретеннымЦенностямОстатки.СтоимостьОстаток <> 0
	|			ИЛИ НДСПоПриобретеннымЦенностямОстатки.НДСОстаток <> 0)";
	
	ОписаниеПараметровЗапроса = Запрос.НайтиПараметры();
	Для каждого Параметр Из ОписаниеПараметровЗапроса Цикл
		Запрос.УстановитьПараметр(Параметр.Имя, СтруктураПараметров[Параметр.Имя]);
	КонецЦикла; 
	
	Результат = Запрос.Выполнить();
	Возврат Результат;

КонецФункции

Функция ОстаткиНДСРаздельныйУчет(СтруктураПараметров)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1000
	|	&Период КАК Период,
	|	НДСРаздельныйУчетОстатки.Организация,
	|	НДСРаздельныйУчетОстатки.АналитикаУчетаЗатрат,
	|	НДСРаздельныйУчетОстатки.АналитикаУчетаНДС,
	|	НДСРаздельныйУчетОстатки.Партия,
	|	НДСРаздельныйУчетОстатки.СпособУчетаНДС,
	|	-НДСРаздельныйУчетОстатки.КоличествоОстаток КАК Количество,
	|	-НДСРаздельныйУчетОстатки.СуммаБезНДСОстаток КАК СуммаБезНДС,
	|	-НДСРаздельныйУчетОстатки.НДСОстаток КАК НДС
	|ИЗ
	|	РегистрНакопления.НДСРаздельныйУчет.Остатки(&КонецКвартала, Организация = &Организация) КАК НДСРаздельныйУчетОстатки
	|ГДЕ
	|	(НДСРаздельныйУчетОстатки.КоличествоОстаток <> 0
	|			ИЛИ НДСРаздельныйУчетОстатки.СуммаБезНДСОстаток <> 0
	|			ИЛИ НДСРаздельныйУчетОстатки.НДСОстаток <> 0)";
	
	ОписаниеПараметровЗапроса = Запрос.НайтиПараметры();
	Для каждого Параметр Из ОписаниеПараметровЗапроса Цикл
		Запрос.УстановитьПараметр(Параметр.Имя, СтруктураПараметров[Параметр.Имя]);
	КонецЦикла; 
	
	Результат = Запрос.Выполнить();
	Возврат Результат;
	
КонецФункции

Функция ПодготовитьТаблицуДляОтраженияВРегистреРаздельныйУчетНДС(СтруктураПараметров)
	
	ПартионныйУчет = УчетнаяПолитика.СпособОценкиМПЗ(СтруктураПараметров.Организация, СтруктураПараметров.Период) = Перечисления.СпособыОценки.ФИФО;
	
	ДанныеДвижений = СтруктураПараметров.РезультатЗапроса.Выгрузить();

	ДанныеДвижений.Колонки.СчетУчета.Имя = "СчетЗатрат";
	
	ДанныеДвижений.Колонки.Добавить("Субконто1");
	ДанныеДвижений.Колонки.Добавить("Субконто2");
	ДанныеДвижений.Колонки.Добавить("Субконто3");
	ДанныеДвижений.Колонки.Добавить("Подразделение");
	ДанныеДвижений.Колонки.Добавить("АналитикаУчетаЗатрат",
		Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиУчетаЗатрат"));	
	ДанныеДвижений.Колонки.Добавить("АналитикаУчетаНДС",
		Новый ОписаниеТипов("СправочникСсылка.КлючиАналитикиУчетаНДС"));	

	Для каждого СтрокаТаблицы Из ДанныеДвижений Цикл

		СвойстваСчета = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СтрокаТаблицы.СчетЗатрат);
		Для Ном = 1 По СвойстваСчета.КоличествоСубконто Цикл
			Если СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура
				ИЛИ СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОбъектыСтроительства Тогда
				СтрокаТаблицы["Субконто" + Ном] = СтрокаТаблицы.Номенклатура;
			ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады Тогда
				Если БухгалтерскийУчет.ВедетсяСуммовойУчетПоСкладам(СтрокаТаблицы.СчетЗатрат) Тогда
					СтрокаТаблицы["Субконто" + Ном] = СтрокаТаблицы.Склад;
				КонецЕсли;
			ИначеЕсли СвойстваСчета["ВидСубконто" + Ном] = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Партии Тогда
				Если ПартионныйУчет Тогда
					СтрокаТаблицы["Субконто" + Ном] = СтрокаТаблицы.Партия;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		СтрокаТаблицы.Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		
		СтрокаТаблицы.АналитикаУчетаЗатрат = Справочники.КлючиАналитикиУчетаЗатрат.КлючиАналитикиУчетаЗатратДокумента(СтрокаТаблицы);
		СтрокаТаблицы.АналитикаУчетаНДС = Справочники.КлючиАналитикиУчетаНДС.КлючиАналитикиУчетаНДСДокумента(СтрокаТаблицы);
		
		СтрокаТаблицы.Количество  = - СтрокаТаблицы.Количество;
		СтрокаТаблицы.НДС 		  = - СтрокаТаблицы.НДС;
				
	КонецЦикла;

	ДанныеДвижений.Колонки.Удалить("Номенклатура");
	ДанныеДвижений.Колонки.Удалить("Склад");
	ДанныеДвижений.Колонки.Удалить("Стоимость");
	ДанныеДвижений.Колонки.Удалить("НДСВключенВСтоимость");
	
	ДанныеДвижений.Свернуть("
		|Период,Организация,СпособУчетаНДС,
		|Партия,АналитикаУчетаЗатрат,АналитикаУчетаНДС",
		"Количество,СуммаБезНДС,НДС");
		
	Возврат ДанныеДвижений;
	
КонецФункции	

#КонецОбласти 

#КонецОбласти

#КонецЕсли