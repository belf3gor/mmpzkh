
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

#Область ОбработчикиСобытийФормы

&НаСервере
// Обработчик события "ПриСозданииНаСервере" формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Если в параметрах передан файл, то считаем, что обработка открыта
	// из внешнего источника, и присваиваем параметры открытия формы.
	Если Параметры.Свойство("ИмяФайла") Тогда
		Объект.ИмяФайла       = Параметры.ИмяФайла;
		ОткрытИзЖурналаОбмена = Истина;
	КонецЕсли;
	
	Элементы.СравнитьМакетСТиповымТеги.Видимость     = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОпределитьИспользованиеПользовательскогоМакетаПечати("Обработка.УПЖКХ_ПросмотрXML", "ПФ_MXL_БиблиотекаРасшифровкиТеговXML");
	Элементы.СравнитьМакетСТиповымАтрибуты.Видимость = УПЖКХ_ОбщегоНазначенияКлиентСервер.ОпределитьИспользованиеПользовательскогоМакетаПечати("Обработка.УПЖКХ_ПросмотрXML", "ПФ_MXL_БиблиотекаРасшифровкиАтрибутовXML");
	
	ПолучитьЗначениеРежимаОтладки();
	
КонецПроцедуры // ПриСозданииНаСервере()

&НаКлиенте
// Обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии(Отказ)
	
	// Если обработка открыта из внешнего источника - сразу
	// открываем переданный файл.
	Если ОткрытИзЖурналаОбмена Тогда
		ОбработатьОткрытиеФайла();
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

&НаКлиенте
// Обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьИнтерфейс" Тогда
		
		ПолучитьЗначениеРежимаОтладки();
		УстановитьВидимость();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
// Обработчик события "ПриАктивизацииСтроки" таблицы "ТаблицаФайловОбмена".
//
Процедура ТаблицаФайловОбменаПриАктивизацииСтроки(Элемент)
	
	// Если какая-либо из строк таблицы файлов выбрана,
	// то выполняем чтение данного файла и заполнение дерева тегов.
	Если НЕ Элемент.ТекущиеДанные = Неопределено Тогда
		
		ТаблицаАтрибутов.Очистить();
		ДеревоТегов.ПолучитьЭлементы().Очистить();
		
		ПутьКТекущемуФайлу  = Элемент.ТекущиеДанные.ИмяФайла;
		ТекстовоеСодержимое = "";
		
		Если ПолучитьРасширениеФайлаОбмена(ПутьКТекущемуФайлу) = "xml" Тогда
			ЗаполнитьДеревоИзФайла(ПутьКТекущемуФайлу);
		Иначе
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Неизвестный формат файла.");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ТаблицаФайловОбменаПриАктивизацииСтроки()

&НаКлиенте
// Обработчик события "ПриАктивизацииСтроки" дерева "ДеревоТегов".
//
Процедура ДеревоТеговПриАктивизацииСтроки(Элемент)
	
	// Если какая-либо из строк дерева тегов выбрана,
	// то выполняем заполнение таблицы атрибутов атрибутами данного тега.
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТаблицуАтрибутов(ТекущиеДанные.ТаблицаАтрибутов);
	ЗаполнитьТекстовоеСодержимое(ТекущиеДанные.ТекстовоеСодержимое);
	
КонецПроцедуры // ДеревоТеговПриАктивизацииСтроки()

&НаКлиенте
// Обработчик события "НачалоВыбора" поля "ИмяФайлаXML".
//
Процедура ИмяФайлаXMLНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр     = "Файл данных (*.xml)|*.xml| Zip-архив (*.zip)|*.zip";
	ДиалогВыбораФайла.Расширение = "xls|zip";
	ДиалогВыбораФайла.Заголовок  = "Выберите файл";
	ДиалогВыбораФайла.ПредварительныйПросмотр = Ложь;
	ДиалогВыбораФайла.ИндексФильтра           = 0;
	ДиалогВыбораФайла.ПолноеИмяФайла          = Объект.ИмяФайла;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ИмяФайлаXMLНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла)));
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаXMLНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		Объект.ИмяФайла = ДиалогВыбораФайла.ПолноеИмяФайла;
	КонецЕсли;
	
КонецПроцедуры // ИмяФайлаXMLНачалоВыбора()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

#Область ОбработчикиКомандФормы

&НаКлиенте
// Обработчик нажатия кнопки "Загрузить файл".
//
Процедура КомандаЗагрузитьФайл(Команда)
	
	Если ПустаяСтрока(СокрЛП(Объект.ИмяФайла)) Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Не выбран файл.");
		Возврат;
	КонецЕсли;
	
	ОбработатьОткрытиеФайла();
	
КонецПроцедуры // КомандаЗагрузитьФайл()

&НаКлиенте
// Процедура - обработчик команды "СравнитьМакетСТиповым".
//
Процедура СравнитьМакетСТиповымТеги(Команда)
	
	УПЖКХ_РаботаСДиалогамиКлиент.СравнитьТиповойМакетСПользовательским("Обработка.УПЖКХ_ПросмотрXML", "ПФ_MXL_БиблиотекаРасшифровкиТеговXML");
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды "СравнитьМакетСТиповым".
//
Процедура СравнитьМакетСТиповымАтрибуты(Команда)
	
	УПЖКХ_РаботаСДиалогамиКлиент.СравнитьТиповойМакетСПользовательским("Обработка.УПЖКХ_ПросмотрXML", "ПФ_MXL_БиблиотекаРасшифровкиАтрибутовXML");
	
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик команды "ПоказатьПредставления".
//
Процедура ПоказатьПредставления(Команда)
	
	ИспользоватьРежимОтладки = Истина;
	
	УстановитьВидимость();
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// УПРАВЛЕНИЕ ЭЛЕМЕНТАМИ ФОРМЫ

#Область УправлениеЭлементамиФормы

&НаКлиенте
// Устанавливает видимость элементов формы.
//
Процедура УстановитьВидимость()
	
	Элементы.ГруппаУправления.Видимость    = НЕ ОткрытИзЖурналаОбмена;
	Элементы.ТаблицаФайловОбмена.Видимость = ИспользуетсяСписокФайлов;
	
	Элементы.ДеревоТеговПредставление.Видимость      = ИспользоватьРежимОтладки;
	Элементы.ТаблицаАтрибутовПредставление.Видимость = ИспользоватьРежимОтладки;
	
КонецПроцедуры // УстановитьВидимость()

&НаСервере
// Обновляет значение реквизита "ИспользоватьРежимОтладки" формы.
//
Процедура ПолучитьЗначениеРежимаОтладки()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьРежимОтладки = Константы.УПЖКХ_ИспользоватьРежимОтладки.Получить();
	
КонецПроцедуры

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// УПРАВЛЕНИЕ ЗАГРУЗКОЙ ФАЙЛОВ

#Область УправлениеЗагрузкойФайлов

&НаКлиенте
// Выполняет подготовку к открытию файла, открытого вручную или переданного из внешнего источника,
// и запускает механизм загрузки данного файла.
// Может открывать файлы xml и zip.
//
Процедура ОбработатьОткрытиеФайла()
	
	ТаблицаФайловОбмена.Очистить();
	ТаблицаАтрибутов.Очистить();
	ДеревоТегов.ПолучитьЭлементы().Очистить();
	
	РасширениеФайла = ПолучитьРасширениеФайлаОбмена(Объект.ИмяФайла);
	
	ИспользуетсяСписокФайлов = РасширениеФайла = "zip";
	
	УстановитьВидимость();
	
	ЗагрузитьФайлНаКлиенте();
	
КонецПроцедуры // ОбработатьОткрытиеФайла()

&НаКлиенте
// Подготавливает сведения из библиотек и выполняет помещение файла во временное хранилище.
//
Процедура ЗагрузитьФайлНаКлиенте()
	
	Если ПустаяСтрока(СокрЛП(Объект.ИмяФайла)) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		ЗаполнитьБиблиотекуЗаменыТегов();
		ЗаполнитьБиблиотекуЗаменыАтрибутов();
		
		АдресВременногоХранилища = "";
		
		НачатьПомещениеФайла(Новый ОписаниеОповещения("ОбработатьПомещениеФайлаИзКаталогаВоВремХранилище", ЭтаФорма),
							 АдресВременногоХранилища,
							 Объект.ИмяФайла,
							 Ложь,
							 Новый УникальныйИдентификатор);
		
	Исключение
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось прочитать файл.");
		
	КонецПопытки;
	
КонецПроцедуры // ЗагрузитьФайлНаКлиенте()

&НаКлиенте
// Обработчик помещения файла во временное хранилище.
//
Процедура ОбработатьПомещениеФайлаИзКаталогаВоВремХранилище(Результат, АдресВременногоХранилища, ИмяФайла, ДополнительныеПараметры) Экспорт
	
	Если Результат = Истина Тогда
		ЗагрузитьФайлНаСервере(АдресВременногоХранилища, ИмяФайла);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьПомещениеФайлаИзКаталогаВоВремХранилище()

&НаСервере
// Выполняет загрузку файла на сервер и выполняет его открытие.
//
Процедура ЗагрузитьФайлНаСервере(АдресВременногоХранилища, ИмяФайла)
	
	КаталогВременныхФайлов = КаталогВременныхФайлов();
	ПутьКВременномуФайлу   = КаталогВременныхФайлов + ПолучитьИмяФайлаИзПолногоПути(ИмяФайла);
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	ДвоичныеДанные.Записать(ПутьКВременномуФайлу);
	
	// Если файл - XML, открываем его.
	Если РасширениеФайла = "xml" Тогда // xml.
		
		ПутьКТекущемуФайлу = ПутьКВременномуФайлу;
		
	// Если файл - ZIP, то заполняем его содержимым таблицу файлов
	// и выполняем открытие первого файла архива.
	ИначеЕсли РасширениеФайла = "zip" Тогда
		
		Попытка
			
			ФайлАрхива = Новый ЧтениеZIPФайла(ПутьКВременномуФайлу);
			
			Для каждого ТекЗапакованныйАрхива из ФайлАрхива Цикл
				НоваяСтрока = ТаблицаФайловОбмена.Добавить();
				НоваяСтрока.ИмяФайла            = КаталогВременныхФайлов + ТекЗапакованныйАрхива.Имя;
				НоваяСтрока.ИмяФайлаСокращенное = ТекЗапакованныйАрхива.Имя;
			КонецЦикла;
			
			ФайлАрхива.ИзвлечьВсе(КаталогВременныхФайлов);
			
			Если НЕ ТаблицаФайловОбмена.Количество() = 0 Тогда
				ПутьКТекущемуФайлу = ТаблицаФайловОбмена[0].ИмяФайла;
			Иначе
				ВызватьИсключение "архив не содержит файлов обмена.";
			КонецЕсли;
			
		Исключение
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось открыть файл: " + ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
	Иначе
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось открыть файл.");
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДеревоИзФайла(ПутьКТекущемуФайлу);
	
КонецПроцедуры // ЗагрузитьФайлНаСервере()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ФАЙЛАМИ

#Область ОбщиеПроцедурыИФункцииРаботыСФайлами

&НаКлиентеНаСервереБезКонтекста
// Определяет расширение файла обмена.
//
Функция ПолучитьРасширениеФайлаОбмена(ИмяФайла)
	
	Расширение = "";
	
	Попытка
		
		ДанныеФайла = Новый ДвоичныеДанные(ИмяФайла);
		ТекстФайла  = Base64Строка(ДанныеФайла);
		
		// Для файлов с кодировкой UTF8 в начале файла имеются символы "77u/",
		// поэтому для этого случая нужно получать первые 7 символов, а не 3.
		ПервыеСимволыUTF8 = Лев(ТекстФайла, 7);
		ПервыеСимволыANSI = Лев(ТекстФайла, 3);
		
		// xml.
		Если ПервыеСимволыANSI = "PD9" ИЛИ ПервыеСимволыUTF8 = "77u/PD9" Тогда
			Расширение = "xml";
		// zip.
		ИначеЕсли ПервыеСимволыANSI = "UEs" Тогда
			Расширение = "zip";
		КонецЕсли;
		
	Исключение
	КонецПопытки;
	
	Возврат Расширение;
	
КонецФункции // ПолучитьРасширениеФайлаОбмена()

&НаСервере
// Возвращает сокращенное имя файла из полного пути.
//
Функция ПолучитьИмяФайлаИзПолногоПути(ПолныйПуть)
	
	ИмяФайла = ПолныйПуть;
	
	ПозицияРазделителя = СтрНайти(ПолныйПуть, "\", НаправлениеПоиска.СКонца);
	
	Если ПозицияРазделителя = 0 Тогда
		ПозицияРазделителя = СтрНайти(ПолныйПуть, "/", НаправлениеПоиска.СКонца);
	КонецЕсли;
	
	Если НЕ ПозицияРазделителя = 0 Тогда
		ИмяФайла = Прав(ИмяФайла, СтрДлина(ИмяФайла) - ПозицияРазделителя);
	КонецЕсли;
	
	Возврат ИмяФайла;
	
КонецФункции // ПолучитьИмяФайлаИзПолногоПути()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОЛУЧЕНИЯ НАСТРОЕК ЧТЕНИЯ ЭЛЕМЕНТОВ DOM ИЗ БИБЛИОТЕК

#Область ПроцедурыИФункцииПолученияНастроекЧтенияЭлементовDOMИзБиблиотек

&НаСервере
// Заполняет табличную часть "БиблиотекаРасшифровкиТеговXML" данными из библиотеки расшифровки тегов.
//
Процедура ЗаполнитьБиблиотекуЗаменыТегов()
	
	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Обработка.УПЖКХ_ПросмотрXML.ПФ_MXL_БиблиотекаРасшифровкиТеговXML");
	
	КоличествоСтрок = Макет.ВысотаТаблицы - 1;
	
	Для СчСтрок = 1 по КоличествоСтрок Цикл
		
		НоваяСтрока = Объект.БиблиотекаРасшифровкиТеговXML.Добавить();
		
		СтрокаМакета = 1 + СчСтрок;
		НоваяСтрока.НаименованиеТега                        = Макет.Область(СтрокаМакета, 1, СтрокаМакета, 1).Текст;
		НоваяСтрока.НаименованиеДляЗамены                   = Макет.Область(СтрокаМакета, 2, СтрокаМакета, 2).Текст;
		НоваяСтрока.ЗначениеДочернегоАтрибутаДляВыводаВТеге = Макет.Область(СтрокаМакета, 3, СтрокаМакета, 3).Текст;
		НоваяСтрока.ВыводитьТекстовоеСодержимое             = НЕ Макет.Область(СтрокаМакета, 4, СтрокаМакета, 4).Текст = "";
		НоваяСтрока.РодительскийТег                         = Макет.Область(СтрокаМакета, 5, СтрокаМакета, 5).Текст;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьБиблиотекуЗаменыТегов()

&НаСервере
// Заполняет табличную часть "БиблиотекаРасшифровкиАтрибутовXML" данными из библиотеки расшифровки атрибутов.
//
Процедура ЗаполнитьБиблиотекуЗаменыАтрибутов()
	
	Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Обработка.УПЖКХ_ПросмотрXML.ПФ_MXL_БиблиотекаРасшифровкиАтрибутовXML");
	
	КоличествоСтрок = Макет.ВысотаТаблицы - 1;
	
	Для СчСтрок = 1 по КоличествоСтрок Цикл
		
		НоваяСтрока = Объект.БиблиотекаРасшифровкиАтрибутовXML.Добавить();
		
		СтрокаМакета = 1 + СчСтрок;
		НоваяСтрока.НаименованиеАтрибута  = Макет.Область(СтрокаМакета, 1, СтрокаМакета, 1).Текст;
		НоваяСтрока.НаименованиеДляЗамены = Макет.Область(СтрокаМакета, 2, СтрокаМакета, 2).Текст;
		НоваяСтрока.РодительскийТег       = Макет.Область(СтрокаМакета, 3, СтрокаМакета, 3).Текст;
		НоваяСтрока.ТипАтрибута           = Макет.Область(СтрокаМакета, 4, СтрокаМакета, 4).Текст;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьБиблиотекуЗаменыАтрибутов()

&НаСервере
// Возвращает структуру с параметрами расшифровки тега, используемую для формирования дерева тегов.
// Структура содержит:
//  - НаименованиеТега - Строка - наименование тега для вывода в дереве тегов.
//  - ВыводитьТекстовоеСодержимое - Булево - определяет необходимость вывода текстового содержимого тега.
//
Функция ПолучитьСтруктуруТега(ТекУзел)
	
	НаименованиеТега            = ТекУзел.ИмяУзла;
	РодительскийУзел            = ТекУзел.РодительскийУзел.ИмяУзла;
	ВыводитьТекстовоеСодержимое = Ложь;
	
	// Сперва ищем с совпадением по родительскому тегу.
	СтрокиДляЗамены = Объект.БиблиотекаРасшифровкиТеговXML.НайтиСтроки(Новый Структура("НаименованиеТега, РодительскийТег", НаименованиеТега, РодительскийУзел));
	
	// Если по родительскому тегу не находим - ищем без родительского тега тега.
	Если СтрокиДляЗамены.Количество() = 0 Тогда
		СтрокиДляЗамены = Объект.БиблиотекаРасшифровкиТеговXML.НайтиСтроки(Новый Структура("НаименованиеТега, РодительскийТег", НаименованиеТега, ""));
	КонецЕсли;
	
	ПредставлениеТега = "";
	
	Если НЕ СтрокиДляЗамены.Количество() = 0 Тогда
		
		СтрокаДляЗамены             = СтрокиДляЗамены[0];
		НаименованиеТега            = СтрокаДляЗамены.НаименованиеДляЗамены;
		ВыводитьТекстовоеСодержимое = СтрокаДляЗамены.ВыводитьТекстовоеСодержимое;
		ПредставлениеТега           = СтрокаДляЗамены.НаименованиеТега;
		
		Если НЕ ПустаяСтрока(СтрокаДляЗамены.ЗначениеДочернегоАтрибутаДляВыводаВТеге) Тогда
			
			ЭлементАтрибут = ТекУзел.Атрибуты.ПолучитьИменованныйЭлемент(СтрокаДляЗамены.ЗначениеДочернегоАтрибутаДляВыводаВТеге);
			
			Если НЕ ЭлементАтрибут = Неопределено Тогда
				НаименованиеТега = ЭлементАтрибут.Значение + " (" + НаименованиеТега + ")";
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Структура("НаименованиеТега, ВыводитьТекстовоеСодержимое, ПредставлениеТега", НаименованиеТега, ВыводитьТекстовоеСодержимое, ПредставлениеТега);
	
КонецФункции // ПолучитьСтруктуруТега()

&НаСервере
// Возвращает структуру с параметрами расшифровки атрибута, используемую для формирования таблицы атрибутов.
// Структура содержит:
//  - НаименованиеАтрибута - Строка - наименование атрибута для вывода в таблице атрибутов.
//  - ЗначениеАтрибута - Строка/Число/Дата - содержит значение атрибута.
//
Функция ПолучитьСтруктуруАтрибута(ТекАтрибут, РодительскийТег)
	
	НаименованиеАтрибута = ТекАтрибут.Имя;
	ЗначениеАтрибута     = ТекАтрибут.Значение;
	
	// Сперва ищем с совпадением по тегу.
	СтрокиДляЗамены = Объект.БиблиотекаРасшифровкиАтрибутовXML.НайтиСтроки(Новый Структура("НаименованиеАтрибута, РодительскийТег", НаименованиеАтрибута, РодительскийТег));
	
	// Если по тегу не находим - ищем без тега.
	Если СтрокиДляЗамены.Количество() = 0 Тогда
		СтрокиДляЗамены = Объект.БиблиотекаРасшифровкиАтрибутовXML.НайтиСтроки(Новый Структура("НаименованиеАтрибута, РодительскийТег", НаименованиеАтрибута, ""));
	КонецЕсли;
	
	ПредставлениеАтрибута = "";
	
	Если НЕ СтрокиДляЗамены.Количество() = 0 Тогда
		
		СтрокаДляЗамены       = СтрокиДляЗамены[0];
		НаименованиеАтрибута  = СтрокаДляЗамены.НаименованиеДляЗамены;
		ПредставлениеАтрибута = СтрокаДляЗамены.НаименованиеАтрибута;
		
		Если НЕ ПустаяСтрока(СтрокаДляЗамены.ТипАтрибута) Тогда
			Попытка
				ЗначениеАтрибута = Строка(XMLЗначение(Тип(СтрокаДляЗамены.ТипАтрибута), ЗначениеАтрибута));
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Новый Структура("НаименованиеАтрибута, ЗначениеАтрибута, ПредставлениеАтрибута", НаименованиеАтрибута, ЗначениеАтрибута, ПредставлениеАтрибута);
	
КонецФункции // ПолучитьСтруктуруАтрибута()

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ЧТЕНИЯ ДАННЫХ ИЗ XML

#Область ПроцедурыИФункцииЧтенияДанныхИзXML

&НаСервере
// Выполняет чтение файла и заполнение дерева тегов.
//
Процедура ЗаполнитьДеревоИзФайла(ПутьКФайлу)
	
	Попытка
		
		// Открытие и считывание данных из файла.
		Файл = Новый ЧтениеXML;
		Файл.ОткрытьФайл(ПутьКФайлу);
		
		Построитель = Новый ПостроительDOM;
		ДокDOM = Построитель.Прочитать(Файл);
		
		Файл.Закрыть();
		
		ЗаполнитьДеревоТеговРекурсивно(ДокDOM.ПервыйДочерний);
		
	Исключение
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не удалось прочитать файл.");
		
	КонецПопытки;
	
КонецПроцедуры // ЗаполнитьДеревоИзФайла()

&НаСервере
// Выполняет рекурсивное заполнение дерева тегов.
//
Процедура ЗаполнитьДеревоТеговРекурсивно(ТекУзел, РодительскаяВеткаДерева = Неопределено)
	
	// Создаем текущую ветку.
	Если РодительскаяВеткаДерева = Неопределено Тогда
		ТекущаяВеткаДерева = ДеревоТегов.ПолучитьЭлементы().Добавить();
	Иначе
		ТекущаяВеткаДерева = РодительскаяВеткаДерева.ПолучитьЭлементы().Добавить();
	КонецЕсли;
	
	// Наименование тега.
	Если НЕ ТекУзел.ИмяУзла = Неопределено Тогда
		
		СтруктураПараметровТега          = ПолучитьСтруктуруТега(ТекУзел);
		ТекущаяВеткаДерева.Тег           = СтруктураПараметровТега.НаименованиеТега;
		ТекущаяВеткаДерева.Представление = СтруктураПараметровТега.ПредставлениеТега;
		
		// Текстовое содержимое.
		Если СтруктураПараметровТега.ВыводитьТекстовоеСодержимое И НЕ ТекУзел.ТекстовоеСодержимое = Неопределено Тогда
			ТекущаяВеткаДерева.ТекстовоеСодержимое = ТекУзел.ТекстовоеСодержимое;
		КонецЕсли;
		
		// Заполняем атрибуты.
		Если НЕ ТекУзел.Атрибуты = Неопределено Тогда
			Для каждого ТекАтрибут из ТекУзел.Атрибуты Цикл
				СтруктураАтрибута = ПолучитьСтруктуруАтрибута(ТекАтрибут, ТекУзел.ИмяУзла);
				
				СтрокаАтрибута = ТекущаяВеткаДерева.ТаблицаАтрибутов.Добавить();
				СтрокаАтрибута.Наименование  = СтруктураАтрибута.НаименованиеАтрибута;
				СтрокаАтрибута.Значение      = СтруктураАтрибута.ЗначениеАтрибута;
				СтрокаАтрибута.Представление = СтруктураАтрибута.ПредставлениеАтрибута;
			КонецЦикла;
		КонецЕсли;
		
		// Дочерние теги.
		Если НЕ ТекУзел.ДочерниеУзлы = Неопределено Тогда
			Для каждого ТекДочернийУзел из ТекУзел.ДочерниеУзлы Цикл
				Если УПЖКХ_ВебИнтеграцияВзаимодействиеСБазойДанных.УзелЯвляетсяТегом(ТекДочернийУзел) Тогда
					ЗаполнитьДеревоТеговРекурсивно(ТекДочернийУзел, ТекущаяВеткаДерева);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДеревоТеговРекурсивно()

&НаКлиенте
// Выполняет заполнение таблицы атрибутов.
//
Процедура ЗаполнитьТаблицуАтрибутов(ТаблицаАтрибутовВходящая)
	
	ТаблицаАтрибутов.Очистить();
	
	Для каждого ТекСтрокаАтрибута из ТаблицаАтрибутовВходящая Цикл
		НоваяСтрока = ТаблицаАтрибутов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаАтрибута);
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблицуАтрибутов()

&НаКлиенте
// Выполняет заполнение поля "Текстовое содержимое" формы.
//
Процедура ЗаполнитьТекстовоеСодержимое(ТекстовоеСодержимоеВходящее)
	
	ТекстовоеСодержимое = ТекстовоеСодержимоеВходящее;
	
КонецПроцедуры // ЗаполнитьТекстовоеСодержимое()

#КонецОбласти
